
A6_TGH1_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004af0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00004af0  00004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000174  20000000  00004af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000638  20000174  00004c6c  00020174  2**2
                  ALLOC
  4 .stack        00002004  200007ac  000052a4  00020174  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0002cfdf  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003fa4  00000000  00000000  0004d1d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005b6a  00000000  00000000  00051178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000610  00000000  00000000  00056ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000680  00000000  00000000  000572f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001af5d  00000000  00000000  00057972  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cdb1  00000000  00000000  000728cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008bf17  00000000  00000000  0007f680  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001454  00000000  00000000  0010b598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 27 00 20 a5 1d 00 00 a1 1d 00 00 a1 1d 00 00     .'. ............
	...
      2c:	a1 1d 00 00 00 00 00 00 00 00 00 00 a1 1d 00 00     ................
      3c:	a1 1d 00 00 a1 1d 00 00 a1 1d 00 00 a1 1d 00 00     ................
      4c:	a1 1d 00 00 a1 1d 00 00 a1 1d 00 00 a1 1d 00 00     ................
      5c:	a1 1d 00 00 a1 1d 00 00 d5 0f 00 00 e5 0f 00 00     ................
      6c:	f5 0f 00 00 05 10 00 00 15 10 00 00 25 10 00 00     ............%...
      7c:	a1 1d 00 00 a1 1d 00 00 a1 1d 00 00 a1 1d 00 00     ................
      8c:	a1 1d 00 00 a1 1d 00 00 00 00 00 00 00 00 00 00     ................
      9c:	a1 1d 00 00 a1 1d 00 00 a1 1d 00 00 a1 1d 00 00     ................
      ac:	a1 1d 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000174 	.word	0x20000174
      d4:	00000000 	.word	0x00000000
      d8:	00004af8 	.word	0x00004af8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000178 	.word	0x20000178
     108:	00004af8 	.word	0x00004af8
     10c:	00004af8 	.word	0x00004af8
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     118:	ac01      	add	r4, sp, #4
     11a:	2501      	movs	r5, #1
     11c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     11e:	2700      	movs	r7, #0
     120:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     122:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     124:	0021      	movs	r1, r4
     126:	2017      	movs	r0, #23
     128:	4e06      	ldr	r6, [pc, #24]	; (144 <system_board_init+0x30>)
     12a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     12c:	2280      	movs	r2, #128	; 0x80
     12e:	0412      	lsls	r2, r2, #16
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <system_board_init+0x34>)
     132:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     134:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     136:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     138:	0021      	movs	r1, r4
     13a:	2037      	movs	r0, #55	; 0x37
     13c:	47b0      	blx	r6
}
     13e:	b003      	add	sp, #12
     140:	bdf0      	pop	{r4, r5, r6, r7, pc}
     142:	46c0      	nop			; (mov r8, r8)
     144:	00000bcd 	.word	0x00000bcd
     148:	41004400 	.word	0x41004400

0000014c <i2c_master_init>:
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
					((sclsm_flag) && (tmp_data_length == 1)))) {
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     14c:	b5f0      	push	{r4, r5, r6, r7, lr}
     14e:	46d6      	mov	lr, sl
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
     150:	464f      	mov	r7, r9
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
     152:	4646      	mov	r6, r8
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
     154:	b5c0      	push	{r6, r7, lr}
     156:	b08a      	sub	sp, #40	; 0x28
     158:	0006      	movs	r6, r0
			_i2c_master_wait_for_sync(module);
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
     15a:	000f      	movs	r7, r1
     15c:	0014      	movs	r4, r2
     15e:	6031      	str	r1, [r6, #0]
		packet->data[counter] = i2c_module->DATA.reg;
     160:	0008      	movs	r0, r1
     162:	4ba0      	ldr	r3, [pc, #640]	; (3e4 <i2c_master_init+0x298>)
     164:	4798      	blx	r3
     166:	4aa0      	ldr	r2, [pc, #640]	; (3e8 <i2c_master_init+0x29c>)
     168:	6a11      	ldr	r1, [r2, #32]
     16a:	1c85      	adds	r5, r0, #2
     16c:	2301      	movs	r3, #1
			_i2c_master_wait_for_sync(module);
     16e:	40ab      	lsls	r3, r5
     170:	430b      	orrs	r3, r1
     172:	6213      	str	r3, [r2, #32]
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     174:	a909      	add	r1, sp, #36	; 0x24
     176:	7b23      	ldrb	r3, [r4, #12]
     178:	700b      	strb	r3, [r1, #0]
     17a:	3014      	adds	r0, #20
     17c:	b2c5      	uxtb	r5, r0
     17e:	0028      	movs	r0, r5
				return STATUS_ERR_PACKET_COLLISION;
     180:	4b9a      	ldr	r3, [pc, #616]	; (3ec <i2c_master_init+0x2a0>)
     182:	4798      	blx	r3
     184:	0028      	movs	r0, r5
     186:	4b9a      	ldr	r3, [pc, #616]	; (3f0 <i2c_master_init+0x2a4>)
     188:	4798      	blx	r3
     18a:	7b20      	ldrb	r0, [r4, #12]
     18c:	2100      	movs	r1, #0
     18e:	4b99      	ldr	r3, [pc, #612]	; (3f4 <i2c_master_init+0x2a8>)
     190:	4798      	blx	r3
     192:	683b      	ldr	r3, [r7, #0]
     194:	201c      	movs	r0, #28
     196:	079b      	lsls	r3, r3, #30
     198:	d505      	bpl.n	1a6 <i2c_master_init+0x5a>
     19a:	b00a      	add	sp, #40	; 0x28
     19c:	bc1c      	pop	{r2, r3, r4}
     19e:	4690      	mov	r8, r2
}
     1a0:	4699      	mov	r9, r3
     1a2:	46a2      	mov	sl, r4
     1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1a6:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
     1a8:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     1aa:	07db      	lsls	r3, r3, #31
     1ac:	d4f5      	bmi.n	19a <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     1ae:	6830      	ldr	r0, [r6, #0]
     1b0:	4b8c      	ldr	r3, [pc, #560]	; (3e4 <i2c_master_init+0x298>)
     1b2:	4699      	mov	r9, r3
     1b4:	4798      	blx	r3
     1b6:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     1b8:	498f      	ldr	r1, [pc, #572]	; (3f8 <i2c_master_init+0x2ac>)
     1ba:	4b90      	ldr	r3, [pc, #576]	; (3fc <i2c_master_init+0x2b0>)
     1bc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     1be:	00ad      	lsls	r5, r5, #2
     1c0:	4b8f      	ldr	r3, [pc, #572]	; (400 <i2c_master_init+0x2b4>)
     1c2:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
     1c4:	2300      	movs	r3, #0
     1c6:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
     1c8:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
     1ca:	2500      	movs	r5, #0
     1cc:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
     1ce:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
     1d0:	2225      	movs	r2, #37	; 0x25
     1d2:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
     1d4:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     1d6:	3314      	adds	r3, #20
     1d8:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     1da:	6833      	ldr	r3, [r6, #0]
     1dc:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     1de:	0018      	movs	r0, r3
     1e0:	47c8      	blx	r9
     1e2:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1e4:	2380      	movs	r3, #128	; 0x80
     1e6:	aa08      	add	r2, sp, #32
     1e8:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1ea:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1ec:	2301      	movs	r3, #1
     1ee:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
     1f0:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1f2:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
     1f4:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     1f6:	2800      	cmp	r0, #0
     1f8:	d100      	bne.n	1fc <i2c_master_init+0xb0>
     1fa:	e0af      	b.n	35c <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1fc:	ab08      	add	r3, sp, #32
     1fe:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     200:	2302      	movs	r3, #2
     202:	aa08      	add	r2, sp, #32
     204:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     206:	0c00      	lsrs	r0, r0, #16
     208:	b2c0      	uxtb	r0, r0
     20a:	0011      	movs	r1, r2
     20c:	4b7d      	ldr	r3, [pc, #500]	; (404 <i2c_master_init+0x2b8>)
     20e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     210:	2f00      	cmp	r7, #0
     212:	d100      	bne.n	216 <i2c_master_init+0xca>
     214:	e0a7      	b.n	366 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
     216:	ab08      	add	r3, sp, #32
     218:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     21a:	2302      	movs	r3, #2
     21c:	aa08      	add	r2, sp, #32
     21e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     220:	0c3f      	lsrs	r7, r7, #16
     222:	b2f8      	uxtb	r0, r7
     224:	0011      	movs	r1, r2
     226:	4b77      	ldr	r3, [pc, #476]	; (404 <i2c_master_init+0x2b8>)
     228:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     22a:	8aa3      	ldrh	r3, [r4, #20]
     22c:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
     22e:	8ae3      	ldrh	r3, [r4, #22]
     230:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     232:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     234:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     236:	2b00      	cmp	r3, #0
     238:	d104      	bne.n	244 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     23a:	4b73      	ldr	r3, [pc, #460]	; (408 <i2c_master_init+0x2bc>)
     23c:	789b      	ldrb	r3, [r3, #2]
     23e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     240:	0fdb      	lsrs	r3, r3, #31
     242:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
     244:	68a1      	ldr	r1, [r4, #8]
     246:	6923      	ldr	r3, [r4, #16]
     248:	430b      	orrs	r3, r1
     24a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
     24c:	2224      	movs	r2, #36	; 0x24
     24e:	5ca2      	ldrb	r2, [r4, r2]
     250:	2a00      	cmp	r2, #0
     252:	d002      	beq.n	25a <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     254:	2280      	movs	r2, #128	; 0x80
     256:	05d2      	lsls	r2, r2, #23
     258:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
     25a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     25c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     25e:	222c      	movs	r2, #44	; 0x2c
     260:	5ca2      	ldrb	r2, [r4, r2]
     262:	2a00      	cmp	r2, #0
     264:	d103      	bne.n	26e <i2c_master_init+0x122>
     266:	2280      	movs	r2, #128	; 0x80
     268:	0492      	lsls	r2, r2, #18
     26a:	4291      	cmp	r1, r2
     26c:	d102      	bne.n	274 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     26e:	2280      	movs	r2, #128	; 0x80
     270:	0512      	lsls	r2, r2, #20
     272:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
     274:	222d      	movs	r2, #45	; 0x2d
     276:	5ca2      	ldrb	r2, [r4, r2]
     278:	2a00      	cmp	r2, #0
     27a:	d002      	beq.n	282 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	0412      	lsls	r2, r2, #16
     280:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
     282:	222e      	movs	r2, #46	; 0x2e
     284:	5ca2      	ldrb	r2, [r4, r2]
     286:	2a00      	cmp	r2, #0
     288:	d002      	beq.n	290 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     28a:	2280      	movs	r2, #128	; 0x80
     28c:	03d2      	lsls	r2, r2, #15
     28e:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
     290:	4642      	mov	r2, r8
     292:	6812      	ldr	r2, [r2, #0]
     294:	4313      	orrs	r3, r2
     296:	4642      	mov	r2, r8
     298:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     29a:	2380      	movs	r3, #128	; 0x80
     29c:	005b      	lsls	r3, r3, #1
     29e:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     2a0:	4648      	mov	r0, r9
     2a2:	3014      	adds	r0, #20
     2a4:	b2c0      	uxtb	r0, r0
     2a6:	4b59      	ldr	r3, [pc, #356]	; (40c <i2c_master_init+0x2c0>)
     2a8:	4798      	blx	r3
     2aa:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
     2ac:	23fa      	movs	r3, #250	; 0xfa
     2ae:	009b      	lsls	r3, r3, #2
     2b0:	6822      	ldr	r2, [r4, #0]
     2b2:	435a      	muls	r2, r3
     2b4:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     2b6:	6863      	ldr	r3, [r4, #4]
     2b8:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
     2ba:	4d55      	ldr	r5, [pc, #340]	; (410 <i2c_master_init+0x2c4>)
     2bc:	47a8      	blx	r5
     2be:	9000      	str	r0, [sp, #0]
     2c0:	9101      	str	r1, [sp, #4]
     2c2:	464b      	mov	r3, r9
     2c4:	0058      	lsls	r0, r3, #1
     2c6:	47a8      	blx	r5
     2c8:	9002      	str	r0, [sp, #8]
     2ca:	9103      	str	r1, [sp, #12]
     2cc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     2ce:	47a8      	blx	r5
     2d0:	9004      	str	r0, [sp, #16]
     2d2:	9105      	str	r1, [sp, #20]
     2d4:	4f4f      	ldr	r7, [pc, #316]	; (414 <i2c_master_init+0x2c8>)
     2d6:	4a50      	ldr	r2, [pc, #320]	; (418 <i2c_master_init+0x2cc>)
     2d8:	4b50      	ldr	r3, [pc, #320]	; (41c <i2c_master_init+0x2d0>)
     2da:	9800      	ldr	r0, [sp, #0]
     2dc:	9901      	ldr	r1, [sp, #4]
     2de:	47b8      	blx	r7
     2e0:	0002      	movs	r2, r0
     2e2:	000b      	movs	r3, r1
     2e4:	9804      	ldr	r0, [sp, #16]
     2e6:	9905      	ldr	r1, [sp, #20]
     2e8:	47b8      	blx	r7
     2ea:	4e4d      	ldr	r6, [pc, #308]	; (420 <i2c_master_init+0x2d4>)
     2ec:	2200      	movs	r2, #0
     2ee:	4b4d      	ldr	r3, [pc, #308]	; (424 <i2c_master_init+0x2d8>)
     2f0:	47b0      	blx	r6
     2f2:	9004      	str	r0, [sp, #16]
     2f4:	9105      	str	r1, [sp, #20]
     2f6:	4648      	mov	r0, r9
     2f8:	47a8      	blx	r5
     2fa:	0002      	movs	r2, r0
     2fc:	000b      	movs	r3, r1
     2fe:	9804      	ldr	r0, [sp, #16]
     300:	9905      	ldr	r1, [sp, #20]
     302:	47b8      	blx	r7
     304:	0002      	movs	r2, r0
     306:	000b      	movs	r3, r1
     308:	4d47      	ldr	r5, [pc, #284]	; (428 <i2c_master_init+0x2dc>)
     30a:	9800      	ldr	r0, [sp, #0]
     30c:	9901      	ldr	r1, [sp, #4]
     30e:	47a8      	blx	r5
     310:	9a02      	ldr	r2, [sp, #8]
     312:	9b03      	ldr	r3, [sp, #12]
     314:	47b0      	blx	r6
     316:	2200      	movs	r2, #0
     318:	4b44      	ldr	r3, [pc, #272]	; (42c <i2c_master_init+0x2e0>)
     31a:	47a8      	blx	r5
     31c:	9a02      	ldr	r2, [sp, #8]
     31e:	9b03      	ldr	r3, [sp, #12]
     320:	4d43      	ldr	r5, [pc, #268]	; (430 <i2c_master_init+0x2e4>)
     322:	47a8      	blx	r5
     324:	4b43      	ldr	r3, [pc, #268]	; (434 <i2c_master_init+0x2e8>)
     326:	4798      	blx	r3
     328:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	049b      	lsls	r3, r3, #18
     32e:	68a2      	ldr	r2, [r4, #8]
     330:	429a      	cmp	r2, r3
     332:	d01e      	beq.n	372 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     334:	0003      	movs	r3, r0
     336:	2040      	movs	r0, #64	; 0x40
     338:	2dff      	cmp	r5, #255	; 0xff
     33a:	d900      	bls.n	33e <i2c_master_init+0x1f2>
     33c:	e72d      	b.n	19a <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
     33e:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
     340:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     342:	25ff      	movs	r5, #255	; 0xff
     344:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     346:	0624      	lsls	r4, r4, #24
     348:	4325      	orrs	r5, r4
     34a:	0400      	lsls	r0, r0, #16
     34c:	23ff      	movs	r3, #255	; 0xff
     34e:	041b      	lsls	r3, r3, #16
     350:	4018      	ands	r0, r3
     352:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     354:	4643      	mov	r3, r8
     356:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
     358:	2000      	movs	r0, #0
     35a:	e71e      	b.n	19a <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     35c:	2100      	movs	r1, #0
     35e:	4640      	mov	r0, r8
     360:	4b35      	ldr	r3, [pc, #212]	; (438 <i2c_master_init+0x2ec>)
     362:	4798      	blx	r3
     364:	e74a      	b.n	1fc <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     366:	2101      	movs	r1, #1
     368:	4640      	mov	r0, r8
     36a:	4b33      	ldr	r3, [pc, #204]	; (438 <i2c_master_init+0x2ec>)
     36c:	4798      	blx	r3
     36e:	0007      	movs	r7, r0
     370:	e751      	b.n	216 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     372:	26fa      	movs	r6, #250	; 0xfa
     374:	00b6      	lsls	r6, r6, #2
     376:	4653      	mov	r3, sl
     378:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     37a:	9800      	ldr	r0, [sp, #0]
     37c:	9901      	ldr	r1, [sp, #4]
     37e:	0002      	movs	r2, r0
     380:	000b      	movs	r3, r1
     382:	4c27      	ldr	r4, [pc, #156]	; (420 <i2c_master_init+0x2d4>)
     384:	47a0      	blx	r4
     386:	9000      	str	r0, [sp, #0]
     388:	9101      	str	r1, [sp, #4]
     38a:	0030      	movs	r0, r6
     38c:	4b20      	ldr	r3, [pc, #128]	; (410 <i2c_master_init+0x2c4>)
     38e:	4798      	blx	r3
     390:	2200      	movs	r2, #0
     392:	4b2a      	ldr	r3, [pc, #168]	; (43c <i2c_master_init+0x2f0>)
     394:	47b8      	blx	r7
     396:	0002      	movs	r2, r0
     398:	000b      	movs	r3, r1
     39a:	9800      	ldr	r0, [sp, #0]
     39c:	9901      	ldr	r1, [sp, #4]
     39e:	4c24      	ldr	r4, [pc, #144]	; (430 <i2c_master_init+0x2e4>)
     3a0:	47a0      	blx	r4
     3a2:	2200      	movs	r2, #0
     3a4:	4b21      	ldr	r3, [pc, #132]	; (42c <i2c_master_init+0x2e0>)
     3a6:	4c20      	ldr	r4, [pc, #128]	; (428 <i2c_master_init+0x2dc>)
     3a8:	47a0      	blx	r4
     3aa:	4b22      	ldr	r3, [pc, #136]	; (434 <i2c_master_init+0x2e8>)
     3ac:	4798      	blx	r3
     3ae:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
     3b0:	d00c      	beq.n	3cc <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     3b2:	0031      	movs	r1, r6
     3b4:	9807      	ldr	r0, [sp, #28]
     3b6:	4b22      	ldr	r3, [pc, #136]	; (440 <i2c_master_init+0x2f4>)
     3b8:	4798      	blx	r3
     3ba:	3802      	subs	r0, #2
     3bc:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3be:	002b      	movs	r3, r5
     3c0:	2dff      	cmp	r5, #255	; 0xff
     3c2:	d80c      	bhi.n	3de <i2c_master_init+0x292>
     3c4:	28ff      	cmp	r0, #255	; 0xff
     3c6:	d9bc      	bls.n	342 <i2c_master_init+0x1f6>
     3c8:	2040      	movs	r0, #64	; 0x40
     3ca:	e6e6      	b.n	19a <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     3cc:	0071      	lsls	r1, r6, #1
     3ce:	1e48      	subs	r0, r1, #1
     3d0:	9b07      	ldr	r3, [sp, #28]
     3d2:	469c      	mov	ip, r3
     3d4:	4460      	add	r0, ip
     3d6:	4b1a      	ldr	r3, [pc, #104]	; (440 <i2c_master_init+0x2f4>)
     3d8:	4798      	blx	r3
     3da:	3801      	subs	r0, #1
     3dc:	e7ef      	b.n	3be <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     3de:	2040      	movs	r0, #64	; 0x40
     3e0:	e6db      	b.n	19a <i2c_master_init+0x4e>
     3e2:	46c0      	nop			; (mov r8, r8)
     3e4:	00000f2d 	.word	0x00000f2d
     3e8:	40000400 	.word	0x40000400
     3ec:	00001c49 	.word	0x00001c49
     3f0:	00001bbd 	.word	0x00001bbd
     3f4:	00000d69 	.word	0x00000d69
     3f8:	00000695 	.word	0x00000695
     3fc:	00000f69 	.word	0x00000f69
     400:	2000071c 	.word	0x2000071c
     404:	00001d41 	.word	0x00001d41
     408:	41002000 	.word	0x41002000
     40c:	00001c65 	.word	0x00001c65
     410:	00003da9 	.word	0x00003da9
     414:	00003191 	.word	0x00003191
     418:	e826d695 	.word	0xe826d695
     41c:	3e112e0b 	.word	0x3e112e0b
     420:	00002509 	.word	0x00002509
     424:	40240000 	.word	0x40240000
     428:	00003691 	.word	0x00003691
     42c:	3ff00000 	.word	0x3ff00000
     430:	00002b29 	.word	0x00002b29
     434:	00003cbd 	.word	0x00003cbd
     438:	00000db5 	.word	0x00000db5
     43c:	40080000 	.word	0x40080000
     440:	000021a1 	.word	0x000021a1

00000444 <_i2c_master_address_response>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     444:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     446:	7e1a      	ldrb	r2, [r3, #24]
     448:	0792      	lsls	r2, r2, #30
     44a:	d507      	bpl.n	45c <_i2c_master_address_response+0x18>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     44c:	2202      	movs	r2, #2
     44e:	761a      	strb	r2, [r3, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     450:	8b5b      	ldrh	r3, [r3, #26]
     452:	079b      	lsls	r3, r3, #30
			return STATUS_ERR_PACKET_COLLISION;
     454:	2041      	movs	r0, #65	; 0x41
	return STATUS_OK;
     456:	17db      	asrs	r3, r3, #31
     458:	4018      	ands	r0, r3
}
     45a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     45c:	8b5a      	ldrh	r2, [r3, #26]
     45e:	0752      	lsls	r2, r2, #29
     460:	d506      	bpl.n	470 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     462:	6859      	ldr	r1, [r3, #4]
     464:	22c0      	movs	r2, #192	; 0xc0
     466:	0292      	lsls	r2, r2, #10
     468:	430a      	orrs	r2, r1
     46a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
     46c:	2018      	movs	r0, #24
     46e:	e7f4      	b.n	45a <_i2c_master_address_response+0x16>
	return STATUS_OK;
     470:	2000      	movs	r0, #0
     472:	e7f2      	b.n	45a <_i2c_master_address_response+0x16>

00000474 <_i2c_master_wait_for_bus>:
{
     474:	b530      	push	{r4, r5, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     476:	6802      	ldr	r2, [r0, #0]
	uint16_t timeout_counter = 0;
     478:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     47a:	2401      	movs	r4, #1
     47c:	2502      	movs	r5, #2
     47e:	7e11      	ldrb	r1, [r2, #24]
     480:	4221      	tst	r1, r4
     482:	d10b      	bne.n	49c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
     484:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
     486:	4229      	tst	r1, r5
     488:	d106      	bne.n	498 <_i2c_master_wait_for_bus+0x24>
		if (++timeout_counter >= module->buffer_timeout) {
     48a:	3301      	adds	r3, #1
     48c:	b29b      	uxth	r3, r3
     48e:	8901      	ldrh	r1, [r0, #8]
     490:	4299      	cmp	r1, r3
     492:	d8f4      	bhi.n	47e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
     494:	2012      	movs	r0, #18
     496:	e002      	b.n	49e <_i2c_master_wait_for_bus+0x2a>
	return STATUS_OK;
     498:	2000      	movs	r0, #0
     49a:	e000      	b.n	49e <_i2c_master_wait_for_bus+0x2a>
     49c:	2000      	movs	r0, #0
}
     49e:	bd30      	pop	{r4, r5, pc}

000004a0 <_i2c_master_send_hs_master_code>:
{
     4a0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4a2:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     4a4:	6862      	ldr	r2, [r4, #4]
     4a6:	2380      	movs	r3, #128	; 0x80
     4a8:	02db      	lsls	r3, r3, #11
     4aa:	4313      	orrs	r3, r2
     4ac:	6063      	str	r3, [r4, #4]
	i2c_module->ADDR.reg = hs_master_code;
     4ae:	6261      	str	r1, [r4, #36]	; 0x24
	tmp_status = _i2c_master_wait_for_bus(module);
     4b0:	4b02      	ldr	r3, [pc, #8]	; (4bc <_i2c_master_send_hs_master_code+0x1c>)
     4b2:	4798      	blx	r3
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     4b4:	2301      	movs	r3, #1
     4b6:	7623      	strb	r3, [r4, #24]
}
     4b8:	bd10      	pop	{r4, pc}
     4ba:	46c0      	nop			; (mov r8, r8)
     4bc:	00000475 	.word	0x00000475

000004c0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     4c0:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     4c2:	2207      	movs	r2, #7
     4c4:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     4c6:	421a      	tst	r2, r3
     4c8:	d1fc      	bne.n	4c4 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     4ca:	4770      	bx	lr

000004cc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
     4cc:	b570      	push	{r4, r5, r6, lr}
     4ce:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     4d0:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     4d2:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
     4d4:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
     4d6:	8b83      	ldrh	r3, [r0, #28]
     4d8:	1aed      	subs	r5, r5, r3
     4da:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
     4dc:	8b83      	ldrh	r3, [r0, #28]
     4de:	3b01      	subs	r3, #1
     4e0:	b29b      	uxth	r3, r3
     4e2:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
     4e4:	0113      	lsls	r3, r2, #4
     4e6:	d51d      	bpl.n	524 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
     4e8:	7ac3      	ldrb	r3, [r0, #11]
     4ea:	2b00      	cmp	r3, #0
     4ec:	d003      	beq.n	4f6 <_i2c_master_read+0x2a>
     4ee:	8b83      	ldrh	r3, [r0, #28]
     4f0:	b29b      	uxth	r3, r3
     4f2:	2b01      	cmp	r3, #1
     4f4:	d010      	beq.n	518 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
     4f6:	8ba3      	ldrh	r3, [r4, #28]
     4f8:	b29b      	uxth	r3, r3
     4fa:	2b00      	cmp	r3, #0
     4fc:	d102      	bne.n	504 <_i2c_master_read+0x38>
		if (module->send_stop) {
     4fe:	7aa3      	ldrb	r3, [r4, #10]
     500:	2b00      	cmp	r3, #0
     502:	d11c      	bne.n	53e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
     504:	0020      	movs	r0, r4
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <_i2c_master_read+0x84>)
     508:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
     50a:	6a23      	ldr	r3, [r4, #32]
     50c:	195d      	adds	r5, r3, r5
     50e:	2328      	movs	r3, #40	; 0x28
     510:	5cf3      	ldrb	r3, [r6, r3]
     512:	b2db      	uxtb	r3, r3
     514:	702b      	strb	r3, [r5, #0]
}
     516:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     518:	6872      	ldr	r2, [r6, #4]
     51a:	2380      	movs	r3, #128	; 0x80
     51c:	02db      	lsls	r3, r3, #11
     51e:	4313      	orrs	r3, r2
     520:	6073      	str	r3, [r6, #4]
     522:	e7e8      	b.n	4f6 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
     524:	7ac3      	ldrb	r3, [r0, #11]
     526:	2b00      	cmp	r3, #0
     528:	d0e5      	beq.n	4f6 <_i2c_master_read+0x2a>
     52a:	8b83      	ldrh	r3, [r0, #28]
     52c:	b29b      	uxth	r3, r3
     52e:	2b00      	cmp	r3, #0
     530:	d1e1      	bne.n	4f6 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     532:	6872      	ldr	r2, [r6, #4]
     534:	2380      	movs	r3, #128	; 0x80
     536:	02db      	lsls	r3, r3, #11
     538:	4313      	orrs	r3, r2
     53a:	6073      	str	r3, [r6, #4]
     53c:	e7db      	b.n	4f6 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
     53e:	0020      	movs	r0, r4
     540:	4b03      	ldr	r3, [pc, #12]	; (550 <_i2c_master_read+0x84>)
     542:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     544:	6872      	ldr	r2, [r6, #4]
     546:	23c0      	movs	r3, #192	; 0xc0
     548:	029b      	lsls	r3, r3, #10
     54a:	4313      	orrs	r3, r2
     54c:	6073      	str	r3, [r6, #4]
     54e:	e7d9      	b.n	504 <_i2c_master_read+0x38>
     550:	000004c1 	.word	0x000004c1

00000554 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
     554:	b570      	push	{r4, r5, r6, lr}
     556:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     558:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
     55a:	8b6b      	ldrh	r3, [r5, #26]
     55c:	075b      	lsls	r3, r3, #29
     55e:	d503      	bpl.n	568 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
     560:	221e      	movs	r2, #30
     562:	2325      	movs	r3, #37	; 0x25
     564:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
     566:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
     568:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
     56a:	8b83      	ldrh	r3, [r0, #28]
     56c:	1af6      	subs	r6, r6, r3
     56e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
     570:	8b83      	ldrh	r3, [r0, #28]
     572:	3b01      	subs	r3, #1
     574:	b29b      	uxth	r3, r3
     576:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
     578:	4b04      	ldr	r3, [pc, #16]	; (58c <_i2c_master_write+0x38>)
     57a:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
     57c:	6a23      	ldr	r3, [r4, #32]
     57e:	199e      	adds	r6, r3, r6
     580:	7833      	ldrb	r3, [r6, #0]
     582:	b2db      	uxtb	r3, r3
     584:	2228      	movs	r2, #40	; 0x28
     586:	54ab      	strb	r3, [r5, r2]
     588:	e7ed      	b.n	566 <_i2c_master_write+0x12>
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	000004c1 	.word	0x000004c1

00000590 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     592:	0005      	movs	r5, r0
     594:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     596:	6806      	ldr	r6, [r0, #0]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
     598:	684b      	ldr	r3, [r1, #4]
     59a:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
     59c:	884b      	ldrh	r3, [r1, #2]
     59e:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
     5a0:	2201      	movs	r2, #1
     5a2:	2324      	movs	r3, #36	; 0x24
     5a4:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
     5a6:	3204      	adds	r2, #4
     5a8:	3301      	adds	r3, #1
     5aa:	54c2      	strb	r2, [r0, r3]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     5ac:	6837      	ldr	r7, [r6, #0]
     5ae:	013f      	lsls	r7, r7, #4
     5b0:	0fff      	lsrs	r7, r7, #31

	/* Switch to high speed mode */
	if (packet->high_speed) {
     5b2:	7a4b      	ldrb	r3, [r1, #9]
     5b4:	2b00      	cmp	r3, #0
     5b6:	d117      	bne.n	5e8 <_i2c_master_read_packet+0x58>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
     5b8:	2f00      	cmp	r7, #0
     5ba:	d002      	beq.n	5c2 <_i2c_master_read_packet+0x32>
     5bc:	8863      	ldrh	r3, [r4, #2]
     5be:	2b01      	cmp	r3, #1
     5c0:	d016      	beq.n	5f0 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     5c2:	6873      	ldr	r3, [r6, #4]
     5c4:	4a20      	ldr	r2, [pc, #128]	; (648 <_i2c_master_read_packet+0xb8>)
     5c6:	4013      	ands	r3, r2
     5c8:	6073      	str	r3, [r6, #4]
	}

	if (packet->ten_bit_address) {
     5ca:	7a23      	ldrb	r3, [r4, #8]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d115      	bne.n	5fc <_i2c_master_read_packet+0x6c>
		} else {
			return tmp_status;
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
     5d0:	2303      	movs	r3, #3
     5d2:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     5d4:	8823      	ldrh	r3, [r4, #0]
     5d6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
     5d8:	7a62      	ldrb	r2, [r4, #9]
     5da:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
     5dc:	4313      	orrs	r3, r2
     5de:	2201      	movs	r2, #1
     5e0:	4313      	orrs	r3, r2
     5e2:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
     5e4:	2000      	movs	r0, #0
}
     5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
     5e8:	7a89      	ldrb	r1, [r1, #10]
     5ea:	4b18      	ldr	r3, [pc, #96]	; (64c <_i2c_master_read_packet+0xbc>)
     5ec:	4798      	blx	r3
     5ee:	e7e3      	b.n	5b8 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     5f0:	6872      	ldr	r2, [r6, #4]
     5f2:	2380      	movs	r3, #128	; 0x80
     5f4:	02db      	lsls	r3, r3, #11
     5f6:	4313      	orrs	r3, r2
     5f8:	6073      	str	r3, [r6, #4]
     5fa:	e7e6      	b.n	5ca <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
     5fc:	8823      	ldrh	r3, [r4, #0]
     5fe:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     600:	7a62      	ldrb	r2, [r4, #9]
     602:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
     604:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     606:	2280      	movs	r2, #128	; 0x80
     608:	0212      	lsls	r2, r2, #8
     60a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
     60c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
     60e:	0028      	movs	r0, r5
     610:	4b0f      	ldr	r3, [pc, #60]	; (650 <_i2c_master_read_packet+0xc0>)
     612:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     614:	6873      	ldr	r3, [r6, #4]
     616:	4a0c      	ldr	r2, [pc, #48]	; (648 <_i2c_master_read_packet+0xb8>)
     618:	4013      	ands	r3, r2
     61a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
     61c:	2800      	cmp	r0, #0
     61e:	d1e2      	bne.n	5e6 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
     620:	0028      	movs	r0, r5
     622:	4b0c      	ldr	r3, [pc, #48]	; (654 <_i2c_master_read_packet+0xc4>)
     624:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
     626:	2800      	cmp	r0, #0
     628:	d1dd      	bne.n	5e6 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
     62a:	2303      	movs	r3, #3
     62c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     62e:	8823      	ldrh	r3, [r4, #0]
     630:	0a1b      	lsrs	r3, r3, #8
     632:	2278      	movs	r2, #120	; 0x78
     634:	4313      	orrs	r3, r2
     636:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
     638:	7a62      	ldrb	r2, [r4, #9]
     63a:	0392      	lsls	r2, r2, #14
     63c:	2101      	movs	r1, #1
     63e:	430a      	orrs	r2, r1
     640:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
     642:	6273      	str	r3, [r6, #36]	; 0x24
     644:	e7cf      	b.n	5e6 <_i2c_master_read_packet+0x56>
     646:	46c0      	nop			; (mov r8, r8)
     648:	fffbffff 	.word	0xfffbffff
     64c:	000004a1 	.word	0x000004a1
     650:	00000475 	.word	0x00000475
     654:	00000445 	.word	0x00000445

00000658 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
     658:	1c93      	adds	r3, r2, #2
     65a:	009b      	lsls	r3, r3, #2
     65c:	18c3      	adds	r3, r0, r3
     65e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
     660:	7e03      	ldrb	r3, [r0, #24]
     662:	2101      	movs	r1, #1
     664:	4091      	lsls	r1, r2
     666:	430b      	orrs	r3, r1
     668:	b2db      	uxtb	r3, r3
     66a:	7603      	strb	r3, [r0, #24]
}
     66c:	4770      	bx	lr
	...

00000670 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
     670:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
     672:	8b83      	ldrh	r3, [r0, #28]
     674:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     676:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
     678:	2b00      	cmp	r3, #0
     67a:	d001      	beq.n	680 <i2c_master_read_packet_job+0x10>
	/* Make sure we send STOP */
	module->send_stop = true;
	module->send_nack = true;
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
}
     67c:	0010      	movs	r0, r2
     67e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
     680:	3301      	adds	r3, #1
     682:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
     684:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
     686:	4b02      	ldr	r3, [pc, #8]	; (690 <i2c_master_read_packet_job+0x20>)
     688:	4798      	blx	r3
     68a:	0002      	movs	r2, r0
     68c:	e7f6      	b.n	67c <i2c_master_read_packet_job+0xc>
     68e:	46c0      	nop			; (mov r8, r8)
     690:	00000591 	.word	0x00000591

00000694 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
     694:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
     696:	0080      	lsls	r0, r0, #2
     698:	4b75      	ldr	r3, [pc, #468]	; (870 <_i2c_master_interrupt_handler+0x1dc>)
     69a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     69c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
     69e:	682b      	ldr	r3, [r5, #0]
     6a0:	011b      	lsls	r3, r3, #4
     6a2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
     6a4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
     6a6:	7e26      	ldrb	r6, [r4, #24]
     6a8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
     6aa:	8b63      	ldrh	r3, [r4, #26]
     6ac:	b29b      	uxth	r3, r3
     6ae:	2b00      	cmp	r3, #0
     6b0:	d103      	bne.n	6ba <_i2c_master_interrupt_handler+0x26>
     6b2:	8ba3      	ldrh	r3, [r4, #28]
     6b4:	b29b      	uxth	r3, r3
     6b6:	2b00      	cmp	r3, #0
     6b8:	d123      	bne.n	702 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     6ba:	8b63      	ldrh	r3, [r4, #26]
     6bc:	b29b      	uxth	r3, r3
     6be:	2b00      	cmp	r3, #0
     6c0:	d008      	beq.n	6d4 <_i2c_master_interrupt_handler+0x40>
     6c2:	8ba3      	ldrh	r3, [r4, #28]
     6c4:	b29b      	uxth	r3, r3
     6c6:	2b00      	cmp	r3, #0
     6c8:	d104      	bne.n	6d4 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
     6ca:	3325      	adds	r3, #37	; 0x25
     6cc:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     6ce:	2b05      	cmp	r3, #5
     6d0:	d100      	bne.n	6d4 <_i2c_master_interrupt_handler+0x40>
     6d2:	e06d      	b.n	7b0 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
     6d4:	8b63      	ldrh	r3, [r4, #26]
     6d6:	b29b      	uxth	r3, r3
     6d8:	2b00      	cmp	r3, #0
     6da:	d024      	beq.n	726 <_i2c_master_interrupt_handler+0x92>
     6dc:	8ba3      	ldrh	r3, [r4, #28]
     6de:	b29b      	uxth	r3, r3
     6e0:	2b00      	cmp	r3, #0
     6e2:	d020      	beq.n	726 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
     6e4:	8b6b      	ldrh	r3, [r5, #26]
     6e6:	069b      	lsls	r3, r3, #26
     6e8:	d500      	bpl.n	6ec <_i2c_master_interrupt_handler+0x58>
     6ea:	e081      	b.n	7f0 <_i2c_master_interrupt_handler+0x15c>
     6ec:	2a00      	cmp	r2, #0
     6ee:	d004      	beq.n	6fa <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
     6f0:	8ba3      	ldrh	r3, [r4, #28]
     6f2:	b29b      	uxth	r3, r3
     6f4:	2b01      	cmp	r3, #1
     6f6:	d100      	bne.n	6fa <_i2c_master_interrupt_handler+0x66>
     6f8:	e07a      	b.n	7f0 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
     6fa:	2241      	movs	r2, #65	; 0x41
     6fc:	2325      	movs	r3, #37	; 0x25
     6fe:	54e2      	strb	r2, [r4, r3]
     700:	e011      	b.n	726 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
     702:	7e2b      	ldrb	r3, [r5, #24]
     704:	07db      	lsls	r3, r3, #31
     706:	d507      	bpl.n	718 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
     708:	2301      	movs	r3, #1
     70a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     70c:	8b6b      	ldrh	r3, [r5, #26]
     70e:	079b      	lsls	r3, r3, #30
     710:	d52e      	bpl.n	770 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
     712:	2241      	movs	r2, #65	; 0x41
     714:	2325      	movs	r3, #37	; 0x25
     716:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
     718:	8ba3      	ldrh	r3, [r4, #28]
     71a:	b29b      	uxth	r3, r3
     71c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
     71e:	2325      	movs	r3, #37	; 0x25
     720:	5ce3      	ldrb	r3, [r4, r3]
     722:	2b05      	cmp	r3, #5
     724:	d038      	beq.n	798 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     726:	8b63      	ldrh	r3, [r4, #26]
     728:	b29b      	uxth	r3, r3
     72a:	2b00      	cmp	r3, #0
     72c:	d007      	beq.n	73e <_i2c_master_interrupt_handler+0xaa>
     72e:	8ba3      	ldrh	r3, [r4, #28]
     730:	b29b      	uxth	r3, r3
     732:	2b00      	cmp	r3, #0
     734:	d103      	bne.n	73e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
     736:	3325      	adds	r3, #37	; 0x25
     738:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
     73a:	2b05      	cmp	r3, #5
     73c:	d064      	beq.n	808 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
     73e:	2325      	movs	r3, #37	; 0x25
     740:	5ce3      	ldrb	r3, [r4, r3]
     742:	2b05      	cmp	r3, #5
     744:	d013      	beq.n	76e <_i2c_master_interrupt_handler+0xda>
     746:	2325      	movs	r3, #37	; 0x25
     748:	5ce3      	ldrb	r3, [r4, r3]
     74a:	2b00      	cmp	r3, #0
     74c:	d00f      	beq.n	76e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
     74e:	2303      	movs	r3, #3
     750:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
     752:	2300      	movs	r3, #0
     754:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
     756:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
     758:	3325      	adds	r3, #37	; 0x25
     75a:	5ce3      	ldrb	r3, [r4, r3]
     75c:	2b41      	cmp	r3, #65	; 0x41
     75e:	d003      	beq.n	768 <_i2c_master_interrupt_handler+0xd4>
     760:	7aa3      	ldrb	r3, [r4, #10]
     762:	2b00      	cmp	r3, #0
     764:	d000      	beq.n	768 <_i2c_master_interrupt_handler+0xd4>
     766:	e075      	b.n	854 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
     768:	0773      	lsls	r3, r6, #29
     76a:	d500      	bpl.n	76e <_i2c_master_interrupt_handler+0xda>
     76c:	e07b      	b.n	866 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
     76e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
     770:	8b6b      	ldrh	r3, [r5, #26]
     772:	075b      	lsls	r3, r3, #29
     774:	d5d0      	bpl.n	718 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
     776:	2218      	movs	r2, #24
     778:	2325      	movs	r3, #37	; 0x25
     77a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
     77c:	2300      	movs	r3, #0
     77e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
     780:	7aa3      	ldrb	r3, [r4, #10]
     782:	2b00      	cmp	r3, #0
     784:	d0c8      	beq.n	718 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
     786:	0020      	movs	r0, r4
     788:	4b3a      	ldr	r3, [pc, #232]	; (874 <_i2c_master_interrupt_handler+0x1e0>)
     78a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     78c:	686a      	ldr	r2, [r5, #4]
     78e:	23c0      	movs	r3, #192	; 0xc0
     790:	029b      	lsls	r3, r3, #10
     792:	4313      	orrs	r3, r2
     794:	606b      	str	r3, [r5, #4]
     796:	e7bf      	b.n	718 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     798:	331f      	adds	r3, #31
     79a:	5ce3      	ldrb	r3, [r4, r3]
     79c:	2b00      	cmp	r3, #0
     79e:	d003      	beq.n	7a8 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
     7a0:	0020      	movs	r0, r4
     7a2:	4b35      	ldr	r3, [pc, #212]	; (878 <_i2c_master_interrupt_handler+0x1e4>)
     7a4:	4798      	blx	r3
     7a6:	e7be      	b.n	726 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
     7a8:	0020      	movs	r0, r4
     7aa:	4b34      	ldr	r3, [pc, #208]	; (87c <_i2c_master_interrupt_handler+0x1e8>)
     7ac:	4798      	blx	r3
     7ae:	e7ba      	b.n	726 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
     7b0:	331f      	adds	r3, #31
     7b2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     7b4:	2b00      	cmp	r3, #0
     7b6:	d000      	beq.n	7ba <_i2c_master_interrupt_handler+0x126>
     7b8:	e78c      	b.n	6d4 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
     7ba:	3303      	adds	r3, #3
     7bc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     7be:	2300      	movs	r3, #0
     7c0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     7c2:	3325      	adds	r3, #37	; 0x25
     7c4:	2200      	movs	r2, #0
     7c6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
     7c8:	7aa3      	ldrb	r3, [r4, #10]
     7ca:	2b00      	cmp	r3, #0
     7cc:	d107      	bne.n	7de <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     7ce:	2301      	movs	r3, #1
     7d0:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
     7d2:	07f3      	lsls	r3, r6, #31
     7d4:	d5a7      	bpl.n	726 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     7d6:	68e3      	ldr	r3, [r4, #12]
     7d8:	0020      	movs	r0, r4
     7da:	4798      	blx	r3
     7dc:	e7a3      	b.n	726 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
     7de:	0020      	movs	r0, r4
     7e0:	4b24      	ldr	r3, [pc, #144]	; (874 <_i2c_master_interrupt_handler+0x1e0>)
     7e2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
     7e4:	686a      	ldr	r2, [r5, #4]
     7e6:	23c0      	movs	r3, #192	; 0xc0
     7e8:	029b      	lsls	r3, r3, #10
     7ea:	4313      	orrs	r3, r2
     7ec:	606b      	str	r3, [r5, #4]
     7ee:	e7f0      	b.n	7d2 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     7f0:	2324      	movs	r3, #36	; 0x24
     7f2:	5ce3      	ldrb	r3, [r4, r3]
     7f4:	2b00      	cmp	r3, #0
     7f6:	d103      	bne.n	800 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
     7f8:	0020      	movs	r0, r4
     7fa:	4b20      	ldr	r3, [pc, #128]	; (87c <_i2c_master_interrupt_handler+0x1e8>)
     7fc:	4798      	blx	r3
     7fe:	e792      	b.n	726 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
     800:	0020      	movs	r0, r4
     802:	4b1d      	ldr	r3, [pc, #116]	; (878 <_i2c_master_interrupt_handler+0x1e4>)
     804:	4798      	blx	r3
     806:	e78e      	b.n	726 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
     808:	331f      	adds	r3, #31
     80a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
     80c:	2b01      	cmp	r3, #1
     80e:	d196      	bne.n	73e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     810:	7e2b      	ldrb	r3, [r5, #24]
     812:	079b      	lsls	r3, r3, #30
     814:	d501      	bpl.n	81a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     816:	2302      	movs	r3, #2
     818:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
     81a:	2303      	movs	r3, #3
     81c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
     81e:	2300      	movs	r3, #0
     820:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
     822:	3325      	adds	r3, #37	; 0x25
     824:	2200      	movs	r2, #0
     826:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
     828:	07b3      	lsls	r3, r6, #30
     82a:	d503      	bpl.n	834 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     82c:	2324      	movs	r3, #36	; 0x24
     82e:	5ce3      	ldrb	r3, [r4, r3]
     830:	2b01      	cmp	r3, #1
     832:	d00b      	beq.n	84c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
     834:	07f3      	lsls	r3, r6, #31
     836:	d400      	bmi.n	83a <_i2c_master_interrupt_handler+0x1a6>
     838:	e781      	b.n	73e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     83a:	2324      	movs	r3, #36	; 0x24
     83c:	5ce3      	ldrb	r3, [r4, r3]
     83e:	2b00      	cmp	r3, #0
     840:	d000      	beq.n	844 <_i2c_master_interrupt_handler+0x1b0>
     842:	e77c      	b.n	73e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
     844:	68e3      	ldr	r3, [r4, #12]
     846:	0020      	movs	r0, r4
     848:	4798      	blx	r3
     84a:	e778      	b.n	73e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
     84c:	6923      	ldr	r3, [r4, #16]
     84e:	0020      	movs	r0, r4
     850:	4798      	blx	r3
     852:	e774      	b.n	73e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
     854:	0020      	movs	r0, r4
     856:	4b07      	ldr	r3, [pc, #28]	; (874 <_i2c_master_interrupt_handler+0x1e0>)
     858:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
     85a:	686a      	ldr	r2, [r5, #4]
     85c:	23e0      	movs	r3, #224	; 0xe0
     85e:	02db      	lsls	r3, r3, #11
     860:	4313      	orrs	r3, r2
     862:	606b      	str	r3, [r5, #4]
     864:	e780      	b.n	768 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
     866:	6963      	ldr	r3, [r4, #20]
     868:	0020      	movs	r0, r4
     86a:	4798      	blx	r3
}
     86c:	e77f      	b.n	76e <_i2c_master_interrupt_handler+0xda>
     86e:	46c0      	nop			; (mov r8, r8)
     870:	2000071c 	.word	0x2000071c
     874:	000004c1 	.word	0x000004c1
     878:	000004cd 	.word	0x000004cd
     87c:	00000555 	.word	0x00000555

00000880 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     880:	b510      	push	{r4, lr}
     882:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     884:	7c03      	ldrb	r3, [r0, #16]
     886:	2b00      	cmp	r3, #0
     888:	d005      	beq.n	896 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     88a:	6883      	ldr	r3, [r0, #8]
     88c:	1c58      	adds	r0, r3, #1
     88e:	68e1      	ldr	r1, [r4, #12]
     890:	4b07      	ldr	r3, [pc, #28]	; (8b0 <advance_pointer+0x30>)
     892:	4798      	blx	r3
     894:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     896:	6863      	ldr	r3, [r4, #4]
     898:	1c58      	adds	r0, r3, #1
     89a:	68e1      	ldr	r1, [r4, #12]
     89c:	4b04      	ldr	r3, [pc, #16]	; (8b0 <advance_pointer+0x30>)
     89e:	4798      	blx	r3
     8a0:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     8a2:	68a3      	ldr	r3, [r4, #8]
     8a4:	1a59      	subs	r1, r3, r1
     8a6:	424a      	negs	r2, r1
     8a8:	414a      	adcs	r2, r1
     8aa:	7422      	strb	r2, [r4, #16]
 }
     8ac:	bd10      	pop	{r4, pc}
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	000022ad 	.word	0x000022ad

000008b4 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     8b4:	b570      	push	{r4, r5, r6, lr}
     8b6:	0005      	movs	r5, r0
     8b8:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     8ba:	2014      	movs	r0, #20
     8bc:	4b04      	ldr	r3, [pc, #16]	; (8d0 <circular_buf_init+0x1c>)
     8be:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     8c0:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     8c2:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     8c4:	2300      	movs	r3, #0
     8c6:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     8c8:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     8ca:	7403      	strb	r3, [r0, #16]
 }
     8cc:	bd70      	pop	{r4, r5, r6, pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	00004131 	.word	0x00004131

000008d4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     8d4:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     8d6:	6803      	ldr	r3, [r0, #0]
     8d8:	6842      	ldr	r2, [r0, #4]
     8da:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     8dc:	4b01      	ldr	r3, [pc, #4]	; (8e4 <circular_buf_put+0x10>)
     8de:	4798      	blx	r3
 }
     8e0:	bd10      	pop	{r4, pc}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	00000881 	.word	0x00000881

000008e8 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     8e8:	7c02      	ldrb	r2, [r0, #16]
     8ea:	2300      	movs	r3, #0
     8ec:	2a00      	cmp	r2, #0
     8ee:	d105      	bne.n	8fc <circular_buf_empty+0x14>
     8f0:	6843      	ldr	r3, [r0, #4]
     8f2:	6880      	ldr	r0, [r0, #8]
     8f4:	1a1b      	subs	r3, r3, r0
     8f6:	4258      	negs	r0, r3
     8f8:	4143      	adcs	r3, r0
     8fa:	b2db      	uxtb	r3, r3
     8fc:	0018      	movs	r0, r3
 }
     8fe:	4770      	bx	lr

00000900 <circular_buf_get>:
 {
     900:	b570      	push	{r4, r5, r6, lr}
     902:	0004      	movs	r4, r0
     904:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     906:	4b0a      	ldr	r3, [pc, #40]	; (930 <circular_buf_get+0x30>)
     908:	4798      	blx	r3
     90a:	2800      	cmp	r0, #0
     90c:	d10d      	bne.n	92a <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     90e:	6823      	ldr	r3, [r4, #0]
     910:	68a2      	ldr	r2, [r4, #8]
     912:	5c9b      	ldrb	r3, [r3, r2]
     914:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     916:	2300      	movs	r3, #0
     918:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     91a:	68a3      	ldr	r3, [r4, #8]
     91c:	1c58      	adds	r0, r3, #1
     91e:	68e1      	ldr	r1, [r4, #12]
     920:	4b04      	ldr	r3, [pc, #16]	; (934 <circular_buf_get+0x34>)
     922:	4798      	blx	r3
     924:	60a1      	str	r1, [r4, #8]
		 r = 0;
     926:	2000      	movs	r0, #0
 }
     928:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     92a:	2001      	movs	r0, #1
     92c:	4240      	negs	r0, r0
	 return r;
     92e:	e7fb      	b.n	928 <circular_buf_get+0x28>
     930:	000008e9 	.word	0x000008e9
     934:	000022ad 	.word	0x000022ad

00000938 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     938:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     93a:	4b06      	ldr	r3, [pc, #24]	; (954 <usart_write_callback+0x1c>)
     93c:	6818      	ldr	r0, [r3, #0]
     93e:	4906      	ldr	r1, [pc, #24]	; (958 <usart_write_callback+0x20>)
     940:	4b06      	ldr	r3, [pc, #24]	; (95c <usart_write_callback+0x24>)
     942:	4798      	blx	r3
     944:	1c43      	adds	r3, r0, #1
     946:	d004      	beq.n	952 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     948:	2201      	movs	r2, #1
     94a:	4903      	ldr	r1, [pc, #12]	; (958 <usart_write_callback+0x20>)
     94c:	4804      	ldr	r0, [pc, #16]	; (960 <usart_write_callback+0x28>)
     94e:	4b05      	ldr	r3, [pc, #20]	; (964 <usart_write_callback+0x2c>)
     950:	4798      	blx	r3
	}
	
}
     952:	bd10      	pop	{r4, pc}
     954:	20000718 	.word	0x20000718
     958:	20000714 	.word	0x20000714
     95c:	00000901 	.word	0x00000901
     960:	200002d8 	.word	0x200002d8
     964:	0000141d 	.word	0x0000141d

00000968 <InitializeSerialConsole>:
{
     968:	b530      	push	{r4, r5, lr}
     96a:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     96c:	2580      	movs	r5, #128	; 0x80
     96e:	00ad      	lsls	r5, r5, #2
     970:	0029      	movs	r1, r5
     972:	4836      	ldr	r0, [pc, #216]	; (a4c <InitializeSerialConsole+0xe4>)
     974:	4c36      	ldr	r4, [pc, #216]	; (a50 <InitializeSerialConsole+0xe8>)
     976:	47a0      	blx	r4
     978:	4b36      	ldr	r3, [pc, #216]	; (a54 <InitializeSerialConsole+0xec>)
     97a:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     97c:	0029      	movs	r1, r5
     97e:	4836      	ldr	r0, [pc, #216]	; (a58 <InitializeSerialConsole+0xf0>)
     980:	47a0      	blx	r4
     982:	4b36      	ldr	r3, [pc, #216]	; (a5c <InitializeSerialConsole+0xf4>)
     984:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     986:	2380      	movs	r3, #128	; 0x80
     988:	05db      	lsls	r3, r3, #23
     98a:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     98c:	2300      	movs	r3, #0
     98e:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     990:	22ff      	movs	r2, #255	; 0xff
     992:	4669      	mov	r1, sp
     994:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     996:	2200      	movs	r2, #0
     998:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     99a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     99c:	2101      	movs	r1, #1
     99e:	2024      	movs	r0, #36	; 0x24
     9a0:	466c      	mov	r4, sp
     9a2:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     9a4:	3001      	adds	r0, #1
     9a6:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     9a8:	3125      	adds	r1, #37	; 0x25
     9aa:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     9ac:	3101      	adds	r1, #1
     9ae:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     9b0:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     9b2:	3105      	adds	r1, #5
     9b4:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     9b6:	3101      	adds	r1, #1
     9b8:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     9ba:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     9bc:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     9be:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     9c0:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     9c2:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     9c4:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     9c6:	2313      	movs	r3, #19
     9c8:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     9ca:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     9cc:	23e1      	movs	r3, #225	; 0xe1
     9ce:	025b      	lsls	r3, r3, #9
     9d0:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     9d2:	23c4      	movs	r3, #196	; 0xc4
     9d4:	039b      	lsls	r3, r3, #14
     9d6:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     9d8:	2301      	movs	r3, #1
     9da:	425b      	negs	r3, r3
     9dc:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     9de:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     9e0:	4b1f      	ldr	r3, [pc, #124]	; (a60 <InitializeSerialConsole+0xf8>)
     9e2:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     9e4:	4b1f      	ldr	r3, [pc, #124]	; (a64 <InitializeSerialConsole+0xfc>)
     9e6:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     9e8:	4d1f      	ldr	r5, [pc, #124]	; (a68 <InitializeSerialConsole+0x100>)
     9ea:	4c20      	ldr	r4, [pc, #128]	; (a6c <InitializeSerialConsole+0x104>)
     9ec:	466a      	mov	r2, sp
     9ee:	4920      	ldr	r1, [pc, #128]	; (a70 <InitializeSerialConsole+0x108>)
     9f0:	0028      	movs	r0, r5
     9f2:	47a0      	blx	r4
     9f4:	2800      	cmp	r0, #0
     9f6:	d1f9      	bne.n	9ec <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     9f8:	4d1b      	ldr	r5, [pc, #108]	; (a68 <InitializeSerialConsole+0x100>)
     9fa:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     9fc:	0020      	movs	r0, r4
     9fe:	4b1d      	ldr	r3, [pc, #116]	; (a74 <InitializeSerialConsole+0x10c>)
     a00:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a02:	231f      	movs	r3, #31
     a04:	4018      	ands	r0, r3
     a06:	3b1e      	subs	r3, #30
     a08:	4083      	lsls	r3, r0
     a0a:	4a1b      	ldr	r2, [pc, #108]	; (a78 <InitializeSerialConsole+0x110>)
     a0c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a0e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a10:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     a12:	2b00      	cmp	r3, #0
     a14:	d1fc      	bne.n	a10 <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     a16:	6823      	ldr	r3, [r4, #0]
     a18:	2202      	movs	r2, #2
     a1a:	4313      	orrs	r3, r2
     a1c:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     a1e:	4c12      	ldr	r4, [pc, #72]	; (a68 <InitializeSerialConsole+0x100>)
     a20:	2200      	movs	r2, #0
     a22:	4916      	ldr	r1, [pc, #88]	; (a7c <InitializeSerialConsole+0x114>)
     a24:	0020      	movs	r0, r4
     a26:	4d16      	ldr	r5, [pc, #88]	; (a80 <InitializeSerialConsole+0x118>)
     a28:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     a2a:	2201      	movs	r2, #1
     a2c:	4915      	ldr	r1, [pc, #84]	; (a84 <InitializeSerialConsole+0x11c>)
     a2e:	0020      	movs	r0, r4
     a30:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     a32:	2231      	movs	r2, #49	; 0x31
     a34:	5ca3      	ldrb	r3, [r4, r2]
     a36:	2103      	movs	r1, #3
     a38:	430b      	orrs	r3, r1
     a3a:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     a3c:	3a30      	subs	r2, #48	; 0x30
     a3e:	4912      	ldr	r1, [pc, #72]	; (a88 <InitializeSerialConsole+0x120>)
     a40:	0020      	movs	r0, r4
     a42:	4b12      	ldr	r3, [pc, #72]	; (a8c <InitializeSerialConsole+0x124>)
     a44:	4798      	blx	r3
}
     a46:	b011      	add	sp, #68	; 0x44
     a48:	bd30      	pop	{r4, r5, pc}
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	20000514 	.word	0x20000514
     a50:	000008b5 	.word	0x000008b5
     a54:	2000030c 	.word	0x2000030c
     a58:	20000314 	.word	0x20000314
     a5c:	20000718 	.word	0x20000718
     a60:	002a0003 	.word	0x002a0003
     a64:	002b0003 	.word	0x002b0003
     a68:	200002d8 	.word	0x200002d8
     a6c:	00001035 	.word	0x00001035
     a70:	42001800 	.word	0x42001800
     a74:	00000fa5 	.word	0x00000fa5
     a78:	e000e100 	.word	0xe000e100
     a7c:	00000939 	.word	0x00000939
     a80:	00001405 	.word	0x00001405
     a84:	00000b05 	.word	0x00000b05
     a88:	20000310 	.word	0x20000310
     a8c:	0000143d 	.word	0x0000143d

00000a90 <SerialConsoleWriteString>:
{
     a90:	b5f0      	push	{r4, r5, r6, r7, lr}
     a92:	46c6      	mov	lr, r8
     a94:	b500      	push	{lr}
     a96:	0005      	movs	r5, r0
     a98:	2400      	movs	r4, #0
	if(string != NULL)
     a9a:	2800      	cmp	r0, #0
     a9c:	d012      	beq.n	ac4 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     a9e:	4e11      	ldr	r6, [pc, #68]	; (ae4 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     aa0:	4f11      	ldr	r7, [pc, #68]	; (ae8 <SerialConsoleWriteString+0x58>)
     aa2:	4b12      	ldr	r3, [pc, #72]	; (aec <SerialConsoleWriteString+0x5c>)
     aa4:	4698      	mov	r8, r3
     aa6:	e003      	b.n	ab0 <SerialConsoleWriteString+0x20>
     aa8:	5d29      	ldrb	r1, [r5, r4]
     aaa:	6838      	ldr	r0, [r7, #0]
     aac:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     aae:	3401      	adds	r4, #1
     ab0:	0028      	movs	r0, r5
     ab2:	47b0      	blx	r6
     ab4:	4284      	cmp	r4, r0
     ab6:	d3f7      	bcc.n	aa8 <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     ab8:	2101      	movs	r1, #1
     aba:	480d      	ldr	r0, [pc, #52]	; (af0 <SerialConsoleWriteString+0x60>)
     abc:	4b0d      	ldr	r3, [pc, #52]	; (af4 <SerialConsoleWriteString+0x64>)
     abe:	4798      	blx	r3
     ac0:	2800      	cmp	r0, #0
     ac2:	d002      	beq.n	aca <SerialConsoleWriteString+0x3a>
}
     ac4:	bc04      	pop	{r2}
     ac6:	4690      	mov	r8, r2
     ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     aca:	4c0b      	ldr	r4, [pc, #44]	; (af8 <SerialConsoleWriteString+0x68>)
     acc:	4b06      	ldr	r3, [pc, #24]	; (ae8 <SerialConsoleWriteString+0x58>)
     ace:	6818      	ldr	r0, [r3, #0]
     ad0:	0021      	movs	r1, r4
     ad2:	4b0a      	ldr	r3, [pc, #40]	; (afc <SerialConsoleWriteString+0x6c>)
     ad4:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     ad6:	2201      	movs	r2, #1
     ad8:	0021      	movs	r1, r4
     ada:	4805      	ldr	r0, [pc, #20]	; (af0 <SerialConsoleWriteString+0x60>)
     adc:	4b08      	ldr	r3, [pc, #32]	; (b00 <SerialConsoleWriteString+0x70>)
     ade:	4798      	blx	r3
}
     ae0:	e7f0      	b.n	ac4 <SerialConsoleWriteString+0x34>
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	000042fd 	.word	0x000042fd
     ae8:	20000718 	.word	0x20000718
     aec:	000008d5 	.word	0x000008d5
     af0:	200002d8 	.word	0x200002d8
     af4:	0000145d 	.word	0x0000145d
     af8:	20000714 	.word	0x20000714
     afc:	00000901 	.word	0x00000901
     b00:	0000141d 	.word	0x0000141d

00000b04 <usart_read_callback>:
{
     b04:	b510      	push	{r4, lr}
     b06:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     b08:	4c0d      	ldr	r4, [pc, #52]	; (b40 <usart_read_callback+0x3c>)
     b0a:	0020      	movs	r0, r4
     b0c:	4b0d      	ldr	r3, [pc, #52]	; (b44 <usart_read_callback+0x40>)
     b0e:	4798      	blx	r3
	if(latestRx == 0x08)
     b10:	7823      	ldrb	r3, [r4, #0]
     b12:	2b08      	cmp	r3, #8
     b14:	d00c      	beq.n	b30 <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     b16:	4c0a      	ldr	r4, [pc, #40]	; (b40 <usart_read_callback+0x3c>)
     b18:	7821      	ldrb	r1, [r4, #0]
     b1a:	4b0b      	ldr	r3, [pc, #44]	; (b48 <usart_read_callback+0x44>)
     b1c:	6818      	ldr	r0, [r3, #0]
     b1e:	4b0b      	ldr	r3, [pc, #44]	; (b4c <usart_read_callback+0x48>)
     b20:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     b22:	2201      	movs	r2, #1
     b24:	0021      	movs	r1, r4
     b26:	480a      	ldr	r0, [pc, #40]	; (b50 <usart_read_callback+0x4c>)
     b28:	4b0a      	ldr	r3, [pc, #40]	; (b54 <usart_read_callback+0x50>)
     b2a:	4798      	blx	r3
}
     b2c:	b002      	add	sp, #8
     b2e:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     b30:	a801      	add	r0, sp, #4
     b32:	3318      	adds	r3, #24
     b34:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     b36:	3b18      	subs	r3, #24
     b38:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString(&a);
     b3a:	4b02      	ldr	r3, [pc, #8]	; (b44 <usart_read_callback+0x40>)
     b3c:	4798      	blx	r3
     b3e:	e7ea      	b.n	b16 <usart_read_callback+0x12>
     b40:	20000310 	.word	0x20000310
     b44:	00000a91 	.word	0x00000a91
     b48:	2000030c 	.word	0x2000030c
     b4c:	000008d5 	.word	0x000008d5
     b50:	200002d8 	.word	0x200002d8
     b54:	0000143d 	.word	0x0000143d

00000b58 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
     b58:	4770      	bx	lr
	...

00000b5c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     b5c:	4b0c      	ldr	r3, [pc, #48]	; (b90 <cpu_irq_enter_critical+0x34>)
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	2b00      	cmp	r3, #0
     b62:	d106      	bne.n	b72 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     b64:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     b68:	2b00      	cmp	r3, #0
     b6a:	d007      	beq.n	b7c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     b6c:	2200      	movs	r2, #0
     b6e:	4b09      	ldr	r3, [pc, #36]	; (b94 <cpu_irq_enter_critical+0x38>)
     b70:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     b72:	4a07      	ldr	r2, [pc, #28]	; (b90 <cpu_irq_enter_critical+0x34>)
     b74:	6813      	ldr	r3, [r2, #0]
     b76:	3301      	adds	r3, #1
     b78:	6013      	str	r3, [r2, #0]
}
     b7a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     b7c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     b7e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     b82:	2200      	movs	r2, #0
     b84:	4b04      	ldr	r3, [pc, #16]	; (b98 <cpu_irq_enter_critical+0x3c>)
     b86:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     b88:	3201      	adds	r2, #1
     b8a:	4b02      	ldr	r3, [pc, #8]	; (b94 <cpu_irq_enter_critical+0x38>)
     b8c:	701a      	strb	r2, [r3, #0]
     b8e:	e7f0      	b.n	b72 <cpu_irq_enter_critical+0x16>
     b90:	20000190 	.word	0x20000190
     b94:	20000194 	.word	0x20000194
     b98:	2000000c 	.word	0x2000000c

00000b9c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     b9c:	4b08      	ldr	r3, [pc, #32]	; (bc0 <cpu_irq_leave_critical+0x24>)
     b9e:	681a      	ldr	r2, [r3, #0]
     ba0:	3a01      	subs	r2, #1
     ba2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     ba4:	681b      	ldr	r3, [r3, #0]
     ba6:	2b00      	cmp	r3, #0
     ba8:	d109      	bne.n	bbe <cpu_irq_leave_critical+0x22>
     baa:	4b06      	ldr	r3, [pc, #24]	; (bc4 <cpu_irq_leave_critical+0x28>)
     bac:	781b      	ldrb	r3, [r3, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d005      	beq.n	bbe <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     bb2:	2201      	movs	r2, #1
     bb4:	4b04      	ldr	r3, [pc, #16]	; (bc8 <cpu_irq_leave_critical+0x2c>)
     bb6:	701a      	strb	r2, [r3, #0]
     bb8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     bbc:	b662      	cpsie	i
	}
}
     bbe:	4770      	bx	lr
     bc0:	20000190 	.word	0x20000190
     bc4:	20000194 	.word	0x20000194
     bc8:	2000000c 	.word	0x2000000c

00000bcc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     bcc:	b500      	push	{lr}
     bce:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     bd0:	ab01      	add	r3, sp, #4
     bd2:	2280      	movs	r2, #128	; 0x80
     bd4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     bd6:	780a      	ldrb	r2, [r1, #0]
     bd8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     bda:	784a      	ldrb	r2, [r1, #1]
     bdc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     bde:	788a      	ldrb	r2, [r1, #2]
     be0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     be2:	0019      	movs	r1, r3
     be4:	4b01      	ldr	r3, [pc, #4]	; (bec <port_pin_set_config+0x20>)
     be6:	4798      	blx	r3
}
     be8:	b003      	add	sp, #12
     bea:	bd00      	pop	{pc}
     bec:	00001d41 	.word	0x00001d41

00000bf0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf2:	46de      	mov	lr, fp
     bf4:	4657      	mov	r7, sl
     bf6:	464e      	mov	r6, r9
     bf8:	4645      	mov	r5, r8
     bfa:	b5e0      	push	{r5, r6, r7, lr}
     bfc:	b087      	sub	sp, #28
     bfe:	4680      	mov	r8, r0
     c00:	9104      	str	r1, [sp, #16]
     c02:	0016      	movs	r6, r2
     c04:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     c06:	2200      	movs	r2, #0
     c08:	2300      	movs	r3, #0
     c0a:	2100      	movs	r1, #0
     c0c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     c0e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     c10:	2001      	movs	r0, #1
     c12:	0021      	movs	r1, r4
     c14:	9600      	str	r6, [sp, #0]
     c16:	9701      	str	r7, [sp, #4]
     c18:	465c      	mov	r4, fp
     c1a:	9403      	str	r4, [sp, #12]
     c1c:	4644      	mov	r4, r8
     c1e:	9405      	str	r4, [sp, #20]
     c20:	e013      	b.n	c4a <long_division+0x5a>
     c22:	2420      	movs	r4, #32
     c24:	1a64      	subs	r4, r4, r1
     c26:	0005      	movs	r5, r0
     c28:	40e5      	lsrs	r5, r4
     c2a:	46a8      	mov	r8, r5
     c2c:	e014      	b.n	c58 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     c2e:	9c00      	ldr	r4, [sp, #0]
     c30:	9d01      	ldr	r5, [sp, #4]
     c32:	1b12      	subs	r2, r2, r4
     c34:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     c36:	465c      	mov	r4, fp
     c38:	464d      	mov	r5, r9
     c3a:	432c      	orrs	r4, r5
     c3c:	46a3      	mov	fp, r4
     c3e:	9c03      	ldr	r4, [sp, #12]
     c40:	4645      	mov	r5, r8
     c42:	432c      	orrs	r4, r5
     c44:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     c46:	3901      	subs	r1, #1
     c48:	d325      	bcc.n	c96 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     c4a:	2420      	movs	r4, #32
     c4c:	4264      	negs	r4, r4
     c4e:	190c      	adds	r4, r1, r4
     c50:	d4e7      	bmi.n	c22 <long_division+0x32>
     c52:	0005      	movs	r5, r0
     c54:	40a5      	lsls	r5, r4
     c56:	46a8      	mov	r8, r5
     c58:	0004      	movs	r4, r0
     c5a:	408c      	lsls	r4, r1
     c5c:	46a1      	mov	r9, r4
		r = r << 1;
     c5e:	1892      	adds	r2, r2, r2
     c60:	415b      	adcs	r3, r3
     c62:	0014      	movs	r4, r2
     c64:	001d      	movs	r5, r3
		if (n & bit_shift) {
     c66:	9e05      	ldr	r6, [sp, #20]
     c68:	464f      	mov	r7, r9
     c6a:	403e      	ands	r6, r7
     c6c:	46b4      	mov	ip, r6
     c6e:	9e04      	ldr	r6, [sp, #16]
     c70:	4647      	mov	r7, r8
     c72:	403e      	ands	r6, r7
     c74:	46b2      	mov	sl, r6
     c76:	4666      	mov	r6, ip
     c78:	4657      	mov	r7, sl
     c7a:	433e      	orrs	r6, r7
     c7c:	d003      	beq.n	c86 <long_division+0x96>
			r |= 0x01;
     c7e:	0006      	movs	r6, r0
     c80:	4326      	orrs	r6, r4
     c82:	0032      	movs	r2, r6
     c84:	002b      	movs	r3, r5
		if (r >= d) {
     c86:	9c00      	ldr	r4, [sp, #0]
     c88:	9d01      	ldr	r5, [sp, #4]
     c8a:	429d      	cmp	r5, r3
     c8c:	d8db      	bhi.n	c46 <long_division+0x56>
     c8e:	d1ce      	bne.n	c2e <long_division+0x3e>
     c90:	4294      	cmp	r4, r2
     c92:	d8d8      	bhi.n	c46 <long_division+0x56>
     c94:	e7cb      	b.n	c2e <long_division+0x3e>
     c96:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     c98:	4658      	mov	r0, fp
     c9a:	0019      	movs	r1, r3
     c9c:	b007      	add	sp, #28
     c9e:	bc3c      	pop	{r2, r3, r4, r5}
     ca0:	4690      	mov	r8, r2
     ca2:	4699      	mov	r9, r3
     ca4:	46a2      	mov	sl, r4
     ca6:	46ab      	mov	fp, r5
     ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000caa <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     caa:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     cac:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cae:	2340      	movs	r3, #64	; 0x40
     cb0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     cb2:	4281      	cmp	r1, r0
     cb4:	d202      	bcs.n	cbc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     cb6:	0018      	movs	r0, r3
     cb8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     cba:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     cbc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     cbe:	1c63      	adds	r3, r4, #1
     cc0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     cc2:	4288      	cmp	r0, r1
     cc4:	d9f9      	bls.n	cba <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     cc6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     cc8:	2cff      	cmp	r4, #255	; 0xff
     cca:	d8f4      	bhi.n	cb6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     ccc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     cce:	2300      	movs	r3, #0
     cd0:	e7f1      	b.n	cb6 <_sercom_get_sync_baud_val+0xc>
	...

00000cd4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cd6:	b083      	sub	sp, #12
     cd8:	000f      	movs	r7, r1
     cda:	0016      	movs	r6, r2
     cdc:	aa08      	add	r2, sp, #32
     cde:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     ce0:	0004      	movs	r4, r0
     ce2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     ce4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     ce6:	42bc      	cmp	r4, r7
     ce8:	d902      	bls.n	cf0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     cea:	0010      	movs	r0, r2
     cec:	b003      	add	sp, #12
     cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     cf0:	2b00      	cmp	r3, #0
     cf2:	d114      	bne.n	d1e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     cf4:	0002      	movs	r2, r0
     cf6:	0008      	movs	r0, r1
     cf8:	2100      	movs	r1, #0
     cfa:	4c19      	ldr	r4, [pc, #100]	; (d60 <_sercom_get_async_baud_val+0x8c>)
     cfc:	47a0      	blx	r4
     cfe:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     d00:	003a      	movs	r2, r7
     d02:	2300      	movs	r3, #0
     d04:	2000      	movs	r0, #0
     d06:	4c17      	ldr	r4, [pc, #92]	; (d64 <_sercom_get_async_baud_val+0x90>)
     d08:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     d0a:	2200      	movs	r2, #0
     d0c:	2301      	movs	r3, #1
     d0e:	1a12      	subs	r2, r2, r0
     d10:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     d12:	0c12      	lsrs	r2, r2, #16
     d14:	041b      	lsls	r3, r3, #16
     d16:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     d18:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     d1a:	2200      	movs	r2, #0
     d1c:	e7e5      	b.n	cea <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     d1e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     d20:	2b01      	cmp	r3, #1
     d22:	d1f9      	bne.n	d18 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     d24:	000a      	movs	r2, r1
     d26:	2300      	movs	r3, #0
     d28:	2100      	movs	r1, #0
     d2a:	4c0d      	ldr	r4, [pc, #52]	; (d60 <_sercom_get_async_baud_val+0x8c>)
     d2c:	47a0      	blx	r4
     d2e:	0002      	movs	r2, r0
     d30:	000b      	movs	r3, r1
     d32:	9200      	str	r2, [sp, #0]
     d34:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     d36:	0038      	movs	r0, r7
     d38:	2100      	movs	r1, #0
     d3a:	4c0a      	ldr	r4, [pc, #40]	; (d64 <_sercom_get_async_baud_val+0x90>)
     d3c:	47a0      	blx	r4
     d3e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     d40:	2380      	movs	r3, #128	; 0x80
     d42:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     d44:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     d46:	4298      	cmp	r0, r3
     d48:	d8cf      	bhi.n	cea <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     d4a:	0f79      	lsrs	r1, r7, #29
     d4c:	00f8      	lsls	r0, r7, #3
     d4e:	9a00      	ldr	r2, [sp, #0]
     d50:	9b01      	ldr	r3, [sp, #4]
     d52:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     d54:	00ea      	lsls	r2, r5, #3
     d56:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     d58:	b2d2      	uxtb	r2, r2
     d5a:	0352      	lsls	r2, r2, #13
     d5c:	432a      	orrs	r2, r5
     d5e:	e7db      	b.n	d18 <_sercom_get_async_baud_val+0x44>
     d60:	000022f9 	.word	0x000022f9
     d64:	00000bf1 	.word	0x00000bf1

00000d68 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     d68:	b510      	push	{r4, lr}
     d6a:	b082      	sub	sp, #8
     d6c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     d6e:	4b0e      	ldr	r3, [pc, #56]	; (da8 <sercom_set_gclk_generator+0x40>)
     d70:	781b      	ldrb	r3, [r3, #0]
     d72:	2b00      	cmp	r3, #0
     d74:	d007      	beq.n	d86 <sercom_set_gclk_generator+0x1e>
     d76:	2900      	cmp	r1, #0
     d78:	d105      	bne.n	d86 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     d7a:	4b0b      	ldr	r3, [pc, #44]	; (da8 <sercom_set_gclk_generator+0x40>)
     d7c:	785b      	ldrb	r3, [r3, #1]
     d7e:	4283      	cmp	r3, r0
     d80:	d010      	beq.n	da4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     d82:	201d      	movs	r0, #29
     d84:	e00c      	b.n	da0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     d86:	a901      	add	r1, sp, #4
     d88:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     d8a:	2013      	movs	r0, #19
     d8c:	4b07      	ldr	r3, [pc, #28]	; (dac <sercom_set_gclk_generator+0x44>)
     d8e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     d90:	2013      	movs	r0, #19
     d92:	4b07      	ldr	r3, [pc, #28]	; (db0 <sercom_set_gclk_generator+0x48>)
     d94:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     d96:	4b04      	ldr	r3, [pc, #16]	; (da8 <sercom_set_gclk_generator+0x40>)
     d98:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     d9a:	2201      	movs	r2, #1
     d9c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     d9e:	2000      	movs	r0, #0
}
     da0:	b002      	add	sp, #8
     da2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     da4:	2000      	movs	r0, #0
     da6:	e7fb      	b.n	da0 <sercom_set_gclk_generator+0x38>
     da8:	20000198 	.word	0x20000198
     dac:	00001c49 	.word	0x00001c49
     db0:	00001bbd 	.word	0x00001bbd

00000db4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     db4:	4b40      	ldr	r3, [pc, #256]	; (eb8 <_sercom_get_default_pad+0x104>)
     db6:	4298      	cmp	r0, r3
     db8:	d031      	beq.n	e1e <_sercom_get_default_pad+0x6a>
     dba:	d90a      	bls.n	dd2 <_sercom_get_default_pad+0x1e>
     dbc:	4b3f      	ldr	r3, [pc, #252]	; (ebc <_sercom_get_default_pad+0x108>)
     dbe:	4298      	cmp	r0, r3
     dc0:	d04d      	beq.n	e5e <_sercom_get_default_pad+0xaa>
     dc2:	4b3f      	ldr	r3, [pc, #252]	; (ec0 <_sercom_get_default_pad+0x10c>)
     dc4:	4298      	cmp	r0, r3
     dc6:	d05a      	beq.n	e7e <_sercom_get_default_pad+0xca>
     dc8:	4b3e      	ldr	r3, [pc, #248]	; (ec4 <_sercom_get_default_pad+0x110>)
     dca:	4298      	cmp	r0, r3
     dcc:	d037      	beq.n	e3e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     dce:	2000      	movs	r0, #0
}
     dd0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     dd2:	4b3d      	ldr	r3, [pc, #244]	; (ec8 <_sercom_get_default_pad+0x114>)
     dd4:	4298      	cmp	r0, r3
     dd6:	d00c      	beq.n	df2 <_sercom_get_default_pad+0x3e>
     dd8:	4b3c      	ldr	r3, [pc, #240]	; (ecc <_sercom_get_default_pad+0x118>)
     dda:	4298      	cmp	r0, r3
     ddc:	d1f7      	bne.n	dce <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     dde:	2901      	cmp	r1, #1
     de0:	d017      	beq.n	e12 <_sercom_get_default_pad+0x5e>
     de2:	2900      	cmp	r1, #0
     de4:	d05d      	beq.n	ea2 <_sercom_get_default_pad+0xee>
     de6:	2902      	cmp	r1, #2
     de8:	d015      	beq.n	e16 <_sercom_get_default_pad+0x62>
     dea:	2903      	cmp	r1, #3
     dec:	d015      	beq.n	e1a <_sercom_get_default_pad+0x66>
	return 0;
     dee:	2000      	movs	r0, #0
     df0:	e7ee      	b.n	dd0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     df2:	2901      	cmp	r1, #1
     df4:	d007      	beq.n	e06 <_sercom_get_default_pad+0x52>
     df6:	2900      	cmp	r1, #0
     df8:	d051      	beq.n	e9e <_sercom_get_default_pad+0xea>
     dfa:	2902      	cmp	r1, #2
     dfc:	d005      	beq.n	e0a <_sercom_get_default_pad+0x56>
     dfe:	2903      	cmp	r1, #3
     e00:	d005      	beq.n	e0e <_sercom_get_default_pad+0x5a>
	return 0;
     e02:	2000      	movs	r0, #0
     e04:	e7e4      	b.n	dd0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e06:	4832      	ldr	r0, [pc, #200]	; (ed0 <_sercom_get_default_pad+0x11c>)
     e08:	e7e2      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e0a:	4832      	ldr	r0, [pc, #200]	; (ed4 <_sercom_get_default_pad+0x120>)
     e0c:	e7e0      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e0e:	4832      	ldr	r0, [pc, #200]	; (ed8 <_sercom_get_default_pad+0x124>)
     e10:	e7de      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e12:	4832      	ldr	r0, [pc, #200]	; (edc <_sercom_get_default_pad+0x128>)
     e14:	e7dc      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e16:	4832      	ldr	r0, [pc, #200]	; (ee0 <_sercom_get_default_pad+0x12c>)
     e18:	e7da      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e1a:	4832      	ldr	r0, [pc, #200]	; (ee4 <_sercom_get_default_pad+0x130>)
     e1c:	e7d8      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e1e:	2901      	cmp	r1, #1
     e20:	d007      	beq.n	e32 <_sercom_get_default_pad+0x7e>
     e22:	2900      	cmp	r1, #0
     e24:	d03f      	beq.n	ea6 <_sercom_get_default_pad+0xf2>
     e26:	2902      	cmp	r1, #2
     e28:	d005      	beq.n	e36 <_sercom_get_default_pad+0x82>
     e2a:	2903      	cmp	r1, #3
     e2c:	d005      	beq.n	e3a <_sercom_get_default_pad+0x86>
	return 0;
     e2e:	2000      	movs	r0, #0
     e30:	e7ce      	b.n	dd0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e32:	482d      	ldr	r0, [pc, #180]	; (ee8 <_sercom_get_default_pad+0x134>)
     e34:	e7cc      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e36:	482d      	ldr	r0, [pc, #180]	; (eec <_sercom_get_default_pad+0x138>)
     e38:	e7ca      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e3a:	482d      	ldr	r0, [pc, #180]	; (ef0 <_sercom_get_default_pad+0x13c>)
     e3c:	e7c8      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e3e:	2901      	cmp	r1, #1
     e40:	d007      	beq.n	e52 <_sercom_get_default_pad+0x9e>
     e42:	2900      	cmp	r1, #0
     e44:	d031      	beq.n	eaa <_sercom_get_default_pad+0xf6>
     e46:	2902      	cmp	r1, #2
     e48:	d005      	beq.n	e56 <_sercom_get_default_pad+0xa2>
     e4a:	2903      	cmp	r1, #3
     e4c:	d005      	beq.n	e5a <_sercom_get_default_pad+0xa6>
	return 0;
     e4e:	2000      	movs	r0, #0
     e50:	e7be      	b.n	dd0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e52:	4828      	ldr	r0, [pc, #160]	; (ef4 <_sercom_get_default_pad+0x140>)
     e54:	e7bc      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e56:	4828      	ldr	r0, [pc, #160]	; (ef8 <_sercom_get_default_pad+0x144>)
     e58:	e7ba      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e5a:	4828      	ldr	r0, [pc, #160]	; (efc <_sercom_get_default_pad+0x148>)
     e5c:	e7b8      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e5e:	2901      	cmp	r1, #1
     e60:	d007      	beq.n	e72 <_sercom_get_default_pad+0xbe>
     e62:	2900      	cmp	r1, #0
     e64:	d023      	beq.n	eae <_sercom_get_default_pad+0xfa>
     e66:	2902      	cmp	r1, #2
     e68:	d005      	beq.n	e76 <_sercom_get_default_pad+0xc2>
     e6a:	2903      	cmp	r1, #3
     e6c:	d005      	beq.n	e7a <_sercom_get_default_pad+0xc6>
	return 0;
     e6e:	2000      	movs	r0, #0
     e70:	e7ae      	b.n	dd0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e72:	4823      	ldr	r0, [pc, #140]	; (f00 <_sercom_get_default_pad+0x14c>)
     e74:	e7ac      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e76:	4823      	ldr	r0, [pc, #140]	; (f04 <_sercom_get_default_pad+0x150>)
     e78:	e7aa      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e7a:	4823      	ldr	r0, [pc, #140]	; (f08 <_sercom_get_default_pad+0x154>)
     e7c:	e7a8      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e7e:	2901      	cmp	r1, #1
     e80:	d007      	beq.n	e92 <_sercom_get_default_pad+0xde>
     e82:	2900      	cmp	r1, #0
     e84:	d015      	beq.n	eb2 <_sercom_get_default_pad+0xfe>
     e86:	2902      	cmp	r1, #2
     e88:	d005      	beq.n	e96 <_sercom_get_default_pad+0xe2>
     e8a:	2903      	cmp	r1, #3
     e8c:	d005      	beq.n	e9a <_sercom_get_default_pad+0xe6>
	return 0;
     e8e:	2000      	movs	r0, #0
     e90:	e79e      	b.n	dd0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     e92:	481e      	ldr	r0, [pc, #120]	; (f0c <_sercom_get_default_pad+0x158>)
     e94:	e79c      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e96:	481e      	ldr	r0, [pc, #120]	; (f10 <_sercom_get_default_pad+0x15c>)
     e98:	e79a      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e9a:	481e      	ldr	r0, [pc, #120]	; (f14 <_sercom_get_default_pad+0x160>)
     e9c:	e798      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     e9e:	481e      	ldr	r0, [pc, #120]	; (f18 <_sercom_get_default_pad+0x164>)
     ea0:	e796      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     ea2:	2003      	movs	r0, #3
     ea4:	e794      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     ea6:	481d      	ldr	r0, [pc, #116]	; (f1c <_sercom_get_default_pad+0x168>)
     ea8:	e792      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     eaa:	481d      	ldr	r0, [pc, #116]	; (f20 <_sercom_get_default_pad+0x16c>)
     eac:	e790      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     eae:	481d      	ldr	r0, [pc, #116]	; (f24 <_sercom_get_default_pad+0x170>)
     eb0:	e78e      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     eb2:	481d      	ldr	r0, [pc, #116]	; (f28 <_sercom_get_default_pad+0x174>)
     eb4:	e78c      	b.n	dd0 <_sercom_get_default_pad+0x1c>
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	42001000 	.word	0x42001000
     ebc:	42001800 	.word	0x42001800
     ec0:	42001c00 	.word	0x42001c00
     ec4:	42001400 	.word	0x42001400
     ec8:	42000800 	.word	0x42000800
     ecc:	42000c00 	.word	0x42000c00
     ed0:	00050003 	.word	0x00050003
     ed4:	00060003 	.word	0x00060003
     ed8:	00070003 	.word	0x00070003
     edc:	00010003 	.word	0x00010003
     ee0:	001e0003 	.word	0x001e0003
     ee4:	001f0003 	.word	0x001f0003
     ee8:	00090003 	.word	0x00090003
     eec:	000a0003 	.word	0x000a0003
     ef0:	000b0003 	.word	0x000b0003
     ef4:	00110003 	.word	0x00110003
     ef8:	00120003 	.word	0x00120003
     efc:	00130003 	.word	0x00130003
     f00:	000d0003 	.word	0x000d0003
     f04:	000e0003 	.word	0x000e0003
     f08:	000f0003 	.word	0x000f0003
     f0c:	00170003 	.word	0x00170003
     f10:	00180003 	.word	0x00180003
     f14:	00190003 	.word	0x00190003
     f18:	00040003 	.word	0x00040003
     f1c:	00080003 	.word	0x00080003
     f20:	00100003 	.word	0x00100003
     f24:	000c0003 	.word	0x000c0003
     f28:	00160003 	.word	0x00160003

00000f2c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     f2c:	b530      	push	{r4, r5, lr}
     f2e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     f30:	4b0b      	ldr	r3, [pc, #44]	; (f60 <_sercom_get_sercom_inst_index+0x34>)
     f32:	466a      	mov	r2, sp
     f34:	cb32      	ldmia	r3!, {r1, r4, r5}
     f36:	c232      	stmia	r2!, {r1, r4, r5}
     f38:	cb32      	ldmia	r3!, {r1, r4, r5}
     f3a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     f3c:	9b00      	ldr	r3, [sp, #0]
     f3e:	4283      	cmp	r3, r0
     f40:	d00b      	beq.n	f5a <_sercom_get_sercom_inst_index+0x2e>
     f42:	2301      	movs	r3, #1
     f44:	009a      	lsls	r2, r3, #2
     f46:	4669      	mov	r1, sp
     f48:	5852      	ldr	r2, [r2, r1]
     f4a:	4282      	cmp	r2, r0
     f4c:	d006      	beq.n	f5c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f4e:	3301      	adds	r3, #1
     f50:	2b06      	cmp	r3, #6
     f52:	d1f7      	bne.n	f44 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     f54:	2000      	movs	r0, #0
}
     f56:	b007      	add	sp, #28
     f58:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f5a:	2300      	movs	r3, #0
			return i;
     f5c:	b2d8      	uxtb	r0, r3
     f5e:	e7fa      	b.n	f56 <_sercom_get_sercom_inst_index+0x2a>
     f60:	00004994 	.word	0x00004994

00000f64 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     f64:	4770      	bx	lr
	...

00000f68 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     f68:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     f6a:	4b0a      	ldr	r3, [pc, #40]	; (f94 <_sercom_set_handler+0x2c>)
     f6c:	781b      	ldrb	r3, [r3, #0]
     f6e:	2b00      	cmp	r3, #0
     f70:	d10c      	bne.n	f8c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f72:	4f09      	ldr	r7, [pc, #36]	; (f98 <_sercom_set_handler+0x30>)
     f74:	4e09      	ldr	r6, [pc, #36]	; (f9c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     f76:	4d0a      	ldr	r5, [pc, #40]	; (fa0 <_sercom_set_handler+0x38>)
     f78:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f7a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     f7c:	195a      	adds	r2, r3, r5
     f7e:	6014      	str	r4, [r2, #0]
     f80:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f82:	2b18      	cmp	r3, #24
     f84:	d1f9      	bne.n	f7a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     f86:	2201      	movs	r2, #1
     f88:	4b02      	ldr	r3, [pc, #8]	; (f94 <_sercom_set_handler+0x2c>)
     f8a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     f8c:	0080      	lsls	r0, r0, #2
     f8e:	4b02      	ldr	r3, [pc, #8]	; (f98 <_sercom_set_handler+0x30>)
     f90:	50c1      	str	r1, [r0, r3]
}
     f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f94:	2000019a 	.word	0x2000019a
     f98:	2000019c 	.word	0x2000019c
     f9c:	00000f65 	.word	0x00000f65
     fa0:	2000071c 	.word	0x2000071c

00000fa4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     fa4:	b500      	push	{lr}
     fa6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     fa8:	2309      	movs	r3, #9
     faa:	466a      	mov	r2, sp
     fac:	7013      	strb	r3, [r2, #0]
     fae:	3301      	adds	r3, #1
     fb0:	7053      	strb	r3, [r2, #1]
     fb2:	3301      	adds	r3, #1
     fb4:	7093      	strb	r3, [r2, #2]
     fb6:	3301      	adds	r3, #1
     fb8:	70d3      	strb	r3, [r2, #3]
     fba:	3301      	adds	r3, #1
     fbc:	7113      	strb	r3, [r2, #4]
     fbe:	3301      	adds	r3, #1
     fc0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     fc2:	4b03      	ldr	r3, [pc, #12]	; (fd0 <_sercom_get_interrupt_vector+0x2c>)
     fc4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     fc6:	466b      	mov	r3, sp
     fc8:	5618      	ldrsb	r0, [r3, r0]
}
     fca:	b003      	add	sp, #12
     fcc:	bd00      	pop	{pc}
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	00000f2d 	.word	0x00000f2d

00000fd4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     fd4:	b510      	push	{r4, lr}
     fd6:	4b02      	ldr	r3, [pc, #8]	; (fe0 <SERCOM0_Handler+0xc>)
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	2000      	movs	r0, #0
     fdc:	4798      	blx	r3
     fde:	bd10      	pop	{r4, pc}
     fe0:	2000019c 	.word	0x2000019c

00000fe4 <SERCOM1_Handler>:
     fe4:	b510      	push	{r4, lr}
     fe6:	4b02      	ldr	r3, [pc, #8]	; (ff0 <SERCOM1_Handler+0xc>)
     fe8:	685b      	ldr	r3, [r3, #4]
     fea:	2001      	movs	r0, #1
     fec:	4798      	blx	r3
     fee:	bd10      	pop	{r4, pc}
     ff0:	2000019c 	.word	0x2000019c

00000ff4 <SERCOM2_Handler>:
     ff4:	b510      	push	{r4, lr}
     ff6:	4b02      	ldr	r3, [pc, #8]	; (1000 <SERCOM2_Handler+0xc>)
     ff8:	689b      	ldr	r3, [r3, #8]
     ffa:	2002      	movs	r0, #2
     ffc:	4798      	blx	r3
     ffe:	bd10      	pop	{r4, pc}
    1000:	2000019c 	.word	0x2000019c

00001004 <SERCOM3_Handler>:
    1004:	b510      	push	{r4, lr}
    1006:	4b02      	ldr	r3, [pc, #8]	; (1010 <SERCOM3_Handler+0xc>)
    1008:	68db      	ldr	r3, [r3, #12]
    100a:	2003      	movs	r0, #3
    100c:	4798      	blx	r3
    100e:	bd10      	pop	{r4, pc}
    1010:	2000019c 	.word	0x2000019c

00001014 <SERCOM4_Handler>:
    1014:	b510      	push	{r4, lr}
    1016:	4b02      	ldr	r3, [pc, #8]	; (1020 <SERCOM4_Handler+0xc>)
    1018:	691b      	ldr	r3, [r3, #16]
    101a:	2004      	movs	r0, #4
    101c:	4798      	blx	r3
    101e:	bd10      	pop	{r4, pc}
    1020:	2000019c 	.word	0x2000019c

00001024 <SERCOM5_Handler>:
    1024:	b510      	push	{r4, lr}
    1026:	4b02      	ldr	r3, [pc, #8]	; (1030 <SERCOM5_Handler+0xc>)
    1028:	695b      	ldr	r3, [r3, #20]
    102a:	2005      	movs	r0, #5
    102c:	4798      	blx	r3
    102e:	bd10      	pop	{r4, pc}
    1030:	2000019c 	.word	0x2000019c

00001034 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1034:	b5f0      	push	{r4, r5, r6, r7, lr}
    1036:	46de      	mov	lr, fp
    1038:	4657      	mov	r7, sl
    103a:	464e      	mov	r6, r9
    103c:	4645      	mov	r5, r8
    103e:	b5e0      	push	{r5, r6, r7, lr}
    1040:	b091      	sub	sp, #68	; 0x44
    1042:	0005      	movs	r5, r0
    1044:	000c      	movs	r4, r1
    1046:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1048:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    104a:	0008      	movs	r0, r1
    104c:	4bbc      	ldr	r3, [pc, #752]	; (1340 <usart_init+0x30c>)
    104e:	4798      	blx	r3
    1050:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1052:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1054:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1056:	07db      	lsls	r3, r3, #31
    1058:	d506      	bpl.n	1068 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    105a:	b011      	add	sp, #68	; 0x44
    105c:	bc3c      	pop	{r2, r3, r4, r5}
    105e:	4690      	mov	r8, r2
    1060:	4699      	mov	r9, r3
    1062:	46a2      	mov	sl, r4
    1064:	46ab      	mov	fp, r5
    1066:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1068:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    106a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    106c:	079b      	lsls	r3, r3, #30
    106e:	d4f4      	bmi.n	105a <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1070:	49b4      	ldr	r1, [pc, #720]	; (1344 <usart_init+0x310>)
    1072:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1074:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1076:	2301      	movs	r3, #1
    1078:	40bb      	lsls	r3, r7
    107a:	4303      	orrs	r3, r0
    107c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    107e:	a90f      	add	r1, sp, #60	; 0x3c
    1080:	272d      	movs	r7, #45	; 0x2d
    1082:	5df3      	ldrb	r3, [r6, r7]
    1084:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1086:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1088:	b2d3      	uxtb	r3, r2
    108a:	9302      	str	r3, [sp, #8]
    108c:	0018      	movs	r0, r3
    108e:	4bae      	ldr	r3, [pc, #696]	; (1348 <usart_init+0x314>)
    1090:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1092:	9802      	ldr	r0, [sp, #8]
    1094:	4bad      	ldr	r3, [pc, #692]	; (134c <usart_init+0x318>)
    1096:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1098:	5df0      	ldrb	r0, [r6, r7]
    109a:	2100      	movs	r1, #0
    109c:	4bac      	ldr	r3, [pc, #688]	; (1350 <usart_init+0x31c>)
    109e:	4798      	blx	r3
	module->character_size = config->character_size;
    10a0:	7af3      	ldrb	r3, [r6, #11]
    10a2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    10a4:	2324      	movs	r3, #36	; 0x24
    10a6:	5cf3      	ldrb	r3, [r6, r3]
    10a8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    10aa:	2325      	movs	r3, #37	; 0x25
    10ac:	5cf3      	ldrb	r3, [r6, r3]
    10ae:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    10b0:	7ef3      	ldrb	r3, [r6, #27]
    10b2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    10b4:	7f33      	ldrb	r3, [r6, #28]
    10b6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    10b8:	682b      	ldr	r3, [r5, #0]
    10ba:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    10bc:	0018      	movs	r0, r3
    10be:	4ba0      	ldr	r3, [pc, #640]	; (1340 <usart_init+0x30c>)
    10c0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10c2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    10c4:	2200      	movs	r2, #0
    10c6:	230e      	movs	r3, #14
    10c8:	a906      	add	r1, sp, #24
    10ca:	468c      	mov	ip, r1
    10cc:	4463      	add	r3, ip
    10ce:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    10d0:	8a32      	ldrh	r2, [r6, #16]
    10d2:	9202      	str	r2, [sp, #8]
    10d4:	2380      	movs	r3, #128	; 0x80
    10d6:	01db      	lsls	r3, r3, #7
    10d8:	429a      	cmp	r2, r3
    10da:	d100      	bne.n	10de <usart_init+0xaa>
    10dc:	e09e      	b.n	121c <usart_init+0x1e8>
    10de:	d90f      	bls.n	1100 <usart_init+0xcc>
    10e0:	23c0      	movs	r3, #192	; 0xc0
    10e2:	01db      	lsls	r3, r3, #7
    10e4:	9a02      	ldr	r2, [sp, #8]
    10e6:	429a      	cmp	r2, r3
    10e8:	d100      	bne.n	10ec <usart_init+0xb8>
    10ea:	e092      	b.n	1212 <usart_init+0x1de>
    10ec:	2380      	movs	r3, #128	; 0x80
    10ee:	021b      	lsls	r3, r3, #8
    10f0:	429a      	cmp	r2, r3
    10f2:	d000      	beq.n	10f6 <usart_init+0xc2>
    10f4:	e11f      	b.n	1336 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    10f6:	2303      	movs	r3, #3
    10f8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    10fa:	2300      	movs	r3, #0
    10fc:	9307      	str	r3, [sp, #28]
    10fe:	e008      	b.n	1112 <usart_init+0xde>
	switch (config->sample_rate) {
    1100:	2380      	movs	r3, #128	; 0x80
    1102:	019b      	lsls	r3, r3, #6
    1104:	429a      	cmp	r2, r3
    1106:	d000      	beq.n	110a <usart_init+0xd6>
    1108:	e115      	b.n	1336 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    110a:	2310      	movs	r3, #16
    110c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    110e:	3b0f      	subs	r3, #15
    1110:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1112:	6833      	ldr	r3, [r6, #0]
    1114:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1116:	68f3      	ldr	r3, [r6, #12]
    1118:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    111a:	6973      	ldr	r3, [r6, #20]
    111c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    111e:	7e33      	ldrb	r3, [r6, #24]
    1120:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1122:	2326      	movs	r3, #38	; 0x26
    1124:	5cf3      	ldrb	r3, [r6, r3]
    1126:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1128:	6873      	ldr	r3, [r6, #4]
    112a:	4699      	mov	r9, r3
	switch (transfer_mode)
    112c:	2b00      	cmp	r3, #0
    112e:	d100      	bne.n	1132 <usart_init+0xfe>
    1130:	e0a0      	b.n	1274 <usart_init+0x240>
    1132:	2380      	movs	r3, #128	; 0x80
    1134:	055b      	lsls	r3, r3, #21
    1136:	4599      	cmp	r9, r3
    1138:	d100      	bne.n	113c <usart_init+0x108>
    113a:	e084      	b.n	1246 <usart_init+0x212>
	if(config->encoding_format_enable) {
    113c:	7e73      	ldrb	r3, [r6, #25]
    113e:	2b00      	cmp	r3, #0
    1140:	d002      	beq.n	1148 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1142:	7eb3      	ldrb	r3, [r6, #26]
    1144:	4642      	mov	r2, r8
    1146:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1148:	682a      	ldr	r2, [r5, #0]
    114a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    114c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    114e:	2b00      	cmp	r3, #0
    1150:	d1fc      	bne.n	114c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1152:	330e      	adds	r3, #14
    1154:	aa06      	add	r2, sp, #24
    1156:	4694      	mov	ip, r2
    1158:	4463      	add	r3, ip
    115a:	881b      	ldrh	r3, [r3, #0]
    115c:	4642      	mov	r2, r8
    115e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1160:	9b05      	ldr	r3, [sp, #20]
    1162:	9a03      	ldr	r2, [sp, #12]
    1164:	4313      	orrs	r3, r2
    1166:	9a04      	ldr	r2, [sp, #16]
    1168:	4313      	orrs	r3, r2
    116a:	464a      	mov	r2, r9
    116c:	4313      	orrs	r3, r2
    116e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1170:	465b      	mov	r3, fp
    1172:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1174:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1176:	4653      	mov	r3, sl
    1178:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    117a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    117c:	2327      	movs	r3, #39	; 0x27
    117e:	5cf3      	ldrb	r3, [r6, r3]
    1180:	2b00      	cmp	r3, #0
    1182:	d101      	bne.n	1188 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1184:	3304      	adds	r3, #4
    1186:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1188:	7e73      	ldrb	r3, [r6, #25]
    118a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    118c:	7f32      	ldrb	r2, [r6, #28]
    118e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1190:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1192:	7f72      	ldrb	r2, [r6, #29]
    1194:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1196:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1198:	2224      	movs	r2, #36	; 0x24
    119a:	5cb2      	ldrb	r2, [r6, r2]
    119c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    119e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    11a0:	2225      	movs	r2, #37	; 0x25
    11a2:	5cb2      	ldrb	r2, [r6, r2]
    11a4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11a6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    11a8:	7ab1      	ldrb	r1, [r6, #10]
    11aa:	7af2      	ldrb	r2, [r6, #11]
    11ac:	4311      	orrs	r1, r2
    11ae:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    11b0:	8933      	ldrh	r3, [r6, #8]
    11b2:	2bff      	cmp	r3, #255	; 0xff
    11b4:	d100      	bne.n	11b8 <usart_init+0x184>
    11b6:	e081      	b.n	12bc <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    11b8:	2280      	movs	r2, #128	; 0x80
    11ba:	0452      	lsls	r2, r2, #17
    11bc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    11be:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    11c0:	232c      	movs	r3, #44	; 0x2c
    11c2:	5cf3      	ldrb	r3, [r6, r3]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d103      	bne.n	11d0 <usart_init+0x19c>
    11c8:	4b62      	ldr	r3, [pc, #392]	; (1354 <usart_init+0x320>)
    11ca:	789b      	ldrb	r3, [r3, #2]
    11cc:	079b      	lsls	r3, r3, #30
    11ce:	d501      	bpl.n	11d4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    11d0:	2380      	movs	r3, #128	; 0x80
    11d2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    11d4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    11d6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    11d8:	2b00      	cmp	r3, #0
    11da:	d1fc      	bne.n	11d6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    11dc:	4643      	mov	r3, r8
    11de:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    11e0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    11e2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    11e4:	2b00      	cmp	r3, #0
    11e6:	d1fc      	bne.n	11e2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    11e8:	4643      	mov	r3, r8
    11ea:	601f      	str	r7, [r3, #0]
    11ec:	ab0e      	add	r3, sp, #56	; 0x38
    11ee:	2280      	movs	r2, #128	; 0x80
    11f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11f2:	2200      	movs	r2, #0
    11f4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    11f6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    11f8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    11fa:	6b33      	ldr	r3, [r6, #48]	; 0x30
    11fc:	930a      	str	r3, [sp, #40]	; 0x28
    11fe:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1200:	930b      	str	r3, [sp, #44]	; 0x2c
    1202:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1204:	930c      	str	r3, [sp, #48]	; 0x30
    1206:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1208:	9302      	str	r3, [sp, #8]
    120a:	930d      	str	r3, [sp, #52]	; 0x34
    120c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    120e:	ae0a      	add	r6, sp, #40	; 0x28
    1210:	e063      	b.n	12da <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1212:	2308      	movs	r3, #8
    1214:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1216:	3b07      	subs	r3, #7
    1218:	9307      	str	r3, [sp, #28]
    121a:	e77a      	b.n	1112 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    121c:	6833      	ldr	r3, [r6, #0]
    121e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1220:	68f3      	ldr	r3, [r6, #12]
    1222:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1224:	6973      	ldr	r3, [r6, #20]
    1226:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1228:	7e33      	ldrb	r3, [r6, #24]
    122a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    122c:	2326      	movs	r3, #38	; 0x26
    122e:	5cf3      	ldrb	r3, [r6, r3]
    1230:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1232:	6873      	ldr	r3, [r6, #4]
    1234:	4699      	mov	r9, r3
	switch (transfer_mode)
    1236:	2b00      	cmp	r3, #0
    1238:	d018      	beq.n	126c <usart_init+0x238>
    123a:	2380      	movs	r3, #128	; 0x80
    123c:	055b      	lsls	r3, r3, #21
    123e:	4599      	cmp	r9, r3
    1240:	d001      	beq.n	1246 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1242:	2000      	movs	r0, #0
    1244:	e025      	b.n	1292 <usart_init+0x25e>
			if (!config->use_external_clock) {
    1246:	2327      	movs	r3, #39	; 0x27
    1248:	5cf3      	ldrb	r3, [r6, r3]
    124a:	2b00      	cmp	r3, #0
    124c:	d000      	beq.n	1250 <usart_init+0x21c>
    124e:	e775      	b.n	113c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1250:	6a33      	ldr	r3, [r6, #32]
    1252:	001f      	movs	r7, r3
    1254:	b2c0      	uxtb	r0, r0
    1256:	4b40      	ldr	r3, [pc, #256]	; (1358 <usart_init+0x324>)
    1258:	4798      	blx	r3
    125a:	0001      	movs	r1, r0
    125c:	220e      	movs	r2, #14
    125e:	ab06      	add	r3, sp, #24
    1260:	469c      	mov	ip, r3
    1262:	4462      	add	r2, ip
    1264:	0038      	movs	r0, r7
    1266:	4b3d      	ldr	r3, [pc, #244]	; (135c <usart_init+0x328>)
    1268:	4798      	blx	r3
    126a:	e012      	b.n	1292 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    126c:	2308      	movs	r3, #8
    126e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1270:	2300      	movs	r3, #0
    1272:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1274:	2327      	movs	r3, #39	; 0x27
    1276:	5cf3      	ldrb	r3, [r6, r3]
    1278:	2b00      	cmp	r3, #0
    127a:	d00e      	beq.n	129a <usart_init+0x266>
				status_code =
    127c:	9b06      	ldr	r3, [sp, #24]
    127e:	9300      	str	r3, [sp, #0]
    1280:	9b07      	ldr	r3, [sp, #28]
    1282:	220e      	movs	r2, #14
    1284:	a906      	add	r1, sp, #24
    1286:	468c      	mov	ip, r1
    1288:	4462      	add	r2, ip
    128a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    128c:	6a30      	ldr	r0, [r6, #32]
    128e:	4f34      	ldr	r7, [pc, #208]	; (1360 <usart_init+0x32c>)
    1290:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1292:	2800      	cmp	r0, #0
    1294:	d000      	beq.n	1298 <usart_init+0x264>
    1296:	e6e0      	b.n	105a <usart_init+0x26>
    1298:	e750      	b.n	113c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    129a:	6a33      	ldr	r3, [r6, #32]
    129c:	001f      	movs	r7, r3
    129e:	b2c0      	uxtb	r0, r0
    12a0:	4b2d      	ldr	r3, [pc, #180]	; (1358 <usart_init+0x324>)
    12a2:	4798      	blx	r3
    12a4:	0001      	movs	r1, r0
				status_code =
    12a6:	9b06      	ldr	r3, [sp, #24]
    12a8:	9300      	str	r3, [sp, #0]
    12aa:	9b07      	ldr	r3, [sp, #28]
    12ac:	220e      	movs	r2, #14
    12ae:	a806      	add	r0, sp, #24
    12b0:	4684      	mov	ip, r0
    12b2:	4462      	add	r2, ip
    12b4:	0038      	movs	r0, r7
    12b6:	4f2a      	ldr	r7, [pc, #168]	; (1360 <usart_init+0x32c>)
    12b8:	47b8      	blx	r7
    12ba:	e7ea      	b.n	1292 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    12bc:	7ef3      	ldrb	r3, [r6, #27]
    12be:	2b00      	cmp	r3, #0
    12c0:	d100      	bne.n	12c4 <usart_init+0x290>
    12c2:	e77d      	b.n	11c0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    12c4:	2380      	movs	r3, #128	; 0x80
    12c6:	04db      	lsls	r3, r3, #19
    12c8:	431f      	orrs	r7, r3
    12ca:	e779      	b.n	11c0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    12cc:	0020      	movs	r0, r4
    12ce:	4b25      	ldr	r3, [pc, #148]	; (1364 <usart_init+0x330>)
    12d0:	4798      	blx	r3
    12d2:	e007      	b.n	12e4 <usart_init+0x2b0>
    12d4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    12d6:	2f04      	cmp	r7, #4
    12d8:	d00d      	beq.n	12f6 <usart_init+0x2c2>
    12da:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    12dc:	00bb      	lsls	r3, r7, #2
    12de:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    12e0:	2800      	cmp	r0, #0
    12e2:	d0f3      	beq.n	12cc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    12e4:	1c43      	adds	r3, r0, #1
    12e6:	d0f5      	beq.n	12d4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    12e8:	a90e      	add	r1, sp, #56	; 0x38
    12ea:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    12ec:	0c00      	lsrs	r0, r0, #16
    12ee:	b2c0      	uxtb	r0, r0
    12f0:	4b1d      	ldr	r3, [pc, #116]	; (1368 <usart_init+0x334>)
    12f2:	4798      	blx	r3
    12f4:	e7ee      	b.n	12d4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    12f6:	2300      	movs	r3, #0
    12f8:	60eb      	str	r3, [r5, #12]
    12fa:	612b      	str	r3, [r5, #16]
    12fc:	616b      	str	r3, [r5, #20]
    12fe:	61ab      	str	r3, [r5, #24]
    1300:	61eb      	str	r3, [r5, #28]
    1302:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1304:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1306:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1308:	2200      	movs	r2, #0
    130a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    130c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    130e:	3330      	adds	r3, #48	; 0x30
    1310:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1312:	3301      	adds	r3, #1
    1314:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1316:	3301      	adds	r3, #1
    1318:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    131a:	3301      	adds	r3, #1
    131c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    131e:	6828      	ldr	r0, [r5, #0]
    1320:	4b07      	ldr	r3, [pc, #28]	; (1340 <usart_init+0x30c>)
    1322:	4798      	blx	r3
    1324:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1326:	4911      	ldr	r1, [pc, #68]	; (136c <usart_init+0x338>)
    1328:	4b11      	ldr	r3, [pc, #68]	; (1370 <usart_init+0x33c>)
    132a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    132c:	00a4      	lsls	r4, r4, #2
    132e:	4b11      	ldr	r3, [pc, #68]	; (1374 <usart_init+0x340>)
    1330:	50e5      	str	r5, [r4, r3]
	return status_code;
    1332:	2000      	movs	r0, #0
    1334:	e691      	b.n	105a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1336:	2310      	movs	r3, #16
    1338:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    133a:	2300      	movs	r3, #0
    133c:	9307      	str	r3, [sp, #28]
    133e:	e6e8      	b.n	1112 <usart_init+0xde>
    1340:	00000f2d 	.word	0x00000f2d
    1344:	40000400 	.word	0x40000400
    1348:	00001c49 	.word	0x00001c49
    134c:	00001bbd 	.word	0x00001bbd
    1350:	00000d69 	.word	0x00000d69
    1354:	41002000 	.word	0x41002000
    1358:	00001c65 	.word	0x00001c65
    135c:	00000cab 	.word	0x00000cab
    1360:	00000cd5 	.word	0x00000cd5
    1364:	00000db5 	.word	0x00000db5
    1368:	00001d41 	.word	0x00001d41
    136c:	00001479 	.word	0x00001479
    1370:	00000f69 	.word	0x00000f69
    1374:	2000071c 	.word	0x2000071c

00001378 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    137a:	0006      	movs	r6, r0
    137c:	000c      	movs	r4, r1
    137e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1380:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1382:	4b0a      	ldr	r3, [pc, #40]	; (13ac <_usart_write_buffer+0x34>)
    1384:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1386:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    1388:	b29b      	uxth	r3, r3
    138a:	2b00      	cmp	r3, #0
    138c:	d003      	beq.n	1396 <_usart_write_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    138e:	4b08      	ldr	r3, [pc, #32]	; (13b0 <_usart_write_buffer+0x38>)
    1390:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    1392:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    1394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    1396:	85f5      	strh	r5, [r6, #46]	; 0x2e
    1398:	4b05      	ldr	r3, [pc, #20]	; (13b0 <_usart_write_buffer+0x38>)
    139a:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    139c:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    139e:	2205      	movs	r2, #5
    13a0:	2333      	movs	r3, #51	; 0x33
    13a2:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    13a4:	3b32      	subs	r3, #50	; 0x32
    13a6:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    13a8:	2000      	movs	r0, #0
    13aa:	e7f3      	b.n	1394 <_usart_write_buffer+0x1c>
    13ac:	00000b5d 	.word	0x00000b5d
    13b0:	00000b9d 	.word	0x00000b9d

000013b4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    13b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13b6:	0004      	movs	r4, r0
    13b8:	000d      	movs	r5, r1
    13ba:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13bc:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    13be:	4b0f      	ldr	r3, [pc, #60]	; (13fc <_usart_read_buffer+0x48>)
    13c0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    13c2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    13c4:	b29b      	uxth	r3, r3
    13c6:	2b00      	cmp	r3, #0
    13c8:	d003      	beq.n	13d2 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    13ca:	4b0d      	ldr	r3, [pc, #52]	; (1400 <_usart_read_buffer+0x4c>)
    13cc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    13ce:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    13d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    13d2:	85a6      	strh	r6, [r4, #44]	; 0x2c
    13d4:	4b0a      	ldr	r3, [pc, #40]	; (1400 <_usart_read_buffer+0x4c>)
    13d6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    13d8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    13da:	2205      	movs	r2, #5
    13dc:	2332      	movs	r3, #50	; 0x32
    13de:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    13e0:	3b2e      	subs	r3, #46	; 0x2e
    13e2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    13e4:	7a23      	ldrb	r3, [r4, #8]
    13e6:	2b00      	cmp	r3, #0
    13e8:	d001      	beq.n	13ee <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    13ea:	2320      	movs	r3, #32
    13ec:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    13ee:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    13f0:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    13f2:	2b00      	cmp	r3, #0
    13f4:	d0ec      	beq.n	13d0 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    13f6:	2308      	movs	r3, #8
    13f8:	75bb      	strb	r3, [r7, #22]
    13fa:	e7e9      	b.n	13d0 <_usart_read_buffer+0x1c>
    13fc:	00000b5d 	.word	0x00000b5d
    1400:	00000b9d 	.word	0x00000b9d

00001404 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1404:	1c93      	adds	r3, r2, #2
    1406:	009b      	lsls	r3, r3, #2
    1408:	18c3      	adds	r3, r0, r3
    140a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    140c:	2130      	movs	r1, #48	; 0x30
    140e:	2301      	movs	r3, #1
    1410:	4093      	lsls	r3, r2
    1412:	001a      	movs	r2, r3
    1414:	5c43      	ldrb	r3, [r0, r1]
    1416:	4313      	orrs	r3, r2
    1418:	5443      	strb	r3, [r0, r1]
}
    141a:	4770      	bx	lr

0000141c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    141c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    141e:	2317      	movs	r3, #23
	if (length == 0) {
    1420:	2a00      	cmp	r2, #0
    1422:	d101      	bne.n	1428 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    1424:	0018      	movs	r0, r3
    1426:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    1428:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    142a:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    142c:	2c00      	cmp	r4, #0
    142e:	d0f9      	beq.n	1424 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    1430:	4b01      	ldr	r3, [pc, #4]	; (1438 <usart_write_buffer_job+0x1c>)
    1432:	4798      	blx	r3
    1434:	0003      	movs	r3, r0
    1436:	e7f5      	b.n	1424 <usart_write_buffer_job+0x8>
    1438:	00001379 	.word	0x00001379

0000143c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    143c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    143e:	2317      	movs	r3, #23
	if (length == 0) {
    1440:	2a00      	cmp	r2, #0
    1442:	d101      	bne.n	1448 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1444:	0018      	movs	r0, r3
    1446:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1448:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    144a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    144c:	2c00      	cmp	r4, #0
    144e:	d0f9      	beq.n	1444 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    1450:	4b01      	ldr	r3, [pc, #4]	; (1458 <usart_read_buffer_job+0x1c>)
    1452:	4798      	blx	r3
    1454:	0003      	movs	r3, r0
    1456:	e7f5      	b.n	1444 <usart_read_buffer_job+0x8>
    1458:	000013b5 	.word	0x000013b5

0000145c <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    145c:	2900      	cmp	r1, #0
    145e:	d003      	beq.n	1468 <usart_get_job_status+0xc>
    1460:	2901      	cmp	r1, #1
    1462:	d005      	beq.n	1470 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    1464:	2017      	movs	r0, #23
    1466:	e002      	b.n	146e <usart_get_job_status+0x12>
			status_code = module->rx_status;
    1468:	2332      	movs	r3, #50	; 0x32
    146a:	5cc0      	ldrb	r0, [r0, r3]
    146c:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    146e:	4770      	bx	lr
			status_code = module->tx_status;
    1470:	2333      	movs	r3, #51	; 0x33
    1472:	5cc0      	ldrb	r0, [r0, r3]
    1474:	b2c0      	uxtb	r0, r0
			break;
    1476:	e7fa      	b.n	146e <usart_get_job_status+0x12>

00001478 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    147a:	0080      	lsls	r0, r0, #2
    147c:	4b62      	ldr	r3, [pc, #392]	; (1608 <_usart_interrupt_handler+0x190>)
    147e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1480:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1482:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1484:	2b00      	cmp	r3, #0
    1486:	d1fc      	bne.n	1482 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1488:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    148a:	7da6      	ldrb	r6, [r4, #22]
    148c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    148e:	2330      	movs	r3, #48	; 0x30
    1490:	5ceb      	ldrb	r3, [r5, r3]
    1492:	2231      	movs	r2, #49	; 0x31
    1494:	5caf      	ldrb	r7, [r5, r2]
    1496:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1498:	07f3      	lsls	r3, r6, #31
    149a:	d522      	bpl.n	14e2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    149c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    149e:	b29b      	uxth	r3, r3
    14a0:	2b00      	cmp	r3, #0
    14a2:	d01c      	beq.n	14de <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    14a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    14a6:	7813      	ldrb	r3, [r2, #0]
    14a8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    14aa:	1c51      	adds	r1, r2, #1
    14ac:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    14ae:	7969      	ldrb	r1, [r5, #5]
    14b0:	2901      	cmp	r1, #1
    14b2:	d00e      	beq.n	14d2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    14b4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    14b6:	05db      	lsls	r3, r3, #23
    14b8:	0ddb      	lsrs	r3, r3, #23
    14ba:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    14bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    14be:	3b01      	subs	r3, #1
    14c0:	b29b      	uxth	r3, r3
    14c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    14c4:	2b00      	cmp	r3, #0
    14c6:	d10c      	bne.n	14e2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    14c8:	3301      	adds	r3, #1
    14ca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    14cc:	3301      	adds	r3, #1
    14ce:	75a3      	strb	r3, [r4, #22]
    14d0:	e007      	b.n	14e2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    14d2:	7851      	ldrb	r1, [r2, #1]
    14d4:	0209      	lsls	r1, r1, #8
    14d6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    14d8:	3202      	adds	r2, #2
    14da:	62aa      	str	r2, [r5, #40]	; 0x28
    14dc:	e7eb      	b.n	14b6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    14de:	2301      	movs	r3, #1
    14e0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    14e2:	07b3      	lsls	r3, r6, #30
    14e4:	d506      	bpl.n	14f4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    14e6:	2302      	movs	r3, #2
    14e8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    14ea:	2200      	movs	r2, #0
    14ec:	3331      	adds	r3, #49	; 0x31
    14ee:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    14f0:	07fb      	lsls	r3, r7, #31
    14f2:	d41a      	bmi.n	152a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    14f4:	0773      	lsls	r3, r6, #29
    14f6:	d565      	bpl.n	15c4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    14f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    14fa:	b29b      	uxth	r3, r3
    14fc:	2b00      	cmp	r3, #0
    14fe:	d05f      	beq.n	15c0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1500:	8b63      	ldrh	r3, [r4, #26]
    1502:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1504:	071a      	lsls	r2, r3, #28
    1506:	d414      	bmi.n	1532 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1508:	223f      	movs	r2, #63	; 0x3f
    150a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    150c:	2b00      	cmp	r3, #0
    150e:	d034      	beq.n	157a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1510:	079a      	lsls	r2, r3, #30
    1512:	d511      	bpl.n	1538 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1514:	221a      	movs	r2, #26
    1516:	2332      	movs	r3, #50	; 0x32
    1518:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    151a:	3b30      	subs	r3, #48	; 0x30
    151c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    151e:	077b      	lsls	r3, r7, #29
    1520:	d550      	bpl.n	15c4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1522:	0028      	movs	r0, r5
    1524:	696b      	ldr	r3, [r5, #20]
    1526:	4798      	blx	r3
    1528:	e04c      	b.n	15c4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    152a:	0028      	movs	r0, r5
    152c:	68eb      	ldr	r3, [r5, #12]
    152e:	4798      	blx	r3
    1530:	e7e0      	b.n	14f4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1532:	2237      	movs	r2, #55	; 0x37
    1534:	4013      	ands	r3, r2
    1536:	e7e9      	b.n	150c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1538:	075a      	lsls	r2, r3, #29
    153a:	d505      	bpl.n	1548 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    153c:	221e      	movs	r2, #30
    153e:	2332      	movs	r3, #50	; 0x32
    1540:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1542:	3b2e      	subs	r3, #46	; 0x2e
    1544:	8363      	strh	r3, [r4, #26]
    1546:	e7ea      	b.n	151e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1548:	07da      	lsls	r2, r3, #31
    154a:	d505      	bpl.n	1558 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    154c:	2213      	movs	r2, #19
    154e:	2332      	movs	r3, #50	; 0x32
    1550:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1552:	3b31      	subs	r3, #49	; 0x31
    1554:	8363      	strh	r3, [r4, #26]
    1556:	e7e2      	b.n	151e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1558:	06da      	lsls	r2, r3, #27
    155a:	d505      	bpl.n	1568 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    155c:	2242      	movs	r2, #66	; 0x42
    155e:	2332      	movs	r3, #50	; 0x32
    1560:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1562:	3b22      	subs	r3, #34	; 0x22
    1564:	8363      	strh	r3, [r4, #26]
    1566:	e7da      	b.n	151e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1568:	2220      	movs	r2, #32
    156a:	421a      	tst	r2, r3
    156c:	d0d7      	beq.n	151e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    156e:	3221      	adds	r2, #33	; 0x21
    1570:	2332      	movs	r3, #50	; 0x32
    1572:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1574:	3b12      	subs	r3, #18
    1576:	8363      	strh	r3, [r4, #26]
    1578:	e7d1      	b.n	151e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    157a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    157c:	05db      	lsls	r3, r3, #23
    157e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1580:	b2da      	uxtb	r2, r3
    1582:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1584:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1586:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1588:	1c51      	adds	r1, r2, #1
    158a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    158c:	7969      	ldrb	r1, [r5, #5]
    158e:	2901      	cmp	r1, #1
    1590:	d010      	beq.n	15b4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1592:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1594:	3b01      	subs	r3, #1
    1596:	b29b      	uxth	r3, r3
    1598:	85ab      	strh	r3, [r5, #44]	; 0x2c
    159a:	2b00      	cmp	r3, #0
    159c:	d112      	bne.n	15c4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    159e:	3304      	adds	r3, #4
    15a0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    15a2:	2200      	movs	r2, #0
    15a4:	332e      	adds	r3, #46	; 0x2e
    15a6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    15a8:	07bb      	lsls	r3, r7, #30
    15aa:	d50b      	bpl.n	15c4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    15ac:	0028      	movs	r0, r5
    15ae:	692b      	ldr	r3, [r5, #16]
    15b0:	4798      	blx	r3
    15b2:	e007      	b.n	15c4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    15b4:	0a1b      	lsrs	r3, r3, #8
    15b6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    15b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    15ba:	3301      	adds	r3, #1
    15bc:	626b      	str	r3, [r5, #36]	; 0x24
    15be:	e7e8      	b.n	1592 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    15c0:	2304      	movs	r3, #4
    15c2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    15c4:	06f3      	lsls	r3, r6, #27
    15c6:	d504      	bpl.n	15d2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    15c8:	2310      	movs	r3, #16
    15ca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    15cc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    15ce:	06fb      	lsls	r3, r7, #27
    15d0:	d40e      	bmi.n	15f0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    15d2:	06b3      	lsls	r3, r6, #26
    15d4:	d504      	bpl.n	15e0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    15d6:	2320      	movs	r3, #32
    15d8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    15da:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    15dc:	073b      	lsls	r3, r7, #28
    15de:	d40b      	bmi.n	15f8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    15e0:	0733      	lsls	r3, r6, #28
    15e2:	d504      	bpl.n	15ee <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    15e4:	2308      	movs	r3, #8
    15e6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    15e8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    15ea:	06bb      	lsls	r3, r7, #26
    15ec:	d408      	bmi.n	1600 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    15ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    15f0:	0028      	movs	r0, r5
    15f2:	69eb      	ldr	r3, [r5, #28]
    15f4:	4798      	blx	r3
    15f6:	e7ec      	b.n	15d2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    15f8:	0028      	movs	r0, r5
    15fa:	69ab      	ldr	r3, [r5, #24]
    15fc:	4798      	blx	r3
    15fe:	e7ef      	b.n	15e0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1600:	6a2b      	ldr	r3, [r5, #32]
    1602:	0028      	movs	r0, r5
    1604:	4798      	blx	r3
}
    1606:	e7f2      	b.n	15ee <_usart_interrupt_handler+0x176>
    1608:	2000071c 	.word	0x2000071c

0000160c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    160c:	b510      	push	{r4, lr}
	switch (clock_source) {
    160e:	2808      	cmp	r0, #8
    1610:	d803      	bhi.n	161a <system_clock_source_get_hz+0xe>
    1612:	0080      	lsls	r0, r0, #2
    1614:	4b1c      	ldr	r3, [pc, #112]	; (1688 <system_clock_source_get_hz+0x7c>)
    1616:	581b      	ldr	r3, [r3, r0]
    1618:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    161a:	2000      	movs	r0, #0
    161c:	e032      	b.n	1684 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    161e:	4b1b      	ldr	r3, [pc, #108]	; (168c <system_clock_source_get_hz+0x80>)
    1620:	6918      	ldr	r0, [r3, #16]
    1622:	e02f      	b.n	1684 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1624:	4b1a      	ldr	r3, [pc, #104]	; (1690 <system_clock_source_get_hz+0x84>)
    1626:	6a1b      	ldr	r3, [r3, #32]
    1628:	059b      	lsls	r3, r3, #22
    162a:	0f9b      	lsrs	r3, r3, #30
    162c:	4819      	ldr	r0, [pc, #100]	; (1694 <system_clock_source_get_hz+0x88>)
    162e:	40d8      	lsrs	r0, r3
    1630:	e028      	b.n	1684 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1632:	4b16      	ldr	r3, [pc, #88]	; (168c <system_clock_source_get_hz+0x80>)
    1634:	6958      	ldr	r0, [r3, #20]
    1636:	e025      	b.n	1684 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1638:	4b14      	ldr	r3, [pc, #80]	; (168c <system_clock_source_get_hz+0x80>)
    163a:	681b      	ldr	r3, [r3, #0]
			return 0;
    163c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    163e:	079b      	lsls	r3, r3, #30
    1640:	d520      	bpl.n	1684 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1642:	4913      	ldr	r1, [pc, #76]	; (1690 <system_clock_source_get_hz+0x84>)
    1644:	2210      	movs	r2, #16
    1646:	68cb      	ldr	r3, [r1, #12]
    1648:	421a      	tst	r2, r3
    164a:	d0fc      	beq.n	1646 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    164c:	4b0f      	ldr	r3, [pc, #60]	; (168c <system_clock_source_get_hz+0x80>)
    164e:	681a      	ldr	r2, [r3, #0]
    1650:	2324      	movs	r3, #36	; 0x24
    1652:	4013      	ands	r3, r2
    1654:	2b04      	cmp	r3, #4
    1656:	d001      	beq.n	165c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1658:	480f      	ldr	r0, [pc, #60]	; (1698 <system_clock_source_get_hz+0x8c>)
    165a:	e013      	b.n	1684 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    165c:	2000      	movs	r0, #0
    165e:	4b0f      	ldr	r3, [pc, #60]	; (169c <system_clock_source_get_hz+0x90>)
    1660:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1662:	4b0a      	ldr	r3, [pc, #40]	; (168c <system_clock_source_get_hz+0x80>)
    1664:	689b      	ldr	r3, [r3, #8]
    1666:	041b      	lsls	r3, r3, #16
    1668:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    166a:	4358      	muls	r0, r3
    166c:	e00a      	b.n	1684 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    166e:	2350      	movs	r3, #80	; 0x50
    1670:	4a07      	ldr	r2, [pc, #28]	; (1690 <system_clock_source_get_hz+0x84>)
    1672:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1674:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1676:	075b      	lsls	r3, r3, #29
    1678:	d504      	bpl.n	1684 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    167a:	4b04      	ldr	r3, [pc, #16]	; (168c <system_clock_source_get_hz+0x80>)
    167c:	68d8      	ldr	r0, [r3, #12]
    167e:	e001      	b.n	1684 <system_clock_source_get_hz+0x78>
		return 32768UL;
    1680:	2080      	movs	r0, #128	; 0x80
    1682:	0200      	lsls	r0, r0, #8
	}
}
    1684:	bd10      	pop	{r4, pc}
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	000049ac 	.word	0x000049ac
    168c:	200001b4 	.word	0x200001b4
    1690:	40000800 	.word	0x40000800
    1694:	007a1200 	.word	0x007a1200
    1698:	02dc6c00 	.word	0x02dc6c00
    169c:	00001c65 	.word	0x00001c65

000016a0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    16a0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    16a2:	490c      	ldr	r1, [pc, #48]	; (16d4 <system_clock_source_osc8m_set_config+0x34>)
    16a4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    16a6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    16a8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    16aa:	7840      	ldrb	r0, [r0, #1]
    16ac:	2201      	movs	r2, #1
    16ae:	4010      	ands	r0, r2
    16b0:	0180      	lsls	r0, r0, #6
    16b2:	2640      	movs	r6, #64	; 0x40
    16b4:	43b3      	bics	r3, r6
    16b6:	4303      	orrs	r3, r0
    16b8:	402a      	ands	r2, r5
    16ba:	01d2      	lsls	r2, r2, #7
    16bc:	2080      	movs	r0, #128	; 0x80
    16be:	4383      	bics	r3, r0
    16c0:	4313      	orrs	r3, r2
    16c2:	2203      	movs	r2, #3
    16c4:	4022      	ands	r2, r4
    16c6:	0212      	lsls	r2, r2, #8
    16c8:	4803      	ldr	r0, [pc, #12]	; (16d8 <system_clock_source_osc8m_set_config+0x38>)
    16ca:	4003      	ands	r3, r0
    16cc:	4313      	orrs	r3, r2
    16ce:	620b      	str	r3, [r1, #32]
}
    16d0:	bd70      	pop	{r4, r5, r6, pc}
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	40000800 	.word	0x40000800
    16d8:	fffffcff 	.word	0xfffffcff

000016dc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    16dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16de:	46de      	mov	lr, fp
    16e0:	4657      	mov	r7, sl
    16e2:	464e      	mov	r6, r9
    16e4:	4645      	mov	r5, r8
    16e6:	b5e0      	push	{r5, r6, r7, lr}
    16e8:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    16ea:	4b26      	ldr	r3, [pc, #152]	; (1784 <system_clock_source_xosc32k_set_config+0xa8>)
    16ec:	469b      	mov	fp, r3
    16ee:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    16f0:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    16f2:	7800      	ldrb	r0, [r0, #0]
    16f4:	4242      	negs	r2, r0
    16f6:	4142      	adcs	r2, r0
    16f8:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    16fa:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    16fc:	78ca      	ldrb	r2, [r1, #3]
    16fe:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1700:	790a      	ldrb	r2, [r1, #4]
    1702:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1704:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1706:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1708:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    170a:	688a      	ldr	r2, [r1, #8]
    170c:	491e      	ldr	r1, [pc, #120]	; (1788 <system_clock_source_xosc32k_set_config+0xac>)
    170e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1710:	2101      	movs	r1, #1
    1712:	464a      	mov	r2, r9
    1714:	0092      	lsls	r2, r2, #2
    1716:	4691      	mov	r9, r2
    1718:	2204      	movs	r2, #4
    171a:	4393      	bics	r3, r2
    171c:	464a      	mov	r2, r9
    171e:	4313      	orrs	r3, r2
    1720:	4642      	mov	r2, r8
    1722:	400a      	ands	r2, r1
    1724:	00d2      	lsls	r2, r2, #3
    1726:	4690      	mov	r8, r2
    1728:	2208      	movs	r2, #8
    172a:	4393      	bics	r3, r2
    172c:	4642      	mov	r2, r8
    172e:	4313      	orrs	r3, r2
    1730:	4662      	mov	r2, ip
    1732:	400a      	ands	r2, r1
    1734:	0112      	lsls	r2, r2, #4
    1736:	4694      	mov	ip, r2
    1738:	2210      	movs	r2, #16
    173a:	4393      	bics	r3, r2
    173c:	4662      	mov	r2, ip
    173e:	4313      	orrs	r3, r2
    1740:	4008      	ands	r0, r1
    1742:	0140      	lsls	r0, r0, #5
    1744:	2220      	movs	r2, #32
    1746:	4393      	bics	r3, r2
    1748:	4303      	orrs	r3, r0
    174a:	400f      	ands	r7, r1
    174c:	01bf      	lsls	r7, r7, #6
    174e:	2040      	movs	r0, #64	; 0x40
    1750:	4383      	bics	r3, r0
    1752:	433b      	orrs	r3, r7
    1754:	400e      	ands	r6, r1
    1756:	01f6      	lsls	r6, r6, #7
    1758:	3040      	adds	r0, #64	; 0x40
    175a:	4383      	bics	r3, r0
    175c:	4333      	orrs	r3, r6
    175e:	3879      	subs	r0, #121	; 0x79
    1760:	4005      	ands	r5, r0
    1762:	022d      	lsls	r5, r5, #8
    1764:	4809      	ldr	r0, [pc, #36]	; (178c <system_clock_source_xosc32k_set_config+0xb0>)
    1766:	4003      	ands	r3, r0
    1768:	432b      	orrs	r3, r5
    176a:	4021      	ands	r1, r4
    176c:	0309      	lsls	r1, r1, #12
    176e:	4808      	ldr	r0, [pc, #32]	; (1790 <system_clock_source_xosc32k_set_config+0xb4>)
    1770:	4003      	ands	r3, r0
    1772:	430b      	orrs	r3, r1
    1774:	465a      	mov	r2, fp
    1776:	8293      	strh	r3, [r2, #20]
}
    1778:	bc3c      	pop	{r2, r3, r4, r5}
    177a:	4690      	mov	r8, r2
    177c:	4699      	mov	r9, r3
    177e:	46a2      	mov	sl, r4
    1780:	46ab      	mov	fp, r5
    1782:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1784:	40000800 	.word	0x40000800
    1788:	200001b4 	.word	0x200001b4
    178c:	fffff8ff 	.word	0xfffff8ff
    1790:	ffffefff 	.word	0xffffefff

00001794 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1794:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1796:	7a03      	ldrb	r3, [r0, #8]
    1798:	069b      	lsls	r3, r3, #26
    179a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    179c:	8942      	ldrh	r2, [r0, #10]
    179e:	0592      	lsls	r2, r2, #22
    17a0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    17a2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    17a4:	4918      	ldr	r1, [pc, #96]	; (1808 <system_clock_source_dfll_set_config+0x74>)
    17a6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    17a8:	7983      	ldrb	r3, [r0, #6]
    17aa:	79c2      	ldrb	r2, [r0, #7]
    17ac:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    17ae:	8842      	ldrh	r2, [r0, #2]
    17b0:	8884      	ldrh	r4, [r0, #4]
    17b2:	4322      	orrs	r2, r4
    17b4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    17b6:	7842      	ldrb	r2, [r0, #1]
    17b8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    17ba:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    17bc:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    17be:	7803      	ldrb	r3, [r0, #0]
    17c0:	2b04      	cmp	r3, #4
    17c2:	d011      	beq.n	17e8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    17c4:	2b20      	cmp	r3, #32
    17c6:	d10e      	bne.n	17e6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    17c8:	7b03      	ldrb	r3, [r0, #12]
    17ca:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    17cc:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    17ce:	4313      	orrs	r3, r2
    17d0:	89c2      	ldrh	r2, [r0, #14]
    17d2:	0412      	lsls	r2, r2, #16
    17d4:	490d      	ldr	r1, [pc, #52]	; (180c <system_clock_source_dfll_set_config+0x78>)
    17d6:	400a      	ands	r2, r1
    17d8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    17da:	4a0b      	ldr	r2, [pc, #44]	; (1808 <system_clock_source_dfll_set_config+0x74>)
    17dc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    17de:	6811      	ldr	r1, [r2, #0]
    17e0:	4b0b      	ldr	r3, [pc, #44]	; (1810 <system_clock_source_dfll_set_config+0x7c>)
    17e2:	430b      	orrs	r3, r1
    17e4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    17e6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    17e8:	7b03      	ldrb	r3, [r0, #12]
    17ea:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    17ec:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    17ee:	4313      	orrs	r3, r2
    17f0:	89c2      	ldrh	r2, [r0, #14]
    17f2:	0412      	lsls	r2, r2, #16
    17f4:	4905      	ldr	r1, [pc, #20]	; (180c <system_clock_source_dfll_set_config+0x78>)
    17f6:	400a      	ands	r2, r1
    17f8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    17fa:	4a03      	ldr	r2, [pc, #12]	; (1808 <system_clock_source_dfll_set_config+0x74>)
    17fc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    17fe:	6813      	ldr	r3, [r2, #0]
    1800:	2104      	movs	r1, #4
    1802:	430b      	orrs	r3, r1
    1804:	6013      	str	r3, [r2, #0]
    1806:	e7ee      	b.n	17e6 <system_clock_source_dfll_set_config+0x52>
    1808:	200001b4 	.word	0x200001b4
    180c:	03ff0000 	.word	0x03ff0000
    1810:	00000424 	.word	0x00000424

00001814 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1814:	2808      	cmp	r0, #8
    1816:	d803      	bhi.n	1820 <system_clock_source_enable+0xc>
    1818:	0080      	lsls	r0, r0, #2
    181a:	4b25      	ldr	r3, [pc, #148]	; (18b0 <system_clock_source_enable+0x9c>)
    181c:	581b      	ldr	r3, [r3, r0]
    181e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1820:	2017      	movs	r0, #23
    1822:	e044      	b.n	18ae <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1824:	4a23      	ldr	r2, [pc, #140]	; (18b4 <system_clock_source_enable+0xa0>)
    1826:	6a13      	ldr	r3, [r2, #32]
    1828:	2102      	movs	r1, #2
    182a:	430b      	orrs	r3, r1
    182c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    182e:	2000      	movs	r0, #0
    1830:	e03d      	b.n	18ae <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1832:	4a20      	ldr	r2, [pc, #128]	; (18b4 <system_clock_source_enable+0xa0>)
    1834:	6993      	ldr	r3, [r2, #24]
    1836:	2102      	movs	r1, #2
    1838:	430b      	orrs	r3, r1
    183a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    183c:	2000      	movs	r0, #0
		break;
    183e:	e036      	b.n	18ae <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1840:	4a1c      	ldr	r2, [pc, #112]	; (18b4 <system_clock_source_enable+0xa0>)
    1842:	8a13      	ldrh	r3, [r2, #16]
    1844:	2102      	movs	r1, #2
    1846:	430b      	orrs	r3, r1
    1848:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    184a:	2000      	movs	r0, #0
		break;
    184c:	e02f      	b.n	18ae <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    184e:	4a19      	ldr	r2, [pc, #100]	; (18b4 <system_clock_source_enable+0xa0>)
    1850:	8a93      	ldrh	r3, [r2, #20]
    1852:	2102      	movs	r1, #2
    1854:	430b      	orrs	r3, r1
    1856:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1858:	2000      	movs	r0, #0
		break;
    185a:	e028      	b.n	18ae <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    185c:	4916      	ldr	r1, [pc, #88]	; (18b8 <system_clock_source_enable+0xa4>)
    185e:	680b      	ldr	r3, [r1, #0]
    1860:	2202      	movs	r2, #2
    1862:	4313      	orrs	r3, r2
    1864:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1866:	4b13      	ldr	r3, [pc, #76]	; (18b4 <system_clock_source_enable+0xa0>)
    1868:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    186a:	0019      	movs	r1, r3
    186c:	320e      	adds	r2, #14
    186e:	68cb      	ldr	r3, [r1, #12]
    1870:	421a      	tst	r2, r3
    1872:	d0fc      	beq.n	186e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1874:	4a10      	ldr	r2, [pc, #64]	; (18b8 <system_clock_source_enable+0xa4>)
    1876:	6891      	ldr	r1, [r2, #8]
    1878:	4b0e      	ldr	r3, [pc, #56]	; (18b4 <system_clock_source_enable+0xa0>)
    187a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    187c:	6852      	ldr	r2, [r2, #4]
    187e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1880:	2200      	movs	r2, #0
    1882:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1884:	0019      	movs	r1, r3
    1886:	3210      	adds	r2, #16
    1888:	68cb      	ldr	r3, [r1, #12]
    188a:	421a      	tst	r2, r3
    188c:	d0fc      	beq.n	1888 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    188e:	4b0a      	ldr	r3, [pc, #40]	; (18b8 <system_clock_source_enable+0xa4>)
    1890:	681b      	ldr	r3, [r3, #0]
    1892:	b29b      	uxth	r3, r3
    1894:	4a07      	ldr	r2, [pc, #28]	; (18b4 <system_clock_source_enable+0xa0>)
    1896:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1898:	2000      	movs	r0, #0
    189a:	e008      	b.n	18ae <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    189c:	4905      	ldr	r1, [pc, #20]	; (18b4 <system_clock_source_enable+0xa0>)
    189e:	2244      	movs	r2, #68	; 0x44
    18a0:	5c8b      	ldrb	r3, [r1, r2]
    18a2:	2002      	movs	r0, #2
    18a4:	4303      	orrs	r3, r0
    18a6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    18a8:	2000      	movs	r0, #0
		break;
    18aa:	e000      	b.n	18ae <system_clock_source_enable+0x9a>
		return STATUS_OK;
    18ac:	2000      	movs	r0, #0
}
    18ae:	4770      	bx	lr
    18b0:	000049d0 	.word	0x000049d0
    18b4:	40000800 	.word	0x40000800
    18b8:	200001b4 	.word	0x200001b4

000018bc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    18bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18be:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    18c0:	22c2      	movs	r2, #194	; 0xc2
    18c2:	00d2      	lsls	r2, r2, #3
    18c4:	4b45      	ldr	r3, [pc, #276]	; (19dc <system_clock_init+0x120>)
    18c6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    18c8:	4a45      	ldr	r2, [pc, #276]	; (19e0 <system_clock_init+0x124>)
    18ca:	6853      	ldr	r3, [r2, #4]
    18cc:	211e      	movs	r1, #30
    18ce:	438b      	bics	r3, r1
    18d0:	391a      	subs	r1, #26
    18d2:	430b      	orrs	r3, r1
    18d4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    18d6:	2202      	movs	r2, #2
    18d8:	ab01      	add	r3, sp, #4
    18da:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18dc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    18de:	4d41      	ldr	r5, [pc, #260]	; (19e4 <system_clock_init+0x128>)
    18e0:	b2e0      	uxtb	r0, r4
    18e2:	a901      	add	r1, sp, #4
    18e4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18e6:	3401      	adds	r4, #1
    18e8:	2c25      	cmp	r4, #37	; 0x25
    18ea:	d1f9      	bne.n	18e0 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    18ec:	a80a      	add	r0, sp, #40	; 0x28
    18ee:	2300      	movs	r3, #0
    18f0:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    18f2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    18f4:	2280      	movs	r2, #128	; 0x80
    18f6:	0212      	lsls	r2, r2, #8
    18f8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    18fa:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    18fc:	2201      	movs	r2, #1
    18fe:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    1900:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1902:	2106      	movs	r1, #6
    1904:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1906:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    1908:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    190a:	4b37      	ldr	r3, [pc, #220]	; (19e8 <system_clock_init+0x12c>)
    190c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    190e:	2005      	movs	r0, #5
    1910:	4b36      	ldr	r3, [pc, #216]	; (19ec <system_clock_init+0x130>)
    1912:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1914:	4931      	ldr	r1, [pc, #196]	; (19dc <system_clock_init+0x120>)
    1916:	2202      	movs	r2, #2
    1918:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    191a:	421a      	tst	r2, r3
    191c:	d0fc      	beq.n	1918 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    191e:	ab05      	add	r3, sp, #20
    1920:	2100      	movs	r1, #0
    1922:	2200      	movs	r2, #0
    1924:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1926:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1928:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    192a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    192c:	313f      	adds	r1, #63	; 0x3f
    192e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1930:	393b      	subs	r1, #59	; 0x3b
    1932:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1934:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1936:	4b2e      	ldr	r3, [pc, #184]	; (19f0 <system_clock_init+0x134>)
    1938:	681b      	ldr	r3, [r3, #0]
    193a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    193c:	2b3f      	cmp	r3, #63	; 0x3f
    193e:	d04b      	beq.n	19d8 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1940:	a805      	add	r0, sp, #20
    1942:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1944:	23b7      	movs	r3, #183	; 0xb7
    1946:	00db      	lsls	r3, r3, #3
    1948:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    194a:	2303      	movs	r3, #3
    194c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    194e:	331c      	adds	r3, #28
    1950:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1952:	4b28      	ldr	r3, [pc, #160]	; (19f4 <system_clock_init+0x138>)
    1954:	4798      	blx	r3
	config->on_demand       = true;
    1956:	a804      	add	r0, sp, #16
    1958:	2501      	movs	r5, #1
    195a:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    195c:	2600      	movs	r6, #0
    195e:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1960:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1962:	4b25      	ldr	r3, [pc, #148]	; (19f8 <system_clock_init+0x13c>)
    1964:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1966:	2006      	movs	r0, #6
    1968:	4f20      	ldr	r7, [pc, #128]	; (19ec <system_clock_init+0x130>)
    196a:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    196c:	4b23      	ldr	r3, [pc, #140]	; (19fc <system_clock_init+0x140>)
    196e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1970:	ac01      	add	r4, sp, #4
    1972:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    1974:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1976:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    1978:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    197a:	2305      	movs	r3, #5
    197c:	7023      	strb	r3, [r4, #0]
    197e:	0021      	movs	r1, r4
    1980:	2001      	movs	r0, #1
    1982:	4b1f      	ldr	r3, [pc, #124]	; (1a00 <system_clock_init+0x144>)
    1984:	4798      	blx	r3
    1986:	2001      	movs	r0, #1
    1988:	4b1e      	ldr	r3, [pc, #120]	; (1a04 <system_clock_init+0x148>)
    198a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    198c:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    198e:	0021      	movs	r1, r4
    1990:	2000      	movs	r0, #0
    1992:	4b14      	ldr	r3, [pc, #80]	; (19e4 <system_clock_init+0x128>)
    1994:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1996:	2000      	movs	r0, #0
    1998:	4b1b      	ldr	r3, [pc, #108]	; (1a08 <system_clock_init+0x14c>)
    199a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    199c:	2007      	movs	r0, #7
    199e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    19a0:	490e      	ldr	r1, [pc, #56]	; (19dc <system_clock_init+0x120>)
    19a2:	22d0      	movs	r2, #208	; 0xd0
    19a4:	68cb      	ldr	r3, [r1, #12]
    19a6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    19a8:	2bd0      	cmp	r3, #208	; 0xd0
    19aa:	d1fb      	bne.n	19a4 <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    19ac:	4a17      	ldr	r2, [pc, #92]	; (1a0c <system_clock_init+0x150>)
    19ae:	2300      	movs	r3, #0
    19b0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    19b2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    19b4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    19b6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    19b8:	a901      	add	r1, sp, #4
    19ba:	2201      	movs	r2, #1
    19bc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    19be:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    19c0:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    19c2:	3307      	adds	r3, #7
    19c4:	700b      	strb	r3, [r1, #0]
    19c6:	720a      	strb	r2, [r1, #8]
    19c8:	2000      	movs	r0, #0
    19ca:	4b0d      	ldr	r3, [pc, #52]	; (1a00 <system_clock_init+0x144>)
    19cc:	4798      	blx	r3
    19ce:	2000      	movs	r0, #0
    19d0:	4b0c      	ldr	r3, [pc, #48]	; (1a04 <system_clock_init+0x148>)
    19d2:	4798      	blx	r3
#endif
}
    19d4:	b00f      	add	sp, #60	; 0x3c
    19d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    19d8:	3b20      	subs	r3, #32
    19da:	e7b1      	b.n	1940 <system_clock_init+0x84>
    19dc:	40000800 	.word	0x40000800
    19e0:	41004000 	.word	0x41004000
    19e4:	00001c49 	.word	0x00001c49
    19e8:	000016dd 	.word	0x000016dd
    19ec:	00001815 	.word	0x00001815
    19f0:	00806024 	.word	0x00806024
    19f4:	00001795 	.word	0x00001795
    19f8:	000016a1 	.word	0x000016a1
    19fc:	00001a11 	.word	0x00001a11
    1a00:	00001a35 	.word	0x00001a35
    1a04:	00001aed 	.word	0x00001aed
    1a08:	00001bbd 	.word	0x00001bbd
    1a0c:	40000400 	.word	0x40000400

00001a10 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1a10:	4a06      	ldr	r2, [pc, #24]	; (1a2c <system_gclk_init+0x1c>)
    1a12:	6993      	ldr	r3, [r2, #24]
    1a14:	2108      	movs	r1, #8
    1a16:	430b      	orrs	r3, r1
    1a18:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a1a:	2201      	movs	r2, #1
    1a1c:	4b04      	ldr	r3, [pc, #16]	; (1a30 <system_gclk_init+0x20>)
    1a1e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a20:	0019      	movs	r1, r3
    1a22:	780b      	ldrb	r3, [r1, #0]
    1a24:	4213      	tst	r3, r2
    1a26:	d1fc      	bne.n	1a22 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a28:	4770      	bx	lr
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	40000400 	.word	0x40000400
    1a30:	40000c00 	.word	0x40000c00

00001a34 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a34:	b570      	push	{r4, r5, r6, lr}
    1a36:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a38:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a3a:	780d      	ldrb	r5, [r1, #0]
    1a3c:	022d      	lsls	r5, r5, #8
    1a3e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a40:	784b      	ldrb	r3, [r1, #1]
    1a42:	2b00      	cmp	r3, #0
    1a44:	d002      	beq.n	1a4c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a46:	2380      	movs	r3, #128	; 0x80
    1a48:	02db      	lsls	r3, r3, #11
    1a4a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a4c:	7a4b      	ldrb	r3, [r1, #9]
    1a4e:	2b00      	cmp	r3, #0
    1a50:	d002      	beq.n	1a58 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a52:	2380      	movs	r3, #128	; 0x80
    1a54:	031b      	lsls	r3, r3, #12
    1a56:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a58:	6848      	ldr	r0, [r1, #4]
    1a5a:	2801      	cmp	r0, #1
    1a5c:	d910      	bls.n	1a80 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a5e:	1e43      	subs	r3, r0, #1
    1a60:	4218      	tst	r0, r3
    1a62:	d134      	bne.n	1ace <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a64:	2802      	cmp	r0, #2
    1a66:	d930      	bls.n	1aca <system_gclk_gen_set_config+0x96>
    1a68:	2302      	movs	r3, #2
    1a6a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a6c:	3201      	adds	r2, #1
						mask <<= 1) {
    1a6e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1a70:	4298      	cmp	r0, r3
    1a72:	d8fb      	bhi.n	1a6c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a74:	0212      	lsls	r2, r2, #8
    1a76:	4332      	orrs	r2, r6
    1a78:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a7a:	2380      	movs	r3, #128	; 0x80
    1a7c:	035b      	lsls	r3, r3, #13
    1a7e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a80:	7a0b      	ldrb	r3, [r1, #8]
    1a82:	2b00      	cmp	r3, #0
    1a84:	d002      	beq.n	1a8c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a86:	2380      	movs	r3, #128	; 0x80
    1a88:	039b      	lsls	r3, r3, #14
    1a8a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a8c:	4a13      	ldr	r2, [pc, #76]	; (1adc <system_gclk_gen_set_config+0xa8>)
    1a8e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1a90:	b25b      	sxtb	r3, r3
    1a92:	2b00      	cmp	r3, #0
    1a94:	dbfb      	blt.n	1a8e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1a96:	4b12      	ldr	r3, [pc, #72]	; (1ae0 <system_gclk_gen_set_config+0xac>)
    1a98:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a9a:	4b12      	ldr	r3, [pc, #72]	; (1ae4 <system_gclk_gen_set_config+0xb0>)
    1a9c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a9e:	4a0f      	ldr	r2, [pc, #60]	; (1adc <system_gclk_gen_set_config+0xa8>)
    1aa0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1aa2:	b25b      	sxtb	r3, r3
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	dbfb      	blt.n	1aa0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1aa8:	4b0c      	ldr	r3, [pc, #48]	; (1adc <system_gclk_gen_set_config+0xa8>)
    1aaa:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aac:	001a      	movs	r2, r3
    1aae:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1ab0:	b25b      	sxtb	r3, r3
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	dbfb      	blt.n	1aae <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ab6:	4a09      	ldr	r2, [pc, #36]	; (1adc <system_gclk_gen_set_config+0xa8>)
    1ab8:	6853      	ldr	r3, [r2, #4]
    1aba:	2180      	movs	r1, #128	; 0x80
    1abc:	0249      	lsls	r1, r1, #9
    1abe:	400b      	ands	r3, r1
    1ac0:	431d      	orrs	r5, r3
    1ac2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1ac4:	4b08      	ldr	r3, [pc, #32]	; (1ae8 <system_gclk_gen_set_config+0xb4>)
    1ac6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ac8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1aca:	2200      	movs	r2, #0
    1acc:	e7d2      	b.n	1a74 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1ace:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1ad0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1ad2:	2380      	movs	r3, #128	; 0x80
    1ad4:	029b      	lsls	r3, r3, #10
    1ad6:	431d      	orrs	r5, r3
    1ad8:	e7d2      	b.n	1a80 <system_gclk_gen_set_config+0x4c>
    1ada:	46c0      	nop			; (mov r8, r8)
    1adc:	40000c00 	.word	0x40000c00
    1ae0:	00000b5d 	.word	0x00000b5d
    1ae4:	40000c08 	.word	0x40000c08
    1ae8:	00000b9d 	.word	0x00000b9d

00001aec <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1aec:	b510      	push	{r4, lr}
    1aee:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1af0:	4a0b      	ldr	r2, [pc, #44]	; (1b20 <system_gclk_gen_enable+0x34>)
    1af2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1af4:	b25b      	sxtb	r3, r3
    1af6:	2b00      	cmp	r3, #0
    1af8:	dbfb      	blt.n	1af2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1afa:	4b0a      	ldr	r3, [pc, #40]	; (1b24 <system_gclk_gen_enable+0x38>)
    1afc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1afe:	4b0a      	ldr	r3, [pc, #40]	; (1b28 <system_gclk_gen_enable+0x3c>)
    1b00:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b02:	4a07      	ldr	r2, [pc, #28]	; (1b20 <system_gclk_gen_enable+0x34>)
    1b04:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b06:	b25b      	sxtb	r3, r3
    1b08:	2b00      	cmp	r3, #0
    1b0a:	dbfb      	blt.n	1b04 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b0c:	4a04      	ldr	r2, [pc, #16]	; (1b20 <system_gclk_gen_enable+0x34>)
    1b0e:	6851      	ldr	r1, [r2, #4]
    1b10:	2380      	movs	r3, #128	; 0x80
    1b12:	025b      	lsls	r3, r3, #9
    1b14:	430b      	orrs	r3, r1
    1b16:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1b18:	4b04      	ldr	r3, [pc, #16]	; (1b2c <system_gclk_gen_enable+0x40>)
    1b1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b1c:	bd10      	pop	{r4, pc}
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	40000c00 	.word	0x40000c00
    1b24:	00000b5d 	.word	0x00000b5d
    1b28:	40000c04 	.word	0x40000c04
    1b2c:	00000b9d 	.word	0x00000b9d

00001b30 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b30:	b570      	push	{r4, r5, r6, lr}
    1b32:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b34:	4a1a      	ldr	r2, [pc, #104]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b36:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b38:	b25b      	sxtb	r3, r3
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	dbfb      	blt.n	1b36 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1b3e:	4b19      	ldr	r3, [pc, #100]	; (1ba4 <system_gclk_gen_get_hz+0x74>)
    1b40:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b42:	4b19      	ldr	r3, [pc, #100]	; (1ba8 <system_gclk_gen_get_hz+0x78>)
    1b44:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b46:	4a16      	ldr	r2, [pc, #88]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b48:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b4a:	b25b      	sxtb	r3, r3
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	dbfb      	blt.n	1b48 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b50:	4e13      	ldr	r6, [pc, #76]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b52:	6870      	ldr	r0, [r6, #4]
    1b54:	04c0      	lsls	r0, r0, #19
    1b56:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b58:	4b14      	ldr	r3, [pc, #80]	; (1bac <system_gclk_gen_get_hz+0x7c>)
    1b5a:	4798      	blx	r3
    1b5c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b5e:	4b12      	ldr	r3, [pc, #72]	; (1ba8 <system_gclk_gen_get_hz+0x78>)
    1b60:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b62:	6876      	ldr	r6, [r6, #4]
    1b64:	02f6      	lsls	r6, r6, #11
    1b66:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b68:	4b11      	ldr	r3, [pc, #68]	; (1bb0 <system_gclk_gen_get_hz+0x80>)
    1b6a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b6c:	4a0c      	ldr	r2, [pc, #48]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b6e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b70:	b25b      	sxtb	r3, r3
    1b72:	2b00      	cmp	r3, #0
    1b74:	dbfb      	blt.n	1b6e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b76:	4b0a      	ldr	r3, [pc, #40]	; (1ba0 <system_gclk_gen_get_hz+0x70>)
    1b78:	689c      	ldr	r4, [r3, #8]
    1b7a:	0224      	lsls	r4, r4, #8
    1b7c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1b7e:	4b0d      	ldr	r3, [pc, #52]	; (1bb4 <system_gclk_gen_get_hz+0x84>)
    1b80:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b82:	2e00      	cmp	r6, #0
    1b84:	d107      	bne.n	1b96 <system_gclk_gen_get_hz+0x66>
    1b86:	2c01      	cmp	r4, #1
    1b88:	d907      	bls.n	1b9a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1b8a:	0021      	movs	r1, r4
    1b8c:	0028      	movs	r0, r5
    1b8e:	4b0a      	ldr	r3, [pc, #40]	; (1bb8 <system_gclk_gen_get_hz+0x88>)
    1b90:	4798      	blx	r3
    1b92:	0005      	movs	r5, r0
    1b94:	e001      	b.n	1b9a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1b96:	3401      	adds	r4, #1
    1b98:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1b9a:	0028      	movs	r0, r5
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	40000c00 	.word	0x40000c00
    1ba4:	00000b5d 	.word	0x00000b5d
    1ba8:	40000c04 	.word	0x40000c04
    1bac:	0000160d 	.word	0x0000160d
    1bb0:	40000c08 	.word	0x40000c08
    1bb4:	00000b9d 	.word	0x00000b9d
    1bb8:	000021a1 	.word	0x000021a1

00001bbc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1bbc:	b510      	push	{r4, lr}
    1bbe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1bc0:	4b06      	ldr	r3, [pc, #24]	; (1bdc <system_gclk_chan_enable+0x20>)
    1bc2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bc4:	4b06      	ldr	r3, [pc, #24]	; (1be0 <system_gclk_chan_enable+0x24>)
    1bc6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1bc8:	4a06      	ldr	r2, [pc, #24]	; (1be4 <system_gclk_chan_enable+0x28>)
    1bca:	8853      	ldrh	r3, [r2, #2]
    1bcc:	2180      	movs	r1, #128	; 0x80
    1bce:	01c9      	lsls	r1, r1, #7
    1bd0:	430b      	orrs	r3, r1
    1bd2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1bd4:	4b04      	ldr	r3, [pc, #16]	; (1be8 <system_gclk_chan_enable+0x2c>)
    1bd6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bd8:	bd10      	pop	{r4, pc}
    1bda:	46c0      	nop			; (mov r8, r8)
    1bdc:	00000b5d 	.word	0x00000b5d
    1be0:	40000c02 	.word	0x40000c02
    1be4:	40000c00 	.word	0x40000c00
    1be8:	00000b9d 	.word	0x00000b9d

00001bec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1bec:	b510      	push	{r4, lr}
    1bee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1bf0:	4b0f      	ldr	r3, [pc, #60]	; (1c30 <system_gclk_chan_disable+0x44>)
    1bf2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bf4:	4b0f      	ldr	r3, [pc, #60]	; (1c34 <system_gclk_chan_disable+0x48>)
    1bf6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1bf8:	4a0f      	ldr	r2, [pc, #60]	; (1c38 <system_gclk_chan_disable+0x4c>)
    1bfa:	8853      	ldrh	r3, [r2, #2]
    1bfc:	051b      	lsls	r3, r3, #20
    1bfe:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1c00:	8853      	ldrh	r3, [r2, #2]
    1c02:	490e      	ldr	r1, [pc, #56]	; (1c3c <system_gclk_chan_disable+0x50>)
    1c04:	400b      	ands	r3, r1
    1c06:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c08:	8853      	ldrh	r3, [r2, #2]
    1c0a:	490d      	ldr	r1, [pc, #52]	; (1c40 <system_gclk_chan_disable+0x54>)
    1c0c:	400b      	ands	r3, r1
    1c0e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c10:	0011      	movs	r1, r2
    1c12:	2280      	movs	r2, #128	; 0x80
    1c14:	01d2      	lsls	r2, r2, #7
    1c16:	884b      	ldrh	r3, [r1, #2]
    1c18:	4213      	tst	r3, r2
    1c1a:	d1fc      	bne.n	1c16 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c1c:	4906      	ldr	r1, [pc, #24]	; (1c38 <system_gclk_chan_disable+0x4c>)
    1c1e:	884a      	ldrh	r2, [r1, #2]
    1c20:	0203      	lsls	r3, r0, #8
    1c22:	4806      	ldr	r0, [pc, #24]	; (1c3c <system_gclk_chan_disable+0x50>)
    1c24:	4002      	ands	r2, r0
    1c26:	4313      	orrs	r3, r2
    1c28:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1c2a:	4b06      	ldr	r3, [pc, #24]	; (1c44 <system_gclk_chan_disable+0x58>)
    1c2c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c2e:	bd10      	pop	{r4, pc}
    1c30:	00000b5d 	.word	0x00000b5d
    1c34:	40000c02 	.word	0x40000c02
    1c38:	40000c00 	.word	0x40000c00
    1c3c:	fffff0ff 	.word	0xfffff0ff
    1c40:	ffffbfff 	.word	0xffffbfff
    1c44:	00000b9d 	.word	0x00000b9d

00001c48 <system_gclk_chan_set_config>:
{
    1c48:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c4a:	780c      	ldrb	r4, [r1, #0]
    1c4c:	0224      	lsls	r4, r4, #8
    1c4e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c50:	4b02      	ldr	r3, [pc, #8]	; (1c5c <system_gclk_chan_set_config+0x14>)
    1c52:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c54:	b2a4      	uxth	r4, r4
    1c56:	4b02      	ldr	r3, [pc, #8]	; (1c60 <system_gclk_chan_set_config+0x18>)
    1c58:	805c      	strh	r4, [r3, #2]
}
    1c5a:	bd10      	pop	{r4, pc}
    1c5c:	00001bed 	.word	0x00001bed
    1c60:	40000c00 	.word	0x40000c00

00001c64 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c64:	b510      	push	{r4, lr}
    1c66:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c68:	4b06      	ldr	r3, [pc, #24]	; (1c84 <system_gclk_chan_get_hz+0x20>)
    1c6a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c6c:	4b06      	ldr	r3, [pc, #24]	; (1c88 <system_gclk_chan_get_hz+0x24>)
    1c6e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c70:	4b06      	ldr	r3, [pc, #24]	; (1c8c <system_gclk_chan_get_hz+0x28>)
    1c72:	885c      	ldrh	r4, [r3, #2]
    1c74:	0524      	lsls	r4, r4, #20
    1c76:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1c78:	4b05      	ldr	r3, [pc, #20]	; (1c90 <system_gclk_chan_get_hz+0x2c>)
    1c7a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c7c:	0020      	movs	r0, r4
    1c7e:	4b05      	ldr	r3, [pc, #20]	; (1c94 <system_gclk_chan_get_hz+0x30>)
    1c80:	4798      	blx	r3
}
    1c82:	bd10      	pop	{r4, pc}
    1c84:	00000b5d 	.word	0x00000b5d
    1c88:	40000c02 	.word	0x40000c02
    1c8c:	40000c00 	.word	0x40000c00
    1c90:	00000b9d 	.word	0x00000b9d
    1c94:	00001b31 	.word	0x00001b31

00001c98 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1c98:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1c9a:	78d3      	ldrb	r3, [r2, #3]
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d135      	bne.n	1d0c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ca0:	7813      	ldrb	r3, [r2, #0]
    1ca2:	2b80      	cmp	r3, #128	; 0x80
    1ca4:	d029      	beq.n	1cfa <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ca6:	061b      	lsls	r3, r3, #24
    1ca8:	2480      	movs	r4, #128	; 0x80
    1caa:	0264      	lsls	r4, r4, #9
    1cac:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1cae:	7854      	ldrb	r4, [r2, #1]
    1cb0:	2502      	movs	r5, #2
    1cb2:	43ac      	bics	r4, r5
    1cb4:	d106      	bne.n	1cc4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1cb6:	7894      	ldrb	r4, [r2, #2]
    1cb8:	2c00      	cmp	r4, #0
    1cba:	d120      	bne.n	1cfe <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1cbc:	2480      	movs	r4, #128	; 0x80
    1cbe:	02a4      	lsls	r4, r4, #10
    1cc0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1cc2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1cc4:	7854      	ldrb	r4, [r2, #1]
    1cc6:	3c01      	subs	r4, #1
    1cc8:	2c01      	cmp	r4, #1
    1cca:	d91c      	bls.n	1d06 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1ccc:	040d      	lsls	r5, r1, #16
    1cce:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cd0:	24a0      	movs	r4, #160	; 0xa0
    1cd2:	05e4      	lsls	r4, r4, #23
    1cd4:	432c      	orrs	r4, r5
    1cd6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cd8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1cda:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cdc:	24d0      	movs	r4, #208	; 0xd0
    1cde:	0624      	lsls	r4, r4, #24
    1ce0:	432c      	orrs	r4, r5
    1ce2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ce4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1ce6:	78d4      	ldrb	r4, [r2, #3]
    1ce8:	2c00      	cmp	r4, #0
    1cea:	d122      	bne.n	1d32 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1cec:	035b      	lsls	r3, r3, #13
    1cee:	d51c      	bpl.n	1d2a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1cf0:	7893      	ldrb	r3, [r2, #2]
    1cf2:	2b01      	cmp	r3, #1
    1cf4:	d01e      	beq.n	1d34 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1cf6:	6141      	str	r1, [r0, #20]
    1cf8:	e017      	b.n	1d2a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1cfa:	2300      	movs	r3, #0
    1cfc:	e7d7      	b.n	1cae <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1cfe:	24c0      	movs	r4, #192	; 0xc0
    1d00:	02e4      	lsls	r4, r4, #11
    1d02:	4323      	orrs	r3, r4
    1d04:	e7dd      	b.n	1cc2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1d06:	4c0d      	ldr	r4, [pc, #52]	; (1d3c <_system_pinmux_config+0xa4>)
    1d08:	4023      	ands	r3, r4
    1d0a:	e7df      	b.n	1ccc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1d0c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d0e:	040c      	lsls	r4, r1, #16
    1d10:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d12:	23a0      	movs	r3, #160	; 0xa0
    1d14:	05db      	lsls	r3, r3, #23
    1d16:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d18:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d1a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d1c:	23d0      	movs	r3, #208	; 0xd0
    1d1e:	061b      	lsls	r3, r3, #24
    1d20:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d22:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1d24:	78d3      	ldrb	r3, [r2, #3]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d103      	bne.n	1d32 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d2a:	7853      	ldrb	r3, [r2, #1]
    1d2c:	3b01      	subs	r3, #1
    1d2e:	2b01      	cmp	r3, #1
    1d30:	d902      	bls.n	1d38 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1d32:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1d34:	6181      	str	r1, [r0, #24]
    1d36:	e7f8      	b.n	1d2a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1d38:	6081      	str	r1, [r0, #8]
}
    1d3a:	e7fa      	b.n	1d32 <_system_pinmux_config+0x9a>
    1d3c:	fffbffff 	.word	0xfffbffff

00001d40 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d40:	b510      	push	{r4, lr}
    1d42:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1d44:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1d46:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d48:	2900      	cmp	r1, #0
    1d4a:	d104      	bne.n	1d56 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d4c:	0943      	lsrs	r3, r0, #5
    1d4e:	01db      	lsls	r3, r3, #7
    1d50:	4905      	ldr	r1, [pc, #20]	; (1d68 <system_pinmux_pin_set_config+0x28>)
    1d52:	468c      	mov	ip, r1
    1d54:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d56:	241f      	movs	r4, #31
    1d58:	4020      	ands	r0, r4
    1d5a:	2101      	movs	r1, #1
    1d5c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1d5e:	0018      	movs	r0, r3
    1d60:	4b02      	ldr	r3, [pc, #8]	; (1d6c <system_pinmux_pin_set_config+0x2c>)
    1d62:	4798      	blx	r3
}
    1d64:	bd10      	pop	{r4, pc}
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	41004400 	.word	0x41004400
    1d6c:	00001c99 	.word	0x00001c99

00001d70 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d70:	4770      	bx	lr
	...

00001d74 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d74:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d76:	4b05      	ldr	r3, [pc, #20]	; (1d8c <system_init+0x18>)
    1d78:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1d7a:	4b05      	ldr	r3, [pc, #20]	; (1d90 <system_init+0x1c>)
    1d7c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1d7e:	4b05      	ldr	r3, [pc, #20]	; (1d94 <system_init+0x20>)
    1d80:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1d82:	4b05      	ldr	r3, [pc, #20]	; (1d98 <system_init+0x24>)
    1d84:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1d86:	4b05      	ldr	r3, [pc, #20]	; (1d9c <system_init+0x28>)
    1d88:	4798      	blx	r3
}
    1d8a:	bd10      	pop	{r4, pc}
    1d8c:	000018bd 	.word	0x000018bd
    1d90:	00000115 	.word	0x00000115
    1d94:	00001d71 	.word	0x00001d71
    1d98:	00001d71 	.word	0x00001d71
    1d9c:	00001d71 	.word	0x00001d71

00001da0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1da0:	e7fe      	b.n	1da0 <Dummy_Handler>
	...

00001da4 <Reset_Handler>:
{
    1da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1da6:	4a2a      	ldr	r2, [pc, #168]	; (1e50 <Reset_Handler+0xac>)
    1da8:	4b2a      	ldr	r3, [pc, #168]	; (1e54 <Reset_Handler+0xb0>)
    1daa:	429a      	cmp	r2, r3
    1dac:	d011      	beq.n	1dd2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1dae:	001a      	movs	r2, r3
    1db0:	4b29      	ldr	r3, [pc, #164]	; (1e58 <Reset_Handler+0xb4>)
    1db2:	429a      	cmp	r2, r3
    1db4:	d20d      	bcs.n	1dd2 <Reset_Handler+0x2e>
    1db6:	4a29      	ldr	r2, [pc, #164]	; (1e5c <Reset_Handler+0xb8>)
    1db8:	3303      	adds	r3, #3
    1dba:	1a9b      	subs	r3, r3, r2
    1dbc:	089b      	lsrs	r3, r3, #2
    1dbe:	3301      	adds	r3, #1
    1dc0:	009b      	lsls	r3, r3, #2
    1dc2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1dc4:	4823      	ldr	r0, [pc, #140]	; (1e54 <Reset_Handler+0xb0>)
    1dc6:	4922      	ldr	r1, [pc, #136]	; (1e50 <Reset_Handler+0xac>)
    1dc8:	588c      	ldr	r4, [r1, r2]
    1dca:	5084      	str	r4, [r0, r2]
    1dcc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1dce:	429a      	cmp	r2, r3
    1dd0:	d1fa      	bne.n	1dc8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1dd2:	4a23      	ldr	r2, [pc, #140]	; (1e60 <Reset_Handler+0xbc>)
    1dd4:	4b23      	ldr	r3, [pc, #140]	; (1e64 <Reset_Handler+0xc0>)
    1dd6:	429a      	cmp	r2, r3
    1dd8:	d20a      	bcs.n	1df0 <Reset_Handler+0x4c>
    1dda:	43d3      	mvns	r3, r2
    1ddc:	4921      	ldr	r1, [pc, #132]	; (1e64 <Reset_Handler+0xc0>)
    1dde:	185b      	adds	r3, r3, r1
    1de0:	2103      	movs	r1, #3
    1de2:	438b      	bics	r3, r1
    1de4:	3304      	adds	r3, #4
    1de6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1de8:	2100      	movs	r1, #0
    1dea:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1dec:	4293      	cmp	r3, r2
    1dee:	d1fc      	bne.n	1dea <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1df0:	4a1d      	ldr	r2, [pc, #116]	; (1e68 <Reset_Handler+0xc4>)
    1df2:	21ff      	movs	r1, #255	; 0xff
    1df4:	4b1d      	ldr	r3, [pc, #116]	; (1e6c <Reset_Handler+0xc8>)
    1df6:	438b      	bics	r3, r1
    1df8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1dfa:	39fd      	subs	r1, #253	; 0xfd
    1dfc:	2390      	movs	r3, #144	; 0x90
    1dfe:	005b      	lsls	r3, r3, #1
    1e00:	4a1b      	ldr	r2, [pc, #108]	; (1e70 <Reset_Handler+0xcc>)
    1e02:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1e04:	4a1b      	ldr	r2, [pc, #108]	; (1e74 <Reset_Handler+0xd0>)
    1e06:	78d3      	ldrb	r3, [r2, #3]
    1e08:	2503      	movs	r5, #3
    1e0a:	43ab      	bics	r3, r5
    1e0c:	2402      	movs	r4, #2
    1e0e:	4323      	orrs	r3, r4
    1e10:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e12:	78d3      	ldrb	r3, [r2, #3]
    1e14:	270c      	movs	r7, #12
    1e16:	43bb      	bics	r3, r7
    1e18:	2608      	movs	r6, #8
    1e1a:	4333      	orrs	r3, r6
    1e1c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e1e:	4b16      	ldr	r3, [pc, #88]	; (1e78 <Reset_Handler+0xd4>)
    1e20:	7b98      	ldrb	r0, [r3, #14]
    1e22:	2230      	movs	r2, #48	; 0x30
    1e24:	4390      	bics	r0, r2
    1e26:	2220      	movs	r2, #32
    1e28:	4310      	orrs	r0, r2
    1e2a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e2c:	7b99      	ldrb	r1, [r3, #14]
    1e2e:	43b9      	bics	r1, r7
    1e30:	4331      	orrs	r1, r6
    1e32:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e34:	7b9a      	ldrb	r2, [r3, #14]
    1e36:	43aa      	bics	r2, r5
    1e38:	4322      	orrs	r2, r4
    1e3a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e3c:	4a0f      	ldr	r2, [pc, #60]	; (1e7c <Reset_Handler+0xd8>)
    1e3e:	6853      	ldr	r3, [r2, #4]
    1e40:	2180      	movs	r1, #128	; 0x80
    1e42:	430b      	orrs	r3, r1
    1e44:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e46:	4b0e      	ldr	r3, [pc, #56]	; (1e80 <Reset_Handler+0xdc>)
    1e48:	4798      	blx	r3
        main();
    1e4a:	4b0e      	ldr	r3, [pc, #56]	; (1e84 <Reset_Handler+0xe0>)
    1e4c:	4798      	blx	r3
    1e4e:	e7fe      	b.n	1e4e <Reset_Handler+0xaa>
    1e50:	00004af8 	.word	0x00004af8
    1e54:	20000000 	.word	0x20000000
    1e58:	20000174 	.word	0x20000174
    1e5c:	20000004 	.word	0x20000004
    1e60:	20000174 	.word	0x20000174
    1e64:	200007ac 	.word	0x200007ac
    1e68:	e000ed00 	.word	0xe000ed00
    1e6c:	00000000 	.word	0x00000000
    1e70:	41007000 	.word	0x41007000
    1e74:	41005000 	.word	0x41005000
    1e78:	41004800 	.word	0x41004800
    1e7c:	41004000 	.word	0x41004000
    1e80:	000040e9 	.word	0x000040e9
    1e84:	00001f99 	.word	0x00001f99

00001e88 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1e88:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1e8a:	4a06      	ldr	r2, [pc, #24]	; (1ea4 <_sbrk+0x1c>)
    1e8c:	6812      	ldr	r2, [r2, #0]
    1e8e:	2a00      	cmp	r2, #0
    1e90:	d004      	beq.n	1e9c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1e92:	4a04      	ldr	r2, [pc, #16]	; (1ea4 <_sbrk+0x1c>)
    1e94:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1e96:	18c3      	adds	r3, r0, r3
    1e98:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1e9a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1e9c:	4902      	ldr	r1, [pc, #8]	; (1ea8 <_sbrk+0x20>)
    1e9e:	4a01      	ldr	r2, [pc, #4]	; (1ea4 <_sbrk+0x1c>)
    1ea0:	6011      	str	r1, [r2, #0]
    1ea2:	e7f6      	b.n	1e92 <_sbrk+0xa>
    1ea4:	200001cc 	.word	0x200001cc
    1ea8:	200027b0 	.word	0x200027b0

00001eac <i2c_read_complete_callback>:
	i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
}

/** Callback after read operation completion */
void i2c_read_complete_callback(struct i2c_master_module *const module)
{
    1eac:	b510      	push	{r4, lr}
	SerialConsoleWriteString("Reading complete\n\r");
    1eae:	4802      	ldr	r0, [pc, #8]	; (1eb8 <i2c_read_complete_callback+0xc>)
    1eb0:	4b02      	ldr	r3, [pc, #8]	; (1ebc <i2c_read_complete_callback+0x10>)
    1eb2:	4798      	blx	r3
}
    1eb4:	bd10      	pop	{r4, pc}
    1eb6:	46c0      	nop			; (mov r8, r8)
    1eb8:	000049f4 	.word	0x000049f4
    1ebc:	00000a91 	.word	0x00000a91

00001ec0 <configure_i2c>:

/**
* Configure I2c
*/
void configure_i2c(void)
{
    1ec0:	b530      	push	{r4, r5, lr}
    1ec2:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    1ec4:	ab01      	add	r3, sp, #4
    1ec6:	2264      	movs	r2, #100	; 0x64
    1ec8:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1eca:	4a22      	ldr	r2, [pc, #136]	; (1f54 <configure_i2c+0x94>)
    1ecc:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    1ece:	2200      	movs	r2, #0
    1ed0:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1ed2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    1ed4:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1ed6:	2180      	movs	r1, #128	; 0x80
    1ed8:	0389      	lsls	r1, r1, #14
    1eda:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    1edc:	2101      	movs	r1, #1
    1ede:	4249      	negs	r1, r1
    1ee0:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    1ee2:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    1ee4:	3125      	adds	r1, #37	; 0x25
    1ee6:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1ee8:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    1eea:	3108      	adds	r1, #8
    1eec:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    1eee:	3101      	adds	r1, #1
    1ef0:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    1ef2:	3101      	adds	r1, #1
    1ef4:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1ef6:	32d7      	adds	r2, #215	; 0xd7
    1ef8:	861a      	strh	r2, [r3, #48]	; 0x30
	
	/** Configurations compatible with SAMW25 and Delos PCB board */
// 	config_i2c_master.pinmux_pad0    = PINMUX_PA08D_SERCOM2_PAD0; // SDA
// 	config_i2c_master.pinmux_pad1    = PINMUX_PA09D_SERCOM2_PAD1; // SCK
	
	config_i2c_master.pinmux_pad0    = PINMUX_PA08C_SERCOM0_PAD0; // SDA
    1efa:	4a17      	ldr	r2, [pc, #92]	; (1f58 <configure_i2c+0x98>)
    1efc:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = PINMUX_PA09C_SERCOM0_PAD1; // SCK
    1efe:	4a17      	ldr	r2, [pc, #92]	; (1f5c <configure_i2c+0x9c>)
    1f00:	9209      	str	r2, [sp, #36]	; 0x24

	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master)     \
    1f02:	4d17      	ldr	r5, [pc, #92]	; (1f60 <configure_i2c+0xa0>)
    1f04:	4c17      	ldr	r4, [pc, #92]	; (1f64 <configure_i2c+0xa4>)
    1f06:	aa01      	add	r2, sp, #4
    1f08:	4917      	ldr	r1, [pc, #92]	; (1f68 <configure_i2c+0xa8>)
    1f0a:	0028      	movs	r0, r5
    1f0c:	47a0      	blx	r4
    1f0e:	2800      	cmp	r0, #0
    1f10:	d1f9      	bne.n	1f06 <configure_i2c+0x46>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1f12:	4b13      	ldr	r3, [pc, #76]	; (1f60 <configure_i2c+0xa0>)
    1f14:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1f16:	2207      	movs	r2, #7
    1f18:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    1f1a:	421a      	tst	r2, r3
    1f1c:	d1fc      	bne.n	1f18 <configure_i2c+0x58>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1f1e:	6823      	ldr	r3, [r4, #0]
    1f20:	2202      	movs	r2, #2
    1f22:	4313      	orrs	r3, r2
    1f24:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1f26:	4d0e      	ldr	r5, [pc, #56]	; (1f60 <configure_i2c+0xa0>)
    1f28:	6828      	ldr	r0, [r5, #0]
    1f2a:	4b10      	ldr	r3, [pc, #64]	; (1f6c <configure_i2c+0xac>)
    1f2c:	4798      	blx	r3
    1f2e:	231f      	movs	r3, #31
    1f30:	4018      	ands	r0, r3
    1f32:	3b1e      	subs	r3, #30
    1f34:	4083      	lsls	r3, r0
    1f36:	4a0e      	ldr	r2, [pc, #56]	; (1f70 <configure_i2c+0xb0>)
    1f38:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1f3a:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    1f3c:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1f3e:	2110      	movs	r1, #16
    1f40:	8b62      	ldrh	r2, [r4, #26]
    1f42:	420a      	tst	r2, r1
    1f44:	d104      	bne.n	1f50 <configure_i2c+0x90>
		timeout_counter++;
    1f46:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1f48:	4283      	cmp	r3, r0
    1f4a:	d3f9      	bcc.n	1f40 <configure_i2c+0x80>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1f4c:	2310      	movs	r3, #16
    1f4e:	8363      	strh	r3, [r4, #26]
	!= STATUS_OK);

	i2c_master_enable(&i2c_master_instance);
}
    1f50:	b00f      	add	sp, #60	; 0x3c
    1f52:	bd30      	pop	{r4, r5, pc}
    1f54:	00000d48 	.word	0x00000d48
    1f58:	00080002 	.word	0x00080002
    1f5c:	00090002 	.word	0x00090002
    1f60:	20000774 	.word	0x20000774
    1f64:	0000014d 	.word	0x0000014d
    1f68:	42000800 	.word	0x42000800
    1f6c:	00000fa5 	.word	0x00000fa5
    1f70:	e000e100 	.word	0xe000e100

00001f74 <configure_i2c_callbacks>:

/**
* Configure I2C Callbacks >> For reading 
*/
void configure_i2c_callbacks(void)
{
    1f74:	b510      	push	{r4, lr}
	/* Register callback function. > Writing to slave*/
// 	i2c_master_register_callback(&i2c_master_instance, i2c_write_complete_callback,	I2C_MASTER_CALLBACK_WRITE_COMPLETE);
// 	i2c_master_enable_callback(&i2c_master_instance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);

	/** Register callback for read from slave (Thercam) operation */
	i2c_master_register_callback(&i2c_master_instance, i2c_read_complete_callback,	I2C_MASTER_CALLBACK_READ_COMPLETE);
    1f76:	4c05      	ldr	r4, [pc, #20]	; (1f8c <configure_i2c_callbacks+0x18>)
    1f78:	2201      	movs	r2, #1
    1f7a:	4905      	ldr	r1, [pc, #20]	; (1f90 <configure_i2c_callbacks+0x1c>)
    1f7c:	0020      	movs	r0, r4
    1f7e:	4b05      	ldr	r3, [pc, #20]	; (1f94 <configure_i2c_callbacks+0x20>)
    1f80:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    1f82:	7e63      	ldrb	r3, [r4, #25]
    1f84:	2202      	movs	r2, #2
    1f86:	4313      	orrs	r3, r2
    1f88:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2c_master_instance,I2C_MASTER_CALLBACK_READ_COMPLETE);
}
    1f8a:	bd10      	pop	{r4, pc}
    1f8c:	20000774 	.word	0x20000774
    1f90:	00001ead 	.word	0x00001ead
    1f94:	00000659 	.word	0x00000659

00001f98 <main>:

/**
 * \APPLICATION CODE VERSION 1
 */
int main(void)
{
    1f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f9a:	46de      	mov	lr, fp
    1f9c:	4657      	mov	r7, sl
    1f9e:	464e      	mov	r6, r9
    1fa0:	4645      	mov	r5, r8
    1fa2:	b5e0      	push	{r5, r6, r7, lr}
    1fa4:	b0a1      	sub	sp, #132	; 0x84
	//INITIALIZE SYSTEM PERIPHERALS
	system_init();
    1fa6:	4b60      	ldr	r3, [pc, #384]	; (2128 <STACK_SIZE+0x128>)
    1fa8:	4798      	blx	r3
	delay_init();
    1faa:	4b60      	ldr	r3, [pc, #384]	; (212c <STACK_SIZE+0x12c>)
    1fac:	4798      	blx	r3
	InitializeSerialConsole();
    1fae:	4b60      	ldr	r3, [pc, #384]	; (2130 <STACK_SIZE+0x130>)
    1fb0:	4798      	blx	r3
	cpu_irq_enable();
    1fb2:	2201      	movs	r2, #1
    1fb4:	4b5f      	ldr	r3, [pc, #380]	; (2134 <STACK_SIZE+0x134>)
    1fb6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1fb8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1fbc:	b662      	cpsie	i
	system_interrupt_enable_global();
	
	/** 
	* I2C
	*/
	configure_i2c();
    1fbe:	4b5e      	ldr	r3, [pc, #376]	; (2138 <STACK_SIZE+0x138>)
    1fc0:	4798      	blx	r3
	configure_i2c_callbacks();
    1fc2:	4b5e      	ldr	r3, [pc, #376]	; (213c <STACK_SIZE+0x13c>)
    1fc4:	4798      	blx	r3
	
	/* Init i2c packet. */
	
	//! [write_packet]
	wr_packet.address     = SLAVE_ADDRESS;
    1fc6:	4b5e      	ldr	r3, [pc, #376]	; (2140 <STACK_SIZE+0x140>)
    1fc8:	2069      	movs	r0, #105	; 0x69
    1fca:	8018      	strh	r0, [r3, #0]
	wr_packet.data_length = DATA_LENGTH;
    1fcc:	2280      	movs	r2, #128	; 0x80
    1fce:	0052      	lsls	r2, r2, #1
    1fd0:	805a      	strh	r2, [r3, #2]
	wr_packet.data        = wr_buffer;
    1fd2:	495c      	ldr	r1, [pc, #368]	; (2144 <STACK_SIZE+0x144>)
    1fd4:	6059      	str	r1, [r3, #4]
	//! [write_packet]
	
	//! [read_packet]
	rd_packet.address     = SLAVE_ADDRESS;
    1fd6:	495c      	ldr	r1, [pc, #368]	; (2148 <STACK_SIZE+0x148>)
    1fd8:	8008      	strh	r0, [r1, #0]
	rd_packet.data_length = DATA_LENGTH;
    1fda:	804a      	strh	r2, [r1, #2]
	rd_packet.data        = rd_buffer;
    1fdc:	4b5b      	ldr	r3, [pc, #364]	; (214c <STACK_SIZE+0x14c>)
    1fde:	604b      	str	r3, [r1, #4]
	//! [read_packet]
	
	i2c_master_read_packet_job(&i2c_master_instance,&rd_packet);
    1fe0:	485b      	ldr	r0, [pc, #364]	; (2150 <STACK_SIZE+0x150>)
    1fe2:	4b5c      	ldr	r3, [pc, #368]	; (2154 <STACK_SIZE+0x154>)
    1fe4:	4798      	blx	r3
				
		char readed[50];
		int j = 0;
		uint8_t camera_buffer[64];
		for (int i = 0; i < DATA_LENGTH; i++ )
    1fe6:	2300      	movs	r3, #0
    1fe8:	4698      	mov	r8, r3
		int j = 0;
    1fea:	4699      	mov	r9, r3
				}
				
				j++;
			}
				
			delay_ms(10);
    1fec:	4b5a      	ldr	r3, [pc, #360]	; (2158 <STACK_SIZE+0x158>)
    1fee:	469a      	mov	sl, r3
    1ff0:	9600      	str	r6, [sp, #0]
    1ff2:	9701      	str	r7, [sp, #4]
    1ff4:	e00c      	b.n	2010 <STACK_SIZE+0x10>
					sprintf(readed,"%d; \n\r",camera_buffer[j]);
    1ff6:	4959      	ldr	r1, [pc, #356]	; (215c <STACK_SIZE+0x15c>)
    1ff8:	a813      	add	r0, sp, #76	; 0x4c
    1ffa:	4b59      	ldr	r3, [pc, #356]	; (2160 <STACK_SIZE+0x160>)
    1ffc:	4798      	blx	r3
					SerialConsoleWriteString(readed);
    1ffe:	a813      	add	r0, sp, #76	; 0x4c
    2000:	4b58      	ldr	r3, [pc, #352]	; (2164 <STACK_SIZE+0x164>)
    2002:	4798      	blx	r3
					k = 7;
    2004:	2207      	movs	r2, #7
    2006:	4b58      	ldr	r3, [pc, #352]	; (2168 <STACK_SIZE+0x168>)
    2008:	701a      	strb	r2, [r3, #0]
				j++;
    200a:	2301      	movs	r3, #1
    200c:	469c      	mov	ip, r3
    200e:	44e1      	add	r9, ip
			delay_ms(10);
    2010:	2000      	movs	r0, #0
    2012:	47d0      	blx	sl
    2014:	0004      	movs	r4, r0
    2016:	2500      	movs	r5, #0
    2018:	0f83      	lsrs	r3, r0, #30
    201a:	9301      	str	r3, [sp, #4]
    201c:	0083      	lsls	r3, r0, #2
    201e:	9300      	str	r3, [sp, #0]
    2020:	9800      	ldr	r0, [sp, #0]
    2022:	9901      	ldr	r1, [sp, #4]
    2024:	1900      	adds	r0, r0, r4
    2026:	4169      	adcs	r1, r5
    2028:	1800      	adds	r0, r0, r0
    202a:	4149      	adcs	r1, r1
    202c:	4a4f      	ldr	r2, [pc, #316]	; (216c <STACK_SIZE+0x16c>)
    202e:	2300      	movs	r3, #0
    2030:	1880      	adds	r0, r0, r2
    2032:	4159      	adcs	r1, r3
    2034:	4a4e      	ldr	r2, [pc, #312]	; (2170 <STACK_SIZE+0x170>)
    2036:	2300      	movs	r3, #0
    2038:	4e4e      	ldr	r6, [pc, #312]	; (2174 <STACK_SIZE+0x174>)
    203a:	47b0      	blx	r6
    203c:	4b4e      	ldr	r3, [pc, #312]	; (2178 <STACK_SIZE+0x178>)
    203e:	4798      	blx	r3
		for (int i = 0; i < DATA_LENGTH; i++ )
    2040:	2301      	movs	r3, #1
    2042:	469c      	mov	ip, r3
    2044:	44e0      	add	r8, ip
    2046:	33ff      	adds	r3, #255	; 0xff
    2048:	4598      	cmp	r8, r3
    204a:	d01e      	beq.n	208a <STACK_SIZE+0x8a>
			if (i > 64 && rd_packet.data[i] != 0 && i < 255)
    204c:	4643      	mov	r3, r8
    204e:	2b40      	cmp	r3, #64	; 0x40
    2050:	ddde      	ble.n	2010 <STACK_SIZE+0x10>
    2052:	4b3d      	ldr	r3, [pc, #244]	; (2148 <STACK_SIZE+0x148>)
    2054:	685b      	ldr	r3, [r3, #4]
    2056:	4642      	mov	r2, r8
    2058:	5c9a      	ldrb	r2, [r3, r2]
    205a:	2a00      	cmp	r2, #0
    205c:	d0d8      	beq.n	2010 <STACK_SIZE+0x10>
    205e:	4643      	mov	r3, r8
    2060:	2bfe      	cmp	r3, #254	; 0xfe
    2062:	dcd5      	bgt.n	2010 <STACK_SIZE+0x10>
				camera_buffer[j] = rd_packet.data[i];
    2064:	ab03      	add	r3, sp, #12
    2066:	4649      	mov	r1, r9
    2068:	545a      	strb	r2, [r3, r1]
				if (k)
    206a:	4b3f      	ldr	r3, [pc, #252]	; (2168 <STACK_SIZE+0x168>)
    206c:	781b      	ldrb	r3, [r3, #0]
    206e:	2b00      	cmp	r3, #0
    2070:	d0c1      	beq.n	1ff6 <main+0x5e>
					sprintf(readed,"%d ",camera_buffer[j]);
    2072:	4942      	ldr	r1, [pc, #264]	; (217c <STACK_SIZE+0x17c>)
    2074:	a813      	add	r0, sp, #76	; 0x4c
    2076:	4b3a      	ldr	r3, [pc, #232]	; (2160 <STACK_SIZE+0x160>)
    2078:	4798      	blx	r3
					SerialConsoleWriteString(readed);	
    207a:	a813      	add	r0, sp, #76	; 0x4c
    207c:	4b39      	ldr	r3, [pc, #228]	; (2164 <STACK_SIZE+0x164>)
    207e:	4798      	blx	r3
					k--;
    2080:	4a39      	ldr	r2, [pc, #228]	; (2168 <STACK_SIZE+0x168>)
    2082:	7813      	ldrb	r3, [r2, #0]
    2084:	3b01      	subs	r3, #1
    2086:	7013      	strb	r3, [r2, #0]
    2088:	e7bf      	b.n	200a <STACK_SIZE+0xa>
		/** 
		* Calculate average temperature
		* the center 4x4 sensor readings are considered for pinpoint calculation
		* The sensor is placed at 8" height 
		*/
		uint16_t sum_r1 = (camera_buffer[18] + camera_buffer[19] + camera_buffer[20] + camera_buffer[21]);
    208a:	ab03      	add	r3, sp, #12
    208c:	7c9a      	ldrb	r2, [r3, #18]
    208e:	7cd8      	ldrb	r0, [r3, #19]
    2090:	1812      	adds	r2, r2, r0
    2092:	7d18      	ldrb	r0, [r3, #20]
    2094:	1882      	adds	r2, r0, r2
    2096:	7d58      	ldrb	r0, [r3, #21]
    2098:	1880      	adds	r0, r0, r2
		uint16_t sum_r2 = (camera_buffer[26] + camera_buffer[27] + camera_buffer[28] + camera_buffer[29]);
		uint16_t sum_r3 = (camera_buffer[34] + camera_buffer[35] + camera_buffer[36] + camera_buffer[37]);
		uint16_t sum_r4 = (camera_buffer[42] + camera_buffer[43] + camera_buffer[44] + camera_buffer[45]);
		uint16_t avg_temperature = (sum_r1 + sum_r2 + sum_r3 + sum_r4)/16; // Average calculation
    209a:	b280      	uxth	r0, r0
		uint16_t sum_r2 = (camera_buffer[26] + camera_buffer[27] + camera_buffer[28] + camera_buffer[29]);
    209c:	7e99      	ldrb	r1, [r3, #26]
    209e:	7eda      	ldrb	r2, [r3, #27]
    20a0:	1889      	adds	r1, r1, r2
    20a2:	7f1a      	ldrb	r2, [r3, #28]
    20a4:	1851      	adds	r1, r2, r1
    20a6:	7f5a      	ldrb	r2, [r3, #29]
    20a8:	1852      	adds	r2, r2, r1
		uint16_t avg_temperature = (sum_r1 + sum_r2 + sum_r3 + sum_r4)/16; // Average calculation
    20aa:	b292      	uxth	r2, r2
    20ac:	1880      	adds	r0, r0, r2
		uint16_t sum_r3 = (camera_buffer[34] + camera_buffer[35] + camera_buffer[36] + camera_buffer[37]);
    20ae:	2222      	movs	r2, #34	; 0x22
    20b0:	5c99      	ldrb	r1, [r3, r2]
    20b2:	3201      	adds	r2, #1
    20b4:	5c9a      	ldrb	r2, [r3, r2]
    20b6:	1889      	adds	r1, r1, r2
    20b8:	2224      	movs	r2, #36	; 0x24
    20ba:	5c9a      	ldrb	r2, [r3, r2]
    20bc:	1851      	adds	r1, r2, r1
    20be:	2225      	movs	r2, #37	; 0x25
    20c0:	5c9a      	ldrb	r2, [r3, r2]
    20c2:	1852      	adds	r2, r2, r1
		uint16_t avg_temperature = (sum_r1 + sum_r2 + sum_r3 + sum_r4)/16; // Average calculation
    20c4:	b292      	uxth	r2, r2
    20c6:	1880      	adds	r0, r0, r2
		uint16_t sum_r4 = (camera_buffer[42] + camera_buffer[43] + camera_buffer[44] + camera_buffer[45]);
    20c8:	222a      	movs	r2, #42	; 0x2a
    20ca:	5c99      	ldrb	r1, [r3, r2]
    20cc:	3201      	adds	r2, #1
    20ce:	5c9a      	ldrb	r2, [r3, r2]
    20d0:	1889      	adds	r1, r1, r2
    20d2:	222c      	movs	r2, #44	; 0x2c
    20d4:	5c9a      	ldrb	r2, [r3, r2]
    20d6:	1851      	adds	r1, r2, r1
    20d8:	222d      	movs	r2, #45	; 0x2d
    20da:	5c9a      	ldrb	r2, [r3, r2]
    20dc:	1852      	adds	r2, r2, r1
		uint16_t avg_temperature = (sum_r1 + sum_r2 + sum_r3 + sum_r4)/16; // Average calculation
    20de:	b293      	uxth	r3, r2
    20e0:	18c3      	adds	r3, r0, r3
    20e2:	17da      	asrs	r2, r3, #31
    20e4:	200f      	movs	r0, #15
    20e6:	4010      	ands	r0, r2
    20e8:	18c0      	adds	r0, r0, r3
		
		uint16_t correction = (0.6 * avg_temperature) + 20; // Calibration equation
    20ea:	0300      	lsls	r0, r0, #12
    20ec:	0c00      	lsrs	r0, r0, #16
    20ee:	4b24      	ldr	r3, [pc, #144]	; (2180 <STACK_SIZE+0x180>)
    20f0:	4798      	blx	r3
    20f2:	4a24      	ldr	r2, [pc, #144]	; (2184 <STACK_SIZE+0x184>)
    20f4:	4b24      	ldr	r3, [pc, #144]	; (2188 <STACK_SIZE+0x188>)
    20f6:	4c25      	ldr	r4, [pc, #148]	; (218c <STACK_SIZE+0x18c>)
    20f8:	47a0      	blx	r4
    20fa:	2200      	movs	r2, #0
    20fc:	4b24      	ldr	r3, [pc, #144]	; (2190 <STACK_SIZE+0x190>)
    20fe:	4c25      	ldr	r4, [pc, #148]	; (2194 <STACK_SIZE+0x194>)
    2100:	47a0      	blx	r4
    2102:	4b25      	ldr	r3, [pc, #148]	; (2198 <STACK_SIZE+0x198>)
    2104:	4798      	blx	r3
		
		char temperature[3];
		sprintf(temperature,"%d\n\r",correction);
    2106:	b282      	uxth	r2, r0
    2108:	4924      	ldr	r1, [pc, #144]	; (219c <STACK_SIZE+0x19c>)
    210a:	a802      	add	r0, sp, #8
    210c:	4b14      	ldr	r3, [pc, #80]	; (2160 <STACK_SIZE+0x160>)
    210e:	4798      	blx	r3
		SerialConsoleWriteString(temperature);
    2110:	a802      	add	r0, sp, #8
    2112:	4b14      	ldr	r3, [pc, #80]	; (2164 <STACK_SIZE+0x164>)
    2114:	4798      	blx	r3
// while (1) 
// {
// 		port_pin_toggle_output_level(LED_0_PIN);
//		delay_ms(100);	
// }
}
    2116:	2000      	movs	r0, #0
    2118:	b021      	add	sp, #132	; 0x84
    211a:	bc3c      	pop	{r2, r3, r4, r5}
    211c:	4690      	mov	r8, r2
    211e:	4699      	mov	r9, r3
    2120:	46a2      	mov	sl, r4
    2122:	46ab      	mov	fp, r5
    2124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	00001d75 	.word	0x00001d75
    212c:	00000b59 	.word	0x00000b59
    2130:	00000969 	.word	0x00000969
    2134:	2000000c 	.word	0x2000000c
    2138:	00001ec1 	.word	0x00001ec1
    213c:	00001f75 	.word	0x00001f75
    2140:	20000768 	.word	0x20000768
    2144:	20000010 	.word	0x20000010
    2148:	2000079c 	.word	0x2000079c
    214c:	200001d0 	.word	0x200001d0
    2150:	20000774 	.word	0x20000774
    2154:	00000671 	.word	0x00000671
    2158:	00001b31 	.word	0x00001b31
    215c:	00004a0c 	.word	0x00004a0c
    2160:	000042b9 	.word	0x000042b9
    2164:	00000a91 	.word	0x00000a91
    2168:	2000000d 	.word	0x2000000d
    216c:	00001b57 	.word	0x00001b57
    2170:	00001b58 	.word	0x00001b58
    2174:	000022b9 	.word	0x000022b9
    2178:	20000001 	.word	0x20000001
    217c:	00004a08 	.word	0x00004a08
    2180:	00003d25 	.word	0x00003d25
    2184:	33333333 	.word	0x33333333
    2188:	3fe33333 	.word	0x3fe33333
    218c:	00003191 	.word	0x00003191
    2190:	40340000 	.word	0x40340000
    2194:	00002509 	.word	0x00002509
    2198:	0000234d 	.word	0x0000234d
    219c:	00004a14 	.word	0x00004a14

000021a0 <__udivsi3>:
    21a0:	2200      	movs	r2, #0
    21a2:	0843      	lsrs	r3, r0, #1
    21a4:	428b      	cmp	r3, r1
    21a6:	d374      	bcc.n	2292 <__udivsi3+0xf2>
    21a8:	0903      	lsrs	r3, r0, #4
    21aa:	428b      	cmp	r3, r1
    21ac:	d35f      	bcc.n	226e <__udivsi3+0xce>
    21ae:	0a03      	lsrs	r3, r0, #8
    21b0:	428b      	cmp	r3, r1
    21b2:	d344      	bcc.n	223e <__udivsi3+0x9e>
    21b4:	0b03      	lsrs	r3, r0, #12
    21b6:	428b      	cmp	r3, r1
    21b8:	d328      	bcc.n	220c <__udivsi3+0x6c>
    21ba:	0c03      	lsrs	r3, r0, #16
    21bc:	428b      	cmp	r3, r1
    21be:	d30d      	bcc.n	21dc <__udivsi3+0x3c>
    21c0:	22ff      	movs	r2, #255	; 0xff
    21c2:	0209      	lsls	r1, r1, #8
    21c4:	ba12      	rev	r2, r2
    21c6:	0c03      	lsrs	r3, r0, #16
    21c8:	428b      	cmp	r3, r1
    21ca:	d302      	bcc.n	21d2 <__udivsi3+0x32>
    21cc:	1212      	asrs	r2, r2, #8
    21ce:	0209      	lsls	r1, r1, #8
    21d0:	d065      	beq.n	229e <__udivsi3+0xfe>
    21d2:	0b03      	lsrs	r3, r0, #12
    21d4:	428b      	cmp	r3, r1
    21d6:	d319      	bcc.n	220c <__udivsi3+0x6c>
    21d8:	e000      	b.n	21dc <__udivsi3+0x3c>
    21da:	0a09      	lsrs	r1, r1, #8
    21dc:	0bc3      	lsrs	r3, r0, #15
    21de:	428b      	cmp	r3, r1
    21e0:	d301      	bcc.n	21e6 <__udivsi3+0x46>
    21e2:	03cb      	lsls	r3, r1, #15
    21e4:	1ac0      	subs	r0, r0, r3
    21e6:	4152      	adcs	r2, r2
    21e8:	0b83      	lsrs	r3, r0, #14
    21ea:	428b      	cmp	r3, r1
    21ec:	d301      	bcc.n	21f2 <__udivsi3+0x52>
    21ee:	038b      	lsls	r3, r1, #14
    21f0:	1ac0      	subs	r0, r0, r3
    21f2:	4152      	adcs	r2, r2
    21f4:	0b43      	lsrs	r3, r0, #13
    21f6:	428b      	cmp	r3, r1
    21f8:	d301      	bcc.n	21fe <__udivsi3+0x5e>
    21fa:	034b      	lsls	r3, r1, #13
    21fc:	1ac0      	subs	r0, r0, r3
    21fe:	4152      	adcs	r2, r2
    2200:	0b03      	lsrs	r3, r0, #12
    2202:	428b      	cmp	r3, r1
    2204:	d301      	bcc.n	220a <__udivsi3+0x6a>
    2206:	030b      	lsls	r3, r1, #12
    2208:	1ac0      	subs	r0, r0, r3
    220a:	4152      	adcs	r2, r2
    220c:	0ac3      	lsrs	r3, r0, #11
    220e:	428b      	cmp	r3, r1
    2210:	d301      	bcc.n	2216 <__udivsi3+0x76>
    2212:	02cb      	lsls	r3, r1, #11
    2214:	1ac0      	subs	r0, r0, r3
    2216:	4152      	adcs	r2, r2
    2218:	0a83      	lsrs	r3, r0, #10
    221a:	428b      	cmp	r3, r1
    221c:	d301      	bcc.n	2222 <__udivsi3+0x82>
    221e:	028b      	lsls	r3, r1, #10
    2220:	1ac0      	subs	r0, r0, r3
    2222:	4152      	adcs	r2, r2
    2224:	0a43      	lsrs	r3, r0, #9
    2226:	428b      	cmp	r3, r1
    2228:	d301      	bcc.n	222e <__udivsi3+0x8e>
    222a:	024b      	lsls	r3, r1, #9
    222c:	1ac0      	subs	r0, r0, r3
    222e:	4152      	adcs	r2, r2
    2230:	0a03      	lsrs	r3, r0, #8
    2232:	428b      	cmp	r3, r1
    2234:	d301      	bcc.n	223a <__udivsi3+0x9a>
    2236:	020b      	lsls	r3, r1, #8
    2238:	1ac0      	subs	r0, r0, r3
    223a:	4152      	adcs	r2, r2
    223c:	d2cd      	bcs.n	21da <__udivsi3+0x3a>
    223e:	09c3      	lsrs	r3, r0, #7
    2240:	428b      	cmp	r3, r1
    2242:	d301      	bcc.n	2248 <__udivsi3+0xa8>
    2244:	01cb      	lsls	r3, r1, #7
    2246:	1ac0      	subs	r0, r0, r3
    2248:	4152      	adcs	r2, r2
    224a:	0983      	lsrs	r3, r0, #6
    224c:	428b      	cmp	r3, r1
    224e:	d301      	bcc.n	2254 <__udivsi3+0xb4>
    2250:	018b      	lsls	r3, r1, #6
    2252:	1ac0      	subs	r0, r0, r3
    2254:	4152      	adcs	r2, r2
    2256:	0943      	lsrs	r3, r0, #5
    2258:	428b      	cmp	r3, r1
    225a:	d301      	bcc.n	2260 <__udivsi3+0xc0>
    225c:	014b      	lsls	r3, r1, #5
    225e:	1ac0      	subs	r0, r0, r3
    2260:	4152      	adcs	r2, r2
    2262:	0903      	lsrs	r3, r0, #4
    2264:	428b      	cmp	r3, r1
    2266:	d301      	bcc.n	226c <__udivsi3+0xcc>
    2268:	010b      	lsls	r3, r1, #4
    226a:	1ac0      	subs	r0, r0, r3
    226c:	4152      	adcs	r2, r2
    226e:	08c3      	lsrs	r3, r0, #3
    2270:	428b      	cmp	r3, r1
    2272:	d301      	bcc.n	2278 <__udivsi3+0xd8>
    2274:	00cb      	lsls	r3, r1, #3
    2276:	1ac0      	subs	r0, r0, r3
    2278:	4152      	adcs	r2, r2
    227a:	0883      	lsrs	r3, r0, #2
    227c:	428b      	cmp	r3, r1
    227e:	d301      	bcc.n	2284 <__udivsi3+0xe4>
    2280:	008b      	lsls	r3, r1, #2
    2282:	1ac0      	subs	r0, r0, r3
    2284:	4152      	adcs	r2, r2
    2286:	0843      	lsrs	r3, r0, #1
    2288:	428b      	cmp	r3, r1
    228a:	d301      	bcc.n	2290 <__udivsi3+0xf0>
    228c:	004b      	lsls	r3, r1, #1
    228e:	1ac0      	subs	r0, r0, r3
    2290:	4152      	adcs	r2, r2
    2292:	1a41      	subs	r1, r0, r1
    2294:	d200      	bcs.n	2298 <__udivsi3+0xf8>
    2296:	4601      	mov	r1, r0
    2298:	4152      	adcs	r2, r2
    229a:	4610      	mov	r0, r2
    229c:	4770      	bx	lr
    229e:	e7ff      	b.n	22a0 <__udivsi3+0x100>
    22a0:	b501      	push	{r0, lr}
    22a2:	2000      	movs	r0, #0
    22a4:	f000 f806 	bl	22b4 <__aeabi_idiv0>
    22a8:	bd02      	pop	{r1, pc}
    22aa:	46c0      	nop			; (mov r8, r8)

000022ac <__aeabi_uidivmod>:
    22ac:	2900      	cmp	r1, #0
    22ae:	d0f7      	beq.n	22a0 <__udivsi3+0x100>
    22b0:	e776      	b.n	21a0 <__udivsi3>
    22b2:	4770      	bx	lr

000022b4 <__aeabi_idiv0>:
    22b4:	4770      	bx	lr
    22b6:	46c0      	nop			; (mov r8, r8)

000022b8 <__aeabi_uldivmod>:
    22b8:	2b00      	cmp	r3, #0
    22ba:	d111      	bne.n	22e0 <__aeabi_uldivmod+0x28>
    22bc:	2a00      	cmp	r2, #0
    22be:	d10f      	bne.n	22e0 <__aeabi_uldivmod+0x28>
    22c0:	2900      	cmp	r1, #0
    22c2:	d100      	bne.n	22c6 <__aeabi_uldivmod+0xe>
    22c4:	2800      	cmp	r0, #0
    22c6:	d002      	beq.n	22ce <__aeabi_uldivmod+0x16>
    22c8:	2100      	movs	r1, #0
    22ca:	43c9      	mvns	r1, r1
    22cc:	1c08      	adds	r0, r1, #0
    22ce:	b407      	push	{r0, r1, r2}
    22d0:	4802      	ldr	r0, [pc, #8]	; (22dc <__aeabi_uldivmod+0x24>)
    22d2:	a102      	add	r1, pc, #8	; (adr r1, 22dc <__aeabi_uldivmod+0x24>)
    22d4:	1840      	adds	r0, r0, r1
    22d6:	9002      	str	r0, [sp, #8]
    22d8:	bd03      	pop	{r0, r1, pc}
    22da:	46c0      	nop			; (mov r8, r8)
    22dc:	ffffffd9 	.word	0xffffffd9
    22e0:	b403      	push	{r0, r1}
    22e2:	4668      	mov	r0, sp
    22e4:	b501      	push	{r0, lr}
    22e6:	9802      	ldr	r0, [sp, #8]
    22e8:	f000 f84e 	bl	2388 <__udivmoddi4>
    22ec:	9b01      	ldr	r3, [sp, #4]
    22ee:	469e      	mov	lr, r3
    22f0:	b002      	add	sp, #8
    22f2:	bc0c      	pop	{r2, r3}
    22f4:	4770      	bx	lr
    22f6:	46c0      	nop			; (mov r8, r8)

000022f8 <__aeabi_lmul>:
    22f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22fa:	46ce      	mov	lr, r9
    22fc:	4647      	mov	r7, r8
    22fe:	0415      	lsls	r5, r2, #16
    2300:	0c2d      	lsrs	r5, r5, #16
    2302:	002e      	movs	r6, r5
    2304:	b580      	push	{r7, lr}
    2306:	0407      	lsls	r7, r0, #16
    2308:	0c14      	lsrs	r4, r2, #16
    230a:	0c3f      	lsrs	r7, r7, #16
    230c:	4699      	mov	r9, r3
    230e:	0c03      	lsrs	r3, r0, #16
    2310:	437e      	muls	r6, r7
    2312:	435d      	muls	r5, r3
    2314:	4367      	muls	r7, r4
    2316:	4363      	muls	r3, r4
    2318:	197f      	adds	r7, r7, r5
    231a:	0c34      	lsrs	r4, r6, #16
    231c:	19e4      	adds	r4, r4, r7
    231e:	469c      	mov	ip, r3
    2320:	42a5      	cmp	r5, r4
    2322:	d903      	bls.n	232c <__aeabi_lmul+0x34>
    2324:	2380      	movs	r3, #128	; 0x80
    2326:	025b      	lsls	r3, r3, #9
    2328:	4698      	mov	r8, r3
    232a:	44c4      	add	ip, r8
    232c:	464b      	mov	r3, r9
    232e:	4351      	muls	r1, r2
    2330:	4343      	muls	r3, r0
    2332:	0436      	lsls	r6, r6, #16
    2334:	0c36      	lsrs	r6, r6, #16
    2336:	0c25      	lsrs	r5, r4, #16
    2338:	0424      	lsls	r4, r4, #16
    233a:	4465      	add	r5, ip
    233c:	19a4      	adds	r4, r4, r6
    233e:	1859      	adds	r1, r3, r1
    2340:	1949      	adds	r1, r1, r5
    2342:	0020      	movs	r0, r4
    2344:	bc0c      	pop	{r2, r3}
    2346:	4690      	mov	r8, r2
    2348:	4699      	mov	r9, r3
    234a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000234c <__aeabi_d2uiz>:
    234c:	b570      	push	{r4, r5, r6, lr}
    234e:	2200      	movs	r2, #0
    2350:	4b0c      	ldr	r3, [pc, #48]	; (2384 <__aeabi_d2uiz+0x38>)
    2352:	0004      	movs	r4, r0
    2354:	000d      	movs	r5, r1
    2356:	f001 fd93 	bl	3e80 <__aeabi_dcmpge>
    235a:	2800      	cmp	r0, #0
    235c:	d104      	bne.n	2368 <__aeabi_d2uiz+0x1c>
    235e:	0020      	movs	r0, r4
    2360:	0029      	movs	r1, r5
    2362:	f001 fcab 	bl	3cbc <__aeabi_d2iz>
    2366:	bd70      	pop	{r4, r5, r6, pc}
    2368:	4b06      	ldr	r3, [pc, #24]	; (2384 <__aeabi_d2uiz+0x38>)
    236a:	2200      	movs	r2, #0
    236c:	0020      	movs	r0, r4
    236e:	0029      	movs	r1, r5
    2370:	f001 f98e 	bl	3690 <__aeabi_dsub>
    2374:	f001 fca2 	bl	3cbc <__aeabi_d2iz>
    2378:	2380      	movs	r3, #128	; 0x80
    237a:	061b      	lsls	r3, r3, #24
    237c:	469c      	mov	ip, r3
    237e:	4460      	add	r0, ip
    2380:	e7f1      	b.n	2366 <__aeabi_d2uiz+0x1a>
    2382:	46c0      	nop			; (mov r8, r8)
    2384:	41e00000 	.word	0x41e00000

00002388 <__udivmoddi4>:
    2388:	b5f0      	push	{r4, r5, r6, r7, lr}
    238a:	4657      	mov	r7, sl
    238c:	464e      	mov	r6, r9
    238e:	4645      	mov	r5, r8
    2390:	46de      	mov	lr, fp
    2392:	b5e0      	push	{r5, r6, r7, lr}
    2394:	0004      	movs	r4, r0
    2396:	b083      	sub	sp, #12
    2398:	000d      	movs	r5, r1
    239a:	4692      	mov	sl, r2
    239c:	4699      	mov	r9, r3
    239e:	428b      	cmp	r3, r1
    23a0:	d82f      	bhi.n	2402 <__udivmoddi4+0x7a>
    23a2:	d02c      	beq.n	23fe <__udivmoddi4+0x76>
    23a4:	4649      	mov	r1, r9
    23a6:	4650      	mov	r0, sl
    23a8:	f001 fd92 	bl	3ed0 <__clzdi2>
    23ac:	0029      	movs	r1, r5
    23ae:	0006      	movs	r6, r0
    23b0:	0020      	movs	r0, r4
    23b2:	f001 fd8d 	bl	3ed0 <__clzdi2>
    23b6:	1a33      	subs	r3, r6, r0
    23b8:	4698      	mov	r8, r3
    23ba:	3b20      	subs	r3, #32
    23bc:	469b      	mov	fp, r3
    23be:	d500      	bpl.n	23c2 <__udivmoddi4+0x3a>
    23c0:	e074      	b.n	24ac <__udivmoddi4+0x124>
    23c2:	4653      	mov	r3, sl
    23c4:	465a      	mov	r2, fp
    23c6:	4093      	lsls	r3, r2
    23c8:	001f      	movs	r7, r3
    23ca:	4653      	mov	r3, sl
    23cc:	4642      	mov	r2, r8
    23ce:	4093      	lsls	r3, r2
    23d0:	001e      	movs	r6, r3
    23d2:	42af      	cmp	r7, r5
    23d4:	d829      	bhi.n	242a <__udivmoddi4+0xa2>
    23d6:	d026      	beq.n	2426 <__udivmoddi4+0x9e>
    23d8:	465b      	mov	r3, fp
    23da:	1ba4      	subs	r4, r4, r6
    23dc:	41bd      	sbcs	r5, r7
    23de:	2b00      	cmp	r3, #0
    23e0:	da00      	bge.n	23e4 <__udivmoddi4+0x5c>
    23e2:	e079      	b.n	24d8 <__udivmoddi4+0x150>
    23e4:	2200      	movs	r2, #0
    23e6:	2300      	movs	r3, #0
    23e8:	9200      	str	r2, [sp, #0]
    23ea:	9301      	str	r3, [sp, #4]
    23ec:	2301      	movs	r3, #1
    23ee:	465a      	mov	r2, fp
    23f0:	4093      	lsls	r3, r2
    23f2:	9301      	str	r3, [sp, #4]
    23f4:	2301      	movs	r3, #1
    23f6:	4642      	mov	r2, r8
    23f8:	4093      	lsls	r3, r2
    23fa:	9300      	str	r3, [sp, #0]
    23fc:	e019      	b.n	2432 <__udivmoddi4+0xaa>
    23fe:	4282      	cmp	r2, r0
    2400:	d9d0      	bls.n	23a4 <__udivmoddi4+0x1c>
    2402:	2200      	movs	r2, #0
    2404:	2300      	movs	r3, #0
    2406:	9200      	str	r2, [sp, #0]
    2408:	9301      	str	r3, [sp, #4]
    240a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    240c:	2b00      	cmp	r3, #0
    240e:	d001      	beq.n	2414 <__udivmoddi4+0x8c>
    2410:	601c      	str	r4, [r3, #0]
    2412:	605d      	str	r5, [r3, #4]
    2414:	9800      	ldr	r0, [sp, #0]
    2416:	9901      	ldr	r1, [sp, #4]
    2418:	b003      	add	sp, #12
    241a:	bc3c      	pop	{r2, r3, r4, r5}
    241c:	4690      	mov	r8, r2
    241e:	4699      	mov	r9, r3
    2420:	46a2      	mov	sl, r4
    2422:	46ab      	mov	fp, r5
    2424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2426:	42a3      	cmp	r3, r4
    2428:	d9d6      	bls.n	23d8 <__udivmoddi4+0x50>
    242a:	2200      	movs	r2, #0
    242c:	2300      	movs	r3, #0
    242e:	9200      	str	r2, [sp, #0]
    2430:	9301      	str	r3, [sp, #4]
    2432:	4643      	mov	r3, r8
    2434:	2b00      	cmp	r3, #0
    2436:	d0e8      	beq.n	240a <__udivmoddi4+0x82>
    2438:	07fb      	lsls	r3, r7, #31
    243a:	0872      	lsrs	r2, r6, #1
    243c:	431a      	orrs	r2, r3
    243e:	4646      	mov	r6, r8
    2440:	087b      	lsrs	r3, r7, #1
    2442:	e00e      	b.n	2462 <__udivmoddi4+0xda>
    2444:	42ab      	cmp	r3, r5
    2446:	d101      	bne.n	244c <__udivmoddi4+0xc4>
    2448:	42a2      	cmp	r2, r4
    244a:	d80c      	bhi.n	2466 <__udivmoddi4+0xde>
    244c:	1aa4      	subs	r4, r4, r2
    244e:	419d      	sbcs	r5, r3
    2450:	2001      	movs	r0, #1
    2452:	1924      	adds	r4, r4, r4
    2454:	416d      	adcs	r5, r5
    2456:	2100      	movs	r1, #0
    2458:	3e01      	subs	r6, #1
    245a:	1824      	adds	r4, r4, r0
    245c:	414d      	adcs	r5, r1
    245e:	2e00      	cmp	r6, #0
    2460:	d006      	beq.n	2470 <__udivmoddi4+0xe8>
    2462:	42ab      	cmp	r3, r5
    2464:	d9ee      	bls.n	2444 <__udivmoddi4+0xbc>
    2466:	3e01      	subs	r6, #1
    2468:	1924      	adds	r4, r4, r4
    246a:	416d      	adcs	r5, r5
    246c:	2e00      	cmp	r6, #0
    246e:	d1f8      	bne.n	2462 <__udivmoddi4+0xda>
    2470:	465b      	mov	r3, fp
    2472:	9800      	ldr	r0, [sp, #0]
    2474:	9901      	ldr	r1, [sp, #4]
    2476:	1900      	adds	r0, r0, r4
    2478:	4169      	adcs	r1, r5
    247a:	2b00      	cmp	r3, #0
    247c:	db22      	blt.n	24c4 <__udivmoddi4+0x13c>
    247e:	002b      	movs	r3, r5
    2480:	465a      	mov	r2, fp
    2482:	40d3      	lsrs	r3, r2
    2484:	002a      	movs	r2, r5
    2486:	4644      	mov	r4, r8
    2488:	40e2      	lsrs	r2, r4
    248a:	001c      	movs	r4, r3
    248c:	465b      	mov	r3, fp
    248e:	0015      	movs	r5, r2
    2490:	2b00      	cmp	r3, #0
    2492:	db2c      	blt.n	24ee <__udivmoddi4+0x166>
    2494:	0026      	movs	r6, r4
    2496:	409e      	lsls	r6, r3
    2498:	0033      	movs	r3, r6
    249a:	0026      	movs	r6, r4
    249c:	4647      	mov	r7, r8
    249e:	40be      	lsls	r6, r7
    24a0:	0032      	movs	r2, r6
    24a2:	1a80      	subs	r0, r0, r2
    24a4:	4199      	sbcs	r1, r3
    24a6:	9000      	str	r0, [sp, #0]
    24a8:	9101      	str	r1, [sp, #4]
    24aa:	e7ae      	b.n	240a <__udivmoddi4+0x82>
    24ac:	4642      	mov	r2, r8
    24ae:	2320      	movs	r3, #32
    24b0:	1a9b      	subs	r3, r3, r2
    24b2:	4652      	mov	r2, sl
    24b4:	40da      	lsrs	r2, r3
    24b6:	4641      	mov	r1, r8
    24b8:	0013      	movs	r3, r2
    24ba:	464a      	mov	r2, r9
    24bc:	408a      	lsls	r2, r1
    24be:	0017      	movs	r7, r2
    24c0:	431f      	orrs	r7, r3
    24c2:	e782      	b.n	23ca <__udivmoddi4+0x42>
    24c4:	4642      	mov	r2, r8
    24c6:	2320      	movs	r3, #32
    24c8:	1a9b      	subs	r3, r3, r2
    24ca:	002a      	movs	r2, r5
    24cc:	4646      	mov	r6, r8
    24ce:	409a      	lsls	r2, r3
    24d0:	0023      	movs	r3, r4
    24d2:	40f3      	lsrs	r3, r6
    24d4:	4313      	orrs	r3, r2
    24d6:	e7d5      	b.n	2484 <__udivmoddi4+0xfc>
    24d8:	4642      	mov	r2, r8
    24da:	2320      	movs	r3, #32
    24dc:	2100      	movs	r1, #0
    24de:	1a9b      	subs	r3, r3, r2
    24e0:	2200      	movs	r2, #0
    24e2:	9100      	str	r1, [sp, #0]
    24e4:	9201      	str	r2, [sp, #4]
    24e6:	2201      	movs	r2, #1
    24e8:	40da      	lsrs	r2, r3
    24ea:	9201      	str	r2, [sp, #4]
    24ec:	e782      	b.n	23f4 <__udivmoddi4+0x6c>
    24ee:	4642      	mov	r2, r8
    24f0:	2320      	movs	r3, #32
    24f2:	0026      	movs	r6, r4
    24f4:	1a9b      	subs	r3, r3, r2
    24f6:	40de      	lsrs	r6, r3
    24f8:	002f      	movs	r7, r5
    24fa:	46b4      	mov	ip, r6
    24fc:	4097      	lsls	r7, r2
    24fe:	4666      	mov	r6, ip
    2500:	003b      	movs	r3, r7
    2502:	4333      	orrs	r3, r6
    2504:	e7c9      	b.n	249a <__udivmoddi4+0x112>
    2506:	46c0      	nop			; (mov r8, r8)

00002508 <__aeabi_dadd>:
    2508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    250a:	4645      	mov	r5, r8
    250c:	46de      	mov	lr, fp
    250e:	4657      	mov	r7, sl
    2510:	464e      	mov	r6, r9
    2512:	030c      	lsls	r4, r1, #12
    2514:	b5e0      	push	{r5, r6, r7, lr}
    2516:	004e      	lsls	r6, r1, #1
    2518:	0fc9      	lsrs	r1, r1, #31
    251a:	4688      	mov	r8, r1
    251c:	000d      	movs	r5, r1
    251e:	0a61      	lsrs	r1, r4, #9
    2520:	0f44      	lsrs	r4, r0, #29
    2522:	430c      	orrs	r4, r1
    2524:	00c7      	lsls	r7, r0, #3
    2526:	0319      	lsls	r1, r3, #12
    2528:	0058      	lsls	r0, r3, #1
    252a:	0fdb      	lsrs	r3, r3, #31
    252c:	469b      	mov	fp, r3
    252e:	0a4b      	lsrs	r3, r1, #9
    2530:	0f51      	lsrs	r1, r2, #29
    2532:	430b      	orrs	r3, r1
    2534:	0d76      	lsrs	r6, r6, #21
    2536:	0d40      	lsrs	r0, r0, #21
    2538:	0019      	movs	r1, r3
    253a:	00d2      	lsls	r2, r2, #3
    253c:	45d8      	cmp	r8, fp
    253e:	d100      	bne.n	2542 <__aeabi_dadd+0x3a>
    2540:	e0ae      	b.n	26a0 <__aeabi_dadd+0x198>
    2542:	1a35      	subs	r5, r6, r0
    2544:	2d00      	cmp	r5, #0
    2546:	dc00      	bgt.n	254a <__aeabi_dadd+0x42>
    2548:	e0f6      	b.n	2738 <__aeabi_dadd+0x230>
    254a:	2800      	cmp	r0, #0
    254c:	d10f      	bne.n	256e <__aeabi_dadd+0x66>
    254e:	4313      	orrs	r3, r2
    2550:	d100      	bne.n	2554 <__aeabi_dadd+0x4c>
    2552:	e0db      	b.n	270c <__aeabi_dadd+0x204>
    2554:	1e6b      	subs	r3, r5, #1
    2556:	2b00      	cmp	r3, #0
    2558:	d000      	beq.n	255c <__aeabi_dadd+0x54>
    255a:	e137      	b.n	27cc <__aeabi_dadd+0x2c4>
    255c:	1aba      	subs	r2, r7, r2
    255e:	4297      	cmp	r7, r2
    2560:	41bf      	sbcs	r7, r7
    2562:	1a64      	subs	r4, r4, r1
    2564:	427f      	negs	r7, r7
    2566:	1be4      	subs	r4, r4, r7
    2568:	2601      	movs	r6, #1
    256a:	0017      	movs	r7, r2
    256c:	e024      	b.n	25b8 <__aeabi_dadd+0xb0>
    256e:	4bc6      	ldr	r3, [pc, #792]	; (2888 <__aeabi_dadd+0x380>)
    2570:	429e      	cmp	r6, r3
    2572:	d04d      	beq.n	2610 <__aeabi_dadd+0x108>
    2574:	2380      	movs	r3, #128	; 0x80
    2576:	041b      	lsls	r3, r3, #16
    2578:	4319      	orrs	r1, r3
    257a:	2d38      	cmp	r5, #56	; 0x38
    257c:	dd00      	ble.n	2580 <__aeabi_dadd+0x78>
    257e:	e107      	b.n	2790 <__aeabi_dadd+0x288>
    2580:	2d1f      	cmp	r5, #31
    2582:	dd00      	ble.n	2586 <__aeabi_dadd+0x7e>
    2584:	e138      	b.n	27f8 <__aeabi_dadd+0x2f0>
    2586:	2020      	movs	r0, #32
    2588:	1b43      	subs	r3, r0, r5
    258a:	469a      	mov	sl, r3
    258c:	000b      	movs	r3, r1
    258e:	4650      	mov	r0, sl
    2590:	4083      	lsls	r3, r0
    2592:	4699      	mov	r9, r3
    2594:	0013      	movs	r3, r2
    2596:	4648      	mov	r0, r9
    2598:	40eb      	lsrs	r3, r5
    259a:	4318      	orrs	r0, r3
    259c:	0003      	movs	r3, r0
    259e:	4650      	mov	r0, sl
    25a0:	4082      	lsls	r2, r0
    25a2:	1e50      	subs	r0, r2, #1
    25a4:	4182      	sbcs	r2, r0
    25a6:	40e9      	lsrs	r1, r5
    25a8:	431a      	orrs	r2, r3
    25aa:	1aba      	subs	r2, r7, r2
    25ac:	1a61      	subs	r1, r4, r1
    25ae:	4297      	cmp	r7, r2
    25b0:	41a4      	sbcs	r4, r4
    25b2:	0017      	movs	r7, r2
    25b4:	4264      	negs	r4, r4
    25b6:	1b0c      	subs	r4, r1, r4
    25b8:	0223      	lsls	r3, r4, #8
    25ba:	d562      	bpl.n	2682 <__aeabi_dadd+0x17a>
    25bc:	0264      	lsls	r4, r4, #9
    25be:	0a65      	lsrs	r5, r4, #9
    25c0:	2d00      	cmp	r5, #0
    25c2:	d100      	bne.n	25c6 <__aeabi_dadd+0xbe>
    25c4:	e0df      	b.n	2786 <__aeabi_dadd+0x27e>
    25c6:	0028      	movs	r0, r5
    25c8:	f001 fc64 	bl	3e94 <__clzsi2>
    25cc:	0003      	movs	r3, r0
    25ce:	3b08      	subs	r3, #8
    25d0:	2b1f      	cmp	r3, #31
    25d2:	dd00      	ble.n	25d6 <__aeabi_dadd+0xce>
    25d4:	e0d2      	b.n	277c <__aeabi_dadd+0x274>
    25d6:	2220      	movs	r2, #32
    25d8:	003c      	movs	r4, r7
    25da:	1ad2      	subs	r2, r2, r3
    25dc:	409d      	lsls	r5, r3
    25de:	40d4      	lsrs	r4, r2
    25e0:	409f      	lsls	r7, r3
    25e2:	4325      	orrs	r5, r4
    25e4:	429e      	cmp	r6, r3
    25e6:	dd00      	ble.n	25ea <__aeabi_dadd+0xe2>
    25e8:	e0c4      	b.n	2774 <__aeabi_dadd+0x26c>
    25ea:	1b9e      	subs	r6, r3, r6
    25ec:	1c73      	adds	r3, r6, #1
    25ee:	2b1f      	cmp	r3, #31
    25f0:	dd00      	ble.n	25f4 <__aeabi_dadd+0xec>
    25f2:	e0f1      	b.n	27d8 <__aeabi_dadd+0x2d0>
    25f4:	2220      	movs	r2, #32
    25f6:	0038      	movs	r0, r7
    25f8:	0029      	movs	r1, r5
    25fa:	1ad2      	subs	r2, r2, r3
    25fc:	40d8      	lsrs	r0, r3
    25fe:	4091      	lsls	r1, r2
    2600:	4097      	lsls	r7, r2
    2602:	002c      	movs	r4, r5
    2604:	4301      	orrs	r1, r0
    2606:	1e78      	subs	r0, r7, #1
    2608:	4187      	sbcs	r7, r0
    260a:	40dc      	lsrs	r4, r3
    260c:	2600      	movs	r6, #0
    260e:	430f      	orrs	r7, r1
    2610:	077b      	lsls	r3, r7, #29
    2612:	d009      	beq.n	2628 <__aeabi_dadd+0x120>
    2614:	230f      	movs	r3, #15
    2616:	403b      	ands	r3, r7
    2618:	2b04      	cmp	r3, #4
    261a:	d005      	beq.n	2628 <__aeabi_dadd+0x120>
    261c:	1d3b      	adds	r3, r7, #4
    261e:	42bb      	cmp	r3, r7
    2620:	41bf      	sbcs	r7, r7
    2622:	427f      	negs	r7, r7
    2624:	19e4      	adds	r4, r4, r7
    2626:	001f      	movs	r7, r3
    2628:	0223      	lsls	r3, r4, #8
    262a:	d52c      	bpl.n	2686 <__aeabi_dadd+0x17e>
    262c:	4b96      	ldr	r3, [pc, #600]	; (2888 <__aeabi_dadd+0x380>)
    262e:	3601      	adds	r6, #1
    2630:	429e      	cmp	r6, r3
    2632:	d100      	bne.n	2636 <__aeabi_dadd+0x12e>
    2634:	e09a      	b.n	276c <__aeabi_dadd+0x264>
    2636:	4645      	mov	r5, r8
    2638:	4b94      	ldr	r3, [pc, #592]	; (288c <__aeabi_dadd+0x384>)
    263a:	08ff      	lsrs	r7, r7, #3
    263c:	401c      	ands	r4, r3
    263e:	0760      	lsls	r0, r4, #29
    2640:	0576      	lsls	r6, r6, #21
    2642:	0264      	lsls	r4, r4, #9
    2644:	4307      	orrs	r7, r0
    2646:	0b24      	lsrs	r4, r4, #12
    2648:	0d76      	lsrs	r6, r6, #21
    264a:	2100      	movs	r1, #0
    264c:	0324      	lsls	r4, r4, #12
    264e:	0b23      	lsrs	r3, r4, #12
    2650:	0d0c      	lsrs	r4, r1, #20
    2652:	4a8f      	ldr	r2, [pc, #572]	; (2890 <__aeabi_dadd+0x388>)
    2654:	0524      	lsls	r4, r4, #20
    2656:	431c      	orrs	r4, r3
    2658:	4014      	ands	r4, r2
    265a:	0533      	lsls	r3, r6, #20
    265c:	4323      	orrs	r3, r4
    265e:	005b      	lsls	r3, r3, #1
    2660:	07ed      	lsls	r5, r5, #31
    2662:	085b      	lsrs	r3, r3, #1
    2664:	432b      	orrs	r3, r5
    2666:	0038      	movs	r0, r7
    2668:	0019      	movs	r1, r3
    266a:	bc3c      	pop	{r2, r3, r4, r5}
    266c:	4690      	mov	r8, r2
    266e:	4699      	mov	r9, r3
    2670:	46a2      	mov	sl, r4
    2672:	46ab      	mov	fp, r5
    2674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2676:	4664      	mov	r4, ip
    2678:	4304      	orrs	r4, r0
    267a:	d100      	bne.n	267e <__aeabi_dadd+0x176>
    267c:	e211      	b.n	2aa2 <__aeabi_dadd+0x59a>
    267e:	0004      	movs	r4, r0
    2680:	4667      	mov	r7, ip
    2682:	077b      	lsls	r3, r7, #29
    2684:	d1c6      	bne.n	2614 <__aeabi_dadd+0x10c>
    2686:	4645      	mov	r5, r8
    2688:	0760      	lsls	r0, r4, #29
    268a:	08ff      	lsrs	r7, r7, #3
    268c:	4307      	orrs	r7, r0
    268e:	08e4      	lsrs	r4, r4, #3
    2690:	4b7d      	ldr	r3, [pc, #500]	; (2888 <__aeabi_dadd+0x380>)
    2692:	429e      	cmp	r6, r3
    2694:	d030      	beq.n	26f8 <__aeabi_dadd+0x1f0>
    2696:	0324      	lsls	r4, r4, #12
    2698:	0576      	lsls	r6, r6, #21
    269a:	0b24      	lsrs	r4, r4, #12
    269c:	0d76      	lsrs	r6, r6, #21
    269e:	e7d4      	b.n	264a <__aeabi_dadd+0x142>
    26a0:	1a33      	subs	r3, r6, r0
    26a2:	469a      	mov	sl, r3
    26a4:	2b00      	cmp	r3, #0
    26a6:	dd78      	ble.n	279a <__aeabi_dadd+0x292>
    26a8:	2800      	cmp	r0, #0
    26aa:	d031      	beq.n	2710 <__aeabi_dadd+0x208>
    26ac:	4876      	ldr	r0, [pc, #472]	; (2888 <__aeabi_dadd+0x380>)
    26ae:	4286      	cmp	r6, r0
    26b0:	d0ae      	beq.n	2610 <__aeabi_dadd+0x108>
    26b2:	2080      	movs	r0, #128	; 0x80
    26b4:	0400      	lsls	r0, r0, #16
    26b6:	4301      	orrs	r1, r0
    26b8:	4653      	mov	r3, sl
    26ba:	2b38      	cmp	r3, #56	; 0x38
    26bc:	dc00      	bgt.n	26c0 <__aeabi_dadd+0x1b8>
    26be:	e0e9      	b.n	2894 <__aeabi_dadd+0x38c>
    26c0:	430a      	orrs	r2, r1
    26c2:	1e51      	subs	r1, r2, #1
    26c4:	418a      	sbcs	r2, r1
    26c6:	2100      	movs	r1, #0
    26c8:	19d2      	adds	r2, r2, r7
    26ca:	42ba      	cmp	r2, r7
    26cc:	41bf      	sbcs	r7, r7
    26ce:	1909      	adds	r1, r1, r4
    26d0:	427c      	negs	r4, r7
    26d2:	0017      	movs	r7, r2
    26d4:	190c      	adds	r4, r1, r4
    26d6:	0223      	lsls	r3, r4, #8
    26d8:	d5d3      	bpl.n	2682 <__aeabi_dadd+0x17a>
    26da:	4b6b      	ldr	r3, [pc, #428]	; (2888 <__aeabi_dadd+0x380>)
    26dc:	3601      	adds	r6, #1
    26de:	429e      	cmp	r6, r3
    26e0:	d100      	bne.n	26e4 <__aeabi_dadd+0x1dc>
    26e2:	e13a      	b.n	295a <__aeabi_dadd+0x452>
    26e4:	2001      	movs	r0, #1
    26e6:	4b69      	ldr	r3, [pc, #420]	; (288c <__aeabi_dadd+0x384>)
    26e8:	401c      	ands	r4, r3
    26ea:	087b      	lsrs	r3, r7, #1
    26ec:	4007      	ands	r7, r0
    26ee:	431f      	orrs	r7, r3
    26f0:	07e0      	lsls	r0, r4, #31
    26f2:	4307      	orrs	r7, r0
    26f4:	0864      	lsrs	r4, r4, #1
    26f6:	e78b      	b.n	2610 <__aeabi_dadd+0x108>
    26f8:	0023      	movs	r3, r4
    26fa:	433b      	orrs	r3, r7
    26fc:	d100      	bne.n	2700 <__aeabi_dadd+0x1f8>
    26fe:	e1cb      	b.n	2a98 <__aeabi_dadd+0x590>
    2700:	2280      	movs	r2, #128	; 0x80
    2702:	0312      	lsls	r2, r2, #12
    2704:	4314      	orrs	r4, r2
    2706:	0324      	lsls	r4, r4, #12
    2708:	0b24      	lsrs	r4, r4, #12
    270a:	e79e      	b.n	264a <__aeabi_dadd+0x142>
    270c:	002e      	movs	r6, r5
    270e:	e77f      	b.n	2610 <__aeabi_dadd+0x108>
    2710:	0008      	movs	r0, r1
    2712:	4310      	orrs	r0, r2
    2714:	d100      	bne.n	2718 <__aeabi_dadd+0x210>
    2716:	e0b4      	b.n	2882 <__aeabi_dadd+0x37a>
    2718:	1e58      	subs	r0, r3, #1
    271a:	2800      	cmp	r0, #0
    271c:	d000      	beq.n	2720 <__aeabi_dadd+0x218>
    271e:	e0de      	b.n	28de <__aeabi_dadd+0x3d6>
    2720:	18ba      	adds	r2, r7, r2
    2722:	42ba      	cmp	r2, r7
    2724:	419b      	sbcs	r3, r3
    2726:	1864      	adds	r4, r4, r1
    2728:	425b      	negs	r3, r3
    272a:	18e4      	adds	r4, r4, r3
    272c:	0017      	movs	r7, r2
    272e:	2601      	movs	r6, #1
    2730:	0223      	lsls	r3, r4, #8
    2732:	d5a6      	bpl.n	2682 <__aeabi_dadd+0x17a>
    2734:	2602      	movs	r6, #2
    2736:	e7d5      	b.n	26e4 <__aeabi_dadd+0x1dc>
    2738:	2d00      	cmp	r5, #0
    273a:	d16e      	bne.n	281a <__aeabi_dadd+0x312>
    273c:	1c70      	adds	r0, r6, #1
    273e:	0540      	lsls	r0, r0, #21
    2740:	0d40      	lsrs	r0, r0, #21
    2742:	2801      	cmp	r0, #1
    2744:	dc00      	bgt.n	2748 <__aeabi_dadd+0x240>
    2746:	e0f9      	b.n	293c <__aeabi_dadd+0x434>
    2748:	1ab8      	subs	r0, r7, r2
    274a:	4684      	mov	ip, r0
    274c:	4287      	cmp	r7, r0
    274e:	4180      	sbcs	r0, r0
    2750:	1ae5      	subs	r5, r4, r3
    2752:	4240      	negs	r0, r0
    2754:	1a2d      	subs	r5, r5, r0
    2756:	0228      	lsls	r0, r5, #8
    2758:	d400      	bmi.n	275c <__aeabi_dadd+0x254>
    275a:	e089      	b.n	2870 <__aeabi_dadd+0x368>
    275c:	1bd7      	subs	r7, r2, r7
    275e:	42ba      	cmp	r2, r7
    2760:	4192      	sbcs	r2, r2
    2762:	1b1c      	subs	r4, r3, r4
    2764:	4252      	negs	r2, r2
    2766:	1aa5      	subs	r5, r4, r2
    2768:	46d8      	mov	r8, fp
    276a:	e729      	b.n	25c0 <__aeabi_dadd+0xb8>
    276c:	4645      	mov	r5, r8
    276e:	2400      	movs	r4, #0
    2770:	2700      	movs	r7, #0
    2772:	e76a      	b.n	264a <__aeabi_dadd+0x142>
    2774:	4c45      	ldr	r4, [pc, #276]	; (288c <__aeabi_dadd+0x384>)
    2776:	1af6      	subs	r6, r6, r3
    2778:	402c      	ands	r4, r5
    277a:	e749      	b.n	2610 <__aeabi_dadd+0x108>
    277c:	003d      	movs	r5, r7
    277e:	3828      	subs	r0, #40	; 0x28
    2780:	4085      	lsls	r5, r0
    2782:	2700      	movs	r7, #0
    2784:	e72e      	b.n	25e4 <__aeabi_dadd+0xdc>
    2786:	0038      	movs	r0, r7
    2788:	f001 fb84 	bl	3e94 <__clzsi2>
    278c:	3020      	adds	r0, #32
    278e:	e71d      	b.n	25cc <__aeabi_dadd+0xc4>
    2790:	430a      	orrs	r2, r1
    2792:	1e51      	subs	r1, r2, #1
    2794:	418a      	sbcs	r2, r1
    2796:	2100      	movs	r1, #0
    2798:	e707      	b.n	25aa <__aeabi_dadd+0xa2>
    279a:	2b00      	cmp	r3, #0
    279c:	d000      	beq.n	27a0 <__aeabi_dadd+0x298>
    279e:	e0f3      	b.n	2988 <__aeabi_dadd+0x480>
    27a0:	1c70      	adds	r0, r6, #1
    27a2:	0543      	lsls	r3, r0, #21
    27a4:	0d5b      	lsrs	r3, r3, #21
    27a6:	2b01      	cmp	r3, #1
    27a8:	dc00      	bgt.n	27ac <__aeabi_dadd+0x2a4>
    27aa:	e0ad      	b.n	2908 <__aeabi_dadd+0x400>
    27ac:	4b36      	ldr	r3, [pc, #216]	; (2888 <__aeabi_dadd+0x380>)
    27ae:	4298      	cmp	r0, r3
    27b0:	d100      	bne.n	27b4 <__aeabi_dadd+0x2ac>
    27b2:	e0d1      	b.n	2958 <__aeabi_dadd+0x450>
    27b4:	18ba      	adds	r2, r7, r2
    27b6:	42ba      	cmp	r2, r7
    27b8:	41bf      	sbcs	r7, r7
    27ba:	1864      	adds	r4, r4, r1
    27bc:	427f      	negs	r7, r7
    27be:	19e4      	adds	r4, r4, r7
    27c0:	07e7      	lsls	r7, r4, #31
    27c2:	0852      	lsrs	r2, r2, #1
    27c4:	4317      	orrs	r7, r2
    27c6:	0864      	lsrs	r4, r4, #1
    27c8:	0006      	movs	r6, r0
    27ca:	e721      	b.n	2610 <__aeabi_dadd+0x108>
    27cc:	482e      	ldr	r0, [pc, #184]	; (2888 <__aeabi_dadd+0x380>)
    27ce:	4285      	cmp	r5, r0
    27d0:	d100      	bne.n	27d4 <__aeabi_dadd+0x2cc>
    27d2:	e093      	b.n	28fc <__aeabi_dadd+0x3f4>
    27d4:	001d      	movs	r5, r3
    27d6:	e6d0      	b.n	257a <__aeabi_dadd+0x72>
    27d8:	0029      	movs	r1, r5
    27da:	3e1f      	subs	r6, #31
    27dc:	40f1      	lsrs	r1, r6
    27de:	2b20      	cmp	r3, #32
    27e0:	d100      	bne.n	27e4 <__aeabi_dadd+0x2dc>
    27e2:	e08d      	b.n	2900 <__aeabi_dadd+0x3f8>
    27e4:	2240      	movs	r2, #64	; 0x40
    27e6:	1ad3      	subs	r3, r2, r3
    27e8:	409d      	lsls	r5, r3
    27ea:	432f      	orrs	r7, r5
    27ec:	1e7d      	subs	r5, r7, #1
    27ee:	41af      	sbcs	r7, r5
    27f0:	2400      	movs	r4, #0
    27f2:	430f      	orrs	r7, r1
    27f4:	2600      	movs	r6, #0
    27f6:	e744      	b.n	2682 <__aeabi_dadd+0x17a>
    27f8:	002b      	movs	r3, r5
    27fa:	0008      	movs	r0, r1
    27fc:	3b20      	subs	r3, #32
    27fe:	40d8      	lsrs	r0, r3
    2800:	0003      	movs	r3, r0
    2802:	2d20      	cmp	r5, #32
    2804:	d100      	bne.n	2808 <__aeabi_dadd+0x300>
    2806:	e07d      	b.n	2904 <__aeabi_dadd+0x3fc>
    2808:	2040      	movs	r0, #64	; 0x40
    280a:	1b45      	subs	r5, r0, r5
    280c:	40a9      	lsls	r1, r5
    280e:	430a      	orrs	r2, r1
    2810:	1e51      	subs	r1, r2, #1
    2812:	418a      	sbcs	r2, r1
    2814:	2100      	movs	r1, #0
    2816:	431a      	orrs	r2, r3
    2818:	e6c7      	b.n	25aa <__aeabi_dadd+0xa2>
    281a:	2e00      	cmp	r6, #0
    281c:	d050      	beq.n	28c0 <__aeabi_dadd+0x3b8>
    281e:	4e1a      	ldr	r6, [pc, #104]	; (2888 <__aeabi_dadd+0x380>)
    2820:	42b0      	cmp	r0, r6
    2822:	d057      	beq.n	28d4 <__aeabi_dadd+0x3cc>
    2824:	2680      	movs	r6, #128	; 0x80
    2826:	426b      	negs	r3, r5
    2828:	4699      	mov	r9, r3
    282a:	0436      	lsls	r6, r6, #16
    282c:	4334      	orrs	r4, r6
    282e:	464b      	mov	r3, r9
    2830:	2b38      	cmp	r3, #56	; 0x38
    2832:	dd00      	ble.n	2836 <__aeabi_dadd+0x32e>
    2834:	e0d6      	b.n	29e4 <__aeabi_dadd+0x4dc>
    2836:	2b1f      	cmp	r3, #31
    2838:	dd00      	ble.n	283c <__aeabi_dadd+0x334>
    283a:	e135      	b.n	2aa8 <__aeabi_dadd+0x5a0>
    283c:	2620      	movs	r6, #32
    283e:	1af5      	subs	r5, r6, r3
    2840:	0026      	movs	r6, r4
    2842:	40ae      	lsls	r6, r5
    2844:	46b2      	mov	sl, r6
    2846:	003e      	movs	r6, r7
    2848:	40de      	lsrs	r6, r3
    284a:	46ac      	mov	ip, r5
    284c:	0035      	movs	r5, r6
    284e:	4656      	mov	r6, sl
    2850:	432e      	orrs	r6, r5
    2852:	4665      	mov	r5, ip
    2854:	40af      	lsls	r7, r5
    2856:	1e7d      	subs	r5, r7, #1
    2858:	41af      	sbcs	r7, r5
    285a:	40dc      	lsrs	r4, r3
    285c:	4337      	orrs	r7, r6
    285e:	1bd7      	subs	r7, r2, r7
    2860:	42ba      	cmp	r2, r7
    2862:	4192      	sbcs	r2, r2
    2864:	1b0c      	subs	r4, r1, r4
    2866:	4252      	negs	r2, r2
    2868:	1aa4      	subs	r4, r4, r2
    286a:	0006      	movs	r6, r0
    286c:	46d8      	mov	r8, fp
    286e:	e6a3      	b.n	25b8 <__aeabi_dadd+0xb0>
    2870:	4664      	mov	r4, ip
    2872:	4667      	mov	r7, ip
    2874:	432c      	orrs	r4, r5
    2876:	d000      	beq.n	287a <__aeabi_dadd+0x372>
    2878:	e6a2      	b.n	25c0 <__aeabi_dadd+0xb8>
    287a:	2500      	movs	r5, #0
    287c:	2600      	movs	r6, #0
    287e:	2700      	movs	r7, #0
    2880:	e706      	b.n	2690 <__aeabi_dadd+0x188>
    2882:	001e      	movs	r6, r3
    2884:	e6c4      	b.n	2610 <__aeabi_dadd+0x108>
    2886:	46c0      	nop			; (mov r8, r8)
    2888:	000007ff 	.word	0x000007ff
    288c:	ff7fffff 	.word	0xff7fffff
    2890:	800fffff 	.word	0x800fffff
    2894:	2b1f      	cmp	r3, #31
    2896:	dc63      	bgt.n	2960 <__aeabi_dadd+0x458>
    2898:	2020      	movs	r0, #32
    289a:	1ac3      	subs	r3, r0, r3
    289c:	0008      	movs	r0, r1
    289e:	4098      	lsls	r0, r3
    28a0:	469c      	mov	ip, r3
    28a2:	4683      	mov	fp, r0
    28a4:	4653      	mov	r3, sl
    28a6:	0010      	movs	r0, r2
    28a8:	40d8      	lsrs	r0, r3
    28aa:	0003      	movs	r3, r0
    28ac:	4658      	mov	r0, fp
    28ae:	4318      	orrs	r0, r3
    28b0:	4663      	mov	r3, ip
    28b2:	409a      	lsls	r2, r3
    28b4:	1e53      	subs	r3, r2, #1
    28b6:	419a      	sbcs	r2, r3
    28b8:	4653      	mov	r3, sl
    28ba:	4302      	orrs	r2, r0
    28bc:	40d9      	lsrs	r1, r3
    28be:	e703      	b.n	26c8 <__aeabi_dadd+0x1c0>
    28c0:	0026      	movs	r6, r4
    28c2:	433e      	orrs	r6, r7
    28c4:	d006      	beq.n	28d4 <__aeabi_dadd+0x3cc>
    28c6:	43eb      	mvns	r3, r5
    28c8:	4699      	mov	r9, r3
    28ca:	2b00      	cmp	r3, #0
    28cc:	d0c7      	beq.n	285e <__aeabi_dadd+0x356>
    28ce:	4e94      	ldr	r6, [pc, #592]	; (2b20 <__aeabi_dadd+0x618>)
    28d0:	42b0      	cmp	r0, r6
    28d2:	d1ac      	bne.n	282e <__aeabi_dadd+0x326>
    28d4:	000c      	movs	r4, r1
    28d6:	0017      	movs	r7, r2
    28d8:	0006      	movs	r6, r0
    28da:	46d8      	mov	r8, fp
    28dc:	e698      	b.n	2610 <__aeabi_dadd+0x108>
    28de:	4b90      	ldr	r3, [pc, #576]	; (2b20 <__aeabi_dadd+0x618>)
    28e0:	459a      	cmp	sl, r3
    28e2:	d00b      	beq.n	28fc <__aeabi_dadd+0x3f4>
    28e4:	4682      	mov	sl, r0
    28e6:	e6e7      	b.n	26b8 <__aeabi_dadd+0x1b0>
    28e8:	2800      	cmp	r0, #0
    28ea:	d000      	beq.n	28ee <__aeabi_dadd+0x3e6>
    28ec:	e09e      	b.n	2a2c <__aeabi_dadd+0x524>
    28ee:	0018      	movs	r0, r3
    28f0:	4310      	orrs	r0, r2
    28f2:	d100      	bne.n	28f6 <__aeabi_dadd+0x3ee>
    28f4:	e0e9      	b.n	2aca <__aeabi_dadd+0x5c2>
    28f6:	001c      	movs	r4, r3
    28f8:	0017      	movs	r7, r2
    28fa:	46d8      	mov	r8, fp
    28fc:	4e88      	ldr	r6, [pc, #544]	; (2b20 <__aeabi_dadd+0x618>)
    28fe:	e687      	b.n	2610 <__aeabi_dadd+0x108>
    2900:	2500      	movs	r5, #0
    2902:	e772      	b.n	27ea <__aeabi_dadd+0x2e2>
    2904:	2100      	movs	r1, #0
    2906:	e782      	b.n	280e <__aeabi_dadd+0x306>
    2908:	0023      	movs	r3, r4
    290a:	433b      	orrs	r3, r7
    290c:	2e00      	cmp	r6, #0
    290e:	d000      	beq.n	2912 <__aeabi_dadd+0x40a>
    2910:	e0ab      	b.n	2a6a <__aeabi_dadd+0x562>
    2912:	2b00      	cmp	r3, #0
    2914:	d100      	bne.n	2918 <__aeabi_dadd+0x410>
    2916:	e0e7      	b.n	2ae8 <__aeabi_dadd+0x5e0>
    2918:	000b      	movs	r3, r1
    291a:	4313      	orrs	r3, r2
    291c:	d100      	bne.n	2920 <__aeabi_dadd+0x418>
    291e:	e677      	b.n	2610 <__aeabi_dadd+0x108>
    2920:	18ba      	adds	r2, r7, r2
    2922:	42ba      	cmp	r2, r7
    2924:	41bf      	sbcs	r7, r7
    2926:	1864      	adds	r4, r4, r1
    2928:	427f      	negs	r7, r7
    292a:	19e4      	adds	r4, r4, r7
    292c:	0223      	lsls	r3, r4, #8
    292e:	d400      	bmi.n	2932 <__aeabi_dadd+0x42a>
    2930:	e0f2      	b.n	2b18 <__aeabi_dadd+0x610>
    2932:	4b7c      	ldr	r3, [pc, #496]	; (2b24 <__aeabi_dadd+0x61c>)
    2934:	0017      	movs	r7, r2
    2936:	401c      	ands	r4, r3
    2938:	0006      	movs	r6, r0
    293a:	e669      	b.n	2610 <__aeabi_dadd+0x108>
    293c:	0020      	movs	r0, r4
    293e:	4338      	orrs	r0, r7
    2940:	2e00      	cmp	r6, #0
    2942:	d1d1      	bne.n	28e8 <__aeabi_dadd+0x3e0>
    2944:	2800      	cmp	r0, #0
    2946:	d15b      	bne.n	2a00 <__aeabi_dadd+0x4f8>
    2948:	001c      	movs	r4, r3
    294a:	4314      	orrs	r4, r2
    294c:	d100      	bne.n	2950 <__aeabi_dadd+0x448>
    294e:	e0a8      	b.n	2aa2 <__aeabi_dadd+0x59a>
    2950:	001c      	movs	r4, r3
    2952:	0017      	movs	r7, r2
    2954:	46d8      	mov	r8, fp
    2956:	e65b      	b.n	2610 <__aeabi_dadd+0x108>
    2958:	0006      	movs	r6, r0
    295a:	2400      	movs	r4, #0
    295c:	2700      	movs	r7, #0
    295e:	e697      	b.n	2690 <__aeabi_dadd+0x188>
    2960:	4650      	mov	r0, sl
    2962:	000b      	movs	r3, r1
    2964:	3820      	subs	r0, #32
    2966:	40c3      	lsrs	r3, r0
    2968:	4699      	mov	r9, r3
    296a:	4653      	mov	r3, sl
    296c:	2b20      	cmp	r3, #32
    296e:	d100      	bne.n	2972 <__aeabi_dadd+0x46a>
    2970:	e095      	b.n	2a9e <__aeabi_dadd+0x596>
    2972:	2340      	movs	r3, #64	; 0x40
    2974:	4650      	mov	r0, sl
    2976:	1a1b      	subs	r3, r3, r0
    2978:	4099      	lsls	r1, r3
    297a:	430a      	orrs	r2, r1
    297c:	1e51      	subs	r1, r2, #1
    297e:	418a      	sbcs	r2, r1
    2980:	464b      	mov	r3, r9
    2982:	2100      	movs	r1, #0
    2984:	431a      	orrs	r2, r3
    2986:	e69f      	b.n	26c8 <__aeabi_dadd+0x1c0>
    2988:	2e00      	cmp	r6, #0
    298a:	d130      	bne.n	29ee <__aeabi_dadd+0x4e6>
    298c:	0026      	movs	r6, r4
    298e:	433e      	orrs	r6, r7
    2990:	d067      	beq.n	2a62 <__aeabi_dadd+0x55a>
    2992:	43db      	mvns	r3, r3
    2994:	469a      	mov	sl, r3
    2996:	2b00      	cmp	r3, #0
    2998:	d01c      	beq.n	29d4 <__aeabi_dadd+0x4cc>
    299a:	4e61      	ldr	r6, [pc, #388]	; (2b20 <__aeabi_dadd+0x618>)
    299c:	42b0      	cmp	r0, r6
    299e:	d060      	beq.n	2a62 <__aeabi_dadd+0x55a>
    29a0:	4653      	mov	r3, sl
    29a2:	2b38      	cmp	r3, #56	; 0x38
    29a4:	dd00      	ble.n	29a8 <__aeabi_dadd+0x4a0>
    29a6:	e096      	b.n	2ad6 <__aeabi_dadd+0x5ce>
    29a8:	2b1f      	cmp	r3, #31
    29aa:	dd00      	ble.n	29ae <__aeabi_dadd+0x4a6>
    29ac:	e09f      	b.n	2aee <__aeabi_dadd+0x5e6>
    29ae:	2620      	movs	r6, #32
    29b0:	1af3      	subs	r3, r6, r3
    29b2:	0026      	movs	r6, r4
    29b4:	409e      	lsls	r6, r3
    29b6:	469c      	mov	ip, r3
    29b8:	46b3      	mov	fp, r6
    29ba:	4653      	mov	r3, sl
    29bc:	003e      	movs	r6, r7
    29be:	40de      	lsrs	r6, r3
    29c0:	0033      	movs	r3, r6
    29c2:	465e      	mov	r6, fp
    29c4:	431e      	orrs	r6, r3
    29c6:	4663      	mov	r3, ip
    29c8:	409f      	lsls	r7, r3
    29ca:	1e7b      	subs	r3, r7, #1
    29cc:	419f      	sbcs	r7, r3
    29ce:	4653      	mov	r3, sl
    29d0:	40dc      	lsrs	r4, r3
    29d2:	4337      	orrs	r7, r6
    29d4:	18bf      	adds	r7, r7, r2
    29d6:	4297      	cmp	r7, r2
    29d8:	4192      	sbcs	r2, r2
    29da:	1864      	adds	r4, r4, r1
    29dc:	4252      	negs	r2, r2
    29de:	18a4      	adds	r4, r4, r2
    29e0:	0006      	movs	r6, r0
    29e2:	e678      	b.n	26d6 <__aeabi_dadd+0x1ce>
    29e4:	4327      	orrs	r7, r4
    29e6:	1e7c      	subs	r4, r7, #1
    29e8:	41a7      	sbcs	r7, r4
    29ea:	2400      	movs	r4, #0
    29ec:	e737      	b.n	285e <__aeabi_dadd+0x356>
    29ee:	4e4c      	ldr	r6, [pc, #304]	; (2b20 <__aeabi_dadd+0x618>)
    29f0:	42b0      	cmp	r0, r6
    29f2:	d036      	beq.n	2a62 <__aeabi_dadd+0x55a>
    29f4:	2680      	movs	r6, #128	; 0x80
    29f6:	425b      	negs	r3, r3
    29f8:	0436      	lsls	r6, r6, #16
    29fa:	469a      	mov	sl, r3
    29fc:	4334      	orrs	r4, r6
    29fe:	e7cf      	b.n	29a0 <__aeabi_dadd+0x498>
    2a00:	0018      	movs	r0, r3
    2a02:	4310      	orrs	r0, r2
    2a04:	d100      	bne.n	2a08 <__aeabi_dadd+0x500>
    2a06:	e603      	b.n	2610 <__aeabi_dadd+0x108>
    2a08:	1ab8      	subs	r0, r7, r2
    2a0a:	4684      	mov	ip, r0
    2a0c:	4567      	cmp	r7, ip
    2a0e:	41ad      	sbcs	r5, r5
    2a10:	1ae0      	subs	r0, r4, r3
    2a12:	426d      	negs	r5, r5
    2a14:	1b40      	subs	r0, r0, r5
    2a16:	0205      	lsls	r5, r0, #8
    2a18:	d400      	bmi.n	2a1c <__aeabi_dadd+0x514>
    2a1a:	e62c      	b.n	2676 <__aeabi_dadd+0x16e>
    2a1c:	1bd7      	subs	r7, r2, r7
    2a1e:	42ba      	cmp	r2, r7
    2a20:	4192      	sbcs	r2, r2
    2a22:	1b1c      	subs	r4, r3, r4
    2a24:	4252      	negs	r2, r2
    2a26:	1aa4      	subs	r4, r4, r2
    2a28:	46d8      	mov	r8, fp
    2a2a:	e5f1      	b.n	2610 <__aeabi_dadd+0x108>
    2a2c:	0018      	movs	r0, r3
    2a2e:	4310      	orrs	r0, r2
    2a30:	d100      	bne.n	2a34 <__aeabi_dadd+0x52c>
    2a32:	e763      	b.n	28fc <__aeabi_dadd+0x3f4>
    2a34:	08f8      	lsrs	r0, r7, #3
    2a36:	0767      	lsls	r7, r4, #29
    2a38:	4307      	orrs	r7, r0
    2a3a:	2080      	movs	r0, #128	; 0x80
    2a3c:	08e4      	lsrs	r4, r4, #3
    2a3e:	0300      	lsls	r0, r0, #12
    2a40:	4204      	tst	r4, r0
    2a42:	d008      	beq.n	2a56 <__aeabi_dadd+0x54e>
    2a44:	08dd      	lsrs	r5, r3, #3
    2a46:	4205      	tst	r5, r0
    2a48:	d105      	bne.n	2a56 <__aeabi_dadd+0x54e>
    2a4a:	08d2      	lsrs	r2, r2, #3
    2a4c:	0759      	lsls	r1, r3, #29
    2a4e:	4311      	orrs	r1, r2
    2a50:	000f      	movs	r7, r1
    2a52:	002c      	movs	r4, r5
    2a54:	46d8      	mov	r8, fp
    2a56:	0f7b      	lsrs	r3, r7, #29
    2a58:	00e4      	lsls	r4, r4, #3
    2a5a:	431c      	orrs	r4, r3
    2a5c:	00ff      	lsls	r7, r7, #3
    2a5e:	4e30      	ldr	r6, [pc, #192]	; (2b20 <__aeabi_dadd+0x618>)
    2a60:	e5d6      	b.n	2610 <__aeabi_dadd+0x108>
    2a62:	000c      	movs	r4, r1
    2a64:	0017      	movs	r7, r2
    2a66:	0006      	movs	r6, r0
    2a68:	e5d2      	b.n	2610 <__aeabi_dadd+0x108>
    2a6a:	2b00      	cmp	r3, #0
    2a6c:	d038      	beq.n	2ae0 <__aeabi_dadd+0x5d8>
    2a6e:	000b      	movs	r3, r1
    2a70:	4313      	orrs	r3, r2
    2a72:	d100      	bne.n	2a76 <__aeabi_dadd+0x56e>
    2a74:	e742      	b.n	28fc <__aeabi_dadd+0x3f4>
    2a76:	08f8      	lsrs	r0, r7, #3
    2a78:	0767      	lsls	r7, r4, #29
    2a7a:	4307      	orrs	r7, r0
    2a7c:	2080      	movs	r0, #128	; 0x80
    2a7e:	08e4      	lsrs	r4, r4, #3
    2a80:	0300      	lsls	r0, r0, #12
    2a82:	4204      	tst	r4, r0
    2a84:	d0e7      	beq.n	2a56 <__aeabi_dadd+0x54e>
    2a86:	08cb      	lsrs	r3, r1, #3
    2a88:	4203      	tst	r3, r0
    2a8a:	d1e4      	bne.n	2a56 <__aeabi_dadd+0x54e>
    2a8c:	08d2      	lsrs	r2, r2, #3
    2a8e:	0749      	lsls	r1, r1, #29
    2a90:	4311      	orrs	r1, r2
    2a92:	000f      	movs	r7, r1
    2a94:	001c      	movs	r4, r3
    2a96:	e7de      	b.n	2a56 <__aeabi_dadd+0x54e>
    2a98:	2700      	movs	r7, #0
    2a9a:	2400      	movs	r4, #0
    2a9c:	e5d5      	b.n	264a <__aeabi_dadd+0x142>
    2a9e:	2100      	movs	r1, #0
    2aa0:	e76b      	b.n	297a <__aeabi_dadd+0x472>
    2aa2:	2500      	movs	r5, #0
    2aa4:	2700      	movs	r7, #0
    2aa6:	e5f3      	b.n	2690 <__aeabi_dadd+0x188>
    2aa8:	464e      	mov	r6, r9
    2aaa:	0025      	movs	r5, r4
    2aac:	3e20      	subs	r6, #32
    2aae:	40f5      	lsrs	r5, r6
    2ab0:	464b      	mov	r3, r9
    2ab2:	002e      	movs	r6, r5
    2ab4:	2b20      	cmp	r3, #32
    2ab6:	d02d      	beq.n	2b14 <__aeabi_dadd+0x60c>
    2ab8:	2540      	movs	r5, #64	; 0x40
    2aba:	1aed      	subs	r5, r5, r3
    2abc:	40ac      	lsls	r4, r5
    2abe:	4327      	orrs	r7, r4
    2ac0:	1e7c      	subs	r4, r7, #1
    2ac2:	41a7      	sbcs	r7, r4
    2ac4:	2400      	movs	r4, #0
    2ac6:	4337      	orrs	r7, r6
    2ac8:	e6c9      	b.n	285e <__aeabi_dadd+0x356>
    2aca:	2480      	movs	r4, #128	; 0x80
    2acc:	2500      	movs	r5, #0
    2ace:	0324      	lsls	r4, r4, #12
    2ad0:	4e13      	ldr	r6, [pc, #76]	; (2b20 <__aeabi_dadd+0x618>)
    2ad2:	2700      	movs	r7, #0
    2ad4:	e5dc      	b.n	2690 <__aeabi_dadd+0x188>
    2ad6:	4327      	orrs	r7, r4
    2ad8:	1e7c      	subs	r4, r7, #1
    2ada:	41a7      	sbcs	r7, r4
    2adc:	2400      	movs	r4, #0
    2ade:	e779      	b.n	29d4 <__aeabi_dadd+0x4cc>
    2ae0:	000c      	movs	r4, r1
    2ae2:	0017      	movs	r7, r2
    2ae4:	4e0e      	ldr	r6, [pc, #56]	; (2b20 <__aeabi_dadd+0x618>)
    2ae6:	e593      	b.n	2610 <__aeabi_dadd+0x108>
    2ae8:	000c      	movs	r4, r1
    2aea:	0017      	movs	r7, r2
    2aec:	e590      	b.n	2610 <__aeabi_dadd+0x108>
    2aee:	4656      	mov	r6, sl
    2af0:	0023      	movs	r3, r4
    2af2:	3e20      	subs	r6, #32
    2af4:	40f3      	lsrs	r3, r6
    2af6:	4699      	mov	r9, r3
    2af8:	4653      	mov	r3, sl
    2afa:	2b20      	cmp	r3, #32
    2afc:	d00e      	beq.n	2b1c <__aeabi_dadd+0x614>
    2afe:	2340      	movs	r3, #64	; 0x40
    2b00:	4656      	mov	r6, sl
    2b02:	1b9b      	subs	r3, r3, r6
    2b04:	409c      	lsls	r4, r3
    2b06:	4327      	orrs	r7, r4
    2b08:	1e7c      	subs	r4, r7, #1
    2b0a:	41a7      	sbcs	r7, r4
    2b0c:	464b      	mov	r3, r9
    2b0e:	2400      	movs	r4, #0
    2b10:	431f      	orrs	r7, r3
    2b12:	e75f      	b.n	29d4 <__aeabi_dadd+0x4cc>
    2b14:	2400      	movs	r4, #0
    2b16:	e7d2      	b.n	2abe <__aeabi_dadd+0x5b6>
    2b18:	0017      	movs	r7, r2
    2b1a:	e5b2      	b.n	2682 <__aeabi_dadd+0x17a>
    2b1c:	2400      	movs	r4, #0
    2b1e:	e7f2      	b.n	2b06 <__aeabi_dadd+0x5fe>
    2b20:	000007ff 	.word	0x000007ff
    2b24:	ff7fffff 	.word	0xff7fffff

00002b28 <__aeabi_ddiv>:
    2b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b2a:	4657      	mov	r7, sl
    2b2c:	4645      	mov	r5, r8
    2b2e:	46de      	mov	lr, fp
    2b30:	464e      	mov	r6, r9
    2b32:	b5e0      	push	{r5, r6, r7, lr}
    2b34:	004c      	lsls	r4, r1, #1
    2b36:	030e      	lsls	r6, r1, #12
    2b38:	b087      	sub	sp, #28
    2b3a:	4683      	mov	fp, r0
    2b3c:	4692      	mov	sl, r2
    2b3e:	001d      	movs	r5, r3
    2b40:	4680      	mov	r8, r0
    2b42:	0b36      	lsrs	r6, r6, #12
    2b44:	0d64      	lsrs	r4, r4, #21
    2b46:	0fcf      	lsrs	r7, r1, #31
    2b48:	2c00      	cmp	r4, #0
    2b4a:	d04f      	beq.n	2bec <__aeabi_ddiv+0xc4>
    2b4c:	4b6f      	ldr	r3, [pc, #444]	; (2d0c <__aeabi_ddiv+0x1e4>)
    2b4e:	429c      	cmp	r4, r3
    2b50:	d035      	beq.n	2bbe <__aeabi_ddiv+0x96>
    2b52:	2380      	movs	r3, #128	; 0x80
    2b54:	0f42      	lsrs	r2, r0, #29
    2b56:	041b      	lsls	r3, r3, #16
    2b58:	00f6      	lsls	r6, r6, #3
    2b5a:	4313      	orrs	r3, r2
    2b5c:	4333      	orrs	r3, r6
    2b5e:	4699      	mov	r9, r3
    2b60:	00c3      	lsls	r3, r0, #3
    2b62:	4698      	mov	r8, r3
    2b64:	4b6a      	ldr	r3, [pc, #424]	; (2d10 <__aeabi_ddiv+0x1e8>)
    2b66:	2600      	movs	r6, #0
    2b68:	469c      	mov	ip, r3
    2b6a:	2300      	movs	r3, #0
    2b6c:	4464      	add	r4, ip
    2b6e:	9303      	str	r3, [sp, #12]
    2b70:	032b      	lsls	r3, r5, #12
    2b72:	0b1b      	lsrs	r3, r3, #12
    2b74:	469b      	mov	fp, r3
    2b76:	006b      	lsls	r3, r5, #1
    2b78:	0fed      	lsrs	r5, r5, #31
    2b7a:	4650      	mov	r0, sl
    2b7c:	0d5b      	lsrs	r3, r3, #21
    2b7e:	9501      	str	r5, [sp, #4]
    2b80:	d05e      	beq.n	2c40 <__aeabi_ddiv+0x118>
    2b82:	4a62      	ldr	r2, [pc, #392]	; (2d0c <__aeabi_ddiv+0x1e4>)
    2b84:	4293      	cmp	r3, r2
    2b86:	d053      	beq.n	2c30 <__aeabi_ddiv+0x108>
    2b88:	465a      	mov	r2, fp
    2b8a:	00d1      	lsls	r1, r2, #3
    2b8c:	2280      	movs	r2, #128	; 0x80
    2b8e:	0f40      	lsrs	r0, r0, #29
    2b90:	0412      	lsls	r2, r2, #16
    2b92:	4302      	orrs	r2, r0
    2b94:	430a      	orrs	r2, r1
    2b96:	4693      	mov	fp, r2
    2b98:	4652      	mov	r2, sl
    2b9a:	00d1      	lsls	r1, r2, #3
    2b9c:	4a5c      	ldr	r2, [pc, #368]	; (2d10 <__aeabi_ddiv+0x1e8>)
    2b9e:	4694      	mov	ip, r2
    2ba0:	2200      	movs	r2, #0
    2ba2:	4463      	add	r3, ip
    2ba4:	0038      	movs	r0, r7
    2ba6:	4068      	eors	r0, r5
    2ba8:	4684      	mov	ip, r0
    2baa:	9002      	str	r0, [sp, #8]
    2bac:	1ae4      	subs	r4, r4, r3
    2bae:	4316      	orrs	r6, r2
    2bb0:	2e0f      	cmp	r6, #15
    2bb2:	d900      	bls.n	2bb6 <__aeabi_ddiv+0x8e>
    2bb4:	e0b4      	b.n	2d20 <__aeabi_ddiv+0x1f8>
    2bb6:	4b57      	ldr	r3, [pc, #348]	; (2d14 <__aeabi_ddiv+0x1ec>)
    2bb8:	00b6      	lsls	r6, r6, #2
    2bba:	599b      	ldr	r3, [r3, r6]
    2bbc:	469f      	mov	pc, r3
    2bbe:	0003      	movs	r3, r0
    2bc0:	4333      	orrs	r3, r6
    2bc2:	4699      	mov	r9, r3
    2bc4:	d16c      	bne.n	2ca0 <__aeabi_ddiv+0x178>
    2bc6:	2300      	movs	r3, #0
    2bc8:	4698      	mov	r8, r3
    2bca:	3302      	adds	r3, #2
    2bcc:	2608      	movs	r6, #8
    2bce:	9303      	str	r3, [sp, #12]
    2bd0:	e7ce      	b.n	2b70 <__aeabi_ddiv+0x48>
    2bd2:	46cb      	mov	fp, r9
    2bd4:	4641      	mov	r1, r8
    2bd6:	9a03      	ldr	r2, [sp, #12]
    2bd8:	9701      	str	r7, [sp, #4]
    2bda:	2a02      	cmp	r2, #2
    2bdc:	d165      	bne.n	2caa <__aeabi_ddiv+0x182>
    2bde:	9b01      	ldr	r3, [sp, #4]
    2be0:	4c4a      	ldr	r4, [pc, #296]	; (2d0c <__aeabi_ddiv+0x1e4>)
    2be2:	469c      	mov	ip, r3
    2be4:	2300      	movs	r3, #0
    2be6:	2200      	movs	r2, #0
    2be8:	4698      	mov	r8, r3
    2bea:	e06b      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    2bec:	0003      	movs	r3, r0
    2bee:	4333      	orrs	r3, r6
    2bf0:	4699      	mov	r9, r3
    2bf2:	d04e      	beq.n	2c92 <__aeabi_ddiv+0x16a>
    2bf4:	2e00      	cmp	r6, #0
    2bf6:	d100      	bne.n	2bfa <__aeabi_ddiv+0xd2>
    2bf8:	e1bc      	b.n	2f74 <__aeabi_ddiv+0x44c>
    2bfa:	0030      	movs	r0, r6
    2bfc:	f001 f94a 	bl	3e94 <__clzsi2>
    2c00:	0003      	movs	r3, r0
    2c02:	3b0b      	subs	r3, #11
    2c04:	2b1c      	cmp	r3, #28
    2c06:	dd00      	ble.n	2c0a <__aeabi_ddiv+0xe2>
    2c08:	e1ac      	b.n	2f64 <__aeabi_ddiv+0x43c>
    2c0a:	221d      	movs	r2, #29
    2c0c:	1ad3      	subs	r3, r2, r3
    2c0e:	465a      	mov	r2, fp
    2c10:	0001      	movs	r1, r0
    2c12:	40da      	lsrs	r2, r3
    2c14:	3908      	subs	r1, #8
    2c16:	408e      	lsls	r6, r1
    2c18:	0013      	movs	r3, r2
    2c1a:	4333      	orrs	r3, r6
    2c1c:	4699      	mov	r9, r3
    2c1e:	465b      	mov	r3, fp
    2c20:	408b      	lsls	r3, r1
    2c22:	4698      	mov	r8, r3
    2c24:	2300      	movs	r3, #0
    2c26:	4c3c      	ldr	r4, [pc, #240]	; (2d18 <__aeabi_ddiv+0x1f0>)
    2c28:	2600      	movs	r6, #0
    2c2a:	1a24      	subs	r4, r4, r0
    2c2c:	9303      	str	r3, [sp, #12]
    2c2e:	e79f      	b.n	2b70 <__aeabi_ddiv+0x48>
    2c30:	4651      	mov	r1, sl
    2c32:	465a      	mov	r2, fp
    2c34:	4311      	orrs	r1, r2
    2c36:	d129      	bne.n	2c8c <__aeabi_ddiv+0x164>
    2c38:	2200      	movs	r2, #0
    2c3a:	4693      	mov	fp, r2
    2c3c:	3202      	adds	r2, #2
    2c3e:	e7b1      	b.n	2ba4 <__aeabi_ddiv+0x7c>
    2c40:	4659      	mov	r1, fp
    2c42:	4301      	orrs	r1, r0
    2c44:	d01e      	beq.n	2c84 <__aeabi_ddiv+0x15c>
    2c46:	465b      	mov	r3, fp
    2c48:	2b00      	cmp	r3, #0
    2c4a:	d100      	bne.n	2c4e <__aeabi_ddiv+0x126>
    2c4c:	e19e      	b.n	2f8c <__aeabi_ddiv+0x464>
    2c4e:	4658      	mov	r0, fp
    2c50:	f001 f920 	bl	3e94 <__clzsi2>
    2c54:	0003      	movs	r3, r0
    2c56:	3b0b      	subs	r3, #11
    2c58:	2b1c      	cmp	r3, #28
    2c5a:	dd00      	ble.n	2c5e <__aeabi_ddiv+0x136>
    2c5c:	e18f      	b.n	2f7e <__aeabi_ddiv+0x456>
    2c5e:	0002      	movs	r2, r0
    2c60:	4659      	mov	r1, fp
    2c62:	3a08      	subs	r2, #8
    2c64:	4091      	lsls	r1, r2
    2c66:	468b      	mov	fp, r1
    2c68:	211d      	movs	r1, #29
    2c6a:	1acb      	subs	r3, r1, r3
    2c6c:	4651      	mov	r1, sl
    2c6e:	40d9      	lsrs	r1, r3
    2c70:	000b      	movs	r3, r1
    2c72:	4659      	mov	r1, fp
    2c74:	430b      	orrs	r3, r1
    2c76:	4651      	mov	r1, sl
    2c78:	469b      	mov	fp, r3
    2c7a:	4091      	lsls	r1, r2
    2c7c:	4b26      	ldr	r3, [pc, #152]	; (2d18 <__aeabi_ddiv+0x1f0>)
    2c7e:	2200      	movs	r2, #0
    2c80:	1a1b      	subs	r3, r3, r0
    2c82:	e78f      	b.n	2ba4 <__aeabi_ddiv+0x7c>
    2c84:	2300      	movs	r3, #0
    2c86:	2201      	movs	r2, #1
    2c88:	469b      	mov	fp, r3
    2c8a:	e78b      	b.n	2ba4 <__aeabi_ddiv+0x7c>
    2c8c:	4651      	mov	r1, sl
    2c8e:	2203      	movs	r2, #3
    2c90:	e788      	b.n	2ba4 <__aeabi_ddiv+0x7c>
    2c92:	2300      	movs	r3, #0
    2c94:	4698      	mov	r8, r3
    2c96:	3301      	adds	r3, #1
    2c98:	2604      	movs	r6, #4
    2c9a:	2400      	movs	r4, #0
    2c9c:	9303      	str	r3, [sp, #12]
    2c9e:	e767      	b.n	2b70 <__aeabi_ddiv+0x48>
    2ca0:	2303      	movs	r3, #3
    2ca2:	46b1      	mov	r9, r6
    2ca4:	9303      	str	r3, [sp, #12]
    2ca6:	260c      	movs	r6, #12
    2ca8:	e762      	b.n	2b70 <__aeabi_ddiv+0x48>
    2caa:	2a03      	cmp	r2, #3
    2cac:	d100      	bne.n	2cb0 <__aeabi_ddiv+0x188>
    2cae:	e25c      	b.n	316a <__aeabi_ddiv+0x642>
    2cb0:	9b01      	ldr	r3, [sp, #4]
    2cb2:	2a01      	cmp	r2, #1
    2cb4:	d000      	beq.n	2cb8 <__aeabi_ddiv+0x190>
    2cb6:	e1e4      	b.n	3082 <__aeabi_ddiv+0x55a>
    2cb8:	4013      	ands	r3, r2
    2cba:	469c      	mov	ip, r3
    2cbc:	2300      	movs	r3, #0
    2cbe:	2400      	movs	r4, #0
    2cc0:	2200      	movs	r2, #0
    2cc2:	4698      	mov	r8, r3
    2cc4:	2100      	movs	r1, #0
    2cc6:	0312      	lsls	r2, r2, #12
    2cc8:	0b13      	lsrs	r3, r2, #12
    2cca:	0d0a      	lsrs	r2, r1, #20
    2ccc:	0512      	lsls	r2, r2, #20
    2cce:	431a      	orrs	r2, r3
    2cd0:	0523      	lsls	r3, r4, #20
    2cd2:	4c12      	ldr	r4, [pc, #72]	; (2d1c <__aeabi_ddiv+0x1f4>)
    2cd4:	4640      	mov	r0, r8
    2cd6:	4022      	ands	r2, r4
    2cd8:	4313      	orrs	r3, r2
    2cda:	4662      	mov	r2, ip
    2cdc:	005b      	lsls	r3, r3, #1
    2cde:	07d2      	lsls	r2, r2, #31
    2ce0:	085b      	lsrs	r3, r3, #1
    2ce2:	4313      	orrs	r3, r2
    2ce4:	0019      	movs	r1, r3
    2ce6:	b007      	add	sp, #28
    2ce8:	bc3c      	pop	{r2, r3, r4, r5}
    2cea:	4690      	mov	r8, r2
    2cec:	4699      	mov	r9, r3
    2cee:	46a2      	mov	sl, r4
    2cf0:	46ab      	mov	fp, r5
    2cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cf4:	2300      	movs	r3, #0
    2cf6:	2280      	movs	r2, #128	; 0x80
    2cf8:	469c      	mov	ip, r3
    2cfa:	0312      	lsls	r2, r2, #12
    2cfc:	4698      	mov	r8, r3
    2cfe:	4c03      	ldr	r4, [pc, #12]	; (2d0c <__aeabi_ddiv+0x1e4>)
    2d00:	e7e0      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    2d02:	2300      	movs	r3, #0
    2d04:	4c01      	ldr	r4, [pc, #4]	; (2d0c <__aeabi_ddiv+0x1e4>)
    2d06:	2200      	movs	r2, #0
    2d08:	4698      	mov	r8, r3
    2d0a:	e7db      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    2d0c:	000007ff 	.word	0x000007ff
    2d10:	fffffc01 	.word	0xfffffc01
    2d14:	00004a1c 	.word	0x00004a1c
    2d18:	fffffc0d 	.word	0xfffffc0d
    2d1c:	800fffff 	.word	0x800fffff
    2d20:	45d9      	cmp	r9, fp
    2d22:	d900      	bls.n	2d26 <__aeabi_ddiv+0x1fe>
    2d24:	e139      	b.n	2f9a <__aeabi_ddiv+0x472>
    2d26:	d100      	bne.n	2d2a <__aeabi_ddiv+0x202>
    2d28:	e134      	b.n	2f94 <__aeabi_ddiv+0x46c>
    2d2a:	2300      	movs	r3, #0
    2d2c:	4646      	mov	r6, r8
    2d2e:	464d      	mov	r5, r9
    2d30:	469a      	mov	sl, r3
    2d32:	3c01      	subs	r4, #1
    2d34:	465b      	mov	r3, fp
    2d36:	0e0a      	lsrs	r2, r1, #24
    2d38:	021b      	lsls	r3, r3, #8
    2d3a:	431a      	orrs	r2, r3
    2d3c:	020b      	lsls	r3, r1, #8
    2d3e:	0c17      	lsrs	r7, r2, #16
    2d40:	9303      	str	r3, [sp, #12]
    2d42:	0413      	lsls	r3, r2, #16
    2d44:	0c1b      	lsrs	r3, r3, #16
    2d46:	0039      	movs	r1, r7
    2d48:	0028      	movs	r0, r5
    2d4a:	4690      	mov	r8, r2
    2d4c:	9301      	str	r3, [sp, #4]
    2d4e:	f7ff fa27 	bl	21a0 <__udivsi3>
    2d52:	0002      	movs	r2, r0
    2d54:	9b01      	ldr	r3, [sp, #4]
    2d56:	4683      	mov	fp, r0
    2d58:	435a      	muls	r2, r3
    2d5a:	0028      	movs	r0, r5
    2d5c:	0039      	movs	r1, r7
    2d5e:	4691      	mov	r9, r2
    2d60:	f7ff faa4 	bl	22ac <__aeabi_uidivmod>
    2d64:	0c35      	lsrs	r5, r6, #16
    2d66:	0409      	lsls	r1, r1, #16
    2d68:	430d      	orrs	r5, r1
    2d6a:	45a9      	cmp	r9, r5
    2d6c:	d90d      	bls.n	2d8a <__aeabi_ddiv+0x262>
    2d6e:	465b      	mov	r3, fp
    2d70:	4445      	add	r5, r8
    2d72:	3b01      	subs	r3, #1
    2d74:	45a8      	cmp	r8, r5
    2d76:	d900      	bls.n	2d7a <__aeabi_ddiv+0x252>
    2d78:	e13a      	b.n	2ff0 <__aeabi_ddiv+0x4c8>
    2d7a:	45a9      	cmp	r9, r5
    2d7c:	d800      	bhi.n	2d80 <__aeabi_ddiv+0x258>
    2d7e:	e137      	b.n	2ff0 <__aeabi_ddiv+0x4c8>
    2d80:	2302      	movs	r3, #2
    2d82:	425b      	negs	r3, r3
    2d84:	469c      	mov	ip, r3
    2d86:	4445      	add	r5, r8
    2d88:	44e3      	add	fp, ip
    2d8a:	464b      	mov	r3, r9
    2d8c:	1aeb      	subs	r3, r5, r3
    2d8e:	0039      	movs	r1, r7
    2d90:	0018      	movs	r0, r3
    2d92:	9304      	str	r3, [sp, #16]
    2d94:	f7ff fa04 	bl	21a0 <__udivsi3>
    2d98:	9b01      	ldr	r3, [sp, #4]
    2d9a:	0005      	movs	r5, r0
    2d9c:	4343      	muls	r3, r0
    2d9e:	0039      	movs	r1, r7
    2da0:	9804      	ldr	r0, [sp, #16]
    2da2:	4699      	mov	r9, r3
    2da4:	f7ff fa82 	bl	22ac <__aeabi_uidivmod>
    2da8:	0433      	lsls	r3, r6, #16
    2daa:	0409      	lsls	r1, r1, #16
    2dac:	0c1b      	lsrs	r3, r3, #16
    2dae:	430b      	orrs	r3, r1
    2db0:	4599      	cmp	r9, r3
    2db2:	d909      	bls.n	2dc8 <__aeabi_ddiv+0x2a0>
    2db4:	4443      	add	r3, r8
    2db6:	1e6a      	subs	r2, r5, #1
    2db8:	4598      	cmp	r8, r3
    2dba:	d900      	bls.n	2dbe <__aeabi_ddiv+0x296>
    2dbc:	e11a      	b.n	2ff4 <__aeabi_ddiv+0x4cc>
    2dbe:	4599      	cmp	r9, r3
    2dc0:	d800      	bhi.n	2dc4 <__aeabi_ddiv+0x29c>
    2dc2:	e117      	b.n	2ff4 <__aeabi_ddiv+0x4cc>
    2dc4:	3d02      	subs	r5, #2
    2dc6:	4443      	add	r3, r8
    2dc8:	464a      	mov	r2, r9
    2dca:	1a9b      	subs	r3, r3, r2
    2dcc:	465a      	mov	r2, fp
    2dce:	0412      	lsls	r2, r2, #16
    2dd0:	432a      	orrs	r2, r5
    2dd2:	9903      	ldr	r1, [sp, #12]
    2dd4:	4693      	mov	fp, r2
    2dd6:	0c10      	lsrs	r0, r2, #16
    2dd8:	0c0a      	lsrs	r2, r1, #16
    2dda:	4691      	mov	r9, r2
    2ddc:	0409      	lsls	r1, r1, #16
    2dde:	465a      	mov	r2, fp
    2de0:	0c09      	lsrs	r1, r1, #16
    2de2:	464e      	mov	r6, r9
    2de4:	000d      	movs	r5, r1
    2de6:	0412      	lsls	r2, r2, #16
    2de8:	0c12      	lsrs	r2, r2, #16
    2dea:	4345      	muls	r5, r0
    2dec:	9105      	str	r1, [sp, #20]
    2dee:	4351      	muls	r1, r2
    2df0:	4372      	muls	r2, r6
    2df2:	4370      	muls	r0, r6
    2df4:	1952      	adds	r2, r2, r5
    2df6:	0c0e      	lsrs	r6, r1, #16
    2df8:	18b2      	adds	r2, r6, r2
    2dfa:	4295      	cmp	r5, r2
    2dfc:	d903      	bls.n	2e06 <__aeabi_ddiv+0x2de>
    2dfe:	2580      	movs	r5, #128	; 0x80
    2e00:	026d      	lsls	r5, r5, #9
    2e02:	46ac      	mov	ip, r5
    2e04:	4460      	add	r0, ip
    2e06:	0c15      	lsrs	r5, r2, #16
    2e08:	0409      	lsls	r1, r1, #16
    2e0a:	0412      	lsls	r2, r2, #16
    2e0c:	0c09      	lsrs	r1, r1, #16
    2e0e:	1828      	adds	r0, r5, r0
    2e10:	1852      	adds	r2, r2, r1
    2e12:	4283      	cmp	r3, r0
    2e14:	d200      	bcs.n	2e18 <__aeabi_ddiv+0x2f0>
    2e16:	e0ce      	b.n	2fb6 <__aeabi_ddiv+0x48e>
    2e18:	d100      	bne.n	2e1c <__aeabi_ddiv+0x2f4>
    2e1a:	e0c8      	b.n	2fae <__aeabi_ddiv+0x486>
    2e1c:	1a1d      	subs	r5, r3, r0
    2e1e:	4653      	mov	r3, sl
    2e20:	1a9e      	subs	r6, r3, r2
    2e22:	45b2      	cmp	sl, r6
    2e24:	4192      	sbcs	r2, r2
    2e26:	4252      	negs	r2, r2
    2e28:	1aab      	subs	r3, r5, r2
    2e2a:	469a      	mov	sl, r3
    2e2c:	4598      	cmp	r8, r3
    2e2e:	d100      	bne.n	2e32 <__aeabi_ddiv+0x30a>
    2e30:	e117      	b.n	3062 <__aeabi_ddiv+0x53a>
    2e32:	0039      	movs	r1, r7
    2e34:	0018      	movs	r0, r3
    2e36:	f7ff f9b3 	bl	21a0 <__udivsi3>
    2e3a:	9b01      	ldr	r3, [sp, #4]
    2e3c:	0005      	movs	r5, r0
    2e3e:	4343      	muls	r3, r0
    2e40:	0039      	movs	r1, r7
    2e42:	4650      	mov	r0, sl
    2e44:	9304      	str	r3, [sp, #16]
    2e46:	f7ff fa31 	bl	22ac <__aeabi_uidivmod>
    2e4a:	9804      	ldr	r0, [sp, #16]
    2e4c:	040b      	lsls	r3, r1, #16
    2e4e:	0c31      	lsrs	r1, r6, #16
    2e50:	4319      	orrs	r1, r3
    2e52:	4288      	cmp	r0, r1
    2e54:	d909      	bls.n	2e6a <__aeabi_ddiv+0x342>
    2e56:	4441      	add	r1, r8
    2e58:	1e6b      	subs	r3, r5, #1
    2e5a:	4588      	cmp	r8, r1
    2e5c:	d900      	bls.n	2e60 <__aeabi_ddiv+0x338>
    2e5e:	e107      	b.n	3070 <__aeabi_ddiv+0x548>
    2e60:	4288      	cmp	r0, r1
    2e62:	d800      	bhi.n	2e66 <__aeabi_ddiv+0x33e>
    2e64:	e104      	b.n	3070 <__aeabi_ddiv+0x548>
    2e66:	3d02      	subs	r5, #2
    2e68:	4441      	add	r1, r8
    2e6a:	9b04      	ldr	r3, [sp, #16]
    2e6c:	1acb      	subs	r3, r1, r3
    2e6e:	0018      	movs	r0, r3
    2e70:	0039      	movs	r1, r7
    2e72:	9304      	str	r3, [sp, #16]
    2e74:	f7ff f994 	bl	21a0 <__udivsi3>
    2e78:	9b01      	ldr	r3, [sp, #4]
    2e7a:	4682      	mov	sl, r0
    2e7c:	4343      	muls	r3, r0
    2e7e:	0039      	movs	r1, r7
    2e80:	9804      	ldr	r0, [sp, #16]
    2e82:	9301      	str	r3, [sp, #4]
    2e84:	f7ff fa12 	bl	22ac <__aeabi_uidivmod>
    2e88:	9801      	ldr	r0, [sp, #4]
    2e8a:	040b      	lsls	r3, r1, #16
    2e8c:	0431      	lsls	r1, r6, #16
    2e8e:	0c09      	lsrs	r1, r1, #16
    2e90:	4319      	orrs	r1, r3
    2e92:	4288      	cmp	r0, r1
    2e94:	d90d      	bls.n	2eb2 <__aeabi_ddiv+0x38a>
    2e96:	4653      	mov	r3, sl
    2e98:	4441      	add	r1, r8
    2e9a:	3b01      	subs	r3, #1
    2e9c:	4588      	cmp	r8, r1
    2e9e:	d900      	bls.n	2ea2 <__aeabi_ddiv+0x37a>
    2ea0:	e0e8      	b.n	3074 <__aeabi_ddiv+0x54c>
    2ea2:	4288      	cmp	r0, r1
    2ea4:	d800      	bhi.n	2ea8 <__aeabi_ddiv+0x380>
    2ea6:	e0e5      	b.n	3074 <__aeabi_ddiv+0x54c>
    2ea8:	2302      	movs	r3, #2
    2eaa:	425b      	negs	r3, r3
    2eac:	469c      	mov	ip, r3
    2eae:	4441      	add	r1, r8
    2eb0:	44e2      	add	sl, ip
    2eb2:	9b01      	ldr	r3, [sp, #4]
    2eb4:	042d      	lsls	r5, r5, #16
    2eb6:	1ace      	subs	r6, r1, r3
    2eb8:	4651      	mov	r1, sl
    2eba:	4329      	orrs	r1, r5
    2ebc:	9d05      	ldr	r5, [sp, #20]
    2ebe:	464f      	mov	r7, r9
    2ec0:	002a      	movs	r2, r5
    2ec2:	040b      	lsls	r3, r1, #16
    2ec4:	0c08      	lsrs	r0, r1, #16
    2ec6:	0c1b      	lsrs	r3, r3, #16
    2ec8:	435a      	muls	r2, r3
    2eca:	4345      	muls	r5, r0
    2ecc:	437b      	muls	r3, r7
    2ece:	4378      	muls	r0, r7
    2ed0:	195b      	adds	r3, r3, r5
    2ed2:	0c17      	lsrs	r7, r2, #16
    2ed4:	18fb      	adds	r3, r7, r3
    2ed6:	429d      	cmp	r5, r3
    2ed8:	d903      	bls.n	2ee2 <__aeabi_ddiv+0x3ba>
    2eda:	2580      	movs	r5, #128	; 0x80
    2edc:	026d      	lsls	r5, r5, #9
    2ede:	46ac      	mov	ip, r5
    2ee0:	4460      	add	r0, ip
    2ee2:	0c1d      	lsrs	r5, r3, #16
    2ee4:	0412      	lsls	r2, r2, #16
    2ee6:	041b      	lsls	r3, r3, #16
    2ee8:	0c12      	lsrs	r2, r2, #16
    2eea:	1828      	adds	r0, r5, r0
    2eec:	189b      	adds	r3, r3, r2
    2eee:	4286      	cmp	r6, r0
    2ef0:	d200      	bcs.n	2ef4 <__aeabi_ddiv+0x3cc>
    2ef2:	e093      	b.n	301c <__aeabi_ddiv+0x4f4>
    2ef4:	d100      	bne.n	2ef8 <__aeabi_ddiv+0x3d0>
    2ef6:	e08e      	b.n	3016 <__aeabi_ddiv+0x4ee>
    2ef8:	2301      	movs	r3, #1
    2efa:	4319      	orrs	r1, r3
    2efc:	4ba0      	ldr	r3, [pc, #640]	; (3180 <__aeabi_ddiv+0x658>)
    2efe:	18e3      	adds	r3, r4, r3
    2f00:	2b00      	cmp	r3, #0
    2f02:	dc00      	bgt.n	2f06 <__aeabi_ddiv+0x3de>
    2f04:	e099      	b.n	303a <__aeabi_ddiv+0x512>
    2f06:	074a      	lsls	r2, r1, #29
    2f08:	d000      	beq.n	2f0c <__aeabi_ddiv+0x3e4>
    2f0a:	e09e      	b.n	304a <__aeabi_ddiv+0x522>
    2f0c:	465a      	mov	r2, fp
    2f0e:	01d2      	lsls	r2, r2, #7
    2f10:	d506      	bpl.n	2f20 <__aeabi_ddiv+0x3f8>
    2f12:	465a      	mov	r2, fp
    2f14:	4b9b      	ldr	r3, [pc, #620]	; (3184 <__aeabi_ddiv+0x65c>)
    2f16:	401a      	ands	r2, r3
    2f18:	2380      	movs	r3, #128	; 0x80
    2f1a:	4693      	mov	fp, r2
    2f1c:	00db      	lsls	r3, r3, #3
    2f1e:	18e3      	adds	r3, r4, r3
    2f20:	4a99      	ldr	r2, [pc, #612]	; (3188 <__aeabi_ddiv+0x660>)
    2f22:	4293      	cmp	r3, r2
    2f24:	dd68      	ble.n	2ff8 <__aeabi_ddiv+0x4d0>
    2f26:	2301      	movs	r3, #1
    2f28:	9a02      	ldr	r2, [sp, #8]
    2f2a:	4c98      	ldr	r4, [pc, #608]	; (318c <__aeabi_ddiv+0x664>)
    2f2c:	401a      	ands	r2, r3
    2f2e:	2300      	movs	r3, #0
    2f30:	4694      	mov	ip, r2
    2f32:	4698      	mov	r8, r3
    2f34:	2200      	movs	r2, #0
    2f36:	e6c5      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    2f38:	2280      	movs	r2, #128	; 0x80
    2f3a:	464b      	mov	r3, r9
    2f3c:	0312      	lsls	r2, r2, #12
    2f3e:	4213      	tst	r3, r2
    2f40:	d00a      	beq.n	2f58 <__aeabi_ddiv+0x430>
    2f42:	465b      	mov	r3, fp
    2f44:	4213      	tst	r3, r2
    2f46:	d106      	bne.n	2f56 <__aeabi_ddiv+0x42e>
    2f48:	431a      	orrs	r2, r3
    2f4a:	0312      	lsls	r2, r2, #12
    2f4c:	0b12      	lsrs	r2, r2, #12
    2f4e:	46ac      	mov	ip, r5
    2f50:	4688      	mov	r8, r1
    2f52:	4c8e      	ldr	r4, [pc, #568]	; (318c <__aeabi_ddiv+0x664>)
    2f54:	e6b6      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    2f56:	464b      	mov	r3, r9
    2f58:	431a      	orrs	r2, r3
    2f5a:	0312      	lsls	r2, r2, #12
    2f5c:	0b12      	lsrs	r2, r2, #12
    2f5e:	46bc      	mov	ip, r7
    2f60:	4c8a      	ldr	r4, [pc, #552]	; (318c <__aeabi_ddiv+0x664>)
    2f62:	e6af      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    2f64:	0003      	movs	r3, r0
    2f66:	465a      	mov	r2, fp
    2f68:	3b28      	subs	r3, #40	; 0x28
    2f6a:	409a      	lsls	r2, r3
    2f6c:	2300      	movs	r3, #0
    2f6e:	4691      	mov	r9, r2
    2f70:	4698      	mov	r8, r3
    2f72:	e657      	b.n	2c24 <__aeabi_ddiv+0xfc>
    2f74:	4658      	mov	r0, fp
    2f76:	f000 ff8d 	bl	3e94 <__clzsi2>
    2f7a:	3020      	adds	r0, #32
    2f7c:	e640      	b.n	2c00 <__aeabi_ddiv+0xd8>
    2f7e:	0003      	movs	r3, r0
    2f80:	4652      	mov	r2, sl
    2f82:	3b28      	subs	r3, #40	; 0x28
    2f84:	409a      	lsls	r2, r3
    2f86:	2100      	movs	r1, #0
    2f88:	4693      	mov	fp, r2
    2f8a:	e677      	b.n	2c7c <__aeabi_ddiv+0x154>
    2f8c:	f000 ff82 	bl	3e94 <__clzsi2>
    2f90:	3020      	adds	r0, #32
    2f92:	e65f      	b.n	2c54 <__aeabi_ddiv+0x12c>
    2f94:	4588      	cmp	r8, r1
    2f96:	d200      	bcs.n	2f9a <__aeabi_ddiv+0x472>
    2f98:	e6c7      	b.n	2d2a <__aeabi_ddiv+0x202>
    2f9a:	464b      	mov	r3, r9
    2f9c:	07de      	lsls	r6, r3, #31
    2f9e:	085d      	lsrs	r5, r3, #1
    2fa0:	4643      	mov	r3, r8
    2fa2:	085b      	lsrs	r3, r3, #1
    2fa4:	431e      	orrs	r6, r3
    2fa6:	4643      	mov	r3, r8
    2fa8:	07db      	lsls	r3, r3, #31
    2faa:	469a      	mov	sl, r3
    2fac:	e6c2      	b.n	2d34 <__aeabi_ddiv+0x20c>
    2fae:	2500      	movs	r5, #0
    2fb0:	4592      	cmp	sl, r2
    2fb2:	d300      	bcc.n	2fb6 <__aeabi_ddiv+0x48e>
    2fb4:	e733      	b.n	2e1e <__aeabi_ddiv+0x2f6>
    2fb6:	9e03      	ldr	r6, [sp, #12]
    2fb8:	4659      	mov	r1, fp
    2fba:	46b4      	mov	ip, r6
    2fbc:	44e2      	add	sl, ip
    2fbe:	45b2      	cmp	sl, r6
    2fc0:	41ad      	sbcs	r5, r5
    2fc2:	426d      	negs	r5, r5
    2fc4:	4445      	add	r5, r8
    2fc6:	18eb      	adds	r3, r5, r3
    2fc8:	3901      	subs	r1, #1
    2fca:	4598      	cmp	r8, r3
    2fcc:	d207      	bcs.n	2fde <__aeabi_ddiv+0x4b6>
    2fce:	4298      	cmp	r0, r3
    2fd0:	d900      	bls.n	2fd4 <__aeabi_ddiv+0x4ac>
    2fd2:	e07f      	b.n	30d4 <__aeabi_ddiv+0x5ac>
    2fd4:	d100      	bne.n	2fd8 <__aeabi_ddiv+0x4b0>
    2fd6:	e0bc      	b.n	3152 <__aeabi_ddiv+0x62a>
    2fd8:	1a1d      	subs	r5, r3, r0
    2fda:	468b      	mov	fp, r1
    2fdc:	e71f      	b.n	2e1e <__aeabi_ddiv+0x2f6>
    2fde:	4598      	cmp	r8, r3
    2fe0:	d1fa      	bne.n	2fd8 <__aeabi_ddiv+0x4b0>
    2fe2:	9d03      	ldr	r5, [sp, #12]
    2fe4:	4555      	cmp	r5, sl
    2fe6:	d9f2      	bls.n	2fce <__aeabi_ddiv+0x4a6>
    2fe8:	4643      	mov	r3, r8
    2fea:	468b      	mov	fp, r1
    2fec:	1a1d      	subs	r5, r3, r0
    2fee:	e716      	b.n	2e1e <__aeabi_ddiv+0x2f6>
    2ff0:	469b      	mov	fp, r3
    2ff2:	e6ca      	b.n	2d8a <__aeabi_ddiv+0x262>
    2ff4:	0015      	movs	r5, r2
    2ff6:	e6e7      	b.n	2dc8 <__aeabi_ddiv+0x2a0>
    2ff8:	465a      	mov	r2, fp
    2ffa:	08c9      	lsrs	r1, r1, #3
    2ffc:	0752      	lsls	r2, r2, #29
    2ffe:	430a      	orrs	r2, r1
    3000:	055b      	lsls	r3, r3, #21
    3002:	4690      	mov	r8, r2
    3004:	0d5c      	lsrs	r4, r3, #21
    3006:	465a      	mov	r2, fp
    3008:	2301      	movs	r3, #1
    300a:	9902      	ldr	r1, [sp, #8]
    300c:	0252      	lsls	r2, r2, #9
    300e:	4019      	ands	r1, r3
    3010:	0b12      	lsrs	r2, r2, #12
    3012:	468c      	mov	ip, r1
    3014:	e656      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    3016:	2b00      	cmp	r3, #0
    3018:	d100      	bne.n	301c <__aeabi_ddiv+0x4f4>
    301a:	e76f      	b.n	2efc <__aeabi_ddiv+0x3d4>
    301c:	4446      	add	r6, r8
    301e:	1e4a      	subs	r2, r1, #1
    3020:	45b0      	cmp	r8, r6
    3022:	d929      	bls.n	3078 <__aeabi_ddiv+0x550>
    3024:	0011      	movs	r1, r2
    3026:	4286      	cmp	r6, r0
    3028:	d000      	beq.n	302c <__aeabi_ddiv+0x504>
    302a:	e765      	b.n	2ef8 <__aeabi_ddiv+0x3d0>
    302c:	9a03      	ldr	r2, [sp, #12]
    302e:	4293      	cmp	r3, r2
    3030:	d000      	beq.n	3034 <__aeabi_ddiv+0x50c>
    3032:	e761      	b.n	2ef8 <__aeabi_ddiv+0x3d0>
    3034:	e762      	b.n	2efc <__aeabi_ddiv+0x3d4>
    3036:	2101      	movs	r1, #1
    3038:	4249      	negs	r1, r1
    303a:	2001      	movs	r0, #1
    303c:	1ac2      	subs	r2, r0, r3
    303e:	2a38      	cmp	r2, #56	; 0x38
    3040:	dd21      	ble.n	3086 <__aeabi_ddiv+0x55e>
    3042:	9b02      	ldr	r3, [sp, #8]
    3044:	4003      	ands	r3, r0
    3046:	469c      	mov	ip, r3
    3048:	e638      	b.n	2cbc <__aeabi_ddiv+0x194>
    304a:	220f      	movs	r2, #15
    304c:	400a      	ands	r2, r1
    304e:	2a04      	cmp	r2, #4
    3050:	d100      	bne.n	3054 <__aeabi_ddiv+0x52c>
    3052:	e75b      	b.n	2f0c <__aeabi_ddiv+0x3e4>
    3054:	000a      	movs	r2, r1
    3056:	1d11      	adds	r1, r2, #4
    3058:	4291      	cmp	r1, r2
    305a:	4192      	sbcs	r2, r2
    305c:	4252      	negs	r2, r2
    305e:	4493      	add	fp, r2
    3060:	e754      	b.n	2f0c <__aeabi_ddiv+0x3e4>
    3062:	4b47      	ldr	r3, [pc, #284]	; (3180 <__aeabi_ddiv+0x658>)
    3064:	18e3      	adds	r3, r4, r3
    3066:	2b00      	cmp	r3, #0
    3068:	dde5      	ble.n	3036 <__aeabi_ddiv+0x50e>
    306a:	2201      	movs	r2, #1
    306c:	4252      	negs	r2, r2
    306e:	e7f2      	b.n	3056 <__aeabi_ddiv+0x52e>
    3070:	001d      	movs	r5, r3
    3072:	e6fa      	b.n	2e6a <__aeabi_ddiv+0x342>
    3074:	469a      	mov	sl, r3
    3076:	e71c      	b.n	2eb2 <__aeabi_ddiv+0x38a>
    3078:	42b0      	cmp	r0, r6
    307a:	d839      	bhi.n	30f0 <__aeabi_ddiv+0x5c8>
    307c:	d06e      	beq.n	315c <__aeabi_ddiv+0x634>
    307e:	0011      	movs	r1, r2
    3080:	e73a      	b.n	2ef8 <__aeabi_ddiv+0x3d0>
    3082:	9302      	str	r3, [sp, #8]
    3084:	e73a      	b.n	2efc <__aeabi_ddiv+0x3d4>
    3086:	2a1f      	cmp	r2, #31
    3088:	dc3c      	bgt.n	3104 <__aeabi_ddiv+0x5dc>
    308a:	2320      	movs	r3, #32
    308c:	1a9b      	subs	r3, r3, r2
    308e:	000c      	movs	r4, r1
    3090:	4658      	mov	r0, fp
    3092:	4099      	lsls	r1, r3
    3094:	4098      	lsls	r0, r3
    3096:	1e4b      	subs	r3, r1, #1
    3098:	4199      	sbcs	r1, r3
    309a:	465b      	mov	r3, fp
    309c:	40d4      	lsrs	r4, r2
    309e:	40d3      	lsrs	r3, r2
    30a0:	4320      	orrs	r0, r4
    30a2:	4308      	orrs	r0, r1
    30a4:	001a      	movs	r2, r3
    30a6:	0743      	lsls	r3, r0, #29
    30a8:	d009      	beq.n	30be <__aeabi_ddiv+0x596>
    30aa:	230f      	movs	r3, #15
    30ac:	4003      	ands	r3, r0
    30ae:	2b04      	cmp	r3, #4
    30b0:	d005      	beq.n	30be <__aeabi_ddiv+0x596>
    30b2:	0001      	movs	r1, r0
    30b4:	1d08      	adds	r0, r1, #4
    30b6:	4288      	cmp	r0, r1
    30b8:	419b      	sbcs	r3, r3
    30ba:	425b      	negs	r3, r3
    30bc:	18d2      	adds	r2, r2, r3
    30be:	0213      	lsls	r3, r2, #8
    30c0:	d53a      	bpl.n	3138 <__aeabi_ddiv+0x610>
    30c2:	2301      	movs	r3, #1
    30c4:	9a02      	ldr	r2, [sp, #8]
    30c6:	2401      	movs	r4, #1
    30c8:	401a      	ands	r2, r3
    30ca:	2300      	movs	r3, #0
    30cc:	4694      	mov	ip, r2
    30ce:	4698      	mov	r8, r3
    30d0:	2200      	movs	r2, #0
    30d2:	e5f7      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    30d4:	2102      	movs	r1, #2
    30d6:	4249      	negs	r1, r1
    30d8:	468c      	mov	ip, r1
    30da:	9d03      	ldr	r5, [sp, #12]
    30dc:	44e3      	add	fp, ip
    30de:	46ac      	mov	ip, r5
    30e0:	44e2      	add	sl, ip
    30e2:	45aa      	cmp	sl, r5
    30e4:	41ad      	sbcs	r5, r5
    30e6:	426d      	negs	r5, r5
    30e8:	4445      	add	r5, r8
    30ea:	18ed      	adds	r5, r5, r3
    30ec:	1a2d      	subs	r5, r5, r0
    30ee:	e696      	b.n	2e1e <__aeabi_ddiv+0x2f6>
    30f0:	1e8a      	subs	r2, r1, #2
    30f2:	9903      	ldr	r1, [sp, #12]
    30f4:	004d      	lsls	r5, r1, #1
    30f6:	428d      	cmp	r5, r1
    30f8:	4189      	sbcs	r1, r1
    30fa:	4249      	negs	r1, r1
    30fc:	4441      	add	r1, r8
    30fe:	1876      	adds	r6, r6, r1
    3100:	9503      	str	r5, [sp, #12]
    3102:	e78f      	b.n	3024 <__aeabi_ddiv+0x4fc>
    3104:	201f      	movs	r0, #31
    3106:	4240      	negs	r0, r0
    3108:	1ac3      	subs	r3, r0, r3
    310a:	4658      	mov	r0, fp
    310c:	40d8      	lsrs	r0, r3
    310e:	0003      	movs	r3, r0
    3110:	2a20      	cmp	r2, #32
    3112:	d028      	beq.n	3166 <__aeabi_ddiv+0x63e>
    3114:	2040      	movs	r0, #64	; 0x40
    3116:	465d      	mov	r5, fp
    3118:	1a82      	subs	r2, r0, r2
    311a:	4095      	lsls	r5, r2
    311c:	4329      	orrs	r1, r5
    311e:	1e4a      	subs	r2, r1, #1
    3120:	4191      	sbcs	r1, r2
    3122:	4319      	orrs	r1, r3
    3124:	2307      	movs	r3, #7
    3126:	2200      	movs	r2, #0
    3128:	400b      	ands	r3, r1
    312a:	d009      	beq.n	3140 <__aeabi_ddiv+0x618>
    312c:	230f      	movs	r3, #15
    312e:	2200      	movs	r2, #0
    3130:	400b      	ands	r3, r1
    3132:	0008      	movs	r0, r1
    3134:	2b04      	cmp	r3, #4
    3136:	d1bd      	bne.n	30b4 <__aeabi_ddiv+0x58c>
    3138:	0001      	movs	r1, r0
    313a:	0753      	lsls	r3, r2, #29
    313c:	0252      	lsls	r2, r2, #9
    313e:	0b12      	lsrs	r2, r2, #12
    3140:	08c9      	lsrs	r1, r1, #3
    3142:	4319      	orrs	r1, r3
    3144:	2301      	movs	r3, #1
    3146:	4688      	mov	r8, r1
    3148:	9902      	ldr	r1, [sp, #8]
    314a:	2400      	movs	r4, #0
    314c:	4019      	ands	r1, r3
    314e:	468c      	mov	ip, r1
    3150:	e5b8      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    3152:	4552      	cmp	r2, sl
    3154:	d8be      	bhi.n	30d4 <__aeabi_ddiv+0x5ac>
    3156:	468b      	mov	fp, r1
    3158:	2500      	movs	r5, #0
    315a:	e660      	b.n	2e1e <__aeabi_ddiv+0x2f6>
    315c:	9d03      	ldr	r5, [sp, #12]
    315e:	429d      	cmp	r5, r3
    3160:	d3c6      	bcc.n	30f0 <__aeabi_ddiv+0x5c8>
    3162:	0011      	movs	r1, r2
    3164:	e762      	b.n	302c <__aeabi_ddiv+0x504>
    3166:	2500      	movs	r5, #0
    3168:	e7d8      	b.n	311c <__aeabi_ddiv+0x5f4>
    316a:	2280      	movs	r2, #128	; 0x80
    316c:	465b      	mov	r3, fp
    316e:	0312      	lsls	r2, r2, #12
    3170:	431a      	orrs	r2, r3
    3172:	9b01      	ldr	r3, [sp, #4]
    3174:	0312      	lsls	r2, r2, #12
    3176:	0b12      	lsrs	r2, r2, #12
    3178:	469c      	mov	ip, r3
    317a:	4688      	mov	r8, r1
    317c:	4c03      	ldr	r4, [pc, #12]	; (318c <__aeabi_ddiv+0x664>)
    317e:	e5a1      	b.n	2cc4 <__aeabi_ddiv+0x19c>
    3180:	000003ff 	.word	0x000003ff
    3184:	feffffff 	.word	0xfeffffff
    3188:	000007fe 	.word	0x000007fe
    318c:	000007ff 	.word	0x000007ff

00003190 <__aeabi_dmul>:
    3190:	b5f0      	push	{r4, r5, r6, r7, lr}
    3192:	4657      	mov	r7, sl
    3194:	4645      	mov	r5, r8
    3196:	46de      	mov	lr, fp
    3198:	464e      	mov	r6, r9
    319a:	b5e0      	push	{r5, r6, r7, lr}
    319c:	030c      	lsls	r4, r1, #12
    319e:	4698      	mov	r8, r3
    31a0:	004e      	lsls	r6, r1, #1
    31a2:	0b23      	lsrs	r3, r4, #12
    31a4:	b087      	sub	sp, #28
    31a6:	0007      	movs	r7, r0
    31a8:	4692      	mov	sl, r2
    31aa:	469b      	mov	fp, r3
    31ac:	0d76      	lsrs	r6, r6, #21
    31ae:	0fcd      	lsrs	r5, r1, #31
    31b0:	2e00      	cmp	r6, #0
    31b2:	d06b      	beq.n	328c <__aeabi_dmul+0xfc>
    31b4:	4b6d      	ldr	r3, [pc, #436]	; (336c <__aeabi_dmul+0x1dc>)
    31b6:	429e      	cmp	r6, r3
    31b8:	d035      	beq.n	3226 <__aeabi_dmul+0x96>
    31ba:	2480      	movs	r4, #128	; 0x80
    31bc:	465b      	mov	r3, fp
    31be:	0f42      	lsrs	r2, r0, #29
    31c0:	0424      	lsls	r4, r4, #16
    31c2:	00db      	lsls	r3, r3, #3
    31c4:	4314      	orrs	r4, r2
    31c6:	431c      	orrs	r4, r3
    31c8:	00c3      	lsls	r3, r0, #3
    31ca:	4699      	mov	r9, r3
    31cc:	4b68      	ldr	r3, [pc, #416]	; (3370 <__aeabi_dmul+0x1e0>)
    31ce:	46a3      	mov	fp, r4
    31d0:	469c      	mov	ip, r3
    31d2:	2300      	movs	r3, #0
    31d4:	2700      	movs	r7, #0
    31d6:	4466      	add	r6, ip
    31d8:	9302      	str	r3, [sp, #8]
    31da:	4643      	mov	r3, r8
    31dc:	031c      	lsls	r4, r3, #12
    31de:	005a      	lsls	r2, r3, #1
    31e0:	0fdb      	lsrs	r3, r3, #31
    31e2:	4650      	mov	r0, sl
    31e4:	0b24      	lsrs	r4, r4, #12
    31e6:	0d52      	lsrs	r2, r2, #21
    31e8:	4698      	mov	r8, r3
    31ea:	d100      	bne.n	31ee <__aeabi_dmul+0x5e>
    31ec:	e076      	b.n	32dc <__aeabi_dmul+0x14c>
    31ee:	4b5f      	ldr	r3, [pc, #380]	; (336c <__aeabi_dmul+0x1dc>)
    31f0:	429a      	cmp	r2, r3
    31f2:	d06d      	beq.n	32d0 <__aeabi_dmul+0x140>
    31f4:	2380      	movs	r3, #128	; 0x80
    31f6:	0f41      	lsrs	r1, r0, #29
    31f8:	041b      	lsls	r3, r3, #16
    31fa:	430b      	orrs	r3, r1
    31fc:	495c      	ldr	r1, [pc, #368]	; (3370 <__aeabi_dmul+0x1e0>)
    31fe:	00e4      	lsls	r4, r4, #3
    3200:	468c      	mov	ip, r1
    3202:	431c      	orrs	r4, r3
    3204:	00c3      	lsls	r3, r0, #3
    3206:	2000      	movs	r0, #0
    3208:	4462      	add	r2, ip
    320a:	4641      	mov	r1, r8
    320c:	18b6      	adds	r6, r6, r2
    320e:	4069      	eors	r1, r5
    3210:	1c72      	adds	r2, r6, #1
    3212:	9101      	str	r1, [sp, #4]
    3214:	4694      	mov	ip, r2
    3216:	4307      	orrs	r7, r0
    3218:	2f0f      	cmp	r7, #15
    321a:	d900      	bls.n	321e <__aeabi_dmul+0x8e>
    321c:	e0b0      	b.n	3380 <__aeabi_dmul+0x1f0>
    321e:	4a55      	ldr	r2, [pc, #340]	; (3374 <__aeabi_dmul+0x1e4>)
    3220:	00bf      	lsls	r7, r7, #2
    3222:	59d2      	ldr	r2, [r2, r7]
    3224:	4697      	mov	pc, r2
    3226:	465b      	mov	r3, fp
    3228:	4303      	orrs	r3, r0
    322a:	4699      	mov	r9, r3
    322c:	d000      	beq.n	3230 <__aeabi_dmul+0xa0>
    322e:	e087      	b.n	3340 <__aeabi_dmul+0x1b0>
    3230:	2300      	movs	r3, #0
    3232:	469b      	mov	fp, r3
    3234:	3302      	adds	r3, #2
    3236:	2708      	movs	r7, #8
    3238:	9302      	str	r3, [sp, #8]
    323a:	e7ce      	b.n	31da <__aeabi_dmul+0x4a>
    323c:	4642      	mov	r2, r8
    323e:	9201      	str	r2, [sp, #4]
    3240:	2802      	cmp	r0, #2
    3242:	d067      	beq.n	3314 <__aeabi_dmul+0x184>
    3244:	2803      	cmp	r0, #3
    3246:	d100      	bne.n	324a <__aeabi_dmul+0xba>
    3248:	e20e      	b.n	3668 <__aeabi_dmul+0x4d8>
    324a:	2801      	cmp	r0, #1
    324c:	d000      	beq.n	3250 <__aeabi_dmul+0xc0>
    324e:	e162      	b.n	3516 <__aeabi_dmul+0x386>
    3250:	2300      	movs	r3, #0
    3252:	2400      	movs	r4, #0
    3254:	2200      	movs	r2, #0
    3256:	4699      	mov	r9, r3
    3258:	9901      	ldr	r1, [sp, #4]
    325a:	4001      	ands	r1, r0
    325c:	b2cd      	uxtb	r5, r1
    325e:	2100      	movs	r1, #0
    3260:	0312      	lsls	r2, r2, #12
    3262:	0d0b      	lsrs	r3, r1, #20
    3264:	0b12      	lsrs	r2, r2, #12
    3266:	051b      	lsls	r3, r3, #20
    3268:	4313      	orrs	r3, r2
    326a:	4a43      	ldr	r2, [pc, #268]	; (3378 <__aeabi_dmul+0x1e8>)
    326c:	0524      	lsls	r4, r4, #20
    326e:	4013      	ands	r3, r2
    3270:	431c      	orrs	r4, r3
    3272:	0064      	lsls	r4, r4, #1
    3274:	07ed      	lsls	r5, r5, #31
    3276:	0864      	lsrs	r4, r4, #1
    3278:	432c      	orrs	r4, r5
    327a:	4648      	mov	r0, r9
    327c:	0021      	movs	r1, r4
    327e:	b007      	add	sp, #28
    3280:	bc3c      	pop	{r2, r3, r4, r5}
    3282:	4690      	mov	r8, r2
    3284:	4699      	mov	r9, r3
    3286:	46a2      	mov	sl, r4
    3288:	46ab      	mov	fp, r5
    328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    328c:	4303      	orrs	r3, r0
    328e:	4699      	mov	r9, r3
    3290:	d04f      	beq.n	3332 <__aeabi_dmul+0x1a2>
    3292:	465b      	mov	r3, fp
    3294:	2b00      	cmp	r3, #0
    3296:	d100      	bne.n	329a <__aeabi_dmul+0x10a>
    3298:	e189      	b.n	35ae <__aeabi_dmul+0x41e>
    329a:	4658      	mov	r0, fp
    329c:	f000 fdfa 	bl	3e94 <__clzsi2>
    32a0:	0003      	movs	r3, r0
    32a2:	3b0b      	subs	r3, #11
    32a4:	2b1c      	cmp	r3, #28
    32a6:	dd00      	ble.n	32aa <__aeabi_dmul+0x11a>
    32a8:	e17a      	b.n	35a0 <__aeabi_dmul+0x410>
    32aa:	221d      	movs	r2, #29
    32ac:	1ad3      	subs	r3, r2, r3
    32ae:	003a      	movs	r2, r7
    32b0:	0001      	movs	r1, r0
    32b2:	465c      	mov	r4, fp
    32b4:	40da      	lsrs	r2, r3
    32b6:	3908      	subs	r1, #8
    32b8:	408c      	lsls	r4, r1
    32ba:	0013      	movs	r3, r2
    32bc:	408f      	lsls	r7, r1
    32be:	4323      	orrs	r3, r4
    32c0:	469b      	mov	fp, r3
    32c2:	46b9      	mov	r9, r7
    32c4:	2300      	movs	r3, #0
    32c6:	4e2d      	ldr	r6, [pc, #180]	; (337c <__aeabi_dmul+0x1ec>)
    32c8:	2700      	movs	r7, #0
    32ca:	1a36      	subs	r6, r6, r0
    32cc:	9302      	str	r3, [sp, #8]
    32ce:	e784      	b.n	31da <__aeabi_dmul+0x4a>
    32d0:	4653      	mov	r3, sl
    32d2:	4323      	orrs	r3, r4
    32d4:	d12a      	bne.n	332c <__aeabi_dmul+0x19c>
    32d6:	2400      	movs	r4, #0
    32d8:	2002      	movs	r0, #2
    32da:	e796      	b.n	320a <__aeabi_dmul+0x7a>
    32dc:	4653      	mov	r3, sl
    32de:	4323      	orrs	r3, r4
    32e0:	d020      	beq.n	3324 <__aeabi_dmul+0x194>
    32e2:	2c00      	cmp	r4, #0
    32e4:	d100      	bne.n	32e8 <__aeabi_dmul+0x158>
    32e6:	e157      	b.n	3598 <__aeabi_dmul+0x408>
    32e8:	0020      	movs	r0, r4
    32ea:	f000 fdd3 	bl	3e94 <__clzsi2>
    32ee:	0003      	movs	r3, r0
    32f0:	3b0b      	subs	r3, #11
    32f2:	2b1c      	cmp	r3, #28
    32f4:	dd00      	ble.n	32f8 <__aeabi_dmul+0x168>
    32f6:	e149      	b.n	358c <__aeabi_dmul+0x3fc>
    32f8:	211d      	movs	r1, #29
    32fa:	1acb      	subs	r3, r1, r3
    32fc:	4651      	mov	r1, sl
    32fe:	0002      	movs	r2, r0
    3300:	40d9      	lsrs	r1, r3
    3302:	4653      	mov	r3, sl
    3304:	3a08      	subs	r2, #8
    3306:	4094      	lsls	r4, r2
    3308:	4093      	lsls	r3, r2
    330a:	430c      	orrs	r4, r1
    330c:	4a1b      	ldr	r2, [pc, #108]	; (337c <__aeabi_dmul+0x1ec>)
    330e:	1a12      	subs	r2, r2, r0
    3310:	2000      	movs	r0, #0
    3312:	e77a      	b.n	320a <__aeabi_dmul+0x7a>
    3314:	2501      	movs	r5, #1
    3316:	9b01      	ldr	r3, [sp, #4]
    3318:	4c14      	ldr	r4, [pc, #80]	; (336c <__aeabi_dmul+0x1dc>)
    331a:	401d      	ands	r5, r3
    331c:	2300      	movs	r3, #0
    331e:	2200      	movs	r2, #0
    3320:	4699      	mov	r9, r3
    3322:	e79c      	b.n	325e <__aeabi_dmul+0xce>
    3324:	2400      	movs	r4, #0
    3326:	2200      	movs	r2, #0
    3328:	2001      	movs	r0, #1
    332a:	e76e      	b.n	320a <__aeabi_dmul+0x7a>
    332c:	4653      	mov	r3, sl
    332e:	2003      	movs	r0, #3
    3330:	e76b      	b.n	320a <__aeabi_dmul+0x7a>
    3332:	2300      	movs	r3, #0
    3334:	469b      	mov	fp, r3
    3336:	3301      	adds	r3, #1
    3338:	2704      	movs	r7, #4
    333a:	2600      	movs	r6, #0
    333c:	9302      	str	r3, [sp, #8]
    333e:	e74c      	b.n	31da <__aeabi_dmul+0x4a>
    3340:	2303      	movs	r3, #3
    3342:	4681      	mov	r9, r0
    3344:	270c      	movs	r7, #12
    3346:	9302      	str	r3, [sp, #8]
    3348:	e747      	b.n	31da <__aeabi_dmul+0x4a>
    334a:	2280      	movs	r2, #128	; 0x80
    334c:	2300      	movs	r3, #0
    334e:	2500      	movs	r5, #0
    3350:	0312      	lsls	r2, r2, #12
    3352:	4699      	mov	r9, r3
    3354:	4c05      	ldr	r4, [pc, #20]	; (336c <__aeabi_dmul+0x1dc>)
    3356:	e782      	b.n	325e <__aeabi_dmul+0xce>
    3358:	465c      	mov	r4, fp
    335a:	464b      	mov	r3, r9
    335c:	9802      	ldr	r0, [sp, #8]
    335e:	e76f      	b.n	3240 <__aeabi_dmul+0xb0>
    3360:	465c      	mov	r4, fp
    3362:	464b      	mov	r3, r9
    3364:	9501      	str	r5, [sp, #4]
    3366:	9802      	ldr	r0, [sp, #8]
    3368:	e76a      	b.n	3240 <__aeabi_dmul+0xb0>
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	000007ff 	.word	0x000007ff
    3370:	fffffc01 	.word	0xfffffc01
    3374:	00004a5c 	.word	0x00004a5c
    3378:	800fffff 	.word	0x800fffff
    337c:	fffffc0d 	.word	0xfffffc0d
    3380:	464a      	mov	r2, r9
    3382:	4649      	mov	r1, r9
    3384:	0c17      	lsrs	r7, r2, #16
    3386:	0c1a      	lsrs	r2, r3, #16
    3388:	041b      	lsls	r3, r3, #16
    338a:	0c1b      	lsrs	r3, r3, #16
    338c:	0408      	lsls	r0, r1, #16
    338e:	0019      	movs	r1, r3
    3390:	0c00      	lsrs	r0, r0, #16
    3392:	4341      	muls	r1, r0
    3394:	0015      	movs	r5, r2
    3396:	4688      	mov	r8, r1
    3398:	0019      	movs	r1, r3
    339a:	437d      	muls	r5, r7
    339c:	4379      	muls	r1, r7
    339e:	9503      	str	r5, [sp, #12]
    33a0:	4689      	mov	r9, r1
    33a2:	0029      	movs	r1, r5
    33a4:	0015      	movs	r5, r2
    33a6:	4345      	muls	r5, r0
    33a8:	444d      	add	r5, r9
    33aa:	9502      	str	r5, [sp, #8]
    33ac:	4645      	mov	r5, r8
    33ae:	0c2d      	lsrs	r5, r5, #16
    33b0:	46aa      	mov	sl, r5
    33b2:	9d02      	ldr	r5, [sp, #8]
    33b4:	4455      	add	r5, sl
    33b6:	45a9      	cmp	r9, r5
    33b8:	d906      	bls.n	33c8 <__aeabi_dmul+0x238>
    33ba:	468a      	mov	sl, r1
    33bc:	2180      	movs	r1, #128	; 0x80
    33be:	0249      	lsls	r1, r1, #9
    33c0:	4689      	mov	r9, r1
    33c2:	44ca      	add	sl, r9
    33c4:	4651      	mov	r1, sl
    33c6:	9103      	str	r1, [sp, #12]
    33c8:	0c29      	lsrs	r1, r5, #16
    33ca:	9104      	str	r1, [sp, #16]
    33cc:	4641      	mov	r1, r8
    33ce:	0409      	lsls	r1, r1, #16
    33d0:	042d      	lsls	r5, r5, #16
    33d2:	0c09      	lsrs	r1, r1, #16
    33d4:	4688      	mov	r8, r1
    33d6:	0029      	movs	r1, r5
    33d8:	0c25      	lsrs	r5, r4, #16
    33da:	0424      	lsls	r4, r4, #16
    33dc:	4441      	add	r1, r8
    33de:	0c24      	lsrs	r4, r4, #16
    33e0:	9105      	str	r1, [sp, #20]
    33e2:	0021      	movs	r1, r4
    33e4:	4341      	muls	r1, r0
    33e6:	4688      	mov	r8, r1
    33e8:	0021      	movs	r1, r4
    33ea:	4379      	muls	r1, r7
    33ec:	468a      	mov	sl, r1
    33ee:	4368      	muls	r0, r5
    33f0:	4641      	mov	r1, r8
    33f2:	4450      	add	r0, sl
    33f4:	4681      	mov	r9, r0
    33f6:	0c08      	lsrs	r0, r1, #16
    33f8:	4448      	add	r0, r9
    33fa:	436f      	muls	r7, r5
    33fc:	4582      	cmp	sl, r0
    33fe:	d903      	bls.n	3408 <__aeabi_dmul+0x278>
    3400:	2180      	movs	r1, #128	; 0x80
    3402:	0249      	lsls	r1, r1, #9
    3404:	4689      	mov	r9, r1
    3406:	444f      	add	r7, r9
    3408:	0c01      	lsrs	r1, r0, #16
    340a:	4689      	mov	r9, r1
    340c:	0039      	movs	r1, r7
    340e:	4449      	add	r1, r9
    3410:	9102      	str	r1, [sp, #8]
    3412:	4641      	mov	r1, r8
    3414:	040f      	lsls	r7, r1, #16
    3416:	9904      	ldr	r1, [sp, #16]
    3418:	0c3f      	lsrs	r7, r7, #16
    341a:	4688      	mov	r8, r1
    341c:	0400      	lsls	r0, r0, #16
    341e:	19c0      	adds	r0, r0, r7
    3420:	4480      	add	r8, r0
    3422:	4641      	mov	r1, r8
    3424:	9104      	str	r1, [sp, #16]
    3426:	4659      	mov	r1, fp
    3428:	0c0f      	lsrs	r7, r1, #16
    342a:	0409      	lsls	r1, r1, #16
    342c:	0c09      	lsrs	r1, r1, #16
    342e:	4688      	mov	r8, r1
    3430:	4359      	muls	r1, r3
    3432:	468a      	mov	sl, r1
    3434:	0039      	movs	r1, r7
    3436:	4351      	muls	r1, r2
    3438:	4689      	mov	r9, r1
    343a:	4641      	mov	r1, r8
    343c:	434a      	muls	r2, r1
    343e:	4651      	mov	r1, sl
    3440:	0c09      	lsrs	r1, r1, #16
    3442:	468b      	mov	fp, r1
    3444:	437b      	muls	r3, r7
    3446:	18d2      	adds	r2, r2, r3
    3448:	445a      	add	r2, fp
    344a:	4293      	cmp	r3, r2
    344c:	d903      	bls.n	3456 <__aeabi_dmul+0x2c6>
    344e:	2380      	movs	r3, #128	; 0x80
    3450:	025b      	lsls	r3, r3, #9
    3452:	469b      	mov	fp, r3
    3454:	44d9      	add	r9, fp
    3456:	4651      	mov	r1, sl
    3458:	0409      	lsls	r1, r1, #16
    345a:	0c09      	lsrs	r1, r1, #16
    345c:	468a      	mov	sl, r1
    345e:	4641      	mov	r1, r8
    3460:	4361      	muls	r1, r4
    3462:	437c      	muls	r4, r7
    3464:	0c13      	lsrs	r3, r2, #16
    3466:	0412      	lsls	r2, r2, #16
    3468:	444b      	add	r3, r9
    346a:	4452      	add	r2, sl
    346c:	46a1      	mov	r9, r4
    346e:	468a      	mov	sl, r1
    3470:	003c      	movs	r4, r7
    3472:	4641      	mov	r1, r8
    3474:	436c      	muls	r4, r5
    3476:	434d      	muls	r5, r1
    3478:	4651      	mov	r1, sl
    347a:	444d      	add	r5, r9
    347c:	0c0f      	lsrs	r7, r1, #16
    347e:	197d      	adds	r5, r7, r5
    3480:	45a9      	cmp	r9, r5
    3482:	d903      	bls.n	348c <__aeabi_dmul+0x2fc>
    3484:	2180      	movs	r1, #128	; 0x80
    3486:	0249      	lsls	r1, r1, #9
    3488:	4688      	mov	r8, r1
    348a:	4444      	add	r4, r8
    348c:	9f04      	ldr	r7, [sp, #16]
    348e:	9903      	ldr	r1, [sp, #12]
    3490:	46b8      	mov	r8, r7
    3492:	4441      	add	r1, r8
    3494:	468b      	mov	fp, r1
    3496:	4583      	cmp	fp, r0
    3498:	4180      	sbcs	r0, r0
    349a:	4241      	negs	r1, r0
    349c:	4688      	mov	r8, r1
    349e:	4651      	mov	r1, sl
    34a0:	0408      	lsls	r0, r1, #16
    34a2:	042f      	lsls	r7, r5, #16
    34a4:	0c00      	lsrs	r0, r0, #16
    34a6:	183f      	adds	r7, r7, r0
    34a8:	4658      	mov	r0, fp
    34aa:	9902      	ldr	r1, [sp, #8]
    34ac:	1810      	adds	r0, r2, r0
    34ae:	4689      	mov	r9, r1
    34b0:	4290      	cmp	r0, r2
    34b2:	4192      	sbcs	r2, r2
    34b4:	444f      	add	r7, r9
    34b6:	46ba      	mov	sl, r7
    34b8:	4252      	negs	r2, r2
    34ba:	4699      	mov	r9, r3
    34bc:	4693      	mov	fp, r2
    34be:	44c2      	add	sl, r8
    34c0:	44d1      	add	r9, sl
    34c2:	44cb      	add	fp, r9
    34c4:	428f      	cmp	r7, r1
    34c6:	41bf      	sbcs	r7, r7
    34c8:	45c2      	cmp	sl, r8
    34ca:	4189      	sbcs	r1, r1
    34cc:	4599      	cmp	r9, r3
    34ce:	419b      	sbcs	r3, r3
    34d0:	4593      	cmp	fp, r2
    34d2:	4192      	sbcs	r2, r2
    34d4:	427f      	negs	r7, r7
    34d6:	4249      	negs	r1, r1
    34d8:	0c2d      	lsrs	r5, r5, #16
    34da:	4252      	negs	r2, r2
    34dc:	430f      	orrs	r7, r1
    34de:	425b      	negs	r3, r3
    34e0:	4313      	orrs	r3, r2
    34e2:	197f      	adds	r7, r7, r5
    34e4:	18ff      	adds	r7, r7, r3
    34e6:	465b      	mov	r3, fp
    34e8:	193c      	adds	r4, r7, r4
    34ea:	0ddb      	lsrs	r3, r3, #23
    34ec:	9a05      	ldr	r2, [sp, #20]
    34ee:	0264      	lsls	r4, r4, #9
    34f0:	431c      	orrs	r4, r3
    34f2:	0243      	lsls	r3, r0, #9
    34f4:	4313      	orrs	r3, r2
    34f6:	1e5d      	subs	r5, r3, #1
    34f8:	41ab      	sbcs	r3, r5
    34fa:	465a      	mov	r2, fp
    34fc:	0dc0      	lsrs	r0, r0, #23
    34fe:	4303      	orrs	r3, r0
    3500:	0252      	lsls	r2, r2, #9
    3502:	4313      	orrs	r3, r2
    3504:	01e2      	lsls	r2, r4, #7
    3506:	d556      	bpl.n	35b6 <__aeabi_dmul+0x426>
    3508:	2001      	movs	r0, #1
    350a:	085a      	lsrs	r2, r3, #1
    350c:	4003      	ands	r3, r0
    350e:	4313      	orrs	r3, r2
    3510:	07e2      	lsls	r2, r4, #31
    3512:	4313      	orrs	r3, r2
    3514:	0864      	lsrs	r4, r4, #1
    3516:	485a      	ldr	r0, [pc, #360]	; (3680 <__aeabi_dmul+0x4f0>)
    3518:	4460      	add	r0, ip
    351a:	2800      	cmp	r0, #0
    351c:	dd4d      	ble.n	35ba <__aeabi_dmul+0x42a>
    351e:	075a      	lsls	r2, r3, #29
    3520:	d009      	beq.n	3536 <__aeabi_dmul+0x3a6>
    3522:	220f      	movs	r2, #15
    3524:	401a      	ands	r2, r3
    3526:	2a04      	cmp	r2, #4
    3528:	d005      	beq.n	3536 <__aeabi_dmul+0x3a6>
    352a:	1d1a      	adds	r2, r3, #4
    352c:	429a      	cmp	r2, r3
    352e:	419b      	sbcs	r3, r3
    3530:	425b      	negs	r3, r3
    3532:	18e4      	adds	r4, r4, r3
    3534:	0013      	movs	r3, r2
    3536:	01e2      	lsls	r2, r4, #7
    3538:	d504      	bpl.n	3544 <__aeabi_dmul+0x3b4>
    353a:	2080      	movs	r0, #128	; 0x80
    353c:	4a51      	ldr	r2, [pc, #324]	; (3684 <__aeabi_dmul+0x4f4>)
    353e:	00c0      	lsls	r0, r0, #3
    3540:	4014      	ands	r4, r2
    3542:	4460      	add	r0, ip
    3544:	4a50      	ldr	r2, [pc, #320]	; (3688 <__aeabi_dmul+0x4f8>)
    3546:	4290      	cmp	r0, r2
    3548:	dd00      	ble.n	354c <__aeabi_dmul+0x3bc>
    354a:	e6e3      	b.n	3314 <__aeabi_dmul+0x184>
    354c:	2501      	movs	r5, #1
    354e:	08db      	lsrs	r3, r3, #3
    3550:	0762      	lsls	r2, r4, #29
    3552:	431a      	orrs	r2, r3
    3554:	0264      	lsls	r4, r4, #9
    3556:	9b01      	ldr	r3, [sp, #4]
    3558:	4691      	mov	r9, r2
    355a:	0b22      	lsrs	r2, r4, #12
    355c:	0544      	lsls	r4, r0, #21
    355e:	0d64      	lsrs	r4, r4, #21
    3560:	401d      	ands	r5, r3
    3562:	e67c      	b.n	325e <__aeabi_dmul+0xce>
    3564:	2280      	movs	r2, #128	; 0x80
    3566:	4659      	mov	r1, fp
    3568:	0312      	lsls	r2, r2, #12
    356a:	4211      	tst	r1, r2
    356c:	d008      	beq.n	3580 <__aeabi_dmul+0x3f0>
    356e:	4214      	tst	r4, r2
    3570:	d106      	bne.n	3580 <__aeabi_dmul+0x3f0>
    3572:	4322      	orrs	r2, r4
    3574:	0312      	lsls	r2, r2, #12
    3576:	0b12      	lsrs	r2, r2, #12
    3578:	4645      	mov	r5, r8
    357a:	4699      	mov	r9, r3
    357c:	4c43      	ldr	r4, [pc, #268]	; (368c <__aeabi_dmul+0x4fc>)
    357e:	e66e      	b.n	325e <__aeabi_dmul+0xce>
    3580:	465b      	mov	r3, fp
    3582:	431a      	orrs	r2, r3
    3584:	0312      	lsls	r2, r2, #12
    3586:	0b12      	lsrs	r2, r2, #12
    3588:	4c40      	ldr	r4, [pc, #256]	; (368c <__aeabi_dmul+0x4fc>)
    358a:	e668      	b.n	325e <__aeabi_dmul+0xce>
    358c:	0003      	movs	r3, r0
    358e:	4654      	mov	r4, sl
    3590:	3b28      	subs	r3, #40	; 0x28
    3592:	409c      	lsls	r4, r3
    3594:	2300      	movs	r3, #0
    3596:	e6b9      	b.n	330c <__aeabi_dmul+0x17c>
    3598:	f000 fc7c 	bl	3e94 <__clzsi2>
    359c:	3020      	adds	r0, #32
    359e:	e6a6      	b.n	32ee <__aeabi_dmul+0x15e>
    35a0:	0003      	movs	r3, r0
    35a2:	3b28      	subs	r3, #40	; 0x28
    35a4:	409f      	lsls	r7, r3
    35a6:	2300      	movs	r3, #0
    35a8:	46bb      	mov	fp, r7
    35aa:	4699      	mov	r9, r3
    35ac:	e68a      	b.n	32c4 <__aeabi_dmul+0x134>
    35ae:	f000 fc71 	bl	3e94 <__clzsi2>
    35b2:	3020      	adds	r0, #32
    35b4:	e674      	b.n	32a0 <__aeabi_dmul+0x110>
    35b6:	46b4      	mov	ip, r6
    35b8:	e7ad      	b.n	3516 <__aeabi_dmul+0x386>
    35ba:	2501      	movs	r5, #1
    35bc:	1a2a      	subs	r2, r5, r0
    35be:	2a38      	cmp	r2, #56	; 0x38
    35c0:	dd06      	ble.n	35d0 <__aeabi_dmul+0x440>
    35c2:	9b01      	ldr	r3, [sp, #4]
    35c4:	2400      	movs	r4, #0
    35c6:	401d      	ands	r5, r3
    35c8:	2300      	movs	r3, #0
    35ca:	2200      	movs	r2, #0
    35cc:	4699      	mov	r9, r3
    35ce:	e646      	b.n	325e <__aeabi_dmul+0xce>
    35d0:	2a1f      	cmp	r2, #31
    35d2:	dc21      	bgt.n	3618 <__aeabi_dmul+0x488>
    35d4:	2520      	movs	r5, #32
    35d6:	0020      	movs	r0, r4
    35d8:	1aad      	subs	r5, r5, r2
    35da:	001e      	movs	r6, r3
    35dc:	40ab      	lsls	r3, r5
    35de:	40a8      	lsls	r0, r5
    35e0:	40d6      	lsrs	r6, r2
    35e2:	1e5d      	subs	r5, r3, #1
    35e4:	41ab      	sbcs	r3, r5
    35e6:	4330      	orrs	r0, r6
    35e8:	4318      	orrs	r0, r3
    35ea:	40d4      	lsrs	r4, r2
    35ec:	0743      	lsls	r3, r0, #29
    35ee:	d009      	beq.n	3604 <__aeabi_dmul+0x474>
    35f0:	230f      	movs	r3, #15
    35f2:	4003      	ands	r3, r0
    35f4:	2b04      	cmp	r3, #4
    35f6:	d005      	beq.n	3604 <__aeabi_dmul+0x474>
    35f8:	0003      	movs	r3, r0
    35fa:	1d18      	adds	r0, r3, #4
    35fc:	4298      	cmp	r0, r3
    35fe:	419b      	sbcs	r3, r3
    3600:	425b      	negs	r3, r3
    3602:	18e4      	adds	r4, r4, r3
    3604:	0223      	lsls	r3, r4, #8
    3606:	d521      	bpl.n	364c <__aeabi_dmul+0x4bc>
    3608:	2501      	movs	r5, #1
    360a:	9b01      	ldr	r3, [sp, #4]
    360c:	2401      	movs	r4, #1
    360e:	401d      	ands	r5, r3
    3610:	2300      	movs	r3, #0
    3612:	2200      	movs	r2, #0
    3614:	4699      	mov	r9, r3
    3616:	e622      	b.n	325e <__aeabi_dmul+0xce>
    3618:	251f      	movs	r5, #31
    361a:	0021      	movs	r1, r4
    361c:	426d      	negs	r5, r5
    361e:	1a28      	subs	r0, r5, r0
    3620:	40c1      	lsrs	r1, r0
    3622:	0008      	movs	r0, r1
    3624:	2a20      	cmp	r2, #32
    3626:	d01d      	beq.n	3664 <__aeabi_dmul+0x4d4>
    3628:	355f      	adds	r5, #95	; 0x5f
    362a:	1aaa      	subs	r2, r5, r2
    362c:	4094      	lsls	r4, r2
    362e:	4323      	orrs	r3, r4
    3630:	1e5c      	subs	r4, r3, #1
    3632:	41a3      	sbcs	r3, r4
    3634:	2507      	movs	r5, #7
    3636:	4303      	orrs	r3, r0
    3638:	401d      	ands	r5, r3
    363a:	2200      	movs	r2, #0
    363c:	2d00      	cmp	r5, #0
    363e:	d009      	beq.n	3654 <__aeabi_dmul+0x4c4>
    3640:	220f      	movs	r2, #15
    3642:	2400      	movs	r4, #0
    3644:	401a      	ands	r2, r3
    3646:	0018      	movs	r0, r3
    3648:	2a04      	cmp	r2, #4
    364a:	d1d6      	bne.n	35fa <__aeabi_dmul+0x46a>
    364c:	0003      	movs	r3, r0
    364e:	0765      	lsls	r5, r4, #29
    3650:	0264      	lsls	r4, r4, #9
    3652:	0b22      	lsrs	r2, r4, #12
    3654:	08db      	lsrs	r3, r3, #3
    3656:	432b      	orrs	r3, r5
    3658:	2501      	movs	r5, #1
    365a:	4699      	mov	r9, r3
    365c:	9b01      	ldr	r3, [sp, #4]
    365e:	2400      	movs	r4, #0
    3660:	401d      	ands	r5, r3
    3662:	e5fc      	b.n	325e <__aeabi_dmul+0xce>
    3664:	2400      	movs	r4, #0
    3666:	e7e2      	b.n	362e <__aeabi_dmul+0x49e>
    3668:	2280      	movs	r2, #128	; 0x80
    366a:	2501      	movs	r5, #1
    366c:	0312      	lsls	r2, r2, #12
    366e:	4322      	orrs	r2, r4
    3670:	9901      	ldr	r1, [sp, #4]
    3672:	0312      	lsls	r2, r2, #12
    3674:	0b12      	lsrs	r2, r2, #12
    3676:	400d      	ands	r5, r1
    3678:	4699      	mov	r9, r3
    367a:	4c04      	ldr	r4, [pc, #16]	; (368c <__aeabi_dmul+0x4fc>)
    367c:	e5ef      	b.n	325e <__aeabi_dmul+0xce>
    367e:	46c0      	nop			; (mov r8, r8)
    3680:	000003ff 	.word	0x000003ff
    3684:	feffffff 	.word	0xfeffffff
    3688:	000007fe 	.word	0x000007fe
    368c:	000007ff 	.word	0x000007ff

00003690 <__aeabi_dsub>:
    3690:	b5f0      	push	{r4, r5, r6, r7, lr}
    3692:	4646      	mov	r6, r8
    3694:	46d6      	mov	lr, sl
    3696:	464f      	mov	r7, r9
    3698:	030c      	lsls	r4, r1, #12
    369a:	b5c0      	push	{r6, r7, lr}
    369c:	0fcd      	lsrs	r5, r1, #31
    369e:	004e      	lsls	r6, r1, #1
    36a0:	0a61      	lsrs	r1, r4, #9
    36a2:	0f44      	lsrs	r4, r0, #29
    36a4:	430c      	orrs	r4, r1
    36a6:	00c1      	lsls	r1, r0, #3
    36a8:	0058      	lsls	r0, r3, #1
    36aa:	0d40      	lsrs	r0, r0, #21
    36ac:	4684      	mov	ip, r0
    36ae:	468a      	mov	sl, r1
    36b0:	000f      	movs	r7, r1
    36b2:	0319      	lsls	r1, r3, #12
    36b4:	0f50      	lsrs	r0, r2, #29
    36b6:	0a49      	lsrs	r1, r1, #9
    36b8:	4301      	orrs	r1, r0
    36ba:	48c6      	ldr	r0, [pc, #792]	; (39d4 <__aeabi_dsub+0x344>)
    36bc:	0d76      	lsrs	r6, r6, #21
    36be:	46a8      	mov	r8, r5
    36c0:	0fdb      	lsrs	r3, r3, #31
    36c2:	00d2      	lsls	r2, r2, #3
    36c4:	4584      	cmp	ip, r0
    36c6:	d100      	bne.n	36ca <__aeabi_dsub+0x3a>
    36c8:	e0d8      	b.n	387c <__aeabi_dsub+0x1ec>
    36ca:	2001      	movs	r0, #1
    36cc:	4043      	eors	r3, r0
    36ce:	42ab      	cmp	r3, r5
    36d0:	d100      	bne.n	36d4 <__aeabi_dsub+0x44>
    36d2:	e0a6      	b.n	3822 <__aeabi_dsub+0x192>
    36d4:	4660      	mov	r0, ip
    36d6:	1a35      	subs	r5, r6, r0
    36d8:	2d00      	cmp	r5, #0
    36da:	dc00      	bgt.n	36de <__aeabi_dsub+0x4e>
    36dc:	e105      	b.n	38ea <__aeabi_dsub+0x25a>
    36de:	2800      	cmp	r0, #0
    36e0:	d110      	bne.n	3704 <__aeabi_dsub+0x74>
    36e2:	000b      	movs	r3, r1
    36e4:	4313      	orrs	r3, r2
    36e6:	d100      	bne.n	36ea <__aeabi_dsub+0x5a>
    36e8:	e0d7      	b.n	389a <__aeabi_dsub+0x20a>
    36ea:	1e6b      	subs	r3, r5, #1
    36ec:	2b00      	cmp	r3, #0
    36ee:	d000      	beq.n	36f2 <__aeabi_dsub+0x62>
    36f0:	e14b      	b.n	398a <__aeabi_dsub+0x2fa>
    36f2:	4653      	mov	r3, sl
    36f4:	1a9f      	subs	r7, r3, r2
    36f6:	45ba      	cmp	sl, r7
    36f8:	4180      	sbcs	r0, r0
    36fa:	1a64      	subs	r4, r4, r1
    36fc:	4240      	negs	r0, r0
    36fe:	1a24      	subs	r4, r4, r0
    3700:	2601      	movs	r6, #1
    3702:	e01e      	b.n	3742 <__aeabi_dsub+0xb2>
    3704:	4bb3      	ldr	r3, [pc, #716]	; (39d4 <__aeabi_dsub+0x344>)
    3706:	429e      	cmp	r6, r3
    3708:	d048      	beq.n	379c <__aeabi_dsub+0x10c>
    370a:	2380      	movs	r3, #128	; 0x80
    370c:	041b      	lsls	r3, r3, #16
    370e:	4319      	orrs	r1, r3
    3710:	2d38      	cmp	r5, #56	; 0x38
    3712:	dd00      	ble.n	3716 <__aeabi_dsub+0x86>
    3714:	e119      	b.n	394a <__aeabi_dsub+0x2ba>
    3716:	2d1f      	cmp	r5, #31
    3718:	dd00      	ble.n	371c <__aeabi_dsub+0x8c>
    371a:	e14c      	b.n	39b6 <__aeabi_dsub+0x326>
    371c:	2320      	movs	r3, #32
    371e:	000f      	movs	r7, r1
    3720:	1b5b      	subs	r3, r3, r5
    3722:	0010      	movs	r0, r2
    3724:	409a      	lsls	r2, r3
    3726:	409f      	lsls	r7, r3
    3728:	40e8      	lsrs	r0, r5
    372a:	1e53      	subs	r3, r2, #1
    372c:	419a      	sbcs	r2, r3
    372e:	40e9      	lsrs	r1, r5
    3730:	4307      	orrs	r7, r0
    3732:	4317      	orrs	r7, r2
    3734:	4653      	mov	r3, sl
    3736:	1bdf      	subs	r7, r3, r7
    3738:	1a61      	subs	r1, r4, r1
    373a:	45ba      	cmp	sl, r7
    373c:	41a4      	sbcs	r4, r4
    373e:	4264      	negs	r4, r4
    3740:	1b0c      	subs	r4, r1, r4
    3742:	0223      	lsls	r3, r4, #8
    3744:	d400      	bmi.n	3748 <__aeabi_dsub+0xb8>
    3746:	e0c5      	b.n	38d4 <__aeabi_dsub+0x244>
    3748:	0264      	lsls	r4, r4, #9
    374a:	0a65      	lsrs	r5, r4, #9
    374c:	2d00      	cmp	r5, #0
    374e:	d100      	bne.n	3752 <__aeabi_dsub+0xc2>
    3750:	e0f6      	b.n	3940 <__aeabi_dsub+0x2b0>
    3752:	0028      	movs	r0, r5
    3754:	f000 fb9e 	bl	3e94 <__clzsi2>
    3758:	0003      	movs	r3, r0
    375a:	3b08      	subs	r3, #8
    375c:	2b1f      	cmp	r3, #31
    375e:	dd00      	ble.n	3762 <__aeabi_dsub+0xd2>
    3760:	e0e9      	b.n	3936 <__aeabi_dsub+0x2a6>
    3762:	2220      	movs	r2, #32
    3764:	003c      	movs	r4, r7
    3766:	1ad2      	subs	r2, r2, r3
    3768:	409d      	lsls	r5, r3
    376a:	40d4      	lsrs	r4, r2
    376c:	409f      	lsls	r7, r3
    376e:	4325      	orrs	r5, r4
    3770:	429e      	cmp	r6, r3
    3772:	dd00      	ble.n	3776 <__aeabi_dsub+0xe6>
    3774:	e0db      	b.n	392e <__aeabi_dsub+0x29e>
    3776:	1b9e      	subs	r6, r3, r6
    3778:	1c73      	adds	r3, r6, #1
    377a:	2b1f      	cmp	r3, #31
    377c:	dd00      	ble.n	3780 <__aeabi_dsub+0xf0>
    377e:	e10a      	b.n	3996 <__aeabi_dsub+0x306>
    3780:	2220      	movs	r2, #32
    3782:	0038      	movs	r0, r7
    3784:	1ad2      	subs	r2, r2, r3
    3786:	0029      	movs	r1, r5
    3788:	4097      	lsls	r7, r2
    378a:	002c      	movs	r4, r5
    378c:	4091      	lsls	r1, r2
    378e:	40d8      	lsrs	r0, r3
    3790:	1e7a      	subs	r2, r7, #1
    3792:	4197      	sbcs	r7, r2
    3794:	40dc      	lsrs	r4, r3
    3796:	2600      	movs	r6, #0
    3798:	4301      	orrs	r1, r0
    379a:	430f      	orrs	r7, r1
    379c:	077b      	lsls	r3, r7, #29
    379e:	d009      	beq.n	37b4 <__aeabi_dsub+0x124>
    37a0:	230f      	movs	r3, #15
    37a2:	403b      	ands	r3, r7
    37a4:	2b04      	cmp	r3, #4
    37a6:	d005      	beq.n	37b4 <__aeabi_dsub+0x124>
    37a8:	1d3b      	adds	r3, r7, #4
    37aa:	42bb      	cmp	r3, r7
    37ac:	41bf      	sbcs	r7, r7
    37ae:	427f      	negs	r7, r7
    37b0:	19e4      	adds	r4, r4, r7
    37b2:	001f      	movs	r7, r3
    37b4:	0223      	lsls	r3, r4, #8
    37b6:	d525      	bpl.n	3804 <__aeabi_dsub+0x174>
    37b8:	4b86      	ldr	r3, [pc, #536]	; (39d4 <__aeabi_dsub+0x344>)
    37ba:	3601      	adds	r6, #1
    37bc:	429e      	cmp	r6, r3
    37be:	d100      	bne.n	37c2 <__aeabi_dsub+0x132>
    37c0:	e0af      	b.n	3922 <__aeabi_dsub+0x292>
    37c2:	4b85      	ldr	r3, [pc, #532]	; (39d8 <__aeabi_dsub+0x348>)
    37c4:	2501      	movs	r5, #1
    37c6:	401c      	ands	r4, r3
    37c8:	4643      	mov	r3, r8
    37ca:	0762      	lsls	r2, r4, #29
    37cc:	08ff      	lsrs	r7, r7, #3
    37ce:	0264      	lsls	r4, r4, #9
    37d0:	0576      	lsls	r6, r6, #21
    37d2:	4317      	orrs	r7, r2
    37d4:	0b24      	lsrs	r4, r4, #12
    37d6:	0d76      	lsrs	r6, r6, #21
    37d8:	401d      	ands	r5, r3
    37da:	2100      	movs	r1, #0
    37dc:	0324      	lsls	r4, r4, #12
    37de:	0b23      	lsrs	r3, r4, #12
    37e0:	0d0c      	lsrs	r4, r1, #20
    37e2:	4a7e      	ldr	r2, [pc, #504]	; (39dc <__aeabi_dsub+0x34c>)
    37e4:	0524      	lsls	r4, r4, #20
    37e6:	431c      	orrs	r4, r3
    37e8:	4014      	ands	r4, r2
    37ea:	0533      	lsls	r3, r6, #20
    37ec:	4323      	orrs	r3, r4
    37ee:	005b      	lsls	r3, r3, #1
    37f0:	07ed      	lsls	r5, r5, #31
    37f2:	085b      	lsrs	r3, r3, #1
    37f4:	432b      	orrs	r3, r5
    37f6:	0038      	movs	r0, r7
    37f8:	0019      	movs	r1, r3
    37fa:	bc1c      	pop	{r2, r3, r4}
    37fc:	4690      	mov	r8, r2
    37fe:	4699      	mov	r9, r3
    3800:	46a2      	mov	sl, r4
    3802:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3804:	2501      	movs	r5, #1
    3806:	4643      	mov	r3, r8
    3808:	0762      	lsls	r2, r4, #29
    380a:	08ff      	lsrs	r7, r7, #3
    380c:	4317      	orrs	r7, r2
    380e:	08e4      	lsrs	r4, r4, #3
    3810:	401d      	ands	r5, r3
    3812:	4b70      	ldr	r3, [pc, #448]	; (39d4 <__aeabi_dsub+0x344>)
    3814:	429e      	cmp	r6, r3
    3816:	d036      	beq.n	3886 <__aeabi_dsub+0x1f6>
    3818:	0324      	lsls	r4, r4, #12
    381a:	0576      	lsls	r6, r6, #21
    381c:	0b24      	lsrs	r4, r4, #12
    381e:	0d76      	lsrs	r6, r6, #21
    3820:	e7db      	b.n	37da <__aeabi_dsub+0x14a>
    3822:	4663      	mov	r3, ip
    3824:	1af3      	subs	r3, r6, r3
    3826:	2b00      	cmp	r3, #0
    3828:	dc00      	bgt.n	382c <__aeabi_dsub+0x19c>
    382a:	e094      	b.n	3956 <__aeabi_dsub+0x2c6>
    382c:	4660      	mov	r0, ip
    382e:	2800      	cmp	r0, #0
    3830:	d035      	beq.n	389e <__aeabi_dsub+0x20e>
    3832:	4868      	ldr	r0, [pc, #416]	; (39d4 <__aeabi_dsub+0x344>)
    3834:	4286      	cmp	r6, r0
    3836:	d0b1      	beq.n	379c <__aeabi_dsub+0x10c>
    3838:	2780      	movs	r7, #128	; 0x80
    383a:	043f      	lsls	r7, r7, #16
    383c:	4339      	orrs	r1, r7
    383e:	2b38      	cmp	r3, #56	; 0x38
    3840:	dc00      	bgt.n	3844 <__aeabi_dsub+0x1b4>
    3842:	e0fd      	b.n	3a40 <__aeabi_dsub+0x3b0>
    3844:	430a      	orrs	r2, r1
    3846:	0017      	movs	r7, r2
    3848:	2100      	movs	r1, #0
    384a:	1e7a      	subs	r2, r7, #1
    384c:	4197      	sbcs	r7, r2
    384e:	4457      	add	r7, sl
    3850:	4557      	cmp	r7, sl
    3852:	4180      	sbcs	r0, r0
    3854:	1909      	adds	r1, r1, r4
    3856:	4244      	negs	r4, r0
    3858:	190c      	adds	r4, r1, r4
    385a:	0223      	lsls	r3, r4, #8
    385c:	d53a      	bpl.n	38d4 <__aeabi_dsub+0x244>
    385e:	4b5d      	ldr	r3, [pc, #372]	; (39d4 <__aeabi_dsub+0x344>)
    3860:	3601      	adds	r6, #1
    3862:	429e      	cmp	r6, r3
    3864:	d100      	bne.n	3868 <__aeabi_dsub+0x1d8>
    3866:	e14b      	b.n	3b00 <__aeabi_dsub+0x470>
    3868:	2201      	movs	r2, #1
    386a:	4b5b      	ldr	r3, [pc, #364]	; (39d8 <__aeabi_dsub+0x348>)
    386c:	401c      	ands	r4, r3
    386e:	087b      	lsrs	r3, r7, #1
    3870:	4017      	ands	r7, r2
    3872:	431f      	orrs	r7, r3
    3874:	07e2      	lsls	r2, r4, #31
    3876:	4317      	orrs	r7, r2
    3878:	0864      	lsrs	r4, r4, #1
    387a:	e78f      	b.n	379c <__aeabi_dsub+0x10c>
    387c:	0008      	movs	r0, r1
    387e:	4310      	orrs	r0, r2
    3880:	d000      	beq.n	3884 <__aeabi_dsub+0x1f4>
    3882:	e724      	b.n	36ce <__aeabi_dsub+0x3e>
    3884:	e721      	b.n	36ca <__aeabi_dsub+0x3a>
    3886:	0023      	movs	r3, r4
    3888:	433b      	orrs	r3, r7
    388a:	d100      	bne.n	388e <__aeabi_dsub+0x1fe>
    388c:	e1b9      	b.n	3c02 <__aeabi_dsub+0x572>
    388e:	2280      	movs	r2, #128	; 0x80
    3890:	0312      	lsls	r2, r2, #12
    3892:	4314      	orrs	r4, r2
    3894:	0324      	lsls	r4, r4, #12
    3896:	0b24      	lsrs	r4, r4, #12
    3898:	e79f      	b.n	37da <__aeabi_dsub+0x14a>
    389a:	002e      	movs	r6, r5
    389c:	e77e      	b.n	379c <__aeabi_dsub+0x10c>
    389e:	0008      	movs	r0, r1
    38a0:	4310      	orrs	r0, r2
    38a2:	d100      	bne.n	38a6 <__aeabi_dsub+0x216>
    38a4:	e0ca      	b.n	3a3c <__aeabi_dsub+0x3ac>
    38a6:	1e58      	subs	r0, r3, #1
    38a8:	4684      	mov	ip, r0
    38aa:	2800      	cmp	r0, #0
    38ac:	d000      	beq.n	38b0 <__aeabi_dsub+0x220>
    38ae:	e0e7      	b.n	3a80 <__aeabi_dsub+0x3f0>
    38b0:	4452      	add	r2, sl
    38b2:	4552      	cmp	r2, sl
    38b4:	4180      	sbcs	r0, r0
    38b6:	1864      	adds	r4, r4, r1
    38b8:	4240      	negs	r0, r0
    38ba:	1824      	adds	r4, r4, r0
    38bc:	0017      	movs	r7, r2
    38be:	2601      	movs	r6, #1
    38c0:	0223      	lsls	r3, r4, #8
    38c2:	d507      	bpl.n	38d4 <__aeabi_dsub+0x244>
    38c4:	2602      	movs	r6, #2
    38c6:	e7cf      	b.n	3868 <__aeabi_dsub+0x1d8>
    38c8:	4664      	mov	r4, ip
    38ca:	432c      	orrs	r4, r5
    38cc:	d100      	bne.n	38d0 <__aeabi_dsub+0x240>
    38ce:	e1b3      	b.n	3c38 <__aeabi_dsub+0x5a8>
    38d0:	002c      	movs	r4, r5
    38d2:	4667      	mov	r7, ip
    38d4:	077b      	lsls	r3, r7, #29
    38d6:	d000      	beq.n	38da <__aeabi_dsub+0x24a>
    38d8:	e762      	b.n	37a0 <__aeabi_dsub+0x110>
    38da:	0763      	lsls	r3, r4, #29
    38dc:	08ff      	lsrs	r7, r7, #3
    38de:	431f      	orrs	r7, r3
    38e0:	2501      	movs	r5, #1
    38e2:	4643      	mov	r3, r8
    38e4:	08e4      	lsrs	r4, r4, #3
    38e6:	401d      	ands	r5, r3
    38e8:	e793      	b.n	3812 <__aeabi_dsub+0x182>
    38ea:	2d00      	cmp	r5, #0
    38ec:	d178      	bne.n	39e0 <__aeabi_dsub+0x350>
    38ee:	1c75      	adds	r5, r6, #1
    38f0:	056d      	lsls	r5, r5, #21
    38f2:	0d6d      	lsrs	r5, r5, #21
    38f4:	2d01      	cmp	r5, #1
    38f6:	dc00      	bgt.n	38fa <__aeabi_dsub+0x26a>
    38f8:	e0f2      	b.n	3ae0 <__aeabi_dsub+0x450>
    38fa:	4650      	mov	r0, sl
    38fc:	1a80      	subs	r0, r0, r2
    38fe:	4582      	cmp	sl, r0
    3900:	41bf      	sbcs	r7, r7
    3902:	1a65      	subs	r5, r4, r1
    3904:	427f      	negs	r7, r7
    3906:	1bed      	subs	r5, r5, r7
    3908:	4684      	mov	ip, r0
    390a:	0228      	lsls	r0, r5, #8
    390c:	d400      	bmi.n	3910 <__aeabi_dsub+0x280>
    390e:	e08c      	b.n	3a2a <__aeabi_dsub+0x39a>
    3910:	4650      	mov	r0, sl
    3912:	1a17      	subs	r7, r2, r0
    3914:	42ba      	cmp	r2, r7
    3916:	4192      	sbcs	r2, r2
    3918:	1b0c      	subs	r4, r1, r4
    391a:	4255      	negs	r5, r2
    391c:	1b65      	subs	r5, r4, r5
    391e:	4698      	mov	r8, r3
    3920:	e714      	b.n	374c <__aeabi_dsub+0xbc>
    3922:	2501      	movs	r5, #1
    3924:	4643      	mov	r3, r8
    3926:	2400      	movs	r4, #0
    3928:	401d      	ands	r5, r3
    392a:	2700      	movs	r7, #0
    392c:	e755      	b.n	37da <__aeabi_dsub+0x14a>
    392e:	4c2a      	ldr	r4, [pc, #168]	; (39d8 <__aeabi_dsub+0x348>)
    3930:	1af6      	subs	r6, r6, r3
    3932:	402c      	ands	r4, r5
    3934:	e732      	b.n	379c <__aeabi_dsub+0x10c>
    3936:	003d      	movs	r5, r7
    3938:	3828      	subs	r0, #40	; 0x28
    393a:	4085      	lsls	r5, r0
    393c:	2700      	movs	r7, #0
    393e:	e717      	b.n	3770 <__aeabi_dsub+0xe0>
    3940:	0038      	movs	r0, r7
    3942:	f000 faa7 	bl	3e94 <__clzsi2>
    3946:	3020      	adds	r0, #32
    3948:	e706      	b.n	3758 <__aeabi_dsub+0xc8>
    394a:	430a      	orrs	r2, r1
    394c:	0017      	movs	r7, r2
    394e:	2100      	movs	r1, #0
    3950:	1e7a      	subs	r2, r7, #1
    3952:	4197      	sbcs	r7, r2
    3954:	e6ee      	b.n	3734 <__aeabi_dsub+0xa4>
    3956:	2b00      	cmp	r3, #0
    3958:	d000      	beq.n	395c <__aeabi_dsub+0x2cc>
    395a:	e0e5      	b.n	3b28 <__aeabi_dsub+0x498>
    395c:	1c73      	adds	r3, r6, #1
    395e:	469c      	mov	ip, r3
    3960:	055b      	lsls	r3, r3, #21
    3962:	0d5b      	lsrs	r3, r3, #21
    3964:	2b01      	cmp	r3, #1
    3966:	dc00      	bgt.n	396a <__aeabi_dsub+0x2da>
    3968:	e09f      	b.n	3aaa <__aeabi_dsub+0x41a>
    396a:	4b1a      	ldr	r3, [pc, #104]	; (39d4 <__aeabi_dsub+0x344>)
    396c:	459c      	cmp	ip, r3
    396e:	d100      	bne.n	3972 <__aeabi_dsub+0x2e2>
    3970:	e0c5      	b.n	3afe <__aeabi_dsub+0x46e>
    3972:	4452      	add	r2, sl
    3974:	4552      	cmp	r2, sl
    3976:	4180      	sbcs	r0, r0
    3978:	1864      	adds	r4, r4, r1
    397a:	4240      	negs	r0, r0
    397c:	1824      	adds	r4, r4, r0
    397e:	07e7      	lsls	r7, r4, #31
    3980:	0852      	lsrs	r2, r2, #1
    3982:	4317      	orrs	r7, r2
    3984:	0864      	lsrs	r4, r4, #1
    3986:	4666      	mov	r6, ip
    3988:	e708      	b.n	379c <__aeabi_dsub+0x10c>
    398a:	4812      	ldr	r0, [pc, #72]	; (39d4 <__aeabi_dsub+0x344>)
    398c:	4285      	cmp	r5, r0
    398e:	d100      	bne.n	3992 <__aeabi_dsub+0x302>
    3990:	e085      	b.n	3a9e <__aeabi_dsub+0x40e>
    3992:	001d      	movs	r5, r3
    3994:	e6bc      	b.n	3710 <__aeabi_dsub+0x80>
    3996:	0029      	movs	r1, r5
    3998:	3e1f      	subs	r6, #31
    399a:	40f1      	lsrs	r1, r6
    399c:	2b20      	cmp	r3, #32
    399e:	d100      	bne.n	39a2 <__aeabi_dsub+0x312>
    39a0:	e07f      	b.n	3aa2 <__aeabi_dsub+0x412>
    39a2:	2240      	movs	r2, #64	; 0x40
    39a4:	1ad3      	subs	r3, r2, r3
    39a6:	409d      	lsls	r5, r3
    39a8:	432f      	orrs	r7, r5
    39aa:	1e7d      	subs	r5, r7, #1
    39ac:	41af      	sbcs	r7, r5
    39ae:	2400      	movs	r4, #0
    39b0:	430f      	orrs	r7, r1
    39b2:	2600      	movs	r6, #0
    39b4:	e78e      	b.n	38d4 <__aeabi_dsub+0x244>
    39b6:	002b      	movs	r3, r5
    39b8:	000f      	movs	r7, r1
    39ba:	3b20      	subs	r3, #32
    39bc:	40df      	lsrs	r7, r3
    39be:	2d20      	cmp	r5, #32
    39c0:	d071      	beq.n	3aa6 <__aeabi_dsub+0x416>
    39c2:	2340      	movs	r3, #64	; 0x40
    39c4:	1b5d      	subs	r5, r3, r5
    39c6:	40a9      	lsls	r1, r5
    39c8:	430a      	orrs	r2, r1
    39ca:	1e51      	subs	r1, r2, #1
    39cc:	418a      	sbcs	r2, r1
    39ce:	2100      	movs	r1, #0
    39d0:	4317      	orrs	r7, r2
    39d2:	e6af      	b.n	3734 <__aeabi_dsub+0xa4>
    39d4:	000007ff 	.word	0x000007ff
    39d8:	ff7fffff 	.word	0xff7fffff
    39dc:	800fffff 	.word	0x800fffff
    39e0:	2e00      	cmp	r6, #0
    39e2:	d03e      	beq.n	3a62 <__aeabi_dsub+0x3d2>
    39e4:	4eb3      	ldr	r6, [pc, #716]	; (3cb4 <__aeabi_dsub+0x624>)
    39e6:	45b4      	cmp	ip, r6
    39e8:	d045      	beq.n	3a76 <__aeabi_dsub+0x3e6>
    39ea:	2680      	movs	r6, #128	; 0x80
    39ec:	0436      	lsls	r6, r6, #16
    39ee:	426d      	negs	r5, r5
    39f0:	4334      	orrs	r4, r6
    39f2:	2d38      	cmp	r5, #56	; 0x38
    39f4:	dd00      	ble.n	39f8 <__aeabi_dsub+0x368>
    39f6:	e0a8      	b.n	3b4a <__aeabi_dsub+0x4ba>
    39f8:	2d1f      	cmp	r5, #31
    39fa:	dd00      	ble.n	39fe <__aeabi_dsub+0x36e>
    39fc:	e11f      	b.n	3c3e <__aeabi_dsub+0x5ae>
    39fe:	2620      	movs	r6, #32
    3a00:	0027      	movs	r7, r4
    3a02:	4650      	mov	r0, sl
    3a04:	1b76      	subs	r6, r6, r5
    3a06:	40b7      	lsls	r7, r6
    3a08:	40e8      	lsrs	r0, r5
    3a0a:	4307      	orrs	r7, r0
    3a0c:	4650      	mov	r0, sl
    3a0e:	40b0      	lsls	r0, r6
    3a10:	1e46      	subs	r6, r0, #1
    3a12:	41b0      	sbcs	r0, r6
    3a14:	40ec      	lsrs	r4, r5
    3a16:	4338      	orrs	r0, r7
    3a18:	1a17      	subs	r7, r2, r0
    3a1a:	42ba      	cmp	r2, r7
    3a1c:	4192      	sbcs	r2, r2
    3a1e:	1b0c      	subs	r4, r1, r4
    3a20:	4252      	negs	r2, r2
    3a22:	1aa4      	subs	r4, r4, r2
    3a24:	4666      	mov	r6, ip
    3a26:	4698      	mov	r8, r3
    3a28:	e68b      	b.n	3742 <__aeabi_dsub+0xb2>
    3a2a:	4664      	mov	r4, ip
    3a2c:	4667      	mov	r7, ip
    3a2e:	432c      	orrs	r4, r5
    3a30:	d000      	beq.n	3a34 <__aeabi_dsub+0x3a4>
    3a32:	e68b      	b.n	374c <__aeabi_dsub+0xbc>
    3a34:	2500      	movs	r5, #0
    3a36:	2600      	movs	r6, #0
    3a38:	2700      	movs	r7, #0
    3a3a:	e6ea      	b.n	3812 <__aeabi_dsub+0x182>
    3a3c:	001e      	movs	r6, r3
    3a3e:	e6ad      	b.n	379c <__aeabi_dsub+0x10c>
    3a40:	2b1f      	cmp	r3, #31
    3a42:	dc60      	bgt.n	3b06 <__aeabi_dsub+0x476>
    3a44:	2720      	movs	r7, #32
    3a46:	1af8      	subs	r0, r7, r3
    3a48:	000f      	movs	r7, r1
    3a4a:	4684      	mov	ip, r0
    3a4c:	4087      	lsls	r7, r0
    3a4e:	0010      	movs	r0, r2
    3a50:	40d8      	lsrs	r0, r3
    3a52:	4307      	orrs	r7, r0
    3a54:	4660      	mov	r0, ip
    3a56:	4082      	lsls	r2, r0
    3a58:	1e50      	subs	r0, r2, #1
    3a5a:	4182      	sbcs	r2, r0
    3a5c:	40d9      	lsrs	r1, r3
    3a5e:	4317      	orrs	r7, r2
    3a60:	e6f5      	b.n	384e <__aeabi_dsub+0x1be>
    3a62:	0026      	movs	r6, r4
    3a64:	4650      	mov	r0, sl
    3a66:	4306      	orrs	r6, r0
    3a68:	d005      	beq.n	3a76 <__aeabi_dsub+0x3e6>
    3a6a:	43ed      	mvns	r5, r5
    3a6c:	2d00      	cmp	r5, #0
    3a6e:	d0d3      	beq.n	3a18 <__aeabi_dsub+0x388>
    3a70:	4e90      	ldr	r6, [pc, #576]	; (3cb4 <__aeabi_dsub+0x624>)
    3a72:	45b4      	cmp	ip, r6
    3a74:	d1bd      	bne.n	39f2 <__aeabi_dsub+0x362>
    3a76:	000c      	movs	r4, r1
    3a78:	0017      	movs	r7, r2
    3a7a:	4666      	mov	r6, ip
    3a7c:	4698      	mov	r8, r3
    3a7e:	e68d      	b.n	379c <__aeabi_dsub+0x10c>
    3a80:	488c      	ldr	r0, [pc, #560]	; (3cb4 <__aeabi_dsub+0x624>)
    3a82:	4283      	cmp	r3, r0
    3a84:	d00b      	beq.n	3a9e <__aeabi_dsub+0x40e>
    3a86:	4663      	mov	r3, ip
    3a88:	e6d9      	b.n	383e <__aeabi_dsub+0x1ae>
    3a8a:	2d00      	cmp	r5, #0
    3a8c:	d000      	beq.n	3a90 <__aeabi_dsub+0x400>
    3a8e:	e096      	b.n	3bbe <__aeabi_dsub+0x52e>
    3a90:	0008      	movs	r0, r1
    3a92:	4310      	orrs	r0, r2
    3a94:	d100      	bne.n	3a98 <__aeabi_dsub+0x408>
    3a96:	e0e2      	b.n	3c5e <__aeabi_dsub+0x5ce>
    3a98:	000c      	movs	r4, r1
    3a9a:	0017      	movs	r7, r2
    3a9c:	4698      	mov	r8, r3
    3a9e:	4e85      	ldr	r6, [pc, #532]	; (3cb4 <__aeabi_dsub+0x624>)
    3aa0:	e67c      	b.n	379c <__aeabi_dsub+0x10c>
    3aa2:	2500      	movs	r5, #0
    3aa4:	e780      	b.n	39a8 <__aeabi_dsub+0x318>
    3aa6:	2100      	movs	r1, #0
    3aa8:	e78e      	b.n	39c8 <__aeabi_dsub+0x338>
    3aaa:	0023      	movs	r3, r4
    3aac:	4650      	mov	r0, sl
    3aae:	4303      	orrs	r3, r0
    3ab0:	2e00      	cmp	r6, #0
    3ab2:	d000      	beq.n	3ab6 <__aeabi_dsub+0x426>
    3ab4:	e0a8      	b.n	3c08 <__aeabi_dsub+0x578>
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d100      	bne.n	3abc <__aeabi_dsub+0x42c>
    3aba:	e0de      	b.n	3c7a <__aeabi_dsub+0x5ea>
    3abc:	000b      	movs	r3, r1
    3abe:	4313      	orrs	r3, r2
    3ac0:	d100      	bne.n	3ac4 <__aeabi_dsub+0x434>
    3ac2:	e66b      	b.n	379c <__aeabi_dsub+0x10c>
    3ac4:	4452      	add	r2, sl
    3ac6:	4552      	cmp	r2, sl
    3ac8:	4180      	sbcs	r0, r0
    3aca:	1864      	adds	r4, r4, r1
    3acc:	4240      	negs	r0, r0
    3ace:	1824      	adds	r4, r4, r0
    3ad0:	0017      	movs	r7, r2
    3ad2:	0223      	lsls	r3, r4, #8
    3ad4:	d400      	bmi.n	3ad8 <__aeabi_dsub+0x448>
    3ad6:	e6fd      	b.n	38d4 <__aeabi_dsub+0x244>
    3ad8:	4b77      	ldr	r3, [pc, #476]	; (3cb8 <__aeabi_dsub+0x628>)
    3ada:	4666      	mov	r6, ip
    3adc:	401c      	ands	r4, r3
    3ade:	e65d      	b.n	379c <__aeabi_dsub+0x10c>
    3ae0:	0025      	movs	r5, r4
    3ae2:	4650      	mov	r0, sl
    3ae4:	4305      	orrs	r5, r0
    3ae6:	2e00      	cmp	r6, #0
    3ae8:	d1cf      	bne.n	3a8a <__aeabi_dsub+0x3fa>
    3aea:	2d00      	cmp	r5, #0
    3aec:	d14f      	bne.n	3b8e <__aeabi_dsub+0x4fe>
    3aee:	000c      	movs	r4, r1
    3af0:	4314      	orrs	r4, r2
    3af2:	d100      	bne.n	3af6 <__aeabi_dsub+0x466>
    3af4:	e0a0      	b.n	3c38 <__aeabi_dsub+0x5a8>
    3af6:	000c      	movs	r4, r1
    3af8:	0017      	movs	r7, r2
    3afa:	4698      	mov	r8, r3
    3afc:	e64e      	b.n	379c <__aeabi_dsub+0x10c>
    3afe:	4666      	mov	r6, ip
    3b00:	2400      	movs	r4, #0
    3b02:	2700      	movs	r7, #0
    3b04:	e685      	b.n	3812 <__aeabi_dsub+0x182>
    3b06:	001f      	movs	r7, r3
    3b08:	0008      	movs	r0, r1
    3b0a:	3f20      	subs	r7, #32
    3b0c:	40f8      	lsrs	r0, r7
    3b0e:	0007      	movs	r7, r0
    3b10:	2b20      	cmp	r3, #32
    3b12:	d100      	bne.n	3b16 <__aeabi_dsub+0x486>
    3b14:	e08e      	b.n	3c34 <__aeabi_dsub+0x5a4>
    3b16:	2040      	movs	r0, #64	; 0x40
    3b18:	1ac3      	subs	r3, r0, r3
    3b1a:	4099      	lsls	r1, r3
    3b1c:	430a      	orrs	r2, r1
    3b1e:	1e51      	subs	r1, r2, #1
    3b20:	418a      	sbcs	r2, r1
    3b22:	2100      	movs	r1, #0
    3b24:	4317      	orrs	r7, r2
    3b26:	e692      	b.n	384e <__aeabi_dsub+0x1be>
    3b28:	2e00      	cmp	r6, #0
    3b2a:	d114      	bne.n	3b56 <__aeabi_dsub+0x4c6>
    3b2c:	0026      	movs	r6, r4
    3b2e:	4650      	mov	r0, sl
    3b30:	4306      	orrs	r6, r0
    3b32:	d062      	beq.n	3bfa <__aeabi_dsub+0x56a>
    3b34:	43db      	mvns	r3, r3
    3b36:	2b00      	cmp	r3, #0
    3b38:	d15c      	bne.n	3bf4 <__aeabi_dsub+0x564>
    3b3a:	1887      	adds	r7, r0, r2
    3b3c:	4297      	cmp	r7, r2
    3b3e:	4192      	sbcs	r2, r2
    3b40:	1864      	adds	r4, r4, r1
    3b42:	4252      	negs	r2, r2
    3b44:	18a4      	adds	r4, r4, r2
    3b46:	4666      	mov	r6, ip
    3b48:	e687      	b.n	385a <__aeabi_dsub+0x1ca>
    3b4a:	4650      	mov	r0, sl
    3b4c:	4320      	orrs	r0, r4
    3b4e:	1e44      	subs	r4, r0, #1
    3b50:	41a0      	sbcs	r0, r4
    3b52:	2400      	movs	r4, #0
    3b54:	e760      	b.n	3a18 <__aeabi_dsub+0x388>
    3b56:	4e57      	ldr	r6, [pc, #348]	; (3cb4 <__aeabi_dsub+0x624>)
    3b58:	45b4      	cmp	ip, r6
    3b5a:	d04e      	beq.n	3bfa <__aeabi_dsub+0x56a>
    3b5c:	2680      	movs	r6, #128	; 0x80
    3b5e:	0436      	lsls	r6, r6, #16
    3b60:	425b      	negs	r3, r3
    3b62:	4334      	orrs	r4, r6
    3b64:	2b38      	cmp	r3, #56	; 0x38
    3b66:	dd00      	ble.n	3b6a <__aeabi_dsub+0x4da>
    3b68:	e07f      	b.n	3c6a <__aeabi_dsub+0x5da>
    3b6a:	2b1f      	cmp	r3, #31
    3b6c:	dd00      	ble.n	3b70 <__aeabi_dsub+0x4e0>
    3b6e:	e08b      	b.n	3c88 <__aeabi_dsub+0x5f8>
    3b70:	2620      	movs	r6, #32
    3b72:	0027      	movs	r7, r4
    3b74:	4650      	mov	r0, sl
    3b76:	1af6      	subs	r6, r6, r3
    3b78:	40b7      	lsls	r7, r6
    3b7a:	40d8      	lsrs	r0, r3
    3b7c:	4307      	orrs	r7, r0
    3b7e:	4650      	mov	r0, sl
    3b80:	40b0      	lsls	r0, r6
    3b82:	1e46      	subs	r6, r0, #1
    3b84:	41b0      	sbcs	r0, r6
    3b86:	4307      	orrs	r7, r0
    3b88:	40dc      	lsrs	r4, r3
    3b8a:	18bf      	adds	r7, r7, r2
    3b8c:	e7d6      	b.n	3b3c <__aeabi_dsub+0x4ac>
    3b8e:	000d      	movs	r5, r1
    3b90:	4315      	orrs	r5, r2
    3b92:	d100      	bne.n	3b96 <__aeabi_dsub+0x506>
    3b94:	e602      	b.n	379c <__aeabi_dsub+0x10c>
    3b96:	4650      	mov	r0, sl
    3b98:	1a80      	subs	r0, r0, r2
    3b9a:	4582      	cmp	sl, r0
    3b9c:	41bf      	sbcs	r7, r7
    3b9e:	1a65      	subs	r5, r4, r1
    3ba0:	427f      	negs	r7, r7
    3ba2:	1bed      	subs	r5, r5, r7
    3ba4:	4684      	mov	ip, r0
    3ba6:	0228      	lsls	r0, r5, #8
    3ba8:	d400      	bmi.n	3bac <__aeabi_dsub+0x51c>
    3baa:	e68d      	b.n	38c8 <__aeabi_dsub+0x238>
    3bac:	4650      	mov	r0, sl
    3bae:	1a17      	subs	r7, r2, r0
    3bb0:	42ba      	cmp	r2, r7
    3bb2:	4192      	sbcs	r2, r2
    3bb4:	1b0c      	subs	r4, r1, r4
    3bb6:	4252      	negs	r2, r2
    3bb8:	1aa4      	subs	r4, r4, r2
    3bba:	4698      	mov	r8, r3
    3bbc:	e5ee      	b.n	379c <__aeabi_dsub+0x10c>
    3bbe:	000d      	movs	r5, r1
    3bc0:	4315      	orrs	r5, r2
    3bc2:	d100      	bne.n	3bc6 <__aeabi_dsub+0x536>
    3bc4:	e76b      	b.n	3a9e <__aeabi_dsub+0x40e>
    3bc6:	4650      	mov	r0, sl
    3bc8:	0767      	lsls	r7, r4, #29
    3bca:	08c0      	lsrs	r0, r0, #3
    3bcc:	4307      	orrs	r7, r0
    3bce:	2080      	movs	r0, #128	; 0x80
    3bd0:	08e4      	lsrs	r4, r4, #3
    3bd2:	0300      	lsls	r0, r0, #12
    3bd4:	4204      	tst	r4, r0
    3bd6:	d007      	beq.n	3be8 <__aeabi_dsub+0x558>
    3bd8:	08cd      	lsrs	r5, r1, #3
    3bda:	4205      	tst	r5, r0
    3bdc:	d104      	bne.n	3be8 <__aeabi_dsub+0x558>
    3bde:	002c      	movs	r4, r5
    3be0:	4698      	mov	r8, r3
    3be2:	08d7      	lsrs	r7, r2, #3
    3be4:	0749      	lsls	r1, r1, #29
    3be6:	430f      	orrs	r7, r1
    3be8:	0f7b      	lsrs	r3, r7, #29
    3bea:	00e4      	lsls	r4, r4, #3
    3bec:	431c      	orrs	r4, r3
    3bee:	00ff      	lsls	r7, r7, #3
    3bf0:	4e30      	ldr	r6, [pc, #192]	; (3cb4 <__aeabi_dsub+0x624>)
    3bf2:	e5d3      	b.n	379c <__aeabi_dsub+0x10c>
    3bf4:	4e2f      	ldr	r6, [pc, #188]	; (3cb4 <__aeabi_dsub+0x624>)
    3bf6:	45b4      	cmp	ip, r6
    3bf8:	d1b4      	bne.n	3b64 <__aeabi_dsub+0x4d4>
    3bfa:	000c      	movs	r4, r1
    3bfc:	0017      	movs	r7, r2
    3bfe:	4666      	mov	r6, ip
    3c00:	e5cc      	b.n	379c <__aeabi_dsub+0x10c>
    3c02:	2700      	movs	r7, #0
    3c04:	2400      	movs	r4, #0
    3c06:	e5e8      	b.n	37da <__aeabi_dsub+0x14a>
    3c08:	2b00      	cmp	r3, #0
    3c0a:	d039      	beq.n	3c80 <__aeabi_dsub+0x5f0>
    3c0c:	000b      	movs	r3, r1
    3c0e:	4313      	orrs	r3, r2
    3c10:	d100      	bne.n	3c14 <__aeabi_dsub+0x584>
    3c12:	e744      	b.n	3a9e <__aeabi_dsub+0x40e>
    3c14:	08c0      	lsrs	r0, r0, #3
    3c16:	0767      	lsls	r7, r4, #29
    3c18:	4307      	orrs	r7, r0
    3c1a:	2080      	movs	r0, #128	; 0x80
    3c1c:	08e4      	lsrs	r4, r4, #3
    3c1e:	0300      	lsls	r0, r0, #12
    3c20:	4204      	tst	r4, r0
    3c22:	d0e1      	beq.n	3be8 <__aeabi_dsub+0x558>
    3c24:	08cb      	lsrs	r3, r1, #3
    3c26:	4203      	tst	r3, r0
    3c28:	d1de      	bne.n	3be8 <__aeabi_dsub+0x558>
    3c2a:	08d7      	lsrs	r7, r2, #3
    3c2c:	0749      	lsls	r1, r1, #29
    3c2e:	430f      	orrs	r7, r1
    3c30:	001c      	movs	r4, r3
    3c32:	e7d9      	b.n	3be8 <__aeabi_dsub+0x558>
    3c34:	2100      	movs	r1, #0
    3c36:	e771      	b.n	3b1c <__aeabi_dsub+0x48c>
    3c38:	2500      	movs	r5, #0
    3c3a:	2700      	movs	r7, #0
    3c3c:	e5e9      	b.n	3812 <__aeabi_dsub+0x182>
    3c3e:	002e      	movs	r6, r5
    3c40:	0027      	movs	r7, r4
    3c42:	3e20      	subs	r6, #32
    3c44:	40f7      	lsrs	r7, r6
    3c46:	2d20      	cmp	r5, #32
    3c48:	d02f      	beq.n	3caa <__aeabi_dsub+0x61a>
    3c4a:	2640      	movs	r6, #64	; 0x40
    3c4c:	1b75      	subs	r5, r6, r5
    3c4e:	40ac      	lsls	r4, r5
    3c50:	4650      	mov	r0, sl
    3c52:	4320      	orrs	r0, r4
    3c54:	1e44      	subs	r4, r0, #1
    3c56:	41a0      	sbcs	r0, r4
    3c58:	2400      	movs	r4, #0
    3c5a:	4338      	orrs	r0, r7
    3c5c:	e6dc      	b.n	3a18 <__aeabi_dsub+0x388>
    3c5e:	2480      	movs	r4, #128	; 0x80
    3c60:	2500      	movs	r5, #0
    3c62:	0324      	lsls	r4, r4, #12
    3c64:	4e13      	ldr	r6, [pc, #76]	; (3cb4 <__aeabi_dsub+0x624>)
    3c66:	2700      	movs	r7, #0
    3c68:	e5d3      	b.n	3812 <__aeabi_dsub+0x182>
    3c6a:	4650      	mov	r0, sl
    3c6c:	4320      	orrs	r0, r4
    3c6e:	0007      	movs	r7, r0
    3c70:	1e78      	subs	r0, r7, #1
    3c72:	4187      	sbcs	r7, r0
    3c74:	2400      	movs	r4, #0
    3c76:	18bf      	adds	r7, r7, r2
    3c78:	e760      	b.n	3b3c <__aeabi_dsub+0x4ac>
    3c7a:	000c      	movs	r4, r1
    3c7c:	0017      	movs	r7, r2
    3c7e:	e58d      	b.n	379c <__aeabi_dsub+0x10c>
    3c80:	000c      	movs	r4, r1
    3c82:	0017      	movs	r7, r2
    3c84:	4e0b      	ldr	r6, [pc, #44]	; (3cb4 <__aeabi_dsub+0x624>)
    3c86:	e589      	b.n	379c <__aeabi_dsub+0x10c>
    3c88:	001e      	movs	r6, r3
    3c8a:	0027      	movs	r7, r4
    3c8c:	3e20      	subs	r6, #32
    3c8e:	40f7      	lsrs	r7, r6
    3c90:	2b20      	cmp	r3, #32
    3c92:	d00c      	beq.n	3cae <__aeabi_dsub+0x61e>
    3c94:	2640      	movs	r6, #64	; 0x40
    3c96:	1af3      	subs	r3, r6, r3
    3c98:	409c      	lsls	r4, r3
    3c9a:	4650      	mov	r0, sl
    3c9c:	4320      	orrs	r0, r4
    3c9e:	1e44      	subs	r4, r0, #1
    3ca0:	41a0      	sbcs	r0, r4
    3ca2:	4307      	orrs	r7, r0
    3ca4:	2400      	movs	r4, #0
    3ca6:	18bf      	adds	r7, r7, r2
    3ca8:	e748      	b.n	3b3c <__aeabi_dsub+0x4ac>
    3caa:	2400      	movs	r4, #0
    3cac:	e7d0      	b.n	3c50 <__aeabi_dsub+0x5c0>
    3cae:	2400      	movs	r4, #0
    3cb0:	e7f3      	b.n	3c9a <__aeabi_dsub+0x60a>
    3cb2:	46c0      	nop			; (mov r8, r8)
    3cb4:	000007ff 	.word	0x000007ff
    3cb8:	ff7fffff 	.word	0xff7fffff

00003cbc <__aeabi_d2iz>:
    3cbc:	b530      	push	{r4, r5, lr}
    3cbe:	4d13      	ldr	r5, [pc, #76]	; (3d0c <__aeabi_d2iz+0x50>)
    3cc0:	030a      	lsls	r2, r1, #12
    3cc2:	004b      	lsls	r3, r1, #1
    3cc4:	0b12      	lsrs	r2, r2, #12
    3cc6:	0d5b      	lsrs	r3, r3, #21
    3cc8:	0fc9      	lsrs	r1, r1, #31
    3cca:	2400      	movs	r4, #0
    3ccc:	42ab      	cmp	r3, r5
    3cce:	dd10      	ble.n	3cf2 <__aeabi_d2iz+0x36>
    3cd0:	4c0f      	ldr	r4, [pc, #60]	; (3d10 <__aeabi_d2iz+0x54>)
    3cd2:	42a3      	cmp	r3, r4
    3cd4:	dc0f      	bgt.n	3cf6 <__aeabi_d2iz+0x3a>
    3cd6:	2480      	movs	r4, #128	; 0x80
    3cd8:	4d0e      	ldr	r5, [pc, #56]	; (3d14 <__aeabi_d2iz+0x58>)
    3cda:	0364      	lsls	r4, r4, #13
    3cdc:	4322      	orrs	r2, r4
    3cde:	1aed      	subs	r5, r5, r3
    3ce0:	2d1f      	cmp	r5, #31
    3ce2:	dd0b      	ble.n	3cfc <__aeabi_d2iz+0x40>
    3ce4:	480c      	ldr	r0, [pc, #48]	; (3d18 <__aeabi_d2iz+0x5c>)
    3ce6:	1ac3      	subs	r3, r0, r3
    3ce8:	40da      	lsrs	r2, r3
    3cea:	4254      	negs	r4, r2
    3cec:	2900      	cmp	r1, #0
    3cee:	d100      	bne.n	3cf2 <__aeabi_d2iz+0x36>
    3cf0:	0014      	movs	r4, r2
    3cf2:	0020      	movs	r0, r4
    3cf4:	bd30      	pop	{r4, r5, pc}
    3cf6:	4b09      	ldr	r3, [pc, #36]	; (3d1c <__aeabi_d2iz+0x60>)
    3cf8:	18cc      	adds	r4, r1, r3
    3cfa:	e7fa      	b.n	3cf2 <__aeabi_d2iz+0x36>
    3cfc:	4c08      	ldr	r4, [pc, #32]	; (3d20 <__aeabi_d2iz+0x64>)
    3cfe:	40e8      	lsrs	r0, r5
    3d00:	46a4      	mov	ip, r4
    3d02:	4463      	add	r3, ip
    3d04:	409a      	lsls	r2, r3
    3d06:	4302      	orrs	r2, r0
    3d08:	e7ef      	b.n	3cea <__aeabi_d2iz+0x2e>
    3d0a:	46c0      	nop			; (mov r8, r8)
    3d0c:	000003fe 	.word	0x000003fe
    3d10:	0000041d 	.word	0x0000041d
    3d14:	00000433 	.word	0x00000433
    3d18:	00000413 	.word	0x00000413
    3d1c:	7fffffff 	.word	0x7fffffff
    3d20:	fffffbed 	.word	0xfffffbed

00003d24 <__aeabi_i2d>:
    3d24:	b570      	push	{r4, r5, r6, lr}
    3d26:	2800      	cmp	r0, #0
    3d28:	d030      	beq.n	3d8c <__aeabi_i2d+0x68>
    3d2a:	17c3      	asrs	r3, r0, #31
    3d2c:	18c4      	adds	r4, r0, r3
    3d2e:	405c      	eors	r4, r3
    3d30:	0fc5      	lsrs	r5, r0, #31
    3d32:	0020      	movs	r0, r4
    3d34:	f000 f8ae 	bl	3e94 <__clzsi2>
    3d38:	4b17      	ldr	r3, [pc, #92]	; (3d98 <__aeabi_i2d+0x74>)
    3d3a:	4a18      	ldr	r2, [pc, #96]	; (3d9c <__aeabi_i2d+0x78>)
    3d3c:	1a1b      	subs	r3, r3, r0
    3d3e:	1ad2      	subs	r2, r2, r3
    3d40:	2a1f      	cmp	r2, #31
    3d42:	dd18      	ble.n	3d76 <__aeabi_i2d+0x52>
    3d44:	4a16      	ldr	r2, [pc, #88]	; (3da0 <__aeabi_i2d+0x7c>)
    3d46:	1ad2      	subs	r2, r2, r3
    3d48:	4094      	lsls	r4, r2
    3d4a:	2200      	movs	r2, #0
    3d4c:	0324      	lsls	r4, r4, #12
    3d4e:	055b      	lsls	r3, r3, #21
    3d50:	0b24      	lsrs	r4, r4, #12
    3d52:	0d5b      	lsrs	r3, r3, #21
    3d54:	2100      	movs	r1, #0
    3d56:	0010      	movs	r0, r2
    3d58:	0324      	lsls	r4, r4, #12
    3d5a:	0d0a      	lsrs	r2, r1, #20
    3d5c:	0b24      	lsrs	r4, r4, #12
    3d5e:	0512      	lsls	r2, r2, #20
    3d60:	4322      	orrs	r2, r4
    3d62:	4c10      	ldr	r4, [pc, #64]	; (3da4 <__aeabi_i2d+0x80>)
    3d64:	051b      	lsls	r3, r3, #20
    3d66:	4022      	ands	r2, r4
    3d68:	4313      	orrs	r3, r2
    3d6a:	005b      	lsls	r3, r3, #1
    3d6c:	07ed      	lsls	r5, r5, #31
    3d6e:	085b      	lsrs	r3, r3, #1
    3d70:	432b      	orrs	r3, r5
    3d72:	0019      	movs	r1, r3
    3d74:	bd70      	pop	{r4, r5, r6, pc}
    3d76:	0021      	movs	r1, r4
    3d78:	4091      	lsls	r1, r2
    3d7a:	000a      	movs	r2, r1
    3d7c:	210b      	movs	r1, #11
    3d7e:	1a08      	subs	r0, r1, r0
    3d80:	40c4      	lsrs	r4, r0
    3d82:	055b      	lsls	r3, r3, #21
    3d84:	0324      	lsls	r4, r4, #12
    3d86:	0b24      	lsrs	r4, r4, #12
    3d88:	0d5b      	lsrs	r3, r3, #21
    3d8a:	e7e3      	b.n	3d54 <__aeabi_i2d+0x30>
    3d8c:	2500      	movs	r5, #0
    3d8e:	2300      	movs	r3, #0
    3d90:	2400      	movs	r4, #0
    3d92:	2200      	movs	r2, #0
    3d94:	e7de      	b.n	3d54 <__aeabi_i2d+0x30>
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	0000041e 	.word	0x0000041e
    3d9c:	00000433 	.word	0x00000433
    3da0:	00000413 	.word	0x00000413
    3da4:	800fffff 	.word	0x800fffff

00003da8 <__aeabi_ui2d>:
    3da8:	b510      	push	{r4, lr}
    3daa:	1e04      	subs	r4, r0, #0
    3dac:	d028      	beq.n	3e00 <__aeabi_ui2d+0x58>
    3dae:	f000 f871 	bl	3e94 <__clzsi2>
    3db2:	4b15      	ldr	r3, [pc, #84]	; (3e08 <__aeabi_ui2d+0x60>)
    3db4:	4a15      	ldr	r2, [pc, #84]	; (3e0c <__aeabi_ui2d+0x64>)
    3db6:	1a1b      	subs	r3, r3, r0
    3db8:	1ad2      	subs	r2, r2, r3
    3dba:	2a1f      	cmp	r2, #31
    3dbc:	dd15      	ble.n	3dea <__aeabi_ui2d+0x42>
    3dbe:	4a14      	ldr	r2, [pc, #80]	; (3e10 <__aeabi_ui2d+0x68>)
    3dc0:	1ad2      	subs	r2, r2, r3
    3dc2:	4094      	lsls	r4, r2
    3dc4:	2200      	movs	r2, #0
    3dc6:	0324      	lsls	r4, r4, #12
    3dc8:	055b      	lsls	r3, r3, #21
    3dca:	0b24      	lsrs	r4, r4, #12
    3dcc:	0d5b      	lsrs	r3, r3, #21
    3dce:	2100      	movs	r1, #0
    3dd0:	0010      	movs	r0, r2
    3dd2:	0324      	lsls	r4, r4, #12
    3dd4:	0d0a      	lsrs	r2, r1, #20
    3dd6:	0b24      	lsrs	r4, r4, #12
    3dd8:	0512      	lsls	r2, r2, #20
    3dda:	4322      	orrs	r2, r4
    3ddc:	4c0d      	ldr	r4, [pc, #52]	; (3e14 <__aeabi_ui2d+0x6c>)
    3dde:	051b      	lsls	r3, r3, #20
    3de0:	4022      	ands	r2, r4
    3de2:	4313      	orrs	r3, r2
    3de4:	005b      	lsls	r3, r3, #1
    3de6:	0859      	lsrs	r1, r3, #1
    3de8:	bd10      	pop	{r4, pc}
    3dea:	0021      	movs	r1, r4
    3dec:	4091      	lsls	r1, r2
    3dee:	000a      	movs	r2, r1
    3df0:	210b      	movs	r1, #11
    3df2:	1a08      	subs	r0, r1, r0
    3df4:	40c4      	lsrs	r4, r0
    3df6:	055b      	lsls	r3, r3, #21
    3df8:	0324      	lsls	r4, r4, #12
    3dfa:	0b24      	lsrs	r4, r4, #12
    3dfc:	0d5b      	lsrs	r3, r3, #21
    3dfe:	e7e6      	b.n	3dce <__aeabi_ui2d+0x26>
    3e00:	2300      	movs	r3, #0
    3e02:	2400      	movs	r4, #0
    3e04:	2200      	movs	r2, #0
    3e06:	e7e2      	b.n	3dce <__aeabi_ui2d+0x26>
    3e08:	0000041e 	.word	0x0000041e
    3e0c:	00000433 	.word	0x00000433
    3e10:	00000413 	.word	0x00000413
    3e14:	800fffff 	.word	0x800fffff

00003e18 <__aeabi_cdrcmple>:
    3e18:	4684      	mov	ip, r0
    3e1a:	1c10      	adds	r0, r2, #0
    3e1c:	4662      	mov	r2, ip
    3e1e:	468c      	mov	ip, r1
    3e20:	1c19      	adds	r1, r3, #0
    3e22:	4663      	mov	r3, ip
    3e24:	e000      	b.n	3e28 <__aeabi_cdcmpeq>
    3e26:	46c0      	nop			; (mov r8, r8)

00003e28 <__aeabi_cdcmpeq>:
    3e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3e2a:	f000 f8fb 	bl	4024 <__ledf2>
    3e2e:	2800      	cmp	r0, #0
    3e30:	d401      	bmi.n	3e36 <__aeabi_cdcmpeq+0xe>
    3e32:	2100      	movs	r1, #0
    3e34:	42c8      	cmn	r0, r1
    3e36:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003e38 <__aeabi_dcmpeq>:
    3e38:	b510      	push	{r4, lr}
    3e3a:	f000 f855 	bl	3ee8 <__eqdf2>
    3e3e:	4240      	negs	r0, r0
    3e40:	3001      	adds	r0, #1
    3e42:	bd10      	pop	{r4, pc}

00003e44 <__aeabi_dcmplt>:
    3e44:	b510      	push	{r4, lr}
    3e46:	f000 f8ed 	bl	4024 <__ledf2>
    3e4a:	2800      	cmp	r0, #0
    3e4c:	db01      	blt.n	3e52 <__aeabi_dcmplt+0xe>
    3e4e:	2000      	movs	r0, #0
    3e50:	bd10      	pop	{r4, pc}
    3e52:	2001      	movs	r0, #1
    3e54:	bd10      	pop	{r4, pc}
    3e56:	46c0      	nop			; (mov r8, r8)

00003e58 <__aeabi_dcmple>:
    3e58:	b510      	push	{r4, lr}
    3e5a:	f000 f8e3 	bl	4024 <__ledf2>
    3e5e:	2800      	cmp	r0, #0
    3e60:	dd01      	ble.n	3e66 <__aeabi_dcmple+0xe>
    3e62:	2000      	movs	r0, #0
    3e64:	bd10      	pop	{r4, pc}
    3e66:	2001      	movs	r0, #1
    3e68:	bd10      	pop	{r4, pc}
    3e6a:	46c0      	nop			; (mov r8, r8)

00003e6c <__aeabi_dcmpgt>:
    3e6c:	b510      	push	{r4, lr}
    3e6e:	f000 f875 	bl	3f5c <__gedf2>
    3e72:	2800      	cmp	r0, #0
    3e74:	dc01      	bgt.n	3e7a <__aeabi_dcmpgt+0xe>
    3e76:	2000      	movs	r0, #0
    3e78:	bd10      	pop	{r4, pc}
    3e7a:	2001      	movs	r0, #1
    3e7c:	bd10      	pop	{r4, pc}
    3e7e:	46c0      	nop			; (mov r8, r8)

00003e80 <__aeabi_dcmpge>:
    3e80:	b510      	push	{r4, lr}
    3e82:	f000 f86b 	bl	3f5c <__gedf2>
    3e86:	2800      	cmp	r0, #0
    3e88:	da01      	bge.n	3e8e <__aeabi_dcmpge+0xe>
    3e8a:	2000      	movs	r0, #0
    3e8c:	bd10      	pop	{r4, pc}
    3e8e:	2001      	movs	r0, #1
    3e90:	bd10      	pop	{r4, pc}
    3e92:	46c0      	nop			; (mov r8, r8)

00003e94 <__clzsi2>:
    3e94:	211c      	movs	r1, #28
    3e96:	2301      	movs	r3, #1
    3e98:	041b      	lsls	r3, r3, #16
    3e9a:	4298      	cmp	r0, r3
    3e9c:	d301      	bcc.n	3ea2 <__clzsi2+0xe>
    3e9e:	0c00      	lsrs	r0, r0, #16
    3ea0:	3910      	subs	r1, #16
    3ea2:	0a1b      	lsrs	r3, r3, #8
    3ea4:	4298      	cmp	r0, r3
    3ea6:	d301      	bcc.n	3eac <__clzsi2+0x18>
    3ea8:	0a00      	lsrs	r0, r0, #8
    3eaa:	3908      	subs	r1, #8
    3eac:	091b      	lsrs	r3, r3, #4
    3eae:	4298      	cmp	r0, r3
    3eb0:	d301      	bcc.n	3eb6 <__clzsi2+0x22>
    3eb2:	0900      	lsrs	r0, r0, #4
    3eb4:	3904      	subs	r1, #4
    3eb6:	a202      	add	r2, pc, #8	; (adr r2, 3ec0 <__clzsi2+0x2c>)
    3eb8:	5c10      	ldrb	r0, [r2, r0]
    3eba:	1840      	adds	r0, r0, r1
    3ebc:	4770      	bx	lr
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	02020304 	.word	0x02020304
    3ec4:	01010101 	.word	0x01010101
	...

00003ed0 <__clzdi2>:
    3ed0:	b510      	push	{r4, lr}
    3ed2:	2900      	cmp	r1, #0
    3ed4:	d103      	bne.n	3ede <__clzdi2+0xe>
    3ed6:	f7ff ffdd 	bl	3e94 <__clzsi2>
    3eda:	3020      	adds	r0, #32
    3edc:	e002      	b.n	3ee4 <__clzdi2+0x14>
    3ede:	1c08      	adds	r0, r1, #0
    3ee0:	f7ff ffd8 	bl	3e94 <__clzsi2>
    3ee4:	bd10      	pop	{r4, pc}
    3ee6:	46c0      	nop			; (mov r8, r8)

00003ee8 <__eqdf2>:
    3ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eea:	464f      	mov	r7, r9
    3eec:	4646      	mov	r6, r8
    3eee:	46d6      	mov	lr, sl
    3ef0:	005c      	lsls	r4, r3, #1
    3ef2:	b5c0      	push	{r6, r7, lr}
    3ef4:	031f      	lsls	r7, r3, #12
    3ef6:	0fdb      	lsrs	r3, r3, #31
    3ef8:	469a      	mov	sl, r3
    3efa:	4b17      	ldr	r3, [pc, #92]	; (3f58 <__eqdf2+0x70>)
    3efc:	030e      	lsls	r6, r1, #12
    3efe:	004d      	lsls	r5, r1, #1
    3f00:	4684      	mov	ip, r0
    3f02:	4680      	mov	r8, r0
    3f04:	0b36      	lsrs	r6, r6, #12
    3f06:	0d6d      	lsrs	r5, r5, #21
    3f08:	0fc9      	lsrs	r1, r1, #31
    3f0a:	4691      	mov	r9, r2
    3f0c:	0b3f      	lsrs	r7, r7, #12
    3f0e:	0d64      	lsrs	r4, r4, #21
    3f10:	2001      	movs	r0, #1
    3f12:	429d      	cmp	r5, r3
    3f14:	d008      	beq.n	3f28 <__eqdf2+0x40>
    3f16:	429c      	cmp	r4, r3
    3f18:	d001      	beq.n	3f1e <__eqdf2+0x36>
    3f1a:	42a5      	cmp	r5, r4
    3f1c:	d00b      	beq.n	3f36 <__eqdf2+0x4e>
    3f1e:	bc1c      	pop	{r2, r3, r4}
    3f20:	4690      	mov	r8, r2
    3f22:	4699      	mov	r9, r3
    3f24:	46a2      	mov	sl, r4
    3f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f28:	4663      	mov	r3, ip
    3f2a:	4333      	orrs	r3, r6
    3f2c:	d1f7      	bne.n	3f1e <__eqdf2+0x36>
    3f2e:	42ac      	cmp	r4, r5
    3f30:	d1f5      	bne.n	3f1e <__eqdf2+0x36>
    3f32:	433a      	orrs	r2, r7
    3f34:	d1f3      	bne.n	3f1e <__eqdf2+0x36>
    3f36:	2001      	movs	r0, #1
    3f38:	42be      	cmp	r6, r7
    3f3a:	d1f0      	bne.n	3f1e <__eqdf2+0x36>
    3f3c:	45c8      	cmp	r8, r9
    3f3e:	d1ee      	bne.n	3f1e <__eqdf2+0x36>
    3f40:	4551      	cmp	r1, sl
    3f42:	d007      	beq.n	3f54 <__eqdf2+0x6c>
    3f44:	2d00      	cmp	r5, #0
    3f46:	d1ea      	bne.n	3f1e <__eqdf2+0x36>
    3f48:	4663      	mov	r3, ip
    3f4a:	431e      	orrs	r6, r3
    3f4c:	0030      	movs	r0, r6
    3f4e:	1e46      	subs	r6, r0, #1
    3f50:	41b0      	sbcs	r0, r6
    3f52:	e7e4      	b.n	3f1e <__eqdf2+0x36>
    3f54:	2000      	movs	r0, #0
    3f56:	e7e2      	b.n	3f1e <__eqdf2+0x36>
    3f58:	000007ff 	.word	0x000007ff

00003f5c <__gedf2>:
    3f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f5e:	4645      	mov	r5, r8
    3f60:	46de      	mov	lr, fp
    3f62:	4657      	mov	r7, sl
    3f64:	464e      	mov	r6, r9
    3f66:	b5e0      	push	{r5, r6, r7, lr}
    3f68:	031f      	lsls	r7, r3, #12
    3f6a:	0b3d      	lsrs	r5, r7, #12
    3f6c:	4f2c      	ldr	r7, [pc, #176]	; (4020 <__gedf2+0xc4>)
    3f6e:	030e      	lsls	r6, r1, #12
    3f70:	004c      	lsls	r4, r1, #1
    3f72:	46ab      	mov	fp, r5
    3f74:	005d      	lsls	r5, r3, #1
    3f76:	4684      	mov	ip, r0
    3f78:	0b36      	lsrs	r6, r6, #12
    3f7a:	0d64      	lsrs	r4, r4, #21
    3f7c:	0fc9      	lsrs	r1, r1, #31
    3f7e:	4690      	mov	r8, r2
    3f80:	0d6d      	lsrs	r5, r5, #21
    3f82:	0fdb      	lsrs	r3, r3, #31
    3f84:	42bc      	cmp	r4, r7
    3f86:	d02a      	beq.n	3fde <__gedf2+0x82>
    3f88:	4f25      	ldr	r7, [pc, #148]	; (4020 <__gedf2+0xc4>)
    3f8a:	42bd      	cmp	r5, r7
    3f8c:	d02d      	beq.n	3fea <__gedf2+0x8e>
    3f8e:	2c00      	cmp	r4, #0
    3f90:	d10f      	bne.n	3fb2 <__gedf2+0x56>
    3f92:	4330      	orrs	r0, r6
    3f94:	0007      	movs	r7, r0
    3f96:	4681      	mov	r9, r0
    3f98:	4278      	negs	r0, r7
    3f9a:	4178      	adcs	r0, r7
    3f9c:	b2c0      	uxtb	r0, r0
    3f9e:	2d00      	cmp	r5, #0
    3fa0:	d117      	bne.n	3fd2 <__gedf2+0x76>
    3fa2:	465f      	mov	r7, fp
    3fa4:	433a      	orrs	r2, r7
    3fa6:	d114      	bne.n	3fd2 <__gedf2+0x76>
    3fa8:	464b      	mov	r3, r9
    3faa:	2000      	movs	r0, #0
    3fac:	2b00      	cmp	r3, #0
    3fae:	d00a      	beq.n	3fc6 <__gedf2+0x6a>
    3fb0:	e006      	b.n	3fc0 <__gedf2+0x64>
    3fb2:	2d00      	cmp	r5, #0
    3fb4:	d102      	bne.n	3fbc <__gedf2+0x60>
    3fb6:	4658      	mov	r0, fp
    3fb8:	4302      	orrs	r2, r0
    3fba:	d001      	beq.n	3fc0 <__gedf2+0x64>
    3fbc:	4299      	cmp	r1, r3
    3fbe:	d018      	beq.n	3ff2 <__gedf2+0x96>
    3fc0:	4248      	negs	r0, r1
    3fc2:	2101      	movs	r1, #1
    3fc4:	4308      	orrs	r0, r1
    3fc6:	bc3c      	pop	{r2, r3, r4, r5}
    3fc8:	4690      	mov	r8, r2
    3fca:	4699      	mov	r9, r3
    3fcc:	46a2      	mov	sl, r4
    3fce:	46ab      	mov	fp, r5
    3fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fd2:	2800      	cmp	r0, #0
    3fd4:	d0f2      	beq.n	3fbc <__gedf2+0x60>
    3fd6:	2001      	movs	r0, #1
    3fd8:	3b01      	subs	r3, #1
    3fda:	4318      	orrs	r0, r3
    3fdc:	e7f3      	b.n	3fc6 <__gedf2+0x6a>
    3fde:	0037      	movs	r7, r6
    3fe0:	4307      	orrs	r7, r0
    3fe2:	d0d1      	beq.n	3f88 <__gedf2+0x2c>
    3fe4:	2002      	movs	r0, #2
    3fe6:	4240      	negs	r0, r0
    3fe8:	e7ed      	b.n	3fc6 <__gedf2+0x6a>
    3fea:	465f      	mov	r7, fp
    3fec:	4317      	orrs	r7, r2
    3fee:	d0ce      	beq.n	3f8e <__gedf2+0x32>
    3ff0:	e7f8      	b.n	3fe4 <__gedf2+0x88>
    3ff2:	42ac      	cmp	r4, r5
    3ff4:	dce4      	bgt.n	3fc0 <__gedf2+0x64>
    3ff6:	da03      	bge.n	4000 <__gedf2+0xa4>
    3ff8:	1e48      	subs	r0, r1, #1
    3ffa:	2101      	movs	r1, #1
    3ffc:	4308      	orrs	r0, r1
    3ffe:	e7e2      	b.n	3fc6 <__gedf2+0x6a>
    4000:	455e      	cmp	r6, fp
    4002:	d8dd      	bhi.n	3fc0 <__gedf2+0x64>
    4004:	d006      	beq.n	4014 <__gedf2+0xb8>
    4006:	2000      	movs	r0, #0
    4008:	455e      	cmp	r6, fp
    400a:	d2dc      	bcs.n	3fc6 <__gedf2+0x6a>
    400c:	2301      	movs	r3, #1
    400e:	1e48      	subs	r0, r1, #1
    4010:	4318      	orrs	r0, r3
    4012:	e7d8      	b.n	3fc6 <__gedf2+0x6a>
    4014:	45c4      	cmp	ip, r8
    4016:	d8d3      	bhi.n	3fc0 <__gedf2+0x64>
    4018:	2000      	movs	r0, #0
    401a:	45c4      	cmp	ip, r8
    401c:	d3f6      	bcc.n	400c <__gedf2+0xb0>
    401e:	e7d2      	b.n	3fc6 <__gedf2+0x6a>
    4020:	000007ff 	.word	0x000007ff

00004024 <__ledf2>:
    4024:	b5f0      	push	{r4, r5, r6, r7, lr}
    4026:	464e      	mov	r6, r9
    4028:	4645      	mov	r5, r8
    402a:	46de      	mov	lr, fp
    402c:	4657      	mov	r7, sl
    402e:	005c      	lsls	r4, r3, #1
    4030:	b5e0      	push	{r5, r6, r7, lr}
    4032:	031f      	lsls	r7, r3, #12
    4034:	0fdb      	lsrs	r3, r3, #31
    4036:	4699      	mov	r9, r3
    4038:	4b2a      	ldr	r3, [pc, #168]	; (40e4 <__ledf2+0xc0>)
    403a:	030e      	lsls	r6, r1, #12
    403c:	004d      	lsls	r5, r1, #1
    403e:	0fc9      	lsrs	r1, r1, #31
    4040:	4684      	mov	ip, r0
    4042:	0b36      	lsrs	r6, r6, #12
    4044:	0d6d      	lsrs	r5, r5, #21
    4046:	468b      	mov	fp, r1
    4048:	4690      	mov	r8, r2
    404a:	0b3f      	lsrs	r7, r7, #12
    404c:	0d64      	lsrs	r4, r4, #21
    404e:	429d      	cmp	r5, r3
    4050:	d020      	beq.n	4094 <__ledf2+0x70>
    4052:	4b24      	ldr	r3, [pc, #144]	; (40e4 <__ledf2+0xc0>)
    4054:	429c      	cmp	r4, r3
    4056:	d022      	beq.n	409e <__ledf2+0x7a>
    4058:	2d00      	cmp	r5, #0
    405a:	d112      	bne.n	4082 <__ledf2+0x5e>
    405c:	4330      	orrs	r0, r6
    405e:	4243      	negs	r3, r0
    4060:	4143      	adcs	r3, r0
    4062:	b2db      	uxtb	r3, r3
    4064:	2c00      	cmp	r4, #0
    4066:	d01f      	beq.n	40a8 <__ledf2+0x84>
    4068:	2b00      	cmp	r3, #0
    406a:	d00c      	beq.n	4086 <__ledf2+0x62>
    406c:	464b      	mov	r3, r9
    406e:	2001      	movs	r0, #1
    4070:	3b01      	subs	r3, #1
    4072:	4303      	orrs	r3, r0
    4074:	0018      	movs	r0, r3
    4076:	bc3c      	pop	{r2, r3, r4, r5}
    4078:	4690      	mov	r8, r2
    407a:	4699      	mov	r9, r3
    407c:	46a2      	mov	sl, r4
    407e:	46ab      	mov	fp, r5
    4080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4082:	2c00      	cmp	r4, #0
    4084:	d016      	beq.n	40b4 <__ledf2+0x90>
    4086:	45cb      	cmp	fp, r9
    4088:	d017      	beq.n	40ba <__ledf2+0x96>
    408a:	465b      	mov	r3, fp
    408c:	4259      	negs	r1, r3
    408e:	2301      	movs	r3, #1
    4090:	430b      	orrs	r3, r1
    4092:	e7ef      	b.n	4074 <__ledf2+0x50>
    4094:	0031      	movs	r1, r6
    4096:	2302      	movs	r3, #2
    4098:	4301      	orrs	r1, r0
    409a:	d1eb      	bne.n	4074 <__ledf2+0x50>
    409c:	e7d9      	b.n	4052 <__ledf2+0x2e>
    409e:	0039      	movs	r1, r7
    40a0:	2302      	movs	r3, #2
    40a2:	4311      	orrs	r1, r2
    40a4:	d1e6      	bne.n	4074 <__ledf2+0x50>
    40a6:	e7d7      	b.n	4058 <__ledf2+0x34>
    40a8:	433a      	orrs	r2, r7
    40aa:	d1dd      	bne.n	4068 <__ledf2+0x44>
    40ac:	2300      	movs	r3, #0
    40ae:	2800      	cmp	r0, #0
    40b0:	d0e0      	beq.n	4074 <__ledf2+0x50>
    40b2:	e7ea      	b.n	408a <__ledf2+0x66>
    40b4:	433a      	orrs	r2, r7
    40b6:	d1e6      	bne.n	4086 <__ledf2+0x62>
    40b8:	e7e7      	b.n	408a <__ledf2+0x66>
    40ba:	42a5      	cmp	r5, r4
    40bc:	dce5      	bgt.n	408a <__ledf2+0x66>
    40be:	db05      	blt.n	40cc <__ledf2+0xa8>
    40c0:	42be      	cmp	r6, r7
    40c2:	d8e2      	bhi.n	408a <__ledf2+0x66>
    40c4:	d007      	beq.n	40d6 <__ledf2+0xb2>
    40c6:	2300      	movs	r3, #0
    40c8:	42be      	cmp	r6, r7
    40ca:	d2d3      	bcs.n	4074 <__ledf2+0x50>
    40cc:	4659      	mov	r1, fp
    40ce:	2301      	movs	r3, #1
    40d0:	3901      	subs	r1, #1
    40d2:	430b      	orrs	r3, r1
    40d4:	e7ce      	b.n	4074 <__ledf2+0x50>
    40d6:	45c4      	cmp	ip, r8
    40d8:	d8d7      	bhi.n	408a <__ledf2+0x66>
    40da:	2300      	movs	r3, #0
    40dc:	45c4      	cmp	ip, r8
    40de:	d3f5      	bcc.n	40cc <__ledf2+0xa8>
    40e0:	e7c8      	b.n	4074 <__ledf2+0x50>
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	000007ff 	.word	0x000007ff

000040e8 <__libc_init_array>:
    40e8:	b570      	push	{r4, r5, r6, lr}
    40ea:	2600      	movs	r6, #0
    40ec:	4d0c      	ldr	r5, [pc, #48]	; (4120 <__libc_init_array+0x38>)
    40ee:	4c0d      	ldr	r4, [pc, #52]	; (4124 <__libc_init_array+0x3c>)
    40f0:	1b64      	subs	r4, r4, r5
    40f2:	10a4      	asrs	r4, r4, #2
    40f4:	42a6      	cmp	r6, r4
    40f6:	d109      	bne.n	410c <__libc_init_array+0x24>
    40f8:	2600      	movs	r6, #0
    40fa:	f000 fce9 	bl	4ad0 <_init>
    40fe:	4d0a      	ldr	r5, [pc, #40]	; (4128 <__libc_init_array+0x40>)
    4100:	4c0a      	ldr	r4, [pc, #40]	; (412c <__libc_init_array+0x44>)
    4102:	1b64      	subs	r4, r4, r5
    4104:	10a4      	asrs	r4, r4, #2
    4106:	42a6      	cmp	r6, r4
    4108:	d105      	bne.n	4116 <__libc_init_array+0x2e>
    410a:	bd70      	pop	{r4, r5, r6, pc}
    410c:	00b3      	lsls	r3, r6, #2
    410e:	58eb      	ldr	r3, [r5, r3]
    4110:	4798      	blx	r3
    4112:	3601      	adds	r6, #1
    4114:	e7ee      	b.n	40f4 <__libc_init_array+0xc>
    4116:	00b3      	lsls	r3, r6, #2
    4118:	58eb      	ldr	r3, [r5, r3]
    411a:	4798      	blx	r3
    411c:	3601      	adds	r6, #1
    411e:	e7f2      	b.n	4106 <__libc_init_array+0x1e>
    4120:	00004adc 	.word	0x00004adc
    4124:	00004adc 	.word	0x00004adc
    4128:	00004adc 	.word	0x00004adc
    412c:	00004ae0 	.word	0x00004ae0

00004130 <malloc>:
    4130:	b510      	push	{r4, lr}
    4132:	4b03      	ldr	r3, [pc, #12]	; (4140 <malloc+0x10>)
    4134:	0001      	movs	r1, r0
    4136:	6818      	ldr	r0, [r3, #0]
    4138:	f000 f84e 	bl	41d8 <_malloc_r>
    413c:	bd10      	pop	{r4, pc}
    413e:	46c0      	nop			; (mov r8, r8)
    4140:	20000110 	.word	0x20000110

00004144 <_free_r>:
    4144:	b570      	push	{r4, r5, r6, lr}
    4146:	0005      	movs	r5, r0
    4148:	2900      	cmp	r1, #0
    414a:	d010      	beq.n	416e <_free_r+0x2a>
    414c:	1f0c      	subs	r4, r1, #4
    414e:	6823      	ldr	r3, [r4, #0]
    4150:	2b00      	cmp	r3, #0
    4152:	da00      	bge.n	4156 <_free_r+0x12>
    4154:	18e4      	adds	r4, r4, r3
    4156:	0028      	movs	r0, r5
    4158:	f000 f8d7 	bl	430a <__malloc_lock>
    415c:	4a1d      	ldr	r2, [pc, #116]	; (41d4 <_free_r+0x90>)
    415e:	6813      	ldr	r3, [r2, #0]
    4160:	2b00      	cmp	r3, #0
    4162:	d105      	bne.n	4170 <_free_r+0x2c>
    4164:	6063      	str	r3, [r4, #4]
    4166:	6014      	str	r4, [r2, #0]
    4168:	0028      	movs	r0, r5
    416a:	f000 f8cf 	bl	430c <__malloc_unlock>
    416e:	bd70      	pop	{r4, r5, r6, pc}
    4170:	42a3      	cmp	r3, r4
    4172:	d909      	bls.n	4188 <_free_r+0x44>
    4174:	6821      	ldr	r1, [r4, #0]
    4176:	1860      	adds	r0, r4, r1
    4178:	4283      	cmp	r3, r0
    417a:	d1f3      	bne.n	4164 <_free_r+0x20>
    417c:	6818      	ldr	r0, [r3, #0]
    417e:	685b      	ldr	r3, [r3, #4]
    4180:	1841      	adds	r1, r0, r1
    4182:	6021      	str	r1, [r4, #0]
    4184:	e7ee      	b.n	4164 <_free_r+0x20>
    4186:	0013      	movs	r3, r2
    4188:	685a      	ldr	r2, [r3, #4]
    418a:	2a00      	cmp	r2, #0
    418c:	d001      	beq.n	4192 <_free_r+0x4e>
    418e:	42a2      	cmp	r2, r4
    4190:	d9f9      	bls.n	4186 <_free_r+0x42>
    4192:	6819      	ldr	r1, [r3, #0]
    4194:	1858      	adds	r0, r3, r1
    4196:	42a0      	cmp	r0, r4
    4198:	d10b      	bne.n	41b2 <_free_r+0x6e>
    419a:	6820      	ldr	r0, [r4, #0]
    419c:	1809      	adds	r1, r1, r0
    419e:	1858      	adds	r0, r3, r1
    41a0:	6019      	str	r1, [r3, #0]
    41a2:	4282      	cmp	r2, r0
    41a4:	d1e0      	bne.n	4168 <_free_r+0x24>
    41a6:	6810      	ldr	r0, [r2, #0]
    41a8:	6852      	ldr	r2, [r2, #4]
    41aa:	1841      	adds	r1, r0, r1
    41ac:	6019      	str	r1, [r3, #0]
    41ae:	605a      	str	r2, [r3, #4]
    41b0:	e7da      	b.n	4168 <_free_r+0x24>
    41b2:	42a0      	cmp	r0, r4
    41b4:	d902      	bls.n	41bc <_free_r+0x78>
    41b6:	230c      	movs	r3, #12
    41b8:	602b      	str	r3, [r5, #0]
    41ba:	e7d5      	b.n	4168 <_free_r+0x24>
    41bc:	6821      	ldr	r1, [r4, #0]
    41be:	1860      	adds	r0, r4, r1
    41c0:	4282      	cmp	r2, r0
    41c2:	d103      	bne.n	41cc <_free_r+0x88>
    41c4:	6810      	ldr	r0, [r2, #0]
    41c6:	6852      	ldr	r2, [r2, #4]
    41c8:	1841      	adds	r1, r0, r1
    41ca:	6021      	str	r1, [r4, #0]
    41cc:	6062      	str	r2, [r4, #4]
    41ce:	605c      	str	r4, [r3, #4]
    41d0:	e7ca      	b.n	4168 <_free_r+0x24>
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	200002d0 	.word	0x200002d0

000041d8 <_malloc_r>:
    41d8:	2303      	movs	r3, #3
    41da:	b570      	push	{r4, r5, r6, lr}
    41dc:	1ccd      	adds	r5, r1, #3
    41de:	439d      	bics	r5, r3
    41e0:	3508      	adds	r5, #8
    41e2:	0006      	movs	r6, r0
    41e4:	2d0c      	cmp	r5, #12
    41e6:	d21e      	bcs.n	4226 <_malloc_r+0x4e>
    41e8:	250c      	movs	r5, #12
    41ea:	42a9      	cmp	r1, r5
    41ec:	d81d      	bhi.n	422a <_malloc_r+0x52>
    41ee:	0030      	movs	r0, r6
    41f0:	f000 f88b 	bl	430a <__malloc_lock>
    41f4:	4a25      	ldr	r2, [pc, #148]	; (428c <_malloc_r+0xb4>)
    41f6:	6814      	ldr	r4, [r2, #0]
    41f8:	0021      	movs	r1, r4
    41fa:	2900      	cmp	r1, #0
    41fc:	d119      	bne.n	4232 <_malloc_r+0x5a>
    41fe:	4c24      	ldr	r4, [pc, #144]	; (4290 <_malloc_r+0xb8>)
    4200:	6823      	ldr	r3, [r4, #0]
    4202:	2b00      	cmp	r3, #0
    4204:	d103      	bne.n	420e <_malloc_r+0x36>
    4206:	0030      	movs	r0, r6
    4208:	f000 f844 	bl	4294 <_sbrk_r>
    420c:	6020      	str	r0, [r4, #0]
    420e:	0029      	movs	r1, r5
    4210:	0030      	movs	r0, r6
    4212:	f000 f83f 	bl	4294 <_sbrk_r>
    4216:	1c43      	adds	r3, r0, #1
    4218:	d12c      	bne.n	4274 <_malloc_r+0x9c>
    421a:	230c      	movs	r3, #12
    421c:	0030      	movs	r0, r6
    421e:	6033      	str	r3, [r6, #0]
    4220:	f000 f874 	bl	430c <__malloc_unlock>
    4224:	e003      	b.n	422e <_malloc_r+0x56>
    4226:	2d00      	cmp	r5, #0
    4228:	dadf      	bge.n	41ea <_malloc_r+0x12>
    422a:	230c      	movs	r3, #12
    422c:	6033      	str	r3, [r6, #0]
    422e:	2000      	movs	r0, #0
    4230:	bd70      	pop	{r4, r5, r6, pc}
    4232:	680b      	ldr	r3, [r1, #0]
    4234:	1b5b      	subs	r3, r3, r5
    4236:	d41a      	bmi.n	426e <_malloc_r+0x96>
    4238:	2b0b      	cmp	r3, #11
    423a:	d903      	bls.n	4244 <_malloc_r+0x6c>
    423c:	600b      	str	r3, [r1, #0]
    423e:	18cc      	adds	r4, r1, r3
    4240:	6025      	str	r5, [r4, #0]
    4242:	e003      	b.n	424c <_malloc_r+0x74>
    4244:	428c      	cmp	r4, r1
    4246:	d10e      	bne.n	4266 <_malloc_r+0x8e>
    4248:	6863      	ldr	r3, [r4, #4]
    424a:	6013      	str	r3, [r2, #0]
    424c:	0030      	movs	r0, r6
    424e:	f000 f85d 	bl	430c <__malloc_unlock>
    4252:	0020      	movs	r0, r4
    4254:	2207      	movs	r2, #7
    4256:	300b      	adds	r0, #11
    4258:	1d23      	adds	r3, r4, #4
    425a:	4390      	bics	r0, r2
    425c:	1ac3      	subs	r3, r0, r3
    425e:	d0e7      	beq.n	4230 <_malloc_r+0x58>
    4260:	425a      	negs	r2, r3
    4262:	50e2      	str	r2, [r4, r3]
    4264:	e7e4      	b.n	4230 <_malloc_r+0x58>
    4266:	684b      	ldr	r3, [r1, #4]
    4268:	6063      	str	r3, [r4, #4]
    426a:	000c      	movs	r4, r1
    426c:	e7ee      	b.n	424c <_malloc_r+0x74>
    426e:	000c      	movs	r4, r1
    4270:	6849      	ldr	r1, [r1, #4]
    4272:	e7c2      	b.n	41fa <_malloc_r+0x22>
    4274:	2303      	movs	r3, #3
    4276:	1cc4      	adds	r4, r0, #3
    4278:	439c      	bics	r4, r3
    427a:	42a0      	cmp	r0, r4
    427c:	d0e0      	beq.n	4240 <_malloc_r+0x68>
    427e:	1a21      	subs	r1, r4, r0
    4280:	0030      	movs	r0, r6
    4282:	f000 f807 	bl	4294 <_sbrk_r>
    4286:	1c43      	adds	r3, r0, #1
    4288:	d1da      	bne.n	4240 <_malloc_r+0x68>
    428a:	e7c6      	b.n	421a <_malloc_r+0x42>
    428c:	200002d0 	.word	0x200002d0
    4290:	200002d4 	.word	0x200002d4

00004294 <_sbrk_r>:
    4294:	2300      	movs	r3, #0
    4296:	b570      	push	{r4, r5, r6, lr}
    4298:	4c06      	ldr	r4, [pc, #24]	; (42b4 <_sbrk_r+0x20>)
    429a:	0005      	movs	r5, r0
    429c:	0008      	movs	r0, r1
    429e:	6023      	str	r3, [r4, #0]
    42a0:	f7fd fdf2 	bl	1e88 <_sbrk>
    42a4:	1c43      	adds	r3, r0, #1
    42a6:	d103      	bne.n	42b0 <_sbrk_r+0x1c>
    42a8:	6823      	ldr	r3, [r4, #0]
    42aa:	2b00      	cmp	r3, #0
    42ac:	d000      	beq.n	42b0 <_sbrk_r+0x1c>
    42ae:	602b      	str	r3, [r5, #0]
    42b0:	bd70      	pop	{r4, r5, r6, pc}
    42b2:	46c0      	nop			; (mov r8, r8)
    42b4:	200007a8 	.word	0x200007a8

000042b8 <siprintf>:
    42b8:	b40e      	push	{r1, r2, r3}
    42ba:	b510      	push	{r4, lr}
    42bc:	b09d      	sub	sp, #116	; 0x74
    42be:	a902      	add	r1, sp, #8
    42c0:	9002      	str	r0, [sp, #8]
    42c2:	6108      	str	r0, [r1, #16]
    42c4:	480b      	ldr	r0, [pc, #44]	; (42f4 <siprintf+0x3c>)
    42c6:	2482      	movs	r4, #130	; 0x82
    42c8:	6088      	str	r0, [r1, #8]
    42ca:	6148      	str	r0, [r1, #20]
    42cc:	2001      	movs	r0, #1
    42ce:	4240      	negs	r0, r0
    42d0:	ab1f      	add	r3, sp, #124	; 0x7c
    42d2:	81c8      	strh	r0, [r1, #14]
    42d4:	4808      	ldr	r0, [pc, #32]	; (42f8 <siprintf+0x40>)
    42d6:	cb04      	ldmia	r3!, {r2}
    42d8:	00a4      	lsls	r4, r4, #2
    42da:	6800      	ldr	r0, [r0, #0]
    42dc:	9301      	str	r3, [sp, #4]
    42de:	818c      	strh	r4, [r1, #12]
    42e0:	f000 f878 	bl	43d4 <_svfiprintf_r>
    42e4:	2300      	movs	r3, #0
    42e6:	9a02      	ldr	r2, [sp, #8]
    42e8:	7013      	strb	r3, [r2, #0]
    42ea:	b01d      	add	sp, #116	; 0x74
    42ec:	bc10      	pop	{r4}
    42ee:	bc08      	pop	{r3}
    42f0:	b003      	add	sp, #12
    42f2:	4718      	bx	r3
    42f4:	7fffffff 	.word	0x7fffffff
    42f8:	20000110 	.word	0x20000110

000042fc <strlen>:
    42fc:	2300      	movs	r3, #0
    42fe:	5cc2      	ldrb	r2, [r0, r3]
    4300:	3301      	adds	r3, #1
    4302:	2a00      	cmp	r2, #0
    4304:	d1fb      	bne.n	42fe <strlen+0x2>
    4306:	1e58      	subs	r0, r3, #1
    4308:	4770      	bx	lr

0000430a <__malloc_lock>:
    430a:	4770      	bx	lr

0000430c <__malloc_unlock>:
    430c:	4770      	bx	lr
	...

00004310 <__ssputs_r>:
    4310:	b5f0      	push	{r4, r5, r6, r7, lr}
    4312:	688e      	ldr	r6, [r1, #8]
    4314:	b085      	sub	sp, #20
    4316:	0007      	movs	r7, r0
    4318:	000c      	movs	r4, r1
    431a:	9203      	str	r2, [sp, #12]
    431c:	9301      	str	r3, [sp, #4]
    431e:	429e      	cmp	r6, r3
    4320:	d839      	bhi.n	4396 <__ssputs_r+0x86>
    4322:	2390      	movs	r3, #144	; 0x90
    4324:	898a      	ldrh	r2, [r1, #12]
    4326:	00db      	lsls	r3, r3, #3
    4328:	421a      	tst	r2, r3
    432a:	d034      	beq.n	4396 <__ssputs_r+0x86>
    432c:	2503      	movs	r5, #3
    432e:	6909      	ldr	r1, [r1, #16]
    4330:	6823      	ldr	r3, [r4, #0]
    4332:	1a5b      	subs	r3, r3, r1
    4334:	9302      	str	r3, [sp, #8]
    4336:	6963      	ldr	r3, [r4, #20]
    4338:	9802      	ldr	r0, [sp, #8]
    433a:	435d      	muls	r5, r3
    433c:	0feb      	lsrs	r3, r5, #31
    433e:	195d      	adds	r5, r3, r5
    4340:	9b01      	ldr	r3, [sp, #4]
    4342:	106d      	asrs	r5, r5, #1
    4344:	3301      	adds	r3, #1
    4346:	181b      	adds	r3, r3, r0
    4348:	42ab      	cmp	r3, r5
    434a:	d900      	bls.n	434e <__ssputs_r+0x3e>
    434c:	001d      	movs	r5, r3
    434e:	0553      	lsls	r3, r2, #21
    4350:	d532      	bpl.n	43b8 <__ssputs_r+0xa8>
    4352:	0029      	movs	r1, r5
    4354:	0038      	movs	r0, r7
    4356:	f7ff ff3f 	bl	41d8 <_malloc_r>
    435a:	1e06      	subs	r6, r0, #0
    435c:	d109      	bne.n	4372 <__ssputs_r+0x62>
    435e:	230c      	movs	r3, #12
    4360:	603b      	str	r3, [r7, #0]
    4362:	2340      	movs	r3, #64	; 0x40
    4364:	2001      	movs	r0, #1
    4366:	89a2      	ldrh	r2, [r4, #12]
    4368:	4240      	negs	r0, r0
    436a:	4313      	orrs	r3, r2
    436c:	81a3      	strh	r3, [r4, #12]
    436e:	b005      	add	sp, #20
    4370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4372:	9a02      	ldr	r2, [sp, #8]
    4374:	6921      	ldr	r1, [r4, #16]
    4376:	f000 fac4 	bl	4902 <memcpy>
    437a:	89a3      	ldrh	r3, [r4, #12]
    437c:	4a14      	ldr	r2, [pc, #80]	; (43d0 <__ssputs_r+0xc0>)
    437e:	401a      	ands	r2, r3
    4380:	2380      	movs	r3, #128	; 0x80
    4382:	4313      	orrs	r3, r2
    4384:	81a3      	strh	r3, [r4, #12]
    4386:	9b02      	ldr	r3, [sp, #8]
    4388:	6126      	str	r6, [r4, #16]
    438a:	18f6      	adds	r6, r6, r3
    438c:	6026      	str	r6, [r4, #0]
    438e:	6165      	str	r5, [r4, #20]
    4390:	9e01      	ldr	r6, [sp, #4]
    4392:	1aed      	subs	r5, r5, r3
    4394:	60a5      	str	r5, [r4, #8]
    4396:	9b01      	ldr	r3, [sp, #4]
    4398:	42b3      	cmp	r3, r6
    439a:	d200      	bcs.n	439e <__ssputs_r+0x8e>
    439c:	001e      	movs	r6, r3
    439e:	0032      	movs	r2, r6
    43a0:	9903      	ldr	r1, [sp, #12]
    43a2:	6820      	ldr	r0, [r4, #0]
    43a4:	f000 fab6 	bl	4914 <memmove>
    43a8:	68a3      	ldr	r3, [r4, #8]
    43aa:	2000      	movs	r0, #0
    43ac:	1b9b      	subs	r3, r3, r6
    43ae:	60a3      	str	r3, [r4, #8]
    43b0:	6823      	ldr	r3, [r4, #0]
    43b2:	199e      	adds	r6, r3, r6
    43b4:	6026      	str	r6, [r4, #0]
    43b6:	e7da      	b.n	436e <__ssputs_r+0x5e>
    43b8:	002a      	movs	r2, r5
    43ba:	0038      	movs	r0, r7
    43bc:	f000 fabc 	bl	4938 <_realloc_r>
    43c0:	1e06      	subs	r6, r0, #0
    43c2:	d1e0      	bne.n	4386 <__ssputs_r+0x76>
    43c4:	6921      	ldr	r1, [r4, #16]
    43c6:	0038      	movs	r0, r7
    43c8:	f7ff febc 	bl	4144 <_free_r>
    43cc:	e7c7      	b.n	435e <__ssputs_r+0x4e>
    43ce:	46c0      	nop			; (mov r8, r8)
    43d0:	fffffb7f 	.word	0xfffffb7f

000043d4 <_svfiprintf_r>:
    43d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43d6:	b09f      	sub	sp, #124	; 0x7c
    43d8:	9002      	str	r0, [sp, #8]
    43da:	9305      	str	r3, [sp, #20]
    43dc:	898b      	ldrh	r3, [r1, #12]
    43de:	000f      	movs	r7, r1
    43e0:	0016      	movs	r6, r2
    43e2:	061b      	lsls	r3, r3, #24
    43e4:	d511      	bpl.n	440a <_svfiprintf_r+0x36>
    43e6:	690b      	ldr	r3, [r1, #16]
    43e8:	2b00      	cmp	r3, #0
    43ea:	d10e      	bne.n	440a <_svfiprintf_r+0x36>
    43ec:	2140      	movs	r1, #64	; 0x40
    43ee:	f7ff fef3 	bl	41d8 <_malloc_r>
    43f2:	6038      	str	r0, [r7, #0]
    43f4:	6138      	str	r0, [r7, #16]
    43f6:	2800      	cmp	r0, #0
    43f8:	d105      	bne.n	4406 <_svfiprintf_r+0x32>
    43fa:	230c      	movs	r3, #12
    43fc:	9a02      	ldr	r2, [sp, #8]
    43fe:	3801      	subs	r0, #1
    4400:	6013      	str	r3, [r2, #0]
    4402:	b01f      	add	sp, #124	; 0x7c
    4404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4406:	2340      	movs	r3, #64	; 0x40
    4408:	617b      	str	r3, [r7, #20]
    440a:	2300      	movs	r3, #0
    440c:	ad06      	add	r5, sp, #24
    440e:	616b      	str	r3, [r5, #20]
    4410:	3320      	adds	r3, #32
    4412:	766b      	strb	r3, [r5, #25]
    4414:	3310      	adds	r3, #16
    4416:	76ab      	strb	r3, [r5, #26]
    4418:	0034      	movs	r4, r6
    441a:	7823      	ldrb	r3, [r4, #0]
    441c:	2b00      	cmp	r3, #0
    441e:	d147      	bne.n	44b0 <_svfiprintf_r+0xdc>
    4420:	1ba3      	subs	r3, r4, r6
    4422:	9304      	str	r3, [sp, #16]
    4424:	d00d      	beq.n	4442 <_svfiprintf_r+0x6e>
    4426:	1ba3      	subs	r3, r4, r6
    4428:	0032      	movs	r2, r6
    442a:	0039      	movs	r1, r7
    442c:	9802      	ldr	r0, [sp, #8]
    442e:	f7ff ff6f 	bl	4310 <__ssputs_r>
    4432:	1c43      	adds	r3, r0, #1
    4434:	d100      	bne.n	4438 <_svfiprintf_r+0x64>
    4436:	e0b5      	b.n	45a4 <_svfiprintf_r+0x1d0>
    4438:	696a      	ldr	r2, [r5, #20]
    443a:	9b04      	ldr	r3, [sp, #16]
    443c:	4694      	mov	ip, r2
    443e:	4463      	add	r3, ip
    4440:	616b      	str	r3, [r5, #20]
    4442:	7823      	ldrb	r3, [r4, #0]
    4444:	2b00      	cmp	r3, #0
    4446:	d100      	bne.n	444a <_svfiprintf_r+0x76>
    4448:	e0ac      	b.n	45a4 <_svfiprintf_r+0x1d0>
    444a:	2201      	movs	r2, #1
    444c:	2300      	movs	r3, #0
    444e:	4252      	negs	r2, r2
    4450:	606a      	str	r2, [r5, #4]
    4452:	a902      	add	r1, sp, #8
    4454:	3254      	adds	r2, #84	; 0x54
    4456:	1852      	adds	r2, r2, r1
    4458:	3401      	adds	r4, #1
    445a:	602b      	str	r3, [r5, #0]
    445c:	60eb      	str	r3, [r5, #12]
    445e:	60ab      	str	r3, [r5, #8]
    4460:	7013      	strb	r3, [r2, #0]
    4462:	65ab      	str	r3, [r5, #88]	; 0x58
    4464:	4e58      	ldr	r6, [pc, #352]	; (45c8 <_svfiprintf_r+0x1f4>)
    4466:	2205      	movs	r2, #5
    4468:	7821      	ldrb	r1, [r4, #0]
    446a:	0030      	movs	r0, r6
    446c:	f000 fa3e 	bl	48ec <memchr>
    4470:	1c62      	adds	r2, r4, #1
    4472:	2800      	cmp	r0, #0
    4474:	d120      	bne.n	44b8 <_svfiprintf_r+0xe4>
    4476:	6829      	ldr	r1, [r5, #0]
    4478:	06cb      	lsls	r3, r1, #27
    447a:	d504      	bpl.n	4486 <_svfiprintf_r+0xb2>
    447c:	2353      	movs	r3, #83	; 0x53
    447e:	ae02      	add	r6, sp, #8
    4480:	3020      	adds	r0, #32
    4482:	199b      	adds	r3, r3, r6
    4484:	7018      	strb	r0, [r3, #0]
    4486:	070b      	lsls	r3, r1, #28
    4488:	d504      	bpl.n	4494 <_svfiprintf_r+0xc0>
    448a:	2353      	movs	r3, #83	; 0x53
    448c:	202b      	movs	r0, #43	; 0x2b
    448e:	ae02      	add	r6, sp, #8
    4490:	199b      	adds	r3, r3, r6
    4492:	7018      	strb	r0, [r3, #0]
    4494:	7823      	ldrb	r3, [r4, #0]
    4496:	2b2a      	cmp	r3, #42	; 0x2a
    4498:	d016      	beq.n	44c8 <_svfiprintf_r+0xf4>
    449a:	2000      	movs	r0, #0
    449c:	210a      	movs	r1, #10
    449e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    44a0:	7822      	ldrb	r2, [r4, #0]
    44a2:	3a30      	subs	r2, #48	; 0x30
    44a4:	2a09      	cmp	r2, #9
    44a6:	d955      	bls.n	4554 <_svfiprintf_r+0x180>
    44a8:	2800      	cmp	r0, #0
    44aa:	d015      	beq.n	44d8 <_svfiprintf_r+0x104>
    44ac:	9309      	str	r3, [sp, #36]	; 0x24
    44ae:	e013      	b.n	44d8 <_svfiprintf_r+0x104>
    44b0:	2b25      	cmp	r3, #37	; 0x25
    44b2:	d0b5      	beq.n	4420 <_svfiprintf_r+0x4c>
    44b4:	3401      	adds	r4, #1
    44b6:	e7b0      	b.n	441a <_svfiprintf_r+0x46>
    44b8:	2301      	movs	r3, #1
    44ba:	1b80      	subs	r0, r0, r6
    44bc:	4083      	lsls	r3, r0
    44be:	6829      	ldr	r1, [r5, #0]
    44c0:	0014      	movs	r4, r2
    44c2:	430b      	orrs	r3, r1
    44c4:	602b      	str	r3, [r5, #0]
    44c6:	e7cd      	b.n	4464 <_svfiprintf_r+0x90>
    44c8:	9b05      	ldr	r3, [sp, #20]
    44ca:	1d18      	adds	r0, r3, #4
    44cc:	681b      	ldr	r3, [r3, #0]
    44ce:	9005      	str	r0, [sp, #20]
    44d0:	2b00      	cmp	r3, #0
    44d2:	db39      	blt.n	4548 <_svfiprintf_r+0x174>
    44d4:	9309      	str	r3, [sp, #36]	; 0x24
    44d6:	0014      	movs	r4, r2
    44d8:	7823      	ldrb	r3, [r4, #0]
    44da:	2b2e      	cmp	r3, #46	; 0x2e
    44dc:	d10b      	bne.n	44f6 <_svfiprintf_r+0x122>
    44de:	7863      	ldrb	r3, [r4, #1]
    44e0:	1c62      	adds	r2, r4, #1
    44e2:	2b2a      	cmp	r3, #42	; 0x2a
    44e4:	d13e      	bne.n	4564 <_svfiprintf_r+0x190>
    44e6:	9b05      	ldr	r3, [sp, #20]
    44e8:	3402      	adds	r4, #2
    44ea:	1d1a      	adds	r2, r3, #4
    44ec:	681b      	ldr	r3, [r3, #0]
    44ee:	9205      	str	r2, [sp, #20]
    44f0:	2b00      	cmp	r3, #0
    44f2:	db34      	blt.n	455e <_svfiprintf_r+0x18a>
    44f4:	9307      	str	r3, [sp, #28]
    44f6:	4e35      	ldr	r6, [pc, #212]	; (45cc <_svfiprintf_r+0x1f8>)
    44f8:	7821      	ldrb	r1, [r4, #0]
    44fa:	2203      	movs	r2, #3
    44fc:	0030      	movs	r0, r6
    44fe:	f000 f9f5 	bl	48ec <memchr>
    4502:	2800      	cmp	r0, #0
    4504:	d006      	beq.n	4514 <_svfiprintf_r+0x140>
    4506:	2340      	movs	r3, #64	; 0x40
    4508:	1b80      	subs	r0, r0, r6
    450a:	4083      	lsls	r3, r0
    450c:	682a      	ldr	r2, [r5, #0]
    450e:	3401      	adds	r4, #1
    4510:	4313      	orrs	r3, r2
    4512:	602b      	str	r3, [r5, #0]
    4514:	7821      	ldrb	r1, [r4, #0]
    4516:	2206      	movs	r2, #6
    4518:	482d      	ldr	r0, [pc, #180]	; (45d0 <_svfiprintf_r+0x1fc>)
    451a:	1c66      	adds	r6, r4, #1
    451c:	7629      	strb	r1, [r5, #24]
    451e:	f000 f9e5 	bl	48ec <memchr>
    4522:	2800      	cmp	r0, #0
    4524:	d046      	beq.n	45b4 <_svfiprintf_r+0x1e0>
    4526:	4b2b      	ldr	r3, [pc, #172]	; (45d4 <_svfiprintf_r+0x200>)
    4528:	2b00      	cmp	r3, #0
    452a:	d12f      	bne.n	458c <_svfiprintf_r+0x1b8>
    452c:	6829      	ldr	r1, [r5, #0]
    452e:	9b05      	ldr	r3, [sp, #20]
    4530:	2207      	movs	r2, #7
    4532:	05c9      	lsls	r1, r1, #23
    4534:	d528      	bpl.n	4588 <_svfiprintf_r+0x1b4>
    4536:	189b      	adds	r3, r3, r2
    4538:	4393      	bics	r3, r2
    453a:	3308      	adds	r3, #8
    453c:	9305      	str	r3, [sp, #20]
    453e:	696b      	ldr	r3, [r5, #20]
    4540:	9a03      	ldr	r2, [sp, #12]
    4542:	189b      	adds	r3, r3, r2
    4544:	616b      	str	r3, [r5, #20]
    4546:	e767      	b.n	4418 <_svfiprintf_r+0x44>
    4548:	425b      	negs	r3, r3
    454a:	60eb      	str	r3, [r5, #12]
    454c:	2302      	movs	r3, #2
    454e:	430b      	orrs	r3, r1
    4550:	602b      	str	r3, [r5, #0]
    4552:	e7c0      	b.n	44d6 <_svfiprintf_r+0x102>
    4554:	434b      	muls	r3, r1
    4556:	3401      	adds	r4, #1
    4558:	189b      	adds	r3, r3, r2
    455a:	2001      	movs	r0, #1
    455c:	e7a0      	b.n	44a0 <_svfiprintf_r+0xcc>
    455e:	2301      	movs	r3, #1
    4560:	425b      	negs	r3, r3
    4562:	e7c7      	b.n	44f4 <_svfiprintf_r+0x120>
    4564:	2300      	movs	r3, #0
    4566:	0014      	movs	r4, r2
    4568:	200a      	movs	r0, #10
    456a:	001a      	movs	r2, r3
    456c:	606b      	str	r3, [r5, #4]
    456e:	7821      	ldrb	r1, [r4, #0]
    4570:	3930      	subs	r1, #48	; 0x30
    4572:	2909      	cmp	r1, #9
    4574:	d903      	bls.n	457e <_svfiprintf_r+0x1aa>
    4576:	2b00      	cmp	r3, #0
    4578:	d0bd      	beq.n	44f6 <_svfiprintf_r+0x122>
    457a:	9207      	str	r2, [sp, #28]
    457c:	e7bb      	b.n	44f6 <_svfiprintf_r+0x122>
    457e:	4342      	muls	r2, r0
    4580:	3401      	adds	r4, #1
    4582:	1852      	adds	r2, r2, r1
    4584:	2301      	movs	r3, #1
    4586:	e7f2      	b.n	456e <_svfiprintf_r+0x19a>
    4588:	3307      	adds	r3, #7
    458a:	e7d5      	b.n	4538 <_svfiprintf_r+0x164>
    458c:	ab05      	add	r3, sp, #20
    458e:	9300      	str	r3, [sp, #0]
    4590:	003a      	movs	r2, r7
    4592:	4b11      	ldr	r3, [pc, #68]	; (45d8 <_svfiprintf_r+0x204>)
    4594:	0029      	movs	r1, r5
    4596:	9802      	ldr	r0, [sp, #8]
    4598:	e000      	b.n	459c <_svfiprintf_r+0x1c8>
    459a:	bf00      	nop
    459c:	9003      	str	r0, [sp, #12]
    459e:	9b03      	ldr	r3, [sp, #12]
    45a0:	3301      	adds	r3, #1
    45a2:	d1cc      	bne.n	453e <_svfiprintf_r+0x16a>
    45a4:	89bb      	ldrh	r3, [r7, #12]
    45a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    45a8:	065b      	lsls	r3, r3, #25
    45aa:	d400      	bmi.n	45ae <_svfiprintf_r+0x1da>
    45ac:	e729      	b.n	4402 <_svfiprintf_r+0x2e>
    45ae:	2001      	movs	r0, #1
    45b0:	4240      	negs	r0, r0
    45b2:	e726      	b.n	4402 <_svfiprintf_r+0x2e>
    45b4:	ab05      	add	r3, sp, #20
    45b6:	9300      	str	r3, [sp, #0]
    45b8:	003a      	movs	r2, r7
    45ba:	4b07      	ldr	r3, [pc, #28]	; (45d8 <_svfiprintf_r+0x204>)
    45bc:	0029      	movs	r1, r5
    45be:	9802      	ldr	r0, [sp, #8]
    45c0:	f000 f87a 	bl	46b8 <_printf_i>
    45c4:	e7ea      	b.n	459c <_svfiprintf_r+0x1c8>
    45c6:	46c0      	nop			; (mov r8, r8)
    45c8:	00004a9c 	.word	0x00004a9c
    45cc:	00004aa2 	.word	0x00004aa2
    45d0:	00004aa6 	.word	0x00004aa6
    45d4:	00000000 	.word	0x00000000
    45d8:	00004311 	.word	0x00004311

000045dc <_printf_common>:
    45dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    45de:	0015      	movs	r5, r2
    45e0:	9301      	str	r3, [sp, #4]
    45e2:	688a      	ldr	r2, [r1, #8]
    45e4:	690b      	ldr	r3, [r1, #16]
    45e6:	9000      	str	r0, [sp, #0]
    45e8:	000c      	movs	r4, r1
    45ea:	4293      	cmp	r3, r2
    45ec:	da00      	bge.n	45f0 <_printf_common+0x14>
    45ee:	0013      	movs	r3, r2
    45f0:	0022      	movs	r2, r4
    45f2:	602b      	str	r3, [r5, #0]
    45f4:	3243      	adds	r2, #67	; 0x43
    45f6:	7812      	ldrb	r2, [r2, #0]
    45f8:	2a00      	cmp	r2, #0
    45fa:	d001      	beq.n	4600 <_printf_common+0x24>
    45fc:	3301      	adds	r3, #1
    45fe:	602b      	str	r3, [r5, #0]
    4600:	6823      	ldr	r3, [r4, #0]
    4602:	069b      	lsls	r3, r3, #26
    4604:	d502      	bpl.n	460c <_printf_common+0x30>
    4606:	682b      	ldr	r3, [r5, #0]
    4608:	3302      	adds	r3, #2
    460a:	602b      	str	r3, [r5, #0]
    460c:	2706      	movs	r7, #6
    460e:	6823      	ldr	r3, [r4, #0]
    4610:	401f      	ands	r7, r3
    4612:	d027      	beq.n	4664 <_printf_common+0x88>
    4614:	0023      	movs	r3, r4
    4616:	3343      	adds	r3, #67	; 0x43
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	1e5a      	subs	r2, r3, #1
    461c:	4193      	sbcs	r3, r2
    461e:	6822      	ldr	r2, [r4, #0]
    4620:	0692      	lsls	r2, r2, #26
    4622:	d430      	bmi.n	4686 <_printf_common+0xaa>
    4624:	0022      	movs	r2, r4
    4626:	9901      	ldr	r1, [sp, #4]
    4628:	3243      	adds	r2, #67	; 0x43
    462a:	9800      	ldr	r0, [sp, #0]
    462c:	9e08      	ldr	r6, [sp, #32]
    462e:	47b0      	blx	r6
    4630:	1c43      	adds	r3, r0, #1
    4632:	d025      	beq.n	4680 <_printf_common+0xa4>
    4634:	2306      	movs	r3, #6
    4636:	6820      	ldr	r0, [r4, #0]
    4638:	682a      	ldr	r2, [r5, #0]
    463a:	68e1      	ldr	r1, [r4, #12]
    463c:	4003      	ands	r3, r0
    463e:	2500      	movs	r5, #0
    4640:	2b04      	cmp	r3, #4
    4642:	d103      	bne.n	464c <_printf_common+0x70>
    4644:	1a8d      	subs	r5, r1, r2
    4646:	43eb      	mvns	r3, r5
    4648:	17db      	asrs	r3, r3, #31
    464a:	401d      	ands	r5, r3
    464c:	68a3      	ldr	r3, [r4, #8]
    464e:	6922      	ldr	r2, [r4, #16]
    4650:	4293      	cmp	r3, r2
    4652:	dd01      	ble.n	4658 <_printf_common+0x7c>
    4654:	1a9b      	subs	r3, r3, r2
    4656:	18ed      	adds	r5, r5, r3
    4658:	2700      	movs	r7, #0
    465a:	42bd      	cmp	r5, r7
    465c:	d120      	bne.n	46a0 <_printf_common+0xc4>
    465e:	2000      	movs	r0, #0
    4660:	e010      	b.n	4684 <_printf_common+0xa8>
    4662:	3701      	adds	r7, #1
    4664:	68e3      	ldr	r3, [r4, #12]
    4666:	682a      	ldr	r2, [r5, #0]
    4668:	1a9b      	subs	r3, r3, r2
    466a:	429f      	cmp	r7, r3
    466c:	dad2      	bge.n	4614 <_printf_common+0x38>
    466e:	0022      	movs	r2, r4
    4670:	2301      	movs	r3, #1
    4672:	3219      	adds	r2, #25
    4674:	9901      	ldr	r1, [sp, #4]
    4676:	9800      	ldr	r0, [sp, #0]
    4678:	9e08      	ldr	r6, [sp, #32]
    467a:	47b0      	blx	r6
    467c:	1c43      	adds	r3, r0, #1
    467e:	d1f0      	bne.n	4662 <_printf_common+0x86>
    4680:	2001      	movs	r0, #1
    4682:	4240      	negs	r0, r0
    4684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4686:	2030      	movs	r0, #48	; 0x30
    4688:	18e1      	adds	r1, r4, r3
    468a:	3143      	adds	r1, #67	; 0x43
    468c:	7008      	strb	r0, [r1, #0]
    468e:	0021      	movs	r1, r4
    4690:	1c5a      	adds	r2, r3, #1
    4692:	3145      	adds	r1, #69	; 0x45
    4694:	7809      	ldrb	r1, [r1, #0]
    4696:	18a2      	adds	r2, r4, r2
    4698:	3243      	adds	r2, #67	; 0x43
    469a:	3302      	adds	r3, #2
    469c:	7011      	strb	r1, [r2, #0]
    469e:	e7c1      	b.n	4624 <_printf_common+0x48>
    46a0:	0022      	movs	r2, r4
    46a2:	2301      	movs	r3, #1
    46a4:	321a      	adds	r2, #26
    46a6:	9901      	ldr	r1, [sp, #4]
    46a8:	9800      	ldr	r0, [sp, #0]
    46aa:	9e08      	ldr	r6, [sp, #32]
    46ac:	47b0      	blx	r6
    46ae:	1c43      	adds	r3, r0, #1
    46b0:	d0e6      	beq.n	4680 <_printf_common+0xa4>
    46b2:	3701      	adds	r7, #1
    46b4:	e7d1      	b.n	465a <_printf_common+0x7e>
	...

000046b8 <_printf_i>:
    46b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    46ba:	b08b      	sub	sp, #44	; 0x2c
    46bc:	9206      	str	r2, [sp, #24]
    46be:	000a      	movs	r2, r1
    46c0:	3243      	adds	r2, #67	; 0x43
    46c2:	9307      	str	r3, [sp, #28]
    46c4:	9005      	str	r0, [sp, #20]
    46c6:	9204      	str	r2, [sp, #16]
    46c8:	7e0a      	ldrb	r2, [r1, #24]
    46ca:	000c      	movs	r4, r1
    46cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    46ce:	2a6e      	cmp	r2, #110	; 0x6e
    46d0:	d100      	bne.n	46d4 <_printf_i+0x1c>
    46d2:	e08f      	b.n	47f4 <_printf_i+0x13c>
    46d4:	d817      	bhi.n	4706 <_printf_i+0x4e>
    46d6:	2a63      	cmp	r2, #99	; 0x63
    46d8:	d02c      	beq.n	4734 <_printf_i+0x7c>
    46da:	d808      	bhi.n	46ee <_printf_i+0x36>
    46dc:	2a00      	cmp	r2, #0
    46de:	d100      	bne.n	46e2 <_printf_i+0x2a>
    46e0:	e099      	b.n	4816 <_printf_i+0x15e>
    46e2:	2a58      	cmp	r2, #88	; 0x58
    46e4:	d054      	beq.n	4790 <_printf_i+0xd8>
    46e6:	0026      	movs	r6, r4
    46e8:	3642      	adds	r6, #66	; 0x42
    46ea:	7032      	strb	r2, [r6, #0]
    46ec:	e029      	b.n	4742 <_printf_i+0x8a>
    46ee:	2a64      	cmp	r2, #100	; 0x64
    46f0:	d001      	beq.n	46f6 <_printf_i+0x3e>
    46f2:	2a69      	cmp	r2, #105	; 0x69
    46f4:	d1f7      	bne.n	46e6 <_printf_i+0x2e>
    46f6:	6821      	ldr	r1, [r4, #0]
    46f8:	681a      	ldr	r2, [r3, #0]
    46fa:	0608      	lsls	r0, r1, #24
    46fc:	d523      	bpl.n	4746 <_printf_i+0x8e>
    46fe:	1d11      	adds	r1, r2, #4
    4700:	6019      	str	r1, [r3, #0]
    4702:	6815      	ldr	r5, [r2, #0]
    4704:	e025      	b.n	4752 <_printf_i+0x9a>
    4706:	2a73      	cmp	r2, #115	; 0x73
    4708:	d100      	bne.n	470c <_printf_i+0x54>
    470a:	e088      	b.n	481e <_printf_i+0x166>
    470c:	d808      	bhi.n	4720 <_printf_i+0x68>
    470e:	2a6f      	cmp	r2, #111	; 0x6f
    4710:	d029      	beq.n	4766 <_printf_i+0xae>
    4712:	2a70      	cmp	r2, #112	; 0x70
    4714:	d1e7      	bne.n	46e6 <_printf_i+0x2e>
    4716:	2220      	movs	r2, #32
    4718:	6809      	ldr	r1, [r1, #0]
    471a:	430a      	orrs	r2, r1
    471c:	6022      	str	r2, [r4, #0]
    471e:	e003      	b.n	4728 <_printf_i+0x70>
    4720:	2a75      	cmp	r2, #117	; 0x75
    4722:	d020      	beq.n	4766 <_printf_i+0xae>
    4724:	2a78      	cmp	r2, #120	; 0x78
    4726:	d1de      	bne.n	46e6 <_printf_i+0x2e>
    4728:	0022      	movs	r2, r4
    472a:	2178      	movs	r1, #120	; 0x78
    472c:	3245      	adds	r2, #69	; 0x45
    472e:	7011      	strb	r1, [r2, #0]
    4730:	4a6c      	ldr	r2, [pc, #432]	; (48e4 <_printf_i+0x22c>)
    4732:	e030      	b.n	4796 <_printf_i+0xde>
    4734:	000e      	movs	r6, r1
    4736:	681a      	ldr	r2, [r3, #0]
    4738:	3642      	adds	r6, #66	; 0x42
    473a:	1d11      	adds	r1, r2, #4
    473c:	6019      	str	r1, [r3, #0]
    473e:	6813      	ldr	r3, [r2, #0]
    4740:	7033      	strb	r3, [r6, #0]
    4742:	2301      	movs	r3, #1
    4744:	e079      	b.n	483a <_printf_i+0x182>
    4746:	0649      	lsls	r1, r1, #25
    4748:	d5d9      	bpl.n	46fe <_printf_i+0x46>
    474a:	1d11      	adds	r1, r2, #4
    474c:	6019      	str	r1, [r3, #0]
    474e:	2300      	movs	r3, #0
    4750:	5ed5      	ldrsh	r5, [r2, r3]
    4752:	2d00      	cmp	r5, #0
    4754:	da03      	bge.n	475e <_printf_i+0xa6>
    4756:	232d      	movs	r3, #45	; 0x2d
    4758:	9a04      	ldr	r2, [sp, #16]
    475a:	426d      	negs	r5, r5
    475c:	7013      	strb	r3, [r2, #0]
    475e:	4b62      	ldr	r3, [pc, #392]	; (48e8 <_printf_i+0x230>)
    4760:	270a      	movs	r7, #10
    4762:	9303      	str	r3, [sp, #12]
    4764:	e02f      	b.n	47c6 <_printf_i+0x10e>
    4766:	6820      	ldr	r0, [r4, #0]
    4768:	6819      	ldr	r1, [r3, #0]
    476a:	0605      	lsls	r5, r0, #24
    476c:	d503      	bpl.n	4776 <_printf_i+0xbe>
    476e:	1d08      	adds	r0, r1, #4
    4770:	6018      	str	r0, [r3, #0]
    4772:	680d      	ldr	r5, [r1, #0]
    4774:	e005      	b.n	4782 <_printf_i+0xca>
    4776:	0640      	lsls	r0, r0, #25
    4778:	d5f9      	bpl.n	476e <_printf_i+0xb6>
    477a:	680d      	ldr	r5, [r1, #0]
    477c:	1d08      	adds	r0, r1, #4
    477e:	6018      	str	r0, [r3, #0]
    4780:	b2ad      	uxth	r5, r5
    4782:	4b59      	ldr	r3, [pc, #356]	; (48e8 <_printf_i+0x230>)
    4784:	2708      	movs	r7, #8
    4786:	9303      	str	r3, [sp, #12]
    4788:	2a6f      	cmp	r2, #111	; 0x6f
    478a:	d018      	beq.n	47be <_printf_i+0x106>
    478c:	270a      	movs	r7, #10
    478e:	e016      	b.n	47be <_printf_i+0x106>
    4790:	3145      	adds	r1, #69	; 0x45
    4792:	700a      	strb	r2, [r1, #0]
    4794:	4a54      	ldr	r2, [pc, #336]	; (48e8 <_printf_i+0x230>)
    4796:	9203      	str	r2, [sp, #12]
    4798:	681a      	ldr	r2, [r3, #0]
    479a:	6821      	ldr	r1, [r4, #0]
    479c:	1d10      	adds	r0, r2, #4
    479e:	6018      	str	r0, [r3, #0]
    47a0:	6815      	ldr	r5, [r2, #0]
    47a2:	0608      	lsls	r0, r1, #24
    47a4:	d522      	bpl.n	47ec <_printf_i+0x134>
    47a6:	07cb      	lsls	r3, r1, #31
    47a8:	d502      	bpl.n	47b0 <_printf_i+0xf8>
    47aa:	2320      	movs	r3, #32
    47ac:	4319      	orrs	r1, r3
    47ae:	6021      	str	r1, [r4, #0]
    47b0:	2710      	movs	r7, #16
    47b2:	2d00      	cmp	r5, #0
    47b4:	d103      	bne.n	47be <_printf_i+0x106>
    47b6:	2320      	movs	r3, #32
    47b8:	6822      	ldr	r2, [r4, #0]
    47ba:	439a      	bics	r2, r3
    47bc:	6022      	str	r2, [r4, #0]
    47be:	0023      	movs	r3, r4
    47c0:	2200      	movs	r2, #0
    47c2:	3343      	adds	r3, #67	; 0x43
    47c4:	701a      	strb	r2, [r3, #0]
    47c6:	6863      	ldr	r3, [r4, #4]
    47c8:	60a3      	str	r3, [r4, #8]
    47ca:	2b00      	cmp	r3, #0
    47cc:	db5c      	blt.n	4888 <_printf_i+0x1d0>
    47ce:	2204      	movs	r2, #4
    47d0:	6821      	ldr	r1, [r4, #0]
    47d2:	4391      	bics	r1, r2
    47d4:	6021      	str	r1, [r4, #0]
    47d6:	2d00      	cmp	r5, #0
    47d8:	d158      	bne.n	488c <_printf_i+0x1d4>
    47da:	9e04      	ldr	r6, [sp, #16]
    47dc:	2b00      	cmp	r3, #0
    47de:	d064      	beq.n	48aa <_printf_i+0x1f2>
    47e0:	0026      	movs	r6, r4
    47e2:	9b03      	ldr	r3, [sp, #12]
    47e4:	3642      	adds	r6, #66	; 0x42
    47e6:	781b      	ldrb	r3, [r3, #0]
    47e8:	7033      	strb	r3, [r6, #0]
    47ea:	e05e      	b.n	48aa <_printf_i+0x1f2>
    47ec:	0648      	lsls	r0, r1, #25
    47ee:	d5da      	bpl.n	47a6 <_printf_i+0xee>
    47f0:	b2ad      	uxth	r5, r5
    47f2:	e7d8      	b.n	47a6 <_printf_i+0xee>
    47f4:	6809      	ldr	r1, [r1, #0]
    47f6:	681a      	ldr	r2, [r3, #0]
    47f8:	0608      	lsls	r0, r1, #24
    47fa:	d505      	bpl.n	4808 <_printf_i+0x150>
    47fc:	1d11      	adds	r1, r2, #4
    47fe:	6019      	str	r1, [r3, #0]
    4800:	6813      	ldr	r3, [r2, #0]
    4802:	6962      	ldr	r2, [r4, #20]
    4804:	601a      	str	r2, [r3, #0]
    4806:	e006      	b.n	4816 <_printf_i+0x15e>
    4808:	0649      	lsls	r1, r1, #25
    480a:	d5f7      	bpl.n	47fc <_printf_i+0x144>
    480c:	1d11      	adds	r1, r2, #4
    480e:	6019      	str	r1, [r3, #0]
    4810:	6813      	ldr	r3, [r2, #0]
    4812:	8aa2      	ldrh	r2, [r4, #20]
    4814:	801a      	strh	r2, [r3, #0]
    4816:	2300      	movs	r3, #0
    4818:	9e04      	ldr	r6, [sp, #16]
    481a:	6123      	str	r3, [r4, #16]
    481c:	e054      	b.n	48c8 <_printf_i+0x210>
    481e:	681a      	ldr	r2, [r3, #0]
    4820:	1d11      	adds	r1, r2, #4
    4822:	6019      	str	r1, [r3, #0]
    4824:	6816      	ldr	r6, [r2, #0]
    4826:	2100      	movs	r1, #0
    4828:	6862      	ldr	r2, [r4, #4]
    482a:	0030      	movs	r0, r6
    482c:	f000 f85e 	bl	48ec <memchr>
    4830:	2800      	cmp	r0, #0
    4832:	d001      	beq.n	4838 <_printf_i+0x180>
    4834:	1b80      	subs	r0, r0, r6
    4836:	6060      	str	r0, [r4, #4]
    4838:	6863      	ldr	r3, [r4, #4]
    483a:	6123      	str	r3, [r4, #16]
    483c:	2300      	movs	r3, #0
    483e:	9a04      	ldr	r2, [sp, #16]
    4840:	7013      	strb	r3, [r2, #0]
    4842:	e041      	b.n	48c8 <_printf_i+0x210>
    4844:	6923      	ldr	r3, [r4, #16]
    4846:	0032      	movs	r2, r6
    4848:	9906      	ldr	r1, [sp, #24]
    484a:	9805      	ldr	r0, [sp, #20]
    484c:	9d07      	ldr	r5, [sp, #28]
    484e:	47a8      	blx	r5
    4850:	1c43      	adds	r3, r0, #1
    4852:	d043      	beq.n	48dc <_printf_i+0x224>
    4854:	6823      	ldr	r3, [r4, #0]
    4856:	2500      	movs	r5, #0
    4858:	079b      	lsls	r3, r3, #30
    485a:	d40f      	bmi.n	487c <_printf_i+0x1c4>
    485c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    485e:	68e0      	ldr	r0, [r4, #12]
    4860:	4298      	cmp	r0, r3
    4862:	da3d      	bge.n	48e0 <_printf_i+0x228>
    4864:	0018      	movs	r0, r3
    4866:	e03b      	b.n	48e0 <_printf_i+0x228>
    4868:	0022      	movs	r2, r4
    486a:	2301      	movs	r3, #1
    486c:	3219      	adds	r2, #25
    486e:	9906      	ldr	r1, [sp, #24]
    4870:	9805      	ldr	r0, [sp, #20]
    4872:	9e07      	ldr	r6, [sp, #28]
    4874:	47b0      	blx	r6
    4876:	1c43      	adds	r3, r0, #1
    4878:	d030      	beq.n	48dc <_printf_i+0x224>
    487a:	3501      	adds	r5, #1
    487c:	68e3      	ldr	r3, [r4, #12]
    487e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4880:	1a9b      	subs	r3, r3, r2
    4882:	429d      	cmp	r5, r3
    4884:	dbf0      	blt.n	4868 <_printf_i+0x1b0>
    4886:	e7e9      	b.n	485c <_printf_i+0x1a4>
    4888:	2d00      	cmp	r5, #0
    488a:	d0a9      	beq.n	47e0 <_printf_i+0x128>
    488c:	9e04      	ldr	r6, [sp, #16]
    488e:	0028      	movs	r0, r5
    4890:	0039      	movs	r1, r7
    4892:	f7fd fd0b 	bl	22ac <__aeabi_uidivmod>
    4896:	9b03      	ldr	r3, [sp, #12]
    4898:	3e01      	subs	r6, #1
    489a:	5c5b      	ldrb	r3, [r3, r1]
    489c:	0028      	movs	r0, r5
    489e:	7033      	strb	r3, [r6, #0]
    48a0:	0039      	movs	r1, r7
    48a2:	f7fd fc7d 	bl	21a0 <__udivsi3>
    48a6:	1e05      	subs	r5, r0, #0
    48a8:	d1f1      	bne.n	488e <_printf_i+0x1d6>
    48aa:	2f08      	cmp	r7, #8
    48ac:	d109      	bne.n	48c2 <_printf_i+0x20a>
    48ae:	6823      	ldr	r3, [r4, #0]
    48b0:	07db      	lsls	r3, r3, #31
    48b2:	d506      	bpl.n	48c2 <_printf_i+0x20a>
    48b4:	6863      	ldr	r3, [r4, #4]
    48b6:	6922      	ldr	r2, [r4, #16]
    48b8:	4293      	cmp	r3, r2
    48ba:	dc02      	bgt.n	48c2 <_printf_i+0x20a>
    48bc:	2330      	movs	r3, #48	; 0x30
    48be:	3e01      	subs	r6, #1
    48c0:	7033      	strb	r3, [r6, #0]
    48c2:	9b04      	ldr	r3, [sp, #16]
    48c4:	1b9b      	subs	r3, r3, r6
    48c6:	6123      	str	r3, [r4, #16]
    48c8:	9b07      	ldr	r3, [sp, #28]
    48ca:	aa09      	add	r2, sp, #36	; 0x24
    48cc:	9300      	str	r3, [sp, #0]
    48ce:	0021      	movs	r1, r4
    48d0:	9b06      	ldr	r3, [sp, #24]
    48d2:	9805      	ldr	r0, [sp, #20]
    48d4:	f7ff fe82 	bl	45dc <_printf_common>
    48d8:	1c43      	adds	r3, r0, #1
    48da:	d1b3      	bne.n	4844 <_printf_i+0x18c>
    48dc:	2001      	movs	r0, #1
    48de:	4240      	negs	r0, r0
    48e0:	b00b      	add	sp, #44	; 0x2c
    48e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48e4:	00004abe 	.word	0x00004abe
    48e8:	00004aad 	.word	0x00004aad

000048ec <memchr>:
    48ec:	b2c9      	uxtb	r1, r1
    48ee:	1882      	adds	r2, r0, r2
    48f0:	4290      	cmp	r0, r2
    48f2:	d101      	bne.n	48f8 <memchr+0xc>
    48f4:	2000      	movs	r0, #0
    48f6:	4770      	bx	lr
    48f8:	7803      	ldrb	r3, [r0, #0]
    48fa:	428b      	cmp	r3, r1
    48fc:	d0fb      	beq.n	48f6 <memchr+0xa>
    48fe:	3001      	adds	r0, #1
    4900:	e7f6      	b.n	48f0 <memchr+0x4>

00004902 <memcpy>:
    4902:	2300      	movs	r3, #0
    4904:	b510      	push	{r4, lr}
    4906:	429a      	cmp	r2, r3
    4908:	d100      	bne.n	490c <memcpy+0xa>
    490a:	bd10      	pop	{r4, pc}
    490c:	5ccc      	ldrb	r4, [r1, r3]
    490e:	54c4      	strb	r4, [r0, r3]
    4910:	3301      	adds	r3, #1
    4912:	e7f8      	b.n	4906 <memcpy+0x4>

00004914 <memmove>:
    4914:	b510      	push	{r4, lr}
    4916:	4288      	cmp	r0, r1
    4918:	d902      	bls.n	4920 <memmove+0xc>
    491a:	188b      	adds	r3, r1, r2
    491c:	4298      	cmp	r0, r3
    491e:	d308      	bcc.n	4932 <memmove+0x1e>
    4920:	2300      	movs	r3, #0
    4922:	429a      	cmp	r2, r3
    4924:	d007      	beq.n	4936 <memmove+0x22>
    4926:	5ccc      	ldrb	r4, [r1, r3]
    4928:	54c4      	strb	r4, [r0, r3]
    492a:	3301      	adds	r3, #1
    492c:	e7f9      	b.n	4922 <memmove+0xe>
    492e:	5c8b      	ldrb	r3, [r1, r2]
    4930:	5483      	strb	r3, [r0, r2]
    4932:	3a01      	subs	r2, #1
    4934:	d2fb      	bcs.n	492e <memmove+0x1a>
    4936:	bd10      	pop	{r4, pc}

00004938 <_realloc_r>:
    4938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    493a:	0007      	movs	r7, r0
    493c:	000d      	movs	r5, r1
    493e:	0016      	movs	r6, r2
    4940:	2900      	cmp	r1, #0
    4942:	d105      	bne.n	4950 <_realloc_r+0x18>
    4944:	0011      	movs	r1, r2
    4946:	f7ff fc47 	bl	41d8 <_malloc_r>
    494a:	0004      	movs	r4, r0
    494c:	0020      	movs	r0, r4
    494e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4950:	2a00      	cmp	r2, #0
    4952:	d103      	bne.n	495c <_realloc_r+0x24>
    4954:	f7ff fbf6 	bl	4144 <_free_r>
    4958:	0034      	movs	r4, r6
    495a:	e7f7      	b.n	494c <_realloc_r+0x14>
    495c:	f000 f812 	bl	4984 <_malloc_usable_size_r>
    4960:	002c      	movs	r4, r5
    4962:	4286      	cmp	r6, r0
    4964:	d9f2      	bls.n	494c <_realloc_r+0x14>
    4966:	0031      	movs	r1, r6
    4968:	0038      	movs	r0, r7
    496a:	f7ff fc35 	bl	41d8 <_malloc_r>
    496e:	1e04      	subs	r4, r0, #0
    4970:	d0ec      	beq.n	494c <_realloc_r+0x14>
    4972:	0029      	movs	r1, r5
    4974:	0032      	movs	r2, r6
    4976:	f7ff ffc4 	bl	4902 <memcpy>
    497a:	0029      	movs	r1, r5
    497c:	0038      	movs	r0, r7
    497e:	f7ff fbe1 	bl	4144 <_free_r>
    4982:	e7e3      	b.n	494c <_realloc_r+0x14>

00004984 <_malloc_usable_size_r>:
    4984:	1f0b      	subs	r3, r1, #4
    4986:	681b      	ldr	r3, [r3, #0]
    4988:	1f18      	subs	r0, r3, #4
    498a:	2b00      	cmp	r3, #0
    498c:	da01      	bge.n	4992 <_malloc_usable_size_r+0xe>
    498e:	580b      	ldr	r3, [r1, r0]
    4990:	18c0      	adds	r0, r0, r3
    4992:	4770      	bx	lr
    4994:	42000800 	.word	0x42000800
    4998:	42000c00 	.word	0x42000c00
    499c:	42001000 	.word	0x42001000
    49a0:	42001400 	.word	0x42001400
    49a4:	42001800 	.word	0x42001800
    49a8:	42001c00 	.word	0x42001c00
    49ac:	0000161e 	.word	0x0000161e
    49b0:	0000161a 	.word	0x0000161a
    49b4:	0000161a 	.word	0x0000161a
    49b8:	00001680 	.word	0x00001680
    49bc:	00001680 	.word	0x00001680
    49c0:	00001632 	.word	0x00001632
    49c4:	00001624 	.word	0x00001624
    49c8:	00001638 	.word	0x00001638
    49cc:	0000166e 	.word	0x0000166e
    49d0:	00001840 	.word	0x00001840
    49d4:	00001820 	.word	0x00001820
    49d8:	00001820 	.word	0x00001820
    49dc:	000018ac 	.word	0x000018ac
    49e0:	00001832 	.word	0x00001832
    49e4:	0000184e 	.word	0x0000184e
    49e8:	00001824 	.word	0x00001824
    49ec:	0000185c 	.word	0x0000185c
    49f0:	0000189c 	.word	0x0000189c
    49f4:	64616552 	.word	0x64616552
    49f8:	20676e69 	.word	0x20676e69
    49fc:	706d6f63 	.word	0x706d6f63
    4a00:	6574656c 	.word	0x6574656c
    4a04:	00000d0a 	.word	0x00000d0a
    4a08:	00206425 	.word	0x00206425
    4a0c:	203b6425 	.word	0x203b6425
    4a10:	00000d0a 	.word	0x00000d0a
    4a14:	0d0a6425 	.word	0x0d0a6425
    4a18:	00000000 	.word	0x00000000
    4a1c:	00002d20 	.word	0x00002d20
    4a20:	00002d02 	.word	0x00002d02
    4a24:	00002cbc 	.word	0x00002cbc
    4a28:	00002bda 	.word	0x00002bda
    4a2c:	00002cbc 	.word	0x00002cbc
    4a30:	00002cf4 	.word	0x00002cf4
    4a34:	00002cbc 	.word	0x00002cbc
    4a38:	00002bda 	.word	0x00002bda
    4a3c:	00002d02 	.word	0x00002d02
    4a40:	00002d02 	.word	0x00002d02
    4a44:	00002cf4 	.word	0x00002cf4
    4a48:	00002bda 	.word	0x00002bda
    4a4c:	00002bd2 	.word	0x00002bd2
    4a50:	00002bd2 	.word	0x00002bd2
    4a54:	00002bd2 	.word	0x00002bd2
    4a58:	00002f38 	.word	0x00002f38
    4a5c:	00003380 	.word	0x00003380
    4a60:	00003240 	.word	0x00003240
    4a64:	00003240 	.word	0x00003240
    4a68:	0000323c 	.word	0x0000323c
    4a6c:	00003358 	.word	0x00003358
    4a70:	00003358 	.word	0x00003358
    4a74:	0000334a 	.word	0x0000334a
    4a78:	0000323c 	.word	0x0000323c
    4a7c:	00003358 	.word	0x00003358
    4a80:	0000334a 	.word	0x0000334a
    4a84:	00003358 	.word	0x00003358
    4a88:	0000323c 	.word	0x0000323c
    4a8c:	00003360 	.word	0x00003360
    4a90:	00003360 	.word	0x00003360
    4a94:	00003360 	.word	0x00003360
    4a98:	00003564 	.word	0x00003564
    4a9c:	2b302d23 	.word	0x2b302d23
    4aa0:	6c680020 	.word	0x6c680020
    4aa4:	6665004c 	.word	0x6665004c
    4aa8:	47464567 	.word	0x47464567
    4aac:	00          	.byte	0x00
    4aad:	30          	.byte	0x30
    4aae:	3231      	.short	0x3231
    4ab0:	36353433 	.word	0x36353433
    4ab4:	41393837 	.word	0x41393837
    4ab8:	45444342 	.word	0x45444342
    4abc:	31300046 	.word	0x31300046
    4ac0:	35343332 	.word	0x35343332
    4ac4:	39383736 	.word	0x39383736
    4ac8:	64636261 	.word	0x64636261
    4acc:	00006665 	.word	0x00006665

00004ad0 <_init>:
    4ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ad2:	46c0      	nop			; (mov r8, r8)
    4ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4ad6:	bc08      	pop	{r3}
    4ad8:	469e      	mov	lr, r3
    4ada:	4770      	bx	lr

00004adc <__init_array_start>:
    4adc:	000000dd 	.word	0x000000dd

00004ae0 <_fini>:
    4ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ae2:	46c0      	nop			; (mov r8, r8)
    4ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4ae6:	bc08      	pop	{r3}
    4ae8:	469e      	mov	lr, r3
    4aea:	4770      	bx	lr

00004aec <__fini_array_start>:
    4aec:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <g_interrupt_enabled>:
2000000c:	0701                                             .

2000000d <k.13636>:
2000000d:	0007 0000                                        ...

20000010 <wr_buffer>:
20000010:	0100 0302 0504 0706 0000 0000 0000 0000     ................
	...

20000110 <_impure_ptr>:
20000110:	0114 2000                                   ... 

20000114 <impure_data>:
	...
