
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011c70  00009c00  00009c00  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000034c  20000000  0001b870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001020  2000034c  0001bbbc  0002034c  2**2
                  ALLOC
  3 .stack        00002004  2000136c  0001cbdc  0002034c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020374  2**0
                  CONTENTS, READONLY
  6 .debug_info   00084ae1  00000000  00000000  000203cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000c9da  00000000  00000000  000a4eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00023106  00000000  00000000  000b1888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001808  00000000  00000000  000d498e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000022b0  00000000  00000000  000d6196  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002ab07  00000000  00000000  000d8446  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002b609  00000000  00000000  00102f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a1595  00000000  00000000  0012e556  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005334  00000000  00000000  001cfaec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00009c00 <exception_table>:
    9c00:	70 33 00 20 fd 07 01 00 f9 07 01 00 f9 07 01 00     p3. ............
	...
    9c2c:	f9 07 01 00 00 00 00 00 00 00 00 00 f9 07 01 00     ................
    9c3c:	a9 32 01 00 f9 07 01 00 f9 07 01 00 f9 07 01 00     .2..............
    9c4c:	09 e9 00 00 f1 e2 00 00 f9 07 01 00 f9 07 01 00     ................
    9c5c:	f9 07 01 00 f9 07 01 00 31 ed 00 00 41 ed 00 00     ........1...A...
    9c6c:	51 ed 00 00 61 ed 00 00 71 ed 00 00 81 ed 00 00     Q...a...q.......
    9c7c:	c9 07 01 00 d9 07 01 00 e9 07 01 00 f9 07 01 00     ................
    9c8c:	f9 07 01 00 f9 07 01 00 00 00 00 00 00 00 00 00     ................
    9c9c:	f9 07 01 00 f9 07 01 00 f9 07 01 00 f9 07 01 00     ................
    9cac:	f9 07 01 00 00 00 00 00                             ........

00009cb4 <__do_global_dtors_aux>:
    9cb4:	b510      	push	{r4, lr}
    9cb6:	4c06      	ldr	r4, [pc, #24]	; (9cd0 <__do_global_dtors_aux+0x1c>)
    9cb8:	7823      	ldrb	r3, [r4, #0]
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d107      	bne.n	9cce <__do_global_dtors_aux+0x1a>
    9cbe:	4b05      	ldr	r3, [pc, #20]	; (9cd4 <__do_global_dtors_aux+0x20>)
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d002      	beq.n	9cca <__do_global_dtors_aux+0x16>
    9cc4:	4804      	ldr	r0, [pc, #16]	; (9cd8 <__do_global_dtors_aux+0x24>)
    9cc6:	e000      	b.n	9cca <__do_global_dtors_aux+0x16>
    9cc8:	bf00      	nop
    9cca:	2301      	movs	r3, #1
    9ccc:	7023      	strb	r3, [r4, #0]
    9cce:	bd10      	pop	{r4, pc}
    9cd0:	2000034c 	.word	0x2000034c
    9cd4:	00000000 	.word	0x00000000
    9cd8:	0001b870 	.word	0x0001b870

00009cdc <frame_dummy>:
    9cdc:	4b08      	ldr	r3, [pc, #32]	; (9d00 <frame_dummy+0x24>)
    9cde:	b510      	push	{r4, lr}
    9ce0:	2b00      	cmp	r3, #0
    9ce2:	d003      	beq.n	9cec <frame_dummy+0x10>
    9ce4:	4907      	ldr	r1, [pc, #28]	; (9d04 <frame_dummy+0x28>)
    9ce6:	4808      	ldr	r0, [pc, #32]	; (9d08 <frame_dummy+0x2c>)
    9ce8:	e000      	b.n	9cec <frame_dummy+0x10>
    9cea:	bf00      	nop
    9cec:	4807      	ldr	r0, [pc, #28]	; (9d0c <frame_dummy+0x30>)
    9cee:	6803      	ldr	r3, [r0, #0]
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	d100      	bne.n	9cf6 <frame_dummy+0x1a>
    9cf4:	bd10      	pop	{r4, pc}
    9cf6:	4b06      	ldr	r3, [pc, #24]	; (9d10 <frame_dummy+0x34>)
    9cf8:	2b00      	cmp	r3, #0
    9cfa:	d0fb      	beq.n	9cf4 <frame_dummy+0x18>
    9cfc:	4798      	blx	r3
    9cfe:	e7f9      	b.n	9cf4 <frame_dummy+0x18>
    9d00:	00000000 	.word	0x00000000
    9d04:	20000350 	.word	0x20000350
    9d08:	0001b870 	.word	0x0001b870
    9d0c:	0001b870 	.word	0x0001b870
    9d10:	00000000 	.word	0x00000000

00009d14 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    9d14:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    9d16:	4b06      	ldr	r3, [pc, #24]	; (9d30 <sd_mmc_configure_slot+0x1c>)
    9d18:	6819      	ldr	r1, [r3, #0]
    9d1a:	7f8b      	ldrb	r3, [r1, #30]
    9d1c:	1e5a      	subs	r2, r3, #1
    9d1e:	4193      	sbcs	r3, r2
    9d20:	b2db      	uxtb	r3, r3
    9d22:	7b4a      	ldrb	r2, [r1, #13]
    9d24:	6809      	ldr	r1, [r1, #0]
    9d26:	4803      	ldr	r0, [pc, #12]	; (9d34 <sd_mmc_configure_slot+0x20>)
    9d28:	7800      	ldrb	r0, [r0, #0]
    9d2a:	4c03      	ldr	r4, [pc, #12]	; (9d38 <sd_mmc_configure_slot+0x24>)
    9d2c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    9d2e:	bd10      	pop	{r4, pc}
    9d30:	20000368 	.word	0x20000368
    9d34:	20000390 	.word	0x20000390
    9d38:	0000a9b9 	.word	0x0000a9b9

00009d3c <sd_mmc_select_slot>:
{
    9d3c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    9d3e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    9d40:	2800      	cmp	r0, #0
    9d42:	d001      	beq.n	9d48 <sd_mmc_select_slot+0xc>
}
    9d44:	0018      	movs	r0, r3
    9d46:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    9d48:	4b0e      	ldr	r3, [pc, #56]	; (9d84 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    9d4a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    9d4c:	3b03      	subs	r3, #3
    9d4e:	2b01      	cmp	r3, #1
    9d50:	d90d      	bls.n	9d6e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    9d52:	2200      	movs	r2, #0
    9d54:	4b0c      	ldr	r3, [pc, #48]	; (9d88 <sd_mmc_select_slot+0x4c>)
    9d56:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    9d58:	4c0a      	ldr	r4, [pc, #40]	; (9d84 <sd_mmc_select_slot+0x48>)
    9d5a:	4b0c      	ldr	r3, [pc, #48]	; (9d8c <sd_mmc_select_slot+0x50>)
    9d5c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    9d5e:	4b0c      	ldr	r3, [pc, #48]	; (9d90 <sd_mmc_select_slot+0x54>)
    9d60:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    9d62:	7aa3      	ldrb	r3, [r4, #10]
    9d64:	3b02      	subs	r3, #2
    9d66:	4258      	negs	r0, r3
    9d68:	4143      	adcs	r3, r0
    9d6a:	b2db      	uxtb	r3, r3
    9d6c:	e7ea      	b.n	9d44 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    9d6e:	4b05      	ldr	r3, [pc, #20]	; (9d84 <sd_mmc_select_slot+0x48>)
    9d70:	2202      	movs	r2, #2
    9d72:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    9d74:	4a07      	ldr	r2, [pc, #28]	; (9d94 <sd_mmc_select_slot+0x58>)
    9d76:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    9d78:	2201      	movs	r2, #1
    9d7a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    9d7c:	2200      	movs	r2, #0
    9d7e:	779a      	strb	r2, [r3, #30]
    9d80:	e7e7      	b.n	9d52 <sd_mmc_select_slot+0x16>
    9d82:	46c0      	nop			; (mov r8, r8)
    9d84:	2000036c 	.word	0x2000036c
    9d88:	20000390 	.word	0x20000390
    9d8c:	20000368 	.word	0x20000368
    9d90:	00009d15 	.word	0x00009d15
    9d94:	00061a80 	.word	0x00061a80

00009d98 <sd_mmc_cmd13>:
{
    9d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d9a:	4d09      	ldr	r5, [pc, #36]	; (9dc0 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    9d9c:	4f09      	ldr	r7, [pc, #36]	; (9dc4 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    9d9e:	4e0a      	ldr	r6, [pc, #40]	; (9dc8 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    9da0:	2100      	movs	r1, #0
    9da2:	480a      	ldr	r0, [pc, #40]	; (9dcc <sd_mmc_cmd13+0x34>)
    9da4:	47b8      	blx	r7
    9da6:	1e04      	subs	r4, r0, #0
    9da8:	d007      	beq.n	9dba <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    9daa:	47b0      	blx	r6
    9dac:	23ff      	movs	r3, #255	; 0xff
    9dae:	4203      	tst	r3, r0
    9db0:	d003      	beq.n	9dba <sd_mmc_cmd13+0x22>
    9db2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    9db4:	2d00      	cmp	r5, #0
    9db6:	d1f3      	bne.n	9da0 <sd_mmc_cmd13+0x8>
			return false;
    9db8:	2400      	movs	r4, #0
}
    9dba:	0020      	movs	r0, r4
    9dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9dbe:	46c0      	nop			; (mov r8, r8)
    9dc0:	00030d41 	.word	0x00030d41
    9dc4:	0000abfd 	.word	0x0000abfd
    9dc8:	0000ac15 	.word	0x0000ac15
    9dcc:	00001b0d 	.word	0x00001b0d

00009dd0 <sd_mmc_cmd9_spi>:
{
    9dd0:	b510      	push	{r4, lr}
    9dd2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    9dd4:	4b0c      	ldr	r3, [pc, #48]	; (9e08 <sd_mmc_cmd9_spi+0x38>)
    9dd6:	681b      	ldr	r3, [r3, #0]
    9dd8:	8919      	ldrh	r1, [r3, #8]
    9dda:	0409      	lsls	r1, r1, #16
    9ddc:	2301      	movs	r3, #1
    9dde:	9300      	str	r3, [sp, #0]
    9de0:	2210      	movs	r2, #16
    9de2:	480a      	ldr	r0, [pc, #40]	; (9e0c <sd_mmc_cmd9_spi+0x3c>)
    9de4:	4c0a      	ldr	r4, [pc, #40]	; (9e10 <sd_mmc_cmd9_spi+0x40>)
    9de6:	47a0      	blx	r4
    9de8:	2800      	cmp	r0, #0
    9dea:	d101      	bne.n	9df0 <sd_mmc_cmd9_spi+0x20>
}
    9dec:	b002      	add	sp, #8
    9dee:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    9df0:	4b05      	ldr	r3, [pc, #20]	; (9e08 <sd_mmc_cmd9_spi+0x38>)
    9df2:	6818      	ldr	r0, [r3, #0]
    9df4:	300e      	adds	r0, #14
    9df6:	2101      	movs	r1, #1
    9df8:	4b06      	ldr	r3, [pc, #24]	; (9e14 <sd_mmc_cmd9_spi+0x44>)
    9dfa:	4798      	blx	r3
    9dfc:	2800      	cmp	r0, #0
    9dfe:	d0f5      	beq.n	9dec <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    9e00:	4b05      	ldr	r3, [pc, #20]	; (9e18 <sd_mmc_cmd9_spi+0x48>)
    9e02:	4798      	blx	r3
    9e04:	e7f2      	b.n	9dec <sd_mmc_cmd9_spi+0x1c>
    9e06:	46c0      	nop			; (mov r8, r8)
    9e08:	20000368 	.word	0x20000368
    9e0c:	00081109 	.word	0x00081109
    9e10:	0000aa6d 	.word	0x0000aa6d
    9e14:	0000ac99 	.word	0x0000ac99
    9e18:	0000ad25 	.word	0x0000ad25

00009e1c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    9e1c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    9e1e:	4b04      	ldr	r3, [pc, #16]	; (9e30 <sd_mmc_deselect_slot+0x14>)
    9e20:	781b      	ldrb	r3, [r3, #0]
    9e22:	2b00      	cmp	r3, #0
    9e24:	d000      	beq.n	9e28 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    9e26:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    9e28:	2000      	movs	r0, #0
    9e2a:	4b02      	ldr	r3, [pc, #8]	; (9e34 <sd_mmc_deselect_slot+0x18>)
    9e2c:	4798      	blx	r3
}
    9e2e:	e7fa      	b.n	9e26 <sd_mmc_deselect_slot+0xa>
    9e30:	20000390 	.word	0x20000390
    9e34:	0000aa0d 	.word	0x0000aa0d

00009e38 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    9e38:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    9e3a:	2204      	movs	r2, #4
    9e3c:	4b03      	ldr	r3, [pc, #12]	; (9e4c <sd_mmc_init+0x14>)
    9e3e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    9e40:	32fb      	adds	r2, #251	; 0xfb
    9e42:	4b03      	ldr	r3, [pc, #12]	; (9e50 <sd_mmc_init+0x18>)
    9e44:	701a      	strb	r2, [r3, #0]
	driver_init();
    9e46:	4b03      	ldr	r3, [pc, #12]	; (9e54 <sd_mmc_init+0x1c>)
    9e48:	4798      	blx	r3
}
    9e4a:	bd10      	pop	{r4, pc}
    9e4c:	2000036c 	.word	0x2000036c
    9e50:	20000390 	.word	0x20000390
    9e54:	0000a8bd 	.word	0x0000a8bd

00009e58 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    9e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e5a:	46c6      	mov	lr, r8
    9e5c:	b500      	push	{lr}
    9e5e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    9e60:	4bcb      	ldr	r3, [pc, #812]	; (a190 <sd_mmc_check+0x338>)
    9e62:	4798      	blx	r3
    9e64:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    9e66:	2801      	cmp	r0, #1
    9e68:	d006      	beq.n	9e78 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    9e6a:	4bca      	ldr	r3, [pc, #808]	; (a194 <sd_mmc_check+0x33c>)
    9e6c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    9e6e:	0020      	movs	r0, r4
    9e70:	b008      	add	sp, #32
    9e72:	bc04      	pop	{r2}
    9e74:	4690      	mov	r8, r2
    9e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    9e78:	4bc7      	ldr	r3, [pc, #796]	; (a198 <sd_mmc_check+0x340>)
    9e7a:	681b      	ldr	r3, [r3, #0]
    9e7c:	2201      	movs	r2, #1
    9e7e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    9e80:	2200      	movs	r2, #0
    9e82:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    9e84:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    9e86:	4bc5      	ldr	r3, [pc, #788]	; (a19c <sd_mmc_check+0x344>)
    9e88:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9e8a:	2100      	movs	r1, #0
    9e8c:	2088      	movs	r0, #136	; 0x88
    9e8e:	0140      	lsls	r0, r0, #5
    9e90:	4bc3      	ldr	r3, [pc, #780]	; (a1a0 <sd_mmc_check+0x348>)
    9e92:	4798      	blx	r3
    9e94:	2800      	cmp	r0, #0
    9e96:	d107      	bne.n	9ea8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    9e98:	4bbf      	ldr	r3, [pc, #764]	; (a198 <sd_mmc_check+0x340>)
    9e9a:	681b      	ldr	r3, [r3, #0]
    9e9c:	2203      	movs	r2, #3
    9e9e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    9ea0:	4bbc      	ldr	r3, [pc, #752]	; (a194 <sd_mmc_check+0x33c>)
    9ea2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    9ea4:	2403      	movs	r4, #3
    9ea6:	e7e2      	b.n	9e6e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    9ea8:	21d5      	movs	r1, #213	; 0xd5
    9eaa:	0049      	lsls	r1, r1, #1
    9eac:	48bd      	ldr	r0, [pc, #756]	; (a1a4 <sd_mmc_check+0x34c>)
    9eae:	4bbc      	ldr	r3, [pc, #752]	; (a1a0 <sd_mmc_check+0x348>)
    9eb0:	4798      	blx	r3
	*v2 = 0;
    9eb2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    9eb4:	2800      	cmp	r0, #0
    9eb6:	d125      	bne.n	9f04 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9eb8:	4bb7      	ldr	r3, [pc, #732]	; (a198 <sd_mmc_check+0x340>)
    9eba:	681b      	ldr	r3, [r3, #0]
    9ebc:	7adb      	ldrb	r3, [r3, #11]
    9ebe:	07db      	lsls	r3, r3, #31
    9ec0:	d500      	bpl.n	9ec4 <sd_mmc_check+0x6c>
    9ec2:	e1eb      	b.n	a29c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    9ec4:	4bb4      	ldr	r3, [pc, #720]	; (a198 <sd_mmc_check+0x340>)
    9ec6:	681b      	ldr	r3, [r3, #0]
    9ec8:	7ada      	ldrb	r2, [r3, #11]
    9eca:	2309      	movs	r3, #9
    9ecc:	4013      	ands	r3, r2
    9ece:	2b01      	cmp	r3, #1
    9ed0:	d10f      	bne.n	9ef2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    9ed2:	2180      	movs	r1, #128	; 0x80
    9ed4:	0089      	lsls	r1, r1, #2
    9ed6:	48b4      	ldr	r0, [pc, #720]	; (a1a8 <sd_mmc_check+0x350>)
    9ed8:	4bb1      	ldr	r3, [pc, #708]	; (a1a0 <sd_mmc_check+0x348>)
    9eda:	4798      	blx	r3
    9edc:	2800      	cmp	r0, #0
    9ede:	d0db      	beq.n	9e98 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9ee0:	4bad      	ldr	r3, [pc, #692]	; (a198 <sd_mmc_check+0x340>)
    9ee2:	681b      	ldr	r3, [r3, #0]
    9ee4:	7adb      	ldrb	r3, [r3, #11]
    9ee6:	07db      	lsls	r3, r3, #31
    9ee8:	d503      	bpl.n	9ef2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    9eea:	4bb0      	ldr	r3, [pc, #704]	; (a1ac <sd_mmc_check+0x354>)
    9eec:	4798      	blx	r3
    9eee:	2800      	cmp	r0, #0
    9ef0:	d0d2      	beq.n	9e98 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    9ef2:	4baf      	ldr	r3, [pc, #700]	; (a1b0 <sd_mmc_check+0x358>)
    9ef4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    9ef6:	4ba8      	ldr	r3, [pc, #672]	; (a198 <sd_mmc_check+0x340>)
    9ef8:	681b      	ldr	r3, [r3, #0]
    9efa:	2200      	movs	r2, #0
    9efc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    9efe:	4ba5      	ldr	r3, [pc, #660]	; (a194 <sd_mmc_check+0x33c>)
    9f00:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    9f02:	e7b4      	b.n	9e6e <sd_mmc_check+0x16>
	resp = driver_get_response();
    9f04:	4bab      	ldr	r3, [pc, #684]	; (a1b4 <sd_mmc_check+0x35c>)
    9f06:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    9f08:	1c43      	adds	r3, r0, #1
    9f0a:	d100      	bne.n	9f0e <sd_mmc_check+0xb6>
    9f0c:	e1c4      	b.n	a298 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    9f0e:	0500      	lsls	r0, r0, #20
    9f10:	0d00      	lsrs	r0, r0, #20
    9f12:	23d5      	movs	r3, #213	; 0xd5
    9f14:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    9f16:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    9f18:	4298      	cmp	r0, r3
    9f1a:	d1bd      	bne.n	9e98 <sd_mmc_check+0x40>
    9f1c:	e7cc      	b.n	9eb8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    9f1e:	2100      	movs	r1, #0
    9f20:	48a5      	ldr	r0, [pc, #660]	; (a1b8 <sd_mmc_check+0x360>)
    9f22:	4b9f      	ldr	r3, [pc, #636]	; (a1a0 <sd_mmc_check+0x348>)
    9f24:	4798      	blx	r3
    9f26:	2800      	cmp	r0, #0
    9f28:	d119      	bne.n	9f5e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    9f2a:	4b9b      	ldr	r3, [pc, #620]	; (a198 <sd_mmc_check+0x340>)
    9f2c:	681b      	ldr	r3, [r3, #0]
    9f2e:	2202      	movs	r2, #2
    9f30:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9f32:	2100      	movs	r1, #0
    9f34:	2088      	movs	r0, #136	; 0x88
    9f36:	0140      	lsls	r0, r0, #5
    9f38:	4b99      	ldr	r3, [pc, #612]	; (a1a0 <sd_mmc_check+0x348>)
    9f3a:	4798      	blx	r3
    9f3c:	2800      	cmp	r0, #0
    9f3e:	d0ab      	beq.n	9e98 <sd_mmc_check+0x40>
    9f40:	4d9e      	ldr	r5, [pc, #632]	; (a1bc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    9f42:	4f97      	ldr	r7, [pc, #604]	; (a1a0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
    9f44:	4e9b      	ldr	r6, [pc, #620]	; (a1b4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    9f46:	2100      	movs	r1, #0
    9f48:	489d      	ldr	r0, [pc, #628]	; (a1c0 <sd_mmc_check+0x368>)
    9f4a:	47b8      	blx	r7
    9f4c:	2800      	cmp	r0, #0
    9f4e:	d0a3      	beq.n	9e98 <sd_mmc_check+0x40>
		resp = driver_get_response();
    9f50:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    9f52:	07c3      	lsls	r3, r0, #31
    9f54:	d57d      	bpl.n	a052 <sd_mmc_check+0x1fa>
    9f56:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    9f58:	2d00      	cmp	r5, #0
    9f5a:	d1f4      	bne.n	9f46 <sd_mmc_check+0xee>
    9f5c:	e79c      	b.n	9e98 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    9f5e:	4b95      	ldr	r3, [pc, #596]	; (a1b4 <sd_mmc_check+0x35c>)
    9f60:	4798      	blx	r3
    9f62:	0043      	lsls	r3, r0, #1
    9f64:	d505      	bpl.n	9f72 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    9f66:	4b8c      	ldr	r3, [pc, #560]	; (a198 <sd_mmc_check+0x340>)
    9f68:	681a      	ldr	r2, [r3, #0]
    9f6a:	7ad3      	ldrb	r3, [r2, #11]
    9f6c:	2108      	movs	r1, #8
    9f6e:	430b      	orrs	r3, r1
    9f70:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    9f72:	2100      	movs	r1, #0
    9f74:	4893      	ldr	r0, [pc, #588]	; (a1c4 <sd_mmc_check+0x36c>)
    9f76:	4b8a      	ldr	r3, [pc, #552]	; (a1a0 <sd_mmc_check+0x348>)
    9f78:	4798      	blx	r3
    9f7a:	2800      	cmp	r0, #0
    9f7c:	d08c      	beq.n	9e98 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9f7e:	4b86      	ldr	r3, [pc, #536]	; (a198 <sd_mmc_check+0x340>)
    9f80:	681b      	ldr	r3, [r3, #0]
    9f82:	7adb      	ldrb	r3, [r3, #11]
    9f84:	07da      	lsls	r2, r3, #31
    9f86:	d400      	bmi.n	9f8a <sd_mmc_check+0x132>
    9f88:	e1a4      	b.n	a2d4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    9f8a:	4b8f      	ldr	r3, [pc, #572]	; (a1c8 <sd_mmc_check+0x370>)
    9f8c:	4798      	blx	r3
    9f8e:	2800      	cmp	r0, #0
    9f90:	d082      	beq.n	9e98 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    9f92:	4b81      	ldr	r3, [pc, #516]	; (a198 <sd_mmc_check+0x340>)
    9f94:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9f96:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    9f98:	2107      	movs	r1, #7
    9f9a:	4019      	ands	r1, r3
    9f9c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    9f9e:	488b      	ldr	r0, [pc, #556]	; (a1cc <sd_mmc_check+0x374>)
    9fa0:	5808      	ldr	r0, [r1, r0]
    9fa2:	21fa      	movs	r1, #250	; 0xfa
    9fa4:	0089      	lsls	r1, r1, #2
    9fa6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    9fa8:	065b      	lsls	r3, r3, #25
    9faa:	0f1b      	lsrs	r3, r3, #28
    9fac:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    9fae:	4888      	ldr	r0, [pc, #544]	; (a1d0 <sd_mmc_check+0x378>)
    9fb0:	581b      	ldr	r3, [r3, r0]
    9fb2:	434b      	muls	r3, r1
    9fb4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    9fb6:	7b93      	ldrb	r3, [r2, #14]
    9fb8:	099b      	lsrs	r3, r3, #6
    9fba:	d000      	beq.n	9fbe <sd_mmc_check+0x166>
    9fbc:	e13c      	b.n	a238 <sd_mmc_check+0x3e0>
    9fbe:	7d91      	ldrb	r1, [r2, #22]
    9fc0:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9fc2:	7d53      	ldrb	r3, [r2, #21]
    9fc4:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9fc6:	7d10      	ldrb	r0, [r2, #20]
    9fc8:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9fca:	4303      	orrs	r3, r0
    9fcc:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9fce:	7e10      	ldrb	r0, [r2, #24]
    9fd0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9fd2:	7dd1      	ldrb	r1, [r2, #23]
    9fd4:	0049      	lsls	r1, r1, #1
    9fd6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    9fd8:	051b      	lsls	r3, r3, #20
    9fda:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    9fdc:	3301      	adds	r3, #1
    9fde:	2107      	movs	r1, #7
    9fe0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    9fe2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    9fe4:	408b      	lsls	r3, r1
    9fe6:	7cd0      	ldrb	r0, [r2, #19]
    9fe8:	210f      	movs	r1, #15
    9fea:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    9fec:	408b      	lsls	r3, r1
				/ 1024;
    9fee:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    9ff0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    9ff2:	8911      	ldrh	r1, [r2, #8]
    9ff4:	0409      	lsls	r1, r1, #16
    9ff6:	4877      	ldr	r0, [pc, #476]	; (a1d4 <sd_mmc_check+0x37c>)
    9ff8:	4b69      	ldr	r3, [pc, #420]	; (a1a0 <sd_mmc_check+0x348>)
    9ffa:	4798      	blx	r3
    9ffc:	2800      	cmp	r0, #0
    9ffe:	d100      	bne.n	a002 <sd_mmc_check+0x1aa>
    a000:	e74a      	b.n	9e98 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    a002:	2301      	movs	r3, #1
    a004:	9300      	str	r3, [sp, #0]
    a006:	2208      	movs	r2, #8
    a008:	2100      	movs	r1, #0
    a00a:	4873      	ldr	r0, [pc, #460]	; (a1d8 <sd_mmc_check+0x380>)
    a00c:	4d73      	ldr	r5, [pc, #460]	; (a1dc <sd_mmc_check+0x384>)
    a00e:	47a8      	blx	r5
    a010:	2800      	cmp	r0, #0
    a012:	d100      	bne.n	a016 <sd_mmc_check+0x1be>
    a014:	e740      	b.n	9e98 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    a016:	2101      	movs	r1, #1
    a018:	a806      	add	r0, sp, #24
    a01a:	4b71      	ldr	r3, [pc, #452]	; (a1e0 <sd_mmc_check+0x388>)
    a01c:	4798      	blx	r3
    a01e:	2800      	cmp	r0, #0
    a020:	d100      	bne.n	a024 <sd_mmc_check+0x1cc>
    a022:	e739      	b.n	9e98 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    a024:	4b6f      	ldr	r3, [pc, #444]	; (a1e4 <sd_mmc_check+0x38c>)
    a026:	4798      	blx	r3
    a028:	2800      	cmp	r0, #0
    a02a:	d100      	bne.n	a02e <sd_mmc_check+0x1d6>
    a02c:	e734      	b.n	9e98 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a02e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    a030:	781b      	ldrb	r3, [r3, #0]
    a032:	220f      	movs	r2, #15
    a034:	4013      	ands	r3, r2
    a036:	2b01      	cmp	r3, #1
    a038:	d100      	bne.n	a03c <sd_mmc_check+0x1e4>
    a03a:	e119      	b.n	a270 <sd_mmc_check+0x418>
    a03c:	2b00      	cmp	r3, #0
    a03e:	d100      	bne.n	a042 <sd_mmc_check+0x1ea>
    a040:	e109      	b.n	a256 <sd_mmc_check+0x3fe>
    a042:	2b02      	cmp	r3, #2
    a044:	d100      	bne.n	a048 <sd_mmc_check+0x1f0>
    a046:	e118      	b.n	a27a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    a048:	4b53      	ldr	r3, [pc, #332]	; (a198 <sd_mmc_check+0x340>)
    a04a:	681b      	ldr	r3, [r3, #0]
    a04c:	2210      	movs	r2, #16
    a04e:	731a      	strb	r2, [r3, #12]
    a050:	e105      	b.n	a25e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a052:	2100      	movs	r1, #0
    a054:	4858      	ldr	r0, [pc, #352]	; (a1b8 <sd_mmc_check+0x360>)
    a056:	4b52      	ldr	r3, [pc, #328]	; (a1a0 <sd_mmc_check+0x348>)
    a058:	4798      	blx	r3
    a05a:	2800      	cmp	r0, #0
    a05c:	d100      	bne.n	a060 <sd_mmc_check+0x208>
    a05e:	e71b      	b.n	9e98 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    a060:	4b54      	ldr	r3, [pc, #336]	; (a1b4 <sd_mmc_check+0x35c>)
    a062:	4798      	blx	r3
    a064:	23c0      	movs	r3, #192	; 0xc0
    a066:	05db      	lsls	r3, r3, #23
    a068:	4018      	ands	r0, r3
    a06a:	2380      	movs	r3, #128	; 0x80
    a06c:	05db      	lsls	r3, r3, #23
    a06e:	4298      	cmp	r0, r3
    a070:	d105      	bne.n	a07e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a072:	4b49      	ldr	r3, [pc, #292]	; (a198 <sd_mmc_check+0x340>)
    a074:	681a      	ldr	r2, [r3, #0]
    a076:	7ad1      	ldrb	r1, [r2, #11]
    a078:	2308      	movs	r3, #8
    a07a:	430b      	orrs	r3, r1
    a07c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a07e:	2100      	movs	r1, #0
    a080:	4850      	ldr	r0, [pc, #320]	; (a1c4 <sd_mmc_check+0x36c>)
    a082:	4b47      	ldr	r3, [pc, #284]	; (a1a0 <sd_mmc_check+0x348>)
    a084:	4798      	blx	r3
    a086:	2800      	cmp	r0, #0
    a088:	d100      	bne.n	a08c <sd_mmc_check+0x234>
    a08a:	e705      	b.n	9e98 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    a08c:	4b4e      	ldr	r3, [pc, #312]	; (a1c8 <sd_mmc_check+0x370>)
    a08e:	4798      	blx	r3
    a090:	2800      	cmp	r0, #0
    a092:	d100      	bne.n	a096 <sd_mmc_check+0x23e>
    a094:	e700      	b.n	9e98 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a096:	4b40      	ldr	r3, [pc, #256]	; (a198 <sd_mmc_check+0x340>)
    a098:	681a      	ldr	r2, [r3, #0]
    a09a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    a09c:	069b      	lsls	r3, r3, #26
    a09e:	0f1b      	lsrs	r3, r3, #28
    a0a0:	2b02      	cmp	r3, #2
    a0a2:	d100      	bne.n	a0a6 <sd_mmc_check+0x24e>
    a0a4:	e0a8      	b.n	a1f8 <sd_mmc_check+0x3a0>
    a0a6:	d907      	bls.n	a0b8 <sd_mmc_check+0x260>
    a0a8:	2b03      	cmp	r3, #3
    a0aa:	d100      	bne.n	a0ae <sd_mmc_check+0x256>
    a0ac:	e0a7      	b.n	a1fe <sd_mmc_check+0x3a6>
    a0ae:	2b04      	cmp	r3, #4
    a0b0:	d104      	bne.n	a0bc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    a0b2:	2340      	movs	r3, #64	; 0x40
    a0b4:	7313      	strb	r3, [r2, #12]
    a0b6:	e003      	b.n	a0c0 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a0b8:	2b01      	cmp	r3, #1
    a0ba:	d066      	beq.n	a18a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    a0bc:	2312      	movs	r3, #18
    a0be:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a0c0:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    a0c2:	0659      	lsls	r1, r3, #25
    a0c4:	0f09      	lsrs	r1, r1, #28
    a0c6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a0c8:	2007      	movs	r0, #7
    a0ca:	4003      	ands	r3, r0
    a0cc:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a0ce:	483f      	ldr	r0, [pc, #252]	; (a1cc <sd_mmc_check+0x374>)
    a0d0:	5818      	ldr	r0, [r3, r0]
    a0d2:	23fa      	movs	r3, #250	; 0xfa
    a0d4:	009b      	lsls	r3, r3, #2
    a0d6:	4343      	muls	r3, r0
    a0d8:	4843      	ldr	r0, [pc, #268]	; (a1e8 <sd_mmc_check+0x390>)
    a0da:	5809      	ldr	r1, [r1, r0]
    a0dc:	434b      	muls	r3, r1
    a0de:	6013      	str	r3, [r2, #0]
    a0e0:	7d91      	ldrb	r1, [r2, #22]
    a0e2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a0e4:	7d53      	ldrb	r3, [r2, #21]
    a0e6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a0e8:	7d10      	ldrb	r0, [r2, #20]
    a0ea:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a0ec:	4303      	orrs	r3, r0
    a0ee:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    a0f0:	051b      	lsls	r3, r3, #20
    a0f2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    a0f4:	493d      	ldr	r1, [pc, #244]	; (a1ec <sd_mmc_check+0x394>)
    a0f6:	428b      	cmp	r3, r1
    a0f8:	d00f      	beq.n	a11a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a0fa:	7e10      	ldrb	r0, [r2, #24]
    a0fc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a0fe:	7dd1      	ldrb	r1, [r2, #23]
    a100:	0049      	lsls	r1, r1, #1
    a102:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a104:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    a106:	2007      	movs	r0, #7
    a108:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    a10a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a10c:	408b      	lsls	r3, r1
    a10e:	7cd1      	ldrb	r1, [r2, #19]
    a110:	3008      	adds	r0, #8
    a112:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    a114:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    a116:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    a118:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    a11a:	7b13      	ldrb	r3, [r2, #12]
    a11c:	2b3f      	cmp	r3, #63	; 0x3f
    a11e:	d97b      	bls.n	a218 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    a120:	2100      	movs	r1, #0
    a122:	9100      	str	r1, [sp, #0]
    a124:	2301      	movs	r3, #1
    a126:	2280      	movs	r2, #128	; 0x80
    a128:	0092      	lsls	r2, r2, #2
    a12a:	4831      	ldr	r0, [pc, #196]	; (a1f0 <sd_mmc_check+0x398>)
    a12c:	4d2b      	ldr	r5, [pc, #172]	; (a1dc <sd_mmc_check+0x384>)
    a12e:	47a8      	blx	r5
    a130:	2800      	cmp	r0, #0
    a132:	d100      	bne.n	a136 <sd_mmc_check+0x2de>
    a134:	e6b0      	b.n	9e98 <sd_mmc_check+0x40>
    a136:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    a138:	4e2e      	ldr	r6, [pc, #184]	; (a1f4 <sd_mmc_check+0x39c>)
    a13a:	a805      	add	r0, sp, #20
    a13c:	47b0      	blx	r6
    a13e:	2800      	cmp	r0, #0
    a140:	d100      	bne.n	a144 <sd_mmc_check+0x2ec>
    a142:	e6a9      	b.n	9e98 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    a144:	3501      	adds	r5, #1
    a146:	b2ad      	uxth	r5, r5
    a148:	2d32      	cmp	r5, #50	; 0x32
    a14a:	d1f6      	bne.n	a13a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    a14c:	4b12      	ldr	r3, [pc, #72]	; (a198 <sd_mmc_check+0x340>)
    a14e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a150:	7d8a      	ldrb	r2, [r1, #22]
    a152:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a154:	7d4b      	ldrb	r3, [r1, #21]
    a156:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a158:	7d09      	ldrb	r1, [r1, #20]
    a15a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a15c:	430b      	orrs	r3, r1
    a15e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    a160:	051b      	lsls	r3, r3, #20
    a162:	0d1b      	lsrs	r3, r3, #20
    a164:	4a21      	ldr	r2, [pc, #132]	; (a1ec <sd_mmc_check+0x394>)
    a166:	4293      	cmp	r3, r2
    a168:	d154      	bne.n	a214 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    a16a:	4e22      	ldr	r6, [pc, #136]	; (a1f4 <sd_mmc_check+0x39c>)
    a16c:	a806      	add	r0, sp, #24
    a16e:	47b0      	blx	r6
    a170:	2800      	cmp	r0, #0
    a172:	d100      	bne.n	a176 <sd_mmc_check+0x31e>
    a174:	e690      	b.n	9e98 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    a176:	3501      	adds	r5, #1
    a178:	b2ad      	uxth	r5, r5
    a17a:	2d35      	cmp	r5, #53	; 0x35
    a17c:	d9f6      	bls.n	a16c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    a17e:	4b06      	ldr	r3, [pc, #24]	; (a198 <sd_mmc_check+0x340>)
    a180:	681a      	ldr	r2, [r3, #0]
    a182:	9b06      	ldr	r3, [sp, #24]
    a184:	085b      	lsrs	r3, r3, #1
    a186:	6053      	str	r3, [r2, #4]
    a188:	e044      	b.n	a214 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    a18a:	2314      	movs	r3, #20
    a18c:	7313      	strb	r3, [r2, #12]
    a18e:	e797      	b.n	a0c0 <sd_mmc_check+0x268>
    a190:	00009d3d 	.word	0x00009d3d
    a194:	00009e1d 	.word	0x00009e1d
    a198:	20000368 	.word	0x20000368
    a19c:	0000aa35 	.word	0x0000aa35
    a1a0:	0000abfd 	.word	0x0000abfd
    a1a4:	00005508 	.word	0x00005508
    a1a8:	00001110 	.word	0x00001110
    a1ac:	00009d99 	.word	0x00009d99
    a1b0:	00009d15 	.word	0x00009d15
    a1b4:	0000ac15 	.word	0x0000ac15
    a1b8:	0000053a 	.word	0x0000053a
    a1bc:	00001bef 	.word	0x00001bef
    a1c0:	00001101 	.word	0x00001101
    a1c4:	0000113b 	.word	0x0000113b
    a1c8:	00009dd1 	.word	0x00009dd1
    a1cc:	00018df8 	.word	0x00018df8
    a1d0:	00018e14 	.word	0x00018e14
    a1d4:	00001137 	.word	0x00001137
    a1d8:	00081133 	.word	0x00081133
    a1dc:	0000aa6d 	.word	0x0000aa6d
    a1e0:	0000ac99 	.word	0x0000ac99
    a1e4:	0000ad25 	.word	0x0000ad25
    a1e8:	00018db8 	.word	0x00018db8
    a1ec:	00000fff 	.word	0x00000fff
    a1f0:	00081108 	.word	0x00081108
    a1f4:	0000ac21 	.word	0x0000ac21
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    a1f8:	2322      	movs	r3, #34	; 0x22
    a1fa:	7313      	strb	r3, [r2, #12]
    a1fc:	e760      	b.n	a0c0 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    a1fe:	2330      	movs	r3, #48	; 0x30
    a200:	7313      	strb	r3, [r2, #12]
    a202:	e75d      	b.n	a0c0 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    a204:	a806      	add	r0, sp, #24
    a206:	4b36      	ldr	r3, [pc, #216]	; (a2e0 <sd_mmc_check+0x488>)
    a208:	4798      	blx	r3
    a20a:	2800      	cmp	r0, #0
    a20c:	d100      	bne.n	a210 <sd_mmc_check+0x3b8>
    a20e:	e643      	b.n	9e98 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    a210:	3501      	adds	r5, #1
    a212:	b2ad      	uxth	r5, r5
    a214:	2d7f      	cmp	r5, #127	; 0x7f
    a216:	d9f5      	bls.n	a204 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    a218:	2180      	movs	r1, #128	; 0x80
    a21a:	0089      	lsls	r1, r1, #2
    a21c:	4831      	ldr	r0, [pc, #196]	; (a2e4 <sd_mmc_check+0x48c>)
    a21e:	4b32      	ldr	r3, [pc, #200]	; (a2e8 <sd_mmc_check+0x490>)
    a220:	4798      	blx	r3
    a222:	2800      	cmp	r0, #0
    a224:	d100      	bne.n	a228 <sd_mmc_check+0x3d0>
    a226:	e637      	b.n	9e98 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    a228:	4b30      	ldr	r3, [pc, #192]	; (a2ec <sd_mmc_check+0x494>)
    a22a:	4798      	blx	r3
    a22c:	2800      	cmp	r0, #0
    a22e:	d100      	bne.n	a232 <sd_mmc_check+0x3da>
    a230:	e632      	b.n	9e98 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    a232:	4b2f      	ldr	r3, [pc, #188]	; (a2f0 <sd_mmc_check+0x498>)
    a234:	4798      	blx	r3
    a236:	e65e      	b.n	9ef6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a238:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a23a:	7d93      	ldrb	r3, [r2, #22]
    a23c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a23e:	7d51      	ldrb	r1, [r2, #21]
    a240:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a242:	430b      	orrs	r3, r1
    a244:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    a246:	029b      	lsls	r3, r3, #10
				* 512;
    a248:	085b      	lsrs	r3, r3, #1
    a24a:	2180      	movs	r1, #128	; 0x80
    a24c:	0089      	lsls	r1, r1, #2
    a24e:	468c      	mov	ip, r1
    a250:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    a252:	6053      	str	r3, [r2, #4]
    a254:	e6cd      	b.n	9ff2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    a256:	4b27      	ldr	r3, [pc, #156]	; (a2f4 <sd_mmc_check+0x49c>)
    a258:	681b      	ldr	r3, [r3, #0]
    a25a:	2210      	movs	r2, #16
    a25c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a25e:	4b25      	ldr	r3, [pc, #148]	; (a2f4 <sd_mmc_check+0x49c>)
    a260:	681b      	ldr	r3, [r3, #0]
    a262:	7adb      	ldrb	r3, [r3, #11]
    a264:	2209      	movs	r2, #9
    a266:	4013      	ands	r3, r2
    a268:	2b01      	cmp	r3, #1
    a26a:	d000      	beq.n	a26e <sd_mmc_check+0x416>
    a26c:	e638      	b.n	9ee0 <sd_mmc_check+0x88>
    a26e:	e630      	b.n	9ed2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    a270:	4b20      	ldr	r3, [pc, #128]	; (a2f4 <sd_mmc_check+0x49c>)
    a272:	681b      	ldr	r3, [r3, #0]
    a274:	221a      	movs	r2, #26
    a276:	731a      	strb	r2, [r3, #12]
    a278:	e7f1      	b.n	a25e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a27a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    a27c:	789b      	ldrb	r3, [r3, #2]
    a27e:	09db      	lsrs	r3, r3, #7
    a280:	2b01      	cmp	r3, #1
    a282:	d104      	bne.n	a28e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    a284:	4b1b      	ldr	r3, [pc, #108]	; (a2f4 <sd_mmc_check+0x49c>)
    a286:	681b      	ldr	r3, [r3, #0]
    a288:	2230      	movs	r2, #48	; 0x30
    a28a:	731a      	strb	r2, [r3, #12]
    a28c:	e7e7      	b.n	a25e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    a28e:	4b19      	ldr	r3, [pc, #100]	; (a2f4 <sd_mmc_check+0x49c>)
    a290:	681b      	ldr	r3, [r3, #0]
    a292:	2220      	movs	r2, #32
    a294:	731a      	strb	r2, [r3, #12]
    a296:	e7e2      	b.n	a25e <sd_mmc_check+0x406>
	*v2 = 0;
    a298:	2600      	movs	r6, #0
    a29a:	e60d      	b.n	9eb8 <sd_mmc_check+0x60>
    a29c:	1e73      	subs	r3, r6, #1
    a29e:	419e      	sbcs	r6, r3
    a2a0:	07b3      	lsls	r3, r6, #30
    a2a2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a2a4:	4d14      	ldr	r5, [pc, #80]	; (a2f8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    a2a6:	4f10      	ldr	r7, [pc, #64]	; (a2e8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    a2a8:	46b8      	mov	r8, r7
		resp = driver_get_response();
    a2aa:	4e14      	ldr	r6, [pc, #80]	; (a2fc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    a2ac:	2100      	movs	r1, #0
    a2ae:	4814      	ldr	r0, [pc, #80]	; (a300 <sd_mmc_check+0x4a8>)
    a2b0:	47b8      	blx	r7
    a2b2:	2800      	cmp	r0, #0
    a2b4:	d100      	bne.n	a2b8 <sd_mmc_check+0x460>
    a2b6:	e638      	b.n	9f2a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    a2b8:	9903      	ldr	r1, [sp, #12]
    a2ba:	4812      	ldr	r0, [pc, #72]	; (a304 <sd_mmc_check+0x4ac>)
    a2bc:	47c0      	blx	r8
    a2be:	2800      	cmp	r0, #0
    a2c0:	d100      	bne.n	a2c4 <sd_mmc_check+0x46c>
    a2c2:	e632      	b.n	9f2a <sd_mmc_check+0xd2>
		resp = driver_get_response();
    a2c4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    a2c6:	07c3      	lsls	r3, r0, #31
    a2c8:	d400      	bmi.n	a2cc <sd_mmc_check+0x474>
    a2ca:	e628      	b.n	9f1e <sd_mmc_check+0xc6>
    a2cc:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    a2ce:	2d00      	cmp	r5, #0
    a2d0:	d1ec      	bne.n	a2ac <sd_mmc_check+0x454>
    a2d2:	e62a      	b.n	9f2a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a2d4:	2209      	movs	r2, #9
    a2d6:	4013      	ands	r3, r2
    a2d8:	2b01      	cmp	r3, #1
    a2da:	d000      	beq.n	a2de <sd_mmc_check+0x486>
    a2dc:	e609      	b.n	9ef2 <sd_mmc_check+0x9a>
    a2de:	e5f8      	b.n	9ed2 <sd_mmc_check+0x7a>
    a2e0:	0000ac21 	.word	0x0000ac21
    a2e4:	00001110 	.word	0x00001110
    a2e8:	0000abfd 	.word	0x0000abfd
    a2ec:	00009d99 	.word	0x00009d99
    a2f0:	00009d15 	.word	0x00009d15
    a2f4:	20000368 	.word	0x20000368
    a2f8:	00001bef 	.word	0x00001bef
    a2fc:	0000ac15 	.word	0x0000ac15
    a300:	00001137 	.word	0x00001137
    a304:	00001129 	.word	0x00001129

0000a308 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    a308:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a30a:	4b06      	ldr	r3, [pc, #24]	; (a324 <sd_mmc_get_type+0x1c>)
    a30c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    a30e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a310:	2800      	cmp	r0, #0
    a312:	d001      	beq.n	a318 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    a314:	0018      	movs	r0, r3
    a316:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    a318:	4b03      	ldr	r3, [pc, #12]	; (a328 <sd_mmc_get_type+0x20>)
    a31a:	4798      	blx	r3
	return sd_mmc_card->type;
    a31c:	4b03      	ldr	r3, [pc, #12]	; (a32c <sd_mmc_get_type+0x24>)
    a31e:	681b      	ldr	r3, [r3, #0]
    a320:	7adb      	ldrb	r3, [r3, #11]
    a322:	e7f7      	b.n	a314 <sd_mmc_get_type+0xc>
    a324:	00009d3d 	.word	0x00009d3d
    a328:	00009e1d 	.word	0x00009e1d
    a32c:	20000368 	.word	0x20000368

0000a330 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    a330:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a332:	4b06      	ldr	r3, [pc, #24]	; (a34c <sd_mmc_get_capacity+0x1c>)
    a334:	4798      	blx	r3
		return 0;
    a336:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a338:	2800      	cmp	r0, #0
    a33a:	d001      	beq.n	a340 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    a33c:	0018      	movs	r0, r3
    a33e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    a340:	4b03      	ldr	r3, [pc, #12]	; (a350 <sd_mmc_get_capacity+0x20>)
    a342:	4798      	blx	r3
	return sd_mmc_card->capacity;
    a344:	4b03      	ldr	r3, [pc, #12]	; (a354 <sd_mmc_get_capacity+0x24>)
    a346:	681b      	ldr	r3, [r3, #0]
    a348:	685b      	ldr	r3, [r3, #4]
    a34a:	e7f7      	b.n	a33c <sd_mmc_get_capacity+0xc>
    a34c:	00009d3d 	.word	0x00009d3d
    a350:	00009e1d 	.word	0x00009e1d
    a354:	20000368 	.word	0x20000368

0000a358 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    a358:	2000      	movs	r0, #0
    a35a:	4770      	bx	lr

0000a35c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    a35c:	b570      	push	{r4, r5, r6, lr}
    a35e:	b082      	sub	sp, #8
    a360:	000e      	movs	r6, r1
    a362:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    a364:	4b16      	ldr	r3, [pc, #88]	; (a3c0 <sd_mmc_init_read_blocks+0x64>)
    a366:	4798      	blx	r3
    a368:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    a36a:	d002      	beq.n	a372 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    a36c:	0020      	movs	r0, r4
    a36e:	b002      	add	sp, #8
    a370:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    a372:	4b14      	ldr	r3, [pc, #80]	; (a3c4 <sd_mmc_init_read_blocks+0x68>)
    a374:	4798      	blx	r3
    a376:	2800      	cmp	r0, #0
    a378:	d017      	beq.n	a3aa <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    a37a:	2d01      	cmp	r5, #1
    a37c:	d919      	bls.n	a3b2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    a37e:	4812      	ldr	r0, [pc, #72]	; (a3c8 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    a380:	4b12      	ldr	r3, [pc, #72]	; (a3cc <sd_mmc_init_read_blocks+0x70>)
    a382:	681b      	ldr	r3, [r3, #0]
    a384:	7adb      	ldrb	r3, [r3, #11]
    a386:	071b      	lsls	r3, r3, #28
    a388:	d400      	bmi.n	a38c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    a38a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    a38c:	2301      	movs	r3, #1
    a38e:	9300      	str	r3, [sp, #0]
    a390:	002b      	movs	r3, r5
    a392:	2280      	movs	r2, #128	; 0x80
    a394:	0092      	lsls	r2, r2, #2
    a396:	0031      	movs	r1, r6
    a398:	4e0d      	ldr	r6, [pc, #52]	; (a3d0 <sd_mmc_init_read_blocks+0x74>)
    a39a:	47b0      	blx	r6
    a39c:	2800      	cmp	r0, #0
    a39e:	d00a      	beq.n	a3b6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    a3a0:	4b0c      	ldr	r3, [pc, #48]	; (a3d4 <sd_mmc_init_read_blocks+0x78>)
    a3a2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    a3a4:	4b0c      	ldr	r3, [pc, #48]	; (a3d8 <sd_mmc_init_read_blocks+0x7c>)
    a3a6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    a3a8:	e7e0      	b.n	a36c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    a3aa:	4b0c      	ldr	r3, [pc, #48]	; (a3dc <sd_mmc_init_read_blocks+0x80>)
    a3ac:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a3ae:	3405      	adds	r4, #5
    a3b0:	e7dc      	b.n	a36c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    a3b2:	480b      	ldr	r0, [pc, #44]	; (a3e0 <sd_mmc_init_read_blocks+0x84>)
    a3b4:	e7e4      	b.n	a380 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    a3b6:	4b09      	ldr	r3, [pc, #36]	; (a3dc <sd_mmc_init_read_blocks+0x80>)
    a3b8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a3ba:	2405      	movs	r4, #5
    a3bc:	e7d6      	b.n	a36c <sd_mmc_init_read_blocks+0x10>
    a3be:	46c0      	nop			; (mov r8, r8)
    a3c0:	00009d3d 	.word	0x00009d3d
    a3c4:	00009d99 	.word	0x00009d99
    a3c8:	00101112 	.word	0x00101112
    a3cc:	20000368 	.word	0x20000368
    a3d0:	0000aa6d 	.word	0x0000aa6d
    a3d4:	2000038c 	.word	0x2000038c
    a3d8:	2000038e 	.word	0x2000038e
    a3dc:	00009e1d 	.word	0x00009e1d
    a3e0:	00081111 	.word	0x00081111

0000a3e4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    a3e4:	b510      	push	{r4, lr}
    a3e6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    a3e8:	4b07      	ldr	r3, [pc, #28]	; (a408 <sd_mmc_start_read_blocks+0x24>)
    a3ea:	4798      	blx	r3
    a3ec:	2800      	cmp	r0, #0
    a3ee:	d104      	bne.n	a3fa <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    a3f0:	2200      	movs	r2, #0
    a3f2:	4b06      	ldr	r3, [pc, #24]	; (a40c <sd_mmc_start_read_blocks+0x28>)
    a3f4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    a3f6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    a3f8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    a3fa:	4a04      	ldr	r2, [pc, #16]	; (a40c <sd_mmc_start_read_blocks+0x28>)
    a3fc:	8813      	ldrh	r3, [r2, #0]
    a3fe:	1b1c      	subs	r4, r3, r4
    a400:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    a402:	2000      	movs	r0, #0
    a404:	e7f8      	b.n	a3f8 <sd_mmc_start_read_blocks+0x14>
    a406:	46c0      	nop			; (mov r8, r8)
    a408:	0000ac99 	.word	0x0000ac99
    a40c:	2000038c 	.word	0x2000038c

0000a410 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    a410:	b510      	push	{r4, lr}
    a412:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    a414:	4b14      	ldr	r3, [pc, #80]	; (a468 <sd_mmc_wait_end_of_read_blocks+0x58>)
    a416:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a418:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    a41a:	2800      	cmp	r0, #0
    a41c:	d101      	bne.n	a422 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    a41e:	0018      	movs	r0, r3
    a420:	bd10      	pop	{r4, pc}
	if (abort) {
    a422:	2c00      	cmp	r4, #0
    a424:	d010      	beq.n	a448 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    a426:	2200      	movs	r2, #0
    a428:	4b10      	ldr	r3, [pc, #64]	; (a46c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    a42a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    a42c:	4b10      	ldr	r3, [pc, #64]	; (a470 <sd_mmc_wait_end_of_read_blocks+0x60>)
    a42e:	881b      	ldrh	r3, [r3, #0]
    a430:	2b01      	cmp	r3, #1
    a432:	d00f      	beq.n	a454 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    a434:	2100      	movs	r1, #0
    a436:	480f      	ldr	r0, [pc, #60]	; (a474 <sd_mmc_wait_end_of_read_blocks+0x64>)
    a438:	4b0f      	ldr	r3, [pc, #60]	; (a478 <sd_mmc_wait_end_of_read_blocks+0x68>)
    a43a:	4798      	blx	r3
    a43c:	2800      	cmp	r0, #0
    a43e:	d00d      	beq.n	a45c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    a440:	4b0e      	ldr	r3, [pc, #56]	; (a47c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    a442:	4798      	blx	r3
	return SD_MMC_OK;
    a444:	2300      	movs	r3, #0
    a446:	e7ea      	b.n	a41e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    a448:	4b08      	ldr	r3, [pc, #32]	; (a46c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    a44a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    a44c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    a44e:	2a00      	cmp	r2, #0
    a450:	d0ec      	beq.n	a42c <sd_mmc_wait_end_of_read_blocks+0x1c>
    a452:	e7e4      	b.n	a41e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    a454:	4b09      	ldr	r3, [pc, #36]	; (a47c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    a456:	4798      	blx	r3
		return SD_MMC_OK;
    a458:	2300      	movs	r3, #0
    a45a:	e7e0      	b.n	a41e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    a45c:	2100      	movs	r1, #0
    a45e:	4805      	ldr	r0, [pc, #20]	; (a474 <sd_mmc_wait_end_of_read_blocks+0x64>)
    a460:	4b05      	ldr	r3, [pc, #20]	; (a478 <sd_mmc_wait_end_of_read_blocks+0x68>)
    a462:	4798      	blx	r3
    a464:	e7ec      	b.n	a440 <sd_mmc_wait_end_of_read_blocks+0x30>
    a466:	46c0      	nop			; (mov r8, r8)
    a468:	0000ad25 	.word	0x0000ad25
    a46c:	2000038c 	.word	0x2000038c
    a470:	2000038e 	.word	0x2000038e
    a474:	0000310c 	.word	0x0000310c
    a478:	0000abfd 	.word	0x0000abfd
    a47c:	00009e1d 	.word	0x00009e1d

0000a480 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    a480:	b570      	push	{r4, r5, r6, lr}
    a482:	b082      	sub	sp, #8
    a484:	000e      	movs	r6, r1
    a486:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    a488:	4b11      	ldr	r3, [pc, #68]	; (a4d0 <sd_mmc_init_write_blocks+0x50>)
    a48a:	4798      	blx	r3
    a48c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    a48e:	d116      	bne.n	a4be <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    a490:	2d01      	cmp	r5, #1
    a492:	d917      	bls.n	a4c4 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    a494:	480f      	ldr	r0, [pc, #60]	; (a4d4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    a496:	4b10      	ldr	r3, [pc, #64]	; (a4d8 <sd_mmc_init_write_blocks+0x58>)
    a498:	681b      	ldr	r3, [r3, #0]
    a49a:	7adb      	ldrb	r3, [r3, #11]
    a49c:	071b      	lsls	r3, r3, #28
    a49e:	d400      	bmi.n	a4a2 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    a4a0:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    a4a2:	2301      	movs	r3, #1
    a4a4:	9300      	str	r3, [sp, #0]
    a4a6:	002b      	movs	r3, r5
    a4a8:	2280      	movs	r2, #128	; 0x80
    a4aa:	0092      	lsls	r2, r2, #2
    a4ac:	0031      	movs	r1, r6
    a4ae:	4e0b      	ldr	r6, [pc, #44]	; (a4dc <sd_mmc_init_write_blocks+0x5c>)
    a4b0:	47b0      	blx	r6
    a4b2:	2800      	cmp	r0, #0
    a4b4:	d008      	beq.n	a4c8 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    a4b6:	4b0a      	ldr	r3, [pc, #40]	; (a4e0 <sd_mmc_init_write_blocks+0x60>)
    a4b8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    a4ba:	4b0a      	ldr	r3, [pc, #40]	; (a4e4 <sd_mmc_init_write_blocks+0x64>)
    a4bc:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    a4be:	0020      	movs	r0, r4
    a4c0:	b002      	add	sp, #8
    a4c2:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    a4c4:	4808      	ldr	r0, [pc, #32]	; (a4e8 <sd_mmc_init_write_blocks+0x68>)
    a4c6:	e7e6      	b.n	a496 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    a4c8:	4b08      	ldr	r3, [pc, #32]	; (a4ec <sd_mmc_init_write_blocks+0x6c>)
    a4ca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a4cc:	2405      	movs	r4, #5
    a4ce:	e7f6      	b.n	a4be <sd_mmc_init_write_blocks+0x3e>
    a4d0:	00009d3d 	.word	0x00009d3d
    a4d4:	00109119 	.word	0x00109119
    a4d8:	20000368 	.word	0x20000368
    a4dc:	0000aa6d 	.word	0x0000aa6d
    a4e0:	2000038c 	.word	0x2000038c
    a4e4:	2000038e 	.word	0x2000038e
    a4e8:	00089118 	.word	0x00089118
    a4ec:	00009e1d 	.word	0x00009e1d

0000a4f0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    a4f0:	b510      	push	{r4, lr}
    a4f2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    a4f4:	4b07      	ldr	r3, [pc, #28]	; (a514 <sd_mmc_start_write_blocks+0x24>)
    a4f6:	4798      	blx	r3
    a4f8:	2800      	cmp	r0, #0
    a4fa:	d104      	bne.n	a506 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    a4fc:	2200      	movs	r2, #0
    a4fe:	4b06      	ldr	r3, [pc, #24]	; (a518 <sd_mmc_start_write_blocks+0x28>)
    a500:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    a502:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    a504:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    a506:	4a04      	ldr	r2, [pc, #16]	; (a518 <sd_mmc_start_write_blocks+0x28>)
    a508:	8813      	ldrh	r3, [r2, #0]
    a50a:	1b1c      	subs	r4, r3, r4
    a50c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    a50e:	2000      	movs	r0, #0
    a510:	e7f8      	b.n	a504 <sd_mmc_start_write_blocks+0x14>
    a512:	46c0      	nop			; (mov r8, r8)
    a514:	0000ad29 	.word	0x0000ad29
    a518:	2000038c 	.word	0x2000038c

0000a51c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    a51c:	b510      	push	{r4, lr}
    a51e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    a520:	4b0e      	ldr	r3, [pc, #56]	; (a55c <sd_mmc_wait_end_of_write_blocks+0x40>)
    a522:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a524:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    a526:	2800      	cmp	r0, #0
    a528:	d101      	bne.n	a52e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    a52a:	0018      	movs	r0, r3
    a52c:	bd10      	pop	{r4, pc}
	if (abort) {
    a52e:	2c00      	cmp	r4, #0
    a530:	d00a      	beq.n	a548 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    a532:	2200      	movs	r2, #0
    a534:	4b0a      	ldr	r3, [pc, #40]	; (a560 <sd_mmc_wait_end_of_write_blocks+0x44>)
    a536:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    a538:	4b0a      	ldr	r3, [pc, #40]	; (a564 <sd_mmc_wait_end_of_write_blocks+0x48>)
    a53a:	881b      	ldrh	r3, [r3, #0]
    a53c:	2b01      	cmp	r3, #1
    a53e:	d009      	beq.n	a554 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    a540:	4b09      	ldr	r3, [pc, #36]	; (a568 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    a542:	4798      	blx	r3
	return SD_MMC_OK;
    a544:	2300      	movs	r3, #0
    a546:	e7f0      	b.n	a52a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    a548:	4b05      	ldr	r3, [pc, #20]	; (a560 <sd_mmc_wait_end_of_write_blocks+0x44>)
    a54a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    a54c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    a54e:	2a00      	cmp	r2, #0
    a550:	d0f2      	beq.n	a538 <sd_mmc_wait_end_of_write_blocks+0x1c>
    a552:	e7ea      	b.n	a52a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    a554:	4b04      	ldr	r3, [pc, #16]	; (a568 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    a556:	4798      	blx	r3
		return SD_MMC_OK;
    a558:	2300      	movs	r3, #0
    a55a:	e7e6      	b.n	a52a <sd_mmc_wait_end_of_write_blocks+0xe>
    a55c:	0000ada9 	.word	0x0000ada9
    a560:	2000038c 	.word	0x2000038c
    a564:	2000038e 	.word	0x2000038e
    a568:	00009e1d 	.word	0x00009e1d

0000a56c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    a56c:	b510      	push	{r4, lr}
    a56e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    a570:	4b0f      	ldr	r3, [pc, #60]	; (a5b0 <sd_mmc_test_unit_ready+0x44>)
    a572:	4798      	blx	r3
    a574:	2801      	cmp	r0, #1
    a576:	d019      	beq.n	a5ac <sd_mmc_test_unit_ready+0x40>
    a578:	2800      	cmp	r0, #0
    a57a:	d003      	beq.n	a584 <sd_mmc_test_unit_ready+0x18>
    a57c:	2802      	cmp	r0, #2
    a57e:	d010      	beq.n	a5a2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    a580:	2001      	movs	r0, #1
	}
}
    a582:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    a584:	4b0b      	ldr	r3, [pc, #44]	; (a5b4 <sd_mmc_test_unit_ready+0x48>)
    a586:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    a588:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    a58a:	2b00      	cmp	r3, #0
    a58c:	d1f9      	bne.n	a582 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    a58e:	0020      	movs	r0, r4
    a590:	4b09      	ldr	r3, [pc, #36]	; (a5b8 <sd_mmc_test_unit_ready+0x4c>)
    a592:	4798      	blx	r3
    a594:	0003      	movs	r3, r0
    a596:	2003      	movs	r0, #3
    a598:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    a59a:	4243      	negs	r3, r0
    a59c:	4158      	adcs	r0, r3
    a59e:	0040      	lsls	r0, r0, #1
    a5a0:	e7ef      	b.n	a582 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    a5a2:	2200      	movs	r2, #0
    a5a4:	4b03      	ldr	r3, [pc, #12]	; (a5b4 <sd_mmc_test_unit_ready+0x48>)
    a5a6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    a5a8:	2002      	movs	r0, #2
    a5aa:	e7ea      	b.n	a582 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    a5ac:	2003      	movs	r0, #3
    a5ae:	e7e8      	b.n	a582 <sd_mmc_test_unit_ready+0x16>
    a5b0:	00009e59 	.word	0x00009e59
    a5b4:	20000394 	.word	0x20000394
    a5b8:	0000a309 	.word	0x0000a309

0000a5bc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    a5bc:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    a5be:	2000      	movs	r0, #0
    a5c0:	4b01      	ldr	r3, [pc, #4]	; (a5c8 <sd_mmc_test_unit_ready_0+0xc>)
    a5c2:	4798      	blx	r3
}
    a5c4:	bd10      	pop	{r4, pc}
    a5c6:	46c0      	nop			; (mov r8, r8)
    a5c8:	0000a56d 	.word	0x0000a56d

0000a5cc <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    a5cc:	b570      	push	{r4, r5, r6, lr}
    a5ce:	0004      	movs	r4, r0
    a5d0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    a5d2:	4b04      	ldr	r3, [pc, #16]	; (a5e4 <sd_mmc_read_capacity+0x18>)
    a5d4:	4798      	blx	r3
    a5d6:	0040      	lsls	r0, r0, #1
    a5d8:	3801      	subs	r0, #1
    a5da:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    a5dc:	0020      	movs	r0, r4
    a5de:	4b02      	ldr	r3, [pc, #8]	; (a5e8 <sd_mmc_read_capacity+0x1c>)
    a5e0:	4798      	blx	r3
}
    a5e2:	bd70      	pop	{r4, r5, r6, pc}
    a5e4:	0000a331 	.word	0x0000a331
    a5e8:	0000a56d 	.word	0x0000a56d

0000a5ec <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    a5ec:	b510      	push	{r4, lr}
    a5ee:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    a5f0:	2000      	movs	r0, #0
    a5f2:	4b01      	ldr	r3, [pc, #4]	; (a5f8 <sd_mmc_read_capacity_0+0xc>)
    a5f4:	4798      	blx	r3
}
    a5f6:	bd10      	pop	{r4, pc}
    a5f8:	0000a5cd 	.word	0x0000a5cd

0000a5fc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    a5fc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    a5fe:	2000      	movs	r0, #0
    a600:	4b01      	ldr	r3, [pc, #4]	; (a608 <sd_mmc_wr_protect_0+0xc>)
    a602:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    a604:	bd10      	pop	{r4, pc}
    a606:	46c0      	nop			; (mov r8, r8)
    a608:	0000a359 	.word	0x0000a359

0000a60c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    a60c:	b510      	push	{r4, lr}
    a60e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    a610:	2201      	movs	r2, #1
    a612:	4b0c      	ldr	r3, [pc, #48]	; (a644 <sd_mmc_mem_2_ram+0x38>)
    a614:	4798      	blx	r3
    a616:	2800      	cmp	r0, #0
    a618:	d004      	beq.n	a624 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    a61a:	3802      	subs	r0, #2
    a61c:	4243      	negs	r3, r0
    a61e:	4158      	adcs	r0, r3
    a620:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    a622:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    a624:	2101      	movs	r1, #1
    a626:	0020      	movs	r0, r4
    a628:	4b07      	ldr	r3, [pc, #28]	; (a648 <sd_mmc_mem_2_ram+0x3c>)
    a62a:	4798      	blx	r3
    a62c:	0003      	movs	r3, r0
		return CTRL_FAIL;
    a62e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    a630:	2b00      	cmp	r3, #0
    a632:	d1f6      	bne.n	a622 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    a634:	2000      	movs	r0, #0
    a636:	4b05      	ldr	r3, [pc, #20]	; (a64c <sd_mmc_mem_2_ram+0x40>)
    a638:	4798      	blx	r3
    a63a:	1e43      	subs	r3, r0, #1
    a63c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    a63e:	b2c0      	uxtb	r0, r0
    a640:	e7ef      	b.n	a622 <sd_mmc_mem_2_ram+0x16>
    a642:	46c0      	nop			; (mov r8, r8)
    a644:	0000a35d 	.word	0x0000a35d
    a648:	0000a3e5 	.word	0x0000a3e5
    a64c:	0000a411 	.word	0x0000a411

0000a650 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    a650:	b510      	push	{r4, lr}
    a652:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    a654:	0001      	movs	r1, r0
    a656:	2000      	movs	r0, #0
    a658:	4b01      	ldr	r3, [pc, #4]	; (a660 <sd_mmc_mem_2_ram_0+0x10>)
    a65a:	4798      	blx	r3
}
    a65c:	bd10      	pop	{r4, pc}
    a65e:	46c0      	nop			; (mov r8, r8)
    a660:	0000a60d 	.word	0x0000a60d

0000a664 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    a664:	b510      	push	{r4, lr}
    a666:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    a668:	2201      	movs	r2, #1
    a66a:	4b0c      	ldr	r3, [pc, #48]	; (a69c <sd_mmc_ram_2_mem+0x38>)
    a66c:	4798      	blx	r3
    a66e:	2800      	cmp	r0, #0
    a670:	d004      	beq.n	a67c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    a672:	3802      	subs	r0, #2
    a674:	4243      	negs	r3, r0
    a676:	4158      	adcs	r0, r3
    a678:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    a67a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    a67c:	2101      	movs	r1, #1
    a67e:	0020      	movs	r0, r4
    a680:	4b07      	ldr	r3, [pc, #28]	; (a6a0 <sd_mmc_ram_2_mem+0x3c>)
    a682:	4798      	blx	r3
    a684:	0003      	movs	r3, r0
		return CTRL_FAIL;
    a686:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    a688:	2b00      	cmp	r3, #0
    a68a:	d1f6      	bne.n	a67a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    a68c:	2000      	movs	r0, #0
    a68e:	4b05      	ldr	r3, [pc, #20]	; (a6a4 <sd_mmc_ram_2_mem+0x40>)
    a690:	4798      	blx	r3
    a692:	1e43      	subs	r3, r0, #1
    a694:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    a696:	b2c0      	uxtb	r0, r0
    a698:	e7ef      	b.n	a67a <sd_mmc_ram_2_mem+0x16>
    a69a:	46c0      	nop			; (mov r8, r8)
    a69c:	0000a481 	.word	0x0000a481
    a6a0:	0000a4f1 	.word	0x0000a4f1
    a6a4:	0000a51d 	.word	0x0000a51d

0000a6a8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    a6a8:	b510      	push	{r4, lr}
    a6aa:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    a6ac:	0001      	movs	r1, r0
    a6ae:	2000      	movs	r0, #0
    a6b0:	4b01      	ldr	r3, [pc, #4]	; (a6b8 <sd_mmc_ram_2_mem_0+0x10>)
    a6b2:	4798      	blx	r3
}
    a6b4:	bd10      	pop	{r4, pc}
    a6b6:	46c0      	nop			; (mov r8, r8)
    a6b8:	0000a665 	.word	0x0000a665

0000a6bc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    a6bc:	b500      	push	{lr}
    a6be:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    a6c0:	466b      	mov	r3, sp
    a6c2:	1dd9      	adds	r1, r3, #7
    a6c4:	23ff      	movs	r3, #255	; 0xff
    a6c6:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    a6c8:	2201      	movs	r2, #1
    a6ca:	480b      	ldr	r0, [pc, #44]	; (a6f8 <sd_mmc_spi_start_write_block+0x3c>)
    a6cc:	4b0b      	ldr	r3, [pc, #44]	; (a6fc <sd_mmc_spi_start_write_block+0x40>)
    a6ce:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    a6d0:	4b0b      	ldr	r3, [pc, #44]	; (a700 <sd_mmc_spi_start_write_block+0x44>)
    a6d2:	881b      	ldrh	r3, [r3, #0]
    a6d4:	2b01      	cmp	r3, #1
    a6d6:	d00a      	beq.n	a6ee <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    a6d8:	22fc      	movs	r2, #252	; 0xfc
    a6da:	466b      	mov	r3, sp
    a6dc:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    a6de:	2201      	movs	r2, #1
    a6e0:	466b      	mov	r3, sp
    a6e2:	1d99      	adds	r1, r3, #6
    a6e4:	4804      	ldr	r0, [pc, #16]	; (a6f8 <sd_mmc_spi_start_write_block+0x3c>)
    a6e6:	4b05      	ldr	r3, [pc, #20]	; (a6fc <sd_mmc_spi_start_write_block+0x40>)
    a6e8:	4798      	blx	r3
}
    a6ea:	b003      	add	sp, #12
    a6ec:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    a6ee:	22fe      	movs	r2, #254	; 0xfe
    a6f0:	466b      	mov	r3, sp
    a6f2:	719a      	strb	r2, [r3, #6]
    a6f4:	e7f3      	b.n	a6de <sd_mmc_spi_start_write_block+0x22>
    a6f6:	46c0      	nop			; (mov r8, r8)
    a6f8:	20000398 	.word	0x20000398
    a6fc:	0000f1e9 	.word	0x0000f1e9
    a700:	200003dc 	.word	0x200003dc

0000a704 <sd_mmc_spi_wait_busy>:
{
    a704:	b5f0      	push	{r4, r5, r6, r7, lr}
    a706:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    a708:	466b      	mov	r3, sp
    a70a:	1ddc      	adds	r4, r3, #7
    a70c:	23ff      	movs	r3, #255	; 0xff
    a70e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a710:	4e12      	ldr	r6, [pc, #72]	; (a75c <sd_mmc_spi_wait_busy+0x58>)
    a712:	2201      	movs	r2, #1
    a714:	0021      	movs	r1, r4
    a716:	0030      	movs	r0, r6
    a718:	4d11      	ldr	r5, [pc, #68]	; (a760 <sd_mmc_spi_wait_busy+0x5c>)
    a71a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a71c:	23ff      	movs	r3, #255	; 0xff
    a71e:	2201      	movs	r2, #1
    a720:	0021      	movs	r1, r4
    a722:	0030      	movs	r0, r6
    a724:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a726:	23ff      	movs	r3, #255	; 0xff
    a728:	2201      	movs	r2, #1
    a72a:	0021      	movs	r1, r4
    a72c:	0030      	movs	r0, r6
    a72e:	47a8      	blx	r5
    a730:	4c0c      	ldr	r4, [pc, #48]	; (a764 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    a732:	466b      	mov	r3, sp
    a734:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a736:	4e09      	ldr	r6, [pc, #36]	; (a75c <sd_mmc_spi_wait_busy+0x58>)
    a738:	4f09      	ldr	r7, [pc, #36]	; (a760 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    a73a:	782b      	ldrb	r3, [r5, #0]
    a73c:	2bff      	cmp	r3, #255	; 0xff
    a73e:	d009      	beq.n	a754 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a740:	23ff      	movs	r3, #255	; 0xff
    a742:	2201      	movs	r2, #1
    a744:	0029      	movs	r1, r5
    a746:	0030      	movs	r0, r6
    a748:	47b8      	blx	r7
    a74a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    a74c:	2c00      	cmp	r4, #0
    a74e:	d1f4      	bne.n	a73a <sd_mmc_spi_wait_busy+0x36>
			return false;
    a750:	2000      	movs	r0, #0
    a752:	e000      	b.n	a756 <sd_mmc_spi_wait_busy+0x52>
	return true;
    a754:	2001      	movs	r0, #1
}
    a756:	b003      	add	sp, #12
    a758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a75a:	46c0      	nop			; (mov r8, r8)
    a75c:	20000398 	.word	0x20000398
    a760:	0000f021 	.word	0x0000f021
    a764:	00030d40 	.word	0x00030d40

0000a768 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    a768:	b570      	push	{r4, r5, r6, lr}
    a76a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    a76c:	4b14      	ldr	r3, [pc, #80]	; (a7c0 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    a76e:	881c      	ldrh	r4, [r3, #0]
    a770:	2c01      	cmp	r4, #1
    a772:	d023      	beq.n	a7bc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    a774:	4b13      	ldr	r3, [pc, #76]	; (a7c4 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    a776:	8819      	ldrh	r1, [r3, #0]
    a778:	4b13      	ldr	r3, [pc, #76]	; (a7c8 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    a77a:	6818      	ldr	r0, [r3, #0]
    a77c:	4b13      	ldr	r3, [pc, #76]	; (a7cc <sd_mmc_spi_stop_multiwrite_block+0x64>)
    a77e:	4798      	blx	r3
		return true; // It is not the End of multi write
    a780:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    a782:	4284      	cmp	r4, r0
    a784:	d902      	bls.n	a78c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    a786:	0018      	movs	r0, r3
    a788:	b002      	add	sp, #8
    a78a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    a78c:	466b      	mov	r3, sp
    a78e:	1ddc      	adds	r4, r3, #7
    a790:	23ff      	movs	r3, #255	; 0xff
    a792:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    a794:	4e0e      	ldr	r6, [pc, #56]	; (a7d0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    a796:	2201      	movs	r2, #1
    a798:	0021      	movs	r1, r4
    a79a:	0030      	movs	r0, r6
    a79c:	4d0d      	ldr	r5, [pc, #52]	; (a7d4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    a79e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    a7a0:	23fd      	movs	r3, #253	; 0xfd
    a7a2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    a7a4:	2201      	movs	r2, #1
    a7a6:	0021      	movs	r1, r4
    a7a8:	0030      	movs	r0, r6
    a7aa:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    a7ac:	4b0a      	ldr	r3, [pc, #40]	; (a7d8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    a7ae:	4798      	blx	r3
    a7b0:	1e03      	subs	r3, r0, #0
    a7b2:	d1e8      	bne.n	a786 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    a7b4:	2105      	movs	r1, #5
    a7b6:	4a09      	ldr	r2, [pc, #36]	; (a7dc <sd_mmc_spi_stop_multiwrite_block+0x74>)
    a7b8:	7011      	strb	r1, [r2, #0]
		return false;
    a7ba:	e7e4      	b.n	a786 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    a7bc:	2301      	movs	r3, #1
    a7be:	e7e2      	b.n	a786 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    a7c0:	200003dc 	.word	0x200003dc
    a7c4:	200003d4 	.word	0x200003d4
    a7c8:	200003e4 	.word	0x200003e4
    a7cc:	00016691 	.word	0x00016691
    a7d0:	20000398 	.word	0x20000398
    a7d4:	0000f1e9 	.word	0x0000f1e9
    a7d8:	0000a705 	.word	0x0000a705
    a7dc:	200003db 	.word	0x200003db

0000a7e0 <sd_mmc_spi_start_read_block>:
{
    a7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7e2:	b083      	sub	sp, #12
	token = 0;
    a7e4:	2200      	movs	r2, #0
    a7e6:	466b      	mov	r3, sp
    a7e8:	71da      	strb	r2, [r3, #7]
    a7ea:	4c14      	ldr	r4, [pc, #80]	; (a83c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    a7ec:	466b      	mov	r3, sp
    a7ee:	1ddd      	adds	r5, r3, #7
    a7f0:	4e13      	ldr	r6, [pc, #76]	; (a840 <sd_mmc_spi_start_read_block+0x60>)
    a7f2:	4f14      	ldr	r7, [pc, #80]	; (a844 <sd_mmc_spi_start_read_block+0x64>)
    a7f4:	23ff      	movs	r3, #255	; 0xff
    a7f6:	2201      	movs	r2, #1
    a7f8:	0029      	movs	r1, r5
    a7fa:	0030      	movs	r0, r6
    a7fc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    a7fe:	782b      	ldrb	r3, [r5, #0]
    a800:	220f      	movs	r2, #15
    a802:	0019      	movs	r1, r3
    a804:	4391      	bics	r1, r2
    a806:	1e0a      	subs	r2, r1, #0
    a808:	d009      	beq.n	a81e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    a80a:	2bfe      	cmp	r3, #254	; 0xfe
    a80c:	d013      	beq.n	a836 <sd_mmc_spi_start_read_block+0x56>
    a80e:	3c01      	subs	r4, #1
		if (i-- == 0) {
    a810:	2c00      	cmp	r4, #0
    a812:	d1ef      	bne.n	a7f4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    a814:	2204      	movs	r2, #4
    a816:	4b0c      	ldr	r3, [pc, #48]	; (a848 <sd_mmc_spi_start_read_block+0x68>)
    a818:	701a      	strb	r2, [r3, #0]
			return false;
    a81a:	2000      	movs	r0, #0
    a81c:	e00c      	b.n	a838 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    a81e:	075b      	lsls	r3, r3, #29
    a820:	d004      	beq.n	a82c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    a822:	3207      	adds	r2, #7
    a824:	4b08      	ldr	r3, [pc, #32]	; (a848 <sd_mmc_spi_start_read_block+0x68>)
    a826:	701a      	strb	r2, [r3, #0]
			return false;
    a828:	2000      	movs	r0, #0
    a82a:	e005      	b.n	a838 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    a82c:	220b      	movs	r2, #11
    a82e:	4b06      	ldr	r3, [pc, #24]	; (a848 <sd_mmc_spi_start_read_block+0x68>)
    a830:	701a      	strb	r2, [r3, #0]
			return false;
    a832:	2000      	movs	r0, #0
    a834:	e000      	b.n	a838 <sd_mmc_spi_start_read_block+0x58>
	return true;
    a836:	2001      	movs	r0, #1
}
    a838:	b003      	add	sp, #12
    a83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a83c:	0007a120 	.word	0x0007a120
    a840:	20000398 	.word	0x20000398
    a844:	0000f021 	.word	0x0000f021
    a848:	200003db 	.word	0x200003db

0000a84c <sd_mmc_spi_stop_write_block>:
{
    a84c:	b530      	push	{r4, r5, lr}
    a84e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    a850:	a901      	add	r1, sp, #4
    a852:	2301      	movs	r3, #1
    a854:	425b      	negs	r3, r3
    a856:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    a858:	4d14      	ldr	r5, [pc, #80]	; (a8ac <sd_mmc_spi_stop_write_block+0x60>)
    a85a:	2202      	movs	r2, #2
    a85c:	0028      	movs	r0, r5
    a85e:	4b14      	ldr	r3, [pc, #80]	; (a8b0 <sd_mmc_spi_stop_write_block+0x64>)
    a860:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    a862:	466b      	mov	r3, sp
    a864:	1ddc      	adds	r4, r3, #7
    a866:	23ff      	movs	r3, #255	; 0xff
    a868:	2201      	movs	r2, #1
    a86a:	0021      	movs	r1, r4
    a86c:	0028      	movs	r0, r5
    a86e:	4d11      	ldr	r5, [pc, #68]	; (a8b4 <sd_mmc_spi_stop_write_block+0x68>)
    a870:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    a872:	7822      	ldrb	r2, [r4, #0]
    a874:	2311      	movs	r3, #17
    a876:	4013      	ands	r3, r2
    a878:	2b01      	cmp	r3, #1
    a87a:	d005      	beq.n	a888 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    a87c:	2201      	movs	r2, #1
    a87e:	4b0e      	ldr	r3, [pc, #56]	; (a8b8 <sd_mmc_spi_stop_write_block+0x6c>)
    a880:	701a      	strb	r2, [r3, #0]
		return false;
    a882:	2000      	movs	r0, #0
}
    a884:	b003      	add	sp, #12
    a886:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    a888:	231e      	movs	r3, #30
    a88a:	401a      	ands	r2, r3
    a88c:	2a04      	cmp	r2, #4
    a88e:	d00b      	beq.n	a8a8 <sd_mmc_spi_stop_write_block+0x5c>
    a890:	2a0a      	cmp	r2, #10
    a892:	d104      	bne.n	a89e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    a894:	3a02      	subs	r2, #2
    a896:	4b08      	ldr	r3, [pc, #32]	; (a8b8 <sd_mmc_spi_stop_write_block+0x6c>)
    a898:	701a      	strb	r2, [r3, #0]
		return false;
    a89a:	2000      	movs	r0, #0
    a89c:	e7f2      	b.n	a884 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    a89e:	220a      	movs	r2, #10
    a8a0:	4b05      	ldr	r3, [pc, #20]	; (a8b8 <sd_mmc_spi_stop_write_block+0x6c>)
    a8a2:	701a      	strb	r2, [r3, #0]
		return false;
    a8a4:	2000      	movs	r0, #0
    a8a6:	e7ed      	b.n	a884 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    a8a8:	2001      	movs	r0, #1
    a8aa:	e7eb      	b.n	a884 <sd_mmc_spi_stop_write_block+0x38>
    a8ac:	20000398 	.word	0x20000398
    a8b0:	0000f1e9 	.word	0x0000f1e9
    a8b4:	0000f021 	.word	0x0000f021
    a8b8:	200003db 	.word	0x200003db

0000a8bc <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    a8bc:	b570      	push	{r4, r5, r6, lr}
    a8be:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a8c0:	2300      	movs	r3, #0
    a8c2:	4a2d      	ldr	r2, [pc, #180]	; (a978 <sd_mmc_spi_init+0xbc>)
    a8c4:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    a8c6:	ac02      	add	r4, sp, #8
    a8c8:	2501      	movs	r5, #1
    a8ca:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    a8cc:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    a8ce:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    a8d0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    a8d2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    a8d4:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    a8d6:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    a8d8:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    a8da:	2224      	movs	r2, #36	; 0x24
    a8dc:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    a8de:	3a18      	subs	r2, #24
    a8e0:	2100      	movs	r1, #0
    a8e2:	a808      	add	r0, sp, #32
    a8e4:	4b25      	ldr	r3, [pc, #148]	; (a97c <sd_mmc_spi_init+0xc0>)
    a8e6:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    a8e8:	2380      	movs	r3, #128	; 0x80
    a8ea:	025b      	lsls	r3, r3, #9
    a8ec:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    a8ee:	4b24      	ldr	r3, [pc, #144]	; (a980 <sd_mmc_spi_init+0xc4>)
    a8f0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    a8f2:	2301      	movs	r3, #1
    a8f4:	425b      	negs	r3, r3
    a8f6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    a8f8:	4b22      	ldr	r3, [pc, #136]	; (a984 <sd_mmc_spi_init+0xc8>)
    a8fa:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    a8fc:	4b22      	ldr	r3, [pc, #136]	; (a988 <sd_mmc_spi_init+0xcc>)
    a8fe:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    a900:	4b22      	ldr	r3, [pc, #136]	; (a98c <sd_mmc_spi_init+0xd0>)
    a902:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    a904:	4e22      	ldr	r6, [pc, #136]	; (a990 <sd_mmc_spi_init+0xd4>)
    a906:	0022      	movs	r2, r4
    a908:	4922      	ldr	r1, [pc, #136]	; (a994 <sd_mmc_spi_init+0xd8>)
    a90a:	0030      	movs	r0, r6
    a90c:	4b22      	ldr	r3, [pc, #136]	; (a998 <sd_mmc_spi_init+0xdc>)
    a90e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a910:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a912:	0020      	movs	r0, r4
    a914:	4b21      	ldr	r3, [pc, #132]	; (a99c <sd_mmc_spi_init+0xe0>)
    a916:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a918:	231f      	movs	r3, #31
    a91a:	4018      	ands	r0, r3
    a91c:	4085      	lsls	r5, r0
    a91e:	4b20      	ldr	r3, [pc, #128]	; (a9a0 <sd_mmc_spi_init+0xe4>)
    a920:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a922:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    a924:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    a926:	2b00      	cmp	r3, #0
    a928:	d1fc      	bne.n	a924 <sd_mmc_spi_init+0x68>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    a92a:	6823      	ldr	r3, [r4, #0]
    a92c:	2202      	movs	r2, #2
    a92e:	4313      	orrs	r3, r2
    a930:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    a932:	4a1c      	ldr	r2, [pc, #112]	; (a9a4 <sd_mmc_spi_init+0xe8>)
    a934:	2300      	movs	r3, #0
    a936:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    a938:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    a93a:	491b      	ldr	r1, [pc, #108]	; (a9a8 <sd_mmc_spi_init+0xec>)
    a93c:	7808      	ldrb	r0, [r1, #0]
    a93e:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    a940:	4c1a      	ldr	r4, [pc, #104]	; (a9ac <sd_mmc_spi_init+0xf0>)
    a942:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    a944:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    a946:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    a948:	a901      	add	r1, sp, #4
    a94a:	2201      	movs	r2, #1
    a94c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    a94e:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    a950:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    a952:	4b17      	ldr	r3, [pc, #92]	; (a9b0 <sd_mmc_spi_init+0xf4>)
    a954:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    a956:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    a958:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    a95a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    a95c:	2900      	cmp	r1, #0
    a95e:	d104      	bne.n	a96a <sd_mmc_spi_init+0xae>
		return &(ports[port_index]->Group[group_index]);
    a960:	0953      	lsrs	r3, r2, #5
    a962:	01db      	lsls	r3, r3, #7
    a964:	4913      	ldr	r1, [pc, #76]	; (a9b4 <sd_mmc_spi_init+0xf8>)
    a966:	468c      	mov	ip, r1
    a968:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a96a:	211f      	movs	r1, #31
    a96c:	4011      	ands	r1, r2
    a96e:	2201      	movs	r2, #1
    a970:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    a972:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    a974:	b010      	add	sp, #64	; 0x40
    a976:	bd70      	pop	{r4, r5, r6, pc}
    a978:	200003db 	.word	0x200003db
    a97c:	00016a83 	.word	0x00016a83
    a980:	00100002 	.word	0x00100002
    a984:	00120002 	.word	0x00120002
    a988:	00130002 	.word	0x00130002
    a98c:	00061a80 	.word	0x00061a80
    a990:	20000398 	.word	0x20000398
    a994:	42000c00 	.word	0x42000c00
    a998:	0000ee49 	.word	0x0000ee49
    a99c:	0000ed01 	.word	0x0000ed01
    a9a0:	e000e100 	.word	0xe000e100
    a9a4:	200003e8 	.word	0x200003e8
    a9a8:	20000000 	.word	0x20000000
    a9ac:	200003d8 	.word	0x200003d8
    a9b0:	0000e6ed 	.word	0x0000e6ed
    a9b4:	41004400 	.word	0x41004400

0000a9b8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9ba:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a9bc:	2200      	movs	r2, #0
    a9be:	4b0d      	ldr	r3, [pc, #52]	; (a9f4 <sd_mmc_spi_select_device+0x3c>)
    a9c0:	701a      	strb	r2, [r3, #0]
    a9c2:	000c      	movs	r4, r1
    a9c4:	4b0c      	ldr	r3, [pc, #48]	; (a9f8 <sd_mmc_spi_select_device+0x40>)
    a9c6:	4299      	cmp	r1, r3
    a9c8:	d900      	bls.n	a9cc <sd_mmc_spi_select_device+0x14>
    a9ca:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    a9cc:	4d0b      	ldr	r5, [pc, #44]	; (a9fc <sd_mmc_spi_select_device+0x44>)
    a9ce:	4e0c      	ldr	r6, [pc, #48]	; (aa00 <sd_mmc_spi_select_device+0x48>)
    a9d0:	e001      	b.n	a9d6 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    a9d2:	08e3      	lsrs	r3, r4, #3
    a9d4:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    a9d6:	0021      	movs	r1, r4
    a9d8:	0028      	movs	r0, r5
    a9da:	47b0      	blx	r6
    a9dc:	2817      	cmp	r0, #23
    a9de:	d0f8      	beq.n	a9d2 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    a9e0:	0079      	lsls	r1, r7, #1
    a9e2:	19cf      	adds	r7, r1, r7
    a9e4:	4907      	ldr	r1, [pc, #28]	; (aa04 <sd_mmc_spi_select_device+0x4c>)
    a9e6:	19c9      	adds	r1, r1, r7
    a9e8:	2201      	movs	r2, #1
    a9ea:	4804      	ldr	r0, [pc, #16]	; (a9fc <sd_mmc_spi_select_device+0x44>)
    a9ec:	4b06      	ldr	r3, [pc, #24]	; (aa08 <sd_mmc_spi_select_device+0x50>)
    a9ee:	4798      	blx	r3
}
    a9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9f2:	46c0      	nop			; (mov r8, r8)
    a9f4:	200003db 	.word	0x200003db
    a9f8:	00989680 	.word	0x00989680
    a9fc:	20000398 	.word	0x20000398
    aa00:	0000ed91 	.word	0x0000ed91
    aa04:	200003d8 	.word	0x200003d8
    aa08:	0000f0f5 	.word	0x0000f0f5

0000aa0c <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    aa0c:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa0e:	2200      	movs	r2, #0
    aa10:	4b04      	ldr	r3, [pc, #16]	; (aa24 <sd_mmc_spi_deselect_device+0x18>)
    aa12:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    aa14:	0041      	lsls	r1, r0, #1
    aa16:	1808      	adds	r0, r1, r0
    aa18:	4903      	ldr	r1, [pc, #12]	; (aa28 <sd_mmc_spi_deselect_device+0x1c>)
    aa1a:	1809      	adds	r1, r1, r0
    aa1c:	4803      	ldr	r0, [pc, #12]	; (aa2c <sd_mmc_spi_deselect_device+0x20>)
    aa1e:	4b04      	ldr	r3, [pc, #16]	; (aa30 <sd_mmc_spi_deselect_device+0x24>)
    aa20:	4798      	blx	r3
}
    aa22:	bd10      	pop	{r4, pc}
    aa24:	200003db 	.word	0x200003db
    aa28:	200003d8 	.word	0x200003d8
    aa2c:	20000398 	.word	0x20000398
    aa30:	0000f0f5 	.word	0x0000f0f5

0000aa34 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    aa34:	b570      	push	{r4, r5, r6, lr}
    aa36:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    aa38:	22ff      	movs	r2, #255	; 0xff
    aa3a:	466b      	mov	r3, sp
    aa3c:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa3e:	2200      	movs	r2, #0
    aa40:	4b07      	ldr	r3, [pc, #28]	; (aa60 <sd_mmc_spi_send_clock+0x2c>)
    aa42:	701a      	strb	r2, [r3, #0]
    aa44:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    aa46:	4e07      	ldr	r6, [pc, #28]	; (aa64 <sd_mmc_spi_send_clock+0x30>)
    aa48:	4d07      	ldr	r5, [pc, #28]	; (aa68 <sd_mmc_spi_send_clock+0x34>)
    aa4a:	2201      	movs	r2, #1
    aa4c:	466b      	mov	r3, sp
    aa4e:	1dd9      	adds	r1, r3, #7
    aa50:	0030      	movs	r0, r6
    aa52:	47a8      	blx	r5
    aa54:	3c01      	subs	r4, #1
    aa56:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    aa58:	2c00      	cmp	r4, #0
    aa5a:	d1f6      	bne.n	aa4a <sd_mmc_spi_send_clock+0x16>
	}
}
    aa5c:	b002      	add	sp, #8
    aa5e:	bd70      	pop	{r4, r5, r6, pc}
    aa60:	200003db 	.word	0x200003db
    aa64:	20000398 	.word	0x20000398
    aa68:	0000f1e9 	.word	0x0000f1e9

0000aa6c <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa6e:	46c6      	mov	lr, r8
    aa70:	b500      	push	{lr}
    aa72:	b086      	sub	sp, #24
    aa74:	4680      	mov	r8, r0
    aa76:	9200      	str	r2, [sp, #0]
    aa78:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    aa7a:	22ff      	movs	r2, #255	; 0xff
    aa7c:	230f      	movs	r3, #15
    aa7e:	a802      	add	r0, sp, #8
    aa80:	4684      	mov	ip, r0
    aa82:	4463      	add	r3, ip
    aa84:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa86:	2200      	movs	r2, #0
    aa88:	4b53      	ldr	r3, [pc, #332]	; (abd8 <sd_mmc_spi_adtc_start+0x16c>)
    aa8a:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    aa8c:	ab04      	add	r3, sp, #16
    aa8e:	323f      	adds	r2, #63	; 0x3f
    aa90:	4640      	mov	r0, r8
    aa92:	4002      	ands	r2, r0
    aa94:	2040      	movs	r0, #64	; 0x40
    aa96:	4302      	orrs	r2, r0
    aa98:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    aa9a:	0e0a      	lsrs	r2, r1, #24
    aa9c:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    aa9e:	0c0a      	lsrs	r2, r1, #16
    aaa0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    aaa2:	0a0a      	lsrs	r2, r1, #8
    aaa4:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    aaa6:	7119      	strb	r1, [r3, #4]
    aaa8:	2700      	movs	r7, #0
	crc = 0;
    aaaa:	2300      	movs	r3, #0
		value = *buf++;
    aaac:	a904      	add	r1, sp, #16
    aaae:	2208      	movs	r2, #8
				crc ^= 0x09;
    aab0:	2409      	movs	r4, #9
    aab2:	e011      	b.n	aad8 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    aab4:	0076      	lsls	r6, r6, #1
    aab6:	b2f6      	uxtb	r6, r6
    aab8:	3801      	subs	r0, #1
    aaba:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    aabc:	2800      	cmp	r0, #0
    aabe:	d008      	beq.n	aad2 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    aac0:	005b      	lsls	r3, r3, #1
    aac2:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    aac4:	001d      	movs	r5, r3
    aac6:	4075      	eors	r5, r6
    aac8:	062d      	lsls	r5, r5, #24
    aaca:	d5f3      	bpl.n	aab4 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    aacc:	4063      	eors	r3, r4
    aace:	b2db      	uxtb	r3, r3
    aad0:	e7f0      	b.n	aab4 <sd_mmc_spi_adtc_start+0x48>
    aad2:	3701      	adds	r7, #1
	while (size--) {
    aad4:	2f05      	cmp	r7, #5
    aad6:	d002      	beq.n	aade <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    aad8:	5c7e      	ldrb	r6, [r7, r1]
    aada:	0010      	movs	r0, r2
    aadc:	e7f0      	b.n	aac0 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    aade:	005b      	lsls	r3, r3, #1
    aae0:	2201      	movs	r2, #1
    aae2:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    aae4:	ac04      	add	r4, sp, #16
    aae6:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    aae8:	4e3c      	ldr	r6, [pc, #240]	; (abdc <sd_mmc_spi_adtc_start+0x170>)
    aaea:	2201      	movs	r2, #1
    aaec:	210f      	movs	r1, #15
    aaee:	ab02      	add	r3, sp, #8
    aaf0:	469c      	mov	ip, r3
    aaf2:	4461      	add	r1, ip
    aaf4:	0030      	movs	r0, r6
    aaf6:	4f3a      	ldr	r7, [pc, #232]	; (abe0 <sd_mmc_spi_adtc_start+0x174>)
    aaf8:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    aafa:	2206      	movs	r2, #6
    aafc:	0021      	movs	r1, r4
    aafe:	0030      	movs	r0, r6
    ab00:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    ab02:	ab02      	add	r3, sp, #8
    ab04:	1dd9      	adds	r1, r3, #7
    ab06:	23ff      	movs	r3, #255	; 0xff
    ab08:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    ab0a:	2201      	movs	r2, #1
    ab0c:	0030      	movs	r0, r6
    ab0e:	4e35      	ldr	r6, [pc, #212]	; (abe4 <sd_mmc_spi_adtc_start+0x178>)
    ab10:	47b0      	blx	r6
    ab12:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    ab14:	ab02      	add	r3, sp, #8
    ab16:	1dde      	adds	r6, r3, #7
    ab18:	4f30      	ldr	r7, [pc, #192]	; (abdc <sd_mmc_spi_adtc_start+0x170>)
    ab1a:	4d32      	ldr	r5, [pc, #200]	; (abe4 <sd_mmc_spi_adtc_start+0x178>)
    ab1c:	23ff      	movs	r3, #255	; 0xff
    ab1e:	2201      	movs	r2, #1
    ab20:	0031      	movs	r1, r6
    ab22:	0038      	movs	r0, r7
    ab24:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    ab26:	7833      	ldrb	r3, [r6, #0]
    ab28:	b25a      	sxtb	r2, r3
    ab2a:	2a00      	cmp	r2, #0
    ab2c:	da0b      	bge.n	ab46 <sd_mmc_spi_adtc_start+0xda>
    ab2e:	3c01      	subs	r4, #1
    ab30:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    ab32:	2c00      	cmp	r4, #0
    ab34:	d1f2      	bne.n	ab1c <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    ab36:	2202      	movs	r2, #2
    ab38:	4b27      	ldr	r3, [pc, #156]	; (abd8 <sd_mmc_spi_adtc_start+0x16c>)
    ab3a:	701a      	strb	r2, [r3, #0]
			return false;
    ab3c:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    ab3e:	b006      	add	sp, #24
    ab40:	bc04      	pop	{r2}
    ab42:	4690      	mov	r8, r2
    ab44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    ab46:	4a28      	ldr	r2, [pc, #160]	; (abe8 <sd_mmc_spi_adtc_start+0x17c>)
    ab48:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    ab4a:	071a      	lsls	r2, r3, #28
    ab4c:	d41a      	bmi.n	ab84 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    ab4e:	075a      	lsls	r2, r3, #29
    ab50:	d41d      	bmi.n	ab8e <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    ab52:	2201      	movs	r2, #1
    ab54:	4393      	bics	r3, r2
    ab56:	d11f      	bne.n	ab98 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    ab58:	4643      	mov	r3, r8
    ab5a:	049b      	lsls	r3, r3, #18
    ab5c:	d420      	bmi.n	aba0 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    ab5e:	4643      	mov	r3, r8
    ab60:	059b      	lsls	r3, r3, #22
    ab62:	d425      	bmi.n	abb0 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    ab64:	4643      	mov	r3, r8
    ab66:	055b      	lsls	r3, r3, #21
    ab68:	d42b      	bmi.n	abc2 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    ab6a:	4b20      	ldr	r3, [pc, #128]	; (abec <sd_mmc_spi_adtc_start+0x180>)
    ab6c:	466a      	mov	r2, sp
    ab6e:	8812      	ldrh	r2, [r2, #0]
    ab70:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    ab72:	4b1f      	ldr	r3, [pc, #124]	; (abf0 <sd_mmc_spi_adtc_start+0x184>)
    ab74:	466a      	mov	r2, sp
    ab76:	8892      	ldrh	r2, [r2, #4]
    ab78:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    ab7a:	2200      	movs	r2, #0
    ab7c:	4b1d      	ldr	r3, [pc, #116]	; (abf4 <sd_mmc_spi_adtc_start+0x188>)
    ab7e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    ab80:	2001      	movs	r0, #1
    ab82:	e7dc      	b.n	ab3e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    ab84:	2206      	movs	r2, #6
    ab86:	4b14      	ldr	r3, [pc, #80]	; (abd8 <sd_mmc_spi_adtc_start+0x16c>)
    ab88:	701a      	strb	r2, [r3, #0]
		return false;
    ab8a:	2000      	movs	r0, #0
    ab8c:	e7d7      	b.n	ab3e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    ab8e:	2209      	movs	r2, #9
    ab90:	4b11      	ldr	r3, [pc, #68]	; (abd8 <sd_mmc_spi_adtc_start+0x16c>)
    ab92:	701a      	strb	r2, [r3, #0]
		return false;
    ab94:	2000      	movs	r0, #0
    ab96:	e7d2      	b.n	ab3e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    ab98:	4b0f      	ldr	r3, [pc, #60]	; (abd8 <sd_mmc_spi_adtc_start+0x16c>)
    ab9a:	701a      	strb	r2, [r3, #0]
		return false;
    ab9c:	2000      	movs	r0, #0
    ab9e:	e7ce      	b.n	ab3e <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    aba0:	4b15      	ldr	r3, [pc, #84]	; (abf8 <sd_mmc_spi_adtc_start+0x18c>)
    aba2:	4798      	blx	r3
    aba4:	2800      	cmp	r0, #0
    aba6:	d1da      	bne.n	ab5e <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    aba8:	2203      	movs	r2, #3
    abaa:	4b0b      	ldr	r3, [pc, #44]	; (abd8 <sd_mmc_spi_adtc_start+0x16c>)
    abac:	701a      	strb	r2, [r3, #0]
			return false;
    abae:	e7c6      	b.n	ab3e <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    abb0:	490d      	ldr	r1, [pc, #52]	; (abe8 <sd_mmc_spi_adtc_start+0x17c>)
    abb2:	2300      	movs	r3, #0
    abb4:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    abb6:	33ff      	adds	r3, #255	; 0xff
    abb8:	2201      	movs	r2, #1
    abba:	4808      	ldr	r0, [pc, #32]	; (abdc <sd_mmc_spi_adtc_start+0x170>)
    abbc:	4e09      	ldr	r6, [pc, #36]	; (abe4 <sd_mmc_spi_adtc_start+0x178>)
    abbe:	47b0      	blx	r6
    abc0:	e7d0      	b.n	ab64 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    abc2:	4e09      	ldr	r6, [pc, #36]	; (abe8 <sd_mmc_spi_adtc_start+0x17c>)
    abc4:	23ff      	movs	r3, #255	; 0xff
    abc6:	2204      	movs	r2, #4
    abc8:	0031      	movs	r1, r6
    abca:	4804      	ldr	r0, [pc, #16]	; (abdc <sd_mmc_spi_adtc_start+0x170>)
    abcc:	4f05      	ldr	r7, [pc, #20]	; (abe4 <sd_mmc_spi_adtc_start+0x178>)
    abce:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    abd0:	6833      	ldr	r3, [r6, #0]
    abd2:	ba1b      	rev	r3, r3
    abd4:	6033      	str	r3, [r6, #0]
    abd6:	e7c8      	b.n	ab6a <sd_mmc_spi_adtc_start+0xfe>
    abd8:	200003db 	.word	0x200003db
    abdc:	20000398 	.word	0x20000398
    abe0:	0000f1e9 	.word	0x0000f1e9
    abe4:	0000f021 	.word	0x0000f021
    abe8:	200003e0 	.word	0x200003e0
    abec:	200003d4 	.word	0x200003d4
    abf0:	200003dc 	.word	0x200003dc
    abf4:	200003e4 	.word	0x200003e4
    abf8:	0000a705 	.word	0x0000a705

0000abfc <sd_mmc_spi_send_cmd>:
{
    abfc:	b510      	push	{r4, lr}
    abfe:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    ac00:	2300      	movs	r3, #0
    ac02:	9300      	str	r3, [sp, #0]
    ac04:	2200      	movs	r2, #0
    ac06:	4c02      	ldr	r4, [pc, #8]	; (ac10 <sd_mmc_spi_send_cmd+0x14>)
    ac08:	47a0      	blx	r4
}
    ac0a:	b002      	add	sp, #8
    ac0c:	bd10      	pop	{r4, pc}
    ac0e:	46c0      	nop			; (mov r8, r8)
    ac10:	0000aa6d 	.word	0x0000aa6d

0000ac14 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    ac14:	4b01      	ldr	r3, [pc, #4]	; (ac1c <sd_mmc_spi_get_response+0x8>)
    ac16:	6818      	ldr	r0, [r3, #0]
}
    ac18:	4770      	bx	lr
    ac1a:	46c0      	nop			; (mov r8, r8)
    ac1c:	200003e0 	.word	0x200003e0

0000ac20 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    ac20:	b510      	push	{r4, lr}
    ac22:	b084      	sub	sp, #16
    ac24:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ac26:	2200      	movs	r2, #0
    ac28:	4b14      	ldr	r3, [pc, #80]	; (ac7c <sd_mmc_spi_read_word+0x5c>)
    ac2a:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ac2c:	4b14      	ldr	r3, [pc, #80]	; (ac80 <sd_mmc_spi_read_word+0x60>)
    ac2e:	8819      	ldrh	r1, [r3, #0]
    ac30:	4b14      	ldr	r3, [pc, #80]	; (ac84 <sd_mmc_spi_read_word+0x64>)
    ac32:	6818      	ldr	r0, [r3, #0]
    ac34:	4b14      	ldr	r3, [pc, #80]	; (ac88 <sd_mmc_spi_read_word+0x68>)
    ac36:	4798      	blx	r3
    ac38:	2900      	cmp	r1, #0
    ac3a:	d103      	bne.n	ac44 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    ac3c:	4b13      	ldr	r3, [pc, #76]	; (ac8c <sd_mmc_spi_read_word+0x6c>)
    ac3e:	4798      	blx	r3
    ac40:	2800      	cmp	r0, #0
    ac42:	d010      	beq.n	ac66 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    ac44:	23ff      	movs	r3, #255	; 0xff
    ac46:	2204      	movs	r2, #4
    ac48:	a901      	add	r1, sp, #4
    ac4a:	4811      	ldr	r0, [pc, #68]	; (ac90 <sd_mmc_spi_read_word+0x70>)
    ac4c:	4c11      	ldr	r4, [pc, #68]	; (ac94 <sd_mmc_spi_read_word+0x74>)
    ac4e:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    ac50:	4b0c      	ldr	r3, [pc, #48]	; (ac84 <sd_mmc_spi_read_word+0x64>)
    ac52:	681a      	ldr	r2, [r3, #0]
    ac54:	1d10      	adds	r0, r2, #4
    ac56:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ac58:	4b09      	ldr	r3, [pc, #36]	; (ac80 <sd_mmc_spi_read_word+0x60>)
    ac5a:	8819      	ldrh	r1, [r3, #0]
    ac5c:	4b0a      	ldr	r3, [pc, #40]	; (ac88 <sd_mmc_spi_read_word+0x68>)
    ac5e:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    ac60:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ac62:	2900      	cmp	r1, #0
    ac64:	d001      	beq.n	ac6a <sd_mmc_spi_read_word+0x4a>
}
    ac66:	b004      	add	sp, #16
    ac68:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    ac6a:	23ff      	movs	r3, #255	; 0xff
    ac6c:	2202      	movs	r2, #2
    ac6e:	a903      	add	r1, sp, #12
    ac70:	4807      	ldr	r0, [pc, #28]	; (ac90 <sd_mmc_spi_read_word+0x70>)
    ac72:	4c08      	ldr	r4, [pc, #32]	; (ac94 <sd_mmc_spi_read_word+0x74>)
    ac74:	47a0      	blx	r4
	return true;
    ac76:	2001      	movs	r0, #1
    ac78:	e7f5      	b.n	ac66 <sd_mmc_spi_read_word+0x46>
    ac7a:	46c0      	nop			; (mov r8, r8)
    ac7c:	200003db 	.word	0x200003db
    ac80:	200003d4 	.word	0x200003d4
    ac84:	200003e4 	.word	0x200003e4
    ac88:	0001679d 	.word	0x0001679d
    ac8c:	0000a7e1 	.word	0x0000a7e1
    ac90:	20000398 	.word	0x20000398
    ac94:	0000f021 	.word	0x0000f021

0000ac98 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    ac98:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac9a:	46de      	mov	lr, fp
    ac9c:	4657      	mov	r7, sl
    ac9e:	4646      	mov	r6, r8
    aca0:	b5c0      	push	{r6, r7, lr}
    aca2:	b082      	sub	sp, #8
    aca4:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aca6:	2200      	movs	r2, #0
    aca8:	4b17      	ldr	r3, [pc, #92]	; (ad08 <sd_mmc_spi_start_read_blocks+0x70>)
    acaa:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    acac:	1e4c      	subs	r4, r1, #1
    acae:	b2a4      	uxth	r4, r4
    acb0:	2900      	cmp	r1, #0
    acb2:	d026      	beq.n	ad02 <sd_mmc_spi_start_read_blocks+0x6a>
    acb4:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    acb6:	4b15      	ldr	r3, [pc, #84]	; (ad0c <sd_mmc_spi_start_read_blocks+0x74>)
    acb8:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    acba:	4f15      	ldr	r7, [pc, #84]	; (ad10 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    acbc:	47d0      	blx	sl
    acbe:	4680      	mov	r8, r0
    acc0:	2800      	cmp	r0, #0
    acc2:	d017      	beq.n	acf4 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    acc4:	883a      	ldrh	r2, [r7, #0]
    acc6:	465b      	mov	r3, fp
    acc8:	1999      	adds	r1, r3, r6
    acca:	23ff      	movs	r3, #255	; 0xff
    accc:	4811      	ldr	r0, [pc, #68]	; (ad14 <sd_mmc_spi_start_read_blocks+0x7c>)
    acce:	4d12      	ldr	r5, [pc, #72]	; (ad18 <sd_mmc_spi_start_read_blocks+0x80>)
    acd0:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    acd2:	883b      	ldrh	r3, [r7, #0]
    acd4:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    acd6:	4a11      	ldr	r2, [pc, #68]	; (ad1c <sd_mmc_spi_start_read_blocks+0x84>)
    acd8:	6811      	ldr	r1, [r2, #0]
    acda:	468c      	mov	ip, r1
    acdc:	4463      	add	r3, ip
    acde:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    ace0:	23ff      	movs	r3, #255	; 0xff
    ace2:	2202      	movs	r2, #2
    ace4:	a901      	add	r1, sp, #4
    ace6:	480b      	ldr	r0, [pc, #44]	; (ad14 <sd_mmc_spi_start_read_blocks+0x7c>)
    ace8:	47a8      	blx	r5
	while (nb_block--) {
    acea:	3c01      	subs	r4, #1
    acec:	b2a4      	uxth	r4, r4
    acee:	4b0c      	ldr	r3, [pc, #48]	; (ad20 <sd_mmc_spi_start_read_blocks+0x88>)
    acf0:	429c      	cmp	r4, r3
    acf2:	d1e3      	bne.n	acbc <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    acf4:	4640      	mov	r0, r8
    acf6:	b002      	add	sp, #8
    acf8:	bc1c      	pop	{r2, r3, r4}
    acfa:	4690      	mov	r8, r2
    acfc:	469a      	mov	sl, r3
    acfe:	46a3      	mov	fp, r4
    ad00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    ad02:	2301      	movs	r3, #1
    ad04:	4698      	mov	r8, r3
    ad06:	e7f5      	b.n	acf4 <sd_mmc_spi_start_read_blocks+0x5c>
    ad08:	200003db 	.word	0x200003db
    ad0c:	0000a7e1 	.word	0x0000a7e1
    ad10:	200003d4 	.word	0x200003d4
    ad14:	20000398 	.word	0x20000398
    ad18:	0000f021 	.word	0x0000f021
    ad1c:	200003e4 	.word	0x200003e4
    ad20:	0000ffff 	.word	0x0000ffff

0000ad24 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    ad24:	2001      	movs	r0, #1
    ad26:	4770      	bx	lr

0000ad28 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    ad28:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad2a:	46c6      	mov	lr, r8
    ad2c:	b500      	push	{lr}
    ad2e:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ad30:	2200      	movs	r2, #0
    ad32:	4b15      	ldr	r3, [pc, #84]	; (ad88 <sd_mmc_spi_start_write_blocks+0x60>)
    ad34:	701a      	strb	r2, [r3, #0]
	pos = 0;
    ad36:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    ad38:	4f14      	ldr	r7, [pc, #80]	; (ad8c <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    ad3a:	4e15      	ldr	r6, [pc, #84]	; (ad90 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    ad3c:	e000      	b.n	ad40 <sd_mmc_spi_start_write_blocks+0x18>
{
    ad3e:	0021      	movs	r1, r4
	while (nb_block--) {
    ad40:	1e4c      	subs	r4, r1, #1
    ad42:	b2a4      	uxth	r4, r4
    ad44:	2900      	cmp	r1, #0
    ad46:	d01b      	beq.n	ad80 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    ad48:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    ad4a:	8832      	ldrh	r2, [r6, #0]
    ad4c:	4643      	mov	r3, r8
    ad4e:	1959      	adds	r1, r3, r5
    ad50:	4810      	ldr	r0, [pc, #64]	; (ad94 <sd_mmc_spi_start_write_blocks+0x6c>)
    ad52:	4b11      	ldr	r3, [pc, #68]	; (ad98 <sd_mmc_spi_start_write_blocks+0x70>)
    ad54:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    ad56:	8833      	ldrh	r3, [r6, #0]
    ad58:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ad5a:	4a10      	ldr	r2, [pc, #64]	; (ad9c <sd_mmc_spi_start_write_blocks+0x74>)
    ad5c:	6811      	ldr	r1, [r2, #0]
    ad5e:	468c      	mov	ip, r1
    ad60:	4463      	add	r3, ip
    ad62:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    ad64:	4b0e      	ldr	r3, [pc, #56]	; (ada0 <sd_mmc_spi_start_write_blocks+0x78>)
    ad66:	4798      	blx	r3
    ad68:	2800      	cmp	r0, #0
    ad6a:	d00a      	beq.n	ad82 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    ad6c:	2c00      	cmp	r4, #0
    ad6e:	d0e6      	beq.n	ad3e <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    ad70:	4b0c      	ldr	r3, [pc, #48]	; (ada4 <sd_mmc_spi_start_write_blocks+0x7c>)
    ad72:	4798      	blx	r3
    ad74:	2800      	cmp	r0, #0
    ad76:	d1e2      	bne.n	ad3e <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    ad78:	2205      	movs	r2, #5
    ad7a:	4b03      	ldr	r3, [pc, #12]	; (ad88 <sd_mmc_spi_start_write_blocks+0x60>)
    ad7c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    ad7e:	e000      	b.n	ad82 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    ad80:	2001      	movs	r0, #1
}
    ad82:	bc04      	pop	{r2}
    ad84:	4690      	mov	r8, r2
    ad86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad88:	200003db 	.word	0x200003db
    ad8c:	0000a6bd 	.word	0x0000a6bd
    ad90:	200003d4 	.word	0x200003d4
    ad94:	20000398 	.word	0x20000398
    ad98:	0000f1e9 	.word	0x0000f1e9
    ad9c:	200003e4 	.word	0x200003e4
    ada0:	0000a84d 	.word	0x0000a84d
    ada4:	0000a705 	.word	0x0000a705

0000ada8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    ada8:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    adaa:	4b05      	ldr	r3, [pc, #20]	; (adc0 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    adac:	4798      	blx	r3
    adae:	2800      	cmp	r0, #0
    adb0:	d103      	bne.n	adba <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    adb2:	2205      	movs	r2, #5
    adb4:	4b03      	ldr	r3, [pc, #12]	; (adc4 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    adb6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    adb8:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    adba:	4b03      	ldr	r3, [pc, #12]	; (adc8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    adbc:	4798      	blx	r3
    adbe:	e7fb      	b.n	adb8 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    adc0:	0000a705 	.word	0x0000a705
    adc4:	200003db 	.word	0x200003db
    adc8:	0000a769 	.word	0x0000a769

0000adcc <delay_init>:
    adcc:	b570      	push	{r4, r5, r6, lr}
    adce:	2000      	movs	r0, #0
    add0:	4b08      	ldr	r3, [pc, #32]	; (adf4 <delay_init+0x28>)
    add2:	4798      	blx	r3
    add4:	0005      	movs	r5, r0
    add6:	4c08      	ldr	r4, [pc, #32]	; (adf8 <delay_init+0x2c>)
    add8:	21fa      	movs	r1, #250	; 0xfa
    adda:	0089      	lsls	r1, r1, #2
    addc:	47a0      	blx	r4
    adde:	4b07      	ldr	r3, [pc, #28]	; (adfc <delay_init+0x30>)
    ade0:	6018      	str	r0, [r3, #0]
    ade2:	4907      	ldr	r1, [pc, #28]	; (ae00 <delay_init+0x34>)
    ade4:	0028      	movs	r0, r5
    ade6:	47a0      	blx	r4
    ade8:	4b06      	ldr	r3, [pc, #24]	; (ae04 <delay_init+0x38>)
    adea:	6018      	str	r0, [r3, #0]
    adec:	2205      	movs	r2, #5
    adee:	4b06      	ldr	r3, [pc, #24]	; (ae08 <delay_init+0x3c>)
    adf0:	601a      	str	r2, [r3, #0]
    adf2:	bd70      	pop	{r4, r5, r6, pc}
    adf4:	0000ff29 	.word	0x0000ff29
    adf8:	00016691 	.word	0x00016691
    adfc:	20000004 	.word	0x20000004
    ae00:	000f4240 	.word	0x000f4240
    ae04:	20000008 	.word	0x20000008
    ae08:	e000e010 	.word	0xe000e010

0000ae0c <delay_cycles_ms>:
    ae0c:	b530      	push	{r4, r5, lr}
    ae0e:	4b08      	ldr	r3, [pc, #32]	; (ae30 <delay_cycles_ms+0x24>)
    ae10:	681c      	ldr	r4, [r3, #0]
    ae12:	4a08      	ldr	r2, [pc, #32]	; (ae34 <delay_cycles_ms+0x28>)
    ae14:	2500      	movs	r5, #0
    ae16:	2180      	movs	r1, #128	; 0x80
    ae18:	0249      	lsls	r1, r1, #9
    ae1a:	3801      	subs	r0, #1
    ae1c:	d307      	bcc.n	ae2e <delay_cycles_ms+0x22>
    ae1e:	2c00      	cmp	r4, #0
    ae20:	d0fb      	beq.n	ae1a <delay_cycles_ms+0xe>
    ae22:	6054      	str	r4, [r2, #4]
    ae24:	6095      	str	r5, [r2, #8]
    ae26:	6813      	ldr	r3, [r2, #0]
    ae28:	420b      	tst	r3, r1
    ae2a:	d0fc      	beq.n	ae26 <delay_cycles_ms+0x1a>
    ae2c:	e7f5      	b.n	ae1a <delay_cycles_ms+0xe>
    ae2e:	bd30      	pop	{r4, r5, pc}
    ae30:	20000004 	.word	0x20000004
    ae34:	e000e010 	.word	0xe000e010

0000ae38 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    ae38:	b510      	push	{r4, lr}
	if (gpfIsr) {
    ae3a:	4b03      	ldr	r3, [pc, #12]	; (ae48 <chip_isr+0x10>)
    ae3c:	681b      	ldr	r3, [r3, #0]
    ae3e:	2b00      	cmp	r3, #0
    ae40:	d000      	beq.n	ae44 <chip_isr+0xc>
		gpfIsr();
    ae42:	4798      	blx	r3
	}
}
    ae44:	bd10      	pop	{r4, pc}
    ae46:	46c0      	nop			; (mov r8, r8)
    ae48:	200003ec 	.word	0x200003ec

0000ae4c <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    ae4c:	b570      	push	{r4, r5, r6, lr}
    ae4e:	b082      	sub	sp, #8
	gpfIsr = NULL;
    ae50:	2300      	movs	r3, #0
    ae52:	4a15      	ldr	r2, [pc, #84]	; (aea8 <nm_bsp_init+0x5c>)
    ae54:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    ae56:	ac01      	add	r4, sp, #4
    ae58:	2501      	movs	r5, #1
    ae5a:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    ae5c:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ae5e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    ae60:	0021      	movs	r1, r4
    ae62:	201b      	movs	r0, #27
    ae64:	4e11      	ldr	r6, [pc, #68]	; (aeac <nm_bsp_init+0x60>)
    ae66:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    ae68:	0021      	movs	r1, r4
    ae6a:	201c      	movs	r0, #28
    ae6c:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    ae6e:	0021      	movs	r1, r4
    ae70:	2028      	movs	r0, #40	; 0x28
    ae72:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    ae74:	4b0e      	ldr	r3, [pc, #56]	; (aeb0 <nm_bsp_init+0x64>)
    ae76:	2280      	movs	r2, #128	; 0x80
    ae78:	0552      	lsls	r2, r2, #21
    ae7a:	615a      	str	r2, [r3, #20]
    ae7c:	2280      	movs	r2, #128	; 0x80
    ae7e:	0512      	lsls	r2, r2, #20
    ae80:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    ae82:	4b0c      	ldr	r3, [pc, #48]	; (aeb4 <nm_bsp_init+0x68>)
    ae84:	681b      	ldr	r3, [r3, #0]
    ae86:	421d      	tst	r5, r3
    ae88:	d003      	beq.n	ae92 <nm_bsp_init+0x46>
    ae8a:	4b0a      	ldr	r3, [pc, #40]	; (aeb4 <nm_bsp_init+0x68>)
    ae8c:	681b      	ldr	r3, [r3, #0]
    ae8e:	079b      	lsls	r3, r3, #30
    ae90:	d401      	bmi.n	ae96 <nm_bsp_init+0x4a>
	    delay_init();
    ae92:	4b09      	ldr	r3, [pc, #36]	; (aeb8 <nm_bsp_init+0x6c>)
    ae94:	4798      	blx	r3
	cpu_irq_enable();
    ae96:	2201      	movs	r2, #1
    ae98:	4b08      	ldr	r3, [pc, #32]	; (aebc <nm_bsp_init+0x70>)
    ae9a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    ae9c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    aea0:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    aea2:	2000      	movs	r0, #0
    aea4:	b002      	add	sp, #8
    aea6:	bd70      	pop	{r4, r5, r6, pc}
    aea8:	200003ec 	.word	0x200003ec
    aeac:	0000e6ed 	.word	0x0000e6ed
    aeb0:	41004400 	.word	0x41004400
    aeb4:	e000e010 	.word	0xe000e010
    aeb8:	0000adcd 	.word	0x0000adcd
    aebc:	2000000e 	.word	0x2000000e

0000aec0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    aec0:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    aec2:	1e44      	subs	r4, r0, #1
    aec4:	2800      	cmp	r0, #0
    aec6:	d004      	beq.n	aed2 <nm_bsp_sleep+0x12>
		delay_ms(1);
    aec8:	4d02      	ldr	r5, [pc, #8]	; (aed4 <nm_bsp_sleep+0x14>)
    aeca:	2001      	movs	r0, #1
    aecc:	47a8      	blx	r5
	while (u32TimeMsec--) {
    aece:	3c01      	subs	r4, #1
    aed0:	d2fb      	bcs.n	aeca <nm_bsp_sleep+0xa>
	}
}
    aed2:	bd70      	pop	{r4, r5, r6, pc}
    aed4:	0000ae0d 	.word	0x0000ae0d

0000aed8 <nm_bsp_reset>:
{
    aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aeda:	4c07      	ldr	r4, [pc, #28]	; (aef8 <nm_bsp_reset+0x20>)
    aedc:	2780      	movs	r7, #128	; 0x80
    aede:	057f      	lsls	r7, r7, #21
    aee0:	6167      	str	r7, [r4, #20]
    aee2:	2580      	movs	r5, #128	; 0x80
    aee4:	052d      	lsls	r5, r5, #20
    aee6:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    aee8:	2001      	movs	r0, #1
    aeea:	4e04      	ldr	r6, [pc, #16]	; (aefc <nm_bsp_reset+0x24>)
    aeec:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    aeee:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    aef0:	200a      	movs	r0, #10
    aef2:	47b0      	blx	r6
    aef4:	61a5      	str	r5, [r4, #24]
}
    aef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aef8:	41004400 	.word	0x41004400
    aefc:	0000aec1 	.word	0x0000aec1

0000af00 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    af00:	b510      	push	{r4, lr}
    af02:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    af04:	4b0e      	ldr	r3, [pc, #56]	; (af40 <nm_bsp_register_isr+0x40>)
    af06:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    af08:	ac01      	add	r4, sp, #4
    af0a:	0020      	movs	r0, r4
    af0c:	4b0d      	ldr	r3, [pc, #52]	; (af44 <nm_bsp_register_isr+0x44>)
    af0e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    af10:	2329      	movs	r3, #41	; 0x29
    af12:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    af14:	2300      	movs	r3, #0
    af16:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    af18:	3301      	adds	r3, #1
    af1a:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    af1c:	3301      	adds	r3, #1
    af1e:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    af20:	0021      	movs	r1, r4
    af22:	2009      	movs	r0, #9
    af24:	4b08      	ldr	r3, [pc, #32]	; (af48 <nm_bsp_register_isr+0x48>)
    af26:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    af28:	2200      	movs	r2, #0
    af2a:	2109      	movs	r1, #9
    af2c:	4807      	ldr	r0, [pc, #28]	; (af4c <nm_bsp_register_isr+0x4c>)
    af2e:	4b08      	ldr	r3, [pc, #32]	; (af50 <nm_bsp_register_isr+0x50>)
    af30:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    af32:	2100      	movs	r1, #0
    af34:	2009      	movs	r0, #9
    af36:	4b07      	ldr	r3, [pc, #28]	; (af54 <nm_bsp_register_isr+0x54>)
    af38:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    af3a:	b004      	add	sp, #16
    af3c:	bd10      	pop	{r4, pc}
    af3e:	46c0      	nop			; (mov r8, r8)
    af40:	200003ec 	.word	0x200003ec
    af44:	0000e3c9 	.word	0x0000e3c9
    af48:	0000e3dd 	.word	0x0000e3dd
    af4c:	0000ae39 	.word	0x0000ae39
    af50:	0000e285 	.word	0x0000e285
    af54:	0000e2b1 	.word	0x0000e2b1

0000af58 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    af58:	b510      	push	{r4, lr}
	if (u8Enable) {
    af5a:	2800      	cmp	r0, #0
    af5c:	d104      	bne.n	af68 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    af5e:	2100      	movs	r1, #0
    af60:	2009      	movs	r0, #9
    af62:	4b04      	ldr	r3, [pc, #16]	; (af74 <nm_bsp_interrupt_ctrl+0x1c>)
    af64:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    af66:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    af68:	2100      	movs	r1, #0
    af6a:	2009      	movs	r0, #9
    af6c:	4b02      	ldr	r3, [pc, #8]	; (af78 <nm_bsp_interrupt_ctrl+0x20>)
    af6e:	4798      	blx	r3
    af70:	e7f9      	b.n	af66 <nm_bsp_interrupt_ctrl+0xe>
    af72:	46c0      	nop			; (mov r8, r8)
    af74:	0000e2d1 	.word	0x0000e2d1
    af78:	0000e2b1 	.word	0x0000e2b1

0000af7c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    af7c:	b530      	push	{r4, r5, lr}
    af7e:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    af80:	4c30      	ldr	r4, [pc, #192]	; (b044 <nm_bus_init+0xc8>)
    af82:	230e      	movs	r3, #14
    af84:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    af86:	2300      	movs	r3, #0
    af88:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    af8a:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    af8c:	a901      	add	r1, sp, #4
    af8e:	2201      	movs	r2, #1
    af90:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    af92:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    af94:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    af96:	200e      	movs	r0, #14
    af98:	4b2b      	ldr	r3, [pc, #172]	; (b048 <nm_bus_init+0xcc>)
    af9a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    af9c:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    af9e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    afa0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    afa2:	2900      	cmp	r1, #0
    afa4:	d104      	bne.n	afb0 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    afa6:	0953      	lsrs	r3, r2, #5
    afa8:	01db      	lsls	r3, r3, #7
    afaa:	4928      	ldr	r1, [pc, #160]	; (b04c <nm_bus_init+0xd0>)
    afac:	468c      	mov	ip, r1
    afae:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    afb0:	211f      	movs	r1, #31
    afb2:	4011      	ands	r1, r2
    afb4:	2201      	movs	r2, #1
    afb6:	0010      	movs	r0, r2
    afb8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    afba:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    afbc:	ac02      	add	r4, sp, #8
    afbe:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    afc0:	2300      	movs	r3, #0
    afc2:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    afc4:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    afc6:	21c0      	movs	r1, #192	; 0xc0
    afc8:	0389      	lsls	r1, r1, #14
    afca:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    afcc:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    afce:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    afd0:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    afd2:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    afd4:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    afd6:	3223      	adds	r2, #35	; 0x23
    afd8:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    afda:	3a18      	subs	r2, #24
    afdc:	2100      	movs	r1, #0
    afde:	a808      	add	r0, sp, #32
    afe0:	4b1b      	ldr	r3, [pc, #108]	; (b050 <nm_bus_init+0xd4>)
    afe2:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    afe4:	4b1b      	ldr	r3, [pc, #108]	; (b054 <nm_bus_init+0xd8>)
    afe6:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    afe8:	4b1b      	ldr	r3, [pc, #108]	; (b058 <nm_bus_init+0xdc>)
    afea:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    afec:	2301      	movs	r3, #1
    afee:	425b      	negs	r3, r3
    aff0:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    aff2:	4b1a      	ldr	r3, [pc, #104]	; (b05c <nm_bus_init+0xe0>)
    aff4:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    aff6:	4b1a      	ldr	r3, [pc, #104]	; (b060 <nm_bus_init+0xe4>)
    aff8:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    affa:	0022      	movs	r2, r4
    affc:	4919      	ldr	r1, [pc, #100]	; (b064 <nm_bus_init+0xe8>)
    affe:	481a      	ldr	r0, [pc, #104]	; (b068 <nm_bus_init+0xec>)
    b000:	4b1a      	ldr	r3, [pc, #104]	; (b06c <nm_bus_init+0xf0>)
    b002:	4798      	blx	r3
    b004:	2800      	cmp	r0, #0
    b006:	d11a      	bne.n	b03e <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    b008:	4d17      	ldr	r5, [pc, #92]	; (b068 <nm_bus_init+0xec>)
    b00a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b00c:	0020      	movs	r0, r4
    b00e:	4b18      	ldr	r3, [pc, #96]	; (b070 <nm_bus_init+0xf4>)
    b010:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b012:	231f      	movs	r3, #31
    b014:	4018      	ands	r0, r3
    b016:	3b1e      	subs	r3, #30
    b018:	4083      	lsls	r3, r0
    b01a:	4a16      	ldr	r2, [pc, #88]	; (b074 <nm_bus_init+0xf8>)
    b01c:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b01e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    b020:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b022:	2b00      	cmp	r3, #0
    b024:	d1fc      	bne.n	b020 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b026:	6823      	ldr	r3, [r4, #0]
    b028:	2202      	movs	r2, #2
    b02a:	4313      	orrs	r3, r2
    b02c:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    b02e:	4b12      	ldr	r3, [pc, #72]	; (b078 <nm_bus_init+0xfc>)
    b030:	4798      	blx	r3
	nm_bsp_sleep(1);
    b032:	2001      	movs	r0, #1
    b034:	4b11      	ldr	r3, [pc, #68]	; (b07c <nm_bus_init+0x100>)
    b036:	4798      	blx	r3
#endif
	return result;
    b038:	2000      	movs	r0, #0
}
    b03a:	b011      	add	sp, #68	; 0x44
    b03c:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    b03e:	2006      	movs	r0, #6
    b040:	4240      	negs	r0, r0
    b042:	e7fa      	b.n	b03a <nm_bus_init+0xbe>
    b044:	20000f94 	.word	0x20000f94
    b048:	0000e6ed 	.word	0x0000e6ed
    b04c:	41004400 	.word	0x41004400
    b050:	00016a83 	.word	0x00016a83
    b054:	000c0002 	.word	0x000c0002
    b058:	000d0002 	.word	0x000d0002
    b05c:	000f0002 	.word	0x000f0002
    b060:	00b71b00 	.word	0x00b71b00
    b064:	42001000 	.word	0x42001000
    b068:	20000f98 	.word	0x20000f98
    b06c:	0000ee49 	.word	0x0000ee49
    b070:	0000ed01 	.word	0x0000ed01
    b074:	e000e100 	.word	0xe000e100
    b078:	0000aed9 	.word	0x0000aed9
    b07c:	0000aec1 	.word	0x0000aec1

0000b080 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    b080:	b5f0      	push	{r4, r5, r6, r7, lr}
    b082:	46de      	mov	lr, fp
    b084:	4657      	mov	r7, sl
    b086:	464e      	mov	r6, r9
    b088:	4645      	mov	r5, r8
    b08a:	b5e0      	push	{r5, r6, r7, lr}
    b08c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    b08e:	2803      	cmp	r0, #3
    b090:	d000      	beq.n	b094 <nm_bus_ioctl+0x14>
    b092:	e075      	b.n	b180 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    b094:	680e      	ldr	r6, [r1, #0]
    b096:	684d      	ldr	r5, [r1, #4]
    b098:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    b09a:	2200      	movs	r2, #0
    b09c:	466b      	mov	r3, sp
    b09e:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    b0a0:	2d00      	cmp	r5, #0
    b0a2:	d027      	beq.n	b0f4 <nm_bus_ioctl+0x74>
    b0a4:	2c00      	cmp	r4, #0
    b0a6:	d065      	beq.n	b174 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    b0a8:	2e00      	cmp	r6, #0
    b0aa:	d100      	bne.n	b0ae <nm_bus_ioctl+0x2e>
    b0ac:	e077      	b.n	b19e <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    b0ae:	2300      	movs	r3, #0
    b0b0:	4698      	mov	r8, r3
    b0b2:	2300      	movs	r3, #0
    b0b4:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    b0b6:	2201      	movs	r2, #1
    b0b8:	493b      	ldr	r1, [pc, #236]	; (b1a8 <nm_bus_ioctl+0x128>)
    b0ba:	483c      	ldr	r0, [pc, #240]	; (b1ac <nm_bus_ioctl+0x12c>)
    b0bc:	4b3c      	ldr	r3, [pc, #240]	; (b1b0 <nm_bus_ioctl+0x130>)
    b0be:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    b0c0:	4b3a      	ldr	r3, [pc, #232]	; (b1ac <nm_bus_ioctl+0x12c>)
    b0c2:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    b0c4:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    b0c6:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    b0c8:	4699      	mov	r9, r3
			pu8Miso++;
    b0ca:	4659      	mov	r1, fp
    b0cc:	424b      	negs	r3, r1
    b0ce:	4159      	adcs	r1, r3
    b0d0:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    b0d2:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b0d4:	4653      	mov	r3, sl
    b0d6:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    b0d8:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    b0da:	4239      	tst	r1, r7
    b0dc:	d0fc      	beq.n	b0d8 <nm_bus_ioctl+0x58>
    b0de:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    b0e0:	4239      	tst	r1, r7
    b0e2:	d0fc      	beq.n	b0de <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    b0e4:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    b0e6:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    b0e8:	4211      	tst	r1, r2
    b0ea:	d0fc      	beq.n	b0e6 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    b0ec:	4649      	mov	r1, r9
    b0ee:	7989      	ldrb	r1, [r1, #6]
    b0f0:	468c      	mov	ip, r1
    b0f2:	e011      	b.n	b118 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    b0f4:	2e00      	cmp	r6, #0
    b0f6:	d03a      	beq.n	b16e <nm_bus_ioctl+0xee>
    b0f8:	2c00      	cmp	r4, #0
    b0fa:	d03e      	beq.n	b17a <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    b0fc:	2300      	movs	r3, #0
    b0fe:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    b100:	3301      	adds	r3, #1
    b102:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    b104:	466b      	mov	r3, sp
    b106:	1ddd      	adds	r5, r3, #7
    b108:	e7d5      	b.n	b0b6 <nm_bus_ioctl+0x36>
    b10a:	4660      	mov	r0, ip
    b10c:	2801      	cmp	r0, #1
    b10e:	d00d      	beq.n	b12c <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    b110:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b112:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    b114:	2900      	cmp	r1, #0
    b116:	d00d      	beq.n	b134 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    b118:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    b11a:	4211      	tst	r1, r2
    b11c:	d0fc      	beq.n	b118 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    b11e:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    b120:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    b122:	4210      	tst	r0, r2
    b124:	d0f1      	beq.n	b10a <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    b126:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    b128:	311e      	adds	r1, #30
    b12a:	e7ee      	b.n	b10a <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    b12c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b12e:	05c0      	lsls	r0, r0, #23
    b130:	0dc0      	lsrs	r0, r0, #23
    b132:	e7ef      	b.n	b114 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    b134:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    b136:	3c01      	subs	r4, #1
    b138:	b2a4      	uxth	r4, r4
			pu8Miso++;
    b13a:	445d      	add	r5, fp
			pu8Mosi++;
    b13c:	4643      	mov	r3, r8
    b13e:	4259      	negs	r1, r3
    b140:	414b      	adcs	r3, r1
    b142:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    b144:	2c00      	cmp	r4, #0
    b146:	d1c4      	bne.n	b0d2 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    b148:	4b18      	ldr	r3, [pc, #96]	; (b1ac <nm_bus_ioctl+0x12c>)
    b14a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    b14c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    b14e:	7e0b      	ldrb	r3, [r1, #24]
    b150:	4213      	tst	r3, r2
    b152:	d0fc      	beq.n	b14e <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    b154:	2200      	movs	r2, #0
    b156:	4914      	ldr	r1, [pc, #80]	; (b1a8 <nm_bus_ioctl+0x128>)
    b158:	4814      	ldr	r0, [pc, #80]	; (b1ac <nm_bus_ioctl+0x12c>)
    b15a:	4b15      	ldr	r3, [pc, #84]	; (b1b0 <nm_bus_ioctl+0x130>)
    b15c:	4798      	blx	r3
	return M2M_SUCCESS;
    b15e:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    b160:	b003      	add	sp, #12
    b162:	bc3c      	pop	{r2, r3, r4, r5}
    b164:	4690      	mov	r8, r2
    b166:	4699      	mov	r9, r3
    b168:	46a2      	mov	sl, r4
    b16a:	46ab      	mov	fp, r5
    b16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    b16e:	200f      	movs	r0, #15
    b170:	4240      	negs	r0, r0
    b172:	e7f5      	b.n	b160 <nm_bus_ioctl+0xe0>
    b174:	200f      	movs	r0, #15
    b176:	4240      	negs	r0, r0
    b178:	e7f2      	b.n	b160 <nm_bus_ioctl+0xe0>
    b17a:	200f      	movs	r0, #15
    b17c:	4240      	negs	r0, r0
		break;
    b17e:	e7ef      	b.n	b160 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    b180:	2283      	movs	r2, #131	; 0x83
    b182:	0052      	lsls	r2, r2, #1
    b184:	490b      	ldr	r1, [pc, #44]	; (b1b4 <nm_bus_ioctl+0x134>)
    b186:	480c      	ldr	r0, [pc, #48]	; (b1b8 <nm_bus_ioctl+0x138>)
    b188:	4b0c      	ldr	r3, [pc, #48]	; (b1bc <nm_bus_ioctl+0x13c>)
    b18a:	4798      	blx	r3
    b18c:	480c      	ldr	r0, [pc, #48]	; (b1c0 <nm_bus_ioctl+0x140>)
    b18e:	4b0d      	ldr	r3, [pc, #52]	; (b1c4 <nm_bus_ioctl+0x144>)
    b190:	4798      	blx	r3
    b192:	200d      	movs	r0, #13
    b194:	4b0c      	ldr	r3, [pc, #48]	; (b1c8 <nm_bus_ioctl+0x148>)
    b196:	4798      	blx	r3
			s8Ret = -1;
    b198:	2001      	movs	r0, #1
    b19a:	4240      	negs	r0, r0
	return s8Ret;
    b19c:	e7e0      	b.n	b160 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    b19e:	2301      	movs	r3, #1
    b1a0:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    b1a2:	466b      	mov	r3, sp
    b1a4:	1dde      	adds	r6, r3, #7
    b1a6:	e784      	b.n	b0b2 <nm_bus_ioctl+0x32>
    b1a8:	20000f94 	.word	0x20000f94
    b1ac:	20000f98 	.word	0x20000f98
    b1b0:	0000f0f5 	.word	0x0000f0f5
    b1b4:	00018e54 	.word	0x00018e54
    b1b8:	00018e64 	.word	0x00018e64
    b1bc:	00016be5 	.word	0x00016be5
    b1c0:	00018e78 	.word	0x00018e78
    b1c4:	00016d01 	.word	0x00016d01
    b1c8:	00016c19 	.word	0x00016c19

0000b1cc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    b1cc:	b530      	push	{r4, r5, lr}
    b1ce:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    b1d0:	ab01      	add	r3, sp, #4
    b1d2:	2200      	movs	r2, #0
    b1d4:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    b1d6:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    b1d8:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b1da:	4d13      	ldr	r5, [pc, #76]	; (b228 <nm_bus_deinit+0x5c>)
    b1dc:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    b1de:	0020      	movs	r0, r4
    b1e0:	4b12      	ldr	r3, [pc, #72]	; (b22c <nm_bus_deinit+0x60>)
    b1e2:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b1e4:	231f      	movs	r3, #31
    b1e6:	4018      	ands	r0, r3
    b1e8:	3b1e      	subs	r3, #30
    b1ea:	4083      	lsls	r3, r0
    b1ec:	2280      	movs	r2, #128	; 0x80
    b1ee:	4910      	ldr	r1, [pc, #64]	; (b230 <nm_bus_deinit+0x64>)
    b1f0:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b1f2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    b1f4:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b1f6:	2b00      	cmp	r3, #0
    b1f8:	d1fc      	bne.n	b1f4 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    b1fa:	338f      	adds	r3, #143	; 0x8f
    b1fc:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    b1fe:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    b200:	6823      	ldr	r3, [r4, #0]
    b202:	2202      	movs	r2, #2
    b204:	4393      	bics	r3, r2
    b206:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    b208:	a901      	add	r1, sp, #4
    b20a:	200c      	movs	r0, #12
    b20c:	4c09      	ldr	r4, [pc, #36]	; (b234 <nm_bus_deinit+0x68>)
    b20e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    b210:	a901      	add	r1, sp, #4
    b212:	200f      	movs	r0, #15
    b214:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    b216:	a901      	add	r1, sp, #4
    b218:	200d      	movs	r0, #13
    b21a:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    b21c:	a901      	add	r1, sp, #4
    b21e:	200e      	movs	r0, #14
    b220:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    b222:	2000      	movs	r0, #0
    b224:	b003      	add	sp, #12
    b226:	bd30      	pop	{r4, r5, pc}
    b228:	20000f98 	.word	0x20000f98
    b22c:	0000ed01 	.word	0x0000ed01
    b230:	e000e100 	.word	0xe000e100
    b234:	0000e6ed 	.word	0x0000e6ed

0000b238 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    b238:	2a00      	cmp	r2, #0
    b23a:	d006      	beq.n	b24a <m2m_memcpy+0x12>
    b23c:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    b23e:	780b      	ldrb	r3, [r1, #0]
    b240:	7003      	strb	r3, [r0, #0]
		pDst++;
    b242:	3001      	adds	r0, #1
		pSrc++;
    b244:	3101      	adds	r1, #1
	}while(--sz);
    b246:	4290      	cmp	r0, r2
    b248:	d1f9      	bne.n	b23e <m2m_memcpy+0x6>
}
    b24a:	4770      	bx	lr

0000b24c <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    b24c:	2a00      	cmp	r2, #0
    b24e:	d004      	beq.n	b25a <m2m_memset+0xe>
    b250:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    b252:	7001      	strb	r1, [r0, #0]
		pBuf++;
    b254:	3001      	adds	r0, #1
	}while(--sz);
    b256:	4290      	cmp	r0, r2
    b258:	d1fb      	bne.n	b252 <m2m_memset+0x6>
}
    b25a:	4770      	bx	lr

0000b25c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    b25c:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    b25e:	7802      	ldrb	r2, [r0, #0]
    b260:	2a00      	cmp	r2, #0
    b262:	d007      	beq.n	b274 <m2m_strlen+0x18>
    b264:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    b266:	3001      	adds	r0, #1
    b268:	b280      	uxth	r0, r0
		pcStr++;
    b26a:	3301      	adds	r3, #1
	while(*pcStr)
    b26c:	781a      	ldrb	r2, [r3, #0]
    b26e:	2a00      	cmp	r2, #0
    b270:	d1f9      	bne.n	b266 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    b272:	4770      	bx	lr
	uint16	u16StrLen = 0;
    b274:	2000      	movs	r0, #0
    b276:	e7fc      	b.n	b272 <m2m_strlen+0x16>

0000b278 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    b278:	4a02      	ldr	r2, [pc, #8]	; (b284 <isr+0xc>)
    b27a:	78d3      	ldrb	r3, [r2, #3]
    b27c:	3301      	adds	r3, #1
    b27e:	b2db      	uxtb	r3, r3
    b280:	70d3      	strb	r3, [r2, #3]
	//nm_bsp_interrupt_ctrl(1);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    b282:	4770      	bx	lr
    b284:	20000fd4 	.word	0x20000fd4

0000b288 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    b288:	4770      	bx	lr
	...

0000b28c <hif_set_rx_done>:
{
    b28c:	b500      	push	{lr}
    b28e:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    b290:	2200      	movs	r2, #0
    b292:	4b0a      	ldr	r3, [pc, #40]	; (b2bc <hif_set_rx_done+0x30>)
    b294:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    b296:	2001      	movs	r0, #1
    b298:	4b09      	ldr	r3, [pc, #36]	; (b2c0 <hif_set_rx_done+0x34>)
    b29a:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    b29c:	a901      	add	r1, sp, #4
    b29e:	4809      	ldr	r0, [pc, #36]	; (b2c4 <hif_set_rx_done+0x38>)
    b2a0:	4b09      	ldr	r3, [pc, #36]	; (b2c8 <hif_set_rx_done+0x3c>)
    b2a2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    b2a4:	2800      	cmp	r0, #0
    b2a6:	d001      	beq.n	b2ac <hif_set_rx_done+0x20>
}
    b2a8:	b003      	add	sp, #12
    b2aa:	bd00      	pop	{pc}
	reg |= NBIT1;
    b2ac:	2102      	movs	r1, #2
    b2ae:	9b01      	ldr	r3, [sp, #4]
    b2b0:	4319      	orrs	r1, r3
    b2b2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b2b4:	4803      	ldr	r0, [pc, #12]	; (b2c4 <hif_set_rx_done+0x38>)
    b2b6:	4b05      	ldr	r3, [pc, #20]	; (b2cc <hif_set_rx_done+0x40>)
    b2b8:	4798      	blx	r3
    b2ba:	e7f5      	b.n	b2a8 <hif_set_rx_done+0x1c>
    b2bc:	20000fd4 	.word	0x20000fd4
    b2c0:	0000af59 	.word	0x0000af59
    b2c4:	00001070 	.word	0x00001070
    b2c8:	0000c71d 	.word	0x0000c71d
    b2cc:	0000c729 	.word	0x0000c729

0000b2d0 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    b2d0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    b2d2:	4b0c      	ldr	r3, [pc, #48]	; (b304 <hif_chip_wake+0x34>)
    b2d4:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    b2d6:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    b2d8:	2b00      	cmp	r3, #0
    b2da:	d10d      	bne.n	b2f8 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    b2dc:	4b09      	ldr	r3, [pc, #36]	; (b304 <hif_chip_wake+0x34>)
    b2de:	785b      	ldrb	r3, [r3, #1]
    b2e0:	2b00      	cmp	r3, #0
    b2e2:	d103      	bne.n	b2ec <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    b2e4:	4b07      	ldr	r3, [pc, #28]	; (b304 <hif_chip_wake+0x34>)
    b2e6:	781b      	ldrb	r3, [r3, #0]
    b2e8:	2b00      	cmp	r3, #0
    b2ea:	d106      	bne.n	b2fa <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    b2ec:	4a05      	ldr	r2, [pc, #20]	; (b304 <hif_chip_wake+0x34>)
    b2ee:	7853      	ldrb	r3, [r2, #1]
    b2f0:	3301      	adds	r3, #1
    b2f2:	b2db      	uxtb	r3, r3
    b2f4:	7053      	strb	r3, [r2, #1]
    b2f6:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    b2f8:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    b2fa:	4b03      	ldr	r3, [pc, #12]	; (b308 <hif_chip_wake+0x38>)
    b2fc:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    b2fe:	2800      	cmp	r0, #0
    b300:	d0f4      	beq.n	b2ec <hif_chip_wake+0x1c>
    b302:	e7f9      	b.n	b2f8 <hif_chip_wake+0x28>
    b304:	20000fd4 	.word	0x20000fd4
    b308:	0000c405 	.word	0x0000c405

0000b30c <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    b30c:	4b05      	ldr	r3, [pc, #20]	; (b324 <hif_chip_sleep_sc+0x18>)
    b30e:	785b      	ldrb	r3, [r3, #1]
    b310:	2b00      	cmp	r3, #0
    b312:	d004      	beq.n	b31e <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    b314:	4a03      	ldr	r2, [pc, #12]	; (b324 <hif_chip_sleep_sc+0x18>)
    b316:	7853      	ldrb	r3, [r2, #1]
    b318:	3b01      	subs	r3, #1
    b31a:	b2db      	uxtb	r3, r3
    b31c:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    b31e:	2000      	movs	r0, #0
    b320:	4770      	bx	lr
    b322:	46c0      	nop			; (mov r8, r8)
    b324:	20000fd4 	.word	0x20000fd4

0000b328 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    b328:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    b32a:	4b0b      	ldr	r3, [pc, #44]	; (b358 <hif_chip_sleep+0x30>)
    b32c:	785b      	ldrb	r3, [r3, #1]
    b32e:	2b00      	cmp	r3, #0
    b330:	d004      	beq.n	b33c <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    b332:	4a09      	ldr	r2, [pc, #36]	; (b358 <hif_chip_sleep+0x30>)
    b334:	7853      	ldrb	r3, [r2, #1]
    b336:	3b01      	subs	r3, #1
    b338:	b2db      	uxtb	r3, r3
    b33a:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    b33c:	4b06      	ldr	r3, [pc, #24]	; (b358 <hif_chip_sleep+0x30>)
    b33e:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    b340:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    b342:	2b00      	cmp	r3, #0
    b344:	d103      	bne.n	b34e <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    b346:	4b04      	ldr	r3, [pc, #16]	; (b358 <hif_chip_sleep+0x30>)
    b348:	781b      	ldrb	r3, [r3, #0]
    b34a:	2b00      	cmp	r3, #0
    b34c:	d100      	bne.n	b350 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    b34e:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    b350:	4b02      	ldr	r3, [pc, #8]	; (b35c <hif_chip_sleep+0x34>)
    b352:	4798      	blx	r3
    b354:	e7fb      	b.n	b34e <hif_chip_sleep+0x26>
    b356:	46c0      	nop			; (mov r8, r8)
    b358:	20000fd4 	.word	0x20000fd4
    b35c:	0000c39d 	.word	0x0000c39d

0000b360 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    b360:	b5f0      	push	{r4, r5, r6, r7, lr}
    b362:	46de      	mov	lr, fp
    b364:	4657      	mov	r7, sl
    b366:	b580      	push	{r7, lr}
    b368:	b089      	sub	sp, #36	; 0x24
    b36a:	4683      	mov	fp, r0
    b36c:	468a      	mov	sl, r1
    b36e:	9201      	str	r2, [sp, #4]
    b370:	9300      	str	r3, [sp, #0]
    b372:	ab10      	add	r3, sp, #64	; 0x40
    b374:	cb80      	ldmia	r3!, {r7}
    b376:	881e      	ldrh	r6, [r3, #0]
    b378:	ab12      	add	r3, sp, #72	; 0x48
    b37a:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    b37c:	aa07      	add	r2, sp, #28
    b37e:	237f      	movs	r3, #127	; 0x7f
    b380:	400b      	ands	r3, r1
    b382:	7053      	strb	r3, [r2, #1]
	strHif.u8Gid		= u8Gid;
    b384:	7010      	strb	r0, [r2, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
	if(pu8DataBuf != NULL)
    b386:	2f00      	cmp	r7, #0
    b388:	d042      	beq.n	b410 <hif_send+0xb0>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    b38a:	0033      	movs	r3, r6
    b38c:	3308      	adds	r3, #8
    b38e:	18eb      	adds	r3, r5, r3
    b390:	8053      	strh	r3, [r2, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
    b392:	4b72      	ldr	r3, [pc, #456]	; (b55c <hif_send+0x1fc>)
    b394:	aa07      	add	r2, sp, #28
    b396:	8852      	ldrh	r2, [r2, #2]
    b398:	429a      	cmp	r2, r3
    b39a:	d900      	bls.n	b39e <hif_send+0x3e>
    b39c:	e0cd      	b.n	b53a <hif_send+0x1da>
    {
	ret = hif_chip_wake();
    b39e:	4b70      	ldr	r3, [pc, #448]	; (b560 <hif_send+0x200>)
    b3a0:	4798      	blx	r3
    b3a2:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    b3a4:	d000      	beq.n	b3a8 <hif_send+0x48>
    b3a6:	e0bb      	b.n	b520 <hif_send+0x1c0>
	{
		volatile uint32 reg, dma_addr = 0;
    b3a8:	2300      	movs	r3, #0
    b3aa:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    b3ac:	aa02      	add	r2, sp, #8
    b3ae:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    b3b0:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    b3b2:	9b04      	ldr	r3, [sp, #16]
    b3b4:	465a      	mov	r2, fp
    b3b6:	431a      	orrs	r2, r3
    b3b8:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    b3ba:	9a04      	ldr	r2, [sp, #16]
    b3bc:	4653      	mov	r3, sl
    b3be:	021b      	lsls	r3, r3, #8
    b3c0:	4313      	orrs	r3, r2
    b3c2:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    b3c4:	9a04      	ldr	r2, [sp, #16]
    b3c6:	ab07      	add	r3, sp, #28
    b3c8:	885b      	ldrh	r3, [r3, #2]
    b3ca:	041b      	lsls	r3, r3, #16
    b3cc:	4313      	orrs	r3, r2
    b3ce:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    b3d0:	9904      	ldr	r1, [sp, #16]
    b3d2:	4864      	ldr	r0, [pc, #400]	; (b564 <hif_send+0x204>)
    b3d4:	4b64      	ldr	r3, [pc, #400]	; (b568 <hif_send+0x208>)
    b3d6:	4798      	blx	r3
    b3d8:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    b3da:	d154      	bne.n	b486 <hif_send+0x126>

		reg = 0UL;
    b3dc:	2300      	movs	r3, #0
    b3de:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    b3e0:	9b04      	ldr	r3, [sp, #16]
    b3e2:	2202      	movs	r2, #2
    b3e4:	4313      	orrs	r3, r2
    b3e6:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    b3e8:	9904      	ldr	r1, [sp, #16]
    b3ea:	4860      	ldr	r0, [pc, #384]	; (b56c <hif_send+0x20c>)
    b3ec:	4b5e      	ldr	r3, [pc, #376]	; (b568 <hif_send+0x208>)
    b3ee:	4798      	blx	r3
    b3f0:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    b3f2:	d148      	bne.n	b486 <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    b3f4:	2200      	movs	r2, #0
    b3f6:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    b3f8:	ab02      	add	r3, sp, #8
    b3fa:	80da      	strh	r2, [r3, #6]
    b3fc:	3306      	adds	r3, #6
    b3fe:	881b      	ldrh	r3, [r3, #0]
    b400:	b29b      	uxth	r3, r3
    b402:	4a5b      	ldr	r2, [pc, #364]	; (b570 <hif_send+0x210>)
    b404:	4293      	cmp	r3, r2
    b406:	d846      	bhi.n	b496 <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    b408:	4c5a      	ldr	r4, [pc, #360]	; (b574 <hif_send+0x214>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    b40a:	4b5b      	ldr	r3, [pc, #364]	; (b578 <hif_send+0x218>)
    b40c:	469a      	mov	sl, r3
    b40e:	e014      	b.n	b43a <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    b410:	9b00      	ldr	r3, [sp, #0]
    b412:	3308      	adds	r3, #8
    b414:	aa07      	add	r2, sp, #28
    b416:	8053      	strh	r3, [r2, #2]
    b418:	e7bb      	b.n	b392 <hif_send+0x32>
				nm_bsp_sleep(1);
    b41a:	2001      	movs	r0, #1
    b41c:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    b41e:	9b04      	ldr	r3, [sp, #16]
    b420:	079b      	lsls	r3, r3, #30
    b422:	d528      	bpl.n	b476 <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    b424:	ab02      	add	r3, sp, #8
    b426:	1d9a      	adds	r2, r3, #6
    b428:	88db      	ldrh	r3, [r3, #6]
    b42a:	3301      	adds	r3, #1
    b42c:	b29b      	uxth	r3, r3
    b42e:	8013      	strh	r3, [r2, #0]
    b430:	8813      	ldrh	r3, [r2, #0]
    b432:	b29b      	uxth	r3, r3
    b434:	4a4e      	ldr	r2, [pc, #312]	; (b570 <hif_send+0x210>)
    b436:	4293      	cmp	r3, r2
    b438:	d82d      	bhi.n	b496 <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    b43a:	a904      	add	r1, sp, #16
    b43c:	484b      	ldr	r0, [pc, #300]	; (b56c <hif_send+0x20c>)
    b43e:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    b440:	2800      	cmp	r0, #0
    b442:	d128      	bne.n	b496 <hif_send+0x136>
			if(cnt >= 500) {
    b444:	ab02      	add	r3, sp, #8
    b446:	3306      	adds	r3, #6
    b448:	881b      	ldrh	r3, [r3, #0]
    b44a:	b29b      	uxth	r3, r3
    b44c:	22f4      	movs	r2, #244	; 0xf4
    b44e:	32ff      	adds	r2, #255	; 0xff
    b450:	4293      	cmp	r3, r2
    b452:	d9e4      	bls.n	b41e <hif_send+0xbe>
				if(cnt < 501) {
    b454:	ab02      	add	r3, sp, #8
    b456:	3306      	adds	r3, #6
    b458:	881b      	ldrh	r3, [r3, #0]
    b45a:	b29b      	uxth	r3, r3
    b45c:	3201      	adds	r2, #1
    b45e:	4293      	cmp	r3, r2
    b460:	d8db      	bhi.n	b41a <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    b462:	4846      	ldr	r0, [pc, #280]	; (b57c <hif_send+0x21c>)
    b464:	4b46      	ldr	r3, [pc, #280]	; (b580 <hif_send+0x220>)
    b466:	4798      	blx	r3
    b468:	4846      	ldr	r0, [pc, #280]	; (b584 <hif_send+0x224>)
    b46a:	4b47      	ldr	r3, [pc, #284]	; (b588 <hif_send+0x228>)
    b46c:	4798      	blx	r3
    b46e:	200d      	movs	r0, #13
    b470:	4b46      	ldr	r3, [pc, #280]	; (b58c <hif_send+0x22c>)
    b472:	4798      	blx	r3
    b474:	e7d1      	b.n	b41a <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    b476:	a905      	add	r1, sp, #20
    b478:	4845      	ldr	r0, [pc, #276]	; (b590 <hif_send+0x230>)
    b47a:	4b3e      	ldr	r3, [pc, #248]	; (b574 <hif_send+0x214>)
    b47c:	4798      	blx	r3
    b47e:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    b480:	d009      	beq.n	b496 <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    b482:	2300      	movs	r3, #0
    b484:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    b486:	4b43      	ldr	r3, [pc, #268]	; (b594 <hif_send+0x234>)
    b488:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    b48a:	0020      	movs	r0, r4
    b48c:	b009      	add	sp, #36	; 0x24
    b48e:	bc0c      	pop	{r2, r3}
    b490:	4692      	mov	sl, r2
    b492:	469b      	mov	fp, r3
    b494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    b496:	9b05      	ldr	r3, [sp, #20]
    b498:	2b00      	cmp	r3, #0
    b49a:	d03c      	beq.n	b516 <hif_send+0x1b6>
			u32CurrAddr = dma_addr;
    b49c:	9b05      	ldr	r3, [sp, #20]
    b49e:	9306      	str	r3, [sp, #24]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    b4a0:	9806      	ldr	r0, [sp, #24]
    b4a2:	2208      	movs	r2, #8
    b4a4:	a907      	add	r1, sp, #28
    b4a6:	4b3c      	ldr	r3, [pc, #240]	; (b598 <hif_send+0x238>)
    b4a8:	4798      	blx	r3
    b4aa:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    b4ac:	d1eb      	bne.n	b486 <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    b4ae:	9b06      	ldr	r3, [sp, #24]
    b4b0:	3308      	adds	r3, #8
    b4b2:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    b4b4:	9b01      	ldr	r3, [sp, #4]
    b4b6:	2b00      	cmp	r3, #0
    b4b8:	d00b      	beq.n	b4d2 <hif_send+0x172>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    b4ba:	9806      	ldr	r0, [sp, #24]
    b4bc:	9a00      	ldr	r2, [sp, #0]
    b4be:	0019      	movs	r1, r3
    b4c0:	4b35      	ldr	r3, [pc, #212]	; (b598 <hif_send+0x238>)
    b4c2:	4798      	blx	r3
    b4c4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    b4c6:	d1de      	bne.n	b486 <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    b4c8:	9b06      	ldr	r3, [sp, #24]
    b4ca:	9a00      	ldr	r2, [sp, #0]
    b4cc:	4694      	mov	ip, r2
    b4ce:	4463      	add	r3, ip
    b4d0:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    b4d2:	2f00      	cmp	r7, #0
    b4d4:	d00e      	beq.n	b4f4 <hif_send+0x194>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    b4d6:	9b06      	ldr	r3, [sp, #24]
    b4d8:	9a00      	ldr	r2, [sp, #0]
    b4da:	1aad      	subs	r5, r5, r2
    b4dc:	18ed      	adds	r5, r5, r3
    b4de:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    b4e0:	9806      	ldr	r0, [sp, #24]
    b4e2:	0032      	movs	r2, r6
    b4e4:	0039      	movs	r1, r7
    b4e6:	4b2c      	ldr	r3, [pc, #176]	; (b598 <hif_send+0x238>)
    b4e8:	4798      	blx	r3
    b4ea:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    b4ec:	d1cb      	bne.n	b486 <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    b4ee:	9b06      	ldr	r3, [sp, #24]
    b4f0:	18f3      	adds	r3, r6, r3
    b4f2:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    b4f4:	9b05      	ldr	r3, [sp, #20]
    b4f6:	009b      	lsls	r3, r3, #2
    b4f8:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    b4fa:	9b04      	ldr	r3, [sp, #16]
    b4fc:	2202      	movs	r2, #2
    b4fe:	4313      	orrs	r3, r2
    b500:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    b502:	9904      	ldr	r1, [sp, #16]
    b504:	4825      	ldr	r0, [pc, #148]	; (b59c <hif_send+0x23c>)
    b506:	4b18      	ldr	r3, [pc, #96]	; (b568 <hif_send+0x208>)
    b508:	4798      	blx	r3
    b50a:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    b50c:	d1bb      	bne.n	b486 <hif_send+0x126>
 	ret = hif_chip_sleep();
    b50e:	4b24      	ldr	r3, [pc, #144]	; (b5a0 <hif_send+0x240>)
    b510:	4798      	blx	r3
    b512:	0004      	movs	r4, r0
	return ret;
    b514:	e7b9      	b.n	b48a <hif_send+0x12a>
			ret = hif_chip_sleep();
    b516:	4b22      	ldr	r3, [pc, #136]	; (b5a0 <hif_send+0x240>)
    b518:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    b51a:	2403      	movs	r4, #3
    b51c:	4264      	negs	r4, r4
			goto ERR2;
    b51e:	e7b4      	b.n	b48a <hif_send+0x12a>
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
    b520:	22ca      	movs	r2, #202	; 0xca
    b522:	0052      	lsls	r2, r2, #1
    b524:	491f      	ldr	r1, [pc, #124]	; (b5a4 <hif_send+0x244>)
    b526:	4820      	ldr	r0, [pc, #128]	; (b5a8 <hif_send+0x248>)
    b528:	4b15      	ldr	r3, [pc, #84]	; (b580 <hif_send+0x220>)
    b52a:	4798      	blx	r3
    b52c:	481f      	ldr	r0, [pc, #124]	; (b5ac <hif_send+0x24c>)
    b52e:	4b16      	ldr	r3, [pc, #88]	; (b588 <hif_send+0x228>)
    b530:	4798      	blx	r3
    b532:	200d      	movs	r0, #13
    b534:	4b15      	ldr	r3, [pc, #84]	; (b58c <hif_send+0x22c>)
    b536:	4798      	blx	r3
            goto ERR2;
    b538:	e7a7      	b.n	b48a <hif_send+0x12a>
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
    b53a:	22cd      	movs	r2, #205	; 0xcd
    b53c:	0052      	lsls	r2, r2, #1
    b53e:	4919      	ldr	r1, [pc, #100]	; (b5a4 <hif_send+0x244>)
    b540:	4819      	ldr	r0, [pc, #100]	; (b5a8 <hif_send+0x248>)
    b542:	4c0f      	ldr	r4, [pc, #60]	; (b580 <hif_send+0x220>)
    b544:	47a0      	blx	r4
    b546:	ab07      	add	r3, sp, #28
    b548:	8859      	ldrh	r1, [r3, #2]
    b54a:	4a04      	ldr	r2, [pc, #16]	; (b55c <hif_send+0x1fc>)
    b54c:	4818      	ldr	r0, [pc, #96]	; (b5b0 <hif_send+0x250>)
    b54e:	47a0      	blx	r4
    b550:	200d      	movs	r0, #13
    b552:	4b0e      	ldr	r3, [pc, #56]	; (b58c <hif_send+0x22c>)
    b554:	4798      	blx	r3
        ret = M2M_ERR_SEND;
    b556:	2401      	movs	r4, #1
    b558:	4264      	negs	r4, r4
		goto ERR2;
    b55a:	e796      	b.n	b48a <hif_send+0x12a>
    b55c:	0000063c 	.word	0x0000063c
    b560:	0000b2d1 	.word	0x0000b2d1
    b564:	0000108c 	.word	0x0000108c
    b568:	0000c729 	.word	0x0000c729
    b56c:	00001078 	.word	0x00001078
    b570:	000003e7 	.word	0x000003e7
    b574:	0000c71d 	.word	0x0000c71d
    b578:	0000aec1 	.word	0x0000aec1
    b57c:	00019204 	.word	0x00019204
    b580:	00016be5 	.word	0x00016be5
    b584:	00019210 	.word	0x00019210
    b588:	00016d01 	.word	0x00016d01
    b58c:	00016c19 	.word	0x00016c19
    b590:	00150400 	.word	0x00150400
    b594:	0000b30d 	.word	0x0000b30d
    b598:	0000c79d 	.word	0x0000c79d
    b59c:	0000106c 	.word	0x0000106c
    b5a0:	0000b329 	.word	0x0000b329
    b5a4:	00018eac 	.word	0x00018eac
    b5a8:	00018e64 	.word	0x00018e64
    b5ac:	00019220 	.word	0x00019220
    b5b0:	00019240 	.word	0x00019240

0000b5b4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    b5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5b6:	46de      	mov	lr, fp
    b5b8:	4657      	mov	r7, sl
    b5ba:	464e      	mov	r6, r9
    b5bc:	b5c0      	push	{r6, r7, lr}
    b5be:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    b5c0:	2200      	movs	r2, #0
    b5c2:	4bd8      	ldr	r3, [pc, #864]	; (b924 <hif_handle_isr+0x370>)
    b5c4:	711a      	strb	r2, [r3, #4]
	sint8 ret = M2M_SUCCESS;	
    b5c6:	2600      	movs	r6, #0
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
    b5c8:	4699      	mov	r9, r3
    b5ca:	469a      	mov	sl, r3
    b5cc:	e148      	b.n	b860 <hif_handle_isr+0x2ac>
				gstrHifCxt.u32RxAddr = address;
    b5ce:	4bd5      	ldr	r3, [pc, #852]	; (b924 <hif_handle_isr+0x370>)
    b5d0:	9a05      	ldr	r2, [sp, #20]
    b5d2:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    b5d4:	465a      	mov	r2, fp
    b5d6:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    b5d8:	2204      	movs	r2, #4
    b5da:	a904      	add	r1, sp, #16
    b5dc:	9805      	ldr	r0, [sp, #20]
    b5de:	4bd2      	ldr	r3, [pc, #840]	; (b928 <hif_handle_isr+0x374>)
    b5e0:	4798      	blx	r3
    b5e2:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    b5e4:	466b      	mov	r3, sp
    b5e6:	8a5b      	ldrh	r3, [r3, #18]
    b5e8:	b29b      	uxth	r3, r3
    b5ea:	466a      	mov	r2, sp
    b5ec:	8253      	strh	r3, [r2, #18]
				if(M2M_SUCCESS != ret)
    b5ee:	2800      	cmp	r0, #0
    b5f0:	d134      	bne.n	b65c <hif_handle_isr+0xa8>
				if(strHif.u16Length != size)
    b5f2:	ab04      	add	r3, sp, #16
    b5f4:	885b      	ldrh	r3, [r3, #2]
    b5f6:	b29b      	uxth	r3, r3
    b5f8:	459b      	cmp	fp, r3
    b5fa:	d005      	beq.n	b608 <hif_handle_isr+0x54>
					if((size - strHif.u16Length) > 4)
    b5fc:	ab04      	add	r3, sp, #16
    b5fe:	885b      	ldrh	r3, [r3, #2]
    b600:	465a      	mov	r2, fp
    b602:	1ad3      	subs	r3, r2, r3
    b604:	2b04      	cmp	r3, #4
    b606:	dc36      	bgt.n	b676 <hif_handle_isr+0xc2>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    b608:	ab04      	add	r3, sp, #16
    b60a:	781b      	ldrb	r3, [r3, #0]
    b60c:	2b01      	cmp	r3, #1
    b60e:	d048      	beq.n	b6a2 <hif_handle_isr+0xee>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    b610:	ab04      	add	r3, sp, #16
    b612:	781b      	ldrb	r3, [r3, #0]
    b614:	2b02      	cmp	r3, #2
    b616:	d07b      	beq.n	b710 <hif_handle_isr+0x15c>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    b618:	ab04      	add	r3, sp, #16
    b61a:	781b      	ldrb	r3, [r3, #0]
    b61c:	2b04      	cmp	r3, #4
    b61e:	d100      	bne.n	b622 <hif_handle_isr+0x6e>
    b620:	e093      	b.n	b74a <hif_handle_isr+0x196>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    b622:	ab04      	add	r3, sp, #16
    b624:	781b      	ldrb	r3, [r3, #0]
    b626:	2b06      	cmp	r3, #6
    b628:	d100      	bne.n	b62c <hif_handle_isr+0x78>
    b62a:	e0ab      	b.n	b784 <hif_handle_isr+0x1d0>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    b62c:	ab04      	add	r3, sp, #16
    b62e:	781b      	ldrb	r3, [r3, #0]
    b630:	2b07      	cmp	r3, #7
    b632:	d100      	bne.n	b636 <hif_handle_isr+0x82>
    b634:	e0c3      	b.n	b7be <hif_handle_isr+0x20a>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    b636:	ab04      	add	r3, sp, #16
    b638:	781b      	ldrb	r3, [r3, #0]
    b63a:	2b05      	cmp	r3, #5
    b63c:	d100      	bne.n	b640 <hif_handle_isr+0x8c>
    b63e:	e0da      	b.n	b7f6 <hif_handle_isr+0x242>
					M2M_ERR("(hif) invalid group ID\n");
    b640:	4aba      	ldr	r2, [pc, #744]	; (b92c <hif_handle_isr+0x378>)
    b642:	49bb      	ldr	r1, [pc, #748]	; (b930 <hif_handle_isr+0x37c>)
    b644:	48bb      	ldr	r0, [pc, #748]	; (b934 <hif_handle_isr+0x380>)
    b646:	4bbc      	ldr	r3, [pc, #752]	; (b938 <hif_handle_isr+0x384>)
    b648:	4798      	blx	r3
    b64a:	48bc      	ldr	r0, [pc, #752]	; (b93c <hif_handle_isr+0x388>)
    b64c:	4bbc      	ldr	r3, [pc, #752]	; (b940 <hif_handle_isr+0x38c>)
    b64e:	4798      	blx	r3
    b650:	200d      	movs	r0, #13
    b652:	4bbc      	ldr	r3, [pc, #752]	; (b944 <hif_handle_isr+0x390>)
    b654:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    b656:	2406      	movs	r4, #6
    b658:	4264      	negs	r4, r4
    b65a:	e123      	b.n	b8a4 <hif_handle_isr+0x2f0>
					M2M_ERR("(hif) address bus fail\n");
    b65c:	22ea      	movs	r2, #234	; 0xea
    b65e:	0052      	lsls	r2, r2, #1
    b660:	49b3      	ldr	r1, [pc, #716]	; (b930 <hif_handle_isr+0x37c>)
    b662:	48b4      	ldr	r0, [pc, #720]	; (b934 <hif_handle_isr+0x380>)
    b664:	4bb4      	ldr	r3, [pc, #720]	; (b938 <hif_handle_isr+0x384>)
    b666:	4798      	blx	r3
    b668:	48b7      	ldr	r0, [pc, #732]	; (b948 <hif_handle_isr+0x394>)
    b66a:	4bb5      	ldr	r3, [pc, #724]	; (b940 <hif_handle_isr+0x38c>)
    b66c:	4798      	blx	r3
    b66e:	200d      	movs	r0, #13
    b670:	4bb4      	ldr	r3, [pc, #720]	; (b944 <hif_handle_isr+0x390>)
    b672:	4798      	blx	r3
    b674:	e116      	b.n	b8a4 <hif_handle_isr+0x2f0>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    b676:	22ee      	movs	r2, #238	; 0xee
    b678:	0052      	lsls	r2, r2, #1
    b67a:	49ad      	ldr	r1, [pc, #692]	; (b930 <hif_handle_isr+0x37c>)
    b67c:	48ad      	ldr	r0, [pc, #692]	; (b934 <hif_handle_isr+0x380>)
    b67e:	4cae      	ldr	r4, [pc, #696]	; (b938 <hif_handle_isr+0x384>)
    b680:	47a0      	blx	r4
    b682:	a904      	add	r1, sp, #16
    b684:	884a      	ldrh	r2, [r1, #2]
    b686:	b292      	uxth	r2, r2
    b688:	780b      	ldrb	r3, [r1, #0]
    b68a:	b2db      	uxtb	r3, r3
    b68c:	7849      	ldrb	r1, [r1, #1]
    b68e:	9100      	str	r1, [sp, #0]
    b690:	4659      	mov	r1, fp
    b692:	48ae      	ldr	r0, [pc, #696]	; (b94c <hif_handle_isr+0x398>)
    b694:	47a0      	blx	r4
    b696:	200d      	movs	r0, #13
    b698:	4baa      	ldr	r3, [pc, #680]	; (b944 <hif_handle_isr+0x390>)
    b69a:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    b69c:	2406      	movs	r4, #6
    b69e:	4264      	negs	r4, r4
    b6a0:	e100      	b.n	b8a4 <hif_handle_isr+0x2f0>
					if(gstrHifCxt.pfWifiCb)
    b6a2:	4ba0      	ldr	r3, [pc, #640]	; (b924 <hif_handle_isr+0x370>)
    b6a4:	691b      	ldr	r3, [r3, #16]
    b6a6:	2b00      	cmp	r3, #0
    b6a8:	d025      	beq.n	b6f6 <hif_handle_isr+0x142>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b6aa:	4b9e      	ldr	r3, [pc, #632]	; (b924 <hif_handle_isr+0x370>)
    b6ac:	691b      	ldr	r3, [r3, #16]
    b6ae:	aa04      	add	r2, sp, #16
    b6b0:	7850      	ldrb	r0, [r2, #1]
    b6b2:	b2c0      	uxtb	r0, r0
    b6b4:	8851      	ldrh	r1, [r2, #2]
    b6b6:	9a05      	ldr	r2, [sp, #20]
    b6b8:	3208      	adds	r2, #8
    b6ba:	3908      	subs	r1, #8
    b6bc:	b289      	uxth	r1, r1
    b6be:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    b6c0:	4b98      	ldr	r3, [pc, #608]	; (b924 <hif_handle_isr+0x370>)
    b6c2:	789b      	ldrb	r3, [r3, #2]
    b6c4:	2b00      	cmp	r3, #0
    b6c6:	d100      	bne.n	b6ca <hif_handle_isr+0x116>
    b6c8:	e0ca      	b.n	b860 <hif_handle_isr+0x2ac>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    b6ca:	2285      	movs	r2, #133	; 0x85
    b6cc:	0092      	lsls	r2, r2, #2
    b6ce:	4998      	ldr	r1, [pc, #608]	; (b930 <hif_handle_isr+0x37c>)
    b6d0:	4898      	ldr	r0, [pc, #608]	; (b934 <hif_handle_isr+0x380>)
    b6d2:	4c99      	ldr	r4, [pc, #612]	; (b938 <hif_handle_isr+0x384>)
    b6d4:	47a0      	blx	r4
    b6d6:	ab04      	add	r3, sp, #16
    b6d8:	7819      	ldrb	r1, [r3, #0]
    b6da:	b2c9      	uxtb	r1, r1
    b6dc:	785a      	ldrb	r2, [r3, #1]
    b6de:	b2d2      	uxtb	r2, r2
    b6e0:	489b      	ldr	r0, [pc, #620]	; (b950 <hif_handle_isr+0x39c>)
    b6e2:	47a0      	blx	r4
    b6e4:	200d      	movs	r0, #13
    b6e6:	4b97      	ldr	r3, [pc, #604]	; (b944 <hif_handle_isr+0x390>)
    b6e8:	4798      	blx	r3
					ret = hif_set_rx_done();
    b6ea:	4b9a      	ldr	r3, [pc, #616]	; (b954 <hif_handle_isr+0x3a0>)
    b6ec:	4798      	blx	r3
    b6ee:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    b6f0:	d000      	beq.n	b6f4 <hif_handle_isr+0x140>
    b6f2:	e0d7      	b.n	b8a4 <hif_handle_isr+0x2f0>
    b6f4:	e0b4      	b.n	b860 <hif_handle_isr+0x2ac>
						M2M_ERR("WIFI callback is not registered\n");
    b6f6:	22e8      	movs	r2, #232	; 0xe8
    b6f8:	32ff      	adds	r2, #255	; 0xff
    b6fa:	498d      	ldr	r1, [pc, #564]	; (b930 <hif_handle_isr+0x37c>)
    b6fc:	488d      	ldr	r0, [pc, #564]	; (b934 <hif_handle_isr+0x380>)
    b6fe:	4b8e      	ldr	r3, [pc, #568]	; (b938 <hif_handle_isr+0x384>)
    b700:	4798      	blx	r3
    b702:	4895      	ldr	r0, [pc, #596]	; (b958 <hif_handle_isr+0x3a4>)
    b704:	4b8e      	ldr	r3, [pc, #568]	; (b940 <hif_handle_isr+0x38c>)
    b706:	4798      	blx	r3
    b708:	200d      	movs	r0, #13
    b70a:	4b8e      	ldr	r3, [pc, #568]	; (b944 <hif_handle_isr+0x390>)
    b70c:	4798      	blx	r3
    b70e:	e7d7      	b.n	b6c0 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfIpCb)
    b710:	4b84      	ldr	r3, [pc, #528]	; (b924 <hif_handle_isr+0x370>)
    b712:	695b      	ldr	r3, [r3, #20]
    b714:	2b00      	cmp	r3, #0
    b716:	d00b      	beq.n	b730 <hif_handle_isr+0x17c>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b718:	4b82      	ldr	r3, [pc, #520]	; (b924 <hif_handle_isr+0x370>)
    b71a:	695b      	ldr	r3, [r3, #20]
    b71c:	aa04      	add	r2, sp, #16
    b71e:	7850      	ldrb	r0, [r2, #1]
    b720:	b2c0      	uxtb	r0, r0
    b722:	8851      	ldrh	r1, [r2, #2]
    b724:	9a05      	ldr	r2, [sp, #20]
    b726:	3208      	adds	r2, #8
    b728:	3908      	subs	r1, #8
    b72a:	b289      	uxth	r1, r1
    b72c:	4798      	blx	r3
    b72e:	e7c7      	b.n	b6c0 <hif_handle_isr+0x10c>
						M2M_ERR("Socket callback is not registered\n");
    b730:	22f7      	movs	r2, #247	; 0xf7
    b732:	0052      	lsls	r2, r2, #1
    b734:	497e      	ldr	r1, [pc, #504]	; (b930 <hif_handle_isr+0x37c>)
    b736:	487f      	ldr	r0, [pc, #508]	; (b934 <hif_handle_isr+0x380>)
    b738:	4b7f      	ldr	r3, [pc, #508]	; (b938 <hif_handle_isr+0x384>)
    b73a:	4798      	blx	r3
    b73c:	4887      	ldr	r0, [pc, #540]	; (b95c <hif_handle_isr+0x3a8>)
    b73e:	4b80      	ldr	r3, [pc, #512]	; (b940 <hif_handle_isr+0x38c>)
    b740:	4798      	blx	r3
    b742:	200d      	movs	r0, #13
    b744:	4b7f      	ldr	r3, [pc, #508]	; (b944 <hif_handle_isr+0x390>)
    b746:	4798      	blx	r3
    b748:	e7ba      	b.n	b6c0 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfOtaCb)
    b74a:	4b76      	ldr	r3, [pc, #472]	; (b924 <hif_handle_isr+0x370>)
    b74c:	699b      	ldr	r3, [r3, #24]
    b74e:	2b00      	cmp	r3, #0
    b750:	d00b      	beq.n	b76a <hif_handle_isr+0x1b6>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b752:	4b74      	ldr	r3, [pc, #464]	; (b924 <hif_handle_isr+0x370>)
    b754:	699b      	ldr	r3, [r3, #24]
    b756:	aa04      	add	r2, sp, #16
    b758:	7850      	ldrb	r0, [r2, #1]
    b75a:	b2c0      	uxtb	r0, r0
    b75c:	8851      	ldrh	r1, [r2, #2]
    b75e:	9a05      	ldr	r2, [sp, #20]
    b760:	3208      	adds	r2, #8
    b762:	3908      	subs	r1, #8
    b764:	b289      	uxth	r1, r1
    b766:	4798      	blx	r3
    b768:	e7aa      	b.n	b6c0 <hif_handle_isr+0x10c>
						M2M_ERR("Ota callback is not registered\n");
    b76a:	22f6      	movs	r2, #246	; 0xf6
    b76c:	32ff      	adds	r2, #255	; 0xff
    b76e:	4970      	ldr	r1, [pc, #448]	; (b930 <hif_handle_isr+0x37c>)
    b770:	4870      	ldr	r0, [pc, #448]	; (b934 <hif_handle_isr+0x380>)
    b772:	4b71      	ldr	r3, [pc, #452]	; (b938 <hif_handle_isr+0x384>)
    b774:	4798      	blx	r3
    b776:	487a      	ldr	r0, [pc, #488]	; (b960 <hif_handle_isr+0x3ac>)
    b778:	4b71      	ldr	r3, [pc, #452]	; (b940 <hif_handle_isr+0x38c>)
    b77a:	4798      	blx	r3
    b77c:	200d      	movs	r0, #13
    b77e:	4b71      	ldr	r3, [pc, #452]	; (b944 <hif_handle_isr+0x390>)
    b780:	4798      	blx	r3
    b782:	e79d      	b.n	b6c0 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfCryptoCb)
    b784:	4b67      	ldr	r3, [pc, #412]	; (b924 <hif_handle_isr+0x370>)
    b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b788:	2b00      	cmp	r3, #0
    b78a:	d00b      	beq.n	b7a4 <hif_handle_isr+0x1f0>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b78c:	4b65      	ldr	r3, [pc, #404]	; (b924 <hif_handle_isr+0x370>)
    b78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b790:	aa04      	add	r2, sp, #16
    b792:	7850      	ldrb	r0, [r2, #1]
    b794:	b2c0      	uxtb	r0, r0
    b796:	8851      	ldrh	r1, [r2, #2]
    b798:	9a05      	ldr	r2, [sp, #20]
    b79a:	3208      	adds	r2, #8
    b79c:	3908      	subs	r1, #8
    b79e:	b289      	uxth	r1, r1
    b7a0:	4798      	blx	r3
    b7a2:	e78d      	b.n	b6c0 <hif_handle_isr+0x10c>
						M2M_ERR("Crypto callback is not registered\n");
    b7a4:	22fe      	movs	r2, #254	; 0xfe
    b7a6:	0052      	lsls	r2, r2, #1
    b7a8:	4961      	ldr	r1, [pc, #388]	; (b930 <hif_handle_isr+0x37c>)
    b7aa:	4862      	ldr	r0, [pc, #392]	; (b934 <hif_handle_isr+0x380>)
    b7ac:	4b62      	ldr	r3, [pc, #392]	; (b938 <hif_handle_isr+0x384>)
    b7ae:	4798      	blx	r3
    b7b0:	486c      	ldr	r0, [pc, #432]	; (b964 <hif_handle_isr+0x3b0>)
    b7b2:	4b63      	ldr	r3, [pc, #396]	; (b940 <hif_handle_isr+0x38c>)
    b7b4:	4798      	blx	r3
    b7b6:	200d      	movs	r0, #13
    b7b8:	4b62      	ldr	r3, [pc, #392]	; (b944 <hif_handle_isr+0x390>)
    b7ba:	4798      	blx	r3
    b7bc:	e780      	b.n	b6c0 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfSigmaCb)
    b7be:	4b59      	ldr	r3, [pc, #356]	; (b924 <hif_handle_isr+0x370>)
    b7c0:	69db      	ldr	r3, [r3, #28]
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	d00b      	beq.n	b7de <hif_handle_isr+0x22a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b7c6:	4b57      	ldr	r3, [pc, #348]	; (b924 <hif_handle_isr+0x370>)
    b7c8:	69db      	ldr	r3, [r3, #28]
    b7ca:	aa04      	add	r2, sp, #16
    b7cc:	7850      	ldrb	r0, [r2, #1]
    b7ce:	b2c0      	uxtb	r0, r0
    b7d0:	8851      	ldrh	r1, [r2, #2]
    b7d2:	9a05      	ldr	r2, [sp, #20]
    b7d4:	3208      	adds	r2, #8
    b7d6:	3908      	subs	r1, #8
    b7d8:	b289      	uxth	r1, r1
    b7da:	4798      	blx	r3
    b7dc:	e770      	b.n	b6c0 <hif_handle_isr+0x10c>
						M2M_ERR("Sigma callback is not registered\n");
    b7de:	4a62      	ldr	r2, [pc, #392]	; (b968 <hif_handle_isr+0x3b4>)
    b7e0:	4953      	ldr	r1, [pc, #332]	; (b930 <hif_handle_isr+0x37c>)
    b7e2:	4854      	ldr	r0, [pc, #336]	; (b934 <hif_handle_isr+0x380>)
    b7e4:	4b54      	ldr	r3, [pc, #336]	; (b938 <hif_handle_isr+0x384>)
    b7e6:	4798      	blx	r3
    b7e8:	4860      	ldr	r0, [pc, #384]	; (b96c <hif_handle_isr+0x3b8>)
    b7ea:	4b55      	ldr	r3, [pc, #340]	; (b940 <hif_handle_isr+0x38c>)
    b7ec:	4798      	blx	r3
    b7ee:	200d      	movs	r0, #13
    b7f0:	4b54      	ldr	r3, [pc, #336]	; (b944 <hif_handle_isr+0x390>)
    b7f2:	4798      	blx	r3
    b7f4:	e764      	b.n	b6c0 <hif_handle_isr+0x10c>
				    if(gstrHifCxt.pfSslCb)
    b7f6:	4b4b      	ldr	r3, [pc, #300]	; (b924 <hif_handle_isr+0x370>)
    b7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b7fa:	2b00      	cmp	r3, #0
    b7fc:	d00b      	beq.n	b816 <hif_handle_isr+0x262>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b7fe:	4b49      	ldr	r3, [pc, #292]	; (b924 <hif_handle_isr+0x370>)
    b800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b802:	aa04      	add	r2, sp, #16
    b804:	7850      	ldrb	r0, [r2, #1]
    b806:	b2c0      	uxtb	r0, r0
    b808:	8851      	ldrh	r1, [r2, #2]
    b80a:	9a05      	ldr	r2, [sp, #20]
    b80c:	3208      	adds	r2, #8
    b80e:	3908      	subs	r1, #8
    b810:	b289      	uxth	r1, r1
    b812:	4798      	blx	r3
    b814:	e754      	b.n	b6c0 <hif_handle_isr+0x10c>
                        M2M_ERR("SSL callback is not registered\n");
    b816:	4a56      	ldr	r2, [pc, #344]	; (b970 <hif_handle_isr+0x3bc>)
    b818:	4945      	ldr	r1, [pc, #276]	; (b930 <hif_handle_isr+0x37c>)
    b81a:	4846      	ldr	r0, [pc, #280]	; (b934 <hif_handle_isr+0x380>)
    b81c:	4b46      	ldr	r3, [pc, #280]	; (b938 <hif_handle_isr+0x384>)
    b81e:	4798      	blx	r3
    b820:	4854      	ldr	r0, [pc, #336]	; (b974 <hif_handle_isr+0x3c0>)
    b822:	4b47      	ldr	r3, [pc, #284]	; (b940 <hif_handle_isr+0x38c>)
    b824:	4798      	blx	r3
    b826:	200d      	movs	r0, #13
    b828:	4b46      	ldr	r3, [pc, #280]	; (b944 <hif_handle_isr+0x390>)
    b82a:	4798      	blx	r3
    b82c:	e748      	b.n	b6c0 <hif_handle_isr+0x10c>
				M2M_ERR("(hif) Wrong Size\n");
    b82e:	4a52      	ldr	r2, [pc, #328]	; (b978 <hif_handle_isr+0x3c4>)
    b830:	493f      	ldr	r1, [pc, #252]	; (b930 <hif_handle_isr+0x37c>)
    b832:	4840      	ldr	r0, [pc, #256]	; (b934 <hif_handle_isr+0x380>)
    b834:	4b40      	ldr	r3, [pc, #256]	; (b938 <hif_handle_isr+0x384>)
    b836:	4798      	blx	r3
    b838:	4850      	ldr	r0, [pc, #320]	; (b97c <hif_handle_isr+0x3c8>)
    b83a:	4b41      	ldr	r3, [pc, #260]	; (b940 <hif_handle_isr+0x38c>)
    b83c:	4798      	blx	r3
    b83e:	200d      	movs	r0, #13
    b840:	4b40      	ldr	r3, [pc, #256]	; (b944 <hif_handle_isr+0x390>)
    b842:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    b844:	2402      	movs	r4, #2
    b846:	4264      	negs	r4, r4
    b848:	e02c      	b.n	b8a4 <hif_handle_isr+0x2f0>
			M2M_ERR("(hif) False interrupt %lx",reg);
    b84a:	4a4d      	ldr	r2, [pc, #308]	; (b980 <hif_handle_isr+0x3cc>)
    b84c:	4938      	ldr	r1, [pc, #224]	; (b930 <hif_handle_isr+0x37c>)
    b84e:	4839      	ldr	r0, [pc, #228]	; (b934 <hif_handle_isr+0x380>)
    b850:	4c39      	ldr	r4, [pc, #228]	; (b938 <hif_handle_isr+0x384>)
    b852:	47a0      	blx	r4
    b854:	9903      	ldr	r1, [sp, #12]
    b856:	484b      	ldr	r0, [pc, #300]	; (b984 <hif_handle_isr+0x3d0>)
    b858:	47a0      	blx	r4
    b85a:	200d      	movs	r0, #13
    b85c:	4b39      	ldr	r3, [pc, #228]	; (b944 <hif_handle_isr+0x390>)
    b85e:	4798      	blx	r3
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
    b860:	464b      	mov	r3, r9
    b862:	78db      	ldrb	r3, [r3, #3]
    b864:	2b00      	cmp	r3, #0
    b866:	d100      	bne.n	b86a <hif_handle_isr+0x2b6>
    b868:	e0b1      	b.n	b9ce <hif_handle_isr+0x41a>
    b86a:	4653      	mov	r3, sl
    b86c:	791b      	ldrb	r3, [r3, #4]
    b86e:	2b00      	cmp	r3, #0
    b870:	d000      	beq.n	b874 <hif_handle_isr+0x2c0>
    b872:	e0ac      	b.n	b9ce <hif_handle_isr+0x41a>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
    b874:	2000      	movs	r0, #0
    b876:	4c44      	ldr	r4, [pc, #272]	; (b988 <hif_handle_isr+0x3d4>)
    b878:	47a0      	blx	r4
#endif

		gstrHifCxt.u8Interrupt--;
    b87a:	4a2a      	ldr	r2, [pc, #168]	; (b924 <hif_handle_isr+0x370>)
    b87c:	78d3      	ldrb	r3, [r2, #3]
    b87e:	3b01      	subs	r3, #1
    b880:	b2db      	uxtb	r3, r3
    b882:	70d3      	strb	r3, [r2, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
    b884:	2001      	movs	r0, #1
    b886:	47a0      	blx	r4
    b888:	2504      	movs	r5, #4
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    b88a:	4f40      	ldr	r7, [pc, #256]	; (b98c <hif_handle_isr+0x3d8>)
    b88c:	e01a      	b.n	b8c4 <hif_handle_isr+0x310>
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
    b88e:	4a40      	ldr	r2, [pc, #256]	; (b990 <hif_handle_isr+0x3dc>)
    b890:	4927      	ldr	r1, [pc, #156]	; (b930 <hif_handle_isr+0x37c>)
    b892:	4828      	ldr	r0, [pc, #160]	; (b934 <hif_handle_isr+0x380>)
    b894:	4b28      	ldr	r3, [pc, #160]	; (b938 <hif_handle_isr+0x384>)
    b896:	4798      	blx	r3
    b898:	483e      	ldr	r0, [pc, #248]	; (b994 <hif_handle_isr+0x3e0>)
    b89a:	4b29      	ldr	r3, [pc, #164]	; (b940 <hif_handle_isr+0x38c>)
    b89c:	4798      	blx	r3
    b89e:	200d      	movs	r0, #13
    b8a0:	4b28      	ldr	r3, [pc, #160]	; (b944 <hif_handle_isr+0x390>)
    b8a2:	4798      	blx	r3
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
				if(!retries)
    b8a4:	2d00      	cmp	r5, #0
    b8a6:	d100      	bne.n	b8aa <hif_handle_isr+0x2f6>
    b8a8:	e084      	b.n	b9b4 <hif_handle_isr+0x400>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
					break;
				}
				else
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
    b8aa:	4a3b      	ldr	r2, [pc, #236]	; (b998 <hif_handle_isr+0x3e4>)
    b8ac:	493b      	ldr	r1, [pc, #236]	; (b99c <hif_handle_isr+0x3e8>)
    b8ae:	4821      	ldr	r0, [pc, #132]	; (b934 <hif_handle_isr+0x380>)
    b8b0:	4e21      	ldr	r6, [pc, #132]	; (b938 <hif_handle_isr+0x384>)
    b8b2:	47b0      	blx	r6
    b8b4:	002a      	movs	r2, r5
    b8b6:	0021      	movs	r1, r4
    b8b8:	4839      	ldr	r0, [pc, #228]	; (b9a0 <hif_handle_isr+0x3ec>)
    b8ba:	47b0      	blx	r6
    b8bc:	200d      	movs	r0, #13
    b8be:	4b21      	ldr	r3, [pc, #132]	; (b944 <hif_handle_isr+0x390>)
    b8c0:	4798      	blx	r3
    b8c2:	3d01      	subs	r5, #1
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    b8c4:	a903      	add	r1, sp, #12
    b8c6:	4837      	ldr	r0, [pc, #220]	; (b9a4 <hif_handle_isr+0x3f0>)
    b8c8:	47b8      	blx	r7
    b8ca:	0004      	movs	r4, r0
    b8cc:	1e06      	subs	r6, r0, #0
	if(M2M_SUCCESS == ret)
    b8ce:	d1de      	bne.n	b88e <hif_handle_isr+0x2da>
		if(reg & 0x1)	/* New interrupt has been received */
    b8d0:	9903      	ldr	r1, [sp, #12]
    b8d2:	07cb      	lsls	r3, r1, #31
    b8d4:	d5b9      	bpl.n	b84a <hif_handle_isr+0x296>
			reg &= ~NBIT0;
    b8d6:	2301      	movs	r3, #1
    b8d8:	4399      	bics	r1, r3
    b8da:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b8dc:	4831      	ldr	r0, [pc, #196]	; (b9a4 <hif_handle_isr+0x3f0>)
    b8de:	4b32      	ldr	r3, [pc, #200]	; (b9a8 <hif_handle_isr+0x3f4>)
    b8e0:	4798      	blx	r3
    b8e2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    b8e4:	d1de      	bne.n	b8a4 <hif_handle_isr+0x2f0>
			gstrHifCxt.u8HifRXDone = 1;
    b8e6:	2201      	movs	r2, #1
    b8e8:	4b0e      	ldr	r3, [pc, #56]	; (b924 <hif_handle_isr+0x370>)
    b8ea:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    b8ec:	9b03      	ldr	r3, [sp, #12]
    b8ee:	049b      	lsls	r3, r3, #18
    b8f0:	0d1b      	lsrs	r3, r3, #20
    b8f2:	469b      	mov	fp, r3
			if (size > 0) {
    b8f4:	d09b      	beq.n	b82e <hif_handle_isr+0x27a>
				uint32 address = 0;
    b8f6:	2300      	movs	r3, #0
    b8f8:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    b8fa:	a905      	add	r1, sp, #20
    b8fc:	482b      	ldr	r0, [pc, #172]	; (b9ac <hif_handle_isr+0x3f8>)
    b8fe:	4b23      	ldr	r3, [pc, #140]	; (b98c <hif_handle_isr+0x3d8>)
    b900:	4798      	blx	r3
    b902:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    b904:	d100      	bne.n	b908 <hif_handle_isr+0x354>
    b906:	e662      	b.n	b5ce <hif_handle_isr+0x1a>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    b908:	22cc      	movs	r2, #204	; 0xcc
    b90a:	32ff      	adds	r2, #255	; 0xff
    b90c:	4908      	ldr	r1, [pc, #32]	; (b930 <hif_handle_isr+0x37c>)
    b90e:	4809      	ldr	r0, [pc, #36]	; (b934 <hif_handle_isr+0x380>)
    b910:	4b09      	ldr	r3, [pc, #36]	; (b938 <hif_handle_isr+0x384>)
    b912:	4798      	blx	r3
    b914:	4826      	ldr	r0, [pc, #152]	; (b9b0 <hif_handle_isr+0x3fc>)
    b916:	4b0a      	ldr	r3, [pc, #40]	; (b940 <hif_handle_isr+0x38c>)
    b918:	4798      	blx	r3
    b91a:	200d      	movs	r0, #13
    b91c:	4b09      	ldr	r3, [pc, #36]	; (b944 <hif_handle_isr+0x390>)
    b91e:	4798      	blx	r3
    b920:	e7c0      	b.n	b8a4 <hif_handle_isr+0x2f0>
    b922:	46c0      	nop			; (mov r8, r8)
    b924:	20000fd4 	.word	0x20000fd4
    b928:	0000c735 	.word	0x0000c735
    b92c:	0000020e 	.word	0x0000020e
    b930:	00018eb8 	.word	0x00018eb8
    b934:	00018e64 	.word	0x00018e64
    b938:	00016be5 	.word	0x00016be5
    b93c:	00019034 	.word	0x00019034
    b940:	00016d01 	.word	0x00016d01
    b944:	00016c19 	.word	0x00016c19
    b948:	00018f10 	.word	0x00018f10
    b94c:	00018f28 	.word	0x00018f28
    b950:	0001904c 	.word	0x0001904c
    b954:	0000b28d 	.word	0x0000b28d
    b958:	00018f68 	.word	0x00018f68
    b95c:	00018f88 	.word	0x00018f88
    b960:	00018fac 	.word	0x00018fac
    b964:	00018fcc 	.word	0x00018fcc
    b968:	00000203 	.word	0x00000203
    b96c:	00018ff0 	.word	0x00018ff0
    b970:	0000020a 	.word	0x0000020a
    b974:	00019014 	.word	0x00019014
    b978:	0000021b 	.word	0x0000021b
    b97c:	00019078 	.word	0x00019078
    b980:	00000223 	.word	0x00000223
    b984:	0001908c 	.word	0x0001908c
    b988:	0000af59 	.word	0x0000af59
    b98c:	0000c71d 	.word	0x0000c71d
    b990:	0000022b 	.word	0x0000022b
    b994:	000190a8 	.word	0x000190a8
    b998:	0000026a 	.word	0x0000026a
    b99c:	00018ec0 	.word	0x00018ec0
    b9a0:	00019114 	.word	0x00019114
    b9a4:	00001070 	.word	0x00001070
    b9a8:	0000c729 	.word	0x0000c729
    b9ac:	00001084 	.word	0x00001084
    b9b0:	00018eec 	.word	0x00018eec
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
    b9b4:	4a09      	ldr	r2, [pc, #36]	; (b9dc <hif_handle_isr+0x428>)
    b9b6:	490a      	ldr	r1, [pc, #40]	; (b9e0 <hif_handle_isr+0x42c>)
    b9b8:	480a      	ldr	r0, [pc, #40]	; (b9e4 <hif_handle_isr+0x430>)
    b9ba:	4d0b      	ldr	r5, [pc, #44]	; (b9e8 <hif_handle_isr+0x434>)
    b9bc:	47a8      	blx	r5
    b9be:	0021      	movs	r1, r4
    b9c0:	480a      	ldr	r0, [pc, #40]	; (b9ec <hif_handle_isr+0x438>)
    b9c2:	47a8      	blx	r5
    b9c4:	200d      	movs	r0, #13
    b9c6:	4b0a      	ldr	r3, [pc, #40]	; (b9f0 <hif_handle_isr+0x43c>)
    b9c8:	4798      	blx	r3
					break;
    b9ca:	0026      	movs	r6, r4
    b9cc:	e748      	b.n	b860 <hif_handle_isr+0x2ac>
			}
		}
	}

	return ret;
}
    b9ce:	0030      	movs	r0, r6
    b9d0:	b006      	add	sp, #24
    b9d2:	bc1c      	pop	{r2, r3, r4}
    b9d4:	4691      	mov	r9, r2
    b9d6:	469a      	mov	sl, r3
    b9d8:	46a3      	mov	fp, r4
    b9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9dc:	00000266 	.word	0x00000266
    b9e0:	00018ec0 	.word	0x00018ec0
    b9e4:	00018e64 	.word	0x00018e64
    b9e8:	00016be5 	.word	0x00016be5
    b9ec:	000190cc 	.word	0x000190cc
    b9f0:	00016c19 	.word	0x00016c19

0000b9f4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    b9f4:	b570      	push	{r4, r5, r6, lr}
    b9f6:	0014      	movs	r4, r2
    b9f8:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    b9fa:	2800      	cmp	r0, #0
    b9fc:	d003      	beq.n	ba06 <hif_receive+0x12>
    b9fe:	2900      	cmp	r1, #0
    ba00:	d001      	beq.n	ba06 <hif_receive+0x12>
    ba02:	2a00      	cmp	r2, #0
    ba04:	d112      	bne.n	ba2c <hif_receive+0x38>
	{
		if(isDone)
    ba06:	2d00      	cmp	r5, #0
    ba08:	d002      	beq.n	ba10 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    ba0a:	4b27      	ldr	r3, [pc, #156]	; (baa8 <hif_receive+0xb4>)
    ba0c:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    ba0e:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    ba10:	4a26      	ldr	r2, [pc, #152]	; (baac <hif_receive+0xb8>)
    ba12:	4927      	ldr	r1, [pc, #156]	; (bab0 <hif_receive+0xbc>)
    ba14:	4827      	ldr	r0, [pc, #156]	; (bab4 <hif_receive+0xc0>)
    ba16:	4b28      	ldr	r3, [pc, #160]	; (bab8 <hif_receive+0xc4>)
    ba18:	4798      	blx	r3
    ba1a:	4828      	ldr	r0, [pc, #160]	; (babc <hif_receive+0xc8>)
    ba1c:	4b28      	ldr	r3, [pc, #160]	; (bac0 <hif_receive+0xcc>)
    ba1e:	4798      	blx	r3
    ba20:	200d      	movs	r0, #13
    ba22:	4b28      	ldr	r3, [pc, #160]	; (bac4 <hif_receive+0xd0>)
    ba24:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    ba26:	200c      	movs	r0, #12
    ba28:	4240      	negs	r0, r0
    ba2a:	e7f0      	b.n	ba0e <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    ba2c:	4b26      	ldr	r3, [pc, #152]	; (bac8 <hif_receive+0xd4>)
    ba2e:	68db      	ldr	r3, [r3, #12]
    ba30:	429a      	cmp	r2, r3
    ba32:	d81a      	bhi.n	ba6a <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    ba34:	4b24      	ldr	r3, [pc, #144]	; (bac8 <hif_receive+0xd4>)
    ba36:	689b      	ldr	r3, [r3, #8]
    ba38:	4298      	cmp	r0, r3
    ba3a:	d326      	bcc.n	ba8a <hif_receive+0x96>
    ba3c:	1886      	adds	r6, r0, r2
    ba3e:	4a22      	ldr	r2, [pc, #136]	; (bac8 <hif_receive+0xd4>)
    ba40:	6893      	ldr	r3, [r2, #8]
    ba42:	68d2      	ldr	r2, [r2, #12]
    ba44:	189b      	adds	r3, r3, r2
    ba46:	429e      	cmp	r6, r3
    ba48:	d81f      	bhi.n	ba8a <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    ba4a:	0022      	movs	r2, r4
    ba4c:	4b1f      	ldr	r3, [pc, #124]	; (bacc <hif_receive+0xd8>)
    ba4e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    ba50:	2800      	cmp	r0, #0
    ba52:	d1dc      	bne.n	ba0e <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    ba54:	4a1c      	ldr	r2, [pc, #112]	; (bac8 <hif_receive+0xd4>)
    ba56:	6893      	ldr	r3, [r2, #8]
    ba58:	68d2      	ldr	r2, [r2, #12]
    ba5a:	189b      	adds	r3, r3, r2
    ba5c:	429e      	cmp	r6, r3
    ba5e:	d001      	beq.n	ba64 <hif_receive+0x70>
    ba60:	2d00      	cmp	r5, #0
    ba62:	d0d4      	beq.n	ba0e <hif_receive+0x1a>
		ret = hif_set_rx_done();
    ba64:	4b10      	ldr	r3, [pc, #64]	; (baa8 <hif_receive+0xb4>)
    ba66:	4798      	blx	r3
    ba68:	e7d1      	b.n	ba0e <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    ba6a:	4a19      	ldr	r2, [pc, #100]	; (bad0 <hif_receive+0xdc>)
    ba6c:	4910      	ldr	r1, [pc, #64]	; (bab0 <hif_receive+0xbc>)
    ba6e:	4811      	ldr	r0, [pc, #68]	; (bab4 <hif_receive+0xc0>)
    ba70:	4d11      	ldr	r5, [pc, #68]	; (bab8 <hif_receive+0xc4>)
    ba72:	47a8      	blx	r5
    ba74:	4b14      	ldr	r3, [pc, #80]	; (bac8 <hif_receive+0xd4>)
    ba76:	68da      	ldr	r2, [r3, #12]
    ba78:	0021      	movs	r1, r4
    ba7a:	4816      	ldr	r0, [pc, #88]	; (bad4 <hif_receive+0xe0>)
    ba7c:	47a8      	blx	r5
    ba7e:	200d      	movs	r0, #13
    ba80:	4b10      	ldr	r3, [pc, #64]	; (bac4 <hif_receive+0xd0>)
    ba82:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    ba84:	200c      	movs	r0, #12
    ba86:	4240      	negs	r0, r0
		goto ERR1;
    ba88:	e7c1      	b.n	ba0e <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
    ba8a:	4a13      	ldr	r2, [pc, #76]	; (bad8 <hif_receive+0xe4>)
    ba8c:	4908      	ldr	r1, [pc, #32]	; (bab0 <hif_receive+0xbc>)
    ba8e:	4809      	ldr	r0, [pc, #36]	; (bab4 <hif_receive+0xc0>)
    ba90:	4b09      	ldr	r3, [pc, #36]	; (bab8 <hif_receive+0xc4>)
    ba92:	4798      	blx	r3
    ba94:	4811      	ldr	r0, [pc, #68]	; (badc <hif_receive+0xe8>)
    ba96:	4b0a      	ldr	r3, [pc, #40]	; (bac0 <hif_receive+0xcc>)
    ba98:	4798      	blx	r3
    ba9a:	200d      	movs	r0, #13
    ba9c:	4b09      	ldr	r3, [pc, #36]	; (bac4 <hif_receive+0xd0>)
    ba9e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    baa0:	200c      	movs	r0, #12
    baa2:	4240      	negs	r0, r0
		goto ERR1;
    baa4:	e7b3      	b.n	ba0e <hif_receive+0x1a>
    baa6:	46c0      	nop			; (mov r8, r8)
    baa8:	0000b28d 	.word	0x0000b28d
    baac:	0000028b 	.word	0x0000028b
    bab0:	00018ed0 	.word	0x00018ed0
    bab4:	00018e64 	.word	0x00018e64
    bab8:	00016be5 	.word	0x00016be5
    babc:	0001914c 	.word	0x0001914c
    bac0:	00016d01 	.word	0x00016d01
    bac4:	00016c19 	.word	0x00016c19
    bac8:	20000fd4 	.word	0x20000fd4
    bacc:	0000c735 	.word	0x0000c735
    bad0:	00000293 	.word	0x00000293
    bad4:	0001916c 	.word	0x0001916c
    bad8:	00000299 	.word	0x00000299
    badc:	000191b4 	.word	0x000191b4

0000bae0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    bae0:	b570      	push	{r4, r5, r6, lr}
    bae2:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    bae4:	2807      	cmp	r0, #7
    bae6:	d81f      	bhi.n	bb28 <hif_register_cb+0x48>
    bae8:	0083      	lsls	r3, r0, #2
    baea:	4a16      	ldr	r2, [pc, #88]	; (bb44 <hif_register_cb+0x64>)
    baec:	58d3      	ldr	r3, [r2, r3]
    baee:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    baf0:	4b15      	ldr	r3, [pc, #84]	; (bb48 <hif_register_cb+0x68>)
    baf2:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    baf4:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    baf6:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    baf8:	4b13      	ldr	r3, [pc, #76]	; (bb48 <hif_register_cb+0x68>)
    bafa:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    bafc:	2000      	movs	r0, #0
			break;
    bafe:	e7fa      	b.n	baf6 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    bb00:	4b11      	ldr	r3, [pc, #68]	; (bb48 <hif_register_cb+0x68>)
    bb02:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    bb04:	2000      	movs	r0, #0
			break;
    bb06:	e7f6      	b.n	baf6 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    bb08:	4b0f      	ldr	r3, [pc, #60]	; (bb48 <hif_register_cb+0x68>)
    bb0a:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    bb0c:	2000      	movs	r0, #0
			break;
    bb0e:	e7f2      	b.n	baf6 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    bb10:	4b0d      	ldr	r3, [pc, #52]	; (bb48 <hif_register_cb+0x68>)
    bb12:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    bb14:	2000      	movs	r0, #0
			break;
    bb16:	e7ee      	b.n	baf6 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    bb18:	4b0b      	ldr	r3, [pc, #44]	; (bb48 <hif_register_cb+0x68>)
    bb1a:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    bb1c:	2000      	movs	r0, #0
			break;
    bb1e:	e7ea      	b.n	baf6 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    bb20:	4b09      	ldr	r3, [pc, #36]	; (bb48 <hif_register_cb+0x68>)
    bb22:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    bb24:	2000      	movs	r0, #0
			break;
    bb26:	e7e6      	b.n	baf6 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    bb28:	4a08      	ldr	r2, [pc, #32]	; (bb4c <hif_register_cb+0x6c>)
    bb2a:	4909      	ldr	r1, [pc, #36]	; (bb50 <hif_register_cb+0x70>)
    bb2c:	4809      	ldr	r0, [pc, #36]	; (bb54 <hif_register_cb+0x74>)
    bb2e:	4d0a      	ldr	r5, [pc, #40]	; (bb58 <hif_register_cb+0x78>)
    bb30:	47a8      	blx	r5
    bb32:	0021      	movs	r1, r4
    bb34:	4809      	ldr	r0, [pc, #36]	; (bb5c <hif_register_cb+0x7c>)
    bb36:	47a8      	blx	r5
    bb38:	200d      	movs	r0, #13
    bb3a:	4b09      	ldr	r3, [pc, #36]	; (bb60 <hif_register_cb+0x80>)
    bb3c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    bb3e:	200c      	movs	r0, #12
    bb40:	4240      	negs	r0, r0
			break;
    bb42:	e7d8      	b.n	baf6 <hif_register_cb+0x16>
    bb44:	00018e8c 	.word	0x00018e8c
    bb48:	20000fd4 	.word	0x20000fd4
    bb4c:	000002d1 	.word	0x000002d1
    bb50:	00018edc 	.word	0x00018edc
    bb54:	00018e64 	.word	0x00018e64
    bb58:	00016be5 	.word	0x00016be5
    bb5c:	000191f8 	.word	0x000191f8
    bb60:	00016c19 	.word	0x00016c19

0000bb64 <hif_init>:
{
    bb64:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    bb66:	222c      	movs	r2, #44	; 0x2c
    bb68:	2100      	movs	r1, #0
    bb6a:	4806      	ldr	r0, [pc, #24]	; (bb84 <hif_init+0x20>)
    bb6c:	4b06      	ldr	r3, [pc, #24]	; (bb88 <hif_init+0x24>)
    bb6e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    bb70:	4806      	ldr	r0, [pc, #24]	; (bb8c <hif_init+0x28>)
    bb72:	4b07      	ldr	r3, [pc, #28]	; (bb90 <hif_init+0x2c>)
    bb74:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    bb76:	4907      	ldr	r1, [pc, #28]	; (bb94 <hif_init+0x30>)
    bb78:	2003      	movs	r0, #3
    bb7a:	4b07      	ldr	r3, [pc, #28]	; (bb98 <hif_init+0x34>)
    bb7c:	4798      	blx	r3
}
    bb7e:	2000      	movs	r0, #0
    bb80:	bd10      	pop	{r4, pc}
    bb82:	46c0      	nop			; (mov r8, r8)
    bb84:	20000fd4 	.word	0x20000fd4
    bb88:	0000b24d 	.word	0x0000b24d
    bb8c:	0000b279 	.word	0x0000b279
    bb90:	0000af01 	.word	0x0000af01
    bb94:	0000b289 	.word	0x0000b289
    bb98:	0000bae1 	.word	0x0000bae1

0000bb9c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    bb9c:	b530      	push	{r4, r5, lr}
    bb9e:	b09f      	sub	sp, #124	; 0x7c
    bba0:	0004      	movs	r4, r0
    bba2:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    bba4:	282c      	cmp	r0, #44	; 0x2c
    bba6:	d02f      	beq.n	bc08 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    bba8:	281b      	cmp	r0, #27
    bbaa:	d03d      	beq.n	bc28 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    bbac:	2806      	cmp	r0, #6
    bbae:	d04b      	beq.n	bc48 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    bbb0:	280e      	cmp	r0, #14
    bbb2:	d027      	beq.n	bc04 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    bbb4:	2832      	cmp	r0, #50	; 0x32
    bbb6:	d057      	beq.n	bc68 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    bbb8:	282f      	cmp	r0, #47	; 0x2f
    bbba:	d065      	beq.n	bc88 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    bbbc:	2834      	cmp	r0, #52	; 0x34
    bbbe:	d100      	bne.n	bbc2 <m2m_wifi_cb+0x26>
    bbc0:	e077      	b.n	bcb2 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    bbc2:	2811      	cmp	r0, #17
    bbc4:	d100      	bne.n	bbc8 <m2m_wifi_cb+0x2c>
    bbc6:	e096      	b.n	bcf6 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    bbc8:	2813      	cmp	r0, #19
    bbca:	d100      	bne.n	bbce <m2m_wifi_cb+0x32>
    bbcc:	e0ac      	b.n	bd28 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    bbce:	2804      	cmp	r0, #4
    bbd0:	d100      	bne.n	bbd4 <m2m_wifi_cb+0x38>
    bbd2:	e0bb      	b.n	bd4c <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    bbd4:	2865      	cmp	r0, #101	; 0x65
    bbd6:	d100      	bne.n	bbda <m2m_wifi_cb+0x3e>
    bbd8:	e0ca      	b.n	bd70 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    bbda:	2809      	cmp	r0, #9
    bbdc:	d100      	bne.n	bbe0 <m2m_wifi_cb+0x44>
    bbde:	e0d9      	b.n	bd94 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    bbe0:	282a      	cmp	r0, #42	; 0x2a
    bbe2:	d100      	bne.n	bbe6 <m2m_wifi_cb+0x4a>
    bbe4:	e0e8      	b.n	bdb8 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    bbe6:	2820      	cmp	r0, #32
    bbe8:	d100      	bne.n	bbec <m2m_wifi_cb+0x50>
    bbea:	e0f7      	b.n	bddc <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    bbec:	2224      	movs	r2, #36	; 0x24
    bbee:	32ff      	adds	r2, #255	; 0xff
    bbf0:	4989      	ldr	r1, [pc, #548]	; (be18 <m2m_wifi_cb+0x27c>)
    bbf2:	488a      	ldr	r0, [pc, #552]	; (be1c <m2m_wifi_cb+0x280>)
    bbf4:	4d8a      	ldr	r5, [pc, #552]	; (be20 <m2m_wifi_cb+0x284>)
    bbf6:	47a8      	blx	r5
    bbf8:	0021      	movs	r1, r4
    bbfa:	488a      	ldr	r0, [pc, #552]	; (be24 <m2m_wifi_cb+0x288>)
    bbfc:	47a8      	blx	r5
    bbfe:	200d      	movs	r0, #13
    bc00:	4b89      	ldr	r3, [pc, #548]	; (be28 <m2m_wifi_cb+0x28c>)
    bc02:	4798      	blx	r3
	}
}
    bc04:	b01f      	add	sp, #124	; 0x7c
    bc06:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    bc08:	2300      	movs	r3, #0
    bc0a:	2204      	movs	r2, #4
    bc0c:	a903      	add	r1, sp, #12
    bc0e:	0028      	movs	r0, r5
    bc10:	4c86      	ldr	r4, [pc, #536]	; (be2c <m2m_wifi_cb+0x290>)
    bc12:	47a0      	blx	r4
    bc14:	2800      	cmp	r0, #0
    bc16:	d1f5      	bne.n	bc04 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bc18:	4b85      	ldr	r3, [pc, #532]	; (be30 <m2m_wifi_cb+0x294>)
    bc1a:	681b      	ldr	r3, [r3, #0]
    bc1c:	2b00      	cmp	r3, #0
    bc1e:	d0f1      	beq.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    bc20:	a903      	add	r1, sp, #12
    bc22:	302c      	adds	r0, #44	; 0x2c
    bc24:	4798      	blx	r3
    bc26:	e7ed      	b.n	bc04 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    bc28:	2300      	movs	r3, #0
    bc2a:	2208      	movs	r2, #8
    bc2c:	a903      	add	r1, sp, #12
    bc2e:	0028      	movs	r0, r5
    bc30:	4c7e      	ldr	r4, [pc, #504]	; (be2c <m2m_wifi_cb+0x290>)
    bc32:	47a0      	blx	r4
    bc34:	2800      	cmp	r0, #0
    bc36:	d1e5      	bne.n	bc04 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bc38:	4b7d      	ldr	r3, [pc, #500]	; (be30 <m2m_wifi_cb+0x294>)
    bc3a:	681b      	ldr	r3, [r3, #0]
    bc3c:	2b00      	cmp	r3, #0
    bc3e:	d0e1      	beq.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    bc40:	a903      	add	r1, sp, #12
    bc42:	301b      	adds	r0, #27
    bc44:	4798      	blx	r3
    bc46:	e7dd      	b.n	bc04 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    bc48:	2301      	movs	r3, #1
    bc4a:	2230      	movs	r2, #48	; 0x30
    bc4c:	a903      	add	r1, sp, #12
    bc4e:	0028      	movs	r0, r5
    bc50:	4c76      	ldr	r4, [pc, #472]	; (be2c <m2m_wifi_cb+0x290>)
    bc52:	47a0      	blx	r4
    bc54:	2800      	cmp	r0, #0
    bc56:	d1d5      	bne.n	bc04 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    bc58:	4b75      	ldr	r3, [pc, #468]	; (be30 <m2m_wifi_cb+0x294>)
    bc5a:	681b      	ldr	r3, [r3, #0]
    bc5c:	2b00      	cmp	r3, #0
    bc5e:	d0d1      	beq.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    bc60:	a903      	add	r1, sp, #12
    bc62:	3006      	adds	r0, #6
    bc64:	4798      	blx	r3
    bc66:	e7cd      	b.n	bc04 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    bc68:	2300      	movs	r3, #0
    bc6a:	2218      	movs	r2, #24
    bc6c:	a903      	add	r1, sp, #12
    bc6e:	0028      	movs	r0, r5
    bc70:	4c6e      	ldr	r4, [pc, #440]	; (be2c <m2m_wifi_cb+0x290>)
    bc72:	47a0      	blx	r4
    bc74:	2800      	cmp	r0, #0
    bc76:	d1c5      	bne.n	bc04 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bc78:	4b6d      	ldr	r3, [pc, #436]	; (be30 <m2m_wifi_cb+0x294>)
    bc7a:	681b      	ldr	r3, [r3, #0]
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	d0c1      	beq.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    bc80:	a903      	add	r1, sp, #12
    bc82:	3032      	adds	r0, #50	; 0x32
    bc84:	4798      	blx	r3
    bc86:	e7bd      	b.n	bc04 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    bc88:	2264      	movs	r2, #100	; 0x64
    bc8a:	2100      	movs	r1, #0
    bc8c:	a803      	add	r0, sp, #12
    bc8e:	4b69      	ldr	r3, [pc, #420]	; (be34 <m2m_wifi_cb+0x298>)
    bc90:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    bc92:	2300      	movs	r3, #0
    bc94:	2264      	movs	r2, #100	; 0x64
    bc96:	a903      	add	r1, sp, #12
    bc98:	0028      	movs	r0, r5
    bc9a:	4c64      	ldr	r4, [pc, #400]	; (be2c <m2m_wifi_cb+0x290>)
    bc9c:	47a0      	blx	r4
    bc9e:	2800      	cmp	r0, #0
    bca0:	d1b0      	bne.n	bc04 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bca2:	4b63      	ldr	r3, [pc, #396]	; (be30 <m2m_wifi_cb+0x294>)
    bca4:	681b      	ldr	r3, [r3, #0]
    bca6:	2b00      	cmp	r3, #0
    bca8:	d0ac      	beq.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    bcaa:	a903      	add	r1, sp, #12
    bcac:	302f      	adds	r0, #47	; 0x2f
    bcae:	4798      	blx	r3
    bcb0:	e7a8      	b.n	bc04 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    bcb2:	2300      	movs	r3, #0
    bcb4:	2204      	movs	r2, #4
    bcb6:	a903      	add	r1, sp, #12
    bcb8:	0028      	movs	r0, r5
    bcba:	4c5c      	ldr	r4, [pc, #368]	; (be2c <m2m_wifi_cb+0x290>)
    bcbc:	47a0      	blx	r4
    bcbe:	2800      	cmp	r0, #0
    bcc0:	d1a0      	bne.n	bc04 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    bcc2:	485d      	ldr	r0, [pc, #372]	; (be38 <m2m_wifi_cb+0x29c>)
    bcc4:	4d56      	ldr	r5, [pc, #344]	; (be20 <m2m_wifi_cb+0x284>)
    bcc6:	47a8      	blx	r5
    bcc8:	9c03      	ldr	r4, [sp, #12]
    bcca:	0a23      	lsrs	r3, r4, #8
    bccc:	20ff      	movs	r0, #255	; 0xff
    bcce:	4003      	ands	r3, r0
    bcd0:	0c22      	lsrs	r2, r4, #16
    bcd2:	4002      	ands	r2, r0
    bcd4:	0e21      	lsrs	r1, r4, #24
    bcd6:	4020      	ands	r0, r4
    bcd8:	9000      	str	r0, [sp, #0]
    bcda:	4858      	ldr	r0, [pc, #352]	; (be3c <m2m_wifi_cb+0x2a0>)
    bcdc:	47a8      	blx	r5
    bcde:	200d      	movs	r0, #13
    bce0:	4b51      	ldr	r3, [pc, #324]	; (be28 <m2m_wifi_cb+0x28c>)
    bce2:	4798      	blx	r3
			if (gpfAppWifiCb)
    bce4:	4b52      	ldr	r3, [pc, #328]	; (be30 <m2m_wifi_cb+0x294>)
    bce6:	681b      	ldr	r3, [r3, #0]
    bce8:	2b00      	cmp	r3, #0
    bcea:	d100      	bne.n	bcee <m2m_wifi_cb+0x152>
    bcec:	e78a      	b.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    bcee:	2100      	movs	r1, #0
    bcf0:	2034      	movs	r0, #52	; 0x34
    bcf2:	4798      	blx	r3
    bcf4:	e786      	b.n	bc04 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    bcf6:	2200      	movs	r2, #0
    bcf8:	4b51      	ldr	r3, [pc, #324]	; (be40 <m2m_wifi_cb+0x2a4>)
    bcfa:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    bcfc:	2300      	movs	r3, #0
    bcfe:	3204      	adds	r2, #4
    bd00:	a903      	add	r1, sp, #12
    bd02:	0028      	movs	r0, r5
    bd04:	4c49      	ldr	r4, [pc, #292]	; (be2c <m2m_wifi_cb+0x290>)
    bd06:	47a0      	blx	r4
    bd08:	2800      	cmp	r0, #0
    bd0a:	d000      	beq.n	bd0e <m2m_wifi_cb+0x172>
    bd0c:	e77a      	b.n	bc04 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    bd0e:	ab03      	add	r3, sp, #12
    bd10:	781a      	ldrb	r2, [r3, #0]
    bd12:	4b4c      	ldr	r3, [pc, #304]	; (be44 <m2m_wifi_cb+0x2a8>)
    bd14:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    bd16:	4b46      	ldr	r3, [pc, #280]	; (be30 <m2m_wifi_cb+0x294>)
    bd18:	681b      	ldr	r3, [r3, #0]
    bd1a:	2b00      	cmp	r3, #0
    bd1c:	d100      	bne.n	bd20 <m2m_wifi_cb+0x184>
    bd1e:	e771      	b.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    bd20:	a903      	add	r1, sp, #12
    bd22:	3011      	adds	r0, #17
    bd24:	4798      	blx	r3
    bd26:	e76d      	b.n	bc04 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    bd28:	2300      	movs	r3, #0
    bd2a:	222c      	movs	r2, #44	; 0x2c
    bd2c:	a903      	add	r1, sp, #12
    bd2e:	0028      	movs	r0, r5
    bd30:	4c3e      	ldr	r4, [pc, #248]	; (be2c <m2m_wifi_cb+0x290>)
    bd32:	47a0      	blx	r4
    bd34:	2800      	cmp	r0, #0
    bd36:	d000      	beq.n	bd3a <m2m_wifi_cb+0x19e>
    bd38:	e764      	b.n	bc04 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bd3a:	4b3d      	ldr	r3, [pc, #244]	; (be30 <m2m_wifi_cb+0x294>)
    bd3c:	681b      	ldr	r3, [r3, #0]
    bd3e:	2b00      	cmp	r3, #0
    bd40:	d100      	bne.n	bd44 <m2m_wifi_cb+0x1a8>
    bd42:	e75f      	b.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    bd44:	a903      	add	r1, sp, #12
    bd46:	3013      	adds	r0, #19
    bd48:	4798      	blx	r3
    bd4a:	e75b      	b.n	bc04 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    bd4c:	2300      	movs	r3, #0
    bd4e:	2204      	movs	r2, #4
    bd50:	a91c      	add	r1, sp, #112	; 0x70
    bd52:	0028      	movs	r0, r5
    bd54:	4c35      	ldr	r4, [pc, #212]	; (be2c <m2m_wifi_cb+0x290>)
    bd56:	47a0      	blx	r4
    bd58:	2800      	cmp	r0, #0
    bd5a:	d000      	beq.n	bd5e <m2m_wifi_cb+0x1c2>
    bd5c:	e752      	b.n	bc04 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bd5e:	4b34      	ldr	r3, [pc, #208]	; (be30 <m2m_wifi_cb+0x294>)
    bd60:	681b      	ldr	r3, [r3, #0]
    bd62:	2b00      	cmp	r3, #0
    bd64:	d100      	bne.n	bd68 <m2m_wifi_cb+0x1cc>
    bd66:	e74d      	b.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    bd68:	a91c      	add	r1, sp, #112	; 0x70
    bd6a:	3004      	adds	r0, #4
    bd6c:	4798      	blx	r3
    bd6e:	e749      	b.n	bc04 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    bd70:	2300      	movs	r3, #0
    bd72:	2204      	movs	r2, #4
    bd74:	a91c      	add	r1, sp, #112	; 0x70
    bd76:	0028      	movs	r0, r5
    bd78:	4c2c      	ldr	r4, [pc, #176]	; (be2c <m2m_wifi_cb+0x290>)
    bd7a:	47a0      	blx	r4
    bd7c:	2800      	cmp	r0, #0
    bd7e:	d000      	beq.n	bd82 <m2m_wifi_cb+0x1e6>
    bd80:	e740      	b.n	bc04 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bd82:	4b2b      	ldr	r3, [pc, #172]	; (be30 <m2m_wifi_cb+0x294>)
    bd84:	681b      	ldr	r3, [r3, #0]
    bd86:	2b00      	cmp	r3, #0
    bd88:	d100      	bne.n	bd8c <m2m_wifi_cb+0x1f0>
    bd8a:	e73b      	b.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    bd8c:	a91c      	add	r1, sp, #112	; 0x70
    bd8e:	3065      	adds	r0, #101	; 0x65
    bd90:	4798      	blx	r3
    bd92:	e737      	b.n	bc04 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    bd94:	2301      	movs	r3, #1
    bd96:	2264      	movs	r2, #100	; 0x64
    bd98:	a903      	add	r1, sp, #12
    bd9a:	0028      	movs	r0, r5
    bd9c:	4c23      	ldr	r4, [pc, #140]	; (be2c <m2m_wifi_cb+0x290>)
    bd9e:	47a0      	blx	r4
    bda0:	2800      	cmp	r0, #0
    bda2:	d000      	beq.n	bda6 <m2m_wifi_cb+0x20a>
    bda4:	e72e      	b.n	bc04 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    bda6:	4b22      	ldr	r3, [pc, #136]	; (be30 <m2m_wifi_cb+0x294>)
    bda8:	681b      	ldr	r3, [r3, #0]
    bdaa:	2b00      	cmp	r3, #0
    bdac:	d100      	bne.n	bdb0 <m2m_wifi_cb+0x214>
    bdae:	e729      	b.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    bdb0:	a903      	add	r1, sp, #12
    bdb2:	3009      	adds	r0, #9
    bdb4:	4798      	blx	r3
    bdb6:	e725      	b.n	bc04 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    bdb8:	2301      	movs	r3, #1
    bdba:	2204      	movs	r2, #4
    bdbc:	a903      	add	r1, sp, #12
    bdbe:	0028      	movs	r0, r5
    bdc0:	4c1a      	ldr	r4, [pc, #104]	; (be2c <m2m_wifi_cb+0x290>)
    bdc2:	47a0      	blx	r4
    bdc4:	2800      	cmp	r0, #0
    bdc6:	d000      	beq.n	bdca <m2m_wifi_cb+0x22e>
    bdc8:	e71c      	b.n	bc04 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    bdca:	4b19      	ldr	r3, [pc, #100]	; (be30 <m2m_wifi_cb+0x294>)
    bdcc:	681b      	ldr	r3, [r3, #0]
    bdce:	2b00      	cmp	r3, #0
    bdd0:	d100      	bne.n	bdd4 <m2m_wifi_cb+0x238>
    bdd2:	e717      	b.n	bc04 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    bdd4:	a903      	add	r1, sp, #12
    bdd6:	302a      	adds	r0, #42	; 0x2a
    bdd8:	4798      	blx	r3
    bdda:	e713      	b.n	bc04 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    bddc:	2300      	movs	r3, #0
    bdde:	2208      	movs	r2, #8
    bde0:	a903      	add	r1, sp, #12
    bde2:	0028      	movs	r0, r5
    bde4:	4c11      	ldr	r4, [pc, #68]	; (be2c <m2m_wifi_cb+0x290>)
    bde6:	47a0      	blx	r4
    bde8:	2800      	cmp	r0, #0
    bdea:	d000      	beq.n	bdee <m2m_wifi_cb+0x252>
    bdec:	e70a      	b.n	bc04 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    bdee:	ab03      	add	r3, sp, #12
    bdf0:	889a      	ldrh	r2, [r3, #4]
    bdf2:	0028      	movs	r0, r5
    bdf4:	3008      	adds	r0, #8
    bdf6:	2301      	movs	r3, #1
    bdf8:	9903      	ldr	r1, [sp, #12]
    bdfa:	4c0c      	ldr	r4, [pc, #48]	; (be2c <m2m_wifi_cb+0x290>)
    bdfc:	47a0      	blx	r4
    bdfe:	2800      	cmp	r0, #0
    be00:	d000      	beq.n	be04 <m2m_wifi_cb+0x268>
    be02:	e6ff      	b.n	bc04 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    be04:	4b0a      	ldr	r3, [pc, #40]	; (be30 <m2m_wifi_cb+0x294>)
    be06:	681b      	ldr	r3, [r3, #0]
    be08:	2b00      	cmp	r3, #0
    be0a:	d100      	bne.n	be0e <m2m_wifi_cb+0x272>
    be0c:	e6fa      	b.n	bc04 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    be0e:	a903      	add	r1, sp, #12
    be10:	3020      	adds	r0, #32
    be12:	4798      	blx	r3
    be14:	e6f6      	b.n	bc04 <m2m_wifi_cb+0x68>
    be16:	46c0      	nop			; (mov r8, r8)
    be18:	00019274 	.word	0x00019274
    be1c:	00018e64 	.word	0x00018e64
    be20:	00016be5 	.word	0x00016be5
    be24:	000192c4 	.word	0x000192c4
    be28:	00016c19 	.word	0x00016c19
    be2c:	0000b9f5 	.word	0x0000b9f5
    be30:	200003f0 	.word	0x200003f0
    be34:	0000b24d 	.word	0x0000b24d
    be38:	00019204 	.word	0x00019204
    be3c:	000192a4 	.word	0x000192a4
    be40:	200003f5 	.word	0x200003f5
    be44:	200003f4 	.word	0x200003f4

0000be48 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    be48:	b5f0      	push	{r4, r5, r6, r7, lr}
    be4a:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    be4c:	2201      	movs	r2, #1
    be4e:	230f      	movs	r3, #15
    be50:	446b      	add	r3, sp
    be52:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    be54:	2800      	cmp	r0, #0
    be56:	d061      	beq.n	bf1c <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    be58:	6802      	ldr	r2, [r0, #0]
    be5a:	4b32      	ldr	r3, [pc, #200]	; (bf24 <m2m_wifi_init+0xdc>)
    be5c:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    be5e:	2200      	movs	r2, #0
    be60:	4b31      	ldr	r3, [pc, #196]	; (bf28 <m2m_wifi_init+0xe0>)
    be62:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    be64:	200f      	movs	r0, #15
    be66:	4468      	add	r0, sp
    be68:	4b30      	ldr	r3, [pc, #192]	; (bf2c <m2m_wifi_init+0xe4>)
    be6a:	4798      	blx	r3
    be6c:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    be6e:	d002      	beq.n	be76 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    be70:	0020      	movs	r0, r4
    be72:	b00f      	add	sp, #60	; 0x3c
    be74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    be76:	2000      	movs	r0, #0
    be78:	4b2d      	ldr	r3, [pc, #180]	; (bf30 <m2m_wifi_init+0xe8>)
    be7a:	4798      	blx	r3
    be7c:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    be7e:	d149      	bne.n	bf14 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    be80:	492c      	ldr	r1, [pc, #176]	; (bf34 <m2m_wifi_init+0xec>)
    be82:	2001      	movs	r0, #1
    be84:	4b2c      	ldr	r3, [pc, #176]	; (bf38 <m2m_wifi_init+0xf0>)
    be86:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    be88:	ae04      	add	r6, sp, #16
    be8a:	0030      	movs	r0, r6
    be8c:	4b2b      	ldr	r3, [pc, #172]	; (bf3c <m2m_wifi_init+0xf4>)
    be8e:	4798      	blx	r3
    be90:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    be92:	482b      	ldr	r0, [pc, #172]	; (bf40 <m2m_wifi_init+0xf8>)
    be94:	4d2b      	ldr	r5, [pc, #172]	; (bf44 <m2m_wifi_init+0xfc>)
    be96:	47a8      	blx	r5
    be98:	79b3      	ldrb	r3, [r6, #6]
    be9a:	7972      	ldrb	r2, [r6, #5]
    be9c:	7931      	ldrb	r1, [r6, #4]
    be9e:	8c30      	ldrh	r0, [r6, #32]
    bea0:	9000      	str	r0, [sp, #0]
    bea2:	4829      	ldr	r0, [pc, #164]	; (bf48 <m2m_wifi_init+0x100>)
    bea4:	47a8      	blx	r5
    bea6:	200d      	movs	r0, #13
    bea8:	4f28      	ldr	r7, [pc, #160]	; (bf4c <m2m_wifi_init+0x104>)
    beaa:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    beac:	4824      	ldr	r0, [pc, #144]	; (bf40 <m2m_wifi_init+0xf8>)
    beae:	47a8      	blx	r5
    beb0:	2226      	movs	r2, #38	; 0x26
    beb2:	446a      	add	r2, sp
    beb4:	211a      	movs	r1, #26
    beb6:	4469      	add	r1, sp
    beb8:	4825      	ldr	r0, [pc, #148]	; (bf50 <m2m_wifi_init+0x108>)
    beba:	47a8      	blx	r5
    bebc:	200d      	movs	r0, #13
    bebe:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    bec0:	481f      	ldr	r0, [pc, #124]	; (bf40 <m2m_wifi_init+0xf8>)
    bec2:	47a8      	blx	r5
    bec4:	7a73      	ldrb	r3, [r6, #9]
    bec6:	7a32      	ldrb	r2, [r6, #8]
    bec8:	79f1      	ldrb	r1, [r6, #7]
    beca:	4822      	ldr	r0, [pc, #136]	; (bf54 <m2m_wifi_init+0x10c>)
    becc:	47a8      	blx	r5
    bece:	200d      	movs	r0, #13
    bed0:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    bed2:	481b      	ldr	r0, [pc, #108]	; (bf40 <m2m_wifi_init+0xf8>)
    bed4:	47a8      	blx	r5
    bed6:	2304      	movs	r3, #4
    bed8:	2205      	movs	r2, #5
    beda:	2113      	movs	r1, #19
    bedc:	481e      	ldr	r0, [pc, #120]	; (bf58 <m2m_wifi_init+0x110>)
    bede:	47a8      	blx	r5
    bee0:	200d      	movs	r0, #13
    bee2:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    bee4:	4816      	ldr	r0, [pc, #88]	; (bf40 <m2m_wifi_init+0xf8>)
    bee6:	47a8      	blx	r5
    bee8:	4a1c      	ldr	r2, [pc, #112]	; (bf5c <m2m_wifi_init+0x114>)
    beea:	491d      	ldr	r1, [pc, #116]	; (bf60 <m2m_wifi_init+0x118>)
    beec:	481d      	ldr	r0, [pc, #116]	; (bf64 <m2m_wifi_init+0x11c>)
    beee:	47a8      	blx	r5
    bef0:	200d      	movs	r0, #13
    bef2:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    bef4:	0023      	movs	r3, r4
    bef6:	330d      	adds	r3, #13
    bef8:	d1ba      	bne.n	be70 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    befa:	22e8      	movs	r2, #232	; 0xe8
    befc:	32ff      	adds	r2, #255	; 0xff
    befe:	491a      	ldr	r1, [pc, #104]	; (bf68 <m2m_wifi_init+0x120>)
    bf00:	481a      	ldr	r0, [pc, #104]	; (bf6c <m2m_wifi_init+0x124>)
    bf02:	4b10      	ldr	r3, [pc, #64]	; (bf44 <m2m_wifi_init+0xfc>)
    bf04:	4798      	blx	r3
    bf06:	481a      	ldr	r0, [pc, #104]	; (bf70 <m2m_wifi_init+0x128>)
    bf08:	4b1a      	ldr	r3, [pc, #104]	; (bf74 <m2m_wifi_init+0x12c>)
    bf0a:	4798      	blx	r3
    bf0c:	200d      	movs	r0, #13
    bf0e:	4b0f      	ldr	r3, [pc, #60]	; (bf4c <m2m_wifi_init+0x104>)
    bf10:	4798      	blx	r3
    bf12:	e7ad      	b.n	be70 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    bf14:	2000      	movs	r0, #0
    bf16:	4b18      	ldr	r3, [pc, #96]	; (bf78 <m2m_wifi_init+0x130>)
    bf18:	4798      	blx	r3
    bf1a:	e7a9      	b.n	be70 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    bf1c:	240c      	movs	r4, #12
    bf1e:	4264      	negs	r4, r4
    bf20:	e7a6      	b.n	be70 <m2m_wifi_init+0x28>
    bf22:	46c0      	nop			; (mov r8, r8)
    bf24:	200003f0 	.word	0x200003f0
    bf28:	200003f5 	.word	0x200003f5
    bf2c:	0000c8e9 	.word	0x0000c8e9
    bf30:	0000bb65 	.word	0x0000bb65
    bf34:	0000bb9d 	.word	0x0000bb9d
    bf38:	0000bae1 	.word	0x0000bae1
    bf3c:	0000c805 	.word	0x0000c805
    bf40:	00019204 	.word	0x00019204
    bf44:	00016be5 	.word	0x00016be5
    bf48:	00019380 	.word	0x00019380
    bf4c:	00016c19 	.word	0x00016c19
    bf50:	000193a8 	.word	0x000193a8
    bf54:	000193c4 	.word	0x000193c4
    bf58:	000193e8 	.word	0x000193e8
    bf5c:	00019400 	.word	0x00019400
    bf60:	0001940c 	.word	0x0001940c
    bf64:	00019418 	.word	0x00019418
    bf68:	00019280 	.word	0x00019280
    bf6c:	00018e64 	.word	0x00018e64
    bf70:	00019430 	.word	0x00019430
    bf74:	00016d01 	.word	0x00016d01
    bf78:	0000c9bd 	.word	0x0000c9bd

0000bf7c <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    bf7c:	b510      	push	{r4, lr}
	return hif_handle_isr();
    bf7e:	4b01      	ldr	r3, [pc, #4]	; (bf84 <m2m_wifi_handle_events+0x8>)
    bf80:	4798      	blx	r3
}
    bf82:	bd10      	pop	{r4, pc}
    bf84:	0000b5b5 	.word	0x0000b5b5

0000bf88 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    bf88:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf8a:	46ce      	mov	lr, r9
    bf8c:	4647      	mov	r7, r8
    bf8e:	b580      	push	{r7, lr}
    bf90:	b0a3      	sub	sp, #140	; 0x8c
    bf92:	9005      	str	r0, [sp, #20]
    bf94:	000c      	movs	r4, r1
    bf96:	0015      	movs	r5, r2
    bf98:	001f      	movs	r7, r3
    bf9a:	ab2a      	add	r3, sp, #168	; 0xa8
    bf9c:	881b      	ldrh	r3, [r3, #0]
    bf9e:	4699      	mov	r9, r3
    bfa0:	ab2b      	add	r3, sp, #172	; 0xac
    bfa2:	781b      	ldrb	r3, [r3, #0]
    bfa4:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    bfa6:	2a01      	cmp	r2, #1
    bfa8:	d003      	beq.n	bfb2 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    bfaa:	2f00      	cmp	r7, #0
    bfac:	d040      	beq.n	c030 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    bfae:	2a02      	cmp	r2, #2
    bfb0:	d04c      	beq.n	c04c <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    bfb2:	1e63      	subs	r3, r4, #1
    bfb4:	2b1f      	cmp	r3, #31
    bfb6:	d900      	bls.n	bfba <m2m_wifi_connect_sc+0x32>
    bfb8:	e078      	b.n	c0ac <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    bfba:	464b      	mov	r3, r9
    bfbc:	3b01      	subs	r3, #1
    bfbe:	b29b      	uxth	r3, r3
    bfc0:	2b0d      	cmp	r3, #13
    bfc2:	d903      	bls.n	bfcc <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    bfc4:	464b      	mov	r3, r9
    bfc6:	2bff      	cmp	r3, #255	; 0xff
    bfc8:	d000      	beq.n	bfcc <m2m_wifi_connect_sc+0x44>
    bfca:	e07e      	b.n	c0ca <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    bfcc:	ae07      	add	r6, sp, #28
    bfce:	0022      	movs	r2, r4
    bfd0:	9905      	ldr	r1, [sp, #20]
    bfd2:	205a      	movs	r0, #90	; 0x5a
    bfd4:	ab02      	add	r3, sp, #8
    bfd6:	469c      	mov	ip, r3
    bfd8:	4460      	add	r0, ip
    bfda:	4b79      	ldr	r3, [pc, #484]	; (c1c0 <m2m_wifi_connect_sc+0x238>)
    bfdc:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    bfde:	1934      	adds	r4, r6, r4
    bfe0:	3446      	adds	r4, #70	; 0x46
    bfe2:	2300      	movs	r3, #0
    bfe4:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    bfe6:	3344      	adds	r3, #68	; 0x44
    bfe8:	464a      	mov	r2, r9
    bfea:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    bfec:	4643      	mov	r3, r8
    bfee:	1e5a      	subs	r2, r3, #1
    bff0:	4193      	sbcs	r3, r2
    bff2:	2267      	movs	r2, #103	; 0x67
    bff4:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    bff6:	2341      	movs	r3, #65	; 0x41
    bff8:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    bffa:	2d03      	cmp	r5, #3
    bffc:	d100      	bne.n	c000 <m2m_wifi_connect_sc+0x78>
    bffe:	e072      	b.n	c0e6 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    c000:	2d02      	cmp	r5, #2
    c002:	d100      	bne.n	c006 <m2m_wifi_connect_sc+0x7e>
    c004:	e0ac      	b.n	c160 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    c006:	2d04      	cmp	r5, #4
    c008:	d100      	bne.n	c00c <m2m_wifi_connect_sc+0x84>
    c00a:	e0c4      	b.n	c196 <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    c00c:	2d01      	cmp	r5, #1
    c00e:	d000      	beq.n	c012 <m2m_wifi_connect_sc+0x8a>
    c010:	e0c7      	b.n	c1a2 <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    c012:	2300      	movs	r3, #0
    c014:	9302      	str	r3, [sp, #8]
    c016:	9301      	str	r3, [sp, #4]
    c018:	9300      	str	r3, [sp, #0]
    c01a:	336c      	adds	r3, #108	; 0x6c
    c01c:	aa07      	add	r2, sp, #28
    c01e:	2128      	movs	r1, #40	; 0x28
    c020:	2001      	movs	r0, #1
    c022:	4c68      	ldr	r4, [pc, #416]	; (c1c4 <m2m_wifi_connect_sc+0x23c>)
    c024:	47a0      	blx	r4

ERR1:
	return ret;
}
    c026:	b023      	add	sp, #140	; 0x8c
    c028:	bc0c      	pop	{r2, r3}
    c02a:	4690      	mov	r8, r2
    c02c:	4699      	mov	r9, r3
    c02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    c030:	4a65      	ldr	r2, [pc, #404]	; (c1c8 <m2m_wifi_connect_sc+0x240>)
    c032:	4966      	ldr	r1, [pc, #408]	; (c1cc <m2m_wifi_connect_sc+0x244>)
    c034:	4866      	ldr	r0, [pc, #408]	; (c1d0 <m2m_wifi_connect_sc+0x248>)
    c036:	4b67      	ldr	r3, [pc, #412]	; (c1d4 <m2m_wifi_connect_sc+0x24c>)
    c038:	4798      	blx	r3
    c03a:	4867      	ldr	r0, [pc, #412]	; (c1d8 <m2m_wifi_connect_sc+0x250>)
    c03c:	4b67      	ldr	r3, [pc, #412]	; (c1dc <m2m_wifi_connect_sc+0x254>)
    c03e:	4798      	blx	r3
    c040:	200d      	movs	r0, #13
    c042:	4b67      	ldr	r3, [pc, #412]	; (c1e0 <m2m_wifi_connect_sc+0x258>)
    c044:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c046:	200c      	movs	r0, #12
    c048:	4240      	negs	r0, r0
			goto ERR1;
    c04a:	e7ec      	b.n	c026 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    c04c:	0038      	movs	r0, r7
    c04e:	4b65      	ldr	r3, [pc, #404]	; (c1e4 <m2m_wifi_connect_sc+0x25c>)
    c050:	4798      	blx	r3
    c052:	2840      	cmp	r0, #64	; 0x40
    c054:	d1ad      	bne.n	bfb2 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    c056:	783b      	ldrb	r3, [r7, #0]
    c058:	001a      	movs	r2, r3
    c05a:	3a30      	subs	r2, #48	; 0x30
    c05c:	2a36      	cmp	r2, #54	; 0x36
    c05e:	d817      	bhi.n	c090 <m2m_wifi_connect_sc+0x108>
    c060:	3a0a      	subs	r2, #10
    c062:	2a06      	cmp	r2, #6
    c064:	d914      	bls.n	c090 <m2m_wifi_connect_sc+0x108>
    c066:	3b47      	subs	r3, #71	; 0x47
    c068:	2b19      	cmp	r3, #25
    c06a:	d911      	bls.n	c090 <m2m_wifi_connect_sc+0x108>
    c06c:	1c7a      	adds	r2, r7, #1
    c06e:	0038      	movs	r0, r7
    c070:	3040      	adds	r0, #64	; 0x40
    c072:	7813      	ldrb	r3, [r2, #0]
    c074:	0019      	movs	r1, r3
    c076:	3930      	subs	r1, #48	; 0x30
    c078:	2936      	cmp	r1, #54	; 0x36
    c07a:	d809      	bhi.n	c090 <m2m_wifi_connect_sc+0x108>
    c07c:	390a      	subs	r1, #10
    c07e:	2906      	cmp	r1, #6
    c080:	d906      	bls.n	c090 <m2m_wifi_connect_sc+0x108>
    c082:	3b47      	subs	r3, #71	; 0x47
    c084:	2b19      	cmp	r3, #25
    c086:	d903      	bls.n	c090 <m2m_wifi_connect_sc+0x108>
    c088:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    c08a:	4282      	cmp	r2, r0
    c08c:	d1f1      	bne.n	c072 <m2m_wifi_connect_sc+0xea>
    c08e:	e790      	b.n	bfb2 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    c090:	4a55      	ldr	r2, [pc, #340]	; (c1e8 <m2m_wifi_connect_sc+0x260>)
    c092:	494e      	ldr	r1, [pc, #312]	; (c1cc <m2m_wifi_connect_sc+0x244>)
    c094:	484e      	ldr	r0, [pc, #312]	; (c1d0 <m2m_wifi_connect_sc+0x248>)
    c096:	4b4f      	ldr	r3, [pc, #316]	; (c1d4 <m2m_wifi_connect_sc+0x24c>)
    c098:	4798      	blx	r3
    c09a:	4854      	ldr	r0, [pc, #336]	; (c1ec <m2m_wifi_connect_sc+0x264>)
    c09c:	4b4f      	ldr	r3, [pc, #316]	; (c1dc <m2m_wifi_connect_sc+0x254>)
    c09e:	4798      	blx	r3
    c0a0:	200d      	movs	r0, #13
    c0a2:	4b4f      	ldr	r3, [pc, #316]	; (c1e0 <m2m_wifi_connect_sc+0x258>)
    c0a4:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    c0a6:	200c      	movs	r0, #12
    c0a8:	4240      	negs	r0, r0
					goto ERR1;
    c0aa:	e7bc      	b.n	c026 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    c0ac:	228c      	movs	r2, #140	; 0x8c
    c0ae:	0092      	lsls	r2, r2, #2
    c0b0:	4946      	ldr	r1, [pc, #280]	; (c1cc <m2m_wifi_connect_sc+0x244>)
    c0b2:	4847      	ldr	r0, [pc, #284]	; (c1d0 <m2m_wifi_connect_sc+0x248>)
    c0b4:	4b47      	ldr	r3, [pc, #284]	; (c1d4 <m2m_wifi_connect_sc+0x24c>)
    c0b6:	4798      	blx	r3
    c0b8:	484d      	ldr	r0, [pc, #308]	; (c1f0 <m2m_wifi_connect_sc+0x268>)
    c0ba:	4b48      	ldr	r3, [pc, #288]	; (c1dc <m2m_wifi_connect_sc+0x254>)
    c0bc:	4798      	blx	r3
    c0be:	200d      	movs	r0, #13
    c0c0:	4b47      	ldr	r3, [pc, #284]	; (c1e0 <m2m_wifi_connect_sc+0x258>)
    c0c2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    c0c4:	200c      	movs	r0, #12
    c0c6:	4240      	negs	r0, r0
		goto ERR1;
    c0c8:	e7ad      	b.n	c026 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    c0ca:	4a4a      	ldr	r2, [pc, #296]	; (c1f4 <m2m_wifi_connect_sc+0x26c>)
    c0cc:	493f      	ldr	r1, [pc, #252]	; (c1cc <m2m_wifi_connect_sc+0x244>)
    c0ce:	4840      	ldr	r0, [pc, #256]	; (c1d0 <m2m_wifi_connect_sc+0x248>)
    c0d0:	4b40      	ldr	r3, [pc, #256]	; (c1d4 <m2m_wifi_connect_sc+0x24c>)
    c0d2:	4798      	blx	r3
    c0d4:	4848      	ldr	r0, [pc, #288]	; (c1f8 <m2m_wifi_connect_sc+0x270>)
    c0d6:	4b41      	ldr	r3, [pc, #260]	; (c1dc <m2m_wifi_connect_sc+0x254>)
    c0d8:	4798      	blx	r3
    c0da:	200d      	movs	r0, #13
    c0dc:	4b40      	ldr	r3, [pc, #256]	; (c1e0 <m2m_wifi_connect_sc+0x258>)
    c0de:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c0e0:	200c      	movs	r0, #12
    c0e2:	4240      	negs	r0, r0
			goto ERR1;
    c0e4:	e79f      	b.n	c026 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    c0e6:	783b      	ldrb	r3, [r7, #0]
    c0e8:	3b01      	subs	r3, #1
    c0ea:	b2db      	uxtb	r3, r3
    c0ec:	aa07      	add	r2, sp, #28
    c0ee:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    c0f0:	2b03      	cmp	r3, #3
    c0f2:	d817      	bhi.n	c124 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    c0f4:	787a      	ldrb	r2, [r7, #1]
    c0f6:	1e51      	subs	r1, r2, #1
    c0f8:	ab07      	add	r3, sp, #28
    c0fa:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    c0fc:	2310      	movs	r3, #16
    c0fe:	0011      	movs	r1, r2
    c100:	4399      	bics	r1, r3
    c102:	290b      	cmp	r1, #11
    c104:	d01e      	beq.n	c144 <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    c106:	4a3d      	ldr	r2, [pc, #244]	; (c1fc <m2m_wifi_connect_sc+0x274>)
    c108:	4930      	ldr	r1, [pc, #192]	; (c1cc <m2m_wifi_connect_sc+0x244>)
    c10a:	4831      	ldr	r0, [pc, #196]	; (c1d0 <m2m_wifi_connect_sc+0x248>)
    c10c:	4c31      	ldr	r4, [pc, #196]	; (c1d4 <m2m_wifi_connect_sc+0x24c>)
    c10e:	47a0      	blx	r4
    c110:	ab07      	add	r3, sp, #28
    c112:	7859      	ldrb	r1, [r3, #1]
    c114:	483a      	ldr	r0, [pc, #232]	; (c200 <m2m_wifi_connect_sc+0x278>)
    c116:	47a0      	blx	r4
    c118:	200d      	movs	r0, #13
    c11a:	4b31      	ldr	r3, [pc, #196]	; (c1e0 <m2m_wifi_connect_sc+0x258>)
    c11c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c11e:	200c      	movs	r0, #12
    c120:	4240      	negs	r0, r0
			goto ERR1;
    c122:	e780      	b.n	c026 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    c124:	2294      	movs	r2, #148	; 0x94
    c126:	0092      	lsls	r2, r2, #2
    c128:	4928      	ldr	r1, [pc, #160]	; (c1cc <m2m_wifi_connect_sc+0x244>)
    c12a:	4829      	ldr	r0, [pc, #164]	; (c1d0 <m2m_wifi_connect_sc+0x248>)
    c12c:	4c29      	ldr	r4, [pc, #164]	; (c1d4 <m2m_wifi_connect_sc+0x24c>)
    c12e:	47a0      	blx	r4
    c130:	ab07      	add	r3, sp, #28
    c132:	7819      	ldrb	r1, [r3, #0]
    c134:	4833      	ldr	r0, [pc, #204]	; (c204 <m2m_wifi_connect_sc+0x27c>)
    c136:	47a0      	blx	r4
    c138:	200d      	movs	r0, #13
    c13a:	4b29      	ldr	r3, [pc, #164]	; (c1e0 <m2m_wifi_connect_sc+0x258>)
    c13c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c13e:	200c      	movs	r0, #12
    c140:	4240      	negs	r0, r0
			goto ERR1;
    c142:	e770      	b.n	c026 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    c144:	1cb9      	adds	r1, r7, #2
    c146:	2016      	movs	r0, #22
    c148:	ab02      	add	r3, sp, #8
    c14a:	469c      	mov	ip, r3
    c14c:	4460      	add	r0, ip
    c14e:	4b1c      	ldr	r3, [pc, #112]	; (c1c0 <m2m_wifi_connect_sc+0x238>)
    c150:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    c152:	787b      	ldrb	r3, [r7, #1]
    c154:	aa07      	add	r2, sp, #28
    c156:	4694      	mov	ip, r2
    c158:	4463      	add	r3, ip
    c15a:	2200      	movs	r2, #0
    c15c:	709a      	strb	r2, [r3, #2]
    c15e:	e758      	b.n	c012 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    c160:	0038      	movs	r0, r7
    c162:	4b20      	ldr	r3, [pc, #128]	; (c1e4 <m2m_wifi_connect_sc+0x25c>)
    c164:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    c166:	1e43      	subs	r3, r0, #1
    c168:	b29b      	uxth	r3, r3
    c16a:	2b3f      	cmp	r3, #63	; 0x3f
    c16c:	d805      	bhi.n	c17a <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    c16e:	1c42      	adds	r2, r0, #1
    c170:	0039      	movs	r1, r7
    c172:	a807      	add	r0, sp, #28
    c174:	4b12      	ldr	r3, [pc, #72]	; (c1c0 <m2m_wifi_connect_sc+0x238>)
    c176:	4798      	blx	r3
    c178:	e74b      	b.n	c012 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    c17a:	4a23      	ldr	r2, [pc, #140]	; (c208 <m2m_wifi_connect_sc+0x280>)
    c17c:	4913      	ldr	r1, [pc, #76]	; (c1cc <m2m_wifi_connect_sc+0x244>)
    c17e:	4814      	ldr	r0, [pc, #80]	; (c1d0 <m2m_wifi_connect_sc+0x248>)
    c180:	4b14      	ldr	r3, [pc, #80]	; (c1d4 <m2m_wifi_connect_sc+0x24c>)
    c182:	4798      	blx	r3
    c184:	4821      	ldr	r0, [pc, #132]	; (c20c <m2m_wifi_connect_sc+0x284>)
    c186:	4b15      	ldr	r3, [pc, #84]	; (c1dc <m2m_wifi_connect_sc+0x254>)
    c188:	4798      	blx	r3
    c18a:	200d      	movs	r0, #13
    c18c:	4b14      	ldr	r3, [pc, #80]	; (c1e0 <m2m_wifi_connect_sc+0x258>)
    c18e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c190:	200c      	movs	r0, #12
    c192:	4240      	negs	r0, r0
			goto ERR1;
    c194:	e747      	b.n	c026 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    c196:	223e      	movs	r2, #62	; 0x3e
    c198:	0039      	movs	r1, r7
    c19a:	a807      	add	r0, sp, #28
    c19c:	4b08      	ldr	r3, [pc, #32]	; (c1c0 <m2m_wifi_connect_sc+0x238>)
    c19e:	4798      	blx	r3
    c1a0:	e737      	b.n	c012 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    c1a2:	4a1b      	ldr	r2, [pc, #108]	; (c210 <m2m_wifi_connect_sc+0x288>)
    c1a4:	4909      	ldr	r1, [pc, #36]	; (c1cc <m2m_wifi_connect_sc+0x244>)
    c1a6:	480a      	ldr	r0, [pc, #40]	; (c1d0 <m2m_wifi_connect_sc+0x248>)
    c1a8:	4b0a      	ldr	r3, [pc, #40]	; (c1d4 <m2m_wifi_connect_sc+0x24c>)
    c1aa:	4798      	blx	r3
    c1ac:	4819      	ldr	r0, [pc, #100]	; (c214 <m2m_wifi_connect_sc+0x28c>)
    c1ae:	4b0b      	ldr	r3, [pc, #44]	; (c1dc <m2m_wifi_connect_sc+0x254>)
    c1b0:	4798      	blx	r3
    c1b2:	200d      	movs	r0, #13
    c1b4:	4b0a      	ldr	r3, [pc, #40]	; (c1e0 <m2m_wifi_connect_sc+0x258>)
    c1b6:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    c1b8:	200c      	movs	r0, #12
    c1ba:	4240      	negs	r0, r0
		goto ERR1;
    c1bc:	e733      	b.n	c026 <m2m_wifi_connect_sc+0x9e>
    c1be:	46c0      	nop			; (mov r8, r8)
    c1c0:	0000b239 	.word	0x0000b239
    c1c4:	0000b361 	.word	0x0000b361
    c1c8:	0000021a 	.word	0x0000021a
    c1cc:	00019290 	.word	0x00019290
    c1d0:	00018e64 	.word	0x00018e64
    c1d4:	00016be5 	.word	0x00016be5
    c1d8:	000192d8 	.word	0x000192d8
    c1dc:	00016d01 	.word	0x00016d01
    c1e0:	00016c19 	.word	0x00016c19
    c1e4:	0000b25d 	.word	0x0000b25d
    c1e8:	00000226 	.word	0x00000226
    c1ec:	000192ec 	.word	0x000192ec
    c1f0:	000192f8 	.word	0x000192f8
    c1f4:	00000239 	.word	0x00000239
    c1f8:	0001930c 	.word	0x0001930c
    c1fc:	00000257 	.word	0x00000257
    c200:	00019334 	.word	0x00019334
    c204:	00019318 	.word	0x00019318
    c208:	00000266 	.word	0x00000266
    c20c:	00019350 	.word	0x00019350
    c210:	00000276 	.word	0x00000276
    c214:	0001936c 	.word	0x0001936c

0000c218 <m2m_wifi_connect>:
{
    c218:	b530      	push	{r4, r5, lr}
    c21a:	b083      	sub	sp, #12
    c21c:	ac06      	add	r4, sp, #24
    c21e:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    c220:	2500      	movs	r5, #0
    c222:	9501      	str	r5, [sp, #4]
    c224:	9400      	str	r4, [sp, #0]
    c226:	4c02      	ldr	r4, [pc, #8]	; (c230 <m2m_wifi_connect+0x18>)
    c228:	47a0      	blx	r4
}
    c22a:	b003      	add	sp, #12
    c22c:	bd30      	pop	{r4, r5, pc}
    c22e:	46c0      	nop			; (mov r8, r8)
    c230:	0000bf89 	.word	0x0000bf89

0000c234 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    c234:	2000      	movs	r0, #0
    c236:	4770      	bx	lr

0000c238 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    c238:	b5f0      	push	{r4, r5, r6, r7, lr}
    c23a:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    c23c:	2580      	movs	r5, #128	; 0x80
    c23e:	006d      	lsls	r5, r5, #1
    c240:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    c242:	24a5      	movs	r4, #165	; 0xa5
    c244:	0164      	lsls	r4, r4, #5
    c246:	4f08      	ldr	r7, [pc, #32]	; (c268 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    c248:	4e08      	ldr	r6, [pc, #32]	; (c26c <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    c24a:	0029      	movs	r1, r5
    c24c:	0020      	movs	r0, r4
    c24e:	47b8      	blx	r7
			uint32 reg = 0;
    c250:	2300      	movs	r3, #0
    c252:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    c254:	a901      	add	r1, sp, #4
    c256:	0020      	movs	r0, r4
    c258:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    c25a:	2800      	cmp	r0, #0
    c25c:	d1f5      	bne.n	c24a <chip_apply_conf+0x12>
				if(reg == val32)
    c25e:	9b01      	ldr	r3, [sp, #4]
    c260:	429d      	cmp	r5, r3
    c262:	d1f2      	bne.n	c24a <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    c264:	b003      	add	sp, #12
    c266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c268:	0000c729 	.word	0x0000c729
    c26c:	0000c71d 	.word	0x0000c71d

0000c270 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    c270:	b500      	push	{lr}
    c272:	b083      	sub	sp, #12
	uint32 reg = 0;
    c274:	2300      	movs	r3, #0
    c276:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    c278:	a901      	add	r1, sp, #4
    c27a:	4811      	ldr	r0, [pc, #68]	; (c2c0 <enable_interrupts+0x50>)
    c27c:	4b11      	ldr	r3, [pc, #68]	; (c2c4 <enable_interrupts+0x54>)
    c27e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    c280:	2800      	cmp	r0, #0
    c282:	d001      	beq.n	c288 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    c284:	b003      	add	sp, #12
    c286:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    c288:	2180      	movs	r1, #128	; 0x80
    c28a:	0049      	lsls	r1, r1, #1
    c28c:	9b01      	ldr	r3, [sp, #4]
    c28e:	4319      	orrs	r1, r3
    c290:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    c292:	480b      	ldr	r0, [pc, #44]	; (c2c0 <enable_interrupts+0x50>)
    c294:	4b0c      	ldr	r3, [pc, #48]	; (c2c8 <enable_interrupts+0x58>)
    c296:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    c298:	2800      	cmp	r0, #0
    c29a:	d1f3      	bne.n	c284 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    c29c:	a901      	add	r1, sp, #4
    c29e:	20d0      	movs	r0, #208	; 0xd0
    c2a0:	0140      	lsls	r0, r0, #5
    c2a2:	4b08      	ldr	r3, [pc, #32]	; (c2c4 <enable_interrupts+0x54>)
    c2a4:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    c2a6:	2800      	cmp	r0, #0
    c2a8:	d1ec      	bne.n	c284 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    c2aa:	2180      	movs	r1, #128	; 0x80
    c2ac:	0249      	lsls	r1, r1, #9
    c2ae:	9b01      	ldr	r3, [sp, #4]
    c2b0:	4319      	orrs	r1, r3
    c2b2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    c2b4:	20d0      	movs	r0, #208	; 0xd0
    c2b6:	0140      	lsls	r0, r0, #5
    c2b8:	4b03      	ldr	r3, [pc, #12]	; (c2c8 <enable_interrupts+0x58>)
    c2ba:	4798      	blx	r3
    c2bc:	e7e2      	b.n	c284 <enable_interrupts+0x14>
    c2be:	46c0      	nop			; (mov r8, r8)
    c2c0:	00001408 	.word	0x00001408
    c2c4:	0000c71d 	.word	0x0000c71d
    c2c8:	0000c729 	.word	0x0000c729

0000c2cc <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    c2cc:	b510      	push	{r4, lr}
    c2ce:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    c2d0:	4b28      	ldr	r3, [pc, #160]	; (c374 <nmi_get_chipid+0xa8>)
    c2d2:	681c      	ldr	r4, [r3, #0]
    c2d4:	2c00      	cmp	r4, #0
    c2d6:	d004      	beq.n	c2e2 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    c2d8:	4b26      	ldr	r3, [pc, #152]	; (c374 <nmi_get_chipid+0xa8>)
    c2da:	681c      	ldr	r4, [r3, #0]
}
    c2dc:	0020      	movs	r0, r4
    c2de:	b002      	add	sp, #8
    c2e0:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    c2e2:	0019      	movs	r1, r3
    c2e4:	2080      	movs	r0, #128	; 0x80
    c2e6:	0140      	lsls	r0, r0, #5
    c2e8:	4b23      	ldr	r3, [pc, #140]	; (c378 <nmi_get_chipid+0xac>)
    c2ea:	4798      	blx	r3
    c2ec:	2800      	cmp	r0, #0
    c2ee:	d003      	beq.n	c2f8 <nmi_get_chipid+0x2c>
			chipid = 0;
    c2f0:	2200      	movs	r2, #0
    c2f2:	4b20      	ldr	r3, [pc, #128]	; (c374 <nmi_get_chipid+0xa8>)
    c2f4:	601a      	str	r2, [r3, #0]
			return 0;
    c2f6:	e7f1      	b.n	c2dc <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    c2f8:	a901      	add	r1, sp, #4
    c2fa:	4820      	ldr	r0, [pc, #128]	; (c37c <nmi_get_chipid+0xb0>)
    c2fc:	4b1e      	ldr	r3, [pc, #120]	; (c378 <nmi_get_chipid+0xac>)
    c2fe:	4798      	blx	r3
    c300:	2800      	cmp	r0, #0
    c302:	d003      	beq.n	c30c <nmi_get_chipid+0x40>
			chipid = 0;
    c304:	2200      	movs	r2, #0
    c306:	4b1b      	ldr	r3, [pc, #108]	; (c374 <nmi_get_chipid+0xa8>)
    c308:	601a      	str	r2, [r3, #0]
			return 0;
    c30a:	e7e7      	b.n	c2dc <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    c30c:	4b19      	ldr	r3, [pc, #100]	; (c374 <nmi_get_chipid+0xa8>)
    c30e:	681b      	ldr	r3, [r3, #0]
    c310:	4a1b      	ldr	r2, [pc, #108]	; (c380 <nmi_get_chipid+0xb4>)
    c312:	4293      	cmp	r3, r2
    c314:	d00e      	beq.n	c334 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    c316:	4a1b      	ldr	r2, [pc, #108]	; (c384 <nmi_get_chipid+0xb8>)
    c318:	4293      	cmp	r3, r2
    c31a:	d012      	beq.n	c342 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    c31c:	4a1a      	ldr	r2, [pc, #104]	; (c388 <nmi_get_chipid+0xbc>)
    c31e:	4293      	cmp	r3, r2
    c320:	d01c      	beq.n	c35c <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    c322:	4914      	ldr	r1, [pc, #80]	; (c374 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    c324:	4a19      	ldr	r2, [pc, #100]	; (c38c <nmi_get_chipid+0xc0>)
    c326:	680b      	ldr	r3, [r1, #0]
    c328:	401a      	ands	r2, r3
		chipid |= 0x050000;
    c32a:	23a0      	movs	r3, #160	; 0xa0
    c32c:	02db      	lsls	r3, r3, #11
    c32e:	4313      	orrs	r3, r2
    c330:	600b      	str	r3, [r1, #0]
    c332:	e7d1      	b.n	c2d8 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    c334:	9b01      	ldr	r3, [sp, #4]
    c336:	2b01      	cmp	r3, #1
    c338:	d0f3      	beq.n	c322 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    c33a:	4a15      	ldr	r2, [pc, #84]	; (c390 <nmi_get_chipid+0xc4>)
    c33c:	4b0d      	ldr	r3, [pc, #52]	; (c374 <nmi_get_chipid+0xa8>)
    c33e:	601a      	str	r2, [r3, #0]
    c340:	e7ef      	b.n	c322 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    c342:	9b01      	ldr	r3, [sp, #4]
    c344:	2b03      	cmp	r3, #3
    c346:	d0ec      	beq.n	c322 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    c348:	2b04      	cmp	r3, #4
    c34a:	d003      	beq.n	c354 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    c34c:	4a11      	ldr	r2, [pc, #68]	; (c394 <nmi_get_chipid+0xc8>)
    c34e:	4b09      	ldr	r3, [pc, #36]	; (c374 <nmi_get_chipid+0xa8>)
    c350:	601a      	str	r2, [r3, #0]
    c352:	e7e6      	b.n	c322 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    c354:	4a10      	ldr	r2, [pc, #64]	; (c398 <nmi_get_chipid+0xcc>)
    c356:	4b07      	ldr	r3, [pc, #28]	; (c374 <nmi_get_chipid+0xa8>)
    c358:	601a      	str	r2, [r3, #0]
    c35a:	e7e2      	b.n	c322 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    c35c:	4905      	ldr	r1, [pc, #20]	; (c374 <nmi_get_chipid+0xa8>)
    c35e:	20ec      	movs	r0, #236	; 0xec
    c360:	0380      	lsls	r0, r0, #14
    c362:	4b05      	ldr	r3, [pc, #20]	; (c378 <nmi_get_chipid+0xac>)
    c364:	4798      	blx	r3
    c366:	2800      	cmp	r0, #0
    c368:	d0db      	beq.n	c322 <nmi_get_chipid+0x56>
			chipid = 0;
    c36a:	2200      	movs	r2, #0
    c36c:	4b01      	ldr	r3, [pc, #4]	; (c374 <nmi_get_chipid+0xa8>)
    c36e:	601a      	str	r2, [r3, #0]
			return 0;
    c370:	e7b4      	b.n	c2dc <nmi_get_chipid+0x10>
    c372:	46c0      	nop			; (mov r8, r8)
    c374:	200003f8 	.word	0x200003f8
    c378:	0000c71d 	.word	0x0000c71d
    c37c:	000013f4 	.word	0x000013f4
    c380:	001002a0 	.word	0x001002a0
    c384:	001002b0 	.word	0x001002b0
    c388:	001000f0 	.word	0x001000f0
    c38c:	fff0ffff 	.word	0xfff0ffff
    c390:	001002a1 	.word	0x001002a1
    c394:	001002b2 	.word	0x001002b2
    c398:	001002b1 	.word	0x001002b1

0000c39c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    c39c:	b530      	push	{r4, r5, lr}
    c39e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    c3a0:	4c16      	ldr	r4, [pc, #88]	; (c3fc <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    c3a2:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    c3a4:	a901      	add	r1, sp, #4
    c3a6:	2010      	movs	r0, #16
    c3a8:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    c3aa:	2800      	cmp	r0, #0
    c3ac:	d11c      	bne.n	c3e8 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    c3ae:	9b01      	ldr	r3, [sp, #4]
    c3b0:	422b      	tst	r3, r5
    c3b2:	d1f7      	bne.n	c3a4 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    c3b4:	a901      	add	r1, sp, #4
    c3b6:	3001      	adds	r0, #1
    c3b8:	4b10      	ldr	r3, [pc, #64]	; (c3fc <chip_sleep+0x60>)
    c3ba:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    c3bc:	2800      	cmp	r0, #0
    c3be:	d113      	bne.n	c3e8 <chip_sleep+0x4c>
	if(reg & NBIT1)
    c3c0:	9901      	ldr	r1, [sp, #4]
    c3c2:	078b      	lsls	r3, r1, #30
    c3c4:	d507      	bpl.n	c3d6 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    c3c6:	2302      	movs	r3, #2
    c3c8:	4399      	bics	r1, r3
    c3ca:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    c3cc:	3001      	adds	r0, #1
    c3ce:	4b0c      	ldr	r3, [pc, #48]	; (c400 <chip_sleep+0x64>)
    c3d0:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    c3d2:	2800      	cmp	r0, #0
    c3d4:	d108      	bne.n	c3e8 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c3d6:	a901      	add	r1, sp, #4
    c3d8:	200b      	movs	r0, #11
    c3da:	4b08      	ldr	r3, [pc, #32]	; (c3fc <chip_sleep+0x60>)
    c3dc:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    c3de:	2800      	cmp	r0, #0
    c3e0:	d102      	bne.n	c3e8 <chip_sleep+0x4c>
	if(reg & NBIT0)
    c3e2:	9901      	ldr	r1, [sp, #4]
    c3e4:	07cb      	lsls	r3, r1, #31
    c3e6:	d401      	bmi.n	c3ec <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    c3e8:	b003      	add	sp, #12
    c3ea:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    c3ec:	2301      	movs	r3, #1
    c3ee:	4399      	bics	r1, r3
    c3f0:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    c3f2:	300b      	adds	r0, #11
    c3f4:	4b02      	ldr	r3, [pc, #8]	; (c400 <chip_sleep+0x64>)
    c3f6:	4798      	blx	r3
    c3f8:	e7f6      	b.n	c3e8 <chip_sleep+0x4c>
    c3fa:	46c0      	nop			; (mov r8, r8)
    c3fc:	0000c71d 	.word	0x0000c71d
    c400:	0000c729 	.word	0x0000c729

0000c404 <chip_wake>:
sint8 chip_wake(void)
{
    c404:	b5f0      	push	{r4, r5, r6, r7, lr}
    c406:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    c408:	2300      	movs	r3, #0
    c40a:	9301      	str	r3, [sp, #4]
    c40c:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c40e:	a901      	add	r1, sp, #4
    c410:	200b      	movs	r0, #11
    c412:	4b28      	ldr	r3, [pc, #160]	; (c4b4 <chip_wake+0xb0>)
    c414:	4798      	blx	r3
    c416:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c418:	d130      	bne.n	c47c <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    c41a:	9901      	ldr	r1, [sp, #4]
    c41c:	07cb      	lsls	r3, r1, #31
    c41e:	d406      	bmi.n	c42e <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    c420:	2301      	movs	r3, #1
    c422:	4319      	orrs	r1, r3
    c424:	200b      	movs	r0, #11
    c426:	4b24      	ldr	r3, [pc, #144]	; (c4b8 <chip_wake+0xb4>)
    c428:	4798      	blx	r3
    c42a:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c42c:	d126      	bne.n	c47c <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    c42e:	a901      	add	r1, sp, #4
    c430:	2001      	movs	r0, #1
    c432:	4b20      	ldr	r3, [pc, #128]	; (c4b4 <chip_wake+0xb0>)
    c434:	4798      	blx	r3
    c436:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c438:	d120      	bne.n	c47c <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    c43a:	9901      	ldr	r1, [sp, #4]
    c43c:	078b      	lsls	r3, r1, #30
    c43e:	d520      	bpl.n	c482 <chip_wake+0x7e>
{
    c440:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    c442:	4f1c      	ldr	r7, [pc, #112]	; (c4b4 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    c444:	4e1d      	ldr	r6, [pc, #116]	; (c4bc <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    c446:	4669      	mov	r1, sp
    c448:	200f      	movs	r0, #15
    c44a:	47b8      	blx	r7
    c44c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    c44e:	d120      	bne.n	c492 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    c450:	9b00      	ldr	r3, [sp, #0]
    c452:	075b      	lsls	r3, r3, #29
    c454:	d42b      	bmi.n	c4ae <chip_wake+0xaa>
		nm_bsp_sleep(2);
    c456:	2002      	movs	r0, #2
    c458:	47b0      	blx	r6
    c45a:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    c45c:	2d00      	cmp	r5, #0
    c45e:	d1f2      	bne.n	c446 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    c460:	22ad      	movs	r2, #173	; 0xad
    c462:	0052      	lsls	r2, r2, #1
    c464:	4916      	ldr	r1, [pc, #88]	; (c4c0 <chip_wake+0xbc>)
    c466:	4817      	ldr	r0, [pc, #92]	; (c4c4 <chip_wake+0xc0>)
    c468:	4b17      	ldr	r3, [pc, #92]	; (c4c8 <chip_wake+0xc4>)
    c46a:	4798      	blx	r3
    c46c:	4817      	ldr	r0, [pc, #92]	; (c4cc <chip_wake+0xc8>)
    c46e:	4b18      	ldr	r3, [pc, #96]	; (c4d0 <chip_wake+0xcc>)
    c470:	4798      	blx	r3
    c472:	200d      	movs	r0, #13
    c474:	4b17      	ldr	r3, [pc, #92]	; (c4d4 <chip_wake+0xd0>)
    c476:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    c478:	2404      	movs	r4, #4
    c47a:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    c47c:	0020      	movs	r0, r4
    c47e:	b003      	add	sp, #12
    c480:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    c482:	2302      	movs	r3, #2
    c484:	4319      	orrs	r1, r3
    c486:	2001      	movs	r0, #1
    c488:	4b0b      	ldr	r3, [pc, #44]	; (c4b8 <chip_wake+0xb4>)
    c48a:	4798      	blx	r3
    c48c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    c48e:	d0d7      	beq.n	c440 <chip_wake+0x3c>
    c490:	e7f4      	b.n	c47c <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    c492:	22a8      	movs	r2, #168	; 0xa8
    c494:	0052      	lsls	r2, r2, #1
    c496:	490a      	ldr	r1, [pc, #40]	; (c4c0 <chip_wake+0xbc>)
    c498:	480a      	ldr	r0, [pc, #40]	; (c4c4 <chip_wake+0xc0>)
    c49a:	4d0b      	ldr	r5, [pc, #44]	; (c4c8 <chip_wake+0xc4>)
    c49c:	47a8      	blx	r5
    c49e:	9a00      	ldr	r2, [sp, #0]
    c4a0:	0021      	movs	r1, r4
    c4a2:	480d      	ldr	r0, [pc, #52]	; (c4d8 <chip_wake+0xd4>)
    c4a4:	47a8      	blx	r5
    c4a6:	200d      	movs	r0, #13
    c4a8:	4b0a      	ldr	r3, [pc, #40]	; (c4d4 <chip_wake+0xd0>)
    c4aa:	4798      	blx	r3
			goto _WAKE_EXIT;
    c4ac:	e7e6      	b.n	c47c <chip_wake+0x78>
	nm_bus_reset();
    c4ae:	4b0b      	ldr	r3, [pc, #44]	; (c4dc <chip_wake+0xd8>)
    c4b0:	4798      	blx	r3
    c4b2:	e7e3      	b.n	c47c <chip_wake+0x78>
    c4b4:	0000c71d 	.word	0x0000c71d
    c4b8:	0000c729 	.word	0x0000c729
    c4bc:	0000aec1 	.word	0x0000aec1
    c4c0:	0001944c 	.word	0x0001944c
    c4c4:	00018e64 	.word	0x00018e64
    c4c8:	00016be5 	.word	0x00016be5
    c4cc:	00019494 	.word	0x00019494
    c4d0:	00016d01 	.word	0x00016d01
    c4d4:	00016c19 	.word	0x00016c19
    c4d8:	0001947c 	.word	0x0001947c
    c4dc:	0000c705 	.word	0x0000c705

0000c4e0 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4e2:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    c4e4:	4d2d      	ldr	r5, [pc, #180]	; (c59c <wait_for_bootrom+0xbc>)
    c4e6:	4c2e      	ldr	r4, [pc, #184]	; (c5a0 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    c4e8:	4e2e      	ldr	r6, [pc, #184]	; (c5a4 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    c4ea:	0028      	movs	r0, r5
    c4ec:	47a0      	blx	r4
		if (reg & 0x80000000) {
    c4ee:	2800      	cmp	r0, #0
    c4f0:	db02      	blt.n	c4f8 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    c4f2:	2001      	movs	r0, #1
    c4f4:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    c4f6:	e7f8      	b.n	c4ea <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    c4f8:	482b      	ldr	r0, [pc, #172]	; (c5a8 <wait_for_bootrom+0xc8>)
    c4fa:	4b29      	ldr	r3, [pc, #164]	; (c5a0 <wait_for_bootrom+0xc0>)
    c4fc:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    c4fe:	07c3      	lsls	r3, r0, #31
    c500:	d409      	bmi.n	c516 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    c502:	4e28      	ldr	r6, [pc, #160]	; (c5a4 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    c504:	4c29      	ldr	r4, [pc, #164]	; (c5ac <wait_for_bootrom+0xcc>)
    c506:	4d26      	ldr	r5, [pc, #152]	; (c5a0 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    c508:	2001      	movs	r0, #1
    c50a:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    c50c:	0020      	movs	r0, r4
    c50e:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    c510:	4b27      	ldr	r3, [pc, #156]	; (c5b0 <wait_for_bootrom+0xd0>)
    c512:	4298      	cmp	r0, r3
    c514:	d1f8      	bne.n	c508 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    c516:	2f02      	cmp	r7, #2
    c518:	d021      	beq.n	c55e <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    c51a:	2f03      	cmp	r7, #3
    c51c:	d029      	beq.n	c572 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    c51e:	2f04      	cmp	r7, #4
    c520:	d030      	beq.n	c584 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    c522:	4924      	ldr	r1, [pc, #144]	; (c5b4 <wait_for_bootrom+0xd4>)
    c524:	4824      	ldr	r0, [pc, #144]	; (c5b8 <wait_for_bootrom+0xd8>)
    c526:	4b25      	ldr	r3, [pc, #148]	; (c5bc <wait_for_bootrom+0xdc>)
    c528:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    c52a:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    c52c:	4b24      	ldr	r3, [pc, #144]	; (c5c0 <wait_for_bootrom+0xe0>)
    c52e:	4798      	blx	r3
    c530:	0500      	lsls	r0, r0, #20
    c532:	0d00      	lsrs	r0, r0, #20
    c534:	4b23      	ldr	r3, [pc, #140]	; (c5c4 <wait_for_bootrom+0xe4>)
    c536:	4298      	cmp	r0, r3
    c538:	d82a      	bhi.n	c590 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    c53a:	0020      	movs	r0, r4
    c53c:	4b22      	ldr	r3, [pc, #136]	; (c5c8 <wait_for_bootrom+0xe8>)
    c53e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    c540:	4822      	ldr	r0, [pc, #136]	; (c5cc <wait_for_bootrom+0xec>)
    c542:	4c23      	ldr	r4, [pc, #140]	; (c5d0 <wait_for_bootrom+0xf0>)
    c544:	47a0      	blx	r4
    c546:	491b      	ldr	r1, [pc, #108]	; (c5b4 <wait_for_bootrom+0xd4>)
    c548:	4822      	ldr	r0, [pc, #136]	; (c5d4 <wait_for_bootrom+0xf4>)
    c54a:	47a0      	blx	r4
    c54c:	200d      	movs	r0, #13
    c54e:	4b22      	ldr	r3, [pc, #136]	; (c5d8 <wait_for_bootrom+0xf8>)
    c550:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    c552:	4922      	ldr	r1, [pc, #136]	; (c5dc <wait_for_bootrom+0xfc>)
    c554:	4815      	ldr	r0, [pc, #84]	; (c5ac <wait_for_bootrom+0xcc>)
    c556:	4b19      	ldr	r3, [pc, #100]	; (c5bc <wait_for_bootrom+0xdc>)
    c558:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    c55a:	2000      	movs	r0, #0
    c55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    c55e:	4920      	ldr	r1, [pc, #128]	; (c5e0 <wait_for_bootrom+0x100>)
    c560:	4820      	ldr	r0, [pc, #128]	; (c5e4 <wait_for_bootrom+0x104>)
    c562:	4c16      	ldr	r4, [pc, #88]	; (c5bc <wait_for_bootrom+0xdc>)
    c564:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    c566:	2180      	movs	r1, #128	; 0x80
    c568:	0349      	lsls	r1, r1, #13
    c56a:	4813      	ldr	r0, [pc, #76]	; (c5b8 <wait_for_bootrom+0xd8>)
    c56c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    c56e:	2400      	movs	r4, #0
    c570:	e7dc      	b.n	c52c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    c572:	491b      	ldr	r1, [pc, #108]	; (c5e0 <wait_for_bootrom+0x100>)
    c574:	481b      	ldr	r0, [pc, #108]	; (c5e4 <wait_for_bootrom+0x104>)
    c576:	4c11      	ldr	r4, [pc, #68]	; (c5bc <wait_for_bootrom+0xdc>)
    c578:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    c57a:	2100      	movs	r1, #0
    c57c:	480e      	ldr	r0, [pc, #56]	; (c5b8 <wait_for_bootrom+0xd8>)
    c57e:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    c580:	2400      	movs	r4, #0
    c582:	e7d3      	b.n	c52c <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    c584:	490b      	ldr	r1, [pc, #44]	; (c5b4 <wait_for_bootrom+0xd4>)
    c586:	480c      	ldr	r0, [pc, #48]	; (c5b8 <wait_for_bootrom+0xd8>)
    c588:	4b0c      	ldr	r3, [pc, #48]	; (c5bc <wait_for_bootrom+0xdc>)
    c58a:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    c58c:	2480      	movs	r4, #128	; 0x80
    c58e:	e7cd      	b.n	c52c <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    c590:	2002      	movs	r0, #2
    c592:	4320      	orrs	r0, r4
    c594:	4b0c      	ldr	r3, [pc, #48]	; (c5c8 <wait_for_bootrom+0xe8>)
    c596:	4798      	blx	r3
    c598:	e7d2      	b.n	c540 <wait_for_bootrom+0x60>
    c59a:	46c0      	nop			; (mov r8, r8)
    c59c:	00001014 	.word	0x00001014
    c5a0:	0000c711 	.word	0x0000c711
    c5a4:	0000aec1 	.word	0x0000aec1
    c5a8:	000207bc 	.word	0x000207bc
    c5ac:	000c000c 	.word	0x000c000c
    c5b0:	10add09e 	.word	0x10add09e
    c5b4:	13301354 	.word	0x13301354
    c5b8:	0000108c 	.word	0x0000108c
    c5bc:	0000c729 	.word	0x0000c729
    c5c0:	0000c2cd 	.word	0x0000c2cd
    c5c4:	0000039f 	.word	0x0000039f
    c5c8:	0000c239 	.word	0x0000c239
    c5cc:	00019204 	.word	0x00019204
    c5d0:	00016be5 	.word	0x00016be5
    c5d4:	000194b0 	.word	0x000194b0
    c5d8:	00016c19 	.word	0x00016c19
    c5dc:	ef522f61 	.word	0xef522f61
    c5e0:	3c1cd57d 	.word	0x3c1cd57d
    c5e4:	000207ac 	.word	0x000207ac

0000c5e8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    c5e8:	b570      	push	{r4, r5, r6, lr}
    c5ea:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    c5ec:	4b15      	ldr	r3, [pc, #84]	; (c644 <wait_for_firmware_start+0x5c>)
    c5ee:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    c5f0:	4b15      	ldr	r3, [pc, #84]	; (c648 <wait_for_firmware_start+0x60>)
    c5f2:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    c5f4:	3802      	subs	r0, #2
    c5f6:	2801      	cmp	r0, #1
    c5f8:	d911      	bls.n	c61e <wait_for_firmware_start+0x36>
{
    c5fa:	2401      	movs	r4, #1
    c5fc:	4264      	negs	r4, r4
    c5fe:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    c600:	4e12      	ldr	r6, [pc, #72]	; (c64c <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    c602:	4d13      	ldr	r5, [pc, #76]	; (c650 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    c604:	9b00      	ldr	r3, [sp, #0]
    c606:	4298      	cmp	r0, r3
    c608:	d00e      	beq.n	c628 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    c60a:	2002      	movs	r0, #2
    c60c:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    c60e:	9801      	ldr	r0, [sp, #4]
    c610:	47a8      	blx	r5
    c612:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    c614:	2c00      	cmp	r4, #0
    c616:	d1f5      	bne.n	c604 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    c618:	2005      	movs	r0, #5
    c61a:	4240      	negs	r0, r0
    c61c:	e009      	b.n	c632 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    c61e:	4b0d      	ldr	r3, [pc, #52]	; (c654 <wait_for_firmware_start+0x6c>)
    c620:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    c622:	4b0d      	ldr	r3, [pc, #52]	; (c658 <wait_for_firmware_start+0x70>)
    c624:	9300      	str	r3, [sp, #0]
    c626:	e7e8      	b.n	c5fa <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    c628:	9a00      	ldr	r2, [sp, #0]
    c62a:	4b07      	ldr	r3, [pc, #28]	; (c648 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    c62c:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    c62e:	429a      	cmp	r2, r3
    c630:	d001      	beq.n	c636 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    c632:	b002      	add	sp, #8
    c634:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    c636:	2100      	movs	r1, #0
    c638:	4802      	ldr	r0, [pc, #8]	; (c644 <wait_for_firmware_start+0x5c>)
    c63a:	4b08      	ldr	r3, [pc, #32]	; (c65c <wait_for_firmware_start+0x74>)
    c63c:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    c63e:	2000      	movs	r0, #0
    c640:	e7f7      	b.n	c632 <wait_for_firmware_start+0x4a>
    c642:	46c0      	nop			; (mov r8, r8)
    c644:	0000108c 	.word	0x0000108c
    c648:	02532636 	.word	0x02532636
    c64c:	0000aec1 	.word	0x0000aec1
    c650:	0000c711 	.word	0x0000c711
    c654:	000207ac 	.word	0x000207ac
    c658:	d75dc1c3 	.word	0xd75dc1c3
    c65c:	0000c729 	.word	0x0000c729

0000c660 <chip_deinit>:

sint8 chip_deinit(void)
{
    c660:	b510      	push	{r4, lr}
    c662:	b082      	sub	sp, #8
	uint32 reg = 0;
    c664:	2300      	movs	r3, #0
    c666:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    c668:	a901      	add	r1, sp, #4
    c66a:	20a0      	movs	r0, #160	; 0xa0
    c66c:	0140      	lsls	r0, r0, #5
    c66e:	4b14      	ldr	r3, [pc, #80]	; (c6c0 <chip_deinit+0x60>)
    c670:	4798      	blx	r3
    c672:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    c674:	d115      	bne.n	c6a2 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    c676:	4913      	ldr	r1, [pc, #76]	; (c6c4 <chip_deinit+0x64>)
    c678:	9b01      	ldr	r3, [sp, #4]
    c67a:	4019      	ands	r1, r3
    c67c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    c67e:	20a0      	movs	r0, #160	; 0xa0
    c680:	0140      	lsls	r0, r0, #5
    c682:	4b11      	ldr	r3, [pc, #68]	; (c6c8 <chip_deinit+0x68>)
    c684:	4798      	blx	r3
    c686:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    c688:	d016      	beq.n	c6b8 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    c68a:	4a10      	ldr	r2, [pc, #64]	; (c6cc <chip_deinit+0x6c>)
    c68c:	4910      	ldr	r1, [pc, #64]	; (c6d0 <chip_deinit+0x70>)
    c68e:	4811      	ldr	r0, [pc, #68]	; (c6d4 <chip_deinit+0x74>)
    c690:	4b11      	ldr	r3, [pc, #68]	; (c6d8 <chip_deinit+0x78>)
    c692:	4798      	blx	r3
    c694:	4811      	ldr	r0, [pc, #68]	; (c6dc <chip_deinit+0x7c>)
    c696:	4b12      	ldr	r3, [pc, #72]	; (c6e0 <chip_deinit+0x80>)
    c698:	4798      	blx	r3
    c69a:	200d      	movs	r0, #13
    c69c:	4b11      	ldr	r3, [pc, #68]	; (c6e4 <chip_deinit+0x84>)
    c69e:	4798      	blx	r3
		goto ERR1;
    c6a0:	e00a      	b.n	c6b8 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    c6a2:	4a11      	ldr	r2, [pc, #68]	; (c6e8 <chip_deinit+0x88>)
    c6a4:	490a      	ldr	r1, [pc, #40]	; (c6d0 <chip_deinit+0x70>)
    c6a6:	480b      	ldr	r0, [pc, #44]	; (c6d4 <chip_deinit+0x74>)
    c6a8:	4b0b      	ldr	r3, [pc, #44]	; (c6d8 <chip_deinit+0x78>)
    c6aa:	4798      	blx	r3
    c6ac:	480b      	ldr	r0, [pc, #44]	; (c6dc <chip_deinit+0x7c>)
    c6ae:	4b0c      	ldr	r3, [pc, #48]	; (c6e0 <chip_deinit+0x80>)
    c6b0:	4798      	blx	r3
    c6b2:	200d      	movs	r0, #13
    c6b4:	4b0b      	ldr	r3, [pc, #44]	; (c6e4 <chip_deinit+0x84>)
    c6b6:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    c6b8:	0020      	movs	r0, r4
    c6ba:	b002      	add	sp, #8
    c6bc:	bd10      	pop	{r4, pc}
    c6be:	46c0      	nop			; (mov r8, r8)
    c6c0:	0000c71d 	.word	0x0000c71d
    c6c4:	fffffbff 	.word	0xfffffbff
    c6c8:	0000c729 	.word	0x0000c729
    c6cc:	00000207 	.word	0x00000207
    c6d0:	00019458 	.word	0x00019458
    c6d4:	00018e64 	.word	0x00018e64
    c6d8:	00016be5 	.word	0x00016be5
    c6dc:	00019464 	.word	0x00019464
    c6e0:	00016d01 	.word	0x00016d01
    c6e4:	00016c19 	.word	0x00016c19
    c6e8:	00000201 	.word	0x00000201

0000c6ec <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    c6ec:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    c6ee:	4b01      	ldr	r3, [pc, #4]	; (c6f4 <nm_bus_iface_init+0x8>)
    c6f0:	4798      	blx	r3
	return ret;
}
    c6f2:	bd10      	pop	{r4, pc}
    c6f4:	0000af7d 	.word	0x0000af7d

0000c6f8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    c6f8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    c6fa:	4b01      	ldr	r3, [pc, #4]	; (c700 <nm_bus_iface_deinit+0x8>)
    c6fc:	4798      	blx	r3

	return ret;
}
    c6fe:	bd10      	pop	{r4, pc}
    c700:	0000b1cd 	.word	0x0000b1cd

0000c704 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    c704:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    c706:	4b01      	ldr	r3, [pc, #4]	; (c70c <nm_bus_reset+0x8>)
    c708:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    c70a:	bd10      	pop	{r4, pc}
    c70c:	0000d0ad 	.word	0x0000d0ad

0000c710 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    c710:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    c712:	4b01      	ldr	r3, [pc, #4]	; (c718 <nm_read_reg+0x8>)
    c714:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    c716:	bd10      	pop	{r4, pc}
    c718:	0000d0e5 	.word	0x0000d0e5

0000c71c <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    c71c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    c71e:	4b01      	ldr	r3, [pc, #4]	; (c724 <nm_read_reg_with_ret+0x8>)
    c720:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    c722:	bd10      	pop	{r4, pc}
    c724:	0000d0f9 	.word	0x0000d0f9

0000c728 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    c728:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    c72a:	4b01      	ldr	r3, [pc, #4]	; (c730 <nm_write_reg+0x8>)
    c72c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    c72e:	bd10      	pop	{r4, pc}
    c730:	0000d111 	.word	0x0000d111

0000c734 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    c734:	b5f0      	push	{r4, r5, r6, r7, lr}
    c736:	46d6      	mov	lr, sl
    c738:	464f      	mov	r7, r9
    c73a:	4646      	mov	r6, r8
    c73c:	b5c0      	push	{r6, r7, lr}
    c73e:	b082      	sub	sp, #8
    c740:	4680      	mov	r8, r0
    c742:	4689      	mov	r9, r1
    c744:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c746:	4b13      	ldr	r3, [pc, #76]	; (c794 <nm_read_block+0x60>)
    c748:	881f      	ldrh	r7, [r3, #0]
    c74a:	3f08      	subs	r7, #8
    c74c:	b2bb      	uxth	r3, r7
    c74e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    c750:	001e      	movs	r6, r3
    c752:	0004      	movs	r4, r0
    c754:	429a      	cmp	r2, r3
    c756:	d91a      	bls.n	c78e <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    c758:	4b0f      	ldr	r3, [pc, #60]	; (c798 <nm_read_block+0x64>)
    c75a:	469a      	mov	sl, r3
    c75c:	1a37      	subs	r7, r6, r0
    c75e:	4643      	mov	r3, r8
    c760:	1ae1      	subs	r1, r4, r3
    c762:	4449      	add	r1, r9
    c764:	9a01      	ldr	r2, [sp, #4]
    c766:	0020      	movs	r0, r4
    c768:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    c76a:	2800      	cmp	r0, #0
    c76c:	d109      	bne.n	c782 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    c76e:	1bad      	subs	r5, r5, r6
    c770:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    c772:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    c774:	42b5      	cmp	r5, r6
    c776:	d8f2      	bhi.n	c75e <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    c778:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    c77a:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    c77c:	0020      	movs	r0, r4
    c77e:	4b06      	ldr	r3, [pc, #24]	; (c798 <nm_read_block+0x64>)
    c780:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    c782:	b002      	add	sp, #8
    c784:	bc1c      	pop	{r2, r3, r4}
    c786:	4690      	mov	r8, r2
    c788:	4699      	mov	r9, r3
    c78a:	46a2      	mov	sl, r4
    c78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    c78e:	2100      	movs	r1, #0
    c790:	e7f2      	b.n	c778 <nm_read_block+0x44>
    c792:	46c0      	nop			; (mov r8, r8)
    c794:	2000000c 	.word	0x2000000c
    c798:	0000d251 	.word	0x0000d251

0000c79c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    c79c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c79e:	46d6      	mov	lr, sl
    c7a0:	464f      	mov	r7, r9
    c7a2:	4646      	mov	r6, r8
    c7a4:	b5c0      	push	{r6, r7, lr}
    c7a6:	b082      	sub	sp, #8
    c7a8:	4680      	mov	r8, r0
    c7aa:	4689      	mov	r9, r1
    c7ac:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c7ae:	4b13      	ldr	r3, [pc, #76]	; (c7fc <nm_write_block+0x60>)
    c7b0:	881f      	ldrh	r7, [r3, #0]
    c7b2:	3f08      	subs	r7, #8
    c7b4:	b2bb      	uxth	r3, r7
    c7b6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    c7b8:	001e      	movs	r6, r3
    c7ba:	0004      	movs	r4, r0
    c7bc:	429a      	cmp	r2, r3
    c7be:	d91a      	bls.n	c7f6 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    c7c0:	4b0f      	ldr	r3, [pc, #60]	; (c800 <nm_write_block+0x64>)
    c7c2:	469a      	mov	sl, r3
    c7c4:	1a37      	subs	r7, r6, r0
    c7c6:	4643      	mov	r3, r8
    c7c8:	1ae1      	subs	r1, r4, r3
    c7ca:	4449      	add	r1, r9
    c7cc:	9a01      	ldr	r2, [sp, #4]
    c7ce:	0020      	movs	r0, r4
    c7d0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    c7d2:	2800      	cmp	r0, #0
    c7d4:	d109      	bne.n	c7ea <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    c7d6:	1bad      	subs	r5, r5, r6
    c7d8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    c7da:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    c7dc:	42b5      	cmp	r5, r6
    c7de:	d8f2      	bhi.n	c7c6 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    c7e0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    c7e2:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    c7e4:	0020      	movs	r0, r4
    c7e6:	4b06      	ldr	r3, [pc, #24]	; (c800 <nm_write_block+0x64>)
    c7e8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    c7ea:	b002      	add	sp, #8
    c7ec:	bc1c      	pop	{r2, r3, r4}
    c7ee:	4690      	mov	r8, r2
    c7f0:	4699      	mov	r9, r3
    c7f2:	46a2      	mov	sl, r4
    c7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    c7f6:	2100      	movs	r1, #0
    c7f8:	e7f2      	b.n	c7e0 <nm_write_block+0x44>
    c7fa:	46c0      	nop			; (mov r8, r8)
    c7fc:	2000000c 	.word	0x2000000c
    c800:	0000d3ad 	.word	0x0000d3ad

0000c804 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    c804:	b570      	push	{r4, r5, r6, lr}
    c806:	b084      	sub	sp, #16
    c808:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    c80a:	2300      	movs	r3, #0
    c80c:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    c80e:	2208      	movs	r2, #8
    c810:	2100      	movs	r1, #0
    c812:	a801      	add	r0, sp, #4
    c814:	4b2d      	ldr	r3, [pc, #180]	; (c8cc <nm_get_firmware_full_info+0xc8>)
    c816:	4798      	blx	r3
	if (pstrRev != NULL)
    c818:	2c00      	cmp	r4, #0
    c81a:	d044      	beq.n	c8a6 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    c81c:	2228      	movs	r2, #40	; 0x28
    c81e:	2100      	movs	r1, #0
    c820:	0020      	movs	r0, r4
    c822:	4b2b      	ldr	r3, [pc, #172]	; (c8d0 <nm_get_firmware_full_info+0xcc>)
    c824:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    c826:	a903      	add	r1, sp, #12
    c828:	482a      	ldr	r0, [pc, #168]	; (c8d4 <nm_get_firmware_full_info+0xd0>)
    c82a:	4b2b      	ldr	r3, [pc, #172]	; (c8d8 <nm_get_firmware_full_info+0xd4>)
    c82c:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    c82e:	2800      	cmp	r0, #0
    c830:	d13a      	bne.n	c8a8 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    c832:	9b03      	ldr	r3, [sp, #12]
    c834:	2b00      	cmp	r3, #0
    c836:	d039      	beq.n	c8ac <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    c838:	20c0      	movs	r0, #192	; 0xc0
    c83a:	0280      	lsls	r0, r0, #10
    c83c:	4318      	orrs	r0, r3
    c83e:	2208      	movs	r2, #8
    c840:	a901      	add	r1, sp, #4
    c842:	4b26      	ldr	r3, [pc, #152]	; (c8dc <nm_get_firmware_full_info+0xd8>)
    c844:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    c846:	2800      	cmp	r0, #0
    c848:	d12e      	bne.n	c8a8 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    c84a:	9b02      	ldr	r3, [sp, #8]
    c84c:	0418      	lsls	r0, r3, #16
    c84e:	0c00      	lsrs	r0, r0, #16
    c850:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    c852:	d02e      	beq.n	c8b2 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    c854:	23c0      	movs	r3, #192	; 0xc0
    c856:	029b      	lsls	r3, r3, #10
    c858:	4318      	orrs	r0, r3
    c85a:	2228      	movs	r2, #40	; 0x28
    c85c:	0021      	movs	r1, r4
    c85e:	4b1f      	ldr	r3, [pc, #124]	; (c8dc <nm_get_firmware_full_info+0xd8>)
    c860:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    c862:	2800      	cmp	r0, #0
    c864:	d120      	bne.n	c8a8 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    c866:	7921      	ldrb	r1, [r4, #4]
    c868:	0209      	lsls	r1, r1, #8
    c86a:	79a2      	ldrb	r2, [r4, #6]
    c86c:	230f      	movs	r3, #15
    c86e:	401a      	ands	r2, r3
    c870:	430a      	orrs	r2, r1
    c872:	7961      	ldrb	r1, [r4, #5]
    c874:	0109      	lsls	r1, r1, #4
    c876:	25ff      	movs	r5, #255	; 0xff
    c878:	4029      	ands	r1, r5
    c87a:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    c87c:	79e1      	ldrb	r1, [r4, #7]
    c87e:	0209      	lsls	r1, r1, #8
    c880:	7a66      	ldrb	r6, [r4, #9]
    c882:	4033      	ands	r3, r6
    c884:	430b      	orrs	r3, r1
    c886:	7a21      	ldrb	r1, [r4, #8]
    c888:	0109      	lsls	r1, r1, #4
    c88a:	400d      	ands	r5, r1
    c88c:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    c88e:	2a00      	cmp	r2, #0
    c890:	d012      	beq.n	c8b8 <nm_get_firmware_full_info+0xb4>
    c892:	2b00      	cmp	r3, #0
    c894:	d013      	beq.n	c8be <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    c896:	4912      	ldr	r1, [pc, #72]	; (c8e0 <nm_get_firmware_full_info+0xdc>)
    c898:	428b      	cmp	r3, r1
    c89a:	d813      	bhi.n	c8c4 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    c89c:	4b11      	ldr	r3, [pc, #68]	; (c8e4 <nm_get_firmware_full_info+0xe0>)
    c89e:	429a      	cmp	r2, r3
    c8a0:	d802      	bhi.n	c8a8 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    c8a2:	380d      	subs	r0, #13
    c8a4:	e000      	b.n	c8a8 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    c8a6:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    c8a8:	b004      	add	sp, #16
    c8aa:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    c8ac:	200c      	movs	r0, #12
    c8ae:	4240      	negs	r0, r0
    c8b0:	e7fa      	b.n	c8a8 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    c8b2:	200c      	movs	r0, #12
    c8b4:	4240      	negs	r0, r0
    c8b6:	e7f7      	b.n	c8a8 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    c8b8:	200c      	movs	r0, #12
    c8ba:	4240      	negs	r0, r0
    c8bc:	e7f4      	b.n	c8a8 <nm_get_firmware_full_info+0xa4>
    c8be:	200c      	movs	r0, #12
    c8c0:	4240      	negs	r0, r0
    c8c2:	e7f1      	b.n	c8a8 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    c8c4:	200d      	movs	r0, #13
    c8c6:	4240      	negs	r0, r0
    c8c8:	e7ee      	b.n	c8a8 <nm_get_firmware_full_info+0xa4>
    c8ca:	46c0      	nop			; (mov r8, r8)
    c8cc:	00016a83 	.word	0x00016a83
    c8d0:	0000b24d 	.word	0x0000b24d
    c8d4:	000c0008 	.word	0x000c0008
    c8d8:	0000c71d 	.word	0x0000c71d
    c8dc:	0000c735 	.word	0x0000c735
    c8e0:	00001354 	.word	0x00001354
    c8e4:	00001353 	.word	0x00001353

0000c8e8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    c8e8:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    c8ea:	2800      	cmp	r0, #0
    c8ec:	d037      	beq.n	c95e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    c8ee:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    c8f0:	1e6b      	subs	r3, r5, #1
    c8f2:	2b03      	cmp	r3, #3
    c8f4:	d900      	bls.n	c8f8 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    c8f6:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    c8f8:	2000      	movs	r0, #0
    c8fa:	4b20      	ldr	r3, [pc, #128]	; (c97c <nm_drv_init+0x94>)
    c8fc:	4798      	blx	r3
    c8fe:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c900:	d12f      	bne.n	c962 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    c902:	481f      	ldr	r0, [pc, #124]	; (c980 <nm_drv_init+0x98>)
    c904:	4c1f      	ldr	r4, [pc, #124]	; (c984 <nm_drv_init+0x9c>)
    c906:	47a0      	blx	r4
    c908:	4b1f      	ldr	r3, [pc, #124]	; (c988 <nm_drv_init+0xa0>)
    c90a:	4798      	blx	r3
    c90c:	0001      	movs	r1, r0
    c90e:	481f      	ldr	r0, [pc, #124]	; (c98c <nm_drv_init+0xa4>)
    c910:	47a0      	blx	r4
    c912:	200d      	movs	r0, #13
    c914:	4b1e      	ldr	r3, [pc, #120]	; (c990 <nm_drv_init+0xa8>)
    c916:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    c918:	4b1e      	ldr	r3, [pc, #120]	; (c994 <nm_drv_init+0xac>)
    c91a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    c91c:	0028      	movs	r0, r5
    c91e:	4b1e      	ldr	r3, [pc, #120]	; (c998 <nm_drv_init+0xb0>)
    c920:	4798      	blx	r3
    c922:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c924:	d117      	bne.n	c956 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    c926:	0028      	movs	r0, r5
    c928:	4b1c      	ldr	r3, [pc, #112]	; (c99c <nm_drv_init+0xb4>)
    c92a:	4798      	blx	r3
    c92c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c92e:	d112      	bne.n	c956 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    c930:	3d02      	subs	r5, #2
    c932:	2d01      	cmp	r5, #1
    c934:	d911      	bls.n	c95a <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    c936:	4b1a      	ldr	r3, [pc, #104]	; (c9a0 <nm_drv_init+0xb8>)
    c938:	4798      	blx	r3
    c93a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c93c:	d00d      	beq.n	c95a <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    c93e:	22a7      	movs	r2, #167	; 0xa7
    c940:	0052      	lsls	r2, r2, #1
    c942:	4918      	ldr	r1, [pc, #96]	; (c9a4 <nm_drv_init+0xbc>)
    c944:	4818      	ldr	r0, [pc, #96]	; (c9a8 <nm_drv_init+0xc0>)
    c946:	4b0f      	ldr	r3, [pc, #60]	; (c984 <nm_drv_init+0x9c>)
    c948:	4798      	blx	r3
    c94a:	4818      	ldr	r0, [pc, #96]	; (c9ac <nm_drv_init+0xc4>)
    c94c:	4b18      	ldr	r3, [pc, #96]	; (c9b0 <nm_drv_init+0xc8>)
    c94e:	4798      	blx	r3
    c950:	200d      	movs	r0, #13
    c952:	4b0f      	ldr	r3, [pc, #60]	; (c990 <nm_drv_init+0xa8>)
    c954:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    c956:	4b17      	ldr	r3, [pc, #92]	; (c9b4 <nm_drv_init+0xcc>)
    c958:	4798      	blx	r3
ERR1:
	return ret;
}
    c95a:	0020      	movs	r0, r4
    c95c:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    c95e:	2501      	movs	r5, #1
    c960:	e7ca      	b.n	c8f8 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    c962:	2290      	movs	r2, #144	; 0x90
    c964:	0052      	lsls	r2, r2, #1
    c966:	490f      	ldr	r1, [pc, #60]	; (c9a4 <nm_drv_init+0xbc>)
    c968:	480f      	ldr	r0, [pc, #60]	; (c9a8 <nm_drv_init+0xc0>)
    c96a:	4b06      	ldr	r3, [pc, #24]	; (c984 <nm_drv_init+0x9c>)
    c96c:	4798      	blx	r3
    c96e:	4812      	ldr	r0, [pc, #72]	; (c9b8 <nm_drv_init+0xd0>)
    c970:	4b0f      	ldr	r3, [pc, #60]	; (c9b0 <nm_drv_init+0xc8>)
    c972:	4798      	blx	r3
    c974:	200d      	movs	r0, #13
    c976:	4b06      	ldr	r3, [pc, #24]	; (c990 <nm_drv_init+0xa8>)
    c978:	4798      	blx	r3
		goto ERR1;
    c97a:	e7ee      	b.n	c95a <nm_drv_init+0x72>
    c97c:	0000c6ed 	.word	0x0000c6ed
    c980:	00019204 	.word	0x00019204
    c984:	00016be5 	.word	0x00016be5
    c988:	0000c2cd 	.word	0x0000c2cd
    c98c:	00019580 	.word	0x00019580
    c990:	00016c19 	.word	0x00016c19
    c994:	0000d129 	.word	0x0000d129
    c998:	0000c4e1 	.word	0x0000c4e1
    c99c:	0000c5e9 	.word	0x0000c5e9
    c9a0:	0000c271 	.word	0x0000c271
    c9a4:	000194c8 	.word	0x000194c8
    c9a8:	00018e64 	.word	0x00018e64
    c9ac:	00019544 	.word	0x00019544
    c9b0:	00016d01 	.word	0x00016d01
    c9b4:	0000c6f9 	.word	0x0000c6f9
    c9b8:	00019564 	.word	0x00019564

0000c9bc <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    c9bc:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    c9be:	4b1c      	ldr	r3, [pc, #112]	; (ca30 <nm_drv_deinit+0x74>)
    c9c0:	4798      	blx	r3
    c9c2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c9c4:	d10b      	bne.n	c9de <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    c9c6:	2000      	movs	r0, #0
    c9c8:	4b1a      	ldr	r3, [pc, #104]	; (ca34 <nm_drv_deinit+0x78>)
    c9ca:	4798      	blx	r3
    c9cc:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c9ce:	d114      	bne.n	c9fa <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    c9d0:	4b19      	ldr	r3, [pc, #100]	; (ca38 <nm_drv_deinit+0x7c>)
    c9d2:	4798      	blx	r3
    c9d4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c9d6:	d11d      	bne.n	ca14 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    c9d8:	4b18      	ldr	r3, [pc, #96]	; (ca3c <nm_drv_deinit+0x80>)
    c9da:	4798      	blx	r3
    c9dc:	e00b      	b.n	c9f6 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    c9de:	2266      	movs	r2, #102	; 0x66
    c9e0:	32ff      	adds	r2, #255	; 0xff
    c9e2:	4917      	ldr	r1, [pc, #92]	; (ca40 <nm_drv_deinit+0x84>)
    c9e4:	4817      	ldr	r0, [pc, #92]	; (ca44 <nm_drv_deinit+0x88>)
    c9e6:	4b18      	ldr	r3, [pc, #96]	; (ca48 <nm_drv_deinit+0x8c>)
    c9e8:	4798      	blx	r3
    c9ea:	4818      	ldr	r0, [pc, #96]	; (ca4c <nm_drv_deinit+0x90>)
    c9ec:	4b18      	ldr	r3, [pc, #96]	; (ca50 <nm_drv_deinit+0x94>)
    c9ee:	4798      	blx	r3
    c9f0:	200d      	movs	r0, #13
    c9f2:	4b18      	ldr	r3, [pc, #96]	; (ca54 <nm_drv_deinit+0x98>)
    c9f4:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    c9f6:	0020      	movs	r0, r4
    c9f8:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    c9fa:	22b6      	movs	r2, #182	; 0xb6
    c9fc:	0052      	lsls	r2, r2, #1
    c9fe:	4910      	ldr	r1, [pc, #64]	; (ca40 <nm_drv_deinit+0x84>)
    ca00:	4810      	ldr	r0, [pc, #64]	; (ca44 <nm_drv_deinit+0x88>)
    ca02:	4b11      	ldr	r3, [pc, #68]	; (ca48 <nm_drv_deinit+0x8c>)
    ca04:	4798      	blx	r3
    ca06:	4814      	ldr	r0, [pc, #80]	; (ca58 <nm_drv_deinit+0x9c>)
    ca08:	4b11      	ldr	r3, [pc, #68]	; (ca50 <nm_drv_deinit+0x94>)
    ca0a:	4798      	blx	r3
    ca0c:	200d      	movs	r0, #13
    ca0e:	4b11      	ldr	r3, [pc, #68]	; (ca54 <nm_drv_deinit+0x98>)
    ca10:	4798      	blx	r3
		goto ERR1;
    ca12:	e7f0      	b.n	c9f6 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    ca14:	22b9      	movs	r2, #185	; 0xb9
    ca16:	0052      	lsls	r2, r2, #1
    ca18:	4909      	ldr	r1, [pc, #36]	; (ca40 <nm_drv_deinit+0x84>)
    ca1a:	480a      	ldr	r0, [pc, #40]	; (ca44 <nm_drv_deinit+0x88>)
    ca1c:	4b0a      	ldr	r3, [pc, #40]	; (ca48 <nm_drv_deinit+0x8c>)
    ca1e:	4798      	blx	r3
    ca20:	480e      	ldr	r0, [pc, #56]	; (ca5c <nm_drv_deinit+0xa0>)
    ca22:	4b0b      	ldr	r3, [pc, #44]	; (ca50 <nm_drv_deinit+0x94>)
    ca24:	4798      	blx	r3
    ca26:	200d      	movs	r0, #13
    ca28:	4b0a      	ldr	r3, [pc, #40]	; (ca54 <nm_drv_deinit+0x98>)
    ca2a:	4798      	blx	r3
		goto ERR1;
    ca2c:	e7e3      	b.n	c9f6 <nm_drv_deinit+0x3a>
    ca2e:	46c0      	nop			; (mov r8, r8)
    ca30:	0000c661 	.word	0x0000c661
    ca34:	0000df89 	.word	0x0000df89
    ca38:	0000c6f9 	.word	0x0000c6f9
    ca3c:	0000d0d5 	.word	0x0000d0d5
    ca40:	000194d4 	.word	0x000194d4
    ca44:	00018e64 	.word	0x00018e64
    ca48:	00016be5 	.word	0x00016be5
    ca4c:	000194e4 	.word	0x000194e4
    ca50:	00016d01 	.word	0x00016d01
    ca54:	00016c19 	.word	0x00016c19
    ca58:	00019504 	.word	0x00019504
    ca5c:	00019528 	.word	0x00019528

0000ca60 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    ca60:	b500      	push	{lr}
    ca62:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    ca64:	ab01      	add	r3, sp, #4
    ca66:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    ca68:	2200      	movs	r2, #0
    ca6a:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    ca6c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    ca6e:	0019      	movs	r1, r3
    ca70:	2003      	movs	r0, #3
    ca72:	4b02      	ldr	r3, [pc, #8]	; (ca7c <nmi_spi_write+0x1c>)
    ca74:	4798      	blx	r3
}
    ca76:	b005      	add	sp, #20
    ca78:	bd00      	pop	{pc}
    ca7a:	46c0      	nop			; (mov r8, r8)
    ca7c:	0000b081 	.word	0x0000b081

0000ca80 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    ca80:	b570      	push	{r4, r5, r6, lr}
    ca82:	b084      	sub	sp, #16
    ca84:	ac08      	add	r4, sp, #32
    ca86:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    ca88:	ac01      	add	r4, sp, #4
    ca8a:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    ca8c:	303f      	adds	r0, #63	; 0x3f
    ca8e:	b2c4      	uxtb	r4, r0
    ca90:	2c0e      	cmp	r4, #14
    ca92:	d900      	bls.n	ca96 <spi_cmd+0x16>
    ca94:	e084      	b.n	cba0 <spi_cmd+0x120>
    ca96:	00a0      	lsls	r0, r4, #2
    ca98:	4c4f      	ldr	r4, [pc, #316]	; (cbd8 <spi_cmd+0x158>)
    ca9a:	5820      	ldr	r0, [r4, r0]
    ca9c:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    ca9e:	ab01      	add	r3, sp, #4
    caa0:	0c0a      	lsrs	r2, r1, #16
    caa2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    caa4:	0a0a      	lsrs	r2, r1, #8
    caa6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    caa8:	70d9      	strb	r1, [r3, #3]
		len = 5;
    caaa:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    caac:	4b4b      	ldr	r3, [pc, #300]	; (cbdc <spi_cmd+0x15c>)
    caae:	781b      	ldrb	r3, [r3, #0]
    cab0:	2b00      	cmp	r3, #0
    cab2:	d077      	beq.n	cba4 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    cab4:	3901      	subs	r1, #1
    cab6:	b2c9      	uxtb	r1, r1
    cab8:	e083      	b.n	cbc2 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    caba:	0a0b      	lsrs	r3, r1, #8
    cabc:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    cabe:	2d00      	cmp	r5, #0
    cac0:	d107      	bne.n	cad2 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    cac2:	aa01      	add	r2, sp, #4
    cac4:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    cac6:	ab01      	add	r3, sp, #4
    cac8:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    caca:	2200      	movs	r2, #0
    cacc:	70da      	strb	r2, [r3, #3]
		len = 5;
    cace:	2105      	movs	r1, #5
		break;
    cad0:	e7ec      	b.n	caac <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    cad2:	2280      	movs	r2, #128	; 0x80
    cad4:	4252      	negs	r2, r2
    cad6:	4313      	orrs	r3, r2
    cad8:	aa01      	add	r2, sp, #4
    cada:	7053      	strb	r3, [r2, #1]
    cadc:	e7f3      	b.n	cac6 <spi_cmd+0x46>
		bc[1] = 0x00;
    cade:	ab01      	add	r3, sp, #4
    cae0:	2200      	movs	r2, #0
    cae2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    cae4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    cae6:	70da      	strb	r2, [r3, #3]
		len = 5;
    cae8:	2105      	movs	r1, #5
		break;
    caea:	e7df      	b.n	caac <spi_cmd+0x2c>
		bc[1] = 0x00;
    caec:	ab01      	add	r3, sp, #4
    caee:	2200      	movs	r2, #0
    caf0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    caf2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    caf4:	70da      	strb	r2, [r3, #3]
		len = 5;
    caf6:	2105      	movs	r1, #5
		break;
    caf8:	e7d8      	b.n	caac <spi_cmd+0x2c>
		bc[1] = 0xff;
    cafa:	ab01      	add	r3, sp, #4
    cafc:	22ff      	movs	r2, #255	; 0xff
    cafe:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    cb00:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    cb02:	70da      	strb	r2, [r3, #3]
		len = 5;
    cb04:	2105      	movs	r1, #5
		break;
    cb06:	e7d1      	b.n	caac <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    cb08:	aa01      	add	r2, sp, #4
    cb0a:	0c08      	lsrs	r0, r1, #16
    cb0c:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    cb0e:	0a08      	lsrs	r0, r1, #8
    cb10:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    cb12:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    cb14:	0a19      	lsrs	r1, r3, #8
    cb16:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    cb18:	7153      	strb	r3, [r2, #5]
		len = 7;
    cb1a:	2107      	movs	r1, #7
		break;
    cb1c:	e7c6      	b.n	caac <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    cb1e:	aa01      	add	r2, sp, #4
    cb20:	0c08      	lsrs	r0, r1, #16
    cb22:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    cb24:	0a08      	lsrs	r0, r1, #8
    cb26:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    cb28:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    cb2a:	0c19      	lsrs	r1, r3, #16
    cb2c:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    cb2e:	0a19      	lsrs	r1, r3, #8
    cb30:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    cb32:	7193      	strb	r3, [r2, #6]
		len = 8;
    cb34:	2108      	movs	r1, #8
		break;
    cb36:	e7b9      	b.n	caac <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    cb38:	0a0b      	lsrs	r3, r1, #8
    cb3a:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    cb3c:	2d00      	cmp	r5, #0
    cb3e:	d10c      	bne.n	cb5a <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    cb40:	a801      	add	r0, sp, #4
    cb42:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    cb44:	ab01      	add	r3, sp, #4
    cb46:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    cb48:	0e11      	lsrs	r1, r2, #24
    cb4a:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    cb4c:	0c11      	lsrs	r1, r2, #16
    cb4e:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    cb50:	0a11      	lsrs	r1, r2, #8
    cb52:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    cb54:	719a      	strb	r2, [r3, #6]
		len = 8;
    cb56:	2108      	movs	r1, #8
		break;
    cb58:	e7a8      	b.n	caac <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    cb5a:	2080      	movs	r0, #128	; 0x80
    cb5c:	4240      	negs	r0, r0
    cb5e:	4303      	orrs	r3, r0
    cb60:	a801      	add	r0, sp, #4
    cb62:	7043      	strb	r3, [r0, #1]
    cb64:	e7ee      	b.n	cb44 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    cb66:	ab01      	add	r3, sp, #4
    cb68:	0c08      	lsrs	r0, r1, #16
    cb6a:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    cb6c:	0a08      	lsrs	r0, r1, #8
    cb6e:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    cb70:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    cb72:	0e11      	lsrs	r1, r2, #24
    cb74:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    cb76:	0c11      	lsrs	r1, r2, #16
    cb78:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    cb7a:	0a11      	lsrs	r1, r2, #8
    cb7c:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    cb7e:	71da      	strb	r2, [r3, #7]
		len = 9;
    cb80:	2109      	movs	r1, #9
		break;
    cb82:	e793      	b.n	caac <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    cb84:	2290      	movs	r2, #144	; 0x90
    cb86:	0052      	lsls	r2, r2, #1
    cb88:	4915      	ldr	r1, [pc, #84]	; (cbe0 <spi_cmd+0x160>)
    cb8a:	4816      	ldr	r0, [pc, #88]	; (cbe4 <spi_cmd+0x164>)
    cb8c:	4b16      	ldr	r3, [pc, #88]	; (cbe8 <spi_cmd+0x168>)
    cb8e:	4798      	blx	r3
    cb90:	4816      	ldr	r0, [pc, #88]	; (cbec <spi_cmd+0x16c>)
    cb92:	4b17      	ldr	r3, [pc, #92]	; (cbf0 <spi_cmd+0x170>)
    cb94:	4798      	blx	r3
    cb96:	200d      	movs	r0, #13
    cb98:	4b16      	ldr	r3, [pc, #88]	; (cbf4 <spi_cmd+0x174>)
    cb9a:	4798      	blx	r3
			result = N_FAIL;
    cb9c:	2300      	movs	r3, #0
    cb9e:	e017      	b.n	cbd0 <spi_cmd+0x150>
	switch (cmd) {
    cba0:	2300      	movs	r3, #0
    cba2:	e015      	b.n	cbd0 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    cba4:	1e4e      	subs	r6, r1, #1
    cba6:	aa01      	add	r2, sp, #4
    cba8:	1995      	adds	r5, r2, r6
    cbaa:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    cbac:	4c12      	ldr	r4, [pc, #72]	; (cbf8 <spi_cmd+0x178>)
    cbae:	005b      	lsls	r3, r3, #1
    cbb0:	7810      	ldrb	r0, [r2, #0]
    cbb2:	4043      	eors	r3, r0
    cbb4:	5ce3      	ldrb	r3, [r4, r3]
    cbb6:	3201      	adds	r2, #1
	while (len--)
    cbb8:	42aa      	cmp	r2, r5
    cbba:	d1f8      	bne.n	cbae <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    cbbc:	005b      	lsls	r3, r3, #1
    cbbe:	aa01      	add	r2, sp, #4
    cbc0:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    cbc2:	b289      	uxth	r1, r1
    cbc4:	a801      	add	r0, sp, #4
    cbc6:	4b0d      	ldr	r3, [pc, #52]	; (cbfc <spi_cmd+0x17c>)
    cbc8:	4798      	blx	r3
    cbca:	2301      	movs	r3, #1
    cbcc:	2800      	cmp	r0, #0
    cbce:	d1d9      	bne.n	cb84 <spi_cmd+0x104>
		}
	}

	return result;
}
    cbd0:	0018      	movs	r0, r3
    cbd2:	b004      	add	sp, #16
    cbd4:	bd70      	pop	{r4, r5, r6, pc}
    cbd6:	46c0      	nop			; (mov r8, r8)
    cbd8:	00019590 	.word	0x00019590
    cbdc:	200003fc 	.word	0x200003fc
    cbe0:	000195d0 	.word	0x000195d0
    cbe4:	00018e64 	.word	0x00018e64
    cbe8:	00016be5 	.word	0x00016be5
    cbec:	00019a60 	.word	0x00019a60
    cbf0:	00016d01 	.word	0x00016d01
    cbf4:	00016c19 	.word	0x00016c19
    cbf8:	0001965c 	.word	0x0001965c
    cbfc:	0000ca61 	.word	0x0000ca61

0000cc00 <nmi_spi_read>:
{
    cc00:	b500      	push	{lr}
    cc02:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    cc04:	ab01      	add	r3, sp, #4
    cc06:	2200      	movs	r2, #0
    cc08:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    cc0a:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    cc0c:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cc0e:	0019      	movs	r1, r3
    cc10:	2003      	movs	r0, #3
    cc12:	4b02      	ldr	r3, [pc, #8]	; (cc1c <nmi_spi_read+0x1c>)
    cc14:	4798      	blx	r3
}
    cc16:	b005      	add	sp, #20
    cc18:	bd00      	pop	{pc}
    cc1a:	46c0      	nop			; (mov r8, r8)
    cc1c:	0000b081 	.word	0x0000b081

0000cc20 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    cc20:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc22:	46c6      	mov	lr, r8
    cc24:	b500      	push	{lr}
    cc26:	b082      	sub	sp, #8
    cc28:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    cc2a:	28cf      	cmp	r0, #207	; 0xcf
    cc2c:	d02b      	beq.n	cc86 <spi_cmd_rsp+0x66>
    cc2e:	0003      	movs	r3, r0
    cc30:	333b      	adds	r3, #59	; 0x3b
    cc32:	b2db      	uxtb	r3, r3
    cc34:	2b01      	cmp	r3, #1
    cc36:	d926      	bls.n	cc86 <spi_cmd_rsp+0x66>
{
    cc38:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cc3a:	466b      	mov	r3, sp
    cc3c:	1dde      	adds	r6, r3, #7
    cc3e:	4b26      	ldr	r3, [pc, #152]	; (ccd8 <spi_cmd_rsp+0xb8>)
    cc40:	4698      	mov	r8, r3
    cc42:	2101      	movs	r1, #1
    cc44:	0030      	movs	r0, r6
    cc46:	47c0      	blx	r8
    cc48:	1e05      	subs	r5, r0, #0
    cc4a:	d125      	bne.n	cc98 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    cc4c:	7833      	ldrb	r3, [r6, #0]
    cc4e:	42bb      	cmp	r3, r7
    cc50:	d030      	beq.n	ccb4 <spi_cmd_rsp+0x94>
    cc52:	3c01      	subs	r4, #1
    cc54:	b2e4      	uxtb	r4, r4
    cc56:	2c00      	cmp	r4, #0
    cc58:	d1f3      	bne.n	cc42 <spi_cmd_rsp+0x22>
    cc5a:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cc5c:	466b      	mov	r3, sp
    cc5e:	1dde      	adds	r6, r3, #7
    cc60:	4f1d      	ldr	r7, [pc, #116]	; (ccd8 <spi_cmd_rsp+0xb8>)
    cc62:	2101      	movs	r1, #1
    cc64:	0030      	movs	r0, r6
    cc66:	47b8      	blx	r7
    cc68:	2800      	cmp	r0, #0
    cc6a:	d125      	bne.n	ccb8 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    cc6c:	7833      	ldrb	r3, [r6, #0]
    cc6e:	2b00      	cmp	r3, #0
    cc70:	d02f      	beq.n	ccd2 <spi_cmd_rsp+0xb2>
    cc72:	3c01      	subs	r4, #1
    cc74:	b2e4      	uxtb	r4, r4
    cc76:	2c00      	cmp	r4, #0
    cc78:	d1f3      	bne.n	cc62 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    cc7a:	2501      	movs	r5, #1

_fail_:

	return result;
}
    cc7c:	0028      	movs	r0, r5
    cc7e:	b002      	add	sp, #8
    cc80:	bc04      	pop	{r2}
    cc82:	4690      	mov	r8, r2
    cc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cc86:	2101      	movs	r1, #1
    cc88:	466b      	mov	r3, sp
    cc8a:	1dd8      	adds	r0, r3, #7
    cc8c:	4b12      	ldr	r3, [pc, #72]	; (ccd8 <spi_cmd_rsp+0xb8>)
    cc8e:	4798      	blx	r3
			result = N_FAIL;
    cc90:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cc92:	2800      	cmp	r0, #0
    cc94:	d0d0      	beq.n	cc38 <spi_cmd_rsp+0x18>
    cc96:	e7f1      	b.n	cc7c <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    cc98:	225c      	movs	r2, #92	; 0x5c
    cc9a:	32ff      	adds	r2, #255	; 0xff
    cc9c:	490f      	ldr	r1, [pc, #60]	; (ccdc <spi_cmd_rsp+0xbc>)
    cc9e:	4810      	ldr	r0, [pc, #64]	; (cce0 <spi_cmd_rsp+0xc0>)
    cca0:	4b10      	ldr	r3, [pc, #64]	; (cce4 <spi_cmd_rsp+0xc4>)
    cca2:	4798      	blx	r3
    cca4:	4810      	ldr	r0, [pc, #64]	; (cce8 <spi_cmd_rsp+0xc8>)
    cca6:	4b11      	ldr	r3, [pc, #68]	; (ccec <spi_cmd_rsp+0xcc>)
    cca8:	4798      	blx	r3
    ccaa:	200d      	movs	r0, #13
    ccac:	4b10      	ldr	r3, [pc, #64]	; (ccf0 <spi_cmd_rsp+0xd0>)
    ccae:	4798      	blx	r3
			result = N_FAIL;
    ccb0:	2500      	movs	r5, #0
			goto _fail_;
    ccb2:	e7e3      	b.n	cc7c <spi_cmd_rsp+0x5c>
    ccb4:	240b      	movs	r4, #11
    ccb6:	e7d1      	b.n	cc5c <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    ccb8:	226a      	movs	r2, #106	; 0x6a
    ccba:	32ff      	adds	r2, #255	; 0xff
    ccbc:	4907      	ldr	r1, [pc, #28]	; (ccdc <spi_cmd_rsp+0xbc>)
    ccbe:	4808      	ldr	r0, [pc, #32]	; (cce0 <spi_cmd_rsp+0xc0>)
    ccc0:	4b08      	ldr	r3, [pc, #32]	; (cce4 <spi_cmd_rsp+0xc4>)
    ccc2:	4798      	blx	r3
    ccc4:	4808      	ldr	r0, [pc, #32]	; (cce8 <spi_cmd_rsp+0xc8>)
    ccc6:	4b09      	ldr	r3, [pc, #36]	; (ccec <spi_cmd_rsp+0xcc>)
    ccc8:	4798      	blx	r3
    ccca:	200d      	movs	r0, #13
    cccc:	4b08      	ldr	r3, [pc, #32]	; (ccf0 <spi_cmd_rsp+0xd0>)
    ccce:	4798      	blx	r3
			goto _fail_;
    ccd0:	e7d4      	b.n	cc7c <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    ccd2:	2501      	movs	r5, #1
    ccd4:	e7d2      	b.n	cc7c <spi_cmd_rsp+0x5c>
    ccd6:	46c0      	nop			; (mov r8, r8)
    ccd8:	0000cc01 	.word	0x0000cc01
    ccdc:	000195e8 	.word	0x000195e8
    cce0:	00018e64 	.word	0x00018e64
    cce4:	00016be5 	.word	0x00016be5
    cce8:	00019a8c 	.word	0x00019a8c
    ccec:	00016d01 	.word	0x00016d01
    ccf0:	00016c19 	.word	0x00016c19

0000ccf4 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    ccf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccf6:	46de      	mov	lr, fp
    ccf8:	4657      	mov	r7, sl
    ccfa:	464e      	mov	r6, r9
    ccfc:	4645      	mov	r5, r8
    ccfe:	b5e0      	push	{r5, r6, r7, lr}
    cd00:	b087      	sub	sp, #28
    cd02:	9001      	str	r0, [sp, #4]
    cd04:	4689      	mov	r9, r1
    cd06:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    cd08:	2300      	movs	r3, #0
    cd0a:	469a      	mov	sl, r3
    cd0c:	2380      	movs	r3, #128	; 0x80
    cd0e:	019b      	lsls	r3, r3, #6
    cd10:	469b      	mov	fp, r3
    cd12:	466a      	mov	r2, sp
    cd14:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cd16:	4b3c      	ldr	r3, [pc, #240]	; (ce08 <spi_data_read+0x114>)
    cd18:	4698      	mov	r8, r3
    cd1a:	e02f      	b.n	cd7c <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    cd1c:	22be      	movs	r2, #190	; 0xbe
    cd1e:	0092      	lsls	r2, r2, #2
    cd20:	493a      	ldr	r1, [pc, #232]	; (ce0c <spi_data_read+0x118>)
    cd22:	483b      	ldr	r0, [pc, #236]	; (ce10 <spi_data_read+0x11c>)
    cd24:	4b3b      	ldr	r3, [pc, #236]	; (ce14 <spi_data_read+0x120>)
    cd26:	4798      	blx	r3
    cd28:	483b      	ldr	r0, [pc, #236]	; (ce18 <spi_data_read+0x124>)
    cd2a:	4b3c      	ldr	r3, [pc, #240]	; (ce1c <spi_data_read+0x128>)
    cd2c:	4798      	blx	r3
    cd2e:	200d      	movs	r0, #13
    cd30:	4b3b      	ldr	r3, [pc, #236]	; (ce20 <spi_data_read+0x12c>)
    cd32:	4798      	blx	r3
    cd34:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    cd36:	0028      	movs	r0, r5
    cd38:	b007      	add	sp, #28
    cd3a:	bc3c      	pop	{r2, r3, r4, r5}
    cd3c:	4690      	mov	r8, r2
    cd3e:	4699      	mov	r9, r3
    cd40:	46a2      	mov	sl, r4
    cd42:	46ab      	mov	fp, r5
    cd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    cd46:	2c00      	cmp	r4, #0
    cd48:	dd2e      	ble.n	cda8 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    cd4a:	9b01      	ldr	r3, [sp, #4]
    cd4c:	4453      	add	r3, sl
    cd4e:	0018      	movs	r0, r3
    cd50:	0039      	movs	r1, r7
    cd52:	4b2d      	ldr	r3, [pc, #180]	; (ce08 <spi_data_read+0x114>)
    cd54:	4798      	blx	r3
    cd56:	1e04      	subs	r4, r0, #0
    cd58:	d134      	bne.n	cdc4 <spi_data_read+0xd0>
		if(!clockless)
    cd5a:	9b02      	ldr	r3, [sp, #8]
    cd5c:	2b00      	cmp	r3, #0
    cd5e:	d103      	bne.n	cd68 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    cd60:	4b30      	ldr	r3, [pc, #192]	; (ce24 <spi_data_read+0x130>)
    cd62:	781b      	ldrb	r3, [r3, #0]
    cd64:	2b00      	cmp	r3, #0
    cd66:	d039      	beq.n	cddc <spi_data_read+0xe8>
		ix += nbytes;
    cd68:	4653      	mov	r3, sl
    cd6a:	18fb      	adds	r3, r7, r3
    cd6c:	b21b      	sxth	r3, r3
    cd6e:	469a      	mov	sl, r3
		sz -= nbytes;
    cd70:	464b      	mov	r3, r9
    cd72:	1bdf      	subs	r7, r3, r7
    cd74:	b2bb      	uxth	r3, r7
    cd76:	4699      	mov	r9, r3
	} while (sz);
    cd78:	2b00      	cmp	r3, #0
    cd7a:	d043      	beq.n	ce04 <spi_data_read+0x110>
    cd7c:	464f      	mov	r7, r9
    cd7e:	45d9      	cmp	r9, fp
    cd80:	d901      	bls.n	cd86 <spi_data_read+0x92>
    cd82:	466b      	mov	r3, sp
    cd84:	89df      	ldrh	r7, [r3, #14]
    cd86:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    cd88:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cd8a:	ab04      	add	r3, sp, #16
    cd8c:	1cde      	adds	r6, r3, #3
    cd8e:	2101      	movs	r1, #1
    cd90:	0030      	movs	r0, r6
    cd92:	47c0      	blx	r8
    cd94:	1e05      	subs	r5, r0, #0
    cd96:	d1c1      	bne.n	cd1c <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    cd98:	7833      	ldrb	r3, [r6, #0]
    cd9a:	091b      	lsrs	r3, r3, #4
    cd9c:	2b0f      	cmp	r3, #15
    cd9e:	d0d2      	beq.n	cd46 <spi_data_read+0x52>
    cda0:	3c01      	subs	r4, #1
    cda2:	b224      	sxth	r4, r4
		} while (retry--);
    cda4:	1c63      	adds	r3, r4, #1
    cda6:	d1f2      	bne.n	cd8e <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    cda8:	22c1      	movs	r2, #193	; 0xc1
    cdaa:	0092      	lsls	r2, r2, #2
    cdac:	4917      	ldr	r1, [pc, #92]	; (ce0c <spi_data_read+0x118>)
    cdae:	4818      	ldr	r0, [pc, #96]	; (ce10 <spi_data_read+0x11c>)
    cdb0:	4c18      	ldr	r4, [pc, #96]	; (ce14 <spi_data_read+0x120>)
    cdb2:	47a0      	blx	r4
    cdb4:	ab04      	add	r3, sp, #16
    cdb6:	78d9      	ldrb	r1, [r3, #3]
    cdb8:	481b      	ldr	r0, [pc, #108]	; (ce28 <spi_data_read+0x134>)
    cdba:	47a0      	blx	r4
    cdbc:	200d      	movs	r0, #13
    cdbe:	4b18      	ldr	r3, [pc, #96]	; (ce20 <spi_data_read+0x12c>)
    cdc0:	4798      	blx	r3
			break;
    cdc2:	e7b8      	b.n	cd36 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    cdc4:	4a19      	ldr	r2, [pc, #100]	; (ce2c <spi_data_read+0x138>)
    cdc6:	4911      	ldr	r1, [pc, #68]	; (ce0c <spi_data_read+0x118>)
    cdc8:	4811      	ldr	r0, [pc, #68]	; (ce10 <spi_data_read+0x11c>)
    cdca:	4b12      	ldr	r3, [pc, #72]	; (ce14 <spi_data_read+0x120>)
    cdcc:	4798      	blx	r3
    cdce:	4818      	ldr	r0, [pc, #96]	; (ce30 <spi_data_read+0x13c>)
    cdd0:	4b12      	ldr	r3, [pc, #72]	; (ce1c <spi_data_read+0x128>)
    cdd2:	4798      	blx	r3
    cdd4:	200d      	movs	r0, #13
    cdd6:	4b12      	ldr	r3, [pc, #72]	; (ce20 <spi_data_read+0x12c>)
    cdd8:	4798      	blx	r3
			break;
    cdda:	e7ac      	b.n	cd36 <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    cddc:	2102      	movs	r1, #2
    cdde:	a805      	add	r0, sp, #20
    cde0:	4b09      	ldr	r3, [pc, #36]	; (ce08 <spi_data_read+0x114>)
    cde2:	4798      	blx	r3
    cde4:	2800      	cmp	r0, #0
    cde6:	d0bf      	beq.n	cd68 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    cde8:	22c6      	movs	r2, #198	; 0xc6
    cdea:	0092      	lsls	r2, r2, #2
    cdec:	4907      	ldr	r1, [pc, #28]	; (ce0c <spi_data_read+0x118>)
    cdee:	4808      	ldr	r0, [pc, #32]	; (ce10 <spi_data_read+0x11c>)
    cdf0:	4b08      	ldr	r3, [pc, #32]	; (ce14 <spi_data_read+0x120>)
    cdf2:	4798      	blx	r3
    cdf4:	480f      	ldr	r0, [pc, #60]	; (ce34 <spi_data_read+0x140>)
    cdf6:	4b09      	ldr	r3, [pc, #36]	; (ce1c <spi_data_read+0x128>)
    cdf8:	4798      	blx	r3
    cdfa:	200d      	movs	r0, #13
    cdfc:	4b08      	ldr	r3, [pc, #32]	; (ce20 <spi_data_read+0x12c>)
    cdfe:	4798      	blx	r3
					result = N_FAIL;
    ce00:	0025      	movs	r5, r4
					break;
    ce02:	e798      	b.n	cd36 <spi_data_read+0x42>
    ce04:	2501      	movs	r5, #1
    ce06:	e796      	b.n	cd36 <spi_data_read+0x42>
    ce08:	0000cc01 	.word	0x0000cc01
    ce0c:	000195f4 	.word	0x000195f4
    ce10:	00018e64 	.word	0x00018e64
    ce14:	00016be5 	.word	0x00016be5
    ce18:	00019ac0 	.word	0x00019ac0
    ce1c:	00016d01 	.word	0x00016d01
    ce20:	00016c19 	.word	0x00016c19
    ce24:	200003fc 	.word	0x200003fc
    ce28:	00019af4 	.word	0x00019af4
    ce2c:	0000030d 	.word	0x0000030d
    ce30:	00019b24 	.word	0x00019b24
    ce34:	00019b54 	.word	0x00019b54

0000ce38 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    ce38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce3a:	46d6      	mov	lr, sl
    ce3c:	464f      	mov	r7, r9
    ce3e:	4646      	mov	r6, r8
    ce40:	b5c0      	push	{r6, r7, lr}
    ce42:	b086      	sub	sp, #24
    ce44:	9003      	str	r0, [sp, #12]
    ce46:	9104      	str	r1, [sp, #16]
    ce48:	2830      	cmp	r0, #48	; 0x30
    ce4a:	d80f      	bhi.n	ce6c <spi_write_reg+0x34>
    ce4c:	4b30      	ldr	r3, [pc, #192]	; (cf10 <spi_write_reg+0xd8>)
    ce4e:	781f      	ldrb	r7, [r3, #0]
    ce50:	b2fb      	uxtb	r3, r7
    ce52:	9305      	str	r3, [sp, #20]
    ce54:	2300      	movs	r3, #0
    ce56:	2230      	movs	r2, #48	; 0x30
    ce58:	9903      	ldr	r1, [sp, #12]
    ce5a:	428a      	cmp	r2, r1
    ce5c:	415b      	adcs	r3, r3
    ce5e:	b2db      	uxtb	r3, r3
    ce60:	469a      	mov	sl, r3
    ce62:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    ce64:	4b2b      	ldr	r3, [pc, #172]	; (cf14 <spi_write_reg+0xdc>)
    ce66:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    ce68:	46d1      	mov	r9, sl
    ce6a:	e033      	b.n	ced4 <spi_write_reg+0x9c>
    ce6c:	4b2a      	ldr	r3, [pc, #168]	; (cf18 <spi_write_reg+0xe0>)
    ce6e:	781f      	ldrb	r7, [r3, #0]
    ce70:	e7ee      	b.n	ce50 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    ce72:	9805      	ldr	r0, [sp, #20]
    ce74:	4b29      	ldr	r3, [pc, #164]	; (cf1c <spi_write_reg+0xe4>)
    ce76:	4798      	blx	r3
    ce78:	0004      	movs	r4, r0
	if (result != N_OK) {
    ce7a:	2801      	cmp	r0, #1
    ce7c:	d041      	beq.n	cf02 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    ce7e:	4a28      	ldr	r2, [pc, #160]	; (cf20 <spi_write_reg+0xe8>)
    ce80:	4928      	ldr	r1, [pc, #160]	; (cf24 <spi_write_reg+0xec>)
    ce82:	4829      	ldr	r0, [pc, #164]	; (cf28 <spi_write_reg+0xf0>)
    ce84:	4e29      	ldr	r6, [pc, #164]	; (cf2c <spi_write_reg+0xf4>)
    ce86:	47b0      	blx	r6
    ce88:	9903      	ldr	r1, [sp, #12]
    ce8a:	4829      	ldr	r0, [pc, #164]	; (cf30 <spi_write_reg+0xf8>)
    ce8c:	47b0      	blx	r6
    ce8e:	200d      	movs	r0, #13
    ce90:	4b28      	ldr	r3, [pc, #160]	; (cf34 <spi_write_reg+0xfc>)
    ce92:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    ce94:	2001      	movs	r0, #1
    ce96:	4e28      	ldr	r6, [pc, #160]	; (cf38 <spi_write_reg+0x100>)
    ce98:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ce9a:	2300      	movs	r3, #0
    ce9c:	9300      	str	r3, [sp, #0]
    ce9e:	2200      	movs	r2, #0
    cea0:	2100      	movs	r1, #0
    cea2:	20cf      	movs	r0, #207	; 0xcf
    cea4:	4f1b      	ldr	r7, [pc, #108]	; (cf14 <spi_write_reg+0xdc>)
    cea6:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    cea8:	20cf      	movs	r0, #207	; 0xcf
    ceaa:	4b1c      	ldr	r3, [pc, #112]	; (cf1c <spi_write_reg+0xe4>)
    ceac:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    ceae:	22ea      	movs	r2, #234	; 0xea
    ceb0:	0092      	lsls	r2, r2, #2
    ceb2:	491c      	ldr	r1, [pc, #112]	; (cf24 <spi_write_reg+0xec>)
    ceb4:	481c      	ldr	r0, [pc, #112]	; (cf28 <spi_write_reg+0xf0>)
    ceb6:	4f1d      	ldr	r7, [pc, #116]	; (cf2c <spi_write_reg+0xf4>)
    ceb8:	47b8      	blx	r7
    ceba:	9b04      	ldr	r3, [sp, #16]
    cebc:	9a03      	ldr	r2, [sp, #12]
    cebe:	0029      	movs	r1, r5
    cec0:	481e      	ldr	r0, [pc, #120]	; (cf3c <spi_write_reg+0x104>)
    cec2:	47b8      	blx	r7
    cec4:	200d      	movs	r0, #13
    cec6:	4b1b      	ldr	r3, [pc, #108]	; (cf34 <spi_write_reg+0xfc>)
    cec8:	4798      	blx	r3
		nm_bsp_sleep(1);
    ceca:	2001      	movs	r0, #1
    cecc:	47b0      	blx	r6
    cece:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    ced0:	2d00      	cmp	r5, #0
    ced2:	d016      	beq.n	cf02 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    ced4:	464b      	mov	r3, r9
    ced6:	9300      	str	r3, [sp, #0]
    ced8:	2304      	movs	r3, #4
    ceda:	9a04      	ldr	r2, [sp, #16]
    cedc:	9f03      	ldr	r7, [sp, #12]
    cede:	0039      	movs	r1, r7
    cee0:	9805      	ldr	r0, [sp, #20]
    cee2:	47c0      	blx	r8
    cee4:	0004      	movs	r4, r0
	if (result != N_OK) {
    cee6:	2801      	cmp	r0, #1
    cee8:	d0c3      	beq.n	ce72 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    ceea:	4a15      	ldr	r2, [pc, #84]	; (cf40 <spi_write_reg+0x108>)
    ceec:	490d      	ldr	r1, [pc, #52]	; (cf24 <spi_write_reg+0xec>)
    ceee:	480e      	ldr	r0, [pc, #56]	; (cf28 <spi_write_reg+0xf0>)
    cef0:	4e0e      	ldr	r6, [pc, #56]	; (cf2c <spi_write_reg+0xf4>)
    cef2:	47b0      	blx	r6
    cef4:	0039      	movs	r1, r7
    cef6:	4813      	ldr	r0, [pc, #76]	; (cf44 <spi_write_reg+0x10c>)
    cef8:	47b0      	blx	r6
    cefa:	200d      	movs	r0, #13
    cefc:	4b0d      	ldr	r3, [pc, #52]	; (cf34 <spi_write_reg+0xfc>)
    cefe:	4798      	blx	r3
		goto _FAIL_;
    cf00:	e7c8      	b.n	ce94 <spi_write_reg+0x5c>
	}

	return result;
}
    cf02:	0020      	movs	r0, r4
    cf04:	b006      	add	sp, #24
    cf06:	bc1c      	pop	{r2, r3, r4}
    cf08:	4690      	mov	r8, r2
    cf0a:	4699      	mov	r9, r3
    cf0c:	46a2      	mov	sl, r4
    cf0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf10:	000195cc 	.word	0x000195cc
    cf14:	0000ca81 	.word	0x0000ca81
    cf18:	000195cd 	.word	0x000195cd
    cf1c:	0000cc21 	.word	0x0000cc21
    cf20:	00000395 	.word	0x00000395
    cf24:	00019614 	.word	0x00019614
    cf28:	00018e64 	.word	0x00018e64
    cf2c:	00016be5 	.word	0x00016be5
    cf30:	00019c4c 	.word	0x00019c4c
    cf34:	00016c19 	.word	0x00016c19
    cf38:	0000aec1 	.word	0x0000aec1
    cf3c:	00019c84 	.word	0x00019c84
    cf40:	0000038f 	.word	0x0000038f
    cf44:	00019c20 	.word	0x00019c20

0000cf48 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    cf48:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf4a:	46de      	mov	lr, fp
    cf4c:	4657      	mov	r7, sl
    cf4e:	464e      	mov	r6, r9
    cf50:	4645      	mov	r5, r8
    cf52:	b5e0      	push	{r5, r6, r7, lr}
    cf54:	b087      	sub	sp, #28
    cf56:	9002      	str	r0, [sp, #8]
    cf58:	468b      	mov	fp, r1
    cf5a:	28ff      	cmp	r0, #255	; 0xff
    cf5c:	d80f      	bhi.n	cf7e <spi_read_reg+0x36>
    cf5e:	4b41      	ldr	r3, [pc, #260]	; (d064 <spi_read_reg+0x11c>)
    cf60:	781f      	ldrb	r7, [r3, #0]
    cf62:	b2fb      	uxtb	r3, r7
    cf64:	9303      	str	r3, [sp, #12]
    cf66:	2300      	movs	r3, #0
    cf68:	22ff      	movs	r2, #255	; 0xff
    cf6a:	9902      	ldr	r1, [sp, #8]
    cf6c:	428a      	cmp	r2, r1
    cf6e:	415b      	adcs	r3, r3
    cf70:	b2db      	uxtb	r3, r3
    cf72:	469a      	mov	sl, r3
    cf74:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    cf76:	4b3c      	ldr	r3, [pc, #240]	; (d068 <spi_read_reg+0x120>)
    cf78:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    cf7a:	46d1      	mov	r9, sl
    cf7c:	e031      	b.n	cfe2 <spi_read_reg+0x9a>
    cf7e:	4b3b      	ldr	r3, [pc, #236]	; (d06c <spi_read_reg+0x124>)
    cf80:	781f      	ldrb	r7, [r3, #0]
    cf82:	e7ee      	b.n	cf62 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    cf84:	9803      	ldr	r0, [sp, #12]
    cf86:	4b3a      	ldr	r3, [pc, #232]	; (d070 <spi_read_reg+0x128>)
    cf88:	4798      	blx	r3
    cf8a:	0004      	movs	r4, r0
	if (result != N_OK) {
    cf8c:	2801      	cmp	r0, #1
    cf8e:	d040      	beq.n	d012 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    cf90:	4a38      	ldr	r2, [pc, #224]	; (d074 <spi_read_reg+0x12c>)
    cf92:	4939      	ldr	r1, [pc, #228]	; (d078 <spi_read_reg+0x130>)
    cf94:	4839      	ldr	r0, [pc, #228]	; (d07c <spi_read_reg+0x134>)
    cf96:	4e3a      	ldr	r6, [pc, #232]	; (d080 <spi_read_reg+0x138>)
    cf98:	47b0      	blx	r6
    cf9a:	9902      	ldr	r1, [sp, #8]
    cf9c:	4839      	ldr	r0, [pc, #228]	; (d084 <spi_read_reg+0x13c>)
    cf9e:	47b0      	blx	r6
    cfa0:	200d      	movs	r0, #13
    cfa2:	4b39      	ldr	r3, [pc, #228]	; (d088 <spi_read_reg+0x140>)
    cfa4:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    cfa6:	2001      	movs	r0, #1
    cfa8:	4e38      	ldr	r6, [pc, #224]	; (d08c <spi_read_reg+0x144>)
    cfaa:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    cfac:	2300      	movs	r3, #0
    cfae:	9300      	str	r3, [sp, #0]
    cfb0:	2200      	movs	r2, #0
    cfb2:	2100      	movs	r1, #0
    cfb4:	20cf      	movs	r0, #207	; 0xcf
    cfb6:	4f2c      	ldr	r7, [pc, #176]	; (d068 <spi_read_reg+0x120>)
    cfb8:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    cfba:	20cf      	movs	r0, #207	; 0xcf
    cfbc:	4b2c      	ldr	r3, [pc, #176]	; (d070 <spi_read_reg+0x128>)
    cfbe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    cfc0:	4a33      	ldr	r2, [pc, #204]	; (d090 <spi_read_reg+0x148>)
    cfc2:	492d      	ldr	r1, [pc, #180]	; (d078 <spi_read_reg+0x130>)
    cfc4:	482d      	ldr	r0, [pc, #180]	; (d07c <spi_read_reg+0x134>)
    cfc6:	4f2e      	ldr	r7, [pc, #184]	; (d080 <spi_read_reg+0x138>)
    cfc8:	47b8      	blx	r7
    cfca:	9a02      	ldr	r2, [sp, #8]
    cfcc:	0029      	movs	r1, r5
    cfce:	4831      	ldr	r0, [pc, #196]	; (d094 <spi_read_reg+0x14c>)
    cfd0:	47b8      	blx	r7
    cfd2:	200d      	movs	r0, #13
    cfd4:	4b2c      	ldr	r3, [pc, #176]	; (d088 <spi_read_reg+0x140>)
    cfd6:	4798      	blx	r3
		nm_bsp_sleep(1);
    cfd8:	2001      	movs	r0, #1
    cfda:	47b0      	blx	r6
    cfdc:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    cfde:	2d00      	cmp	r5, #0
    cfe0:	d038      	beq.n	d054 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    cfe2:	464b      	mov	r3, r9
    cfe4:	9300      	str	r3, [sp, #0]
    cfe6:	2304      	movs	r3, #4
    cfe8:	2200      	movs	r2, #0
    cfea:	9f02      	ldr	r7, [sp, #8]
    cfec:	0039      	movs	r1, r7
    cfee:	9803      	ldr	r0, [sp, #12]
    cff0:	47c0      	blx	r8
    cff2:	0004      	movs	r4, r0
	if (result != N_OK) {
    cff4:	2801      	cmp	r0, #1
    cff6:	d0c5      	beq.n	cf84 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    cff8:	2282      	movs	r2, #130	; 0x82
    cffa:	00d2      	lsls	r2, r2, #3
    cffc:	491e      	ldr	r1, [pc, #120]	; (d078 <spi_read_reg+0x130>)
    cffe:	481f      	ldr	r0, [pc, #124]	; (d07c <spi_read_reg+0x134>)
    d000:	4e1f      	ldr	r6, [pc, #124]	; (d080 <spi_read_reg+0x138>)
    d002:	47b0      	blx	r6
    d004:	0039      	movs	r1, r7
    d006:	4824      	ldr	r0, [pc, #144]	; (d098 <spi_read_reg+0x150>)
    d008:	47b0      	blx	r6
    d00a:	200d      	movs	r0, #13
    d00c:	4b1e      	ldr	r3, [pc, #120]	; (d088 <spi_read_reg+0x140>)
    d00e:	4798      	blx	r3
		goto _FAIL_;
    d010:	e7c9      	b.n	cfa6 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    d012:	464a      	mov	r2, r9
    d014:	2104      	movs	r1, #4
    d016:	a805      	add	r0, sp, #20
    d018:	4b20      	ldr	r3, [pc, #128]	; (d09c <spi_read_reg+0x154>)
    d01a:	4798      	blx	r3
    d01c:	0004      	movs	r4, r0
	if (result != N_OK) {
    d01e:	2801      	cmp	r0, #1
    d020:	d00b      	beq.n	d03a <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    d022:	4a1f      	ldr	r2, [pc, #124]	; (d0a0 <spi_read_reg+0x158>)
    d024:	4914      	ldr	r1, [pc, #80]	; (d078 <spi_read_reg+0x130>)
    d026:	4815      	ldr	r0, [pc, #84]	; (d07c <spi_read_reg+0x134>)
    d028:	4b15      	ldr	r3, [pc, #84]	; (d080 <spi_read_reg+0x138>)
    d02a:	4798      	blx	r3
    d02c:	481d      	ldr	r0, [pc, #116]	; (d0a4 <spi_read_reg+0x15c>)
    d02e:	4b1e      	ldr	r3, [pc, #120]	; (d0a8 <spi_read_reg+0x160>)
    d030:	4798      	blx	r3
    d032:	200d      	movs	r0, #13
    d034:	4b14      	ldr	r3, [pc, #80]	; (d088 <spi_read_reg+0x140>)
    d036:	4798      	blx	r3
		goto _FAIL_;
    d038:	e7b5      	b.n	cfa6 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    d03a:	aa05      	add	r2, sp, #20
    d03c:	7853      	ldrb	r3, [r2, #1]
    d03e:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    d040:	7891      	ldrb	r1, [r2, #2]
    d042:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    d044:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    d046:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    d048:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    d04a:	78d2      	ldrb	r2, [r2, #3]
    d04c:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    d04e:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    d050:	465a      	mov	r2, fp
    d052:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    d054:	0020      	movs	r0, r4
    d056:	b007      	add	sp, #28
    d058:	bc3c      	pop	{r2, r3, r4, r5}
    d05a:	4690      	mov	r8, r2
    d05c:	4699      	mov	r9, r3
    d05e:	46a2      	mov	sl, r4
    d060:	46ab      	mov	fp, r5
    d062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d064:	000195ce 	.word	0x000195ce
    d068:	0000ca81 	.word	0x0000ca81
    d06c:	000195cf 	.word	0x000195cf
    d070:	0000cc21 	.word	0x0000cc21
    d074:	00000416 	.word	0x00000416
    d078:	00019634 	.word	0x00019634
    d07c:	00018e64 	.word	0x00018e64
    d080:	00016be5 	.word	0x00016be5
    d084:	00019bb4 	.word	0x00019bb4
    d088:	00016c19 	.word	0x00016c19
    d08c:	0000aec1 	.word	0x0000aec1
    d090:	00000435 	.word	0x00000435
    d094:	00019c08 	.word	0x00019c08
    d098:	00019b88 	.word	0x00019b88
    d09c:	0000ccf5 	.word	0x0000ccf5
    d0a0:	0000041d 	.word	0x0000041d
    d0a4:	00019be8 	.word	0x00019be8
    d0a8:	00016d01 	.word	0x00016d01

0000d0ac <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    d0ac:	b510      	push	{r4, lr}
    d0ae:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d0b0:	2300      	movs	r3, #0
    d0b2:	9300      	str	r3, [sp, #0]
    d0b4:	2200      	movs	r2, #0
    d0b6:	2100      	movs	r1, #0
    d0b8:	20cf      	movs	r0, #207	; 0xcf
    d0ba:	4c04      	ldr	r4, [pc, #16]	; (d0cc <nm_spi_reset+0x20>)
    d0bc:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    d0be:	20cf      	movs	r0, #207	; 0xcf
    d0c0:	4b03      	ldr	r3, [pc, #12]	; (d0d0 <nm_spi_reset+0x24>)
    d0c2:	4798      	blx	r3
	return M2M_SUCCESS;
}
    d0c4:	2000      	movs	r0, #0
    d0c6:	b002      	add	sp, #8
    d0c8:	bd10      	pop	{r4, pc}
    d0ca:	46c0      	nop			; (mov r8, r8)
    d0cc:	0000ca81 	.word	0x0000ca81
    d0d0:	0000cc21 	.word	0x0000cc21

0000d0d4 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    d0d4:	2200      	movs	r2, #0
    d0d6:	4b02      	ldr	r3, [pc, #8]	; (d0e0 <nm_spi_deinit+0xc>)
    d0d8:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    d0da:	2000      	movs	r0, #0
    d0dc:	4770      	bx	lr
    d0de:	46c0      	nop			; (mov r8, r8)
    d0e0:	200003fc 	.word	0x200003fc

0000d0e4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    d0e4:	b500      	push	{lr}
    d0e6:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    d0e8:	a901      	add	r1, sp, #4
    d0ea:	4b02      	ldr	r3, [pc, #8]	; (d0f4 <nm_spi_read_reg+0x10>)
    d0ec:	4798      	blx	r3

	return u32Val;
}
    d0ee:	9801      	ldr	r0, [sp, #4]
    d0f0:	b003      	add	sp, #12
    d0f2:	bd00      	pop	{pc}
    d0f4:	0000cf49 	.word	0x0000cf49

0000d0f8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    d0f8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    d0fa:	4b04      	ldr	r3, [pc, #16]	; (d10c <nm_spi_read_reg_with_ret+0x14>)
    d0fc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d0fe:	2300      	movs	r3, #0
    d100:	2801      	cmp	r0, #1
    d102:	d101      	bne.n	d108 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    d104:	0018      	movs	r0, r3
    d106:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    d108:	3b06      	subs	r3, #6
    d10a:	e7fb      	b.n	d104 <nm_spi_read_reg_with_ret+0xc>
    d10c:	0000cf49 	.word	0x0000cf49

0000d110 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    d110:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    d112:	4b04      	ldr	r3, [pc, #16]	; (d124 <nm_spi_write_reg+0x14>)
    d114:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d116:	2300      	movs	r3, #0
    d118:	2801      	cmp	r0, #1
    d11a:	d101      	bne.n	d120 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    d11c:	0018      	movs	r0, r3
    d11e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    d120:	3b06      	subs	r3, #6
    d122:	e7fb      	b.n	d11c <nm_spi_write_reg+0xc>
    d124:	0000ce39 	.word	0x0000ce39

0000d128 <nm_spi_init>:
{
    d128:	b510      	push	{r4, lr}
    d12a:	b082      	sub	sp, #8
	uint32 reg = 0;
    d12c:	2300      	movs	r3, #0
    d12e:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    d130:	4a35      	ldr	r2, [pc, #212]	; (d208 <nm_spi_init+0xe0>)
    d132:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    d134:	4669      	mov	r1, sp
    d136:	4835      	ldr	r0, [pc, #212]	; (d20c <nm_spi_init+0xe4>)
    d138:	4b35      	ldr	r3, [pc, #212]	; (d210 <nm_spi_init+0xe8>)
    d13a:	4798      	blx	r3
    d13c:	2800      	cmp	r0, #0
    d13e:	d028      	beq.n	d192 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    d140:	4b31      	ldr	r3, [pc, #196]	; (d208 <nm_spi_init+0xe0>)
    d142:	781b      	ldrb	r3, [r3, #0]
    d144:	2b00      	cmp	r3, #0
    d146:	d10d      	bne.n	d164 <nm_spi_init+0x3c>
		reg &= ~0x70;
    d148:	337c      	adds	r3, #124	; 0x7c
    d14a:	9900      	ldr	r1, [sp, #0]
    d14c:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    d14e:	3b2c      	subs	r3, #44	; 0x2c
    d150:	4319      	orrs	r1, r3
    d152:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    d154:	482d      	ldr	r0, [pc, #180]	; (d20c <nm_spi_init+0xe4>)
    d156:	4b2f      	ldr	r3, [pc, #188]	; (d214 <nm_spi_init+0xec>)
    d158:	4798      	blx	r3
    d15a:	1e04      	subs	r4, r0, #0
    d15c:	d03a      	beq.n	d1d4 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    d15e:	2201      	movs	r2, #1
    d160:	4b29      	ldr	r3, [pc, #164]	; (d208 <nm_spi_init+0xe0>)
    d162:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    d164:	a901      	add	r1, sp, #4
    d166:	2080      	movs	r0, #128	; 0x80
    d168:	0140      	lsls	r0, r0, #5
    d16a:	4b29      	ldr	r3, [pc, #164]	; (d210 <nm_spi_init+0xe8>)
    d16c:	4798      	blx	r3
    d16e:	2800      	cmp	r0, #0
    d170:	d03c      	beq.n	d1ec <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    d172:	4c26      	ldr	r4, [pc, #152]	; (d20c <nm_spi_init+0xe4>)
    d174:	0020      	movs	r0, r4
    d176:	4b28      	ldr	r3, [pc, #160]	; (d218 <nm_spi_init+0xf0>)
    d178:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    d17a:	2370      	movs	r3, #112	; 0x70
    d17c:	0001      	movs	r1, r0
    d17e:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    d180:	2050      	movs	r0, #80	; 0x50
    d182:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    d184:	0020      	movs	r0, r4
    d186:	4b25      	ldr	r3, [pc, #148]	; (d21c <nm_spi_init+0xf4>)
    d188:	4798      	blx	r3
	return M2M_SUCCESS;
    d18a:	2400      	movs	r4, #0
}
    d18c:	0020      	movs	r0, r4
    d18e:	b002      	add	sp, #8
    d190:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    d192:	2201      	movs	r2, #1
    d194:	4b1c      	ldr	r3, [pc, #112]	; (d208 <nm_spi_init+0xe0>)
    d196:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    d198:	2298      	movs	r2, #152	; 0x98
    d19a:	00d2      	lsls	r2, r2, #3
    d19c:	4920      	ldr	r1, [pc, #128]	; (d220 <nm_spi_init+0xf8>)
    d19e:	4821      	ldr	r0, [pc, #132]	; (d224 <nm_spi_init+0xfc>)
    d1a0:	4b21      	ldr	r3, [pc, #132]	; (d228 <nm_spi_init+0x100>)
    d1a2:	4798      	blx	r3
    d1a4:	4821      	ldr	r0, [pc, #132]	; (d22c <nm_spi_init+0x104>)
    d1a6:	4b22      	ldr	r3, [pc, #136]	; (d230 <nm_spi_init+0x108>)
    d1a8:	4798      	blx	r3
    d1aa:	200d      	movs	r0, #13
    d1ac:	4b21      	ldr	r3, [pc, #132]	; (d234 <nm_spi_init+0x10c>)
    d1ae:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    d1b0:	4669      	mov	r1, sp
    d1b2:	4816      	ldr	r0, [pc, #88]	; (d20c <nm_spi_init+0xe4>)
    d1b4:	4b16      	ldr	r3, [pc, #88]	; (d210 <nm_spi_init+0xe8>)
    d1b6:	4798      	blx	r3
    d1b8:	1e04      	subs	r4, r0, #0
    d1ba:	d1c1      	bne.n	d140 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    d1bc:	4a1e      	ldr	r2, [pc, #120]	; (d238 <nm_spi_init+0x110>)
    d1be:	4918      	ldr	r1, [pc, #96]	; (d220 <nm_spi_init+0xf8>)
    d1c0:	4818      	ldr	r0, [pc, #96]	; (d224 <nm_spi_init+0xfc>)
    d1c2:	4b19      	ldr	r3, [pc, #100]	; (d228 <nm_spi_init+0x100>)
    d1c4:	4798      	blx	r3
    d1c6:	481d      	ldr	r0, [pc, #116]	; (d23c <nm_spi_init+0x114>)
    d1c8:	4b19      	ldr	r3, [pc, #100]	; (d230 <nm_spi_init+0x108>)
    d1ca:	4798      	blx	r3
    d1cc:	200d      	movs	r0, #13
    d1ce:	4b19      	ldr	r3, [pc, #100]	; (d234 <nm_spi_init+0x10c>)
    d1d0:	4798      	blx	r3
			return 0;
    d1d2:	e7db      	b.n	d18c <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    d1d4:	4a1a      	ldr	r2, [pc, #104]	; (d240 <nm_spi_init+0x118>)
    d1d6:	4912      	ldr	r1, [pc, #72]	; (d220 <nm_spi_init+0xf8>)
    d1d8:	4812      	ldr	r0, [pc, #72]	; (d224 <nm_spi_init+0xfc>)
    d1da:	4b13      	ldr	r3, [pc, #76]	; (d228 <nm_spi_init+0x100>)
    d1dc:	4798      	blx	r3
    d1de:	4819      	ldr	r0, [pc, #100]	; (d244 <nm_spi_init+0x11c>)
    d1e0:	4b13      	ldr	r3, [pc, #76]	; (d230 <nm_spi_init+0x108>)
    d1e2:	4798      	blx	r3
    d1e4:	200d      	movs	r0, #13
    d1e6:	4b13      	ldr	r3, [pc, #76]	; (d234 <nm_spi_init+0x10c>)
    d1e8:	4798      	blx	r3
			return 0;
    d1ea:	e7cf      	b.n	d18c <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    d1ec:	4a16      	ldr	r2, [pc, #88]	; (d248 <nm_spi_init+0x120>)
    d1ee:	490c      	ldr	r1, [pc, #48]	; (d220 <nm_spi_init+0xf8>)
    d1f0:	480c      	ldr	r0, [pc, #48]	; (d224 <nm_spi_init+0xfc>)
    d1f2:	4b0d      	ldr	r3, [pc, #52]	; (d228 <nm_spi_init+0x100>)
    d1f4:	4798      	blx	r3
    d1f6:	4815      	ldr	r0, [pc, #84]	; (d24c <nm_spi_init+0x124>)
    d1f8:	4b0d      	ldr	r3, [pc, #52]	; (d230 <nm_spi_init+0x108>)
    d1fa:	4798      	blx	r3
    d1fc:	200d      	movs	r0, #13
    d1fe:	4b0d      	ldr	r3, [pc, #52]	; (d234 <nm_spi_init+0x10c>)
    d200:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    d202:	2406      	movs	r4, #6
    d204:	4264      	negs	r4, r4
    d206:	e7c1      	b.n	d18c <nm_spi_init+0x64>
    d208:	200003fc 	.word	0x200003fc
    d20c:	0000e824 	.word	0x0000e824
    d210:	0000cf49 	.word	0x0000cf49
    d214:	0000ce39 	.word	0x0000ce39
    d218:	0000d0e5 	.word	0x0000d0e5
    d21c:	0000d111 	.word	0x0000d111
    d220:	00019650 	.word	0x00019650
    d224:	00018e64 	.word	0x00018e64
    d228:	00016be5 	.word	0x00016be5
    d22c:	0001975c 	.word	0x0001975c
    d230:	00016d01 	.word	0x00016d01
    d234:	00016c19 	.word	0x00016c19
    d238:	000004c3 	.word	0x000004c3
    d23c:	000197ac 	.word	0x000197ac
    d240:	000004cd 	.word	0x000004cd
    d244:	000197d8 	.word	0x000197d8
    d248:	000004d7 	.word	0x000004d7
    d24c:	0001980c 	.word	0x0001980c

0000d250 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    d250:	b5f0      	push	{r4, r5, r6, r7, lr}
    d252:	46de      	mov	lr, fp
    d254:	4657      	mov	r7, sl
    d256:	464e      	mov	r6, r9
    d258:	4645      	mov	r5, r8
    d25a:	b5e0      	push	{r5, r6, r7, lr}
    d25c:	b087      	sub	sp, #28
    d25e:	9002      	str	r0, [sp, #8]
    d260:	9103      	str	r1, [sp, #12]
    d262:	0016      	movs	r6, r2
    d264:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    d266:	2300      	movs	r3, #0
    d268:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    d26a:	2400      	movs	r4, #0
    d26c:	4b3e      	ldr	r3, [pc, #248]	; (d368 <nm_spi_read_block+0x118>)
    d26e:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    d270:	46a9      	mov	r9, r5
    d272:	e037      	b.n	d2e4 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    d274:	2301      	movs	r3, #1
    d276:	469b      	mov	fp, r3
		size = 2;
    d278:	3601      	adds	r6, #1
    d27a:	e035      	b.n	d2e8 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    d27c:	20c8      	movs	r0, #200	; 0xc8
    d27e:	4b3b      	ldr	r3, [pc, #236]	; (d36c <nm_spi_read_block+0x11c>)
    d280:	4798      	blx	r3
	if (result != N_OK) {
    d282:	2801      	cmp	r0, #1
    d284:	d045      	beq.n	d312 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    d286:	4a3a      	ldr	r2, [pc, #232]	; (d370 <nm_spi_read_block+0x120>)
    d288:	493a      	ldr	r1, [pc, #232]	; (d374 <nm_spi_read_block+0x124>)
    d28a:	483b      	ldr	r0, [pc, #236]	; (d378 <nm_spi_read_block+0x128>)
    d28c:	4f3b      	ldr	r7, [pc, #236]	; (d37c <nm_spi_read_block+0x12c>)
    d28e:	47b8      	blx	r7
    d290:	9902      	ldr	r1, [sp, #8]
    d292:	483b      	ldr	r0, [pc, #236]	; (d380 <nm_spi_read_block+0x130>)
    d294:	47b8      	blx	r7
    d296:	200d      	movs	r0, #13
    d298:	4b3a      	ldr	r3, [pc, #232]	; (d384 <nm_spi_read_block+0x134>)
    d29a:	4798      	blx	r3
		nm_bsp_sleep(1);
    d29c:	2001      	movs	r0, #1
    d29e:	4f3a      	ldr	r7, [pc, #232]	; (d388 <nm_spi_read_block+0x138>)
    d2a0:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d2a2:	9400      	str	r4, [sp, #0]
    d2a4:	0023      	movs	r3, r4
    d2a6:	0022      	movs	r2, r4
    d2a8:	0021      	movs	r1, r4
    d2aa:	20cf      	movs	r0, #207	; 0xcf
    d2ac:	4d2e      	ldr	r5, [pc, #184]	; (d368 <nm_spi_read_block+0x118>)
    d2ae:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    d2b0:	20cf      	movs	r0, #207	; 0xcf
    d2b2:	4b2e      	ldr	r3, [pc, #184]	; (d36c <nm_spi_read_block+0x11c>)
    d2b4:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    d2b6:	4a35      	ldr	r2, [pc, #212]	; (d38c <nm_spi_read_block+0x13c>)
    d2b8:	492e      	ldr	r1, [pc, #184]	; (d374 <nm_spi_read_block+0x124>)
    d2ba:	482f      	ldr	r0, [pc, #188]	; (d378 <nm_spi_read_block+0x128>)
    d2bc:	4b2f      	ldr	r3, [pc, #188]	; (d37c <nm_spi_read_block+0x12c>)
    d2be:	469a      	mov	sl, r3
    d2c0:	4798      	blx	r3
    d2c2:	0033      	movs	r3, r6
    d2c4:	9a02      	ldr	r2, [sp, #8]
    d2c6:	4649      	mov	r1, r9
    d2c8:	4831      	ldr	r0, [pc, #196]	; (d390 <nm_spi_read_block+0x140>)
    d2ca:	47d0      	blx	sl
    d2cc:	200d      	movs	r0, #13
    d2ce:	4b2d      	ldr	r3, [pc, #180]	; (d384 <nm_spi_read_block+0x134>)
    d2d0:	4798      	blx	r3
		nm_bsp_sleep(1);
    d2d2:	2001      	movs	r0, #1
    d2d4:	47b8      	blx	r7
    d2d6:	2301      	movs	r3, #1
    d2d8:	425b      	negs	r3, r3
    d2da:	469c      	mov	ip, r3
    d2dc:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    d2de:	464b      	mov	r3, r9
    d2e0:	2b00      	cmp	r3, #0
    d2e2:	d038      	beq.n	d356 <nm_spi_read_block+0x106>
	if (size == 1)
    d2e4:	2e01      	cmp	r6, #1
    d2e6:	d0c5      	beq.n	d274 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    d2e8:	9400      	str	r4, [sp, #0]
    d2ea:	0033      	movs	r3, r6
    d2ec:	0022      	movs	r2, r4
    d2ee:	9d02      	ldr	r5, [sp, #8]
    d2f0:	0029      	movs	r1, r5
    d2f2:	20c8      	movs	r0, #200	; 0xc8
    d2f4:	47c0      	blx	r8
	if (result != N_OK) {
    d2f6:	2801      	cmp	r0, #1
    d2f8:	d0c0      	beq.n	d27c <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    d2fa:	4a26      	ldr	r2, [pc, #152]	; (d394 <nm_spi_read_block+0x144>)
    d2fc:	491d      	ldr	r1, [pc, #116]	; (d374 <nm_spi_read_block+0x124>)
    d2fe:	481e      	ldr	r0, [pc, #120]	; (d378 <nm_spi_read_block+0x128>)
    d300:	4f1e      	ldr	r7, [pc, #120]	; (d37c <nm_spi_read_block+0x12c>)
    d302:	47b8      	blx	r7
    d304:	0029      	movs	r1, r5
    d306:	4824      	ldr	r0, [pc, #144]	; (d398 <nm_spi_read_block+0x148>)
    d308:	47b8      	blx	r7
    d30a:	200d      	movs	r0, #13
    d30c:	4b1d      	ldr	r3, [pc, #116]	; (d384 <nm_spi_read_block+0x134>)
    d30e:	4798      	blx	r3
    d310:	e7c4      	b.n	d29c <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    d312:	465b      	mov	r3, fp
    d314:	2b00      	cmp	r3, #0
    d316:	d016      	beq.n	d346 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    d318:	af05      	add	r7, sp, #20
    d31a:	0022      	movs	r2, r4
    d31c:	0031      	movs	r1, r6
    d31e:	0038      	movs	r0, r7
    d320:	4b1e      	ldr	r3, [pc, #120]	; (d39c <nm_spi_read_block+0x14c>)
    d322:	4798      	blx	r3
		buf[0] = tmp[0];
    d324:	783b      	ldrb	r3, [r7, #0]
    d326:	9a03      	ldr	r2, [sp, #12]
    d328:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    d32a:	2801      	cmp	r0, #1
    d32c:	d011      	beq.n	d352 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    d32e:	4a1c      	ldr	r2, [pc, #112]	; (d3a0 <nm_spi_read_block+0x150>)
    d330:	4910      	ldr	r1, [pc, #64]	; (d374 <nm_spi_read_block+0x124>)
    d332:	4811      	ldr	r0, [pc, #68]	; (d378 <nm_spi_read_block+0x128>)
    d334:	4b11      	ldr	r3, [pc, #68]	; (d37c <nm_spi_read_block+0x12c>)
    d336:	4798      	blx	r3
    d338:	481a      	ldr	r0, [pc, #104]	; (d3a4 <nm_spi_read_block+0x154>)
    d33a:	4b1b      	ldr	r3, [pc, #108]	; (d3a8 <nm_spi_read_block+0x158>)
    d33c:	4798      	blx	r3
    d33e:	200d      	movs	r0, #13
    d340:	4b10      	ldr	r3, [pc, #64]	; (d384 <nm_spi_read_block+0x134>)
    d342:	4798      	blx	r3
    d344:	e7aa      	b.n	d29c <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    d346:	0022      	movs	r2, r4
    d348:	0031      	movs	r1, r6
    d34a:	9803      	ldr	r0, [sp, #12]
    d34c:	4b13      	ldr	r3, [pc, #76]	; (d39c <nm_spi_read_block+0x14c>)
    d34e:	4798      	blx	r3
    d350:	e7eb      	b.n	d32a <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d352:	2000      	movs	r0, #0
    d354:	e001      	b.n	d35a <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    d356:	2006      	movs	r0, #6
    d358:	4240      	negs	r0, r0

	return s8Ret;
}
    d35a:	b007      	add	sp, #28
    d35c:	bc3c      	pop	{r2, r3, r4, r5}
    d35e:	4690      	mov	r8, r2
    d360:	4699      	mov	r9, r3
    d362:	46a2      	mov	sl, r4
    d364:	46ab      	mov	fp, r5
    d366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d368:	0000ca81 	.word	0x0000ca81
    d36c:	0000cc21 	.word	0x0000cc21
    d370:	0000045c 	.word	0x0000045c
    d374:	00019644 	.word	0x00019644
    d378:	00018e64 	.word	0x00018e64
    d37c:	00016be5 	.word	0x00016be5
    d380:	00019860 	.word	0x00019860
    d384:	00016c19 	.word	0x00016c19
    d388:	0000aec1 	.word	0x0000aec1
    d38c:	0000047d 	.word	0x0000047d
    d390:	000198c0 	.word	0x000198c0
    d394:	00000456 	.word	0x00000456
    d398:	00019830 	.word	0x00019830
    d39c:	0000ccf5 	.word	0x0000ccf5
    d3a0:	0000046c 	.word	0x0000046c
    d3a4:	00019898 	.word	0x00019898
    d3a8:	00016d01 	.word	0x00016d01

0000d3ac <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3ae:	46de      	mov	lr, fp
    d3b0:	4647      	mov	r7, r8
    d3b2:	b580      	push	{r7, lr}
    d3b4:	b089      	sub	sp, #36	; 0x24
    d3b6:	9004      	str	r0, [sp, #16]
    d3b8:	468b      	mov	fp, r1
    d3ba:	9203      	str	r2, [sp, #12]
    d3bc:	260a      	movs	r6, #10
    d3be:	2780      	movs	r7, #128	; 0x80
    d3c0:	01bf      	lsls	r7, r7, #6
    d3c2:	466b      	mov	r3, sp
    d3c4:	82df      	strh	r7, [r3, #22]
    d3c6:	0035      	movs	r5, r6
    d3c8:	e02d      	b.n	d426 <nm_spi_write_block+0x7a>
		size = 2;
    d3ca:	3301      	adds	r3, #1
    d3cc:	9303      	str	r3, [sp, #12]
    d3ce:	e02d      	b.n	d42c <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    d3d0:	4a82      	ldr	r2, [pc, #520]	; (d5dc <nm_spi_write_block+0x230>)
    d3d2:	4983      	ldr	r1, [pc, #524]	; (d5e0 <nm_spi_write_block+0x234>)
    d3d4:	4883      	ldr	r0, [pc, #524]	; (d5e4 <nm_spi_write_block+0x238>)
    d3d6:	4c84      	ldr	r4, [pc, #528]	; (d5e8 <nm_spi_write_block+0x23c>)
    d3d8:	47a0      	blx	r4
    d3da:	0031      	movs	r1, r6
    d3dc:	4883      	ldr	r0, [pc, #524]	; (d5ec <nm_spi_write_block+0x240>)
    d3de:	47a0      	blx	r4
    d3e0:	200d      	movs	r0, #13
    d3e2:	4b83      	ldr	r3, [pc, #524]	; (d5f0 <nm_spi_write_block+0x244>)
    d3e4:	4798      	blx	r3
		nm_bsp_sleep(1);
    d3e6:	2001      	movs	r0, #1
    d3e8:	4c82      	ldr	r4, [pc, #520]	; (d5f4 <nm_spi_write_block+0x248>)
    d3ea:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d3ec:	2300      	movs	r3, #0
    d3ee:	9300      	str	r3, [sp, #0]
    d3f0:	2200      	movs	r2, #0
    d3f2:	2100      	movs	r1, #0
    d3f4:	20cf      	movs	r0, #207	; 0xcf
    d3f6:	4e80      	ldr	r6, [pc, #512]	; (d5f8 <nm_spi_write_block+0x24c>)
    d3f8:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    d3fa:	20cf      	movs	r0, #207	; 0xcf
    d3fc:	4b7f      	ldr	r3, [pc, #508]	; (d5fc <nm_spi_write_block+0x250>)
    d3fe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    d400:	4a7f      	ldr	r2, [pc, #508]	; (d600 <nm_spi_write_block+0x254>)
    d402:	4977      	ldr	r1, [pc, #476]	; (d5e0 <nm_spi_write_block+0x234>)
    d404:	4877      	ldr	r0, [pc, #476]	; (d5e4 <nm_spi_write_block+0x238>)
    d406:	4e78      	ldr	r6, [pc, #480]	; (d5e8 <nm_spi_write_block+0x23c>)
    d408:	47b0      	blx	r6
    d40a:	9b03      	ldr	r3, [sp, #12]
    d40c:	9a04      	ldr	r2, [sp, #16]
    d40e:	0029      	movs	r1, r5
    d410:	487c      	ldr	r0, [pc, #496]	; (d604 <nm_spi_write_block+0x258>)
    d412:	47b0      	blx	r6
    d414:	200d      	movs	r0, #13
    d416:	4b76      	ldr	r3, [pc, #472]	; (d5f0 <nm_spi_write_block+0x244>)
    d418:	4798      	blx	r3
		nm_bsp_sleep(1);
    d41a:	2001      	movs	r0, #1
    d41c:	47a0      	blx	r4
    d41e:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    d420:	2d00      	cmp	r5, #0
    d422:	d100      	bne.n	d426 <nm_spi_write_block+0x7a>
    d424:	e0d2      	b.n	d5cc <nm_spi_write_block+0x220>
	if (size == 1)
    d426:	9b03      	ldr	r3, [sp, #12]
    d428:	2b01      	cmp	r3, #1
    d42a:	d0ce      	beq.n	d3ca <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    d42c:	2300      	movs	r3, #0
    d42e:	9300      	str	r3, [sp, #0]
    d430:	9b03      	ldr	r3, [sp, #12]
    d432:	2200      	movs	r2, #0
    d434:	9e04      	ldr	r6, [sp, #16]
    d436:	0031      	movs	r1, r6
    d438:	20c7      	movs	r0, #199	; 0xc7
    d43a:	4c6f      	ldr	r4, [pc, #444]	; (d5f8 <nm_spi_write_block+0x24c>)
    d43c:	47a0      	blx	r4
	if (result != N_OK) {
    d43e:	2801      	cmp	r0, #1
    d440:	d1c6      	bne.n	d3d0 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    d442:	20c7      	movs	r0, #199	; 0xc7
    d444:	4b6d      	ldr	r3, [pc, #436]	; (d5fc <nm_spi_write_block+0x250>)
    d446:	4798      	blx	r3
	if (result != N_OK) {
    d448:	2801      	cmp	r0, #1
    d44a:	d00b      	beq.n	d464 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    d44c:	4a6e      	ldr	r2, [pc, #440]	; (d608 <nm_spi_write_block+0x25c>)
    d44e:	4964      	ldr	r1, [pc, #400]	; (d5e0 <nm_spi_write_block+0x234>)
    d450:	4864      	ldr	r0, [pc, #400]	; (d5e4 <nm_spi_write_block+0x238>)
    d452:	4c65      	ldr	r4, [pc, #404]	; (d5e8 <nm_spi_write_block+0x23c>)
    d454:	47a0      	blx	r4
    d456:	9904      	ldr	r1, [sp, #16]
    d458:	486c      	ldr	r0, [pc, #432]	; (d60c <nm_spi_write_block+0x260>)
    d45a:	47a0      	blx	r4
    d45c:	200d      	movs	r0, #13
    d45e:	4b64      	ldr	r3, [pc, #400]	; (d5f0 <nm_spi_write_block+0x244>)
    d460:	4798      	blx	r3
    d462:	e7c0      	b.n	d3e6 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    d464:	2200      	movs	r2, #0
    d466:	ab07      	add	r3, sp, #28
    d468:	801a      	strh	r2, [r3, #0]
    d46a:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    d46c:	2600      	movs	r6, #0
				order = 0x1;
    d46e:	46a8      	mov	r8, r5
    d470:	0035      	movs	r5, r6
    d472:	0026      	movs	r6, r4
    d474:	e021      	b.n	d4ba <nm_spi_write_block+0x10e>
				order = 0x2;
    d476:	2300      	movs	r3, #0
    d478:	42b7      	cmp	r7, r6
    d47a:	415b      	adcs	r3, r3
    d47c:	3302      	adds	r3, #2
		cmd |= order;
    d47e:	200b      	movs	r0, #11
    d480:	aa04      	add	r2, sp, #16
    d482:	4694      	mov	ip, r2
    d484:	4460      	add	r0, ip
    d486:	2210      	movs	r2, #16
    d488:	4252      	negs	r2, r2
    d48a:	4313      	orrs	r3, r2
    d48c:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    d48e:	2101      	movs	r1, #1
    d490:	4b5f      	ldr	r3, [pc, #380]	; (d610 <nm_spi_write_block+0x264>)
    d492:	4798      	blx	r3
    d494:	2800      	cmp	r0, #0
    d496:	d11d      	bne.n	d4d4 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    d498:	465b      	mov	r3, fp
    d49a:	1958      	adds	r0, r3, r5
    d49c:	0021      	movs	r1, r4
    d49e:	4b5c      	ldr	r3, [pc, #368]	; (d610 <nm_spi_write_block+0x264>)
    d4a0:	4798      	blx	r3
    d4a2:	2800      	cmp	r0, #0
    d4a4:	d12e      	bne.n	d504 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    d4a6:	4b5b      	ldr	r3, [pc, #364]	; (d614 <nm_spi_write_block+0x268>)
    d4a8:	781b      	ldrb	r3, [r3, #0]
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d037      	beq.n	d51e <nm_spi_write_block+0x172>
		ix += nbytes;
    d4ae:	1965      	adds	r5, r4, r5
    d4b0:	b22d      	sxth	r5, r5
		sz -= nbytes;
    d4b2:	1b36      	subs	r6, r6, r4
    d4b4:	b2b6      	uxth	r6, r6
	} while (sz);
    d4b6:	2e00      	cmp	r6, #0
    d4b8:	d052      	beq.n	d560 <nm_spi_write_block+0x1b4>
    d4ba:	1c34      	adds	r4, r6, #0
    d4bc:	42be      	cmp	r6, r7
    d4be:	d901      	bls.n	d4c4 <nm_spi_write_block+0x118>
    d4c0:	466b      	mov	r3, sp
    d4c2:	8adc      	ldrh	r4, [r3, #22]
    d4c4:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    d4c6:	2d00      	cmp	r5, #0
    d4c8:	d1d5      	bne.n	d476 <nm_spi_write_block+0xca>
				order = 0x3;
    d4ca:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    d4cc:	42be      	cmp	r6, r7
    d4ce:	d9d6      	bls.n	d47e <nm_spi_write_block+0xd2>
				order = 0x1;
    d4d0:	3b02      	subs	r3, #2
    d4d2:	e7d4      	b.n	d47e <nm_spi_write_block+0xd2>
    d4d4:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    d4d6:	4a50      	ldr	r2, [pc, #320]	; (d618 <nm_spi_write_block+0x26c>)
    d4d8:	4950      	ldr	r1, [pc, #320]	; (d61c <nm_spi_write_block+0x270>)
    d4da:	4842      	ldr	r0, [pc, #264]	; (d5e4 <nm_spi_write_block+0x238>)
    d4dc:	4b42      	ldr	r3, [pc, #264]	; (d5e8 <nm_spi_write_block+0x23c>)
    d4de:	4798      	blx	r3
    d4e0:	484f      	ldr	r0, [pc, #316]	; (d620 <nm_spi_write_block+0x274>)
    d4e2:	4b50      	ldr	r3, [pc, #320]	; (d624 <nm_spi_write_block+0x278>)
    d4e4:	4798      	blx	r3
    d4e6:	200d      	movs	r0, #13
    d4e8:	4b41      	ldr	r3, [pc, #260]	; (d5f0 <nm_spi_write_block+0x244>)
    d4ea:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    d4ec:	4a4e      	ldr	r2, [pc, #312]	; (d628 <nm_spi_write_block+0x27c>)
    d4ee:	493c      	ldr	r1, [pc, #240]	; (d5e0 <nm_spi_write_block+0x234>)
    d4f0:	483c      	ldr	r0, [pc, #240]	; (d5e4 <nm_spi_write_block+0x238>)
    d4f2:	4b3d      	ldr	r3, [pc, #244]	; (d5e8 <nm_spi_write_block+0x23c>)
    d4f4:	4798      	blx	r3
    d4f6:	484d      	ldr	r0, [pc, #308]	; (d62c <nm_spi_write_block+0x280>)
    d4f8:	4b4a      	ldr	r3, [pc, #296]	; (d624 <nm_spi_write_block+0x278>)
    d4fa:	4798      	blx	r3
    d4fc:	200d      	movs	r0, #13
    d4fe:	4b3c      	ldr	r3, [pc, #240]	; (d5f0 <nm_spi_write_block+0x244>)
    d500:	4798      	blx	r3
    d502:	e770      	b.n	d3e6 <nm_spi_write_block+0x3a>
    d504:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    d506:	4a4a      	ldr	r2, [pc, #296]	; (d630 <nm_spi_write_block+0x284>)
    d508:	4944      	ldr	r1, [pc, #272]	; (d61c <nm_spi_write_block+0x270>)
    d50a:	4836      	ldr	r0, [pc, #216]	; (d5e4 <nm_spi_write_block+0x238>)
    d50c:	4b36      	ldr	r3, [pc, #216]	; (d5e8 <nm_spi_write_block+0x23c>)
    d50e:	4798      	blx	r3
    d510:	4848      	ldr	r0, [pc, #288]	; (d634 <nm_spi_write_block+0x288>)
    d512:	4b44      	ldr	r3, [pc, #272]	; (d624 <nm_spi_write_block+0x278>)
    d514:	4798      	blx	r3
    d516:	200d      	movs	r0, #13
    d518:	4b35      	ldr	r3, [pc, #212]	; (d5f0 <nm_spi_write_block+0x244>)
    d51a:	4798      	blx	r3
    d51c:	e7e6      	b.n	d4ec <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    d51e:	2102      	movs	r1, #2
    d520:	a807      	add	r0, sp, #28
    d522:	4b3b      	ldr	r3, [pc, #236]	; (d610 <nm_spi_write_block+0x264>)
    d524:	4798      	blx	r3
    d526:	2800      	cmp	r0, #0
    d528:	d0c1      	beq.n	d4ae <nm_spi_write_block+0x102>
    d52a:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    d52c:	22d7      	movs	r2, #215	; 0xd7
    d52e:	0092      	lsls	r2, r2, #2
    d530:	493a      	ldr	r1, [pc, #232]	; (d61c <nm_spi_write_block+0x270>)
    d532:	482c      	ldr	r0, [pc, #176]	; (d5e4 <nm_spi_write_block+0x238>)
    d534:	4b2c      	ldr	r3, [pc, #176]	; (d5e8 <nm_spi_write_block+0x23c>)
    d536:	4798      	blx	r3
    d538:	483f      	ldr	r0, [pc, #252]	; (d638 <nm_spi_write_block+0x28c>)
    d53a:	4b3a      	ldr	r3, [pc, #232]	; (d624 <nm_spi_write_block+0x278>)
    d53c:	4798      	blx	r3
    d53e:	200d      	movs	r0, #13
    d540:	4b2b      	ldr	r3, [pc, #172]	; (d5f0 <nm_spi_write_block+0x244>)
    d542:	4798      	blx	r3
    d544:	e7d2      	b.n	d4ec <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    d546:	229a      	movs	r2, #154	; 0x9a
    d548:	0052      	lsls	r2, r2, #1
    d54a:	493c      	ldr	r1, [pc, #240]	; (d63c <nm_spi_write_block+0x290>)
    d54c:	4825      	ldr	r0, [pc, #148]	; (d5e4 <nm_spi_write_block+0x238>)
    d54e:	4b26      	ldr	r3, [pc, #152]	; (d5e8 <nm_spi_write_block+0x23c>)
    d550:	4798      	blx	r3
    d552:	483b      	ldr	r0, [pc, #236]	; (d640 <nm_spi_write_block+0x294>)
    d554:	4b33      	ldr	r3, [pc, #204]	; (d624 <nm_spi_write_block+0x278>)
    d556:	4798      	blx	r3
    d558:	200d      	movs	r0, #13
    d55a:	4b25      	ldr	r3, [pc, #148]	; (d5f0 <nm_spi_write_block+0x244>)
    d55c:	4798      	blx	r3
    d55e:	e027      	b.n	d5b0 <nm_spi_write_block+0x204>
    d560:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    d562:	4b2c      	ldr	r3, [pc, #176]	; (d614 <nm_spi_write_block+0x268>)
    d564:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    d566:	1e63      	subs	r3, r4, #1
    d568:	419c      	sbcs	r4, r3
    d56a:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    d56c:	b2a1      	uxth	r1, r4
    d56e:	a807      	add	r0, sp, #28
    d570:	4b34      	ldr	r3, [pc, #208]	; (d644 <nm_spi_write_block+0x298>)
    d572:	4798      	blx	r3
    d574:	2800      	cmp	r0, #0
    d576:	d1e6      	bne.n	d546 <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    d578:	ab08      	add	r3, sp, #32
    d57a:	191b      	adds	r3, r3, r4
    d57c:	3b05      	subs	r3, #5
    d57e:	781b      	ldrb	r3, [r3, #0]
    d580:	2b00      	cmp	r3, #0
    d582:	d106      	bne.n	d592 <nm_spi_write_block+0x1e6>
    d584:	ab08      	add	r3, sp, #32
    d586:	469c      	mov	ip, r3
    d588:	4464      	add	r4, ip
    d58a:	3c06      	subs	r4, #6
    d58c:	7823      	ldrb	r3, [r4, #0]
    d58e:	2bc3      	cmp	r3, #195	; 0xc3
    d590:	d01a      	beq.n	d5c8 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    d592:	223c      	movs	r2, #60	; 0x3c
    d594:	32ff      	adds	r2, #255	; 0xff
    d596:	4929      	ldr	r1, [pc, #164]	; (d63c <nm_spi_write_block+0x290>)
    d598:	4812      	ldr	r0, [pc, #72]	; (d5e4 <nm_spi_write_block+0x238>)
    d59a:	4c13      	ldr	r4, [pc, #76]	; (d5e8 <nm_spi_write_block+0x23c>)
    d59c:	47a0      	blx	r4
    d59e:	a907      	add	r1, sp, #28
    d5a0:	788b      	ldrb	r3, [r1, #2]
    d5a2:	784a      	ldrb	r2, [r1, #1]
    d5a4:	7809      	ldrb	r1, [r1, #0]
    d5a6:	4828      	ldr	r0, [pc, #160]	; (d648 <nm_spi_write_block+0x29c>)
    d5a8:	47a0      	blx	r4
    d5aa:	200d      	movs	r0, #13
    d5ac:	4b10      	ldr	r3, [pc, #64]	; (d5f0 <nm_spi_write_block+0x244>)
    d5ae:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    d5b0:	4a26      	ldr	r2, [pc, #152]	; (d64c <nm_spi_write_block+0x2a0>)
    d5b2:	490b      	ldr	r1, [pc, #44]	; (d5e0 <nm_spi_write_block+0x234>)
    d5b4:	480b      	ldr	r0, [pc, #44]	; (d5e4 <nm_spi_write_block+0x238>)
    d5b6:	4b0c      	ldr	r3, [pc, #48]	; (d5e8 <nm_spi_write_block+0x23c>)
    d5b8:	4798      	blx	r3
    d5ba:	481c      	ldr	r0, [pc, #112]	; (d62c <nm_spi_write_block+0x280>)
    d5bc:	4b19      	ldr	r3, [pc, #100]	; (d624 <nm_spi_write_block+0x278>)
    d5be:	4798      	blx	r3
    d5c0:	200d      	movs	r0, #13
    d5c2:	4b0b      	ldr	r3, [pc, #44]	; (d5f0 <nm_spi_write_block+0x244>)
    d5c4:	4798      	blx	r3
    d5c6:	e70e      	b.n	d3e6 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d5c8:	2000      	movs	r0, #0
    d5ca:	e001      	b.n	d5d0 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    d5cc:	2006      	movs	r0, #6
    d5ce:	4240      	negs	r0, r0

	return s8Ret;
}
    d5d0:	b009      	add	sp, #36	; 0x24
    d5d2:	bc0c      	pop	{r2, r3}
    d5d4:	4690      	mov	r8, r2
    d5d6:	469b      	mov	fp, r3
    d5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5da:	46c0      	nop			; (mov r8, r8)
    d5dc:	000003c3 	.word	0x000003c3
    d5e0:	00019624 	.word	0x00019624
    d5e4:	00018e64 	.word	0x00018e64
    d5e8:	00016be5 	.word	0x00016be5
    d5ec:	000198dc 	.word	0x000198dc
    d5f0:	00016c19 	.word	0x00016c19
    d5f4:	0000aec1 	.word	0x0000aec1
    d5f8:	0000ca81 	.word	0x0000ca81
    d5fc:	0000cc21 	.word	0x0000cc21
    d600:	000003eb 	.word	0x000003eb
    d604:	000198c0 	.word	0x000198c0
    d608:	000003c9 	.word	0x000003c9
    d60c:	0001990c 	.word	0x0001990c
    d610:	0000ca61 	.word	0x0000ca61
    d614:	200003fc 	.word	0x200003fc
    d618:	00000349 	.word	0x00000349
    d61c:	00019604 	.word	0x00019604
    d620:	00019944 	.word	0x00019944
    d624:	00016d01 	.word	0x00016d01
    d628:	000003d9 	.word	0x000003d9
    d62c:	00019a38 	.word	0x00019a38
    d630:	00000352 	.word	0x00000352
    d634:	0001997c 	.word	0x0001997c
    d638:	000199b0 	.word	0x000199b0
    d63c:	000195d8 	.word	0x000195d8
    d640:	000199e8 	.word	0x000199e8
    d644:	0000cc01 	.word	0x0000cc01
    d648:	00019a08 	.word	0x00019a08
    d64c:	000003e1 	.word	0x000003e1

0000d650 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    d650:	b5f0      	push	{r4, r5, r6, r7, lr}
    d652:	46de      	mov	lr, fp
    d654:	4657      	mov	r7, sl
    d656:	464e      	mov	r6, r9
    d658:	4645      	mov	r5, r8
    d65a:	b5e0      	push	{r5, r6, r7, lr}
    d65c:	b085      	sub	sp, #20
    d65e:	9001      	str	r0, [sp, #4]
    d660:	000e      	movs	r6, r1
    d662:	9202      	str	r2, [sp, #8]
    d664:	001d      	movs	r5, r3
    d666:	ab0e      	add	r3, sp, #56	; 0x38
    d668:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    d66a:	2c00      	cmp	r4, #0
    d66c:	d064      	beq.n	d738 <Socket_ReadSocketData+0xe8>
    d66e:	0103      	lsls	r3, r0, #4
    d670:	4935      	ldr	r1, [pc, #212]	; (d748 <Socket_ReadSocketData+0xf8>)
    d672:	585b      	ldr	r3, [r3, r1]
    d674:	2b00      	cmp	r3, #0
    d676:	d05f      	beq.n	d738 <Socket_ReadSocketData+0xe8>
    d678:	0101      	lsls	r1, r0, #4
    d67a:	4b33      	ldr	r3, [pc, #204]	; (d748 <Socket_ReadSocketData+0xf8>)
    d67c:	185b      	adds	r3, r3, r1
    d67e:	889b      	ldrh	r3, [r3, #4]
    d680:	b29b      	uxth	r3, r3
    d682:	2b00      	cmp	r3, #0
    d684:	d058      	beq.n	d738 <Socket_ReadSocketData+0xe8>
    d686:	4b30      	ldr	r3, [pc, #192]	; (d748 <Socket_ReadSocketData+0xf8>)
    d688:	185b      	adds	r3, r3, r1
    d68a:	7a9b      	ldrb	r3, [r3, #10]
    d68c:	2b01      	cmp	r3, #1
    d68e:	d153      	bne.n	d738 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    d690:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    d692:	4b2d      	ldr	r3, [pc, #180]	; (d748 <Socket_ReadSocketData+0xf8>)
    d694:	469b      	mov	fp, r3
    d696:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    d698:	465b      	mov	r3, fp
    d69a:	220a      	movs	r2, #10
    d69c:	4690      	mov	r8, r2
    d69e:	44d8      	add	r8, fp
    d6a0:	468a      	mov	sl, r1
    d6a2:	9500      	str	r5, [sp, #0]
    d6a4:	9303      	str	r3, [sp, #12]
    d6a6:	e015      	b.n	d6d4 <Socket_ReadSocketData+0x84>
    d6a8:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    d6aa:	2301      	movs	r3, #1
    d6ac:	e01c      	b.n	d6e8 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    d6ae:	3301      	adds	r3, #1
    d6b0:	2200      	movs	r2, #0
    d6b2:	2100      	movs	r1, #0
    d6b4:	2000      	movs	r0, #0
    d6b6:	4c25      	ldr	r4, [pc, #148]	; (d74c <Socket_ReadSocketData+0xfc>)
    d6b8:	47a0      	blx	r4
    d6ba:	e03d      	b.n	d738 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    d6bc:	4824      	ldr	r0, [pc, #144]	; (d750 <Socket_ReadSocketData+0x100>)
    d6be:	4d25      	ldr	r5, [pc, #148]	; (d754 <Socket_ReadSocketData+0x104>)
    d6c0:	47a8      	blx	r5
    d6c2:	0021      	movs	r1, r4
    d6c4:	4824      	ldr	r0, [pc, #144]	; (d758 <Socket_ReadSocketData+0x108>)
    d6c6:	47a8      	blx	r5
    d6c8:	200d      	movs	r0, #13
    d6ca:	4b24      	ldr	r3, [pc, #144]	; (d75c <Socket_ReadSocketData+0x10c>)
    d6cc:	4798      	blx	r3
				break;
    d6ce:	e033      	b.n	d738 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    d6d0:	2c00      	cmp	r4, #0
    d6d2:	d031      	beq.n	d738 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    d6d4:	465b      	mov	r3, fp
    d6d6:	889b      	ldrh	r3, [r3, #4]
    d6d8:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    d6da:	b21b      	sxth	r3, r3
    d6dc:	2b00      	cmp	r3, #0
    d6de:	dde3      	ble.n	d6a8 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    d6e0:	9b03      	ldr	r3, [sp, #12]
    d6e2:	889d      	ldrh	r5, [r3, #4]
    d6e4:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    d6e6:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    d6e8:	4a17      	ldr	r2, [pc, #92]	; (d748 <Socket_ReadSocketData+0xf8>)
    d6ea:	4651      	mov	r1, sl
    d6ec:	5889      	ldr	r1, [r1, r2]
    d6ee:	002a      	movs	r2, r5
    d6f0:	9800      	ldr	r0, [sp, #0]
    d6f2:	4f16      	ldr	r7, [pc, #88]	; (d74c <Socket_ReadSocketData+0xfc>)
    d6f4:	47b8      	blx	r7
    d6f6:	2800      	cmp	r0, #0
    d6f8:	d1e0      	bne.n	d6bc <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    d6fa:	4b13      	ldr	r3, [pc, #76]	; (d748 <Socket_ReadSocketData+0xf8>)
    d6fc:	4652      	mov	r2, sl
    d6fe:	58d3      	ldr	r3, [r2, r3]
    d700:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    d702:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    d704:	88f3      	ldrh	r3, [r6, #6]
    d706:	1b5b      	subs	r3, r3, r5
    d708:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    d70a:	4b15      	ldr	r3, [pc, #84]	; (d760 <Socket_ReadSocketData+0x110>)
    d70c:	681b      	ldr	r3, [r3, #0]
    d70e:	2b00      	cmp	r3, #0
    d710:	d005      	beq.n	d71e <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    d712:	4b13      	ldr	r3, [pc, #76]	; (d760 <Socket_ReadSocketData+0x110>)
    d714:	681b      	ldr	r3, [r3, #0]
    d716:	0032      	movs	r2, r6
    d718:	9902      	ldr	r1, [sp, #8]
    d71a:	9801      	ldr	r0, [sp, #4]
    d71c:	4798      	blx	r3
				u16ReadCount -= u16Read;
    d71e:	1b64      	subs	r4, r4, r5
    d720:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    d722:	9b00      	ldr	r3, [sp, #0]
    d724:	469c      	mov	ip, r3
    d726:	44ac      	add	ip, r5
    d728:	4663      	mov	r3, ip
    d72a:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    d72c:	4643      	mov	r3, r8
    d72e:	781b      	ldrb	r3, [r3, #0]
    d730:	2b00      	cmp	r3, #0
    d732:	d1cd      	bne.n	d6d0 <Socket_ReadSocketData+0x80>
    d734:	2c00      	cmp	r4, #0
    d736:	d1ba      	bne.n	d6ae <Socket_ReadSocketData+0x5e>
	}
}
    d738:	b005      	add	sp, #20
    d73a:	bc3c      	pop	{r2, r3, r4, r5}
    d73c:	4690      	mov	r8, r2
    d73e:	4699      	mov	r9, r3
    d740:	46a2      	mov	sl, r4
    d742:	46ab      	mov	fp, r5
    d744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d746:	46c0      	nop			; (mov r8, r8)
    d748:	20001004 	.word	0x20001004
    d74c:	0000b9f5 	.word	0x0000b9f5
    d750:	00019204 	.word	0x00019204
    d754:	00016be5 	.word	0x00016be5
    d758:	00019ca0 	.word	0x00019ca0
    d75c:	00016c19 	.word	0x00016c19
    d760:	200010b4 	.word	0x200010b4

0000d764 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    d764:	b5f0      	push	{r4, r5, r6, r7, lr}
    d766:	46d6      	mov	lr, sl
    d768:	464f      	mov	r7, r9
    d76a:	4646      	mov	r6, r8
    d76c:	b5c0      	push	{r6, r7, lr}
    d76e:	b09a      	sub	sp, #104	; 0x68
    d770:	000d      	movs	r5, r1
    d772:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    d774:	2841      	cmp	r0, #65	; 0x41
    d776:	d039      	beq.n	d7ec <m2m_ip_cb+0x88>
    d778:	2854      	cmp	r0, #84	; 0x54
    d77a:	d037      	beq.n	d7ec <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    d77c:	2842      	cmp	r0, #66	; 0x42
    d77e:	d053      	beq.n	d828 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    d780:	2843      	cmp	r0, #67	; 0x43
    d782:	d06a      	beq.n	d85a <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    d784:	2844      	cmp	r0, #68	; 0x44
    d786:	d100      	bne.n	d78a <m2m_ip_cb+0x26>
    d788:	e0af      	b.n	d8ea <m2m_ip_cb+0x186>
    d78a:	284b      	cmp	r0, #75	; 0x4b
    d78c:	d100      	bne.n	d790 <m2m_ip_cb+0x2c>
    d78e:	e0ac      	b.n	d8ea <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    d790:	284a      	cmp	r0, #74	; 0x4a
    d792:	d100      	bne.n	d796 <m2m_ip_cb+0x32>
    d794:	e0cf      	b.n	d936 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    d796:	2846      	cmp	r0, #70	; 0x46
    d798:	d100      	bne.n	d79c <m2m_ip_cb+0x38>
    d79a:	e0e5      	b.n	d968 <m2m_ip_cb+0x204>
    d79c:	2848      	cmp	r0, #72	; 0x48
    d79e:	d100      	bne.n	d7a2 <m2m_ip_cb+0x3e>
    d7a0:	e10e      	b.n	d9c0 <m2m_ip_cb+0x25c>
    d7a2:	284d      	cmp	r0, #77	; 0x4d
    d7a4:	d100      	bne.n	d7a8 <m2m_ip_cb+0x44>
    d7a6:	e0dc      	b.n	d962 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    d7a8:	2845      	cmp	r0, #69	; 0x45
    d7aa:	d100      	bne.n	d7ae <m2m_ip_cb+0x4a>
    d7ac:	e12c      	b.n	da08 <m2m_ip_cb+0x2a4>
    d7ae:	2847      	cmp	r0, #71	; 0x47
    d7b0:	d100      	bne.n	d7b4 <m2m_ip_cb+0x50>
    d7b2:	e14d      	b.n	da50 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    d7b4:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    d7b6:	284c      	cmp	r0, #76	; 0x4c
    d7b8:	d100      	bne.n	d7bc <m2m_ip_cb+0x58>
    d7ba:	e126      	b.n	da0a <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    d7bc:	2852      	cmp	r0, #82	; 0x52
    d7be:	d12d      	bne.n	d81c <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    d7c0:	2301      	movs	r3, #1
    d7c2:	2214      	movs	r2, #20
    d7c4:	a909      	add	r1, sp, #36	; 0x24
    d7c6:	0020      	movs	r0, r4
    d7c8:	4ca2      	ldr	r4, [pc, #648]	; (da54 <m2m_ip_cb+0x2f0>)
    d7ca:	47a0      	blx	r4
    d7cc:	2800      	cmp	r0, #0
    d7ce:	d125      	bne.n	d81c <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    d7d0:	4ba1      	ldr	r3, [pc, #644]	; (da58 <m2m_ip_cb+0x2f4>)
    d7d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d7d4:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    d7d6:	681b      	ldr	r3, [r3, #0]
    d7d8:	2b00      	cmp	r3, #0
    d7da:	d01f      	beq.n	d81c <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    d7dc:	4b9e      	ldr	r3, [pc, #632]	; (da58 <m2m_ip_cb+0x2f4>)
    d7de:	681c      	ldr	r4, [r3, #0]
    d7e0:	ab09      	add	r3, sp, #36	; 0x24
    d7e2:	7c1a      	ldrb	r2, [r3, #16]
    d7e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d7e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    d7e8:	47a0      	blx	r4
			}
		}
	}
}
    d7ea:	e017      	b.n	d81c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    d7ec:	2300      	movs	r3, #0
    d7ee:	2204      	movs	r2, #4
    d7f0:	a909      	add	r1, sp, #36	; 0x24
    d7f2:	0020      	movs	r0, r4
    d7f4:	4c97      	ldr	r4, [pc, #604]	; (da54 <m2m_ip_cb+0x2f0>)
    d7f6:	47a0      	blx	r4
    d7f8:	2800      	cmp	r0, #0
    d7fa:	d10f      	bne.n	d81c <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    d7fc:	ab09      	add	r3, sp, #36	; 0x24
    d7fe:	785a      	ldrb	r2, [r3, #1]
    d800:	ab05      	add	r3, sp, #20
    d802:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    d804:	4b95      	ldr	r3, [pc, #596]	; (da5c <m2m_ip_cb+0x2f8>)
    d806:	681b      	ldr	r3, [r3, #0]
    d808:	2b00      	cmp	r3, #0
    d80a:	d007      	beq.n	d81c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    d80c:	4b93      	ldr	r3, [pc, #588]	; (da5c <m2m_ip_cb+0x2f8>)
    d80e:	681b      	ldr	r3, [r3, #0]
    d810:	aa09      	add	r2, sp, #36	; 0x24
    d812:	2000      	movs	r0, #0
    d814:	5610      	ldrsb	r0, [r2, r0]
    d816:	aa05      	add	r2, sp, #20
    d818:	2101      	movs	r1, #1
    d81a:	4798      	blx	r3
}
    d81c:	b01a      	add	sp, #104	; 0x68
    d81e:	bc1c      	pop	{r2, r3, r4}
    d820:	4690      	mov	r8, r2
    d822:	4699      	mov	r9, r3
    d824:	46a2      	mov	sl, r4
    d826:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    d828:	2300      	movs	r3, #0
    d82a:	2204      	movs	r2, #4
    d82c:	a909      	add	r1, sp, #36	; 0x24
    d82e:	0020      	movs	r0, r4
    d830:	4c88      	ldr	r4, [pc, #544]	; (da54 <m2m_ip_cb+0x2f0>)
    d832:	47a0      	blx	r4
    d834:	2800      	cmp	r0, #0
    d836:	d1f1      	bne.n	d81c <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    d838:	ab09      	add	r3, sp, #36	; 0x24
    d83a:	785a      	ldrb	r2, [r3, #1]
    d83c:	ab05      	add	r3, sp, #20
    d83e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    d840:	4b86      	ldr	r3, [pc, #536]	; (da5c <m2m_ip_cb+0x2f8>)
    d842:	681b      	ldr	r3, [r3, #0]
    d844:	2b00      	cmp	r3, #0
    d846:	d0e9      	beq.n	d81c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    d848:	4b84      	ldr	r3, [pc, #528]	; (da5c <m2m_ip_cb+0x2f8>)
    d84a:	681b      	ldr	r3, [r3, #0]
    d84c:	aa09      	add	r2, sp, #36	; 0x24
    d84e:	2000      	movs	r0, #0
    d850:	5610      	ldrsb	r0, [r2, r0]
    d852:	aa05      	add	r2, sp, #20
    d854:	2102      	movs	r1, #2
    d856:	4798      	blx	r3
    d858:	e7e0      	b.n	d81c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    d85a:	2300      	movs	r3, #0
    d85c:	220c      	movs	r2, #12
    d85e:	a905      	add	r1, sp, #20
    d860:	0020      	movs	r0, r4
    d862:	4c7c      	ldr	r4, [pc, #496]	; (da54 <m2m_ip_cb+0x2f0>)
    d864:	47a0      	blx	r4
    d866:	2800      	cmp	r0, #0
    d868:	d1d8      	bne.n	d81c <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    d86a:	ab05      	add	r3, sp, #20
    d86c:	2209      	movs	r2, #9
    d86e:	569a      	ldrsb	r2, [r3, r2]
    d870:	2a00      	cmp	r2, #0
    d872:	db24      	blt.n	d8be <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    d874:	0018      	movs	r0, r3
    d876:	2108      	movs	r1, #8
    d878:	5659      	ldrsb	r1, [r3, r1]
    d87a:	4b79      	ldr	r3, [pc, #484]	; (da60 <m2m_ip_cb+0x2fc>)
    d87c:	0109      	lsls	r1, r1, #4
    d87e:	1859      	adds	r1, r3, r1
    d880:	7ac9      	ldrb	r1, [r1, #11]
    d882:	b2c9      	uxtb	r1, r1
    d884:	0114      	lsls	r4, r2, #4
    d886:	191b      	adds	r3, r3, r4
    d888:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    d88a:	2101      	movs	r1, #1
    d88c:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    d88e:	8941      	ldrh	r1, [r0, #10]
    d890:	3908      	subs	r1, #8
    d892:	b289      	uxth	r1, r1
    d894:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    d896:	4973      	ldr	r1, [pc, #460]	; (da64 <m2m_ip_cb+0x300>)
    d898:	880b      	ldrh	r3, [r1, #0]
    d89a:	3301      	adds	r3, #1
    d89c:	b29b      	uxth	r3, r3
    d89e:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    d8a0:	880b      	ldrh	r3, [r1, #0]
    d8a2:	b29b      	uxth	r3, r3
    d8a4:	2b00      	cmp	r3, #0
    d8a6:	d103      	bne.n	d8b0 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    d8a8:	880b      	ldrh	r3, [r1, #0]
    d8aa:	3301      	adds	r3, #1
    d8ac:	b29b      	uxth	r3, r3
    d8ae:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    d8b0:	4b6c      	ldr	r3, [pc, #432]	; (da64 <m2m_ip_cb+0x300>)
    d8b2:	8819      	ldrh	r1, [r3, #0]
    d8b4:	b289      	uxth	r1, r1
    d8b6:	0110      	lsls	r0, r2, #4
    d8b8:	4b69      	ldr	r3, [pc, #420]	; (da60 <m2m_ip_cb+0x2fc>)
    d8ba:	181b      	adds	r3, r3, r0
    d8bc:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    d8be:	ab09      	add	r3, sp, #36	; 0x24
    d8c0:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    d8c2:	2202      	movs	r2, #2
    d8c4:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    d8c6:	aa05      	add	r2, sp, #20
    d8c8:	8851      	ldrh	r1, [r2, #2]
    d8ca:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    d8cc:	9a06      	ldr	r2, [sp, #24]
    d8ce:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    d8d0:	4b62      	ldr	r3, [pc, #392]	; (da5c <m2m_ip_cb+0x2f8>)
    d8d2:	681b      	ldr	r3, [r3, #0]
    d8d4:	2b00      	cmp	r3, #0
    d8d6:	d0a1      	beq.n	d81c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    d8d8:	4b60      	ldr	r3, [pc, #384]	; (da5c <m2m_ip_cb+0x2f8>)
    d8da:	681b      	ldr	r3, [r3, #0]
    d8dc:	aa05      	add	r2, sp, #20
    d8de:	2008      	movs	r0, #8
    d8e0:	5610      	ldrsb	r0, [r2, r0]
    d8e2:	aa09      	add	r2, sp, #36	; 0x24
    d8e4:	2104      	movs	r1, #4
    d8e6:	4798      	blx	r3
    d8e8:	e798      	b.n	d81c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    d8ea:	2300      	movs	r3, #0
    d8ec:	2204      	movs	r2, #4
    d8ee:	a909      	add	r1, sp, #36	; 0x24
    d8f0:	0020      	movs	r0, r4
    d8f2:	4c58      	ldr	r4, [pc, #352]	; (da54 <m2m_ip_cb+0x2f0>)
    d8f4:	47a0      	blx	r4
    d8f6:	2800      	cmp	r0, #0
    d8f8:	d000      	beq.n	d8fc <m2m_ip_cb+0x198>
    d8fa:	e78f      	b.n	d81c <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    d8fc:	ab09      	add	r3, sp, #36	; 0x24
    d8fe:	2000      	movs	r0, #0
    d900:	5618      	ldrsb	r0, [r3, r0]
    d902:	aa05      	add	r2, sp, #20
    d904:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    d906:	785b      	ldrb	r3, [r3, #1]
    d908:	b25b      	sxtb	r3, r3
    d90a:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    d90c:	2b00      	cmp	r3, #0
    d90e:	d107      	bne.n	d920 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    d910:	ab09      	add	r3, sp, #36	; 0x24
    d912:	885b      	ldrh	r3, [r3, #2]
    d914:	3b08      	subs	r3, #8
    d916:	b29b      	uxth	r3, r3
    d918:	0101      	lsls	r1, r0, #4
    d91a:	4a51      	ldr	r2, [pc, #324]	; (da60 <m2m_ip_cb+0x2fc>)
    d91c:	1852      	adds	r2, r2, r1
    d91e:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    d920:	4b4e      	ldr	r3, [pc, #312]	; (da5c <m2m_ip_cb+0x2f8>)
    d922:	681b      	ldr	r3, [r3, #0]
    d924:	2b00      	cmp	r3, #0
    d926:	d100      	bne.n	d92a <m2m_ip_cb+0x1c6>
    d928:	e778      	b.n	d81c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    d92a:	4b4c      	ldr	r3, [pc, #304]	; (da5c <m2m_ip_cb+0x2f8>)
    d92c:	681b      	ldr	r3, [r3, #0]
    d92e:	aa05      	add	r2, sp, #20
    d930:	2105      	movs	r1, #5
    d932:	4798      	blx	r3
	{
    d934:	e772      	b.n	d81c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    d936:	2300      	movs	r3, #0
    d938:	2244      	movs	r2, #68	; 0x44
    d93a:	a909      	add	r1, sp, #36	; 0x24
    d93c:	0020      	movs	r0, r4
    d93e:	4c45      	ldr	r4, [pc, #276]	; (da54 <m2m_ip_cb+0x2f0>)
    d940:	47a0      	blx	r4
    d942:	2800      	cmp	r0, #0
    d944:	d000      	beq.n	d948 <m2m_ip_cb+0x1e4>
    d946:	e769      	b.n	d81c <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    d948:	4b47      	ldr	r3, [pc, #284]	; (da68 <m2m_ip_cb+0x304>)
    d94a:	681b      	ldr	r3, [r3, #0]
    d94c:	2b00      	cmp	r3, #0
    d94e:	d100      	bne.n	d952 <m2m_ip_cb+0x1ee>
    d950:	e764      	b.n	d81c <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    d952:	4b45      	ldr	r3, [pc, #276]	; (da68 <m2m_ip_cb+0x304>)
    d954:	681b      	ldr	r3, [r3, #0]
    d956:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d958:	9203      	str	r2, [sp, #12]
    d95a:	0011      	movs	r1, r2
    d95c:	a809      	add	r0, sp, #36	; 0x24
    d95e:	4798      	blx	r3
    d960:	e75c      	b.n	d81c <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    d962:	2306      	movs	r3, #6
    d964:	469a      	mov	sl, r3
    d966:	e001      	b.n	d96c <m2m_ip_cb+0x208>
    d968:	2306      	movs	r3, #6
    d96a:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    d96c:	2300      	movs	r3, #0
    d96e:	2210      	movs	r2, #16
    d970:	a905      	add	r1, sp, #20
    d972:	0020      	movs	r0, r4
    d974:	4f37      	ldr	r7, [pc, #220]	; (da54 <m2m_ip_cb+0x2f0>)
    d976:	47b8      	blx	r7
    d978:	2800      	cmp	r0, #0
    d97a:	d000      	beq.n	d97e <m2m_ip_cb+0x21a>
    d97c:	e74e      	b.n	d81c <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    d97e:	aa05      	add	r2, sp, #20
    d980:	200c      	movs	r0, #12
    d982:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    d984:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    d986:	0107      	lsls	r7, r0, #4
    d988:	4935      	ldr	r1, [pc, #212]	; (da60 <m2m_ip_cb+0x2fc>)
    d98a:	19c9      	adds	r1, r1, r7
    d98c:	2700      	movs	r7, #0
    d98e:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    d990:	2608      	movs	r6, #8
    d992:	5f97      	ldrsh	r7, [r2, r6]
    d994:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    d996:	8957      	ldrh	r7, [r2, #10]
    d998:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    d99a:	af09      	add	r7, sp, #36	; 0x24
    d99c:	8856      	ldrh	r6, [r2, #2]
    d99e:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    d9a0:	9a06      	ldr	r2, [sp, #24]
    d9a2:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    d9a4:	88ca      	ldrh	r2, [r1, #6]
    d9a6:	b292      	uxth	r2, r2
    d9a8:	4293      	cmp	r3, r2
    d9aa:	d00c      	beq.n	d9c6 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    d9ac:	2d10      	cmp	r5, #16
    d9ae:	d800      	bhi.n	d9b2 <m2m_ip_cb+0x24e>
    d9b0:	e734      	b.n	d81c <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    d9b2:	2301      	movs	r3, #1
    d9b4:	2200      	movs	r2, #0
    d9b6:	2100      	movs	r1, #0
    d9b8:	2000      	movs	r0, #0
    d9ba:	4c26      	ldr	r4, [pc, #152]	; (da54 <m2m_ip_cb+0x2f0>)
    d9bc:	47a0      	blx	r4
	{
    d9be:	e72d      	b.n	d81c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    d9c0:	2309      	movs	r3, #9
    d9c2:	469a      	mov	sl, r3
    d9c4:	e7d2      	b.n	d96c <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    d9c6:	4643      	mov	r3, r8
    d9c8:	2b00      	cmp	r3, #0
    d9ca:	dd01      	ble.n	d9d0 <m2m_ip_cb+0x26c>
    d9cc:	45a8      	cmp	r8, r5
    d9ce:	db0f      	blt.n	d9f0 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    d9d0:	ab09      	add	r3, sp, #36	; 0x24
    d9d2:	4642      	mov	r2, r8
    d9d4:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    d9d6:	2300      	movs	r3, #0
    d9d8:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    d9da:	4b20      	ldr	r3, [pc, #128]	; (da5c <m2m_ip_cb+0x2f8>)
    d9dc:	681b      	ldr	r3, [r3, #0]
    d9de:	2b00      	cmp	r3, #0
    d9e0:	d100      	bne.n	d9e4 <m2m_ip_cb+0x280>
    d9e2:	e71b      	b.n	d81c <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    d9e4:	4b1d      	ldr	r3, [pc, #116]	; (da5c <m2m_ip_cb+0x2f8>)
    d9e6:	681b      	ldr	r3, [r3, #0]
    d9e8:	aa09      	add	r2, sp, #36	; 0x24
    d9ea:	4651      	mov	r1, sl
    d9ec:	4798      	blx	r3
    d9ee:	e715      	b.n	d81c <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    d9f0:	0023      	movs	r3, r4
    d9f2:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    d9f4:	4642      	mov	r2, r8
    d9f6:	4669      	mov	r1, sp
    d9f8:	818a      	strh	r2, [r1, #12]
    d9fa:	898a      	ldrh	r2, [r1, #12]
    d9fc:	9200      	str	r2, [sp, #0]
    d9fe:	4652      	mov	r2, sl
    da00:	0039      	movs	r1, r7
    da02:	4c1a      	ldr	r4, [pc, #104]	; (da6c <m2m_ip_cb+0x308>)
    da04:	47a0      	blx	r4
    da06:	e709      	b.n	d81c <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    da08:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    da0a:	2300      	movs	r3, #0
    da0c:	2208      	movs	r2, #8
    da0e:	a909      	add	r1, sp, #36	; 0x24
    da10:	0020      	movs	r0, r4
    da12:	4c10      	ldr	r4, [pc, #64]	; (da54 <m2m_ip_cb+0x2f0>)
    da14:	47a0      	blx	r4
    da16:	2800      	cmp	r0, #0
    da18:	d000      	beq.n	da1c <m2m_ip_cb+0x2b8>
    da1a:	e6ff      	b.n	d81c <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    da1c:	ab09      	add	r3, sp, #36	; 0x24
    da1e:	2000      	movs	r0, #0
    da20:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    da22:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    da24:	8859      	ldrh	r1, [r3, #2]
    da26:	ab05      	add	r3, sp, #20
    da28:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    da2a:	0101      	lsls	r1, r0, #4
    da2c:	4b0c      	ldr	r3, [pc, #48]	; (da60 <m2m_ip_cb+0x2fc>)
    da2e:	185b      	adds	r3, r3, r1
    da30:	88db      	ldrh	r3, [r3, #6]
    da32:	b29b      	uxth	r3, r3
    da34:	429a      	cmp	r2, r3
    da36:	d000      	beq.n	da3a <m2m_ip_cb+0x2d6>
    da38:	e6f0      	b.n	d81c <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    da3a:	4b08      	ldr	r3, [pc, #32]	; (da5c <m2m_ip_cb+0x2f8>)
    da3c:	681b      	ldr	r3, [r3, #0]
    da3e:	2b00      	cmp	r3, #0
    da40:	d100      	bne.n	da44 <m2m_ip_cb+0x2e0>
    da42:	e6eb      	b.n	d81c <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    da44:	4b05      	ldr	r3, [pc, #20]	; (da5c <m2m_ip_cb+0x2f8>)
    da46:	681b      	ldr	r3, [r3, #0]
    da48:	aa05      	add	r2, sp, #20
    da4a:	0029      	movs	r1, r5
    da4c:	4798      	blx	r3
	{
    da4e:	e6e5      	b.n	d81c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    da50:	2508      	movs	r5, #8
    da52:	e7da      	b.n	da0a <m2m_ip_cb+0x2a6>
    da54:	0000b9f5 	.word	0x0000b9f5
    da58:	200010b8 	.word	0x200010b8
    da5c:	200010b4 	.word	0x200010b4
    da60:	20001004 	.word	0x20001004
    da64:	200003fe 	.word	0x200003fe
    da68:	200010bc 	.word	0x200010bc
    da6c:	0000d651 	.word	0x0000d651

0000da70 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    da70:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    da72:	4b0a      	ldr	r3, [pc, #40]	; (da9c <socketInit+0x2c>)
    da74:	781b      	ldrb	r3, [r3, #0]
    da76:	2b00      	cmp	r3, #0
    da78:	d000      	beq.n	da7c <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    da7a:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    da7c:	22b0      	movs	r2, #176	; 0xb0
    da7e:	2100      	movs	r1, #0
    da80:	4807      	ldr	r0, [pc, #28]	; (daa0 <socketInit+0x30>)
    da82:	4b08      	ldr	r3, [pc, #32]	; (daa4 <socketInit+0x34>)
    da84:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    da86:	4908      	ldr	r1, [pc, #32]	; (daa8 <socketInit+0x38>)
    da88:	2002      	movs	r0, #2
    da8a:	4b08      	ldr	r3, [pc, #32]	; (daac <socketInit+0x3c>)
    da8c:	4798      	blx	r3
		gbSocketInit	= 1;
    da8e:	2201      	movs	r2, #1
    da90:	4b02      	ldr	r3, [pc, #8]	; (da9c <socketInit+0x2c>)
    da92:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    da94:	2200      	movs	r2, #0
    da96:	4b06      	ldr	r3, [pc, #24]	; (dab0 <socketInit+0x40>)
    da98:	801a      	strh	r2, [r3, #0]
}
    da9a:	e7ee      	b.n	da7a <socketInit+0xa>
    da9c:	200003fd 	.word	0x200003fd
    daa0:	20001004 	.word	0x20001004
    daa4:	0000b24d 	.word	0x0000b24d
    daa8:	0000d765 	.word	0x0000d765
    daac:	0000bae1 	.word	0x0000bae1
    dab0:	200003fe 	.word	0x200003fe

0000dab4 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    dab4:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    dab6:	22b0      	movs	r2, #176	; 0xb0
    dab8:	2100      	movs	r1, #0
    daba:	4807      	ldr	r0, [pc, #28]	; (dad8 <socketDeinit+0x24>)
    dabc:	4b07      	ldr	r3, [pc, #28]	; (dadc <socketDeinit+0x28>)
    dabe:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    dac0:	2100      	movs	r1, #0
    dac2:	2002      	movs	r0, #2
    dac4:	4b06      	ldr	r3, [pc, #24]	; (dae0 <socketDeinit+0x2c>)
    dac6:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    dac8:	2300      	movs	r3, #0
    daca:	4a06      	ldr	r2, [pc, #24]	; (dae4 <socketDeinit+0x30>)
    dacc:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    dace:	4a06      	ldr	r2, [pc, #24]	; (dae8 <socketDeinit+0x34>)
    dad0:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    dad2:	4a06      	ldr	r2, [pc, #24]	; (daec <socketDeinit+0x38>)
    dad4:	7013      	strb	r3, [r2, #0]
}
    dad6:	bd10      	pop	{r4, pc}
    dad8:	20001004 	.word	0x20001004
    dadc:	0000b24d 	.word	0x0000b24d
    dae0:	0000bae1 	.word	0x0000bae1
    dae4:	200010b4 	.word	0x200010b4
    dae8:	200010bc 	.word	0x200010bc
    daec:	200003fd 	.word	0x200003fd

0000daf0 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    daf0:	4b02      	ldr	r3, [pc, #8]	; (dafc <registerSocketCallback+0xc>)
    daf2:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    daf4:	4b02      	ldr	r3, [pc, #8]	; (db00 <registerSocketCallback+0x10>)
    daf6:	6019      	str	r1, [r3, #0]
}
    daf8:	4770      	bx	lr
    dafa:	46c0      	nop			; (mov r8, r8)
    dafc:	200010b4 	.word	0x200010b4
    db00:	200010bc 	.word	0x200010bc

0000db04 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    db04:	b5f0      	push	{r4, r5, r6, r7, lr}
    db06:	46d6      	mov	lr, sl
    db08:	4647      	mov	r7, r8
    db0a:	b580      	push	{r7, lr}
    db0c:	b089      	sub	sp, #36	; 0x24
    db0e:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    db10:	2802      	cmp	r0, #2
    db12:	d000      	beq.n	db16 <socket+0x12>
    db14:	e09c      	b.n	dc50 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    db16:	2901      	cmp	r1, #1
    db18:	d00a      	beq.n	db30 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    db1a:	2902      	cmp	r1, #2
    db1c:	d100      	bne.n	db20 <socket+0x1c>
    db1e:	e070      	b.n	dc02 <socket+0xfe>
	SOCKET					sock = -1;
    db20:	2501      	movs	r5, #1
    db22:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    db24:	0028      	movs	r0, r5
    db26:	b009      	add	sp, #36	; 0x24
    db28:	bc0c      	pop	{r2, r3}
    db2a:	4690      	mov	r8, r2
    db2c:	469a      	mov	sl, r3
    db2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    db30:	4c49      	ldr	r4, [pc, #292]	; (dc58 <socket+0x154>)
    db32:	7827      	ldrb	r7, [r4, #0]
    db34:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    db36:	7826      	ldrb	r6, [r4, #0]
    db38:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    db3a:	7820      	ldrb	r0, [r4, #0]
    db3c:	3001      	adds	r0, #1
    db3e:	3106      	adds	r1, #6
    db40:	4b46      	ldr	r3, [pc, #280]	; (dc5c <socket+0x158>)
    db42:	4798      	blx	r3
    db44:	b2c9      	uxtb	r1, r1
    db46:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    db48:	0132      	lsls	r2, r6, #4
    db4a:	4b45      	ldr	r3, [pc, #276]	; (dc60 <socket+0x15c>)
    db4c:	189b      	adds	r3, r3, r2
    db4e:	7a9b      	ldrb	r3, [r3, #10]
    db50:	2506      	movs	r5, #6
    db52:	2b00      	cmp	r3, #0
    db54:	d018      	beq.n	db88 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    db56:	4e40      	ldr	r6, [pc, #256]	; (dc58 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    db58:	4b40      	ldr	r3, [pc, #256]	; (dc5c <socket+0x158>)
    db5a:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    db5c:	4b40      	ldr	r3, [pc, #256]	; (dc60 <socket+0x15c>)
    db5e:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    db60:	7837      	ldrb	r7, [r6, #0]
    db62:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    db64:	7834      	ldrb	r4, [r6, #0]
    db66:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    db68:	7830      	ldrb	r0, [r6, #0]
    db6a:	3001      	adds	r0, #1
    db6c:	2107      	movs	r1, #7
    db6e:	47d0      	blx	sl
    db70:	b2c9      	uxtb	r1, r1
    db72:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    db74:	0123      	lsls	r3, r4, #4
    db76:	4443      	add	r3, r8
    db78:	7a9b      	ldrb	r3, [r3, #10]
    db7a:	2b00      	cmp	r3, #0
    db7c:	d007      	beq.n	db8e <socket+0x8a>
    db7e:	3d01      	subs	r5, #1
    db80:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    db82:	2d00      	cmp	r5, #0
    db84:	d1ec      	bne.n	db60 <socket+0x5c>
    db86:	e7cb      	b.n	db20 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    db88:	4b35      	ldr	r3, [pc, #212]	; (dc60 <socket+0x15c>)
    db8a:	18d4      	adds	r4, r2, r3
    db8c:	e002      	b.n	db94 <socket+0x90>
    db8e:	0124      	lsls	r4, r4, #4
    db90:	4b33      	ldr	r3, [pc, #204]	; (dc60 <socket+0x15c>)
    db92:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    db94:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    db96:	2d00      	cmp	r5, #0
    db98:	dbc4      	blt.n	db24 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    db9a:	2210      	movs	r2, #16
    db9c:	2100      	movs	r1, #0
    db9e:	0020      	movs	r0, r4
    dba0:	4b30      	ldr	r3, [pc, #192]	; (dc64 <socket+0x160>)
    dba2:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    dba4:	2301      	movs	r3, #1
    dba6:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    dba8:	4a2f      	ldr	r2, [pc, #188]	; (dc68 <socket+0x164>)
    dbaa:	8813      	ldrh	r3, [r2, #0]
    dbac:	3301      	adds	r3, #1
    dbae:	b29b      	uxth	r3, r3
    dbb0:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    dbb2:	8813      	ldrh	r3, [r2, #0]
    dbb4:	b29b      	uxth	r3, r3
    dbb6:	2b00      	cmp	r3, #0
    dbb8:	d103      	bne.n	dbc2 <socket+0xbe>
				++gu16SessionID;
    dbba:	8813      	ldrh	r3, [r2, #0]
    dbbc:	3301      	adds	r3, #1
    dbbe:	b29b      	uxth	r3, r3
    dbc0:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    dbc2:	4e29      	ldr	r6, [pc, #164]	; (dc68 <socket+0x164>)
    dbc4:	8833      	ldrh	r3, [r6, #0]
    dbc6:	b29b      	uxth	r3, r3
    dbc8:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    dbca:	4828      	ldr	r0, [pc, #160]	; (dc6c <socket+0x168>)
    dbcc:	4f28      	ldr	r7, [pc, #160]	; (dc70 <socket+0x16c>)
    dbce:	47b8      	blx	r7
    dbd0:	8832      	ldrh	r2, [r6, #0]
    dbd2:	b292      	uxth	r2, r2
    dbd4:	0029      	movs	r1, r5
    dbd6:	4827      	ldr	r0, [pc, #156]	; (dc74 <socket+0x170>)
    dbd8:	47b8      	blx	r7
    dbda:	200d      	movs	r0, #13
    dbdc:	4b26      	ldr	r3, [pc, #152]	; (dc78 <socket+0x174>)
    dbde:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    dbe0:	9b05      	ldr	r3, [sp, #20]
    dbe2:	07db      	lsls	r3, r3, #31
    dbe4:	d59e      	bpl.n	db24 <socket+0x20>
				strSSLCreate.sslSock = sock;
    dbe6:	aa07      	add	r2, sp, #28
    dbe8:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    dbea:	2321      	movs	r3, #33	; 0x21
    dbec:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    dbee:	2300      	movs	r3, #0
    dbf0:	9302      	str	r3, [sp, #8]
    dbf2:	9301      	str	r3, [sp, #4]
    dbf4:	9300      	str	r3, [sp, #0]
    dbf6:	3304      	adds	r3, #4
    dbf8:	2150      	movs	r1, #80	; 0x50
    dbfa:	2002      	movs	r0, #2
    dbfc:	4c1f      	ldr	r4, [pc, #124]	; (dc7c <socket+0x178>)
    dbfe:	47a0      	blx	r4
    dc00:	e790      	b.n	db24 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    dc02:	4b1f      	ldr	r3, [pc, #124]	; (dc80 <socket+0x17c>)
    dc04:	781d      	ldrb	r5, [r3, #0]
    dc06:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    dc08:	781c      	ldrb	r4, [r3, #0]
    dc0a:	0124      	lsls	r4, r4, #4
    dc0c:	4a1d      	ldr	r2, [pc, #116]	; (dc84 <socket+0x180>)
    dc0e:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    dc10:	7819      	ldrb	r1, [r3, #0]
    dc12:	3101      	adds	r1, #1
    dc14:	2203      	movs	r2, #3
    dc16:	400a      	ands	r2, r1
    dc18:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    dc1a:	7aa3      	ldrb	r3, [r4, #10]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d014      	beq.n	dc4a <socket+0x146>
    dc20:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    dc22:	4917      	ldr	r1, [pc, #92]	; (dc80 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    dc24:	4f17      	ldr	r7, [pc, #92]	; (dc84 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    dc26:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    dc28:	780d      	ldrb	r5, [r1, #0]
    dc2a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    dc2c:	780c      	ldrb	r4, [r1, #0]
    dc2e:	0124      	lsls	r4, r4, #4
    dc30:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    dc32:	780b      	ldrb	r3, [r1, #0]
    dc34:	3301      	adds	r3, #1
    dc36:	4003      	ands	r3, r0
    dc38:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    dc3a:	7aa3      	ldrb	r3, [r4, #10]
    dc3c:	2b00      	cmp	r3, #0
    dc3e:	d004      	beq.n	dc4a <socket+0x146>
    dc40:	3a01      	subs	r2, #1
    dc42:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    dc44:	2a00      	cmp	r2, #0
    dc46:	d1ef      	bne.n	dc28 <socket+0x124>
    dc48:	e76a      	b.n	db20 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    dc4a:	3507      	adds	r5, #7
    dc4c:	b26d      	sxtb	r5, r5
					break;
    dc4e:	e7a2      	b.n	db96 <socket+0x92>
	SOCKET					sock = -1;
    dc50:	2501      	movs	r5, #1
    dc52:	426d      	negs	r5, r5
    dc54:	e766      	b.n	db24 <socket+0x20>
    dc56:	46c0      	nop			; (mov r8, r8)
    dc58:	20000400 	.word	0x20000400
    dc5c:	00016971 	.word	0x00016971
    dc60:	20001004 	.word	0x20001004
    dc64:	0000b24d 	.word	0x0000b24d
    dc68:	200003fe 	.word	0x200003fe
    dc6c:	00019204 	.word	0x00019204
    dc70:	00016be5 	.word	0x00016be5
    dc74:	00019ccc 	.word	0x00019ccc
    dc78:	00016c19 	.word	0x00016c19
    dc7c:	0000b361 	.word	0x0000b361
    dc80:	20000401 	.word	0x20000401
    dc84:	20001074 	.word	0x20001074

0000dc88 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    dc88:	b570      	push	{r4, r5, r6, lr}
    dc8a:	b088      	sub	sp, #32
    dc8c:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    dc8e:	db30      	blt.n	dcf2 <connect+0x6a>
    dc90:	2900      	cmp	r1, #0
    dc92:	d031      	beq.n	dcf8 <connect+0x70>
    dc94:	0100      	lsls	r0, r0, #4
    dc96:	4b1d      	ldr	r3, [pc, #116]	; (dd0c <connect+0x84>)
    dc98:	181b      	adds	r3, r3, r0
    dc9a:	7a9b      	ldrb	r3, [r3, #10]
    dc9c:	2b01      	cmp	r3, #1
    dc9e:	d12e      	bne.n	dcfe <connect+0x76>
    dca0:	2a00      	cmp	r2, #0
    dca2:	d02f      	beq.n	dd04 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    dca4:	4b19      	ldr	r3, [pc, #100]	; (dd0c <connect+0x84>)
    dca6:	181b      	adds	r3, r3, r0
    dca8:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    dcaa:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    dcac:	07db      	lsls	r3, r3, #31
    dcae:	d505      	bpl.n	dcbc <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    dcb0:	4b16      	ldr	r3, [pc, #88]	; (dd0c <connect+0x84>)
    dcb2:	181b      	adds	r3, r3, r0
    dcb4:	7ada      	ldrb	r2, [r3, #11]
    dcb6:	ab05      	add	r3, sp, #20
    dcb8:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    dcba:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    dcbc:	ad05      	add	r5, sp, #20
    dcbe:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    dcc0:	2208      	movs	r2, #8
    dcc2:	0028      	movs	r0, r5
    dcc4:	4b12      	ldr	r3, [pc, #72]	; (dd10 <connect+0x88>)
    dcc6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    dcc8:	0124      	lsls	r4, r4, #4
    dcca:	4b10      	ldr	r3, [pc, #64]	; (dd0c <connect+0x84>)
    dccc:	191c      	adds	r4, r3, r4
    dcce:	88e3      	ldrh	r3, [r4, #6]
    dcd0:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    dcd2:	2300      	movs	r3, #0
    dcd4:	9302      	str	r3, [sp, #8]
    dcd6:	9301      	str	r3, [sp, #4]
    dcd8:	9300      	str	r3, [sp, #0]
    dcda:	330c      	adds	r3, #12
    dcdc:	002a      	movs	r2, r5
    dcde:	0031      	movs	r1, r6
    dce0:	2002      	movs	r0, #2
    dce2:	4c0c      	ldr	r4, [pc, #48]	; (dd14 <connect+0x8c>)
    dce4:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    dce6:	2800      	cmp	r0, #0
    dce8:	d001      	beq.n	dcee <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    dcea:	2009      	movs	r0, #9
    dcec:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    dcee:	b008      	add	sp, #32
    dcf0:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    dcf2:	2006      	movs	r0, #6
    dcf4:	4240      	negs	r0, r0
    dcf6:	e7fa      	b.n	dcee <connect+0x66>
    dcf8:	2006      	movs	r0, #6
    dcfa:	4240      	negs	r0, r0
    dcfc:	e7f7      	b.n	dcee <connect+0x66>
    dcfe:	2006      	movs	r0, #6
    dd00:	4240      	negs	r0, r0
    dd02:	e7f4      	b.n	dcee <connect+0x66>
    dd04:	2006      	movs	r0, #6
    dd06:	4240      	negs	r0, r0
    dd08:	e7f1      	b.n	dcee <connect+0x66>
    dd0a:	46c0      	nop			; (mov r8, r8)
    dd0c:	20001004 	.word	0x20001004
    dd10:	0000b239 	.word	0x0000b239
    dd14:	0000b361 	.word	0x0000b361

0000dd18 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    dd18:	b530      	push	{r4, r5, lr}
    dd1a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    dd1c:	2800      	cmp	r0, #0
    dd1e:	db36      	blt.n	dd8e <send+0x76>
    dd20:	2900      	cmp	r1, #0
    dd22:	d037      	beq.n	dd94 <send+0x7c>
    dd24:	23af      	movs	r3, #175	; 0xaf
    dd26:	00db      	lsls	r3, r3, #3
    dd28:	429a      	cmp	r2, r3
    dd2a:	d836      	bhi.n	dd9a <send+0x82>
    dd2c:	0104      	lsls	r4, r0, #4
    dd2e:	4b1e      	ldr	r3, [pc, #120]	; (dda8 <send+0x90>)
    dd30:	191b      	adds	r3, r3, r4
    dd32:	7a9b      	ldrb	r3, [r3, #10]
    dd34:	2b01      	cmp	r3, #1
    dd36:	d133      	bne.n	dda0 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    dd38:	ab04      	add	r3, sp, #16
    dd3a:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    dd3c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    dd3e:	0025      	movs	r5, r4
    dd40:	4c19      	ldr	r4, [pc, #100]	; (dda8 <send+0x90>)
    dd42:	1964      	adds	r4, r4, r5
    dd44:	88e4      	ldrh	r4, [r4, #6]
    dd46:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    dd48:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    dd4a:	2806      	cmp	r0, #6
    dd4c:	dd00      	ble.n	dd50 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    dd4e:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dd50:	0104      	lsls	r4, r0, #4
    dd52:	4b15      	ldr	r3, [pc, #84]	; (dda8 <send+0x90>)
    dd54:	191b      	adds	r3, r3, r4
    dd56:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    dd58:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dd5a:	07e4      	lsls	r4, r4, #31
    dd5c:	d505      	bpl.n	dd6a <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    dd5e:	0100      	lsls	r0, r0, #4
    dd60:	4b11      	ldr	r3, [pc, #68]	; (dda8 <send+0x90>)
    dd62:	1818      	adds	r0, r3, r0
    dd64:	8905      	ldrh	r5, [r0, #8]
    dd66:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    dd68:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    dd6a:	2080      	movs	r0, #128	; 0x80
    dd6c:	4318      	orrs	r0, r3
    dd6e:	9502      	str	r5, [sp, #8]
    dd70:	9201      	str	r2, [sp, #4]
    dd72:	9100      	str	r1, [sp, #0]
    dd74:	2310      	movs	r3, #16
    dd76:	aa04      	add	r2, sp, #16
    dd78:	0001      	movs	r1, r0
    dd7a:	2002      	movs	r0, #2
    dd7c:	4c0b      	ldr	r4, [pc, #44]	; (ddac <send+0x94>)
    dd7e:	47a0      	blx	r4
    dd80:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    dd82:	2800      	cmp	r0, #0
    dd84:	d000      	beq.n	dd88 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    dd86:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    dd88:	0018      	movs	r0, r3
    dd8a:	b009      	add	sp, #36	; 0x24
    dd8c:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    dd8e:	2306      	movs	r3, #6
    dd90:	425b      	negs	r3, r3
    dd92:	e7f9      	b.n	dd88 <send+0x70>
    dd94:	2306      	movs	r3, #6
    dd96:	425b      	negs	r3, r3
    dd98:	e7f6      	b.n	dd88 <send+0x70>
    dd9a:	2306      	movs	r3, #6
    dd9c:	425b      	negs	r3, r3
    dd9e:	e7f3      	b.n	dd88 <send+0x70>
    dda0:	2306      	movs	r3, #6
    dda2:	425b      	negs	r3, r3
    dda4:	e7f0      	b.n	dd88 <send+0x70>
    dda6:	46c0      	nop			; (mov r8, r8)
    dda8:	20001004 	.word	0x20001004
    ddac:	0000b361 	.word	0x0000b361

0000ddb0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    ddb0:	b530      	push	{r4, r5, lr}
    ddb2:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    ddb4:	2800      	cmp	r0, #0
    ddb6:	db34      	blt.n	de22 <recv+0x72>
    ddb8:	2900      	cmp	r1, #0
    ddba:	d035      	beq.n	de28 <recv+0x78>
    ddbc:	2a00      	cmp	r2, #0
    ddbe:	d036      	beq.n	de2e <recv+0x7e>
    ddc0:	0105      	lsls	r5, r0, #4
    ddc2:	4c1e      	ldr	r4, [pc, #120]	; (de3c <recv+0x8c>)
    ddc4:	1964      	adds	r4, r4, r5
    ddc6:	7aa4      	ldrb	r4, [r4, #10]
    ddc8:	2c01      	cmp	r4, #1
    ddca:	d133      	bne.n	de34 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    ddcc:	4c1b      	ldr	r4, [pc, #108]	; (de3c <recv+0x8c>)
    ddce:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    ddd0:	1964      	adds	r4, r4, r5
    ddd2:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    ddd4:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    ddd6:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    ddd8:	2900      	cmp	r1, #0
    ddda:	d11d      	bne.n	de18 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    dddc:	2101      	movs	r1, #1
    ddde:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dde0:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    dde2:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dde4:	07d2      	lsls	r2, r2, #31
    dde6:	d500      	bpl.n	ddea <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    dde8:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    ddea:	2b00      	cmp	r3, #0
    ddec:	d117      	bne.n	de1e <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    ddee:	3b01      	subs	r3, #1
    ddf0:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    ddf2:	aa04      	add	r2, sp, #16
    ddf4:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    ddf6:	0100      	lsls	r0, r0, #4
    ddf8:	4b10      	ldr	r3, [pc, #64]	; (de3c <recv+0x8c>)
    ddfa:	1818      	adds	r0, r3, r0
    ddfc:	88c3      	ldrh	r3, [r0, #6]
    ddfe:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    de00:	2300      	movs	r3, #0
    de02:	9302      	str	r3, [sp, #8]
    de04:	9301      	str	r3, [sp, #4]
    de06:	9300      	str	r3, [sp, #0]
    de08:	3308      	adds	r3, #8
    de0a:	2002      	movs	r0, #2
    de0c:	4c0c      	ldr	r4, [pc, #48]	; (de40 <recv+0x90>)
    de0e:	47a0      	blx	r4
    de10:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    de12:	2800      	cmp	r0, #0
    de14:	d000      	beq.n	de18 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    de16:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    de18:	0010      	movs	r0, r2
    de1a:	b007      	add	sp, #28
    de1c:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    de1e:	9304      	str	r3, [sp, #16]
    de20:	e7e7      	b.n	ddf2 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    de22:	2206      	movs	r2, #6
    de24:	4252      	negs	r2, r2
    de26:	e7f7      	b.n	de18 <recv+0x68>
    de28:	2206      	movs	r2, #6
    de2a:	4252      	negs	r2, r2
    de2c:	e7f4      	b.n	de18 <recv+0x68>
    de2e:	2206      	movs	r2, #6
    de30:	4252      	negs	r2, r2
    de32:	e7f1      	b.n	de18 <recv+0x68>
    de34:	2206      	movs	r2, #6
    de36:	4252      	negs	r2, r2
    de38:	e7ee      	b.n	de18 <recv+0x68>
    de3a:	46c0      	nop			; (mov r8, r8)
    de3c:	20001004 	.word	0x20001004
    de40:	0000b361 	.word	0x0000b361

0000de44 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    de44:	b530      	push	{r4, r5, lr}
    de46:	b087      	sub	sp, #28
    de48:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    de4a:	481e      	ldr	r0, [pc, #120]	; (dec4 <close+0x80>)
    de4c:	4d1e      	ldr	r5, [pc, #120]	; (dec8 <close+0x84>)
    de4e:	47a8      	blx	r5
    de50:	0021      	movs	r1, r4
    de52:	481e      	ldr	r0, [pc, #120]	; (decc <close+0x88>)
    de54:	47a8      	blx	r5
    de56:	200d      	movs	r0, #13
    de58:	4b1d      	ldr	r3, [pc, #116]	; (ded0 <close+0x8c>)
    de5a:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    de5c:	2c00      	cmp	r4, #0
    de5e:	db2a      	blt.n	deb6 <close+0x72>
    de60:	0122      	lsls	r2, r4, #4
    de62:	4b1c      	ldr	r3, [pc, #112]	; (ded4 <close+0x90>)
    de64:	189b      	adds	r3, r3, r2
    de66:	7a9b      	ldrb	r3, [r3, #10]
    de68:	2b01      	cmp	r3, #1
    de6a:	d127      	bne.n	debc <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    de6c:	a905      	add	r1, sp, #20
    de6e:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    de70:	4b18      	ldr	r3, [pc, #96]	; (ded4 <close+0x90>)
    de72:	189b      	adds	r3, r3, r2
    de74:	88da      	ldrh	r2, [r3, #6]
    de76:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    de78:	2200      	movs	r2, #0
    de7a:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    de7c:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    de7e:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    de80:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    de82:	07db      	lsls	r3, r3, #31
    de84:	d500      	bpl.n	de88 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    de86:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    de88:	2300      	movs	r3, #0
    de8a:	9302      	str	r3, [sp, #8]
    de8c:	9301      	str	r3, [sp, #4]
    de8e:	9300      	str	r3, [sp, #0]
    de90:	3304      	adds	r3, #4
    de92:	aa05      	add	r2, sp, #20
    de94:	2002      	movs	r0, #2
    de96:	4d10      	ldr	r5, [pc, #64]	; (ded8 <close+0x94>)
    de98:	47a8      	blx	r5
    de9a:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    de9c:	d001      	beq.n	dea2 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    de9e:	2509      	movs	r5, #9
    dea0:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    dea2:	0124      	lsls	r4, r4, #4
    dea4:	480b      	ldr	r0, [pc, #44]	; (ded4 <close+0x90>)
    dea6:	1820      	adds	r0, r4, r0
    dea8:	2210      	movs	r2, #16
    deaa:	2100      	movs	r1, #0
    deac:	4b0b      	ldr	r3, [pc, #44]	; (dedc <close+0x98>)
    deae:	4798      	blx	r3
	}
	return s8Ret;
}
    deb0:	0028      	movs	r0, r5
    deb2:	b007      	add	sp, #28
    deb4:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    deb6:	2506      	movs	r5, #6
    deb8:	426d      	negs	r5, r5
    deba:	e7f9      	b.n	deb0 <close+0x6c>
    debc:	2506      	movs	r5, #6
    debe:	426d      	negs	r5, r5
    dec0:	e7f6      	b.n	deb0 <close+0x6c>
    dec2:	46c0      	nop			; (mov r8, r8)
    dec4:	00019204 	.word	0x00019204
    dec8:	00016be5 	.word	0x00016be5
    decc:	00019cb4 	.word	0x00019cb4
    ded0:	00016c19 	.word	0x00016c19
    ded4:	20001004 	.word	0x20001004
    ded8:	0000b361 	.word	0x0000b361
    dedc:	0000b24d 	.word	0x0000b24d

0000dee0 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    dee0:	b570      	push	{r4, r5, r6, lr}
    dee2:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    dee4:	2300      	movs	r3, #0
    dee6:	9301      	str	r3, [sp, #4]
    dee8:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    deea:	2100      	movs	r1, #0
    deec:	7802      	ldrb	r2, [r0, #0]
    deee:	1c44      	adds	r4, r0, #1
    def0:	3005      	adds	r0, #5
    def2:	000b      	movs	r3, r1
    def4:	e009      	b.n	df0a <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    def6:	009d      	lsls	r5, r3, #2
    def8:	195b      	adds	r3, r3, r5
    defa:	005b      	lsls	r3, r3, #1
    defc:	189b      	adds	r3, r3, r2
    defe:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    df00:	0022      	movs	r2, r4
    df02:	3401      	adds	r4, #1
			if(j > 4)
    df04:	42a0      	cmp	r0, r4
    df06:	d00a      	beq.n	df1e <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    df08:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    df0a:	2a2e      	cmp	r2, #46	; 0x2e
    df0c:	d00a      	beq.n	df24 <nmi_inet_addr+0x44>
    df0e:	2a00      	cmp	r2, #0
    df10:	d00c      	beq.n	df2c <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    df12:	3a30      	subs	r2, #48	; 0x30
    df14:	b2d2      	uxtb	r2, r2
    df16:	2a09      	cmp	r2, #9
    df18:	d9ed      	bls.n	def6 <nmi_inet_addr+0x16>
				return 0;
    df1a:	2000      	movs	r0, #0
    df1c:	e000      	b.n	df20 <nmi_inet_addr+0x40>
				return 0;
    df1e:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    df20:	b002      	add	sp, #8
    df22:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    df24:	466a      	mov	r2, sp
    df26:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    df28:	0020      	movs	r0, r4
    df2a:	e002      	b.n	df32 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    df2c:	466a      	mov	r2, sp
    df2e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    df30:	0020      	movs	r0, r4
    df32:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    df34:	2e04      	cmp	r6, #4
    df36:	d1d9      	bne.n	deec <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    df38:	2204      	movs	r2, #4
    df3a:	4669      	mov	r1, sp
    df3c:	a801      	add	r0, sp, #4
    df3e:	4b02      	ldr	r3, [pc, #8]	; (df48 <nmi_inet_addr+0x68>)
    df40:	4798      	blx	r3
	return u32IP;
    df42:	9801      	ldr	r0, [sp, #4]
    df44:	e7ec      	b.n	df20 <nmi_inet_addr+0x40>
    df46:	46c0      	nop			; (mov r8, r8)
    df48:	0000b239 	.word	0x0000b239

0000df4c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    df4c:	b510      	push	{r4, lr}
    df4e:	b084      	sub	sp, #16
    df50:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    df52:	4b0b      	ldr	r3, [pc, #44]	; (df80 <gethostbyname+0x34>)
    df54:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    df56:	b2c3      	uxtb	r3, r0
    df58:	2b40      	cmp	r3, #64	; 0x40
    df5a:	d80d      	bhi.n	df78 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    df5c:	23ff      	movs	r3, #255	; 0xff
    df5e:	4003      	ands	r3, r0
    df60:	3301      	adds	r3, #1
    df62:	2200      	movs	r2, #0
    df64:	9202      	str	r2, [sp, #8]
    df66:	9201      	str	r2, [sp, #4]
    df68:	9200      	str	r2, [sp, #0]
    df6a:	0022      	movs	r2, r4
    df6c:	214a      	movs	r1, #74	; 0x4a
    df6e:	2002      	movs	r0, #2
    df70:	4c04      	ldr	r4, [pc, #16]	; (df84 <gethostbyname+0x38>)
    df72:	47a0      	blx	r4
	}
	return s8Err;
}
    df74:	b004      	add	sp, #16
    df76:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    df78:	2006      	movs	r0, #6
    df7a:	4240      	negs	r0, r0
    df7c:	e7fa      	b.n	df74 <gethostbyname+0x28>
    df7e:	46c0      	nop			; (mov r8, r8)
    df80:	0000b25d 	.word	0x0000b25d
    df84:	0000b361 	.word	0x0000b361

0000df88 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    df88:	b570      	push	{r4, r5, r6, lr}
    df8a:	b082      	sub	sp, #8
    df8c:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    df8e:	4b2a      	ldr	r3, [pc, #168]	; (e038 <spi_flash_enable+0xb0>)
    df90:	4798      	blx	r3
    df92:	0500      	lsls	r0, r0, #20
    df94:	0d00      	lsrs	r0, r0, #20
    df96:	4b29      	ldr	r3, [pc, #164]	; (e03c <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    df98:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    df9a:	4298      	cmp	r0, r3
    df9c:	d802      	bhi.n	dfa4 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    df9e:	0028      	movs	r0, r5
    dfa0:	b002      	add	sp, #8
    dfa2:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    dfa4:	a901      	add	r1, sp, #4
    dfa6:	4826      	ldr	r0, [pc, #152]	; (e040 <spi_flash_enable+0xb8>)
    dfa8:	4b26      	ldr	r3, [pc, #152]	; (e044 <spi_flash_enable+0xbc>)
    dfaa:	4798      	blx	r3
    dfac:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    dfae:	d1f6      	bne.n	df9e <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    dfb0:	4b25      	ldr	r3, [pc, #148]	; (e048 <spi_flash_enable+0xc0>)
    dfb2:	9a01      	ldr	r2, [sp, #4]
    dfb4:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    dfb6:	4925      	ldr	r1, [pc, #148]	; (e04c <spi_flash_enable+0xc4>)
    dfb8:	4319      	orrs	r1, r3
    dfba:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    dfbc:	4820      	ldr	r0, [pc, #128]	; (e040 <spi_flash_enable+0xb8>)
    dfbe:	4b24      	ldr	r3, [pc, #144]	; (e050 <spi_flash_enable+0xc8>)
    dfc0:	4798      	blx	r3
		if(enable) {
    dfc2:	2c00      	cmp	r4, #0
    dfc4:	d020      	beq.n	e008 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    dfc6:	2100      	movs	r1, #0
    dfc8:	4822      	ldr	r0, [pc, #136]	; (e054 <spi_flash_enable+0xcc>)
    dfca:	4c21      	ldr	r4, [pc, #132]	; (e050 <spi_flash_enable+0xc8>)
    dfcc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    dfce:	21ab      	movs	r1, #171	; 0xab
    dfd0:	4821      	ldr	r0, [pc, #132]	; (e058 <spi_flash_enable+0xd0>)
    dfd2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    dfd4:	2101      	movs	r1, #1
    dfd6:	4821      	ldr	r0, [pc, #132]	; (e05c <spi_flash_enable+0xd4>)
    dfd8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    dfda:	2100      	movs	r1, #0
    dfdc:	4820      	ldr	r0, [pc, #128]	; (e060 <spi_flash_enable+0xd8>)
    dfde:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    dfe0:	2181      	movs	r1, #129	; 0x81
    dfe2:	4820      	ldr	r0, [pc, #128]	; (e064 <spi_flash_enable+0xdc>)
    dfe4:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    dfe6:	4e20      	ldr	r6, [pc, #128]	; (e068 <spi_flash_enable+0xe0>)
    dfe8:	4c20      	ldr	r4, [pc, #128]	; (e06c <spi_flash_enable+0xe4>)
    dfea:	0030      	movs	r0, r6
    dfec:	47a0      	blx	r4
    dfee:	2801      	cmp	r0, #1
    dff0:	d1fb      	bne.n	dfea <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    dff2:	4b15      	ldr	r3, [pc, #84]	; (e048 <spi_flash_enable+0xc0>)
    dff4:	9a01      	ldr	r2, [sp, #4]
    dff6:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    dff8:	2180      	movs	r1, #128	; 0x80
    dffa:	0249      	lsls	r1, r1, #9
    dffc:	4319      	orrs	r1, r3
    dffe:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    e000:	480f      	ldr	r0, [pc, #60]	; (e040 <spi_flash_enable+0xb8>)
    e002:	4b13      	ldr	r3, [pc, #76]	; (e050 <spi_flash_enable+0xc8>)
    e004:	4798      	blx	r3
    e006:	e7ca      	b.n	df9e <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    e008:	2100      	movs	r1, #0
    e00a:	4812      	ldr	r0, [pc, #72]	; (e054 <spi_flash_enable+0xcc>)
    e00c:	4c10      	ldr	r4, [pc, #64]	; (e050 <spi_flash_enable+0xc8>)
    e00e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    e010:	21b9      	movs	r1, #185	; 0xb9
    e012:	4811      	ldr	r0, [pc, #68]	; (e058 <spi_flash_enable+0xd0>)
    e014:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    e016:	2101      	movs	r1, #1
    e018:	4810      	ldr	r0, [pc, #64]	; (e05c <spi_flash_enable+0xd4>)
    e01a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    e01c:	2100      	movs	r1, #0
    e01e:	4810      	ldr	r0, [pc, #64]	; (e060 <spi_flash_enable+0xd8>)
    e020:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    e022:	2181      	movs	r1, #129	; 0x81
    e024:	480f      	ldr	r0, [pc, #60]	; (e064 <spi_flash_enable+0xdc>)
    e026:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    e028:	4e0f      	ldr	r6, [pc, #60]	; (e068 <spi_flash_enable+0xe0>)
    e02a:	4c10      	ldr	r4, [pc, #64]	; (e06c <spi_flash_enable+0xe4>)
    e02c:	0030      	movs	r0, r6
    e02e:	47a0      	blx	r4
    e030:	2801      	cmp	r0, #1
    e032:	d1fb      	bne.n	e02c <spi_flash_enable+0xa4>
    e034:	e7dd      	b.n	dff2 <spi_flash_enable+0x6a>
    e036:	46c0      	nop			; (mov r8, r8)
    e038:	0000c2cd 	.word	0x0000c2cd
    e03c:	0000039f 	.word	0x0000039f
    e040:	00001410 	.word	0x00001410
    e044:	0000c71d 	.word	0x0000c71d
    e048:	f8888fff 	.word	0xf8888fff
    e04c:	01111000 	.word	0x01111000
    e050:	0000c729 	.word	0x0000c729
    e054:	00010208 	.word	0x00010208
    e058:	0001020c 	.word	0x0001020c
    e05c:	00010214 	.word	0x00010214
    e060:	0001021c 	.word	0x0001021c
    e064:	00010204 	.word	0x00010204
    e068:	00010218 	.word	0x00010218
    e06c:	0000c711 	.word	0x0000c711

0000e070 <crc32_recalculate>:
    e070:	b5f0      	push	{r4, r5, r6, r7, lr}
    e072:	46c6      	mov	lr, r8
    e074:	b500      	push	{lr}
    e076:	2303      	movs	r3, #3
    e078:	0007      	movs	r7, r0
    e07a:	439f      	bics	r7, r3
    e07c:	6813      	ldr	r3, [r2, #0]
    e07e:	43db      	mvns	r3, r3
    e080:	000c      	movs	r4, r1
    e082:	2903      	cmp	r1, #3
    e084:	d902      	bls.n	e08c <crc32_recalculate+0x1c>
    e086:	4244      	negs	r4, r0
    e088:	2003      	movs	r0, #3
    e08a:	4004      	ands	r4, r0
    e08c:	2c00      	cmp	r4, #0
    e08e:	d016      	beq.n	e0be <crc32_recalculate+0x4e>
    e090:	1b09      	subs	r1, r1, r4
    e092:	1d3e      	adds	r6, r7, #4
    e094:	683d      	ldr	r5, [r7, #0]
    e096:	00e0      	lsls	r0, r4, #3
    e098:	4240      	negs	r0, r0
    e09a:	3020      	adds	r0, #32
    e09c:	40c5      	lsrs	r5, r0
    e09e:	406b      	eors	r3, r5
    e0a0:	00e0      	lsls	r0, r4, #3
    e0a2:	d019      	beq.n	e0d8 <crc32_recalculate+0x68>
    e0a4:	2401      	movs	r4, #1
    e0a6:	4d27      	ldr	r5, [pc, #156]	; (e144 <crc32_recalculate+0xd4>)
    e0a8:	e003      	b.n	e0b2 <crc32_recalculate+0x42>
    e0aa:	085b      	lsrs	r3, r3, #1
    e0ac:	3801      	subs	r0, #1
    e0ae:	2800      	cmp	r0, #0
    e0b0:	d004      	beq.n	e0bc <crc32_recalculate+0x4c>
    e0b2:	421c      	tst	r4, r3
    e0b4:	d0f9      	beq.n	e0aa <crc32_recalculate+0x3a>
    e0b6:	085b      	lsrs	r3, r3, #1
    e0b8:	406b      	eors	r3, r5
    e0ba:	e7f7      	b.n	e0ac <crc32_recalculate+0x3c>
    e0bc:	0037      	movs	r7, r6
    e0be:	2003      	movs	r0, #3
    e0c0:	000c      	movs	r4, r1
    e0c2:	4384      	bics	r4, r0
    e0c4:	d01e      	beq.n	e104 <crc32_recalculate+0x94>
    e0c6:	1b08      	subs	r0, r1, r4
    e0c8:	4684      	mov	ip, r0
    e0ca:	0889      	lsrs	r1, r1, #2
    e0cc:	4688      	mov	r8, r1
    e0ce:	003e      	movs	r6, r7
    e0d0:	000d      	movs	r5, r1
    e0d2:	2001      	movs	r0, #1
    e0d4:	4c1b      	ldr	r4, [pc, #108]	; (e144 <crc32_recalculate+0xd4>)
    e0d6:	e00b      	b.n	e0f0 <crc32_recalculate+0x80>
    e0d8:	0037      	movs	r7, r6
    e0da:	e7f0      	b.n	e0be <crc32_recalculate+0x4e>
    e0dc:	085b      	lsrs	r3, r3, #1
    e0de:	3901      	subs	r1, #1
    e0e0:	2900      	cmp	r1, #0
    e0e2:	d004      	beq.n	e0ee <crc32_recalculate+0x7e>
    e0e4:	4218      	tst	r0, r3
    e0e6:	d0f9      	beq.n	e0dc <crc32_recalculate+0x6c>
    e0e8:	085b      	lsrs	r3, r3, #1
    e0ea:	4063      	eors	r3, r4
    e0ec:	e7f7      	b.n	e0de <crc32_recalculate+0x6e>
    e0ee:	3604      	adds	r6, #4
    e0f0:	3d01      	subs	r5, #1
    e0f2:	d303      	bcc.n	e0fc <crc32_recalculate+0x8c>
    e0f4:	6831      	ldr	r1, [r6, #0]
    e0f6:	404b      	eors	r3, r1
    e0f8:	2120      	movs	r1, #32
    e0fa:	e7f3      	b.n	e0e4 <crc32_recalculate+0x74>
    e0fc:	4641      	mov	r1, r8
    e0fe:	0089      	lsls	r1, r1, #2
    e100:	187f      	adds	r7, r7, r1
    e102:	4661      	mov	r1, ip
    e104:	2900      	cmp	r1, #0
    e106:	d017      	beq.n	e138 <crc32_recalculate+0xc8>
    e108:	683c      	ldr	r4, [r7, #0]
    e10a:	00c8      	lsls	r0, r1, #3
    e10c:	4240      	negs	r0, r0
    e10e:	3020      	adds	r0, #32
    e110:	2501      	movs	r5, #1
    e112:	426d      	negs	r5, r5
    e114:	40c5      	lsrs	r5, r0
    e116:	0028      	movs	r0, r5
    e118:	4020      	ands	r0, r4
    e11a:	4043      	eors	r3, r0
    e11c:	00c9      	lsls	r1, r1, #3
    e11e:	d00b      	beq.n	e138 <crc32_recalculate+0xc8>
    e120:	2001      	movs	r0, #1
    e122:	4c08      	ldr	r4, [pc, #32]	; (e144 <crc32_recalculate+0xd4>)
    e124:	e003      	b.n	e12e <crc32_recalculate+0xbe>
    e126:	085b      	lsrs	r3, r3, #1
    e128:	3901      	subs	r1, #1
    e12a:	2900      	cmp	r1, #0
    e12c:	d004      	beq.n	e138 <crc32_recalculate+0xc8>
    e12e:	4218      	tst	r0, r3
    e130:	d0f9      	beq.n	e126 <crc32_recalculate+0xb6>
    e132:	085b      	lsrs	r3, r3, #1
    e134:	4063      	eors	r3, r4
    e136:	e7f7      	b.n	e128 <crc32_recalculate+0xb8>
    e138:	43db      	mvns	r3, r3
    e13a:	6013      	str	r3, [r2, #0]
    e13c:	2000      	movs	r0, #0
    e13e:	bc04      	pop	{r2}
    e140:	4690      	mov	r8, r2
    e142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e144:	edb88320 	.word	0xedb88320

0000e148 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    e148:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    e14a:	2301      	movs	r3, #1
    e14c:	2800      	cmp	r0, #0
    e14e:	d001      	beq.n	e154 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    e150:	0018      	movs	r0, r3
    e152:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    e154:	4b01      	ldr	r3, [pc, #4]	; (e15c <mem_test_unit_ready+0x14>)
    e156:	4798      	blx	r3
    e158:	0003      	movs	r3, r0
    e15a:	e7f9      	b.n	e150 <mem_test_unit_ready+0x8>
    e15c:	0000a5bd 	.word	0x0000a5bd

0000e160 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    e160:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    e162:	2301      	movs	r3, #1
    e164:	2800      	cmp	r0, #0
    e166:	d001      	beq.n	e16c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    e168:	0018      	movs	r0, r3
    e16a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    e16c:	0008      	movs	r0, r1
    e16e:	4b02      	ldr	r3, [pc, #8]	; (e178 <mem_read_capacity+0x18>)
    e170:	4798      	blx	r3
    e172:	0003      	movs	r3, r0
    e174:	e7f8      	b.n	e168 <mem_read_capacity+0x8>
    e176:	46c0      	nop			; (mov r8, r8)
    e178:	0000a5ed 	.word	0x0000a5ed

0000e17c <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    e17c:	4243      	negs	r3, r0
    e17e:	4158      	adcs	r0, r3
    e180:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    e182:	4770      	bx	lr

0000e184 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    e184:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    e186:	2301      	movs	r3, #1
    e188:	2800      	cmp	r0, #0
    e18a:	d001      	beq.n	e190 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    e18c:	0018      	movs	r0, r3
    e18e:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    e190:	4b01      	ldr	r3, [pc, #4]	; (e198 <mem_wr_protect+0x14>)
    e192:	4798      	blx	r3
    e194:	0003      	movs	r3, r0
    e196:	e7f9      	b.n	e18c <mem_wr_protect+0x8>
    e198:	0000a5fd 	.word	0x0000a5fd

0000e19c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    e19c:	b510      	push	{r4, lr}
    e19e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    e1a0:	2301      	movs	r3, #1
    e1a2:	2800      	cmp	r0, #0
    e1a4:	d001      	beq.n	e1aa <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    e1a6:	0018      	movs	r0, r3
    e1a8:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    e1aa:	0011      	movs	r1, r2
    e1ac:	0020      	movs	r0, r4
    e1ae:	4b02      	ldr	r3, [pc, #8]	; (e1b8 <memory_2_ram+0x1c>)
    e1b0:	4798      	blx	r3
    e1b2:	0003      	movs	r3, r0
    e1b4:	e7f7      	b.n	e1a6 <memory_2_ram+0xa>
    e1b6:	46c0      	nop			; (mov r8, r8)
    e1b8:	0000a651 	.word	0x0000a651

0000e1bc <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    e1bc:	b510      	push	{r4, lr}
    e1be:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    e1c0:	2301      	movs	r3, #1
    e1c2:	2800      	cmp	r0, #0
    e1c4:	d001      	beq.n	e1ca <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    e1c6:	0018      	movs	r0, r3
    e1c8:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    e1ca:	0011      	movs	r1, r2
    e1cc:	0020      	movs	r0, r4
    e1ce:	4b02      	ldr	r3, [pc, #8]	; (e1d8 <ram_2_memory+0x1c>)
    e1d0:	4798      	blx	r3
    e1d2:	0003      	movs	r3, r0
    e1d4:	e7f7      	b.n	e1c6 <ram_2_memory+0xa>
    e1d6:	46c0      	nop			; (mov r8, r8)
    e1d8:	0000a6a9 	.word	0x0000a6a9

0000e1dc <cpu_irq_enter_critical>:
    e1dc:	4b0c      	ldr	r3, [pc, #48]	; (e210 <cpu_irq_enter_critical+0x34>)
    e1de:	681b      	ldr	r3, [r3, #0]
    e1e0:	2b00      	cmp	r3, #0
    e1e2:	d106      	bne.n	e1f2 <cpu_irq_enter_critical+0x16>
    e1e4:	f3ef 8310 	mrs	r3, PRIMASK
    e1e8:	2b00      	cmp	r3, #0
    e1ea:	d007      	beq.n	e1fc <cpu_irq_enter_critical+0x20>
    e1ec:	2200      	movs	r2, #0
    e1ee:	4b09      	ldr	r3, [pc, #36]	; (e214 <cpu_irq_enter_critical+0x38>)
    e1f0:	701a      	strb	r2, [r3, #0]
    e1f2:	4a07      	ldr	r2, [pc, #28]	; (e210 <cpu_irq_enter_critical+0x34>)
    e1f4:	6813      	ldr	r3, [r2, #0]
    e1f6:	3301      	adds	r3, #1
    e1f8:	6013      	str	r3, [r2, #0]
    e1fa:	4770      	bx	lr
    e1fc:	b672      	cpsid	i
    e1fe:	f3bf 8f5f 	dmb	sy
    e202:	2200      	movs	r2, #0
    e204:	4b04      	ldr	r3, [pc, #16]	; (e218 <cpu_irq_enter_critical+0x3c>)
    e206:	701a      	strb	r2, [r3, #0]
    e208:	3201      	adds	r2, #1
    e20a:	4b02      	ldr	r3, [pc, #8]	; (e214 <cpu_irq_enter_critical+0x38>)
    e20c:	701a      	strb	r2, [r3, #0]
    e20e:	e7f0      	b.n	e1f2 <cpu_irq_enter_critical+0x16>
    e210:	20000404 	.word	0x20000404
    e214:	20000408 	.word	0x20000408
    e218:	2000000e 	.word	0x2000000e

0000e21c <cpu_irq_leave_critical>:
    e21c:	4b08      	ldr	r3, [pc, #32]	; (e240 <cpu_irq_leave_critical+0x24>)
    e21e:	681a      	ldr	r2, [r3, #0]
    e220:	3a01      	subs	r2, #1
    e222:	601a      	str	r2, [r3, #0]
    e224:	681b      	ldr	r3, [r3, #0]
    e226:	2b00      	cmp	r3, #0
    e228:	d109      	bne.n	e23e <cpu_irq_leave_critical+0x22>
    e22a:	4b06      	ldr	r3, [pc, #24]	; (e244 <cpu_irq_leave_critical+0x28>)
    e22c:	781b      	ldrb	r3, [r3, #0]
    e22e:	2b00      	cmp	r3, #0
    e230:	d005      	beq.n	e23e <cpu_irq_leave_critical+0x22>
    e232:	2201      	movs	r2, #1
    e234:	4b04      	ldr	r3, [pc, #16]	; (e248 <cpu_irq_leave_critical+0x2c>)
    e236:	701a      	strb	r2, [r3, #0]
    e238:	f3bf 8f5f 	dmb	sy
    e23c:	b662      	cpsie	i
    e23e:	4770      	bx	lr
    e240:	20000404 	.word	0x20000404
    e244:	20000408 	.word	0x20000408
    e248:	2000000e 	.word	0x2000000e

0000e24c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    e24c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e24e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    e250:	ac01      	add	r4, sp, #4
    e252:	2501      	movs	r5, #1
    e254:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    e256:	2700      	movs	r7, #0
    e258:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    e25a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    e25c:	0021      	movs	r1, r4
    e25e:	2017      	movs	r0, #23
    e260:	4e06      	ldr	r6, [pc, #24]	; (e27c <system_board_init+0x30>)
    e262:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    e264:	2280      	movs	r2, #128	; 0x80
    e266:	0412      	lsls	r2, r2, #16
    e268:	4b05      	ldr	r3, [pc, #20]	; (e280 <system_board_init+0x34>)
    e26a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    e26c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    e26e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    e270:	0021      	movs	r1, r4
    e272:	2014      	movs	r0, #20
    e274:	47b0      	blx	r6
}
    e276:	b003      	add	sp, #12
    e278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e27a:	46c0      	nop			; (mov r8, r8)
    e27c:	0000e6ed 	.word	0x0000e6ed
    e280:	41004400 	.word	0x41004400

0000e284 <extint_register_callback>:
    e284:	2317      	movs	r3, #23
    e286:	2a00      	cmp	r2, #0
    e288:	d001      	beq.n	e28e <extint_register_callback+0xa>
    e28a:	0018      	movs	r0, r3
    e28c:	4770      	bx	lr
    e28e:	008b      	lsls	r3, r1, #2
    e290:	4a06      	ldr	r2, [pc, #24]	; (e2ac <extint_register_callback+0x28>)
    e292:	589b      	ldr	r3, [r3, r2]
    e294:	2b00      	cmp	r3, #0
    e296:	d003      	beq.n	e2a0 <extint_register_callback+0x1c>
    e298:	4283      	cmp	r3, r0
    e29a:	d005      	beq.n	e2a8 <extint_register_callback+0x24>
    e29c:	231d      	movs	r3, #29
    e29e:	e7f4      	b.n	e28a <extint_register_callback+0x6>
    e2a0:	0089      	lsls	r1, r1, #2
    e2a2:	5088      	str	r0, [r1, r2]
    e2a4:	2300      	movs	r3, #0
    e2a6:	e7f0      	b.n	e28a <extint_register_callback+0x6>
    e2a8:	2300      	movs	r3, #0
    e2aa:	e7ee      	b.n	e28a <extint_register_callback+0x6>
    e2ac:	200010c4 	.word	0x200010c4

0000e2b0 <extint_chan_enable_callback>:
    e2b0:	2317      	movs	r3, #23
    e2b2:	2900      	cmp	r1, #0
    e2b4:	d001      	beq.n	e2ba <extint_chan_enable_callback+0xa>
    e2b6:	0018      	movs	r0, r3
    e2b8:	4770      	bx	lr
    e2ba:	2200      	movs	r2, #0
    e2bc:	281f      	cmp	r0, #31
    e2be:	d800      	bhi.n	e2c2 <extint_chan_enable_callback+0x12>
    e2c0:	4a02      	ldr	r2, [pc, #8]	; (e2cc <extint_chan_enable_callback+0x1c>)
    e2c2:	2301      	movs	r3, #1
    e2c4:	4083      	lsls	r3, r0
    e2c6:	60d3      	str	r3, [r2, #12]
    e2c8:	2300      	movs	r3, #0
    e2ca:	e7f4      	b.n	e2b6 <extint_chan_enable_callback+0x6>
    e2cc:	40001800 	.word	0x40001800

0000e2d0 <extint_chan_disable_callback>:
    e2d0:	2317      	movs	r3, #23
    e2d2:	2900      	cmp	r1, #0
    e2d4:	d001      	beq.n	e2da <extint_chan_disable_callback+0xa>
    e2d6:	0018      	movs	r0, r3
    e2d8:	4770      	bx	lr
    e2da:	2200      	movs	r2, #0
    e2dc:	281f      	cmp	r0, #31
    e2de:	d800      	bhi.n	e2e2 <extint_chan_disable_callback+0x12>
    e2e0:	4a02      	ldr	r2, [pc, #8]	; (e2ec <extint_chan_disable_callback+0x1c>)
    e2e2:	2301      	movs	r3, #1
    e2e4:	4083      	lsls	r3, r0
    e2e6:	6093      	str	r3, [r2, #8]
    e2e8:	2300      	movs	r3, #0
    e2ea:	e7f4      	b.n	e2d6 <extint_chan_disable_callback+0x6>
    e2ec:	40001800 	.word	0x40001800

0000e2f0 <EIC_Handler>:
    e2f0:	b570      	push	{r4, r5, r6, lr}
    e2f2:	2200      	movs	r2, #0
    e2f4:	4b10      	ldr	r3, [pc, #64]	; (e338 <EIC_Handler+0x48>)
    e2f6:	701a      	strb	r2, [r3, #0]
    e2f8:	2300      	movs	r3, #0
    e2fa:	4910      	ldr	r1, [pc, #64]	; (e33c <EIC_Handler+0x4c>)
    e2fc:	251f      	movs	r5, #31
    e2fe:	4e10      	ldr	r6, [pc, #64]	; (e340 <EIC_Handler+0x50>)
    e300:	4c0d      	ldr	r4, [pc, #52]	; (e338 <EIC_Handler+0x48>)
    e302:	e00a      	b.n	e31a <EIC_Handler+0x2a>
    e304:	490d      	ldr	r1, [pc, #52]	; (e33c <EIC_Handler+0x4c>)
    e306:	e008      	b.n	e31a <EIC_Handler+0x2a>
    e308:	7823      	ldrb	r3, [r4, #0]
    e30a:	3301      	adds	r3, #1
    e30c:	b2db      	uxtb	r3, r3
    e30e:	7023      	strb	r3, [r4, #0]
    e310:	2b0f      	cmp	r3, #15
    e312:	d810      	bhi.n	e336 <EIC_Handler+0x46>
    e314:	2100      	movs	r1, #0
    e316:	2b1f      	cmp	r3, #31
    e318:	d9f4      	bls.n	e304 <EIC_Handler+0x14>
    e31a:	0028      	movs	r0, r5
    e31c:	4018      	ands	r0, r3
    e31e:	2201      	movs	r2, #1
    e320:	4082      	lsls	r2, r0
    e322:	6908      	ldr	r0, [r1, #16]
    e324:	4210      	tst	r0, r2
    e326:	d0ef      	beq.n	e308 <EIC_Handler+0x18>
    e328:	610a      	str	r2, [r1, #16]
    e32a:	009b      	lsls	r3, r3, #2
    e32c:	599b      	ldr	r3, [r3, r6]
    e32e:	2b00      	cmp	r3, #0
    e330:	d0ea      	beq.n	e308 <EIC_Handler+0x18>
    e332:	4798      	blx	r3
    e334:	e7e8      	b.n	e308 <EIC_Handler+0x18>
    e336:	bd70      	pop	{r4, r5, r6, pc}
    e338:	200010c0 	.word	0x200010c0
    e33c:	40001800 	.word	0x40001800
    e340:	200010c4 	.word	0x200010c4

0000e344 <_extint_enable>:
    e344:	4a04      	ldr	r2, [pc, #16]	; (e358 <_extint_enable+0x14>)
    e346:	7813      	ldrb	r3, [r2, #0]
    e348:	2102      	movs	r1, #2
    e34a:	430b      	orrs	r3, r1
    e34c:	7013      	strb	r3, [r2, #0]
    e34e:	7853      	ldrb	r3, [r2, #1]
    e350:	b25b      	sxtb	r3, r3
    e352:	2b00      	cmp	r3, #0
    e354:	dbfb      	blt.n	e34e <_extint_enable+0xa>
    e356:	4770      	bx	lr
    e358:	40001800 	.word	0x40001800

0000e35c <_system_extint_init>:
    e35c:	b500      	push	{lr}
    e35e:	b083      	sub	sp, #12
    e360:	4a12      	ldr	r2, [pc, #72]	; (e3ac <_system_extint_init+0x50>)
    e362:	6993      	ldr	r3, [r2, #24]
    e364:	2140      	movs	r1, #64	; 0x40
    e366:	430b      	orrs	r3, r1
    e368:	6193      	str	r3, [r2, #24]
    e36a:	a901      	add	r1, sp, #4
    e36c:	2300      	movs	r3, #0
    e36e:	700b      	strb	r3, [r1, #0]
    e370:	2005      	movs	r0, #5
    e372:	4b0f      	ldr	r3, [pc, #60]	; (e3b0 <_system_extint_init+0x54>)
    e374:	4798      	blx	r3
    e376:	2005      	movs	r0, #5
    e378:	4b0e      	ldr	r3, [pc, #56]	; (e3b4 <_system_extint_init+0x58>)
    e37a:	4798      	blx	r3
    e37c:	4a0e      	ldr	r2, [pc, #56]	; (e3b8 <_system_extint_init+0x5c>)
    e37e:	7813      	ldrb	r3, [r2, #0]
    e380:	2101      	movs	r1, #1
    e382:	430b      	orrs	r3, r1
    e384:	7013      	strb	r3, [r2, #0]
    e386:	7853      	ldrb	r3, [r2, #1]
    e388:	b25b      	sxtb	r3, r3
    e38a:	2b00      	cmp	r3, #0
    e38c:	dbfb      	blt.n	e386 <_system_extint_init+0x2a>
    e38e:	4b0b      	ldr	r3, [pc, #44]	; (e3bc <_system_extint_init+0x60>)
    e390:	0019      	movs	r1, r3
    e392:	3140      	adds	r1, #64	; 0x40
    e394:	2200      	movs	r2, #0
    e396:	c304      	stmia	r3!, {r2}
    e398:	4299      	cmp	r1, r3
    e39a:	d1fc      	bne.n	e396 <_system_extint_init+0x3a>
    e39c:	2210      	movs	r2, #16
    e39e:	4b08      	ldr	r3, [pc, #32]	; (e3c0 <_system_extint_init+0x64>)
    e3a0:	601a      	str	r2, [r3, #0]
    e3a2:	4b08      	ldr	r3, [pc, #32]	; (e3c4 <_system_extint_init+0x68>)
    e3a4:	4798      	blx	r3
    e3a6:	b003      	add	sp, #12
    e3a8:	bd00      	pop	{pc}
    e3aa:	46c0      	nop			; (mov r8, r8)
    e3ac:	40000400 	.word	0x40000400
    e3b0:	00010041 	.word	0x00010041
    e3b4:	0000ffb5 	.word	0x0000ffb5
    e3b8:	40001800 	.word	0x40001800
    e3bc:	200010c4 	.word	0x200010c4
    e3c0:	e000e100 	.word	0xe000e100
    e3c4:	0000e345 	.word	0x0000e345

0000e3c8 <extint_chan_get_config_defaults>:
    e3c8:	2300      	movs	r3, #0
    e3ca:	6003      	str	r3, [r0, #0]
    e3cc:	6043      	str	r3, [r0, #4]
    e3ce:	2201      	movs	r2, #1
    e3d0:	7202      	strb	r2, [r0, #8]
    e3d2:	7242      	strb	r2, [r0, #9]
    e3d4:	7283      	strb	r3, [r0, #10]
    e3d6:	3302      	adds	r3, #2
    e3d8:	72c3      	strb	r3, [r0, #11]
    e3da:	4770      	bx	lr

0000e3dc <extint_chan_set_config>:
    e3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3de:	b083      	sub	sp, #12
    e3e0:	0005      	movs	r5, r0
    e3e2:	000c      	movs	r4, r1
    e3e4:	a901      	add	r1, sp, #4
    e3e6:	2300      	movs	r3, #0
    e3e8:	704b      	strb	r3, [r1, #1]
    e3ea:	70cb      	strb	r3, [r1, #3]
    e3ec:	7923      	ldrb	r3, [r4, #4]
    e3ee:	700b      	strb	r3, [r1, #0]
    e3f0:	7a23      	ldrb	r3, [r4, #8]
    e3f2:	708b      	strb	r3, [r1, #2]
    e3f4:	7820      	ldrb	r0, [r4, #0]
    e3f6:	4b15      	ldr	r3, [pc, #84]	; (e44c <extint_chan_set_config+0x70>)
    e3f8:	4798      	blx	r3
    e3fa:	2000      	movs	r0, #0
    e3fc:	2d1f      	cmp	r5, #31
    e3fe:	d800      	bhi.n	e402 <extint_chan_set_config+0x26>
    e400:	4813      	ldr	r0, [pc, #76]	; (e450 <extint_chan_set_config+0x74>)
    e402:	2207      	movs	r2, #7
    e404:	402a      	ands	r2, r5
    e406:	0092      	lsls	r2, r2, #2
    e408:	7ae7      	ldrb	r7, [r4, #11]
    e40a:	7aa3      	ldrb	r3, [r4, #10]
    e40c:	2b00      	cmp	r3, #0
    e40e:	d001      	beq.n	e414 <extint_chan_set_config+0x38>
    e410:	2308      	movs	r3, #8
    e412:	431f      	orrs	r7, r3
    e414:	08eb      	lsrs	r3, r5, #3
    e416:	009b      	lsls	r3, r3, #2
    e418:	18c3      	adds	r3, r0, r3
    e41a:	6999      	ldr	r1, [r3, #24]
    e41c:	260f      	movs	r6, #15
    e41e:	4096      	lsls	r6, r2
    e420:	43b1      	bics	r1, r6
    e422:	4097      	lsls	r7, r2
    e424:	003a      	movs	r2, r7
    e426:	430a      	orrs	r2, r1
    e428:	619a      	str	r2, [r3, #24]
    e42a:	7a63      	ldrb	r3, [r4, #9]
    e42c:	2b00      	cmp	r3, #0
    e42e:	d106      	bne.n	e43e <extint_chan_set_config+0x62>
    e430:	6943      	ldr	r3, [r0, #20]
    e432:	2201      	movs	r2, #1
    e434:	40aa      	lsls	r2, r5
    e436:	4393      	bics	r3, r2
    e438:	6143      	str	r3, [r0, #20]
    e43a:	b003      	add	sp, #12
    e43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e43e:	6942      	ldr	r2, [r0, #20]
    e440:	2301      	movs	r3, #1
    e442:	40ab      	lsls	r3, r5
    e444:	4313      	orrs	r3, r2
    e446:	6143      	str	r3, [r0, #20]
    e448:	e7f7      	b.n	e43a <extint_chan_set_config+0x5e>
    e44a:	46c0      	nop			; (mov r8, r8)
    e44c:	00010139 	.word	0x00010139
    e450:	40001800 	.word	0x40001800

0000e454 <nvm_set_config>:
    e454:	b510      	push	{r4, lr}
    e456:	4a1e      	ldr	r2, [pc, #120]	; (e4d0 <nvm_set_config+0x7c>)
    e458:	69d3      	ldr	r3, [r2, #28]
    e45a:	2104      	movs	r1, #4
    e45c:	430b      	orrs	r3, r1
    e45e:	61d3      	str	r3, [r2, #28]
    e460:	4b1c      	ldr	r3, [pc, #112]	; (e4d4 <nvm_set_config+0x80>)
    e462:	2220      	movs	r2, #32
    e464:	32ff      	adds	r2, #255	; 0xff
    e466:	831a      	strh	r2, [r3, #24]
    e468:	7d1a      	ldrb	r2, [r3, #20]
    e46a:	2305      	movs	r3, #5
    e46c:	07d2      	lsls	r2, r2, #31
    e46e:	d401      	bmi.n	e474 <nvm_set_config+0x20>
    e470:	0018      	movs	r0, r3
    e472:	bd10      	pop	{r4, pc}
    e474:	7803      	ldrb	r3, [r0, #0]
    e476:	021b      	lsls	r3, r3, #8
    e478:	22c0      	movs	r2, #192	; 0xc0
    e47a:	0092      	lsls	r2, r2, #2
    e47c:	4013      	ands	r3, r2
    e47e:	7841      	ldrb	r1, [r0, #1]
    e480:	01c9      	lsls	r1, r1, #7
    e482:	22ff      	movs	r2, #255	; 0xff
    e484:	400a      	ands	r2, r1
    e486:	4313      	orrs	r3, r2
    e488:	7881      	ldrb	r1, [r0, #2]
    e48a:	0049      	lsls	r1, r1, #1
    e48c:	221e      	movs	r2, #30
    e48e:	400a      	ands	r2, r1
    e490:	4313      	orrs	r3, r2
    e492:	78c2      	ldrb	r2, [r0, #3]
    e494:	0492      	lsls	r2, r2, #18
    e496:	2180      	movs	r1, #128	; 0x80
    e498:	02c9      	lsls	r1, r1, #11
    e49a:	400a      	ands	r2, r1
    e49c:	4313      	orrs	r3, r2
    e49e:	7902      	ldrb	r2, [r0, #4]
    e4a0:	0412      	lsls	r2, r2, #16
    e4a2:	21c0      	movs	r1, #192	; 0xc0
    e4a4:	0289      	lsls	r1, r1, #10
    e4a6:	400a      	ands	r2, r1
    e4a8:	4313      	orrs	r3, r2
    e4aa:	4a0a      	ldr	r2, [pc, #40]	; (e4d4 <nvm_set_config+0x80>)
    e4ac:	6053      	str	r3, [r2, #4]
    e4ae:	6893      	ldr	r3, [r2, #8]
    e4b0:	035b      	lsls	r3, r3, #13
    e4b2:	0f5b      	lsrs	r3, r3, #29
    e4b4:	4908      	ldr	r1, [pc, #32]	; (e4d8 <nvm_set_config+0x84>)
    e4b6:	2408      	movs	r4, #8
    e4b8:	409c      	lsls	r4, r3
    e4ba:	800c      	strh	r4, [r1, #0]
    e4bc:	6893      	ldr	r3, [r2, #8]
    e4be:	804b      	strh	r3, [r1, #2]
    e4c0:	7843      	ldrb	r3, [r0, #1]
    e4c2:	710b      	strb	r3, [r1, #4]
    e4c4:	8b13      	ldrh	r3, [r2, #24]
    e4c6:	05db      	lsls	r3, r3, #23
    e4c8:	0fdb      	lsrs	r3, r3, #31
    e4ca:	011b      	lsls	r3, r3, #4
    e4cc:	e7d0      	b.n	e470 <nvm_set_config+0x1c>
    e4ce:	46c0      	nop			; (mov r8, r8)
    e4d0:	40000400 	.word	0x40000400
    e4d4:	41004000 	.word	0x41004000
    e4d8:	2000040c 	.word	0x2000040c

0000e4dc <nvm_execute_command>:
    e4dc:	b530      	push	{r4, r5, lr}
    e4de:	0004      	movs	r4, r0
    e4e0:	4a22      	ldr	r2, [pc, #136]	; (e56c <nvm_execute_command+0x90>)
    e4e2:	8810      	ldrh	r0, [r2, #0]
    e4e4:	8853      	ldrh	r3, [r2, #2]
    e4e6:	4343      	muls	r3, r0
    e4e8:	428b      	cmp	r3, r1
    e4ea:	d206      	bcs.n	e4fa <nvm_execute_command+0x1e>
    e4ec:	2280      	movs	r2, #128	; 0x80
    e4ee:	0192      	lsls	r2, r2, #6
    e4f0:	2018      	movs	r0, #24
    e4f2:	4b1f      	ldr	r3, [pc, #124]	; (e570 <nvm_execute_command+0x94>)
    e4f4:	18cb      	adds	r3, r1, r3
    e4f6:	4293      	cmp	r3, r2
    e4f8:	d80e      	bhi.n	e518 <nvm_execute_command+0x3c>
    e4fa:	4b1e      	ldr	r3, [pc, #120]	; (e574 <nvm_execute_command+0x98>)
    e4fc:	685d      	ldr	r5, [r3, #4]
    e4fe:	2280      	movs	r2, #128	; 0x80
    e500:	02d2      	lsls	r2, r2, #11
    e502:	432a      	orrs	r2, r5
    e504:	605a      	str	r2, [r3, #4]
    e506:	2220      	movs	r2, #32
    e508:	32ff      	adds	r2, #255	; 0xff
    e50a:	831a      	strh	r2, [r3, #24]
    e50c:	7d1b      	ldrb	r3, [r3, #20]
    e50e:	07db      	lsls	r3, r3, #31
    e510:	d403      	bmi.n	e51a <nvm_execute_command+0x3e>
    e512:	4b18      	ldr	r3, [pc, #96]	; (e574 <nvm_execute_command+0x98>)
    e514:	605d      	str	r5, [r3, #4]
    e516:	2005      	movs	r0, #5
    e518:	bd30      	pop	{r4, r5, pc}
    e51a:	2c45      	cmp	r4, #69	; 0x45
    e51c:	d822      	bhi.n	e564 <nvm_execute_command+0x88>
    e51e:	00a3      	lsls	r3, r4, #2
    e520:	4a15      	ldr	r2, [pc, #84]	; (e578 <nvm_execute_command+0x9c>)
    e522:	58d3      	ldr	r3, [r2, r3]
    e524:	469f      	mov	pc, r3
    e526:	4b13      	ldr	r3, [pc, #76]	; (e574 <nvm_execute_command+0x98>)
    e528:	8b1b      	ldrh	r3, [r3, #24]
    e52a:	05db      	lsls	r3, r3, #23
    e52c:	d503      	bpl.n	e536 <nvm_execute_command+0x5a>
    e52e:	4b11      	ldr	r3, [pc, #68]	; (e574 <nvm_execute_command+0x98>)
    e530:	605d      	str	r5, [r3, #4]
    e532:	2010      	movs	r0, #16
    e534:	e7f0      	b.n	e518 <nvm_execute_command+0x3c>
    e536:	0889      	lsrs	r1, r1, #2
    e538:	0049      	lsls	r1, r1, #1
    e53a:	4b0e      	ldr	r3, [pc, #56]	; (e574 <nvm_execute_command+0x98>)
    e53c:	61d9      	str	r1, [r3, #28]
    e53e:	e003      	b.n	e548 <nvm_execute_command+0x6c>
    e540:	0889      	lsrs	r1, r1, #2
    e542:	0049      	lsls	r1, r1, #1
    e544:	4b0b      	ldr	r3, [pc, #44]	; (e574 <nvm_execute_command+0x98>)
    e546:	61d9      	str	r1, [r3, #28]
    e548:	20a5      	movs	r0, #165	; 0xa5
    e54a:	0200      	lsls	r0, r0, #8
    e54c:	4304      	orrs	r4, r0
    e54e:	4b09      	ldr	r3, [pc, #36]	; (e574 <nvm_execute_command+0x98>)
    e550:	801c      	strh	r4, [r3, #0]
    e552:	0019      	movs	r1, r3
    e554:	2201      	movs	r2, #1
    e556:	7d0b      	ldrb	r3, [r1, #20]
    e558:	4213      	tst	r3, r2
    e55a:	d0fc      	beq.n	e556 <nvm_execute_command+0x7a>
    e55c:	4b05      	ldr	r3, [pc, #20]	; (e574 <nvm_execute_command+0x98>)
    e55e:	605d      	str	r5, [r3, #4]
    e560:	2000      	movs	r0, #0
    e562:	e7d9      	b.n	e518 <nvm_execute_command+0x3c>
    e564:	4b03      	ldr	r3, [pc, #12]	; (e574 <nvm_execute_command+0x98>)
    e566:	605d      	str	r5, [r3, #4]
    e568:	2017      	movs	r0, #23
    e56a:	e7d5      	b.n	e518 <nvm_execute_command+0x3c>
    e56c:	2000040c 	.word	0x2000040c
    e570:	ff7fc000 	.word	0xff7fc000
    e574:	41004000 	.word	0x41004000
    e578:	00019ce8 	.word	0x00019ce8

0000e57c <nvm_write_buffer>:
    e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e57e:	4b25      	ldr	r3, [pc, #148]	; (e614 <nvm_write_buffer+0x98>)
    e580:	881d      	ldrh	r5, [r3, #0]
    e582:	885b      	ldrh	r3, [r3, #2]
    e584:	436b      	muls	r3, r5
    e586:	2418      	movs	r4, #24
    e588:	4283      	cmp	r3, r0
    e58a:	d201      	bcs.n	e590 <nvm_write_buffer+0x14>
    e58c:	0020      	movs	r0, r4
    e58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e590:	1e6b      	subs	r3, r5, #1
    e592:	4218      	tst	r0, r3
    e594:	d1fa      	bne.n	e58c <nvm_write_buffer+0x10>
    e596:	3c01      	subs	r4, #1
    e598:	4295      	cmp	r5, r2
    e59a:	d3f7      	bcc.n	e58c <nvm_write_buffer+0x10>
    e59c:	4b1e      	ldr	r3, [pc, #120]	; (e618 <nvm_write_buffer+0x9c>)
    e59e:	7d1b      	ldrb	r3, [r3, #20]
    e5a0:	3c12      	subs	r4, #18
    e5a2:	07db      	lsls	r3, r3, #31
    e5a4:	d5f2      	bpl.n	e58c <nvm_write_buffer+0x10>
    e5a6:	4c1d      	ldr	r4, [pc, #116]	; (e61c <nvm_write_buffer+0xa0>)
    e5a8:	4b1b      	ldr	r3, [pc, #108]	; (e618 <nvm_write_buffer+0x9c>)
    e5aa:	801c      	strh	r4, [r3, #0]
    e5ac:	001d      	movs	r5, r3
    e5ae:	2401      	movs	r4, #1
    e5b0:	7d2b      	ldrb	r3, [r5, #20]
    e5b2:	4223      	tst	r3, r4
    e5b4:	d0fc      	beq.n	e5b0 <nvm_write_buffer+0x34>
    e5b6:	2420      	movs	r4, #32
    e5b8:	34ff      	adds	r4, #255	; 0xff
    e5ba:	4b17      	ldr	r3, [pc, #92]	; (e618 <nvm_write_buffer+0x9c>)
    e5bc:	831c      	strh	r4, [r3, #24]
    e5be:	2a00      	cmp	r2, #0
    e5c0:	d022      	beq.n	e608 <nvm_write_buffer+0x8c>
    e5c2:	2301      	movs	r3, #1
    e5c4:	0005      	movs	r5, r0
    e5c6:	439d      	bics	r5, r3
    e5c8:	2300      	movs	r3, #0
    e5ca:	1e57      	subs	r7, r2, #1
    e5cc:	e009      	b.n	e5e2 <nvm_write_buffer+0x66>
    e5ce:	18ce      	adds	r6, r1, r3
    e5d0:	7876      	ldrb	r6, [r6, #1]
    e5d2:	0236      	lsls	r6, r6, #8
    e5d4:	4334      	orrs	r4, r6
    e5d6:	802c      	strh	r4, [r5, #0]
    e5d8:	3302      	adds	r3, #2
    e5da:	b29b      	uxth	r3, r3
    e5dc:	3502      	adds	r5, #2
    e5de:	429a      	cmp	r2, r3
    e5e0:	d904      	bls.n	e5ec <nvm_write_buffer+0x70>
    e5e2:	5ccc      	ldrb	r4, [r1, r3]
    e5e4:	42bb      	cmp	r3, r7
    e5e6:	dbf2      	blt.n	e5ce <nvm_write_buffer+0x52>
    e5e8:	b2a4      	uxth	r4, r4
    e5ea:	e7f4      	b.n	e5d6 <nvm_write_buffer+0x5a>
    e5ec:	4b09      	ldr	r3, [pc, #36]	; (e614 <nvm_write_buffer+0x98>)
    e5ee:	791b      	ldrb	r3, [r3, #4]
    e5f0:	2400      	movs	r4, #0
    e5f2:	2b00      	cmp	r3, #0
    e5f4:	d1ca      	bne.n	e58c <nvm_write_buffer+0x10>
    e5f6:	2a3f      	cmp	r2, #63	; 0x3f
    e5f8:	d8c8      	bhi.n	e58c <nvm_write_buffer+0x10>
    e5fa:	2200      	movs	r2, #0
    e5fc:	0001      	movs	r1, r0
    e5fe:	2004      	movs	r0, #4
    e600:	4b07      	ldr	r3, [pc, #28]	; (e620 <nvm_write_buffer+0xa4>)
    e602:	4798      	blx	r3
    e604:	0004      	movs	r4, r0
    e606:	e7c1      	b.n	e58c <nvm_write_buffer+0x10>
    e608:	4b02      	ldr	r3, [pc, #8]	; (e614 <nvm_write_buffer+0x98>)
    e60a:	791b      	ldrb	r3, [r3, #4]
    e60c:	2400      	movs	r4, #0
    e60e:	2b00      	cmp	r3, #0
    e610:	d0f3      	beq.n	e5fa <nvm_write_buffer+0x7e>
    e612:	e7bb      	b.n	e58c <nvm_write_buffer+0x10>
    e614:	2000040c 	.word	0x2000040c
    e618:	41004000 	.word	0x41004000
    e61c:	ffffa544 	.word	0xffffa544
    e620:	0000e4dd 	.word	0x0000e4dd

0000e624 <nvm_read_buffer>:
    e624:	b570      	push	{r4, r5, r6, lr}
    e626:	4b18      	ldr	r3, [pc, #96]	; (e688 <nvm_read_buffer+0x64>)
    e628:	881d      	ldrh	r5, [r3, #0]
    e62a:	885b      	ldrh	r3, [r3, #2]
    e62c:	436b      	muls	r3, r5
    e62e:	2418      	movs	r4, #24
    e630:	4283      	cmp	r3, r0
    e632:	d201      	bcs.n	e638 <nvm_read_buffer+0x14>
    e634:	0020      	movs	r0, r4
    e636:	bd70      	pop	{r4, r5, r6, pc}
    e638:	1e6b      	subs	r3, r5, #1
    e63a:	4218      	tst	r0, r3
    e63c:	d1fa      	bne.n	e634 <nvm_read_buffer+0x10>
    e63e:	3c01      	subs	r4, #1
    e640:	4295      	cmp	r5, r2
    e642:	d3f7      	bcc.n	e634 <nvm_read_buffer+0x10>
    e644:	4b11      	ldr	r3, [pc, #68]	; (e68c <nvm_read_buffer+0x68>)
    e646:	7d1b      	ldrb	r3, [r3, #20]
    e648:	3c12      	subs	r4, #18
    e64a:	07db      	lsls	r3, r3, #31
    e64c:	d5f2      	bpl.n	e634 <nvm_read_buffer+0x10>
    e64e:	2420      	movs	r4, #32
    e650:	34ff      	adds	r4, #255	; 0xff
    e652:	4b0e      	ldr	r3, [pc, #56]	; (e68c <nvm_read_buffer+0x68>)
    e654:	831c      	strh	r4, [r3, #24]
    e656:	2a00      	cmp	r2, #0
    e658:	d014      	beq.n	e684 <nvm_read_buffer+0x60>
    e65a:	2301      	movs	r3, #1
    e65c:	4398      	bics	r0, r3
    e65e:	2300      	movs	r3, #0
    e660:	1e56      	subs	r6, r2, #1
    e662:	e004      	b.n	e66e <nvm_read_buffer+0x4a>
    e664:	3302      	adds	r3, #2
    e666:	b29b      	uxth	r3, r3
    e668:	3002      	adds	r0, #2
    e66a:	429a      	cmp	r2, r3
    e66c:	d908      	bls.n	e680 <nvm_read_buffer+0x5c>
    e66e:	8804      	ldrh	r4, [r0, #0]
    e670:	b2a4      	uxth	r4, r4
    e672:	54cc      	strb	r4, [r1, r3]
    e674:	42b3      	cmp	r3, r6
    e676:	daf5      	bge.n	e664 <nvm_read_buffer+0x40>
    e678:	18cd      	adds	r5, r1, r3
    e67a:	0a24      	lsrs	r4, r4, #8
    e67c:	706c      	strb	r4, [r5, #1]
    e67e:	e7f1      	b.n	e664 <nvm_read_buffer+0x40>
    e680:	2400      	movs	r4, #0
    e682:	e7d7      	b.n	e634 <nvm_read_buffer+0x10>
    e684:	2400      	movs	r4, #0
    e686:	e7d5      	b.n	e634 <nvm_read_buffer+0x10>
    e688:	2000040c 	.word	0x2000040c
    e68c:	41004000 	.word	0x41004000

0000e690 <nvm_erase_row>:
    e690:	4b13      	ldr	r3, [pc, #76]	; (e6e0 <nvm_erase_row+0x50>)
    e692:	881a      	ldrh	r2, [r3, #0]
    e694:	885b      	ldrh	r3, [r3, #2]
    e696:	4353      	muls	r3, r2
    e698:	2118      	movs	r1, #24
    e69a:	4283      	cmp	r3, r0
    e69c:	d201      	bcs.n	e6a2 <nvm_erase_row+0x12>
    e69e:	0008      	movs	r0, r1
    e6a0:	4770      	bx	lr
    e6a2:	0092      	lsls	r2, r2, #2
    e6a4:	3a01      	subs	r2, #1
    e6a6:	4210      	tst	r0, r2
    e6a8:	d1f9      	bne.n	e69e <nvm_erase_row+0xe>
    e6aa:	4b0e      	ldr	r3, [pc, #56]	; (e6e4 <nvm_erase_row+0x54>)
    e6ac:	7d1b      	ldrb	r3, [r3, #20]
    e6ae:	3913      	subs	r1, #19
    e6b0:	07db      	lsls	r3, r3, #31
    e6b2:	d5f4      	bpl.n	e69e <nvm_erase_row+0xe>
    e6b4:	4b0b      	ldr	r3, [pc, #44]	; (e6e4 <nvm_erase_row+0x54>)
    e6b6:	2220      	movs	r2, #32
    e6b8:	32ff      	adds	r2, #255	; 0xff
    e6ba:	831a      	strh	r2, [r3, #24]
    e6bc:	0880      	lsrs	r0, r0, #2
    e6be:	0040      	lsls	r0, r0, #1
    e6c0:	61d8      	str	r0, [r3, #28]
    e6c2:	4a09      	ldr	r2, [pc, #36]	; (e6e8 <nvm_erase_row+0x58>)
    e6c4:	801a      	strh	r2, [r3, #0]
    e6c6:	0019      	movs	r1, r3
    e6c8:	2201      	movs	r2, #1
    e6ca:	7d0b      	ldrb	r3, [r1, #20]
    e6cc:	4213      	tst	r3, r2
    e6ce:	d0fc      	beq.n	e6ca <nvm_erase_row+0x3a>
    e6d0:	4b04      	ldr	r3, [pc, #16]	; (e6e4 <nvm_erase_row+0x54>)
    e6d2:	8b19      	ldrh	r1, [r3, #24]
    e6d4:	201c      	movs	r0, #28
    e6d6:	4001      	ands	r1, r0
    e6d8:	1e48      	subs	r0, r1, #1
    e6da:	4181      	sbcs	r1, r0
    e6dc:	0089      	lsls	r1, r1, #2
    e6de:	e7de      	b.n	e69e <nvm_erase_row+0xe>
    e6e0:	2000040c 	.word	0x2000040c
    e6e4:	41004000 	.word	0x41004000
    e6e8:	ffffa502 	.word	0xffffa502

0000e6ec <port_pin_set_config>:
    e6ec:	b500      	push	{lr}
    e6ee:	b083      	sub	sp, #12
    e6f0:	ab01      	add	r3, sp, #4
    e6f2:	2280      	movs	r2, #128	; 0x80
    e6f4:	701a      	strb	r2, [r3, #0]
    e6f6:	780a      	ldrb	r2, [r1, #0]
    e6f8:	705a      	strb	r2, [r3, #1]
    e6fa:	784a      	ldrb	r2, [r1, #1]
    e6fc:	709a      	strb	r2, [r3, #2]
    e6fe:	788a      	ldrb	r2, [r1, #2]
    e700:	70da      	strb	r2, [r3, #3]
    e702:	0019      	movs	r1, r3
    e704:	4b01      	ldr	r3, [pc, #4]	; (e70c <port_pin_set_config+0x20>)
    e706:	4798      	blx	r3
    e708:	b003      	add	sp, #12
    e70a:	bd00      	pop	{pc}
    e70c:	00010139 	.word	0x00010139

0000e710 <rtc_calendar_enable>:
    e710:	6801      	ldr	r1, [r0, #0]
    e712:	2208      	movs	r2, #8
    e714:	4b05      	ldr	r3, [pc, #20]	; (e72c <rtc_calendar_enable+0x1c>)
    e716:	601a      	str	r2, [r3, #0]
    e718:	6802      	ldr	r2, [r0, #0]
    e71a:	7a93      	ldrb	r3, [r2, #10]
    e71c:	b25b      	sxtb	r3, r3
    e71e:	2b00      	cmp	r3, #0
    e720:	dbfb      	blt.n	e71a <rtc_calendar_enable+0xa>
    e722:	880b      	ldrh	r3, [r1, #0]
    e724:	2202      	movs	r2, #2
    e726:	4313      	orrs	r3, r2
    e728:	800b      	strh	r3, [r1, #0]
    e72a:	4770      	bx	lr
    e72c:	e000e100 	.word	0xe000e100

0000e730 <rtc_calendar_disable>:
    e730:	b510      	push	{r4, lr}
    e732:	6802      	ldr	r2, [r0, #0]
    e734:	2408      	movs	r4, #8
    e736:	2380      	movs	r3, #128	; 0x80
    e738:	4907      	ldr	r1, [pc, #28]	; (e758 <rtc_calendar_disable+0x28>)
    e73a:	50cc      	str	r4, [r1, r3]
    e73c:	6801      	ldr	r1, [r0, #0]
    e73e:	7a8b      	ldrb	r3, [r1, #10]
    e740:	b25b      	sxtb	r3, r3
    e742:	2b00      	cmp	r3, #0
    e744:	dbfb      	blt.n	e73e <rtc_calendar_disable+0xe>
    e746:	23c1      	movs	r3, #193	; 0xc1
    e748:	7193      	strb	r3, [r2, #6]
    e74a:	7213      	strb	r3, [r2, #8]
    e74c:	8813      	ldrh	r3, [r2, #0]
    e74e:	2102      	movs	r1, #2
    e750:	438b      	bics	r3, r1
    e752:	8013      	strh	r3, [r2, #0]
    e754:	bd10      	pop	{r4, pc}
    e756:	46c0      	nop			; (mov r8, r8)
    e758:	e000e100 	.word	0xe000e100

0000e75c <rtc_calendar_reset>:
    e75c:	b570      	push	{r4, r5, r6, lr}
    e75e:	0004      	movs	r4, r0
    e760:	6805      	ldr	r5, [r0, #0]
    e762:	4b07      	ldr	r3, [pc, #28]	; (e780 <rtc_calendar_reset+0x24>)
    e764:	4798      	blx	r3
    e766:	2300      	movs	r3, #0
    e768:	8223      	strh	r3, [r4, #16]
    e76a:	8263      	strh	r3, [r4, #18]
    e76c:	6822      	ldr	r2, [r4, #0]
    e76e:	7a93      	ldrb	r3, [r2, #10]
    e770:	b25b      	sxtb	r3, r3
    e772:	2b00      	cmp	r3, #0
    e774:	dbfb      	blt.n	e76e <rtc_calendar_reset+0x12>
    e776:	882b      	ldrh	r3, [r5, #0]
    e778:	2201      	movs	r2, #1
    e77a:	4313      	orrs	r3, r2
    e77c:	802b      	strh	r3, [r5, #0]
    e77e:	bd70      	pop	{r4, r5, r6, pc}
    e780:	0000e731 	.word	0x0000e731

0000e784 <rtc_calendar_time_to_register_value>:
    e784:	b510      	push	{r4, lr}
    e786:	88cb      	ldrh	r3, [r1, #6]
    e788:	88c2      	ldrh	r2, [r0, #6]
    e78a:	1a9a      	subs	r2, r3, r2
    e78c:	0692      	lsls	r2, r2, #26
    e78e:	794b      	ldrb	r3, [r1, #5]
    e790:	059b      	lsls	r3, r3, #22
    e792:	790c      	ldrb	r4, [r1, #4]
    e794:	0464      	lsls	r4, r4, #17
    e796:	4323      	orrs	r3, r4
    e798:	788c      	ldrb	r4, [r1, #2]
    e79a:	0324      	lsls	r4, r4, #12
    e79c:	4323      	orrs	r3, r4
    e79e:	4313      	orrs	r3, r2
    e7a0:	7902      	ldrb	r2, [r0, #4]
    e7a2:	2a00      	cmp	r2, #0
    e7a4:	d105      	bne.n	e7b2 <rtc_calendar_time_to_register_value+0x2e>
    e7a6:	78ca      	ldrb	r2, [r1, #3]
    e7a8:	2a00      	cmp	r2, #0
    e7aa:	d002      	beq.n	e7b2 <rtc_calendar_time_to_register_value+0x2e>
    e7ac:	2280      	movs	r2, #128	; 0x80
    e7ae:	0252      	lsls	r2, r2, #9
    e7b0:	4313      	orrs	r3, r2
    e7b2:	7848      	ldrb	r0, [r1, #1]
    e7b4:	0180      	lsls	r0, r0, #6
    e7b6:	780a      	ldrb	r2, [r1, #0]
    e7b8:	4310      	orrs	r0, r2
    e7ba:	4318      	orrs	r0, r3
    e7bc:	bd10      	pop	{r4, pc}

0000e7be <rtc_calendar_register_value_to_time>:
    e7be:	b510      	push	{r4, lr}
    e7c0:	0e8b      	lsrs	r3, r1, #26
    e7c2:	88c4      	ldrh	r4, [r0, #6]
    e7c4:	191b      	adds	r3, r3, r4
    e7c6:	80d3      	strh	r3, [r2, #6]
    e7c8:	018b      	lsls	r3, r1, #6
    e7ca:	0f1b      	lsrs	r3, r3, #28
    e7cc:	7153      	strb	r3, [r2, #5]
    e7ce:	028b      	lsls	r3, r1, #10
    e7d0:	0edb      	lsrs	r3, r3, #27
    e7d2:	7113      	strb	r3, [r2, #4]
    e7d4:	7903      	ldrb	r3, [r0, #4]
    e7d6:	2b00      	cmp	r3, #0
    e7d8:	d10c      	bne.n	e7f4 <rtc_calendar_register_value_to_time+0x36>
    e7da:	040b      	lsls	r3, r1, #16
    e7dc:	0f1b      	lsrs	r3, r3, #28
    e7de:	7093      	strb	r3, [r2, #2]
    e7e0:	03cb      	lsls	r3, r1, #15
    e7e2:	0fdb      	lsrs	r3, r3, #31
    e7e4:	70d3      	strb	r3, [r2, #3]
    e7e6:	0988      	lsrs	r0, r1, #6
    e7e8:	233f      	movs	r3, #63	; 0x3f
    e7ea:	4018      	ands	r0, r3
    e7ec:	7050      	strb	r0, [r2, #1]
    e7ee:	4019      	ands	r1, r3
    e7f0:	7011      	strb	r1, [r2, #0]
    e7f2:	bd10      	pop	{r4, pc}
    e7f4:	03cb      	lsls	r3, r1, #15
    e7f6:	0edb      	lsrs	r3, r3, #27
    e7f8:	7093      	strb	r3, [r2, #2]
    e7fa:	e7f4      	b.n	e7e6 <rtc_calendar_register_value_to_time+0x28>

0000e7fc <rtc_calendar_get_time>:
    e7fc:	b510      	push	{r4, lr}
    e7fe:	000a      	movs	r2, r1
    e800:	6803      	ldr	r3, [r0, #0]
    e802:	7941      	ldrb	r1, [r0, #5]
    e804:	2900      	cmp	r1, #0
    e806:	d006      	beq.n	e816 <rtc_calendar_get_time+0x1a>
    e808:	8859      	ldrh	r1, [r3, #2]
    e80a:	0449      	lsls	r1, r1, #17
    e80c:	d50b      	bpl.n	e826 <rtc_calendar_get_time+0x2a>
    e80e:	6919      	ldr	r1, [r3, #16]
    e810:	4b0a      	ldr	r3, [pc, #40]	; (e83c <rtc_calendar_get_time+0x40>)
    e812:	4798      	blx	r3
    e814:	bd10      	pop	{r4, pc}
    e816:	490a      	ldr	r1, [pc, #40]	; (e840 <rtc_calendar_get_time+0x44>)
    e818:	8059      	strh	r1, [r3, #2]
    e81a:	6804      	ldr	r4, [r0, #0]
    e81c:	7aa1      	ldrb	r1, [r4, #10]
    e81e:	b249      	sxtb	r1, r1
    e820:	2900      	cmp	r1, #0
    e822:	dbfb      	blt.n	e81c <rtc_calendar_get_time+0x20>
    e824:	e7f3      	b.n	e80e <rtc_calendar_get_time+0x12>
    e826:	8859      	ldrh	r1, [r3, #2]
    e828:	24c0      	movs	r4, #192	; 0xc0
    e82a:	0224      	lsls	r4, r4, #8
    e82c:	4321      	orrs	r1, r4
    e82e:	8059      	strh	r1, [r3, #2]
    e830:	6804      	ldr	r4, [r0, #0]
    e832:	7aa1      	ldrb	r1, [r4, #10]
    e834:	b249      	sxtb	r1, r1
    e836:	2900      	cmp	r1, #0
    e838:	dbfb      	blt.n	e832 <rtc_calendar_get_time+0x36>
    e83a:	e7e8      	b.n	e80e <rtc_calendar_get_time+0x12>
    e83c:	0000e7bf 	.word	0x0000e7bf
    e840:	ffff8000 	.word	0xffff8000

0000e844 <rtc_calendar_set_alarm>:
    e844:	b570      	push	{r4, r5, r6, lr}
    e846:	000d      	movs	r5, r1
    e848:	0014      	movs	r4, r2
    e84a:	2317      	movs	r3, #23
    e84c:	2a01      	cmp	r2, #1
    e84e:	d901      	bls.n	e854 <rtc_calendar_set_alarm+0x10>
    e850:	0018      	movs	r0, r3
    e852:	bd70      	pop	{r4, r5, r6, pc}
    e854:	6806      	ldr	r6, [r0, #0]
    e856:	4b06      	ldr	r3, [pc, #24]	; (e870 <rtc_calendar_set_alarm+0x2c>)
    e858:	4798      	blx	r3
    e85a:	7ab3      	ldrb	r3, [r6, #10]
    e85c:	b25b      	sxtb	r3, r3
    e85e:	2b00      	cmp	r3, #0
    e860:	dbfb      	blt.n	e85a <rtc_calendar_set_alarm+0x16>
    e862:	00e4      	lsls	r4, r4, #3
    e864:	1934      	adds	r4, r6, r4
    e866:	61a0      	str	r0, [r4, #24]
    e868:	7a2b      	ldrb	r3, [r5, #8]
    e86a:	7723      	strb	r3, [r4, #28]
    e86c:	2300      	movs	r3, #0
    e86e:	e7ef      	b.n	e850 <rtc_calendar_set_alarm+0xc>
    e870:	0000e785 	.word	0x0000e785

0000e874 <rtc_calendar_init>:
    e874:	b530      	push	{r4, r5, lr}
    e876:	b083      	sub	sp, #12
    e878:	0005      	movs	r5, r0
    e87a:	0014      	movs	r4, r2
    e87c:	6001      	str	r1, [r0, #0]
    e87e:	4a1c      	ldr	r2, [pc, #112]	; (e8f0 <rtc_calendar_init+0x7c>)
    e880:	6993      	ldr	r3, [r2, #24]
    e882:	2120      	movs	r1, #32
    e884:	430b      	orrs	r3, r1
    e886:	6193      	str	r3, [r2, #24]
    e888:	a901      	add	r1, sp, #4
    e88a:	2302      	movs	r3, #2
    e88c:	700b      	strb	r3, [r1, #0]
    e88e:	2004      	movs	r0, #4
    e890:	4b18      	ldr	r3, [pc, #96]	; (e8f4 <rtc_calendar_init+0x80>)
    e892:	4798      	blx	r3
    e894:	2004      	movs	r0, #4
    e896:	4b18      	ldr	r3, [pc, #96]	; (e8f8 <rtc_calendar_init+0x84>)
    e898:	4798      	blx	r3
    e89a:	0028      	movs	r0, r5
    e89c:	4b17      	ldr	r3, [pc, #92]	; (e8fc <rtc_calendar_init+0x88>)
    e89e:	4798      	blx	r3
    e8a0:	7923      	ldrb	r3, [r4, #4]
    e8a2:	712b      	strb	r3, [r5, #4]
    e8a4:	78e3      	ldrb	r3, [r4, #3]
    e8a6:	716b      	strb	r3, [r5, #5]
    e8a8:	88e3      	ldrh	r3, [r4, #6]
    e8aa:	80eb      	strh	r3, [r5, #6]
    e8ac:	4b14      	ldr	r3, [pc, #80]	; (e900 <rtc_calendar_init+0x8c>)
    e8ae:	601d      	str	r5, [r3, #0]
    e8b0:	682a      	ldr	r2, [r5, #0]
    e8b2:	8823      	ldrh	r3, [r4, #0]
    e8b4:	7921      	ldrb	r1, [r4, #4]
    e8b6:	2900      	cmp	r1, #0
    e8b8:	d017      	beq.n	e8ea <rtc_calendar_init+0x76>
    e8ba:	2108      	movs	r1, #8
    e8bc:	430b      	orrs	r3, r1
    e8be:	78a1      	ldrb	r1, [r4, #2]
    e8c0:	2900      	cmp	r1, #0
    e8c2:	d001      	beq.n	e8c8 <rtc_calendar_init+0x54>
    e8c4:	2180      	movs	r1, #128	; 0x80
    e8c6:	430b      	orrs	r3, r1
    e8c8:	8013      	strh	r3, [r2, #0]
    e8ca:	78e3      	ldrb	r3, [r4, #3]
    e8cc:	2b00      	cmp	r3, #0
    e8ce:	d004      	beq.n	e8da <rtc_calendar_init+0x66>
    e8d0:	8853      	ldrh	r3, [r2, #2]
    e8d2:	2180      	movs	r1, #128	; 0x80
    e8d4:	01c9      	lsls	r1, r1, #7
    e8d6:	430b      	orrs	r3, r1
    e8d8:	8053      	strh	r3, [r2, #2]
    e8da:	0021      	movs	r1, r4
    e8dc:	3108      	adds	r1, #8
    e8de:	2200      	movs	r2, #0
    e8e0:	0028      	movs	r0, r5
    e8e2:	4b08      	ldr	r3, [pc, #32]	; (e904 <rtc_calendar_init+0x90>)
    e8e4:	4798      	blx	r3
    e8e6:	b003      	add	sp, #12
    e8e8:	bd30      	pop	{r4, r5, pc}
    e8ea:	2148      	movs	r1, #72	; 0x48
    e8ec:	430b      	orrs	r3, r1
    e8ee:	e7e6      	b.n	e8be <rtc_calendar_init+0x4a>
    e8f0:	40000400 	.word	0x40000400
    e8f4:	00010041 	.word	0x00010041
    e8f8:	0000ffb5 	.word	0x0000ffb5
    e8fc:	0000e75d 	.word	0x0000e75d
    e900:	20001104 	.word	0x20001104
    e904:	0000e845 	.word	0x0000e845

0000e908 <RTC_Handler>:
    e908:	b510      	push	{r4, lr}
    e90a:	4b0f      	ldr	r3, [pc, #60]	; (e948 <RTC_Handler+0x40>)
    e90c:	681a      	ldr	r2, [r3, #0]
    e90e:	6814      	ldr	r4, [r2, #0]
    e910:	8a51      	ldrh	r1, [r2, #18]
    e912:	8a13      	ldrh	r3, [r2, #16]
    e914:	4019      	ands	r1, r3
    e916:	7a20      	ldrb	r0, [r4, #8]
    e918:	79e3      	ldrb	r3, [r4, #7]
    e91a:	4003      	ands	r3, r0
    e91c:	b258      	sxtb	r0, r3
    e91e:	2800      	cmp	r0, #0
    e920:	db06      	blt.n	e930 <RTC_Handler+0x28>
    e922:	07db      	lsls	r3, r3, #31
    e924:	d503      	bpl.n	e92e <RTC_Handler+0x26>
    e926:	07cb      	lsls	r3, r1, #31
    e928:	d40a      	bmi.n	e940 <RTC_Handler+0x38>
    e92a:	2301      	movs	r3, #1
    e92c:	7223      	strb	r3, [r4, #8]
    e92e:	bd10      	pop	{r4, pc}
    e930:	078b      	lsls	r3, r1, #30
    e932:	d402      	bmi.n	e93a <RTC_Handler+0x32>
    e934:	2380      	movs	r3, #128	; 0x80
    e936:	7223      	strb	r3, [r4, #8]
    e938:	e7f9      	b.n	e92e <RTC_Handler+0x26>
    e93a:	68d3      	ldr	r3, [r2, #12]
    e93c:	4798      	blx	r3
    e93e:	e7f9      	b.n	e934 <RTC_Handler+0x2c>
    e940:	6893      	ldr	r3, [r2, #8]
    e942:	4798      	blx	r3
    e944:	e7f1      	b.n	e92a <RTC_Handler+0x22>
    e946:	46c0      	nop			; (mov r8, r8)
    e948:	20001104 	.word	0x20001104

0000e94c <long_division>:
    e94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e94e:	46de      	mov	lr, fp
    e950:	4657      	mov	r7, sl
    e952:	464e      	mov	r6, r9
    e954:	4645      	mov	r5, r8
    e956:	b5e0      	push	{r5, r6, r7, lr}
    e958:	b087      	sub	sp, #28
    e95a:	4680      	mov	r8, r0
    e95c:	9104      	str	r1, [sp, #16]
    e95e:	0016      	movs	r6, r2
    e960:	001f      	movs	r7, r3
    e962:	2200      	movs	r2, #0
    e964:	2300      	movs	r3, #0
    e966:	2100      	movs	r1, #0
    e968:	468b      	mov	fp, r1
    e96a:	243f      	movs	r4, #63	; 0x3f
    e96c:	2001      	movs	r0, #1
    e96e:	0021      	movs	r1, r4
    e970:	9600      	str	r6, [sp, #0]
    e972:	9701      	str	r7, [sp, #4]
    e974:	465c      	mov	r4, fp
    e976:	9403      	str	r4, [sp, #12]
    e978:	4644      	mov	r4, r8
    e97a:	9405      	str	r4, [sp, #20]
    e97c:	e013      	b.n	e9a6 <long_division+0x5a>
    e97e:	2420      	movs	r4, #32
    e980:	1a64      	subs	r4, r4, r1
    e982:	0005      	movs	r5, r0
    e984:	40e5      	lsrs	r5, r4
    e986:	46a8      	mov	r8, r5
    e988:	e014      	b.n	e9b4 <long_division+0x68>
    e98a:	9c00      	ldr	r4, [sp, #0]
    e98c:	9d01      	ldr	r5, [sp, #4]
    e98e:	1b12      	subs	r2, r2, r4
    e990:	41ab      	sbcs	r3, r5
    e992:	465c      	mov	r4, fp
    e994:	464d      	mov	r5, r9
    e996:	432c      	orrs	r4, r5
    e998:	46a3      	mov	fp, r4
    e99a:	9c03      	ldr	r4, [sp, #12]
    e99c:	4645      	mov	r5, r8
    e99e:	432c      	orrs	r4, r5
    e9a0:	9403      	str	r4, [sp, #12]
    e9a2:	3901      	subs	r1, #1
    e9a4:	d325      	bcc.n	e9f2 <long_division+0xa6>
    e9a6:	2420      	movs	r4, #32
    e9a8:	4264      	negs	r4, r4
    e9aa:	190c      	adds	r4, r1, r4
    e9ac:	d4e7      	bmi.n	e97e <long_division+0x32>
    e9ae:	0005      	movs	r5, r0
    e9b0:	40a5      	lsls	r5, r4
    e9b2:	46a8      	mov	r8, r5
    e9b4:	0004      	movs	r4, r0
    e9b6:	408c      	lsls	r4, r1
    e9b8:	46a1      	mov	r9, r4
    e9ba:	1892      	adds	r2, r2, r2
    e9bc:	415b      	adcs	r3, r3
    e9be:	0014      	movs	r4, r2
    e9c0:	001d      	movs	r5, r3
    e9c2:	9e05      	ldr	r6, [sp, #20]
    e9c4:	464f      	mov	r7, r9
    e9c6:	403e      	ands	r6, r7
    e9c8:	46b4      	mov	ip, r6
    e9ca:	9e04      	ldr	r6, [sp, #16]
    e9cc:	4647      	mov	r7, r8
    e9ce:	403e      	ands	r6, r7
    e9d0:	46b2      	mov	sl, r6
    e9d2:	4666      	mov	r6, ip
    e9d4:	4657      	mov	r7, sl
    e9d6:	433e      	orrs	r6, r7
    e9d8:	d003      	beq.n	e9e2 <long_division+0x96>
    e9da:	0006      	movs	r6, r0
    e9dc:	4326      	orrs	r6, r4
    e9de:	0032      	movs	r2, r6
    e9e0:	002b      	movs	r3, r5
    e9e2:	9c00      	ldr	r4, [sp, #0]
    e9e4:	9d01      	ldr	r5, [sp, #4]
    e9e6:	429d      	cmp	r5, r3
    e9e8:	d8db      	bhi.n	e9a2 <long_division+0x56>
    e9ea:	d1ce      	bne.n	e98a <long_division+0x3e>
    e9ec:	4294      	cmp	r4, r2
    e9ee:	d8d8      	bhi.n	e9a2 <long_division+0x56>
    e9f0:	e7cb      	b.n	e98a <long_division+0x3e>
    e9f2:	9b03      	ldr	r3, [sp, #12]
    e9f4:	4658      	mov	r0, fp
    e9f6:	0019      	movs	r1, r3
    e9f8:	b007      	add	sp, #28
    e9fa:	bc3c      	pop	{r2, r3, r4, r5}
    e9fc:	4690      	mov	r8, r2
    e9fe:	4699      	mov	r9, r3
    ea00:	46a2      	mov	sl, r4
    ea02:	46ab      	mov	fp, r5
    ea04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ea06 <_sercom_get_sync_baud_val>:
    ea06:	b510      	push	{r4, lr}
    ea08:	0849      	lsrs	r1, r1, #1
    ea0a:	2340      	movs	r3, #64	; 0x40
    ea0c:	2400      	movs	r4, #0
    ea0e:	4281      	cmp	r1, r0
    ea10:	d202      	bcs.n	ea18 <_sercom_get_sync_baud_val+0x12>
    ea12:	0018      	movs	r0, r3
    ea14:	bd10      	pop	{r4, pc}
    ea16:	001c      	movs	r4, r3
    ea18:	1a09      	subs	r1, r1, r0
    ea1a:	1c63      	adds	r3, r4, #1
    ea1c:	b29b      	uxth	r3, r3
    ea1e:	4288      	cmp	r0, r1
    ea20:	d9f9      	bls.n	ea16 <_sercom_get_sync_baud_val+0x10>
    ea22:	2340      	movs	r3, #64	; 0x40
    ea24:	2cff      	cmp	r4, #255	; 0xff
    ea26:	d8f4      	bhi.n	ea12 <_sercom_get_sync_baud_val+0xc>
    ea28:	8014      	strh	r4, [r2, #0]
    ea2a:	2300      	movs	r3, #0
    ea2c:	e7f1      	b.n	ea12 <_sercom_get_sync_baud_val+0xc>
	...

0000ea30 <_sercom_get_async_baud_val>:
    ea30:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea32:	b083      	sub	sp, #12
    ea34:	000f      	movs	r7, r1
    ea36:	0016      	movs	r6, r2
    ea38:	aa08      	add	r2, sp, #32
    ea3a:	7811      	ldrb	r1, [r2, #0]
    ea3c:	0004      	movs	r4, r0
    ea3e:	434c      	muls	r4, r1
    ea40:	2240      	movs	r2, #64	; 0x40
    ea42:	42bc      	cmp	r4, r7
    ea44:	d902      	bls.n	ea4c <_sercom_get_async_baud_val+0x1c>
    ea46:	0010      	movs	r0, r2
    ea48:	b003      	add	sp, #12
    ea4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea4c:	2b00      	cmp	r3, #0
    ea4e:	d114      	bne.n	ea7a <_sercom_get_async_baud_val+0x4a>
    ea50:	0002      	movs	r2, r0
    ea52:	0008      	movs	r0, r1
    ea54:	2100      	movs	r1, #0
    ea56:	4c19      	ldr	r4, [pc, #100]	; (eabc <_sercom_get_async_baud_val+0x8c>)
    ea58:	47a0      	blx	r4
    ea5a:	0001      	movs	r1, r0
    ea5c:	003a      	movs	r2, r7
    ea5e:	2300      	movs	r3, #0
    ea60:	2000      	movs	r0, #0
    ea62:	4c17      	ldr	r4, [pc, #92]	; (eac0 <_sercom_get_async_baud_val+0x90>)
    ea64:	47a0      	blx	r4
    ea66:	2200      	movs	r2, #0
    ea68:	2301      	movs	r3, #1
    ea6a:	1a12      	subs	r2, r2, r0
    ea6c:	418b      	sbcs	r3, r1
    ea6e:	0c12      	lsrs	r2, r2, #16
    ea70:	041b      	lsls	r3, r3, #16
    ea72:	431a      	orrs	r2, r3
    ea74:	8032      	strh	r2, [r6, #0]
    ea76:	2200      	movs	r2, #0
    ea78:	e7e5      	b.n	ea46 <_sercom_get_async_baud_val+0x16>
    ea7a:	2200      	movs	r2, #0
    ea7c:	2b01      	cmp	r3, #1
    ea7e:	d1f9      	bne.n	ea74 <_sercom_get_async_baud_val+0x44>
    ea80:	000a      	movs	r2, r1
    ea82:	2300      	movs	r3, #0
    ea84:	2100      	movs	r1, #0
    ea86:	4c0d      	ldr	r4, [pc, #52]	; (eabc <_sercom_get_async_baud_val+0x8c>)
    ea88:	47a0      	blx	r4
    ea8a:	0002      	movs	r2, r0
    ea8c:	000b      	movs	r3, r1
    ea8e:	9200      	str	r2, [sp, #0]
    ea90:	9301      	str	r3, [sp, #4]
    ea92:	0038      	movs	r0, r7
    ea94:	2100      	movs	r1, #0
    ea96:	4c0a      	ldr	r4, [pc, #40]	; (eac0 <_sercom_get_async_baud_val+0x90>)
    ea98:	47a0      	blx	r4
    ea9a:	0005      	movs	r5, r0
    ea9c:	2380      	movs	r3, #128	; 0x80
    ea9e:	019b      	lsls	r3, r3, #6
    eaa0:	2240      	movs	r2, #64	; 0x40
    eaa2:	4298      	cmp	r0, r3
    eaa4:	d8cf      	bhi.n	ea46 <_sercom_get_async_baud_val+0x16>
    eaa6:	0f79      	lsrs	r1, r7, #29
    eaa8:	00f8      	lsls	r0, r7, #3
    eaaa:	9a00      	ldr	r2, [sp, #0]
    eaac:	9b01      	ldr	r3, [sp, #4]
    eaae:	47a0      	blx	r4
    eab0:	00ea      	lsls	r2, r5, #3
    eab2:	1a82      	subs	r2, r0, r2
    eab4:	b2d2      	uxtb	r2, r2
    eab6:	0352      	lsls	r2, r2, #13
    eab8:	432a      	orrs	r2, r5
    eaba:	e7db      	b.n	ea74 <_sercom_get_async_baud_val+0x44>
    eabc:	0001697d 	.word	0x0001697d
    eac0:	0000e94d 	.word	0x0000e94d

0000eac4 <sercom_set_gclk_generator>:
    eac4:	b510      	push	{r4, lr}
    eac6:	b082      	sub	sp, #8
    eac8:	0004      	movs	r4, r0
    eaca:	4b0e      	ldr	r3, [pc, #56]	; (eb04 <sercom_set_gclk_generator+0x40>)
    eacc:	781b      	ldrb	r3, [r3, #0]
    eace:	2b00      	cmp	r3, #0
    ead0:	d007      	beq.n	eae2 <sercom_set_gclk_generator+0x1e>
    ead2:	2900      	cmp	r1, #0
    ead4:	d105      	bne.n	eae2 <sercom_set_gclk_generator+0x1e>
    ead6:	4b0b      	ldr	r3, [pc, #44]	; (eb04 <sercom_set_gclk_generator+0x40>)
    ead8:	785b      	ldrb	r3, [r3, #1]
    eada:	4283      	cmp	r3, r0
    eadc:	d010      	beq.n	eb00 <sercom_set_gclk_generator+0x3c>
    eade:	201d      	movs	r0, #29
    eae0:	e00c      	b.n	eafc <sercom_set_gclk_generator+0x38>
    eae2:	a901      	add	r1, sp, #4
    eae4:	700c      	strb	r4, [r1, #0]
    eae6:	2013      	movs	r0, #19
    eae8:	4b07      	ldr	r3, [pc, #28]	; (eb08 <sercom_set_gclk_generator+0x44>)
    eaea:	4798      	blx	r3
    eaec:	2013      	movs	r0, #19
    eaee:	4b07      	ldr	r3, [pc, #28]	; (eb0c <sercom_set_gclk_generator+0x48>)
    eaf0:	4798      	blx	r3
    eaf2:	4b04      	ldr	r3, [pc, #16]	; (eb04 <sercom_set_gclk_generator+0x40>)
    eaf4:	705c      	strb	r4, [r3, #1]
    eaf6:	2201      	movs	r2, #1
    eaf8:	701a      	strb	r2, [r3, #0]
    eafa:	2000      	movs	r0, #0
    eafc:	b002      	add	sp, #8
    eafe:	bd10      	pop	{r4, pc}
    eb00:	2000      	movs	r0, #0
    eb02:	e7fb      	b.n	eafc <sercom_set_gclk_generator+0x38>
    eb04:	20000414 	.word	0x20000414
    eb08:	00010041 	.word	0x00010041
    eb0c:	0000ffb5 	.word	0x0000ffb5

0000eb10 <_sercom_get_default_pad>:
    eb10:	4b40      	ldr	r3, [pc, #256]	; (ec14 <_sercom_get_default_pad+0x104>)
    eb12:	4298      	cmp	r0, r3
    eb14:	d031      	beq.n	eb7a <_sercom_get_default_pad+0x6a>
    eb16:	d90a      	bls.n	eb2e <_sercom_get_default_pad+0x1e>
    eb18:	4b3f      	ldr	r3, [pc, #252]	; (ec18 <_sercom_get_default_pad+0x108>)
    eb1a:	4298      	cmp	r0, r3
    eb1c:	d04d      	beq.n	ebba <_sercom_get_default_pad+0xaa>
    eb1e:	4b3f      	ldr	r3, [pc, #252]	; (ec1c <_sercom_get_default_pad+0x10c>)
    eb20:	4298      	cmp	r0, r3
    eb22:	d05a      	beq.n	ebda <_sercom_get_default_pad+0xca>
    eb24:	4b3e      	ldr	r3, [pc, #248]	; (ec20 <_sercom_get_default_pad+0x110>)
    eb26:	4298      	cmp	r0, r3
    eb28:	d037      	beq.n	eb9a <_sercom_get_default_pad+0x8a>
    eb2a:	2000      	movs	r0, #0
    eb2c:	4770      	bx	lr
    eb2e:	4b3d      	ldr	r3, [pc, #244]	; (ec24 <_sercom_get_default_pad+0x114>)
    eb30:	4298      	cmp	r0, r3
    eb32:	d00c      	beq.n	eb4e <_sercom_get_default_pad+0x3e>
    eb34:	4b3c      	ldr	r3, [pc, #240]	; (ec28 <_sercom_get_default_pad+0x118>)
    eb36:	4298      	cmp	r0, r3
    eb38:	d1f7      	bne.n	eb2a <_sercom_get_default_pad+0x1a>
    eb3a:	2901      	cmp	r1, #1
    eb3c:	d017      	beq.n	eb6e <_sercom_get_default_pad+0x5e>
    eb3e:	2900      	cmp	r1, #0
    eb40:	d05d      	beq.n	ebfe <_sercom_get_default_pad+0xee>
    eb42:	2902      	cmp	r1, #2
    eb44:	d015      	beq.n	eb72 <_sercom_get_default_pad+0x62>
    eb46:	2903      	cmp	r1, #3
    eb48:	d015      	beq.n	eb76 <_sercom_get_default_pad+0x66>
    eb4a:	2000      	movs	r0, #0
    eb4c:	e7ee      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb4e:	2901      	cmp	r1, #1
    eb50:	d007      	beq.n	eb62 <_sercom_get_default_pad+0x52>
    eb52:	2900      	cmp	r1, #0
    eb54:	d051      	beq.n	ebfa <_sercom_get_default_pad+0xea>
    eb56:	2902      	cmp	r1, #2
    eb58:	d005      	beq.n	eb66 <_sercom_get_default_pad+0x56>
    eb5a:	2903      	cmp	r1, #3
    eb5c:	d005      	beq.n	eb6a <_sercom_get_default_pad+0x5a>
    eb5e:	2000      	movs	r0, #0
    eb60:	e7e4      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb62:	4832      	ldr	r0, [pc, #200]	; (ec2c <_sercom_get_default_pad+0x11c>)
    eb64:	e7e2      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb66:	4832      	ldr	r0, [pc, #200]	; (ec30 <_sercom_get_default_pad+0x120>)
    eb68:	e7e0      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb6a:	4832      	ldr	r0, [pc, #200]	; (ec34 <_sercom_get_default_pad+0x124>)
    eb6c:	e7de      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb6e:	4832      	ldr	r0, [pc, #200]	; (ec38 <_sercom_get_default_pad+0x128>)
    eb70:	e7dc      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb72:	4832      	ldr	r0, [pc, #200]	; (ec3c <_sercom_get_default_pad+0x12c>)
    eb74:	e7da      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb76:	4832      	ldr	r0, [pc, #200]	; (ec40 <_sercom_get_default_pad+0x130>)
    eb78:	e7d8      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb7a:	2901      	cmp	r1, #1
    eb7c:	d007      	beq.n	eb8e <_sercom_get_default_pad+0x7e>
    eb7e:	2900      	cmp	r1, #0
    eb80:	d03f      	beq.n	ec02 <_sercom_get_default_pad+0xf2>
    eb82:	2902      	cmp	r1, #2
    eb84:	d005      	beq.n	eb92 <_sercom_get_default_pad+0x82>
    eb86:	2903      	cmp	r1, #3
    eb88:	d005      	beq.n	eb96 <_sercom_get_default_pad+0x86>
    eb8a:	2000      	movs	r0, #0
    eb8c:	e7ce      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb8e:	482d      	ldr	r0, [pc, #180]	; (ec44 <_sercom_get_default_pad+0x134>)
    eb90:	e7cc      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb92:	482d      	ldr	r0, [pc, #180]	; (ec48 <_sercom_get_default_pad+0x138>)
    eb94:	e7ca      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb96:	482d      	ldr	r0, [pc, #180]	; (ec4c <_sercom_get_default_pad+0x13c>)
    eb98:	e7c8      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    eb9a:	2901      	cmp	r1, #1
    eb9c:	d007      	beq.n	ebae <_sercom_get_default_pad+0x9e>
    eb9e:	2900      	cmp	r1, #0
    eba0:	d031      	beq.n	ec06 <_sercom_get_default_pad+0xf6>
    eba2:	2902      	cmp	r1, #2
    eba4:	d005      	beq.n	ebb2 <_sercom_get_default_pad+0xa2>
    eba6:	2903      	cmp	r1, #3
    eba8:	d005      	beq.n	ebb6 <_sercom_get_default_pad+0xa6>
    ebaa:	2000      	movs	r0, #0
    ebac:	e7be      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebae:	4828      	ldr	r0, [pc, #160]	; (ec50 <_sercom_get_default_pad+0x140>)
    ebb0:	e7bc      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebb2:	4828      	ldr	r0, [pc, #160]	; (ec54 <_sercom_get_default_pad+0x144>)
    ebb4:	e7ba      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebb6:	4828      	ldr	r0, [pc, #160]	; (ec58 <_sercom_get_default_pad+0x148>)
    ebb8:	e7b8      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebba:	2901      	cmp	r1, #1
    ebbc:	d007      	beq.n	ebce <_sercom_get_default_pad+0xbe>
    ebbe:	2900      	cmp	r1, #0
    ebc0:	d023      	beq.n	ec0a <_sercom_get_default_pad+0xfa>
    ebc2:	2902      	cmp	r1, #2
    ebc4:	d005      	beq.n	ebd2 <_sercom_get_default_pad+0xc2>
    ebc6:	2903      	cmp	r1, #3
    ebc8:	d005      	beq.n	ebd6 <_sercom_get_default_pad+0xc6>
    ebca:	2000      	movs	r0, #0
    ebcc:	e7ae      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebce:	4823      	ldr	r0, [pc, #140]	; (ec5c <_sercom_get_default_pad+0x14c>)
    ebd0:	e7ac      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebd2:	4823      	ldr	r0, [pc, #140]	; (ec60 <_sercom_get_default_pad+0x150>)
    ebd4:	e7aa      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebd6:	4823      	ldr	r0, [pc, #140]	; (ec64 <_sercom_get_default_pad+0x154>)
    ebd8:	e7a8      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebda:	2901      	cmp	r1, #1
    ebdc:	d007      	beq.n	ebee <_sercom_get_default_pad+0xde>
    ebde:	2900      	cmp	r1, #0
    ebe0:	d015      	beq.n	ec0e <_sercom_get_default_pad+0xfe>
    ebe2:	2902      	cmp	r1, #2
    ebe4:	d005      	beq.n	ebf2 <_sercom_get_default_pad+0xe2>
    ebe6:	2903      	cmp	r1, #3
    ebe8:	d005      	beq.n	ebf6 <_sercom_get_default_pad+0xe6>
    ebea:	2000      	movs	r0, #0
    ebec:	e79e      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebee:	481e      	ldr	r0, [pc, #120]	; (ec68 <_sercom_get_default_pad+0x158>)
    ebf0:	e79c      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebf2:	481e      	ldr	r0, [pc, #120]	; (ec6c <_sercom_get_default_pad+0x15c>)
    ebf4:	e79a      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebf6:	481e      	ldr	r0, [pc, #120]	; (ec70 <_sercom_get_default_pad+0x160>)
    ebf8:	e798      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebfa:	481e      	ldr	r0, [pc, #120]	; (ec74 <_sercom_get_default_pad+0x164>)
    ebfc:	e796      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ebfe:	2003      	movs	r0, #3
    ec00:	e794      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ec02:	481d      	ldr	r0, [pc, #116]	; (ec78 <_sercom_get_default_pad+0x168>)
    ec04:	e792      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ec06:	481d      	ldr	r0, [pc, #116]	; (ec7c <_sercom_get_default_pad+0x16c>)
    ec08:	e790      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ec0a:	481d      	ldr	r0, [pc, #116]	; (ec80 <_sercom_get_default_pad+0x170>)
    ec0c:	e78e      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ec0e:	481d      	ldr	r0, [pc, #116]	; (ec84 <_sercom_get_default_pad+0x174>)
    ec10:	e78c      	b.n	eb2c <_sercom_get_default_pad+0x1c>
    ec12:	46c0      	nop			; (mov r8, r8)
    ec14:	42001000 	.word	0x42001000
    ec18:	42001800 	.word	0x42001800
    ec1c:	42001c00 	.word	0x42001c00
    ec20:	42001400 	.word	0x42001400
    ec24:	42000800 	.word	0x42000800
    ec28:	42000c00 	.word	0x42000c00
    ec2c:	00050003 	.word	0x00050003
    ec30:	00060003 	.word	0x00060003
    ec34:	00070003 	.word	0x00070003
    ec38:	00010003 	.word	0x00010003
    ec3c:	001e0003 	.word	0x001e0003
    ec40:	001f0003 	.word	0x001f0003
    ec44:	00090003 	.word	0x00090003
    ec48:	000a0003 	.word	0x000a0003
    ec4c:	000b0003 	.word	0x000b0003
    ec50:	00110003 	.word	0x00110003
    ec54:	00120003 	.word	0x00120003
    ec58:	00130003 	.word	0x00130003
    ec5c:	000d0003 	.word	0x000d0003
    ec60:	000e0003 	.word	0x000e0003
    ec64:	000f0003 	.word	0x000f0003
    ec68:	00170003 	.word	0x00170003
    ec6c:	00180003 	.word	0x00180003
    ec70:	00190003 	.word	0x00190003
    ec74:	00040003 	.word	0x00040003
    ec78:	00080003 	.word	0x00080003
    ec7c:	00100003 	.word	0x00100003
    ec80:	000c0003 	.word	0x000c0003
    ec84:	00160003 	.word	0x00160003

0000ec88 <_sercom_get_sercom_inst_index>:
    ec88:	b530      	push	{r4, r5, lr}
    ec8a:	b087      	sub	sp, #28
    ec8c:	4b0b      	ldr	r3, [pc, #44]	; (ecbc <_sercom_get_sercom_inst_index+0x34>)
    ec8e:	466a      	mov	r2, sp
    ec90:	cb32      	ldmia	r3!, {r1, r4, r5}
    ec92:	c232      	stmia	r2!, {r1, r4, r5}
    ec94:	cb32      	ldmia	r3!, {r1, r4, r5}
    ec96:	c232      	stmia	r2!, {r1, r4, r5}
    ec98:	9b00      	ldr	r3, [sp, #0]
    ec9a:	4283      	cmp	r3, r0
    ec9c:	d00b      	beq.n	ecb6 <_sercom_get_sercom_inst_index+0x2e>
    ec9e:	2301      	movs	r3, #1
    eca0:	009a      	lsls	r2, r3, #2
    eca2:	4669      	mov	r1, sp
    eca4:	5852      	ldr	r2, [r2, r1]
    eca6:	4282      	cmp	r2, r0
    eca8:	d006      	beq.n	ecb8 <_sercom_get_sercom_inst_index+0x30>
    ecaa:	3301      	adds	r3, #1
    ecac:	2b06      	cmp	r3, #6
    ecae:	d1f7      	bne.n	eca0 <_sercom_get_sercom_inst_index+0x18>
    ecb0:	2000      	movs	r0, #0
    ecb2:	b007      	add	sp, #28
    ecb4:	bd30      	pop	{r4, r5, pc}
    ecb6:	2300      	movs	r3, #0
    ecb8:	b2d8      	uxtb	r0, r3
    ecba:	e7fa      	b.n	ecb2 <_sercom_get_sercom_inst_index+0x2a>
    ecbc:	00019e00 	.word	0x00019e00

0000ecc0 <_sercom_default_handler>:
    ecc0:	4770      	bx	lr
	...

0000ecc4 <_sercom_set_handler>:
    ecc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecc6:	4b0a      	ldr	r3, [pc, #40]	; (ecf0 <_sercom_set_handler+0x2c>)
    ecc8:	781b      	ldrb	r3, [r3, #0]
    ecca:	2b00      	cmp	r3, #0
    eccc:	d10c      	bne.n	ece8 <_sercom_set_handler+0x24>
    ecce:	4f09      	ldr	r7, [pc, #36]	; (ecf4 <_sercom_set_handler+0x30>)
    ecd0:	4e09      	ldr	r6, [pc, #36]	; (ecf8 <_sercom_set_handler+0x34>)
    ecd2:	4d0a      	ldr	r5, [pc, #40]	; (ecfc <_sercom_set_handler+0x38>)
    ecd4:	2400      	movs	r4, #0
    ecd6:	51de      	str	r6, [r3, r7]
    ecd8:	195a      	adds	r2, r3, r5
    ecda:	6014      	str	r4, [r2, #0]
    ecdc:	3304      	adds	r3, #4
    ecde:	2b18      	cmp	r3, #24
    ece0:	d1f9      	bne.n	ecd6 <_sercom_set_handler+0x12>
    ece2:	2201      	movs	r2, #1
    ece4:	4b02      	ldr	r3, [pc, #8]	; (ecf0 <_sercom_set_handler+0x2c>)
    ece6:	701a      	strb	r2, [r3, #0]
    ece8:	0080      	lsls	r0, r0, #2
    ecea:	4b02      	ldr	r3, [pc, #8]	; (ecf4 <_sercom_set_handler+0x30>)
    ecec:	50c1      	str	r1, [r0, r3]
    ecee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ecf0:	20000416 	.word	0x20000416
    ecf4:	20000418 	.word	0x20000418
    ecf8:	0000ecc1 	.word	0x0000ecc1
    ecfc:	20001108 	.word	0x20001108

0000ed00 <_sercom_get_interrupt_vector>:
    ed00:	b500      	push	{lr}
    ed02:	b083      	sub	sp, #12
    ed04:	2309      	movs	r3, #9
    ed06:	466a      	mov	r2, sp
    ed08:	7013      	strb	r3, [r2, #0]
    ed0a:	3301      	adds	r3, #1
    ed0c:	7053      	strb	r3, [r2, #1]
    ed0e:	3301      	adds	r3, #1
    ed10:	7093      	strb	r3, [r2, #2]
    ed12:	3301      	adds	r3, #1
    ed14:	70d3      	strb	r3, [r2, #3]
    ed16:	3301      	adds	r3, #1
    ed18:	7113      	strb	r3, [r2, #4]
    ed1a:	3301      	adds	r3, #1
    ed1c:	7153      	strb	r3, [r2, #5]
    ed1e:	4b03      	ldr	r3, [pc, #12]	; (ed2c <_sercom_get_interrupt_vector+0x2c>)
    ed20:	4798      	blx	r3
    ed22:	466b      	mov	r3, sp
    ed24:	5618      	ldrsb	r0, [r3, r0]
    ed26:	b003      	add	sp, #12
    ed28:	bd00      	pop	{pc}
    ed2a:	46c0      	nop			; (mov r8, r8)
    ed2c:	0000ec89 	.word	0x0000ec89

0000ed30 <SERCOM0_Handler>:
    ed30:	b510      	push	{r4, lr}
    ed32:	4b02      	ldr	r3, [pc, #8]	; (ed3c <SERCOM0_Handler+0xc>)
    ed34:	681b      	ldr	r3, [r3, #0]
    ed36:	2000      	movs	r0, #0
    ed38:	4798      	blx	r3
    ed3a:	bd10      	pop	{r4, pc}
    ed3c:	20000418 	.word	0x20000418

0000ed40 <SERCOM1_Handler>:
    ed40:	b510      	push	{r4, lr}
    ed42:	4b02      	ldr	r3, [pc, #8]	; (ed4c <SERCOM1_Handler+0xc>)
    ed44:	685b      	ldr	r3, [r3, #4]
    ed46:	2001      	movs	r0, #1
    ed48:	4798      	blx	r3
    ed4a:	bd10      	pop	{r4, pc}
    ed4c:	20000418 	.word	0x20000418

0000ed50 <SERCOM2_Handler>:
    ed50:	b510      	push	{r4, lr}
    ed52:	4b02      	ldr	r3, [pc, #8]	; (ed5c <SERCOM2_Handler+0xc>)
    ed54:	689b      	ldr	r3, [r3, #8]
    ed56:	2002      	movs	r0, #2
    ed58:	4798      	blx	r3
    ed5a:	bd10      	pop	{r4, pc}
    ed5c:	20000418 	.word	0x20000418

0000ed60 <SERCOM3_Handler>:
    ed60:	b510      	push	{r4, lr}
    ed62:	4b02      	ldr	r3, [pc, #8]	; (ed6c <SERCOM3_Handler+0xc>)
    ed64:	68db      	ldr	r3, [r3, #12]
    ed66:	2003      	movs	r0, #3
    ed68:	4798      	blx	r3
    ed6a:	bd10      	pop	{r4, pc}
    ed6c:	20000418 	.word	0x20000418

0000ed70 <SERCOM4_Handler>:
    ed70:	b510      	push	{r4, lr}
    ed72:	4b02      	ldr	r3, [pc, #8]	; (ed7c <SERCOM4_Handler+0xc>)
    ed74:	691b      	ldr	r3, [r3, #16]
    ed76:	2004      	movs	r0, #4
    ed78:	4798      	blx	r3
    ed7a:	bd10      	pop	{r4, pc}
    ed7c:	20000418 	.word	0x20000418

0000ed80 <SERCOM5_Handler>:
    ed80:	b510      	push	{r4, lr}
    ed82:	4b02      	ldr	r3, [pc, #8]	; (ed8c <SERCOM5_Handler+0xc>)
    ed84:	695b      	ldr	r3, [r3, #20]
    ed86:	2005      	movs	r0, #5
    ed88:	4798      	blx	r3
    ed8a:	bd10      	pop	{r4, pc}
    ed8c:	20000418 	.word	0x20000418

0000ed90 <spi_set_baudrate>:
    ed90:	b570      	push	{r4, r5, r6, lr}
    ed92:	b082      	sub	sp, #8
    ed94:	0005      	movs	r5, r0
    ed96:	000c      	movs	r4, r1
    ed98:	2200      	movs	r2, #0
    ed9a:	466b      	mov	r3, sp
    ed9c:	80da      	strh	r2, [r3, #6]
    ed9e:	6806      	ldr	r6, [r0, #0]
    eda0:	0030      	movs	r0, r6
    eda2:	4b24      	ldr	r3, [pc, #144]	; (ee34 <spi_set_baudrate+0xa4>)
    eda4:	4798      	blx	r3
    eda6:	231f      	movs	r3, #31
    eda8:	4018      	ands	r0, r3
    edaa:	3b1e      	subs	r3, #30
    edac:	4083      	lsls	r3, r0
    edae:	2280      	movs	r2, #128	; 0x80
    edb0:	4921      	ldr	r1, [pc, #132]	; (ee38 <spi_set_baudrate+0xa8>)
    edb2:	508b      	str	r3, [r1, r2]
    edb4:	682a      	ldr	r2, [r5, #0]
    edb6:	69d3      	ldr	r3, [r2, #28]
    edb8:	2b00      	cmp	r3, #0
    edba:	d1fc      	bne.n	edb6 <spi_set_baudrate+0x26>
    edbc:	338f      	adds	r3, #143	; 0x8f
    edbe:	7533      	strb	r3, [r6, #20]
    edc0:	7633      	strb	r3, [r6, #24]
    edc2:	6833      	ldr	r3, [r6, #0]
    edc4:	2202      	movs	r2, #2
    edc6:	4393      	bics	r3, r2
    edc8:	6033      	str	r3, [r6, #0]
    edca:	6828      	ldr	r0, [r5, #0]
    edcc:	69c3      	ldr	r3, [r0, #28]
    edce:	2b00      	cmp	r3, #0
    edd0:	d1fc      	bne.n	edcc <spi_set_baudrate+0x3c>
    edd2:	4b1a      	ldr	r3, [pc, #104]	; (ee3c <spi_set_baudrate+0xac>)
    edd4:	4798      	blx	r3
    edd6:	3014      	adds	r0, #20
    edd8:	b2c0      	uxtb	r0, r0
    edda:	4b19      	ldr	r3, [pc, #100]	; (ee40 <spi_set_baudrate+0xb0>)
    eddc:	4798      	blx	r3
    edde:	0001      	movs	r1, r0
    ede0:	466b      	mov	r3, sp
    ede2:	1d9a      	adds	r2, r3, #6
    ede4:	0020      	movs	r0, r4
    ede6:	4b17      	ldr	r3, [pc, #92]	; (ee44 <spi_set_baudrate+0xb4>)
    ede8:	4798      	blx	r3
    edea:	1e04      	subs	r4, r0, #0
    edec:	d003      	beq.n	edf6 <spi_set_baudrate+0x66>
    edee:	2417      	movs	r4, #23
    edf0:	0020      	movs	r0, r4
    edf2:	b002      	add	sp, #8
    edf4:	bd70      	pop	{r4, r5, r6, pc}
    edf6:	466b      	mov	r3, sp
    edf8:	3306      	adds	r3, #6
    edfa:	781b      	ldrb	r3, [r3, #0]
    edfc:	7333      	strb	r3, [r6, #12]
    edfe:	682e      	ldr	r6, [r5, #0]
    ee00:	69f3      	ldr	r3, [r6, #28]
    ee02:	2b00      	cmp	r3, #0
    ee04:	d1fc      	bne.n	ee00 <spi_set_baudrate+0x70>
    ee06:	0030      	movs	r0, r6
    ee08:	4b0a      	ldr	r3, [pc, #40]	; (ee34 <spi_set_baudrate+0xa4>)
    ee0a:	4798      	blx	r3
    ee0c:	231f      	movs	r3, #31
    ee0e:	4018      	ands	r0, r3
    ee10:	3b1e      	subs	r3, #30
    ee12:	4083      	lsls	r3, r0
    ee14:	4a08      	ldr	r2, [pc, #32]	; (ee38 <spi_set_baudrate+0xa8>)
    ee16:	6013      	str	r3, [r2, #0]
    ee18:	682a      	ldr	r2, [r5, #0]
    ee1a:	69d3      	ldr	r3, [r2, #28]
    ee1c:	2b00      	cmp	r3, #0
    ee1e:	d1fc      	bne.n	ee1a <spi_set_baudrate+0x8a>
    ee20:	6833      	ldr	r3, [r6, #0]
    ee22:	2202      	movs	r2, #2
    ee24:	4313      	orrs	r3, r2
    ee26:	6033      	str	r3, [r6, #0]
    ee28:	682a      	ldr	r2, [r5, #0]
    ee2a:	69d3      	ldr	r3, [r2, #28]
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	d1fc      	bne.n	ee2a <spi_set_baudrate+0x9a>
    ee30:	e7de      	b.n	edf0 <spi_set_baudrate+0x60>
    ee32:	46c0      	nop			; (mov r8, r8)
    ee34:	0000ed01 	.word	0x0000ed01
    ee38:	e000e100 	.word	0xe000e100
    ee3c:	0000ec89 	.word	0x0000ec89
    ee40:	0001005d 	.word	0x0001005d
    ee44:	0000ea07 	.word	0x0000ea07

0000ee48 <spi_init>:
    ee48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee4a:	b08b      	sub	sp, #44	; 0x2c
    ee4c:	0005      	movs	r5, r0
    ee4e:	000c      	movs	r4, r1
    ee50:	0016      	movs	r6, r2
    ee52:	6029      	str	r1, [r5, #0]
    ee54:	680b      	ldr	r3, [r1, #0]
    ee56:	201c      	movs	r0, #28
    ee58:	079b      	lsls	r3, r3, #30
    ee5a:	d501      	bpl.n	ee60 <spi_init+0x18>
    ee5c:	b00b      	add	sp, #44	; 0x2c
    ee5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee60:	680b      	ldr	r3, [r1, #0]
    ee62:	3817      	subs	r0, #23
    ee64:	07db      	lsls	r3, r3, #31
    ee66:	d4f9      	bmi.n	ee5c <spi_init+0x14>
    ee68:	0008      	movs	r0, r1
    ee6a:	4b60      	ldr	r3, [pc, #384]	; (efec <spi_init+0x1a4>)
    ee6c:	4798      	blx	r3
    ee6e:	4a60      	ldr	r2, [pc, #384]	; (eff0 <spi_init+0x1a8>)
    ee70:	6a11      	ldr	r1, [r2, #32]
    ee72:	1c87      	adds	r7, r0, #2
    ee74:	2301      	movs	r3, #1
    ee76:	40bb      	lsls	r3, r7
    ee78:	430b      	orrs	r3, r1
    ee7a:	6213      	str	r3, [r2, #32]
    ee7c:	a909      	add	r1, sp, #36	; 0x24
    ee7e:	2724      	movs	r7, #36	; 0x24
    ee80:	5df3      	ldrb	r3, [r6, r7]
    ee82:	700b      	strb	r3, [r1, #0]
    ee84:	3014      	adds	r0, #20
    ee86:	b2c3      	uxtb	r3, r0
    ee88:	9301      	str	r3, [sp, #4]
    ee8a:	0018      	movs	r0, r3
    ee8c:	4b59      	ldr	r3, [pc, #356]	; (eff4 <spi_init+0x1ac>)
    ee8e:	4798      	blx	r3
    ee90:	9801      	ldr	r0, [sp, #4]
    ee92:	4b59      	ldr	r3, [pc, #356]	; (eff8 <spi_init+0x1b0>)
    ee94:	4798      	blx	r3
    ee96:	5df0      	ldrb	r0, [r6, r7]
    ee98:	2100      	movs	r1, #0
    ee9a:	4b58      	ldr	r3, [pc, #352]	; (effc <spi_init+0x1b4>)
    ee9c:	4798      	blx	r3
    ee9e:	7833      	ldrb	r3, [r6, #0]
    eea0:	2b01      	cmp	r3, #1
    eea2:	d038      	beq.n	ef16 <spi_init+0xce>
    eea4:	002b      	movs	r3, r5
    eea6:	330c      	adds	r3, #12
    eea8:	0029      	movs	r1, r5
    eeaa:	3128      	adds	r1, #40	; 0x28
    eeac:	2200      	movs	r2, #0
    eeae:	c304      	stmia	r3!, {r2}
    eeb0:	428b      	cmp	r3, r1
    eeb2:	d1fc      	bne.n	eeae <spi_init+0x66>
    eeb4:	2300      	movs	r3, #0
    eeb6:	62eb      	str	r3, [r5, #44]	; 0x2c
    eeb8:	62ab      	str	r3, [r5, #40]	; 0x28
    eeba:	2400      	movs	r4, #0
    eebc:	86ab      	strh	r3, [r5, #52]	; 0x34
    eebe:	862b      	strh	r3, [r5, #48]	; 0x30
    eec0:	3336      	adds	r3, #54	; 0x36
    eec2:	54ec      	strb	r4, [r5, r3]
    eec4:	3301      	adds	r3, #1
    eec6:	54ec      	strb	r4, [r5, r3]
    eec8:	3301      	adds	r3, #1
    eeca:	54ec      	strb	r4, [r5, r3]
    eecc:	3b35      	subs	r3, #53	; 0x35
    eece:	726b      	strb	r3, [r5, #9]
    eed0:	712c      	strb	r4, [r5, #4]
    eed2:	6828      	ldr	r0, [r5, #0]
    eed4:	4b45      	ldr	r3, [pc, #276]	; (efec <spi_init+0x1a4>)
    eed6:	4798      	blx	r3
    eed8:	0007      	movs	r7, r0
    eeda:	4949      	ldr	r1, [pc, #292]	; (f000 <spi_init+0x1b8>)
    eedc:	4b49      	ldr	r3, [pc, #292]	; (f004 <spi_init+0x1bc>)
    eede:	4798      	blx	r3
    eee0:	00bf      	lsls	r7, r7, #2
    eee2:	4b49      	ldr	r3, [pc, #292]	; (f008 <spi_init+0x1c0>)
    eee4:	50fd      	str	r5, [r7, r3]
    eee6:	682f      	ldr	r7, [r5, #0]
    eee8:	ab04      	add	r3, sp, #16
    eeea:	2280      	movs	r2, #128	; 0x80
    eeec:	701a      	strb	r2, [r3, #0]
    eeee:	705c      	strb	r4, [r3, #1]
    eef0:	3a7f      	subs	r2, #127	; 0x7f
    eef2:	709a      	strb	r2, [r3, #2]
    eef4:	70dc      	strb	r4, [r3, #3]
    eef6:	7833      	ldrb	r3, [r6, #0]
    eef8:	2b00      	cmp	r3, #0
    eefa:	d102      	bne.n	ef02 <spi_init+0xba>
    eefc:	2200      	movs	r2, #0
    eefe:	ab04      	add	r3, sp, #16
    ef00:	709a      	strb	r2, [r3, #2]
    ef02:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    ef04:	9305      	str	r3, [sp, #20]
    ef06:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    ef08:	9306      	str	r3, [sp, #24]
    ef0a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    ef0c:	9307      	str	r3, [sp, #28]
    ef0e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    ef10:	9308      	str	r3, [sp, #32]
    ef12:	2400      	movs	r4, #0
    ef14:	e00b      	b.n	ef2e <spi_init+0xe6>
    ef16:	6823      	ldr	r3, [r4, #0]
    ef18:	220c      	movs	r2, #12
    ef1a:	4313      	orrs	r3, r2
    ef1c:	6023      	str	r3, [r4, #0]
    ef1e:	e7c1      	b.n	eea4 <spi_init+0x5c>
    ef20:	0038      	movs	r0, r7
    ef22:	4b3a      	ldr	r3, [pc, #232]	; (f00c <spi_init+0x1c4>)
    ef24:	4798      	blx	r3
    ef26:	e00a      	b.n	ef3e <spi_init+0xf6>
    ef28:	3401      	adds	r4, #1
    ef2a:	2c04      	cmp	r4, #4
    ef2c:	d010      	beq.n	ef50 <spi_init+0x108>
    ef2e:	b2e1      	uxtb	r1, r4
    ef30:	00a3      	lsls	r3, r4, #2
    ef32:	aa02      	add	r2, sp, #8
    ef34:	200c      	movs	r0, #12
    ef36:	1812      	adds	r2, r2, r0
    ef38:	58d0      	ldr	r0, [r2, r3]
    ef3a:	2800      	cmp	r0, #0
    ef3c:	d0f0      	beq.n	ef20 <spi_init+0xd8>
    ef3e:	1c43      	adds	r3, r0, #1
    ef40:	d0f2      	beq.n	ef28 <spi_init+0xe0>
    ef42:	a904      	add	r1, sp, #16
    ef44:	7008      	strb	r0, [r1, #0]
    ef46:	0c00      	lsrs	r0, r0, #16
    ef48:	b2c0      	uxtb	r0, r0
    ef4a:	4b31      	ldr	r3, [pc, #196]	; (f010 <spi_init+0x1c8>)
    ef4c:	4798      	blx	r3
    ef4e:	e7eb      	b.n	ef28 <spi_init+0xe0>
    ef50:	7833      	ldrb	r3, [r6, #0]
    ef52:	716b      	strb	r3, [r5, #5]
    ef54:	7c33      	ldrb	r3, [r6, #16]
    ef56:	71ab      	strb	r3, [r5, #6]
    ef58:	7cb3      	ldrb	r3, [r6, #18]
    ef5a:	71eb      	strb	r3, [r5, #7]
    ef5c:	7d33      	ldrb	r3, [r6, #20]
    ef5e:	722b      	strb	r3, [r5, #8]
    ef60:	2200      	movs	r2, #0
    ef62:	ab02      	add	r3, sp, #8
    ef64:	80da      	strh	r2, [r3, #6]
    ef66:	7833      	ldrb	r3, [r6, #0]
    ef68:	2b01      	cmp	r3, #1
    ef6a:	d028      	beq.n	efbe <spi_init+0x176>
    ef6c:	6873      	ldr	r3, [r6, #4]
    ef6e:	68b2      	ldr	r2, [r6, #8]
    ef70:	4313      	orrs	r3, r2
    ef72:	68f2      	ldr	r2, [r6, #12]
    ef74:	4313      	orrs	r3, r2
    ef76:	7c31      	ldrb	r1, [r6, #16]
    ef78:	7c72      	ldrb	r2, [r6, #17]
    ef7a:	2a00      	cmp	r2, #0
    ef7c:	d103      	bne.n	ef86 <spi_init+0x13e>
    ef7e:	4a25      	ldr	r2, [pc, #148]	; (f014 <spi_init+0x1cc>)
    ef80:	7892      	ldrb	r2, [r2, #2]
    ef82:	0792      	lsls	r2, r2, #30
    ef84:	d501      	bpl.n	ef8a <spi_init+0x142>
    ef86:	2280      	movs	r2, #128	; 0x80
    ef88:	4313      	orrs	r3, r2
    ef8a:	7cb2      	ldrb	r2, [r6, #18]
    ef8c:	2a00      	cmp	r2, #0
    ef8e:	d002      	beq.n	ef96 <spi_init+0x14e>
    ef90:	2280      	movs	r2, #128	; 0x80
    ef92:	0292      	lsls	r2, r2, #10
    ef94:	4311      	orrs	r1, r2
    ef96:	7cf2      	ldrb	r2, [r6, #19]
    ef98:	2a00      	cmp	r2, #0
    ef9a:	d002      	beq.n	efa2 <spi_init+0x15a>
    ef9c:	2280      	movs	r2, #128	; 0x80
    ef9e:	0092      	lsls	r2, r2, #2
    efa0:	4311      	orrs	r1, r2
    efa2:	7d32      	ldrb	r2, [r6, #20]
    efa4:	2a00      	cmp	r2, #0
    efa6:	d002      	beq.n	efae <spi_init+0x166>
    efa8:	2280      	movs	r2, #128	; 0x80
    efaa:	0192      	lsls	r2, r2, #6
    efac:	4311      	orrs	r1, r2
    efae:	683a      	ldr	r2, [r7, #0]
    efb0:	4313      	orrs	r3, r2
    efb2:	603b      	str	r3, [r7, #0]
    efb4:	687b      	ldr	r3, [r7, #4]
    efb6:	430b      	orrs	r3, r1
    efb8:	607b      	str	r3, [r7, #4]
    efba:	2000      	movs	r0, #0
    efbc:	e74e      	b.n	ee5c <spi_init+0x14>
    efbe:	6828      	ldr	r0, [r5, #0]
    efc0:	4b0a      	ldr	r3, [pc, #40]	; (efec <spi_init+0x1a4>)
    efc2:	4798      	blx	r3
    efc4:	3014      	adds	r0, #20
    efc6:	b2c0      	uxtb	r0, r0
    efc8:	4b13      	ldr	r3, [pc, #76]	; (f018 <spi_init+0x1d0>)
    efca:	4798      	blx	r3
    efcc:	0001      	movs	r1, r0
    efce:	ab02      	add	r3, sp, #8
    efd0:	1d9a      	adds	r2, r3, #6
    efd2:	69b0      	ldr	r0, [r6, #24]
    efd4:	4b11      	ldr	r3, [pc, #68]	; (f01c <spi_init+0x1d4>)
    efd6:	4798      	blx	r3
    efd8:	0003      	movs	r3, r0
    efda:	2017      	movs	r0, #23
    efdc:	2b00      	cmp	r3, #0
    efde:	d000      	beq.n	efe2 <spi_init+0x19a>
    efe0:	e73c      	b.n	ee5c <spi_init+0x14>
    efe2:	ab02      	add	r3, sp, #8
    efe4:	3306      	adds	r3, #6
    efe6:	781b      	ldrb	r3, [r3, #0]
    efe8:	733b      	strb	r3, [r7, #12]
    efea:	e7bf      	b.n	ef6c <spi_init+0x124>
    efec:	0000ec89 	.word	0x0000ec89
    eff0:	40000400 	.word	0x40000400
    eff4:	00010041 	.word	0x00010041
    eff8:	0000ffb5 	.word	0x0000ffb5
    effc:	0000eac5 	.word	0x0000eac5
    f000:	0000f2b5 	.word	0x0000f2b5
    f004:	0000ecc5 	.word	0x0000ecc5
    f008:	20001108 	.word	0x20001108
    f00c:	0000eb11 	.word	0x0000eb11
    f010:	00010139 	.word	0x00010139
    f014:	41002000 	.word	0x41002000
    f018:	0001005d 	.word	0x0001005d
    f01c:	0000ea07 	.word	0x0000ea07

0000f020 <spi_read_buffer_wait>:
    f020:	b5f0      	push	{r4, r5, r6, r7, lr}
    f022:	46d6      	mov	lr, sl
    f024:	4647      	mov	r7, r8
    f026:	b580      	push	{r7, lr}
    f028:	b083      	sub	sp, #12
    f02a:	2438      	movs	r4, #56	; 0x38
    f02c:	5d05      	ldrb	r5, [r0, r4]
    f02e:	3c33      	subs	r4, #51	; 0x33
    f030:	2d05      	cmp	r5, #5
    f032:	d002      	beq.n	f03a <spi_read_buffer_wait+0x1a>
    f034:	3412      	adds	r4, #18
    f036:	2a00      	cmp	r2, #0
    f038:	d105      	bne.n	f046 <spi_read_buffer_wait+0x26>
    f03a:	0020      	movs	r0, r4
    f03c:	b003      	add	sp, #12
    f03e:	bc0c      	pop	{r2, r3}
    f040:	4690      	mov	r8, r2
    f042:	469a      	mov	sl, r3
    f044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f046:	79c4      	ldrb	r4, [r0, #7]
    f048:	2c00      	cmp	r4, #0
    f04a:	d144      	bne.n	f0d6 <spi_read_buffer_wait+0xb6>
    f04c:	341c      	adds	r4, #28
    f04e:	e7f4      	b.n	f03a <spi_read_buffer_wait+0x1a>
    f050:	6805      	ldr	r5, [r0, #0]
    f052:	7e2c      	ldrb	r4, [r5, #24]
    f054:	423c      	tst	r4, r7
    f056:	d0fc      	beq.n	f052 <spi_read_buffer_wait+0x32>
    f058:	7e2c      	ldrb	r4, [r5, #24]
    f05a:	423c      	tst	r4, r7
    f05c:	d01a      	beq.n	f094 <spi_read_buffer_wait+0x74>
    f05e:	4644      	mov	r4, r8
    f060:	62ac      	str	r4, [r5, #40]	; 0x28
    f062:	e017      	b.n	f094 <spi_read_buffer_wait+0x74>
    f064:	7984      	ldrb	r4, [r0, #6]
    f066:	2c01      	cmp	r4, #1
    f068:	d026      	beq.n	f0b8 <spi_read_buffer_wait+0x98>
    f06a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    f06c:	b2ec      	uxtb	r4, r5
    f06e:	46a4      	mov	ip, r4
    f070:	9c01      	ldr	r4, [sp, #4]
    f072:	2c00      	cmp	r4, #0
    f074:	d13a      	bne.n	f0ec <spi_read_buffer_wait+0xcc>
    f076:	1c75      	adds	r5, r6, #1
    f078:	b2ad      	uxth	r5, r5
    f07a:	4664      	mov	r4, ip
    f07c:	558c      	strb	r4, [r1, r6]
    f07e:	7984      	ldrb	r4, [r0, #6]
    f080:	2c01      	cmp	r4, #1
    f082:	d01e      	beq.n	f0c2 <spi_read_buffer_wait+0xa2>
    f084:	002e      	movs	r6, r5
    f086:	3a01      	subs	r2, #1
    f088:	b292      	uxth	r2, r2
    f08a:	4552      	cmp	r2, sl
    f08c:	d01f      	beq.n	f0ce <spi_read_buffer_wait+0xae>
    f08e:	7944      	ldrb	r4, [r0, #5]
    f090:	2c01      	cmp	r4, #1
    f092:	d0dd      	beq.n	f050 <spi_read_buffer_wait+0x30>
    f094:	6805      	ldr	r5, [r0, #0]
    f096:	7e2c      	ldrb	r4, [r5, #24]
    f098:	421c      	tst	r4, r3
    f09a:	d0fc      	beq.n	f096 <spi_read_buffer_wait+0x76>
    f09c:	7e2c      	ldrb	r4, [r5, #24]
    f09e:	421c      	tst	r4, r3
    f0a0:	d017      	beq.n	f0d2 <spi_read_buffer_wait+0xb2>
    f0a2:	8b6c      	ldrh	r4, [r5, #26]
    f0a4:	46a4      	mov	ip, r4
    f0a6:	2400      	movs	r4, #0
    f0a8:	9401      	str	r4, [sp, #4]
    f0aa:	4664      	mov	r4, ip
    f0ac:	421c      	tst	r4, r3
    f0ae:	d0d9      	beq.n	f064 <spi_read_buffer_wait+0x44>
    f0b0:	836b      	strh	r3, [r5, #26]
    f0b2:	241e      	movs	r4, #30
    f0b4:	9401      	str	r4, [sp, #4]
    f0b6:	e7d5      	b.n	f064 <spi_read_buffer_wait+0x44>
    f0b8:	6aac      	ldr	r4, [r5, #40]	; 0x28
    f0ba:	05e4      	lsls	r4, r4, #23
    f0bc:	0de4      	lsrs	r4, r4, #23
    f0be:	46a4      	mov	ip, r4
    f0c0:	e7d6      	b.n	f070 <spi_read_buffer_wait+0x50>
    f0c2:	3602      	adds	r6, #2
    f0c4:	b2b6      	uxth	r6, r6
    f0c6:	4664      	mov	r4, ip
    f0c8:	0a24      	lsrs	r4, r4, #8
    f0ca:	554c      	strb	r4, [r1, r5]
    f0cc:	e7db      	b.n	f086 <spi_read_buffer_wait+0x66>
    f0ce:	9c01      	ldr	r4, [sp, #4]
    f0d0:	e7b3      	b.n	f03a <spi_read_buffer_wait+0x1a>
    f0d2:	2410      	movs	r4, #16
    f0d4:	e7b1      	b.n	f03a <spi_read_buffer_wait+0x1a>
    f0d6:	3a01      	subs	r2, #1
    f0d8:	b292      	uxth	r2, r2
    f0da:	2600      	movs	r6, #0
    f0dc:	2701      	movs	r7, #1
    f0de:	05db      	lsls	r3, r3, #23
    f0e0:	0ddb      	lsrs	r3, r3, #23
    f0e2:	4698      	mov	r8, r3
    f0e4:	2304      	movs	r3, #4
    f0e6:	4c02      	ldr	r4, [pc, #8]	; (f0f0 <spi_read_buffer_wait+0xd0>)
    f0e8:	46a2      	mov	sl, r4
    f0ea:	e7d0      	b.n	f08e <spi_read_buffer_wait+0x6e>
    f0ec:	9c01      	ldr	r4, [sp, #4]
    f0ee:	e7a4      	b.n	f03a <spi_read_buffer_wait+0x1a>
    f0f0:	0000ffff 	.word	0x0000ffff

0000f0f4 <spi_select_slave>:
    f0f4:	b510      	push	{r4, lr}
    f0f6:	7944      	ldrb	r4, [r0, #5]
    f0f8:	2315      	movs	r3, #21
    f0fa:	2c01      	cmp	r4, #1
    f0fc:	d001      	beq.n	f102 <spi_select_slave+0xe>
    f0fe:	0018      	movs	r0, r3
    f100:	bd10      	pop	{r4, pc}
    f102:	7a04      	ldrb	r4, [r0, #8]
    f104:	2300      	movs	r3, #0
    f106:	2c00      	cmp	r4, #0
    f108:	d1f9      	bne.n	f0fe <spi_select_slave+0xa>
    f10a:	2a00      	cmp	r2, #0
    f10c:	d058      	beq.n	f1c0 <spi_select_slave+0xcc>
    f10e:	784b      	ldrb	r3, [r1, #1]
    f110:	2b00      	cmp	r3, #0
    f112:	d044      	beq.n	f19e <spi_select_slave+0xaa>
    f114:	6803      	ldr	r3, [r0, #0]
    f116:	7e1b      	ldrb	r3, [r3, #24]
    f118:	07db      	lsls	r3, r3, #31
    f11a:	d410      	bmi.n	f13e <spi_select_slave+0x4a>
    f11c:	780a      	ldrb	r2, [r1, #0]
    f11e:	09d1      	lsrs	r1, r2, #7
    f120:	2300      	movs	r3, #0
    f122:	2900      	cmp	r1, #0
    f124:	d104      	bne.n	f130 <spi_select_slave+0x3c>
    f126:	0953      	lsrs	r3, r2, #5
    f128:	01db      	lsls	r3, r3, #7
    f12a:	492e      	ldr	r1, [pc, #184]	; (f1e4 <spi_select_slave+0xf0>)
    f12c:	468c      	mov	ip, r1
    f12e:	4463      	add	r3, ip
    f130:	211f      	movs	r1, #31
    f132:	4011      	ands	r1, r2
    f134:	2201      	movs	r2, #1
    f136:	408a      	lsls	r2, r1
    f138:	619a      	str	r2, [r3, #24]
    f13a:	2305      	movs	r3, #5
    f13c:	e7df      	b.n	f0fe <spi_select_slave+0xa>
    f13e:	780a      	ldrb	r2, [r1, #0]
    f140:	09d4      	lsrs	r4, r2, #7
    f142:	2300      	movs	r3, #0
    f144:	2c00      	cmp	r4, #0
    f146:	d104      	bne.n	f152 <spi_select_slave+0x5e>
    f148:	0953      	lsrs	r3, r2, #5
    f14a:	01db      	lsls	r3, r3, #7
    f14c:	4c25      	ldr	r4, [pc, #148]	; (f1e4 <spi_select_slave+0xf0>)
    f14e:	46a4      	mov	ip, r4
    f150:	4463      	add	r3, ip
    f152:	241f      	movs	r4, #31
    f154:	4014      	ands	r4, r2
    f156:	2201      	movs	r2, #1
    f158:	40a2      	lsls	r2, r4
    f15a:	615a      	str	r2, [r3, #20]
    f15c:	6803      	ldr	r3, [r0, #0]
    f15e:	7e1a      	ldrb	r2, [r3, #24]
    f160:	07d2      	lsls	r2, r2, #31
    f162:	d501      	bpl.n	f168 <spi_select_slave+0x74>
    f164:	788a      	ldrb	r2, [r1, #2]
    f166:	629a      	str	r2, [r3, #40]	; 0x28
    f168:	79c2      	ldrb	r2, [r0, #7]
    f16a:	2300      	movs	r3, #0
    f16c:	2a00      	cmp	r2, #0
    f16e:	d1c6      	bne.n	f0fe <spi_select_slave+0xa>
    f170:	6802      	ldr	r2, [r0, #0]
    f172:	2104      	movs	r1, #4
    f174:	7e13      	ldrb	r3, [r2, #24]
    f176:	420b      	tst	r3, r1
    f178:	d0fc      	beq.n	f174 <spi_select_slave+0x80>
    f17a:	7e11      	ldrb	r1, [r2, #24]
    f17c:	2300      	movs	r3, #0
    f17e:	0749      	lsls	r1, r1, #29
    f180:	d5bd      	bpl.n	f0fe <spi_select_slave+0xa>
    f182:	8b53      	ldrh	r3, [r2, #26]
    f184:	075b      	lsls	r3, r3, #29
    f186:	d501      	bpl.n	f18c <spi_select_slave+0x98>
    f188:	2304      	movs	r3, #4
    f18a:	8353      	strh	r3, [r2, #26]
    f18c:	7983      	ldrb	r3, [r0, #6]
    f18e:	2b01      	cmp	r3, #1
    f190:	d002      	beq.n	f198 <spi_select_slave+0xa4>
    f192:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f194:	2300      	movs	r3, #0
    f196:	e7b2      	b.n	f0fe <spi_select_slave+0xa>
    f198:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f19a:	2300      	movs	r3, #0
    f19c:	e7af      	b.n	f0fe <spi_select_slave+0xa>
    f19e:	780a      	ldrb	r2, [r1, #0]
    f1a0:	09d1      	lsrs	r1, r2, #7
    f1a2:	2300      	movs	r3, #0
    f1a4:	2900      	cmp	r1, #0
    f1a6:	d104      	bne.n	f1b2 <spi_select_slave+0xbe>
    f1a8:	0953      	lsrs	r3, r2, #5
    f1aa:	01db      	lsls	r3, r3, #7
    f1ac:	490d      	ldr	r1, [pc, #52]	; (f1e4 <spi_select_slave+0xf0>)
    f1ae:	468c      	mov	ip, r1
    f1b0:	4463      	add	r3, ip
    f1b2:	211f      	movs	r1, #31
    f1b4:	4011      	ands	r1, r2
    f1b6:	2201      	movs	r2, #1
    f1b8:	408a      	lsls	r2, r1
    f1ba:	615a      	str	r2, [r3, #20]
    f1bc:	2300      	movs	r3, #0
    f1be:	e79e      	b.n	f0fe <spi_select_slave+0xa>
    f1c0:	780a      	ldrb	r2, [r1, #0]
    f1c2:	09d1      	lsrs	r1, r2, #7
    f1c4:	2300      	movs	r3, #0
    f1c6:	2900      	cmp	r1, #0
    f1c8:	d104      	bne.n	f1d4 <spi_select_slave+0xe0>
    f1ca:	0953      	lsrs	r3, r2, #5
    f1cc:	01db      	lsls	r3, r3, #7
    f1ce:	4905      	ldr	r1, [pc, #20]	; (f1e4 <spi_select_slave+0xf0>)
    f1d0:	468c      	mov	ip, r1
    f1d2:	4463      	add	r3, ip
    f1d4:	211f      	movs	r1, #31
    f1d6:	4011      	ands	r1, r2
    f1d8:	2201      	movs	r2, #1
    f1da:	408a      	lsls	r2, r1
    f1dc:	619a      	str	r2, [r3, #24]
    f1de:	2300      	movs	r3, #0
    f1e0:	e78d      	b.n	f0fe <spi_select_slave+0xa>
    f1e2:	46c0      	nop			; (mov r8, r8)
    f1e4:	41004400 	.word	0x41004400

0000f1e8 <spi_write_buffer_wait>:
    f1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1ea:	46de      	mov	lr, fp
    f1ec:	4657      	mov	r7, sl
    f1ee:	464e      	mov	r6, r9
    f1f0:	4645      	mov	r5, r8
    f1f2:	b5e0      	push	{r5, r6, r7, lr}
    f1f4:	b083      	sub	sp, #12
    f1f6:	468a      	mov	sl, r1
    f1f8:	2338      	movs	r3, #56	; 0x38
    f1fa:	5cc4      	ldrb	r4, [r0, r3]
    f1fc:	3b33      	subs	r3, #51	; 0x33
    f1fe:	2c05      	cmp	r4, #5
    f200:	d002      	beq.n	f208 <spi_write_buffer_wait+0x20>
    f202:	3312      	adds	r3, #18
    f204:	2a00      	cmp	r2, #0
    f206:	d14b      	bne.n	f2a0 <spi_write_buffer_wait+0xb8>
    f208:	0018      	movs	r0, r3
    f20a:	b003      	add	sp, #12
    f20c:	bc3c      	pop	{r2, r3, r4, r5}
    f20e:	4690      	mov	r8, r2
    f210:	4699      	mov	r9, r3
    f212:	46a2      	mov	sl, r4
    f214:	46ab      	mov	fp, r5
    f216:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f218:	3702      	adds	r7, #2
    f21a:	b2bf      	uxth	r7, r7
    f21c:	4641      	mov	r1, r8
    f21e:	4653      	mov	r3, sl
    f220:	5c59      	ldrb	r1, [r3, r1]
    f222:	0209      	lsls	r1, r1, #8
    f224:	465b      	mov	r3, fp
    f226:	430b      	orrs	r3, r1
    f228:	e018      	b.n	f25c <spi_write_buffer_wait+0x74>
    f22a:	7983      	ldrb	r3, [r0, #6]
    f22c:	2b01      	cmp	r3, #1
    f22e:	d02a      	beq.n	f286 <spi_write_buffer_wait+0x9e>
    f230:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f232:	3e01      	subs	r6, #1
    f234:	b2b6      	uxth	r6, r6
    f236:	4566      	cmp	r6, ip
    f238:	d027      	beq.n	f28a <spi_write_buffer_wait+0xa2>
    f23a:	6802      	ldr	r2, [r0, #0]
    f23c:	7e13      	ldrb	r3, [r2, #24]
    f23e:	4223      	tst	r3, r4
    f240:	d0fc      	beq.n	f23c <spi_write_buffer_wait+0x54>
    f242:	1c7b      	adds	r3, r7, #1
    f244:	b29b      	uxth	r3, r3
    f246:	4698      	mov	r8, r3
    f248:	4653      	mov	r3, sl
    f24a:	5ddb      	ldrb	r3, [r3, r7]
    f24c:	469b      	mov	fp, r3
    f24e:	7981      	ldrb	r1, [r0, #6]
    f250:	2901      	cmp	r1, #1
    f252:	d0e1      	beq.n	f218 <spi_write_buffer_wait+0x30>
    f254:	4669      	mov	r1, sp
    f256:	80cb      	strh	r3, [r1, #6]
    f258:	88cb      	ldrh	r3, [r1, #6]
    f25a:	4647      	mov	r7, r8
    f25c:	7e11      	ldrb	r1, [r2, #24]
    f25e:	4221      	tst	r1, r4
    f260:	d002      	beq.n	f268 <spi_write_buffer_wait+0x80>
    f262:	05db      	lsls	r3, r3, #23
    f264:	0ddb      	lsrs	r3, r3, #23
    f266:	6293      	str	r3, [r2, #40]	; 0x28
    f268:	79c3      	ldrb	r3, [r0, #7]
    f26a:	2b00      	cmp	r3, #0
    f26c:	d0e1      	beq.n	f232 <spi_write_buffer_wait+0x4a>
    f26e:	6802      	ldr	r2, [r0, #0]
    f270:	7e13      	ldrb	r3, [r2, #24]
    f272:	422b      	tst	r3, r5
    f274:	d0fc      	beq.n	f270 <spi_write_buffer_wait+0x88>
    f276:	7e13      	ldrb	r3, [r2, #24]
    f278:	422b      	tst	r3, r5
    f27a:	d0da      	beq.n	f232 <spi_write_buffer_wait+0x4a>
    f27c:	8b53      	ldrh	r3, [r2, #26]
    f27e:	422b      	tst	r3, r5
    f280:	d0d3      	beq.n	f22a <spi_write_buffer_wait+0x42>
    f282:	8355      	strh	r5, [r2, #26]
    f284:	e7d1      	b.n	f22a <spi_write_buffer_wait+0x42>
    f286:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f288:	e7d3      	b.n	f232 <spi_write_buffer_wait+0x4a>
    f28a:	7942      	ldrb	r2, [r0, #5]
    f28c:	2300      	movs	r3, #0
    f28e:	2a01      	cmp	r2, #1
    f290:	d1ba      	bne.n	f208 <spi_write_buffer_wait+0x20>
    f292:	6801      	ldr	r1, [r0, #0]
    f294:	3201      	adds	r2, #1
    f296:	7e0b      	ldrb	r3, [r1, #24]
    f298:	4213      	tst	r3, r2
    f29a:	d0fc      	beq.n	f296 <spi_write_buffer_wait+0xae>
    f29c:	2300      	movs	r3, #0
    f29e:	e7b3      	b.n	f208 <spi_write_buffer_wait+0x20>
    f2a0:	3a01      	subs	r2, #1
    f2a2:	b296      	uxth	r6, r2
    f2a4:	2700      	movs	r7, #0
    f2a6:	2401      	movs	r4, #1
    f2a8:	2504      	movs	r5, #4
    f2aa:	4b01      	ldr	r3, [pc, #4]	; (f2b0 <spi_write_buffer_wait+0xc8>)
    f2ac:	469c      	mov	ip, r3
    f2ae:	e7c4      	b.n	f23a <spi_write_buffer_wait+0x52>
    f2b0:	0000ffff 	.word	0x0000ffff

0000f2b4 <_spi_interrupt_handler>:
    f2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2b6:	0080      	lsls	r0, r0, #2
    f2b8:	4b70      	ldr	r3, [pc, #448]	; (f47c <_spi_interrupt_handler+0x1c8>)
    f2ba:	58c4      	ldr	r4, [r0, r3]
    f2bc:	6826      	ldr	r6, [r4, #0]
    f2be:	2337      	movs	r3, #55	; 0x37
    f2c0:	5ce7      	ldrb	r7, [r4, r3]
    f2c2:	2236      	movs	r2, #54	; 0x36
    f2c4:	5ca2      	ldrb	r2, [r4, r2]
    f2c6:	4017      	ands	r7, r2
    f2c8:	7e33      	ldrb	r3, [r6, #24]
    f2ca:	7db5      	ldrb	r5, [r6, #22]
    f2cc:	401d      	ands	r5, r3
    f2ce:	07eb      	lsls	r3, r5, #31
    f2d0:	d502      	bpl.n	f2d8 <_spi_interrupt_handler+0x24>
    f2d2:	7963      	ldrb	r3, [r4, #5]
    f2d4:	2b01      	cmp	r3, #1
    f2d6:	d01e      	beq.n	f316 <_spi_interrupt_handler+0x62>
    f2d8:	076b      	lsls	r3, r5, #29
    f2da:	d511      	bpl.n	f300 <_spi_interrupt_handler+0x4c>
    f2dc:	8b73      	ldrh	r3, [r6, #26]
    f2de:	075b      	lsls	r3, r3, #29
    f2e0:	d55a      	bpl.n	f398 <_spi_interrupt_handler+0xe4>
    f2e2:	7a63      	ldrb	r3, [r4, #9]
    f2e4:	2b01      	cmp	r3, #1
    f2e6:	d008      	beq.n	f2fa <_spi_interrupt_handler+0x46>
    f2e8:	221e      	movs	r2, #30
    f2ea:	2338      	movs	r3, #56	; 0x38
    f2ec:	54e2      	strb	r2, [r4, r3]
    f2ee:	3b35      	subs	r3, #53	; 0x35
    f2f0:	7263      	strb	r3, [r4, #9]
    f2f2:	3302      	adds	r3, #2
    f2f4:	7533      	strb	r3, [r6, #20]
    f2f6:	073b      	lsls	r3, r7, #28
    f2f8:	d44a      	bmi.n	f390 <_spi_interrupt_handler+0xdc>
    f2fa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    f2fc:	2304      	movs	r3, #4
    f2fe:	8373      	strh	r3, [r6, #26]
    f300:	07ab      	lsls	r3, r5, #30
    f302:	d503      	bpl.n	f30c <_spi_interrupt_handler+0x58>
    f304:	7963      	ldrb	r3, [r4, #5]
    f306:	2b01      	cmp	r3, #1
    f308:	d100      	bne.n	f30c <_spi_interrupt_handler+0x58>
    f30a:	e097      	b.n	f43c <_spi_interrupt_handler+0x188>
    f30c:	b26d      	sxtb	r5, r5
    f30e:	2d00      	cmp	r5, #0
    f310:	da00      	bge.n	f314 <_spi_interrupt_handler+0x60>
    f312:	e0a9      	b.n	f468 <_spi_interrupt_handler+0x1b4>
    f314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f316:	7a63      	ldrb	r3, [r4, #9]
    f318:	2b00      	cmp	r3, #0
    f31a:	d022      	beq.n	f362 <_spi_interrupt_handler+0xae>
    f31c:	7a63      	ldrb	r3, [r4, #9]
    f31e:	2b00      	cmp	r3, #0
    f320:	d0da      	beq.n	f2d8 <_spi_interrupt_handler+0x24>
    f322:	6821      	ldr	r1, [r4, #0]
    f324:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f326:	7813      	ldrb	r3, [r2, #0]
    f328:	b2db      	uxtb	r3, r3
    f32a:	1c50      	adds	r0, r2, #1
    f32c:	62e0      	str	r0, [r4, #44]	; 0x2c
    f32e:	79a0      	ldrb	r0, [r4, #6]
    f330:	2801      	cmp	r0, #1
    f332:	d027      	beq.n	f384 <_spi_interrupt_handler+0xd0>
    f334:	b29b      	uxth	r3, r3
    f336:	05db      	lsls	r3, r3, #23
    f338:	0ddb      	lsrs	r3, r3, #23
    f33a:	628b      	str	r3, [r1, #40]	; 0x28
    f33c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    f33e:	3b01      	subs	r3, #1
    f340:	b29b      	uxth	r3, r3
    f342:	86a3      	strh	r3, [r4, #52]	; 0x34
    f344:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    f346:	b29b      	uxth	r3, r3
    f348:	2b00      	cmp	r3, #0
    f34a:	d1c5      	bne.n	f2d8 <_spi_interrupt_handler+0x24>
    f34c:	3301      	adds	r3, #1
    f34e:	7533      	strb	r3, [r6, #20]
    f350:	7a63      	ldrb	r3, [r4, #9]
    f352:	2b01      	cmp	r3, #1
    f354:	d1c0      	bne.n	f2d8 <_spi_interrupt_handler+0x24>
    f356:	79e3      	ldrb	r3, [r4, #7]
    f358:	2b00      	cmp	r3, #0
    f35a:	d1bd      	bne.n	f2d8 <_spi_interrupt_handler+0x24>
    f35c:	3302      	adds	r3, #2
    f35e:	75b3      	strb	r3, [r6, #22]
    f360:	e7ba      	b.n	f2d8 <_spi_interrupt_handler+0x24>
    f362:	4b47      	ldr	r3, [pc, #284]	; (f480 <_spi_interrupt_handler+0x1cc>)
    f364:	881b      	ldrh	r3, [r3, #0]
    f366:	62b3      	str	r3, [r6, #40]	; 0x28
    f368:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f36a:	3b01      	subs	r3, #1
    f36c:	b29b      	uxth	r3, r3
    f36e:	8663      	strh	r3, [r4, #50]	; 0x32
    f370:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f372:	b29b      	uxth	r3, r3
    f374:	2b00      	cmp	r3, #0
    f376:	d101      	bne.n	f37c <_spi_interrupt_handler+0xc8>
    f378:	3301      	adds	r3, #1
    f37a:	7533      	strb	r3, [r6, #20]
    f37c:	7963      	ldrb	r3, [r4, #5]
    f37e:	2b01      	cmp	r3, #1
    f380:	d0cc      	beq.n	f31c <_spi_interrupt_handler+0x68>
    f382:	e7a9      	b.n	f2d8 <_spi_interrupt_handler+0x24>
    f384:	7850      	ldrb	r0, [r2, #1]
    f386:	0200      	lsls	r0, r0, #8
    f388:	4303      	orrs	r3, r0
    f38a:	3202      	adds	r2, #2
    f38c:	62e2      	str	r2, [r4, #44]	; 0x2c
    f38e:	e7d2      	b.n	f336 <_spi_interrupt_handler+0x82>
    f390:	0020      	movs	r0, r4
    f392:	69a3      	ldr	r3, [r4, #24]
    f394:	4798      	blx	r3
    f396:	e7b0      	b.n	f2fa <_spi_interrupt_handler+0x46>
    f398:	7a63      	ldrb	r3, [r4, #9]
    f39a:	2b01      	cmp	r3, #1
    f39c:	d028      	beq.n	f3f0 <_spi_interrupt_handler+0x13c>
    f39e:	6823      	ldr	r3, [r4, #0]
    f3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f3a2:	05db      	lsls	r3, r3, #23
    f3a4:	0ddb      	lsrs	r3, r3, #23
    f3a6:	b2da      	uxtb	r2, r3
    f3a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f3aa:	700a      	strb	r2, [r1, #0]
    f3ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f3ae:	1c51      	adds	r1, r2, #1
    f3b0:	62a1      	str	r1, [r4, #40]	; 0x28
    f3b2:	79a1      	ldrb	r1, [r4, #6]
    f3b4:	2901      	cmp	r1, #1
    f3b6:	d034      	beq.n	f422 <_spi_interrupt_handler+0x16e>
    f3b8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f3ba:	3b01      	subs	r3, #1
    f3bc:	b29b      	uxth	r3, r3
    f3be:	8623      	strh	r3, [r4, #48]	; 0x30
    f3c0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f3c2:	b29b      	uxth	r3, r3
    f3c4:	2b00      	cmp	r3, #0
    f3c6:	d000      	beq.n	f3ca <_spi_interrupt_handler+0x116>
    f3c8:	e79a      	b.n	f300 <_spi_interrupt_handler+0x4c>
    f3ca:	2200      	movs	r2, #0
    f3cc:	3338      	adds	r3, #56	; 0x38
    f3ce:	54e2      	strb	r2, [r4, r3]
    f3d0:	3b34      	subs	r3, #52	; 0x34
    f3d2:	7533      	strb	r3, [r6, #20]
    f3d4:	7a63      	ldrb	r3, [r4, #9]
    f3d6:	2b02      	cmp	r3, #2
    f3d8:	d029      	beq.n	f42e <_spi_interrupt_handler+0x17a>
    f3da:	7a63      	ldrb	r3, [r4, #9]
    f3dc:	2b00      	cmp	r3, #0
    f3de:	d000      	beq.n	f3e2 <_spi_interrupt_handler+0x12e>
    f3e0:	e78e      	b.n	f300 <_spi_interrupt_handler+0x4c>
    f3e2:	07bb      	lsls	r3, r7, #30
    f3e4:	d400      	bmi.n	f3e8 <_spi_interrupt_handler+0x134>
    f3e6:	e78b      	b.n	f300 <_spi_interrupt_handler+0x4c>
    f3e8:	0020      	movs	r0, r4
    f3ea:	6923      	ldr	r3, [r4, #16]
    f3ec:	4798      	blx	r3
    f3ee:	e787      	b.n	f300 <_spi_interrupt_handler+0x4c>
    f3f0:	6823      	ldr	r3, [r4, #0]
    f3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f3f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f3f6:	3b01      	subs	r3, #1
    f3f8:	b29b      	uxth	r3, r3
    f3fa:	8663      	strh	r3, [r4, #50]	; 0x32
    f3fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f3fe:	b29b      	uxth	r3, r3
    f400:	2b00      	cmp	r3, #0
    f402:	d000      	beq.n	f406 <_spi_interrupt_handler+0x152>
    f404:	e77c      	b.n	f300 <_spi_interrupt_handler+0x4c>
    f406:	3304      	adds	r3, #4
    f408:	7533      	strb	r3, [r6, #20]
    f40a:	2200      	movs	r2, #0
    f40c:	3334      	adds	r3, #52	; 0x34
    f40e:	54e2      	strb	r2, [r4, r3]
    f410:	3b35      	subs	r3, #53	; 0x35
    f412:	7263      	strb	r3, [r4, #9]
    f414:	07fb      	lsls	r3, r7, #31
    f416:	d400      	bmi.n	f41a <_spi_interrupt_handler+0x166>
    f418:	e772      	b.n	f300 <_spi_interrupt_handler+0x4c>
    f41a:	0020      	movs	r0, r4
    f41c:	68e3      	ldr	r3, [r4, #12]
    f41e:	4798      	blx	r3
    f420:	e76e      	b.n	f300 <_spi_interrupt_handler+0x4c>
    f422:	0a1b      	lsrs	r3, r3, #8
    f424:	7053      	strb	r3, [r2, #1]
    f426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f428:	3301      	adds	r3, #1
    f42a:	62a3      	str	r3, [r4, #40]	; 0x28
    f42c:	e7c4      	b.n	f3b8 <_spi_interrupt_handler+0x104>
    f42e:	077b      	lsls	r3, r7, #29
    f430:	d400      	bmi.n	f434 <_spi_interrupt_handler+0x180>
    f432:	e765      	b.n	f300 <_spi_interrupt_handler+0x4c>
    f434:	0020      	movs	r0, r4
    f436:	6963      	ldr	r3, [r4, #20]
    f438:	4798      	blx	r3
    f43a:	e761      	b.n	f300 <_spi_interrupt_handler+0x4c>
    f43c:	7a63      	ldrb	r3, [r4, #9]
    f43e:	2b01      	cmp	r3, #1
    f440:	d000      	beq.n	f444 <_spi_interrupt_handler+0x190>
    f442:	e763      	b.n	f30c <_spi_interrupt_handler+0x58>
    f444:	79e3      	ldrb	r3, [r4, #7]
    f446:	2b00      	cmp	r3, #0
    f448:	d000      	beq.n	f44c <_spi_interrupt_handler+0x198>
    f44a:	e75f      	b.n	f30c <_spi_interrupt_handler+0x58>
    f44c:	3302      	adds	r3, #2
    f44e:	7533      	strb	r3, [r6, #20]
    f450:	3301      	adds	r3, #1
    f452:	7263      	strb	r3, [r4, #9]
    f454:	2200      	movs	r2, #0
    f456:	3335      	adds	r3, #53	; 0x35
    f458:	54e2      	strb	r2, [r4, r3]
    f45a:	07fb      	lsls	r3, r7, #31
    f45c:	d400      	bmi.n	f460 <_spi_interrupt_handler+0x1ac>
    f45e:	e755      	b.n	f30c <_spi_interrupt_handler+0x58>
    f460:	0020      	movs	r0, r4
    f462:	68e3      	ldr	r3, [r4, #12]
    f464:	4798      	blx	r3
    f466:	e751      	b.n	f30c <_spi_interrupt_handler+0x58>
    f468:	2380      	movs	r3, #128	; 0x80
    f46a:	7533      	strb	r3, [r6, #20]
    f46c:	7633      	strb	r3, [r6, #24]
    f46e:	067b      	lsls	r3, r7, #25
    f470:	d400      	bmi.n	f474 <_spi_interrupt_handler+0x1c0>
    f472:	e74f      	b.n	f314 <_spi_interrupt_handler+0x60>
    f474:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f476:	0020      	movs	r0, r4
    f478:	4798      	blx	r3
    f47a:	e74b      	b.n	f314 <_spi_interrupt_handler+0x60>
    f47c:	20001108 	.word	0x20001108
    f480:	20001120 	.word	0x20001120

0000f484 <usart_init>:
    f484:	b5f0      	push	{r4, r5, r6, r7, lr}
    f486:	46de      	mov	lr, fp
    f488:	4657      	mov	r7, sl
    f48a:	464e      	mov	r6, r9
    f48c:	4645      	mov	r5, r8
    f48e:	b5e0      	push	{r5, r6, r7, lr}
    f490:	b091      	sub	sp, #68	; 0x44
    f492:	0005      	movs	r5, r0
    f494:	000c      	movs	r4, r1
    f496:	0016      	movs	r6, r2
    f498:	6029      	str	r1, [r5, #0]
    f49a:	0008      	movs	r0, r1
    f49c:	4bbc      	ldr	r3, [pc, #752]	; (f790 <usart_init+0x30c>)
    f49e:	4798      	blx	r3
    f4a0:	0002      	movs	r2, r0
    f4a2:	6823      	ldr	r3, [r4, #0]
    f4a4:	2005      	movs	r0, #5
    f4a6:	07db      	lsls	r3, r3, #31
    f4a8:	d506      	bpl.n	f4b8 <usart_init+0x34>
    f4aa:	b011      	add	sp, #68	; 0x44
    f4ac:	bc3c      	pop	{r2, r3, r4, r5}
    f4ae:	4690      	mov	r8, r2
    f4b0:	4699      	mov	r9, r3
    f4b2:	46a2      	mov	sl, r4
    f4b4:	46ab      	mov	fp, r5
    f4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4b8:	6823      	ldr	r3, [r4, #0]
    f4ba:	3017      	adds	r0, #23
    f4bc:	079b      	lsls	r3, r3, #30
    f4be:	d4f4      	bmi.n	f4aa <usart_init+0x26>
    f4c0:	49b4      	ldr	r1, [pc, #720]	; (f794 <usart_init+0x310>)
    f4c2:	6a08      	ldr	r0, [r1, #32]
    f4c4:	1c97      	adds	r7, r2, #2
    f4c6:	2301      	movs	r3, #1
    f4c8:	40bb      	lsls	r3, r7
    f4ca:	4303      	orrs	r3, r0
    f4cc:	620b      	str	r3, [r1, #32]
    f4ce:	a90f      	add	r1, sp, #60	; 0x3c
    f4d0:	272d      	movs	r7, #45	; 0x2d
    f4d2:	5df3      	ldrb	r3, [r6, r7]
    f4d4:	700b      	strb	r3, [r1, #0]
    f4d6:	3214      	adds	r2, #20
    f4d8:	b2d3      	uxtb	r3, r2
    f4da:	9302      	str	r3, [sp, #8]
    f4dc:	0018      	movs	r0, r3
    f4de:	4bae      	ldr	r3, [pc, #696]	; (f798 <usart_init+0x314>)
    f4e0:	4798      	blx	r3
    f4e2:	9802      	ldr	r0, [sp, #8]
    f4e4:	4bad      	ldr	r3, [pc, #692]	; (f79c <usart_init+0x318>)
    f4e6:	4798      	blx	r3
    f4e8:	5df0      	ldrb	r0, [r6, r7]
    f4ea:	2100      	movs	r1, #0
    f4ec:	4bac      	ldr	r3, [pc, #688]	; (f7a0 <usart_init+0x31c>)
    f4ee:	4798      	blx	r3
    f4f0:	7af3      	ldrb	r3, [r6, #11]
    f4f2:	716b      	strb	r3, [r5, #5]
    f4f4:	2324      	movs	r3, #36	; 0x24
    f4f6:	5cf3      	ldrb	r3, [r6, r3]
    f4f8:	71ab      	strb	r3, [r5, #6]
    f4fa:	2325      	movs	r3, #37	; 0x25
    f4fc:	5cf3      	ldrb	r3, [r6, r3]
    f4fe:	71eb      	strb	r3, [r5, #7]
    f500:	7ef3      	ldrb	r3, [r6, #27]
    f502:	722b      	strb	r3, [r5, #8]
    f504:	7f33      	ldrb	r3, [r6, #28]
    f506:	726b      	strb	r3, [r5, #9]
    f508:	682b      	ldr	r3, [r5, #0]
    f50a:	4698      	mov	r8, r3
    f50c:	0018      	movs	r0, r3
    f50e:	4ba0      	ldr	r3, [pc, #640]	; (f790 <usart_init+0x30c>)
    f510:	4798      	blx	r3
    f512:	3014      	adds	r0, #20
    f514:	2200      	movs	r2, #0
    f516:	230e      	movs	r3, #14
    f518:	a906      	add	r1, sp, #24
    f51a:	468c      	mov	ip, r1
    f51c:	4463      	add	r3, ip
    f51e:	801a      	strh	r2, [r3, #0]
    f520:	8a32      	ldrh	r2, [r6, #16]
    f522:	9202      	str	r2, [sp, #8]
    f524:	2380      	movs	r3, #128	; 0x80
    f526:	01db      	lsls	r3, r3, #7
    f528:	429a      	cmp	r2, r3
    f52a:	d100      	bne.n	f52e <usart_init+0xaa>
    f52c:	e09e      	b.n	f66c <usart_init+0x1e8>
    f52e:	d90f      	bls.n	f550 <usart_init+0xcc>
    f530:	23c0      	movs	r3, #192	; 0xc0
    f532:	01db      	lsls	r3, r3, #7
    f534:	9a02      	ldr	r2, [sp, #8]
    f536:	429a      	cmp	r2, r3
    f538:	d100      	bne.n	f53c <usart_init+0xb8>
    f53a:	e092      	b.n	f662 <usart_init+0x1de>
    f53c:	2380      	movs	r3, #128	; 0x80
    f53e:	021b      	lsls	r3, r3, #8
    f540:	429a      	cmp	r2, r3
    f542:	d000      	beq.n	f546 <usart_init+0xc2>
    f544:	e11f      	b.n	f786 <usart_init+0x302>
    f546:	2303      	movs	r3, #3
    f548:	9306      	str	r3, [sp, #24]
    f54a:	2300      	movs	r3, #0
    f54c:	9307      	str	r3, [sp, #28]
    f54e:	e008      	b.n	f562 <usart_init+0xde>
    f550:	2380      	movs	r3, #128	; 0x80
    f552:	019b      	lsls	r3, r3, #6
    f554:	429a      	cmp	r2, r3
    f556:	d000      	beq.n	f55a <usart_init+0xd6>
    f558:	e115      	b.n	f786 <usart_init+0x302>
    f55a:	2310      	movs	r3, #16
    f55c:	9306      	str	r3, [sp, #24]
    f55e:	3b0f      	subs	r3, #15
    f560:	9307      	str	r3, [sp, #28]
    f562:	6833      	ldr	r3, [r6, #0]
    f564:	9305      	str	r3, [sp, #20]
    f566:	68f3      	ldr	r3, [r6, #12]
    f568:	9303      	str	r3, [sp, #12]
    f56a:	6973      	ldr	r3, [r6, #20]
    f56c:	9304      	str	r3, [sp, #16]
    f56e:	7e33      	ldrb	r3, [r6, #24]
    f570:	469b      	mov	fp, r3
    f572:	2326      	movs	r3, #38	; 0x26
    f574:	5cf3      	ldrb	r3, [r6, r3]
    f576:	469a      	mov	sl, r3
    f578:	6873      	ldr	r3, [r6, #4]
    f57a:	4699      	mov	r9, r3
    f57c:	2b00      	cmp	r3, #0
    f57e:	d100      	bne.n	f582 <usart_init+0xfe>
    f580:	e0a0      	b.n	f6c4 <usart_init+0x240>
    f582:	2380      	movs	r3, #128	; 0x80
    f584:	055b      	lsls	r3, r3, #21
    f586:	4599      	cmp	r9, r3
    f588:	d100      	bne.n	f58c <usart_init+0x108>
    f58a:	e084      	b.n	f696 <usart_init+0x212>
    f58c:	7e73      	ldrb	r3, [r6, #25]
    f58e:	2b00      	cmp	r3, #0
    f590:	d002      	beq.n	f598 <usart_init+0x114>
    f592:	7eb3      	ldrb	r3, [r6, #26]
    f594:	4642      	mov	r2, r8
    f596:	7393      	strb	r3, [r2, #14]
    f598:	682a      	ldr	r2, [r5, #0]
    f59a:	9f02      	ldr	r7, [sp, #8]
    f59c:	69d3      	ldr	r3, [r2, #28]
    f59e:	2b00      	cmp	r3, #0
    f5a0:	d1fc      	bne.n	f59c <usart_init+0x118>
    f5a2:	330e      	adds	r3, #14
    f5a4:	aa06      	add	r2, sp, #24
    f5a6:	4694      	mov	ip, r2
    f5a8:	4463      	add	r3, ip
    f5aa:	881b      	ldrh	r3, [r3, #0]
    f5ac:	4642      	mov	r2, r8
    f5ae:	8193      	strh	r3, [r2, #12]
    f5b0:	9b05      	ldr	r3, [sp, #20]
    f5b2:	9a03      	ldr	r2, [sp, #12]
    f5b4:	4313      	orrs	r3, r2
    f5b6:	9a04      	ldr	r2, [sp, #16]
    f5b8:	4313      	orrs	r3, r2
    f5ba:	464a      	mov	r2, r9
    f5bc:	4313      	orrs	r3, r2
    f5be:	431f      	orrs	r7, r3
    f5c0:	465b      	mov	r3, fp
    f5c2:	021b      	lsls	r3, r3, #8
    f5c4:	431f      	orrs	r7, r3
    f5c6:	4653      	mov	r3, sl
    f5c8:	075b      	lsls	r3, r3, #29
    f5ca:	431f      	orrs	r7, r3
    f5cc:	2327      	movs	r3, #39	; 0x27
    f5ce:	5cf3      	ldrb	r3, [r6, r3]
    f5d0:	2b00      	cmp	r3, #0
    f5d2:	d101      	bne.n	f5d8 <usart_init+0x154>
    f5d4:	3304      	adds	r3, #4
    f5d6:	431f      	orrs	r7, r3
    f5d8:	7e73      	ldrb	r3, [r6, #25]
    f5da:	029b      	lsls	r3, r3, #10
    f5dc:	7f32      	ldrb	r2, [r6, #28]
    f5de:	0252      	lsls	r2, r2, #9
    f5e0:	4313      	orrs	r3, r2
    f5e2:	7f72      	ldrb	r2, [r6, #29]
    f5e4:	0212      	lsls	r2, r2, #8
    f5e6:	4313      	orrs	r3, r2
    f5e8:	2224      	movs	r2, #36	; 0x24
    f5ea:	5cb2      	ldrb	r2, [r6, r2]
    f5ec:	0452      	lsls	r2, r2, #17
    f5ee:	4313      	orrs	r3, r2
    f5f0:	2225      	movs	r2, #37	; 0x25
    f5f2:	5cb2      	ldrb	r2, [r6, r2]
    f5f4:	0412      	lsls	r2, r2, #16
    f5f6:	4313      	orrs	r3, r2
    f5f8:	7ab1      	ldrb	r1, [r6, #10]
    f5fa:	7af2      	ldrb	r2, [r6, #11]
    f5fc:	4311      	orrs	r1, r2
    f5fe:	4319      	orrs	r1, r3
    f600:	8933      	ldrh	r3, [r6, #8]
    f602:	2bff      	cmp	r3, #255	; 0xff
    f604:	d100      	bne.n	f608 <usart_init+0x184>
    f606:	e081      	b.n	f70c <usart_init+0x288>
    f608:	2280      	movs	r2, #128	; 0x80
    f60a:	0452      	lsls	r2, r2, #17
    f60c:	4317      	orrs	r7, r2
    f60e:	4319      	orrs	r1, r3
    f610:	232c      	movs	r3, #44	; 0x2c
    f612:	5cf3      	ldrb	r3, [r6, r3]
    f614:	2b00      	cmp	r3, #0
    f616:	d103      	bne.n	f620 <usart_init+0x19c>
    f618:	4b62      	ldr	r3, [pc, #392]	; (f7a4 <usart_init+0x320>)
    f61a:	789b      	ldrb	r3, [r3, #2]
    f61c:	079b      	lsls	r3, r3, #30
    f61e:	d501      	bpl.n	f624 <usart_init+0x1a0>
    f620:	2380      	movs	r3, #128	; 0x80
    f622:	431f      	orrs	r7, r3
    f624:	682a      	ldr	r2, [r5, #0]
    f626:	69d3      	ldr	r3, [r2, #28]
    f628:	2b00      	cmp	r3, #0
    f62a:	d1fc      	bne.n	f626 <usart_init+0x1a2>
    f62c:	4643      	mov	r3, r8
    f62e:	6059      	str	r1, [r3, #4]
    f630:	682a      	ldr	r2, [r5, #0]
    f632:	69d3      	ldr	r3, [r2, #28]
    f634:	2b00      	cmp	r3, #0
    f636:	d1fc      	bne.n	f632 <usart_init+0x1ae>
    f638:	4643      	mov	r3, r8
    f63a:	601f      	str	r7, [r3, #0]
    f63c:	ab0e      	add	r3, sp, #56	; 0x38
    f63e:	2280      	movs	r2, #128	; 0x80
    f640:	701a      	strb	r2, [r3, #0]
    f642:	2200      	movs	r2, #0
    f644:	705a      	strb	r2, [r3, #1]
    f646:	70da      	strb	r2, [r3, #3]
    f648:	709a      	strb	r2, [r3, #2]
    f64a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    f64c:	930a      	str	r3, [sp, #40]	; 0x28
    f64e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    f650:	930b      	str	r3, [sp, #44]	; 0x2c
    f652:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    f654:	930c      	str	r3, [sp, #48]	; 0x30
    f656:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    f658:	9302      	str	r3, [sp, #8]
    f65a:	930d      	str	r3, [sp, #52]	; 0x34
    f65c:	2700      	movs	r7, #0
    f65e:	ae0a      	add	r6, sp, #40	; 0x28
    f660:	e063      	b.n	f72a <usart_init+0x2a6>
    f662:	2308      	movs	r3, #8
    f664:	9306      	str	r3, [sp, #24]
    f666:	3b07      	subs	r3, #7
    f668:	9307      	str	r3, [sp, #28]
    f66a:	e77a      	b.n	f562 <usart_init+0xde>
    f66c:	6833      	ldr	r3, [r6, #0]
    f66e:	9305      	str	r3, [sp, #20]
    f670:	68f3      	ldr	r3, [r6, #12]
    f672:	9303      	str	r3, [sp, #12]
    f674:	6973      	ldr	r3, [r6, #20]
    f676:	9304      	str	r3, [sp, #16]
    f678:	7e33      	ldrb	r3, [r6, #24]
    f67a:	469b      	mov	fp, r3
    f67c:	2326      	movs	r3, #38	; 0x26
    f67e:	5cf3      	ldrb	r3, [r6, r3]
    f680:	469a      	mov	sl, r3
    f682:	6873      	ldr	r3, [r6, #4]
    f684:	4699      	mov	r9, r3
    f686:	2b00      	cmp	r3, #0
    f688:	d018      	beq.n	f6bc <usart_init+0x238>
    f68a:	2380      	movs	r3, #128	; 0x80
    f68c:	055b      	lsls	r3, r3, #21
    f68e:	4599      	cmp	r9, r3
    f690:	d001      	beq.n	f696 <usart_init+0x212>
    f692:	2000      	movs	r0, #0
    f694:	e025      	b.n	f6e2 <usart_init+0x25e>
    f696:	2327      	movs	r3, #39	; 0x27
    f698:	5cf3      	ldrb	r3, [r6, r3]
    f69a:	2b00      	cmp	r3, #0
    f69c:	d000      	beq.n	f6a0 <usart_init+0x21c>
    f69e:	e775      	b.n	f58c <usart_init+0x108>
    f6a0:	6a33      	ldr	r3, [r6, #32]
    f6a2:	001f      	movs	r7, r3
    f6a4:	b2c0      	uxtb	r0, r0
    f6a6:	4b40      	ldr	r3, [pc, #256]	; (f7a8 <usart_init+0x324>)
    f6a8:	4798      	blx	r3
    f6aa:	0001      	movs	r1, r0
    f6ac:	220e      	movs	r2, #14
    f6ae:	ab06      	add	r3, sp, #24
    f6b0:	469c      	mov	ip, r3
    f6b2:	4462      	add	r2, ip
    f6b4:	0038      	movs	r0, r7
    f6b6:	4b3d      	ldr	r3, [pc, #244]	; (f7ac <usart_init+0x328>)
    f6b8:	4798      	blx	r3
    f6ba:	e012      	b.n	f6e2 <usart_init+0x25e>
    f6bc:	2308      	movs	r3, #8
    f6be:	9306      	str	r3, [sp, #24]
    f6c0:	2300      	movs	r3, #0
    f6c2:	9307      	str	r3, [sp, #28]
    f6c4:	2327      	movs	r3, #39	; 0x27
    f6c6:	5cf3      	ldrb	r3, [r6, r3]
    f6c8:	2b00      	cmp	r3, #0
    f6ca:	d00e      	beq.n	f6ea <usart_init+0x266>
    f6cc:	9b06      	ldr	r3, [sp, #24]
    f6ce:	9300      	str	r3, [sp, #0]
    f6d0:	9b07      	ldr	r3, [sp, #28]
    f6d2:	220e      	movs	r2, #14
    f6d4:	a906      	add	r1, sp, #24
    f6d6:	468c      	mov	ip, r1
    f6d8:	4462      	add	r2, ip
    f6da:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f6dc:	6a30      	ldr	r0, [r6, #32]
    f6de:	4f34      	ldr	r7, [pc, #208]	; (f7b0 <usart_init+0x32c>)
    f6e0:	47b8      	blx	r7
    f6e2:	2800      	cmp	r0, #0
    f6e4:	d000      	beq.n	f6e8 <usart_init+0x264>
    f6e6:	e6e0      	b.n	f4aa <usart_init+0x26>
    f6e8:	e750      	b.n	f58c <usart_init+0x108>
    f6ea:	6a33      	ldr	r3, [r6, #32]
    f6ec:	001f      	movs	r7, r3
    f6ee:	b2c0      	uxtb	r0, r0
    f6f0:	4b2d      	ldr	r3, [pc, #180]	; (f7a8 <usart_init+0x324>)
    f6f2:	4798      	blx	r3
    f6f4:	0001      	movs	r1, r0
    f6f6:	9b06      	ldr	r3, [sp, #24]
    f6f8:	9300      	str	r3, [sp, #0]
    f6fa:	9b07      	ldr	r3, [sp, #28]
    f6fc:	220e      	movs	r2, #14
    f6fe:	a806      	add	r0, sp, #24
    f700:	4684      	mov	ip, r0
    f702:	4462      	add	r2, ip
    f704:	0038      	movs	r0, r7
    f706:	4f2a      	ldr	r7, [pc, #168]	; (f7b0 <usart_init+0x32c>)
    f708:	47b8      	blx	r7
    f70a:	e7ea      	b.n	f6e2 <usart_init+0x25e>
    f70c:	7ef3      	ldrb	r3, [r6, #27]
    f70e:	2b00      	cmp	r3, #0
    f710:	d100      	bne.n	f714 <usart_init+0x290>
    f712:	e77d      	b.n	f610 <usart_init+0x18c>
    f714:	2380      	movs	r3, #128	; 0x80
    f716:	04db      	lsls	r3, r3, #19
    f718:	431f      	orrs	r7, r3
    f71a:	e779      	b.n	f610 <usart_init+0x18c>
    f71c:	0020      	movs	r0, r4
    f71e:	4b25      	ldr	r3, [pc, #148]	; (f7b4 <usart_init+0x330>)
    f720:	4798      	blx	r3
    f722:	e007      	b.n	f734 <usart_init+0x2b0>
    f724:	3701      	adds	r7, #1
    f726:	2f04      	cmp	r7, #4
    f728:	d00d      	beq.n	f746 <usart_init+0x2c2>
    f72a:	b2f9      	uxtb	r1, r7
    f72c:	00bb      	lsls	r3, r7, #2
    f72e:	5998      	ldr	r0, [r3, r6]
    f730:	2800      	cmp	r0, #0
    f732:	d0f3      	beq.n	f71c <usart_init+0x298>
    f734:	1c43      	adds	r3, r0, #1
    f736:	d0f5      	beq.n	f724 <usart_init+0x2a0>
    f738:	a90e      	add	r1, sp, #56	; 0x38
    f73a:	7008      	strb	r0, [r1, #0]
    f73c:	0c00      	lsrs	r0, r0, #16
    f73e:	b2c0      	uxtb	r0, r0
    f740:	4b1d      	ldr	r3, [pc, #116]	; (f7b8 <usart_init+0x334>)
    f742:	4798      	blx	r3
    f744:	e7ee      	b.n	f724 <usart_init+0x2a0>
    f746:	2300      	movs	r3, #0
    f748:	60eb      	str	r3, [r5, #12]
    f74a:	612b      	str	r3, [r5, #16]
    f74c:	616b      	str	r3, [r5, #20]
    f74e:	61ab      	str	r3, [r5, #24]
    f750:	61eb      	str	r3, [r5, #28]
    f752:	622b      	str	r3, [r5, #32]
    f754:	62ab      	str	r3, [r5, #40]	; 0x28
    f756:	626b      	str	r3, [r5, #36]	; 0x24
    f758:	2200      	movs	r2, #0
    f75a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    f75c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    f75e:	3330      	adds	r3, #48	; 0x30
    f760:	54ea      	strb	r2, [r5, r3]
    f762:	3301      	adds	r3, #1
    f764:	54ea      	strb	r2, [r5, r3]
    f766:	3301      	adds	r3, #1
    f768:	54ea      	strb	r2, [r5, r3]
    f76a:	3301      	adds	r3, #1
    f76c:	54ea      	strb	r2, [r5, r3]
    f76e:	6828      	ldr	r0, [r5, #0]
    f770:	4b07      	ldr	r3, [pc, #28]	; (f790 <usart_init+0x30c>)
    f772:	4798      	blx	r3
    f774:	0004      	movs	r4, r0
    f776:	4911      	ldr	r1, [pc, #68]	; (f7bc <usart_init+0x338>)
    f778:	4b11      	ldr	r3, [pc, #68]	; (f7c0 <usart_init+0x33c>)
    f77a:	4798      	blx	r3
    f77c:	00a4      	lsls	r4, r4, #2
    f77e:	4b11      	ldr	r3, [pc, #68]	; (f7c4 <usart_init+0x340>)
    f780:	50e5      	str	r5, [r4, r3]
    f782:	2000      	movs	r0, #0
    f784:	e691      	b.n	f4aa <usart_init+0x26>
    f786:	2310      	movs	r3, #16
    f788:	9306      	str	r3, [sp, #24]
    f78a:	2300      	movs	r3, #0
    f78c:	9307      	str	r3, [sp, #28]
    f78e:	e6e8      	b.n	f562 <usart_init+0xde>
    f790:	0000ec89 	.word	0x0000ec89
    f794:	40000400 	.word	0x40000400
    f798:	00010041 	.word	0x00010041
    f79c:	0000ffb5 	.word	0x0000ffb5
    f7a0:	0000eac5 	.word	0x0000eac5
    f7a4:	41002000 	.word	0x41002000
    f7a8:	0001005d 	.word	0x0001005d
    f7ac:	0000ea07 	.word	0x0000ea07
    f7b0:	0000ea31 	.word	0x0000ea31
    f7b4:	0000eb11 	.word	0x0000eb11
    f7b8:	00010139 	.word	0x00010139
    f7bc:	0000f865 	.word	0x0000f865
    f7c0:	0000ecc5 	.word	0x0000ecc5
    f7c4:	20001108 	.word	0x20001108

0000f7c8 <usart_write_wait>:
    f7c8:	79c2      	ldrb	r2, [r0, #7]
    f7ca:	231c      	movs	r3, #28
    f7cc:	2a00      	cmp	r2, #0
    f7ce:	d101      	bne.n	f7d4 <usart_write_wait+0xc>
    f7d0:	0018      	movs	r0, r3
    f7d2:	4770      	bx	lr
    f7d4:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    f7d6:	b292      	uxth	r2, r2
    f7d8:	3b17      	subs	r3, #23
    f7da:	2a00      	cmp	r2, #0
    f7dc:	d1f8      	bne.n	f7d0 <usart_write_wait+0x8>
    f7de:	6803      	ldr	r3, [r0, #0]
    f7e0:	69da      	ldr	r2, [r3, #28]
    f7e2:	2a00      	cmp	r2, #0
    f7e4:	d1fc      	bne.n	f7e0 <usart_write_wait+0x18>
    f7e6:	8519      	strh	r1, [r3, #40]	; 0x28
    f7e8:	2102      	movs	r1, #2
    f7ea:	7e1a      	ldrb	r2, [r3, #24]
    f7ec:	420a      	tst	r2, r1
    f7ee:	d0fc      	beq.n	f7ea <usart_write_wait+0x22>
    f7f0:	2300      	movs	r3, #0
    f7f2:	e7ed      	b.n	f7d0 <usart_write_wait+0x8>

0000f7f4 <usart_read_wait>:
    f7f4:	7982      	ldrb	r2, [r0, #6]
    f7f6:	231c      	movs	r3, #28
    f7f8:	2a00      	cmp	r2, #0
    f7fa:	d101      	bne.n	f800 <usart_read_wait+0xc>
    f7fc:	0018      	movs	r0, r3
    f7fe:	4770      	bx	lr
    f800:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    f802:	b292      	uxth	r2, r2
    f804:	3b17      	subs	r3, #23
    f806:	2a00      	cmp	r2, #0
    f808:	d1f8      	bne.n	f7fc <usart_read_wait+0x8>
    f80a:	6802      	ldr	r2, [r0, #0]
    f80c:	7e10      	ldrb	r0, [r2, #24]
    f80e:	0740      	lsls	r0, r0, #29
    f810:	d5f4      	bpl.n	f7fc <usart_read_wait+0x8>
    f812:	69d3      	ldr	r3, [r2, #28]
    f814:	2b00      	cmp	r3, #0
    f816:	d1fc      	bne.n	f812 <usart_read_wait+0x1e>
    f818:	8b53      	ldrh	r3, [r2, #26]
    f81a:	b2db      	uxtb	r3, r3
    f81c:	0698      	lsls	r0, r3, #26
    f81e:	d01d      	beq.n	f85c <usart_read_wait+0x68>
    f820:	0798      	lsls	r0, r3, #30
    f822:	d503      	bpl.n	f82c <usart_read_wait+0x38>
    f824:	2302      	movs	r3, #2
    f826:	8353      	strh	r3, [r2, #26]
    f828:	3318      	adds	r3, #24
    f82a:	e7e7      	b.n	f7fc <usart_read_wait+0x8>
    f82c:	0758      	lsls	r0, r3, #29
    f82e:	d503      	bpl.n	f838 <usart_read_wait+0x44>
    f830:	2304      	movs	r3, #4
    f832:	8353      	strh	r3, [r2, #26]
    f834:	331a      	adds	r3, #26
    f836:	e7e1      	b.n	f7fc <usart_read_wait+0x8>
    f838:	07d8      	lsls	r0, r3, #31
    f83a:	d503      	bpl.n	f844 <usart_read_wait+0x50>
    f83c:	2301      	movs	r3, #1
    f83e:	8353      	strh	r3, [r2, #26]
    f840:	3312      	adds	r3, #18
    f842:	e7db      	b.n	f7fc <usart_read_wait+0x8>
    f844:	06d8      	lsls	r0, r3, #27
    f846:	d503      	bpl.n	f850 <usart_read_wait+0x5c>
    f848:	2310      	movs	r3, #16
    f84a:	8353      	strh	r3, [r2, #26]
    f84c:	3332      	adds	r3, #50	; 0x32
    f84e:	e7d5      	b.n	f7fc <usart_read_wait+0x8>
    f850:	069b      	lsls	r3, r3, #26
    f852:	d503      	bpl.n	f85c <usart_read_wait+0x68>
    f854:	2320      	movs	r3, #32
    f856:	8353      	strh	r3, [r2, #26]
    f858:	3321      	adds	r3, #33	; 0x21
    f85a:	e7cf      	b.n	f7fc <usart_read_wait+0x8>
    f85c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    f85e:	800b      	strh	r3, [r1, #0]
    f860:	2300      	movs	r3, #0
    f862:	e7cb      	b.n	f7fc <usart_read_wait+0x8>

0000f864 <_usart_interrupt_handler>:
    f864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f866:	0080      	lsls	r0, r0, #2
    f868:	4b62      	ldr	r3, [pc, #392]	; (f9f4 <_usart_interrupt_handler+0x190>)
    f86a:	58c5      	ldr	r5, [r0, r3]
    f86c:	682c      	ldr	r4, [r5, #0]
    f86e:	69e3      	ldr	r3, [r4, #28]
    f870:	2b00      	cmp	r3, #0
    f872:	d1fc      	bne.n	f86e <_usart_interrupt_handler+0xa>
    f874:	7e23      	ldrb	r3, [r4, #24]
    f876:	7da6      	ldrb	r6, [r4, #22]
    f878:	401e      	ands	r6, r3
    f87a:	2330      	movs	r3, #48	; 0x30
    f87c:	5ceb      	ldrb	r3, [r5, r3]
    f87e:	2231      	movs	r2, #49	; 0x31
    f880:	5caf      	ldrb	r7, [r5, r2]
    f882:	401f      	ands	r7, r3
    f884:	07f3      	lsls	r3, r6, #31
    f886:	d522      	bpl.n	f8ce <_usart_interrupt_handler+0x6a>
    f888:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    f88a:	b29b      	uxth	r3, r3
    f88c:	2b00      	cmp	r3, #0
    f88e:	d01c      	beq.n	f8ca <_usart_interrupt_handler+0x66>
    f890:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    f892:	7813      	ldrb	r3, [r2, #0]
    f894:	b2db      	uxtb	r3, r3
    f896:	1c51      	adds	r1, r2, #1
    f898:	62a9      	str	r1, [r5, #40]	; 0x28
    f89a:	7969      	ldrb	r1, [r5, #5]
    f89c:	2901      	cmp	r1, #1
    f89e:	d00e      	beq.n	f8be <_usart_interrupt_handler+0x5a>
    f8a0:	b29b      	uxth	r3, r3
    f8a2:	05db      	lsls	r3, r3, #23
    f8a4:	0ddb      	lsrs	r3, r3, #23
    f8a6:	8523      	strh	r3, [r4, #40]	; 0x28
    f8a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    f8aa:	3b01      	subs	r3, #1
    f8ac:	b29b      	uxth	r3, r3
    f8ae:	85eb      	strh	r3, [r5, #46]	; 0x2e
    f8b0:	2b00      	cmp	r3, #0
    f8b2:	d10c      	bne.n	f8ce <_usart_interrupt_handler+0x6a>
    f8b4:	3301      	adds	r3, #1
    f8b6:	7523      	strb	r3, [r4, #20]
    f8b8:	3301      	adds	r3, #1
    f8ba:	75a3      	strb	r3, [r4, #22]
    f8bc:	e007      	b.n	f8ce <_usart_interrupt_handler+0x6a>
    f8be:	7851      	ldrb	r1, [r2, #1]
    f8c0:	0209      	lsls	r1, r1, #8
    f8c2:	430b      	orrs	r3, r1
    f8c4:	3202      	adds	r2, #2
    f8c6:	62aa      	str	r2, [r5, #40]	; 0x28
    f8c8:	e7eb      	b.n	f8a2 <_usart_interrupt_handler+0x3e>
    f8ca:	2301      	movs	r3, #1
    f8cc:	7523      	strb	r3, [r4, #20]
    f8ce:	07b3      	lsls	r3, r6, #30
    f8d0:	d506      	bpl.n	f8e0 <_usart_interrupt_handler+0x7c>
    f8d2:	2302      	movs	r3, #2
    f8d4:	7523      	strb	r3, [r4, #20]
    f8d6:	2200      	movs	r2, #0
    f8d8:	3331      	adds	r3, #49	; 0x31
    f8da:	54ea      	strb	r2, [r5, r3]
    f8dc:	07fb      	lsls	r3, r7, #31
    f8de:	d41a      	bmi.n	f916 <_usart_interrupt_handler+0xb2>
    f8e0:	0773      	lsls	r3, r6, #29
    f8e2:	d565      	bpl.n	f9b0 <_usart_interrupt_handler+0x14c>
    f8e4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    f8e6:	b29b      	uxth	r3, r3
    f8e8:	2b00      	cmp	r3, #0
    f8ea:	d05f      	beq.n	f9ac <_usart_interrupt_handler+0x148>
    f8ec:	8b63      	ldrh	r3, [r4, #26]
    f8ee:	b2db      	uxtb	r3, r3
    f8f0:	071a      	lsls	r2, r3, #28
    f8f2:	d414      	bmi.n	f91e <_usart_interrupt_handler+0xba>
    f8f4:	223f      	movs	r2, #63	; 0x3f
    f8f6:	4013      	ands	r3, r2
    f8f8:	2b00      	cmp	r3, #0
    f8fa:	d034      	beq.n	f966 <_usart_interrupt_handler+0x102>
    f8fc:	079a      	lsls	r2, r3, #30
    f8fe:	d511      	bpl.n	f924 <_usart_interrupt_handler+0xc0>
    f900:	221a      	movs	r2, #26
    f902:	2332      	movs	r3, #50	; 0x32
    f904:	54ea      	strb	r2, [r5, r3]
    f906:	3b30      	subs	r3, #48	; 0x30
    f908:	8363      	strh	r3, [r4, #26]
    f90a:	077b      	lsls	r3, r7, #29
    f90c:	d550      	bpl.n	f9b0 <_usart_interrupt_handler+0x14c>
    f90e:	0028      	movs	r0, r5
    f910:	696b      	ldr	r3, [r5, #20]
    f912:	4798      	blx	r3
    f914:	e04c      	b.n	f9b0 <_usart_interrupt_handler+0x14c>
    f916:	0028      	movs	r0, r5
    f918:	68eb      	ldr	r3, [r5, #12]
    f91a:	4798      	blx	r3
    f91c:	e7e0      	b.n	f8e0 <_usart_interrupt_handler+0x7c>
    f91e:	2237      	movs	r2, #55	; 0x37
    f920:	4013      	ands	r3, r2
    f922:	e7e9      	b.n	f8f8 <_usart_interrupt_handler+0x94>
    f924:	075a      	lsls	r2, r3, #29
    f926:	d505      	bpl.n	f934 <_usart_interrupt_handler+0xd0>
    f928:	221e      	movs	r2, #30
    f92a:	2332      	movs	r3, #50	; 0x32
    f92c:	54ea      	strb	r2, [r5, r3]
    f92e:	3b2e      	subs	r3, #46	; 0x2e
    f930:	8363      	strh	r3, [r4, #26]
    f932:	e7ea      	b.n	f90a <_usart_interrupt_handler+0xa6>
    f934:	07da      	lsls	r2, r3, #31
    f936:	d505      	bpl.n	f944 <_usart_interrupt_handler+0xe0>
    f938:	2213      	movs	r2, #19
    f93a:	2332      	movs	r3, #50	; 0x32
    f93c:	54ea      	strb	r2, [r5, r3]
    f93e:	3b31      	subs	r3, #49	; 0x31
    f940:	8363      	strh	r3, [r4, #26]
    f942:	e7e2      	b.n	f90a <_usart_interrupt_handler+0xa6>
    f944:	06da      	lsls	r2, r3, #27
    f946:	d505      	bpl.n	f954 <_usart_interrupt_handler+0xf0>
    f948:	2242      	movs	r2, #66	; 0x42
    f94a:	2332      	movs	r3, #50	; 0x32
    f94c:	54ea      	strb	r2, [r5, r3]
    f94e:	3b22      	subs	r3, #34	; 0x22
    f950:	8363      	strh	r3, [r4, #26]
    f952:	e7da      	b.n	f90a <_usart_interrupt_handler+0xa6>
    f954:	2220      	movs	r2, #32
    f956:	421a      	tst	r2, r3
    f958:	d0d7      	beq.n	f90a <_usart_interrupt_handler+0xa6>
    f95a:	3221      	adds	r2, #33	; 0x21
    f95c:	2332      	movs	r3, #50	; 0x32
    f95e:	54ea      	strb	r2, [r5, r3]
    f960:	3b12      	subs	r3, #18
    f962:	8363      	strh	r3, [r4, #26]
    f964:	e7d1      	b.n	f90a <_usart_interrupt_handler+0xa6>
    f966:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    f968:	05db      	lsls	r3, r3, #23
    f96a:	0ddb      	lsrs	r3, r3, #23
    f96c:	b2da      	uxtb	r2, r3
    f96e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f970:	700a      	strb	r2, [r1, #0]
    f972:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f974:	1c51      	adds	r1, r2, #1
    f976:	6269      	str	r1, [r5, #36]	; 0x24
    f978:	7969      	ldrb	r1, [r5, #5]
    f97a:	2901      	cmp	r1, #1
    f97c:	d010      	beq.n	f9a0 <_usart_interrupt_handler+0x13c>
    f97e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    f980:	3b01      	subs	r3, #1
    f982:	b29b      	uxth	r3, r3
    f984:	85ab      	strh	r3, [r5, #44]	; 0x2c
    f986:	2b00      	cmp	r3, #0
    f988:	d112      	bne.n	f9b0 <_usart_interrupt_handler+0x14c>
    f98a:	3304      	adds	r3, #4
    f98c:	7523      	strb	r3, [r4, #20]
    f98e:	2200      	movs	r2, #0
    f990:	332e      	adds	r3, #46	; 0x2e
    f992:	54ea      	strb	r2, [r5, r3]
    f994:	07bb      	lsls	r3, r7, #30
    f996:	d50b      	bpl.n	f9b0 <_usart_interrupt_handler+0x14c>
    f998:	0028      	movs	r0, r5
    f99a:	692b      	ldr	r3, [r5, #16]
    f99c:	4798      	blx	r3
    f99e:	e007      	b.n	f9b0 <_usart_interrupt_handler+0x14c>
    f9a0:	0a1b      	lsrs	r3, r3, #8
    f9a2:	7053      	strb	r3, [r2, #1]
    f9a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f9a6:	3301      	adds	r3, #1
    f9a8:	626b      	str	r3, [r5, #36]	; 0x24
    f9aa:	e7e8      	b.n	f97e <_usart_interrupt_handler+0x11a>
    f9ac:	2304      	movs	r3, #4
    f9ae:	7523      	strb	r3, [r4, #20]
    f9b0:	06f3      	lsls	r3, r6, #27
    f9b2:	d504      	bpl.n	f9be <_usart_interrupt_handler+0x15a>
    f9b4:	2310      	movs	r3, #16
    f9b6:	7523      	strb	r3, [r4, #20]
    f9b8:	7623      	strb	r3, [r4, #24]
    f9ba:	06fb      	lsls	r3, r7, #27
    f9bc:	d40e      	bmi.n	f9dc <_usart_interrupt_handler+0x178>
    f9be:	06b3      	lsls	r3, r6, #26
    f9c0:	d504      	bpl.n	f9cc <_usart_interrupt_handler+0x168>
    f9c2:	2320      	movs	r3, #32
    f9c4:	7523      	strb	r3, [r4, #20]
    f9c6:	7623      	strb	r3, [r4, #24]
    f9c8:	073b      	lsls	r3, r7, #28
    f9ca:	d40b      	bmi.n	f9e4 <_usart_interrupt_handler+0x180>
    f9cc:	0733      	lsls	r3, r6, #28
    f9ce:	d504      	bpl.n	f9da <_usart_interrupt_handler+0x176>
    f9d0:	2308      	movs	r3, #8
    f9d2:	7523      	strb	r3, [r4, #20]
    f9d4:	7623      	strb	r3, [r4, #24]
    f9d6:	06bb      	lsls	r3, r7, #26
    f9d8:	d408      	bmi.n	f9ec <_usart_interrupt_handler+0x188>
    f9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9dc:	0028      	movs	r0, r5
    f9de:	69eb      	ldr	r3, [r5, #28]
    f9e0:	4798      	blx	r3
    f9e2:	e7ec      	b.n	f9be <_usart_interrupt_handler+0x15a>
    f9e4:	0028      	movs	r0, r5
    f9e6:	69ab      	ldr	r3, [r5, #24]
    f9e8:	4798      	blx	r3
    f9ea:	e7ef      	b.n	f9cc <_usart_interrupt_handler+0x168>
    f9ec:	6a2b      	ldr	r3, [r5, #32]
    f9ee:	0028      	movs	r0, r5
    f9f0:	4798      	blx	r3
    f9f2:	e7f2      	b.n	f9da <_usart_interrupt_handler+0x176>
    f9f4:	20001108 	.word	0x20001108

0000f9f8 <system_clock_source_get_hz>:
    f9f8:	b510      	push	{r4, lr}
    f9fa:	2808      	cmp	r0, #8
    f9fc:	d803      	bhi.n	fa06 <system_clock_source_get_hz+0xe>
    f9fe:	0080      	lsls	r0, r0, #2
    fa00:	4b1c      	ldr	r3, [pc, #112]	; (fa74 <system_clock_source_get_hz+0x7c>)
    fa02:	581b      	ldr	r3, [r3, r0]
    fa04:	469f      	mov	pc, r3
    fa06:	2000      	movs	r0, #0
    fa08:	e032      	b.n	fa70 <system_clock_source_get_hz+0x78>
    fa0a:	4b1b      	ldr	r3, [pc, #108]	; (fa78 <system_clock_source_get_hz+0x80>)
    fa0c:	6918      	ldr	r0, [r3, #16]
    fa0e:	e02f      	b.n	fa70 <system_clock_source_get_hz+0x78>
    fa10:	4b1a      	ldr	r3, [pc, #104]	; (fa7c <system_clock_source_get_hz+0x84>)
    fa12:	6a1b      	ldr	r3, [r3, #32]
    fa14:	059b      	lsls	r3, r3, #22
    fa16:	0f9b      	lsrs	r3, r3, #30
    fa18:	4819      	ldr	r0, [pc, #100]	; (fa80 <system_clock_source_get_hz+0x88>)
    fa1a:	40d8      	lsrs	r0, r3
    fa1c:	e028      	b.n	fa70 <system_clock_source_get_hz+0x78>
    fa1e:	4b16      	ldr	r3, [pc, #88]	; (fa78 <system_clock_source_get_hz+0x80>)
    fa20:	6958      	ldr	r0, [r3, #20]
    fa22:	e025      	b.n	fa70 <system_clock_source_get_hz+0x78>
    fa24:	4b14      	ldr	r3, [pc, #80]	; (fa78 <system_clock_source_get_hz+0x80>)
    fa26:	681b      	ldr	r3, [r3, #0]
    fa28:	2000      	movs	r0, #0
    fa2a:	079b      	lsls	r3, r3, #30
    fa2c:	d520      	bpl.n	fa70 <system_clock_source_get_hz+0x78>
    fa2e:	4913      	ldr	r1, [pc, #76]	; (fa7c <system_clock_source_get_hz+0x84>)
    fa30:	2210      	movs	r2, #16
    fa32:	68cb      	ldr	r3, [r1, #12]
    fa34:	421a      	tst	r2, r3
    fa36:	d0fc      	beq.n	fa32 <system_clock_source_get_hz+0x3a>
    fa38:	4b0f      	ldr	r3, [pc, #60]	; (fa78 <system_clock_source_get_hz+0x80>)
    fa3a:	681a      	ldr	r2, [r3, #0]
    fa3c:	2324      	movs	r3, #36	; 0x24
    fa3e:	4013      	ands	r3, r2
    fa40:	2b04      	cmp	r3, #4
    fa42:	d001      	beq.n	fa48 <system_clock_source_get_hz+0x50>
    fa44:	480f      	ldr	r0, [pc, #60]	; (fa84 <system_clock_source_get_hz+0x8c>)
    fa46:	e013      	b.n	fa70 <system_clock_source_get_hz+0x78>
    fa48:	2000      	movs	r0, #0
    fa4a:	4b0f      	ldr	r3, [pc, #60]	; (fa88 <system_clock_source_get_hz+0x90>)
    fa4c:	4798      	blx	r3
    fa4e:	4b0a      	ldr	r3, [pc, #40]	; (fa78 <system_clock_source_get_hz+0x80>)
    fa50:	689b      	ldr	r3, [r3, #8]
    fa52:	041b      	lsls	r3, r3, #16
    fa54:	0c1b      	lsrs	r3, r3, #16
    fa56:	4358      	muls	r0, r3
    fa58:	e00a      	b.n	fa70 <system_clock_source_get_hz+0x78>
    fa5a:	2350      	movs	r3, #80	; 0x50
    fa5c:	4a07      	ldr	r2, [pc, #28]	; (fa7c <system_clock_source_get_hz+0x84>)
    fa5e:	5cd3      	ldrb	r3, [r2, r3]
    fa60:	2000      	movs	r0, #0
    fa62:	075b      	lsls	r3, r3, #29
    fa64:	d504      	bpl.n	fa70 <system_clock_source_get_hz+0x78>
    fa66:	4b04      	ldr	r3, [pc, #16]	; (fa78 <system_clock_source_get_hz+0x80>)
    fa68:	68d8      	ldr	r0, [r3, #12]
    fa6a:	e001      	b.n	fa70 <system_clock_source_get_hz+0x78>
    fa6c:	2080      	movs	r0, #128	; 0x80
    fa6e:	0200      	lsls	r0, r0, #8
    fa70:	bd10      	pop	{r4, pc}
    fa72:	46c0      	nop			; (mov r8, r8)
    fa74:	00019e18 	.word	0x00019e18
    fa78:	20000430 	.word	0x20000430
    fa7c:	40000800 	.word	0x40000800
    fa80:	007a1200 	.word	0x007a1200
    fa84:	02dc6c00 	.word	0x02dc6c00
    fa88:	0001005d 	.word	0x0001005d

0000fa8c <system_clock_source_osc8m_set_config>:
    fa8c:	b570      	push	{r4, r5, r6, lr}
    fa8e:	490c      	ldr	r1, [pc, #48]	; (fac0 <system_clock_source_osc8m_set_config+0x34>)
    fa90:	6a0b      	ldr	r3, [r1, #32]
    fa92:	7804      	ldrb	r4, [r0, #0]
    fa94:	7885      	ldrb	r5, [r0, #2]
    fa96:	7840      	ldrb	r0, [r0, #1]
    fa98:	2201      	movs	r2, #1
    fa9a:	4010      	ands	r0, r2
    fa9c:	0180      	lsls	r0, r0, #6
    fa9e:	2640      	movs	r6, #64	; 0x40
    faa0:	43b3      	bics	r3, r6
    faa2:	4303      	orrs	r3, r0
    faa4:	402a      	ands	r2, r5
    faa6:	01d2      	lsls	r2, r2, #7
    faa8:	2080      	movs	r0, #128	; 0x80
    faaa:	4383      	bics	r3, r0
    faac:	4313      	orrs	r3, r2
    faae:	2203      	movs	r2, #3
    fab0:	4022      	ands	r2, r4
    fab2:	0212      	lsls	r2, r2, #8
    fab4:	4803      	ldr	r0, [pc, #12]	; (fac4 <system_clock_source_osc8m_set_config+0x38>)
    fab6:	4003      	ands	r3, r0
    fab8:	4313      	orrs	r3, r2
    faba:	620b      	str	r3, [r1, #32]
    fabc:	bd70      	pop	{r4, r5, r6, pc}
    fabe:	46c0      	nop			; (mov r8, r8)
    fac0:	40000800 	.word	0x40000800
    fac4:	fffffcff 	.word	0xfffffcff

0000fac8 <system_clock_source_xosc32k_set_config>:
    fac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    faca:	46de      	mov	lr, fp
    facc:	4657      	mov	r7, sl
    face:	464e      	mov	r6, r9
    fad0:	4645      	mov	r5, r8
    fad2:	b5e0      	push	{r5, r6, r7, lr}
    fad4:	0001      	movs	r1, r0
    fad6:	4b26      	ldr	r3, [pc, #152]	; (fb70 <system_clock_source_xosc32k_set_config+0xa8>)
    fad8:	469b      	mov	fp, r3
    fada:	8a9b      	ldrh	r3, [r3, #20]
    fadc:	7845      	ldrb	r5, [r0, #1]
    fade:	7800      	ldrb	r0, [r0, #0]
    fae0:	4242      	negs	r2, r0
    fae2:	4142      	adcs	r2, r0
    fae4:	4691      	mov	r9, r2
    fae6:	7888      	ldrb	r0, [r1, #2]
    fae8:	78ca      	ldrb	r2, [r1, #3]
    faea:	4694      	mov	ip, r2
    faec:	790a      	ldrb	r2, [r1, #4]
    faee:	4690      	mov	r8, r2
    faf0:	7b4e      	ldrb	r6, [r1, #13]
    faf2:	7b0f      	ldrb	r7, [r1, #12]
    faf4:	7b8c      	ldrb	r4, [r1, #14]
    faf6:	688a      	ldr	r2, [r1, #8]
    faf8:	491e      	ldr	r1, [pc, #120]	; (fb74 <system_clock_source_xosc32k_set_config+0xac>)
    fafa:	614a      	str	r2, [r1, #20]
    fafc:	2101      	movs	r1, #1
    fafe:	464a      	mov	r2, r9
    fb00:	0092      	lsls	r2, r2, #2
    fb02:	4691      	mov	r9, r2
    fb04:	2204      	movs	r2, #4
    fb06:	4393      	bics	r3, r2
    fb08:	464a      	mov	r2, r9
    fb0a:	4313      	orrs	r3, r2
    fb0c:	4642      	mov	r2, r8
    fb0e:	400a      	ands	r2, r1
    fb10:	00d2      	lsls	r2, r2, #3
    fb12:	4690      	mov	r8, r2
    fb14:	2208      	movs	r2, #8
    fb16:	4393      	bics	r3, r2
    fb18:	4642      	mov	r2, r8
    fb1a:	4313      	orrs	r3, r2
    fb1c:	4662      	mov	r2, ip
    fb1e:	400a      	ands	r2, r1
    fb20:	0112      	lsls	r2, r2, #4
    fb22:	4694      	mov	ip, r2
    fb24:	2210      	movs	r2, #16
    fb26:	4393      	bics	r3, r2
    fb28:	4662      	mov	r2, ip
    fb2a:	4313      	orrs	r3, r2
    fb2c:	4008      	ands	r0, r1
    fb2e:	0140      	lsls	r0, r0, #5
    fb30:	2220      	movs	r2, #32
    fb32:	4393      	bics	r3, r2
    fb34:	4303      	orrs	r3, r0
    fb36:	400f      	ands	r7, r1
    fb38:	01bf      	lsls	r7, r7, #6
    fb3a:	2040      	movs	r0, #64	; 0x40
    fb3c:	4383      	bics	r3, r0
    fb3e:	433b      	orrs	r3, r7
    fb40:	400e      	ands	r6, r1
    fb42:	01f6      	lsls	r6, r6, #7
    fb44:	3040      	adds	r0, #64	; 0x40
    fb46:	4383      	bics	r3, r0
    fb48:	4333      	orrs	r3, r6
    fb4a:	3879      	subs	r0, #121	; 0x79
    fb4c:	4005      	ands	r5, r0
    fb4e:	022d      	lsls	r5, r5, #8
    fb50:	4809      	ldr	r0, [pc, #36]	; (fb78 <system_clock_source_xosc32k_set_config+0xb0>)
    fb52:	4003      	ands	r3, r0
    fb54:	432b      	orrs	r3, r5
    fb56:	4021      	ands	r1, r4
    fb58:	0309      	lsls	r1, r1, #12
    fb5a:	4808      	ldr	r0, [pc, #32]	; (fb7c <system_clock_source_xosc32k_set_config+0xb4>)
    fb5c:	4003      	ands	r3, r0
    fb5e:	430b      	orrs	r3, r1
    fb60:	465a      	mov	r2, fp
    fb62:	8293      	strh	r3, [r2, #20]
    fb64:	bc3c      	pop	{r2, r3, r4, r5}
    fb66:	4690      	mov	r8, r2
    fb68:	4699      	mov	r9, r3
    fb6a:	46a2      	mov	sl, r4
    fb6c:	46ab      	mov	fp, r5
    fb6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb70:	40000800 	.word	0x40000800
    fb74:	20000430 	.word	0x20000430
    fb78:	fffff8ff 	.word	0xfffff8ff
    fb7c:	ffffefff 	.word	0xffffefff

0000fb80 <system_clock_source_dfll_set_config>:
    fb80:	b510      	push	{r4, lr}
    fb82:	7a03      	ldrb	r3, [r0, #8]
    fb84:	069b      	lsls	r3, r3, #26
    fb86:	0c1b      	lsrs	r3, r3, #16
    fb88:	8942      	ldrh	r2, [r0, #10]
    fb8a:	0592      	lsls	r2, r2, #22
    fb8c:	0d92      	lsrs	r2, r2, #22
    fb8e:	4313      	orrs	r3, r2
    fb90:	4918      	ldr	r1, [pc, #96]	; (fbf4 <system_clock_source_dfll_set_config+0x74>)
    fb92:	604b      	str	r3, [r1, #4]
    fb94:	7983      	ldrb	r3, [r0, #6]
    fb96:	79c2      	ldrb	r2, [r0, #7]
    fb98:	4313      	orrs	r3, r2
    fb9a:	8842      	ldrh	r2, [r0, #2]
    fb9c:	8884      	ldrh	r4, [r0, #4]
    fb9e:	4322      	orrs	r2, r4
    fba0:	4313      	orrs	r3, r2
    fba2:	7842      	ldrb	r2, [r0, #1]
    fba4:	01d2      	lsls	r2, r2, #7
    fba6:	4313      	orrs	r3, r2
    fba8:	600b      	str	r3, [r1, #0]
    fbaa:	7803      	ldrb	r3, [r0, #0]
    fbac:	2b04      	cmp	r3, #4
    fbae:	d011      	beq.n	fbd4 <system_clock_source_dfll_set_config+0x54>
    fbb0:	2b20      	cmp	r3, #32
    fbb2:	d10e      	bne.n	fbd2 <system_clock_source_dfll_set_config+0x52>
    fbb4:	7b03      	ldrb	r3, [r0, #12]
    fbb6:	069b      	lsls	r3, r3, #26
    fbb8:	8a02      	ldrh	r2, [r0, #16]
    fbba:	4313      	orrs	r3, r2
    fbbc:	89c2      	ldrh	r2, [r0, #14]
    fbbe:	0412      	lsls	r2, r2, #16
    fbc0:	490d      	ldr	r1, [pc, #52]	; (fbf8 <system_clock_source_dfll_set_config+0x78>)
    fbc2:	400a      	ands	r2, r1
    fbc4:	4313      	orrs	r3, r2
    fbc6:	4a0b      	ldr	r2, [pc, #44]	; (fbf4 <system_clock_source_dfll_set_config+0x74>)
    fbc8:	6093      	str	r3, [r2, #8]
    fbca:	6811      	ldr	r1, [r2, #0]
    fbcc:	4b0b      	ldr	r3, [pc, #44]	; (fbfc <system_clock_source_dfll_set_config+0x7c>)
    fbce:	430b      	orrs	r3, r1
    fbd0:	6013      	str	r3, [r2, #0]
    fbd2:	bd10      	pop	{r4, pc}
    fbd4:	7b03      	ldrb	r3, [r0, #12]
    fbd6:	069b      	lsls	r3, r3, #26
    fbd8:	8a02      	ldrh	r2, [r0, #16]
    fbda:	4313      	orrs	r3, r2
    fbdc:	89c2      	ldrh	r2, [r0, #14]
    fbde:	0412      	lsls	r2, r2, #16
    fbe0:	4905      	ldr	r1, [pc, #20]	; (fbf8 <system_clock_source_dfll_set_config+0x78>)
    fbe2:	400a      	ands	r2, r1
    fbe4:	4313      	orrs	r3, r2
    fbe6:	4a03      	ldr	r2, [pc, #12]	; (fbf4 <system_clock_source_dfll_set_config+0x74>)
    fbe8:	6093      	str	r3, [r2, #8]
    fbea:	6813      	ldr	r3, [r2, #0]
    fbec:	2104      	movs	r1, #4
    fbee:	430b      	orrs	r3, r1
    fbf0:	6013      	str	r3, [r2, #0]
    fbf2:	e7ee      	b.n	fbd2 <system_clock_source_dfll_set_config+0x52>
    fbf4:	20000430 	.word	0x20000430
    fbf8:	03ff0000 	.word	0x03ff0000
    fbfc:	00000424 	.word	0x00000424

0000fc00 <system_clock_source_enable>:
    fc00:	2808      	cmp	r0, #8
    fc02:	d803      	bhi.n	fc0c <system_clock_source_enable+0xc>
    fc04:	0080      	lsls	r0, r0, #2
    fc06:	4b25      	ldr	r3, [pc, #148]	; (fc9c <system_clock_source_enable+0x9c>)
    fc08:	581b      	ldr	r3, [r3, r0]
    fc0a:	469f      	mov	pc, r3
    fc0c:	2017      	movs	r0, #23
    fc0e:	e044      	b.n	fc9a <system_clock_source_enable+0x9a>
    fc10:	4a23      	ldr	r2, [pc, #140]	; (fca0 <system_clock_source_enable+0xa0>)
    fc12:	6a13      	ldr	r3, [r2, #32]
    fc14:	2102      	movs	r1, #2
    fc16:	430b      	orrs	r3, r1
    fc18:	6213      	str	r3, [r2, #32]
    fc1a:	2000      	movs	r0, #0
    fc1c:	e03d      	b.n	fc9a <system_clock_source_enable+0x9a>
    fc1e:	4a20      	ldr	r2, [pc, #128]	; (fca0 <system_clock_source_enable+0xa0>)
    fc20:	6993      	ldr	r3, [r2, #24]
    fc22:	2102      	movs	r1, #2
    fc24:	430b      	orrs	r3, r1
    fc26:	6193      	str	r3, [r2, #24]
    fc28:	2000      	movs	r0, #0
    fc2a:	e036      	b.n	fc9a <system_clock_source_enable+0x9a>
    fc2c:	4a1c      	ldr	r2, [pc, #112]	; (fca0 <system_clock_source_enable+0xa0>)
    fc2e:	8a13      	ldrh	r3, [r2, #16]
    fc30:	2102      	movs	r1, #2
    fc32:	430b      	orrs	r3, r1
    fc34:	8213      	strh	r3, [r2, #16]
    fc36:	2000      	movs	r0, #0
    fc38:	e02f      	b.n	fc9a <system_clock_source_enable+0x9a>
    fc3a:	4a19      	ldr	r2, [pc, #100]	; (fca0 <system_clock_source_enable+0xa0>)
    fc3c:	8a93      	ldrh	r3, [r2, #20]
    fc3e:	2102      	movs	r1, #2
    fc40:	430b      	orrs	r3, r1
    fc42:	8293      	strh	r3, [r2, #20]
    fc44:	2000      	movs	r0, #0
    fc46:	e028      	b.n	fc9a <system_clock_source_enable+0x9a>
    fc48:	4916      	ldr	r1, [pc, #88]	; (fca4 <system_clock_source_enable+0xa4>)
    fc4a:	680b      	ldr	r3, [r1, #0]
    fc4c:	2202      	movs	r2, #2
    fc4e:	4313      	orrs	r3, r2
    fc50:	600b      	str	r3, [r1, #0]
    fc52:	4b13      	ldr	r3, [pc, #76]	; (fca0 <system_clock_source_enable+0xa0>)
    fc54:	849a      	strh	r2, [r3, #36]	; 0x24
    fc56:	0019      	movs	r1, r3
    fc58:	320e      	adds	r2, #14
    fc5a:	68cb      	ldr	r3, [r1, #12]
    fc5c:	421a      	tst	r2, r3
    fc5e:	d0fc      	beq.n	fc5a <system_clock_source_enable+0x5a>
    fc60:	4a10      	ldr	r2, [pc, #64]	; (fca4 <system_clock_source_enable+0xa4>)
    fc62:	6891      	ldr	r1, [r2, #8]
    fc64:	4b0e      	ldr	r3, [pc, #56]	; (fca0 <system_clock_source_enable+0xa0>)
    fc66:	62d9      	str	r1, [r3, #44]	; 0x2c
    fc68:	6852      	ldr	r2, [r2, #4]
    fc6a:	629a      	str	r2, [r3, #40]	; 0x28
    fc6c:	2200      	movs	r2, #0
    fc6e:	849a      	strh	r2, [r3, #36]	; 0x24
    fc70:	0019      	movs	r1, r3
    fc72:	3210      	adds	r2, #16
    fc74:	68cb      	ldr	r3, [r1, #12]
    fc76:	421a      	tst	r2, r3
    fc78:	d0fc      	beq.n	fc74 <system_clock_source_enable+0x74>
    fc7a:	4b0a      	ldr	r3, [pc, #40]	; (fca4 <system_clock_source_enable+0xa4>)
    fc7c:	681b      	ldr	r3, [r3, #0]
    fc7e:	b29b      	uxth	r3, r3
    fc80:	4a07      	ldr	r2, [pc, #28]	; (fca0 <system_clock_source_enable+0xa0>)
    fc82:	8493      	strh	r3, [r2, #36]	; 0x24
    fc84:	2000      	movs	r0, #0
    fc86:	e008      	b.n	fc9a <system_clock_source_enable+0x9a>
    fc88:	4905      	ldr	r1, [pc, #20]	; (fca0 <system_clock_source_enable+0xa0>)
    fc8a:	2244      	movs	r2, #68	; 0x44
    fc8c:	5c8b      	ldrb	r3, [r1, r2]
    fc8e:	2002      	movs	r0, #2
    fc90:	4303      	orrs	r3, r0
    fc92:	548b      	strb	r3, [r1, r2]
    fc94:	2000      	movs	r0, #0
    fc96:	e000      	b.n	fc9a <system_clock_source_enable+0x9a>
    fc98:	2000      	movs	r0, #0
    fc9a:	4770      	bx	lr
    fc9c:	00019e3c 	.word	0x00019e3c
    fca0:	40000800 	.word	0x40000800
    fca4:	20000430 	.word	0x20000430

0000fca8 <system_clock_init>:
    fca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcaa:	b08f      	sub	sp, #60	; 0x3c
    fcac:	22c2      	movs	r2, #194	; 0xc2
    fcae:	00d2      	lsls	r2, r2, #3
    fcb0:	4b47      	ldr	r3, [pc, #284]	; (fdd0 <system_clock_init+0x128>)
    fcb2:	609a      	str	r2, [r3, #8]
    fcb4:	4a47      	ldr	r2, [pc, #284]	; (fdd4 <system_clock_init+0x12c>)
    fcb6:	6853      	ldr	r3, [r2, #4]
    fcb8:	211e      	movs	r1, #30
    fcba:	438b      	bics	r3, r1
    fcbc:	391a      	subs	r1, #26
    fcbe:	430b      	orrs	r3, r1
    fcc0:	6053      	str	r3, [r2, #4]
    fcc2:	2202      	movs	r2, #2
    fcc4:	ab01      	add	r3, sp, #4
    fcc6:	701a      	strb	r2, [r3, #0]
    fcc8:	2400      	movs	r4, #0
    fcca:	4d43      	ldr	r5, [pc, #268]	; (fdd8 <system_clock_init+0x130>)
    fccc:	b2e0      	uxtb	r0, r4
    fcce:	a901      	add	r1, sp, #4
    fcd0:	47a8      	blx	r5
    fcd2:	3401      	adds	r4, #1
    fcd4:	2c25      	cmp	r4, #37	; 0x25
    fcd6:	d1f9      	bne.n	fccc <system_clock_init+0x24>
    fcd8:	a80a      	add	r0, sp, #40	; 0x28
    fcda:	2300      	movs	r3, #0
    fcdc:	7003      	strb	r3, [r0, #0]
    fcde:	7083      	strb	r3, [r0, #2]
    fce0:	2280      	movs	r2, #128	; 0x80
    fce2:	0212      	lsls	r2, r2, #8
    fce4:	6082      	str	r2, [r0, #8]
    fce6:	70c3      	strb	r3, [r0, #3]
    fce8:	2201      	movs	r2, #1
    fcea:	7102      	strb	r2, [r0, #4]
    fcec:	7303      	strb	r3, [r0, #12]
    fcee:	7383      	strb	r3, [r0, #14]
    fcf0:	3202      	adds	r2, #2
    fcf2:	7042      	strb	r2, [r0, #1]
    fcf4:	7343      	strb	r3, [r0, #13]
    fcf6:	4b39      	ldr	r3, [pc, #228]	; (fddc <system_clock_init+0x134>)
    fcf8:	4798      	blx	r3
    fcfa:	2005      	movs	r0, #5
    fcfc:	4b38      	ldr	r3, [pc, #224]	; (fde0 <system_clock_init+0x138>)
    fcfe:	4798      	blx	r3
    fd00:	4933      	ldr	r1, [pc, #204]	; (fdd0 <system_clock_init+0x128>)
    fd02:	2202      	movs	r2, #2
    fd04:	68cb      	ldr	r3, [r1, #12]
    fd06:	421a      	tst	r2, r3
    fd08:	d0fc      	beq.n	fd04 <system_clock_init+0x5c>
    fd0a:	4a31      	ldr	r2, [pc, #196]	; (fdd0 <system_clock_init+0x128>)
    fd0c:	8a93      	ldrh	r3, [r2, #20]
    fd0e:	2180      	movs	r1, #128	; 0x80
    fd10:	430b      	orrs	r3, r1
    fd12:	8293      	strh	r3, [r2, #20]
    fd14:	ab05      	add	r3, sp, #20
    fd16:	2100      	movs	r1, #0
    fd18:	2200      	movs	r2, #0
    fd1a:	8059      	strh	r1, [r3, #2]
    fd1c:	8099      	strh	r1, [r3, #4]
    fd1e:	719a      	strb	r2, [r3, #6]
    fd20:	71da      	strb	r2, [r3, #7]
    fd22:	313f      	adds	r1, #63	; 0x3f
    fd24:	8159      	strh	r1, [r3, #10]
    fd26:	393b      	subs	r1, #59	; 0x3b
    fd28:	7019      	strb	r1, [r3, #0]
    fd2a:	705a      	strb	r2, [r3, #1]
    fd2c:	4b2d      	ldr	r3, [pc, #180]	; (fde4 <system_clock_init+0x13c>)
    fd2e:	681b      	ldr	r3, [r3, #0]
    fd30:	0e9b      	lsrs	r3, r3, #26
    fd32:	2b3f      	cmp	r3, #63	; 0x3f
    fd34:	d04a      	beq.n	fdcc <system_clock_init+0x124>
    fd36:	a805      	add	r0, sp, #20
    fd38:	7203      	strb	r3, [r0, #8]
    fd3a:	4b2b      	ldr	r3, [pc, #172]	; (fde8 <system_clock_init+0x140>)
    fd3c:	8203      	strh	r3, [r0, #16]
    fd3e:	2307      	movs	r3, #7
    fd40:	7303      	strb	r3, [r0, #12]
    fd42:	3338      	adds	r3, #56	; 0x38
    fd44:	81c3      	strh	r3, [r0, #14]
    fd46:	4b29      	ldr	r3, [pc, #164]	; (fdec <system_clock_init+0x144>)
    fd48:	4798      	blx	r3
    fd4a:	a804      	add	r0, sp, #16
    fd4c:	2500      	movs	r5, #0
    fd4e:	7045      	strb	r5, [r0, #1]
    fd50:	2601      	movs	r6, #1
    fd52:	7086      	strb	r6, [r0, #2]
    fd54:	7005      	strb	r5, [r0, #0]
    fd56:	4b26      	ldr	r3, [pc, #152]	; (fdf0 <system_clock_init+0x148>)
    fd58:	4798      	blx	r3
    fd5a:	2006      	movs	r0, #6
    fd5c:	4f20      	ldr	r7, [pc, #128]	; (fde0 <system_clock_init+0x138>)
    fd5e:	47b8      	blx	r7
    fd60:	4b24      	ldr	r3, [pc, #144]	; (fdf4 <system_clock_init+0x14c>)
    fd62:	4798      	blx	r3
    fd64:	ac01      	add	r4, sp, #4
    fd66:	9602      	str	r6, [sp, #8]
    fd68:	7065      	strb	r5, [r4, #1]
    fd6a:	7225      	strb	r5, [r4, #8]
    fd6c:	7265      	strb	r5, [r4, #9]
    fd6e:	2305      	movs	r3, #5
    fd70:	7023      	strb	r3, [r4, #0]
    fd72:	0021      	movs	r1, r4
    fd74:	2001      	movs	r0, #1
    fd76:	4b20      	ldr	r3, [pc, #128]	; (fdf8 <system_clock_init+0x150>)
    fd78:	4798      	blx	r3
    fd7a:	2001      	movs	r0, #1
    fd7c:	4b1f      	ldr	r3, [pc, #124]	; (fdfc <system_clock_init+0x154>)
    fd7e:	4798      	blx	r3
    fd80:	7026      	strb	r6, [r4, #0]
    fd82:	0021      	movs	r1, r4
    fd84:	2000      	movs	r0, #0
    fd86:	4b14      	ldr	r3, [pc, #80]	; (fdd8 <system_clock_init+0x130>)
    fd88:	4798      	blx	r3
    fd8a:	2000      	movs	r0, #0
    fd8c:	4b1c      	ldr	r3, [pc, #112]	; (fe00 <system_clock_init+0x158>)
    fd8e:	4798      	blx	r3
    fd90:	2007      	movs	r0, #7
    fd92:	47b8      	blx	r7
    fd94:	490e      	ldr	r1, [pc, #56]	; (fdd0 <system_clock_init+0x128>)
    fd96:	22d0      	movs	r2, #208	; 0xd0
    fd98:	68cb      	ldr	r3, [r1, #12]
    fd9a:	4013      	ands	r3, r2
    fd9c:	2bd0      	cmp	r3, #208	; 0xd0
    fd9e:	d1fb      	bne.n	fd98 <system_clock_init+0xf0>
    fda0:	4a18      	ldr	r2, [pc, #96]	; (fe04 <system_clock_init+0x15c>)
    fda2:	2300      	movs	r3, #0
    fda4:	7213      	strb	r3, [r2, #8]
    fda6:	7253      	strb	r3, [r2, #9]
    fda8:	7293      	strb	r3, [r2, #10]
    fdaa:	72d3      	strb	r3, [r2, #11]
    fdac:	a901      	add	r1, sp, #4
    fdae:	2201      	movs	r2, #1
    fdb0:	604a      	str	r2, [r1, #4]
    fdb2:	704b      	strb	r3, [r1, #1]
    fdb4:	720b      	strb	r3, [r1, #8]
    fdb6:	724b      	strb	r3, [r1, #9]
    fdb8:	3307      	adds	r3, #7
    fdba:	700b      	strb	r3, [r1, #0]
    fdbc:	2000      	movs	r0, #0
    fdbe:	4b0e      	ldr	r3, [pc, #56]	; (fdf8 <system_clock_init+0x150>)
    fdc0:	4798      	blx	r3
    fdc2:	2000      	movs	r0, #0
    fdc4:	4b0d      	ldr	r3, [pc, #52]	; (fdfc <system_clock_init+0x154>)
    fdc6:	4798      	blx	r3
    fdc8:	b00f      	add	sp, #60	; 0x3c
    fdca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fdcc:	3b20      	subs	r3, #32
    fdce:	e7b2      	b.n	fd36 <system_clock_init+0x8e>
    fdd0:	40000800 	.word	0x40000800
    fdd4:	41004000 	.word	0x41004000
    fdd8:	00010041 	.word	0x00010041
    fddc:	0000fac9 	.word	0x0000fac9
    fde0:	0000fc01 	.word	0x0000fc01
    fde4:	00806024 	.word	0x00806024
    fde8:	000005b9 	.word	0x000005b9
    fdec:	0000fb81 	.word	0x0000fb81
    fdf0:	0000fa8d 	.word	0x0000fa8d
    fdf4:	0000fe09 	.word	0x0000fe09
    fdf8:	0000fe2d 	.word	0x0000fe2d
    fdfc:	0000fee5 	.word	0x0000fee5
    fe00:	0000ffb5 	.word	0x0000ffb5
    fe04:	40000400 	.word	0x40000400

0000fe08 <system_gclk_init>:
    fe08:	4a06      	ldr	r2, [pc, #24]	; (fe24 <system_gclk_init+0x1c>)
    fe0a:	6993      	ldr	r3, [r2, #24]
    fe0c:	2108      	movs	r1, #8
    fe0e:	430b      	orrs	r3, r1
    fe10:	6193      	str	r3, [r2, #24]
    fe12:	2201      	movs	r2, #1
    fe14:	4b04      	ldr	r3, [pc, #16]	; (fe28 <system_gclk_init+0x20>)
    fe16:	701a      	strb	r2, [r3, #0]
    fe18:	0019      	movs	r1, r3
    fe1a:	780b      	ldrb	r3, [r1, #0]
    fe1c:	4213      	tst	r3, r2
    fe1e:	d1fc      	bne.n	fe1a <system_gclk_init+0x12>
    fe20:	4770      	bx	lr
    fe22:	46c0      	nop			; (mov r8, r8)
    fe24:	40000400 	.word	0x40000400
    fe28:	40000c00 	.word	0x40000c00

0000fe2c <system_gclk_gen_set_config>:
    fe2c:	b570      	push	{r4, r5, r6, lr}
    fe2e:	0006      	movs	r6, r0
    fe30:	0004      	movs	r4, r0
    fe32:	780d      	ldrb	r5, [r1, #0]
    fe34:	022d      	lsls	r5, r5, #8
    fe36:	4305      	orrs	r5, r0
    fe38:	784b      	ldrb	r3, [r1, #1]
    fe3a:	2b00      	cmp	r3, #0
    fe3c:	d002      	beq.n	fe44 <system_gclk_gen_set_config+0x18>
    fe3e:	2380      	movs	r3, #128	; 0x80
    fe40:	02db      	lsls	r3, r3, #11
    fe42:	431d      	orrs	r5, r3
    fe44:	7a4b      	ldrb	r3, [r1, #9]
    fe46:	2b00      	cmp	r3, #0
    fe48:	d002      	beq.n	fe50 <system_gclk_gen_set_config+0x24>
    fe4a:	2380      	movs	r3, #128	; 0x80
    fe4c:	031b      	lsls	r3, r3, #12
    fe4e:	431d      	orrs	r5, r3
    fe50:	6848      	ldr	r0, [r1, #4]
    fe52:	2801      	cmp	r0, #1
    fe54:	d910      	bls.n	fe78 <system_gclk_gen_set_config+0x4c>
    fe56:	1e43      	subs	r3, r0, #1
    fe58:	4218      	tst	r0, r3
    fe5a:	d134      	bne.n	fec6 <system_gclk_gen_set_config+0x9a>
    fe5c:	2802      	cmp	r0, #2
    fe5e:	d930      	bls.n	fec2 <system_gclk_gen_set_config+0x96>
    fe60:	2302      	movs	r3, #2
    fe62:	2200      	movs	r2, #0
    fe64:	3201      	adds	r2, #1
    fe66:	005b      	lsls	r3, r3, #1
    fe68:	4298      	cmp	r0, r3
    fe6a:	d8fb      	bhi.n	fe64 <system_gclk_gen_set_config+0x38>
    fe6c:	0212      	lsls	r2, r2, #8
    fe6e:	4332      	orrs	r2, r6
    fe70:	0014      	movs	r4, r2
    fe72:	2380      	movs	r3, #128	; 0x80
    fe74:	035b      	lsls	r3, r3, #13
    fe76:	431d      	orrs	r5, r3
    fe78:	7a0b      	ldrb	r3, [r1, #8]
    fe7a:	2b00      	cmp	r3, #0
    fe7c:	d002      	beq.n	fe84 <system_gclk_gen_set_config+0x58>
    fe7e:	2380      	movs	r3, #128	; 0x80
    fe80:	039b      	lsls	r3, r3, #14
    fe82:	431d      	orrs	r5, r3
    fe84:	4a13      	ldr	r2, [pc, #76]	; (fed4 <system_gclk_gen_set_config+0xa8>)
    fe86:	7853      	ldrb	r3, [r2, #1]
    fe88:	b25b      	sxtb	r3, r3
    fe8a:	2b00      	cmp	r3, #0
    fe8c:	dbfb      	blt.n	fe86 <system_gclk_gen_set_config+0x5a>
    fe8e:	4b12      	ldr	r3, [pc, #72]	; (fed8 <system_gclk_gen_set_config+0xac>)
    fe90:	4798      	blx	r3
    fe92:	4b12      	ldr	r3, [pc, #72]	; (fedc <system_gclk_gen_set_config+0xb0>)
    fe94:	701e      	strb	r6, [r3, #0]
    fe96:	4a0f      	ldr	r2, [pc, #60]	; (fed4 <system_gclk_gen_set_config+0xa8>)
    fe98:	7853      	ldrb	r3, [r2, #1]
    fe9a:	b25b      	sxtb	r3, r3
    fe9c:	2b00      	cmp	r3, #0
    fe9e:	dbfb      	blt.n	fe98 <system_gclk_gen_set_config+0x6c>
    fea0:	4b0c      	ldr	r3, [pc, #48]	; (fed4 <system_gclk_gen_set_config+0xa8>)
    fea2:	609c      	str	r4, [r3, #8]
    fea4:	001a      	movs	r2, r3
    fea6:	7853      	ldrb	r3, [r2, #1]
    fea8:	b25b      	sxtb	r3, r3
    feaa:	2b00      	cmp	r3, #0
    feac:	dbfb      	blt.n	fea6 <system_gclk_gen_set_config+0x7a>
    feae:	4a09      	ldr	r2, [pc, #36]	; (fed4 <system_gclk_gen_set_config+0xa8>)
    feb0:	6853      	ldr	r3, [r2, #4]
    feb2:	2180      	movs	r1, #128	; 0x80
    feb4:	0249      	lsls	r1, r1, #9
    feb6:	400b      	ands	r3, r1
    feb8:	431d      	orrs	r5, r3
    feba:	6055      	str	r5, [r2, #4]
    febc:	4b08      	ldr	r3, [pc, #32]	; (fee0 <system_gclk_gen_set_config+0xb4>)
    febe:	4798      	blx	r3
    fec0:	bd70      	pop	{r4, r5, r6, pc}
    fec2:	2200      	movs	r2, #0
    fec4:	e7d2      	b.n	fe6c <system_gclk_gen_set_config+0x40>
    fec6:	0204      	lsls	r4, r0, #8
    fec8:	4334      	orrs	r4, r6
    feca:	2380      	movs	r3, #128	; 0x80
    fecc:	029b      	lsls	r3, r3, #10
    fece:	431d      	orrs	r5, r3
    fed0:	e7d2      	b.n	fe78 <system_gclk_gen_set_config+0x4c>
    fed2:	46c0      	nop			; (mov r8, r8)
    fed4:	40000c00 	.word	0x40000c00
    fed8:	0000e1dd 	.word	0x0000e1dd
    fedc:	40000c08 	.word	0x40000c08
    fee0:	0000e21d 	.word	0x0000e21d

0000fee4 <system_gclk_gen_enable>:
    fee4:	b510      	push	{r4, lr}
    fee6:	0004      	movs	r4, r0
    fee8:	4a0b      	ldr	r2, [pc, #44]	; (ff18 <system_gclk_gen_enable+0x34>)
    feea:	7853      	ldrb	r3, [r2, #1]
    feec:	b25b      	sxtb	r3, r3
    feee:	2b00      	cmp	r3, #0
    fef0:	dbfb      	blt.n	feea <system_gclk_gen_enable+0x6>
    fef2:	4b0a      	ldr	r3, [pc, #40]	; (ff1c <system_gclk_gen_enable+0x38>)
    fef4:	4798      	blx	r3
    fef6:	4b0a      	ldr	r3, [pc, #40]	; (ff20 <system_gclk_gen_enable+0x3c>)
    fef8:	701c      	strb	r4, [r3, #0]
    fefa:	4a07      	ldr	r2, [pc, #28]	; (ff18 <system_gclk_gen_enable+0x34>)
    fefc:	7853      	ldrb	r3, [r2, #1]
    fefe:	b25b      	sxtb	r3, r3
    ff00:	2b00      	cmp	r3, #0
    ff02:	dbfb      	blt.n	fefc <system_gclk_gen_enable+0x18>
    ff04:	4a04      	ldr	r2, [pc, #16]	; (ff18 <system_gclk_gen_enable+0x34>)
    ff06:	6851      	ldr	r1, [r2, #4]
    ff08:	2380      	movs	r3, #128	; 0x80
    ff0a:	025b      	lsls	r3, r3, #9
    ff0c:	430b      	orrs	r3, r1
    ff0e:	6053      	str	r3, [r2, #4]
    ff10:	4b04      	ldr	r3, [pc, #16]	; (ff24 <system_gclk_gen_enable+0x40>)
    ff12:	4798      	blx	r3
    ff14:	bd10      	pop	{r4, pc}
    ff16:	46c0      	nop			; (mov r8, r8)
    ff18:	40000c00 	.word	0x40000c00
    ff1c:	0000e1dd 	.word	0x0000e1dd
    ff20:	40000c04 	.word	0x40000c04
    ff24:	0000e21d 	.word	0x0000e21d

0000ff28 <system_gclk_gen_get_hz>:
    ff28:	b570      	push	{r4, r5, r6, lr}
    ff2a:	0004      	movs	r4, r0
    ff2c:	4a1a      	ldr	r2, [pc, #104]	; (ff98 <system_gclk_gen_get_hz+0x70>)
    ff2e:	7853      	ldrb	r3, [r2, #1]
    ff30:	b25b      	sxtb	r3, r3
    ff32:	2b00      	cmp	r3, #0
    ff34:	dbfb      	blt.n	ff2e <system_gclk_gen_get_hz+0x6>
    ff36:	4b19      	ldr	r3, [pc, #100]	; (ff9c <system_gclk_gen_get_hz+0x74>)
    ff38:	4798      	blx	r3
    ff3a:	4b19      	ldr	r3, [pc, #100]	; (ffa0 <system_gclk_gen_get_hz+0x78>)
    ff3c:	701c      	strb	r4, [r3, #0]
    ff3e:	4a16      	ldr	r2, [pc, #88]	; (ff98 <system_gclk_gen_get_hz+0x70>)
    ff40:	7853      	ldrb	r3, [r2, #1]
    ff42:	b25b      	sxtb	r3, r3
    ff44:	2b00      	cmp	r3, #0
    ff46:	dbfb      	blt.n	ff40 <system_gclk_gen_get_hz+0x18>
    ff48:	4e13      	ldr	r6, [pc, #76]	; (ff98 <system_gclk_gen_get_hz+0x70>)
    ff4a:	6870      	ldr	r0, [r6, #4]
    ff4c:	04c0      	lsls	r0, r0, #19
    ff4e:	0ec0      	lsrs	r0, r0, #27
    ff50:	4b14      	ldr	r3, [pc, #80]	; (ffa4 <system_gclk_gen_get_hz+0x7c>)
    ff52:	4798      	blx	r3
    ff54:	0005      	movs	r5, r0
    ff56:	4b12      	ldr	r3, [pc, #72]	; (ffa0 <system_gclk_gen_get_hz+0x78>)
    ff58:	701c      	strb	r4, [r3, #0]
    ff5a:	6876      	ldr	r6, [r6, #4]
    ff5c:	02f6      	lsls	r6, r6, #11
    ff5e:	0ff6      	lsrs	r6, r6, #31
    ff60:	4b11      	ldr	r3, [pc, #68]	; (ffa8 <system_gclk_gen_get_hz+0x80>)
    ff62:	701c      	strb	r4, [r3, #0]
    ff64:	4a0c      	ldr	r2, [pc, #48]	; (ff98 <system_gclk_gen_get_hz+0x70>)
    ff66:	7853      	ldrb	r3, [r2, #1]
    ff68:	b25b      	sxtb	r3, r3
    ff6a:	2b00      	cmp	r3, #0
    ff6c:	dbfb      	blt.n	ff66 <system_gclk_gen_get_hz+0x3e>
    ff6e:	4b0a      	ldr	r3, [pc, #40]	; (ff98 <system_gclk_gen_get_hz+0x70>)
    ff70:	689c      	ldr	r4, [r3, #8]
    ff72:	0224      	lsls	r4, r4, #8
    ff74:	0c24      	lsrs	r4, r4, #16
    ff76:	4b0d      	ldr	r3, [pc, #52]	; (ffac <system_gclk_gen_get_hz+0x84>)
    ff78:	4798      	blx	r3
    ff7a:	2e00      	cmp	r6, #0
    ff7c:	d107      	bne.n	ff8e <system_gclk_gen_get_hz+0x66>
    ff7e:	2c01      	cmp	r4, #1
    ff80:	d907      	bls.n	ff92 <system_gclk_gen_get_hz+0x6a>
    ff82:	0021      	movs	r1, r4
    ff84:	0028      	movs	r0, r5
    ff86:	4b0a      	ldr	r3, [pc, #40]	; (ffb0 <system_gclk_gen_get_hz+0x88>)
    ff88:	4798      	blx	r3
    ff8a:	0005      	movs	r5, r0
    ff8c:	e001      	b.n	ff92 <system_gclk_gen_get_hz+0x6a>
    ff8e:	3401      	adds	r4, #1
    ff90:	40e5      	lsrs	r5, r4
    ff92:	0028      	movs	r0, r5
    ff94:	bd70      	pop	{r4, r5, r6, pc}
    ff96:	46c0      	nop			; (mov r8, r8)
    ff98:	40000c00 	.word	0x40000c00
    ff9c:	0000e1dd 	.word	0x0000e1dd
    ffa0:	40000c04 	.word	0x40000c04
    ffa4:	0000f9f9 	.word	0x0000f9f9
    ffa8:	40000c08 	.word	0x40000c08
    ffac:	0000e21d 	.word	0x0000e21d
    ffb0:	00016691 	.word	0x00016691

0000ffb4 <system_gclk_chan_enable>:
    ffb4:	b510      	push	{r4, lr}
    ffb6:	0004      	movs	r4, r0
    ffb8:	4b06      	ldr	r3, [pc, #24]	; (ffd4 <system_gclk_chan_enable+0x20>)
    ffba:	4798      	blx	r3
    ffbc:	4b06      	ldr	r3, [pc, #24]	; (ffd8 <system_gclk_chan_enable+0x24>)
    ffbe:	701c      	strb	r4, [r3, #0]
    ffc0:	4a06      	ldr	r2, [pc, #24]	; (ffdc <system_gclk_chan_enable+0x28>)
    ffc2:	8853      	ldrh	r3, [r2, #2]
    ffc4:	2180      	movs	r1, #128	; 0x80
    ffc6:	01c9      	lsls	r1, r1, #7
    ffc8:	430b      	orrs	r3, r1
    ffca:	8053      	strh	r3, [r2, #2]
    ffcc:	4b04      	ldr	r3, [pc, #16]	; (ffe0 <system_gclk_chan_enable+0x2c>)
    ffce:	4798      	blx	r3
    ffd0:	bd10      	pop	{r4, pc}
    ffd2:	46c0      	nop			; (mov r8, r8)
    ffd4:	0000e1dd 	.word	0x0000e1dd
    ffd8:	40000c02 	.word	0x40000c02
    ffdc:	40000c00 	.word	0x40000c00
    ffe0:	0000e21d 	.word	0x0000e21d

0000ffe4 <system_gclk_chan_disable>:
    ffe4:	b510      	push	{r4, lr}
    ffe6:	0004      	movs	r4, r0
    ffe8:	4b0f      	ldr	r3, [pc, #60]	; (10028 <system_gclk_chan_disable+0x44>)
    ffea:	4798      	blx	r3
    ffec:	4b0f      	ldr	r3, [pc, #60]	; (1002c <system_gclk_chan_disable+0x48>)
    ffee:	701c      	strb	r4, [r3, #0]
    fff0:	4a0f      	ldr	r2, [pc, #60]	; (10030 <system_gclk_chan_disable+0x4c>)
    fff2:	8853      	ldrh	r3, [r2, #2]
    fff4:	051b      	lsls	r3, r3, #20
    fff6:	0f18      	lsrs	r0, r3, #28
    fff8:	8853      	ldrh	r3, [r2, #2]
    fffa:	490e      	ldr	r1, [pc, #56]	; (10034 <system_gclk_chan_disable+0x50>)
    fffc:	400b      	ands	r3, r1
    fffe:	8053      	strh	r3, [r2, #2]
   10000:	8853      	ldrh	r3, [r2, #2]
   10002:	490d      	ldr	r1, [pc, #52]	; (10038 <system_gclk_chan_disable+0x54>)
   10004:	400b      	ands	r3, r1
   10006:	8053      	strh	r3, [r2, #2]
   10008:	0011      	movs	r1, r2
   1000a:	2280      	movs	r2, #128	; 0x80
   1000c:	01d2      	lsls	r2, r2, #7
   1000e:	884b      	ldrh	r3, [r1, #2]
   10010:	4213      	tst	r3, r2
   10012:	d1fc      	bne.n	1000e <system_gclk_chan_disable+0x2a>
   10014:	4906      	ldr	r1, [pc, #24]	; (10030 <system_gclk_chan_disable+0x4c>)
   10016:	884a      	ldrh	r2, [r1, #2]
   10018:	0203      	lsls	r3, r0, #8
   1001a:	4806      	ldr	r0, [pc, #24]	; (10034 <system_gclk_chan_disable+0x50>)
   1001c:	4002      	ands	r2, r0
   1001e:	4313      	orrs	r3, r2
   10020:	804b      	strh	r3, [r1, #2]
   10022:	4b06      	ldr	r3, [pc, #24]	; (1003c <system_gclk_chan_disable+0x58>)
   10024:	4798      	blx	r3
   10026:	bd10      	pop	{r4, pc}
   10028:	0000e1dd 	.word	0x0000e1dd
   1002c:	40000c02 	.word	0x40000c02
   10030:	40000c00 	.word	0x40000c00
   10034:	fffff0ff 	.word	0xfffff0ff
   10038:	ffffbfff 	.word	0xffffbfff
   1003c:	0000e21d 	.word	0x0000e21d

00010040 <system_gclk_chan_set_config>:
   10040:	b510      	push	{r4, lr}
   10042:	780c      	ldrb	r4, [r1, #0]
   10044:	0224      	lsls	r4, r4, #8
   10046:	4304      	orrs	r4, r0
   10048:	4b02      	ldr	r3, [pc, #8]	; (10054 <system_gclk_chan_set_config+0x14>)
   1004a:	4798      	blx	r3
   1004c:	b2a4      	uxth	r4, r4
   1004e:	4b02      	ldr	r3, [pc, #8]	; (10058 <system_gclk_chan_set_config+0x18>)
   10050:	805c      	strh	r4, [r3, #2]
   10052:	bd10      	pop	{r4, pc}
   10054:	0000ffe5 	.word	0x0000ffe5
   10058:	40000c00 	.word	0x40000c00

0001005c <system_gclk_chan_get_hz>:
   1005c:	b510      	push	{r4, lr}
   1005e:	0004      	movs	r4, r0
   10060:	4b06      	ldr	r3, [pc, #24]	; (1007c <system_gclk_chan_get_hz+0x20>)
   10062:	4798      	blx	r3
   10064:	4b06      	ldr	r3, [pc, #24]	; (10080 <system_gclk_chan_get_hz+0x24>)
   10066:	701c      	strb	r4, [r3, #0]
   10068:	4b06      	ldr	r3, [pc, #24]	; (10084 <system_gclk_chan_get_hz+0x28>)
   1006a:	885c      	ldrh	r4, [r3, #2]
   1006c:	0524      	lsls	r4, r4, #20
   1006e:	0f24      	lsrs	r4, r4, #28
   10070:	4b05      	ldr	r3, [pc, #20]	; (10088 <system_gclk_chan_get_hz+0x2c>)
   10072:	4798      	blx	r3
   10074:	0020      	movs	r0, r4
   10076:	4b05      	ldr	r3, [pc, #20]	; (1008c <system_gclk_chan_get_hz+0x30>)
   10078:	4798      	blx	r3
   1007a:	bd10      	pop	{r4, pc}
   1007c:	0000e1dd 	.word	0x0000e1dd
   10080:	40000c02 	.word	0x40000c02
   10084:	40000c00 	.word	0x40000c00
   10088:	0000e21d 	.word	0x0000e21d
   1008c:	0000ff29 	.word	0x0000ff29

00010090 <_system_pinmux_config>:
   10090:	b530      	push	{r4, r5, lr}
   10092:	78d3      	ldrb	r3, [r2, #3]
   10094:	2b00      	cmp	r3, #0
   10096:	d135      	bne.n	10104 <_system_pinmux_config+0x74>
   10098:	7813      	ldrb	r3, [r2, #0]
   1009a:	2b80      	cmp	r3, #128	; 0x80
   1009c:	d029      	beq.n	100f2 <_system_pinmux_config+0x62>
   1009e:	061b      	lsls	r3, r3, #24
   100a0:	2480      	movs	r4, #128	; 0x80
   100a2:	0264      	lsls	r4, r4, #9
   100a4:	4323      	orrs	r3, r4
   100a6:	7854      	ldrb	r4, [r2, #1]
   100a8:	2502      	movs	r5, #2
   100aa:	43ac      	bics	r4, r5
   100ac:	d106      	bne.n	100bc <_system_pinmux_config+0x2c>
   100ae:	7894      	ldrb	r4, [r2, #2]
   100b0:	2c00      	cmp	r4, #0
   100b2:	d120      	bne.n	100f6 <_system_pinmux_config+0x66>
   100b4:	2480      	movs	r4, #128	; 0x80
   100b6:	02a4      	lsls	r4, r4, #10
   100b8:	4323      	orrs	r3, r4
   100ba:	6041      	str	r1, [r0, #4]
   100bc:	7854      	ldrb	r4, [r2, #1]
   100be:	3c01      	subs	r4, #1
   100c0:	2c01      	cmp	r4, #1
   100c2:	d91c      	bls.n	100fe <_system_pinmux_config+0x6e>
   100c4:	040d      	lsls	r5, r1, #16
   100c6:	0c2d      	lsrs	r5, r5, #16
   100c8:	24a0      	movs	r4, #160	; 0xa0
   100ca:	05e4      	lsls	r4, r4, #23
   100cc:	432c      	orrs	r4, r5
   100ce:	431c      	orrs	r4, r3
   100d0:	6284      	str	r4, [r0, #40]	; 0x28
   100d2:	0c0d      	lsrs	r5, r1, #16
   100d4:	24d0      	movs	r4, #208	; 0xd0
   100d6:	0624      	lsls	r4, r4, #24
   100d8:	432c      	orrs	r4, r5
   100da:	431c      	orrs	r4, r3
   100dc:	6284      	str	r4, [r0, #40]	; 0x28
   100de:	78d4      	ldrb	r4, [r2, #3]
   100e0:	2c00      	cmp	r4, #0
   100e2:	d122      	bne.n	1012a <_system_pinmux_config+0x9a>
   100e4:	035b      	lsls	r3, r3, #13
   100e6:	d51c      	bpl.n	10122 <_system_pinmux_config+0x92>
   100e8:	7893      	ldrb	r3, [r2, #2]
   100ea:	2b01      	cmp	r3, #1
   100ec:	d01e      	beq.n	1012c <_system_pinmux_config+0x9c>
   100ee:	6141      	str	r1, [r0, #20]
   100f0:	e017      	b.n	10122 <_system_pinmux_config+0x92>
   100f2:	2300      	movs	r3, #0
   100f4:	e7d7      	b.n	100a6 <_system_pinmux_config+0x16>
   100f6:	24c0      	movs	r4, #192	; 0xc0
   100f8:	02e4      	lsls	r4, r4, #11
   100fa:	4323      	orrs	r3, r4
   100fc:	e7dd      	b.n	100ba <_system_pinmux_config+0x2a>
   100fe:	4c0d      	ldr	r4, [pc, #52]	; (10134 <_system_pinmux_config+0xa4>)
   10100:	4023      	ands	r3, r4
   10102:	e7df      	b.n	100c4 <_system_pinmux_config+0x34>
   10104:	6041      	str	r1, [r0, #4]
   10106:	040c      	lsls	r4, r1, #16
   10108:	0c24      	lsrs	r4, r4, #16
   1010a:	23a0      	movs	r3, #160	; 0xa0
   1010c:	05db      	lsls	r3, r3, #23
   1010e:	4323      	orrs	r3, r4
   10110:	6283      	str	r3, [r0, #40]	; 0x28
   10112:	0c0c      	lsrs	r4, r1, #16
   10114:	23d0      	movs	r3, #208	; 0xd0
   10116:	061b      	lsls	r3, r3, #24
   10118:	4323      	orrs	r3, r4
   1011a:	6283      	str	r3, [r0, #40]	; 0x28
   1011c:	78d3      	ldrb	r3, [r2, #3]
   1011e:	2b00      	cmp	r3, #0
   10120:	d103      	bne.n	1012a <_system_pinmux_config+0x9a>
   10122:	7853      	ldrb	r3, [r2, #1]
   10124:	3b01      	subs	r3, #1
   10126:	2b01      	cmp	r3, #1
   10128:	d902      	bls.n	10130 <_system_pinmux_config+0xa0>
   1012a:	bd30      	pop	{r4, r5, pc}
   1012c:	6181      	str	r1, [r0, #24]
   1012e:	e7f8      	b.n	10122 <_system_pinmux_config+0x92>
   10130:	6081      	str	r1, [r0, #8]
   10132:	e7fa      	b.n	1012a <_system_pinmux_config+0x9a>
   10134:	fffbffff 	.word	0xfffbffff

00010138 <system_pinmux_pin_set_config>:
   10138:	b510      	push	{r4, lr}
   1013a:	000a      	movs	r2, r1
   1013c:	09c1      	lsrs	r1, r0, #7
   1013e:	2300      	movs	r3, #0
   10140:	2900      	cmp	r1, #0
   10142:	d104      	bne.n	1014e <system_pinmux_pin_set_config+0x16>
   10144:	0943      	lsrs	r3, r0, #5
   10146:	01db      	lsls	r3, r3, #7
   10148:	4905      	ldr	r1, [pc, #20]	; (10160 <system_pinmux_pin_set_config+0x28>)
   1014a:	468c      	mov	ip, r1
   1014c:	4463      	add	r3, ip
   1014e:	241f      	movs	r4, #31
   10150:	4020      	ands	r0, r4
   10152:	2101      	movs	r1, #1
   10154:	4081      	lsls	r1, r0
   10156:	0018      	movs	r0, r3
   10158:	4b02      	ldr	r3, [pc, #8]	; (10164 <system_pinmux_pin_set_config+0x2c>)
   1015a:	4798      	blx	r3
   1015c:	bd10      	pop	{r4, pc}
   1015e:	46c0      	nop			; (mov r8, r8)
   10160:	41004400 	.word	0x41004400
   10164:	00010091 	.word	0x00010091

00010168 <_system_dummy_init>:
   10168:	4770      	bx	lr
	...

0001016c <system_init>:
   1016c:	b510      	push	{r4, lr}
   1016e:	4b05      	ldr	r3, [pc, #20]	; (10184 <system_init+0x18>)
   10170:	4798      	blx	r3
   10172:	4b05      	ldr	r3, [pc, #20]	; (10188 <system_init+0x1c>)
   10174:	4798      	blx	r3
   10176:	4b05      	ldr	r3, [pc, #20]	; (1018c <system_init+0x20>)
   10178:	4798      	blx	r3
   1017a:	4b05      	ldr	r3, [pc, #20]	; (10190 <system_init+0x24>)
   1017c:	4798      	blx	r3
   1017e:	4b05      	ldr	r3, [pc, #20]	; (10194 <system_init+0x28>)
   10180:	4798      	blx	r3
   10182:	bd10      	pop	{r4, pc}
   10184:	0000fca9 	.word	0x0000fca9
   10188:	0000e24d 	.word	0x0000e24d
   1018c:	00010169 	.word	0x00010169
   10190:	0000e35d 	.word	0x0000e35d
   10194:	00010169 	.word	0x00010169

00010198 <_tcc_get_inst_index>:
   10198:	4b09      	ldr	r3, [pc, #36]	; (101c0 <_tcc_get_inst_index+0x28>)
   1019a:	4298      	cmp	r0, r3
   1019c:	d00c      	beq.n	101b8 <_tcc_get_inst_index+0x20>
   1019e:	4b09      	ldr	r3, [pc, #36]	; (101c4 <_tcc_get_inst_index+0x2c>)
   101a0:	4298      	cmp	r0, r3
   101a2:	d007      	beq.n	101b4 <_tcc_get_inst_index+0x1c>
   101a4:	4a08      	ldr	r2, [pc, #32]	; (101c8 <_tcc_get_inst_index+0x30>)
   101a6:	2300      	movs	r3, #0
   101a8:	4290      	cmp	r0, r2
   101aa:	d001      	beq.n	101b0 <_tcc_get_inst_index+0x18>
   101ac:	0018      	movs	r0, r3
   101ae:	4770      	bx	lr
   101b0:	3302      	adds	r3, #2
   101b2:	e002      	b.n	101ba <_tcc_get_inst_index+0x22>
   101b4:	2301      	movs	r3, #1
   101b6:	e000      	b.n	101ba <_tcc_get_inst_index+0x22>
   101b8:	2300      	movs	r3, #0
   101ba:	b2db      	uxtb	r3, r3
   101bc:	e7f6      	b.n	101ac <_tcc_get_inst_index+0x14>
   101be:	46c0      	nop			; (mov r8, r8)
   101c0:	42002000 	.word	0x42002000
   101c4:	42002400 	.word	0x42002400
   101c8:	42002800 	.word	0x42002800

000101cc <tcc_get_config_defaults>:
   101cc:	b510      	push	{r4, lr}
   101ce:	0004      	movs	r4, r0
   101d0:	0008      	movs	r0, r1
   101d2:	4b4f      	ldr	r3, [pc, #316]	; (10310 <tcc_get_config_defaults+0x144>)
   101d4:	4798      	blx	r3
   101d6:	2300      	movs	r3, #0
   101d8:	6023      	str	r3, [r4, #0]
   101da:	0080      	lsls	r0, r0, #2
   101dc:	4a4d      	ldr	r2, [pc, #308]	; (10314 <tcc_get_config_defaults+0x148>)
   101de:	5882      	ldr	r2, [r0, r2]
   101e0:	6062      	str	r2, [r4, #4]
   101e2:	72a3      	strb	r3, [r4, #10]
   101e4:	72e3      	strb	r3, [r4, #11]
   101e6:	7323      	strb	r3, [r4, #12]
   101e8:	7263      	strb	r3, [r4, #9]
   101ea:	7223      	strb	r3, [r4, #8]
   101ec:	61e3      	str	r3, [r4, #28]
   101ee:	6223      	str	r3, [r4, #32]
   101f0:	6263      	str	r3, [r4, #36]	; 0x24
   101f2:	62a3      	str	r3, [r4, #40]	; 0x28
   101f4:	7523      	strb	r3, [r4, #20]
   101f6:	7563      	strb	r3, [r4, #21]
   101f8:	75a3      	strb	r3, [r4, #22]
   101fa:	75e3      	strb	r3, [r4, #23]
   101fc:	7623      	strb	r3, [r4, #24]
   101fe:	7663      	strb	r3, [r4, #25]
   10200:	7423      	strb	r3, [r4, #16]
   10202:	7463      	strb	r3, [r4, #17]
   10204:	74a3      	strb	r3, [r4, #18]
   10206:	74e3      	strb	r3, [r4, #19]
   10208:	222c      	movs	r2, #44	; 0x2c
   1020a:	54a3      	strb	r3, [r4, r2]
   1020c:	3201      	adds	r2, #1
   1020e:	54a3      	strb	r3, [r4, r2]
   10210:	3201      	adds	r2, #1
   10212:	54a3      	strb	r3, [r4, r2]
   10214:	3201      	adds	r2, #1
   10216:	54a3      	strb	r3, [r4, r2]
   10218:	3201      	adds	r2, #1
   1021a:	54a3      	strb	r3, [r4, r2]
   1021c:	3201      	adds	r2, #1
   1021e:	54a3      	strb	r3, [r4, r2]
   10220:	3201      	adds	r2, #1
   10222:	54a3      	strb	r3, [r4, r2]
   10224:	3201      	adds	r2, #1
   10226:	54a3      	strb	r3, [r4, r2]
   10228:	3201      	adds	r2, #1
   1022a:	54a3      	strb	r3, [r4, r2]
   1022c:	3201      	adds	r2, #1
   1022e:	54a3      	strb	r3, [r4, r2]
   10230:	3201      	adds	r2, #1
   10232:	54a3      	strb	r3, [r4, r2]
   10234:	3201      	adds	r2, #1
   10236:	54a3      	strb	r3, [r4, r2]
   10238:	3201      	adds	r2, #1
   1023a:	54a3      	strb	r3, [r4, r2]
   1023c:	3201      	adds	r2, #1
   1023e:	54a3      	strb	r3, [r4, r2]
   10240:	3201      	adds	r2, #1
   10242:	54a3      	strb	r3, [r4, r2]
   10244:	3201      	adds	r2, #1
   10246:	54a3      	strb	r3, [r4, r2]
   10248:	3201      	adds	r2, #1
   1024a:	54a3      	strb	r3, [r4, r2]
   1024c:	3201      	adds	r2, #1
   1024e:	54a3      	strb	r3, [r4, r2]
   10250:	3201      	adds	r2, #1
   10252:	54a3      	strb	r3, [r4, r2]
   10254:	3201      	adds	r2, #1
   10256:	54a3      	strb	r3, [r4, r2]
   10258:	3201      	adds	r2, #1
   1025a:	54a3      	strb	r3, [r4, r2]
   1025c:	3201      	adds	r2, #1
   1025e:	54a3      	strb	r3, [r4, r2]
   10260:	3201      	adds	r2, #1
   10262:	54a3      	strb	r3, [r4, r2]
   10264:	3201      	adds	r2, #1
   10266:	54a3      	strb	r3, [r4, r2]
   10268:	3201      	adds	r2, #1
   1026a:	54a3      	strb	r3, [r4, r2]
   1026c:	3201      	adds	r2, #1
   1026e:	54a3      	strb	r3, [r4, r2]
   10270:	3201      	adds	r2, #1
   10272:	54a3      	strb	r3, [r4, r2]
   10274:	3201      	adds	r2, #1
   10276:	54a3      	strb	r3, [r4, r2]
   10278:	3201      	adds	r2, #1
   1027a:	54a3      	strb	r3, [r4, r2]
   1027c:	3201      	adds	r2, #1
   1027e:	54a3      	strb	r3, [r4, r2]
   10280:	3201      	adds	r2, #1
   10282:	54a3      	strb	r3, [r4, r2]
   10284:	3201      	adds	r2, #1
   10286:	54a3      	strb	r3, [r4, r2]
   10288:	3201      	adds	r2, #1
   1028a:	54a3      	strb	r3, [r4, r2]
   1028c:	3201      	adds	r2, #1
   1028e:	54a3      	strb	r3, [r4, r2]
   10290:	3201      	adds	r2, #1
   10292:	54a3      	strb	r3, [r4, r2]
   10294:	3201      	adds	r2, #1
   10296:	54a3      	strb	r3, [r4, r2]
   10298:	3201      	adds	r2, #1
   1029a:	54a3      	strb	r3, [r4, r2]
   1029c:	3201      	adds	r2, #1
   1029e:	54a3      	strb	r3, [r4, r2]
   102a0:	3201      	adds	r2, #1
   102a2:	54a3      	strb	r3, [r4, r2]
   102a4:	3201      	adds	r2, #1
   102a6:	54a3      	strb	r3, [r4, r2]
   102a8:	3201      	adds	r2, #1
   102aa:	54a3      	strb	r3, [r4, r2]
   102ac:	3201      	adds	r2, #1
   102ae:	54a3      	strb	r3, [r4, r2]
   102b0:	3201      	adds	r2, #1
   102b2:	54a3      	strb	r3, [r4, r2]
   102b4:	3201      	adds	r2, #1
   102b6:	54a3      	strb	r3, [r4, r2]
   102b8:	3241      	adds	r2, #65	; 0x41
   102ba:	54a3      	strb	r3, [r4, r2]
   102bc:	65a3      	str	r3, [r4, #88]	; 0x58
   102be:	67a3      	str	r3, [r4, #120]	; 0x78
   102c0:	3201      	adds	r2, #1
   102c2:	54a3      	strb	r3, [r4, r2]
   102c4:	65e3      	str	r3, [r4, #92]	; 0x5c
   102c6:	67e3      	str	r3, [r4, #124]	; 0x7c
   102c8:	3201      	adds	r2, #1
   102ca:	54a3      	strb	r3, [r4, r2]
   102cc:	6623      	str	r3, [r4, #96]	; 0x60
   102ce:	3a1a      	subs	r2, #26
   102d0:	50a3      	str	r3, [r4, r2]
   102d2:	321b      	adds	r2, #27
   102d4:	54a3      	strb	r3, [r4, r2]
   102d6:	6663      	str	r3, [r4, #100]	; 0x64
   102d8:	3a17      	subs	r2, #23
   102da:	50a3      	str	r3, [r4, r2]
   102dc:	3218      	adds	r2, #24
   102de:	54a3      	strb	r3, [r4, r2]
   102e0:	66a3      	str	r3, [r4, #104]	; 0x68
   102e2:	3a14      	subs	r2, #20
   102e4:	50a3      	str	r3, [r4, r2]
   102e6:	3215      	adds	r2, #21
   102e8:	54a3      	strb	r3, [r4, r2]
   102ea:	66e3      	str	r3, [r4, #108]	; 0x6c
   102ec:	3a11      	subs	r2, #17
   102ee:	50a3      	str	r3, [r4, r2]
   102f0:	3212      	adds	r2, #18
   102f2:	54a3      	strb	r3, [r4, r2]
   102f4:	6723      	str	r3, [r4, #112]	; 0x70
   102f6:	3a0e      	subs	r2, #14
   102f8:	50a3      	str	r3, [r4, r2]
   102fa:	320f      	adds	r2, #15
   102fc:	54a3      	strb	r3, [r4, r2]
   102fe:	6763      	str	r3, [r4, #116]	; 0x74
   10300:	3a0b      	subs	r2, #11
   10302:	50a3      	str	r3, [r4, r2]
   10304:	2101      	movs	r1, #1
   10306:	320c      	adds	r2, #12
   10308:	54a1      	strb	r1, [r4, r2]
   1030a:	3201      	adds	r2, #1
   1030c:	54a3      	strb	r3, [r4, r2]
   1030e:	bd10      	pop	{r4, pc}
   10310:	00010199 	.word	0x00010199
   10314:	00019e74 	.word	0x00019e74

00010318 <tcc_init>:
   10318:	b5f0      	push	{r4, r5, r6, r7, lr}
   1031a:	46de      	mov	lr, fp
   1031c:	4657      	mov	r7, sl
   1031e:	464e      	mov	r6, r9
   10320:	4645      	mov	r5, r8
   10322:	b5e0      	push	{r5, r6, r7, lr}
   10324:	b091      	sub	sp, #68	; 0x44
   10326:	9001      	str	r0, [sp, #4]
   10328:	000c      	movs	r4, r1
   1032a:	0015      	movs	r5, r2
   1032c:	0008      	movs	r0, r1
   1032e:	4bc3      	ldr	r3, [pc, #780]	; (1063c <tcc_init+0x324>)
   10330:	4798      	blx	r3
   10332:	0003      	movs	r3, r0
   10334:	0001      	movs	r1, r0
   10336:	48c2      	ldr	r0, [pc, #776]	; (10640 <tcc_init+0x328>)
   10338:	6a02      	ldr	r2, [r0, #32]
   1033a:	009e      	lsls	r6, r3, #2
   1033c:	4fc1      	ldr	r7, [pc, #772]	; (10644 <tcc_init+0x32c>)
   1033e:	59f7      	ldr	r7, [r6, r7]
   10340:	433a      	orrs	r2, r7
   10342:	6202      	str	r2, [r0, #32]
   10344:	6822      	ldr	r2, [r4, #0]
   10346:	201c      	movs	r0, #28
   10348:	0792      	lsls	r2, r2, #30
   1034a:	d506      	bpl.n	1035a <tcc_init+0x42>
   1034c:	b011      	add	sp, #68	; 0x44
   1034e:	bc3c      	pop	{r2, r3, r4, r5}
   10350:	4690      	mov	r8, r2
   10352:	4699      	mov	r9, r3
   10354:	46a2      	mov	sl, r4
   10356:	46ab      	mov	fp, r5
   10358:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1035a:	6822      	ldr	r2, [r4, #0]
   1035c:	2701      	movs	r7, #1
   1035e:	4017      	ands	r7, r2
   10360:	d1f4      	bne.n	1034c <tcc_init+0x34>
   10362:	48b9      	ldr	r0, [pc, #740]	; (10648 <tcc_init+0x330>)
   10364:	5832      	ldr	r2, [r6, r0]
   10366:	2017      	movs	r0, #23
   10368:	682e      	ldr	r6, [r5, #0]
   1036a:	42b2      	cmp	r2, r6
   1036c:	d3ee      	bcc.n	1034c <tcc_init+0x34>
   1036e:	686e      	ldr	r6, [r5, #4]
   10370:	42b2      	cmp	r2, r6
   10372:	d3eb      	bcc.n	1034c <tcc_init+0x34>
   10374:	69e8      	ldr	r0, [r5, #28]
   10376:	4282      	cmp	r2, r0
   10378:	d200      	bcs.n	1037c <tcc_init+0x64>
   1037a:	e1b9      	b.n	106f0 <tcc_init+0x3d8>
   1037c:	6a28      	ldr	r0, [r5, #32]
   1037e:	4282      	cmp	r2, r0
   10380:	d200      	bcs.n	10384 <tcc_init+0x6c>
   10382:	e1b7      	b.n	106f4 <tcc_init+0x3dc>
   10384:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10386:	4282      	cmp	r2, r0
   10388:	d200      	bcs.n	1038c <tcc_init+0x74>
   1038a:	e1b5      	b.n	106f8 <tcc_init+0x3e0>
   1038c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1038e:	4282      	cmp	r2, r0
   10390:	d200      	bcs.n	10394 <tcc_init+0x7c>
   10392:	e1b3      	b.n	106fc <tcc_init+0x3e4>
   10394:	2298      	movs	r2, #152	; 0x98
   10396:	4694      	mov	ip, r2
   10398:	44ac      	add	ip, r5
   1039a:	4662      	mov	r2, ip
   1039c:	9208      	str	r2, [sp, #32]
   1039e:	2000      	movs	r0, #0
   103a0:	e003      	b.n	103aa <tcc_init+0x92>
   103a2:	3001      	adds	r0, #1
   103a4:	3201      	adds	r2, #1
   103a6:	2808      	cmp	r0, #8
   103a8:	d008      	beq.n	103bc <tcc_init+0xa4>
   103aa:	7816      	ldrb	r6, [r2, #0]
   103ac:	2e00      	cmp	r6, #0
   103ae:	d0f8      	beq.n	103a2 <tcc_init+0x8a>
   103b0:	4ea6      	ldr	r6, [pc, #664]	; (1064c <tcc_init+0x334>)
   103b2:	5c76      	ldrb	r6, [r6, r1]
   103b4:	4286      	cmp	r6, r0
   103b6:	dcf4      	bgt.n	103a2 <tcc_init+0x8a>
   103b8:	2017      	movs	r0, #23
   103ba:	e7c7      	b.n	1034c <tcc_init+0x34>
   103bc:	2200      	movs	r2, #0
   103be:	9202      	str	r2, [sp, #8]
   103c0:	2080      	movs	r0, #128	; 0x80
   103c2:	0440      	lsls	r0, r0, #17
   103c4:	4684      	mov	ip, r0
   103c6:	e002      	b.n	103ce <tcc_init+0xb6>
   103c8:	3201      	adds	r2, #1
   103ca:	2a04      	cmp	r2, #4
   103cc:	d00e      	beq.n	103ec <tcc_init+0xd4>
   103ce:	18a8      	adds	r0, r5, r2
   103d0:	7c00      	ldrb	r0, [r0, #16]
   103d2:	2801      	cmp	r0, #1
   103d4:	d1f8      	bne.n	103c8 <tcc_init+0xb0>
   103d6:	489e      	ldr	r0, [pc, #632]	; (10650 <tcc_init+0x338>)
   103d8:	5c40      	ldrb	r0, [r0, r1]
   103da:	4290      	cmp	r0, r2
   103dc:	da00      	bge.n	103e0 <tcc_init+0xc8>
   103de:	e18f      	b.n	10700 <tcc_init+0x3e8>
   103e0:	4660      	mov	r0, ip
   103e2:	4090      	lsls	r0, r2
   103e4:	9e02      	ldr	r6, [sp, #8]
   103e6:	4306      	orrs	r6, r0
   103e8:	9602      	str	r6, [sp, #8]
   103ea:	e7ed      	b.n	103c8 <tcc_init+0xb0>
   103ec:	329d      	adds	r2, #157	; 0x9d
   103ee:	5caa      	ldrb	r2, [r5, r2]
   103f0:	2a00      	cmp	r2, #0
   103f2:	d004      	beq.n	103fe <tcc_init+0xe6>
   103f4:	2280      	movs	r2, #128	; 0x80
   103f6:	0112      	lsls	r2, r2, #4
   103f8:	9902      	ldr	r1, [sp, #8]
   103fa:	4311      	orrs	r1, r2
   103fc:	9102      	str	r1, [sp, #8]
   103fe:	7a2a      	ldrb	r2, [r5, #8]
   10400:	1e51      	subs	r1, r2, #1
   10402:	418a      	sbcs	r2, r1
   10404:	0092      	lsls	r2, r2, #2
   10406:	9206      	str	r2, [sp, #24]
   10408:	7a6a      	ldrb	r2, [r5, #9]
   1040a:	2a01      	cmp	r2, #1
   1040c:	d022      	beq.n	10454 <tcc_init+0x13c>
   1040e:	4a90      	ldr	r2, [pc, #576]	; (10650 <tcc_init+0x338>)
   10410:	5cd2      	ldrb	r2, [r2, r3]
   10412:	0011      	movs	r1, r2
   10414:	9205      	str	r2, [sp, #20]
   10416:	2235      	movs	r2, #53	; 0x35
   10418:	5caa      	ldrb	r2, [r5, r2]
   1041a:	428a      	cmp	r2, r1
   1041c:	d300      	bcc.n	10420 <tcc_init+0x108>
   1041e:	e179      	b.n	10714 <tcc_init+0x3fc>
   10420:	212c      	movs	r1, #44	; 0x2c
   10422:	5c69      	ldrb	r1, [r5, r1]
   10424:	290f      	cmp	r1, #15
   10426:	d900      	bls.n	1042a <tcc_init+0x112>
   10428:	e174      	b.n	10714 <tcc_init+0x3fc>
   1042a:	7b28      	ldrb	r0, [r5, #12]
   1042c:	900a      	str	r0, [sp, #40]	; 0x28
   1042e:	7ae8      	ldrb	r0, [r5, #11]
   10430:	900b      	str	r0, [sp, #44]	; 0x2c
   10432:	202d      	movs	r0, #45	; 0x2d
   10434:	4682      	mov	sl, r0
   10436:	44aa      	add	sl, r5
   10438:	2000      	movs	r0, #0
   1043a:	9704      	str	r7, [sp, #16]
   1043c:	ae0e      	add	r6, sp, #56	; 0x38
   1043e:	9607      	str	r6, [sp, #28]
   10440:	26c0      	movs	r6, #192	; 0xc0
   10442:	0136      	lsls	r6, r6, #4
   10444:	46b1      	mov	r9, r6
   10446:	4684      	mov	ip, r0
   10448:	46a0      	mov	r8, r4
   1044a:	0028      	movs	r0, r5
   1044c:	4655      	mov	r5, sl
   1044e:	9309      	str	r3, [sp, #36]	; 0x24
   10450:	4682      	mov	sl, r0
   10452:	e035      	b.n	104c0 <tcc_init+0x1a8>
   10454:	9906      	ldr	r1, [sp, #24]
   10456:	4311      	orrs	r1, r2
   10458:	9106      	str	r1, [sp, #24]
   1045a:	e7d8      	b.n	1040e <tcc_init+0xf6>
   1045c:	0292      	lsls	r2, r2, #10
   1045e:	464f      	mov	r7, r9
   10460:	403a      	ands	r2, r7
   10462:	430a      	orrs	r2, r1
   10464:	7919      	ldrb	r1, [r3, #4]
   10466:	468b      	mov	fp, r1
   10468:	2103      	movs	r1, #3
   1046a:	465f      	mov	r7, fp
   1046c:	4039      	ands	r1, r7
   1046e:	430a      	orrs	r2, r1
   10470:	4316      	orrs	r6, r2
   10472:	795a      	ldrb	r2, [r3, #5]
   10474:	0152      	lsls	r2, r2, #5
   10476:	2160      	movs	r1, #96	; 0x60
   10478:	400a      	ands	r2, r1
   1047a:	4332      	orrs	r2, r6
   1047c:	7999      	ldrb	r1, [r3, #6]
   1047e:	0209      	lsls	r1, r1, #8
   10480:	26c0      	movs	r6, #192	; 0xc0
   10482:	00b6      	lsls	r6, r6, #2
   10484:	400e      	ands	r6, r1
   10486:	4316      	orrs	r6, r2
   10488:	79da      	ldrb	r2, [r3, #7]
   1048a:	0312      	lsls	r2, r2, #12
   1048c:	21e0      	movs	r1, #224	; 0xe0
   1048e:	01c9      	lsls	r1, r1, #7
   10490:	400a      	ands	r2, r1
   10492:	4316      	orrs	r6, r2
   10494:	4334      	orrs	r4, r6
   10496:	9a03      	ldr	r2, [sp, #12]
   10498:	4314      	orrs	r4, r2
   1049a:	4320      	orrs	r0, r4
   1049c:	4662      	mov	r2, ip
   1049e:	9907      	ldr	r1, [sp, #28]
   104a0:	5050      	str	r0, [r2, r1]
   104a2:	2a04      	cmp	r2, #4
   104a4:	d02a      	beq.n	104fc <tcc_init+0x1e4>
   104a6:	7c9a      	ldrb	r2, [r3, #18]
   104a8:	9905      	ldr	r1, [sp, #20]
   104aa:	4291      	cmp	r1, r2
   104ac:	d800      	bhi.n	104b0 <tcc_init+0x198>
   104ae:	e131      	b.n	10714 <tcc_init+0x3fc>
   104b0:	7a59      	ldrb	r1, [r3, #9]
   104b2:	350a      	adds	r5, #10
   104b4:	2304      	movs	r3, #4
   104b6:	469b      	mov	fp, r3
   104b8:	44dc      	add	ip, fp
   104ba:	290f      	cmp	r1, #15
   104bc:	d900      	bls.n	104c0 <tcc_init+0x1a8>
   104be:	e129      	b.n	10714 <tcc_init+0x3fc>
   104c0:	0609      	lsls	r1, r1, #24
   104c2:	23f0      	movs	r3, #240	; 0xf0
   104c4:	051b      	lsls	r3, r3, #20
   104c6:	4019      	ands	r1, r3
   104c8:	002b      	movs	r3, r5
   104ca:	782e      	ldrb	r6, [r5, #0]
   104cc:	0436      	lsls	r6, r6, #16
   104ce:	20ff      	movs	r0, #255	; 0xff
   104d0:	0400      	lsls	r0, r0, #16
   104d2:	4006      	ands	r6, r0
   104d4:	7868      	ldrb	r0, [r5, #1]
   104d6:	2480      	movs	r4, #128	; 0x80
   104d8:	2800      	cmp	r0, #0
   104da:	d100      	bne.n	104de <tcc_init+0x1c6>
   104dc:	9c04      	ldr	r4, [sp, #16]
   104de:	7898      	ldrb	r0, [r3, #2]
   104e0:	2708      	movs	r7, #8
   104e2:	9703      	str	r7, [sp, #12]
   104e4:	2800      	cmp	r0, #0
   104e6:	d101      	bne.n	104ec <tcc_init+0x1d4>
   104e8:	9804      	ldr	r0, [sp, #16]
   104ea:	9003      	str	r0, [sp, #12]
   104ec:	78d8      	ldrb	r0, [r3, #3]
   104ee:	4683      	mov	fp, r0
   104f0:	2010      	movs	r0, #16
   104f2:	465f      	mov	r7, fp
   104f4:	2f00      	cmp	r7, #0
   104f6:	d1b1      	bne.n	1045c <tcc_init+0x144>
   104f8:	9804      	ldr	r0, [sp, #16]
   104fa:	e7af      	b.n	1045c <tcc_init+0x144>
   104fc:	4644      	mov	r4, r8
   104fe:	4655      	mov	r5, sl
   10500:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10502:	4a52      	ldr	r2, [pc, #328]	; (1064c <tcc_init+0x334>)
   10504:	5cd2      	ldrb	r2, [r2, r3]
   10506:	4691      	mov	r9, r2
   10508:	4651      	mov	r1, sl
   1050a:	3150      	adds	r1, #80	; 0x50
   1050c:	4650      	mov	r0, sl
   1050e:	3041      	adds	r0, #65	; 0x41
   10510:	2700      	movs	r7, #0
   10512:	2200      	movs	r2, #0
   10514:	2601      	movs	r6, #1
   10516:	46b2      	mov	sl, r6
   10518:	2602      	movs	r6, #2
   1051a:	36ff      	adds	r6, #255	; 0xff
   1051c:	46b3      	mov	fp, r6
   1051e:	2680      	movs	r6, #128	; 0x80
   10520:	0276      	lsls	r6, r6, #9
   10522:	46b0      	mov	r8, r6
   10524:	46a4      	mov	ip, r4
   10526:	001c      	movs	r4, r3
   10528:	464b      	mov	r3, r9
   1052a:	e00f      	b.n	1054c <tcc_init+0x234>
   1052c:	7806      	ldrb	r6, [r0, #0]
   1052e:	2e00      	cmp	r6, #0
   10530:	d007      	beq.n	10542 <tcc_init+0x22a>
   10532:	4293      	cmp	r3, r2
   10534:	d800      	bhi.n	10538 <tcc_init+0x220>
   10536:	e0e7      	b.n	10708 <tcc_init+0x3f0>
   10538:	2e02      	cmp	r6, #2
   1053a:	d014      	beq.n	10566 <tcc_init+0x24e>
   1053c:	4656      	mov	r6, sl
   1053e:	4096      	lsls	r6, r2
   10540:	4337      	orrs	r7, r6
   10542:	3201      	adds	r2, #1
   10544:	3101      	adds	r1, #1
   10546:	3002      	adds	r0, #2
   10548:	2a08      	cmp	r2, #8
   1054a:	d010      	beq.n	1056e <tcc_init+0x256>
   1054c:	780e      	ldrb	r6, [r1, #0]
   1054e:	2e00      	cmp	r6, #0
   10550:	d0ec      	beq.n	1052c <tcc_init+0x214>
   10552:	4293      	cmp	r3, r2
   10554:	d800      	bhi.n	10558 <tcc_init+0x240>
   10556:	e0d5      	b.n	10704 <tcc_init+0x3ec>
   10558:	4646      	mov	r6, r8
   1055a:	4096      	lsls	r6, r2
   1055c:	4337      	orrs	r7, r6
   1055e:	7806      	ldrb	r6, [r0, #0]
   10560:	2e00      	cmp	r6, #0
   10562:	d1e9      	bne.n	10538 <tcc_init+0x220>
   10564:	e7ed      	b.n	10542 <tcc_init+0x22a>
   10566:	465e      	mov	r6, fp
   10568:	4096      	lsls	r6, r2
   1056a:	4337      	orrs	r7, r6
   1056c:	e7e9      	b.n	10542 <tcc_init+0x22a>
   1056e:	4699      	mov	r9, r3
   10570:	0023      	movs	r3, r4
   10572:	4664      	mov	r4, ip
   10574:	7e6a      	ldrb	r2, [r5, #25]
   10576:	0112      	lsls	r2, r2, #4
   10578:	2130      	movs	r1, #48	; 0x30
   1057a:	4011      	ands	r1, r2
   1057c:	7e28      	ldrb	r0, [r5, #24]
   1057e:	2207      	movs	r2, #7
   10580:	4002      	ands	r2, r0
   10582:	4311      	orrs	r1, r2
   10584:	2200      	movs	r2, #0
   10586:	2080      	movs	r0, #128	; 0x80
   10588:	0240      	lsls	r0, r0, #9
   1058a:	000e      	movs	r6, r1
   1058c:	e002      	b.n	10594 <tcc_init+0x27c>
   1058e:	3201      	adds	r2, #1
   10590:	2a04      	cmp	r2, #4
   10592:	d00b      	beq.n	105ac <tcc_init+0x294>
   10594:	18a9      	adds	r1, r5, r2
   10596:	7d09      	ldrb	r1, [r1, #20]
   10598:	2900      	cmp	r1, #0
   1059a:	d0f8      	beq.n	1058e <tcc_init+0x276>
   1059c:	9905      	ldr	r1, [sp, #20]
   1059e:	4291      	cmp	r1, r2
   105a0:	dc00      	bgt.n	105a4 <tcc_init+0x28c>
   105a2:	e0b3      	b.n	1070c <tcc_init+0x3f4>
   105a4:	0001      	movs	r1, r0
   105a6:	4091      	lsls	r1, r2
   105a8:	430e      	orrs	r6, r1
   105aa:	e7f0      	b.n	1058e <tcc_init+0x276>
   105ac:	46b2      	mov	sl, r6
   105ae:	9801      	ldr	r0, [sp, #4]
   105b0:	0002      	movs	r2, r0
   105b2:	3204      	adds	r2, #4
   105b4:	3034      	adds	r0, #52	; 0x34
   105b6:	2100      	movs	r1, #0
   105b8:	c202      	stmia	r2!, {r1}
   105ba:	4282      	cmp	r2, r0
   105bc:	d1fc      	bne.n	105b8 <tcc_init+0x2a0>
   105be:	2200      	movs	r2, #0
   105c0:	9801      	ldr	r0, [sp, #4]
   105c2:	6342      	str	r2, [r0, #52]	; 0x34
   105c4:	6382      	str	r2, [r0, #56]	; 0x38
   105c6:	0099      	lsls	r1, r3, #2
   105c8:	4a22      	ldr	r2, [pc, #136]	; (10654 <tcc_init+0x33c>)
   105ca:	5088      	str	r0, [r1, r2]
   105cc:	6004      	str	r4, [r0, #0]
   105ce:	22a0      	movs	r2, #160	; 0xa0
   105d0:	5ca9      	ldrb	r1, [r5, r2]
   105d2:	3a64      	subs	r2, #100	; 0x64
   105d4:	5481      	strb	r1, [r0, r2]
   105d6:	a90d      	add	r1, sp, #52	; 0x34
   105d8:	7aaa      	ldrb	r2, [r5, #10]
   105da:	700a      	strb	r2, [r1, #0]
   105dc:	4a1e      	ldr	r2, [pc, #120]	; (10658 <tcc_init+0x340>)
   105de:	5cd6      	ldrb	r6, [r2, r3]
   105e0:	0030      	movs	r0, r6
   105e2:	4b1e      	ldr	r3, [pc, #120]	; (1065c <tcc_init+0x344>)
   105e4:	4798      	blx	r3
   105e6:	0030      	movs	r0, r6
   105e8:	4b1d      	ldr	r3, [pc, #116]	; (10660 <tcc_init+0x348>)
   105ea:	4798      	blx	r3
   105ec:	464b      	mov	r3, r9
   105ee:	2b00      	cmp	r3, #0
   105f0:	dd3c      	ble.n	1066c <tcc_init+0x354>
   105f2:	002e      	movs	r6, r5
   105f4:	3658      	adds	r6, #88	; 0x58
   105f6:	3398      	adds	r3, #152	; 0x98
   105f8:	4698      	mov	r8, r3
   105fa:	44a8      	add	r8, r5
   105fc:	2301      	movs	r3, #1
   105fe:	4699      	mov	r9, r3
   10600:	46ab      	mov	fp, r5
   10602:	4645      	mov	r5, r8
   10604:	46a0      	mov	r8, r4
   10606:	9c08      	ldr	r4, [sp, #32]
   10608:	e003      	b.n	10612 <tcc_init+0x2fa>
   1060a:	3401      	adds	r4, #1
   1060c:	3604      	adds	r6, #4
   1060e:	42ac      	cmp	r4, r5
   10610:	d02a      	beq.n	10668 <tcc_init+0x350>
   10612:	7823      	ldrb	r3, [r4, #0]
   10614:	2b00      	cmp	r3, #0
   10616:	d0f8      	beq.n	1060a <tcc_init+0x2f2>
   10618:	ab0c      	add	r3, sp, #48	; 0x30
   1061a:	464a      	mov	r2, r9
   1061c:	709a      	strb	r2, [r3, #2]
   1061e:	2300      	movs	r3, #0
   10620:	aa0c      	add	r2, sp, #48	; 0x30
   10622:	70d3      	strb	r3, [r2, #3]
   10624:	0013      	movs	r3, r2
   10626:	2220      	movs	r2, #32
   10628:	18b2      	adds	r2, r6, r2
   1062a:	7812      	ldrb	r2, [r2, #0]
   1062c:	701a      	strb	r2, [r3, #0]
   1062e:	464a      	mov	r2, r9
   10630:	705a      	strb	r2, [r3, #1]
   10632:	7830      	ldrb	r0, [r6, #0]
   10634:	0019      	movs	r1, r3
   10636:	4b0b      	ldr	r3, [pc, #44]	; (10664 <tcc_init+0x34c>)
   10638:	4798      	blx	r3
   1063a:	e7e6      	b.n	1060a <tcc_init+0x2f2>
   1063c:	00010199 	.word	0x00010199
   10640:	40000400 	.word	0x40000400
   10644:	00019e60 	.word	0x00019e60
   10648:	00019e74 	.word	0x00019e74
   1064c:	00019e80 	.word	0x00019e80
   10650:	00019e6c 	.word	0x00019e6c
   10654:	20001124 	.word	0x20001124
   10658:	00019e70 	.word	0x00019e70
   1065c:	00010041 	.word	0x00010041
   10660:	0000ffb5 	.word	0x0000ffb5
   10664:	00010139 	.word	0x00010139
   10668:	4644      	mov	r4, r8
   1066a:	465d      	mov	r5, fp
   1066c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1066e:	031b      	lsls	r3, r3, #12
   10670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10672:	0212      	lsls	r2, r2, #8
   10674:	4313      	orrs	r3, r2
   10676:	9a02      	ldr	r2, [sp, #8]
   10678:	4313      	orrs	r3, r2
   1067a:	6023      	str	r3, [r4, #0]
   1067c:	2204      	movs	r2, #4
   1067e:	68a3      	ldr	r3, [r4, #8]
   10680:	421a      	tst	r2, r3
   10682:	d1fc      	bne.n	1067e <tcc_init+0x366>
   10684:	23ff      	movs	r3, #255	; 0xff
   10686:	7123      	strb	r3, [r4, #4]
   10688:	2204      	movs	r2, #4
   1068a:	68a3      	ldr	r3, [r4, #8]
   1068c:	421a      	tst	r2, r3
   1068e:	d1fc      	bne.n	1068a <tcc_init+0x372>
   10690:	466b      	mov	r3, sp
   10692:	7e1b      	ldrb	r3, [r3, #24]
   10694:	7163      	strb	r3, [r4, #5]
   10696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10698:	60e3      	str	r3, [r4, #12]
   1069a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1069c:	6123      	str	r3, [r4, #16]
   1069e:	61a7      	str	r7, [r4, #24]
   106a0:	4a1d      	ldr	r2, [pc, #116]	; (10718 <tcc_init+0x400>)
   106a2:	68a3      	ldr	r3, [r4, #8]
   106a4:	4213      	tst	r3, r2
   106a6:	d1fc      	bne.n	106a2 <tcc_init+0x38a>
   106a8:	4653      	mov	r3, sl
   106aa:	63e3      	str	r3, [r4, #60]	; 0x3c
   106ac:	2210      	movs	r2, #16
   106ae:	68a3      	ldr	r3, [r4, #8]
   106b0:	421a      	tst	r2, r3
   106b2:	d1fc      	bne.n	106ae <tcc_init+0x396>
   106b4:	682b      	ldr	r3, [r5, #0]
   106b6:	6363      	str	r3, [r4, #52]	; 0x34
   106b8:	4a18      	ldr	r2, [pc, #96]	; (1071c <tcc_init+0x404>)
   106ba:	68a3      	ldr	r3, [r4, #8]
   106bc:	4213      	tst	r3, r2
   106be:	d1fc      	bne.n	106ba <tcc_init+0x3a2>
   106c0:	686b      	ldr	r3, [r5, #4]
   106c2:	6423      	str	r3, [r4, #64]	; 0x40
   106c4:	9805      	ldr	r0, [sp, #20]
   106c6:	2800      	cmp	r0, #0
   106c8:	dd22      	ble.n	10710 <tcc_init+0x3f8>
   106ca:	351c      	adds	r5, #28
   106cc:	2100      	movs	r1, #0
   106ce:	4e14      	ldr	r6, [pc, #80]	; (10720 <tcc_init+0x408>)
   106d0:	0032      	movs	r2, r6
   106d2:	408a      	lsls	r2, r1
   106d4:	68a3      	ldr	r3, [r4, #8]
   106d6:	421a      	tst	r2, r3
   106d8:	d1fc      	bne.n	106d4 <tcc_init+0x3bc>
   106da:	cd04      	ldmia	r5!, {r2}
   106dc:	000b      	movs	r3, r1
   106de:	3310      	adds	r3, #16
   106e0:	009b      	lsls	r3, r3, #2
   106e2:	18e3      	adds	r3, r4, r3
   106e4:	605a      	str	r2, [r3, #4]
   106e6:	3101      	adds	r1, #1
   106e8:	4288      	cmp	r0, r1
   106ea:	dcf1      	bgt.n	106d0 <tcc_init+0x3b8>
   106ec:	2000      	movs	r0, #0
   106ee:	e62d      	b.n	1034c <tcc_init+0x34>
   106f0:	2017      	movs	r0, #23
   106f2:	e62b      	b.n	1034c <tcc_init+0x34>
   106f4:	2017      	movs	r0, #23
   106f6:	e629      	b.n	1034c <tcc_init+0x34>
   106f8:	2017      	movs	r0, #23
   106fa:	e627      	b.n	1034c <tcc_init+0x34>
   106fc:	2017      	movs	r0, #23
   106fe:	e625      	b.n	1034c <tcc_init+0x34>
   10700:	2017      	movs	r0, #23
   10702:	e623      	b.n	1034c <tcc_init+0x34>
   10704:	2017      	movs	r0, #23
   10706:	e621      	b.n	1034c <tcc_init+0x34>
   10708:	2017      	movs	r0, #23
   1070a:	e61f      	b.n	1034c <tcc_init+0x34>
   1070c:	2017      	movs	r0, #23
   1070e:	e61d      	b.n	1034c <tcc_init+0x34>
   10710:	2000      	movs	r0, #0
   10712:	e61b      	b.n	1034c <tcc_init+0x34>
   10714:	2017      	movs	r0, #23
   10716:	e619      	b.n	1034c <tcc_init+0x34>
   10718:	00020040 	.word	0x00020040
   1071c:	00040080 	.word	0x00040080
   10720:	00080100 	.word	0x00080100

00010724 <tcc_register_callback>:
   10724:	0092      	lsls	r2, r2, #2
   10726:	1883      	adds	r3, r0, r2
   10728:	6059      	str	r1, [r3, #4]
   1072a:	4b03      	ldr	r3, [pc, #12]	; (10738 <tcc_register_callback+0x14>)
   1072c:	58d3      	ldr	r3, [r2, r3]
   1072e:	6b42      	ldr	r2, [r0, #52]	; 0x34
   10730:	4313      	orrs	r3, r2
   10732:	6343      	str	r3, [r0, #52]	; 0x34
   10734:	2000      	movs	r0, #0
   10736:	4770      	bx	lr
   10738:	00019e84 	.word	0x00019e84

0001073c <tcc_enable_callback>:
   1073c:	b570      	push	{r4, r5, r6, lr}
   1073e:	0004      	movs	r4, r0
   10740:	000d      	movs	r5, r1
   10742:	6800      	ldr	r0, [r0, #0]
   10744:	4b09      	ldr	r3, [pc, #36]	; (1076c <tcc_enable_callback+0x30>)
   10746:	4798      	blx	r3
   10748:	4b09      	ldr	r3, [pc, #36]	; (10770 <tcc_enable_callback+0x34>)
   1074a:	5c1b      	ldrb	r3, [r3, r0]
   1074c:	221f      	movs	r2, #31
   1074e:	401a      	ands	r2, r3
   10750:	2301      	movs	r3, #1
   10752:	4093      	lsls	r3, r2
   10754:	4a07      	ldr	r2, [pc, #28]	; (10774 <tcc_enable_callback+0x38>)
   10756:	6013      	str	r3, [r2, #0]
   10758:	00ad      	lsls	r5, r5, #2
   1075a:	4b07      	ldr	r3, [pc, #28]	; (10778 <tcc_enable_callback+0x3c>)
   1075c:	58ea      	ldr	r2, [r5, r3]
   1075e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10760:	4313      	orrs	r3, r2
   10762:	63a3      	str	r3, [r4, #56]	; 0x38
   10764:	6823      	ldr	r3, [r4, #0]
   10766:	629a      	str	r2, [r3, #40]	; 0x28
   10768:	bd70      	pop	{r4, r5, r6, pc}
   1076a:	46c0      	nop			; (mov r8, r8)
   1076c:	00010199 	.word	0x00010199
   10770:	00019eb4 	.word	0x00019eb4
   10774:	e000e100 	.word	0xe000e100
   10778:	00019e84 	.word	0x00019e84

0001077c <_tcc_interrupt_handler>:
   1077c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1077e:	46c6      	mov	lr, r8
   10780:	b500      	push	{lr}
   10782:	0080      	lsls	r0, r0, #2
   10784:	4b0e      	ldr	r3, [pc, #56]	; (107c0 <_tcc_interrupt_handler+0x44>)
   10786:	58c7      	ldr	r7, [r0, r3]
   10788:	683b      	ldr	r3, [r7, #0]
   1078a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1078c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1078e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   10790:	4013      	ands	r3, r2
   10792:	401e      	ands	r6, r3
   10794:	2400      	movs	r4, #0
   10796:	4b0b      	ldr	r3, [pc, #44]	; (107c4 <_tcc_interrupt_handler+0x48>)
   10798:	4698      	mov	r8, r3
   1079a:	e002      	b.n	107a2 <_tcc_interrupt_handler+0x26>
   1079c:	3404      	adds	r4, #4
   1079e:	2c30      	cmp	r4, #48	; 0x30
   107a0:	d00a      	beq.n	107b8 <_tcc_interrupt_handler+0x3c>
   107a2:	4643      	mov	r3, r8
   107a4:	58e5      	ldr	r5, [r4, r3]
   107a6:	4235      	tst	r5, r6
   107a8:	d0f8      	beq.n	1079c <_tcc_interrupt_handler+0x20>
   107aa:	193b      	adds	r3, r7, r4
   107ac:	685b      	ldr	r3, [r3, #4]
   107ae:	0038      	movs	r0, r7
   107b0:	4798      	blx	r3
   107b2:	683b      	ldr	r3, [r7, #0]
   107b4:	62dd      	str	r5, [r3, #44]	; 0x2c
   107b6:	e7f1      	b.n	1079c <_tcc_interrupt_handler+0x20>
   107b8:	bc04      	pop	{r2}
   107ba:	4690      	mov	r8, r2
   107bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   107be:	46c0      	nop			; (mov r8, r8)
   107c0:	20001124 	.word	0x20001124
   107c4:	00019e84 	.word	0x00019e84

000107c8 <TCC0_Handler>:
   107c8:	b510      	push	{r4, lr}
   107ca:	2000      	movs	r0, #0
   107cc:	4b01      	ldr	r3, [pc, #4]	; (107d4 <TCC0_Handler+0xc>)
   107ce:	4798      	blx	r3
   107d0:	bd10      	pop	{r4, pc}
   107d2:	46c0      	nop			; (mov r8, r8)
   107d4:	0001077d 	.word	0x0001077d

000107d8 <TCC1_Handler>:
   107d8:	b510      	push	{r4, lr}
   107da:	2001      	movs	r0, #1
   107dc:	4b01      	ldr	r3, [pc, #4]	; (107e4 <TCC1_Handler+0xc>)
   107de:	4798      	blx	r3
   107e0:	bd10      	pop	{r4, pc}
   107e2:	46c0      	nop			; (mov r8, r8)
   107e4:	0001077d 	.word	0x0001077d

000107e8 <TCC2_Handler>:
   107e8:	b510      	push	{r4, lr}
   107ea:	2002      	movs	r0, #2
   107ec:	4b01      	ldr	r3, [pc, #4]	; (107f4 <TCC2_Handler+0xc>)
   107ee:	4798      	blx	r3
   107f0:	bd10      	pop	{r4, pc}
   107f2:	46c0      	nop			; (mov r8, r8)
   107f4:	0001077d 	.word	0x0001077d

000107f8 <Dummy_Handler>:
   107f8:	e7fe      	b.n	107f8 <Dummy_Handler>
	...

000107fc <Reset_Handler>:
   107fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   107fe:	4a2a      	ldr	r2, [pc, #168]	; (108a8 <Reset_Handler+0xac>)
   10800:	4b2a      	ldr	r3, [pc, #168]	; (108ac <Reset_Handler+0xb0>)
   10802:	429a      	cmp	r2, r3
   10804:	d011      	beq.n	1082a <Reset_Handler+0x2e>
   10806:	001a      	movs	r2, r3
   10808:	4b29      	ldr	r3, [pc, #164]	; (108b0 <Reset_Handler+0xb4>)
   1080a:	429a      	cmp	r2, r3
   1080c:	d20d      	bcs.n	1082a <Reset_Handler+0x2e>
   1080e:	4a29      	ldr	r2, [pc, #164]	; (108b4 <Reset_Handler+0xb8>)
   10810:	3303      	adds	r3, #3
   10812:	1a9b      	subs	r3, r3, r2
   10814:	089b      	lsrs	r3, r3, #2
   10816:	3301      	adds	r3, #1
   10818:	009b      	lsls	r3, r3, #2
   1081a:	2200      	movs	r2, #0
   1081c:	4823      	ldr	r0, [pc, #140]	; (108ac <Reset_Handler+0xb0>)
   1081e:	4922      	ldr	r1, [pc, #136]	; (108a8 <Reset_Handler+0xac>)
   10820:	588c      	ldr	r4, [r1, r2]
   10822:	5084      	str	r4, [r0, r2]
   10824:	3204      	adds	r2, #4
   10826:	429a      	cmp	r2, r3
   10828:	d1fa      	bne.n	10820 <Reset_Handler+0x24>
   1082a:	4a23      	ldr	r2, [pc, #140]	; (108b8 <Reset_Handler+0xbc>)
   1082c:	4b23      	ldr	r3, [pc, #140]	; (108bc <Reset_Handler+0xc0>)
   1082e:	429a      	cmp	r2, r3
   10830:	d20a      	bcs.n	10848 <Reset_Handler+0x4c>
   10832:	43d3      	mvns	r3, r2
   10834:	4921      	ldr	r1, [pc, #132]	; (108bc <Reset_Handler+0xc0>)
   10836:	185b      	adds	r3, r3, r1
   10838:	2103      	movs	r1, #3
   1083a:	438b      	bics	r3, r1
   1083c:	3304      	adds	r3, #4
   1083e:	189b      	adds	r3, r3, r2
   10840:	2100      	movs	r1, #0
   10842:	c202      	stmia	r2!, {r1}
   10844:	4293      	cmp	r3, r2
   10846:	d1fc      	bne.n	10842 <Reset_Handler+0x46>
   10848:	4a1d      	ldr	r2, [pc, #116]	; (108c0 <Reset_Handler+0xc4>)
   1084a:	21ff      	movs	r1, #255	; 0xff
   1084c:	4b1d      	ldr	r3, [pc, #116]	; (108c4 <Reset_Handler+0xc8>)
   1084e:	438b      	bics	r3, r1
   10850:	6093      	str	r3, [r2, #8]
   10852:	39fd      	subs	r1, #253	; 0xfd
   10854:	2390      	movs	r3, #144	; 0x90
   10856:	005b      	lsls	r3, r3, #1
   10858:	4a1b      	ldr	r2, [pc, #108]	; (108c8 <Reset_Handler+0xcc>)
   1085a:	50d1      	str	r1, [r2, r3]
   1085c:	4a1b      	ldr	r2, [pc, #108]	; (108cc <Reset_Handler+0xd0>)
   1085e:	78d3      	ldrb	r3, [r2, #3]
   10860:	2503      	movs	r5, #3
   10862:	43ab      	bics	r3, r5
   10864:	2402      	movs	r4, #2
   10866:	4323      	orrs	r3, r4
   10868:	70d3      	strb	r3, [r2, #3]
   1086a:	78d3      	ldrb	r3, [r2, #3]
   1086c:	270c      	movs	r7, #12
   1086e:	43bb      	bics	r3, r7
   10870:	2608      	movs	r6, #8
   10872:	4333      	orrs	r3, r6
   10874:	70d3      	strb	r3, [r2, #3]
   10876:	4b16      	ldr	r3, [pc, #88]	; (108d0 <Reset_Handler+0xd4>)
   10878:	7b98      	ldrb	r0, [r3, #14]
   1087a:	2230      	movs	r2, #48	; 0x30
   1087c:	4390      	bics	r0, r2
   1087e:	2220      	movs	r2, #32
   10880:	4310      	orrs	r0, r2
   10882:	7398      	strb	r0, [r3, #14]
   10884:	7b99      	ldrb	r1, [r3, #14]
   10886:	43b9      	bics	r1, r7
   10888:	4331      	orrs	r1, r6
   1088a:	7399      	strb	r1, [r3, #14]
   1088c:	7b9a      	ldrb	r2, [r3, #14]
   1088e:	43aa      	bics	r2, r5
   10890:	4322      	orrs	r2, r4
   10892:	739a      	strb	r2, [r3, #14]
   10894:	4a0f      	ldr	r2, [pc, #60]	; (108d4 <Reset_Handler+0xd8>)
   10896:	6853      	ldr	r3, [r2, #4]
   10898:	2180      	movs	r1, #128	; 0x80
   1089a:	430b      	orrs	r3, r1
   1089c:	6053      	str	r3, [r2, #4]
   1089e:	4b0e      	ldr	r3, [pc, #56]	; (108d8 <Reset_Handler+0xdc>)
   108a0:	4798      	blx	r3
   108a2:	4b0e      	ldr	r3, [pc, #56]	; (108dc <Reset_Handler+0xe0>)
   108a4:	4798      	blx	r3
   108a6:	e7fe      	b.n	108a6 <Reset_Handler+0xaa>
   108a8:	0001b870 	.word	0x0001b870
   108ac:	20000000 	.word	0x20000000
   108b0:	2000034c 	.word	0x2000034c
   108b4:	20000004 	.word	0x20000004
   108b8:	2000034c 	.word	0x2000034c
   108bc:	2000136c 	.word	0x2000136c
   108c0:	e000ed00 	.word	0xe000ed00
   108c4:	00009c00 	.word	0x00009c00
   108c8:	41007000 	.word	0x41007000
   108cc:	41005000 	.word	0x41005000
   108d0:	41004800 	.word	0x41004800
   108d4:	41004000 	.word	0x41004000
   108d8:	000169dd 	.word	0x000169dd
   108dc:	00016185 	.word	0x00016185

000108e0 <_read>:
   108e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   108e2:	46c6      	mov	lr, r8
   108e4:	b500      	push	{lr}
   108e6:	000c      	movs	r4, r1
   108e8:	4690      	mov	r8, r2
   108ea:	2800      	cmp	r0, #0
   108ec:	d10f      	bne.n	1090e <_read+0x2e>
   108ee:	2a00      	cmp	r2, #0
   108f0:	dd11      	ble.n	10916 <_read+0x36>
   108f2:	188f      	adds	r7, r1, r2
   108f4:	4e09      	ldr	r6, [pc, #36]	; (1091c <_read+0x3c>)
   108f6:	4d0a      	ldr	r5, [pc, #40]	; (10920 <_read+0x40>)
   108f8:	6830      	ldr	r0, [r6, #0]
   108fa:	0021      	movs	r1, r4
   108fc:	682b      	ldr	r3, [r5, #0]
   108fe:	4798      	blx	r3
   10900:	3401      	adds	r4, #1
   10902:	42bc      	cmp	r4, r7
   10904:	d1f8      	bne.n	108f8 <_read+0x18>
   10906:	4640      	mov	r0, r8
   10908:	bc04      	pop	{r2}
   1090a:	4690      	mov	r8, r2
   1090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1090e:	2301      	movs	r3, #1
   10910:	425b      	negs	r3, r3
   10912:	4698      	mov	r8, r3
   10914:	e7f7      	b.n	10906 <_read+0x26>
   10916:	4680      	mov	r8, r0
   10918:	e7f5      	b.n	10906 <_read+0x26>
   1091a:	46c0      	nop			; (mov r8, r8)
   1091c:	20001138 	.word	0x20001138
   10920:	20001130 	.word	0x20001130

00010924 <_write>:
   10924:	b5f0      	push	{r4, r5, r6, r7, lr}
   10926:	46c6      	mov	lr, r8
   10928:	b500      	push	{lr}
   1092a:	000e      	movs	r6, r1
   1092c:	0015      	movs	r5, r2
   1092e:	3801      	subs	r0, #1
   10930:	2802      	cmp	r0, #2
   10932:	d810      	bhi.n	10956 <_write+0x32>
   10934:	2a00      	cmp	r2, #0
   10936:	d011      	beq.n	1095c <_write+0x38>
   10938:	2400      	movs	r4, #0
   1093a:	4b0c      	ldr	r3, [pc, #48]	; (1096c <_write+0x48>)
   1093c:	4698      	mov	r8, r3
   1093e:	4f0c      	ldr	r7, [pc, #48]	; (10970 <_write+0x4c>)
   10940:	4643      	mov	r3, r8
   10942:	6818      	ldr	r0, [r3, #0]
   10944:	5d31      	ldrb	r1, [r6, r4]
   10946:	683b      	ldr	r3, [r7, #0]
   10948:	4798      	blx	r3
   1094a:	2800      	cmp	r0, #0
   1094c:	db08      	blt.n	10960 <_write+0x3c>
   1094e:	3401      	adds	r4, #1
   10950:	42a5      	cmp	r5, r4
   10952:	d1f5      	bne.n	10940 <_write+0x1c>
   10954:	e006      	b.n	10964 <_write+0x40>
   10956:	2401      	movs	r4, #1
   10958:	4264      	negs	r4, r4
   1095a:	e003      	b.n	10964 <_write+0x40>
   1095c:	0014      	movs	r4, r2
   1095e:	e001      	b.n	10964 <_write+0x40>
   10960:	2401      	movs	r4, #1
   10962:	4264      	negs	r4, r4
   10964:	0020      	movs	r0, r4
   10966:	bc04      	pop	{r2}
   10968:	4690      	mov	r8, r2
   1096a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1096c:	20001138 	.word	0x20001138
   10970:	20001134 	.word	0x20001134

00010974 <_sbrk>:
   10974:	0003      	movs	r3, r0
   10976:	4a06      	ldr	r2, [pc, #24]	; (10990 <_sbrk+0x1c>)
   10978:	6812      	ldr	r2, [r2, #0]
   1097a:	2a00      	cmp	r2, #0
   1097c:	d004      	beq.n	10988 <_sbrk+0x14>
   1097e:	4a04      	ldr	r2, [pc, #16]	; (10990 <_sbrk+0x1c>)
   10980:	6810      	ldr	r0, [r2, #0]
   10982:	18c3      	adds	r3, r0, r3
   10984:	6013      	str	r3, [r2, #0]
   10986:	4770      	bx	lr
   10988:	4902      	ldr	r1, [pc, #8]	; (10994 <_sbrk+0x20>)
   1098a:	4a01      	ldr	r2, [pc, #4]	; (10990 <_sbrk+0x1c>)
   1098c:	6011      	str	r1, [r2, #0]
   1098e:	e7f6      	b.n	1097e <_sbrk+0xa>
   10990:	20000448 	.word	0x20000448
   10994:	20003370 	.word	0x20003370

00010998 <_close>:
   10998:	2001      	movs	r0, #1
   1099a:	4240      	negs	r0, r0
   1099c:	4770      	bx	lr

0001099e <_fstat>:
   1099e:	2380      	movs	r3, #128	; 0x80
   109a0:	019b      	lsls	r3, r3, #6
   109a2:	604b      	str	r3, [r1, #4]
   109a4:	2000      	movs	r0, #0
   109a6:	4770      	bx	lr

000109a8 <_isatty>:
   109a8:	2001      	movs	r0, #1
   109aa:	4770      	bx	lr

000109ac <_lseek>:
   109ac:	2000      	movs	r0, #0
   109ae:	4770      	bx	lr

000109b0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   109b0:	b530      	push	{r4, r5, lr}
   109b2:	b087      	sub	sp, #28
   109b4:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   109b6:	aa01      	add	r2, sp, #4
   109b8:	23a0      	movs	r3, #160	; 0xa0
   109ba:	011b      	lsls	r3, r3, #4
   109bc:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   109be:	2300      	movs	r3, #0
   109c0:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   109c2:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   109c4:	21fa      	movs	r1, #250	; 0xfa
   109c6:	00c9      	lsls	r1, r1, #3
   109c8:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   109ca:	2101      	movs	r1, #1
   109cc:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   109ce:	2004      	movs	r0, #4
   109d0:	7210      	strb	r0, [r2, #8]
   109d2:	7253      	strb	r3, [r2, #9]
   109d4:	7293      	strb	r3, [r2, #10]
   109d6:	72d3      	strb	r3, [r2, #11]
   109d8:	7311      	strb	r1, [r2, #12]
   109da:	7351      	strb	r1, [r2, #13]
   109dc:	4b14      	ldr	r3, [pc, #80]	; (10a30 <disk_initialize+0x80>)
   109de:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   109e0:	2306      	movs	r3, #6
   109e2:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   109e4:	4d13      	ldr	r5, [pc, #76]	; (10a34 <disk_initialize+0x84>)
   109e6:	4914      	ldr	r1, [pc, #80]	; (10a38 <disk_initialize+0x88>)
   109e8:	0028      	movs	r0, r5
   109ea:	4b14      	ldr	r3, [pc, #80]	; (10a3c <disk_initialize+0x8c>)
   109ec:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   109ee:	0028      	movs	r0, r5
   109f0:	4b13      	ldr	r3, [pc, #76]	; (10a40 <disk_initialize+0x90>)
   109f2:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   109f4:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   109f6:	2c01      	cmp	r4, #1
   109f8:	d901      	bls.n	109fe <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   109fa:	b007      	add	sp, #28
   109fc:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   109fe:	0020      	movs	r0, r4
   10a00:	4b10      	ldr	r3, [pc, #64]	; (10a44 <disk_initialize+0x94>)
   10a02:	4798      	blx	r3
   10a04:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   10a06:	2803      	cmp	r0, #3
   10a08:	d106      	bne.n	10a18 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   10a0a:	0020      	movs	r0, r4
   10a0c:	4b0d      	ldr	r3, [pc, #52]	; (10a44 <disk_initialize+0x94>)
   10a0e:	4798      	blx	r3
   10a10:	0003      	movs	r3, r0
		return STA_NOINIT;
   10a12:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   10a14:	2b03      	cmp	r3, #3
   10a16:	d0f0      	beq.n	109fa <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   10a18:	2b00      	cmp	r3, #0
   10a1a:	d106      	bne.n	10a2a <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   10a1c:	0020      	movs	r0, r4
   10a1e:	4b0a      	ldr	r3, [pc, #40]	; (10a48 <disk_initialize+0x98>)
   10a20:	4798      	blx	r3
	return 0;
   10a22:	1e43      	subs	r3, r0, #1
   10a24:	4198      	sbcs	r0, r3
   10a26:	0080      	lsls	r0, r0, #2
   10a28:	e7e7      	b.n	109fa <disk_initialize+0x4a>
		return STA_NOINIT;
   10a2a:	2001      	movs	r0, #1
   10a2c:	e7e5      	b.n	109fa <disk_initialize+0x4a>
   10a2e:	46c0      	nop			; (mov r8, r8)
   10a30:	000007de 	.word	0x000007de
   10a34:	2000113c 	.word	0x2000113c
   10a38:	40001400 	.word	0x40001400
   10a3c:	0000e875 	.word	0x0000e875
   10a40:	0000e711 	.word	0x0000e711
   10a44:	0000e149 	.word	0x0000e149
   10a48:	0000e185 	.word	0x0000e185

00010a4c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   10a4c:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   10a4e:	4b05      	ldr	r3, [pc, #20]	; (10a64 <disk_status+0x18>)
   10a50:	4798      	blx	r3
   10a52:	1e03      	subs	r3, r0, #0
   10a54:	d004      	beq.n	10a60 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   10a56:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   10a58:	2b02      	cmp	r3, #2
   10a5a:	d000      	beq.n	10a5e <disk_status+0x12>
	default:
		return STA_NOINIT;
   10a5c:	3802      	subs	r0, #2
	}
}
   10a5e:	bd10      	pop	{r4, pc}
		return 0;
   10a60:	2000      	movs	r0, #0
   10a62:	e7fc      	b.n	10a5e <disk_status+0x12>
   10a64:	0000e149 	.word	0x0000e149

00010a68 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   10a68:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a6a:	46de      	mov	lr, fp
   10a6c:	464f      	mov	r7, r9
   10a6e:	4646      	mov	r6, r8
   10a70:	b5c0      	push	{r6, r7, lr}
   10a72:	b084      	sub	sp, #16
   10a74:	9001      	str	r0, [sp, #4]
   10a76:	000d      	movs	r5, r1
   10a78:	0014      	movs	r4, r2
   10a7a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   10a7c:	4b18      	ldr	r3, [pc, #96]	; (10ae0 <disk_read+0x78>)
   10a7e:	4798      	blx	r3
   10a80:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   10a82:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   10a84:	2e00      	cmp	r6, #0
   10a86:	d105      	bne.n	10a94 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   10a88:	b004      	add	sp, #16
   10a8a:	bc1c      	pop	{r2, r3, r4}
   10a8c:	4690      	mov	r8, r2
   10a8e:	4699      	mov	r9, r3
   10a90:	46a3      	mov	fp, r4
   10a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   10a94:	a903      	add	r1, sp, #12
   10a96:	9801      	ldr	r0, [sp, #4]
   10a98:	4b12      	ldr	r3, [pc, #72]	; (10ae4 <disk_read+0x7c>)
   10a9a:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   10a9c:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   10a9e:	0032      	movs	r2, r6
   10aa0:	437a      	muls	r2, r7
   10aa2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   10aa4:	9b03      	ldr	r3, [sp, #12]
   10aa6:	3301      	adds	r3, #1
   10aa8:	4373      	muls	r3, r6
		return RES_PARERR;
   10aaa:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   10aac:	429a      	cmp	r2, r3
   10aae:	d8eb      	bhi.n	10a88 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   10ab0:	2f00      	cmp	r7, #0
   10ab2:	d011      	beq.n	10ad8 <disk_read+0x70>
   10ab4:	0273      	lsls	r3, r6, #9
   10ab6:	4698      	mov	r8, r3
   10ab8:	1c7b      	adds	r3, r7, #1
   10aba:	469b      	mov	fp, r3
   10abc:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   10abe:	4e0a      	ldr	r6, [pc, #40]	; (10ae8 <disk_read+0x80>)
   10ac0:	002a      	movs	r2, r5
   10ac2:	0021      	movs	r1, r4
   10ac4:	9801      	ldr	r0, [sp, #4]
   10ac6:	47b0      	blx	r6
   10ac8:	2800      	cmp	r0, #0
   10aca:	d107      	bne.n	10adc <disk_read+0x74>
   10acc:	3701      	adds	r7, #1
   10ace:	444c      	add	r4, r9
   10ad0:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   10ad2:	455f      	cmp	r7, fp
   10ad4:	d1f4      	bne.n	10ac0 <disk_read+0x58>
   10ad6:	e7d7      	b.n	10a88 <disk_read+0x20>
	return RES_OK;
   10ad8:	2000      	movs	r0, #0
   10ada:	e7d5      	b.n	10a88 <disk_read+0x20>
			return RES_ERROR;
   10adc:	2001      	movs	r0, #1
   10ade:	e7d3      	b.n	10a88 <disk_read+0x20>
   10ae0:	0000e17d 	.word	0x0000e17d
   10ae4:	0000e161 	.word	0x0000e161
   10ae8:	0000e19d 	.word	0x0000e19d

00010aec <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   10aec:	b5f0      	push	{r4, r5, r6, r7, lr}
   10aee:	46de      	mov	lr, fp
   10af0:	464f      	mov	r7, r9
   10af2:	4646      	mov	r6, r8
   10af4:	b5c0      	push	{r6, r7, lr}
   10af6:	b084      	sub	sp, #16
   10af8:	9001      	str	r0, [sp, #4]
   10afa:	000d      	movs	r5, r1
   10afc:	0014      	movs	r4, r2
   10afe:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   10b00:	4b18      	ldr	r3, [pc, #96]	; (10b64 <disk_write+0x78>)
   10b02:	4798      	blx	r3
   10b04:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   10b06:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   10b08:	2e00      	cmp	r6, #0
   10b0a:	d105      	bne.n	10b18 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   10b0c:	b004      	add	sp, #16
   10b0e:	bc1c      	pop	{r2, r3, r4}
   10b10:	4690      	mov	r8, r2
   10b12:	4699      	mov	r9, r3
   10b14:	46a3      	mov	fp, r4
   10b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   10b18:	a903      	add	r1, sp, #12
   10b1a:	9801      	ldr	r0, [sp, #4]
   10b1c:	4b12      	ldr	r3, [pc, #72]	; (10b68 <disk_write+0x7c>)
   10b1e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   10b20:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   10b22:	0032      	movs	r2, r6
   10b24:	437a      	muls	r2, r7
   10b26:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   10b28:	9b03      	ldr	r3, [sp, #12]
   10b2a:	3301      	adds	r3, #1
   10b2c:	4373      	muls	r3, r6
		return RES_PARERR;
   10b2e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   10b30:	429a      	cmp	r2, r3
   10b32:	d8eb      	bhi.n	10b0c <disk_write+0x20>
	for (i = 0; i < count; i++) {
   10b34:	2f00      	cmp	r7, #0
   10b36:	d011      	beq.n	10b5c <disk_write+0x70>
   10b38:	0273      	lsls	r3, r6, #9
   10b3a:	4698      	mov	r8, r3
   10b3c:	1c7b      	adds	r3, r7, #1
   10b3e:	469b      	mov	fp, r3
   10b40:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   10b42:	4e0a      	ldr	r6, [pc, #40]	; (10b6c <disk_write+0x80>)
   10b44:	002a      	movs	r2, r5
   10b46:	0021      	movs	r1, r4
   10b48:	9801      	ldr	r0, [sp, #4]
   10b4a:	47b0      	blx	r6
   10b4c:	2800      	cmp	r0, #0
   10b4e:	d107      	bne.n	10b60 <disk_write+0x74>
   10b50:	3701      	adds	r7, #1
   10b52:	444c      	add	r4, r9
   10b54:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   10b56:	455f      	cmp	r7, fp
   10b58:	d1f4      	bne.n	10b44 <disk_write+0x58>
   10b5a:	e7d7      	b.n	10b0c <disk_write+0x20>
	return RES_OK;
   10b5c:	2000      	movs	r0, #0
   10b5e:	e7d5      	b.n	10b0c <disk_write+0x20>
			return RES_ERROR;
   10b60:	2001      	movs	r0, #1
   10b62:	e7d3      	b.n	10b0c <disk_write+0x20>
   10b64:	0000e17d 	.word	0x0000e17d
   10b68:	0000e161 	.word	0x0000e161
   10b6c:	0000e1bd 	.word	0x0000e1bd

00010b70 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   10b70:	b510      	push	{r4, lr}
   10b72:	b082      	sub	sp, #8
   10b74:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   10b76:	2901      	cmp	r1, #1
   10b78:	d00b      	beq.n	10b92 <disk_ioctl+0x22>
   10b7a:	2900      	cmp	r1, #0
   10b7c:	d020      	beq.n	10bc0 <disk_ioctl+0x50>
   10b7e:	2902      	cmp	r1, #2
   10b80:	d00f      	beq.n	10ba2 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   10b82:	2004      	movs	r0, #4
	switch (ctrl) {
   10b84:	2903      	cmp	r1, #3
   10b86:	d102      	bne.n	10b8e <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   10b88:	2301      	movs	r3, #1
   10b8a:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   10b8c:	2000      	movs	r0, #0
	}

	return res;
}
   10b8e:	b002      	add	sp, #8
   10b90:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   10b92:	a901      	add	r1, sp, #4
   10b94:	4b0e      	ldr	r3, [pc, #56]	; (10bd0 <disk_ioctl+0x60>)
   10b96:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   10b98:	9b01      	ldr	r3, [sp, #4]
   10b9a:	3301      	adds	r3, #1
   10b9c:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   10b9e:	2000      	movs	r0, #0
	break;
   10ba0:	e7f5      	b.n	10b8e <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   10ba2:	4b0c      	ldr	r3, [pc, #48]	; (10bd4 <disk_ioctl+0x64>)
   10ba4:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   10ba6:	1e43      	subs	r3, r0, #1
   10ba8:	b2db      	uxtb	r3, r3
   10baa:	2b01      	cmp	r3, #1
   10bac:	d904      	bls.n	10bb8 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   10bae:	1f03      	subs	r3, r0, #4
   10bb0:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   10bb2:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   10bb4:	4213      	tst	r3, r2
   10bb6:	d1ea      	bne.n	10b8e <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   10bb8:	2300      	movs	r3, #0
   10bba:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   10bbc:	2000      	movs	r0, #0
	break;
   10bbe:	e7e6      	b.n	10b8e <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   10bc0:	4b05      	ldr	r3, [pc, #20]	; (10bd8 <disk_ioctl+0x68>)
   10bc2:	4798      	blx	r3
   10bc4:	2800      	cmp	r0, #0
   10bc6:	d001      	beq.n	10bcc <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   10bc8:	2003      	movs	r0, #3
   10bca:	e7e0      	b.n	10b8e <disk_ioctl+0x1e>
			res = RES_OK;
   10bcc:	2000      	movs	r0, #0
   10bce:	e7de      	b.n	10b8e <disk_ioctl+0x1e>
   10bd0:	0000e161 	.word	0x0000e161
   10bd4:	0000e17d 	.word	0x0000e17d
   10bd8:	0000e149 	.word	0x0000e149

00010bdc <get_fattime>:
   10bdc:	b500      	push	{lr}
   10bde:	b083      	sub	sp, #12
   10be0:	4669      	mov	r1, sp
   10be2:	480f      	ldr	r0, [pc, #60]	; (10c20 <get_fattime+0x44>)
   10be4:	4b0f      	ldr	r3, [pc, #60]	; (10c24 <get_fattime+0x48>)
   10be6:	4798      	blx	r3
   10be8:	466b      	mov	r3, sp
   10bea:	7958      	ldrb	r0, [r3, #5]
   10bec:	0540      	lsls	r0, r0, #21
   10bee:	791b      	ldrb	r3, [r3, #4]
   10bf0:	041b      	lsls	r3, r3, #16
   10bf2:	4318      	orrs	r0, r3
   10bf4:	466b      	mov	r3, sp
   10bf6:	789b      	ldrb	r3, [r3, #2]
   10bf8:	02db      	lsls	r3, r3, #11
   10bfa:	4318      	orrs	r0, r3
   10bfc:	466b      	mov	r3, sp
   10bfe:	785b      	ldrb	r3, [r3, #1]
   10c00:	015b      	lsls	r3, r3, #5
   10c02:	4318      	orrs	r0, r3
   10c04:	466b      	mov	r3, sp
   10c06:	781b      	ldrb	r3, [r3, #0]
   10c08:	085b      	lsrs	r3, r3, #1
   10c0a:	4318      	orrs	r0, r3
   10c0c:	466b      	mov	r3, sp
   10c0e:	88db      	ldrh	r3, [r3, #6]
   10c10:	4a05      	ldr	r2, [pc, #20]	; (10c28 <get_fattime+0x4c>)
   10c12:	4694      	mov	ip, r2
   10c14:	4463      	add	r3, ip
   10c16:	065b      	lsls	r3, r3, #25
   10c18:	4318      	orrs	r0, r3
   10c1a:	b003      	add	sp, #12
   10c1c:	bd00      	pop	{pc}
   10c1e:	46c0      	nop			; (mov r8, r8)
   10c20:	2000113c 	.word	0x2000113c
   10c24:	0000e7fd 	.word	0x0000e7fd
   10c28:	fffff844 	.word	0xfffff844

00010c2c <mem_cpy>:
   10c2c:	b510      	push	{r4, lr}
   10c2e:	2a00      	cmp	r2, #0
   10c30:	d005      	beq.n	10c3e <mem_cpy+0x12>
   10c32:	2300      	movs	r3, #0
   10c34:	5ccc      	ldrb	r4, [r1, r3]
   10c36:	54c4      	strb	r4, [r0, r3]
   10c38:	3301      	adds	r3, #1
   10c3a:	4293      	cmp	r3, r2
   10c3c:	d1fa      	bne.n	10c34 <mem_cpy+0x8>
   10c3e:	bd10      	pop	{r4, pc}

00010c40 <mem_set>:
   10c40:	2a00      	cmp	r2, #0
   10c42:	d005      	beq.n	10c50 <mem_set+0x10>
   10c44:	0003      	movs	r3, r0
   10c46:	1882      	adds	r2, r0, r2
   10c48:	7019      	strb	r1, [r3, #0]
   10c4a:	3301      	adds	r3, #1
   10c4c:	4293      	cmp	r3, r2
   10c4e:	d1fb      	bne.n	10c48 <mem_set+0x8>
   10c50:	4770      	bx	lr

00010c52 <clust2sect>:
   10c52:	0002      	movs	r2, r0
   10c54:	3902      	subs	r1, #2
   10c56:	6983      	ldr	r3, [r0, #24]
   10c58:	3b02      	subs	r3, #2
   10c5a:	2000      	movs	r0, #0
   10c5c:	4299      	cmp	r1, r3
   10c5e:	d203      	bcs.n	10c68 <clust2sect+0x16>
   10c60:	7890      	ldrb	r0, [r2, #2]
   10c62:	4341      	muls	r1, r0
   10c64:	6a90      	ldr	r0, [r2, #40]	; 0x28
   10c66:	1808      	adds	r0, r1, r0
   10c68:	4770      	bx	lr

00010c6a <sum_sfn>:
   10c6a:	0002      	movs	r2, r0
   10c6c:	0001      	movs	r1, r0
   10c6e:	310b      	adds	r1, #11
   10c70:	2000      	movs	r0, #0
   10c72:	0843      	lsrs	r3, r0, #1
   10c74:	01c0      	lsls	r0, r0, #7
   10c76:	4303      	orrs	r3, r0
   10c78:	7810      	ldrb	r0, [r2, #0]
   10c7a:	1818      	adds	r0, r3, r0
   10c7c:	b2c0      	uxtb	r0, r0
   10c7e:	3201      	adds	r2, #1
   10c80:	428a      	cmp	r2, r1
   10c82:	d1f6      	bne.n	10c72 <sum_sfn+0x8>
   10c84:	4770      	bx	lr
	...

00010c88 <validate>:
   10c88:	b510      	push	{r4, lr}
   10c8a:	2800      	cmp	r0, #0
   10c8c:	d010      	beq.n	10cb0 <validate+0x28>
   10c8e:	7802      	ldrb	r2, [r0, #0]
   10c90:	2309      	movs	r3, #9
   10c92:	2a00      	cmp	r2, #0
   10c94:	d101      	bne.n	10c9a <validate+0x12>
   10c96:	0018      	movs	r0, r3
   10c98:	bd10      	pop	{r4, pc}
   10c9a:	88c2      	ldrh	r2, [r0, #6]
   10c9c:	428a      	cmp	r2, r1
   10c9e:	d1fa      	bne.n	10c96 <validate+0xe>
   10ca0:	7840      	ldrb	r0, [r0, #1]
   10ca2:	4b04      	ldr	r3, [pc, #16]	; (10cb4 <validate+0x2c>)
   10ca4:	4798      	blx	r3
   10ca6:	2303      	movs	r3, #3
   10ca8:	07c0      	lsls	r0, r0, #31
   10caa:	17c0      	asrs	r0, r0, #31
   10cac:	4003      	ands	r3, r0
   10cae:	e7f2      	b.n	10c96 <validate+0xe>
   10cb0:	2309      	movs	r3, #9
   10cb2:	e7f0      	b.n	10c96 <validate+0xe>
   10cb4:	00010a4d 	.word	0x00010a4d

00010cb8 <check_fs>:
   10cb8:	b570      	push	{r4, r5, r6, lr}
   10cba:	0004      	movs	r4, r0
   10cbc:	000a      	movs	r2, r1
   10cbe:	0001      	movs	r1, r0
   10cc0:	3130      	adds	r1, #48	; 0x30
   10cc2:	7840      	ldrb	r0, [r0, #1]
   10cc4:	2301      	movs	r3, #1
   10cc6:	4d1f      	ldr	r5, [pc, #124]	; (10d44 <check_fs+0x8c>)
   10cc8:	47a8      	blx	r5
   10cca:	2303      	movs	r3, #3
   10ccc:	2800      	cmp	r0, #0
   10cce:	d001      	beq.n	10cd4 <check_fs+0x1c>
   10cd0:	0018      	movs	r0, r3
   10cd2:	bd70      	pop	{r4, r5, r6, pc}
   10cd4:	4b1c      	ldr	r3, [pc, #112]	; (10d48 <check_fs+0x90>)
   10cd6:	5ce3      	ldrb	r3, [r4, r3]
   10cd8:	021b      	lsls	r3, r3, #8
   10cda:	4a1c      	ldr	r2, [pc, #112]	; (10d4c <check_fs+0x94>)
   10cdc:	5ca2      	ldrb	r2, [r4, r2]
   10cde:	431a      	orrs	r2, r3
   10ce0:	491b      	ldr	r1, [pc, #108]	; (10d50 <check_fs+0x98>)
   10ce2:	b212      	sxth	r2, r2
   10ce4:	2302      	movs	r3, #2
   10ce6:	428a      	cmp	r2, r1
   10ce8:	d1f2      	bne.n	10cd0 <check_fs+0x18>
   10cea:	3367      	adds	r3, #103	; 0x67
   10cec:	5ce3      	ldrb	r3, [r4, r3]
   10cee:	061b      	lsls	r3, r3, #24
   10cf0:	2268      	movs	r2, #104	; 0x68
   10cf2:	5ca2      	ldrb	r2, [r4, r2]
   10cf4:	0412      	lsls	r2, r2, #16
   10cf6:	4313      	orrs	r3, r2
   10cf8:	2266      	movs	r2, #102	; 0x66
   10cfa:	5ca2      	ldrb	r2, [r4, r2]
   10cfc:	4313      	orrs	r3, r2
   10cfe:	2267      	movs	r2, #103	; 0x67
   10d00:	5ca2      	ldrb	r2, [r4, r2]
   10d02:	0212      	lsls	r2, r2, #8
   10d04:	4313      	orrs	r3, r2
   10d06:	021b      	lsls	r3, r3, #8
   10d08:	0a1b      	lsrs	r3, r3, #8
   10d0a:	4a12      	ldr	r2, [pc, #72]	; (10d54 <check_fs+0x9c>)
   10d0c:	4293      	cmp	r3, r2
   10d0e:	d016      	beq.n	10d3e <check_fs+0x86>
   10d10:	2385      	movs	r3, #133	; 0x85
   10d12:	5ce3      	ldrb	r3, [r4, r3]
   10d14:	061b      	lsls	r3, r3, #24
   10d16:	2284      	movs	r2, #132	; 0x84
   10d18:	5ca2      	ldrb	r2, [r4, r2]
   10d1a:	0412      	lsls	r2, r2, #16
   10d1c:	4313      	orrs	r3, r2
   10d1e:	2282      	movs	r2, #130	; 0x82
   10d20:	5ca2      	ldrb	r2, [r4, r2]
   10d22:	4313      	orrs	r3, r2
   10d24:	2283      	movs	r2, #131	; 0x83
   10d26:	5ca2      	ldrb	r2, [r4, r2]
   10d28:	0212      	lsls	r2, r2, #8
   10d2a:	4313      	orrs	r3, r2
   10d2c:	021b      	lsls	r3, r3, #8
   10d2e:	0a1b      	lsrs	r3, r3, #8
   10d30:	4a09      	ldr	r2, [pc, #36]	; (10d58 <check_fs+0xa0>)
   10d32:	4694      	mov	ip, r2
   10d34:	4463      	add	r3, ip
   10d36:	1e58      	subs	r0, r3, #1
   10d38:	4183      	sbcs	r3, r0
   10d3a:	b2db      	uxtb	r3, r3
   10d3c:	e7c8      	b.n	10cd0 <check_fs+0x18>
   10d3e:	2300      	movs	r3, #0
   10d40:	e7c6      	b.n	10cd0 <check_fs+0x18>
   10d42:	46c0      	nop			; (mov r8, r8)
   10d44:	00010a69 	.word	0x00010a69
   10d48:	0000022f 	.word	0x0000022f
   10d4c:	0000022e 	.word	0x0000022e
   10d50:	ffffaa55 	.word	0xffffaa55
   10d54:	00544146 	.word	0x00544146
   10d58:	ffabbeba 	.word	0xffabbeba

00010d5c <chk_mounted>:
   10d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d5e:	46d6      	mov	lr, sl
   10d60:	464f      	mov	r7, r9
   10d62:	4646      	mov	r6, r8
   10d64:	b5c0      	push	{r6, r7, lr}
   10d66:	0015      	movs	r5, r2
   10d68:	6803      	ldr	r3, [r0, #0]
   10d6a:	781c      	ldrb	r4, [r3, #0]
   10d6c:	3c30      	subs	r4, #48	; 0x30
   10d6e:	2c09      	cmp	r4, #9
   10d70:	d80e      	bhi.n	10d90 <chk_mounted+0x34>
   10d72:	785a      	ldrb	r2, [r3, #1]
   10d74:	2a3a      	cmp	r2, #58	; 0x3a
   10d76:	d001      	beq.n	10d7c <chk_mounted+0x20>
   10d78:	2400      	movs	r4, #0
   10d7a:	e00a      	b.n	10d92 <chk_mounted+0x36>
   10d7c:	3302      	adds	r3, #2
   10d7e:	6003      	str	r3, [r0, #0]
   10d80:	200b      	movs	r0, #11
   10d82:	2c07      	cmp	r4, #7
   10d84:	d905      	bls.n	10d92 <chk_mounted+0x36>
   10d86:	bc1c      	pop	{r2, r3, r4}
   10d88:	4690      	mov	r8, r2
   10d8a:	4699      	mov	r9, r3
   10d8c:	46a2      	mov	sl, r4
   10d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d90:	2400      	movs	r4, #0
   10d92:	00a3      	lsls	r3, r4, #2
   10d94:	4ac5      	ldr	r2, [pc, #788]	; (110ac <chk_mounted+0x350>)
   10d96:	589e      	ldr	r6, [r3, r2]
   10d98:	600e      	str	r6, [r1, #0]
   10d9a:	2e00      	cmp	r6, #0
   10d9c:	d100      	bne.n	10da0 <chk_mounted+0x44>
   10d9e:	e0e8      	b.n	10f72 <chk_mounted+0x216>
   10da0:	7833      	ldrb	r3, [r6, #0]
   10da2:	2b00      	cmp	r3, #0
   10da4:	d00d      	beq.n	10dc2 <chk_mounted+0x66>
   10da6:	7870      	ldrb	r0, [r6, #1]
   10da8:	4bc1      	ldr	r3, [pc, #772]	; (110b0 <chk_mounted+0x354>)
   10daa:	4798      	blx	r3
   10dac:	0003      	movs	r3, r0
   10dae:	07c2      	lsls	r2, r0, #31
   10db0:	d407      	bmi.n	10dc2 <chk_mounted+0x66>
   10db2:	2000      	movs	r0, #0
   10db4:	2d00      	cmp	r5, #0
   10db6:	d0e6      	beq.n	10d86 <chk_mounted+0x2a>
   10db8:	075b      	lsls	r3, r3, #29
   10dba:	d400      	bmi.n	10dbe <chk_mounted+0x62>
   10dbc:	e0db      	b.n	10f76 <chk_mounted+0x21a>
   10dbe:	300a      	adds	r0, #10
   10dc0:	e7e1      	b.n	10d86 <chk_mounted+0x2a>
   10dc2:	2300      	movs	r3, #0
   10dc4:	7033      	strb	r3, [r6, #0]
   10dc6:	b2e0      	uxtb	r0, r4
   10dc8:	7070      	strb	r0, [r6, #1]
   10dca:	4bba      	ldr	r3, [pc, #744]	; (110b4 <chk_mounted+0x358>)
   10dcc:	4798      	blx	r3
   10dce:	0003      	movs	r3, r0
   10dd0:	2003      	movs	r0, #3
   10dd2:	07da      	lsls	r2, r3, #31
   10dd4:	d4d7      	bmi.n	10d86 <chk_mounted+0x2a>
   10dd6:	2d00      	cmp	r5, #0
   10dd8:	d002      	beq.n	10de0 <chk_mounted+0x84>
   10dda:	3007      	adds	r0, #7
   10ddc:	075b      	lsls	r3, r3, #29
   10dde:	d4d2      	bmi.n	10d86 <chk_mounted+0x2a>
   10de0:	2100      	movs	r1, #0
   10de2:	0030      	movs	r0, r6
   10de4:	4bb4      	ldr	r3, [pc, #720]	; (110b8 <chk_mounted+0x35c>)
   10de6:	4798      	blx	r3
   10de8:	0003      	movs	r3, r0
   10dea:	2400      	movs	r4, #0
   10dec:	2801      	cmp	r0, #1
   10dee:	d100      	bne.n	10df2 <chk_mounted+0x96>
   10df0:	e09a      	b.n	10f28 <chk_mounted+0x1cc>
   10df2:	2b03      	cmp	r3, #3
   10df4:	d100      	bne.n	10df8 <chk_mounted+0x9c>
   10df6:	e0c0      	b.n	10f7a <chk_mounted+0x21e>
   10df8:	200d      	movs	r0, #13
   10dfa:	2b00      	cmp	r3, #0
   10dfc:	d1c3      	bne.n	10d86 <chk_mounted+0x2a>
   10dfe:	333c      	adds	r3, #60	; 0x3c
   10e00:	5cf2      	ldrb	r2, [r6, r3]
   10e02:	0212      	lsls	r2, r2, #8
   10e04:	3b01      	subs	r3, #1
   10e06:	5cf3      	ldrb	r3, [r6, r3]
   10e08:	4313      	orrs	r3, r2
   10e0a:	2280      	movs	r2, #128	; 0x80
   10e0c:	0092      	lsls	r2, r2, #2
   10e0e:	b21b      	sxth	r3, r3
   10e10:	4293      	cmp	r3, r2
   10e12:	d1b8      	bne.n	10d86 <chk_mounted+0x2a>
   10e14:	2347      	movs	r3, #71	; 0x47
   10e16:	5cf3      	ldrb	r3, [r6, r3]
   10e18:	021b      	lsls	r3, r3, #8
   10e1a:	3abb      	subs	r2, #187	; 0xbb
   10e1c:	3aff      	subs	r2, #255	; 0xff
   10e1e:	5cb5      	ldrb	r5, [r6, r2]
   10e20:	431d      	orrs	r5, r3
   10e22:	d10d      	bne.n	10e40 <chk_mounted+0xe4>
   10e24:	2357      	movs	r3, #87	; 0x57
   10e26:	5cf5      	ldrb	r5, [r6, r3]
   10e28:	062d      	lsls	r5, r5, #24
   10e2a:	3b01      	subs	r3, #1
   10e2c:	5cf3      	ldrb	r3, [r6, r3]
   10e2e:	041b      	lsls	r3, r3, #16
   10e30:	431d      	orrs	r5, r3
   10e32:	2354      	movs	r3, #84	; 0x54
   10e34:	5cf3      	ldrb	r3, [r6, r3]
   10e36:	431d      	orrs	r5, r3
   10e38:	2355      	movs	r3, #85	; 0x55
   10e3a:	5cf3      	ldrb	r3, [r6, r3]
   10e3c:	021b      	lsls	r3, r3, #8
   10e3e:	431d      	orrs	r5, r3
   10e40:	61f5      	str	r5, [r6, #28]
   10e42:	2340      	movs	r3, #64	; 0x40
   10e44:	5cf2      	ldrb	r2, [r6, r3]
   10e46:	70f2      	strb	r2, [r6, #3]
   10e48:	1e53      	subs	r3, r2, #1
   10e4a:	200d      	movs	r0, #13
   10e4c:	2b01      	cmp	r3, #1
   10e4e:	d89a      	bhi.n	10d86 <chk_mounted+0x2a>
   10e50:	233d      	movs	r3, #61	; 0x3d
   10e52:	5cf1      	ldrb	r1, [r6, r3]
   10e54:	70b1      	strb	r1, [r6, #2]
   10e56:	2900      	cmp	r1, #0
   10e58:	d095      	beq.n	10d86 <chk_mounted+0x2a>
   10e5a:	1e4b      	subs	r3, r1, #1
   10e5c:	4219      	tst	r1, r3
   10e5e:	d192      	bne.n	10d86 <chk_mounted+0x2a>
   10e60:	2342      	movs	r3, #66	; 0x42
   10e62:	5cf3      	ldrb	r3, [r6, r3]
   10e64:	021b      	lsls	r3, r3, #8
   10e66:	3034      	adds	r0, #52	; 0x34
   10e68:	5c30      	ldrb	r0, [r6, r0]
   10e6a:	4318      	orrs	r0, r3
   10e6c:	4680      	mov	r8, r0
   10e6e:	8130      	strh	r0, [r6, #8]
   10e70:	200d      	movs	r0, #13
   10e72:	4643      	mov	r3, r8
   10e74:	071b      	lsls	r3, r3, #28
   10e76:	d000      	beq.n	10e7a <chk_mounted+0x11e>
   10e78:	e785      	b.n	10d86 <chk_mounted+0x2a>
   10e7a:	2344      	movs	r3, #68	; 0x44
   10e7c:	5cf3      	ldrb	r3, [r6, r3]
   10e7e:	021b      	lsls	r3, r3, #8
   10e80:	3036      	adds	r0, #54	; 0x36
   10e82:	5c30      	ldrb	r0, [r6, r0]
   10e84:	4303      	orrs	r3, r0
   10e86:	d10d      	bne.n	10ea4 <chk_mounted+0x148>
   10e88:	3353      	adds	r3, #83	; 0x53
   10e8a:	5cf3      	ldrb	r3, [r6, r3]
   10e8c:	061b      	lsls	r3, r3, #24
   10e8e:	2052      	movs	r0, #82	; 0x52
   10e90:	5c30      	ldrb	r0, [r6, r0]
   10e92:	0400      	lsls	r0, r0, #16
   10e94:	4303      	orrs	r3, r0
   10e96:	2050      	movs	r0, #80	; 0x50
   10e98:	5c30      	ldrb	r0, [r6, r0]
   10e9a:	4303      	orrs	r3, r0
   10e9c:	2051      	movs	r0, #81	; 0x51
   10e9e:	5c30      	ldrb	r0, [r6, r0]
   10ea0:	0200      	lsls	r0, r0, #8
   10ea2:	4303      	orrs	r3, r0
   10ea4:	203f      	movs	r0, #63	; 0x3f
   10ea6:	5c30      	ldrb	r0, [r6, r0]
   10ea8:	0200      	lsls	r0, r0, #8
   10eaa:	273e      	movs	r7, #62	; 0x3e
   10eac:	5df7      	ldrb	r7, [r6, r7]
   10eae:	4307      	orrs	r7, r0
   10eb0:	46ba      	mov	sl, r7
   10eb2:	200d      	movs	r0, #13
   10eb4:	2f00      	cmp	r7, #0
   10eb6:	d100      	bne.n	10eba <chk_mounted+0x15e>
   10eb8:	e765      	b.n	10d86 <chk_mounted+0x2a>
   10eba:	436a      	muls	r2, r5
   10ebc:	4691      	mov	r9, r2
   10ebe:	4642      	mov	r2, r8
   10ec0:	0917      	lsrs	r7, r2, #4
   10ec2:	4457      	add	r7, sl
   10ec4:	444f      	add	r7, r9
   10ec6:	42bb      	cmp	r3, r7
   10ec8:	d200      	bcs.n	10ecc <chk_mounted+0x170>
   10eca:	e75c      	b.n	10d86 <chk_mounted+0x2a>
   10ecc:	1bd8      	subs	r0, r3, r7
   10ece:	4b7b      	ldr	r3, [pc, #492]	; (110bc <chk_mounted+0x360>)
   10ed0:	4798      	blx	r3
   10ed2:	0003      	movs	r3, r0
   10ed4:	200d      	movs	r0, #13
   10ed6:	2b00      	cmp	r3, #0
   10ed8:	d100      	bne.n	10edc <chk_mounted+0x180>
   10eda:	e754      	b.n	10d86 <chk_mounted+0x2a>
   10edc:	4a78      	ldr	r2, [pc, #480]	; (110c0 <chk_mounted+0x364>)
   10ede:	429a      	cmp	r2, r3
   10ee0:	4192      	sbcs	r2, r2
   10ee2:	4252      	negs	r2, r2
   10ee4:	3201      	adds	r2, #1
   10ee6:	4977      	ldr	r1, [pc, #476]	; (110c4 <chk_mounted+0x368>)
   10ee8:	428b      	cmp	r3, r1
   10eea:	d848      	bhi.n	10f7e <chk_mounted+0x222>
   10eec:	3302      	adds	r3, #2
   10eee:	61b3      	str	r3, [r6, #24]
   10ef0:	19e7      	adds	r7, r4, r7
   10ef2:	62b7      	str	r7, [r6, #40]	; 0x28
   10ef4:	4454      	add	r4, sl
   10ef6:	6234      	str	r4, [r6, #32]
   10ef8:	200d      	movs	r0, #13
   10efa:	4641      	mov	r1, r8
   10efc:	2900      	cmp	r1, #0
   10efe:	d100      	bne.n	10f02 <chk_mounted+0x1a6>
   10f00:	e741      	b.n	10d86 <chk_mounted+0x2a>
   10f02:	444c      	add	r4, r9
   10f04:	6274      	str	r4, [r6, #36]	; 0x24
   10f06:	2a02      	cmp	r2, #2
   10f08:	d12c      	bne.n	10f64 <chk_mounted+0x208>
   10f0a:	005b      	lsls	r3, r3, #1
   10f0c:	496e      	ldr	r1, [pc, #440]	; (110c8 <chk_mounted+0x36c>)
   10f0e:	468c      	mov	ip, r1
   10f10:	4463      	add	r3, ip
   10f12:	0a5b      	lsrs	r3, r3, #9
   10f14:	200d      	movs	r0, #13
   10f16:	429d      	cmp	r5, r3
   10f18:	d200      	bcs.n	10f1c <chk_mounted+0x1c0>
   10f1a:	e734      	b.n	10d86 <chk_mounted+0x2a>
   10f1c:	2301      	movs	r3, #1
   10f1e:	425b      	negs	r3, r3
   10f20:	6133      	str	r3, [r6, #16]
   10f22:	2300      	movs	r3, #0
   10f24:	60f3      	str	r3, [r6, #12]
   10f26:	e0b6      	b.n	11096 <chk_mounted+0x33a>
   10f28:	33f2      	adds	r3, #242	; 0xf2
   10f2a:	33ff      	adds	r3, #255	; 0xff
   10f2c:	5cf3      	ldrb	r3, [r6, r3]
   10f2e:	200d      	movs	r0, #13
   10f30:	2b00      	cmp	r3, #0
   10f32:	d100      	bne.n	10f36 <chk_mounted+0x1da>
   10f34:	e727      	b.n	10d86 <chk_mounted+0x2a>
   10f36:	23fa      	movs	r3, #250	; 0xfa
   10f38:	33ff      	adds	r3, #255	; 0xff
   10f3a:	5cf4      	ldrb	r4, [r6, r3]
   10f3c:	0624      	lsls	r4, r4, #24
   10f3e:	3b01      	subs	r3, #1
   10f40:	5cf3      	ldrb	r3, [r6, r3]
   10f42:	041b      	lsls	r3, r3, #16
   10f44:	431c      	orrs	r4, r3
   10f46:	23fb      	movs	r3, #251	; 0xfb
   10f48:	005b      	lsls	r3, r3, #1
   10f4a:	5cf3      	ldrb	r3, [r6, r3]
   10f4c:	431c      	orrs	r4, r3
   10f4e:	23f8      	movs	r3, #248	; 0xf8
   10f50:	33ff      	adds	r3, #255	; 0xff
   10f52:	5cf2      	ldrb	r2, [r6, r3]
   10f54:	0212      	lsls	r2, r2, #8
   10f56:	4314      	orrs	r4, r2
   10f58:	0021      	movs	r1, r4
   10f5a:	0030      	movs	r0, r6
   10f5c:	4b56      	ldr	r3, [pc, #344]	; (110b8 <chk_mounted+0x35c>)
   10f5e:	4798      	blx	r3
   10f60:	0003      	movs	r3, r0
   10f62:	e746      	b.n	10df2 <chk_mounted+0x96>
   10f64:	2103      	movs	r1, #3
   10f66:	4359      	muls	r1, r3
   10f68:	0849      	lsrs	r1, r1, #1
   10f6a:	2001      	movs	r0, #1
   10f6c:	4003      	ands	r3, r0
   10f6e:	18cb      	adds	r3, r1, r3
   10f70:	e7cc      	b.n	10f0c <chk_mounted+0x1b0>
   10f72:	200c      	movs	r0, #12
   10f74:	e707      	b.n	10d86 <chk_mounted+0x2a>
   10f76:	2000      	movs	r0, #0
   10f78:	e705      	b.n	10d86 <chk_mounted+0x2a>
   10f7a:	2001      	movs	r0, #1
   10f7c:	e703      	b.n	10d86 <chk_mounted+0x2a>
   10f7e:	3302      	adds	r3, #2
   10f80:	61b3      	str	r3, [r6, #24]
   10f82:	19e7      	adds	r7, r4, r7
   10f84:	62b7      	str	r7, [r6, #40]	; 0x28
   10f86:	4652      	mov	r2, sl
   10f88:	18a2      	adds	r2, r4, r2
   10f8a:	6232      	str	r2, [r6, #32]
   10f8c:	200d      	movs	r0, #13
   10f8e:	4642      	mov	r2, r8
   10f90:	2a00      	cmp	r2, #0
   10f92:	d000      	beq.n	10f96 <chk_mounted+0x23a>
   10f94:	e6f7      	b.n	10d86 <chk_mounted+0x2a>
   10f96:	225f      	movs	r2, #95	; 0x5f
   10f98:	5cb2      	ldrb	r2, [r6, r2]
   10f9a:	0612      	lsls	r2, r2, #24
   10f9c:	215e      	movs	r1, #94	; 0x5e
   10f9e:	5c71      	ldrb	r1, [r6, r1]
   10fa0:	0409      	lsls	r1, r1, #16
   10fa2:	430a      	orrs	r2, r1
   10fa4:	215c      	movs	r1, #92	; 0x5c
   10fa6:	5c71      	ldrb	r1, [r6, r1]
   10fa8:	430a      	orrs	r2, r1
   10faa:	215d      	movs	r1, #93	; 0x5d
   10fac:	5c71      	ldrb	r1, [r6, r1]
   10fae:	0209      	lsls	r1, r1, #8
   10fb0:	430a      	orrs	r2, r1
   10fb2:	6272      	str	r2, [r6, #36]	; 0x24
   10fb4:	009b      	lsls	r3, r3, #2
   10fb6:	4a44      	ldr	r2, [pc, #272]	; (110c8 <chk_mounted+0x36c>)
   10fb8:	4694      	mov	ip, r2
   10fba:	4463      	add	r3, ip
   10fbc:	0a5b      	lsrs	r3, r3, #9
   10fbe:	200d      	movs	r0, #13
   10fc0:	429d      	cmp	r5, r3
   10fc2:	d200      	bcs.n	10fc6 <chk_mounted+0x26a>
   10fc4:	e6df      	b.n	10d86 <chk_mounted+0x2a>
   10fc6:	2301      	movs	r3, #1
   10fc8:	425b      	negs	r3, r3
   10fca:	6133      	str	r3, [r6, #16]
   10fcc:	2300      	movs	r3, #0
   10fce:	60f3      	str	r3, [r6, #12]
   10fd0:	7173      	strb	r3, [r6, #5]
   10fd2:	3361      	adds	r3, #97	; 0x61
   10fd4:	5cf3      	ldrb	r3, [r6, r3]
   10fd6:	021b      	lsls	r3, r3, #8
   10fd8:	2260      	movs	r2, #96	; 0x60
   10fda:	5cb2      	ldrb	r2, [r6, r2]
   10fdc:	431a      	orrs	r2, r3
   10fde:	1912      	adds	r2, r2, r4
   10fe0:	6172      	str	r2, [r6, #20]
   10fe2:	0031      	movs	r1, r6
   10fe4:	3130      	adds	r1, #48	; 0x30
   10fe6:	7870      	ldrb	r0, [r6, #1]
   10fe8:	2301      	movs	r3, #1
   10fea:	4c38      	ldr	r4, [pc, #224]	; (110cc <chk_mounted+0x370>)
   10fec:	47a0      	blx	r4
   10fee:	2203      	movs	r2, #3
   10ff0:	2800      	cmp	r0, #0
   10ff2:	d150      	bne.n	11096 <chk_mounted+0x33a>
   10ff4:	4b36      	ldr	r3, [pc, #216]	; (110d0 <chk_mounted+0x374>)
   10ff6:	5cf2      	ldrb	r2, [r6, r3]
   10ff8:	0212      	lsls	r2, r2, #8
   10ffa:	4b36      	ldr	r3, [pc, #216]	; (110d4 <chk_mounted+0x378>)
   10ffc:	5cf3      	ldrb	r3, [r6, r3]
   10ffe:	4313      	orrs	r3, r2
   11000:	4935      	ldr	r1, [pc, #212]	; (110d8 <chk_mounted+0x37c>)
   11002:	b21b      	sxth	r3, r3
   11004:	2203      	movs	r2, #3
   11006:	428b      	cmp	r3, r1
   11008:	d145      	bne.n	11096 <chk_mounted+0x33a>
   1100a:	2333      	movs	r3, #51	; 0x33
   1100c:	5cf3      	ldrb	r3, [r6, r3]
   1100e:	061b      	lsls	r3, r3, #24
   11010:	322f      	adds	r2, #47	; 0x2f
   11012:	5cb2      	ldrb	r2, [r6, r2]
   11014:	0412      	lsls	r2, r2, #16
   11016:	4313      	orrs	r3, r2
   11018:	2230      	movs	r2, #48	; 0x30
   1101a:	5cb2      	ldrb	r2, [r6, r2]
   1101c:	4313      	orrs	r3, r2
   1101e:	2231      	movs	r2, #49	; 0x31
   11020:	5cb2      	ldrb	r2, [r6, r2]
   11022:	0212      	lsls	r2, r2, #8
   11024:	4313      	orrs	r3, r2
   11026:	492d      	ldr	r1, [pc, #180]	; (110dc <chk_mounted+0x380>)
   11028:	2203      	movs	r2, #3
   1102a:	428b      	cmp	r3, r1
   1102c:	d133      	bne.n	11096 <chk_mounted+0x33a>
   1102e:	4b2c      	ldr	r3, [pc, #176]	; (110e0 <chk_mounted+0x384>)
   11030:	5cf3      	ldrb	r3, [r6, r3]
   11032:	061b      	lsls	r3, r3, #24
   11034:	4a2b      	ldr	r2, [pc, #172]	; (110e4 <chk_mounted+0x388>)
   11036:	5cb2      	ldrb	r2, [r6, r2]
   11038:	0412      	lsls	r2, r2, #16
   1103a:	4313      	orrs	r3, r2
   1103c:	2285      	movs	r2, #133	; 0x85
   1103e:	0092      	lsls	r2, r2, #2
   11040:	5cb2      	ldrb	r2, [r6, r2]
   11042:	4313      	orrs	r3, r2
   11044:	4a28      	ldr	r2, [pc, #160]	; (110e8 <chk_mounted+0x38c>)
   11046:	5cb2      	ldrb	r2, [r6, r2]
   11048:	0212      	lsls	r2, r2, #8
   1104a:	4313      	orrs	r3, r2
   1104c:	4927      	ldr	r1, [pc, #156]	; (110ec <chk_mounted+0x390>)
   1104e:	2203      	movs	r2, #3
   11050:	428b      	cmp	r3, r1
   11052:	d120      	bne.n	11096 <chk_mounted+0x33a>
   11054:	4b26      	ldr	r3, [pc, #152]	; (110f0 <chk_mounted+0x394>)
   11056:	5cf3      	ldrb	r3, [r6, r3]
   11058:	061b      	lsls	r3, r3, #24
   1105a:	4a26      	ldr	r2, [pc, #152]	; (110f4 <chk_mounted+0x398>)
   1105c:	5cb2      	ldrb	r2, [r6, r2]
   1105e:	0412      	lsls	r2, r2, #16
   11060:	4313      	orrs	r3, r2
   11062:	2287      	movs	r2, #135	; 0x87
   11064:	0092      	lsls	r2, r2, #2
   11066:	5cb2      	ldrb	r2, [r6, r2]
   11068:	4313      	orrs	r3, r2
   1106a:	4a23      	ldr	r2, [pc, #140]	; (110f8 <chk_mounted+0x39c>)
   1106c:	5cb2      	ldrb	r2, [r6, r2]
   1106e:	0212      	lsls	r2, r2, #8
   11070:	4313      	orrs	r3, r2
   11072:	60f3      	str	r3, [r6, #12]
   11074:	4b21      	ldr	r3, [pc, #132]	; (110fc <chk_mounted+0x3a0>)
   11076:	5cf3      	ldrb	r3, [r6, r3]
   11078:	061b      	lsls	r3, r3, #24
   1107a:	4a21      	ldr	r2, [pc, #132]	; (11100 <chk_mounted+0x3a4>)
   1107c:	5cb2      	ldrb	r2, [r6, r2]
   1107e:	0412      	lsls	r2, r2, #16
   11080:	4313      	orrs	r3, r2
   11082:	2286      	movs	r2, #134	; 0x86
   11084:	0092      	lsls	r2, r2, #2
   11086:	5cb2      	ldrb	r2, [r6, r2]
   11088:	4313      	orrs	r3, r2
   1108a:	4a1e      	ldr	r2, [pc, #120]	; (11104 <chk_mounted+0x3a8>)
   1108c:	5cb2      	ldrb	r2, [r6, r2]
   1108e:	0212      	lsls	r2, r2, #8
   11090:	4313      	orrs	r3, r2
   11092:	6133      	str	r3, [r6, #16]
   11094:	2203      	movs	r2, #3
   11096:	7032      	strb	r2, [r6, #0]
   11098:	4a1b      	ldr	r2, [pc, #108]	; (11108 <chk_mounted+0x3ac>)
   1109a:	8813      	ldrh	r3, [r2, #0]
   1109c:	3301      	adds	r3, #1
   1109e:	b29b      	uxth	r3, r3
   110a0:	8013      	strh	r3, [r2, #0]
   110a2:	80f3      	strh	r3, [r6, #6]
   110a4:	2000      	movs	r0, #0
   110a6:	62f0      	str	r0, [r6, #44]	; 0x2c
   110a8:	7130      	strb	r0, [r6, #4]
   110aa:	e66c      	b.n	10d86 <chk_mounted+0x2a>
   110ac:	2000044c 	.word	0x2000044c
   110b0:	00010a4d 	.word	0x00010a4d
   110b4:	000109b1 	.word	0x000109b1
   110b8:	00010cb9 	.word	0x00010cb9
   110bc:	00016691 	.word	0x00016691
   110c0:	00000ff5 	.word	0x00000ff5
   110c4:	0000fff5 	.word	0x0000fff5
   110c8:	000001ff 	.word	0x000001ff
   110cc:	00010a69 	.word	0x00010a69
   110d0:	0000022f 	.word	0x0000022f
   110d4:	0000022e 	.word	0x0000022e
   110d8:	ffffaa55 	.word	0xffffaa55
   110dc:	41615252 	.word	0x41615252
   110e0:	00000217 	.word	0x00000217
   110e4:	00000216 	.word	0x00000216
   110e8:	00000215 	.word	0x00000215
   110ec:	61417272 	.word	0x61417272
   110f0:	0000021f 	.word	0x0000021f
   110f4:	0000021e 	.word	0x0000021e
   110f8:	0000021d 	.word	0x0000021d
   110fc:	0000021b 	.word	0x0000021b
   11100:	0000021a 	.word	0x0000021a
   11104:	00000219 	.word	0x00000219
   11108:	2000046c 	.word	0x2000046c

0001110c <move_window>:
   1110c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1110e:	46ce      	mov	lr, r9
   11110:	b500      	push	{lr}
   11112:	b082      	sub	sp, #8
   11114:	0004      	movs	r4, r0
   11116:	000f      	movs	r7, r1
   11118:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
   1111a:	428d      	cmp	r5, r1
   1111c:	d03f      	beq.n	1119e <move_window+0x92>
   1111e:	7903      	ldrb	r3, [r0, #4]
   11120:	2b00      	cmp	r3, #0
   11122:	d107      	bne.n	11134 <move_window+0x28>
   11124:	2300      	movs	r3, #0
   11126:	2f00      	cmp	r7, #0
   11128:	d12c      	bne.n	11184 <move_window+0x78>
   1112a:	0018      	movs	r0, r3
   1112c:	b002      	add	sp, #8
   1112e:	bc04      	pop	{r2}
   11130:	4691      	mov	r9, r2
   11132:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11134:	2330      	movs	r3, #48	; 0x30
   11136:	469c      	mov	ip, r3
   11138:	4484      	add	ip, r0
   1113a:	4663      	mov	r3, ip
   1113c:	4661      	mov	r1, ip
   1113e:	9301      	str	r3, [sp, #4]
   11140:	7840      	ldrb	r0, [r0, #1]
   11142:	2301      	movs	r3, #1
   11144:	002a      	movs	r2, r5
   11146:	4e17      	ldr	r6, [pc, #92]	; (111a4 <move_window+0x98>)
   11148:	47b0      	blx	r6
   1114a:	2301      	movs	r3, #1
   1114c:	2800      	cmp	r0, #0
   1114e:	d1ec      	bne.n	1112a <move_window+0x1e>
   11150:	2300      	movs	r3, #0
   11152:	7123      	strb	r3, [r4, #4]
   11154:	6a23      	ldr	r3, [r4, #32]
   11156:	69e2      	ldr	r2, [r4, #28]
   11158:	4694      	mov	ip, r2
   1115a:	4463      	add	r3, ip
   1115c:	429d      	cmp	r5, r3
   1115e:	d2e1      	bcs.n	11124 <move_window+0x18>
   11160:	78e6      	ldrb	r6, [r4, #3]
   11162:	2e01      	cmp	r6, #1
   11164:	d9de      	bls.n	11124 <move_window+0x18>
   11166:	4b0f      	ldr	r3, [pc, #60]	; (111a4 <move_window+0x98>)
   11168:	4699      	mov	r9, r3
   1116a:	69e3      	ldr	r3, [r4, #28]
   1116c:	469c      	mov	ip, r3
   1116e:	4465      	add	r5, ip
   11170:	7860      	ldrb	r0, [r4, #1]
   11172:	2301      	movs	r3, #1
   11174:	002a      	movs	r2, r5
   11176:	9901      	ldr	r1, [sp, #4]
   11178:	47c8      	blx	r9
   1117a:	3e01      	subs	r6, #1
   1117c:	b2f6      	uxtb	r6, r6
   1117e:	2e01      	cmp	r6, #1
   11180:	d1f3      	bne.n	1116a <move_window+0x5e>
   11182:	e7cf      	b.n	11124 <move_window+0x18>
   11184:	0021      	movs	r1, r4
   11186:	3130      	adds	r1, #48	; 0x30
   11188:	7860      	ldrb	r0, [r4, #1]
   1118a:	3301      	adds	r3, #1
   1118c:	003a      	movs	r2, r7
   1118e:	4d06      	ldr	r5, [pc, #24]	; (111a8 <move_window+0x9c>)
   11190:	47a8      	blx	r5
   11192:	2301      	movs	r3, #1
   11194:	2800      	cmp	r0, #0
   11196:	d1c8      	bne.n	1112a <move_window+0x1e>
   11198:	62e7      	str	r7, [r4, #44]	; 0x2c
   1119a:	2300      	movs	r3, #0
   1119c:	e7c5      	b.n	1112a <move_window+0x1e>
   1119e:	2300      	movs	r3, #0
   111a0:	e7c3      	b.n	1112a <move_window+0x1e>
   111a2:	46c0      	nop			; (mov r8, r8)
   111a4:	00010aed 	.word	0x00010aed
   111a8:	00010a69 	.word	0x00010a69

000111ac <get_fat>:
   111ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111ae:	0005      	movs	r5, r0
   111b0:	000c      	movs	r4, r1
   111b2:	2901      	cmp	r1, #1
   111b4:	d974      	bls.n	112a0 <get_fat+0xf4>
   111b6:	2001      	movs	r0, #1
   111b8:	69ab      	ldr	r3, [r5, #24]
   111ba:	4299      	cmp	r1, r3
   111bc:	d271      	bcs.n	112a2 <get_fat+0xf6>
   111be:	782b      	ldrb	r3, [r5, #0]
   111c0:	2b02      	cmp	r3, #2
   111c2:	d034      	beq.n	1122e <get_fat+0x82>
   111c4:	2b03      	cmp	r3, #3
   111c6:	d049      	beq.n	1125c <get_fat+0xb0>
   111c8:	2b01      	cmp	r3, #1
   111ca:	d002      	beq.n	111d2 <get_fat+0x26>
   111cc:	2001      	movs	r0, #1
   111ce:	4240      	negs	r0, r0
   111d0:	e067      	b.n	112a2 <get_fat+0xf6>
   111d2:	084e      	lsrs	r6, r1, #1
   111d4:	1876      	adds	r6, r6, r1
   111d6:	0a71      	lsrs	r1, r6, #9
   111d8:	6a2b      	ldr	r3, [r5, #32]
   111da:	469c      	mov	ip, r3
   111dc:	4461      	add	r1, ip
   111de:	0028      	movs	r0, r5
   111e0:	4b30      	ldr	r3, [pc, #192]	; (112a4 <get_fat+0xf8>)
   111e2:	4798      	blx	r3
   111e4:	2800      	cmp	r0, #0
   111e6:	d002      	beq.n	111ee <get_fat+0x42>
   111e8:	2001      	movs	r0, #1
   111ea:	4240      	negs	r0, r0
   111ec:	e059      	b.n	112a2 <get_fat+0xf6>
   111ee:	05f3      	lsls	r3, r6, #23
   111f0:	0ddb      	lsrs	r3, r3, #23
   111f2:	18eb      	adds	r3, r5, r3
   111f4:	3330      	adds	r3, #48	; 0x30
   111f6:	781f      	ldrb	r7, [r3, #0]
   111f8:	3601      	adds	r6, #1
   111fa:	0a71      	lsrs	r1, r6, #9
   111fc:	6a2b      	ldr	r3, [r5, #32]
   111fe:	469c      	mov	ip, r3
   11200:	4461      	add	r1, ip
   11202:	0028      	movs	r0, r5
   11204:	4b27      	ldr	r3, [pc, #156]	; (112a4 <get_fat+0xf8>)
   11206:	4798      	blx	r3
   11208:	2800      	cmp	r0, #0
   1120a:	d002      	beq.n	11212 <get_fat+0x66>
   1120c:	2001      	movs	r0, #1
   1120e:	4240      	negs	r0, r0
   11210:	e047      	b.n	112a2 <get_fat+0xf6>
   11212:	05f6      	lsls	r6, r6, #23
   11214:	0df6      	lsrs	r6, r6, #23
   11216:	19ad      	adds	r5, r5, r6
   11218:	3530      	adds	r5, #48	; 0x30
   1121a:	7828      	ldrb	r0, [r5, #0]
   1121c:	0200      	lsls	r0, r0, #8
   1121e:	4338      	orrs	r0, r7
   11220:	07e3      	lsls	r3, r4, #31
   11222:	d501      	bpl.n	11228 <get_fat+0x7c>
   11224:	0900      	lsrs	r0, r0, #4
   11226:	e03c      	b.n	112a2 <get_fat+0xf6>
   11228:	0500      	lsls	r0, r0, #20
   1122a:	0d00      	lsrs	r0, r0, #20
   1122c:	e039      	b.n	112a2 <get_fat+0xf6>
   1122e:	0a09      	lsrs	r1, r1, #8
   11230:	6a2b      	ldr	r3, [r5, #32]
   11232:	469c      	mov	ip, r3
   11234:	4461      	add	r1, ip
   11236:	0028      	movs	r0, r5
   11238:	4b1a      	ldr	r3, [pc, #104]	; (112a4 <get_fat+0xf8>)
   1123a:	4798      	blx	r3
   1123c:	2800      	cmp	r0, #0
   1123e:	d002      	beq.n	11246 <get_fat+0x9a>
   11240:	2001      	movs	r0, #1
   11242:	4240      	negs	r0, r0
   11244:	e02d      	b.n	112a2 <get_fat+0xf6>
   11246:	0064      	lsls	r4, r4, #1
   11248:	23ff      	movs	r3, #255	; 0xff
   1124a:	005b      	lsls	r3, r3, #1
   1124c:	401c      	ands	r4, r3
   1124e:	192d      	adds	r5, r5, r4
   11250:	3530      	adds	r5, #48	; 0x30
   11252:	786b      	ldrb	r3, [r5, #1]
   11254:	021b      	lsls	r3, r3, #8
   11256:	7828      	ldrb	r0, [r5, #0]
   11258:	4318      	orrs	r0, r3
   1125a:	e022      	b.n	112a2 <get_fat+0xf6>
   1125c:	09c9      	lsrs	r1, r1, #7
   1125e:	6a2b      	ldr	r3, [r5, #32]
   11260:	469c      	mov	ip, r3
   11262:	4461      	add	r1, ip
   11264:	0028      	movs	r0, r5
   11266:	4b0f      	ldr	r3, [pc, #60]	; (112a4 <get_fat+0xf8>)
   11268:	4798      	blx	r3
   1126a:	2800      	cmp	r0, #0
   1126c:	d002      	beq.n	11274 <get_fat+0xc8>
   1126e:	2001      	movs	r0, #1
   11270:	4240      	negs	r0, r0
   11272:	e016      	b.n	112a2 <get_fat+0xf6>
   11274:	00a4      	lsls	r4, r4, #2
   11276:	23fe      	movs	r3, #254	; 0xfe
   11278:	005b      	lsls	r3, r3, #1
   1127a:	401c      	ands	r4, r3
   1127c:	0023      	movs	r3, r4
   1127e:	3330      	adds	r3, #48	; 0x30
   11280:	18eb      	adds	r3, r5, r3
   11282:	78d8      	ldrb	r0, [r3, #3]
   11284:	0600      	lsls	r0, r0, #24
   11286:	789a      	ldrb	r2, [r3, #2]
   11288:	0412      	lsls	r2, r2, #16
   1128a:	4310      	orrs	r0, r2
   1128c:	192c      	adds	r4, r5, r4
   1128e:	3430      	adds	r4, #48	; 0x30
   11290:	7822      	ldrb	r2, [r4, #0]
   11292:	4310      	orrs	r0, r2
   11294:	785b      	ldrb	r3, [r3, #1]
   11296:	021b      	lsls	r3, r3, #8
   11298:	4318      	orrs	r0, r3
   1129a:	0100      	lsls	r0, r0, #4
   1129c:	0900      	lsrs	r0, r0, #4
   1129e:	e000      	b.n	112a2 <get_fat+0xf6>
   112a0:	2001      	movs	r0, #1
   112a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112a4:	0001110d 	.word	0x0001110d

000112a8 <dir_sdi>:
   112a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112aa:	0004      	movs	r4, r0
   112ac:	000d      	movs	r5, r1
   112ae:	80e1      	strh	r1, [r4, #6]
   112b0:	6881      	ldr	r1, [r0, #8]
   112b2:	2002      	movs	r0, #2
   112b4:	2901      	cmp	r1, #1
   112b6:	d003      	beq.n	112c0 <dir_sdi+0x18>
   112b8:	6823      	ldr	r3, [r4, #0]
   112ba:	699a      	ldr	r2, [r3, #24]
   112bc:	4291      	cmp	r1, r2
   112be:	d300      	bcc.n	112c2 <dir_sdi+0x1a>
   112c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112c2:	2900      	cmp	r1, #0
   112c4:	d119      	bne.n	112fa <dir_sdi+0x52>
   112c6:	781a      	ldrb	r2, [r3, #0]
   112c8:	2a03      	cmp	r2, #3
   112ca:	d013      	beq.n	112f4 <dir_sdi+0x4c>
   112cc:	2200      	movs	r2, #0
   112ce:	60e2      	str	r2, [r4, #12]
   112d0:	891a      	ldrh	r2, [r3, #8]
   112d2:	2002      	movs	r0, #2
   112d4:	42aa      	cmp	r2, r5
   112d6:	d9f3      	bls.n	112c0 <dir_sdi+0x18>
   112d8:	092a      	lsrs	r2, r5, #4
   112da:	b292      	uxth	r2, r2
   112dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   112de:	189b      	adds	r3, r3, r2
   112e0:	6123      	str	r3, [r4, #16]
   112e2:	6823      	ldr	r3, [r4, #0]
   112e4:	3330      	adds	r3, #48	; 0x30
   112e6:	220f      	movs	r2, #15
   112e8:	4015      	ands	r5, r2
   112ea:	016d      	lsls	r5, r5, #5
   112ec:	195d      	adds	r5, r3, r5
   112ee:	6165      	str	r5, [r4, #20]
   112f0:	2000      	movs	r0, #0
   112f2:	e7e5      	b.n	112c0 <dir_sdi+0x18>
   112f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
   112f6:	2900      	cmp	r1, #0
   112f8:	d0e8      	beq.n	112cc <dir_sdi+0x24>
   112fa:	789e      	ldrb	r6, [r3, #2]
   112fc:	0136      	lsls	r6, r6, #4
   112fe:	42b5      	cmp	r5, r6
   11300:	d313      	bcc.n	1132a <dir_sdi+0x82>
   11302:	1bad      	subs	r5, r5, r6
   11304:	b2ad      	uxth	r5, r5
   11306:	4f10      	ldr	r7, [pc, #64]	; (11348 <dir_sdi+0xa0>)
   11308:	e000      	b.n	1130c <dir_sdi+0x64>
   1130a:	001d      	movs	r5, r3
   1130c:	6820      	ldr	r0, [r4, #0]
   1130e:	47b8      	blx	r7
   11310:	0001      	movs	r1, r0
   11312:	1c43      	adds	r3, r0, #1
   11314:	d012      	beq.n	1133c <dir_sdi+0x94>
   11316:	2801      	cmp	r0, #1
   11318:	d912      	bls.n	11340 <dir_sdi+0x98>
   1131a:	6823      	ldr	r3, [r4, #0]
   1131c:	699b      	ldr	r3, [r3, #24]
   1131e:	4298      	cmp	r0, r3
   11320:	d210      	bcs.n	11344 <dir_sdi+0x9c>
   11322:	1bab      	subs	r3, r5, r6
   11324:	b29b      	uxth	r3, r3
   11326:	42b5      	cmp	r5, r6
   11328:	d2ef      	bcs.n	1130a <dir_sdi+0x62>
   1132a:	60e1      	str	r1, [r4, #12]
   1132c:	6820      	ldr	r0, [r4, #0]
   1132e:	4b07      	ldr	r3, [pc, #28]	; (1134c <dir_sdi+0xa4>)
   11330:	4798      	blx	r3
   11332:	092b      	lsrs	r3, r5, #4
   11334:	b29b      	uxth	r3, r3
   11336:	1818      	adds	r0, r3, r0
   11338:	6120      	str	r0, [r4, #16]
   1133a:	e7d2      	b.n	112e2 <dir_sdi+0x3a>
   1133c:	2001      	movs	r0, #1
   1133e:	e7bf      	b.n	112c0 <dir_sdi+0x18>
   11340:	2002      	movs	r0, #2
   11342:	e7bd      	b.n	112c0 <dir_sdi+0x18>
   11344:	2002      	movs	r0, #2
   11346:	e7bb      	b.n	112c0 <dir_sdi+0x18>
   11348:	000111ad 	.word	0x000111ad
   1134c:	00010c53 	.word	0x00010c53

00011350 <put_fat>:
   11350:	b5f0      	push	{r4, r5, r6, r7, lr}
   11352:	46c6      	mov	lr, r8
   11354:	b500      	push	{lr}
   11356:	0007      	movs	r7, r0
   11358:	000c      	movs	r4, r1
   1135a:	0016      	movs	r6, r2
   1135c:	2502      	movs	r5, #2
   1135e:	2901      	cmp	r1, #1
   11360:	d902      	bls.n	11368 <put_fat+0x18>
   11362:	6983      	ldr	r3, [r0, #24]
   11364:	4299      	cmp	r1, r3
   11366:	d303      	bcc.n	11370 <put_fat+0x20>
   11368:	0028      	movs	r0, r5
   1136a:	bc04      	pop	{r2}
   1136c:	4690      	mov	r8, r2
   1136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11370:	7803      	ldrb	r3, [r0, #0]
   11372:	2b02      	cmp	r3, #2
   11374:	d053      	beq.n	1141e <put_fat+0xce>
   11376:	2b03      	cmp	r3, #3
   11378:	d063      	beq.n	11442 <put_fat+0xf2>
   1137a:	2502      	movs	r5, #2
   1137c:	2b01      	cmp	r3, #1
   1137e:	d002      	beq.n	11386 <put_fat+0x36>
   11380:	2301      	movs	r3, #1
   11382:	713b      	strb	r3, [r7, #4]
   11384:	e7f0      	b.n	11368 <put_fat+0x18>
   11386:	084b      	lsrs	r3, r1, #1
   11388:	4698      	mov	r8, r3
   1138a:	4488      	add	r8, r1
   1138c:	4643      	mov	r3, r8
   1138e:	0a59      	lsrs	r1, r3, #9
   11390:	6a03      	ldr	r3, [r0, #32]
   11392:	469c      	mov	ip, r3
   11394:	4461      	add	r1, ip
   11396:	4b3b      	ldr	r3, [pc, #236]	; (11484 <put_fat+0x134>)
   11398:	4798      	blx	r3
   1139a:	1e05      	subs	r5, r0, #0
   1139c:	d1f0      	bne.n	11380 <put_fat+0x30>
   1139e:	4643      	mov	r3, r8
   113a0:	05db      	lsls	r3, r3, #23
   113a2:	0ddb      	lsrs	r3, r3, #23
   113a4:	07e2      	lsls	r2, r4, #31
   113a6:	d51f      	bpl.n	113e8 <put_fat+0x98>
   113a8:	18fb      	adds	r3, r7, r3
   113aa:	3330      	adds	r3, #48	; 0x30
   113ac:	7819      	ldrb	r1, [r3, #0]
   113ae:	220f      	movs	r2, #15
   113b0:	400a      	ands	r2, r1
   113b2:	0131      	lsls	r1, r6, #4
   113b4:	20ff      	movs	r0, #255	; 0xff
   113b6:	0100      	lsls	r0, r0, #4
   113b8:	4001      	ands	r1, r0
   113ba:	430a      	orrs	r2, r1
   113bc:	701a      	strb	r2, [r3, #0]
   113be:	4644      	mov	r4, r8
   113c0:	3401      	adds	r4, #1
   113c2:	2301      	movs	r3, #1
   113c4:	713b      	strb	r3, [r7, #4]
   113c6:	0a61      	lsrs	r1, r4, #9
   113c8:	6a3b      	ldr	r3, [r7, #32]
   113ca:	469c      	mov	ip, r3
   113cc:	4461      	add	r1, ip
   113ce:	0038      	movs	r0, r7
   113d0:	4b2c      	ldr	r3, [pc, #176]	; (11484 <put_fat+0x134>)
   113d2:	4798      	blx	r3
   113d4:	2800      	cmp	r0, #0
   113d6:	d151      	bne.n	1147c <put_fat+0x12c>
   113d8:	05e4      	lsls	r4, r4, #23
   113da:	0de4      	lsrs	r4, r4, #23
   113dc:	0936      	lsrs	r6, r6, #4
   113de:	b2f6      	uxtb	r6, r6
   113e0:	193c      	adds	r4, r7, r4
   113e2:	3430      	adds	r4, #48	; 0x30
   113e4:	7026      	strb	r6, [r4, #0]
   113e6:	e7cb      	b.n	11380 <put_fat+0x30>
   113e8:	18fb      	adds	r3, r7, r3
   113ea:	3330      	adds	r3, #48	; 0x30
   113ec:	701e      	strb	r6, [r3, #0]
   113ee:	4644      	mov	r4, r8
   113f0:	3401      	adds	r4, #1
   113f2:	2301      	movs	r3, #1
   113f4:	713b      	strb	r3, [r7, #4]
   113f6:	0a61      	lsrs	r1, r4, #9
   113f8:	6a3b      	ldr	r3, [r7, #32]
   113fa:	469c      	mov	ip, r3
   113fc:	4461      	add	r1, ip
   113fe:	0038      	movs	r0, r7
   11400:	4b20      	ldr	r3, [pc, #128]	; (11484 <put_fat+0x134>)
   11402:	4798      	blx	r3
   11404:	2800      	cmp	r0, #0
   11406:	d13b      	bne.n	11480 <put_fat+0x130>
   11408:	05e4      	lsls	r4, r4, #23
   1140a:	0de4      	lsrs	r4, r4, #23
   1140c:	193b      	adds	r3, r7, r4
   1140e:	3330      	adds	r3, #48	; 0x30
   11410:	781b      	ldrb	r3, [r3, #0]
   11412:	220f      	movs	r2, #15
   11414:	4393      	bics	r3, r2
   11416:	0536      	lsls	r6, r6, #20
   11418:	0f36      	lsrs	r6, r6, #28
   1141a:	431e      	orrs	r6, r3
   1141c:	e7e0      	b.n	113e0 <put_fat+0x90>
   1141e:	0a09      	lsrs	r1, r1, #8
   11420:	6a03      	ldr	r3, [r0, #32]
   11422:	469c      	mov	ip, r3
   11424:	4461      	add	r1, ip
   11426:	4b17      	ldr	r3, [pc, #92]	; (11484 <put_fat+0x134>)
   11428:	4798      	blx	r3
   1142a:	1e05      	subs	r5, r0, #0
   1142c:	d1a8      	bne.n	11380 <put_fat+0x30>
   1142e:	0063      	lsls	r3, r4, #1
   11430:	24ff      	movs	r4, #255	; 0xff
   11432:	0064      	lsls	r4, r4, #1
   11434:	4023      	ands	r3, r4
   11436:	18fb      	adds	r3, r7, r3
   11438:	3330      	adds	r3, #48	; 0x30
   1143a:	701e      	strb	r6, [r3, #0]
   1143c:	0a36      	lsrs	r6, r6, #8
   1143e:	705e      	strb	r6, [r3, #1]
   11440:	e79e      	b.n	11380 <put_fat+0x30>
   11442:	09c9      	lsrs	r1, r1, #7
   11444:	6a03      	ldr	r3, [r0, #32]
   11446:	469c      	mov	ip, r3
   11448:	4461      	add	r1, ip
   1144a:	4b0e      	ldr	r3, [pc, #56]	; (11484 <put_fat+0x134>)
   1144c:	4798      	blx	r3
   1144e:	1e05      	subs	r5, r0, #0
   11450:	d196      	bne.n	11380 <put_fat+0x30>
   11452:	00a4      	lsls	r4, r4, #2
   11454:	23fe      	movs	r3, #254	; 0xfe
   11456:	005b      	lsls	r3, r3, #1
   11458:	401c      	ands	r4, r3
   1145a:	0022      	movs	r2, r4
   1145c:	3230      	adds	r2, #48	; 0x30
   1145e:	18ba      	adds	r2, r7, r2
   11460:	78d3      	ldrb	r3, [r2, #3]
   11462:	193c      	adds	r4, r7, r4
   11464:	3430      	adds	r4, #48	; 0x30
   11466:	091b      	lsrs	r3, r3, #4
   11468:	071b      	lsls	r3, r3, #28
   1146a:	431e      	orrs	r6, r3
   1146c:	7026      	strb	r6, [r4, #0]
   1146e:	0a33      	lsrs	r3, r6, #8
   11470:	7053      	strb	r3, [r2, #1]
   11472:	0c33      	lsrs	r3, r6, #16
   11474:	7093      	strb	r3, [r2, #2]
   11476:	0e36      	lsrs	r6, r6, #24
   11478:	70d6      	strb	r6, [r2, #3]
   1147a:	e781      	b.n	11380 <put_fat+0x30>
   1147c:	0005      	movs	r5, r0
   1147e:	e77f      	b.n	11380 <put_fat+0x30>
   11480:	0005      	movs	r5, r0
   11482:	e77d      	b.n	11380 <put_fat+0x30>
   11484:	0001110d 	.word	0x0001110d

00011488 <create_chain>:
   11488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1148a:	46c6      	mov	lr, r8
   1148c:	b500      	push	{lr}
   1148e:	0005      	movs	r5, r0
   11490:	4688      	mov	r8, r1
   11492:	2900      	cmp	r1, #0
   11494:	d107      	bne.n	114a6 <create_chain+0x1e>
   11496:	68c6      	ldr	r6, [r0, #12]
   11498:	2e00      	cmp	r6, #0
   1149a:	d00d      	beq.n	114b8 <create_chain+0x30>
   1149c:	6983      	ldr	r3, [r0, #24]
   1149e:	429e      	cmp	r6, r3
   114a0:	d30b      	bcc.n	114ba <create_chain+0x32>
   114a2:	2601      	movs	r6, #1
   114a4:	e009      	b.n	114ba <create_chain+0x32>
   114a6:	4b26      	ldr	r3, [pc, #152]	; (11540 <create_chain+0xb8>)
   114a8:	4798      	blx	r3
   114aa:	2801      	cmp	r0, #1
   114ac:	d93d      	bls.n	1152a <create_chain+0xa2>
   114ae:	69ab      	ldr	r3, [r5, #24]
   114b0:	4646      	mov	r6, r8
   114b2:	4298      	cmp	r0, r3
   114b4:	d201      	bcs.n	114ba <create_chain+0x32>
   114b6:	e03d      	b.n	11534 <create_chain+0xac>
   114b8:	2601      	movs	r6, #1
   114ba:	0034      	movs	r4, r6
   114bc:	4f20      	ldr	r7, [pc, #128]	; (11540 <create_chain+0xb8>)
   114be:	e00a      	b.n	114d6 <create_chain+0x4e>
   114c0:	0021      	movs	r1, r4
   114c2:	0028      	movs	r0, r5
   114c4:	47b8      	blx	r7
   114c6:	2800      	cmp	r0, #0
   114c8:	d00d      	beq.n	114e6 <create_chain+0x5e>
   114ca:	1c43      	adds	r3, r0, #1
   114cc:	d032      	beq.n	11534 <create_chain+0xac>
   114ce:	2801      	cmp	r0, #1
   114d0:	d030      	beq.n	11534 <create_chain+0xac>
   114d2:	42b4      	cmp	r4, r6
   114d4:	d02d      	beq.n	11532 <create_chain+0xaa>
   114d6:	3401      	adds	r4, #1
   114d8:	69ab      	ldr	r3, [r5, #24]
   114da:	429c      	cmp	r4, r3
   114dc:	d3f0      	bcc.n	114c0 <create_chain+0x38>
   114de:	2e01      	cmp	r6, #1
   114e0:	d925      	bls.n	1152e <create_chain+0xa6>
   114e2:	2402      	movs	r4, #2
   114e4:	e7ec      	b.n	114c0 <create_chain+0x38>
   114e6:	4a17      	ldr	r2, [pc, #92]	; (11544 <create_chain+0xbc>)
   114e8:	0021      	movs	r1, r4
   114ea:	0028      	movs	r0, r5
   114ec:	4b16      	ldr	r3, [pc, #88]	; (11548 <create_chain+0xc0>)
   114ee:	4798      	blx	r3
   114f0:	2800      	cmp	r0, #0
   114f2:	d113      	bne.n	1151c <create_chain+0x94>
   114f4:	4643      	mov	r3, r8
   114f6:	2b00      	cmp	r3, #0
   114f8:	d109      	bne.n	1150e <create_chain+0x86>
   114fa:	60ec      	str	r4, [r5, #12]
   114fc:	692b      	ldr	r3, [r5, #16]
   114fe:	1c5a      	adds	r2, r3, #1
   11500:	d01b      	beq.n	1153a <create_chain+0xb2>
   11502:	3b01      	subs	r3, #1
   11504:	612b      	str	r3, [r5, #16]
   11506:	2301      	movs	r3, #1
   11508:	716b      	strb	r3, [r5, #5]
   1150a:	0020      	movs	r0, r4
   1150c:	e012      	b.n	11534 <create_chain+0xac>
   1150e:	0022      	movs	r2, r4
   11510:	4641      	mov	r1, r8
   11512:	0028      	movs	r0, r5
   11514:	4b0c      	ldr	r3, [pc, #48]	; (11548 <create_chain+0xc0>)
   11516:	4798      	blx	r3
   11518:	2800      	cmp	r0, #0
   1151a:	d0ee      	beq.n	114fa <create_chain+0x72>
   1151c:	3801      	subs	r0, #1
   1151e:	4242      	negs	r2, r0
   11520:	4142      	adcs	r2, r0
   11522:	4250      	negs	r0, r2
   11524:	2301      	movs	r3, #1
   11526:	4318      	orrs	r0, r3
   11528:	e004      	b.n	11534 <create_chain+0xac>
   1152a:	2001      	movs	r0, #1
   1152c:	e002      	b.n	11534 <create_chain+0xac>
   1152e:	2000      	movs	r0, #0
   11530:	e000      	b.n	11534 <create_chain+0xac>
   11532:	2000      	movs	r0, #0
   11534:	bc04      	pop	{r2}
   11536:	4690      	mov	r8, r2
   11538:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1153a:	0020      	movs	r0, r4
   1153c:	e7fa      	b.n	11534 <create_chain+0xac>
   1153e:	46c0      	nop			; (mov r8, r8)
   11540:	000111ad 	.word	0x000111ad
   11544:	0fffffff 	.word	0x0fffffff
   11548:	00011351 	.word	0x00011351

0001154c <remove_chain>:
   1154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1154e:	46ce      	mov	lr, r9
   11550:	4647      	mov	r7, r8
   11552:	b580      	push	{r7, lr}
   11554:	0004      	movs	r4, r0
   11556:	000d      	movs	r5, r1
   11558:	2002      	movs	r0, #2
   1155a:	2901      	cmp	r1, #1
   1155c:	d902      	bls.n	11564 <remove_chain+0x18>
   1155e:	69a3      	ldr	r3, [r4, #24]
   11560:	4299      	cmp	r1, r3
   11562:	d303      	bcc.n	1156c <remove_chain+0x20>
   11564:	bc0c      	pop	{r2, r3}
   11566:	4690      	mov	r8, r2
   11568:	4699      	mov	r9, r3
   1156a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1156c:	4f13      	ldr	r7, [pc, #76]	; (115bc <remove_chain+0x70>)
   1156e:	4b14      	ldr	r3, [pc, #80]	; (115c0 <remove_chain+0x74>)
   11570:	4698      	mov	r8, r3
   11572:	2301      	movs	r3, #1
   11574:	4699      	mov	r9, r3
   11576:	e003      	b.n	11580 <remove_chain+0x34>
   11578:	0035      	movs	r5, r6
   1157a:	69a3      	ldr	r3, [r4, #24]
   1157c:	42b3      	cmp	r3, r6
   1157e:	d9f1      	bls.n	11564 <remove_chain+0x18>
   11580:	0029      	movs	r1, r5
   11582:	0020      	movs	r0, r4
   11584:	47b8      	blx	r7
   11586:	1e06      	subs	r6, r0, #0
   11588:	d011      	beq.n	115ae <remove_chain+0x62>
   1158a:	2801      	cmp	r0, #1
   1158c:	d011      	beq.n	115b2 <remove_chain+0x66>
   1158e:	1c43      	adds	r3, r0, #1
   11590:	d011      	beq.n	115b6 <remove_chain+0x6a>
   11592:	2200      	movs	r2, #0
   11594:	0029      	movs	r1, r5
   11596:	0020      	movs	r0, r4
   11598:	47c0      	blx	r8
   1159a:	2800      	cmp	r0, #0
   1159c:	d1e2      	bne.n	11564 <remove_chain+0x18>
   1159e:	6923      	ldr	r3, [r4, #16]
   115a0:	1c5a      	adds	r2, r3, #1
   115a2:	d0e9      	beq.n	11578 <remove_chain+0x2c>
   115a4:	3301      	adds	r3, #1
   115a6:	6123      	str	r3, [r4, #16]
   115a8:	464b      	mov	r3, r9
   115aa:	7163      	strb	r3, [r4, #5]
   115ac:	e7e4      	b.n	11578 <remove_chain+0x2c>
   115ae:	2000      	movs	r0, #0
   115b0:	e7d8      	b.n	11564 <remove_chain+0x18>
   115b2:	2002      	movs	r0, #2
   115b4:	e7d6      	b.n	11564 <remove_chain+0x18>
   115b6:	2001      	movs	r0, #1
   115b8:	e7d4      	b.n	11564 <remove_chain+0x18>
   115ba:	46c0      	nop			; (mov r8, r8)
   115bc:	000111ad 	.word	0x000111ad
   115c0:	00011351 	.word	0x00011351

000115c4 <dir_next>:
   115c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115c6:	46d6      	mov	lr, sl
   115c8:	4647      	mov	r7, r8
   115ca:	b580      	push	{r7, lr}
   115cc:	0006      	movs	r6, r0
   115ce:	000d      	movs	r5, r1
   115d0:	88c4      	ldrh	r4, [r0, #6]
   115d2:	3401      	adds	r4, #1
   115d4:	b2a4      	uxth	r4, r4
   115d6:	2004      	movs	r0, #4
   115d8:	2c00      	cmp	r4, #0
   115da:	d103      	bne.n	115e4 <dir_next+0x20>
   115dc:	bc0c      	pop	{r2, r3}
   115de:	4690      	mov	r8, r2
   115e0:	469a      	mov	sl, r3
   115e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   115e4:	6933      	ldr	r3, [r6, #16]
   115e6:	2b00      	cmp	r3, #0
   115e8:	d0f8      	beq.n	115dc <dir_next+0x18>
   115ea:	270f      	movs	r7, #15
   115ec:	4027      	ands	r7, r4
   115ee:	d10f      	bne.n	11610 <dir_next+0x4c>
   115f0:	3301      	adds	r3, #1
   115f2:	6133      	str	r3, [r6, #16]
   115f4:	68f1      	ldr	r1, [r6, #12]
   115f6:	2900      	cmp	r1, #0
   115f8:	d104      	bne.n	11604 <dir_next+0x40>
   115fa:	6833      	ldr	r3, [r6, #0]
   115fc:	891b      	ldrh	r3, [r3, #8]
   115fe:	42a3      	cmp	r3, r4
   11600:	d9ec      	bls.n	115dc <dir_next+0x18>
   11602:	e005      	b.n	11610 <dir_next+0x4c>
   11604:	6830      	ldr	r0, [r6, #0]
   11606:	7883      	ldrb	r3, [r0, #2]
   11608:	3b01      	subs	r3, #1
   1160a:	0922      	lsrs	r2, r4, #4
   1160c:	421a      	tst	r2, r3
   1160e:	d007      	beq.n	11620 <dir_next+0x5c>
   11610:	80f4      	strh	r4, [r6, #6]
   11612:	6833      	ldr	r3, [r6, #0]
   11614:	3330      	adds	r3, #48	; 0x30
   11616:	017f      	lsls	r7, r7, #5
   11618:	19df      	adds	r7, r3, r7
   1161a:	6177      	str	r7, [r6, #20]
   1161c:	2000      	movs	r0, #0
   1161e:	e7dd      	b.n	115dc <dir_next+0x18>
   11620:	4b2c      	ldr	r3, [pc, #176]	; (116d4 <dir_next+0x110>)
   11622:	4798      	blx	r3
   11624:	4680      	mov	r8, r0
   11626:	2002      	movs	r0, #2
   11628:	4643      	mov	r3, r8
   1162a:	2b01      	cmp	r3, #1
   1162c:	d9d6      	bls.n	115dc <dir_next+0x18>
   1162e:	3301      	adds	r3, #1
   11630:	d04b      	beq.n	116ca <dir_next+0x106>
   11632:	6833      	ldr	r3, [r6, #0]
   11634:	699a      	ldr	r2, [r3, #24]
   11636:	4590      	cmp	r8, r2
   11638:	d33f      	bcc.n	116ba <dir_next+0xf6>
   1163a:	3002      	adds	r0, #2
   1163c:	2d00      	cmp	r5, #0
   1163e:	d0cd      	beq.n	115dc <dir_next+0x18>
   11640:	68f1      	ldr	r1, [r6, #12]
   11642:	0018      	movs	r0, r3
   11644:	4b24      	ldr	r3, [pc, #144]	; (116d8 <dir_next+0x114>)
   11646:	4798      	blx	r3
   11648:	4680      	mov	r8, r0
   1164a:	2007      	movs	r0, #7
   1164c:	4643      	mov	r3, r8
   1164e:	2b00      	cmp	r3, #0
   11650:	d0c4      	beq.n	115dc <dir_next+0x18>
   11652:	3805      	subs	r0, #5
   11654:	2b01      	cmp	r3, #1
   11656:	d0c1      	beq.n	115dc <dir_next+0x18>
   11658:	3801      	subs	r0, #1
   1165a:	3301      	adds	r3, #1
   1165c:	d0be      	beq.n	115dc <dir_next+0x18>
   1165e:	2100      	movs	r1, #0
   11660:	6830      	ldr	r0, [r6, #0]
   11662:	4b1e      	ldr	r3, [pc, #120]	; (116dc <dir_next+0x118>)
   11664:	4798      	blx	r3
   11666:	0003      	movs	r3, r0
   11668:	2001      	movs	r0, #1
   1166a:	2b00      	cmp	r3, #0
   1166c:	d1b6      	bne.n	115dc <dir_next+0x18>
   1166e:	6830      	ldr	r0, [r6, #0]
   11670:	3030      	adds	r0, #48	; 0x30
   11672:	2280      	movs	r2, #128	; 0x80
   11674:	0092      	lsls	r2, r2, #2
   11676:	2100      	movs	r1, #0
   11678:	4b19      	ldr	r3, [pc, #100]	; (116e0 <dir_next+0x11c>)
   1167a:	4798      	blx	r3
   1167c:	6835      	ldr	r5, [r6, #0]
   1167e:	4641      	mov	r1, r8
   11680:	0028      	movs	r0, r5
   11682:	4b18      	ldr	r3, [pc, #96]	; (116e4 <dir_next+0x120>)
   11684:	4798      	blx	r3
   11686:	62e8      	str	r0, [r5, #44]	; 0x2c
   11688:	2500      	movs	r5, #0
   1168a:	2301      	movs	r3, #1
   1168c:	469a      	mov	sl, r3
   1168e:	6833      	ldr	r3, [r6, #0]
   11690:	789a      	ldrb	r2, [r3, #2]
   11692:	42aa      	cmp	r2, r5
   11694:	d90e      	bls.n	116b4 <dir_next+0xf0>
   11696:	4652      	mov	r2, sl
   11698:	711a      	strb	r2, [r3, #4]
   1169a:	2100      	movs	r1, #0
   1169c:	6830      	ldr	r0, [r6, #0]
   1169e:	4b0f      	ldr	r3, [pc, #60]	; (116dc <dir_next+0x118>)
   116a0:	4798      	blx	r3
   116a2:	2800      	cmp	r0, #0
   116a4:	d113      	bne.n	116ce <dir_next+0x10a>
   116a6:	6832      	ldr	r2, [r6, #0]
   116a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   116aa:	3301      	adds	r3, #1
   116ac:	62d3      	str	r3, [r2, #44]	; 0x2c
   116ae:	3501      	adds	r5, #1
   116b0:	b2ed      	uxtb	r5, r5
   116b2:	e7ec      	b.n	1168e <dir_next+0xca>
   116b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   116b6:	1b52      	subs	r2, r2, r5
   116b8:	62da      	str	r2, [r3, #44]	; 0x2c
   116ba:	4643      	mov	r3, r8
   116bc:	60f3      	str	r3, [r6, #12]
   116be:	4641      	mov	r1, r8
   116c0:	6830      	ldr	r0, [r6, #0]
   116c2:	4b08      	ldr	r3, [pc, #32]	; (116e4 <dir_next+0x120>)
   116c4:	4798      	blx	r3
   116c6:	6130      	str	r0, [r6, #16]
   116c8:	e7a2      	b.n	11610 <dir_next+0x4c>
   116ca:	2001      	movs	r0, #1
   116cc:	e786      	b.n	115dc <dir_next+0x18>
   116ce:	2001      	movs	r0, #1
   116d0:	e784      	b.n	115dc <dir_next+0x18>
   116d2:	46c0      	nop			; (mov r8, r8)
   116d4:	000111ad 	.word	0x000111ad
   116d8:	00011489 	.word	0x00011489
   116dc:	0001110d 	.word	0x0001110d
   116e0:	00010c41 	.word	0x00010c41
   116e4:	00010c53 	.word	0x00010c53

000116e8 <dir_find>:
   116e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   116ea:	46de      	mov	lr, fp
   116ec:	4657      	mov	r7, sl
   116ee:	464e      	mov	r6, r9
   116f0:	4645      	mov	r5, r8
   116f2:	b5e0      	push	{r5, r6, r7, lr}
   116f4:	b083      	sub	sp, #12
   116f6:	0005      	movs	r5, r0
   116f8:	2100      	movs	r1, #0
   116fa:	4b5a      	ldr	r3, [pc, #360]	; (11864 <dir_find+0x17c>)
   116fc:	4798      	blx	r3
   116fe:	1e07      	subs	r7, r0, #0
   11700:	d000      	beq.n	11704 <dir_find+0x1c>
   11702:	e09e      	b.n	11842 <dir_find+0x15a>
   11704:	23ff      	movs	r3, #255	; 0xff
   11706:	4699      	mov	r9, r3
   11708:	469a      	mov	sl, r3
   1170a:	4b57      	ldr	r3, [pc, #348]	; (11868 <dir_find+0x180>)
   1170c:	469b      	mov	fp, r3
   1170e:	e01b      	b.n	11748 <dir_find+0x60>
   11710:	2b0f      	cmp	r3, #15
   11712:	d030      	beq.n	11776 <dir_find+0x8e>
   11714:	4653      	mov	r3, sl
   11716:	2b00      	cmp	r3, #0
   11718:	d105      	bne.n	11726 <dir_find+0x3e>
   1171a:	0020      	movs	r0, r4
   1171c:	4b53      	ldr	r3, [pc, #332]	; (1186c <dir_find+0x184>)
   1171e:	4798      	blx	r3
   11720:	4581      	cmp	r9, r0
   11722:	d100      	bne.n	11726 <dir_find+0x3e>
   11724:	e08d      	b.n	11842 <dir_find+0x15a>
   11726:	2301      	movs	r3, #1
   11728:	425b      	negs	r3, r3
   1172a:	842b      	strh	r3, [r5, #32]
   1172c:	69a8      	ldr	r0, [r5, #24]
   1172e:	7ac3      	ldrb	r3, [r0, #11]
   11730:	07db      	lsls	r3, r3, #31
   11732:	d400      	bmi.n	11736 <dir_find+0x4e>
   11734:	e07d      	b.n	11832 <dir_find+0x14a>
   11736:	23ff      	movs	r3, #255	; 0xff
   11738:	469a      	mov	sl, r3
   1173a:	2100      	movs	r1, #0
   1173c:	0028      	movs	r0, r5
   1173e:	4b4c      	ldr	r3, [pc, #304]	; (11870 <dir_find+0x188>)
   11740:	4798      	blx	r3
   11742:	1e07      	subs	r7, r0, #0
   11744:	d000      	beq.n	11748 <dir_find+0x60>
   11746:	e07c      	b.n	11842 <dir_find+0x15a>
   11748:	6929      	ldr	r1, [r5, #16]
   1174a:	6828      	ldr	r0, [r5, #0]
   1174c:	47d8      	blx	fp
   1174e:	1e07      	subs	r7, r0, #0
   11750:	d177      	bne.n	11842 <dir_find+0x15a>
   11752:	696c      	ldr	r4, [r5, #20]
   11754:	7826      	ldrb	r6, [r4, #0]
   11756:	2e00      	cmp	r6, #0
   11758:	d100      	bne.n	1175c <dir_find+0x74>
   1175a:	e080      	b.n	1185e <dir_find+0x176>
   1175c:	7ae2      	ldrb	r2, [r4, #11]
   1175e:	233f      	movs	r3, #63	; 0x3f
   11760:	4013      	ands	r3, r2
   11762:	2ee5      	cmp	r6, #229	; 0xe5
   11764:	d100      	bne.n	11768 <dir_find+0x80>
   11766:	e077      	b.n	11858 <dir_find+0x170>
   11768:	0712      	lsls	r2, r2, #28
   1176a:	d5d1      	bpl.n	11710 <dir_find+0x28>
   1176c:	2b0f      	cmp	r3, #15
   1176e:	d002      	beq.n	11776 <dir_find+0x8e>
   11770:	23ff      	movs	r3, #255	; 0xff
   11772:	469a      	mov	sl, r3
   11774:	e7e1      	b.n	1173a <dir_find+0x52>
   11776:	69ef      	ldr	r7, [r5, #28]
   11778:	2f00      	cmp	r7, #0
   1177a:	d0de      	beq.n	1173a <dir_find+0x52>
   1177c:	0673      	lsls	r3, r6, #25
   1177e:	d518      	bpl.n	117b2 <dir_find+0xca>
   11780:	7b63      	ldrb	r3, [r4, #13]
   11782:	4699      	mov	r9, r3
   11784:	2340      	movs	r3, #64	; 0x40
   11786:	439e      	bics	r6, r3
   11788:	88eb      	ldrh	r3, [r5, #6]
   1178a:	842b      	strh	r3, [r5, #32]
   1178c:	7b63      	ldrb	r3, [r4, #13]
   1178e:	9300      	str	r3, [sp, #0]
   11790:	22ff      	movs	r2, #255	; 0xff
   11792:	4692      	mov	sl, r2
   11794:	454b      	cmp	r3, r9
   11796:	d1d0      	bne.n	1173a <dir_find+0x52>
   11798:	7823      	ldrb	r3, [r4, #0]
   1179a:	3abf      	subs	r2, #191	; 0xbf
   1179c:	4393      	bics	r3, r2
   1179e:	3b01      	subs	r3, #1
   117a0:	005a      	lsls	r2, r3, #1
   117a2:	18d2      	adds	r2, r2, r3
   117a4:	0092      	lsls	r2, r2, #2
   117a6:	4692      	mov	sl, r2
   117a8:	449a      	add	sl, r3
   117aa:	2201      	movs	r2, #1
   117ac:	2300      	movs	r3, #0
   117ae:	4699      	mov	r9, r3
   117b0:	e01d      	b.n	117ee <dir_find+0x106>
   117b2:	45b2      	cmp	sl, r6
   117b4:	d0ea      	beq.n	1178c <dir_find+0xa4>
   117b6:	23ff      	movs	r3, #255	; 0xff
   117b8:	469a      	mov	sl, r3
   117ba:	e7be      	b.n	1173a <dir_find+0x52>
   117bc:	4b2d      	ldr	r3, [pc, #180]	; (11874 <dir_find+0x18c>)
   117be:	4798      	blx	r3
   117c0:	9001      	str	r0, [sp, #4]
   117c2:	4653      	mov	r3, sl
   117c4:	2bfe      	cmp	r3, #254	; 0xfe
   117c6:	d81f      	bhi.n	11808 <dir_find+0x120>
   117c8:	2301      	movs	r3, #1
   117ca:	4453      	add	r3, sl
   117cc:	4698      	mov	r8, r3
   117ce:	4653      	mov	r3, sl
   117d0:	005b      	lsls	r3, r3, #1
   117d2:	5bd8      	ldrh	r0, [r3, r7]
   117d4:	4b27      	ldr	r3, [pc, #156]	; (11874 <dir_find+0x18c>)
   117d6:	4798      	blx	r3
   117d8:	0002      	movs	r2, r0
   117da:	9b01      	ldr	r3, [sp, #4]
   117dc:	4283      	cmp	r3, r0
   117de:	d113      	bne.n	11808 <dir_find+0x120>
   117e0:	46c2      	mov	sl, r8
   117e2:	2301      	movs	r3, #1
   117e4:	469c      	mov	ip, r3
   117e6:	44e1      	add	r9, ip
   117e8:	464b      	mov	r3, r9
   117ea:	2b0d      	cmp	r3, #13
   117ec:	d011      	beq.n	11812 <dir_find+0x12a>
   117ee:	4b22      	ldr	r3, [pc, #136]	; (11878 <dir_find+0x190>)
   117f0:	4649      	mov	r1, r9
   117f2:	5cc9      	ldrb	r1, [r1, r3]
   117f4:	1863      	adds	r3, r4, r1
   117f6:	785b      	ldrb	r3, [r3, #1]
   117f8:	021b      	lsls	r3, r3, #8
   117fa:	5c60      	ldrb	r0, [r4, r1]
   117fc:	4318      	orrs	r0, r3
   117fe:	2a00      	cmp	r2, #0
   11800:	d1dc      	bne.n	117bc <dir_find+0xd4>
   11802:	4b1e      	ldr	r3, [pc, #120]	; (1187c <dir_find+0x194>)
   11804:	4298      	cmp	r0, r3
   11806:	d0ec      	beq.n	117e2 <dir_find+0xfa>
   11808:	9b00      	ldr	r3, [sp, #0]
   1180a:	4699      	mov	r9, r3
   1180c:	23ff      	movs	r3, #255	; 0xff
   1180e:	469a      	mov	sl, r3
   11810:	e793      	b.n	1173a <dir_find+0x52>
   11812:	7823      	ldrb	r3, [r4, #0]
   11814:	065b      	lsls	r3, r3, #25
   11816:	d506      	bpl.n	11826 <dir_find+0x13e>
   11818:	2a00      	cmp	r2, #0
   1181a:	d004      	beq.n	11826 <dir_find+0x13e>
   1181c:	4653      	mov	r3, sl
   1181e:	005b      	lsls	r3, r3, #1
   11820:	5bdb      	ldrh	r3, [r3, r7]
   11822:	2b00      	cmp	r3, #0
   11824:	d1f0      	bne.n	11808 <dir_find+0x120>
   11826:	3e01      	subs	r6, #1
   11828:	b2f3      	uxtb	r3, r6
   1182a:	469a      	mov	sl, r3
   1182c:	9b00      	ldr	r3, [sp, #0]
   1182e:	4699      	mov	r9, r3
   11830:	e783      	b.n	1173a <dir_find+0x52>
   11832:	2300      	movs	r3, #0
   11834:	5ce1      	ldrb	r1, [r4, r3]
   11836:	5cc2      	ldrb	r2, [r0, r3]
   11838:	4291      	cmp	r1, r2
   1183a:	d10a      	bne.n	11852 <dir_find+0x16a>
   1183c:	3301      	adds	r3, #1
   1183e:	2b0b      	cmp	r3, #11
   11840:	d1f8      	bne.n	11834 <dir_find+0x14c>
   11842:	0038      	movs	r0, r7
   11844:	b003      	add	sp, #12
   11846:	bc3c      	pop	{r2, r3, r4, r5}
   11848:	4690      	mov	r8, r2
   1184a:	4699      	mov	r9, r3
   1184c:	46a2      	mov	sl, r4
   1184e:	46ab      	mov	fp, r5
   11850:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11852:	23ff      	movs	r3, #255	; 0xff
   11854:	469a      	mov	sl, r3
   11856:	e770      	b.n	1173a <dir_find+0x52>
   11858:	23ff      	movs	r3, #255	; 0xff
   1185a:	469a      	mov	sl, r3
   1185c:	e76d      	b.n	1173a <dir_find+0x52>
   1185e:	2704      	movs	r7, #4
   11860:	e7ef      	b.n	11842 <dir_find+0x15a>
   11862:	46c0      	nop			; (mov r8, r8)
   11864:	000112a9 	.word	0x000112a9
   11868:	0001110d 	.word	0x0001110d
   1186c:	00010c6b 	.word	0x00010c6b
   11870:	000115c5 	.word	0x000115c5
   11874:	00012901 	.word	0x00012901
   11878:	00019eb8 	.word	0x00019eb8
   1187c:	0000ffff 	.word	0x0000ffff

00011880 <dir_register>:
   11880:	b5f0      	push	{r4, r5, r6, r7, lr}
   11882:	46de      	mov	lr, fp
   11884:	4657      	mov	r7, sl
   11886:	464e      	mov	r6, r9
   11888:	4645      	mov	r5, r8
   1188a:	b5e0      	push	{r5, r6, r7, lr}
   1188c:	b089      	sub	sp, #36	; 0x24
   1188e:	0004      	movs	r4, r0
   11890:	6987      	ldr	r7, [r0, #24]
   11892:	69c3      	ldr	r3, [r0, #28]
   11894:	469a      	mov	sl, r3
   11896:	ad05      	add	r5, sp, #20
   11898:	220c      	movs	r2, #12
   1189a:	0039      	movs	r1, r7
   1189c:	0028      	movs	r0, r5
   1189e:	4ba7      	ldr	r3, [pc, #668]	; (11b3c <dir_register+0x2bc>)
   118a0:	4798      	blx	r3
   118a2:	7aeb      	ldrb	r3, [r5, #11]
   118a4:	07db      	lsls	r3, r3, #31
   118a6:	d400      	bmi.n	118aa <dir_register+0x2a>
   118a8:	e070      	b.n	1198c <dir_register+0x10c>
   118aa:	2300      	movs	r3, #0
   118ac:	72fb      	strb	r3, [r7, #11]
   118ae:	61e3      	str	r3, [r4, #28]
   118b0:	220b      	movs	r2, #11
   118b2:	a905      	add	r1, sp, #20
   118b4:	0038      	movs	r0, r7
   118b6:	4ba1      	ldr	r3, [pc, #644]	; (11b3c <dir_register+0x2bc>)
   118b8:	4798      	blx	r3
   118ba:	2301      	movs	r3, #1
   118bc:	ad03      	add	r5, sp, #12
   118be:	001e      	movs	r6, r3
   118c0:	46a0      	mov	r8, r4
   118c2:	e049      	b.n	11958 <dir_register+0xd8>
   118c4:	3801      	subs	r0, #1
   118c6:	1829      	adds	r1, r5, r0
   118c8:	704a      	strb	r2, [r1, #1]
   118ca:	091b      	lsrs	r3, r3, #4
   118cc:	b29b      	uxth	r3, r3
   118ce:	2b00      	cmp	r3, #0
   118d0:	d007      	beq.n	118e2 <dir_register+0x62>
   118d2:	0021      	movs	r1, r4
   118d4:	4019      	ands	r1, r3
   118d6:	000a      	movs	r2, r1
   118d8:	3230      	adds	r2, #48	; 0x30
   118da:	2a39      	cmp	r2, #57	; 0x39
   118dc:	d9f2      	bls.n	118c4 <dir_register+0x44>
   118de:	3207      	adds	r2, #7
   118e0:	e7f0      	b.n	118c4 <dir_register+0x44>
   118e2:	337e      	adds	r3, #126	; 0x7e
   118e4:	542b      	strb	r3, [r5, r0]
   118e6:	2800      	cmp	r0, #0
   118e8:	d00a      	beq.n	11900 <dir_register+0x80>
   118ea:	783b      	ldrb	r3, [r7, #0]
   118ec:	2b20      	cmp	r3, #32
   118ee:	d009      	beq.n	11904 <dir_register+0x84>
   118f0:	2300      	movs	r3, #0
   118f2:	3301      	adds	r3, #1
   118f4:	4298      	cmp	r0, r3
   118f6:	d007      	beq.n	11908 <dir_register+0x88>
   118f8:	5cfa      	ldrb	r2, [r7, r3]
   118fa:	2a20      	cmp	r2, #32
   118fc:	d1f9      	bne.n	118f2 <dir_register+0x72>
   118fe:	e009      	b.n	11914 <dir_register+0x94>
   11900:	0003      	movs	r3, r0
   11902:	e007      	b.n	11914 <dir_register+0x94>
   11904:	2300      	movs	r3, #0
   11906:	e005      	b.n	11914 <dir_register+0x94>
   11908:	0003      	movs	r3, r0
   1190a:	e003      	b.n	11914 <dir_register+0x94>
   1190c:	54fa      	strb	r2, [r7, r3]
   1190e:	3301      	adds	r3, #1
   11910:	2b07      	cmp	r3, #7
   11912:	d805      	bhi.n	11920 <dir_register+0xa0>
   11914:	2220      	movs	r2, #32
   11916:	2807      	cmp	r0, #7
   11918:	d8f8      	bhi.n	1190c <dir_register+0x8c>
   1191a:	5c2a      	ldrb	r2, [r5, r0]
   1191c:	3001      	adds	r0, #1
   1191e:	e7f5      	b.n	1190c <dir_register+0x8c>
   11920:	4640      	mov	r0, r8
   11922:	4b87      	ldr	r3, [pc, #540]	; (11b40 <dir_register+0x2c0>)
   11924:	4798      	blx	r3
   11926:	2800      	cmp	r0, #0
   11928:	d11c      	bne.n	11964 <dir_register+0xe4>
   1192a:	3601      	adds	r6, #1
   1192c:	b2b6      	uxth	r6, r6
   1192e:	2e64      	cmp	r6, #100	; 0x64
   11930:	d015      	beq.n	1195e <dir_register+0xde>
   11932:	220b      	movs	r2, #11
   11934:	a905      	add	r1, sp, #20
   11936:	0038      	movs	r0, r7
   11938:	4b80      	ldr	r3, [pc, #512]	; (11b3c <dir_register+0x2bc>)
   1193a:	4798      	blx	r3
   1193c:	0033      	movs	r3, r6
   1193e:	2e05      	cmp	r6, #5
   11940:	d90a      	bls.n	11958 <dir_register+0xd8>
   11942:	4651      	mov	r1, sl
   11944:	085a      	lsrs	r2, r3, #1
   11946:	03db      	lsls	r3, r3, #15
   11948:	4313      	orrs	r3, r2
   1194a:	880a      	ldrh	r2, [r1, #0]
   1194c:	189b      	adds	r3, r3, r2
   1194e:	b29b      	uxth	r3, r3
   11950:	3102      	adds	r1, #2
   11952:	880a      	ldrh	r2, [r1, #0]
   11954:	2a00      	cmp	r2, #0
   11956:	d1f5      	bne.n	11944 <dir_register+0xc4>
   11958:	2007      	movs	r0, #7
   1195a:	240f      	movs	r4, #15
   1195c:	e7b9      	b.n	118d2 <dir_register+0x52>
   1195e:	2307      	movs	r3, #7
   11960:	4698      	mov	r8, r3
   11962:	e006      	b.n	11972 <dir_register+0xf2>
   11964:	4644      	mov	r4, r8
   11966:	4680      	mov	r8, r0
   11968:	2e64      	cmp	r6, #100	; 0x64
   1196a:	d100      	bne.n	1196e <dir_register+0xee>
   1196c:	e0a5      	b.n	11aba <dir_register+0x23a>
   1196e:	2804      	cmp	r0, #4
   11970:	d007      	beq.n	11982 <dir_register+0x102>
   11972:	4640      	mov	r0, r8
   11974:	b009      	add	sp, #36	; 0x24
   11976:	bc3c      	pop	{r2, r3, r4, r5}
   11978:	4690      	mov	r8, r2
   1197a:	4699      	mov	r9, r3
   1197c:	46a2      	mov	sl, r4
   1197e:	46ab      	mov	fp, r5
   11980:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11982:	ab05      	add	r3, sp, #20
   11984:	7adb      	ldrb	r3, [r3, #11]
   11986:	72fb      	strb	r3, [r7, #11]
   11988:	4653      	mov	r3, sl
   1198a:	61e3      	str	r3, [r4, #28]
   1198c:	ab05      	add	r3, sp, #20
   1198e:	7adb      	ldrb	r3, [r3, #11]
   11990:	2201      	movs	r2, #1
   11992:	4693      	mov	fp, r2
   11994:	079b      	lsls	r3, r3, #30
   11996:	d511      	bpl.n	119bc <dir_register+0x13c>
   11998:	4653      	mov	r3, sl
   1199a:	881b      	ldrh	r3, [r3, #0]
   1199c:	2b00      	cmp	r3, #0
   1199e:	d01b      	beq.n	119d8 <dir_register+0x158>
   119a0:	2000      	movs	r0, #0
   119a2:	4652      	mov	r2, sl
   119a4:	3001      	adds	r0, #1
   119a6:	b280      	uxth	r0, r0
   119a8:	0043      	lsls	r3, r0, #1
   119aa:	5a9b      	ldrh	r3, [r3, r2]
   119ac:	2b00      	cmp	r3, #0
   119ae:	d1f9      	bne.n	119a4 <dir_register+0x124>
   119b0:	3019      	adds	r0, #25
   119b2:	210d      	movs	r1, #13
   119b4:	4b63      	ldr	r3, [pc, #396]	; (11b44 <dir_register+0x2c4>)
   119b6:	4798      	blx	r3
   119b8:	b283      	uxth	r3, r0
   119ba:	469b      	mov	fp, r3
   119bc:	2100      	movs	r1, #0
   119be:	0020      	movs	r0, r4
   119c0:	4b61      	ldr	r3, [pc, #388]	; (11b48 <dir_register+0x2c8>)
   119c2:	4798      	blx	r3
   119c4:	4680      	mov	r8, r0
   119c6:	2800      	cmp	r0, #0
   119c8:	d1d3      	bne.n	11972 <dir_register+0xf2>
   119ca:	4682      	mov	sl, r0
   119cc:	2500      	movs	r5, #0
   119ce:	4f5f      	ldr	r7, [pc, #380]	; (11b4c <dir_register+0x2cc>)
   119d0:	2600      	movs	r6, #0
   119d2:	4b5f      	ldr	r3, [pc, #380]	; (11b50 <dir_register+0x2d0>)
   119d4:	4699      	mov	r9, r3
   119d6:	e00b      	b.n	119f0 <dir_register+0x170>
   119d8:	2000      	movs	r0, #0
   119da:	e7e9      	b.n	119b0 <dir_register+0x130>
   119dc:	1c6b      	adds	r3, r5, #1
   119de:	b29b      	uxth	r3, r3
   119e0:	459b      	cmp	fp, r3
   119e2:	d06d      	beq.n	11ac0 <dir_register+0x240>
   119e4:	001d      	movs	r5, r3
   119e6:	2101      	movs	r1, #1
   119e8:	0020      	movs	r0, r4
   119ea:	47c8      	blx	r9
   119ec:	2800      	cmp	r0, #0
   119ee:	d112      	bne.n	11a16 <dir_register+0x196>
   119f0:	6921      	ldr	r1, [r4, #16]
   119f2:	6820      	ldr	r0, [r4, #0]
   119f4:	47b8      	blx	r7
   119f6:	2800      	cmp	r0, #0
   119f8:	d000      	beq.n	119fc <dir_register+0x17c>
   119fa:	e098      	b.n	11b2e <dir_register+0x2ae>
   119fc:	6963      	ldr	r3, [r4, #20]
   119fe:	781b      	ldrb	r3, [r3, #0]
   11a00:	2be5      	cmp	r3, #229	; 0xe5
   11a02:	d001      	beq.n	11a08 <dir_register+0x188>
   11a04:	2b00      	cmp	r3, #0
   11a06:	d104      	bne.n	11a12 <dir_register+0x192>
   11a08:	2d00      	cmp	r5, #0
   11a0a:	d1e7      	bne.n	119dc <dir_register+0x15c>
   11a0c:	88e3      	ldrh	r3, [r4, #6]
   11a0e:	469a      	mov	sl, r3
   11a10:	e7e4      	b.n	119dc <dir_register+0x15c>
   11a12:	0035      	movs	r5, r6
   11a14:	e7e7      	b.n	119e6 <dir_register+0x166>
   11a16:	4680      	mov	r8, r0
   11a18:	e7ab      	b.n	11972 <dir_register+0xf2>
   11a1a:	4651      	mov	r1, sl
   11a1c:	0020      	movs	r0, r4
   11a1e:	4b4a      	ldr	r3, [pc, #296]	; (11b48 <dir_register+0x2c8>)
   11a20:	4798      	blx	r3
   11a22:	4680      	mov	r8, r0
   11a24:	2800      	cmp	r0, #0
   11a26:	d1a4      	bne.n	11972 <dir_register+0xf2>
   11a28:	69a0      	ldr	r0, [r4, #24]
   11a2a:	4b4a      	ldr	r3, [pc, #296]	; (11b54 <dir_register+0x2d4>)
   11a2c:	4798      	blx	r3
   11a2e:	9001      	str	r0, [sp, #4]
   11a30:	46a8      	mov	r8, r5
   11a32:	e01f      	b.n	11a74 <dir_register+0x1f4>
   11a34:	0022      	movs	r2, r4
   11a36:	e067      	b.n	11b08 <dir_register+0x288>
   11a38:	465e      	mov	r6, fp
   11a3a:	4664      	mov	r4, ip
   11a3c:	4946      	ldr	r1, [pc, #280]	; (11b58 <dir_register+0x2d8>)
   11a3e:	428b      	cmp	r3, r1
   11a40:	d003      	beq.n	11a4a <dir_register+0x1ca>
   11a42:	0052      	lsls	r2, r2, #1
   11a44:	5b93      	ldrh	r3, [r2, r6]
   11a46:	2b00      	cmp	r3, #0
   11a48:	d103      	bne.n	11a52 <dir_register+0x1d2>
   11a4a:	2340      	movs	r3, #64	; 0x40
   11a4c:	464a      	mov	r2, r9
   11a4e:	431a      	orrs	r2, r3
   11a50:	4691      	mov	r9, r2
   11a52:	464b      	mov	r3, r9
   11a54:	7003      	strb	r3, [r0, #0]
   11a56:	2301      	movs	r3, #1
   11a58:	6822      	ldr	r2, [r4, #0]
   11a5a:	7113      	strb	r3, [r2, #4]
   11a5c:	2100      	movs	r1, #0
   11a5e:	0020      	movs	r0, r4
   11a60:	4b3b      	ldr	r3, [pc, #236]	; (11b50 <dir_register+0x2d0>)
   11a62:	4798      	blx	r3
   11a64:	2800      	cmp	r0, #0
   11a66:	d166      	bne.n	11b36 <dir_register+0x2b6>
   11a68:	4645      	mov	r5, r8
   11a6a:	3d01      	subs	r5, #1
   11a6c:	b2ab      	uxth	r3, r5
   11a6e:	4698      	mov	r8, r3
   11a70:	2b00      	cmp	r3, #0
   11a72:	d027      	beq.n	11ac4 <dir_register+0x244>
   11a74:	6921      	ldr	r1, [r4, #16]
   11a76:	6820      	ldr	r0, [r4, #0]
   11a78:	4b34      	ldr	r3, [pc, #208]	; (11b4c <dir_register+0x2cc>)
   11a7a:	4798      	blx	r3
   11a7c:	2800      	cmp	r0, #0
   11a7e:	d158      	bne.n	11b32 <dir_register+0x2b2>
   11a80:	69e6      	ldr	r6, [r4, #28]
   11a82:	6960      	ldr	r0, [r4, #20]
   11a84:	4643      	mov	r3, r8
   11a86:	466a      	mov	r2, sp
   11a88:	70d3      	strb	r3, [r2, #3]
   11a8a:	78d3      	ldrb	r3, [r2, #3]
   11a8c:	4699      	mov	r9, r3
   11a8e:	7913      	ldrb	r3, [r2, #4]
   11a90:	7343      	strb	r3, [r0, #13]
   11a92:	230f      	movs	r3, #15
   11a94:	72c3      	strb	r3, [r0, #11]
   11a96:	2300      	movs	r3, #0
   11a98:	7303      	strb	r3, [r0, #12]
   11a9a:	7683      	strb	r3, [r0, #26]
   11a9c:	76c3      	strb	r3, [r0, #27]
   11a9e:	464b      	mov	r3, r9
   11aa0:	3b01      	subs	r3, #1
   11aa2:	005a      	lsls	r2, r3, #1
   11aa4:	18d2      	adds	r2, r2, r3
   11aa6:	0092      	lsls	r2, r2, #2
   11aa8:	18d2      	adds	r2, r2, r3
   11aaa:	492c      	ldr	r1, [pc, #176]	; (11b5c <dir_register+0x2dc>)
   11aac:	000d      	movs	r5, r1
   11aae:	350d      	adds	r5, #13
   11ab0:	2300      	movs	r3, #0
   11ab2:	4f29      	ldr	r7, [pc, #164]	; (11b58 <dir_register+0x2d8>)
   11ab4:	46b3      	mov	fp, r6
   11ab6:	46a4      	mov	ip, r4
   11ab8:	e029      	b.n	11b0e <dir_register+0x28e>
   11aba:	2307      	movs	r3, #7
   11abc:	4698      	mov	r8, r3
   11abe:	e758      	b.n	11972 <dir_register+0xf2>
   11ac0:	2b01      	cmp	r3, #1
   11ac2:	d8aa      	bhi.n	11a1a <dir_register+0x19a>
   11ac4:	6921      	ldr	r1, [r4, #16]
   11ac6:	6820      	ldr	r0, [r4, #0]
   11ac8:	4b20      	ldr	r3, [pc, #128]	; (11b4c <dir_register+0x2cc>)
   11aca:	4798      	blx	r3
   11acc:	4680      	mov	r8, r0
   11ace:	2800      	cmp	r0, #0
   11ad0:	d000      	beq.n	11ad4 <dir_register+0x254>
   11ad2:	e74e      	b.n	11972 <dir_register+0xf2>
   11ad4:	6965      	ldr	r5, [r4, #20]
   11ad6:	2220      	movs	r2, #32
   11ad8:	2100      	movs	r1, #0
   11ada:	0028      	movs	r0, r5
   11adc:	4b20      	ldr	r3, [pc, #128]	; (11b60 <dir_register+0x2e0>)
   11ade:	4798      	blx	r3
   11ae0:	220b      	movs	r2, #11
   11ae2:	69a1      	ldr	r1, [r4, #24]
   11ae4:	0028      	movs	r0, r5
   11ae6:	4b15      	ldr	r3, [pc, #84]	; (11b3c <dir_register+0x2bc>)
   11ae8:	4798      	blx	r3
   11aea:	69a3      	ldr	r3, [r4, #24]
   11aec:	7ada      	ldrb	r2, [r3, #11]
   11aee:	2318      	movs	r3, #24
   11af0:	4013      	ands	r3, r2
   11af2:	732b      	strb	r3, [r5, #12]
   11af4:	6823      	ldr	r3, [r4, #0]
   11af6:	2201      	movs	r2, #1
   11af8:	711a      	strb	r2, [r3, #4]
   11afa:	e73a      	b.n	11972 <dir_register+0xf2>
   11afc:	780c      	ldrb	r4, [r1, #0]
   11afe:	26ff      	movs	r6, #255	; 0xff
   11b00:	5506      	strb	r6, [r0, r4]
   11b02:	1904      	adds	r4, r0, r4
   11b04:	26ff      	movs	r6, #255	; 0xff
   11b06:	7066      	strb	r6, [r4, #1]
   11b08:	3101      	adds	r1, #1
   11b0a:	42a9      	cmp	r1, r5
   11b0c:	d094      	beq.n	11a38 <dir_register+0x1b8>
   11b0e:	42bb      	cmp	r3, r7
   11b10:	d0f4      	beq.n	11afc <dir_register+0x27c>
   11b12:	1c54      	adds	r4, r2, #1
   11b14:	0052      	lsls	r2, r2, #1
   11b16:	465b      	mov	r3, fp
   11b18:	5ad3      	ldrh	r3, [r2, r3]
   11b1a:	780a      	ldrb	r2, [r1, #0]
   11b1c:	5483      	strb	r3, [r0, r2]
   11b1e:	1882      	adds	r2, r0, r2
   11b20:	0a1e      	lsrs	r6, r3, #8
   11b22:	7056      	strb	r6, [r2, #1]
   11b24:	2b00      	cmp	r3, #0
   11b26:	d185      	bne.n	11a34 <dir_register+0x1b4>
   11b28:	0022      	movs	r2, r4
   11b2a:	003b      	movs	r3, r7
   11b2c:	e7ec      	b.n	11b08 <dir_register+0x288>
   11b2e:	4680      	mov	r8, r0
   11b30:	e71f      	b.n	11972 <dir_register+0xf2>
   11b32:	4680      	mov	r8, r0
   11b34:	e71d      	b.n	11972 <dir_register+0xf2>
   11b36:	4680      	mov	r8, r0
   11b38:	e71b      	b.n	11972 <dir_register+0xf2>
   11b3a:	46c0      	nop			; (mov r8, r8)
   11b3c:	00010c2d 	.word	0x00010c2d
   11b40:	000116e9 	.word	0x000116e9
   11b44:	000167a5 	.word	0x000167a5
   11b48:	000112a9 	.word	0x000112a9
   11b4c:	0001110d 	.word	0x0001110d
   11b50:	000115c5 	.word	0x000115c5
   11b54:	00010c6b 	.word	0x00010c6b
   11b58:	0000ffff 	.word	0x0000ffff
   11b5c:	00019eb8 	.word	0x00019eb8
   11b60:	00010c41 	.word	0x00010c41

00011b64 <dir_read>:
   11b64:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b66:	46de      	mov	lr, fp
   11b68:	4657      	mov	r7, sl
   11b6a:	464e      	mov	r6, r9
   11b6c:	4645      	mov	r5, r8
   11b6e:	b5e0      	push	{r5, r6, r7, lr}
   11b70:	b083      	sub	sp, #12
   11b72:	0005      	movs	r5, r0
   11b74:	23ff      	movs	r3, #255	; 0xff
   11b76:	4699      	mov	r9, r3
   11b78:	26ff      	movs	r6, #255	; 0xff
   11b7a:	2404      	movs	r4, #4
   11b7c:	4f44      	ldr	r7, [pc, #272]	; (11c90 <dir_read+0x12c>)
   11b7e:	4b45      	ldr	r3, [pc, #276]	; (11c94 <dir_read+0x130>)
   11b80:	4698      	mov	r8, r3
   11b82:	e05b      	b.n	11c3c <dir_read+0xd8>
   11b84:	2a0f      	cmp	r2, #15
   11b86:	d147      	bne.n	11c18 <dir_read+0xb4>
   11b88:	065a      	lsls	r2, r3, #25
   11b8a:	d51a      	bpl.n	11bc2 <dir_read+0x5e>
   11b8c:	7b42      	ldrb	r2, [r0, #13]
   11b8e:	4691      	mov	r9, r2
   11b90:	2240      	movs	r2, #64	; 0x40
   11b92:	4393      	bics	r3, r2
   11b94:	88ea      	ldrh	r2, [r5, #6]
   11b96:	842a      	strh	r2, [r5, #32]
   11b98:	7b42      	ldrb	r2, [r0, #13]
   11b9a:	4694      	mov	ip, r2
   11b9c:	26ff      	movs	r6, #255	; 0xff
   11b9e:	454a      	cmp	r2, r9
   11ba0:	d147      	bne.n	11c32 <dir_read+0xce>
   11ba2:	69ea      	ldr	r2, [r5, #28]
   11ba4:	4691      	mov	r9, r2
   11ba6:	7802      	ldrb	r2, [r0, #0]
   11ba8:	243f      	movs	r4, #63	; 0x3f
   11baa:	4022      	ands	r2, r4
   11bac:	3a01      	subs	r2, #1
   11bae:	0054      	lsls	r4, r2, #1
   11bb0:	18a4      	adds	r4, r4, r2
   11bb2:	00a4      	lsls	r4, r4, #2
   11bb4:	18a2      	adds	r2, r4, r2
   11bb6:	9201      	str	r2, [sp, #4]
   11bb8:	3efe      	subs	r6, #254	; 0xfe
   11bba:	2100      	movs	r1, #0
   11bbc:	4a36      	ldr	r2, [pc, #216]	; (11c98 <dir_read+0x134>)
   11bbe:	4692      	mov	sl, r2
   11bc0:	e008      	b.n	11bd4 <dir_read+0x70>
   11bc2:	429e      	cmp	r6, r3
   11bc4:	d0e8      	beq.n	11b98 <dir_read+0x34>
   11bc6:	26ff      	movs	r6, #255	; 0xff
   11bc8:	e033      	b.n	11c32 <dir_read+0xce>
   11bca:	4552      	cmp	r2, sl
   11bcc:	d151      	bne.n	11c72 <dir_read+0x10e>
   11bce:	3101      	adds	r1, #1
   11bd0:	290d      	cmp	r1, #13
   11bd2:	d013      	beq.n	11bfc <dir_read+0x98>
   11bd4:	4a31      	ldr	r2, [pc, #196]	; (11c9c <dir_read+0x138>)
   11bd6:	5c8a      	ldrb	r2, [r1, r2]
   11bd8:	1884      	adds	r4, r0, r2
   11bda:	7864      	ldrb	r4, [r4, #1]
   11bdc:	0224      	lsls	r4, r4, #8
   11bde:	5c82      	ldrb	r2, [r0, r2]
   11be0:	4322      	orrs	r2, r4
   11be2:	2e00      	cmp	r6, #0
   11be4:	d0f1      	beq.n	11bca <dir_read+0x66>
   11be6:	9c01      	ldr	r4, [sp, #4]
   11be8:	2cfe      	cmp	r4, #254	; 0xfe
   11bea:	d842      	bhi.n	11c72 <dir_read+0x10e>
   11bec:	0066      	lsls	r6, r4, #1
   11bee:	464c      	mov	r4, r9
   11bf0:	5332      	strh	r2, [r6, r4]
   11bf2:	0016      	movs	r6, r2
   11bf4:	9c01      	ldr	r4, [sp, #4]
   11bf6:	3401      	adds	r4, #1
   11bf8:	9401      	str	r4, [sp, #4]
   11bfa:	e7e8      	b.n	11bce <dir_read+0x6a>
   11bfc:	7802      	ldrb	r2, [r0, #0]
   11bfe:	0652      	lsls	r2, r2, #25
   11c00:	d506      	bpl.n	11c10 <dir_read+0xac>
   11c02:	9a01      	ldr	r2, [sp, #4]
   11c04:	2afe      	cmp	r2, #254	; 0xfe
   11c06:	d834      	bhi.n	11c72 <dir_read+0x10e>
   11c08:	0054      	lsls	r4, r2, #1
   11c0a:	2200      	movs	r2, #0
   11c0c:	4649      	mov	r1, r9
   11c0e:	5262      	strh	r2, [r4, r1]
   11c10:	3b01      	subs	r3, #1
   11c12:	b2de      	uxtb	r6, r3
   11c14:	46e1      	mov	r9, ip
   11c16:	e00c      	b.n	11c32 <dir_read+0xce>
   11c18:	2e00      	cmp	r6, #0
   11c1a:	d103      	bne.n	11c24 <dir_read+0xc0>
   11c1c:	4b20      	ldr	r3, [pc, #128]	; (11ca0 <dir_read+0x13c>)
   11c1e:	4798      	blx	r3
   11c20:	4581      	cmp	r9, r0
   11c22:	d02c      	beq.n	11c7e <dir_read+0x11a>
   11c24:	2301      	movs	r3, #1
   11c26:	425b      	negs	r3, r3
   11c28:	842b      	strh	r3, [r5, #32]
   11c2a:	e028      	b.n	11c7e <dir_read+0x11a>
   11c2c:	26ff      	movs	r6, #255	; 0xff
   11c2e:	e000      	b.n	11c32 <dir_read+0xce>
   11c30:	26ff      	movs	r6, #255	; 0xff
   11c32:	2100      	movs	r1, #0
   11c34:	0028      	movs	r0, r5
   11c36:	47c0      	blx	r8
   11c38:	1e04      	subs	r4, r0, #0
   11c3a:	d11e      	bne.n	11c7a <dir_read+0x116>
   11c3c:	6929      	ldr	r1, [r5, #16]
   11c3e:	2900      	cmp	r1, #0
   11c40:	d014      	beq.n	11c6c <dir_read+0x108>
   11c42:	6828      	ldr	r0, [r5, #0]
   11c44:	47b8      	blx	r7
   11c46:	1e04      	subs	r4, r0, #0
   11c48:	d117      	bne.n	11c7a <dir_read+0x116>
   11c4a:	6968      	ldr	r0, [r5, #20]
   11c4c:	7803      	ldrb	r3, [r0, #0]
   11c4e:	2b00      	cmp	r3, #0
   11c50:	d012      	beq.n	11c78 <dir_read+0x114>
   11c52:	2be5      	cmp	r3, #229	; 0xe5
   11c54:	d0ea      	beq.n	11c2c <dir_read+0xc8>
   11c56:	2b2e      	cmp	r3, #46	; 0x2e
   11c58:	d0ea      	beq.n	11c30 <dir_read+0xcc>
   11c5a:	7ac1      	ldrb	r1, [r0, #11]
   11c5c:	223f      	movs	r2, #63	; 0x3f
   11c5e:	400a      	ands	r2, r1
   11c60:	0709      	lsls	r1, r1, #28
   11c62:	d58f      	bpl.n	11b84 <dir_read+0x20>
   11c64:	2a0f      	cmp	r2, #15
   11c66:	d08f      	beq.n	11b88 <dir_read+0x24>
   11c68:	26ff      	movs	r6, #255	; 0xff
   11c6a:	e7e2      	b.n	11c32 <dir_read+0xce>
   11c6c:	2c00      	cmp	r4, #0
   11c6e:	d006      	beq.n	11c7e <dir_read+0x11a>
   11c70:	e003      	b.n	11c7a <dir_read+0x116>
   11c72:	46e1      	mov	r9, ip
   11c74:	26ff      	movs	r6, #255	; 0xff
   11c76:	e7dc      	b.n	11c32 <dir_read+0xce>
   11c78:	2404      	movs	r4, #4
   11c7a:	2300      	movs	r3, #0
   11c7c:	612b      	str	r3, [r5, #16]
   11c7e:	0020      	movs	r0, r4
   11c80:	b003      	add	sp, #12
   11c82:	bc3c      	pop	{r2, r3, r4, r5}
   11c84:	4690      	mov	r8, r2
   11c86:	4699      	mov	r9, r3
   11c88:	46a2      	mov	sl, r4
   11c8a:	46ab      	mov	fp, r5
   11c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11c8e:	46c0      	nop			; (mov r8, r8)
   11c90:	0001110d 	.word	0x0001110d
   11c94:	000115c5 	.word	0x000115c5
   11c98:	0000ffff 	.word	0x0000ffff
   11c9c:	00019eb8 	.word	0x00019eb8
   11ca0:	00010c6b 	.word	0x00010c6b

00011ca4 <dir_remove>:
   11ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11ca6:	46c6      	mov	lr, r8
   11ca8:	b500      	push	{lr}
   11caa:	0004      	movs	r4, r0
   11cac:	88c5      	ldrh	r5, [r0, #6]
   11cae:	8c01      	ldrh	r1, [r0, #32]
   11cb0:	4b12      	ldr	r3, [pc, #72]	; (11cfc <dir_remove+0x58>)
   11cb2:	4299      	cmp	r1, r3
   11cb4:	d020      	beq.n	11cf8 <dir_remove+0x54>
   11cb6:	0020      	movs	r0, r4
   11cb8:	4b11      	ldr	r3, [pc, #68]	; (11d00 <dir_remove+0x5c>)
   11cba:	4798      	blx	r3
   11cbc:	2800      	cmp	r0, #0
   11cbe:	d118      	bne.n	11cf2 <dir_remove+0x4e>
   11cc0:	4e10      	ldr	r6, [pc, #64]	; (11d04 <dir_remove+0x60>)
   11cc2:	27e5      	movs	r7, #229	; 0xe5
   11cc4:	4b10      	ldr	r3, [pc, #64]	; (11d08 <dir_remove+0x64>)
   11cc6:	4698      	mov	r8, r3
   11cc8:	6921      	ldr	r1, [r4, #16]
   11cca:	6820      	ldr	r0, [r4, #0]
   11ccc:	47b0      	blx	r6
   11cce:	2800      	cmp	r0, #0
   11cd0:	d10c      	bne.n	11cec <dir_remove+0x48>
   11cd2:	6963      	ldr	r3, [r4, #20]
   11cd4:	701f      	strb	r7, [r3, #0]
   11cd6:	2301      	movs	r3, #1
   11cd8:	6822      	ldr	r2, [r4, #0]
   11cda:	7113      	strb	r3, [r2, #4]
   11cdc:	88e3      	ldrh	r3, [r4, #6]
   11cde:	42ab      	cmp	r3, r5
   11ce0:	d207      	bcs.n	11cf2 <dir_remove+0x4e>
   11ce2:	2100      	movs	r1, #0
   11ce4:	0020      	movs	r0, r4
   11ce6:	47c0      	blx	r8
   11ce8:	2800      	cmp	r0, #0
   11cea:	d0ed      	beq.n	11cc8 <dir_remove+0x24>
   11cec:	2804      	cmp	r0, #4
   11cee:	d100      	bne.n	11cf2 <dir_remove+0x4e>
   11cf0:	3802      	subs	r0, #2
   11cf2:	bc04      	pop	{r2}
   11cf4:	4690      	mov	r8, r2
   11cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11cf8:	0029      	movs	r1, r5
   11cfa:	e7dc      	b.n	11cb6 <dir_remove+0x12>
   11cfc:	0000ffff 	.word	0x0000ffff
   11d00:	000112a9 	.word	0x000112a9
   11d04:	0001110d 	.word	0x0001110d
   11d08:	000115c5 	.word	0x000115c5

00011d0c <sync>:
   11d0c:	b570      	push	{r4, r5, r6, lr}
   11d0e:	0004      	movs	r4, r0
   11d10:	2100      	movs	r1, #0
   11d12:	4b2c      	ldr	r3, [pc, #176]	; (11dc4 <sync+0xb8>)
   11d14:	4798      	blx	r3
   11d16:	2800      	cmp	r0, #0
   11d18:	d10a      	bne.n	11d30 <sync+0x24>
   11d1a:	7823      	ldrb	r3, [r4, #0]
   11d1c:	2b03      	cmp	r3, #3
   11d1e:	d008      	beq.n	11d32 <sync+0x26>
   11d20:	7860      	ldrb	r0, [r4, #1]
   11d22:	2200      	movs	r2, #0
   11d24:	2100      	movs	r1, #0
   11d26:	4b28      	ldr	r3, [pc, #160]	; (11dc8 <sync+0xbc>)
   11d28:	4798      	blx	r3
   11d2a:	1e43      	subs	r3, r0, #1
   11d2c:	4198      	sbcs	r0, r3
   11d2e:	b2c0      	uxtb	r0, r0
   11d30:	bd70      	pop	{r4, r5, r6, pc}
   11d32:	7963      	ldrb	r3, [r4, #5]
   11d34:	2b00      	cmp	r3, #0
   11d36:	d0f3      	beq.n	11d20 <sync+0x14>
   11d38:	2600      	movs	r6, #0
   11d3a:	62e6      	str	r6, [r4, #44]	; 0x2c
   11d3c:	0025      	movs	r5, r4
   11d3e:	3530      	adds	r5, #48	; 0x30
   11d40:	2280      	movs	r2, #128	; 0x80
   11d42:	0092      	lsls	r2, r2, #2
   11d44:	2100      	movs	r1, #0
   11d46:	0028      	movs	r0, r5
   11d48:	4b20      	ldr	r3, [pc, #128]	; (11dcc <sync+0xc0>)
   11d4a:	4798      	blx	r3
   11d4c:	2255      	movs	r2, #85	; 0x55
   11d4e:	4b20      	ldr	r3, [pc, #128]	; (11dd0 <sync+0xc4>)
   11d50:	54e2      	strb	r2, [r4, r3]
   11d52:	3255      	adds	r2, #85	; 0x55
   11d54:	4b1f      	ldr	r3, [pc, #124]	; (11dd4 <sync+0xc8>)
   11d56:	54e2      	strb	r2, [r4, r3]
   11d58:	3bde      	subs	r3, #222	; 0xde
   11d5a:	3bff      	subs	r3, #255	; 0xff
   11d5c:	3a7a      	subs	r2, #122	; 0x7a
   11d5e:	54a3      	strb	r3, [r4, r2]
   11d60:	3201      	adds	r2, #1
   11d62:	54a3      	strb	r3, [r4, r2]
   11d64:	330f      	adds	r3, #15
   11d66:	3201      	adds	r2, #1
   11d68:	54a3      	strb	r3, [r4, r2]
   11d6a:	320f      	adds	r2, #15
   11d6c:	2133      	movs	r1, #51	; 0x33
   11d6e:	5462      	strb	r2, [r4, r1]
   11d70:	313f      	adds	r1, #63	; 0x3f
   11d72:	2085      	movs	r0, #133	; 0x85
   11d74:	0080      	lsls	r0, r0, #2
   11d76:	5421      	strb	r1, [r4, r0]
   11d78:	4817      	ldr	r0, [pc, #92]	; (11dd8 <sync+0xcc>)
   11d7a:	5421      	strb	r1, [r4, r0]
   11d7c:	4917      	ldr	r1, [pc, #92]	; (11ddc <sync+0xd0>)
   11d7e:	5462      	strb	r2, [r4, r1]
   11d80:	4a17      	ldr	r2, [pc, #92]	; (11de0 <sync+0xd4>)
   11d82:	54a3      	strb	r3, [r4, r2]
   11d84:	6923      	ldr	r3, [r4, #16]
   11d86:	3201      	adds	r2, #1
   11d88:	54a3      	strb	r3, [r4, r2]
   11d8a:	0a19      	lsrs	r1, r3, #8
   11d8c:	4a15      	ldr	r2, [pc, #84]	; (11de4 <sync+0xd8>)
   11d8e:	54a1      	strb	r1, [r4, r2]
   11d90:	0c19      	lsrs	r1, r3, #16
   11d92:	4a15      	ldr	r2, [pc, #84]	; (11de8 <sync+0xdc>)
   11d94:	54a1      	strb	r1, [r4, r2]
   11d96:	0e1b      	lsrs	r3, r3, #24
   11d98:	4a14      	ldr	r2, [pc, #80]	; (11dec <sync+0xe0>)
   11d9a:	54a3      	strb	r3, [r4, r2]
   11d9c:	68e3      	ldr	r3, [r4, #12]
   11d9e:	3201      	adds	r2, #1
   11da0:	54a3      	strb	r3, [r4, r2]
   11da2:	0a19      	lsrs	r1, r3, #8
   11da4:	4a12      	ldr	r2, [pc, #72]	; (11df0 <sync+0xe4>)
   11da6:	54a1      	strb	r1, [r4, r2]
   11da8:	0c19      	lsrs	r1, r3, #16
   11daa:	4a12      	ldr	r2, [pc, #72]	; (11df4 <sync+0xe8>)
   11dac:	54a1      	strb	r1, [r4, r2]
   11dae:	0e1b      	lsrs	r3, r3, #24
   11db0:	4a11      	ldr	r2, [pc, #68]	; (11df8 <sync+0xec>)
   11db2:	54a3      	strb	r3, [r4, r2]
   11db4:	7860      	ldrb	r0, [r4, #1]
   11db6:	2301      	movs	r3, #1
   11db8:	6962      	ldr	r2, [r4, #20]
   11dba:	0029      	movs	r1, r5
   11dbc:	4d0f      	ldr	r5, [pc, #60]	; (11dfc <sync+0xf0>)
   11dbe:	47a8      	blx	r5
   11dc0:	7166      	strb	r6, [r4, #5]
   11dc2:	e7ad      	b.n	11d20 <sync+0x14>
   11dc4:	0001110d 	.word	0x0001110d
   11dc8:	00010b71 	.word	0x00010b71
   11dcc:	00010c41 	.word	0x00010c41
   11dd0:	0000022e 	.word	0x0000022e
   11dd4:	0000022f 	.word	0x0000022f
   11dd8:	00000215 	.word	0x00000215
   11ddc:	00000216 	.word	0x00000216
   11de0:	00000217 	.word	0x00000217
   11de4:	00000219 	.word	0x00000219
   11de8:	0000021a 	.word	0x0000021a
   11dec:	0000021b 	.word	0x0000021b
   11df0:	0000021d 	.word	0x0000021d
   11df4:	0000021e 	.word	0x0000021e
   11df8:	0000021f 	.word	0x0000021f
   11dfc:	00010aed 	.word	0x00010aed

00011e00 <follow_path>:
   11e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e02:	46de      	mov	lr, fp
   11e04:	4657      	mov	r7, sl
   11e06:	464e      	mov	r6, r9
   11e08:	4645      	mov	r5, r8
   11e0a:	b5e0      	push	{r5, r6, r7, lr}
   11e0c:	b083      	sub	sp, #12
   11e0e:	4682      	mov	sl, r0
   11e10:	000d      	movs	r5, r1
   11e12:	780b      	ldrb	r3, [r1, #0]
   11e14:	2b2f      	cmp	r3, #47	; 0x2f
   11e16:	d00f      	beq.n	11e38 <follow_path+0x38>
   11e18:	2b5c      	cmp	r3, #92	; 0x5c
   11e1a:	d00d      	beq.n	11e38 <follow_path+0x38>
   11e1c:	2300      	movs	r3, #0
   11e1e:	4652      	mov	r2, sl
   11e20:	6093      	str	r3, [r2, #8]
   11e22:	782b      	ldrb	r3, [r5, #0]
   11e24:	4657      	mov	r7, sl
   11e26:	2b1f      	cmp	r3, #31
   11e28:	d809      	bhi.n	11e3e <follow_path+0x3e>
   11e2a:	2100      	movs	r1, #0
   11e2c:	4650      	mov	r0, sl
   11e2e:	4bb2      	ldr	r3, [pc, #712]	; (120f8 <follow_path+0x2f8>)
   11e30:	4798      	blx	r3
   11e32:	2300      	movs	r3, #0
   11e34:	617b      	str	r3, [r7, #20]
   11e36:	e13a      	b.n	120ae <follow_path+0x2ae>
   11e38:	3501      	adds	r5, #1
   11e3a:	e7ef      	b.n	11e1c <follow_path+0x1c>
   11e3c:	3501      	adds	r5, #1
   11e3e:	7828      	ldrb	r0, [r5, #0]
   11e40:	282f      	cmp	r0, #47	; 0x2f
   11e42:	d0fb      	beq.n	11e3c <follow_path+0x3c>
   11e44:	285c      	cmp	r0, #92	; 0x5c
   11e46:	d0f9      	beq.n	11e3c <follow_path+0x3c>
   11e48:	69fb      	ldr	r3, [r7, #28]
   11e4a:	469a      	mov	sl, r3
   11e4c:	b280      	uxth	r0, r0
   11e4e:	281f      	cmp	r0, #31
   11e50:	d800      	bhi.n	11e54 <follow_path+0x54>
   11e52:	e13b      	b.n	120cc <follow_path+0x2cc>
   11e54:	282f      	cmp	r0, #47	; 0x2f
   11e56:	d100      	bne.n	11e5a <follow_path+0x5a>
   11e58:	e13b      	b.n	120d2 <follow_path+0x2d2>
   11e5a:	285c      	cmp	r0, #92	; 0x5c
   11e5c:	d100      	bne.n	11e60 <follow_path+0x60>
   11e5e:	e13b      	b.n	120d8 <follow_path+0x2d8>
   11e60:	1c6e      	adds	r6, r5, #1
   11e62:	2401      	movs	r4, #1
   11e64:	2380      	movs	r3, #128	; 0x80
   11e66:	005b      	lsls	r3, r3, #1
   11e68:	4698      	mov	r8, r3
   11e6a:	46bb      	mov	fp, r7
   11e6c:	002b      	movs	r3, r5
   11e6e:	0025      	movs	r5, r4
   11e70:	0034      	movs	r4, r6
   11e72:	4656      	mov	r6, sl
   11e74:	4699      	mov	r9, r3
   11e76:	e011      	b.n	11e9c <follow_path+0x9c>
   11e78:	2b00      	cmp	r3, #0
   11e7a:	d135      	bne.n	11ee8 <follow_path+0xe8>
   11e7c:	8030      	strh	r0, [r6, #0]
   11e7e:	1c6b      	adds	r3, r5, #1
   11e80:	7820      	ldrb	r0, [r4, #0]
   11e82:	281f      	cmp	r0, #31
   11e84:	d91e      	bls.n	11ec4 <follow_path+0xc4>
   11e86:	282f      	cmp	r0, #47	; 0x2f
   11e88:	d100      	bne.n	11e8c <follow_path+0x8c>
   11e8a:	e128      	b.n	120de <follow_path+0x2de>
   11e8c:	285c      	cmp	r0, #92	; 0x5c
   11e8e:	d100      	bne.n	11e92 <follow_path+0x92>
   11e90:	e142      	b.n	12118 <follow_path+0x318>
   11e92:	3602      	adds	r6, #2
   11e94:	3401      	adds	r4, #1
   11e96:	4543      	cmp	r3, r8
   11e98:	d026      	beq.n	11ee8 <follow_path+0xe8>
   11e9a:	001d      	movs	r5, r3
   11e9c:	2101      	movs	r1, #1
   11e9e:	4b97      	ldr	r3, [pc, #604]	; (120fc <follow_path+0x2fc>)
   11ea0:	4798      	blx	r3
   11ea2:	1e01      	subs	r1, r0, #0
   11ea4:	d020      	beq.n	11ee8 <follow_path+0xe8>
   11ea6:	287f      	cmp	r0, #127	; 0x7f
   11ea8:	d8e8      	bhi.n	11e7c <follow_path+0x7c>
   11eaa:	2822      	cmp	r0, #34	; 0x22
   11eac:	d100      	bne.n	11eb0 <follow_path+0xb0>
   11eae:	e0fd      	b.n	120ac <follow_path+0x2ac>
   11eb0:	232a      	movs	r3, #42	; 0x2a
   11eb2:	4a93      	ldr	r2, [pc, #588]	; (12100 <follow_path+0x300>)
   11eb4:	b29f      	uxth	r7, r3
   11eb6:	428f      	cmp	r7, r1
   11eb8:	d0de      	beq.n	11e78 <follow_path+0x78>
   11eba:	3201      	adds	r2, #1
   11ebc:	7813      	ldrb	r3, [r2, #0]
   11ebe:	2b00      	cmp	r3, #0
   11ec0:	d1f8      	bne.n	11eb4 <follow_path+0xb4>
   11ec2:	e7db      	b.n	11e7c <follow_path+0x7c>
   11ec4:	002c      	movs	r4, r5
   11ec6:	465f      	mov	r7, fp
   11ec8:	464d      	mov	r5, r9
   11eca:	18ed      	adds	r5, r5, r3
   11ecc:	2604      	movs	r6, #4
   11ece:	e10b      	b.n	120e8 <follow_path+0x2e8>
   11ed0:	3c01      	subs	r4, #1
   11ed2:	3b02      	subs	r3, #2
   11ed4:	2c00      	cmp	r4, #0
   11ed6:	d100      	bne.n	11eda <follow_path+0xda>
   11ed8:	e0e8      	b.n	120ac <follow_path+0x2ac>
   11eda:	881a      	ldrh	r2, [r3, #0]
   11edc:	2a20      	cmp	r2, #32
   11ede:	d0f7      	beq.n	11ed0 <follow_path+0xd0>
   11ee0:	2a2e      	cmp	r2, #46	; 0x2e
   11ee2:	d0f5      	beq.n	11ed0 <follow_path+0xd0>
   11ee4:	2c00      	cmp	r4, #0
   11ee6:	d101      	bne.n	11eec <follow_path+0xec>
   11ee8:	2006      	movs	r0, #6
   11eea:	e0e0      	b.n	120ae <follow_path+0x2ae>
   11eec:	0063      	lsls	r3, r4, #1
   11eee:	4698      	mov	r8, r3
   11ef0:	2300      	movs	r3, #0
   11ef2:	4652      	mov	r2, sl
   11ef4:	4641      	mov	r1, r8
   11ef6:	5253      	strh	r3, [r2, r1]
   11ef8:	220b      	movs	r2, #11
   11efa:	2120      	movs	r1, #32
   11efc:	69b8      	ldr	r0, [r7, #24]
   11efe:	4b81      	ldr	r3, [pc, #516]	; (12104 <follow_path+0x304>)
   11f00:	4798      	blx	r3
   11f02:	4652      	mov	r2, sl
   11f04:	2300      	movs	r3, #0
   11f06:	e001      	b.n	11f0c <follow_path+0x10c>
   11f08:	3301      	adds	r3, #1
   11f0a:	3202      	adds	r2, #2
   11f0c:	8811      	ldrh	r1, [r2, #0]
   11f0e:	2920      	cmp	r1, #32
   11f10:	d0fa      	beq.n	11f08 <follow_path+0x108>
   11f12:	292e      	cmp	r1, #46	; 0x2e
   11f14:	d0f8      	beq.n	11f08 <follow_path+0x108>
   11f16:	2b00      	cmp	r3, #0
   11f18:	d001      	beq.n	11f1e <follow_path+0x11e>
   11f1a:	2203      	movs	r2, #3
   11f1c:	4316      	orrs	r6, r2
   11f1e:	4652      	mov	r2, sl
   11f20:	4442      	add	r2, r8
   11f22:	3a02      	subs	r2, #2
   11f24:	8812      	ldrh	r2, [r2, #0]
   11f26:	2a2e      	cmp	r2, #46	; 0x2e
   11f28:	d009      	beq.n	11f3e <follow_path+0x13e>
   11f2a:	4642      	mov	r2, r8
   11f2c:	3a04      	subs	r2, #4
   11f2e:	4452      	add	r2, sl
   11f30:	3c01      	subs	r4, #1
   11f32:	2c00      	cmp	r4, #0
   11f34:	d003      	beq.n	11f3e <follow_path+0x13e>
   11f36:	3a02      	subs	r2, #2
   11f38:	8851      	ldrh	r1, [r2, #2]
   11f3a:	292e      	cmp	r1, #46	; 0x2e
   11f3c:	d1f8      	bne.n	11f30 <follow_path+0x130>
   11f3e:	2208      	movs	r2, #8
   11f40:	9201      	str	r2, [sp, #4]
   11f42:	2200      	movs	r2, #0
   11f44:	4693      	mov	fp, r2
   11f46:	4691      	mov	r9, r2
   11f48:	46a0      	mov	r8, r4
   11f4a:	e006      	b.n	11f5a <follow_path+0x15a>
   11f4c:	4544      	cmp	r4, r8
   11f4e:	d100      	bne.n	11f52 <follow_path+0x152>
   11f50:	e0e6      	b.n	12120 <follow_path+0x320>
   11f52:	2303      	movs	r3, #3
   11f54:	431e      	orrs	r6, r3
   11f56:	b2f6      	uxtb	r6, r6
   11f58:	0023      	movs	r3, r4
   11f5a:	1c5c      	adds	r4, r3, #1
   11f5c:	005b      	lsls	r3, r3, #1
   11f5e:	4652      	mov	r2, sl
   11f60:	5a98      	ldrh	r0, [r3, r2]
   11f62:	2800      	cmp	r0, #0
   11f64:	d02c      	beq.n	11fc0 <follow_path+0x1c0>
   11f66:	2820      	cmp	r0, #32
   11f68:	d0f3      	beq.n	11f52 <follow_path+0x152>
   11f6a:	282e      	cmp	r0, #46	; 0x2e
   11f6c:	d0ee      	beq.n	11f4c <follow_path+0x14c>
   11f6e:	9b01      	ldr	r3, [sp, #4]
   11f70:	459b      	cmp	fp, r3
   11f72:	d219      	bcs.n	11fa8 <follow_path+0x1a8>
   11f74:	4544      	cmp	r4, r8
   11f76:	d100      	bne.n	11f7a <follow_path+0x17a>
   11f78:	e0d2      	b.n	12120 <follow_path+0x320>
   11f7a:	287f      	cmp	r0, #127	; 0x7f
   11f7c:	d85e      	bhi.n	1203c <follow_path+0x23c>
   11f7e:	282b      	cmp	r0, #43	; 0x2b
   11f80:	d06e      	beq.n	12060 <follow_path+0x260>
   11f82:	232c      	movs	r3, #44	; 0x2c
   11f84:	4a60      	ldr	r2, [pc, #384]	; (12108 <follow_path+0x308>)
   11f86:	b299      	uxth	r1, r3
   11f88:	4281      	cmp	r1, r0
   11f8a:	d067      	beq.n	1205c <follow_path+0x25c>
   11f8c:	3201      	adds	r2, #1
   11f8e:	7813      	ldrb	r3, [r2, #0]
   11f90:	2b00      	cmp	r3, #0
   11f92:	d1f8      	bne.n	11f86 <follow_path+0x186>
   11f94:	0003      	movs	r3, r0
   11f96:	3b41      	subs	r3, #65	; 0x41
   11f98:	b29b      	uxth	r3, r3
   11f9a:	2b19      	cmp	r3, #25
   11f9c:	d86c      	bhi.n	12078 <follow_path+0x278>
   11f9e:	2302      	movs	r3, #2
   11fa0:	464a      	mov	r2, r9
   11fa2:	431a      	orrs	r2, r3
   11fa4:	4691      	mov	r9, r2
   11fa6:	e05f      	b.n	12068 <follow_path+0x268>
   11fa8:	9b01      	ldr	r3, [sp, #4]
   11faa:	2b0b      	cmp	r3, #11
   11fac:	d03b      	beq.n	12026 <follow_path+0x226>
   11fae:	4544      	cmp	r4, r8
   11fb0:	d100      	bne.n	11fb4 <follow_path+0x1b4>
   11fb2:	e0b9      	b.n	12128 <follow_path+0x328>
   11fb4:	2303      	movs	r3, #3
   11fb6:	431e      	orrs	r6, r3
   11fb8:	b2f6      	uxtb	r6, r6
   11fba:	4544      	cmp	r4, r8
   11fbc:	d800      	bhi.n	11fc0 <follow_path+0x1c0>
   11fbe:	e0b3      	b.n	12128 <follow_path+0x328>
   11fc0:	69bb      	ldr	r3, [r7, #24]
   11fc2:	781a      	ldrb	r2, [r3, #0]
   11fc4:	2ae5      	cmp	r2, #229	; 0xe5
   11fc6:	d036      	beq.n	12036 <follow_path+0x236>
   11fc8:	9b01      	ldr	r3, [sp, #4]
   11fca:	2b08      	cmp	r3, #8
   11fcc:	d060      	beq.n	12090 <follow_path+0x290>
   11fce:	230c      	movs	r3, #12
   11fd0:	464a      	mov	r2, r9
   11fd2:	4013      	ands	r3, r2
   11fd4:	2b0c      	cmp	r3, #12
   11fd6:	d060      	beq.n	1209a <follow_path+0x29a>
   11fd8:	43d2      	mvns	r2, r2
   11fda:	0792      	lsls	r2, r2, #30
   11fdc:	d05d      	beq.n	1209a <follow_path+0x29a>
   11fde:	07b2      	lsls	r2, r6, #30
   11fe0:	d406      	bmi.n	11ff0 <follow_path+0x1f0>
   11fe2:	2203      	movs	r2, #3
   11fe4:	4649      	mov	r1, r9
   11fe6:	400a      	ands	r2, r1
   11fe8:	2a01      	cmp	r2, #1
   11fea:	d059      	beq.n	120a0 <follow_path+0x2a0>
   11fec:	2b04      	cmp	r3, #4
   11fee:	d05a      	beq.n	120a6 <follow_path+0x2a6>
   11ff0:	69bb      	ldr	r3, [r7, #24]
   11ff2:	72de      	strb	r6, [r3, #11]
   11ff4:	0038      	movs	r0, r7
   11ff6:	4b45      	ldr	r3, [pc, #276]	; (1210c <follow_path+0x30c>)
   11ff8:	4798      	blx	r3
   11ffa:	69bb      	ldr	r3, [r7, #24]
   11ffc:	7adb      	ldrb	r3, [r3, #11]
   11ffe:	2800      	cmp	r0, #0
   12000:	d15c      	bne.n	120bc <follow_path+0x2bc>
   12002:	075b      	lsls	r3, r3, #29
   12004:	d453      	bmi.n	120ae <follow_path+0x2ae>
   12006:	697a      	ldr	r2, [r7, #20]
   12008:	7ad3      	ldrb	r3, [r2, #11]
   1200a:	06db      	lsls	r3, r3, #27
   1200c:	d55c      	bpl.n	120c8 <follow_path+0x2c8>
   1200e:	7d51      	ldrb	r1, [r2, #21]
   12010:	0209      	lsls	r1, r1, #8
   12012:	7d13      	ldrb	r3, [r2, #20]
   12014:	430b      	orrs	r3, r1
   12016:	041b      	lsls	r3, r3, #16
   12018:	7ed1      	ldrb	r1, [r2, #27]
   1201a:	0209      	lsls	r1, r1, #8
   1201c:	7e92      	ldrb	r2, [r2, #26]
   1201e:	430a      	orrs	r2, r1
   12020:	4313      	orrs	r3, r2
   12022:	60bb      	str	r3, [r7, #8]
   12024:	e70b      	b.n	11e3e <follow_path+0x3e>
   12026:	2303      	movs	r3, #3
   12028:	431e      	orrs	r6, r3
   1202a:	69bb      	ldr	r3, [r7, #24]
   1202c:	781a      	ldrb	r2, [r3, #0]
   1202e:	2ae5      	cmp	r2, #229	; 0xe5
   12030:	d1cd      	bne.n	11fce <follow_path+0x1ce>
   12032:	220b      	movs	r2, #11
   12034:	9201      	str	r2, [sp, #4]
   12036:	2205      	movs	r2, #5
   12038:	701a      	strb	r2, [r3, #0]
   1203a:	e7c5      	b.n	11fc8 <follow_path+0x1c8>
   1203c:	2100      	movs	r1, #0
   1203e:	4b2f      	ldr	r3, [pc, #188]	; (120fc <follow_path+0x2fc>)
   12040:	4798      	blx	r3
   12042:	2800      	cmp	r0, #0
   12044:	d100      	bne.n	12048 <follow_path+0x248>
   12046:	e079      	b.n	1213c <follow_path+0x33c>
   12048:	4b31      	ldr	r3, [pc, #196]	; (12110 <follow_path+0x310>)
   1204a:	469c      	mov	ip, r3
   1204c:	4460      	add	r0, ip
   1204e:	3880      	subs	r0, #128	; 0x80
   12050:	7800      	ldrb	r0, [r0, #0]
   12052:	2302      	movs	r3, #2
   12054:	431e      	orrs	r6, r3
   12056:	2800      	cmp	r0, #0
   12058:	d002      	beq.n	12060 <follow_path+0x260>
   1205a:	e790      	b.n	11f7e <follow_path+0x17e>
   1205c:	2b00      	cmp	r3, #0
   1205e:	d099      	beq.n	11f94 <follow_path+0x194>
   12060:	2303      	movs	r3, #3
   12062:	431e      	orrs	r6, r3
   12064:	b2f6      	uxtb	r6, r6
   12066:	205f      	movs	r0, #95	; 0x5f
   12068:	69bb      	ldr	r3, [r7, #24]
   1206a:	465a      	mov	r2, fp
   1206c:	5498      	strb	r0, [r3, r2]
   1206e:	0023      	movs	r3, r4
   12070:	2201      	movs	r2, #1
   12072:	4694      	mov	ip, r2
   12074:	44e3      	add	fp, ip
   12076:	e770      	b.n	11f5a <follow_path+0x15a>
   12078:	0003      	movs	r3, r0
   1207a:	3b61      	subs	r3, #97	; 0x61
   1207c:	b29b      	uxth	r3, r3
   1207e:	2b19      	cmp	r3, #25
   12080:	d8f2      	bhi.n	12068 <follow_path+0x268>
   12082:	2301      	movs	r3, #1
   12084:	464a      	mov	r2, r9
   12086:	431a      	orrs	r2, r3
   12088:	4691      	mov	r9, r2
   1208a:	3820      	subs	r0, #32
   1208c:	b280      	uxth	r0, r0
   1208e:	e7eb      	b.n	12068 <follow_path+0x268>
   12090:	464b      	mov	r3, r9
   12092:	009b      	lsls	r3, r3, #2
   12094:	b2db      	uxtb	r3, r3
   12096:	4699      	mov	r9, r3
   12098:	e799      	b.n	11fce <follow_path+0x1ce>
   1209a:	2202      	movs	r2, #2
   1209c:	4316      	orrs	r6, r2
   1209e:	e79e      	b.n	11fde <follow_path+0x1de>
   120a0:	320f      	adds	r2, #15
   120a2:	4316      	orrs	r6, r2
   120a4:	e7a2      	b.n	11fec <follow_path+0x1ec>
   120a6:	3304      	adds	r3, #4
   120a8:	431e      	orrs	r6, r3
   120aa:	e7a1      	b.n	11ff0 <follow_path+0x1f0>
   120ac:	2006      	movs	r0, #6
   120ae:	b003      	add	sp, #12
   120b0:	bc3c      	pop	{r2, r3, r4, r5}
   120b2:	4690      	mov	r8, r2
   120b4:	4699      	mov	r9, r3
   120b6:	46a2      	mov	sl, r4
   120b8:	46ab      	mov	fp, r5
   120ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   120bc:	2804      	cmp	r0, #4
   120be:	d1f6      	bne.n	120ae <follow_path+0x2ae>
   120c0:	075b      	lsls	r3, r3, #29
   120c2:	d4f4      	bmi.n	120ae <follow_path+0x2ae>
   120c4:	3001      	adds	r0, #1
   120c6:	e7f2      	b.n	120ae <follow_path+0x2ae>
   120c8:	2005      	movs	r0, #5
   120ca:	e7f0      	b.n	120ae <follow_path+0x2ae>
   120cc:	2301      	movs	r3, #1
   120ce:	2400      	movs	r4, #0
   120d0:	e6fb      	b.n	11eca <follow_path+0xca>
   120d2:	2301      	movs	r3, #1
   120d4:	2400      	movs	r4, #0
   120d6:	e005      	b.n	120e4 <follow_path+0x2e4>
   120d8:	2301      	movs	r3, #1
   120da:	2400      	movs	r4, #0
   120dc:	e002      	b.n	120e4 <follow_path+0x2e4>
   120de:	002c      	movs	r4, r5
   120e0:	465f      	mov	r7, fp
   120e2:	464d      	mov	r5, r9
   120e4:	18ed      	adds	r5, r5, r3
   120e6:	2600      	movs	r6, #0
   120e8:	2c00      	cmp	r4, #0
   120ea:	d0df      	beq.n	120ac <follow_path+0x2ac>
   120ec:	4b09      	ldr	r3, [pc, #36]	; (12114 <follow_path+0x314>)
   120ee:	18e3      	adds	r3, r4, r3
   120f0:	005b      	lsls	r3, r3, #1
   120f2:	4453      	add	r3, sl
   120f4:	e6f1      	b.n	11eda <follow_path+0xda>
   120f6:	46c0      	nop			; (mov r8, r8)
   120f8:	000112a9 	.word	0x000112a9
   120fc:	000128b9 	.word	0x000128b9
   12100:	00019f49 	.word	0x00019f49
   12104:	00010c41 	.word	0x00010c41
   12108:	00019f55 	.word	0x00019f55
   1210c:	000116e9 	.word	0x000116e9
   12110:	00019ec8 	.word	0x00019ec8
   12114:	7fffffff 	.word	0x7fffffff
   12118:	002c      	movs	r4, r5
   1211a:	465f      	mov	r7, fp
   1211c:	464d      	mov	r5, r9
   1211e:	e7e1      	b.n	120e4 <follow_path+0x2e4>
   12120:	9b01      	ldr	r3, [sp, #4]
   12122:	2b0b      	cmp	r3, #11
   12124:	d100      	bne.n	12128 <follow_path+0x328>
   12126:	e77e      	b.n	12026 <follow_path+0x226>
   12128:	464b      	mov	r3, r9
   1212a:	009b      	lsls	r3, r3, #2
   1212c:	b2db      	uxtb	r3, r3
   1212e:	4699      	mov	r9, r3
   12130:	4643      	mov	r3, r8
   12132:	220b      	movs	r2, #11
   12134:	9201      	str	r2, [sp, #4]
   12136:	3a03      	subs	r2, #3
   12138:	4693      	mov	fp, r2
   1213a:	e70e      	b.n	11f5a <follow_path+0x15a>
   1213c:	2302      	movs	r3, #2
   1213e:	431e      	orrs	r6, r3
   12140:	e78e      	b.n	12060 <follow_path+0x260>
   12142:	46c0      	nop			; (mov r8, r8)

00012144 <f_mount>:
   12144:	230b      	movs	r3, #11
   12146:	2807      	cmp	r0, #7
   12148:	d901      	bls.n	1214e <f_mount+0xa>
   1214a:	0018      	movs	r0, r3
   1214c:	4770      	bx	lr
   1214e:	0083      	lsls	r3, r0, #2
   12150:	4a07      	ldr	r2, [pc, #28]	; (12170 <f_mount+0x2c>)
   12152:	589b      	ldr	r3, [r3, r2]
   12154:	2b00      	cmp	r3, #0
   12156:	d001      	beq.n	1215c <f_mount+0x18>
   12158:	2200      	movs	r2, #0
   1215a:	701a      	strb	r2, [r3, #0]
   1215c:	2900      	cmp	r1, #0
   1215e:	d001      	beq.n	12164 <f_mount+0x20>
   12160:	2300      	movs	r3, #0
   12162:	700b      	strb	r3, [r1, #0]
   12164:	0080      	lsls	r0, r0, #2
   12166:	4b02      	ldr	r3, [pc, #8]	; (12170 <f_mount+0x2c>)
   12168:	50c1      	str	r1, [r0, r3]
   1216a:	2300      	movs	r3, #0
   1216c:	e7ed      	b.n	1214a <f_mount+0x6>
   1216e:	46c0      	nop			; (mov r8, r8)
   12170:	2000044c 	.word	0x2000044c

00012174 <f_open>:
   12174:	b5f0      	push	{r4, r5, r6, r7, lr}
   12176:	46c6      	mov	lr, r8
   12178:	b500      	push	{lr}
   1217a:	4c59      	ldr	r4, [pc, #356]	; (122e0 <f_open+0x16c>)
   1217c:	44a5      	add	sp, r4
   1217e:	0005      	movs	r5, r0
   12180:	9101      	str	r1, [sp, #4]
   12182:	0017      	movs	r7, r2
   12184:	2300      	movs	r3, #0
   12186:	6003      	str	r3, [r0, #0]
   12188:	261f      	movs	r6, #31
   1218a:	4016      	ands	r6, r2
   1218c:	221e      	movs	r2, #30
   1218e:	403a      	ands	r2, r7
   12190:	a985      	add	r1, sp, #532	; 0x214
   12192:	a801      	add	r0, sp, #4
   12194:	4b53      	ldr	r3, [pc, #332]	; (122e4 <f_open+0x170>)
   12196:	4798      	blx	r3
   12198:	ab82      	add	r3, sp, #520	; 0x208
   1219a:	938b      	str	r3, [sp, #556]	; 0x22c
   1219c:	ab02      	add	r3, sp, #8
   1219e:	938c      	str	r3, [sp, #560]	; 0x230
   121a0:	2800      	cmp	r0, #0
   121a2:	d006      	beq.n	121b2 <f_open+0x3e>
   121a4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
   121a6:	231c      	movs	r3, #28
   121a8:	423b      	tst	r3, r7
   121aa:	d145      	bne.n	12238 <f_open+0xc4>
   121ac:	2800      	cmp	r0, #0
   121ae:	d13d      	bne.n	1222c <f_open+0xb8>
   121b0:	e00c      	b.n	121cc <f_open+0x58>
   121b2:	9901      	ldr	r1, [sp, #4]
   121b4:	a885      	add	r0, sp, #532	; 0x214
   121b6:	4b4c      	ldr	r3, [pc, #304]	; (122e8 <f_open+0x174>)
   121b8:	4798      	blx	r3
   121ba:	9c8a      	ldr	r4, [sp, #552]	; 0x228
   121bc:	2800      	cmp	r0, #0
   121be:	d1f2      	bne.n	121a6 <f_open+0x32>
   121c0:	2c00      	cmp	r4, #0
   121c2:	d100      	bne.n	121c6 <f_open+0x52>
   121c4:	e086      	b.n	122d4 <f_open+0x160>
   121c6:	231c      	movs	r3, #28
   121c8:	423b      	tst	r3, r7
   121ca:	d146      	bne.n	1225a <f_open+0xe6>
   121cc:	7ae3      	ldrb	r3, [r4, #11]
   121ce:	2004      	movs	r0, #4
   121d0:	06da      	lsls	r2, r3, #27
   121d2:	d42b      	bmi.n	1222c <f_open+0xb8>
   121d4:	07ba      	lsls	r2, r7, #30
   121d6:	d502      	bpl.n	121de <f_open+0x6a>
   121d8:	3003      	adds	r0, #3
   121da:	07db      	lsls	r3, r3, #31
   121dc:	d426      	bmi.n	1222c <f_open+0xb8>
   121de:	073b      	lsls	r3, r7, #28
   121e0:	d501      	bpl.n	121e6 <f_open+0x72>
   121e2:	2320      	movs	r3, #32
   121e4:	431e      	orrs	r6, r3
   121e6:	9b85      	ldr	r3, [sp, #532]	; 0x214
   121e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   121ea:	61eb      	str	r3, [r5, #28]
   121ec:	622c      	str	r4, [r5, #32]
   121ee:	71ae      	strb	r6, [r5, #6]
   121f0:	7d62      	ldrb	r2, [r4, #21]
   121f2:	0212      	lsls	r2, r2, #8
   121f4:	7d23      	ldrb	r3, [r4, #20]
   121f6:	4313      	orrs	r3, r2
   121f8:	041b      	lsls	r3, r3, #16
   121fa:	7ee1      	ldrb	r1, [r4, #27]
   121fc:	0209      	lsls	r1, r1, #8
   121fe:	7ea2      	ldrb	r2, [r4, #26]
   12200:	430a      	orrs	r2, r1
   12202:	4313      	orrs	r3, r2
   12204:	612b      	str	r3, [r5, #16]
   12206:	7fe3      	ldrb	r3, [r4, #31]
   12208:	061b      	lsls	r3, r3, #24
   1220a:	7fa2      	ldrb	r2, [r4, #30]
   1220c:	0412      	lsls	r2, r2, #16
   1220e:	4313      	orrs	r3, r2
   12210:	7f22      	ldrb	r2, [r4, #28]
   12212:	4313      	orrs	r3, r2
   12214:	7f62      	ldrb	r2, [r4, #29]
   12216:	0212      	lsls	r2, r2, #8
   12218:	4313      	orrs	r3, r2
   1221a:	60eb      	str	r3, [r5, #12]
   1221c:	2300      	movs	r3, #0
   1221e:	60ab      	str	r3, [r5, #8]
   12220:	61ab      	str	r3, [r5, #24]
   12222:	9b85      	ldr	r3, [sp, #532]	; 0x214
   12224:	602b      	str	r3, [r5, #0]
   12226:	88db      	ldrh	r3, [r3, #6]
   12228:	80ab      	strh	r3, [r5, #4]
   1222a:	2000      	movs	r0, #0
   1222c:	238e      	movs	r3, #142	; 0x8e
   1222e:	009b      	lsls	r3, r3, #2
   12230:	449d      	add	sp, r3
   12232:	bc04      	pop	{r2}
   12234:	4690      	mov	r8, r2
   12236:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12238:	2804      	cmp	r0, #4
   1223a:	d005      	beq.n	12248 <f_open+0xd4>
   1223c:	2308      	movs	r3, #8
   1223e:	431e      	orrs	r6, r3
   12240:	9c8a      	ldr	r4, [sp, #552]	; 0x228
   12242:	2800      	cmp	r0, #0
   12244:	d0d3      	beq.n	121ee <f_open+0x7a>
   12246:	e7f1      	b.n	1222c <f_open+0xb8>
   12248:	a885      	add	r0, sp, #532	; 0x214
   1224a:	4b28      	ldr	r3, [pc, #160]	; (122ec <f_open+0x178>)
   1224c:	4798      	blx	r3
   1224e:	2308      	movs	r3, #8
   12250:	431e      	orrs	r6, r3
   12252:	9c8a      	ldr	r4, [sp, #552]	; 0x228
   12254:	2800      	cmp	r0, #0
   12256:	d008      	beq.n	1226a <f_open+0xf6>
   12258:	e7e8      	b.n	1222c <f_open+0xb8>
   1225a:	7ae3      	ldrb	r3, [r4, #11]
   1225c:	2211      	movs	r2, #17
   1225e:	2007      	movs	r0, #7
   12260:	421a      	tst	r2, r3
   12262:	d1e3      	bne.n	1222c <f_open+0xb8>
   12264:	3001      	adds	r0, #1
   12266:	077b      	lsls	r3, r7, #29
   12268:	d4e0      	bmi.n	1222c <f_open+0xb8>
   1226a:	0733      	lsls	r3, r6, #28
   1226c:	d5bb      	bpl.n	121e6 <f_open+0x72>
   1226e:	4b20      	ldr	r3, [pc, #128]	; (122f0 <f_open+0x17c>)
   12270:	4798      	blx	r3
   12272:	73a0      	strb	r0, [r4, #14]
   12274:	0a03      	lsrs	r3, r0, #8
   12276:	73e3      	strb	r3, [r4, #15]
   12278:	0c03      	lsrs	r3, r0, #16
   1227a:	7423      	strb	r3, [r4, #16]
   1227c:	0e00      	lsrs	r0, r0, #24
   1227e:	7460      	strb	r0, [r4, #17]
   12280:	2300      	movs	r3, #0
   12282:	72e3      	strb	r3, [r4, #11]
   12284:	7723      	strb	r3, [r4, #28]
   12286:	7763      	strb	r3, [r4, #29]
   12288:	77a3      	strb	r3, [r4, #30]
   1228a:	77e3      	strb	r3, [r4, #31]
   1228c:	7d62      	ldrb	r2, [r4, #21]
   1228e:	0212      	lsls	r2, r2, #8
   12290:	7d27      	ldrb	r7, [r4, #20]
   12292:	4317      	orrs	r7, r2
   12294:	043f      	lsls	r7, r7, #16
   12296:	7ee1      	ldrb	r1, [r4, #27]
   12298:	0209      	lsls	r1, r1, #8
   1229a:	7ea2      	ldrb	r2, [r4, #26]
   1229c:	430a      	orrs	r2, r1
   1229e:	4317      	orrs	r7, r2
   122a0:	76a3      	strb	r3, [r4, #26]
   122a2:	76e3      	strb	r3, [r4, #27]
   122a4:	7523      	strb	r3, [r4, #20]
   122a6:	7563      	strb	r3, [r4, #21]
   122a8:	9885      	ldr	r0, [sp, #532]	; 0x214
   122aa:	3301      	adds	r3, #1
   122ac:	7103      	strb	r3, [r0, #4]
   122ae:	2f00      	cmp	r7, #0
   122b0:	d097      	beq.n	121e2 <f_open+0x6e>
   122b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   122b4:	4698      	mov	r8, r3
   122b6:	0039      	movs	r1, r7
   122b8:	4b0e      	ldr	r3, [pc, #56]	; (122f4 <f_open+0x180>)
   122ba:	4798      	blx	r3
   122bc:	2800      	cmp	r0, #0
   122be:	d1b5      	bne.n	1222c <f_open+0xb8>
   122c0:	9885      	ldr	r0, [sp, #532]	; 0x214
   122c2:	3f01      	subs	r7, #1
   122c4:	60c7      	str	r7, [r0, #12]
   122c6:	4641      	mov	r1, r8
   122c8:	4b0b      	ldr	r3, [pc, #44]	; (122f8 <f_open+0x184>)
   122ca:	4798      	blx	r3
   122cc:	2800      	cmp	r0, #0
   122ce:	d100      	bne.n	122d2 <f_open+0x15e>
   122d0:	e787      	b.n	121e2 <f_open+0x6e>
   122d2:	e7ab      	b.n	1222c <f_open+0xb8>
   122d4:	231c      	movs	r3, #28
   122d6:	2006      	movs	r0, #6
   122d8:	423b      	tst	r3, r7
   122da:	d0b2      	beq.n	12242 <f_open+0xce>
   122dc:	2006      	movs	r0, #6
   122de:	e7ad      	b.n	1223c <f_open+0xc8>
   122e0:	fffffdc8 	.word	0xfffffdc8
   122e4:	00010d5d 	.word	0x00010d5d
   122e8:	00011e01 	.word	0x00011e01
   122ec:	00011881 	.word	0x00011881
   122f0:	00010bdd 	.word	0x00010bdd
   122f4:	0001154d 	.word	0x0001154d
   122f8:	0001110d 	.word	0x0001110d

000122fc <f_read>:
   122fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   122fe:	46de      	mov	lr, fp
   12300:	4657      	mov	r7, sl
   12302:	464e      	mov	r6, r9
   12304:	4645      	mov	r5, r8
   12306:	b5e0      	push	{r5, r6, r7, lr}
   12308:	b083      	sub	sp, #12
   1230a:	0004      	movs	r4, r0
   1230c:	000f      	movs	r7, r1
   1230e:	0015      	movs	r5, r2
   12310:	4699      	mov	r9, r3
   12312:	2300      	movs	r3, #0
   12314:	464a      	mov	r2, r9
   12316:	6013      	str	r3, [r2, #0]
   12318:	8881      	ldrh	r1, [r0, #4]
   1231a:	6800      	ldr	r0, [r0, #0]
   1231c:	4b5e      	ldr	r3, [pc, #376]	; (12498 <f_read+0x19c>)
   1231e:	4798      	blx	r3
   12320:	9000      	str	r0, [sp, #0]
   12322:	2800      	cmp	r0, #0
   12324:	d000      	beq.n	12328 <f_read+0x2c>
   12326:	e0af      	b.n	12488 <f_read+0x18c>
   12328:	79a3      	ldrb	r3, [r4, #6]
   1232a:	b25a      	sxtb	r2, r3
   1232c:	2a00      	cmp	r2, #0
   1232e:	da00      	bge.n	12332 <f_read+0x36>
   12330:	e0a8      	b.n	12484 <f_read+0x188>
   12332:	07db      	lsls	r3, r3, #31
   12334:	d402      	bmi.n	1233c <f_read+0x40>
   12336:	2307      	movs	r3, #7
   12338:	9300      	str	r3, [sp, #0]
   1233a:	e0a5      	b.n	12488 <f_read+0x18c>
   1233c:	68e3      	ldr	r3, [r4, #12]
   1233e:	68a2      	ldr	r2, [r4, #8]
   12340:	1a9e      	subs	r6, r3, r2
   12342:	42ae      	cmp	r6, r5
   12344:	d900      	bls.n	12348 <f_read+0x4c>
   12346:	002e      	movs	r6, r5
   12348:	2e00      	cmp	r6, #0
   1234a:	d153      	bne.n	123f4 <f_read+0xf8>
   1234c:	e09c      	b.n	12488 <f_read+0x18c>
   1234e:	6961      	ldr	r1, [r4, #20]
   12350:	4b52      	ldr	r3, [pc, #328]	; (1249c <f_read+0x1a0>)
   12352:	4798      	blx	r3
   12354:	e05c      	b.n	12410 <f_read+0x114>
   12356:	79a2      	ldrb	r2, [r4, #6]
   12358:	2380      	movs	r3, #128	; 0x80
   1235a:	425b      	negs	r3, r3
   1235c:	4313      	orrs	r3, r2
   1235e:	71a3      	strb	r3, [r4, #6]
   12360:	2302      	movs	r3, #2
   12362:	9300      	str	r3, [sp, #0]
   12364:	e090      	b.n	12488 <f_read+0x18c>
   12366:	79a2      	ldrb	r2, [r4, #6]
   12368:	2380      	movs	r3, #128	; 0x80
   1236a:	425b      	negs	r3, r3
   1236c:	4313      	orrs	r3, r2
   1236e:	71a3      	strb	r3, [r4, #6]
   12370:	2301      	movs	r3, #1
   12372:	9300      	str	r3, [sp, #0]
   12374:	e088      	b.n	12488 <f_read+0x18c>
   12376:	79a2      	ldrb	r2, [r4, #6]
   12378:	2380      	movs	r3, #128	; 0x80
   1237a:	425b      	negs	r3, r3
   1237c:	4313      	orrs	r3, r2
   1237e:	71a3      	strb	r3, [r4, #6]
   12380:	2302      	movs	r3, #2
   12382:	9300      	str	r3, [sp, #0]
   12384:	e080      	b.n	12488 <f_read+0x18c>
   12386:	79a2      	ldrb	r2, [r4, #6]
   12388:	2380      	movs	r3, #128	; 0x80
   1238a:	425b      	negs	r3, r3
   1238c:	4313      	orrs	r3, r2
   1238e:	71a3      	strb	r3, [r4, #6]
   12390:	2301      	movs	r3, #1
   12392:	9300      	str	r3, [sp, #0]
   12394:	e078      	b.n	12488 <f_read+0x18c>
   12396:	3130      	adds	r1, #48	; 0x30
   12398:	0240      	lsls	r0, r0, #9
   1239a:	1838      	adds	r0, r7, r0
   1239c:	2280      	movs	r2, #128	; 0x80
   1239e:	0092      	lsls	r2, r2, #2
   123a0:	4b3f      	ldr	r3, [pc, #252]	; (124a0 <f_read+0x1a4>)
   123a2:	4798      	blx	r3
   123a4:	e063      	b.n	1246e <f_read+0x172>
   123a6:	4643      	mov	r3, r8
   123a8:	61a3      	str	r3, [r4, #24]
   123aa:	68a3      	ldr	r3, [r4, #8]
   123ac:	05dd      	lsls	r5, r3, #23
   123ae:	0ded      	lsrs	r5, r5, #23
   123b0:	2380      	movs	r3, #128	; 0x80
   123b2:	009b      	lsls	r3, r3, #2
   123b4:	1b5d      	subs	r5, r3, r5
   123b6:	42b5      	cmp	r5, r6
   123b8:	d900      	bls.n	123bc <f_read+0xc0>
   123ba:	0035      	movs	r5, r6
   123bc:	69a1      	ldr	r1, [r4, #24]
   123be:	6820      	ldr	r0, [r4, #0]
   123c0:	4b38      	ldr	r3, [pc, #224]	; (124a4 <f_read+0x1a8>)
   123c2:	4798      	blx	r3
   123c4:	2800      	cmp	r0, #0
   123c6:	d155      	bne.n	12474 <f_read+0x178>
   123c8:	68a3      	ldr	r3, [r4, #8]
   123ca:	05d9      	lsls	r1, r3, #23
   123cc:	0dc9      	lsrs	r1, r1, #23
   123ce:	3130      	adds	r1, #48	; 0x30
   123d0:	6823      	ldr	r3, [r4, #0]
   123d2:	469c      	mov	ip, r3
   123d4:	4461      	add	r1, ip
   123d6:	002a      	movs	r2, r5
   123d8:	0038      	movs	r0, r7
   123da:	4b31      	ldr	r3, [pc, #196]	; (124a0 <f_read+0x1a4>)
   123dc:	4798      	blx	r3
   123de:	197f      	adds	r7, r7, r5
   123e0:	68a3      	ldr	r3, [r4, #8]
   123e2:	195b      	adds	r3, r3, r5
   123e4:	60a3      	str	r3, [r4, #8]
   123e6:	464b      	mov	r3, r9
   123e8:	681b      	ldr	r3, [r3, #0]
   123ea:	195b      	adds	r3, r3, r5
   123ec:	464a      	mov	r2, r9
   123ee:	6013      	str	r3, [r2, #0]
   123f0:	1b76      	subs	r6, r6, r5
   123f2:	d049      	beq.n	12488 <f_read+0x18c>
   123f4:	68a3      	ldr	r3, [r4, #8]
   123f6:	05da      	lsls	r2, r3, #23
   123f8:	d1d7      	bne.n	123aa <f_read+0xae>
   123fa:	6820      	ldr	r0, [r4, #0]
   123fc:	7882      	ldrb	r2, [r0, #2]
   123fe:	3a01      	subs	r2, #1
   12400:	0a5d      	lsrs	r5, r3, #9
   12402:	4015      	ands	r5, r2
   12404:	b2ed      	uxtb	r5, r5
   12406:	2d00      	cmp	r5, #0
   12408:	d107      	bne.n	1241a <f_read+0x11e>
   1240a:	2b00      	cmp	r3, #0
   1240c:	d19f      	bne.n	1234e <f_read+0x52>
   1240e:	6920      	ldr	r0, [r4, #16]
   12410:	2801      	cmp	r0, #1
   12412:	d9a0      	bls.n	12356 <f_read+0x5a>
   12414:	1c43      	adds	r3, r0, #1
   12416:	d0a6      	beq.n	12366 <f_read+0x6a>
   12418:	6160      	str	r0, [r4, #20]
   1241a:	6823      	ldr	r3, [r4, #0]
   1241c:	469a      	mov	sl, r3
   1241e:	6961      	ldr	r1, [r4, #20]
   12420:	0018      	movs	r0, r3
   12422:	4b21      	ldr	r3, [pc, #132]	; (124a8 <f_read+0x1ac>)
   12424:	4798      	blx	r3
   12426:	2800      	cmp	r0, #0
   12428:	d0a5      	beq.n	12376 <f_read+0x7a>
   1242a:	4680      	mov	r8, r0
   1242c:	44a8      	add	r8, r5
   1242e:	0a73      	lsrs	r3, r6, #9
   12430:	469b      	mov	fp, r3
   12432:	d0b8      	beq.n	123a6 <f_read+0xaa>
   12434:	4653      	mov	r3, sl
   12436:	789b      	ldrb	r3, [r3, #2]
   12438:	465a      	mov	r2, fp
   1243a:	18aa      	adds	r2, r5, r2
   1243c:	429a      	cmp	r2, r3
   1243e:	d901      	bls.n	12444 <f_read+0x148>
   12440:	1b5b      	subs	r3, r3, r5
   12442:	469b      	mov	fp, r3
   12444:	465b      	mov	r3, fp
   12446:	466a      	mov	r2, sp
   12448:	71d3      	strb	r3, [r2, #7]
   1244a:	79d3      	ldrb	r3, [r2, #7]
   1244c:	4652      	mov	r2, sl
   1244e:	7850      	ldrb	r0, [r2, #1]
   12450:	4642      	mov	r2, r8
   12452:	0039      	movs	r1, r7
   12454:	4d15      	ldr	r5, [pc, #84]	; (124ac <f_read+0x1b0>)
   12456:	47a8      	blx	r5
   12458:	2800      	cmp	r0, #0
   1245a:	d194      	bne.n	12386 <f_read+0x8a>
   1245c:	6821      	ldr	r1, [r4, #0]
   1245e:	790b      	ldrb	r3, [r1, #4]
   12460:	2b00      	cmp	r3, #0
   12462:	d004      	beq.n	1246e <f_read+0x172>
   12464:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   12466:	4642      	mov	r2, r8
   12468:	1a98      	subs	r0, r3, r2
   1246a:	4583      	cmp	fp, r0
   1246c:	d893      	bhi.n	12396 <f_read+0x9a>
   1246e:	465b      	mov	r3, fp
   12470:	025d      	lsls	r5, r3, #9
   12472:	e7b4      	b.n	123de <f_read+0xe2>
   12474:	79a2      	ldrb	r2, [r4, #6]
   12476:	2380      	movs	r3, #128	; 0x80
   12478:	425b      	negs	r3, r3
   1247a:	4313      	orrs	r3, r2
   1247c:	71a3      	strb	r3, [r4, #6]
   1247e:	2301      	movs	r3, #1
   12480:	9300      	str	r3, [sp, #0]
   12482:	e001      	b.n	12488 <f_read+0x18c>
   12484:	2302      	movs	r3, #2
   12486:	9300      	str	r3, [sp, #0]
   12488:	9800      	ldr	r0, [sp, #0]
   1248a:	b003      	add	sp, #12
   1248c:	bc3c      	pop	{r2, r3, r4, r5}
   1248e:	4690      	mov	r8, r2
   12490:	4699      	mov	r9, r3
   12492:	46a2      	mov	sl, r4
   12494:	46ab      	mov	fp, r5
   12496:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12498:	00010c89 	.word	0x00010c89
   1249c:	000111ad 	.word	0x000111ad
   124a0:	00010c2d 	.word	0x00010c2d
   124a4:	0001110d 	.word	0x0001110d
   124a8:	00010c53 	.word	0x00010c53
   124ac:	00010a69 	.word	0x00010a69

000124b0 <f_write>:
   124b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   124b2:	46de      	mov	lr, fp
   124b4:	4657      	mov	r7, sl
   124b6:	464e      	mov	r6, r9
   124b8:	4645      	mov	r5, r8
   124ba:	b5e0      	push	{r5, r6, r7, lr}
   124bc:	b083      	sub	sp, #12
   124be:	0004      	movs	r4, r0
   124c0:	000d      	movs	r5, r1
   124c2:	0016      	movs	r6, r2
   124c4:	4699      	mov	r9, r3
   124c6:	2300      	movs	r3, #0
   124c8:	464a      	mov	r2, r9
   124ca:	6013      	str	r3, [r2, #0]
   124cc:	8881      	ldrh	r1, [r0, #4]
   124ce:	6800      	ldr	r0, [r0, #0]
   124d0:	4b7f      	ldr	r3, [pc, #508]	; (126d0 <f_write+0x220>)
   124d2:	4798      	blx	r3
   124d4:	9000      	str	r0, [sp, #0]
   124d6:	2800      	cmp	r0, #0
   124d8:	d000      	beq.n	124dc <f_write+0x2c>
   124da:	e0f1      	b.n	126c0 <f_write+0x210>
   124dc:	79a3      	ldrb	r3, [r4, #6]
   124de:	b25a      	sxtb	r2, r3
   124e0:	2a00      	cmp	r2, #0
   124e2:	da00      	bge.n	124e6 <f_write+0x36>
   124e4:	e0ea      	b.n	126bc <f_write+0x20c>
   124e6:	079b      	lsls	r3, r3, #30
   124e8:	d402      	bmi.n	124f0 <f_write+0x40>
   124ea:	2307      	movs	r3, #7
   124ec:	9300      	str	r3, [sp, #0]
   124ee:	e0e7      	b.n	126c0 <f_write+0x210>
   124f0:	68e3      	ldr	r3, [r4, #12]
   124f2:	199a      	adds	r2, r3, r6
   124f4:	4293      	cmp	r3, r2
   124f6:	d810      	bhi.n	1251a <f_write+0x6a>
   124f8:	2e00      	cmp	r6, #0
   124fa:	d00e      	beq.n	1251a <f_write+0x6a>
   124fc:	002f      	movs	r7, r5
   124fe:	e07b      	b.n	125f8 <f_write+0x148>
   12500:	2100      	movs	r1, #0
   12502:	4b74      	ldr	r3, [pc, #464]	; (126d4 <f_write+0x224>)
   12504:	4798      	blx	r3
   12506:	0003      	movs	r3, r0
   12508:	6120      	str	r0, [r4, #16]
   1250a:	e003      	b.n	12514 <f_write+0x64>
   1250c:	6961      	ldr	r1, [r4, #20]
   1250e:	4b71      	ldr	r3, [pc, #452]	; (126d4 <f_write+0x224>)
   12510:	4798      	blx	r3
   12512:	0003      	movs	r3, r0
   12514:	2b00      	cmp	r3, #0
   12516:	d000      	beq.n	1251a <f_write+0x6a>
   12518:	e080      	b.n	1261c <f_write+0x16c>
   1251a:	68a3      	ldr	r3, [r4, #8]
   1251c:	68e2      	ldr	r2, [r4, #12]
   1251e:	4293      	cmp	r3, r2
   12520:	d900      	bls.n	12524 <f_write+0x74>
   12522:	60e3      	str	r3, [r4, #12]
   12524:	79a3      	ldrb	r3, [r4, #6]
   12526:	2220      	movs	r2, #32
   12528:	4313      	orrs	r3, r2
   1252a:	71a3      	strb	r3, [r4, #6]
   1252c:	e0c8      	b.n	126c0 <f_write+0x210>
   1252e:	79a2      	ldrb	r2, [r4, #6]
   12530:	3b81      	subs	r3, #129	; 0x81
   12532:	4313      	orrs	r3, r2
   12534:	71a3      	strb	r3, [r4, #6]
   12536:	2302      	movs	r3, #2
   12538:	9300      	str	r3, [sp, #0]
   1253a:	e0c1      	b.n	126c0 <f_write+0x210>
   1253c:	79a2      	ldrb	r2, [r4, #6]
   1253e:	3b7f      	subs	r3, #127	; 0x7f
   12540:	4313      	orrs	r3, r2
   12542:	71a3      	strb	r3, [r4, #6]
   12544:	2301      	movs	r3, #1
   12546:	9300      	str	r3, [sp, #0]
   12548:	e0ba      	b.n	126c0 <f_write+0x210>
   1254a:	2100      	movs	r1, #0
   1254c:	4b62      	ldr	r3, [pc, #392]	; (126d8 <f_write+0x228>)
   1254e:	4798      	blx	r3
   12550:	2800      	cmp	r0, #0
   12552:	d06d      	beq.n	12630 <f_write+0x180>
   12554:	79a2      	ldrb	r2, [r4, #6]
   12556:	2380      	movs	r3, #128	; 0x80
   12558:	425b      	negs	r3, r3
   1255a:	4313      	orrs	r3, r2
   1255c:	71a3      	strb	r3, [r4, #6]
   1255e:	2301      	movs	r3, #1
   12560:	9300      	str	r3, [sp, #0]
   12562:	e0ad      	b.n	126c0 <f_write+0x210>
   12564:	79a2      	ldrb	r2, [r4, #6]
   12566:	2380      	movs	r3, #128	; 0x80
   12568:	425b      	negs	r3, r3
   1256a:	4313      	orrs	r3, r2
   1256c:	71a3      	strb	r3, [r4, #6]
   1256e:	2302      	movs	r3, #2
   12570:	9300      	str	r3, [sp, #0]
   12572:	e0a5      	b.n	126c0 <f_write+0x210>
   12574:	79a2      	ldrb	r2, [r4, #6]
   12576:	2380      	movs	r3, #128	; 0x80
   12578:	425b      	negs	r3, r3
   1257a:	4313      	orrs	r3, r2
   1257c:	71a3      	strb	r3, [r4, #6]
   1257e:	2301      	movs	r3, #1
   12580:	9300      	str	r3, [sp, #0]
   12582:	e09d      	b.n	126c0 <f_write+0x210>
   12584:	0240      	lsls	r0, r0, #9
   12586:	1839      	adds	r1, r7, r0
   12588:	3330      	adds	r3, #48	; 0x30
   1258a:	0018      	movs	r0, r3
   1258c:	2280      	movs	r2, #128	; 0x80
   1258e:	0092      	lsls	r2, r2, #2
   12590:	4b52      	ldr	r3, [pc, #328]	; (126dc <f_write+0x22c>)
   12592:	4798      	blx	r3
   12594:	2300      	movs	r3, #0
   12596:	6822      	ldr	r2, [r4, #0]
   12598:	7113      	strb	r3, [r2, #4]
   1259a:	e072      	b.n	12682 <f_write+0x1d2>
   1259c:	68a3      	ldr	r3, [r4, #8]
   1259e:	68e2      	ldr	r2, [r4, #12]
   125a0:	4293      	cmp	r3, r2
   125a2:	d271      	bcs.n	12688 <f_write+0x1d8>
   125a4:	4643      	mov	r3, r8
   125a6:	61a3      	str	r3, [r4, #24]
   125a8:	68a3      	ldr	r3, [r4, #8]
   125aa:	05dd      	lsls	r5, r3, #23
   125ac:	0ded      	lsrs	r5, r5, #23
   125ae:	2380      	movs	r3, #128	; 0x80
   125b0:	009b      	lsls	r3, r3, #2
   125b2:	1b5d      	subs	r5, r3, r5
   125b4:	42b5      	cmp	r5, r6
   125b6:	d900      	bls.n	125ba <f_write+0x10a>
   125b8:	0035      	movs	r5, r6
   125ba:	69a1      	ldr	r1, [r4, #24]
   125bc:	6820      	ldr	r0, [r4, #0]
   125be:	4b46      	ldr	r3, [pc, #280]	; (126d8 <f_write+0x228>)
   125c0:	4798      	blx	r3
   125c2:	2800      	cmp	r0, #0
   125c4:	d172      	bne.n	126ac <f_write+0x1fc>
   125c6:	68a3      	ldr	r3, [r4, #8]
   125c8:	05d8      	lsls	r0, r3, #23
   125ca:	0dc0      	lsrs	r0, r0, #23
   125cc:	3030      	adds	r0, #48	; 0x30
   125ce:	6823      	ldr	r3, [r4, #0]
   125d0:	469c      	mov	ip, r3
   125d2:	4460      	add	r0, ip
   125d4:	002a      	movs	r2, r5
   125d6:	0039      	movs	r1, r7
   125d8:	4b40      	ldr	r3, [pc, #256]	; (126dc <f_write+0x22c>)
   125da:	4798      	blx	r3
   125dc:	2301      	movs	r3, #1
   125de:	6822      	ldr	r2, [r4, #0]
   125e0:	7113      	strb	r3, [r2, #4]
   125e2:	197f      	adds	r7, r7, r5
   125e4:	68a3      	ldr	r3, [r4, #8]
   125e6:	195b      	adds	r3, r3, r5
   125e8:	60a3      	str	r3, [r4, #8]
   125ea:	464b      	mov	r3, r9
   125ec:	681b      	ldr	r3, [r3, #0]
   125ee:	195b      	adds	r3, r3, r5
   125f0:	464a      	mov	r2, r9
   125f2:	6013      	str	r3, [r2, #0]
   125f4:	1b76      	subs	r6, r6, r5
   125f6:	d090      	beq.n	1251a <f_write+0x6a>
   125f8:	68a3      	ldr	r3, [r4, #8]
   125fa:	05da      	lsls	r2, r3, #23
   125fc:	d1d4      	bne.n	125a8 <f_write+0xf8>
   125fe:	6820      	ldr	r0, [r4, #0]
   12600:	7882      	ldrb	r2, [r0, #2]
   12602:	3a01      	subs	r2, #1
   12604:	0a5d      	lsrs	r5, r3, #9
   12606:	4015      	ands	r5, r2
   12608:	b2ed      	uxtb	r5, r5
   1260a:	2d00      	cmp	r5, #0
   1260c:	d10b      	bne.n	12626 <f_write+0x176>
   1260e:	2b00      	cmp	r3, #0
   12610:	d000      	beq.n	12614 <f_write+0x164>
   12612:	e77b      	b.n	1250c <f_write+0x5c>
   12614:	6923      	ldr	r3, [r4, #16]
   12616:	2b00      	cmp	r3, #0
   12618:	d100      	bne.n	1261c <f_write+0x16c>
   1261a:	e771      	b.n	12500 <f_write+0x50>
   1261c:	2b01      	cmp	r3, #1
   1261e:	d086      	beq.n	1252e <f_write+0x7e>
   12620:	1c5a      	adds	r2, r3, #1
   12622:	d08b      	beq.n	1253c <f_write+0x8c>
   12624:	6163      	str	r3, [r4, #20]
   12626:	6820      	ldr	r0, [r4, #0]
   12628:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1262a:	69a2      	ldr	r2, [r4, #24]
   1262c:	4293      	cmp	r3, r2
   1262e:	d08c      	beq.n	1254a <f_write+0x9a>
   12630:	6823      	ldr	r3, [r4, #0]
   12632:	469a      	mov	sl, r3
   12634:	6961      	ldr	r1, [r4, #20]
   12636:	0018      	movs	r0, r3
   12638:	4b29      	ldr	r3, [pc, #164]	; (126e0 <f_write+0x230>)
   1263a:	4798      	blx	r3
   1263c:	2800      	cmp	r0, #0
   1263e:	d091      	beq.n	12564 <f_write+0xb4>
   12640:	4680      	mov	r8, r0
   12642:	44a8      	add	r8, r5
   12644:	0a73      	lsrs	r3, r6, #9
   12646:	469b      	mov	fp, r3
   12648:	d0a8      	beq.n	1259c <f_write+0xec>
   1264a:	4653      	mov	r3, sl
   1264c:	789b      	ldrb	r3, [r3, #2]
   1264e:	465a      	mov	r2, fp
   12650:	18aa      	adds	r2, r5, r2
   12652:	429a      	cmp	r2, r3
   12654:	d901      	bls.n	1265a <f_write+0x1aa>
   12656:	1b5b      	subs	r3, r3, r5
   12658:	469b      	mov	fp, r3
   1265a:	465b      	mov	r3, fp
   1265c:	466a      	mov	r2, sp
   1265e:	71d3      	strb	r3, [r2, #7]
   12660:	79d3      	ldrb	r3, [r2, #7]
   12662:	4652      	mov	r2, sl
   12664:	7850      	ldrb	r0, [r2, #1]
   12666:	4642      	mov	r2, r8
   12668:	0039      	movs	r1, r7
   1266a:	4d1e      	ldr	r5, [pc, #120]	; (126e4 <f_write+0x234>)
   1266c:	47a8      	blx	r5
   1266e:	2800      	cmp	r0, #0
   12670:	d000      	beq.n	12674 <f_write+0x1c4>
   12672:	e77f      	b.n	12574 <f_write+0xc4>
   12674:	6823      	ldr	r3, [r4, #0]
   12676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12678:	4641      	mov	r1, r8
   1267a:	1a50      	subs	r0, r2, r1
   1267c:	4583      	cmp	fp, r0
   1267e:	d900      	bls.n	12682 <f_write+0x1d2>
   12680:	e780      	b.n	12584 <f_write+0xd4>
   12682:	465b      	mov	r3, fp
   12684:	025d      	lsls	r5, r3, #9
   12686:	e7ac      	b.n	125e2 <f_write+0x132>
   12688:	2100      	movs	r1, #0
   1268a:	4650      	mov	r0, sl
   1268c:	4b12      	ldr	r3, [pc, #72]	; (126d8 <f_write+0x228>)
   1268e:	4798      	blx	r3
   12690:	2800      	cmp	r0, #0
   12692:	d103      	bne.n	1269c <f_write+0x1ec>
   12694:	6823      	ldr	r3, [r4, #0]
   12696:	4642      	mov	r2, r8
   12698:	62da      	str	r2, [r3, #44]	; 0x2c
   1269a:	e783      	b.n	125a4 <f_write+0xf4>
   1269c:	79a2      	ldrb	r2, [r4, #6]
   1269e:	2380      	movs	r3, #128	; 0x80
   126a0:	425b      	negs	r3, r3
   126a2:	4313      	orrs	r3, r2
   126a4:	71a3      	strb	r3, [r4, #6]
   126a6:	2301      	movs	r3, #1
   126a8:	9300      	str	r3, [sp, #0]
   126aa:	e009      	b.n	126c0 <f_write+0x210>
   126ac:	79a2      	ldrb	r2, [r4, #6]
   126ae:	2380      	movs	r3, #128	; 0x80
   126b0:	425b      	negs	r3, r3
   126b2:	4313      	orrs	r3, r2
   126b4:	71a3      	strb	r3, [r4, #6]
   126b6:	2301      	movs	r3, #1
   126b8:	9300      	str	r3, [sp, #0]
   126ba:	e001      	b.n	126c0 <f_write+0x210>
   126bc:	2302      	movs	r3, #2
   126be:	9300      	str	r3, [sp, #0]
   126c0:	9800      	ldr	r0, [sp, #0]
   126c2:	b003      	add	sp, #12
   126c4:	bc3c      	pop	{r2, r3, r4, r5}
   126c6:	4690      	mov	r8, r2
   126c8:	4699      	mov	r9, r3
   126ca:	46a2      	mov	sl, r4
   126cc:	46ab      	mov	fp, r5
   126ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   126d0:	00010c89 	.word	0x00010c89
   126d4:	00011489 	.word	0x00011489
   126d8:	0001110d 	.word	0x0001110d
   126dc:	00010c2d 	.word	0x00010c2d
   126e0:	00010c53 	.word	0x00010c53
   126e4:	00010aed 	.word	0x00010aed

000126e8 <f_sync>:
   126e8:	b570      	push	{r4, r5, r6, lr}
   126ea:	0004      	movs	r4, r0
   126ec:	8881      	ldrh	r1, [r0, #4]
   126ee:	6800      	ldr	r0, [r0, #0]
   126f0:	4b1c      	ldr	r3, [pc, #112]	; (12764 <f_sync+0x7c>)
   126f2:	4798      	blx	r3
   126f4:	2800      	cmp	r0, #0
   126f6:	d102      	bne.n	126fe <f_sync+0x16>
   126f8:	79a3      	ldrb	r3, [r4, #6]
   126fa:	069b      	lsls	r3, r3, #26
   126fc:	d400      	bmi.n	12700 <f_sync+0x18>
   126fe:	bd70      	pop	{r4, r5, r6, pc}
   12700:	69e1      	ldr	r1, [r4, #28]
   12702:	6820      	ldr	r0, [r4, #0]
   12704:	4b18      	ldr	r3, [pc, #96]	; (12768 <f_sync+0x80>)
   12706:	4798      	blx	r3
   12708:	2800      	cmp	r0, #0
   1270a:	d1f8      	bne.n	126fe <f_sync+0x16>
   1270c:	6a25      	ldr	r5, [r4, #32]
   1270e:	7aeb      	ldrb	r3, [r5, #11]
   12710:	2220      	movs	r2, #32
   12712:	4313      	orrs	r3, r2
   12714:	72eb      	strb	r3, [r5, #11]
   12716:	7b23      	ldrb	r3, [r4, #12]
   12718:	772b      	strb	r3, [r5, #28]
   1271a:	89a3      	ldrh	r3, [r4, #12]
   1271c:	0a1b      	lsrs	r3, r3, #8
   1271e:	776b      	strb	r3, [r5, #29]
   12720:	89e3      	ldrh	r3, [r4, #14]
   12722:	77ab      	strb	r3, [r5, #30]
   12724:	7be3      	ldrb	r3, [r4, #15]
   12726:	77eb      	strb	r3, [r5, #31]
   12728:	7c23      	ldrb	r3, [r4, #16]
   1272a:	76ab      	strb	r3, [r5, #26]
   1272c:	8a23      	ldrh	r3, [r4, #16]
   1272e:	0a1b      	lsrs	r3, r3, #8
   12730:	76eb      	strb	r3, [r5, #27]
   12732:	8a63      	ldrh	r3, [r4, #18]
   12734:	752b      	strb	r3, [r5, #20]
   12736:	8a63      	ldrh	r3, [r4, #18]
   12738:	0a1b      	lsrs	r3, r3, #8
   1273a:	756b      	strb	r3, [r5, #21]
   1273c:	4b0b      	ldr	r3, [pc, #44]	; (1276c <f_sync+0x84>)
   1273e:	4798      	blx	r3
   12740:	75a8      	strb	r0, [r5, #22]
   12742:	0a03      	lsrs	r3, r0, #8
   12744:	75eb      	strb	r3, [r5, #23]
   12746:	0c03      	lsrs	r3, r0, #16
   12748:	762b      	strb	r3, [r5, #24]
   1274a:	0e00      	lsrs	r0, r0, #24
   1274c:	7668      	strb	r0, [r5, #25]
   1274e:	79a3      	ldrb	r3, [r4, #6]
   12750:	2220      	movs	r2, #32
   12752:	4393      	bics	r3, r2
   12754:	71a3      	strb	r3, [r4, #6]
   12756:	2301      	movs	r3, #1
   12758:	6822      	ldr	r2, [r4, #0]
   1275a:	7113      	strb	r3, [r2, #4]
   1275c:	6820      	ldr	r0, [r4, #0]
   1275e:	4b04      	ldr	r3, [pc, #16]	; (12770 <f_sync+0x88>)
   12760:	4798      	blx	r3
   12762:	e7cc      	b.n	126fe <f_sync+0x16>
   12764:	00010c89 	.word	0x00010c89
   12768:	0001110d 	.word	0x0001110d
   1276c:	00010bdd 	.word	0x00010bdd
   12770:	00011d0d 	.word	0x00011d0d

00012774 <f_close>:
   12774:	b510      	push	{r4, lr}
   12776:	0004      	movs	r4, r0
   12778:	4b03      	ldr	r3, [pc, #12]	; (12788 <f_close+0x14>)
   1277a:	4798      	blx	r3
   1277c:	2800      	cmp	r0, #0
   1277e:	d101      	bne.n	12784 <f_close+0x10>
   12780:	2300      	movs	r3, #0
   12782:	6023      	str	r3, [r4, #0]
   12784:	bd10      	pop	{r4, pc}
   12786:	46c0      	nop			; (mov r8, r8)
   12788:	000126e9 	.word	0x000126e9

0001278c <f_unlink>:
   1278c:	b510      	push	{r4, lr}
   1278e:	4c2c      	ldr	r4, [pc, #176]	; (12840 <f_unlink+0xb4>)
   12790:	44a5      	add	sp, r4
   12792:	9001      	str	r0, [sp, #4]
   12794:	2201      	movs	r2, #1
   12796:	a98f      	add	r1, sp, #572	; 0x23c
   12798:	a801      	add	r0, sp, #4
   1279a:	4b2a      	ldr	r3, [pc, #168]	; (12844 <f_unlink+0xb8>)
   1279c:	4798      	blx	r3
   1279e:	2800      	cmp	r0, #0
   127a0:	d003      	beq.n	127aa <f_unlink+0x1e>
   127a2:	2398      	movs	r3, #152	; 0x98
   127a4:	009b      	lsls	r3, r3, #2
   127a6:	449d      	add	sp, r3
   127a8:	bd10      	pop	{r4, pc}
   127aa:	ab83      	add	r3, sp, #524	; 0x20c
   127ac:	9395      	str	r3, [sp, #596]	; 0x254
   127ae:	ab03      	add	r3, sp, #12
   127b0:	9396      	str	r3, [sp, #600]	; 0x258
   127b2:	9901      	ldr	r1, [sp, #4]
   127b4:	a88f      	add	r0, sp, #572	; 0x23c
   127b6:	4b24      	ldr	r3, [pc, #144]	; (12848 <f_unlink+0xbc>)
   127b8:	4798      	blx	r3
   127ba:	2800      	cmp	r0, #0
   127bc:	d1f1      	bne.n	127a2 <f_unlink+0x16>
   127be:	9b94      	ldr	r3, [sp, #592]	; 0x250
   127c0:	2b00      	cmp	r3, #0
   127c2:	d039      	beq.n	12838 <f_unlink+0xac>
   127c4:	7ada      	ldrb	r2, [r3, #11]
   127c6:	3007      	adds	r0, #7
   127c8:	07d2      	lsls	r2, r2, #31
   127ca:	d4ea      	bmi.n	127a2 <f_unlink+0x16>
   127cc:	7d5a      	ldrb	r2, [r3, #21]
   127ce:	0212      	lsls	r2, r2, #8
   127d0:	7d1c      	ldrb	r4, [r3, #20]
   127d2:	4314      	orrs	r4, r2
   127d4:	0424      	lsls	r4, r4, #16
   127d6:	7ed9      	ldrb	r1, [r3, #27]
   127d8:	0209      	lsls	r1, r1, #8
   127da:	7e9a      	ldrb	r2, [r3, #26]
   127dc:	430a      	orrs	r2, r1
   127de:	4314      	orrs	r4, r2
   127e0:	7adb      	ldrb	r3, [r3, #11]
   127e2:	06db      	lsls	r3, r3, #27
   127e4:	d40a      	bmi.n	127fc <f_unlink+0x70>
   127e6:	a88f      	add	r0, sp, #572	; 0x23c
   127e8:	4b18      	ldr	r3, [pc, #96]	; (1284c <f_unlink+0xc0>)
   127ea:	4798      	blx	r3
   127ec:	2800      	cmp	r0, #0
   127ee:	d1d8      	bne.n	127a2 <f_unlink+0x16>
   127f0:	2c00      	cmp	r4, #0
   127f2:	d11a      	bne.n	1282a <f_unlink+0x9e>
   127f4:	988f      	ldr	r0, [sp, #572]	; 0x23c
   127f6:	4b16      	ldr	r3, [pc, #88]	; (12850 <f_unlink+0xc4>)
   127f8:	4798      	blx	r3
   127fa:	e7d2      	b.n	127a2 <f_unlink+0x16>
   127fc:	2002      	movs	r0, #2
   127fe:	2c01      	cmp	r4, #1
   12800:	d9cf      	bls.n	127a2 <f_unlink+0x16>
   12802:	2224      	movs	r2, #36	; 0x24
   12804:	a98f      	add	r1, sp, #572	; 0x23c
   12806:	a886      	add	r0, sp, #536	; 0x218
   12808:	4b12      	ldr	r3, [pc, #72]	; (12854 <f_unlink+0xc8>)
   1280a:	4798      	blx	r3
   1280c:	9488      	str	r4, [sp, #544]	; 0x220
   1280e:	2102      	movs	r1, #2
   12810:	a886      	add	r0, sp, #536	; 0x218
   12812:	4b11      	ldr	r3, [pc, #68]	; (12858 <f_unlink+0xcc>)
   12814:	4798      	blx	r3
   12816:	2800      	cmp	r0, #0
   12818:	d1c3      	bne.n	127a2 <f_unlink+0x16>
   1281a:	a886      	add	r0, sp, #536	; 0x218
   1281c:	4b0f      	ldr	r3, [pc, #60]	; (1285c <f_unlink+0xd0>)
   1281e:	4798      	blx	r3
   12820:	2800      	cmp	r0, #0
   12822:	d00b      	beq.n	1283c <f_unlink+0xb0>
   12824:	2804      	cmp	r0, #4
   12826:	d0de      	beq.n	127e6 <f_unlink+0x5a>
   12828:	e7bb      	b.n	127a2 <f_unlink+0x16>
   1282a:	0021      	movs	r1, r4
   1282c:	988f      	ldr	r0, [sp, #572]	; 0x23c
   1282e:	4b0c      	ldr	r3, [pc, #48]	; (12860 <f_unlink+0xd4>)
   12830:	4798      	blx	r3
   12832:	2800      	cmp	r0, #0
   12834:	d1b5      	bne.n	127a2 <f_unlink+0x16>
   12836:	e7dd      	b.n	127f4 <f_unlink+0x68>
   12838:	2006      	movs	r0, #6
   1283a:	e7b2      	b.n	127a2 <f_unlink+0x16>
   1283c:	2007      	movs	r0, #7
   1283e:	e7b0      	b.n	127a2 <f_unlink+0x16>
   12840:	fffffda0 	.word	0xfffffda0
   12844:	00010d5d 	.word	0x00010d5d
   12848:	00011e01 	.word	0x00011e01
   1284c:	00011ca5 	.word	0x00011ca5
   12850:	00011d0d 	.word	0x00011d0d
   12854:	00010c2d 	.word	0x00010c2d
   12858:	000112a9 	.word	0x000112a9
   1285c:	00011b65 	.word	0x00011b65
   12860:	0001154d 	.word	0x0001154d

00012864 <f_gets>:
   12864:	b5f0      	push	{r4, r5, r6, r7, lr}
   12866:	46c6      	mov	lr, r8
   12868:	b500      	push	{lr}
   1286a:	b084      	sub	sp, #16
   1286c:	0007      	movs	r7, r0
   1286e:	9201      	str	r2, [sp, #4]
   12870:	0005      	movs	r5, r0
   12872:	2400      	movs	r4, #0
   12874:	1e4b      	subs	r3, r1, #1
   12876:	4698      	mov	r8, r3
   12878:	4e0e      	ldr	r6, [pc, #56]	; (128b4 <f_gets+0x50>)
   1287a:	4544      	cmp	r4, r8
   1287c:	da0e      	bge.n	1289c <f_gets+0x38>
   1287e:	ab02      	add	r3, sp, #8
   12880:	2201      	movs	r2, #1
   12882:	a903      	add	r1, sp, #12
   12884:	9801      	ldr	r0, [sp, #4]
   12886:	47b0      	blx	r6
   12888:	9b02      	ldr	r3, [sp, #8]
   1288a:	2b01      	cmp	r3, #1
   1288c:	d106      	bne.n	1289c <f_gets+0x38>
   1288e:	ab03      	add	r3, sp, #12
   12890:	781b      	ldrb	r3, [r3, #0]
   12892:	3501      	adds	r5, #1
   12894:	553b      	strb	r3, [r7, r4]
   12896:	3401      	adds	r4, #1
   12898:	2b0a      	cmp	r3, #10
   1289a:	d1ee      	bne.n	1287a <f_gets+0x16>
   1289c:	2300      	movs	r3, #0
   1289e:	702b      	strb	r3, [r5, #0]
   128a0:	1e63      	subs	r3, r4, #1
   128a2:	419c      	sbcs	r4, r3
   128a4:	4264      	negs	r4, r4
   128a6:	4027      	ands	r7, r4
   128a8:	0038      	movs	r0, r7
   128aa:	b004      	add	sp, #16
   128ac:	bc04      	pop	{r2}
   128ae:	4690      	mov	r8, r2
   128b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   128b2:	46c0      	nop			; (mov r8, r8)
   128b4:	000122fd 	.word	0x000122fd

000128b8 <ff_convert>:
   128b8:	0003      	movs	r3, r0
   128ba:	287f      	cmp	r0, #127	; 0x7f
   128bc:	d911      	bls.n	128e2 <ff_convert+0x2a>
   128be:	2900      	cmp	r1, #0
   128c0:	d111      	bne.n	128e6 <ff_convert+0x2e>
   128c2:	28c7      	cmp	r0, #199	; 0xc7
   128c4:	d017      	beq.n	128f6 <ff_convert+0x3e>
   128c6:	4a0d      	ldr	r2, [pc, #52]	; (128fc <ff_convert+0x44>)
   128c8:	3202      	adds	r2, #2
   128ca:	2301      	movs	r3, #1
   128cc:	8811      	ldrh	r1, [r2, #0]
   128ce:	4281      	cmp	r1, r0
   128d0:	d004      	beq.n	128dc <ff_convert+0x24>
   128d2:	3301      	adds	r3, #1
   128d4:	b29b      	uxth	r3, r3
   128d6:	3202      	adds	r2, #2
   128d8:	2b80      	cmp	r3, #128	; 0x80
   128da:	d1f7      	bne.n	128cc <ff_convert+0x14>
   128dc:	3380      	adds	r3, #128	; 0x80
   128de:	20ff      	movs	r0, #255	; 0xff
   128e0:	4003      	ands	r3, r0
   128e2:	0018      	movs	r0, r3
   128e4:	4770      	bx	lr
   128e6:	2300      	movs	r3, #0
   128e8:	28ff      	cmp	r0, #255	; 0xff
   128ea:	d8fa      	bhi.n	128e2 <ff_convert+0x2a>
   128ec:	3880      	subs	r0, #128	; 0x80
   128ee:	0040      	lsls	r0, r0, #1
   128f0:	4b02      	ldr	r3, [pc, #8]	; (128fc <ff_convert+0x44>)
   128f2:	5ac3      	ldrh	r3, [r0, r3]
   128f4:	e7f5      	b.n	128e2 <ff_convert+0x2a>
   128f6:	2300      	movs	r3, #0
   128f8:	e7f0      	b.n	128dc <ff_convert+0x24>
   128fa:	46c0      	nop			; (mov r8, r8)
   128fc:	00019f5c 	.word	0x00019f5c

00012900 <ff_wtoupper>:
   12900:	2861      	cmp	r0, #97	; 0x61
   12902:	d014      	beq.n	1292e <ff_wtoupper+0x2e>
   12904:	4b0b      	ldr	r3, [pc, #44]	; (12934 <ff_wtoupper+0x34>)
   12906:	3304      	adds	r3, #4
   12908:	2101      	movs	r1, #1
   1290a:	2262      	movs	r2, #98	; 0x62
   1290c:	4290      	cmp	r0, r2
   1290e:	d007      	beq.n	12920 <ff_wtoupper+0x20>
   12910:	3101      	adds	r1, #1
   12912:	3302      	adds	r3, #2
   12914:	1e9a      	subs	r2, r3, #2
   12916:	8812      	ldrh	r2, [r2, #0]
   12918:	2a00      	cmp	r2, #0
   1291a:	d1f7      	bne.n	1290c <ff_wtoupper+0xc>
   1291c:	0003      	movs	r3, r0
   1291e:	e004      	b.n	1292a <ff_wtoupper+0x2a>
   12920:	1e03      	subs	r3, r0, #0
   12922:	d002      	beq.n	1292a <ff_wtoupper+0x2a>
   12924:	0049      	lsls	r1, r1, #1
   12926:	4b04      	ldr	r3, [pc, #16]	; (12938 <ff_wtoupper+0x38>)
   12928:	5acb      	ldrh	r3, [r1, r3]
   1292a:	0018      	movs	r0, r3
   1292c:	4770      	bx	lr
   1292e:	2100      	movs	r1, #0
   12930:	e7f8      	b.n	12924 <ff_wtoupper+0x24>
   12932:	46c0      	nop			; (mov r8, r8)
   12934:	0001a05c 	.word	0x0001a05c
   12938:	0001a23c 	.word	0x0001a23c

0001293c <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   1293c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1293e:	46de      	mov	lr, fp
   12940:	4657      	mov	r7, sl
   12942:	464e      	mov	r6, r9
   12944:	4645      	mov	r5, r8
   12946:	b5e0      	push	{r5, r6, r7, lr}
   12948:	b083      	sub	sp, #12
   1294a:	0007      	movs	r7, r0
   1294c:	4688      	mov	r8, r1
   1294e:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   12950:	2400      	movs	r4, #0
   12952:	2900      	cmp	r1, #0
   12954:	dd18      	ble.n	12988 <sendPacket+0x4c>
   12956:	4b15      	ldr	r3, [pc, #84]	; (129ac <sendPacket+0x70>)
   12958:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1295a:	4b15      	ldr	r3, [pc, #84]	; (129b0 <sendPacket+0x74>)
   1295c:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   1295e:	9801      	ldr	r0, [sp, #4]
   12960:	47d0      	blx	sl
   12962:	2800      	cmp	r0, #0
   12964:	d110      	bne.n	12988 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   12966:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   12968:	68f3      	ldr	r3, [r6, #12]
   1296a:	4699      	mov	r9, r3
   1296c:	693b      	ldr	r3, [r7, #16]
   1296e:	191d      	adds	r5, r3, r4
   12970:	9801      	ldr	r0, [sp, #4]
   12972:	47d8      	blx	fp
   12974:	0003      	movs	r3, r0
   12976:	4642      	mov	r2, r8
   12978:	0029      	movs	r1, r5
   1297a:	0030      	movs	r0, r6
   1297c:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   1297e:	2800      	cmp	r0, #0
   12980:	db02      	blt.n	12988 <sendPacket+0x4c>
            break;
        sent += rc;
   12982:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   12984:	45a0      	cmp	r8, r4
   12986:	dcea      	bgt.n	1295e <sendPacket+0x22>
    }
    if (sent == length)
   12988:	45a0      	cmp	r8, r4
   1298a:	d10c      	bne.n	129a6 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   1298c:	69b9      	ldr	r1, [r7, #24]
   1298e:	0038      	movs	r0, r7
   12990:	3054      	adds	r0, #84	; 0x54
   12992:	4b08      	ldr	r3, [pc, #32]	; (129b4 <sendPacket+0x78>)
   12994:	4798      	blx	r3
        rc = SUCCESS;
   12996:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   12998:	b003      	add	sp, #12
   1299a:	bc3c      	pop	{r2, r3, r4, r5}
   1299c:	4690      	mov	r8, r2
   1299e:	4699      	mov	r9, r3
   129a0:	46a2      	mov	sl, r4
   129a2:	46ab      	mov	fp, r5
   129a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   129a6:	2001      	movs	r0, #1
   129a8:	4240      	negs	r0, r0
    return rc;
   129aa:	e7f5      	b.n	12998 <sendPacket+0x5c>
   129ac:	000132b9 	.word	0x000132b9
   129b0:	000132ed 	.word	0x000132ed
   129b4:	000132d9 	.word	0x000132d9

000129b8 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   129b8:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   129ba:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   129bc:	2100      	movs	r1, #0
   129be:	6241      	str	r1, [r0, #36]	; 0x24
   129c0:	62c1      	str	r1, [r0, #44]	; 0x2c
   129c2:	6341      	str	r1, [r0, #52]	; 0x34
   129c4:	63c1      	str	r1, [r0, #60]	; 0x3c
   129c6:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   129c8:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   129ca:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   129cc:	9b02      	ldr	r3, [sp, #8]
   129ce:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   129d0:	9b03      	ldr	r3, [sp, #12]
   129d2:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   129d4:	9b04      	ldr	r3, [sp, #16]
   129d6:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   129d8:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   129da:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   129dc:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   129de:	2301      	movs	r3, #1
   129e0:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   129e2:	3054      	adds	r0, #84	; 0x54
   129e4:	4b01      	ldr	r3, [pc, #4]	; (129ec <MQTTClientInit+0x34>)
   129e6:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   129e8:	bd10      	pop	{r4, pc}
   129ea:	46c0      	nop			; (mov r8, r8)
   129ec:	00013301 	.word	0x00013301

000129f0 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   129f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   129f2:	46de      	mov	lr, fp
   129f4:	4657      	mov	r7, sl
   129f6:	464e      	mov	r6, r9
   129f8:	4645      	mov	r5, r8
   129fa:	b5e0      	push	{r5, r6, r7, lr}
   129fc:	b085      	sub	sp, #20
   129fe:	4682      	mov	sl, r0
   12a00:	000f      	movs	r7, r1
   12a02:	4691      	mov	r9, r2
   12a04:	0004      	movs	r4, r0
   12a06:	3424      	adds	r4, #36	; 0x24
   12a08:	234c      	movs	r3, #76	; 0x4c
   12a0a:	4453      	add	r3, sl
   12a0c:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   12a0e:	2301      	movs	r3, #1
   12a10:	425b      	negs	r3, r3
   12a12:	9301      	str	r3, [sp, #4]
   12a14:	e056      	b.n	12ac4 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   12a16:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   12a18:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   12a1a:	687a      	ldr	r2, [r7, #4]
   12a1c:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   12a1e:	780a      	ldrb	r2, [r1, #0]
   12a20:	2a00      	cmp	r2, #0
   12a22:	d04a      	beq.n	12aba <deliverMessage+0xca>
   12a24:	42b3      	cmp	r3, r6
   12a26:	d24a      	bcs.n	12abe <deliverMessage+0xce>
   12a28:	3101      	adds	r1, #1
   12a2a:	1e70      	subs	r0, r6, #1
   12a2c:	e008      	b.n	12a40 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   12a2e:	2a2f      	cmp	r2, #47	; 0x2f
   12a30:	d10f      	bne.n	12a52 <deliverMessage+0x62>
        curn++;
   12a32:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   12a34:	780a      	ldrb	r2, [r1, #0]
   12a36:	2a00      	cmp	r2, #0
   12a38:	d03f      	beq.n	12aba <deliverMessage+0xca>
   12a3a:	429e      	cmp	r6, r3
   12a3c:	d93f      	bls.n	12abe <deliverMessage+0xce>
   12a3e:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   12a40:	781d      	ldrb	r5, [r3, #0]
   12a42:	2d2f      	cmp	r5, #47	; 0x2f
   12a44:	d0f3      	beq.n	12a2e <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   12a46:	2a2b      	cmp	r2, #43	; 0x2b
   12a48:	d008      	beq.n	12a5c <deliverMessage+0x6c>
   12a4a:	2a23      	cmp	r2, #35	; 0x23
   12a4c:	d013      	beq.n	12a76 <deliverMessage+0x86>
   12a4e:	4295      	cmp	r5, r2
   12a50:	d0ef      	beq.n	12a32 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   12a52:	429e      	cmp	r6, r3
   12a54:	d133      	bne.n	12abe <deliverMessage+0xce>
   12a56:	2a00      	cmp	r2, #0
   12a58:	d03d      	beq.n	12ad6 <deliverMessage+0xe6>
   12a5a:	e030      	b.n	12abe <deliverMessage+0xce>
            char* nextpos = curn + 1;
   12a5c:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   12a5e:	42ae      	cmp	r6, r5
   12a60:	d927      	bls.n	12ab2 <deliverMessage+0xc2>
   12a62:	785a      	ldrb	r2, [r3, #1]
   12a64:	2a2f      	cmp	r2, #47	; 0x2f
   12a66:	d01f      	beq.n	12aa8 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   12a68:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   12a6a:	4283      	cmp	r3, r0
   12a6c:	d0e1      	beq.n	12a32 <deliverMessage+0x42>
   12a6e:	785a      	ldrb	r2, [r3, #1]
   12a70:	2a2f      	cmp	r2, #47	; 0x2f
   12a72:	d1f9      	bne.n	12a68 <deliverMessage+0x78>
   12a74:	e7dd      	b.n	12a32 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   12a76:	1e73      	subs	r3, r6, #1
   12a78:	e7db      	b.n	12a32 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   12a7a:	9b01      	ldr	r3, [sp, #4]
   12a7c:	3301      	adds	r3, #1
   12a7e:	d007      	beq.n	12a90 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   12a80:	9801      	ldr	r0, [sp, #4]
   12a82:	b005      	add	sp, #20
   12a84:	bc3c      	pop	{r2, r3, r4, r5}
   12a86:	4690      	mov	r8, r2
   12a88:	4699      	mov	r9, r3
   12a8a:	46a2      	mov	sl, r4
   12a8c:	46ab      	mov	fp, r5
   12a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   12a90:	4653      	mov	r3, sl
   12a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12a94:	2b00      	cmp	r3, #0
   12a96:	d0f3      	beq.n	12a80 <deliverMessage+0x90>
    md->topicName = aTopicName;
   12a98:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   12a9a:	464a      	mov	r2, r9
   12a9c:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   12a9e:	a802      	add	r0, sp, #8
   12aa0:	4798      	blx	r3
        rc = SUCCESS;
   12aa2:	2300      	movs	r3, #0
   12aa4:	9301      	str	r3, [sp, #4]
    return rc;
   12aa6:	e7eb      	b.n	12a80 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   12aa8:	780a      	ldrb	r2, [r1, #0]
   12aaa:	2a00      	cmp	r2, #0
   12aac:	d007      	beq.n	12abe <deliverMessage+0xce>
        curn++;
   12aae:	002b      	movs	r3, r5
   12ab0:	e7c5      	b.n	12a3e <deliverMessage+0x4e>
   12ab2:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   12ab4:	780a      	ldrb	r2, [r1, #0]
   12ab6:	2a00      	cmp	r2, #0
   12ab8:	d101      	bne.n	12abe <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   12aba:	429e      	cmp	r6, r3
   12abc:	d00b      	beq.n	12ad6 <deliverMessage+0xe6>
   12abe:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12ac0:	4544      	cmp	r4, r8
   12ac2:	d0da      	beq.n	12a7a <deliverMessage+0x8a>
   12ac4:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   12ac6:	6821      	ldr	r1, [r4, #0]
   12ac8:	2900      	cmp	r1, #0
   12aca:	d0f8      	beq.n	12abe <deliverMessage+0xce>
   12acc:	0038      	movs	r0, r7
   12ace:	4b08      	ldr	r3, [pc, #32]	; (12af0 <deliverMessage+0x100>)
   12ad0:	4798      	blx	r3
   12ad2:	2800      	cmp	r0, #0
   12ad4:	d09f      	beq.n	12a16 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   12ad6:	465b      	mov	r3, fp
   12ad8:	685b      	ldr	r3, [r3, #4]
   12ada:	2b00      	cmp	r3, #0
   12adc:	d0ef      	beq.n	12abe <deliverMessage+0xce>
    md->topicName = aTopicName;
   12ade:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   12ae0:	464a      	mov	r2, r9
   12ae2:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   12ae4:	a802      	add	r0, sp, #8
   12ae6:	4798      	blx	r3
                rc = SUCCESS;
   12ae8:	2300      	movs	r3, #0
   12aea:	9301      	str	r3, [sp, #4]
   12aec:	e7e7      	b.n	12abe <deliverMessage+0xce>
   12aee:	46c0      	nop			; (mov r8, r8)
   12af0:	00013bd5 	.word	0x00013bd5

00012af4 <keepalive>:


int keepalive(MQTTClient* c)
{
   12af4:	b510      	push	{r4, lr}
   12af6:	b082      	sub	sp, #8
   12af8:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   12afa:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   12afc:	69a3      	ldr	r3, [r4, #24]
   12afe:	2b00      	cmp	r3, #0
   12b00:	d101      	bne.n	12b06 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   12b02:	b002      	add	sp, #8
   12b04:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   12b06:	0020      	movs	r0, r4
   12b08:	3054      	adds	r0, #84	; 0x54
   12b0a:	4b14      	ldr	r3, [pc, #80]	; (12b5c <keepalive+0x68>)
   12b0c:	4798      	blx	r3
   12b0e:	2800      	cmp	r0, #0
   12b10:	d01d      	beq.n	12b4e <keepalive+0x5a>
        if (!c->ping_outstanding)
   12b12:	7f23      	ldrb	r3, [r4, #28]
   12b14:	2b00      	cmp	r3, #0
   12b16:	d11d      	bne.n	12b54 <keepalive+0x60>
            TimerInit(&timer);
   12b18:	4668      	mov	r0, sp
   12b1a:	4b11      	ldr	r3, [pc, #68]	; (12b60 <keepalive+0x6c>)
   12b1c:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   12b1e:	21fa      	movs	r1, #250	; 0xfa
   12b20:	0089      	lsls	r1, r1, #2
   12b22:	4668      	mov	r0, sp
   12b24:	4b0f      	ldr	r3, [pc, #60]	; (12b64 <keepalive+0x70>)
   12b26:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   12b28:	68a1      	ldr	r1, [r4, #8]
   12b2a:	6920      	ldr	r0, [r4, #16]
   12b2c:	4b0e      	ldr	r3, [pc, #56]	; (12b68 <keepalive+0x74>)
   12b2e:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   12b30:	2800      	cmp	r0, #0
   12b32:	dd09      	ble.n	12b48 <keepalive+0x54>
   12b34:	466a      	mov	r2, sp
   12b36:	0001      	movs	r1, r0
   12b38:	0020      	movs	r0, r4
   12b3a:	4b0c      	ldr	r3, [pc, #48]	; (12b6c <keepalive+0x78>)
   12b3c:	4798      	blx	r3
   12b3e:	2800      	cmp	r0, #0
   12b40:	d1df      	bne.n	12b02 <keepalive+0xe>
                c->ping_outstanding = 1;
   12b42:	2301      	movs	r3, #1
   12b44:	7723      	strb	r3, [r4, #28]
   12b46:	e7dc      	b.n	12b02 <keepalive+0xe>
    int rc = FAILURE;
   12b48:	2001      	movs	r0, #1
   12b4a:	4240      	negs	r0, r0
   12b4c:	e7d9      	b.n	12b02 <keepalive+0xe>
   12b4e:	2001      	movs	r0, #1
   12b50:	4240      	negs	r0, r0
   12b52:	e7d6      	b.n	12b02 <keepalive+0xe>
   12b54:	2001      	movs	r0, #1
   12b56:	4240      	negs	r0, r0
    return rc;
   12b58:	e7d3      	b.n	12b02 <keepalive+0xe>
   12b5a:	46c0      	nop			; (mov r8, r8)
   12b5c:	000132b9 	.word	0x000132b9
   12b60:	00013301 	.word	0x00013301
   12b64:	000132c9 	.word	0x000132c9
   12b68:	000138bd 	.word	0x000138bd
   12b6c:	0001293d 	.word	0x0001293d

00012b70 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   12b70:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b72:	46de      	mov	lr, fp
   12b74:	464f      	mov	r7, r9
   12b76:	4646      	mov	r6, r8
   12b78:	b5c0      	push	{r6, r7, lr}
   12b7a:	b090      	sub	sp, #64	; 0x40
   12b7c:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   12b7e:	6d05      	ldr	r5, [r0, #80]	; 0x50
   12b80:	68ae      	ldr	r6, [r5, #8]
   12b82:	6947      	ldr	r7, [r0, #20]
   12b84:	9107      	str	r1, [sp, #28]
   12b86:	0008      	movs	r0, r1
   12b88:	4b65      	ldr	r3, [pc, #404]	; (12d20 <cycle+0x1b0>)
   12b8a:	4798      	blx	r3
   12b8c:	0003      	movs	r3, r0
   12b8e:	2201      	movs	r2, #1
   12b90:	0039      	movs	r1, r7
   12b92:	0028      	movs	r0, r5
   12b94:	47b0      	blx	r6
   12b96:	0005      	movs	r5, r0
   12b98:	2801      	cmp	r0, #1
   12b9a:	d000      	beq.n	12b9e <cycle+0x2e>
   12b9c:	e0bd      	b.n	12d1a <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   12b9e:	9807      	ldr	r0, [sp, #28]
   12ba0:	4b5f      	ldr	r3, [pc, #380]	; (12d20 <cycle+0x1b0>)
   12ba2:	4798      	blx	r3
   12ba4:	9006      	str	r0, [sp, #24]
   12ba6:	2604      	movs	r6, #4
    *value = 0;
   12ba8:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   12baa:	237f      	movs	r3, #127	; 0x7f
   12bac:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   12bae:	6d20      	ldr	r0, [r4, #80]	; 0x50
   12bb0:	6883      	ldr	r3, [r0, #8]
   12bb2:	4698      	mov	r8, r3
   12bb4:	9b06      	ldr	r3, [sp, #24]
   12bb6:	2201      	movs	r2, #1
   12bb8:	a90c      	add	r1, sp, #48	; 0x30
   12bba:	47c0      	blx	r8
        if (rc != 1)
   12bbc:	2801      	cmp	r0, #1
   12bbe:	d10e      	bne.n	12bde <cycle+0x6e>
        *value += (i & 127) * multiplier;
   12bc0:	ab02      	add	r3, sp, #8
   12bc2:	2228      	movs	r2, #40	; 0x28
   12bc4:	189b      	adds	r3, r3, r2
   12bc6:	781b      	ldrb	r3, [r3, #0]
   12bc8:	465a      	mov	r2, fp
   12bca:	401a      	ands	r2, r3
   12bcc:	436a      	muls	r2, r5
   12bce:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   12bd0:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   12bd2:	b25b      	sxtb	r3, r3
   12bd4:	2b00      	cmp	r3, #0
   12bd6:	da02      	bge.n	12bde <cycle+0x6e>
   12bd8:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   12bda:	2e00      	cmp	r6, #0
   12bdc:	d1e7      	bne.n	12bae <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   12bde:	6963      	ldr	r3, [r4, #20]
   12be0:	1c58      	adds	r0, r3, #1
   12be2:	0039      	movs	r1, r7
   12be4:	4b4f      	ldr	r3, [pc, #316]	; (12d24 <cycle+0x1b4>)
   12be6:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   12be8:	2f00      	cmp	r7, #0
   12bea:	dd10      	ble.n	12c0e <cycle+0x9e>
   12bec:	6d26      	ldr	r6, [r4, #80]	; 0x50
   12bee:	68b3      	ldr	r3, [r6, #8]
   12bf0:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   12bf2:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   12bf4:	6963      	ldr	r3, [r4, #20]
   12bf6:	181d      	adds	r5, r3, r0
   12bf8:	9807      	ldr	r0, [sp, #28]
   12bfa:	4b49      	ldr	r3, [pc, #292]	; (12d20 <cycle+0x1b0>)
   12bfc:	4798      	blx	r3
   12bfe:	0003      	movs	r3, r0
   12c00:	003a      	movs	r2, r7
   12c02:	0029      	movs	r1, r5
   12c04:	0030      	movs	r0, r6
   12c06:	47c8      	blx	r9
   12c08:	42b8      	cmp	r0, r7
   12c0a:	d000      	beq.n	12c0e <cycle+0x9e>
   12c0c:	e085      	b.n	12d1a <cycle+0x1aa>
    header.byte = c->readbuf[0];
   12c0e:	6963      	ldr	r3, [r4, #20]
   12c10:	781d      	ldrb	r5, [r3, #0]
   12c12:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   12c14:	2d05      	cmp	r5, #5
   12c16:	d051      	beq.n	12cbc <cycle+0x14c>
   12c18:	2d0d      	cmp	r5, #13
   12c1a:	d06e      	beq.n	12cfa <cycle+0x18a>
        rc = SUCCESS;
   12c1c:	2600      	movs	r6, #0
    switch (packet_type)
   12c1e:	2d03      	cmp	r5, #3
   12c20:	d16e      	bne.n	12d00 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   12c22:	68e2      	ldr	r2, [r4, #12]
   12c24:	9204      	str	r2, [sp, #16]
   12c26:	9303      	str	r3, [sp, #12]
   12c28:	ab0f      	add	r3, sp, #60	; 0x3c
   12c2a:	9302      	str	r3, [sp, #8]
   12c2c:	ab0e      	add	r3, sp, #56	; 0x38
   12c2e:	9301      	str	r3, [sp, #4]
   12c30:	ab09      	add	r3, sp, #36	; 0x24
   12c32:	9300      	str	r3, [sp, #0]
   12c34:	ab0d      	add	r3, sp, #52	; 0x34
   12c36:	2229      	movs	r2, #41	; 0x29
   12c38:	a902      	add	r1, sp, #8
   12c3a:	468c      	mov	ip, r1
   12c3c:	4462      	add	r2, ip
   12c3e:	a908      	add	r1, sp, #32
   12c40:	202a      	movs	r0, #42	; 0x2a
   12c42:	4460      	add	r0, ip
   12c44:	4e38      	ldr	r6, [pc, #224]	; (12d28 <cycle+0x1b8>)
   12c46:	47b0      	blx	r6
        rc = SUCCESS;
   12c48:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   12c4a:	2801      	cmp	r0, #1
   12c4c:	d15b      	bne.n	12d06 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   12c4e:	ae0c      	add	r6, sp, #48	; 0x30
   12c50:	ab02      	add	r3, sp, #8
   12c52:	7e1b      	ldrb	r3, [r3, #24]
   12c54:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   12c56:	0032      	movs	r2, r6
   12c58:	a909      	add	r1, sp, #36	; 0x24
   12c5a:	0020      	movs	r0, r4
   12c5c:	4b33      	ldr	r3, [pc, #204]	; (12d2c <cycle+0x1bc>)
   12c5e:	4798      	blx	r3
            if (msg.qos != QOS0)
   12c60:	7833      	ldrb	r3, [r6, #0]
   12c62:	2b00      	cmp	r3, #0
   12c64:	d028      	beq.n	12cb8 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   12c66:	2b01      	cmp	r3, #1
   12c68:	d004      	beq.n	12c74 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   12c6a:	2b02      	cmp	r3, #2
   12c6c:	d016      	beq.n	12c9c <cycle+0x12c>
   12c6e:	2601      	movs	r6, #1
   12c70:	4276      	negs	r6, r6
   12c72:	e048      	b.n	12d06 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   12c74:	ab0c      	add	r3, sp, #48	; 0x30
   12c76:	889b      	ldrh	r3, [r3, #4]
   12c78:	9300      	str	r3, [sp, #0]
   12c7a:	2300      	movs	r3, #0
   12c7c:	2204      	movs	r2, #4
   12c7e:	68a1      	ldr	r1, [r4, #8]
   12c80:	6920      	ldr	r0, [r4, #16]
   12c82:	4e2b      	ldr	r6, [pc, #172]	; (12d30 <cycle+0x1c0>)
   12c84:	47b0      	blx	r6
   12c86:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   12c88:	2900      	cmp	r1, #0
   12c8a:	dd12      	ble.n	12cb2 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   12c8c:	9a07      	ldr	r2, [sp, #28]
   12c8e:	0020      	movs	r0, r4
   12c90:	4b28      	ldr	r3, [pc, #160]	; (12d34 <cycle+0x1c4>)
   12c92:	4798      	blx	r3
   12c94:	0006      	movs	r6, r0
                if (rc == FAILURE)
   12c96:	1c43      	adds	r3, r0, #1
   12c98:	d132      	bne.n	12d00 <cycle+0x190>
   12c9a:	e034      	b.n	12d06 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   12c9c:	ab0c      	add	r3, sp, #48	; 0x30
   12c9e:	889b      	ldrh	r3, [r3, #4]
   12ca0:	9300      	str	r3, [sp, #0]
   12ca2:	2300      	movs	r3, #0
   12ca4:	2205      	movs	r2, #5
   12ca6:	68a1      	ldr	r1, [r4, #8]
   12ca8:	6920      	ldr	r0, [r4, #16]
   12caa:	4e21      	ldr	r6, [pc, #132]	; (12d30 <cycle+0x1c0>)
   12cac:	47b0      	blx	r6
   12cae:	0001      	movs	r1, r0
   12cb0:	e7ea      	b.n	12c88 <cycle+0x118>
   12cb2:	2601      	movs	r6, #1
   12cb4:	4276      	negs	r6, r6
   12cb6:	e026      	b.n	12d06 <cycle+0x196>
        rc = SUCCESS;
   12cb8:	2600      	movs	r6, #0
   12cba:	e021      	b.n	12d00 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   12cbc:	68e2      	ldr	r2, [r4, #12]
   12cbe:	9200      	str	r2, [sp, #0]
   12cc0:	aa0c      	add	r2, sp, #48	; 0x30
   12cc2:	a908      	add	r1, sp, #32
   12cc4:	a809      	add	r0, sp, #36	; 0x24
   12cc6:	4e1c      	ldr	r6, [pc, #112]	; (12d38 <cycle+0x1c8>)
   12cc8:	47b0      	blx	r6
   12cca:	2801      	cmp	r0, #1
   12ccc:	d002      	beq.n	12cd4 <cycle+0x164>
   12cce:	2601      	movs	r6, #1
   12cd0:	4276      	negs	r6, r6
   12cd2:	e01b      	b.n	12d0c <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   12cd4:	ab0c      	add	r3, sp, #48	; 0x30
   12cd6:	881b      	ldrh	r3, [r3, #0]
   12cd8:	9300      	str	r3, [sp, #0]
   12cda:	2300      	movs	r3, #0
   12cdc:	2206      	movs	r2, #6
   12cde:	68a1      	ldr	r1, [r4, #8]
   12ce0:	6920      	ldr	r0, [r4, #16]
   12ce2:	4e13      	ldr	r6, [pc, #76]	; (12d30 <cycle+0x1c0>)
   12ce4:	47b0      	blx	r6
   12ce6:	2800      	cmp	r0, #0
   12ce8:	ddf1      	ble.n	12cce <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   12cea:	9a07      	ldr	r2, [sp, #28]
   12cec:	0001      	movs	r1, r0
   12cee:	0020      	movs	r0, r4
   12cf0:	4b10      	ldr	r3, [pc, #64]	; (12d34 <cycle+0x1c4>)
   12cf2:	4798      	blx	r3
   12cf4:	1e06      	subs	r6, r0, #0
   12cf6:	d1ea      	bne.n	12cce <cycle+0x15e>
   12cf8:	e002      	b.n	12d00 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   12cfa:	2300      	movs	r3, #0
   12cfc:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   12cfe:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   12d00:	0020      	movs	r0, r4
   12d02:	4b0e      	ldr	r3, [pc, #56]	; (12d3c <cycle+0x1cc>)
   12d04:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   12d06:	2e00      	cmp	r6, #0
   12d08:	d100      	bne.n	12d0c <cycle+0x19c>
   12d0a:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   12d0c:	0030      	movs	r0, r6
   12d0e:	b010      	add	sp, #64	; 0x40
   12d10:	bc1c      	pop	{r2, r3, r4}
   12d12:	4690      	mov	r8, r2
   12d14:	4699      	mov	r9, r3
   12d16:	46a3      	mov	fp, r4
   12d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12d1a:	4d09      	ldr	r5, [pc, #36]	; (12d40 <cycle+0x1d0>)
        rc = SUCCESS;
   12d1c:	2600      	movs	r6, #0
   12d1e:	e7ef      	b.n	12d00 <cycle+0x190>
   12d20:	000132ed 	.word	0x000132ed
   12d24:	000139d5 	.word	0x000139d5
   12d28:	000138cd 	.word	0x000138cd
   12d2c:	000129f1 	.word	0x000129f1
   12d30:	00013d09 	.word	0x00013d09
   12d34:	0001293d 	.word	0x0001293d
   12d38:	00013965 	.word	0x00013965
   12d3c:	00012af5 	.word	0x00012af5
   12d40:	0000ffff 	.word	0x0000ffff

00012d44 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   12d44:	b570      	push	{r4, r5, r6, lr}
   12d46:	b082      	sub	sp, #8
   12d48:	0005      	movs	r5, r0
   12d4a:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   12d4c:	4668      	mov	r0, sp
   12d4e:	4b0a      	ldr	r3, [pc, #40]	; (12d78 <MQTTYield+0x34>)
   12d50:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   12d52:	0021      	movs	r1, r4
   12d54:	4668      	mov	r0, sp
   12d56:	4b09      	ldr	r3, [pc, #36]	; (12d7c <MQTTYield+0x38>)
   12d58:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   12d5a:	4c09      	ldr	r4, [pc, #36]	; (12d80 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   12d5c:	4e09      	ldr	r6, [pc, #36]	; (12d84 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   12d5e:	4669      	mov	r1, sp
   12d60:	0028      	movs	r0, r5
   12d62:	47a0      	blx	r4
   12d64:	1c43      	adds	r3, r0, #1
   12d66:	d004      	beq.n	12d72 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   12d68:	4668      	mov	r0, sp
   12d6a:	47b0      	blx	r6
   12d6c:	2800      	cmp	r0, #0
   12d6e:	d0f6      	beq.n	12d5e <MQTTYield+0x1a>
    int rc = SUCCESS;
   12d70:	2000      	movs	r0, #0
        
    return rc;
}
   12d72:	b002      	add	sp, #8
   12d74:	bd70      	pop	{r4, r5, r6, pc}
   12d76:	46c0      	nop			; (mov r8, r8)
   12d78:	00013301 	.word	0x00013301
   12d7c:	000132c9 	.word	0x000132c9
   12d80:	00012b71 	.word	0x00012b71
   12d84:	000132b9 	.word	0x000132b9

00012d88 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   12d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d8a:	b083      	sub	sp, #12
   12d8c:	9001      	str	r0, [sp, #4]
   12d8e:	000e      	movs	r6, r1
   12d90:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   12d92:	2401      	movs	r4, #1
   12d94:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   12d96:	4f08      	ldr	r7, [pc, #32]	; (12db8 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   12d98:	4d08      	ldr	r5, [pc, #32]	; (12dbc <waitfor+0x34>)
        if (TimerIsExpired(timer))
   12d9a:	9800      	ldr	r0, [sp, #0]
   12d9c:	47b8      	blx	r7
   12d9e:	2800      	cmp	r0, #0
   12da0:	d106      	bne.n	12db0 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   12da2:	9900      	ldr	r1, [sp, #0]
   12da4:	9801      	ldr	r0, [sp, #4]
   12da6:	47a8      	blx	r5
   12da8:	0004      	movs	r4, r0
   12daa:	42b0      	cmp	r0, r6
   12dac:	d1f5      	bne.n	12d9a <waitfor+0x12>
   12dae:	0034      	movs	r4, r6
    
    return rc;
}
   12db0:	0020      	movs	r0, r4
   12db2:	b003      	add	sp, #12
   12db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12db6:	46c0      	nop			; (mov r8, r8)
   12db8:	000132b9 	.word	0x000132b9
   12dbc:	00012b71 	.word	0x00012b71

00012dc0 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   12dc0:	b530      	push	{r4, r5, lr}
   12dc2:	b09b      	sub	sp, #108	; 0x6c
   12dc4:	0004      	movs	r4, r0
   12dc6:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   12dc8:	2258      	movs	r2, #88	; 0x58
   12dca:	4928      	ldr	r1, [pc, #160]	; (12e6c <MQTTConnect+0xac>)
   12dcc:	a802      	add	r0, sp, #8
   12dce:	4b28      	ldr	r3, [pc, #160]	; (12e70 <MQTTConnect+0xb0>)
   12dd0:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   12dd2:	6a23      	ldr	r3, [r4, #32]
   12dd4:	2b00      	cmp	r3, #0
   12dd6:	d13f      	bne.n	12e58 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   12dd8:	a818      	add	r0, sp, #96	; 0x60
   12dda:	4b26      	ldr	r3, [pc, #152]	; (12e74 <MQTTConnect+0xb4>)
   12ddc:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   12dde:	6861      	ldr	r1, [r4, #4]
   12de0:	a818      	add	r0, sp, #96	; 0x60
   12de2:	4b25      	ldr	r3, [pc, #148]	; (12e78 <MQTTConnect+0xb8>)
   12de4:	4798      	blx	r3

    if (options == 0)
   12de6:	2d00      	cmp	r5, #0
   12de8:	d015      	beq.n	12e16 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   12dea:	8b29      	ldrh	r1, [r5, #24]
   12dec:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   12dee:	0020      	movs	r0, r4
   12df0:	3054      	adds	r0, #84	; 0x54
   12df2:	4b22      	ldr	r3, [pc, #136]	; (12e7c <MQTTConnect+0xbc>)
   12df4:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   12df6:	002a      	movs	r2, r5
   12df8:	68a1      	ldr	r1, [r4, #8]
   12dfa:	6920      	ldr	r0, [r4, #16]
   12dfc:	4b20      	ldr	r3, [pc, #128]	; (12e80 <MQTTConnect+0xc0>)
   12dfe:	4798      	blx	r3
   12e00:	2800      	cmp	r0, #0
   12e02:	dd2c      	ble.n	12e5e <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   12e04:	aa18      	add	r2, sp, #96	; 0x60
   12e06:	0001      	movs	r1, r0
   12e08:	0020      	movs	r0, r4
   12e0a:	4b1e      	ldr	r3, [pc, #120]	; (12e84 <MQTTConnect+0xc4>)
   12e0c:	4798      	blx	r3
   12e0e:	2800      	cmp	r0, #0
   12e10:	d003      	beq.n	12e1a <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   12e12:	b01b      	add	sp, #108	; 0x6c
   12e14:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   12e16:	ad02      	add	r5, sp, #8
   12e18:	e7e7      	b.n	12dea <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   12e1a:	aa18      	add	r2, sp, #96	; 0x60
   12e1c:	2102      	movs	r1, #2
   12e1e:	0020      	movs	r0, r4
   12e20:	4b19      	ldr	r3, [pc, #100]	; (12e88 <MQTTConnect+0xc8>)
   12e22:	4798      	blx	r3
   12e24:	2802      	cmp	r0, #2
   12e26:	d11d      	bne.n	12e64 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   12e28:	466b      	mov	r3, sp
   12e2a:	1d99      	adds	r1, r3, #6
   12e2c:	23ff      	movs	r3, #255	; 0xff
   12e2e:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   12e30:	466b      	mov	r3, sp
   12e32:	1dd8      	adds	r0, r3, #7
   12e34:	2300      	movs	r3, #0
   12e36:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   12e38:	68e3      	ldr	r3, [r4, #12]
   12e3a:	6962      	ldr	r2, [r4, #20]
   12e3c:	4d13      	ldr	r5, [pc, #76]	; (12e8c <MQTTConnect+0xcc>)
   12e3e:	47a8      	blx	r5
   12e40:	2801      	cmp	r0, #1
   12e42:	d002      	beq.n	12e4a <MQTTConnect+0x8a>
            rc = FAILURE;
   12e44:	2001      	movs	r0, #1
   12e46:	4240      	negs	r0, r0
   12e48:	e7e3      	b.n	12e12 <MQTTConnect+0x52>
            rc = connack_rc;
   12e4a:	466b      	mov	r3, sp
   12e4c:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   12e4e:	2800      	cmp	r0, #0
   12e50:	d1df      	bne.n	12e12 <MQTTConnect+0x52>
        c->isconnected = 1;
   12e52:	2301      	movs	r3, #1
   12e54:	6223      	str	r3, [r4, #32]
    return rc;
   12e56:	e7dc      	b.n	12e12 <MQTTConnect+0x52>
    int rc = FAILURE;
   12e58:	2001      	movs	r0, #1
   12e5a:	4240      	negs	r0, r0
   12e5c:	e7d9      	b.n	12e12 <MQTTConnect+0x52>
   12e5e:	2001      	movs	r0, #1
   12e60:	4240      	negs	r0, r0
   12e62:	e7d6      	b.n	12e12 <MQTTConnect+0x52>
        rc = FAILURE;
   12e64:	2001      	movs	r0, #1
   12e66:	4240      	negs	r0, r0
   12e68:	e7d3      	b.n	12e12 <MQTTConnect+0x52>
   12e6a:	46c0      	nop			; (mov r8, r8)
   12e6c:	0001a41c 	.word	0x0001a41c
   12e70:	00016a4d 	.word	0x00016a4d
   12e74:	00013301 	.word	0x00013301
   12e78:	000132c9 	.word	0x000132c9
   12e7c:	000132d9 	.word	0x000132d9
   12e80:	000136d9 	.word	0x000136d9
   12e84:	0001293d 	.word	0x0001293d
   12e88:	00012d89 	.word	0x00012d89
   12e8c:	00013821 	.word	0x00013821

00012e90 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   12e90:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e92:	b091      	sub	sp, #68	; 0x44
   12e94:	0004      	movs	r4, r0
   12e96:	000f      	movs	r7, r1
   12e98:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   12e9a:	2300      	movs	r3, #0
   12e9c:	930c      	str	r3, [sp, #48]	; 0x30
   12e9e:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   12ea0:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   12ea2:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   12ea4:	6a03      	ldr	r3, [r0, #32]
   12ea6:	2b00      	cmp	r3, #0
   12ea8:	d05c      	beq.n	12f64 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   12eaa:	a80e      	add	r0, sp, #56	; 0x38
   12eac:	4b32      	ldr	r3, [pc, #200]	; (12f78 <MQTTSubscribe+0xe8>)
   12eae:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   12eb0:	6861      	ldr	r1, [r4, #4]
   12eb2:	a80e      	add	r0, sp, #56	; 0x38
   12eb4:	4b31      	ldr	r3, [pc, #196]	; (12f7c <MQTTSubscribe+0xec>)
   12eb6:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   12eb8:	6920      	ldr	r0, [r4, #16]
   12eba:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   12ebc:	6823      	ldr	r3, [r4, #0]
   12ebe:	4a30      	ldr	r2, [pc, #192]	; (12f80 <MQTTSubscribe+0xf0>)
   12ec0:	4293      	cmp	r3, r2
   12ec2:	d017      	beq.n	12ef4 <MQTTSubscribe+0x64>
   12ec4:	3301      	adds	r3, #1
   12ec6:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   12ec8:	b29b      	uxth	r3, r3
   12eca:	aa0a      	add	r2, sp, #40	; 0x28
   12ecc:	9202      	str	r2, [sp, #8]
   12ece:	aa0b      	add	r2, sp, #44	; 0x2c
   12ed0:	9201      	str	r2, [sp, #4]
   12ed2:	2201      	movs	r2, #1
   12ed4:	9200      	str	r2, [sp, #0]
   12ed6:	2200      	movs	r2, #0
   12ed8:	4e2a      	ldr	r6, [pc, #168]	; (12f84 <MQTTSubscribe+0xf4>)
   12eda:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   12edc:	2800      	cmp	r0, #0
   12ede:	dd44      	ble.n	12f6a <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   12ee0:	aa0e      	add	r2, sp, #56	; 0x38
   12ee2:	0001      	movs	r1, r0
   12ee4:	0020      	movs	r0, r4
   12ee6:	4b28      	ldr	r3, [pc, #160]	; (12f88 <MQTTSubscribe+0xf8>)
   12ee8:	4798      	blx	r3
   12eea:	1e06      	subs	r6, r0, #0
   12eec:	d004      	beq.n	12ef8 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   12eee:	0030      	movs	r0, r6
   12ef0:	b011      	add	sp, #68	; 0x44
   12ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   12ef4:	2301      	movs	r3, #1
   12ef6:	e7e6      	b.n	12ec6 <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   12ef8:	aa0e      	add	r2, sp, #56	; 0x38
   12efa:	2109      	movs	r1, #9
   12efc:	0020      	movs	r0, r4
   12efe:	4b23      	ldr	r3, [pc, #140]	; (12f8c <MQTTSubscribe+0xfc>)
   12f00:	4798      	blx	r3
   12f02:	2809      	cmp	r0, #9
   12f04:	d134      	bne.n	12f70 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   12f06:	2300      	movs	r3, #0
   12f08:	9308      	str	r3, [sp, #32]
   12f0a:	3b01      	subs	r3, #1
   12f0c:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   12f0e:	68e3      	ldr	r3, [r4, #12]
   12f10:	9301      	str	r3, [sp, #4]
   12f12:	6963      	ldr	r3, [r4, #20]
   12f14:	9300      	str	r3, [sp, #0]
   12f16:	ab09      	add	r3, sp, #36	; 0x24
   12f18:	aa08      	add	r2, sp, #32
   12f1a:	2101      	movs	r1, #1
   12f1c:	300d      	adds	r0, #13
   12f1e:	ad02      	add	r5, sp, #8
   12f20:	46ac      	mov	ip, r5
   12f22:	4460      	add	r0, ip
   12f24:	4d1a      	ldr	r5, [pc, #104]	; (12f90 <MQTTSubscribe+0x100>)
   12f26:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   12f28:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   12f2a:	2801      	cmp	r0, #1
   12f2c:	d00e      	beq.n	12f4c <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   12f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12f30:	2b00      	cmp	r3, #0
   12f32:	d010      	beq.n	12f56 <MQTTSubscribe+0xc6>
   12f34:	0022      	movs	r2, r4
   12f36:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12f38:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   12f3a:	6810      	ldr	r0, [r2, #0]
   12f3c:	2800      	cmp	r0, #0
   12f3e:	d00b      	beq.n	12f58 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12f40:	3301      	adds	r3, #1
   12f42:	3208      	adds	r2, #8
   12f44:	2b05      	cmp	r3, #5
   12f46:	d1f8      	bne.n	12f3a <MQTTSubscribe+0xaa>
   12f48:	000e      	movs	r6, r1
   12f4a:	e7d0      	b.n	12eee <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   12f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   12f4e:	2980      	cmp	r1, #128	; 0x80
   12f50:	d1ed      	bne.n	12f2e <MQTTSubscribe+0x9e>
   12f52:	000e      	movs	r6, r1
   12f54:	e7cb      	b.n	12eee <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   12f56:	0033      	movs	r3, r6
   12f58:	00db      	lsls	r3, r3, #3
   12f5a:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   12f5c:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   12f5e:	9b05      	ldr	r3, [sp, #20]
   12f60:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   12f62:	e7c4      	b.n	12eee <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   12f64:	2601      	movs	r6, #1
   12f66:	4276      	negs	r6, r6
   12f68:	e7c1      	b.n	12eee <MQTTSubscribe+0x5e>
   12f6a:	2601      	movs	r6, #1
   12f6c:	4276      	negs	r6, r6
   12f6e:	e7be      	b.n	12eee <MQTTSubscribe+0x5e>
        rc = FAILURE;
   12f70:	2601      	movs	r6, #1
   12f72:	4276      	negs	r6, r6
    return rc;
   12f74:	e7bb      	b.n	12eee <MQTTSubscribe+0x5e>
   12f76:	46c0      	nop			; (mov r8, r8)
   12f78:	00013301 	.word	0x00013301
   12f7c:	000132c9 	.word	0x000132c9
   12f80:	0000ffff 	.word	0x0000ffff
   12f84:	00013da1 	.word	0x00013da1
   12f88:	0001293d 	.word	0x0001293d
   12f8c:	00012d89 	.word	0x00012d89
   12f90:	00013e55 	.word	0x00013e55

00012f94 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   12f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f96:	b08f      	sub	sp, #60	; 0x3c
   12f98:	0005      	movs	r5, r0
   12f9a:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   12f9c:	2300      	movs	r3, #0
   12f9e:	930a      	str	r3, [sp, #40]	; 0x28
   12fa0:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   12fa2:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   12fa4:	6a03      	ldr	r3, [r0, #32]
   12fa6:	2b00      	cmp	r3, #0
   12fa8:	d062      	beq.n	13070 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   12faa:	a80c      	add	r0, sp, #48	; 0x30
   12fac:	4b36      	ldr	r3, [pc, #216]	; (13088 <MQTTPublish+0xf4>)
   12fae:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   12fb0:	6869      	ldr	r1, [r5, #4]
   12fb2:	a80c      	add	r0, sp, #48	; 0x30
   12fb4:	4b35      	ldr	r3, [pc, #212]	; (1308c <MQTTPublish+0xf8>)
   12fb6:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   12fb8:	7823      	ldrb	r3, [r4, #0]
   12fba:	3b01      	subs	r3, #1
   12fbc:	2b01      	cmp	r3, #1
   12fbe:	d921      	bls.n	13004 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   12fc0:	7823      	ldrb	r3, [r4, #0]
   12fc2:	68e2      	ldr	r2, [r4, #12]
   12fc4:	9206      	str	r2, [sp, #24]
   12fc6:	68a2      	ldr	r2, [r4, #8]
   12fc8:	9205      	str	r2, [sp, #20]
   12fca:	aa09      	add	r2, sp, #36	; 0x24
   12fcc:	a902      	add	r1, sp, #8
   12fce:	cac1      	ldmia	r2!, {r0, r6, r7}
   12fd0:	c1c1      	stmia	r1!, {r0, r6, r7}
   12fd2:	88a2      	ldrh	r2, [r4, #4]
   12fd4:	9201      	str	r2, [sp, #4]
   12fd6:	7862      	ldrb	r2, [r4, #1]
   12fd8:	9200      	str	r2, [sp, #0]
   12fda:	2200      	movs	r2, #0
   12fdc:	68a9      	ldr	r1, [r5, #8]
   12fde:	6928      	ldr	r0, [r5, #16]
   12fe0:	4e2b      	ldr	r6, [pc, #172]	; (13090 <MQTTPublish+0xfc>)
   12fe2:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   12fe4:	2800      	cmp	r0, #0
   12fe6:	dd46      	ble.n	13076 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   12fe8:	aa0c      	add	r2, sp, #48	; 0x30
   12fea:	0001      	movs	r1, r0
   12fec:	0028      	movs	r0, r5
   12fee:	4b29      	ldr	r3, [pc, #164]	; (13094 <MQTTPublish+0x100>)
   12ff0:	4798      	blx	r3
   12ff2:	2800      	cmp	r0, #0
   12ff4:	d104      	bne.n	13000 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   12ff6:	7823      	ldrb	r3, [r4, #0]
   12ff8:	2b01      	cmp	r3, #1
   12ffa:	d00d      	beq.n	13018 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   12ffc:	2b02      	cmp	r3, #2
   12ffe:	d021      	beq.n	13044 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   13000:	b00f      	add	sp, #60	; 0x3c
   13002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   13004:	682b      	ldr	r3, [r5, #0]
   13006:	4a24      	ldr	r2, [pc, #144]	; (13098 <MQTTPublish+0x104>)
   13008:	4293      	cmp	r3, r2
   1300a:	d003      	beq.n	13014 <MQTTPublish+0x80>
   1300c:	3301      	adds	r3, #1
   1300e:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   13010:	80a3      	strh	r3, [r4, #4]
   13012:	e7d5      	b.n	12fc0 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   13014:	2301      	movs	r3, #1
   13016:	e7fa      	b.n	1300e <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   13018:	aa0c      	add	r2, sp, #48	; 0x30
   1301a:	2104      	movs	r1, #4
   1301c:	0028      	movs	r0, r5
   1301e:	4b1f      	ldr	r3, [pc, #124]	; (1309c <MQTTPublish+0x108>)
   13020:	4798      	blx	r3
   13022:	2804      	cmp	r0, #4
   13024:	d12a      	bne.n	1307c <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   13026:	696b      	ldr	r3, [r5, #20]
   13028:	68ea      	ldr	r2, [r5, #12]
   1302a:	9200      	str	r2, [sp, #0]
   1302c:	2222      	movs	r2, #34	; 0x22
   1302e:	446a      	add	r2, sp
   13030:	a908      	add	r1, sp, #32
   13032:	301d      	adds	r0, #29
   13034:	4468      	add	r0, sp
   13036:	4c1a      	ldr	r4, [pc, #104]	; (130a0 <MQTTPublish+0x10c>)
   13038:	47a0      	blx	r4
   1303a:	3801      	subs	r0, #1
   1303c:	1e43      	subs	r3, r0, #1
   1303e:	4198      	sbcs	r0, r3
   13040:	4240      	negs	r0, r0
   13042:	e7dd      	b.n	13000 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   13044:	aa0c      	add	r2, sp, #48	; 0x30
   13046:	2107      	movs	r1, #7
   13048:	0028      	movs	r0, r5
   1304a:	4b14      	ldr	r3, [pc, #80]	; (1309c <MQTTPublish+0x108>)
   1304c:	4798      	blx	r3
   1304e:	2807      	cmp	r0, #7
   13050:	d117      	bne.n	13082 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   13052:	696b      	ldr	r3, [r5, #20]
   13054:	68ea      	ldr	r2, [r5, #12]
   13056:	9200      	str	r2, [sp, #0]
   13058:	2222      	movs	r2, #34	; 0x22
   1305a:	446a      	add	r2, sp
   1305c:	a908      	add	r1, sp, #32
   1305e:	301a      	adds	r0, #26
   13060:	4468      	add	r0, sp
   13062:	4c0f      	ldr	r4, [pc, #60]	; (130a0 <MQTTPublish+0x10c>)
   13064:	47a0      	blx	r4
   13066:	3801      	subs	r0, #1
   13068:	1e43      	subs	r3, r0, #1
   1306a:	4198      	sbcs	r0, r3
   1306c:	4240      	negs	r0, r0
   1306e:	e7c7      	b.n	13000 <MQTTPublish+0x6c>
    int rc = FAILURE;
   13070:	2001      	movs	r0, #1
   13072:	4240      	negs	r0, r0
   13074:	e7c4      	b.n	13000 <MQTTPublish+0x6c>
   13076:	2001      	movs	r0, #1
   13078:	4240      	negs	r0, r0
   1307a:	e7c1      	b.n	13000 <MQTTPublish+0x6c>
            rc = FAILURE;
   1307c:	2001      	movs	r0, #1
   1307e:	4240      	negs	r0, r0
   13080:	e7be      	b.n	13000 <MQTTPublish+0x6c>
            rc = FAILURE;
   13082:	2001      	movs	r0, #1
   13084:	4240      	negs	r0, r0
    return rc;
   13086:	e7bb      	b.n	13000 <MQTTPublish+0x6c>
   13088:	00013301 	.word	0x00013301
   1308c:	000132c9 	.word	0x000132c9
   13090:	00013c41 	.word	0x00013c41
   13094:	0001293d 	.word	0x0001293d
   13098:	0000ffff 	.word	0x0000ffff
   1309c:	00012d89 	.word	0x00012d89
   130a0:	00013965 	.word	0x00013965

000130a4 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   130a4:	b510      	push	{r4, lr}
   130a6:	b082      	sub	sp, #8
   130a8:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   130aa:	4668      	mov	r0, sp
   130ac:	4b0b      	ldr	r3, [pc, #44]	; (130dc <MQTTDisconnect+0x38>)
   130ae:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   130b0:	6861      	ldr	r1, [r4, #4]
   130b2:	4668      	mov	r0, sp
   130b4:	4b0a      	ldr	r3, [pc, #40]	; (130e0 <MQTTDisconnect+0x3c>)
   130b6:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   130b8:	68a1      	ldr	r1, [r4, #8]
   130ba:	6920      	ldr	r0, [r4, #16]
   130bc:	4b09      	ldr	r3, [pc, #36]	; (130e4 <MQTTDisconnect+0x40>)
   130be:	4798      	blx	r3
    if (len > 0)
   130c0:	2800      	cmp	r0, #0
   130c2:	dd08      	ble.n	130d6 <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   130c4:	466a      	mov	r2, sp
   130c6:	0001      	movs	r1, r0
   130c8:	0020      	movs	r0, r4
   130ca:	4b07      	ldr	r3, [pc, #28]	; (130e8 <MQTTDisconnect+0x44>)
   130cc:	4798      	blx	r3
        
    c->isconnected = 0;
   130ce:	2300      	movs	r3, #0
   130d0:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   130d2:	b002      	add	sp, #8
   130d4:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   130d6:	2001      	movs	r0, #1
   130d8:	4240      	negs	r0, r0
   130da:	e7f8      	b.n	130ce <MQTTDisconnect+0x2a>
   130dc:	00013301 	.word	0x00013301
   130e0:	000132c9 	.word	0x000132c9
   130e4:	000138ad 	.word	0x000138ad
   130e8:	0001293d 	.word	0x0001293d

000130ec <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   130ec:	b510      	push	{r4, lr}
   130ee:	0004      	movs	r4, r0
	close(n->socket);
   130f0:	2000      	movs	r0, #0
   130f2:	5620      	ldrsb	r0, [r4, r0]
   130f4:	4b04      	ldr	r3, [pc, #16]	; (13108 <WINC1500_disconnect+0x1c>)
   130f6:	4798      	blx	r3
	n->socket=-1;
   130f8:	2301      	movs	r3, #1
   130fa:	425b      	negs	r3, r3
   130fc:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   130fe:	2200      	movs	r2, #0
   13100:	4b02      	ldr	r3, [pc, #8]	; (1310c <WINC1500_disconnect+0x20>)
   13102:	701a      	strb	r2, [r3, #0]
}
   13104:	bd10      	pop	{r4, pc}
   13106:	46c0      	nop			; (mov r8, r8)
   13108:	0000de45 	.word	0x0000de45
   1310c:	20000474 	.word	0x20000474

00013110 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   13110:	b570      	push	{r4, r5, r6, lr}
   13112:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   13114:	2200      	movs	r2, #0
   13116:	4b0d      	ldr	r3, [pc, #52]	; (1314c <WINC1500_write+0x3c>)
   13118:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   1311a:	b2b2      	uxth	r2, r6
   1311c:	7800      	ldrb	r0, [r0, #0]
   1311e:	b240      	sxtb	r0, r0
   13120:	2300      	movs	r3, #0
   13122:	4c0b      	ldr	r4, [pc, #44]	; (13150 <WINC1500_write+0x40>)
   13124:	47a0      	blx	r4
   13126:	2800      	cmp	r0, #0
   13128:	d10c      	bne.n	13144 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   1312a:	4b08      	ldr	r3, [pc, #32]	; (1314c <WINC1500_write+0x3c>)
   1312c:	781b      	ldrb	r3, [r3, #0]
   1312e:	2b00      	cmp	r3, #0
   13130:	d106      	bne.n	13140 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   13132:	4d08      	ldr	r5, [pc, #32]	; (13154 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   13134:	4c05      	ldr	r4, [pc, #20]	; (1314c <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   13136:	2000      	movs	r0, #0
   13138:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   1313a:	7823      	ldrb	r3, [r4, #0]
   1313c:	2b00      	cmp	r3, #0
   1313e:	d0fa      	beq.n	13136 <WINC1500_write+0x26>
}
   13140:	0030      	movs	r0, r6
   13142:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   13144:	2601      	movs	r6, #1
   13146:	4276      	negs	r6, r6
   13148:	e7fa      	b.n	13140 <WINC1500_write+0x30>
   1314a:	46c0      	nop			; (mov r8, r8)
   1314c:	20000477 	.word	0x20000477
   13150:	0000dd19 	.word	0x0000dd19
   13154:	0000bf7d 	.word	0x0000bf7d

00013158 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   13158:	b5f0      	push	{r4, r5, r6, r7, lr}
   1315a:	b083      	sub	sp, #12
   1315c:	9101      	str	r1, [sp, #4]
   1315e:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   13160:	2b00      	cmp	r3, #0
   13162:	d100      	bne.n	13166 <WINC1500_read+0xe>
   13164:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   13166:	4a22      	ldr	r2, [pc, #136]	; (131f0 <WINC1500_read+0x98>)
   13168:	6812      	ldr	r2, [r2, #0]
   1316a:	2a00      	cmp	r2, #0
   1316c:	d013      	beq.n	13196 <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   1316e:	4b20      	ldr	r3, [pc, #128]	; (131f0 <WINC1500_read+0x98>)
   13170:	681d      	ldr	r5, [r3, #0]
   13172:	42a5      	cmp	r5, r4
   13174:	db39      	blt.n	131ea <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   13176:	4e1f      	ldr	r6, [pc, #124]	; (131f4 <WINC1500_read+0x9c>)
   13178:	6837      	ldr	r7, [r6, #0]
   1317a:	491f      	ldr	r1, [pc, #124]	; (131f8 <WINC1500_read+0xa0>)
   1317c:	19c9      	adds	r1, r1, r7
   1317e:	0022      	movs	r2, r4
   13180:	9801      	ldr	r0, [sp, #4]
   13182:	4b1e      	ldr	r3, [pc, #120]	; (131fc <WINC1500_read+0xa4>)
   13184:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   13186:	1b2d      	subs	r5, r5, r4
   13188:	4b19      	ldr	r3, [pc, #100]	; (131f0 <WINC1500_read+0x98>)
   1318a:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   1318c:	193f      	adds	r7, r7, r4
   1318e:	6037      	str	r7, [r6, #0]
  return len;
   13190:	0020      	movs	r0, r4
}
   13192:	b003      	add	sp, #12
   13194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   13196:	2100      	movs	r1, #0
   13198:	4a19      	ldr	r2, [pc, #100]	; (13200 <WINC1500_read+0xa8>)
   1319a:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   1319c:	7800      	ldrb	r0, [r0, #0]
   1319e:	b240      	sxtb	r0, r0
   131a0:	2280      	movs	r2, #128	; 0x80
   131a2:	0052      	lsls	r2, r2, #1
   131a4:	4914      	ldr	r1, [pc, #80]	; (131f8 <WINC1500_read+0xa0>)
   131a6:	4d17      	ldr	r5, [pc, #92]	; (13204 <WINC1500_read+0xac>)
   131a8:	47a8      	blx	r5
   131aa:	2800      	cmp	r0, #0
   131ac:	d11a      	bne.n	131e4 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   131ae:	4b14      	ldr	r3, [pc, #80]	; (13200 <WINC1500_read+0xa8>)
   131b0:	781b      	ldrb	r3, [r3, #0]
   131b2:	2b00      	cmp	r3, #0
   131b4:	d106      	bne.n	131c4 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   131b6:	4f14      	ldr	r7, [pc, #80]	; (13208 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   131b8:	4d11      	ldr	r5, [pc, #68]	; (13200 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   131ba:	2000      	movs	r0, #0
   131bc:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   131be:	782b      	ldrb	r3, [r5, #0]
   131c0:	2b00      	cmp	r3, #0
   131c2:	d0fa      	beq.n	131ba <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   131c4:	4b11      	ldr	r3, [pc, #68]	; (1320c <WINC1500_read+0xb4>)
   131c6:	6818      	ldr	r0, [r3, #0]
   131c8:	2800      	cmp	r0, #0
   131ca:	dd05      	ble.n	131d8 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   131cc:	4b08      	ldr	r3, [pc, #32]	; (131f0 <WINC1500_read+0x98>)
   131ce:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   131d0:	2200      	movs	r2, #0
   131d2:	4b08      	ldr	r3, [pc, #32]	; (131f4 <WINC1500_read+0x9c>)
   131d4:	601a      	str	r2, [r3, #0]
   131d6:	e7ca      	b.n	1316e <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   131d8:	2300      	movs	r3, #0
   131da:	4a05      	ldr	r2, [pc, #20]	; (131f0 <WINC1500_read+0x98>)
   131dc:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   131de:	4a05      	ldr	r2, [pc, #20]	; (131f4 <WINC1500_read+0x9c>)
   131e0:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   131e2:	e7d6      	b.n	13192 <WINC1500_read+0x3a>
		  return -1;
   131e4:	2001      	movs	r0, #1
   131e6:	4240      	negs	r0, r0
   131e8:	e7d3      	b.n	13192 <WINC1500_read+0x3a>
	  return -1;
   131ea:	2001      	movs	r0, #1
   131ec:	4240      	negs	r0, r0
   131ee:	e7d0      	b.n	13192 <WINC1500_read+0x3a>
   131f0:	20000584 	.word	0x20000584
   131f4:	20000588 	.word	0x20000588
   131f8:	20000478 	.word	0x20000478
   131fc:	00016a4d 	.word	0x00016a4d
   13200:	20000476 	.word	0x20000476
   13204:	0000ddb1 	.word	0x0000ddb1
   13208:	0000bf7d 	.word	0x0000bf7d
   1320c:	2000057c 	.word	0x2000057c

00013210 <dnsResolveCallback>:
{
   13210:	b510      	push	{r4, lr}
   13212:	0002      	movs	r2, r0
   13214:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   13216:	4b08      	ldr	r3, [pc, #32]	; (13238 <dnsResolveCallback+0x28>)
   13218:	781b      	ldrb	r3, [r3, #0]
   1321a:	2b00      	cmp	r3, #0
   1321c:	d10b      	bne.n	13236 <dnsResolveCallback+0x26>
   1321e:	4b07      	ldr	r3, [pc, #28]	; (1323c <dnsResolveCallback+0x2c>)
   13220:	6818      	ldr	r0, [r3, #0]
   13222:	0011      	movs	r1, r2
   13224:	4b06      	ldr	r3, [pc, #24]	; (13240 <dnsResolveCallback+0x30>)
   13226:	4798      	blx	r3
   13228:	2800      	cmp	r0, #0
   1322a:	d104      	bne.n	13236 <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   1322c:	4b05      	ldr	r3, [pc, #20]	; (13244 <dnsResolveCallback+0x34>)
   1322e:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   13230:	2201      	movs	r2, #1
   13232:	4b01      	ldr	r3, [pc, #4]	; (13238 <dnsResolveCallback+0x28>)
   13234:	701a      	strb	r2, [r3, #0]
}
   13236:	bd10      	pop	{r4, pc}
   13238:	20000475 	.word	0x20000475
   1323c:	20000580 	.word	0x20000580
   13240:	00016fe1 	.word	0x00016fe1
   13244:	20000578 	.word	0x20000578

00013248 <tcpClientSocketEventHandler>:
{
   13248:	b530      	push	{r4, r5, lr}
   1324a:	4b12      	ldr	r3, [pc, #72]	; (13294 <tcpClientSocketEventHandler+0x4c>)
   1324c:	24a8      	movs	r4, #168	; 0xa8
   1324e:	00a4      	lsls	r4, r4, #2
   13250:	191d      	adds	r5, r3, r4
   13252:	e002      	b.n	1325a <tcpClientSocketEventHandler+0x12>
   13254:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   13256:	42ab      	cmp	r3, r5
   13258:	d00b      	beq.n	13272 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1325a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   1325c:	2c00      	cmp	r4, #0
   1325e:	d0f9      	beq.n	13254 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   13260:	6a24      	ldr	r4, [r4, #32]
   13262:	4284      	cmp	r4, r0
   13264:	d1f6      	bne.n	13254 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   13266:	2906      	cmp	r1, #6
   13268:	d00c      	beq.n	13284 <tcpClientSocketEventHandler+0x3c>
   1326a:	2907      	cmp	r1, #7
   1326c:	d006      	beq.n	1327c <tcpClientSocketEventHandler+0x34>
   1326e:	2905      	cmp	r1, #5
   13270:	d000      	beq.n	13274 <tcpClientSocketEventHandler+0x2c>
}
   13272:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   13274:	2201      	movs	r2, #1
   13276:	4b08      	ldr	r3, [pc, #32]	; (13298 <tcpClientSocketEventHandler+0x50>)
   13278:	701a      	strb	r2, [r3, #0]
			break;
   1327a:	e7fa      	b.n	13272 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   1327c:	2201      	movs	r2, #1
   1327e:	4b07      	ldr	r3, [pc, #28]	; (1329c <tcpClientSocketEventHandler+0x54>)
   13280:	701a      	strb	r2, [r3, #0]
			break;
   13282:	e7f6      	b.n	13272 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   13284:	2304      	movs	r3, #4
   13286:	5ed2      	ldrsh	r2, [r2, r3]
   13288:	4b05      	ldr	r3, [pc, #20]	; (132a0 <tcpClientSocketEventHandler+0x58>)
   1328a:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   1328c:	2201      	movs	r2, #1
   1328e:	4b05      	ldr	r3, [pc, #20]	; (132a4 <tcpClientSocketEventHandler+0x5c>)
   13290:	701a      	strb	r2, [r3, #0]
}
   13292:	e7ee      	b.n	13272 <tcpClientSocketEventHandler+0x2a>
   13294:	2000058c 	.word	0x2000058c
   13298:	20000474 	.word	0x20000474
   1329c:	20000477 	.word	0x20000477
   132a0:	2000057c 	.word	0x2000057c
   132a4:	20000476 	.word	0x20000476

000132a8 <SysTick_Handler>:
	MilliTimer++;
   132a8:	4a02      	ldr	r2, [pc, #8]	; (132b4 <SysTick_Handler+0xc>)
   132aa:	6813      	ldr	r3, [r2, #0]
   132ac:	3301      	adds	r3, #1
   132ae:	6013      	str	r3, [r2, #0]
}
   132b0:	4770      	bx	lr
   132b2:	46c0      	nop			; (mov r8, r8)
   132b4:	20000470 	.word	0x20000470

000132b8 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
   132b8:	6840      	ldr	r0, [r0, #4]
   132ba:	4b02      	ldr	r3, [pc, #8]	; (132c4 <TimerIsExpired+0xc>)
   132bc:	681b      	ldr	r3, [r3, #0]
   132be:	1ac0      	subs	r0, r0, r3
	return (left < 0);
   132c0:	0fc0      	lsrs	r0, r0, #31
}
   132c2:	4770      	bx	lr
   132c4:	20000470 	.word	0x20000470

000132c8 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
   132c8:	4b02      	ldr	r3, [pc, #8]	; (132d4 <TimerCountdownMS+0xc>)
   132ca:	681b      	ldr	r3, [r3, #0]
   132cc:	1859      	adds	r1, r3, r1
   132ce:	6041      	str	r1, [r0, #4]
}
   132d0:	4770      	bx	lr
   132d2:	46c0      	nop			; (mov r8, r8)
   132d4:	20000470 	.word	0x20000470

000132d8 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
   132d8:	23fa      	movs	r3, #250	; 0xfa
   132da:	009b      	lsls	r3, r3, #2
   132dc:	4359      	muls	r1, r3
   132de:	4b02      	ldr	r3, [pc, #8]	; (132e8 <TimerCountdown+0x10>)
   132e0:	681b      	ldr	r3, [r3, #0]
   132e2:	18c9      	adds	r1, r1, r3
   132e4:	6041      	str	r1, [r0, #4]
}
   132e6:	4770      	bx	lr
   132e8:	20000470 	.word	0x20000470

000132ec <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
   132ec:	6840      	ldr	r0, [r0, #4]
   132ee:	4b03      	ldr	r3, [pc, #12]	; (132fc <TimerLeftMS+0x10>)
   132f0:	681b      	ldr	r3, [r3, #0]
   132f2:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
   132f4:	43c3      	mvns	r3, r0
   132f6:	17db      	asrs	r3, r3, #31
   132f8:	4018      	ands	r0, r3
}
   132fa:	4770      	bx	lr
   132fc:	20000470 	.word	0x20000470

00013300 <TimerInit>:
	timer->end_time = 0;
   13300:	2300      	movs	r3, #0
   13302:	6043      	str	r3, [r0, #4]
}
   13304:	4770      	bx	lr
	...

00013308 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   13308:	2301      	movs	r3, #1
   1330a:	425b      	negs	r3, r3
   1330c:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   1330e:	4b03      	ldr	r3, [pc, #12]	; (1331c <NetworkInit+0x14>)
   13310:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   13312:	4b03      	ldr	r3, [pc, #12]	; (13320 <NetworkInit+0x18>)
   13314:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   13316:	4b03      	ldr	r3, [pc, #12]	; (13324 <NetworkInit+0x1c>)
   13318:	6103      	str	r3, [r0, #16]
}
   1331a:	4770      	bx	lr
   1331c:	00013159 	.word	0x00013159
   13320:	00013111 	.word	0x00013111
   13324:	000130ed 	.word	0x000130ed

00013328 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   13328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1332a:	b087      	sub	sp, #28
   1332c:	0006      	movs	r6, r0
   1332e:	0015      	movs	r5, r2
   13330:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   13332:	4c25      	ldr	r4, [pc, #148]	; (133c8 <ConnectNetwork+0xa0>)
   13334:	2300      	movs	r3, #0
   13336:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   13338:	4b24      	ldr	r3, [pc, #144]	; (133cc <ConnectNetwork+0xa4>)
   1333a:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   1333c:	0008      	movs	r0, r1
   1333e:	4b24      	ldr	r3, [pc, #144]	; (133d0 <ConnectNetwork+0xa8>)
   13340:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   13342:	7823      	ldrb	r3, [r4, #0]
   13344:	2b00      	cmp	r3, #0
   13346:	d106      	bne.n	13356 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   13348:	4f22      	ldr	r7, [pc, #136]	; (133d4 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   1334a:	4c1f      	ldr	r4, [pc, #124]	; (133c8 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   1334c:	2000      	movs	r0, #0
   1334e:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   13350:	7823      	ldrb	r3, [r4, #0]
   13352:	2b00      	cmp	r3, #0
   13354:	d0fa      	beq.n	1334c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   13356:	4b20      	ldr	r3, [pc, #128]	; (133d8 <ConnectNetwork+0xb0>)
   13358:	681a      	ldr	r2, [r3, #0]
   1335a:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   1335c:	2302      	movs	r3, #2
   1335e:	a902      	add	r1, sp, #8
   13360:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   13362:	022b      	lsls	r3, r5, #8
   13364:	491d      	ldr	r1, [pc, #116]	; (133dc <ConnectNetwork+0xb4>)
   13366:	400b      	ands	r3, r1
   13368:	b2ad      	uxth	r5, r5
   1336a:	0a2d      	lsrs	r5, r5, #8
   1336c:	431d      	orrs	r5, r3
   1336e:	ab02      	add	r3, sp, #8
   13370:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   13372:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   13374:	6833      	ldr	r3, [r6, #0]
   13376:	2b00      	cmp	r3, #0
   13378:	db16      	blt.n	133a8 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1337a:	6830      	ldr	r0, [r6, #0]
   1337c:	1c43      	adds	r3, r0, #1
   1337e:	d01b      	beq.n	133b8 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   13380:	b240      	sxtb	r0, r0
   13382:	2210      	movs	r2, #16
   13384:	a902      	add	r1, sp, #8
   13386:	4b16      	ldr	r3, [pc, #88]	; (133e0 <ConnectNetwork+0xb8>)
   13388:	4798      	blx	r3
   1338a:	2800      	cmp	r0, #0
   1338c:	d119      	bne.n	133c2 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   1338e:	2200      	movs	r2, #0
   13390:	4b14      	ldr	r3, [pc, #80]	; (133e4 <ConnectNetwork+0xbc>)
   13392:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   13394:	4d0f      	ldr	r5, [pc, #60]	; (133d4 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   13396:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   13398:	2000      	movs	r0, #0
   1339a:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   1339c:	7823      	ldrb	r3, [r4, #0]
   1339e:	2b00      	cmp	r3, #0
   133a0:	d0fa      	beq.n	13398 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   133a2:	2000      	movs	r0, #0
   133a4:	b007      	add	sp, #28
   133a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   133a8:	466b      	mov	r3, sp
   133aa:	791a      	ldrb	r2, [r3, #4]
   133ac:	2101      	movs	r1, #1
   133ae:	2002      	movs	r0, #2
   133b0:	4b0d      	ldr	r3, [pc, #52]	; (133e8 <ConnectNetwork+0xc0>)
   133b2:	4798      	blx	r3
   133b4:	6030      	str	r0, [r6, #0]
   133b6:	e7e0      	b.n	1337a <ConnectNetwork+0x52>
   close(n->socket);
   133b8:	4b0c      	ldr	r3, [pc, #48]	; (133ec <ConnectNetwork+0xc4>)
   133ba:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   133bc:	2009      	movs	r0, #9
   133be:	4240      	negs	r0, r0
   133c0:	e7f0      	b.n	133a4 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   133c2:	2009      	movs	r0, #9
   133c4:	4240      	negs	r0, r0
   133c6:	e7ed      	b.n	133a4 <ConnectNetwork+0x7c>
   133c8:	20000475 	.word	0x20000475
   133cc:	20000580 	.word	0x20000580
   133d0:	0000df4d 	.word	0x0000df4d
   133d4:	0000bf7d 	.word	0x0000bf7d
   133d8:	20000578 	.word	0x20000578
   133dc:	00ffff00 	.word	0x00ffff00
   133e0:	0000dc89 	.word	0x0000dc89
   133e4:	20000474 	.word	0x20000474
   133e8:	0000db05 	.word	0x0000db05
   133ec:	0000de45 	.word	0x0000de45

000133f0 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   133f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   133f2:	b085      	sub	sp, #20
   133f4:	0006      	movs	r6, r0
   133f6:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   133f8:	2800      	cmp	r0, #0
   133fa:	d03d      	beq.n	13478 <mqtt_init+0x88>
   133fc:	2900      	cmp	r1, #0
   133fe:	d03e      	beq.n	1347e <mqtt_init+0x8e>
   13400:	690b      	ldr	r3, [r1, #16]
   13402:	2b00      	cmp	r3, #0
   13404:	d03e      	beq.n	13484 <mqtt_init+0x94>
   13406:	688b      	ldr	r3, [r1, #8]
   13408:	2b00      	cmp	r3, #0
   1340a:	d03e      	beq.n	1348a <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   1340c:	888b      	ldrh	r3, [r1, #4]
   1340e:	27fa      	movs	r7, #250	; 0xfa
   13410:	00bf      	lsls	r7, r7, #2
   13412:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   13414:	0004      	movs	r4, r0
   13416:	3420      	adds	r4, #32
   13418:	0020      	movs	r0, r4
   1341a:	4b1f      	ldr	r3, [pc, #124]	; (13498 <mqtt_init+0xa8>)
   1341c:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   1341e:	1d30      	adds	r0, r6, #4
   13420:	2218      	movs	r2, #24
   13422:	0029      	movs	r1, r5
   13424:	4b1d      	ldr	r3, [pc, #116]	; (1349c <mqtt_init+0xac>)
   13426:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   13428:	4b1d      	ldr	r3, [pc, #116]	; (134a0 <mqtt_init+0xb0>)
   1342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   1342c:	2b00      	cmp	r3, #0
   1342e:	d01a      	beq.n	13466 <mqtt_init+0x76>
   13430:	4b1b      	ldr	r3, [pc, #108]	; (134a0 <mqtt_init+0xb0>)
   13432:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   13434:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   13436:	6819      	ldr	r1, [r3, #0]
   13438:	2900      	cmp	r1, #0
   1343a:	d015      	beq.n	13468 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1343c:	3201      	adds	r2, #1
   1343e:	3360      	adds	r3, #96	; 0x60
   13440:	2a07      	cmp	r2, #7
   13442:	d1f8      	bne.n	13436 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   13444:	69f0      	ldr	r0, [r6, #28]
   13446:	2800      	cmp	r0, #0
   13448:	d022      	beq.n	13490 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1344a:	692b      	ldr	r3, [r5, #16]
   1344c:	68ea      	ldr	r2, [r5, #12]
   1344e:	9202      	str	r2, [sp, #8]
   13450:	68aa      	ldr	r2, [r5, #8]
   13452:	9201      	str	r2, [sp, #4]
   13454:	696a      	ldr	r2, [r5, #20]
   13456:	9200      	str	r2, [sp, #0]
   13458:	003a      	movs	r2, r7
   1345a:	0021      	movs	r1, r4
   1345c:	4c11      	ldr	r4, [pc, #68]	; (134a4 <mqtt_init+0xb4>)
   1345e:	47a0      	blx	r4
		return SUCCESS;
   13460:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   13462:	b005      	add	sp, #20
   13464:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   13466:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   13468:	480d      	ldr	r0, [pc, #52]	; (134a0 <mqtt_init+0xb0>)
   1346a:	0053      	lsls	r3, r2, #1
   1346c:	1899      	adds	r1, r3, r2
   1346e:	0149      	lsls	r1, r1, #5
   13470:	1841      	adds	r1, r0, r1
   13472:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   13474:	61f1      	str	r1, [r6, #28]
   13476:	e7e5      	b.n	13444 <mqtt_init+0x54>
		return FAILURE;
   13478:	2001      	movs	r0, #1
   1347a:	4240      	negs	r0, r0
   1347c:	e7f1      	b.n	13462 <mqtt_init+0x72>
   1347e:	2001      	movs	r0, #1
   13480:	4240      	negs	r0, r0
   13482:	e7ee      	b.n	13462 <mqtt_init+0x72>
   13484:	2001      	movs	r0, #1
   13486:	4240      	negs	r0, r0
   13488:	e7eb      	b.n	13462 <mqtt_init+0x72>
   1348a:	2001      	movs	r0, #1
   1348c:	4240      	negs	r0, r0
   1348e:	e7e8      	b.n	13462 <mqtt_init+0x72>
		return FAILURE;
   13490:	2001      	movs	r0, #1
   13492:	4240      	negs	r0, r0
   13494:	e7e5      	b.n	13462 <mqtt_init+0x72>
   13496:	46c0      	nop			; (mov r8, r8)
   13498:	00013309 	.word	0x00013309
   1349c:	00016a4d 	.word	0x00016a4d
   134a0:	2000058c 	.word	0x2000058c
   134a4:	000129b9 	.word	0x000129b9

000134a8 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   134a8:	4b05      	ldr	r3, [pc, #20]	; (134c0 <mqtt_get_config_defaults+0x18>)
   134aa:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   134ac:	2300      	movs	r3, #0
   134ae:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   134b0:	223c      	movs	r2, #60	; 0x3c
   134b2:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   134b4:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   134b6:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   134b8:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   134ba:	6143      	str	r3, [r0, #20]
}
   134bc:	4770      	bx	lr
   134be:	46c0      	nop			; (mov r8, r8)
   134c0:	0000075b 	.word	0x0000075b

000134c4 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   134c4:	2800      	cmp	r0, #0
   134c6:	d002      	beq.n	134ce <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   134c8:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   134ca:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   134cc:	4770      	bx	lr
		return FAILURE;
   134ce:	2001      	movs	r0, #1
   134d0:	4240      	negs	r0, r0
   134d2:	e7fb      	b.n	134cc <mqtt_register_callback+0x8>

000134d4 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   134d4:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   134d6:	4b01      	ldr	r3, [pc, #4]	; (134dc <mqtt_socket_event_handler+0x8>)
   134d8:	4798      	blx	r3
}
   134da:	bd10      	pop	{r4, pc}
   134dc:	00013249 	.word	0x00013249

000134e0 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   134e0:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   134e2:	4b01      	ldr	r3, [pc, #4]	; (134e8 <mqtt_socket_resolve_handler+0x8>)
   134e4:	4798      	blx	r3
}
   134e6:	bd10      	pop	{r4, pc}
   134e8:	00013211 	.word	0x00013211

000134ec <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   134ec:	b530      	push	{r4, r5, lr}
   134ee:	b083      	sub	sp, #12
   134f0:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   134f2:	7983      	ldrb	r3, [r0, #6]
   134f4:	8882      	ldrh	r2, [r0, #4]
   134f6:	3020      	adds	r0, #32
   134f8:	4d06      	ldr	r5, [pc, #24]	; (13514 <mqtt_connect+0x28>)
   134fa:	47a8      	blx	r5
   134fc:	9001      	str	r0, [sp, #4]
	if(module->callback)
   134fe:	6823      	ldr	r3, [r4, #0]
   13500:	2b00      	cmp	r3, #0
   13502:	d003      	beq.n	1350c <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   13504:	aa01      	add	r2, sp, #4
   13506:	2100      	movs	r1, #0
   13508:	0020      	movs	r0, r4
   1350a:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   1350c:	9801      	ldr	r0, [sp, #4]
   1350e:	b003      	add	sp, #12
   13510:	bd30      	pop	{r4, r5, pc}
   13512:	46c0      	nop			; (mov r8, r8)
   13514:	00013329 	.word	0x00013329

00013518 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   13518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1351a:	46de      	mov	lr, fp
   1351c:	4657      	mov	r7, sl
   1351e:	464e      	mov	r6, r9
   13520:	b5c0      	push	{r6, r7, lr}
   13522:	b098      	sub	sp, #96	; 0x60
   13524:	0005      	movs	r5, r0
   13526:	4689      	mov	r9, r1
   13528:	4693      	mov	fp, r2
   1352a:	469a      	mov	sl, r3
   1352c:	ab24      	add	r3, sp, #144	; 0x90
   1352e:	781f      	ldrb	r7, [r3, #0]
   13530:	ab25      	add	r3, sp, #148	; 0x94
   13532:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   13534:	ac01      	add	r4, sp, #4
   13536:	2258      	movs	r2, #88	; 0x58
   13538:	491a      	ldr	r1, [pc, #104]	; (135a4 <mqtt_connect_broker+0x8c>)
   1353a:	0020      	movs	r0, r4
   1353c:	4b1a      	ldr	r3, [pc, #104]	; (135a8 <mqtt_connect_broker+0x90>)
   1353e:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   13540:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13542:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   13544:	465b      	mov	r3, fp
   13546:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   13548:	4653      	mov	r3, sl
   1354a:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   1354c:	464b      	mov	r3, r9
   1354e:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   13550:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13552:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   13554:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13556:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   13558:	233c      	movs	r3, #60	; 0x3c
   1355a:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   1355c:	3301      	adds	r3, #1
   1355e:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   13560:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13562:	2b00      	cmp	r3, #0
   13564:	d005      	beq.n	13572 <mqtt_connect_broker+0x5a>
   13566:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13568:	2b00      	cmp	r3, #0
   1356a:	d002      	beq.n	13572 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   1356c:	2201      	movs	r2, #1
   1356e:	ab01      	add	r3, sp, #4
   13570:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   13572:	a901      	add	r1, sp, #4
   13574:	69e8      	ldr	r0, [r5, #28]
   13576:	4b0d      	ldr	r3, [pc, #52]	; (135ac <mqtt_connect_broker+0x94>)
   13578:	4798      	blx	r3
   1357a:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   1357c:	ab17      	add	r3, sp, #92	; 0x5c
   1357e:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   13580:	682b      	ldr	r3, [r5, #0]
   13582:	2b00      	cmp	r3, #0
   13584:	d003      	beq.n	1358e <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   13586:	aa17      	add	r2, sp, #92	; 0x5c
   13588:	2101      	movs	r1, #1
   1358a:	0028      	movs	r0, r5
   1358c:	4798      	blx	r3
	
	module->isConnected = true;
   1358e:	2201      	movs	r2, #1
   13590:	2334      	movs	r3, #52	; 0x34
   13592:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   13594:	0020      	movs	r0, r4
   13596:	b018      	add	sp, #96	; 0x60
   13598:	bc1c      	pop	{r2, r3, r4}
   1359a:	4691      	mov	r9, r2
   1359c:	469a      	mov	sl, r3
   1359e:	46a3      	mov	fp, r4
   135a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   135a2:	46c0      	nop			; (mov r8, r8)
   135a4:	0001a474 	.word	0x0001a474
   135a8:	00016a4d 	.word	0x00016a4d
   135ac:	00012dc1 	.word	0x00012dc1

000135b0 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   135b0:	b530      	push	{r4, r5, lr}
   135b2:	b083      	sub	sp, #12
   135b4:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   135b6:	69c0      	ldr	r0, [r0, #28]
   135b8:	4b08      	ldr	r3, [pc, #32]	; (135dc <mqtt_disconnect+0x2c>)
   135ba:	4798      	blx	r3
   135bc:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   135be:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   135c0:	6823      	ldr	r3, [r4, #0]
   135c2:	2b00      	cmp	r3, #0
   135c4:	d003      	beq.n	135ce <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   135c6:	aa01      	add	r2, sp, #4
   135c8:	2105      	movs	r1, #5
   135ca:	0020      	movs	r0, r4
   135cc:	4798      	blx	r3
	
	module->isConnected = false;
   135ce:	2200      	movs	r2, #0
   135d0:	2334      	movs	r3, #52	; 0x34
   135d2:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   135d4:	0028      	movs	r0, r5
   135d6:	b003      	add	sp, #12
   135d8:	bd30      	pop	{r4, r5, pc}
   135da:	46c0      	nop			; (mov r8, r8)
   135dc:	000130a5 	.word	0x000130a5

000135e0 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   135e0:	b570      	push	{r4, r5, r6, lr}
   135e2:	b084      	sub	sp, #16
   135e4:	0004      	movs	r4, r0
   135e6:	a808      	add	r0, sp, #32
   135e8:	7805      	ldrb	r5, [r0, #0]
   135ea:	a809      	add	r0, sp, #36	; 0x24
   135ec:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   135ee:	466e      	mov	r6, sp
   135f0:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   135f2:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   135f4:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   135f6:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   135f8:	466a      	mov	r2, sp
   135fa:	69e0      	ldr	r0, [r4, #28]
   135fc:	4b06      	ldr	r3, [pc, #24]	; (13618 <mqtt_publish+0x38>)
   135fe:	4798      	blx	r3
   13600:	0005      	movs	r5, r0
	
	if(module->callback)
   13602:	6823      	ldr	r3, [r4, #0]
   13604:	2b00      	cmp	r3, #0
   13606:	d003      	beq.n	13610 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   13608:	2200      	movs	r2, #0
   1360a:	2102      	movs	r1, #2
   1360c:	0020      	movs	r0, r4
   1360e:	4798      	blx	r3
	
	return rc;
}
   13610:	0028      	movs	r0, r5
   13612:	b004      	add	sp, #16
   13614:	bd70      	pop	{r4, r5, r6, pc}
   13616:	46c0      	nop			; (mov r8, r8)
   13618:	00012f95 	.word	0x00012f95

0001361c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   1361c:	b570      	push	{r4, r5, r6, lr}
   1361e:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   13620:	69c0      	ldr	r0, [r0, #28]
   13622:	4d06      	ldr	r5, [pc, #24]	; (1363c <mqtt_subscribe+0x20>)
   13624:	47a8      	blx	r5
   13626:	0005      	movs	r5, r0
	
	if(module->callback)
   13628:	6823      	ldr	r3, [r4, #0]
   1362a:	2b00      	cmp	r3, #0
   1362c:	d003      	beq.n	13636 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   1362e:	2200      	movs	r2, #0
   13630:	2103      	movs	r1, #3
   13632:	0020      	movs	r0, r4
   13634:	4798      	blx	r3
	
	return rc;
}
   13636:	0028      	movs	r0, r5
   13638:	bd70      	pop	{r4, r5, r6, pc}
   1363a:	46c0      	nop			; (mov r8, r8)
   1363c:	00012e91 	.word	0x00012e91

00013640 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   13640:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   13642:	69c0      	ldr	r0, [r0, #28]
   13644:	4b01      	ldr	r3, [pc, #4]	; (1364c <mqtt_yield+0xc>)
   13646:	4798      	blx	r3
   13648:	bd10      	pop	{r4, pc}
   1364a:	46c0      	nop			; (mov r8, r8)
   1364c:	00012d45 	.word	0x00012d45

00013650 <MQTTSerialize_connectLength>:
   13650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13652:	0004      	movs	r4, r0
   13654:	7a03      	ldrb	r3, [r0, #8]
   13656:	2b03      	cmp	r3, #3
   13658:	d024      	beq.n	136a4 <MQTTSerialize_connectLength+0x54>
   1365a:	2600      	movs	r6, #0
   1365c:	2b04      	cmp	r3, #4
   1365e:	d01f      	beq.n	136a0 <MQTTSerialize_connectLength+0x50>
   13660:	68e0      	ldr	r0, [r4, #12]
   13662:	6921      	ldr	r1, [r4, #16]
   13664:	6962      	ldr	r2, [r4, #20]
   13666:	4b1b      	ldr	r3, [pc, #108]	; (136d4 <MQTTSerialize_connectLength+0x84>)
   13668:	4798      	blx	r3
   1366a:	1c85      	adds	r5, r0, #2
   1366c:	19ad      	adds	r5, r5, r6
   1366e:	7ee3      	ldrb	r3, [r4, #27]
   13670:	2b00      	cmp	r3, #0
   13672:	d119      	bne.n	136a8 <MQTTSerialize_connectLength+0x58>
   13674:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13676:	2b00      	cmp	r3, #0
   13678:	d024      	beq.n	136c4 <MQTTSerialize_connectLength+0x74>
   1367a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1367c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1367e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   13680:	4b14      	ldr	r3, [pc, #80]	; (136d4 <MQTTSerialize_connectLength+0x84>)
   13682:	4798      	blx	r3
   13684:	3002      	adds	r0, #2
   13686:	182d      	adds	r5, r5, r0
   13688:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1368a:	2b00      	cmp	r3, #0
   1368c:	d01e      	beq.n	136cc <MQTTSerialize_connectLength+0x7c>
   1368e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   13690:	6d21      	ldr	r1, [r4, #80]	; 0x50
   13692:	6d62      	ldr	r2, [r4, #84]	; 0x54
   13694:	4b0f      	ldr	r3, [pc, #60]	; (136d4 <MQTTSerialize_connectLength+0x84>)
   13696:	4798      	blx	r3
   13698:	3002      	adds	r0, #2
   1369a:	182d      	adds	r5, r5, r0
   1369c:	0028      	movs	r0, r5
   1369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   136a0:	360a      	adds	r6, #10
   136a2:	e7dd      	b.n	13660 <MQTTSerialize_connectLength+0x10>
   136a4:	260c      	movs	r6, #12
   136a6:	e7db      	b.n	13660 <MQTTSerialize_connectLength+0x10>
   136a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   136aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   136ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   136ae:	4f09      	ldr	r7, [pc, #36]	; (136d4 <MQTTSerialize_connectLength+0x84>)
   136b0:	47b8      	blx	r7
   136b2:	0006      	movs	r6, r0
   136b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   136b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   136b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   136ba:	47b8      	blx	r7
   136bc:	1836      	adds	r6, r6, r0
   136be:	3604      	adds	r6, #4
   136c0:	19ad      	adds	r5, r5, r6
   136c2:	e7d7      	b.n	13674 <MQTTSerialize_connectLength+0x24>
   136c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   136c6:	2b00      	cmp	r3, #0
   136c8:	d1d7      	bne.n	1367a <MQTTSerialize_connectLength+0x2a>
   136ca:	e7dd      	b.n	13688 <MQTTSerialize_connectLength+0x38>
   136cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   136ce:	2b00      	cmp	r3, #0
   136d0:	d1dd      	bne.n	1368e <MQTTSerialize_connectLength+0x3e>
   136d2:	e7e3      	b.n	1369c <MQTTSerialize_connectLength+0x4c>
   136d4:	00013bb9 	.word	0x00013bb9

000136d8 <MQTTSerialize_connect>:
   136d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   136da:	b083      	sub	sp, #12
   136dc:	0006      	movs	r6, r0
   136de:	000f      	movs	r7, r1
   136e0:	0015      	movs	r5, r2
   136e2:	9001      	str	r0, [sp, #4]
   136e4:	0010      	movs	r0, r2
   136e6:	4b45      	ldr	r3, [pc, #276]	; (137fc <MQTTSerialize_connect+0x124>)
   136e8:	4798      	blx	r3
   136ea:	0004      	movs	r4, r0
   136ec:	4b44      	ldr	r3, [pc, #272]	; (13800 <MQTTSerialize_connect+0x128>)
   136ee:	4798      	blx	r3
   136f0:	42b8      	cmp	r0, r7
   136f2:	dd00      	ble.n	136f6 <MQTTSerialize_connect+0x1e>
   136f4:	e07f      	b.n	137f6 <MQTTSerialize_connect+0x11e>
   136f6:	2110      	movs	r1, #16
   136f8:	a801      	add	r0, sp, #4
   136fa:	4b42      	ldr	r3, [pc, #264]	; (13804 <MQTTSerialize_connect+0x12c>)
   136fc:	4798      	blx	r3
   136fe:	0021      	movs	r1, r4
   13700:	9801      	ldr	r0, [sp, #4]
   13702:	4b41      	ldr	r3, [pc, #260]	; (13808 <MQTTSerialize_connect+0x130>)
   13704:	4798      	blx	r3
   13706:	9b01      	ldr	r3, [sp, #4]
   13708:	469c      	mov	ip, r3
   1370a:	4460      	add	r0, ip
   1370c:	9001      	str	r0, [sp, #4]
   1370e:	7a2b      	ldrb	r3, [r5, #8]
   13710:	2b04      	cmp	r3, #4
   13712:	d045      	beq.n	137a0 <MQTTSerialize_connect+0xc8>
   13714:	493d      	ldr	r1, [pc, #244]	; (1380c <MQTTSerialize_connect+0x134>)
   13716:	a801      	add	r0, sp, #4
   13718:	4b3d      	ldr	r3, [pc, #244]	; (13810 <MQTTSerialize_connect+0x138>)
   1371a:	4798      	blx	r3
   1371c:	2103      	movs	r1, #3
   1371e:	a801      	add	r0, sp, #4
   13720:	4b38      	ldr	r3, [pc, #224]	; (13804 <MQTTSerialize_connect+0x12c>)
   13722:	4798      	blx	r3
   13724:	7ea9      	ldrb	r1, [r5, #26]
   13726:	2301      	movs	r3, #1
   13728:	4019      	ands	r1, r3
   1372a:	7eea      	ldrb	r2, [r5, #27]
   1372c:	1e50      	subs	r0, r2, #1
   1372e:	4182      	sbcs	r2, r0
   13730:	b2d2      	uxtb	r2, r2
   13732:	4013      	ands	r3, r2
   13734:	009b      	lsls	r3, r3, #2
   13736:	0049      	lsls	r1, r1, #1
   13738:	4319      	orrs	r1, r3
   1373a:	2b00      	cmp	r3, #0
   1373c:	d00b      	beq.n	13756 <MQTTSerialize_connect+0x7e>
   1373e:	233d      	movs	r3, #61	; 0x3d
   13740:	5cea      	ldrb	r2, [r5, r3]
   13742:	3b3a      	subs	r3, #58	; 0x3a
   13744:	4013      	ands	r3, r2
   13746:	00db      	lsls	r3, r3, #3
   13748:	223c      	movs	r2, #60	; 0x3c
   1374a:	5ca8      	ldrb	r0, [r5, r2]
   1374c:	3a3b      	subs	r2, #59	; 0x3b
   1374e:	4002      	ands	r2, r0
   13750:	0152      	lsls	r2, r2, #5
   13752:	4319      	orrs	r1, r3
   13754:	4311      	orrs	r1, r2
   13756:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   13758:	2b00      	cmp	r3, #0
   1375a:	d02a      	beq.n	137b2 <MQTTSerialize_connect+0xda>
   1375c:	2380      	movs	r3, #128	; 0x80
   1375e:	4319      	orrs	r1, r3
   13760:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   13762:	2b00      	cmp	r3, #0
   13764:	d029      	beq.n	137ba <MQTTSerialize_connect+0xe2>
   13766:	2340      	movs	r3, #64	; 0x40
   13768:	4319      	orrs	r1, r3
   1376a:	b2cc      	uxtb	r4, r1
   1376c:	0021      	movs	r1, r4
   1376e:	a801      	add	r0, sp, #4
   13770:	4b24      	ldr	r3, [pc, #144]	; (13804 <MQTTSerialize_connect+0x12c>)
   13772:	4798      	blx	r3
   13774:	8b29      	ldrh	r1, [r5, #24]
   13776:	a801      	add	r0, sp, #4
   13778:	4b26      	ldr	r3, [pc, #152]	; (13814 <MQTTSerialize_connect+0x13c>)
   1377a:	4798      	blx	r3
   1377c:	68e9      	ldr	r1, [r5, #12]
   1377e:	692a      	ldr	r2, [r5, #16]
   13780:	696b      	ldr	r3, [r5, #20]
   13782:	a801      	add	r0, sp, #4
   13784:	4f24      	ldr	r7, [pc, #144]	; (13818 <MQTTSerialize_connect+0x140>)
   13786:	47b8      	blx	r7
   13788:	7eeb      	ldrb	r3, [r5, #27]
   1378a:	2b00      	cmp	r3, #0
   1378c:	d119      	bne.n	137c2 <MQTTSerialize_connect+0xea>
   1378e:	b263      	sxtb	r3, r4
   13790:	2b00      	cmp	r3, #0
   13792:	db22      	blt.n	137da <MQTTSerialize_connect+0x102>
   13794:	0663      	lsls	r3, r4, #25
   13796:	d427      	bmi.n	137e8 <MQTTSerialize_connect+0x110>
   13798:	9b01      	ldr	r3, [sp, #4]
   1379a:	1b98      	subs	r0, r3, r6
   1379c:	b003      	add	sp, #12
   1379e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137a0:	491e      	ldr	r1, [pc, #120]	; (1381c <MQTTSerialize_connect+0x144>)
   137a2:	a801      	add	r0, sp, #4
   137a4:	4b1a      	ldr	r3, [pc, #104]	; (13810 <MQTTSerialize_connect+0x138>)
   137a6:	4798      	blx	r3
   137a8:	2104      	movs	r1, #4
   137aa:	a801      	add	r0, sp, #4
   137ac:	4b15      	ldr	r3, [pc, #84]	; (13804 <MQTTSerialize_connect+0x12c>)
   137ae:	4798      	blx	r3
   137b0:	e7b8      	b.n	13724 <MQTTSerialize_connect+0x4c>
   137b2:	6cab      	ldr	r3, [r5, #72]	; 0x48
   137b4:	2b00      	cmp	r3, #0
   137b6:	d1d1      	bne.n	1375c <MQTTSerialize_connect+0x84>
   137b8:	e7d2      	b.n	13760 <MQTTSerialize_connect+0x88>
   137ba:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   137bc:	2b00      	cmp	r3, #0
   137be:	d1d2      	bne.n	13766 <MQTTSerialize_connect+0x8e>
   137c0:	e7d3      	b.n	1376a <MQTTSerialize_connect+0x92>
   137c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   137c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   137c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   137c8:	a801      	add	r0, sp, #4
   137ca:	4f13      	ldr	r7, [pc, #76]	; (13818 <MQTTSerialize_connect+0x140>)
   137cc:	47b8      	blx	r7
   137ce:	6b29      	ldr	r1, [r5, #48]	; 0x30
   137d0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   137d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   137d4:	a801      	add	r0, sp, #4
   137d6:	47b8      	blx	r7
   137d8:	e7d9      	b.n	1378e <MQTTSerialize_connect+0xb6>
   137da:	6c29      	ldr	r1, [r5, #64]	; 0x40
   137dc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   137de:	6cab      	ldr	r3, [r5, #72]	; 0x48
   137e0:	a801      	add	r0, sp, #4
   137e2:	4f0d      	ldr	r7, [pc, #52]	; (13818 <MQTTSerialize_connect+0x140>)
   137e4:	47b8      	blx	r7
   137e6:	e7d5      	b.n	13794 <MQTTSerialize_connect+0xbc>
   137e8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   137ea:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   137ec:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   137ee:	a801      	add	r0, sp, #4
   137f0:	4c09      	ldr	r4, [pc, #36]	; (13818 <MQTTSerialize_connect+0x140>)
   137f2:	47a0      	blx	r4
   137f4:	e7d0      	b.n	13798 <MQTTSerialize_connect+0xc0>
   137f6:	2002      	movs	r0, #2
   137f8:	4240      	negs	r0, r0
   137fa:	e7cf      	b.n	1379c <MQTTSerialize_connect+0xc4>
   137fc:	00013651 	.word	0x00013651
   13800:	00013a5d 	.word	0x00013a5d
   13804:	00013abf 	.word	0x00013abf
   13808:	000139d5 	.word	0x000139d5
   1380c:	0001a4d4 	.word	0x0001a4d4
   13810:	00013af5 	.word	0x00013af5
   13814:	00013acb 	.word	0x00013acb
   13818:	00013b2d 	.word	0x00013b2d
   1381c:	0001a4cc 	.word	0x0001a4cc

00013820 <MQTTDeserialize_connack>:
   13820:	b570      	push	{r4, r5, r6, lr}
   13822:	b082      	sub	sp, #8
   13824:	0005      	movs	r5, r0
   13826:	000c      	movs	r4, r1
   13828:	9201      	str	r2, [sp, #4]
   1382a:	a801      	add	r0, sp, #4
   1382c:	4b0e      	ldr	r3, [pc, #56]	; (13868 <MQTTDeserialize_connack+0x48>)
   1382e:	4798      	blx	r3
   13830:	23f0      	movs	r3, #240	; 0xf0
   13832:	4003      	ands	r3, r0
   13834:	2000      	movs	r0, #0
   13836:	2b20      	cmp	r3, #32
   13838:	d001      	beq.n	1383e <MQTTDeserialize_connack+0x1e>
   1383a:	b002      	add	sp, #8
   1383c:	bd70      	pop	{r4, r5, r6, pc}
   1383e:	4669      	mov	r1, sp
   13840:	9801      	ldr	r0, [sp, #4]
   13842:	4b0a      	ldr	r3, [pc, #40]	; (1386c <MQTTDeserialize_connack+0x4c>)
   13844:	4798      	blx	r3
   13846:	9b01      	ldr	r3, [sp, #4]
   13848:	181b      	adds	r3, r3, r0
   1384a:	9301      	str	r3, [sp, #4]
   1384c:	9b00      	ldr	r3, [sp, #0]
   1384e:	2b01      	cmp	r3, #1
   13850:	ddf3      	ble.n	1383a <MQTTDeserialize_connack+0x1a>
   13852:	a801      	add	r0, sp, #4
   13854:	4e04      	ldr	r6, [pc, #16]	; (13868 <MQTTDeserialize_connack+0x48>)
   13856:	47b0      	blx	r6
   13858:	0600      	lsls	r0, r0, #24
   1385a:	0fc0      	lsrs	r0, r0, #31
   1385c:	7028      	strb	r0, [r5, #0]
   1385e:	a801      	add	r0, sp, #4
   13860:	47b0      	blx	r6
   13862:	7020      	strb	r0, [r4, #0]
   13864:	2001      	movs	r0, #1
   13866:	e7e8      	b.n	1383a <MQTTDeserialize_connack+0x1a>
   13868:	00013ab3 	.word	0x00013ab3
   1386c:	00013a85 	.word	0x00013a85

00013870 <MQTTSerialize_zero>:
   13870:	b510      	push	{r4, lr}
   13872:	b082      	sub	sp, #8
   13874:	0004      	movs	r4, r0
   13876:	9001      	str	r0, [sp, #4]
   13878:	2901      	cmp	r1, #1
   1387a:	dd0f      	ble.n	1389c <MQTTSerialize_zero+0x2c>
   1387c:	210f      	movs	r1, #15
   1387e:	4011      	ands	r1, r2
   13880:	0109      	lsls	r1, r1, #4
   13882:	a801      	add	r0, sp, #4
   13884:	4b07      	ldr	r3, [pc, #28]	; (138a4 <MQTTSerialize_zero+0x34>)
   13886:	4798      	blx	r3
   13888:	2100      	movs	r1, #0
   1388a:	9801      	ldr	r0, [sp, #4]
   1388c:	4b06      	ldr	r3, [pc, #24]	; (138a8 <MQTTSerialize_zero+0x38>)
   1388e:	4798      	blx	r3
   13890:	9b01      	ldr	r3, [sp, #4]
   13892:	469c      	mov	ip, r3
   13894:	4460      	add	r0, ip
   13896:	1b00      	subs	r0, r0, r4
   13898:	b002      	add	sp, #8
   1389a:	bd10      	pop	{r4, pc}
   1389c:	2002      	movs	r0, #2
   1389e:	4240      	negs	r0, r0
   138a0:	e7fa      	b.n	13898 <MQTTSerialize_zero+0x28>
   138a2:	46c0      	nop			; (mov r8, r8)
   138a4:	00013abf 	.word	0x00013abf
   138a8:	000139d5 	.word	0x000139d5

000138ac <MQTTSerialize_disconnect>:
   138ac:	b510      	push	{r4, lr}
   138ae:	220e      	movs	r2, #14
   138b0:	4b01      	ldr	r3, [pc, #4]	; (138b8 <MQTTSerialize_disconnect+0xc>)
   138b2:	4798      	blx	r3
   138b4:	bd10      	pop	{r4, pc}
   138b6:	46c0      	nop			; (mov r8, r8)
   138b8:	00013871 	.word	0x00013871

000138bc <MQTTSerialize_pingreq>:
   138bc:	b510      	push	{r4, lr}
   138be:	220c      	movs	r2, #12
   138c0:	4b01      	ldr	r3, [pc, #4]	; (138c8 <MQTTSerialize_pingreq+0xc>)
   138c2:	4798      	blx	r3
   138c4:	bd10      	pop	{r4, pc}
   138c6:	46c0      	nop			; (mov r8, r8)
   138c8:	00013871 	.word	0x00013871

000138cc <MQTTDeserialize_publish>:
   138cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   138ce:	b085      	sub	sp, #20
   138d0:	0005      	movs	r5, r0
   138d2:	000e      	movs	r6, r1
   138d4:	0014      	movs	r4, r2
   138d6:	9301      	str	r3, [sp, #4]
   138d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   138da:	9303      	str	r3, [sp, #12]
   138dc:	2300      	movs	r3, #0
   138de:	9302      	str	r3, [sp, #8]
   138e0:	a803      	add	r0, sp, #12
   138e2:	4b1c      	ldr	r3, [pc, #112]	; (13954 <MQTTDeserialize_publish+0x88>)
   138e4:	4798      	blx	r3
   138e6:	0003      	movs	r3, r0
   138e8:	22f0      	movs	r2, #240	; 0xf0
   138ea:	4010      	ands	r0, r2
   138ec:	2700      	movs	r7, #0
   138ee:	2830      	cmp	r0, #48	; 0x30
   138f0:	d002      	beq.n	138f8 <MQTTDeserialize_publish+0x2c>
   138f2:	0038      	movs	r0, r7
   138f4:	b005      	add	sp, #20
   138f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   138f8:	071a      	lsls	r2, r3, #28
   138fa:	0fd2      	lsrs	r2, r2, #31
   138fc:	702a      	strb	r2, [r5, #0]
   138fe:	075a      	lsls	r2, r3, #29
   13900:	0f92      	lsrs	r2, r2, #30
   13902:	6032      	str	r2, [r6, #0]
   13904:	07db      	lsls	r3, r3, #31
   13906:	0fdb      	lsrs	r3, r3, #31
   13908:	7023      	strb	r3, [r4, #0]
   1390a:	a902      	add	r1, sp, #8
   1390c:	9803      	ldr	r0, [sp, #12]
   1390e:	4b12      	ldr	r3, [pc, #72]	; (13958 <MQTTDeserialize_publish+0x8c>)
   13910:	4798      	blx	r3
   13912:	0007      	movs	r7, r0
   13914:	9b03      	ldr	r3, [sp, #12]
   13916:	181c      	adds	r4, r3, r0
   13918:	9403      	str	r4, [sp, #12]
   1391a:	9b02      	ldr	r3, [sp, #8]
   1391c:	469c      	mov	ip, r3
   1391e:	4464      	add	r4, ip
   13920:	0022      	movs	r2, r4
   13922:	a903      	add	r1, sp, #12
   13924:	980a      	ldr	r0, [sp, #40]	; 0x28
   13926:	4b0d      	ldr	r3, [pc, #52]	; (1395c <MQTTDeserialize_publish+0x90>)
   13928:	4798      	blx	r3
   1392a:	2800      	cmp	r0, #0
   1392c:	d0e1      	beq.n	138f2 <MQTTDeserialize_publish+0x26>
   1392e:	9b03      	ldr	r3, [sp, #12]
   13930:	1ae3      	subs	r3, r4, r3
   13932:	d4de      	bmi.n	138f2 <MQTTDeserialize_publish+0x26>
   13934:	6833      	ldr	r3, [r6, #0]
   13936:	2b00      	cmp	r3, #0
   13938:	dd04      	ble.n	13944 <MQTTDeserialize_publish+0x78>
   1393a:	a803      	add	r0, sp, #12
   1393c:	4b08      	ldr	r3, [pc, #32]	; (13960 <MQTTDeserialize_publish+0x94>)
   1393e:	4798      	blx	r3
   13940:	9b01      	ldr	r3, [sp, #4]
   13942:	8018      	strh	r0, [r3, #0]
   13944:	9b03      	ldr	r3, [sp, #12]
   13946:	1ae4      	subs	r4, r4, r3
   13948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1394a:	6014      	str	r4, [r2, #0]
   1394c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1394e:	6013      	str	r3, [r2, #0]
   13950:	2701      	movs	r7, #1
   13952:	e7ce      	b.n	138f2 <MQTTDeserialize_publish+0x26>
   13954:	00013ab3 	.word	0x00013ab3
   13958:	00013a85 	.word	0x00013a85
   1395c:	00013b79 	.word	0x00013b79
   13960:	00013aa1 	.word	0x00013aa1

00013964 <MQTTDeserialize_ack>:
   13964:	b570      	push	{r4, r5, r6, lr}
   13966:	b082      	sub	sp, #8
   13968:	0005      	movs	r5, r0
   1396a:	000e      	movs	r6, r1
   1396c:	0014      	movs	r4, r2
   1396e:	9301      	str	r3, [sp, #4]
   13970:	a801      	add	r0, sp, #4
   13972:	4b0c      	ldr	r3, [pc, #48]	; (139a4 <MQTTDeserialize_ack+0x40>)
   13974:	4798      	blx	r3
   13976:	0703      	lsls	r3, r0, #28
   13978:	0fdb      	lsrs	r3, r3, #31
   1397a:	7033      	strb	r3, [r6, #0]
   1397c:	0600      	lsls	r0, r0, #24
   1397e:	0f00      	lsrs	r0, r0, #28
   13980:	7028      	strb	r0, [r5, #0]
   13982:	4669      	mov	r1, sp
   13984:	9801      	ldr	r0, [sp, #4]
   13986:	4b08      	ldr	r3, [pc, #32]	; (139a8 <MQTTDeserialize_ack+0x44>)
   13988:	4798      	blx	r3
   1398a:	9b01      	ldr	r3, [sp, #4]
   1398c:	181b      	adds	r3, r3, r0
   1398e:	9301      	str	r3, [sp, #4]
   13990:	9b00      	ldr	r3, [sp, #0]
   13992:	2b01      	cmp	r3, #1
   13994:	dd04      	ble.n	139a0 <MQTTDeserialize_ack+0x3c>
   13996:	a801      	add	r0, sp, #4
   13998:	4b04      	ldr	r3, [pc, #16]	; (139ac <MQTTDeserialize_ack+0x48>)
   1399a:	4798      	blx	r3
   1399c:	8020      	strh	r0, [r4, #0]
   1399e:	2001      	movs	r0, #1
   139a0:	b002      	add	sp, #8
   139a2:	bd70      	pop	{r4, r5, r6, pc}
   139a4:	00013ab3 	.word	0x00013ab3
   139a8:	00013a85 	.word	0x00013a85
   139ac:	00013aa1 	.word	0x00013aa1

000139b0 <bufchar>:
   139b0:	b530      	push	{r4, r5, lr}
   139b2:	2900      	cmp	r1, #0
   139b4:	dd0a      	ble.n	139cc <bufchar+0x1c>
   139b6:	4b06      	ldr	r3, [pc, #24]	; (139d0 <bufchar+0x20>)
   139b8:	681b      	ldr	r3, [r3, #0]
   139ba:	185d      	adds	r5, r3, r1
   139bc:	002c      	movs	r4, r5
   139be:	781a      	ldrb	r2, [r3, #0]
   139c0:	7002      	strb	r2, [r0, #0]
   139c2:	3301      	adds	r3, #1
   139c4:	42a3      	cmp	r3, r4
   139c6:	d1fa      	bne.n	139be <bufchar+0xe>
   139c8:	4b01      	ldr	r3, [pc, #4]	; (139d0 <bufchar+0x20>)
   139ca:	601d      	str	r5, [r3, #0]
   139cc:	0008      	movs	r0, r1
   139ce:	bd30      	pop	{r4, r5, pc}
   139d0:	2000082c 	.word	0x2000082c

000139d4 <MQTTPacket_encode>:
   139d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   139d6:	b083      	sub	sp, #12
   139d8:	2500      	movs	r5, #0
   139da:	267f      	movs	r6, #127	; 0x7f
   139dc:	2780      	movs	r7, #128	; 0x80
   139de:	427f      	negs	r7, r7
   139e0:	9501      	str	r5, [sp, #4]
   139e2:	17ca      	asrs	r2, r1, #31
   139e4:	0e54      	lsrs	r4, r2, #25
   139e6:	190b      	adds	r3, r1, r4
   139e8:	4033      	ands	r3, r6
   139ea:	1b1b      	subs	r3, r3, r4
   139ec:	b2db      	uxtb	r3, r3
   139ee:	4032      	ands	r2, r6
   139f0:	1851      	adds	r1, r2, r1
   139f2:	11c9      	asrs	r1, r1, #7
   139f4:	2900      	cmp	r1, #0
   139f6:	dd03      	ble.n	13a00 <MQTTPacket_encode+0x2c>
   139f8:	433b      	orrs	r3, r7
   139fa:	5543      	strb	r3, [r0, r5]
   139fc:	3501      	adds	r5, #1
   139fe:	e7ef      	b.n	139e0 <MQTTPacket_encode+0xc>
   13a00:	5543      	strb	r3, [r0, r5]
   13a02:	9801      	ldr	r0, [sp, #4]
   13a04:	3001      	adds	r0, #1
   13a06:	b003      	add	sp, #12
   13a08:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013a0a <MQTTPacket_decode>:
   13a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a0c:	46ce      	mov	lr, r9
   13a0e:	4647      	mov	r7, r8
   13a10:	b580      	push	{r7, lr}
   13a12:	b083      	sub	sp, #12
   13a14:	4680      	mov	r8, r0
   13a16:	000f      	movs	r7, r1
   13a18:	2300      	movs	r3, #0
   13a1a:	600b      	str	r3, [r1, #0]
   13a1c:	2401      	movs	r4, #1
   13a1e:	2601      	movs	r6, #1
   13a20:	466b      	mov	r3, sp
   13a22:	1ddd      	adds	r5, r3, #7
   13a24:	237f      	movs	r3, #127	; 0x7f
   13a26:	4699      	mov	r9, r3
   13a28:	2101      	movs	r1, #1
   13a2a:	0028      	movs	r0, r5
   13a2c:	47c0      	blx	r8
   13a2e:	2801      	cmp	r0, #1
   13a30:	d10e      	bne.n	13a50 <MQTTPacket_decode+0x46>
   13a32:	782b      	ldrb	r3, [r5, #0]
   13a34:	464a      	mov	r2, r9
   13a36:	401a      	ands	r2, r3
   13a38:	4372      	muls	r2, r6
   13a3a:	6839      	ldr	r1, [r7, #0]
   13a3c:	468c      	mov	ip, r1
   13a3e:	4462      	add	r2, ip
   13a40:	603a      	str	r2, [r7, #0]
   13a42:	01f6      	lsls	r6, r6, #7
   13a44:	b25b      	sxtb	r3, r3
   13a46:	2b00      	cmp	r3, #0
   13a48:	da02      	bge.n	13a50 <MQTTPacket_decode+0x46>
   13a4a:	3401      	adds	r4, #1
   13a4c:	2c05      	cmp	r4, #5
   13a4e:	d1eb      	bne.n	13a28 <MQTTPacket_decode+0x1e>
   13a50:	0020      	movs	r0, r4
   13a52:	b003      	add	sp, #12
   13a54:	bc0c      	pop	{r2, r3}
   13a56:	4690      	mov	r8, r2
   13a58:	4699      	mov	r9, r3
   13a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013a5c <MQTTPacket_len>:
   13a5c:	0003      	movs	r3, r0
   13a5e:	1c42      	adds	r2, r0, #1
   13a60:	3002      	adds	r0, #2
   13a62:	2a7f      	cmp	r2, #127	; 0x7f
   13a64:	dd07      	ble.n	13a76 <MQTTPacket_len+0x1a>
   13a66:	4905      	ldr	r1, [pc, #20]	; (13a7c <MQTTPacket_len+0x20>)
   13a68:	1cd8      	adds	r0, r3, #3
   13a6a:	428a      	cmp	r2, r1
   13a6c:	dd03      	ble.n	13a76 <MQTTPacket_len+0x1a>
   13a6e:	4904      	ldr	r1, [pc, #16]	; (13a80 <MQTTPacket_len+0x24>)
   13a70:	1d58      	adds	r0, r3, #5
   13a72:	428a      	cmp	r2, r1
   13a74:	dd00      	ble.n	13a78 <MQTTPacket_len+0x1c>
   13a76:	4770      	bx	lr
   13a78:	1d18      	adds	r0, r3, #4
   13a7a:	e7fc      	b.n	13a76 <MQTTPacket_len+0x1a>
   13a7c:	00003fff 	.word	0x00003fff
   13a80:	001ffffe 	.word	0x001ffffe

00013a84 <MQTTPacket_decodeBuf>:
   13a84:	b510      	push	{r4, lr}
   13a86:	4b03      	ldr	r3, [pc, #12]	; (13a94 <MQTTPacket_decodeBuf+0x10>)
   13a88:	6018      	str	r0, [r3, #0]
   13a8a:	4803      	ldr	r0, [pc, #12]	; (13a98 <MQTTPacket_decodeBuf+0x14>)
   13a8c:	4b03      	ldr	r3, [pc, #12]	; (13a9c <MQTTPacket_decodeBuf+0x18>)
   13a8e:	4798      	blx	r3
   13a90:	bd10      	pop	{r4, pc}
   13a92:	46c0      	nop			; (mov r8, r8)
   13a94:	2000082c 	.word	0x2000082c
   13a98:	000139b1 	.word	0x000139b1
   13a9c:	00013a0b 	.word	0x00013a0b

00013aa0 <readInt>:
   13aa0:	0001      	movs	r1, r0
   13aa2:	6802      	ldr	r2, [r0, #0]
   13aa4:	7813      	ldrb	r3, [r2, #0]
   13aa6:	021b      	lsls	r3, r3, #8
   13aa8:	7850      	ldrb	r0, [r2, #1]
   13aaa:	1818      	adds	r0, r3, r0
   13aac:	3202      	adds	r2, #2
   13aae:	600a      	str	r2, [r1, #0]
   13ab0:	4770      	bx	lr

00013ab2 <readChar>:
   13ab2:	0002      	movs	r2, r0
   13ab4:	6803      	ldr	r3, [r0, #0]
   13ab6:	7818      	ldrb	r0, [r3, #0]
   13ab8:	3301      	adds	r3, #1
   13aba:	6013      	str	r3, [r2, #0]
   13abc:	4770      	bx	lr

00013abe <writeChar>:
   13abe:	6803      	ldr	r3, [r0, #0]
   13ac0:	7019      	strb	r1, [r3, #0]
   13ac2:	6803      	ldr	r3, [r0, #0]
   13ac4:	3301      	adds	r3, #1
   13ac6:	6003      	str	r3, [r0, #0]
   13ac8:	4770      	bx	lr

00013aca <writeInt>:
   13aca:	b530      	push	{r4, r5, lr}
   13acc:	17ca      	asrs	r2, r1, #31
   13ace:	23ff      	movs	r3, #255	; 0xff
   13ad0:	001c      	movs	r4, r3
   13ad2:	4014      	ands	r4, r2
   13ad4:	1864      	adds	r4, r4, r1
   13ad6:	1224      	asrs	r4, r4, #8
   13ad8:	6805      	ldr	r5, [r0, #0]
   13ada:	702c      	strb	r4, [r5, #0]
   13adc:	6804      	ldr	r4, [r0, #0]
   13ade:	1c65      	adds	r5, r4, #1
   13ae0:	6005      	str	r5, [r0, #0]
   13ae2:	0e12      	lsrs	r2, r2, #24
   13ae4:	1889      	adds	r1, r1, r2
   13ae6:	400b      	ands	r3, r1
   13ae8:	1a9b      	subs	r3, r3, r2
   13aea:	7063      	strb	r3, [r4, #1]
   13aec:	6803      	ldr	r3, [r0, #0]
   13aee:	3301      	adds	r3, #1
   13af0:	6003      	str	r3, [r0, #0]
   13af2:	bd30      	pop	{r4, r5, pc}

00013af4 <writeCString>:
   13af4:	b570      	push	{r4, r5, r6, lr}
   13af6:	0004      	movs	r4, r0
   13af8:	000e      	movs	r6, r1
   13afa:	0008      	movs	r0, r1
   13afc:	4b08      	ldr	r3, [pc, #32]	; (13b20 <writeCString+0x2c>)
   13afe:	4798      	blx	r3
   13b00:	0005      	movs	r5, r0
   13b02:	0001      	movs	r1, r0
   13b04:	0020      	movs	r0, r4
   13b06:	4b07      	ldr	r3, [pc, #28]	; (13b24 <writeCString+0x30>)
   13b08:	4798      	blx	r3
   13b0a:	002a      	movs	r2, r5
   13b0c:	0031      	movs	r1, r6
   13b0e:	6820      	ldr	r0, [r4, #0]
   13b10:	4b05      	ldr	r3, [pc, #20]	; (13b28 <writeCString+0x34>)
   13b12:	4798      	blx	r3
   13b14:	6823      	ldr	r3, [r4, #0]
   13b16:	469c      	mov	ip, r3
   13b18:	4465      	add	r5, ip
   13b1a:	6025      	str	r5, [r4, #0]
   13b1c:	bd70      	pop	{r4, r5, r6, pc}
   13b1e:	46c0      	nop			; (mov r8, r8)
   13b20:	0001703f 	.word	0x0001703f
   13b24:	00013acb 	.word	0x00013acb
   13b28:	00016a4d 	.word	0x00016a4d

00013b2c <writeMQTTString>:
   13b2c:	b530      	push	{r4, r5, lr}
   13b2e:	b085      	sub	sp, #20
   13b30:	0005      	movs	r5, r0
   13b32:	9101      	str	r1, [sp, #4]
   13b34:	9303      	str	r3, [sp, #12]
   13b36:	1e14      	subs	r4, r2, #0
   13b38:	dc06      	bgt.n	13b48 <writeMQTTString+0x1c>
   13b3a:	9901      	ldr	r1, [sp, #4]
   13b3c:	2900      	cmp	r1, #0
   13b3e:	d010      	beq.n	13b62 <writeMQTTString+0x36>
   13b40:	4b0a      	ldr	r3, [pc, #40]	; (13b6c <writeMQTTString+0x40>)
   13b42:	4798      	blx	r3
   13b44:	b005      	add	sp, #20
   13b46:	bd30      	pop	{r4, r5, pc}
   13b48:	0011      	movs	r1, r2
   13b4a:	4b09      	ldr	r3, [pc, #36]	; (13b70 <writeMQTTString+0x44>)
   13b4c:	4798      	blx	r3
   13b4e:	0022      	movs	r2, r4
   13b50:	9903      	ldr	r1, [sp, #12]
   13b52:	6828      	ldr	r0, [r5, #0]
   13b54:	4b07      	ldr	r3, [pc, #28]	; (13b74 <writeMQTTString+0x48>)
   13b56:	4798      	blx	r3
   13b58:	682b      	ldr	r3, [r5, #0]
   13b5a:	469c      	mov	ip, r3
   13b5c:	4464      	add	r4, ip
   13b5e:	602c      	str	r4, [r5, #0]
   13b60:	e7f0      	b.n	13b44 <writeMQTTString+0x18>
   13b62:	2100      	movs	r1, #0
   13b64:	4b02      	ldr	r3, [pc, #8]	; (13b70 <writeMQTTString+0x44>)
   13b66:	4798      	blx	r3
   13b68:	e7ec      	b.n	13b44 <writeMQTTString+0x18>
   13b6a:	46c0      	nop			; (mov r8, r8)
   13b6c:	00013af5 	.word	0x00013af5
   13b70:	00013acb 	.word	0x00013acb
   13b74:	00016a4d 	.word	0x00016a4d

00013b78 <readMQTTLenString>:
   13b78:	b570      	push	{r4, r5, r6, lr}
   13b7a:	0005      	movs	r5, r0
   13b7c:	000c      	movs	r4, r1
   13b7e:	0016      	movs	r6, r2
   13b80:	680b      	ldr	r3, [r1, #0]
   13b82:	1ad3      	subs	r3, r2, r3
   13b84:	2b01      	cmp	r3, #1
   13b86:	dd12      	ble.n	13bae <readMQTTLenString+0x36>
   13b88:	0008      	movs	r0, r1
   13b8a:	4b0a      	ldr	r3, [pc, #40]	; (13bb4 <readMQTTLenString+0x3c>)
   13b8c:	4798      	blx	r3
   13b8e:	6068      	str	r0, [r5, #4]
   13b90:	6822      	ldr	r2, [r4, #0]
   13b92:	1811      	adds	r1, r2, r0
   13b94:	2300      	movs	r3, #0
   13b96:	428e      	cmp	r6, r1
   13b98:	d305      	bcc.n	13ba6 <readMQTTLenString+0x2e>
   13b9a:	60aa      	str	r2, [r5, #8]
   13b9c:	6823      	ldr	r3, [r4, #0]
   13b9e:	469c      	mov	ip, r3
   13ba0:	4460      	add	r0, ip
   13ba2:	6020      	str	r0, [r4, #0]
   13ba4:	2301      	movs	r3, #1
   13ba6:	2200      	movs	r2, #0
   13ba8:	602a      	str	r2, [r5, #0]
   13baa:	0018      	movs	r0, r3
   13bac:	bd70      	pop	{r4, r5, r6, pc}
   13bae:	2300      	movs	r3, #0
   13bb0:	e7f9      	b.n	13ba6 <readMQTTLenString+0x2e>
   13bb2:	46c0      	nop			; (mov r8, r8)
   13bb4:	00013aa1 	.word	0x00013aa1

00013bb8 <MQTTstrlen>:
   13bb8:	b500      	push	{lr}
   13bba:	b085      	sub	sp, #20
   13bbc:	9102      	str	r1, [sp, #8]
   13bbe:	2800      	cmp	r0, #0
   13bc0:	d003      	beq.n	13bca <MQTTstrlen+0x12>
   13bc2:	4b03      	ldr	r3, [pc, #12]	; (13bd0 <MQTTstrlen+0x18>)
   13bc4:	4798      	blx	r3
   13bc6:	b005      	add	sp, #20
   13bc8:	bd00      	pop	{pc}
   13bca:	9802      	ldr	r0, [sp, #8]
   13bcc:	e7fb      	b.n	13bc6 <MQTTstrlen+0xe>
   13bce:	46c0      	nop			; (mov r8, r8)
   13bd0:	0001703f 	.word	0x0001703f

00013bd4 <MQTTPacket_equals>:
   13bd4:	b570      	push	{r4, r5, r6, lr}
   13bd6:	000d      	movs	r5, r1
   13bd8:	6806      	ldr	r6, [r0, #0]
   13bda:	2e00      	cmp	r6, #0
   13bdc:	d00b      	beq.n	13bf6 <MQTTPacket_equals+0x22>
   13bde:	0030      	movs	r0, r6
   13be0:	4b0b      	ldr	r3, [pc, #44]	; (13c10 <MQTTPacket_equals+0x3c>)
   13be2:	4798      	blx	r3
   13be4:	0004      	movs	r4, r0
   13be6:	0028      	movs	r0, r5
   13be8:	4b09      	ldr	r3, [pc, #36]	; (13c10 <MQTTPacket_equals+0x3c>)
   13bea:	4798      	blx	r3
   13bec:	2300      	movs	r3, #0
   13bee:	4284      	cmp	r4, r0
   13bf0:	d004      	beq.n	13bfc <MQTTPacket_equals+0x28>
   13bf2:	0018      	movs	r0, r3
   13bf4:	bd70      	pop	{r4, r5, r6, pc}
   13bf6:	6886      	ldr	r6, [r0, #8]
   13bf8:	6844      	ldr	r4, [r0, #4]
   13bfa:	e7f4      	b.n	13be6 <MQTTPacket_equals+0x12>
   13bfc:	0022      	movs	r2, r4
   13bfe:	0029      	movs	r1, r5
   13c00:	0030      	movs	r0, r6
   13c02:	4b04      	ldr	r3, [pc, #16]	; (13c14 <MQTTPacket_equals+0x40>)
   13c04:	4798      	blx	r3
   13c06:	4243      	negs	r3, r0
   13c08:	4143      	adcs	r3, r0
   13c0a:	b2db      	uxtb	r3, r3
   13c0c:	e7f1      	b.n	13bf2 <MQTTPacket_equals+0x1e>
   13c0e:	46c0      	nop			; (mov r8, r8)
   13c10:	0001703f 	.word	0x0001703f
   13c14:	0001704d 	.word	0x0001704d

00013c18 <MQTTSerialize_publishLength>:
   13c18:	b510      	push	{r4, lr}
   13c1a:	b084      	sub	sp, #16
   13c1c:	0004      	movs	r4, r0
   13c1e:	0008      	movs	r0, r1
   13c20:	0011      	movs	r1, r2
   13c22:	001a      	movs	r2, r3
   13c24:	4b05      	ldr	r3, [pc, #20]	; (13c3c <MQTTSerialize_publishLength+0x24>)
   13c26:	4798      	blx	r3
   13c28:	3002      	adds	r0, #2
   13c2a:	9b06      	ldr	r3, [sp, #24]
   13c2c:	469c      	mov	ip, r3
   13c2e:	4460      	add	r0, ip
   13c30:	2c00      	cmp	r4, #0
   13c32:	dd00      	ble.n	13c36 <MQTTSerialize_publishLength+0x1e>
   13c34:	3002      	adds	r0, #2
   13c36:	b004      	add	sp, #16
   13c38:	bd10      	pop	{r4, pc}
   13c3a:	46c0      	nop			; (mov r8, r8)
   13c3c:	00013bb9 	.word	0x00013bb9

00013c40 <MQTTSerialize_publish>:
   13c40:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c42:	46de      	mov	lr, fp
   13c44:	4657      	mov	r7, sl
   13c46:	464e      	mov	r6, r9
   13c48:	b5c0      	push	{r6, r7, lr}
   13c4a:	b084      	sub	sp, #16
   13c4c:	0007      	movs	r7, r0
   13c4e:	468b      	mov	fp, r1
   13c50:	4692      	mov	sl, r2
   13c52:	001e      	movs	r6, r3
   13c54:	ab0c      	add	r3, sp, #48	; 0x30
   13c56:	781b      	ldrb	r3, [r3, #0]
   13c58:	4699      	mov	r9, r3
   13c5a:	ab0d      	add	r3, sp, #52	; 0x34
   13c5c:	881c      	ldrh	r4, [r3, #0]
   13c5e:	9003      	str	r0, [sp, #12]
   13c60:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13c62:	9300      	str	r3, [sp, #0]
   13c64:	990e      	ldr	r1, [sp, #56]	; 0x38
   13c66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13c68:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13c6a:	0030      	movs	r0, r6
   13c6c:	4d1f      	ldr	r5, [pc, #124]	; (13cec <MQTTSerialize_publish+0xac>)
   13c6e:	47a8      	blx	r5
   13c70:	0005      	movs	r5, r0
   13c72:	4b1f      	ldr	r3, [pc, #124]	; (13cf0 <MQTTSerialize_publish+0xb0>)
   13c74:	4798      	blx	r3
   13c76:	4558      	cmp	r0, fp
   13c78:	dc34      	bgt.n	13ce4 <MQTTSerialize_publish+0xa4>
   13c7a:	2201      	movs	r2, #1
   13c7c:	4653      	mov	r3, sl
   13c7e:	4013      	ands	r3, r2
   13c80:	00db      	lsls	r3, r3, #3
   13c82:	2103      	movs	r1, #3
   13c84:	4031      	ands	r1, r6
   13c86:	0048      	lsls	r0, r1, #1
   13c88:	2130      	movs	r1, #48	; 0x30
   13c8a:	4319      	orrs	r1, r3
   13c8c:	4301      	orrs	r1, r0
   13c8e:	464b      	mov	r3, r9
   13c90:	4013      	ands	r3, r2
   13c92:	4391      	bics	r1, r2
   13c94:	4319      	orrs	r1, r3
   13c96:	a803      	add	r0, sp, #12
   13c98:	4b16      	ldr	r3, [pc, #88]	; (13cf4 <MQTTSerialize_publish+0xb4>)
   13c9a:	4798      	blx	r3
   13c9c:	0029      	movs	r1, r5
   13c9e:	9803      	ldr	r0, [sp, #12]
   13ca0:	4b15      	ldr	r3, [pc, #84]	; (13cf8 <MQTTSerialize_publish+0xb8>)
   13ca2:	4798      	blx	r3
   13ca4:	9b03      	ldr	r3, [sp, #12]
   13ca6:	469c      	mov	ip, r3
   13ca8:	4460      	add	r0, ip
   13caa:	9003      	str	r0, [sp, #12]
   13cac:	990e      	ldr	r1, [sp, #56]	; 0x38
   13cae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13cb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13cb2:	a803      	add	r0, sp, #12
   13cb4:	4d11      	ldr	r5, [pc, #68]	; (13cfc <MQTTSerialize_publish+0xbc>)
   13cb6:	47a8      	blx	r5
   13cb8:	2e00      	cmp	r6, #0
   13cba:	dd03      	ble.n	13cc4 <MQTTSerialize_publish+0x84>
   13cbc:	0021      	movs	r1, r4
   13cbe:	a803      	add	r0, sp, #12
   13cc0:	4b0f      	ldr	r3, [pc, #60]	; (13d00 <MQTTSerialize_publish+0xc0>)
   13cc2:	4798      	blx	r3
   13cc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13cc6:	9911      	ldr	r1, [sp, #68]	; 0x44
   13cc8:	9803      	ldr	r0, [sp, #12]
   13cca:	4b0e      	ldr	r3, [pc, #56]	; (13d04 <MQTTSerialize_publish+0xc4>)
   13ccc:	4798      	blx	r3
   13cce:	9b03      	ldr	r3, [sp, #12]
   13cd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13cd2:	4694      	mov	ip, r2
   13cd4:	4463      	add	r3, ip
   13cd6:	1bd8      	subs	r0, r3, r7
   13cd8:	b004      	add	sp, #16
   13cda:	bc1c      	pop	{r2, r3, r4}
   13cdc:	4691      	mov	r9, r2
   13cde:	469a      	mov	sl, r3
   13ce0:	46a3      	mov	fp, r4
   13ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ce4:	2002      	movs	r0, #2
   13ce6:	4240      	negs	r0, r0
   13ce8:	e7f6      	b.n	13cd8 <MQTTSerialize_publish+0x98>
   13cea:	46c0      	nop			; (mov r8, r8)
   13cec:	00013c19 	.word	0x00013c19
   13cf0:	00013a5d 	.word	0x00013a5d
   13cf4:	00013abf 	.word	0x00013abf
   13cf8:	000139d5 	.word	0x000139d5
   13cfc:	00013b2d 	.word	0x00013b2d
   13d00:	00013acb 	.word	0x00013acb
   13d04:	00016a4d 	.word	0x00016a4d

00013d08 <MQTTSerialize_ack>:
   13d08:	b530      	push	{r4, r5, lr}
   13d0a:	b083      	sub	sp, #12
   13d0c:	0004      	movs	r4, r0
   13d0e:	a806      	add	r0, sp, #24
   13d10:	8805      	ldrh	r5, [r0, #0]
   13d12:	9401      	str	r4, [sp, #4]
   13d14:	2903      	cmp	r1, #3
   13d16:	dd1e      	ble.n	13d56 <MQTTSerialize_ack+0x4e>
   13d18:	210f      	movs	r1, #15
   13d1a:	4011      	ands	r1, r2
   13d1c:	2001      	movs	r0, #1
   13d1e:	4003      	ands	r3, r0
   13d20:	00db      	lsls	r3, r3, #3
   13d22:	0109      	lsls	r1, r1, #4
   13d24:	3a06      	subs	r2, #6
   13d26:	4250      	negs	r0, r2
   13d28:	4142      	adcs	r2, r0
   13d2a:	0052      	lsls	r2, r2, #1
   13d2c:	4319      	orrs	r1, r3
   13d2e:	4311      	orrs	r1, r2
   13d30:	a801      	add	r0, sp, #4
   13d32:	4b0a      	ldr	r3, [pc, #40]	; (13d5c <MQTTSerialize_ack+0x54>)
   13d34:	4798      	blx	r3
   13d36:	2102      	movs	r1, #2
   13d38:	9801      	ldr	r0, [sp, #4]
   13d3a:	4b09      	ldr	r3, [pc, #36]	; (13d60 <MQTTSerialize_ack+0x58>)
   13d3c:	4798      	blx	r3
   13d3e:	9b01      	ldr	r3, [sp, #4]
   13d40:	469c      	mov	ip, r3
   13d42:	4460      	add	r0, ip
   13d44:	9001      	str	r0, [sp, #4]
   13d46:	0029      	movs	r1, r5
   13d48:	a801      	add	r0, sp, #4
   13d4a:	4b06      	ldr	r3, [pc, #24]	; (13d64 <MQTTSerialize_ack+0x5c>)
   13d4c:	4798      	blx	r3
   13d4e:	9b01      	ldr	r3, [sp, #4]
   13d50:	1b18      	subs	r0, r3, r4
   13d52:	b003      	add	sp, #12
   13d54:	bd30      	pop	{r4, r5, pc}
   13d56:	2002      	movs	r0, #2
   13d58:	4240      	negs	r0, r0
   13d5a:	e7fa      	b.n	13d52 <MQTTSerialize_ack+0x4a>
   13d5c:	00013abf 	.word	0x00013abf
   13d60:	000139d5 	.word	0x000139d5
   13d64:	00013acb 	.word	0x00013acb

00013d68 <MQTTSerialize_subscribeLength>:
   13d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d6a:	46c6      	mov	lr, r8
   13d6c:	b500      	push	{lr}
   13d6e:	1e07      	subs	r7, r0, #0
   13d70:	dd12      	ble.n	13d98 <MQTTSerialize_subscribeLength+0x30>
   13d72:	000c      	movs	r4, r1
   13d74:	2602      	movs	r6, #2
   13d76:	2500      	movs	r5, #0
   13d78:	4b08      	ldr	r3, [pc, #32]	; (13d9c <MQTTSerialize_subscribeLength+0x34>)
   13d7a:	4698      	mov	r8, r3
   13d7c:	6820      	ldr	r0, [r4, #0]
   13d7e:	6861      	ldr	r1, [r4, #4]
   13d80:	68a2      	ldr	r2, [r4, #8]
   13d82:	47c0      	blx	r8
   13d84:	3003      	adds	r0, #3
   13d86:	1836      	adds	r6, r6, r0
   13d88:	3501      	adds	r5, #1
   13d8a:	340c      	adds	r4, #12
   13d8c:	42af      	cmp	r7, r5
   13d8e:	d1f5      	bne.n	13d7c <MQTTSerialize_subscribeLength+0x14>
   13d90:	0030      	movs	r0, r6
   13d92:	bc04      	pop	{r2}
   13d94:	4690      	mov	r8, r2
   13d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13d98:	2602      	movs	r6, #2
   13d9a:	e7f9      	b.n	13d90 <MQTTSerialize_subscribeLength+0x28>
   13d9c:	00013bb9 	.word	0x00013bb9

00013da0 <MQTTSerialize_subscribe>:
   13da0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13da2:	46d6      	mov	lr, sl
   13da4:	464f      	mov	r7, r9
   13da6:	4646      	mov	r6, r8
   13da8:	b5c0      	push	{r6, r7, lr}
   13daa:	b084      	sub	sp, #16
   13dac:	4682      	mov	sl, r0
   13dae:	000e      	movs	r6, r1
   13db0:	0015      	movs	r5, r2
   13db2:	9301      	str	r3, [sp, #4]
   13db4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   13db6:	9003      	str	r0, [sp, #12]
   13db8:	990d      	ldr	r1, [sp, #52]	; 0x34
   13dba:	0038      	movs	r0, r7
   13dbc:	4b1f      	ldr	r3, [pc, #124]	; (13e3c <MQTTSerialize_subscribe+0x9c>)
   13dbe:	4798      	blx	r3
   13dc0:	0004      	movs	r4, r0
   13dc2:	4b1f      	ldr	r3, [pc, #124]	; (13e40 <MQTTSerialize_subscribe+0xa0>)
   13dc4:	4798      	blx	r3
   13dc6:	42b0      	cmp	r0, r6
   13dc8:	dc34      	bgt.n	13e34 <MQTTSerialize_subscribe+0x94>
   13dca:	2101      	movs	r1, #1
   13dcc:	4029      	ands	r1, r5
   13dce:	00ca      	lsls	r2, r1, #3
   13dd0:	2180      	movs	r1, #128	; 0x80
   13dd2:	4311      	orrs	r1, r2
   13dd4:	2302      	movs	r3, #2
   13dd6:	4319      	orrs	r1, r3
   13dd8:	a803      	add	r0, sp, #12
   13dda:	4b1a      	ldr	r3, [pc, #104]	; (13e44 <MQTTSerialize_subscribe+0xa4>)
   13ddc:	4798      	blx	r3
   13dde:	0021      	movs	r1, r4
   13de0:	9803      	ldr	r0, [sp, #12]
   13de2:	4b19      	ldr	r3, [pc, #100]	; (13e48 <MQTTSerialize_subscribe+0xa8>)
   13de4:	4798      	blx	r3
   13de6:	9a03      	ldr	r2, [sp, #12]
   13de8:	4694      	mov	ip, r2
   13dea:	4460      	add	r0, ip
   13dec:	9003      	str	r0, [sp, #12]
   13dee:	9901      	ldr	r1, [sp, #4]
   13df0:	a803      	add	r0, sp, #12
   13df2:	4b16      	ldr	r3, [pc, #88]	; (13e4c <MQTTSerialize_subscribe+0xac>)
   13df4:	4798      	blx	r3
   13df6:	2f00      	cmp	r7, #0
   13df8:	dd13      	ble.n	13e22 <MQTTSerialize_subscribe+0x82>
   13dfa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13dfc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13dfe:	2500      	movs	r5, #0
   13e00:	4b13      	ldr	r3, [pc, #76]	; (13e50 <MQTTSerialize_subscribe+0xb0>)
   13e02:	4699      	mov	r9, r3
   13e04:	4b0f      	ldr	r3, [pc, #60]	; (13e44 <MQTTSerialize_subscribe+0xa4>)
   13e06:	4698      	mov	r8, r3
   13e08:	6821      	ldr	r1, [r4, #0]
   13e0a:	6862      	ldr	r2, [r4, #4]
   13e0c:	68a3      	ldr	r3, [r4, #8]
   13e0e:	a803      	add	r0, sp, #12
   13e10:	47c8      	blx	r9
   13e12:	ce02      	ldmia	r6!, {r1}
   13e14:	b2c9      	uxtb	r1, r1
   13e16:	a803      	add	r0, sp, #12
   13e18:	47c0      	blx	r8
   13e1a:	3501      	adds	r5, #1
   13e1c:	340c      	adds	r4, #12
   13e1e:	42af      	cmp	r7, r5
   13e20:	d1f2      	bne.n	13e08 <MQTTSerialize_subscribe+0x68>
   13e22:	9b03      	ldr	r3, [sp, #12]
   13e24:	4652      	mov	r2, sl
   13e26:	1a98      	subs	r0, r3, r2
   13e28:	b004      	add	sp, #16
   13e2a:	bc1c      	pop	{r2, r3, r4}
   13e2c:	4690      	mov	r8, r2
   13e2e:	4699      	mov	r9, r3
   13e30:	46a2      	mov	sl, r4
   13e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e34:	2002      	movs	r0, #2
   13e36:	4240      	negs	r0, r0
   13e38:	e7f6      	b.n	13e28 <MQTTSerialize_subscribe+0x88>
   13e3a:	46c0      	nop			; (mov r8, r8)
   13e3c:	00013d69 	.word	0x00013d69
   13e40:	00013a5d 	.word	0x00013a5d
   13e44:	00013abf 	.word	0x00013abf
   13e48:	000139d5 	.word	0x000139d5
   13e4c:	00013acb 	.word	0x00013acb
   13e50:	00013b2d 	.word	0x00013b2d

00013e54 <MQTTDeserialize_suback>:
   13e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e56:	46ce      	mov	lr, r9
   13e58:	4647      	mov	r7, r8
   13e5a:	b580      	push	{r7, lr}
   13e5c:	b083      	sub	sp, #12
   13e5e:	0004      	movs	r4, r0
   13e60:	000e      	movs	r6, r1
   13e62:	0015      	movs	r5, r2
   13e64:	001f      	movs	r7, r3
   13e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e68:	9301      	str	r3, [sp, #4]
   13e6a:	a801      	add	r0, sp, #4
   13e6c:	4b1e      	ldr	r3, [pc, #120]	; (13ee8 <MQTTDeserialize_suback+0x94>)
   13e6e:	4798      	blx	r3
   13e70:	23f0      	movs	r3, #240	; 0xf0
   13e72:	4003      	ands	r3, r0
   13e74:	2000      	movs	r0, #0
   13e76:	2b90      	cmp	r3, #144	; 0x90
   13e78:	d004      	beq.n	13e84 <MQTTDeserialize_suback+0x30>
   13e7a:	b003      	add	sp, #12
   13e7c:	bc0c      	pop	{r2, r3}
   13e7e:	4690      	mov	r8, r2
   13e80:	4699      	mov	r9, r3
   13e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e84:	4669      	mov	r1, sp
   13e86:	9801      	ldr	r0, [sp, #4]
   13e88:	4b18      	ldr	r3, [pc, #96]	; (13eec <MQTTDeserialize_suback+0x98>)
   13e8a:	4798      	blx	r3
   13e8c:	9b01      	ldr	r3, [sp, #4]
   13e8e:	181b      	adds	r3, r3, r0
   13e90:	9301      	str	r3, [sp, #4]
   13e92:	9a00      	ldr	r2, [sp, #0]
   13e94:	2a01      	cmp	r2, #1
   13e96:	ddf0      	ble.n	13e7a <MQTTDeserialize_suback+0x26>
   13e98:	4698      	mov	r8, r3
   13e9a:	4490      	add	r8, r2
   13e9c:	a801      	add	r0, sp, #4
   13e9e:	4b14      	ldr	r3, [pc, #80]	; (13ef0 <MQTTDeserialize_suback+0x9c>)
   13ea0:	4798      	blx	r3
   13ea2:	8020      	strh	r0, [r4, #0]
   13ea4:	2300      	movs	r3, #0
   13ea6:	602b      	str	r3, [r5, #0]
   13ea8:	9b01      	ldr	r3, [sp, #4]
   13eaa:	4598      	cmp	r8, r3
   13eac:	d916      	bls.n	13edc <MQTTDeserialize_suback+0x88>
   13eae:	2e00      	cmp	r6, #0
   13eb0:	db16      	blt.n	13ee0 <MQTTDeserialize_suback+0x8c>
   13eb2:	2300      	movs	r3, #0
   13eb4:	4a0c      	ldr	r2, [pc, #48]	; (13ee8 <MQTTDeserialize_suback+0x94>)
   13eb6:	4691      	mov	r9, r2
   13eb8:	1c5a      	adds	r2, r3, #1
   13eba:	602a      	str	r2, [r5, #0]
   13ebc:	009b      	lsls	r3, r3, #2
   13ebe:	18fc      	adds	r4, r7, r3
   13ec0:	a801      	add	r0, sp, #4
   13ec2:	47c8      	blx	r9
   13ec4:	6020      	str	r0, [r4, #0]
   13ec6:	9b01      	ldr	r3, [sp, #4]
   13ec8:	4598      	cmp	r8, r3
   13eca:	d905      	bls.n	13ed8 <MQTTDeserialize_suback+0x84>
   13ecc:	682b      	ldr	r3, [r5, #0]
   13ece:	42b3      	cmp	r3, r6
   13ed0:	ddf2      	ble.n	13eb8 <MQTTDeserialize_suback+0x64>
   13ed2:	2001      	movs	r0, #1
   13ed4:	4240      	negs	r0, r0
   13ed6:	e7d0      	b.n	13e7a <MQTTDeserialize_suback+0x26>
   13ed8:	2001      	movs	r0, #1
   13eda:	e7ce      	b.n	13e7a <MQTTDeserialize_suback+0x26>
   13edc:	2001      	movs	r0, #1
   13ede:	e7cc      	b.n	13e7a <MQTTDeserialize_suback+0x26>
   13ee0:	2001      	movs	r0, #1
   13ee2:	4240      	negs	r0, r0
   13ee4:	e7c9      	b.n	13e7a <MQTTDeserialize_suback+0x26>
   13ee6:	46c0      	nop			; (mov r8, r8)
   13ee8:	00013ab3 	.word	0x00013ab3
   13eec:	00013a85 	.word	0x00013a85
   13ef0:	00013aa1 	.word	0x00013aa1

00013ef4 <clear_buffer>:

/** 
* Clears the stdin buffer for receiving new command
*/
void clear_buffer (uint8_t* buffer)
{
   13ef4:	0002      	movs	r2, r0
   13ef6:	3219      	adds	r2, #25
	for(int i = 0 ; i < CLI_BUF_SIZE; i++)
		buffer[i] = 0;	
   13ef8:	2300      	movs	r3, #0
   13efa:	7003      	strb	r3, [r0, #0]
   13efc:	3001      	adds	r0, #1
	for(int i = 0 ; i < CLI_BUF_SIZE; i++)
   13efe:	4290      	cmp	r0, r2
   13f00:	d1fb      	bne.n	13efa <clear_buffer+0x6>
}
   13f02:	4770      	bx	lr

00013f04 <read_to_buffer>:

/**
* Reads char by char from the stdin serial with backspace handling
*/
void read_to_buffer (uint8_t* buffer)
{
   13f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f06:	46ce      	mov	lr, r9
   13f08:	4647      	mov	r7, r8
   13f0a:	b580      	push	{r7, lr}
   13f0c:	0007      	movs	r7, r0
	int i = 0;
   13f0e:	2400      	movs	r4, #0
	
	while(i < CLI_BUF_SIZE)
	{
		buffer[i] = getchar();
   13f10:	4b4b      	ldr	r3, [pc, #300]	; (14040 <read_to_buffer+0x13c>)
   13f12:	4698      	mov	r8, r3
			}				
					
			continue;
		}
		
		putchar(buffer[i]);
   13f14:	4699      	mov	r9, r3
   13f16:	e06a      	b.n	13fee <read_to_buffer+0xea>
		buffer[i] = getchar();
   13f18:	6841      	ldr	r1, [r0, #4]
   13f1a:	4b4a      	ldr	r3, [pc, #296]	; (14044 <read_to_buffer+0x140>)
   13f1c:	4798      	blx	r3
   13f1e:	b2c1      	uxtb	r1, r0
   13f20:	e074      	b.n	1400c <read_to_buffer+0x108>
			if(i != 0)
   13f22:	2c00      	cmp	r4, #0
   13f24:	d045      	beq.n	13fb2 <read_to_buffer+0xae>
				putchar(buffer[i]); // This guy moves the cursor in the terminal (buffer of i contains \b)
   13f26:	4b46      	ldr	r3, [pc, #280]	; (14040 <read_to_buffer+0x13c>)
   13f28:	6818      	ldr	r0, [r3, #0]
   13f2a:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   13f2c:	6893      	ldr	r3, [r2, #8]
   13f2e:	3b01      	subs	r3, #1
   13f30:	6093      	str	r3, [r2, #8]
   13f32:	2b00      	cmp	r3, #0
   13f34:	db26      	blt.n	13f84 <read_to_buffer+0x80>
		return (*_p->_p++ = _c);
   13f36:	6813      	ldr	r3, [r2, #0]
   13f38:	1c59      	adds	r1, r3, #1
   13f3a:	6011      	str	r1, [r2, #0]
   13f3c:	2208      	movs	r2, #8
   13f3e:	701a      	strb	r2, [r3, #0]
				putchar(' ');		// This guy prints a space	
   13f40:	4b3f      	ldr	r3, [pc, #252]	; (14040 <read_to_buffer+0x13c>)
   13f42:	6818      	ldr	r0, [r3, #0]
   13f44:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   13f46:	6893      	ldr	r3, [r2, #8]
   13f48:	3b01      	subs	r3, #1
   13f4a:	6093      	str	r3, [r2, #8]
   13f4c:	2b00      	cmp	r3, #0
   13f4e:	db20      	blt.n	13f92 <read_to_buffer+0x8e>
		return (*_p->_p++ = _c);
   13f50:	6813      	ldr	r3, [r2, #0]
   13f52:	1c59      	adds	r1, r3, #1
   13f54:	6011      	str	r1, [r2, #0]
   13f56:	2220      	movs	r2, #32
   13f58:	701a      	strb	r2, [r3, #0]
				putchar(buffer[i]); // This guy again goes back to where it should be
   13f5a:	4b39      	ldr	r3, [pc, #228]	; (14040 <read_to_buffer+0x13c>)
   13f5c:	681b      	ldr	r3, [r3, #0]
   13f5e:	469c      	mov	ip, r3
   13f60:	7831      	ldrb	r1, [r6, #0]
   13f62:	689a      	ldr	r2, [r3, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   13f64:	6893      	ldr	r3, [r2, #8]
   13f66:	3b01      	subs	r3, #1
   13f68:	6093      	str	r3, [r2, #8]
   13f6a:	2b00      	cmp	r3, #0
   13f6c:	db18      	blt.n	13fa0 <read_to_buffer+0x9c>
		return (*_p->_p++ = _c);
   13f6e:	6813      	ldr	r3, [r2, #0]
   13f70:	1c58      	adds	r0, r3, #1
   13f72:	6010      	str	r0, [r2, #0]
   13f74:	7019      	strb	r1, [r3, #0]
				buffer[i] = 0;
   13f76:	2300      	movs	r3, #0
   13f78:	7033      	strb	r3, [r6, #0]
				buffer[i-1] = 0;
   13f7a:	197d      	adds	r5, r7, r5
   13f7c:	3d01      	subs	r5, #1
   13f7e:	702b      	strb	r3, [r5, #0]
				i--;	
   13f80:	3c01      	subs	r4, #1
   13f82:	e032      	b.n	13fea <read_to_buffer+0xe6>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   13f84:	6991      	ldr	r1, [r2, #24]
   13f86:	428b      	cmp	r3, r1
   13f88:	dad5      	bge.n	13f36 <read_to_buffer+0x32>
	else
		return (__swbuf_r(_ptr, _c, _p));
   13f8a:	2108      	movs	r1, #8
   13f8c:	4b2e      	ldr	r3, [pc, #184]	; (14048 <read_to_buffer+0x144>)
   13f8e:	4798      	blx	r3
   13f90:	e7d6      	b.n	13f40 <read_to_buffer+0x3c>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   13f92:	6991      	ldr	r1, [r2, #24]
   13f94:	428b      	cmp	r3, r1
   13f96:	dadb      	bge.n	13f50 <read_to_buffer+0x4c>
		return (__swbuf_r(_ptr, _c, _p));
   13f98:	2120      	movs	r1, #32
   13f9a:	4b2b      	ldr	r3, [pc, #172]	; (14048 <read_to_buffer+0x144>)
   13f9c:	4798      	blx	r3
   13f9e:	e7dc      	b.n	13f5a <read_to_buffer+0x56>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   13fa0:	6990      	ldr	r0, [r2, #24]
   13fa2:	4283      	cmp	r3, r0
   13fa4:	db01      	blt.n	13faa <read_to_buffer+0xa6>
   13fa6:	290a      	cmp	r1, #10
   13fa8:	d1e1      	bne.n	13f6e <read_to_buffer+0x6a>
		return (__swbuf_r(_ptr, _c, _p));
   13faa:	4660      	mov	r0, ip
   13fac:	4b26      	ldr	r3, [pc, #152]	; (14048 <read_to_buffer+0x144>)
   13fae:	4798      	blx	r3
   13fb0:	e7e1      	b.n	13f76 <read_to_buffer+0x72>
				putchar(buffer[i]);	
   13fb2:	4b23      	ldr	r3, [pc, #140]	; (14040 <read_to_buffer+0x13c>)
   13fb4:	6818      	ldr	r0, [r3, #0]
   13fb6:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   13fb8:	6893      	ldr	r3, [r2, #8]
   13fba:	3b01      	subs	r3, #1
   13fbc:	6093      	str	r3, [r2, #8]
   13fbe:	2b00      	cmp	r3, #0
   13fc0:	db07      	blt.n	13fd2 <read_to_buffer+0xce>
		return (*_p->_p++ = _c);
   13fc2:	6813      	ldr	r3, [r2, #0]
   13fc4:	1c59      	adds	r1, r3, #1
   13fc6:	6011      	str	r1, [r2, #0]
   13fc8:	2208      	movs	r2, #8
   13fca:	701a      	strb	r2, [r3, #0]
				buffer[i] = 0;
   13fcc:	2300      	movs	r3, #0
   13fce:	7033      	strb	r3, [r6, #0]
   13fd0:	e00d      	b.n	13fee <read_to_buffer+0xea>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   13fd2:	6991      	ldr	r1, [r2, #24]
   13fd4:	428b      	cmp	r3, r1
   13fd6:	daf4      	bge.n	13fc2 <read_to_buffer+0xbe>
		return (__swbuf_r(_ptr, _c, _p));
   13fd8:	2108      	movs	r1, #8
   13fda:	4b1b      	ldr	r3, [pc, #108]	; (14048 <read_to_buffer+0x144>)
   13fdc:	4798      	blx	r3
   13fde:	e7f5      	b.n	13fcc <read_to_buffer+0xc8>
		return (*_p->_p++ = _c);
   13fe0:	6813      	ldr	r3, [r2, #0]
   13fe2:	1c58      	adds	r0, r3, #1
   13fe4:	6010      	str	r0, [r2, #0]
   13fe6:	7019      	strb	r1, [r3, #0]
		i++;
   13fe8:	3401      	adds	r4, #1
	while(i < CLI_BUF_SIZE)
   13fea:	2c18      	cmp	r4, #24
   13fec:	dc23      	bgt.n	14036 <read_to_buffer+0x132>
		buffer[i] = getchar();
   13fee:	0025      	movs	r5, r4
   13ff0:	193e      	adds	r6, r7, r4
   13ff2:	4643      	mov	r3, r8
   13ff4:	6818      	ldr	r0, [r3, #0]
   13ff6:	6842      	ldr	r2, [r0, #4]
   13ff8:	6853      	ldr	r3, [r2, #4]
   13ffa:	3b01      	subs	r3, #1
   13ffc:	6053      	str	r3, [r2, #4]
   13ffe:	2b00      	cmp	r3, #0
   14000:	db8a      	blt.n	13f18 <read_to_buffer+0x14>
   14002:	6842      	ldr	r2, [r0, #4]
   14004:	6813      	ldr	r3, [r2, #0]
   14006:	1c59      	adds	r1, r3, #1
   14008:	6011      	str	r1, [r2, #0]
   1400a:	7819      	ldrb	r1, [r3, #0]
   1400c:	7031      	strb	r1, [r6, #0]
		if(buffer[i] == 13)
   1400e:	290d      	cmp	r1, #13
   14010:	d011      	beq.n	14036 <read_to_buffer+0x132>
		if(buffer[i] == 8)
   14012:	2908      	cmp	r1, #8
   14014:	d085      	beq.n	13f22 <read_to_buffer+0x1e>
		putchar(buffer[i]);
   14016:	464b      	mov	r3, r9
   14018:	6818      	ldr	r0, [r3, #0]
   1401a:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   1401c:	6893      	ldr	r3, [r2, #8]
   1401e:	3b01      	subs	r3, #1
   14020:	6093      	str	r3, [r2, #8]
   14022:	2b00      	cmp	r3, #0
   14024:	dadc      	bge.n	13fe0 <read_to_buffer+0xdc>
   14026:	6995      	ldr	r5, [r2, #24]
   14028:	42ab      	cmp	r3, r5
   1402a:	db01      	blt.n	14030 <read_to_buffer+0x12c>
   1402c:	290a      	cmp	r1, #10
   1402e:	d1d7      	bne.n	13fe0 <read_to_buffer+0xdc>
		return (__swbuf_r(_ptr, _c, _p));
   14030:	4b05      	ldr	r3, [pc, #20]	; (14048 <read_to_buffer+0x144>)
   14032:	4798      	blx	r3
   14034:	e7d8      	b.n	13fe8 <read_to_buffer+0xe4>
	}
}	
   14036:	bc0c      	pop	{r2, r3}
   14038:	4690      	mov	r8, r2
   1403a:	4699      	mov	r9, r3
   1403c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1403e:	46c0      	nop			; (mov r8, r8)
   14040:	2000017c 	.word	0x2000017c
   14044:	00016d15 	.word	0x00016d15
   14048:	00017241 	.word	0x00017241

0001404c <cli>:
{
   1404c:	b570      	push	{r4, r5, r6, lr}
   1404e:	b08a      	sub	sp, #40	; 0x28
   14050:	0005      	movs	r5, r0
	clear_buffer(input);			
   14052:	a803      	add	r0, sp, #12
   14054:	4b63      	ldr	r3, [pc, #396]	; (141e4 <cli+0x198>)
   14056:	4798      	blx	r3
	read_to_buffer(input);				
   14058:	a803      	add	r0, sp, #12
   1405a:	4b63      	ldr	r3, [pc, #396]	; (141e8 <cli+0x19c>)
   1405c:	4798      	blx	r3
	if (strncmp(input,"help",strlen("help")) == 0)
   1405e:	2204      	movs	r2, #4
   14060:	4962      	ldr	r1, [pc, #392]	; (141ec <cli+0x1a0>)
   14062:	a803      	add	r0, sp, #12
   14064:	4b62      	ldr	r3, [pc, #392]	; (141f0 <cli+0x1a4>)
   14066:	4798      	blx	r3
   14068:	1e04      	subs	r4, r0, #0
   1406a:	d048      	beq.n	140fe <cli+0xb2>
	else if (strncmp(input,"ver_bl",strlen("ver_bl")) == 0)
   1406c:	2206      	movs	r2, #6
   1406e:	4961      	ldr	r1, [pc, #388]	; (141f4 <cli+0x1a8>)
   14070:	a803      	add	r0, sp, #12
   14072:	4b5f      	ldr	r3, [pc, #380]	; (141f0 <cli+0x1a4>)
   14074:	4798      	blx	r3
   14076:	1e04      	subs	r4, r0, #0
   14078:	d058      	beq.n	1412c <cli+0xe0>
	else if (strncmp(input,"ver_app",strlen("ver_app")) == 0)
   1407a:	2207      	movs	r2, #7
   1407c:	495e      	ldr	r1, [pc, #376]	; (141f8 <cli+0x1ac>)
   1407e:	a803      	add	r0, sp, #12
   14080:	4b5b      	ldr	r3, [pc, #364]	; (141f0 <cli+0x1a4>)
   14082:	4798      	blx	r3
   14084:	1e04      	subs	r4, r0, #0
   14086:	d058      	beq.n	1413a <cli+0xee>
	else if (strncmp(input,"mac",strlen("mac")) == 0)
   14088:	2203      	movs	r2, #3
   1408a:	495c      	ldr	r1, [pc, #368]	; (141fc <cli+0x1b0>)
   1408c:	a803      	add	r0, sp, #12
   1408e:	4b58      	ldr	r3, [pc, #352]	; (141f0 <cli+0x1a4>)
   14090:	4798      	blx	r3
   14092:	1e04      	subs	r4, r0, #0
   14094:	d058      	beq.n	14148 <cli+0xfc>
	else if (strncmp(input,"ip",strlen("ip")) == 0)
   14096:	2202      	movs	r2, #2
   14098:	4959      	ldr	r1, [pc, #356]	; (14200 <cli+0x1b4>)
   1409a:	a803      	add	r0, sp, #12
   1409c:	4b54      	ldr	r3, [pc, #336]	; (141f0 <cli+0x1a4>)
   1409e:	4798      	blx	r3
   140a0:	1e04      	subs	r4, r0, #0
   140a2:	d055      	beq.n	14150 <cli+0x104>
	else if (strncmp(input,"devName",strlen("devName")) == 0)
   140a4:	2207      	movs	r2, #7
   140a6:	4957      	ldr	r1, [pc, #348]	; (14204 <cli+0x1b8>)
   140a8:	a803      	add	r0, sp, #12
   140aa:	4b51      	ldr	r3, [pc, #324]	; (141f0 <cli+0x1a4>)
   140ac:	4798      	blx	r3
   140ae:	1e04      	subs	r4, r0, #0
   140b0:	d052      	beq.n	14158 <cli+0x10c>
	else if (strncmp(input,"setDeviceName",strlen("setDeviceName")) == 0)
   140b2:	220d      	movs	r2, #13
   140b4:	4954      	ldr	r1, [pc, #336]	; (14208 <cli+0x1bc>)
   140b6:	a803      	add	r0, sp, #12
   140b8:	4b4d      	ldr	r3, [pc, #308]	; (141f0 <cli+0x1a4>)
   140ba:	4798      	blx	r3
   140bc:	1e04      	subs	r4, r0, #0
   140be:	d14f      	bne.n	14160 <cli+0x114>
		while(input[iter1] != '\r')
   140c0:	ab03      	add	r3, sp, #12
   140c2:	7b9b      	ldrb	r3, [r3, #14]
   140c4:	2b0d      	cmp	r3, #13
   140c6:	d015      	beq.n	140f4 <cli+0xa8>
			if(input[iter1] != ' ')
   140c8:	2b20      	cmp	r3, #32
   140ca:	d000      	beq.n	140ce <cli+0x82>
   140cc:	e088      	b.n	141e0 <cli+0x194>
   140ce:	210e      	movs	r1, #14
		while(input[iter1] != '\r')
   140d0:	aa03      	add	r2, sp, #12
				iter1++;
   140d2:	3101      	adds	r1, #1
		while(input[iter1] != '\r')
   140d4:	5c8b      	ldrb	r3, [r1, r2]
   140d6:	2b0d      	cmp	r3, #13
   140d8:	d00c      	beq.n	140f4 <cli+0xa8>
			if(input[iter1] != ' ')
   140da:	2b20      	cmp	r3, #32
   140dc:	d0f9      	beq.n	140d2 <cli+0x86>
				while(input[iter1] != '\r')
   140de:	ab03      	add	r3, sp, #12
   140e0:	5c5a      	ldrb	r2, [r3, r1]
   140e2:	000b      	movs	r3, r1
					device_name[iter2] = input[iter1];
   140e4:	4849      	ldr	r0, [pc, #292]	; (1420c <cli+0x1c0>)
   140e6:	1a41      	subs	r1, r0, r1
				while(input[iter1] != '\r')
   140e8:	a803      	add	r0, sp, #12
					device_name[iter2] = input[iter1];
   140ea:	54ca      	strb	r2, [r1, r3]
					iter1++;
   140ec:	3301      	adds	r3, #1
				while(input[iter1] != '\r')
   140ee:	5c1a      	ldrb	r2, [r3, r0]
   140f0:	2a0d      	cmp	r2, #13
   140f2:	d1fa      	bne.n	140ea <cli+0x9e>
		printf("\r\nDevice name set to %s\r\n",device_name);
   140f4:	4945      	ldr	r1, [pc, #276]	; (1420c <cli+0x1c0>)
   140f6:	4846      	ldr	r0, [pc, #280]	; (14210 <cli+0x1c4>)
   140f8:	4b46      	ldr	r3, [pc, #280]	; (14214 <cli+0x1c8>)
   140fa:	4798      	blx	r3
		return 0;
   140fc:	e013      	b.n	14126 <cli+0xda>
		printf("\r\nAvailable Commands:\r\n");
   140fe:	4846      	ldr	r0, [pc, #280]	; (14218 <cli+0x1cc>)
   14100:	4d46      	ldr	r5, [pc, #280]	; (1421c <cli+0x1d0>)
   14102:	47a8      	blx	r5
		printf("ver_bl - bootloader version\r\n");
   14104:	4846      	ldr	r0, [pc, #280]	; (14220 <cli+0x1d4>)
   14106:	47a8      	blx	r5
		printf("ver_app - Application code version\r\n");
   14108:	4846      	ldr	r0, [pc, #280]	; (14224 <cli+0x1d8>)
   1410a:	47a8      	blx	r5
		printf("mac - mac address\r\n");
   1410c:	4846      	ldr	r0, [pc, #280]	; (14228 <cli+0x1dc>)
   1410e:	47a8      	blx	r5
		printf("ip - ip address\r\n");
   14110:	4846      	ldr	r0, [pc, #280]	; (1422c <cli+0x1e0>)
   14112:	47a8      	blx	r5
		printf("devName - develor name\r\n");
   14114:	4846      	ldr	r0, [pc, #280]	; (14230 <cli+0x1e4>)
   14116:	47a8      	blx	r5
		printf("setDeviceName <string name> - Device Name set\r\n");
   14118:	4846      	ldr	r0, [pc, #280]	; (14234 <cli+0x1e8>)
   1411a:	47a8      	blx	r5
		printf("getDeviceName - Get Device Name\r\n");
   1411c:	4846      	ldr	r0, [pc, #280]	; (14238 <cli+0x1ec>)
   1411e:	47a8      	blx	r5
		clear_buffer(input);
   14120:	a803      	add	r0, sp, #12
   14122:	4b30      	ldr	r3, [pc, #192]	; (141e4 <cli+0x198>)
   14124:	4798      	blx	r3
}
   14126:	0020      	movs	r0, r4
   14128:	b00a      	add	sp, #40	; 0x28
   1412a:	bd70      	pop	{r4, r5, r6, pc}
		printf("\r\nBootloader Firmware version: %d.%d.%d \r\n",major,minor,patch);
   1412c:	2301      	movs	r3, #1
   1412e:	2201      	movs	r2, #1
   14130:	2101      	movs	r1, #1
   14132:	4842      	ldr	r0, [pc, #264]	; (1423c <cli+0x1f0>)
   14134:	4d37      	ldr	r5, [pc, #220]	; (14214 <cli+0x1c8>)
   14136:	47a8      	blx	r5
		return 0;
   14138:	e7f5      	b.n	14126 <cli+0xda>
		printf("\r\nCode Firmware version: %d.%d.%d \r\n",major,minor,patch);
   1413a:	2306      	movs	r3, #6
   1413c:	2205      	movs	r2, #5
   1413e:	2104      	movs	r1, #4
   14140:	483f      	ldr	r0, [pc, #252]	; (14240 <cli+0x1f4>)
   14142:	4d34      	ldr	r5, [pc, #208]	; (14214 <cli+0x1c8>)
   14144:	47a8      	blx	r5
		return 0;
   14146:	e7ee      	b.n	14126 <cli+0xda>
		printf("\r\nMac Address: F8-F0-05-F3-F9-9E\r\n");
   14148:	483e      	ldr	r0, [pc, #248]	; (14244 <cli+0x1f8>)
   1414a:	4b34      	ldr	r3, [pc, #208]	; (1421c <cli+0x1d0>)
   1414c:	4798      	blx	r3
		return 0;
   1414e:	e7ea      	b.n	14126 <cli+0xda>
		printf("\r\nIP Address: 0.0.0.0 \r\n");
   14150:	483d      	ldr	r0, [pc, #244]	; (14248 <cli+0x1fc>)
   14152:	4b32      	ldr	r3, [pc, #200]	; (1421c <cli+0x1d0>)
   14154:	4798      	blx	r3
		return 0;
   14156:	e7e6      	b.n	14126 <cli+0xda>
		printf("\r\nName : DELOS INC.\r\n");
   14158:	483c      	ldr	r0, [pc, #240]	; (1424c <cli+0x200>)
   1415a:	4b30      	ldr	r3, [pc, #192]	; (1421c <cli+0x1d0>)
   1415c:	4798      	blx	r3
		return 0;
   1415e:	e7e2      	b.n	14126 <cli+0xda>
	else if (strncmp(input,"getDeviceName",strlen("getDeviceName")) == 0)
   14160:	220d      	movs	r2, #13
   14162:	493b      	ldr	r1, [pc, #236]	; (14250 <cli+0x204>)
   14164:	a803      	add	r0, sp, #12
   14166:	4b22      	ldr	r3, [pc, #136]	; (141f0 <cli+0x1a4>)
   14168:	4798      	blx	r3
   1416a:	1e04      	subs	r4, r0, #0
   1416c:	d012      	beq.n	14194 <cli+0x148>
	else if (strncmp(input,"tempdata",strlen("tempdata")) == 0)
   1416e:	2208      	movs	r2, #8
   14170:	4938      	ldr	r1, [pc, #224]	; (14254 <cli+0x208>)
   14172:	a803      	add	r0, sp, #12
   14174:	4b1e      	ldr	r3, [pc, #120]	; (141f0 <cli+0x1a4>)
   14176:	4798      	blx	r3
   14178:	1e04      	subs	r4, r0, #0
   1417a:	d010      	beq.n	1419e <cli+0x152>
	else if (strncmp(input,"exit",strlen("exit")) == 0)
   1417c:	2204      	movs	r2, #4
   1417e:	4936      	ldr	r1, [pc, #216]	; (14258 <cli+0x20c>)
   14180:	a803      	add	r0, sp, #12
   14182:	4b1b      	ldr	r3, [pc, #108]	; (141f0 <cli+0x1a4>)
   14184:	4798      	blx	r3
   14186:	2800      	cmp	r0, #0
   14188:	d025      	beq.n	141d6 <cli+0x18a>
		printf("\n\rERROR > retry\r\n");
   1418a:	4834      	ldr	r0, [pc, #208]	; (1425c <cli+0x210>)
   1418c:	4b23      	ldr	r3, [pc, #140]	; (1421c <cli+0x1d0>)
   1418e:	4798      	blx	r3
		return 0;
   14190:	2400      	movs	r4, #0
   14192:	e7c8      	b.n	14126 <cli+0xda>
		printf("\r\nDevice name is %s\r\n",device_name);
   14194:	491d      	ldr	r1, [pc, #116]	; (1420c <cli+0x1c0>)
   14196:	4832      	ldr	r0, [pc, #200]	; (14260 <cli+0x214>)
   14198:	4b1e      	ldr	r3, [pc, #120]	; (14214 <cli+0x1c8>)
   1419a:	4798      	blx	r3
		return 0;
   1419c:	e7c3      	b.n	14126 <cli+0xda>
		printf("\nEnter Temperature:");
   1419e:	4831      	ldr	r0, [pc, #196]	; (14264 <cli+0x218>)
   141a0:	4b1c      	ldr	r3, [pc, #112]	; (14214 <cli+0x1c8>)
   141a2:	4798      	blx	r3
		scanf("%d",temp);
   141a4:	2600      	movs	r6, #0
   141a6:	0031      	movs	r1, r6
   141a8:	482f      	ldr	r0, [pc, #188]	; (14268 <cli+0x21c>)
   141aa:	4b30      	ldr	r3, [pc, #192]	; (1426c <cli+0x220>)
   141ac:	4798      	blx	r3
		snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temp);
   141ae:	0033      	movs	r3, r6
   141b0:	4a2f      	ldr	r2, [pc, #188]	; (14270 <cli+0x224>)
   141b2:	213f      	movs	r1, #63	; 0x3f
   141b4:	0028      	movs	r0, r5
   141b6:	4e2f      	ldr	r6, [pc, #188]	; (14274 <cli+0x228>)
   141b8:	47b0      	blx	r6
		mqtt_publish(&mqtt_inst, TEMP_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   141ba:	0028      	movs	r0, r5
   141bc:	4b2e      	ldr	r3, [pc, #184]	; (14278 <cli+0x22c>)
   141be:	4798      	blx	r3
   141c0:	0003      	movs	r3, r0
   141c2:	2200      	movs	r2, #0
   141c4:	9201      	str	r2, [sp, #4]
   141c6:	3202      	adds	r2, #2
   141c8:	9200      	str	r2, [sp, #0]
   141ca:	002a      	movs	r2, r5
   141cc:	492b      	ldr	r1, [pc, #172]	; (1427c <cli+0x230>)
   141ce:	482c      	ldr	r0, [pc, #176]	; (14280 <cli+0x234>)
   141d0:	4d2c      	ldr	r5, [pc, #176]	; (14284 <cli+0x238>)
   141d2:	47a8      	blx	r5
		return 0;
   141d4:	e7a7      	b.n	14126 <cli+0xda>
		printf("\r\nClosing cli ..... \n\r");
   141d6:	482c      	ldr	r0, [pc, #176]	; (14288 <cli+0x23c>)
   141d8:	4b0e      	ldr	r3, [pc, #56]	; (14214 <cli+0x1c8>)
   141da:	4798      	blx	r3
		return 1;
   141dc:	2401      	movs	r4, #1
   141de:	e7a2      	b.n	14126 <cli+0xda>
			if(input[iter1] != ' ')
   141e0:	210e      	movs	r1, #14
   141e2:	e77c      	b.n	140de <cli+0x92>
   141e4:	00013ef5 	.word	0x00013ef5
   141e8:	00013f05 	.word	0x00013f05
   141ec:	0001a4dc 	.word	0x0001a4dc
   141f0:	0001704d 	.word	0x0001704d
   141f4:	0001a5d4 	.word	0x0001a5d4
   141f8:	0001a608 	.word	0x0001a608
   141fc:	0001a638 	.word	0x0001a638
   14200:	0001923c 	.word	0x0001923c
   14204:	0001a678 	.word	0x0001a678
   14208:	0001a698 	.word	0x0001a698
   1420c:	20000830 	.word	0x20000830
   14210:	0001a6a8 	.word	0x0001a6a8
   14214:	00016be5 	.word	0x00016be5
   14218:	0001a4e4 	.word	0x0001a4e4
   1421c:	00016d01 	.word	0x00016d01
   14220:	0001a4fc 	.word	0x0001a4fc
   14224:	0001a51c 	.word	0x0001a51c
   14228:	0001a540 	.word	0x0001a540
   1422c:	0001a554 	.word	0x0001a554
   14230:	0001a568 	.word	0x0001a568
   14234:	0001a580 	.word	0x0001a580
   14238:	0001a5b0 	.word	0x0001a5b0
   1423c:	0001a5dc 	.word	0x0001a5dc
   14240:	0001a610 	.word	0x0001a610
   14244:	0001a63c 	.word	0x0001a63c
   14248:	0001a660 	.word	0x0001a660
   1424c:	0001a680 	.word	0x0001a680
   14250:	0001a6c4 	.word	0x0001a6c4
   14254:	0001a6ec 	.word	0x0001a6ec
   14258:	0001a728 	.word	0x0001a728
   1425c:	0001a748 	.word	0x0001a748
   14260:	0001a6d4 	.word	0x0001a6d4
   14264:	0001a6f8 	.word	0x0001a6f8
   14268:	0001a9c8 	.word	0x0001a9c8
   1426c:	00016d99 	.word	0x00016d99
   14270:	0001a70c 	.word	0x0001a70c
   14274:	00016f39 	.word	0x00016f39
   14278:	0001703f 	.word	0x0001703f
   1427c:	0001a720 	.word	0x0001a720
   14280:	2000084c 	.word	0x2000084c
   14284:	000135e1 	.word	0x000135e1
   14288:	0001a730 	.word	0x0001a730

0001428c <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   1428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1428e:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   14290:	2041      	movs	r0, #65	; 0x41
   14292:	5c23      	ldrb	r3, [r4, r0]
   14294:	2501      	movs	r5, #1
   14296:	432b      	orrs	r3, r5
   14298:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   1429a:	b292      	uxth	r2, r2
   1429c:	2000      	movs	r0, #0
   1429e:	5620      	ldrsb	r0, [r4, r0]
   142a0:	2300      	movs	r3, #0
   142a2:	4d12      	ldr	r5, [pc, #72]	; (142ec <_http_client_send_wait+0x60>)
   142a4:	47a8      	blx	r5
   142a6:	2800      	cmp	r0, #0
   142a8:	db16      	blt.n	142d8 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   142aa:	2341      	movs	r3, #65	; 0x41
   142ac:	5ce3      	ldrb	r3, [r4, r3]
   142ae:	07db      	lsls	r3, r3, #31
   142b0:	d518      	bpl.n	142e4 <_http_client_send_wait+0x58>
   142b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   142b4:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   142b6:	2b02      	cmp	r3, #2
   142b8:	d917      	bls.n	142ea <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   142ba:	4f0d      	ldr	r7, [pc, #52]	; (142f0 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   142bc:	4e0d      	ldr	r6, [pc, #52]	; (142f4 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   142be:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   142c0:	2000      	movs	r0, #0
   142c2:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   142c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   142c6:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   142c8:	5d63      	ldrb	r3, [r4, r5]
   142ca:	07db      	lsls	r3, r3, #31
   142cc:	d50c      	bpl.n	142e8 <_http_client_send_wait+0x5c>
   142ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   142d0:	2b02      	cmp	r3, #2
   142d2:	d8f5      	bhi.n	142c0 <_http_client_send_wait+0x34>
	return 0;
   142d4:	2000      	movs	r0, #0
   142d6:	e008      	b.n	142ea <_http_client_send_wait+0x5e>
		module->sending = 0;
   142d8:	2241      	movs	r2, #65	; 0x41
   142da:	5ca3      	ldrb	r3, [r4, r2]
   142dc:	2101      	movs	r1, #1
   142de:	438b      	bics	r3, r1
   142e0:	54a3      	strb	r3, [r4, r2]
		return result;
   142e2:	e002      	b.n	142ea <_http_client_send_wait+0x5e>
	return 0;
   142e4:	2000      	movs	r0, #0
   142e6:	e000      	b.n	142ea <_http_client_send_wait+0x5e>
   142e8:	2000      	movs	r0, #0
}
   142ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   142ec:	0000dd19 	.word	0x0000dd19
   142f0:	0000bf7d 	.word	0x0000bf7d
   142f4:	00015429 	.word	0x00015429

000142f8 <http_client_get_config_defaults>:
	config->port = 443;
   142f8:	23bc      	movs	r3, #188	; 0xbc
   142fa:	33ff      	adds	r3, #255	; 0xff
   142fc:	8003      	strh	r3, [r0, #0]
	config->tls = 1;
   142fe:	3bbb      	subs	r3, #187	; 0xbb
   14300:	3bff      	subs	r3, #255	; 0xff
   14302:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   14304:	4b06      	ldr	r3, [pc, #24]	; (14320 <http_client_get_config_defaults+0x28>)
   14306:	8103      	strh	r3, [r0, #8]
	config->timer_inst = NULL;
   14308:	2300      	movs	r3, #0
   1430a:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   1430c:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   1430e:	3301      	adds	r3, #1
   14310:	33ff      	adds	r3, #255	; 0xff
   14312:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   14314:	3bae      	subs	r3, #174	; 0xae
   14316:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   14318:	4b02      	ldr	r3, [pc, #8]	; (14324 <http_client_get_config_defaults+0x2c>)
   1431a:	6183      	str	r3, [r0, #24]
}
   1431c:	4770      	bx	lr
   1431e:	46c0      	nop			; (mov r8, r8)
   14320:	00004e20 	.word	0x00004e20
   14324:	0001a924 	.word	0x0001a924

00014328 <http_client_init>:
{
   14328:	b570      	push	{r4, r5, r6, lr}
   1432a:	0004      	movs	r4, r0
   1432c:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   1432e:	2800      	cmp	r0, #0
   14330:	d038      	beq.n	143a4 <http_client_init+0x7c>
   14332:	2900      	cmp	r1, #0
   14334:	d039      	beq.n	143aa <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   14336:	690b      	ldr	r3, [r1, #16]
   14338:	2b00      	cmp	r3, #0
   1433a:	d039      	beq.n	143b0 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   1433c:	684b      	ldr	r3, [r1, #4]
   1433e:	2b00      	cmp	r3, #0
   14340:	d039      	beq.n	143b6 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   14342:	694b      	ldr	r3, [r1, #20]
   14344:	2b51      	cmp	r3, #81	; 0x51
   14346:	d939      	bls.n	143bc <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   14348:	22e8      	movs	r2, #232	; 0xe8
   1434a:	2100      	movs	r1, #0
   1434c:	4b1e      	ldr	r3, [pc, #120]	; (143c8 <http_client_init+0xa0>)
   1434e:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   14350:	0020      	movs	r0, r4
   14352:	3050      	adds	r0, #80	; 0x50
   14354:	221c      	movs	r2, #28
   14356:	0029      	movs	r1, r5
   14358:	4b1c      	ldr	r3, [pc, #112]	; (143cc <http_client_init+0xa4>)
   1435a:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   1435c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1435e:	2b00      	cmp	r3, #0
   14360:	d008      	beq.n	14374 <http_client_init+0x4c>
	if (config->timeout > 0) {
   14362:	892b      	ldrh	r3, [r5, #8]
   14364:	2b00      	cmp	r3, #0
   14366:	d111      	bne.n	1438c <http_client_init+0x64>
	module->req.state = STATE_INIT;
   14368:	2300      	movs	r3, #0
   1436a:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1436c:	22d8      	movs	r2, #216	; 0xd8
   1436e:	50a3      	str	r3, [r4, r2]
	return 0;
   14370:	2000      	movs	r0, #0
}
   14372:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   14374:	6928      	ldr	r0, [r5, #16]
   14376:	4b16      	ldr	r3, [pc, #88]	; (143d0 <http_client_init+0xa8>)
   14378:	4798      	blx	r3
   1437a:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1437c:	2800      	cmp	r0, #0
   1437e:	d020      	beq.n	143c2 <http_client_init+0x9a>
		module->alloc_buffer = 1;
   14380:	2241      	movs	r2, #65	; 0x41
   14382:	5ca3      	ldrb	r3, [r4, r2]
   14384:	2104      	movs	r1, #4
   14386:	430b      	orrs	r3, r1
   14388:	54a3      	strb	r3, [r4, r2]
   1438a:	e7ea      	b.n	14362 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1438c:	6868      	ldr	r0, [r5, #4]
   1438e:	2300      	movs	r3, #0
   14390:	0022      	movs	r2, r4
   14392:	4910      	ldr	r1, [pc, #64]	; (143d4 <http_client_init+0xac>)
   14394:	4d10      	ldr	r5, [pc, #64]	; (143d8 <http_client_init+0xb0>)
   14396:	47a8      	blx	r5
   14398:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   1439a:	2800      	cmp	r0, #0
   1439c:	dae4      	bge.n	14368 <http_client_init+0x40>
			return -ENOSPC;
   1439e:	201c      	movs	r0, #28
   143a0:	4240      	negs	r0, r0
   143a2:	e7e6      	b.n	14372 <http_client_init+0x4a>
		return -EINVAL;
   143a4:	2016      	movs	r0, #22
   143a6:	4240      	negs	r0, r0
   143a8:	e7e3      	b.n	14372 <http_client_init+0x4a>
   143aa:	2016      	movs	r0, #22
   143ac:	4240      	negs	r0, r0
   143ae:	e7e0      	b.n	14372 <http_client_init+0x4a>
		return -EINVAL;
   143b0:	2016      	movs	r0, #22
   143b2:	4240      	negs	r0, r0
   143b4:	e7dd      	b.n	14372 <http_client_init+0x4a>
		return -EINVAL;
   143b6:	2016      	movs	r0, #22
   143b8:	4240      	negs	r0, r0
   143ba:	e7da      	b.n	14372 <http_client_init+0x4a>
		return -EINVAL;
   143bc:	2016      	movs	r0, #22
   143be:	4240      	negs	r0, r0
   143c0:	e7d7      	b.n	14372 <http_client_init+0x4a>
			return -ENOMEM;
   143c2:	200c      	movs	r0, #12
   143c4:	4240      	negs	r0, r0
   143c6:	e7d4      	b.n	14372 <http_client_init+0x4a>
   143c8:	00016a83 	.word	0x00016a83
   143cc:	00016a4d 	.word	0x00016a4d
   143d0:	00016a25 	.word	0x00016a25
   143d4:	000144ed 	.word	0x000144ed
   143d8:	000153b5 	.word	0x000153b5

000143dc <http_client_register_callback>:
	if (module == NULL) {
   143dc:	2800      	cmp	r0, #0
   143de:	d002      	beq.n	143e6 <http_client_register_callback+0xa>
	module->cb = callback;
   143e0:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   143e2:	2000      	movs	r0, #0
}
   143e4:	4770      	bx	lr
		return -EINVAL;
   143e6:	2016      	movs	r0, #22
   143e8:	4240      	negs	r0, r0
   143ea:	e7fb      	b.n	143e4 <http_client_register_callback+0x8>

000143ec <_http_client_clear_conn>:
{
   143ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   143ee:	b085      	sub	sp, #20
   143f0:	0004      	movs	r4, r0
   143f2:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   143f4:	23c0      	movs	r3, #192	; 0xc0
   143f6:	58c3      	ldr	r3, [r0, r3]
   143f8:	2b00      	cmp	r3, #0
   143fa:	d002      	beq.n	14402 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   143fc:	22c4      	movs	r2, #196	; 0xc4
   143fe:	5880      	ldr	r0, [r0, r2]
   14400:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   14402:	0020      	movs	r0, r4
   14404:	30b0      	adds	r0, #176	; 0xb0
   14406:	2218      	movs	r2, #24
   14408:	2100      	movs	r1, #0
   1440a:	4b17      	ldr	r3, [pc, #92]	; (14468 <_http_client_clear_conn+0x7c>)
   1440c:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   1440e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14410:	2b00      	cmp	r3, #0
   14412:	d124      	bne.n	1445e <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   14414:	2300      	movs	r3, #0
   14416:	56e3      	ldrsb	r3, [r4, r3]
   14418:	009b      	lsls	r3, r3, #2
   1441a:	2500      	movs	r5, #0
   1441c:	4a13      	ldr	r2, [pc, #76]	; (1446c <_http_client_clear_conn+0x80>)
   1441e:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   14420:	0020      	movs	r0, r4
   14422:	306c      	adds	r0, #108	; 0x6c
   14424:	226c      	movs	r2, #108	; 0x6c
   14426:	2100      	movs	r1, #0
   14428:	4f0f      	ldr	r7, [pc, #60]	; (14468 <_http_client_clear_conn+0x7c>)
   1442a:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   1442c:	0020      	movs	r0, r4
   1442e:	30d8      	adds	r0, #216	; 0xd8
   14430:	2210      	movs	r2, #16
   14432:	2100      	movs	r1, #0
   14434:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   14436:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   14438:	23d8      	movs	r3, #216	; 0xd8
   1443a:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   1443c:	2241      	movs	r2, #65	; 0x41
   1443e:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   14440:	2101      	movs	r1, #1
   14442:	438b      	bics	r3, r1
   14444:	3101      	adds	r1, #1
   14446:	438b      	bics	r3, r1
   14448:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   1444a:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   1444c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1444e:	2b00      	cmp	r3, #0
   14450:	d003      	beq.n	1445a <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   14452:	aa01      	add	r2, sp, #4
   14454:	3102      	adds	r1, #2
   14456:	0020      	movs	r0, r4
   14458:	4798      	blx	r3
}
   1445a:	b005      	add	sp, #20
   1445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   1445e:	2000      	movs	r0, #0
   14460:	5620      	ldrsb	r0, [r4, r0]
   14462:	4b03      	ldr	r3, [pc, #12]	; (14470 <_http_client_clear_conn+0x84>)
   14464:	4798      	blx	r3
   14466:	e7d5      	b.n	14414 <_http_client_clear_conn+0x28>
   14468:	00016a83 	.word	0x00016a83
   1446c:	20000884 	.word	0x20000884
   14470:	0000de45 	.word	0x0000de45

00014474 <http_client_socket_resolve_handler>:
{
   14474:	b5f0      	push	{r4, r5, r6, r7, lr}
   14476:	b087      	sub	sp, #28
   14478:	9000      	str	r0, [sp, #0]
   1447a:	9101      	str	r1, [sp, #4]
   1447c:	4c17      	ldr	r4, [pc, #92]	; (144dc <http_client_socket_resolve_handler+0x68>)
   1447e:	0026      	movs	r6, r4
   14480:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   14482:	4f17      	ldr	r7, [pc, #92]	; (144e0 <http_client_socket_resolve_handler+0x6c>)
   14484:	e015      	b.n	144b2 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   14486:	2302      	movs	r3, #2
   14488:	aa02      	add	r2, sp, #8
   1448a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   1448c:	334e      	adds	r3, #78	; 0x4e
   1448e:	5aeb      	ldrh	r3, [r5, r3]
   14490:	021a      	lsls	r2, r3, #8
   14492:	0a1b      	lsrs	r3, r3, #8
   14494:	4313      	orrs	r3, r2
   14496:	aa02      	add	r2, sp, #8
   14498:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   1449a:	9b01      	ldr	r3, [sp, #4]
   1449c:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1449e:	2000      	movs	r0, #0
   144a0:	5628      	ldrsb	r0, [r5, r0]
   144a2:	2210      	movs	r2, #16
   144a4:	a902      	add	r1, sp, #8
   144a6:	4b0f      	ldr	r3, [pc, #60]	; (144e4 <http_client_socket_resolve_handler+0x70>)
   144a8:	4798      	blx	r3
				return;
   144aa:	e015      	b.n	144d8 <http_client_socket_resolve_handler+0x64>
   144ac:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   144ae:	42b4      	cmp	r4, r6
   144b0:	d012      	beq.n	144d8 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   144b2:	6825      	ldr	r5, [r4, #0]
   144b4:	2d00      	cmp	r5, #0
   144b6:	d0f9      	beq.n	144ac <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   144b8:	1c69      	adds	r1, r5, #1
   144ba:	9800      	ldr	r0, [sp, #0]
   144bc:	47b8      	blx	r7
   144be:	2800      	cmp	r0, #0
   144c0:	d1f4      	bne.n	144ac <http_client_socket_resolve_handler+0x38>
   144c2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   144c4:	2b01      	cmp	r3, #1
   144c6:	d1f1      	bne.n	144ac <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   144c8:	9b01      	ldr	r3, [sp, #4]
   144ca:	2b00      	cmp	r3, #0
   144cc:	d1db      	bne.n	14486 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   144ce:	2176      	movs	r1, #118	; 0x76
   144d0:	4249      	negs	r1, r1
   144d2:	0028      	movs	r0, r5
   144d4:	4b04      	ldr	r3, [pc, #16]	; (144e8 <http_client_socket_resolve_handler+0x74>)
   144d6:	4798      	blx	r3
}
   144d8:	b007      	add	sp, #28
   144da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144dc:	20000884 	.word	0x20000884
   144e0:	00016fe1 	.word	0x00016fe1
   144e4:	0000dc89 	.word	0x0000dc89
   144e8:	000143ed 	.word	0x000143ed

000144ec <http_client_timer_callback>:
{
   144ec:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   144ee:	2a00      	cmp	r2, #0
   144f0:	d004      	beq.n	144fc <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   144f2:	213e      	movs	r1, #62	; 0x3e
   144f4:	4249      	negs	r1, r1
   144f6:	0010      	movs	r0, r2
   144f8:	4b01      	ldr	r3, [pc, #4]	; (14500 <http_client_timer_callback+0x14>)
   144fa:	4798      	blx	r3
}
   144fc:	bd10      	pop	{r4, pc}
   144fe:	46c0      	nop			; (mov r8, r8)
   14500:	000143ed 	.word	0x000143ed

00014504 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   14504:	b5f0      	push	{r4, r5, r6, r7, lr}
   14506:	46de      	mov	lr, fp
   14508:	4657      	mov	r7, sl
   1450a:	b580      	push	{r7, lr}
   1450c:	b095      	sub	sp, #84	; 0x54
   1450e:	af02      	add	r7, sp, #8
   14510:	0004      	movs	r4, r0
   14512:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   14514:	2310      	movs	r3, #16
   14516:	2208      	movs	r2, #8
   14518:	18ba      	adds	r2, r7, r2
   1451a:	18d2      	adds	r2, r2, r3
   1451c:	4bb1      	ldr	r3, [pc, #708]	; (147e4 <_http_client_request+0x2e0>)
   1451e:	cb23      	ldmia	r3!, {r0, r1, r5}
   14520:	c223      	stmia	r2!, {r0, r1, r5}
   14522:	681b      	ldr	r3, [r3, #0]
   14524:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   14526:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14528:	1dd3      	adds	r3, r2, #7
   1452a:	08db      	lsrs	r3, r3, #3
   1452c:	00db      	lsls	r3, r3, #3
   1452e:	4669      	mov	r1, sp
   14530:	1acb      	subs	r3, r1, r3
   14532:	469d      	mov	sp, r3
   14534:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   14536:	2c00      	cmp	r4, #0
   14538:	d100      	bne.n	1453c <_http_client_request+0x38>
   1453a:	e1f0      	b.n	1491e <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   1453c:	2341      	movs	r3, #65	; 0x41
   1453e:	5ce3      	ldrb	r3, [r4, r3]
   14540:	07db      	lsls	r3, r3, #31
   14542:	d500      	bpl.n	14546 <_http_client_request+0x42>
   14544:	e1eb      	b.n	1491e <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   14546:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14548:	2b03      	cmp	r3, #3
   1454a:	d004      	beq.n	14556 <_http_client_request+0x52>
   1454c:	2b04      	cmp	r3, #4
   1454e:	d100      	bne.n	14552 <_http_client_request+0x4e>
   14550:	e120      	b.n	14794 <_http_client_request+0x290>
   14552:	46dd      	mov	sp, fp
   14554:	e1e4      	b.n	14920 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   14556:	2300      	movs	r3, #0
   14558:	21cc      	movs	r1, #204	; 0xcc
   1455a:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   1455c:	3104      	adds	r1, #4
   1455e:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   14560:	9400      	str	r4, [sp, #0]
   14562:	4ba1      	ldr	r3, [pc, #644]	; (147e8 <_http_client_request+0x2e4>)
   14564:	0031      	movs	r1, r6
   14566:	202c      	movs	r0, #44	; 0x2c
   14568:	2508      	movs	r5, #8
   1456a:	46ac      	mov	ip, r5
   1456c:	44bc      	add	ip, r7
   1456e:	4460      	add	r0, ip
   14570:	4d9e      	ldr	r5, [pc, #632]	; (147ec <_http_client_request+0x2e8>)
   14572:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   14574:	23c8      	movs	r3, #200	; 0xc8
   14576:	5ce3      	ldrb	r3, [r4, r3]
   14578:	2b01      	cmp	r3, #1
   1457a:	d100      	bne.n	1457e <_http_client_request+0x7a>
   1457c:	e0a9      	b.n	146d2 <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   1457e:	2b02      	cmp	r3, #2
   14580:	d100      	bne.n	14584 <_http_client_request+0x80>
   14582:	e0af      	b.n	146e4 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   14584:	2b03      	cmp	r3, #3
   14586:	d100      	bne.n	1458a <_http_client_request+0x86>
   14588:	e0b5      	b.n	146f6 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   1458a:	2b04      	cmp	r3, #4
   1458c:	d100      	bne.n	14590 <_http_client_request+0x8c>
   1458e:	e0bb      	b.n	14708 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   14590:	2b05      	cmp	r3, #5
   14592:	d100      	bne.n	14596 <_http_client_request+0x92>
   14594:	e0c1      	b.n	1471a <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   14596:	2b06      	cmp	r3, #6
   14598:	d100      	bne.n	1459c <_http_client_request+0x98>
   1459a:	e0c7      	b.n	1472c <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   1459c:	0025      	movs	r5, r4
   1459e:	3570      	adds	r5, #112	; 0x70
   145a0:	0028      	movs	r0, r5
   145a2:	4b93      	ldr	r3, [pc, #588]	; (147f0 <_http_client_request+0x2ec>)
   145a4:	469a      	mov	sl, r3
   145a6:	4798      	blx	r3
   145a8:	0002      	movs	r2, r0
   145aa:	0029      	movs	r1, r5
   145ac:	232c      	movs	r3, #44	; 0x2c
   145ae:	2008      	movs	r0, #8
   145b0:	1838      	adds	r0, r7, r0
   145b2:	18c0      	adds	r0, r0, r3
   145b4:	4d8f      	ldr	r5, [pc, #572]	; (147f4 <_http_client_request+0x2f0>)
   145b6:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   145b8:	220b      	movs	r2, #11
   145ba:	498f      	ldr	r1, [pc, #572]	; (147f8 <_http_client_request+0x2f4>)
   145bc:	232c      	movs	r3, #44	; 0x2c
   145be:	2008      	movs	r0, #8
   145c0:	1838      	adds	r0, r7, r0
   145c2:	18c0      	adds	r0, r0, r3
   145c4:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   145c6:	220c      	movs	r2, #12
   145c8:	498c      	ldr	r1, [pc, #560]	; (147fc <_http_client_request+0x2f8>)
   145ca:	232c      	movs	r3, #44	; 0x2c
   145cc:	2008      	movs	r0, #8
   145ce:	1838      	adds	r0, r7, r0
   145d0:	18c0      	adds	r0, r0, r3
   145d2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   145d4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   145d6:	607b      	str	r3, [r7, #4]
   145d8:	0018      	movs	r0, r3
   145da:	47d0      	blx	sl
   145dc:	0002      	movs	r2, r0
   145de:	6879      	ldr	r1, [r7, #4]
   145e0:	232c      	movs	r3, #44	; 0x2c
   145e2:	2008      	movs	r0, #8
   145e4:	1838      	adds	r0, r7, r0
   145e6:	18c0      	adds	r0, r0, r3
   145e8:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   145ea:	2202      	movs	r2, #2
   145ec:	4984      	ldr	r1, [pc, #528]	; (14800 <_http_client_request+0x2fc>)
   145ee:	232c      	movs	r3, #44	; 0x2c
   145f0:	2008      	movs	r0, #8
   145f2:	1838      	adds	r0, r7, r0
   145f4:	18c0      	adds	r0, r0, r3
   145f6:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   145f8:	2206      	movs	r2, #6
   145fa:	4982      	ldr	r1, [pc, #520]	; (14804 <_http_client_request+0x300>)
   145fc:	232c      	movs	r3, #44	; 0x2c
   145fe:	2008      	movs	r0, #8
   14600:	1838      	adds	r0, r7, r0
   14602:	18c0      	adds	r0, r0, r3
   14604:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   14606:	1c63      	adds	r3, r4, #1
   14608:	607b      	str	r3, [r7, #4]
   1460a:	0018      	movs	r0, r3
   1460c:	47d0      	blx	sl
   1460e:	0002      	movs	r2, r0
   14610:	6879      	ldr	r1, [r7, #4]
   14612:	232c      	movs	r3, #44	; 0x2c
   14614:	2008      	movs	r0, #8
   14616:	1838      	adds	r0, r7, r0
   14618:	18c0      	adds	r0, r0, r3
   1461a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1461c:	2202      	movs	r2, #2
   1461e:	4978      	ldr	r1, [pc, #480]	; (14800 <_http_client_request+0x2fc>)
   14620:	232c      	movs	r3, #44	; 0x2c
   14622:	2008      	movs	r0, #8
   14624:	1838      	adds	r0, r7, r0
   14626:	18c0      	adds	r0, r0, r3
   14628:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   1462a:	2218      	movs	r2, #24
   1462c:	4976      	ldr	r1, [pc, #472]	; (14808 <_http_client_request+0x304>)
   1462e:	232c      	movs	r3, #44	; 0x2c
   14630:	2008      	movs	r0, #8
   14632:	1838      	adds	r0, r7, r0
   14634:	18c0      	adds	r0, r0, r3
   14636:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   14638:	2213      	movs	r2, #19
   1463a:	4974      	ldr	r1, [pc, #464]	; (1480c <_http_client_request+0x308>)
   1463c:	232c      	movs	r3, #44	; 0x2c
   1463e:	2008      	movs	r0, #8
   14640:	1838      	adds	r0, r7, r0
   14642:	18c0      	adds	r0, r0, r3
   14644:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   14646:	2217      	movs	r2, #23
   14648:	4971      	ldr	r1, [pc, #452]	; (14810 <_http_client_request+0x30c>)
   1464a:	232c      	movs	r3, #44	; 0x2c
   1464c:	2008      	movs	r0, #8
   1464e:	1838      	adds	r0, r7, r0
   14650:	18c0      	adds	r0, r0, r3
   14652:	47a8      	blx	r5

		if (entity->read != NULL) {
   14654:	0023      	movs	r3, r4
   14656:	33b0      	adds	r3, #176	; 0xb0
   14658:	68db      	ldr	r3, [r3, #12]
   1465a:	2b00      	cmp	r3, #0
   1465c:	d07b      	beq.n	14756 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   1465e:	23b0      	movs	r3, #176	; 0xb0
   14660:	5ce3      	ldrb	r3, [r4, r3]
   14662:	2b00      	cmp	r3, #0
   14664:	d16b      	bne.n	1473e <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   14666:	0023      	movs	r3, r4
   14668:	33b0      	adds	r3, #176	; 0xb0
   1466a:	689b      	ldr	r3, [r3, #8]
   1466c:	2b00      	cmp	r3, #0
   1466e:	d072      	beq.n	14756 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   14670:	0022      	movs	r2, r4
   14672:	32b0      	adds	r2, #176	; 0xb0
   14674:	6950      	ldr	r0, [r2, #20]
   14676:	4798      	blx	r3
   14678:	23cc      	movs	r3, #204	; 0xcc
   1467a:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   1467c:	2800      	cmp	r0, #0
   1467e:	da00      	bge.n	14682 <_http_client_request+0x17e>
   14680:	e0ac      	b.n	147dc <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   14682:	0002      	movs	r2, r0
   14684:	4963      	ldr	r1, [pc, #396]	; (14814 <_http_client_request+0x310>)
   14686:	2320      	movs	r3, #32
   14688:	2008      	movs	r0, #8
   1468a:	1838      	adds	r0, r7, r0
   1468c:	18c0      	adds	r0, r0, r3
   1468e:	4b62      	ldr	r3, [pc, #392]	; (14818 <_http_client_request+0x314>)
   14690:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   14692:	2210      	movs	r2, #16
   14694:	4961      	ldr	r1, [pc, #388]	; (1481c <_http_client_request+0x318>)
   14696:	232c      	movs	r3, #44	; 0x2c
   14698:	2008      	movs	r0, #8
   1469a:	1838      	adds	r0, r7, r0
   1469c:	18c0      	adds	r0, r0, r3
   1469e:	4d55      	ldr	r5, [pc, #340]	; (147f4 <_http_client_request+0x2f0>)
   146a0:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   146a2:	2320      	movs	r3, #32
   146a4:	2208      	movs	r2, #8
   146a6:	18ba      	adds	r2, r7, r2
   146a8:	18d0      	adds	r0, r2, r3
   146aa:	4b51      	ldr	r3, [pc, #324]	; (147f0 <_http_client_request+0x2ec>)
   146ac:	4798      	blx	r3
   146ae:	0002      	movs	r2, r0
   146b0:	2320      	movs	r3, #32
   146b2:	2108      	movs	r1, #8
   146b4:	1879      	adds	r1, r7, r1
   146b6:	18c9      	adds	r1, r1, r3
   146b8:	330c      	adds	r3, #12
   146ba:	2008      	movs	r0, #8
   146bc:	1838      	adds	r0, r7, r0
   146be:	18c0      	adds	r0, r0, r3
   146c0:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   146c2:	2202      	movs	r2, #2
   146c4:	494e      	ldr	r1, [pc, #312]	; (14800 <_http_client_request+0x2fc>)
   146c6:	232c      	movs	r3, #44	; 0x2c
   146c8:	2008      	movs	r0, #8
   146ca:	1838      	adds	r0, r7, r0
   146cc:	18c0      	adds	r0, r0, r3
   146ce:	47a8      	blx	r5
   146d0:	e041      	b.n	14756 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   146d2:	2204      	movs	r2, #4
   146d4:	4952      	ldr	r1, [pc, #328]	; (14820 <_http_client_request+0x31c>)
   146d6:	332b      	adds	r3, #43	; 0x2b
   146d8:	2008      	movs	r0, #8
   146da:	1838      	adds	r0, r7, r0
   146dc:	18c0      	adds	r0, r0, r3
   146de:	4b45      	ldr	r3, [pc, #276]	; (147f4 <_http_client_request+0x2f0>)
   146e0:	4798      	blx	r3
   146e2:	e75b      	b.n	1459c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   146e4:	2205      	movs	r2, #5
   146e6:	494f      	ldr	r1, [pc, #316]	; (14824 <_http_client_request+0x320>)
   146e8:	332a      	adds	r3, #42	; 0x2a
   146ea:	2008      	movs	r0, #8
   146ec:	1838      	adds	r0, r7, r0
   146ee:	18c0      	adds	r0, r0, r3
   146f0:	4b40      	ldr	r3, [pc, #256]	; (147f4 <_http_client_request+0x2f0>)
   146f2:	4798      	blx	r3
   146f4:	e752      	b.n	1459c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   146f6:	2207      	movs	r2, #7
   146f8:	494b      	ldr	r1, [pc, #300]	; (14828 <_http_client_request+0x324>)
   146fa:	3329      	adds	r3, #41	; 0x29
   146fc:	2008      	movs	r0, #8
   146fe:	1838      	adds	r0, r7, r0
   14700:	18c0      	adds	r0, r0, r3
   14702:	4b3c      	ldr	r3, [pc, #240]	; (147f4 <_http_client_request+0x2f0>)
   14704:	4798      	blx	r3
   14706:	e749      	b.n	1459c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   14708:	2204      	movs	r2, #4
   1470a:	4948      	ldr	r1, [pc, #288]	; (1482c <_http_client_request+0x328>)
   1470c:	3328      	adds	r3, #40	; 0x28
   1470e:	2008      	movs	r0, #8
   14710:	1838      	adds	r0, r7, r0
   14712:	18c0      	adds	r0, r0, r3
   14714:	4b37      	ldr	r3, [pc, #220]	; (147f4 <_http_client_request+0x2f0>)
   14716:	4798      	blx	r3
   14718:	e740      	b.n	1459c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   1471a:	2208      	movs	r2, #8
   1471c:	4944      	ldr	r1, [pc, #272]	; (14830 <_http_client_request+0x32c>)
   1471e:	3327      	adds	r3, #39	; 0x27
   14720:	2008      	movs	r0, #8
   14722:	1838      	adds	r0, r7, r0
   14724:	18c0      	adds	r0, r0, r3
   14726:	4b33      	ldr	r3, [pc, #204]	; (147f4 <_http_client_request+0x2f0>)
   14728:	4798      	blx	r3
   1472a:	e737      	b.n	1459c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   1472c:	2205      	movs	r2, #5
   1472e:	4941      	ldr	r1, [pc, #260]	; (14834 <_http_client_request+0x330>)
   14730:	3326      	adds	r3, #38	; 0x26
   14732:	2008      	movs	r0, #8
   14734:	1838      	adds	r0, r7, r0
   14736:	18c0      	adds	r0, r0, r3
   14738:	4b2e      	ldr	r3, [pc, #184]	; (147f4 <_http_client_request+0x2f0>)
   1473a:	4798      	blx	r3
   1473c:	e72e      	b.n	1459c <_http_client_request+0x98>
				module->req.content_length = -1;
   1473e:	2201      	movs	r2, #1
   14740:	4252      	negs	r2, r2
   14742:	23cc      	movs	r3, #204	; 0xcc
   14744:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   14746:	321d      	adds	r2, #29
   14748:	493b      	ldr	r1, [pc, #236]	; (14838 <_http_client_request+0x334>)
   1474a:	3ba0      	subs	r3, #160	; 0xa0
   1474c:	2008      	movs	r0, #8
   1474e:	1838      	adds	r0, r7, r0
   14750:	18c0      	adds	r0, r0, r3
   14752:	4b28      	ldr	r3, [pc, #160]	; (147f4 <_http_client_request+0x2f0>)
   14754:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   14756:	23d4      	movs	r3, #212	; 0xd4
   14758:	58e5      	ldr	r5, [r4, r3]
   1475a:	2d00      	cmp	r5, #0
   1475c:	d00a      	beq.n	14774 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   1475e:	0028      	movs	r0, r5
   14760:	4b23      	ldr	r3, [pc, #140]	; (147f0 <_http_client_request+0x2ec>)
   14762:	4798      	blx	r3
   14764:	0002      	movs	r2, r0
   14766:	0029      	movs	r1, r5
   14768:	232c      	movs	r3, #44	; 0x2c
   1476a:	2008      	movs	r0, #8
   1476c:	1838      	adds	r0, r7, r0
   1476e:	18c0      	adds	r0, r0, r3
   14770:	4b20      	ldr	r3, [pc, #128]	; (147f4 <_http_client_request+0x2f0>)
   14772:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   14774:	2202      	movs	r2, #2
   14776:	4922      	ldr	r1, [pc, #136]	; (14800 <_http_client_request+0x2fc>)
   14778:	232c      	movs	r3, #44	; 0x2c
   1477a:	2008      	movs	r0, #8
   1477c:	1838      	adds	r0, r7, r0
   1477e:	18c0      	adds	r0, r0, r3
   14780:	4b1c      	ldr	r3, [pc, #112]	; (147f4 <_http_client_request+0x2f0>)
   14782:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   14784:	232c      	movs	r3, #44	; 0x2c
   14786:	2208      	movs	r2, #8
   14788:	18ba      	adds	r2, r7, r2
   1478a:	18d0      	adds	r0, r2, r3
   1478c:	4b2b      	ldr	r3, [pc, #172]	; (1483c <_http_client_request+0x338>)
   1478e:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   14790:	2304      	movs	r3, #4
   14792:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   14794:	23cc      	movs	r3, #204	; 0xcc
   14796:	58e2      	ldr	r2, [r4, r3]
   14798:	2a00      	cmp	r2, #0
   1479a:	db51      	blt.n	14840 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   1479c:	dc00      	bgt.n	147a0 <_http_client_request+0x29c>
   1479e:	e0f0      	b.n	14982 <_http_client_request+0x47e>
   147a0:	0023      	movs	r3, r4
   147a2:	33b0      	adds	r3, #176	; 0xb0
   147a4:	68dd      	ldr	r5, [r3, #12]
   147a6:	2d00      	cmp	r5, #0
   147a8:	d100      	bne.n	147ac <_http_client_request+0x2a8>
   147aa:	e0ea      	b.n	14982 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   147ac:	23d0      	movs	r3, #208	; 0xd0
   147ae:	58e3      	ldr	r3, [r4, r3]
   147b0:	429a      	cmp	r2, r3
   147b2:	dd00      	ble.n	147b6 <_http_client_request+0x2b2>
   147b4:	e0ba      	b.n	1492c <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   147b6:	23c0      	movs	r3, #192	; 0xc0
   147b8:	58e3      	ldr	r3, [r4, r3]
   147ba:	2b00      	cmp	r3, #0
   147bc:	d002      	beq.n	147c4 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   147be:	22c4      	movs	r2, #196	; 0xc4
   147c0:	58a0      	ldr	r0, [r4, r2]
   147c2:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   147c4:	2302      	movs	r3, #2
   147c6:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   147c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   147ca:	2b00      	cmp	r3, #0
   147cc:	d100      	bne.n	147d0 <_http_client_request+0x2cc>
   147ce:	e6c0      	b.n	14552 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   147d0:	220c      	movs	r2, #12
   147d2:	18ba      	adds	r2, r7, r2
   147d4:	2101      	movs	r1, #1
   147d6:	0020      	movs	r0, r4
   147d8:	4798      	blx	r3
   147da:	e6ba      	b.n	14552 <_http_client_request+0x4e>
					module->req.content_length = 0;
   147dc:	2200      	movs	r2, #0
   147de:	50e2      	str	r2, [r4, r3]
   147e0:	e7b9      	b.n	14756 <_http_client_request+0x252>
   147e2:	46c0      	nop			; (mov r8, r8)
   147e4:	0001a80c 	.word	0x0001a80c
   147e8:	0001428d 	.word	0x0001428d
   147ec:	00015261 	.word	0x00015261
   147f0:	0001703f 	.word	0x0001703f
   147f4:	000152b5 	.word	0x000152b5
   147f8:	0001a880 	.word	0x0001a880
   147fc:	0001a88c 	.word	0x0001a88c
   14800:	0001a604 	.word	0x0001a604
   14804:	0001a89c 	.word	0x0001a89c
   14808:	0001a8a4 	.word	0x0001a8a4
   1480c:	0001a8c0 	.word	0x0001a8c0
   14810:	0001a8d4 	.word	0x0001a8d4
   14814:	0001a90c 	.word	0x0001a90c
   14818:	00016f9d 	.word	0x00016f9d
   1481c:	0001a910 	.word	0x0001a910
   14820:	0001a84c 	.word	0x0001a84c
   14824:	0001a854 	.word	0x0001a854
   14828:	0001a85c 	.word	0x0001a85c
   1482c:	0001a864 	.word	0x0001a864
   14830:	0001a86c 	.word	0x0001a86c
   14834:	0001a878 	.word	0x0001a878
   14838:	0001a8ec 	.word	0x0001a8ec
   1483c:	00015271 	.word	0x00015271
		if (module->req.content_length < 0 && entity->read) {
   14840:	0023      	movs	r3, r4
   14842:	33b0      	adds	r3, #176	; 0xb0
   14844:	68dd      	ldr	r5, [r3, #12]
   14846:	2d00      	cmp	r5, #0
   14848:	d100      	bne.n	1484c <_http_client_request+0x348>
   1484a:	e09a      	b.n	14982 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1484c:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1484e:	58e3      	ldr	r3, [r4, r3]
   14850:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14852:	3a07      	subs	r2, #7
   14854:	1d71      	adds	r1, r6, #5
   14856:	0020      	movs	r0, r4
   14858:	30b0      	adds	r0, #176	; 0xb0
   1485a:	6940      	ldr	r0, [r0, #20]
   1485c:	47a8      	blx	r5
   1485e:	0005      	movs	r5, r0
   14860:	43c3      	mvns	r3, r0
   14862:	17db      	asrs	r3, r3, #31
   14864:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   14866:	220a      	movs	r2, #10
   14868:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   1486a:	210d      	movs	r1, #13
   1486c:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1486e:	1973      	adds	r3, r6, r5
   14870:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   14872:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   14874:	230f      	movs	r3, #15
   14876:	402b      	ands	r3, r5
   14878:	3206      	adds	r2, #6
   1487a:	3905      	subs	r1, #5
   1487c:	468c      	mov	ip, r1
   1487e:	44bc      	add	ip, r7
   14880:	4462      	add	r2, ip
   14882:	5cd3      	ldrb	r3, [r2, r3]
   14884:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   14886:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   14888:	2d0f      	cmp	r5, #15
   1488a:	dd0d      	ble.n	148a8 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   1488c:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   1488e:	17eb      	asrs	r3, r5, #31
   14890:	220f      	movs	r2, #15
   14892:	4013      	ands	r3, r2
   14894:	195b      	adds	r3, r3, r5
   14896:	111b      	asrs	r3, r3, #4
   14898:	4013      	ands	r3, r2
   1489a:	3201      	adds	r2, #1
   1489c:	2008      	movs	r0, #8
   1489e:	4684      	mov	ip, r0
   148a0:	44bc      	add	ip, r7
   148a2:	4462      	add	r2, ip
   148a4:	5cd3      	ldrb	r3, [r2, r3]
   148a6:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   148a8:	2dff      	cmp	r5, #255	; 0xff
   148aa:	dd0d      	ble.n	148c8 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   148ac:	17ea      	asrs	r2, r5, #31
   148ae:	23ff      	movs	r3, #255	; 0xff
   148b0:	4013      	ands	r3, r2
   148b2:	195b      	adds	r3, r3, r5
   148b4:	051b      	lsls	r3, r3, #20
   148b6:	0f1b      	lsrs	r3, r3, #28
   148b8:	2210      	movs	r2, #16
   148ba:	2108      	movs	r1, #8
   148bc:	468c      	mov	ip, r1
   148be:	44bc      	add	ip, r7
   148c0:	4462      	add	r2, ip
   148c2:	5cd3      	ldrb	r3, [r2, r3]
   148c4:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   148c6:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   148c8:	1cca      	adds	r2, r1, #3
   148ca:	1b92      	subs	r2, r2, r6
   148cc:	1d2b      	adds	r3, r5, #4
   148ce:	18d2      	adds	r2, r2, r3
   148d0:	b292      	uxth	r2, r2
   148d2:	2000      	movs	r0, #0
   148d4:	5620      	ldrsb	r0, [r4, r0]
   148d6:	2300      	movs	r3, #0
   148d8:	4e30      	ldr	r6, [pc, #192]	; (1499c <_http_client_request+0x498>)
   148da:	47b0      	blx	r6
   148dc:	2800      	cmp	r0, #0
   148de:	db19      	blt.n	14914 <_http_client_request+0x410>
			module->req.sent_length += size;
   148e0:	22d0      	movs	r2, #208	; 0xd0
   148e2:	58a3      	ldr	r3, [r4, r2]
   148e4:	195b      	adds	r3, r3, r5
   148e6:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   148e8:	2d00      	cmp	r5, #0
   148ea:	d000      	beq.n	148ee <_http_client_request+0x3ea>
   148ec:	e631      	b.n	14552 <_http_client_request+0x4e>
				if (module->req.entity.close) {
   148ee:	23c0      	movs	r3, #192	; 0xc0
   148f0:	58e3      	ldr	r3, [r4, r3]
   148f2:	2b00      	cmp	r3, #0
   148f4:	d002      	beq.n	148fc <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   148f6:	3a0c      	subs	r2, #12
   148f8:	58a0      	ldr	r0, [r4, r2]
   148fa:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   148fc:	2302      	movs	r3, #2
   148fe:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   14900:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14902:	2b00      	cmp	r3, #0
   14904:	d100      	bne.n	14908 <_http_client_request+0x404>
   14906:	e624      	b.n	14552 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   14908:	220c      	movs	r2, #12
   1490a:	18ba      	adds	r2, r7, r2
   1490c:	2101      	movs	r1, #1
   1490e:	0020      	movs	r0, r4
   14910:	4798      	blx	r3
   14912:	e61e      	b.n	14552 <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   14914:	2105      	movs	r1, #5
   14916:	4249      	negs	r1, r1
   14918:	0020      	movs	r0, r4
   1491a:	4b21      	ldr	r3, [pc, #132]	; (149a0 <_http_client_request+0x49c>)
   1491c:	4798      	blx	r3
   1491e:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   14920:	46bd      	mov	sp, r7
   14922:	b013      	add	sp, #76	; 0x4c
   14924:	bc0c      	pop	{r2, r3}
   14926:	4692      	mov	sl, r2
   14928:	469b      	mov	fp, r3
   1492a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   1492c:	0022      	movs	r2, r4
   1492e:	32b0      	adds	r2, #176	; 0xb0
   14930:	6950      	ldr	r0, [r2, #20]
   14932:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14934:	0031      	movs	r1, r6
   14936:	47a8      	blx	r5
			if (size < 0) {
   14938:	2800      	cmp	r0, #0
   1493a:	db16      	blt.n	1496a <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   1493c:	23cc      	movs	r3, #204	; 0xcc
   1493e:	58e5      	ldr	r5, [r4, r3]
   14940:	3304      	adds	r3, #4
   14942:	58e3      	ldr	r3, [r4, r3]
   14944:	1aed      	subs	r5, r5, r3
   14946:	4285      	cmp	r5, r0
   14948:	dd00      	ble.n	1494c <_http_client_request+0x448>
   1494a:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   1494c:	b2aa      	uxth	r2, r5
   1494e:	2000      	movs	r0, #0
   14950:	5620      	ldrsb	r0, [r4, r0]
   14952:	2300      	movs	r3, #0
   14954:	0031      	movs	r1, r6
   14956:	4e11      	ldr	r6, [pc, #68]	; (1499c <_http_client_request+0x498>)
   14958:	47b0      	blx	r6
   1495a:	2800      	cmp	r0, #0
   1495c:	db0b      	blt.n	14976 <_http_client_request+0x472>
				module->req.sent_length += size;
   1495e:	23d0      	movs	r3, #208	; 0xd0
   14960:	58e2      	ldr	r2, [r4, r3]
   14962:	4694      	mov	ip, r2
   14964:	4465      	add	r5, ip
   14966:	50e5      	str	r5, [r4, r3]
   14968:	e5f3      	b.n	14552 <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   1496a:	2105      	movs	r1, #5
   1496c:	4249      	negs	r1, r1
   1496e:	0020      	movs	r0, r4
   14970:	4b0b      	ldr	r3, [pc, #44]	; (149a0 <_http_client_request+0x49c>)
   14972:	4798      	blx	r3
   14974:	e5ed      	b.n	14552 <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   14976:	2105      	movs	r1, #5
   14978:	4249      	negs	r1, r1
   1497a:	0020      	movs	r0, r4
   1497c:	4b08      	ldr	r3, [pc, #32]	; (149a0 <_http_client_request+0x49c>)
   1497e:	4798      	blx	r3
					return;
   14980:	e7cd      	b.n	1491e <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   14982:	2302      	movs	r3, #2
   14984:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   14986:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14988:	2b00      	cmp	r3, #0
   1498a:	d100      	bne.n	1498e <_http_client_request+0x48a>
   1498c:	e5e1      	b.n	14552 <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1498e:	220c      	movs	r2, #12
   14990:	18ba      	adds	r2, r7, r2
   14992:	2101      	movs	r1, #1
   14994:	0020      	movs	r0, r4
   14996:	4798      	blx	r3
   14998:	e5db      	b.n	14552 <_http_client_request+0x4e>
   1499a:	46c0      	nop			; (mov r8, r8)
   1499c:	0000dd19 	.word	0x0000dd19
   149a0:	000143ed 	.word	0x000143ed

000149a4 <http_client_send_request>:
{
   149a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   149a6:	46d6      	mov	lr, sl
   149a8:	b500      	push	{lr}
   149aa:	b088      	sub	sp, #32
   149ac:	0004      	movs	r4, r0
   149ae:	000f      	movs	r7, r1
   149b0:	4692      	mov	sl, r2
   149b2:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   149b4:	2800      	cmp	r0, #0
   149b6:	d100      	bne.n	149ba <http_client_send_request+0x16>
   149b8:	e0d3      	b.n	14b62 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   149ba:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   149bc:	2b02      	cmp	r3, #2
   149be:	d900      	bls.n	149c2 <http_client_send_request+0x1e>
   149c0:	e0d3      	b.n	14b6a <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   149c2:	2207      	movs	r2, #7
   149c4:	4981      	ldr	r1, [pc, #516]	; (14bcc <http_client_send_request+0x228>)
   149c6:	0038      	movs	r0, r7
   149c8:	4b81      	ldr	r3, [pc, #516]	; (14bd0 <http_client_send_request+0x22c>)
   149ca:	4798      	blx	r3
		i = 7;
   149cc:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   149ce:	2800      	cmp	r0, #0
   149d0:	d007      	beq.n	149e2 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   149d2:	2208      	movs	r2, #8
   149d4:	497f      	ldr	r1, [pc, #508]	; (14bd4 <http_client_send_request+0x230>)
   149d6:	0038      	movs	r0, r7
   149d8:	4b7d      	ldr	r3, [pc, #500]	; (14bd0 <http_client_send_request+0x22c>)
   149da:	4798      	blx	r3
		i = 8;
   149dc:	4246      	negs	r6, r0
   149de:	4146      	adcs	r6, r0
   149e0:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   149e2:	1c63      	adds	r3, r4, #1
   149e4:	19bd      	adds	r5, r7, r6
   149e6:	9302      	str	r3, [sp, #8]
   149e8:	0018      	movs	r0, r3
   149ea:	4b7b      	ldr	r3, [pc, #492]	; (14bd8 <http_client_send_request+0x234>)
   149ec:	4798      	blx	r3
   149ee:	0002      	movs	r2, r0
   149f0:	0029      	movs	r1, r5
   149f2:	9802      	ldr	r0, [sp, #8]
   149f4:	4b76      	ldr	r3, [pc, #472]	; (14bd0 <http_client_send_request+0x22c>)
   149f6:	4798      	blx	r3
   149f8:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   149fa:	782b      	ldrb	r3, [r5, #0]
   149fc:	2b00      	cmp	r3, #0
   149fe:	d052      	beq.n	14aa6 <http_client_send_request+0x102>
   14a00:	2b2f      	cmp	r3, #47	; 0x2f
   14a02:	d052      	beq.n	14aaa <http_client_send_request+0x106>
   14a04:	1c71      	adds	r1, r6, #1
   14a06:	1879      	adds	r1, r7, r1
   14a08:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   14a0a:	3201      	adds	r2, #1
   14a0c:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   14a0e:	000d      	movs	r5, r1
   14a10:	780b      	ldrb	r3, [r1, #0]
   14a12:	2b00      	cmp	r3, #0
   14a14:	d002      	beq.n	14a1c <http_client_send_request+0x78>
   14a16:	3101      	adds	r1, #1
   14a18:	2b2f      	cmp	r3, #47	; 0x2f
   14a1a:	d1f6      	bne.n	14a0a <http_client_send_request+0x66>
	module->host[j] = '\0';
   14a1c:	18a2      	adds	r2, r4, r2
   14a1e:	2300      	movs	r3, #0
   14a20:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   14a22:	7863      	ldrb	r3, [r4, #1]
   14a24:	2b00      	cmp	r3, #0
   14a26:	d100      	bne.n	14a2a <http_client_send_request+0x86>
   14a28:	e0a3      	b.n	14b72 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   14a2a:	0028      	movs	r0, r5
   14a2c:	4b6a      	ldr	r3, [pc, #424]	; (14bd8 <http_client_send_request+0x234>)
   14a2e:	4798      	blx	r3
   14a30:	283f      	cmp	r0, #63	; 0x3f
   14a32:	d900      	bls.n	14a36 <http_client_send_request+0x92>
   14a34:	e0a1      	b.n	14b7a <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   14a36:	23d4      	movs	r3, #212	; 0xd4
   14a38:	58e0      	ldr	r0, [r4, r3]
   14a3a:	2800      	cmp	r0, #0
   14a3c:	d001      	beq.n	14a42 <http_client_send_request+0x9e>
		free(module->req.ext_header);
   14a3e:	4b67      	ldr	r3, [pc, #412]	; (14bdc <http_client_send_request+0x238>)
   14a40:	4798      	blx	r3
	if (ext_header != NULL) {
   14a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14a44:	2b00      	cmp	r3, #0
   14a46:	d032      	beq.n	14aae <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   14a48:	0018      	movs	r0, r3
   14a4a:	4b65      	ldr	r3, [pc, #404]	; (14be0 <http_client_send_request+0x23c>)
   14a4c:	4798      	blx	r3
   14a4e:	23d4      	movs	r3, #212	; 0xd4
   14a50:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   14a52:	2800      	cmp	r0, #0
   14a54:	d100      	bne.n	14a58 <http_client_send_request+0xb4>
   14a56:	e094      	b.n	14b82 <http_client_send_request+0x1de>
	module->sending = 0;
   14a58:	2241      	movs	r2, #65	; 0x41
   14a5a:	5ca3      	ldrb	r3, [r4, r2]
   14a5c:	2101      	movs	r1, #1
   14a5e:	438b      	bics	r3, r1
   14a60:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   14a62:	2300      	movs	r3, #0
   14a64:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   14a66:	782b      	ldrb	r3, [r5, #0]
   14a68:	2b2f      	cmp	r3, #47	; 0x2f
   14a6a:	d024      	beq.n	14ab6 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   14a6c:	222f      	movs	r2, #47	; 0x2f
   14a6e:	2370      	movs	r3, #112	; 0x70
   14a70:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   14a72:	782b      	ldrb	r3, [r5, #0]
   14a74:	2b00      	cmp	r3, #0
   14a76:	d124      	bne.n	14ac2 <http_client_send_request+0x11e>
	if (entity != NULL) {
   14a78:	9b03      	ldr	r3, [sp, #12]
   14a7a:	2b00      	cmp	r3, #0
   14a7c:	d027      	beq.n	14ace <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   14a7e:	0020      	movs	r0, r4
   14a80:	30b0      	adds	r0, #176	; 0xb0
   14a82:	2218      	movs	r2, #24
   14a84:	0019      	movs	r1, r3
   14a86:	4b57      	ldr	r3, [pc, #348]	; (14be4 <http_client_send_request+0x240>)
   14a88:	4798      	blx	r3
	module->req.method = method;
   14a8a:	23c8      	movs	r3, #200	; 0xc8
   14a8c:	4652      	mov	r2, sl
   14a8e:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   14a90:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14a92:	2b01      	cmp	r3, #1
   14a94:	d022      	beq.n	14adc <http_client_send_request+0x138>
   14a96:	2b00      	cmp	r3, #0
   14a98:	d027      	beq.n	14aea <http_client_send_request+0x146>
   14a9a:	2b02      	cmp	r3, #2
   14a9c:	d03a      	beq.n	14b14 <http_client_send_request+0x170>
		return -EAGAIN;
   14a9e:	230b      	movs	r3, #11
   14aa0:	425b      	negs	r3, r3
   14aa2:	9301      	str	r3, [sp, #4]
   14aa4:	e08d      	b.n	14bc2 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   14aa6:	2200      	movs	r2, #0
   14aa8:	e7b8      	b.n	14a1c <http_client_send_request+0x78>
   14aaa:	2200      	movs	r2, #0
   14aac:	e7b6      	b.n	14a1c <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   14aae:	2200      	movs	r2, #0
   14ab0:	23d4      	movs	r3, #212	; 0xd4
   14ab2:	50e2      	str	r2, [r4, r3]
   14ab4:	e7d0      	b.n	14a58 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   14ab6:	0020      	movs	r0, r4
   14ab8:	3070      	adds	r0, #112	; 0x70
   14aba:	0029      	movs	r1, r5
   14abc:	4b4a      	ldr	r3, [pc, #296]	; (14be8 <http_client_send_request+0x244>)
   14abe:	4798      	blx	r3
   14ac0:	e7da      	b.n	14a78 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   14ac2:	0029      	movs	r1, r5
   14ac4:	0020      	movs	r0, r4
   14ac6:	3071      	adds	r0, #113	; 0x71
   14ac8:	4b47      	ldr	r3, [pc, #284]	; (14be8 <http_client_send_request+0x244>)
   14aca:	4798      	blx	r3
   14acc:	e7d4      	b.n	14a78 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   14ace:	0020      	movs	r0, r4
   14ad0:	30b0      	adds	r0, #176	; 0xb0
   14ad2:	2218      	movs	r2, #24
   14ad4:	2100      	movs	r1, #0
   14ad6:	4b45      	ldr	r3, [pc, #276]	; (14bec <http_client_send_request+0x248>)
   14ad8:	4798      	blx	r3
   14ada:	e7d6      	b.n	14a8a <http_client_send_request+0xe6>
		if (!reconnect) {
   14adc:	9b01      	ldr	r3, [sp, #4]
   14ade:	2b00      	cmp	r3, #0
   14ae0:	d06f      	beq.n	14bc2 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   14ae2:	2100      	movs	r1, #0
   14ae4:	0020      	movs	r0, r4
   14ae6:	4b42      	ldr	r3, [pc, #264]	; (14bf0 <http_client_send_request+0x24c>)
   14ae8:	4798      	blx	r3
		if (module->config.tls) {
   14aea:	2352      	movs	r3, #82	; 0x52
   14aec:	5ce2      	ldrb	r2, [r4, r3]
   14aee:	1e53      	subs	r3, r2, #1
   14af0:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   14af2:	b2d2      	uxtb	r2, r2
   14af4:	2101      	movs	r1, #1
   14af6:	2002      	movs	r0, #2
   14af8:	4b3e      	ldr	r3, [pc, #248]	; (14bf4 <http_client_send_request+0x250>)
   14afa:	4798      	blx	r3
   14afc:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   14afe:	2800      	cmp	r0, #0
   14b00:	db43      	blt.n	14b8a <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   14b02:	0080      	lsls	r0, r0, #2
   14b04:	4b3c      	ldr	r3, [pc, #240]	; (14bf8 <http_client_send_request+0x254>)
   14b06:	50c4      	str	r4, [r0, r3]
   14b08:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   14b0a:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   14b0c:	2620      	movs	r6, #32
			isv6 = 1;
   14b0e:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   14b10:	2730      	movs	r7, #48	; 0x30
   14b12:	e00c      	b.n	14b2e <http_client_send_request+0x18a>
		if (!reconnect) {
   14b14:	9b01      	ldr	r3, [sp, #4]
   14b16:	2b00      	cmp	r3, #0
   14b18:	d1e3      	bne.n	14ae2 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   14b1a:	3303      	adds	r3, #3
   14b1c:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   14b1e:	0020      	movs	r0, r4
   14b20:	4b36      	ldr	r3, [pc, #216]	; (14bfc <http_client_send_request+0x258>)
   14b22:	4798      	blx	r3
			break;
   14b24:	e04d      	b.n	14bc2 <http_client_send_request+0x21e>
			if (isv6) {
   14b26:	2900      	cmp	r1, #0
   14b28:	d001      	beq.n	14b2e <http_client_send_request+0x18a>
   14b2a:	e012      	b.n	14b52 <http_client_send_request+0x1ae>
			isv6 = 1;
   14b2c:	0001      	movs	r1, r0
	while (*host != '\0') {
   14b2e:	782a      	ldrb	r2, [r5, #0]
   14b30:	2a00      	cmp	r2, #0
   14b32:	d02e      	beq.n	14b92 <http_client_send_request+0x1ee>
		ch = *host++;
   14b34:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   14b36:	0013      	movs	r3, r2
   14b38:	43b3      	bics	r3, r6
   14b3a:	3b41      	subs	r3, #65	; 0x41
   14b3c:	2b05      	cmp	r3, #5
   14b3e:	d9f5      	bls.n	14b2c <http_client_send_request+0x188>
   14b40:	2a3a      	cmp	r2, #58	; 0x3a
   14b42:	d00a      	beq.n	14b5a <http_client_send_request+0x1b6>
   14b44:	2a2f      	cmp	r2, #47	; 0x2f
   14b46:	d00a      	beq.n	14b5e <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   14b48:	2a2e      	cmp	r2, #46	; 0x2e
   14b4a:	d0ec      	beq.n	14b26 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   14b4c:	403a      	ands	r2, r7
   14b4e:	2a30      	cmp	r2, #48	; 0x30
   14b50:	d0ed      	beq.n	14b2e <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   14b52:	9802      	ldr	r0, [sp, #8]
   14b54:	4b2a      	ldr	r3, [pc, #168]	; (14c00 <http_client_send_request+0x25c>)
   14b56:	4798      	blx	r3
   14b58:	e02f      	b.n	14bba <http_client_send_request+0x216>
			isv6 = 1;
   14b5a:	0001      	movs	r1, r0
   14b5c:	e7e7      	b.n	14b2e <http_client_send_request+0x18a>
   14b5e:	0001      	movs	r1, r0
   14b60:	e7e5      	b.n	14b2e <http_client_send_request+0x18a>
		return -EINVAL;
   14b62:	2316      	movs	r3, #22
   14b64:	425b      	negs	r3, r3
   14b66:	9301      	str	r3, [sp, #4]
   14b68:	e02b      	b.n	14bc2 <http_client_send_request+0x21e>
		return -EBUSY;
   14b6a:	2310      	movs	r3, #16
   14b6c:	425b      	negs	r3, r3
   14b6e:	9301      	str	r3, [sp, #4]
   14b70:	e027      	b.n	14bc2 <http_client_send_request+0x21e>
		return -EINVAL;
   14b72:	2316      	movs	r3, #22
   14b74:	425b      	negs	r3, r3
   14b76:	9301      	str	r3, [sp, #4]
   14b78:	e023      	b.n	14bc2 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   14b7a:	235b      	movs	r3, #91	; 0x5b
   14b7c:	425b      	negs	r3, r3
   14b7e:	9301      	str	r3, [sp, #4]
   14b80:	e01f      	b.n	14bc2 <http_client_send_request+0x21e>
			return -ENOMEM;
   14b82:	230c      	movs	r3, #12
   14b84:	425b      	negs	r3, r3
   14b86:	9301      	str	r3, [sp, #4]
   14b88:	e01b      	b.n	14bc2 <http_client_send_request+0x21e>
			return -ENOSPC;
   14b8a:	231c      	movs	r3, #28
   14b8c:	425b      	negs	r3, r3
   14b8e:	9301      	str	r3, [sp, #4]
   14b90:	e017      	b.n	14bc2 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   14b92:	2302      	movs	r3, #2
   14b94:	aa04      	add	r2, sp, #16
   14b96:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   14b98:	334e      	adds	r3, #78	; 0x4e
   14b9a:	5ae3      	ldrh	r3, [r4, r3]
   14b9c:	021a      	lsls	r2, r3, #8
   14b9e:	0a1b      	lsrs	r3, r3, #8
   14ba0:	4313      	orrs	r3, r2
   14ba2:	aa04      	add	r2, sp, #16
   14ba4:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   14ba6:	9802      	ldr	r0, [sp, #8]
   14ba8:	4b16      	ldr	r3, [pc, #88]	; (14c04 <http_client_send_request+0x260>)
   14baa:	4798      	blx	r3
   14bac:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   14bae:	2000      	movs	r0, #0
   14bb0:	5620      	ldrsb	r0, [r4, r0]
   14bb2:	2210      	movs	r2, #16
   14bb4:	a904      	add	r1, sp, #16
   14bb6:	4b14      	ldr	r3, [pc, #80]	; (14c08 <http_client_send_request+0x264>)
   14bb8:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   14bba:	2301      	movs	r3, #1
   14bbc:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   14bbe:	2300      	movs	r3, #0
   14bc0:	9301      	str	r3, [sp, #4]
}
   14bc2:	9801      	ldr	r0, [sp, #4]
   14bc4:	b008      	add	sp, #32
   14bc6:	bc04      	pop	{r2}
   14bc8:	4692      	mov	sl, r2
   14bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14bcc:	0001a930 	.word	0x0001a930
   14bd0:	0001704d 	.word	0x0001704d
   14bd4:	0001a938 	.word	0x0001a938
   14bd8:	0001703f 	.word	0x0001703f
   14bdc:	00016a39 	.word	0x00016a39
   14be0:	00017005 	.word	0x00017005
   14be4:	00016a4d 	.word	0x00016a4d
   14be8:	00016ff5 	.word	0x00016ff5
   14bec:	00016a83 	.word	0x00016a83
   14bf0:	000143ed 	.word	0x000143ed
   14bf4:	0000db05 	.word	0x0000db05
   14bf8:	20000884 	.word	0x20000884
   14bfc:	00014505 	.word	0x00014505
   14c00:	0000df4d 	.word	0x0000df4d
   14c04:	0000dee1 	.word	0x0000dee1
   14c08:	0000dc89 	.word	0x0000dc89

00014c0c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   14c0c:	b510      	push	{r4, lr}
	if (module == NULL) {
   14c0e:	2800      	cmp	r0, #0
   14c10:	d00d      	beq.n	14c2e <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   14c12:	6c41      	ldr	r1, [r0, #68]	; 0x44
   14c14:	6e02      	ldr	r2, [r0, #96]	; 0x60
   14c16:	4291      	cmp	r1, r2
   14c18:	d20a      	bcs.n	14c30 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   14c1a:	1a52      	subs	r2, r2, r1
   14c1c:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   14c1e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   14c20:	469c      	mov	ip, r3
   14c22:	4461      	add	r1, ip
	recv(module->sock,
   14c24:	7800      	ldrb	r0, [r0, #0]
   14c26:	b240      	sxtb	r0, r0
   14c28:	2300      	movs	r3, #0
   14c2a:	4c04      	ldr	r4, [pc, #16]	; (14c3c <_http_client_recv_packet+0x30>)
   14c2c:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   14c2e:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   14c30:	218b      	movs	r1, #139	; 0x8b
   14c32:	4249      	negs	r1, r1
   14c34:	4b02      	ldr	r3, [pc, #8]	; (14c40 <_http_client_recv_packet+0x34>)
   14c36:	4798      	blx	r3
		return;
   14c38:	e7f9      	b.n	14c2e <_http_client_recv_packet+0x22>
   14c3a:	46c0      	nop			; (mov r8, r8)
   14c3c:	0000ddb1 	.word	0x0000ddb1
   14c40:	000143ed 	.word	0x000143ed

00014c44 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   14c44:	b570      	push	{r4, r5, r6, lr}
   14c46:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   14c48:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   14c4a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   14c4c:	1a5c      	subs	r4, r3, r1
   14c4e:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   14c50:	2c00      	cmp	r4, #0
   14c52:	dc02      	bgt.n	14c5a <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   14c54:	2300      	movs	r3, #0
   14c56:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   14c58:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   14c5a:	0022      	movs	r2, r4
   14c5c:	4b01      	ldr	r3, [pc, #4]	; (14c64 <_http_client_move_buffer+0x20>)
   14c5e:	4798      	blx	r3
		module->recved_size = remain;
   14c60:	646c      	str	r4, [r5, #68]	; 0x44
   14c62:	e7f9      	b.n	14c58 <_http_client_move_buffer+0x14>
   14c64:	00016a5f 	.word	0x00016a5f

00014c68 <_http_client_handle_header>:
{
   14c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c6a:	46ce      	mov	lr, r9
   14c6c:	b500      	push	{lr}
   14c6e:	b084      	sub	sp, #16
   14c70:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   14c72:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   14c74:	4b62      	ldr	r3, [pc, #392]	; (14e00 <_http_client_handle_header+0x198>)
   14c76:	4699      	mov	r9, r3
   14c78:	e049      	b.n	14d0e <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   14c7a:	0021      	movs	r1, r4
   14c7c:	0038      	movs	r0, r7
   14c7e:	4b61      	ldr	r3, [pc, #388]	; (14e04 <_http_client_handle_header+0x19c>)
   14c80:	4798      	blx	r3
			return 0;
   14c82:	2600      	movs	r6, #0
}
   14c84:	0030      	movs	r0, r6
   14c86:	b004      	add	sp, #16
   14c88:	bc04      	pop	{r2}
   14c8a:	4691      	mov	r9, r2
   14c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   14c8e:	1ca1      	adds	r1, r4, #2
   14c90:	0038      	movs	r0, r7
   14c92:	4b5c      	ldr	r3, [pc, #368]	; (14e04 <_http_client_handle_header+0x19c>)
   14c94:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   14c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14c98:	2b00      	cmp	r3, #0
   14c9a:	d00a      	beq.n	14cb2 <_http_client_handle_header+0x4a>
   14c9c:	22e4      	movs	r2, #228	; 0xe4
   14c9e:	5ab9      	ldrh	r1, [r7, r2]
   14ca0:	2900      	cmp	r1, #0
   14ca2:	d006      	beq.n	14cb2 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   14ca4:	3a08      	subs	r2, #8
   14ca6:	58b8      	ldr	r0, [r7, r2]
   14ca8:	2800      	cmp	r0, #0
   14caa:	db07      	blt.n	14cbc <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   14cac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   14cae:	4290      	cmp	r0, r2
   14cb0:	dc10      	bgt.n	14cd4 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   14cb2:	2201      	movs	r2, #1
   14cb4:	23d8      	movs	r3, #216	; 0xd8
   14cb6:	50fa      	str	r2, [r7, r3]
			return 1;
   14cb8:	2601      	movs	r6, #1
   14cba:	e7e3      	b.n	14c84 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   14cbc:	aa01      	add	r2, sp, #4
   14cbe:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   14cc0:	2101      	movs	r1, #1
   14cc2:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   14cc4:	2100      	movs	r1, #0
   14cc6:	20e0      	movs	r0, #224	; 0xe0
   14cc8:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   14cca:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   14ccc:	3102      	adds	r1, #2
   14cce:	0038      	movs	r0, r7
   14cd0:	4798      	blx	r3
   14cd2:	e7ee      	b.n	14cb2 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   14cd4:	aa01      	add	r2, sp, #4
   14cd6:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   14cd8:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   14cda:	2100      	movs	r1, #0
   14cdc:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   14cde:	20e0      	movs	r0, #224	; 0xe0
   14ce0:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   14ce2:	3102      	adds	r1, #2
   14ce4:	0038      	movs	r0, r7
   14ce6:	4798      	blx	r3
   14ce8:	e7e3      	b.n	14cb2 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   14cea:	0020      	movs	r0, r4
   14cec:	3010      	adds	r0, #16
   14cee:	4b46      	ldr	r3, [pc, #280]	; (14e08 <_http_client_handle_header+0x1a0>)
   14cf0:	4798      	blx	r3
   14cf2:	23dc      	movs	r3, #220	; 0xdc
   14cf4:	50f8      	str	r0, [r7, r3]
   14cf6:	e009      	b.n	14d0c <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   14cf8:	3201      	adds	r2, #1
   14cfa:	4295      	cmp	r5, r2
   14cfc:	d006      	beq.n	14d0c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   14cfe:	7813      	ldrb	r3, [r2, #0]
   14d00:	2b20      	cmp	r3, #32
   14d02:	d12b      	bne.n	14d5c <_http_client_handle_header+0xf4>
   14d04:	e7f8      	b.n	14cf8 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   14d06:	3a21      	subs	r2, #33	; 0x21
   14d08:	3389      	adds	r3, #137	; 0x89
   14d0a:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   14d0c:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   14d0e:	493f      	ldr	r1, [pc, #252]	; (14e0c <_http_client_handle_header+0x1a4>)
   14d10:	0020      	movs	r0, r4
   14d12:	47c8      	blx	r9
   14d14:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   14d16:	d0b0      	beq.n	14c7a <_http_client_handle_header+0x12>
   14d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   14d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14d1c:	4694      	mov	ip, r2
   14d1e:	4463      	add	r3, ip
   14d20:	4298      	cmp	r0, r3
   14d22:	d2aa      	bcs.n	14c7a <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   14d24:	2202      	movs	r2, #2
   14d26:	4939      	ldr	r1, [pc, #228]	; (14e0c <_http_client_handle_header+0x1a4>)
   14d28:	0020      	movs	r0, r4
   14d2a:	4b39      	ldr	r3, [pc, #228]	; (14e10 <_http_client_handle_header+0x1a8>)
   14d2c:	4798      	blx	r3
   14d2e:	2800      	cmp	r0, #0
   14d30:	d0ad      	beq.n	14c8e <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   14d32:	2210      	movs	r2, #16
   14d34:	4937      	ldr	r1, [pc, #220]	; (14e14 <_http_client_handle_header+0x1ac>)
   14d36:	0020      	movs	r0, r4
   14d38:	4b35      	ldr	r3, [pc, #212]	; (14e10 <_http_client_handle_header+0x1a8>)
   14d3a:	4798      	blx	r3
   14d3c:	2800      	cmp	r0, #0
   14d3e:	d0d4      	beq.n	14cea <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   14d40:	2213      	movs	r2, #19
   14d42:	4935      	ldr	r1, [pc, #212]	; (14e18 <_http_client_handle_header+0x1b0>)
   14d44:	0020      	movs	r0, r4
   14d46:	4b32      	ldr	r3, [pc, #200]	; (14e10 <_http_client_handle_header+0x1a8>)
   14d48:	4798      	blx	r3
   14d4a:	1e06      	subs	r6, r0, #0
   14d4c:	d110      	bne.n	14d70 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   14d4e:	0022      	movs	r2, r4
   14d50:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   14d52:	4295      	cmp	r5, r2
   14d54:	d9da      	bls.n	14d0c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   14d56:	7ce3      	ldrb	r3, [r4, #19]
   14d58:	2b20      	cmp	r3, #32
   14d5a:	d0cd      	beq.n	14cf8 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   14d5c:	2220      	movs	r2, #32
   14d5e:	4393      	bics	r3, r2
   14d60:	2b43      	cmp	r3, #67	; 0x43
   14d62:	d0d0      	beq.n	14d06 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   14d64:	2186      	movs	r1, #134	; 0x86
   14d66:	4249      	negs	r1, r1
   14d68:	0038      	movs	r0, r7
   14d6a:	4b2c      	ldr	r3, [pc, #176]	; (14e1c <_http_client_handle_header+0x1b4>)
   14d6c:	4798      	blx	r3
					return 0;
   14d6e:	e789      	b.n	14c84 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   14d70:	220c      	movs	r2, #12
   14d72:	492b      	ldr	r1, [pc, #172]	; (14e20 <_http_client_handle_header+0x1b8>)
   14d74:	0020      	movs	r0, r4
   14d76:	4b26      	ldr	r3, [pc, #152]	; (14e10 <_http_client_handle_header+0x1a8>)
   14d78:	4798      	blx	r3
   14d7a:	2800      	cmp	r0, #0
   14d7c:	d11d      	bne.n	14dba <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   14d7e:	0022      	movs	r2, r4
   14d80:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   14d82:	4295      	cmp	r5, r2
   14d84:	d9c2      	bls.n	14d0c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   14d86:	7b23      	ldrb	r3, [r4, #12]
   14d88:	2b20      	cmp	r3, #32
   14d8a:	d009      	beq.n	14da0 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   14d8c:	2220      	movs	r2, #32
   14d8e:	4393      	bics	r3, r2
   14d90:	2b4b      	cmp	r3, #75	; 0x4b
   14d92:	d00c      	beq.n	14dae <_http_client_handle_header+0x146>
					module->permanent = 0;
   14d94:	2241      	movs	r2, #65	; 0x41
   14d96:	5cbb      	ldrb	r3, [r7, r2]
   14d98:	2102      	movs	r1, #2
   14d9a:	438b      	bics	r3, r1
   14d9c:	54bb      	strb	r3, [r7, r2]
   14d9e:	e7b5      	b.n	14d0c <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   14da0:	3201      	adds	r2, #1
   14da2:	4295      	cmp	r5, r2
   14da4:	d0b2      	beq.n	14d0c <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   14da6:	7813      	ldrb	r3, [r2, #0]
   14da8:	2b20      	cmp	r3, #32
   14daa:	d1ef      	bne.n	14d8c <_http_client_handle_header+0x124>
   14dac:	e7f8      	b.n	14da0 <_http_client_handle_header+0x138>
					module->permanent = 1;
   14dae:	3221      	adds	r2, #33	; 0x21
   14db0:	5cbb      	ldrb	r3, [r7, r2]
   14db2:	2102      	movs	r1, #2
   14db4:	430b      	orrs	r3, r1
   14db6:	54bb      	strb	r3, [r7, r2]
   14db8:	e7a8      	b.n	14d0c <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   14dba:	2205      	movs	r2, #5
   14dbc:	4919      	ldr	r1, [pc, #100]	; (14e24 <_http_client_handle_header+0x1bc>)
   14dbe:	0020      	movs	r0, r4
   14dc0:	4b13      	ldr	r3, [pc, #76]	; (14e10 <_http_client_handle_header+0x1a8>)
   14dc2:	4798      	blx	r3
   14dc4:	2800      	cmp	r0, #0
   14dc6:	d1a1      	bne.n	14d0c <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   14dc8:	0020      	movs	r0, r4
   14dca:	3009      	adds	r0, #9
   14dcc:	4b0e      	ldr	r3, [pc, #56]	; (14e08 <_http_client_handle_header+0x1a0>)
   14dce:	4798      	blx	r3
   14dd0:	23e4      	movs	r3, #228	; 0xe4
   14dd2:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   14dd4:	2200      	movs	r2, #0
   14dd6:	3b08      	subs	r3, #8
   14dd8:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   14dda:	7963      	ldrb	r3, [r4, #5]
   14ddc:	2b31      	cmp	r3, #49	; 0x31
   14dde:	d802      	bhi.n	14de6 <_http_client_handle_header+0x17e>
   14de0:	79e3      	ldrb	r3, [r4, #7]
   14de2:	2b30      	cmp	r3, #48	; 0x30
   14de4:	d905      	bls.n	14df2 <_http_client_handle_header+0x18a>
				module->permanent = 1;
   14de6:	2241      	movs	r2, #65	; 0x41
   14de8:	5cbb      	ldrb	r3, [r7, r2]
   14dea:	2102      	movs	r1, #2
   14dec:	430b      	orrs	r3, r1
   14dee:	54bb      	strb	r3, [r7, r2]
   14df0:	e78c      	b.n	14d0c <_http_client_handle_header+0xa4>
				module->permanent = 0;
   14df2:	2241      	movs	r2, #65	; 0x41
   14df4:	5cbb      	ldrb	r3, [r7, r2]
   14df6:	2102      	movs	r1, #2
   14df8:	438b      	bics	r3, r1
   14dfa:	54bb      	strb	r3, [r7, r2]
   14dfc:	e786      	b.n	14d0c <_http_client_handle_header+0xa4>
   14dfe:	46c0      	nop			; (mov r8, r8)
   14e00:	000170bd 	.word	0x000170bd
   14e04:	00014c45 	.word	0x00014c45
   14e08:	000169d1 	.word	0x000169d1
   14e0c:	0001a604 	.word	0x0001a604
   14e10:	0001704d 	.word	0x0001704d
   14e14:	0001a910 	.word	0x0001a910
   14e18:	0001a820 	.word	0x0001a820
   14e1c:	000143ed 	.word	0x000143ed
   14e20:	0001a834 	.word	0x0001a834
   14e24:	0001a844 	.word	0x0001a844

00014e28 <_http_client_handle_entity>:
{
   14e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e2a:	46ce      	mov	lr, r9
   14e2c:	b500      	push	{lr}
   14e2e:	b086      	sub	sp, #24
   14e30:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   14e32:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   14e34:	23dc      	movs	r3, #220	; 0xdc
   14e36:	58c3      	ldr	r3, [r0, r3]
   14e38:	2b00      	cmp	r3, #0
   14e3a:	db69      	blt.n	14f10 <_http_client_handle_entity+0xe8>
   14e3c:	6e02      	ldr	r2, [r0, #96]	; 0x60
   14e3e:	4293      	cmp	r3, r2
   14e40:	dc2b      	bgt.n	14e9a <_http_client_handle_entity+0x72>
	return 0;
   14e42:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   14e44:	6c62      	ldr	r2, [r4, #68]	; 0x44
   14e46:	4293      	cmp	r3, r2
   14e48:	dc4e      	bgt.n	14ee8 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   14e4a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   14e4c:	2e00      	cmp	r6, #0
   14e4e:	d003      	beq.n	14e58 <_http_client_handle_entity+0x30>
   14e50:	22e4      	movs	r2, #228	; 0xe4
   14e52:	5aa1      	ldrh	r1, [r4, r2]
   14e54:	2900      	cmp	r1, #0
   14e56:	d10e      	bne.n	14e76 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   14e58:	2300      	movs	r3, #0
   14e5a:	22d8      	movs	r2, #216	; 0xd8
   14e5c:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   14e5e:	320c      	adds	r2, #12
   14e60:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   14e62:	3341      	adds	r3, #65	; 0x41
   14e64:	5ce3      	ldrb	r3, [r4, r3]
   14e66:	079b      	lsls	r3, r3, #30
   14e68:	d40f      	bmi.n	14e8a <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   14e6a:	2100      	movs	r1, #0
   14e6c:	0020      	movs	r0, r4
   14e6e:	4b71      	ldr	r3, [pc, #452]	; (15034 <_http_client_handle_entity+0x20c>)
   14e70:	4798      	blx	r3
	return 0;
   14e72:	2000      	movs	r0, #0
   14e74:	e038      	b.n	14ee8 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   14e76:	aa03      	add	r2, sp, #12
   14e78:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   14e7a:	2100      	movs	r1, #0
   14e7c:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   14e7e:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   14e80:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   14e82:	3102      	adds	r1, #2
   14e84:	0020      	movs	r0, r4
   14e86:	47b0      	blx	r6
   14e88:	e7e6      	b.n	14e58 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   14e8a:	23dc      	movs	r3, #220	; 0xdc
   14e8c:	58e1      	ldr	r1, [r4, r3]
   14e8e:	1869      	adds	r1, r5, r1
   14e90:	0020      	movs	r0, r4
   14e92:	4b69      	ldr	r3, [pc, #420]	; (15038 <_http_client_handle_entity+0x210>)
   14e94:	4798      	blx	r3
				return module->recved_size;
   14e96:	6c60      	ldr	r0, [r4, #68]	; 0x44
   14e98:	e026      	b.n	14ee8 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   14e9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   14e9c:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   14e9e:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   14ea0:	21e0      	movs	r1, #224	; 0xe0
   14ea2:	5840      	ldr	r0, [r0, r1]
   14ea4:	4684      	mov	ip, r0
   14ea6:	4462      	add	r2, ip
   14ea8:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   14eaa:	4293      	cmp	r3, r2
   14eac:	dc20      	bgt.n	14ef0 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   14eae:	2300      	movs	r3, #0
   14eb0:	22d8      	movs	r2, #216	; 0xd8
   14eb2:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   14eb4:	320c      	adds	r2, #12
   14eb6:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   14eb8:	3ae3      	subs	r2, #227	; 0xe3
   14eba:	ab03      	add	r3, sp, #12
   14ebc:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   14ebe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14ec0:	2b00      	cmp	r3, #0
   14ec2:	d007      	beq.n	14ed4 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   14ec4:	ae03      	add	r6, sp, #12
   14ec6:	0032      	movs	r2, r6
   14ec8:	2103      	movs	r1, #3
   14eca:	0020      	movs	r0, r4
   14ecc:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   14ece:	7a33      	ldrb	r3, [r6, #8]
   14ed0:	2b01      	cmp	r3, #1
   14ed2:	d103      	bne.n	14edc <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   14ed4:	2341      	movs	r3, #65	; 0x41
   14ed6:	5ce3      	ldrb	r3, [r4, r3]
   14ed8:	079b      	lsls	r3, r3, #30
   14eda:	d510      	bpl.n	14efe <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   14edc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14ede:	18e9      	adds	r1, r5, r3
   14ee0:	0020      	movs	r0, r4
   14ee2:	4b55      	ldr	r3, [pc, #340]	; (15038 <_http_client_handle_entity+0x210>)
   14ee4:	4798      	blx	r3
	return 0;
   14ee6:	2000      	movs	r0, #0
}
   14ee8:	b006      	add	sp, #24
   14eea:	bc04      	pop	{r2}
   14eec:	4691      	mov	r9, r2
   14eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   14ef0:	2200      	movs	r2, #0
   14ef2:	ab03      	add	r3, sp, #12
   14ef4:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   14ef6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d0ef      	beq.n	14edc <_http_client_handle_entity+0xb4>
   14efc:	e7e2      	b.n	14ec4 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   14efe:	484f      	ldr	r0, [pc, #316]	; (1503c <_http_client_handle_entity+0x214>)
   14f00:	4b4f      	ldr	r3, [pc, #316]	; (15040 <_http_client_handle_entity+0x218>)
   14f02:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   14f04:	2100      	movs	r1, #0
   14f06:	0020      	movs	r0, r4
   14f08:	4b4a      	ldr	r3, [pc, #296]	; (15034 <_http_client_handle_entity+0x20c>)
   14f0a:	4798      	blx	r3
					return 0;
   14f0c:	2000      	movs	r0, #0
   14f0e:	e7eb      	b.n	14ee8 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   14f10:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   14f12:	2300      	movs	r3, #0
   14f14:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   14f16:	26e0      	movs	r6, #224	; 0xe0
   14f18:	e00a      	b.n	14f30 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   14f1a:	2341      	movs	r3, #65	; 0x41
   14f1c:	5ce3      	ldrb	r3, [r4, r3]
   14f1e:	079b      	lsls	r3, r3, #30
   14f20:	d51b      	bpl.n	14f5a <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   14f22:	1ca9      	adds	r1, r5, #2
   14f24:	0020      	movs	r0, r4
   14f26:	4b44      	ldr	r3, [pc, #272]	; (15038 <_http_client_handle_entity+0x210>)
   14f28:	4798      	blx	r3
	} while(module->recved_size > 0);
   14f2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14f2c:	2b00      	cmp	r3, #0
   14f2e:	d073      	beq.n	15018 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   14f30:	59a3      	ldr	r3, [r4, r6]
   14f32:	2b00      	cmp	r3, #0
   14f34:	db30      	blt.n	14f98 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   14f36:	d116      	bne.n	14f66 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   14f38:	22d8      	movs	r2, #216	; 0xd8
   14f3a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   14f3c:	320c      	adds	r2, #12
   14f3e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   14f40:	3ae3      	subs	r2, #227	; 0xe3
   14f42:	4669      	mov	r1, sp
   14f44:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   14f46:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   14f48:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   14f4a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14f4c:	2b00      	cmp	r3, #0
   14f4e:	d0e4      	beq.n	14f1a <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   14f50:	466a      	mov	r2, sp
   14f52:	2103      	movs	r1, #3
   14f54:	0020      	movs	r0, r4
   14f56:	4798      	blx	r3
   14f58:	e7df      	b.n	14f1a <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   14f5a:	2100      	movs	r1, #0
   14f5c:	0020      	movs	r0, r4
   14f5e:	4b35      	ldr	r3, [pc, #212]	; (15034 <_http_client_handle_entity+0x20c>)
   14f60:	4798      	blx	r3
	return 0;
   14f62:	2000      	movs	r0, #0
   14f64:	e7c0      	b.n	14ee8 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   14f66:	42bb      	cmp	r3, r7
   14f68:	dcdf      	bgt.n	14f2a <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   14f6a:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   14f6c:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   14f6e:	2300      	movs	r3, #0
   14f70:	466a      	mov	r2, sp
   14f72:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   14f74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14f76:	2b00      	cmp	r3, #0
   14f78:	d002      	beq.n	14f80 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   14f7a:	2103      	movs	r1, #3
   14f7c:	0020      	movs	r0, r4
   14f7e:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   14f80:	59a3      	ldr	r3, [r4, r6]
   14f82:	1c99      	adds	r1, r3, #2
   14f84:	1869      	adds	r1, r5, r1
   14f86:	0020      	movs	r0, r4
   14f88:	4b2b      	ldr	r3, [pc, #172]	; (15038 <_http_client_handle_entity+0x210>)
   14f8a:	4798      	blx	r3
				length = (int)module->recved_size;
   14f8c:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   14f8e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   14f90:	2301      	movs	r3, #1
   14f92:	425b      	negs	r3, r3
   14f94:	51a3      	str	r3, [r4, r6]
   14f96:	e7c8      	b.n	14f2a <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   14f98:	2300      	movs	r3, #0
   14f9a:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   14f9c:	2f00      	cmp	r7, #0
   14f9e:	dd04      	ble.n	14faa <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   14fa0:	782b      	ldrb	r3, [r5, #0]
   14fa2:	2b0a      	cmp	r3, #10
   14fa4:	d11c      	bne.n	14fe0 <_http_client_handle_entity+0x1b8>
					buffer++;
   14fa6:	3501      	adds	r5, #1
					length--;
   14fa8:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   14faa:	59a3      	ldr	r3, [r4, r6]
   14fac:	6e22      	ldr	r2, [r4, #96]	; 0x60
   14fae:	4293      	cmp	r3, r2
   14fb0:	dc39      	bgt.n	15026 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   14fb2:	2f00      	cmp	r7, #0
   14fb4:	d1b9      	bne.n	14f2a <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   14fb6:	2201      	movs	r2, #1
   14fb8:	4252      	negs	r2, r2
   14fba:	23e0      	movs	r3, #224	; 0xe0
   14fbc:	50e2      	str	r2, [r4, r3]
   14fbe:	e7d0      	b.n	14f62 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   14fc0:	001a      	movs	r2, r3
   14fc2:	3a61      	subs	r2, #97	; 0x61
   14fc4:	2a05      	cmp	r2, #5
   14fc6:	d818      	bhi.n	14ffa <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   14fc8:	59a2      	ldr	r2, [r4, r6]
   14fca:	0112      	lsls	r2, r2, #4
   14fcc:	18d3      	adds	r3, r2, r3
   14fce:	3b61      	subs	r3, #97	; 0x61
   14fd0:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   14fd2:	3501      	adds	r5, #1
   14fd4:	3f01      	subs	r7, #1
   14fd6:	2f00      	cmp	r7, #0
   14fd8:	d020      	beq.n	1501c <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   14fda:	782b      	ldrb	r3, [r5, #0]
   14fdc:	2b0a      	cmp	r3, #10
   14fde:	d0e2      	beq.n	14fa6 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   14fe0:	464a      	mov	r2, r9
   14fe2:	2a00      	cmp	r2, #0
   14fe4:	d1f5      	bne.n	14fd2 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   14fe6:	001a      	movs	r2, r3
   14fe8:	3a30      	subs	r2, #48	; 0x30
   14fea:	2a09      	cmp	r2, #9
   14fec:	d8e8      	bhi.n	14fc0 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   14fee:	59a2      	ldr	r2, [r4, r6]
   14ff0:	0112      	lsls	r2, r2, #4
   14ff2:	18d3      	adds	r3, r2, r3
   14ff4:	3b30      	subs	r3, #48	; 0x30
   14ff6:	51a3      	str	r3, [r4, r6]
   14ff8:	e7eb      	b.n	14fd2 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   14ffa:	001a      	movs	r2, r3
   14ffc:	3a41      	subs	r2, #65	; 0x41
   14ffe:	2a05      	cmp	r2, #5
   15000:	d805      	bhi.n	1500e <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   15002:	59a2      	ldr	r2, [r4, r6]
   15004:	0112      	lsls	r2, r2, #4
   15006:	18d3      	adds	r3, r2, r3
   15008:	3b41      	subs	r3, #65	; 0x41
   1500a:	51a3      	str	r3, [r4, r6]
   1500c:	e7e1      	b.n	14fd2 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   1500e:	3b3b      	subs	r3, #59	; 0x3b
   15010:	425a      	negs	r2, r3
   15012:	415a      	adcs	r2, r3
   15014:	4691      	mov	r9, r2
   15016:	e7dc      	b.n	14fd2 <_http_client_handle_entity+0x1aa>
	return 0;
   15018:	2000      	movs	r0, #0
   1501a:	e765      	b.n	14ee8 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   1501c:	23e0      	movs	r3, #224	; 0xe0
   1501e:	58e3      	ldr	r3, [r4, r3]
   15020:	6e22      	ldr	r2, [r4, #96]	; 0x60
   15022:	4293      	cmp	r3, r2
   15024:	ddc7      	ble.n	14fb6 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   15026:	218b      	movs	r1, #139	; 0x8b
   15028:	4249      	negs	r1, r1
   1502a:	0020      	movs	r0, r4
   1502c:	4b01      	ldr	r3, [pc, #4]	; (15034 <_http_client_handle_entity+0x20c>)
   1502e:	4798      	blx	r3
   15030:	e797      	b.n	14f62 <_http_client_handle_entity+0x13a>
   15032:	46c0      	nop			; (mov r8, r8)
   15034:	000143ed 	.word	0x000143ed
   15038:	00014c45 	.word	0x00014c45
   1503c:	0001a81c 	.word	0x0001a81c
   15040:	00016d01 	.word	0x00016d01

00015044 <_http_client_handle_response>:
{
   15044:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   15046:	23d8      	movs	r3, #216	; 0xd8
   15048:	58c3      	ldr	r3, [r0, r3]
   1504a:	2b00      	cmp	r3, #0
   1504c:	d003      	beq.n	15056 <_http_client_handle_response+0x12>
   1504e:	2b01      	cmp	r3, #1
   15050:	d004      	beq.n	1505c <_http_client_handle_response+0x18>
	return 0;
   15052:	2000      	movs	r0, #0
   15054:	e001      	b.n	1505a <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   15056:	4b03      	ldr	r3, [pc, #12]	; (15064 <_http_client_handle_response+0x20>)
   15058:	4798      	blx	r3
}
   1505a:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   1505c:	4b02      	ldr	r3, [pc, #8]	; (15068 <_http_client_handle_response+0x24>)
   1505e:	4798      	blx	r3
   15060:	e7fb      	b.n	1505a <_http_client_handle_response+0x16>
   15062:	46c0      	nop			; (mov r8, r8)
   15064:	00014c69 	.word	0x00014c69
   15068:	00014e29 	.word	0x00014e29

0001506c <_http_client_recved_packet>:
{
   1506c:	b570      	push	{r4, r5, r6, lr}
   1506e:	0004      	movs	r4, r0
	module->recved_size += read_len;
   15070:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15072:	469c      	mov	ip, r3
   15074:	4461      	add	r1, ip
   15076:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   15078:	2358      	movs	r3, #88	; 0x58
   1507a:	5ac3      	ldrh	r3, [r0, r3]
   1507c:	2b00      	cmp	r3, #0
   1507e:	d105      	bne.n	1508c <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   15080:	4d05      	ldr	r5, [pc, #20]	; (15098 <_http_client_recved_packet+0x2c>)
   15082:	0020      	movs	r0, r4
   15084:	47a8      	blx	r5
   15086:	2800      	cmp	r0, #0
   15088:	d1fb      	bne.n	15082 <_http_client_recved_packet+0x16>
}
   1508a:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   1508c:	6c81      	ldr	r1, [r0, #72]	; 0x48
   1508e:	6d40      	ldr	r0, [r0, #84]	; 0x54
   15090:	4b02      	ldr	r3, [pc, #8]	; (1509c <_http_client_recved_packet+0x30>)
   15092:	4798      	blx	r3
   15094:	e7f4      	b.n	15080 <_http_client_recved_packet+0x14>
   15096:	46c0      	nop			; (mov r8, r8)
   15098:	00015045 	.word	0x00015045
   1509c:	00015419 	.word	0x00015419

000150a0 <http_client_socket_event_handler>:
{
   150a0:	b510      	push	{r4, lr}
   150a2:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   150a4:	0080      	lsls	r0, r0, #2
   150a6:	4b65      	ldr	r3, [pc, #404]	; (1523c <http_client_socket_event_handler+0x19c>)
   150a8:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   150aa:	2c00      	cmp	r4, #0
   150ac:	d006      	beq.n	150bc <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   150ae:	2906      	cmp	r1, #6
   150b0:	d051      	beq.n	15156 <http_client_socket_event_handler+0xb6>
   150b2:	2907      	cmp	r1, #7
   150b4:	d100      	bne.n	150b8 <http_client_socket_event_handler+0x18>
   150b6:	e08a      	b.n	151ce <http_client_socket_event_handler+0x12e>
   150b8:	2905      	cmp	r1, #5
   150ba:	d001      	beq.n	150c0 <http_client_socket_event_handler+0x20>
}
   150bc:	b004      	add	sp, #16
   150be:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   150c0:	2301      	movs	r3, #1
   150c2:	56d3      	ldrsb	r3, [r2, r3]
   150c4:	1e1a      	subs	r2, r3, #0
   150c6:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   150c8:	db15      	blt.n	150f6 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   150ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   150cc:	2b00      	cmp	r3, #0
   150ce:	d003      	beq.n	150d8 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   150d0:	aa01      	add	r2, sp, #4
   150d2:	2100      	movs	r1, #0
   150d4:	0020      	movs	r0, r4
   150d6:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   150d8:	2303      	movs	r3, #3
   150da:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   150dc:	3355      	adds	r3, #85	; 0x55
   150de:	5ae2      	ldrh	r2, [r4, r3]
   150e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   150e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
   150e4:	4b56      	ldr	r3, [pc, #344]	; (15240 <http_client_socket_event_handler+0x1a0>)
   150e6:	4798      	blx	r3
    		_http_client_recv_packet(module);
   150e8:	0020      	movs	r0, r4
   150ea:	4b56      	ldr	r3, [pc, #344]	; (15244 <http_client_socket_event_handler+0x1a4>)
   150ec:	4798      	blx	r3
			_http_client_request(module);
   150ee:	0020      	movs	r0, r4
   150f0:	4b55      	ldr	r3, [pc, #340]	; (15248 <http_client_socket_event_handler+0x1a8>)
   150f2:	4798      	blx	r3
   150f4:	e7e2      	b.n	150bc <http_client_socket_event_handler+0x1c>
	switch (err) {
   150f6:	330e      	adds	r3, #14
   150f8:	b2d9      	uxtb	r1, r3
   150fa:	290e      	cmp	r1, #14
   150fc:	d81e      	bhi.n	1513c <http_client_socket_event_handler+0x9c>
   150fe:	008b      	lsls	r3, r1, #2
   15100:	4952      	ldr	r1, [pc, #328]	; (1524c <http_client_socket_event_handler+0x1ac>)
   15102:	58cb      	ldr	r3, [r1, r3]
   15104:	469f      	mov	pc, r3
			return -ENOENT;
   15106:	2102      	movs	r1, #2
   15108:	4249      	negs	r1, r1
   1510a:	e01d      	b.n	15148 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   1510c:	2170      	movs	r1, #112	; 0x70
   1510e:	4249      	negs	r1, r1
   15110:	e01a      	b.n	15148 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   15112:	210c      	movs	r1, #12
   15114:	4249      	negs	r1, r1
   15116:	e017      	b.n	15148 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   15118:	2116      	movs	r1, #22
   1511a:	4249      	negs	r1, r1
   1511c:	e014      	b.n	15148 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   1511e:	210c      	movs	r1, #12
   15120:	4249      	negs	r1, r1
   15122:	e011      	b.n	15148 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   15124:	2179      	movs	r1, #121	; 0x79
   15126:	4249      	negs	r1, r1
   15128:	e00e      	b.n	15148 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   1512a:	2168      	movs	r1, #104	; 0x68
   1512c:	4249      	negs	r1, r1
   1512e:	e00b      	b.n	15148 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   15130:	210b      	movs	r1, #11
   15132:	4249      	negs	r1, r1
   15134:	e008      	b.n	15148 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   15136:	2110      	movs	r1, #16
   15138:	4249      	negs	r1, r1
   1513a:	e005      	b.n	15148 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   1513c:	2a00      	cmp	r2, #0
   1513e:	db07      	blt.n	15150 <http_client_socket_event_handler+0xb0>
			return 0;
   15140:	2100      	movs	r1, #0
   15142:	e001      	b.n	15148 <http_client_socket_event_handler+0xa8>
			return -EIO;
   15144:	2105      	movs	r1, #5
   15146:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   15148:	0020      	movs	r0, r4
   1514a:	4b41      	ldr	r3, [pc, #260]	; (15250 <http_client_socket_event_handler+0x1b0>)
   1514c:	4798      	blx	r3
   1514e:	e7b5      	b.n	150bc <http_client_socket_event_handler+0x1c>
				return -EIO;
   15150:	2105      	movs	r1, #5
   15152:	4249      	negs	r1, r1
   15154:	e7f8      	b.n	15148 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   15156:	2304      	movs	r3, #4
   15158:	5ed1      	ldrsh	r1, [r2, r3]
   1515a:	2900      	cmp	r1, #0
   1515c:	dd06      	ble.n	1516c <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   1515e:	0020      	movs	r0, r4
   15160:	4b3c      	ldr	r3, [pc, #240]	; (15254 <http_client_socket_event_handler+0x1b4>)
   15162:	4798      	blx	r3
		_http_client_recv_packet(module);
   15164:	0020      	movs	r0, r4
   15166:	4b37      	ldr	r3, [pc, #220]	; (15244 <http_client_socket_event_handler+0x1a4>)
   15168:	4798      	blx	r3
		break;
   1516a:	e7a7      	b.n	150bc <http_client_socket_event_handler+0x1c>
	switch (err) {
   1516c:	000b      	movs	r3, r1
   1516e:	330e      	adds	r3, #14
   15170:	b29a      	uxth	r2, r3
   15172:	2a0e      	cmp	r2, #14
   15174:	d81e      	bhi.n	151b4 <http_client_socket_event_handler+0x114>
   15176:	0093      	lsls	r3, r2, #2
   15178:	4a37      	ldr	r2, [pc, #220]	; (15258 <http_client_socket_event_handler+0x1b8>)
   1517a:	58d3      	ldr	r3, [r2, r3]
   1517c:	469f      	mov	pc, r3
			return -ENOENT;
   1517e:	2102      	movs	r1, #2
   15180:	4249      	negs	r1, r1
   15182:	e01d      	b.n	151c0 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   15184:	2170      	movs	r1, #112	; 0x70
   15186:	4249      	negs	r1, r1
   15188:	e01a      	b.n	151c0 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   1518a:	210c      	movs	r1, #12
   1518c:	4249      	negs	r1, r1
   1518e:	e017      	b.n	151c0 <http_client_socket_event_handler+0x120>
			return -EINVAL;
   15190:	2116      	movs	r1, #22
   15192:	4249      	negs	r1, r1
   15194:	e014      	b.n	151c0 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   15196:	210c      	movs	r1, #12
   15198:	4249      	negs	r1, r1
   1519a:	e011      	b.n	151c0 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   1519c:	2179      	movs	r1, #121	; 0x79
   1519e:	4249      	negs	r1, r1
   151a0:	e00e      	b.n	151c0 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   151a2:	2168      	movs	r1, #104	; 0x68
   151a4:	4249      	negs	r1, r1
   151a6:	e00b      	b.n	151c0 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   151a8:	210b      	movs	r1, #11
   151aa:	4249      	negs	r1, r1
   151ac:	e008      	b.n	151c0 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   151ae:	2110      	movs	r1, #16
   151b0:	4249      	negs	r1, r1
   151b2:	e005      	b.n	151c0 <http_client_socket_event_handler+0x120>
			if (err < 0) {
   151b4:	2900      	cmp	r1, #0
   151b6:	db07      	blt.n	151c8 <http_client_socket_event_handler+0x128>
			return 0;
   151b8:	2100      	movs	r1, #0
   151ba:	e001      	b.n	151c0 <http_client_socket_event_handler+0x120>
			return -EIO;
   151bc:	2105      	movs	r1, #5
   151be:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   151c0:	0020      	movs	r0, r4
   151c2:	4b23      	ldr	r3, [pc, #140]	; (15250 <http_client_socket_event_handler+0x1b0>)
   151c4:	4798      	blx	r3
   151c6:	e7cd      	b.n	15164 <http_client_socket_event_handler+0xc4>
				return -EIO;
   151c8:	2105      	movs	r1, #5
   151ca:	4249      	negs	r1, r1
   151cc:	e7f8      	b.n	151c0 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   151ce:	2300      	movs	r3, #0
   151d0:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   151d2:	2b00      	cmp	r3, #0
   151d4:	db08      	blt.n	151e8 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   151d6:	0020      	movs	r0, r4
   151d8:	4b1b      	ldr	r3, [pc, #108]	; (15248 <http_client_socket_event_handler+0x1a8>)
   151da:	4798      	blx	r3
		module->sending = 0;
   151dc:	2241      	movs	r2, #65	; 0x41
   151de:	5ca3      	ldrb	r3, [r4, r2]
   151e0:	2101      	movs	r1, #1
   151e2:	438b      	bics	r3, r1
   151e4:	54a3      	strb	r3, [r4, r2]
    	break;
   151e6:	e769      	b.n	150bc <http_client_socket_event_handler+0x1c>
	switch (err) {
   151e8:	330e      	adds	r3, #14
   151ea:	b29a      	uxth	r2, r3
   151ec:	2a0d      	cmp	r2, #13
   151ee:	d81e      	bhi.n	1522e <http_client_socket_event_handler+0x18e>
   151f0:	0093      	lsls	r3, r2, #2
   151f2:	4a1a      	ldr	r2, [pc, #104]	; (1525c <http_client_socket_event_handler+0x1bc>)
   151f4:	58d3      	ldr	r3, [r2, r3]
   151f6:	469f      	mov	pc, r3
			return -ENOENT;
   151f8:	2102      	movs	r1, #2
   151fa:	4249      	negs	r1, r1
   151fc:	e019      	b.n	15232 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   151fe:	2170      	movs	r1, #112	; 0x70
   15200:	4249      	negs	r1, r1
   15202:	e016      	b.n	15232 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   15204:	210c      	movs	r1, #12
   15206:	4249      	negs	r1, r1
   15208:	e013      	b.n	15232 <http_client_socket_event_handler+0x192>
			return -EINVAL;
   1520a:	2116      	movs	r1, #22
   1520c:	4249      	negs	r1, r1
   1520e:	e010      	b.n	15232 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   15210:	210c      	movs	r1, #12
   15212:	4249      	negs	r1, r1
   15214:	e00d      	b.n	15232 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   15216:	2179      	movs	r1, #121	; 0x79
   15218:	4249      	negs	r1, r1
   1521a:	e00a      	b.n	15232 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   1521c:	2168      	movs	r1, #104	; 0x68
   1521e:	4249      	negs	r1, r1
   15220:	e007      	b.n	15232 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   15222:	210b      	movs	r1, #11
   15224:	4249      	negs	r1, r1
   15226:	e004      	b.n	15232 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   15228:	2110      	movs	r1, #16
   1522a:	4249      	negs	r1, r1
   1522c:	e001      	b.n	15232 <http_client_socket_event_handler+0x192>
			return -EIO;
   1522e:	2105      	movs	r1, #5
   15230:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   15232:	0020      	movs	r0, r4
   15234:	4b06      	ldr	r3, [pc, #24]	; (15250 <http_client_socket_event_handler+0x1b0>)
   15236:	4798      	blx	r3
   15238:	e7d0      	b.n	151dc <http_client_socket_event_handler+0x13c>
   1523a:	46c0      	nop			; (mov r8, r8)
   1523c:	20000884 	.word	0x20000884
   15240:	000153ed 	.word	0x000153ed
   15244:	00014c0d 	.word	0x00014c0d
   15248:	00014505 	.word	0x00014505
   1524c:	0001a75c 	.word	0x0001a75c
   15250:	000143ed 	.word	0x000143ed
   15254:	0001506d 	.word	0x0001506d
   15258:	0001a798 	.word	0x0001a798
   1525c:	0001a7d4 	.word	0x0001a7d4

00015260 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   15260:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   15262:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   15264:	2200      	movs	r2, #0
   15266:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   15268:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   1526a:	9b00      	ldr	r3, [sp, #0]
   1526c:	60c3      	str	r3, [r0, #12]
}
   1526e:	4770      	bx	lr

00015270 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   15270:	b510      	push	{r4, lr}
   15272:	0004      	movs	r4, r0
	if(writer->written > 0) {
   15274:	6842      	ldr	r2, [r0, #4]
   15276:	2a00      	cmp	r2, #0
   15278:	d100      	bne.n	1527c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   1527a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   1527c:	6901      	ldr	r1, [r0, #16]
   1527e:	68c0      	ldr	r0, [r0, #12]
   15280:	68a3      	ldr	r3, [r4, #8]
   15282:	4798      	blx	r3
		writer->written = 0;
   15284:	2300      	movs	r3, #0
   15286:	6063      	str	r3, [r4, #4]
}
   15288:	e7f7      	b.n	1527a <stream_writer_send_remain+0xa>
	...

0001528c <stream_writer_send_8>:
{
   1528c:	b570      	push	{r4, r5, r6, lr}
   1528e:	0004      	movs	r4, r0
   15290:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   15292:	6803      	ldr	r3, [r0, #0]
   15294:	6842      	ldr	r2, [r0, #4]
   15296:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   15298:	2b00      	cmp	r3, #0
   1529a:	dd05      	ble.n	152a8 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   1529c:	6922      	ldr	r2, [r4, #16]
   1529e:	6863      	ldr	r3, [r4, #4]
   152a0:	1c59      	adds	r1, r3, #1
   152a2:	6061      	str	r1, [r4, #4]
   152a4:	54d5      	strb	r5, [r2, r3]
}
   152a6:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   152a8:	4b01      	ldr	r3, [pc, #4]	; (152b0 <stream_writer_send_8+0x24>)
   152aa:	4798      	blx	r3
   152ac:	e7f6      	b.n	1529c <stream_writer_send_8+0x10>
   152ae:	46c0      	nop			; (mov r8, r8)
   152b0:	00015271 	.word	0x00015271

000152b4 <stream_writer_send_buffer>:
{
   152b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152b6:	0006      	movs	r6, r0
   152b8:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   152ba:	2a00      	cmp	r2, #0
   152bc:	d008      	beq.n	152d0 <stream_writer_send_buffer+0x1c>
   152be:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   152c0:	4f04      	ldr	r7, [pc, #16]	; (152d4 <stream_writer_send_buffer+0x20>)
   152c2:	2100      	movs	r1, #0
   152c4:	5661      	ldrsb	r1, [r4, r1]
   152c6:	0030      	movs	r0, r6
   152c8:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   152ca:	3401      	adds	r4, #1
   152cc:	42a5      	cmp	r5, r4
   152ce:	d1f8      	bne.n	152c2 <stream_writer_send_buffer+0xe>
}
   152d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   152d2:	46c0      	nop			; (mov r8, r8)
   152d4:	0001528d 	.word	0x0001528d

000152d8 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   152d8:	4a02      	ldr	r2, [pc, #8]	; (152e4 <sw_timer_tcc_callback+0xc>)
   152da:	6813      	ldr	r3, [r2, #0]
   152dc:	3301      	adds	r3, #1
   152de:	6013      	str	r3, [r2, #0]
}
   152e0:	4770      	bx	lr
   152e2:	46c0      	nop			; (mov r8, r8)
   152e4:	200008a0 	.word	0x200008a0

000152e8 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   152e8:	2364      	movs	r3, #100	; 0x64
   152ea:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   152ec:	2300      	movs	r3, #0
   152ee:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   152f0:	7043      	strb	r3, [r0, #1]
}
   152f2:	4770      	bx	lr

000152f4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   152f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   152f6:	46c6      	mov	lr, r8
   152f8:	b500      	push	{lr}
   152fa:	b0ac      	sub	sp, #176	; 0xb0
   152fc:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   152fe:	466e      	mov	r6, sp
   15300:	4b1d      	ldr	r3, [pc, #116]	; (15378 <sw_timer_init+0x84>)
   15302:	466a      	mov	r2, sp
   15304:	cb92      	ldmia	r3!, {r1, r4, r7}
   15306:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   15308:	886b      	ldrh	r3, [r5, #2]
   1530a:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   1530c:	3014      	adds	r0, #20
   1530e:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   15310:	782b      	ldrb	r3, [r5, #0]
   15312:	009b      	lsls	r3, r3, #2
   15314:	5999      	ldr	r1, [r3, r6]
   15316:	0017      	movs	r7, r2
   15318:	0010      	movs	r0, r2
   1531a:	4b18      	ldr	r3, [pc, #96]	; (1537c <sw_timer_init+0x88>)
   1531c:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   1531e:	2000      	movs	r0, #0
   15320:	4b17      	ldr	r3, [pc, #92]	; (15380 <sw_timer_init+0x8c>)
   15322:	4798      	blx	r3
   15324:	4b17      	ldr	r3, [pc, #92]	; (15384 <sw_timer_init+0x90>)
   15326:	7a1b      	ldrb	r3, [r3, #8]
   15328:	b2db      	uxtb	r3, r3
   1532a:	40d8      	lsrs	r0, r3
   1532c:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   1532e:	8869      	ldrh	r1, [r5, #2]
   15330:	20fa      	movs	r0, #250	; 0xfa
   15332:	0200      	lsls	r0, r0, #8
   15334:	4b14      	ldr	r3, [pc, #80]	; (15388 <sw_timer_init+0x94>)
   15336:	4798      	blx	r3
   15338:	0001      	movs	r1, r0
   1533a:	4640      	mov	r0, r8
   1533c:	4b13      	ldr	r3, [pc, #76]	; (1538c <sw_timer_init+0x98>)
   1533e:	4798      	blx	r3
   15340:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   15342:	2305      	movs	r3, #5
   15344:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   15346:	782b      	ldrb	r3, [r5, #0]
   15348:	009b      	lsls	r3, r3, #2
   1534a:	5999      	ldr	r1, [r3, r6]
   1534c:	003a      	movs	r2, r7
   1534e:	0020      	movs	r0, r4
   15350:	4b0f      	ldr	r3, [pc, #60]	; (15390 <sw_timer_init+0x9c>)
   15352:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15354:	786a      	ldrb	r2, [r5, #1]
   15356:	3208      	adds	r2, #8
   15358:	b2d2      	uxtb	r2, r2
   1535a:	490e      	ldr	r1, [pc, #56]	; (15394 <sw_timer_init+0xa0>)
   1535c:	0020      	movs	r0, r4
   1535e:	4b0e      	ldr	r3, [pc, #56]	; (15398 <sw_timer_init+0xa4>)
   15360:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15362:	7869      	ldrb	r1, [r5, #1]
   15364:	3108      	adds	r1, #8
   15366:	b2c9      	uxtb	r1, r1
   15368:	0020      	movs	r0, r4
   1536a:	4b0c      	ldr	r3, [pc, #48]	; (1539c <sw_timer_init+0xa8>)
   1536c:	4798      	blx	r3
	
	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   1536e:	b02c      	add	sp, #176	; 0xb0
   15370:	bc04      	pop	{r2}
   15372:	4690      	mov	r8, r2
   15374:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15376:	46c0      	nop			; (mov r8, r8)
   15378:	0001a944 	.word	0x0001a944
   1537c:	000101cd 	.word	0x000101cd
   15380:	0000ff29 	.word	0x0000ff29
   15384:	40000400 	.word	0x40000400
   15388:	000167a5 	.word	0x000167a5
   1538c:	00016691 	.word	0x00016691
   15390:	00010319 	.word	0x00010319
   15394:	000152d9 	.word	0x000152d9
   15398:	00010725 	.word	0x00010725
   1539c:	0001073d 	.word	0x0001073d

000153a0 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   153a0:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   153a2:	2102      	movs	r1, #2
   153a4:	6893      	ldr	r3, [r2, #8]
   153a6:	4219      	tst	r1, r3
   153a8:	d1fc      	bne.n	153a4 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   153aa:	6813      	ldr	r3, [r2, #0]
   153ac:	2102      	movs	r1, #2
   153ae:	430b      	orrs	r3, r1
   153b0:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   153b2:	4770      	bx	lr

000153b4 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   153b4:	b570      	push	{r4, r5, r6, lr}
   153b6:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   153b8:	7805      	ldrb	r5, [r0, #0]
   153ba:	07e8      	lsls	r0, r5, #31
   153bc:	d502      	bpl.n	153c4 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   153be:	2001      	movs	r0, #1
   153c0:	4240      	negs	r0, r0
}
   153c2:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   153c4:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   153c6:	0029      	movs	r1, r5
   153c8:	2002      	movs	r0, #2
   153ca:	4381      	bics	r1, r0
   153cc:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   153ce:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   153d0:	6d61      	ldr	r1, [r4, #84]	; 0x54
   153d2:	0018      	movs	r0, r3
   153d4:	4b04      	ldr	r3, [pc, #16]	; (153e8 <sw_timer_register_callback+0x34>)
   153d6:	4798      	blx	r3
   153d8:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   153da:	7823      	ldrb	r3, [r4, #0]
   153dc:	2201      	movs	r2, #1
   153de:	4313      	orrs	r3, r2
   153e0:	7023      	strb	r3, [r4, #0]
			return index;
   153e2:	2000      	movs	r0, #0
   153e4:	e7ed      	b.n	153c2 <sw_timer_register_callback+0xe>
   153e6:	46c0      	nop			; (mov r8, r8)
   153e8:	00016691 	.word	0x00016691

000153ec <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   153ec:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   153ee:	008b      	lsls	r3, r1, #2
   153f0:	185d      	adds	r5, r3, r1
   153f2:	00ad      	lsls	r5, r5, #2
   153f4:	5c29      	ldrb	r1, [r5, r0]
   153f6:	2602      	movs	r6, #2
   153f8:	4331      	orrs	r1, r6
   153fa:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   153fc:	1944      	adds	r4, r0, r5
   153fe:	6d41      	ldr	r1, [r0, #84]	; 0x54
   15400:	0010      	movs	r0, r2
   15402:	4b03      	ldr	r3, [pc, #12]	; (15410 <sw_timer_enable_callback+0x24>)
   15404:	4798      	blx	r3
   15406:	4b03      	ldr	r3, [pc, #12]	; (15414 <sw_timer_enable_callback+0x28>)
   15408:	681b      	ldr	r3, [r3, #0]
   1540a:	18c0      	adds	r0, r0, r3
   1540c:	6120      	str	r0, [r4, #16]
}
   1540e:	bd70      	pop	{r4, r5, r6, pc}
   15410:	00016691 	.word	0x00016691
   15414:	200008a0 	.word	0x200008a0

00015418 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   15418:	008b      	lsls	r3, r1, #2
   1541a:	1859      	adds	r1, r3, r1
   1541c:	0089      	lsls	r1, r1, #2
   1541e:	5c0b      	ldrb	r3, [r1, r0]
   15420:	2202      	movs	r2, #2
   15422:	4393      	bics	r3, r2
   15424:	540b      	strb	r3, [r1, r0]
}
   15426:	4770      	bx	lr

00015428 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   15428:	b570      	push	{r4, r5, r6, lr}
   1542a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   1542c:	7803      	ldrb	r3, [r0, #0]
   1542e:	07db      	lsls	r3, r3, #31
   15430:	d507      	bpl.n	15442 <sw_timer_task+0x1a>
   15432:	7803      	ldrb	r3, [r0, #0]
   15434:	079b      	lsls	r3, r3, #30
   15436:	d504      	bpl.n	15442 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   15438:	4b10      	ldr	r3, [pc, #64]	; (1547c <sw_timer_task+0x54>)
   1543a:	681a      	ldr	r2, [r3, #0]
   1543c:	6903      	ldr	r3, [r0, #16]
   1543e:	1a9b      	subs	r3, r3, r2
   15440:	d400      	bmi.n	15444 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   15442:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   15444:	7803      	ldrb	r3, [r0, #0]
   15446:	075b      	lsls	r3, r3, #29
   15448:	d4fb      	bmi.n	15442 <sw_timer_task+0x1a>
				handler->busy = 1;
   1544a:	7803      	ldrb	r3, [r0, #0]
   1544c:	2104      	movs	r1, #4
   1544e:	430b      	orrs	r3, r1
   15450:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   15452:	68c3      	ldr	r3, [r0, #12]
   15454:	2b00      	cmp	r3, #0
   15456:	d00b      	beq.n	15470 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   15458:	18d2      	adds	r2, r2, r3
   1545a:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   1545c:	68a2      	ldr	r2, [r4, #8]
   1545e:	2100      	movs	r1, #0
   15460:	0020      	movs	r0, r4
   15462:	6865      	ldr	r5, [r4, #4]
   15464:	47a8      	blx	r5
				handler->busy = 0;
   15466:	7823      	ldrb	r3, [r4, #0]
   15468:	2204      	movs	r2, #4
   1546a:	4393      	bics	r3, r2
   1546c:	7023      	strb	r3, [r4, #0]
}
   1546e:	e7e8      	b.n	15442 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   15470:	7802      	ldrb	r2, [r0, #0]
   15472:	2102      	movs	r1, #2
   15474:	438a      	bics	r2, r1
   15476:	7002      	strb	r2, [r0, #0]
   15478:	e7f0      	b.n	1545c <sw_timer_task+0x34>
   1547a:	46c0      	nop			; (mov r8, r8)
   1547c:	200008a0 	.word	0x200008a0

00015480 <clear_state>:
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
	down_state &= ~mask;
   15480:	4a02      	ldr	r2, [pc, #8]	; (1548c <clear_state+0xc>)
   15482:	7813      	ldrb	r3, [r2, #0]
   15484:	4383      	bics	r3, r0
   15486:	7013      	strb	r3, [r2, #0]
}
   15488:	4770      	bx	lr
   1548a:	46c0      	nop			; (mov r8, r8)
   1548c:	200008ed 	.word	0x200008ed

00015490 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   15490:	4b02      	ldr	r3, [pc, #8]	; (1549c <add_state+0xc>)
   15492:	781a      	ldrb	r2, [r3, #0]
   15494:	4310      	orrs	r0, r2
   15496:	7018      	strb	r0, [r3, #0]
}
   15498:	4770      	bx	lr
   1549a:	46c0      	nop			; (mov r8, r8)
   1549c:	200008ed 	.word	0x200008ed

000154a0 <extint_detection_callback>:
* Checking button press SW0
*/
volatile bool isPressed = false;
void extint_detection_callback(void)
{
	isPressed = true;
   154a0:	2201      	movs	r2, #1
   154a2:	4b01      	ldr	r3, [pc, #4]	; (154a8 <extint_detection_callback+0x8>)
   154a4:	701a      	strb	r2, [r3, #0]
}
   154a6:	4770      	bx	lr
   154a8:	20000b4c 	.word	0x20000b4c

000154ac <SubscribeHandler>:
{
   154ac:	b570      	push	{r4, r5, r6, lr}
   154ae:	0004      	movs	r4, r0
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   154b0:	6843      	ldr	r3, [r0, #4]
   154b2:	689a      	ldr	r2, [r3, #8]
   154b4:	6859      	ldr	r1, [r3, #4]
   154b6:	4832      	ldr	r0, [pc, #200]	; (15580 <SubscribeHandler+0xd4>)
   154b8:	4d32      	ldr	r5, [pc, #200]	; (15584 <SubscribeHandler+0xd8>)
   154ba:	47a8      	blx	r5
	printf(" >> ");
   154bc:	4832      	ldr	r0, [pc, #200]	; (15588 <SubscribeHandler+0xdc>)
   154be:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   154c0:	6823      	ldr	r3, [r4, #0]
   154c2:	689a      	ldr	r2, [r3, #8]
   154c4:	68d9      	ldr	r1, [r3, #12]
   154c6:	4831      	ldr	r0, [pc, #196]	; (1558c <SubscribeHandler+0xe0>)
   154c8:	47a8      	blx	r5
	if(strncmp((char *) msgData->topicName->lenstring.data, START_TOPIC	, msgData->message->payloadlen) == 0)
   154ca:	6823      	ldr	r3, [r4, #0]
   154cc:	68da      	ldr	r2, [r3, #12]
   154ce:	6863      	ldr	r3, [r4, #4]
   154d0:	6898      	ldr	r0, [r3, #8]
   154d2:	492f      	ldr	r1, [pc, #188]	; (15590 <SubscribeHandler+0xe4>)
   154d4:	4b2f      	ldr	r3, [pc, #188]	; (15594 <SubscribeHandler+0xe8>)
   154d6:	4798      	blx	r3
   154d8:	2800      	cmp	r0, #0
   154da:	d109      	bne.n	154f0 <SubscribeHandler+0x44>
		BUTTON_CNT++;
   154dc:	4a2e      	ldr	r2, [pc, #184]	; (15598 <SubscribeHandler+0xec>)
   154de:	6813      	ldr	r3, [r2, #0]
   154e0:	3301      	adds	r3, #1
   154e2:	6013      	str	r3, [r2, #0]
		if(BUTTON_CNT == 1)
   154e4:	2b01      	cmp	r3, #1
   154e6:	d01f      	beq.n	15528 <SubscribeHandler+0x7c>
		if(BUTTON_CNT == 2)
   154e8:	4b2b      	ldr	r3, [pc, #172]	; (15598 <SubscribeHandler+0xec>)
   154ea:	681b      	ldr	r3, [r3, #0]
   154ec:	2b02      	cmp	r3, #2
   154ee:	d022      	beq.n	15536 <SubscribeHandler+0x8a>
	if(strncmp((char *) msgData->topicName->lenstring.data, KNOB_TOPIC	, msgData->message->payloadlen) == 0)
   154f0:	6825      	ldr	r5, [r4, #0]
   154f2:	6863      	ldr	r3, [r4, #4]
   154f4:	6898      	ldr	r0, [r3, #8]
   154f6:	68ea      	ldr	r2, [r5, #12]
   154f8:	4928      	ldr	r1, [pc, #160]	; (1559c <SubscribeHandler+0xf0>)
   154fa:	4b26      	ldr	r3, [pc, #152]	; (15594 <SubscribeHandler+0xe8>)
   154fc:	4798      	blx	r3
   154fe:	2800      	cmp	r0, #0
   15500:	d022      	beq.n	15548 <SubscribeHandler+0x9c>
	if(strncmp((char *) msgData->topicName->lenstring.data, TIME_TOPIC	, msgData->message->payloadlen) == 0)
   15502:	6825      	ldr	r5, [r4, #0]
   15504:	6863      	ldr	r3, [r4, #4]
   15506:	6898      	ldr	r0, [r3, #8]
   15508:	68ea      	ldr	r2, [r5, #12]
   1550a:	4925      	ldr	r1, [pc, #148]	; (155a0 <SubscribeHandler+0xf4>)
   1550c:	4b21      	ldr	r3, [pc, #132]	; (15594 <SubscribeHandler+0xe8>)
   1550e:	4798      	blx	r3
   15510:	2800      	cmp	r0, #0
   15512:	d023      	beq.n	1555c <SubscribeHandler+0xb0>
	if(strncmp((char *) msgData->topicName->lenstring.data, OTAFU_TOPIC	, msgData->message->payloadlen) == 0)
   15514:	6823      	ldr	r3, [r4, #0]
   15516:	68da      	ldr	r2, [r3, #12]
   15518:	6863      	ldr	r3, [r4, #4]
   1551a:	6898      	ldr	r0, [r3, #8]
   1551c:	4921      	ldr	r1, [pc, #132]	; (155a4 <SubscribeHandler+0xf8>)
   1551e:	4b1d      	ldr	r3, [pc, #116]	; (15594 <SubscribeHandler+0xe8>)
   15520:	4798      	blx	r3
   15522:	2800      	cmp	r0, #0
   15524:	d024      	beq.n	15570 <SubscribeHandler+0xc4>
}
   15526:	bd70      	pop	{r4, r5, r6, pc}
			START_BUTTON = true;
   15528:	2201      	movs	r2, #1
   1552a:	4b1f      	ldr	r3, [pc, #124]	; (155a8 <SubscribeHandler+0xfc>)
   1552c:	701a      	strb	r2, [r3, #0]
			printf("\n Cooking started");
   1552e:	481f      	ldr	r0, [pc, #124]	; (155ac <SubscribeHandler+0x100>)
   15530:	4b14      	ldr	r3, [pc, #80]	; (15584 <SubscribeHandler+0xd8>)
   15532:	4798      	blx	r3
   15534:	e7d8      	b.n	154e8 <SubscribeHandler+0x3c>
			START_BUTTON = false;
   15536:	2300      	movs	r3, #0
   15538:	4a1b      	ldr	r2, [pc, #108]	; (155a8 <SubscribeHandler+0xfc>)
   1553a:	7013      	strb	r3, [r2, #0]
			BUTTON_CNT = 0;
   1553c:	4a16      	ldr	r2, [pc, #88]	; (15598 <SubscribeHandler+0xec>)
   1553e:	6013      	str	r3, [r2, #0]
			printf("\n Cooking stopped");
   15540:	481b      	ldr	r0, [pc, #108]	; (155b0 <SubscribeHandler+0x104>)
   15542:	4b10      	ldr	r3, [pc, #64]	; (15584 <SubscribeHandler+0xd8>)
   15544:	4798      	blx	r3
   15546:	e7d3      	b.n	154f0 <SubscribeHandler+0x44>
		KNOB_VALUE = atoi(msgData->message->payload);
   15548:	68a8      	ldr	r0, [r5, #8]
   1554a:	4b1a      	ldr	r3, [pc, #104]	; (155b4 <SubscribeHandler+0x108>)
   1554c:	4798      	blx	r3
   1554e:	0001      	movs	r1, r0
   15550:	4b19      	ldr	r3, [pc, #100]	; (155b8 <SubscribeHandler+0x10c>)
   15552:	6018      	str	r0, [r3, #0]
		printf("\n Knob level set to:%d",KNOB_VALUE);
   15554:	4819      	ldr	r0, [pc, #100]	; (155bc <SubscribeHandler+0x110>)
   15556:	4b0b      	ldr	r3, [pc, #44]	; (15584 <SubscribeHandler+0xd8>)
   15558:	4798      	blx	r3
   1555a:	e7d2      	b.n	15502 <SubscribeHandler+0x56>
		TIME_VALUE = atoi(msgData->message->payload);
   1555c:	68a8      	ldr	r0, [r5, #8]
   1555e:	4b15      	ldr	r3, [pc, #84]	; (155b4 <SubscribeHandler+0x108>)
   15560:	4798      	blx	r3
   15562:	0001      	movs	r1, r0
   15564:	4b16      	ldr	r3, [pc, #88]	; (155c0 <SubscribeHandler+0x114>)
   15566:	6018      	str	r0, [r3, #0]
		printf("\n Time level set to:%d",TIME_VALUE);
   15568:	4816      	ldr	r0, [pc, #88]	; (155c4 <SubscribeHandler+0x118>)
   1556a:	4b06      	ldr	r3, [pc, #24]	; (15584 <SubscribeHandler+0xd8>)
   1556c:	4798      	blx	r3
   1556e:	e7d1      	b.n	15514 <SubscribeHandler+0x68>
		OTAFU_REQ = true;
   15570:	2201      	movs	r2, #1
   15572:	4b15      	ldr	r3, [pc, #84]	; (155c8 <SubscribeHandler+0x11c>)
   15574:	701a      	strb	r2, [r3, #0]
		printf("\nOTAFU Requested");
   15576:	4815      	ldr	r0, [pc, #84]	; (155cc <SubscribeHandler+0x120>)
   15578:	4b02      	ldr	r3, [pc, #8]	; (15584 <SubscribeHandler+0xd8>)
   1557a:	4798      	blx	r3
	return;
   1557c:	e7d3      	b.n	15526 <SubscribeHandler+0x7a>
   1557e:	46c0      	nop			; (mov r8, r8)
   15580:	0001a964 	.word	0x0001a964
   15584:	00016be5 	.word	0x00016be5
   15588:	0001a96c 	.word	0x0001a96c
   1558c:	0001a974 	.word	0x0001a974
   15590:	0001a97c 	.word	0x0001a97c
   15594:	0001704d 	.word	0x0001704d
   15598:	200008a4 	.word	0x200008a4
   1559c:	0001a9ac 	.word	0x0001a9ac
   155a0:	0001a9cc 	.word	0x0001a9cc
   155a4:	0001a9ec 	.word	0x0001a9ec
   155a8:	200008ad 	.word	0x200008ad
   155ac:	0001a984 	.word	0x0001a984
   155b0:	0001a998 	.word	0x0001a998
   155b4:	000169d1 	.word	0x000169d1
   155b8:	200008a8 	.word	0x200008a8
   155bc:	0001a9b4 	.word	0x0001a9b4
   155c0:	200008b0 	.word	0x200008b0
   155c4:	0001a9d4 	.word	0x0001a9d4
   155c8:	200008ac 	.word	0x200008ac
   155cc:	0001a9f4 	.word	0x0001a9f4

000155d0 <resolve_cb>:
{
   155d0:	b570      	push	{r4, r5, r6, lr}
   155d2:	b082      	sub	sp, #8
   155d4:	0005      	movs	r5, r0
   155d6:	000c      	movs	r4, r1
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   155d8:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   155da:	21ff      	movs	r1, #255	; 0xff
   155dc:	400b      	ands	r3, r1
   155de:	000a      	movs	r2, r1
   155e0:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   155e2:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   155e4:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   155e6:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   155e8:	4001      	ands	r1, r0
   155ea:	9100      	str	r1, [sp, #0]
   155ec:	0029      	movs	r1, r5
   155ee:	4804      	ldr	r0, [pc, #16]	; (15600 <resolve_cb+0x30>)
   155f0:	4e04      	ldr	r6, [pc, #16]	; (15604 <resolve_cb+0x34>)
   155f2:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   155f4:	0021      	movs	r1, r4
   155f6:	0028      	movs	r0, r5
   155f8:	4b03      	ldr	r3, [pc, #12]	; (15608 <resolve_cb+0x38>)
   155fa:	4798      	blx	r3
}
   155fc:	b002      	add	sp, #8
   155fe:	bd70      	pop	{r4, r5, r6, pc}
   15600:	0001b37c 	.word	0x0001b37c
   15604:	00016be5 	.word	0x00016be5
   15608:	00014475 	.word	0x00014475

0001560c <socket_cb>:
{
   1560c:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   1560e:	4b01      	ldr	r3, [pc, #4]	; (15614 <socket_cb+0x8>)
   15610:	4798      	blx	r3
}
   15612:	bd10      	pop	{r4, pc}
   15614:	000150a1 	.word	0x000150a1

00015618 <start_download>:
{
   15618:	b510      	push	{r4, lr}
   1561a:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   1561c:	4b13      	ldr	r3, [pc, #76]	; (1566c <start_download+0x54>)
   1561e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   15620:	07da      	lsls	r2, r3, #31
   15622:	d512      	bpl.n	1564a <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
   15624:	079a      	lsls	r2, r3, #30
   15626:	d514      	bpl.n	15652 <start_download+0x3a>
	if (is_state_set(GET_REQUESTED)) {
   15628:	075a      	lsls	r2, r3, #29
   1562a:	d416      	bmi.n	1565a <start_download+0x42>
	if (is_state_set(DOWNLOADING)) {
   1562c:	071b      	lsls	r3, r3, #28
   1562e:	d418      	bmi.n	15662 <start_download+0x4a>
	printf("start_download: sending HTTP request...\r\n");
   15630:	480f      	ldr	r0, [pc, #60]	; (15670 <start_download+0x58>)
   15632:	4b10      	ldr	r3, [pc, #64]	; (15674 <start_download+0x5c>)
   15634:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, desired_url, HTTP_METHOD_GET, NULL, NULL);
   15636:	4b10      	ldr	r3, [pc, #64]	; (15678 <start_download+0x60>)
   15638:	6819      	ldr	r1, [r3, #0]
   1563a:	2300      	movs	r3, #0
   1563c:	9300      	str	r3, [sp, #0]
   1563e:	2201      	movs	r2, #1
   15640:	480e      	ldr	r0, [pc, #56]	; (1567c <start_download+0x64>)
   15642:	4c0f      	ldr	r4, [pc, #60]	; (15680 <start_download+0x68>)
   15644:	47a0      	blx	r4
}
   15646:	b002      	add	sp, #8
   15648:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
   1564a:	480e      	ldr	r0, [pc, #56]	; (15684 <start_download+0x6c>)
   1564c:	4b09      	ldr	r3, [pc, #36]	; (15674 <start_download+0x5c>)
   1564e:	4798      	blx	r3
		return;
   15650:	e7f9      	b.n	15646 <start_download+0x2e>
		printf("start_download: Wi-Fi is not connected.\r\n");
   15652:	480d      	ldr	r0, [pc, #52]	; (15688 <start_download+0x70>)
   15654:	4b07      	ldr	r3, [pc, #28]	; (15674 <start_download+0x5c>)
   15656:	4798      	blx	r3
		return;
   15658:	e7f5      	b.n	15646 <start_download+0x2e>
		printf("start_download: request is sent already.\r\n");
   1565a:	480c      	ldr	r0, [pc, #48]	; (1568c <start_download+0x74>)
   1565c:	4b05      	ldr	r3, [pc, #20]	; (15674 <start_download+0x5c>)
   1565e:	4798      	blx	r3
		return;
   15660:	e7f1      	b.n	15646 <start_download+0x2e>
		printf("start_download: running download already.\r\n");
   15662:	480b      	ldr	r0, [pc, #44]	; (15690 <start_download+0x78>)
   15664:	4b03      	ldr	r3, [pc, #12]	; (15674 <start_download+0x5c>)
   15666:	4798      	blx	r3
		return;
   15668:	e7ed      	b.n	15646 <start_download+0x2e>
   1566a:	46c0      	nop			; (mov r8, r8)
   1566c:	200008ed 	.word	0x200008ed
   15670:	0001b458 	.word	0x0001b458
   15674:	00016d01 	.word	0x00016d01
   15678:	200008e8 	.word	0x200008e8
   1567c:	20001230 	.word	0x20001230
   15680:	000149a5 	.word	0x000149a5
   15684:	0001b3ac 	.word	0x0001b3ac
   15688:	0001b3d4 	.word	0x0001b3d4
   1568c:	0001b400 	.word	0x0001b400
   15690:	0001b42c 	.word	0x0001b42c

00015694 <socket_resolve_handler>:
{
   15694:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   15696:	4b01      	ldr	r3, [pc, #4]	; (1569c <socket_resolve_handler+0x8>)
   15698:	4798      	blx	r3
}
   1569a:	bd10      	pop	{r4, pc}
   1569c:	000134e1 	.word	0x000134e1

000156a0 <socket_event_handler>:
{
   156a0:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   156a2:	4b01      	ldr	r3, [pc, #4]	; (156a8 <socket_event_handler+0x8>)
   156a4:	4798      	blx	r3
}
   156a6:	bd10      	pop	{r4, pc}
   156a8:	000134d5 	.word	0x000134d5

000156ac <wifi_cb>:
{
   156ac:	b510      	push	{r4, lr}
   156ae:	b082      	sub	sp, #8
	switch (u8MsgType) {
   156b0:	282c      	cmp	r0, #44	; 0x2c
   156b2:	d003      	beq.n	156bc <wifi_cb+0x10>
   156b4:	2832      	cmp	r0, #50	; 0x32
   156b6:	d032      	beq.n	1571e <wifi_cb+0x72>
}
   156b8:	b002      	add	sp, #8
   156ba:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   156bc:	780b      	ldrb	r3, [r1, #0]
   156be:	2b01      	cmp	r3, #1
   156c0:	d01c      	beq.n	156fc <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   156c2:	2b00      	cmp	r3, #0
   156c4:	d1f8      	bne.n	156b8 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   156c6:	4824      	ldr	r0, [pc, #144]	; (15758 <wifi_cb+0xac>)
   156c8:	4b24      	ldr	r3, [pc, #144]	; (1575c <wifi_cb+0xb0>)
   156ca:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
   156cc:	2002      	movs	r0, #2
   156ce:	4b24      	ldr	r3, [pc, #144]	; (15760 <wifi_cb+0xb4>)
   156d0:	4798      	blx	r3
	return ((down_state & mask) != 0);
   156d2:	4b24      	ldr	r3, [pc, #144]	; (15764 <wifi_cb+0xb8>)
   156d4:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   156d6:	071b      	lsls	r3, r3, #28
   156d8:	d416      	bmi.n	15708 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
   156da:	4b22      	ldr	r3, [pc, #136]	; (15764 <wifi_cb+0xb8>)
   156dc:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   156de:	075b      	lsls	r3, r3, #29
   156e0:	d419      	bmi.n	15716 <wifi_cb+0x6a>
			mqtt_disconnect(&mqtt_inst, 1);
   156e2:	2101      	movs	r1, #1
   156e4:	4820      	ldr	r0, [pc, #128]	; (15768 <wifi_cb+0xbc>)
   156e6:	4b21      	ldr	r3, [pc, #132]	; (1576c <wifi_cb+0xc0>)
   156e8:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   156ea:	23ff      	movs	r3, #255	; 0xff
   156ec:	9300      	str	r3, [sp, #0]
   156ee:	4b20      	ldr	r3, [pc, #128]	; (15770 <wifi_cb+0xc4>)
   156f0:	2202      	movs	r2, #2
   156f2:	2105      	movs	r1, #5
   156f4:	481f      	ldr	r0, [pc, #124]	; (15774 <wifi_cb+0xc8>)
   156f6:	4c20      	ldr	r4, [pc, #128]	; (15778 <wifi_cb+0xcc>)
   156f8:	47a0      	blx	r4
   156fa:	e7dd      	b.n	156b8 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   156fc:	481f      	ldr	r0, [pc, #124]	; (1577c <wifi_cb+0xd0>)
   156fe:	4b17      	ldr	r3, [pc, #92]	; (1575c <wifi_cb+0xb0>)
   15700:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   15702:	4b1f      	ldr	r3, [pc, #124]	; (15780 <wifi_cb+0xd4>)
   15704:	4798      	blx	r3
   15706:	e7d7      	b.n	156b8 <wifi_cb+0xc>
				f_close(&file_object);
   15708:	481e      	ldr	r0, [pc, #120]	; (15784 <wifi_cb+0xd8>)
   1570a:	4b1f      	ldr	r3, [pc, #124]	; (15788 <wifi_cb+0xdc>)
   1570c:	4798      	blx	r3
				clear_state(DOWNLOADING);
   1570e:	2008      	movs	r0, #8
   15710:	4b13      	ldr	r3, [pc, #76]	; (15760 <wifi_cb+0xb4>)
   15712:	4798      	blx	r3
   15714:	e7e1      	b.n	156da <wifi_cb+0x2e>
				clear_state(GET_REQUESTED);
   15716:	2004      	movs	r0, #4
   15718:	4b11      	ldr	r3, [pc, #68]	; (15760 <wifi_cb+0xb4>)
   1571a:	4798      	blx	r3
   1571c:	e7e1      	b.n	156e2 <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   1571e:	788b      	ldrb	r3, [r1, #2]
   15720:	784a      	ldrb	r2, [r1, #1]
   15722:	7808      	ldrb	r0, [r1, #0]
   15724:	78c9      	ldrb	r1, [r1, #3]
   15726:	9100      	str	r1, [sp, #0]
   15728:	0001      	movs	r1, r0
   1572a:	4818      	ldr	r0, [pc, #96]	; (1578c <wifi_cb+0xe0>)
   1572c:	4c18      	ldr	r4, [pc, #96]	; (15790 <wifi_cb+0xe4>)
   1572e:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   15730:	2002      	movs	r0, #2
   15732:	4b18      	ldr	r3, [pc, #96]	; (15794 <wifi_cb+0xe8>)
   15734:	4798      	blx	r3
		if(do_download_flag == 1)
   15736:	4b18      	ldr	r3, [pc, #96]	; (15798 <wifi_cb+0xec>)
   15738:	781b      	ldrb	r3, [r3, #0]
   1573a:	2b01      	cmp	r3, #1
   1573c:	d009      	beq.n	15752 <wifi_cb+0xa6>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   1573e:	4917      	ldr	r1, [pc, #92]	; (1579c <wifi_cb+0xf0>)
   15740:	4809      	ldr	r0, [pc, #36]	; (15768 <wifi_cb+0xbc>)
   15742:	4b17      	ldr	r3, [pc, #92]	; (157a0 <wifi_cb+0xf4>)
   15744:	4798      	blx	r3
   15746:	2800      	cmp	r0, #0
   15748:	d0b6      	beq.n	156b8 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
   1574a:	4816      	ldr	r0, [pc, #88]	; (157a4 <wifi_cb+0xf8>)
   1574c:	4b03      	ldr	r3, [pc, #12]	; (1575c <wifi_cb+0xb0>)
   1574e:	4798      	blx	r3
}
   15750:	e7b2      	b.n	156b8 <wifi_cb+0xc>
			start_download();
   15752:	4b15      	ldr	r3, [pc, #84]	; (157a8 <wifi_cb+0xfc>)
   15754:	4798      	blx	r3
   15756:	e7af      	b.n	156b8 <wifi_cb+0xc>
   15758:	0001b604 	.word	0x0001b604
   1575c:	00016d01 	.word	0x00016d01
   15760:	00015481 	.word	0x00015481
   15764:	200008ed 	.word	0x200008ed
   15768:	20000b50 	.word	0x20000b50
   1576c:	000135b1 	.word	0x000135b1
   15770:	0001b624 	.word	0x0001b624
   15774:	0001b630 	.word	0x0001b630
   15778:	0000c219 	.word	0x0000c219
   1577c:	0001b5e4 	.word	0x0001b5e4
   15780:	0000c235 	.word	0x0000c235
   15784:	20000b20 	.word	0x20000b20
   15788:	00012775 	.word	0x00012775
   1578c:	0001b638 	.word	0x0001b638
   15790:	00016be5 	.word	0x00016be5
   15794:	00015491 	.word	0x00015491
   15798:	200008ec 	.word	0x200008ec
   1579c:	0001ae4c 	.word	0x0001ae4c
   157a0:	000134ed 	.word	0x000134ed
   157a4:	0001b660 	.word	0x0001b660
   157a8:	00015619 	.word	0x00015619

000157ac <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   157ac:	b570      	push	{r4, r5, r6, lr}
   157ae:	b082      	sub	sp, #8
   157b0:	0005      	movs	r5, r0
   157b2:	000e      	movs	r6, r1
	uint16_t temp = 0;
   157b4:	2200      	movs	r2, #0
   157b6:	466b      	mov	r3, sp
   157b8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
   157ba:	4c06      	ldr	r4, [pc, #24]	; (157d4 <usart_serial_getchar+0x28>)
   157bc:	466b      	mov	r3, sp
   157be:	1d99      	adds	r1, r3, #6
   157c0:	0028      	movs	r0, r5
   157c2:	47a0      	blx	r4
   157c4:	2800      	cmp	r0, #0
   157c6:	d1f9      	bne.n	157bc <usart_serial_getchar+0x10>

	*c = temp;
   157c8:	466b      	mov	r3, sp
   157ca:	3306      	adds	r3, #6
   157cc:	881b      	ldrh	r3, [r3, #0]
   157ce:	7033      	strb	r3, [r6, #0]
}
   157d0:	b002      	add	sp, #8
   157d2:	bd70      	pop	{r4, r5, r6, pc}
   157d4:	0000f7f5 	.word	0x0000f7f5

000157d8 <usart_serial_putchar>:
{
   157d8:	b570      	push	{r4, r5, r6, lr}
   157da:	0005      	movs	r5, r0
	while(STATUS_OK != usart_write_wait(module, c));
   157dc:	b28c      	uxth	r4, r1
   157de:	4e03      	ldr	r6, [pc, #12]	; (157ec <usart_serial_putchar+0x14>)
   157e0:	0021      	movs	r1, r4
   157e2:	0028      	movs	r0, r5
   157e4:	47b0      	blx	r6
   157e6:	2800      	cmp	r0, #0
   157e8:	d1fa      	bne.n	157e0 <usart_serial_putchar+0x8>
}
   157ea:	bd70      	pop	{r4, r5, r6, pc}
   157ec:	0000f7c9 	.word	0x0000f7c9

000157f0 <mqtt_callback>:
{
   157f0:	b570      	push	{r4, r5, r6, lr}
   157f2:	b086      	sub	sp, #24
   157f4:	0004      	movs	r4, r0
	switch (type) {
   157f6:	2901      	cmp	r1, #1
   157f8:	d02c      	beq.n	15854 <mqtt_callback+0x64>
   157fa:	2905      	cmp	r1, #5
   157fc:	d04f      	beq.n	1589e <mqtt_callback+0xae>
   157fe:	2900      	cmp	r1, #0
   15800:	d001      	beq.n	15806 <mqtt_callback+0x16>
}
   15802:	b006      	add	sp, #24
   15804:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
   15806:	6813      	ldr	r3, [r2, #0]
   15808:	2b00      	cmp	r3, #0
   1580a:	db19      	blt.n	15840 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
   1580c:	4829      	ldr	r0, [pc, #164]	; (158b4 <mqtt_callback+0xc4>)
   1580e:	4b2a      	ldr	r3, [pc, #168]	; (158b8 <mqtt_callback+0xc8>)
   15810:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   15812:	4a2a      	ldr	r2, [pc, #168]	; (158bc <mqtt_callback+0xcc>)
   15814:	2300      	movs	r3, #0
   15816:	9305      	str	r3, [sp, #20]
   15818:	9304      	str	r3, [sp, #16]
   1581a:	9303      	str	r3, [sp, #12]
   1581c:	9302      	str	r3, [sp, #8]
   1581e:	9301      	str	r3, [sp, #4]
   15820:	9200      	str	r2, [sp, #0]
   15822:	4b27      	ldr	r3, [pc, #156]	; (158c0 <mqtt_callback+0xd0>)
   15824:	2101      	movs	r1, #1
   15826:	0020      	movs	r0, r4
   15828:	4c26      	ldr	r4, [pc, #152]	; (158c4 <mqtt_callback+0xd4>)
   1582a:	47a0      	blx	r4
   1582c:	2800      	cmp	r0, #0
   1582e:	d003      	beq.n	15838 <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
   15830:	4825      	ldr	r0, [pc, #148]	; (158c8 <mqtt_callback+0xd8>)
   15832:	4b26      	ldr	r3, [pc, #152]	; (158cc <mqtt_callback+0xdc>)
   15834:	4798      	blx	r3
   15836:	e7e4      	b.n	15802 <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
   15838:	4825      	ldr	r0, [pc, #148]	; (158d0 <mqtt_callback+0xe0>)
   1583a:	4b24      	ldr	r3, [pc, #144]	; (158cc <mqtt_callback+0xdc>)
   1583c:	4798      	blx	r3
   1583e:	e7e0      	b.n	15802 <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   15840:	4d24      	ldr	r5, [pc, #144]	; (158d4 <mqtt_callback+0xe4>)
   15842:	0029      	movs	r1, r5
   15844:	4824      	ldr	r0, [pc, #144]	; (158d8 <mqtt_callback+0xe8>)
   15846:	4b1c      	ldr	r3, [pc, #112]	; (158b8 <mqtt_callback+0xc8>)
   15848:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   1584a:	0029      	movs	r1, r5
   1584c:	0020      	movs	r0, r4
   1584e:	4b23      	ldr	r3, [pc, #140]	; (158dc <mqtt_callback+0xec>)
   15850:	4798      	blx	r3
   15852:	e7d6      	b.n	15802 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15854:	7811      	ldrb	r1, [r2, #0]
   15856:	2900      	cmp	r1, #0
   15858:	d11d      	bne.n	15896 <mqtt_callback+0xa6>
			mqtt_subscribe(module_inst, TEMP_TOPIC, 2, SubscribeHandler);
   1585a:	4e21      	ldr	r6, [pc, #132]	; (158e0 <mqtt_callback+0xf0>)
   1585c:	0033      	movs	r3, r6
   1585e:	2202      	movs	r2, #2
   15860:	4920      	ldr	r1, [pc, #128]	; (158e4 <mqtt_callback+0xf4>)
   15862:	4d21      	ldr	r5, [pc, #132]	; (158e8 <mqtt_callback+0xf8>)
   15864:	47a8      	blx	r5
			mqtt_subscribe(module_inst, START_TOPIC, 2, SubscribeHandler);
   15866:	0033      	movs	r3, r6
   15868:	2202      	movs	r2, #2
   1586a:	4920      	ldr	r1, [pc, #128]	; (158ec <mqtt_callback+0xfc>)
   1586c:	0020      	movs	r0, r4
   1586e:	47a8      	blx	r5
			mqtt_subscribe(module_inst, KNOB_TOPIC, 2, SubscribeHandler);
   15870:	0033      	movs	r3, r6
   15872:	2202      	movs	r2, #2
   15874:	491e      	ldr	r1, [pc, #120]	; (158f0 <mqtt_callback+0x100>)
   15876:	0020      	movs	r0, r4
   15878:	47a8      	blx	r5
			mqtt_subscribe(module_inst, TIME_TOPIC, 2, SubscribeHandler);
   1587a:	0033      	movs	r3, r6
   1587c:	2202      	movs	r2, #2
   1587e:	491d      	ldr	r1, [pc, #116]	; (158f4 <mqtt_callback+0x104>)
   15880:	0020      	movs	r0, r4
   15882:	47a8      	blx	r5
			mqtt_subscribe(module_inst, OTAFU_TOPIC, 2, SubscribeHandler);
   15884:	0033      	movs	r3, r6
   15886:	2202      	movs	r2, #2
   15888:	491b      	ldr	r1, [pc, #108]	; (158f8 <mqtt_callback+0x108>)
   1588a:	0020      	movs	r0, r4
   1588c:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
   1588e:	481b      	ldr	r0, [pc, #108]	; (158fc <mqtt_callback+0x10c>)
   15890:	4b0e      	ldr	r3, [pc, #56]	; (158cc <mqtt_callback+0xdc>)
   15892:	4798      	blx	r3
   15894:	e7b5      	b.n	15802 <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   15896:	481a      	ldr	r0, [pc, #104]	; (15900 <mqtt_callback+0x110>)
   15898:	4b07      	ldr	r3, [pc, #28]	; (158b8 <mqtt_callback+0xc8>)
   1589a:	4798      	blx	r3
   1589c:	e7b1      	b.n	15802 <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
   1589e:	4819      	ldr	r0, [pc, #100]	; (15904 <mqtt_callback+0x114>)
   158a0:	4b0a      	ldr	r3, [pc, #40]	; (158cc <mqtt_callback+0xdc>)
   158a2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   158a4:	4918      	ldr	r1, [pc, #96]	; (15908 <mqtt_callback+0x118>)
   158a6:	2231      	movs	r2, #49	; 0x31
   158a8:	5c8b      	ldrb	r3, [r1, r2]
   158aa:	2002      	movs	r0, #2
   158ac:	4383      	bics	r3, r0
   158ae:	548b      	strb	r3, [r1, r2]
}
   158b0:	e7a7      	b.n	15802 <mqtt_callback+0x12>
   158b2:	46c0      	nop			; (mov r8, r8)
   158b4:	0001ae60 	.word	0x0001ae60
   158b8:	00016be5 	.word	0x00016be5
   158bc:	0001ae8c 	.word	0x0001ae8c
   158c0:	0001ae7c 	.word	0x0001ae7c
   158c4:	00013519 	.word	0x00013519
   158c8:	0001ae98 	.word	0x0001ae98
   158cc:	00016d01 	.word	0x00016d01
   158d0:	0001aec0 	.word	0x0001aec0
   158d4:	0001ae4c 	.word	0x0001ae4c
   158d8:	0001aedc 	.word	0x0001aedc
   158dc:	000134ed 	.word	0x000134ed
   158e0:	000154ad 	.word	0x000154ad
   158e4:	0001a720 	.word	0x0001a720
   158e8:	0001361d 	.word	0x0001361d
   158ec:	0001a97c 	.word	0x0001a97c
   158f0:	0001a9ac 	.word	0x0001a9ac
   158f4:	0001a9cc 	.word	0x0001a9cc
   158f8:	0001a9ec 	.word	0x0001a9ec
   158fc:	0001af14 	.word	0x0001af14
   15900:	0001af24 	.word	0x0001af24
   15904:	0001af58 	.word	0x0001af58
   15908:	200008b4 	.word	0x200008b4

0001590c <rename_to_unique>:
{
   1590c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1590e:	46de      	mov	lr, fp
   15910:	b500      	push	{lr}
   15912:	b0c8      	sub	sp, #288	; 0x120
   15914:	0007      	movs	r7, r0
   15916:	000e      	movs	r6, r1
   15918:	9101      	str	r1, [sp, #4]
   1591a:	9203      	str	r2, [sp, #12]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1591c:	22fb      	movs	r2, #251	; 0xfb
   1591e:	2100      	movs	r1, #0
   15920:	a809      	add	r0, sp, #36	; 0x24
   15922:	4d52      	ldr	r5, [pc, #328]	; (15a6c <rename_to_unique+0x160>)
   15924:	47a8      	blx	r5
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   15926:	2209      	movs	r2, #9
   15928:	2100      	movs	r1, #0
   1592a:	a806      	add	r0, sp, #24
   1592c:	47a8      	blx	r5
	char numbering[NUMBRING_MAX + 1] = {0};
   1592e:	2300      	movs	r3, #0
   15930:	9305      	str	r3, [sp, #20]
	if (file_path_name == NULL) {
   15932:	2e00      	cmp	r6, #0
   15934:	d100      	bne.n	15938 <rename_to_unique+0x2c>
   15936:	e090      	b.n	15a5a <rename_to_unique+0x14e>
	if (fp == NULL || file_path_name == NULL) {
   15938:	2f00      	cmp	r7, #0
   1593a:	d100      	bne.n	1593e <rename_to_unique+0x32>
   1593c:	e08f      	b.n	15a5e <rename_to_unique+0x152>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   1593e:	4d4c      	ldr	r5, [pc, #304]	; (15a70 <rename_to_unique+0x164>)
   15940:	2200      	movs	r2, #0
   15942:	0031      	movs	r1, r6
   15944:	0028      	movs	r0, r5
   15946:	4b4b      	ldr	r3, [pc, #300]	; (15a74 <rename_to_unique+0x168>)
   15948:	4798      	blx	r3
   1594a:	0007      	movs	r7, r0
	f_close(&file_object);
   1594c:	0028      	movs	r0, r5
   1594e:	4b4a      	ldr	r3, [pc, #296]	; (15a78 <rename_to_unique+0x16c>)
   15950:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
   15952:	2f00      	cmp	r7, #0
   15954:	d000      	beq.n	15958 <rename_to_unique+0x4c>
   15956:	e084      	b.n	15a62 <rename_to_unique+0x156>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15958:	0030      	movs	r0, r6
   1595a:	4b48      	ldr	r3, [pc, #288]	; (15a7c <rename_to_unique+0x170>)
   1595c:	4798      	blx	r3
   1595e:	0003      	movs	r3, r0
		return false;
   15960:	2000      	movs	r0, #0
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15962:	2bfa      	cmp	r3, #250	; 0xfa
   15964:	d87e      	bhi.n	15a64 <rename_to_unique+0x158>
	p = strrchr(file_path_name, '.');
   15966:	212e      	movs	r1, #46	; 0x2e
   15968:	0030      	movs	r0, r6
   1596a:	4b45      	ldr	r3, [pc, #276]	; (15a80 <rename_to_unique+0x174>)
   1596c:	4798      	blx	r3
   1596e:	1e05      	subs	r5, r0, #0
	if (p != NULL) {
   15970:	d039      	beq.n	159e6 <rename_to_unique+0xda>
		ext_len = strlen(p);
   15972:	4b42      	ldr	r3, [pc, #264]	; (15a7c <rename_to_unique+0x170>)
   15974:	4798      	blx	r3
   15976:	0007      	movs	r7, r0
   15978:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   1597a:	2c07      	cmp	r4, #7
   1597c:	d820      	bhi.n	159c0 <rename_to_unique+0xb4>
			strcpy(ext, p);
   1597e:	0029      	movs	r1, r5
   15980:	a806      	add	r0, sp, #24
   15982:	4b40      	ldr	r3, [pc, #256]	; (15a84 <rename_to_unique+0x178>)
   15984:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   15986:	0030      	movs	r0, r6
   15988:	4b3c      	ldr	r3, [pc, #240]	; (15a7c <rename_to_unique+0x170>)
   1598a:	4798      	blx	r3
   1598c:	043f      	lsls	r7, r7, #16
   1598e:	0c3f      	lsrs	r7, r7, #16
   15990:	1bc7      	subs	r7, r0, r7
   15992:	2ff6      	cmp	r7, #246	; 0xf6
   15994:	d909      	bls.n	159aa <rename_to_unique+0x9e>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   15996:	25f6      	movs	r5, #246	; 0xf6
   15998:	1b2d      	subs	r5, r5, r4
   1599a:	b2ad      	uxth	r5, r5
				strncpy(name, file_path_name, name_len);
   1599c:	002a      	movs	r2, r5
   1599e:	0031      	movs	r1, r6
   159a0:	a809      	add	r0, sp, #36	; 0x24
   159a2:	4b39      	ldr	r3, [pc, #228]	; (15a88 <rename_to_unique+0x17c>)
   159a4:	4798      	blx	r3
			valid_ext = true;
   159a6:	2401      	movs	r4, #1
   159a8:	e011      	b.n	159ce <rename_to_unique+0xc2>
				name_len = (p - file_path_name);
   159aa:	9b01      	ldr	r3, [sp, #4]
   159ac:	1aea      	subs	r2, r5, r3
   159ae:	b295      	uxth	r5, r2
				strncpy(name, file_path_name, name_len);
   159b0:	0412      	lsls	r2, r2, #16
   159b2:	0c12      	lsrs	r2, r2, #16
   159b4:	0019      	movs	r1, r3
   159b6:	a809      	add	r0, sp, #36	; 0x24
   159b8:	4b33      	ldr	r3, [pc, #204]	; (15a88 <rename_to_unique+0x17c>)
   159ba:	4798      	blx	r3
			valid_ext = true;
   159bc:	2401      	movs	r4, #1
   159be:	e006      	b.n	159ce <rename_to_unique+0xc2>
			strncpy(name, file_path_name, name_len);
   159c0:	22f6      	movs	r2, #246	; 0xf6
   159c2:	9901      	ldr	r1, [sp, #4]
   159c4:	a809      	add	r0, sp, #36	; 0x24
   159c6:	4b30      	ldr	r3, [pc, #192]	; (15a88 <rename_to_unique+0x17c>)
   159c8:	4798      	blx	r3
	bool valid_ext = false;
   159ca:	2400      	movs	r4, #0
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   159cc:	25f6      	movs	r5, #246	; 0xf6
	name[name_len++] = '-';
   159ce:	1c6e      	adds	r6, r5, #1
   159d0:	b2b6      	uxth	r6, r6
   159d2:	222d      	movs	r2, #45	; 0x2d
   159d4:	ab09      	add	r3, sp, #36	; 0x24
   159d6:	555a      	strb	r2, [r3, r5]
   159d8:	2501      	movs	r5, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   159da:	1cf3      	adds	r3, r6, #3
   159dc:	aa09      	add	r2, sp, #36	; 0x24
   159de:	4694      	mov	ip, r2
   159e0:	4463      	add	r3, ip
   159e2:	9302      	str	r3, [sp, #8]
   159e4:	e019      	b.n	15a1a <rename_to_unique+0x10e>
		strncpy(name, file_path_name, name_len);
   159e6:	22f6      	movs	r2, #246	; 0xf6
   159e8:	9901      	ldr	r1, [sp, #4]
   159ea:	a809      	add	r0, sp, #36	; 0x24
   159ec:	4b26      	ldr	r3, [pc, #152]	; (15a88 <rename_to_unique+0x17c>)
   159ee:	4798      	blx	r3
	bool valid_ext = false;
   159f0:	2400      	movs	r4, #0
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   159f2:	25f6      	movs	r5, #246	; 0xf6
   159f4:	e7eb      	b.n	159ce <rename_to_unique+0xc2>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   159f6:	4f1e      	ldr	r7, [pc, #120]	; (15a70 <rename_to_unique+0x164>)
   159f8:	2200      	movs	r2, #0
   159fa:	a909      	add	r1, sp, #36	; 0x24
   159fc:	0038      	movs	r0, r7
   159fe:	4b1d      	ldr	r3, [pc, #116]	; (15a74 <rename_to_unique+0x168>)
   15a00:	4798      	blx	r3
   15a02:	4683      	mov	fp, r0
	f_close(&file_object);
   15a04:	0038      	movs	r0, r7
   15a06:	4b1c      	ldr	r3, [pc, #112]	; (15a78 <rename_to_unique+0x16c>)
   15a08:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
   15a0a:	465b      	mov	r3, fp
   15a0c:	2b00      	cmp	r3, #0
   15a0e:	d116      	bne.n	15a3e <rename_to_unique+0x132>
   15a10:	3501      	adds	r5, #1
	for (i = 1; i < count; i++) {
   15a12:	4b1e      	ldr	r3, [pc, #120]	; (15a8c <rename_to_unique+0x180>)
   15a14:	b2aa      	uxth	r2, r5
   15a16:	429a      	cmp	r2, r3
   15a18:	d81d      	bhi.n	15a56 <rename_to_unique+0x14a>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   15a1a:	002a      	movs	r2, r5
   15a1c:	491c      	ldr	r1, [pc, #112]	; (15a90 <rename_to_unique+0x184>)
   15a1e:	a805      	add	r0, sp, #20
   15a20:	4b1c      	ldr	r3, [pc, #112]	; (15a94 <rename_to_unique+0x188>)
   15a22:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   15a24:	ab09      	add	r3, sp, #36	; 0x24
   15a26:	1998      	adds	r0, r3, r6
   15a28:	2203      	movs	r2, #3
   15a2a:	a905      	add	r1, sp, #20
   15a2c:	4b16      	ldr	r3, [pc, #88]	; (15a88 <rename_to_unique+0x17c>)
   15a2e:	4798      	blx	r3
		if (valid_ext) {
   15a30:	2c00      	cmp	r4, #0
   15a32:	d0e0      	beq.n	159f6 <rename_to_unique+0xea>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   15a34:	a906      	add	r1, sp, #24
   15a36:	9802      	ldr	r0, [sp, #8]
   15a38:	4b12      	ldr	r3, [pc, #72]	; (15a84 <rename_to_unique+0x178>)
   15a3a:	4798      	blx	r3
   15a3c:	e7db      	b.n	159f6 <rename_to_unique+0xea>
			memset(file_path_name, 0, max_len);
   15a3e:	9a03      	ldr	r2, [sp, #12]
   15a40:	2100      	movs	r1, #0
   15a42:	9c01      	ldr	r4, [sp, #4]
   15a44:	0020      	movs	r0, r4
   15a46:	4b09      	ldr	r3, [pc, #36]	; (15a6c <rename_to_unique+0x160>)
   15a48:	4798      	blx	r3
			strcpy(file_path_name, name);
   15a4a:	a909      	add	r1, sp, #36	; 0x24
   15a4c:	0020      	movs	r0, r4
   15a4e:	4b0d      	ldr	r3, [pc, #52]	; (15a84 <rename_to_unique+0x178>)
   15a50:	4798      	blx	r3
			return true;
   15a52:	2001      	movs	r0, #1
   15a54:	e006      	b.n	15a64 <rename_to_unique+0x158>
	return false;
   15a56:	2000      	movs	r0, #0
   15a58:	e004      	b.n	15a64 <rename_to_unique+0x158>
		return false;
   15a5a:	2000      	movs	r0, #0
   15a5c:	e002      	b.n	15a64 <rename_to_unique+0x158>
		return true;
   15a5e:	2001      	movs	r0, #1
   15a60:	e000      	b.n	15a64 <rename_to_unique+0x158>
   15a62:	2001      	movs	r0, #1
}
   15a64:	b048      	add	sp, #288	; 0x120
   15a66:	bc04      	pop	{r2}
   15a68:	4693      	mov	fp, r2
   15a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a6c:	00016a83 	.word	0x00016a83
   15a70:	20000b20 	.word	0x20000b20
   15a74:	00012175 	.word	0x00012175
   15a78:	00012775 	.word	0x00012775
   15a7c:	0001703f 	.word	0x0001703f
   15a80:	00017099 	.word	0x00017099
   15a84:	00016ff5 	.word	0x00016ff5
   15a88:	0001706f 	.word	0x0001706f
   15a8c:	000003e7 	.word	0x000003e7
   15a90:	0001b374 	.word	0x0001b374
   15a94:	00016f9d 	.word	0x00016f9d

00015a98 <store_file_packet>:
{
   15a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a9a:	b083      	sub	sp, #12
   15a9c:	0005      	movs	r5, r0
   15a9e:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
   15aa0:	2800      	cmp	r0, #0
   15aa2:	d04c      	beq.n	15b3e <store_file_packet+0xa6>
   15aa4:	2900      	cmp	r1, #0
   15aa6:	d04a      	beq.n	15b3e <store_file_packet+0xa6>
	return ((down_state & mask) != 0);
   15aa8:	4b3c      	ldr	r3, [pc, #240]	; (15b9c <store_file_packet+0x104>)
   15aaa:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   15aac:	071b      	lsls	r3, r3, #28
   15aae:	d432      	bmi.n	15b16 <store_file_packet+0x7e>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15ab0:	4b3b      	ldr	r3, [pc, #236]	; (15ba0 <store_file_packet+0x108>)
   15ab2:	2230      	movs	r2, #48	; 0x30
   15ab4:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   15ab6:	320a      	adds	r2, #10
   15ab8:	705a      	strb	r2, [r3, #1]
		cp = (char *)(desired_url + strlen(desired_url));
   15aba:	4b3a      	ldr	r3, [pc, #232]	; (15ba4 <store_file_packet+0x10c>)
   15abc:	681c      	ldr	r4, [r3, #0]
   15abe:	0020      	movs	r0, r4
   15ac0:	4b39      	ldr	r3, [pc, #228]	; (15ba8 <store_file_packet+0x110>)
   15ac2:	4798      	blx	r3
   15ac4:	1824      	adds	r4, r4, r0
		while (*cp != '/') {
   15ac6:	7823      	ldrb	r3, [r4, #0]
   15ac8:	2b2f      	cmp	r3, #47	; 0x2f
   15aca:	d003      	beq.n	15ad4 <store_file_packet+0x3c>
			cp--;
   15acc:	3c01      	subs	r4, #1
		while (*cp != '/') {
   15ace:	7823      	ldrb	r3, [r4, #0]
   15ad0:	2b2f      	cmp	r3, #47	; 0x2f
   15ad2:	d1fb      	bne.n	15acc <store_file_packet+0x34>
		if (strlen(cp) > 1) {
   15ad4:	0020      	movs	r0, r4
   15ad6:	4b34      	ldr	r3, [pc, #208]	; (15ba8 <store_file_packet+0x110>)
   15ad8:	4798      	blx	r3
   15ada:	2801      	cmp	r0, #1
   15adc:	d934      	bls.n	15b48 <store_file_packet+0xb0>
			cp++;
   15ade:	1c61      	adds	r1, r4, #1
			strcpy(&save_file_name[2], cp);
   15ae0:	4c2f      	ldr	r4, [pc, #188]	; (15ba0 <store_file_packet+0x108>)
   15ae2:	1ca0      	adds	r0, r4, #2
   15ae4:	4b31      	ldr	r3, [pc, #196]	; (15bac <store_file_packet+0x114>)
   15ae6:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   15ae8:	4f31      	ldr	r7, [pc, #196]	; (15bb0 <store_file_packet+0x118>)
   15aea:	22fa      	movs	r2, #250	; 0xfa
   15aec:	0021      	movs	r1, r4
   15aee:	0038      	movs	r0, r7
   15af0:	4b30      	ldr	r3, [pc, #192]	; (15bb4 <store_file_packet+0x11c>)
   15af2:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
   15af4:	0021      	movs	r1, r4
   15af6:	4830      	ldr	r0, [pc, #192]	; (15bb8 <store_file_packet+0x120>)
   15af8:	4b30      	ldr	r3, [pc, #192]	; (15bbc <store_file_packet+0x124>)
   15afa:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   15afc:	220a      	movs	r2, #10
   15afe:	0021      	movs	r1, r4
   15b00:	0038      	movs	r0, r7
   15b02:	4b2f      	ldr	r3, [pc, #188]	; (15bc0 <store_file_packet+0x128>)
   15b04:	4798      	blx	r3
		if (ret != FR_OK) {
   15b06:	2800      	cmp	r0, #0
   15b08:	d125      	bne.n	15b56 <store_file_packet+0xbe>
		received_file_size = 0;
   15b0a:	2200      	movs	r2, #0
   15b0c:	4b2d      	ldr	r3, [pc, #180]	; (15bc4 <store_file_packet+0x12c>)
   15b0e:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   15b10:	2008      	movs	r0, #8
   15b12:	4b2d      	ldr	r3, [pc, #180]	; (15bc8 <store_file_packet+0x130>)
   15b14:	4798      	blx	r3
		UINT wsize = 0;
   15b16:	2300      	movs	r3, #0
   15b18:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   15b1a:	ab01      	add	r3, sp, #4
   15b1c:	0032      	movs	r2, r6
   15b1e:	0029      	movs	r1, r5
   15b20:	4823      	ldr	r0, [pc, #140]	; (15bb0 <store_file_packet+0x118>)
   15b22:	4c2a      	ldr	r4, [pc, #168]	; (15bcc <store_file_packet+0x134>)
   15b24:	47a0      	blx	r4
		if (ret != FR_OK) {
   15b26:	2800      	cmp	r0, #0
   15b28:	d01a      	beq.n	15b60 <store_file_packet+0xc8>
			f_close(&file_object);
   15b2a:	4821      	ldr	r0, [pc, #132]	; (15bb0 <store_file_packet+0x118>)
   15b2c:	4b28      	ldr	r3, [pc, #160]	; (15bd0 <store_file_packet+0x138>)
   15b2e:	4798      	blx	r3
			add_state(CANCELED);
   15b30:	2020      	movs	r0, #32
   15b32:	4b25      	ldr	r3, [pc, #148]	; (15bc8 <store_file_packet+0x130>)
   15b34:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
   15b36:	4827      	ldr	r0, [pc, #156]	; (15bd4 <store_file_packet+0x13c>)
   15b38:	4b27      	ldr	r3, [pc, #156]	; (15bd8 <store_file_packet+0x140>)
   15b3a:	4798      	blx	r3
			return;
   15b3c:	e002      	b.n	15b44 <store_file_packet+0xac>
		printf("store_file_packet: empty data.\r\n");
   15b3e:	4827      	ldr	r0, [pc, #156]	; (15bdc <store_file_packet+0x144>)
   15b40:	4b25      	ldr	r3, [pc, #148]	; (15bd8 <store_file_packet+0x140>)
   15b42:	4798      	blx	r3
}
   15b44:	b003      	add	sp, #12
   15b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
   15b48:	4825      	ldr	r0, [pc, #148]	; (15be0 <store_file_packet+0x148>)
   15b4a:	4b23      	ldr	r3, [pc, #140]	; (15bd8 <store_file_packet+0x140>)
   15b4c:	4798      	blx	r3
			add_state(CANCELED);
   15b4e:	2020      	movs	r0, #32
   15b50:	4b1d      	ldr	r3, [pc, #116]	; (15bc8 <store_file_packet+0x130>)
   15b52:	4798      	blx	r3
			return;
   15b54:	e7f6      	b.n	15b44 <store_file_packet+0xac>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
   15b56:	0001      	movs	r1, r0
   15b58:	4822      	ldr	r0, [pc, #136]	; (15be4 <store_file_packet+0x14c>)
   15b5a:	4b18      	ldr	r3, [pc, #96]	; (15bbc <store_file_packet+0x124>)
   15b5c:	4798      	blx	r3
			return;
   15b5e:	e7f1      	b.n	15b44 <store_file_packet+0xac>
		received_file_size += wsize;
   15b60:	4c18      	ldr	r4, [pc, #96]	; (15bc4 <store_file_packet+0x12c>)
   15b62:	6823      	ldr	r3, [r4, #0]
   15b64:	9a01      	ldr	r2, [sp, #4]
   15b66:	4694      	mov	ip, r2
   15b68:	4463      	add	r3, ip
   15b6a:	0019      	movs	r1, r3
   15b6c:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   15b6e:	4d1e      	ldr	r5, [pc, #120]	; (15be8 <store_file_packet+0x150>)
   15b70:	682a      	ldr	r2, [r5, #0]
   15b72:	481e      	ldr	r0, [pc, #120]	; (15bec <store_file_packet+0x154>)
   15b74:	4b11      	ldr	r3, [pc, #68]	; (15bbc <store_file_packet+0x124>)
   15b76:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
   15b78:	6822      	ldr	r2, [r4, #0]
   15b7a:	682b      	ldr	r3, [r5, #0]
   15b7c:	429a      	cmp	r2, r3
   15b7e:	d3e1      	bcc.n	15b44 <store_file_packet+0xac>
			f_close(&file_object);
   15b80:	480b      	ldr	r0, [pc, #44]	; (15bb0 <store_file_packet+0x118>)
   15b82:	4b13      	ldr	r3, [pc, #76]	; (15bd0 <store_file_packet+0x138>)
   15b84:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
   15b86:	481a      	ldr	r0, [pc, #104]	; (15bf0 <store_file_packet+0x158>)
   15b88:	4b13      	ldr	r3, [pc, #76]	; (15bd8 <store_file_packet+0x140>)
   15b8a:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   15b8c:	2280      	movs	r2, #128	; 0x80
   15b8e:	0412      	lsls	r2, r2, #16
   15b90:	4b18      	ldr	r3, [pc, #96]	; (15bf4 <store_file_packet+0x15c>)
   15b92:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   15b94:	2010      	movs	r0, #16
   15b96:	4b0c      	ldr	r3, [pc, #48]	; (15bc8 <store_file_packet+0x130>)
   15b98:	4798      	blx	r3
			return;
   15b9a:	e7d3      	b.n	15b44 <store_file_packet+0xac>
   15b9c:	200008ed 	.word	0x200008ed
   15ba0:	2000005c 	.word	0x2000005c
   15ba4:	200008e8 	.word	0x200008e8
   15ba8:	0001703f 	.word	0x0001703f
   15bac:	00016ff5 	.word	0x00016ff5
   15bb0:	20000b20 	.word	0x20000b20
   15bb4:	0001590d 	.word	0x0001590d
   15bb8:	0001b4a4 	.word	0x0001b4a4
   15bbc:	00016be5 	.word	0x00016be5
   15bc0:	00012175 	.word	0x00012175
   15bc4:	20000f88 	.word	0x20000f88
   15bc8:	00015491 	.word	0x00015491
   15bcc:	000124b1 	.word	0x000124b1
   15bd0:	00012775 	.word	0x00012775
   15bd4:	0001b540 	.word	0x0001b540
   15bd8:	00016d01 	.word	0x00016d01
   15bdc:	0001b484 	.word	0x0001b484
   15be0:	0001b4cc 	.word	0x0001b4cc
   15be4:	0001b50c 	.word	0x0001b50c
   15be8:	20000b44 	.word	0x20000b44
   15bec:	0001b57c 	.word	0x0001b57c
   15bf0:	0001b5b0 	.word	0x0001b5b0
   15bf4:	41004400 	.word	0x41004400

00015bf8 <http_client_callback>:
{
   15bf8:	b510      	push	{r4, lr}
   15bfa:	0014      	movs	r4, r2
	switch (type) {
   15bfc:	2904      	cmp	r1, #4
   15bfe:	d806      	bhi.n	15c0e <http_client_callback+0x16>
   15c00:	0089      	lsls	r1, r1, #2
   15c02:	4b29      	ldr	r3, [pc, #164]	; (15ca8 <http_client_callback+0xb0>)
   15c04:	585b      	ldr	r3, [r3, r1]
   15c06:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
   15c08:	4828      	ldr	r0, [pc, #160]	; (15cac <http_client_callback+0xb4>)
   15c0a:	4b29      	ldr	r3, [pc, #164]	; (15cb0 <http_client_callback+0xb8>)
   15c0c:	4798      	blx	r3
}
   15c0e:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
   15c10:	4828      	ldr	r0, [pc, #160]	; (15cb4 <http_client_callback+0xbc>)
   15c12:	4b27      	ldr	r3, [pc, #156]	; (15cb0 <http_client_callback+0xb8>)
   15c14:	4798      	blx	r3
		add_state(GET_REQUESTED);
   15c16:	2004      	movs	r0, #4
   15c18:	4b27      	ldr	r3, [pc, #156]	; (15cb8 <http_client_callback+0xc0>)
   15c1a:	4798      	blx	r3
		break;
   15c1c:	e7f7      	b.n	15c0e <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
   15c1e:	8811      	ldrh	r1, [r2, #0]
   15c20:	6852      	ldr	r2, [r2, #4]
   15c22:	4826      	ldr	r0, [pc, #152]	; (15cbc <http_client_callback+0xc4>)
   15c24:	4b26      	ldr	r3, [pc, #152]	; (15cc0 <http_client_callback+0xc8>)
   15c26:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   15c28:	8823      	ldrh	r3, [r4, #0]
   15c2a:	2bc8      	cmp	r3, #200	; 0xc8
   15c2c:	d10f      	bne.n	15c4e <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
   15c2e:	6861      	ldr	r1, [r4, #4]
   15c30:	4b24      	ldr	r3, [pc, #144]	; (15cc4 <http_client_callback+0xcc>)
   15c32:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   15c34:	2200      	movs	r2, #0
   15c36:	4b24      	ldr	r3, [pc, #144]	; (15cc8 <http_client_callback+0xd0>)
   15c38:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   15c3a:	4b24      	ldr	r3, [pc, #144]	; (15ccc <http_client_callback+0xd4>)
   15c3c:	4299      	cmp	r1, r3
   15c3e:	d8e6      	bhi.n	15c0e <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   15c40:	68a0      	ldr	r0, [r4, #8]
   15c42:	4b23      	ldr	r3, [pc, #140]	; (15cd0 <http_client_callback+0xd8>)
   15c44:	4798      	blx	r3
			add_state(COMPLETED);
   15c46:	2010      	movs	r0, #16
   15c48:	4b1b      	ldr	r3, [pc, #108]	; (15cb8 <http_client_callback+0xc0>)
   15c4a:	4798      	blx	r3
   15c4c:	e7df      	b.n	15c0e <http_client_callback+0x16>
			add_state(CANCELED);
   15c4e:	2020      	movs	r0, #32
   15c50:	4b19      	ldr	r3, [pc, #100]	; (15cb8 <http_client_callback+0xc0>)
   15c52:	4798      	blx	r3
			return;
   15c54:	e7db      	b.n	15c0e <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   15c56:	6811      	ldr	r1, [r2, #0]
   15c58:	6850      	ldr	r0, [r2, #4]
   15c5a:	4b1d      	ldr	r3, [pc, #116]	; (15cd0 <http_client_callback+0xd8>)
   15c5c:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   15c5e:	7a23      	ldrb	r3, [r4, #8]
   15c60:	2b00      	cmp	r3, #0
   15c62:	d0d4      	beq.n	15c0e <http_client_callback+0x16>
			add_state(COMPLETED);
   15c64:	2010      	movs	r0, #16
   15c66:	4b14      	ldr	r3, [pc, #80]	; (15cb8 <http_client_callback+0xc0>)
   15c68:	4798      	blx	r3
   15c6a:	e7d0      	b.n	15c0e <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   15c6c:	6811      	ldr	r1, [r2, #0]
   15c6e:	4819      	ldr	r0, [pc, #100]	; (15cd4 <http_client_callback+0xdc>)
   15c70:	4b13      	ldr	r3, [pc, #76]	; (15cc0 <http_client_callback+0xc8>)
   15c72:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   15c74:	6823      	ldr	r3, [r4, #0]
   15c76:	330b      	adds	r3, #11
   15c78:	d1c9      	bne.n	15c0e <http_client_callback+0x16>
	return ((down_state & mask) != 0);
   15c7a:	4b17      	ldr	r3, [pc, #92]	; (15cd8 <http_client_callback+0xe0>)
   15c7c:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   15c7e:	071b      	lsls	r3, r3, #28
   15c80:	d406      	bmi.n	15c90 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
   15c82:	4b15      	ldr	r3, [pc, #84]	; (15cd8 <http_client_callback+0xe0>)
   15c84:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   15c86:	075b      	lsls	r3, r3, #29
   15c88:	d409      	bmi.n	15c9e <http_client_callback+0xa6>
			start_download();
   15c8a:	4b14      	ldr	r3, [pc, #80]	; (15cdc <http_client_callback+0xe4>)
   15c8c:	4798      	blx	r3
   15c8e:	e7be      	b.n	15c0e <http_client_callback+0x16>
				f_close(&file_object);
   15c90:	4813      	ldr	r0, [pc, #76]	; (15ce0 <http_client_callback+0xe8>)
   15c92:	4b14      	ldr	r3, [pc, #80]	; (15ce4 <http_client_callback+0xec>)
   15c94:	4798      	blx	r3
				clear_state(DOWNLOADING);
   15c96:	2008      	movs	r0, #8
   15c98:	4b13      	ldr	r3, [pc, #76]	; (15ce8 <http_client_callback+0xf0>)
   15c9a:	4798      	blx	r3
   15c9c:	e7f1      	b.n	15c82 <http_client_callback+0x8a>
				clear_state(GET_REQUESTED);
   15c9e:	2004      	movs	r0, #4
   15ca0:	4b11      	ldr	r3, [pc, #68]	; (15ce8 <http_client_callback+0xf0>)
   15ca2:	4798      	blx	r3
   15ca4:	e7f1      	b.n	15c8a <http_client_callback+0x92>
   15ca6:	46c0      	nop			; (mov r8, r8)
   15ca8:	0001a950 	.word	0x0001a950
   15cac:	0001aa08 	.word	0x0001aa08
   15cb0:	00016d01 	.word	0x00016d01
   15cb4:	0001aa40 	.word	0x0001aa40
   15cb8:	00015491 	.word	0x00015491
   15cbc:	0001aa6c 	.word	0x0001aa6c
   15cc0:	00016be5 	.word	0x00016be5
   15cc4:	20000b44 	.word	0x20000b44
   15cc8:	20000f88 	.word	0x20000f88
   15ccc:	000005a6 	.word	0x000005a6
   15cd0:	00015a99 	.word	0x00015a99
   15cd4:	0001aaa8 	.word	0x0001aaa8
   15cd8:	200008ed 	.word	0x200008ed
   15cdc:	00015619 	.word	0x00015619
   15ce0:	20000b20 	.word	0x20000b20
   15ce4:	00012775 	.word	0x00012775
   15ce8:	00015481 	.word	0x00015481

00015cec <configure_extint_channel>:
{
   15cec:	b510      	push	{r4, lr}
    extint_chan_get_config_defaults(&config_extint_chan);
   15cee:	4c08      	ldr	r4, [pc, #32]	; (15d10 <configure_extint_channel+0x24>)
   15cf0:	0020      	movs	r0, r4
   15cf2:	4b08      	ldr	r3, [pc, #32]	; (15d14 <configure_extint_channel+0x28>)
   15cf4:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   15cf6:	2314      	movs	r3, #20
   15cf8:	6023      	str	r3, [r4, #0]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   15cfa:	2300      	movs	r3, #0
   15cfc:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   15cfe:	3301      	adds	r3, #1
   15d00:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   15d02:	3301      	adds	r3, #1
   15d04:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   15d06:	0021      	movs	r1, r4
   15d08:	2004      	movs	r0, #4
   15d0a:	4b03      	ldr	r3, [pc, #12]	; (15d18 <configure_extint_channel+0x2c>)
   15d0c:	4798      	blx	r3
}
   15d0e:	bd10      	pop	{r4, pc}
   15d10:	20001358 	.word	0x20001358
   15d14:	0000e3c9 	.word	0x0000e3c9
   15d18:	0000e3dd 	.word	0x0000e3dd

00015d1c <configure_extint_callbacks>:
{
   15d1c:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   15d1e:	2200      	movs	r2, #0
   15d20:	2104      	movs	r1, #4
   15d22:	4804      	ldr	r0, [pc, #16]	; (15d34 <configure_extint_callbacks+0x18>)
   15d24:	4b04      	ldr	r3, [pc, #16]	; (15d38 <configure_extint_callbacks+0x1c>)
   15d26:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   15d28:	2100      	movs	r1, #0
   15d2a:	2004      	movs	r0, #4
   15d2c:	4b03      	ldr	r3, [pc, #12]	; (15d3c <configure_extint_callbacks+0x20>)
   15d2e:	4798      	blx	r3
}
   15d30:	bd10      	pop	{r4, pc}
   15d32:	46c0      	nop			; (mov r8, r8)
   15d34:	000154a1 	.word	0x000154a1
   15d38:	0000e285 	.word	0x0000e285
   15d3c:	0000e2b1 	.word	0x0000e2b1

00015d40 <configure_nvm>:

/**
* NVM CONFIGURATION
*/
void configure_nvm(void)
{
   15d40:	b510      	push	{r4, lr}
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   15d42:	4807      	ldr	r0, [pc, #28]	; (15d60 <configure_nvm+0x20>)
   15d44:	2200      	movs	r2, #0
   15d46:	7002      	strb	r2, [r0, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   15d48:	4b06      	ldr	r3, [pc, #24]	; (15d64 <configure_nvm+0x24>)
   15d4a:	685b      	ldr	r3, [r3, #4]
   15d4c:	06db      	lsls	r3, r3, #27
   15d4e:	0f1b      	lsrs	r3, r3, #28
   15d50:	7083      	strb	r3, [r0, #2]
	config->disable_cache     = false;
   15d52:	70c2      	strb	r2, [r0, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   15d54:	7102      	strb	r2, [r0, #4]
	nvm_get_config_defaults(&nvm_cfg);	
	nvm_cfg.manual_page_write = false;
   15d56:	7042      	strb	r2, [r0, #1]
	nvm_set_config(&nvm_cfg);
   15d58:	4b03      	ldr	r3, [pc, #12]	; (15d68 <configure_nvm+0x28>)
   15d5a:	4798      	blx	r3
}
   15d5c:	bd10      	pop	{r4, pc}
   15d5e:	46c0      	nop			; (mov r8, r8)
   15d60:	200011cc 	.word	0x200011cc
   15d64:	41004000 	.word	0x41004000
   15d68:	0000e455 	.word	0x0000e455

00015d6c <otafu_download_operation>:
*/


// MAIN HTTP INTERACTION FOR DOWNLOAD
int otafu_download_operation(int file_type)
{
   15d6c:	b570      	push	{r4, r5, r6, lr}
	static http_socket_flag = 0; 
	
	if (file_type == VERSION)
   15d6e:	2801      	cmp	r0, #1
   15d70:	d027      	beq.n	15dc2 <otafu_download_operation+0x56>
	{
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Version.txt";	
	}
	else if (file_type == FIRMWARE)
   15d72:	2802      	cmp	r0, #2
   15d74:	d029      	beq.n	15dca <otafu_download_operation+0x5e>
	{
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Firmware.bin";	
	}
	else if (file_type == CRC)
   15d76:	2803      	cmp	r0, #3
   15d78:	d02b      	beq.n	15dd2 <otafu_download_operation+0x66>
	{
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Crc.txt";	
	}
	
	//DOWNLOAD A FILE
	do_download_flag = true;
   15d7a:	2201      	movs	r2, #1
   15d7c:	4b1c      	ldr	r3, [pc, #112]	; (15df0 <otafu_download_operation+0x84>)
   15d7e:	701a      	strb	r2, [r3, #0]
	
	if(http_socket_flag == 0)
   15d80:	4b1c      	ldr	r3, [pc, #112]	; (15df4 <otafu_download_operation+0x88>)
   15d82:	681b      	ldr	r3, [r3, #0]
   15d84:	2b00      	cmp	r3, #0
   15d86:	d028      	beq.n	15dda <otafu_download_operation+0x6e>
		
		http_socket_flag = 1;	
	}

	
	start_download();
   15d88:	4b1b      	ldr	r3, [pc, #108]	; (15df8 <otafu_download_operation+0x8c>)
   15d8a:	4798      	blx	r3
	return ((down_state & mask) != 0);
   15d8c:	4b1b      	ldr	r3, [pc, #108]	; (15dfc <otafu_download_operation+0x90>)
	
	
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) 
   15d8e:	781b      	ldrb	r3, [r3, #0]
   15d90:	2230      	movs	r2, #48	; 0x30
   15d92:	421a      	tst	r2, r3
   15d94:	d10b      	bne.n	15dae <otafu_download_operation+0x42>
	{
		// Handle pending events from network controller. 
		m2m_wifi_handle_events(NULL);
   15d96:	4e1a      	ldr	r6, [pc, #104]	; (15e00 <otafu_download_operation+0x94>)
		// Checks the timer timeout. 
		sw_timer_task(&swt_module_inst);
   15d98:	4c1a      	ldr	r4, [pc, #104]	; (15e04 <otafu_download_operation+0x98>)
   15d9a:	4d1b      	ldr	r5, [pc, #108]	; (15e08 <otafu_download_operation+0x9c>)
		m2m_wifi_handle_events(NULL);
   15d9c:	2000      	movs	r0, #0
   15d9e:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   15da0:	0020      	movs	r0, r4
   15da2:	47a8      	blx	r5
	return ((down_state & mask) != 0);
   15da4:	4b15      	ldr	r3, [pc, #84]	; (15dfc <otafu_download_operation+0x90>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) 
   15da6:	781b      	ldrb	r3, [r3, #0]
   15da8:	2230      	movs	r2, #48	; 0x30
   15daa:	421a      	tst	r2, r3
   15dac:	d0f6      	beq.n	15d9c <otafu_download_operation+0x30>
	}
	
	//Disable all flags pertaining to download
	clear_state(GET_REQUESTED);
   15dae:	2004      	movs	r0, #4
   15db0:	4c16      	ldr	r4, [pc, #88]	; (15e0c <otafu_download_operation+0xa0>)
   15db2:	47a0      	blx	r4
	clear_state(COMPLETED);
   15db4:	2010      	movs	r0, #16
   15db6:	47a0      	blx	r4
	clear_state(CANCELED);
   15db8:	2020      	movs	r0, #32
   15dba:	47a0      	blx	r4
	clear_state(DOWNLOADING);
   15dbc:	2008      	movs	r0, #8
   15dbe:	47a0      	blx	r4
	
	//Disable socket for HTTP Transfer when completely done with the http related operations
}
   15dc0:	bd70      	pop	{r4, r5, r6, pc}
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Version.txt";	
   15dc2:	4a13      	ldr	r2, [pc, #76]	; (15e10 <otafu_download_operation+0xa4>)
   15dc4:	4b13      	ldr	r3, [pc, #76]	; (15e14 <otafu_download_operation+0xa8>)
   15dc6:	601a      	str	r2, [r3, #0]
   15dc8:	e7d7      	b.n	15d7a <otafu_download_operation+0xe>
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Firmware.bin";	
   15dca:	4a13      	ldr	r2, [pc, #76]	; (15e18 <otafu_download_operation+0xac>)
   15dcc:	4b11      	ldr	r3, [pc, #68]	; (15e14 <otafu_download_operation+0xa8>)
   15dce:	601a      	str	r2, [r3, #0]
   15dd0:	e7d3      	b.n	15d7a <otafu_download_operation+0xe>
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Crc.txt";	
   15dd2:	4a12      	ldr	r2, [pc, #72]	; (15e1c <otafu_download_operation+0xb0>)
   15dd4:	4b0f      	ldr	r3, [pc, #60]	; (15e14 <otafu_download_operation+0xa8>)
   15dd6:	601a      	str	r2, [r3, #0]
   15dd8:	e7cf      	b.n	15d7a <otafu_download_operation+0xe>
		socketInit();
   15dda:	4b11      	ldr	r3, [pc, #68]	; (15e20 <otafu_download_operation+0xb4>)
   15ddc:	4798      	blx	r3
		registerSocketCallback(socket_cb, resolve_cb);
   15dde:	4911      	ldr	r1, [pc, #68]	; (15e24 <otafu_download_operation+0xb8>)
   15de0:	4811      	ldr	r0, [pc, #68]	; (15e28 <otafu_download_operation+0xbc>)
   15de2:	4b12      	ldr	r3, [pc, #72]	; (15e2c <otafu_download_operation+0xc0>)
   15de4:	4798      	blx	r3
		http_socket_flag = 1;	
   15de6:	2201      	movs	r2, #1
   15de8:	4b02      	ldr	r3, [pc, #8]	; (15df4 <otafu_download_operation+0x88>)
   15dea:	601a      	str	r2, [r3, #0]
   15dec:	e7cc      	b.n	15d88 <otafu_download_operation+0x1c>
   15dee:	46c0      	nop			; (mov r8, r8)
   15df0:	200008ec 	.word	0x200008ec
   15df4:	20000b48 	.word	0x20000b48
   15df8:	00015619 	.word	0x00015619
   15dfc:	200008ed 	.word	0x200008ed
   15e00:	0000bf7d 	.word	0x0000bf7d
   15e04:	200011d8 	.word	0x200011d8
   15e08:	00015429 	.word	0x00015429
   15e0c:	00015481 	.word	0x00015481
   15e10:	0001b168 	.word	0x0001b168
   15e14:	200008e8 	.word	0x200008e8
   15e18:	0001b19c 	.word	0x0001b19c
   15e1c:	0001b1d0 	.word	0x0001b1d0
   15e20:	0000da71 	.word	0x0000da71
   15e24:	000155d1 	.word	0x000155d1
   15e28:	0001560d 	.word	0x0001560d
   15e2c:	0000daf1 	.word	0x0000daf1

00015e30 <otafu_version_check>:


// Version Check > If actually the firmware is to be downloaded or not
int otafu_version_check()
{
   15e30:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e32:	b083      	sub	sp, #12
	char sd_download_version_num[1];
	uint8_t nvm_curr_version_num;

	printf("otafu_version_check: Checking for new Version ...... \n\r");
   15e34:	481f      	ldr	r0, [pc, #124]	; (15eb4 <otafu_version_check+0x84>)
   15e36:	4b20      	ldr	r3, [pc, #128]	; (15eb8 <otafu_version_check+0x88>)
   15e38:	4798      	blx	r3
	
	// 1. Erase Version.txt file from SD card
	ver_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15e3a:	4d20      	ldr	r5, [pc, #128]	; (15ebc <otafu_version_check+0x8c>)
   15e3c:	2430      	movs	r4, #48	; 0x30
   15e3e:	702c      	strb	r4, [r5, #0]
	FRESULT ret = f_unlink((char const *)ver_file_name); 
   15e40:	0028      	movs	r0, r5
   15e42:	4b1f      	ldr	r3, [pc, #124]	; (15ec0 <otafu_version_check+0x90>)
   15e44:	4798      	blx	r3
	
	// 2. Download new Version.txt into SD card
	otafu_download_operation(VERSION);
   15e46:	2001      	movs	r0, #1
   15e48:	4b1e      	ldr	r3, [pc, #120]	; (15ec4 <otafu_version_check+0x94>)
   15e4a:	4798      	blx	r3
	
	// 3. Read Version from text file (New)
	ver_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15e4c:	702c      	strb	r4, [r5, #0]
	FRESULT res_ver = f_open(&file_object,(char const *)ver_file_name,FA_READ);
   15e4e:	4c1e      	ldr	r4, [pc, #120]	; (15ec8 <otafu_version_check+0x98>)
   15e50:	2201      	movs	r2, #1
   15e52:	0029      	movs	r1, r5
   15e54:	0020      	movs	r0, r4
   15e56:	4b1d      	ldr	r3, [pc, #116]	; (15ecc <otafu_version_check+0x9c>)
   15e58:	4798      	blx	r3
	f_gets(sd_download_version_num,&file_object.fsize,&file_object);
   15e5a:	0021      	movs	r1, r4
   15e5c:	310c      	adds	r1, #12
   15e5e:	0022      	movs	r2, r4
   15e60:	a801      	add	r0, sp, #4
   15e62:	4b1b      	ldr	r3, [pc, #108]	; (15ed0 <otafu_version_check+0xa0>)
   15e64:	4798      	blx	r3
	f_close(&file_object);	
   15e66:	0020      	movs	r0, r4
   15e68:	4b1a      	ldr	r3, [pc, #104]	; (15ed4 <otafu_version_check+0xa4>)
   15e6a:	4798      	blx	r3
	
	uint8_t sd_version_num_int = atoi(sd_download_version_num);		
   15e6c:	a801      	add	r0, sp, #4
   15e6e:	4b1a      	ldr	r3, [pc, #104]	; (15ed8 <otafu_version_check+0xa8>)
   15e70:	4798      	blx	r3
   15e72:	0006      	movs	r6, r0
   15e74:	b2c7      	uxtb	r7, r0
	
	// 4. Read Version from NVM (Old)
	do
	{
		error_code = nvm_read_buffer(VERSION_ADDRESS,&nvm_curr_version_num,1);			
   15e76:	4d19      	ldr	r5, [pc, #100]	; (15edc <otafu_version_check+0xac>)
   15e78:	4c19      	ldr	r4, [pc, #100]	; (15ee0 <otafu_version_check+0xb0>)
   15e7a:	2201      	movs	r2, #1
   15e7c:	466b      	mov	r3, sp
   15e7e:	1cd9      	adds	r1, r3, #3
   15e80:	209a      	movs	r0, #154	; 0x9a
   15e82:	0200      	lsls	r0, r0, #8
   15e84:	47a8      	blx	r5
   15e86:	7020      	strb	r0, [r4, #0]
	} while (error_code == STATUS_BUSY);
   15e88:	2805      	cmp	r0, #5
   15e8a:	d0f6      	beq.n	15e7a <otafu_version_check+0x4a>
	
	// 5. If New Version > Old Version -> return version number
	if ((nvm_curr_version_num == 255) || (nvm_curr_version_num < sd_version_num_int))
   15e8c:	466b      	mov	r3, sp
   15e8e:	3303      	adds	r3, #3
   15e90:	781b      	ldrb	r3, [r3, #0]
   15e92:	2bff      	cmp	r3, #255	; 0xff
   15e94:	d001      	beq.n	15e9a <otafu_version_check+0x6a>
   15e96:	429f      	cmp	r7, r3
   15e98:	d906      	bls.n	15ea8 <otafu_version_check+0x78>
	{
		printf("otafu_version_check: Version Different, Writing new code ..... \n\r");
   15e9a:	4812      	ldr	r0, [pc, #72]	; (15ee4 <otafu_version_check+0xb4>)
   15e9c:	4b06      	ldr	r3, [pc, #24]	; (15eb8 <otafu_version_check+0x88>)
   15e9e:	4798      	blx	r3
   15ea0:	20ff      	movs	r0, #255	; 0xff
   15ea2:	4030      	ands	r0, r6
	else
	{
		printf("otafu_version_check: >> Version Same or Current version is latest\n\r");
		return 0;
	}
}
   15ea4:	b003      	add	sp, #12
   15ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("otafu_version_check: >> Version Same or Current version is latest\n\r");
   15ea8:	480f      	ldr	r0, [pc, #60]	; (15ee8 <otafu_version_check+0xb8>)
   15eaa:	4b03      	ldr	r3, [pc, #12]	; (15eb8 <otafu_version_check+0x88>)
   15eac:	4798      	blx	r3
		return 0;
   15eae:	2000      	movs	r0, #0
   15eb0:	e7f8      	b.n	15ea4 <otafu_version_check+0x74>
   15eb2:	46c0      	nop			; (mov r8, r8)
   15eb4:	0001b2b4 	.word	0x0001b2b4
   15eb8:	00016be5 	.word	0x00016be5
   15ebc:	2000016c 	.word	0x2000016c
   15ec0:	0001278d 	.word	0x0001278d
   15ec4:	00015d6d 	.word	0x00015d6d
   15ec8:	20000b20 	.word	0x20000b20
   15ecc:	00012175 	.word	0x00012175
   15ed0:	00012865 	.word	0x00012865
   15ed4:	00012775 	.word	0x00012775
   15ed8:	000169d1 	.word	0x000169d1
   15edc:	0000e625 	.word	0x0000e625
   15ee0:	20001364 	.word	0x20001364
   15ee4:	0001b2ec 	.word	0x0001b2ec
   15ee8:	0001b330 	.word	0x0001b330

00015eec <otafu_firmware_download>:


// Firmware Download > Download the new firmware file and also its crc for successful download verification
int otafu_firmware_download()
{
   15eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   15eee:	46ce      	mov	lr, r9
   15ef0:	b500      	push	{lr}
   15ef2:	b086      	sub	sp, #24
	uint32_t crc_on_server = 0;
	uint32_t crc_downloaded_in_sd_card = 0;
   15ef4:	2300      	movs	r3, #0
   15ef6:	9305      	str	r3, [sp, #20]
	printf("otafu_firmware_download: Downloading new firmware ...... \n\r");
   15ef8:	483d      	ldr	r0, [pc, #244]	; (15ff0 <otafu_firmware_download+0x104>)
   15efa:	4b3e      	ldr	r3, [pc, #248]	; (15ff4 <otafu_firmware_download+0x108>)
   15efc:	4798      	blx	r3
	
	// 1. Erase Firmware.bin file from SD card
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15efe:	4c3e      	ldr	r4, [pc, #248]	; (15ff8 <otafu_firmware_download+0x10c>)
   15f00:	2530      	movs	r5, #48	; 0x30
   15f02:	7025      	strb	r5, [r4, #0]
	FRESULT ret_firm = f_unlink((char const *)test_file_name);
   15f04:	0020      	movs	r0, r4
   15f06:	4e3d      	ldr	r6, [pc, #244]	; (15ffc <otafu_firmware_download+0x110>)
   15f08:	47b0      	blx	r6
	
	// 2. Erase crc_new.txt file from SD card
	crc_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15f0a:	483d      	ldr	r0, [pc, #244]	; (16000 <otafu_firmware_download+0x114>)
   15f0c:	7005      	strb	r5, [r0, #0]
	FRESULT ret_crc = f_unlink((char const *)crc_file_name);
   15f0e:	47b0      	blx	r6
	
	// 4. Download Firmware.bin into SD card
	otafu_download_operation(FIRMWARE);
   15f10:	2002      	movs	r0, #2
   15f12:	4e3c      	ldr	r6, [pc, #240]	; (16004 <otafu_firmware_download+0x118>)
   15f14:	47b0      	blx	r6
	
	// 3. Download Crc.txt into SD card
	otafu_download_operation(CRC);
   15f16:	2003      	movs	r0, #3
   15f18:	47b0      	blx	r6
	
	// 5. crc check on Firmware.bin file in the SD card
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15f1a:	7025      	strb	r5, [r4, #0]
	res1 = f_open(&file_object,(char const*)test_file_name,FA_READ);
   15f1c:	2201      	movs	r2, #1
   15f1e:	0021      	movs	r1, r4
   15f20:	4839      	ldr	r0, [pc, #228]	; (16008 <otafu_firmware_download+0x11c>)
   15f22:	4b3a      	ldr	r3, [pc, #232]	; (1600c <otafu_firmware_download+0x120>)
   15f24:	4798      	blx	r3
   15f26:	4b3a      	ldr	r3, [pc, #232]	; (16010 <otafu_firmware_download+0x124>)
   15f28:	7018      	strb	r0, [r3, #0]
	if (res1 != FR_OK)
   15f2a:	2800      	cmp	r0, #0
   15f2c:	d119      	bne.n	15f62 <otafu_firmware_download+0x76>
	{
		printf("sd operation: >> Opening a file failed\n\r");
		return 0;
	}
	printf("sd operation: >> File open success\n\r");
   15f2e:	4839      	ldr	r0, [pc, #228]	; (16014 <otafu_firmware_download+0x128>)
   15f30:	4b30      	ldr	r3, [pc, #192]	; (15ff4 <otafu_firmware_download+0x108>)
   15f32:	4798      	blx	r3
	
	uint32_t bytes_read = 0;
   15f34:	2300      	movs	r3, #0
   15f36:	9304      	str	r3, [sp, #16]
	uint32_t num_pages=0;
	uint32_t off_set=0;
	uint32_t fw_size= f_size(&file_object);
   15f38:	4b33      	ldr	r3, [pc, #204]	; (16008 <otafu_firmware_download+0x11c>)
   15f3a:	68db      	ldr	r3, [r3, #12]
	uint32_t rem = fw_size%NVMCTRL_PAGE_SIZE;
   15f3c:	223f      	movs	r2, #63	; 0x3f
   15f3e:	401a      	ands	r2, r3
   15f40:	4691      	mov	r9, r2
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
	}
	else
	{
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE);
   15f42:	099f      	lsrs	r7, r3, #6
	if(rem!=0)
   15f44:	2a00      	cmp	r2, #0
   15f46:	d004      	beq.n	15f52 <otafu_firmware_download+0x66>
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
   15f48:	003a      	movs	r2, r7
   15f4a:	3701      	adds	r7, #1
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
   15f4c:	0192      	lsls	r2, r2, #6
   15f4e:	1a9a      	subs	r2, r3, r2
   15f50:	4691      	mov	r9, r2
		off_set = 0;
	}
	
	if (fw_size != 0)
   15f52:	2b00      	cmp	r3, #0
   15f54:	d025      	beq.n	15fa2 <otafu_firmware_download+0xb6>
	{
		for(uint16_t j=0;j<num_pages;j++)
   15f56:	2f00      	cmp	r7, #0
   15f58:	d023      	beq.n	15fa2 <otafu_firmware_download+0xb6>
   15f5a:	2500      	movs	r5, #0
   15f5c:	2400      	movs	r4, #0
		{
			f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
   15f5e:	4e2e      	ldr	r6, [pc, #184]	; (16018 <otafu_firmware_download+0x12c>)
   15f60:	e00e      	b.n	15f80 <otafu_firmware_download+0x94>
		printf("sd operation: >> Opening a file failed\n\r");
   15f62:	482e      	ldr	r0, [pc, #184]	; (1601c <otafu_firmware_download+0x130>)
   15f64:	4b23      	ldr	r3, [pc, #140]	; (15ff4 <otafu_firmware_download+0x108>)
   15f66:	4798      	blx	r3
		return 0;
   15f68:	2000      	movs	r0, #0
   15f6a:	e03c      	b.n	15fe6 <otafu_firmware_download+0xfa>
			{
				crc32_recalculate(page_buffer,off_set,&crc_downloaded_in_sd_card);
			}
			else
			{
				crc32_recalculate(page_buffer,NVMCTRL_PAGE_SIZE,&crc_downloaded_in_sd_card);
   15f6c:	aa05      	add	r2, sp, #20
   15f6e:	2140      	movs	r1, #64	; 0x40
   15f70:	482b      	ldr	r0, [pc, #172]	; (16020 <otafu_firmware_download+0x134>)
   15f72:	4b2c      	ldr	r3, [pc, #176]	; (16024 <otafu_firmware_download+0x138>)
   15f74:	4798      	blx	r3
		for(uint16_t j=0;j<num_pages;j++)
   15f76:	3401      	adds	r4, #1
   15f78:	b2a4      	uxth	r4, r4
   15f7a:	0025      	movs	r5, r4
   15f7c:	42a7      	cmp	r7, r4
   15f7e:	d910      	bls.n	15fa2 <otafu_firmware_download+0xb6>
			f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
   15f80:	ab04      	add	r3, sp, #16
   15f82:	2240      	movs	r2, #64	; 0x40
   15f84:	4926      	ldr	r1, [pc, #152]	; (16020 <otafu_firmware_download+0x134>)
   15f86:	4820      	ldr	r0, [pc, #128]	; (16008 <otafu_firmware_download+0x11c>)
   15f88:	47b0      	blx	r6
			if((j==(num_pages-1)) && off_set!=0)
   15f8a:	1e7b      	subs	r3, r7, #1
   15f8c:	42ab      	cmp	r3, r5
   15f8e:	d1ed      	bne.n	15f6c <otafu_firmware_download+0x80>
   15f90:	464b      	mov	r3, r9
   15f92:	2b00      	cmp	r3, #0
   15f94:	d0ea      	beq.n	15f6c <otafu_firmware_download+0x80>
				crc32_recalculate(page_buffer,off_set,&crc_downloaded_in_sd_card);
   15f96:	aa05      	add	r2, sp, #20
   15f98:	4649      	mov	r1, r9
   15f9a:	4821      	ldr	r0, [pc, #132]	; (16020 <otafu_firmware_download+0x134>)
   15f9c:	4b21      	ldr	r3, [pc, #132]	; (16024 <otafu_firmware_download+0x138>)
   15f9e:	4798      	blx	r3
   15fa0:	e7e9      	b.n	15f76 <otafu_firmware_download+0x8a>
			}
		}
	}
	f_close(&file_object);
   15fa2:	4c19      	ldr	r4, [pc, #100]	; (16008 <otafu_firmware_download+0x11c>)
   15fa4:	0020      	movs	r0, r4
   15fa6:	4e20      	ldr	r6, [pc, #128]	; (16028 <otafu_firmware_download+0x13c>)
   15fa8:	47b0      	blx	r6
	printf("CRC_DOWN = %u\n\r", (uint32_t*)crc_downloaded_in_sd_card);
   15faa:	9905      	ldr	r1, [sp, #20]
   15fac:	481f      	ldr	r0, [pc, #124]	; (1602c <otafu_firmware_download+0x140>)
   15fae:	4d11      	ldr	r5, [pc, #68]	; (15ff4 <otafu_firmware_download+0x108>)
   15fb0:	47a8      	blx	r5
	
	// 6. crc on Crc.txt 
	char sd_download_crc[10];
	
	crc_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15fb2:	4913      	ldr	r1, [pc, #76]	; (16000 <otafu_firmware_download+0x114>)
   15fb4:	2330      	movs	r3, #48	; 0x30
   15fb6:	700b      	strb	r3, [r1, #0]
	FRESULT res_crc = f_open(&file_object,(char const *)crc_file_name,FA_READ);
   15fb8:	2201      	movs	r2, #1
   15fba:	0020      	movs	r0, r4
   15fbc:	4b13      	ldr	r3, [pc, #76]	; (1600c <otafu_firmware_download+0x120>)
   15fbe:	4798      	blx	r3
	f_gets(sd_download_crc,&file_object.fsize,&file_object);
   15fc0:	0021      	movs	r1, r4
   15fc2:	310c      	adds	r1, #12
   15fc4:	0022      	movs	r2, r4
   15fc6:	a801      	add	r0, sp, #4
   15fc8:	4b19      	ldr	r3, [pc, #100]	; (16030 <otafu_firmware_download+0x144>)
   15fca:	4798      	blx	r3
	f_close(&file_object);	
   15fcc:	0020      	movs	r0, r4
   15fce:	47b0      	blx	r6
	
	crc_on_server = atoi(sd_download_crc);
   15fd0:	a801      	add	r0, sp, #4
   15fd2:	4b18      	ldr	r3, [pc, #96]	; (16034 <otafu_firmware_download+0x148>)
   15fd4:	4798      	blx	r3
   15fd6:	0004      	movs	r4, r0
	printf("CRC_SERVER = %u\n\r", (uint32_t*)crc_on_server);
   15fd8:	0001      	movs	r1, r0
   15fda:	4817      	ldr	r0, [pc, #92]	; (16038 <otafu_firmware_download+0x14c>)
   15fdc:	47a8      	blx	r5
	
	// 7. Compare crc with crc from the
	if (crc_on_server == crc_downloaded_in_sd_card)	
   15fde:	9b05      	ldr	r3, [sp, #20]
   15fe0:	1b18      	subs	r0, r3, r4
		return 0;
   15fe2:	4243      	negs	r3, r0
   15fe4:	4158      	adcs	r0, r3
		return 1; 
	else
		return 0;
}
   15fe6:	b006      	add	sp, #24
   15fe8:	bc04      	pop	{r2}
   15fea:	4691      	mov	r9, r2
   15fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15fee:	46c0      	nop			; (mov r8, r8)
   15ff0:	0001b200 	.word	0x0001b200
   15ff4:	00016be5 	.word	0x00016be5
   15ff8:	2000015c 	.word	0x2000015c
   15ffc:	0001278d 	.word	0x0001278d
   16000:	20000010 	.word	0x20000010
   16004:	00015d6d 	.word	0x00015d6d
   16008:	20000b20 	.word	0x20000b20
   1600c:	00012175 	.word	0x00012175
   16010:	20001194 	.word	0x20001194
   16014:	0001b268 	.word	0x0001b268
   16018:	000122fd 	.word	0x000122fd
   1601c:	0001b23c 	.word	0x0001b23c
   16020:	20001318 	.word	0x20001318
   16024:	0000e071 	.word	0x0000e071
   16028:	00012775 	.word	0x00012775
   1602c:	0001b290 	.word	0x0001b290
   16030:	00012865 	.word	0x00012865
   16034:	000169d1 	.word	0x000169d1
   16038:	0001b2a0 	.word	0x0001b2a0

0001603c <otafu_download>:

/** 
************************ MAIN OTAFU LOGIC *****************************
*/ 
int otafu_download()
{
   1603c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1603e:	b083      	sub	sp, #12
	int new_ver_num = 0;
	char user_reponse;
	int download_attempts = 0;

	printf("otafu_download: Downloading update version ..... \n\r");
   16040:	4822      	ldr	r0, [pc, #136]	; (160cc <otafu_download+0x90>)
   16042:	4b23      	ldr	r3, [pc, #140]	; (160d0 <otafu_download+0x94>)
   16044:	4798      	blx	r3
 	
 	if( (new_ver_num = otafu_version_check()) == 0)
   16046:	4b23      	ldr	r3, [pc, #140]	; (160d4 <otafu_download+0x98>)
   16048:	4798      	blx	r3
   1604a:	1e04      	subs	r4, r0, #0
   1604c:	d01a      	beq.n	16084 <otafu_download+0x48>
		 //Disable socket for HTTP Transfer
		 socketDeinit();
 		return 0;
 	}
		
 	printf("otafu_download: New Firmware Available, version: %d \n\r",new_ver_num);
   1604e:	0001      	movs	r1, r0
   16050:	4821      	ldr	r0, [pc, #132]	; (160d8 <otafu_download+0x9c>)
   16052:	4b1f      	ldr	r3, [pc, #124]	; (160d0 <otafu_download+0x94>)
   16054:	4798      	blx	r3
 	
 	USER_INPUT:
 	
 	printf("Would you like to download the new version: (y/n) > ");
   16056:	4e21      	ldr	r6, [pc, #132]	; (160dc <otafu_download+0xa0>)
   16058:	4f1d      	ldr	r7, [pc, #116]	; (160d0 <otafu_download+0x94>)
 	scanf("%c",&user_reponse);
   1605a:	4d21      	ldr	r5, [pc, #132]	; (160e0 <otafu_download+0xa4>)
 	printf("Would you like to download the new version: (y/n) > ");
   1605c:	0030      	movs	r0, r6
   1605e:	47b8      	blx	r7
 	scanf("%c",&user_reponse);
   16060:	466b      	mov	r3, sp
   16062:	1ddc      	adds	r4, r3, #7
   16064:	0021      	movs	r1, r4
   16066:	0028      	movs	r0, r5
   16068:	4b1e      	ldr	r3, [pc, #120]	; (160e4 <otafu_download+0xa8>)
   1606a:	4798      	blx	r3
 	printf("%c\n\r",user_reponse);
   1606c:	7821      	ldrb	r1, [r4, #0]
   1606e:	481e      	ldr	r0, [pc, #120]	; (160e8 <otafu_download+0xac>)
   16070:	47b8      	blx	r7
	 
 	if (user_reponse == 'n')
   16072:	7823      	ldrb	r3, [r4, #0]
   16074:	2b6e      	cmp	r3, #110	; 0x6e
   16076:	d00d      	beq.n	16094 <otafu_download+0x58>
 	{
 		printf("otafu_download: >> Resuming application\n\r");
 		return 0;
 	}
 	else if (user_reponse == 'y')
   16078:	2b79      	cmp	r3, #121	; 0x79
   1607a:	d010      	beq.n	1609e <otafu_download+0x62>
		 socketDeinit();
 		return 0;
 	}
	else
	{
		printf("invalid response, please try again\n\r");
   1607c:	481b      	ldr	r0, [pc, #108]	; (160ec <otafu_download+0xb0>)
   1607e:	4b14      	ldr	r3, [pc, #80]	; (160d0 <otafu_download+0x94>)
   16080:	4798      	blx	r3
		goto USER_INPUT;
   16082:	e7eb      	b.n	1605c <otafu_download+0x20>
 		printf("otafu_download: >> Resuming application\n\r");
   16084:	481a      	ldr	r0, [pc, #104]	; (160f0 <otafu_download+0xb4>)
   16086:	4b12      	ldr	r3, [pc, #72]	; (160d0 <otafu_download+0x94>)
   16088:	4798      	blx	r3
		 socketDeinit();
   1608a:	4b1a      	ldr	r3, [pc, #104]	; (160f4 <otafu_download+0xb8>)
   1608c:	4798      	blx	r3
	}
}
   1608e:	0020      	movs	r0, r4
   16090:	b003      	add	sp, #12
   16092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 		printf("otafu_download: >> Resuming application\n\r");
   16094:	4816      	ldr	r0, [pc, #88]	; (160f0 <otafu_download+0xb4>)
   16096:	4b0e      	ldr	r3, [pc, #56]	; (160d0 <otafu_download+0x94>)
   16098:	4798      	blx	r3
 		return 0;
   1609a:	2400      	movs	r4, #0
   1609c:	e7f7      	b.n	1608e <otafu_download+0x52>
   1609e:	2500      	movs	r5, #0
 			if (otafu_firmware_download() == 0)
   160a0:	4e15      	ldr	r6, [pc, #84]	; (160f8 <otafu_download+0xbc>)
 				printf("otafu_download: attempt [%d] > Downloading failed, trying again \n\r",download_attempts);
   160a2:	4f0b      	ldr	r7, [pc, #44]	; (160d0 <otafu_download+0x94>)
 			if (otafu_firmware_download() == 0)
   160a4:	47b0      	blx	r6
   160a6:	1e04      	subs	r4, r0, #0
   160a8:	d10d      	bne.n	160c6 <otafu_download+0x8a>
 				printf("otafu_download: attempt [%d] > Downloading failed, trying again \n\r",download_attempts);
   160aa:	0029      	movs	r1, r5
   160ac:	4813      	ldr	r0, [pc, #76]	; (160fc <otafu_download+0xc0>)
   160ae:	47b8      	blx	r7
 		for (download_attempts = 0;download_attempts < 3;download_attempts++)
   160b0:	3501      	adds	r5, #1
   160b2:	2d03      	cmp	r5, #3
   160b4:	d1f6      	bne.n	160a4 <otafu_download+0x68>
 		printf("otafu_download: >> Downloading failed even after multiple attempts\n\r");
   160b6:	4812      	ldr	r0, [pc, #72]	; (16100 <otafu_download+0xc4>)
   160b8:	4d05      	ldr	r5, [pc, #20]	; (160d0 <otafu_download+0x94>)
   160ba:	47a8      	blx	r5
 		printf("otafu_download: >> Resuming application for now\n\r");
   160bc:	4811      	ldr	r0, [pc, #68]	; (16104 <otafu_download+0xc8>)
   160be:	47a8      	blx	r5
		 socketDeinit();
   160c0:	4b0c      	ldr	r3, [pc, #48]	; (160f4 <otafu_download+0xb8>)
   160c2:	4798      	blx	r3
 		return 0;
   160c4:	e7e3      	b.n	1608e <otafu_download+0x52>
 				return 1;
   160c6:	2401      	movs	r4, #1
   160c8:	e7e1      	b.n	1608e <otafu_download+0x52>
   160ca:	46c0      	nop			; (mov r8, r8)
   160cc:	0001afa4 	.word	0x0001afa4
   160d0:	00016be5 	.word	0x00016be5
   160d4:	00015e31 	.word	0x00015e31
   160d8:	0001b004 	.word	0x0001b004
   160dc:	0001b03c 	.word	0x0001b03c
   160e0:	0001b074 	.word	0x0001b074
   160e4:	00016d99 	.word	0x00016d99
   160e8:	0001b078 	.word	0x0001b078
   160ec:	0001b140 	.word	0x0001b140
   160f0:	0001afd8 	.word	0x0001afd8
   160f4:	0000dab5 	.word	0x0000dab5
   160f8:	00015eed 	.word	0x00015eed
   160fc:	0001b080 	.word	0x0001b080
   16100:	0001b0c4 	.word	0x0001b0c4
   16104:	0001b10c 	.word	0x0001b10c

00016108 <otafu>:

// OTAFU trigger check > MQTT request
void otafu()
{
   16108:	b570      	push	{r4, r5, r6, lr}
   1610a:	b082      	sub	sp, #8
	if(otafu_download() == 0)   
   1610c:	4b14      	ldr	r3, [pc, #80]	; (16160 <otafu+0x58>)
   1610e:	4798      	blx	r3
   16110:	2800      	cmp	r0, #0
   16112:	d101      	bne.n	16118 <otafu+0x10>
		} while (error_code == STATUS_BUSY);
				
		// 2. jump to bootloader // Software reset
		NVIC_SystemReset();		
	}			
}
   16114:	b002      	add	sp, #8
   16116:	bd70      	pop	{r4, r5, r6, pc}
		printf(">> New Firmware Downloaded \n\r Device Reseting .... \n\r");
   16118:	4812      	ldr	r0, [pc, #72]	; (16164 <otafu+0x5c>)
   1611a:	4b13      	ldr	r3, [pc, #76]	; (16168 <otafu+0x60>)
   1611c:	4798      	blx	r3
		socketDeinit();
   1611e:	4b13      	ldr	r3, [pc, #76]	; (1616c <otafu+0x64>)
   16120:	4798      	blx	r3
		uint8_t otaflag = 1;
   16122:	2201      	movs	r2, #1
   16124:	466b      	mov	r3, sp
   16126:	71da      	strb	r2, [r3, #7]
			error_code = nvm_erase_row(OTAFU_ADDRESS);
   16128:	269b      	movs	r6, #155	; 0x9b
   1612a:	0236      	lsls	r6, r6, #8
   1612c:	4d10      	ldr	r5, [pc, #64]	; (16170 <otafu+0x68>)
   1612e:	4c11      	ldr	r4, [pc, #68]	; (16174 <otafu+0x6c>)
   16130:	0030      	movs	r0, r6
   16132:	47a8      	blx	r5
   16134:	7020      	strb	r0, [r4, #0]
		} while (error_code == STATUS_BUSY);
   16136:	2805      	cmp	r0, #5
   16138:	d0fa      	beq.n	16130 <otafu+0x28>
			error_code = nvm_write_buffer(OTAFU_ADDRESS,&otaflag,1);
   1613a:	4d0f      	ldr	r5, [pc, #60]	; (16178 <otafu+0x70>)
   1613c:	4c0d      	ldr	r4, [pc, #52]	; (16174 <otafu+0x6c>)
   1613e:	2201      	movs	r2, #1
   16140:	466b      	mov	r3, sp
   16142:	1dd9      	adds	r1, r3, #7
   16144:	209b      	movs	r0, #155	; 0x9b
   16146:	0200      	lsls	r0, r0, #8
   16148:	47a8      	blx	r5
   1614a:	7020      	strb	r0, [r4, #0]
		} while (error_code == STATUS_BUSY);
   1614c:	2805      	cmp	r0, #5
   1614e:	d0f6      	beq.n	1613e <otafu+0x36>
  __ASM volatile ("dsb");
   16150:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   16154:	4a09      	ldr	r2, [pc, #36]	; (1617c <otafu+0x74>)
   16156:	4b0a      	ldr	r3, [pc, #40]	; (16180 <otafu+0x78>)
   16158:	60da      	str	r2, [r3, #12]
   1615a:	f3bf 8f4f 	dsb	sy
   1615e:	e7fe      	b.n	1615e <otafu+0x56>
   16160:	0001603d 	.word	0x0001603d
   16164:	0001af6c 	.word	0x0001af6c
   16168:	00016be5 	.word	0x00016be5
   1616c:	0000dab5 	.word	0x0000dab5
   16170:	0000e691 	.word	0x0000e691
   16174:	20001364 	.word	0x20001364
   16178:	0000e57d 	.word	0x0000e57d
   1617c:	05fa0004 	.word	0x05fa0004
   16180:	e000ed00 	.word	0xe000ed00

00016184 <main>:
/////////////////////////////////////////////////////////////////////////////
///* ...... MAIN ........ *
////////////////////////////////////////////////////////////////////////////

int main(void)
{
   16184:	b5f0      	push	{r4, r5, r6, r7, lr}
   16186:	46c6      	mov	lr, r8
   16188:	b500      	push	{lr}
   1618a:	b098      	sub	sp, #96	; 0x60
	down_state = NOT_READY;
   1618c:	2400      	movs	r4, #0
   1618e:	2600      	movs	r6, #0
   16190:	4bd4      	ldr	r3, [pc, #848]	; (164e4 <main+0x360>)
   16192:	701c      	strb	r4, [r3, #0]
	/** INITIALIZATING THE BOARD AND PERIPHERALS */
	tstrWifiInitParam param;
	int8_t ret;
	init_state();
	
	system_init();						/* Initialize the board. */	
   16194:	4bd4      	ldr	r3, [pc, #848]	; (164e8 <main+0x364>)
   16196:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   16198:	aa02      	add	r2, sp, #8
   1619a:	2380      	movs	r3, #128	; 0x80
   1619c:	05db      	lsls	r3, r3, #23
   1619e:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   161a0:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
   161a2:	23ff      	movs	r3, #255	; 0xff
   161a4:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
   161a6:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   161a8:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   161aa:	2501      	movs	r5, #1
   161ac:	3bdb      	subs	r3, #219	; 0xdb
   161ae:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
   161b0:	3301      	adds	r3, #1
   161b2:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
   161b4:	3301      	adds	r3, #1
   161b6:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
   161b8:	3301      	adds	r3, #1
   161ba:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
   161bc:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   161be:	3305      	adds	r3, #5
   161c0:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
   161c2:	3301      	adds	r3, #1
   161c4:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   161c6:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   161c8:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   161ca:	2300      	movs	r3, #0
   161cc:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   161ce:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   161d0:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   161d2:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
   161d4:	2313      	movs	r3, #19
   161d6:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   161d8:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   161da:	23c4      	movs	r3, #196	; 0xc4
   161dc:	039b      	lsls	r3, r3, #14
   161de:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   161e0:	2301      	movs	r3, #1
   161e2:	425b      	negs	r3, r3
   161e4:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   161e6:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   161e8:	4bc0      	ldr	r3, [pc, #768]	; (164ec <main+0x368>)
   161ea:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   161ec:	4bc0      	ldr	r3, [pc, #768]	; (164f0 <main+0x36c>)
   161ee:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   161f0:	23e1      	movs	r3, #225	; 0xe1
   161f2:	025b      	lsls	r3, r3, #9
   161f4:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
   161f6:	4cbf      	ldr	r4, [pc, #764]	; (164f4 <main+0x370>)
   161f8:	4bbf      	ldr	r3, [pc, #764]	; (164f8 <main+0x374>)
   161fa:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   161fc:	49bf      	ldr	r1, [pc, #764]	; (164fc <main+0x378>)
   161fe:	4bc0      	ldr	r3, [pc, #768]	; (16500 <main+0x37c>)
   16200:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   16202:	49c0      	ldr	r1, [pc, #768]	; (16504 <main+0x380>)
   16204:	4bc0      	ldr	r3, [pc, #768]	; (16508 <main+0x384>)
   16206:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
   16208:	49c0      	ldr	r1, [pc, #768]	; (1650c <main+0x388>)
   1620a:	0020      	movs	r0, r4
   1620c:	4bc0      	ldr	r3, [pc, #768]	; (16510 <main+0x38c>)
   1620e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   16210:	4fc0      	ldr	r7, [pc, #768]	; (16514 <main+0x390>)
   16212:	683b      	ldr	r3, [r7, #0]
   16214:	6898      	ldr	r0, [r3, #8]
   16216:	2100      	movs	r1, #0
   16218:	4ebf      	ldr	r6, [pc, #764]	; (16518 <main+0x394>)
   1621a:	47b0      	blx	r6
	setbuf(stdin, NULL);
   1621c:	683b      	ldr	r3, [r7, #0]
   1621e:	6858      	ldr	r0, [r3, #4]
   16220:	2100      	movs	r1, #0
   16222:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   16224:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   16226:	0030      	movs	r0, r6
   16228:	4bbc      	ldr	r3, [pc, #752]	; (1651c <main+0x398>)
   1622a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1622c:	231f      	movs	r3, #31
   1622e:	4018      	ands	r0, r3
   16230:	4085      	lsls	r5, r0
   16232:	4bbb      	ldr	r3, [pc, #748]	; (16520 <main+0x39c>)
   16234:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   16236:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
   16238:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   1623a:	2a00      	cmp	r2, #0
   1623c:	d1fc      	bne.n	16238 <main+0xb4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1623e:	6833      	ldr	r3, [r6, #0]
   16240:	3202      	adds	r2, #2
   16242:	4313      	orrs	r3, r2
   16244:	6033      	str	r3, [r6, #0]
	configure_console();				/* Initialize the UART console. */
	
	printf(STRING_HEADER);
   16246:	48b7      	ldr	r0, [pc, #732]	; (16524 <main+0x3a0>)
   16248:	4cb7      	ldr	r4, [pc, #732]	; (16528 <main+0x3a4>)
   1624a:	47a0      	blx	r4
	printf("\r\nmain: Initializing Board and peripherals for application...... \r\n\r\n");
   1624c:	48b7      	ldr	r0, [pc, #732]	; (1652c <main+0x3a8>)
   1624e:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
   16250:	a802      	add	r0, sp, #8
   16252:	4bb7      	ldr	r3, [pc, #732]	; (16530 <main+0x3ac>)
   16254:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   16256:	4db7      	ldr	r5, [pc, #732]	; (16534 <main+0x3b0>)
   16258:	a902      	add	r1, sp, #8
   1625a:	0028      	movs	r0, r5
   1625c:	4bb6      	ldr	r3, [pc, #728]	; (16538 <main+0x3b4>)
   1625e:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   16260:	0028      	movs	r0, r5
   16262:	4bb6      	ldr	r3, [pc, #728]	; (1653c <main+0x3b8>)
   16264:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   16266:	4cb6      	ldr	r4, [pc, #728]	; (16540 <main+0x3bc>)
   16268:	0020      	movs	r0, r4
   1626a:	4bb6      	ldr	r3, [pc, #728]	; (16544 <main+0x3c0>)
   1626c:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1626e:	4bb6      	ldr	r3, [pc, #728]	; (16548 <main+0x3c4>)
   16270:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   16272:	6065      	str	r5, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16274:	0021      	movs	r1, r4
   16276:	48b5      	ldr	r0, [pc, #724]	; (1654c <main+0x3c8>)
   16278:	4bb5      	ldr	r3, [pc, #724]	; (16550 <main+0x3cc>)
   1627a:	4798      	blx	r3
   1627c:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   1627e:	da03      	bge.n	16288 <main+0x104>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16280:	48b4      	ldr	r0, [pc, #720]	; (16554 <main+0x3d0>)
   16282:	4bb5      	ldr	r3, [pc, #724]	; (16558 <main+0x3d4>)
   16284:	4798      	blx	r3
   16286:	e7fe      	b.n	16286 <main+0x102>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   16288:	49b4      	ldr	r1, [pc, #720]	; (1655c <main+0x3d8>)
   1628a:	48b0      	ldr	r0, [pc, #704]	; (1654c <main+0x3c8>)
   1628c:	4bb4      	ldr	r3, [pc, #720]	; (16560 <main+0x3dc>)
   1628e:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   16290:	4cb4      	ldr	r4, [pc, #720]	; (16564 <main+0x3e0>)
   16292:	0020      	movs	r0, r4
   16294:	4bb4      	ldr	r3, [pc, #720]	; (16568 <main+0x3e4>)
   16296:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   16298:	4bb4      	ldr	r3, [pc, #720]	; (1656c <main+0x3e8>)
   1629a:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1629c:	2380      	movs	r3, #128	; 0x80
   1629e:	009b      	lsls	r3, r3, #2
   162a0:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   162a2:	4ab3      	ldr	r2, [pc, #716]	; (16570 <main+0x3ec>)
   162a4:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   162a6:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   162a8:	4bb2      	ldr	r3, [pc, #712]	; (16574 <main+0x3f0>)
   162aa:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
   162ac:	4bb2      	ldr	r3, [pc, #712]	; (16578 <main+0x3f4>)
   162ae:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   162b0:	0021      	movs	r1, r4
   162b2:	48b2      	ldr	r0, [pc, #712]	; (1657c <main+0x3f8>)
   162b4:	4bb2      	ldr	r3, [pc, #712]	; (16580 <main+0x3fc>)
   162b6:	4798      	blx	r3
   162b8:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   162ba:	da03      	bge.n	162c4 <main+0x140>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   162bc:	48b1      	ldr	r0, [pc, #708]	; (16584 <main+0x400>)
   162be:	4ba6      	ldr	r3, [pc, #664]	; (16558 <main+0x3d4>)
   162c0:	4798      	blx	r3
   162c2:	e7fe      	b.n	162c2 <main+0x13e>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   162c4:	49b0      	ldr	r1, [pc, #704]	; (16588 <main+0x404>)
   162c6:	48ad      	ldr	r0, [pc, #692]	; (1657c <main+0x3f8>)
   162c8:	4bb0      	ldr	r3, [pc, #704]	; (1658c <main+0x408>)
   162ca:	4798      	blx	r3
   162cc:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   162ce:	da03      	bge.n	162d8 <main+0x154>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   162d0:	48af      	ldr	r0, [pc, #700]	; (16590 <main+0x40c>)
   162d2:	4ba1      	ldr	r3, [pc, #644]	; (16558 <main+0x3d4>)
   162d4:	4798      	blx	r3
   162d6:	e7fe      	b.n	162d6 <main+0x152>
//	NVIC_SystemReset();					// Reset testing
	
 	configure_timer();					/* Initialize the Timer. */	
 	configure_http_client();			/* Initialize the HTTP client service. */
 	configure_mqtt();					/* Initialize the MQTT service. */
 	nm_bsp_init();						/* Initialize the BSP. */
   162d8:	4bae      	ldr	r3, [pc, #696]	; (16594 <main+0x410>)
   162da:	4798      	blx	r3
 	
 	delay_init();						/* Initialize delay */
   162dc:	4bae      	ldr	r3, [pc, #696]	; (16598 <main+0x414>)
   162de:	4798      	blx	r3
	sd_mmc_init();
   162e0:	4bae      	ldr	r3, [pc, #696]	; (1659c <main+0x418>)
   162e2:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");
   162e4:	48ae      	ldr	r0, [pc, #696]	; (165a0 <main+0x41c>)
   162e6:	4b90      	ldr	r3, [pc, #576]	; (16528 <main+0x3a4>)
   162e8:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
   162ea:	4dae      	ldr	r5, [pc, #696]	; (165a4 <main+0x420>)
				printf("init_storage: SD Card install failed.\r\n");
   162ec:	4c8e      	ldr	r4, [pc, #568]	; (16528 <main+0x3a4>)
			status = sd_mmc_test_unit_ready(0);
   162ee:	2000      	movs	r0, #0
   162f0:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
   162f2:	2801      	cmp	r0, #1
   162f4:	d109      	bne.n	1630a <main+0x186>
				printf("init_storage: SD Card install failed.\r\n");
   162f6:	48ac      	ldr	r0, [pc, #688]	; (165a8 <main+0x424>)
   162f8:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
   162fa:	48ac      	ldr	r0, [pc, #688]	; (165ac <main+0x428>)
   162fc:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   162fe:	4eac      	ldr	r6, [pc, #688]	; (165b0 <main+0x42c>)
   16300:	2000      	movs	r0, #0
   16302:	47b0      	blx	r6
   16304:	2802      	cmp	r0, #2
   16306:	d1fb      	bne.n	16300 <main+0x17c>
   16308:	e7f1      	b.n	162ee <main+0x16a>
		} while (CTRL_GOOD != status);
   1630a:	2800      	cmp	r0, #0
   1630c:	d1ef      	bne.n	162ee <main+0x16a>
		printf("init_storage: mounting SD card...\r\n");
   1630e:	48a9      	ldr	r0, [pc, #676]	; (165b4 <main+0x430>)
   16310:	4b85      	ldr	r3, [pc, #532]	; (16528 <main+0x3a4>)
   16312:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   16314:	4ca8      	ldr	r4, [pc, #672]	; (165b8 <main+0x434>)
   16316:	228c      	movs	r2, #140	; 0x8c
   16318:	0092      	lsls	r2, r2, #2
   1631a:	2100      	movs	r1, #0
   1631c:	0020      	movs	r0, r4
   1631e:	4ba7      	ldr	r3, [pc, #668]	; (165bc <main+0x438>)
   16320:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   16322:	0021      	movs	r1, r4
   16324:	2000      	movs	r0, #0
   16326:	4ba6      	ldr	r3, [pc, #664]	; (165c0 <main+0x43c>)
   16328:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   1632a:	280b      	cmp	r0, #11
   1632c:	d119      	bne.n	16362 <main+0x1de>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
   1632e:	210b      	movs	r1, #11
   16330:	48a4      	ldr	r0, [pc, #656]	; (165c4 <main+0x440>)
   16332:	4b89      	ldr	r3, [pc, #548]	; (16558 <main+0x3d4>)
   16334:	4798      	blx	r3
 	
 	init_storage();							/* Initialize SD/MMC storage. */
 	
 	configure_extint_channel();				/*Initialize BUTTON 0 as an external interrupt*/
   16336:	4ba4      	ldr	r3, [pc, #656]	; (165c8 <main+0x444>)
   16338:	4798      	blx	r3
 	configure_extint_callbacks();
   1633a:	4ba4      	ldr	r3, [pc, #656]	; (165cc <main+0x448>)
   1633c:	4798      	blx	r3
 
 	configure_nvm();						/*Initialize NVM */
   1633e:	4ba4      	ldr	r3, [pc, #656]	; (165d0 <main+0x44c>)
   16340:	4798      	blx	r3
 
 	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));		// Initialize Wi-Fi parameters structure. 
   16342:	2218      	movs	r2, #24
   16344:	2100      	movs	r1, #0
   16346:	a812      	add	r0, sp, #72	; 0x48
   16348:	4b9c      	ldr	r3, [pc, #624]	; (165bc <main+0x438>)
   1634a:	4798      	blx	r3
 
	param.pfAppWifiCb = wifi_cb;									// Initialize Wi-Fi driver with data and status callbacks. 
   1634c:	4ba1      	ldr	r3, [pc, #644]	; (165d4 <main+0x450>)
   1634e:	9312      	str	r3, [sp, #72]	; 0x48
	ret = m2m_wifi_init(&param);
   16350:	a812      	add	r0, sp, #72	; 0x48
   16352:	4ba1      	ldr	r3, [pc, #644]	; (165d8 <main+0x454>)
   16354:	4798      	blx	r3
   16356:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) 
   16358:	d00a      	beq.n	16370 <main+0x1ec>
	{
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1635a:	48a0      	ldr	r0, [pc, #640]	; (165dc <main+0x458>)
   1635c:	4b7e      	ldr	r3, [pc, #504]	; (16558 <main+0x3d4>)
   1635e:	4798      	blx	r3
   16360:	e7fe      	b.n	16360 <main+0x1dc>
		printf("init_storage: SD card mount OK.\r\n");
   16362:	489f      	ldr	r0, [pc, #636]	; (165e0 <main+0x45c>)
   16364:	4b70      	ldr	r3, [pc, #448]	; (16528 <main+0x3a4>)
   16366:	4798      	blx	r3
		add_state(STORAGE_READY);
   16368:	2001      	movs	r0, #1
   1636a:	4b9e      	ldr	r3, [pc, #632]	; (165e4 <main+0x460>)
   1636c:	4798      	blx	r3
   1636e:	e7e2      	b.n	16336 <main+0x1b2>
   16370:	2000      	movs	r0, #0
   16372:	4b9d      	ldr	r3, [pc, #628]	; (165e8 <main+0x464>)
   16374:	4798      	blx	r3
   16376:	4b9d      	ldr	r3, [pc, #628]	; (165ec <main+0x468>)
   16378:	7a1b      	ldrb	r3, [r3, #8]
   1637a:	b2db      	uxtb	r3, r3
   1637c:	40d8      	lsrs	r0, r3
		while (1);
	}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
   1637e:	21fa      	movs	r1, #250	; 0xfa
   16380:	0089      	lsls	r1, r1, #2
   16382:	4b9b      	ldr	r3, [pc, #620]	; (165f0 <main+0x46c>)
   16384:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   16386:	3801      	subs	r0, #1
   16388:	4b9a      	ldr	r3, [pc, #616]	; (165f4 <main+0x470>)
   1638a:	4298      	cmp	r0, r3
   1638c:	d900      	bls.n	16390 <main+0x20c>
   1638e:	e0a4      	b.n	164da <main+0x356>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   16390:	4a99      	ldr	r2, [pc, #612]	; (165f8 <main+0x474>)
   16392:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
   16394:	4899      	ldr	r0, [pc, #612]	; (165fc <main+0x478>)
   16396:	6a03      	ldr	r3, [r0, #32]
   16398:	021b      	lsls	r3, r3, #8
   1639a:	0a1b      	lsrs	r3, r3, #8
   1639c:	21c0      	movs	r1, #192	; 0xc0
   1639e:	0609      	lsls	r1, r1, #24
   163a0:	430b      	orrs	r3, r1
   163a2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   163a4:	2400      	movs	r4, #0
   163a6:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   163a8:	2307      	movs	r3, #7
   163aa:	6013      	str	r3, [r2, #0]
	{
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}
	
	printf("\n\rmain: >> Board and peripherals initialized\n\r");
   163ac:	4894      	ldr	r0, [pc, #592]	; (16600 <main+0x47c>)
   163ae:	4d6a      	ldr	r5, [pc, #424]	; (16558 <main+0x3d4>)
   163b0:	47a8      	blx	r5
	
	/** INITIALIZATION COMPLETE */	

	delay_s(2);
   163b2:	20fa      	movs	r0, #250	; 0xfa
   163b4:	00c0      	lsls	r0, r0, #3
   163b6:	4b93      	ldr	r3, [pc, #588]	; (16604 <main+0x480>)
   163b8:	4798      	blx	r3
	
	//CONNECT TO MQTT BROKER
	do_download_flag = false;    // Flag false indicating that mqtt broker to be contacted 
   163ba:	4b93      	ldr	r3, [pc, #588]	; (16608 <main+0x484>)
   163bc:	701c      	strb	r4, [r3, #0]
	
	socketInit();
   163be:	4b93      	ldr	r3, [pc, #588]	; (1660c <main+0x488>)
   163c0:	4798      	blx	r3
	registerSocketCallback(socket_event_handler,socket_resolve_handler);
   163c2:	4993      	ldr	r1, [pc, #588]	; (16610 <main+0x48c>)
   163c4:	4893      	ldr	r0, [pc, #588]	; (16614 <main+0x490>)
   163c6:	4b94      	ldr	r3, [pc, #592]	; (16618 <main+0x494>)
   163c8:	4798      	blx	r3
	
	//Connect to router. 
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   163ca:	4c94      	ldr	r4, [pc, #592]	; (1661c <main+0x498>)
   163cc:	0021      	movs	r1, r4
   163ce:	4894      	ldr	r0, [pc, #592]	; (16620 <main+0x49c>)
   163d0:	47a8      	blx	r5
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   163d2:	23ff      	movs	r3, #255	; 0xff
   163d4:	9300      	str	r3, [sp, #0]
   163d6:	4b93      	ldr	r3, [pc, #588]	; (16624 <main+0x4a0>)
   163d8:	2202      	movs	r2, #2
   163da:	2105      	movs	r1, #5
   163dc:	0020      	movs	r0, r4
   163de:	4c92      	ldr	r4, [pc, #584]	; (16628 <main+0x4a4>)
   163e0:	47a0      	blx	r4
 	 
	while(1)
	{
		m2m_wifi_handle_events(NULL);
   163e2:	4b92      	ldr	r3, [pc, #584]	; (1662c <main+0x4a8>)
   163e4:	4698      	mov	r8, r3
		sw_timer_task(&swt_module_inst);
   163e6:	4f92      	ldr	r7, [pc, #584]	; (16630 <main+0x4ac>)
   163e8:	e023      	b.n	16432 <main+0x2ae>
		}
		 
		//OTAFU
		if ((OTAFU_REQ == true)&&(START_BUTTON == false))
		{
			mqtt_disconnect(&mqtt_inst, main_mqtt_broker);
   163ea:	4d92      	ldr	r5, [pc, #584]	; (16634 <main+0x4b0>)
   163ec:	4c63      	ldr	r4, [pc, #396]	; (1657c <main+0x3f8>)
   163ee:	0029      	movs	r1, r5
   163f0:	0020      	movs	r0, r4
   163f2:	4b91      	ldr	r3, [pc, #580]	; (16638 <main+0x4b4>)
   163f4:	4798      	blx	r3
			socketDeinit();
   163f6:	4b91      	ldr	r3, [pc, #580]	; (1663c <main+0x4b8>)
   163f8:	4798      	blx	r3
			
			// THE OTAFU OPERATION call
			otafu();
   163fa:	4b91      	ldr	r3, [pc, #580]	; (16640 <main+0x4bc>)
   163fc:	4798      	blx	r3
			
			OTAFU_REQ = false;
   163fe:	2300      	movs	r3, #0
   16400:	4a90      	ldr	r2, [pc, #576]	; (16644 <main+0x4c0>)
   16402:	7013      	strb	r3, [r2, #0]
			do_download_flag = false;
   16404:	4a80      	ldr	r2, [pc, #512]	; (16608 <main+0x484>)
   16406:	7013      	strb	r3, [r2, #0]
			socketInit();
   16408:	4b80      	ldr	r3, [pc, #512]	; (1660c <main+0x488>)
   1640a:	4798      	blx	r3
			registerSocketCallback(socket_event_handler,socket_resolve_handler);
   1640c:	4980      	ldr	r1, [pc, #512]	; (16610 <main+0x48c>)
   1640e:	4881      	ldr	r0, [pc, #516]	; (16614 <main+0x490>)
   16410:	4b81      	ldr	r3, [pc, #516]	; (16618 <main+0x494>)
   16412:	4798      	blx	r3
			if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   16414:	0029      	movs	r1, r5
   16416:	0020      	movs	r0, r4
   16418:	4b8b      	ldr	r3, [pc, #556]	; (16648 <main+0x4c4>)
   1641a:	4798      	blx	r3
   1641c:	2800      	cmp	r0, #0
   1641e:	d153      	bne.n	164c8 <main+0x344>
				printf("Error connecting to MQTT Broker!\r\n");
			}
		}
		
		//START/STOP OP
		if(START_BUTTON)
   16420:	4b8a      	ldr	r3, [pc, #552]	; (1664c <main+0x4c8>)
   16422:	781b      	ldrb	r3, [r3, #0]
   16424:	2b00      	cmp	r3, #0
   16426:	d12f      	bne.n	16488 <main+0x304>
			snprintf(mqtt_msg,63,"{\"d\":{\"temp\":%d}}",temperature);
			mqtt_publish(&mqtt_inst, TEMP_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
		}

					//Handle MQTT messages
					if(mqtt_inst.isConnected)
   16428:	2334      	movs	r3, #52	; 0x34
   1642a:	4a54      	ldr	r2, [pc, #336]	; (1657c <main+0x3f8>)
   1642c:	5cd3      	ldrb	r3, [r2, r3]
   1642e:	2b00      	cmp	r3, #0
   16430:	d14e      	bne.n	164d0 <main+0x34c>
		m2m_wifi_handle_events(NULL);
   16432:	2000      	movs	r0, #0
   16434:	47c0      	blx	r8
		sw_timer_task(&swt_module_inst);
   16436:	483f      	ldr	r0, [pc, #252]	; (16534 <main+0x3b0>)
   16438:	47b8      	blx	r7
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
   1643a:	2280      	movs	r2, #128	; 0x80
   1643c:	0412      	lsls	r2, r2, #16
   1643e:	4b84      	ldr	r3, [pc, #528]	; (16650 <main+0x4cc>)
   16440:	61da      	str	r2, [r3, #28]
		delay_ms(200);			
   16442:	20c8      	movs	r0, #200	; 0xc8
   16444:	4b6f      	ldr	r3, [pc, #444]	; (16604 <main+0x480>)
   16446:	4798      	blx	r3
		if(isPressed == true) 
   16448:	4b82      	ldr	r3, [pc, #520]	; (16654 <main+0x4d0>)
   1644a:	781b      	ldrb	r3, [r3, #0]
   1644c:	2b00      	cmp	r3, #0
   1644e:	d013      	beq.n	16478 <main+0x2f4>
			printf("CLI command line active \n\r type 'help' for the command list\n\r");
   16450:	4881      	ldr	r0, [pc, #516]	; (16658 <main+0x4d4>)
   16452:	4b41      	ldr	r3, [pc, #260]	; (16558 <main+0x3d4>)
   16454:	4798      	blx	r3
				printf("delos_inc > ");
   16456:	4d81      	ldr	r5, [pc, #516]	; (1665c <main+0x4d8>)
   16458:	4e3f      	ldr	r6, [pc, #252]	; (16558 <main+0x3d4>)
				response = cli(mqtt_msg);
   1645a:	4c81      	ldr	r4, [pc, #516]	; (16660 <main+0x4dc>)
				printf("delos_inc > ");
   1645c:	0028      	movs	r0, r5
   1645e:	47b0      	blx	r6
				response = cli(mqtt_msg);
   16460:	0020      	movs	r0, r4
   16462:	4b80      	ldr	r3, [pc, #512]	; (16664 <main+0x4e0>)
   16464:	4798      	blx	r3
			while(response != 1)
   16466:	b2c0      	uxtb	r0, r0
   16468:	2801      	cmp	r0, #1
   1646a:	d1f7      	bne.n	1645c <main+0x2d8>
			isPressed = false;
   1646c:	2200      	movs	r2, #0
   1646e:	4b79      	ldr	r3, [pc, #484]	; (16654 <main+0x4d0>)
   16470:	701a      	strb	r2, [r3, #0]
			printf("CLI Exited \n\r");
   16472:	487d      	ldr	r0, [pc, #500]	; (16668 <main+0x4e4>)
   16474:	4b38      	ldr	r3, [pc, #224]	; (16558 <main+0x3d4>)
   16476:	4798      	blx	r3
		if ((OTAFU_REQ == true)&&(START_BUTTON == false))
   16478:	4b72      	ldr	r3, [pc, #456]	; (16644 <main+0x4c0>)
   1647a:	781b      	ldrb	r3, [r3, #0]
   1647c:	2b00      	cmp	r3, #0
   1647e:	d0cf      	beq.n	16420 <main+0x29c>
   16480:	4b72      	ldr	r3, [pc, #456]	; (1664c <main+0x4c8>)
   16482:	781b      	ldrb	r3, [r3, #0]
   16484:	2b00      	cmp	r3, #0
   16486:	d0b0      	beq.n	163ea <main+0x266>
			temperature++;
   16488:	4b78      	ldr	r3, [pc, #480]	; (1666c <main+0x4e8>)
   1648a:	681a      	ldr	r2, [r3, #0]
   1648c:	3201      	adds	r2, #1
   1648e:	601a      	str	r2, [r3, #0]
			if(temperature > 40) temperature = 1;
   16490:	681b      	ldr	r3, [r3, #0]
   16492:	2b28      	cmp	r3, #40	; 0x28
   16494:	d902      	bls.n	1649c <main+0x318>
   16496:	2201      	movs	r2, #1
   16498:	4b74      	ldr	r3, [pc, #464]	; (1666c <main+0x4e8>)
   1649a:	601a      	str	r2, [r3, #0]
			snprintf(mqtt_msg,63,"{\"d\":{\"temp\":%d}}",temperature);
   1649c:	4b73      	ldr	r3, [pc, #460]	; (1666c <main+0x4e8>)
   1649e:	681b      	ldr	r3, [r3, #0]
   164a0:	4c6f      	ldr	r4, [pc, #444]	; (16660 <main+0x4dc>)
   164a2:	4a73      	ldr	r2, [pc, #460]	; (16670 <main+0x4ec>)
   164a4:	213f      	movs	r1, #63	; 0x3f
   164a6:	0020      	movs	r0, r4
   164a8:	4d72      	ldr	r5, [pc, #456]	; (16674 <main+0x4f0>)
   164aa:	47a8      	blx	r5
			mqtt_publish(&mqtt_inst, TEMP_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   164ac:	0020      	movs	r0, r4
   164ae:	4b72      	ldr	r3, [pc, #456]	; (16678 <main+0x4f4>)
   164b0:	4798      	blx	r3
   164b2:	0003      	movs	r3, r0
   164b4:	2200      	movs	r2, #0
   164b6:	9201      	str	r2, [sp, #4]
   164b8:	3202      	adds	r2, #2
   164ba:	9200      	str	r2, [sp, #0]
   164bc:	0022      	movs	r2, r4
   164be:	496f      	ldr	r1, [pc, #444]	; (1667c <main+0x4f8>)
   164c0:	482e      	ldr	r0, [pc, #184]	; (1657c <main+0x3f8>)
   164c2:	4c6f      	ldr	r4, [pc, #444]	; (16680 <main+0x4fc>)
   164c4:	47a0      	blx	r4
   164c6:	e7af      	b.n	16428 <main+0x2a4>
				printf("Error connecting to MQTT Broker!\r\n");
   164c8:	486e      	ldr	r0, [pc, #440]	; (16684 <main+0x500>)
   164ca:	4b17      	ldr	r3, [pc, #92]	; (16528 <main+0x3a4>)
   164cc:	4798      	blx	r3
   164ce:	e7a7      	b.n	16420 <main+0x29c>
					mqtt_yield(&mqtt_inst, 100);		
   164d0:	2164      	movs	r1, #100	; 0x64
   164d2:	0010      	movs	r0, r2
   164d4:	4b6c      	ldr	r3, [pc, #432]	; (16688 <main+0x504>)
   164d6:	4798      	blx	r3
   164d8:	e7ab      	b.n	16432 <main+0x2ae>
		puts("ERR>> Systick configuration error\r\n");
   164da:	486c      	ldr	r0, [pc, #432]	; (1668c <main+0x508>)
   164dc:	4b12      	ldr	r3, [pc, #72]	; (16528 <main+0x3a4>)
   164de:	4798      	blx	r3
   164e0:	e7fe      	b.n	164e0 <main+0x35c>
   164e2:	46c0      	nop			; (mov r8, r8)
   164e4:	200008ed 	.word	0x200008ed
   164e8:	0001016d 	.word	0x0001016d
   164ec:	002a0003 	.word	0x002a0003
   164f0:	002b0003 	.word	0x002b0003
   164f4:	200008b4 	.word	0x200008b4
   164f8:	20001138 	.word	0x20001138
   164fc:	000157d9 	.word	0x000157d9
   16500:	20001134 	.word	0x20001134
   16504:	000157ad 	.word	0x000157ad
   16508:	20001130 	.word	0x20001130
   1650c:	42001800 	.word	0x42001800
   16510:	0000f485 	.word	0x0000f485
   16514:	2000017c 	.word	0x2000017c
   16518:	00016dcd 	.word	0x00016dcd
   1651c:	0000ed01 	.word	0x0000ed01
   16520:	e000e100 	.word	0xe000e100
   16524:	0001aad8 	.word	0x0001aad8
   16528:	00016d01 	.word	0x00016d01
   1652c:	0001ab48 	.word	0x0001ab48
   16530:	000152e9 	.word	0x000152e9
   16534:	200011d8 	.word	0x200011d8
   16538:	000152f5 	.word	0x000152f5
   1653c:	000153a1 	.word	0x000153a1
   16540:	200011b0 	.word	0x200011b0
   16544:	000142f9 	.word	0x000142f9
   16548:	000005a6 	.word	0x000005a6
   1654c:	20001230 	.word	0x20001230
   16550:	00014329 	.word	0x00014329
   16554:	0001ab90 	.word	0x0001ab90
   16558:	00016be5 	.word	0x00016be5
   1655c:	00015bf9 	.word	0x00015bf9
   16560:	000143dd 	.word	0x000143dd
   16564:	20001198 	.word	0x20001198
   16568:	000134a9 	.word	0x000134a9
   1656c:	20000b88 	.word	0x20000b88
   16570:	20000d88 	.word	0x20000d88
   16574:	00002b1e 	.word	0x00002b1e
   16578:	00001770 	.word	0x00001770
   1657c:	20000b50 	.word	0x20000b50
   16580:	000133f1 	.word	0x000133f1
   16584:	0001abd8 	.word	0x0001abd8
   16588:	000157f1 	.word	0x000157f1
   1658c:	000134c5 	.word	0x000134c5
   16590:	0001ac0c 	.word	0x0001ac0c
   16594:	0000ae4d 	.word	0x0000ae4d
   16598:	0000adcd 	.word	0x0000adcd
   1659c:	00009e39 	.word	0x00009e39
   165a0:	0001ac40 	.word	0x0001ac40
   165a4:	0000a56d 	.word	0x0000a56d
   165a8:	0001ac78 	.word	0x0001ac78
   165ac:	0001aca0 	.word	0x0001aca0
   165b0:	00009e59 	.word	0x00009e59
   165b4:	0001acd0 	.word	0x0001acd0
   165b8:	200008f0 	.word	0x200008f0
   165bc:	00016a83 	.word	0x00016a83
   165c0:	00012145 	.word	0x00012145
   165c4:	0001acf4 	.word	0x0001acf4
   165c8:	00015ced 	.word	0x00015ced
   165cc:	00015d1d 	.word	0x00015d1d
   165d0:	00015d41 	.word	0x00015d41
   165d4:	000156ad 	.word	0x000156ad
   165d8:	0000be49 	.word	0x0000be49
   165dc:	0001ad48 	.word	0x0001ad48
   165e0:	0001ad24 	.word	0x0001ad24
   165e4:	00015491 	.word	0x00015491
   165e8:	0000ff29 	.word	0x0000ff29
   165ec:	40000400 	.word	0x40000400
   165f0:	00016691 	.word	0x00016691
   165f4:	00ffffff 	.word	0x00ffffff
   165f8:	e000e010 	.word	0xe000e010
   165fc:	e000ed00 	.word	0xe000ed00
   16600:	0001ad74 	.word	0x0001ad74
   16604:	0000ae0d 	.word	0x0000ae0d
   16608:	200008ec 	.word	0x200008ec
   1660c:	0000da71 	.word	0x0000da71
   16610:	00015695 	.word	0x00015695
   16614:	000156a1 	.word	0x000156a1
   16618:	0000daf1 	.word	0x0000daf1
   1661c:	0001b630 	.word	0x0001b630
   16620:	0001ada4 	.word	0x0001ada4
   16624:	0001b624 	.word	0x0001b624
   16628:	0000c219 	.word	0x0000c219
   1662c:	0000bf7d 	.word	0x0000bf7d
   16630:	00015429 	.word	0x00015429
   16634:	0001ae4c 	.word	0x0001ae4c
   16638:	000135b1 	.word	0x000135b1
   1663c:	0000dab5 	.word	0x0000dab5
   16640:	00016109 	.word	0x00016109
   16644:	200008ac 	.word	0x200008ac
   16648:	000134ed 	.word	0x000134ed
   1664c:	200008ad 	.word	0x200008ad
   16650:	41004400 	.word	0x41004400
   16654:	20000b4c 	.word	0x20000b4c
   16658:	0001adc8 	.word	0x0001adc8
   1665c:	0001ae08 	.word	0x0001ae08
   16660:	2000001c 	.word	0x2000001c
   16664:	0001404d 	.word	0x0001404d
   16668:	0001ae18 	.word	0x0001ae18
   1666c:	20000158 	.word	0x20000158
   16670:	0001a70c 	.word	0x0001a70c
   16674:	00016f39 	.word	0x00016f39
   16678:	0001703f 	.word	0x0001703f
   1667c:	0001a720 	.word	0x0001a720
   16680:	000135e1 	.word	0x000135e1
   16684:	0001b660 	.word	0x0001b660
   16688:	00013641 	.word	0x00013641
   1668c:	0001ae28 	.word	0x0001ae28

00016690 <__udivsi3>:
   16690:	2200      	movs	r2, #0
   16692:	0843      	lsrs	r3, r0, #1
   16694:	428b      	cmp	r3, r1
   16696:	d374      	bcc.n	16782 <__udivsi3+0xf2>
   16698:	0903      	lsrs	r3, r0, #4
   1669a:	428b      	cmp	r3, r1
   1669c:	d35f      	bcc.n	1675e <__udivsi3+0xce>
   1669e:	0a03      	lsrs	r3, r0, #8
   166a0:	428b      	cmp	r3, r1
   166a2:	d344      	bcc.n	1672e <__udivsi3+0x9e>
   166a4:	0b03      	lsrs	r3, r0, #12
   166a6:	428b      	cmp	r3, r1
   166a8:	d328      	bcc.n	166fc <__udivsi3+0x6c>
   166aa:	0c03      	lsrs	r3, r0, #16
   166ac:	428b      	cmp	r3, r1
   166ae:	d30d      	bcc.n	166cc <__udivsi3+0x3c>
   166b0:	22ff      	movs	r2, #255	; 0xff
   166b2:	0209      	lsls	r1, r1, #8
   166b4:	ba12      	rev	r2, r2
   166b6:	0c03      	lsrs	r3, r0, #16
   166b8:	428b      	cmp	r3, r1
   166ba:	d302      	bcc.n	166c2 <__udivsi3+0x32>
   166bc:	1212      	asrs	r2, r2, #8
   166be:	0209      	lsls	r1, r1, #8
   166c0:	d065      	beq.n	1678e <__udivsi3+0xfe>
   166c2:	0b03      	lsrs	r3, r0, #12
   166c4:	428b      	cmp	r3, r1
   166c6:	d319      	bcc.n	166fc <__udivsi3+0x6c>
   166c8:	e000      	b.n	166cc <__udivsi3+0x3c>
   166ca:	0a09      	lsrs	r1, r1, #8
   166cc:	0bc3      	lsrs	r3, r0, #15
   166ce:	428b      	cmp	r3, r1
   166d0:	d301      	bcc.n	166d6 <__udivsi3+0x46>
   166d2:	03cb      	lsls	r3, r1, #15
   166d4:	1ac0      	subs	r0, r0, r3
   166d6:	4152      	adcs	r2, r2
   166d8:	0b83      	lsrs	r3, r0, #14
   166da:	428b      	cmp	r3, r1
   166dc:	d301      	bcc.n	166e2 <__udivsi3+0x52>
   166de:	038b      	lsls	r3, r1, #14
   166e0:	1ac0      	subs	r0, r0, r3
   166e2:	4152      	adcs	r2, r2
   166e4:	0b43      	lsrs	r3, r0, #13
   166e6:	428b      	cmp	r3, r1
   166e8:	d301      	bcc.n	166ee <__udivsi3+0x5e>
   166ea:	034b      	lsls	r3, r1, #13
   166ec:	1ac0      	subs	r0, r0, r3
   166ee:	4152      	adcs	r2, r2
   166f0:	0b03      	lsrs	r3, r0, #12
   166f2:	428b      	cmp	r3, r1
   166f4:	d301      	bcc.n	166fa <__udivsi3+0x6a>
   166f6:	030b      	lsls	r3, r1, #12
   166f8:	1ac0      	subs	r0, r0, r3
   166fa:	4152      	adcs	r2, r2
   166fc:	0ac3      	lsrs	r3, r0, #11
   166fe:	428b      	cmp	r3, r1
   16700:	d301      	bcc.n	16706 <__udivsi3+0x76>
   16702:	02cb      	lsls	r3, r1, #11
   16704:	1ac0      	subs	r0, r0, r3
   16706:	4152      	adcs	r2, r2
   16708:	0a83      	lsrs	r3, r0, #10
   1670a:	428b      	cmp	r3, r1
   1670c:	d301      	bcc.n	16712 <__udivsi3+0x82>
   1670e:	028b      	lsls	r3, r1, #10
   16710:	1ac0      	subs	r0, r0, r3
   16712:	4152      	adcs	r2, r2
   16714:	0a43      	lsrs	r3, r0, #9
   16716:	428b      	cmp	r3, r1
   16718:	d301      	bcc.n	1671e <__udivsi3+0x8e>
   1671a:	024b      	lsls	r3, r1, #9
   1671c:	1ac0      	subs	r0, r0, r3
   1671e:	4152      	adcs	r2, r2
   16720:	0a03      	lsrs	r3, r0, #8
   16722:	428b      	cmp	r3, r1
   16724:	d301      	bcc.n	1672a <__udivsi3+0x9a>
   16726:	020b      	lsls	r3, r1, #8
   16728:	1ac0      	subs	r0, r0, r3
   1672a:	4152      	adcs	r2, r2
   1672c:	d2cd      	bcs.n	166ca <__udivsi3+0x3a>
   1672e:	09c3      	lsrs	r3, r0, #7
   16730:	428b      	cmp	r3, r1
   16732:	d301      	bcc.n	16738 <__udivsi3+0xa8>
   16734:	01cb      	lsls	r3, r1, #7
   16736:	1ac0      	subs	r0, r0, r3
   16738:	4152      	adcs	r2, r2
   1673a:	0983      	lsrs	r3, r0, #6
   1673c:	428b      	cmp	r3, r1
   1673e:	d301      	bcc.n	16744 <__udivsi3+0xb4>
   16740:	018b      	lsls	r3, r1, #6
   16742:	1ac0      	subs	r0, r0, r3
   16744:	4152      	adcs	r2, r2
   16746:	0943      	lsrs	r3, r0, #5
   16748:	428b      	cmp	r3, r1
   1674a:	d301      	bcc.n	16750 <__udivsi3+0xc0>
   1674c:	014b      	lsls	r3, r1, #5
   1674e:	1ac0      	subs	r0, r0, r3
   16750:	4152      	adcs	r2, r2
   16752:	0903      	lsrs	r3, r0, #4
   16754:	428b      	cmp	r3, r1
   16756:	d301      	bcc.n	1675c <__udivsi3+0xcc>
   16758:	010b      	lsls	r3, r1, #4
   1675a:	1ac0      	subs	r0, r0, r3
   1675c:	4152      	adcs	r2, r2
   1675e:	08c3      	lsrs	r3, r0, #3
   16760:	428b      	cmp	r3, r1
   16762:	d301      	bcc.n	16768 <__udivsi3+0xd8>
   16764:	00cb      	lsls	r3, r1, #3
   16766:	1ac0      	subs	r0, r0, r3
   16768:	4152      	adcs	r2, r2
   1676a:	0883      	lsrs	r3, r0, #2
   1676c:	428b      	cmp	r3, r1
   1676e:	d301      	bcc.n	16774 <__udivsi3+0xe4>
   16770:	008b      	lsls	r3, r1, #2
   16772:	1ac0      	subs	r0, r0, r3
   16774:	4152      	adcs	r2, r2
   16776:	0843      	lsrs	r3, r0, #1
   16778:	428b      	cmp	r3, r1
   1677a:	d301      	bcc.n	16780 <__udivsi3+0xf0>
   1677c:	004b      	lsls	r3, r1, #1
   1677e:	1ac0      	subs	r0, r0, r3
   16780:	4152      	adcs	r2, r2
   16782:	1a41      	subs	r1, r0, r1
   16784:	d200      	bcs.n	16788 <__udivsi3+0xf8>
   16786:	4601      	mov	r1, r0
   16788:	4152      	adcs	r2, r2
   1678a:	4610      	mov	r0, r2
   1678c:	4770      	bx	lr
   1678e:	e7ff      	b.n	16790 <__udivsi3+0x100>
   16790:	b501      	push	{r0, lr}
   16792:	2000      	movs	r0, #0
   16794:	f000 f8f0 	bl	16978 <__aeabi_idiv0>
   16798:	bd02      	pop	{r1, pc}
   1679a:	46c0      	nop			; (mov r8, r8)

0001679c <__aeabi_uidivmod>:
   1679c:	2900      	cmp	r1, #0
   1679e:	d0f7      	beq.n	16790 <__udivsi3+0x100>
   167a0:	e776      	b.n	16690 <__udivsi3>
   167a2:	4770      	bx	lr

000167a4 <__divsi3>:
   167a4:	4603      	mov	r3, r0
   167a6:	430b      	orrs	r3, r1
   167a8:	d47f      	bmi.n	168aa <__divsi3+0x106>
   167aa:	2200      	movs	r2, #0
   167ac:	0843      	lsrs	r3, r0, #1
   167ae:	428b      	cmp	r3, r1
   167b0:	d374      	bcc.n	1689c <__divsi3+0xf8>
   167b2:	0903      	lsrs	r3, r0, #4
   167b4:	428b      	cmp	r3, r1
   167b6:	d35f      	bcc.n	16878 <__divsi3+0xd4>
   167b8:	0a03      	lsrs	r3, r0, #8
   167ba:	428b      	cmp	r3, r1
   167bc:	d344      	bcc.n	16848 <__divsi3+0xa4>
   167be:	0b03      	lsrs	r3, r0, #12
   167c0:	428b      	cmp	r3, r1
   167c2:	d328      	bcc.n	16816 <__divsi3+0x72>
   167c4:	0c03      	lsrs	r3, r0, #16
   167c6:	428b      	cmp	r3, r1
   167c8:	d30d      	bcc.n	167e6 <__divsi3+0x42>
   167ca:	22ff      	movs	r2, #255	; 0xff
   167cc:	0209      	lsls	r1, r1, #8
   167ce:	ba12      	rev	r2, r2
   167d0:	0c03      	lsrs	r3, r0, #16
   167d2:	428b      	cmp	r3, r1
   167d4:	d302      	bcc.n	167dc <__divsi3+0x38>
   167d6:	1212      	asrs	r2, r2, #8
   167d8:	0209      	lsls	r1, r1, #8
   167da:	d065      	beq.n	168a8 <__divsi3+0x104>
   167dc:	0b03      	lsrs	r3, r0, #12
   167de:	428b      	cmp	r3, r1
   167e0:	d319      	bcc.n	16816 <__divsi3+0x72>
   167e2:	e000      	b.n	167e6 <__divsi3+0x42>
   167e4:	0a09      	lsrs	r1, r1, #8
   167e6:	0bc3      	lsrs	r3, r0, #15
   167e8:	428b      	cmp	r3, r1
   167ea:	d301      	bcc.n	167f0 <__divsi3+0x4c>
   167ec:	03cb      	lsls	r3, r1, #15
   167ee:	1ac0      	subs	r0, r0, r3
   167f0:	4152      	adcs	r2, r2
   167f2:	0b83      	lsrs	r3, r0, #14
   167f4:	428b      	cmp	r3, r1
   167f6:	d301      	bcc.n	167fc <__divsi3+0x58>
   167f8:	038b      	lsls	r3, r1, #14
   167fa:	1ac0      	subs	r0, r0, r3
   167fc:	4152      	adcs	r2, r2
   167fe:	0b43      	lsrs	r3, r0, #13
   16800:	428b      	cmp	r3, r1
   16802:	d301      	bcc.n	16808 <__divsi3+0x64>
   16804:	034b      	lsls	r3, r1, #13
   16806:	1ac0      	subs	r0, r0, r3
   16808:	4152      	adcs	r2, r2
   1680a:	0b03      	lsrs	r3, r0, #12
   1680c:	428b      	cmp	r3, r1
   1680e:	d301      	bcc.n	16814 <__divsi3+0x70>
   16810:	030b      	lsls	r3, r1, #12
   16812:	1ac0      	subs	r0, r0, r3
   16814:	4152      	adcs	r2, r2
   16816:	0ac3      	lsrs	r3, r0, #11
   16818:	428b      	cmp	r3, r1
   1681a:	d301      	bcc.n	16820 <__divsi3+0x7c>
   1681c:	02cb      	lsls	r3, r1, #11
   1681e:	1ac0      	subs	r0, r0, r3
   16820:	4152      	adcs	r2, r2
   16822:	0a83      	lsrs	r3, r0, #10
   16824:	428b      	cmp	r3, r1
   16826:	d301      	bcc.n	1682c <__divsi3+0x88>
   16828:	028b      	lsls	r3, r1, #10
   1682a:	1ac0      	subs	r0, r0, r3
   1682c:	4152      	adcs	r2, r2
   1682e:	0a43      	lsrs	r3, r0, #9
   16830:	428b      	cmp	r3, r1
   16832:	d301      	bcc.n	16838 <__divsi3+0x94>
   16834:	024b      	lsls	r3, r1, #9
   16836:	1ac0      	subs	r0, r0, r3
   16838:	4152      	adcs	r2, r2
   1683a:	0a03      	lsrs	r3, r0, #8
   1683c:	428b      	cmp	r3, r1
   1683e:	d301      	bcc.n	16844 <__divsi3+0xa0>
   16840:	020b      	lsls	r3, r1, #8
   16842:	1ac0      	subs	r0, r0, r3
   16844:	4152      	adcs	r2, r2
   16846:	d2cd      	bcs.n	167e4 <__divsi3+0x40>
   16848:	09c3      	lsrs	r3, r0, #7
   1684a:	428b      	cmp	r3, r1
   1684c:	d301      	bcc.n	16852 <__divsi3+0xae>
   1684e:	01cb      	lsls	r3, r1, #7
   16850:	1ac0      	subs	r0, r0, r3
   16852:	4152      	adcs	r2, r2
   16854:	0983      	lsrs	r3, r0, #6
   16856:	428b      	cmp	r3, r1
   16858:	d301      	bcc.n	1685e <__divsi3+0xba>
   1685a:	018b      	lsls	r3, r1, #6
   1685c:	1ac0      	subs	r0, r0, r3
   1685e:	4152      	adcs	r2, r2
   16860:	0943      	lsrs	r3, r0, #5
   16862:	428b      	cmp	r3, r1
   16864:	d301      	bcc.n	1686a <__divsi3+0xc6>
   16866:	014b      	lsls	r3, r1, #5
   16868:	1ac0      	subs	r0, r0, r3
   1686a:	4152      	adcs	r2, r2
   1686c:	0903      	lsrs	r3, r0, #4
   1686e:	428b      	cmp	r3, r1
   16870:	d301      	bcc.n	16876 <__divsi3+0xd2>
   16872:	010b      	lsls	r3, r1, #4
   16874:	1ac0      	subs	r0, r0, r3
   16876:	4152      	adcs	r2, r2
   16878:	08c3      	lsrs	r3, r0, #3
   1687a:	428b      	cmp	r3, r1
   1687c:	d301      	bcc.n	16882 <__divsi3+0xde>
   1687e:	00cb      	lsls	r3, r1, #3
   16880:	1ac0      	subs	r0, r0, r3
   16882:	4152      	adcs	r2, r2
   16884:	0883      	lsrs	r3, r0, #2
   16886:	428b      	cmp	r3, r1
   16888:	d301      	bcc.n	1688e <__divsi3+0xea>
   1688a:	008b      	lsls	r3, r1, #2
   1688c:	1ac0      	subs	r0, r0, r3
   1688e:	4152      	adcs	r2, r2
   16890:	0843      	lsrs	r3, r0, #1
   16892:	428b      	cmp	r3, r1
   16894:	d301      	bcc.n	1689a <__divsi3+0xf6>
   16896:	004b      	lsls	r3, r1, #1
   16898:	1ac0      	subs	r0, r0, r3
   1689a:	4152      	adcs	r2, r2
   1689c:	1a41      	subs	r1, r0, r1
   1689e:	d200      	bcs.n	168a2 <__divsi3+0xfe>
   168a0:	4601      	mov	r1, r0
   168a2:	4152      	adcs	r2, r2
   168a4:	4610      	mov	r0, r2
   168a6:	4770      	bx	lr
   168a8:	e05d      	b.n	16966 <__divsi3+0x1c2>
   168aa:	0fca      	lsrs	r2, r1, #31
   168ac:	d000      	beq.n	168b0 <__divsi3+0x10c>
   168ae:	4249      	negs	r1, r1
   168b0:	1003      	asrs	r3, r0, #32
   168b2:	d300      	bcc.n	168b6 <__divsi3+0x112>
   168b4:	4240      	negs	r0, r0
   168b6:	4053      	eors	r3, r2
   168b8:	2200      	movs	r2, #0
   168ba:	469c      	mov	ip, r3
   168bc:	0903      	lsrs	r3, r0, #4
   168be:	428b      	cmp	r3, r1
   168c0:	d32d      	bcc.n	1691e <__divsi3+0x17a>
   168c2:	0a03      	lsrs	r3, r0, #8
   168c4:	428b      	cmp	r3, r1
   168c6:	d312      	bcc.n	168ee <__divsi3+0x14a>
   168c8:	22fc      	movs	r2, #252	; 0xfc
   168ca:	0189      	lsls	r1, r1, #6
   168cc:	ba12      	rev	r2, r2
   168ce:	0a03      	lsrs	r3, r0, #8
   168d0:	428b      	cmp	r3, r1
   168d2:	d30c      	bcc.n	168ee <__divsi3+0x14a>
   168d4:	0189      	lsls	r1, r1, #6
   168d6:	1192      	asrs	r2, r2, #6
   168d8:	428b      	cmp	r3, r1
   168da:	d308      	bcc.n	168ee <__divsi3+0x14a>
   168dc:	0189      	lsls	r1, r1, #6
   168de:	1192      	asrs	r2, r2, #6
   168e0:	428b      	cmp	r3, r1
   168e2:	d304      	bcc.n	168ee <__divsi3+0x14a>
   168e4:	0189      	lsls	r1, r1, #6
   168e6:	d03a      	beq.n	1695e <__divsi3+0x1ba>
   168e8:	1192      	asrs	r2, r2, #6
   168ea:	e000      	b.n	168ee <__divsi3+0x14a>
   168ec:	0989      	lsrs	r1, r1, #6
   168ee:	09c3      	lsrs	r3, r0, #7
   168f0:	428b      	cmp	r3, r1
   168f2:	d301      	bcc.n	168f8 <__divsi3+0x154>
   168f4:	01cb      	lsls	r3, r1, #7
   168f6:	1ac0      	subs	r0, r0, r3
   168f8:	4152      	adcs	r2, r2
   168fa:	0983      	lsrs	r3, r0, #6
   168fc:	428b      	cmp	r3, r1
   168fe:	d301      	bcc.n	16904 <__divsi3+0x160>
   16900:	018b      	lsls	r3, r1, #6
   16902:	1ac0      	subs	r0, r0, r3
   16904:	4152      	adcs	r2, r2
   16906:	0943      	lsrs	r3, r0, #5
   16908:	428b      	cmp	r3, r1
   1690a:	d301      	bcc.n	16910 <__divsi3+0x16c>
   1690c:	014b      	lsls	r3, r1, #5
   1690e:	1ac0      	subs	r0, r0, r3
   16910:	4152      	adcs	r2, r2
   16912:	0903      	lsrs	r3, r0, #4
   16914:	428b      	cmp	r3, r1
   16916:	d301      	bcc.n	1691c <__divsi3+0x178>
   16918:	010b      	lsls	r3, r1, #4
   1691a:	1ac0      	subs	r0, r0, r3
   1691c:	4152      	adcs	r2, r2
   1691e:	08c3      	lsrs	r3, r0, #3
   16920:	428b      	cmp	r3, r1
   16922:	d301      	bcc.n	16928 <__divsi3+0x184>
   16924:	00cb      	lsls	r3, r1, #3
   16926:	1ac0      	subs	r0, r0, r3
   16928:	4152      	adcs	r2, r2
   1692a:	0883      	lsrs	r3, r0, #2
   1692c:	428b      	cmp	r3, r1
   1692e:	d301      	bcc.n	16934 <__divsi3+0x190>
   16930:	008b      	lsls	r3, r1, #2
   16932:	1ac0      	subs	r0, r0, r3
   16934:	4152      	adcs	r2, r2
   16936:	d2d9      	bcs.n	168ec <__divsi3+0x148>
   16938:	0843      	lsrs	r3, r0, #1
   1693a:	428b      	cmp	r3, r1
   1693c:	d301      	bcc.n	16942 <__divsi3+0x19e>
   1693e:	004b      	lsls	r3, r1, #1
   16940:	1ac0      	subs	r0, r0, r3
   16942:	4152      	adcs	r2, r2
   16944:	1a41      	subs	r1, r0, r1
   16946:	d200      	bcs.n	1694a <__divsi3+0x1a6>
   16948:	4601      	mov	r1, r0
   1694a:	4663      	mov	r3, ip
   1694c:	4152      	adcs	r2, r2
   1694e:	105b      	asrs	r3, r3, #1
   16950:	4610      	mov	r0, r2
   16952:	d301      	bcc.n	16958 <__divsi3+0x1b4>
   16954:	4240      	negs	r0, r0
   16956:	2b00      	cmp	r3, #0
   16958:	d500      	bpl.n	1695c <__divsi3+0x1b8>
   1695a:	4249      	negs	r1, r1
   1695c:	4770      	bx	lr
   1695e:	4663      	mov	r3, ip
   16960:	105b      	asrs	r3, r3, #1
   16962:	d300      	bcc.n	16966 <__divsi3+0x1c2>
   16964:	4240      	negs	r0, r0
   16966:	b501      	push	{r0, lr}
   16968:	2000      	movs	r0, #0
   1696a:	f000 f805 	bl	16978 <__aeabi_idiv0>
   1696e:	bd02      	pop	{r1, pc}

00016970 <__aeabi_idivmod>:
   16970:	2900      	cmp	r1, #0
   16972:	d0f8      	beq.n	16966 <__divsi3+0x1c2>
   16974:	e716      	b.n	167a4 <__divsi3>
   16976:	4770      	bx	lr

00016978 <__aeabi_idiv0>:
   16978:	4770      	bx	lr
   1697a:	46c0      	nop			; (mov r8, r8)

0001697c <__aeabi_lmul>:
   1697c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1697e:	46ce      	mov	lr, r9
   16980:	4647      	mov	r7, r8
   16982:	0415      	lsls	r5, r2, #16
   16984:	0c2d      	lsrs	r5, r5, #16
   16986:	002e      	movs	r6, r5
   16988:	b580      	push	{r7, lr}
   1698a:	0407      	lsls	r7, r0, #16
   1698c:	0c14      	lsrs	r4, r2, #16
   1698e:	0c3f      	lsrs	r7, r7, #16
   16990:	4699      	mov	r9, r3
   16992:	0c03      	lsrs	r3, r0, #16
   16994:	437e      	muls	r6, r7
   16996:	435d      	muls	r5, r3
   16998:	4367      	muls	r7, r4
   1699a:	4363      	muls	r3, r4
   1699c:	197f      	adds	r7, r7, r5
   1699e:	0c34      	lsrs	r4, r6, #16
   169a0:	19e4      	adds	r4, r4, r7
   169a2:	469c      	mov	ip, r3
   169a4:	42a5      	cmp	r5, r4
   169a6:	d903      	bls.n	169b0 <__aeabi_lmul+0x34>
   169a8:	2380      	movs	r3, #128	; 0x80
   169aa:	025b      	lsls	r3, r3, #9
   169ac:	4698      	mov	r8, r3
   169ae:	44c4      	add	ip, r8
   169b0:	464b      	mov	r3, r9
   169b2:	4351      	muls	r1, r2
   169b4:	4343      	muls	r3, r0
   169b6:	0436      	lsls	r6, r6, #16
   169b8:	0c36      	lsrs	r6, r6, #16
   169ba:	0c25      	lsrs	r5, r4, #16
   169bc:	0424      	lsls	r4, r4, #16
   169be:	4465      	add	r5, ip
   169c0:	19a4      	adds	r4, r4, r6
   169c2:	1859      	adds	r1, r3, r1
   169c4:	1949      	adds	r1, r1, r5
   169c6:	0020      	movs	r0, r4
   169c8:	bc0c      	pop	{r2, r3}
   169ca:	4690      	mov	r8, r2
   169cc:	4699      	mov	r9, r3
   169ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000169d0 <atoi>:
   169d0:	b510      	push	{r4, lr}
   169d2:	220a      	movs	r2, #10
   169d4:	2100      	movs	r1, #0
   169d6:	f000 fc1f 	bl	17218 <strtol>
   169da:	bd10      	pop	{r4, pc}

000169dc <__libc_init_array>:
   169dc:	b570      	push	{r4, r5, r6, lr}
   169de:	2600      	movs	r6, #0
   169e0:	4d0c      	ldr	r5, [pc, #48]	; (16a14 <__libc_init_array+0x38>)
   169e2:	4c0d      	ldr	r4, [pc, #52]	; (16a18 <__libc_init_array+0x3c>)
   169e4:	1b64      	subs	r4, r4, r5
   169e6:	10a4      	asrs	r4, r4, #2
   169e8:	42a6      	cmp	r6, r4
   169ea:	d109      	bne.n	16a00 <__libc_init_array+0x24>
   169ec:	2600      	movs	r6, #0
   169ee:	f004 ff2f 	bl	1b850 <_init>
   169f2:	4d0a      	ldr	r5, [pc, #40]	; (16a1c <__libc_init_array+0x40>)
   169f4:	4c0a      	ldr	r4, [pc, #40]	; (16a20 <__libc_init_array+0x44>)
   169f6:	1b64      	subs	r4, r4, r5
   169f8:	10a4      	asrs	r4, r4, #2
   169fa:	42a6      	cmp	r6, r4
   169fc:	d105      	bne.n	16a0a <__libc_init_array+0x2e>
   169fe:	bd70      	pop	{r4, r5, r6, pc}
   16a00:	00b3      	lsls	r3, r6, #2
   16a02:	58eb      	ldr	r3, [r5, r3]
   16a04:	4798      	blx	r3
   16a06:	3601      	adds	r6, #1
   16a08:	e7ee      	b.n	169e8 <__libc_init_array+0xc>
   16a0a:	00b3      	lsls	r3, r6, #2
   16a0c:	58eb      	ldr	r3, [r5, r3]
   16a0e:	4798      	blx	r3
   16a10:	3601      	adds	r6, #1
   16a12:	e7f2      	b.n	169fa <__libc_init_array+0x1e>
   16a14:	0001b85c 	.word	0x0001b85c
   16a18:	0001b85c 	.word	0x0001b85c
   16a1c:	0001b85c 	.word	0x0001b85c
   16a20:	0001b860 	.word	0x0001b860

00016a24 <malloc>:
   16a24:	b510      	push	{r4, lr}
   16a26:	4b03      	ldr	r3, [pc, #12]	; (16a34 <malloc+0x10>)
   16a28:	0001      	movs	r1, r0
   16a2a:	6818      	ldr	r0, [r3, #0]
   16a2c:	f000 f87c 	bl	16b28 <_malloc_r>
   16a30:	bd10      	pop	{r4, pc}
   16a32:	46c0      	nop			; (mov r8, r8)
   16a34:	2000017c 	.word	0x2000017c

00016a38 <free>:
   16a38:	b510      	push	{r4, lr}
   16a3a:	4b03      	ldr	r3, [pc, #12]	; (16a48 <free+0x10>)
   16a3c:	0001      	movs	r1, r0
   16a3e:	6818      	ldr	r0, [r3, #0]
   16a40:	f000 f828 	bl	16a94 <_free_r>
   16a44:	bd10      	pop	{r4, pc}
   16a46:	46c0      	nop			; (mov r8, r8)
   16a48:	2000017c 	.word	0x2000017c

00016a4c <memcpy>:
   16a4c:	2300      	movs	r3, #0
   16a4e:	b510      	push	{r4, lr}
   16a50:	429a      	cmp	r2, r3
   16a52:	d100      	bne.n	16a56 <memcpy+0xa>
   16a54:	bd10      	pop	{r4, pc}
   16a56:	5ccc      	ldrb	r4, [r1, r3]
   16a58:	54c4      	strb	r4, [r0, r3]
   16a5a:	3301      	adds	r3, #1
   16a5c:	e7f8      	b.n	16a50 <memcpy+0x4>

00016a5e <memmove>:
   16a5e:	b510      	push	{r4, lr}
   16a60:	4288      	cmp	r0, r1
   16a62:	d902      	bls.n	16a6a <memmove+0xc>
   16a64:	188b      	adds	r3, r1, r2
   16a66:	4298      	cmp	r0, r3
   16a68:	d308      	bcc.n	16a7c <memmove+0x1e>
   16a6a:	2300      	movs	r3, #0
   16a6c:	429a      	cmp	r2, r3
   16a6e:	d007      	beq.n	16a80 <memmove+0x22>
   16a70:	5ccc      	ldrb	r4, [r1, r3]
   16a72:	54c4      	strb	r4, [r0, r3]
   16a74:	3301      	adds	r3, #1
   16a76:	e7f9      	b.n	16a6c <memmove+0xe>
   16a78:	5c8b      	ldrb	r3, [r1, r2]
   16a7a:	5483      	strb	r3, [r0, r2]
   16a7c:	3a01      	subs	r2, #1
   16a7e:	d2fb      	bcs.n	16a78 <memmove+0x1a>
   16a80:	bd10      	pop	{r4, pc}

00016a82 <memset>:
   16a82:	0003      	movs	r3, r0
   16a84:	1882      	adds	r2, r0, r2
   16a86:	4293      	cmp	r3, r2
   16a88:	d100      	bne.n	16a8c <memset+0xa>
   16a8a:	4770      	bx	lr
   16a8c:	7019      	strb	r1, [r3, #0]
   16a8e:	3301      	adds	r3, #1
   16a90:	e7f9      	b.n	16a86 <memset+0x4>
	...

00016a94 <_free_r>:
   16a94:	b570      	push	{r4, r5, r6, lr}
   16a96:	0005      	movs	r5, r0
   16a98:	2900      	cmp	r1, #0
   16a9a:	d010      	beq.n	16abe <_free_r+0x2a>
   16a9c:	1f0c      	subs	r4, r1, #4
   16a9e:	6823      	ldr	r3, [r4, #0]
   16aa0:	2b00      	cmp	r3, #0
   16aa2:	da00      	bge.n	16aa6 <_free_r+0x12>
   16aa4:	18e4      	adds	r4, r4, r3
   16aa6:	0028      	movs	r0, r5
   16aa8:	f000 fee2 	bl	17870 <__malloc_lock>
   16aac:	4a1d      	ldr	r2, [pc, #116]	; (16b24 <_free_r+0x90>)
   16aae:	6813      	ldr	r3, [r2, #0]
   16ab0:	2b00      	cmp	r3, #0
   16ab2:	d105      	bne.n	16ac0 <_free_r+0x2c>
   16ab4:	6063      	str	r3, [r4, #4]
   16ab6:	6014      	str	r4, [r2, #0]
   16ab8:	0028      	movs	r0, r5
   16aba:	f000 feda 	bl	17872 <__malloc_unlock>
   16abe:	bd70      	pop	{r4, r5, r6, pc}
   16ac0:	42a3      	cmp	r3, r4
   16ac2:	d909      	bls.n	16ad8 <_free_r+0x44>
   16ac4:	6821      	ldr	r1, [r4, #0]
   16ac6:	1860      	adds	r0, r4, r1
   16ac8:	4283      	cmp	r3, r0
   16aca:	d1f3      	bne.n	16ab4 <_free_r+0x20>
   16acc:	6818      	ldr	r0, [r3, #0]
   16ace:	685b      	ldr	r3, [r3, #4]
   16ad0:	1841      	adds	r1, r0, r1
   16ad2:	6021      	str	r1, [r4, #0]
   16ad4:	e7ee      	b.n	16ab4 <_free_r+0x20>
   16ad6:	0013      	movs	r3, r2
   16ad8:	685a      	ldr	r2, [r3, #4]
   16ada:	2a00      	cmp	r2, #0
   16adc:	d001      	beq.n	16ae2 <_free_r+0x4e>
   16ade:	42a2      	cmp	r2, r4
   16ae0:	d9f9      	bls.n	16ad6 <_free_r+0x42>
   16ae2:	6819      	ldr	r1, [r3, #0]
   16ae4:	1858      	adds	r0, r3, r1
   16ae6:	42a0      	cmp	r0, r4
   16ae8:	d10b      	bne.n	16b02 <_free_r+0x6e>
   16aea:	6820      	ldr	r0, [r4, #0]
   16aec:	1809      	adds	r1, r1, r0
   16aee:	1858      	adds	r0, r3, r1
   16af0:	6019      	str	r1, [r3, #0]
   16af2:	4282      	cmp	r2, r0
   16af4:	d1e0      	bne.n	16ab8 <_free_r+0x24>
   16af6:	6810      	ldr	r0, [r2, #0]
   16af8:	6852      	ldr	r2, [r2, #4]
   16afa:	1841      	adds	r1, r0, r1
   16afc:	6019      	str	r1, [r3, #0]
   16afe:	605a      	str	r2, [r3, #4]
   16b00:	e7da      	b.n	16ab8 <_free_r+0x24>
   16b02:	42a0      	cmp	r0, r4
   16b04:	d902      	bls.n	16b0c <_free_r+0x78>
   16b06:	230c      	movs	r3, #12
   16b08:	602b      	str	r3, [r5, #0]
   16b0a:	e7d5      	b.n	16ab8 <_free_r+0x24>
   16b0c:	6821      	ldr	r1, [r4, #0]
   16b0e:	1860      	adds	r0, r4, r1
   16b10:	4282      	cmp	r2, r0
   16b12:	d103      	bne.n	16b1c <_free_r+0x88>
   16b14:	6810      	ldr	r0, [r2, #0]
   16b16:	6852      	ldr	r2, [r2, #4]
   16b18:	1841      	adds	r1, r0, r1
   16b1a:	6021      	str	r1, [r4, #0]
   16b1c:	6062      	str	r2, [r4, #4]
   16b1e:	605c      	str	r4, [r3, #4]
   16b20:	e7ca      	b.n	16ab8 <_free_r+0x24>
   16b22:	46c0      	nop			; (mov r8, r8)
   16b24:	20000f8c 	.word	0x20000f8c

00016b28 <_malloc_r>:
   16b28:	2303      	movs	r3, #3
   16b2a:	b570      	push	{r4, r5, r6, lr}
   16b2c:	1ccd      	adds	r5, r1, #3
   16b2e:	439d      	bics	r5, r3
   16b30:	3508      	adds	r5, #8
   16b32:	0006      	movs	r6, r0
   16b34:	2d0c      	cmp	r5, #12
   16b36:	d21e      	bcs.n	16b76 <_malloc_r+0x4e>
   16b38:	250c      	movs	r5, #12
   16b3a:	42a9      	cmp	r1, r5
   16b3c:	d81d      	bhi.n	16b7a <_malloc_r+0x52>
   16b3e:	0030      	movs	r0, r6
   16b40:	f000 fe96 	bl	17870 <__malloc_lock>
   16b44:	4a25      	ldr	r2, [pc, #148]	; (16bdc <_malloc_r+0xb4>)
   16b46:	6814      	ldr	r4, [r2, #0]
   16b48:	0021      	movs	r1, r4
   16b4a:	2900      	cmp	r1, #0
   16b4c:	d119      	bne.n	16b82 <_malloc_r+0x5a>
   16b4e:	4c24      	ldr	r4, [pc, #144]	; (16be0 <_malloc_r+0xb8>)
   16b50:	6823      	ldr	r3, [r4, #0]
   16b52:	2b00      	cmp	r3, #0
   16b54:	d103      	bne.n	16b5e <_malloc_r+0x36>
   16b56:	0030      	movs	r0, r6
   16b58:	f000 f90c 	bl	16d74 <_sbrk_r>
   16b5c:	6020      	str	r0, [r4, #0]
   16b5e:	0029      	movs	r1, r5
   16b60:	0030      	movs	r0, r6
   16b62:	f000 f907 	bl	16d74 <_sbrk_r>
   16b66:	1c43      	adds	r3, r0, #1
   16b68:	d12c      	bne.n	16bc4 <_malloc_r+0x9c>
   16b6a:	230c      	movs	r3, #12
   16b6c:	0030      	movs	r0, r6
   16b6e:	6033      	str	r3, [r6, #0]
   16b70:	f000 fe7f 	bl	17872 <__malloc_unlock>
   16b74:	e003      	b.n	16b7e <_malloc_r+0x56>
   16b76:	2d00      	cmp	r5, #0
   16b78:	dadf      	bge.n	16b3a <_malloc_r+0x12>
   16b7a:	230c      	movs	r3, #12
   16b7c:	6033      	str	r3, [r6, #0]
   16b7e:	2000      	movs	r0, #0
   16b80:	bd70      	pop	{r4, r5, r6, pc}
   16b82:	680b      	ldr	r3, [r1, #0]
   16b84:	1b5b      	subs	r3, r3, r5
   16b86:	d41a      	bmi.n	16bbe <_malloc_r+0x96>
   16b88:	2b0b      	cmp	r3, #11
   16b8a:	d903      	bls.n	16b94 <_malloc_r+0x6c>
   16b8c:	600b      	str	r3, [r1, #0]
   16b8e:	18cc      	adds	r4, r1, r3
   16b90:	6025      	str	r5, [r4, #0]
   16b92:	e003      	b.n	16b9c <_malloc_r+0x74>
   16b94:	428c      	cmp	r4, r1
   16b96:	d10e      	bne.n	16bb6 <_malloc_r+0x8e>
   16b98:	6863      	ldr	r3, [r4, #4]
   16b9a:	6013      	str	r3, [r2, #0]
   16b9c:	0030      	movs	r0, r6
   16b9e:	f000 fe68 	bl	17872 <__malloc_unlock>
   16ba2:	0020      	movs	r0, r4
   16ba4:	2207      	movs	r2, #7
   16ba6:	300b      	adds	r0, #11
   16ba8:	1d23      	adds	r3, r4, #4
   16baa:	4390      	bics	r0, r2
   16bac:	1ac3      	subs	r3, r0, r3
   16bae:	d0e7      	beq.n	16b80 <_malloc_r+0x58>
   16bb0:	425a      	negs	r2, r3
   16bb2:	50e2      	str	r2, [r4, r3]
   16bb4:	e7e4      	b.n	16b80 <_malloc_r+0x58>
   16bb6:	684b      	ldr	r3, [r1, #4]
   16bb8:	6063      	str	r3, [r4, #4]
   16bba:	000c      	movs	r4, r1
   16bbc:	e7ee      	b.n	16b9c <_malloc_r+0x74>
   16bbe:	000c      	movs	r4, r1
   16bc0:	6849      	ldr	r1, [r1, #4]
   16bc2:	e7c2      	b.n	16b4a <_malloc_r+0x22>
   16bc4:	2303      	movs	r3, #3
   16bc6:	1cc4      	adds	r4, r0, #3
   16bc8:	439c      	bics	r4, r3
   16bca:	42a0      	cmp	r0, r4
   16bcc:	d0e0      	beq.n	16b90 <_malloc_r+0x68>
   16bce:	1a21      	subs	r1, r4, r0
   16bd0:	0030      	movs	r0, r6
   16bd2:	f000 f8cf 	bl	16d74 <_sbrk_r>
   16bd6:	1c43      	adds	r3, r0, #1
   16bd8:	d1da      	bne.n	16b90 <_malloc_r+0x68>
   16bda:	e7c6      	b.n	16b6a <_malloc_r+0x42>
   16bdc:	20000f8c 	.word	0x20000f8c
   16be0:	20000f90 	.word	0x20000f90

00016be4 <iprintf>:
   16be4:	b40f      	push	{r0, r1, r2, r3}
   16be6:	4b0b      	ldr	r3, [pc, #44]	; (16c14 <iprintf+0x30>)
   16be8:	b513      	push	{r0, r1, r4, lr}
   16bea:	681c      	ldr	r4, [r3, #0]
   16bec:	2c00      	cmp	r4, #0
   16bee:	d005      	beq.n	16bfc <iprintf+0x18>
   16bf0:	69a3      	ldr	r3, [r4, #24]
   16bf2:	2b00      	cmp	r3, #0
   16bf4:	d102      	bne.n	16bfc <iprintf+0x18>
   16bf6:	0020      	movs	r0, r4
   16bf8:	f000 fcfa 	bl	175f0 <__sinit>
   16bfc:	ab05      	add	r3, sp, #20
   16bfe:	9a04      	ldr	r2, [sp, #16]
   16c00:	68a1      	ldr	r1, [r4, #8]
   16c02:	0020      	movs	r0, r4
   16c04:	9301      	str	r3, [sp, #4]
   16c06:	f000 ffc3 	bl	17b90 <_vfiprintf_r>
   16c0a:	bc16      	pop	{r1, r2, r4}
   16c0c:	bc08      	pop	{r3}
   16c0e:	b004      	add	sp, #16
   16c10:	4718      	bx	r3
   16c12:	46c0      	nop			; (mov r8, r8)
   16c14:	2000017c 	.word	0x2000017c

00016c18 <putchar>:
   16c18:	4b08      	ldr	r3, [pc, #32]	; (16c3c <putchar+0x24>)
   16c1a:	b570      	push	{r4, r5, r6, lr}
   16c1c:	681c      	ldr	r4, [r3, #0]
   16c1e:	0005      	movs	r5, r0
   16c20:	2c00      	cmp	r4, #0
   16c22:	d005      	beq.n	16c30 <putchar+0x18>
   16c24:	69a3      	ldr	r3, [r4, #24]
   16c26:	2b00      	cmp	r3, #0
   16c28:	d102      	bne.n	16c30 <putchar+0x18>
   16c2a:	0020      	movs	r0, r4
   16c2c:	f000 fce0 	bl	175f0 <__sinit>
   16c30:	0029      	movs	r1, r5
   16c32:	68a2      	ldr	r2, [r4, #8]
   16c34:	0020      	movs	r0, r4
   16c36:	f001 fd61 	bl	186fc <_putc_r>
   16c3a:	bd70      	pop	{r4, r5, r6, pc}
   16c3c:	2000017c 	.word	0x2000017c

00016c40 <_puts_r>:
   16c40:	b570      	push	{r4, r5, r6, lr}
   16c42:	0005      	movs	r5, r0
   16c44:	000e      	movs	r6, r1
   16c46:	2800      	cmp	r0, #0
   16c48:	d004      	beq.n	16c54 <_puts_r+0x14>
   16c4a:	6983      	ldr	r3, [r0, #24]
   16c4c:	2b00      	cmp	r3, #0
   16c4e:	d101      	bne.n	16c54 <_puts_r+0x14>
   16c50:	f000 fcce 	bl	175f0 <__sinit>
   16c54:	69ab      	ldr	r3, [r5, #24]
   16c56:	68ac      	ldr	r4, [r5, #8]
   16c58:	2b00      	cmp	r3, #0
   16c5a:	d102      	bne.n	16c62 <_puts_r+0x22>
   16c5c:	0028      	movs	r0, r5
   16c5e:	f000 fcc7 	bl	175f0 <__sinit>
   16c62:	4b24      	ldr	r3, [pc, #144]	; (16cf4 <_puts_r+0xb4>)
   16c64:	429c      	cmp	r4, r3
   16c66:	d10f      	bne.n	16c88 <_puts_r+0x48>
   16c68:	686c      	ldr	r4, [r5, #4]
   16c6a:	89a3      	ldrh	r3, [r4, #12]
   16c6c:	071b      	lsls	r3, r3, #28
   16c6e:	d502      	bpl.n	16c76 <_puts_r+0x36>
   16c70:	6923      	ldr	r3, [r4, #16]
   16c72:	2b00      	cmp	r3, #0
   16c74:	d120      	bne.n	16cb8 <_puts_r+0x78>
   16c76:	0021      	movs	r1, r4
   16c78:	0028      	movs	r0, r5
   16c7a:	f000 fb37 	bl	172ec <__swsetup_r>
   16c7e:	2800      	cmp	r0, #0
   16c80:	d01a      	beq.n	16cb8 <_puts_r+0x78>
   16c82:	2001      	movs	r0, #1
   16c84:	4240      	negs	r0, r0
   16c86:	bd70      	pop	{r4, r5, r6, pc}
   16c88:	4b1b      	ldr	r3, [pc, #108]	; (16cf8 <_puts_r+0xb8>)
   16c8a:	429c      	cmp	r4, r3
   16c8c:	d101      	bne.n	16c92 <_puts_r+0x52>
   16c8e:	68ac      	ldr	r4, [r5, #8]
   16c90:	e7eb      	b.n	16c6a <_puts_r+0x2a>
   16c92:	4b1a      	ldr	r3, [pc, #104]	; (16cfc <_puts_r+0xbc>)
   16c94:	429c      	cmp	r4, r3
   16c96:	d1e8      	bne.n	16c6a <_puts_r+0x2a>
   16c98:	68ec      	ldr	r4, [r5, #12]
   16c9a:	e7e6      	b.n	16c6a <_puts_r+0x2a>
   16c9c:	3b01      	subs	r3, #1
   16c9e:	3601      	adds	r6, #1
   16ca0:	60a3      	str	r3, [r4, #8]
   16ca2:	2b00      	cmp	r3, #0
   16ca4:	da04      	bge.n	16cb0 <_puts_r+0x70>
   16ca6:	69a2      	ldr	r2, [r4, #24]
   16ca8:	4293      	cmp	r3, r2
   16caa:	db16      	blt.n	16cda <_puts_r+0x9a>
   16cac:	290a      	cmp	r1, #10
   16cae:	d014      	beq.n	16cda <_puts_r+0x9a>
   16cb0:	6823      	ldr	r3, [r4, #0]
   16cb2:	1c5a      	adds	r2, r3, #1
   16cb4:	6022      	str	r2, [r4, #0]
   16cb6:	7019      	strb	r1, [r3, #0]
   16cb8:	7831      	ldrb	r1, [r6, #0]
   16cba:	68a3      	ldr	r3, [r4, #8]
   16cbc:	2900      	cmp	r1, #0
   16cbe:	d1ed      	bne.n	16c9c <_puts_r+0x5c>
   16cc0:	3b01      	subs	r3, #1
   16cc2:	60a3      	str	r3, [r4, #8]
   16cc4:	2b00      	cmp	r3, #0
   16cc6:	da0f      	bge.n	16ce8 <_puts_r+0xa8>
   16cc8:	0022      	movs	r2, r4
   16cca:	310a      	adds	r1, #10
   16ccc:	0028      	movs	r0, r5
   16cce:	f000 fab7 	bl	17240 <__swbuf_r>
   16cd2:	1c43      	adds	r3, r0, #1
   16cd4:	d0d5      	beq.n	16c82 <_puts_r+0x42>
   16cd6:	200a      	movs	r0, #10
   16cd8:	e7d5      	b.n	16c86 <_puts_r+0x46>
   16cda:	0022      	movs	r2, r4
   16cdc:	0028      	movs	r0, r5
   16cde:	f000 faaf 	bl	17240 <__swbuf_r>
   16ce2:	1c43      	adds	r3, r0, #1
   16ce4:	d1e8      	bne.n	16cb8 <_puts_r+0x78>
   16ce6:	e7cc      	b.n	16c82 <_puts_r+0x42>
   16ce8:	200a      	movs	r0, #10
   16cea:	6823      	ldr	r3, [r4, #0]
   16cec:	1c5a      	adds	r2, r3, #1
   16cee:	6022      	str	r2, [r4, #0]
   16cf0:	7018      	strb	r0, [r3, #0]
   16cf2:	e7c8      	b.n	16c86 <_puts_r+0x46>
   16cf4:	0001b6a8 	.word	0x0001b6a8
   16cf8:	0001b6c8 	.word	0x0001b6c8
   16cfc:	0001b688 	.word	0x0001b688

00016d00 <puts>:
   16d00:	b510      	push	{r4, lr}
   16d02:	4b03      	ldr	r3, [pc, #12]	; (16d10 <puts+0x10>)
   16d04:	0001      	movs	r1, r0
   16d06:	6818      	ldr	r0, [r3, #0]
   16d08:	f7ff ff9a 	bl	16c40 <_puts_r>
   16d0c:	bd10      	pop	{r4, pc}
   16d0e:	46c0      	nop			; (mov r8, r8)
   16d10:	2000017c 	.word	0x2000017c

00016d14 <__srget_r>:
   16d14:	b570      	push	{r4, r5, r6, lr}
   16d16:	0005      	movs	r5, r0
   16d18:	000c      	movs	r4, r1
   16d1a:	2800      	cmp	r0, #0
   16d1c:	d004      	beq.n	16d28 <__srget_r+0x14>
   16d1e:	6983      	ldr	r3, [r0, #24]
   16d20:	2b00      	cmp	r3, #0
   16d22:	d101      	bne.n	16d28 <__srget_r+0x14>
   16d24:	f000 fc64 	bl	175f0 <__sinit>
   16d28:	4b0f      	ldr	r3, [pc, #60]	; (16d68 <__srget_r+0x54>)
   16d2a:	429c      	cmp	r4, r3
   16d2c:	d10e      	bne.n	16d4c <__srget_r+0x38>
   16d2e:	686c      	ldr	r4, [r5, #4]
   16d30:	0021      	movs	r1, r4
   16d32:	0028      	movs	r0, r5
   16d34:	f001 fd24 	bl	18780 <__srefill_r>
   16d38:	2800      	cmp	r0, #0
   16d3a:	d111      	bne.n	16d60 <__srget_r+0x4c>
   16d3c:	6863      	ldr	r3, [r4, #4]
   16d3e:	3b01      	subs	r3, #1
   16d40:	6063      	str	r3, [r4, #4]
   16d42:	6823      	ldr	r3, [r4, #0]
   16d44:	1c5a      	adds	r2, r3, #1
   16d46:	6022      	str	r2, [r4, #0]
   16d48:	7818      	ldrb	r0, [r3, #0]
   16d4a:	bd70      	pop	{r4, r5, r6, pc}
   16d4c:	4b07      	ldr	r3, [pc, #28]	; (16d6c <__srget_r+0x58>)
   16d4e:	429c      	cmp	r4, r3
   16d50:	d101      	bne.n	16d56 <__srget_r+0x42>
   16d52:	68ac      	ldr	r4, [r5, #8]
   16d54:	e7ec      	b.n	16d30 <__srget_r+0x1c>
   16d56:	4b06      	ldr	r3, [pc, #24]	; (16d70 <__srget_r+0x5c>)
   16d58:	429c      	cmp	r4, r3
   16d5a:	d1e9      	bne.n	16d30 <__srget_r+0x1c>
   16d5c:	68ec      	ldr	r4, [r5, #12]
   16d5e:	e7e7      	b.n	16d30 <__srget_r+0x1c>
   16d60:	2001      	movs	r0, #1
   16d62:	4240      	negs	r0, r0
   16d64:	e7f1      	b.n	16d4a <__srget_r+0x36>
   16d66:	46c0      	nop			; (mov r8, r8)
   16d68:	0001b6a8 	.word	0x0001b6a8
   16d6c:	0001b6c8 	.word	0x0001b6c8
   16d70:	0001b688 	.word	0x0001b688

00016d74 <_sbrk_r>:
   16d74:	2300      	movs	r3, #0
   16d76:	b570      	push	{r4, r5, r6, lr}
   16d78:	4c06      	ldr	r4, [pc, #24]	; (16d94 <_sbrk_r+0x20>)
   16d7a:	0005      	movs	r5, r0
   16d7c:	0008      	movs	r0, r1
   16d7e:	6023      	str	r3, [r4, #0]
   16d80:	f7f9 fdf8 	bl	10974 <_sbrk>
   16d84:	1c43      	adds	r3, r0, #1
   16d86:	d103      	bne.n	16d90 <_sbrk_r+0x1c>
   16d88:	6823      	ldr	r3, [r4, #0]
   16d8a:	2b00      	cmp	r3, #0
   16d8c:	d000      	beq.n	16d90 <_sbrk_r+0x1c>
   16d8e:	602b      	str	r3, [r5, #0]
   16d90:	bd70      	pop	{r4, r5, r6, pc}
   16d92:	46c0      	nop			; (mov r8, r8)
   16d94:	20001368 	.word	0x20001368

00016d98 <iscanf>:
   16d98:	b40f      	push	{r0, r1, r2, r3}
   16d9a:	4b0b      	ldr	r3, [pc, #44]	; (16dc8 <iscanf+0x30>)
   16d9c:	b513      	push	{r0, r1, r4, lr}
   16d9e:	681c      	ldr	r4, [r3, #0]
   16da0:	2c00      	cmp	r4, #0
   16da2:	d005      	beq.n	16db0 <iscanf+0x18>
   16da4:	69a3      	ldr	r3, [r4, #24]
   16da6:	2b00      	cmp	r3, #0
   16da8:	d102      	bne.n	16db0 <iscanf+0x18>
   16daa:	0020      	movs	r0, r4
   16dac:	f000 fc20 	bl	175f0 <__sinit>
   16db0:	ab05      	add	r3, sp, #20
   16db2:	9a04      	ldr	r2, [sp, #16]
   16db4:	6861      	ldr	r1, [r4, #4]
   16db6:	0020      	movs	r0, r4
   16db8:	9301      	str	r3, [sp, #4]
   16dba:	f001 fb13 	bl	183e4 <_vfiscanf_r>
   16dbe:	bc16      	pop	{r1, r2, r4}
   16dc0:	bc08      	pop	{r3}
   16dc2:	b004      	add	sp, #16
   16dc4:	4718      	bx	r3
   16dc6:	46c0      	nop			; (mov r8, r8)
   16dc8:	2000017c 	.word	0x2000017c

00016dcc <setbuf>:
   16dcc:	424a      	negs	r2, r1
   16dce:	414a      	adcs	r2, r1
   16dd0:	2380      	movs	r3, #128	; 0x80
   16dd2:	b510      	push	{r4, lr}
   16dd4:	0052      	lsls	r2, r2, #1
   16dd6:	00db      	lsls	r3, r3, #3
   16dd8:	f000 f802 	bl	16de0 <setvbuf>
   16ddc:	bd10      	pop	{r4, pc}
	...

00016de0 <setvbuf>:
   16de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16de2:	001d      	movs	r5, r3
   16de4:	4b4f      	ldr	r3, [pc, #316]	; (16f24 <setvbuf+0x144>)
   16de6:	b085      	sub	sp, #20
   16de8:	681e      	ldr	r6, [r3, #0]
   16dea:	0004      	movs	r4, r0
   16dec:	000f      	movs	r7, r1
   16dee:	9200      	str	r2, [sp, #0]
   16df0:	2e00      	cmp	r6, #0
   16df2:	d005      	beq.n	16e00 <setvbuf+0x20>
   16df4:	69b3      	ldr	r3, [r6, #24]
   16df6:	2b00      	cmp	r3, #0
   16df8:	d102      	bne.n	16e00 <setvbuf+0x20>
   16dfa:	0030      	movs	r0, r6
   16dfc:	f000 fbf8 	bl	175f0 <__sinit>
   16e00:	4b49      	ldr	r3, [pc, #292]	; (16f28 <setvbuf+0x148>)
   16e02:	429c      	cmp	r4, r3
   16e04:	d150      	bne.n	16ea8 <setvbuf+0xc8>
   16e06:	6874      	ldr	r4, [r6, #4]
   16e08:	9b00      	ldr	r3, [sp, #0]
   16e0a:	2b02      	cmp	r3, #2
   16e0c:	d005      	beq.n	16e1a <setvbuf+0x3a>
   16e0e:	2b01      	cmp	r3, #1
   16e10:	d900      	bls.n	16e14 <setvbuf+0x34>
   16e12:	e084      	b.n	16f1e <setvbuf+0x13e>
   16e14:	2d00      	cmp	r5, #0
   16e16:	da00      	bge.n	16e1a <setvbuf+0x3a>
   16e18:	e081      	b.n	16f1e <setvbuf+0x13e>
   16e1a:	0021      	movs	r1, r4
   16e1c:	0030      	movs	r0, r6
   16e1e:	f000 fb65 	bl	174ec <_fflush_r>
   16e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16e24:	2900      	cmp	r1, #0
   16e26:	d008      	beq.n	16e3a <setvbuf+0x5a>
   16e28:	0023      	movs	r3, r4
   16e2a:	3344      	adds	r3, #68	; 0x44
   16e2c:	4299      	cmp	r1, r3
   16e2e:	d002      	beq.n	16e36 <setvbuf+0x56>
   16e30:	0030      	movs	r0, r6
   16e32:	f7ff fe2f 	bl	16a94 <_free_r>
   16e36:	2300      	movs	r3, #0
   16e38:	6363      	str	r3, [r4, #52]	; 0x34
   16e3a:	2300      	movs	r3, #0
   16e3c:	61a3      	str	r3, [r4, #24]
   16e3e:	6063      	str	r3, [r4, #4]
   16e40:	89a3      	ldrh	r3, [r4, #12]
   16e42:	061b      	lsls	r3, r3, #24
   16e44:	d503      	bpl.n	16e4e <setvbuf+0x6e>
   16e46:	6921      	ldr	r1, [r4, #16]
   16e48:	0030      	movs	r0, r6
   16e4a:	f7ff fe23 	bl	16a94 <_free_r>
   16e4e:	89a3      	ldrh	r3, [r4, #12]
   16e50:	4a36      	ldr	r2, [pc, #216]	; (16f2c <setvbuf+0x14c>)
   16e52:	4013      	ands	r3, r2
   16e54:	81a3      	strh	r3, [r4, #12]
   16e56:	9b00      	ldr	r3, [sp, #0]
   16e58:	2b02      	cmp	r3, #2
   16e5a:	d05a      	beq.n	16f12 <setvbuf+0x132>
   16e5c:	ab03      	add	r3, sp, #12
   16e5e:	aa02      	add	r2, sp, #8
   16e60:	0021      	movs	r1, r4
   16e62:	0030      	movs	r0, r6
   16e64:	f000 fc86 	bl	17774 <__swhatbuf_r>
   16e68:	89a3      	ldrh	r3, [r4, #12]
   16e6a:	4318      	orrs	r0, r3
   16e6c:	81a0      	strh	r0, [r4, #12]
   16e6e:	2d00      	cmp	r5, #0
   16e70:	d124      	bne.n	16ebc <setvbuf+0xdc>
   16e72:	9d02      	ldr	r5, [sp, #8]
   16e74:	0028      	movs	r0, r5
   16e76:	f7ff fdd5 	bl	16a24 <malloc>
   16e7a:	9501      	str	r5, [sp, #4]
   16e7c:	1e07      	subs	r7, r0, #0
   16e7e:	d142      	bne.n	16f06 <setvbuf+0x126>
   16e80:	9b02      	ldr	r3, [sp, #8]
   16e82:	9301      	str	r3, [sp, #4]
   16e84:	42ab      	cmp	r3, r5
   16e86:	d139      	bne.n	16efc <setvbuf+0x11c>
   16e88:	2001      	movs	r0, #1
   16e8a:	4240      	negs	r0, r0
   16e8c:	2302      	movs	r3, #2
   16e8e:	89a2      	ldrh	r2, [r4, #12]
   16e90:	4313      	orrs	r3, r2
   16e92:	81a3      	strh	r3, [r4, #12]
   16e94:	2300      	movs	r3, #0
   16e96:	60a3      	str	r3, [r4, #8]
   16e98:	0023      	movs	r3, r4
   16e9a:	3347      	adds	r3, #71	; 0x47
   16e9c:	6023      	str	r3, [r4, #0]
   16e9e:	6123      	str	r3, [r4, #16]
   16ea0:	2301      	movs	r3, #1
   16ea2:	6163      	str	r3, [r4, #20]
   16ea4:	b005      	add	sp, #20
   16ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16ea8:	4b21      	ldr	r3, [pc, #132]	; (16f30 <setvbuf+0x150>)
   16eaa:	429c      	cmp	r4, r3
   16eac:	d101      	bne.n	16eb2 <setvbuf+0xd2>
   16eae:	68b4      	ldr	r4, [r6, #8]
   16eb0:	e7aa      	b.n	16e08 <setvbuf+0x28>
   16eb2:	4b20      	ldr	r3, [pc, #128]	; (16f34 <setvbuf+0x154>)
   16eb4:	429c      	cmp	r4, r3
   16eb6:	d1a7      	bne.n	16e08 <setvbuf+0x28>
   16eb8:	68f4      	ldr	r4, [r6, #12]
   16eba:	e7a5      	b.n	16e08 <setvbuf+0x28>
   16ebc:	2f00      	cmp	r7, #0
   16ebe:	d0d9      	beq.n	16e74 <setvbuf+0x94>
   16ec0:	69b3      	ldr	r3, [r6, #24]
   16ec2:	2b00      	cmp	r3, #0
   16ec4:	d102      	bne.n	16ecc <setvbuf+0xec>
   16ec6:	0030      	movs	r0, r6
   16ec8:	f000 fb92 	bl	175f0 <__sinit>
   16ecc:	9b00      	ldr	r3, [sp, #0]
   16ece:	2b01      	cmp	r3, #1
   16ed0:	d103      	bne.n	16eda <setvbuf+0xfa>
   16ed2:	89a3      	ldrh	r3, [r4, #12]
   16ed4:	9a00      	ldr	r2, [sp, #0]
   16ed6:	431a      	orrs	r2, r3
   16ed8:	81a2      	strh	r2, [r4, #12]
   16eda:	2008      	movs	r0, #8
   16edc:	89a3      	ldrh	r3, [r4, #12]
   16ede:	6027      	str	r7, [r4, #0]
   16ee0:	6127      	str	r7, [r4, #16]
   16ee2:	6165      	str	r5, [r4, #20]
   16ee4:	4018      	ands	r0, r3
   16ee6:	d018      	beq.n	16f1a <setvbuf+0x13a>
   16ee8:	2001      	movs	r0, #1
   16eea:	4018      	ands	r0, r3
   16eec:	2300      	movs	r3, #0
   16eee:	4298      	cmp	r0, r3
   16ef0:	d011      	beq.n	16f16 <setvbuf+0x136>
   16ef2:	426d      	negs	r5, r5
   16ef4:	60a3      	str	r3, [r4, #8]
   16ef6:	61a5      	str	r5, [r4, #24]
   16ef8:	0018      	movs	r0, r3
   16efa:	e7d3      	b.n	16ea4 <setvbuf+0xc4>
   16efc:	9801      	ldr	r0, [sp, #4]
   16efe:	f7ff fd91 	bl	16a24 <malloc>
   16f02:	1e07      	subs	r7, r0, #0
   16f04:	d0c0      	beq.n	16e88 <setvbuf+0xa8>
   16f06:	2380      	movs	r3, #128	; 0x80
   16f08:	89a2      	ldrh	r2, [r4, #12]
   16f0a:	9d01      	ldr	r5, [sp, #4]
   16f0c:	4313      	orrs	r3, r2
   16f0e:	81a3      	strh	r3, [r4, #12]
   16f10:	e7d6      	b.n	16ec0 <setvbuf+0xe0>
   16f12:	2000      	movs	r0, #0
   16f14:	e7ba      	b.n	16e8c <setvbuf+0xac>
   16f16:	60a5      	str	r5, [r4, #8]
   16f18:	e7c4      	b.n	16ea4 <setvbuf+0xc4>
   16f1a:	60a0      	str	r0, [r4, #8]
   16f1c:	e7c2      	b.n	16ea4 <setvbuf+0xc4>
   16f1e:	2001      	movs	r0, #1
   16f20:	4240      	negs	r0, r0
   16f22:	e7bf      	b.n	16ea4 <setvbuf+0xc4>
   16f24:	2000017c 	.word	0x2000017c
   16f28:	0001b6a8 	.word	0x0001b6a8
   16f2c:	fffff35c 	.word	0xfffff35c
   16f30:	0001b6c8 	.word	0x0001b6c8
   16f34:	0001b688 	.word	0x0001b688

00016f38 <sniprintf>:
   16f38:	b40c      	push	{r2, r3}
   16f3a:	b530      	push	{r4, r5, lr}
   16f3c:	4b16      	ldr	r3, [pc, #88]	; (16f98 <sniprintf+0x60>)
   16f3e:	b09d      	sub	sp, #116	; 0x74
   16f40:	1e0c      	subs	r4, r1, #0
   16f42:	681d      	ldr	r5, [r3, #0]
   16f44:	da08      	bge.n	16f58 <sniprintf+0x20>
   16f46:	238b      	movs	r3, #139	; 0x8b
   16f48:	2001      	movs	r0, #1
   16f4a:	602b      	str	r3, [r5, #0]
   16f4c:	4240      	negs	r0, r0
   16f4e:	b01d      	add	sp, #116	; 0x74
   16f50:	bc30      	pop	{r4, r5}
   16f52:	bc08      	pop	{r3}
   16f54:	b002      	add	sp, #8
   16f56:	4718      	bx	r3
   16f58:	2382      	movs	r3, #130	; 0x82
   16f5a:	a902      	add	r1, sp, #8
   16f5c:	009b      	lsls	r3, r3, #2
   16f5e:	818b      	strh	r3, [r1, #12]
   16f60:	2300      	movs	r3, #0
   16f62:	9002      	str	r0, [sp, #8]
   16f64:	6108      	str	r0, [r1, #16]
   16f66:	429c      	cmp	r4, r3
   16f68:	d000      	beq.n	16f6c <sniprintf+0x34>
   16f6a:	1e63      	subs	r3, r4, #1
   16f6c:	608b      	str	r3, [r1, #8]
   16f6e:	614b      	str	r3, [r1, #20]
   16f70:	2301      	movs	r3, #1
   16f72:	425b      	negs	r3, r3
   16f74:	81cb      	strh	r3, [r1, #14]
   16f76:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16f78:	ab21      	add	r3, sp, #132	; 0x84
   16f7a:	0028      	movs	r0, r5
   16f7c:	9301      	str	r3, [sp, #4]
   16f7e:	f000 fcdb 	bl	17938 <_svfiprintf_r>
   16f82:	1c43      	adds	r3, r0, #1
   16f84:	da01      	bge.n	16f8a <sniprintf+0x52>
   16f86:	238b      	movs	r3, #139	; 0x8b
   16f88:	602b      	str	r3, [r5, #0]
   16f8a:	2c00      	cmp	r4, #0
   16f8c:	d0df      	beq.n	16f4e <sniprintf+0x16>
   16f8e:	2300      	movs	r3, #0
   16f90:	9a02      	ldr	r2, [sp, #8]
   16f92:	7013      	strb	r3, [r2, #0]
   16f94:	e7db      	b.n	16f4e <sniprintf+0x16>
   16f96:	46c0      	nop			; (mov r8, r8)
   16f98:	2000017c 	.word	0x2000017c

00016f9c <siprintf>:
   16f9c:	b40e      	push	{r1, r2, r3}
   16f9e:	b510      	push	{r4, lr}
   16fa0:	b09d      	sub	sp, #116	; 0x74
   16fa2:	a902      	add	r1, sp, #8
   16fa4:	9002      	str	r0, [sp, #8]
   16fa6:	6108      	str	r0, [r1, #16]
   16fa8:	480b      	ldr	r0, [pc, #44]	; (16fd8 <siprintf+0x3c>)
   16faa:	2482      	movs	r4, #130	; 0x82
   16fac:	6088      	str	r0, [r1, #8]
   16fae:	6148      	str	r0, [r1, #20]
   16fb0:	2001      	movs	r0, #1
   16fb2:	4240      	negs	r0, r0
   16fb4:	ab1f      	add	r3, sp, #124	; 0x7c
   16fb6:	81c8      	strh	r0, [r1, #14]
   16fb8:	4808      	ldr	r0, [pc, #32]	; (16fdc <siprintf+0x40>)
   16fba:	cb04      	ldmia	r3!, {r2}
   16fbc:	00a4      	lsls	r4, r4, #2
   16fbe:	6800      	ldr	r0, [r0, #0]
   16fc0:	9301      	str	r3, [sp, #4]
   16fc2:	818c      	strh	r4, [r1, #12]
   16fc4:	f000 fcb8 	bl	17938 <_svfiprintf_r>
   16fc8:	2300      	movs	r3, #0
   16fca:	9a02      	ldr	r2, [sp, #8]
   16fcc:	7013      	strb	r3, [r2, #0]
   16fce:	b01d      	add	sp, #116	; 0x74
   16fd0:	bc10      	pop	{r4}
   16fd2:	bc08      	pop	{r3}
   16fd4:	b003      	add	sp, #12
   16fd6:	4718      	bx	r3
   16fd8:	7fffffff 	.word	0x7fffffff
   16fdc:	2000017c 	.word	0x2000017c

00016fe0 <strcmp>:
   16fe0:	7802      	ldrb	r2, [r0, #0]
   16fe2:	780b      	ldrb	r3, [r1, #0]
   16fe4:	2a00      	cmp	r2, #0
   16fe6:	d003      	beq.n	16ff0 <strcmp+0x10>
   16fe8:	3001      	adds	r0, #1
   16fea:	3101      	adds	r1, #1
   16fec:	429a      	cmp	r2, r3
   16fee:	d0f7      	beq.n	16fe0 <strcmp>
   16ff0:	1ad0      	subs	r0, r2, r3
   16ff2:	4770      	bx	lr

00016ff4 <strcpy>:
   16ff4:	1c03      	adds	r3, r0, #0
   16ff6:	780a      	ldrb	r2, [r1, #0]
   16ff8:	3101      	adds	r1, #1
   16ffa:	701a      	strb	r2, [r3, #0]
   16ffc:	3301      	adds	r3, #1
   16ffe:	2a00      	cmp	r2, #0
   17000:	d1f9      	bne.n	16ff6 <strcpy+0x2>
   17002:	4770      	bx	lr

00017004 <strdup>:
   17004:	b510      	push	{r4, lr}
   17006:	4b03      	ldr	r3, [pc, #12]	; (17014 <strdup+0x10>)
   17008:	0001      	movs	r1, r0
   1700a:	6818      	ldr	r0, [r3, #0]
   1700c:	f000 f804 	bl	17018 <_strdup_r>
   17010:	bd10      	pop	{r4, pc}
   17012:	46c0      	nop			; (mov r8, r8)
   17014:	2000017c 	.word	0x2000017c

00017018 <_strdup_r>:
   17018:	b570      	push	{r4, r5, r6, lr}
   1701a:	0005      	movs	r5, r0
   1701c:	0008      	movs	r0, r1
   1701e:	000e      	movs	r6, r1
   17020:	f000 f80d 	bl	1703e <strlen>
   17024:	1c44      	adds	r4, r0, #1
   17026:	0021      	movs	r1, r4
   17028:	0028      	movs	r0, r5
   1702a:	f7ff fd7d 	bl	16b28 <_malloc_r>
   1702e:	1e05      	subs	r5, r0, #0
   17030:	d003      	beq.n	1703a <_strdup_r+0x22>
   17032:	0022      	movs	r2, r4
   17034:	0031      	movs	r1, r6
   17036:	f7ff fd09 	bl	16a4c <memcpy>
   1703a:	0028      	movs	r0, r5
   1703c:	bd70      	pop	{r4, r5, r6, pc}

0001703e <strlen>:
   1703e:	2300      	movs	r3, #0
   17040:	5cc2      	ldrb	r2, [r0, r3]
   17042:	3301      	adds	r3, #1
   17044:	2a00      	cmp	r2, #0
   17046:	d1fb      	bne.n	17040 <strlen+0x2>
   17048:	1e58      	subs	r0, r3, #1
   1704a:	4770      	bx	lr

0001704c <strncmp>:
   1704c:	2300      	movs	r3, #0
   1704e:	b530      	push	{r4, r5, lr}
   17050:	429a      	cmp	r2, r3
   17052:	d00a      	beq.n	1706a <strncmp+0x1e>
   17054:	3a01      	subs	r2, #1
   17056:	5cc4      	ldrb	r4, [r0, r3]
   17058:	5ccd      	ldrb	r5, [r1, r3]
   1705a:	42ac      	cmp	r4, r5
   1705c:	d104      	bne.n	17068 <strncmp+0x1c>
   1705e:	429a      	cmp	r2, r3
   17060:	d002      	beq.n	17068 <strncmp+0x1c>
   17062:	3301      	adds	r3, #1
   17064:	2c00      	cmp	r4, #0
   17066:	d1f6      	bne.n	17056 <strncmp+0xa>
   17068:	1b63      	subs	r3, r4, r5
   1706a:	0018      	movs	r0, r3
   1706c:	bd30      	pop	{r4, r5, pc}

0001706e <strncpy>:
   1706e:	b570      	push	{r4, r5, r6, lr}
   17070:	0004      	movs	r4, r0
   17072:	2a00      	cmp	r2, #0
   17074:	d100      	bne.n	17078 <strncpy+0xa>
   17076:	bd70      	pop	{r4, r5, r6, pc}
   17078:	780d      	ldrb	r5, [r1, #0]
   1707a:	1e56      	subs	r6, r2, #1
   1707c:	1c63      	adds	r3, r4, #1
   1707e:	7025      	strb	r5, [r4, #0]
   17080:	3101      	adds	r1, #1
   17082:	2d00      	cmp	r5, #0
   17084:	d105      	bne.n	17092 <strncpy+0x24>
   17086:	18a4      	adds	r4, r4, r2
   17088:	429c      	cmp	r4, r3
   1708a:	d0f4      	beq.n	17076 <strncpy+0x8>
   1708c:	701d      	strb	r5, [r3, #0]
   1708e:	3301      	adds	r3, #1
   17090:	e7fa      	b.n	17088 <strncpy+0x1a>
   17092:	001c      	movs	r4, r3
   17094:	0032      	movs	r2, r6
   17096:	e7ec      	b.n	17072 <strncpy+0x4>

00017098 <strrchr>:
   17098:	b570      	push	{r4, r5, r6, lr}
   1709a:	000d      	movs	r5, r1
   1709c:	2400      	movs	r4, #0
   1709e:	2900      	cmp	r1, #0
   170a0:	d105      	bne.n	170ae <strrchr+0x16>
   170a2:	f001 fc7b 	bl	1899c <strchr>
   170a6:	0004      	movs	r4, r0
   170a8:	e006      	b.n	170b8 <strrchr+0x20>
   170aa:	001c      	movs	r4, r3
   170ac:	1c58      	adds	r0, r3, #1
   170ae:	0029      	movs	r1, r5
   170b0:	f001 fc74 	bl	1899c <strchr>
   170b4:	1e03      	subs	r3, r0, #0
   170b6:	d1f8      	bne.n	170aa <strrchr+0x12>
   170b8:	0020      	movs	r0, r4
   170ba:	bd70      	pop	{r4, r5, r6, pc}

000170bc <strstr>:
   170bc:	b510      	push	{r4, lr}
   170be:	0002      	movs	r2, r0
   170c0:	7800      	ldrb	r0, [r0, #0]
   170c2:	2800      	cmp	r0, #0
   170c4:	d104      	bne.n	170d0 <strstr+0x14>
   170c6:	7809      	ldrb	r1, [r1, #0]
   170c8:	2900      	cmp	r1, #0
   170ca:	d00d      	beq.n	170e8 <strstr+0x2c>
   170cc:	bd10      	pop	{r4, pc}
   170ce:	3201      	adds	r2, #1
   170d0:	7810      	ldrb	r0, [r2, #0]
   170d2:	2800      	cmp	r0, #0
   170d4:	d0fa      	beq.n	170cc <strstr+0x10>
   170d6:	2300      	movs	r3, #0
   170d8:	5cc8      	ldrb	r0, [r1, r3]
   170da:	2800      	cmp	r0, #0
   170dc:	d004      	beq.n	170e8 <strstr+0x2c>
   170de:	5cd4      	ldrb	r4, [r2, r3]
   170e0:	4284      	cmp	r4, r0
   170e2:	d1f4      	bne.n	170ce <strstr+0x12>
   170e4:	3301      	adds	r3, #1
   170e6:	e7f7      	b.n	170d8 <strstr+0x1c>
   170e8:	0010      	movs	r0, r2
   170ea:	e7ef      	b.n	170cc <strstr+0x10>

000170ec <_strtol_l.isra.0>:
   170ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   170ee:	001f      	movs	r7, r3
   170f0:	000e      	movs	r6, r1
   170f2:	b087      	sub	sp, #28
   170f4:	9005      	str	r0, [sp, #20]
   170f6:	9103      	str	r1, [sp, #12]
   170f8:	9202      	str	r2, [sp, #8]
   170fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   170fc:	7834      	ldrb	r4, [r6, #0]
   170fe:	f000 fb28 	bl	17752 <__locale_ctype_ptr_l>
   17102:	2208      	movs	r2, #8
   17104:	1900      	adds	r0, r0, r4
   17106:	7843      	ldrb	r3, [r0, #1]
   17108:	1c75      	adds	r5, r6, #1
   1710a:	4013      	ands	r3, r2
   1710c:	d10c      	bne.n	17128 <_strtol_l.isra.0+0x3c>
   1710e:	2c2d      	cmp	r4, #45	; 0x2d
   17110:	d10c      	bne.n	1712c <_strtol_l.isra.0+0x40>
   17112:	3301      	adds	r3, #1
   17114:	782c      	ldrb	r4, [r5, #0]
   17116:	9301      	str	r3, [sp, #4]
   17118:	1cb5      	adds	r5, r6, #2
   1711a:	2f00      	cmp	r7, #0
   1711c:	d00c      	beq.n	17138 <_strtol_l.isra.0+0x4c>
   1711e:	2f10      	cmp	r7, #16
   17120:	d114      	bne.n	1714c <_strtol_l.isra.0+0x60>
   17122:	2c30      	cmp	r4, #48	; 0x30
   17124:	d00a      	beq.n	1713c <_strtol_l.isra.0+0x50>
   17126:	e011      	b.n	1714c <_strtol_l.isra.0+0x60>
   17128:	002e      	movs	r6, r5
   1712a:	e7e6      	b.n	170fa <_strtol_l.isra.0+0xe>
   1712c:	9301      	str	r3, [sp, #4]
   1712e:	2c2b      	cmp	r4, #43	; 0x2b
   17130:	d1f3      	bne.n	1711a <_strtol_l.isra.0+0x2e>
   17132:	782c      	ldrb	r4, [r5, #0]
   17134:	1cb5      	adds	r5, r6, #2
   17136:	e7f0      	b.n	1711a <_strtol_l.isra.0+0x2e>
   17138:	2c30      	cmp	r4, #48	; 0x30
   1713a:	d12f      	bne.n	1719c <_strtol_l.isra.0+0xb0>
   1713c:	2220      	movs	r2, #32
   1713e:	782b      	ldrb	r3, [r5, #0]
   17140:	4393      	bics	r3, r2
   17142:	2b58      	cmp	r3, #88	; 0x58
   17144:	d151      	bne.n	171ea <_strtol_l.isra.0+0xfe>
   17146:	2710      	movs	r7, #16
   17148:	786c      	ldrb	r4, [r5, #1]
   1714a:	3502      	adds	r5, #2
   1714c:	9b01      	ldr	r3, [sp, #4]
   1714e:	4a29      	ldr	r2, [pc, #164]	; (171f4 <_strtol_l.isra.0+0x108>)
   17150:	0039      	movs	r1, r7
   17152:	189e      	adds	r6, r3, r2
   17154:	0030      	movs	r0, r6
   17156:	f7ff fb21 	bl	1679c <__aeabi_uidivmod>
   1715a:	0030      	movs	r0, r6
   1715c:	9104      	str	r1, [sp, #16]
   1715e:	0039      	movs	r1, r7
   17160:	f7ff fa96 	bl	16690 <__udivsi3>
   17164:	2101      	movs	r1, #1
   17166:	2300      	movs	r3, #0
   17168:	4249      	negs	r1, r1
   1716a:	0002      	movs	r2, r0
   1716c:	468c      	mov	ip, r1
   1716e:	0018      	movs	r0, r3
   17170:	0021      	movs	r1, r4
   17172:	3930      	subs	r1, #48	; 0x30
   17174:	2909      	cmp	r1, #9
   17176:	d813      	bhi.n	171a0 <_strtol_l.isra.0+0xb4>
   17178:	000c      	movs	r4, r1
   1717a:	42a7      	cmp	r7, r4
   1717c:	dd1c      	ble.n	171b8 <_strtol_l.isra.0+0xcc>
   1717e:	1c59      	adds	r1, r3, #1
   17180:	d009      	beq.n	17196 <_strtol_l.isra.0+0xaa>
   17182:	4663      	mov	r3, ip
   17184:	4282      	cmp	r2, r0
   17186:	d306      	bcc.n	17196 <_strtol_l.isra.0+0xaa>
   17188:	d102      	bne.n	17190 <_strtol_l.isra.0+0xa4>
   1718a:	9904      	ldr	r1, [sp, #16]
   1718c:	42a1      	cmp	r1, r4
   1718e:	db02      	blt.n	17196 <_strtol_l.isra.0+0xaa>
   17190:	2301      	movs	r3, #1
   17192:	4378      	muls	r0, r7
   17194:	1820      	adds	r0, r4, r0
   17196:	782c      	ldrb	r4, [r5, #0]
   17198:	3501      	adds	r5, #1
   1719a:	e7e9      	b.n	17170 <_strtol_l.isra.0+0x84>
   1719c:	270a      	movs	r7, #10
   1719e:	e7d5      	b.n	1714c <_strtol_l.isra.0+0x60>
   171a0:	0021      	movs	r1, r4
   171a2:	3941      	subs	r1, #65	; 0x41
   171a4:	2919      	cmp	r1, #25
   171a6:	d801      	bhi.n	171ac <_strtol_l.isra.0+0xc0>
   171a8:	3c37      	subs	r4, #55	; 0x37
   171aa:	e7e6      	b.n	1717a <_strtol_l.isra.0+0x8e>
   171ac:	0021      	movs	r1, r4
   171ae:	3961      	subs	r1, #97	; 0x61
   171b0:	2919      	cmp	r1, #25
   171b2:	d801      	bhi.n	171b8 <_strtol_l.isra.0+0xcc>
   171b4:	3c57      	subs	r4, #87	; 0x57
   171b6:	e7e0      	b.n	1717a <_strtol_l.isra.0+0x8e>
   171b8:	1c5a      	adds	r2, r3, #1
   171ba:	d108      	bne.n	171ce <_strtol_l.isra.0+0xe2>
   171bc:	9a05      	ldr	r2, [sp, #20]
   171be:	3323      	adds	r3, #35	; 0x23
   171c0:	6013      	str	r3, [r2, #0]
   171c2:	9b02      	ldr	r3, [sp, #8]
   171c4:	0030      	movs	r0, r6
   171c6:	2b00      	cmp	r3, #0
   171c8:	d10b      	bne.n	171e2 <_strtol_l.isra.0+0xf6>
   171ca:	b007      	add	sp, #28
   171cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   171ce:	9a01      	ldr	r2, [sp, #4]
   171d0:	2a00      	cmp	r2, #0
   171d2:	d000      	beq.n	171d6 <_strtol_l.isra.0+0xea>
   171d4:	4240      	negs	r0, r0
   171d6:	9a02      	ldr	r2, [sp, #8]
   171d8:	2a00      	cmp	r2, #0
   171da:	d0f6      	beq.n	171ca <_strtol_l.isra.0+0xde>
   171dc:	9a03      	ldr	r2, [sp, #12]
   171de:	2b00      	cmp	r3, #0
   171e0:	d000      	beq.n	171e4 <_strtol_l.isra.0+0xf8>
   171e2:	1e6a      	subs	r2, r5, #1
   171e4:	9b02      	ldr	r3, [sp, #8]
   171e6:	601a      	str	r2, [r3, #0]
   171e8:	e7ef      	b.n	171ca <_strtol_l.isra.0+0xde>
   171ea:	2430      	movs	r4, #48	; 0x30
   171ec:	2f00      	cmp	r7, #0
   171ee:	d1ad      	bne.n	1714c <_strtol_l.isra.0+0x60>
   171f0:	3708      	adds	r7, #8
   171f2:	e7ab      	b.n	1714c <_strtol_l.isra.0+0x60>
   171f4:	7fffffff 	.word	0x7fffffff

000171f8 <_strtol_r>:
   171f8:	b513      	push	{r0, r1, r4, lr}
   171fa:	4c05      	ldr	r4, [pc, #20]	; (17210 <_strtol_r+0x18>)
   171fc:	6824      	ldr	r4, [r4, #0]
   171fe:	6a24      	ldr	r4, [r4, #32]
   17200:	2c00      	cmp	r4, #0
   17202:	d100      	bne.n	17206 <_strtol_r+0xe>
   17204:	4c03      	ldr	r4, [pc, #12]	; (17214 <_strtol_r+0x1c>)
   17206:	9400      	str	r4, [sp, #0]
   17208:	f7ff ff70 	bl	170ec <_strtol_l.isra.0>
   1720c:	bd16      	pop	{r1, r2, r4, pc}
   1720e:	46c0      	nop			; (mov r8, r8)
   17210:	2000017c 	.word	0x2000017c
   17214:	200001e0 	.word	0x200001e0

00017218 <strtol>:
   17218:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1721a:	0013      	movs	r3, r2
   1721c:	4a06      	ldr	r2, [pc, #24]	; (17238 <strtol+0x20>)
   1721e:	0005      	movs	r5, r0
   17220:	6810      	ldr	r0, [r2, #0]
   17222:	6a04      	ldr	r4, [r0, #32]
   17224:	2c00      	cmp	r4, #0
   17226:	d100      	bne.n	1722a <strtol+0x12>
   17228:	4c04      	ldr	r4, [pc, #16]	; (1723c <strtol+0x24>)
   1722a:	000a      	movs	r2, r1
   1722c:	9400      	str	r4, [sp, #0]
   1722e:	0029      	movs	r1, r5
   17230:	f7ff ff5c 	bl	170ec <_strtol_l.isra.0>
   17234:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   17236:	46c0      	nop			; (mov r8, r8)
   17238:	2000017c 	.word	0x2000017c
   1723c:	200001e0 	.word	0x200001e0

00017240 <__swbuf_r>:
   17240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17242:	0005      	movs	r5, r0
   17244:	000e      	movs	r6, r1
   17246:	0014      	movs	r4, r2
   17248:	2800      	cmp	r0, #0
   1724a:	d004      	beq.n	17256 <__swbuf_r+0x16>
   1724c:	6983      	ldr	r3, [r0, #24]
   1724e:	2b00      	cmp	r3, #0
   17250:	d101      	bne.n	17256 <__swbuf_r+0x16>
   17252:	f000 f9cd 	bl	175f0 <__sinit>
   17256:	4b22      	ldr	r3, [pc, #136]	; (172e0 <__swbuf_r+0xa0>)
   17258:	429c      	cmp	r4, r3
   1725a:	d12d      	bne.n	172b8 <__swbuf_r+0x78>
   1725c:	686c      	ldr	r4, [r5, #4]
   1725e:	69a3      	ldr	r3, [r4, #24]
   17260:	60a3      	str	r3, [r4, #8]
   17262:	89a3      	ldrh	r3, [r4, #12]
   17264:	071b      	lsls	r3, r3, #28
   17266:	d531      	bpl.n	172cc <__swbuf_r+0x8c>
   17268:	6923      	ldr	r3, [r4, #16]
   1726a:	2b00      	cmp	r3, #0
   1726c:	d02e      	beq.n	172cc <__swbuf_r+0x8c>
   1726e:	6823      	ldr	r3, [r4, #0]
   17270:	6922      	ldr	r2, [r4, #16]
   17272:	b2f7      	uxtb	r7, r6
   17274:	1a98      	subs	r0, r3, r2
   17276:	6963      	ldr	r3, [r4, #20]
   17278:	b2f6      	uxtb	r6, r6
   1727a:	4298      	cmp	r0, r3
   1727c:	db05      	blt.n	1728a <__swbuf_r+0x4a>
   1727e:	0021      	movs	r1, r4
   17280:	0028      	movs	r0, r5
   17282:	f000 f933 	bl	174ec <_fflush_r>
   17286:	2800      	cmp	r0, #0
   17288:	d126      	bne.n	172d8 <__swbuf_r+0x98>
   1728a:	68a3      	ldr	r3, [r4, #8]
   1728c:	3001      	adds	r0, #1
   1728e:	3b01      	subs	r3, #1
   17290:	60a3      	str	r3, [r4, #8]
   17292:	6823      	ldr	r3, [r4, #0]
   17294:	1c5a      	adds	r2, r3, #1
   17296:	6022      	str	r2, [r4, #0]
   17298:	701f      	strb	r7, [r3, #0]
   1729a:	6963      	ldr	r3, [r4, #20]
   1729c:	4298      	cmp	r0, r3
   1729e:	d004      	beq.n	172aa <__swbuf_r+0x6a>
   172a0:	89a3      	ldrh	r3, [r4, #12]
   172a2:	07db      	lsls	r3, r3, #31
   172a4:	d51a      	bpl.n	172dc <__swbuf_r+0x9c>
   172a6:	2e0a      	cmp	r6, #10
   172a8:	d118      	bne.n	172dc <__swbuf_r+0x9c>
   172aa:	0021      	movs	r1, r4
   172ac:	0028      	movs	r0, r5
   172ae:	f000 f91d 	bl	174ec <_fflush_r>
   172b2:	2800      	cmp	r0, #0
   172b4:	d012      	beq.n	172dc <__swbuf_r+0x9c>
   172b6:	e00f      	b.n	172d8 <__swbuf_r+0x98>
   172b8:	4b0a      	ldr	r3, [pc, #40]	; (172e4 <__swbuf_r+0xa4>)
   172ba:	429c      	cmp	r4, r3
   172bc:	d101      	bne.n	172c2 <__swbuf_r+0x82>
   172be:	68ac      	ldr	r4, [r5, #8]
   172c0:	e7cd      	b.n	1725e <__swbuf_r+0x1e>
   172c2:	4b09      	ldr	r3, [pc, #36]	; (172e8 <__swbuf_r+0xa8>)
   172c4:	429c      	cmp	r4, r3
   172c6:	d1ca      	bne.n	1725e <__swbuf_r+0x1e>
   172c8:	68ec      	ldr	r4, [r5, #12]
   172ca:	e7c8      	b.n	1725e <__swbuf_r+0x1e>
   172cc:	0021      	movs	r1, r4
   172ce:	0028      	movs	r0, r5
   172d0:	f000 f80c 	bl	172ec <__swsetup_r>
   172d4:	2800      	cmp	r0, #0
   172d6:	d0ca      	beq.n	1726e <__swbuf_r+0x2e>
   172d8:	2601      	movs	r6, #1
   172da:	4276      	negs	r6, r6
   172dc:	0030      	movs	r0, r6
   172de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   172e0:	0001b6a8 	.word	0x0001b6a8
   172e4:	0001b6c8 	.word	0x0001b6c8
   172e8:	0001b688 	.word	0x0001b688

000172ec <__swsetup_r>:
   172ec:	4b36      	ldr	r3, [pc, #216]	; (173c8 <__swsetup_r+0xdc>)
   172ee:	b570      	push	{r4, r5, r6, lr}
   172f0:	681d      	ldr	r5, [r3, #0]
   172f2:	0006      	movs	r6, r0
   172f4:	000c      	movs	r4, r1
   172f6:	2d00      	cmp	r5, #0
   172f8:	d005      	beq.n	17306 <__swsetup_r+0x1a>
   172fa:	69ab      	ldr	r3, [r5, #24]
   172fc:	2b00      	cmp	r3, #0
   172fe:	d102      	bne.n	17306 <__swsetup_r+0x1a>
   17300:	0028      	movs	r0, r5
   17302:	f000 f975 	bl	175f0 <__sinit>
   17306:	4b31      	ldr	r3, [pc, #196]	; (173cc <__swsetup_r+0xe0>)
   17308:	429c      	cmp	r4, r3
   1730a:	d10f      	bne.n	1732c <__swsetup_r+0x40>
   1730c:	686c      	ldr	r4, [r5, #4]
   1730e:	230c      	movs	r3, #12
   17310:	5ee2      	ldrsh	r2, [r4, r3]
   17312:	b293      	uxth	r3, r2
   17314:	0719      	lsls	r1, r3, #28
   17316:	d42d      	bmi.n	17374 <__swsetup_r+0x88>
   17318:	06d9      	lsls	r1, r3, #27
   1731a:	d411      	bmi.n	17340 <__swsetup_r+0x54>
   1731c:	2309      	movs	r3, #9
   1731e:	2001      	movs	r0, #1
   17320:	6033      	str	r3, [r6, #0]
   17322:	3337      	adds	r3, #55	; 0x37
   17324:	4313      	orrs	r3, r2
   17326:	81a3      	strh	r3, [r4, #12]
   17328:	4240      	negs	r0, r0
   1732a:	bd70      	pop	{r4, r5, r6, pc}
   1732c:	4b28      	ldr	r3, [pc, #160]	; (173d0 <__swsetup_r+0xe4>)
   1732e:	429c      	cmp	r4, r3
   17330:	d101      	bne.n	17336 <__swsetup_r+0x4a>
   17332:	68ac      	ldr	r4, [r5, #8]
   17334:	e7eb      	b.n	1730e <__swsetup_r+0x22>
   17336:	4b27      	ldr	r3, [pc, #156]	; (173d4 <__swsetup_r+0xe8>)
   17338:	429c      	cmp	r4, r3
   1733a:	d1e8      	bne.n	1730e <__swsetup_r+0x22>
   1733c:	68ec      	ldr	r4, [r5, #12]
   1733e:	e7e6      	b.n	1730e <__swsetup_r+0x22>
   17340:	075b      	lsls	r3, r3, #29
   17342:	d513      	bpl.n	1736c <__swsetup_r+0x80>
   17344:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17346:	2900      	cmp	r1, #0
   17348:	d008      	beq.n	1735c <__swsetup_r+0x70>
   1734a:	0023      	movs	r3, r4
   1734c:	3344      	adds	r3, #68	; 0x44
   1734e:	4299      	cmp	r1, r3
   17350:	d002      	beq.n	17358 <__swsetup_r+0x6c>
   17352:	0030      	movs	r0, r6
   17354:	f7ff fb9e 	bl	16a94 <_free_r>
   17358:	2300      	movs	r3, #0
   1735a:	6363      	str	r3, [r4, #52]	; 0x34
   1735c:	2224      	movs	r2, #36	; 0x24
   1735e:	89a3      	ldrh	r3, [r4, #12]
   17360:	4393      	bics	r3, r2
   17362:	81a3      	strh	r3, [r4, #12]
   17364:	2300      	movs	r3, #0
   17366:	6063      	str	r3, [r4, #4]
   17368:	6923      	ldr	r3, [r4, #16]
   1736a:	6023      	str	r3, [r4, #0]
   1736c:	2308      	movs	r3, #8
   1736e:	89a2      	ldrh	r2, [r4, #12]
   17370:	4313      	orrs	r3, r2
   17372:	81a3      	strh	r3, [r4, #12]
   17374:	6923      	ldr	r3, [r4, #16]
   17376:	2b00      	cmp	r3, #0
   17378:	d10b      	bne.n	17392 <__swsetup_r+0xa6>
   1737a:	21a0      	movs	r1, #160	; 0xa0
   1737c:	2280      	movs	r2, #128	; 0x80
   1737e:	89a3      	ldrh	r3, [r4, #12]
   17380:	0089      	lsls	r1, r1, #2
   17382:	0092      	lsls	r2, r2, #2
   17384:	400b      	ands	r3, r1
   17386:	4293      	cmp	r3, r2
   17388:	d003      	beq.n	17392 <__swsetup_r+0xa6>
   1738a:	0021      	movs	r1, r4
   1738c:	0030      	movs	r0, r6
   1738e:	f000 fa19 	bl	177c4 <__smakebuf_r>
   17392:	2301      	movs	r3, #1
   17394:	89a2      	ldrh	r2, [r4, #12]
   17396:	4013      	ands	r3, r2
   17398:	d011      	beq.n	173be <__swsetup_r+0xd2>
   1739a:	2300      	movs	r3, #0
   1739c:	60a3      	str	r3, [r4, #8]
   1739e:	6963      	ldr	r3, [r4, #20]
   173a0:	425b      	negs	r3, r3
   173a2:	61a3      	str	r3, [r4, #24]
   173a4:	2000      	movs	r0, #0
   173a6:	6923      	ldr	r3, [r4, #16]
   173a8:	4283      	cmp	r3, r0
   173aa:	d1be      	bne.n	1732a <__swsetup_r+0x3e>
   173ac:	230c      	movs	r3, #12
   173ae:	5ee2      	ldrsh	r2, [r4, r3]
   173b0:	0613      	lsls	r3, r2, #24
   173b2:	d5ba      	bpl.n	1732a <__swsetup_r+0x3e>
   173b4:	2340      	movs	r3, #64	; 0x40
   173b6:	4313      	orrs	r3, r2
   173b8:	81a3      	strh	r3, [r4, #12]
   173ba:	3801      	subs	r0, #1
   173bc:	e7b5      	b.n	1732a <__swsetup_r+0x3e>
   173be:	0792      	lsls	r2, r2, #30
   173c0:	d400      	bmi.n	173c4 <__swsetup_r+0xd8>
   173c2:	6963      	ldr	r3, [r4, #20]
   173c4:	60a3      	str	r3, [r4, #8]
   173c6:	e7ed      	b.n	173a4 <__swsetup_r+0xb8>
   173c8:	2000017c 	.word	0x2000017c
   173cc:	0001b6a8 	.word	0x0001b6a8
   173d0:	0001b6c8 	.word	0x0001b6c8
   173d4:	0001b688 	.word	0x0001b688

000173d8 <__sflush_r>:
   173d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   173da:	898a      	ldrh	r2, [r1, #12]
   173dc:	0005      	movs	r5, r0
   173de:	000c      	movs	r4, r1
   173e0:	0713      	lsls	r3, r2, #28
   173e2:	d460      	bmi.n	174a6 <__sflush_r+0xce>
   173e4:	684b      	ldr	r3, [r1, #4]
   173e6:	2b00      	cmp	r3, #0
   173e8:	dc04      	bgt.n	173f4 <__sflush_r+0x1c>
   173ea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   173ec:	2b00      	cmp	r3, #0
   173ee:	dc01      	bgt.n	173f4 <__sflush_r+0x1c>
   173f0:	2000      	movs	r0, #0
   173f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   173f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   173f6:	2f00      	cmp	r7, #0
   173f8:	d0fa      	beq.n	173f0 <__sflush_r+0x18>
   173fa:	2300      	movs	r3, #0
   173fc:	682e      	ldr	r6, [r5, #0]
   173fe:	602b      	str	r3, [r5, #0]
   17400:	2380      	movs	r3, #128	; 0x80
   17402:	015b      	lsls	r3, r3, #5
   17404:	401a      	ands	r2, r3
   17406:	d034      	beq.n	17472 <__sflush_r+0x9a>
   17408:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1740a:	89a3      	ldrh	r3, [r4, #12]
   1740c:	075b      	lsls	r3, r3, #29
   1740e:	d506      	bpl.n	1741e <__sflush_r+0x46>
   17410:	6863      	ldr	r3, [r4, #4]
   17412:	1ac0      	subs	r0, r0, r3
   17414:	6b63      	ldr	r3, [r4, #52]	; 0x34
   17416:	2b00      	cmp	r3, #0
   17418:	d001      	beq.n	1741e <__sflush_r+0x46>
   1741a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1741c:	1ac0      	subs	r0, r0, r3
   1741e:	0002      	movs	r2, r0
   17420:	6a21      	ldr	r1, [r4, #32]
   17422:	2300      	movs	r3, #0
   17424:	0028      	movs	r0, r5
   17426:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   17428:	47b8      	blx	r7
   1742a:	89a1      	ldrh	r1, [r4, #12]
   1742c:	1c43      	adds	r3, r0, #1
   1742e:	d106      	bne.n	1743e <__sflush_r+0x66>
   17430:	682b      	ldr	r3, [r5, #0]
   17432:	2b1d      	cmp	r3, #29
   17434:	d831      	bhi.n	1749a <__sflush_r+0xc2>
   17436:	4a2c      	ldr	r2, [pc, #176]	; (174e8 <__sflush_r+0x110>)
   17438:	40da      	lsrs	r2, r3
   1743a:	07d3      	lsls	r3, r2, #31
   1743c:	d52d      	bpl.n	1749a <__sflush_r+0xc2>
   1743e:	2300      	movs	r3, #0
   17440:	6063      	str	r3, [r4, #4]
   17442:	6923      	ldr	r3, [r4, #16]
   17444:	6023      	str	r3, [r4, #0]
   17446:	04cb      	lsls	r3, r1, #19
   17448:	d505      	bpl.n	17456 <__sflush_r+0x7e>
   1744a:	1c43      	adds	r3, r0, #1
   1744c:	d102      	bne.n	17454 <__sflush_r+0x7c>
   1744e:	682b      	ldr	r3, [r5, #0]
   17450:	2b00      	cmp	r3, #0
   17452:	d100      	bne.n	17456 <__sflush_r+0x7e>
   17454:	6560      	str	r0, [r4, #84]	; 0x54
   17456:	6b61      	ldr	r1, [r4, #52]	; 0x34
   17458:	602e      	str	r6, [r5, #0]
   1745a:	2900      	cmp	r1, #0
   1745c:	d0c8      	beq.n	173f0 <__sflush_r+0x18>
   1745e:	0023      	movs	r3, r4
   17460:	3344      	adds	r3, #68	; 0x44
   17462:	4299      	cmp	r1, r3
   17464:	d002      	beq.n	1746c <__sflush_r+0x94>
   17466:	0028      	movs	r0, r5
   17468:	f7ff fb14 	bl	16a94 <_free_r>
   1746c:	2000      	movs	r0, #0
   1746e:	6360      	str	r0, [r4, #52]	; 0x34
   17470:	e7bf      	b.n	173f2 <__sflush_r+0x1a>
   17472:	2301      	movs	r3, #1
   17474:	6a21      	ldr	r1, [r4, #32]
   17476:	0028      	movs	r0, r5
   17478:	47b8      	blx	r7
   1747a:	1c43      	adds	r3, r0, #1
   1747c:	d1c5      	bne.n	1740a <__sflush_r+0x32>
   1747e:	682b      	ldr	r3, [r5, #0]
   17480:	2b00      	cmp	r3, #0
   17482:	d0c2      	beq.n	1740a <__sflush_r+0x32>
   17484:	2b1d      	cmp	r3, #29
   17486:	d001      	beq.n	1748c <__sflush_r+0xb4>
   17488:	2b16      	cmp	r3, #22
   1748a:	d101      	bne.n	17490 <__sflush_r+0xb8>
   1748c:	602e      	str	r6, [r5, #0]
   1748e:	e7af      	b.n	173f0 <__sflush_r+0x18>
   17490:	2340      	movs	r3, #64	; 0x40
   17492:	89a2      	ldrh	r2, [r4, #12]
   17494:	4313      	orrs	r3, r2
   17496:	81a3      	strh	r3, [r4, #12]
   17498:	e7ab      	b.n	173f2 <__sflush_r+0x1a>
   1749a:	2340      	movs	r3, #64	; 0x40
   1749c:	430b      	orrs	r3, r1
   1749e:	2001      	movs	r0, #1
   174a0:	81a3      	strh	r3, [r4, #12]
   174a2:	4240      	negs	r0, r0
   174a4:	e7a5      	b.n	173f2 <__sflush_r+0x1a>
   174a6:	690f      	ldr	r7, [r1, #16]
   174a8:	2f00      	cmp	r7, #0
   174aa:	d0a1      	beq.n	173f0 <__sflush_r+0x18>
   174ac:	680b      	ldr	r3, [r1, #0]
   174ae:	600f      	str	r7, [r1, #0]
   174b0:	1bdb      	subs	r3, r3, r7
   174b2:	9301      	str	r3, [sp, #4]
   174b4:	2300      	movs	r3, #0
   174b6:	0792      	lsls	r2, r2, #30
   174b8:	d100      	bne.n	174bc <__sflush_r+0xe4>
   174ba:	694b      	ldr	r3, [r1, #20]
   174bc:	60a3      	str	r3, [r4, #8]
   174be:	9b01      	ldr	r3, [sp, #4]
   174c0:	2b00      	cmp	r3, #0
   174c2:	dc00      	bgt.n	174c6 <__sflush_r+0xee>
   174c4:	e794      	b.n	173f0 <__sflush_r+0x18>
   174c6:	9b01      	ldr	r3, [sp, #4]
   174c8:	003a      	movs	r2, r7
   174ca:	6a21      	ldr	r1, [r4, #32]
   174cc:	0028      	movs	r0, r5
   174ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   174d0:	47b0      	blx	r6
   174d2:	2800      	cmp	r0, #0
   174d4:	dc03      	bgt.n	174de <__sflush_r+0x106>
   174d6:	2340      	movs	r3, #64	; 0x40
   174d8:	89a2      	ldrh	r2, [r4, #12]
   174da:	4313      	orrs	r3, r2
   174dc:	e7df      	b.n	1749e <__sflush_r+0xc6>
   174de:	9b01      	ldr	r3, [sp, #4]
   174e0:	183f      	adds	r7, r7, r0
   174e2:	1a1b      	subs	r3, r3, r0
   174e4:	9301      	str	r3, [sp, #4]
   174e6:	e7ea      	b.n	174be <__sflush_r+0xe6>
   174e8:	20400001 	.word	0x20400001

000174ec <_fflush_r>:
   174ec:	690b      	ldr	r3, [r1, #16]
   174ee:	b570      	push	{r4, r5, r6, lr}
   174f0:	0005      	movs	r5, r0
   174f2:	000c      	movs	r4, r1
   174f4:	2b00      	cmp	r3, #0
   174f6:	d101      	bne.n	174fc <_fflush_r+0x10>
   174f8:	2000      	movs	r0, #0
   174fa:	bd70      	pop	{r4, r5, r6, pc}
   174fc:	2800      	cmp	r0, #0
   174fe:	d004      	beq.n	1750a <_fflush_r+0x1e>
   17500:	6983      	ldr	r3, [r0, #24]
   17502:	2b00      	cmp	r3, #0
   17504:	d101      	bne.n	1750a <_fflush_r+0x1e>
   17506:	f000 f873 	bl	175f0 <__sinit>
   1750a:	4b0b      	ldr	r3, [pc, #44]	; (17538 <_fflush_r+0x4c>)
   1750c:	429c      	cmp	r4, r3
   1750e:	d109      	bne.n	17524 <_fflush_r+0x38>
   17510:	686c      	ldr	r4, [r5, #4]
   17512:	220c      	movs	r2, #12
   17514:	5ea3      	ldrsh	r3, [r4, r2]
   17516:	2b00      	cmp	r3, #0
   17518:	d0ee      	beq.n	174f8 <_fflush_r+0xc>
   1751a:	0021      	movs	r1, r4
   1751c:	0028      	movs	r0, r5
   1751e:	f7ff ff5b 	bl	173d8 <__sflush_r>
   17522:	e7ea      	b.n	174fa <_fflush_r+0xe>
   17524:	4b05      	ldr	r3, [pc, #20]	; (1753c <_fflush_r+0x50>)
   17526:	429c      	cmp	r4, r3
   17528:	d101      	bne.n	1752e <_fflush_r+0x42>
   1752a:	68ac      	ldr	r4, [r5, #8]
   1752c:	e7f1      	b.n	17512 <_fflush_r+0x26>
   1752e:	4b04      	ldr	r3, [pc, #16]	; (17540 <_fflush_r+0x54>)
   17530:	429c      	cmp	r4, r3
   17532:	d1ee      	bne.n	17512 <_fflush_r+0x26>
   17534:	68ec      	ldr	r4, [r5, #12]
   17536:	e7ec      	b.n	17512 <_fflush_r+0x26>
   17538:	0001b6a8 	.word	0x0001b6a8
   1753c:	0001b6c8 	.word	0x0001b6c8
   17540:	0001b688 	.word	0x0001b688

00017544 <fflush>:
   17544:	b510      	push	{r4, lr}
   17546:	1e01      	subs	r1, r0, #0
   17548:	d105      	bne.n	17556 <fflush+0x12>
   1754a:	4b05      	ldr	r3, [pc, #20]	; (17560 <fflush+0x1c>)
   1754c:	4905      	ldr	r1, [pc, #20]	; (17564 <fflush+0x20>)
   1754e:	6818      	ldr	r0, [r3, #0]
   17550:	f000 f8de 	bl	17710 <_fwalk_reent>
   17554:	bd10      	pop	{r4, pc}
   17556:	4b04      	ldr	r3, [pc, #16]	; (17568 <fflush+0x24>)
   17558:	6818      	ldr	r0, [r3, #0]
   1755a:	f7ff ffc7 	bl	174ec <_fflush_r>
   1755e:	e7f9      	b.n	17554 <fflush+0x10>
   17560:	0001b684 	.word	0x0001b684
   17564:	000174ed 	.word	0x000174ed
   17568:	2000017c 	.word	0x2000017c

0001756c <_cleanup_r>:
   1756c:	b510      	push	{r4, lr}
   1756e:	4902      	ldr	r1, [pc, #8]	; (17578 <_cleanup_r+0xc>)
   17570:	f000 f8ce 	bl	17710 <_fwalk_reent>
   17574:	bd10      	pop	{r4, pc}
   17576:	46c0      	nop			; (mov r8, r8)
   17578:	000174ed 	.word	0x000174ed

0001757c <std.isra.0>:
   1757c:	2300      	movs	r3, #0
   1757e:	b510      	push	{r4, lr}
   17580:	0004      	movs	r4, r0
   17582:	6003      	str	r3, [r0, #0]
   17584:	6043      	str	r3, [r0, #4]
   17586:	6083      	str	r3, [r0, #8]
   17588:	8181      	strh	r1, [r0, #12]
   1758a:	6643      	str	r3, [r0, #100]	; 0x64
   1758c:	81c2      	strh	r2, [r0, #14]
   1758e:	6103      	str	r3, [r0, #16]
   17590:	6143      	str	r3, [r0, #20]
   17592:	6183      	str	r3, [r0, #24]
   17594:	0019      	movs	r1, r3
   17596:	2208      	movs	r2, #8
   17598:	305c      	adds	r0, #92	; 0x5c
   1759a:	f7ff fa72 	bl	16a82 <memset>
   1759e:	4b05      	ldr	r3, [pc, #20]	; (175b4 <std.isra.0+0x38>)
   175a0:	6224      	str	r4, [r4, #32]
   175a2:	6263      	str	r3, [r4, #36]	; 0x24
   175a4:	4b04      	ldr	r3, [pc, #16]	; (175b8 <std.isra.0+0x3c>)
   175a6:	62a3      	str	r3, [r4, #40]	; 0x28
   175a8:	4b04      	ldr	r3, [pc, #16]	; (175bc <std.isra.0+0x40>)
   175aa:	62e3      	str	r3, [r4, #44]	; 0x2c
   175ac:	4b04      	ldr	r3, [pc, #16]	; (175c0 <std.isra.0+0x44>)
   175ae:	6323      	str	r3, [r4, #48]	; 0x30
   175b0:	bd10      	pop	{r4, pc}
   175b2:	46c0      	nop			; (mov r8, r8)
   175b4:	00018905 	.word	0x00018905
   175b8:	0001892d 	.word	0x0001892d
   175bc:	00018965 	.word	0x00018965
   175c0:	00018991 	.word	0x00018991

000175c4 <__sfmoreglue>:
   175c4:	b570      	push	{r4, r5, r6, lr}
   175c6:	2568      	movs	r5, #104	; 0x68
   175c8:	1e4a      	subs	r2, r1, #1
   175ca:	4355      	muls	r5, r2
   175cc:	000e      	movs	r6, r1
   175ce:	0029      	movs	r1, r5
   175d0:	3174      	adds	r1, #116	; 0x74
   175d2:	f7ff faa9 	bl	16b28 <_malloc_r>
   175d6:	1e04      	subs	r4, r0, #0
   175d8:	d008      	beq.n	175ec <__sfmoreglue+0x28>
   175da:	2100      	movs	r1, #0
   175dc:	002a      	movs	r2, r5
   175de:	6001      	str	r1, [r0, #0]
   175e0:	6046      	str	r6, [r0, #4]
   175e2:	300c      	adds	r0, #12
   175e4:	60a0      	str	r0, [r4, #8]
   175e6:	3268      	adds	r2, #104	; 0x68
   175e8:	f7ff fa4b 	bl	16a82 <memset>
   175ec:	0020      	movs	r0, r4
   175ee:	bd70      	pop	{r4, r5, r6, pc}

000175f0 <__sinit>:
   175f0:	6983      	ldr	r3, [r0, #24]
   175f2:	b513      	push	{r0, r1, r4, lr}
   175f4:	0004      	movs	r4, r0
   175f6:	2b00      	cmp	r3, #0
   175f8:	d128      	bne.n	1764c <__sinit+0x5c>
   175fa:	6483      	str	r3, [r0, #72]	; 0x48
   175fc:	64c3      	str	r3, [r0, #76]	; 0x4c
   175fe:	6503      	str	r3, [r0, #80]	; 0x50
   17600:	4b13      	ldr	r3, [pc, #76]	; (17650 <__sinit+0x60>)
   17602:	4a14      	ldr	r2, [pc, #80]	; (17654 <__sinit+0x64>)
   17604:	681b      	ldr	r3, [r3, #0]
   17606:	6282      	str	r2, [r0, #40]	; 0x28
   17608:	9301      	str	r3, [sp, #4]
   1760a:	4298      	cmp	r0, r3
   1760c:	d101      	bne.n	17612 <__sinit+0x22>
   1760e:	2301      	movs	r3, #1
   17610:	6183      	str	r3, [r0, #24]
   17612:	0020      	movs	r0, r4
   17614:	f000 f820 	bl	17658 <__sfp>
   17618:	6060      	str	r0, [r4, #4]
   1761a:	0020      	movs	r0, r4
   1761c:	f000 f81c 	bl	17658 <__sfp>
   17620:	60a0      	str	r0, [r4, #8]
   17622:	0020      	movs	r0, r4
   17624:	f000 f818 	bl	17658 <__sfp>
   17628:	2200      	movs	r2, #0
   1762a:	60e0      	str	r0, [r4, #12]
   1762c:	2104      	movs	r1, #4
   1762e:	6860      	ldr	r0, [r4, #4]
   17630:	f7ff ffa4 	bl	1757c <std.isra.0>
   17634:	2201      	movs	r2, #1
   17636:	2109      	movs	r1, #9
   17638:	68a0      	ldr	r0, [r4, #8]
   1763a:	f7ff ff9f 	bl	1757c <std.isra.0>
   1763e:	2202      	movs	r2, #2
   17640:	2112      	movs	r1, #18
   17642:	68e0      	ldr	r0, [r4, #12]
   17644:	f7ff ff9a 	bl	1757c <std.isra.0>
   17648:	2301      	movs	r3, #1
   1764a:	61a3      	str	r3, [r4, #24]
   1764c:	bd13      	pop	{r0, r1, r4, pc}
   1764e:	46c0      	nop			; (mov r8, r8)
   17650:	0001b684 	.word	0x0001b684
   17654:	0001756d 	.word	0x0001756d

00017658 <__sfp>:
   17658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1765a:	4b1e      	ldr	r3, [pc, #120]	; (176d4 <__sfp+0x7c>)
   1765c:	0007      	movs	r7, r0
   1765e:	681e      	ldr	r6, [r3, #0]
   17660:	69b3      	ldr	r3, [r6, #24]
   17662:	2b00      	cmp	r3, #0
   17664:	d102      	bne.n	1766c <__sfp+0x14>
   17666:	0030      	movs	r0, r6
   17668:	f7ff ffc2 	bl	175f0 <__sinit>
   1766c:	3648      	adds	r6, #72	; 0x48
   1766e:	68b4      	ldr	r4, [r6, #8]
   17670:	6873      	ldr	r3, [r6, #4]
   17672:	3b01      	subs	r3, #1
   17674:	d504      	bpl.n	17680 <__sfp+0x28>
   17676:	6833      	ldr	r3, [r6, #0]
   17678:	2b00      	cmp	r3, #0
   1767a:	d007      	beq.n	1768c <__sfp+0x34>
   1767c:	6836      	ldr	r6, [r6, #0]
   1767e:	e7f6      	b.n	1766e <__sfp+0x16>
   17680:	220c      	movs	r2, #12
   17682:	5ea5      	ldrsh	r5, [r4, r2]
   17684:	2d00      	cmp	r5, #0
   17686:	d00d      	beq.n	176a4 <__sfp+0x4c>
   17688:	3468      	adds	r4, #104	; 0x68
   1768a:	e7f2      	b.n	17672 <__sfp+0x1a>
   1768c:	2104      	movs	r1, #4
   1768e:	0038      	movs	r0, r7
   17690:	f7ff ff98 	bl	175c4 <__sfmoreglue>
   17694:	6030      	str	r0, [r6, #0]
   17696:	2800      	cmp	r0, #0
   17698:	d1f0      	bne.n	1767c <__sfp+0x24>
   1769a:	230c      	movs	r3, #12
   1769c:	0004      	movs	r4, r0
   1769e:	603b      	str	r3, [r7, #0]
   176a0:	0020      	movs	r0, r4
   176a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   176a4:	2301      	movs	r3, #1
   176a6:	0020      	movs	r0, r4
   176a8:	425b      	negs	r3, r3
   176aa:	81e3      	strh	r3, [r4, #14]
   176ac:	3302      	adds	r3, #2
   176ae:	81a3      	strh	r3, [r4, #12]
   176b0:	6665      	str	r5, [r4, #100]	; 0x64
   176b2:	6025      	str	r5, [r4, #0]
   176b4:	60a5      	str	r5, [r4, #8]
   176b6:	6065      	str	r5, [r4, #4]
   176b8:	6125      	str	r5, [r4, #16]
   176ba:	6165      	str	r5, [r4, #20]
   176bc:	61a5      	str	r5, [r4, #24]
   176be:	2208      	movs	r2, #8
   176c0:	0029      	movs	r1, r5
   176c2:	305c      	adds	r0, #92	; 0x5c
   176c4:	f7ff f9dd 	bl	16a82 <memset>
   176c8:	6365      	str	r5, [r4, #52]	; 0x34
   176ca:	63a5      	str	r5, [r4, #56]	; 0x38
   176cc:	64a5      	str	r5, [r4, #72]	; 0x48
   176ce:	64e5      	str	r5, [r4, #76]	; 0x4c
   176d0:	e7e6      	b.n	176a0 <__sfp+0x48>
   176d2:	46c0      	nop			; (mov r8, r8)
   176d4:	0001b684 	.word	0x0001b684

000176d8 <_fwalk>:
   176d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   176da:	3048      	adds	r0, #72	; 0x48
   176dc:	0004      	movs	r4, r0
   176de:	2600      	movs	r6, #0
   176e0:	9101      	str	r1, [sp, #4]
   176e2:	2c00      	cmp	r4, #0
   176e4:	d101      	bne.n	176ea <_fwalk+0x12>
   176e6:	0030      	movs	r0, r6
   176e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   176ea:	68a5      	ldr	r5, [r4, #8]
   176ec:	6867      	ldr	r7, [r4, #4]
   176ee:	3f01      	subs	r7, #1
   176f0:	d501      	bpl.n	176f6 <_fwalk+0x1e>
   176f2:	6824      	ldr	r4, [r4, #0]
   176f4:	e7f5      	b.n	176e2 <_fwalk+0xa>
   176f6:	89ab      	ldrh	r3, [r5, #12]
   176f8:	2b01      	cmp	r3, #1
   176fa:	d907      	bls.n	1770c <_fwalk+0x34>
   176fc:	220e      	movs	r2, #14
   176fe:	5eab      	ldrsh	r3, [r5, r2]
   17700:	3301      	adds	r3, #1
   17702:	d003      	beq.n	1770c <_fwalk+0x34>
   17704:	0028      	movs	r0, r5
   17706:	9b01      	ldr	r3, [sp, #4]
   17708:	4798      	blx	r3
   1770a:	4306      	orrs	r6, r0
   1770c:	3568      	adds	r5, #104	; 0x68
   1770e:	e7ee      	b.n	176ee <_fwalk+0x16>

00017710 <_fwalk_reent>:
   17710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17712:	0004      	movs	r4, r0
   17714:	0007      	movs	r7, r0
   17716:	2600      	movs	r6, #0
   17718:	9101      	str	r1, [sp, #4]
   1771a:	3448      	adds	r4, #72	; 0x48
   1771c:	2c00      	cmp	r4, #0
   1771e:	d101      	bne.n	17724 <_fwalk_reent+0x14>
   17720:	0030      	movs	r0, r6
   17722:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17724:	6863      	ldr	r3, [r4, #4]
   17726:	68a5      	ldr	r5, [r4, #8]
   17728:	9300      	str	r3, [sp, #0]
   1772a:	9b00      	ldr	r3, [sp, #0]
   1772c:	3b01      	subs	r3, #1
   1772e:	9300      	str	r3, [sp, #0]
   17730:	d501      	bpl.n	17736 <_fwalk_reent+0x26>
   17732:	6824      	ldr	r4, [r4, #0]
   17734:	e7f2      	b.n	1771c <_fwalk_reent+0xc>
   17736:	89ab      	ldrh	r3, [r5, #12]
   17738:	2b01      	cmp	r3, #1
   1773a:	d908      	bls.n	1774e <_fwalk_reent+0x3e>
   1773c:	220e      	movs	r2, #14
   1773e:	5eab      	ldrsh	r3, [r5, r2]
   17740:	3301      	adds	r3, #1
   17742:	d004      	beq.n	1774e <_fwalk_reent+0x3e>
   17744:	0029      	movs	r1, r5
   17746:	0038      	movs	r0, r7
   17748:	9b01      	ldr	r3, [sp, #4]
   1774a:	4798      	blx	r3
   1774c:	4306      	orrs	r6, r0
   1774e:	3568      	adds	r5, #104	; 0x68
   17750:	e7eb      	b.n	1772a <_fwalk_reent+0x1a>

00017752 <__locale_ctype_ptr_l>:
   17752:	30ec      	adds	r0, #236	; 0xec
   17754:	6800      	ldr	r0, [r0, #0]
   17756:	4770      	bx	lr

00017758 <__locale_ctype_ptr>:
   17758:	4b04      	ldr	r3, [pc, #16]	; (1776c <__locale_ctype_ptr+0x14>)
   1775a:	681b      	ldr	r3, [r3, #0]
   1775c:	6a1b      	ldr	r3, [r3, #32]
   1775e:	2b00      	cmp	r3, #0
   17760:	d100      	bne.n	17764 <__locale_ctype_ptr+0xc>
   17762:	4b03      	ldr	r3, [pc, #12]	; (17770 <__locale_ctype_ptr+0x18>)
   17764:	33ec      	adds	r3, #236	; 0xec
   17766:	6818      	ldr	r0, [r3, #0]
   17768:	4770      	bx	lr
   1776a:	46c0      	nop			; (mov r8, r8)
   1776c:	2000017c 	.word	0x2000017c
   17770:	200001e0 	.word	0x200001e0

00017774 <__swhatbuf_r>:
   17774:	b570      	push	{r4, r5, r6, lr}
   17776:	000e      	movs	r6, r1
   17778:	001d      	movs	r5, r3
   1777a:	230e      	movs	r3, #14
   1777c:	5ec9      	ldrsh	r1, [r1, r3]
   1777e:	b090      	sub	sp, #64	; 0x40
   17780:	0014      	movs	r4, r2
   17782:	2900      	cmp	r1, #0
   17784:	da07      	bge.n	17796 <__swhatbuf_r+0x22>
   17786:	2300      	movs	r3, #0
   17788:	602b      	str	r3, [r5, #0]
   1778a:	89b3      	ldrh	r3, [r6, #12]
   1778c:	061b      	lsls	r3, r3, #24
   1778e:	d411      	bmi.n	177b4 <__swhatbuf_r+0x40>
   17790:	2380      	movs	r3, #128	; 0x80
   17792:	00db      	lsls	r3, r3, #3
   17794:	e00f      	b.n	177b6 <__swhatbuf_r+0x42>
   17796:	aa01      	add	r2, sp, #4
   17798:	f001 fa88 	bl	18cac <_fstat_r>
   1779c:	2800      	cmp	r0, #0
   1779e:	dbf2      	blt.n	17786 <__swhatbuf_r+0x12>
   177a0:	22f0      	movs	r2, #240	; 0xf0
   177a2:	9b02      	ldr	r3, [sp, #8]
   177a4:	0212      	lsls	r2, r2, #8
   177a6:	4013      	ands	r3, r2
   177a8:	4a05      	ldr	r2, [pc, #20]	; (177c0 <__swhatbuf_r+0x4c>)
   177aa:	189b      	adds	r3, r3, r2
   177ac:	425a      	negs	r2, r3
   177ae:	4153      	adcs	r3, r2
   177b0:	602b      	str	r3, [r5, #0]
   177b2:	e7ed      	b.n	17790 <__swhatbuf_r+0x1c>
   177b4:	2340      	movs	r3, #64	; 0x40
   177b6:	2000      	movs	r0, #0
   177b8:	6023      	str	r3, [r4, #0]
   177ba:	b010      	add	sp, #64	; 0x40
   177bc:	bd70      	pop	{r4, r5, r6, pc}
   177be:	46c0      	nop			; (mov r8, r8)
   177c0:	ffffe000 	.word	0xffffe000

000177c4 <__smakebuf_r>:
   177c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   177c6:	2602      	movs	r6, #2
   177c8:	898b      	ldrh	r3, [r1, #12]
   177ca:	0005      	movs	r5, r0
   177cc:	000c      	movs	r4, r1
   177ce:	4233      	tst	r3, r6
   177d0:	d006      	beq.n	177e0 <__smakebuf_r+0x1c>
   177d2:	0023      	movs	r3, r4
   177d4:	3347      	adds	r3, #71	; 0x47
   177d6:	6023      	str	r3, [r4, #0]
   177d8:	6123      	str	r3, [r4, #16]
   177da:	2301      	movs	r3, #1
   177dc:	6163      	str	r3, [r4, #20]
   177de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   177e0:	ab01      	add	r3, sp, #4
   177e2:	466a      	mov	r2, sp
   177e4:	f7ff ffc6 	bl	17774 <__swhatbuf_r>
   177e8:	9900      	ldr	r1, [sp, #0]
   177ea:	0007      	movs	r7, r0
   177ec:	0028      	movs	r0, r5
   177ee:	f7ff f99b 	bl	16b28 <_malloc_r>
   177f2:	2800      	cmp	r0, #0
   177f4:	d108      	bne.n	17808 <__smakebuf_r+0x44>
   177f6:	220c      	movs	r2, #12
   177f8:	5ea3      	ldrsh	r3, [r4, r2]
   177fa:	059a      	lsls	r2, r3, #22
   177fc:	d4ef      	bmi.n	177de <__smakebuf_r+0x1a>
   177fe:	2203      	movs	r2, #3
   17800:	4393      	bics	r3, r2
   17802:	431e      	orrs	r6, r3
   17804:	81a6      	strh	r6, [r4, #12]
   17806:	e7e4      	b.n	177d2 <__smakebuf_r+0xe>
   17808:	4b0f      	ldr	r3, [pc, #60]	; (17848 <__smakebuf_r+0x84>)
   1780a:	62ab      	str	r3, [r5, #40]	; 0x28
   1780c:	2380      	movs	r3, #128	; 0x80
   1780e:	89a2      	ldrh	r2, [r4, #12]
   17810:	6020      	str	r0, [r4, #0]
   17812:	4313      	orrs	r3, r2
   17814:	81a3      	strh	r3, [r4, #12]
   17816:	9b00      	ldr	r3, [sp, #0]
   17818:	6120      	str	r0, [r4, #16]
   1781a:	6163      	str	r3, [r4, #20]
   1781c:	9b01      	ldr	r3, [sp, #4]
   1781e:	2b00      	cmp	r3, #0
   17820:	d00d      	beq.n	1783e <__smakebuf_r+0x7a>
   17822:	230e      	movs	r3, #14
   17824:	5ee1      	ldrsh	r1, [r4, r3]
   17826:	0028      	movs	r0, r5
   17828:	f001 fa52 	bl	18cd0 <_isatty_r>
   1782c:	2800      	cmp	r0, #0
   1782e:	d006      	beq.n	1783e <__smakebuf_r+0x7a>
   17830:	2203      	movs	r2, #3
   17832:	89a3      	ldrh	r3, [r4, #12]
   17834:	4393      	bics	r3, r2
   17836:	001a      	movs	r2, r3
   17838:	2301      	movs	r3, #1
   1783a:	4313      	orrs	r3, r2
   1783c:	81a3      	strh	r3, [r4, #12]
   1783e:	89a0      	ldrh	r0, [r4, #12]
   17840:	4338      	orrs	r0, r7
   17842:	81a0      	strh	r0, [r4, #12]
   17844:	e7cb      	b.n	177de <__smakebuf_r+0x1a>
   17846:	46c0      	nop			; (mov r8, r8)
   17848:	0001756d 	.word	0x0001756d

0001784c <__ascii_mbtowc>:
   1784c:	b082      	sub	sp, #8
   1784e:	2900      	cmp	r1, #0
   17850:	d100      	bne.n	17854 <__ascii_mbtowc+0x8>
   17852:	a901      	add	r1, sp, #4
   17854:	1e10      	subs	r0, r2, #0
   17856:	d006      	beq.n	17866 <__ascii_mbtowc+0x1a>
   17858:	2b00      	cmp	r3, #0
   1785a:	d006      	beq.n	1786a <__ascii_mbtowc+0x1e>
   1785c:	7813      	ldrb	r3, [r2, #0]
   1785e:	600b      	str	r3, [r1, #0]
   17860:	7810      	ldrb	r0, [r2, #0]
   17862:	1e43      	subs	r3, r0, #1
   17864:	4198      	sbcs	r0, r3
   17866:	b002      	add	sp, #8
   17868:	4770      	bx	lr
   1786a:	2002      	movs	r0, #2
   1786c:	4240      	negs	r0, r0
   1786e:	e7fa      	b.n	17866 <__ascii_mbtowc+0x1a>

00017870 <__malloc_lock>:
   17870:	4770      	bx	lr

00017872 <__malloc_unlock>:
   17872:	4770      	bx	lr

00017874 <__ssputs_r>:
   17874:	b5f0      	push	{r4, r5, r6, r7, lr}
   17876:	688e      	ldr	r6, [r1, #8]
   17878:	b085      	sub	sp, #20
   1787a:	0007      	movs	r7, r0
   1787c:	000c      	movs	r4, r1
   1787e:	9203      	str	r2, [sp, #12]
   17880:	9301      	str	r3, [sp, #4]
   17882:	429e      	cmp	r6, r3
   17884:	d839      	bhi.n	178fa <__ssputs_r+0x86>
   17886:	2390      	movs	r3, #144	; 0x90
   17888:	898a      	ldrh	r2, [r1, #12]
   1788a:	00db      	lsls	r3, r3, #3
   1788c:	421a      	tst	r2, r3
   1788e:	d034      	beq.n	178fa <__ssputs_r+0x86>
   17890:	2503      	movs	r5, #3
   17892:	6909      	ldr	r1, [r1, #16]
   17894:	6823      	ldr	r3, [r4, #0]
   17896:	1a5b      	subs	r3, r3, r1
   17898:	9302      	str	r3, [sp, #8]
   1789a:	6963      	ldr	r3, [r4, #20]
   1789c:	9802      	ldr	r0, [sp, #8]
   1789e:	435d      	muls	r5, r3
   178a0:	0feb      	lsrs	r3, r5, #31
   178a2:	195d      	adds	r5, r3, r5
   178a4:	9b01      	ldr	r3, [sp, #4]
   178a6:	106d      	asrs	r5, r5, #1
   178a8:	3301      	adds	r3, #1
   178aa:	181b      	adds	r3, r3, r0
   178ac:	42ab      	cmp	r3, r5
   178ae:	d900      	bls.n	178b2 <__ssputs_r+0x3e>
   178b0:	001d      	movs	r5, r3
   178b2:	0553      	lsls	r3, r2, #21
   178b4:	d532      	bpl.n	1791c <__ssputs_r+0xa8>
   178b6:	0029      	movs	r1, r5
   178b8:	0038      	movs	r0, r7
   178ba:	f7ff f935 	bl	16b28 <_malloc_r>
   178be:	1e06      	subs	r6, r0, #0
   178c0:	d109      	bne.n	178d6 <__ssputs_r+0x62>
   178c2:	230c      	movs	r3, #12
   178c4:	603b      	str	r3, [r7, #0]
   178c6:	2340      	movs	r3, #64	; 0x40
   178c8:	2001      	movs	r0, #1
   178ca:	89a2      	ldrh	r2, [r4, #12]
   178cc:	4240      	negs	r0, r0
   178ce:	4313      	orrs	r3, r2
   178d0:	81a3      	strh	r3, [r4, #12]
   178d2:	b005      	add	sp, #20
   178d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   178d6:	9a02      	ldr	r2, [sp, #8]
   178d8:	6921      	ldr	r1, [r4, #16]
   178da:	f7ff f8b7 	bl	16a4c <memcpy>
   178de:	89a3      	ldrh	r3, [r4, #12]
   178e0:	4a14      	ldr	r2, [pc, #80]	; (17934 <__ssputs_r+0xc0>)
   178e2:	401a      	ands	r2, r3
   178e4:	2380      	movs	r3, #128	; 0x80
   178e6:	4313      	orrs	r3, r2
   178e8:	81a3      	strh	r3, [r4, #12]
   178ea:	9b02      	ldr	r3, [sp, #8]
   178ec:	6126      	str	r6, [r4, #16]
   178ee:	18f6      	adds	r6, r6, r3
   178f0:	6026      	str	r6, [r4, #0]
   178f2:	6165      	str	r5, [r4, #20]
   178f4:	9e01      	ldr	r6, [sp, #4]
   178f6:	1aed      	subs	r5, r5, r3
   178f8:	60a5      	str	r5, [r4, #8]
   178fa:	9b01      	ldr	r3, [sp, #4]
   178fc:	42b3      	cmp	r3, r6
   178fe:	d200      	bcs.n	17902 <__ssputs_r+0x8e>
   17900:	001e      	movs	r6, r3
   17902:	0032      	movs	r2, r6
   17904:	9903      	ldr	r1, [sp, #12]
   17906:	6820      	ldr	r0, [r4, #0]
   17908:	f7ff f8a9 	bl	16a5e <memmove>
   1790c:	68a3      	ldr	r3, [r4, #8]
   1790e:	2000      	movs	r0, #0
   17910:	1b9b      	subs	r3, r3, r6
   17912:	60a3      	str	r3, [r4, #8]
   17914:	6823      	ldr	r3, [r4, #0]
   17916:	199e      	adds	r6, r3, r6
   17918:	6026      	str	r6, [r4, #0]
   1791a:	e7da      	b.n	178d2 <__ssputs_r+0x5e>
   1791c:	002a      	movs	r2, r5
   1791e:	0038      	movs	r0, r7
   17920:	f001 fa07 	bl	18d32 <_realloc_r>
   17924:	1e06      	subs	r6, r0, #0
   17926:	d1e0      	bne.n	178ea <__ssputs_r+0x76>
   17928:	6921      	ldr	r1, [r4, #16]
   1792a:	0038      	movs	r0, r7
   1792c:	f7ff f8b2 	bl	16a94 <_free_r>
   17930:	e7c7      	b.n	178c2 <__ssputs_r+0x4e>
   17932:	46c0      	nop			; (mov r8, r8)
   17934:	fffffb7f 	.word	0xfffffb7f

00017938 <_svfiprintf_r>:
   17938:	b5f0      	push	{r4, r5, r6, r7, lr}
   1793a:	b09f      	sub	sp, #124	; 0x7c
   1793c:	9002      	str	r0, [sp, #8]
   1793e:	9305      	str	r3, [sp, #20]
   17940:	898b      	ldrh	r3, [r1, #12]
   17942:	000f      	movs	r7, r1
   17944:	0016      	movs	r6, r2
   17946:	061b      	lsls	r3, r3, #24
   17948:	d511      	bpl.n	1796e <_svfiprintf_r+0x36>
   1794a:	690b      	ldr	r3, [r1, #16]
   1794c:	2b00      	cmp	r3, #0
   1794e:	d10e      	bne.n	1796e <_svfiprintf_r+0x36>
   17950:	2140      	movs	r1, #64	; 0x40
   17952:	f7ff f8e9 	bl	16b28 <_malloc_r>
   17956:	6038      	str	r0, [r7, #0]
   17958:	6138      	str	r0, [r7, #16]
   1795a:	2800      	cmp	r0, #0
   1795c:	d105      	bne.n	1796a <_svfiprintf_r+0x32>
   1795e:	230c      	movs	r3, #12
   17960:	9a02      	ldr	r2, [sp, #8]
   17962:	3801      	subs	r0, #1
   17964:	6013      	str	r3, [r2, #0]
   17966:	b01f      	add	sp, #124	; 0x7c
   17968:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1796a:	2340      	movs	r3, #64	; 0x40
   1796c:	617b      	str	r3, [r7, #20]
   1796e:	2300      	movs	r3, #0
   17970:	ad06      	add	r5, sp, #24
   17972:	616b      	str	r3, [r5, #20]
   17974:	3320      	adds	r3, #32
   17976:	766b      	strb	r3, [r5, #25]
   17978:	3310      	adds	r3, #16
   1797a:	76ab      	strb	r3, [r5, #26]
   1797c:	0034      	movs	r4, r6
   1797e:	7823      	ldrb	r3, [r4, #0]
   17980:	2b00      	cmp	r3, #0
   17982:	d147      	bne.n	17a14 <_svfiprintf_r+0xdc>
   17984:	1ba3      	subs	r3, r4, r6
   17986:	9304      	str	r3, [sp, #16]
   17988:	d00d      	beq.n	179a6 <_svfiprintf_r+0x6e>
   1798a:	1ba3      	subs	r3, r4, r6
   1798c:	0032      	movs	r2, r6
   1798e:	0039      	movs	r1, r7
   17990:	9802      	ldr	r0, [sp, #8]
   17992:	f7ff ff6f 	bl	17874 <__ssputs_r>
   17996:	1c43      	adds	r3, r0, #1
   17998:	d100      	bne.n	1799c <_svfiprintf_r+0x64>
   1799a:	e0b5      	b.n	17b08 <_svfiprintf_r+0x1d0>
   1799c:	696a      	ldr	r2, [r5, #20]
   1799e:	9b04      	ldr	r3, [sp, #16]
   179a0:	4694      	mov	ip, r2
   179a2:	4463      	add	r3, ip
   179a4:	616b      	str	r3, [r5, #20]
   179a6:	7823      	ldrb	r3, [r4, #0]
   179a8:	2b00      	cmp	r3, #0
   179aa:	d100      	bne.n	179ae <_svfiprintf_r+0x76>
   179ac:	e0ac      	b.n	17b08 <_svfiprintf_r+0x1d0>
   179ae:	2201      	movs	r2, #1
   179b0:	2300      	movs	r3, #0
   179b2:	4252      	negs	r2, r2
   179b4:	606a      	str	r2, [r5, #4]
   179b6:	a902      	add	r1, sp, #8
   179b8:	3254      	adds	r2, #84	; 0x54
   179ba:	1852      	adds	r2, r2, r1
   179bc:	3401      	adds	r4, #1
   179be:	602b      	str	r3, [r5, #0]
   179c0:	60eb      	str	r3, [r5, #12]
   179c2:	60ab      	str	r3, [r5, #8]
   179c4:	7013      	strb	r3, [r2, #0]
   179c6:	65ab      	str	r3, [r5, #88]	; 0x58
   179c8:	4e58      	ldr	r6, [pc, #352]	; (17b2c <_svfiprintf_r+0x1f4>)
   179ca:	2205      	movs	r2, #5
   179cc:	7821      	ldrb	r1, [r4, #0]
   179ce:	0030      	movs	r0, r6
   179d0:	f001 f9a4 	bl	18d1c <memchr>
   179d4:	1c62      	adds	r2, r4, #1
   179d6:	2800      	cmp	r0, #0
   179d8:	d120      	bne.n	17a1c <_svfiprintf_r+0xe4>
   179da:	6829      	ldr	r1, [r5, #0]
   179dc:	06cb      	lsls	r3, r1, #27
   179de:	d504      	bpl.n	179ea <_svfiprintf_r+0xb2>
   179e0:	2353      	movs	r3, #83	; 0x53
   179e2:	ae02      	add	r6, sp, #8
   179e4:	3020      	adds	r0, #32
   179e6:	199b      	adds	r3, r3, r6
   179e8:	7018      	strb	r0, [r3, #0]
   179ea:	070b      	lsls	r3, r1, #28
   179ec:	d504      	bpl.n	179f8 <_svfiprintf_r+0xc0>
   179ee:	2353      	movs	r3, #83	; 0x53
   179f0:	202b      	movs	r0, #43	; 0x2b
   179f2:	ae02      	add	r6, sp, #8
   179f4:	199b      	adds	r3, r3, r6
   179f6:	7018      	strb	r0, [r3, #0]
   179f8:	7823      	ldrb	r3, [r4, #0]
   179fa:	2b2a      	cmp	r3, #42	; 0x2a
   179fc:	d016      	beq.n	17a2c <_svfiprintf_r+0xf4>
   179fe:	2000      	movs	r0, #0
   17a00:	210a      	movs	r1, #10
   17a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17a04:	7822      	ldrb	r2, [r4, #0]
   17a06:	3a30      	subs	r2, #48	; 0x30
   17a08:	2a09      	cmp	r2, #9
   17a0a:	d955      	bls.n	17ab8 <_svfiprintf_r+0x180>
   17a0c:	2800      	cmp	r0, #0
   17a0e:	d015      	beq.n	17a3c <_svfiprintf_r+0x104>
   17a10:	9309      	str	r3, [sp, #36]	; 0x24
   17a12:	e013      	b.n	17a3c <_svfiprintf_r+0x104>
   17a14:	2b25      	cmp	r3, #37	; 0x25
   17a16:	d0b5      	beq.n	17984 <_svfiprintf_r+0x4c>
   17a18:	3401      	adds	r4, #1
   17a1a:	e7b0      	b.n	1797e <_svfiprintf_r+0x46>
   17a1c:	2301      	movs	r3, #1
   17a1e:	1b80      	subs	r0, r0, r6
   17a20:	4083      	lsls	r3, r0
   17a22:	6829      	ldr	r1, [r5, #0]
   17a24:	0014      	movs	r4, r2
   17a26:	430b      	orrs	r3, r1
   17a28:	602b      	str	r3, [r5, #0]
   17a2a:	e7cd      	b.n	179c8 <_svfiprintf_r+0x90>
   17a2c:	9b05      	ldr	r3, [sp, #20]
   17a2e:	1d18      	adds	r0, r3, #4
   17a30:	681b      	ldr	r3, [r3, #0]
   17a32:	9005      	str	r0, [sp, #20]
   17a34:	2b00      	cmp	r3, #0
   17a36:	db39      	blt.n	17aac <_svfiprintf_r+0x174>
   17a38:	9309      	str	r3, [sp, #36]	; 0x24
   17a3a:	0014      	movs	r4, r2
   17a3c:	7823      	ldrb	r3, [r4, #0]
   17a3e:	2b2e      	cmp	r3, #46	; 0x2e
   17a40:	d10b      	bne.n	17a5a <_svfiprintf_r+0x122>
   17a42:	7863      	ldrb	r3, [r4, #1]
   17a44:	1c62      	adds	r2, r4, #1
   17a46:	2b2a      	cmp	r3, #42	; 0x2a
   17a48:	d13e      	bne.n	17ac8 <_svfiprintf_r+0x190>
   17a4a:	9b05      	ldr	r3, [sp, #20]
   17a4c:	3402      	adds	r4, #2
   17a4e:	1d1a      	adds	r2, r3, #4
   17a50:	681b      	ldr	r3, [r3, #0]
   17a52:	9205      	str	r2, [sp, #20]
   17a54:	2b00      	cmp	r3, #0
   17a56:	db34      	blt.n	17ac2 <_svfiprintf_r+0x18a>
   17a58:	9307      	str	r3, [sp, #28]
   17a5a:	4e35      	ldr	r6, [pc, #212]	; (17b30 <_svfiprintf_r+0x1f8>)
   17a5c:	7821      	ldrb	r1, [r4, #0]
   17a5e:	2203      	movs	r2, #3
   17a60:	0030      	movs	r0, r6
   17a62:	f001 f95b 	bl	18d1c <memchr>
   17a66:	2800      	cmp	r0, #0
   17a68:	d006      	beq.n	17a78 <_svfiprintf_r+0x140>
   17a6a:	2340      	movs	r3, #64	; 0x40
   17a6c:	1b80      	subs	r0, r0, r6
   17a6e:	4083      	lsls	r3, r0
   17a70:	682a      	ldr	r2, [r5, #0]
   17a72:	3401      	adds	r4, #1
   17a74:	4313      	orrs	r3, r2
   17a76:	602b      	str	r3, [r5, #0]
   17a78:	7821      	ldrb	r1, [r4, #0]
   17a7a:	2206      	movs	r2, #6
   17a7c:	482d      	ldr	r0, [pc, #180]	; (17b34 <_svfiprintf_r+0x1fc>)
   17a7e:	1c66      	adds	r6, r4, #1
   17a80:	7629      	strb	r1, [r5, #24]
   17a82:	f001 f94b 	bl	18d1c <memchr>
   17a86:	2800      	cmp	r0, #0
   17a88:	d046      	beq.n	17b18 <_svfiprintf_r+0x1e0>
   17a8a:	4b2b      	ldr	r3, [pc, #172]	; (17b38 <_svfiprintf_r+0x200>)
   17a8c:	2b00      	cmp	r3, #0
   17a8e:	d12f      	bne.n	17af0 <_svfiprintf_r+0x1b8>
   17a90:	6829      	ldr	r1, [r5, #0]
   17a92:	9b05      	ldr	r3, [sp, #20]
   17a94:	2207      	movs	r2, #7
   17a96:	05c9      	lsls	r1, r1, #23
   17a98:	d528      	bpl.n	17aec <_svfiprintf_r+0x1b4>
   17a9a:	189b      	adds	r3, r3, r2
   17a9c:	4393      	bics	r3, r2
   17a9e:	3308      	adds	r3, #8
   17aa0:	9305      	str	r3, [sp, #20]
   17aa2:	696b      	ldr	r3, [r5, #20]
   17aa4:	9a03      	ldr	r2, [sp, #12]
   17aa6:	189b      	adds	r3, r3, r2
   17aa8:	616b      	str	r3, [r5, #20]
   17aaa:	e767      	b.n	1797c <_svfiprintf_r+0x44>
   17aac:	425b      	negs	r3, r3
   17aae:	60eb      	str	r3, [r5, #12]
   17ab0:	2302      	movs	r3, #2
   17ab2:	430b      	orrs	r3, r1
   17ab4:	602b      	str	r3, [r5, #0]
   17ab6:	e7c0      	b.n	17a3a <_svfiprintf_r+0x102>
   17ab8:	434b      	muls	r3, r1
   17aba:	3401      	adds	r4, #1
   17abc:	189b      	adds	r3, r3, r2
   17abe:	2001      	movs	r0, #1
   17ac0:	e7a0      	b.n	17a04 <_svfiprintf_r+0xcc>
   17ac2:	2301      	movs	r3, #1
   17ac4:	425b      	negs	r3, r3
   17ac6:	e7c7      	b.n	17a58 <_svfiprintf_r+0x120>
   17ac8:	2300      	movs	r3, #0
   17aca:	0014      	movs	r4, r2
   17acc:	200a      	movs	r0, #10
   17ace:	001a      	movs	r2, r3
   17ad0:	606b      	str	r3, [r5, #4]
   17ad2:	7821      	ldrb	r1, [r4, #0]
   17ad4:	3930      	subs	r1, #48	; 0x30
   17ad6:	2909      	cmp	r1, #9
   17ad8:	d903      	bls.n	17ae2 <_svfiprintf_r+0x1aa>
   17ada:	2b00      	cmp	r3, #0
   17adc:	d0bd      	beq.n	17a5a <_svfiprintf_r+0x122>
   17ade:	9207      	str	r2, [sp, #28]
   17ae0:	e7bb      	b.n	17a5a <_svfiprintf_r+0x122>
   17ae2:	4342      	muls	r2, r0
   17ae4:	3401      	adds	r4, #1
   17ae6:	1852      	adds	r2, r2, r1
   17ae8:	2301      	movs	r3, #1
   17aea:	e7f2      	b.n	17ad2 <_svfiprintf_r+0x19a>
   17aec:	3307      	adds	r3, #7
   17aee:	e7d5      	b.n	17a9c <_svfiprintf_r+0x164>
   17af0:	ab05      	add	r3, sp, #20
   17af2:	9300      	str	r3, [sp, #0]
   17af4:	003a      	movs	r2, r7
   17af6:	4b11      	ldr	r3, [pc, #68]	; (17b3c <_svfiprintf_r+0x204>)
   17af8:	0029      	movs	r1, r5
   17afa:	9802      	ldr	r0, [sp, #8]
   17afc:	e000      	b.n	17b00 <_svfiprintf_r+0x1c8>
   17afe:	bf00      	nop
   17b00:	9003      	str	r0, [sp, #12]
   17b02:	9b03      	ldr	r3, [sp, #12]
   17b04:	3301      	adds	r3, #1
   17b06:	d1cc      	bne.n	17aa2 <_svfiprintf_r+0x16a>
   17b08:	89bb      	ldrh	r3, [r7, #12]
   17b0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17b0c:	065b      	lsls	r3, r3, #25
   17b0e:	d400      	bmi.n	17b12 <_svfiprintf_r+0x1da>
   17b10:	e729      	b.n	17966 <_svfiprintf_r+0x2e>
   17b12:	2001      	movs	r0, #1
   17b14:	4240      	negs	r0, r0
   17b16:	e726      	b.n	17966 <_svfiprintf_r+0x2e>
   17b18:	ab05      	add	r3, sp, #20
   17b1a:	9300      	str	r3, [sp, #0]
   17b1c:	003a      	movs	r2, r7
   17b1e:	4b07      	ldr	r3, [pc, #28]	; (17b3c <_svfiprintf_r+0x204>)
   17b20:	0029      	movs	r1, r5
   17b22:	9802      	ldr	r0, [sp, #8]
   17b24:	f000 f9be 	bl	17ea4 <_printf_i>
   17b28:	e7ea      	b.n	17b00 <_svfiprintf_r+0x1c8>
   17b2a:	46c0      	nop			; (mov r8, r8)
   17b2c:	0001b6f2 	.word	0x0001b6f2
   17b30:	0001b6f8 	.word	0x0001b6f8
   17b34:	0001b6fc 	.word	0x0001b6fc
   17b38:	00000000 	.word	0x00000000
   17b3c:	00017875 	.word	0x00017875

00017b40 <__sfputc_r>:
   17b40:	6893      	ldr	r3, [r2, #8]
   17b42:	b510      	push	{r4, lr}
   17b44:	3b01      	subs	r3, #1
   17b46:	6093      	str	r3, [r2, #8]
   17b48:	2b00      	cmp	r3, #0
   17b4a:	da05      	bge.n	17b58 <__sfputc_r+0x18>
   17b4c:	6994      	ldr	r4, [r2, #24]
   17b4e:	42a3      	cmp	r3, r4
   17b50:	db08      	blt.n	17b64 <__sfputc_r+0x24>
   17b52:	b2cb      	uxtb	r3, r1
   17b54:	2b0a      	cmp	r3, #10
   17b56:	d005      	beq.n	17b64 <__sfputc_r+0x24>
   17b58:	6813      	ldr	r3, [r2, #0]
   17b5a:	1c58      	adds	r0, r3, #1
   17b5c:	6010      	str	r0, [r2, #0]
   17b5e:	7019      	strb	r1, [r3, #0]
   17b60:	b2c8      	uxtb	r0, r1
   17b62:	bd10      	pop	{r4, pc}
   17b64:	f7ff fb6c 	bl	17240 <__swbuf_r>
   17b68:	e7fb      	b.n	17b62 <__sfputc_r+0x22>

00017b6a <__sfputs_r>:
   17b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b6c:	0006      	movs	r6, r0
   17b6e:	000f      	movs	r7, r1
   17b70:	0014      	movs	r4, r2
   17b72:	18d5      	adds	r5, r2, r3
   17b74:	42ac      	cmp	r4, r5
   17b76:	d101      	bne.n	17b7c <__sfputs_r+0x12>
   17b78:	2000      	movs	r0, #0
   17b7a:	e007      	b.n	17b8c <__sfputs_r+0x22>
   17b7c:	7821      	ldrb	r1, [r4, #0]
   17b7e:	003a      	movs	r2, r7
   17b80:	0030      	movs	r0, r6
   17b82:	f7ff ffdd 	bl	17b40 <__sfputc_r>
   17b86:	3401      	adds	r4, #1
   17b88:	1c43      	adds	r3, r0, #1
   17b8a:	d1f3      	bne.n	17b74 <__sfputs_r+0xa>
   17b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00017b90 <_vfiprintf_r>:
   17b90:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b92:	b09f      	sub	sp, #124	; 0x7c
   17b94:	0006      	movs	r6, r0
   17b96:	000f      	movs	r7, r1
   17b98:	0014      	movs	r4, r2
   17b9a:	9305      	str	r3, [sp, #20]
   17b9c:	2800      	cmp	r0, #0
   17b9e:	d004      	beq.n	17baa <_vfiprintf_r+0x1a>
   17ba0:	6983      	ldr	r3, [r0, #24]
   17ba2:	2b00      	cmp	r3, #0
   17ba4:	d101      	bne.n	17baa <_vfiprintf_r+0x1a>
   17ba6:	f7ff fd23 	bl	175f0 <__sinit>
   17baa:	4b7f      	ldr	r3, [pc, #508]	; (17da8 <_vfiprintf_r+0x218>)
   17bac:	429f      	cmp	r7, r3
   17bae:	d15c      	bne.n	17c6a <_vfiprintf_r+0xda>
   17bb0:	6877      	ldr	r7, [r6, #4]
   17bb2:	89bb      	ldrh	r3, [r7, #12]
   17bb4:	071b      	lsls	r3, r3, #28
   17bb6:	d562      	bpl.n	17c7e <_vfiprintf_r+0xee>
   17bb8:	693b      	ldr	r3, [r7, #16]
   17bba:	2b00      	cmp	r3, #0
   17bbc:	d05f      	beq.n	17c7e <_vfiprintf_r+0xee>
   17bbe:	2300      	movs	r3, #0
   17bc0:	ad06      	add	r5, sp, #24
   17bc2:	616b      	str	r3, [r5, #20]
   17bc4:	3320      	adds	r3, #32
   17bc6:	766b      	strb	r3, [r5, #25]
   17bc8:	3310      	adds	r3, #16
   17bca:	76ab      	strb	r3, [r5, #26]
   17bcc:	9402      	str	r4, [sp, #8]
   17bce:	9c02      	ldr	r4, [sp, #8]
   17bd0:	7823      	ldrb	r3, [r4, #0]
   17bd2:	2b00      	cmp	r3, #0
   17bd4:	d15d      	bne.n	17c92 <_vfiprintf_r+0x102>
   17bd6:	9b02      	ldr	r3, [sp, #8]
   17bd8:	1ae3      	subs	r3, r4, r3
   17bda:	9304      	str	r3, [sp, #16]
   17bdc:	d00d      	beq.n	17bfa <_vfiprintf_r+0x6a>
   17bde:	9b04      	ldr	r3, [sp, #16]
   17be0:	9a02      	ldr	r2, [sp, #8]
   17be2:	0039      	movs	r1, r7
   17be4:	0030      	movs	r0, r6
   17be6:	f7ff ffc0 	bl	17b6a <__sfputs_r>
   17bea:	1c43      	adds	r3, r0, #1
   17bec:	d100      	bne.n	17bf0 <_vfiprintf_r+0x60>
   17bee:	e0cc      	b.n	17d8a <_vfiprintf_r+0x1fa>
   17bf0:	696a      	ldr	r2, [r5, #20]
   17bf2:	9b04      	ldr	r3, [sp, #16]
   17bf4:	4694      	mov	ip, r2
   17bf6:	4463      	add	r3, ip
   17bf8:	616b      	str	r3, [r5, #20]
   17bfa:	7823      	ldrb	r3, [r4, #0]
   17bfc:	2b00      	cmp	r3, #0
   17bfe:	d100      	bne.n	17c02 <_vfiprintf_r+0x72>
   17c00:	e0c3      	b.n	17d8a <_vfiprintf_r+0x1fa>
   17c02:	2201      	movs	r2, #1
   17c04:	2300      	movs	r3, #0
   17c06:	4252      	negs	r2, r2
   17c08:	606a      	str	r2, [r5, #4]
   17c0a:	a902      	add	r1, sp, #8
   17c0c:	3254      	adds	r2, #84	; 0x54
   17c0e:	1852      	adds	r2, r2, r1
   17c10:	3401      	adds	r4, #1
   17c12:	602b      	str	r3, [r5, #0]
   17c14:	60eb      	str	r3, [r5, #12]
   17c16:	60ab      	str	r3, [r5, #8]
   17c18:	7013      	strb	r3, [r2, #0]
   17c1a:	65ab      	str	r3, [r5, #88]	; 0x58
   17c1c:	7821      	ldrb	r1, [r4, #0]
   17c1e:	2205      	movs	r2, #5
   17c20:	4862      	ldr	r0, [pc, #392]	; (17dac <_vfiprintf_r+0x21c>)
   17c22:	f001 f87b 	bl	18d1c <memchr>
   17c26:	1c63      	adds	r3, r4, #1
   17c28:	469c      	mov	ip, r3
   17c2a:	2800      	cmp	r0, #0
   17c2c:	d135      	bne.n	17c9a <_vfiprintf_r+0x10a>
   17c2e:	6829      	ldr	r1, [r5, #0]
   17c30:	06cb      	lsls	r3, r1, #27
   17c32:	d504      	bpl.n	17c3e <_vfiprintf_r+0xae>
   17c34:	2353      	movs	r3, #83	; 0x53
   17c36:	aa02      	add	r2, sp, #8
   17c38:	3020      	adds	r0, #32
   17c3a:	189b      	adds	r3, r3, r2
   17c3c:	7018      	strb	r0, [r3, #0]
   17c3e:	070b      	lsls	r3, r1, #28
   17c40:	d504      	bpl.n	17c4c <_vfiprintf_r+0xbc>
   17c42:	2353      	movs	r3, #83	; 0x53
   17c44:	202b      	movs	r0, #43	; 0x2b
   17c46:	aa02      	add	r2, sp, #8
   17c48:	189b      	adds	r3, r3, r2
   17c4a:	7018      	strb	r0, [r3, #0]
   17c4c:	7823      	ldrb	r3, [r4, #0]
   17c4e:	2b2a      	cmp	r3, #42	; 0x2a
   17c50:	d02c      	beq.n	17cac <_vfiprintf_r+0x11c>
   17c52:	2000      	movs	r0, #0
   17c54:	210a      	movs	r1, #10
   17c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17c58:	7822      	ldrb	r2, [r4, #0]
   17c5a:	3a30      	subs	r2, #48	; 0x30
   17c5c:	2a09      	cmp	r2, #9
   17c5e:	d800      	bhi.n	17c62 <_vfiprintf_r+0xd2>
   17c60:	e06b      	b.n	17d3a <_vfiprintf_r+0x1aa>
   17c62:	2800      	cmp	r0, #0
   17c64:	d02a      	beq.n	17cbc <_vfiprintf_r+0x12c>
   17c66:	9309      	str	r3, [sp, #36]	; 0x24
   17c68:	e028      	b.n	17cbc <_vfiprintf_r+0x12c>
   17c6a:	4b51      	ldr	r3, [pc, #324]	; (17db0 <_vfiprintf_r+0x220>)
   17c6c:	429f      	cmp	r7, r3
   17c6e:	d101      	bne.n	17c74 <_vfiprintf_r+0xe4>
   17c70:	68b7      	ldr	r7, [r6, #8]
   17c72:	e79e      	b.n	17bb2 <_vfiprintf_r+0x22>
   17c74:	4b4f      	ldr	r3, [pc, #316]	; (17db4 <_vfiprintf_r+0x224>)
   17c76:	429f      	cmp	r7, r3
   17c78:	d19b      	bne.n	17bb2 <_vfiprintf_r+0x22>
   17c7a:	68f7      	ldr	r7, [r6, #12]
   17c7c:	e799      	b.n	17bb2 <_vfiprintf_r+0x22>
   17c7e:	0039      	movs	r1, r7
   17c80:	0030      	movs	r0, r6
   17c82:	f7ff fb33 	bl	172ec <__swsetup_r>
   17c86:	2800      	cmp	r0, #0
   17c88:	d099      	beq.n	17bbe <_vfiprintf_r+0x2e>
   17c8a:	2001      	movs	r0, #1
   17c8c:	4240      	negs	r0, r0
   17c8e:	b01f      	add	sp, #124	; 0x7c
   17c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c92:	2b25      	cmp	r3, #37	; 0x25
   17c94:	d09f      	beq.n	17bd6 <_vfiprintf_r+0x46>
   17c96:	3401      	adds	r4, #1
   17c98:	e79a      	b.n	17bd0 <_vfiprintf_r+0x40>
   17c9a:	4b44      	ldr	r3, [pc, #272]	; (17dac <_vfiprintf_r+0x21c>)
   17c9c:	6829      	ldr	r1, [r5, #0]
   17c9e:	1ac0      	subs	r0, r0, r3
   17ca0:	2301      	movs	r3, #1
   17ca2:	4083      	lsls	r3, r0
   17ca4:	430b      	orrs	r3, r1
   17ca6:	602b      	str	r3, [r5, #0]
   17ca8:	4664      	mov	r4, ip
   17caa:	e7b7      	b.n	17c1c <_vfiprintf_r+0x8c>
   17cac:	9b05      	ldr	r3, [sp, #20]
   17cae:	1d18      	adds	r0, r3, #4
   17cb0:	681b      	ldr	r3, [r3, #0]
   17cb2:	9005      	str	r0, [sp, #20]
   17cb4:	2b00      	cmp	r3, #0
   17cb6:	db3a      	blt.n	17d2e <_vfiprintf_r+0x19e>
   17cb8:	9309      	str	r3, [sp, #36]	; 0x24
   17cba:	4664      	mov	r4, ip
   17cbc:	7823      	ldrb	r3, [r4, #0]
   17cbe:	2b2e      	cmp	r3, #46	; 0x2e
   17cc0:	d10b      	bne.n	17cda <_vfiprintf_r+0x14a>
   17cc2:	7863      	ldrb	r3, [r4, #1]
   17cc4:	1c62      	adds	r2, r4, #1
   17cc6:	2b2a      	cmp	r3, #42	; 0x2a
   17cc8:	d13f      	bne.n	17d4a <_vfiprintf_r+0x1ba>
   17cca:	9b05      	ldr	r3, [sp, #20]
   17ccc:	3402      	adds	r4, #2
   17cce:	1d1a      	adds	r2, r3, #4
   17cd0:	681b      	ldr	r3, [r3, #0]
   17cd2:	9205      	str	r2, [sp, #20]
   17cd4:	2b00      	cmp	r3, #0
   17cd6:	db35      	blt.n	17d44 <_vfiprintf_r+0x1b4>
   17cd8:	9307      	str	r3, [sp, #28]
   17cda:	7821      	ldrb	r1, [r4, #0]
   17cdc:	2203      	movs	r2, #3
   17cde:	4836      	ldr	r0, [pc, #216]	; (17db8 <_vfiprintf_r+0x228>)
   17ce0:	f001 f81c 	bl	18d1c <memchr>
   17ce4:	2800      	cmp	r0, #0
   17ce6:	d007      	beq.n	17cf8 <_vfiprintf_r+0x168>
   17ce8:	4b33      	ldr	r3, [pc, #204]	; (17db8 <_vfiprintf_r+0x228>)
   17cea:	682a      	ldr	r2, [r5, #0]
   17cec:	1ac0      	subs	r0, r0, r3
   17cee:	2340      	movs	r3, #64	; 0x40
   17cf0:	4083      	lsls	r3, r0
   17cf2:	4313      	orrs	r3, r2
   17cf4:	602b      	str	r3, [r5, #0]
   17cf6:	3401      	adds	r4, #1
   17cf8:	7821      	ldrb	r1, [r4, #0]
   17cfa:	1c63      	adds	r3, r4, #1
   17cfc:	2206      	movs	r2, #6
   17cfe:	482f      	ldr	r0, [pc, #188]	; (17dbc <_vfiprintf_r+0x22c>)
   17d00:	9302      	str	r3, [sp, #8]
   17d02:	7629      	strb	r1, [r5, #24]
   17d04:	f001 f80a 	bl	18d1c <memchr>
   17d08:	2800      	cmp	r0, #0
   17d0a:	d044      	beq.n	17d96 <_vfiprintf_r+0x206>
   17d0c:	4b2c      	ldr	r3, [pc, #176]	; (17dc0 <_vfiprintf_r+0x230>)
   17d0e:	2b00      	cmp	r3, #0
   17d10:	d12f      	bne.n	17d72 <_vfiprintf_r+0x1e2>
   17d12:	6829      	ldr	r1, [r5, #0]
   17d14:	9b05      	ldr	r3, [sp, #20]
   17d16:	2207      	movs	r2, #7
   17d18:	05c9      	lsls	r1, r1, #23
   17d1a:	d528      	bpl.n	17d6e <_vfiprintf_r+0x1de>
   17d1c:	189b      	adds	r3, r3, r2
   17d1e:	4393      	bics	r3, r2
   17d20:	3308      	adds	r3, #8
   17d22:	9305      	str	r3, [sp, #20]
   17d24:	696b      	ldr	r3, [r5, #20]
   17d26:	9a03      	ldr	r2, [sp, #12]
   17d28:	189b      	adds	r3, r3, r2
   17d2a:	616b      	str	r3, [r5, #20]
   17d2c:	e74f      	b.n	17bce <_vfiprintf_r+0x3e>
   17d2e:	425b      	negs	r3, r3
   17d30:	60eb      	str	r3, [r5, #12]
   17d32:	2302      	movs	r3, #2
   17d34:	430b      	orrs	r3, r1
   17d36:	602b      	str	r3, [r5, #0]
   17d38:	e7bf      	b.n	17cba <_vfiprintf_r+0x12a>
   17d3a:	434b      	muls	r3, r1
   17d3c:	3401      	adds	r4, #1
   17d3e:	189b      	adds	r3, r3, r2
   17d40:	2001      	movs	r0, #1
   17d42:	e789      	b.n	17c58 <_vfiprintf_r+0xc8>
   17d44:	2301      	movs	r3, #1
   17d46:	425b      	negs	r3, r3
   17d48:	e7c6      	b.n	17cd8 <_vfiprintf_r+0x148>
   17d4a:	2300      	movs	r3, #0
   17d4c:	0014      	movs	r4, r2
   17d4e:	200a      	movs	r0, #10
   17d50:	001a      	movs	r2, r3
   17d52:	606b      	str	r3, [r5, #4]
   17d54:	7821      	ldrb	r1, [r4, #0]
   17d56:	3930      	subs	r1, #48	; 0x30
   17d58:	2909      	cmp	r1, #9
   17d5a:	d903      	bls.n	17d64 <_vfiprintf_r+0x1d4>
   17d5c:	2b00      	cmp	r3, #0
   17d5e:	d0bc      	beq.n	17cda <_vfiprintf_r+0x14a>
   17d60:	9207      	str	r2, [sp, #28]
   17d62:	e7ba      	b.n	17cda <_vfiprintf_r+0x14a>
   17d64:	4342      	muls	r2, r0
   17d66:	3401      	adds	r4, #1
   17d68:	1852      	adds	r2, r2, r1
   17d6a:	2301      	movs	r3, #1
   17d6c:	e7f2      	b.n	17d54 <_vfiprintf_r+0x1c4>
   17d6e:	3307      	adds	r3, #7
   17d70:	e7d5      	b.n	17d1e <_vfiprintf_r+0x18e>
   17d72:	ab05      	add	r3, sp, #20
   17d74:	9300      	str	r3, [sp, #0]
   17d76:	003a      	movs	r2, r7
   17d78:	4b12      	ldr	r3, [pc, #72]	; (17dc4 <_vfiprintf_r+0x234>)
   17d7a:	0029      	movs	r1, r5
   17d7c:	0030      	movs	r0, r6
   17d7e:	e000      	b.n	17d82 <_vfiprintf_r+0x1f2>
   17d80:	bf00      	nop
   17d82:	9003      	str	r0, [sp, #12]
   17d84:	9b03      	ldr	r3, [sp, #12]
   17d86:	3301      	adds	r3, #1
   17d88:	d1cc      	bne.n	17d24 <_vfiprintf_r+0x194>
   17d8a:	89bb      	ldrh	r3, [r7, #12]
   17d8c:	065b      	lsls	r3, r3, #25
   17d8e:	d500      	bpl.n	17d92 <_vfiprintf_r+0x202>
   17d90:	e77b      	b.n	17c8a <_vfiprintf_r+0xfa>
   17d92:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17d94:	e77b      	b.n	17c8e <_vfiprintf_r+0xfe>
   17d96:	ab05      	add	r3, sp, #20
   17d98:	9300      	str	r3, [sp, #0]
   17d9a:	003a      	movs	r2, r7
   17d9c:	4b09      	ldr	r3, [pc, #36]	; (17dc4 <_vfiprintf_r+0x234>)
   17d9e:	0029      	movs	r1, r5
   17da0:	0030      	movs	r0, r6
   17da2:	f000 f87f 	bl	17ea4 <_printf_i>
   17da6:	e7ec      	b.n	17d82 <_vfiprintf_r+0x1f2>
   17da8:	0001b6a8 	.word	0x0001b6a8
   17dac:	0001b6f2 	.word	0x0001b6f2
   17db0:	0001b6c8 	.word	0x0001b6c8
   17db4:	0001b688 	.word	0x0001b688
   17db8:	0001b6f8 	.word	0x0001b6f8
   17dbc:	0001b6fc 	.word	0x0001b6fc
   17dc0:	00000000 	.word	0x00000000
   17dc4:	00017b6b 	.word	0x00017b6b

00017dc8 <_printf_common>:
   17dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17dca:	0015      	movs	r5, r2
   17dcc:	9301      	str	r3, [sp, #4]
   17dce:	688a      	ldr	r2, [r1, #8]
   17dd0:	690b      	ldr	r3, [r1, #16]
   17dd2:	9000      	str	r0, [sp, #0]
   17dd4:	000c      	movs	r4, r1
   17dd6:	4293      	cmp	r3, r2
   17dd8:	da00      	bge.n	17ddc <_printf_common+0x14>
   17dda:	0013      	movs	r3, r2
   17ddc:	0022      	movs	r2, r4
   17dde:	602b      	str	r3, [r5, #0]
   17de0:	3243      	adds	r2, #67	; 0x43
   17de2:	7812      	ldrb	r2, [r2, #0]
   17de4:	2a00      	cmp	r2, #0
   17de6:	d001      	beq.n	17dec <_printf_common+0x24>
   17de8:	3301      	adds	r3, #1
   17dea:	602b      	str	r3, [r5, #0]
   17dec:	6823      	ldr	r3, [r4, #0]
   17dee:	069b      	lsls	r3, r3, #26
   17df0:	d502      	bpl.n	17df8 <_printf_common+0x30>
   17df2:	682b      	ldr	r3, [r5, #0]
   17df4:	3302      	adds	r3, #2
   17df6:	602b      	str	r3, [r5, #0]
   17df8:	2706      	movs	r7, #6
   17dfa:	6823      	ldr	r3, [r4, #0]
   17dfc:	401f      	ands	r7, r3
   17dfe:	d027      	beq.n	17e50 <_printf_common+0x88>
   17e00:	0023      	movs	r3, r4
   17e02:	3343      	adds	r3, #67	; 0x43
   17e04:	781b      	ldrb	r3, [r3, #0]
   17e06:	1e5a      	subs	r2, r3, #1
   17e08:	4193      	sbcs	r3, r2
   17e0a:	6822      	ldr	r2, [r4, #0]
   17e0c:	0692      	lsls	r2, r2, #26
   17e0e:	d430      	bmi.n	17e72 <_printf_common+0xaa>
   17e10:	0022      	movs	r2, r4
   17e12:	9901      	ldr	r1, [sp, #4]
   17e14:	3243      	adds	r2, #67	; 0x43
   17e16:	9800      	ldr	r0, [sp, #0]
   17e18:	9e08      	ldr	r6, [sp, #32]
   17e1a:	47b0      	blx	r6
   17e1c:	1c43      	adds	r3, r0, #1
   17e1e:	d025      	beq.n	17e6c <_printf_common+0xa4>
   17e20:	2306      	movs	r3, #6
   17e22:	6820      	ldr	r0, [r4, #0]
   17e24:	682a      	ldr	r2, [r5, #0]
   17e26:	68e1      	ldr	r1, [r4, #12]
   17e28:	4003      	ands	r3, r0
   17e2a:	2500      	movs	r5, #0
   17e2c:	2b04      	cmp	r3, #4
   17e2e:	d103      	bne.n	17e38 <_printf_common+0x70>
   17e30:	1a8d      	subs	r5, r1, r2
   17e32:	43eb      	mvns	r3, r5
   17e34:	17db      	asrs	r3, r3, #31
   17e36:	401d      	ands	r5, r3
   17e38:	68a3      	ldr	r3, [r4, #8]
   17e3a:	6922      	ldr	r2, [r4, #16]
   17e3c:	4293      	cmp	r3, r2
   17e3e:	dd01      	ble.n	17e44 <_printf_common+0x7c>
   17e40:	1a9b      	subs	r3, r3, r2
   17e42:	18ed      	adds	r5, r5, r3
   17e44:	2700      	movs	r7, #0
   17e46:	42bd      	cmp	r5, r7
   17e48:	d120      	bne.n	17e8c <_printf_common+0xc4>
   17e4a:	2000      	movs	r0, #0
   17e4c:	e010      	b.n	17e70 <_printf_common+0xa8>
   17e4e:	3701      	adds	r7, #1
   17e50:	68e3      	ldr	r3, [r4, #12]
   17e52:	682a      	ldr	r2, [r5, #0]
   17e54:	1a9b      	subs	r3, r3, r2
   17e56:	429f      	cmp	r7, r3
   17e58:	dad2      	bge.n	17e00 <_printf_common+0x38>
   17e5a:	0022      	movs	r2, r4
   17e5c:	2301      	movs	r3, #1
   17e5e:	3219      	adds	r2, #25
   17e60:	9901      	ldr	r1, [sp, #4]
   17e62:	9800      	ldr	r0, [sp, #0]
   17e64:	9e08      	ldr	r6, [sp, #32]
   17e66:	47b0      	blx	r6
   17e68:	1c43      	adds	r3, r0, #1
   17e6a:	d1f0      	bne.n	17e4e <_printf_common+0x86>
   17e6c:	2001      	movs	r0, #1
   17e6e:	4240      	negs	r0, r0
   17e70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17e72:	2030      	movs	r0, #48	; 0x30
   17e74:	18e1      	adds	r1, r4, r3
   17e76:	3143      	adds	r1, #67	; 0x43
   17e78:	7008      	strb	r0, [r1, #0]
   17e7a:	0021      	movs	r1, r4
   17e7c:	1c5a      	adds	r2, r3, #1
   17e7e:	3145      	adds	r1, #69	; 0x45
   17e80:	7809      	ldrb	r1, [r1, #0]
   17e82:	18a2      	adds	r2, r4, r2
   17e84:	3243      	adds	r2, #67	; 0x43
   17e86:	3302      	adds	r3, #2
   17e88:	7011      	strb	r1, [r2, #0]
   17e8a:	e7c1      	b.n	17e10 <_printf_common+0x48>
   17e8c:	0022      	movs	r2, r4
   17e8e:	2301      	movs	r3, #1
   17e90:	321a      	adds	r2, #26
   17e92:	9901      	ldr	r1, [sp, #4]
   17e94:	9800      	ldr	r0, [sp, #0]
   17e96:	9e08      	ldr	r6, [sp, #32]
   17e98:	47b0      	blx	r6
   17e9a:	1c43      	adds	r3, r0, #1
   17e9c:	d0e6      	beq.n	17e6c <_printf_common+0xa4>
   17e9e:	3701      	adds	r7, #1
   17ea0:	e7d1      	b.n	17e46 <_printf_common+0x7e>
	...

00017ea4 <_printf_i>:
   17ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ea6:	b08b      	sub	sp, #44	; 0x2c
   17ea8:	9206      	str	r2, [sp, #24]
   17eaa:	000a      	movs	r2, r1
   17eac:	3243      	adds	r2, #67	; 0x43
   17eae:	9307      	str	r3, [sp, #28]
   17eb0:	9005      	str	r0, [sp, #20]
   17eb2:	9204      	str	r2, [sp, #16]
   17eb4:	7e0a      	ldrb	r2, [r1, #24]
   17eb6:	000c      	movs	r4, r1
   17eb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17eba:	2a6e      	cmp	r2, #110	; 0x6e
   17ebc:	d100      	bne.n	17ec0 <_printf_i+0x1c>
   17ebe:	e08f      	b.n	17fe0 <_printf_i+0x13c>
   17ec0:	d817      	bhi.n	17ef2 <_printf_i+0x4e>
   17ec2:	2a63      	cmp	r2, #99	; 0x63
   17ec4:	d02c      	beq.n	17f20 <_printf_i+0x7c>
   17ec6:	d808      	bhi.n	17eda <_printf_i+0x36>
   17ec8:	2a00      	cmp	r2, #0
   17eca:	d100      	bne.n	17ece <_printf_i+0x2a>
   17ecc:	e099      	b.n	18002 <_printf_i+0x15e>
   17ece:	2a58      	cmp	r2, #88	; 0x58
   17ed0:	d054      	beq.n	17f7c <_printf_i+0xd8>
   17ed2:	0026      	movs	r6, r4
   17ed4:	3642      	adds	r6, #66	; 0x42
   17ed6:	7032      	strb	r2, [r6, #0]
   17ed8:	e029      	b.n	17f2e <_printf_i+0x8a>
   17eda:	2a64      	cmp	r2, #100	; 0x64
   17edc:	d001      	beq.n	17ee2 <_printf_i+0x3e>
   17ede:	2a69      	cmp	r2, #105	; 0x69
   17ee0:	d1f7      	bne.n	17ed2 <_printf_i+0x2e>
   17ee2:	6821      	ldr	r1, [r4, #0]
   17ee4:	681a      	ldr	r2, [r3, #0]
   17ee6:	0608      	lsls	r0, r1, #24
   17ee8:	d523      	bpl.n	17f32 <_printf_i+0x8e>
   17eea:	1d11      	adds	r1, r2, #4
   17eec:	6019      	str	r1, [r3, #0]
   17eee:	6815      	ldr	r5, [r2, #0]
   17ef0:	e025      	b.n	17f3e <_printf_i+0x9a>
   17ef2:	2a73      	cmp	r2, #115	; 0x73
   17ef4:	d100      	bne.n	17ef8 <_printf_i+0x54>
   17ef6:	e088      	b.n	1800a <_printf_i+0x166>
   17ef8:	d808      	bhi.n	17f0c <_printf_i+0x68>
   17efa:	2a6f      	cmp	r2, #111	; 0x6f
   17efc:	d029      	beq.n	17f52 <_printf_i+0xae>
   17efe:	2a70      	cmp	r2, #112	; 0x70
   17f00:	d1e7      	bne.n	17ed2 <_printf_i+0x2e>
   17f02:	2220      	movs	r2, #32
   17f04:	6809      	ldr	r1, [r1, #0]
   17f06:	430a      	orrs	r2, r1
   17f08:	6022      	str	r2, [r4, #0]
   17f0a:	e003      	b.n	17f14 <_printf_i+0x70>
   17f0c:	2a75      	cmp	r2, #117	; 0x75
   17f0e:	d020      	beq.n	17f52 <_printf_i+0xae>
   17f10:	2a78      	cmp	r2, #120	; 0x78
   17f12:	d1de      	bne.n	17ed2 <_printf_i+0x2e>
   17f14:	0022      	movs	r2, r4
   17f16:	2178      	movs	r1, #120	; 0x78
   17f18:	3245      	adds	r2, #69	; 0x45
   17f1a:	7011      	strb	r1, [r2, #0]
   17f1c:	4a6c      	ldr	r2, [pc, #432]	; (180d0 <_printf_i+0x22c>)
   17f1e:	e030      	b.n	17f82 <_printf_i+0xde>
   17f20:	000e      	movs	r6, r1
   17f22:	681a      	ldr	r2, [r3, #0]
   17f24:	3642      	adds	r6, #66	; 0x42
   17f26:	1d11      	adds	r1, r2, #4
   17f28:	6019      	str	r1, [r3, #0]
   17f2a:	6813      	ldr	r3, [r2, #0]
   17f2c:	7033      	strb	r3, [r6, #0]
   17f2e:	2301      	movs	r3, #1
   17f30:	e079      	b.n	18026 <_printf_i+0x182>
   17f32:	0649      	lsls	r1, r1, #25
   17f34:	d5d9      	bpl.n	17eea <_printf_i+0x46>
   17f36:	1d11      	adds	r1, r2, #4
   17f38:	6019      	str	r1, [r3, #0]
   17f3a:	2300      	movs	r3, #0
   17f3c:	5ed5      	ldrsh	r5, [r2, r3]
   17f3e:	2d00      	cmp	r5, #0
   17f40:	da03      	bge.n	17f4a <_printf_i+0xa6>
   17f42:	232d      	movs	r3, #45	; 0x2d
   17f44:	9a04      	ldr	r2, [sp, #16]
   17f46:	426d      	negs	r5, r5
   17f48:	7013      	strb	r3, [r2, #0]
   17f4a:	4b62      	ldr	r3, [pc, #392]	; (180d4 <_printf_i+0x230>)
   17f4c:	270a      	movs	r7, #10
   17f4e:	9303      	str	r3, [sp, #12]
   17f50:	e02f      	b.n	17fb2 <_printf_i+0x10e>
   17f52:	6820      	ldr	r0, [r4, #0]
   17f54:	6819      	ldr	r1, [r3, #0]
   17f56:	0605      	lsls	r5, r0, #24
   17f58:	d503      	bpl.n	17f62 <_printf_i+0xbe>
   17f5a:	1d08      	adds	r0, r1, #4
   17f5c:	6018      	str	r0, [r3, #0]
   17f5e:	680d      	ldr	r5, [r1, #0]
   17f60:	e005      	b.n	17f6e <_printf_i+0xca>
   17f62:	0640      	lsls	r0, r0, #25
   17f64:	d5f9      	bpl.n	17f5a <_printf_i+0xb6>
   17f66:	680d      	ldr	r5, [r1, #0]
   17f68:	1d08      	adds	r0, r1, #4
   17f6a:	6018      	str	r0, [r3, #0]
   17f6c:	b2ad      	uxth	r5, r5
   17f6e:	4b59      	ldr	r3, [pc, #356]	; (180d4 <_printf_i+0x230>)
   17f70:	2708      	movs	r7, #8
   17f72:	9303      	str	r3, [sp, #12]
   17f74:	2a6f      	cmp	r2, #111	; 0x6f
   17f76:	d018      	beq.n	17faa <_printf_i+0x106>
   17f78:	270a      	movs	r7, #10
   17f7a:	e016      	b.n	17faa <_printf_i+0x106>
   17f7c:	3145      	adds	r1, #69	; 0x45
   17f7e:	700a      	strb	r2, [r1, #0]
   17f80:	4a54      	ldr	r2, [pc, #336]	; (180d4 <_printf_i+0x230>)
   17f82:	9203      	str	r2, [sp, #12]
   17f84:	681a      	ldr	r2, [r3, #0]
   17f86:	6821      	ldr	r1, [r4, #0]
   17f88:	1d10      	adds	r0, r2, #4
   17f8a:	6018      	str	r0, [r3, #0]
   17f8c:	6815      	ldr	r5, [r2, #0]
   17f8e:	0608      	lsls	r0, r1, #24
   17f90:	d522      	bpl.n	17fd8 <_printf_i+0x134>
   17f92:	07cb      	lsls	r3, r1, #31
   17f94:	d502      	bpl.n	17f9c <_printf_i+0xf8>
   17f96:	2320      	movs	r3, #32
   17f98:	4319      	orrs	r1, r3
   17f9a:	6021      	str	r1, [r4, #0]
   17f9c:	2710      	movs	r7, #16
   17f9e:	2d00      	cmp	r5, #0
   17fa0:	d103      	bne.n	17faa <_printf_i+0x106>
   17fa2:	2320      	movs	r3, #32
   17fa4:	6822      	ldr	r2, [r4, #0]
   17fa6:	439a      	bics	r2, r3
   17fa8:	6022      	str	r2, [r4, #0]
   17faa:	0023      	movs	r3, r4
   17fac:	2200      	movs	r2, #0
   17fae:	3343      	adds	r3, #67	; 0x43
   17fb0:	701a      	strb	r2, [r3, #0]
   17fb2:	6863      	ldr	r3, [r4, #4]
   17fb4:	60a3      	str	r3, [r4, #8]
   17fb6:	2b00      	cmp	r3, #0
   17fb8:	db5c      	blt.n	18074 <_printf_i+0x1d0>
   17fba:	2204      	movs	r2, #4
   17fbc:	6821      	ldr	r1, [r4, #0]
   17fbe:	4391      	bics	r1, r2
   17fc0:	6021      	str	r1, [r4, #0]
   17fc2:	2d00      	cmp	r5, #0
   17fc4:	d158      	bne.n	18078 <_printf_i+0x1d4>
   17fc6:	9e04      	ldr	r6, [sp, #16]
   17fc8:	2b00      	cmp	r3, #0
   17fca:	d064      	beq.n	18096 <_printf_i+0x1f2>
   17fcc:	0026      	movs	r6, r4
   17fce:	9b03      	ldr	r3, [sp, #12]
   17fd0:	3642      	adds	r6, #66	; 0x42
   17fd2:	781b      	ldrb	r3, [r3, #0]
   17fd4:	7033      	strb	r3, [r6, #0]
   17fd6:	e05e      	b.n	18096 <_printf_i+0x1f2>
   17fd8:	0648      	lsls	r0, r1, #25
   17fda:	d5da      	bpl.n	17f92 <_printf_i+0xee>
   17fdc:	b2ad      	uxth	r5, r5
   17fde:	e7d8      	b.n	17f92 <_printf_i+0xee>
   17fe0:	6809      	ldr	r1, [r1, #0]
   17fe2:	681a      	ldr	r2, [r3, #0]
   17fe4:	0608      	lsls	r0, r1, #24
   17fe6:	d505      	bpl.n	17ff4 <_printf_i+0x150>
   17fe8:	1d11      	adds	r1, r2, #4
   17fea:	6019      	str	r1, [r3, #0]
   17fec:	6813      	ldr	r3, [r2, #0]
   17fee:	6962      	ldr	r2, [r4, #20]
   17ff0:	601a      	str	r2, [r3, #0]
   17ff2:	e006      	b.n	18002 <_printf_i+0x15e>
   17ff4:	0649      	lsls	r1, r1, #25
   17ff6:	d5f7      	bpl.n	17fe8 <_printf_i+0x144>
   17ff8:	1d11      	adds	r1, r2, #4
   17ffa:	6019      	str	r1, [r3, #0]
   17ffc:	6813      	ldr	r3, [r2, #0]
   17ffe:	8aa2      	ldrh	r2, [r4, #20]
   18000:	801a      	strh	r2, [r3, #0]
   18002:	2300      	movs	r3, #0
   18004:	9e04      	ldr	r6, [sp, #16]
   18006:	6123      	str	r3, [r4, #16]
   18008:	e054      	b.n	180b4 <_printf_i+0x210>
   1800a:	681a      	ldr	r2, [r3, #0]
   1800c:	1d11      	adds	r1, r2, #4
   1800e:	6019      	str	r1, [r3, #0]
   18010:	6816      	ldr	r6, [r2, #0]
   18012:	2100      	movs	r1, #0
   18014:	6862      	ldr	r2, [r4, #4]
   18016:	0030      	movs	r0, r6
   18018:	f000 fe80 	bl	18d1c <memchr>
   1801c:	2800      	cmp	r0, #0
   1801e:	d001      	beq.n	18024 <_printf_i+0x180>
   18020:	1b80      	subs	r0, r0, r6
   18022:	6060      	str	r0, [r4, #4]
   18024:	6863      	ldr	r3, [r4, #4]
   18026:	6123      	str	r3, [r4, #16]
   18028:	2300      	movs	r3, #0
   1802a:	9a04      	ldr	r2, [sp, #16]
   1802c:	7013      	strb	r3, [r2, #0]
   1802e:	e041      	b.n	180b4 <_printf_i+0x210>
   18030:	6923      	ldr	r3, [r4, #16]
   18032:	0032      	movs	r2, r6
   18034:	9906      	ldr	r1, [sp, #24]
   18036:	9805      	ldr	r0, [sp, #20]
   18038:	9d07      	ldr	r5, [sp, #28]
   1803a:	47a8      	blx	r5
   1803c:	1c43      	adds	r3, r0, #1
   1803e:	d043      	beq.n	180c8 <_printf_i+0x224>
   18040:	6823      	ldr	r3, [r4, #0]
   18042:	2500      	movs	r5, #0
   18044:	079b      	lsls	r3, r3, #30
   18046:	d40f      	bmi.n	18068 <_printf_i+0x1c4>
   18048:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1804a:	68e0      	ldr	r0, [r4, #12]
   1804c:	4298      	cmp	r0, r3
   1804e:	da3d      	bge.n	180cc <_printf_i+0x228>
   18050:	0018      	movs	r0, r3
   18052:	e03b      	b.n	180cc <_printf_i+0x228>
   18054:	0022      	movs	r2, r4
   18056:	2301      	movs	r3, #1
   18058:	3219      	adds	r2, #25
   1805a:	9906      	ldr	r1, [sp, #24]
   1805c:	9805      	ldr	r0, [sp, #20]
   1805e:	9e07      	ldr	r6, [sp, #28]
   18060:	47b0      	blx	r6
   18062:	1c43      	adds	r3, r0, #1
   18064:	d030      	beq.n	180c8 <_printf_i+0x224>
   18066:	3501      	adds	r5, #1
   18068:	68e3      	ldr	r3, [r4, #12]
   1806a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1806c:	1a9b      	subs	r3, r3, r2
   1806e:	429d      	cmp	r5, r3
   18070:	dbf0      	blt.n	18054 <_printf_i+0x1b0>
   18072:	e7e9      	b.n	18048 <_printf_i+0x1a4>
   18074:	2d00      	cmp	r5, #0
   18076:	d0a9      	beq.n	17fcc <_printf_i+0x128>
   18078:	9e04      	ldr	r6, [sp, #16]
   1807a:	0028      	movs	r0, r5
   1807c:	0039      	movs	r1, r7
   1807e:	f7fe fb8d 	bl	1679c <__aeabi_uidivmod>
   18082:	9b03      	ldr	r3, [sp, #12]
   18084:	3e01      	subs	r6, #1
   18086:	5c5b      	ldrb	r3, [r3, r1]
   18088:	0028      	movs	r0, r5
   1808a:	7033      	strb	r3, [r6, #0]
   1808c:	0039      	movs	r1, r7
   1808e:	f7fe faff 	bl	16690 <__udivsi3>
   18092:	1e05      	subs	r5, r0, #0
   18094:	d1f1      	bne.n	1807a <_printf_i+0x1d6>
   18096:	2f08      	cmp	r7, #8
   18098:	d109      	bne.n	180ae <_printf_i+0x20a>
   1809a:	6823      	ldr	r3, [r4, #0]
   1809c:	07db      	lsls	r3, r3, #31
   1809e:	d506      	bpl.n	180ae <_printf_i+0x20a>
   180a0:	6863      	ldr	r3, [r4, #4]
   180a2:	6922      	ldr	r2, [r4, #16]
   180a4:	4293      	cmp	r3, r2
   180a6:	dc02      	bgt.n	180ae <_printf_i+0x20a>
   180a8:	2330      	movs	r3, #48	; 0x30
   180aa:	3e01      	subs	r6, #1
   180ac:	7033      	strb	r3, [r6, #0]
   180ae:	9b04      	ldr	r3, [sp, #16]
   180b0:	1b9b      	subs	r3, r3, r6
   180b2:	6123      	str	r3, [r4, #16]
   180b4:	9b07      	ldr	r3, [sp, #28]
   180b6:	aa09      	add	r2, sp, #36	; 0x24
   180b8:	9300      	str	r3, [sp, #0]
   180ba:	0021      	movs	r1, r4
   180bc:	9b06      	ldr	r3, [sp, #24]
   180be:	9805      	ldr	r0, [sp, #20]
   180c0:	f7ff fe82 	bl	17dc8 <_printf_common>
   180c4:	1c43      	adds	r3, r0, #1
   180c6:	d1b3      	bne.n	18030 <_printf_i+0x18c>
   180c8:	2001      	movs	r0, #1
   180ca:	4240      	negs	r0, r0
   180cc:	b00b      	add	sp, #44	; 0x2c
   180ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   180d0:	0001b714 	.word	0x0001b714
   180d4:	0001b703 	.word	0x0001b703

000180d8 <__svfiscanf_r>:
   180d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   180da:	4cbd      	ldr	r4, [pc, #756]	; (183d0 <__svfiscanf_r+0x2f8>)
   180dc:	2586      	movs	r5, #134	; 0x86
   180de:	44a5      	add	sp, r4
   180e0:	9303      	str	r3, [sp, #12]
   180e2:	2300      	movs	r3, #0
   180e4:	9348      	str	r3, [sp, #288]	; 0x120
   180e6:	9349      	str	r3, [sp, #292]	; 0x124
   180e8:	ab05      	add	r3, sp, #20
   180ea:	934a      	str	r3, [sp, #296]	; 0x128
   180ec:	23be      	movs	r3, #190	; 0xbe
   180ee:	006d      	lsls	r5, r5, #1
   180f0:	9000      	str	r0, [sp, #0]
   180f2:	000c      	movs	r4, r1
   180f4:	a802      	add	r0, sp, #8
   180f6:	49b7      	ldr	r1, [pc, #732]	; (183d4 <__svfiscanf_r+0x2fc>)
   180f8:	005b      	lsls	r3, r3, #1
   180fa:	1940      	adds	r0, r0, r5
   180fc:	27c0      	movs	r7, #192	; 0xc0
   180fe:	50c1      	str	r1, [r0, r3]
   18100:	ab02      	add	r3, sp, #8
   18102:	195b      	adds	r3, r3, r5
   18104:	0015      	movs	r5, r2
   18106:	49b4      	ldr	r1, [pc, #720]	; (183d8 <__svfiscanf_r+0x300>)
   18108:	007f      	lsls	r7, r7, #1
   1810a:	51d9      	str	r1, [r3, r7]
   1810c:	782b      	ldrb	r3, [r5, #0]
   1810e:	2b00      	cmp	r3, #0
   18110:	d100      	bne.n	18114 <__svfiscanf_r+0x3c>
   18112:	e15b      	b.n	183cc <__svfiscanf_r+0x2f4>
   18114:	f7ff fb20 	bl	17758 <__locale_ctype_ptr>
   18118:	2208      	movs	r2, #8
   1811a:	782b      	ldrb	r3, [r5, #0]
   1811c:	18c0      	adds	r0, r0, r3
   1811e:	9301      	str	r3, [sp, #4]
   18120:	7843      	ldrb	r3, [r0, #1]
   18122:	4013      	ands	r3, r2
   18124:	d141      	bne.n	181aa <__svfiscanf_r+0xd2>
   18126:	9a01      	ldr	r2, [sp, #4]
   18128:	1c6e      	adds	r6, r5, #1
   1812a:	2a25      	cmp	r2, #37	; 0x25
   1812c:	d000      	beq.n	18130 <__svfiscanf_r+0x58>
   1812e:	e0a8      	b.n	18282 <__svfiscanf_r+0x1aa>
   18130:	9347      	str	r3, [sp, #284]	; 0x11c
   18132:	9345      	str	r3, [sp, #276]	; 0x114
   18134:	786b      	ldrb	r3, [r5, #1]
   18136:	2b2a      	cmp	r3, #42	; 0x2a
   18138:	d102      	bne.n	18140 <__svfiscanf_r+0x68>
   1813a:	3b1a      	subs	r3, #26
   1813c:	9345      	str	r3, [sp, #276]	; 0x114
   1813e:	1cae      	adds	r6, r5, #2
   18140:	0035      	movs	r5, r6
   18142:	220a      	movs	r2, #10
   18144:	7829      	ldrb	r1, [r5, #0]
   18146:	000b      	movs	r3, r1
   18148:	3b30      	subs	r3, #48	; 0x30
   1814a:	2b09      	cmp	r3, #9
   1814c:	d948      	bls.n	181e0 <__svfiscanf_r+0x108>
   1814e:	4ea3      	ldr	r6, [pc, #652]	; (183dc <__svfiscanf_r+0x304>)
   18150:	2203      	movs	r2, #3
   18152:	0030      	movs	r0, r6
   18154:	f000 fde2 	bl	18d1c <memchr>
   18158:	2800      	cmp	r0, #0
   1815a:	d007      	beq.n	1816c <__svfiscanf_r+0x94>
   1815c:	2301      	movs	r3, #1
   1815e:	1b80      	subs	r0, r0, r6
   18160:	4083      	lsls	r3, r0
   18162:	9a45      	ldr	r2, [sp, #276]	; 0x114
   18164:	3501      	adds	r5, #1
   18166:	4313      	orrs	r3, r2
   18168:	9202      	str	r2, [sp, #8]
   1816a:	9345      	str	r3, [sp, #276]	; 0x114
   1816c:	782b      	ldrb	r3, [r5, #0]
   1816e:	1c6e      	adds	r6, r5, #1
   18170:	2b67      	cmp	r3, #103	; 0x67
   18172:	d858      	bhi.n	18226 <__svfiscanf_r+0x14e>
   18174:	2b65      	cmp	r3, #101	; 0x65
   18176:	d300      	bcc.n	1817a <__svfiscanf_r+0xa2>
   18178:	e0dd      	b.n	18336 <__svfiscanf_r+0x25e>
   1817a:	2b47      	cmp	r3, #71	; 0x47
   1817c:	d838      	bhi.n	181f0 <__svfiscanf_r+0x118>
   1817e:	2b45      	cmp	r3, #69	; 0x45
   18180:	d300      	bcc.n	18184 <__svfiscanf_r+0xac>
   18182:	e0d8      	b.n	18336 <__svfiscanf_r+0x25e>
   18184:	2b00      	cmp	r3, #0
   18186:	d100      	bne.n	1818a <__svfiscanf_r+0xb2>
   18188:	e11d      	b.n	183c6 <__svfiscanf_r+0x2ee>
   1818a:	2b25      	cmp	r3, #37	; 0x25
   1818c:	d079      	beq.n	18282 <__svfiscanf_r+0x1aa>
   1818e:	2303      	movs	r3, #3
   18190:	934b      	str	r3, [sp, #300]	; 0x12c
   18192:	3307      	adds	r3, #7
   18194:	9346      	str	r3, [sp, #280]	; 0x118
   18196:	e053      	b.n	18240 <__svfiscanf_r+0x168>
   18198:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1819a:	3301      	adds	r3, #1
   1819c:	9201      	str	r2, [sp, #4]
   1819e:	3201      	adds	r2, #1
   181a0:	9249      	str	r2, [sp, #292]	; 0x124
   181a2:	6862      	ldr	r2, [r4, #4]
   181a4:	6023      	str	r3, [r4, #0]
   181a6:	3a01      	subs	r2, #1
   181a8:	6062      	str	r2, [r4, #4]
   181aa:	6863      	ldr	r3, [r4, #4]
   181ac:	2b00      	cmp	r3, #0
   181ae:	dd0b      	ble.n	181c8 <__svfiscanf_r+0xf0>
   181b0:	f7ff fad2 	bl	17758 <__locale_ctype_ptr>
   181b4:	2108      	movs	r1, #8
   181b6:	6823      	ldr	r3, [r4, #0]
   181b8:	781a      	ldrb	r2, [r3, #0]
   181ba:	1880      	adds	r0, r0, r2
   181bc:	7842      	ldrb	r2, [r0, #1]
   181be:	420a      	tst	r2, r1
   181c0:	d1ea      	bne.n	18198 <__svfiscanf_r+0xc0>
   181c2:	1c6e      	adds	r6, r5, #1
   181c4:	0035      	movs	r5, r6
   181c6:	e7a1      	b.n	1810c <__svfiscanf_r+0x34>
   181c8:	2286      	movs	r2, #134	; 0x86
   181ca:	ab02      	add	r3, sp, #8
   181cc:	0052      	lsls	r2, r2, #1
   181ce:	189b      	adds	r3, r3, r2
   181d0:	59db      	ldr	r3, [r3, r7]
   181d2:	0021      	movs	r1, r4
   181d4:	9800      	ldr	r0, [sp, #0]
   181d6:	9301      	str	r3, [sp, #4]
   181d8:	4798      	blx	r3
   181da:	2800      	cmp	r0, #0
   181dc:	d0e8      	beq.n	181b0 <__svfiscanf_r+0xd8>
   181de:	e7f0      	b.n	181c2 <__svfiscanf_r+0xea>
   181e0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   181e2:	3501      	adds	r5, #1
   181e4:	9302      	str	r3, [sp, #8]
   181e6:	4353      	muls	r3, r2
   181e8:	3b30      	subs	r3, #48	; 0x30
   181ea:	1859      	adds	r1, r3, r1
   181ec:	9147      	str	r1, [sp, #284]	; 0x11c
   181ee:	e7a9      	b.n	18144 <__svfiscanf_r+0x6c>
   181f0:	2b5b      	cmp	r3, #91	; 0x5b
   181f2:	d100      	bne.n	181f6 <__svfiscanf_r+0x11e>
   181f4:	e077      	b.n	182e6 <__svfiscanf_r+0x20e>
   181f6:	d80f      	bhi.n	18218 <__svfiscanf_r+0x140>
   181f8:	2b58      	cmp	r3, #88	; 0x58
   181fa:	d1c8      	bne.n	1818e <__svfiscanf_r+0xb6>
   181fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
   181fe:	9201      	str	r2, [sp, #4]
   18200:	2280      	movs	r2, #128	; 0x80
   18202:	9901      	ldr	r1, [sp, #4]
   18204:	0092      	lsls	r2, r2, #2
   18206:	430a      	orrs	r2, r1
   18208:	9245      	str	r2, [sp, #276]	; 0x114
   1820a:	2210      	movs	r2, #16
   1820c:	9246      	str	r2, [sp, #280]	; 0x118
   1820e:	2203      	movs	r2, #3
   18210:	2b6e      	cmp	r3, #110	; 0x6e
   18212:	dd14      	ble.n	1823e <__svfiscanf_r+0x166>
   18214:	3201      	adds	r2, #1
   18216:	e012      	b.n	1823e <__svfiscanf_r+0x166>
   18218:	2b63      	cmp	r3, #99	; 0x63
   1821a:	d100      	bne.n	1821e <__svfiscanf_r+0x146>
   1821c:	e071      	b.n	18302 <__svfiscanf_r+0x22a>
   1821e:	2b64      	cmp	r3, #100	; 0x64
   18220:	d1b5      	bne.n	1818e <__svfiscanf_r+0xb6>
   18222:	220a      	movs	r2, #10
   18224:	e7f2      	b.n	1820c <__svfiscanf_r+0x134>
   18226:	2b70      	cmp	r3, #112	; 0x70
   18228:	d052      	beq.n	182d0 <__svfiscanf_r+0x1f8>
   1822a:	d822      	bhi.n	18272 <__svfiscanf_r+0x19a>
   1822c:	2b6e      	cmp	r3, #110	; 0x6e
   1822e:	d100      	bne.n	18232 <__svfiscanf_r+0x15a>
   18230:	e06f      	b.n	18312 <__svfiscanf_r+0x23a>
   18232:	d854      	bhi.n	182de <__svfiscanf_r+0x206>
   18234:	2b69      	cmp	r3, #105	; 0x69
   18236:	d1aa      	bne.n	1818e <__svfiscanf_r+0xb6>
   18238:	2300      	movs	r3, #0
   1823a:	2203      	movs	r2, #3
   1823c:	9346      	str	r3, [sp, #280]	; 0x118
   1823e:	924b      	str	r2, [sp, #300]	; 0x12c
   18240:	6863      	ldr	r3, [r4, #4]
   18242:	2b00      	cmp	r3, #0
   18244:	dc00      	bgt.n	18248 <__svfiscanf_r+0x170>
   18246:	e078      	b.n	1833a <__svfiscanf_r+0x262>
   18248:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1824a:	9301      	str	r3, [sp, #4]
   1824c:	065b      	lsls	r3, r3, #25
   1824e:	d400      	bmi.n	18252 <__svfiscanf_r+0x17a>
   18250:	e08b      	b.n	1836a <__svfiscanf_r+0x292>
   18252:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   18254:	2b02      	cmp	r3, #2
   18256:	dd00      	ble.n	1825a <__svfiscanf_r+0x182>
   18258:	e09d      	b.n	18396 <__svfiscanf_r+0x2be>
   1825a:	ab03      	add	r3, sp, #12
   1825c:	0022      	movs	r2, r4
   1825e:	a945      	add	r1, sp, #276	; 0x114
   18260:	9800      	ldr	r0, [sp, #0]
   18262:	f000 f8e7 	bl	18434 <_scanf_chars>
   18266:	2801      	cmp	r0, #1
   18268:	d100      	bne.n	1826c <__svfiscanf_r+0x194>
   1826a:	e0af      	b.n	183cc <__svfiscanf_r+0x2f4>
   1826c:	2802      	cmp	r0, #2
   1826e:	d1a9      	bne.n	181c4 <__svfiscanf_r+0xec>
   18270:	e025      	b.n	182be <__svfiscanf_r+0x1e6>
   18272:	2b75      	cmp	r3, #117	; 0x75
   18274:	d0d5      	beq.n	18222 <__svfiscanf_r+0x14a>
   18276:	2b78      	cmp	r3, #120	; 0x78
   18278:	d0c0      	beq.n	181fc <__svfiscanf_r+0x124>
   1827a:	2b73      	cmp	r3, #115	; 0x73
   1827c:	d187      	bne.n	1818e <__svfiscanf_r+0xb6>
   1827e:	2302      	movs	r3, #2
   18280:	e03d      	b.n	182fe <__svfiscanf_r+0x226>
   18282:	6863      	ldr	r3, [r4, #4]
   18284:	2b00      	cmp	r3, #0
   18286:	dd0f      	ble.n	182a8 <__svfiscanf_r+0x1d0>
   18288:	6823      	ldr	r3, [r4, #0]
   1828a:	9901      	ldr	r1, [sp, #4]
   1828c:	781a      	ldrb	r2, [r3, #0]
   1828e:	4291      	cmp	r1, r2
   18290:	d000      	beq.n	18294 <__svfiscanf_r+0x1bc>
   18292:	e09b      	b.n	183cc <__svfiscanf_r+0x2f4>
   18294:	3301      	adds	r3, #1
   18296:	6862      	ldr	r2, [r4, #4]
   18298:	6023      	str	r3, [r4, #0]
   1829a:	9b49      	ldr	r3, [sp, #292]	; 0x124
   1829c:	3a01      	subs	r2, #1
   1829e:	9301      	str	r3, [sp, #4]
   182a0:	3301      	adds	r3, #1
   182a2:	6062      	str	r2, [r4, #4]
   182a4:	9349      	str	r3, [sp, #292]	; 0x124
   182a6:	e78d      	b.n	181c4 <__svfiscanf_r+0xec>
   182a8:	2286      	movs	r2, #134	; 0x86
   182aa:	ab02      	add	r3, sp, #8
   182ac:	0052      	lsls	r2, r2, #1
   182ae:	189b      	adds	r3, r3, r2
   182b0:	59db      	ldr	r3, [r3, r7]
   182b2:	0021      	movs	r1, r4
   182b4:	9800      	ldr	r0, [sp, #0]
   182b6:	9302      	str	r3, [sp, #8]
   182b8:	4798      	blx	r3
   182ba:	2800      	cmp	r0, #0
   182bc:	d0e4      	beq.n	18288 <__svfiscanf_r+0x1b0>
   182be:	9848      	ldr	r0, [sp, #288]	; 0x120
   182c0:	2800      	cmp	r0, #0
   182c2:	d000      	beq.n	182c6 <__svfiscanf_r+0x1ee>
   182c4:	e07b      	b.n	183be <__svfiscanf_r+0x2e6>
   182c6:	3801      	subs	r0, #1
   182c8:	23a7      	movs	r3, #167	; 0xa7
   182ca:	009b      	lsls	r3, r3, #2
   182cc:	449d      	add	sp, r3
   182ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   182d0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   182d2:	9201      	str	r2, [sp, #4]
   182d4:	2220      	movs	r2, #32
   182d6:	9901      	ldr	r1, [sp, #4]
   182d8:	430a      	orrs	r2, r1
   182da:	9245      	str	r2, [sp, #276]	; 0x114
   182dc:	e78e      	b.n	181fc <__svfiscanf_r+0x124>
   182de:	2308      	movs	r3, #8
   182e0:	2204      	movs	r2, #4
   182e2:	9346      	str	r3, [sp, #280]	; 0x118
   182e4:	e7ab      	b.n	1823e <__svfiscanf_r+0x166>
   182e6:	0031      	movs	r1, r6
   182e8:	a805      	add	r0, sp, #20
   182ea:	f000 fad9 	bl	188a0 <__sccl>
   182ee:	9b45      	ldr	r3, [sp, #276]	; 0x114
   182f0:	0006      	movs	r6, r0
   182f2:	9301      	str	r3, [sp, #4]
   182f4:	2340      	movs	r3, #64	; 0x40
   182f6:	9a01      	ldr	r2, [sp, #4]
   182f8:	4313      	orrs	r3, r2
   182fa:	9345      	str	r3, [sp, #276]	; 0x114
   182fc:	2301      	movs	r3, #1
   182fe:	934b      	str	r3, [sp, #300]	; 0x12c
   18300:	e79e      	b.n	18240 <__svfiscanf_r+0x168>
   18302:	9b45      	ldr	r3, [sp, #276]	; 0x114
   18304:	9301      	str	r3, [sp, #4]
   18306:	2340      	movs	r3, #64	; 0x40
   18308:	9a01      	ldr	r2, [sp, #4]
   1830a:	4313      	orrs	r3, r2
   1830c:	9345      	str	r3, [sp, #276]	; 0x114
   1830e:	2300      	movs	r3, #0
   18310:	e7f5      	b.n	182fe <__svfiscanf_r+0x226>
   18312:	9945      	ldr	r1, [sp, #276]	; 0x114
   18314:	06cb      	lsls	r3, r1, #27
   18316:	d500      	bpl.n	1831a <__svfiscanf_r+0x242>
   18318:	e754      	b.n	181c4 <__svfiscanf_r+0xec>
   1831a:	9b03      	ldr	r3, [sp, #12]
   1831c:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1831e:	07c8      	lsls	r0, r1, #31
   18320:	d504      	bpl.n	1832c <__svfiscanf_r+0x254>
   18322:	1d19      	adds	r1, r3, #4
   18324:	9103      	str	r1, [sp, #12]
   18326:	681b      	ldr	r3, [r3, #0]
   18328:	801a      	strh	r2, [r3, #0]
   1832a:	e74b      	b.n	181c4 <__svfiscanf_r+0xec>
   1832c:	1d19      	adds	r1, r3, #4
   1832e:	9103      	str	r1, [sp, #12]
   18330:	681b      	ldr	r3, [r3, #0]
   18332:	601a      	str	r2, [r3, #0]
   18334:	e746      	b.n	181c4 <__svfiscanf_r+0xec>
   18336:	2305      	movs	r3, #5
   18338:	e7e1      	b.n	182fe <__svfiscanf_r+0x226>
   1833a:	2286      	movs	r2, #134	; 0x86
   1833c:	ab02      	add	r3, sp, #8
   1833e:	0052      	lsls	r2, r2, #1
   18340:	189b      	adds	r3, r3, r2
   18342:	59db      	ldr	r3, [r3, r7]
   18344:	0021      	movs	r1, r4
   18346:	9800      	ldr	r0, [sp, #0]
   18348:	9301      	str	r3, [sp, #4]
   1834a:	4798      	blx	r3
   1834c:	2800      	cmp	r0, #0
   1834e:	d100      	bne.n	18352 <__svfiscanf_r+0x27a>
   18350:	e77a      	b.n	18248 <__svfiscanf_r+0x170>
   18352:	e7b4      	b.n	182be <__svfiscanf_r+0x1e6>
   18354:	9a49      	ldr	r2, [sp, #292]	; 0x124
   18356:	9201      	str	r2, [sp, #4]
   18358:	3201      	adds	r2, #1
   1835a:	9249      	str	r2, [sp, #292]	; 0x124
   1835c:	6862      	ldr	r2, [r4, #4]
   1835e:	3a01      	subs	r2, #1
   18360:	6062      	str	r2, [r4, #4]
   18362:	2a00      	cmp	r2, #0
   18364:	dd0b      	ble.n	1837e <__svfiscanf_r+0x2a6>
   18366:	3301      	adds	r3, #1
   18368:	6023      	str	r3, [r4, #0]
   1836a:	f7ff f9f5 	bl	17758 <__locale_ctype_ptr>
   1836e:	2108      	movs	r1, #8
   18370:	6823      	ldr	r3, [r4, #0]
   18372:	781a      	ldrb	r2, [r3, #0]
   18374:	1880      	adds	r0, r0, r2
   18376:	7842      	ldrb	r2, [r0, #1]
   18378:	420a      	tst	r2, r1
   1837a:	d1eb      	bne.n	18354 <__svfiscanf_r+0x27c>
   1837c:	e769      	b.n	18252 <__svfiscanf_r+0x17a>
   1837e:	2286      	movs	r2, #134	; 0x86
   18380:	ab02      	add	r3, sp, #8
   18382:	0052      	lsls	r2, r2, #1
   18384:	189b      	adds	r3, r3, r2
   18386:	59db      	ldr	r3, [r3, r7]
   18388:	0021      	movs	r1, r4
   1838a:	9800      	ldr	r0, [sp, #0]
   1838c:	9301      	str	r3, [sp, #4]
   1838e:	4798      	blx	r3
   18390:	2800      	cmp	r0, #0
   18392:	d0ea      	beq.n	1836a <__svfiscanf_r+0x292>
   18394:	e793      	b.n	182be <__svfiscanf_r+0x1e6>
   18396:	2b04      	cmp	r3, #4
   18398:	dc06      	bgt.n	183a8 <__svfiscanf_r+0x2d0>
   1839a:	ab03      	add	r3, sp, #12
   1839c:	0022      	movs	r2, r4
   1839e:	a945      	add	r1, sp, #276	; 0x114
   183a0:	9800      	ldr	r0, [sp, #0]
   183a2:	f000 f8ab 	bl	184fc <_scanf_i>
   183a6:	e75e      	b.n	18266 <__svfiscanf_r+0x18e>
   183a8:	4b0d      	ldr	r3, [pc, #52]	; (183e0 <__svfiscanf_r+0x308>)
   183aa:	2b00      	cmp	r3, #0
   183ac:	d100      	bne.n	183b0 <__svfiscanf_r+0x2d8>
   183ae:	e709      	b.n	181c4 <__svfiscanf_r+0xec>
   183b0:	ab03      	add	r3, sp, #12
   183b2:	0022      	movs	r2, r4
   183b4:	a945      	add	r1, sp, #276	; 0x114
   183b6:	9800      	ldr	r0, [sp, #0]
   183b8:	e000      	b.n	183bc <__svfiscanf_r+0x2e4>
   183ba:	bf00      	nop
   183bc:	e753      	b.n	18266 <__svfiscanf_r+0x18e>
   183be:	89a3      	ldrh	r3, [r4, #12]
   183c0:	065b      	lsls	r3, r3, #25
   183c2:	d400      	bmi.n	183c6 <__svfiscanf_r+0x2ee>
   183c4:	e780      	b.n	182c8 <__svfiscanf_r+0x1f0>
   183c6:	2001      	movs	r0, #1
   183c8:	4240      	negs	r0, r0
   183ca:	e77d      	b.n	182c8 <__svfiscanf_r+0x1f0>
   183cc:	9848      	ldr	r0, [sp, #288]	; 0x120
   183ce:	e77b      	b.n	182c8 <__svfiscanf_r+0x1f0>
   183d0:	fffffd64 	.word	0xfffffd64
   183d4:	00018b65 	.word	0x00018b65
   183d8:	00018781 	.word	0x00018781
   183dc:	0001b6f8 	.word	0x0001b6f8
   183e0:	00000000 	.word	0x00000000

000183e4 <_vfiscanf_r>:
   183e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   183e6:	0004      	movs	r4, r0
   183e8:	000d      	movs	r5, r1
   183ea:	0016      	movs	r6, r2
   183ec:	001f      	movs	r7, r3
   183ee:	2800      	cmp	r0, #0
   183f0:	d004      	beq.n	183fc <_vfiscanf_r+0x18>
   183f2:	6983      	ldr	r3, [r0, #24]
   183f4:	2b00      	cmp	r3, #0
   183f6:	d101      	bne.n	183fc <_vfiscanf_r+0x18>
   183f8:	f7ff f8fa 	bl	175f0 <__sinit>
   183fc:	4b0a      	ldr	r3, [pc, #40]	; (18428 <_vfiscanf_r+0x44>)
   183fe:	429d      	cmp	r5, r3
   18400:	d107      	bne.n	18412 <_vfiscanf_r+0x2e>
   18402:	6865      	ldr	r5, [r4, #4]
   18404:	003b      	movs	r3, r7
   18406:	0032      	movs	r2, r6
   18408:	0029      	movs	r1, r5
   1840a:	0020      	movs	r0, r4
   1840c:	f7ff fe64 	bl	180d8 <__svfiscanf_r>
   18410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18412:	4b06      	ldr	r3, [pc, #24]	; (1842c <_vfiscanf_r+0x48>)
   18414:	429d      	cmp	r5, r3
   18416:	d101      	bne.n	1841c <_vfiscanf_r+0x38>
   18418:	68a5      	ldr	r5, [r4, #8]
   1841a:	e7f3      	b.n	18404 <_vfiscanf_r+0x20>
   1841c:	4b04      	ldr	r3, [pc, #16]	; (18430 <_vfiscanf_r+0x4c>)
   1841e:	429d      	cmp	r5, r3
   18420:	d1f0      	bne.n	18404 <_vfiscanf_r+0x20>
   18422:	68e5      	ldr	r5, [r4, #12]
   18424:	e7ee      	b.n	18404 <_vfiscanf_r+0x20>
   18426:	46c0      	nop			; (mov r8, r8)
   18428:	0001b6a8 	.word	0x0001b6a8
   1842c:	0001b6c8 	.word	0x0001b6c8
   18430:	0001b688 	.word	0x0001b688

00018434 <_scanf_chars>:
   18434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18436:	0015      	movs	r5, r2
   18438:	688a      	ldr	r2, [r1, #8]
   1843a:	9001      	str	r0, [sp, #4]
   1843c:	000c      	movs	r4, r1
   1843e:	2a00      	cmp	r2, #0
   18440:	d106      	bne.n	18450 <_scanf_chars+0x1c>
   18442:	698a      	ldr	r2, [r1, #24]
   18444:	1e51      	subs	r1, r2, #1
   18446:	418a      	sbcs	r2, r1
   18448:	2101      	movs	r1, #1
   1844a:	4252      	negs	r2, r2
   1844c:	430a      	orrs	r2, r1
   1844e:	60a2      	str	r2, [r4, #8]
   18450:	6822      	ldr	r2, [r4, #0]
   18452:	06d2      	lsls	r2, r2, #27
   18454:	d403      	bmi.n	1845e <_scanf_chars+0x2a>
   18456:	681a      	ldr	r2, [r3, #0]
   18458:	1d11      	adds	r1, r2, #4
   1845a:	6019      	str	r1, [r3, #0]
   1845c:	6817      	ldr	r7, [r2, #0]
   1845e:	2600      	movs	r6, #0
   18460:	69a3      	ldr	r3, [r4, #24]
   18462:	2b00      	cmp	r3, #0
   18464:	d01c      	beq.n	184a0 <_scanf_chars+0x6c>
   18466:	2b01      	cmp	r3, #1
   18468:	d108      	bne.n	1847c <_scanf_chars+0x48>
   1846a:	682b      	ldr	r3, [r5, #0]
   1846c:	6962      	ldr	r2, [r4, #20]
   1846e:	781b      	ldrb	r3, [r3, #0]
   18470:	5cd3      	ldrb	r3, [r2, r3]
   18472:	2b00      	cmp	r3, #0
   18474:	d114      	bne.n	184a0 <_scanf_chars+0x6c>
   18476:	2e00      	cmp	r6, #0
   18478:	d130      	bne.n	184dc <_scanf_chars+0xa8>
   1847a:	e006      	b.n	1848a <_scanf_chars+0x56>
   1847c:	2b02      	cmp	r3, #2
   1847e:	d006      	beq.n	1848e <_scanf_chars+0x5a>
   18480:	2e00      	cmp	r6, #0
   18482:	d12b      	bne.n	184dc <_scanf_chars+0xa8>
   18484:	69a3      	ldr	r3, [r4, #24]
   18486:	2b01      	cmp	r3, #1
   18488:	d128      	bne.n	184dc <_scanf_chars+0xa8>
   1848a:	2001      	movs	r0, #1
   1848c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1848e:	f7ff f963 	bl	17758 <__locale_ctype_ptr>
   18492:	2208      	movs	r2, #8
   18494:	682b      	ldr	r3, [r5, #0]
   18496:	781b      	ldrb	r3, [r3, #0]
   18498:	18c0      	adds	r0, r0, r3
   1849a:	7843      	ldrb	r3, [r0, #1]
   1849c:	4213      	tst	r3, r2
   1849e:	d1ef      	bne.n	18480 <_scanf_chars+0x4c>
   184a0:	2210      	movs	r2, #16
   184a2:	6823      	ldr	r3, [r4, #0]
   184a4:	3601      	adds	r6, #1
   184a6:	4213      	tst	r3, r2
   184a8:	d103      	bne.n	184b2 <_scanf_chars+0x7e>
   184aa:	682b      	ldr	r3, [r5, #0]
   184ac:	781b      	ldrb	r3, [r3, #0]
   184ae:	703b      	strb	r3, [r7, #0]
   184b0:	3701      	adds	r7, #1
   184b2:	682a      	ldr	r2, [r5, #0]
   184b4:	686b      	ldr	r3, [r5, #4]
   184b6:	3201      	adds	r2, #1
   184b8:	602a      	str	r2, [r5, #0]
   184ba:	68a2      	ldr	r2, [r4, #8]
   184bc:	3b01      	subs	r3, #1
   184be:	3a01      	subs	r2, #1
   184c0:	606b      	str	r3, [r5, #4]
   184c2:	60a2      	str	r2, [r4, #8]
   184c4:	2a00      	cmp	r2, #0
   184c6:	d009      	beq.n	184dc <_scanf_chars+0xa8>
   184c8:	2b00      	cmp	r3, #0
   184ca:	dcc9      	bgt.n	18460 <_scanf_chars+0x2c>
   184cc:	23c0      	movs	r3, #192	; 0xc0
   184ce:	005b      	lsls	r3, r3, #1
   184d0:	58e3      	ldr	r3, [r4, r3]
   184d2:	0029      	movs	r1, r5
   184d4:	9801      	ldr	r0, [sp, #4]
   184d6:	4798      	blx	r3
   184d8:	2800      	cmp	r0, #0
   184da:	d0c1      	beq.n	18460 <_scanf_chars+0x2c>
   184dc:	2310      	movs	r3, #16
   184de:	6822      	ldr	r2, [r4, #0]
   184e0:	4013      	ands	r3, r2
   184e2:	d106      	bne.n	184f2 <_scanf_chars+0xbe>
   184e4:	68e2      	ldr	r2, [r4, #12]
   184e6:	3201      	adds	r2, #1
   184e8:	60e2      	str	r2, [r4, #12]
   184ea:	69a2      	ldr	r2, [r4, #24]
   184ec:	2a00      	cmp	r2, #0
   184ee:	d000      	beq.n	184f2 <_scanf_chars+0xbe>
   184f0:	703b      	strb	r3, [r7, #0]
   184f2:	6923      	ldr	r3, [r4, #16]
   184f4:	2000      	movs	r0, #0
   184f6:	199e      	adds	r6, r3, r6
   184f8:	6126      	str	r6, [r4, #16]
   184fa:	e7c7      	b.n	1848c <_scanf_chars+0x58>

000184fc <_scanf_i>:
   184fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   184fe:	000c      	movs	r4, r1
   18500:	b08d      	sub	sp, #52	; 0x34
   18502:	9302      	str	r3, [sp, #8]
   18504:	4b77      	ldr	r3, [pc, #476]	; (186e4 <_scanf_i+0x1e8>)
   18506:	9005      	str	r0, [sp, #20]
   18508:	0016      	movs	r6, r2
   1850a:	aa09      	add	r2, sp, #36	; 0x24
   1850c:	cb23      	ldmia	r3!, {r0, r1, r5}
   1850e:	c223      	stmia	r2!, {r0, r1, r5}
   18510:	4b75      	ldr	r3, [pc, #468]	; (186e8 <_scanf_i+0x1ec>)
   18512:	9306      	str	r3, [sp, #24]
   18514:	69a3      	ldr	r3, [r4, #24]
   18516:	2b03      	cmp	r3, #3
   18518:	d001      	beq.n	1851e <_scanf_i+0x22>
   1851a:	4b74      	ldr	r3, [pc, #464]	; (186ec <_scanf_i+0x1f0>)
   1851c:	9306      	str	r3, [sp, #24]
   1851e:	22ae      	movs	r2, #174	; 0xae
   18520:	2000      	movs	r0, #0
   18522:	68a3      	ldr	r3, [r4, #8]
   18524:	0052      	lsls	r2, r2, #1
   18526:	1e59      	subs	r1, r3, #1
   18528:	9004      	str	r0, [sp, #16]
   1852a:	4291      	cmp	r1, r2
   1852c:	d905      	bls.n	1853a <_scanf_i+0x3e>
   1852e:	3b5e      	subs	r3, #94	; 0x5e
   18530:	3bff      	subs	r3, #255	; 0xff
   18532:	9304      	str	r3, [sp, #16]
   18534:	235e      	movs	r3, #94	; 0x5e
   18536:	33ff      	adds	r3, #255	; 0xff
   18538:	60a3      	str	r3, [r4, #8]
   1853a:	0023      	movs	r3, r4
   1853c:	331c      	adds	r3, #28
   1853e:	9301      	str	r3, [sp, #4]
   18540:	23d0      	movs	r3, #208	; 0xd0
   18542:	2700      	movs	r7, #0
   18544:	6822      	ldr	r2, [r4, #0]
   18546:	011b      	lsls	r3, r3, #4
   18548:	4313      	orrs	r3, r2
   1854a:	6023      	str	r3, [r4, #0]
   1854c:	9b01      	ldr	r3, [sp, #4]
   1854e:	9303      	str	r3, [sp, #12]
   18550:	6833      	ldr	r3, [r6, #0]
   18552:	a809      	add	r0, sp, #36	; 0x24
   18554:	7819      	ldrb	r1, [r3, #0]
   18556:	00bb      	lsls	r3, r7, #2
   18558:	2202      	movs	r2, #2
   1855a:	5818      	ldr	r0, [r3, r0]
   1855c:	f000 fbde 	bl	18d1c <memchr>
   18560:	2800      	cmp	r0, #0
   18562:	d02b      	beq.n	185bc <_scanf_i+0xc0>
   18564:	2f01      	cmp	r7, #1
   18566:	d15f      	bne.n	18628 <_scanf_i+0x12c>
   18568:	6863      	ldr	r3, [r4, #4]
   1856a:	2b00      	cmp	r3, #0
   1856c:	d106      	bne.n	1857c <_scanf_i+0x80>
   1856e:	3308      	adds	r3, #8
   18570:	6822      	ldr	r2, [r4, #0]
   18572:	6063      	str	r3, [r4, #4]
   18574:	33f9      	adds	r3, #249	; 0xf9
   18576:	33ff      	adds	r3, #255	; 0xff
   18578:	4313      	orrs	r3, r2
   1857a:	6023      	str	r3, [r4, #0]
   1857c:	4b5c      	ldr	r3, [pc, #368]	; (186f0 <_scanf_i+0x1f4>)
   1857e:	6822      	ldr	r2, [r4, #0]
   18580:	4013      	ands	r3, r2
   18582:	6023      	str	r3, [r4, #0]
   18584:	68a3      	ldr	r3, [r4, #8]
   18586:	1e5a      	subs	r2, r3, #1
   18588:	60a2      	str	r2, [r4, #8]
   1858a:	2b00      	cmp	r3, #0
   1858c:	d016      	beq.n	185bc <_scanf_i+0xc0>
   1858e:	9b03      	ldr	r3, [sp, #12]
   18590:	1c5d      	adds	r5, r3, #1
   18592:	6833      	ldr	r3, [r6, #0]
   18594:	1c5a      	adds	r2, r3, #1
   18596:	6032      	str	r2, [r6, #0]
   18598:	781b      	ldrb	r3, [r3, #0]
   1859a:	9a03      	ldr	r2, [sp, #12]
   1859c:	9503      	str	r5, [sp, #12]
   1859e:	7013      	strb	r3, [r2, #0]
   185a0:	6873      	ldr	r3, [r6, #4]
   185a2:	3b01      	subs	r3, #1
   185a4:	6073      	str	r3, [r6, #4]
   185a6:	2b00      	cmp	r3, #0
   185a8:	dc08      	bgt.n	185bc <_scanf_i+0xc0>
   185aa:	23c0      	movs	r3, #192	; 0xc0
   185ac:	005b      	lsls	r3, r3, #1
   185ae:	58e3      	ldr	r3, [r4, r3]
   185b0:	0031      	movs	r1, r6
   185b2:	9805      	ldr	r0, [sp, #20]
   185b4:	9307      	str	r3, [sp, #28]
   185b6:	4798      	blx	r3
   185b8:	2800      	cmp	r0, #0
   185ba:	d17d      	bne.n	186b8 <_scanf_i+0x1bc>
   185bc:	3701      	adds	r7, #1
   185be:	2f03      	cmp	r7, #3
   185c0:	d1c6      	bne.n	18550 <_scanf_i+0x54>
   185c2:	6863      	ldr	r3, [r4, #4]
   185c4:	2b00      	cmp	r3, #0
   185c6:	d101      	bne.n	185cc <_scanf_i+0xd0>
   185c8:	330a      	adds	r3, #10
   185ca:	6063      	str	r3, [r4, #4]
   185cc:	2110      	movs	r1, #16
   185ce:	2700      	movs	r7, #0
   185d0:	6863      	ldr	r3, [r4, #4]
   185d2:	6960      	ldr	r0, [r4, #20]
   185d4:	1ac9      	subs	r1, r1, r3
   185d6:	4b47      	ldr	r3, [pc, #284]	; (186f4 <_scanf_i+0x1f8>)
   185d8:	18c9      	adds	r1, r1, r3
   185da:	f000 f961 	bl	188a0 <__sccl>
   185de:	9d03      	ldr	r5, [sp, #12]
   185e0:	68a3      	ldr	r3, [r4, #8]
   185e2:	2b00      	cmp	r3, #0
   185e4:	d041      	beq.n	1866a <_scanf_i+0x16e>
   185e6:	6832      	ldr	r2, [r6, #0]
   185e8:	6960      	ldr	r0, [r4, #20]
   185ea:	7811      	ldrb	r1, [r2, #0]
   185ec:	5c40      	ldrb	r0, [r0, r1]
   185ee:	2800      	cmp	r0, #0
   185f0:	d03b      	beq.n	1866a <_scanf_i+0x16e>
   185f2:	2930      	cmp	r1, #48	; 0x30
   185f4:	d128      	bne.n	18648 <_scanf_i+0x14c>
   185f6:	2080      	movs	r0, #128	; 0x80
   185f8:	6821      	ldr	r1, [r4, #0]
   185fa:	0100      	lsls	r0, r0, #4
   185fc:	4201      	tst	r1, r0
   185fe:	d023      	beq.n	18648 <_scanf_i+0x14c>
   18600:	9a04      	ldr	r2, [sp, #16]
   18602:	3701      	adds	r7, #1
   18604:	2a00      	cmp	r2, #0
   18606:	d003      	beq.n	18610 <_scanf_i+0x114>
   18608:	3a01      	subs	r2, #1
   1860a:	3301      	adds	r3, #1
   1860c:	9204      	str	r2, [sp, #16]
   1860e:	60a3      	str	r3, [r4, #8]
   18610:	6873      	ldr	r3, [r6, #4]
   18612:	3b01      	subs	r3, #1
   18614:	6073      	str	r3, [r6, #4]
   18616:	2b00      	cmp	r3, #0
   18618:	dd1e      	ble.n	18658 <_scanf_i+0x15c>
   1861a:	6833      	ldr	r3, [r6, #0]
   1861c:	3301      	adds	r3, #1
   1861e:	6033      	str	r3, [r6, #0]
   18620:	68a3      	ldr	r3, [r4, #8]
   18622:	3b01      	subs	r3, #1
   18624:	60a3      	str	r3, [r4, #8]
   18626:	e7db      	b.n	185e0 <_scanf_i+0xe4>
   18628:	2f02      	cmp	r7, #2
   1862a:	d1ab      	bne.n	18584 <_scanf_i+0x88>
   1862c:	21c0      	movs	r1, #192	; 0xc0
   1862e:	2380      	movs	r3, #128	; 0x80
   18630:	6822      	ldr	r2, [r4, #0]
   18632:	00c9      	lsls	r1, r1, #3
   18634:	4011      	ands	r1, r2
   18636:	009b      	lsls	r3, r3, #2
   18638:	4299      	cmp	r1, r3
   1863a:	d1c2      	bne.n	185c2 <_scanf_i+0xc6>
   1863c:	3bf1      	subs	r3, #241	; 0xf1
   1863e:	3bff      	subs	r3, #255	; 0xff
   18640:	6063      	str	r3, [r4, #4]
   18642:	33f0      	adds	r3, #240	; 0xf0
   18644:	4313      	orrs	r3, r2
   18646:	e79c      	b.n	18582 <_scanf_i+0x86>
   18648:	6821      	ldr	r1, [r4, #0]
   1864a:	4b2b      	ldr	r3, [pc, #172]	; (186f8 <_scanf_i+0x1fc>)
   1864c:	400b      	ands	r3, r1
   1864e:	6023      	str	r3, [r4, #0]
   18650:	7813      	ldrb	r3, [r2, #0]
   18652:	702b      	strb	r3, [r5, #0]
   18654:	3501      	adds	r5, #1
   18656:	e7db      	b.n	18610 <_scanf_i+0x114>
   18658:	23c0      	movs	r3, #192	; 0xc0
   1865a:	005b      	lsls	r3, r3, #1
   1865c:	58e3      	ldr	r3, [r4, r3]
   1865e:	0031      	movs	r1, r6
   18660:	9805      	ldr	r0, [sp, #20]
   18662:	9303      	str	r3, [sp, #12]
   18664:	4798      	blx	r3
   18666:	2800      	cmp	r0, #0
   18668:	d0da      	beq.n	18620 <_scanf_i+0x124>
   1866a:	6823      	ldr	r3, [r4, #0]
   1866c:	05db      	lsls	r3, r3, #23
   1866e:	d50e      	bpl.n	1868e <_scanf_i+0x192>
   18670:	9b01      	ldr	r3, [sp, #4]
   18672:	429d      	cmp	r5, r3
   18674:	d907      	bls.n	18686 <_scanf_i+0x18a>
   18676:	23be      	movs	r3, #190	; 0xbe
   18678:	3d01      	subs	r5, #1
   1867a:	005b      	lsls	r3, r3, #1
   1867c:	7829      	ldrb	r1, [r5, #0]
   1867e:	58e3      	ldr	r3, [r4, r3]
   18680:	0032      	movs	r2, r6
   18682:	9805      	ldr	r0, [sp, #20]
   18684:	4798      	blx	r3
   18686:	9b01      	ldr	r3, [sp, #4]
   18688:	2001      	movs	r0, #1
   1868a:	429d      	cmp	r5, r3
   1868c:	d027      	beq.n	186de <_scanf_i+0x1e2>
   1868e:	2210      	movs	r2, #16
   18690:	6823      	ldr	r3, [r4, #0]
   18692:	401a      	ands	r2, r3
   18694:	d11c      	bne.n	186d0 <_scanf_i+0x1d4>
   18696:	702a      	strb	r2, [r5, #0]
   18698:	6863      	ldr	r3, [r4, #4]
   1869a:	9901      	ldr	r1, [sp, #4]
   1869c:	9805      	ldr	r0, [sp, #20]
   1869e:	9e06      	ldr	r6, [sp, #24]
   186a0:	47b0      	blx	r6
   186a2:	9b02      	ldr	r3, [sp, #8]
   186a4:	6822      	ldr	r2, [r4, #0]
   186a6:	681b      	ldr	r3, [r3, #0]
   186a8:	0691      	lsls	r1, r2, #26
   186aa:	d507      	bpl.n	186bc <_scanf_i+0x1c0>
   186ac:	9902      	ldr	r1, [sp, #8]
   186ae:	1d1a      	adds	r2, r3, #4
   186b0:	600a      	str	r2, [r1, #0]
   186b2:	681b      	ldr	r3, [r3, #0]
   186b4:	6018      	str	r0, [r3, #0]
   186b6:	e008      	b.n	186ca <_scanf_i+0x1ce>
   186b8:	2700      	movs	r7, #0
   186ba:	e7d6      	b.n	1866a <_scanf_i+0x16e>
   186bc:	07d1      	lsls	r1, r2, #31
   186be:	d5f5      	bpl.n	186ac <_scanf_i+0x1b0>
   186c0:	9902      	ldr	r1, [sp, #8]
   186c2:	1d1a      	adds	r2, r3, #4
   186c4:	600a      	str	r2, [r1, #0]
   186c6:	681b      	ldr	r3, [r3, #0]
   186c8:	8018      	strh	r0, [r3, #0]
   186ca:	68e3      	ldr	r3, [r4, #12]
   186cc:	3301      	adds	r3, #1
   186ce:	60e3      	str	r3, [r4, #12]
   186d0:	2000      	movs	r0, #0
   186d2:	9b01      	ldr	r3, [sp, #4]
   186d4:	1aed      	subs	r5, r5, r3
   186d6:	6923      	ldr	r3, [r4, #16]
   186d8:	19ef      	adds	r7, r5, r7
   186da:	19df      	adds	r7, r3, r7
   186dc:	6127      	str	r7, [r4, #16]
   186de:	b00d      	add	sp, #52	; 0x34
   186e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   186e2:	46c0      	nop			; (mov r8, r8)
   186e4:	0001b728 	.word	0x0001b728
   186e8:	000171f9 	.word	0x000171f9
   186ec:	00018ac9 	.word	0x00018ac9
   186f0:	fffffaff 	.word	0xfffffaff
   186f4:	0001b734 	.word	0x0001b734
   186f8:	fffff6ff 	.word	0xfffff6ff

000186fc <_putc_r>:
   186fc:	b570      	push	{r4, r5, r6, lr}
   186fe:	0006      	movs	r6, r0
   18700:	000d      	movs	r5, r1
   18702:	0014      	movs	r4, r2
   18704:	2800      	cmp	r0, #0
   18706:	d004      	beq.n	18712 <_putc_r+0x16>
   18708:	6983      	ldr	r3, [r0, #24]
   1870a:	2b00      	cmp	r3, #0
   1870c:	d101      	bne.n	18712 <_putc_r+0x16>
   1870e:	f7fe ff6f 	bl	175f0 <__sinit>
   18712:	4b12      	ldr	r3, [pc, #72]	; (1875c <_putc_r+0x60>)
   18714:	429c      	cmp	r4, r3
   18716:	d111      	bne.n	1873c <_putc_r+0x40>
   18718:	6874      	ldr	r4, [r6, #4]
   1871a:	68a3      	ldr	r3, [r4, #8]
   1871c:	3b01      	subs	r3, #1
   1871e:	60a3      	str	r3, [r4, #8]
   18720:	2b00      	cmp	r3, #0
   18722:	da05      	bge.n	18730 <_putc_r+0x34>
   18724:	69a2      	ldr	r2, [r4, #24]
   18726:	4293      	cmp	r3, r2
   18728:	db12      	blt.n	18750 <_putc_r+0x54>
   1872a:	b2eb      	uxtb	r3, r5
   1872c:	2b0a      	cmp	r3, #10
   1872e:	d00f      	beq.n	18750 <_putc_r+0x54>
   18730:	6823      	ldr	r3, [r4, #0]
   18732:	b2e8      	uxtb	r0, r5
   18734:	1c5a      	adds	r2, r3, #1
   18736:	6022      	str	r2, [r4, #0]
   18738:	701d      	strb	r5, [r3, #0]
   1873a:	bd70      	pop	{r4, r5, r6, pc}
   1873c:	4b08      	ldr	r3, [pc, #32]	; (18760 <_putc_r+0x64>)
   1873e:	429c      	cmp	r4, r3
   18740:	d101      	bne.n	18746 <_putc_r+0x4a>
   18742:	68b4      	ldr	r4, [r6, #8]
   18744:	e7e9      	b.n	1871a <_putc_r+0x1e>
   18746:	4b07      	ldr	r3, [pc, #28]	; (18764 <_putc_r+0x68>)
   18748:	429c      	cmp	r4, r3
   1874a:	d1e6      	bne.n	1871a <_putc_r+0x1e>
   1874c:	68f4      	ldr	r4, [r6, #12]
   1874e:	e7e4      	b.n	1871a <_putc_r+0x1e>
   18750:	0022      	movs	r2, r4
   18752:	0029      	movs	r1, r5
   18754:	0030      	movs	r0, r6
   18756:	f7fe fd73 	bl	17240 <__swbuf_r>
   1875a:	e7ee      	b.n	1873a <_putc_r+0x3e>
   1875c:	0001b6a8 	.word	0x0001b6a8
   18760:	0001b6c8 	.word	0x0001b6c8
   18764:	0001b688 	.word	0x0001b688

00018768 <lflush>:
   18768:	2209      	movs	r2, #9
   1876a:	b510      	push	{r4, lr}
   1876c:	8983      	ldrh	r3, [r0, #12]
   1876e:	4013      	ands	r3, r2
   18770:	2200      	movs	r2, #0
   18772:	2b09      	cmp	r3, #9
   18774:	d102      	bne.n	1877c <lflush+0x14>
   18776:	f7fe fee5 	bl	17544 <fflush>
   1877a:	0002      	movs	r2, r0
   1877c:	0010      	movs	r0, r2
   1877e:	bd10      	pop	{r4, pc}

00018780 <__srefill_r>:
   18780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18782:	0005      	movs	r5, r0
   18784:	000c      	movs	r4, r1
   18786:	2800      	cmp	r0, #0
   18788:	d004      	beq.n	18794 <__srefill_r+0x14>
   1878a:	6983      	ldr	r3, [r0, #24]
   1878c:	2b00      	cmp	r3, #0
   1878e:	d101      	bne.n	18794 <__srefill_r+0x14>
   18790:	f7fe ff2e 	bl	175f0 <__sinit>
   18794:	4b3d      	ldr	r3, [pc, #244]	; (1888c <__srefill_r+0x10c>)
   18796:	429c      	cmp	r4, r3
   18798:	d10a      	bne.n	187b0 <__srefill_r+0x30>
   1879a:	686c      	ldr	r4, [r5, #4]
   1879c:	2300      	movs	r3, #0
   1879e:	6063      	str	r3, [r4, #4]
   187a0:	230c      	movs	r3, #12
   187a2:	5ee2      	ldrsh	r2, [r4, r3]
   187a4:	b293      	uxth	r3, r2
   187a6:	0699      	lsls	r1, r3, #26
   187a8:	d50c      	bpl.n	187c4 <__srefill_r+0x44>
   187aa:	2001      	movs	r0, #1
   187ac:	4240      	negs	r0, r0
   187ae:	e068      	b.n	18882 <__srefill_r+0x102>
   187b0:	4b37      	ldr	r3, [pc, #220]	; (18890 <__srefill_r+0x110>)
   187b2:	429c      	cmp	r4, r3
   187b4:	d101      	bne.n	187ba <__srefill_r+0x3a>
   187b6:	68ac      	ldr	r4, [r5, #8]
   187b8:	e7f0      	b.n	1879c <__srefill_r+0x1c>
   187ba:	4b36      	ldr	r3, [pc, #216]	; (18894 <__srefill_r+0x114>)
   187bc:	429c      	cmp	r4, r3
   187be:	d1ed      	bne.n	1879c <__srefill_r+0x1c>
   187c0:	68ec      	ldr	r4, [r5, #12]
   187c2:	e7eb      	b.n	1879c <__srefill_r+0x1c>
   187c4:	0759      	lsls	r1, r3, #29
   187c6:	d44a      	bmi.n	1885e <__srefill_r+0xde>
   187c8:	06d9      	lsls	r1, r3, #27
   187ca:	d405      	bmi.n	187d8 <__srefill_r+0x58>
   187cc:	2309      	movs	r3, #9
   187ce:	602b      	str	r3, [r5, #0]
   187d0:	3337      	adds	r3, #55	; 0x37
   187d2:	4313      	orrs	r3, r2
   187d4:	81a3      	strh	r3, [r4, #12]
   187d6:	e7e8      	b.n	187aa <__srefill_r+0x2a>
   187d8:	2608      	movs	r6, #8
   187da:	4233      	tst	r3, r6
   187dc:	d00a      	beq.n	187f4 <__srefill_r+0x74>
   187de:	0021      	movs	r1, r4
   187e0:	0028      	movs	r0, r5
   187e2:	f7fe fe83 	bl	174ec <_fflush_r>
   187e6:	2800      	cmp	r0, #0
   187e8:	d1df      	bne.n	187aa <__srefill_r+0x2a>
   187ea:	89a3      	ldrh	r3, [r4, #12]
   187ec:	60a0      	str	r0, [r4, #8]
   187ee:	43b3      	bics	r3, r6
   187f0:	81a3      	strh	r3, [r4, #12]
   187f2:	61a0      	str	r0, [r4, #24]
   187f4:	2304      	movs	r3, #4
   187f6:	89a2      	ldrh	r2, [r4, #12]
   187f8:	4313      	orrs	r3, r2
   187fa:	81a3      	strh	r3, [r4, #12]
   187fc:	6923      	ldr	r3, [r4, #16]
   187fe:	2b00      	cmp	r3, #0
   18800:	d103      	bne.n	1880a <__srefill_r+0x8a>
   18802:	0021      	movs	r1, r4
   18804:	0028      	movs	r0, r5
   18806:	f7fe ffdd 	bl	177c4 <__smakebuf_r>
   1880a:	230c      	movs	r3, #12
   1880c:	5ee7      	ldrsh	r7, [r4, r3]
   1880e:	b2be      	uxth	r6, r7
   18810:	07b3      	lsls	r3, r6, #30
   18812:	d00f      	beq.n	18834 <__srefill_r+0xb4>
   18814:	2301      	movs	r3, #1
   18816:	81a3      	strh	r3, [r4, #12]
   18818:	4b1f      	ldr	r3, [pc, #124]	; (18898 <__srefill_r+0x118>)
   1881a:	4920      	ldr	r1, [pc, #128]	; (1889c <__srefill_r+0x11c>)
   1881c:	6818      	ldr	r0, [r3, #0]
   1881e:	f7fe ff5b 	bl	176d8 <_fwalk>
   18822:	2309      	movs	r3, #9
   18824:	81a7      	strh	r7, [r4, #12]
   18826:	401e      	ands	r6, r3
   18828:	429e      	cmp	r6, r3
   1882a:	d103      	bne.n	18834 <__srefill_r+0xb4>
   1882c:	0021      	movs	r1, r4
   1882e:	0028      	movs	r0, r5
   18830:	f7fe fdd2 	bl	173d8 <__sflush_r>
   18834:	6923      	ldr	r3, [r4, #16]
   18836:	6922      	ldr	r2, [r4, #16]
   18838:	6023      	str	r3, [r4, #0]
   1883a:	0028      	movs	r0, r5
   1883c:	6963      	ldr	r3, [r4, #20]
   1883e:	6a21      	ldr	r1, [r4, #32]
   18840:	6a65      	ldr	r5, [r4, #36]	; 0x24
   18842:	47a8      	blx	r5
   18844:	0002      	movs	r2, r0
   18846:	6060      	str	r0, [r4, #4]
   18848:	2000      	movs	r0, #0
   1884a:	4282      	cmp	r2, r0
   1884c:	dc19      	bgt.n	18882 <__srefill_r+0x102>
   1884e:	89a1      	ldrh	r1, [r4, #12]
   18850:	4282      	cmp	r2, r0
   18852:	d117      	bne.n	18884 <__srefill_r+0x104>
   18854:	2320      	movs	r3, #32
   18856:	430b      	orrs	r3, r1
   18858:	81a3      	strh	r3, [r4, #12]
   1885a:	3801      	subs	r0, #1
   1885c:	e011      	b.n	18882 <__srefill_r+0x102>
   1885e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   18860:	2900      	cmp	r1, #0
   18862:	d0cb      	beq.n	187fc <__srefill_r+0x7c>
   18864:	0023      	movs	r3, r4
   18866:	3344      	adds	r3, #68	; 0x44
   18868:	4299      	cmp	r1, r3
   1886a:	d002      	beq.n	18872 <__srefill_r+0xf2>
   1886c:	0028      	movs	r0, r5
   1886e:	f7fe f911 	bl	16a94 <_free_r>
   18872:	2000      	movs	r0, #0
   18874:	6c23      	ldr	r3, [r4, #64]	; 0x40
   18876:	6360      	str	r0, [r4, #52]	; 0x34
   18878:	6063      	str	r3, [r4, #4]
   1887a:	4283      	cmp	r3, r0
   1887c:	d0be      	beq.n	187fc <__srefill_r+0x7c>
   1887e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   18880:	6023      	str	r3, [r4, #0]
   18882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18884:	2340      	movs	r3, #64	; 0x40
   18886:	6060      	str	r0, [r4, #4]
   18888:	430b      	orrs	r3, r1
   1888a:	e7a3      	b.n	187d4 <__srefill_r+0x54>
   1888c:	0001b6a8 	.word	0x0001b6a8
   18890:	0001b6c8 	.word	0x0001b6c8
   18894:	0001b688 	.word	0x0001b688
   18898:	0001b684 	.word	0x0001b684
   1889c:	00018769 	.word	0x00018769

000188a0 <__sccl>:
   188a0:	b570      	push	{r4, r5, r6, lr}
   188a2:	780b      	ldrb	r3, [r1, #0]
   188a4:	2b5e      	cmp	r3, #94	; 0x5e
   188a6:	d00d      	beq.n	188c4 <__sccl+0x24>
   188a8:	1c4a      	adds	r2, r1, #1
   188aa:	2100      	movs	r1, #0
   188ac:	0004      	movs	r4, r0
   188ae:	1c45      	adds	r5, r0, #1
   188b0:	35ff      	adds	r5, #255	; 0xff
   188b2:	7021      	strb	r1, [r4, #0]
   188b4:	3401      	adds	r4, #1
   188b6:	42a5      	cmp	r5, r4
   188b8:	d1fb      	bne.n	188b2 <__sccl+0x12>
   188ba:	2b00      	cmp	r3, #0
   188bc:	d106      	bne.n	188cc <__sccl+0x2c>
   188be:	3a01      	subs	r2, #1
   188c0:	0010      	movs	r0, r2
   188c2:	bd70      	pop	{r4, r5, r6, pc}
   188c4:	1c8a      	adds	r2, r1, #2
   188c6:	784b      	ldrb	r3, [r1, #1]
   188c8:	2101      	movs	r1, #1
   188ca:	e7ef      	b.n	188ac <__sccl+0xc>
   188cc:	2401      	movs	r4, #1
   188ce:	404c      	eors	r4, r1
   188d0:	0011      	movs	r1, r2
   188d2:	54c4      	strb	r4, [r0, r3]
   188d4:	780d      	ldrb	r5, [r1, #0]
   188d6:	1c4a      	adds	r2, r1, #1
   188d8:	2d2d      	cmp	r5, #45	; 0x2d
   188da:	d007      	beq.n	188ec <__sccl+0x4c>
   188dc:	2d5d      	cmp	r5, #93	; 0x5d
   188de:	d0ef      	beq.n	188c0 <__sccl+0x20>
   188e0:	2d00      	cmp	r5, #0
   188e2:	d101      	bne.n	188e8 <__sccl+0x48>
   188e4:	000a      	movs	r2, r1
   188e6:	e7eb      	b.n	188c0 <__sccl+0x20>
   188e8:	002b      	movs	r3, r5
   188ea:	e7f1      	b.n	188d0 <__sccl+0x30>
   188ec:	784e      	ldrb	r6, [r1, #1]
   188ee:	2e5d      	cmp	r6, #93	; 0x5d
   188f0:	d0fa      	beq.n	188e8 <__sccl+0x48>
   188f2:	42b3      	cmp	r3, r6
   188f4:	dcf8      	bgt.n	188e8 <__sccl+0x48>
   188f6:	3102      	adds	r1, #2
   188f8:	3301      	adds	r3, #1
   188fa:	54c4      	strb	r4, [r0, r3]
   188fc:	429e      	cmp	r6, r3
   188fe:	dcfb      	bgt.n	188f8 <__sccl+0x58>
   18900:	e7e8      	b.n	188d4 <__sccl+0x34>
	...

00018904 <__sread>:
   18904:	b570      	push	{r4, r5, r6, lr}
   18906:	000c      	movs	r4, r1
   18908:	250e      	movs	r5, #14
   1890a:	5f49      	ldrsh	r1, [r1, r5]
   1890c:	f000 fa38 	bl	18d80 <_read_r>
   18910:	2800      	cmp	r0, #0
   18912:	db03      	blt.n	1891c <__sread+0x18>
   18914:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18916:	181b      	adds	r3, r3, r0
   18918:	6563      	str	r3, [r4, #84]	; 0x54
   1891a:	bd70      	pop	{r4, r5, r6, pc}
   1891c:	89a3      	ldrh	r3, [r4, #12]
   1891e:	4a02      	ldr	r2, [pc, #8]	; (18928 <__sread+0x24>)
   18920:	4013      	ands	r3, r2
   18922:	81a3      	strh	r3, [r4, #12]
   18924:	e7f9      	b.n	1891a <__sread+0x16>
   18926:	46c0      	nop			; (mov r8, r8)
   18928:	ffffefff 	.word	0xffffefff

0001892c <__swrite>:
   1892c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1892e:	001f      	movs	r7, r3
   18930:	898b      	ldrh	r3, [r1, #12]
   18932:	0005      	movs	r5, r0
   18934:	000c      	movs	r4, r1
   18936:	0016      	movs	r6, r2
   18938:	05db      	lsls	r3, r3, #23
   1893a:	d505      	bpl.n	18948 <__swrite+0x1c>
   1893c:	230e      	movs	r3, #14
   1893e:	5ec9      	ldrsh	r1, [r1, r3]
   18940:	2200      	movs	r2, #0
   18942:	2302      	movs	r3, #2
   18944:	f000 f9d6 	bl	18cf4 <_lseek_r>
   18948:	89a3      	ldrh	r3, [r4, #12]
   1894a:	4a05      	ldr	r2, [pc, #20]	; (18960 <__swrite+0x34>)
   1894c:	0028      	movs	r0, r5
   1894e:	4013      	ands	r3, r2
   18950:	81a3      	strh	r3, [r4, #12]
   18952:	0032      	movs	r2, r6
   18954:	230e      	movs	r3, #14
   18956:	5ee1      	ldrsh	r1, [r4, r3]
   18958:	003b      	movs	r3, r7
   1895a:	f000 f981 	bl	18c60 <_write_r>
   1895e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18960:	ffffefff 	.word	0xffffefff

00018964 <__sseek>:
   18964:	b570      	push	{r4, r5, r6, lr}
   18966:	000c      	movs	r4, r1
   18968:	250e      	movs	r5, #14
   1896a:	5f49      	ldrsh	r1, [r1, r5]
   1896c:	f000 f9c2 	bl	18cf4 <_lseek_r>
   18970:	89a3      	ldrh	r3, [r4, #12]
   18972:	1c42      	adds	r2, r0, #1
   18974:	d103      	bne.n	1897e <__sseek+0x1a>
   18976:	4a05      	ldr	r2, [pc, #20]	; (1898c <__sseek+0x28>)
   18978:	4013      	ands	r3, r2
   1897a:	81a3      	strh	r3, [r4, #12]
   1897c:	bd70      	pop	{r4, r5, r6, pc}
   1897e:	2280      	movs	r2, #128	; 0x80
   18980:	0152      	lsls	r2, r2, #5
   18982:	4313      	orrs	r3, r2
   18984:	81a3      	strh	r3, [r4, #12]
   18986:	6560      	str	r0, [r4, #84]	; 0x54
   18988:	e7f8      	b.n	1897c <__sseek+0x18>
   1898a:	46c0      	nop			; (mov r8, r8)
   1898c:	ffffefff 	.word	0xffffefff

00018990 <__sclose>:
   18990:	b510      	push	{r4, lr}
   18992:	230e      	movs	r3, #14
   18994:	5ec9      	ldrsh	r1, [r1, r3]
   18996:	f000 f977 	bl	18c88 <_close_r>
   1899a:	bd10      	pop	{r4, pc}

0001899c <strchr>:
   1899c:	b2c9      	uxtb	r1, r1
   1899e:	7803      	ldrb	r3, [r0, #0]
   189a0:	2b00      	cmp	r3, #0
   189a2:	d004      	beq.n	189ae <strchr+0x12>
   189a4:	4299      	cmp	r1, r3
   189a6:	d100      	bne.n	189aa <strchr+0xe>
   189a8:	4770      	bx	lr
   189aa:	3001      	adds	r0, #1
   189ac:	e7f7      	b.n	1899e <strchr+0x2>
   189ae:	424b      	negs	r3, r1
   189b0:	4159      	adcs	r1, r3
   189b2:	4249      	negs	r1, r1
   189b4:	4008      	ands	r0, r1
   189b6:	e7f7      	b.n	189a8 <strchr+0xc>

000189b8 <_strtoul_l.isra.0>:
   189b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   189ba:	001f      	movs	r7, r3
   189bc:	000e      	movs	r6, r1
   189be:	b087      	sub	sp, #28
   189c0:	9005      	str	r0, [sp, #20]
   189c2:	9103      	str	r1, [sp, #12]
   189c4:	9201      	str	r2, [sp, #4]
   189c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   189c8:	7834      	ldrb	r4, [r6, #0]
   189ca:	f7fe fec2 	bl	17752 <__locale_ctype_ptr_l>
   189ce:	2208      	movs	r2, #8
   189d0:	1900      	adds	r0, r0, r4
   189d2:	7843      	ldrb	r3, [r0, #1]
   189d4:	1c75      	adds	r5, r6, #1
   189d6:	4013      	ands	r3, r2
   189d8:	d10c      	bne.n	189f4 <_strtoul_l.isra.0+0x3c>
   189da:	2c2d      	cmp	r4, #45	; 0x2d
   189dc:	d10c      	bne.n	189f8 <_strtoul_l.isra.0+0x40>
   189de:	3301      	adds	r3, #1
   189e0:	782c      	ldrb	r4, [r5, #0]
   189e2:	9302      	str	r3, [sp, #8]
   189e4:	1cb5      	adds	r5, r6, #2
   189e6:	2f00      	cmp	r7, #0
   189e8:	d00c      	beq.n	18a04 <_strtoul_l.isra.0+0x4c>
   189ea:	2f10      	cmp	r7, #16
   189ec:	d114      	bne.n	18a18 <_strtoul_l.isra.0+0x60>
   189ee:	2c30      	cmp	r4, #48	; 0x30
   189f0:	d00a      	beq.n	18a08 <_strtoul_l.isra.0+0x50>
   189f2:	e011      	b.n	18a18 <_strtoul_l.isra.0+0x60>
   189f4:	002e      	movs	r6, r5
   189f6:	e7e6      	b.n	189c6 <_strtoul_l.isra.0+0xe>
   189f8:	9302      	str	r3, [sp, #8]
   189fa:	2c2b      	cmp	r4, #43	; 0x2b
   189fc:	d1f3      	bne.n	189e6 <_strtoul_l.isra.0+0x2e>
   189fe:	782c      	ldrb	r4, [r5, #0]
   18a00:	1cb5      	adds	r5, r6, #2
   18a02:	e7f0      	b.n	189e6 <_strtoul_l.isra.0+0x2e>
   18a04:	2c30      	cmp	r4, #48	; 0x30
   18a06:	d12f      	bne.n	18a68 <_strtoul_l.isra.0+0xb0>
   18a08:	2220      	movs	r2, #32
   18a0a:	782b      	ldrb	r3, [r5, #0]
   18a0c:	4393      	bics	r3, r2
   18a0e:	2b58      	cmp	r3, #88	; 0x58
   18a10:	d154      	bne.n	18abc <_strtoul_l.isra.0+0x104>
   18a12:	2710      	movs	r7, #16
   18a14:	786c      	ldrb	r4, [r5, #1]
   18a16:	3502      	adds	r5, #2
   18a18:	2001      	movs	r0, #1
   18a1a:	0039      	movs	r1, r7
   18a1c:	4240      	negs	r0, r0
   18a1e:	f7fd fe37 	bl	16690 <__udivsi3>
   18a22:	0006      	movs	r6, r0
   18a24:	2001      	movs	r0, #1
   18a26:	0039      	movs	r1, r7
   18a28:	4240      	negs	r0, r0
   18a2a:	f7fd feb7 	bl	1679c <__aeabi_uidivmod>
   18a2e:	2300      	movs	r3, #0
   18a30:	9104      	str	r1, [sp, #16]
   18a32:	2101      	movs	r1, #1
   18a34:	2201      	movs	r2, #1
   18a36:	0018      	movs	r0, r3
   18a38:	468c      	mov	ip, r1
   18a3a:	4252      	negs	r2, r2
   18a3c:	0021      	movs	r1, r4
   18a3e:	3930      	subs	r1, #48	; 0x30
   18a40:	2909      	cmp	r1, #9
   18a42:	d813      	bhi.n	18a6c <_strtoul_l.isra.0+0xb4>
   18a44:	000c      	movs	r4, r1
   18a46:	42a7      	cmp	r7, r4
   18a48:	dd1e      	ble.n	18a88 <_strtoul_l.isra.0+0xd0>
   18a4a:	2b00      	cmp	r3, #0
   18a4c:	db1a      	blt.n	18a84 <_strtoul_l.isra.0+0xcc>
   18a4e:	0013      	movs	r3, r2
   18a50:	4286      	cmp	r6, r0
   18a52:	d306      	bcc.n	18a62 <_strtoul_l.isra.0+0xaa>
   18a54:	d102      	bne.n	18a5c <_strtoul_l.isra.0+0xa4>
   18a56:	9904      	ldr	r1, [sp, #16]
   18a58:	42a1      	cmp	r1, r4
   18a5a:	db02      	blt.n	18a62 <_strtoul_l.isra.0+0xaa>
   18a5c:	4663      	mov	r3, ip
   18a5e:	4378      	muls	r0, r7
   18a60:	1820      	adds	r0, r4, r0
   18a62:	782c      	ldrb	r4, [r5, #0]
   18a64:	3501      	adds	r5, #1
   18a66:	e7e9      	b.n	18a3c <_strtoul_l.isra.0+0x84>
   18a68:	270a      	movs	r7, #10
   18a6a:	e7d5      	b.n	18a18 <_strtoul_l.isra.0+0x60>
   18a6c:	0021      	movs	r1, r4
   18a6e:	3941      	subs	r1, #65	; 0x41
   18a70:	2919      	cmp	r1, #25
   18a72:	d801      	bhi.n	18a78 <_strtoul_l.isra.0+0xc0>
   18a74:	3c37      	subs	r4, #55	; 0x37
   18a76:	e7e6      	b.n	18a46 <_strtoul_l.isra.0+0x8e>
   18a78:	0021      	movs	r1, r4
   18a7a:	3961      	subs	r1, #97	; 0x61
   18a7c:	2919      	cmp	r1, #25
   18a7e:	d803      	bhi.n	18a88 <_strtoul_l.isra.0+0xd0>
   18a80:	3c57      	subs	r4, #87	; 0x57
   18a82:	e7e0      	b.n	18a46 <_strtoul_l.isra.0+0x8e>
   18a84:	0013      	movs	r3, r2
   18a86:	e7ec      	b.n	18a62 <_strtoul_l.isra.0+0xaa>
   18a88:	2b00      	cmp	r3, #0
   18a8a:	da09      	bge.n	18aa0 <_strtoul_l.isra.0+0xe8>
   18a8c:	2322      	movs	r3, #34	; 0x22
   18a8e:	2001      	movs	r0, #1
   18a90:	9a05      	ldr	r2, [sp, #20]
   18a92:	4240      	negs	r0, r0
   18a94:	6013      	str	r3, [r2, #0]
   18a96:	9b01      	ldr	r3, [sp, #4]
   18a98:	2b00      	cmp	r3, #0
   18a9a:	d10b      	bne.n	18ab4 <_strtoul_l.isra.0+0xfc>
   18a9c:	b007      	add	sp, #28
   18a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18aa0:	9a02      	ldr	r2, [sp, #8]
   18aa2:	2a00      	cmp	r2, #0
   18aa4:	d000      	beq.n	18aa8 <_strtoul_l.isra.0+0xf0>
   18aa6:	4240      	negs	r0, r0
   18aa8:	9a01      	ldr	r2, [sp, #4]
   18aaa:	2a00      	cmp	r2, #0
   18aac:	d0f6      	beq.n	18a9c <_strtoul_l.isra.0+0xe4>
   18aae:	9a03      	ldr	r2, [sp, #12]
   18ab0:	2b00      	cmp	r3, #0
   18ab2:	d000      	beq.n	18ab6 <_strtoul_l.isra.0+0xfe>
   18ab4:	1e6a      	subs	r2, r5, #1
   18ab6:	9b01      	ldr	r3, [sp, #4]
   18ab8:	601a      	str	r2, [r3, #0]
   18aba:	e7ef      	b.n	18a9c <_strtoul_l.isra.0+0xe4>
   18abc:	2430      	movs	r4, #48	; 0x30
   18abe:	2f00      	cmp	r7, #0
   18ac0:	d1aa      	bne.n	18a18 <_strtoul_l.isra.0+0x60>
   18ac2:	3708      	adds	r7, #8
   18ac4:	e7a8      	b.n	18a18 <_strtoul_l.isra.0+0x60>
	...

00018ac8 <_strtoul_r>:
   18ac8:	b513      	push	{r0, r1, r4, lr}
   18aca:	4c05      	ldr	r4, [pc, #20]	; (18ae0 <_strtoul_r+0x18>)
   18acc:	6824      	ldr	r4, [r4, #0]
   18ace:	6a24      	ldr	r4, [r4, #32]
   18ad0:	2c00      	cmp	r4, #0
   18ad2:	d100      	bne.n	18ad6 <_strtoul_r+0xe>
   18ad4:	4c03      	ldr	r4, [pc, #12]	; (18ae4 <_strtoul_r+0x1c>)
   18ad6:	9400      	str	r4, [sp, #0]
   18ad8:	f7ff ff6e 	bl	189b8 <_strtoul_l.isra.0>
   18adc:	bd16      	pop	{r1, r2, r4, pc}
   18ade:	46c0      	nop			; (mov r8, r8)
   18ae0:	2000017c 	.word	0x2000017c
   18ae4:	200001e0 	.word	0x200001e0

00018ae8 <__submore>:
   18ae8:	000b      	movs	r3, r1
   18aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18aec:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   18aee:	3344      	adds	r3, #68	; 0x44
   18af0:	000c      	movs	r4, r1
   18af2:	429d      	cmp	r5, r3
   18af4:	d11c      	bne.n	18b30 <__submore+0x48>
   18af6:	2680      	movs	r6, #128	; 0x80
   18af8:	00f6      	lsls	r6, r6, #3
   18afa:	0031      	movs	r1, r6
   18afc:	f7fe f814 	bl	16b28 <_malloc_r>
   18b00:	2800      	cmp	r0, #0
   18b02:	d102      	bne.n	18b0a <__submore+0x22>
   18b04:	2001      	movs	r0, #1
   18b06:	4240      	negs	r0, r0
   18b08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   18b0a:	0023      	movs	r3, r4
   18b0c:	6360      	str	r0, [r4, #52]	; 0x34
   18b0e:	63a6      	str	r6, [r4, #56]	; 0x38
   18b10:	3346      	adds	r3, #70	; 0x46
   18b12:	781a      	ldrb	r2, [r3, #0]
   18b14:	4b10      	ldr	r3, [pc, #64]	; (18b58 <__submore+0x70>)
   18b16:	54c2      	strb	r2, [r0, r3]
   18b18:	0023      	movs	r3, r4
   18b1a:	3345      	adds	r3, #69	; 0x45
   18b1c:	781a      	ldrb	r2, [r3, #0]
   18b1e:	4b0f      	ldr	r3, [pc, #60]	; (18b5c <__submore+0x74>)
   18b20:	54c2      	strb	r2, [r0, r3]
   18b22:	782a      	ldrb	r2, [r5, #0]
   18b24:	4b0e      	ldr	r3, [pc, #56]	; (18b60 <__submore+0x78>)
   18b26:	54c2      	strb	r2, [r0, r3]
   18b28:	18c0      	adds	r0, r0, r3
   18b2a:	6020      	str	r0, [r4, #0]
   18b2c:	2000      	movs	r0, #0
   18b2e:	e7eb      	b.n	18b08 <__submore+0x20>
   18b30:	6b8e      	ldr	r6, [r1, #56]	; 0x38
   18b32:	0029      	movs	r1, r5
   18b34:	0073      	lsls	r3, r6, #1
   18b36:	001a      	movs	r2, r3
   18b38:	9301      	str	r3, [sp, #4]
   18b3a:	f000 f8fa 	bl	18d32 <_realloc_r>
   18b3e:	1e05      	subs	r5, r0, #0
   18b40:	d0e0      	beq.n	18b04 <__submore+0x1c>
   18b42:	1987      	adds	r7, r0, r6
   18b44:	0001      	movs	r1, r0
   18b46:	0032      	movs	r2, r6
   18b48:	0038      	movs	r0, r7
   18b4a:	f7fd ff7f 	bl	16a4c <memcpy>
   18b4e:	9b01      	ldr	r3, [sp, #4]
   18b50:	6027      	str	r7, [r4, #0]
   18b52:	6365      	str	r5, [r4, #52]	; 0x34
   18b54:	63a3      	str	r3, [r4, #56]	; 0x38
   18b56:	e7e9      	b.n	18b2c <__submore+0x44>
   18b58:	000003ff 	.word	0x000003ff
   18b5c:	000003fe 	.word	0x000003fe
   18b60:	000003fd 	.word	0x000003fd

00018b64 <_ungetc_r>:
   18b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b66:	0005      	movs	r5, r0
   18b68:	000e      	movs	r6, r1
   18b6a:	0014      	movs	r4, r2
   18b6c:	1c4b      	adds	r3, r1, #1
   18b6e:	d103      	bne.n	18b78 <_ungetc_r+0x14>
   18b70:	2601      	movs	r6, #1
   18b72:	4276      	negs	r6, r6
   18b74:	0030      	movs	r0, r6
   18b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b78:	2800      	cmp	r0, #0
   18b7a:	d004      	beq.n	18b86 <_ungetc_r+0x22>
   18b7c:	6983      	ldr	r3, [r0, #24]
   18b7e:	2b00      	cmp	r3, #0
   18b80:	d101      	bne.n	18b86 <_ungetc_r+0x22>
   18b82:	f7fe fd35 	bl	175f0 <__sinit>
   18b86:	4b2d      	ldr	r3, [pc, #180]	; (18c3c <_ungetc_r+0xd8>)
   18b88:	429c      	cmp	r4, r3
   18b8a:	d12d      	bne.n	18be8 <_ungetc_r+0x84>
   18b8c:	686c      	ldr	r4, [r5, #4]
   18b8e:	2220      	movs	r2, #32
   18b90:	89a3      	ldrh	r3, [r4, #12]
   18b92:	4393      	bics	r3, r2
   18b94:	b21b      	sxth	r3, r3
   18b96:	81a3      	strh	r3, [r4, #12]
   18b98:	b29b      	uxth	r3, r3
   18b9a:	075a      	lsls	r2, r3, #29
   18b9c:	d413      	bmi.n	18bc6 <_ungetc_r+0x62>
   18b9e:	06da      	lsls	r2, r3, #27
   18ba0:	d5e6      	bpl.n	18b70 <_ungetc_r+0xc>
   18ba2:	2708      	movs	r7, #8
   18ba4:	423b      	tst	r3, r7
   18ba6:	d00a      	beq.n	18bbe <_ungetc_r+0x5a>
   18ba8:	0021      	movs	r1, r4
   18baa:	0028      	movs	r0, r5
   18bac:	f7fe fc9e 	bl	174ec <_fflush_r>
   18bb0:	2800      	cmp	r0, #0
   18bb2:	d1dd      	bne.n	18b70 <_ungetc_r+0xc>
   18bb4:	89a3      	ldrh	r3, [r4, #12]
   18bb6:	60a0      	str	r0, [r4, #8]
   18bb8:	43bb      	bics	r3, r7
   18bba:	81a3      	strh	r3, [r4, #12]
   18bbc:	61a0      	str	r0, [r4, #24]
   18bbe:	2304      	movs	r3, #4
   18bc0:	89a2      	ldrh	r2, [r4, #12]
   18bc2:	4313      	orrs	r3, r2
   18bc4:	81a3      	strh	r3, [r4, #12]
   18bc6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   18bc8:	b2f7      	uxtb	r7, r6
   18bca:	6863      	ldr	r3, [r4, #4]
   18bcc:	b2f6      	uxtb	r6, r6
   18bce:	2a00      	cmp	r2, #0
   18bd0:	d01b      	beq.n	18c0a <_ungetc_r+0xa6>
   18bd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   18bd4:	4293      	cmp	r3, r2
   18bd6:	da11      	bge.n	18bfc <_ungetc_r+0x98>
   18bd8:	6823      	ldr	r3, [r4, #0]
   18bda:	3b01      	subs	r3, #1
   18bdc:	6023      	str	r3, [r4, #0]
   18bde:	701f      	strb	r7, [r3, #0]
   18be0:	6863      	ldr	r3, [r4, #4]
   18be2:	3301      	adds	r3, #1
   18be4:	6063      	str	r3, [r4, #4]
   18be6:	e7c5      	b.n	18b74 <_ungetc_r+0x10>
   18be8:	4b15      	ldr	r3, [pc, #84]	; (18c40 <_ungetc_r+0xdc>)
   18bea:	429c      	cmp	r4, r3
   18bec:	d101      	bne.n	18bf2 <_ungetc_r+0x8e>
   18bee:	68ac      	ldr	r4, [r5, #8]
   18bf0:	e7cd      	b.n	18b8e <_ungetc_r+0x2a>
   18bf2:	4b14      	ldr	r3, [pc, #80]	; (18c44 <_ungetc_r+0xe0>)
   18bf4:	429c      	cmp	r4, r3
   18bf6:	d1ca      	bne.n	18b8e <_ungetc_r+0x2a>
   18bf8:	68ec      	ldr	r4, [r5, #12]
   18bfa:	e7c8      	b.n	18b8e <_ungetc_r+0x2a>
   18bfc:	0021      	movs	r1, r4
   18bfe:	0028      	movs	r0, r5
   18c00:	f7ff ff72 	bl	18ae8 <__submore>
   18c04:	2800      	cmp	r0, #0
   18c06:	d0e7      	beq.n	18bd8 <_ungetc_r+0x74>
   18c08:	e7b2      	b.n	18b70 <_ungetc_r+0xc>
   18c0a:	6921      	ldr	r1, [r4, #16]
   18c0c:	6822      	ldr	r2, [r4, #0]
   18c0e:	2900      	cmp	r1, #0
   18c10:	d007      	beq.n	18c22 <_ungetc_r+0xbe>
   18c12:	4291      	cmp	r1, r2
   18c14:	d205      	bcs.n	18c22 <_ungetc_r+0xbe>
   18c16:	1e51      	subs	r1, r2, #1
   18c18:	7808      	ldrb	r0, [r1, #0]
   18c1a:	4286      	cmp	r6, r0
   18c1c:	d101      	bne.n	18c22 <_ungetc_r+0xbe>
   18c1e:	6021      	str	r1, [r4, #0]
   18c20:	e7df      	b.n	18be2 <_ungetc_r+0x7e>
   18c22:	6423      	str	r3, [r4, #64]	; 0x40
   18c24:	0023      	movs	r3, r4
   18c26:	3344      	adds	r3, #68	; 0x44
   18c28:	6363      	str	r3, [r4, #52]	; 0x34
   18c2a:	2303      	movs	r3, #3
   18c2c:	63a3      	str	r3, [r4, #56]	; 0x38
   18c2e:	0023      	movs	r3, r4
   18c30:	3346      	adds	r3, #70	; 0x46
   18c32:	63e2      	str	r2, [r4, #60]	; 0x3c
   18c34:	701f      	strb	r7, [r3, #0]
   18c36:	6023      	str	r3, [r4, #0]
   18c38:	2301      	movs	r3, #1
   18c3a:	e7d3      	b.n	18be4 <_ungetc_r+0x80>
   18c3c:	0001b6a8 	.word	0x0001b6a8
   18c40:	0001b6c8 	.word	0x0001b6c8
   18c44:	0001b688 	.word	0x0001b688

00018c48 <__ascii_wctomb>:
   18c48:	1e0b      	subs	r3, r1, #0
   18c4a:	d004      	beq.n	18c56 <__ascii_wctomb+0xe>
   18c4c:	2aff      	cmp	r2, #255	; 0xff
   18c4e:	d904      	bls.n	18c5a <__ascii_wctomb+0x12>
   18c50:	238a      	movs	r3, #138	; 0x8a
   18c52:	6003      	str	r3, [r0, #0]
   18c54:	3b8b      	subs	r3, #139	; 0x8b
   18c56:	0018      	movs	r0, r3
   18c58:	4770      	bx	lr
   18c5a:	700a      	strb	r2, [r1, #0]
   18c5c:	2301      	movs	r3, #1
   18c5e:	e7fa      	b.n	18c56 <__ascii_wctomb+0xe>

00018c60 <_write_r>:
   18c60:	b570      	push	{r4, r5, r6, lr}
   18c62:	0005      	movs	r5, r0
   18c64:	0008      	movs	r0, r1
   18c66:	0011      	movs	r1, r2
   18c68:	2200      	movs	r2, #0
   18c6a:	4c06      	ldr	r4, [pc, #24]	; (18c84 <_write_r+0x24>)
   18c6c:	6022      	str	r2, [r4, #0]
   18c6e:	001a      	movs	r2, r3
   18c70:	f7f7 fe58 	bl	10924 <_write>
   18c74:	1c43      	adds	r3, r0, #1
   18c76:	d103      	bne.n	18c80 <_write_r+0x20>
   18c78:	6823      	ldr	r3, [r4, #0]
   18c7a:	2b00      	cmp	r3, #0
   18c7c:	d000      	beq.n	18c80 <_write_r+0x20>
   18c7e:	602b      	str	r3, [r5, #0]
   18c80:	bd70      	pop	{r4, r5, r6, pc}
   18c82:	46c0      	nop			; (mov r8, r8)
   18c84:	20001368 	.word	0x20001368

00018c88 <_close_r>:
   18c88:	2300      	movs	r3, #0
   18c8a:	b570      	push	{r4, r5, r6, lr}
   18c8c:	4c06      	ldr	r4, [pc, #24]	; (18ca8 <_close_r+0x20>)
   18c8e:	0005      	movs	r5, r0
   18c90:	0008      	movs	r0, r1
   18c92:	6023      	str	r3, [r4, #0]
   18c94:	f7f7 fe80 	bl	10998 <_close>
   18c98:	1c43      	adds	r3, r0, #1
   18c9a:	d103      	bne.n	18ca4 <_close_r+0x1c>
   18c9c:	6823      	ldr	r3, [r4, #0]
   18c9e:	2b00      	cmp	r3, #0
   18ca0:	d000      	beq.n	18ca4 <_close_r+0x1c>
   18ca2:	602b      	str	r3, [r5, #0]
   18ca4:	bd70      	pop	{r4, r5, r6, pc}
   18ca6:	46c0      	nop			; (mov r8, r8)
   18ca8:	20001368 	.word	0x20001368

00018cac <_fstat_r>:
   18cac:	2300      	movs	r3, #0
   18cae:	b570      	push	{r4, r5, r6, lr}
   18cb0:	4c06      	ldr	r4, [pc, #24]	; (18ccc <_fstat_r+0x20>)
   18cb2:	0005      	movs	r5, r0
   18cb4:	0008      	movs	r0, r1
   18cb6:	0011      	movs	r1, r2
   18cb8:	6023      	str	r3, [r4, #0]
   18cba:	f7f7 fe70 	bl	1099e <_fstat>
   18cbe:	1c43      	adds	r3, r0, #1
   18cc0:	d103      	bne.n	18cca <_fstat_r+0x1e>
   18cc2:	6823      	ldr	r3, [r4, #0]
   18cc4:	2b00      	cmp	r3, #0
   18cc6:	d000      	beq.n	18cca <_fstat_r+0x1e>
   18cc8:	602b      	str	r3, [r5, #0]
   18cca:	bd70      	pop	{r4, r5, r6, pc}
   18ccc:	20001368 	.word	0x20001368

00018cd0 <_isatty_r>:
   18cd0:	2300      	movs	r3, #0
   18cd2:	b570      	push	{r4, r5, r6, lr}
   18cd4:	4c06      	ldr	r4, [pc, #24]	; (18cf0 <_isatty_r+0x20>)
   18cd6:	0005      	movs	r5, r0
   18cd8:	0008      	movs	r0, r1
   18cda:	6023      	str	r3, [r4, #0]
   18cdc:	f7f7 fe64 	bl	109a8 <_isatty>
   18ce0:	1c43      	adds	r3, r0, #1
   18ce2:	d103      	bne.n	18cec <_isatty_r+0x1c>
   18ce4:	6823      	ldr	r3, [r4, #0]
   18ce6:	2b00      	cmp	r3, #0
   18ce8:	d000      	beq.n	18cec <_isatty_r+0x1c>
   18cea:	602b      	str	r3, [r5, #0]
   18cec:	bd70      	pop	{r4, r5, r6, pc}
   18cee:	46c0      	nop			; (mov r8, r8)
   18cf0:	20001368 	.word	0x20001368

00018cf4 <_lseek_r>:
   18cf4:	b570      	push	{r4, r5, r6, lr}
   18cf6:	0005      	movs	r5, r0
   18cf8:	0008      	movs	r0, r1
   18cfa:	0011      	movs	r1, r2
   18cfc:	2200      	movs	r2, #0
   18cfe:	4c06      	ldr	r4, [pc, #24]	; (18d18 <_lseek_r+0x24>)
   18d00:	6022      	str	r2, [r4, #0]
   18d02:	001a      	movs	r2, r3
   18d04:	f7f7 fe52 	bl	109ac <_lseek>
   18d08:	1c43      	adds	r3, r0, #1
   18d0a:	d103      	bne.n	18d14 <_lseek_r+0x20>
   18d0c:	6823      	ldr	r3, [r4, #0]
   18d0e:	2b00      	cmp	r3, #0
   18d10:	d000      	beq.n	18d14 <_lseek_r+0x20>
   18d12:	602b      	str	r3, [r5, #0]
   18d14:	bd70      	pop	{r4, r5, r6, pc}
   18d16:	46c0      	nop			; (mov r8, r8)
   18d18:	20001368 	.word	0x20001368

00018d1c <memchr>:
   18d1c:	b2c9      	uxtb	r1, r1
   18d1e:	1882      	adds	r2, r0, r2
   18d20:	4290      	cmp	r0, r2
   18d22:	d101      	bne.n	18d28 <memchr+0xc>
   18d24:	2000      	movs	r0, #0
   18d26:	4770      	bx	lr
   18d28:	7803      	ldrb	r3, [r0, #0]
   18d2a:	428b      	cmp	r3, r1
   18d2c:	d0fb      	beq.n	18d26 <memchr+0xa>
   18d2e:	3001      	adds	r0, #1
   18d30:	e7f6      	b.n	18d20 <memchr+0x4>

00018d32 <_realloc_r>:
   18d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d34:	0007      	movs	r7, r0
   18d36:	000d      	movs	r5, r1
   18d38:	0016      	movs	r6, r2
   18d3a:	2900      	cmp	r1, #0
   18d3c:	d105      	bne.n	18d4a <_realloc_r+0x18>
   18d3e:	0011      	movs	r1, r2
   18d40:	f7fd fef2 	bl	16b28 <_malloc_r>
   18d44:	0004      	movs	r4, r0
   18d46:	0020      	movs	r0, r4
   18d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d4a:	2a00      	cmp	r2, #0
   18d4c:	d103      	bne.n	18d56 <_realloc_r+0x24>
   18d4e:	f7fd fea1 	bl	16a94 <_free_r>
   18d52:	0034      	movs	r4, r6
   18d54:	e7f7      	b.n	18d46 <_realloc_r+0x14>
   18d56:	f000 f827 	bl	18da8 <_malloc_usable_size_r>
   18d5a:	002c      	movs	r4, r5
   18d5c:	4286      	cmp	r6, r0
   18d5e:	d9f2      	bls.n	18d46 <_realloc_r+0x14>
   18d60:	0031      	movs	r1, r6
   18d62:	0038      	movs	r0, r7
   18d64:	f7fd fee0 	bl	16b28 <_malloc_r>
   18d68:	1e04      	subs	r4, r0, #0
   18d6a:	d0ec      	beq.n	18d46 <_realloc_r+0x14>
   18d6c:	0029      	movs	r1, r5
   18d6e:	0032      	movs	r2, r6
   18d70:	f7fd fe6c 	bl	16a4c <memcpy>
   18d74:	0029      	movs	r1, r5
   18d76:	0038      	movs	r0, r7
   18d78:	f7fd fe8c 	bl	16a94 <_free_r>
   18d7c:	e7e3      	b.n	18d46 <_realloc_r+0x14>
	...

00018d80 <_read_r>:
   18d80:	b570      	push	{r4, r5, r6, lr}
   18d82:	0005      	movs	r5, r0
   18d84:	0008      	movs	r0, r1
   18d86:	0011      	movs	r1, r2
   18d88:	2200      	movs	r2, #0
   18d8a:	4c06      	ldr	r4, [pc, #24]	; (18da4 <_read_r+0x24>)
   18d8c:	6022      	str	r2, [r4, #0]
   18d8e:	001a      	movs	r2, r3
   18d90:	f7f7 fda6 	bl	108e0 <_read>
   18d94:	1c43      	adds	r3, r0, #1
   18d96:	d103      	bne.n	18da0 <_read_r+0x20>
   18d98:	6823      	ldr	r3, [r4, #0]
   18d9a:	2b00      	cmp	r3, #0
   18d9c:	d000      	beq.n	18da0 <_read_r+0x20>
   18d9e:	602b      	str	r3, [r5, #0]
   18da0:	bd70      	pop	{r4, r5, r6, pc}
   18da2:	46c0      	nop			; (mov r8, r8)
   18da4:	20001368 	.word	0x20001368

00018da8 <_malloc_usable_size_r>:
   18da8:	1f0b      	subs	r3, r1, #4
   18daa:	681b      	ldr	r3, [r3, #0]
   18dac:	1f18      	subs	r0, r3, #4
   18dae:	2b00      	cmp	r3, #0
   18db0:	da01      	bge.n	18db6 <_malloc_usable_size_r+0xe>
   18db2:	580b      	ldr	r3, [r1, r0]
   18db4:	18c0      	adds	r0, r0, r3
   18db6:	4770      	bx	lr

00018db8 <mmc_trans_multipliers>:
   18db8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   18dc8:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   18dd8:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   18de8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00018df8 <sd_mmc_trans_units>:
   18df8:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00018e14 <sd_trans_multipliers>:
   18e14:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   18e24:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   18e34:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   18e44:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00018e54 <__FUNCTION__.14666>:
   18e54:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   18e64:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   18e74:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   18e84:	746c 6320 646d 0000 bb28 0000 baf8 0000     lt cmd..(.......
   18e94:	baf0 0000 bb08 0000 bb00 0000 bb20 0000     ............ ...
   18ea4:	bb10 0000 bb18 0000                         ........

00018eac <__FUNCTION__.13113>:
   18eac:	6968 5f66 6573 646e 0000 0000               hif_send....

00018eb8 <__FUNCTION__.13123>:
   18eb8:	6968 5f66 7369 0072                         hif_isr.

00018ec0 <__FUNCTION__.13133>:
   18ec0:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00018ed0 <__FUNCTION__.13145>:
   18ed0:	6968 5f66 6572 6563 7669 0065               hif_receive.

00018edc <__FUNCTION__.13161>:
   18edc:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   18eec:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
   18efc:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
   18f0c:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
   18f1c:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
   18f2c:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
   18f3c:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
   18f4c:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
   18f5c:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
   18f6c:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
   18f7c:	7220 6765 7369 6574 6572 0064 6f53 6b63      registered.Sock
   18f8c:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   18f9c:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
   18fac:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   18fbc:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
   18fcc:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   18fdc:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   18fec:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   18ffc:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   1900c:	7265 6465 0000 0000 5353 204c 6163 6c6c     ered....SSL call
   1901c:	6162 6b63 6920 2073 6f6e 2074 6572 6967     back is not regi
   1902c:	7473 7265 6465 0000 6828 6669 2029 6e69     stered..(hif) in
   1903c:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
   1904c:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   1905c:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   1906c:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   1907c:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
   1908c:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   1909c:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   190ac:	2029 6146 6c69 6465 7420 206f 6552 6461     ) Failed to Read
   190bc:	6920 746e 7265 7572 7470 7220 6765 0000      interrupt reg..
   190cc:	4828 4649 2029 6146 6c69 6465 7420 206f     (HIF) Failed to 
   190dc:	6168 646e 656c 6920 746e 7265 7572 7470     handle interrupt
   190ec:	2520 2c64 6120 6f62 7472 6e69 2067 7564      %d, aborting du
   190fc:	2065 6f74 7420 6f6f 6d20 6e61 2079 6572     e to too many re
   1910c:	7274 6569 0a73 0000 4828 4649 2029 6146     tries...(HIF) Fa
   1911c:	6c69 6465 7420 206f 6168 646e 656c 6920     iled to handle i
   1912c:	746e 7265 7572 7470 2520 2064 7274 2079     nterrupt %d try 
   1913c:	6761 6961 2e6e 2e2e 2820 7525 0a29 0000     again... (%u)...
   1914c:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   1915c:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
   1916c:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   1917c:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   1918c:	206e 6874 2065 6572 6563 7669 6465 6220     n the received b
   1919c:	6675 6566 2072 6973 657a 3c20 7525 3c3e     uffer size <%u><
   191ac:	6c25 3e75 000a 0000 5041 2050 6552 7571     %lu>....APP Requ
   191bc:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   191cc:	6f79 646e 7420 6568 7220 6365 6965 6576     yond the receive
   191dc:	2064 7562 6666 7265 6120 6464 6572 7373     d buffer address
   191ec:	6120 646e 6c20 6e65 7467 0068 5247 2070      and length.GRp 
   191fc:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
   1920c:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
   1921c:	2e2e 002e 4828 4649 4629 6961 656c 2064     ....(HIF)Failed 
   1922c:	6f74 7720 6b61 7565 2070 6874 2065 6863     to wakeup the ch
   1923c:	7069 0000 4948 2046 656d 7373 6761 2065     ip..HIF message 
   1924c:	656c 676e 6874 2820 6425 2029 7865 6563     length (%d) exce
   1925c:	6465 2073 616d 2078 656c 676e 6874 2820     eds max length (
   1926c:	6425 0a29 0000 0000                         %d).....

00019274 <__FUNCTION__.13095>:
   19274:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00019280 <__FUNCTION__.13124>:
   19280:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00019290 <__FUNCTION__.13155>:
   19290:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   192a0:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
   192b0:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
   192c0:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
   192d0:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
   192e0:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
   192f0:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
   19300:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
   19310:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
   19320:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   19330:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   19340:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   19350:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   19360:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
   19370:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
   19380:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
   19390:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
   193a0:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
   193b0:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
   193c0:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
   193d0:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
   193e0:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
   193f0:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
   19400:	3230 313a 3a35 3332 0000 0000 7041 2072     02:15:23....Apr 
   19410:	3033 3220 3130 0039 7244 7669 7265 6220     30 2019.Driver b
   19420:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
   19430:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
   19440:	2065 6556 7372 6f69 006e 0000               e Version...

0001944c <__FUNCTION__.12952>:
   1944c:	6863 7069 775f 6b61 0065 0000               chip_wake...

00019458 <__FUNCTION__.13001>:
   19458:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
   19468:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
   19478:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
   19488:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
   19498:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
   194a8:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
   194b8:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

000194c8 <__FUNCTION__.12999>:
   194c8:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

000194d4 <__FUNCTION__.13006>:
   194d4:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
   194e4:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
   194f4:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
   19504:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
   19514:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
   19524:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
   19534:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
   19544:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
   19554:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
   19564:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   19574:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
   19584:	4920 2044 6c25 0a78 0000 0000 cb08 0000      ID %lx.........
   19594:	cb08 0000 cb38 0000 caba 0000 cade 0000     ....8...........
   195a4:	caec 0000 cb1e 0000 cb1e 0000 cb66 0000     ............f...
   195b4:	ca9e 0000 cba0 0000 cba0 0000 cba0 0000     ................
   195c4:	cba0 0000 cafa 0000 c9c3 cac4               ............

000195d0 <__FUNCTION__.12268>:
   195d0:	7073 5f69 6d63 0064                         spi_cmd.

000195d8 <__FUNCTION__.12275>:
   195d8:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

000195e8 <__FUNCTION__.12284>:
   195e8:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

000195f4 <__FUNCTION__.12300>:
   195f4:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00019604 <__FUNCTION__.12315>:
   19604:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00019614 <__FUNCTION__.12327>:
   19614:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00019624 <__FUNCTION__.12338>:
   19624:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00019634 <__FUNCTION__.12350>:
   19634:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00019644 <__FUNCTION__.12363>:
   19644:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00019650 <__FUNCTION__.12384>:
   19650:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0001965c <crc7_syndrome_table>:
   1965c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   1966c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   1967c:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   1968c:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   1969c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   196ac:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   196bc:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   196cc:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   196dc:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   196ec:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   196fc:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   1970c:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   1971c:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   1972c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   1973c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   1974c:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   1975c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   1976c:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   1977c:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
   1978c:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
   1979c:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
   197ac:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   197bc:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   197cc:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
   197dc:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   197ec:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   197fc:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
   1980c:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   1981c:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   1982c:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   1983c:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
   1984c:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
   1985c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   1986c:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   1987c:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
   1988c:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
   1989c:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   198ac:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
   198bc:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   198cc:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
   198dc:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   198ec:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
   198fc:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
   1990c:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
   1991c:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
   1992c:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
   1993c:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
   1994c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   1995c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   1996c:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
   1997c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   1998c:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   1999c:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   199ac:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   199bc:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   199cc:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   199dc:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
   199ec:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
   199fc:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
   19a0c:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   19a1c:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
   19a2c:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
   19a3c:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   19a4c:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
   19a5c:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19a6c:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   19a7c:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
   19a8c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19a9c:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
   19aac:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
   19abc:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19acc:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   19adc:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   19aec:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
   19afc:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   19b0c:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   19b1c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   19b2c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   19b3c:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   19b4c:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
   19b5c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   19b6c:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
   19b7c:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
   19b8c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   19b9c:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
   19bac:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
   19bbc:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   19bcc:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
   19bdc:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
   19bec:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   19bfc:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
   19c0c:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   19c1c:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   19c2c:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   19c3c:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
   19c4c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19c5c:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
   19c6c:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
   19c7c:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
   19c8c:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   19c9c:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
   19cac:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
   19cbc:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
   19ccc:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   19cdc:	206e 4449 3d20 2520 0d64 000a e564 0000     n ID = %d...d...
   19cec:	e564 0000 e540 0000 e564 0000 e540 0000     d...@...d...@...
   19cfc:	e526 0000 e526 0000 e564 0000 e564 0000     &...&...d...d...
   19d0c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19d1c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19d2c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19d3c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19d4c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19d5c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19d6c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19d7c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19d8c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19d9c:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19dac:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19dbc:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19dcc:	e564 0000 e564 0000 e564 0000 e564 0000     d...d...d...d...
   19ddc:	e564 0000 e564 0000 e564 0000 e540 0000     d...d...d...@...
   19dec:	e540 0000 e548 0000 e548 0000 e548 0000     @...H...H...H...
   19dfc:	e548 0000 0800 4200 0c00 4200 1000 4200     H......B...B...B
   19e0c:	1400 4200 1800 4200 1c00 4200 fa0a 0000     ...B...B...B....
   19e1c:	fa06 0000 fa06 0000 fa6c 0000 fa6c 0000     ........l...l...
   19e2c:	fa1e 0000 fa10 0000 fa24 0000 fa5a 0000     ........$...Z...
   19e3c:	fc2c 0000 fc0c 0000 fc0c 0000 fc98 0000     ,...............
   19e4c:	fc1e 0000 fc3a 0000 fc10 0000 fc48 0000     ....:.......H...
   19e5c:	fc88 0000                                   ....

00019e60 <_tcc_apbcmasks>:
   19e60:	0100 0000 0200 0000 0400 0000               ............

00019e6c <_tcc_cc_nums>:
   19e6c:	0204 0002                                   ....

00019e70 <_tcc_gclk_ids>:
   19e70:	1a1a 001b                                   ....

00019e74 <_tcc_maxs>:
   19e74:	ffff 00ff ffff 00ff ffff 0000               ............

00019e80 <_tcc_ow_nums>:
   19e80:	0408 0002                                   ....

00019e84 <_tcc_intflag>:
   19e84:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   19e94:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   19ea4:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00019eb4 <tcc_interrupt_vectors.12458>:
   19eb4:	100f 0011                                   ....

00019eb8 <LfnOfs>:
   19eb8:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

00019ec8 <excvt.4558>:
   19ec8:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   19ed8:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   19ee8:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   19ef8:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   19f08:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   19f18:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   19f28:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   19f38:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
   19f48:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   19f58:	5d5b 0000                                   []..

00019f5c <Tbl>:
   19f5c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   19f6c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   19f7c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   19f8c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   19f9c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   19fac:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   19fbc:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   19fcc:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   19fdc:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   19fec:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   19ffc:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   1a00c:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   1a01c:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   1a02c:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   1a03c:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   1a04c:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0001a05c <tbl_lower.4308>:
   1a05c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   1a06c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   1a07c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   1a08c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   1a09c:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   1a0ac:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   1a0bc:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   1a0cc:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   1a0dc:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   1a0ec:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   1a0fc:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   1a10c:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   1a11c:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   1a12c:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   1a13c:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   1a14c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   1a15c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   1a16c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   1a17c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   1a18c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   1a19c:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   1a1ac:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   1a1bc:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   1a1cc:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   1a1dc:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   1a1ec:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   1a1fc:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   1a20c:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   1a21c:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   1a22c:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0001a23c <tbl_upper.4309>:
   1a23c:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   1a24c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   1a25c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   1a26c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   1a27c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   1a28c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   1a29c:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   1a2ac:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   1a2bc:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   1a2cc:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   1a2dc:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   1a2ec:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   1a2fc:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   1a30c:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   1a31c:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   1a32c:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   1a33c:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   1a34c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   1a35c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   1a36c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   1a37c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   1a38c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   1a39c:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   1a3ac:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   1a3bc:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   1a3cc:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   1a3dc:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   1a3ec:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   1a3fc:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   1a40c:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   1a41c:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   1a434:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   1a474:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   1a48c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   1a4cc:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   1a4dc:	6568 706c 0000 0000 0a0d 7641 6961 616c     help......Availa
   1a4ec:	6c62 2065 6f43 6d6d 6e61 7364 0d3a 0000     ble Commands:...
   1a4fc:	6576 5f72 6c62 2d20 6220 6f6f 6c74 616f     ver_bl - bootloa
   1a50c:	6564 2072 6576 7372 6f69 0d6e 0000 0000     der version.....
   1a51c:	6576 5f72 7061 2070 202d 7041 6c70 6369     ver_app - Applic
   1a52c:	7461 6f69 206e 6f63 6564 7620 7265 6973     ation code versi
   1a53c:	6e6f 000d 616d 2063 202d 616d 2063 6461     on..mac - mac ad
   1a54c:	7264 7365 0d73 0000 7069 2d20 6920 2070     dress...ip - ip 
   1a55c:	6461 7264 7365 0d73 0000 0000 6564 4e76     address.....devN
   1a56c:	6d61 2065 202d 6564 6576 6f6c 2072 616e     ame - develor na
   1a57c:	656d 000d 6573 4474 7665 6369 4e65 6d61     me..setDeviceNam
   1a58c:	2065 733c 7274 6e69 2067 616e 656d 203e     e <string name> 
   1a59c:	202d 6544 6976 6563 4e20 6d61 2065 6573     - Device Name se
   1a5ac:	0d74 0000 6567 4474 7665 6369 4e65 6d61     t...getDeviceNam
   1a5bc:	2065 202d 6547 2074 6544 6976 6563 4e20     e - Get Device N
   1a5cc:	6d61 0d65 0000 0000 6576 5f72 6c62 0000     ame.....ver_bl..
   1a5dc:	0a0d 6f42 746f 6f6c 6461 7265 4620 7269     ..Bootloader Fir
   1a5ec:	776d 7261 2065 6576 7372 6f69 3a6e 2520     mware version: %
   1a5fc:	2e64 6425 252e 2064 0a0d 0000 6576 5f72     d.%d.%d ....ver_
   1a60c:	7061 0070 0a0d 6f43 6564 4620 7269 776d     app...Code Firmw
   1a61c:	7261 2065 6576 7372 6f69 3a6e 2520 2e64     are version: %d.
   1a62c:	6425 252e 2064 0a0d 0000 0000 616d 0063     %d.%d ......mac.
   1a63c:	0a0d 614d 2063 6441 7264 7365 3a73 4620     ..Mac Address: F
   1a64c:	2d38 3046 302d 2d35 3346 462d 2d39 4539     8-F0-05-F3-F9-9E
   1a65c:	000d 0000 0a0d 5049 4120 6464 6572 7373     ......IP Address
   1a66c:	203a 2e30 2e30 2e30 2030 000d 6564 4e76     : 0.0.0.0 ..devN
   1a67c:	6d61 0065 0a0d 614e 656d 3a20 4420 4c45     ame...Name : DEL
   1a68c:	534f 4920 434e 0d2e 0000 0000 6573 4474     OS INC......setD
   1a69c:	7665 6369 4e65 6d61 0065 0000 0a0d 6544     eviceName.....De
   1a6ac:	6976 6563 6e20 6d61 2065 6573 2074 6f74     vice name set to
   1a6bc:	2520 0d73 000a 0000 6567 4474 7665 6369      %s.....getDevic
   1a6cc:	4e65 6d61 0065 0000 0a0d 6544 6976 6563     eName.....Device
   1a6dc:	6e20 6d61 2065 7369 2520 0d73 000a 0000      name is %s.....
   1a6ec:	6574 706d 6164 6174 0000 0000 450a 746e     tempdata.....Ent
   1a6fc:	7265 5420 6d65 6570 6172 7574 6572 003a     er Temperature:.
   1a70c:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   1a71c:	007d 0000 4554 504d 0000 0000 7865 7469     }...TEMP....exit
   1a72c:	0000 0000 0a0d 6c43 736f 6e69 2067 6c63     ......Closing cl
   1a73c:	2069 2e2e 2e2e 202e 0d0a 0000 0d0a 5245     i ..... ......ER
   1a74c:	4f52 2052 203e 6572 7274 0d79 0000 0000     ROR > retry.....
   1a75c:	5136 0001 5130 0001 512a 0001 5124 0001     6Q..0Q..*Q..$Q..
   1a76c:	513c 0001 5144 0001 513c 0001 511e 0001     <Q..DQ..<Q...Q..
   1a77c:	5118 0001 513c 0001 5112 0001 5112 0001     .Q..<Q...Q...Q..
   1a78c:	510c 0001 5106 0001 5144 0001 51ae 0001     .Q...Q..DQ...Q..
   1a79c:	51a8 0001 51a2 0001 519c 0001 51b4 0001     .Q...Q...Q...Q..
   1a7ac:	51bc 0001 51b4 0001 5196 0001 5190 0001     .Q...Q...Q...Q..
   1a7bc:	51b4 0001 518a 0001 518a 0001 5184 0001     .Q...Q...Q...Q..
   1a7cc:	517e 0001 51bc 0001 5228 0001 5222 0001     ~Q...Q..(R.."R..
   1a7dc:	521c 0001 5216 0001 522e 0001 522e 0001     .R...R...R...R..
   1a7ec:	522e 0001 5210 0001 520a 0001 522e 0001     .R...R...R...R..
   1a7fc:	5204 0001 5204 0001 51fe 0001 51f8 0001     .R...R...Q...Q..
   1a80c:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
   1a81c:	0d31 0000 7254 6e61 6673 7265 452d 636e     1...Transfer-Enc
   1a82c:	646f 6e69 3a67 0020 6f43 6e6e 6365 6974     oding: .Connecti
   1a83c:	6e6f 203a 0000 0000 5448 5054 002f 0000     on: ....HTTP/...
   1a84c:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   1a85c:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   1a86c:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   1a87c:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   1a88c:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   1a89c:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
   1a8ac:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
   1a8bc:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
   1a8cc:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
   1a8dc:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
   1a8ec:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
   1a8fc:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
   1a90c:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
   1a91c:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
   1a92c:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
   1a93c:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
   1a94c:	2800 4200 5c08 0001 5c10 0001 5c1e 0001     .(.B.\...\...\..
   1a95c:	5c56 0001 5c6c 0001 0a0d 2520 2a2e 0073     V\..l\.... %.*s.
   1a96c:	3e20 203e 0000 0000 2e25 732a 0000 0000      >> ....%.*s....
   1a97c:	5453 5241 0054 0000 200a 6f43 6b6f 6e69     START.... Cookin
   1a98c:	2067 7473 7261 6574 0064 0000 200a 6f43     g started.... Co
   1a99c:	6b6f 6e69 2067 7473 706f 6570 0064 0000     oking stopped...
   1a9ac:	4e4b 424f 0000 0000 200a 6e4b 626f 6c20     KNOB..... Knob l
   1a9bc:	7665 6c65 7320 7465 7420 3a6f 6425 0000     evel set to:%d..
   1a9cc:	4954 454d 0000 0000 200a 6954 656d 6c20     TIME..... Time l
   1a9dc:	7665 6c65 7320 7465 7420 3a6f 6425 0000     evel set to:%d..
   1a9ec:	544f 4641 0055 0000 4f0a 4154 5546 5220     OTAFU....OTAFU R
   1a9fc:	7165 6575 7473 6465 0000 0000 7468 7074     equested....http
   1aa0c:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   1aa1c:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   1aa2c:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   1aa3c:	0000 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   1aa4c:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   1aa5c:	2074 6f63 706d 656c 6574 2e64 000d 0000     t completed.....
   1aa6c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   1aa7c:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   1aa8c:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   1aa9c:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   1aaac:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   1aabc:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   1aacc:	6572 7361 6e6f 253a 0d64 000a 0a0d 2d2d     reason:%d.....--
   1aadc:	4920 544f 5320 414d 5452 4b20 4f4e 2042      IOT SMART KNOB 
   1aaec:	4f43 544e 4f52 4c4c 5245 2d20 0d2d 2d0a     CONTROLLER --..-
   1aafc:	202d 4544 4f4c 2053 4e49 2e43 6f20 206e     - DELOS INC. on 
   1ab0c:	4153 444d 3132 3147 4138 4d20 5543 2d20     SAMD21G18A MCU -
   1ab1c:	0d2d 2d0a 202d 6f43 706d 6c69 6465 203a     -..-- Compiled: 
   1ab2c:	7041 2072 3033 3220 3130 2039 3230 313a     Apr 30 2019 02:1
   1ab3c:	3a35 3433 2d20 0d2d 0000 0000 0a0d 616d     5:34 --.......ma
   1ab4c:	6e69 203a 6e49 7469 6169 696c 697a 676e     in: Initializing
   1ab5c:	4220 616f 6472 6120 646e 7020 7265 7069      Board and perip
   1ab6c:	6568 6172 736c 6620 726f 6120 7070 696c     herals for appli
   1ab7c:	6163 6974 6e6f 2e2e 2e2e 2e2e 0d20 0d0a     cation...... ...
   1ab8c:	0000 0000 6f63 666e 6769 7275 5f65 7468     ....configure_ht
   1ab9c:	7074 635f 696c 6e65 3a74 4820 5454 2050     tp_client: HTTP 
   1abac:	6c63 6569 746e 6920 696e 6974 6c61 7a69     client initializ
   1abbc:	7461 6f69 206e 6166 6c69 6465 2021 7228     ation failed! (r
   1abcc:	7365 2520 2964 0a0d 0000 0000 514d 5454     es %d)......MQTT
   1abdc:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   1abec:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   1abfc:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   1ac0c:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   1ac1c:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   1ac2c:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   1ac3c:	0d29 000a 6e69 7469 735f 6f74 6172 6567     )...init_storage
   1ac4c:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   1ac5c:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   1ac6c:	6c73 746f 2e2e 0d2e 0000 0000 6e69 7469     slot........init
   1ac7c:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   1ac8c:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   1ac9c:	0d2e 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   1acac:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   1acbc:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   1accc:	2e64 000d 6e69 7469 735f 6f74 6172 6567     d...init_storage
   1acdc:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   1acec:	6472 2e2e 0d2e 0000 6e69 7469 735f 6f74     rd......init_sto
   1acfc:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   1ad0c:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   1ad1c:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   1ad2c:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   1ad3c:	6e75 2074 4b4f 0d2e 0000 0000 616d 6e69     unt OK......main
   1ad4c:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   1ad5c:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   1ad6c:	2520 2964 0a0d 0000 0d0a 616d 6e69 203a      %d)......main: 
   1ad7c:	3e3e 4220 616f 6472 6120 646e 7020 7265     >> Board and per
   1ad8c:	7069 6568 6172 736c 6920 696e 6974 6c61     ipherals initial
   1ad9c:	7a69 6465 0d0a 0000 616d 6e69 203a 6f63     ized....main: co
   1adac:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   1adbc:	4120 2050 7325 2e2e 0d2e 000a 4c43 2049      AP %s......CLI 
   1adcc:	6f63 6d6d 6e61 2064 696c 656e 6120 7463     command line act
   1addc:	7669 2065 0d0a 7420 7079 2065 6827 6c65     ive .. type 'hel
   1adec:	2770 6620 726f 7420 6568 6320 6d6f 616d     p' for the comma
   1adfc:	646e 6c20 7369 0a74 000d 0000 6564 6f6c     nd list.....delo
   1ae0c:	5f73 6e69 2063 203e 0000 0000 4c43 2049     s_inc > ....CLI 
   1ae1c:	7845 7469 6465 0a20 000d 0000 5245 3e52     Exited .....ERR>
   1ae2c:	203e 7953 7473 6369 206b 6f63 666e 6769     > Systick config
   1ae3c:	7275 7461 6f69 206e 7265 6f72 0d72 000a     uration error...

0001ae4c <main_mqtt_broker>:
   1ae4c:	316d 2e36 6c63 756f 6d64 7471 2e74 6f63     m16.cloudmqtt.co
   1ae5c:	006d 0000 0a0d 6f43 6e6e 6365 6974 676e     m.....Connecting
   1ae6c:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   1ae7c:	384b 5256 7648 655f 4b79 6e37 0000 0000     K8VRHv_eyK7n....
   1ae8c:	786d 6463 7069 6879 0000 0000 514d 5454     mxcdipyh....MQTT
   1ae9c:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   1aeac:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   1aebc:	0d72 0000 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   1aecc:	6465 7420 206f 7262 6b6f 7265 000d 0000     ed to broker....
   1aedc:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   1aeec:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   1aefc:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   1af0c:	796c 0d2e 000a 0000 514d 5454 4320 6e6f     ly......MQTT Con
   1af1c:	656e 7463 6465 000d 514d 5454 6220 6f72     nected..MQTT bro
   1af2c:	656b 2072 6564 6c63 6e69 2065 6f79 7275     ker decline your
   1af3c:	6120 6363 7365 2173 6520 7272 726f 6320      access! error c
   1af4c:	646f 2065 6425 0a0d 0000 0000 514d 5454     ode %d......MQTT
   1af5c:	6420 7369 6f63 6e6e 6365 6574 0d64 0000      disconnected...
   1af6c:	3e3e 4e20 7765 4620 7269 776d 7261 2065     >> New Firmware 
   1af7c:	6f44 6e77 6f6c 6461 6465 0a20 200d 6544     Downloaded .. De
   1af8c:	6976 6563 5220 7365 7465 6e69 2067 2e2e     vice Reseting ..
   1af9c:	2e2e 0a20 000d 0000 746f 6661 5f75 6f64     .. .....otafu_do
   1afac:	6e77 6f6c 6461 203a 6f44 6e77 6f6c 6461     wnload: Download
   1afbc:	6e69 2067 7075 6164 6574 7620 7265 6973     ing update versi
   1afcc:	6e6f 2e20 2e2e 2e2e 0a20 000d 746f 6661     on ..... ...otaf
   1afdc:	5f75 6f64 6e77 6f6c 6461 203a 3e3e 5220     u_download: >> R
   1afec:	7365 6d75 6e69 2067 7061 6c70 6369 7461     esuming applicat
   1affc:	6f69 0a6e 000d 0000 746f 6661 5f75 6f64     ion.....otafu_do
   1b00c:	6e77 6f6c 6461 203a 654e 2077 6946 6d72     wnload: New Firm
   1b01c:	6177 6572 4120 6176 6c69 6261 656c 202c     ware Available, 
   1b02c:	6576 7372 6f69 3a6e 2520 2064 0d0a 0000     version: %d ....
   1b03c:	6f57 6c75 2064 6f79 2075 696c 656b 7420     Would you like t
   1b04c:	206f 6f64 6e77 6f6c 6461 7420 6568 6e20     o download the n
   1b05c:	7765 7620 7265 6973 6e6f 203a 7928 6e2f     ew version: (y/n
   1b06c:	2029 203e 0000 0000 6325 0000 6325 0d0a     ) > ....%c..%c..
   1b07c:	0000 0000 746f 6661 5f75 6f64 6e77 6f6c     ....otafu_downlo
   1b08c:	6461 203a 7461 6574 706d 2074 255b 5d64     ad: attempt [%d]
   1b09c:	3e20 4420 776f 6c6e 616f 6964 676e 6620      > Downloading f
   1b0ac:	6961 656c 2c64 7420 7972 6e69 2067 6761     ailed, trying ag
   1b0bc:	6961 206e 0d0a 0000 746f 6661 5f75 6f64     ain ....otafu_do
   1b0cc:	6e77 6f6c 6461 203a 3e3e 4420 776f 6c6e     wnload: >> Downl
   1b0dc:	616f 6964 676e 6620 6961 656c 2064 7665     oading failed ev
   1b0ec:	6e65 6120 7466 7265 6d20 6c75 6974 6c70     en after multipl
   1b0fc:	2065 7461 6574 706d 7374 0d0a 0000 0000     e attempts......
   1b10c:	746f 6661 5f75 6f64 6e77 6f6c 6461 203a     otafu_download: 
   1b11c:	3e3e 5220 7365 6d75 6e69 2067 7061 6c70     >> Resuming appl
   1b12c:	6369 7461 6f69 206e 6f66 2072 6f6e 0a77     ication for now.
   1b13c:	000d 0000 6e69 6176 696c 2064 6572 7073     ....invalid resp
   1b14c:	6e6f 6573 202c 6c70 6165 6573 7420 7972     onse, please try
   1b15c:	6120 6167 6e69 0d0a 0000 0000 7468 7074      again......http
   1b16c:	3a73 2f2f 7777 2e77 6573 7361 752e 6570     s://www.seas.upe
   1b17c:	6e6e 652e 7564 7e2f 6774 6568 6164 6f6f     nn.edu/~tghedaoo
   1b18c:	562f 7265 6973 6e6f 742e 7478 0000 0000     /Version.txt....
   1b19c:	7468 7074 3a73 2f2f 7777 2e77 6573 7361     https://www.seas
   1b1ac:	752e 6570 6e6e 652e 7564 7e2f 6774 6568     .upenn.edu/~tghe
   1b1bc:	6164 6f6f 462f 7269 776d 7261 2e65 6962     daoo/Firmware.bi
   1b1cc:	006e 0000 7468 7074 3a73 2f2f 7777 2e77     n...https://www.
   1b1dc:	6573 7361 752e 6570 6e6e 652e 7564 7e2f     seas.upenn.edu/~
   1b1ec:	6774 6568 6164 6f6f 432f 6372 742e 7478     tghedaoo/Crc.txt
   1b1fc:	0000 0000 746f 6661 5f75 6966 6d72 6177     ....otafu_firmwa
   1b20c:	6572 645f 776f 6c6e 616f 3a64 4420 776f     re_download: Dow
   1b21c:	6c6e 616f 6964 676e 6e20 7765 6620 7269     nloading new fir
   1b22c:	776d 7261 2065 2e2e 2e2e 2e2e 0a20 000d     mware ...... ...
   1b23c:	6473 6f20 6570 6172 6974 6e6f 203a 3e3e     sd operation: >>
   1b24c:	4f20 6570 696e 676e 6120 6620 6c69 2065      Opening a file 
   1b25c:	6166 6c69 6465 0d0a 0000 0000 6473 6f20     failed......sd o
   1b26c:	6570 6172 6974 6e6f 203a 3e3e 4620 6c69     peration: >> Fil
   1b27c:	2065 706f 6e65 7320 6375 6563 7373 0d0a     e open success..
   1b28c:	0000 0000 5243 5f43 4f44 4e57 3d20 2520     ....CRC_DOWN = %
   1b29c:	0a75 000d 5243 5f43 4553 5652 5245 3d20     u...CRC_SERVER =
   1b2ac:	2520 0a75 000d 0000 746f 6661 5f75 6576      %u.....otafu_ve
   1b2bc:	7372 6f69 5f6e 6863 6365 3a6b 4320 6568     rsion_check: Che
   1b2cc:	6b63 6e69 2067 6f66 2072 656e 2077 6556     cking for new Ve
   1b2dc:	7372 6f69 206e 2e2e 2e2e 2e2e 0a20 000d     rsion ...... ...
   1b2ec:	746f 6661 5f75 6576 7372 6f69 5f6e 6863     otafu_version_ch
   1b2fc:	6365 3a6b 5620 7265 6973 6e6f 4420 6669     eck: Version Dif
   1b30c:	6566 6572 746e 202c 7257 7469 6e69 2067     ferent, Writing 
   1b31c:	656e 2077 6f63 6564 2e20 2e2e 2e2e 0a20     new code ..... .
   1b32c:	000d 0000 746f 6661 5f75 6576 7372 6f69     ....otafu_versio
   1b33c:	5f6e 6863 6365 3a6b 3e20 203e 6556 7372     n_check: >> Vers
   1b34c:	6f69 206e 6153 656d 6f20 2072 7543 7272     ion Same or Curr
   1b35c:	6e65 2074 6576 7372 6f69 206e 7369 6c20     ent version is l
   1b36c:	7461 7365 0a74 000d 3025 6433 0000 0000     atest...%03d....
   1b37c:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
   1b38c:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
   1b39c:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
   1b3ac:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   1b3bc:	4d4d 2043 7473 726f 6761 2065 6f6e 2074     MMC storage not 
   1b3cc:	6572 6461 2e79 000d 7473 7261 5f74 6f64     ready...start_do
   1b3dc:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   1b3ec:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   1b3fc:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   1b40c:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   1b41c:	6e65 2074 6c61 6572 6461 2e79 000d 0000     ent already.....
   1b42c:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   1b43c:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   1b44c:	6120 726c 6165 7964 0d2e 0000 7473 7261      already....star
   1b45c:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   1b46c:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   1b47c:	2e2e 0d2e 0000 0000 7473 726f 5f65 6966     ........store_fi
   1b48c:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   1b49c:	6420 7461 2e61 000d 7473 726f 5f65 6966      data...store_fi
   1b4ac:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   1b4bc:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   1b4cc:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1b4dc:	3a74 6620 6c69 2065 616e 656d 6920 2073     t: file name is 
   1b4ec:	6e69 6176 696c 2e64 4420 776f 6c6e 616f     invalid. Downloa
   1b4fc:	2064 6163 636e 6c65 6465 0d2e 0000 0000     d canceled......
   1b50c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1b51c:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   1b52c:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   1b53c:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   1b54c:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   1b55c:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   1b56c:	2064 6163 636e 6c65 6465 0d2e 0000 0000     d canceled......
   1b57c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1b58c:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   1b59c:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   1b5ac:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   1b5bc:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   1b5cc:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   1b5dc:	6c6c 2e79 000d 0000 6977 6966 635f 3a62     lly.....wifi_cb:
   1b5ec:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   1b5fc:	4554 0d44 0000 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   1b60c:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   1b61c:	454e 5443 4445 000d 656e 7774 6e61 6574     NECTED..netwante
   1b62c:	0064 0000 4754 3148 0000 0000 6977 6966     d...TGH1....wifi
   1b63c:	635f 3a62 4920 2050 6461 7264 7365 2073     _cb: IP address 
   1b64c:	7369 2520 2e75 7525 252e 2e75 7525 0a0d     is %u.%u.%u.%u..
   1b65c:	0000 0000 7245 6f72 2072 6f63 6e6e 6365     ....Error connec
   1b66c:	6974 676e 7420 206f 514d 5454 4220 6f72     ting to MQTT Bro
   1b67c:	656b 2172 000d 0000                         ker!....

0001b684 <_global_impure_ptr>:
   1b684:	0180 2000                                   ... 

0001b688 <__sf_fake_stderr>:
	...

0001b6a8 <__sf_fake_stdin>:
	...

0001b6c8 <__sf_fake_stdout>:
	...
   1b6e8:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   1b6f8:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   1b708:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   1b718:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
   1b728:	b746 0001 b749 0001 b74c 0001 2d41 6146     F...I...L...A-Fa
   1b738:	662d 3938 3130 3332 3534 3736 005d 2d2b     -f8901234567].+-
   1b748:	3000 0030 5878 0000                              .00.xX.

0001b74f <_ctype_>:
   1b74f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   1b75f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1b76f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   1b77f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   1b78f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   1b79f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   1b7af:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   1b7bf:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   1b7cf:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0001b850 <_init>:
   1b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b852:	46c0      	nop			; (mov r8, r8)
   1b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b856:	bc08      	pop	{r3}
   1b858:	469e      	mov	lr, r3
   1b85a:	4770      	bx	lr

0001b85c <__init_array_start>:
   1b85c:	00009cdd 	.word	0x00009cdd

0001b860 <_fini>:
   1b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b862:	46c0      	nop			; (mov r8, r8)
   1b864:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b866:	bc08      	pop	{r3}
   1b868:	469e      	mov	lr, r3
   1b86a:	4770      	bx	lr

0001b86c <__fini_array_start>:
   1b86c:	00009cb5 	.word	0x00009cb5
