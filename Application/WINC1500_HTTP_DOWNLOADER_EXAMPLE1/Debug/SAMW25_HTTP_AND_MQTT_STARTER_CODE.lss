
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000142bc  00009c00  00009c00  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000350  20000000  0001debc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001160  20000350  0001e20c  00020350  2**2
                  ALLOC
  3 .stack        00002000  200014b0  0001f36c  00020350  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
  6 .debug_info   000909f5  00000000  00000000  000203d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000d74f  00000000  00000000  000b0dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00024b3f  00000000  00000000  000be515  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001970  00000000  00000000  000e3054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002448  00000000  00000000  000e49c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002c3c8  00000000  00000000  000e6e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002e8a8  00000000  00000000  001131d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a2058  00000000  00000000  00141a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005958  00000000  00000000  001e3ad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00009c00 <exception_table>:
    9c00:	b0 34 00 20 75 11 01 00 71 11 01 00 71 11 01 00     .4. u...q...q...
	...
    9c2c:	71 11 01 00 00 00 00 00 00 00 00 00 71 11 01 00     q...........q...
    9c3c:	21 3c 01 00 71 11 01 00 71 11 01 00 71 11 01 00     !<..q...q...q...
    9c4c:	81 f2 00 00 69 ec 00 00 71 11 01 00 71 11 01 00     ....i...q...q...
    9c5c:	71 11 01 00 71 11 01 00 a9 f6 00 00 b9 f6 00 00     q...q...........
    9c6c:	c9 f6 00 00 d9 f6 00 00 e9 f6 00 00 f9 f6 00 00     ................
    9c7c:	41 11 01 00 51 11 01 00 61 11 01 00 71 11 01 00     A...Q...a...q...
    9c8c:	71 11 01 00 71 11 01 00 00 00 00 00 00 00 00 00     q...q...........
    9c9c:	71 11 01 00 71 11 01 00 71 11 01 00 71 11 01 00     q...q...q...q...
    9cac:	71 11 01 00 00 00 00 00                             q.......

00009cb4 <__do_global_dtors_aux>:
    9cb4:	b510      	push	{r4, lr}
    9cb6:	4c06      	ldr	r4, [pc, #24]	; (9cd0 <__do_global_dtors_aux+0x1c>)
    9cb8:	7823      	ldrb	r3, [r4, #0]
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d107      	bne.n	9cce <__do_global_dtors_aux+0x1a>
    9cbe:	4b05      	ldr	r3, [pc, #20]	; (9cd4 <__do_global_dtors_aux+0x20>)
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d002      	beq.n	9cca <__do_global_dtors_aux+0x16>
    9cc4:	4804      	ldr	r0, [pc, #16]	; (9cd8 <__do_global_dtors_aux+0x24>)
    9cc6:	e000      	b.n	9cca <__do_global_dtors_aux+0x16>
    9cc8:	bf00      	nop
    9cca:	2301      	movs	r3, #1
    9ccc:	7023      	strb	r3, [r4, #0]
    9cce:	bd10      	pop	{r4, pc}
    9cd0:	20000350 	.word	0x20000350
    9cd4:	00000000 	.word	0x00000000
    9cd8:	0001debc 	.word	0x0001debc

00009cdc <frame_dummy>:
    9cdc:	4b08      	ldr	r3, [pc, #32]	; (9d00 <frame_dummy+0x24>)
    9cde:	b510      	push	{r4, lr}
    9ce0:	2b00      	cmp	r3, #0
    9ce2:	d003      	beq.n	9cec <frame_dummy+0x10>
    9ce4:	4907      	ldr	r1, [pc, #28]	; (9d04 <frame_dummy+0x28>)
    9ce6:	4808      	ldr	r0, [pc, #32]	; (9d08 <frame_dummy+0x2c>)
    9ce8:	e000      	b.n	9cec <frame_dummy+0x10>
    9cea:	bf00      	nop
    9cec:	4807      	ldr	r0, [pc, #28]	; (9d0c <frame_dummy+0x30>)
    9cee:	6803      	ldr	r3, [r0, #0]
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	d100      	bne.n	9cf6 <frame_dummy+0x1a>
    9cf4:	bd10      	pop	{r4, pc}
    9cf6:	4b06      	ldr	r3, [pc, #24]	; (9d10 <frame_dummy+0x34>)
    9cf8:	2b00      	cmp	r3, #0
    9cfa:	d0fb      	beq.n	9cf4 <frame_dummy+0x18>
    9cfc:	4798      	blx	r3
    9cfe:	e7f9      	b.n	9cf4 <frame_dummy+0x18>
    9d00:	00000000 	.word	0x00000000
    9d04:	20000354 	.word	0x20000354
    9d08:	0001debc 	.word	0x0001debc
    9d0c:	0001debc 	.word	0x0001debc
    9d10:	00000000 	.word	0x00000000

00009d14 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    9d14:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d16:	46d6      	mov	lr, sl
    9d18:	464f      	mov	r7, r9
    9d1a:	4646      	mov	r6, r8
    9d1c:	b5c0      	push	{r6, r7, lr}
    9d1e:	b08a      	sub	sp, #40	; 0x28
    9d20:	0006      	movs	r6, r0
    9d22:	000f      	movs	r7, r1
    9d24:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    9d26:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9d28:	0008      	movs	r0, r1
    9d2a:	4ba0      	ldr	r3, [pc, #640]	; (9fac <i2c_master_init+0x298>)
    9d2c:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    9d2e:	4aa0      	ldr	r2, [pc, #640]	; (9fb0 <i2c_master_init+0x29c>)
    9d30:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    9d32:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    9d34:	2301      	movs	r3, #1
    9d36:	40ab      	lsls	r3, r5
    9d38:	430b      	orrs	r3, r1
    9d3a:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    9d3c:	a909      	add	r1, sp, #36	; 0x24
    9d3e:	7b23      	ldrb	r3, [r4, #12]
    9d40:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    9d42:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    9d44:	b2c5      	uxtb	r5, r0
    9d46:	0028      	movs	r0, r5
    9d48:	4b9a      	ldr	r3, [pc, #616]	; (9fb4 <i2c_master_init+0x2a0>)
    9d4a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9d4c:	0028      	movs	r0, r5
    9d4e:	4b9a      	ldr	r3, [pc, #616]	; (9fb8 <i2c_master_init+0x2a4>)
    9d50:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    9d52:	7b20      	ldrb	r0, [r4, #12]
    9d54:	2100      	movs	r1, #0
    9d56:	4b99      	ldr	r3, [pc, #612]	; (9fbc <i2c_master_init+0x2a8>)
    9d58:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    9d5a:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    9d5c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    9d5e:	079b      	lsls	r3, r3, #30
    9d60:	d505      	bpl.n	9d6e <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    9d62:	b00a      	add	sp, #40	; 0x28
    9d64:	bc1c      	pop	{r2, r3, r4}
    9d66:	4690      	mov	r8, r2
    9d68:	4699      	mov	r9, r3
    9d6a:	46a2      	mov	sl, r4
    9d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    9d6e:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    9d70:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    9d72:	07db      	lsls	r3, r3, #31
    9d74:	d4f5      	bmi.n	9d62 <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    9d76:	6830      	ldr	r0, [r6, #0]
    9d78:	4b8c      	ldr	r3, [pc, #560]	; (9fac <i2c_master_init+0x298>)
    9d7a:	4699      	mov	r9, r3
    9d7c:	4798      	blx	r3
    9d7e:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    9d80:	498f      	ldr	r1, [pc, #572]	; (9fc0 <i2c_master_init+0x2ac>)
    9d82:	4b90      	ldr	r3, [pc, #576]	; (9fc4 <i2c_master_init+0x2b0>)
    9d84:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    9d86:	00ad      	lsls	r5, r5, #2
    9d88:	4b8f      	ldr	r3, [pc, #572]	; (9fc8 <i2c_master_init+0x2b4>)
    9d8a:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    9d8c:	2300      	movs	r3, #0
    9d8e:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    9d90:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    9d92:	2500      	movs	r5, #0
    9d94:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    9d96:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    9d98:	2225      	movs	r2, #37	; 0x25
    9d9a:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    9d9c:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    9d9e:	3314      	adds	r3, #20
    9da0:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    9da2:	6833      	ldr	r3, [r6, #0]
    9da4:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    9da6:	0018      	movs	r0, r3
    9da8:	47c8      	blx	r9
    9daa:	4681      	mov	r9, r0
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9dac:	2380      	movs	r3, #128	; 0x80
    9dae:	aa08      	add	r2, sp, #32
    9db0:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9db2:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9db4:	2301      	movs	r3, #1
    9db6:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    9db8:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    9dba:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    9dbc:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    9dbe:	2800      	cmp	r0, #0
    9dc0:	d100      	bne.n	9dc4 <i2c_master_init+0xb0>
    9dc2:	e0af      	b.n	9f24 <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
    9dc4:	ab08      	add	r3, sp, #32
    9dc6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    9dc8:	2302      	movs	r3, #2
    9dca:	aa08      	add	r2, sp, #32
    9dcc:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    9dce:	0c00      	lsrs	r0, r0, #16
    9dd0:	b2c0      	uxtb	r0, r0
    9dd2:	0011      	movs	r1, r2
    9dd4:	4b7d      	ldr	r3, [pc, #500]	; (9fcc <i2c_master_init+0x2b8>)
    9dd6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    9dd8:	2f00      	cmp	r7, #0
    9dda:	d100      	bne.n	9dde <i2c_master_init+0xca>
    9ddc:	e0a7      	b.n	9f2e <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
    9dde:	ab08      	add	r3, sp, #32
    9de0:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    9de2:	2302      	movs	r3, #2
    9de4:	aa08      	add	r2, sp, #32
    9de6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    9de8:	0c3f      	lsrs	r7, r7, #16
    9dea:	b2f8      	uxtb	r0, r7
    9dec:	0011      	movs	r1, r2
    9dee:	4b77      	ldr	r3, [pc, #476]	; (9fcc <i2c_master_init+0x2b8>)
    9df0:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    9df2:	8aa3      	ldrh	r3, [r4, #20]
    9df4:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    9df6:	8ae3      	ldrh	r3, [r4, #22]
    9df8:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    9dfa:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    9dfc:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    9dfe:	2b00      	cmp	r3, #0
    9e00:	d104      	bne.n	9e0c <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    9e02:	4b73      	ldr	r3, [pc, #460]	; (9fd0 <i2c_master_init+0x2bc>)
    9e04:	789b      	ldrb	r3, [r3, #2]
    9e06:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    9e08:	0fdb      	lsrs	r3, r3, #31
    9e0a:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    9e0c:	68a1      	ldr	r1, [r4, #8]
    9e0e:	6923      	ldr	r3, [r4, #16]
    9e10:	430b      	orrs	r3, r1
    9e12:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    9e14:	2224      	movs	r2, #36	; 0x24
    9e16:	5ca2      	ldrb	r2, [r4, r2]
    9e18:	2a00      	cmp	r2, #0
    9e1a:	d002      	beq.n	9e22 <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    9e1c:	2280      	movs	r2, #128	; 0x80
    9e1e:	05d2      	lsls	r2, r2, #23
    9e20:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    9e22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9e24:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    9e26:	222c      	movs	r2, #44	; 0x2c
    9e28:	5ca2      	ldrb	r2, [r4, r2]
    9e2a:	2a00      	cmp	r2, #0
    9e2c:	d103      	bne.n	9e36 <i2c_master_init+0x122>
    9e2e:	2280      	movs	r2, #128	; 0x80
    9e30:	0492      	lsls	r2, r2, #18
    9e32:	4291      	cmp	r1, r2
    9e34:	d102      	bne.n	9e3c <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    9e36:	2280      	movs	r2, #128	; 0x80
    9e38:	0512      	lsls	r2, r2, #20
    9e3a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    9e3c:	222d      	movs	r2, #45	; 0x2d
    9e3e:	5ca2      	ldrb	r2, [r4, r2]
    9e40:	2a00      	cmp	r2, #0
    9e42:	d002      	beq.n	9e4a <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    9e44:	2280      	movs	r2, #128	; 0x80
    9e46:	0412      	lsls	r2, r2, #16
    9e48:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    9e4a:	222e      	movs	r2, #46	; 0x2e
    9e4c:	5ca2      	ldrb	r2, [r4, r2]
    9e4e:	2a00      	cmp	r2, #0
    9e50:	d002      	beq.n	9e58 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    9e52:	2280      	movs	r2, #128	; 0x80
    9e54:	03d2      	lsls	r2, r2, #15
    9e56:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    9e58:	4642      	mov	r2, r8
    9e5a:	6812      	ldr	r2, [r2, #0]
    9e5c:	4313      	orrs	r3, r2
    9e5e:	4642      	mov	r2, r8
    9e60:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    9e62:	2380      	movs	r3, #128	; 0x80
    9e64:	005b      	lsls	r3, r3, #1
    9e66:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    9e68:	4648      	mov	r0, r9
    9e6a:	3014      	adds	r0, #20
    9e6c:	b2c0      	uxtb	r0, r0
    9e6e:	4b59      	ldr	r3, [pc, #356]	; (9fd4 <i2c_master_init+0x2c0>)
    9e70:	4798      	blx	r3
    9e72:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    9e74:	23fa      	movs	r3, #250	; 0xfa
    9e76:	009b      	lsls	r3, r3, #2
    9e78:	6822      	ldr	r2, [r4, #0]
    9e7a:	435a      	muls	r2, r3
    9e7c:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    9e7e:	6863      	ldr	r3, [r4, #4]
    9e80:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    9e82:	4d55      	ldr	r5, [pc, #340]	; (9fd8 <i2c_master_init+0x2c4>)
    9e84:	47a8      	blx	r5
    9e86:	9000      	str	r0, [sp, #0]
    9e88:	9101      	str	r1, [sp, #4]
    9e8a:	464b      	mov	r3, r9
    9e8c:	0058      	lsls	r0, r3, #1
    9e8e:	47a8      	blx	r5
    9e90:	9002      	str	r0, [sp, #8]
    9e92:	9103      	str	r1, [sp, #12]
    9e94:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    9e96:	47a8      	blx	r5
    9e98:	9004      	str	r0, [sp, #16]
    9e9a:	9105      	str	r1, [sp, #20]
    9e9c:	4f4f      	ldr	r7, [pc, #316]	; (9fdc <i2c_master_init+0x2c8>)
    9e9e:	4a50      	ldr	r2, [pc, #320]	; (9fe0 <i2c_master_init+0x2cc>)
    9ea0:	4b50      	ldr	r3, [pc, #320]	; (9fe4 <i2c_master_init+0x2d0>)
    9ea2:	9800      	ldr	r0, [sp, #0]
    9ea4:	9901      	ldr	r1, [sp, #4]
    9ea6:	47b8      	blx	r7
    9ea8:	0002      	movs	r2, r0
    9eaa:	000b      	movs	r3, r1
    9eac:	9804      	ldr	r0, [sp, #16]
    9eae:	9905      	ldr	r1, [sp, #20]
    9eb0:	47b8      	blx	r7
    9eb2:	4e4d      	ldr	r6, [pc, #308]	; (9fe8 <i2c_master_init+0x2d4>)
    9eb4:	2200      	movs	r2, #0
    9eb6:	4b4d      	ldr	r3, [pc, #308]	; (9fec <i2c_master_init+0x2d8>)
    9eb8:	47b0      	blx	r6
    9eba:	9004      	str	r0, [sp, #16]
    9ebc:	9105      	str	r1, [sp, #20]
    9ebe:	4648      	mov	r0, r9
    9ec0:	47a8      	blx	r5
    9ec2:	0002      	movs	r2, r0
    9ec4:	000b      	movs	r3, r1
    9ec6:	9804      	ldr	r0, [sp, #16]
    9ec8:	9905      	ldr	r1, [sp, #20]
    9eca:	47b8      	blx	r7
    9ecc:	0002      	movs	r2, r0
    9ece:	000b      	movs	r3, r1
    9ed0:	4d47      	ldr	r5, [pc, #284]	; (9ff0 <i2c_master_init+0x2dc>)
    9ed2:	9800      	ldr	r0, [sp, #0]
    9ed4:	9901      	ldr	r1, [sp, #4]
    9ed6:	47a8      	blx	r5
    9ed8:	9a02      	ldr	r2, [sp, #8]
    9eda:	9b03      	ldr	r3, [sp, #12]
    9edc:	47b0      	blx	r6
    9ede:	2200      	movs	r2, #0
    9ee0:	4b44      	ldr	r3, [pc, #272]	; (9ff4 <i2c_master_init+0x2e0>)
    9ee2:	47a8      	blx	r5
    9ee4:	9a02      	ldr	r2, [sp, #8]
    9ee6:	9b03      	ldr	r3, [sp, #12]
    9ee8:	4d43      	ldr	r5, [pc, #268]	; (9ff8 <i2c_master_init+0x2e4>)
    9eea:	47a8      	blx	r5
    9eec:	4b43      	ldr	r3, [pc, #268]	; (9ffc <i2c_master_init+0x2e8>)
    9eee:	4798      	blx	r3
    9ef0:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    9ef2:	2380      	movs	r3, #128	; 0x80
    9ef4:	049b      	lsls	r3, r3, #18
    9ef6:	68a2      	ldr	r2, [r4, #8]
    9ef8:	429a      	cmp	r2, r3
    9efa:	d01e      	beq.n	9f3a <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    9efc:	0003      	movs	r3, r0
    9efe:	2040      	movs	r0, #64	; 0x40
    9f00:	2dff      	cmp	r5, #255	; 0xff
    9f02:	d900      	bls.n	9f06 <i2c_master_init+0x1f2>
    9f04:	e72d      	b.n	9d62 <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    9f06:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    9f08:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    9f0a:	25ff      	movs	r5, #255	; 0xff
    9f0c:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    9f0e:	0624      	lsls	r4, r4, #24
    9f10:	4325      	orrs	r5, r4
    9f12:	0400      	lsls	r0, r0, #16
    9f14:	23ff      	movs	r3, #255	; 0xff
    9f16:	041b      	lsls	r3, r3, #16
    9f18:	4018      	ands	r0, r3
    9f1a:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    9f1c:	4643      	mov	r3, r8
    9f1e:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    9f20:	2000      	movs	r0, #0
    9f22:	e71e      	b.n	9d62 <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    9f24:	2100      	movs	r1, #0
    9f26:	4640      	mov	r0, r8
    9f28:	4b35      	ldr	r3, [pc, #212]	; (a000 <i2c_master_init+0x2ec>)
    9f2a:	4798      	blx	r3
    9f2c:	e74a      	b.n	9dc4 <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    9f2e:	2101      	movs	r1, #1
    9f30:	4640      	mov	r0, r8
    9f32:	4b33      	ldr	r3, [pc, #204]	; (a000 <i2c_master_init+0x2ec>)
    9f34:	4798      	blx	r3
    9f36:	0007      	movs	r7, r0
    9f38:	e751      	b.n	9dde <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    9f3a:	26fa      	movs	r6, #250	; 0xfa
    9f3c:	00b6      	lsls	r6, r6, #2
    9f3e:	4653      	mov	r3, sl
    9f40:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    9f42:	9800      	ldr	r0, [sp, #0]
    9f44:	9901      	ldr	r1, [sp, #4]
    9f46:	0002      	movs	r2, r0
    9f48:	000b      	movs	r3, r1
    9f4a:	4c27      	ldr	r4, [pc, #156]	; (9fe8 <i2c_master_init+0x2d4>)
    9f4c:	47a0      	blx	r4
    9f4e:	9000      	str	r0, [sp, #0]
    9f50:	9101      	str	r1, [sp, #4]
    9f52:	0030      	movs	r0, r6
    9f54:	4b20      	ldr	r3, [pc, #128]	; (9fd8 <i2c_master_init+0x2c4>)
    9f56:	4798      	blx	r3
    9f58:	2200      	movs	r2, #0
    9f5a:	4b2a      	ldr	r3, [pc, #168]	; (a004 <i2c_master_init+0x2f0>)
    9f5c:	47b8      	blx	r7
    9f5e:	0002      	movs	r2, r0
    9f60:	000b      	movs	r3, r1
    9f62:	9800      	ldr	r0, [sp, #0]
    9f64:	9901      	ldr	r1, [sp, #4]
    9f66:	4c24      	ldr	r4, [pc, #144]	; (9ff8 <i2c_master_init+0x2e4>)
    9f68:	47a0      	blx	r4
    9f6a:	2200      	movs	r2, #0
    9f6c:	4b21      	ldr	r3, [pc, #132]	; (9ff4 <i2c_master_init+0x2e0>)
    9f6e:	4c20      	ldr	r4, [pc, #128]	; (9ff0 <i2c_master_init+0x2dc>)
    9f70:	47a0      	blx	r4
    9f72:	4b22      	ldr	r3, [pc, #136]	; (9ffc <i2c_master_init+0x2e8>)
    9f74:	4798      	blx	r3
    9f76:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    9f78:	d00c      	beq.n	9f94 <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    9f7a:	0031      	movs	r1, r6
    9f7c:	9807      	ldr	r0, [sp, #28]
    9f7e:	4b22      	ldr	r3, [pc, #136]	; (a008 <i2c_master_init+0x2f4>)
    9f80:	4798      	blx	r3
    9f82:	3802      	subs	r0, #2
    9f84:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    9f86:	002b      	movs	r3, r5
    9f88:	2dff      	cmp	r5, #255	; 0xff
    9f8a:	d80c      	bhi.n	9fa6 <i2c_master_init+0x292>
    9f8c:	28ff      	cmp	r0, #255	; 0xff
    9f8e:	d9bc      	bls.n	9f0a <i2c_master_init+0x1f6>
    9f90:	2040      	movs	r0, #64	; 0x40
    9f92:	e6e6      	b.n	9d62 <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    9f94:	0071      	lsls	r1, r6, #1
    9f96:	1e48      	subs	r0, r1, #1
    9f98:	9b07      	ldr	r3, [sp, #28]
    9f9a:	469c      	mov	ip, r3
    9f9c:	4460      	add	r0, ip
    9f9e:	4b1a      	ldr	r3, [pc, #104]	; (a008 <i2c_master_init+0x2f4>)
    9fa0:	4798      	blx	r3
    9fa2:	3801      	subs	r0, #1
    9fa4:	e7ef      	b.n	9f86 <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    9fa6:	2040      	movs	r0, #64	; 0x40
    9fa8:	e6db      	b.n	9d62 <i2c_master_init+0x4e>
    9faa:	46c0      	nop			; (mov r8, r8)
    9fac:	0000f601 	.word	0x0000f601
    9fb0:	40000400 	.word	0x40000400
    9fb4:	000109b9 	.word	0x000109b9
    9fb8:	0001092d 	.word	0x0001092d
    9fbc:	0000f43d 	.word	0x0000f43d
    9fc0:	0000a25d 	.word	0x0000a25d
    9fc4:	0000f63d 	.word	0x0000f63d
    9fc8:	2000124c 	.word	0x2000124c
    9fcc:	00010ab1 	.word	0x00010ab1
    9fd0:	41002000 	.word	0x41002000
    9fd4:	000109d5 	.word	0x000109d5
    9fd8:	00018c31 	.word	0x00018c31
    9fdc:	00018019 	.word	0x00018019
    9fe0:	e826d695 	.word	0xe826d695
    9fe4:	3e112e0b 	.word	0x3e112e0b
    9fe8:	00017391 	.word	0x00017391
    9fec:	40240000 	.word	0x40240000
    9ff0:	00018519 	.word	0x00018519
    9ff4:	3ff00000 	.word	0x3ff00000
    9ff8:	000179b1 	.word	0x000179b1
    9ffc:	00018b45 	.word	0x00018b45
    a000:	0000f489 	.word	0x0000f489
    a004:	40080000 	.word	0x40080000
    a008:	00017015 	.word	0x00017015

0000a00c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a00c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    a00e:	7e1a      	ldrb	r2, [r3, #24]
    a010:	0792      	lsls	r2, r2, #30
    a012:	d507      	bpl.n	a024 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a014:	2202      	movs	r2, #2
    a016:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    a018:	8b5b      	ldrh	r3, [r3, #26]
    a01a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    a01c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    a01e:	17db      	asrs	r3, r3, #31
    a020:	4018      	ands	r0, r3
}
    a022:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    a024:	8b5a      	ldrh	r2, [r3, #26]
    a026:	0752      	lsls	r2, r2, #29
    a028:	d506      	bpl.n	a038 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    a02a:	6859      	ldr	r1, [r3, #4]
    a02c:	22c0      	movs	r2, #192	; 0xc0
    a02e:	0292      	lsls	r2, r2, #10
    a030:	430a      	orrs	r2, r1
    a032:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    a034:	2018      	movs	r0, #24
    a036:	e7f4      	b.n	a022 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    a038:	2000      	movs	r0, #0
    a03a:	e7f2      	b.n	a022 <_i2c_master_address_response+0x16>

0000a03c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    a03c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a03e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    a040:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    a042:	2401      	movs	r4, #1
    a044:	2502      	movs	r5, #2
    a046:	7e11      	ldrb	r1, [r2, #24]
    a048:	4221      	tst	r1, r4
    a04a:	d10b      	bne.n	a064 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    a04c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    a04e:	4229      	tst	r1, r5
    a050:	d106      	bne.n	a060 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    a052:	3301      	adds	r3, #1
    a054:	b29b      	uxth	r3, r3
    a056:	8901      	ldrh	r1, [r0, #8]
    a058:	4299      	cmp	r1, r3
    a05a:	d8f4      	bhi.n	a046 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    a05c:	2012      	movs	r0, #18
    a05e:	e002      	b.n	a066 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    a060:	2000      	movs	r0, #0
    a062:	e000      	b.n	a066 <_i2c_master_wait_for_bus+0x2a>
    a064:	2000      	movs	r0, #0
}
    a066:	bd30      	pop	{r4, r5, pc}

0000a068 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    a068:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a06a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a06c:	6862      	ldr	r2, [r4, #4]
    a06e:	2380      	movs	r3, #128	; 0x80
    a070:	02db      	lsls	r3, r3, #11
    a072:	4313      	orrs	r3, r2
    a074:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    a076:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    a078:	4b02      	ldr	r3, [pc, #8]	; (a084 <_i2c_master_send_hs_master_code+0x1c>)
    a07a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    a07c:	2301      	movs	r3, #1
    a07e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    a080:	bd10      	pop	{r4, pc}
    a082:	46c0      	nop			; (mov r8, r8)
    a084:	0000a03d 	.word	0x0000a03d

0000a088 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    a088:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    a08a:	2207      	movs	r2, #7
    a08c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    a08e:	421a      	tst	r2, r3
    a090:	d1fc      	bne.n	a08c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    a092:	4770      	bx	lr

0000a094 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    a094:	b570      	push	{r4, r5, r6, lr}
    a096:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a098:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    a09a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    a09c:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    a09e:	8b83      	ldrh	r3, [r0, #28]
    a0a0:	1aed      	subs	r5, r5, r3
    a0a2:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    a0a4:	8b83      	ldrh	r3, [r0, #28]
    a0a6:	3b01      	subs	r3, #1
    a0a8:	b29b      	uxth	r3, r3
    a0aa:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    a0ac:	0113      	lsls	r3, r2, #4
    a0ae:	d51d      	bpl.n	a0ec <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    a0b0:	7ac3      	ldrb	r3, [r0, #11]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d003      	beq.n	a0be <_i2c_master_read+0x2a>
    a0b6:	8b83      	ldrh	r3, [r0, #28]
    a0b8:	b29b      	uxth	r3, r3
    a0ba:	2b01      	cmp	r3, #1
    a0bc:	d010      	beq.n	a0e0 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    a0be:	8ba3      	ldrh	r3, [r4, #28]
    a0c0:	b29b      	uxth	r3, r3
    a0c2:	2b00      	cmp	r3, #0
    a0c4:	d102      	bne.n	a0cc <_i2c_master_read+0x38>
		if (module->send_stop) {
    a0c6:	7aa3      	ldrb	r3, [r4, #10]
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	d11c      	bne.n	a106 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    a0cc:	0020      	movs	r0, r4
    a0ce:	4b12      	ldr	r3, [pc, #72]	; (a118 <_i2c_master_read+0x84>)
    a0d0:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    a0d2:	6a23      	ldr	r3, [r4, #32]
    a0d4:	195d      	adds	r5, r3, r5
    a0d6:	2328      	movs	r3, #40	; 0x28
    a0d8:	5cf3      	ldrb	r3, [r6, r3]
    a0da:	b2db      	uxtb	r3, r3
    a0dc:	702b      	strb	r3, [r5, #0]
}
    a0de:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a0e0:	6872      	ldr	r2, [r6, #4]
    a0e2:	2380      	movs	r3, #128	; 0x80
    a0e4:	02db      	lsls	r3, r3, #11
    a0e6:	4313      	orrs	r3, r2
    a0e8:	6073      	str	r3, [r6, #4]
    a0ea:	e7e8      	b.n	a0be <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    a0ec:	7ac3      	ldrb	r3, [r0, #11]
    a0ee:	2b00      	cmp	r3, #0
    a0f0:	d0e5      	beq.n	a0be <_i2c_master_read+0x2a>
    a0f2:	8b83      	ldrh	r3, [r0, #28]
    a0f4:	b29b      	uxth	r3, r3
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	d1e1      	bne.n	a0be <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a0fa:	6872      	ldr	r2, [r6, #4]
    a0fc:	2380      	movs	r3, #128	; 0x80
    a0fe:	02db      	lsls	r3, r3, #11
    a100:	4313      	orrs	r3, r2
    a102:	6073      	str	r3, [r6, #4]
    a104:	e7db      	b.n	a0be <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    a106:	0020      	movs	r0, r4
    a108:	4b03      	ldr	r3, [pc, #12]	; (a118 <_i2c_master_read+0x84>)
    a10a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    a10c:	6872      	ldr	r2, [r6, #4]
    a10e:	23c0      	movs	r3, #192	; 0xc0
    a110:	029b      	lsls	r3, r3, #10
    a112:	4313      	orrs	r3, r2
    a114:	6073      	str	r3, [r6, #4]
    a116:	e7d9      	b.n	a0cc <_i2c_master_read+0x38>
    a118:	0000a089 	.word	0x0000a089

0000a11c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    a11c:	b570      	push	{r4, r5, r6, lr}
    a11e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a120:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    a122:	8b6b      	ldrh	r3, [r5, #26]
    a124:	075b      	lsls	r3, r3, #29
    a126:	d503      	bpl.n	a130 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    a128:	221e      	movs	r2, #30
    a12a:	2325      	movs	r3, #37	; 0x25
    a12c:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    a12e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    a130:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    a132:	8b83      	ldrh	r3, [r0, #28]
    a134:	1af6      	subs	r6, r6, r3
    a136:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    a138:	8b83      	ldrh	r3, [r0, #28]
    a13a:	3b01      	subs	r3, #1
    a13c:	b29b      	uxth	r3, r3
    a13e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    a140:	4b04      	ldr	r3, [pc, #16]	; (a154 <_i2c_master_write+0x38>)
    a142:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    a144:	6a23      	ldr	r3, [r4, #32]
    a146:	199e      	adds	r6, r3, r6
    a148:	7833      	ldrb	r3, [r6, #0]
    a14a:	b2db      	uxtb	r3, r3
    a14c:	2228      	movs	r2, #40	; 0x28
    a14e:	54ab      	strb	r3, [r5, r2]
    a150:	e7ed      	b.n	a12e <_i2c_master_write+0x12>
    a152:	46c0      	nop			; (mov r8, r8)
    a154:	0000a089 	.word	0x0000a089

0000a158 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a15a:	0005      	movs	r5, r0
    a15c:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a15e:	6806      	ldr	r6, [r0, #0]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
    a160:	684b      	ldr	r3, [r1, #4]
    a162:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
    a164:	884b      	ldrh	r3, [r1, #2]
    a166:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    a168:	2201      	movs	r2, #1
    a16a:	2324      	movs	r3, #36	; 0x24
    a16c:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
    a16e:	3204      	adds	r2, #4
    a170:	3301      	adds	r3, #1
    a172:	54c2      	strb	r2, [r0, r3]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    a174:	6837      	ldr	r7, [r6, #0]
    a176:	013f      	lsls	r7, r7, #4
    a178:	0fff      	lsrs	r7, r7, #31

	/* Switch to high speed mode */
	if (packet->high_speed) {
    a17a:	7a4b      	ldrb	r3, [r1, #9]
    a17c:	2b00      	cmp	r3, #0
    a17e:	d117      	bne.n	a1b0 <_i2c_master_read_packet+0x58>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    a180:	2f00      	cmp	r7, #0
    a182:	d002      	beq.n	a18a <_i2c_master_read_packet+0x32>
    a184:	8863      	ldrh	r3, [r4, #2]
    a186:	2b01      	cmp	r3, #1
    a188:	d016      	beq.n	a1b8 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    a18a:	6873      	ldr	r3, [r6, #4]
    a18c:	4a20      	ldr	r2, [pc, #128]	; (a210 <_i2c_master_read_packet+0xb8>)
    a18e:	4013      	ands	r3, r2
    a190:	6073      	str	r3, [r6, #4]
	}

	if (packet->ten_bit_address) {
    a192:	7a23      	ldrb	r3, [r4, #8]
    a194:	2b00      	cmp	r3, #0
    a196:	d115      	bne.n	a1c4 <_i2c_master_read_packet+0x6c>
		} else {
			return tmp_status;
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
    a198:	2303      	movs	r3, #3
    a19a:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    a19c:	8823      	ldrh	r3, [r4, #0]
    a19e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    a1a0:	7a62      	ldrb	r2, [r4, #9]
    a1a2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    a1a4:	4313      	orrs	r3, r2
    a1a6:	2201      	movs	r2, #1
    a1a8:	4313      	orrs	r3, r2
    a1aa:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
    a1ac:	2000      	movs	r0, #0
}
    a1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    a1b0:	7a89      	ldrb	r1, [r1, #10]
    a1b2:	4b18      	ldr	r3, [pc, #96]	; (a214 <_i2c_master_read_packet+0xbc>)
    a1b4:	4798      	blx	r3
    a1b6:	e7e3      	b.n	a180 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    a1b8:	6872      	ldr	r2, [r6, #4]
    a1ba:	2380      	movs	r3, #128	; 0x80
    a1bc:	02db      	lsls	r3, r3, #11
    a1be:	4313      	orrs	r3, r2
    a1c0:	6073      	str	r3, [r6, #4]
    a1c2:	e7e6      	b.n	a192 <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
    a1c4:	8823      	ldrh	r3, [r4, #0]
    a1c6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    a1c8:	7a62      	ldrb	r2, [r4, #9]
    a1ca:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    a1cc:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    a1ce:	2280      	movs	r2, #128	; 0x80
    a1d0:	0212      	lsls	r2, r2, #8
    a1d2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    a1d4:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    a1d6:	0028      	movs	r0, r5
    a1d8:	4b0f      	ldr	r3, [pc, #60]	; (a218 <_i2c_master_read_packet+0xc0>)
    a1da:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    a1dc:	6873      	ldr	r3, [r6, #4]
    a1de:	4a0c      	ldr	r2, [pc, #48]	; (a210 <_i2c_master_read_packet+0xb8>)
    a1e0:	4013      	ands	r3, r2
    a1e2:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
    a1e4:	2800      	cmp	r0, #0
    a1e6:	d1e2      	bne.n	a1ae <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
    a1e8:	0028      	movs	r0, r5
    a1ea:	4b0c      	ldr	r3, [pc, #48]	; (a21c <_i2c_master_read_packet+0xc4>)
    a1ec:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
    a1ee:	2800      	cmp	r0, #0
    a1f0:	d1dd      	bne.n	a1ae <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
    a1f2:	2303      	movs	r3, #3
    a1f4:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    a1f6:	8823      	ldrh	r3, [r4, #0]
    a1f8:	0a1b      	lsrs	r3, r3, #8
    a1fa:	2278      	movs	r2, #120	; 0x78
    a1fc:	4313      	orrs	r3, r2
    a1fe:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    a200:	7a62      	ldrb	r2, [r4, #9]
    a202:	0392      	lsls	r2, r2, #14
    a204:	2101      	movs	r1, #1
    a206:	430a      	orrs	r2, r1
    a208:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    a20a:	6273      	str	r3, [r6, #36]	; 0x24
    a20c:	e7cf      	b.n	a1ae <_i2c_master_read_packet+0x56>
    a20e:	46c0      	nop			; (mov r8, r8)
    a210:	fffbffff 	.word	0xfffbffff
    a214:	0000a069 	.word	0x0000a069
    a218:	0000a03d 	.word	0x0000a03d
    a21c:	0000a00d 	.word	0x0000a00d

0000a220 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
    a220:	1c93      	adds	r3, r2, #2
    a222:	009b      	lsls	r3, r3, #2
    a224:	18c3      	adds	r3, r0, r3
    a226:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
    a228:	7e03      	ldrb	r3, [r0, #24]
    a22a:	2101      	movs	r1, #1
    a22c:	4091      	lsls	r1, r2
    a22e:	430b      	orrs	r3, r1
    a230:	b2db      	uxtb	r3, r3
    a232:	7603      	strb	r3, [r0, #24]
}
    a234:	4770      	bx	lr
	...

0000a238 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    a238:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    a23a:	8b83      	ldrh	r3, [r0, #28]
    a23c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    a23e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    a240:	2b00      	cmp	r3, #0
    a242:	d001      	beq.n	a248 <i2c_master_read_packet_job+0x10>
	/* Make sure we send STOP */
	module->send_stop = true;
	module->send_nack = true;
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
}
    a244:	0010      	movs	r0, r2
    a246:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    a248:	3301      	adds	r3, #1
    a24a:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    a24c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    a24e:	4b02      	ldr	r3, [pc, #8]	; (a258 <i2c_master_read_packet_job+0x20>)
    a250:	4798      	blx	r3
    a252:	0002      	movs	r2, r0
    a254:	e7f6      	b.n	a244 <i2c_master_read_packet_job+0xc>
    a256:	46c0      	nop			; (mov r8, r8)
    a258:	0000a159 	.word	0x0000a159

0000a25c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    a25c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    a25e:	0080      	lsls	r0, r0, #2
    a260:	4b75      	ldr	r3, [pc, #468]	; (a438 <_i2c_master_interrupt_handler+0x1dc>)
    a262:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a264:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    a266:	682b      	ldr	r3, [r5, #0]
    a268:	011b      	lsls	r3, r3, #4
    a26a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    a26c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    a26e:	7e26      	ldrb	r6, [r4, #24]
    a270:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    a272:	8b63      	ldrh	r3, [r4, #26]
    a274:	b29b      	uxth	r3, r3
    a276:	2b00      	cmp	r3, #0
    a278:	d103      	bne.n	a282 <_i2c_master_interrupt_handler+0x26>
    a27a:	8ba3      	ldrh	r3, [r4, #28]
    a27c:	b29b      	uxth	r3, r3
    a27e:	2b00      	cmp	r3, #0
    a280:	d123      	bne.n	a2ca <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a282:	8b63      	ldrh	r3, [r4, #26]
    a284:	b29b      	uxth	r3, r3
    a286:	2b00      	cmp	r3, #0
    a288:	d008      	beq.n	a29c <_i2c_master_interrupt_handler+0x40>
    a28a:	8ba3      	ldrh	r3, [r4, #28]
    a28c:	b29b      	uxth	r3, r3
    a28e:	2b00      	cmp	r3, #0
    a290:	d104      	bne.n	a29c <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    a292:	3325      	adds	r3, #37	; 0x25
    a294:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a296:	2b05      	cmp	r3, #5
    a298:	d100      	bne.n	a29c <_i2c_master_interrupt_handler+0x40>
    a29a:	e06d      	b.n	a378 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    a29c:	8b63      	ldrh	r3, [r4, #26]
    a29e:	b29b      	uxth	r3, r3
    a2a0:	2b00      	cmp	r3, #0
    a2a2:	d024      	beq.n	a2ee <_i2c_master_interrupt_handler+0x92>
    a2a4:	8ba3      	ldrh	r3, [r4, #28]
    a2a6:	b29b      	uxth	r3, r3
    a2a8:	2b00      	cmp	r3, #0
    a2aa:	d020      	beq.n	a2ee <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    a2ac:	8b6b      	ldrh	r3, [r5, #26]
    a2ae:	069b      	lsls	r3, r3, #26
    a2b0:	d500      	bpl.n	a2b4 <_i2c_master_interrupt_handler+0x58>
    a2b2:	e081      	b.n	a3b8 <_i2c_master_interrupt_handler+0x15c>
    a2b4:	2a00      	cmp	r2, #0
    a2b6:	d004      	beq.n	a2c2 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    a2b8:	8ba3      	ldrh	r3, [r4, #28]
    a2ba:	b29b      	uxth	r3, r3
    a2bc:	2b01      	cmp	r3, #1
    a2be:	d100      	bne.n	a2c2 <_i2c_master_interrupt_handler+0x66>
    a2c0:	e07a      	b.n	a3b8 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    a2c2:	2241      	movs	r2, #65	; 0x41
    a2c4:	2325      	movs	r3, #37	; 0x25
    a2c6:	54e2      	strb	r2, [r4, r3]
    a2c8:	e011      	b.n	a2ee <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    a2ca:	7e2b      	ldrb	r3, [r5, #24]
    a2cc:	07db      	lsls	r3, r3, #31
    a2ce:	d507      	bpl.n	a2e0 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    a2d0:	2301      	movs	r3, #1
    a2d2:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    a2d4:	8b6b      	ldrh	r3, [r5, #26]
    a2d6:	079b      	lsls	r3, r3, #30
    a2d8:	d52e      	bpl.n	a338 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    a2da:	2241      	movs	r2, #65	; 0x41
    a2dc:	2325      	movs	r3, #37	; 0x25
    a2de:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    a2e0:	8ba3      	ldrh	r3, [r4, #28]
    a2e2:	b29b      	uxth	r3, r3
    a2e4:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    a2e6:	2325      	movs	r3, #37	; 0x25
    a2e8:	5ce3      	ldrb	r3, [r4, r3]
    a2ea:	2b05      	cmp	r3, #5
    a2ec:	d038      	beq.n	a360 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a2ee:	8b63      	ldrh	r3, [r4, #26]
    a2f0:	b29b      	uxth	r3, r3
    a2f2:	2b00      	cmp	r3, #0
    a2f4:	d007      	beq.n	a306 <_i2c_master_interrupt_handler+0xaa>
    a2f6:	8ba3      	ldrh	r3, [r4, #28]
    a2f8:	b29b      	uxth	r3, r3
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d103      	bne.n	a306 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    a2fe:	3325      	adds	r3, #37	; 0x25
    a300:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    a302:	2b05      	cmp	r3, #5
    a304:	d064      	beq.n	a3d0 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    a306:	2325      	movs	r3, #37	; 0x25
    a308:	5ce3      	ldrb	r3, [r4, r3]
    a30a:	2b05      	cmp	r3, #5
    a30c:	d013      	beq.n	a336 <_i2c_master_interrupt_handler+0xda>
    a30e:	2325      	movs	r3, #37	; 0x25
    a310:	5ce3      	ldrb	r3, [r4, r3]
    a312:	2b00      	cmp	r3, #0
    a314:	d00f      	beq.n	a336 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    a316:	2303      	movs	r3, #3
    a318:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    a31a:	2300      	movs	r3, #0
    a31c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    a31e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    a320:	3325      	adds	r3, #37	; 0x25
    a322:	5ce3      	ldrb	r3, [r4, r3]
    a324:	2b41      	cmp	r3, #65	; 0x41
    a326:	d003      	beq.n	a330 <_i2c_master_interrupt_handler+0xd4>
    a328:	7aa3      	ldrb	r3, [r4, #10]
    a32a:	2b00      	cmp	r3, #0
    a32c:	d000      	beq.n	a330 <_i2c_master_interrupt_handler+0xd4>
    a32e:	e075      	b.n	a41c <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    a330:	0773      	lsls	r3, r6, #29
    a332:	d500      	bpl.n	a336 <_i2c_master_interrupt_handler+0xda>
    a334:	e07b      	b.n	a42e <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    a336:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    a338:	8b6b      	ldrh	r3, [r5, #26]
    a33a:	075b      	lsls	r3, r3, #29
    a33c:	d5d0      	bpl.n	a2e0 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    a33e:	2218      	movs	r2, #24
    a340:	2325      	movs	r3, #37	; 0x25
    a342:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    a344:	2300      	movs	r3, #0
    a346:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    a348:	7aa3      	ldrb	r3, [r4, #10]
    a34a:	2b00      	cmp	r3, #0
    a34c:	d0c8      	beq.n	a2e0 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    a34e:	0020      	movs	r0, r4
    a350:	4b3a      	ldr	r3, [pc, #232]	; (a43c <_i2c_master_interrupt_handler+0x1e0>)
    a352:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    a354:	686a      	ldr	r2, [r5, #4]
    a356:	23c0      	movs	r3, #192	; 0xc0
    a358:	029b      	lsls	r3, r3, #10
    a35a:	4313      	orrs	r3, r2
    a35c:	606b      	str	r3, [r5, #4]
    a35e:	e7bf      	b.n	a2e0 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    a360:	331f      	adds	r3, #31
    a362:	5ce3      	ldrb	r3, [r4, r3]
    a364:	2b00      	cmp	r3, #0
    a366:	d003      	beq.n	a370 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    a368:	0020      	movs	r0, r4
    a36a:	4b35      	ldr	r3, [pc, #212]	; (a440 <_i2c_master_interrupt_handler+0x1e4>)
    a36c:	4798      	blx	r3
    a36e:	e7be      	b.n	a2ee <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    a370:	0020      	movs	r0, r4
    a372:	4b34      	ldr	r3, [pc, #208]	; (a444 <_i2c_master_interrupt_handler+0x1e8>)
    a374:	4798      	blx	r3
    a376:	e7ba      	b.n	a2ee <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    a378:	331f      	adds	r3, #31
    a37a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    a37c:	2b00      	cmp	r3, #0
    a37e:	d000      	beq.n	a382 <_i2c_master_interrupt_handler+0x126>
    a380:	e78c      	b.n	a29c <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    a382:	3303      	adds	r3, #3
    a384:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    a386:	2300      	movs	r3, #0
    a388:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    a38a:	3325      	adds	r3, #37	; 0x25
    a38c:	2200      	movs	r2, #0
    a38e:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    a390:	7aa3      	ldrb	r3, [r4, #10]
    a392:	2b00      	cmp	r3, #0
    a394:	d107      	bne.n	a3a6 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    a396:	2301      	movs	r3, #1
    a398:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    a39a:	07f3      	lsls	r3, r6, #31
    a39c:	d5a7      	bpl.n	a2ee <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    a39e:	68e3      	ldr	r3, [r4, #12]
    a3a0:	0020      	movs	r0, r4
    a3a2:	4798      	blx	r3
    a3a4:	e7a3      	b.n	a2ee <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    a3a6:	0020      	movs	r0, r4
    a3a8:	4b24      	ldr	r3, [pc, #144]	; (a43c <_i2c_master_interrupt_handler+0x1e0>)
    a3aa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    a3ac:	686a      	ldr	r2, [r5, #4]
    a3ae:	23c0      	movs	r3, #192	; 0xc0
    a3b0:	029b      	lsls	r3, r3, #10
    a3b2:	4313      	orrs	r3, r2
    a3b4:	606b      	str	r3, [r5, #4]
    a3b6:	e7f0      	b.n	a39a <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    a3b8:	2324      	movs	r3, #36	; 0x24
    a3ba:	5ce3      	ldrb	r3, [r4, r3]
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d103      	bne.n	a3c8 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    a3c0:	0020      	movs	r0, r4
    a3c2:	4b20      	ldr	r3, [pc, #128]	; (a444 <_i2c_master_interrupt_handler+0x1e8>)
    a3c4:	4798      	blx	r3
    a3c6:	e792      	b.n	a2ee <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    a3c8:	0020      	movs	r0, r4
    a3ca:	4b1d      	ldr	r3, [pc, #116]	; (a440 <_i2c_master_interrupt_handler+0x1e4>)
    a3cc:	4798      	blx	r3
    a3ce:	e78e      	b.n	a2ee <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    a3d0:	331f      	adds	r3, #31
    a3d2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    a3d4:	2b01      	cmp	r3, #1
    a3d6:	d196      	bne.n	a306 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    a3d8:	7e2b      	ldrb	r3, [r5, #24]
    a3da:	079b      	lsls	r3, r3, #30
    a3dc:	d501      	bpl.n	a3e2 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    a3de:	2302      	movs	r3, #2
    a3e0:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    a3e2:	2303      	movs	r3, #3
    a3e4:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    a3e6:	2300      	movs	r3, #0
    a3e8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    a3ea:	3325      	adds	r3, #37	; 0x25
    a3ec:	2200      	movs	r2, #0
    a3ee:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    a3f0:	07b3      	lsls	r3, r6, #30
    a3f2:	d503      	bpl.n	a3fc <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    a3f4:	2324      	movs	r3, #36	; 0x24
    a3f6:	5ce3      	ldrb	r3, [r4, r3]
    a3f8:	2b01      	cmp	r3, #1
    a3fa:	d00b      	beq.n	a414 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    a3fc:	07f3      	lsls	r3, r6, #31
    a3fe:	d400      	bmi.n	a402 <_i2c_master_interrupt_handler+0x1a6>
    a400:	e781      	b.n	a306 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    a402:	2324      	movs	r3, #36	; 0x24
    a404:	5ce3      	ldrb	r3, [r4, r3]
    a406:	2b00      	cmp	r3, #0
    a408:	d000      	beq.n	a40c <_i2c_master_interrupt_handler+0x1b0>
    a40a:	e77c      	b.n	a306 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    a40c:	68e3      	ldr	r3, [r4, #12]
    a40e:	0020      	movs	r0, r4
    a410:	4798      	blx	r3
    a412:	e778      	b.n	a306 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    a414:	6923      	ldr	r3, [r4, #16]
    a416:	0020      	movs	r0, r4
    a418:	4798      	blx	r3
    a41a:	e774      	b.n	a306 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    a41c:	0020      	movs	r0, r4
    a41e:	4b07      	ldr	r3, [pc, #28]	; (a43c <_i2c_master_interrupt_handler+0x1e0>)
    a420:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    a422:	686a      	ldr	r2, [r5, #4]
    a424:	23e0      	movs	r3, #224	; 0xe0
    a426:	02db      	lsls	r3, r3, #11
    a428:	4313      	orrs	r3, r2
    a42a:	606b      	str	r3, [r5, #4]
    a42c:	e780      	b.n	a330 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    a42e:	6963      	ldr	r3, [r4, #20]
    a430:	0020      	movs	r0, r4
    a432:	4798      	blx	r3
}
    a434:	e77f      	b.n	a336 <_i2c_master_interrupt_handler+0xda>
    a436:	46c0      	nop			; (mov r8, r8)
    a438:	2000124c 	.word	0x2000124c
    a43c:	0000a089 	.word	0x0000a089
    a440:	0000a095 	.word	0x0000a095
    a444:	0000a11d 	.word	0x0000a11d

0000a448 <i2c_read_complete_callback>:

/** 
* Callback after read operation completion 
*/
void i2c_read_complete_callback(struct i2c_master_module *const module)
{
    a448:	b510      	push	{r4, lr}
	printf("Thercam: >> One frame read\n\r");
    a44a:	4802      	ldr	r0, [pc, #8]	; (a454 <i2c_read_complete_callback+0xc>)
    a44c:	4b02      	ldr	r3, [pc, #8]	; (a458 <i2c_read_complete_callback+0x10>)
    a44e:	4798      	blx	r3
}
    a450:	bd10      	pop	{r4, pc}
    a452:	46c0      	nop			; (mov r8, r8)
    a454:	0001b340 	.word	0x0001b340
    a458:	0001916d 	.word	0x0001916d

0000a45c <configure_i2c_callbacks>:

/** Register callback for read from slave (Thercam) operation */
void configure_i2c_callbacks(void)
{
    a45c:	b510      	push	{r4, lr}
	i2c_master_register_callback(&i2c_master_instance, i2c_read_complete_callback,	I2C_MASTER_CALLBACK_READ_COMPLETE);
    a45e:	4c05      	ldr	r4, [pc, #20]	; (a474 <configure_i2c_callbacks+0x18>)
    a460:	2201      	movs	r2, #1
    a462:	4905      	ldr	r1, [pc, #20]	; (a478 <configure_i2c_callbacks+0x1c>)
    a464:	0020      	movs	r0, r4
    a466:	4b05      	ldr	r3, [pc, #20]	; (a47c <configure_i2c_callbacks+0x20>)
    a468:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    a46a:	7e63      	ldrb	r3, [r4, #25]
    a46c:	2202      	movs	r2, #2
    a46e:	4313      	orrs	r3, r2
    a470:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2c_master_instance,I2C_MASTER_CALLBACK_READ_COMPLETE);
}
    a472:	bd10      	pop	{r4, pc}
    a474:	200010a4 	.word	0x200010a4
    a478:	0000a449 	.word	0x0000a449
    a47c:	0000a221 	.word	0x0000a221

0000a480 <configure_i2c>:

/**
* Configure I2c
*/
void configure_i2c(void)
{
    a480:	b530      	push	{r4, r5, lr}
    a482:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    a484:	ab01      	add	r3, sp, #4
    a486:	2264      	movs	r2, #100	; 0x64
    a488:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    a48a:	4a22      	ldr	r2, [pc, #136]	; (a514 <configure_i2c+0x94>)
    a48c:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    a48e:	2200      	movs	r2, #0
    a490:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    a492:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    a494:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    a496:	2180      	movs	r1, #128	; 0x80
    a498:	0389      	lsls	r1, r1, #14
    a49a:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
    a49c:	2101      	movs	r1, #1
    a49e:	4249      	negs	r1, r1
    a4a0:	82d9      	strh	r1, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
    a4a2:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    a4a4:	3125      	adds	r1, #37	; 0x25
    a4a6:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    a4a8:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    a4aa:	3108      	adds	r1, #8
    a4ac:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    a4ae:	3101      	adds	r1, #1
    a4b0:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    a4b2:	3101      	adds	r1, #1
    a4b4:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    a4b6:	32d7      	adds	r2, #215	; 0xd7
    a4b8:	861a      	strh	r2, [r3, #48]	; 0x30
	
	/** Configurations compatible with SAMW25 and Delos PCB board */
// 	config_i2c_master.pinmux_pad0    = PINMUX_PA08D_SERCOM2_PAD0; // SDA
// 	config_i2c_master.pinmux_pad1    = PINMUX_PA09D_SERCOM2_PAD1; // SCK
	
	config_i2c_master.pinmux_pad0    = PINMUX_PA08C_SERCOM0_PAD0; // SDA
    a4ba:	4a17      	ldr	r2, [pc, #92]	; (a518 <configure_i2c+0x98>)
    a4bc:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1    = PINMUX_PA09C_SERCOM0_PAD1; // SCK
    a4be:	4a17      	ldr	r2, [pc, #92]	; (a51c <configure_i2c+0x9c>)
    a4c0:	9209      	str	r2, [sp, #36]	; 0x24

	/* Initialize and enable device with config */
	while(i2c_master_init(&i2c_master_instance, CONF_I2C_MASTER_MODULE, &config_i2c_master)     \
    a4c2:	4d17      	ldr	r5, [pc, #92]	; (a520 <configure_i2c+0xa0>)
    a4c4:	4c17      	ldr	r4, [pc, #92]	; (a524 <configure_i2c+0xa4>)
    a4c6:	aa01      	add	r2, sp, #4
    a4c8:	4917      	ldr	r1, [pc, #92]	; (a528 <configure_i2c+0xa8>)
    a4ca:	0028      	movs	r0, r5
    a4cc:	47a0      	blx	r4
    a4ce:	2800      	cmp	r0, #0
    a4d0:	d1f9      	bne.n	a4c6 <configure_i2c+0x46>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    a4d2:	4b13      	ldr	r3, [pc, #76]	; (a520 <configure_i2c+0xa0>)
    a4d4:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    a4d6:	2207      	movs	r2, #7
    a4d8:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    a4da:	421a      	tst	r2, r3
    a4dc:	d1fc      	bne.n	a4d8 <configure_i2c+0x58>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    a4de:	6823      	ldr	r3, [r4, #0]
    a4e0:	2202      	movs	r2, #2
    a4e2:	4313      	orrs	r3, r2
    a4e4:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a4e6:	4d0e      	ldr	r5, [pc, #56]	; (a520 <configure_i2c+0xa0>)
    a4e8:	6828      	ldr	r0, [r5, #0]
    a4ea:	4b10      	ldr	r3, [pc, #64]	; (a52c <configure_i2c+0xac>)
    a4ec:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a4ee:	231f      	movs	r3, #31
    a4f0:	4018      	ands	r0, r3
    a4f2:	3b1e      	subs	r3, #30
    a4f4:	4083      	lsls	r3, r0
    a4f6:	4a0e      	ldr	r2, [pc, #56]	; (a530 <configure_i2c+0xb0>)
    a4f8:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    a4fa:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    a4fc:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    a4fe:	2110      	movs	r1, #16
    a500:	8b62      	ldrh	r2, [r4, #26]
    a502:	420a      	tst	r2, r1
    a504:	d104      	bne.n	a510 <configure_i2c+0x90>
		timeout_counter++;
    a506:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    a508:	4283      	cmp	r3, r0
    a50a:	d3f9      	bcc.n	a500 <configure_i2c+0x80>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    a50c:	2310      	movs	r3, #16
    a50e:	8363      	strh	r3, [r4, #26]
	!= STATUS_OK);

	i2c_master_enable(&i2c_master_instance);
}
    a510:	b00f      	add	sp, #60	; 0x3c
    a512:	bd30      	pop	{r4, r5, pc}
    a514:	00000d48 	.word	0x00000d48
    a518:	00080002 	.word	0x00080002
    a51c:	00090002 	.word	0x00090002
    a520:	200010a4 	.word	0x200010a4
    a524:	00009d15 	.word	0x00009d15
    a528:	42000800 	.word	0x42000800
    a52c:	0000f679 	.word	0x0000f679
    a530:	e000e100 	.word	0xe000e100

0000a534 <thercam_read>:

/** THERCAM OPERATION */
uint16_t thercam_read(void)
{
    a534:	b5f0      	push	{r4, r5, r6, r7, lr}
    a536:	46c6      	mov	lr, r8
    a538:	b500      	push	{lr}
    a53a:	b090      	sub	sp, #64	; 0x40
	/** Read packet DSA */	
	rd_packet.address     = SLAVE_ADDRESS;
    a53c:	4941      	ldr	r1, [pc, #260]	; (a644 <thercam_read+0x110>)
    a53e:	2369      	movs	r3, #105	; 0x69
    a540:	800b      	strh	r3, [r1, #0]
	rd_packet.data_length = DATA_LENGTH;
    a542:	3397      	adds	r3, #151	; 0x97
    a544:	804b      	strh	r3, [r1, #2]
	rd_packet.data        = rd_buffer;
    a546:	4b40      	ldr	r3, [pc, #256]	; (a648 <thercam_read+0x114>)
    a548:	604b      	str	r3, [r1, #4]
	
	i2c_master_read_packet_job(&i2c_master_instance,&rd_packet); // Actual Read function call >> will read Data_length 256
    a54a:	4840      	ldr	r0, [pc, #256]	; (a64c <thercam_read+0x118>)
    a54c:	4b40      	ldr	r3, [pc, #256]	; (a650 <thercam_read+0x11c>)
    a54e:	4798      	blx	r3
				
	int j = 0;
	uint8_t camera_buffer[64];
	for (int i = 0; i < DATA_LENGTH; i++ )
    a550:	2400      	movs	r4, #0
	int j = 0;
    a552:	2500      	movs	r5, #0
		}				
		
		j++;
	}
				
	delay_ms(10);
    a554:	4e3f      	ldr	r6, [pc, #252]	; (a654 <thercam_read+0x120>)
		if (i > 64 && rd_packet.data[i] != 0 && i < 255)
    a556:	4f3b      	ldr	r7, [pc, #236]	; (a644 <thercam_read+0x110>)
		if (k)
    a558:	4b3f      	ldr	r3, [pc, #252]	; (a658 <thercam_read+0x124>)
    a55a:	4698      	mov	r8, r3
    a55c:	e006      	b.n	a56c <thercam_read+0x38>
			printf("%d; \n\r",camera_buffer[j]);
    a55e:	483f      	ldr	r0, [pc, #252]	; (a65c <thercam_read+0x128>)
    a560:	4b3f      	ldr	r3, [pc, #252]	; (a660 <thercam_read+0x12c>)
    a562:	4798      	blx	r3
			k = 7;
    a564:	2207      	movs	r2, #7
    a566:	4b3c      	ldr	r3, [pc, #240]	; (a658 <thercam_read+0x124>)
    a568:	701a      	strb	r2, [r3, #0]
		j++;
    a56a:	3501      	adds	r5, #1
	delay_ms(10);
    a56c:	200a      	movs	r0, #10
    a56e:	47b0      	blx	r6
	for (int i = 0; i < DATA_LENGTH; i++ )
    a570:	3401      	adds	r4, #1
    a572:	2380      	movs	r3, #128	; 0x80
    a574:	005b      	lsls	r3, r3, #1
    a576:	429c      	cmp	r4, r3
    a578:	d015      	beq.n	a5a6 <thercam_read+0x72>
		if (i > 64 && rd_packet.data[i] != 0 && i < 255)
    a57a:	2c40      	cmp	r4, #64	; 0x40
    a57c:	ddf6      	ble.n	a56c <thercam_read+0x38>
    a57e:	687b      	ldr	r3, [r7, #4]
    a580:	5d19      	ldrb	r1, [r3, r4]
    a582:	2900      	cmp	r1, #0
    a584:	d0f2      	beq.n	a56c <thercam_read+0x38>
    a586:	2cfe      	cmp	r4, #254	; 0xfe
    a588:	dcf0      	bgt.n	a56c <thercam_read+0x38>
		camera_buffer[j] = rd_packet.data[i];
    a58a:	466b      	mov	r3, sp
    a58c:	5559      	strb	r1, [r3, r5]
		if (k)
    a58e:	4643      	mov	r3, r8
    a590:	781b      	ldrb	r3, [r3, #0]
    a592:	2b00      	cmp	r3, #0
    a594:	d0e3      	beq.n	a55e <thercam_read+0x2a>
			printf("%d ",camera_buffer[j]);
    a596:	4833      	ldr	r0, [pc, #204]	; (a664 <thercam_read+0x130>)
    a598:	4b31      	ldr	r3, [pc, #196]	; (a660 <thercam_read+0x12c>)
    a59a:	4798      	blx	r3
			k--;
    a59c:	4a2e      	ldr	r2, [pc, #184]	; (a658 <thercam_read+0x124>)
    a59e:	7813      	ldrb	r3, [r2, #0]
    a5a0:	3b01      	subs	r3, #1
    a5a2:	7013      	strb	r3, [r2, #0]
    a5a4:	e7e1      	b.n	a56a <thercam_read+0x36>
	/** 
	* Calculate average temperature
	* the center 4x4 sensor readings are considered for pinpoint calculation
	* The sensor is placed at 8" height
	*/	
	uint16_t sum_r1 = (camera_buffer[18] + camera_buffer[19] + camera_buffer[20] + camera_buffer[21]);
    a5a6:	466b      	mov	r3, sp
    a5a8:	7c9a      	ldrb	r2, [r3, #18]
    a5aa:	7cdb      	ldrb	r3, [r3, #19]
    a5ac:	18d2      	adds	r2, r2, r3
    a5ae:	466b      	mov	r3, sp
    a5b0:	7d1b      	ldrb	r3, [r3, #20]
    a5b2:	189a      	adds	r2, r3, r2
    a5b4:	466b      	mov	r3, sp
    a5b6:	7d5b      	ldrb	r3, [r3, #21]
    a5b8:	189b      	adds	r3, r3, r2
	uint16_t sum_r2 = (camera_buffer[26] + camera_buffer[27] + camera_buffer[28] + camera_buffer[29]);
	uint16_t sum_r3 = (camera_buffer[34] + camera_buffer[35] + camera_buffer[36] + camera_buffer[37]);
	uint16_t sum_r4 = (camera_buffer[42] + camera_buffer[43] + camera_buffer[44] + camera_buffer[45]);
	uint16_t avg_temperature = (sum_r1 + sum_r2 + sum_r3 + sum_r4)/16; // Average calculation	
    a5ba:	b29b      	uxth	r3, r3
	uint16_t sum_r2 = (camera_buffer[26] + camera_buffer[27] + camera_buffer[28] + camera_buffer[29]);
    a5bc:	466a      	mov	r2, sp
    a5be:	7e91      	ldrb	r1, [r2, #26]
    a5c0:	7ed2      	ldrb	r2, [r2, #27]
    a5c2:	1889      	adds	r1, r1, r2
    a5c4:	466a      	mov	r2, sp
    a5c6:	7f12      	ldrb	r2, [r2, #28]
    a5c8:	1851      	adds	r1, r2, r1
    a5ca:	466a      	mov	r2, sp
    a5cc:	7f52      	ldrb	r2, [r2, #29]
    a5ce:	1852      	adds	r2, r2, r1
	uint16_t avg_temperature = (sum_r1 + sum_r2 + sum_r3 + sum_r4)/16; // Average calculation	
    a5d0:	b292      	uxth	r2, r2
    a5d2:	189b      	adds	r3, r3, r2
	uint16_t sum_r3 = (camera_buffer[34] + camera_buffer[35] + camera_buffer[36] + camera_buffer[37]);
    a5d4:	2222      	movs	r2, #34	; 0x22
    a5d6:	4669      	mov	r1, sp
    a5d8:	5c89      	ldrb	r1, [r1, r2]
    a5da:	3201      	adds	r2, #1
    a5dc:	4668      	mov	r0, sp
    a5de:	5c82      	ldrb	r2, [r0, r2]
    a5e0:	1889      	adds	r1, r1, r2
    a5e2:	2224      	movs	r2, #36	; 0x24
    a5e4:	5c82      	ldrb	r2, [r0, r2]
    a5e6:	1851      	adds	r1, r2, r1
    a5e8:	2225      	movs	r2, #37	; 0x25
    a5ea:	5c82      	ldrb	r2, [r0, r2]
    a5ec:	1852      	adds	r2, r2, r1
	uint16_t avg_temperature = (sum_r1 + sum_r2 + sum_r3 + sum_r4)/16; // Average calculation	
    a5ee:	b292      	uxth	r2, r2
    a5f0:	189b      	adds	r3, r3, r2
	uint16_t sum_r4 = (camera_buffer[42] + camera_buffer[43] + camera_buffer[44] + camera_buffer[45]);
    a5f2:	222a      	movs	r2, #42	; 0x2a
    a5f4:	5c81      	ldrb	r1, [r0, r2]
    a5f6:	3201      	adds	r2, #1
    a5f8:	5c82      	ldrb	r2, [r0, r2]
    a5fa:	1889      	adds	r1, r1, r2
    a5fc:	222c      	movs	r2, #44	; 0x2c
    a5fe:	5c82      	ldrb	r2, [r0, r2]
    a600:	1851      	adds	r1, r2, r1
    a602:	222d      	movs	r2, #45	; 0x2d
    a604:	5c82      	ldrb	r2, [r0, r2]
    a606:	1852      	adds	r2, r2, r1
	uint16_t avg_temperature = (sum_r1 + sum_r2 + sum_r3 + sum_r4)/16; // Average calculation	
    a608:	b292      	uxth	r2, r2
    a60a:	189b      	adds	r3, r3, r2
    a60c:	17da      	asrs	r2, r3, #31
    a60e:	200f      	movs	r0, #15
    a610:	4010      	ands	r0, r2
    a612:	18c0      	adds	r0, r0, r3
		
	uint16_t correction = (0.6 * avg_temperature) + 20; // Calibration equation
    a614:	0300      	lsls	r0, r0, #12
    a616:	0c00      	lsrs	r0, r0, #16
    a618:	4b13      	ldr	r3, [pc, #76]	; (a668 <thercam_read+0x134>)
    a61a:	4798      	blx	r3
    a61c:	4a13      	ldr	r2, [pc, #76]	; (a66c <thercam_read+0x138>)
    a61e:	4b14      	ldr	r3, [pc, #80]	; (a670 <thercam_read+0x13c>)
    a620:	4c14      	ldr	r4, [pc, #80]	; (a674 <thercam_read+0x140>)
    a622:	47a0      	blx	r4
    a624:	2200      	movs	r2, #0
    a626:	4b14      	ldr	r3, [pc, #80]	; (a678 <thercam_read+0x144>)
    a628:	4c14      	ldr	r4, [pc, #80]	; (a67c <thercam_read+0x148>)
    a62a:	47a0      	blx	r4
    a62c:	4b14      	ldr	r3, [pc, #80]	; (a680 <thercam_read+0x14c>)
    a62e:	4798      	blx	r3
    a630:	b284      	uxth	r4, r0
		
	printf("%d\n\r",correction);
    a632:	0021      	movs	r1, r4
    a634:	4813      	ldr	r0, [pc, #76]	; (a684 <thercam_read+0x150>)
    a636:	4b0a      	ldr	r3, [pc, #40]	; (a660 <thercam_read+0x12c>)
    a638:	4798      	blx	r3
	
	return correction;	
}
    a63a:	0020      	movs	r0, r4
    a63c:	b010      	add	sp, #64	; 0x40
    a63e:	bc04      	pop	{r2}
    a640:	4690      	mov	r8, r2
    a642:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a644:	200010cc 	.word	0x200010cc
    a648:	2000036c 	.word	0x2000036c
    a64c:	200010a4 	.word	0x200010a4
    a650:	0000a239 	.word	0x0000a239
    a654:	0000b785 	.word	0x0000b785
    a658:	20000000 	.word	0x20000000
    a65c:	0001b364 	.word	0x0001b364
    a660:	0001916d 	.word	0x0001916d
    a664:	0001b360 	.word	0x0001b360
    a668:	00018bad 	.word	0x00018bad
    a66c:	33333333 	.word	0x33333333
    a670:	3fe33333 	.word	0x3fe33333
    a674:	00018019 	.word	0x00018019
    a678:	40340000 	.word	0x40340000
    a67c:	00017391 	.word	0x00017391
    a680:	00017355 	.word	0x00017355
    a684:	0001b36c 	.word	0x0001b36c

0000a688 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    a688:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    a68a:	4b06      	ldr	r3, [pc, #24]	; (a6a4 <sd_mmc_configure_slot+0x1c>)
    a68c:	6819      	ldr	r1, [r3, #0]
    a68e:	7f8b      	ldrb	r3, [r1, #30]
    a690:	1e5a      	subs	r2, r3, #1
    a692:	4193      	sbcs	r3, r2
    a694:	b2db      	uxtb	r3, r3
    a696:	7b4a      	ldrb	r2, [r1, #13]
    a698:	6809      	ldr	r1, [r1, #0]
    a69a:	4803      	ldr	r0, [pc, #12]	; (a6a8 <sd_mmc_configure_slot+0x20>)
    a69c:	7800      	ldrb	r0, [r0, #0]
    a69e:	4c03      	ldr	r4, [pc, #12]	; (a6ac <sd_mmc_configure_slot+0x24>)
    a6a0:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    a6a2:	bd10      	pop	{r4, pc}
    a6a4:	2000046c 	.word	0x2000046c
    a6a8:	20000494 	.word	0x20000494
    a6ac:	0000b331 	.word	0x0000b331

0000a6b0 <sd_mmc_select_slot>:
{
    a6b0:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    a6b2:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    a6b4:	2800      	cmp	r0, #0
    a6b6:	d001      	beq.n	a6bc <sd_mmc_select_slot+0xc>
}
    a6b8:	0018      	movs	r0, r3
    a6ba:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a6bc:	4b0e      	ldr	r3, [pc, #56]	; (a6f8 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    a6be:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    a6c0:	3b03      	subs	r3, #3
    a6c2:	2b01      	cmp	r3, #1
    a6c4:	d90d      	bls.n	a6e2 <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    a6c6:	2200      	movs	r2, #0
    a6c8:	4b0c      	ldr	r3, [pc, #48]	; (a6fc <sd_mmc_select_slot+0x4c>)
    a6ca:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    a6cc:	4c0a      	ldr	r4, [pc, #40]	; (a6f8 <sd_mmc_select_slot+0x48>)
    a6ce:	4b0c      	ldr	r3, [pc, #48]	; (a700 <sd_mmc_select_slot+0x50>)
    a6d0:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    a6d2:	4b0c      	ldr	r3, [pc, #48]	; (a704 <sd_mmc_select_slot+0x54>)
    a6d4:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    a6d6:	7aa3      	ldrb	r3, [r4, #10]
    a6d8:	3b02      	subs	r3, #2
    a6da:	4258      	negs	r0, r3
    a6dc:	4143      	adcs	r3, r0
    a6de:	b2db      	uxtb	r3, r3
    a6e0:	e7ea      	b.n	a6b8 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    a6e2:	4b05      	ldr	r3, [pc, #20]	; (a6f8 <sd_mmc_select_slot+0x48>)
    a6e4:	2202      	movs	r2, #2
    a6e6:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    a6e8:	4a07      	ldr	r2, [pc, #28]	; (a708 <sd_mmc_select_slot+0x58>)
    a6ea:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    a6ec:	2201      	movs	r2, #1
    a6ee:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    a6f0:	2200      	movs	r2, #0
    a6f2:	779a      	strb	r2, [r3, #30]
    a6f4:	e7e7      	b.n	a6c6 <sd_mmc_select_slot+0x16>
    a6f6:	46c0      	nop			; (mov r8, r8)
    a6f8:	20000470 	.word	0x20000470
    a6fc:	20000494 	.word	0x20000494
    a700:	2000046c 	.word	0x2000046c
    a704:	0000a689 	.word	0x0000a689
    a708:	00061a80 	.word	0x00061a80

0000a70c <sd_mmc_cmd13>:
{
    a70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a70e:	4d09      	ldr	r5, [pc, #36]	; (a734 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    a710:	4f09      	ldr	r7, [pc, #36]	; (a738 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    a712:	4e0a      	ldr	r6, [pc, #40]	; (a73c <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    a714:	2100      	movs	r1, #0
    a716:	480a      	ldr	r0, [pc, #40]	; (a740 <sd_mmc_cmd13+0x34>)
    a718:	47b8      	blx	r7
    a71a:	1e04      	subs	r4, r0, #0
    a71c:	d007      	beq.n	a72e <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    a71e:	47b0      	blx	r6
    a720:	23ff      	movs	r3, #255	; 0xff
    a722:	4203      	tst	r3, r0
    a724:	d003      	beq.n	a72e <sd_mmc_cmd13+0x22>
    a726:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    a728:	2d00      	cmp	r5, #0
    a72a:	d1f3      	bne.n	a714 <sd_mmc_cmd13+0x8>
			return false;
    a72c:	2400      	movs	r4, #0
}
    a72e:	0020      	movs	r0, r4
    a730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a732:	46c0      	nop			; (mov r8, r8)
    a734:	00030d41 	.word	0x00030d41
    a738:	0000b575 	.word	0x0000b575
    a73c:	0000b58d 	.word	0x0000b58d
    a740:	00001b0d 	.word	0x00001b0d

0000a744 <sd_mmc_cmd9_spi>:
{
    a744:	b510      	push	{r4, lr}
    a746:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    a748:	4b0c      	ldr	r3, [pc, #48]	; (a77c <sd_mmc_cmd9_spi+0x38>)
    a74a:	681b      	ldr	r3, [r3, #0]
    a74c:	8919      	ldrh	r1, [r3, #8]
    a74e:	0409      	lsls	r1, r1, #16
    a750:	2301      	movs	r3, #1
    a752:	9300      	str	r3, [sp, #0]
    a754:	2210      	movs	r2, #16
    a756:	480a      	ldr	r0, [pc, #40]	; (a780 <sd_mmc_cmd9_spi+0x3c>)
    a758:	4c0a      	ldr	r4, [pc, #40]	; (a784 <sd_mmc_cmd9_spi+0x40>)
    a75a:	47a0      	blx	r4
    a75c:	2800      	cmp	r0, #0
    a75e:	d101      	bne.n	a764 <sd_mmc_cmd9_spi+0x20>
}
    a760:	b002      	add	sp, #8
    a762:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    a764:	4b05      	ldr	r3, [pc, #20]	; (a77c <sd_mmc_cmd9_spi+0x38>)
    a766:	6818      	ldr	r0, [r3, #0]
    a768:	300e      	adds	r0, #14
    a76a:	2101      	movs	r1, #1
    a76c:	4b06      	ldr	r3, [pc, #24]	; (a788 <sd_mmc_cmd9_spi+0x44>)
    a76e:	4798      	blx	r3
    a770:	2800      	cmp	r0, #0
    a772:	d0f5      	beq.n	a760 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    a774:	4b05      	ldr	r3, [pc, #20]	; (a78c <sd_mmc_cmd9_spi+0x48>)
    a776:	4798      	blx	r3
    a778:	e7f2      	b.n	a760 <sd_mmc_cmd9_spi+0x1c>
    a77a:	46c0      	nop			; (mov r8, r8)
    a77c:	2000046c 	.word	0x2000046c
    a780:	00081109 	.word	0x00081109
    a784:	0000b3e5 	.word	0x0000b3e5
    a788:	0000b611 	.word	0x0000b611
    a78c:	0000b69d 	.word	0x0000b69d

0000a790 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    a790:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    a792:	4b04      	ldr	r3, [pc, #16]	; (a7a4 <sd_mmc_deselect_slot+0x14>)
    a794:	781b      	ldrb	r3, [r3, #0]
    a796:	2b00      	cmp	r3, #0
    a798:	d000      	beq.n	a79c <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    a79a:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    a79c:	2000      	movs	r0, #0
    a79e:	4b02      	ldr	r3, [pc, #8]	; (a7a8 <sd_mmc_deselect_slot+0x18>)
    a7a0:	4798      	blx	r3
}
    a7a2:	e7fa      	b.n	a79a <sd_mmc_deselect_slot+0xa>
    a7a4:	20000494 	.word	0x20000494
    a7a8:	0000b385 	.word	0x0000b385

0000a7ac <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    a7ac:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    a7ae:	2204      	movs	r2, #4
    a7b0:	4b03      	ldr	r3, [pc, #12]	; (a7c0 <sd_mmc_init+0x14>)
    a7b2:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    a7b4:	32fb      	adds	r2, #251	; 0xfb
    a7b6:	4b03      	ldr	r3, [pc, #12]	; (a7c4 <sd_mmc_init+0x18>)
    a7b8:	701a      	strb	r2, [r3, #0]
	driver_init();
    a7ba:	4b03      	ldr	r3, [pc, #12]	; (a7c8 <sd_mmc_init+0x1c>)
    a7bc:	4798      	blx	r3
}
    a7be:	bd10      	pop	{r4, pc}
    a7c0:	20000470 	.word	0x20000470
    a7c4:	20000494 	.word	0x20000494
    a7c8:	0000b231 	.word	0x0000b231

0000a7cc <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    a7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7ce:	46c6      	mov	lr, r8
    a7d0:	b500      	push	{lr}
    a7d2:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    a7d4:	4bcb      	ldr	r3, [pc, #812]	; (ab04 <sd_mmc_check+0x338>)
    a7d6:	4798      	blx	r3
    a7d8:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    a7da:	2801      	cmp	r0, #1
    a7dc:	d006      	beq.n	a7ec <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    a7de:	4bca      	ldr	r3, [pc, #808]	; (ab08 <sd_mmc_check+0x33c>)
    a7e0:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    a7e2:	0020      	movs	r0, r4
    a7e4:	b008      	add	sp, #32
    a7e6:	bc04      	pop	{r2}
    a7e8:	4690      	mov	r8, r2
    a7ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    a7ec:	4bc7      	ldr	r3, [pc, #796]	; (ab0c <sd_mmc_check+0x340>)
    a7ee:	681b      	ldr	r3, [r3, #0]
    a7f0:	2201      	movs	r2, #1
    a7f2:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    a7f4:	2200      	movs	r2, #0
    a7f6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    a7f8:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    a7fa:	4bc5      	ldr	r3, [pc, #788]	; (ab10 <sd_mmc_check+0x344>)
    a7fc:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a7fe:	2100      	movs	r1, #0
    a800:	2088      	movs	r0, #136	; 0x88
    a802:	0140      	lsls	r0, r0, #5
    a804:	4bc3      	ldr	r3, [pc, #780]	; (ab14 <sd_mmc_check+0x348>)
    a806:	4798      	blx	r3
    a808:	2800      	cmp	r0, #0
    a80a:	d107      	bne.n	a81c <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    a80c:	4bbf      	ldr	r3, [pc, #764]	; (ab0c <sd_mmc_check+0x340>)
    a80e:	681b      	ldr	r3, [r3, #0]
    a810:	2203      	movs	r2, #3
    a812:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    a814:	4bbc      	ldr	r3, [pc, #752]	; (ab08 <sd_mmc_check+0x33c>)
    a816:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    a818:	2403      	movs	r4, #3
    a81a:	e7e2      	b.n	a7e2 <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    a81c:	21d5      	movs	r1, #213	; 0xd5
    a81e:	0049      	lsls	r1, r1, #1
    a820:	48bd      	ldr	r0, [pc, #756]	; (ab18 <sd_mmc_check+0x34c>)
    a822:	4bbc      	ldr	r3, [pc, #752]	; (ab14 <sd_mmc_check+0x348>)
    a824:	4798      	blx	r3
	*v2 = 0;
    a826:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    a828:	2800      	cmp	r0, #0
    a82a:	d125      	bne.n	a878 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a82c:	4bb7      	ldr	r3, [pc, #732]	; (ab0c <sd_mmc_check+0x340>)
    a82e:	681b      	ldr	r3, [r3, #0]
    a830:	7adb      	ldrb	r3, [r3, #11]
    a832:	07db      	lsls	r3, r3, #31
    a834:	d500      	bpl.n	a838 <sd_mmc_check+0x6c>
    a836:	e1eb      	b.n	ac10 <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a838:	4bb4      	ldr	r3, [pc, #720]	; (ab0c <sd_mmc_check+0x340>)
    a83a:	681b      	ldr	r3, [r3, #0]
    a83c:	7ada      	ldrb	r2, [r3, #11]
    a83e:	2309      	movs	r3, #9
    a840:	4013      	ands	r3, r2
    a842:	2b01      	cmp	r3, #1
    a844:	d10f      	bne.n	a866 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    a846:	2180      	movs	r1, #128	; 0x80
    a848:	0089      	lsls	r1, r1, #2
    a84a:	48b4      	ldr	r0, [pc, #720]	; (ab1c <sd_mmc_check+0x350>)
    a84c:	4bb1      	ldr	r3, [pc, #708]	; (ab14 <sd_mmc_check+0x348>)
    a84e:	4798      	blx	r3
    a850:	2800      	cmp	r0, #0
    a852:	d0db      	beq.n	a80c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a854:	4bad      	ldr	r3, [pc, #692]	; (ab0c <sd_mmc_check+0x340>)
    a856:	681b      	ldr	r3, [r3, #0]
    a858:	7adb      	ldrb	r3, [r3, #11]
    a85a:	07db      	lsls	r3, r3, #31
    a85c:	d503      	bpl.n	a866 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    a85e:	4bb0      	ldr	r3, [pc, #704]	; (ab20 <sd_mmc_check+0x354>)
    a860:	4798      	blx	r3
    a862:	2800      	cmp	r0, #0
    a864:	d0d2      	beq.n	a80c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    a866:	4baf      	ldr	r3, [pc, #700]	; (ab24 <sd_mmc_check+0x358>)
    a868:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    a86a:	4ba8      	ldr	r3, [pc, #672]	; (ab0c <sd_mmc_check+0x340>)
    a86c:	681b      	ldr	r3, [r3, #0]
    a86e:	2200      	movs	r2, #0
    a870:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    a872:	4ba5      	ldr	r3, [pc, #660]	; (ab08 <sd_mmc_check+0x33c>)
    a874:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    a876:	e7b4      	b.n	a7e2 <sd_mmc_check+0x16>
	resp = driver_get_response();
    a878:	4bab      	ldr	r3, [pc, #684]	; (ab28 <sd_mmc_check+0x35c>)
    a87a:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    a87c:	1c43      	adds	r3, r0, #1
    a87e:	d100      	bne.n	a882 <sd_mmc_check+0xb6>
    a880:	e1c4      	b.n	ac0c <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    a882:	0500      	lsls	r0, r0, #20
    a884:	0d00      	lsrs	r0, r0, #20
    a886:	23d5      	movs	r3, #213	; 0xd5
    a888:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    a88a:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    a88c:	4298      	cmp	r0, r3
    a88e:	d1bd      	bne.n	a80c <sd_mmc_check+0x40>
    a890:	e7cc      	b.n	a82c <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a892:	2100      	movs	r1, #0
    a894:	48a5      	ldr	r0, [pc, #660]	; (ab2c <sd_mmc_check+0x360>)
    a896:	4b9f      	ldr	r3, [pc, #636]	; (ab14 <sd_mmc_check+0x348>)
    a898:	4798      	blx	r3
    a89a:	2800      	cmp	r0, #0
    a89c:	d119      	bne.n	a8d2 <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    a89e:	4b9b      	ldr	r3, [pc, #620]	; (ab0c <sd_mmc_check+0x340>)
    a8a0:	681b      	ldr	r3, [r3, #0]
    a8a2:	2202      	movs	r2, #2
    a8a4:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    a8a6:	2100      	movs	r1, #0
    a8a8:	2088      	movs	r0, #136	; 0x88
    a8aa:	0140      	lsls	r0, r0, #5
    a8ac:	4b99      	ldr	r3, [pc, #612]	; (ab14 <sd_mmc_check+0x348>)
    a8ae:	4798      	blx	r3
    a8b0:	2800      	cmp	r0, #0
    a8b2:	d0ab      	beq.n	a80c <sd_mmc_check+0x40>
    a8b4:	4d9e      	ldr	r5, [pc, #632]	; (ab30 <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    a8b6:	4f97      	ldr	r7, [pc, #604]	; (ab14 <sd_mmc_check+0x348>)
		resp = driver_get_response();
    a8b8:	4e9b      	ldr	r6, [pc, #620]	; (ab28 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    a8ba:	2100      	movs	r1, #0
    a8bc:	489d      	ldr	r0, [pc, #628]	; (ab34 <sd_mmc_check+0x368>)
    a8be:	47b8      	blx	r7
    a8c0:	2800      	cmp	r0, #0
    a8c2:	d0a3      	beq.n	a80c <sd_mmc_check+0x40>
		resp = driver_get_response();
    a8c4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    a8c6:	07c3      	lsls	r3, r0, #31
    a8c8:	d57d      	bpl.n	a9c6 <sd_mmc_check+0x1fa>
    a8ca:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    a8cc:	2d00      	cmp	r5, #0
    a8ce:	d1f4      	bne.n	a8ba <sd_mmc_check+0xee>
    a8d0:	e79c      	b.n	a80c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    a8d2:	4b95      	ldr	r3, [pc, #596]	; (ab28 <sd_mmc_check+0x35c>)
    a8d4:	4798      	blx	r3
    a8d6:	0043      	lsls	r3, r0, #1
    a8d8:	d505      	bpl.n	a8e6 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a8da:	4b8c      	ldr	r3, [pc, #560]	; (ab0c <sd_mmc_check+0x340>)
    a8dc:	681a      	ldr	r2, [r3, #0]
    a8de:	7ad3      	ldrb	r3, [r2, #11]
    a8e0:	2108      	movs	r1, #8
    a8e2:	430b      	orrs	r3, r1
    a8e4:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a8e6:	2100      	movs	r1, #0
    a8e8:	4893      	ldr	r0, [pc, #588]	; (ab38 <sd_mmc_check+0x36c>)
    a8ea:	4b8a      	ldr	r3, [pc, #552]	; (ab14 <sd_mmc_check+0x348>)
    a8ec:	4798      	blx	r3
    a8ee:	2800      	cmp	r0, #0
    a8f0:	d08c      	beq.n	a80c <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a8f2:	4b86      	ldr	r3, [pc, #536]	; (ab0c <sd_mmc_check+0x340>)
    a8f4:	681b      	ldr	r3, [r3, #0]
    a8f6:	7adb      	ldrb	r3, [r3, #11]
    a8f8:	07da      	lsls	r2, r3, #31
    a8fa:	d400      	bmi.n	a8fe <sd_mmc_check+0x132>
    a8fc:	e1a4      	b.n	ac48 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    a8fe:	4b8f      	ldr	r3, [pc, #572]	; (ab3c <sd_mmc_check+0x370>)
    a900:	4798      	blx	r3
    a902:	2800      	cmp	r0, #0
    a904:	d082      	beq.n	a80c <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    a906:	4b81      	ldr	r3, [pc, #516]	; (ab0c <sd_mmc_check+0x340>)
    a908:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a90a:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a90c:	2107      	movs	r1, #7
    a90e:	4019      	ands	r1, r3
    a910:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a912:	488b      	ldr	r0, [pc, #556]	; (ab40 <sd_mmc_check+0x374>)
    a914:	5808      	ldr	r0, [r1, r0]
    a916:	21fa      	movs	r1, #250	; 0xfa
    a918:	0089      	lsls	r1, r1, #2
    a91a:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    a91c:	065b      	lsls	r3, r3, #25
    a91e:	0f1b      	lsrs	r3, r3, #28
    a920:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a922:	4888      	ldr	r0, [pc, #544]	; (ab44 <sd_mmc_check+0x378>)
    a924:	581b      	ldr	r3, [r3, r0]
    a926:	434b      	muls	r3, r1
    a928:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    a92a:	7b93      	ldrb	r3, [r2, #14]
    a92c:	099b      	lsrs	r3, r3, #6
    a92e:	d000      	beq.n	a932 <sd_mmc_check+0x166>
    a930:	e13c      	b.n	abac <sd_mmc_check+0x3e0>
    a932:	7d91      	ldrb	r1, [r2, #22]
    a934:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a936:	7d53      	ldrb	r3, [r2, #21]
    a938:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a93a:	7d10      	ldrb	r0, [r2, #20]
    a93c:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a93e:	4303      	orrs	r3, r0
    a940:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a942:	7e10      	ldrb	r0, [r2, #24]
    a944:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a946:	7dd1      	ldrb	r1, [r2, #23]
    a948:	0049      	lsls	r1, r1, #1
    a94a:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    a94c:	051b      	lsls	r3, r3, #20
    a94e:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    a950:	3301      	adds	r3, #1
    a952:	2107      	movs	r1, #7
    a954:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    a956:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    a958:	408b      	lsls	r3, r1
    a95a:	7cd0      	ldrb	r0, [r2, #19]
    a95c:	210f      	movs	r1, #15
    a95e:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    a960:	408b      	lsls	r3, r1
				/ 1024;
    a962:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    a964:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    a966:	8911      	ldrh	r1, [r2, #8]
    a968:	0409      	lsls	r1, r1, #16
    a96a:	4877      	ldr	r0, [pc, #476]	; (ab48 <sd_mmc_check+0x37c>)
    a96c:	4b69      	ldr	r3, [pc, #420]	; (ab14 <sd_mmc_check+0x348>)
    a96e:	4798      	blx	r3
    a970:	2800      	cmp	r0, #0
    a972:	d100      	bne.n	a976 <sd_mmc_check+0x1aa>
    a974:	e74a      	b.n	a80c <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    a976:	2301      	movs	r3, #1
    a978:	9300      	str	r3, [sp, #0]
    a97a:	2208      	movs	r2, #8
    a97c:	2100      	movs	r1, #0
    a97e:	4873      	ldr	r0, [pc, #460]	; (ab4c <sd_mmc_check+0x380>)
    a980:	4d73      	ldr	r5, [pc, #460]	; (ab50 <sd_mmc_check+0x384>)
    a982:	47a8      	blx	r5
    a984:	2800      	cmp	r0, #0
    a986:	d100      	bne.n	a98a <sd_mmc_check+0x1be>
    a988:	e740      	b.n	a80c <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    a98a:	2101      	movs	r1, #1
    a98c:	a806      	add	r0, sp, #24
    a98e:	4b71      	ldr	r3, [pc, #452]	; (ab54 <sd_mmc_check+0x388>)
    a990:	4798      	blx	r3
    a992:	2800      	cmp	r0, #0
    a994:	d100      	bne.n	a998 <sd_mmc_check+0x1cc>
    a996:	e739      	b.n	a80c <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    a998:	4b6f      	ldr	r3, [pc, #444]	; (ab58 <sd_mmc_check+0x38c>)
    a99a:	4798      	blx	r3
    a99c:	2800      	cmp	r0, #0
    a99e:	d100      	bne.n	a9a2 <sd_mmc_check+0x1d6>
    a9a0:	e734      	b.n	a80c <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a9a2:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    a9a4:	781b      	ldrb	r3, [r3, #0]
    a9a6:	220f      	movs	r2, #15
    a9a8:	4013      	ands	r3, r2
    a9aa:	2b01      	cmp	r3, #1
    a9ac:	d100      	bne.n	a9b0 <sd_mmc_check+0x1e4>
    a9ae:	e119      	b.n	abe4 <sd_mmc_check+0x418>
    a9b0:	2b00      	cmp	r3, #0
    a9b2:	d100      	bne.n	a9b6 <sd_mmc_check+0x1ea>
    a9b4:	e109      	b.n	abca <sd_mmc_check+0x3fe>
    a9b6:	2b02      	cmp	r3, #2
    a9b8:	d100      	bne.n	a9bc <sd_mmc_check+0x1f0>
    a9ba:	e118      	b.n	abee <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    a9bc:	4b53      	ldr	r3, [pc, #332]	; (ab0c <sd_mmc_check+0x340>)
    a9be:	681b      	ldr	r3, [r3, #0]
    a9c0:	2210      	movs	r2, #16
    a9c2:	731a      	strb	r2, [r3, #12]
    a9c4:	e105      	b.n	abd2 <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a9c6:	2100      	movs	r1, #0
    a9c8:	4858      	ldr	r0, [pc, #352]	; (ab2c <sd_mmc_check+0x360>)
    a9ca:	4b52      	ldr	r3, [pc, #328]	; (ab14 <sd_mmc_check+0x348>)
    a9cc:	4798      	blx	r3
    a9ce:	2800      	cmp	r0, #0
    a9d0:	d100      	bne.n	a9d4 <sd_mmc_check+0x208>
    a9d2:	e71b      	b.n	a80c <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    a9d4:	4b54      	ldr	r3, [pc, #336]	; (ab28 <sd_mmc_check+0x35c>)
    a9d6:	4798      	blx	r3
    a9d8:	23c0      	movs	r3, #192	; 0xc0
    a9da:	05db      	lsls	r3, r3, #23
    a9dc:	4018      	ands	r0, r3
    a9de:	2380      	movs	r3, #128	; 0x80
    a9e0:	05db      	lsls	r3, r3, #23
    a9e2:	4298      	cmp	r0, r3
    a9e4:	d105      	bne.n	a9f2 <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a9e6:	4b49      	ldr	r3, [pc, #292]	; (ab0c <sd_mmc_check+0x340>)
    a9e8:	681a      	ldr	r2, [r3, #0]
    a9ea:	7ad1      	ldrb	r1, [r2, #11]
    a9ec:	2308      	movs	r3, #8
    a9ee:	430b      	orrs	r3, r1
    a9f0:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a9f2:	2100      	movs	r1, #0
    a9f4:	4850      	ldr	r0, [pc, #320]	; (ab38 <sd_mmc_check+0x36c>)
    a9f6:	4b47      	ldr	r3, [pc, #284]	; (ab14 <sd_mmc_check+0x348>)
    a9f8:	4798      	blx	r3
    a9fa:	2800      	cmp	r0, #0
    a9fc:	d100      	bne.n	aa00 <sd_mmc_check+0x234>
    a9fe:	e705      	b.n	a80c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    aa00:	4b4e      	ldr	r3, [pc, #312]	; (ab3c <sd_mmc_check+0x370>)
    aa02:	4798      	blx	r3
    aa04:	2800      	cmp	r0, #0
    aa06:	d100      	bne.n	aa0a <sd_mmc_check+0x23e>
    aa08:	e700      	b.n	a80c <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    aa0a:	4b40      	ldr	r3, [pc, #256]	; (ab0c <sd_mmc_check+0x340>)
    aa0c:	681a      	ldr	r2, [r3, #0]
    aa0e:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    aa10:	069b      	lsls	r3, r3, #26
    aa12:	0f1b      	lsrs	r3, r3, #28
    aa14:	2b02      	cmp	r3, #2
    aa16:	d100      	bne.n	aa1a <sd_mmc_check+0x24e>
    aa18:	e0a8      	b.n	ab6c <sd_mmc_check+0x3a0>
    aa1a:	d907      	bls.n	aa2c <sd_mmc_check+0x260>
    aa1c:	2b03      	cmp	r3, #3
    aa1e:	d100      	bne.n	aa22 <sd_mmc_check+0x256>
    aa20:	e0a7      	b.n	ab72 <sd_mmc_check+0x3a6>
    aa22:	2b04      	cmp	r3, #4
    aa24:	d104      	bne.n	aa30 <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    aa26:	2340      	movs	r3, #64	; 0x40
    aa28:	7313      	strb	r3, [r2, #12]
    aa2a:	e003      	b.n	aa34 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    aa2c:	2b01      	cmp	r3, #1
    aa2e:	d066      	beq.n	aafe <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    aa30:	2312      	movs	r3, #18
    aa32:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    aa34:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    aa36:	0659      	lsls	r1, r3, #25
    aa38:	0f09      	lsrs	r1, r1, #28
    aa3a:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    aa3c:	2007      	movs	r0, #7
    aa3e:	4003      	ands	r3, r0
    aa40:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    aa42:	483f      	ldr	r0, [pc, #252]	; (ab40 <sd_mmc_check+0x374>)
    aa44:	5818      	ldr	r0, [r3, r0]
    aa46:	23fa      	movs	r3, #250	; 0xfa
    aa48:	009b      	lsls	r3, r3, #2
    aa4a:	4343      	muls	r3, r0
    aa4c:	4843      	ldr	r0, [pc, #268]	; (ab5c <sd_mmc_check+0x390>)
    aa4e:	5809      	ldr	r1, [r1, r0]
    aa50:	434b      	muls	r3, r1
    aa52:	6013      	str	r3, [r2, #0]
    aa54:	7d91      	ldrb	r1, [r2, #22]
    aa56:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    aa58:	7d53      	ldrb	r3, [r2, #21]
    aa5a:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    aa5c:	7d10      	ldrb	r0, [r2, #20]
    aa5e:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    aa60:	4303      	orrs	r3, r0
    aa62:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    aa64:	051b      	lsls	r3, r3, #20
    aa66:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    aa68:	493d      	ldr	r1, [pc, #244]	; (ab60 <sd_mmc_check+0x394>)
    aa6a:	428b      	cmp	r3, r1
    aa6c:	d00f      	beq.n	aa8e <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    aa6e:	7e10      	ldrb	r0, [r2, #24]
    aa70:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    aa72:	7dd1      	ldrb	r1, [r2, #23]
    aa74:	0049      	lsls	r1, r1, #1
    aa76:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    aa78:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    aa7a:	2007      	movs	r0, #7
    aa7c:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    aa7e:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    aa80:	408b      	lsls	r3, r1
    aa82:	7cd1      	ldrb	r1, [r2, #19]
    aa84:	3008      	adds	r0, #8
    aa86:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    aa88:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    aa8a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    aa8c:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    aa8e:	7b13      	ldrb	r3, [r2, #12]
    aa90:	2b3f      	cmp	r3, #63	; 0x3f
    aa92:	d97b      	bls.n	ab8c <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    aa94:	2100      	movs	r1, #0
    aa96:	9100      	str	r1, [sp, #0]
    aa98:	2301      	movs	r3, #1
    aa9a:	2280      	movs	r2, #128	; 0x80
    aa9c:	0092      	lsls	r2, r2, #2
    aa9e:	4831      	ldr	r0, [pc, #196]	; (ab64 <sd_mmc_check+0x398>)
    aaa0:	4d2b      	ldr	r5, [pc, #172]	; (ab50 <sd_mmc_check+0x384>)
    aaa2:	47a8      	blx	r5
    aaa4:	2800      	cmp	r0, #0
    aaa6:	d100      	bne.n	aaaa <sd_mmc_check+0x2de>
    aaa8:	e6b0      	b.n	a80c <sd_mmc_check+0x40>
    aaaa:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    aaac:	4e2e      	ldr	r6, [pc, #184]	; (ab68 <sd_mmc_check+0x39c>)
    aaae:	a805      	add	r0, sp, #20
    aab0:	47b0      	blx	r6
    aab2:	2800      	cmp	r0, #0
    aab4:	d100      	bne.n	aab8 <sd_mmc_check+0x2ec>
    aab6:	e6a9      	b.n	a80c <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    aab8:	3501      	adds	r5, #1
    aaba:	b2ad      	uxth	r5, r5
    aabc:	2d32      	cmp	r5, #50	; 0x32
    aabe:	d1f6      	bne.n	aaae <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    aac0:	4b12      	ldr	r3, [pc, #72]	; (ab0c <sd_mmc_check+0x340>)
    aac2:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    aac4:	7d8a      	ldrb	r2, [r1, #22]
    aac6:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    aac8:	7d4b      	ldrb	r3, [r1, #21]
    aaca:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    aacc:	7d09      	ldrb	r1, [r1, #20]
    aace:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    aad0:	430b      	orrs	r3, r1
    aad2:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    aad4:	051b      	lsls	r3, r3, #20
    aad6:	0d1b      	lsrs	r3, r3, #20
    aad8:	4a21      	ldr	r2, [pc, #132]	; (ab60 <sd_mmc_check+0x394>)
    aada:	4293      	cmp	r3, r2
    aadc:	d154      	bne.n	ab88 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    aade:	4e22      	ldr	r6, [pc, #136]	; (ab68 <sd_mmc_check+0x39c>)
    aae0:	a806      	add	r0, sp, #24
    aae2:	47b0      	blx	r6
    aae4:	2800      	cmp	r0, #0
    aae6:	d100      	bne.n	aaea <sd_mmc_check+0x31e>
    aae8:	e690      	b.n	a80c <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    aaea:	3501      	adds	r5, #1
    aaec:	b2ad      	uxth	r5, r5
    aaee:	2d35      	cmp	r5, #53	; 0x35
    aaf0:	d9f6      	bls.n	aae0 <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    aaf2:	4b06      	ldr	r3, [pc, #24]	; (ab0c <sd_mmc_check+0x340>)
    aaf4:	681a      	ldr	r2, [r3, #0]
    aaf6:	9b06      	ldr	r3, [sp, #24]
    aaf8:	085b      	lsrs	r3, r3, #1
    aafa:	6053      	str	r3, [r2, #4]
    aafc:	e044      	b.n	ab88 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    aafe:	2314      	movs	r3, #20
    ab00:	7313      	strb	r3, [r2, #12]
    ab02:	e797      	b.n	aa34 <sd_mmc_check+0x268>
    ab04:	0000a6b1 	.word	0x0000a6b1
    ab08:	0000a791 	.word	0x0000a791
    ab0c:	2000046c 	.word	0x2000046c
    ab10:	0000b3ad 	.word	0x0000b3ad
    ab14:	0000b575 	.word	0x0000b575
    ab18:	00005508 	.word	0x00005508
    ab1c:	00001110 	.word	0x00001110
    ab20:	0000a70d 	.word	0x0000a70d
    ab24:	0000a689 	.word	0x0000a689
    ab28:	0000b58d 	.word	0x0000b58d
    ab2c:	0000053a 	.word	0x0000053a
    ab30:	00001bef 	.word	0x00001bef
    ab34:	00001101 	.word	0x00001101
    ab38:	0000113b 	.word	0x0000113b
    ab3c:	0000a745 	.word	0x0000a745
    ab40:	0001b3b4 	.word	0x0001b3b4
    ab44:	0001b3d0 	.word	0x0001b3d0
    ab48:	00001137 	.word	0x00001137
    ab4c:	00081133 	.word	0x00081133
    ab50:	0000b3e5 	.word	0x0000b3e5
    ab54:	0000b611 	.word	0x0000b611
    ab58:	0000b69d 	.word	0x0000b69d
    ab5c:	0001b374 	.word	0x0001b374
    ab60:	00000fff 	.word	0x00000fff
    ab64:	00081108 	.word	0x00081108
    ab68:	0000b599 	.word	0x0000b599
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    ab6c:	2322      	movs	r3, #34	; 0x22
    ab6e:	7313      	strb	r3, [r2, #12]
    ab70:	e760      	b.n	aa34 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    ab72:	2330      	movs	r3, #48	; 0x30
    ab74:	7313      	strb	r3, [r2, #12]
    ab76:	e75d      	b.n	aa34 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    ab78:	a806      	add	r0, sp, #24
    ab7a:	4b36      	ldr	r3, [pc, #216]	; (ac54 <sd_mmc_check+0x488>)
    ab7c:	4798      	blx	r3
    ab7e:	2800      	cmp	r0, #0
    ab80:	d100      	bne.n	ab84 <sd_mmc_check+0x3b8>
    ab82:	e643      	b.n	a80c <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    ab84:	3501      	adds	r5, #1
    ab86:	b2ad      	uxth	r5, r5
    ab88:	2d7f      	cmp	r5, #127	; 0x7f
    ab8a:	d9f5      	bls.n	ab78 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    ab8c:	2180      	movs	r1, #128	; 0x80
    ab8e:	0089      	lsls	r1, r1, #2
    ab90:	4831      	ldr	r0, [pc, #196]	; (ac58 <sd_mmc_check+0x48c>)
    ab92:	4b32      	ldr	r3, [pc, #200]	; (ac5c <sd_mmc_check+0x490>)
    ab94:	4798      	blx	r3
    ab96:	2800      	cmp	r0, #0
    ab98:	d100      	bne.n	ab9c <sd_mmc_check+0x3d0>
    ab9a:	e637      	b.n	a80c <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    ab9c:	4b30      	ldr	r3, [pc, #192]	; (ac60 <sd_mmc_check+0x494>)
    ab9e:	4798      	blx	r3
    aba0:	2800      	cmp	r0, #0
    aba2:	d100      	bne.n	aba6 <sd_mmc_check+0x3da>
    aba4:	e632      	b.n	a80c <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    aba6:	4b2f      	ldr	r3, [pc, #188]	; (ac64 <sd_mmc_check+0x498>)
    aba8:	4798      	blx	r3
    abaa:	e65e      	b.n	a86a <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    abac:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    abae:	7d93      	ldrb	r3, [r2, #22]
    abb0:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    abb2:	7d51      	ldrb	r1, [r2, #21]
    abb4:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    abb6:	430b      	orrs	r3, r1
    abb8:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    abba:	029b      	lsls	r3, r3, #10
				* 512;
    abbc:	085b      	lsrs	r3, r3, #1
    abbe:	2180      	movs	r1, #128	; 0x80
    abc0:	0089      	lsls	r1, r1, #2
    abc2:	468c      	mov	ip, r1
    abc4:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    abc6:	6053      	str	r3, [r2, #4]
    abc8:	e6cd      	b.n	a966 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    abca:	4b27      	ldr	r3, [pc, #156]	; (ac68 <sd_mmc_check+0x49c>)
    abcc:	681b      	ldr	r3, [r3, #0]
    abce:	2210      	movs	r2, #16
    abd0:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    abd2:	4b25      	ldr	r3, [pc, #148]	; (ac68 <sd_mmc_check+0x49c>)
    abd4:	681b      	ldr	r3, [r3, #0]
    abd6:	7adb      	ldrb	r3, [r3, #11]
    abd8:	2209      	movs	r2, #9
    abda:	4013      	ands	r3, r2
    abdc:	2b01      	cmp	r3, #1
    abde:	d000      	beq.n	abe2 <sd_mmc_check+0x416>
    abe0:	e638      	b.n	a854 <sd_mmc_check+0x88>
    abe2:	e630      	b.n	a846 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    abe4:	4b20      	ldr	r3, [pc, #128]	; (ac68 <sd_mmc_check+0x49c>)
    abe6:	681b      	ldr	r3, [r3, #0]
    abe8:	221a      	movs	r2, #26
    abea:	731a      	strb	r2, [r3, #12]
    abec:	e7f1      	b.n	abd2 <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    abee:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    abf0:	789b      	ldrb	r3, [r3, #2]
    abf2:	09db      	lsrs	r3, r3, #7
    abf4:	2b01      	cmp	r3, #1
    abf6:	d104      	bne.n	ac02 <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    abf8:	4b1b      	ldr	r3, [pc, #108]	; (ac68 <sd_mmc_check+0x49c>)
    abfa:	681b      	ldr	r3, [r3, #0]
    abfc:	2230      	movs	r2, #48	; 0x30
    abfe:	731a      	strb	r2, [r3, #12]
    ac00:	e7e7      	b.n	abd2 <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    ac02:	4b19      	ldr	r3, [pc, #100]	; (ac68 <sd_mmc_check+0x49c>)
    ac04:	681b      	ldr	r3, [r3, #0]
    ac06:	2220      	movs	r2, #32
    ac08:	731a      	strb	r2, [r3, #12]
    ac0a:	e7e2      	b.n	abd2 <sd_mmc_check+0x406>
	*v2 = 0;
    ac0c:	2600      	movs	r6, #0
    ac0e:	e60d      	b.n	a82c <sd_mmc_check+0x60>
    ac10:	1e73      	subs	r3, r6, #1
    ac12:	419e      	sbcs	r6, r3
    ac14:	07b3      	lsls	r3, r6, #30
    ac16:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    ac18:	4d14      	ldr	r5, [pc, #80]	; (ac6c <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    ac1a:	4f10      	ldr	r7, [pc, #64]	; (ac5c <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    ac1c:	46b8      	mov	r8, r7
		resp = driver_get_response();
    ac1e:	4e14      	ldr	r6, [pc, #80]	; (ac70 <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    ac20:	2100      	movs	r1, #0
    ac22:	4814      	ldr	r0, [pc, #80]	; (ac74 <sd_mmc_check+0x4a8>)
    ac24:	47b8      	blx	r7
    ac26:	2800      	cmp	r0, #0
    ac28:	d100      	bne.n	ac2c <sd_mmc_check+0x460>
    ac2a:	e638      	b.n	a89e <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    ac2c:	9903      	ldr	r1, [sp, #12]
    ac2e:	4812      	ldr	r0, [pc, #72]	; (ac78 <sd_mmc_check+0x4ac>)
    ac30:	47c0      	blx	r8
    ac32:	2800      	cmp	r0, #0
    ac34:	d100      	bne.n	ac38 <sd_mmc_check+0x46c>
    ac36:	e632      	b.n	a89e <sd_mmc_check+0xd2>
		resp = driver_get_response();
    ac38:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    ac3a:	07c3      	lsls	r3, r0, #31
    ac3c:	d400      	bmi.n	ac40 <sd_mmc_check+0x474>
    ac3e:	e628      	b.n	a892 <sd_mmc_check+0xc6>
    ac40:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    ac42:	2d00      	cmp	r5, #0
    ac44:	d1ec      	bne.n	ac20 <sd_mmc_check+0x454>
    ac46:	e62a      	b.n	a89e <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    ac48:	2209      	movs	r2, #9
    ac4a:	4013      	ands	r3, r2
    ac4c:	2b01      	cmp	r3, #1
    ac4e:	d000      	beq.n	ac52 <sd_mmc_check+0x486>
    ac50:	e609      	b.n	a866 <sd_mmc_check+0x9a>
    ac52:	e5f8      	b.n	a846 <sd_mmc_check+0x7a>
    ac54:	0000b599 	.word	0x0000b599
    ac58:	00001110 	.word	0x00001110
    ac5c:	0000b575 	.word	0x0000b575
    ac60:	0000a70d 	.word	0x0000a70d
    ac64:	0000a689 	.word	0x0000a689
    ac68:	2000046c 	.word	0x2000046c
    ac6c:	00001bef 	.word	0x00001bef
    ac70:	0000b58d 	.word	0x0000b58d
    ac74:	00001137 	.word	0x00001137
    ac78:	00001129 	.word	0x00001129

0000ac7c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    ac7c:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    ac7e:	4b06      	ldr	r3, [pc, #24]	; (ac98 <sd_mmc_get_type+0x1c>)
    ac80:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    ac82:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    ac84:	2800      	cmp	r0, #0
    ac86:	d001      	beq.n	ac8c <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    ac88:	0018      	movs	r0, r3
    ac8a:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    ac8c:	4b03      	ldr	r3, [pc, #12]	; (ac9c <sd_mmc_get_type+0x20>)
    ac8e:	4798      	blx	r3
	return sd_mmc_card->type;
    ac90:	4b03      	ldr	r3, [pc, #12]	; (aca0 <sd_mmc_get_type+0x24>)
    ac92:	681b      	ldr	r3, [r3, #0]
    ac94:	7adb      	ldrb	r3, [r3, #11]
    ac96:	e7f7      	b.n	ac88 <sd_mmc_get_type+0xc>
    ac98:	0000a6b1 	.word	0x0000a6b1
    ac9c:	0000a791 	.word	0x0000a791
    aca0:	2000046c 	.word	0x2000046c

0000aca4 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    aca4:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    aca6:	4b06      	ldr	r3, [pc, #24]	; (acc0 <sd_mmc_get_capacity+0x1c>)
    aca8:	4798      	blx	r3
		return 0;
    acaa:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    acac:	2800      	cmp	r0, #0
    acae:	d001      	beq.n	acb4 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    acb0:	0018      	movs	r0, r3
    acb2:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    acb4:	4b03      	ldr	r3, [pc, #12]	; (acc4 <sd_mmc_get_capacity+0x20>)
    acb6:	4798      	blx	r3
	return sd_mmc_card->capacity;
    acb8:	4b03      	ldr	r3, [pc, #12]	; (acc8 <sd_mmc_get_capacity+0x24>)
    acba:	681b      	ldr	r3, [r3, #0]
    acbc:	685b      	ldr	r3, [r3, #4]
    acbe:	e7f7      	b.n	acb0 <sd_mmc_get_capacity+0xc>
    acc0:	0000a6b1 	.word	0x0000a6b1
    acc4:	0000a791 	.word	0x0000a791
    acc8:	2000046c 	.word	0x2000046c

0000accc <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    accc:	2000      	movs	r0, #0
    acce:	4770      	bx	lr

0000acd0 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    acd0:	b570      	push	{r4, r5, r6, lr}
    acd2:	b082      	sub	sp, #8
    acd4:	000e      	movs	r6, r1
    acd6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    acd8:	4b16      	ldr	r3, [pc, #88]	; (ad34 <sd_mmc_init_read_blocks+0x64>)
    acda:	4798      	blx	r3
    acdc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    acde:	d002      	beq.n	ace6 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    ace0:	0020      	movs	r0, r4
    ace2:	b002      	add	sp, #8
    ace4:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    ace6:	4b14      	ldr	r3, [pc, #80]	; (ad38 <sd_mmc_init_read_blocks+0x68>)
    ace8:	4798      	blx	r3
    acea:	2800      	cmp	r0, #0
    acec:	d017      	beq.n	ad1e <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    acee:	2d01      	cmp	r5, #1
    acf0:	d919      	bls.n	ad26 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    acf2:	4812      	ldr	r0, [pc, #72]	; (ad3c <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    acf4:	4b12      	ldr	r3, [pc, #72]	; (ad40 <sd_mmc_init_read_blocks+0x70>)
    acf6:	681b      	ldr	r3, [r3, #0]
    acf8:	7adb      	ldrb	r3, [r3, #11]
    acfa:	071b      	lsls	r3, r3, #28
    acfc:	d400      	bmi.n	ad00 <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    acfe:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    ad00:	2301      	movs	r3, #1
    ad02:	9300      	str	r3, [sp, #0]
    ad04:	002b      	movs	r3, r5
    ad06:	2280      	movs	r2, #128	; 0x80
    ad08:	0092      	lsls	r2, r2, #2
    ad0a:	0031      	movs	r1, r6
    ad0c:	4e0d      	ldr	r6, [pc, #52]	; (ad44 <sd_mmc_init_read_blocks+0x74>)
    ad0e:	47b0      	blx	r6
    ad10:	2800      	cmp	r0, #0
    ad12:	d00a      	beq.n	ad2a <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    ad14:	4b0c      	ldr	r3, [pc, #48]	; (ad48 <sd_mmc_init_read_blocks+0x78>)
    ad16:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    ad18:	4b0c      	ldr	r3, [pc, #48]	; (ad4c <sd_mmc_init_read_blocks+0x7c>)
    ad1a:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    ad1c:	e7e0      	b.n	ace0 <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    ad1e:	4b0c      	ldr	r3, [pc, #48]	; (ad50 <sd_mmc_init_read_blocks+0x80>)
    ad20:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ad22:	3405      	adds	r4, #5
    ad24:	e7dc      	b.n	ace0 <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    ad26:	480b      	ldr	r0, [pc, #44]	; (ad54 <sd_mmc_init_read_blocks+0x84>)
    ad28:	e7e4      	b.n	acf4 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    ad2a:	4b09      	ldr	r3, [pc, #36]	; (ad50 <sd_mmc_init_read_blocks+0x80>)
    ad2c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ad2e:	2405      	movs	r4, #5
    ad30:	e7d6      	b.n	ace0 <sd_mmc_init_read_blocks+0x10>
    ad32:	46c0      	nop			; (mov r8, r8)
    ad34:	0000a6b1 	.word	0x0000a6b1
    ad38:	0000a70d 	.word	0x0000a70d
    ad3c:	00101112 	.word	0x00101112
    ad40:	2000046c 	.word	0x2000046c
    ad44:	0000b3e5 	.word	0x0000b3e5
    ad48:	20000490 	.word	0x20000490
    ad4c:	20000492 	.word	0x20000492
    ad50:	0000a791 	.word	0x0000a791
    ad54:	00081111 	.word	0x00081111

0000ad58 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    ad58:	b510      	push	{r4, lr}
    ad5a:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    ad5c:	4b07      	ldr	r3, [pc, #28]	; (ad7c <sd_mmc_start_read_blocks+0x24>)
    ad5e:	4798      	blx	r3
    ad60:	2800      	cmp	r0, #0
    ad62:	d104      	bne.n	ad6e <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    ad64:	2200      	movs	r2, #0
    ad66:	4b06      	ldr	r3, [pc, #24]	; (ad80 <sd_mmc_start_read_blocks+0x28>)
    ad68:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    ad6a:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    ad6c:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    ad6e:	4a04      	ldr	r2, [pc, #16]	; (ad80 <sd_mmc_start_read_blocks+0x28>)
    ad70:	8813      	ldrh	r3, [r2, #0]
    ad72:	1b1c      	subs	r4, r3, r4
    ad74:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    ad76:	2000      	movs	r0, #0
    ad78:	e7f8      	b.n	ad6c <sd_mmc_start_read_blocks+0x14>
    ad7a:	46c0      	nop			; (mov r8, r8)
    ad7c:	0000b611 	.word	0x0000b611
    ad80:	20000490 	.word	0x20000490

0000ad84 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    ad84:	b510      	push	{r4, lr}
    ad86:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    ad88:	4b14      	ldr	r3, [pc, #80]	; (addc <sd_mmc_wait_end_of_read_blocks+0x58>)
    ad8a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ad8c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    ad8e:	2800      	cmp	r0, #0
    ad90:	d101      	bne.n	ad96 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    ad92:	0018      	movs	r0, r3
    ad94:	bd10      	pop	{r4, pc}
	if (abort) {
    ad96:	2c00      	cmp	r4, #0
    ad98:	d010      	beq.n	adbc <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    ad9a:	2200      	movs	r2, #0
    ad9c:	4b10      	ldr	r3, [pc, #64]	; (ade0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    ad9e:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    ada0:	4b10      	ldr	r3, [pc, #64]	; (ade4 <sd_mmc_wait_end_of_read_blocks+0x60>)
    ada2:	881b      	ldrh	r3, [r3, #0]
    ada4:	2b01      	cmp	r3, #1
    ada6:	d00f      	beq.n	adc8 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    ada8:	2100      	movs	r1, #0
    adaa:	480f      	ldr	r0, [pc, #60]	; (ade8 <sd_mmc_wait_end_of_read_blocks+0x64>)
    adac:	4b0f      	ldr	r3, [pc, #60]	; (adec <sd_mmc_wait_end_of_read_blocks+0x68>)
    adae:	4798      	blx	r3
    adb0:	2800      	cmp	r0, #0
    adb2:	d00d      	beq.n	add0 <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    adb4:	4b0e      	ldr	r3, [pc, #56]	; (adf0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    adb6:	4798      	blx	r3
	return SD_MMC_OK;
    adb8:	2300      	movs	r3, #0
    adba:	e7ea      	b.n	ad92 <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    adbc:	4b08      	ldr	r3, [pc, #32]	; (ade0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
    adbe:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    adc0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    adc2:	2a00      	cmp	r2, #0
    adc4:	d0ec      	beq.n	ada0 <sd_mmc_wait_end_of_read_blocks+0x1c>
    adc6:	e7e4      	b.n	ad92 <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    adc8:	4b09      	ldr	r3, [pc, #36]	; (adf0 <sd_mmc_wait_end_of_read_blocks+0x6c>)
    adca:	4798      	blx	r3
		return SD_MMC_OK;
    adcc:	2300      	movs	r3, #0
    adce:	e7e0      	b.n	ad92 <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    add0:	2100      	movs	r1, #0
    add2:	4805      	ldr	r0, [pc, #20]	; (ade8 <sd_mmc_wait_end_of_read_blocks+0x64>)
    add4:	4b05      	ldr	r3, [pc, #20]	; (adec <sd_mmc_wait_end_of_read_blocks+0x68>)
    add6:	4798      	blx	r3
    add8:	e7ec      	b.n	adb4 <sd_mmc_wait_end_of_read_blocks+0x30>
    adda:	46c0      	nop			; (mov r8, r8)
    addc:	0000b69d 	.word	0x0000b69d
    ade0:	20000490 	.word	0x20000490
    ade4:	20000492 	.word	0x20000492
    ade8:	0000310c 	.word	0x0000310c
    adec:	0000b575 	.word	0x0000b575
    adf0:	0000a791 	.word	0x0000a791

0000adf4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    adf4:	b570      	push	{r4, r5, r6, lr}
    adf6:	b082      	sub	sp, #8
    adf8:	000e      	movs	r6, r1
    adfa:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    adfc:	4b11      	ldr	r3, [pc, #68]	; (ae44 <sd_mmc_init_write_blocks+0x50>)
    adfe:	4798      	blx	r3
    ae00:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    ae02:	d116      	bne.n	ae32 <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    ae04:	2d01      	cmp	r5, #1
    ae06:	d917      	bls.n	ae38 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    ae08:	480f      	ldr	r0, [pc, #60]	; (ae48 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    ae0a:	4b10      	ldr	r3, [pc, #64]	; (ae4c <sd_mmc_init_write_blocks+0x58>)
    ae0c:	681b      	ldr	r3, [r3, #0]
    ae0e:	7adb      	ldrb	r3, [r3, #11]
    ae10:	071b      	lsls	r3, r3, #28
    ae12:	d400      	bmi.n	ae16 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    ae14:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    ae16:	2301      	movs	r3, #1
    ae18:	9300      	str	r3, [sp, #0]
    ae1a:	002b      	movs	r3, r5
    ae1c:	2280      	movs	r2, #128	; 0x80
    ae1e:	0092      	lsls	r2, r2, #2
    ae20:	0031      	movs	r1, r6
    ae22:	4e0b      	ldr	r6, [pc, #44]	; (ae50 <sd_mmc_init_write_blocks+0x5c>)
    ae24:	47b0      	blx	r6
    ae26:	2800      	cmp	r0, #0
    ae28:	d008      	beq.n	ae3c <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    ae2a:	4b0a      	ldr	r3, [pc, #40]	; (ae54 <sd_mmc_init_write_blocks+0x60>)
    ae2c:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    ae2e:	4b0a      	ldr	r3, [pc, #40]	; (ae58 <sd_mmc_init_write_blocks+0x64>)
    ae30:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    ae32:	0020      	movs	r0, r4
    ae34:	b002      	add	sp, #8
    ae36:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    ae38:	4808      	ldr	r0, [pc, #32]	; (ae5c <sd_mmc_init_write_blocks+0x68>)
    ae3a:	e7e6      	b.n	ae0a <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    ae3c:	4b08      	ldr	r3, [pc, #32]	; (ae60 <sd_mmc_init_write_blocks+0x6c>)
    ae3e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ae40:	2405      	movs	r4, #5
    ae42:	e7f6      	b.n	ae32 <sd_mmc_init_write_blocks+0x3e>
    ae44:	0000a6b1 	.word	0x0000a6b1
    ae48:	00109119 	.word	0x00109119
    ae4c:	2000046c 	.word	0x2000046c
    ae50:	0000b3e5 	.word	0x0000b3e5
    ae54:	20000490 	.word	0x20000490
    ae58:	20000492 	.word	0x20000492
    ae5c:	00089118 	.word	0x00089118
    ae60:	0000a791 	.word	0x0000a791

0000ae64 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    ae64:	b510      	push	{r4, lr}
    ae66:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    ae68:	4b07      	ldr	r3, [pc, #28]	; (ae88 <sd_mmc_start_write_blocks+0x24>)
    ae6a:	4798      	blx	r3
    ae6c:	2800      	cmp	r0, #0
    ae6e:	d104      	bne.n	ae7a <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    ae70:	2200      	movs	r2, #0
    ae72:	4b06      	ldr	r3, [pc, #24]	; (ae8c <sd_mmc_start_write_blocks+0x28>)
    ae74:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    ae76:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    ae78:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    ae7a:	4a04      	ldr	r2, [pc, #16]	; (ae8c <sd_mmc_start_write_blocks+0x28>)
    ae7c:	8813      	ldrh	r3, [r2, #0]
    ae7e:	1b1c      	subs	r4, r3, r4
    ae80:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    ae82:	2000      	movs	r0, #0
    ae84:	e7f8      	b.n	ae78 <sd_mmc_start_write_blocks+0x14>
    ae86:	46c0      	nop			; (mov r8, r8)
    ae88:	0000b6a1 	.word	0x0000b6a1
    ae8c:	20000490 	.word	0x20000490

0000ae90 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    ae90:	b510      	push	{r4, lr}
    ae92:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    ae94:	4b0e      	ldr	r3, [pc, #56]	; (aed0 <sd_mmc_wait_end_of_write_blocks+0x40>)
    ae96:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    ae98:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    ae9a:	2800      	cmp	r0, #0
    ae9c:	d101      	bne.n	aea2 <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    ae9e:	0018      	movs	r0, r3
    aea0:	bd10      	pop	{r4, pc}
	if (abort) {
    aea2:	2c00      	cmp	r4, #0
    aea4:	d00a      	beq.n	aebc <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    aea6:	2200      	movs	r2, #0
    aea8:	4b0a      	ldr	r3, [pc, #40]	; (aed4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    aeaa:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    aeac:	4b0a      	ldr	r3, [pc, #40]	; (aed8 <sd_mmc_wait_end_of_write_blocks+0x48>)
    aeae:	881b      	ldrh	r3, [r3, #0]
    aeb0:	2b01      	cmp	r3, #1
    aeb2:	d009      	beq.n	aec8 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    aeb4:	4b09      	ldr	r3, [pc, #36]	; (aedc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    aeb6:	4798      	blx	r3
	return SD_MMC_OK;
    aeb8:	2300      	movs	r3, #0
    aeba:	e7f0      	b.n	ae9e <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    aebc:	4b05      	ldr	r3, [pc, #20]	; (aed4 <sd_mmc_wait_end_of_write_blocks+0x44>)
    aebe:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    aec0:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    aec2:	2a00      	cmp	r2, #0
    aec4:	d0f2      	beq.n	aeac <sd_mmc_wait_end_of_write_blocks+0x1c>
    aec6:	e7ea      	b.n	ae9e <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    aec8:	4b04      	ldr	r3, [pc, #16]	; (aedc <sd_mmc_wait_end_of_write_blocks+0x4c>)
    aeca:	4798      	blx	r3
		return SD_MMC_OK;
    aecc:	2300      	movs	r3, #0
    aece:	e7e6      	b.n	ae9e <sd_mmc_wait_end_of_write_blocks+0xe>
    aed0:	0000b721 	.word	0x0000b721
    aed4:	20000490 	.word	0x20000490
    aed8:	20000492 	.word	0x20000492
    aedc:	0000a791 	.word	0x0000a791

0000aee0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    aee0:	b510      	push	{r4, lr}
    aee2:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    aee4:	4b0f      	ldr	r3, [pc, #60]	; (af24 <sd_mmc_test_unit_ready+0x44>)
    aee6:	4798      	blx	r3
    aee8:	2801      	cmp	r0, #1
    aeea:	d019      	beq.n	af20 <sd_mmc_test_unit_ready+0x40>
    aeec:	2800      	cmp	r0, #0
    aeee:	d003      	beq.n	aef8 <sd_mmc_test_unit_ready+0x18>
    aef0:	2802      	cmp	r0, #2
    aef2:	d010      	beq.n	af16 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    aef4:	2001      	movs	r0, #1
	}
}
    aef6:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    aef8:	4b0b      	ldr	r3, [pc, #44]	; (af28 <sd_mmc_test_unit_ready+0x48>)
    aefa:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    aefc:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    aefe:	2b00      	cmp	r3, #0
    af00:	d1f9      	bne.n	aef6 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    af02:	0020      	movs	r0, r4
    af04:	4b09      	ldr	r3, [pc, #36]	; (af2c <sd_mmc_test_unit_ready+0x4c>)
    af06:	4798      	blx	r3
    af08:	0003      	movs	r3, r0
    af0a:	2003      	movs	r0, #3
    af0c:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    af0e:	4243      	negs	r3, r0
    af10:	4158      	adcs	r0, r3
    af12:	0040      	lsls	r0, r0, #1
    af14:	e7ef      	b.n	aef6 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    af16:	2200      	movs	r2, #0
    af18:	4b03      	ldr	r3, [pc, #12]	; (af28 <sd_mmc_test_unit_ready+0x48>)
    af1a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    af1c:	2002      	movs	r0, #2
    af1e:	e7ea      	b.n	aef6 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    af20:	2003      	movs	r0, #3
    af22:	e7e8      	b.n	aef6 <sd_mmc_test_unit_ready+0x16>
    af24:	0000a7cd 	.word	0x0000a7cd
    af28:	20000498 	.word	0x20000498
    af2c:	0000ac7d 	.word	0x0000ac7d

0000af30 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    af30:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    af32:	2000      	movs	r0, #0
    af34:	4b01      	ldr	r3, [pc, #4]	; (af3c <sd_mmc_test_unit_ready_0+0xc>)
    af36:	4798      	blx	r3
}
    af38:	bd10      	pop	{r4, pc}
    af3a:	46c0      	nop			; (mov r8, r8)
    af3c:	0000aee1 	.word	0x0000aee1

0000af40 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    af40:	b570      	push	{r4, r5, r6, lr}
    af42:	0004      	movs	r4, r0
    af44:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    af46:	4b04      	ldr	r3, [pc, #16]	; (af58 <sd_mmc_read_capacity+0x18>)
    af48:	4798      	blx	r3
    af4a:	0040      	lsls	r0, r0, #1
    af4c:	3801      	subs	r0, #1
    af4e:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    af50:	0020      	movs	r0, r4
    af52:	4b02      	ldr	r3, [pc, #8]	; (af5c <sd_mmc_read_capacity+0x1c>)
    af54:	4798      	blx	r3
}
    af56:	bd70      	pop	{r4, r5, r6, pc}
    af58:	0000aca5 	.word	0x0000aca5
    af5c:	0000aee1 	.word	0x0000aee1

0000af60 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    af60:	b510      	push	{r4, lr}
    af62:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    af64:	2000      	movs	r0, #0
    af66:	4b01      	ldr	r3, [pc, #4]	; (af6c <sd_mmc_read_capacity_0+0xc>)
    af68:	4798      	blx	r3
}
    af6a:	bd10      	pop	{r4, pc}
    af6c:	0000af41 	.word	0x0000af41

0000af70 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    af70:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    af72:	2000      	movs	r0, #0
    af74:	4b01      	ldr	r3, [pc, #4]	; (af7c <sd_mmc_wr_protect_0+0xc>)
    af76:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    af78:	bd10      	pop	{r4, pc}
    af7a:	46c0      	nop			; (mov r8, r8)
    af7c:	0000accd 	.word	0x0000accd

0000af80 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    af80:	b510      	push	{r4, lr}
    af82:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    af84:	2201      	movs	r2, #1
    af86:	4b0c      	ldr	r3, [pc, #48]	; (afb8 <sd_mmc_mem_2_ram+0x38>)
    af88:	4798      	blx	r3
    af8a:	2800      	cmp	r0, #0
    af8c:	d004      	beq.n	af98 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    af8e:	3802      	subs	r0, #2
    af90:	4243      	negs	r3, r0
    af92:	4158      	adcs	r0, r3
    af94:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    af96:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    af98:	2101      	movs	r1, #1
    af9a:	0020      	movs	r0, r4
    af9c:	4b07      	ldr	r3, [pc, #28]	; (afbc <sd_mmc_mem_2_ram+0x3c>)
    af9e:	4798      	blx	r3
    afa0:	0003      	movs	r3, r0
		return CTRL_FAIL;
    afa2:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    afa4:	2b00      	cmp	r3, #0
    afa6:	d1f6      	bne.n	af96 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    afa8:	2000      	movs	r0, #0
    afaa:	4b05      	ldr	r3, [pc, #20]	; (afc0 <sd_mmc_mem_2_ram+0x40>)
    afac:	4798      	blx	r3
    afae:	1e43      	subs	r3, r0, #1
    afb0:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    afb2:	b2c0      	uxtb	r0, r0
    afb4:	e7ef      	b.n	af96 <sd_mmc_mem_2_ram+0x16>
    afb6:	46c0      	nop			; (mov r8, r8)
    afb8:	0000acd1 	.word	0x0000acd1
    afbc:	0000ad59 	.word	0x0000ad59
    afc0:	0000ad85 	.word	0x0000ad85

0000afc4 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    afc4:	b510      	push	{r4, lr}
    afc6:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    afc8:	0001      	movs	r1, r0
    afca:	2000      	movs	r0, #0
    afcc:	4b01      	ldr	r3, [pc, #4]	; (afd4 <sd_mmc_mem_2_ram_0+0x10>)
    afce:	4798      	blx	r3
}
    afd0:	bd10      	pop	{r4, pc}
    afd2:	46c0      	nop			; (mov r8, r8)
    afd4:	0000af81 	.word	0x0000af81

0000afd8 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    afd8:	b510      	push	{r4, lr}
    afda:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    afdc:	2201      	movs	r2, #1
    afde:	4b0c      	ldr	r3, [pc, #48]	; (b010 <sd_mmc_ram_2_mem+0x38>)
    afe0:	4798      	blx	r3
    afe2:	2800      	cmp	r0, #0
    afe4:	d004      	beq.n	aff0 <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    afe6:	3802      	subs	r0, #2
    afe8:	4243      	negs	r3, r0
    afea:	4158      	adcs	r0, r3
    afec:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    afee:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    aff0:	2101      	movs	r1, #1
    aff2:	0020      	movs	r0, r4
    aff4:	4b07      	ldr	r3, [pc, #28]	; (b014 <sd_mmc_ram_2_mem+0x3c>)
    aff6:	4798      	blx	r3
    aff8:	0003      	movs	r3, r0
		return CTRL_FAIL;
    affa:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    affc:	2b00      	cmp	r3, #0
    affe:	d1f6      	bne.n	afee <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    b000:	2000      	movs	r0, #0
    b002:	4b05      	ldr	r3, [pc, #20]	; (b018 <sd_mmc_ram_2_mem+0x40>)
    b004:	4798      	blx	r3
    b006:	1e43      	subs	r3, r0, #1
    b008:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    b00a:	b2c0      	uxtb	r0, r0
    b00c:	e7ef      	b.n	afee <sd_mmc_ram_2_mem+0x16>
    b00e:	46c0      	nop			; (mov r8, r8)
    b010:	0000adf5 	.word	0x0000adf5
    b014:	0000ae65 	.word	0x0000ae65
    b018:	0000ae91 	.word	0x0000ae91

0000b01c <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    b01c:	b510      	push	{r4, lr}
    b01e:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    b020:	0001      	movs	r1, r0
    b022:	2000      	movs	r0, #0
    b024:	4b01      	ldr	r3, [pc, #4]	; (b02c <sd_mmc_ram_2_mem_0+0x10>)
    b026:	4798      	blx	r3
}
    b028:	bd10      	pop	{r4, pc}
    b02a:	46c0      	nop			; (mov r8, r8)
    b02c:	0000afd9 	.word	0x0000afd9

0000b030 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    b030:	b500      	push	{lr}
    b032:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    b034:	466b      	mov	r3, sp
    b036:	1dd9      	adds	r1, r3, #7
    b038:	23ff      	movs	r3, #255	; 0xff
    b03a:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    b03c:	2201      	movs	r2, #1
    b03e:	480b      	ldr	r0, [pc, #44]	; (b06c <sd_mmc_spi_start_write_block+0x3c>)
    b040:	4b0b      	ldr	r3, [pc, #44]	; (b070 <sd_mmc_spi_start_write_block+0x40>)
    b042:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    b044:	4b0b      	ldr	r3, [pc, #44]	; (b074 <sd_mmc_spi_start_write_block+0x44>)
    b046:	881b      	ldrh	r3, [r3, #0]
    b048:	2b01      	cmp	r3, #1
    b04a:	d00a      	beq.n	b062 <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    b04c:	22fc      	movs	r2, #252	; 0xfc
    b04e:	466b      	mov	r3, sp
    b050:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    b052:	2201      	movs	r2, #1
    b054:	466b      	mov	r3, sp
    b056:	1d99      	adds	r1, r3, #6
    b058:	4804      	ldr	r0, [pc, #16]	; (b06c <sd_mmc_spi_start_write_block+0x3c>)
    b05a:	4b05      	ldr	r3, [pc, #20]	; (b070 <sd_mmc_spi_start_write_block+0x40>)
    b05c:	4798      	blx	r3
}
    b05e:	b003      	add	sp, #12
    b060:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    b062:	22fe      	movs	r2, #254	; 0xfe
    b064:	466b      	mov	r3, sp
    b066:	719a      	strb	r2, [r3, #6]
    b068:	e7f3      	b.n	b052 <sd_mmc_spi_start_write_block+0x22>
    b06a:	46c0      	nop			; (mov r8, r8)
    b06c:	2000049c 	.word	0x2000049c
    b070:	0000fb61 	.word	0x0000fb61
    b074:	200004e0 	.word	0x200004e0

0000b078 <sd_mmc_spi_wait_busy>:
{
    b078:	b5f0      	push	{r4, r5, r6, r7, lr}
    b07a:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    b07c:	466b      	mov	r3, sp
    b07e:	1ddc      	adds	r4, r3, #7
    b080:	23ff      	movs	r3, #255	; 0xff
    b082:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    b084:	4e12      	ldr	r6, [pc, #72]	; (b0d0 <sd_mmc_spi_wait_busy+0x58>)
    b086:	2201      	movs	r2, #1
    b088:	0021      	movs	r1, r4
    b08a:	0030      	movs	r0, r6
    b08c:	4d11      	ldr	r5, [pc, #68]	; (b0d4 <sd_mmc_spi_wait_busy+0x5c>)
    b08e:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    b090:	23ff      	movs	r3, #255	; 0xff
    b092:	2201      	movs	r2, #1
    b094:	0021      	movs	r1, r4
    b096:	0030      	movs	r0, r6
    b098:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    b09a:	23ff      	movs	r3, #255	; 0xff
    b09c:	2201      	movs	r2, #1
    b09e:	0021      	movs	r1, r4
    b0a0:	0030      	movs	r0, r6
    b0a2:	47a8      	blx	r5
    b0a4:	4c0c      	ldr	r4, [pc, #48]	; (b0d8 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    b0a6:	466b      	mov	r3, sp
    b0a8:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    b0aa:	4e09      	ldr	r6, [pc, #36]	; (b0d0 <sd_mmc_spi_wait_busy+0x58>)
    b0ac:	4f09      	ldr	r7, [pc, #36]	; (b0d4 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    b0ae:	782b      	ldrb	r3, [r5, #0]
    b0b0:	2bff      	cmp	r3, #255	; 0xff
    b0b2:	d009      	beq.n	b0c8 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    b0b4:	23ff      	movs	r3, #255	; 0xff
    b0b6:	2201      	movs	r2, #1
    b0b8:	0029      	movs	r1, r5
    b0ba:	0030      	movs	r0, r6
    b0bc:	47b8      	blx	r7
    b0be:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    b0c0:	2c00      	cmp	r4, #0
    b0c2:	d1f4      	bne.n	b0ae <sd_mmc_spi_wait_busy+0x36>
			return false;
    b0c4:	2000      	movs	r0, #0
    b0c6:	e000      	b.n	b0ca <sd_mmc_spi_wait_busy+0x52>
	return true;
    b0c8:	2001      	movs	r0, #1
}
    b0ca:	b003      	add	sp, #12
    b0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0ce:	46c0      	nop			; (mov r8, r8)
    b0d0:	2000049c 	.word	0x2000049c
    b0d4:	0000f999 	.word	0x0000f999
    b0d8:	00030d40 	.word	0x00030d40

0000b0dc <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    b0dc:	b570      	push	{r4, r5, r6, lr}
    b0de:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    b0e0:	4b14      	ldr	r3, [pc, #80]	; (b134 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    b0e2:	881c      	ldrh	r4, [r3, #0]
    b0e4:	2c01      	cmp	r4, #1
    b0e6:	d023      	beq.n	b130 <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    b0e8:	4b13      	ldr	r3, [pc, #76]	; (b138 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    b0ea:	8819      	ldrh	r1, [r3, #0]
    b0ec:	4b13      	ldr	r3, [pc, #76]	; (b13c <sd_mmc_spi_stop_multiwrite_block+0x60>)
    b0ee:	6818      	ldr	r0, [r3, #0]
    b0f0:	4b13      	ldr	r3, [pc, #76]	; (b140 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    b0f2:	4798      	blx	r3
		return true; // It is not the End of multi write
    b0f4:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    b0f6:	4284      	cmp	r4, r0
    b0f8:	d902      	bls.n	b100 <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    b0fa:	0018      	movs	r0, r3
    b0fc:	b002      	add	sp, #8
    b0fe:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    b100:	466b      	mov	r3, sp
    b102:	1ddc      	adds	r4, r3, #7
    b104:	23ff      	movs	r3, #255	; 0xff
    b106:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    b108:	4e0e      	ldr	r6, [pc, #56]	; (b144 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    b10a:	2201      	movs	r2, #1
    b10c:	0021      	movs	r1, r4
    b10e:	0030      	movs	r0, r6
    b110:	4d0d      	ldr	r5, [pc, #52]	; (b148 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    b112:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    b114:	23fd      	movs	r3, #253	; 0xfd
    b116:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    b118:	2201      	movs	r2, #1
    b11a:	0021      	movs	r1, r4
    b11c:	0030      	movs	r0, r6
    b11e:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    b120:	4b0a      	ldr	r3, [pc, #40]	; (b14c <sd_mmc_spi_stop_multiwrite_block+0x70>)
    b122:	4798      	blx	r3
    b124:	1e03      	subs	r3, r0, #0
    b126:	d1e8      	bne.n	b0fa <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    b128:	2105      	movs	r1, #5
    b12a:	4a09      	ldr	r2, [pc, #36]	; (b150 <sd_mmc_spi_stop_multiwrite_block+0x74>)
    b12c:	7011      	strb	r1, [r2, #0]
		return false;
    b12e:	e7e4      	b.n	b0fa <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    b130:	2301      	movs	r3, #1
    b132:	e7e2      	b.n	b0fa <sd_mmc_spi_stop_multiwrite_block+0x1e>
    b134:	200004e0 	.word	0x200004e0
    b138:	200004d8 	.word	0x200004d8
    b13c:	200004e8 	.word	0x200004e8
    b140:	00017015 	.word	0x00017015
    b144:	2000049c 	.word	0x2000049c
    b148:	0000fb61 	.word	0x0000fb61
    b14c:	0000b079 	.word	0x0000b079
    b150:	200004df 	.word	0x200004df

0000b154 <sd_mmc_spi_start_read_block>:
{
    b154:	b5f0      	push	{r4, r5, r6, r7, lr}
    b156:	b083      	sub	sp, #12
	token = 0;
    b158:	2200      	movs	r2, #0
    b15a:	466b      	mov	r3, sp
    b15c:	71da      	strb	r2, [r3, #7]
    b15e:	4c14      	ldr	r4, [pc, #80]	; (b1b0 <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    b160:	466b      	mov	r3, sp
    b162:	1ddd      	adds	r5, r3, #7
    b164:	4e13      	ldr	r6, [pc, #76]	; (b1b4 <sd_mmc_spi_start_read_block+0x60>)
    b166:	4f14      	ldr	r7, [pc, #80]	; (b1b8 <sd_mmc_spi_start_read_block+0x64>)
    b168:	23ff      	movs	r3, #255	; 0xff
    b16a:	2201      	movs	r2, #1
    b16c:	0029      	movs	r1, r5
    b16e:	0030      	movs	r0, r6
    b170:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    b172:	782b      	ldrb	r3, [r5, #0]
    b174:	220f      	movs	r2, #15
    b176:	0019      	movs	r1, r3
    b178:	4391      	bics	r1, r2
    b17a:	1e0a      	subs	r2, r1, #0
    b17c:	d009      	beq.n	b192 <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    b17e:	2bfe      	cmp	r3, #254	; 0xfe
    b180:	d013      	beq.n	b1aa <sd_mmc_spi_start_read_block+0x56>
    b182:	3c01      	subs	r4, #1
		if (i-- == 0) {
    b184:	2c00      	cmp	r4, #0
    b186:	d1ef      	bne.n	b168 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    b188:	2204      	movs	r2, #4
    b18a:	4b0c      	ldr	r3, [pc, #48]	; (b1bc <sd_mmc_spi_start_read_block+0x68>)
    b18c:	701a      	strb	r2, [r3, #0]
			return false;
    b18e:	2000      	movs	r0, #0
    b190:	e00c      	b.n	b1ac <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    b192:	075b      	lsls	r3, r3, #29
    b194:	d004      	beq.n	b1a0 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    b196:	3207      	adds	r2, #7
    b198:	4b08      	ldr	r3, [pc, #32]	; (b1bc <sd_mmc_spi_start_read_block+0x68>)
    b19a:	701a      	strb	r2, [r3, #0]
			return false;
    b19c:	2000      	movs	r0, #0
    b19e:	e005      	b.n	b1ac <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    b1a0:	220b      	movs	r2, #11
    b1a2:	4b06      	ldr	r3, [pc, #24]	; (b1bc <sd_mmc_spi_start_read_block+0x68>)
    b1a4:	701a      	strb	r2, [r3, #0]
			return false;
    b1a6:	2000      	movs	r0, #0
    b1a8:	e000      	b.n	b1ac <sd_mmc_spi_start_read_block+0x58>
	return true;
    b1aa:	2001      	movs	r0, #1
}
    b1ac:	b003      	add	sp, #12
    b1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1b0:	0007a120 	.word	0x0007a120
    b1b4:	2000049c 	.word	0x2000049c
    b1b8:	0000f999 	.word	0x0000f999
    b1bc:	200004df 	.word	0x200004df

0000b1c0 <sd_mmc_spi_stop_write_block>:
{
    b1c0:	b530      	push	{r4, r5, lr}
    b1c2:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    b1c4:	a901      	add	r1, sp, #4
    b1c6:	2301      	movs	r3, #1
    b1c8:	425b      	negs	r3, r3
    b1ca:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    b1cc:	4d14      	ldr	r5, [pc, #80]	; (b220 <sd_mmc_spi_stop_write_block+0x60>)
    b1ce:	2202      	movs	r2, #2
    b1d0:	0028      	movs	r0, r5
    b1d2:	4b14      	ldr	r3, [pc, #80]	; (b224 <sd_mmc_spi_stop_write_block+0x64>)
    b1d4:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    b1d6:	466b      	mov	r3, sp
    b1d8:	1ddc      	adds	r4, r3, #7
    b1da:	23ff      	movs	r3, #255	; 0xff
    b1dc:	2201      	movs	r2, #1
    b1de:	0021      	movs	r1, r4
    b1e0:	0028      	movs	r0, r5
    b1e2:	4d11      	ldr	r5, [pc, #68]	; (b228 <sd_mmc_spi_stop_write_block+0x68>)
    b1e4:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    b1e6:	7822      	ldrb	r2, [r4, #0]
    b1e8:	2311      	movs	r3, #17
    b1ea:	4013      	ands	r3, r2
    b1ec:	2b01      	cmp	r3, #1
    b1ee:	d005      	beq.n	b1fc <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    b1f0:	2201      	movs	r2, #1
    b1f2:	4b0e      	ldr	r3, [pc, #56]	; (b22c <sd_mmc_spi_stop_write_block+0x6c>)
    b1f4:	701a      	strb	r2, [r3, #0]
		return false;
    b1f6:	2000      	movs	r0, #0
}
    b1f8:	b003      	add	sp, #12
    b1fa:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    b1fc:	231e      	movs	r3, #30
    b1fe:	401a      	ands	r2, r3
    b200:	2a04      	cmp	r2, #4
    b202:	d00b      	beq.n	b21c <sd_mmc_spi_stop_write_block+0x5c>
    b204:	2a0a      	cmp	r2, #10
    b206:	d104      	bne.n	b212 <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    b208:	3a02      	subs	r2, #2
    b20a:	4b08      	ldr	r3, [pc, #32]	; (b22c <sd_mmc_spi_stop_write_block+0x6c>)
    b20c:	701a      	strb	r2, [r3, #0]
		return false;
    b20e:	2000      	movs	r0, #0
    b210:	e7f2      	b.n	b1f8 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    b212:	220a      	movs	r2, #10
    b214:	4b05      	ldr	r3, [pc, #20]	; (b22c <sd_mmc_spi_stop_write_block+0x6c>)
    b216:	701a      	strb	r2, [r3, #0]
		return false;
    b218:	2000      	movs	r0, #0
    b21a:	e7ed      	b.n	b1f8 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    b21c:	2001      	movs	r0, #1
    b21e:	e7eb      	b.n	b1f8 <sd_mmc_spi_stop_write_block+0x38>
    b220:	2000049c 	.word	0x2000049c
    b224:	0000fb61 	.word	0x0000fb61
    b228:	0000f999 	.word	0x0000f999
    b22c:	200004df 	.word	0x200004df

0000b230 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    b230:	b570      	push	{r4, r5, r6, lr}
    b232:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b234:	2300      	movs	r3, #0
    b236:	4a2d      	ldr	r2, [pc, #180]	; (b2ec <sd_mmc_spi_init+0xbc>)
    b238:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    b23a:	ac02      	add	r4, sp, #8
    b23c:	2501      	movs	r5, #1
    b23e:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    b240:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    b242:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    b244:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    b246:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    b248:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    b24a:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    b24c:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    b24e:	2224      	movs	r2, #36	; 0x24
    b250:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    b252:	3a18      	subs	r2, #24
    b254:	2100      	movs	r1, #0
    b256:	a808      	add	r0, sp, #32
    b258:	4b25      	ldr	r3, [pc, #148]	; (b2f0 <sd_mmc_spi_init+0xc0>)
    b25a:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    b25c:	2380      	movs	r3, #128	; 0x80
    b25e:	025b      	lsls	r3, r3, #9
    b260:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    b262:	4b24      	ldr	r3, [pc, #144]	; (b2f4 <sd_mmc_spi_init+0xc4>)
    b264:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    b266:	4b24      	ldr	r3, [pc, #144]	; (b2f8 <sd_mmc_spi_init+0xc8>)
    b268:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    b26a:	4b24      	ldr	r3, [pc, #144]	; (b2fc <sd_mmc_spi_init+0xcc>)
    b26c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    b26e:	4b24      	ldr	r3, [pc, #144]	; (b300 <sd_mmc_spi_init+0xd0>)
    b270:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    b272:	4b24      	ldr	r3, [pc, #144]	; (b304 <sd_mmc_spi_init+0xd4>)
    b274:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    b276:	4e24      	ldr	r6, [pc, #144]	; (b308 <sd_mmc_spi_init+0xd8>)
    b278:	0022      	movs	r2, r4
    b27a:	4924      	ldr	r1, [pc, #144]	; (b30c <sd_mmc_spi_init+0xdc>)
    b27c:	0030      	movs	r0, r6
    b27e:	4b24      	ldr	r3, [pc, #144]	; (b310 <sd_mmc_spi_init+0xe0>)
    b280:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    b282:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b284:	0020      	movs	r0, r4
    b286:	4b23      	ldr	r3, [pc, #140]	; (b314 <sd_mmc_spi_init+0xe4>)
    b288:	4798      	blx	r3
    b28a:	231f      	movs	r3, #31
    b28c:	4018      	ands	r0, r3
    b28e:	4085      	lsls	r5, r0
    b290:	4b21      	ldr	r3, [pc, #132]	; (b318 <sd_mmc_spi_init+0xe8>)
    b292:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b294:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    b296:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    b298:	2b00      	cmp	r3, #0
    b29a:	d1fc      	bne.n	b296 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b29c:	6823      	ldr	r3, [r4, #0]
    b29e:	2202      	movs	r2, #2
    b2a0:	4313      	orrs	r3, r2
    b2a2:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    b2a4:	4a1d      	ldr	r2, [pc, #116]	; (b31c <sd_mmc_spi_init+0xec>)
    b2a6:	2300      	movs	r3, #0
    b2a8:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    b2aa:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    b2ac:	491c      	ldr	r1, [pc, #112]	; (b320 <sd_mmc_spi_init+0xf0>)
    b2ae:	7808      	ldrb	r0, [r1, #0]
    b2b0:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    b2b2:	4c1c      	ldr	r4, [pc, #112]	; (b324 <sd_mmc_spi_init+0xf4>)
    b2b4:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    b2b6:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    b2b8:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    b2ba:	a901      	add	r1, sp, #4
    b2bc:	2201      	movs	r2, #1
    b2be:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    b2c0:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    b2c2:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    b2c4:	4b18      	ldr	r3, [pc, #96]	; (b328 <sd_mmc_spi_init+0xf8>)
    b2c6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    b2c8:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    b2ca:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    b2cc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    b2ce:	2900      	cmp	r1, #0
    b2d0:	d104      	bne.n	b2dc <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    b2d2:	0953      	lsrs	r3, r2, #5
    b2d4:	01db      	lsls	r3, r3, #7
    b2d6:	4915      	ldr	r1, [pc, #84]	; (b32c <sd_mmc_spi_init+0xfc>)
    b2d8:	468c      	mov	ip, r1
    b2da:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b2dc:	211f      	movs	r1, #31
    b2de:	4011      	ands	r1, r2
    b2e0:	2201      	movs	r2, #1
    b2e2:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    b2e4:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    b2e6:	b010      	add	sp, #64	; 0x40
    b2e8:	bd70      	pop	{r4, r5, r6, pc}
    b2ea:	46c0      	nop			; (mov r8, r8)
    b2ec:	200004df 	.word	0x200004df
    b2f0:	0001900b 	.word	0x0001900b
    b2f4:	00100002 	.word	0x00100002
    b2f8:	00110002 	.word	0x00110002
    b2fc:	00120002 	.word	0x00120002
    b300:	00130002 	.word	0x00130002
    b304:	00061a80 	.word	0x00061a80
    b308:	2000049c 	.word	0x2000049c
    b30c:	42000c00 	.word	0x42000c00
    b310:	0000f7c1 	.word	0x0000f7c1
    b314:	0000f679 	.word	0x0000f679
    b318:	e000e100 	.word	0xe000e100
    b31c:	200004ec 	.word	0x200004ec
    b320:	20000004 	.word	0x20000004
    b324:	200004dc 	.word	0x200004dc
    b328:	0000f065 	.word	0x0000f065
    b32c:	41004400 	.word	0x41004400

0000b330 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b332:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b334:	2200      	movs	r2, #0
    b336:	4b0d      	ldr	r3, [pc, #52]	; (b36c <sd_mmc_spi_select_device+0x3c>)
    b338:	701a      	strb	r2, [r3, #0]
    b33a:	000c      	movs	r4, r1
    b33c:	4b0c      	ldr	r3, [pc, #48]	; (b370 <sd_mmc_spi_select_device+0x40>)
    b33e:	4299      	cmp	r1, r3
    b340:	d900      	bls.n	b344 <sd_mmc_spi_select_device+0x14>
    b342:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    b344:	4d0b      	ldr	r5, [pc, #44]	; (b374 <sd_mmc_spi_select_device+0x44>)
    b346:	4e0c      	ldr	r6, [pc, #48]	; (b378 <sd_mmc_spi_select_device+0x48>)
    b348:	e001      	b.n	b34e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    b34a:	08e3      	lsrs	r3, r4, #3
    b34c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    b34e:	0021      	movs	r1, r4
    b350:	0028      	movs	r0, r5
    b352:	47b0      	blx	r6
    b354:	2817      	cmp	r0, #23
    b356:	d0f8      	beq.n	b34a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    b358:	0079      	lsls	r1, r7, #1
    b35a:	19cf      	adds	r7, r1, r7
    b35c:	4907      	ldr	r1, [pc, #28]	; (b37c <sd_mmc_spi_select_device+0x4c>)
    b35e:	19c9      	adds	r1, r1, r7
    b360:	2201      	movs	r2, #1
    b362:	4804      	ldr	r0, [pc, #16]	; (b374 <sd_mmc_spi_select_device+0x44>)
    b364:	4b06      	ldr	r3, [pc, #24]	; (b380 <sd_mmc_spi_select_device+0x50>)
    b366:	4798      	blx	r3
}
    b368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b36a:	46c0      	nop			; (mov r8, r8)
    b36c:	200004df 	.word	0x200004df
    b370:	00989680 	.word	0x00989680
    b374:	2000049c 	.word	0x2000049c
    b378:	0000f709 	.word	0x0000f709
    b37c:	200004dc 	.word	0x200004dc
    b380:	0000fa6d 	.word	0x0000fa6d

0000b384 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    b384:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b386:	2200      	movs	r2, #0
    b388:	4b04      	ldr	r3, [pc, #16]	; (b39c <sd_mmc_spi_deselect_device+0x18>)
    b38a:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    b38c:	0041      	lsls	r1, r0, #1
    b38e:	1808      	adds	r0, r1, r0
    b390:	4903      	ldr	r1, [pc, #12]	; (b3a0 <sd_mmc_spi_deselect_device+0x1c>)
    b392:	1809      	adds	r1, r1, r0
    b394:	4803      	ldr	r0, [pc, #12]	; (b3a4 <sd_mmc_spi_deselect_device+0x20>)
    b396:	4b04      	ldr	r3, [pc, #16]	; (b3a8 <sd_mmc_spi_deselect_device+0x24>)
    b398:	4798      	blx	r3
}
    b39a:	bd10      	pop	{r4, pc}
    b39c:	200004df 	.word	0x200004df
    b3a0:	200004dc 	.word	0x200004dc
    b3a4:	2000049c 	.word	0x2000049c
    b3a8:	0000fa6d 	.word	0x0000fa6d

0000b3ac <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    b3ac:	b570      	push	{r4, r5, r6, lr}
    b3ae:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    b3b0:	22ff      	movs	r2, #255	; 0xff
    b3b2:	466b      	mov	r3, sp
    b3b4:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b3b6:	2200      	movs	r2, #0
    b3b8:	4b07      	ldr	r3, [pc, #28]	; (b3d8 <sd_mmc_spi_send_clock+0x2c>)
    b3ba:	701a      	strb	r2, [r3, #0]
    b3bc:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    b3be:	4e07      	ldr	r6, [pc, #28]	; (b3dc <sd_mmc_spi_send_clock+0x30>)
    b3c0:	4d07      	ldr	r5, [pc, #28]	; (b3e0 <sd_mmc_spi_send_clock+0x34>)
    b3c2:	2201      	movs	r2, #1
    b3c4:	466b      	mov	r3, sp
    b3c6:	1dd9      	adds	r1, r3, #7
    b3c8:	0030      	movs	r0, r6
    b3ca:	47a8      	blx	r5
    b3cc:	3c01      	subs	r4, #1
    b3ce:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    b3d0:	2c00      	cmp	r4, #0
    b3d2:	d1f6      	bne.n	b3c2 <sd_mmc_spi_send_clock+0x16>
	}
}
    b3d4:	b002      	add	sp, #8
    b3d6:	bd70      	pop	{r4, r5, r6, pc}
    b3d8:	200004df 	.word	0x200004df
    b3dc:	2000049c 	.word	0x2000049c
    b3e0:	0000fb61 	.word	0x0000fb61

0000b3e4 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    b3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3e6:	46c6      	mov	lr, r8
    b3e8:	b500      	push	{lr}
    b3ea:	b086      	sub	sp, #24
    b3ec:	4680      	mov	r8, r0
    b3ee:	9200      	str	r2, [sp, #0]
    b3f0:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    b3f2:	22ff      	movs	r2, #255	; 0xff
    b3f4:	230f      	movs	r3, #15
    b3f6:	a802      	add	r0, sp, #8
    b3f8:	4684      	mov	ip, r0
    b3fa:	4463      	add	r3, ip
    b3fc:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b3fe:	2200      	movs	r2, #0
    b400:	4b53      	ldr	r3, [pc, #332]	; (b550 <sd_mmc_spi_adtc_start+0x16c>)
    b402:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    b404:	ab04      	add	r3, sp, #16
    b406:	323f      	adds	r2, #63	; 0x3f
    b408:	4640      	mov	r0, r8
    b40a:	4002      	ands	r2, r0
    b40c:	2040      	movs	r0, #64	; 0x40
    b40e:	4302      	orrs	r2, r0
    b410:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    b412:	0e0a      	lsrs	r2, r1, #24
    b414:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    b416:	0c0a      	lsrs	r2, r1, #16
    b418:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    b41a:	0a0a      	lsrs	r2, r1, #8
    b41c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    b41e:	7119      	strb	r1, [r3, #4]
    b420:	2700      	movs	r7, #0
	crc = 0;
    b422:	2300      	movs	r3, #0
		value = *buf++;
    b424:	a904      	add	r1, sp, #16
    b426:	2208      	movs	r2, #8
				crc ^= 0x09;
    b428:	2409      	movs	r4, #9
    b42a:	e011      	b.n	b450 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    b42c:	0076      	lsls	r6, r6, #1
    b42e:	b2f6      	uxtb	r6, r6
    b430:	3801      	subs	r0, #1
    b432:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    b434:	2800      	cmp	r0, #0
    b436:	d008      	beq.n	b44a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    b438:	005b      	lsls	r3, r3, #1
    b43a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    b43c:	001d      	movs	r5, r3
    b43e:	4075      	eors	r5, r6
    b440:	062d      	lsls	r5, r5, #24
    b442:	d5f3      	bpl.n	b42c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    b444:	4063      	eors	r3, r4
    b446:	b2db      	uxtb	r3, r3
    b448:	e7f0      	b.n	b42c <sd_mmc_spi_adtc_start+0x48>
    b44a:	3701      	adds	r7, #1
	while (size--) {
    b44c:	2f05      	cmp	r7, #5
    b44e:	d002      	beq.n	b456 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    b450:	5c7e      	ldrb	r6, [r7, r1]
    b452:	0010      	movs	r0, r2
    b454:	e7f0      	b.n	b438 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    b456:	005b      	lsls	r3, r3, #1
    b458:	2201      	movs	r2, #1
    b45a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    b45c:	ac04      	add	r4, sp, #16
    b45e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    b460:	4e3c      	ldr	r6, [pc, #240]	; (b554 <sd_mmc_spi_adtc_start+0x170>)
    b462:	2201      	movs	r2, #1
    b464:	210f      	movs	r1, #15
    b466:	ab02      	add	r3, sp, #8
    b468:	469c      	mov	ip, r3
    b46a:	4461      	add	r1, ip
    b46c:	0030      	movs	r0, r6
    b46e:	4f3a      	ldr	r7, [pc, #232]	; (b558 <sd_mmc_spi_adtc_start+0x174>)
    b470:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    b472:	2206      	movs	r2, #6
    b474:	0021      	movs	r1, r4
    b476:	0030      	movs	r0, r6
    b478:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    b47a:	ab02      	add	r3, sp, #8
    b47c:	1dd9      	adds	r1, r3, #7
    b47e:	23ff      	movs	r3, #255	; 0xff
    b480:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    b482:	2201      	movs	r2, #1
    b484:	0030      	movs	r0, r6
    b486:	4e35      	ldr	r6, [pc, #212]	; (b55c <sd_mmc_spi_adtc_start+0x178>)
    b488:	47b0      	blx	r6
    b48a:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    b48c:	ab02      	add	r3, sp, #8
    b48e:	1dde      	adds	r6, r3, #7
    b490:	4f30      	ldr	r7, [pc, #192]	; (b554 <sd_mmc_spi_adtc_start+0x170>)
    b492:	4d32      	ldr	r5, [pc, #200]	; (b55c <sd_mmc_spi_adtc_start+0x178>)
    b494:	23ff      	movs	r3, #255	; 0xff
    b496:	2201      	movs	r2, #1
    b498:	0031      	movs	r1, r6
    b49a:	0038      	movs	r0, r7
    b49c:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    b49e:	7833      	ldrb	r3, [r6, #0]
    b4a0:	b25a      	sxtb	r2, r3
    b4a2:	2a00      	cmp	r2, #0
    b4a4:	da0b      	bge.n	b4be <sd_mmc_spi_adtc_start+0xda>
    b4a6:	3c01      	subs	r4, #1
    b4a8:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    b4aa:	2c00      	cmp	r4, #0
    b4ac:	d1f2      	bne.n	b494 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    b4ae:	2202      	movs	r2, #2
    b4b0:	4b27      	ldr	r3, [pc, #156]	; (b550 <sd_mmc_spi_adtc_start+0x16c>)
    b4b2:	701a      	strb	r2, [r3, #0]
			return false;
    b4b4:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    b4b6:	b006      	add	sp, #24
    b4b8:	bc04      	pop	{r2}
    b4ba:	4690      	mov	r8, r2
    b4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    b4be:	4a28      	ldr	r2, [pc, #160]	; (b560 <sd_mmc_spi_adtc_start+0x17c>)
    b4c0:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    b4c2:	071a      	lsls	r2, r3, #28
    b4c4:	d41a      	bmi.n	b4fc <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    b4c6:	075a      	lsls	r2, r3, #29
    b4c8:	d41d      	bmi.n	b506 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    b4ca:	2201      	movs	r2, #1
    b4cc:	4393      	bics	r3, r2
    b4ce:	d11f      	bne.n	b510 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    b4d0:	4643      	mov	r3, r8
    b4d2:	049b      	lsls	r3, r3, #18
    b4d4:	d420      	bmi.n	b518 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    b4d6:	4643      	mov	r3, r8
    b4d8:	059b      	lsls	r3, r3, #22
    b4da:	d425      	bmi.n	b528 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    b4dc:	4643      	mov	r3, r8
    b4de:	055b      	lsls	r3, r3, #21
    b4e0:	d42b      	bmi.n	b53a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    b4e2:	4b20      	ldr	r3, [pc, #128]	; (b564 <sd_mmc_spi_adtc_start+0x180>)
    b4e4:	466a      	mov	r2, sp
    b4e6:	8812      	ldrh	r2, [r2, #0]
    b4e8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    b4ea:	4b1f      	ldr	r3, [pc, #124]	; (b568 <sd_mmc_spi_adtc_start+0x184>)
    b4ec:	466a      	mov	r2, sp
    b4ee:	8892      	ldrh	r2, [r2, #4]
    b4f0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    b4f2:	2200      	movs	r2, #0
    b4f4:	4b1d      	ldr	r3, [pc, #116]	; (b56c <sd_mmc_spi_adtc_start+0x188>)
    b4f6:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    b4f8:	2001      	movs	r0, #1
    b4fa:	e7dc      	b.n	b4b6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    b4fc:	2206      	movs	r2, #6
    b4fe:	4b14      	ldr	r3, [pc, #80]	; (b550 <sd_mmc_spi_adtc_start+0x16c>)
    b500:	701a      	strb	r2, [r3, #0]
		return false;
    b502:	2000      	movs	r0, #0
    b504:	e7d7      	b.n	b4b6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    b506:	2209      	movs	r2, #9
    b508:	4b11      	ldr	r3, [pc, #68]	; (b550 <sd_mmc_spi_adtc_start+0x16c>)
    b50a:	701a      	strb	r2, [r3, #0]
		return false;
    b50c:	2000      	movs	r0, #0
    b50e:	e7d2      	b.n	b4b6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    b510:	4b0f      	ldr	r3, [pc, #60]	; (b550 <sd_mmc_spi_adtc_start+0x16c>)
    b512:	701a      	strb	r2, [r3, #0]
		return false;
    b514:	2000      	movs	r0, #0
    b516:	e7ce      	b.n	b4b6 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    b518:	4b15      	ldr	r3, [pc, #84]	; (b570 <sd_mmc_spi_adtc_start+0x18c>)
    b51a:	4798      	blx	r3
    b51c:	2800      	cmp	r0, #0
    b51e:	d1da      	bne.n	b4d6 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    b520:	2203      	movs	r2, #3
    b522:	4b0b      	ldr	r3, [pc, #44]	; (b550 <sd_mmc_spi_adtc_start+0x16c>)
    b524:	701a      	strb	r2, [r3, #0]
			return false;
    b526:	e7c6      	b.n	b4b6 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    b528:	490d      	ldr	r1, [pc, #52]	; (b560 <sd_mmc_spi_adtc_start+0x17c>)
    b52a:	2300      	movs	r3, #0
    b52c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    b52e:	33ff      	adds	r3, #255	; 0xff
    b530:	2201      	movs	r2, #1
    b532:	4808      	ldr	r0, [pc, #32]	; (b554 <sd_mmc_spi_adtc_start+0x170>)
    b534:	4e09      	ldr	r6, [pc, #36]	; (b55c <sd_mmc_spi_adtc_start+0x178>)
    b536:	47b0      	blx	r6
    b538:	e7d0      	b.n	b4dc <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    b53a:	4e09      	ldr	r6, [pc, #36]	; (b560 <sd_mmc_spi_adtc_start+0x17c>)
    b53c:	23ff      	movs	r3, #255	; 0xff
    b53e:	2204      	movs	r2, #4
    b540:	0031      	movs	r1, r6
    b542:	4804      	ldr	r0, [pc, #16]	; (b554 <sd_mmc_spi_adtc_start+0x170>)
    b544:	4f05      	ldr	r7, [pc, #20]	; (b55c <sd_mmc_spi_adtc_start+0x178>)
    b546:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    b548:	6833      	ldr	r3, [r6, #0]
    b54a:	ba1b      	rev	r3, r3
    b54c:	6033      	str	r3, [r6, #0]
    b54e:	e7c8      	b.n	b4e2 <sd_mmc_spi_adtc_start+0xfe>
    b550:	200004df 	.word	0x200004df
    b554:	2000049c 	.word	0x2000049c
    b558:	0000fb61 	.word	0x0000fb61
    b55c:	0000f999 	.word	0x0000f999
    b560:	200004e4 	.word	0x200004e4
    b564:	200004d8 	.word	0x200004d8
    b568:	200004e0 	.word	0x200004e0
    b56c:	200004e8 	.word	0x200004e8
    b570:	0000b079 	.word	0x0000b079

0000b574 <sd_mmc_spi_send_cmd>:
{
    b574:	b510      	push	{r4, lr}
    b576:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    b578:	2300      	movs	r3, #0
    b57a:	9300      	str	r3, [sp, #0]
    b57c:	2200      	movs	r2, #0
    b57e:	4c02      	ldr	r4, [pc, #8]	; (b588 <sd_mmc_spi_send_cmd+0x14>)
    b580:	47a0      	blx	r4
}
    b582:	b002      	add	sp, #8
    b584:	bd10      	pop	{r4, pc}
    b586:	46c0      	nop			; (mov r8, r8)
    b588:	0000b3e5 	.word	0x0000b3e5

0000b58c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    b58c:	4b01      	ldr	r3, [pc, #4]	; (b594 <sd_mmc_spi_get_response+0x8>)
    b58e:	6818      	ldr	r0, [r3, #0]
}
    b590:	4770      	bx	lr
    b592:	46c0      	nop			; (mov r8, r8)
    b594:	200004e4 	.word	0x200004e4

0000b598 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    b598:	b510      	push	{r4, lr}
    b59a:	b084      	sub	sp, #16
    b59c:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b59e:	2200      	movs	r2, #0
    b5a0:	4b14      	ldr	r3, [pc, #80]	; (b5f4 <sd_mmc_spi_read_word+0x5c>)
    b5a2:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    b5a4:	4b14      	ldr	r3, [pc, #80]	; (b5f8 <sd_mmc_spi_read_word+0x60>)
    b5a6:	8819      	ldrh	r1, [r3, #0]
    b5a8:	4b14      	ldr	r3, [pc, #80]	; (b5fc <sd_mmc_spi_read_word+0x64>)
    b5aa:	6818      	ldr	r0, [r3, #0]
    b5ac:	4b14      	ldr	r3, [pc, #80]	; (b600 <sd_mmc_spi_read_word+0x68>)
    b5ae:	4798      	blx	r3
    b5b0:	2900      	cmp	r1, #0
    b5b2:	d103      	bne.n	b5bc <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    b5b4:	4b13      	ldr	r3, [pc, #76]	; (b604 <sd_mmc_spi_read_word+0x6c>)
    b5b6:	4798      	blx	r3
    b5b8:	2800      	cmp	r0, #0
    b5ba:	d010      	beq.n	b5de <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    b5bc:	23ff      	movs	r3, #255	; 0xff
    b5be:	2204      	movs	r2, #4
    b5c0:	a901      	add	r1, sp, #4
    b5c2:	4811      	ldr	r0, [pc, #68]	; (b608 <sd_mmc_spi_read_word+0x70>)
    b5c4:	4c11      	ldr	r4, [pc, #68]	; (b60c <sd_mmc_spi_read_word+0x74>)
    b5c6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    b5c8:	4b0c      	ldr	r3, [pc, #48]	; (b5fc <sd_mmc_spi_read_word+0x64>)
    b5ca:	681a      	ldr	r2, [r3, #0]
    b5cc:	1d10      	adds	r0, r2, #4
    b5ce:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    b5d0:	4b09      	ldr	r3, [pc, #36]	; (b5f8 <sd_mmc_spi_read_word+0x60>)
    b5d2:	8819      	ldrh	r1, [r3, #0]
    b5d4:	4b0a      	ldr	r3, [pc, #40]	; (b600 <sd_mmc_spi_read_word+0x68>)
    b5d6:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    b5d8:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    b5da:	2900      	cmp	r1, #0
    b5dc:	d001      	beq.n	b5e2 <sd_mmc_spi_read_word+0x4a>
}
    b5de:	b004      	add	sp, #16
    b5e0:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    b5e2:	23ff      	movs	r3, #255	; 0xff
    b5e4:	2202      	movs	r2, #2
    b5e6:	a903      	add	r1, sp, #12
    b5e8:	4807      	ldr	r0, [pc, #28]	; (b608 <sd_mmc_spi_read_word+0x70>)
    b5ea:	4c08      	ldr	r4, [pc, #32]	; (b60c <sd_mmc_spi_read_word+0x74>)
    b5ec:	47a0      	blx	r4
	return true;
    b5ee:	2001      	movs	r0, #1
    b5f0:	e7f5      	b.n	b5de <sd_mmc_spi_read_word+0x46>
    b5f2:	46c0      	nop			; (mov r8, r8)
    b5f4:	200004df 	.word	0x200004df
    b5f8:	200004d8 	.word	0x200004d8
    b5fc:	200004e8 	.word	0x200004e8
    b600:	00017121 	.word	0x00017121
    b604:	0000b155 	.word	0x0000b155
    b608:	2000049c 	.word	0x2000049c
    b60c:	0000f999 	.word	0x0000f999

0000b610 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    b610:	b5f0      	push	{r4, r5, r6, r7, lr}
    b612:	46de      	mov	lr, fp
    b614:	4657      	mov	r7, sl
    b616:	4646      	mov	r6, r8
    b618:	b5c0      	push	{r6, r7, lr}
    b61a:	b082      	sub	sp, #8
    b61c:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b61e:	2200      	movs	r2, #0
    b620:	4b17      	ldr	r3, [pc, #92]	; (b680 <sd_mmc_spi_start_read_blocks+0x70>)
    b622:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    b624:	1e4c      	subs	r4, r1, #1
    b626:	b2a4      	uxth	r4, r4
    b628:	2900      	cmp	r1, #0
    b62a:	d026      	beq.n	b67a <sd_mmc_spi_start_read_blocks+0x6a>
    b62c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    b62e:	4b15      	ldr	r3, [pc, #84]	; (b684 <sd_mmc_spi_start_read_blocks+0x74>)
    b630:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    b632:	4f15      	ldr	r7, [pc, #84]	; (b688 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    b634:	47d0      	blx	sl
    b636:	4680      	mov	r8, r0
    b638:	2800      	cmp	r0, #0
    b63a:	d017      	beq.n	b66c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    b63c:	883a      	ldrh	r2, [r7, #0]
    b63e:	465b      	mov	r3, fp
    b640:	1999      	adds	r1, r3, r6
    b642:	23ff      	movs	r3, #255	; 0xff
    b644:	4811      	ldr	r0, [pc, #68]	; (b68c <sd_mmc_spi_start_read_blocks+0x7c>)
    b646:	4d12      	ldr	r5, [pc, #72]	; (b690 <sd_mmc_spi_start_read_blocks+0x80>)
    b648:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    b64a:	883b      	ldrh	r3, [r7, #0]
    b64c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    b64e:	4a11      	ldr	r2, [pc, #68]	; (b694 <sd_mmc_spi_start_read_blocks+0x84>)
    b650:	6811      	ldr	r1, [r2, #0]
    b652:	468c      	mov	ip, r1
    b654:	4463      	add	r3, ip
    b656:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    b658:	23ff      	movs	r3, #255	; 0xff
    b65a:	2202      	movs	r2, #2
    b65c:	a901      	add	r1, sp, #4
    b65e:	480b      	ldr	r0, [pc, #44]	; (b68c <sd_mmc_spi_start_read_blocks+0x7c>)
    b660:	47a8      	blx	r5
	while (nb_block--) {
    b662:	3c01      	subs	r4, #1
    b664:	b2a4      	uxth	r4, r4
    b666:	4b0c      	ldr	r3, [pc, #48]	; (b698 <sd_mmc_spi_start_read_blocks+0x88>)
    b668:	429c      	cmp	r4, r3
    b66a:	d1e3      	bne.n	b634 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    b66c:	4640      	mov	r0, r8
    b66e:	b002      	add	sp, #8
    b670:	bc1c      	pop	{r2, r3, r4}
    b672:	4690      	mov	r8, r2
    b674:	469a      	mov	sl, r3
    b676:	46a3      	mov	fp, r4
    b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    b67a:	2301      	movs	r3, #1
    b67c:	4698      	mov	r8, r3
    b67e:	e7f5      	b.n	b66c <sd_mmc_spi_start_read_blocks+0x5c>
    b680:	200004df 	.word	0x200004df
    b684:	0000b155 	.word	0x0000b155
    b688:	200004d8 	.word	0x200004d8
    b68c:	2000049c 	.word	0x2000049c
    b690:	0000f999 	.word	0x0000f999
    b694:	200004e8 	.word	0x200004e8
    b698:	0000ffff 	.word	0x0000ffff

0000b69c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    b69c:	2001      	movs	r0, #1
    b69e:	4770      	bx	lr

0000b6a0 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    b6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6a2:	46c6      	mov	lr, r8
    b6a4:	b500      	push	{lr}
    b6a6:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    b6a8:	2200      	movs	r2, #0
    b6aa:	4b15      	ldr	r3, [pc, #84]	; (b700 <sd_mmc_spi_start_write_blocks+0x60>)
    b6ac:	701a      	strb	r2, [r3, #0]
	pos = 0;
    b6ae:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    b6b0:	4f14      	ldr	r7, [pc, #80]	; (b704 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    b6b2:	4e15      	ldr	r6, [pc, #84]	; (b708 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    b6b4:	e000      	b.n	b6b8 <sd_mmc_spi_start_write_blocks+0x18>
{
    b6b6:	0021      	movs	r1, r4
	while (nb_block--) {
    b6b8:	1e4c      	subs	r4, r1, #1
    b6ba:	b2a4      	uxth	r4, r4
    b6bc:	2900      	cmp	r1, #0
    b6be:	d01b      	beq.n	b6f8 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    b6c0:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    b6c2:	8832      	ldrh	r2, [r6, #0]
    b6c4:	4643      	mov	r3, r8
    b6c6:	1959      	adds	r1, r3, r5
    b6c8:	4810      	ldr	r0, [pc, #64]	; (b70c <sd_mmc_spi_start_write_blocks+0x6c>)
    b6ca:	4b11      	ldr	r3, [pc, #68]	; (b710 <sd_mmc_spi_start_write_blocks+0x70>)
    b6cc:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    b6ce:	8833      	ldrh	r3, [r6, #0]
    b6d0:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    b6d2:	4a10      	ldr	r2, [pc, #64]	; (b714 <sd_mmc_spi_start_write_blocks+0x74>)
    b6d4:	6811      	ldr	r1, [r2, #0]
    b6d6:	468c      	mov	ip, r1
    b6d8:	4463      	add	r3, ip
    b6da:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    b6dc:	4b0e      	ldr	r3, [pc, #56]	; (b718 <sd_mmc_spi_start_write_blocks+0x78>)
    b6de:	4798      	blx	r3
    b6e0:	2800      	cmp	r0, #0
    b6e2:	d00a      	beq.n	b6fa <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    b6e4:	2c00      	cmp	r4, #0
    b6e6:	d0e6      	beq.n	b6b6 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    b6e8:	4b0c      	ldr	r3, [pc, #48]	; (b71c <sd_mmc_spi_start_write_blocks+0x7c>)
    b6ea:	4798      	blx	r3
    b6ec:	2800      	cmp	r0, #0
    b6ee:	d1e2      	bne.n	b6b6 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    b6f0:	2205      	movs	r2, #5
    b6f2:	4b03      	ldr	r3, [pc, #12]	; (b700 <sd_mmc_spi_start_write_blocks+0x60>)
    b6f4:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    b6f6:	e000      	b.n	b6fa <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    b6f8:	2001      	movs	r0, #1
}
    b6fa:	bc04      	pop	{r2}
    b6fc:	4690      	mov	r8, r2
    b6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b700:	200004df 	.word	0x200004df
    b704:	0000b031 	.word	0x0000b031
    b708:	200004d8 	.word	0x200004d8
    b70c:	2000049c 	.word	0x2000049c
    b710:	0000fb61 	.word	0x0000fb61
    b714:	200004e8 	.word	0x200004e8
    b718:	0000b1c1 	.word	0x0000b1c1
    b71c:	0000b079 	.word	0x0000b079

0000b720 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    b720:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    b722:	4b05      	ldr	r3, [pc, #20]	; (b738 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    b724:	4798      	blx	r3
    b726:	2800      	cmp	r0, #0
    b728:	d103      	bne.n	b732 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    b72a:	2205      	movs	r2, #5
    b72c:	4b03      	ldr	r3, [pc, #12]	; (b73c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    b72e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    b730:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    b732:	4b03      	ldr	r3, [pc, #12]	; (b740 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    b734:	4798      	blx	r3
    b736:	e7fb      	b.n	b730 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    b738:	0000b079 	.word	0x0000b079
    b73c:	200004df 	.word	0x200004df
    b740:	0000b0dd 	.word	0x0000b0dd

0000b744 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    b744:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    b746:	2000      	movs	r0, #0
    b748:	4b08      	ldr	r3, [pc, #32]	; (b76c <delay_init+0x28>)
    b74a:	4798      	blx	r3
    b74c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    b74e:	4c08      	ldr	r4, [pc, #32]	; (b770 <delay_init+0x2c>)
    b750:	21fa      	movs	r1, #250	; 0xfa
    b752:	0089      	lsls	r1, r1, #2
    b754:	47a0      	blx	r4
    b756:	4b07      	ldr	r3, [pc, #28]	; (b774 <delay_init+0x30>)
    b758:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    b75a:	4907      	ldr	r1, [pc, #28]	; (b778 <delay_init+0x34>)
    b75c:	0028      	movs	r0, r5
    b75e:	47a0      	blx	r4
    b760:	4b06      	ldr	r3, [pc, #24]	; (b77c <delay_init+0x38>)
    b762:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    b764:	2205      	movs	r2, #5
    b766:	4b06      	ldr	r3, [pc, #24]	; (b780 <delay_init+0x3c>)
    b768:	601a      	str	r2, [r3, #0]
}
    b76a:	bd70      	pop	{r4, r5, r6, pc}
    b76c:	000108a1 	.word	0x000108a1
    b770:	00017015 	.word	0x00017015
    b774:	20000008 	.word	0x20000008
    b778:	000f4240 	.word	0x000f4240
    b77c:	2000000c 	.word	0x2000000c
    b780:	e000e010 	.word	0xe000e010

0000b784 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    b784:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    b786:	4b08      	ldr	r3, [pc, #32]	; (b7a8 <delay_cycles_ms+0x24>)
    b788:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    b78a:	4a08      	ldr	r2, [pc, #32]	; (b7ac <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    b78c:	2500      	movs	r5, #0

			while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    b78e:	2180      	movs	r1, #128	; 0x80
    b790:	0249      	lsls	r1, r1, #9
	while (n--) {
    b792:	3801      	subs	r0, #1
    b794:	d307      	bcc.n	b7a6 <delay_cycles_ms+0x22>
	if (n > 0) {
    b796:	2c00      	cmp	r4, #0
    b798:	d0fb      	beq.n	b792 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    b79a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    b79c:	6095      	str	r5, [r2, #8]
			while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    b79e:	6813      	ldr	r3, [r2, #0]
    b7a0:	420b      	tst	r3, r1
    b7a2:	d0fc      	beq.n	b79e <delay_cycles_ms+0x1a>
    b7a4:	e7f5      	b.n	b792 <delay_cycles_ms+0xe>
	}
}
    b7a6:	bd30      	pop	{r4, r5, pc}
    b7a8:	20000008 	.word	0x20000008
    b7ac:	e000e010 	.word	0xe000e010

0000b7b0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    b7b0:	b510      	push	{r4, lr}
	if (gpfIsr) {
    b7b2:	4b03      	ldr	r3, [pc, #12]	; (b7c0 <chip_isr+0x10>)
    b7b4:	681b      	ldr	r3, [r3, #0]
    b7b6:	2b00      	cmp	r3, #0
    b7b8:	d000      	beq.n	b7bc <chip_isr+0xc>
		gpfIsr();
    b7ba:	4798      	blx	r3
	}
}
    b7bc:	bd10      	pop	{r4, pc}
    b7be:	46c0      	nop			; (mov r8, r8)
    b7c0:	200004f0 	.word	0x200004f0

0000b7c4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    b7c4:	b570      	push	{r4, r5, r6, lr}
    b7c6:	b082      	sub	sp, #8
	gpfIsr = NULL;
    b7c8:	2300      	movs	r3, #0
    b7ca:	4a15      	ldr	r2, [pc, #84]	; (b820 <nm_bsp_init+0x5c>)
    b7cc:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    b7ce:	ac01      	add	r4, sp, #4
    b7d0:	2501      	movs	r5, #1
    b7d2:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    b7d4:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    b7d6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    b7d8:	0021      	movs	r1, r4
    b7da:	201b      	movs	r0, #27
    b7dc:	4e11      	ldr	r6, [pc, #68]	; (b824 <nm_bsp_init+0x60>)
    b7de:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    b7e0:	0021      	movs	r1, r4
    b7e2:	201c      	movs	r0, #28
    b7e4:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    b7e6:	0021      	movs	r1, r4
    b7e8:	2028      	movs	r0, #40	; 0x28
    b7ea:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    b7ec:	4b0e      	ldr	r3, [pc, #56]	; (b828 <nm_bsp_init+0x64>)
    b7ee:	2280      	movs	r2, #128	; 0x80
    b7f0:	0552      	lsls	r2, r2, #21
    b7f2:	615a      	str	r2, [r3, #20]
    b7f4:	2280      	movs	r2, #128	; 0x80
    b7f6:	0512      	lsls	r2, r2, #20
    b7f8:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    b7fa:	4b0c      	ldr	r3, [pc, #48]	; (b82c <nm_bsp_init+0x68>)
    b7fc:	681b      	ldr	r3, [r3, #0]
    b7fe:	421d      	tst	r5, r3
    b800:	d003      	beq.n	b80a <nm_bsp_init+0x46>
    b802:	4b0a      	ldr	r3, [pc, #40]	; (b82c <nm_bsp_init+0x68>)
    b804:	681b      	ldr	r3, [r3, #0]
    b806:	079b      	lsls	r3, r3, #30
    b808:	d401      	bmi.n	b80e <nm_bsp_init+0x4a>
	    delay_init();
    b80a:	4b09      	ldr	r3, [pc, #36]	; (b830 <nm_bsp_init+0x6c>)
    b80c:	4798      	blx	r3
	cpu_irq_enable();
    b80e:	2201      	movs	r2, #1
    b810:	4b08      	ldr	r3, [pc, #32]	; (b834 <nm_bsp_init+0x70>)
    b812:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    b814:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    b818:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    b81a:	2000      	movs	r0, #0
    b81c:	b002      	add	sp, #8
    b81e:	bd70      	pop	{r4, r5, r6, pc}
    b820:	200004f0 	.word	0x200004f0
    b824:	0000f065 	.word	0x0000f065
    b828:	41004400 	.word	0x41004400
    b82c:	e000e010 	.word	0xe000e010
    b830:	0000b745 	.word	0x0000b745
    b834:	20000012 	.word	0x20000012

0000b838 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    b838:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    b83a:	1e44      	subs	r4, r0, #1
    b83c:	2800      	cmp	r0, #0
    b83e:	d004      	beq.n	b84a <nm_bsp_sleep+0x12>
		delay_ms(1);
    b840:	4d02      	ldr	r5, [pc, #8]	; (b84c <nm_bsp_sleep+0x14>)
    b842:	2001      	movs	r0, #1
    b844:	47a8      	blx	r5
	while (u32TimeMsec--) {
    b846:	3c01      	subs	r4, #1
    b848:	d2fb      	bcs.n	b842 <nm_bsp_sleep+0xa>
	}
}
    b84a:	bd70      	pop	{r4, r5, r6, pc}
    b84c:	0000b785 	.word	0x0000b785

0000b850 <nm_bsp_reset>:
{
    b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b852:	4c07      	ldr	r4, [pc, #28]	; (b870 <nm_bsp_reset+0x20>)
    b854:	2780      	movs	r7, #128	; 0x80
    b856:	057f      	lsls	r7, r7, #21
    b858:	6167      	str	r7, [r4, #20]
    b85a:	2580      	movs	r5, #128	; 0x80
    b85c:	052d      	lsls	r5, r5, #20
    b85e:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    b860:	2001      	movs	r0, #1
    b862:	4e04      	ldr	r6, [pc, #16]	; (b874 <nm_bsp_reset+0x24>)
    b864:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    b866:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    b868:	200a      	movs	r0, #10
    b86a:	47b0      	blx	r6
    b86c:	61a5      	str	r5, [r4, #24]
}
    b86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b870:	41004400 	.word	0x41004400
    b874:	0000b839 	.word	0x0000b839

0000b878 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    b878:	b510      	push	{r4, lr}
    b87a:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    b87c:	4b0e      	ldr	r3, [pc, #56]	; (b8b8 <nm_bsp_register_isr+0x40>)
    b87e:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    b880:	ac01      	add	r4, sp, #4
    b882:	0020      	movs	r0, r4
    b884:	4b0d      	ldr	r3, [pc, #52]	; (b8bc <nm_bsp_register_isr+0x44>)
    b886:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    b888:	2329      	movs	r3, #41	; 0x29
    b88a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    b88c:	2300      	movs	r3, #0
    b88e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    b890:	3301      	adds	r3, #1
    b892:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b894:	3301      	adds	r3, #1
    b896:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    b898:	0021      	movs	r1, r4
    b89a:	2009      	movs	r0, #9
    b89c:	4b08      	ldr	r3, [pc, #32]	; (b8c0 <nm_bsp_register_isr+0x48>)
    b89e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    b8a0:	2200      	movs	r2, #0
    b8a2:	2109      	movs	r1, #9
    b8a4:	4807      	ldr	r0, [pc, #28]	; (b8c4 <nm_bsp_register_isr+0x4c>)
    b8a6:	4b08      	ldr	r3, [pc, #32]	; (b8c8 <nm_bsp_register_isr+0x50>)
    b8a8:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    b8aa:	2100      	movs	r1, #0
    b8ac:	2009      	movs	r0, #9
    b8ae:	4b07      	ldr	r3, [pc, #28]	; (b8cc <nm_bsp_register_isr+0x54>)
    b8b0:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    b8b2:	b004      	add	sp, #16
    b8b4:	bd10      	pop	{r4, pc}
    b8b6:	46c0      	nop			; (mov r8, r8)
    b8b8:	200004f0 	.word	0x200004f0
    b8bc:	0000ed41 	.word	0x0000ed41
    b8c0:	0000ed55 	.word	0x0000ed55
    b8c4:	0000b7b1 	.word	0x0000b7b1
    b8c8:	0000ebfd 	.word	0x0000ebfd
    b8cc:	0000ec29 	.word	0x0000ec29

0000b8d0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    b8d0:	b510      	push	{r4, lr}
	if (u8Enable) {
    b8d2:	2800      	cmp	r0, #0
    b8d4:	d104      	bne.n	b8e0 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    b8d6:	2100      	movs	r1, #0
    b8d8:	2009      	movs	r0, #9
    b8da:	4b04      	ldr	r3, [pc, #16]	; (b8ec <nm_bsp_interrupt_ctrl+0x1c>)
    b8dc:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    b8de:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    b8e0:	2100      	movs	r1, #0
    b8e2:	2009      	movs	r0, #9
    b8e4:	4b02      	ldr	r3, [pc, #8]	; (b8f0 <nm_bsp_interrupt_ctrl+0x20>)
    b8e6:	4798      	blx	r3
    b8e8:	e7f9      	b.n	b8de <nm_bsp_interrupt_ctrl+0xe>
    b8ea:	46c0      	nop			; (mov r8, r8)
    b8ec:	0000ec49 	.word	0x0000ec49
    b8f0:	0000ec29 	.word	0x0000ec29

0000b8f4 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    b8f4:	b530      	push	{r4, r5, lr}
    b8f6:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    b8f8:	4c30      	ldr	r4, [pc, #192]	; (b9bc <nm_bus_init+0xc8>)
    b8fa:	230e      	movs	r3, #14
    b8fc:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    b8fe:	2300      	movs	r3, #0
    b900:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    b902:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    b904:	a901      	add	r1, sp, #4
    b906:	2201      	movs	r2, #1
    b908:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    b90a:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    b90c:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    b90e:	200e      	movs	r0, #14
    b910:	4b2b      	ldr	r3, [pc, #172]	; (b9c0 <nm_bus_init+0xcc>)
    b912:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    b914:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    b916:	09d1      	lsrs	r1, r2, #7
		return NULL;
    b918:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    b91a:	2900      	cmp	r1, #0
    b91c:	d104      	bne.n	b928 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    b91e:	0953      	lsrs	r3, r2, #5
    b920:	01db      	lsls	r3, r3, #7
    b922:	4928      	ldr	r1, [pc, #160]	; (b9c4 <nm_bus_init+0xd0>)
    b924:	468c      	mov	ip, r1
    b926:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b928:	211f      	movs	r1, #31
    b92a:	4011      	ands	r1, r2
    b92c:	2201      	movs	r2, #1
    b92e:	0010      	movs	r0, r2
    b930:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    b932:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    b934:	ac02      	add	r4, sp, #8
    b936:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    b938:	2300      	movs	r3, #0
    b93a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    b93c:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    b93e:	21c0      	movs	r1, #192	; 0xc0
    b940:	0389      	lsls	r1, r1, #14
    b942:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    b944:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    b946:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    b948:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    b94a:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    b94c:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    b94e:	3223      	adds	r2, #35	; 0x23
    b950:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    b952:	3a18      	subs	r2, #24
    b954:	2100      	movs	r1, #0
    b956:	a808      	add	r0, sp, #32
    b958:	4b1b      	ldr	r3, [pc, #108]	; (b9c8 <nm_bus_init+0xd4>)
    b95a:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    b95c:	4b1b      	ldr	r3, [pc, #108]	; (b9cc <nm_bus_init+0xd8>)
    b95e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    b960:	4b1b      	ldr	r3, [pc, #108]	; (b9d0 <nm_bus_init+0xdc>)
    b962:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    b964:	2301      	movs	r3, #1
    b966:	425b      	negs	r3, r3
    b968:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    b96a:	4b1a      	ldr	r3, [pc, #104]	; (b9d4 <nm_bus_init+0xe0>)
    b96c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    b96e:	4b1a      	ldr	r3, [pc, #104]	; (b9d8 <nm_bus_init+0xe4>)
    b970:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    b972:	0022      	movs	r2, r4
    b974:	4919      	ldr	r1, [pc, #100]	; (b9dc <nm_bus_init+0xe8>)
    b976:	481a      	ldr	r0, [pc, #104]	; (b9e0 <nm_bus_init+0xec>)
    b978:	4b1a      	ldr	r3, [pc, #104]	; (b9e4 <nm_bus_init+0xf0>)
    b97a:	4798      	blx	r3
    b97c:	2800      	cmp	r0, #0
    b97e:	d11a      	bne.n	b9b6 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    b980:	4d17      	ldr	r5, [pc, #92]	; (b9e0 <nm_bus_init+0xec>)
    b982:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b984:	0020      	movs	r0, r4
    b986:	4b18      	ldr	r3, [pc, #96]	; (b9e8 <nm_bus_init+0xf4>)
    b988:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b98a:	231f      	movs	r3, #31
    b98c:	4018      	ands	r0, r3
    b98e:	3b1e      	subs	r3, #30
    b990:	4083      	lsls	r3, r0
    b992:	4a16      	ldr	r2, [pc, #88]	; (b9ec <nm_bus_init+0xf8>)
    b994:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b996:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    b998:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b99a:	2b00      	cmp	r3, #0
    b99c:	d1fc      	bne.n	b998 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b99e:	6823      	ldr	r3, [r4, #0]
    b9a0:	2202      	movs	r2, #2
    b9a2:	4313      	orrs	r3, r2
    b9a4:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    b9a6:	4b12      	ldr	r3, [pc, #72]	; (b9f0 <nm_bus_init+0xfc>)
    b9a8:	4798      	blx	r3
	nm_bsp_sleep(1);
    b9aa:	2001      	movs	r0, #1
    b9ac:	4b11      	ldr	r3, [pc, #68]	; (b9f4 <nm_bus_init+0x100>)
    b9ae:	4798      	blx	r3
#endif
	return result;
    b9b0:	2000      	movs	r0, #0
}
    b9b2:	b011      	add	sp, #68	; 0x44
    b9b4:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    b9b6:	2006      	movs	r0, #6
    b9b8:	4240      	negs	r0, r0
    b9ba:	e7fa      	b.n	b9b2 <nm_bus_init+0xbe>
    b9bc:	200010d8 	.word	0x200010d8
    b9c0:	0000f065 	.word	0x0000f065
    b9c4:	41004400 	.word	0x41004400
    b9c8:	0001900b 	.word	0x0001900b
    b9cc:	000c0002 	.word	0x000c0002
    b9d0:	000d0002 	.word	0x000d0002
    b9d4:	000f0002 	.word	0x000f0002
    b9d8:	00b71b00 	.word	0x00b71b00
    b9dc:	42001000 	.word	0x42001000
    b9e0:	200010dc 	.word	0x200010dc
    b9e4:	0000f7c1 	.word	0x0000f7c1
    b9e8:	0000f679 	.word	0x0000f679
    b9ec:	e000e100 	.word	0xe000e100
    b9f0:	0000b851 	.word	0x0000b851
    b9f4:	0000b839 	.word	0x0000b839

0000b9f8 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    b9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9fa:	46de      	mov	lr, fp
    b9fc:	4657      	mov	r7, sl
    b9fe:	464e      	mov	r6, r9
    ba00:	4645      	mov	r5, r8
    ba02:	b5e0      	push	{r5, r6, r7, lr}
    ba04:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    ba06:	2803      	cmp	r0, #3
    ba08:	d000      	beq.n	ba0c <nm_bus_ioctl+0x14>
    ba0a:	e075      	b.n	baf8 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    ba0c:	680e      	ldr	r6, [r1, #0]
    ba0e:	684d      	ldr	r5, [r1, #4]
    ba10:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    ba12:	2200      	movs	r2, #0
    ba14:	466b      	mov	r3, sp
    ba16:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    ba18:	2d00      	cmp	r5, #0
    ba1a:	d027      	beq.n	ba6c <nm_bus_ioctl+0x74>
    ba1c:	2c00      	cmp	r4, #0
    ba1e:	d065      	beq.n	baec <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    ba20:	2e00      	cmp	r6, #0
    ba22:	d100      	bne.n	ba26 <nm_bus_ioctl+0x2e>
    ba24:	e077      	b.n	bb16 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    ba26:	2300      	movs	r3, #0
    ba28:	4698      	mov	r8, r3
    ba2a:	2300      	movs	r3, #0
    ba2c:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    ba2e:	2201      	movs	r2, #1
    ba30:	493b      	ldr	r1, [pc, #236]	; (bb20 <nm_bus_ioctl+0x128>)
    ba32:	483c      	ldr	r0, [pc, #240]	; (bb24 <nm_bus_ioctl+0x12c>)
    ba34:	4b3c      	ldr	r3, [pc, #240]	; (bb28 <nm_bus_ioctl+0x130>)
    ba36:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    ba38:	4b3a      	ldr	r3, [pc, #232]	; (bb24 <nm_bus_ioctl+0x12c>)
    ba3a:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    ba3c:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    ba3e:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ba40:	4699      	mov	r9, r3
			pu8Miso++;
    ba42:	4659      	mov	r1, fp
    ba44:	424b      	negs	r3, r1
    ba46:	4159      	adcs	r1, r3
    ba48:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    ba4a:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ba4c:	4653      	mov	r3, sl
    ba4e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ba50:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    ba52:	4239      	tst	r1, r7
    ba54:	d0fc      	beq.n	ba50 <nm_bus_ioctl+0x58>
    ba56:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ba58:	4239      	tst	r1, r7
    ba5a:	d0fc      	beq.n	ba56 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ba5c:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ba5e:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    ba60:	4211      	tst	r1, r2
    ba62:	d0fc      	beq.n	ba5e <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ba64:	4649      	mov	r1, r9
    ba66:	7989      	ldrb	r1, [r1, #6]
    ba68:	468c      	mov	ip, r1
    ba6a:	e011      	b.n	ba90 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    ba6c:	2e00      	cmp	r6, #0
    ba6e:	d03a      	beq.n	bae6 <nm_bus_ioctl+0xee>
    ba70:	2c00      	cmp	r4, #0
    ba72:	d03e      	beq.n	baf2 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    ba74:	2300      	movs	r3, #0
    ba76:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    ba78:	3301      	adds	r3, #1
    ba7a:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    ba7c:	466b      	mov	r3, sp
    ba7e:	1ddd      	adds	r5, r3, #7
    ba80:	e7d5      	b.n	ba2e <nm_bus_ioctl+0x36>
    ba82:	4660      	mov	r0, ip
    ba84:	2801      	cmp	r0, #1
    ba86:	d00d      	beq.n	baa4 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ba88:	6a98      	ldr	r0, [r3, #40]	; 0x28
    ba8a:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    ba8c:	2900      	cmp	r1, #0
    ba8e:	d00d      	beq.n	baac <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ba90:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    ba92:	4211      	tst	r1, r2
    ba94:	d0fc      	beq.n	ba90 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ba96:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    ba98:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    ba9a:	4210      	tst	r0, r2
    ba9c:	d0f1      	beq.n	ba82 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    ba9e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    baa0:	311e      	adds	r1, #30
    baa2:	e7ee      	b.n	ba82 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    baa4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    baa6:	05c0      	lsls	r0, r0, #23
    baa8:	0dc0      	lsrs	r0, r0, #23
    baaa:	e7ef      	b.n	ba8c <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    baac:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    baae:	3c01      	subs	r4, #1
    bab0:	b2a4      	uxth	r4, r4
			pu8Miso++;
    bab2:	445d      	add	r5, fp
			pu8Mosi++;
    bab4:	4643      	mov	r3, r8
    bab6:	4259      	negs	r1, r3
    bab8:	414b      	adcs	r3, r1
    baba:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    babc:	2c00      	cmp	r4, #0
    babe:	d1c4      	bne.n	ba4a <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    bac0:	4b18      	ldr	r3, [pc, #96]	; (bb24 <nm_bus_ioctl+0x12c>)
    bac2:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    bac4:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    bac6:	7e0b      	ldrb	r3, [r1, #24]
    bac8:	4213      	tst	r3, r2
    baca:	d0fc      	beq.n	bac6 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    bacc:	2200      	movs	r2, #0
    bace:	4914      	ldr	r1, [pc, #80]	; (bb20 <nm_bus_ioctl+0x128>)
    bad0:	4814      	ldr	r0, [pc, #80]	; (bb24 <nm_bus_ioctl+0x12c>)
    bad2:	4b15      	ldr	r3, [pc, #84]	; (bb28 <nm_bus_ioctl+0x130>)
    bad4:	4798      	blx	r3
	return M2M_SUCCESS;
    bad6:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    bad8:	b003      	add	sp, #12
    bada:	bc3c      	pop	{r2, r3, r4, r5}
    badc:	4690      	mov	r8, r2
    bade:	4699      	mov	r9, r3
    bae0:	46a2      	mov	sl, r4
    bae2:	46ab      	mov	fp, r5
    bae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    bae6:	200f      	movs	r0, #15
    bae8:	4240      	negs	r0, r0
    baea:	e7f5      	b.n	bad8 <nm_bus_ioctl+0xe0>
    baec:	200f      	movs	r0, #15
    baee:	4240      	negs	r0, r0
    baf0:	e7f2      	b.n	bad8 <nm_bus_ioctl+0xe0>
    baf2:	200f      	movs	r0, #15
    baf4:	4240      	negs	r0, r0
		break;
    baf6:	e7ef      	b.n	bad8 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    baf8:	2283      	movs	r2, #131	; 0x83
    bafa:	0052      	lsls	r2, r2, #1
    bafc:	490b      	ldr	r1, [pc, #44]	; (bb2c <nm_bus_ioctl+0x134>)
    bafe:	480c      	ldr	r0, [pc, #48]	; (bb30 <nm_bus_ioctl+0x138>)
    bb00:	4b0c      	ldr	r3, [pc, #48]	; (bb34 <nm_bus_ioctl+0x13c>)
    bb02:	4798      	blx	r3
    bb04:	480c      	ldr	r0, [pc, #48]	; (bb38 <nm_bus_ioctl+0x140>)
    bb06:	4b0d      	ldr	r3, [pc, #52]	; (bb3c <nm_bus_ioctl+0x144>)
    bb08:	4798      	blx	r3
    bb0a:	200d      	movs	r0, #13
    bb0c:	4b0c      	ldr	r3, [pc, #48]	; (bb40 <nm_bus_ioctl+0x148>)
    bb0e:	4798      	blx	r3
			s8Ret = -1;
    bb10:	2001      	movs	r0, #1
    bb12:	4240      	negs	r0, r0
	return s8Ret;
    bb14:	e7e0      	b.n	bad8 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    bb16:	2301      	movs	r3, #1
    bb18:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    bb1a:	466b      	mov	r3, sp
    bb1c:	1dde      	adds	r6, r3, #7
    bb1e:	e784      	b.n	ba2a <nm_bus_ioctl+0x32>
    bb20:	200010d8 	.word	0x200010d8
    bb24:	200010dc 	.word	0x200010dc
    bb28:	0000fa6d 	.word	0x0000fa6d
    bb2c:	0001b410 	.word	0x0001b410
    bb30:	0001b420 	.word	0x0001b420
    bb34:	0001916d 	.word	0x0001916d
    bb38:	0001b434 	.word	0x0001b434
    bb3c:	00019289 	.word	0x00019289
    bb40:	000191a1 	.word	0x000191a1

0000bb44 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    bb44:	b530      	push	{r4, r5, lr}
    bb46:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    bb48:	ab01      	add	r3, sp, #4
    bb4a:	2200      	movs	r2, #0
    bb4c:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    bb4e:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    bb50:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    bb52:	4d13      	ldr	r5, [pc, #76]	; (bba0 <nm_bus_deinit+0x5c>)
    bb54:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    bb56:	0020      	movs	r0, r4
    bb58:	4b12      	ldr	r3, [pc, #72]	; (bba4 <nm_bus_deinit+0x60>)
    bb5a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    bb5c:	231f      	movs	r3, #31
    bb5e:	4018      	ands	r0, r3
    bb60:	3b1e      	subs	r3, #30
    bb62:	4083      	lsls	r3, r0
    bb64:	2280      	movs	r2, #128	; 0x80
    bb66:	4910      	ldr	r1, [pc, #64]	; (bba8 <nm_bus_deinit+0x64>)
    bb68:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    bb6a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    bb6c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    bb6e:	2b00      	cmp	r3, #0
    bb70:	d1fc      	bne.n	bb6c <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    bb72:	338f      	adds	r3, #143	; 0x8f
    bb74:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    bb76:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    bb78:	6823      	ldr	r3, [r4, #0]
    bb7a:	2202      	movs	r2, #2
    bb7c:	4393      	bics	r3, r2
    bb7e:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    bb80:	a901      	add	r1, sp, #4
    bb82:	200c      	movs	r0, #12
    bb84:	4c09      	ldr	r4, [pc, #36]	; (bbac <nm_bus_deinit+0x68>)
    bb86:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    bb88:	a901      	add	r1, sp, #4
    bb8a:	200f      	movs	r0, #15
    bb8c:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    bb8e:	a901      	add	r1, sp, #4
    bb90:	200d      	movs	r0, #13
    bb92:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    bb94:	a901      	add	r1, sp, #4
    bb96:	200e      	movs	r0, #14
    bb98:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    bb9a:	2000      	movs	r0, #0
    bb9c:	b003      	add	sp, #12
    bb9e:	bd30      	pop	{r4, r5, pc}
    bba0:	200010dc 	.word	0x200010dc
    bba4:	0000f679 	.word	0x0000f679
    bba8:	e000e100 	.word	0xe000e100
    bbac:	0000f065 	.word	0x0000f065

0000bbb0 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    bbb0:	2a00      	cmp	r2, #0
    bbb2:	d006      	beq.n	bbc2 <m2m_memcpy+0x12>
    bbb4:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    bbb6:	780b      	ldrb	r3, [r1, #0]
    bbb8:	7003      	strb	r3, [r0, #0]
		pDst++;
    bbba:	3001      	adds	r0, #1
		pSrc++;
    bbbc:	3101      	adds	r1, #1
	}while(--sz);
    bbbe:	4290      	cmp	r0, r2
    bbc0:	d1f9      	bne.n	bbb6 <m2m_memcpy+0x6>
}
    bbc2:	4770      	bx	lr

0000bbc4 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    bbc4:	2a00      	cmp	r2, #0
    bbc6:	d004      	beq.n	bbd2 <m2m_memset+0xe>
    bbc8:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    bbca:	7001      	strb	r1, [r0, #0]
		pBuf++;
    bbcc:	3001      	adds	r0, #1
	}while(--sz);
    bbce:	4290      	cmp	r0, r2
    bbd0:	d1fb      	bne.n	bbca <m2m_memset+0x6>
}
    bbd2:	4770      	bx	lr

0000bbd4 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    bbd4:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    bbd6:	7802      	ldrb	r2, [r0, #0]
    bbd8:	2a00      	cmp	r2, #0
    bbda:	d007      	beq.n	bbec <m2m_strlen+0x18>
    bbdc:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    bbde:	3001      	adds	r0, #1
    bbe0:	b280      	uxth	r0, r0
		pcStr++;
    bbe2:	3301      	adds	r3, #1
	while(*pcStr)
    bbe4:	781a      	ldrb	r2, [r3, #0]
    bbe6:	2a00      	cmp	r2, #0
    bbe8:	d1f9      	bne.n	bbde <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    bbea:	4770      	bx	lr
	uint16	u16StrLen = 0;
    bbec:	2000      	movs	r0, #0
    bbee:	e7fc      	b.n	bbea <m2m_strlen+0x16>

0000bbf0 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    bbf0:	4a02      	ldr	r2, [pc, #8]	; (bbfc <isr+0xc>)
    bbf2:	78d3      	ldrb	r3, [r2, #3]
    bbf4:	3301      	adds	r3, #1
    bbf6:	b2db      	uxtb	r3, r3
    bbf8:	70d3      	strb	r3, [r2, #3]
	//nm_bsp_interrupt_ctrl(1);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    bbfa:	4770      	bx	lr
    bbfc:	20001118 	.word	0x20001118

0000bc00 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    bc00:	4770      	bx	lr
	...

0000bc04 <hif_set_rx_done>:
{
    bc04:	b500      	push	{lr}
    bc06:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    bc08:	2200      	movs	r2, #0
    bc0a:	4b0a      	ldr	r3, [pc, #40]	; (bc34 <hif_set_rx_done+0x30>)
    bc0c:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    bc0e:	2001      	movs	r0, #1
    bc10:	4b09      	ldr	r3, [pc, #36]	; (bc38 <hif_set_rx_done+0x34>)
    bc12:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    bc14:	a901      	add	r1, sp, #4
    bc16:	4809      	ldr	r0, [pc, #36]	; (bc3c <hif_set_rx_done+0x38>)
    bc18:	4b09      	ldr	r3, [pc, #36]	; (bc40 <hif_set_rx_done+0x3c>)
    bc1a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    bc1c:	2800      	cmp	r0, #0
    bc1e:	d001      	beq.n	bc24 <hif_set_rx_done+0x20>
}
    bc20:	b003      	add	sp, #12
    bc22:	bd00      	pop	{pc}
	reg |= NBIT1;
    bc24:	2102      	movs	r1, #2
    bc26:	9b01      	ldr	r3, [sp, #4]
    bc28:	4319      	orrs	r1, r3
    bc2a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    bc2c:	4803      	ldr	r0, [pc, #12]	; (bc3c <hif_set_rx_done+0x38>)
    bc2e:	4b05      	ldr	r3, [pc, #20]	; (bc44 <hif_set_rx_done+0x40>)
    bc30:	4798      	blx	r3
    bc32:	e7f5      	b.n	bc20 <hif_set_rx_done+0x1c>
    bc34:	20001118 	.word	0x20001118
    bc38:	0000b8d1 	.word	0x0000b8d1
    bc3c:	00001070 	.word	0x00001070
    bc40:	0000d095 	.word	0x0000d095
    bc44:	0000d0a1 	.word	0x0000d0a1

0000bc48 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    bc48:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    bc4a:	4b0c      	ldr	r3, [pc, #48]	; (bc7c <hif_chip_wake+0x34>)
    bc4c:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    bc4e:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    bc50:	2b00      	cmp	r3, #0
    bc52:	d10d      	bne.n	bc70 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    bc54:	4b09      	ldr	r3, [pc, #36]	; (bc7c <hif_chip_wake+0x34>)
    bc56:	785b      	ldrb	r3, [r3, #1]
    bc58:	2b00      	cmp	r3, #0
    bc5a:	d103      	bne.n	bc64 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    bc5c:	4b07      	ldr	r3, [pc, #28]	; (bc7c <hif_chip_wake+0x34>)
    bc5e:	781b      	ldrb	r3, [r3, #0]
    bc60:	2b00      	cmp	r3, #0
    bc62:	d106      	bne.n	bc72 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    bc64:	4a05      	ldr	r2, [pc, #20]	; (bc7c <hif_chip_wake+0x34>)
    bc66:	7853      	ldrb	r3, [r2, #1]
    bc68:	3301      	adds	r3, #1
    bc6a:	b2db      	uxtb	r3, r3
    bc6c:	7053      	strb	r3, [r2, #1]
    bc6e:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    bc70:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    bc72:	4b03      	ldr	r3, [pc, #12]	; (bc80 <hif_chip_wake+0x38>)
    bc74:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    bc76:	2800      	cmp	r0, #0
    bc78:	d0f4      	beq.n	bc64 <hif_chip_wake+0x1c>
    bc7a:	e7f9      	b.n	bc70 <hif_chip_wake+0x28>
    bc7c:	20001118 	.word	0x20001118
    bc80:	0000cd7d 	.word	0x0000cd7d

0000bc84 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    bc84:	4b05      	ldr	r3, [pc, #20]	; (bc9c <hif_chip_sleep_sc+0x18>)
    bc86:	785b      	ldrb	r3, [r3, #1]
    bc88:	2b00      	cmp	r3, #0
    bc8a:	d004      	beq.n	bc96 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    bc8c:	4a03      	ldr	r2, [pc, #12]	; (bc9c <hif_chip_sleep_sc+0x18>)
    bc8e:	7853      	ldrb	r3, [r2, #1]
    bc90:	3b01      	subs	r3, #1
    bc92:	b2db      	uxtb	r3, r3
    bc94:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    bc96:	2000      	movs	r0, #0
    bc98:	4770      	bx	lr
    bc9a:	46c0      	nop			; (mov r8, r8)
    bc9c:	20001118 	.word	0x20001118

0000bca0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    bca0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    bca2:	4b0b      	ldr	r3, [pc, #44]	; (bcd0 <hif_chip_sleep+0x30>)
    bca4:	785b      	ldrb	r3, [r3, #1]
    bca6:	2b00      	cmp	r3, #0
    bca8:	d004      	beq.n	bcb4 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    bcaa:	4a09      	ldr	r2, [pc, #36]	; (bcd0 <hif_chip_sleep+0x30>)
    bcac:	7853      	ldrb	r3, [r2, #1]
    bcae:	3b01      	subs	r3, #1
    bcb0:	b2db      	uxtb	r3, r3
    bcb2:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    bcb4:	4b06      	ldr	r3, [pc, #24]	; (bcd0 <hif_chip_sleep+0x30>)
    bcb6:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    bcb8:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    bcba:	2b00      	cmp	r3, #0
    bcbc:	d103      	bne.n	bcc6 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    bcbe:	4b04      	ldr	r3, [pc, #16]	; (bcd0 <hif_chip_sleep+0x30>)
    bcc0:	781b      	ldrb	r3, [r3, #0]
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	d100      	bne.n	bcc8 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    bcc6:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    bcc8:	4b02      	ldr	r3, [pc, #8]	; (bcd4 <hif_chip_sleep+0x34>)
    bcca:	4798      	blx	r3
    bccc:	e7fb      	b.n	bcc6 <hif_chip_sleep+0x26>
    bcce:	46c0      	nop			; (mov r8, r8)
    bcd0:	20001118 	.word	0x20001118
    bcd4:	0000cd15 	.word	0x0000cd15

0000bcd8 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    bcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcda:	46de      	mov	lr, fp
    bcdc:	4657      	mov	r7, sl
    bcde:	b580      	push	{r7, lr}
    bce0:	b089      	sub	sp, #36	; 0x24
    bce2:	4683      	mov	fp, r0
    bce4:	468a      	mov	sl, r1
    bce6:	9201      	str	r2, [sp, #4]
    bce8:	9300      	str	r3, [sp, #0]
    bcea:	ab10      	add	r3, sp, #64	; 0x40
    bcec:	cb80      	ldmia	r3!, {r7}
    bcee:	881e      	ldrh	r6, [r3, #0]
    bcf0:	ab12      	add	r3, sp, #72	; 0x48
    bcf2:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    bcf4:	aa07      	add	r2, sp, #28
    bcf6:	237f      	movs	r3, #127	; 0x7f
    bcf8:	400b      	ands	r3, r1
    bcfa:	7053      	strb	r3, [r2, #1]
	strHif.u8Gid		= u8Gid;
    bcfc:	7010      	strb	r0, [r2, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
	if(pu8DataBuf != NULL)
    bcfe:	2f00      	cmp	r7, #0
    bd00:	d042      	beq.n	bd88 <hif_send+0xb0>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    bd02:	0033      	movs	r3, r6
    bd04:	3308      	adds	r3, #8
    bd06:	18eb      	adds	r3, r5, r3
    bd08:	8053      	strh	r3, [r2, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
    bd0a:	4b72      	ldr	r3, [pc, #456]	; (bed4 <hif_send+0x1fc>)
    bd0c:	aa07      	add	r2, sp, #28
    bd0e:	8852      	ldrh	r2, [r2, #2]
    bd10:	429a      	cmp	r2, r3
    bd12:	d900      	bls.n	bd16 <hif_send+0x3e>
    bd14:	e0cd      	b.n	beb2 <hif_send+0x1da>
    {
	ret = hif_chip_wake();
    bd16:	4b70      	ldr	r3, [pc, #448]	; (bed8 <hif_send+0x200>)
    bd18:	4798      	blx	r3
    bd1a:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    bd1c:	d000      	beq.n	bd20 <hif_send+0x48>
    bd1e:	e0bb      	b.n	be98 <hif_send+0x1c0>
	{
		volatile uint32 reg, dma_addr = 0;
    bd20:	2300      	movs	r3, #0
    bd22:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    bd24:	aa02      	add	r2, sp, #8
    bd26:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    bd28:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    bd2a:	9b04      	ldr	r3, [sp, #16]
    bd2c:	465a      	mov	r2, fp
    bd2e:	431a      	orrs	r2, r3
    bd30:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    bd32:	9a04      	ldr	r2, [sp, #16]
    bd34:	4653      	mov	r3, sl
    bd36:	021b      	lsls	r3, r3, #8
    bd38:	4313      	orrs	r3, r2
    bd3a:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    bd3c:	9a04      	ldr	r2, [sp, #16]
    bd3e:	ab07      	add	r3, sp, #28
    bd40:	885b      	ldrh	r3, [r3, #2]
    bd42:	041b      	lsls	r3, r3, #16
    bd44:	4313      	orrs	r3, r2
    bd46:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    bd48:	9904      	ldr	r1, [sp, #16]
    bd4a:	4864      	ldr	r0, [pc, #400]	; (bedc <hif_send+0x204>)
    bd4c:	4b64      	ldr	r3, [pc, #400]	; (bee0 <hif_send+0x208>)
    bd4e:	4798      	blx	r3
    bd50:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    bd52:	d154      	bne.n	bdfe <hif_send+0x126>

		reg = 0UL;
    bd54:	2300      	movs	r3, #0
    bd56:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    bd58:	9b04      	ldr	r3, [sp, #16]
    bd5a:	2202      	movs	r2, #2
    bd5c:	4313      	orrs	r3, r2
    bd5e:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    bd60:	9904      	ldr	r1, [sp, #16]
    bd62:	4860      	ldr	r0, [pc, #384]	; (bee4 <hif_send+0x20c>)
    bd64:	4b5e      	ldr	r3, [pc, #376]	; (bee0 <hif_send+0x208>)
    bd66:	4798      	blx	r3
    bd68:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    bd6a:	d148      	bne.n	bdfe <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    bd6c:	2200      	movs	r2, #0
    bd6e:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    bd70:	ab02      	add	r3, sp, #8
    bd72:	80da      	strh	r2, [r3, #6]
    bd74:	3306      	adds	r3, #6
    bd76:	881b      	ldrh	r3, [r3, #0]
    bd78:	b29b      	uxth	r3, r3
    bd7a:	4a5b      	ldr	r2, [pc, #364]	; (bee8 <hif_send+0x210>)
    bd7c:	4293      	cmp	r3, r2
    bd7e:	d846      	bhi.n	be0e <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    bd80:	4c5a      	ldr	r4, [pc, #360]	; (beec <hif_send+0x214>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    bd82:	4b5b      	ldr	r3, [pc, #364]	; (bef0 <hif_send+0x218>)
    bd84:	469a      	mov	sl, r3
    bd86:	e014      	b.n	bdb2 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    bd88:	9b00      	ldr	r3, [sp, #0]
    bd8a:	3308      	adds	r3, #8
    bd8c:	aa07      	add	r2, sp, #28
    bd8e:	8053      	strh	r3, [r2, #2]
    bd90:	e7bb      	b.n	bd0a <hif_send+0x32>
				nm_bsp_sleep(1);
    bd92:	2001      	movs	r0, #1
    bd94:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    bd96:	9b04      	ldr	r3, [sp, #16]
    bd98:	079b      	lsls	r3, r3, #30
    bd9a:	d528      	bpl.n	bdee <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    bd9c:	ab02      	add	r3, sp, #8
    bd9e:	1d9a      	adds	r2, r3, #6
    bda0:	88db      	ldrh	r3, [r3, #6]
    bda2:	3301      	adds	r3, #1
    bda4:	b29b      	uxth	r3, r3
    bda6:	8013      	strh	r3, [r2, #0]
    bda8:	8813      	ldrh	r3, [r2, #0]
    bdaa:	b29b      	uxth	r3, r3
    bdac:	4a4e      	ldr	r2, [pc, #312]	; (bee8 <hif_send+0x210>)
    bdae:	4293      	cmp	r3, r2
    bdb0:	d82d      	bhi.n	be0e <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    bdb2:	a904      	add	r1, sp, #16
    bdb4:	484b      	ldr	r0, [pc, #300]	; (bee4 <hif_send+0x20c>)
    bdb6:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    bdb8:	2800      	cmp	r0, #0
    bdba:	d128      	bne.n	be0e <hif_send+0x136>
			if(cnt >= 500) {
    bdbc:	ab02      	add	r3, sp, #8
    bdbe:	3306      	adds	r3, #6
    bdc0:	881b      	ldrh	r3, [r3, #0]
    bdc2:	b29b      	uxth	r3, r3
    bdc4:	22f4      	movs	r2, #244	; 0xf4
    bdc6:	32ff      	adds	r2, #255	; 0xff
    bdc8:	4293      	cmp	r3, r2
    bdca:	d9e4      	bls.n	bd96 <hif_send+0xbe>
				if(cnt < 501) {
    bdcc:	ab02      	add	r3, sp, #8
    bdce:	3306      	adds	r3, #6
    bdd0:	881b      	ldrh	r3, [r3, #0]
    bdd2:	b29b      	uxth	r3, r3
    bdd4:	3201      	adds	r2, #1
    bdd6:	4293      	cmp	r3, r2
    bdd8:	d8db      	bhi.n	bd92 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    bdda:	4846      	ldr	r0, [pc, #280]	; (bef4 <hif_send+0x21c>)
    bddc:	4b46      	ldr	r3, [pc, #280]	; (bef8 <hif_send+0x220>)
    bdde:	4798      	blx	r3
    bde0:	4846      	ldr	r0, [pc, #280]	; (befc <hif_send+0x224>)
    bde2:	4b47      	ldr	r3, [pc, #284]	; (bf00 <hif_send+0x228>)
    bde4:	4798      	blx	r3
    bde6:	200d      	movs	r0, #13
    bde8:	4b46      	ldr	r3, [pc, #280]	; (bf04 <hif_send+0x22c>)
    bdea:	4798      	blx	r3
    bdec:	e7d1      	b.n	bd92 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    bdee:	a905      	add	r1, sp, #20
    bdf0:	4845      	ldr	r0, [pc, #276]	; (bf08 <hif_send+0x230>)
    bdf2:	4b3e      	ldr	r3, [pc, #248]	; (beec <hif_send+0x214>)
    bdf4:	4798      	blx	r3
    bdf6:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    bdf8:	d009      	beq.n	be0e <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    bdfa:	2300      	movs	r3, #0
    bdfc:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    bdfe:	4b43      	ldr	r3, [pc, #268]	; (bf0c <hif_send+0x234>)
    be00:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    be02:	0020      	movs	r0, r4
    be04:	b009      	add	sp, #36	; 0x24
    be06:	bc0c      	pop	{r2, r3}
    be08:	4692      	mov	sl, r2
    be0a:	469b      	mov	fp, r3
    be0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    be0e:	9b05      	ldr	r3, [sp, #20]
    be10:	2b00      	cmp	r3, #0
    be12:	d03c      	beq.n	be8e <hif_send+0x1b6>
			u32CurrAddr = dma_addr;
    be14:	9b05      	ldr	r3, [sp, #20]
    be16:	9306      	str	r3, [sp, #24]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    be18:	9806      	ldr	r0, [sp, #24]
    be1a:	2208      	movs	r2, #8
    be1c:	a907      	add	r1, sp, #28
    be1e:	4b3c      	ldr	r3, [pc, #240]	; (bf10 <hif_send+0x238>)
    be20:	4798      	blx	r3
    be22:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    be24:	d1eb      	bne.n	bdfe <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    be26:	9b06      	ldr	r3, [sp, #24]
    be28:	3308      	adds	r3, #8
    be2a:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    be2c:	9b01      	ldr	r3, [sp, #4]
    be2e:	2b00      	cmp	r3, #0
    be30:	d00b      	beq.n	be4a <hif_send+0x172>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    be32:	9806      	ldr	r0, [sp, #24]
    be34:	9a00      	ldr	r2, [sp, #0]
    be36:	0019      	movs	r1, r3
    be38:	4b35      	ldr	r3, [pc, #212]	; (bf10 <hif_send+0x238>)
    be3a:	4798      	blx	r3
    be3c:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    be3e:	d1de      	bne.n	bdfe <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    be40:	9b06      	ldr	r3, [sp, #24]
    be42:	9a00      	ldr	r2, [sp, #0]
    be44:	4694      	mov	ip, r2
    be46:	4463      	add	r3, ip
    be48:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    be4a:	2f00      	cmp	r7, #0
    be4c:	d00e      	beq.n	be6c <hif_send+0x194>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    be4e:	9b06      	ldr	r3, [sp, #24]
    be50:	9a00      	ldr	r2, [sp, #0]
    be52:	1aad      	subs	r5, r5, r2
    be54:	18ed      	adds	r5, r5, r3
    be56:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    be58:	9806      	ldr	r0, [sp, #24]
    be5a:	0032      	movs	r2, r6
    be5c:	0039      	movs	r1, r7
    be5e:	4b2c      	ldr	r3, [pc, #176]	; (bf10 <hif_send+0x238>)
    be60:	4798      	blx	r3
    be62:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    be64:	d1cb      	bne.n	bdfe <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    be66:	9b06      	ldr	r3, [sp, #24]
    be68:	18f3      	adds	r3, r6, r3
    be6a:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    be6c:	9b05      	ldr	r3, [sp, #20]
    be6e:	009b      	lsls	r3, r3, #2
    be70:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    be72:	9b04      	ldr	r3, [sp, #16]
    be74:	2202      	movs	r2, #2
    be76:	4313      	orrs	r3, r2
    be78:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    be7a:	9904      	ldr	r1, [sp, #16]
    be7c:	4825      	ldr	r0, [pc, #148]	; (bf14 <hif_send+0x23c>)
    be7e:	4b18      	ldr	r3, [pc, #96]	; (bee0 <hif_send+0x208>)
    be80:	4798      	blx	r3
    be82:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    be84:	d1bb      	bne.n	bdfe <hif_send+0x126>
 	ret = hif_chip_sleep();
    be86:	4b24      	ldr	r3, [pc, #144]	; (bf18 <hif_send+0x240>)
    be88:	4798      	blx	r3
    be8a:	0004      	movs	r4, r0
	return ret;
    be8c:	e7b9      	b.n	be02 <hif_send+0x12a>
			ret = hif_chip_sleep();
    be8e:	4b22      	ldr	r3, [pc, #136]	; (bf18 <hif_send+0x240>)
    be90:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    be92:	2403      	movs	r4, #3
    be94:	4264      	negs	r4, r4
			goto ERR2;
    be96:	e7b4      	b.n	be02 <hif_send+0x12a>
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
    be98:	22ca      	movs	r2, #202	; 0xca
    be9a:	0052      	lsls	r2, r2, #1
    be9c:	491f      	ldr	r1, [pc, #124]	; (bf1c <hif_send+0x244>)
    be9e:	4820      	ldr	r0, [pc, #128]	; (bf20 <hif_send+0x248>)
    bea0:	4b15      	ldr	r3, [pc, #84]	; (bef8 <hif_send+0x220>)
    bea2:	4798      	blx	r3
    bea4:	481f      	ldr	r0, [pc, #124]	; (bf24 <hif_send+0x24c>)
    bea6:	4b16      	ldr	r3, [pc, #88]	; (bf00 <hif_send+0x228>)
    bea8:	4798      	blx	r3
    beaa:	200d      	movs	r0, #13
    beac:	4b15      	ldr	r3, [pc, #84]	; (bf04 <hif_send+0x22c>)
    beae:	4798      	blx	r3
            goto ERR2;
    beb0:	e7a7      	b.n	be02 <hif_send+0x12a>
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
    beb2:	22cd      	movs	r2, #205	; 0xcd
    beb4:	0052      	lsls	r2, r2, #1
    beb6:	4919      	ldr	r1, [pc, #100]	; (bf1c <hif_send+0x244>)
    beb8:	4819      	ldr	r0, [pc, #100]	; (bf20 <hif_send+0x248>)
    beba:	4c0f      	ldr	r4, [pc, #60]	; (bef8 <hif_send+0x220>)
    bebc:	47a0      	blx	r4
    bebe:	ab07      	add	r3, sp, #28
    bec0:	8859      	ldrh	r1, [r3, #2]
    bec2:	4a04      	ldr	r2, [pc, #16]	; (bed4 <hif_send+0x1fc>)
    bec4:	4818      	ldr	r0, [pc, #96]	; (bf28 <hif_send+0x250>)
    bec6:	47a0      	blx	r4
    bec8:	200d      	movs	r0, #13
    beca:	4b0e      	ldr	r3, [pc, #56]	; (bf04 <hif_send+0x22c>)
    becc:	4798      	blx	r3
        ret = M2M_ERR_SEND;
    bece:	2401      	movs	r4, #1
    bed0:	4264      	negs	r4, r4
		goto ERR2;
    bed2:	e796      	b.n	be02 <hif_send+0x12a>
    bed4:	0000063c 	.word	0x0000063c
    bed8:	0000bc49 	.word	0x0000bc49
    bedc:	0000108c 	.word	0x0000108c
    bee0:	0000d0a1 	.word	0x0000d0a1
    bee4:	00001078 	.word	0x00001078
    bee8:	000003e7 	.word	0x000003e7
    beec:	0000d095 	.word	0x0000d095
    bef0:	0000b839 	.word	0x0000b839
    bef4:	0001b7c0 	.word	0x0001b7c0
    bef8:	0001916d 	.word	0x0001916d
    befc:	0001b7cc 	.word	0x0001b7cc
    bf00:	00019289 	.word	0x00019289
    bf04:	000191a1 	.word	0x000191a1
    bf08:	00150400 	.word	0x00150400
    bf0c:	0000bc85 	.word	0x0000bc85
    bf10:	0000d115 	.word	0x0000d115
    bf14:	0000106c 	.word	0x0000106c
    bf18:	0000bca1 	.word	0x0000bca1
    bf1c:	0001b468 	.word	0x0001b468
    bf20:	0001b420 	.word	0x0001b420
    bf24:	0001b7dc 	.word	0x0001b7dc
    bf28:	0001b7fc 	.word	0x0001b7fc

0000bf2c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    bf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf2e:	46de      	mov	lr, fp
    bf30:	4657      	mov	r7, sl
    bf32:	464e      	mov	r6, r9
    bf34:	b5c0      	push	{r6, r7, lr}
    bf36:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    bf38:	2200      	movs	r2, #0
    bf3a:	4bd8      	ldr	r3, [pc, #864]	; (c29c <hif_handle_isr+0x370>)
    bf3c:	711a      	strb	r2, [r3, #4]
	sint8 ret = M2M_SUCCESS;	
    bf3e:	2600      	movs	r6, #0
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
    bf40:	4699      	mov	r9, r3
    bf42:	469a      	mov	sl, r3
    bf44:	e148      	b.n	c1d8 <hif_handle_isr+0x2ac>
				gstrHifCxt.u32RxAddr = address;
    bf46:	4bd5      	ldr	r3, [pc, #852]	; (c29c <hif_handle_isr+0x370>)
    bf48:	9a05      	ldr	r2, [sp, #20]
    bf4a:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    bf4c:	465a      	mov	r2, fp
    bf4e:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    bf50:	2204      	movs	r2, #4
    bf52:	a904      	add	r1, sp, #16
    bf54:	9805      	ldr	r0, [sp, #20]
    bf56:	4bd2      	ldr	r3, [pc, #840]	; (c2a0 <hif_handle_isr+0x374>)
    bf58:	4798      	blx	r3
    bf5a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    bf5c:	466b      	mov	r3, sp
    bf5e:	8a5b      	ldrh	r3, [r3, #18]
    bf60:	b29b      	uxth	r3, r3
    bf62:	466a      	mov	r2, sp
    bf64:	8253      	strh	r3, [r2, #18]
				if(M2M_SUCCESS != ret)
    bf66:	2800      	cmp	r0, #0
    bf68:	d134      	bne.n	bfd4 <hif_handle_isr+0xa8>
				if(strHif.u16Length != size)
    bf6a:	ab04      	add	r3, sp, #16
    bf6c:	885b      	ldrh	r3, [r3, #2]
    bf6e:	b29b      	uxth	r3, r3
    bf70:	459b      	cmp	fp, r3
    bf72:	d005      	beq.n	bf80 <hif_handle_isr+0x54>
					if((size - strHif.u16Length) > 4)
    bf74:	ab04      	add	r3, sp, #16
    bf76:	885b      	ldrh	r3, [r3, #2]
    bf78:	465a      	mov	r2, fp
    bf7a:	1ad3      	subs	r3, r2, r3
    bf7c:	2b04      	cmp	r3, #4
    bf7e:	dc36      	bgt.n	bfee <hif_handle_isr+0xc2>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    bf80:	ab04      	add	r3, sp, #16
    bf82:	781b      	ldrb	r3, [r3, #0]
    bf84:	2b01      	cmp	r3, #1
    bf86:	d048      	beq.n	c01a <hif_handle_isr+0xee>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    bf88:	ab04      	add	r3, sp, #16
    bf8a:	781b      	ldrb	r3, [r3, #0]
    bf8c:	2b02      	cmp	r3, #2
    bf8e:	d07b      	beq.n	c088 <hif_handle_isr+0x15c>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    bf90:	ab04      	add	r3, sp, #16
    bf92:	781b      	ldrb	r3, [r3, #0]
    bf94:	2b04      	cmp	r3, #4
    bf96:	d100      	bne.n	bf9a <hif_handle_isr+0x6e>
    bf98:	e093      	b.n	c0c2 <hif_handle_isr+0x196>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    bf9a:	ab04      	add	r3, sp, #16
    bf9c:	781b      	ldrb	r3, [r3, #0]
    bf9e:	2b06      	cmp	r3, #6
    bfa0:	d100      	bne.n	bfa4 <hif_handle_isr+0x78>
    bfa2:	e0ab      	b.n	c0fc <hif_handle_isr+0x1d0>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    bfa4:	ab04      	add	r3, sp, #16
    bfa6:	781b      	ldrb	r3, [r3, #0]
    bfa8:	2b07      	cmp	r3, #7
    bfaa:	d100      	bne.n	bfae <hif_handle_isr+0x82>
    bfac:	e0c3      	b.n	c136 <hif_handle_isr+0x20a>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    bfae:	ab04      	add	r3, sp, #16
    bfb0:	781b      	ldrb	r3, [r3, #0]
    bfb2:	2b05      	cmp	r3, #5
    bfb4:	d100      	bne.n	bfb8 <hif_handle_isr+0x8c>
    bfb6:	e0da      	b.n	c16e <hif_handle_isr+0x242>
					M2M_ERR("(hif) invalid group ID\n");
    bfb8:	4aba      	ldr	r2, [pc, #744]	; (c2a4 <hif_handle_isr+0x378>)
    bfba:	49bb      	ldr	r1, [pc, #748]	; (c2a8 <hif_handle_isr+0x37c>)
    bfbc:	48bb      	ldr	r0, [pc, #748]	; (c2ac <hif_handle_isr+0x380>)
    bfbe:	4bbc      	ldr	r3, [pc, #752]	; (c2b0 <hif_handle_isr+0x384>)
    bfc0:	4798      	blx	r3
    bfc2:	48bc      	ldr	r0, [pc, #752]	; (c2b4 <hif_handle_isr+0x388>)
    bfc4:	4bbc      	ldr	r3, [pc, #752]	; (c2b8 <hif_handle_isr+0x38c>)
    bfc6:	4798      	blx	r3
    bfc8:	200d      	movs	r0, #13
    bfca:	4bbc      	ldr	r3, [pc, #752]	; (c2bc <hif_handle_isr+0x390>)
    bfcc:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    bfce:	2406      	movs	r4, #6
    bfd0:	4264      	negs	r4, r4
    bfd2:	e123      	b.n	c21c <hif_handle_isr+0x2f0>
					M2M_ERR("(hif) address bus fail\n");
    bfd4:	22ea      	movs	r2, #234	; 0xea
    bfd6:	0052      	lsls	r2, r2, #1
    bfd8:	49b3      	ldr	r1, [pc, #716]	; (c2a8 <hif_handle_isr+0x37c>)
    bfda:	48b4      	ldr	r0, [pc, #720]	; (c2ac <hif_handle_isr+0x380>)
    bfdc:	4bb4      	ldr	r3, [pc, #720]	; (c2b0 <hif_handle_isr+0x384>)
    bfde:	4798      	blx	r3
    bfe0:	48b7      	ldr	r0, [pc, #732]	; (c2c0 <hif_handle_isr+0x394>)
    bfe2:	4bb5      	ldr	r3, [pc, #724]	; (c2b8 <hif_handle_isr+0x38c>)
    bfe4:	4798      	blx	r3
    bfe6:	200d      	movs	r0, #13
    bfe8:	4bb4      	ldr	r3, [pc, #720]	; (c2bc <hif_handle_isr+0x390>)
    bfea:	4798      	blx	r3
    bfec:	e116      	b.n	c21c <hif_handle_isr+0x2f0>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    bfee:	22ee      	movs	r2, #238	; 0xee
    bff0:	0052      	lsls	r2, r2, #1
    bff2:	49ad      	ldr	r1, [pc, #692]	; (c2a8 <hif_handle_isr+0x37c>)
    bff4:	48ad      	ldr	r0, [pc, #692]	; (c2ac <hif_handle_isr+0x380>)
    bff6:	4cae      	ldr	r4, [pc, #696]	; (c2b0 <hif_handle_isr+0x384>)
    bff8:	47a0      	blx	r4
    bffa:	a904      	add	r1, sp, #16
    bffc:	884a      	ldrh	r2, [r1, #2]
    bffe:	b292      	uxth	r2, r2
    c000:	780b      	ldrb	r3, [r1, #0]
    c002:	b2db      	uxtb	r3, r3
    c004:	7849      	ldrb	r1, [r1, #1]
    c006:	9100      	str	r1, [sp, #0]
    c008:	4659      	mov	r1, fp
    c00a:	48ae      	ldr	r0, [pc, #696]	; (c2c4 <hif_handle_isr+0x398>)
    c00c:	47a0      	blx	r4
    c00e:	200d      	movs	r0, #13
    c010:	4baa      	ldr	r3, [pc, #680]	; (c2bc <hif_handle_isr+0x390>)
    c012:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    c014:	2406      	movs	r4, #6
    c016:	4264      	negs	r4, r4
    c018:	e100      	b.n	c21c <hif_handle_isr+0x2f0>
					if(gstrHifCxt.pfWifiCb)
    c01a:	4ba0      	ldr	r3, [pc, #640]	; (c29c <hif_handle_isr+0x370>)
    c01c:	691b      	ldr	r3, [r3, #16]
    c01e:	2b00      	cmp	r3, #0
    c020:	d025      	beq.n	c06e <hif_handle_isr+0x142>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    c022:	4b9e      	ldr	r3, [pc, #632]	; (c29c <hif_handle_isr+0x370>)
    c024:	691b      	ldr	r3, [r3, #16]
    c026:	aa04      	add	r2, sp, #16
    c028:	7850      	ldrb	r0, [r2, #1]
    c02a:	b2c0      	uxtb	r0, r0
    c02c:	8851      	ldrh	r1, [r2, #2]
    c02e:	9a05      	ldr	r2, [sp, #20]
    c030:	3208      	adds	r2, #8
    c032:	3908      	subs	r1, #8
    c034:	b289      	uxth	r1, r1
    c036:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    c038:	4b98      	ldr	r3, [pc, #608]	; (c29c <hif_handle_isr+0x370>)
    c03a:	789b      	ldrb	r3, [r3, #2]
    c03c:	2b00      	cmp	r3, #0
    c03e:	d100      	bne.n	c042 <hif_handle_isr+0x116>
    c040:	e0ca      	b.n	c1d8 <hif_handle_isr+0x2ac>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    c042:	2285      	movs	r2, #133	; 0x85
    c044:	0092      	lsls	r2, r2, #2
    c046:	4998      	ldr	r1, [pc, #608]	; (c2a8 <hif_handle_isr+0x37c>)
    c048:	4898      	ldr	r0, [pc, #608]	; (c2ac <hif_handle_isr+0x380>)
    c04a:	4c99      	ldr	r4, [pc, #612]	; (c2b0 <hif_handle_isr+0x384>)
    c04c:	47a0      	blx	r4
    c04e:	ab04      	add	r3, sp, #16
    c050:	7819      	ldrb	r1, [r3, #0]
    c052:	b2c9      	uxtb	r1, r1
    c054:	785a      	ldrb	r2, [r3, #1]
    c056:	b2d2      	uxtb	r2, r2
    c058:	489b      	ldr	r0, [pc, #620]	; (c2c8 <hif_handle_isr+0x39c>)
    c05a:	47a0      	blx	r4
    c05c:	200d      	movs	r0, #13
    c05e:	4b97      	ldr	r3, [pc, #604]	; (c2bc <hif_handle_isr+0x390>)
    c060:	4798      	blx	r3
					ret = hif_set_rx_done();
    c062:	4b9a      	ldr	r3, [pc, #616]	; (c2cc <hif_handle_isr+0x3a0>)
    c064:	4798      	blx	r3
    c066:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    c068:	d000      	beq.n	c06c <hif_handle_isr+0x140>
    c06a:	e0d7      	b.n	c21c <hif_handle_isr+0x2f0>
    c06c:	e0b4      	b.n	c1d8 <hif_handle_isr+0x2ac>
						M2M_ERR("WIFI callback is not registered\n");
    c06e:	22e8      	movs	r2, #232	; 0xe8
    c070:	32ff      	adds	r2, #255	; 0xff
    c072:	498d      	ldr	r1, [pc, #564]	; (c2a8 <hif_handle_isr+0x37c>)
    c074:	488d      	ldr	r0, [pc, #564]	; (c2ac <hif_handle_isr+0x380>)
    c076:	4b8e      	ldr	r3, [pc, #568]	; (c2b0 <hif_handle_isr+0x384>)
    c078:	4798      	blx	r3
    c07a:	4895      	ldr	r0, [pc, #596]	; (c2d0 <hif_handle_isr+0x3a4>)
    c07c:	4b8e      	ldr	r3, [pc, #568]	; (c2b8 <hif_handle_isr+0x38c>)
    c07e:	4798      	blx	r3
    c080:	200d      	movs	r0, #13
    c082:	4b8e      	ldr	r3, [pc, #568]	; (c2bc <hif_handle_isr+0x390>)
    c084:	4798      	blx	r3
    c086:	e7d7      	b.n	c038 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfIpCb)
    c088:	4b84      	ldr	r3, [pc, #528]	; (c29c <hif_handle_isr+0x370>)
    c08a:	695b      	ldr	r3, [r3, #20]
    c08c:	2b00      	cmp	r3, #0
    c08e:	d00b      	beq.n	c0a8 <hif_handle_isr+0x17c>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    c090:	4b82      	ldr	r3, [pc, #520]	; (c29c <hif_handle_isr+0x370>)
    c092:	695b      	ldr	r3, [r3, #20]
    c094:	aa04      	add	r2, sp, #16
    c096:	7850      	ldrb	r0, [r2, #1]
    c098:	b2c0      	uxtb	r0, r0
    c09a:	8851      	ldrh	r1, [r2, #2]
    c09c:	9a05      	ldr	r2, [sp, #20]
    c09e:	3208      	adds	r2, #8
    c0a0:	3908      	subs	r1, #8
    c0a2:	b289      	uxth	r1, r1
    c0a4:	4798      	blx	r3
    c0a6:	e7c7      	b.n	c038 <hif_handle_isr+0x10c>
						M2M_ERR("Socket callback is not registered\n");
    c0a8:	22f7      	movs	r2, #247	; 0xf7
    c0aa:	0052      	lsls	r2, r2, #1
    c0ac:	497e      	ldr	r1, [pc, #504]	; (c2a8 <hif_handle_isr+0x37c>)
    c0ae:	487f      	ldr	r0, [pc, #508]	; (c2ac <hif_handle_isr+0x380>)
    c0b0:	4b7f      	ldr	r3, [pc, #508]	; (c2b0 <hif_handle_isr+0x384>)
    c0b2:	4798      	blx	r3
    c0b4:	4887      	ldr	r0, [pc, #540]	; (c2d4 <hif_handle_isr+0x3a8>)
    c0b6:	4b80      	ldr	r3, [pc, #512]	; (c2b8 <hif_handle_isr+0x38c>)
    c0b8:	4798      	blx	r3
    c0ba:	200d      	movs	r0, #13
    c0bc:	4b7f      	ldr	r3, [pc, #508]	; (c2bc <hif_handle_isr+0x390>)
    c0be:	4798      	blx	r3
    c0c0:	e7ba      	b.n	c038 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfOtaCb)
    c0c2:	4b76      	ldr	r3, [pc, #472]	; (c29c <hif_handle_isr+0x370>)
    c0c4:	699b      	ldr	r3, [r3, #24]
    c0c6:	2b00      	cmp	r3, #0
    c0c8:	d00b      	beq.n	c0e2 <hif_handle_isr+0x1b6>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    c0ca:	4b74      	ldr	r3, [pc, #464]	; (c29c <hif_handle_isr+0x370>)
    c0cc:	699b      	ldr	r3, [r3, #24]
    c0ce:	aa04      	add	r2, sp, #16
    c0d0:	7850      	ldrb	r0, [r2, #1]
    c0d2:	b2c0      	uxtb	r0, r0
    c0d4:	8851      	ldrh	r1, [r2, #2]
    c0d6:	9a05      	ldr	r2, [sp, #20]
    c0d8:	3208      	adds	r2, #8
    c0da:	3908      	subs	r1, #8
    c0dc:	b289      	uxth	r1, r1
    c0de:	4798      	blx	r3
    c0e0:	e7aa      	b.n	c038 <hif_handle_isr+0x10c>
						M2M_ERR("Ota callback is not registered\n");
    c0e2:	22f6      	movs	r2, #246	; 0xf6
    c0e4:	32ff      	adds	r2, #255	; 0xff
    c0e6:	4970      	ldr	r1, [pc, #448]	; (c2a8 <hif_handle_isr+0x37c>)
    c0e8:	4870      	ldr	r0, [pc, #448]	; (c2ac <hif_handle_isr+0x380>)
    c0ea:	4b71      	ldr	r3, [pc, #452]	; (c2b0 <hif_handle_isr+0x384>)
    c0ec:	4798      	blx	r3
    c0ee:	487a      	ldr	r0, [pc, #488]	; (c2d8 <hif_handle_isr+0x3ac>)
    c0f0:	4b71      	ldr	r3, [pc, #452]	; (c2b8 <hif_handle_isr+0x38c>)
    c0f2:	4798      	blx	r3
    c0f4:	200d      	movs	r0, #13
    c0f6:	4b71      	ldr	r3, [pc, #452]	; (c2bc <hif_handle_isr+0x390>)
    c0f8:	4798      	blx	r3
    c0fa:	e79d      	b.n	c038 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfCryptoCb)
    c0fc:	4b67      	ldr	r3, [pc, #412]	; (c29c <hif_handle_isr+0x370>)
    c0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c100:	2b00      	cmp	r3, #0
    c102:	d00b      	beq.n	c11c <hif_handle_isr+0x1f0>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    c104:	4b65      	ldr	r3, [pc, #404]	; (c29c <hif_handle_isr+0x370>)
    c106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c108:	aa04      	add	r2, sp, #16
    c10a:	7850      	ldrb	r0, [r2, #1]
    c10c:	b2c0      	uxtb	r0, r0
    c10e:	8851      	ldrh	r1, [r2, #2]
    c110:	9a05      	ldr	r2, [sp, #20]
    c112:	3208      	adds	r2, #8
    c114:	3908      	subs	r1, #8
    c116:	b289      	uxth	r1, r1
    c118:	4798      	blx	r3
    c11a:	e78d      	b.n	c038 <hif_handle_isr+0x10c>
						M2M_ERR("Crypto callback is not registered\n");
    c11c:	22fe      	movs	r2, #254	; 0xfe
    c11e:	0052      	lsls	r2, r2, #1
    c120:	4961      	ldr	r1, [pc, #388]	; (c2a8 <hif_handle_isr+0x37c>)
    c122:	4862      	ldr	r0, [pc, #392]	; (c2ac <hif_handle_isr+0x380>)
    c124:	4b62      	ldr	r3, [pc, #392]	; (c2b0 <hif_handle_isr+0x384>)
    c126:	4798      	blx	r3
    c128:	486c      	ldr	r0, [pc, #432]	; (c2dc <hif_handle_isr+0x3b0>)
    c12a:	4b63      	ldr	r3, [pc, #396]	; (c2b8 <hif_handle_isr+0x38c>)
    c12c:	4798      	blx	r3
    c12e:	200d      	movs	r0, #13
    c130:	4b62      	ldr	r3, [pc, #392]	; (c2bc <hif_handle_isr+0x390>)
    c132:	4798      	blx	r3
    c134:	e780      	b.n	c038 <hif_handle_isr+0x10c>
					if(gstrHifCxt.pfSigmaCb)
    c136:	4b59      	ldr	r3, [pc, #356]	; (c29c <hif_handle_isr+0x370>)
    c138:	69db      	ldr	r3, [r3, #28]
    c13a:	2b00      	cmp	r3, #0
    c13c:	d00b      	beq.n	c156 <hif_handle_isr+0x22a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    c13e:	4b57      	ldr	r3, [pc, #348]	; (c29c <hif_handle_isr+0x370>)
    c140:	69db      	ldr	r3, [r3, #28]
    c142:	aa04      	add	r2, sp, #16
    c144:	7850      	ldrb	r0, [r2, #1]
    c146:	b2c0      	uxtb	r0, r0
    c148:	8851      	ldrh	r1, [r2, #2]
    c14a:	9a05      	ldr	r2, [sp, #20]
    c14c:	3208      	adds	r2, #8
    c14e:	3908      	subs	r1, #8
    c150:	b289      	uxth	r1, r1
    c152:	4798      	blx	r3
    c154:	e770      	b.n	c038 <hif_handle_isr+0x10c>
						M2M_ERR("Sigma callback is not registered\n");
    c156:	4a62      	ldr	r2, [pc, #392]	; (c2e0 <hif_handle_isr+0x3b4>)
    c158:	4953      	ldr	r1, [pc, #332]	; (c2a8 <hif_handle_isr+0x37c>)
    c15a:	4854      	ldr	r0, [pc, #336]	; (c2ac <hif_handle_isr+0x380>)
    c15c:	4b54      	ldr	r3, [pc, #336]	; (c2b0 <hif_handle_isr+0x384>)
    c15e:	4798      	blx	r3
    c160:	4860      	ldr	r0, [pc, #384]	; (c2e4 <hif_handle_isr+0x3b8>)
    c162:	4b55      	ldr	r3, [pc, #340]	; (c2b8 <hif_handle_isr+0x38c>)
    c164:	4798      	blx	r3
    c166:	200d      	movs	r0, #13
    c168:	4b54      	ldr	r3, [pc, #336]	; (c2bc <hif_handle_isr+0x390>)
    c16a:	4798      	blx	r3
    c16c:	e764      	b.n	c038 <hif_handle_isr+0x10c>
				    if(gstrHifCxt.pfSslCb)
    c16e:	4b4b      	ldr	r3, [pc, #300]	; (c29c <hif_handle_isr+0x370>)
    c170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c172:	2b00      	cmp	r3, #0
    c174:	d00b      	beq.n	c18e <hif_handle_isr+0x262>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    c176:	4b49      	ldr	r3, [pc, #292]	; (c29c <hif_handle_isr+0x370>)
    c178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c17a:	aa04      	add	r2, sp, #16
    c17c:	7850      	ldrb	r0, [r2, #1]
    c17e:	b2c0      	uxtb	r0, r0
    c180:	8851      	ldrh	r1, [r2, #2]
    c182:	9a05      	ldr	r2, [sp, #20]
    c184:	3208      	adds	r2, #8
    c186:	3908      	subs	r1, #8
    c188:	b289      	uxth	r1, r1
    c18a:	4798      	blx	r3
    c18c:	e754      	b.n	c038 <hif_handle_isr+0x10c>
                        M2M_ERR("SSL callback is not registered\n");
    c18e:	4a56      	ldr	r2, [pc, #344]	; (c2e8 <hif_handle_isr+0x3bc>)
    c190:	4945      	ldr	r1, [pc, #276]	; (c2a8 <hif_handle_isr+0x37c>)
    c192:	4846      	ldr	r0, [pc, #280]	; (c2ac <hif_handle_isr+0x380>)
    c194:	4b46      	ldr	r3, [pc, #280]	; (c2b0 <hif_handle_isr+0x384>)
    c196:	4798      	blx	r3
    c198:	4854      	ldr	r0, [pc, #336]	; (c2ec <hif_handle_isr+0x3c0>)
    c19a:	4b47      	ldr	r3, [pc, #284]	; (c2b8 <hif_handle_isr+0x38c>)
    c19c:	4798      	blx	r3
    c19e:	200d      	movs	r0, #13
    c1a0:	4b46      	ldr	r3, [pc, #280]	; (c2bc <hif_handle_isr+0x390>)
    c1a2:	4798      	blx	r3
    c1a4:	e748      	b.n	c038 <hif_handle_isr+0x10c>
				M2M_ERR("(hif) Wrong Size\n");
    c1a6:	4a52      	ldr	r2, [pc, #328]	; (c2f0 <hif_handle_isr+0x3c4>)
    c1a8:	493f      	ldr	r1, [pc, #252]	; (c2a8 <hif_handle_isr+0x37c>)
    c1aa:	4840      	ldr	r0, [pc, #256]	; (c2ac <hif_handle_isr+0x380>)
    c1ac:	4b40      	ldr	r3, [pc, #256]	; (c2b0 <hif_handle_isr+0x384>)
    c1ae:	4798      	blx	r3
    c1b0:	4850      	ldr	r0, [pc, #320]	; (c2f4 <hif_handle_isr+0x3c8>)
    c1b2:	4b41      	ldr	r3, [pc, #260]	; (c2b8 <hif_handle_isr+0x38c>)
    c1b4:	4798      	blx	r3
    c1b6:	200d      	movs	r0, #13
    c1b8:	4b40      	ldr	r3, [pc, #256]	; (c2bc <hif_handle_isr+0x390>)
    c1ba:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    c1bc:	2402      	movs	r4, #2
    c1be:	4264      	negs	r4, r4
    c1c0:	e02c      	b.n	c21c <hif_handle_isr+0x2f0>
			M2M_ERR("(hif) False interrupt %lx",reg);
    c1c2:	4a4d      	ldr	r2, [pc, #308]	; (c2f8 <hif_handle_isr+0x3cc>)
    c1c4:	4938      	ldr	r1, [pc, #224]	; (c2a8 <hif_handle_isr+0x37c>)
    c1c6:	4839      	ldr	r0, [pc, #228]	; (c2ac <hif_handle_isr+0x380>)
    c1c8:	4c39      	ldr	r4, [pc, #228]	; (c2b0 <hif_handle_isr+0x384>)
    c1ca:	47a0      	blx	r4
    c1cc:	9903      	ldr	r1, [sp, #12]
    c1ce:	484b      	ldr	r0, [pc, #300]	; (c2fc <hif_handle_isr+0x3d0>)
    c1d0:	47a0      	blx	r4
    c1d2:	200d      	movs	r0, #13
    c1d4:	4b39      	ldr	r3, [pc, #228]	; (c2bc <hif_handle_isr+0x390>)
    c1d6:	4798      	blx	r3
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
    c1d8:	464b      	mov	r3, r9
    c1da:	78db      	ldrb	r3, [r3, #3]
    c1dc:	2b00      	cmp	r3, #0
    c1de:	d100      	bne.n	c1e2 <hif_handle_isr+0x2b6>
    c1e0:	e0b1      	b.n	c346 <hif_handle_isr+0x41a>
    c1e2:	4653      	mov	r3, sl
    c1e4:	791b      	ldrb	r3, [r3, #4]
    c1e6:	2b00      	cmp	r3, #0
    c1e8:	d000      	beq.n	c1ec <hif_handle_isr+0x2c0>
    c1ea:	e0ac      	b.n	c346 <hif_handle_isr+0x41a>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(0);
    c1ec:	2000      	movs	r0, #0
    c1ee:	4c44      	ldr	r4, [pc, #272]	; (c300 <hif_handle_isr+0x3d4>)
    c1f0:	47a0      	blx	r4
#endif

		gstrHifCxt.u8Interrupt--;
    c1f2:	4a2a      	ldr	r2, [pc, #168]	; (c29c <hif_handle_isr+0x370>)
    c1f4:	78d3      	ldrb	r3, [r2, #3]
    c1f6:	3b01      	subs	r3, #1
    c1f8:	b2db      	uxtb	r3, r3
    c1fa:	70d3      	strb	r3, [r2, #3]

#ifndef NM_LEVEL_INTERRUPT
		nm_bsp_interrupt_ctrl(1);
    c1fc:	2001      	movs	r0, #1
    c1fe:	47a0      	blx	r4
    c200:	2504      	movs	r5, #4
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    c202:	4f40      	ldr	r7, [pc, #256]	; (c304 <hif_handle_isr+0x3d8>)
    c204:	e01a      	b.n	c23c <hif_handle_isr+0x310>
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
    c206:	4a40      	ldr	r2, [pc, #256]	; (c308 <hif_handle_isr+0x3dc>)
    c208:	4927      	ldr	r1, [pc, #156]	; (c2a8 <hif_handle_isr+0x37c>)
    c20a:	4828      	ldr	r0, [pc, #160]	; (c2ac <hif_handle_isr+0x380>)
    c20c:	4b28      	ldr	r3, [pc, #160]	; (c2b0 <hif_handle_isr+0x384>)
    c20e:	4798      	blx	r3
    c210:	483e      	ldr	r0, [pc, #248]	; (c30c <hif_handle_isr+0x3e0>)
    c212:	4b29      	ldr	r3, [pc, #164]	; (c2b8 <hif_handle_isr+0x38c>)
    c214:	4798      	blx	r3
    c216:	200d      	movs	r0, #13
    c218:	4b28      	ldr	r3, [pc, #160]	; (c2bc <hif_handle_isr+0x390>)
    c21a:	4798      	blx	r3
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
				if(!retries)
    c21c:	2d00      	cmp	r5, #0
    c21e:	d100      	bne.n	c222 <hif_handle_isr+0x2f6>
    c220:	e084      	b.n	c32c <hif_handle_isr+0x400>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
					break;
				}
				else
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
    c222:	4a3b      	ldr	r2, [pc, #236]	; (c310 <hif_handle_isr+0x3e4>)
    c224:	493b      	ldr	r1, [pc, #236]	; (c314 <hif_handle_isr+0x3e8>)
    c226:	4821      	ldr	r0, [pc, #132]	; (c2ac <hif_handle_isr+0x380>)
    c228:	4e21      	ldr	r6, [pc, #132]	; (c2b0 <hif_handle_isr+0x384>)
    c22a:	47b0      	blx	r6
    c22c:	002a      	movs	r2, r5
    c22e:	0021      	movs	r1, r4
    c230:	4839      	ldr	r0, [pc, #228]	; (c318 <hif_handle_isr+0x3ec>)
    c232:	47b0      	blx	r6
    c234:	200d      	movs	r0, #13
    c236:	4b21      	ldr	r3, [pc, #132]	; (c2bc <hif_handle_isr+0x390>)
    c238:	4798      	blx	r3
    c23a:	3d01      	subs	r5, #1
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    c23c:	a903      	add	r1, sp, #12
    c23e:	4837      	ldr	r0, [pc, #220]	; (c31c <hif_handle_isr+0x3f0>)
    c240:	47b8      	blx	r7
    c242:	0004      	movs	r4, r0
    c244:	1e06      	subs	r6, r0, #0
	if(M2M_SUCCESS == ret)
    c246:	d1de      	bne.n	c206 <hif_handle_isr+0x2da>
		if(reg & 0x1)	/* New interrupt has been received */
    c248:	9903      	ldr	r1, [sp, #12]
    c24a:	07cb      	lsls	r3, r1, #31
    c24c:	d5b9      	bpl.n	c1c2 <hif_handle_isr+0x296>
			reg &= ~NBIT0;
    c24e:	2301      	movs	r3, #1
    c250:	4399      	bics	r1, r3
    c252:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    c254:	4831      	ldr	r0, [pc, #196]	; (c31c <hif_handle_isr+0x3f0>)
    c256:	4b32      	ldr	r3, [pc, #200]	; (c320 <hif_handle_isr+0x3f4>)
    c258:	4798      	blx	r3
    c25a:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    c25c:	d1de      	bne.n	c21c <hif_handle_isr+0x2f0>
			gstrHifCxt.u8HifRXDone = 1;
    c25e:	2201      	movs	r2, #1
    c260:	4b0e      	ldr	r3, [pc, #56]	; (c29c <hif_handle_isr+0x370>)
    c262:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    c264:	9b03      	ldr	r3, [sp, #12]
    c266:	049b      	lsls	r3, r3, #18
    c268:	0d1b      	lsrs	r3, r3, #20
    c26a:	469b      	mov	fp, r3
			if (size > 0) {
    c26c:	d09b      	beq.n	c1a6 <hif_handle_isr+0x27a>
				uint32 address = 0;
    c26e:	2300      	movs	r3, #0
    c270:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    c272:	a905      	add	r1, sp, #20
    c274:	482b      	ldr	r0, [pc, #172]	; (c324 <hif_handle_isr+0x3f8>)
    c276:	4b23      	ldr	r3, [pc, #140]	; (c304 <hif_handle_isr+0x3d8>)
    c278:	4798      	blx	r3
    c27a:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    c27c:	d100      	bne.n	c280 <hif_handle_isr+0x354>
    c27e:	e662      	b.n	bf46 <hif_handle_isr+0x1a>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    c280:	22cc      	movs	r2, #204	; 0xcc
    c282:	32ff      	adds	r2, #255	; 0xff
    c284:	4908      	ldr	r1, [pc, #32]	; (c2a8 <hif_handle_isr+0x37c>)
    c286:	4809      	ldr	r0, [pc, #36]	; (c2ac <hif_handle_isr+0x380>)
    c288:	4b09      	ldr	r3, [pc, #36]	; (c2b0 <hif_handle_isr+0x384>)
    c28a:	4798      	blx	r3
    c28c:	4826      	ldr	r0, [pc, #152]	; (c328 <hif_handle_isr+0x3fc>)
    c28e:	4b0a      	ldr	r3, [pc, #40]	; (c2b8 <hif_handle_isr+0x38c>)
    c290:	4798      	blx	r3
    c292:	200d      	movs	r0, #13
    c294:	4b09      	ldr	r3, [pc, #36]	; (c2bc <hif_handle_isr+0x390>)
    c296:	4798      	blx	r3
    c298:	e7c0      	b.n	c21c <hif_handle_isr+0x2f0>
    c29a:	46c0      	nop			; (mov r8, r8)
    c29c:	20001118 	.word	0x20001118
    c2a0:	0000d0ad 	.word	0x0000d0ad
    c2a4:	0000020e 	.word	0x0000020e
    c2a8:	0001b474 	.word	0x0001b474
    c2ac:	0001b420 	.word	0x0001b420
    c2b0:	0001916d 	.word	0x0001916d
    c2b4:	0001b5f0 	.word	0x0001b5f0
    c2b8:	00019289 	.word	0x00019289
    c2bc:	000191a1 	.word	0x000191a1
    c2c0:	0001b4cc 	.word	0x0001b4cc
    c2c4:	0001b4e4 	.word	0x0001b4e4
    c2c8:	0001b608 	.word	0x0001b608
    c2cc:	0000bc05 	.word	0x0000bc05
    c2d0:	0001b524 	.word	0x0001b524
    c2d4:	0001b544 	.word	0x0001b544
    c2d8:	0001b568 	.word	0x0001b568
    c2dc:	0001b588 	.word	0x0001b588
    c2e0:	00000203 	.word	0x00000203
    c2e4:	0001b5ac 	.word	0x0001b5ac
    c2e8:	0000020a 	.word	0x0000020a
    c2ec:	0001b5d0 	.word	0x0001b5d0
    c2f0:	0000021b 	.word	0x0000021b
    c2f4:	0001b634 	.word	0x0001b634
    c2f8:	00000223 	.word	0x00000223
    c2fc:	0001b648 	.word	0x0001b648
    c300:	0000b8d1 	.word	0x0000b8d1
    c304:	0000d095 	.word	0x0000d095
    c308:	0000022b 	.word	0x0000022b
    c30c:	0001b664 	.word	0x0001b664
    c310:	0000026a 	.word	0x0000026a
    c314:	0001b47c 	.word	0x0001b47c
    c318:	0001b6d0 	.word	0x0001b6d0
    c31c:	00001070 	.word	0x00001070
    c320:	0000d0a1 	.word	0x0000d0a1
    c324:	00001084 	.word	0x00001084
    c328:	0001b4a8 	.word	0x0001b4a8
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
    c32c:	4a09      	ldr	r2, [pc, #36]	; (c354 <hif_handle_isr+0x428>)
    c32e:	490a      	ldr	r1, [pc, #40]	; (c358 <hif_handle_isr+0x42c>)
    c330:	480a      	ldr	r0, [pc, #40]	; (c35c <hif_handle_isr+0x430>)
    c332:	4d0b      	ldr	r5, [pc, #44]	; (c360 <hif_handle_isr+0x434>)
    c334:	47a8      	blx	r5
    c336:	0021      	movs	r1, r4
    c338:	480a      	ldr	r0, [pc, #40]	; (c364 <hif_handle_isr+0x438>)
    c33a:	47a8      	blx	r5
    c33c:	200d      	movs	r0, #13
    c33e:	4b0a      	ldr	r3, [pc, #40]	; (c368 <hif_handle_isr+0x43c>)
    c340:	4798      	blx	r3
					break;
    c342:	0026      	movs	r6, r4
    c344:	e748      	b.n	c1d8 <hif_handle_isr+0x2ac>
			}
		}
	}

	return ret;
}
    c346:	0030      	movs	r0, r6
    c348:	b006      	add	sp, #24
    c34a:	bc1c      	pop	{r2, r3, r4}
    c34c:	4691      	mov	r9, r2
    c34e:	469a      	mov	sl, r3
    c350:	46a3      	mov	fp, r4
    c352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c354:	00000266 	.word	0x00000266
    c358:	0001b47c 	.word	0x0001b47c
    c35c:	0001b420 	.word	0x0001b420
    c360:	0001916d 	.word	0x0001916d
    c364:	0001b688 	.word	0x0001b688
    c368:	000191a1 	.word	0x000191a1

0000c36c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    c36c:	b570      	push	{r4, r5, r6, lr}
    c36e:	0014      	movs	r4, r2
    c370:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    c372:	2800      	cmp	r0, #0
    c374:	d003      	beq.n	c37e <hif_receive+0x12>
    c376:	2900      	cmp	r1, #0
    c378:	d001      	beq.n	c37e <hif_receive+0x12>
    c37a:	2a00      	cmp	r2, #0
    c37c:	d112      	bne.n	c3a4 <hif_receive+0x38>
	{
		if(isDone)
    c37e:	2d00      	cmp	r5, #0
    c380:	d002      	beq.n	c388 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    c382:	4b27      	ldr	r3, [pc, #156]	; (c420 <hif_receive+0xb4>)
    c384:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    c386:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    c388:	4a26      	ldr	r2, [pc, #152]	; (c424 <hif_receive+0xb8>)
    c38a:	4927      	ldr	r1, [pc, #156]	; (c428 <hif_receive+0xbc>)
    c38c:	4827      	ldr	r0, [pc, #156]	; (c42c <hif_receive+0xc0>)
    c38e:	4b28      	ldr	r3, [pc, #160]	; (c430 <hif_receive+0xc4>)
    c390:	4798      	blx	r3
    c392:	4828      	ldr	r0, [pc, #160]	; (c434 <hif_receive+0xc8>)
    c394:	4b28      	ldr	r3, [pc, #160]	; (c438 <hif_receive+0xcc>)
    c396:	4798      	blx	r3
    c398:	200d      	movs	r0, #13
    c39a:	4b28      	ldr	r3, [pc, #160]	; (c43c <hif_receive+0xd0>)
    c39c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c39e:	200c      	movs	r0, #12
    c3a0:	4240      	negs	r0, r0
    c3a2:	e7f0      	b.n	c386 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    c3a4:	4b26      	ldr	r3, [pc, #152]	; (c440 <hif_receive+0xd4>)
    c3a6:	68db      	ldr	r3, [r3, #12]
    c3a8:	429a      	cmp	r2, r3
    c3aa:	d81a      	bhi.n	c3e2 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    c3ac:	4b24      	ldr	r3, [pc, #144]	; (c440 <hif_receive+0xd4>)
    c3ae:	689b      	ldr	r3, [r3, #8]
    c3b0:	4298      	cmp	r0, r3
    c3b2:	d326      	bcc.n	c402 <hif_receive+0x96>
    c3b4:	1886      	adds	r6, r0, r2
    c3b6:	4a22      	ldr	r2, [pc, #136]	; (c440 <hif_receive+0xd4>)
    c3b8:	6893      	ldr	r3, [r2, #8]
    c3ba:	68d2      	ldr	r2, [r2, #12]
    c3bc:	189b      	adds	r3, r3, r2
    c3be:	429e      	cmp	r6, r3
    c3c0:	d81f      	bhi.n	c402 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    c3c2:	0022      	movs	r2, r4
    c3c4:	4b1f      	ldr	r3, [pc, #124]	; (c444 <hif_receive+0xd8>)
    c3c6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    c3c8:	2800      	cmp	r0, #0
    c3ca:	d1dc      	bne.n	c386 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    c3cc:	4a1c      	ldr	r2, [pc, #112]	; (c440 <hif_receive+0xd4>)
    c3ce:	6893      	ldr	r3, [r2, #8]
    c3d0:	68d2      	ldr	r2, [r2, #12]
    c3d2:	189b      	adds	r3, r3, r2
    c3d4:	429e      	cmp	r6, r3
    c3d6:	d001      	beq.n	c3dc <hif_receive+0x70>
    c3d8:	2d00      	cmp	r5, #0
    c3da:	d0d4      	beq.n	c386 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    c3dc:	4b10      	ldr	r3, [pc, #64]	; (c420 <hif_receive+0xb4>)
    c3de:	4798      	blx	r3
    c3e0:	e7d1      	b.n	c386 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    c3e2:	4a19      	ldr	r2, [pc, #100]	; (c448 <hif_receive+0xdc>)
    c3e4:	4910      	ldr	r1, [pc, #64]	; (c428 <hif_receive+0xbc>)
    c3e6:	4811      	ldr	r0, [pc, #68]	; (c42c <hif_receive+0xc0>)
    c3e8:	4d11      	ldr	r5, [pc, #68]	; (c430 <hif_receive+0xc4>)
    c3ea:	47a8      	blx	r5
    c3ec:	4b14      	ldr	r3, [pc, #80]	; (c440 <hif_receive+0xd4>)
    c3ee:	68da      	ldr	r2, [r3, #12]
    c3f0:	0021      	movs	r1, r4
    c3f2:	4816      	ldr	r0, [pc, #88]	; (c44c <hif_receive+0xe0>)
    c3f4:	47a8      	blx	r5
    c3f6:	200d      	movs	r0, #13
    c3f8:	4b10      	ldr	r3, [pc, #64]	; (c43c <hif_receive+0xd0>)
    c3fa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    c3fc:	200c      	movs	r0, #12
    c3fe:	4240      	negs	r0, r0
		goto ERR1;
    c400:	e7c1      	b.n	c386 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
    c402:	4a13      	ldr	r2, [pc, #76]	; (c450 <hif_receive+0xe4>)
    c404:	4908      	ldr	r1, [pc, #32]	; (c428 <hif_receive+0xbc>)
    c406:	4809      	ldr	r0, [pc, #36]	; (c42c <hif_receive+0xc0>)
    c408:	4b09      	ldr	r3, [pc, #36]	; (c430 <hif_receive+0xc4>)
    c40a:	4798      	blx	r3
    c40c:	4811      	ldr	r0, [pc, #68]	; (c454 <hif_receive+0xe8>)
    c40e:	4b0a      	ldr	r3, [pc, #40]	; (c438 <hif_receive+0xcc>)
    c410:	4798      	blx	r3
    c412:	200d      	movs	r0, #13
    c414:	4b09      	ldr	r3, [pc, #36]	; (c43c <hif_receive+0xd0>)
    c416:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    c418:	200c      	movs	r0, #12
    c41a:	4240      	negs	r0, r0
		goto ERR1;
    c41c:	e7b3      	b.n	c386 <hif_receive+0x1a>
    c41e:	46c0      	nop			; (mov r8, r8)
    c420:	0000bc05 	.word	0x0000bc05
    c424:	0000028b 	.word	0x0000028b
    c428:	0001b48c 	.word	0x0001b48c
    c42c:	0001b420 	.word	0x0001b420
    c430:	0001916d 	.word	0x0001916d
    c434:	0001b708 	.word	0x0001b708
    c438:	00019289 	.word	0x00019289
    c43c:	000191a1 	.word	0x000191a1
    c440:	20001118 	.word	0x20001118
    c444:	0000d0ad 	.word	0x0000d0ad
    c448:	00000293 	.word	0x00000293
    c44c:	0001b728 	.word	0x0001b728
    c450:	00000299 	.word	0x00000299
    c454:	0001b770 	.word	0x0001b770

0000c458 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    c458:	b570      	push	{r4, r5, r6, lr}
    c45a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    c45c:	2807      	cmp	r0, #7
    c45e:	d81f      	bhi.n	c4a0 <hif_register_cb+0x48>
    c460:	0083      	lsls	r3, r0, #2
    c462:	4a16      	ldr	r2, [pc, #88]	; (c4bc <hif_register_cb+0x64>)
    c464:	58d3      	ldr	r3, [r2, r3]
    c466:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    c468:	4b15      	ldr	r3, [pc, #84]	; (c4c0 <hif_register_cb+0x68>)
    c46a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    c46c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    c46e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    c470:	4b13      	ldr	r3, [pc, #76]	; (c4c0 <hif_register_cb+0x68>)
    c472:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    c474:	2000      	movs	r0, #0
			break;
    c476:	e7fa      	b.n	c46e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    c478:	4b11      	ldr	r3, [pc, #68]	; (c4c0 <hif_register_cb+0x68>)
    c47a:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    c47c:	2000      	movs	r0, #0
			break;
    c47e:	e7f6      	b.n	c46e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    c480:	4b0f      	ldr	r3, [pc, #60]	; (c4c0 <hif_register_cb+0x68>)
    c482:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    c484:	2000      	movs	r0, #0
			break;
    c486:	e7f2      	b.n	c46e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    c488:	4b0d      	ldr	r3, [pc, #52]	; (c4c0 <hif_register_cb+0x68>)
    c48a:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    c48c:	2000      	movs	r0, #0
			break;
    c48e:	e7ee      	b.n	c46e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    c490:	4b0b      	ldr	r3, [pc, #44]	; (c4c0 <hif_register_cb+0x68>)
    c492:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    c494:	2000      	movs	r0, #0
			break;
    c496:	e7ea      	b.n	c46e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    c498:	4b09      	ldr	r3, [pc, #36]	; (c4c0 <hif_register_cb+0x68>)
    c49a:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    c49c:	2000      	movs	r0, #0
			break;
    c49e:	e7e6      	b.n	c46e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    c4a0:	4a08      	ldr	r2, [pc, #32]	; (c4c4 <hif_register_cb+0x6c>)
    c4a2:	4909      	ldr	r1, [pc, #36]	; (c4c8 <hif_register_cb+0x70>)
    c4a4:	4809      	ldr	r0, [pc, #36]	; (c4cc <hif_register_cb+0x74>)
    c4a6:	4d0a      	ldr	r5, [pc, #40]	; (c4d0 <hif_register_cb+0x78>)
    c4a8:	47a8      	blx	r5
    c4aa:	0021      	movs	r1, r4
    c4ac:	4809      	ldr	r0, [pc, #36]	; (c4d4 <hif_register_cb+0x7c>)
    c4ae:	47a8      	blx	r5
    c4b0:	200d      	movs	r0, #13
    c4b2:	4b09      	ldr	r3, [pc, #36]	; (c4d8 <hif_register_cb+0x80>)
    c4b4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c4b6:	200c      	movs	r0, #12
    c4b8:	4240      	negs	r0, r0
			break;
    c4ba:	e7d8      	b.n	c46e <hif_register_cb+0x16>
    c4bc:	0001b448 	.word	0x0001b448
    c4c0:	20001118 	.word	0x20001118
    c4c4:	000002d1 	.word	0x000002d1
    c4c8:	0001b498 	.word	0x0001b498
    c4cc:	0001b420 	.word	0x0001b420
    c4d0:	0001916d 	.word	0x0001916d
    c4d4:	0001b7b4 	.word	0x0001b7b4
    c4d8:	000191a1 	.word	0x000191a1

0000c4dc <hif_init>:
{
    c4dc:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    c4de:	222c      	movs	r2, #44	; 0x2c
    c4e0:	2100      	movs	r1, #0
    c4e2:	4806      	ldr	r0, [pc, #24]	; (c4fc <hif_init+0x20>)
    c4e4:	4b06      	ldr	r3, [pc, #24]	; (c500 <hif_init+0x24>)
    c4e6:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    c4e8:	4806      	ldr	r0, [pc, #24]	; (c504 <hif_init+0x28>)
    c4ea:	4b07      	ldr	r3, [pc, #28]	; (c508 <hif_init+0x2c>)
    c4ec:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    c4ee:	4907      	ldr	r1, [pc, #28]	; (c50c <hif_init+0x30>)
    c4f0:	2003      	movs	r0, #3
    c4f2:	4b07      	ldr	r3, [pc, #28]	; (c510 <hif_init+0x34>)
    c4f4:	4798      	blx	r3
}
    c4f6:	2000      	movs	r0, #0
    c4f8:	bd10      	pop	{r4, pc}
    c4fa:	46c0      	nop			; (mov r8, r8)
    c4fc:	20001118 	.word	0x20001118
    c500:	0000bbc5 	.word	0x0000bbc5
    c504:	0000bbf1 	.word	0x0000bbf1
    c508:	0000b879 	.word	0x0000b879
    c50c:	0000bc01 	.word	0x0000bc01
    c510:	0000c459 	.word	0x0000c459

0000c514 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    c514:	b530      	push	{r4, r5, lr}
    c516:	b09f      	sub	sp, #124	; 0x7c
    c518:	0004      	movs	r4, r0
    c51a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    c51c:	282c      	cmp	r0, #44	; 0x2c
    c51e:	d02f      	beq.n	c580 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    c520:	281b      	cmp	r0, #27
    c522:	d03d      	beq.n	c5a0 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    c524:	2806      	cmp	r0, #6
    c526:	d04b      	beq.n	c5c0 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    c528:	280e      	cmp	r0, #14
    c52a:	d027      	beq.n	c57c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    c52c:	2832      	cmp	r0, #50	; 0x32
    c52e:	d057      	beq.n	c5e0 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    c530:	282f      	cmp	r0, #47	; 0x2f
    c532:	d065      	beq.n	c600 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    c534:	2834      	cmp	r0, #52	; 0x34
    c536:	d100      	bne.n	c53a <m2m_wifi_cb+0x26>
    c538:	e077      	b.n	c62a <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    c53a:	2811      	cmp	r0, #17
    c53c:	d100      	bne.n	c540 <m2m_wifi_cb+0x2c>
    c53e:	e096      	b.n	c66e <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    c540:	2813      	cmp	r0, #19
    c542:	d100      	bne.n	c546 <m2m_wifi_cb+0x32>
    c544:	e0ac      	b.n	c6a0 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    c546:	2804      	cmp	r0, #4
    c548:	d100      	bne.n	c54c <m2m_wifi_cb+0x38>
    c54a:	e0bb      	b.n	c6c4 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    c54c:	2865      	cmp	r0, #101	; 0x65
    c54e:	d100      	bne.n	c552 <m2m_wifi_cb+0x3e>
    c550:	e0ca      	b.n	c6e8 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    c552:	2809      	cmp	r0, #9
    c554:	d100      	bne.n	c558 <m2m_wifi_cb+0x44>
    c556:	e0d9      	b.n	c70c <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    c558:	282a      	cmp	r0, #42	; 0x2a
    c55a:	d100      	bne.n	c55e <m2m_wifi_cb+0x4a>
    c55c:	e0e8      	b.n	c730 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    c55e:	2820      	cmp	r0, #32
    c560:	d100      	bne.n	c564 <m2m_wifi_cb+0x50>
    c562:	e0f7      	b.n	c754 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    c564:	2224      	movs	r2, #36	; 0x24
    c566:	32ff      	adds	r2, #255	; 0xff
    c568:	4989      	ldr	r1, [pc, #548]	; (c790 <m2m_wifi_cb+0x27c>)
    c56a:	488a      	ldr	r0, [pc, #552]	; (c794 <m2m_wifi_cb+0x280>)
    c56c:	4d8a      	ldr	r5, [pc, #552]	; (c798 <m2m_wifi_cb+0x284>)
    c56e:	47a8      	blx	r5
    c570:	0021      	movs	r1, r4
    c572:	488a      	ldr	r0, [pc, #552]	; (c79c <m2m_wifi_cb+0x288>)
    c574:	47a8      	blx	r5
    c576:	200d      	movs	r0, #13
    c578:	4b89      	ldr	r3, [pc, #548]	; (c7a0 <m2m_wifi_cb+0x28c>)
    c57a:	4798      	blx	r3
	}
}
    c57c:	b01f      	add	sp, #124	; 0x7c
    c57e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    c580:	2300      	movs	r3, #0
    c582:	2204      	movs	r2, #4
    c584:	a903      	add	r1, sp, #12
    c586:	0028      	movs	r0, r5
    c588:	4c86      	ldr	r4, [pc, #536]	; (c7a4 <m2m_wifi_cb+0x290>)
    c58a:	47a0      	blx	r4
    c58c:	2800      	cmp	r0, #0
    c58e:	d1f5      	bne.n	c57c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c590:	4b85      	ldr	r3, [pc, #532]	; (c7a8 <m2m_wifi_cb+0x294>)
    c592:	681b      	ldr	r3, [r3, #0]
    c594:	2b00      	cmp	r3, #0
    c596:	d0f1      	beq.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    c598:	a903      	add	r1, sp, #12
    c59a:	302c      	adds	r0, #44	; 0x2c
    c59c:	4798      	blx	r3
    c59e:	e7ed      	b.n	c57c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    c5a0:	2300      	movs	r3, #0
    c5a2:	2208      	movs	r2, #8
    c5a4:	a903      	add	r1, sp, #12
    c5a6:	0028      	movs	r0, r5
    c5a8:	4c7e      	ldr	r4, [pc, #504]	; (c7a4 <m2m_wifi_cb+0x290>)
    c5aa:	47a0      	blx	r4
    c5ac:	2800      	cmp	r0, #0
    c5ae:	d1e5      	bne.n	c57c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c5b0:	4b7d      	ldr	r3, [pc, #500]	; (c7a8 <m2m_wifi_cb+0x294>)
    c5b2:	681b      	ldr	r3, [r3, #0]
    c5b4:	2b00      	cmp	r3, #0
    c5b6:	d0e1      	beq.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    c5b8:	a903      	add	r1, sp, #12
    c5ba:	301b      	adds	r0, #27
    c5bc:	4798      	blx	r3
    c5be:	e7dd      	b.n	c57c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    c5c0:	2301      	movs	r3, #1
    c5c2:	2230      	movs	r2, #48	; 0x30
    c5c4:	a903      	add	r1, sp, #12
    c5c6:	0028      	movs	r0, r5
    c5c8:	4c76      	ldr	r4, [pc, #472]	; (c7a4 <m2m_wifi_cb+0x290>)
    c5ca:	47a0      	blx	r4
    c5cc:	2800      	cmp	r0, #0
    c5ce:	d1d5      	bne.n	c57c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    c5d0:	4b75      	ldr	r3, [pc, #468]	; (c7a8 <m2m_wifi_cb+0x294>)
    c5d2:	681b      	ldr	r3, [r3, #0]
    c5d4:	2b00      	cmp	r3, #0
    c5d6:	d0d1      	beq.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    c5d8:	a903      	add	r1, sp, #12
    c5da:	3006      	adds	r0, #6
    c5dc:	4798      	blx	r3
    c5de:	e7cd      	b.n	c57c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    c5e0:	2300      	movs	r3, #0
    c5e2:	2218      	movs	r2, #24
    c5e4:	a903      	add	r1, sp, #12
    c5e6:	0028      	movs	r0, r5
    c5e8:	4c6e      	ldr	r4, [pc, #440]	; (c7a4 <m2m_wifi_cb+0x290>)
    c5ea:	47a0      	blx	r4
    c5ec:	2800      	cmp	r0, #0
    c5ee:	d1c5      	bne.n	c57c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c5f0:	4b6d      	ldr	r3, [pc, #436]	; (c7a8 <m2m_wifi_cb+0x294>)
    c5f2:	681b      	ldr	r3, [r3, #0]
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	d0c1      	beq.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    c5f8:	a903      	add	r1, sp, #12
    c5fa:	3032      	adds	r0, #50	; 0x32
    c5fc:	4798      	blx	r3
    c5fe:	e7bd      	b.n	c57c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    c600:	2264      	movs	r2, #100	; 0x64
    c602:	2100      	movs	r1, #0
    c604:	a803      	add	r0, sp, #12
    c606:	4b69      	ldr	r3, [pc, #420]	; (c7ac <m2m_wifi_cb+0x298>)
    c608:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    c60a:	2300      	movs	r3, #0
    c60c:	2264      	movs	r2, #100	; 0x64
    c60e:	a903      	add	r1, sp, #12
    c610:	0028      	movs	r0, r5
    c612:	4c64      	ldr	r4, [pc, #400]	; (c7a4 <m2m_wifi_cb+0x290>)
    c614:	47a0      	blx	r4
    c616:	2800      	cmp	r0, #0
    c618:	d1b0      	bne.n	c57c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c61a:	4b63      	ldr	r3, [pc, #396]	; (c7a8 <m2m_wifi_cb+0x294>)
    c61c:	681b      	ldr	r3, [r3, #0]
    c61e:	2b00      	cmp	r3, #0
    c620:	d0ac      	beq.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    c622:	a903      	add	r1, sp, #12
    c624:	302f      	adds	r0, #47	; 0x2f
    c626:	4798      	blx	r3
    c628:	e7a8      	b.n	c57c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    c62a:	2300      	movs	r3, #0
    c62c:	2204      	movs	r2, #4
    c62e:	a903      	add	r1, sp, #12
    c630:	0028      	movs	r0, r5
    c632:	4c5c      	ldr	r4, [pc, #368]	; (c7a4 <m2m_wifi_cb+0x290>)
    c634:	47a0      	blx	r4
    c636:	2800      	cmp	r0, #0
    c638:	d1a0      	bne.n	c57c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    c63a:	485d      	ldr	r0, [pc, #372]	; (c7b0 <m2m_wifi_cb+0x29c>)
    c63c:	4d56      	ldr	r5, [pc, #344]	; (c798 <m2m_wifi_cb+0x284>)
    c63e:	47a8      	blx	r5
    c640:	9c03      	ldr	r4, [sp, #12]
    c642:	0a23      	lsrs	r3, r4, #8
    c644:	20ff      	movs	r0, #255	; 0xff
    c646:	4003      	ands	r3, r0
    c648:	0c22      	lsrs	r2, r4, #16
    c64a:	4002      	ands	r2, r0
    c64c:	0e21      	lsrs	r1, r4, #24
    c64e:	4020      	ands	r0, r4
    c650:	9000      	str	r0, [sp, #0]
    c652:	4858      	ldr	r0, [pc, #352]	; (c7b4 <m2m_wifi_cb+0x2a0>)
    c654:	47a8      	blx	r5
    c656:	200d      	movs	r0, #13
    c658:	4b51      	ldr	r3, [pc, #324]	; (c7a0 <m2m_wifi_cb+0x28c>)
    c65a:	4798      	blx	r3
			if (gpfAppWifiCb)
    c65c:	4b52      	ldr	r3, [pc, #328]	; (c7a8 <m2m_wifi_cb+0x294>)
    c65e:	681b      	ldr	r3, [r3, #0]
    c660:	2b00      	cmp	r3, #0
    c662:	d100      	bne.n	c666 <m2m_wifi_cb+0x152>
    c664:	e78a      	b.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    c666:	2100      	movs	r1, #0
    c668:	2034      	movs	r0, #52	; 0x34
    c66a:	4798      	blx	r3
    c66c:	e786      	b.n	c57c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    c66e:	2200      	movs	r2, #0
    c670:	4b51      	ldr	r3, [pc, #324]	; (c7b8 <m2m_wifi_cb+0x2a4>)
    c672:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    c674:	2300      	movs	r3, #0
    c676:	3204      	adds	r2, #4
    c678:	a903      	add	r1, sp, #12
    c67a:	0028      	movs	r0, r5
    c67c:	4c49      	ldr	r4, [pc, #292]	; (c7a4 <m2m_wifi_cb+0x290>)
    c67e:	47a0      	blx	r4
    c680:	2800      	cmp	r0, #0
    c682:	d000      	beq.n	c686 <m2m_wifi_cb+0x172>
    c684:	e77a      	b.n	c57c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    c686:	ab03      	add	r3, sp, #12
    c688:	781a      	ldrb	r2, [r3, #0]
    c68a:	4b4c      	ldr	r3, [pc, #304]	; (c7bc <m2m_wifi_cb+0x2a8>)
    c68c:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    c68e:	4b46      	ldr	r3, [pc, #280]	; (c7a8 <m2m_wifi_cb+0x294>)
    c690:	681b      	ldr	r3, [r3, #0]
    c692:	2b00      	cmp	r3, #0
    c694:	d100      	bne.n	c698 <m2m_wifi_cb+0x184>
    c696:	e771      	b.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    c698:	a903      	add	r1, sp, #12
    c69a:	3011      	adds	r0, #17
    c69c:	4798      	blx	r3
    c69e:	e76d      	b.n	c57c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    c6a0:	2300      	movs	r3, #0
    c6a2:	222c      	movs	r2, #44	; 0x2c
    c6a4:	a903      	add	r1, sp, #12
    c6a6:	0028      	movs	r0, r5
    c6a8:	4c3e      	ldr	r4, [pc, #248]	; (c7a4 <m2m_wifi_cb+0x290>)
    c6aa:	47a0      	blx	r4
    c6ac:	2800      	cmp	r0, #0
    c6ae:	d000      	beq.n	c6b2 <m2m_wifi_cb+0x19e>
    c6b0:	e764      	b.n	c57c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c6b2:	4b3d      	ldr	r3, [pc, #244]	; (c7a8 <m2m_wifi_cb+0x294>)
    c6b4:	681b      	ldr	r3, [r3, #0]
    c6b6:	2b00      	cmp	r3, #0
    c6b8:	d100      	bne.n	c6bc <m2m_wifi_cb+0x1a8>
    c6ba:	e75f      	b.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    c6bc:	a903      	add	r1, sp, #12
    c6be:	3013      	adds	r0, #19
    c6c0:	4798      	blx	r3
    c6c2:	e75b      	b.n	c57c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    c6c4:	2300      	movs	r3, #0
    c6c6:	2204      	movs	r2, #4
    c6c8:	a91c      	add	r1, sp, #112	; 0x70
    c6ca:	0028      	movs	r0, r5
    c6cc:	4c35      	ldr	r4, [pc, #212]	; (c7a4 <m2m_wifi_cb+0x290>)
    c6ce:	47a0      	blx	r4
    c6d0:	2800      	cmp	r0, #0
    c6d2:	d000      	beq.n	c6d6 <m2m_wifi_cb+0x1c2>
    c6d4:	e752      	b.n	c57c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c6d6:	4b34      	ldr	r3, [pc, #208]	; (c7a8 <m2m_wifi_cb+0x294>)
    c6d8:	681b      	ldr	r3, [r3, #0]
    c6da:	2b00      	cmp	r3, #0
    c6dc:	d100      	bne.n	c6e0 <m2m_wifi_cb+0x1cc>
    c6de:	e74d      	b.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    c6e0:	a91c      	add	r1, sp, #112	; 0x70
    c6e2:	3004      	adds	r0, #4
    c6e4:	4798      	blx	r3
    c6e6:	e749      	b.n	c57c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    c6e8:	2300      	movs	r3, #0
    c6ea:	2204      	movs	r2, #4
    c6ec:	a91c      	add	r1, sp, #112	; 0x70
    c6ee:	0028      	movs	r0, r5
    c6f0:	4c2c      	ldr	r4, [pc, #176]	; (c7a4 <m2m_wifi_cb+0x290>)
    c6f2:	47a0      	blx	r4
    c6f4:	2800      	cmp	r0, #0
    c6f6:	d000      	beq.n	c6fa <m2m_wifi_cb+0x1e6>
    c6f8:	e740      	b.n	c57c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    c6fa:	4b2b      	ldr	r3, [pc, #172]	; (c7a8 <m2m_wifi_cb+0x294>)
    c6fc:	681b      	ldr	r3, [r3, #0]
    c6fe:	2b00      	cmp	r3, #0
    c700:	d100      	bne.n	c704 <m2m_wifi_cb+0x1f0>
    c702:	e73b      	b.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    c704:	a91c      	add	r1, sp, #112	; 0x70
    c706:	3065      	adds	r0, #101	; 0x65
    c708:	4798      	blx	r3
    c70a:	e737      	b.n	c57c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    c70c:	2301      	movs	r3, #1
    c70e:	2264      	movs	r2, #100	; 0x64
    c710:	a903      	add	r1, sp, #12
    c712:	0028      	movs	r0, r5
    c714:	4c23      	ldr	r4, [pc, #140]	; (c7a4 <m2m_wifi_cb+0x290>)
    c716:	47a0      	blx	r4
    c718:	2800      	cmp	r0, #0
    c71a:	d000      	beq.n	c71e <m2m_wifi_cb+0x20a>
    c71c:	e72e      	b.n	c57c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    c71e:	4b22      	ldr	r3, [pc, #136]	; (c7a8 <m2m_wifi_cb+0x294>)
    c720:	681b      	ldr	r3, [r3, #0]
    c722:	2b00      	cmp	r3, #0
    c724:	d100      	bne.n	c728 <m2m_wifi_cb+0x214>
    c726:	e729      	b.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    c728:	a903      	add	r1, sp, #12
    c72a:	3009      	adds	r0, #9
    c72c:	4798      	blx	r3
    c72e:	e725      	b.n	c57c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    c730:	2301      	movs	r3, #1
    c732:	2204      	movs	r2, #4
    c734:	a903      	add	r1, sp, #12
    c736:	0028      	movs	r0, r5
    c738:	4c1a      	ldr	r4, [pc, #104]	; (c7a4 <m2m_wifi_cb+0x290>)
    c73a:	47a0      	blx	r4
    c73c:	2800      	cmp	r0, #0
    c73e:	d000      	beq.n	c742 <m2m_wifi_cb+0x22e>
    c740:	e71c      	b.n	c57c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    c742:	4b19      	ldr	r3, [pc, #100]	; (c7a8 <m2m_wifi_cb+0x294>)
    c744:	681b      	ldr	r3, [r3, #0]
    c746:	2b00      	cmp	r3, #0
    c748:	d100      	bne.n	c74c <m2m_wifi_cb+0x238>
    c74a:	e717      	b.n	c57c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    c74c:	a903      	add	r1, sp, #12
    c74e:	302a      	adds	r0, #42	; 0x2a
    c750:	4798      	blx	r3
    c752:	e713      	b.n	c57c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    c754:	2300      	movs	r3, #0
    c756:	2208      	movs	r2, #8
    c758:	a903      	add	r1, sp, #12
    c75a:	0028      	movs	r0, r5
    c75c:	4c11      	ldr	r4, [pc, #68]	; (c7a4 <m2m_wifi_cb+0x290>)
    c75e:	47a0      	blx	r4
    c760:	2800      	cmp	r0, #0
    c762:	d000      	beq.n	c766 <m2m_wifi_cb+0x252>
    c764:	e70a      	b.n	c57c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    c766:	ab03      	add	r3, sp, #12
    c768:	889a      	ldrh	r2, [r3, #4]
    c76a:	0028      	movs	r0, r5
    c76c:	3008      	adds	r0, #8
    c76e:	2301      	movs	r3, #1
    c770:	9903      	ldr	r1, [sp, #12]
    c772:	4c0c      	ldr	r4, [pc, #48]	; (c7a4 <m2m_wifi_cb+0x290>)
    c774:	47a0      	blx	r4
    c776:	2800      	cmp	r0, #0
    c778:	d000      	beq.n	c77c <m2m_wifi_cb+0x268>
    c77a:	e6ff      	b.n	c57c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    c77c:	4b0a      	ldr	r3, [pc, #40]	; (c7a8 <m2m_wifi_cb+0x294>)
    c77e:	681b      	ldr	r3, [r3, #0]
    c780:	2b00      	cmp	r3, #0
    c782:	d100      	bne.n	c786 <m2m_wifi_cb+0x272>
    c784:	e6fa      	b.n	c57c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    c786:	a903      	add	r1, sp, #12
    c788:	3020      	adds	r0, #32
    c78a:	4798      	blx	r3
    c78c:	e6f6      	b.n	c57c <m2m_wifi_cb+0x68>
    c78e:	46c0      	nop			; (mov r8, r8)
    c790:	0001b830 	.word	0x0001b830
    c794:	0001b420 	.word	0x0001b420
    c798:	0001916d 	.word	0x0001916d
    c79c:	0001b880 	.word	0x0001b880
    c7a0:	000191a1 	.word	0x000191a1
    c7a4:	0000c36d 	.word	0x0000c36d
    c7a8:	200004f4 	.word	0x200004f4
    c7ac:	0000bbc5 	.word	0x0000bbc5
    c7b0:	0001b7c0 	.word	0x0001b7c0
    c7b4:	0001b860 	.word	0x0001b860
    c7b8:	200004f9 	.word	0x200004f9
    c7bc:	200004f8 	.word	0x200004f8

0000c7c0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    c7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7c2:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    c7c4:	2201      	movs	r2, #1
    c7c6:	230f      	movs	r3, #15
    c7c8:	446b      	add	r3, sp
    c7ca:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    c7cc:	2800      	cmp	r0, #0
    c7ce:	d061      	beq.n	c894 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    c7d0:	6802      	ldr	r2, [r0, #0]
    c7d2:	4b32      	ldr	r3, [pc, #200]	; (c89c <m2m_wifi_init+0xdc>)
    c7d4:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    c7d6:	2200      	movs	r2, #0
    c7d8:	4b31      	ldr	r3, [pc, #196]	; (c8a0 <m2m_wifi_init+0xe0>)
    c7da:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    c7dc:	200f      	movs	r0, #15
    c7de:	4468      	add	r0, sp
    c7e0:	4b30      	ldr	r3, [pc, #192]	; (c8a4 <m2m_wifi_init+0xe4>)
    c7e2:	4798      	blx	r3
    c7e4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    c7e6:	d002      	beq.n	c7ee <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    c7e8:	0020      	movs	r0, r4
    c7ea:	b00f      	add	sp, #60	; 0x3c
    c7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    c7ee:	2000      	movs	r0, #0
    c7f0:	4b2d      	ldr	r3, [pc, #180]	; (c8a8 <m2m_wifi_init+0xe8>)
    c7f2:	4798      	blx	r3
    c7f4:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    c7f6:	d149      	bne.n	c88c <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    c7f8:	492c      	ldr	r1, [pc, #176]	; (c8ac <m2m_wifi_init+0xec>)
    c7fa:	2001      	movs	r0, #1
    c7fc:	4b2c      	ldr	r3, [pc, #176]	; (c8b0 <m2m_wifi_init+0xf0>)
    c7fe:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    c800:	ae04      	add	r6, sp, #16
    c802:	0030      	movs	r0, r6
    c804:	4b2b      	ldr	r3, [pc, #172]	; (c8b4 <m2m_wifi_init+0xf4>)
    c806:	4798      	blx	r3
    c808:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    c80a:	482b      	ldr	r0, [pc, #172]	; (c8b8 <m2m_wifi_init+0xf8>)
    c80c:	4d2b      	ldr	r5, [pc, #172]	; (c8bc <m2m_wifi_init+0xfc>)
    c80e:	47a8      	blx	r5
    c810:	79b3      	ldrb	r3, [r6, #6]
    c812:	7972      	ldrb	r2, [r6, #5]
    c814:	7931      	ldrb	r1, [r6, #4]
    c816:	8c30      	ldrh	r0, [r6, #32]
    c818:	9000      	str	r0, [sp, #0]
    c81a:	4829      	ldr	r0, [pc, #164]	; (c8c0 <m2m_wifi_init+0x100>)
    c81c:	47a8      	blx	r5
    c81e:	200d      	movs	r0, #13
    c820:	4f28      	ldr	r7, [pc, #160]	; (c8c4 <m2m_wifi_init+0x104>)
    c822:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    c824:	4824      	ldr	r0, [pc, #144]	; (c8b8 <m2m_wifi_init+0xf8>)
    c826:	47a8      	blx	r5
    c828:	2226      	movs	r2, #38	; 0x26
    c82a:	446a      	add	r2, sp
    c82c:	211a      	movs	r1, #26
    c82e:	4469      	add	r1, sp
    c830:	4825      	ldr	r0, [pc, #148]	; (c8c8 <m2m_wifi_init+0x108>)
    c832:	47a8      	blx	r5
    c834:	200d      	movs	r0, #13
    c836:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    c838:	481f      	ldr	r0, [pc, #124]	; (c8b8 <m2m_wifi_init+0xf8>)
    c83a:	47a8      	blx	r5
    c83c:	7a73      	ldrb	r3, [r6, #9]
    c83e:	7a32      	ldrb	r2, [r6, #8]
    c840:	79f1      	ldrb	r1, [r6, #7]
    c842:	4822      	ldr	r0, [pc, #136]	; (c8cc <m2m_wifi_init+0x10c>)
    c844:	47a8      	blx	r5
    c846:	200d      	movs	r0, #13
    c848:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    c84a:	481b      	ldr	r0, [pc, #108]	; (c8b8 <m2m_wifi_init+0xf8>)
    c84c:	47a8      	blx	r5
    c84e:	2304      	movs	r3, #4
    c850:	2205      	movs	r2, #5
    c852:	2113      	movs	r1, #19
    c854:	481e      	ldr	r0, [pc, #120]	; (c8d0 <m2m_wifi_init+0x110>)
    c856:	47a8      	blx	r5
    c858:	200d      	movs	r0, #13
    c85a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    c85c:	4816      	ldr	r0, [pc, #88]	; (c8b8 <m2m_wifi_init+0xf8>)
    c85e:	47a8      	blx	r5
    c860:	4a1c      	ldr	r2, [pc, #112]	; (c8d4 <m2m_wifi_init+0x114>)
    c862:	491d      	ldr	r1, [pc, #116]	; (c8d8 <m2m_wifi_init+0x118>)
    c864:	481d      	ldr	r0, [pc, #116]	; (c8dc <m2m_wifi_init+0x11c>)
    c866:	47a8      	blx	r5
    c868:	200d      	movs	r0, #13
    c86a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    c86c:	0023      	movs	r3, r4
    c86e:	330d      	adds	r3, #13
    c870:	d1ba      	bne.n	c7e8 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    c872:	22e8      	movs	r2, #232	; 0xe8
    c874:	32ff      	adds	r2, #255	; 0xff
    c876:	491a      	ldr	r1, [pc, #104]	; (c8e0 <m2m_wifi_init+0x120>)
    c878:	481a      	ldr	r0, [pc, #104]	; (c8e4 <m2m_wifi_init+0x124>)
    c87a:	4b10      	ldr	r3, [pc, #64]	; (c8bc <m2m_wifi_init+0xfc>)
    c87c:	4798      	blx	r3
    c87e:	481a      	ldr	r0, [pc, #104]	; (c8e8 <m2m_wifi_init+0x128>)
    c880:	4b1a      	ldr	r3, [pc, #104]	; (c8ec <m2m_wifi_init+0x12c>)
    c882:	4798      	blx	r3
    c884:	200d      	movs	r0, #13
    c886:	4b0f      	ldr	r3, [pc, #60]	; (c8c4 <m2m_wifi_init+0x104>)
    c888:	4798      	blx	r3
    c88a:	e7ad      	b.n	c7e8 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    c88c:	2000      	movs	r0, #0
    c88e:	4b18      	ldr	r3, [pc, #96]	; (c8f0 <m2m_wifi_init+0x130>)
    c890:	4798      	blx	r3
    c892:	e7a9      	b.n	c7e8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    c894:	240c      	movs	r4, #12
    c896:	4264      	negs	r4, r4
    c898:	e7a6      	b.n	c7e8 <m2m_wifi_init+0x28>
    c89a:	46c0      	nop			; (mov r8, r8)
    c89c:	200004f4 	.word	0x200004f4
    c8a0:	200004f9 	.word	0x200004f9
    c8a4:	0000d261 	.word	0x0000d261
    c8a8:	0000c4dd 	.word	0x0000c4dd
    c8ac:	0000c515 	.word	0x0000c515
    c8b0:	0000c459 	.word	0x0000c459
    c8b4:	0000d17d 	.word	0x0000d17d
    c8b8:	0001b7c0 	.word	0x0001b7c0
    c8bc:	0001916d 	.word	0x0001916d
    c8c0:	0001b93c 	.word	0x0001b93c
    c8c4:	000191a1 	.word	0x000191a1
    c8c8:	0001b964 	.word	0x0001b964
    c8cc:	0001b980 	.word	0x0001b980
    c8d0:	0001b9a4 	.word	0x0001b9a4
    c8d4:	0001b9bc 	.word	0x0001b9bc
    c8d8:	0001b9c8 	.word	0x0001b9c8
    c8dc:	0001b9d4 	.word	0x0001b9d4
    c8e0:	0001b83c 	.word	0x0001b83c
    c8e4:	0001b420 	.word	0x0001b420
    c8e8:	0001b9ec 	.word	0x0001b9ec
    c8ec:	00019289 	.word	0x00019289
    c8f0:	0000d335 	.word	0x0000d335

0000c8f4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    c8f4:	b510      	push	{r4, lr}
	return hif_handle_isr();
    c8f6:	4b01      	ldr	r3, [pc, #4]	; (c8fc <m2m_wifi_handle_events+0x8>)
    c8f8:	4798      	blx	r3
}
    c8fa:	bd10      	pop	{r4, pc}
    c8fc:	0000bf2d 	.word	0x0000bf2d

0000c900 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    c900:	b5f0      	push	{r4, r5, r6, r7, lr}
    c902:	46ce      	mov	lr, r9
    c904:	4647      	mov	r7, r8
    c906:	b580      	push	{r7, lr}
    c908:	b0a3      	sub	sp, #140	; 0x8c
    c90a:	9005      	str	r0, [sp, #20]
    c90c:	000c      	movs	r4, r1
    c90e:	0015      	movs	r5, r2
    c910:	001f      	movs	r7, r3
    c912:	ab2a      	add	r3, sp, #168	; 0xa8
    c914:	881b      	ldrh	r3, [r3, #0]
    c916:	4699      	mov	r9, r3
    c918:	ab2b      	add	r3, sp, #172	; 0xac
    c91a:	781b      	ldrb	r3, [r3, #0]
    c91c:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    c91e:	2a01      	cmp	r2, #1
    c920:	d003      	beq.n	c92a <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    c922:	2f00      	cmp	r7, #0
    c924:	d040      	beq.n	c9a8 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    c926:	2a02      	cmp	r2, #2
    c928:	d04c      	beq.n	c9c4 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    c92a:	1e63      	subs	r3, r4, #1
    c92c:	2b1f      	cmp	r3, #31
    c92e:	d900      	bls.n	c932 <m2m_wifi_connect_sc+0x32>
    c930:	e078      	b.n	ca24 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    c932:	464b      	mov	r3, r9
    c934:	3b01      	subs	r3, #1
    c936:	b29b      	uxth	r3, r3
    c938:	2b0d      	cmp	r3, #13
    c93a:	d903      	bls.n	c944 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    c93c:	464b      	mov	r3, r9
    c93e:	2bff      	cmp	r3, #255	; 0xff
    c940:	d000      	beq.n	c944 <m2m_wifi_connect_sc+0x44>
    c942:	e07e      	b.n	ca42 <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    c944:	ae07      	add	r6, sp, #28
    c946:	0022      	movs	r2, r4
    c948:	9905      	ldr	r1, [sp, #20]
    c94a:	205a      	movs	r0, #90	; 0x5a
    c94c:	ab02      	add	r3, sp, #8
    c94e:	469c      	mov	ip, r3
    c950:	4460      	add	r0, ip
    c952:	4b79      	ldr	r3, [pc, #484]	; (cb38 <m2m_wifi_connect_sc+0x238>)
    c954:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    c956:	1934      	adds	r4, r6, r4
    c958:	3446      	adds	r4, #70	; 0x46
    c95a:	2300      	movs	r3, #0
    c95c:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    c95e:	3344      	adds	r3, #68	; 0x44
    c960:	464a      	mov	r2, r9
    c962:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    c964:	4643      	mov	r3, r8
    c966:	1e5a      	subs	r2, r3, #1
    c968:	4193      	sbcs	r3, r2
    c96a:	2267      	movs	r2, #103	; 0x67
    c96c:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    c96e:	2341      	movs	r3, #65	; 0x41
    c970:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    c972:	2d03      	cmp	r5, #3
    c974:	d100      	bne.n	c978 <m2m_wifi_connect_sc+0x78>
    c976:	e072      	b.n	ca5e <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    c978:	2d02      	cmp	r5, #2
    c97a:	d100      	bne.n	c97e <m2m_wifi_connect_sc+0x7e>
    c97c:	e0ac      	b.n	cad8 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    c97e:	2d04      	cmp	r5, #4
    c980:	d100      	bne.n	c984 <m2m_wifi_connect_sc+0x84>
    c982:	e0c4      	b.n	cb0e <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    c984:	2d01      	cmp	r5, #1
    c986:	d000      	beq.n	c98a <m2m_wifi_connect_sc+0x8a>
    c988:	e0c7      	b.n	cb1a <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    c98a:	2300      	movs	r3, #0
    c98c:	9302      	str	r3, [sp, #8]
    c98e:	9301      	str	r3, [sp, #4]
    c990:	9300      	str	r3, [sp, #0]
    c992:	336c      	adds	r3, #108	; 0x6c
    c994:	aa07      	add	r2, sp, #28
    c996:	2128      	movs	r1, #40	; 0x28
    c998:	2001      	movs	r0, #1
    c99a:	4c68      	ldr	r4, [pc, #416]	; (cb3c <m2m_wifi_connect_sc+0x23c>)
    c99c:	47a0      	blx	r4

ERR1:
	return ret;
}
    c99e:	b023      	add	sp, #140	; 0x8c
    c9a0:	bc0c      	pop	{r2, r3}
    c9a2:	4690      	mov	r8, r2
    c9a4:	4699      	mov	r9, r3
    c9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    c9a8:	4a65      	ldr	r2, [pc, #404]	; (cb40 <m2m_wifi_connect_sc+0x240>)
    c9aa:	4966      	ldr	r1, [pc, #408]	; (cb44 <m2m_wifi_connect_sc+0x244>)
    c9ac:	4866      	ldr	r0, [pc, #408]	; (cb48 <m2m_wifi_connect_sc+0x248>)
    c9ae:	4b67      	ldr	r3, [pc, #412]	; (cb4c <m2m_wifi_connect_sc+0x24c>)
    c9b0:	4798      	blx	r3
    c9b2:	4867      	ldr	r0, [pc, #412]	; (cb50 <m2m_wifi_connect_sc+0x250>)
    c9b4:	4b67      	ldr	r3, [pc, #412]	; (cb54 <m2m_wifi_connect_sc+0x254>)
    c9b6:	4798      	blx	r3
    c9b8:	200d      	movs	r0, #13
    c9ba:	4b67      	ldr	r3, [pc, #412]	; (cb58 <m2m_wifi_connect_sc+0x258>)
    c9bc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c9be:	200c      	movs	r0, #12
    c9c0:	4240      	negs	r0, r0
			goto ERR1;
    c9c2:	e7ec      	b.n	c99e <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    c9c4:	0038      	movs	r0, r7
    c9c6:	4b65      	ldr	r3, [pc, #404]	; (cb5c <m2m_wifi_connect_sc+0x25c>)
    c9c8:	4798      	blx	r3
    c9ca:	2840      	cmp	r0, #64	; 0x40
    c9cc:	d1ad      	bne.n	c92a <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    c9ce:	783b      	ldrb	r3, [r7, #0]
    c9d0:	001a      	movs	r2, r3
    c9d2:	3a30      	subs	r2, #48	; 0x30
    c9d4:	2a36      	cmp	r2, #54	; 0x36
    c9d6:	d817      	bhi.n	ca08 <m2m_wifi_connect_sc+0x108>
    c9d8:	3a0a      	subs	r2, #10
    c9da:	2a06      	cmp	r2, #6
    c9dc:	d914      	bls.n	ca08 <m2m_wifi_connect_sc+0x108>
    c9de:	3b47      	subs	r3, #71	; 0x47
    c9e0:	2b19      	cmp	r3, #25
    c9e2:	d911      	bls.n	ca08 <m2m_wifi_connect_sc+0x108>
    c9e4:	1c7a      	adds	r2, r7, #1
    c9e6:	0038      	movs	r0, r7
    c9e8:	3040      	adds	r0, #64	; 0x40
    c9ea:	7813      	ldrb	r3, [r2, #0]
    c9ec:	0019      	movs	r1, r3
    c9ee:	3930      	subs	r1, #48	; 0x30
    c9f0:	2936      	cmp	r1, #54	; 0x36
    c9f2:	d809      	bhi.n	ca08 <m2m_wifi_connect_sc+0x108>
    c9f4:	390a      	subs	r1, #10
    c9f6:	2906      	cmp	r1, #6
    c9f8:	d906      	bls.n	ca08 <m2m_wifi_connect_sc+0x108>
    c9fa:	3b47      	subs	r3, #71	; 0x47
    c9fc:	2b19      	cmp	r3, #25
    c9fe:	d903      	bls.n	ca08 <m2m_wifi_connect_sc+0x108>
    ca00:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    ca02:	4282      	cmp	r2, r0
    ca04:	d1f1      	bne.n	c9ea <m2m_wifi_connect_sc+0xea>
    ca06:	e790      	b.n	c92a <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    ca08:	4a55      	ldr	r2, [pc, #340]	; (cb60 <m2m_wifi_connect_sc+0x260>)
    ca0a:	494e      	ldr	r1, [pc, #312]	; (cb44 <m2m_wifi_connect_sc+0x244>)
    ca0c:	484e      	ldr	r0, [pc, #312]	; (cb48 <m2m_wifi_connect_sc+0x248>)
    ca0e:	4b4f      	ldr	r3, [pc, #316]	; (cb4c <m2m_wifi_connect_sc+0x24c>)
    ca10:	4798      	blx	r3
    ca12:	4854      	ldr	r0, [pc, #336]	; (cb64 <m2m_wifi_connect_sc+0x264>)
    ca14:	4b4f      	ldr	r3, [pc, #316]	; (cb54 <m2m_wifi_connect_sc+0x254>)
    ca16:	4798      	blx	r3
    ca18:	200d      	movs	r0, #13
    ca1a:	4b4f      	ldr	r3, [pc, #316]	; (cb58 <m2m_wifi_connect_sc+0x258>)
    ca1c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    ca1e:	200c      	movs	r0, #12
    ca20:	4240      	negs	r0, r0
					goto ERR1;
    ca22:	e7bc      	b.n	c99e <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    ca24:	228c      	movs	r2, #140	; 0x8c
    ca26:	0092      	lsls	r2, r2, #2
    ca28:	4946      	ldr	r1, [pc, #280]	; (cb44 <m2m_wifi_connect_sc+0x244>)
    ca2a:	4847      	ldr	r0, [pc, #284]	; (cb48 <m2m_wifi_connect_sc+0x248>)
    ca2c:	4b47      	ldr	r3, [pc, #284]	; (cb4c <m2m_wifi_connect_sc+0x24c>)
    ca2e:	4798      	blx	r3
    ca30:	484d      	ldr	r0, [pc, #308]	; (cb68 <m2m_wifi_connect_sc+0x268>)
    ca32:	4b48      	ldr	r3, [pc, #288]	; (cb54 <m2m_wifi_connect_sc+0x254>)
    ca34:	4798      	blx	r3
    ca36:	200d      	movs	r0, #13
    ca38:	4b47      	ldr	r3, [pc, #284]	; (cb58 <m2m_wifi_connect_sc+0x258>)
    ca3a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    ca3c:	200c      	movs	r0, #12
    ca3e:	4240      	negs	r0, r0
		goto ERR1;
    ca40:	e7ad      	b.n	c99e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    ca42:	4a4a      	ldr	r2, [pc, #296]	; (cb6c <m2m_wifi_connect_sc+0x26c>)
    ca44:	493f      	ldr	r1, [pc, #252]	; (cb44 <m2m_wifi_connect_sc+0x244>)
    ca46:	4840      	ldr	r0, [pc, #256]	; (cb48 <m2m_wifi_connect_sc+0x248>)
    ca48:	4b40      	ldr	r3, [pc, #256]	; (cb4c <m2m_wifi_connect_sc+0x24c>)
    ca4a:	4798      	blx	r3
    ca4c:	4848      	ldr	r0, [pc, #288]	; (cb70 <m2m_wifi_connect_sc+0x270>)
    ca4e:	4b41      	ldr	r3, [pc, #260]	; (cb54 <m2m_wifi_connect_sc+0x254>)
    ca50:	4798      	blx	r3
    ca52:	200d      	movs	r0, #13
    ca54:	4b40      	ldr	r3, [pc, #256]	; (cb58 <m2m_wifi_connect_sc+0x258>)
    ca56:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    ca58:	200c      	movs	r0, #12
    ca5a:	4240      	negs	r0, r0
			goto ERR1;
    ca5c:	e79f      	b.n	c99e <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    ca5e:	783b      	ldrb	r3, [r7, #0]
    ca60:	3b01      	subs	r3, #1
    ca62:	b2db      	uxtb	r3, r3
    ca64:	aa07      	add	r2, sp, #28
    ca66:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    ca68:	2b03      	cmp	r3, #3
    ca6a:	d817      	bhi.n	ca9c <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    ca6c:	787a      	ldrb	r2, [r7, #1]
    ca6e:	1e51      	subs	r1, r2, #1
    ca70:	ab07      	add	r3, sp, #28
    ca72:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    ca74:	2310      	movs	r3, #16
    ca76:	0011      	movs	r1, r2
    ca78:	4399      	bics	r1, r3
    ca7a:	290b      	cmp	r1, #11
    ca7c:	d01e      	beq.n	cabc <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    ca7e:	4a3d      	ldr	r2, [pc, #244]	; (cb74 <m2m_wifi_connect_sc+0x274>)
    ca80:	4930      	ldr	r1, [pc, #192]	; (cb44 <m2m_wifi_connect_sc+0x244>)
    ca82:	4831      	ldr	r0, [pc, #196]	; (cb48 <m2m_wifi_connect_sc+0x248>)
    ca84:	4c31      	ldr	r4, [pc, #196]	; (cb4c <m2m_wifi_connect_sc+0x24c>)
    ca86:	47a0      	blx	r4
    ca88:	ab07      	add	r3, sp, #28
    ca8a:	7859      	ldrb	r1, [r3, #1]
    ca8c:	483a      	ldr	r0, [pc, #232]	; (cb78 <m2m_wifi_connect_sc+0x278>)
    ca8e:	47a0      	blx	r4
    ca90:	200d      	movs	r0, #13
    ca92:	4b31      	ldr	r3, [pc, #196]	; (cb58 <m2m_wifi_connect_sc+0x258>)
    ca94:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    ca96:	200c      	movs	r0, #12
    ca98:	4240      	negs	r0, r0
			goto ERR1;
    ca9a:	e780      	b.n	c99e <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    ca9c:	2294      	movs	r2, #148	; 0x94
    ca9e:	0092      	lsls	r2, r2, #2
    caa0:	4928      	ldr	r1, [pc, #160]	; (cb44 <m2m_wifi_connect_sc+0x244>)
    caa2:	4829      	ldr	r0, [pc, #164]	; (cb48 <m2m_wifi_connect_sc+0x248>)
    caa4:	4c29      	ldr	r4, [pc, #164]	; (cb4c <m2m_wifi_connect_sc+0x24c>)
    caa6:	47a0      	blx	r4
    caa8:	ab07      	add	r3, sp, #28
    caaa:	7819      	ldrb	r1, [r3, #0]
    caac:	4833      	ldr	r0, [pc, #204]	; (cb7c <m2m_wifi_connect_sc+0x27c>)
    caae:	47a0      	blx	r4
    cab0:	200d      	movs	r0, #13
    cab2:	4b29      	ldr	r3, [pc, #164]	; (cb58 <m2m_wifi_connect_sc+0x258>)
    cab4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    cab6:	200c      	movs	r0, #12
    cab8:	4240      	negs	r0, r0
			goto ERR1;
    caba:	e770      	b.n	c99e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    cabc:	1cb9      	adds	r1, r7, #2
    cabe:	2016      	movs	r0, #22
    cac0:	ab02      	add	r3, sp, #8
    cac2:	469c      	mov	ip, r3
    cac4:	4460      	add	r0, ip
    cac6:	4b1c      	ldr	r3, [pc, #112]	; (cb38 <m2m_wifi_connect_sc+0x238>)
    cac8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    caca:	787b      	ldrb	r3, [r7, #1]
    cacc:	aa07      	add	r2, sp, #28
    cace:	4694      	mov	ip, r2
    cad0:	4463      	add	r3, ip
    cad2:	2200      	movs	r2, #0
    cad4:	709a      	strb	r2, [r3, #2]
    cad6:	e758      	b.n	c98a <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    cad8:	0038      	movs	r0, r7
    cada:	4b20      	ldr	r3, [pc, #128]	; (cb5c <m2m_wifi_connect_sc+0x25c>)
    cadc:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    cade:	1e43      	subs	r3, r0, #1
    cae0:	b29b      	uxth	r3, r3
    cae2:	2b3f      	cmp	r3, #63	; 0x3f
    cae4:	d805      	bhi.n	caf2 <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    cae6:	1c42      	adds	r2, r0, #1
    cae8:	0039      	movs	r1, r7
    caea:	a807      	add	r0, sp, #28
    caec:	4b12      	ldr	r3, [pc, #72]	; (cb38 <m2m_wifi_connect_sc+0x238>)
    caee:	4798      	blx	r3
    caf0:	e74b      	b.n	c98a <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    caf2:	4a23      	ldr	r2, [pc, #140]	; (cb80 <m2m_wifi_connect_sc+0x280>)
    caf4:	4913      	ldr	r1, [pc, #76]	; (cb44 <m2m_wifi_connect_sc+0x244>)
    caf6:	4814      	ldr	r0, [pc, #80]	; (cb48 <m2m_wifi_connect_sc+0x248>)
    caf8:	4b14      	ldr	r3, [pc, #80]	; (cb4c <m2m_wifi_connect_sc+0x24c>)
    cafa:	4798      	blx	r3
    cafc:	4821      	ldr	r0, [pc, #132]	; (cb84 <m2m_wifi_connect_sc+0x284>)
    cafe:	4b15      	ldr	r3, [pc, #84]	; (cb54 <m2m_wifi_connect_sc+0x254>)
    cb00:	4798      	blx	r3
    cb02:	200d      	movs	r0, #13
    cb04:	4b14      	ldr	r3, [pc, #80]	; (cb58 <m2m_wifi_connect_sc+0x258>)
    cb06:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    cb08:	200c      	movs	r0, #12
    cb0a:	4240      	negs	r0, r0
			goto ERR1;
    cb0c:	e747      	b.n	c99e <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    cb0e:	223e      	movs	r2, #62	; 0x3e
    cb10:	0039      	movs	r1, r7
    cb12:	a807      	add	r0, sp, #28
    cb14:	4b08      	ldr	r3, [pc, #32]	; (cb38 <m2m_wifi_connect_sc+0x238>)
    cb16:	4798      	blx	r3
    cb18:	e737      	b.n	c98a <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    cb1a:	4a1b      	ldr	r2, [pc, #108]	; (cb88 <m2m_wifi_connect_sc+0x288>)
    cb1c:	4909      	ldr	r1, [pc, #36]	; (cb44 <m2m_wifi_connect_sc+0x244>)
    cb1e:	480a      	ldr	r0, [pc, #40]	; (cb48 <m2m_wifi_connect_sc+0x248>)
    cb20:	4b0a      	ldr	r3, [pc, #40]	; (cb4c <m2m_wifi_connect_sc+0x24c>)
    cb22:	4798      	blx	r3
    cb24:	4819      	ldr	r0, [pc, #100]	; (cb8c <m2m_wifi_connect_sc+0x28c>)
    cb26:	4b0b      	ldr	r3, [pc, #44]	; (cb54 <m2m_wifi_connect_sc+0x254>)
    cb28:	4798      	blx	r3
    cb2a:	200d      	movs	r0, #13
    cb2c:	4b0a      	ldr	r3, [pc, #40]	; (cb58 <m2m_wifi_connect_sc+0x258>)
    cb2e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    cb30:	200c      	movs	r0, #12
    cb32:	4240      	negs	r0, r0
		goto ERR1;
    cb34:	e733      	b.n	c99e <m2m_wifi_connect_sc+0x9e>
    cb36:	46c0      	nop			; (mov r8, r8)
    cb38:	0000bbb1 	.word	0x0000bbb1
    cb3c:	0000bcd9 	.word	0x0000bcd9
    cb40:	0000021a 	.word	0x0000021a
    cb44:	0001b84c 	.word	0x0001b84c
    cb48:	0001b420 	.word	0x0001b420
    cb4c:	0001916d 	.word	0x0001916d
    cb50:	0001b894 	.word	0x0001b894
    cb54:	00019289 	.word	0x00019289
    cb58:	000191a1 	.word	0x000191a1
    cb5c:	0000bbd5 	.word	0x0000bbd5
    cb60:	00000226 	.word	0x00000226
    cb64:	0001b8a8 	.word	0x0001b8a8
    cb68:	0001b8b4 	.word	0x0001b8b4
    cb6c:	00000239 	.word	0x00000239
    cb70:	0001b8c8 	.word	0x0001b8c8
    cb74:	00000257 	.word	0x00000257
    cb78:	0001b8f0 	.word	0x0001b8f0
    cb7c:	0001b8d4 	.word	0x0001b8d4
    cb80:	00000266 	.word	0x00000266
    cb84:	0001b90c 	.word	0x0001b90c
    cb88:	00000276 	.word	0x00000276
    cb8c:	0001b928 	.word	0x0001b928

0000cb90 <m2m_wifi_connect>:
{
    cb90:	b530      	push	{r4, r5, lr}
    cb92:	b083      	sub	sp, #12
    cb94:	ac06      	add	r4, sp, #24
    cb96:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    cb98:	2500      	movs	r5, #0
    cb9a:	9501      	str	r5, [sp, #4]
    cb9c:	9400      	str	r4, [sp, #0]
    cb9e:	4c02      	ldr	r4, [pc, #8]	; (cba8 <m2m_wifi_connect+0x18>)
    cba0:	47a0      	blx	r4
}
    cba2:	b003      	add	sp, #12
    cba4:	bd30      	pop	{r4, r5, pc}
    cba6:	46c0      	nop			; (mov r8, r8)
    cba8:	0000c901 	.word	0x0000c901

0000cbac <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    cbac:	2000      	movs	r0, #0
    cbae:	4770      	bx	lr

0000cbb0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    cbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbb2:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    cbb4:	2580      	movs	r5, #128	; 0x80
    cbb6:	006d      	lsls	r5, r5, #1
    cbb8:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    cbba:	24a5      	movs	r4, #165	; 0xa5
    cbbc:	0164      	lsls	r4, r4, #5
    cbbe:	4f08      	ldr	r7, [pc, #32]	; (cbe0 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    cbc0:	4e08      	ldr	r6, [pc, #32]	; (cbe4 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    cbc2:	0029      	movs	r1, r5
    cbc4:	0020      	movs	r0, r4
    cbc6:	47b8      	blx	r7
			uint32 reg = 0;
    cbc8:	2300      	movs	r3, #0
    cbca:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    cbcc:	a901      	add	r1, sp, #4
    cbce:	0020      	movs	r0, r4
    cbd0:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    cbd2:	2800      	cmp	r0, #0
    cbd4:	d1f5      	bne.n	cbc2 <chip_apply_conf+0x12>
				if(reg == val32)
    cbd6:	9b01      	ldr	r3, [sp, #4]
    cbd8:	429d      	cmp	r5, r3
    cbda:	d1f2      	bne.n	cbc2 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    cbdc:	b003      	add	sp, #12
    cbde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cbe0:	0000d0a1 	.word	0x0000d0a1
    cbe4:	0000d095 	.word	0x0000d095

0000cbe8 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    cbe8:	b500      	push	{lr}
    cbea:	b083      	sub	sp, #12
	uint32 reg = 0;
    cbec:	2300      	movs	r3, #0
    cbee:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    cbf0:	a901      	add	r1, sp, #4
    cbf2:	4811      	ldr	r0, [pc, #68]	; (cc38 <enable_interrupts+0x50>)
    cbf4:	4b11      	ldr	r3, [pc, #68]	; (cc3c <enable_interrupts+0x54>)
    cbf6:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    cbf8:	2800      	cmp	r0, #0
    cbfa:	d001      	beq.n	cc00 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    cbfc:	b003      	add	sp, #12
    cbfe:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    cc00:	2180      	movs	r1, #128	; 0x80
    cc02:	0049      	lsls	r1, r1, #1
    cc04:	9b01      	ldr	r3, [sp, #4]
    cc06:	4319      	orrs	r1, r3
    cc08:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    cc0a:	480b      	ldr	r0, [pc, #44]	; (cc38 <enable_interrupts+0x50>)
    cc0c:	4b0c      	ldr	r3, [pc, #48]	; (cc40 <enable_interrupts+0x58>)
    cc0e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    cc10:	2800      	cmp	r0, #0
    cc12:	d1f3      	bne.n	cbfc <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    cc14:	a901      	add	r1, sp, #4
    cc16:	20d0      	movs	r0, #208	; 0xd0
    cc18:	0140      	lsls	r0, r0, #5
    cc1a:	4b08      	ldr	r3, [pc, #32]	; (cc3c <enable_interrupts+0x54>)
    cc1c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    cc1e:	2800      	cmp	r0, #0
    cc20:	d1ec      	bne.n	cbfc <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    cc22:	2180      	movs	r1, #128	; 0x80
    cc24:	0249      	lsls	r1, r1, #9
    cc26:	9b01      	ldr	r3, [sp, #4]
    cc28:	4319      	orrs	r1, r3
    cc2a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    cc2c:	20d0      	movs	r0, #208	; 0xd0
    cc2e:	0140      	lsls	r0, r0, #5
    cc30:	4b03      	ldr	r3, [pc, #12]	; (cc40 <enable_interrupts+0x58>)
    cc32:	4798      	blx	r3
    cc34:	e7e2      	b.n	cbfc <enable_interrupts+0x14>
    cc36:	46c0      	nop			; (mov r8, r8)
    cc38:	00001408 	.word	0x00001408
    cc3c:	0000d095 	.word	0x0000d095
    cc40:	0000d0a1 	.word	0x0000d0a1

0000cc44 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    cc44:	b510      	push	{r4, lr}
    cc46:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    cc48:	4b28      	ldr	r3, [pc, #160]	; (ccec <nmi_get_chipid+0xa8>)
    cc4a:	681c      	ldr	r4, [r3, #0]
    cc4c:	2c00      	cmp	r4, #0
    cc4e:	d004      	beq.n	cc5a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    cc50:	4b26      	ldr	r3, [pc, #152]	; (ccec <nmi_get_chipid+0xa8>)
    cc52:	681c      	ldr	r4, [r3, #0]
}
    cc54:	0020      	movs	r0, r4
    cc56:	b002      	add	sp, #8
    cc58:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    cc5a:	0019      	movs	r1, r3
    cc5c:	2080      	movs	r0, #128	; 0x80
    cc5e:	0140      	lsls	r0, r0, #5
    cc60:	4b23      	ldr	r3, [pc, #140]	; (ccf0 <nmi_get_chipid+0xac>)
    cc62:	4798      	blx	r3
    cc64:	2800      	cmp	r0, #0
    cc66:	d003      	beq.n	cc70 <nmi_get_chipid+0x2c>
			chipid = 0;
    cc68:	2200      	movs	r2, #0
    cc6a:	4b20      	ldr	r3, [pc, #128]	; (ccec <nmi_get_chipid+0xa8>)
    cc6c:	601a      	str	r2, [r3, #0]
			return 0;
    cc6e:	e7f1      	b.n	cc54 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    cc70:	a901      	add	r1, sp, #4
    cc72:	4820      	ldr	r0, [pc, #128]	; (ccf4 <nmi_get_chipid+0xb0>)
    cc74:	4b1e      	ldr	r3, [pc, #120]	; (ccf0 <nmi_get_chipid+0xac>)
    cc76:	4798      	blx	r3
    cc78:	2800      	cmp	r0, #0
    cc7a:	d003      	beq.n	cc84 <nmi_get_chipid+0x40>
			chipid = 0;
    cc7c:	2200      	movs	r2, #0
    cc7e:	4b1b      	ldr	r3, [pc, #108]	; (ccec <nmi_get_chipid+0xa8>)
    cc80:	601a      	str	r2, [r3, #0]
			return 0;
    cc82:	e7e7      	b.n	cc54 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    cc84:	4b19      	ldr	r3, [pc, #100]	; (ccec <nmi_get_chipid+0xa8>)
    cc86:	681b      	ldr	r3, [r3, #0]
    cc88:	4a1b      	ldr	r2, [pc, #108]	; (ccf8 <nmi_get_chipid+0xb4>)
    cc8a:	4293      	cmp	r3, r2
    cc8c:	d00e      	beq.n	ccac <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    cc8e:	4a1b      	ldr	r2, [pc, #108]	; (ccfc <nmi_get_chipid+0xb8>)
    cc90:	4293      	cmp	r3, r2
    cc92:	d012      	beq.n	ccba <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    cc94:	4a1a      	ldr	r2, [pc, #104]	; (cd00 <nmi_get_chipid+0xbc>)
    cc96:	4293      	cmp	r3, r2
    cc98:	d01c      	beq.n	ccd4 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    cc9a:	4914      	ldr	r1, [pc, #80]	; (ccec <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    cc9c:	4a19      	ldr	r2, [pc, #100]	; (cd04 <nmi_get_chipid+0xc0>)
    cc9e:	680b      	ldr	r3, [r1, #0]
    cca0:	401a      	ands	r2, r3
		chipid |= 0x050000;
    cca2:	23a0      	movs	r3, #160	; 0xa0
    cca4:	02db      	lsls	r3, r3, #11
    cca6:	4313      	orrs	r3, r2
    cca8:	600b      	str	r3, [r1, #0]
    ccaa:	e7d1      	b.n	cc50 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    ccac:	9b01      	ldr	r3, [sp, #4]
    ccae:	2b01      	cmp	r3, #1
    ccb0:	d0f3      	beq.n	cc9a <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    ccb2:	4a15      	ldr	r2, [pc, #84]	; (cd08 <nmi_get_chipid+0xc4>)
    ccb4:	4b0d      	ldr	r3, [pc, #52]	; (ccec <nmi_get_chipid+0xa8>)
    ccb6:	601a      	str	r2, [r3, #0]
    ccb8:	e7ef      	b.n	cc9a <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    ccba:	9b01      	ldr	r3, [sp, #4]
    ccbc:	2b03      	cmp	r3, #3
    ccbe:	d0ec      	beq.n	cc9a <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    ccc0:	2b04      	cmp	r3, #4
    ccc2:	d003      	beq.n	cccc <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    ccc4:	4a11      	ldr	r2, [pc, #68]	; (cd0c <nmi_get_chipid+0xc8>)
    ccc6:	4b09      	ldr	r3, [pc, #36]	; (ccec <nmi_get_chipid+0xa8>)
    ccc8:	601a      	str	r2, [r3, #0]
    ccca:	e7e6      	b.n	cc9a <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    cccc:	4a10      	ldr	r2, [pc, #64]	; (cd10 <nmi_get_chipid+0xcc>)
    ccce:	4b07      	ldr	r3, [pc, #28]	; (ccec <nmi_get_chipid+0xa8>)
    ccd0:	601a      	str	r2, [r3, #0]
    ccd2:	e7e2      	b.n	cc9a <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    ccd4:	4905      	ldr	r1, [pc, #20]	; (ccec <nmi_get_chipid+0xa8>)
    ccd6:	20ec      	movs	r0, #236	; 0xec
    ccd8:	0380      	lsls	r0, r0, #14
    ccda:	4b05      	ldr	r3, [pc, #20]	; (ccf0 <nmi_get_chipid+0xac>)
    ccdc:	4798      	blx	r3
    ccde:	2800      	cmp	r0, #0
    cce0:	d0db      	beq.n	cc9a <nmi_get_chipid+0x56>
			chipid = 0;
    cce2:	2200      	movs	r2, #0
    cce4:	4b01      	ldr	r3, [pc, #4]	; (ccec <nmi_get_chipid+0xa8>)
    cce6:	601a      	str	r2, [r3, #0]
			return 0;
    cce8:	e7b4      	b.n	cc54 <nmi_get_chipid+0x10>
    ccea:	46c0      	nop			; (mov r8, r8)
    ccec:	200004fc 	.word	0x200004fc
    ccf0:	0000d095 	.word	0x0000d095
    ccf4:	000013f4 	.word	0x000013f4
    ccf8:	001002a0 	.word	0x001002a0
    ccfc:	001002b0 	.word	0x001002b0
    cd00:	001000f0 	.word	0x001000f0
    cd04:	fff0ffff 	.word	0xfff0ffff
    cd08:	001002a1 	.word	0x001002a1
    cd0c:	001002b2 	.word	0x001002b2
    cd10:	001002b1 	.word	0x001002b1

0000cd14 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    cd14:	b530      	push	{r4, r5, lr}
    cd16:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    cd18:	4c16      	ldr	r4, [pc, #88]	; (cd74 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    cd1a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    cd1c:	a901      	add	r1, sp, #4
    cd1e:	2010      	movs	r0, #16
    cd20:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    cd22:	2800      	cmp	r0, #0
    cd24:	d11c      	bne.n	cd60 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    cd26:	9b01      	ldr	r3, [sp, #4]
    cd28:	422b      	tst	r3, r5
    cd2a:	d1f7      	bne.n	cd1c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    cd2c:	a901      	add	r1, sp, #4
    cd2e:	3001      	adds	r0, #1
    cd30:	4b10      	ldr	r3, [pc, #64]	; (cd74 <chip_sleep+0x60>)
    cd32:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    cd34:	2800      	cmp	r0, #0
    cd36:	d113      	bne.n	cd60 <chip_sleep+0x4c>
	if(reg & NBIT1)
    cd38:	9901      	ldr	r1, [sp, #4]
    cd3a:	078b      	lsls	r3, r1, #30
    cd3c:	d507      	bpl.n	cd4e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    cd3e:	2302      	movs	r3, #2
    cd40:	4399      	bics	r1, r3
    cd42:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    cd44:	3001      	adds	r0, #1
    cd46:	4b0c      	ldr	r3, [pc, #48]	; (cd78 <chip_sleep+0x64>)
    cd48:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    cd4a:	2800      	cmp	r0, #0
    cd4c:	d108      	bne.n	cd60 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    cd4e:	a901      	add	r1, sp, #4
    cd50:	200b      	movs	r0, #11
    cd52:	4b08      	ldr	r3, [pc, #32]	; (cd74 <chip_sleep+0x60>)
    cd54:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    cd56:	2800      	cmp	r0, #0
    cd58:	d102      	bne.n	cd60 <chip_sleep+0x4c>
	if(reg & NBIT0)
    cd5a:	9901      	ldr	r1, [sp, #4]
    cd5c:	07cb      	lsls	r3, r1, #31
    cd5e:	d401      	bmi.n	cd64 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    cd60:	b003      	add	sp, #12
    cd62:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    cd64:	2301      	movs	r3, #1
    cd66:	4399      	bics	r1, r3
    cd68:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    cd6a:	300b      	adds	r0, #11
    cd6c:	4b02      	ldr	r3, [pc, #8]	; (cd78 <chip_sleep+0x64>)
    cd6e:	4798      	blx	r3
    cd70:	e7f6      	b.n	cd60 <chip_sleep+0x4c>
    cd72:	46c0      	nop			; (mov r8, r8)
    cd74:	0000d095 	.word	0x0000d095
    cd78:	0000d0a1 	.word	0x0000d0a1

0000cd7c <chip_wake>:
sint8 chip_wake(void)
{
    cd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd7e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    cd80:	2300      	movs	r3, #0
    cd82:	9301      	str	r3, [sp, #4]
    cd84:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    cd86:	a901      	add	r1, sp, #4
    cd88:	200b      	movs	r0, #11
    cd8a:	4b28      	ldr	r3, [pc, #160]	; (ce2c <chip_wake+0xb0>)
    cd8c:	4798      	blx	r3
    cd8e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    cd90:	d130      	bne.n	cdf4 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    cd92:	9901      	ldr	r1, [sp, #4]
    cd94:	07cb      	lsls	r3, r1, #31
    cd96:	d406      	bmi.n	cda6 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    cd98:	2301      	movs	r3, #1
    cd9a:	4319      	orrs	r1, r3
    cd9c:	200b      	movs	r0, #11
    cd9e:	4b24      	ldr	r3, [pc, #144]	; (ce30 <chip_wake+0xb4>)
    cda0:	4798      	blx	r3
    cda2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    cda4:	d126      	bne.n	cdf4 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    cda6:	a901      	add	r1, sp, #4
    cda8:	2001      	movs	r0, #1
    cdaa:	4b20      	ldr	r3, [pc, #128]	; (ce2c <chip_wake+0xb0>)
    cdac:	4798      	blx	r3
    cdae:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    cdb0:	d120      	bne.n	cdf4 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    cdb2:	9901      	ldr	r1, [sp, #4]
    cdb4:	078b      	lsls	r3, r1, #30
    cdb6:	d520      	bpl.n	cdfa <chip_wake+0x7e>
{
    cdb8:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    cdba:	4f1c      	ldr	r7, [pc, #112]	; (ce2c <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    cdbc:	4e1d      	ldr	r6, [pc, #116]	; (ce34 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    cdbe:	4669      	mov	r1, sp
    cdc0:	200f      	movs	r0, #15
    cdc2:	47b8      	blx	r7
    cdc4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    cdc6:	d120      	bne.n	ce0a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    cdc8:	9b00      	ldr	r3, [sp, #0]
    cdca:	075b      	lsls	r3, r3, #29
    cdcc:	d42b      	bmi.n	ce26 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    cdce:	2002      	movs	r0, #2
    cdd0:	47b0      	blx	r6
    cdd2:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    cdd4:	2d00      	cmp	r5, #0
    cdd6:	d1f2      	bne.n	cdbe <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    cdd8:	22ad      	movs	r2, #173	; 0xad
    cdda:	0052      	lsls	r2, r2, #1
    cddc:	4916      	ldr	r1, [pc, #88]	; (ce38 <chip_wake+0xbc>)
    cdde:	4817      	ldr	r0, [pc, #92]	; (ce3c <chip_wake+0xc0>)
    cde0:	4b17      	ldr	r3, [pc, #92]	; (ce40 <chip_wake+0xc4>)
    cde2:	4798      	blx	r3
    cde4:	4817      	ldr	r0, [pc, #92]	; (ce44 <chip_wake+0xc8>)
    cde6:	4b18      	ldr	r3, [pc, #96]	; (ce48 <chip_wake+0xcc>)
    cde8:	4798      	blx	r3
    cdea:	200d      	movs	r0, #13
    cdec:	4b17      	ldr	r3, [pc, #92]	; (ce4c <chip_wake+0xd0>)
    cdee:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    cdf0:	2404      	movs	r4, #4
    cdf2:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    cdf4:	0020      	movs	r0, r4
    cdf6:	b003      	add	sp, #12
    cdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    cdfa:	2302      	movs	r3, #2
    cdfc:	4319      	orrs	r1, r3
    cdfe:	2001      	movs	r0, #1
    ce00:	4b0b      	ldr	r3, [pc, #44]	; (ce30 <chip_wake+0xb4>)
    ce02:	4798      	blx	r3
    ce04:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    ce06:	d0d7      	beq.n	cdb8 <chip_wake+0x3c>
    ce08:	e7f4      	b.n	cdf4 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    ce0a:	22a8      	movs	r2, #168	; 0xa8
    ce0c:	0052      	lsls	r2, r2, #1
    ce0e:	490a      	ldr	r1, [pc, #40]	; (ce38 <chip_wake+0xbc>)
    ce10:	480a      	ldr	r0, [pc, #40]	; (ce3c <chip_wake+0xc0>)
    ce12:	4d0b      	ldr	r5, [pc, #44]	; (ce40 <chip_wake+0xc4>)
    ce14:	47a8      	blx	r5
    ce16:	9a00      	ldr	r2, [sp, #0]
    ce18:	0021      	movs	r1, r4
    ce1a:	480d      	ldr	r0, [pc, #52]	; (ce50 <chip_wake+0xd4>)
    ce1c:	47a8      	blx	r5
    ce1e:	200d      	movs	r0, #13
    ce20:	4b0a      	ldr	r3, [pc, #40]	; (ce4c <chip_wake+0xd0>)
    ce22:	4798      	blx	r3
			goto _WAKE_EXIT;
    ce24:	e7e6      	b.n	cdf4 <chip_wake+0x78>
	nm_bus_reset();
    ce26:	4b0b      	ldr	r3, [pc, #44]	; (ce54 <chip_wake+0xd8>)
    ce28:	4798      	blx	r3
    ce2a:	e7e3      	b.n	cdf4 <chip_wake+0x78>
    ce2c:	0000d095 	.word	0x0000d095
    ce30:	0000d0a1 	.word	0x0000d0a1
    ce34:	0000b839 	.word	0x0000b839
    ce38:	0001ba08 	.word	0x0001ba08
    ce3c:	0001b420 	.word	0x0001b420
    ce40:	0001916d 	.word	0x0001916d
    ce44:	0001ba50 	.word	0x0001ba50
    ce48:	00019289 	.word	0x00019289
    ce4c:	000191a1 	.word	0x000191a1
    ce50:	0001ba38 	.word	0x0001ba38
    ce54:	0000d07d 	.word	0x0000d07d

0000ce58 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce5a:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    ce5c:	4d2d      	ldr	r5, [pc, #180]	; (cf14 <wait_for_bootrom+0xbc>)
    ce5e:	4c2e      	ldr	r4, [pc, #184]	; (cf18 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    ce60:	4e2e      	ldr	r6, [pc, #184]	; (cf1c <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    ce62:	0028      	movs	r0, r5
    ce64:	47a0      	blx	r4
		if (reg & 0x80000000) {
    ce66:	2800      	cmp	r0, #0
    ce68:	db02      	blt.n	ce70 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    ce6a:	2001      	movs	r0, #1
    ce6c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    ce6e:	e7f8      	b.n	ce62 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    ce70:	482b      	ldr	r0, [pc, #172]	; (cf20 <wait_for_bootrom+0xc8>)
    ce72:	4b29      	ldr	r3, [pc, #164]	; (cf18 <wait_for_bootrom+0xc0>)
    ce74:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    ce76:	07c3      	lsls	r3, r0, #31
    ce78:	d409      	bmi.n	ce8e <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    ce7a:	4e28      	ldr	r6, [pc, #160]	; (cf1c <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    ce7c:	4c29      	ldr	r4, [pc, #164]	; (cf24 <wait_for_bootrom+0xcc>)
    ce7e:	4d26      	ldr	r5, [pc, #152]	; (cf18 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    ce80:	2001      	movs	r0, #1
    ce82:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    ce84:	0020      	movs	r0, r4
    ce86:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    ce88:	4b27      	ldr	r3, [pc, #156]	; (cf28 <wait_for_bootrom+0xd0>)
    ce8a:	4298      	cmp	r0, r3
    ce8c:	d1f8      	bne.n	ce80 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    ce8e:	2f02      	cmp	r7, #2
    ce90:	d021      	beq.n	ced6 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    ce92:	2f03      	cmp	r7, #3
    ce94:	d029      	beq.n	ceea <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    ce96:	2f04      	cmp	r7, #4
    ce98:	d030      	beq.n	cefc <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    ce9a:	4924      	ldr	r1, [pc, #144]	; (cf2c <wait_for_bootrom+0xd4>)
    ce9c:	4824      	ldr	r0, [pc, #144]	; (cf30 <wait_for_bootrom+0xd8>)
    ce9e:	4b25      	ldr	r3, [pc, #148]	; (cf34 <wait_for_bootrom+0xdc>)
    cea0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    cea2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    cea4:	4b24      	ldr	r3, [pc, #144]	; (cf38 <wait_for_bootrom+0xe0>)
    cea6:	4798      	blx	r3
    cea8:	0500      	lsls	r0, r0, #20
    ceaa:	0d00      	lsrs	r0, r0, #20
    ceac:	4b23      	ldr	r3, [pc, #140]	; (cf3c <wait_for_bootrom+0xe4>)
    ceae:	4298      	cmp	r0, r3
    ceb0:	d82a      	bhi.n	cf08 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    ceb2:	0020      	movs	r0, r4
    ceb4:	4b22      	ldr	r3, [pc, #136]	; (cf40 <wait_for_bootrom+0xe8>)
    ceb6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    ceb8:	4822      	ldr	r0, [pc, #136]	; (cf44 <wait_for_bootrom+0xec>)
    ceba:	4c23      	ldr	r4, [pc, #140]	; (cf48 <wait_for_bootrom+0xf0>)
    cebc:	47a0      	blx	r4
    cebe:	491b      	ldr	r1, [pc, #108]	; (cf2c <wait_for_bootrom+0xd4>)
    cec0:	4822      	ldr	r0, [pc, #136]	; (cf4c <wait_for_bootrom+0xf4>)
    cec2:	47a0      	blx	r4
    cec4:	200d      	movs	r0, #13
    cec6:	4b22      	ldr	r3, [pc, #136]	; (cf50 <wait_for_bootrom+0xf8>)
    cec8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    ceca:	4922      	ldr	r1, [pc, #136]	; (cf54 <wait_for_bootrom+0xfc>)
    cecc:	4815      	ldr	r0, [pc, #84]	; (cf24 <wait_for_bootrom+0xcc>)
    cece:	4b19      	ldr	r3, [pc, #100]	; (cf34 <wait_for_bootrom+0xdc>)
    ced0:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    ced2:	2000      	movs	r0, #0
    ced4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ced6:	4920      	ldr	r1, [pc, #128]	; (cf58 <wait_for_bootrom+0x100>)
    ced8:	4820      	ldr	r0, [pc, #128]	; (cf5c <wait_for_bootrom+0x104>)
    ceda:	4c16      	ldr	r4, [pc, #88]	; (cf34 <wait_for_bootrom+0xdc>)
    cedc:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    cede:	2180      	movs	r1, #128	; 0x80
    cee0:	0349      	lsls	r1, r1, #13
    cee2:	4813      	ldr	r0, [pc, #76]	; (cf30 <wait_for_bootrom+0xd8>)
    cee4:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    cee6:	2400      	movs	r4, #0
    cee8:	e7dc      	b.n	cea4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    ceea:	491b      	ldr	r1, [pc, #108]	; (cf58 <wait_for_bootrom+0x100>)
    ceec:	481b      	ldr	r0, [pc, #108]	; (cf5c <wait_for_bootrom+0x104>)
    ceee:	4c11      	ldr	r4, [pc, #68]	; (cf34 <wait_for_bootrom+0xdc>)
    cef0:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    cef2:	2100      	movs	r1, #0
    cef4:	480e      	ldr	r0, [pc, #56]	; (cf30 <wait_for_bootrom+0xd8>)
    cef6:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    cef8:	2400      	movs	r4, #0
    cefa:	e7d3      	b.n	cea4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    cefc:	490b      	ldr	r1, [pc, #44]	; (cf2c <wait_for_bootrom+0xd4>)
    cefe:	480c      	ldr	r0, [pc, #48]	; (cf30 <wait_for_bootrom+0xd8>)
    cf00:	4b0c      	ldr	r3, [pc, #48]	; (cf34 <wait_for_bootrom+0xdc>)
    cf02:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    cf04:	2480      	movs	r4, #128	; 0x80
    cf06:	e7cd      	b.n	cea4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    cf08:	2002      	movs	r0, #2
    cf0a:	4320      	orrs	r0, r4
    cf0c:	4b0c      	ldr	r3, [pc, #48]	; (cf40 <wait_for_bootrom+0xe8>)
    cf0e:	4798      	blx	r3
    cf10:	e7d2      	b.n	ceb8 <wait_for_bootrom+0x60>
    cf12:	46c0      	nop			; (mov r8, r8)
    cf14:	00001014 	.word	0x00001014
    cf18:	0000d089 	.word	0x0000d089
    cf1c:	0000b839 	.word	0x0000b839
    cf20:	000207bc 	.word	0x000207bc
    cf24:	000c000c 	.word	0x000c000c
    cf28:	10add09e 	.word	0x10add09e
    cf2c:	13301354 	.word	0x13301354
    cf30:	0000108c 	.word	0x0000108c
    cf34:	0000d0a1 	.word	0x0000d0a1
    cf38:	0000cc45 	.word	0x0000cc45
    cf3c:	0000039f 	.word	0x0000039f
    cf40:	0000cbb1 	.word	0x0000cbb1
    cf44:	0001b7c0 	.word	0x0001b7c0
    cf48:	0001916d 	.word	0x0001916d
    cf4c:	0001ba6c 	.word	0x0001ba6c
    cf50:	000191a1 	.word	0x000191a1
    cf54:	ef522f61 	.word	0xef522f61
    cf58:	3c1cd57d 	.word	0x3c1cd57d
    cf5c:	000207ac 	.word	0x000207ac

0000cf60 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    cf60:	b570      	push	{r4, r5, r6, lr}
    cf62:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    cf64:	4b15      	ldr	r3, [pc, #84]	; (cfbc <wait_for_firmware_start+0x5c>)
    cf66:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    cf68:	4b15      	ldr	r3, [pc, #84]	; (cfc0 <wait_for_firmware_start+0x60>)
    cf6a:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    cf6c:	3802      	subs	r0, #2
    cf6e:	2801      	cmp	r0, #1
    cf70:	d911      	bls.n	cf96 <wait_for_firmware_start+0x36>
{
    cf72:	2401      	movs	r4, #1
    cf74:	4264      	negs	r4, r4
    cf76:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    cf78:	4e12      	ldr	r6, [pc, #72]	; (cfc4 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    cf7a:	4d13      	ldr	r5, [pc, #76]	; (cfc8 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    cf7c:	9b00      	ldr	r3, [sp, #0]
    cf7e:	4298      	cmp	r0, r3
    cf80:	d00e      	beq.n	cfa0 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    cf82:	2002      	movs	r0, #2
    cf84:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    cf86:	9801      	ldr	r0, [sp, #4]
    cf88:	47a8      	blx	r5
    cf8a:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    cf8c:	2c00      	cmp	r4, #0
    cf8e:	d1f5      	bne.n	cf7c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    cf90:	2005      	movs	r0, #5
    cf92:	4240      	negs	r0, r0
    cf94:	e009      	b.n	cfaa <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    cf96:	4b0d      	ldr	r3, [pc, #52]	; (cfcc <wait_for_firmware_start+0x6c>)
    cf98:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    cf9a:	4b0d      	ldr	r3, [pc, #52]	; (cfd0 <wait_for_firmware_start+0x70>)
    cf9c:	9300      	str	r3, [sp, #0]
    cf9e:	e7e8      	b.n	cf72 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    cfa0:	9a00      	ldr	r2, [sp, #0]
    cfa2:	4b07      	ldr	r3, [pc, #28]	; (cfc0 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    cfa4:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    cfa6:	429a      	cmp	r2, r3
    cfa8:	d001      	beq.n	cfae <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    cfaa:	b002      	add	sp, #8
    cfac:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    cfae:	2100      	movs	r1, #0
    cfb0:	4802      	ldr	r0, [pc, #8]	; (cfbc <wait_for_firmware_start+0x5c>)
    cfb2:	4b08      	ldr	r3, [pc, #32]	; (cfd4 <wait_for_firmware_start+0x74>)
    cfb4:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    cfb6:	2000      	movs	r0, #0
    cfb8:	e7f7      	b.n	cfaa <wait_for_firmware_start+0x4a>
    cfba:	46c0      	nop			; (mov r8, r8)
    cfbc:	0000108c 	.word	0x0000108c
    cfc0:	02532636 	.word	0x02532636
    cfc4:	0000b839 	.word	0x0000b839
    cfc8:	0000d089 	.word	0x0000d089
    cfcc:	000207ac 	.word	0x000207ac
    cfd0:	d75dc1c3 	.word	0xd75dc1c3
    cfd4:	0000d0a1 	.word	0x0000d0a1

0000cfd8 <chip_deinit>:

sint8 chip_deinit(void)
{
    cfd8:	b510      	push	{r4, lr}
    cfda:	b082      	sub	sp, #8
	uint32 reg = 0;
    cfdc:	2300      	movs	r3, #0
    cfde:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    cfe0:	a901      	add	r1, sp, #4
    cfe2:	20a0      	movs	r0, #160	; 0xa0
    cfe4:	0140      	lsls	r0, r0, #5
    cfe6:	4b14      	ldr	r3, [pc, #80]	; (d038 <chip_deinit+0x60>)
    cfe8:	4798      	blx	r3
    cfea:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    cfec:	d115      	bne.n	d01a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    cfee:	4913      	ldr	r1, [pc, #76]	; (d03c <chip_deinit+0x64>)
    cff0:	9b01      	ldr	r3, [sp, #4]
    cff2:	4019      	ands	r1, r3
    cff4:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    cff6:	20a0      	movs	r0, #160	; 0xa0
    cff8:	0140      	lsls	r0, r0, #5
    cffa:	4b11      	ldr	r3, [pc, #68]	; (d040 <chip_deinit+0x68>)
    cffc:	4798      	blx	r3
    cffe:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    d000:	d016      	beq.n	d030 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    d002:	4a10      	ldr	r2, [pc, #64]	; (d044 <chip_deinit+0x6c>)
    d004:	4910      	ldr	r1, [pc, #64]	; (d048 <chip_deinit+0x70>)
    d006:	4811      	ldr	r0, [pc, #68]	; (d04c <chip_deinit+0x74>)
    d008:	4b11      	ldr	r3, [pc, #68]	; (d050 <chip_deinit+0x78>)
    d00a:	4798      	blx	r3
    d00c:	4811      	ldr	r0, [pc, #68]	; (d054 <chip_deinit+0x7c>)
    d00e:	4b12      	ldr	r3, [pc, #72]	; (d058 <chip_deinit+0x80>)
    d010:	4798      	blx	r3
    d012:	200d      	movs	r0, #13
    d014:	4b11      	ldr	r3, [pc, #68]	; (d05c <chip_deinit+0x84>)
    d016:	4798      	blx	r3
		goto ERR1;
    d018:	e00a      	b.n	d030 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    d01a:	4a11      	ldr	r2, [pc, #68]	; (d060 <chip_deinit+0x88>)
    d01c:	490a      	ldr	r1, [pc, #40]	; (d048 <chip_deinit+0x70>)
    d01e:	480b      	ldr	r0, [pc, #44]	; (d04c <chip_deinit+0x74>)
    d020:	4b0b      	ldr	r3, [pc, #44]	; (d050 <chip_deinit+0x78>)
    d022:	4798      	blx	r3
    d024:	480b      	ldr	r0, [pc, #44]	; (d054 <chip_deinit+0x7c>)
    d026:	4b0c      	ldr	r3, [pc, #48]	; (d058 <chip_deinit+0x80>)
    d028:	4798      	blx	r3
    d02a:	200d      	movs	r0, #13
    d02c:	4b0b      	ldr	r3, [pc, #44]	; (d05c <chip_deinit+0x84>)
    d02e:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    d030:	0020      	movs	r0, r4
    d032:	b002      	add	sp, #8
    d034:	bd10      	pop	{r4, pc}
    d036:	46c0      	nop			; (mov r8, r8)
    d038:	0000d095 	.word	0x0000d095
    d03c:	fffffbff 	.word	0xfffffbff
    d040:	0000d0a1 	.word	0x0000d0a1
    d044:	00000207 	.word	0x00000207
    d048:	0001ba14 	.word	0x0001ba14
    d04c:	0001b420 	.word	0x0001b420
    d050:	0001916d 	.word	0x0001916d
    d054:	0001ba20 	.word	0x0001ba20
    d058:	00019289 	.word	0x00019289
    d05c:	000191a1 	.word	0x000191a1
    d060:	00000201 	.word	0x00000201

0000d064 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    d064:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    d066:	4b01      	ldr	r3, [pc, #4]	; (d06c <nm_bus_iface_init+0x8>)
    d068:	4798      	blx	r3
	return ret;
}
    d06a:	bd10      	pop	{r4, pc}
    d06c:	0000b8f5 	.word	0x0000b8f5

0000d070 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    d070:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    d072:	4b01      	ldr	r3, [pc, #4]	; (d078 <nm_bus_iface_deinit+0x8>)
    d074:	4798      	blx	r3

	return ret;
}
    d076:	bd10      	pop	{r4, pc}
    d078:	0000bb45 	.word	0x0000bb45

0000d07c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    d07c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    d07e:	4b01      	ldr	r3, [pc, #4]	; (d084 <nm_bus_reset+0x8>)
    d080:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    d082:	bd10      	pop	{r4, pc}
    d084:	0000da25 	.word	0x0000da25

0000d088 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    d088:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    d08a:	4b01      	ldr	r3, [pc, #4]	; (d090 <nm_read_reg+0x8>)
    d08c:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    d08e:	bd10      	pop	{r4, pc}
    d090:	0000da5d 	.word	0x0000da5d

0000d094 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    d094:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    d096:	4b01      	ldr	r3, [pc, #4]	; (d09c <nm_read_reg_with_ret+0x8>)
    d098:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    d09a:	bd10      	pop	{r4, pc}
    d09c:	0000da71 	.word	0x0000da71

0000d0a0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    d0a0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    d0a2:	4b01      	ldr	r3, [pc, #4]	; (d0a8 <nm_write_reg+0x8>)
    d0a4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    d0a6:	bd10      	pop	{r4, pc}
    d0a8:	0000da89 	.word	0x0000da89

0000d0ac <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    d0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0ae:	46d6      	mov	lr, sl
    d0b0:	464f      	mov	r7, r9
    d0b2:	4646      	mov	r6, r8
    d0b4:	b5c0      	push	{r6, r7, lr}
    d0b6:	b082      	sub	sp, #8
    d0b8:	4680      	mov	r8, r0
    d0ba:	4689      	mov	r9, r1
    d0bc:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    d0be:	4b13      	ldr	r3, [pc, #76]	; (d10c <nm_read_block+0x60>)
    d0c0:	881f      	ldrh	r7, [r3, #0]
    d0c2:	3f08      	subs	r7, #8
    d0c4:	b2bb      	uxth	r3, r7
    d0c6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    d0c8:	001e      	movs	r6, r3
    d0ca:	0004      	movs	r4, r0
    d0cc:	429a      	cmp	r2, r3
    d0ce:	d91a      	bls.n	d106 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    d0d0:	4b0f      	ldr	r3, [pc, #60]	; (d110 <nm_read_block+0x64>)
    d0d2:	469a      	mov	sl, r3
    d0d4:	1a37      	subs	r7, r6, r0
    d0d6:	4643      	mov	r3, r8
    d0d8:	1ae1      	subs	r1, r4, r3
    d0da:	4449      	add	r1, r9
    d0dc:	9a01      	ldr	r2, [sp, #4]
    d0de:	0020      	movs	r0, r4
    d0e0:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    d0e2:	2800      	cmp	r0, #0
    d0e4:	d109      	bne.n	d0fa <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    d0e6:	1bad      	subs	r5, r5, r6
    d0e8:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    d0ea:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    d0ec:	42b5      	cmp	r5, r6
    d0ee:	d8f2      	bhi.n	d0d6 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    d0f0:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    d0f2:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    d0f4:	0020      	movs	r0, r4
    d0f6:	4b06      	ldr	r3, [pc, #24]	; (d110 <nm_read_block+0x64>)
    d0f8:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    d0fa:	b002      	add	sp, #8
    d0fc:	bc1c      	pop	{r2, r3, r4}
    d0fe:	4690      	mov	r8, r2
    d100:	4699      	mov	r9, r3
    d102:	46a2      	mov	sl, r4
    d104:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    d106:	2100      	movs	r1, #0
    d108:	e7f2      	b.n	d0f0 <nm_read_block+0x44>
    d10a:	46c0      	nop			; (mov r8, r8)
    d10c:	20000010 	.word	0x20000010
    d110:	0000dbc9 	.word	0x0000dbc9

0000d114 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    d114:	b5f0      	push	{r4, r5, r6, r7, lr}
    d116:	46d6      	mov	lr, sl
    d118:	464f      	mov	r7, r9
    d11a:	4646      	mov	r6, r8
    d11c:	b5c0      	push	{r6, r7, lr}
    d11e:	b082      	sub	sp, #8
    d120:	4680      	mov	r8, r0
    d122:	4689      	mov	r9, r1
    d124:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    d126:	4b13      	ldr	r3, [pc, #76]	; (d174 <nm_write_block+0x60>)
    d128:	881f      	ldrh	r7, [r3, #0]
    d12a:	3f08      	subs	r7, #8
    d12c:	b2bb      	uxth	r3, r7
    d12e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    d130:	001e      	movs	r6, r3
    d132:	0004      	movs	r4, r0
    d134:	429a      	cmp	r2, r3
    d136:	d91a      	bls.n	d16e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    d138:	4b0f      	ldr	r3, [pc, #60]	; (d178 <nm_write_block+0x64>)
    d13a:	469a      	mov	sl, r3
    d13c:	1a37      	subs	r7, r6, r0
    d13e:	4643      	mov	r3, r8
    d140:	1ae1      	subs	r1, r4, r3
    d142:	4449      	add	r1, r9
    d144:	9a01      	ldr	r2, [sp, #4]
    d146:	0020      	movs	r0, r4
    d148:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    d14a:	2800      	cmp	r0, #0
    d14c:	d109      	bne.n	d162 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    d14e:	1bad      	subs	r5, r5, r6
    d150:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    d152:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    d154:	42b5      	cmp	r5, r6
    d156:	d8f2      	bhi.n	d13e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    d158:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    d15a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    d15c:	0020      	movs	r0, r4
    d15e:	4b06      	ldr	r3, [pc, #24]	; (d178 <nm_write_block+0x64>)
    d160:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    d162:	b002      	add	sp, #8
    d164:	bc1c      	pop	{r2, r3, r4}
    d166:	4690      	mov	r8, r2
    d168:	4699      	mov	r9, r3
    d16a:	46a2      	mov	sl, r4
    d16c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    d16e:	2100      	movs	r1, #0
    d170:	e7f2      	b.n	d158 <nm_write_block+0x44>
    d172:	46c0      	nop			; (mov r8, r8)
    d174:	20000010 	.word	0x20000010
    d178:	0000dd25 	.word	0x0000dd25

0000d17c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    d17c:	b570      	push	{r4, r5, r6, lr}
    d17e:	b084      	sub	sp, #16
    d180:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    d182:	2300      	movs	r3, #0
    d184:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    d186:	2208      	movs	r2, #8
    d188:	2100      	movs	r1, #0
    d18a:	a801      	add	r0, sp, #4
    d18c:	4b2d      	ldr	r3, [pc, #180]	; (d244 <nm_get_firmware_full_info+0xc8>)
    d18e:	4798      	blx	r3
	if (pstrRev != NULL)
    d190:	2c00      	cmp	r4, #0
    d192:	d044      	beq.n	d21e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    d194:	2228      	movs	r2, #40	; 0x28
    d196:	2100      	movs	r1, #0
    d198:	0020      	movs	r0, r4
    d19a:	4b2b      	ldr	r3, [pc, #172]	; (d248 <nm_get_firmware_full_info+0xcc>)
    d19c:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    d19e:	a903      	add	r1, sp, #12
    d1a0:	482a      	ldr	r0, [pc, #168]	; (d24c <nm_get_firmware_full_info+0xd0>)
    d1a2:	4b2b      	ldr	r3, [pc, #172]	; (d250 <nm_get_firmware_full_info+0xd4>)
    d1a4:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    d1a6:	2800      	cmp	r0, #0
    d1a8:	d13a      	bne.n	d220 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    d1aa:	9b03      	ldr	r3, [sp, #12]
    d1ac:	2b00      	cmp	r3, #0
    d1ae:	d039      	beq.n	d224 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    d1b0:	20c0      	movs	r0, #192	; 0xc0
    d1b2:	0280      	lsls	r0, r0, #10
    d1b4:	4318      	orrs	r0, r3
    d1b6:	2208      	movs	r2, #8
    d1b8:	a901      	add	r1, sp, #4
    d1ba:	4b26      	ldr	r3, [pc, #152]	; (d254 <nm_get_firmware_full_info+0xd8>)
    d1bc:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    d1be:	2800      	cmp	r0, #0
    d1c0:	d12e      	bne.n	d220 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    d1c2:	9b02      	ldr	r3, [sp, #8]
    d1c4:	0418      	lsls	r0, r3, #16
    d1c6:	0c00      	lsrs	r0, r0, #16
    d1c8:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    d1ca:	d02e      	beq.n	d22a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    d1cc:	23c0      	movs	r3, #192	; 0xc0
    d1ce:	029b      	lsls	r3, r3, #10
    d1d0:	4318      	orrs	r0, r3
    d1d2:	2228      	movs	r2, #40	; 0x28
    d1d4:	0021      	movs	r1, r4
    d1d6:	4b1f      	ldr	r3, [pc, #124]	; (d254 <nm_get_firmware_full_info+0xd8>)
    d1d8:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    d1da:	2800      	cmp	r0, #0
    d1dc:	d120      	bne.n	d220 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    d1de:	7921      	ldrb	r1, [r4, #4]
    d1e0:	0209      	lsls	r1, r1, #8
    d1e2:	79a2      	ldrb	r2, [r4, #6]
    d1e4:	230f      	movs	r3, #15
    d1e6:	401a      	ands	r2, r3
    d1e8:	430a      	orrs	r2, r1
    d1ea:	7961      	ldrb	r1, [r4, #5]
    d1ec:	0109      	lsls	r1, r1, #4
    d1ee:	25ff      	movs	r5, #255	; 0xff
    d1f0:	4029      	ands	r1, r5
    d1f2:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    d1f4:	79e1      	ldrb	r1, [r4, #7]
    d1f6:	0209      	lsls	r1, r1, #8
    d1f8:	7a66      	ldrb	r6, [r4, #9]
    d1fa:	4033      	ands	r3, r6
    d1fc:	430b      	orrs	r3, r1
    d1fe:	7a21      	ldrb	r1, [r4, #8]
    d200:	0109      	lsls	r1, r1, #4
    d202:	400d      	ands	r5, r1
    d204:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    d206:	2a00      	cmp	r2, #0
    d208:	d012      	beq.n	d230 <nm_get_firmware_full_info+0xb4>
    d20a:	2b00      	cmp	r3, #0
    d20c:	d013      	beq.n	d236 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    d20e:	4912      	ldr	r1, [pc, #72]	; (d258 <nm_get_firmware_full_info+0xdc>)
    d210:	428b      	cmp	r3, r1
    d212:	d813      	bhi.n	d23c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    d214:	4b11      	ldr	r3, [pc, #68]	; (d25c <nm_get_firmware_full_info+0xe0>)
    d216:	429a      	cmp	r2, r3
    d218:	d802      	bhi.n	d220 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    d21a:	380d      	subs	r0, #13
    d21c:	e000      	b.n	d220 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    d21e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    d220:	b004      	add	sp, #16
    d222:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    d224:	200c      	movs	r0, #12
    d226:	4240      	negs	r0, r0
    d228:	e7fa      	b.n	d220 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    d22a:	200c      	movs	r0, #12
    d22c:	4240      	negs	r0, r0
    d22e:	e7f7      	b.n	d220 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    d230:	200c      	movs	r0, #12
    d232:	4240      	negs	r0, r0
    d234:	e7f4      	b.n	d220 <nm_get_firmware_full_info+0xa4>
    d236:	200c      	movs	r0, #12
    d238:	4240      	negs	r0, r0
    d23a:	e7f1      	b.n	d220 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    d23c:	200d      	movs	r0, #13
    d23e:	4240      	negs	r0, r0
    d240:	e7ee      	b.n	d220 <nm_get_firmware_full_info+0xa4>
    d242:	46c0      	nop			; (mov r8, r8)
    d244:	0001900b 	.word	0x0001900b
    d248:	0000bbc5 	.word	0x0000bbc5
    d24c:	000c0008 	.word	0x000c0008
    d250:	0000d095 	.word	0x0000d095
    d254:	0000d0ad 	.word	0x0000d0ad
    d258:	00001354 	.word	0x00001354
    d25c:	00001353 	.word	0x00001353

0000d260 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    d260:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    d262:	2800      	cmp	r0, #0
    d264:	d037      	beq.n	d2d6 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    d266:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    d268:	1e6b      	subs	r3, r5, #1
    d26a:	2b03      	cmp	r3, #3
    d26c:	d900      	bls.n	d270 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    d26e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    d270:	2000      	movs	r0, #0
    d272:	4b20      	ldr	r3, [pc, #128]	; (d2f4 <nm_drv_init+0x94>)
    d274:	4798      	blx	r3
    d276:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    d278:	d12f      	bne.n	d2da <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    d27a:	481f      	ldr	r0, [pc, #124]	; (d2f8 <nm_drv_init+0x98>)
    d27c:	4c1f      	ldr	r4, [pc, #124]	; (d2fc <nm_drv_init+0x9c>)
    d27e:	47a0      	blx	r4
    d280:	4b1f      	ldr	r3, [pc, #124]	; (d300 <nm_drv_init+0xa0>)
    d282:	4798      	blx	r3
    d284:	0001      	movs	r1, r0
    d286:	481f      	ldr	r0, [pc, #124]	; (d304 <nm_drv_init+0xa4>)
    d288:	47a0      	blx	r4
    d28a:	200d      	movs	r0, #13
    d28c:	4b1e      	ldr	r3, [pc, #120]	; (d308 <nm_drv_init+0xa8>)
    d28e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    d290:	4b1e      	ldr	r3, [pc, #120]	; (d30c <nm_drv_init+0xac>)
    d292:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    d294:	0028      	movs	r0, r5
    d296:	4b1e      	ldr	r3, [pc, #120]	; (d310 <nm_drv_init+0xb0>)
    d298:	4798      	blx	r3
    d29a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    d29c:	d117      	bne.n	d2ce <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    d29e:	0028      	movs	r0, r5
    d2a0:	4b1c      	ldr	r3, [pc, #112]	; (d314 <nm_drv_init+0xb4>)
    d2a2:	4798      	blx	r3
    d2a4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    d2a6:	d112      	bne.n	d2ce <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    d2a8:	3d02      	subs	r5, #2
    d2aa:	2d01      	cmp	r5, #1
    d2ac:	d911      	bls.n	d2d2 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    d2ae:	4b1a      	ldr	r3, [pc, #104]	; (d318 <nm_drv_init+0xb8>)
    d2b0:	4798      	blx	r3
    d2b2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    d2b4:	d00d      	beq.n	d2d2 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    d2b6:	22a7      	movs	r2, #167	; 0xa7
    d2b8:	0052      	lsls	r2, r2, #1
    d2ba:	4918      	ldr	r1, [pc, #96]	; (d31c <nm_drv_init+0xbc>)
    d2bc:	4818      	ldr	r0, [pc, #96]	; (d320 <nm_drv_init+0xc0>)
    d2be:	4b0f      	ldr	r3, [pc, #60]	; (d2fc <nm_drv_init+0x9c>)
    d2c0:	4798      	blx	r3
    d2c2:	4818      	ldr	r0, [pc, #96]	; (d324 <nm_drv_init+0xc4>)
    d2c4:	4b18      	ldr	r3, [pc, #96]	; (d328 <nm_drv_init+0xc8>)
    d2c6:	4798      	blx	r3
    d2c8:	200d      	movs	r0, #13
    d2ca:	4b0f      	ldr	r3, [pc, #60]	; (d308 <nm_drv_init+0xa8>)
    d2cc:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    d2ce:	4b17      	ldr	r3, [pc, #92]	; (d32c <nm_drv_init+0xcc>)
    d2d0:	4798      	blx	r3
ERR1:
	return ret;
}
    d2d2:	0020      	movs	r0, r4
    d2d4:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    d2d6:	2501      	movs	r5, #1
    d2d8:	e7ca      	b.n	d270 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    d2da:	2290      	movs	r2, #144	; 0x90
    d2dc:	0052      	lsls	r2, r2, #1
    d2de:	490f      	ldr	r1, [pc, #60]	; (d31c <nm_drv_init+0xbc>)
    d2e0:	480f      	ldr	r0, [pc, #60]	; (d320 <nm_drv_init+0xc0>)
    d2e2:	4b06      	ldr	r3, [pc, #24]	; (d2fc <nm_drv_init+0x9c>)
    d2e4:	4798      	blx	r3
    d2e6:	4812      	ldr	r0, [pc, #72]	; (d330 <nm_drv_init+0xd0>)
    d2e8:	4b0f      	ldr	r3, [pc, #60]	; (d328 <nm_drv_init+0xc8>)
    d2ea:	4798      	blx	r3
    d2ec:	200d      	movs	r0, #13
    d2ee:	4b06      	ldr	r3, [pc, #24]	; (d308 <nm_drv_init+0xa8>)
    d2f0:	4798      	blx	r3
		goto ERR1;
    d2f2:	e7ee      	b.n	d2d2 <nm_drv_init+0x72>
    d2f4:	0000d065 	.word	0x0000d065
    d2f8:	0001b7c0 	.word	0x0001b7c0
    d2fc:	0001916d 	.word	0x0001916d
    d300:	0000cc45 	.word	0x0000cc45
    d304:	0001bb3c 	.word	0x0001bb3c
    d308:	000191a1 	.word	0x000191a1
    d30c:	0000daa1 	.word	0x0000daa1
    d310:	0000ce59 	.word	0x0000ce59
    d314:	0000cf61 	.word	0x0000cf61
    d318:	0000cbe9 	.word	0x0000cbe9
    d31c:	0001ba84 	.word	0x0001ba84
    d320:	0001b420 	.word	0x0001b420
    d324:	0001bb00 	.word	0x0001bb00
    d328:	00019289 	.word	0x00019289
    d32c:	0000d071 	.word	0x0000d071
    d330:	0001bb20 	.word	0x0001bb20

0000d334 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    d334:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    d336:	4b1c      	ldr	r3, [pc, #112]	; (d3a8 <nm_drv_deinit+0x74>)
    d338:	4798      	blx	r3
    d33a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    d33c:	d10b      	bne.n	d356 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    d33e:	2000      	movs	r0, #0
    d340:	4b1a      	ldr	r3, [pc, #104]	; (d3ac <nm_drv_deinit+0x78>)
    d342:	4798      	blx	r3
    d344:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    d346:	d114      	bne.n	d372 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    d348:	4b19      	ldr	r3, [pc, #100]	; (d3b0 <nm_drv_deinit+0x7c>)
    d34a:	4798      	blx	r3
    d34c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    d34e:	d11d      	bne.n	d38c <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    d350:	4b18      	ldr	r3, [pc, #96]	; (d3b4 <nm_drv_deinit+0x80>)
    d352:	4798      	blx	r3
    d354:	e00b      	b.n	d36e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    d356:	2266      	movs	r2, #102	; 0x66
    d358:	32ff      	adds	r2, #255	; 0xff
    d35a:	4917      	ldr	r1, [pc, #92]	; (d3b8 <nm_drv_deinit+0x84>)
    d35c:	4817      	ldr	r0, [pc, #92]	; (d3bc <nm_drv_deinit+0x88>)
    d35e:	4b18      	ldr	r3, [pc, #96]	; (d3c0 <nm_drv_deinit+0x8c>)
    d360:	4798      	blx	r3
    d362:	4818      	ldr	r0, [pc, #96]	; (d3c4 <nm_drv_deinit+0x90>)
    d364:	4b18      	ldr	r3, [pc, #96]	; (d3c8 <nm_drv_deinit+0x94>)
    d366:	4798      	blx	r3
    d368:	200d      	movs	r0, #13
    d36a:	4b18      	ldr	r3, [pc, #96]	; (d3cc <nm_drv_deinit+0x98>)
    d36c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    d36e:	0020      	movs	r0, r4
    d370:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    d372:	22b6      	movs	r2, #182	; 0xb6
    d374:	0052      	lsls	r2, r2, #1
    d376:	4910      	ldr	r1, [pc, #64]	; (d3b8 <nm_drv_deinit+0x84>)
    d378:	4810      	ldr	r0, [pc, #64]	; (d3bc <nm_drv_deinit+0x88>)
    d37a:	4b11      	ldr	r3, [pc, #68]	; (d3c0 <nm_drv_deinit+0x8c>)
    d37c:	4798      	blx	r3
    d37e:	4814      	ldr	r0, [pc, #80]	; (d3d0 <nm_drv_deinit+0x9c>)
    d380:	4b11      	ldr	r3, [pc, #68]	; (d3c8 <nm_drv_deinit+0x94>)
    d382:	4798      	blx	r3
    d384:	200d      	movs	r0, #13
    d386:	4b11      	ldr	r3, [pc, #68]	; (d3cc <nm_drv_deinit+0x98>)
    d388:	4798      	blx	r3
		goto ERR1;
    d38a:	e7f0      	b.n	d36e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    d38c:	22b9      	movs	r2, #185	; 0xb9
    d38e:	0052      	lsls	r2, r2, #1
    d390:	4909      	ldr	r1, [pc, #36]	; (d3b8 <nm_drv_deinit+0x84>)
    d392:	480a      	ldr	r0, [pc, #40]	; (d3bc <nm_drv_deinit+0x88>)
    d394:	4b0a      	ldr	r3, [pc, #40]	; (d3c0 <nm_drv_deinit+0x8c>)
    d396:	4798      	blx	r3
    d398:	480e      	ldr	r0, [pc, #56]	; (d3d4 <nm_drv_deinit+0xa0>)
    d39a:	4b0b      	ldr	r3, [pc, #44]	; (d3c8 <nm_drv_deinit+0x94>)
    d39c:	4798      	blx	r3
    d39e:	200d      	movs	r0, #13
    d3a0:	4b0a      	ldr	r3, [pc, #40]	; (d3cc <nm_drv_deinit+0x98>)
    d3a2:	4798      	blx	r3
		goto ERR1;
    d3a4:	e7e3      	b.n	d36e <nm_drv_deinit+0x3a>
    d3a6:	46c0      	nop			; (mov r8, r8)
    d3a8:	0000cfd9 	.word	0x0000cfd9
    d3ac:	0000e901 	.word	0x0000e901
    d3b0:	0000d071 	.word	0x0000d071
    d3b4:	0000da4d 	.word	0x0000da4d
    d3b8:	0001ba90 	.word	0x0001ba90
    d3bc:	0001b420 	.word	0x0001b420
    d3c0:	0001916d 	.word	0x0001916d
    d3c4:	0001baa0 	.word	0x0001baa0
    d3c8:	00019289 	.word	0x00019289
    d3cc:	000191a1 	.word	0x000191a1
    d3d0:	0001bac0 	.word	0x0001bac0
    d3d4:	0001bae4 	.word	0x0001bae4

0000d3d8 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    d3d8:	b500      	push	{lr}
    d3da:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    d3dc:	ab01      	add	r3, sp, #4
    d3de:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    d3e0:	2200      	movs	r2, #0
    d3e2:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    d3e4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d3e6:	0019      	movs	r1, r3
    d3e8:	2003      	movs	r0, #3
    d3ea:	4b02      	ldr	r3, [pc, #8]	; (d3f4 <nmi_spi_write+0x1c>)
    d3ec:	4798      	blx	r3
}
    d3ee:	b005      	add	sp, #20
    d3f0:	bd00      	pop	{pc}
    d3f2:	46c0      	nop			; (mov r8, r8)
    d3f4:	0000b9f9 	.word	0x0000b9f9

0000d3f8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    d3f8:	b570      	push	{r4, r5, r6, lr}
    d3fa:	b084      	sub	sp, #16
    d3fc:	ac08      	add	r4, sp, #32
    d3fe:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    d400:	ac01      	add	r4, sp, #4
    d402:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    d404:	303f      	adds	r0, #63	; 0x3f
    d406:	b2c4      	uxtb	r4, r0
    d408:	2c0e      	cmp	r4, #14
    d40a:	d900      	bls.n	d40e <spi_cmd+0x16>
    d40c:	e084      	b.n	d518 <spi_cmd+0x120>
    d40e:	00a0      	lsls	r0, r4, #2
    d410:	4c4f      	ldr	r4, [pc, #316]	; (d550 <spi_cmd+0x158>)
    d412:	5820      	ldr	r0, [r4, r0]
    d414:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    d416:	ab01      	add	r3, sp, #4
    d418:	0c0a      	lsrs	r2, r1, #16
    d41a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    d41c:	0a0a      	lsrs	r2, r1, #8
    d41e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    d420:	70d9      	strb	r1, [r3, #3]
		len = 5;
    d422:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    d424:	4b4b      	ldr	r3, [pc, #300]	; (d554 <spi_cmd+0x15c>)
    d426:	781b      	ldrb	r3, [r3, #0]
    d428:	2b00      	cmp	r3, #0
    d42a:	d077      	beq.n	d51c <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    d42c:	3901      	subs	r1, #1
    d42e:	b2c9      	uxtb	r1, r1
    d430:	e083      	b.n	d53a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    d432:	0a0b      	lsrs	r3, r1, #8
    d434:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    d436:	2d00      	cmp	r5, #0
    d438:	d107      	bne.n	d44a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    d43a:	aa01      	add	r2, sp, #4
    d43c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    d43e:	ab01      	add	r3, sp, #4
    d440:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    d442:	2200      	movs	r2, #0
    d444:	70da      	strb	r2, [r3, #3]
		len = 5;
    d446:	2105      	movs	r1, #5
		break;
    d448:	e7ec      	b.n	d424 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    d44a:	2280      	movs	r2, #128	; 0x80
    d44c:	4252      	negs	r2, r2
    d44e:	4313      	orrs	r3, r2
    d450:	aa01      	add	r2, sp, #4
    d452:	7053      	strb	r3, [r2, #1]
    d454:	e7f3      	b.n	d43e <spi_cmd+0x46>
		bc[1] = 0x00;
    d456:	ab01      	add	r3, sp, #4
    d458:	2200      	movs	r2, #0
    d45a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    d45c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    d45e:	70da      	strb	r2, [r3, #3]
		len = 5;
    d460:	2105      	movs	r1, #5
		break;
    d462:	e7df      	b.n	d424 <spi_cmd+0x2c>
		bc[1] = 0x00;
    d464:	ab01      	add	r3, sp, #4
    d466:	2200      	movs	r2, #0
    d468:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    d46a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    d46c:	70da      	strb	r2, [r3, #3]
		len = 5;
    d46e:	2105      	movs	r1, #5
		break;
    d470:	e7d8      	b.n	d424 <spi_cmd+0x2c>
		bc[1] = 0xff;
    d472:	ab01      	add	r3, sp, #4
    d474:	22ff      	movs	r2, #255	; 0xff
    d476:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    d478:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    d47a:	70da      	strb	r2, [r3, #3]
		len = 5;
    d47c:	2105      	movs	r1, #5
		break;
    d47e:	e7d1      	b.n	d424 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    d480:	aa01      	add	r2, sp, #4
    d482:	0c08      	lsrs	r0, r1, #16
    d484:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    d486:	0a08      	lsrs	r0, r1, #8
    d488:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    d48a:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    d48c:	0a19      	lsrs	r1, r3, #8
    d48e:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    d490:	7153      	strb	r3, [r2, #5]
		len = 7;
    d492:	2107      	movs	r1, #7
		break;
    d494:	e7c6      	b.n	d424 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    d496:	aa01      	add	r2, sp, #4
    d498:	0c08      	lsrs	r0, r1, #16
    d49a:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    d49c:	0a08      	lsrs	r0, r1, #8
    d49e:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    d4a0:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    d4a2:	0c19      	lsrs	r1, r3, #16
    d4a4:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    d4a6:	0a19      	lsrs	r1, r3, #8
    d4a8:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    d4aa:	7193      	strb	r3, [r2, #6]
		len = 8;
    d4ac:	2108      	movs	r1, #8
		break;
    d4ae:	e7b9      	b.n	d424 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    d4b0:	0a0b      	lsrs	r3, r1, #8
    d4b2:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    d4b4:	2d00      	cmp	r5, #0
    d4b6:	d10c      	bne.n	d4d2 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    d4b8:	a801      	add	r0, sp, #4
    d4ba:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    d4bc:	ab01      	add	r3, sp, #4
    d4be:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    d4c0:	0e11      	lsrs	r1, r2, #24
    d4c2:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    d4c4:	0c11      	lsrs	r1, r2, #16
    d4c6:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    d4c8:	0a11      	lsrs	r1, r2, #8
    d4ca:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    d4cc:	719a      	strb	r2, [r3, #6]
		len = 8;
    d4ce:	2108      	movs	r1, #8
		break;
    d4d0:	e7a8      	b.n	d424 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    d4d2:	2080      	movs	r0, #128	; 0x80
    d4d4:	4240      	negs	r0, r0
    d4d6:	4303      	orrs	r3, r0
    d4d8:	a801      	add	r0, sp, #4
    d4da:	7043      	strb	r3, [r0, #1]
    d4dc:	e7ee      	b.n	d4bc <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    d4de:	ab01      	add	r3, sp, #4
    d4e0:	0c08      	lsrs	r0, r1, #16
    d4e2:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    d4e4:	0a08      	lsrs	r0, r1, #8
    d4e6:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    d4e8:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    d4ea:	0e11      	lsrs	r1, r2, #24
    d4ec:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    d4ee:	0c11      	lsrs	r1, r2, #16
    d4f0:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    d4f2:	0a11      	lsrs	r1, r2, #8
    d4f4:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    d4f6:	71da      	strb	r2, [r3, #7]
		len = 9;
    d4f8:	2109      	movs	r1, #9
		break;
    d4fa:	e793      	b.n	d424 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    d4fc:	2290      	movs	r2, #144	; 0x90
    d4fe:	0052      	lsls	r2, r2, #1
    d500:	4915      	ldr	r1, [pc, #84]	; (d558 <spi_cmd+0x160>)
    d502:	4816      	ldr	r0, [pc, #88]	; (d55c <spi_cmd+0x164>)
    d504:	4b16      	ldr	r3, [pc, #88]	; (d560 <spi_cmd+0x168>)
    d506:	4798      	blx	r3
    d508:	4816      	ldr	r0, [pc, #88]	; (d564 <spi_cmd+0x16c>)
    d50a:	4b17      	ldr	r3, [pc, #92]	; (d568 <spi_cmd+0x170>)
    d50c:	4798      	blx	r3
    d50e:	200d      	movs	r0, #13
    d510:	4b16      	ldr	r3, [pc, #88]	; (d56c <spi_cmd+0x174>)
    d512:	4798      	blx	r3
			result = N_FAIL;
    d514:	2300      	movs	r3, #0
    d516:	e017      	b.n	d548 <spi_cmd+0x150>
	switch (cmd) {
    d518:	2300      	movs	r3, #0
    d51a:	e015      	b.n	d548 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    d51c:	1e4e      	subs	r6, r1, #1
    d51e:	aa01      	add	r2, sp, #4
    d520:	1995      	adds	r5, r2, r6
    d522:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    d524:	4c12      	ldr	r4, [pc, #72]	; (d570 <spi_cmd+0x178>)
    d526:	005b      	lsls	r3, r3, #1
    d528:	7810      	ldrb	r0, [r2, #0]
    d52a:	4043      	eors	r3, r0
    d52c:	5ce3      	ldrb	r3, [r4, r3]
    d52e:	3201      	adds	r2, #1
	while (len--)
    d530:	42aa      	cmp	r2, r5
    d532:	d1f8      	bne.n	d526 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    d534:	005b      	lsls	r3, r3, #1
    d536:	aa01      	add	r2, sp, #4
    d538:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    d53a:	b289      	uxth	r1, r1
    d53c:	a801      	add	r0, sp, #4
    d53e:	4b0d      	ldr	r3, [pc, #52]	; (d574 <spi_cmd+0x17c>)
    d540:	4798      	blx	r3
    d542:	2301      	movs	r3, #1
    d544:	2800      	cmp	r0, #0
    d546:	d1d9      	bne.n	d4fc <spi_cmd+0x104>
		}
	}

	return result;
}
    d548:	0018      	movs	r0, r3
    d54a:	b004      	add	sp, #16
    d54c:	bd70      	pop	{r4, r5, r6, pc}
    d54e:	46c0      	nop			; (mov r8, r8)
    d550:	0001bb4c 	.word	0x0001bb4c
    d554:	20000500 	.word	0x20000500
    d558:	0001bb8c 	.word	0x0001bb8c
    d55c:	0001b420 	.word	0x0001b420
    d560:	0001916d 	.word	0x0001916d
    d564:	0001c01c 	.word	0x0001c01c
    d568:	00019289 	.word	0x00019289
    d56c:	000191a1 	.word	0x000191a1
    d570:	0001bc18 	.word	0x0001bc18
    d574:	0000d3d9 	.word	0x0000d3d9

0000d578 <nmi_spi_read>:
{
    d578:	b500      	push	{lr}
    d57a:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    d57c:	ab01      	add	r3, sp, #4
    d57e:	2200      	movs	r2, #0
    d580:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    d582:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    d584:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    d586:	0019      	movs	r1, r3
    d588:	2003      	movs	r0, #3
    d58a:	4b02      	ldr	r3, [pc, #8]	; (d594 <nmi_spi_read+0x1c>)
    d58c:	4798      	blx	r3
}
    d58e:	b005      	add	sp, #20
    d590:	bd00      	pop	{pc}
    d592:	46c0      	nop			; (mov r8, r8)
    d594:	0000b9f9 	.word	0x0000b9f9

0000d598 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    d598:	b5f0      	push	{r4, r5, r6, r7, lr}
    d59a:	46c6      	mov	lr, r8
    d59c:	b500      	push	{lr}
    d59e:	b082      	sub	sp, #8
    d5a0:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    d5a2:	28cf      	cmp	r0, #207	; 0xcf
    d5a4:	d02b      	beq.n	d5fe <spi_cmd_rsp+0x66>
    d5a6:	0003      	movs	r3, r0
    d5a8:	333b      	adds	r3, #59	; 0x3b
    d5aa:	b2db      	uxtb	r3, r3
    d5ac:	2b01      	cmp	r3, #1
    d5ae:	d926      	bls.n	d5fe <spi_cmd_rsp+0x66>
{
    d5b0:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d5b2:	466b      	mov	r3, sp
    d5b4:	1dde      	adds	r6, r3, #7
    d5b6:	4b26      	ldr	r3, [pc, #152]	; (d650 <spi_cmd_rsp+0xb8>)
    d5b8:	4698      	mov	r8, r3
    d5ba:	2101      	movs	r1, #1
    d5bc:	0030      	movs	r0, r6
    d5be:	47c0      	blx	r8
    d5c0:	1e05      	subs	r5, r0, #0
    d5c2:	d125      	bne.n	d610 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    d5c4:	7833      	ldrb	r3, [r6, #0]
    d5c6:	42bb      	cmp	r3, r7
    d5c8:	d030      	beq.n	d62c <spi_cmd_rsp+0x94>
    d5ca:	3c01      	subs	r4, #1
    d5cc:	b2e4      	uxtb	r4, r4
    d5ce:	2c00      	cmp	r4, #0
    d5d0:	d1f3      	bne.n	d5ba <spi_cmd_rsp+0x22>
    d5d2:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d5d4:	466b      	mov	r3, sp
    d5d6:	1dde      	adds	r6, r3, #7
    d5d8:	4f1d      	ldr	r7, [pc, #116]	; (d650 <spi_cmd_rsp+0xb8>)
    d5da:	2101      	movs	r1, #1
    d5dc:	0030      	movs	r0, r6
    d5de:	47b8      	blx	r7
    d5e0:	2800      	cmp	r0, #0
    d5e2:	d125      	bne.n	d630 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    d5e4:	7833      	ldrb	r3, [r6, #0]
    d5e6:	2b00      	cmp	r3, #0
    d5e8:	d02f      	beq.n	d64a <spi_cmd_rsp+0xb2>
    d5ea:	3c01      	subs	r4, #1
    d5ec:	b2e4      	uxtb	r4, r4
    d5ee:	2c00      	cmp	r4, #0
    d5f0:	d1f3      	bne.n	d5da <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    d5f2:	2501      	movs	r5, #1

_fail_:

	return result;
}
    d5f4:	0028      	movs	r0, r5
    d5f6:	b002      	add	sp, #8
    d5f8:	bc04      	pop	{r2}
    d5fa:	4690      	mov	r8, r2
    d5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d5fe:	2101      	movs	r1, #1
    d600:	466b      	mov	r3, sp
    d602:	1dd8      	adds	r0, r3, #7
    d604:	4b12      	ldr	r3, [pc, #72]	; (d650 <spi_cmd_rsp+0xb8>)
    d606:	4798      	blx	r3
			result = N_FAIL;
    d608:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d60a:	2800      	cmp	r0, #0
    d60c:	d0d0      	beq.n	d5b0 <spi_cmd_rsp+0x18>
    d60e:	e7f1      	b.n	d5f4 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    d610:	225c      	movs	r2, #92	; 0x5c
    d612:	32ff      	adds	r2, #255	; 0xff
    d614:	490f      	ldr	r1, [pc, #60]	; (d654 <spi_cmd_rsp+0xbc>)
    d616:	4810      	ldr	r0, [pc, #64]	; (d658 <spi_cmd_rsp+0xc0>)
    d618:	4b10      	ldr	r3, [pc, #64]	; (d65c <spi_cmd_rsp+0xc4>)
    d61a:	4798      	blx	r3
    d61c:	4810      	ldr	r0, [pc, #64]	; (d660 <spi_cmd_rsp+0xc8>)
    d61e:	4b11      	ldr	r3, [pc, #68]	; (d664 <spi_cmd_rsp+0xcc>)
    d620:	4798      	blx	r3
    d622:	200d      	movs	r0, #13
    d624:	4b10      	ldr	r3, [pc, #64]	; (d668 <spi_cmd_rsp+0xd0>)
    d626:	4798      	blx	r3
			result = N_FAIL;
    d628:	2500      	movs	r5, #0
			goto _fail_;
    d62a:	e7e3      	b.n	d5f4 <spi_cmd_rsp+0x5c>
    d62c:	240b      	movs	r4, #11
    d62e:	e7d1      	b.n	d5d4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    d630:	226a      	movs	r2, #106	; 0x6a
    d632:	32ff      	adds	r2, #255	; 0xff
    d634:	4907      	ldr	r1, [pc, #28]	; (d654 <spi_cmd_rsp+0xbc>)
    d636:	4808      	ldr	r0, [pc, #32]	; (d658 <spi_cmd_rsp+0xc0>)
    d638:	4b08      	ldr	r3, [pc, #32]	; (d65c <spi_cmd_rsp+0xc4>)
    d63a:	4798      	blx	r3
    d63c:	4808      	ldr	r0, [pc, #32]	; (d660 <spi_cmd_rsp+0xc8>)
    d63e:	4b09      	ldr	r3, [pc, #36]	; (d664 <spi_cmd_rsp+0xcc>)
    d640:	4798      	blx	r3
    d642:	200d      	movs	r0, #13
    d644:	4b08      	ldr	r3, [pc, #32]	; (d668 <spi_cmd_rsp+0xd0>)
    d646:	4798      	blx	r3
			goto _fail_;
    d648:	e7d4      	b.n	d5f4 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    d64a:	2501      	movs	r5, #1
    d64c:	e7d2      	b.n	d5f4 <spi_cmd_rsp+0x5c>
    d64e:	46c0      	nop			; (mov r8, r8)
    d650:	0000d579 	.word	0x0000d579
    d654:	0001bba4 	.word	0x0001bba4
    d658:	0001b420 	.word	0x0001b420
    d65c:	0001916d 	.word	0x0001916d
    d660:	0001c048 	.word	0x0001c048
    d664:	00019289 	.word	0x00019289
    d668:	000191a1 	.word	0x000191a1

0000d66c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    d66c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d66e:	46de      	mov	lr, fp
    d670:	4657      	mov	r7, sl
    d672:	464e      	mov	r6, r9
    d674:	4645      	mov	r5, r8
    d676:	b5e0      	push	{r5, r6, r7, lr}
    d678:	b087      	sub	sp, #28
    d67a:	9001      	str	r0, [sp, #4]
    d67c:	4689      	mov	r9, r1
    d67e:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    d680:	2300      	movs	r3, #0
    d682:	469a      	mov	sl, r3
    d684:	2380      	movs	r3, #128	; 0x80
    d686:	019b      	lsls	r3, r3, #6
    d688:	469b      	mov	fp, r3
    d68a:	466a      	mov	r2, sp
    d68c:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d68e:	4b3c      	ldr	r3, [pc, #240]	; (d780 <spi_data_read+0x114>)
    d690:	4698      	mov	r8, r3
    d692:	e02f      	b.n	d6f4 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    d694:	22be      	movs	r2, #190	; 0xbe
    d696:	0092      	lsls	r2, r2, #2
    d698:	493a      	ldr	r1, [pc, #232]	; (d784 <spi_data_read+0x118>)
    d69a:	483b      	ldr	r0, [pc, #236]	; (d788 <spi_data_read+0x11c>)
    d69c:	4b3b      	ldr	r3, [pc, #236]	; (d78c <spi_data_read+0x120>)
    d69e:	4798      	blx	r3
    d6a0:	483b      	ldr	r0, [pc, #236]	; (d790 <spi_data_read+0x124>)
    d6a2:	4b3c      	ldr	r3, [pc, #240]	; (d794 <spi_data_read+0x128>)
    d6a4:	4798      	blx	r3
    d6a6:	200d      	movs	r0, #13
    d6a8:	4b3b      	ldr	r3, [pc, #236]	; (d798 <spi_data_read+0x12c>)
    d6aa:	4798      	blx	r3
    d6ac:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    d6ae:	0028      	movs	r0, r5
    d6b0:	b007      	add	sp, #28
    d6b2:	bc3c      	pop	{r2, r3, r4, r5}
    d6b4:	4690      	mov	r8, r2
    d6b6:	4699      	mov	r9, r3
    d6b8:	46a2      	mov	sl, r4
    d6ba:	46ab      	mov	fp, r5
    d6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    d6be:	2c00      	cmp	r4, #0
    d6c0:	dd2e      	ble.n	d720 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    d6c2:	9b01      	ldr	r3, [sp, #4]
    d6c4:	4453      	add	r3, sl
    d6c6:	0018      	movs	r0, r3
    d6c8:	0039      	movs	r1, r7
    d6ca:	4b2d      	ldr	r3, [pc, #180]	; (d780 <spi_data_read+0x114>)
    d6cc:	4798      	blx	r3
    d6ce:	1e04      	subs	r4, r0, #0
    d6d0:	d134      	bne.n	d73c <spi_data_read+0xd0>
		if(!clockless)
    d6d2:	9b02      	ldr	r3, [sp, #8]
    d6d4:	2b00      	cmp	r3, #0
    d6d6:	d103      	bne.n	d6e0 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    d6d8:	4b30      	ldr	r3, [pc, #192]	; (d79c <spi_data_read+0x130>)
    d6da:	781b      	ldrb	r3, [r3, #0]
    d6dc:	2b00      	cmp	r3, #0
    d6de:	d039      	beq.n	d754 <spi_data_read+0xe8>
		ix += nbytes;
    d6e0:	4653      	mov	r3, sl
    d6e2:	18fb      	adds	r3, r7, r3
    d6e4:	b21b      	sxth	r3, r3
    d6e6:	469a      	mov	sl, r3
		sz -= nbytes;
    d6e8:	464b      	mov	r3, r9
    d6ea:	1bdf      	subs	r7, r3, r7
    d6ec:	b2bb      	uxth	r3, r7
    d6ee:	4699      	mov	r9, r3
	} while (sz);
    d6f0:	2b00      	cmp	r3, #0
    d6f2:	d043      	beq.n	d77c <spi_data_read+0x110>
    d6f4:	464f      	mov	r7, r9
    d6f6:	45d9      	cmp	r9, fp
    d6f8:	d901      	bls.n	d6fe <spi_data_read+0x92>
    d6fa:	466b      	mov	r3, sp
    d6fc:	89df      	ldrh	r7, [r3, #14]
    d6fe:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    d700:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    d702:	ab04      	add	r3, sp, #16
    d704:	1cde      	adds	r6, r3, #3
    d706:	2101      	movs	r1, #1
    d708:	0030      	movs	r0, r6
    d70a:	47c0      	blx	r8
    d70c:	1e05      	subs	r5, r0, #0
    d70e:	d1c1      	bne.n	d694 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    d710:	7833      	ldrb	r3, [r6, #0]
    d712:	091b      	lsrs	r3, r3, #4
    d714:	2b0f      	cmp	r3, #15
    d716:	d0d2      	beq.n	d6be <spi_data_read+0x52>
    d718:	3c01      	subs	r4, #1
    d71a:	b224      	sxth	r4, r4
		} while (retry--);
    d71c:	1c63      	adds	r3, r4, #1
    d71e:	d1f2      	bne.n	d706 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    d720:	22c1      	movs	r2, #193	; 0xc1
    d722:	0092      	lsls	r2, r2, #2
    d724:	4917      	ldr	r1, [pc, #92]	; (d784 <spi_data_read+0x118>)
    d726:	4818      	ldr	r0, [pc, #96]	; (d788 <spi_data_read+0x11c>)
    d728:	4c18      	ldr	r4, [pc, #96]	; (d78c <spi_data_read+0x120>)
    d72a:	47a0      	blx	r4
    d72c:	ab04      	add	r3, sp, #16
    d72e:	78d9      	ldrb	r1, [r3, #3]
    d730:	481b      	ldr	r0, [pc, #108]	; (d7a0 <spi_data_read+0x134>)
    d732:	47a0      	blx	r4
    d734:	200d      	movs	r0, #13
    d736:	4b18      	ldr	r3, [pc, #96]	; (d798 <spi_data_read+0x12c>)
    d738:	4798      	blx	r3
			break;
    d73a:	e7b8      	b.n	d6ae <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    d73c:	4a19      	ldr	r2, [pc, #100]	; (d7a4 <spi_data_read+0x138>)
    d73e:	4911      	ldr	r1, [pc, #68]	; (d784 <spi_data_read+0x118>)
    d740:	4811      	ldr	r0, [pc, #68]	; (d788 <spi_data_read+0x11c>)
    d742:	4b12      	ldr	r3, [pc, #72]	; (d78c <spi_data_read+0x120>)
    d744:	4798      	blx	r3
    d746:	4818      	ldr	r0, [pc, #96]	; (d7a8 <spi_data_read+0x13c>)
    d748:	4b12      	ldr	r3, [pc, #72]	; (d794 <spi_data_read+0x128>)
    d74a:	4798      	blx	r3
    d74c:	200d      	movs	r0, #13
    d74e:	4b12      	ldr	r3, [pc, #72]	; (d798 <spi_data_read+0x12c>)
    d750:	4798      	blx	r3
			break;
    d752:	e7ac      	b.n	d6ae <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    d754:	2102      	movs	r1, #2
    d756:	a805      	add	r0, sp, #20
    d758:	4b09      	ldr	r3, [pc, #36]	; (d780 <spi_data_read+0x114>)
    d75a:	4798      	blx	r3
    d75c:	2800      	cmp	r0, #0
    d75e:	d0bf      	beq.n	d6e0 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    d760:	22c6      	movs	r2, #198	; 0xc6
    d762:	0092      	lsls	r2, r2, #2
    d764:	4907      	ldr	r1, [pc, #28]	; (d784 <spi_data_read+0x118>)
    d766:	4808      	ldr	r0, [pc, #32]	; (d788 <spi_data_read+0x11c>)
    d768:	4b08      	ldr	r3, [pc, #32]	; (d78c <spi_data_read+0x120>)
    d76a:	4798      	blx	r3
    d76c:	480f      	ldr	r0, [pc, #60]	; (d7ac <spi_data_read+0x140>)
    d76e:	4b09      	ldr	r3, [pc, #36]	; (d794 <spi_data_read+0x128>)
    d770:	4798      	blx	r3
    d772:	200d      	movs	r0, #13
    d774:	4b08      	ldr	r3, [pc, #32]	; (d798 <spi_data_read+0x12c>)
    d776:	4798      	blx	r3
					result = N_FAIL;
    d778:	0025      	movs	r5, r4
					break;
    d77a:	e798      	b.n	d6ae <spi_data_read+0x42>
    d77c:	2501      	movs	r5, #1
    d77e:	e796      	b.n	d6ae <spi_data_read+0x42>
    d780:	0000d579 	.word	0x0000d579
    d784:	0001bbb0 	.word	0x0001bbb0
    d788:	0001b420 	.word	0x0001b420
    d78c:	0001916d 	.word	0x0001916d
    d790:	0001c07c 	.word	0x0001c07c
    d794:	00019289 	.word	0x00019289
    d798:	000191a1 	.word	0x000191a1
    d79c:	20000500 	.word	0x20000500
    d7a0:	0001c0b0 	.word	0x0001c0b0
    d7a4:	0000030d 	.word	0x0000030d
    d7a8:	0001c0e0 	.word	0x0001c0e0
    d7ac:	0001c110 	.word	0x0001c110

0000d7b0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    d7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7b2:	46d6      	mov	lr, sl
    d7b4:	464f      	mov	r7, r9
    d7b6:	4646      	mov	r6, r8
    d7b8:	b5c0      	push	{r6, r7, lr}
    d7ba:	b086      	sub	sp, #24
    d7bc:	9003      	str	r0, [sp, #12]
    d7be:	9104      	str	r1, [sp, #16]
    d7c0:	2830      	cmp	r0, #48	; 0x30
    d7c2:	d80f      	bhi.n	d7e4 <spi_write_reg+0x34>
    d7c4:	4b30      	ldr	r3, [pc, #192]	; (d888 <spi_write_reg+0xd8>)
    d7c6:	781f      	ldrb	r7, [r3, #0]
    d7c8:	b2fb      	uxtb	r3, r7
    d7ca:	9305      	str	r3, [sp, #20]
    d7cc:	2300      	movs	r3, #0
    d7ce:	2230      	movs	r2, #48	; 0x30
    d7d0:	9903      	ldr	r1, [sp, #12]
    d7d2:	428a      	cmp	r2, r1
    d7d4:	415b      	adcs	r3, r3
    d7d6:	b2db      	uxtb	r3, r3
    d7d8:	469a      	mov	sl, r3
    d7da:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    d7dc:	4b2b      	ldr	r3, [pc, #172]	; (d88c <spi_write_reg+0xdc>)
    d7de:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    d7e0:	46d1      	mov	r9, sl
    d7e2:	e033      	b.n	d84c <spi_write_reg+0x9c>
    d7e4:	4b2a      	ldr	r3, [pc, #168]	; (d890 <spi_write_reg+0xe0>)
    d7e6:	781f      	ldrb	r7, [r3, #0]
    d7e8:	e7ee      	b.n	d7c8 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    d7ea:	9805      	ldr	r0, [sp, #20]
    d7ec:	4b29      	ldr	r3, [pc, #164]	; (d894 <spi_write_reg+0xe4>)
    d7ee:	4798      	blx	r3
    d7f0:	0004      	movs	r4, r0
	if (result != N_OK) {
    d7f2:	2801      	cmp	r0, #1
    d7f4:	d041      	beq.n	d87a <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    d7f6:	4a28      	ldr	r2, [pc, #160]	; (d898 <spi_write_reg+0xe8>)
    d7f8:	4928      	ldr	r1, [pc, #160]	; (d89c <spi_write_reg+0xec>)
    d7fa:	4829      	ldr	r0, [pc, #164]	; (d8a0 <spi_write_reg+0xf0>)
    d7fc:	4e29      	ldr	r6, [pc, #164]	; (d8a4 <spi_write_reg+0xf4>)
    d7fe:	47b0      	blx	r6
    d800:	9903      	ldr	r1, [sp, #12]
    d802:	4829      	ldr	r0, [pc, #164]	; (d8a8 <spi_write_reg+0xf8>)
    d804:	47b0      	blx	r6
    d806:	200d      	movs	r0, #13
    d808:	4b28      	ldr	r3, [pc, #160]	; (d8ac <spi_write_reg+0xfc>)
    d80a:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    d80c:	2001      	movs	r0, #1
    d80e:	4e28      	ldr	r6, [pc, #160]	; (d8b0 <spi_write_reg+0x100>)
    d810:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d812:	2300      	movs	r3, #0
    d814:	9300      	str	r3, [sp, #0]
    d816:	2200      	movs	r2, #0
    d818:	2100      	movs	r1, #0
    d81a:	20cf      	movs	r0, #207	; 0xcf
    d81c:	4f1b      	ldr	r7, [pc, #108]	; (d88c <spi_write_reg+0xdc>)
    d81e:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    d820:	20cf      	movs	r0, #207	; 0xcf
    d822:	4b1c      	ldr	r3, [pc, #112]	; (d894 <spi_write_reg+0xe4>)
    d824:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    d826:	22ea      	movs	r2, #234	; 0xea
    d828:	0092      	lsls	r2, r2, #2
    d82a:	491c      	ldr	r1, [pc, #112]	; (d89c <spi_write_reg+0xec>)
    d82c:	481c      	ldr	r0, [pc, #112]	; (d8a0 <spi_write_reg+0xf0>)
    d82e:	4f1d      	ldr	r7, [pc, #116]	; (d8a4 <spi_write_reg+0xf4>)
    d830:	47b8      	blx	r7
    d832:	9b04      	ldr	r3, [sp, #16]
    d834:	9a03      	ldr	r2, [sp, #12]
    d836:	0029      	movs	r1, r5
    d838:	481e      	ldr	r0, [pc, #120]	; (d8b4 <spi_write_reg+0x104>)
    d83a:	47b8      	blx	r7
    d83c:	200d      	movs	r0, #13
    d83e:	4b1b      	ldr	r3, [pc, #108]	; (d8ac <spi_write_reg+0xfc>)
    d840:	4798      	blx	r3
		nm_bsp_sleep(1);
    d842:	2001      	movs	r0, #1
    d844:	47b0      	blx	r6
    d846:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    d848:	2d00      	cmp	r5, #0
    d84a:	d016      	beq.n	d87a <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    d84c:	464b      	mov	r3, r9
    d84e:	9300      	str	r3, [sp, #0]
    d850:	2304      	movs	r3, #4
    d852:	9a04      	ldr	r2, [sp, #16]
    d854:	9f03      	ldr	r7, [sp, #12]
    d856:	0039      	movs	r1, r7
    d858:	9805      	ldr	r0, [sp, #20]
    d85a:	47c0      	blx	r8
    d85c:	0004      	movs	r4, r0
	if (result != N_OK) {
    d85e:	2801      	cmp	r0, #1
    d860:	d0c3      	beq.n	d7ea <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    d862:	4a15      	ldr	r2, [pc, #84]	; (d8b8 <spi_write_reg+0x108>)
    d864:	490d      	ldr	r1, [pc, #52]	; (d89c <spi_write_reg+0xec>)
    d866:	480e      	ldr	r0, [pc, #56]	; (d8a0 <spi_write_reg+0xf0>)
    d868:	4e0e      	ldr	r6, [pc, #56]	; (d8a4 <spi_write_reg+0xf4>)
    d86a:	47b0      	blx	r6
    d86c:	0039      	movs	r1, r7
    d86e:	4813      	ldr	r0, [pc, #76]	; (d8bc <spi_write_reg+0x10c>)
    d870:	47b0      	blx	r6
    d872:	200d      	movs	r0, #13
    d874:	4b0d      	ldr	r3, [pc, #52]	; (d8ac <spi_write_reg+0xfc>)
    d876:	4798      	blx	r3
		goto _FAIL_;
    d878:	e7c8      	b.n	d80c <spi_write_reg+0x5c>
	}

	return result;
}
    d87a:	0020      	movs	r0, r4
    d87c:	b006      	add	sp, #24
    d87e:	bc1c      	pop	{r2, r3, r4}
    d880:	4690      	mov	r8, r2
    d882:	4699      	mov	r9, r3
    d884:	46a2      	mov	sl, r4
    d886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d888:	0001bb88 	.word	0x0001bb88
    d88c:	0000d3f9 	.word	0x0000d3f9
    d890:	0001bb89 	.word	0x0001bb89
    d894:	0000d599 	.word	0x0000d599
    d898:	00000395 	.word	0x00000395
    d89c:	0001bbd0 	.word	0x0001bbd0
    d8a0:	0001b420 	.word	0x0001b420
    d8a4:	0001916d 	.word	0x0001916d
    d8a8:	0001c208 	.word	0x0001c208
    d8ac:	000191a1 	.word	0x000191a1
    d8b0:	0000b839 	.word	0x0000b839
    d8b4:	0001c240 	.word	0x0001c240
    d8b8:	0000038f 	.word	0x0000038f
    d8bc:	0001c1dc 	.word	0x0001c1dc

0000d8c0 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    d8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8c2:	46de      	mov	lr, fp
    d8c4:	4657      	mov	r7, sl
    d8c6:	464e      	mov	r6, r9
    d8c8:	4645      	mov	r5, r8
    d8ca:	b5e0      	push	{r5, r6, r7, lr}
    d8cc:	b087      	sub	sp, #28
    d8ce:	9002      	str	r0, [sp, #8]
    d8d0:	468b      	mov	fp, r1
    d8d2:	28ff      	cmp	r0, #255	; 0xff
    d8d4:	d80f      	bhi.n	d8f6 <spi_read_reg+0x36>
    d8d6:	4b41      	ldr	r3, [pc, #260]	; (d9dc <spi_read_reg+0x11c>)
    d8d8:	781f      	ldrb	r7, [r3, #0]
    d8da:	b2fb      	uxtb	r3, r7
    d8dc:	9303      	str	r3, [sp, #12]
    d8de:	2300      	movs	r3, #0
    d8e0:	22ff      	movs	r2, #255	; 0xff
    d8e2:	9902      	ldr	r1, [sp, #8]
    d8e4:	428a      	cmp	r2, r1
    d8e6:	415b      	adcs	r3, r3
    d8e8:	b2db      	uxtb	r3, r3
    d8ea:	469a      	mov	sl, r3
    d8ec:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    d8ee:	4b3c      	ldr	r3, [pc, #240]	; (d9e0 <spi_read_reg+0x120>)
    d8f0:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    d8f2:	46d1      	mov	r9, sl
    d8f4:	e031      	b.n	d95a <spi_read_reg+0x9a>
    d8f6:	4b3b      	ldr	r3, [pc, #236]	; (d9e4 <spi_read_reg+0x124>)
    d8f8:	781f      	ldrb	r7, [r3, #0]
    d8fa:	e7ee      	b.n	d8da <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    d8fc:	9803      	ldr	r0, [sp, #12]
    d8fe:	4b3a      	ldr	r3, [pc, #232]	; (d9e8 <spi_read_reg+0x128>)
    d900:	4798      	blx	r3
    d902:	0004      	movs	r4, r0
	if (result != N_OK) {
    d904:	2801      	cmp	r0, #1
    d906:	d040      	beq.n	d98a <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    d908:	4a38      	ldr	r2, [pc, #224]	; (d9ec <spi_read_reg+0x12c>)
    d90a:	4939      	ldr	r1, [pc, #228]	; (d9f0 <spi_read_reg+0x130>)
    d90c:	4839      	ldr	r0, [pc, #228]	; (d9f4 <spi_read_reg+0x134>)
    d90e:	4e3a      	ldr	r6, [pc, #232]	; (d9f8 <spi_read_reg+0x138>)
    d910:	47b0      	blx	r6
    d912:	9902      	ldr	r1, [sp, #8]
    d914:	4839      	ldr	r0, [pc, #228]	; (d9fc <spi_read_reg+0x13c>)
    d916:	47b0      	blx	r6
    d918:	200d      	movs	r0, #13
    d91a:	4b39      	ldr	r3, [pc, #228]	; (da00 <spi_read_reg+0x140>)
    d91c:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    d91e:	2001      	movs	r0, #1
    d920:	4e38      	ldr	r6, [pc, #224]	; (da04 <spi_read_reg+0x144>)
    d922:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d924:	2300      	movs	r3, #0
    d926:	9300      	str	r3, [sp, #0]
    d928:	2200      	movs	r2, #0
    d92a:	2100      	movs	r1, #0
    d92c:	20cf      	movs	r0, #207	; 0xcf
    d92e:	4f2c      	ldr	r7, [pc, #176]	; (d9e0 <spi_read_reg+0x120>)
    d930:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    d932:	20cf      	movs	r0, #207	; 0xcf
    d934:	4b2c      	ldr	r3, [pc, #176]	; (d9e8 <spi_read_reg+0x128>)
    d936:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    d938:	4a33      	ldr	r2, [pc, #204]	; (da08 <spi_read_reg+0x148>)
    d93a:	492d      	ldr	r1, [pc, #180]	; (d9f0 <spi_read_reg+0x130>)
    d93c:	482d      	ldr	r0, [pc, #180]	; (d9f4 <spi_read_reg+0x134>)
    d93e:	4f2e      	ldr	r7, [pc, #184]	; (d9f8 <spi_read_reg+0x138>)
    d940:	47b8      	blx	r7
    d942:	9a02      	ldr	r2, [sp, #8]
    d944:	0029      	movs	r1, r5
    d946:	4831      	ldr	r0, [pc, #196]	; (da0c <spi_read_reg+0x14c>)
    d948:	47b8      	blx	r7
    d94a:	200d      	movs	r0, #13
    d94c:	4b2c      	ldr	r3, [pc, #176]	; (da00 <spi_read_reg+0x140>)
    d94e:	4798      	blx	r3
		nm_bsp_sleep(1);
    d950:	2001      	movs	r0, #1
    d952:	47b0      	blx	r6
    d954:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    d956:	2d00      	cmp	r5, #0
    d958:	d038      	beq.n	d9cc <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    d95a:	464b      	mov	r3, r9
    d95c:	9300      	str	r3, [sp, #0]
    d95e:	2304      	movs	r3, #4
    d960:	2200      	movs	r2, #0
    d962:	9f02      	ldr	r7, [sp, #8]
    d964:	0039      	movs	r1, r7
    d966:	9803      	ldr	r0, [sp, #12]
    d968:	47c0      	blx	r8
    d96a:	0004      	movs	r4, r0
	if (result != N_OK) {
    d96c:	2801      	cmp	r0, #1
    d96e:	d0c5      	beq.n	d8fc <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    d970:	2282      	movs	r2, #130	; 0x82
    d972:	00d2      	lsls	r2, r2, #3
    d974:	491e      	ldr	r1, [pc, #120]	; (d9f0 <spi_read_reg+0x130>)
    d976:	481f      	ldr	r0, [pc, #124]	; (d9f4 <spi_read_reg+0x134>)
    d978:	4e1f      	ldr	r6, [pc, #124]	; (d9f8 <spi_read_reg+0x138>)
    d97a:	47b0      	blx	r6
    d97c:	0039      	movs	r1, r7
    d97e:	4824      	ldr	r0, [pc, #144]	; (da10 <spi_read_reg+0x150>)
    d980:	47b0      	blx	r6
    d982:	200d      	movs	r0, #13
    d984:	4b1e      	ldr	r3, [pc, #120]	; (da00 <spi_read_reg+0x140>)
    d986:	4798      	blx	r3
		goto _FAIL_;
    d988:	e7c9      	b.n	d91e <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    d98a:	464a      	mov	r2, r9
    d98c:	2104      	movs	r1, #4
    d98e:	a805      	add	r0, sp, #20
    d990:	4b20      	ldr	r3, [pc, #128]	; (da14 <spi_read_reg+0x154>)
    d992:	4798      	blx	r3
    d994:	0004      	movs	r4, r0
	if (result != N_OK) {
    d996:	2801      	cmp	r0, #1
    d998:	d00b      	beq.n	d9b2 <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    d99a:	4a1f      	ldr	r2, [pc, #124]	; (da18 <spi_read_reg+0x158>)
    d99c:	4914      	ldr	r1, [pc, #80]	; (d9f0 <spi_read_reg+0x130>)
    d99e:	4815      	ldr	r0, [pc, #84]	; (d9f4 <spi_read_reg+0x134>)
    d9a0:	4b15      	ldr	r3, [pc, #84]	; (d9f8 <spi_read_reg+0x138>)
    d9a2:	4798      	blx	r3
    d9a4:	481d      	ldr	r0, [pc, #116]	; (da1c <spi_read_reg+0x15c>)
    d9a6:	4b1e      	ldr	r3, [pc, #120]	; (da20 <spi_read_reg+0x160>)
    d9a8:	4798      	blx	r3
    d9aa:	200d      	movs	r0, #13
    d9ac:	4b14      	ldr	r3, [pc, #80]	; (da00 <spi_read_reg+0x140>)
    d9ae:	4798      	blx	r3
		goto _FAIL_;
    d9b0:	e7b5      	b.n	d91e <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    d9b2:	aa05      	add	r2, sp, #20
    d9b4:	7853      	ldrb	r3, [r2, #1]
    d9b6:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    d9b8:	7891      	ldrb	r1, [r2, #2]
    d9ba:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    d9bc:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    d9be:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    d9c0:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    d9c2:	78d2      	ldrb	r2, [r2, #3]
    d9c4:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    d9c6:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    d9c8:	465a      	mov	r2, fp
    d9ca:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    d9cc:	0020      	movs	r0, r4
    d9ce:	b007      	add	sp, #28
    d9d0:	bc3c      	pop	{r2, r3, r4, r5}
    d9d2:	4690      	mov	r8, r2
    d9d4:	4699      	mov	r9, r3
    d9d6:	46a2      	mov	sl, r4
    d9d8:	46ab      	mov	fp, r5
    d9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9dc:	0001bb8a 	.word	0x0001bb8a
    d9e0:	0000d3f9 	.word	0x0000d3f9
    d9e4:	0001bb8b 	.word	0x0001bb8b
    d9e8:	0000d599 	.word	0x0000d599
    d9ec:	00000416 	.word	0x00000416
    d9f0:	0001bbf0 	.word	0x0001bbf0
    d9f4:	0001b420 	.word	0x0001b420
    d9f8:	0001916d 	.word	0x0001916d
    d9fc:	0001c170 	.word	0x0001c170
    da00:	000191a1 	.word	0x000191a1
    da04:	0000b839 	.word	0x0000b839
    da08:	00000435 	.word	0x00000435
    da0c:	0001c1c4 	.word	0x0001c1c4
    da10:	0001c144 	.word	0x0001c144
    da14:	0000d66d 	.word	0x0000d66d
    da18:	0000041d 	.word	0x0000041d
    da1c:	0001c1a4 	.word	0x0001c1a4
    da20:	00019289 	.word	0x00019289

0000da24 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    da24:	b510      	push	{r4, lr}
    da26:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    da28:	2300      	movs	r3, #0
    da2a:	9300      	str	r3, [sp, #0]
    da2c:	2200      	movs	r2, #0
    da2e:	2100      	movs	r1, #0
    da30:	20cf      	movs	r0, #207	; 0xcf
    da32:	4c04      	ldr	r4, [pc, #16]	; (da44 <nm_spi_reset+0x20>)
    da34:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    da36:	20cf      	movs	r0, #207	; 0xcf
    da38:	4b03      	ldr	r3, [pc, #12]	; (da48 <nm_spi_reset+0x24>)
    da3a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    da3c:	2000      	movs	r0, #0
    da3e:	b002      	add	sp, #8
    da40:	bd10      	pop	{r4, pc}
    da42:	46c0      	nop			; (mov r8, r8)
    da44:	0000d3f9 	.word	0x0000d3f9
    da48:	0000d599 	.word	0x0000d599

0000da4c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    da4c:	2200      	movs	r2, #0
    da4e:	4b02      	ldr	r3, [pc, #8]	; (da58 <nm_spi_deinit+0xc>)
    da50:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    da52:	2000      	movs	r0, #0
    da54:	4770      	bx	lr
    da56:	46c0      	nop			; (mov r8, r8)
    da58:	20000500 	.word	0x20000500

0000da5c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    da5c:	b500      	push	{lr}
    da5e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    da60:	a901      	add	r1, sp, #4
    da62:	4b02      	ldr	r3, [pc, #8]	; (da6c <nm_spi_read_reg+0x10>)
    da64:	4798      	blx	r3

	return u32Val;
}
    da66:	9801      	ldr	r0, [sp, #4]
    da68:	b003      	add	sp, #12
    da6a:	bd00      	pop	{pc}
    da6c:	0000d8c1 	.word	0x0000d8c1

0000da70 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    da70:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    da72:	4b04      	ldr	r3, [pc, #16]	; (da84 <nm_spi_read_reg_with_ret+0x14>)
    da74:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    da76:	2300      	movs	r3, #0
    da78:	2801      	cmp	r0, #1
    da7a:	d101      	bne.n	da80 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    da7c:	0018      	movs	r0, r3
    da7e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    da80:	3b06      	subs	r3, #6
    da82:	e7fb      	b.n	da7c <nm_spi_read_reg_with_ret+0xc>
    da84:	0000d8c1 	.word	0x0000d8c1

0000da88 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    da88:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    da8a:	4b04      	ldr	r3, [pc, #16]	; (da9c <nm_spi_write_reg+0x14>)
    da8c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    da8e:	2300      	movs	r3, #0
    da90:	2801      	cmp	r0, #1
    da92:	d101      	bne.n	da98 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    da94:	0018      	movs	r0, r3
    da96:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    da98:	3b06      	subs	r3, #6
    da9a:	e7fb      	b.n	da94 <nm_spi_write_reg+0xc>
    da9c:	0000d7b1 	.word	0x0000d7b1

0000daa0 <nm_spi_init>:
{
    daa0:	b510      	push	{r4, lr}
    daa2:	b082      	sub	sp, #8
	uint32 reg = 0;
    daa4:	2300      	movs	r3, #0
    daa6:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    daa8:	4a35      	ldr	r2, [pc, #212]	; (db80 <nm_spi_init+0xe0>)
    daaa:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    daac:	4669      	mov	r1, sp
    daae:	4835      	ldr	r0, [pc, #212]	; (db84 <nm_spi_init+0xe4>)
    dab0:	4b35      	ldr	r3, [pc, #212]	; (db88 <nm_spi_init+0xe8>)
    dab2:	4798      	blx	r3
    dab4:	2800      	cmp	r0, #0
    dab6:	d028      	beq.n	db0a <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    dab8:	4b31      	ldr	r3, [pc, #196]	; (db80 <nm_spi_init+0xe0>)
    daba:	781b      	ldrb	r3, [r3, #0]
    dabc:	2b00      	cmp	r3, #0
    dabe:	d10d      	bne.n	dadc <nm_spi_init+0x3c>
		reg &= ~0x70;
    dac0:	337c      	adds	r3, #124	; 0x7c
    dac2:	9900      	ldr	r1, [sp, #0]
    dac4:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    dac6:	3b2c      	subs	r3, #44	; 0x2c
    dac8:	4319      	orrs	r1, r3
    daca:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    dacc:	482d      	ldr	r0, [pc, #180]	; (db84 <nm_spi_init+0xe4>)
    dace:	4b2f      	ldr	r3, [pc, #188]	; (db8c <nm_spi_init+0xec>)
    dad0:	4798      	blx	r3
    dad2:	1e04      	subs	r4, r0, #0
    dad4:	d03a      	beq.n	db4c <nm_spi_init+0xac>
		gu8Crc_off = 1;
    dad6:	2201      	movs	r2, #1
    dad8:	4b29      	ldr	r3, [pc, #164]	; (db80 <nm_spi_init+0xe0>)
    dada:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    dadc:	a901      	add	r1, sp, #4
    dade:	2080      	movs	r0, #128	; 0x80
    dae0:	0140      	lsls	r0, r0, #5
    dae2:	4b29      	ldr	r3, [pc, #164]	; (db88 <nm_spi_init+0xe8>)
    dae4:	4798      	blx	r3
    dae6:	2800      	cmp	r0, #0
    dae8:	d03c      	beq.n	db64 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    daea:	4c26      	ldr	r4, [pc, #152]	; (db84 <nm_spi_init+0xe4>)
    daec:	0020      	movs	r0, r4
    daee:	4b28      	ldr	r3, [pc, #160]	; (db90 <nm_spi_init+0xf0>)
    daf0:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    daf2:	2370      	movs	r3, #112	; 0x70
    daf4:	0001      	movs	r1, r0
    daf6:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    daf8:	2050      	movs	r0, #80	; 0x50
    dafa:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    dafc:	0020      	movs	r0, r4
    dafe:	4b25      	ldr	r3, [pc, #148]	; (db94 <nm_spi_init+0xf4>)
    db00:	4798      	blx	r3
	return M2M_SUCCESS;
    db02:	2400      	movs	r4, #0
}
    db04:	0020      	movs	r0, r4
    db06:	b002      	add	sp, #8
    db08:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    db0a:	2201      	movs	r2, #1
    db0c:	4b1c      	ldr	r3, [pc, #112]	; (db80 <nm_spi_init+0xe0>)
    db0e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    db10:	2298      	movs	r2, #152	; 0x98
    db12:	00d2      	lsls	r2, r2, #3
    db14:	4920      	ldr	r1, [pc, #128]	; (db98 <nm_spi_init+0xf8>)
    db16:	4821      	ldr	r0, [pc, #132]	; (db9c <nm_spi_init+0xfc>)
    db18:	4b21      	ldr	r3, [pc, #132]	; (dba0 <nm_spi_init+0x100>)
    db1a:	4798      	blx	r3
    db1c:	4821      	ldr	r0, [pc, #132]	; (dba4 <nm_spi_init+0x104>)
    db1e:	4b22      	ldr	r3, [pc, #136]	; (dba8 <nm_spi_init+0x108>)
    db20:	4798      	blx	r3
    db22:	200d      	movs	r0, #13
    db24:	4b21      	ldr	r3, [pc, #132]	; (dbac <nm_spi_init+0x10c>)
    db26:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    db28:	4669      	mov	r1, sp
    db2a:	4816      	ldr	r0, [pc, #88]	; (db84 <nm_spi_init+0xe4>)
    db2c:	4b16      	ldr	r3, [pc, #88]	; (db88 <nm_spi_init+0xe8>)
    db2e:	4798      	blx	r3
    db30:	1e04      	subs	r4, r0, #0
    db32:	d1c1      	bne.n	dab8 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    db34:	4a1e      	ldr	r2, [pc, #120]	; (dbb0 <nm_spi_init+0x110>)
    db36:	4918      	ldr	r1, [pc, #96]	; (db98 <nm_spi_init+0xf8>)
    db38:	4818      	ldr	r0, [pc, #96]	; (db9c <nm_spi_init+0xfc>)
    db3a:	4b19      	ldr	r3, [pc, #100]	; (dba0 <nm_spi_init+0x100>)
    db3c:	4798      	blx	r3
    db3e:	481d      	ldr	r0, [pc, #116]	; (dbb4 <nm_spi_init+0x114>)
    db40:	4b19      	ldr	r3, [pc, #100]	; (dba8 <nm_spi_init+0x108>)
    db42:	4798      	blx	r3
    db44:	200d      	movs	r0, #13
    db46:	4b19      	ldr	r3, [pc, #100]	; (dbac <nm_spi_init+0x10c>)
    db48:	4798      	blx	r3
			return 0;
    db4a:	e7db      	b.n	db04 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    db4c:	4a1a      	ldr	r2, [pc, #104]	; (dbb8 <nm_spi_init+0x118>)
    db4e:	4912      	ldr	r1, [pc, #72]	; (db98 <nm_spi_init+0xf8>)
    db50:	4812      	ldr	r0, [pc, #72]	; (db9c <nm_spi_init+0xfc>)
    db52:	4b13      	ldr	r3, [pc, #76]	; (dba0 <nm_spi_init+0x100>)
    db54:	4798      	blx	r3
    db56:	4819      	ldr	r0, [pc, #100]	; (dbbc <nm_spi_init+0x11c>)
    db58:	4b13      	ldr	r3, [pc, #76]	; (dba8 <nm_spi_init+0x108>)
    db5a:	4798      	blx	r3
    db5c:	200d      	movs	r0, #13
    db5e:	4b13      	ldr	r3, [pc, #76]	; (dbac <nm_spi_init+0x10c>)
    db60:	4798      	blx	r3
			return 0;
    db62:	e7cf      	b.n	db04 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    db64:	4a16      	ldr	r2, [pc, #88]	; (dbc0 <nm_spi_init+0x120>)
    db66:	490c      	ldr	r1, [pc, #48]	; (db98 <nm_spi_init+0xf8>)
    db68:	480c      	ldr	r0, [pc, #48]	; (db9c <nm_spi_init+0xfc>)
    db6a:	4b0d      	ldr	r3, [pc, #52]	; (dba0 <nm_spi_init+0x100>)
    db6c:	4798      	blx	r3
    db6e:	4815      	ldr	r0, [pc, #84]	; (dbc4 <nm_spi_init+0x124>)
    db70:	4b0d      	ldr	r3, [pc, #52]	; (dba8 <nm_spi_init+0x108>)
    db72:	4798      	blx	r3
    db74:	200d      	movs	r0, #13
    db76:	4b0d      	ldr	r3, [pc, #52]	; (dbac <nm_spi_init+0x10c>)
    db78:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    db7a:	2406      	movs	r4, #6
    db7c:	4264      	negs	r4, r4
    db7e:	e7c1      	b.n	db04 <nm_spi_init+0x64>
    db80:	20000500 	.word	0x20000500
    db84:	0000e824 	.word	0x0000e824
    db88:	0000d8c1 	.word	0x0000d8c1
    db8c:	0000d7b1 	.word	0x0000d7b1
    db90:	0000da5d 	.word	0x0000da5d
    db94:	0000da89 	.word	0x0000da89
    db98:	0001bc0c 	.word	0x0001bc0c
    db9c:	0001b420 	.word	0x0001b420
    dba0:	0001916d 	.word	0x0001916d
    dba4:	0001bd18 	.word	0x0001bd18
    dba8:	00019289 	.word	0x00019289
    dbac:	000191a1 	.word	0x000191a1
    dbb0:	000004c3 	.word	0x000004c3
    dbb4:	0001bd68 	.word	0x0001bd68
    dbb8:	000004cd 	.word	0x000004cd
    dbbc:	0001bd94 	.word	0x0001bd94
    dbc0:	000004d7 	.word	0x000004d7
    dbc4:	0001bdc8 	.word	0x0001bdc8

0000dbc8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    dbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbca:	46de      	mov	lr, fp
    dbcc:	4657      	mov	r7, sl
    dbce:	464e      	mov	r6, r9
    dbd0:	4645      	mov	r5, r8
    dbd2:	b5e0      	push	{r5, r6, r7, lr}
    dbd4:	b087      	sub	sp, #28
    dbd6:	9002      	str	r0, [sp, #8]
    dbd8:	9103      	str	r1, [sp, #12]
    dbda:	0016      	movs	r6, r2
    dbdc:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    dbde:	2300      	movs	r3, #0
    dbe0:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    dbe2:	2400      	movs	r4, #0
    dbe4:	4b3e      	ldr	r3, [pc, #248]	; (dce0 <nm_spi_read_block+0x118>)
    dbe6:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    dbe8:	46a9      	mov	r9, r5
    dbea:	e037      	b.n	dc5c <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    dbec:	2301      	movs	r3, #1
    dbee:	469b      	mov	fp, r3
		size = 2;
    dbf0:	3601      	adds	r6, #1
    dbf2:	e035      	b.n	dc60 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    dbf4:	20c8      	movs	r0, #200	; 0xc8
    dbf6:	4b3b      	ldr	r3, [pc, #236]	; (dce4 <nm_spi_read_block+0x11c>)
    dbf8:	4798      	blx	r3
	if (result != N_OK) {
    dbfa:	2801      	cmp	r0, #1
    dbfc:	d045      	beq.n	dc8a <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    dbfe:	4a3a      	ldr	r2, [pc, #232]	; (dce8 <nm_spi_read_block+0x120>)
    dc00:	493a      	ldr	r1, [pc, #232]	; (dcec <nm_spi_read_block+0x124>)
    dc02:	483b      	ldr	r0, [pc, #236]	; (dcf0 <nm_spi_read_block+0x128>)
    dc04:	4f3b      	ldr	r7, [pc, #236]	; (dcf4 <nm_spi_read_block+0x12c>)
    dc06:	47b8      	blx	r7
    dc08:	9902      	ldr	r1, [sp, #8]
    dc0a:	483b      	ldr	r0, [pc, #236]	; (dcf8 <nm_spi_read_block+0x130>)
    dc0c:	47b8      	blx	r7
    dc0e:	200d      	movs	r0, #13
    dc10:	4b3a      	ldr	r3, [pc, #232]	; (dcfc <nm_spi_read_block+0x134>)
    dc12:	4798      	blx	r3
		nm_bsp_sleep(1);
    dc14:	2001      	movs	r0, #1
    dc16:	4f3a      	ldr	r7, [pc, #232]	; (dd00 <nm_spi_read_block+0x138>)
    dc18:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    dc1a:	9400      	str	r4, [sp, #0]
    dc1c:	0023      	movs	r3, r4
    dc1e:	0022      	movs	r2, r4
    dc20:	0021      	movs	r1, r4
    dc22:	20cf      	movs	r0, #207	; 0xcf
    dc24:	4d2e      	ldr	r5, [pc, #184]	; (dce0 <nm_spi_read_block+0x118>)
    dc26:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    dc28:	20cf      	movs	r0, #207	; 0xcf
    dc2a:	4b2e      	ldr	r3, [pc, #184]	; (dce4 <nm_spi_read_block+0x11c>)
    dc2c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    dc2e:	4a35      	ldr	r2, [pc, #212]	; (dd04 <nm_spi_read_block+0x13c>)
    dc30:	492e      	ldr	r1, [pc, #184]	; (dcec <nm_spi_read_block+0x124>)
    dc32:	482f      	ldr	r0, [pc, #188]	; (dcf0 <nm_spi_read_block+0x128>)
    dc34:	4b2f      	ldr	r3, [pc, #188]	; (dcf4 <nm_spi_read_block+0x12c>)
    dc36:	469a      	mov	sl, r3
    dc38:	4798      	blx	r3
    dc3a:	0033      	movs	r3, r6
    dc3c:	9a02      	ldr	r2, [sp, #8]
    dc3e:	4649      	mov	r1, r9
    dc40:	4831      	ldr	r0, [pc, #196]	; (dd08 <nm_spi_read_block+0x140>)
    dc42:	47d0      	blx	sl
    dc44:	200d      	movs	r0, #13
    dc46:	4b2d      	ldr	r3, [pc, #180]	; (dcfc <nm_spi_read_block+0x134>)
    dc48:	4798      	blx	r3
		nm_bsp_sleep(1);
    dc4a:	2001      	movs	r0, #1
    dc4c:	47b8      	blx	r7
    dc4e:	2301      	movs	r3, #1
    dc50:	425b      	negs	r3, r3
    dc52:	469c      	mov	ip, r3
    dc54:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    dc56:	464b      	mov	r3, r9
    dc58:	2b00      	cmp	r3, #0
    dc5a:	d038      	beq.n	dcce <nm_spi_read_block+0x106>
	if (size == 1)
    dc5c:	2e01      	cmp	r6, #1
    dc5e:	d0c5      	beq.n	dbec <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    dc60:	9400      	str	r4, [sp, #0]
    dc62:	0033      	movs	r3, r6
    dc64:	0022      	movs	r2, r4
    dc66:	9d02      	ldr	r5, [sp, #8]
    dc68:	0029      	movs	r1, r5
    dc6a:	20c8      	movs	r0, #200	; 0xc8
    dc6c:	47c0      	blx	r8
	if (result != N_OK) {
    dc6e:	2801      	cmp	r0, #1
    dc70:	d0c0      	beq.n	dbf4 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    dc72:	4a26      	ldr	r2, [pc, #152]	; (dd0c <nm_spi_read_block+0x144>)
    dc74:	491d      	ldr	r1, [pc, #116]	; (dcec <nm_spi_read_block+0x124>)
    dc76:	481e      	ldr	r0, [pc, #120]	; (dcf0 <nm_spi_read_block+0x128>)
    dc78:	4f1e      	ldr	r7, [pc, #120]	; (dcf4 <nm_spi_read_block+0x12c>)
    dc7a:	47b8      	blx	r7
    dc7c:	0029      	movs	r1, r5
    dc7e:	4824      	ldr	r0, [pc, #144]	; (dd10 <nm_spi_read_block+0x148>)
    dc80:	47b8      	blx	r7
    dc82:	200d      	movs	r0, #13
    dc84:	4b1d      	ldr	r3, [pc, #116]	; (dcfc <nm_spi_read_block+0x134>)
    dc86:	4798      	blx	r3
    dc88:	e7c4      	b.n	dc14 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    dc8a:	465b      	mov	r3, fp
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	d016      	beq.n	dcbe <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    dc90:	af05      	add	r7, sp, #20
    dc92:	0022      	movs	r2, r4
    dc94:	0031      	movs	r1, r6
    dc96:	0038      	movs	r0, r7
    dc98:	4b1e      	ldr	r3, [pc, #120]	; (dd14 <nm_spi_read_block+0x14c>)
    dc9a:	4798      	blx	r3
		buf[0] = tmp[0];
    dc9c:	783b      	ldrb	r3, [r7, #0]
    dc9e:	9a03      	ldr	r2, [sp, #12]
    dca0:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    dca2:	2801      	cmp	r0, #1
    dca4:	d011      	beq.n	dcca <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    dca6:	4a1c      	ldr	r2, [pc, #112]	; (dd18 <nm_spi_read_block+0x150>)
    dca8:	4910      	ldr	r1, [pc, #64]	; (dcec <nm_spi_read_block+0x124>)
    dcaa:	4811      	ldr	r0, [pc, #68]	; (dcf0 <nm_spi_read_block+0x128>)
    dcac:	4b11      	ldr	r3, [pc, #68]	; (dcf4 <nm_spi_read_block+0x12c>)
    dcae:	4798      	blx	r3
    dcb0:	481a      	ldr	r0, [pc, #104]	; (dd1c <nm_spi_read_block+0x154>)
    dcb2:	4b1b      	ldr	r3, [pc, #108]	; (dd20 <nm_spi_read_block+0x158>)
    dcb4:	4798      	blx	r3
    dcb6:	200d      	movs	r0, #13
    dcb8:	4b10      	ldr	r3, [pc, #64]	; (dcfc <nm_spi_read_block+0x134>)
    dcba:	4798      	blx	r3
    dcbc:	e7aa      	b.n	dc14 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    dcbe:	0022      	movs	r2, r4
    dcc0:	0031      	movs	r1, r6
    dcc2:	9803      	ldr	r0, [sp, #12]
    dcc4:	4b13      	ldr	r3, [pc, #76]	; (dd14 <nm_spi_read_block+0x14c>)
    dcc6:	4798      	blx	r3
    dcc8:	e7eb      	b.n	dca2 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    dcca:	2000      	movs	r0, #0
    dccc:	e001      	b.n	dcd2 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    dcce:	2006      	movs	r0, #6
    dcd0:	4240      	negs	r0, r0

	return s8Ret;
}
    dcd2:	b007      	add	sp, #28
    dcd4:	bc3c      	pop	{r2, r3, r4, r5}
    dcd6:	4690      	mov	r8, r2
    dcd8:	4699      	mov	r9, r3
    dcda:	46a2      	mov	sl, r4
    dcdc:	46ab      	mov	fp, r5
    dcde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dce0:	0000d3f9 	.word	0x0000d3f9
    dce4:	0000d599 	.word	0x0000d599
    dce8:	0000045c 	.word	0x0000045c
    dcec:	0001bc00 	.word	0x0001bc00
    dcf0:	0001b420 	.word	0x0001b420
    dcf4:	0001916d 	.word	0x0001916d
    dcf8:	0001be1c 	.word	0x0001be1c
    dcfc:	000191a1 	.word	0x000191a1
    dd00:	0000b839 	.word	0x0000b839
    dd04:	0000047d 	.word	0x0000047d
    dd08:	0001be7c 	.word	0x0001be7c
    dd0c:	00000456 	.word	0x00000456
    dd10:	0001bdec 	.word	0x0001bdec
    dd14:	0000d66d 	.word	0x0000d66d
    dd18:	0000046c 	.word	0x0000046c
    dd1c:	0001be54 	.word	0x0001be54
    dd20:	00019289 	.word	0x00019289

0000dd24 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    dd24:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd26:	46de      	mov	lr, fp
    dd28:	4647      	mov	r7, r8
    dd2a:	b580      	push	{r7, lr}
    dd2c:	b089      	sub	sp, #36	; 0x24
    dd2e:	9004      	str	r0, [sp, #16]
    dd30:	468b      	mov	fp, r1
    dd32:	9203      	str	r2, [sp, #12]
    dd34:	260a      	movs	r6, #10
    dd36:	2780      	movs	r7, #128	; 0x80
    dd38:	01bf      	lsls	r7, r7, #6
    dd3a:	466b      	mov	r3, sp
    dd3c:	82df      	strh	r7, [r3, #22]
    dd3e:	0035      	movs	r5, r6
    dd40:	e02d      	b.n	dd9e <nm_spi_write_block+0x7a>
		size = 2;
    dd42:	3301      	adds	r3, #1
    dd44:	9303      	str	r3, [sp, #12]
    dd46:	e02d      	b.n	dda4 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    dd48:	4a82      	ldr	r2, [pc, #520]	; (df54 <nm_spi_write_block+0x230>)
    dd4a:	4983      	ldr	r1, [pc, #524]	; (df58 <nm_spi_write_block+0x234>)
    dd4c:	4883      	ldr	r0, [pc, #524]	; (df5c <nm_spi_write_block+0x238>)
    dd4e:	4c84      	ldr	r4, [pc, #528]	; (df60 <nm_spi_write_block+0x23c>)
    dd50:	47a0      	blx	r4
    dd52:	0031      	movs	r1, r6
    dd54:	4883      	ldr	r0, [pc, #524]	; (df64 <nm_spi_write_block+0x240>)
    dd56:	47a0      	blx	r4
    dd58:	200d      	movs	r0, #13
    dd5a:	4b83      	ldr	r3, [pc, #524]	; (df68 <nm_spi_write_block+0x244>)
    dd5c:	4798      	blx	r3
		nm_bsp_sleep(1);
    dd5e:	2001      	movs	r0, #1
    dd60:	4c82      	ldr	r4, [pc, #520]	; (df6c <nm_spi_write_block+0x248>)
    dd62:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    dd64:	2300      	movs	r3, #0
    dd66:	9300      	str	r3, [sp, #0]
    dd68:	2200      	movs	r2, #0
    dd6a:	2100      	movs	r1, #0
    dd6c:	20cf      	movs	r0, #207	; 0xcf
    dd6e:	4e80      	ldr	r6, [pc, #512]	; (df70 <nm_spi_write_block+0x24c>)
    dd70:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    dd72:	20cf      	movs	r0, #207	; 0xcf
    dd74:	4b7f      	ldr	r3, [pc, #508]	; (df74 <nm_spi_write_block+0x250>)
    dd76:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    dd78:	4a7f      	ldr	r2, [pc, #508]	; (df78 <nm_spi_write_block+0x254>)
    dd7a:	4977      	ldr	r1, [pc, #476]	; (df58 <nm_spi_write_block+0x234>)
    dd7c:	4877      	ldr	r0, [pc, #476]	; (df5c <nm_spi_write_block+0x238>)
    dd7e:	4e78      	ldr	r6, [pc, #480]	; (df60 <nm_spi_write_block+0x23c>)
    dd80:	47b0      	blx	r6
    dd82:	9b03      	ldr	r3, [sp, #12]
    dd84:	9a04      	ldr	r2, [sp, #16]
    dd86:	0029      	movs	r1, r5
    dd88:	487c      	ldr	r0, [pc, #496]	; (df7c <nm_spi_write_block+0x258>)
    dd8a:	47b0      	blx	r6
    dd8c:	200d      	movs	r0, #13
    dd8e:	4b76      	ldr	r3, [pc, #472]	; (df68 <nm_spi_write_block+0x244>)
    dd90:	4798      	blx	r3
		nm_bsp_sleep(1);
    dd92:	2001      	movs	r0, #1
    dd94:	47a0      	blx	r4
    dd96:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    dd98:	2d00      	cmp	r5, #0
    dd9a:	d100      	bne.n	dd9e <nm_spi_write_block+0x7a>
    dd9c:	e0d2      	b.n	df44 <nm_spi_write_block+0x220>
	if (size == 1)
    dd9e:	9b03      	ldr	r3, [sp, #12]
    dda0:	2b01      	cmp	r3, #1
    dda2:	d0ce      	beq.n	dd42 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    dda4:	2300      	movs	r3, #0
    dda6:	9300      	str	r3, [sp, #0]
    dda8:	9b03      	ldr	r3, [sp, #12]
    ddaa:	2200      	movs	r2, #0
    ddac:	9e04      	ldr	r6, [sp, #16]
    ddae:	0031      	movs	r1, r6
    ddb0:	20c7      	movs	r0, #199	; 0xc7
    ddb2:	4c6f      	ldr	r4, [pc, #444]	; (df70 <nm_spi_write_block+0x24c>)
    ddb4:	47a0      	blx	r4
	if (result != N_OK) {
    ddb6:	2801      	cmp	r0, #1
    ddb8:	d1c6      	bne.n	dd48 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    ddba:	20c7      	movs	r0, #199	; 0xc7
    ddbc:	4b6d      	ldr	r3, [pc, #436]	; (df74 <nm_spi_write_block+0x250>)
    ddbe:	4798      	blx	r3
	if (result != N_OK) {
    ddc0:	2801      	cmp	r0, #1
    ddc2:	d00b      	beq.n	dddc <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    ddc4:	4a6e      	ldr	r2, [pc, #440]	; (df80 <nm_spi_write_block+0x25c>)
    ddc6:	4964      	ldr	r1, [pc, #400]	; (df58 <nm_spi_write_block+0x234>)
    ddc8:	4864      	ldr	r0, [pc, #400]	; (df5c <nm_spi_write_block+0x238>)
    ddca:	4c65      	ldr	r4, [pc, #404]	; (df60 <nm_spi_write_block+0x23c>)
    ddcc:	47a0      	blx	r4
    ddce:	9904      	ldr	r1, [sp, #16]
    ddd0:	486c      	ldr	r0, [pc, #432]	; (df84 <nm_spi_write_block+0x260>)
    ddd2:	47a0      	blx	r4
    ddd4:	200d      	movs	r0, #13
    ddd6:	4b64      	ldr	r3, [pc, #400]	; (df68 <nm_spi_write_block+0x244>)
    ddd8:	4798      	blx	r3
    ddda:	e7c0      	b.n	dd5e <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    dddc:	2200      	movs	r2, #0
    ddde:	ab07      	add	r3, sp, #28
    dde0:	801a      	strh	r2, [r3, #0]
    dde2:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    dde4:	2600      	movs	r6, #0
				order = 0x1;
    dde6:	46a8      	mov	r8, r5
    dde8:	0035      	movs	r5, r6
    ddea:	0026      	movs	r6, r4
    ddec:	e021      	b.n	de32 <nm_spi_write_block+0x10e>
				order = 0x2;
    ddee:	2300      	movs	r3, #0
    ddf0:	42b7      	cmp	r7, r6
    ddf2:	415b      	adcs	r3, r3
    ddf4:	3302      	adds	r3, #2
		cmd |= order;
    ddf6:	200b      	movs	r0, #11
    ddf8:	aa04      	add	r2, sp, #16
    ddfa:	4694      	mov	ip, r2
    ddfc:	4460      	add	r0, ip
    ddfe:	2210      	movs	r2, #16
    de00:	4252      	negs	r2, r2
    de02:	4313      	orrs	r3, r2
    de04:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    de06:	2101      	movs	r1, #1
    de08:	4b5f      	ldr	r3, [pc, #380]	; (df88 <nm_spi_write_block+0x264>)
    de0a:	4798      	blx	r3
    de0c:	2800      	cmp	r0, #0
    de0e:	d11d      	bne.n	de4c <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    de10:	465b      	mov	r3, fp
    de12:	1958      	adds	r0, r3, r5
    de14:	0021      	movs	r1, r4
    de16:	4b5c      	ldr	r3, [pc, #368]	; (df88 <nm_spi_write_block+0x264>)
    de18:	4798      	blx	r3
    de1a:	2800      	cmp	r0, #0
    de1c:	d12e      	bne.n	de7c <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    de1e:	4b5b      	ldr	r3, [pc, #364]	; (df8c <nm_spi_write_block+0x268>)
    de20:	781b      	ldrb	r3, [r3, #0]
    de22:	2b00      	cmp	r3, #0
    de24:	d037      	beq.n	de96 <nm_spi_write_block+0x172>
		ix += nbytes;
    de26:	1965      	adds	r5, r4, r5
    de28:	b22d      	sxth	r5, r5
		sz -= nbytes;
    de2a:	1b36      	subs	r6, r6, r4
    de2c:	b2b6      	uxth	r6, r6
	} while (sz);
    de2e:	2e00      	cmp	r6, #0
    de30:	d052      	beq.n	ded8 <nm_spi_write_block+0x1b4>
    de32:	1c34      	adds	r4, r6, #0
    de34:	42be      	cmp	r6, r7
    de36:	d901      	bls.n	de3c <nm_spi_write_block+0x118>
    de38:	466b      	mov	r3, sp
    de3a:	8adc      	ldrh	r4, [r3, #22]
    de3c:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    de3e:	2d00      	cmp	r5, #0
    de40:	d1d5      	bne.n	ddee <nm_spi_write_block+0xca>
				order = 0x3;
    de42:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    de44:	42be      	cmp	r6, r7
    de46:	d9d6      	bls.n	ddf6 <nm_spi_write_block+0xd2>
				order = 0x1;
    de48:	3b02      	subs	r3, #2
    de4a:	e7d4      	b.n	ddf6 <nm_spi_write_block+0xd2>
    de4c:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    de4e:	4a50      	ldr	r2, [pc, #320]	; (df90 <nm_spi_write_block+0x26c>)
    de50:	4950      	ldr	r1, [pc, #320]	; (df94 <nm_spi_write_block+0x270>)
    de52:	4842      	ldr	r0, [pc, #264]	; (df5c <nm_spi_write_block+0x238>)
    de54:	4b42      	ldr	r3, [pc, #264]	; (df60 <nm_spi_write_block+0x23c>)
    de56:	4798      	blx	r3
    de58:	484f      	ldr	r0, [pc, #316]	; (df98 <nm_spi_write_block+0x274>)
    de5a:	4b50      	ldr	r3, [pc, #320]	; (df9c <nm_spi_write_block+0x278>)
    de5c:	4798      	blx	r3
    de5e:	200d      	movs	r0, #13
    de60:	4b41      	ldr	r3, [pc, #260]	; (df68 <nm_spi_write_block+0x244>)
    de62:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    de64:	4a4e      	ldr	r2, [pc, #312]	; (dfa0 <nm_spi_write_block+0x27c>)
    de66:	493c      	ldr	r1, [pc, #240]	; (df58 <nm_spi_write_block+0x234>)
    de68:	483c      	ldr	r0, [pc, #240]	; (df5c <nm_spi_write_block+0x238>)
    de6a:	4b3d      	ldr	r3, [pc, #244]	; (df60 <nm_spi_write_block+0x23c>)
    de6c:	4798      	blx	r3
    de6e:	484d      	ldr	r0, [pc, #308]	; (dfa4 <nm_spi_write_block+0x280>)
    de70:	4b4a      	ldr	r3, [pc, #296]	; (df9c <nm_spi_write_block+0x278>)
    de72:	4798      	blx	r3
    de74:	200d      	movs	r0, #13
    de76:	4b3c      	ldr	r3, [pc, #240]	; (df68 <nm_spi_write_block+0x244>)
    de78:	4798      	blx	r3
    de7a:	e770      	b.n	dd5e <nm_spi_write_block+0x3a>
    de7c:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    de7e:	4a4a      	ldr	r2, [pc, #296]	; (dfa8 <nm_spi_write_block+0x284>)
    de80:	4944      	ldr	r1, [pc, #272]	; (df94 <nm_spi_write_block+0x270>)
    de82:	4836      	ldr	r0, [pc, #216]	; (df5c <nm_spi_write_block+0x238>)
    de84:	4b36      	ldr	r3, [pc, #216]	; (df60 <nm_spi_write_block+0x23c>)
    de86:	4798      	blx	r3
    de88:	4848      	ldr	r0, [pc, #288]	; (dfac <nm_spi_write_block+0x288>)
    de8a:	4b44      	ldr	r3, [pc, #272]	; (df9c <nm_spi_write_block+0x278>)
    de8c:	4798      	blx	r3
    de8e:	200d      	movs	r0, #13
    de90:	4b35      	ldr	r3, [pc, #212]	; (df68 <nm_spi_write_block+0x244>)
    de92:	4798      	blx	r3
    de94:	e7e6      	b.n	de64 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    de96:	2102      	movs	r1, #2
    de98:	a807      	add	r0, sp, #28
    de9a:	4b3b      	ldr	r3, [pc, #236]	; (df88 <nm_spi_write_block+0x264>)
    de9c:	4798      	blx	r3
    de9e:	2800      	cmp	r0, #0
    dea0:	d0c1      	beq.n	de26 <nm_spi_write_block+0x102>
    dea2:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    dea4:	22d7      	movs	r2, #215	; 0xd7
    dea6:	0092      	lsls	r2, r2, #2
    dea8:	493a      	ldr	r1, [pc, #232]	; (df94 <nm_spi_write_block+0x270>)
    deaa:	482c      	ldr	r0, [pc, #176]	; (df5c <nm_spi_write_block+0x238>)
    deac:	4b2c      	ldr	r3, [pc, #176]	; (df60 <nm_spi_write_block+0x23c>)
    deae:	4798      	blx	r3
    deb0:	483f      	ldr	r0, [pc, #252]	; (dfb0 <nm_spi_write_block+0x28c>)
    deb2:	4b3a      	ldr	r3, [pc, #232]	; (df9c <nm_spi_write_block+0x278>)
    deb4:	4798      	blx	r3
    deb6:	200d      	movs	r0, #13
    deb8:	4b2b      	ldr	r3, [pc, #172]	; (df68 <nm_spi_write_block+0x244>)
    deba:	4798      	blx	r3
    debc:	e7d2      	b.n	de64 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    debe:	229a      	movs	r2, #154	; 0x9a
    dec0:	0052      	lsls	r2, r2, #1
    dec2:	493c      	ldr	r1, [pc, #240]	; (dfb4 <nm_spi_write_block+0x290>)
    dec4:	4825      	ldr	r0, [pc, #148]	; (df5c <nm_spi_write_block+0x238>)
    dec6:	4b26      	ldr	r3, [pc, #152]	; (df60 <nm_spi_write_block+0x23c>)
    dec8:	4798      	blx	r3
    deca:	483b      	ldr	r0, [pc, #236]	; (dfb8 <nm_spi_write_block+0x294>)
    decc:	4b33      	ldr	r3, [pc, #204]	; (df9c <nm_spi_write_block+0x278>)
    dece:	4798      	blx	r3
    ded0:	200d      	movs	r0, #13
    ded2:	4b25      	ldr	r3, [pc, #148]	; (df68 <nm_spi_write_block+0x244>)
    ded4:	4798      	blx	r3
    ded6:	e027      	b.n	df28 <nm_spi_write_block+0x204>
    ded8:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    deda:	4b2c      	ldr	r3, [pc, #176]	; (df8c <nm_spi_write_block+0x268>)
    dedc:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    dede:	1e63      	subs	r3, r4, #1
    dee0:	419c      	sbcs	r4, r3
    dee2:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    dee4:	b2a1      	uxth	r1, r4
    dee6:	a807      	add	r0, sp, #28
    dee8:	4b34      	ldr	r3, [pc, #208]	; (dfbc <nm_spi_write_block+0x298>)
    deea:	4798      	blx	r3
    deec:	2800      	cmp	r0, #0
    deee:	d1e6      	bne.n	debe <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    def0:	ab08      	add	r3, sp, #32
    def2:	191b      	adds	r3, r3, r4
    def4:	3b05      	subs	r3, #5
    def6:	781b      	ldrb	r3, [r3, #0]
    def8:	2b00      	cmp	r3, #0
    defa:	d106      	bne.n	df0a <nm_spi_write_block+0x1e6>
    defc:	ab08      	add	r3, sp, #32
    defe:	469c      	mov	ip, r3
    df00:	4464      	add	r4, ip
    df02:	3c06      	subs	r4, #6
    df04:	7823      	ldrb	r3, [r4, #0]
    df06:	2bc3      	cmp	r3, #195	; 0xc3
    df08:	d01a      	beq.n	df40 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    df0a:	223c      	movs	r2, #60	; 0x3c
    df0c:	32ff      	adds	r2, #255	; 0xff
    df0e:	4929      	ldr	r1, [pc, #164]	; (dfb4 <nm_spi_write_block+0x290>)
    df10:	4812      	ldr	r0, [pc, #72]	; (df5c <nm_spi_write_block+0x238>)
    df12:	4c13      	ldr	r4, [pc, #76]	; (df60 <nm_spi_write_block+0x23c>)
    df14:	47a0      	blx	r4
    df16:	a907      	add	r1, sp, #28
    df18:	788b      	ldrb	r3, [r1, #2]
    df1a:	784a      	ldrb	r2, [r1, #1]
    df1c:	7809      	ldrb	r1, [r1, #0]
    df1e:	4828      	ldr	r0, [pc, #160]	; (dfc0 <nm_spi_write_block+0x29c>)
    df20:	47a0      	blx	r4
    df22:	200d      	movs	r0, #13
    df24:	4b10      	ldr	r3, [pc, #64]	; (df68 <nm_spi_write_block+0x244>)
    df26:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    df28:	4a26      	ldr	r2, [pc, #152]	; (dfc4 <nm_spi_write_block+0x2a0>)
    df2a:	490b      	ldr	r1, [pc, #44]	; (df58 <nm_spi_write_block+0x234>)
    df2c:	480b      	ldr	r0, [pc, #44]	; (df5c <nm_spi_write_block+0x238>)
    df2e:	4b0c      	ldr	r3, [pc, #48]	; (df60 <nm_spi_write_block+0x23c>)
    df30:	4798      	blx	r3
    df32:	481c      	ldr	r0, [pc, #112]	; (dfa4 <nm_spi_write_block+0x280>)
    df34:	4b19      	ldr	r3, [pc, #100]	; (df9c <nm_spi_write_block+0x278>)
    df36:	4798      	blx	r3
    df38:	200d      	movs	r0, #13
    df3a:	4b0b      	ldr	r3, [pc, #44]	; (df68 <nm_spi_write_block+0x244>)
    df3c:	4798      	blx	r3
    df3e:	e70e      	b.n	dd5e <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    df40:	2000      	movs	r0, #0
    df42:	e001      	b.n	df48 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    df44:	2006      	movs	r0, #6
    df46:	4240      	negs	r0, r0

	return s8Ret;
}
    df48:	b009      	add	sp, #36	; 0x24
    df4a:	bc0c      	pop	{r2, r3}
    df4c:	4690      	mov	r8, r2
    df4e:	469b      	mov	fp, r3
    df50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df52:	46c0      	nop			; (mov r8, r8)
    df54:	000003c3 	.word	0x000003c3
    df58:	0001bbe0 	.word	0x0001bbe0
    df5c:	0001b420 	.word	0x0001b420
    df60:	0001916d 	.word	0x0001916d
    df64:	0001be98 	.word	0x0001be98
    df68:	000191a1 	.word	0x000191a1
    df6c:	0000b839 	.word	0x0000b839
    df70:	0000d3f9 	.word	0x0000d3f9
    df74:	0000d599 	.word	0x0000d599
    df78:	000003eb 	.word	0x000003eb
    df7c:	0001be7c 	.word	0x0001be7c
    df80:	000003c9 	.word	0x000003c9
    df84:	0001bec8 	.word	0x0001bec8
    df88:	0000d3d9 	.word	0x0000d3d9
    df8c:	20000500 	.word	0x20000500
    df90:	00000349 	.word	0x00000349
    df94:	0001bbc0 	.word	0x0001bbc0
    df98:	0001bf00 	.word	0x0001bf00
    df9c:	00019289 	.word	0x00019289
    dfa0:	000003d9 	.word	0x000003d9
    dfa4:	0001bff4 	.word	0x0001bff4
    dfa8:	00000352 	.word	0x00000352
    dfac:	0001bf38 	.word	0x0001bf38
    dfb0:	0001bf6c 	.word	0x0001bf6c
    dfb4:	0001bb94 	.word	0x0001bb94
    dfb8:	0001bfa4 	.word	0x0001bfa4
    dfbc:	0000d579 	.word	0x0000d579
    dfc0:	0001bfc4 	.word	0x0001bfc4
    dfc4:	000003e1 	.word	0x000003e1

0000dfc8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    dfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfca:	46de      	mov	lr, fp
    dfcc:	4657      	mov	r7, sl
    dfce:	464e      	mov	r6, r9
    dfd0:	4645      	mov	r5, r8
    dfd2:	b5e0      	push	{r5, r6, r7, lr}
    dfd4:	b085      	sub	sp, #20
    dfd6:	9001      	str	r0, [sp, #4]
    dfd8:	000e      	movs	r6, r1
    dfda:	9202      	str	r2, [sp, #8]
    dfdc:	001d      	movs	r5, r3
    dfde:	ab0e      	add	r3, sp, #56	; 0x38
    dfe0:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    dfe2:	2c00      	cmp	r4, #0
    dfe4:	d064      	beq.n	e0b0 <Socket_ReadSocketData+0xe8>
    dfe6:	0103      	lsls	r3, r0, #4
    dfe8:	4935      	ldr	r1, [pc, #212]	; (e0c0 <Socket_ReadSocketData+0xf8>)
    dfea:	585b      	ldr	r3, [r3, r1]
    dfec:	2b00      	cmp	r3, #0
    dfee:	d05f      	beq.n	e0b0 <Socket_ReadSocketData+0xe8>
    dff0:	0101      	lsls	r1, r0, #4
    dff2:	4b33      	ldr	r3, [pc, #204]	; (e0c0 <Socket_ReadSocketData+0xf8>)
    dff4:	185b      	adds	r3, r3, r1
    dff6:	889b      	ldrh	r3, [r3, #4]
    dff8:	b29b      	uxth	r3, r3
    dffa:	2b00      	cmp	r3, #0
    dffc:	d058      	beq.n	e0b0 <Socket_ReadSocketData+0xe8>
    dffe:	4b30      	ldr	r3, [pc, #192]	; (e0c0 <Socket_ReadSocketData+0xf8>)
    e000:	185b      	adds	r3, r3, r1
    e002:	7a9b      	ldrb	r3, [r3, #10]
    e004:	2b01      	cmp	r3, #1
    e006:	d153      	bne.n	e0b0 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    e008:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    e00a:	4b2d      	ldr	r3, [pc, #180]	; (e0c0 <Socket_ReadSocketData+0xf8>)
    e00c:	469b      	mov	fp, r3
    e00e:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    e010:	465b      	mov	r3, fp
    e012:	220a      	movs	r2, #10
    e014:	4690      	mov	r8, r2
    e016:	44d8      	add	r8, fp
    e018:	468a      	mov	sl, r1
    e01a:	9500      	str	r5, [sp, #0]
    e01c:	9303      	str	r3, [sp, #12]
    e01e:	e015      	b.n	e04c <Socket_ReadSocketData+0x84>
    e020:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    e022:	2301      	movs	r3, #1
    e024:	e01c      	b.n	e060 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    e026:	3301      	adds	r3, #1
    e028:	2200      	movs	r2, #0
    e02a:	2100      	movs	r1, #0
    e02c:	2000      	movs	r0, #0
    e02e:	4c25      	ldr	r4, [pc, #148]	; (e0c4 <Socket_ReadSocketData+0xfc>)
    e030:	47a0      	blx	r4
    e032:	e03d      	b.n	e0b0 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    e034:	4824      	ldr	r0, [pc, #144]	; (e0c8 <Socket_ReadSocketData+0x100>)
    e036:	4d25      	ldr	r5, [pc, #148]	; (e0cc <Socket_ReadSocketData+0x104>)
    e038:	47a8      	blx	r5
    e03a:	0021      	movs	r1, r4
    e03c:	4824      	ldr	r0, [pc, #144]	; (e0d0 <Socket_ReadSocketData+0x108>)
    e03e:	47a8      	blx	r5
    e040:	200d      	movs	r0, #13
    e042:	4b24      	ldr	r3, [pc, #144]	; (e0d4 <Socket_ReadSocketData+0x10c>)
    e044:	4798      	blx	r3
				break;
    e046:	e033      	b.n	e0b0 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    e048:	2c00      	cmp	r4, #0
    e04a:	d031      	beq.n	e0b0 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    e04c:	465b      	mov	r3, fp
    e04e:	889b      	ldrh	r3, [r3, #4]
    e050:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    e052:	b21b      	sxth	r3, r3
    e054:	2b00      	cmp	r3, #0
    e056:	dde3      	ble.n	e020 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    e058:	9b03      	ldr	r3, [sp, #12]
    e05a:	889d      	ldrh	r5, [r3, #4]
    e05c:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    e05e:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    e060:	4a17      	ldr	r2, [pc, #92]	; (e0c0 <Socket_ReadSocketData+0xf8>)
    e062:	4651      	mov	r1, sl
    e064:	5889      	ldr	r1, [r1, r2]
    e066:	002a      	movs	r2, r5
    e068:	9800      	ldr	r0, [sp, #0]
    e06a:	4f16      	ldr	r7, [pc, #88]	; (e0c4 <Socket_ReadSocketData+0xfc>)
    e06c:	47b8      	blx	r7
    e06e:	2800      	cmp	r0, #0
    e070:	d1e0      	bne.n	e034 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    e072:	4b13      	ldr	r3, [pc, #76]	; (e0c0 <Socket_ReadSocketData+0xf8>)
    e074:	4652      	mov	r2, sl
    e076:	58d3      	ldr	r3, [r2, r3]
    e078:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    e07a:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    e07c:	88f3      	ldrh	r3, [r6, #6]
    e07e:	1b5b      	subs	r3, r3, r5
    e080:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    e082:	4b15      	ldr	r3, [pc, #84]	; (e0d8 <Socket_ReadSocketData+0x110>)
    e084:	681b      	ldr	r3, [r3, #0]
    e086:	2b00      	cmp	r3, #0
    e088:	d005      	beq.n	e096 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    e08a:	4b13      	ldr	r3, [pc, #76]	; (e0d8 <Socket_ReadSocketData+0x110>)
    e08c:	681b      	ldr	r3, [r3, #0]
    e08e:	0032      	movs	r2, r6
    e090:	9902      	ldr	r1, [sp, #8]
    e092:	9801      	ldr	r0, [sp, #4]
    e094:	4798      	blx	r3
				u16ReadCount -= u16Read;
    e096:	1b64      	subs	r4, r4, r5
    e098:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    e09a:	9b00      	ldr	r3, [sp, #0]
    e09c:	469c      	mov	ip, r3
    e09e:	44ac      	add	ip, r5
    e0a0:	4663      	mov	r3, ip
    e0a2:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    e0a4:	4643      	mov	r3, r8
    e0a6:	781b      	ldrb	r3, [r3, #0]
    e0a8:	2b00      	cmp	r3, #0
    e0aa:	d1cd      	bne.n	e048 <Socket_ReadSocketData+0x80>
    e0ac:	2c00      	cmp	r4, #0
    e0ae:	d1ba      	bne.n	e026 <Socket_ReadSocketData+0x5e>
	}
}
    e0b0:	b005      	add	sp, #20
    e0b2:	bc3c      	pop	{r2, r3, r4, r5}
    e0b4:	4690      	mov	r8, r2
    e0b6:	4699      	mov	r9, r3
    e0b8:	46a2      	mov	sl, r4
    e0ba:	46ab      	mov	fp, r5
    e0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0be:	46c0      	nop			; (mov r8, r8)
    e0c0:	20001148 	.word	0x20001148
    e0c4:	0000c36d 	.word	0x0000c36d
    e0c8:	0001b7c0 	.word	0x0001b7c0
    e0cc:	0001916d 	.word	0x0001916d
    e0d0:	0001c25c 	.word	0x0001c25c
    e0d4:	000191a1 	.word	0x000191a1
    e0d8:	200011f8 	.word	0x200011f8

0000e0dc <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    e0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0de:	46d6      	mov	lr, sl
    e0e0:	464f      	mov	r7, r9
    e0e2:	4646      	mov	r6, r8
    e0e4:	b5c0      	push	{r6, r7, lr}
    e0e6:	b09a      	sub	sp, #104	; 0x68
    e0e8:	000d      	movs	r5, r1
    e0ea:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    e0ec:	2841      	cmp	r0, #65	; 0x41
    e0ee:	d039      	beq.n	e164 <m2m_ip_cb+0x88>
    e0f0:	2854      	cmp	r0, #84	; 0x54
    e0f2:	d037      	beq.n	e164 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    e0f4:	2842      	cmp	r0, #66	; 0x42
    e0f6:	d053      	beq.n	e1a0 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    e0f8:	2843      	cmp	r0, #67	; 0x43
    e0fa:	d06a      	beq.n	e1d2 <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    e0fc:	2844      	cmp	r0, #68	; 0x44
    e0fe:	d100      	bne.n	e102 <m2m_ip_cb+0x26>
    e100:	e0af      	b.n	e262 <m2m_ip_cb+0x186>
    e102:	284b      	cmp	r0, #75	; 0x4b
    e104:	d100      	bne.n	e108 <m2m_ip_cb+0x2c>
    e106:	e0ac      	b.n	e262 <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    e108:	284a      	cmp	r0, #74	; 0x4a
    e10a:	d100      	bne.n	e10e <m2m_ip_cb+0x32>
    e10c:	e0cf      	b.n	e2ae <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    e10e:	2846      	cmp	r0, #70	; 0x46
    e110:	d100      	bne.n	e114 <m2m_ip_cb+0x38>
    e112:	e0e5      	b.n	e2e0 <m2m_ip_cb+0x204>
    e114:	2848      	cmp	r0, #72	; 0x48
    e116:	d100      	bne.n	e11a <m2m_ip_cb+0x3e>
    e118:	e10e      	b.n	e338 <m2m_ip_cb+0x25c>
    e11a:	284d      	cmp	r0, #77	; 0x4d
    e11c:	d100      	bne.n	e120 <m2m_ip_cb+0x44>
    e11e:	e0dc      	b.n	e2da <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    e120:	2845      	cmp	r0, #69	; 0x45
    e122:	d100      	bne.n	e126 <m2m_ip_cb+0x4a>
    e124:	e12c      	b.n	e380 <m2m_ip_cb+0x2a4>
    e126:	2847      	cmp	r0, #71	; 0x47
    e128:	d100      	bne.n	e12c <m2m_ip_cb+0x50>
    e12a:	e14d      	b.n	e3c8 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    e12c:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    e12e:	284c      	cmp	r0, #76	; 0x4c
    e130:	d100      	bne.n	e134 <m2m_ip_cb+0x58>
    e132:	e126      	b.n	e382 <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    e134:	2852      	cmp	r0, #82	; 0x52
    e136:	d12d      	bne.n	e194 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    e138:	2301      	movs	r3, #1
    e13a:	2214      	movs	r2, #20
    e13c:	a909      	add	r1, sp, #36	; 0x24
    e13e:	0020      	movs	r0, r4
    e140:	4ca2      	ldr	r4, [pc, #648]	; (e3cc <m2m_ip_cb+0x2f0>)
    e142:	47a0      	blx	r4
    e144:	2800      	cmp	r0, #0
    e146:	d125      	bne.n	e194 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    e148:	4ba1      	ldr	r3, [pc, #644]	; (e3d0 <m2m_ip_cb+0x2f4>)
    e14a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e14c:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    e14e:	681b      	ldr	r3, [r3, #0]
    e150:	2b00      	cmp	r3, #0
    e152:	d01f      	beq.n	e194 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    e154:	4b9e      	ldr	r3, [pc, #632]	; (e3d0 <m2m_ip_cb+0x2f4>)
    e156:	681c      	ldr	r4, [r3, #0]
    e158:	ab09      	add	r3, sp, #36	; 0x24
    e15a:	7c1a      	ldrb	r2, [r3, #16]
    e15c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e15e:	9809      	ldr	r0, [sp, #36]	; 0x24
    e160:	47a0      	blx	r4
			}
		}
	}
}
    e162:	e017      	b.n	e194 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    e164:	2300      	movs	r3, #0
    e166:	2204      	movs	r2, #4
    e168:	a909      	add	r1, sp, #36	; 0x24
    e16a:	0020      	movs	r0, r4
    e16c:	4c97      	ldr	r4, [pc, #604]	; (e3cc <m2m_ip_cb+0x2f0>)
    e16e:	47a0      	blx	r4
    e170:	2800      	cmp	r0, #0
    e172:	d10f      	bne.n	e194 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    e174:	ab09      	add	r3, sp, #36	; 0x24
    e176:	785a      	ldrb	r2, [r3, #1]
    e178:	ab05      	add	r3, sp, #20
    e17a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    e17c:	4b95      	ldr	r3, [pc, #596]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e17e:	681b      	ldr	r3, [r3, #0]
    e180:	2b00      	cmp	r3, #0
    e182:	d007      	beq.n	e194 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    e184:	4b93      	ldr	r3, [pc, #588]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e186:	681b      	ldr	r3, [r3, #0]
    e188:	aa09      	add	r2, sp, #36	; 0x24
    e18a:	2000      	movs	r0, #0
    e18c:	5610      	ldrsb	r0, [r2, r0]
    e18e:	aa05      	add	r2, sp, #20
    e190:	2101      	movs	r1, #1
    e192:	4798      	blx	r3
}
    e194:	b01a      	add	sp, #104	; 0x68
    e196:	bc1c      	pop	{r2, r3, r4}
    e198:	4690      	mov	r8, r2
    e19a:	4699      	mov	r9, r3
    e19c:	46a2      	mov	sl, r4
    e19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    e1a0:	2300      	movs	r3, #0
    e1a2:	2204      	movs	r2, #4
    e1a4:	a909      	add	r1, sp, #36	; 0x24
    e1a6:	0020      	movs	r0, r4
    e1a8:	4c88      	ldr	r4, [pc, #544]	; (e3cc <m2m_ip_cb+0x2f0>)
    e1aa:	47a0      	blx	r4
    e1ac:	2800      	cmp	r0, #0
    e1ae:	d1f1      	bne.n	e194 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    e1b0:	ab09      	add	r3, sp, #36	; 0x24
    e1b2:	785a      	ldrb	r2, [r3, #1]
    e1b4:	ab05      	add	r3, sp, #20
    e1b6:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    e1b8:	4b86      	ldr	r3, [pc, #536]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e1ba:	681b      	ldr	r3, [r3, #0]
    e1bc:	2b00      	cmp	r3, #0
    e1be:	d0e9      	beq.n	e194 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    e1c0:	4b84      	ldr	r3, [pc, #528]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e1c2:	681b      	ldr	r3, [r3, #0]
    e1c4:	aa09      	add	r2, sp, #36	; 0x24
    e1c6:	2000      	movs	r0, #0
    e1c8:	5610      	ldrsb	r0, [r2, r0]
    e1ca:	aa05      	add	r2, sp, #20
    e1cc:	2102      	movs	r1, #2
    e1ce:	4798      	blx	r3
    e1d0:	e7e0      	b.n	e194 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    e1d2:	2300      	movs	r3, #0
    e1d4:	220c      	movs	r2, #12
    e1d6:	a905      	add	r1, sp, #20
    e1d8:	0020      	movs	r0, r4
    e1da:	4c7c      	ldr	r4, [pc, #496]	; (e3cc <m2m_ip_cb+0x2f0>)
    e1dc:	47a0      	blx	r4
    e1de:	2800      	cmp	r0, #0
    e1e0:	d1d8      	bne.n	e194 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    e1e2:	ab05      	add	r3, sp, #20
    e1e4:	2209      	movs	r2, #9
    e1e6:	569a      	ldrsb	r2, [r3, r2]
    e1e8:	2a00      	cmp	r2, #0
    e1ea:	db24      	blt.n	e236 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    e1ec:	0018      	movs	r0, r3
    e1ee:	2108      	movs	r1, #8
    e1f0:	5659      	ldrsb	r1, [r3, r1]
    e1f2:	4b79      	ldr	r3, [pc, #484]	; (e3d8 <m2m_ip_cb+0x2fc>)
    e1f4:	0109      	lsls	r1, r1, #4
    e1f6:	1859      	adds	r1, r3, r1
    e1f8:	7ac9      	ldrb	r1, [r1, #11]
    e1fa:	b2c9      	uxtb	r1, r1
    e1fc:	0114      	lsls	r4, r2, #4
    e1fe:	191b      	adds	r3, r3, r4
    e200:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    e202:	2101      	movs	r1, #1
    e204:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    e206:	8941      	ldrh	r1, [r0, #10]
    e208:	3908      	subs	r1, #8
    e20a:	b289      	uxth	r1, r1
    e20c:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    e20e:	4973      	ldr	r1, [pc, #460]	; (e3dc <m2m_ip_cb+0x300>)
    e210:	880b      	ldrh	r3, [r1, #0]
    e212:	3301      	adds	r3, #1
    e214:	b29b      	uxth	r3, r3
    e216:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    e218:	880b      	ldrh	r3, [r1, #0]
    e21a:	b29b      	uxth	r3, r3
    e21c:	2b00      	cmp	r3, #0
    e21e:	d103      	bne.n	e228 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    e220:	880b      	ldrh	r3, [r1, #0]
    e222:	3301      	adds	r3, #1
    e224:	b29b      	uxth	r3, r3
    e226:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    e228:	4b6c      	ldr	r3, [pc, #432]	; (e3dc <m2m_ip_cb+0x300>)
    e22a:	8819      	ldrh	r1, [r3, #0]
    e22c:	b289      	uxth	r1, r1
    e22e:	0110      	lsls	r0, r2, #4
    e230:	4b69      	ldr	r3, [pc, #420]	; (e3d8 <m2m_ip_cb+0x2fc>)
    e232:	181b      	adds	r3, r3, r0
    e234:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    e236:	ab09      	add	r3, sp, #36	; 0x24
    e238:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    e23a:	2202      	movs	r2, #2
    e23c:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    e23e:	aa05      	add	r2, sp, #20
    e240:	8851      	ldrh	r1, [r2, #2]
    e242:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    e244:	9a06      	ldr	r2, [sp, #24]
    e246:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    e248:	4b62      	ldr	r3, [pc, #392]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e24a:	681b      	ldr	r3, [r3, #0]
    e24c:	2b00      	cmp	r3, #0
    e24e:	d0a1      	beq.n	e194 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    e250:	4b60      	ldr	r3, [pc, #384]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e252:	681b      	ldr	r3, [r3, #0]
    e254:	aa05      	add	r2, sp, #20
    e256:	2008      	movs	r0, #8
    e258:	5610      	ldrsb	r0, [r2, r0]
    e25a:	aa09      	add	r2, sp, #36	; 0x24
    e25c:	2104      	movs	r1, #4
    e25e:	4798      	blx	r3
    e260:	e798      	b.n	e194 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    e262:	2300      	movs	r3, #0
    e264:	2204      	movs	r2, #4
    e266:	a909      	add	r1, sp, #36	; 0x24
    e268:	0020      	movs	r0, r4
    e26a:	4c58      	ldr	r4, [pc, #352]	; (e3cc <m2m_ip_cb+0x2f0>)
    e26c:	47a0      	blx	r4
    e26e:	2800      	cmp	r0, #0
    e270:	d000      	beq.n	e274 <m2m_ip_cb+0x198>
    e272:	e78f      	b.n	e194 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    e274:	ab09      	add	r3, sp, #36	; 0x24
    e276:	2000      	movs	r0, #0
    e278:	5618      	ldrsb	r0, [r3, r0]
    e27a:	aa05      	add	r2, sp, #20
    e27c:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    e27e:	785b      	ldrb	r3, [r3, #1]
    e280:	b25b      	sxtb	r3, r3
    e282:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    e284:	2b00      	cmp	r3, #0
    e286:	d107      	bne.n	e298 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    e288:	ab09      	add	r3, sp, #36	; 0x24
    e28a:	885b      	ldrh	r3, [r3, #2]
    e28c:	3b08      	subs	r3, #8
    e28e:	b29b      	uxth	r3, r3
    e290:	0101      	lsls	r1, r0, #4
    e292:	4a51      	ldr	r2, [pc, #324]	; (e3d8 <m2m_ip_cb+0x2fc>)
    e294:	1852      	adds	r2, r2, r1
    e296:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    e298:	4b4e      	ldr	r3, [pc, #312]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e29a:	681b      	ldr	r3, [r3, #0]
    e29c:	2b00      	cmp	r3, #0
    e29e:	d100      	bne.n	e2a2 <m2m_ip_cb+0x1c6>
    e2a0:	e778      	b.n	e194 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    e2a2:	4b4c      	ldr	r3, [pc, #304]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e2a4:	681b      	ldr	r3, [r3, #0]
    e2a6:	aa05      	add	r2, sp, #20
    e2a8:	2105      	movs	r1, #5
    e2aa:	4798      	blx	r3
	{
    e2ac:	e772      	b.n	e194 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    e2ae:	2300      	movs	r3, #0
    e2b0:	2244      	movs	r2, #68	; 0x44
    e2b2:	a909      	add	r1, sp, #36	; 0x24
    e2b4:	0020      	movs	r0, r4
    e2b6:	4c45      	ldr	r4, [pc, #276]	; (e3cc <m2m_ip_cb+0x2f0>)
    e2b8:	47a0      	blx	r4
    e2ba:	2800      	cmp	r0, #0
    e2bc:	d000      	beq.n	e2c0 <m2m_ip_cb+0x1e4>
    e2be:	e769      	b.n	e194 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    e2c0:	4b47      	ldr	r3, [pc, #284]	; (e3e0 <m2m_ip_cb+0x304>)
    e2c2:	681b      	ldr	r3, [r3, #0]
    e2c4:	2b00      	cmp	r3, #0
    e2c6:	d100      	bne.n	e2ca <m2m_ip_cb+0x1ee>
    e2c8:	e764      	b.n	e194 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    e2ca:	4b45      	ldr	r3, [pc, #276]	; (e3e0 <m2m_ip_cb+0x304>)
    e2cc:	681b      	ldr	r3, [r3, #0]
    e2ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
    e2d0:	9203      	str	r2, [sp, #12]
    e2d2:	0011      	movs	r1, r2
    e2d4:	a809      	add	r0, sp, #36	; 0x24
    e2d6:	4798      	blx	r3
    e2d8:	e75c      	b.n	e194 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    e2da:	2306      	movs	r3, #6
    e2dc:	469a      	mov	sl, r3
    e2de:	e001      	b.n	e2e4 <m2m_ip_cb+0x208>
    e2e0:	2306      	movs	r3, #6
    e2e2:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    e2e4:	2300      	movs	r3, #0
    e2e6:	2210      	movs	r2, #16
    e2e8:	a905      	add	r1, sp, #20
    e2ea:	0020      	movs	r0, r4
    e2ec:	4f37      	ldr	r7, [pc, #220]	; (e3cc <m2m_ip_cb+0x2f0>)
    e2ee:	47b8      	blx	r7
    e2f0:	2800      	cmp	r0, #0
    e2f2:	d000      	beq.n	e2f6 <m2m_ip_cb+0x21a>
    e2f4:	e74e      	b.n	e194 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    e2f6:	aa05      	add	r2, sp, #20
    e2f8:	200c      	movs	r0, #12
    e2fa:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    e2fc:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    e2fe:	0107      	lsls	r7, r0, #4
    e300:	4935      	ldr	r1, [pc, #212]	; (e3d8 <m2m_ip_cb+0x2fc>)
    e302:	19c9      	adds	r1, r1, r7
    e304:	2700      	movs	r7, #0
    e306:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    e308:	2608      	movs	r6, #8
    e30a:	5f97      	ldrsh	r7, [r2, r6]
    e30c:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    e30e:	8957      	ldrh	r7, [r2, #10]
    e310:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    e312:	af09      	add	r7, sp, #36	; 0x24
    e314:	8856      	ldrh	r6, [r2, #2]
    e316:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    e318:	9a06      	ldr	r2, [sp, #24]
    e31a:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    e31c:	88ca      	ldrh	r2, [r1, #6]
    e31e:	b292      	uxth	r2, r2
    e320:	4293      	cmp	r3, r2
    e322:	d00c      	beq.n	e33e <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    e324:	2d10      	cmp	r5, #16
    e326:	d800      	bhi.n	e32a <m2m_ip_cb+0x24e>
    e328:	e734      	b.n	e194 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    e32a:	2301      	movs	r3, #1
    e32c:	2200      	movs	r2, #0
    e32e:	2100      	movs	r1, #0
    e330:	2000      	movs	r0, #0
    e332:	4c26      	ldr	r4, [pc, #152]	; (e3cc <m2m_ip_cb+0x2f0>)
    e334:	47a0      	blx	r4
	{
    e336:	e72d      	b.n	e194 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    e338:	2309      	movs	r3, #9
    e33a:	469a      	mov	sl, r3
    e33c:	e7d2      	b.n	e2e4 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    e33e:	4643      	mov	r3, r8
    e340:	2b00      	cmp	r3, #0
    e342:	dd01      	ble.n	e348 <m2m_ip_cb+0x26c>
    e344:	45a8      	cmp	r8, r5
    e346:	db0f      	blt.n	e368 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    e348:	ab09      	add	r3, sp, #36	; 0x24
    e34a:	4642      	mov	r2, r8
    e34c:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    e34e:	2300      	movs	r3, #0
    e350:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    e352:	4b20      	ldr	r3, [pc, #128]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e354:	681b      	ldr	r3, [r3, #0]
    e356:	2b00      	cmp	r3, #0
    e358:	d100      	bne.n	e35c <m2m_ip_cb+0x280>
    e35a:	e71b      	b.n	e194 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    e35c:	4b1d      	ldr	r3, [pc, #116]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e35e:	681b      	ldr	r3, [r3, #0]
    e360:	aa09      	add	r2, sp, #36	; 0x24
    e362:	4651      	mov	r1, sl
    e364:	4798      	blx	r3
    e366:	e715      	b.n	e194 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    e368:	0023      	movs	r3, r4
    e36a:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    e36c:	4642      	mov	r2, r8
    e36e:	4669      	mov	r1, sp
    e370:	818a      	strh	r2, [r1, #12]
    e372:	898a      	ldrh	r2, [r1, #12]
    e374:	9200      	str	r2, [sp, #0]
    e376:	4652      	mov	r2, sl
    e378:	0039      	movs	r1, r7
    e37a:	4c1a      	ldr	r4, [pc, #104]	; (e3e4 <m2m_ip_cb+0x308>)
    e37c:	47a0      	blx	r4
    e37e:	e709      	b.n	e194 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    e380:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    e382:	2300      	movs	r3, #0
    e384:	2208      	movs	r2, #8
    e386:	a909      	add	r1, sp, #36	; 0x24
    e388:	0020      	movs	r0, r4
    e38a:	4c10      	ldr	r4, [pc, #64]	; (e3cc <m2m_ip_cb+0x2f0>)
    e38c:	47a0      	blx	r4
    e38e:	2800      	cmp	r0, #0
    e390:	d000      	beq.n	e394 <m2m_ip_cb+0x2b8>
    e392:	e6ff      	b.n	e194 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    e394:	ab09      	add	r3, sp, #36	; 0x24
    e396:	2000      	movs	r0, #0
    e398:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    e39a:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    e39c:	8859      	ldrh	r1, [r3, #2]
    e39e:	ab05      	add	r3, sp, #20
    e3a0:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    e3a2:	0101      	lsls	r1, r0, #4
    e3a4:	4b0c      	ldr	r3, [pc, #48]	; (e3d8 <m2m_ip_cb+0x2fc>)
    e3a6:	185b      	adds	r3, r3, r1
    e3a8:	88db      	ldrh	r3, [r3, #6]
    e3aa:	b29b      	uxth	r3, r3
    e3ac:	429a      	cmp	r2, r3
    e3ae:	d000      	beq.n	e3b2 <m2m_ip_cb+0x2d6>
    e3b0:	e6f0      	b.n	e194 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    e3b2:	4b08      	ldr	r3, [pc, #32]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e3b4:	681b      	ldr	r3, [r3, #0]
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d100      	bne.n	e3bc <m2m_ip_cb+0x2e0>
    e3ba:	e6eb      	b.n	e194 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    e3bc:	4b05      	ldr	r3, [pc, #20]	; (e3d4 <m2m_ip_cb+0x2f8>)
    e3be:	681b      	ldr	r3, [r3, #0]
    e3c0:	aa05      	add	r2, sp, #20
    e3c2:	0029      	movs	r1, r5
    e3c4:	4798      	blx	r3
	{
    e3c6:	e6e5      	b.n	e194 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    e3c8:	2508      	movs	r5, #8
    e3ca:	e7da      	b.n	e382 <m2m_ip_cb+0x2a6>
    e3cc:	0000c36d 	.word	0x0000c36d
    e3d0:	200011fc 	.word	0x200011fc
    e3d4:	200011f8 	.word	0x200011f8
    e3d8:	20001148 	.word	0x20001148
    e3dc:	20000502 	.word	0x20000502
    e3e0:	20001200 	.word	0x20001200
    e3e4:	0000dfc9 	.word	0x0000dfc9

0000e3e8 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    e3e8:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    e3ea:	4b0a      	ldr	r3, [pc, #40]	; (e414 <socketInit+0x2c>)
    e3ec:	781b      	ldrb	r3, [r3, #0]
    e3ee:	2b00      	cmp	r3, #0
    e3f0:	d000      	beq.n	e3f4 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    e3f2:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    e3f4:	22b0      	movs	r2, #176	; 0xb0
    e3f6:	2100      	movs	r1, #0
    e3f8:	4807      	ldr	r0, [pc, #28]	; (e418 <socketInit+0x30>)
    e3fa:	4b08      	ldr	r3, [pc, #32]	; (e41c <socketInit+0x34>)
    e3fc:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    e3fe:	4908      	ldr	r1, [pc, #32]	; (e420 <socketInit+0x38>)
    e400:	2002      	movs	r0, #2
    e402:	4b08      	ldr	r3, [pc, #32]	; (e424 <socketInit+0x3c>)
    e404:	4798      	blx	r3
		gbSocketInit	= 1;
    e406:	2201      	movs	r2, #1
    e408:	4b02      	ldr	r3, [pc, #8]	; (e414 <socketInit+0x2c>)
    e40a:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    e40c:	2200      	movs	r2, #0
    e40e:	4b06      	ldr	r3, [pc, #24]	; (e428 <socketInit+0x40>)
    e410:	801a      	strh	r2, [r3, #0]
}
    e412:	e7ee      	b.n	e3f2 <socketInit+0xa>
    e414:	20000501 	.word	0x20000501
    e418:	20001148 	.word	0x20001148
    e41c:	0000bbc5 	.word	0x0000bbc5
    e420:	0000e0dd 	.word	0x0000e0dd
    e424:	0000c459 	.word	0x0000c459
    e428:	20000502 	.word	0x20000502

0000e42c <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    e42c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    e42e:	22b0      	movs	r2, #176	; 0xb0
    e430:	2100      	movs	r1, #0
    e432:	4807      	ldr	r0, [pc, #28]	; (e450 <socketDeinit+0x24>)
    e434:	4b07      	ldr	r3, [pc, #28]	; (e454 <socketDeinit+0x28>)
    e436:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    e438:	2100      	movs	r1, #0
    e43a:	2002      	movs	r0, #2
    e43c:	4b06      	ldr	r3, [pc, #24]	; (e458 <socketDeinit+0x2c>)
    e43e:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    e440:	2300      	movs	r3, #0
    e442:	4a06      	ldr	r2, [pc, #24]	; (e45c <socketDeinit+0x30>)
    e444:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    e446:	4a06      	ldr	r2, [pc, #24]	; (e460 <socketDeinit+0x34>)
    e448:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    e44a:	4a06      	ldr	r2, [pc, #24]	; (e464 <socketDeinit+0x38>)
    e44c:	7013      	strb	r3, [r2, #0]
}
    e44e:	bd10      	pop	{r4, pc}
    e450:	20001148 	.word	0x20001148
    e454:	0000bbc5 	.word	0x0000bbc5
    e458:	0000c459 	.word	0x0000c459
    e45c:	200011f8 	.word	0x200011f8
    e460:	20001200 	.word	0x20001200
    e464:	20000501 	.word	0x20000501

0000e468 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    e468:	4b02      	ldr	r3, [pc, #8]	; (e474 <registerSocketCallback+0xc>)
    e46a:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    e46c:	4b02      	ldr	r3, [pc, #8]	; (e478 <registerSocketCallback+0x10>)
    e46e:	6019      	str	r1, [r3, #0]
}
    e470:	4770      	bx	lr
    e472:	46c0      	nop			; (mov r8, r8)
    e474:	200011f8 	.word	0x200011f8
    e478:	20001200 	.word	0x20001200

0000e47c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    e47c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e47e:	46d6      	mov	lr, sl
    e480:	4647      	mov	r7, r8
    e482:	b580      	push	{r7, lr}
    e484:	b089      	sub	sp, #36	; 0x24
    e486:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    e488:	2802      	cmp	r0, #2
    e48a:	d000      	beq.n	e48e <socket+0x12>
    e48c:	e09c      	b.n	e5c8 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    e48e:	2901      	cmp	r1, #1
    e490:	d00a      	beq.n	e4a8 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    e492:	2902      	cmp	r1, #2
    e494:	d100      	bne.n	e498 <socket+0x1c>
    e496:	e070      	b.n	e57a <socket+0xfe>
	SOCKET					sock = -1;
    e498:	2501      	movs	r5, #1
    e49a:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    e49c:	0028      	movs	r0, r5
    e49e:	b009      	add	sp, #36	; 0x24
    e4a0:	bc0c      	pop	{r2, r3}
    e4a2:	4690      	mov	r8, r2
    e4a4:	469a      	mov	sl, r3
    e4a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    e4a8:	4c49      	ldr	r4, [pc, #292]	; (e5d0 <socket+0x154>)
    e4aa:	7827      	ldrb	r7, [r4, #0]
    e4ac:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    e4ae:	7826      	ldrb	r6, [r4, #0]
    e4b0:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    e4b2:	7820      	ldrb	r0, [r4, #0]
    e4b4:	3001      	adds	r0, #1
    e4b6:	3106      	adds	r1, #6
    e4b8:	4b46      	ldr	r3, [pc, #280]	; (e5d4 <socket+0x158>)
    e4ba:	4798      	blx	r3
    e4bc:	b2c9      	uxtb	r1, r1
    e4be:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    e4c0:	0132      	lsls	r2, r6, #4
    e4c2:	4b45      	ldr	r3, [pc, #276]	; (e5d8 <socket+0x15c>)
    e4c4:	189b      	adds	r3, r3, r2
    e4c6:	7a9b      	ldrb	r3, [r3, #10]
    e4c8:	2506      	movs	r5, #6
    e4ca:	2b00      	cmp	r3, #0
    e4cc:	d018      	beq.n	e500 <socket+0x84>
				u8SockID	= u8NextTcpSock;
    e4ce:	4e40      	ldr	r6, [pc, #256]	; (e5d0 <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    e4d0:	4b40      	ldr	r3, [pc, #256]	; (e5d4 <socket+0x158>)
    e4d2:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    e4d4:	4b40      	ldr	r3, [pc, #256]	; (e5d8 <socket+0x15c>)
    e4d6:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    e4d8:	7837      	ldrb	r7, [r6, #0]
    e4da:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    e4dc:	7834      	ldrb	r4, [r6, #0]
    e4de:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    e4e0:	7830      	ldrb	r0, [r6, #0]
    e4e2:	3001      	adds	r0, #1
    e4e4:	2107      	movs	r1, #7
    e4e6:	47d0      	blx	sl
    e4e8:	b2c9      	uxtb	r1, r1
    e4ea:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    e4ec:	0123      	lsls	r3, r4, #4
    e4ee:	4443      	add	r3, r8
    e4f0:	7a9b      	ldrb	r3, [r3, #10]
    e4f2:	2b00      	cmp	r3, #0
    e4f4:	d007      	beq.n	e506 <socket+0x8a>
    e4f6:	3d01      	subs	r5, #1
    e4f8:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    e4fa:	2d00      	cmp	r5, #0
    e4fc:	d1ec      	bne.n	e4d8 <socket+0x5c>
    e4fe:	e7cb      	b.n	e498 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    e500:	4b35      	ldr	r3, [pc, #212]	; (e5d8 <socket+0x15c>)
    e502:	18d4      	adds	r4, r2, r3
    e504:	e002      	b.n	e50c <socket+0x90>
    e506:	0124      	lsls	r4, r4, #4
    e508:	4b33      	ldr	r3, [pc, #204]	; (e5d8 <socket+0x15c>)
    e50a:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    e50c:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    e50e:	2d00      	cmp	r5, #0
    e510:	dbc4      	blt.n	e49c <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    e512:	2210      	movs	r2, #16
    e514:	2100      	movs	r1, #0
    e516:	0020      	movs	r0, r4
    e518:	4b30      	ldr	r3, [pc, #192]	; (e5dc <socket+0x160>)
    e51a:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    e51c:	2301      	movs	r3, #1
    e51e:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    e520:	4a2f      	ldr	r2, [pc, #188]	; (e5e0 <socket+0x164>)
    e522:	8813      	ldrh	r3, [r2, #0]
    e524:	3301      	adds	r3, #1
    e526:	b29b      	uxth	r3, r3
    e528:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    e52a:	8813      	ldrh	r3, [r2, #0]
    e52c:	b29b      	uxth	r3, r3
    e52e:	2b00      	cmp	r3, #0
    e530:	d103      	bne.n	e53a <socket+0xbe>
				++gu16SessionID;
    e532:	8813      	ldrh	r3, [r2, #0]
    e534:	3301      	adds	r3, #1
    e536:	b29b      	uxth	r3, r3
    e538:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    e53a:	4e29      	ldr	r6, [pc, #164]	; (e5e0 <socket+0x164>)
    e53c:	8833      	ldrh	r3, [r6, #0]
    e53e:	b29b      	uxth	r3, r3
    e540:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    e542:	4828      	ldr	r0, [pc, #160]	; (e5e4 <socket+0x168>)
    e544:	4f28      	ldr	r7, [pc, #160]	; (e5e8 <socket+0x16c>)
    e546:	47b8      	blx	r7
    e548:	8832      	ldrh	r2, [r6, #0]
    e54a:	b292      	uxth	r2, r2
    e54c:	0029      	movs	r1, r5
    e54e:	4827      	ldr	r0, [pc, #156]	; (e5ec <socket+0x170>)
    e550:	47b8      	blx	r7
    e552:	200d      	movs	r0, #13
    e554:	4b26      	ldr	r3, [pc, #152]	; (e5f0 <socket+0x174>)
    e556:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    e558:	9b05      	ldr	r3, [sp, #20]
    e55a:	07db      	lsls	r3, r3, #31
    e55c:	d59e      	bpl.n	e49c <socket+0x20>
				strSSLCreate.sslSock = sock;
    e55e:	aa07      	add	r2, sp, #28
    e560:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    e562:	2321      	movs	r3, #33	; 0x21
    e564:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    e566:	2300      	movs	r3, #0
    e568:	9302      	str	r3, [sp, #8]
    e56a:	9301      	str	r3, [sp, #4]
    e56c:	9300      	str	r3, [sp, #0]
    e56e:	3304      	adds	r3, #4
    e570:	2150      	movs	r1, #80	; 0x50
    e572:	2002      	movs	r0, #2
    e574:	4c1f      	ldr	r4, [pc, #124]	; (e5f4 <socket+0x178>)
    e576:	47a0      	blx	r4
    e578:	e790      	b.n	e49c <socket+0x20>
				u8SockID		= u8NextUdpSock;
    e57a:	4b1f      	ldr	r3, [pc, #124]	; (e5f8 <socket+0x17c>)
    e57c:	781d      	ldrb	r5, [r3, #0]
    e57e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    e580:	781c      	ldrb	r4, [r3, #0]
    e582:	0124      	lsls	r4, r4, #4
    e584:	4a1d      	ldr	r2, [pc, #116]	; (e5fc <socket+0x180>)
    e586:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    e588:	7819      	ldrb	r1, [r3, #0]
    e58a:	3101      	adds	r1, #1
    e58c:	2203      	movs	r2, #3
    e58e:	400a      	ands	r2, r1
    e590:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    e592:	7aa3      	ldrb	r3, [r4, #10]
    e594:	2b00      	cmp	r3, #0
    e596:	d014      	beq.n	e5c2 <socket+0x146>
    e598:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    e59a:	4917      	ldr	r1, [pc, #92]	; (e5f8 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    e59c:	4f17      	ldr	r7, [pc, #92]	; (e5fc <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    e59e:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    e5a0:	780d      	ldrb	r5, [r1, #0]
    e5a2:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    e5a4:	780c      	ldrb	r4, [r1, #0]
    e5a6:	0124      	lsls	r4, r4, #4
    e5a8:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    e5aa:	780b      	ldrb	r3, [r1, #0]
    e5ac:	3301      	adds	r3, #1
    e5ae:	4003      	ands	r3, r0
    e5b0:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    e5b2:	7aa3      	ldrb	r3, [r4, #10]
    e5b4:	2b00      	cmp	r3, #0
    e5b6:	d004      	beq.n	e5c2 <socket+0x146>
    e5b8:	3a01      	subs	r2, #1
    e5ba:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    e5bc:	2a00      	cmp	r2, #0
    e5be:	d1ef      	bne.n	e5a0 <socket+0x124>
    e5c0:	e76a      	b.n	e498 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    e5c2:	3507      	adds	r5, #7
    e5c4:	b26d      	sxtb	r5, r5
					break;
    e5c6:	e7a2      	b.n	e50e <socket+0x92>
	SOCKET					sock = -1;
    e5c8:	2501      	movs	r5, #1
    e5ca:	426d      	negs	r5, r5
    e5cc:	e766      	b.n	e49c <socket+0x20>
    e5ce:	46c0      	nop			; (mov r8, r8)
    e5d0:	20000504 	.word	0x20000504
    e5d4:	000172f5 	.word	0x000172f5
    e5d8:	20001148 	.word	0x20001148
    e5dc:	0000bbc5 	.word	0x0000bbc5
    e5e0:	20000502 	.word	0x20000502
    e5e4:	0001b7c0 	.word	0x0001b7c0
    e5e8:	0001916d 	.word	0x0001916d
    e5ec:	0001c288 	.word	0x0001c288
    e5f0:	000191a1 	.word	0x000191a1
    e5f4:	0000bcd9 	.word	0x0000bcd9
    e5f8:	20000505 	.word	0x20000505
    e5fc:	200011b8 	.word	0x200011b8

0000e600 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    e600:	b570      	push	{r4, r5, r6, lr}
    e602:	b088      	sub	sp, #32
    e604:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    e606:	db30      	blt.n	e66a <connect+0x6a>
    e608:	2900      	cmp	r1, #0
    e60a:	d031      	beq.n	e670 <connect+0x70>
    e60c:	0100      	lsls	r0, r0, #4
    e60e:	4b1d      	ldr	r3, [pc, #116]	; (e684 <connect+0x84>)
    e610:	181b      	adds	r3, r3, r0
    e612:	7a9b      	ldrb	r3, [r3, #10]
    e614:	2b01      	cmp	r3, #1
    e616:	d12e      	bne.n	e676 <connect+0x76>
    e618:	2a00      	cmp	r2, #0
    e61a:	d02f      	beq.n	e67c <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    e61c:	4b19      	ldr	r3, [pc, #100]	; (e684 <connect+0x84>)
    e61e:	181b      	adds	r3, r3, r0
    e620:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    e622:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    e624:	07db      	lsls	r3, r3, #31
    e626:	d505      	bpl.n	e634 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    e628:	4b16      	ldr	r3, [pc, #88]	; (e684 <connect+0x84>)
    e62a:	181b      	adds	r3, r3, r0
    e62c:	7ada      	ldrb	r2, [r3, #11]
    e62e:	ab05      	add	r3, sp, #20
    e630:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    e632:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    e634:	ad05      	add	r5, sp, #20
    e636:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    e638:	2208      	movs	r2, #8
    e63a:	0028      	movs	r0, r5
    e63c:	4b12      	ldr	r3, [pc, #72]	; (e688 <connect+0x88>)
    e63e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    e640:	0124      	lsls	r4, r4, #4
    e642:	4b10      	ldr	r3, [pc, #64]	; (e684 <connect+0x84>)
    e644:	191c      	adds	r4, r3, r4
    e646:	88e3      	ldrh	r3, [r4, #6]
    e648:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    e64a:	2300      	movs	r3, #0
    e64c:	9302      	str	r3, [sp, #8]
    e64e:	9301      	str	r3, [sp, #4]
    e650:	9300      	str	r3, [sp, #0]
    e652:	330c      	adds	r3, #12
    e654:	002a      	movs	r2, r5
    e656:	0031      	movs	r1, r6
    e658:	2002      	movs	r0, #2
    e65a:	4c0c      	ldr	r4, [pc, #48]	; (e68c <connect+0x8c>)
    e65c:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    e65e:	2800      	cmp	r0, #0
    e660:	d001      	beq.n	e666 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    e662:	2009      	movs	r0, #9
    e664:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    e666:	b008      	add	sp, #32
    e668:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    e66a:	2006      	movs	r0, #6
    e66c:	4240      	negs	r0, r0
    e66e:	e7fa      	b.n	e666 <connect+0x66>
    e670:	2006      	movs	r0, #6
    e672:	4240      	negs	r0, r0
    e674:	e7f7      	b.n	e666 <connect+0x66>
    e676:	2006      	movs	r0, #6
    e678:	4240      	negs	r0, r0
    e67a:	e7f4      	b.n	e666 <connect+0x66>
    e67c:	2006      	movs	r0, #6
    e67e:	4240      	negs	r0, r0
    e680:	e7f1      	b.n	e666 <connect+0x66>
    e682:	46c0      	nop			; (mov r8, r8)
    e684:	20001148 	.word	0x20001148
    e688:	0000bbb1 	.word	0x0000bbb1
    e68c:	0000bcd9 	.word	0x0000bcd9

0000e690 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    e690:	b530      	push	{r4, r5, lr}
    e692:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    e694:	2800      	cmp	r0, #0
    e696:	db36      	blt.n	e706 <send+0x76>
    e698:	2900      	cmp	r1, #0
    e69a:	d037      	beq.n	e70c <send+0x7c>
    e69c:	23af      	movs	r3, #175	; 0xaf
    e69e:	00db      	lsls	r3, r3, #3
    e6a0:	429a      	cmp	r2, r3
    e6a2:	d836      	bhi.n	e712 <send+0x82>
    e6a4:	0104      	lsls	r4, r0, #4
    e6a6:	4b1e      	ldr	r3, [pc, #120]	; (e720 <send+0x90>)
    e6a8:	191b      	adds	r3, r3, r4
    e6aa:	7a9b      	ldrb	r3, [r3, #10]
    e6ac:	2b01      	cmp	r3, #1
    e6ae:	d133      	bne.n	e718 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    e6b0:	ab04      	add	r3, sp, #16
    e6b2:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    e6b4:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    e6b6:	0025      	movs	r5, r4
    e6b8:	4c19      	ldr	r4, [pc, #100]	; (e720 <send+0x90>)
    e6ba:	1964      	adds	r4, r4, r5
    e6bc:	88e4      	ldrh	r4, [r4, #6]
    e6be:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    e6c0:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    e6c2:	2806      	cmp	r0, #6
    e6c4:	dd00      	ble.n	e6c8 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    e6c6:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e6c8:	0104      	lsls	r4, r0, #4
    e6ca:	4b15      	ldr	r3, [pc, #84]	; (e720 <send+0x90>)
    e6cc:	191b      	adds	r3, r3, r4
    e6ce:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    e6d0:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e6d2:	07e4      	lsls	r4, r4, #31
    e6d4:	d505      	bpl.n	e6e2 <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    e6d6:	0100      	lsls	r0, r0, #4
    e6d8:	4b11      	ldr	r3, [pc, #68]	; (e720 <send+0x90>)
    e6da:	1818      	adds	r0, r3, r0
    e6dc:	8905      	ldrh	r5, [r0, #8]
    e6de:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    e6e0:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    e6e2:	2080      	movs	r0, #128	; 0x80
    e6e4:	4318      	orrs	r0, r3
    e6e6:	9502      	str	r5, [sp, #8]
    e6e8:	9201      	str	r2, [sp, #4]
    e6ea:	9100      	str	r1, [sp, #0]
    e6ec:	2310      	movs	r3, #16
    e6ee:	aa04      	add	r2, sp, #16
    e6f0:	0001      	movs	r1, r0
    e6f2:	2002      	movs	r0, #2
    e6f4:	4c0b      	ldr	r4, [pc, #44]	; (e724 <send+0x94>)
    e6f6:	47a0      	blx	r4
    e6f8:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    e6fa:	2800      	cmp	r0, #0
    e6fc:	d000      	beq.n	e700 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    e6fe:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    e700:	0018      	movs	r0, r3
    e702:	b009      	add	sp, #36	; 0x24
    e704:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    e706:	2306      	movs	r3, #6
    e708:	425b      	negs	r3, r3
    e70a:	e7f9      	b.n	e700 <send+0x70>
    e70c:	2306      	movs	r3, #6
    e70e:	425b      	negs	r3, r3
    e710:	e7f6      	b.n	e700 <send+0x70>
    e712:	2306      	movs	r3, #6
    e714:	425b      	negs	r3, r3
    e716:	e7f3      	b.n	e700 <send+0x70>
    e718:	2306      	movs	r3, #6
    e71a:	425b      	negs	r3, r3
    e71c:	e7f0      	b.n	e700 <send+0x70>
    e71e:	46c0      	nop			; (mov r8, r8)
    e720:	20001148 	.word	0x20001148
    e724:	0000bcd9 	.word	0x0000bcd9

0000e728 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    e728:	b530      	push	{r4, r5, lr}
    e72a:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    e72c:	2800      	cmp	r0, #0
    e72e:	db34      	blt.n	e79a <recv+0x72>
    e730:	2900      	cmp	r1, #0
    e732:	d035      	beq.n	e7a0 <recv+0x78>
    e734:	2a00      	cmp	r2, #0
    e736:	d036      	beq.n	e7a6 <recv+0x7e>
    e738:	0105      	lsls	r5, r0, #4
    e73a:	4c1e      	ldr	r4, [pc, #120]	; (e7b4 <recv+0x8c>)
    e73c:	1964      	adds	r4, r4, r5
    e73e:	7aa4      	ldrb	r4, [r4, #10]
    e740:	2c01      	cmp	r4, #1
    e742:	d133      	bne.n	e7ac <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    e744:	4c1b      	ldr	r4, [pc, #108]	; (e7b4 <recv+0x8c>)
    e746:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    e748:	1964      	adds	r4, r4, r5
    e74a:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    e74c:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    e74e:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    e750:	2900      	cmp	r1, #0
    e752:	d11d      	bne.n	e790 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    e754:	2101      	movs	r1, #1
    e756:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e758:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    e75a:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e75c:	07d2      	lsls	r2, r2, #31
    e75e:	d500      	bpl.n	e762 <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    e760:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    e762:	2b00      	cmp	r3, #0
    e764:	d117      	bne.n	e796 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    e766:	3b01      	subs	r3, #1
    e768:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    e76a:	aa04      	add	r2, sp, #16
    e76c:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    e76e:	0100      	lsls	r0, r0, #4
    e770:	4b10      	ldr	r3, [pc, #64]	; (e7b4 <recv+0x8c>)
    e772:	1818      	adds	r0, r3, r0
    e774:	88c3      	ldrh	r3, [r0, #6]
    e776:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    e778:	2300      	movs	r3, #0
    e77a:	9302      	str	r3, [sp, #8]
    e77c:	9301      	str	r3, [sp, #4]
    e77e:	9300      	str	r3, [sp, #0]
    e780:	3308      	adds	r3, #8
    e782:	2002      	movs	r0, #2
    e784:	4c0c      	ldr	r4, [pc, #48]	; (e7b8 <recv+0x90>)
    e786:	47a0      	blx	r4
    e788:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    e78a:	2800      	cmp	r0, #0
    e78c:	d000      	beq.n	e790 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    e78e:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    e790:	0010      	movs	r0, r2
    e792:	b007      	add	sp, #28
    e794:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    e796:	9304      	str	r3, [sp, #16]
    e798:	e7e7      	b.n	e76a <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    e79a:	2206      	movs	r2, #6
    e79c:	4252      	negs	r2, r2
    e79e:	e7f7      	b.n	e790 <recv+0x68>
    e7a0:	2206      	movs	r2, #6
    e7a2:	4252      	negs	r2, r2
    e7a4:	e7f4      	b.n	e790 <recv+0x68>
    e7a6:	2206      	movs	r2, #6
    e7a8:	4252      	negs	r2, r2
    e7aa:	e7f1      	b.n	e790 <recv+0x68>
    e7ac:	2206      	movs	r2, #6
    e7ae:	4252      	negs	r2, r2
    e7b0:	e7ee      	b.n	e790 <recv+0x68>
    e7b2:	46c0      	nop			; (mov r8, r8)
    e7b4:	20001148 	.word	0x20001148
    e7b8:	0000bcd9 	.word	0x0000bcd9

0000e7bc <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    e7bc:	b530      	push	{r4, r5, lr}
    e7be:	b087      	sub	sp, #28
    e7c0:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    e7c2:	481e      	ldr	r0, [pc, #120]	; (e83c <close+0x80>)
    e7c4:	4d1e      	ldr	r5, [pc, #120]	; (e840 <close+0x84>)
    e7c6:	47a8      	blx	r5
    e7c8:	0021      	movs	r1, r4
    e7ca:	481e      	ldr	r0, [pc, #120]	; (e844 <close+0x88>)
    e7cc:	47a8      	blx	r5
    e7ce:	200d      	movs	r0, #13
    e7d0:	4b1d      	ldr	r3, [pc, #116]	; (e848 <close+0x8c>)
    e7d2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    e7d4:	2c00      	cmp	r4, #0
    e7d6:	db2a      	blt.n	e82e <close+0x72>
    e7d8:	0122      	lsls	r2, r4, #4
    e7da:	4b1c      	ldr	r3, [pc, #112]	; (e84c <close+0x90>)
    e7dc:	189b      	adds	r3, r3, r2
    e7de:	7a9b      	ldrb	r3, [r3, #10]
    e7e0:	2b01      	cmp	r3, #1
    e7e2:	d127      	bne.n	e834 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    e7e4:	a905      	add	r1, sp, #20
    e7e6:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    e7e8:	4b18      	ldr	r3, [pc, #96]	; (e84c <close+0x90>)
    e7ea:	189b      	adds	r3, r3, r2
    e7ec:	88da      	ldrh	r2, [r3, #6]
    e7ee:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    e7f0:	2200      	movs	r2, #0
    e7f2:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    e7f4:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e7f6:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    e7f8:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    e7fa:	07db      	lsls	r3, r3, #31
    e7fc:	d500      	bpl.n	e800 <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    e7fe:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    e800:	2300      	movs	r3, #0
    e802:	9302      	str	r3, [sp, #8]
    e804:	9301      	str	r3, [sp, #4]
    e806:	9300      	str	r3, [sp, #0]
    e808:	3304      	adds	r3, #4
    e80a:	aa05      	add	r2, sp, #20
    e80c:	2002      	movs	r0, #2
    e80e:	4d10      	ldr	r5, [pc, #64]	; (e850 <close+0x94>)
    e810:	47a8      	blx	r5
    e812:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    e814:	d001      	beq.n	e81a <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    e816:	2509      	movs	r5, #9
    e818:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    e81a:	0124      	lsls	r4, r4, #4
    e81c:	480b      	ldr	r0, [pc, #44]	; (e84c <close+0x90>)
    e81e:	1820      	adds	r0, r4, r0
    e820:	2210      	movs	r2, #16
    e822:	2100      	movs	r1, #0
    e824:	4b0b      	ldr	r3, [pc, #44]	; (e854 <close+0x98>)
    e826:	4798      	blx	r3
	}
	return s8Ret;
}
    e828:	0028      	movs	r0, r5
    e82a:	b007      	add	sp, #28
    e82c:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    e82e:	2506      	movs	r5, #6
    e830:	426d      	negs	r5, r5
    e832:	e7f9      	b.n	e828 <close+0x6c>
    e834:	2506      	movs	r5, #6
    e836:	426d      	negs	r5, r5
    e838:	e7f6      	b.n	e828 <close+0x6c>
    e83a:	46c0      	nop			; (mov r8, r8)
    e83c:	0001b7c0 	.word	0x0001b7c0
    e840:	0001916d 	.word	0x0001916d
    e844:	0001c270 	.word	0x0001c270
    e848:	000191a1 	.word	0x000191a1
    e84c:	20001148 	.word	0x20001148
    e850:	0000bcd9 	.word	0x0000bcd9
    e854:	0000bbc5 	.word	0x0000bbc5

0000e858 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    e858:	b570      	push	{r4, r5, r6, lr}
    e85a:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    e85c:	2300      	movs	r3, #0
    e85e:	9301      	str	r3, [sp, #4]
    e860:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    e862:	2100      	movs	r1, #0
    e864:	7802      	ldrb	r2, [r0, #0]
    e866:	1c44      	adds	r4, r0, #1
    e868:	3005      	adds	r0, #5
    e86a:	000b      	movs	r3, r1
    e86c:	e009      	b.n	e882 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    e86e:	009d      	lsls	r5, r3, #2
    e870:	195b      	adds	r3, r3, r5
    e872:	005b      	lsls	r3, r3, #1
    e874:	189b      	adds	r3, r3, r2
    e876:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    e878:	0022      	movs	r2, r4
    e87a:	3401      	adds	r4, #1
			if(j > 4)
    e87c:	42a0      	cmp	r0, r4
    e87e:	d00a      	beq.n	e896 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    e880:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    e882:	2a2e      	cmp	r2, #46	; 0x2e
    e884:	d00a      	beq.n	e89c <nmi_inet_addr+0x44>
    e886:	2a00      	cmp	r2, #0
    e888:	d00c      	beq.n	e8a4 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    e88a:	3a30      	subs	r2, #48	; 0x30
    e88c:	b2d2      	uxtb	r2, r2
    e88e:	2a09      	cmp	r2, #9
    e890:	d9ed      	bls.n	e86e <nmi_inet_addr+0x16>
				return 0;
    e892:	2000      	movs	r0, #0
    e894:	e000      	b.n	e898 <nmi_inet_addr+0x40>
				return 0;
    e896:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    e898:	b002      	add	sp, #8
    e89a:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    e89c:	466a      	mov	r2, sp
    e89e:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    e8a0:	0020      	movs	r0, r4
    e8a2:	e002      	b.n	e8aa <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    e8a4:	466a      	mov	r2, sp
    e8a6:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    e8a8:	0020      	movs	r0, r4
    e8aa:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    e8ac:	2e04      	cmp	r6, #4
    e8ae:	d1d9      	bne.n	e864 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    e8b0:	2204      	movs	r2, #4
    e8b2:	4669      	mov	r1, sp
    e8b4:	a801      	add	r0, sp, #4
    e8b6:	4b02      	ldr	r3, [pc, #8]	; (e8c0 <nmi_inet_addr+0x68>)
    e8b8:	4798      	blx	r3
	return u32IP;
    e8ba:	9801      	ldr	r0, [sp, #4]
    e8bc:	e7ec      	b.n	e898 <nmi_inet_addr+0x40>
    e8be:	46c0      	nop			; (mov r8, r8)
    e8c0:	0000bbb1 	.word	0x0000bbb1

0000e8c4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    e8c4:	b510      	push	{r4, lr}
    e8c6:	b084      	sub	sp, #16
    e8c8:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    e8ca:	4b0b      	ldr	r3, [pc, #44]	; (e8f8 <gethostbyname+0x34>)
    e8cc:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    e8ce:	b2c3      	uxtb	r3, r0
    e8d0:	2b40      	cmp	r3, #64	; 0x40
    e8d2:	d80d      	bhi.n	e8f0 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    e8d4:	23ff      	movs	r3, #255	; 0xff
    e8d6:	4003      	ands	r3, r0
    e8d8:	3301      	adds	r3, #1
    e8da:	2200      	movs	r2, #0
    e8dc:	9202      	str	r2, [sp, #8]
    e8de:	9201      	str	r2, [sp, #4]
    e8e0:	9200      	str	r2, [sp, #0]
    e8e2:	0022      	movs	r2, r4
    e8e4:	214a      	movs	r1, #74	; 0x4a
    e8e6:	2002      	movs	r0, #2
    e8e8:	4c04      	ldr	r4, [pc, #16]	; (e8fc <gethostbyname+0x38>)
    e8ea:	47a0      	blx	r4
	}
	return s8Err;
}
    e8ec:	b004      	add	sp, #16
    e8ee:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    e8f0:	2006      	movs	r0, #6
    e8f2:	4240      	negs	r0, r0
    e8f4:	e7fa      	b.n	e8ec <gethostbyname+0x28>
    e8f6:	46c0      	nop			; (mov r8, r8)
    e8f8:	0000bbd5 	.word	0x0000bbd5
    e8fc:	0000bcd9 	.word	0x0000bcd9

0000e900 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    e900:	b570      	push	{r4, r5, r6, lr}
    e902:	b082      	sub	sp, #8
    e904:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    e906:	4b2a      	ldr	r3, [pc, #168]	; (e9b0 <spi_flash_enable+0xb0>)
    e908:	4798      	blx	r3
    e90a:	0500      	lsls	r0, r0, #20
    e90c:	0d00      	lsrs	r0, r0, #20
    e90e:	4b29      	ldr	r3, [pc, #164]	; (e9b4 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    e910:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    e912:	4298      	cmp	r0, r3
    e914:	d802      	bhi.n	e91c <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    e916:	0028      	movs	r0, r5
    e918:	b002      	add	sp, #8
    e91a:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    e91c:	a901      	add	r1, sp, #4
    e91e:	4826      	ldr	r0, [pc, #152]	; (e9b8 <spi_flash_enable+0xb8>)
    e920:	4b26      	ldr	r3, [pc, #152]	; (e9bc <spi_flash_enable+0xbc>)
    e922:	4798      	blx	r3
    e924:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    e926:	d1f6      	bne.n	e916 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    e928:	4b25      	ldr	r3, [pc, #148]	; (e9c0 <spi_flash_enable+0xc0>)
    e92a:	9a01      	ldr	r2, [sp, #4]
    e92c:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    e92e:	4925      	ldr	r1, [pc, #148]	; (e9c4 <spi_flash_enable+0xc4>)
    e930:	4319      	orrs	r1, r3
    e932:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    e934:	4820      	ldr	r0, [pc, #128]	; (e9b8 <spi_flash_enable+0xb8>)
    e936:	4b24      	ldr	r3, [pc, #144]	; (e9c8 <spi_flash_enable+0xc8>)
    e938:	4798      	blx	r3
		if(enable) {
    e93a:	2c00      	cmp	r4, #0
    e93c:	d020      	beq.n	e980 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    e93e:	2100      	movs	r1, #0
    e940:	4822      	ldr	r0, [pc, #136]	; (e9cc <spi_flash_enable+0xcc>)
    e942:	4c21      	ldr	r4, [pc, #132]	; (e9c8 <spi_flash_enable+0xc8>)
    e944:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    e946:	21ab      	movs	r1, #171	; 0xab
    e948:	4821      	ldr	r0, [pc, #132]	; (e9d0 <spi_flash_enable+0xd0>)
    e94a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    e94c:	2101      	movs	r1, #1
    e94e:	4821      	ldr	r0, [pc, #132]	; (e9d4 <spi_flash_enable+0xd4>)
    e950:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    e952:	2100      	movs	r1, #0
    e954:	4820      	ldr	r0, [pc, #128]	; (e9d8 <spi_flash_enable+0xd8>)
    e956:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    e958:	2181      	movs	r1, #129	; 0x81
    e95a:	4820      	ldr	r0, [pc, #128]	; (e9dc <spi_flash_enable+0xdc>)
    e95c:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    e95e:	4e20      	ldr	r6, [pc, #128]	; (e9e0 <spi_flash_enable+0xe0>)
    e960:	4c20      	ldr	r4, [pc, #128]	; (e9e4 <spi_flash_enable+0xe4>)
    e962:	0030      	movs	r0, r6
    e964:	47a0      	blx	r4
    e966:	2801      	cmp	r0, #1
    e968:	d1fb      	bne.n	e962 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    e96a:	4b15      	ldr	r3, [pc, #84]	; (e9c0 <spi_flash_enable+0xc0>)
    e96c:	9a01      	ldr	r2, [sp, #4]
    e96e:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    e970:	2180      	movs	r1, #128	; 0x80
    e972:	0249      	lsls	r1, r1, #9
    e974:	4319      	orrs	r1, r3
    e976:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    e978:	480f      	ldr	r0, [pc, #60]	; (e9b8 <spi_flash_enable+0xb8>)
    e97a:	4b13      	ldr	r3, [pc, #76]	; (e9c8 <spi_flash_enable+0xc8>)
    e97c:	4798      	blx	r3
    e97e:	e7ca      	b.n	e916 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    e980:	2100      	movs	r1, #0
    e982:	4812      	ldr	r0, [pc, #72]	; (e9cc <spi_flash_enable+0xcc>)
    e984:	4c10      	ldr	r4, [pc, #64]	; (e9c8 <spi_flash_enable+0xc8>)
    e986:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    e988:	21b9      	movs	r1, #185	; 0xb9
    e98a:	4811      	ldr	r0, [pc, #68]	; (e9d0 <spi_flash_enable+0xd0>)
    e98c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    e98e:	2101      	movs	r1, #1
    e990:	4810      	ldr	r0, [pc, #64]	; (e9d4 <spi_flash_enable+0xd4>)
    e992:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    e994:	2100      	movs	r1, #0
    e996:	4810      	ldr	r0, [pc, #64]	; (e9d8 <spi_flash_enable+0xd8>)
    e998:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    e99a:	2181      	movs	r1, #129	; 0x81
    e99c:	480f      	ldr	r0, [pc, #60]	; (e9dc <spi_flash_enable+0xdc>)
    e99e:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    e9a0:	4e0f      	ldr	r6, [pc, #60]	; (e9e0 <spi_flash_enable+0xe0>)
    e9a2:	4c10      	ldr	r4, [pc, #64]	; (e9e4 <spi_flash_enable+0xe4>)
    e9a4:	0030      	movs	r0, r6
    e9a6:	47a0      	blx	r4
    e9a8:	2801      	cmp	r0, #1
    e9aa:	d1fb      	bne.n	e9a4 <spi_flash_enable+0xa4>
    e9ac:	e7dd      	b.n	e96a <spi_flash_enable+0x6a>
    e9ae:	46c0      	nop			; (mov r8, r8)
    e9b0:	0000cc45 	.word	0x0000cc45
    e9b4:	0000039f 	.word	0x0000039f
    e9b8:	00001410 	.word	0x00001410
    e9bc:	0000d095 	.word	0x0000d095
    e9c0:	f8888fff 	.word	0xf8888fff
    e9c4:	01111000 	.word	0x01111000
    e9c8:	0000d0a1 	.word	0x0000d0a1
    e9cc:	00010208 	.word	0x00010208
    e9d0:	0001020c 	.word	0x0001020c
    e9d4:	00010214 	.word	0x00010214
    e9d8:	0001021c 	.word	0x0001021c
    e9dc:	00010204 	.word	0x00010204
    e9e0:	00010218 	.word	0x00010218
    e9e4:	0000d089 	.word	0x0000d089

0000e9e8 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    e9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9ea:	46c6      	mov	lr, r8
    e9ec:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    e9ee:	2303      	movs	r3, #3
    e9f0:	0007      	movs	r7, r0
    e9f2:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    e9f4:	6813      	ldr	r3, [r2, #0]
    e9f6:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    e9f8:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    e9fa:	2903      	cmp	r1, #3
    e9fc:	d902      	bls.n	ea04 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    e9fe:	4244      	negs	r4, r0
    ea00:	2003      	movs	r0, #3
    ea02:	4004      	ands	r4, r0
	}

	if (temp_length) {
    ea04:	2c00      	cmp	r4, #0
    ea06:	d016      	beq.n	ea36 <crc32_recalculate+0x4e>
		length -= temp_length;
    ea08:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    ea0a:	1d3e      	adds	r6, r7, #4
    ea0c:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    ea0e:	00e0      	lsls	r0, r4, #3
    ea10:	4240      	negs	r0, r0
    ea12:	3020      	adds	r0, #32
    ea14:	40c5      	lsrs	r5, r0
	crc ^= data;
    ea16:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    ea18:	00e0      	lsls	r0, r4, #3
    ea1a:	d019      	beq.n	ea50 <crc32_recalculate+0x68>
		if (crc & 1) {
    ea1c:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    ea1e:	4d27      	ldr	r5, [pc, #156]	; (eabc <crc32_recalculate+0xd4>)
    ea20:	e003      	b.n	ea2a <crc32_recalculate+0x42>
			crc >>= 1;
    ea22:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    ea24:	3801      	subs	r0, #1
    ea26:	2800      	cmp	r0, #0
    ea28:	d004      	beq.n	ea34 <crc32_recalculate+0x4c>
		if (crc & 1) {
    ea2a:	421c      	tst	r4, r3
    ea2c:	d0f9      	beq.n	ea22 <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    ea2e:	085b      	lsrs	r3, r3, #1
    ea30:	406b      	eors	r3, r5
    ea32:	e7f7      	b.n	ea24 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    ea34:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    ea36:	2003      	movs	r0, #3
    ea38:	000c      	movs	r4, r1
    ea3a:	4384      	bics	r4, r0

	if (temp_length) {
    ea3c:	d01e      	beq.n	ea7c <crc32_recalculate+0x94>
		length -= temp_length;
    ea3e:	1b08      	subs	r0, r1, r4
    ea40:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    ea42:	0889      	lsrs	r1, r1, #2
    ea44:	4688      	mov	r8, r1
    ea46:	003e      	movs	r6, r7
    ea48:	000d      	movs	r5, r1
		if (crc & 1) {
    ea4a:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    ea4c:	4c1b      	ldr	r4, [pc, #108]	; (eabc <crc32_recalculate+0xd4>)

		while (temp_length--) {
    ea4e:	e00b      	b.n	ea68 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    ea50:	0037      	movs	r7, r6
    ea52:	e7f0      	b.n	ea36 <crc32_recalculate+0x4e>
			crc >>= 1;
    ea54:	085b      	lsrs	r3, r3, #1
    ea56:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    ea58:	2900      	cmp	r1, #0
    ea5a:	d004      	beq.n	ea66 <crc32_recalculate+0x7e>
		if (crc & 1) {
    ea5c:	4218      	tst	r0, r3
    ea5e:	d0f9      	beq.n	ea54 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    ea60:	085b      	lsrs	r3, r3, #1
    ea62:	4063      	eors	r3, r4
    ea64:	e7f7      	b.n	ea56 <crc32_recalculate+0x6e>
    ea66:	3604      	adds	r6, #4
		while (temp_length--) {
    ea68:	3d01      	subs	r5, #1
    ea6a:	d303      	bcc.n	ea74 <crc32_recalculate+0x8c>
	crc ^= data;
    ea6c:	6831      	ldr	r1, [r6, #0]
    ea6e:	404b      	eors	r3, r1
    ea70:	2120      	movs	r1, #32
    ea72:	e7f3      	b.n	ea5c <crc32_recalculate+0x74>
    ea74:	4641      	mov	r1, r8
    ea76:	0089      	lsls	r1, r1, #2
    ea78:	187f      	adds	r7, r7, r1
		length -= temp_length;
    ea7a:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    ea7c:	2900      	cmp	r1, #0
    ea7e:	d017      	beq.n	eab0 <crc32_recalculate+0xc8>
		word = *word_ptr;
    ea80:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    ea82:	00c8      	lsls	r0, r1, #3
    ea84:	4240      	negs	r0, r0
    ea86:	3020      	adds	r0, #32
    ea88:	2501      	movs	r5, #1
    ea8a:	426d      	negs	r5, r5
    ea8c:	40c5      	lsrs	r5, r0
    ea8e:	0028      	movs	r0, r5
    ea90:	4020      	ands	r0, r4
	crc ^= data;
    ea92:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    ea94:	00c9      	lsls	r1, r1, #3
    ea96:	d00b      	beq.n	eab0 <crc32_recalculate+0xc8>
		if (crc & 1) {
    ea98:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    ea9a:	4c08      	ldr	r4, [pc, #32]	; (eabc <crc32_recalculate+0xd4>)
    ea9c:	e003      	b.n	eaa6 <crc32_recalculate+0xbe>
			crc >>= 1;
    ea9e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    eaa0:	3901      	subs	r1, #1
    eaa2:	2900      	cmp	r1, #0
    eaa4:	d004      	beq.n	eab0 <crc32_recalculate+0xc8>
		if (crc & 1) {
    eaa6:	4218      	tst	r0, r3
    eaa8:	d0f9      	beq.n	ea9e <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    eaaa:	085b      	lsrs	r3, r3, #1
    eaac:	4063      	eors	r3, r4
    eaae:	e7f7      	b.n	eaa0 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    eab0:	43db      	mvns	r3, r3
    eab2:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    eab4:	2000      	movs	r0, #0
    eab6:	bc04      	pop	{r2}
    eab8:	4690      	mov	r8, r2
    eaba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eabc:	edb88320 	.word	0xedb88320

0000eac0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    eac0:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    eac2:	2301      	movs	r3, #1
    eac4:	2800      	cmp	r0, #0
    eac6:	d001      	beq.n	eacc <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    eac8:	0018      	movs	r0, r3
    eaca:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    eacc:	4b01      	ldr	r3, [pc, #4]	; (ead4 <mem_test_unit_ready+0x14>)
    eace:	4798      	blx	r3
    ead0:	0003      	movs	r3, r0
    ead2:	e7f9      	b.n	eac8 <mem_test_unit_ready+0x8>
    ead4:	0000af31 	.word	0x0000af31

0000ead8 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    ead8:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    eada:	2301      	movs	r3, #1
    eadc:	2800      	cmp	r0, #0
    eade:	d001      	beq.n	eae4 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    eae0:	0018      	movs	r0, r3
    eae2:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    eae4:	0008      	movs	r0, r1
    eae6:	4b02      	ldr	r3, [pc, #8]	; (eaf0 <mem_read_capacity+0x18>)
    eae8:	4798      	blx	r3
    eaea:	0003      	movs	r3, r0
    eaec:	e7f8      	b.n	eae0 <mem_read_capacity+0x8>
    eaee:	46c0      	nop			; (mov r8, r8)
    eaf0:	0000af61 	.word	0x0000af61

0000eaf4 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    eaf4:	4243      	negs	r3, r0
    eaf6:	4158      	adcs	r0, r3
    eaf8:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    eafa:	4770      	bx	lr

0000eafc <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    eafc:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    eafe:	2301      	movs	r3, #1
    eb00:	2800      	cmp	r0, #0
    eb02:	d001      	beq.n	eb08 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    eb04:	0018      	movs	r0, r3
    eb06:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    eb08:	4b01      	ldr	r3, [pc, #4]	; (eb10 <mem_wr_protect+0x14>)
    eb0a:	4798      	blx	r3
    eb0c:	0003      	movs	r3, r0
    eb0e:	e7f9      	b.n	eb04 <mem_wr_protect+0x8>
    eb10:	0000af71 	.word	0x0000af71

0000eb14 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    eb14:	b510      	push	{r4, lr}
    eb16:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    eb18:	2301      	movs	r3, #1
    eb1a:	2800      	cmp	r0, #0
    eb1c:	d001      	beq.n	eb22 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    eb1e:	0018      	movs	r0, r3
    eb20:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    eb22:	0011      	movs	r1, r2
    eb24:	0020      	movs	r0, r4
    eb26:	4b02      	ldr	r3, [pc, #8]	; (eb30 <memory_2_ram+0x1c>)
    eb28:	4798      	blx	r3
    eb2a:	0003      	movs	r3, r0
    eb2c:	e7f7      	b.n	eb1e <memory_2_ram+0xa>
    eb2e:	46c0      	nop			; (mov r8, r8)
    eb30:	0000afc5 	.word	0x0000afc5

0000eb34 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    eb34:	b510      	push	{r4, lr}
    eb36:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    eb38:	2301      	movs	r3, #1
    eb3a:	2800      	cmp	r0, #0
    eb3c:	d001      	beq.n	eb42 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    eb3e:	0018      	movs	r0, r3
    eb40:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    eb42:	0011      	movs	r1, r2
    eb44:	0020      	movs	r0, r4
    eb46:	4b02      	ldr	r3, [pc, #8]	; (eb50 <ram_2_memory+0x1c>)
    eb48:	4798      	blx	r3
    eb4a:	0003      	movs	r3, r0
    eb4c:	e7f7      	b.n	eb3e <ram_2_memory+0xa>
    eb4e:	46c0      	nop			; (mov r8, r8)
    eb50:	0000b01d 	.word	0x0000b01d

0000eb54 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    eb54:	4b0c      	ldr	r3, [pc, #48]	; (eb88 <cpu_irq_enter_critical+0x34>)
    eb56:	681b      	ldr	r3, [r3, #0]
    eb58:	2b00      	cmp	r3, #0
    eb5a:	d106      	bne.n	eb6a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    eb5c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    eb60:	2b00      	cmp	r3, #0
    eb62:	d007      	beq.n	eb74 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    eb64:	2200      	movs	r2, #0
    eb66:	4b09      	ldr	r3, [pc, #36]	; (eb8c <cpu_irq_enter_critical+0x38>)
    eb68:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    eb6a:	4a07      	ldr	r2, [pc, #28]	; (eb88 <cpu_irq_enter_critical+0x34>)
    eb6c:	6813      	ldr	r3, [r2, #0]
    eb6e:	3301      	adds	r3, #1
    eb70:	6013      	str	r3, [r2, #0]
}
    eb72:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    eb74:	b672      	cpsid	i
    eb76:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    eb7a:	2200      	movs	r2, #0
    eb7c:	4b04      	ldr	r3, [pc, #16]	; (eb90 <cpu_irq_enter_critical+0x3c>)
    eb7e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    eb80:	3201      	adds	r2, #1
    eb82:	4b02      	ldr	r3, [pc, #8]	; (eb8c <cpu_irq_enter_critical+0x38>)
    eb84:	701a      	strb	r2, [r3, #0]
    eb86:	e7f0      	b.n	eb6a <cpu_irq_enter_critical+0x16>
    eb88:	20000508 	.word	0x20000508
    eb8c:	2000050c 	.word	0x2000050c
    eb90:	20000012 	.word	0x20000012

0000eb94 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    eb94:	4b08      	ldr	r3, [pc, #32]	; (ebb8 <cpu_irq_leave_critical+0x24>)
    eb96:	681a      	ldr	r2, [r3, #0]
    eb98:	3a01      	subs	r2, #1
    eb9a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    eb9c:	681b      	ldr	r3, [r3, #0]
    eb9e:	2b00      	cmp	r3, #0
    eba0:	d109      	bne.n	ebb6 <cpu_irq_leave_critical+0x22>
    eba2:	4b06      	ldr	r3, [pc, #24]	; (ebbc <cpu_irq_leave_critical+0x28>)
    eba4:	781b      	ldrb	r3, [r3, #0]
    eba6:	2b00      	cmp	r3, #0
    eba8:	d005      	beq.n	ebb6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    ebaa:	2201      	movs	r2, #1
    ebac:	4b04      	ldr	r3, [pc, #16]	; (ebc0 <cpu_irq_leave_critical+0x2c>)
    ebae:	701a      	strb	r2, [r3, #0]
    ebb0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ebb4:	b662      	cpsie	i
	}
}
    ebb6:	4770      	bx	lr
    ebb8:	20000508 	.word	0x20000508
    ebbc:	2000050c 	.word	0x2000050c
    ebc0:	20000012 	.word	0x20000012

0000ebc4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    ebc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebc6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    ebc8:	ac01      	add	r4, sp, #4
    ebca:	2501      	movs	r5, #1
    ebcc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    ebce:	2700      	movs	r7, #0
    ebd0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ebd2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    ebd4:	0021      	movs	r1, r4
    ebd6:	2017      	movs	r0, #23
    ebd8:	4e06      	ldr	r6, [pc, #24]	; (ebf4 <system_board_init+0x30>)
    ebda:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    ebdc:	2280      	movs	r2, #128	; 0x80
    ebde:	0412      	lsls	r2, r2, #16
    ebe0:	4b05      	ldr	r3, [pc, #20]	; (ebf8 <system_board_init+0x34>)
    ebe2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    ebe4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    ebe6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    ebe8:	0021      	movs	r1, r4
    ebea:	2037      	movs	r0, #55	; 0x37
    ebec:	47b0      	blx	r6
}
    ebee:	b003      	add	sp, #12
    ebf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebf2:	46c0      	nop			; (mov r8, r8)
    ebf4:	0000f065 	.word	0x0000f065
    ebf8:	41004400 	.word	0x41004400

0000ebfc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    ebfc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    ebfe:	2a00      	cmp	r2, #0
    ec00:	d001      	beq.n	ec06 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    ec02:	0018      	movs	r0, r3
    ec04:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    ec06:	008b      	lsls	r3, r1, #2
    ec08:	4a06      	ldr	r2, [pc, #24]	; (ec24 <extint_register_callback+0x28>)
    ec0a:	589b      	ldr	r3, [r3, r2]
    ec0c:	2b00      	cmp	r3, #0
    ec0e:	d003      	beq.n	ec18 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    ec10:	4283      	cmp	r3, r0
    ec12:	d005      	beq.n	ec20 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    ec14:	231d      	movs	r3, #29
    ec16:	e7f4      	b.n	ec02 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    ec18:	0089      	lsls	r1, r1, #2
    ec1a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    ec1c:	2300      	movs	r3, #0
    ec1e:	e7f0      	b.n	ec02 <extint_register_callback+0x6>
		return STATUS_OK;
    ec20:	2300      	movs	r3, #0
    ec22:	e7ee      	b.n	ec02 <extint_register_callback+0x6>
    ec24:	20001208 	.word	0x20001208

0000ec28 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    ec28:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    ec2a:	2900      	cmp	r1, #0
    ec2c:	d001      	beq.n	ec32 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    ec2e:	0018      	movs	r0, r3
    ec30:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    ec32:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    ec34:	281f      	cmp	r0, #31
    ec36:	d800      	bhi.n	ec3a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    ec38:	4a02      	ldr	r2, [pc, #8]	; (ec44 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    ec3a:	2301      	movs	r3, #1
    ec3c:	4083      	lsls	r3, r0
    ec3e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    ec40:	2300      	movs	r3, #0
    ec42:	e7f4      	b.n	ec2e <extint_chan_enable_callback+0x6>
    ec44:	40001800 	.word	0x40001800

0000ec48 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    ec48:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    ec4a:	2900      	cmp	r1, #0
    ec4c:	d001      	beq.n	ec52 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    ec4e:	0018      	movs	r0, r3
    ec50:	4770      	bx	lr
		return NULL;
    ec52:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    ec54:	281f      	cmp	r0, #31
    ec56:	d800      	bhi.n	ec5a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    ec58:	4a02      	ldr	r2, [pc, #8]	; (ec64 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    ec5a:	2301      	movs	r3, #1
    ec5c:	4083      	lsls	r3, r0
    ec5e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    ec60:	2300      	movs	r3, #0
    ec62:	e7f4      	b.n	ec4e <extint_chan_disable_callback+0x6>
    ec64:	40001800 	.word	0x40001800

0000ec68 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    ec68:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    ec6a:	2200      	movs	r2, #0
    ec6c:	4b10      	ldr	r3, [pc, #64]	; (ecb0 <EIC_Handler+0x48>)
    ec6e:	701a      	strb	r2, [r3, #0]
    ec70:	2300      	movs	r3, #0
    ec72:	4910      	ldr	r1, [pc, #64]	; (ecb4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    ec74:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    ec76:	4e10      	ldr	r6, [pc, #64]	; (ecb8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    ec78:	4c0d      	ldr	r4, [pc, #52]	; (ecb0 <EIC_Handler+0x48>)
    ec7a:	e00a      	b.n	ec92 <EIC_Handler+0x2a>
		return eics[eic_index];
    ec7c:	490d      	ldr	r1, [pc, #52]	; (ecb4 <EIC_Handler+0x4c>)
    ec7e:	e008      	b.n	ec92 <EIC_Handler+0x2a>
    ec80:	7823      	ldrb	r3, [r4, #0]
    ec82:	3301      	adds	r3, #1
    ec84:	b2db      	uxtb	r3, r3
    ec86:	7023      	strb	r3, [r4, #0]
    ec88:	2b0f      	cmp	r3, #15
    ec8a:	d810      	bhi.n	ecae <EIC_Handler+0x46>
		return NULL;
    ec8c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    ec8e:	2b1f      	cmp	r3, #31
    ec90:	d9f4      	bls.n	ec7c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    ec92:	0028      	movs	r0, r5
    ec94:	4018      	ands	r0, r3
    ec96:	2201      	movs	r2, #1
    ec98:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    ec9a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    ec9c:	4210      	tst	r0, r2
    ec9e:	d0ef      	beq.n	ec80 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    eca0:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    eca2:	009b      	lsls	r3, r3, #2
    eca4:	599b      	ldr	r3, [r3, r6]
    eca6:	2b00      	cmp	r3, #0
    eca8:	d0ea      	beq.n	ec80 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    ecaa:	4798      	blx	r3
    ecac:	e7e8      	b.n	ec80 <EIC_Handler+0x18>
			}
		}
	}
}
    ecae:	bd70      	pop	{r4, r5, r6, pc}
    ecb0:	20001204 	.word	0x20001204
    ecb4:	40001800 	.word	0x40001800
    ecb8:	20001208 	.word	0x20001208

0000ecbc <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    ecbc:	4a04      	ldr	r2, [pc, #16]	; (ecd0 <_extint_enable+0x14>)
    ecbe:	7813      	ldrb	r3, [r2, #0]
    ecc0:	2102      	movs	r1, #2
    ecc2:	430b      	orrs	r3, r1
    ecc4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    ecc6:	7853      	ldrb	r3, [r2, #1]
    ecc8:	b25b      	sxtb	r3, r3
    ecca:	2b00      	cmp	r3, #0
    eccc:	dbfb      	blt.n	ecc6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    ecce:	4770      	bx	lr
    ecd0:	40001800 	.word	0x40001800

0000ecd4 <_system_extint_init>:
{
    ecd4:	b500      	push	{lr}
    ecd6:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    ecd8:	4a12      	ldr	r2, [pc, #72]	; (ed24 <_system_extint_init+0x50>)
    ecda:	6993      	ldr	r3, [r2, #24]
    ecdc:	2140      	movs	r1, #64	; 0x40
    ecde:	430b      	orrs	r3, r1
    ece0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    ece2:	a901      	add	r1, sp, #4
    ece4:	2300      	movs	r3, #0
    ece6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    ece8:	2005      	movs	r0, #5
    ecea:	4b0f      	ldr	r3, [pc, #60]	; (ed28 <_system_extint_init+0x54>)
    ecec:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    ecee:	2005      	movs	r0, #5
    ecf0:	4b0e      	ldr	r3, [pc, #56]	; (ed2c <_system_extint_init+0x58>)
    ecf2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    ecf4:	4a0e      	ldr	r2, [pc, #56]	; (ed30 <_system_extint_init+0x5c>)
    ecf6:	7813      	ldrb	r3, [r2, #0]
    ecf8:	2101      	movs	r1, #1
    ecfa:	430b      	orrs	r3, r1
    ecfc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    ecfe:	7853      	ldrb	r3, [r2, #1]
    ed00:	b25b      	sxtb	r3, r3
    ed02:	2b00      	cmp	r3, #0
    ed04:	dbfb      	blt.n	ecfe <_system_extint_init+0x2a>
    ed06:	4b0b      	ldr	r3, [pc, #44]	; (ed34 <_system_extint_init+0x60>)
    ed08:	0019      	movs	r1, r3
    ed0a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    ed0c:	2200      	movs	r2, #0
    ed0e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    ed10:	4299      	cmp	r1, r3
    ed12:	d1fc      	bne.n	ed0e <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ed14:	2210      	movs	r2, #16
    ed16:	4b08      	ldr	r3, [pc, #32]	; (ed38 <_system_extint_init+0x64>)
    ed18:	601a      	str	r2, [r3, #0]
	_extint_enable();
    ed1a:	4b08      	ldr	r3, [pc, #32]	; (ed3c <_system_extint_init+0x68>)
    ed1c:	4798      	blx	r3
}
    ed1e:	b003      	add	sp, #12
    ed20:	bd00      	pop	{pc}
    ed22:	46c0      	nop			; (mov r8, r8)
    ed24:	40000400 	.word	0x40000400
    ed28:	000109b9 	.word	0x000109b9
    ed2c:	0001092d 	.word	0x0001092d
    ed30:	40001800 	.word	0x40001800
    ed34:	20001208 	.word	0x20001208
    ed38:	e000e100 	.word	0xe000e100
    ed3c:	0000ecbd 	.word	0x0000ecbd

0000ed40 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    ed40:	2300      	movs	r3, #0
    ed42:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    ed44:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    ed46:	2201      	movs	r2, #1
    ed48:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    ed4a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    ed4c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    ed4e:	3302      	adds	r3, #2
    ed50:	72c3      	strb	r3, [r0, #11]
}
    ed52:	4770      	bx	lr

0000ed54 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    ed54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed56:	b083      	sub	sp, #12
    ed58:	0005      	movs	r5, r0
    ed5a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ed5c:	a901      	add	r1, sp, #4
    ed5e:	2300      	movs	r3, #0
    ed60:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    ed62:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    ed64:	7923      	ldrb	r3, [r4, #4]
    ed66:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    ed68:	7a23      	ldrb	r3, [r4, #8]
    ed6a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    ed6c:	7820      	ldrb	r0, [r4, #0]
    ed6e:	4b15      	ldr	r3, [pc, #84]	; (edc4 <extint_chan_set_config+0x70>)
    ed70:	4798      	blx	r3
		return NULL;
    ed72:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    ed74:	2d1f      	cmp	r5, #31
    ed76:	d800      	bhi.n	ed7a <extint_chan_set_config+0x26>
		return eics[eic_index];
    ed78:	4813      	ldr	r0, [pc, #76]	; (edc8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    ed7a:	2207      	movs	r2, #7
    ed7c:	402a      	ands	r2, r5
    ed7e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    ed80:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    ed82:	7aa3      	ldrb	r3, [r4, #10]
    ed84:	2b00      	cmp	r3, #0
    ed86:	d001      	beq.n	ed8c <extint_chan_set_config+0x38>
    ed88:	2308      	movs	r3, #8
    ed8a:	431f      	orrs	r7, r3
    ed8c:	08eb      	lsrs	r3, r5, #3
    ed8e:	009b      	lsls	r3, r3, #2
    ed90:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    ed92:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    ed94:	260f      	movs	r6, #15
    ed96:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    ed98:	43b1      	bics	r1, r6
			(new_config << config_pos);
    ed9a:	4097      	lsls	r7, r2
    ed9c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    ed9e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    eda0:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    eda2:	7a63      	ldrb	r3, [r4, #9]
    eda4:	2b00      	cmp	r3, #0
    eda6:	d106      	bne.n	edb6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    eda8:	6943      	ldr	r3, [r0, #20]
    edaa:	2201      	movs	r2, #1
    edac:	40aa      	lsls	r2, r5
    edae:	4393      	bics	r3, r2
    edb0:	6143      	str	r3, [r0, #20]
	}
}
    edb2:	b003      	add	sp, #12
    edb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    edb6:	6942      	ldr	r2, [r0, #20]
    edb8:	2301      	movs	r3, #1
    edba:	40ab      	lsls	r3, r5
    edbc:	4313      	orrs	r3, r2
    edbe:	6143      	str	r3, [r0, #20]
    edc0:	e7f7      	b.n	edb2 <extint_chan_set_config+0x5e>
    edc2:	46c0      	nop			; (mov r8, r8)
    edc4:	00010ab1 	.word	0x00010ab1
    edc8:	40001800 	.word	0x40001800

0000edcc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    edcc:	b510      	push	{r4, lr}
			PM->APBBMASK.reg |= mask;
    edce:	4a1e      	ldr	r2, [pc, #120]	; (ee48 <nvm_set_config+0x7c>)
    edd0:	69d3      	ldr	r3, [r2, #28]
    edd2:	2104      	movs	r1, #4
    edd4:	430b      	orrs	r3, r1
    edd6:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    edd8:	4b1c      	ldr	r3, [pc, #112]	; (ee4c <nvm_set_config+0x80>)
    edda:	2220      	movs	r2, #32
    eddc:	32ff      	adds	r2, #255	; 0xff
    edde:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    ede0:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    ede2:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    ede4:	07d2      	lsls	r2, r2, #31
    ede6:	d401      	bmi.n	edec <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    ede8:	0018      	movs	r0, r3
    edea:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    edec:	7803      	ldrb	r3, [r0, #0]
    edee:	021b      	lsls	r3, r3, #8
    edf0:	22c0      	movs	r2, #192	; 0xc0
    edf2:	0092      	lsls	r2, r2, #2
    edf4:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    edf6:	7841      	ldrb	r1, [r0, #1]
    edf8:	01c9      	lsls	r1, r1, #7
    edfa:	22ff      	movs	r2, #255	; 0xff
    edfc:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    edfe:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    ee00:	7881      	ldrb	r1, [r0, #2]
    ee02:	0049      	lsls	r1, r1, #1
    ee04:	221e      	movs	r2, #30
    ee06:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    ee08:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    ee0a:	78c2      	ldrb	r2, [r0, #3]
    ee0c:	0492      	lsls	r2, r2, #18
    ee0e:	2180      	movs	r1, #128	; 0x80
    ee10:	02c9      	lsls	r1, r1, #11
    ee12:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    ee14:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    ee16:	7902      	ldrb	r2, [r0, #4]
    ee18:	0412      	lsls	r2, r2, #16
    ee1a:	21c0      	movs	r1, #192	; 0xc0
    ee1c:	0289      	lsls	r1, r1, #10
    ee1e:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    ee20:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    ee22:	4a0a      	ldr	r2, [pc, #40]	; (ee4c <nvm_set_config+0x80>)
    ee24:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    ee26:	6893      	ldr	r3, [r2, #8]
    ee28:	035b      	lsls	r3, r3, #13
    ee2a:	0f5b      	lsrs	r3, r3, #29
    ee2c:	4908      	ldr	r1, [pc, #32]	; (ee50 <nvm_set_config+0x84>)
    ee2e:	2408      	movs	r4, #8
    ee30:	409c      	lsls	r4, r3
    ee32:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    ee34:	6893      	ldr	r3, [r2, #8]
    ee36:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    ee38:	7843      	ldrb	r3, [r0, #1]
    ee3a:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    ee3c:	8b13      	ldrh	r3, [r2, #24]
    ee3e:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    ee40:	0fdb      	lsrs	r3, r3, #31
    ee42:	011b      	lsls	r3, r3, #4
    ee44:	e7d0      	b.n	ede8 <nvm_set_config+0x1c>
    ee46:	46c0      	nop			; (mov r8, r8)
    ee48:	40000400 	.word	0x40000400
    ee4c:	41004000 	.word	0x41004000
    ee50:	20000510 	.word	0x20000510

0000ee54 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    ee54:	b530      	push	{r4, r5, lr}
    ee56:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    ee58:	4a22      	ldr	r2, [pc, #136]	; (eee4 <nvm_execute_command+0x90>)
    ee5a:	8810      	ldrh	r0, [r2, #0]
    ee5c:	8853      	ldrh	r3, [r2, #2]
    ee5e:	4343      	muls	r3, r0
    ee60:	428b      	cmp	r3, r1
    ee62:	d206      	bcs.n	ee72 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    ee64:	2280      	movs	r2, #128	; 0x80
    ee66:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    ee68:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    ee6a:	4b1f      	ldr	r3, [pc, #124]	; (eee8 <nvm_execute_command+0x94>)
    ee6c:	18cb      	adds	r3, r1, r3
    ee6e:	4293      	cmp	r3, r2
    ee70:	d80e      	bhi.n	ee90 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    ee72:	4b1e      	ldr	r3, [pc, #120]	; (eeec <nvm_execute_command+0x98>)
    ee74:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    ee76:	2280      	movs	r2, #128	; 0x80
    ee78:	02d2      	lsls	r2, r2, #11
    ee7a:	432a      	orrs	r2, r5
    ee7c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    ee7e:	2220      	movs	r2, #32
    ee80:	32ff      	adds	r2, #255	; 0xff
    ee82:	831a      	strh	r2, [r3, #24]
    ee84:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    ee86:	07db      	lsls	r3, r3, #31
    ee88:	d403      	bmi.n	ee92 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    ee8a:	4b18      	ldr	r3, [pc, #96]	; (eeec <nvm_execute_command+0x98>)
    ee8c:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    ee8e:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    ee90:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    ee92:	2c45      	cmp	r4, #69	; 0x45
    ee94:	d822      	bhi.n	eedc <nvm_execute_command+0x88>
    ee96:	00a3      	lsls	r3, r4, #2
    ee98:	4a15      	ldr	r2, [pc, #84]	; (eef0 <nvm_execute_command+0x9c>)
    ee9a:	58d3      	ldr	r3, [r2, r3]
    ee9c:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    ee9e:	4b13      	ldr	r3, [pc, #76]	; (eeec <nvm_execute_command+0x98>)
    eea0:	8b1b      	ldrh	r3, [r3, #24]
    eea2:	05db      	lsls	r3, r3, #23
    eea4:	d503      	bpl.n	eeae <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    eea6:	4b11      	ldr	r3, [pc, #68]	; (eeec <nvm_execute_command+0x98>)
    eea8:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    eeaa:	2010      	movs	r0, #16
    eeac:	e7f0      	b.n	ee90 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    eeae:	0889      	lsrs	r1, r1, #2
    eeb0:	0049      	lsls	r1, r1, #1
    eeb2:	4b0e      	ldr	r3, [pc, #56]	; (eeec <nvm_execute_command+0x98>)
    eeb4:	61d9      	str	r1, [r3, #28]
			break;
    eeb6:	e003      	b.n	eec0 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    eeb8:	0889      	lsrs	r1, r1, #2
    eeba:	0049      	lsls	r1, r1, #1
    eebc:	4b0b      	ldr	r3, [pc, #44]	; (eeec <nvm_execute_command+0x98>)
    eebe:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    eec0:	20a5      	movs	r0, #165	; 0xa5
    eec2:	0200      	lsls	r0, r0, #8
    eec4:	4304      	orrs	r4, r0
    eec6:	4b09      	ldr	r3, [pc, #36]	; (eeec <nvm_execute_command+0x98>)
    eec8:	801c      	strh	r4, [r3, #0]
    eeca:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    eecc:	2201      	movs	r2, #1
    eece:	7d0b      	ldrb	r3, [r1, #20]
    eed0:	4213      	tst	r3, r2
    eed2:	d0fc      	beq.n	eece <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    eed4:	4b05      	ldr	r3, [pc, #20]	; (eeec <nvm_execute_command+0x98>)
    eed6:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    eed8:	2000      	movs	r0, #0
    eeda:	e7d9      	b.n	ee90 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    eedc:	4b03      	ldr	r3, [pc, #12]	; (eeec <nvm_execute_command+0x98>)
    eede:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    eee0:	2017      	movs	r0, #23
    eee2:	e7d5      	b.n	ee90 <nvm_execute_command+0x3c>
    eee4:	20000510 	.word	0x20000510
    eee8:	ff7fc000 	.word	0xff7fc000
    eeec:	41004000 	.word	0x41004000
    eef0:	0001c2a4 	.word	0x0001c2a4

0000eef4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    eef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    eef6:	4b25      	ldr	r3, [pc, #148]	; (ef8c <nvm_write_buffer+0x98>)
    eef8:	881d      	ldrh	r5, [r3, #0]
    eefa:	885b      	ldrh	r3, [r3, #2]
    eefc:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    eefe:	2418      	movs	r4, #24
	if (destination_address >
    ef00:	4283      	cmp	r3, r0
    ef02:	d201      	bcs.n	ef08 <nvm_write_buffer+0x14>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}
	return STATUS_OK;
}
    ef04:	0020      	movs	r0, r4
    ef06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    ef08:	1e6b      	subs	r3, r5, #1
    ef0a:	4218      	tst	r0, r3
    ef0c:	d1fa      	bne.n	ef04 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    ef0e:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    ef10:	4295      	cmp	r5, r2
    ef12:	d3f7      	bcc.n	ef04 <nvm_write_buffer+0x10>
    ef14:	4b1e      	ldr	r3, [pc, #120]	; (ef90 <nvm_write_buffer+0x9c>)
    ef16:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    ef18:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    ef1a:	07db      	lsls	r3, r3, #31
    ef1c:	d5f2      	bpl.n	ef04 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    ef1e:	4c1d      	ldr	r4, [pc, #116]	; (ef94 <nvm_write_buffer+0xa0>)
    ef20:	4b1b      	ldr	r3, [pc, #108]	; (ef90 <nvm_write_buffer+0x9c>)
    ef22:	801c      	strh	r4, [r3, #0]
    ef24:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    ef26:	2401      	movs	r4, #1
    ef28:	7d2b      	ldrb	r3, [r5, #20]
    ef2a:	4223      	tst	r3, r4
    ef2c:	d0fc      	beq.n	ef28 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    ef2e:	2420      	movs	r4, #32
    ef30:	34ff      	adds	r4, #255	; 0xff
    ef32:	4b17      	ldr	r3, [pc, #92]	; (ef90 <nvm_write_buffer+0x9c>)
    ef34:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    ef36:	2a00      	cmp	r2, #0
    ef38:	d022      	beq.n	ef80 <nvm_write_buffer+0x8c>
    ef3a:	2301      	movs	r3, #1
    ef3c:	0005      	movs	r5, r0
    ef3e:	439d      	bics	r5, r3
    ef40:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    ef42:	1e57      	subs	r7, r2, #1
    ef44:	e009      	b.n	ef5a <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    ef46:	18ce      	adds	r6, r1, r3
    ef48:	7876      	ldrb	r6, [r6, #1]
    ef4a:	0236      	lsls	r6, r6, #8
    ef4c:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    ef4e:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    ef50:	3302      	adds	r3, #2
    ef52:	b29b      	uxth	r3, r3
    ef54:	3502      	adds	r5, #2
    ef56:	429a      	cmp	r2, r3
    ef58:	d904      	bls.n	ef64 <nvm_write_buffer+0x70>
		data = buffer[i];
    ef5a:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    ef5c:	42bb      	cmp	r3, r7
    ef5e:	dbf2      	blt.n	ef46 <nvm_write_buffer+0x52>
		data = buffer[i];
    ef60:	b2a4      	uxth	r4, r4
    ef62:	e7f4      	b.n	ef4e <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    ef64:	4b09      	ldr	r3, [pc, #36]	; (ef8c <nvm_write_buffer+0x98>)
    ef66:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    ef68:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    ef6a:	2b00      	cmp	r3, #0
    ef6c:	d1ca      	bne.n	ef04 <nvm_write_buffer+0x10>
    ef6e:	2a3f      	cmp	r2, #63	; 0x3f
    ef70:	d8c8      	bhi.n	ef04 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    ef72:	2200      	movs	r2, #0
    ef74:	0001      	movs	r1, r0
    ef76:	2004      	movs	r0, #4
    ef78:	4b07      	ldr	r3, [pc, #28]	; (ef98 <nvm_write_buffer+0xa4>)
    ef7a:	4798      	blx	r3
    ef7c:	0004      	movs	r4, r0
    ef7e:	e7c1      	b.n	ef04 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    ef80:	4b02      	ldr	r3, [pc, #8]	; (ef8c <nvm_write_buffer+0x98>)
    ef82:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    ef84:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    ef86:	2b00      	cmp	r3, #0
    ef88:	d0f3      	beq.n	ef72 <nvm_write_buffer+0x7e>
    ef8a:	e7bb      	b.n	ef04 <nvm_write_buffer+0x10>
    ef8c:	20000510 	.word	0x20000510
    ef90:	41004000 	.word	0x41004000
    ef94:	ffffa544 	.word	0xffffa544
    ef98:	0000ee55 	.word	0x0000ee55

0000ef9c <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    ef9c:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    ef9e:	4b18      	ldr	r3, [pc, #96]	; (f000 <nvm_read_buffer+0x64>)
    efa0:	881d      	ldrh	r5, [r3, #0]
    efa2:	885b      	ldrh	r3, [r3, #2]
    efa4:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    efa6:	2418      	movs	r4, #24
	if (source_address >
    efa8:	4283      	cmp	r3, r0
    efaa:	d201      	bcs.n	efb0 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    efac:	0020      	movs	r0, r4
    efae:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    efb0:	1e6b      	subs	r3, r5, #1
    efb2:	4218      	tst	r0, r3
    efb4:	d1fa      	bne.n	efac <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    efb6:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    efb8:	4295      	cmp	r5, r2
    efba:	d3f7      	bcc.n	efac <nvm_read_buffer+0x10>
    efbc:	4b11      	ldr	r3, [pc, #68]	; (f004 <nvm_read_buffer+0x68>)
    efbe:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    efc0:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    efc2:	07db      	lsls	r3, r3, #31
    efc4:	d5f2      	bpl.n	efac <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    efc6:	2420      	movs	r4, #32
    efc8:	34ff      	adds	r4, #255	; 0xff
    efca:	4b0e      	ldr	r3, [pc, #56]	; (f004 <nvm_read_buffer+0x68>)
    efcc:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    efce:	2a00      	cmp	r2, #0
    efd0:	d014      	beq.n	effc <nvm_read_buffer+0x60>
    efd2:	2301      	movs	r3, #1
    efd4:	4398      	bics	r0, r3
    efd6:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    efd8:	1e56      	subs	r6, r2, #1
    efda:	e004      	b.n	efe6 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    efdc:	3302      	adds	r3, #2
    efde:	b29b      	uxth	r3, r3
    efe0:	3002      	adds	r0, #2
    efe2:	429a      	cmp	r2, r3
    efe4:	d908      	bls.n	eff8 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    efe6:	8804      	ldrh	r4, [r0, #0]
    efe8:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    efea:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    efec:	42b3      	cmp	r3, r6
    efee:	daf5      	bge.n	efdc <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    eff0:	18cd      	adds	r5, r1, r3
    eff2:	0a24      	lsrs	r4, r4, #8
    eff4:	706c      	strb	r4, [r5, #1]
    eff6:	e7f1      	b.n	efdc <nvm_read_buffer+0x40>
	return STATUS_OK;
    eff8:	2400      	movs	r4, #0
    effa:	e7d7      	b.n	efac <nvm_read_buffer+0x10>
    effc:	2400      	movs	r4, #0
    effe:	e7d5      	b.n	efac <nvm_read_buffer+0x10>
    f000:	20000510 	.word	0x20000510
    f004:	41004000 	.word	0x41004000

0000f008 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    f008:	4b13      	ldr	r3, [pc, #76]	; (f058 <nvm_erase_row+0x50>)
    f00a:	881a      	ldrh	r2, [r3, #0]
    f00c:	885b      	ldrh	r3, [r3, #2]
    f00e:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    f010:	2118      	movs	r1, #24
	if (row_address >
    f012:	4283      	cmp	r3, r0
    f014:	d201      	bcs.n	f01a <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    f016:	0008      	movs	r0, r1
    f018:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    f01a:	0092      	lsls	r2, r2, #2
    f01c:	3a01      	subs	r2, #1
    f01e:	4210      	tst	r0, r2
    f020:	d1f9      	bne.n	f016 <nvm_erase_row+0xe>
    f022:	4b0e      	ldr	r3, [pc, #56]	; (f05c <nvm_erase_row+0x54>)
    f024:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    f026:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    f028:	07db      	lsls	r3, r3, #31
    f02a:	d5f4      	bpl.n	f016 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    f02c:	4b0b      	ldr	r3, [pc, #44]	; (f05c <nvm_erase_row+0x54>)
    f02e:	2220      	movs	r2, #32
    f030:	32ff      	adds	r2, #255	; 0xff
    f032:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    f034:	0880      	lsrs	r0, r0, #2
    f036:	0040      	lsls	r0, r0, #1
    f038:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    f03a:	4a09      	ldr	r2, [pc, #36]	; (f060 <nvm_erase_row+0x58>)
    f03c:	801a      	strh	r2, [r3, #0]
    f03e:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    f040:	2201      	movs	r2, #1
    f042:	7d0b      	ldrb	r3, [r1, #20]
    f044:	4213      	tst	r3, r2
    f046:	d0fc      	beq.n	f042 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    f048:	4b04      	ldr	r3, [pc, #16]	; (f05c <nvm_erase_row+0x54>)
    f04a:	8b19      	ldrh	r1, [r3, #24]
    f04c:	201c      	movs	r0, #28
    f04e:	4001      	ands	r1, r0
	return STATUS_OK;
    f050:	1e48      	subs	r0, r1, #1
    f052:	4181      	sbcs	r1, r0
    f054:	0089      	lsls	r1, r1, #2
    f056:	e7de      	b.n	f016 <nvm_erase_row+0xe>
    f058:	20000510 	.word	0x20000510
    f05c:	41004000 	.word	0x41004000
    f060:	ffffa502 	.word	0xffffa502

0000f064 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    f064:	b500      	push	{lr}
    f066:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    f068:	ab01      	add	r3, sp, #4
    f06a:	2280      	movs	r2, #128	; 0x80
    f06c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    f06e:	780a      	ldrb	r2, [r1, #0]
    f070:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    f072:	784a      	ldrb	r2, [r1, #1]
    f074:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    f076:	788a      	ldrb	r2, [r1, #2]
    f078:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    f07a:	0019      	movs	r1, r3
    f07c:	4b01      	ldr	r3, [pc, #4]	; (f084 <port_pin_set_config+0x20>)
    f07e:	4798      	blx	r3
}
    f080:	b003      	add	sp, #12
    f082:	bd00      	pop	{pc}
    f084:	00010ab1 	.word	0x00010ab1

0000f088 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    f088:	6801      	ldr	r1, [r0, #0]
    f08a:	2208      	movs	r2, #8
    f08c:	4b05      	ldr	r3, [pc, #20]	; (f0a4 <rtc_calendar_enable+0x1c>)
    f08e:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    f090:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f092:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    f094:	b25b      	sxtb	r3, r3
    f096:	2b00      	cmp	r3, #0
    f098:	dbfb      	blt.n	f092 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    f09a:	880b      	ldrh	r3, [r1, #0]
    f09c:	2202      	movs	r2, #2
    f09e:	4313      	orrs	r3, r2
    f0a0:	800b      	strh	r3, [r1, #0]
}
    f0a2:	4770      	bx	lr
    f0a4:	e000e100 	.word	0xe000e100

0000f0a8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    f0a8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    f0aa:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f0ac:	2408      	movs	r4, #8
    f0ae:	2380      	movs	r3, #128	; 0x80
    f0b0:	4907      	ldr	r1, [pc, #28]	; (f0d0 <rtc_calendar_disable+0x28>)
    f0b2:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    f0b4:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f0b6:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    f0b8:	b25b      	sxtb	r3, r3
    f0ba:	2b00      	cmp	r3, #0
    f0bc:	dbfb      	blt.n	f0b6 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    f0be:	23c1      	movs	r3, #193	; 0xc1
    f0c0:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    f0c2:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    f0c4:	8813      	ldrh	r3, [r2, #0]
    f0c6:	2102      	movs	r1, #2
    f0c8:	438b      	bics	r3, r1
    f0ca:	8013      	strh	r3, [r2, #0]
}
    f0cc:	bd10      	pop	{r4, pc}
    f0ce:	46c0      	nop			; (mov r8, r8)
    f0d0:	e000e100 	.word	0xe000e100

0000f0d4 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    f0d4:	b570      	push	{r4, r5, r6, lr}
    f0d6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    f0d8:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    f0da:	4b07      	ldr	r3, [pc, #28]	; (f0f8 <rtc_calendar_reset+0x24>)
    f0dc:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    f0de:	2300      	movs	r3, #0
    f0e0:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    f0e2:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    f0e4:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f0e6:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    f0e8:	b25b      	sxtb	r3, r3
    f0ea:	2b00      	cmp	r3, #0
    f0ec:	dbfb      	blt.n	f0e6 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    f0ee:	882b      	ldrh	r3, [r5, #0]
    f0f0:	2201      	movs	r2, #1
    f0f2:	4313      	orrs	r3, r2
    f0f4:	802b      	strh	r3, [r5, #0]
}
    f0f6:	bd70      	pop	{r4, r5, r6, pc}
    f0f8:	0000f0a9 	.word	0x0000f0a9

0000f0fc <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    f0fc:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    f0fe:	88cb      	ldrh	r3, [r1, #6]
    f100:	88c2      	ldrh	r2, [r0, #6]
    f102:	1a9a      	subs	r2, r3, r2
    f104:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    f106:	794b      	ldrb	r3, [r1, #5]
    f108:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    f10a:	790c      	ldrb	r4, [r1, #4]
    f10c:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    f10e:	4323      	orrs	r3, r4
    f110:	788c      	ldrb	r4, [r1, #2]
    f112:	0324      	lsls	r4, r4, #12
    f114:	4323      	orrs	r3, r4
    f116:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    f118:	7902      	ldrb	r2, [r0, #4]
    f11a:	2a00      	cmp	r2, #0
    f11c:	d105      	bne.n	f12a <rtc_calendar_time_to_register_value+0x2e>
    f11e:	78ca      	ldrb	r2, [r1, #3]
    f120:	2a00      	cmp	r2, #0
    f122:	d002      	beq.n	f12a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    f124:	2280      	movs	r2, #128	; 0x80
    f126:	0252      	lsls	r2, r2, #9
    f128:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    f12a:	7848      	ldrb	r0, [r1, #1]
    f12c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    f12e:	780a      	ldrb	r2, [r1, #0]
    f130:	4310      	orrs	r0, r2
    f132:	4318      	orrs	r0, r3

	return register_value;
}
    f134:	bd10      	pop	{r4, pc}

0000f136 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    f136:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    f138:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    f13a:	88c4      	ldrh	r4, [r0, #6]
    f13c:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    f13e:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    f140:	018b      	lsls	r3, r1, #6
    f142:	0f1b      	lsrs	r3, r3, #28
    f144:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    f146:	028b      	lsls	r3, r1, #10
    f148:	0edb      	lsrs	r3, r3, #27
    f14a:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    f14c:	7903      	ldrb	r3, [r0, #4]
    f14e:	2b00      	cmp	r3, #0
    f150:	d10c      	bne.n	f16c <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    f152:	040b      	lsls	r3, r1, #16
    f154:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    f156:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    f158:	03cb      	lsls	r3, r1, #15
    f15a:	0fdb      	lsrs	r3, r3, #31
    f15c:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    f15e:	0988      	lsrs	r0, r1, #6
    f160:	233f      	movs	r3, #63	; 0x3f
    f162:	4018      	ands	r0, r3
    f164:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    f166:	4019      	ands	r1, r3
    f168:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    f16a:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    f16c:	03cb      	lsls	r3, r1, #15
    f16e:	0edb      	lsrs	r3, r3, #27
    f170:	7093      	strb	r3, [r2, #2]
    f172:	e7f4      	b.n	f15e <rtc_calendar_register_value_to_time+0x28>

0000f174 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    f174:	b510      	push	{r4, lr}
    f176:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    f178:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    f17a:	7941      	ldrb	r1, [r0, #5]
    f17c:	2900      	cmp	r1, #0
    f17e:	d006      	beq.n	f18e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    f180:	8859      	ldrh	r1, [r3, #2]
    f182:	0449      	lsls	r1, r1, #17
    f184:	d50b      	bpl.n	f19e <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    f186:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    f188:	4b0a      	ldr	r3, [pc, #40]	; (f1b4 <rtc_calendar_get_time+0x40>)
    f18a:	4798      	blx	r3
}
    f18c:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    f18e:	490a      	ldr	r1, [pc, #40]	; (f1b8 <rtc_calendar_get_time+0x44>)
    f190:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    f192:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f194:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    f196:	b249      	sxtb	r1, r1
    f198:	2900      	cmp	r1, #0
    f19a:	dbfb      	blt.n	f194 <rtc_calendar_get_time+0x20>
    f19c:	e7f3      	b.n	f186 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    f19e:	8859      	ldrh	r1, [r3, #2]
    f1a0:	24c0      	movs	r4, #192	; 0xc0
    f1a2:	0224      	lsls	r4, r4, #8
    f1a4:	4321      	orrs	r1, r4
    f1a6:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    f1a8:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f1aa:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    f1ac:	b249      	sxtb	r1, r1
    f1ae:	2900      	cmp	r1, #0
    f1b0:	dbfb      	blt.n	f1aa <rtc_calendar_get_time+0x36>
    f1b2:	e7e8      	b.n	f186 <rtc_calendar_get_time+0x12>
    f1b4:	0000f137 	.word	0x0000f137
    f1b8:	ffff8000 	.word	0xffff8000

0000f1bc <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    f1bc:	b570      	push	{r4, r5, r6, lr}
    f1be:	000d      	movs	r5, r1
    f1c0:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    f1c2:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    f1c4:	2a01      	cmp	r2, #1
    f1c6:	d901      	bls.n	f1cc <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    f1c8:	0018      	movs	r0, r3
    f1ca:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    f1cc:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    f1ce:	4b06      	ldr	r3, [pc, #24]	; (f1e8 <rtc_calendar_set_alarm+0x2c>)
    f1d0:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    f1d2:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    f1d4:	b25b      	sxtb	r3, r3
    f1d6:	2b00      	cmp	r3, #0
    f1d8:	dbfb      	blt.n	f1d2 <rtc_calendar_set_alarm+0x16>
    f1da:	00e4      	lsls	r4, r4, #3
    f1dc:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    f1de:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    f1e0:	7a2b      	ldrb	r3, [r5, #8]
    f1e2:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    f1e4:	2300      	movs	r3, #0
    f1e6:	e7ef      	b.n	f1c8 <rtc_calendar_set_alarm+0xc>
    f1e8:	0000f0fd 	.word	0x0000f0fd

0000f1ec <rtc_calendar_init>:
{
    f1ec:	b530      	push	{r4, r5, lr}
    f1ee:	b083      	sub	sp, #12
    f1f0:	0005      	movs	r5, r0
    f1f2:	0014      	movs	r4, r2
	module->hw = hw;
    f1f4:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    f1f6:	4a1c      	ldr	r2, [pc, #112]	; (f268 <rtc_calendar_init+0x7c>)
    f1f8:	6993      	ldr	r3, [r2, #24]
    f1fa:	2120      	movs	r1, #32
    f1fc:	430b      	orrs	r3, r1
    f1fe:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    f200:	a901      	add	r1, sp, #4
    f202:	2302      	movs	r3, #2
    f204:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    f206:	2004      	movs	r0, #4
    f208:	4b18      	ldr	r3, [pc, #96]	; (f26c <rtc_calendar_init+0x80>)
    f20a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    f20c:	2004      	movs	r0, #4
    f20e:	4b18      	ldr	r3, [pc, #96]	; (f270 <rtc_calendar_init+0x84>)
    f210:	4798      	blx	r3
	rtc_calendar_reset(module);
    f212:	0028      	movs	r0, r5
    f214:	4b17      	ldr	r3, [pc, #92]	; (f274 <rtc_calendar_init+0x88>)
    f216:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    f218:	7923      	ldrb	r3, [r4, #4]
    f21a:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    f21c:	78e3      	ldrb	r3, [r4, #3]
    f21e:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    f220:	88e3      	ldrh	r3, [r4, #6]
    f222:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    f224:	4b14      	ldr	r3, [pc, #80]	; (f278 <rtc_calendar_init+0x8c>)
    f226:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    f228:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    f22a:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    f22c:	7921      	ldrb	r1, [r4, #4]
    f22e:	2900      	cmp	r1, #0
    f230:	d017      	beq.n	f262 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    f232:	2108      	movs	r1, #8
    f234:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    f236:	78a1      	ldrb	r1, [r4, #2]
    f238:	2900      	cmp	r1, #0
    f23a:	d001      	beq.n	f240 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    f23c:	2180      	movs	r1, #128	; 0x80
    f23e:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    f240:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    f242:	78e3      	ldrb	r3, [r4, #3]
    f244:	2b00      	cmp	r3, #0
    f246:	d004      	beq.n	f252 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    f248:	8853      	ldrh	r3, [r2, #2]
    f24a:	2180      	movs	r1, #128	; 0x80
    f24c:	01c9      	lsls	r1, r1, #7
    f24e:	430b      	orrs	r3, r1
    f250:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    f252:	0021      	movs	r1, r4
    f254:	3108      	adds	r1, #8
    f256:	2200      	movs	r2, #0
    f258:	0028      	movs	r0, r5
    f25a:	4b08      	ldr	r3, [pc, #32]	; (f27c <rtc_calendar_init+0x90>)
    f25c:	4798      	blx	r3
}
    f25e:	b003      	add	sp, #12
    f260:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    f262:	2148      	movs	r1, #72	; 0x48
    f264:	430b      	orrs	r3, r1
    f266:	e7e6      	b.n	f236 <rtc_calendar_init+0x4a>
    f268:	40000400 	.word	0x40000400
    f26c:	000109b9 	.word	0x000109b9
    f270:	0001092d 	.word	0x0001092d
    f274:	0000f0d5 	.word	0x0000f0d5
    f278:	20001248 	.word	0x20001248
    f27c:	0000f1bd 	.word	0x0000f1bd

0000f280 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    f280:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    f282:	4b0f      	ldr	r3, [pc, #60]	; (f2c0 <RTC_Handler+0x40>)
    f284:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    f286:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    f288:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    f28a:	8a13      	ldrh	r3, [r2, #16]
    f28c:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    f28e:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    f290:	79e3      	ldrb	r3, [r4, #7]
    f292:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    f294:	b258      	sxtb	r0, r3
    f296:	2800      	cmp	r0, #0
    f298:	db06      	blt.n	f2a8 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    f29a:	07db      	lsls	r3, r3, #31
    f29c:	d503      	bpl.n	f2a6 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    f29e:	07cb      	lsls	r3, r1, #31
    f2a0:	d40a      	bmi.n	f2b8 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    f2a2:	2301      	movs	r3, #1
    f2a4:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    f2a6:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    f2a8:	078b      	lsls	r3, r1, #30
    f2aa:	d402      	bmi.n	f2b2 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    f2ac:	2380      	movs	r3, #128	; 0x80
    f2ae:	7223      	strb	r3, [r4, #8]
    f2b0:	e7f9      	b.n	f2a6 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    f2b2:	68d3      	ldr	r3, [r2, #12]
    f2b4:	4798      	blx	r3
    f2b6:	e7f9      	b.n	f2ac <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    f2b8:	6893      	ldr	r3, [r2, #8]
    f2ba:	4798      	blx	r3
    f2bc:	e7f1      	b.n	f2a2 <RTC_Handler+0x22>
    f2be:	46c0      	nop			; (mov r8, r8)
    f2c0:	20001248 	.word	0x20001248

0000f2c4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    f2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2c6:	46de      	mov	lr, fp
    f2c8:	4657      	mov	r7, sl
    f2ca:	464e      	mov	r6, r9
    f2cc:	4645      	mov	r5, r8
    f2ce:	b5e0      	push	{r5, r6, r7, lr}
    f2d0:	b087      	sub	sp, #28
    f2d2:	4680      	mov	r8, r0
    f2d4:	9104      	str	r1, [sp, #16]
    f2d6:	0016      	movs	r6, r2
    f2d8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    f2da:	2200      	movs	r2, #0
    f2dc:	2300      	movs	r3, #0
    f2de:	2100      	movs	r1, #0
    f2e0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    f2e2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    f2e4:	2001      	movs	r0, #1
    f2e6:	0021      	movs	r1, r4
    f2e8:	9600      	str	r6, [sp, #0]
    f2ea:	9701      	str	r7, [sp, #4]
    f2ec:	465c      	mov	r4, fp
    f2ee:	9403      	str	r4, [sp, #12]
    f2f0:	4644      	mov	r4, r8
    f2f2:	9405      	str	r4, [sp, #20]
    f2f4:	e013      	b.n	f31e <long_division+0x5a>
    f2f6:	2420      	movs	r4, #32
    f2f8:	1a64      	subs	r4, r4, r1
    f2fa:	0005      	movs	r5, r0
    f2fc:	40e5      	lsrs	r5, r4
    f2fe:	46a8      	mov	r8, r5
    f300:	e014      	b.n	f32c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    f302:	9c00      	ldr	r4, [sp, #0]
    f304:	9d01      	ldr	r5, [sp, #4]
    f306:	1b12      	subs	r2, r2, r4
    f308:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    f30a:	465c      	mov	r4, fp
    f30c:	464d      	mov	r5, r9
    f30e:	432c      	orrs	r4, r5
    f310:	46a3      	mov	fp, r4
    f312:	9c03      	ldr	r4, [sp, #12]
    f314:	4645      	mov	r5, r8
    f316:	432c      	orrs	r4, r5
    f318:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    f31a:	3901      	subs	r1, #1
    f31c:	d325      	bcc.n	f36a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    f31e:	2420      	movs	r4, #32
    f320:	4264      	negs	r4, r4
    f322:	190c      	adds	r4, r1, r4
    f324:	d4e7      	bmi.n	f2f6 <long_division+0x32>
    f326:	0005      	movs	r5, r0
    f328:	40a5      	lsls	r5, r4
    f32a:	46a8      	mov	r8, r5
    f32c:	0004      	movs	r4, r0
    f32e:	408c      	lsls	r4, r1
    f330:	46a1      	mov	r9, r4
		r = r << 1;
    f332:	1892      	adds	r2, r2, r2
    f334:	415b      	adcs	r3, r3
    f336:	0014      	movs	r4, r2
    f338:	001d      	movs	r5, r3
		if (n & bit_shift) {
    f33a:	9e05      	ldr	r6, [sp, #20]
    f33c:	464f      	mov	r7, r9
    f33e:	403e      	ands	r6, r7
    f340:	46b4      	mov	ip, r6
    f342:	9e04      	ldr	r6, [sp, #16]
    f344:	4647      	mov	r7, r8
    f346:	403e      	ands	r6, r7
    f348:	46b2      	mov	sl, r6
    f34a:	4666      	mov	r6, ip
    f34c:	4657      	mov	r7, sl
    f34e:	433e      	orrs	r6, r7
    f350:	d003      	beq.n	f35a <long_division+0x96>
			r |= 0x01;
    f352:	0006      	movs	r6, r0
    f354:	4326      	orrs	r6, r4
    f356:	0032      	movs	r2, r6
    f358:	002b      	movs	r3, r5
		if (r >= d) {
    f35a:	9c00      	ldr	r4, [sp, #0]
    f35c:	9d01      	ldr	r5, [sp, #4]
    f35e:	429d      	cmp	r5, r3
    f360:	d8db      	bhi.n	f31a <long_division+0x56>
    f362:	d1ce      	bne.n	f302 <long_division+0x3e>
    f364:	4294      	cmp	r4, r2
    f366:	d8d8      	bhi.n	f31a <long_division+0x56>
    f368:	e7cb      	b.n	f302 <long_division+0x3e>
    f36a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    f36c:	4658      	mov	r0, fp
    f36e:	0019      	movs	r1, r3
    f370:	b007      	add	sp, #28
    f372:	bc3c      	pop	{r2, r3, r4, r5}
    f374:	4690      	mov	r8, r2
    f376:	4699      	mov	r9, r3
    f378:	46a2      	mov	sl, r4
    f37a:	46ab      	mov	fp, r5
    f37c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f37e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    f37e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    f380:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f382:	2340      	movs	r3, #64	; 0x40
    f384:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    f386:	4281      	cmp	r1, r0
    f388:	d202      	bcs.n	f390 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    f38a:	0018      	movs	r0, r3
    f38c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    f38e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    f390:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    f392:	1c63      	adds	r3, r4, #1
    f394:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    f396:	4288      	cmp	r0, r1
    f398:	d9f9      	bls.n	f38e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f39a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    f39c:	2cff      	cmp	r4, #255	; 0xff
    f39e:	d8f4      	bhi.n	f38a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    f3a0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    f3a2:	2300      	movs	r3, #0
    f3a4:	e7f1      	b.n	f38a <_sercom_get_sync_baud_val+0xc>
	...

0000f3a8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    f3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3aa:	b083      	sub	sp, #12
    f3ac:	000f      	movs	r7, r1
    f3ae:	0016      	movs	r6, r2
    f3b0:	aa08      	add	r2, sp, #32
    f3b2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    f3b4:	0004      	movs	r4, r0
    f3b6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f3b8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    f3ba:	42bc      	cmp	r4, r7
    f3bc:	d902      	bls.n	f3c4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    f3be:	0010      	movs	r0, r2
    f3c0:	b003      	add	sp, #12
    f3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    f3c4:	2b00      	cmp	r3, #0
    f3c6:	d114      	bne.n	f3f2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    f3c8:	0002      	movs	r2, r0
    f3ca:	0008      	movs	r0, r1
    f3cc:	2100      	movs	r1, #0
    f3ce:	4c19      	ldr	r4, [pc, #100]	; (f434 <_sercom_get_async_baud_val+0x8c>)
    f3d0:	47a0      	blx	r4
    f3d2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    f3d4:	003a      	movs	r2, r7
    f3d6:	2300      	movs	r3, #0
    f3d8:	2000      	movs	r0, #0
    f3da:	4c17      	ldr	r4, [pc, #92]	; (f438 <_sercom_get_async_baud_val+0x90>)
    f3dc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    f3de:	2200      	movs	r2, #0
    f3e0:	2301      	movs	r3, #1
    f3e2:	1a12      	subs	r2, r2, r0
    f3e4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    f3e6:	0c12      	lsrs	r2, r2, #16
    f3e8:	041b      	lsls	r3, r3, #16
    f3ea:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    f3ec:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    f3ee:	2200      	movs	r2, #0
    f3f0:	e7e5      	b.n	f3be <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    f3f2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    f3f4:	2b01      	cmp	r3, #1
    f3f6:	d1f9      	bne.n	f3ec <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    f3f8:	000a      	movs	r2, r1
    f3fa:	2300      	movs	r3, #0
    f3fc:	2100      	movs	r1, #0
    f3fe:	4c0d      	ldr	r4, [pc, #52]	; (f434 <_sercom_get_async_baud_val+0x8c>)
    f400:	47a0      	blx	r4
    f402:	0002      	movs	r2, r0
    f404:	000b      	movs	r3, r1
    f406:	9200      	str	r2, [sp, #0]
    f408:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    f40a:	0038      	movs	r0, r7
    f40c:	2100      	movs	r1, #0
    f40e:	4c0a      	ldr	r4, [pc, #40]	; (f438 <_sercom_get_async_baud_val+0x90>)
    f410:	47a0      	blx	r4
    f412:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    f414:	2380      	movs	r3, #128	; 0x80
    f416:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    f418:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    f41a:	4298      	cmp	r0, r3
    f41c:	d8cf      	bhi.n	f3be <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    f41e:	0f79      	lsrs	r1, r7, #29
    f420:	00f8      	lsls	r0, r7, #3
    f422:	9a00      	ldr	r2, [sp, #0]
    f424:	9b01      	ldr	r3, [sp, #4]
    f426:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    f428:	00ea      	lsls	r2, r5, #3
    f42a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    f42c:	b2d2      	uxtb	r2, r2
    f42e:	0352      	lsls	r2, r2, #13
    f430:	432a      	orrs	r2, r5
    f432:	e7db      	b.n	f3ec <_sercom_get_async_baud_val+0x44>
    f434:	00017301 	.word	0x00017301
    f438:	0000f2c5 	.word	0x0000f2c5

0000f43c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    f43c:	b510      	push	{r4, lr}
    f43e:	b082      	sub	sp, #8
    f440:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    f442:	4b0e      	ldr	r3, [pc, #56]	; (f47c <sercom_set_gclk_generator+0x40>)
    f444:	781b      	ldrb	r3, [r3, #0]
    f446:	2b00      	cmp	r3, #0
    f448:	d007      	beq.n	f45a <sercom_set_gclk_generator+0x1e>
    f44a:	2900      	cmp	r1, #0
    f44c:	d105      	bne.n	f45a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    f44e:	4b0b      	ldr	r3, [pc, #44]	; (f47c <sercom_set_gclk_generator+0x40>)
    f450:	785b      	ldrb	r3, [r3, #1]
    f452:	4283      	cmp	r3, r0
    f454:	d010      	beq.n	f478 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    f456:	201d      	movs	r0, #29
    f458:	e00c      	b.n	f474 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    f45a:	a901      	add	r1, sp, #4
    f45c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    f45e:	2013      	movs	r0, #19
    f460:	4b07      	ldr	r3, [pc, #28]	; (f480 <sercom_set_gclk_generator+0x44>)
    f462:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    f464:	2013      	movs	r0, #19
    f466:	4b07      	ldr	r3, [pc, #28]	; (f484 <sercom_set_gclk_generator+0x48>)
    f468:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    f46a:	4b04      	ldr	r3, [pc, #16]	; (f47c <sercom_set_gclk_generator+0x40>)
    f46c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    f46e:	2201      	movs	r2, #1
    f470:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    f472:	2000      	movs	r0, #0
}
    f474:	b002      	add	sp, #8
    f476:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    f478:	2000      	movs	r0, #0
    f47a:	e7fb      	b.n	f474 <sercom_set_gclk_generator+0x38>
    f47c:	20000518 	.word	0x20000518
    f480:	000109b9 	.word	0x000109b9
    f484:	0001092d 	.word	0x0001092d

0000f488 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    f488:	4b40      	ldr	r3, [pc, #256]	; (f58c <_sercom_get_default_pad+0x104>)
    f48a:	4298      	cmp	r0, r3
    f48c:	d031      	beq.n	f4f2 <_sercom_get_default_pad+0x6a>
    f48e:	d90a      	bls.n	f4a6 <_sercom_get_default_pad+0x1e>
    f490:	4b3f      	ldr	r3, [pc, #252]	; (f590 <_sercom_get_default_pad+0x108>)
    f492:	4298      	cmp	r0, r3
    f494:	d04d      	beq.n	f532 <_sercom_get_default_pad+0xaa>
    f496:	4b3f      	ldr	r3, [pc, #252]	; (f594 <_sercom_get_default_pad+0x10c>)
    f498:	4298      	cmp	r0, r3
    f49a:	d05a      	beq.n	f552 <_sercom_get_default_pad+0xca>
    f49c:	4b3e      	ldr	r3, [pc, #248]	; (f598 <_sercom_get_default_pad+0x110>)
    f49e:	4298      	cmp	r0, r3
    f4a0:	d037      	beq.n	f512 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    f4a2:	2000      	movs	r0, #0
}
    f4a4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    f4a6:	4b3d      	ldr	r3, [pc, #244]	; (f59c <_sercom_get_default_pad+0x114>)
    f4a8:	4298      	cmp	r0, r3
    f4aa:	d00c      	beq.n	f4c6 <_sercom_get_default_pad+0x3e>
    f4ac:	4b3c      	ldr	r3, [pc, #240]	; (f5a0 <_sercom_get_default_pad+0x118>)
    f4ae:	4298      	cmp	r0, r3
    f4b0:	d1f7      	bne.n	f4a2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f4b2:	2901      	cmp	r1, #1
    f4b4:	d017      	beq.n	f4e6 <_sercom_get_default_pad+0x5e>
    f4b6:	2900      	cmp	r1, #0
    f4b8:	d05d      	beq.n	f576 <_sercom_get_default_pad+0xee>
    f4ba:	2902      	cmp	r1, #2
    f4bc:	d015      	beq.n	f4ea <_sercom_get_default_pad+0x62>
    f4be:	2903      	cmp	r1, #3
    f4c0:	d015      	beq.n	f4ee <_sercom_get_default_pad+0x66>
	return 0;
    f4c2:	2000      	movs	r0, #0
    f4c4:	e7ee      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f4c6:	2901      	cmp	r1, #1
    f4c8:	d007      	beq.n	f4da <_sercom_get_default_pad+0x52>
    f4ca:	2900      	cmp	r1, #0
    f4cc:	d051      	beq.n	f572 <_sercom_get_default_pad+0xea>
    f4ce:	2902      	cmp	r1, #2
    f4d0:	d005      	beq.n	f4de <_sercom_get_default_pad+0x56>
    f4d2:	2903      	cmp	r1, #3
    f4d4:	d005      	beq.n	f4e2 <_sercom_get_default_pad+0x5a>
	return 0;
    f4d6:	2000      	movs	r0, #0
    f4d8:	e7e4      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f4da:	4832      	ldr	r0, [pc, #200]	; (f5a4 <_sercom_get_default_pad+0x11c>)
    f4dc:	e7e2      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f4de:	4832      	ldr	r0, [pc, #200]	; (f5a8 <_sercom_get_default_pad+0x120>)
    f4e0:	e7e0      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f4e2:	4832      	ldr	r0, [pc, #200]	; (f5ac <_sercom_get_default_pad+0x124>)
    f4e4:	e7de      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f4e6:	4832      	ldr	r0, [pc, #200]	; (f5b0 <_sercom_get_default_pad+0x128>)
    f4e8:	e7dc      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f4ea:	4832      	ldr	r0, [pc, #200]	; (f5b4 <_sercom_get_default_pad+0x12c>)
    f4ec:	e7da      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f4ee:	4832      	ldr	r0, [pc, #200]	; (f5b8 <_sercom_get_default_pad+0x130>)
    f4f0:	e7d8      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f4f2:	2901      	cmp	r1, #1
    f4f4:	d007      	beq.n	f506 <_sercom_get_default_pad+0x7e>
    f4f6:	2900      	cmp	r1, #0
    f4f8:	d03f      	beq.n	f57a <_sercom_get_default_pad+0xf2>
    f4fa:	2902      	cmp	r1, #2
    f4fc:	d005      	beq.n	f50a <_sercom_get_default_pad+0x82>
    f4fe:	2903      	cmp	r1, #3
    f500:	d005      	beq.n	f50e <_sercom_get_default_pad+0x86>
	return 0;
    f502:	2000      	movs	r0, #0
    f504:	e7ce      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f506:	482d      	ldr	r0, [pc, #180]	; (f5bc <_sercom_get_default_pad+0x134>)
    f508:	e7cc      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f50a:	482d      	ldr	r0, [pc, #180]	; (f5c0 <_sercom_get_default_pad+0x138>)
    f50c:	e7ca      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f50e:	482d      	ldr	r0, [pc, #180]	; (f5c4 <_sercom_get_default_pad+0x13c>)
    f510:	e7c8      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f512:	2901      	cmp	r1, #1
    f514:	d007      	beq.n	f526 <_sercom_get_default_pad+0x9e>
    f516:	2900      	cmp	r1, #0
    f518:	d031      	beq.n	f57e <_sercom_get_default_pad+0xf6>
    f51a:	2902      	cmp	r1, #2
    f51c:	d005      	beq.n	f52a <_sercom_get_default_pad+0xa2>
    f51e:	2903      	cmp	r1, #3
    f520:	d005      	beq.n	f52e <_sercom_get_default_pad+0xa6>
	return 0;
    f522:	2000      	movs	r0, #0
    f524:	e7be      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f526:	4828      	ldr	r0, [pc, #160]	; (f5c8 <_sercom_get_default_pad+0x140>)
    f528:	e7bc      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f52a:	4828      	ldr	r0, [pc, #160]	; (f5cc <_sercom_get_default_pad+0x144>)
    f52c:	e7ba      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f52e:	4828      	ldr	r0, [pc, #160]	; (f5d0 <_sercom_get_default_pad+0x148>)
    f530:	e7b8      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f532:	2901      	cmp	r1, #1
    f534:	d007      	beq.n	f546 <_sercom_get_default_pad+0xbe>
    f536:	2900      	cmp	r1, #0
    f538:	d023      	beq.n	f582 <_sercom_get_default_pad+0xfa>
    f53a:	2902      	cmp	r1, #2
    f53c:	d005      	beq.n	f54a <_sercom_get_default_pad+0xc2>
    f53e:	2903      	cmp	r1, #3
    f540:	d005      	beq.n	f54e <_sercom_get_default_pad+0xc6>
	return 0;
    f542:	2000      	movs	r0, #0
    f544:	e7ae      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f546:	4823      	ldr	r0, [pc, #140]	; (f5d4 <_sercom_get_default_pad+0x14c>)
    f548:	e7ac      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f54a:	4823      	ldr	r0, [pc, #140]	; (f5d8 <_sercom_get_default_pad+0x150>)
    f54c:	e7aa      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f54e:	4823      	ldr	r0, [pc, #140]	; (f5dc <_sercom_get_default_pad+0x154>)
    f550:	e7a8      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f552:	2901      	cmp	r1, #1
    f554:	d007      	beq.n	f566 <_sercom_get_default_pad+0xde>
    f556:	2900      	cmp	r1, #0
    f558:	d015      	beq.n	f586 <_sercom_get_default_pad+0xfe>
    f55a:	2902      	cmp	r1, #2
    f55c:	d005      	beq.n	f56a <_sercom_get_default_pad+0xe2>
    f55e:	2903      	cmp	r1, #3
    f560:	d005      	beq.n	f56e <_sercom_get_default_pad+0xe6>
	return 0;
    f562:	2000      	movs	r0, #0
    f564:	e79e      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    f566:	481e      	ldr	r0, [pc, #120]	; (f5e0 <_sercom_get_default_pad+0x158>)
    f568:	e79c      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f56a:	481e      	ldr	r0, [pc, #120]	; (f5e4 <_sercom_get_default_pad+0x15c>)
    f56c:	e79a      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f56e:	481e      	ldr	r0, [pc, #120]	; (f5e8 <_sercom_get_default_pad+0x160>)
    f570:	e798      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f572:	481e      	ldr	r0, [pc, #120]	; (f5ec <_sercom_get_default_pad+0x164>)
    f574:	e796      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f576:	2003      	movs	r0, #3
    f578:	e794      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f57a:	481d      	ldr	r0, [pc, #116]	; (f5f0 <_sercom_get_default_pad+0x168>)
    f57c:	e792      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f57e:	481d      	ldr	r0, [pc, #116]	; (f5f4 <_sercom_get_default_pad+0x16c>)
    f580:	e790      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f582:	481d      	ldr	r0, [pc, #116]	; (f5f8 <_sercom_get_default_pad+0x170>)
    f584:	e78e      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f586:	481d      	ldr	r0, [pc, #116]	; (f5fc <_sercom_get_default_pad+0x174>)
    f588:	e78c      	b.n	f4a4 <_sercom_get_default_pad+0x1c>
    f58a:	46c0      	nop			; (mov r8, r8)
    f58c:	42001000 	.word	0x42001000
    f590:	42001800 	.word	0x42001800
    f594:	42001c00 	.word	0x42001c00
    f598:	42001400 	.word	0x42001400
    f59c:	42000800 	.word	0x42000800
    f5a0:	42000c00 	.word	0x42000c00
    f5a4:	00050003 	.word	0x00050003
    f5a8:	00060003 	.word	0x00060003
    f5ac:	00070003 	.word	0x00070003
    f5b0:	00010003 	.word	0x00010003
    f5b4:	001e0003 	.word	0x001e0003
    f5b8:	001f0003 	.word	0x001f0003
    f5bc:	00090003 	.word	0x00090003
    f5c0:	000a0003 	.word	0x000a0003
    f5c4:	000b0003 	.word	0x000b0003
    f5c8:	00110003 	.word	0x00110003
    f5cc:	00120003 	.word	0x00120003
    f5d0:	00130003 	.word	0x00130003
    f5d4:	000d0003 	.word	0x000d0003
    f5d8:	000e0003 	.word	0x000e0003
    f5dc:	000f0003 	.word	0x000f0003
    f5e0:	00170003 	.word	0x00170003
    f5e4:	00180003 	.word	0x00180003
    f5e8:	00190003 	.word	0x00190003
    f5ec:	00040003 	.word	0x00040003
    f5f0:	00080003 	.word	0x00080003
    f5f4:	00100003 	.word	0x00100003
    f5f8:	000c0003 	.word	0x000c0003
    f5fc:	00160003 	.word	0x00160003

0000f600 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    f600:	b530      	push	{r4, r5, lr}
    f602:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    f604:	4b0b      	ldr	r3, [pc, #44]	; (f634 <_sercom_get_sercom_inst_index+0x34>)
    f606:	466a      	mov	r2, sp
    f608:	cb32      	ldmia	r3!, {r1, r4, r5}
    f60a:	c232      	stmia	r2!, {r1, r4, r5}
    f60c:	cb32      	ldmia	r3!, {r1, r4, r5}
    f60e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    f610:	9b00      	ldr	r3, [sp, #0]
    f612:	4283      	cmp	r3, r0
    f614:	d00b      	beq.n	f62e <_sercom_get_sercom_inst_index+0x2e>
    f616:	2301      	movs	r3, #1
    f618:	009a      	lsls	r2, r3, #2
    f61a:	4669      	mov	r1, sp
    f61c:	5852      	ldr	r2, [r2, r1]
    f61e:	4282      	cmp	r2, r0
    f620:	d006      	beq.n	f630 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f622:	3301      	adds	r3, #1
    f624:	2b06      	cmp	r3, #6
    f626:	d1f7      	bne.n	f618 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    f628:	2000      	movs	r0, #0
}
    f62a:	b007      	add	sp, #28
    f62c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f62e:	2300      	movs	r3, #0
			return i;
    f630:	b2d8      	uxtb	r0, r3
    f632:	e7fa      	b.n	f62a <_sercom_get_sercom_inst_index+0x2a>
    f634:	0001c3bc 	.word	0x0001c3bc

0000f638 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    f638:	4770      	bx	lr
	...

0000f63c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    f63c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    f63e:	4b0a      	ldr	r3, [pc, #40]	; (f668 <_sercom_set_handler+0x2c>)
    f640:	781b      	ldrb	r3, [r3, #0]
    f642:	2b00      	cmp	r3, #0
    f644:	d10c      	bne.n	f660 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    f646:	4f09      	ldr	r7, [pc, #36]	; (f66c <_sercom_set_handler+0x30>)
    f648:	4e09      	ldr	r6, [pc, #36]	; (f670 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    f64a:	4d0a      	ldr	r5, [pc, #40]	; (f674 <_sercom_set_handler+0x38>)
    f64c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    f64e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    f650:	195a      	adds	r2, r3, r5
    f652:	6014      	str	r4, [r2, #0]
    f654:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    f656:	2b18      	cmp	r3, #24
    f658:	d1f9      	bne.n	f64e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    f65a:	2201      	movs	r2, #1
    f65c:	4b02      	ldr	r3, [pc, #8]	; (f668 <_sercom_set_handler+0x2c>)
    f65e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    f660:	0080      	lsls	r0, r0, #2
    f662:	4b02      	ldr	r3, [pc, #8]	; (f66c <_sercom_set_handler+0x30>)
    f664:	50c1      	str	r1, [r0, r3]
}
    f666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f668:	2000051a 	.word	0x2000051a
    f66c:	2000051c 	.word	0x2000051c
    f670:	0000f639 	.word	0x0000f639
    f674:	2000124c 	.word	0x2000124c

0000f678 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    f678:	b500      	push	{lr}
    f67a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    f67c:	2309      	movs	r3, #9
    f67e:	466a      	mov	r2, sp
    f680:	7013      	strb	r3, [r2, #0]
    f682:	3301      	adds	r3, #1
    f684:	7053      	strb	r3, [r2, #1]
    f686:	3301      	adds	r3, #1
    f688:	7093      	strb	r3, [r2, #2]
    f68a:	3301      	adds	r3, #1
    f68c:	70d3      	strb	r3, [r2, #3]
    f68e:	3301      	adds	r3, #1
    f690:	7113      	strb	r3, [r2, #4]
    f692:	3301      	adds	r3, #1
    f694:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    f696:	4b03      	ldr	r3, [pc, #12]	; (f6a4 <_sercom_get_interrupt_vector+0x2c>)
    f698:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    f69a:	466b      	mov	r3, sp
    f69c:	5618      	ldrsb	r0, [r3, r0]
}
    f69e:	b003      	add	sp, #12
    f6a0:	bd00      	pop	{pc}
    f6a2:	46c0      	nop			; (mov r8, r8)
    f6a4:	0000f601 	.word	0x0000f601

0000f6a8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    f6a8:	b510      	push	{r4, lr}
    f6aa:	4b02      	ldr	r3, [pc, #8]	; (f6b4 <SERCOM0_Handler+0xc>)
    f6ac:	681b      	ldr	r3, [r3, #0]
    f6ae:	2000      	movs	r0, #0
    f6b0:	4798      	blx	r3
    f6b2:	bd10      	pop	{r4, pc}
    f6b4:	2000051c 	.word	0x2000051c

0000f6b8 <SERCOM1_Handler>:
    f6b8:	b510      	push	{r4, lr}
    f6ba:	4b02      	ldr	r3, [pc, #8]	; (f6c4 <SERCOM1_Handler+0xc>)
    f6bc:	685b      	ldr	r3, [r3, #4]
    f6be:	2001      	movs	r0, #1
    f6c0:	4798      	blx	r3
    f6c2:	bd10      	pop	{r4, pc}
    f6c4:	2000051c 	.word	0x2000051c

0000f6c8 <SERCOM2_Handler>:
    f6c8:	b510      	push	{r4, lr}
    f6ca:	4b02      	ldr	r3, [pc, #8]	; (f6d4 <SERCOM2_Handler+0xc>)
    f6cc:	689b      	ldr	r3, [r3, #8]
    f6ce:	2002      	movs	r0, #2
    f6d0:	4798      	blx	r3
    f6d2:	bd10      	pop	{r4, pc}
    f6d4:	2000051c 	.word	0x2000051c

0000f6d8 <SERCOM3_Handler>:
    f6d8:	b510      	push	{r4, lr}
    f6da:	4b02      	ldr	r3, [pc, #8]	; (f6e4 <SERCOM3_Handler+0xc>)
    f6dc:	68db      	ldr	r3, [r3, #12]
    f6de:	2003      	movs	r0, #3
    f6e0:	4798      	blx	r3
    f6e2:	bd10      	pop	{r4, pc}
    f6e4:	2000051c 	.word	0x2000051c

0000f6e8 <SERCOM4_Handler>:
    f6e8:	b510      	push	{r4, lr}
    f6ea:	4b02      	ldr	r3, [pc, #8]	; (f6f4 <SERCOM4_Handler+0xc>)
    f6ec:	691b      	ldr	r3, [r3, #16]
    f6ee:	2004      	movs	r0, #4
    f6f0:	4798      	blx	r3
    f6f2:	bd10      	pop	{r4, pc}
    f6f4:	2000051c 	.word	0x2000051c

0000f6f8 <SERCOM5_Handler>:
    f6f8:	b510      	push	{r4, lr}
    f6fa:	4b02      	ldr	r3, [pc, #8]	; (f704 <SERCOM5_Handler+0xc>)
    f6fc:	695b      	ldr	r3, [r3, #20]
    f6fe:	2005      	movs	r0, #5
    f700:	4798      	blx	r3
    f702:	bd10      	pop	{r4, pc}
    f704:	2000051c 	.word	0x2000051c

0000f708 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    f708:	b570      	push	{r4, r5, r6, lr}
    f70a:	b082      	sub	sp, #8
    f70c:	0005      	movs	r5, r0
    f70e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    f710:	2200      	movs	r2, #0
    f712:	466b      	mov	r3, sp
    f714:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    f716:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    f718:	0030      	movs	r0, r6
    f71a:	4b24      	ldr	r3, [pc, #144]	; (f7ac <spi_set_baudrate+0xa4>)
    f71c:	4798      	blx	r3
    f71e:	231f      	movs	r3, #31
    f720:	4018      	ands	r0, r3
    f722:	3b1e      	subs	r3, #30
    f724:	4083      	lsls	r3, r0
    f726:	2280      	movs	r2, #128	; 0x80
    f728:	4921      	ldr	r1, [pc, #132]	; (f7b0 <spi_set_baudrate+0xa8>)
    f72a:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f72c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    f72e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    f730:	2b00      	cmp	r3, #0
    f732:	d1fc      	bne.n	f72e <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    f734:	338f      	adds	r3, #143	; 0x8f
    f736:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    f738:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    f73a:	6833      	ldr	r3, [r6, #0]
    f73c:	2202      	movs	r2, #2
    f73e:	4393      	bics	r3, r2
    f740:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f742:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    f744:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    f746:	2b00      	cmp	r3, #0
    f748:	d1fc      	bne.n	f744 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f74a:	4b1a      	ldr	r3, [pc, #104]	; (f7b4 <spi_set_baudrate+0xac>)
    f74c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f74e:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    f750:	b2c0      	uxtb	r0, r0
    f752:	4b19      	ldr	r3, [pc, #100]	; (f7b8 <spi_set_baudrate+0xb0>)
    f754:	4798      	blx	r3
    f756:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    f758:	466b      	mov	r3, sp
    f75a:	1d9a      	adds	r2, r3, #6
    f75c:	0020      	movs	r0, r4
    f75e:	4b17      	ldr	r3, [pc, #92]	; (f7bc <spi_set_baudrate+0xb4>)
    f760:	4798      	blx	r3
    f762:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    f764:	d003      	beq.n	f76e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    f766:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    f768:	0020      	movs	r0, r4
    f76a:	b002      	add	sp, #8
    f76c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    f76e:	466b      	mov	r3, sp
    f770:	3306      	adds	r3, #6
    f772:	781b      	ldrb	r3, [r3, #0]
    f774:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f776:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    f778:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    f77a:	2b00      	cmp	r3, #0
    f77c:	d1fc      	bne.n	f778 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    f77e:	0030      	movs	r0, r6
    f780:	4b0a      	ldr	r3, [pc, #40]	; (f7ac <spi_set_baudrate+0xa4>)
    f782:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f784:	231f      	movs	r3, #31
    f786:	4018      	ands	r0, r3
    f788:	3b1e      	subs	r3, #30
    f78a:	4083      	lsls	r3, r0
    f78c:	4a08      	ldr	r2, [pc, #32]	; (f7b0 <spi_set_baudrate+0xa8>)
    f78e:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f790:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    f792:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    f794:	2b00      	cmp	r3, #0
    f796:	d1fc      	bne.n	f792 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    f798:	6833      	ldr	r3, [r6, #0]
    f79a:	2202      	movs	r2, #2
    f79c:	4313      	orrs	r3, r2
    f79e:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f7a0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    f7a2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    f7a4:	2b00      	cmp	r3, #0
    f7a6:	d1fc      	bne.n	f7a2 <spi_set_baudrate+0x9a>
    f7a8:	e7de      	b.n	f768 <spi_set_baudrate+0x60>
    f7aa:	46c0      	nop			; (mov r8, r8)
    f7ac:	0000f679 	.word	0x0000f679
    f7b0:	e000e100 	.word	0xe000e100
    f7b4:	0000f601 	.word	0x0000f601
    f7b8:	000109d5 	.word	0x000109d5
    f7bc:	0000f37f 	.word	0x0000f37f

0000f7c0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    f7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7c2:	b08b      	sub	sp, #44	; 0x2c
    f7c4:	0005      	movs	r5, r0
    f7c6:	000c      	movs	r4, r1
    f7c8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    f7ca:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    f7cc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    f7ce:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    f7d0:	079b      	lsls	r3, r3, #30
    f7d2:	d501      	bpl.n	f7d8 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    f7d4:	b00b      	add	sp, #44	; 0x2c
    f7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    f7d8:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    f7da:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    f7dc:	07db      	lsls	r3, r3, #31
    f7de:	d4f9      	bmi.n	f7d4 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f7e0:	0008      	movs	r0, r1
    f7e2:	4b60      	ldr	r3, [pc, #384]	; (f964 <spi_init+0x1a4>)
    f7e4:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    f7e6:	4a60      	ldr	r2, [pc, #384]	; (f968 <spi_init+0x1a8>)
    f7e8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    f7ea:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    f7ec:	2301      	movs	r3, #1
    f7ee:	40bb      	lsls	r3, r7
    f7f0:	430b      	orrs	r3, r1
    f7f2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    f7f4:	a909      	add	r1, sp, #36	; 0x24
    f7f6:	2724      	movs	r7, #36	; 0x24
    f7f8:	5df3      	ldrb	r3, [r6, r7]
    f7fa:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f7fc:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    f7fe:	b2c3      	uxtb	r3, r0
    f800:	9301      	str	r3, [sp, #4]
    f802:	0018      	movs	r0, r3
    f804:	4b59      	ldr	r3, [pc, #356]	; (f96c <spi_init+0x1ac>)
    f806:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    f808:	9801      	ldr	r0, [sp, #4]
    f80a:	4b59      	ldr	r3, [pc, #356]	; (f970 <spi_init+0x1b0>)
    f80c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    f80e:	5df0      	ldrb	r0, [r6, r7]
    f810:	2100      	movs	r1, #0
    f812:	4b58      	ldr	r3, [pc, #352]	; (f974 <spi_init+0x1b4>)
    f814:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    f816:	7833      	ldrb	r3, [r6, #0]
    f818:	2b01      	cmp	r3, #1
    f81a:	d038      	beq.n	f88e <spi_init+0xce>
    f81c:	002b      	movs	r3, r5
    f81e:	330c      	adds	r3, #12
    f820:	0029      	movs	r1, r5
    f822:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    f824:	2200      	movs	r2, #0
    f826:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    f828:	428b      	cmp	r3, r1
    f82a:	d1fc      	bne.n	f826 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    f82c:	2300      	movs	r3, #0
    f82e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    f830:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    f832:	2400      	movs	r4, #0
    f834:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    f836:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    f838:	3336      	adds	r3, #54	; 0x36
    f83a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    f83c:	3301      	adds	r3, #1
    f83e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    f840:	3301      	adds	r3, #1
    f842:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    f844:	3b35      	subs	r3, #53	; 0x35
    f846:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    f848:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    f84a:	6828      	ldr	r0, [r5, #0]
    f84c:	4b45      	ldr	r3, [pc, #276]	; (f964 <spi_init+0x1a4>)
    f84e:	4798      	blx	r3
    f850:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    f852:	4949      	ldr	r1, [pc, #292]	; (f978 <spi_init+0x1b8>)
    f854:	4b49      	ldr	r3, [pc, #292]	; (f97c <spi_init+0x1bc>)
    f856:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    f858:	00bf      	lsls	r7, r7, #2
    f85a:	4b49      	ldr	r3, [pc, #292]	; (f980 <spi_init+0x1c0>)
    f85c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f85e:	682f      	ldr	r7, [r5, #0]
    f860:	ab04      	add	r3, sp, #16
    f862:	2280      	movs	r2, #128	; 0x80
    f864:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f866:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    f868:	3a7f      	subs	r2, #127	; 0x7f
    f86a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    f86c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    f86e:	7833      	ldrb	r3, [r6, #0]
    f870:	2b00      	cmp	r3, #0
    f872:	d102      	bne.n	f87a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    f874:	2200      	movs	r2, #0
    f876:	ab04      	add	r3, sp, #16
    f878:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    f87a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    f87c:	9305      	str	r3, [sp, #20]
    f87e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    f880:	9306      	str	r3, [sp, #24]
    f882:	6b33      	ldr	r3, [r6, #48]	; 0x30
    f884:	9307      	str	r3, [sp, #28]
    f886:	6b73      	ldr	r3, [r6, #52]	; 0x34
    f888:	9308      	str	r3, [sp, #32]
    f88a:	2400      	movs	r4, #0
    f88c:	e00b      	b.n	f8a6 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    f88e:	6823      	ldr	r3, [r4, #0]
    f890:	220c      	movs	r2, #12
    f892:	4313      	orrs	r3, r2
    f894:	6023      	str	r3, [r4, #0]
    f896:	e7c1      	b.n	f81c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    f898:	0038      	movs	r0, r7
    f89a:	4b3a      	ldr	r3, [pc, #232]	; (f984 <spi_init+0x1c4>)
    f89c:	4798      	blx	r3
    f89e:	e00a      	b.n	f8b6 <spi_init+0xf6>
    f8a0:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    f8a2:	2c04      	cmp	r4, #4
    f8a4:	d010      	beq.n	f8c8 <spi_init+0x108>
    f8a6:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    f8a8:	00a3      	lsls	r3, r4, #2
    f8aa:	aa02      	add	r2, sp, #8
    f8ac:	200c      	movs	r0, #12
    f8ae:	1812      	adds	r2, r2, r0
    f8b0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    f8b2:	2800      	cmp	r0, #0
    f8b4:	d0f0      	beq.n	f898 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    f8b6:	1c43      	adds	r3, r0, #1
    f8b8:	d0f2      	beq.n	f8a0 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    f8ba:	a904      	add	r1, sp, #16
    f8bc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    f8be:	0c00      	lsrs	r0, r0, #16
    f8c0:	b2c0      	uxtb	r0, r0
    f8c2:	4b31      	ldr	r3, [pc, #196]	; (f988 <spi_init+0x1c8>)
    f8c4:	4798      	blx	r3
    f8c6:	e7eb      	b.n	f8a0 <spi_init+0xe0>
	module->mode             = config->mode;
    f8c8:	7833      	ldrb	r3, [r6, #0]
    f8ca:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    f8cc:	7c33      	ldrb	r3, [r6, #16]
    f8ce:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    f8d0:	7cb3      	ldrb	r3, [r6, #18]
    f8d2:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    f8d4:	7d33      	ldrb	r3, [r6, #20]
    f8d6:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    f8d8:	2200      	movs	r2, #0
    f8da:	ab02      	add	r3, sp, #8
    f8dc:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    f8de:	7833      	ldrb	r3, [r6, #0]
    f8e0:	2b01      	cmp	r3, #1
    f8e2:	d028      	beq.n	f936 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    f8e4:	6873      	ldr	r3, [r6, #4]
    f8e6:	68b2      	ldr	r2, [r6, #8]
    f8e8:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    f8ea:	68f2      	ldr	r2, [r6, #12]
    f8ec:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    f8ee:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    f8f0:	7c72      	ldrb	r2, [r6, #17]
    f8f2:	2a00      	cmp	r2, #0
    f8f4:	d103      	bne.n	f8fe <spi_init+0x13e>
    f8f6:	4a25      	ldr	r2, [pc, #148]	; (f98c <spi_init+0x1cc>)
    f8f8:	7892      	ldrb	r2, [r2, #2]
    f8fa:	0792      	lsls	r2, r2, #30
    f8fc:	d501      	bpl.n	f902 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    f8fe:	2280      	movs	r2, #128	; 0x80
    f900:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    f902:	7cb2      	ldrb	r2, [r6, #18]
    f904:	2a00      	cmp	r2, #0
    f906:	d002      	beq.n	f90e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    f908:	2280      	movs	r2, #128	; 0x80
    f90a:	0292      	lsls	r2, r2, #10
    f90c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    f90e:	7cf2      	ldrb	r2, [r6, #19]
    f910:	2a00      	cmp	r2, #0
    f912:	d002      	beq.n	f91a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    f914:	2280      	movs	r2, #128	; 0x80
    f916:	0092      	lsls	r2, r2, #2
    f918:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    f91a:	7d32      	ldrb	r2, [r6, #20]
    f91c:	2a00      	cmp	r2, #0
    f91e:	d002      	beq.n	f926 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    f920:	2280      	movs	r2, #128	; 0x80
    f922:	0192      	lsls	r2, r2, #6
    f924:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    f926:	683a      	ldr	r2, [r7, #0]
    f928:	4313      	orrs	r3, r2
    f92a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    f92c:	687b      	ldr	r3, [r7, #4]
    f92e:	430b      	orrs	r3, r1
    f930:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    f932:	2000      	movs	r0, #0
    f934:	e74e      	b.n	f7d4 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f936:	6828      	ldr	r0, [r5, #0]
    f938:	4b0a      	ldr	r3, [pc, #40]	; (f964 <spi_init+0x1a4>)
    f93a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f93c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    f93e:	b2c0      	uxtb	r0, r0
    f940:	4b13      	ldr	r3, [pc, #76]	; (f990 <spi_init+0x1d0>)
    f942:	4798      	blx	r3
    f944:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    f946:	ab02      	add	r3, sp, #8
    f948:	1d9a      	adds	r2, r3, #6
    f94a:	69b0      	ldr	r0, [r6, #24]
    f94c:	4b11      	ldr	r3, [pc, #68]	; (f994 <spi_init+0x1d4>)
    f94e:	4798      	blx	r3
    f950:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    f952:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    f954:	2b00      	cmp	r3, #0
    f956:	d000      	beq.n	f95a <spi_init+0x19a>
    f958:	e73c      	b.n	f7d4 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    f95a:	ab02      	add	r3, sp, #8
    f95c:	3306      	adds	r3, #6
    f95e:	781b      	ldrb	r3, [r3, #0]
    f960:	733b      	strb	r3, [r7, #12]
    f962:	e7bf      	b.n	f8e4 <spi_init+0x124>
    f964:	0000f601 	.word	0x0000f601
    f968:	40000400 	.word	0x40000400
    f96c:	000109b9 	.word	0x000109b9
    f970:	0001092d 	.word	0x0001092d
    f974:	0000f43d 	.word	0x0000f43d
    f978:	0000fc2d 	.word	0x0000fc2d
    f97c:	0000f63d 	.word	0x0000f63d
    f980:	2000124c 	.word	0x2000124c
    f984:	0000f489 	.word	0x0000f489
    f988:	00010ab1 	.word	0x00010ab1
    f98c:	41002000 	.word	0x41002000
    f990:	000109d5 	.word	0x000109d5
    f994:	0000f37f 	.word	0x0000f37f

0000f998 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    f998:	b5f0      	push	{r4, r5, r6, r7, lr}
    f99a:	46d6      	mov	lr, sl
    f99c:	4647      	mov	r7, r8
    f99e:	b580      	push	{r7, lr}
    f9a0:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    f9a2:	2438      	movs	r4, #56	; 0x38
    f9a4:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    f9a6:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    f9a8:	2d05      	cmp	r5, #5
    f9aa:	d002      	beq.n	f9b2 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    f9ac:	3412      	adds	r4, #18
	if (length == 0) {
    f9ae:	2a00      	cmp	r2, #0
    f9b0:	d105      	bne.n	f9be <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    f9b2:	0020      	movs	r0, r4
    f9b4:	b003      	add	sp, #12
    f9b6:	bc0c      	pop	{r2, r3}
    f9b8:	4690      	mov	r8, r2
    f9ba:	469a      	mov	sl, r3
    f9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    f9be:	79c4      	ldrb	r4, [r0, #7]
    f9c0:	2c00      	cmp	r4, #0
    f9c2:	d144      	bne.n	fa4e <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    f9c4:	341c      	adds	r4, #28
    f9c6:	e7f4      	b.n	f9b2 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f9c8:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f9ca:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    f9cc:	423c      	tst	r4, r7
    f9ce:	d0fc      	beq.n	f9ca <spi_read_buffer_wait+0x32>
    f9d0:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    f9d2:	423c      	tst	r4, r7
    f9d4:	d01a      	beq.n	fa0c <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f9d6:	4644      	mov	r4, r8
    f9d8:	62ac      	str	r4, [r5, #40]	; 0x28
    f9da:	e017      	b.n	fa0c <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f9dc:	7984      	ldrb	r4, [r0, #6]
    f9de:	2c01      	cmp	r4, #1
    f9e0:	d026      	beq.n	fa30 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    f9e2:	6aad      	ldr	r5, [r5, #40]	; 0x28
    f9e4:	b2ec      	uxtb	r4, r5
    f9e6:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    f9e8:	9c01      	ldr	r4, [sp, #4]
    f9ea:	2c00      	cmp	r4, #0
    f9ec:	d13a      	bne.n	fa64 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    f9ee:	1c75      	adds	r5, r6, #1
    f9f0:	b2ad      	uxth	r5, r5
    f9f2:	4664      	mov	r4, ip
    f9f4:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f9f6:	7984      	ldrb	r4, [r0, #6]
    f9f8:	2c01      	cmp	r4, #1
    f9fa:	d01e      	beq.n	fa3a <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    f9fc:	002e      	movs	r6, r5
	while (length--) {
    f9fe:	3a01      	subs	r2, #1
    fa00:	b292      	uxth	r2, r2
    fa02:	4552      	cmp	r2, sl
    fa04:	d01f      	beq.n	fa46 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    fa06:	7944      	ldrb	r4, [r0, #5]
    fa08:	2c01      	cmp	r4, #1
    fa0a:	d0dd      	beq.n	f9c8 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    fa0c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    fa0e:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    fa10:	421c      	tst	r4, r3
    fa12:	d0fc      	beq.n	fa0e <spi_read_buffer_wait+0x76>
    fa14:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    fa16:	421c      	tst	r4, r3
    fa18:	d017      	beq.n	fa4a <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fa1a:	8b6c      	ldrh	r4, [r5, #26]
    fa1c:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    fa1e:	2400      	movs	r4, #0
    fa20:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fa22:	4664      	mov	r4, ip
    fa24:	421c      	tst	r4, r3
    fa26:	d0d9      	beq.n	f9dc <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fa28:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    fa2a:	241e      	movs	r4, #30
    fa2c:	9401      	str	r4, [sp, #4]
    fa2e:	e7d5      	b.n	f9dc <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    fa30:	6aac      	ldr	r4, [r5, #40]	; 0x28
    fa32:	05e4      	lsls	r4, r4, #23
    fa34:	0de4      	lsrs	r4, r4, #23
    fa36:	46a4      	mov	ip, r4
    fa38:	e7d6      	b.n	f9e8 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    fa3a:	3602      	adds	r6, #2
    fa3c:	b2b6      	uxth	r6, r6
    fa3e:	4664      	mov	r4, ip
    fa40:	0a24      	lsrs	r4, r4, #8
    fa42:	554c      	strb	r4, [r1, r5]
    fa44:	e7db      	b.n	f9fe <spi_read_buffer_wait+0x66>
    fa46:	9c01      	ldr	r4, [sp, #4]
    fa48:	e7b3      	b.n	f9b2 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    fa4a:	2410      	movs	r4, #16
    fa4c:	e7b1      	b.n	f9b2 <spi_read_buffer_wait+0x1a>
	while (length--) {
    fa4e:	3a01      	subs	r2, #1
    fa50:	b292      	uxth	r2, r2
    fa52:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    fa54:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    fa56:	05db      	lsls	r3, r3, #23
    fa58:	0ddb      	lsrs	r3, r3, #23
    fa5a:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    fa5c:	2304      	movs	r3, #4
	while (length--) {
    fa5e:	4c02      	ldr	r4, [pc, #8]	; (fa68 <spi_read_buffer_wait+0xd0>)
    fa60:	46a2      	mov	sl, r4
    fa62:	e7d0      	b.n	fa06 <spi_read_buffer_wait+0x6e>
    fa64:	9c01      	ldr	r4, [sp, #4]
    fa66:	e7a4      	b.n	f9b2 <spi_read_buffer_wait+0x1a>
    fa68:	0000ffff 	.word	0x0000ffff

0000fa6c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    fa6c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    fa6e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    fa70:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    fa72:	2c01      	cmp	r4, #1
    fa74:	d001      	beq.n	fa7a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    fa76:	0018      	movs	r0, r3
    fa78:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    fa7a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    fa7c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    fa7e:	2c00      	cmp	r4, #0
    fa80:	d1f9      	bne.n	fa76 <spi_select_slave+0xa>
		if (select) {
    fa82:	2a00      	cmp	r2, #0
    fa84:	d058      	beq.n	fb38 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    fa86:	784b      	ldrb	r3, [r1, #1]
    fa88:	2b00      	cmp	r3, #0
    fa8a:	d044      	beq.n	fb16 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    fa8c:	6803      	ldr	r3, [r0, #0]
    fa8e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    fa90:	07db      	lsls	r3, r3, #31
    fa92:	d410      	bmi.n	fab6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    fa94:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    fa96:	09d1      	lsrs	r1, r2, #7
		return NULL;
    fa98:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    fa9a:	2900      	cmp	r1, #0
    fa9c:	d104      	bne.n	faa8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    fa9e:	0953      	lsrs	r3, r2, #5
    faa0:	01db      	lsls	r3, r3, #7
    faa2:	492e      	ldr	r1, [pc, #184]	; (fb5c <spi_select_slave+0xf0>)
    faa4:	468c      	mov	ip, r1
    faa6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    faa8:	211f      	movs	r1, #31
    faaa:	4011      	ands	r1, r2
    faac:	2201      	movs	r2, #1
    faae:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    fab0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    fab2:	2305      	movs	r3, #5
    fab4:	e7df      	b.n	fa76 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    fab6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    fab8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    faba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    fabc:	2c00      	cmp	r4, #0
    fabe:	d104      	bne.n	faca <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    fac0:	0953      	lsrs	r3, r2, #5
    fac2:	01db      	lsls	r3, r3, #7
    fac4:	4c25      	ldr	r4, [pc, #148]	; (fb5c <spi_select_slave+0xf0>)
    fac6:	46a4      	mov	ip, r4
    fac8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    faca:	241f      	movs	r4, #31
    facc:	4014      	ands	r4, r2
    face:	2201      	movs	r2, #1
    fad0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    fad2:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    fad4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    fad6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    fad8:	07d2      	lsls	r2, r2, #31
    fada:	d501      	bpl.n	fae0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    fadc:	788a      	ldrb	r2, [r1, #2]
    fade:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    fae0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    fae2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    fae4:	2a00      	cmp	r2, #0
    fae6:	d1c6      	bne.n	fa76 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    fae8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    faea:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    faec:	7e13      	ldrb	r3, [r2, #24]
    faee:	420b      	tst	r3, r1
    faf0:	d0fc      	beq.n	faec <spi_select_slave+0x80>
    faf2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    faf4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    faf6:	0749      	lsls	r1, r1, #29
    faf8:	d5bd      	bpl.n	fa76 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fafa:	8b53      	ldrh	r3, [r2, #26]
    fafc:	075b      	lsls	r3, r3, #29
    fafe:	d501      	bpl.n	fb04 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fb00:	2304      	movs	r3, #4
    fb02:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fb04:	7983      	ldrb	r3, [r0, #6]
    fb06:	2b01      	cmp	r3, #1
    fb08:	d002      	beq.n	fb10 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    fb0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fb0c:	2300      	movs	r3, #0
    fb0e:	e7b2      	b.n	fa76 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    fb10:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fb12:	2300      	movs	r3, #0
    fb14:	e7af      	b.n	fa76 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    fb16:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    fb18:	09d1      	lsrs	r1, r2, #7
		return NULL;
    fb1a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    fb1c:	2900      	cmp	r1, #0
    fb1e:	d104      	bne.n	fb2a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    fb20:	0953      	lsrs	r3, r2, #5
    fb22:	01db      	lsls	r3, r3, #7
    fb24:	490d      	ldr	r1, [pc, #52]	; (fb5c <spi_select_slave+0xf0>)
    fb26:	468c      	mov	ip, r1
    fb28:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    fb2a:	211f      	movs	r1, #31
    fb2c:	4011      	ands	r1, r2
    fb2e:	2201      	movs	r2, #1
    fb30:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    fb32:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    fb34:	2300      	movs	r3, #0
    fb36:	e79e      	b.n	fa76 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    fb38:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    fb3a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    fb3c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    fb3e:	2900      	cmp	r1, #0
    fb40:	d104      	bne.n	fb4c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    fb42:	0953      	lsrs	r3, r2, #5
    fb44:	01db      	lsls	r3, r3, #7
    fb46:	4905      	ldr	r1, [pc, #20]	; (fb5c <spi_select_slave+0xf0>)
    fb48:	468c      	mov	ip, r1
    fb4a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    fb4c:	211f      	movs	r1, #31
    fb4e:	4011      	ands	r1, r2
    fb50:	2201      	movs	r2, #1
    fb52:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    fb54:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    fb56:	2300      	movs	r3, #0
    fb58:	e78d      	b.n	fa76 <spi_select_slave+0xa>
    fb5a:	46c0      	nop			; (mov r8, r8)
    fb5c:	41004400 	.word	0x41004400

0000fb60 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    fb60:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb62:	46de      	mov	lr, fp
    fb64:	4657      	mov	r7, sl
    fb66:	464e      	mov	r6, r9
    fb68:	4645      	mov	r5, r8
    fb6a:	b5e0      	push	{r5, r6, r7, lr}
    fb6c:	b083      	sub	sp, #12
    fb6e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    fb70:	2338      	movs	r3, #56	; 0x38
    fb72:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    fb74:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    fb76:	2c05      	cmp	r4, #5
    fb78:	d002      	beq.n	fb80 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    fb7a:	3312      	adds	r3, #18
	if (length == 0) {
    fb7c:	2a00      	cmp	r2, #0
    fb7e:	d14b      	bne.n	fc18 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    fb80:	0018      	movs	r0, r3
    fb82:	b003      	add	sp, #12
    fb84:	bc3c      	pop	{r2, r3, r4, r5}
    fb86:	4690      	mov	r8, r2
    fb88:	4699      	mov	r9, r3
    fb8a:	46a2      	mov	sl, r4
    fb8c:	46ab      	mov	fp, r5
    fb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    fb90:	3702      	adds	r7, #2
    fb92:	b2bf      	uxth	r7, r7
    fb94:	4641      	mov	r1, r8
    fb96:	4653      	mov	r3, sl
    fb98:	5c59      	ldrb	r1, [r3, r1]
    fb9a:	0209      	lsls	r1, r1, #8
    fb9c:	465b      	mov	r3, fp
    fb9e:	430b      	orrs	r3, r1
    fba0:	e018      	b.n	fbd4 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fba2:	7983      	ldrb	r3, [r0, #6]
    fba4:	2b01      	cmp	r3, #1
    fba6:	d02a      	beq.n	fbfe <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    fba8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    fbaa:	3e01      	subs	r6, #1
    fbac:	b2b6      	uxth	r6, r6
    fbae:	4566      	cmp	r6, ip
    fbb0:	d027      	beq.n	fc02 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    fbb2:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    fbb4:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    fbb6:	4223      	tst	r3, r4
    fbb8:	d0fc      	beq.n	fbb4 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    fbba:	1c7b      	adds	r3, r7, #1
    fbbc:	b29b      	uxth	r3, r3
    fbbe:	4698      	mov	r8, r3
    fbc0:	4653      	mov	r3, sl
    fbc2:	5ddb      	ldrb	r3, [r3, r7]
    fbc4:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fbc6:	7981      	ldrb	r1, [r0, #6]
    fbc8:	2901      	cmp	r1, #1
    fbca:	d0e1      	beq.n	fb90 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    fbcc:	4669      	mov	r1, sp
    fbce:	80cb      	strh	r3, [r1, #6]
    fbd0:	88cb      	ldrh	r3, [r1, #6]
    fbd2:	4647      	mov	r7, r8
    fbd4:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    fbd6:	4221      	tst	r1, r4
    fbd8:	d002      	beq.n	fbe0 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    fbda:	05db      	lsls	r3, r3, #23
    fbdc:	0ddb      	lsrs	r3, r3, #23
    fbde:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    fbe0:	79c3      	ldrb	r3, [r0, #7]
    fbe2:	2b00      	cmp	r3, #0
    fbe4:	d0e1      	beq.n	fbaa <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    fbe6:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    fbe8:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    fbea:	422b      	tst	r3, r5
    fbec:	d0fc      	beq.n	fbe8 <spi_write_buffer_wait+0x88>
    fbee:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    fbf0:	422b      	tst	r3, r5
    fbf2:	d0da      	beq.n	fbaa <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fbf4:	8b53      	ldrh	r3, [r2, #26]
    fbf6:	422b      	tst	r3, r5
    fbf8:	d0d3      	beq.n	fba2 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fbfa:	8355      	strh	r5, [r2, #26]
    fbfc:	e7d1      	b.n	fba2 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    fbfe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    fc00:	e7d3      	b.n	fbaa <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    fc02:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    fc04:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    fc06:	2a01      	cmp	r2, #1
    fc08:	d1ba      	bne.n	fb80 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    fc0a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    fc0c:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    fc0e:	7e0b      	ldrb	r3, [r1, #24]
    fc10:	4213      	tst	r3, r2
    fc12:	d0fc      	beq.n	fc0e <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    fc14:	2300      	movs	r3, #0
    fc16:	e7b3      	b.n	fb80 <spi_write_buffer_wait+0x20>
	while (length--) {
    fc18:	3a01      	subs	r2, #1
    fc1a:	b296      	uxth	r6, r2
    fc1c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    fc1e:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    fc20:	2504      	movs	r5, #4
	while (length--) {
    fc22:	4b01      	ldr	r3, [pc, #4]	; (fc28 <spi_write_buffer_wait+0xc8>)
    fc24:	469c      	mov	ip, r3
    fc26:	e7c4      	b.n	fbb2 <spi_write_buffer_wait+0x52>
    fc28:	0000ffff 	.word	0x0000ffff

0000fc2c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    fc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    fc2e:	0080      	lsls	r0, r0, #2
    fc30:	4b70      	ldr	r3, [pc, #448]	; (fdf4 <_spi_interrupt_handler+0x1c8>)
    fc32:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    fc34:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    fc36:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    fc38:	5ce7      	ldrb	r7, [r4, r3]
    fc3a:	2236      	movs	r2, #54	; 0x36
    fc3c:	5ca2      	ldrb	r2, [r4, r2]
    fc3e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    fc40:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    fc42:	7db5      	ldrb	r5, [r6, #22]
    fc44:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    fc46:	07eb      	lsls	r3, r5, #31
    fc48:	d502      	bpl.n	fc50 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    fc4a:	7963      	ldrb	r3, [r4, #5]
    fc4c:	2b01      	cmp	r3, #1
    fc4e:	d01e      	beq.n	fc8e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    fc50:	076b      	lsls	r3, r5, #29
    fc52:	d511      	bpl.n	fc78 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    fc54:	8b73      	ldrh	r3, [r6, #26]
    fc56:	075b      	lsls	r3, r3, #29
    fc58:	d55a      	bpl.n	fd10 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    fc5a:	7a63      	ldrb	r3, [r4, #9]
    fc5c:	2b01      	cmp	r3, #1
    fc5e:	d008      	beq.n	fc72 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    fc60:	221e      	movs	r2, #30
    fc62:	2338      	movs	r3, #56	; 0x38
    fc64:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    fc66:	3b35      	subs	r3, #53	; 0x35
    fc68:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    fc6a:	3302      	adds	r3, #2
    fc6c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    fc6e:	073b      	lsls	r3, r7, #28
    fc70:	d44a      	bmi.n	fd08 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    fc72:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    fc74:	2304      	movs	r3, #4
    fc76:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    fc78:	07ab      	lsls	r3, r5, #30
    fc7a:	d503      	bpl.n	fc84 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    fc7c:	7963      	ldrb	r3, [r4, #5]
    fc7e:	2b01      	cmp	r3, #1
    fc80:	d100      	bne.n	fc84 <_spi_interrupt_handler+0x58>
    fc82:	e097      	b.n	fdb4 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    fc84:	b26d      	sxtb	r5, r5
    fc86:	2d00      	cmp	r5, #0
    fc88:	da00      	bge.n	fc8c <_spi_interrupt_handler+0x60>
    fc8a:	e0a9      	b.n	fde0 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    fc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    fc8e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    fc90:	2b00      	cmp	r3, #0
    fc92:	d022      	beq.n	fcda <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    fc94:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    fc96:	2b00      	cmp	r3, #0
    fc98:	d0da      	beq.n	fc50 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    fc9a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    fc9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    fc9e:	7813      	ldrb	r3, [r2, #0]
    fca0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    fca2:	1c50      	adds	r0, r2, #1
    fca4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fca6:	79a0      	ldrb	r0, [r4, #6]
    fca8:	2801      	cmp	r0, #1
    fcaa:	d027      	beq.n	fcfc <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    fcac:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    fcae:	05db      	lsls	r3, r3, #23
    fcb0:	0ddb      	lsrs	r3, r3, #23
    fcb2:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    fcb4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    fcb6:	3b01      	subs	r3, #1
    fcb8:	b29b      	uxth	r3, r3
    fcba:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    fcbc:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    fcbe:	b29b      	uxth	r3, r3
    fcc0:	2b00      	cmp	r3, #0
    fcc2:	d1c5      	bne.n	fc50 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    fcc4:	3301      	adds	r3, #1
    fcc6:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    fcc8:	7a63      	ldrb	r3, [r4, #9]
    fcca:	2b01      	cmp	r3, #1
    fccc:	d1c0      	bne.n	fc50 <_spi_interrupt_handler+0x24>
    fcce:	79e3      	ldrb	r3, [r4, #7]
    fcd0:	2b00      	cmp	r3, #0
    fcd2:	d1bd      	bne.n	fc50 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    fcd4:	3302      	adds	r3, #2
    fcd6:	75b3      	strb	r3, [r6, #22]
    fcd8:	e7ba      	b.n	fc50 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    fcda:	4b47      	ldr	r3, [pc, #284]	; (fdf8 <_spi_interrupt_handler+0x1cc>)
    fcdc:	881b      	ldrh	r3, [r3, #0]
    fcde:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    fce0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    fce2:	3b01      	subs	r3, #1
    fce4:	b29b      	uxth	r3, r3
    fce6:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    fce8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    fcea:	b29b      	uxth	r3, r3
    fcec:	2b00      	cmp	r3, #0
    fcee:	d101      	bne.n	fcf4 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    fcf0:	3301      	adds	r3, #1
    fcf2:	7533      	strb	r3, [r6, #20]
		if (0
    fcf4:	7963      	ldrb	r3, [r4, #5]
    fcf6:	2b01      	cmp	r3, #1
    fcf8:	d0cc      	beq.n	fc94 <_spi_interrupt_handler+0x68>
    fcfa:	e7a9      	b.n	fc50 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    fcfc:	7850      	ldrb	r0, [r2, #1]
    fcfe:	0200      	lsls	r0, r0, #8
    fd00:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    fd02:	3202      	adds	r2, #2
    fd04:	62e2      	str	r2, [r4, #44]	; 0x2c
    fd06:	e7d2      	b.n	fcae <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    fd08:	0020      	movs	r0, r4
    fd0a:	69a3      	ldr	r3, [r4, #24]
    fd0c:	4798      	blx	r3
    fd0e:	e7b0      	b.n	fc72 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    fd10:	7a63      	ldrb	r3, [r4, #9]
    fd12:	2b01      	cmp	r3, #1
    fd14:	d028      	beq.n	fd68 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    fd16:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    fd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fd1a:	05db      	lsls	r3, r3, #23
    fd1c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    fd1e:	b2da      	uxtb	r2, r3
    fd20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    fd22:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    fd24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    fd26:	1c51      	adds	r1, r2, #1
    fd28:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    fd2a:	79a1      	ldrb	r1, [r4, #6]
    fd2c:	2901      	cmp	r1, #1
    fd2e:	d034      	beq.n	fd9a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    fd30:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fd32:	3b01      	subs	r3, #1
    fd34:	b29b      	uxth	r3, r3
    fd36:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    fd38:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    fd3a:	b29b      	uxth	r3, r3
    fd3c:	2b00      	cmp	r3, #0
    fd3e:	d000      	beq.n	fd42 <_spi_interrupt_handler+0x116>
    fd40:	e79a      	b.n	fc78 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    fd42:	2200      	movs	r2, #0
    fd44:	3338      	adds	r3, #56	; 0x38
    fd46:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    fd48:	3b34      	subs	r3, #52	; 0x34
    fd4a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    fd4c:	7a63      	ldrb	r3, [r4, #9]
    fd4e:	2b02      	cmp	r3, #2
    fd50:	d029      	beq.n	fda6 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    fd52:	7a63      	ldrb	r3, [r4, #9]
    fd54:	2b00      	cmp	r3, #0
    fd56:	d000      	beq.n	fd5a <_spi_interrupt_handler+0x12e>
    fd58:	e78e      	b.n	fc78 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    fd5a:	07bb      	lsls	r3, r7, #30
    fd5c:	d400      	bmi.n	fd60 <_spi_interrupt_handler+0x134>
    fd5e:	e78b      	b.n	fc78 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    fd60:	0020      	movs	r0, r4
    fd62:	6923      	ldr	r3, [r4, #16]
    fd64:	4798      	blx	r3
    fd66:	e787      	b.n	fc78 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    fd68:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    fd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    fd6c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    fd6e:	3b01      	subs	r3, #1
    fd70:	b29b      	uxth	r3, r3
    fd72:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    fd74:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    fd76:	b29b      	uxth	r3, r3
    fd78:	2b00      	cmp	r3, #0
    fd7a:	d000      	beq.n	fd7e <_spi_interrupt_handler+0x152>
    fd7c:	e77c      	b.n	fc78 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    fd7e:	3304      	adds	r3, #4
    fd80:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    fd82:	2200      	movs	r2, #0
    fd84:	3334      	adds	r3, #52	; 0x34
    fd86:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    fd88:	3b35      	subs	r3, #53	; 0x35
    fd8a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    fd8c:	07fb      	lsls	r3, r7, #31
    fd8e:	d400      	bmi.n	fd92 <_spi_interrupt_handler+0x166>
    fd90:	e772      	b.n	fc78 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    fd92:	0020      	movs	r0, r4
    fd94:	68e3      	ldr	r3, [r4, #12]
    fd96:	4798      	blx	r3
    fd98:	e76e      	b.n	fc78 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    fd9a:	0a1b      	lsrs	r3, r3, #8
    fd9c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    fd9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    fda0:	3301      	adds	r3, #1
    fda2:	62a3      	str	r3, [r4, #40]	; 0x28
    fda4:	e7c4      	b.n	fd30 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    fda6:	077b      	lsls	r3, r7, #29
    fda8:	d400      	bmi.n	fdac <_spi_interrupt_handler+0x180>
    fdaa:	e765      	b.n	fc78 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    fdac:	0020      	movs	r0, r4
    fdae:	6963      	ldr	r3, [r4, #20]
    fdb0:	4798      	blx	r3
    fdb2:	e761      	b.n	fc78 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    fdb4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    fdb6:	2b01      	cmp	r3, #1
    fdb8:	d000      	beq.n	fdbc <_spi_interrupt_handler+0x190>
    fdba:	e763      	b.n	fc84 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    fdbc:	79e3      	ldrb	r3, [r4, #7]
    fdbe:	2b00      	cmp	r3, #0
    fdc0:	d000      	beq.n	fdc4 <_spi_interrupt_handler+0x198>
    fdc2:	e75f      	b.n	fc84 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    fdc4:	3302      	adds	r3, #2
    fdc6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    fdc8:	3301      	adds	r3, #1
    fdca:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    fdcc:	2200      	movs	r2, #0
    fdce:	3335      	adds	r3, #53	; 0x35
    fdd0:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    fdd2:	07fb      	lsls	r3, r7, #31
    fdd4:	d400      	bmi.n	fdd8 <_spi_interrupt_handler+0x1ac>
    fdd6:	e755      	b.n	fc84 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    fdd8:	0020      	movs	r0, r4
    fdda:	68e3      	ldr	r3, [r4, #12]
    fddc:	4798      	blx	r3
    fdde:	e751      	b.n	fc84 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    fde0:	2380      	movs	r3, #128	; 0x80
    fde2:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    fde4:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    fde6:	067b      	lsls	r3, r7, #25
    fde8:	d400      	bmi.n	fdec <_spi_interrupt_handler+0x1c0>
    fdea:	e74f      	b.n	fc8c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    fdec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fdee:	0020      	movs	r0, r4
    fdf0:	4798      	blx	r3
}
    fdf2:	e74b      	b.n	fc8c <_spi_interrupt_handler+0x60>
    fdf4:	2000124c 	.word	0x2000124c
    fdf8:	20001264 	.word	0x20001264

0000fdfc <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    fdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdfe:	46de      	mov	lr, fp
    fe00:	4657      	mov	r7, sl
    fe02:	464e      	mov	r6, r9
    fe04:	4645      	mov	r5, r8
    fe06:	b5e0      	push	{r5, r6, r7, lr}
    fe08:	b091      	sub	sp, #68	; 0x44
    fe0a:	0005      	movs	r5, r0
    fe0c:	000c      	movs	r4, r1
    fe0e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    fe10:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    fe12:	0008      	movs	r0, r1
    fe14:	4bbc      	ldr	r3, [pc, #752]	; (10108 <usart_init+0x30c>)
    fe16:	4798      	blx	r3
    fe18:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    fe1a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    fe1c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    fe1e:	07db      	lsls	r3, r3, #31
    fe20:	d506      	bpl.n	fe30 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    fe22:	b011      	add	sp, #68	; 0x44
    fe24:	bc3c      	pop	{r2, r3, r4, r5}
    fe26:	4690      	mov	r8, r2
    fe28:	4699      	mov	r9, r3
    fe2a:	46a2      	mov	sl, r4
    fe2c:	46ab      	mov	fp, r5
    fe2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    fe30:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    fe32:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    fe34:	079b      	lsls	r3, r3, #30
    fe36:	d4f4      	bmi.n	fe22 <usart_init+0x26>
    fe38:	49b4      	ldr	r1, [pc, #720]	; (1010c <usart_init+0x310>)
    fe3a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    fe3c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    fe3e:	2301      	movs	r3, #1
    fe40:	40bb      	lsls	r3, r7
    fe42:	4303      	orrs	r3, r0
    fe44:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    fe46:	a90f      	add	r1, sp, #60	; 0x3c
    fe48:	272d      	movs	r7, #45	; 0x2d
    fe4a:	5df3      	ldrb	r3, [r6, r7]
    fe4c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    fe4e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    fe50:	b2d3      	uxtb	r3, r2
    fe52:	9302      	str	r3, [sp, #8]
    fe54:	0018      	movs	r0, r3
    fe56:	4bae      	ldr	r3, [pc, #696]	; (10110 <usart_init+0x314>)
    fe58:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    fe5a:	9802      	ldr	r0, [sp, #8]
    fe5c:	4bad      	ldr	r3, [pc, #692]	; (10114 <usart_init+0x318>)
    fe5e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    fe60:	5df0      	ldrb	r0, [r6, r7]
    fe62:	2100      	movs	r1, #0
    fe64:	4bac      	ldr	r3, [pc, #688]	; (10118 <usart_init+0x31c>)
    fe66:	4798      	blx	r3
	module->character_size = config->character_size;
    fe68:	7af3      	ldrb	r3, [r6, #11]
    fe6a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    fe6c:	2324      	movs	r3, #36	; 0x24
    fe6e:	5cf3      	ldrb	r3, [r6, r3]
    fe70:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    fe72:	2325      	movs	r3, #37	; 0x25
    fe74:	5cf3      	ldrb	r3, [r6, r3]
    fe76:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    fe78:	7ef3      	ldrb	r3, [r6, #27]
    fe7a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    fe7c:	7f33      	ldrb	r3, [r6, #28]
    fe7e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    fe80:	682b      	ldr	r3, [r5, #0]
    fe82:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    fe84:	0018      	movs	r0, r3
    fe86:	4ba0      	ldr	r3, [pc, #640]	; (10108 <usart_init+0x30c>)
    fe88:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    fe8a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    fe8c:	2200      	movs	r2, #0
    fe8e:	230e      	movs	r3, #14
    fe90:	a906      	add	r1, sp, #24
    fe92:	468c      	mov	ip, r1
    fe94:	4463      	add	r3, ip
    fe96:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    fe98:	8a32      	ldrh	r2, [r6, #16]
    fe9a:	9202      	str	r2, [sp, #8]
    fe9c:	2380      	movs	r3, #128	; 0x80
    fe9e:	01db      	lsls	r3, r3, #7
    fea0:	429a      	cmp	r2, r3
    fea2:	d100      	bne.n	fea6 <usart_init+0xaa>
    fea4:	e09e      	b.n	ffe4 <usart_init+0x1e8>
    fea6:	d90f      	bls.n	fec8 <usart_init+0xcc>
    fea8:	23c0      	movs	r3, #192	; 0xc0
    feaa:	01db      	lsls	r3, r3, #7
    feac:	9a02      	ldr	r2, [sp, #8]
    feae:	429a      	cmp	r2, r3
    feb0:	d100      	bne.n	feb4 <usart_init+0xb8>
    feb2:	e092      	b.n	ffda <usart_init+0x1de>
    feb4:	2380      	movs	r3, #128	; 0x80
    feb6:	021b      	lsls	r3, r3, #8
    feb8:	429a      	cmp	r2, r3
    feba:	d000      	beq.n	febe <usart_init+0xc2>
    febc:	e11f      	b.n	100fe <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    febe:	2303      	movs	r3, #3
    fec0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    fec2:	2300      	movs	r3, #0
    fec4:	9307      	str	r3, [sp, #28]
    fec6:	e008      	b.n	feda <usart_init+0xde>
	switch (config->sample_rate) {
    fec8:	2380      	movs	r3, #128	; 0x80
    feca:	019b      	lsls	r3, r3, #6
    fecc:	429a      	cmp	r2, r3
    fece:	d000      	beq.n	fed2 <usart_init+0xd6>
    fed0:	e115      	b.n	100fe <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    fed2:	2310      	movs	r3, #16
    fed4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    fed6:	3b0f      	subs	r3, #15
    fed8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    feda:	6833      	ldr	r3, [r6, #0]
    fedc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    fede:	68f3      	ldr	r3, [r6, #12]
    fee0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    fee2:	6973      	ldr	r3, [r6, #20]
    fee4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    fee6:	7e33      	ldrb	r3, [r6, #24]
    fee8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    feea:	2326      	movs	r3, #38	; 0x26
    feec:	5cf3      	ldrb	r3, [r6, r3]
    feee:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    fef0:	6873      	ldr	r3, [r6, #4]
    fef2:	4699      	mov	r9, r3
	switch (transfer_mode)
    fef4:	2b00      	cmp	r3, #0
    fef6:	d100      	bne.n	fefa <usart_init+0xfe>
    fef8:	e0a0      	b.n	1003c <usart_init+0x240>
    fefa:	2380      	movs	r3, #128	; 0x80
    fefc:	055b      	lsls	r3, r3, #21
    fefe:	4599      	cmp	r9, r3
    ff00:	d100      	bne.n	ff04 <usart_init+0x108>
    ff02:	e084      	b.n	1000e <usart_init+0x212>
	if(config->encoding_format_enable) {
    ff04:	7e73      	ldrb	r3, [r6, #25]
    ff06:	2b00      	cmp	r3, #0
    ff08:	d002      	beq.n	ff10 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    ff0a:	7eb3      	ldrb	r3, [r6, #26]
    ff0c:	4642      	mov	r2, r8
    ff0e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    ff10:	682a      	ldr	r2, [r5, #0]
    ff12:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    ff14:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    ff16:	2b00      	cmp	r3, #0
    ff18:	d1fc      	bne.n	ff14 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    ff1a:	330e      	adds	r3, #14
    ff1c:	aa06      	add	r2, sp, #24
    ff1e:	4694      	mov	ip, r2
    ff20:	4463      	add	r3, ip
    ff22:	881b      	ldrh	r3, [r3, #0]
    ff24:	4642      	mov	r2, r8
    ff26:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    ff28:	9b05      	ldr	r3, [sp, #20]
    ff2a:	9a03      	ldr	r2, [sp, #12]
    ff2c:	4313      	orrs	r3, r2
    ff2e:	9a04      	ldr	r2, [sp, #16]
    ff30:	4313      	orrs	r3, r2
    ff32:	464a      	mov	r2, r9
    ff34:	4313      	orrs	r3, r2
    ff36:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    ff38:	465b      	mov	r3, fp
    ff3a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    ff3c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    ff3e:	4653      	mov	r3, sl
    ff40:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    ff42:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    ff44:	2327      	movs	r3, #39	; 0x27
    ff46:	5cf3      	ldrb	r3, [r6, r3]
    ff48:	2b00      	cmp	r3, #0
    ff4a:	d101      	bne.n	ff50 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    ff4c:	3304      	adds	r3, #4
    ff4e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ff50:	7e73      	ldrb	r3, [r6, #25]
    ff52:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ff54:	7f32      	ldrb	r2, [r6, #28]
    ff56:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ff58:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ff5a:	7f72      	ldrb	r2, [r6, #29]
    ff5c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ff5e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ff60:	2224      	movs	r2, #36	; 0x24
    ff62:	5cb2      	ldrb	r2, [r6, r2]
    ff64:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ff66:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    ff68:	2225      	movs	r2, #37	; 0x25
    ff6a:	5cb2      	ldrb	r2, [r6, r2]
    ff6c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ff6e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    ff70:	7ab1      	ldrb	r1, [r6, #10]
    ff72:	7af2      	ldrb	r2, [r6, #11]
    ff74:	4311      	orrs	r1, r2
    ff76:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    ff78:	8933      	ldrh	r3, [r6, #8]
    ff7a:	2bff      	cmp	r3, #255	; 0xff
    ff7c:	d100      	bne.n	ff80 <usart_init+0x184>
    ff7e:	e081      	b.n	10084 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    ff80:	2280      	movs	r2, #128	; 0x80
    ff82:	0452      	lsls	r2, r2, #17
    ff84:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    ff86:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    ff88:	232c      	movs	r3, #44	; 0x2c
    ff8a:	5cf3      	ldrb	r3, [r6, r3]
    ff8c:	2b00      	cmp	r3, #0
    ff8e:	d103      	bne.n	ff98 <usart_init+0x19c>
    ff90:	4b62      	ldr	r3, [pc, #392]	; (1011c <usart_init+0x320>)
    ff92:	789b      	ldrb	r3, [r3, #2]
    ff94:	079b      	lsls	r3, r3, #30
    ff96:	d501      	bpl.n	ff9c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    ff98:	2380      	movs	r3, #128	; 0x80
    ff9a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    ff9c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    ff9e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    ffa0:	2b00      	cmp	r3, #0
    ffa2:	d1fc      	bne.n	ff9e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    ffa4:	4643      	mov	r3, r8
    ffa6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    ffa8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    ffaa:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    ffac:	2b00      	cmp	r3, #0
    ffae:	d1fc      	bne.n	ffaa <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    ffb0:	4643      	mov	r3, r8
    ffb2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    ffb4:	ab0e      	add	r3, sp, #56	; 0x38
    ffb6:	2280      	movs	r2, #128	; 0x80
    ffb8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ffba:	2200      	movs	r2, #0
    ffbc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    ffbe:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    ffc0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    ffc2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    ffc4:	930a      	str	r3, [sp, #40]	; 0x28
    ffc6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    ffc8:	930b      	str	r3, [sp, #44]	; 0x2c
    ffca:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    ffcc:	930c      	str	r3, [sp, #48]	; 0x30
    ffce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    ffd0:	9302      	str	r3, [sp, #8]
    ffd2:	930d      	str	r3, [sp, #52]	; 0x34
    ffd4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    ffd6:	ae0a      	add	r6, sp, #40	; 0x28
    ffd8:	e063      	b.n	100a2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    ffda:	2308      	movs	r3, #8
    ffdc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    ffde:	3b07      	subs	r3, #7
    ffe0:	9307      	str	r3, [sp, #28]
    ffe2:	e77a      	b.n	feda <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    ffe4:	6833      	ldr	r3, [r6, #0]
    ffe6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    ffe8:	68f3      	ldr	r3, [r6, #12]
    ffea:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    ffec:	6973      	ldr	r3, [r6, #20]
    ffee:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    fff0:	7e33      	ldrb	r3, [r6, #24]
    fff2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    fff4:	2326      	movs	r3, #38	; 0x26
    fff6:	5cf3      	ldrb	r3, [r6, r3]
    fff8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    fffa:	6873      	ldr	r3, [r6, #4]
    fffc:	4699      	mov	r9, r3
	switch (transfer_mode)
    fffe:	2b00      	cmp	r3, #0
   10000:	d018      	beq.n	10034 <usart_init+0x238>
   10002:	2380      	movs	r3, #128	; 0x80
   10004:	055b      	lsls	r3, r3, #21
   10006:	4599      	cmp	r9, r3
   10008:	d001      	beq.n	1000e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
   1000a:	2000      	movs	r0, #0
   1000c:	e025      	b.n	1005a <usart_init+0x25e>
			if (!config->use_external_clock) {
   1000e:	2327      	movs	r3, #39	; 0x27
   10010:	5cf3      	ldrb	r3, [r6, r3]
   10012:	2b00      	cmp	r3, #0
   10014:	d000      	beq.n	10018 <usart_init+0x21c>
   10016:	e775      	b.n	ff04 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   10018:	6a33      	ldr	r3, [r6, #32]
   1001a:	001f      	movs	r7, r3
   1001c:	b2c0      	uxtb	r0, r0
   1001e:	4b40      	ldr	r3, [pc, #256]	; (10120 <usart_init+0x324>)
   10020:	4798      	blx	r3
   10022:	0001      	movs	r1, r0
   10024:	220e      	movs	r2, #14
   10026:	ab06      	add	r3, sp, #24
   10028:	469c      	mov	ip, r3
   1002a:	4462      	add	r2, ip
   1002c:	0038      	movs	r0, r7
   1002e:	4b3d      	ldr	r3, [pc, #244]	; (10124 <usart_init+0x328>)
   10030:	4798      	blx	r3
   10032:	e012      	b.n	1005a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   10034:	2308      	movs	r3, #8
   10036:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10038:	2300      	movs	r3, #0
   1003a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
   1003c:	2327      	movs	r3, #39	; 0x27
   1003e:	5cf3      	ldrb	r3, [r6, r3]
   10040:	2b00      	cmp	r3, #0
   10042:	d00e      	beq.n	10062 <usart_init+0x266>
				status_code =
   10044:	9b06      	ldr	r3, [sp, #24]
   10046:	9300      	str	r3, [sp, #0]
   10048:	9b07      	ldr	r3, [sp, #28]
   1004a:	220e      	movs	r2, #14
   1004c:	a906      	add	r1, sp, #24
   1004e:	468c      	mov	ip, r1
   10050:	4462      	add	r2, ip
   10052:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   10054:	6a30      	ldr	r0, [r6, #32]
   10056:	4f34      	ldr	r7, [pc, #208]	; (10128 <usart_init+0x32c>)
   10058:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
   1005a:	2800      	cmp	r0, #0
   1005c:	d000      	beq.n	10060 <usart_init+0x264>
   1005e:	e6e0      	b.n	fe22 <usart_init+0x26>
   10060:	e750      	b.n	ff04 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
   10062:	6a33      	ldr	r3, [r6, #32]
   10064:	001f      	movs	r7, r3
   10066:	b2c0      	uxtb	r0, r0
   10068:	4b2d      	ldr	r3, [pc, #180]	; (10120 <usart_init+0x324>)
   1006a:	4798      	blx	r3
   1006c:	0001      	movs	r1, r0
				status_code =
   1006e:	9b06      	ldr	r3, [sp, #24]
   10070:	9300      	str	r3, [sp, #0]
   10072:	9b07      	ldr	r3, [sp, #28]
   10074:	220e      	movs	r2, #14
   10076:	a806      	add	r0, sp, #24
   10078:	4684      	mov	ip, r0
   1007a:	4462      	add	r2, ip
   1007c:	0038      	movs	r0, r7
   1007e:	4f2a      	ldr	r7, [pc, #168]	; (10128 <usart_init+0x32c>)
   10080:	47b8      	blx	r7
   10082:	e7ea      	b.n	1005a <usart_init+0x25e>
		if(config->lin_slave_enable) {
   10084:	7ef3      	ldrb	r3, [r6, #27]
   10086:	2b00      	cmp	r3, #0
   10088:	d100      	bne.n	1008c <usart_init+0x290>
   1008a:	e77d      	b.n	ff88 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   1008c:	2380      	movs	r3, #128	; 0x80
   1008e:	04db      	lsls	r3, r3, #19
   10090:	431f      	orrs	r7, r3
   10092:	e779      	b.n	ff88 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   10094:	0020      	movs	r0, r4
   10096:	4b25      	ldr	r3, [pc, #148]	; (1012c <usart_init+0x330>)
   10098:	4798      	blx	r3
   1009a:	e007      	b.n	100ac <usart_init+0x2b0>
   1009c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
   1009e:	2f04      	cmp	r7, #4
   100a0:	d00d      	beq.n	100be <usart_init+0x2c2>
   100a2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
   100a4:	00bb      	lsls	r3, r7, #2
   100a6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
   100a8:	2800      	cmp	r0, #0
   100aa:	d0f3      	beq.n	10094 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
   100ac:	1c43      	adds	r3, r0, #1
   100ae:	d0f5      	beq.n	1009c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   100b0:	a90e      	add	r1, sp, #56	; 0x38
   100b2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   100b4:	0c00      	lsrs	r0, r0, #16
   100b6:	b2c0      	uxtb	r0, r0
   100b8:	4b1d      	ldr	r3, [pc, #116]	; (10130 <usart_init+0x334>)
   100ba:	4798      	blx	r3
   100bc:	e7ee      	b.n	1009c <usart_init+0x2a0>
		module->callback[i]            = NULL;
   100be:	2300      	movs	r3, #0
   100c0:	60eb      	str	r3, [r5, #12]
   100c2:	612b      	str	r3, [r5, #16]
   100c4:	616b      	str	r3, [r5, #20]
   100c6:	61ab      	str	r3, [r5, #24]
   100c8:	61eb      	str	r3, [r5, #28]
   100ca:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
   100cc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   100ce:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   100d0:	2200      	movs	r2, #0
   100d2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   100d4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   100d6:	3330      	adds	r3, #48	; 0x30
   100d8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
   100da:	3301      	adds	r3, #1
   100dc:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
   100de:	3301      	adds	r3, #1
   100e0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
   100e2:	3301      	adds	r3, #1
   100e4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   100e6:	6828      	ldr	r0, [r5, #0]
   100e8:	4b07      	ldr	r3, [pc, #28]	; (10108 <usart_init+0x30c>)
   100ea:	4798      	blx	r3
   100ec:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   100ee:	4911      	ldr	r1, [pc, #68]	; (10134 <usart_init+0x338>)
   100f0:	4b11      	ldr	r3, [pc, #68]	; (10138 <usart_init+0x33c>)
   100f2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   100f4:	00a4      	lsls	r4, r4, #2
   100f6:	4b11      	ldr	r3, [pc, #68]	; (1013c <usart_init+0x340>)
   100f8:	50e5      	str	r5, [r4, r3]
	return status_code;
   100fa:	2000      	movs	r0, #0
   100fc:	e691      	b.n	fe22 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   100fe:	2310      	movs	r3, #16
   10100:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   10102:	2300      	movs	r3, #0
   10104:	9307      	str	r3, [sp, #28]
   10106:	e6e8      	b.n	feda <usart_init+0xde>
   10108:	0000f601 	.word	0x0000f601
   1010c:	40000400 	.word	0x40000400
   10110:	000109b9 	.word	0x000109b9
   10114:	0001092d 	.word	0x0001092d
   10118:	0000f43d 	.word	0x0000f43d
   1011c:	41002000 	.word	0x41002000
   10120:	000109d5 	.word	0x000109d5
   10124:	0000f37f 	.word	0x0000f37f
   10128:	0000f3a9 	.word	0x0000f3a9
   1012c:	0000f489 	.word	0x0000f489
   10130:	00010ab1 	.word	0x00010ab1
   10134:	000101dd 	.word	0x000101dd
   10138:	0000f63d 	.word	0x0000f63d
   1013c:	2000124c 	.word	0x2000124c

00010140 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   10140:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
   10142:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
   10144:	2a00      	cmp	r2, #0
   10146:	d101      	bne.n	1014c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
   10148:	0018      	movs	r0, r3
   1014a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
   1014c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
   1014e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   10150:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
   10152:	2a00      	cmp	r2, #0
   10154:	d1f8      	bne.n	10148 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10156:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
   10158:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   1015a:	2a00      	cmp	r2, #0
   1015c:	d1fc      	bne.n	10158 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
   1015e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
   10160:	2102      	movs	r1, #2
   10162:	7e1a      	ldrb	r2, [r3, #24]
   10164:	420a      	tst	r2, r1
   10166:	d0fc      	beq.n	10162 <usart_write_wait+0x22>
	return STATUS_OK;
   10168:	2300      	movs	r3, #0
   1016a:	e7ed      	b.n	10148 <usart_write_wait+0x8>

0001016c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   1016c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
   1016e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
   10170:	2a00      	cmp	r2, #0
   10172:	d101      	bne.n	10178 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
   10174:	0018      	movs	r0, r3
   10176:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
   10178:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   1017a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
   1017c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
   1017e:	2a00      	cmp	r2, #0
   10180:	d1f8      	bne.n	10174 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
   10182:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
   10184:	7e10      	ldrb	r0, [r2, #24]
   10186:	0740      	lsls	r0, r0, #29
   10188:	d5f4      	bpl.n	10174 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
   1018a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
   1018c:	2b00      	cmp	r3, #0
   1018e:	d1fc      	bne.n	1018a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10190:	8b53      	ldrh	r3, [r2, #26]
   10192:	b2db      	uxtb	r3, r3
	if (error_code) {
   10194:	0698      	lsls	r0, r3, #26
   10196:	d01d      	beq.n	101d4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
   10198:	0798      	lsls	r0, r3, #30
   1019a:	d503      	bpl.n	101a4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1019c:	2302      	movs	r3, #2
   1019e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
   101a0:	3318      	adds	r3, #24
   101a2:	e7e7      	b.n	10174 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   101a4:	0758      	lsls	r0, r3, #29
   101a6:	d503      	bpl.n	101b0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   101a8:	2304      	movs	r3, #4
   101aa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
   101ac:	331a      	adds	r3, #26
   101ae:	e7e1      	b.n	10174 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
   101b0:	07d8      	lsls	r0, r3, #31
   101b2:	d503      	bpl.n	101bc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   101b4:	2301      	movs	r3, #1
   101b6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
   101b8:	3312      	adds	r3, #18
   101ba:	e7db      	b.n	10174 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
   101bc:	06d8      	lsls	r0, r3, #27
   101be:	d503      	bpl.n	101c8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   101c0:	2310      	movs	r3, #16
   101c2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
   101c4:	3332      	adds	r3, #50	; 0x32
   101c6:	e7d5      	b.n	10174 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
   101c8:	069b      	lsls	r3, r3, #26
   101ca:	d503      	bpl.n	101d4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   101cc:	2320      	movs	r3, #32
   101ce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
   101d0:	3321      	adds	r3, #33	; 0x21
   101d2:	e7cf      	b.n	10174 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
   101d4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
   101d6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
   101d8:	2300      	movs	r3, #0
   101da:	e7cb      	b.n	10174 <usart_read_wait+0x8>

000101dc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   101dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
   101de:	0080      	lsls	r0, r0, #2
   101e0:	4b62      	ldr	r3, [pc, #392]	; (1036c <_usart_interrupt_handler+0x190>)
   101e2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   101e4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
   101e6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
   101e8:	2b00      	cmp	r3, #0
   101ea:	d1fc      	bne.n	101e6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   101ec:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
   101ee:	7da6      	ldrb	r6, [r4, #22]
   101f0:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
   101f2:	2330      	movs	r3, #48	; 0x30
   101f4:	5ceb      	ldrb	r3, [r5, r3]
   101f6:	2231      	movs	r2, #49	; 0x31
   101f8:	5caf      	ldrb	r7, [r5, r2]
   101fa:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   101fc:	07f3      	lsls	r3, r6, #31
   101fe:	d522      	bpl.n	10246 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
   10200:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10202:	b29b      	uxth	r3, r3
   10204:	2b00      	cmp	r3, #0
   10206:	d01c      	beq.n	10242 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10208:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1020a:	7813      	ldrb	r3, [r2, #0]
   1020c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   1020e:	1c51      	adds	r1, r2, #1
   10210:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   10212:	7969      	ldrb	r1, [r5, #5]
   10214:	2901      	cmp	r1, #1
   10216:	d00e      	beq.n	10236 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   10218:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   1021a:	05db      	lsls	r3, r3, #23
   1021c:	0ddb      	lsrs	r3, r3, #23
   1021e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   10220:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   10222:	3b01      	subs	r3, #1
   10224:	b29b      	uxth	r3, r3
   10226:	85eb      	strh	r3, [r5, #46]	; 0x2e
   10228:	2b00      	cmp	r3, #0
   1022a:	d10c      	bne.n	10246 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   1022c:	3301      	adds	r3, #1
   1022e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   10230:	3301      	adds	r3, #1
   10232:	75a3      	strb	r3, [r4, #22]
   10234:	e007      	b.n	10246 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   10236:	7851      	ldrb	r1, [r2, #1]
   10238:	0209      	lsls	r1, r1, #8
   1023a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
   1023c:	3202      	adds	r2, #2
   1023e:	62aa      	str	r2, [r5, #40]	; 0x28
   10240:	e7eb      	b.n	1021a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   10242:	2301      	movs	r3, #1
   10244:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   10246:	07b3      	lsls	r3, r6, #30
   10248:	d506      	bpl.n	10258 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   1024a:	2302      	movs	r3, #2
   1024c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
   1024e:	2200      	movs	r2, #0
   10250:	3331      	adds	r3, #49	; 0x31
   10252:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   10254:	07fb      	lsls	r3, r7, #31
   10256:	d41a      	bmi.n	1028e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   10258:	0773      	lsls	r3, r6, #29
   1025a:	d565      	bpl.n	10328 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
   1025c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   1025e:	b29b      	uxth	r3, r3
   10260:	2b00      	cmp	r3, #0
   10262:	d05f      	beq.n	10324 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   10264:	8b63      	ldrh	r3, [r4, #26]
   10266:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   10268:	071a      	lsls	r2, r3, #28
   1026a:	d414      	bmi.n	10296 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   1026c:	223f      	movs	r2, #63	; 0x3f
   1026e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   10270:	2b00      	cmp	r3, #0
   10272:	d034      	beq.n	102de <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   10274:	079a      	lsls	r2, r3, #30
   10276:	d511      	bpl.n	1029c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   10278:	221a      	movs	r2, #26
   1027a:	2332      	movs	r3, #50	; 0x32
   1027c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   1027e:	3b30      	subs	r3, #48	; 0x30
   10280:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
   10282:	077b      	lsls	r3, r7, #29
   10284:	d550      	bpl.n	10328 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   10286:	0028      	movs	r0, r5
   10288:	696b      	ldr	r3, [r5, #20]
   1028a:	4798      	blx	r3
   1028c:	e04c      	b.n	10328 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   1028e:	0028      	movs	r0, r5
   10290:	68eb      	ldr	r3, [r5, #12]
   10292:	4798      	blx	r3
   10294:	e7e0      	b.n	10258 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   10296:	2237      	movs	r2, #55	; 0x37
   10298:	4013      	ands	r3, r2
   1029a:	e7e9      	b.n	10270 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   1029c:	075a      	lsls	r2, r3, #29
   1029e:	d505      	bpl.n	102ac <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
   102a0:	221e      	movs	r2, #30
   102a2:	2332      	movs	r3, #50	; 0x32
   102a4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   102a6:	3b2e      	subs	r3, #46	; 0x2e
   102a8:	8363      	strh	r3, [r4, #26]
   102aa:	e7ea      	b.n	10282 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   102ac:	07da      	lsls	r2, r3, #31
   102ae:	d505      	bpl.n	102bc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
   102b0:	2213      	movs	r2, #19
   102b2:	2332      	movs	r3, #50	; 0x32
   102b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   102b6:	3b31      	subs	r3, #49	; 0x31
   102b8:	8363      	strh	r3, [r4, #26]
   102ba:	e7e2      	b.n	10282 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   102bc:	06da      	lsls	r2, r3, #27
   102be:	d505      	bpl.n	102cc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
   102c0:	2242      	movs	r2, #66	; 0x42
   102c2:	2332      	movs	r3, #50	; 0x32
   102c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   102c6:	3b22      	subs	r3, #34	; 0x22
   102c8:	8363      	strh	r3, [r4, #26]
   102ca:	e7da      	b.n	10282 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   102cc:	2220      	movs	r2, #32
   102ce:	421a      	tst	r2, r3
   102d0:	d0d7      	beq.n	10282 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   102d2:	3221      	adds	r2, #33	; 0x21
   102d4:	2332      	movs	r3, #50	; 0x32
   102d6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   102d8:	3b12      	subs	r3, #18
   102da:	8363      	strh	r3, [r4, #26]
   102dc:	e7d1      	b.n	10282 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   102de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   102e0:	05db      	lsls	r3, r3, #23
   102e2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   102e4:	b2da      	uxtb	r2, r3
   102e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   102e8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   102ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   102ec:	1c51      	adds	r1, r2, #1
   102ee:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   102f0:	7969      	ldrb	r1, [r5, #5]
   102f2:	2901      	cmp	r1, #1
   102f4:	d010      	beq.n	10318 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   102f6:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   102f8:	3b01      	subs	r3, #1
   102fa:	b29b      	uxth	r3, r3
   102fc:	85ab      	strh	r3, [r5, #44]	; 0x2c
   102fe:	2b00      	cmp	r3, #0
   10300:	d112      	bne.n	10328 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10302:	3304      	adds	r3, #4
   10304:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
   10306:	2200      	movs	r2, #0
   10308:	332e      	adds	r3, #46	; 0x2e
   1030a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
   1030c:	07bb      	lsls	r3, r7, #30
   1030e:	d50b      	bpl.n	10328 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   10310:	0028      	movs	r0, r5
   10312:	692b      	ldr	r3, [r5, #16]
   10314:	4798      	blx	r3
   10316:	e007      	b.n	10328 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
   10318:	0a1b      	lsrs	r3, r3, #8
   1031a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
   1031c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1031e:	3301      	adds	r3, #1
   10320:	626b      	str	r3, [r5, #36]	; 0x24
   10322:	e7e8      	b.n	102f6 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   10324:	2304      	movs	r3, #4
   10326:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   10328:	06f3      	lsls	r3, r6, #27
   1032a:	d504      	bpl.n	10336 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   1032c:	2310      	movs	r3, #16
   1032e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   10330:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   10332:	06fb      	lsls	r3, r7, #27
   10334:	d40e      	bmi.n	10354 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   10336:	06b3      	lsls	r3, r6, #26
   10338:	d504      	bpl.n	10344 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   1033a:	2320      	movs	r3, #32
   1033c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   1033e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   10340:	073b      	lsls	r3, r7, #28
   10342:	d40b      	bmi.n	1035c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   10344:	0733      	lsls	r3, r6, #28
   10346:	d504      	bpl.n	10352 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   10348:	2308      	movs	r3, #8
   1034a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   1034c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   1034e:	06bb      	lsls	r3, r7, #26
   10350:	d408      	bmi.n	10364 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
   10352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   10354:	0028      	movs	r0, r5
   10356:	69eb      	ldr	r3, [r5, #28]
   10358:	4798      	blx	r3
   1035a:	e7ec      	b.n	10336 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   1035c:	0028      	movs	r0, r5
   1035e:	69ab      	ldr	r3, [r5, #24]
   10360:	4798      	blx	r3
   10362:	e7ef      	b.n	10344 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   10364:	6a2b      	ldr	r3, [r5, #32]
   10366:	0028      	movs	r0, r5
   10368:	4798      	blx	r3
}
   1036a:	e7f2      	b.n	10352 <_usart_interrupt_handler+0x176>
   1036c:	2000124c 	.word	0x2000124c

00010370 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   10370:	b510      	push	{r4, lr}
	switch (clock_source) {
   10372:	2808      	cmp	r0, #8
   10374:	d803      	bhi.n	1037e <system_clock_source_get_hz+0xe>
   10376:	0080      	lsls	r0, r0, #2
   10378:	4b1c      	ldr	r3, [pc, #112]	; (103ec <system_clock_source_get_hz+0x7c>)
   1037a:	581b      	ldr	r3, [r3, r0]
   1037c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
   1037e:	2000      	movs	r0, #0
   10380:	e032      	b.n	103e8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
   10382:	4b1b      	ldr	r3, [pc, #108]	; (103f0 <system_clock_source_get_hz+0x80>)
   10384:	6918      	ldr	r0, [r3, #16]
   10386:	e02f      	b.n	103e8 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   10388:	4b1a      	ldr	r3, [pc, #104]	; (103f4 <system_clock_source_get_hz+0x84>)
   1038a:	6a1b      	ldr	r3, [r3, #32]
   1038c:	059b      	lsls	r3, r3, #22
   1038e:	0f9b      	lsrs	r3, r3, #30
   10390:	4819      	ldr	r0, [pc, #100]	; (103f8 <system_clock_source_get_hz+0x88>)
   10392:	40d8      	lsrs	r0, r3
   10394:	e028      	b.n	103e8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
   10396:	4b16      	ldr	r3, [pc, #88]	; (103f0 <system_clock_source_get_hz+0x80>)
   10398:	6958      	ldr	r0, [r3, #20]
   1039a:	e025      	b.n	103e8 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   1039c:	4b14      	ldr	r3, [pc, #80]	; (103f0 <system_clock_source_get_hz+0x80>)
   1039e:	681b      	ldr	r3, [r3, #0]
			return 0;
   103a0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   103a2:	079b      	lsls	r3, r3, #30
   103a4:	d520      	bpl.n	103e8 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   103a6:	4913      	ldr	r1, [pc, #76]	; (103f4 <system_clock_source_get_hz+0x84>)
   103a8:	2210      	movs	r2, #16
   103aa:	68cb      	ldr	r3, [r1, #12]
   103ac:	421a      	tst	r2, r3
   103ae:	d0fc      	beq.n	103aa <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
   103b0:	4b0f      	ldr	r3, [pc, #60]	; (103f0 <system_clock_source_get_hz+0x80>)
   103b2:	681a      	ldr	r2, [r3, #0]
   103b4:	2324      	movs	r3, #36	; 0x24
   103b6:	4013      	ands	r3, r2
   103b8:	2b04      	cmp	r3, #4
   103ba:	d001      	beq.n	103c0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
   103bc:	480f      	ldr	r0, [pc, #60]	; (103fc <system_clock_source_get_hz+0x8c>)
   103be:	e013      	b.n	103e8 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   103c0:	2000      	movs	r0, #0
   103c2:	4b0f      	ldr	r3, [pc, #60]	; (10400 <system_clock_source_get_hz+0x90>)
   103c4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
   103c6:	4b0a      	ldr	r3, [pc, #40]	; (103f0 <system_clock_source_get_hz+0x80>)
   103c8:	689b      	ldr	r3, [r3, #8]
   103ca:	041b      	lsls	r3, r3, #16
   103cc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   103ce:	4358      	muls	r0, r3
   103d0:	e00a      	b.n	103e8 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   103d2:	2350      	movs	r3, #80	; 0x50
   103d4:	4a07      	ldr	r2, [pc, #28]	; (103f4 <system_clock_source_get_hz+0x84>)
   103d6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
   103d8:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   103da:	075b      	lsls	r3, r3, #29
   103dc:	d504      	bpl.n	103e8 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
   103de:	4b04      	ldr	r3, [pc, #16]	; (103f0 <system_clock_source_get_hz+0x80>)
   103e0:	68d8      	ldr	r0, [r3, #12]
   103e2:	e001      	b.n	103e8 <system_clock_source_get_hz+0x78>
		return 32768UL;
   103e4:	2080      	movs	r0, #128	; 0x80
   103e6:	0200      	lsls	r0, r0, #8
	}
}
   103e8:	bd10      	pop	{r4, pc}
   103ea:	46c0      	nop			; (mov r8, r8)
   103ec:	0001c3d4 	.word	0x0001c3d4
   103f0:	20000534 	.word	0x20000534
   103f4:	40000800 	.word	0x40000800
   103f8:	007a1200 	.word	0x007a1200
   103fc:	02dc6c00 	.word	0x02dc6c00
   10400:	000109d5 	.word	0x000109d5

00010404 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   10404:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   10406:	490c      	ldr	r1, [pc, #48]	; (10438 <system_clock_source_osc8m_set_config+0x34>)
   10408:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   1040a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
   1040c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
   1040e:	7840      	ldrb	r0, [r0, #1]
   10410:	2201      	movs	r2, #1
   10412:	4010      	ands	r0, r2
   10414:	0180      	lsls	r0, r0, #6
   10416:	2640      	movs	r6, #64	; 0x40
   10418:	43b3      	bics	r3, r6
   1041a:	4303      	orrs	r3, r0
   1041c:	402a      	ands	r2, r5
   1041e:	01d2      	lsls	r2, r2, #7
   10420:	2080      	movs	r0, #128	; 0x80
   10422:	4383      	bics	r3, r0
   10424:	4313      	orrs	r3, r2
   10426:	2203      	movs	r2, #3
   10428:	4022      	ands	r2, r4
   1042a:	0212      	lsls	r2, r2, #8
   1042c:	4803      	ldr	r0, [pc, #12]	; (1043c <system_clock_source_osc8m_set_config+0x38>)
   1042e:	4003      	ands	r3, r0
   10430:	4313      	orrs	r3, r2
   10432:	620b      	str	r3, [r1, #32]
}
   10434:	bd70      	pop	{r4, r5, r6, pc}
   10436:	46c0      	nop			; (mov r8, r8)
   10438:	40000800 	.word	0x40000800
   1043c:	fffffcff 	.word	0xfffffcff

00010440 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
   10440:	b5f0      	push	{r4, r5, r6, r7, lr}
   10442:	46de      	mov	lr, fp
   10444:	4657      	mov	r7, sl
   10446:	464e      	mov	r6, r9
   10448:	4645      	mov	r5, r8
   1044a:	b5e0      	push	{r5, r6, r7, lr}
   1044c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
   1044e:	4b26      	ldr	r3, [pc, #152]	; (104e8 <system_clock_source_xosc32k_set_config+0xa8>)
   10450:	469b      	mov	fp, r3
   10452:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
   10454:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
   10456:	7800      	ldrb	r0, [r0, #0]
   10458:	4242      	negs	r2, r0
   1045a:	4142      	adcs	r2, r0
   1045c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
   1045e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
   10460:	78ca      	ldrb	r2, [r1, #3]
   10462:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
   10464:	790a      	ldrb	r2, [r1, #4]
   10466:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
   10468:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
   1046a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
   1046c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
   1046e:	688a      	ldr	r2, [r1, #8]
   10470:	491e      	ldr	r1, [pc, #120]	; (104ec <system_clock_source_xosc32k_set_config+0xac>)
   10472:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
   10474:	2101      	movs	r1, #1
   10476:	464a      	mov	r2, r9
   10478:	0092      	lsls	r2, r2, #2
   1047a:	4691      	mov	r9, r2
   1047c:	2204      	movs	r2, #4
   1047e:	4393      	bics	r3, r2
   10480:	464a      	mov	r2, r9
   10482:	4313      	orrs	r3, r2
   10484:	4642      	mov	r2, r8
   10486:	400a      	ands	r2, r1
   10488:	00d2      	lsls	r2, r2, #3
   1048a:	4690      	mov	r8, r2
   1048c:	2208      	movs	r2, #8
   1048e:	4393      	bics	r3, r2
   10490:	4642      	mov	r2, r8
   10492:	4313      	orrs	r3, r2
   10494:	4662      	mov	r2, ip
   10496:	400a      	ands	r2, r1
   10498:	0112      	lsls	r2, r2, #4
   1049a:	4694      	mov	ip, r2
   1049c:	2210      	movs	r2, #16
   1049e:	4393      	bics	r3, r2
   104a0:	4662      	mov	r2, ip
   104a2:	4313      	orrs	r3, r2
   104a4:	4008      	ands	r0, r1
   104a6:	0140      	lsls	r0, r0, #5
   104a8:	2220      	movs	r2, #32
   104aa:	4393      	bics	r3, r2
   104ac:	4303      	orrs	r3, r0
   104ae:	400f      	ands	r7, r1
   104b0:	01bf      	lsls	r7, r7, #6
   104b2:	2040      	movs	r0, #64	; 0x40
   104b4:	4383      	bics	r3, r0
   104b6:	433b      	orrs	r3, r7
   104b8:	400e      	ands	r6, r1
   104ba:	01f6      	lsls	r6, r6, #7
   104bc:	3040      	adds	r0, #64	; 0x40
   104be:	4383      	bics	r3, r0
   104c0:	4333      	orrs	r3, r6
   104c2:	3879      	subs	r0, #121	; 0x79
   104c4:	4005      	ands	r5, r0
   104c6:	022d      	lsls	r5, r5, #8
   104c8:	4809      	ldr	r0, [pc, #36]	; (104f0 <system_clock_source_xosc32k_set_config+0xb0>)
   104ca:	4003      	ands	r3, r0
   104cc:	432b      	orrs	r3, r5
   104ce:	4021      	ands	r1, r4
   104d0:	0309      	lsls	r1, r1, #12
   104d2:	4808      	ldr	r0, [pc, #32]	; (104f4 <system_clock_source_xosc32k_set_config+0xb4>)
   104d4:	4003      	ands	r3, r0
   104d6:	430b      	orrs	r3, r1
   104d8:	465a      	mov	r2, fp
   104da:	8293      	strh	r3, [r2, #20]
}
   104dc:	bc3c      	pop	{r2, r3, r4, r5}
   104de:	4690      	mov	r8, r2
   104e0:	4699      	mov	r9, r3
   104e2:	46a2      	mov	sl, r4
   104e4:	46ab      	mov	fp, r5
   104e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104e8:	40000800 	.word	0x40000800
   104ec:	20000534 	.word	0x20000534
   104f0:	fffff8ff 	.word	0xfffff8ff
   104f4:	ffffefff 	.word	0xffffefff

000104f8 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
   104f8:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   104fa:	7a03      	ldrb	r3, [r0, #8]
   104fc:	069b      	lsls	r3, r3, #26
   104fe:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
   10500:	8942      	ldrh	r2, [r0, #10]
   10502:	0592      	lsls	r2, r2, #22
   10504:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
   10506:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
   10508:	4918      	ldr	r1, [pc, #96]	; (1056c <system_clock_source_dfll_set_config+0x74>)
   1050a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
   1050c:	7983      	ldrb	r3, [r0, #6]
   1050e:	79c2      	ldrb	r2, [r0, #7]
   10510:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
   10512:	8842      	ldrh	r2, [r0, #2]
   10514:	8884      	ldrh	r4, [r0, #4]
   10516:	4322      	orrs	r2, r4
   10518:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
   1051a:	7842      	ldrb	r2, [r0, #1]
   1051c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
   1051e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
   10520:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
   10522:	7803      	ldrb	r3, [r0, #0]
   10524:	2b04      	cmp	r3, #4
   10526:	d011      	beq.n	1054c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
   10528:	2b20      	cmp	r3, #32
   1052a:	d10e      	bne.n	1054a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1052c:	7b03      	ldrb	r3, [r0, #12]
   1052e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   10530:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10532:	4313      	orrs	r3, r2
   10534:	89c2      	ldrh	r2, [r0, #14]
   10536:	0412      	lsls	r2, r2, #16
   10538:	490d      	ldr	r1, [pc, #52]	; (10570 <system_clock_source_dfll_set_config+0x78>)
   1053a:	400a      	ands	r2, r1
   1053c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   1053e:	4a0b      	ldr	r2, [pc, #44]	; (1056c <system_clock_source_dfll_set_config+0x74>)
   10540:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
   10542:	6811      	ldr	r1, [r2, #0]
   10544:	4b0b      	ldr	r3, [pc, #44]	; (10574 <system_clock_source_dfll_set_config+0x7c>)
   10546:	430b      	orrs	r3, r1
   10548:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
   1054a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
   1054c:	7b03      	ldrb	r3, [r0, #12]
   1054e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
   10550:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
   10552:	4313      	orrs	r3, r2
   10554:	89c2      	ldrh	r2, [r0, #14]
   10556:	0412      	lsls	r2, r2, #16
   10558:	4905      	ldr	r1, [pc, #20]	; (10570 <system_clock_source_dfll_set_config+0x78>)
   1055a:	400a      	ands	r2, r1
   1055c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
   1055e:	4a03      	ldr	r2, [pc, #12]	; (1056c <system_clock_source_dfll_set_config+0x74>)
   10560:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
   10562:	6813      	ldr	r3, [r2, #0]
   10564:	2104      	movs	r1, #4
   10566:	430b      	orrs	r3, r1
   10568:	6013      	str	r3, [r2, #0]
   1056a:	e7ee      	b.n	1054a <system_clock_source_dfll_set_config+0x52>
   1056c:	20000534 	.word	0x20000534
   10570:	03ff0000 	.word	0x03ff0000
   10574:	00000424 	.word	0x00000424

00010578 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
   10578:	2808      	cmp	r0, #8
   1057a:	d803      	bhi.n	10584 <system_clock_source_enable+0xc>
   1057c:	0080      	lsls	r0, r0, #2
   1057e:	4b25      	ldr	r3, [pc, #148]	; (10614 <system_clock_source_enable+0x9c>)
   10580:	581b      	ldr	r3, [r3, r0]
   10582:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   10584:	2017      	movs	r0, #23
   10586:	e044      	b.n	10612 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   10588:	4a23      	ldr	r2, [pc, #140]	; (10618 <system_clock_source_enable+0xa0>)
   1058a:	6a13      	ldr	r3, [r2, #32]
   1058c:	2102      	movs	r1, #2
   1058e:	430b      	orrs	r3, r1
   10590:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
   10592:	2000      	movs	r0, #0
   10594:	e03d      	b.n	10612 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   10596:	4a20      	ldr	r2, [pc, #128]	; (10618 <system_clock_source_enable+0xa0>)
   10598:	6993      	ldr	r3, [r2, #24]
   1059a:	2102      	movs	r1, #2
   1059c:	430b      	orrs	r3, r1
   1059e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
   105a0:	2000      	movs	r0, #0
		break;
   105a2:	e036      	b.n	10612 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   105a4:	4a1c      	ldr	r2, [pc, #112]	; (10618 <system_clock_source_enable+0xa0>)
   105a6:	8a13      	ldrh	r3, [r2, #16]
   105a8:	2102      	movs	r1, #2
   105aa:	430b      	orrs	r3, r1
   105ac:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
   105ae:	2000      	movs	r0, #0
		break;
   105b0:	e02f      	b.n	10612 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   105b2:	4a19      	ldr	r2, [pc, #100]	; (10618 <system_clock_source_enable+0xa0>)
   105b4:	8a93      	ldrh	r3, [r2, #20]
   105b6:	2102      	movs	r1, #2
   105b8:	430b      	orrs	r3, r1
   105ba:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
   105bc:	2000      	movs	r0, #0
		break;
   105be:	e028      	b.n	10612 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   105c0:	4916      	ldr	r1, [pc, #88]	; (1061c <system_clock_source_enable+0xa4>)
   105c2:	680b      	ldr	r3, [r1, #0]
   105c4:	2202      	movs	r2, #2
   105c6:	4313      	orrs	r3, r2
   105c8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   105ca:	4b13      	ldr	r3, [pc, #76]	; (10618 <system_clock_source_enable+0xa0>)
   105cc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   105ce:	0019      	movs	r1, r3
   105d0:	320e      	adds	r2, #14
   105d2:	68cb      	ldr	r3, [r1, #12]
   105d4:	421a      	tst	r2, r3
   105d6:	d0fc      	beq.n	105d2 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   105d8:	4a10      	ldr	r2, [pc, #64]	; (1061c <system_clock_source_enable+0xa4>)
   105da:	6891      	ldr	r1, [r2, #8]
   105dc:	4b0e      	ldr	r3, [pc, #56]	; (10618 <system_clock_source_enable+0xa0>)
   105de:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   105e0:	6852      	ldr	r2, [r2, #4]
   105e2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
   105e4:	2200      	movs	r2, #0
   105e6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   105e8:	0019      	movs	r1, r3
   105ea:	3210      	adds	r2, #16
   105ec:	68cb      	ldr	r3, [r1, #12]
   105ee:	421a      	tst	r2, r3
   105f0:	d0fc      	beq.n	105ec <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   105f2:	4b0a      	ldr	r3, [pc, #40]	; (1061c <system_clock_source_enable+0xa4>)
   105f4:	681b      	ldr	r3, [r3, #0]
   105f6:	b29b      	uxth	r3, r3
   105f8:	4a07      	ldr	r2, [pc, #28]	; (10618 <system_clock_source_enable+0xa0>)
   105fa:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
   105fc:	2000      	movs	r0, #0
   105fe:	e008      	b.n	10612 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   10600:	4905      	ldr	r1, [pc, #20]	; (10618 <system_clock_source_enable+0xa0>)
   10602:	2244      	movs	r2, #68	; 0x44
   10604:	5c8b      	ldrb	r3, [r1, r2]
   10606:	2002      	movs	r0, #2
   10608:	4303      	orrs	r3, r0
   1060a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
   1060c:	2000      	movs	r0, #0
		break;
   1060e:	e000      	b.n	10612 <system_clock_source_enable+0x9a>
		return STATUS_OK;
   10610:	2000      	movs	r0, #0
}
   10612:	4770      	bx	lr
   10614:	0001c3f8 	.word	0x0001c3f8
   10618:	40000800 	.word	0x40000800
   1061c:	20000534 	.word	0x20000534

00010620 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   10620:	b5f0      	push	{r4, r5, r6, r7, lr}
   10622:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   10624:	22c2      	movs	r2, #194	; 0xc2
   10626:	00d2      	lsls	r2, r2, #3
   10628:	4b47      	ldr	r3, [pc, #284]	; (10748 <system_clock_init+0x128>)
   1062a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   1062c:	4a47      	ldr	r2, [pc, #284]	; (1074c <system_clock_init+0x12c>)
   1062e:	6853      	ldr	r3, [r2, #4]
   10630:	211e      	movs	r1, #30
   10632:	438b      	bics	r3, r1
   10634:	391a      	subs	r1, #26
   10636:	430b      	orrs	r3, r1
   10638:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
   1063a:	2202      	movs	r2, #2
   1063c:	ab01      	add	r3, sp, #4
   1063e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   10640:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   10642:	4d43      	ldr	r5, [pc, #268]	; (10750 <system_clock_init+0x130>)
   10644:	b2e0      	uxtb	r0, r4
   10646:	a901      	add	r1, sp, #4
   10648:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   1064a:	3401      	adds	r4, #1
   1064c:	2c25      	cmp	r4, #37	; 0x25
   1064e:	d1f9      	bne.n	10644 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
   10650:	a80a      	add	r0, sp, #40	; 0x28
   10652:	2300      	movs	r3, #0
   10654:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
   10656:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
   10658:	2280      	movs	r2, #128	; 0x80
   1065a:	0212      	lsls	r2, r2, #8
   1065c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
   1065e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
   10660:	2201      	movs	r2, #1
   10662:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
   10664:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
   10666:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
   10668:	3202      	adds	r2, #2
   1066a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
   1066c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
   1066e:	4b39      	ldr	r3, [pc, #228]	; (10754 <system_clock_init+0x134>)
   10670:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
   10672:	2005      	movs	r0, #5
   10674:	4b38      	ldr	r3, [pc, #224]	; (10758 <system_clock_init+0x138>)
   10676:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   10678:	4933      	ldr	r1, [pc, #204]	; (10748 <system_clock_init+0x128>)
   1067a:	2202      	movs	r2, #2
   1067c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
   1067e:	421a      	tst	r2, r3
   10680:	d0fc      	beq.n	1067c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
   10682:	4a31      	ldr	r2, [pc, #196]	; (10748 <system_clock_init+0x128>)
   10684:	8a93      	ldrh	r3, [r2, #20]
   10686:	2180      	movs	r1, #128	; 0x80
   10688:	430b      	orrs	r3, r1
   1068a:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
   1068c:	ab05      	add	r3, sp, #20
   1068e:	2100      	movs	r1, #0
   10690:	2200      	movs	r2, #0
   10692:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
   10694:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
   10696:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
   10698:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
   1069a:	313f      	adds	r1, #63	; 0x3f
   1069c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
   1069e:	393b      	subs	r1, #59	; 0x3b
   106a0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
   106a2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
   106a4:	4b2d      	ldr	r3, [pc, #180]	; (1075c <system_clock_init+0x13c>)
   106a6:	681b      	ldr	r3, [r3, #0]
   106a8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
   106aa:	2b3f      	cmp	r3, #63	; 0x3f
   106ac:	d04a      	beq.n	10744 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
   106ae:	a805      	add	r0, sp, #20
   106b0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
   106b2:	4b2b      	ldr	r3, [pc, #172]	; (10760 <system_clock_init+0x140>)
   106b4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
   106b6:	2307      	movs	r3, #7
   106b8:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
   106ba:	3338      	adds	r3, #56	; 0x38
   106bc:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
   106be:	4b29      	ldr	r3, [pc, #164]	; (10764 <system_clock_init+0x144>)
   106c0:	4798      	blx	r3
	config->run_in_standby  = false;
   106c2:	a804      	add	r0, sp, #16
   106c4:	2500      	movs	r5, #0
   106c6:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
   106c8:	2601      	movs	r6, #1
   106ca:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   106cc:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
   106ce:	4b26      	ldr	r3, [pc, #152]	; (10768 <system_clock_init+0x148>)
   106d0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   106d2:	2006      	movs	r0, #6
   106d4:	4f20      	ldr	r7, [pc, #128]	; (10758 <system_clock_init+0x138>)
   106d6:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   106d8:	4b24      	ldr	r3, [pc, #144]	; (1076c <system_clock_init+0x14c>)
   106da:	4798      	blx	r3
	config->division_factor    = 1;
   106dc:	ac01      	add	r4, sp, #4
   106de:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
   106e0:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
   106e2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
   106e4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   106e6:	2305      	movs	r3, #5
   106e8:	7023      	strb	r3, [r4, #0]
   106ea:	0021      	movs	r1, r4
   106ec:	2001      	movs	r0, #1
   106ee:	4b20      	ldr	r3, [pc, #128]	; (10770 <system_clock_init+0x150>)
   106f0:	4798      	blx	r3
   106f2:	2001      	movs	r0, #1
   106f4:	4b1f      	ldr	r3, [pc, #124]	; (10774 <system_clock_init+0x154>)
   106f6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
   106f8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
   106fa:	0021      	movs	r1, r4
   106fc:	2000      	movs	r0, #0
   106fe:	4b14      	ldr	r3, [pc, #80]	; (10750 <system_clock_init+0x130>)
   10700:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
   10702:	2000      	movs	r0, #0
   10704:	4b1c      	ldr	r3, [pc, #112]	; (10778 <system_clock_init+0x158>)
   10706:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
   10708:	2007      	movs	r0, #7
   1070a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   1070c:	490e      	ldr	r1, [pc, #56]	; (10748 <system_clock_init+0x128>)
   1070e:	22d0      	movs	r2, #208	; 0xd0
   10710:	68cb      	ldr	r3, [r1, #12]
   10712:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
   10714:	2bd0      	cmp	r3, #208	; 0xd0
   10716:	d1fb      	bne.n	10710 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
   10718:	4a18      	ldr	r2, [pc, #96]	; (1077c <system_clock_init+0x15c>)
   1071a:	2300      	movs	r3, #0
   1071c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
   1071e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
   10720:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
   10722:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
   10724:	a901      	add	r1, sp, #4
   10726:	2201      	movs	r2, #1
   10728:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
   1072a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
   1072c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
   1072e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   10730:	3307      	adds	r3, #7
   10732:	700b      	strb	r3, [r1, #0]
   10734:	2000      	movs	r0, #0
   10736:	4b0e      	ldr	r3, [pc, #56]	; (10770 <system_clock_init+0x150>)
   10738:	4798      	blx	r3
   1073a:	2000      	movs	r0, #0
   1073c:	4b0d      	ldr	r3, [pc, #52]	; (10774 <system_clock_init+0x154>)
   1073e:	4798      	blx	r3
#endif
}
   10740:	b00f      	add	sp, #60	; 0x3c
   10742:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
   10744:	3b20      	subs	r3, #32
   10746:	e7b2      	b.n	106ae <system_clock_init+0x8e>
   10748:	40000800 	.word	0x40000800
   1074c:	41004000 	.word	0x41004000
   10750:	000109b9 	.word	0x000109b9
   10754:	00010441 	.word	0x00010441
   10758:	00010579 	.word	0x00010579
   1075c:	00806024 	.word	0x00806024
   10760:	000005b9 	.word	0x000005b9
   10764:	000104f9 	.word	0x000104f9
   10768:	00010405 	.word	0x00010405
   1076c:	00010781 	.word	0x00010781
   10770:	000107a5 	.word	0x000107a5
   10774:	0001085d 	.word	0x0001085d
   10778:	0001092d 	.word	0x0001092d
   1077c:	40000400 	.word	0x40000400

00010780 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
   10780:	4a06      	ldr	r2, [pc, #24]	; (1079c <system_gclk_init+0x1c>)
   10782:	6993      	ldr	r3, [r2, #24]
   10784:	2108      	movs	r1, #8
   10786:	430b      	orrs	r3, r1
   10788:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   1078a:	2201      	movs	r2, #1
   1078c:	4b04      	ldr	r3, [pc, #16]	; (107a0 <system_gclk_init+0x20>)
   1078e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   10790:	0019      	movs	r1, r3
   10792:	780b      	ldrb	r3, [r1, #0]
   10794:	4213      	tst	r3, r2
   10796:	d1fc      	bne.n	10792 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
   10798:	4770      	bx	lr
   1079a:	46c0      	nop			; (mov r8, r8)
   1079c:	40000400 	.word	0x40000400
   107a0:	40000c00 	.word	0x40000c00

000107a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   107a4:	b570      	push	{r4, r5, r6, lr}
   107a6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   107a8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   107aa:	780d      	ldrb	r5, [r1, #0]
   107ac:	022d      	lsls	r5, r5, #8
   107ae:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   107b0:	784b      	ldrb	r3, [r1, #1]
   107b2:	2b00      	cmp	r3, #0
   107b4:	d002      	beq.n	107bc <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   107b6:	2380      	movs	r3, #128	; 0x80
   107b8:	02db      	lsls	r3, r3, #11
   107ba:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   107bc:	7a4b      	ldrb	r3, [r1, #9]
   107be:	2b00      	cmp	r3, #0
   107c0:	d002      	beq.n	107c8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   107c2:	2380      	movs	r3, #128	; 0x80
   107c4:	031b      	lsls	r3, r3, #12
   107c6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   107c8:	6848      	ldr	r0, [r1, #4]
   107ca:	2801      	cmp	r0, #1
   107cc:	d910      	bls.n	107f0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   107ce:	1e43      	subs	r3, r0, #1
   107d0:	4218      	tst	r0, r3
   107d2:	d134      	bne.n	1083e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   107d4:	2802      	cmp	r0, #2
   107d6:	d930      	bls.n	1083a <system_gclk_gen_set_config+0x96>
   107d8:	2302      	movs	r3, #2
   107da:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
   107dc:	3201      	adds	r2, #1
						mask <<= 1) {
   107de:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
   107e0:	4298      	cmp	r0, r3
   107e2:	d8fb      	bhi.n	107dc <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   107e4:	0212      	lsls	r2, r2, #8
   107e6:	4332      	orrs	r2, r6
   107e8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   107ea:	2380      	movs	r3, #128	; 0x80
   107ec:	035b      	lsls	r3, r3, #13
   107ee:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   107f0:	7a0b      	ldrb	r3, [r1, #8]
   107f2:	2b00      	cmp	r3, #0
   107f4:	d002      	beq.n	107fc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   107f6:	2380      	movs	r3, #128	; 0x80
   107f8:	039b      	lsls	r3, r3, #14
   107fa:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   107fc:	4a13      	ldr	r2, [pc, #76]	; (1084c <system_gclk_gen_set_config+0xa8>)
   107fe:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
   10800:	b25b      	sxtb	r3, r3
   10802:	2b00      	cmp	r3, #0
   10804:	dbfb      	blt.n	107fe <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
   10806:	4b12      	ldr	r3, [pc, #72]	; (10850 <system_gclk_gen_set_config+0xac>)
   10808:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   1080a:	4b12      	ldr	r3, [pc, #72]	; (10854 <system_gclk_gen_set_config+0xb0>)
   1080c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1080e:	4a0f      	ldr	r2, [pc, #60]	; (1084c <system_gclk_gen_set_config+0xa8>)
   10810:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   10812:	b25b      	sxtb	r3, r3
   10814:	2b00      	cmp	r3, #0
   10816:	dbfb      	blt.n	10810 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   10818:	4b0c      	ldr	r3, [pc, #48]	; (1084c <system_gclk_gen_set_config+0xa8>)
   1081a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   1081c:	001a      	movs	r2, r3
   1081e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
   10820:	b25b      	sxtb	r3, r3
   10822:	2b00      	cmp	r3, #0
   10824:	dbfb      	blt.n	1081e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   10826:	4a09      	ldr	r2, [pc, #36]	; (1084c <system_gclk_gen_set_config+0xa8>)
   10828:	6853      	ldr	r3, [r2, #4]
   1082a:	2180      	movs	r1, #128	; 0x80
   1082c:	0249      	lsls	r1, r1, #9
   1082e:	400b      	ands	r3, r1
   10830:	431d      	orrs	r5, r3
   10832:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
   10834:	4b08      	ldr	r3, [pc, #32]	; (10858 <system_gclk_gen_set_config+0xb4>)
   10836:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   10838:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
   1083a:	2200      	movs	r2, #0
   1083c:	e7d2      	b.n	107e4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   1083e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
   10840:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   10842:	2380      	movs	r3, #128	; 0x80
   10844:	029b      	lsls	r3, r3, #10
   10846:	431d      	orrs	r5, r3
   10848:	e7d2      	b.n	107f0 <system_gclk_gen_set_config+0x4c>
   1084a:	46c0      	nop			; (mov r8, r8)
   1084c:	40000c00 	.word	0x40000c00
   10850:	0000eb55 	.word	0x0000eb55
   10854:	40000c08 	.word	0x40000c08
   10858:	0000eb95 	.word	0x0000eb95

0001085c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   1085c:	b510      	push	{r4, lr}
   1085e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10860:	4a0b      	ldr	r2, [pc, #44]	; (10890 <system_gclk_gen_enable+0x34>)
   10862:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   10864:	b25b      	sxtb	r3, r3
   10866:	2b00      	cmp	r3, #0
   10868:	dbfb      	blt.n	10862 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
   1086a:	4b0a      	ldr	r3, [pc, #40]	; (10894 <system_gclk_gen_enable+0x38>)
   1086c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   1086e:	4b0a      	ldr	r3, [pc, #40]	; (10898 <system_gclk_gen_enable+0x3c>)
   10870:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   10872:	4a07      	ldr	r2, [pc, #28]	; (10890 <system_gclk_gen_enable+0x34>)
   10874:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   10876:	b25b      	sxtb	r3, r3
   10878:	2b00      	cmp	r3, #0
   1087a:	dbfb      	blt.n	10874 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   1087c:	4a04      	ldr	r2, [pc, #16]	; (10890 <system_gclk_gen_enable+0x34>)
   1087e:	6851      	ldr	r1, [r2, #4]
   10880:	2380      	movs	r3, #128	; 0x80
   10882:	025b      	lsls	r3, r3, #9
   10884:	430b      	orrs	r3, r1
   10886:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
   10888:	4b04      	ldr	r3, [pc, #16]	; (1089c <system_gclk_gen_enable+0x40>)
   1088a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1088c:	bd10      	pop	{r4, pc}
   1088e:	46c0      	nop			; (mov r8, r8)
   10890:	40000c00 	.word	0x40000c00
   10894:	0000eb55 	.word	0x0000eb55
   10898:	40000c04 	.word	0x40000c04
   1089c:	0000eb95 	.word	0x0000eb95

000108a0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   108a0:	b570      	push	{r4, r5, r6, lr}
   108a2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   108a4:	4a1a      	ldr	r2, [pc, #104]	; (10910 <system_gclk_gen_get_hz+0x70>)
   108a6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   108a8:	b25b      	sxtb	r3, r3
   108aa:	2b00      	cmp	r3, #0
   108ac:	dbfb      	blt.n	108a6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
   108ae:	4b19      	ldr	r3, [pc, #100]	; (10914 <system_gclk_gen_get_hz+0x74>)
   108b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   108b2:	4b19      	ldr	r3, [pc, #100]	; (10918 <system_gclk_gen_get_hz+0x78>)
   108b4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   108b6:	4a16      	ldr	r2, [pc, #88]	; (10910 <system_gclk_gen_get_hz+0x70>)
   108b8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   108ba:	b25b      	sxtb	r3, r3
   108bc:	2b00      	cmp	r3, #0
   108be:	dbfb      	blt.n	108b8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   108c0:	4e13      	ldr	r6, [pc, #76]	; (10910 <system_gclk_gen_get_hz+0x70>)
   108c2:	6870      	ldr	r0, [r6, #4]
   108c4:	04c0      	lsls	r0, r0, #19
   108c6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
   108c8:	4b14      	ldr	r3, [pc, #80]	; (1091c <system_gclk_gen_get_hz+0x7c>)
   108ca:	4798      	blx	r3
   108cc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   108ce:	4b12      	ldr	r3, [pc, #72]	; (10918 <system_gclk_gen_get_hz+0x78>)
   108d0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   108d2:	6876      	ldr	r6, [r6, #4]
   108d4:	02f6      	lsls	r6, r6, #11
   108d6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   108d8:	4b11      	ldr	r3, [pc, #68]	; (10920 <system_gclk_gen_get_hz+0x80>)
   108da:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   108dc:	4a0c      	ldr	r2, [pc, #48]	; (10910 <system_gclk_gen_get_hz+0x70>)
   108de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
   108e0:	b25b      	sxtb	r3, r3
   108e2:	2b00      	cmp	r3, #0
   108e4:	dbfb      	blt.n	108de <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   108e6:	4b0a      	ldr	r3, [pc, #40]	; (10910 <system_gclk_gen_get_hz+0x70>)
   108e8:	689c      	ldr	r4, [r3, #8]
   108ea:	0224      	lsls	r4, r4, #8
   108ec:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
   108ee:	4b0d      	ldr	r3, [pc, #52]	; (10924 <system_gclk_gen_get_hz+0x84>)
   108f0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   108f2:	2e00      	cmp	r6, #0
   108f4:	d107      	bne.n	10906 <system_gclk_gen_get_hz+0x66>
   108f6:	2c01      	cmp	r4, #1
   108f8:	d907      	bls.n	1090a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
   108fa:	0021      	movs	r1, r4
   108fc:	0028      	movs	r0, r5
   108fe:	4b0a      	ldr	r3, [pc, #40]	; (10928 <system_gclk_gen_get_hz+0x88>)
   10900:	4798      	blx	r3
   10902:	0005      	movs	r5, r0
   10904:	e001      	b.n	1090a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
   10906:	3401      	adds	r4, #1
   10908:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
   1090a:	0028      	movs	r0, r5
   1090c:	bd70      	pop	{r4, r5, r6, pc}
   1090e:	46c0      	nop			; (mov r8, r8)
   10910:	40000c00 	.word	0x40000c00
   10914:	0000eb55 	.word	0x0000eb55
   10918:	40000c04 	.word	0x40000c04
   1091c:	00010371 	.word	0x00010371
   10920:	40000c08 	.word	0x40000c08
   10924:	0000eb95 	.word	0x0000eb95
   10928:	00017015 	.word	0x00017015

0001092c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   1092c:	b510      	push	{r4, lr}
   1092e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   10930:	4b06      	ldr	r3, [pc, #24]	; (1094c <system_gclk_chan_enable+0x20>)
   10932:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10934:	4b06      	ldr	r3, [pc, #24]	; (10950 <system_gclk_chan_enable+0x24>)
   10936:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   10938:	4a06      	ldr	r2, [pc, #24]	; (10954 <system_gclk_chan_enable+0x28>)
   1093a:	8853      	ldrh	r3, [r2, #2]
   1093c:	2180      	movs	r1, #128	; 0x80
   1093e:	01c9      	lsls	r1, r1, #7
   10940:	430b      	orrs	r3, r1
   10942:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
   10944:	4b04      	ldr	r3, [pc, #16]	; (10958 <system_gclk_chan_enable+0x2c>)
   10946:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   10948:	bd10      	pop	{r4, pc}
   1094a:	46c0      	nop			; (mov r8, r8)
   1094c:	0000eb55 	.word	0x0000eb55
   10950:	40000c02 	.word	0x40000c02
   10954:	40000c00 	.word	0x40000c00
   10958:	0000eb95 	.word	0x0000eb95

0001095c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   1095c:	b510      	push	{r4, lr}
   1095e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   10960:	4b0f      	ldr	r3, [pc, #60]	; (109a0 <system_gclk_chan_disable+0x44>)
   10962:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   10964:	4b0f      	ldr	r3, [pc, #60]	; (109a4 <system_gclk_chan_disable+0x48>)
   10966:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   10968:	4a0f      	ldr	r2, [pc, #60]	; (109a8 <system_gclk_chan_disable+0x4c>)
   1096a:	8853      	ldrh	r3, [r2, #2]
   1096c:	051b      	lsls	r3, r3, #20
   1096e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
   10970:	8853      	ldrh	r3, [r2, #2]
   10972:	490e      	ldr	r1, [pc, #56]	; (109ac <system_gclk_chan_disable+0x50>)
   10974:	400b      	ands	r3, r1
   10976:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   10978:	8853      	ldrh	r3, [r2, #2]
   1097a:	490d      	ldr	r1, [pc, #52]	; (109b0 <system_gclk_chan_disable+0x54>)
   1097c:	400b      	ands	r3, r1
   1097e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   10980:	0011      	movs	r1, r2
   10982:	2280      	movs	r2, #128	; 0x80
   10984:	01d2      	lsls	r2, r2, #7
   10986:	884b      	ldrh	r3, [r1, #2]
   10988:	4213      	tst	r3, r2
   1098a:	d1fc      	bne.n	10986 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   1098c:	4906      	ldr	r1, [pc, #24]	; (109a8 <system_gclk_chan_disable+0x4c>)
   1098e:	884a      	ldrh	r2, [r1, #2]
   10990:	0203      	lsls	r3, r0, #8
   10992:	4806      	ldr	r0, [pc, #24]	; (109ac <system_gclk_chan_disable+0x50>)
   10994:	4002      	ands	r2, r0
   10996:	4313      	orrs	r3, r2
   10998:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
   1099a:	4b06      	ldr	r3, [pc, #24]	; (109b4 <system_gclk_chan_disable+0x58>)
   1099c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
   1099e:	bd10      	pop	{r4, pc}
   109a0:	0000eb55 	.word	0x0000eb55
   109a4:	40000c02 	.word	0x40000c02
   109a8:	40000c00 	.word	0x40000c00
   109ac:	fffff0ff 	.word	0xfffff0ff
   109b0:	ffffbfff 	.word	0xffffbfff
   109b4:	0000eb95 	.word	0x0000eb95

000109b8 <system_gclk_chan_set_config>:
{
   109b8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   109ba:	780c      	ldrb	r4, [r1, #0]
   109bc:	0224      	lsls	r4, r4, #8
   109be:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
   109c0:	4b02      	ldr	r3, [pc, #8]	; (109cc <system_gclk_chan_set_config+0x14>)
   109c2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   109c4:	b2a4      	uxth	r4, r4
   109c6:	4b02      	ldr	r3, [pc, #8]	; (109d0 <system_gclk_chan_set_config+0x18>)
   109c8:	805c      	strh	r4, [r3, #2]
}
   109ca:	bd10      	pop	{r4, pc}
   109cc:	0001095d 	.word	0x0001095d
   109d0:	40000c00 	.word	0x40000c00

000109d4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   109d4:	b510      	push	{r4, lr}
   109d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
   109d8:	4b06      	ldr	r3, [pc, #24]	; (109f4 <system_gclk_chan_get_hz+0x20>)
   109da:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   109dc:	4b06      	ldr	r3, [pc, #24]	; (109f8 <system_gclk_chan_get_hz+0x24>)
   109de:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   109e0:	4b06      	ldr	r3, [pc, #24]	; (109fc <system_gclk_chan_get_hz+0x28>)
   109e2:	885c      	ldrh	r4, [r3, #2]
   109e4:	0524      	lsls	r4, r4, #20
   109e6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
   109e8:	4b05      	ldr	r3, [pc, #20]	; (10a00 <system_gclk_chan_get_hz+0x2c>)
   109ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   109ec:	0020      	movs	r0, r4
   109ee:	4b05      	ldr	r3, [pc, #20]	; (10a04 <system_gclk_chan_get_hz+0x30>)
   109f0:	4798      	blx	r3
}
   109f2:	bd10      	pop	{r4, pc}
   109f4:	0000eb55 	.word	0x0000eb55
   109f8:	40000c02 	.word	0x40000c02
   109fc:	40000c00 	.word	0x40000c00
   10a00:	0000eb95 	.word	0x0000eb95
   10a04:	000108a1 	.word	0x000108a1

00010a08 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   10a08:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   10a0a:	78d3      	ldrb	r3, [r2, #3]
   10a0c:	2b00      	cmp	r3, #0
   10a0e:	d135      	bne.n	10a7c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   10a10:	7813      	ldrb	r3, [r2, #0]
   10a12:	2b80      	cmp	r3, #128	; 0x80
   10a14:	d029      	beq.n	10a6a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   10a16:	061b      	lsls	r3, r3, #24
   10a18:	2480      	movs	r4, #128	; 0x80
   10a1a:	0264      	lsls	r4, r4, #9
   10a1c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   10a1e:	7854      	ldrb	r4, [r2, #1]
   10a20:	2502      	movs	r5, #2
   10a22:	43ac      	bics	r4, r5
   10a24:	d106      	bne.n	10a34 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   10a26:	7894      	ldrb	r4, [r2, #2]
   10a28:	2c00      	cmp	r4, #0
   10a2a:	d120      	bne.n	10a6e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
   10a2c:	2480      	movs	r4, #128	; 0x80
   10a2e:	02a4      	lsls	r4, r4, #10
   10a30:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   10a32:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   10a34:	7854      	ldrb	r4, [r2, #1]
   10a36:	3c01      	subs	r4, #1
   10a38:	2c01      	cmp	r4, #1
   10a3a:	d91c      	bls.n	10a76 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   10a3c:	040d      	lsls	r5, r1, #16
   10a3e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   10a40:	24a0      	movs	r4, #160	; 0xa0
   10a42:	05e4      	lsls	r4, r4, #23
   10a44:	432c      	orrs	r4, r5
   10a46:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10a48:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   10a4a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   10a4c:	24d0      	movs	r4, #208	; 0xd0
   10a4e:	0624      	lsls	r4, r4, #24
   10a50:	432c      	orrs	r4, r5
   10a52:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10a54:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   10a56:	78d4      	ldrb	r4, [r2, #3]
   10a58:	2c00      	cmp	r4, #0
   10a5a:	d122      	bne.n	10aa2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   10a5c:	035b      	lsls	r3, r3, #13
   10a5e:	d51c      	bpl.n	10a9a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   10a60:	7893      	ldrb	r3, [r2, #2]
   10a62:	2b01      	cmp	r3, #1
   10a64:	d01e      	beq.n	10aa4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   10a66:	6141      	str	r1, [r0, #20]
   10a68:	e017      	b.n	10a9a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   10a6a:	2300      	movs	r3, #0
   10a6c:	e7d7      	b.n	10a1e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   10a6e:	24c0      	movs	r4, #192	; 0xc0
   10a70:	02e4      	lsls	r4, r4, #11
   10a72:	4323      	orrs	r3, r4
   10a74:	e7dd      	b.n	10a32 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   10a76:	4c0d      	ldr	r4, [pc, #52]	; (10aac <_system_pinmux_config+0xa4>)
   10a78:	4023      	ands	r3, r4
   10a7a:	e7df      	b.n	10a3c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   10a7c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   10a7e:	040c      	lsls	r4, r1, #16
   10a80:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   10a82:	23a0      	movs	r3, #160	; 0xa0
   10a84:	05db      	lsls	r3, r3, #23
   10a86:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10a88:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   10a8a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   10a8c:	23d0      	movs	r3, #208	; 0xd0
   10a8e:	061b      	lsls	r3, r3, #24
   10a90:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10a92:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   10a94:	78d3      	ldrb	r3, [r2, #3]
   10a96:	2b00      	cmp	r3, #0
   10a98:	d103      	bne.n	10aa2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   10a9a:	7853      	ldrb	r3, [r2, #1]
   10a9c:	3b01      	subs	r3, #1
   10a9e:	2b01      	cmp	r3, #1
   10aa0:	d902      	bls.n	10aa8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   10aa2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   10aa4:	6181      	str	r1, [r0, #24]
   10aa6:	e7f8      	b.n	10a9a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   10aa8:	6081      	str	r1, [r0, #8]
}
   10aaa:	e7fa      	b.n	10aa2 <_system_pinmux_config+0x9a>
   10aac:	fffbffff 	.word	0xfffbffff

00010ab0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   10ab0:	b510      	push	{r4, lr}
   10ab2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   10ab4:	09c1      	lsrs	r1, r0, #7
		return NULL;
   10ab6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   10ab8:	2900      	cmp	r1, #0
   10aba:	d104      	bne.n	10ac6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   10abc:	0943      	lsrs	r3, r0, #5
   10abe:	01db      	lsls	r3, r3, #7
   10ac0:	4905      	ldr	r1, [pc, #20]	; (10ad8 <system_pinmux_pin_set_config+0x28>)
   10ac2:	468c      	mov	ip, r1
   10ac4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   10ac6:	241f      	movs	r4, #31
   10ac8:	4020      	ands	r0, r4
   10aca:	2101      	movs	r1, #1
   10acc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   10ace:	0018      	movs	r0, r3
   10ad0:	4b02      	ldr	r3, [pc, #8]	; (10adc <system_pinmux_pin_set_config+0x2c>)
   10ad2:	4798      	blx	r3
}
   10ad4:	bd10      	pop	{r4, pc}
   10ad6:	46c0      	nop			; (mov r8, r8)
   10ad8:	41004400 	.word	0x41004400
   10adc:	00010a09 	.word	0x00010a09

00010ae0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   10ae0:	4770      	bx	lr
	...

00010ae4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   10ae4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   10ae6:	4b05      	ldr	r3, [pc, #20]	; (10afc <system_init+0x18>)
   10ae8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   10aea:	4b05      	ldr	r3, [pc, #20]	; (10b00 <system_init+0x1c>)
   10aec:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   10aee:	4b05      	ldr	r3, [pc, #20]	; (10b04 <system_init+0x20>)
   10af0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   10af2:	4b05      	ldr	r3, [pc, #20]	; (10b08 <system_init+0x24>)
   10af4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   10af6:	4b05      	ldr	r3, [pc, #20]	; (10b0c <system_init+0x28>)
   10af8:	4798      	blx	r3
}
   10afa:	bd10      	pop	{r4, pc}
   10afc:	00010621 	.word	0x00010621
   10b00:	0000ebc5 	.word	0x0000ebc5
   10b04:	00010ae1 	.word	0x00010ae1
   10b08:	0000ecd5 	.word	0x0000ecd5
   10b0c:	00010ae1 	.word	0x00010ae1

00010b10 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   10b10:	4b09      	ldr	r3, [pc, #36]	; (10b38 <_tcc_get_inst_index+0x28>)
   10b12:	4298      	cmp	r0, r3
   10b14:	d00c      	beq.n	10b30 <_tcc_get_inst_index+0x20>
   10b16:	4b09      	ldr	r3, [pc, #36]	; (10b3c <_tcc_get_inst_index+0x2c>)
   10b18:	4298      	cmp	r0, r3
   10b1a:	d007      	beq.n	10b2c <_tcc_get_inst_index+0x1c>
   10b1c:	4a08      	ldr	r2, [pc, #32]	; (10b40 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   10b1e:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   10b20:	4290      	cmp	r0, r2
   10b22:	d001      	beq.n	10b28 <_tcc_get_inst_index+0x18>
}
   10b24:	0018      	movs	r0, r3
   10b26:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   10b28:	3302      	adds	r3, #2
   10b2a:	e002      	b.n	10b32 <_tcc_get_inst_index+0x22>
   10b2c:	2301      	movs	r3, #1
   10b2e:	e000      	b.n	10b32 <_tcc_get_inst_index+0x22>
   10b30:	2300      	movs	r3, #0
			return i;
   10b32:	b2db      	uxtb	r3, r3
   10b34:	e7f6      	b.n	10b24 <_tcc_get_inst_index+0x14>
   10b36:	46c0      	nop			; (mov r8, r8)
   10b38:	42002000 	.word	0x42002000
   10b3c:	42002400 	.word	0x42002400
   10b40:	42002800 	.word	0x42002800

00010b44 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   10b44:	b510      	push	{r4, lr}
   10b46:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   10b48:	0008      	movs	r0, r1
   10b4a:	4b4f      	ldr	r3, [pc, #316]	; (10c88 <tcc_get_config_defaults+0x144>)
   10b4c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   10b4e:	2300      	movs	r3, #0
   10b50:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   10b52:	0080      	lsls	r0, r0, #2
   10b54:	4a4d      	ldr	r2, [pc, #308]	; (10c8c <tcc_get_config_defaults+0x148>)
   10b56:	5882      	ldr	r2, [r0, r2]
   10b58:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   10b5a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   10b5c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   10b5e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   10b60:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   10b62:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   10b64:	61e3      	str	r3, [r4, #28]
   10b66:	6223      	str	r3, [r4, #32]
   10b68:	6263      	str	r3, [r4, #36]	; 0x24
   10b6a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   10b6c:	7523      	strb	r3, [r4, #20]
   10b6e:	7563      	strb	r3, [r4, #21]
   10b70:	75a3      	strb	r3, [r4, #22]
   10b72:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   10b74:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   10b76:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   10b78:	7423      	strb	r3, [r4, #16]
   10b7a:	7463      	strb	r3, [r4, #17]
   10b7c:	74a3      	strb	r3, [r4, #18]
   10b7e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   10b80:	222c      	movs	r2, #44	; 0x2c
   10b82:	54a3      	strb	r3, [r4, r2]
   10b84:	3201      	adds	r2, #1
   10b86:	54a3      	strb	r3, [r4, r2]
   10b88:	3201      	adds	r2, #1
   10b8a:	54a3      	strb	r3, [r4, r2]
   10b8c:	3201      	adds	r2, #1
   10b8e:	54a3      	strb	r3, [r4, r2]
   10b90:	3201      	adds	r2, #1
   10b92:	54a3      	strb	r3, [r4, r2]
   10b94:	3201      	adds	r2, #1
   10b96:	54a3      	strb	r3, [r4, r2]
   10b98:	3201      	adds	r2, #1
   10b9a:	54a3      	strb	r3, [r4, r2]
   10b9c:	3201      	adds	r2, #1
   10b9e:	54a3      	strb	r3, [r4, r2]
   10ba0:	3201      	adds	r2, #1
   10ba2:	54a3      	strb	r3, [r4, r2]
   10ba4:	3201      	adds	r2, #1
   10ba6:	54a3      	strb	r3, [r4, r2]
   10ba8:	3201      	adds	r2, #1
   10baa:	54a3      	strb	r3, [r4, r2]
   10bac:	3201      	adds	r2, #1
   10bae:	54a3      	strb	r3, [r4, r2]
   10bb0:	3201      	adds	r2, #1
   10bb2:	54a3      	strb	r3, [r4, r2]
   10bb4:	3201      	adds	r2, #1
   10bb6:	54a3      	strb	r3, [r4, r2]
   10bb8:	3201      	adds	r2, #1
   10bba:	54a3      	strb	r3, [r4, r2]
   10bbc:	3201      	adds	r2, #1
   10bbe:	54a3      	strb	r3, [r4, r2]
   10bc0:	3201      	adds	r2, #1
   10bc2:	54a3      	strb	r3, [r4, r2]
   10bc4:	3201      	adds	r2, #1
   10bc6:	54a3      	strb	r3, [r4, r2]
   10bc8:	3201      	adds	r2, #1
   10bca:	54a3      	strb	r3, [r4, r2]
   10bcc:	3201      	adds	r2, #1
   10bce:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   10bd0:	3201      	adds	r2, #1
   10bd2:	54a3      	strb	r3, [r4, r2]
   10bd4:	3201      	adds	r2, #1
   10bd6:	54a3      	strb	r3, [r4, r2]
   10bd8:	3201      	adds	r2, #1
   10bda:	54a3      	strb	r3, [r4, r2]
   10bdc:	3201      	adds	r2, #1
   10bde:	54a3      	strb	r3, [r4, r2]
   10be0:	3201      	adds	r2, #1
   10be2:	54a3      	strb	r3, [r4, r2]
   10be4:	3201      	adds	r2, #1
   10be6:	54a3      	strb	r3, [r4, r2]
   10be8:	3201      	adds	r2, #1
   10bea:	54a3      	strb	r3, [r4, r2]
   10bec:	3201      	adds	r2, #1
   10bee:	54a3      	strb	r3, [r4, r2]
   10bf0:	3201      	adds	r2, #1
   10bf2:	54a3      	strb	r3, [r4, r2]
   10bf4:	3201      	adds	r2, #1
   10bf6:	54a3      	strb	r3, [r4, r2]
   10bf8:	3201      	adds	r2, #1
   10bfa:	54a3      	strb	r3, [r4, r2]
   10bfc:	3201      	adds	r2, #1
   10bfe:	54a3      	strb	r3, [r4, r2]
   10c00:	3201      	adds	r2, #1
   10c02:	54a3      	strb	r3, [r4, r2]
   10c04:	3201      	adds	r2, #1
   10c06:	54a3      	strb	r3, [r4, r2]
   10c08:	3201      	adds	r2, #1
   10c0a:	54a3      	strb	r3, [r4, r2]
   10c0c:	3201      	adds	r2, #1
   10c0e:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   10c10:	3201      	adds	r2, #1
   10c12:	54a3      	strb	r3, [r4, r2]
   10c14:	3201      	adds	r2, #1
   10c16:	54a3      	strb	r3, [r4, r2]
   10c18:	3201      	adds	r2, #1
   10c1a:	54a3      	strb	r3, [r4, r2]
   10c1c:	3201      	adds	r2, #1
   10c1e:	54a3      	strb	r3, [r4, r2]
   10c20:	3201      	adds	r2, #1
   10c22:	54a3      	strb	r3, [r4, r2]
   10c24:	3201      	adds	r2, #1
   10c26:	54a3      	strb	r3, [r4, r2]
   10c28:	3201      	adds	r2, #1
   10c2a:	54a3      	strb	r3, [r4, r2]
   10c2c:	3201      	adds	r2, #1
   10c2e:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   10c30:	3241      	adds	r2, #65	; 0x41
   10c32:	54a3      	strb	r3, [r4, r2]
   10c34:	65a3      	str	r3, [r4, #88]	; 0x58
   10c36:	67a3      	str	r3, [r4, #120]	; 0x78
   10c38:	3201      	adds	r2, #1
   10c3a:	54a3      	strb	r3, [r4, r2]
   10c3c:	65e3      	str	r3, [r4, #92]	; 0x5c
   10c3e:	67e3      	str	r3, [r4, #124]	; 0x7c
   10c40:	3201      	adds	r2, #1
   10c42:	54a3      	strb	r3, [r4, r2]
   10c44:	6623      	str	r3, [r4, #96]	; 0x60
   10c46:	3a1a      	subs	r2, #26
   10c48:	50a3      	str	r3, [r4, r2]
   10c4a:	321b      	adds	r2, #27
   10c4c:	54a3      	strb	r3, [r4, r2]
   10c4e:	6663      	str	r3, [r4, #100]	; 0x64
   10c50:	3a17      	subs	r2, #23
   10c52:	50a3      	str	r3, [r4, r2]
   10c54:	3218      	adds	r2, #24
   10c56:	54a3      	strb	r3, [r4, r2]
   10c58:	66a3      	str	r3, [r4, #104]	; 0x68
   10c5a:	3a14      	subs	r2, #20
   10c5c:	50a3      	str	r3, [r4, r2]
   10c5e:	3215      	adds	r2, #21
   10c60:	54a3      	strb	r3, [r4, r2]
   10c62:	66e3      	str	r3, [r4, #108]	; 0x6c
   10c64:	3a11      	subs	r2, #17
   10c66:	50a3      	str	r3, [r4, r2]
   10c68:	3212      	adds	r2, #18
   10c6a:	54a3      	strb	r3, [r4, r2]
   10c6c:	6723      	str	r3, [r4, #112]	; 0x70
   10c6e:	3a0e      	subs	r2, #14
   10c70:	50a3      	str	r3, [r4, r2]
   10c72:	320f      	adds	r2, #15
   10c74:	54a3      	strb	r3, [r4, r2]
   10c76:	6763      	str	r3, [r4, #116]	; 0x74
   10c78:	3a0b      	subs	r2, #11
   10c7a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   10c7c:	2101      	movs	r1, #1
   10c7e:	320c      	adds	r2, #12
   10c80:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   10c82:	3201      	adds	r2, #1
   10c84:	54a3      	strb	r3, [r4, r2]
}
   10c86:	bd10      	pop	{r4, pc}
   10c88:	00010b11 	.word	0x00010b11
   10c8c:	0001c430 	.word	0x0001c430

00010c90 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   10c90:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c92:	46de      	mov	lr, fp
   10c94:	4657      	mov	r7, sl
   10c96:	464e      	mov	r6, r9
   10c98:	4645      	mov	r5, r8
   10c9a:	b5e0      	push	{r5, r6, r7, lr}
   10c9c:	b091      	sub	sp, #68	; 0x44
   10c9e:	9001      	str	r0, [sp, #4]
   10ca0:	000c      	movs	r4, r1
   10ca2:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   10ca4:	0008      	movs	r0, r1
   10ca6:	4bc3      	ldr	r3, [pc, #780]	; (10fb4 <tcc_init+0x324>)
   10ca8:	4798      	blx	r3
   10caa:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   10cac:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   10cae:	48c2      	ldr	r0, [pc, #776]	; (10fb8 <tcc_init+0x328>)
   10cb0:	6a02      	ldr	r2, [r0, #32]
   10cb2:	009e      	lsls	r6, r3, #2
   10cb4:	4fc1      	ldr	r7, [pc, #772]	; (10fbc <tcc_init+0x32c>)
   10cb6:	59f7      	ldr	r7, [r6, r7]
   10cb8:	433a      	orrs	r2, r7
   10cba:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   10cbc:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   10cbe:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   10cc0:	0792      	lsls	r2, r2, #30
   10cc2:	d506      	bpl.n	10cd2 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   10cc4:	b011      	add	sp, #68	; 0x44
   10cc6:	bc3c      	pop	{r2, r3, r4, r5}
   10cc8:	4690      	mov	r8, r2
   10cca:	4699      	mov	r9, r3
   10ccc:	46a2      	mov	sl, r4
   10cce:	46ab      	mov	fp, r5
   10cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   10cd2:	6822      	ldr	r2, [r4, #0]
   10cd4:	2701      	movs	r7, #1
   10cd6:	4017      	ands	r7, r2
   10cd8:	d1f4      	bne.n	10cc4 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   10cda:	48b9      	ldr	r0, [pc, #740]	; (10fc0 <tcc_init+0x330>)
   10cdc:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   10cde:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   10ce0:	682e      	ldr	r6, [r5, #0]
   10ce2:	42b2      	cmp	r2, r6
   10ce4:	d3ee      	bcc.n	10cc4 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   10ce6:	686e      	ldr	r6, [r5, #4]
   10ce8:	42b2      	cmp	r2, r6
   10cea:	d3eb      	bcc.n	10cc4 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   10cec:	69e8      	ldr	r0, [r5, #28]
   10cee:	4282      	cmp	r2, r0
   10cf0:	d200      	bcs.n	10cf4 <tcc_init+0x64>
   10cf2:	e1b9      	b.n	11068 <tcc_init+0x3d8>
   10cf4:	6a28      	ldr	r0, [r5, #32]
   10cf6:	4282      	cmp	r2, r0
   10cf8:	d200      	bcs.n	10cfc <tcc_init+0x6c>
   10cfa:	e1b7      	b.n	1106c <tcc_init+0x3dc>
   10cfc:	6a68      	ldr	r0, [r5, #36]	; 0x24
   10cfe:	4282      	cmp	r2, r0
   10d00:	d200      	bcs.n	10d04 <tcc_init+0x74>
   10d02:	e1b5      	b.n	11070 <tcc_init+0x3e0>
   10d04:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   10d06:	4282      	cmp	r2, r0
   10d08:	d200      	bcs.n	10d0c <tcc_init+0x7c>
   10d0a:	e1b3      	b.n	11074 <tcc_init+0x3e4>
   10d0c:	2298      	movs	r2, #152	; 0x98
   10d0e:	4694      	mov	ip, r2
   10d10:	44ac      	add	ip, r5
   10d12:	4662      	mov	r2, ip
   10d14:	9208      	str	r2, [sp, #32]
   10d16:	2000      	movs	r0, #0
   10d18:	e003      	b.n	10d22 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   10d1a:	3001      	adds	r0, #1
   10d1c:	3201      	adds	r2, #1
   10d1e:	2808      	cmp	r0, #8
   10d20:	d008      	beq.n	10d34 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   10d22:	7816      	ldrb	r6, [r2, #0]
   10d24:	2e00      	cmp	r6, #0
   10d26:	d0f8      	beq.n	10d1a <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   10d28:	4ea6      	ldr	r6, [pc, #664]	; (10fc4 <tcc_init+0x334>)
   10d2a:	5c76      	ldrb	r6, [r6, r1]
   10d2c:	4286      	cmp	r6, r0
   10d2e:	dcf4      	bgt.n	10d1a <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   10d30:	2017      	movs	r0, #23
   10d32:	e7c7      	b.n	10cc4 <tcc_init+0x34>
   10d34:	2200      	movs	r2, #0
   10d36:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   10d38:	2080      	movs	r0, #128	; 0x80
   10d3a:	0440      	lsls	r0, r0, #17
   10d3c:	4684      	mov	ip, r0
   10d3e:	e002      	b.n	10d46 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   10d40:	3201      	adds	r2, #1
   10d42:	2a04      	cmp	r2, #4
   10d44:	d00e      	beq.n	10d64 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   10d46:	18a8      	adds	r0, r5, r2
   10d48:	7c00      	ldrb	r0, [r0, #16]
   10d4a:	2801      	cmp	r0, #1
   10d4c:	d1f8      	bne.n	10d40 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   10d4e:	489e      	ldr	r0, [pc, #632]	; (10fc8 <tcc_init+0x338>)
   10d50:	5c40      	ldrb	r0, [r0, r1]
   10d52:	4290      	cmp	r0, r2
   10d54:	da00      	bge.n	10d58 <tcc_init+0xc8>
   10d56:	e18f      	b.n	11078 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   10d58:	4660      	mov	r0, ip
   10d5a:	4090      	lsls	r0, r2
   10d5c:	9e02      	ldr	r6, [sp, #8]
   10d5e:	4306      	orrs	r6, r0
   10d60:	9602      	str	r6, [sp, #8]
   10d62:	e7ed      	b.n	10d40 <tcc_init+0xb0>
	if (config->run_in_standby) {
   10d64:	329d      	adds	r2, #157	; 0x9d
   10d66:	5caa      	ldrb	r2, [r5, r2]
   10d68:	2a00      	cmp	r2, #0
   10d6a:	d004      	beq.n	10d76 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   10d6c:	2280      	movs	r2, #128	; 0x80
   10d6e:	0112      	lsls	r2, r2, #4
   10d70:	9902      	ldr	r1, [sp, #8]
   10d72:	4311      	orrs	r1, r2
   10d74:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   10d76:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   10d78:	1e51      	subs	r1, r2, #1
   10d7a:	418a      	sbcs	r2, r1
   10d7c:	0092      	lsls	r2, r2, #2
   10d7e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   10d80:	7a6a      	ldrb	r2, [r5, #9]
   10d82:	2a01      	cmp	r2, #1
   10d84:	d022      	beq.n	10dcc <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   10d86:	4a90      	ldr	r2, [pc, #576]	; (10fc8 <tcc_init+0x338>)
   10d88:	5cd2      	ldrb	r2, [r2, r3]
   10d8a:	0011      	movs	r1, r2
   10d8c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   10d8e:	2235      	movs	r2, #53	; 0x35
   10d90:	5caa      	ldrb	r2, [r5, r2]
   10d92:	428a      	cmp	r2, r1
   10d94:	d300      	bcc.n	10d98 <tcc_init+0x108>
   10d96:	e179      	b.n	1108c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   10d98:	212c      	movs	r1, #44	; 0x2c
   10d9a:	5c69      	ldrb	r1, [r5, r1]
   10d9c:	290f      	cmp	r1, #15
   10d9e:	d900      	bls.n	10da2 <tcc_init+0x112>
   10da0:	e174      	b.n	1108c <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   10da2:	7b28      	ldrb	r0, [r5, #12]
   10da4:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   10da6:	7ae8      	ldrb	r0, [r5, #11]
   10da8:	900b      	str	r0, [sp, #44]	; 0x2c
   10daa:	202d      	movs	r0, #45	; 0x2d
   10dac:	4682      	mov	sl, r0
   10dae:	44aa      	add	sl, r5
   10db0:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   10db2:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   10db4:	ae0e      	add	r6, sp, #56	; 0x38
   10db6:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   10db8:	26c0      	movs	r6, #192	; 0xc0
   10dba:	0136      	lsls	r6, r6, #4
   10dbc:	46b1      	mov	r9, r6
   10dbe:	4684      	mov	ip, r0
   10dc0:	46a0      	mov	r8, r4
   10dc2:	0028      	movs	r0, r5
   10dc4:	4655      	mov	r5, sl
   10dc6:	9309      	str	r3, [sp, #36]	; 0x24
   10dc8:	4682      	mov	sl, r0
   10dca:	e035      	b.n	10e38 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   10dcc:	9906      	ldr	r1, [sp, #24]
   10dce:	4311      	orrs	r1, r2
   10dd0:	9106      	str	r1, [sp, #24]
   10dd2:	e7d8      	b.n	10d86 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   10dd4:	0292      	lsls	r2, r2, #10
   10dd6:	464f      	mov	r7, r9
   10dd8:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   10dda:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   10ddc:	7919      	ldrb	r1, [r3, #4]
   10dde:	468b      	mov	fp, r1
   10de0:	2103      	movs	r1, #3
   10de2:	465f      	mov	r7, fp
   10de4:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   10de6:	430a      	orrs	r2, r1
   10de8:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   10dea:	795a      	ldrb	r2, [r3, #5]
   10dec:	0152      	lsls	r2, r2, #5
   10dee:	2160      	movs	r1, #96	; 0x60
   10df0:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   10df2:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   10df4:	7999      	ldrb	r1, [r3, #6]
   10df6:	0209      	lsls	r1, r1, #8
   10df8:	26c0      	movs	r6, #192	; 0xc0
   10dfa:	00b6      	lsls	r6, r6, #2
   10dfc:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   10dfe:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   10e00:	79da      	ldrb	r2, [r3, #7]
   10e02:	0312      	lsls	r2, r2, #12
   10e04:	21e0      	movs	r1, #224	; 0xe0
   10e06:	01c9      	lsls	r1, r1, #7
   10e08:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   10e0a:	4316      	orrs	r6, r2
   10e0c:	4334      	orrs	r4, r6
   10e0e:	9a03      	ldr	r2, [sp, #12]
   10e10:	4314      	orrs	r4, r2
   10e12:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   10e14:	4662      	mov	r2, ip
   10e16:	9907      	ldr	r1, [sp, #28]
   10e18:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   10e1a:	2a04      	cmp	r2, #4
   10e1c:	d02a      	beq.n	10e74 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   10e1e:	7c9a      	ldrb	r2, [r3, #18]
   10e20:	9905      	ldr	r1, [sp, #20]
   10e22:	4291      	cmp	r1, r2
   10e24:	d800      	bhi.n	10e28 <tcc_init+0x198>
   10e26:	e131      	b.n	1108c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   10e28:	7a59      	ldrb	r1, [r3, #9]
   10e2a:	350a      	adds	r5, #10
   10e2c:	2304      	movs	r3, #4
   10e2e:	469b      	mov	fp, r3
   10e30:	44dc      	add	ip, fp
   10e32:	290f      	cmp	r1, #15
   10e34:	d900      	bls.n	10e38 <tcc_init+0x1a8>
   10e36:	e129      	b.n	1108c <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   10e38:	0609      	lsls	r1, r1, #24
   10e3a:	23f0      	movs	r3, #240	; 0xf0
   10e3c:	051b      	lsls	r3, r3, #20
   10e3e:	4019      	ands	r1, r3
   10e40:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   10e42:	782e      	ldrb	r6, [r5, #0]
   10e44:	0436      	lsls	r6, r6, #16
   10e46:	20ff      	movs	r0, #255	; 0xff
   10e48:	0400      	lsls	r0, r0, #16
   10e4a:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   10e4c:	7868      	ldrb	r0, [r5, #1]
   10e4e:	2480      	movs	r4, #128	; 0x80
   10e50:	2800      	cmp	r0, #0
   10e52:	d100      	bne.n	10e56 <tcc_init+0x1c6>
   10e54:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   10e56:	7898      	ldrb	r0, [r3, #2]
   10e58:	2708      	movs	r7, #8
   10e5a:	9703      	str	r7, [sp, #12]
   10e5c:	2800      	cmp	r0, #0
   10e5e:	d101      	bne.n	10e64 <tcc_init+0x1d4>
   10e60:	9804      	ldr	r0, [sp, #16]
   10e62:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   10e64:	78d8      	ldrb	r0, [r3, #3]
   10e66:	4683      	mov	fp, r0
   10e68:	2010      	movs	r0, #16
   10e6a:	465f      	mov	r7, fp
   10e6c:	2f00      	cmp	r7, #0
   10e6e:	d1b1      	bne.n	10dd4 <tcc_init+0x144>
   10e70:	9804      	ldr	r0, [sp, #16]
   10e72:	e7af      	b.n	10dd4 <tcc_init+0x144>
   10e74:	4644      	mov	r4, r8
   10e76:	4655      	mov	r5, sl
   10e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   10e7a:	4a52      	ldr	r2, [pc, #328]	; (10fc4 <tcc_init+0x334>)
   10e7c:	5cd2      	ldrb	r2, [r2, r3]
   10e7e:	4691      	mov	r9, r2
   10e80:	4651      	mov	r1, sl
   10e82:	3150      	adds	r1, #80	; 0x50
   10e84:	4650      	mov	r0, sl
   10e86:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   10e88:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   10e8a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   10e8c:	2601      	movs	r6, #1
   10e8e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   10e90:	2602      	movs	r6, #2
   10e92:	36ff      	adds	r6, #255	; 0xff
   10e94:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   10e96:	2680      	movs	r6, #128	; 0x80
   10e98:	0276      	lsls	r6, r6, #9
   10e9a:	46b0      	mov	r8, r6
   10e9c:	46a4      	mov	ip, r4
   10e9e:	001c      	movs	r4, r3
   10ea0:	464b      	mov	r3, r9
   10ea2:	e00f      	b.n	10ec4 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   10ea4:	7806      	ldrb	r6, [r0, #0]
   10ea6:	2e00      	cmp	r6, #0
   10ea8:	d007      	beq.n	10eba <tcc_init+0x22a>
			if (i >= ow_num) {
   10eaa:	4293      	cmp	r3, r2
   10eac:	d800      	bhi.n	10eb0 <tcc_init+0x220>
   10eae:	e0e7      	b.n	11080 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   10eb0:	2e02      	cmp	r6, #2
   10eb2:	d014      	beq.n	10ede <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   10eb4:	4656      	mov	r6, sl
   10eb6:	4096      	lsls	r6, r2
   10eb8:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   10eba:	3201      	adds	r2, #1
   10ebc:	3101      	adds	r1, #1
   10ebe:	3002      	adds	r0, #2
   10ec0:	2a08      	cmp	r2, #8
   10ec2:	d010      	beq.n	10ee6 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   10ec4:	780e      	ldrb	r6, [r1, #0]
   10ec6:	2e00      	cmp	r6, #0
   10ec8:	d0ec      	beq.n	10ea4 <tcc_init+0x214>
			if (i >= ow_num) {
   10eca:	4293      	cmp	r3, r2
   10ecc:	d800      	bhi.n	10ed0 <tcc_init+0x240>
   10ece:	e0d5      	b.n	1107c <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   10ed0:	4646      	mov	r6, r8
   10ed2:	4096      	lsls	r6, r2
   10ed4:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   10ed6:	7806      	ldrb	r6, [r0, #0]
   10ed8:	2e00      	cmp	r6, #0
   10eda:	d1e9      	bne.n	10eb0 <tcc_init+0x220>
   10edc:	e7ed      	b.n	10eba <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   10ede:	465e      	mov	r6, fp
   10ee0:	4096      	lsls	r6, r2
   10ee2:	4337      	orrs	r7, r6
   10ee4:	e7e9      	b.n	10eba <tcc_init+0x22a>
   10ee6:	4699      	mov	r9, r3
   10ee8:	0023      	movs	r3, r4
   10eea:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   10eec:	7e6a      	ldrb	r2, [r5, #25]
   10eee:	0112      	lsls	r2, r2, #4
   10ef0:	2130      	movs	r1, #48	; 0x30
   10ef2:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   10ef4:	7e28      	ldrb	r0, [r5, #24]
   10ef6:	2207      	movs	r2, #7
   10ef8:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   10efa:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   10efc:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   10efe:	2080      	movs	r0, #128	; 0x80
   10f00:	0240      	lsls	r0, r0, #9
   10f02:	000e      	movs	r6, r1
   10f04:	e002      	b.n	10f0c <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   10f06:	3201      	adds	r2, #1
   10f08:	2a04      	cmp	r2, #4
   10f0a:	d00b      	beq.n	10f24 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   10f0c:	18a9      	adds	r1, r5, r2
   10f0e:	7d09      	ldrb	r1, [r1, #20]
   10f10:	2900      	cmp	r1, #0
   10f12:	d0f8      	beq.n	10f06 <tcc_init+0x276>
			if (n >= cc_num) {
   10f14:	9905      	ldr	r1, [sp, #20]
   10f16:	4291      	cmp	r1, r2
   10f18:	dc00      	bgt.n	10f1c <tcc_init+0x28c>
   10f1a:	e0b3      	b.n	11084 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   10f1c:	0001      	movs	r1, r0
   10f1e:	4091      	lsls	r1, r2
   10f20:	430e      	orrs	r6, r1
   10f22:	e7f0      	b.n	10f06 <tcc_init+0x276>
   10f24:	46b2      	mov	sl, r6
   10f26:	9801      	ldr	r0, [sp, #4]
   10f28:	0002      	movs	r2, r0
   10f2a:	3204      	adds	r2, #4
   10f2c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   10f2e:	2100      	movs	r1, #0
   10f30:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   10f32:	4282      	cmp	r2, r0
   10f34:	d1fc      	bne.n	10f30 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   10f36:	2200      	movs	r2, #0
   10f38:	9801      	ldr	r0, [sp, #4]
   10f3a:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   10f3c:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   10f3e:	0099      	lsls	r1, r3, #2
   10f40:	4a22      	ldr	r2, [pc, #136]	; (10fcc <tcc_init+0x33c>)
   10f42:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   10f44:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   10f46:	22a0      	movs	r2, #160	; 0xa0
   10f48:	5ca9      	ldrb	r1, [r5, r2]
   10f4a:	3a64      	subs	r2, #100	; 0x64
   10f4c:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   10f4e:	a90d      	add	r1, sp, #52	; 0x34
   10f50:	7aaa      	ldrb	r2, [r5, #10]
   10f52:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   10f54:	4a1e      	ldr	r2, [pc, #120]	; (10fd0 <tcc_init+0x340>)
   10f56:	5cd6      	ldrb	r6, [r2, r3]
   10f58:	0030      	movs	r0, r6
   10f5a:	4b1e      	ldr	r3, [pc, #120]	; (10fd4 <tcc_init+0x344>)
   10f5c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   10f5e:	0030      	movs	r0, r6
   10f60:	4b1d      	ldr	r3, [pc, #116]	; (10fd8 <tcc_init+0x348>)
   10f62:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   10f64:	464b      	mov	r3, r9
   10f66:	2b00      	cmp	r3, #0
   10f68:	dd3c      	ble.n	10fe4 <tcc_init+0x354>
   10f6a:	002e      	movs	r6, r5
   10f6c:	3658      	adds	r6, #88	; 0x58
   10f6e:	3398      	adds	r3, #152	; 0x98
   10f70:	4698      	mov	r8, r3
   10f72:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10f74:	2301      	movs	r3, #1
   10f76:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   10f78:	46ab      	mov	fp, r5
   10f7a:	4645      	mov	r5, r8
   10f7c:	46a0      	mov	r8, r4
   10f7e:	9c08      	ldr	r4, [sp, #32]
   10f80:	e003      	b.n	10f8a <tcc_init+0x2fa>
   10f82:	3401      	adds	r4, #1
   10f84:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   10f86:	42ac      	cmp	r4, r5
   10f88:	d02a      	beq.n	10fe0 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   10f8a:	7823      	ldrb	r3, [r4, #0]
   10f8c:	2b00      	cmp	r3, #0
   10f8e:	d0f8      	beq.n	10f82 <tcc_init+0x2f2>
   10f90:	ab0c      	add	r3, sp, #48	; 0x30
   10f92:	464a      	mov	r2, r9
   10f94:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   10f96:	2300      	movs	r3, #0
   10f98:	aa0c      	add	r2, sp, #48	; 0x30
   10f9a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   10f9c:	0013      	movs	r3, r2
   10f9e:	2220      	movs	r2, #32
   10fa0:	18b2      	adds	r2, r6, r2
   10fa2:	7812      	ldrb	r2, [r2, #0]
   10fa4:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   10fa6:	464a      	mov	r2, r9
   10fa8:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   10faa:	7830      	ldrb	r0, [r6, #0]
   10fac:	0019      	movs	r1, r3
   10fae:	4b0b      	ldr	r3, [pc, #44]	; (10fdc <tcc_init+0x34c>)
   10fb0:	4798      	blx	r3
   10fb2:	e7e6      	b.n	10f82 <tcc_init+0x2f2>
   10fb4:	00010b11 	.word	0x00010b11
   10fb8:	40000400 	.word	0x40000400
   10fbc:	0001c41c 	.word	0x0001c41c
   10fc0:	0001c430 	.word	0x0001c430
   10fc4:	0001c43c 	.word	0x0001c43c
   10fc8:	0001c428 	.word	0x0001c428
   10fcc:	20001268 	.word	0x20001268
   10fd0:	0001c42c 	.word	0x0001c42c
   10fd4:	000109b9 	.word	0x000109b9
   10fd8:	0001092d 	.word	0x0001092d
   10fdc:	00010ab1 	.word	0x00010ab1
   10fe0:	4644      	mov	r4, r8
   10fe2:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   10fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10fe6:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   10fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10fea:	0212      	lsls	r2, r2, #8
   10fec:	4313      	orrs	r3, r2
   10fee:	9a02      	ldr	r2, [sp, #8]
   10ff0:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   10ff2:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   10ff4:	2204      	movs	r2, #4
   10ff6:	68a3      	ldr	r3, [r4, #8]
   10ff8:	421a      	tst	r2, r3
   10ffa:	d1fc      	bne.n	10ff6 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   10ffc:	23ff      	movs	r3, #255	; 0xff
   10ffe:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   11000:	2204      	movs	r2, #4
   11002:	68a3      	ldr	r3, [r4, #8]
   11004:	421a      	tst	r2, r3
   11006:	d1fc      	bne.n	11002 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   11008:	466b      	mov	r3, sp
   1100a:	7e1b      	ldrb	r3, [r3, #24]
   1100c:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   1100e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11010:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   11012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11014:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   11016:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   11018:	4a1d      	ldr	r2, [pc, #116]	; (11090 <tcc_init+0x400>)
   1101a:	68a3      	ldr	r3, [r4, #8]
   1101c:	4213      	tst	r3, r2
   1101e:	d1fc      	bne.n	1101a <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   11020:	4653      	mov	r3, sl
   11022:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   11024:	2210      	movs	r2, #16
   11026:	68a3      	ldr	r3, [r4, #8]
   11028:	421a      	tst	r2, r3
   1102a:	d1fc      	bne.n	11026 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   1102c:	682b      	ldr	r3, [r5, #0]
   1102e:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   11030:	4a18      	ldr	r2, [pc, #96]	; (11094 <tcc_init+0x404>)
   11032:	68a3      	ldr	r3, [r4, #8]
   11034:	4213      	tst	r3, r2
   11036:	d1fc      	bne.n	11032 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   11038:	686b      	ldr	r3, [r5, #4]
   1103a:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1103c:	9805      	ldr	r0, [sp, #20]
   1103e:	2800      	cmp	r0, #0
   11040:	dd22      	ble.n	11088 <tcc_init+0x3f8>
   11042:	351c      	adds	r5, #28
   11044:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   11046:	4e14      	ldr	r6, [pc, #80]	; (11098 <tcc_init+0x408>)
   11048:	0032      	movs	r2, r6
   1104a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   1104c:	68a3      	ldr	r3, [r4, #8]
   1104e:	421a      	tst	r2, r3
   11050:	d1fc      	bne.n	1104c <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   11052:	cd04      	ldmia	r5!, {r2}
   11054:	000b      	movs	r3, r1
   11056:	3310      	adds	r3, #16
   11058:	009b      	lsls	r3, r3, #2
   1105a:	18e3      	adds	r3, r4, r3
   1105c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   1105e:	3101      	adds	r1, #1
   11060:	4288      	cmp	r0, r1
   11062:	dcf1      	bgt.n	11048 <tcc_init+0x3b8>
	return STATUS_OK;
   11064:	2000      	movs	r0, #0
   11066:	e62d      	b.n	10cc4 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   11068:	2017      	movs	r0, #23
   1106a:	e62b      	b.n	10cc4 <tcc_init+0x34>
   1106c:	2017      	movs	r0, #23
   1106e:	e629      	b.n	10cc4 <tcc_init+0x34>
   11070:	2017      	movs	r0, #23
   11072:	e627      	b.n	10cc4 <tcc_init+0x34>
   11074:	2017      	movs	r0, #23
   11076:	e625      	b.n	10cc4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11078:	2017      	movs	r0, #23
   1107a:	e623      	b.n	10cc4 <tcc_init+0x34>
			if (i >= ow_num) {
   1107c:	2017      	movs	r0, #23
   1107e:	e621      	b.n	10cc4 <tcc_init+0x34>
			if (i >= ow_num) {
   11080:	2017      	movs	r0, #23
   11082:	e61f      	b.n	10cc4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   11084:	2017      	movs	r0, #23
   11086:	e61d      	b.n	10cc4 <tcc_init+0x34>
	return STATUS_OK;
   11088:	2000      	movs	r0, #0
   1108a:	e61b      	b.n	10cc4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1108c:	2017      	movs	r0, #23
   1108e:	e619      	b.n	10cc4 <tcc_init+0x34>
   11090:	00020040 	.word	0x00020040
   11094:	00040080 	.word	0x00040080
   11098:	00080100 	.word	0x00080100

0001109c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1109c:	0092      	lsls	r2, r2, #2
   1109e:	1883      	adds	r3, r0, r2
   110a0:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   110a2:	4b03      	ldr	r3, [pc, #12]	; (110b0 <tcc_register_callback+0x14>)
   110a4:	58d3      	ldr	r3, [r2, r3]
   110a6:	6b42      	ldr	r2, [r0, #52]	; 0x34
   110a8:	4313      	orrs	r3, r2
   110aa:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   110ac:	2000      	movs	r0, #0
   110ae:	4770      	bx	lr
   110b0:	0001c440 	.word	0x0001c440

000110b4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   110b4:	b570      	push	{r4, r5, r6, lr}
   110b6:	0004      	movs	r4, r0
   110b8:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   110ba:	6800      	ldr	r0, [r0, #0]
   110bc:	4b09      	ldr	r3, [pc, #36]	; (110e4 <tcc_enable_callback+0x30>)
   110be:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   110c0:	4b09      	ldr	r3, [pc, #36]	; (110e8 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   110c2:	5c1b      	ldrb	r3, [r3, r0]
   110c4:	221f      	movs	r2, #31
   110c6:	401a      	ands	r2, r3
   110c8:	2301      	movs	r3, #1
   110ca:	4093      	lsls	r3, r2
   110cc:	4a07      	ldr	r2, [pc, #28]	; (110ec <tcc_enable_callback+0x38>)
   110ce:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   110d0:	00ad      	lsls	r5, r5, #2
   110d2:	4b07      	ldr	r3, [pc, #28]	; (110f0 <tcc_enable_callback+0x3c>)
   110d4:	58ea      	ldr	r2, [r5, r3]
   110d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   110d8:	4313      	orrs	r3, r2
   110da:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   110dc:	6823      	ldr	r3, [r4, #0]
   110de:	629a      	str	r2, [r3, #40]	; 0x28
}
   110e0:	bd70      	pop	{r4, r5, r6, pc}
   110e2:	46c0      	nop			; (mov r8, r8)
   110e4:	00010b11 	.word	0x00010b11
   110e8:	0001c470 	.word	0x0001c470
   110ec:	e000e100 	.word	0xe000e100
   110f0:	0001c440 	.word	0x0001c440

000110f4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   110f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   110f6:	46c6      	mov	lr, r8
   110f8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   110fa:	0080      	lsls	r0, r0, #2
   110fc:	4b0e      	ldr	r3, [pc, #56]	; (11138 <_tcc_interrupt_handler+0x44>)
   110fe:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   11100:	683b      	ldr	r3, [r7, #0]
   11102:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   11104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11108:	4013      	ands	r3, r2
   1110a:	401e      	ands	r6, r3
   1110c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1110e:	4b0b      	ldr	r3, [pc, #44]	; (1113c <_tcc_interrupt_handler+0x48>)
   11110:	4698      	mov	r8, r3
   11112:	e002      	b.n	1111a <_tcc_interrupt_handler+0x26>
   11114:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   11116:	2c30      	cmp	r4, #48	; 0x30
   11118:	d00a      	beq.n	11130 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   1111a:	4643      	mov	r3, r8
   1111c:	58e5      	ldr	r5, [r4, r3]
   1111e:	4235      	tst	r5, r6
   11120:	d0f8      	beq.n	11114 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   11122:	193b      	adds	r3, r7, r4
   11124:	685b      	ldr	r3, [r3, #4]
   11126:	0038      	movs	r0, r7
   11128:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   1112a:	683b      	ldr	r3, [r7, #0]
   1112c:	62dd      	str	r5, [r3, #44]	; 0x2c
   1112e:	e7f1      	b.n	11114 <_tcc_interrupt_handler+0x20>
		}
	}
}
   11130:	bc04      	pop	{r2}
   11132:	4690      	mov	r8, r2
   11134:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11136:	46c0      	nop			; (mov r8, r8)
   11138:	20001268 	.word	0x20001268
   1113c:	0001c440 	.word	0x0001c440

00011140 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   11140:	b510      	push	{r4, lr}
   11142:	2000      	movs	r0, #0
   11144:	4b01      	ldr	r3, [pc, #4]	; (1114c <TCC0_Handler+0xc>)
   11146:	4798      	blx	r3
   11148:	bd10      	pop	{r4, pc}
   1114a:	46c0      	nop			; (mov r8, r8)
   1114c:	000110f5 	.word	0x000110f5

00011150 <TCC1_Handler>:
   11150:	b510      	push	{r4, lr}
   11152:	2001      	movs	r0, #1
   11154:	4b01      	ldr	r3, [pc, #4]	; (1115c <TCC1_Handler+0xc>)
   11156:	4798      	blx	r3
   11158:	bd10      	pop	{r4, pc}
   1115a:	46c0      	nop			; (mov r8, r8)
   1115c:	000110f5 	.word	0x000110f5

00011160 <TCC2_Handler>:
   11160:	b510      	push	{r4, lr}
   11162:	2002      	movs	r0, #2
   11164:	4b01      	ldr	r3, [pc, #4]	; (1116c <TCC2_Handler+0xc>)
   11166:	4798      	blx	r3
   11168:	bd10      	pop	{r4, pc}
   1116a:	46c0      	nop			; (mov r8, r8)
   1116c:	000110f5 	.word	0x000110f5

00011170 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   11170:	e7fe      	b.n	11170 <Dummy_Handler>
	...

00011174 <Reset_Handler>:
{
   11174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   11176:	4a2a      	ldr	r2, [pc, #168]	; (11220 <Reset_Handler+0xac>)
   11178:	4b2a      	ldr	r3, [pc, #168]	; (11224 <Reset_Handler+0xb0>)
   1117a:	429a      	cmp	r2, r3
   1117c:	d011      	beq.n	111a2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   1117e:	001a      	movs	r2, r3
   11180:	4b29      	ldr	r3, [pc, #164]	; (11228 <Reset_Handler+0xb4>)
   11182:	429a      	cmp	r2, r3
   11184:	d20d      	bcs.n	111a2 <Reset_Handler+0x2e>
   11186:	4a29      	ldr	r2, [pc, #164]	; (1122c <Reset_Handler+0xb8>)
   11188:	3303      	adds	r3, #3
   1118a:	1a9b      	subs	r3, r3, r2
   1118c:	089b      	lsrs	r3, r3, #2
   1118e:	3301      	adds	r3, #1
   11190:	009b      	lsls	r3, r3, #2
   11192:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   11194:	4823      	ldr	r0, [pc, #140]	; (11224 <Reset_Handler+0xb0>)
   11196:	4922      	ldr	r1, [pc, #136]	; (11220 <Reset_Handler+0xac>)
   11198:	588c      	ldr	r4, [r1, r2]
   1119a:	5084      	str	r4, [r0, r2]
   1119c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   1119e:	429a      	cmp	r2, r3
   111a0:	d1fa      	bne.n	11198 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   111a2:	4a23      	ldr	r2, [pc, #140]	; (11230 <Reset_Handler+0xbc>)
   111a4:	4b23      	ldr	r3, [pc, #140]	; (11234 <Reset_Handler+0xc0>)
   111a6:	429a      	cmp	r2, r3
   111a8:	d20a      	bcs.n	111c0 <Reset_Handler+0x4c>
   111aa:	43d3      	mvns	r3, r2
   111ac:	4921      	ldr	r1, [pc, #132]	; (11234 <Reset_Handler+0xc0>)
   111ae:	185b      	adds	r3, r3, r1
   111b0:	2103      	movs	r1, #3
   111b2:	438b      	bics	r3, r1
   111b4:	3304      	adds	r3, #4
   111b6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   111b8:	2100      	movs	r1, #0
   111ba:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   111bc:	4293      	cmp	r3, r2
   111be:	d1fc      	bne.n	111ba <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   111c0:	4a1d      	ldr	r2, [pc, #116]	; (11238 <Reset_Handler+0xc4>)
   111c2:	21ff      	movs	r1, #255	; 0xff
   111c4:	4b1d      	ldr	r3, [pc, #116]	; (1123c <Reset_Handler+0xc8>)
   111c6:	438b      	bics	r3, r1
   111c8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   111ca:	39fd      	subs	r1, #253	; 0xfd
   111cc:	2390      	movs	r3, #144	; 0x90
   111ce:	005b      	lsls	r3, r3, #1
   111d0:	4a1b      	ldr	r2, [pc, #108]	; (11240 <Reset_Handler+0xcc>)
   111d2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   111d4:	4a1b      	ldr	r2, [pc, #108]	; (11244 <Reset_Handler+0xd0>)
   111d6:	78d3      	ldrb	r3, [r2, #3]
   111d8:	2503      	movs	r5, #3
   111da:	43ab      	bics	r3, r5
   111dc:	2402      	movs	r4, #2
   111de:	4323      	orrs	r3, r4
   111e0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   111e2:	78d3      	ldrb	r3, [r2, #3]
   111e4:	270c      	movs	r7, #12
   111e6:	43bb      	bics	r3, r7
   111e8:	2608      	movs	r6, #8
   111ea:	4333      	orrs	r3, r6
   111ec:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   111ee:	4b16      	ldr	r3, [pc, #88]	; (11248 <Reset_Handler+0xd4>)
   111f0:	7b98      	ldrb	r0, [r3, #14]
   111f2:	2230      	movs	r2, #48	; 0x30
   111f4:	4390      	bics	r0, r2
   111f6:	2220      	movs	r2, #32
   111f8:	4310      	orrs	r0, r2
   111fa:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   111fc:	7b99      	ldrb	r1, [r3, #14]
   111fe:	43b9      	bics	r1, r7
   11200:	4331      	orrs	r1, r6
   11202:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   11204:	7b9a      	ldrb	r2, [r3, #14]
   11206:	43aa      	bics	r2, r5
   11208:	4322      	orrs	r2, r4
   1120a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   1120c:	4a0f      	ldr	r2, [pc, #60]	; (1124c <Reset_Handler+0xd8>)
   1120e:	6853      	ldr	r3, [r2, #4]
   11210:	2180      	movs	r1, #128	; 0x80
   11212:	430b      	orrs	r3, r1
   11214:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   11216:	4b0e      	ldr	r3, [pc, #56]	; (11250 <Reset_Handler+0xdc>)
   11218:	4798      	blx	r3
        main();
   1121a:	4b0e      	ldr	r3, [pc, #56]	; (11254 <Reset_Handler+0xe0>)
   1121c:	4798      	blx	r3
   1121e:	e7fe      	b.n	1121e <Reset_Handler+0xaa>
   11220:	0001debc 	.word	0x0001debc
   11224:	20000000 	.word	0x20000000
   11228:	20000350 	.word	0x20000350
   1122c:	20000004 	.word	0x20000004
   11230:	20000350 	.word	0x20000350
   11234:	200014b0 	.word	0x200014b0
   11238:	e000ed00 	.word	0xe000ed00
   1123c:	00009c00 	.word	0x00009c00
   11240:	41007000 	.word	0x41007000
   11244:	41005000 	.word	0x41005000
   11248:	41004800 	.word	0x41004800
   1124c:	41004000 	.word	0x41004000
   11250:	00018f65 	.word	0x00018f65
   11254:	00016afd 	.word	0x00016afd

00011258 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   11258:	b5f0      	push	{r4, r5, r6, r7, lr}
   1125a:	46c6      	mov	lr, r8
   1125c:	b500      	push	{lr}
   1125e:	000c      	movs	r4, r1
   11260:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   11262:	2800      	cmp	r0, #0
   11264:	d10f      	bne.n	11286 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   11266:	2a00      	cmp	r2, #0
   11268:	dd11      	ble.n	1128e <_read+0x36>
   1126a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   1126c:	4e09      	ldr	r6, [pc, #36]	; (11294 <_read+0x3c>)
   1126e:	4d0a      	ldr	r5, [pc, #40]	; (11298 <_read+0x40>)
   11270:	6830      	ldr	r0, [r6, #0]
   11272:	0021      	movs	r1, r4
   11274:	682b      	ldr	r3, [r5, #0]
   11276:	4798      	blx	r3
		ptr++;
   11278:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   1127a:	42bc      	cmp	r4, r7
   1127c:	d1f8      	bne.n	11270 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   1127e:	4640      	mov	r0, r8
   11280:	bc04      	pop	{r2}
   11282:	4690      	mov	r8, r2
   11284:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   11286:	2301      	movs	r3, #1
   11288:	425b      	negs	r3, r3
   1128a:	4698      	mov	r8, r3
   1128c:	e7f7      	b.n	1127e <_read+0x26>
	for (; len > 0; --len) {
   1128e:	4680      	mov	r8, r0
   11290:	e7f5      	b.n	1127e <_read+0x26>
   11292:	46c0      	nop			; (mov r8, r8)
   11294:	2000127c 	.word	0x2000127c
   11298:	20001274 	.word	0x20001274

0001129c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1129c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1129e:	46c6      	mov	lr, r8
   112a0:	b500      	push	{lr}
   112a2:	000e      	movs	r6, r1
   112a4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   112a6:	3801      	subs	r0, #1
   112a8:	2802      	cmp	r0, #2
   112aa:	d810      	bhi.n	112ce <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   112ac:	2a00      	cmp	r2, #0
   112ae:	d011      	beq.n	112d4 <_write+0x38>
   112b0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   112b2:	4b0c      	ldr	r3, [pc, #48]	; (112e4 <_write+0x48>)
   112b4:	4698      	mov	r8, r3
   112b6:	4f0c      	ldr	r7, [pc, #48]	; (112e8 <_write+0x4c>)
   112b8:	4643      	mov	r3, r8
   112ba:	6818      	ldr	r0, [r3, #0]
   112bc:	5d31      	ldrb	r1, [r6, r4]
   112be:	683b      	ldr	r3, [r7, #0]
   112c0:	4798      	blx	r3
   112c2:	2800      	cmp	r0, #0
   112c4:	db08      	blt.n	112d8 <_write+0x3c>
			return -1;
		}
		++nChars;
   112c6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   112c8:	42a5      	cmp	r5, r4
   112ca:	d1f5      	bne.n	112b8 <_write+0x1c>
   112cc:	e006      	b.n	112dc <_write+0x40>
		return -1;
   112ce:	2401      	movs	r4, #1
   112d0:	4264      	negs	r4, r4
   112d2:	e003      	b.n	112dc <_write+0x40>
	for (; len != 0; --len) {
   112d4:	0014      	movs	r4, r2
   112d6:	e001      	b.n	112dc <_write+0x40>
			return -1;
   112d8:	2401      	movs	r4, #1
   112da:	4264      	negs	r4, r4
	}
	return nChars;
}
   112dc:	0020      	movs	r0, r4
   112de:	bc04      	pop	{r2}
   112e0:	4690      	mov	r8, r2
   112e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112e4:	2000127c 	.word	0x2000127c
   112e8:	20001278 	.word	0x20001278

000112ec <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   112ec:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   112ee:	4a06      	ldr	r2, [pc, #24]	; (11308 <_sbrk+0x1c>)
   112f0:	6812      	ldr	r2, [r2, #0]
   112f2:	2a00      	cmp	r2, #0
   112f4:	d004      	beq.n	11300 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   112f6:	4a04      	ldr	r2, [pc, #16]	; (11308 <_sbrk+0x1c>)
   112f8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   112fa:	18c3      	adds	r3, r0, r3
   112fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   112fe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   11300:	4902      	ldr	r1, [pc, #8]	; (1130c <_sbrk+0x20>)
   11302:	4a01      	ldr	r2, [pc, #4]	; (11308 <_sbrk+0x1c>)
   11304:	6011      	str	r1, [r2, #0]
   11306:	e7f6      	b.n	112f6 <_sbrk+0xa>
   11308:	2000054c 	.word	0x2000054c
   1130c:	200034b0 	.word	0x200034b0

00011310 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   11310:	2001      	movs	r0, #1
   11312:	4240      	negs	r0, r0
   11314:	4770      	bx	lr

00011316 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   11316:	2380      	movs	r3, #128	; 0x80
   11318:	019b      	lsls	r3, r3, #6
   1131a:	604b      	str	r3, [r1, #4]

	return 0;
}
   1131c:	2000      	movs	r0, #0
   1131e:	4770      	bx	lr

00011320 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   11320:	2001      	movs	r0, #1
   11322:	4770      	bx	lr

00011324 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   11324:	2000      	movs	r0, #0
   11326:	4770      	bx	lr

00011328 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   11328:	b530      	push	{r4, r5, lr}
   1132a:	b087      	sub	sp, #28
   1132c:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   1132e:	aa01      	add	r2, sp, #4
   11330:	23a0      	movs	r3, #160	; 0xa0
   11332:	011b      	lsls	r3, r3, #4
   11334:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   11336:	2300      	movs	r3, #0
   11338:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   1133a:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   1133c:	21fa      	movs	r1, #250	; 0xfa
   1133e:	00c9      	lsls	r1, r1, #3
   11340:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   11342:	2101      	movs	r1, #1
   11344:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   11346:	2004      	movs	r0, #4
   11348:	7210      	strb	r0, [r2, #8]
   1134a:	7253      	strb	r3, [r2, #9]
   1134c:	7293      	strb	r3, [r2, #10]
   1134e:	72d3      	strb	r3, [r2, #11]
   11350:	7311      	strb	r1, [r2, #12]
   11352:	7351      	strb	r1, [r2, #13]
   11354:	4b14      	ldr	r3, [pc, #80]	; (113a8 <disk_initialize+0x80>)
   11356:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   11358:	2306      	movs	r3, #6
   1135a:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   1135c:	4d13      	ldr	r5, [pc, #76]	; (113ac <disk_initialize+0x84>)
   1135e:	4914      	ldr	r1, [pc, #80]	; (113b0 <disk_initialize+0x88>)
   11360:	0028      	movs	r0, r5
   11362:	4b14      	ldr	r3, [pc, #80]	; (113b4 <disk_initialize+0x8c>)
   11364:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   11366:	0028      	movs	r0, r5
   11368:	4b13      	ldr	r3, [pc, #76]	; (113b8 <disk_initialize+0x90>)
   1136a:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   1136c:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   1136e:	2c01      	cmp	r4, #1
   11370:	d901      	bls.n	11376 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   11372:	b007      	add	sp, #28
   11374:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   11376:	0020      	movs	r0, r4
   11378:	4b10      	ldr	r3, [pc, #64]	; (113bc <disk_initialize+0x94>)
   1137a:	4798      	blx	r3
   1137c:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   1137e:	2803      	cmp	r0, #3
   11380:	d106      	bne.n	11390 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   11382:	0020      	movs	r0, r4
   11384:	4b0d      	ldr	r3, [pc, #52]	; (113bc <disk_initialize+0x94>)
   11386:	4798      	blx	r3
   11388:	0003      	movs	r3, r0
		return STA_NOINIT;
   1138a:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   1138c:	2b03      	cmp	r3, #3
   1138e:	d0f0      	beq.n	11372 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   11390:	2b00      	cmp	r3, #0
   11392:	d106      	bne.n	113a2 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   11394:	0020      	movs	r0, r4
   11396:	4b0a      	ldr	r3, [pc, #40]	; (113c0 <disk_initialize+0x98>)
   11398:	4798      	blx	r3
	return 0;
   1139a:	1e43      	subs	r3, r0, #1
   1139c:	4198      	sbcs	r0, r3
   1139e:	0080      	lsls	r0, r0, #2
   113a0:	e7e7      	b.n	11372 <disk_initialize+0x4a>
		return STA_NOINIT;
   113a2:	2001      	movs	r0, #1
   113a4:	e7e5      	b.n	11372 <disk_initialize+0x4a>
   113a6:	46c0      	nop			; (mov r8, r8)
   113a8:	000007de 	.word	0x000007de
   113ac:	20001280 	.word	0x20001280
   113b0:	40001400 	.word	0x40001400
   113b4:	0000f1ed 	.word	0x0000f1ed
   113b8:	0000f089 	.word	0x0000f089
   113bc:	0000eac1 	.word	0x0000eac1
   113c0:	0000eafd 	.word	0x0000eafd

000113c4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   113c4:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   113c6:	4b05      	ldr	r3, [pc, #20]	; (113dc <disk_status+0x18>)
   113c8:	4798      	blx	r3
   113ca:	1e03      	subs	r3, r0, #0
   113cc:	d004      	beq.n	113d8 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   113ce:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   113d0:	2b02      	cmp	r3, #2
   113d2:	d000      	beq.n	113d6 <disk_status+0x12>
	default:
		return STA_NOINIT;
   113d4:	3802      	subs	r0, #2
	}
}
   113d6:	bd10      	pop	{r4, pc}
		return 0;
   113d8:	2000      	movs	r0, #0
   113da:	e7fc      	b.n	113d6 <disk_status+0x12>
   113dc:	0000eac1 	.word	0x0000eac1

000113e0 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   113e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113e2:	46de      	mov	lr, fp
   113e4:	464f      	mov	r7, r9
   113e6:	4646      	mov	r6, r8
   113e8:	b5c0      	push	{r6, r7, lr}
   113ea:	b084      	sub	sp, #16
   113ec:	9001      	str	r0, [sp, #4]
   113ee:	000d      	movs	r5, r1
   113f0:	0014      	movs	r4, r2
   113f2:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   113f4:	4b18      	ldr	r3, [pc, #96]	; (11458 <disk_read+0x78>)
   113f6:	4798      	blx	r3
   113f8:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   113fa:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   113fc:	2e00      	cmp	r6, #0
   113fe:	d105      	bne.n	1140c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   11400:	b004      	add	sp, #16
   11402:	bc1c      	pop	{r2, r3, r4}
   11404:	4690      	mov	r8, r2
   11406:	4699      	mov	r9, r3
   11408:	46a3      	mov	fp, r4
   1140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   1140c:	a903      	add	r1, sp, #12
   1140e:	9801      	ldr	r0, [sp, #4]
   11410:	4b12      	ldr	r3, [pc, #72]	; (1145c <disk_read+0x7c>)
   11412:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   11414:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   11416:	0032      	movs	r2, r6
   11418:	437a      	muls	r2, r7
   1141a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   1141c:	9b03      	ldr	r3, [sp, #12]
   1141e:	3301      	adds	r3, #1
   11420:	4373      	muls	r3, r6
		return RES_PARERR;
   11422:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   11424:	429a      	cmp	r2, r3
   11426:	d8eb      	bhi.n	11400 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   11428:	2f00      	cmp	r7, #0
   1142a:	d011      	beq.n	11450 <disk_read+0x70>
   1142c:	0273      	lsls	r3, r6, #9
   1142e:	4698      	mov	r8, r3
   11430:	1c7b      	adds	r3, r7, #1
   11432:	469b      	mov	fp, r3
   11434:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   11436:	4e0a      	ldr	r6, [pc, #40]	; (11460 <disk_read+0x80>)
   11438:	002a      	movs	r2, r5
   1143a:	0021      	movs	r1, r4
   1143c:	9801      	ldr	r0, [sp, #4]
   1143e:	47b0      	blx	r6
   11440:	2800      	cmp	r0, #0
   11442:	d107      	bne.n	11454 <disk_read+0x74>
   11444:	3701      	adds	r7, #1
   11446:	444c      	add	r4, r9
   11448:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   1144a:	455f      	cmp	r7, fp
   1144c:	d1f4      	bne.n	11438 <disk_read+0x58>
   1144e:	e7d7      	b.n	11400 <disk_read+0x20>
	return RES_OK;
   11450:	2000      	movs	r0, #0
   11452:	e7d5      	b.n	11400 <disk_read+0x20>
			return RES_ERROR;
   11454:	2001      	movs	r0, #1
   11456:	e7d3      	b.n	11400 <disk_read+0x20>
   11458:	0000eaf5 	.word	0x0000eaf5
   1145c:	0000ead9 	.word	0x0000ead9
   11460:	0000eb15 	.word	0x0000eb15

00011464 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   11464:	b5f0      	push	{r4, r5, r6, r7, lr}
   11466:	46de      	mov	lr, fp
   11468:	464f      	mov	r7, r9
   1146a:	4646      	mov	r6, r8
   1146c:	b5c0      	push	{r6, r7, lr}
   1146e:	b084      	sub	sp, #16
   11470:	9001      	str	r0, [sp, #4]
   11472:	000d      	movs	r5, r1
   11474:	0014      	movs	r4, r2
   11476:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   11478:	4b18      	ldr	r3, [pc, #96]	; (114dc <disk_write+0x78>)
   1147a:	4798      	blx	r3
   1147c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1147e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   11480:	2e00      	cmp	r6, #0
   11482:	d105      	bne.n	11490 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   11484:	b004      	add	sp, #16
   11486:	bc1c      	pop	{r2, r3, r4}
   11488:	4690      	mov	r8, r2
   1148a:	4699      	mov	r9, r3
   1148c:	46a3      	mov	fp, r4
   1148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   11490:	a903      	add	r1, sp, #12
   11492:	9801      	ldr	r0, [sp, #4]
   11494:	4b12      	ldr	r3, [pc, #72]	; (114e0 <disk_write+0x7c>)
   11496:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   11498:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   1149a:	0032      	movs	r2, r6
   1149c:	437a      	muls	r2, r7
   1149e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   114a0:	9b03      	ldr	r3, [sp, #12]
   114a2:	3301      	adds	r3, #1
   114a4:	4373      	muls	r3, r6
		return RES_PARERR;
   114a6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   114a8:	429a      	cmp	r2, r3
   114aa:	d8eb      	bhi.n	11484 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   114ac:	2f00      	cmp	r7, #0
   114ae:	d011      	beq.n	114d4 <disk_write+0x70>
   114b0:	0273      	lsls	r3, r6, #9
   114b2:	4698      	mov	r8, r3
   114b4:	1c7b      	adds	r3, r7, #1
   114b6:	469b      	mov	fp, r3
   114b8:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   114ba:	4e0a      	ldr	r6, [pc, #40]	; (114e4 <disk_write+0x80>)
   114bc:	002a      	movs	r2, r5
   114be:	0021      	movs	r1, r4
   114c0:	9801      	ldr	r0, [sp, #4]
   114c2:	47b0      	blx	r6
   114c4:	2800      	cmp	r0, #0
   114c6:	d107      	bne.n	114d8 <disk_write+0x74>
   114c8:	3701      	adds	r7, #1
   114ca:	444c      	add	r4, r9
   114cc:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   114ce:	455f      	cmp	r7, fp
   114d0:	d1f4      	bne.n	114bc <disk_write+0x58>
   114d2:	e7d7      	b.n	11484 <disk_write+0x20>
	return RES_OK;
   114d4:	2000      	movs	r0, #0
   114d6:	e7d5      	b.n	11484 <disk_write+0x20>
			return RES_ERROR;
   114d8:	2001      	movs	r0, #1
   114da:	e7d3      	b.n	11484 <disk_write+0x20>
   114dc:	0000eaf5 	.word	0x0000eaf5
   114e0:	0000ead9 	.word	0x0000ead9
   114e4:	0000eb35 	.word	0x0000eb35

000114e8 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   114e8:	b510      	push	{r4, lr}
   114ea:	b082      	sub	sp, #8
   114ec:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   114ee:	2901      	cmp	r1, #1
   114f0:	d00b      	beq.n	1150a <disk_ioctl+0x22>
   114f2:	2900      	cmp	r1, #0
   114f4:	d020      	beq.n	11538 <disk_ioctl+0x50>
   114f6:	2902      	cmp	r1, #2
   114f8:	d00f      	beq.n	1151a <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   114fa:	2004      	movs	r0, #4
	switch (ctrl) {
   114fc:	2903      	cmp	r1, #3
   114fe:	d102      	bne.n	11506 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   11500:	2301      	movs	r3, #1
   11502:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   11504:	2000      	movs	r0, #0
	}

	return res;
}
   11506:	b002      	add	sp, #8
   11508:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   1150a:	a901      	add	r1, sp, #4
   1150c:	4b0e      	ldr	r3, [pc, #56]	; (11548 <disk_ioctl+0x60>)
   1150e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   11510:	9b01      	ldr	r3, [sp, #4]
   11512:	3301      	adds	r3, #1
   11514:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   11516:	2000      	movs	r0, #0
	break;
   11518:	e7f5      	b.n	11506 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   1151a:	4b0c      	ldr	r3, [pc, #48]	; (1154c <disk_ioctl+0x64>)
   1151c:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   1151e:	1e43      	subs	r3, r0, #1
   11520:	b2db      	uxtb	r3, r3
   11522:	2b01      	cmp	r3, #1
   11524:	d904      	bls.n	11530 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   11526:	1f03      	subs	r3, r0, #4
   11528:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   1152a:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   1152c:	4213      	tst	r3, r2
   1152e:	d1ea      	bne.n	11506 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   11530:	2300      	movs	r3, #0
   11532:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   11534:	2000      	movs	r0, #0
	break;
   11536:	e7e6      	b.n	11506 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   11538:	4b05      	ldr	r3, [pc, #20]	; (11550 <disk_ioctl+0x68>)
   1153a:	4798      	blx	r3
   1153c:	2800      	cmp	r0, #0
   1153e:	d001      	beq.n	11544 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   11540:	2003      	movs	r0, #3
   11542:	e7e0      	b.n	11506 <disk_ioctl+0x1e>
			res = RES_OK;
   11544:	2000      	movs	r0, #0
   11546:	e7de      	b.n	11506 <disk_ioctl+0x1e>
   11548:	0000ead9 	.word	0x0000ead9
   1154c:	0000eaf5 	.word	0x0000eaf5
   11550:	0000eac1 	.word	0x0000eac1

00011554 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   11554:	b500      	push	{lr}
   11556:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   11558:	4669      	mov	r1, sp
   1155a:	480f      	ldr	r0, [pc, #60]	; (11598 <get_fattime+0x44>)
   1155c:	4b0f      	ldr	r3, [pc, #60]	; (1159c <get_fattime+0x48>)
   1155e:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   11560:	466b      	mov	r3, sp
   11562:	7958      	ldrb	r0, [r3, #5]
   11564:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   11566:	791b      	ldrb	r3, [r3, #4]
   11568:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   1156a:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   1156c:	466b      	mov	r3, sp
   1156e:	789b      	ldrb	r3, [r3, #2]
   11570:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   11572:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   11574:	466b      	mov	r3, sp
   11576:	785b      	ldrb	r3, [r3, #1]
   11578:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   1157a:	4318      	orrs	r0, r3
   1157c:	466b      	mov	r3, sp
   1157e:	781b      	ldrb	r3, [r3, #0]
   11580:	085b      	lsrs	r3, r3, #1
   11582:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   11584:	466b      	mov	r3, sp
   11586:	88db      	ldrh	r3, [r3, #6]
   11588:	4a05      	ldr	r2, [pc, #20]	; (115a0 <get_fattime+0x4c>)
   1158a:	4694      	mov	ip, r2
   1158c:	4463      	add	r3, ip
   1158e:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   11590:	4318      	orrs	r0, r3

	return ul_time;
}
   11592:	b003      	add	sp, #12
   11594:	bd00      	pop	{pc}
   11596:	46c0      	nop			; (mov r8, r8)
   11598:	20001280 	.word	0x20001280
   1159c:	0000f175 	.word	0x0000f175
   115a0:	fffff844 	.word	0xfffff844

000115a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   115a4:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   115a6:	2a00      	cmp	r2, #0
   115a8:	d005      	beq.n	115b6 <mem_cpy+0x12>
   115aa:	2300      	movs	r3, #0
		*d++ = *s++;
   115ac:	5ccc      	ldrb	r4, [r1, r3]
   115ae:	54c4      	strb	r4, [r0, r3]
   115b0:	3301      	adds	r3, #1
	while (cnt--)
   115b2:	4293      	cmp	r3, r2
   115b4:	d1fa      	bne.n	115ac <mem_cpy+0x8>
}
   115b6:	bd10      	pop	{r4, pc}

000115b8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   115b8:	2a00      	cmp	r2, #0
   115ba:	d005      	beq.n	115c8 <mem_set+0x10>
   115bc:	0003      	movs	r3, r0
   115be:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   115c0:	7019      	strb	r1, [r3, #0]
   115c2:	3301      	adds	r3, #1
	while (cnt--)
   115c4:	4293      	cmp	r3, r2
   115c6:	d1fb      	bne.n	115c0 <mem_set+0x8>
}
   115c8:	4770      	bx	lr

000115ca <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   115ca:	0002      	movs	r2, r0
	clst -= 2;
   115cc:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   115ce:	6983      	ldr	r3, [r0, #24]
   115d0:	3b02      	subs	r3, #2
   115d2:	2000      	movs	r0, #0
   115d4:	4299      	cmp	r1, r3
   115d6:	d203      	bcs.n	115e0 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   115d8:	7890      	ldrb	r0, [r2, #2]
   115da:	4341      	muls	r1, r0
   115dc:	6a90      	ldr	r0, [r2, #40]	; 0x28
   115de:	1808      	adds	r0, r1, r0
}
   115e0:	4770      	bx	lr

000115e2 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   115e2:	0002      	movs	r2, r0
   115e4:	0001      	movs	r1, r0
   115e6:	310b      	adds	r1, #11
	BYTE sum = 0;
   115e8:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   115ea:	0843      	lsrs	r3, r0, #1
   115ec:	01c0      	lsls	r0, r0, #7
   115ee:	4303      	orrs	r3, r0
   115f0:	7810      	ldrb	r0, [r2, #0]
   115f2:	1818      	adds	r0, r3, r0
   115f4:	b2c0      	uxtb	r0, r0
   115f6:	3201      	adds	r2, #1
   115f8:	428a      	cmp	r2, r1
   115fa:	d1f6      	bne.n	115ea <sum_sfn+0x8>
	return sum;
}
   115fc:	4770      	bx	lr
	...

00011600 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   11600:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   11602:	2800      	cmp	r0, #0
   11604:	d010      	beq.n	11628 <validate+0x28>
   11606:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   11608:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   1160a:	2a00      	cmp	r2, #0
   1160c:	d101      	bne.n	11612 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   1160e:	0018      	movs	r0, r3
   11610:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   11612:	88c2      	ldrh	r2, [r0, #6]
   11614:	428a      	cmp	r2, r1
   11616:	d1fa      	bne.n	1160e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   11618:	7840      	ldrb	r0, [r0, #1]
   1161a:	4b04      	ldr	r3, [pc, #16]	; (1162c <validate+0x2c>)
   1161c:	4798      	blx	r3
		return FR_NOT_READY;
   1161e:	2303      	movs	r3, #3
	return FR_OK;
   11620:	07c0      	lsls	r0, r0, #31
   11622:	17c0      	asrs	r0, r0, #31
   11624:	4003      	ands	r3, r0
   11626:	e7f2      	b.n	1160e <validate+0xe>
		return FR_INVALID_OBJECT;
   11628:	2309      	movs	r3, #9
   1162a:	e7f0      	b.n	1160e <validate+0xe>
   1162c:	000113c5 	.word	0x000113c5

00011630 <check_fs>:
{
   11630:	b570      	push	{r4, r5, r6, lr}
   11632:	0004      	movs	r4, r0
   11634:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   11636:	0001      	movs	r1, r0
   11638:	3130      	adds	r1, #48	; 0x30
   1163a:	7840      	ldrb	r0, [r0, #1]
   1163c:	2301      	movs	r3, #1
   1163e:	4d1f      	ldr	r5, [pc, #124]	; (116bc <check_fs+0x8c>)
   11640:	47a8      	blx	r5
		return 3;
   11642:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   11644:	2800      	cmp	r0, #0
   11646:	d001      	beq.n	1164c <check_fs+0x1c>
}
   11648:	0018      	movs	r0, r3
   1164a:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1164c:	4b1c      	ldr	r3, [pc, #112]	; (116c0 <check_fs+0x90>)
   1164e:	5ce3      	ldrb	r3, [r4, r3]
   11650:	021b      	lsls	r3, r3, #8
   11652:	4a1c      	ldr	r2, [pc, #112]	; (116c4 <check_fs+0x94>)
   11654:	5ca2      	ldrb	r2, [r4, r2]
   11656:	431a      	orrs	r2, r3
   11658:	491b      	ldr	r1, [pc, #108]	; (116c8 <check_fs+0x98>)
   1165a:	b212      	sxth	r2, r2
		return 2;
   1165c:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   1165e:	428a      	cmp	r2, r1
   11660:	d1f2      	bne.n	11648 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   11662:	3367      	adds	r3, #103	; 0x67
   11664:	5ce3      	ldrb	r3, [r4, r3]
   11666:	061b      	lsls	r3, r3, #24
   11668:	2268      	movs	r2, #104	; 0x68
   1166a:	5ca2      	ldrb	r2, [r4, r2]
   1166c:	0412      	lsls	r2, r2, #16
   1166e:	4313      	orrs	r3, r2
   11670:	2266      	movs	r2, #102	; 0x66
   11672:	5ca2      	ldrb	r2, [r4, r2]
   11674:	4313      	orrs	r3, r2
   11676:	2267      	movs	r2, #103	; 0x67
   11678:	5ca2      	ldrb	r2, [r4, r2]
   1167a:	0212      	lsls	r2, r2, #8
   1167c:	4313      	orrs	r3, r2
   1167e:	021b      	lsls	r3, r3, #8
   11680:	0a1b      	lsrs	r3, r3, #8
   11682:	4a12      	ldr	r2, [pc, #72]	; (116cc <check_fs+0x9c>)
   11684:	4293      	cmp	r3, r2
   11686:	d016      	beq.n	116b6 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   11688:	2385      	movs	r3, #133	; 0x85
   1168a:	5ce3      	ldrb	r3, [r4, r3]
   1168c:	061b      	lsls	r3, r3, #24
   1168e:	2284      	movs	r2, #132	; 0x84
   11690:	5ca2      	ldrb	r2, [r4, r2]
   11692:	0412      	lsls	r2, r2, #16
   11694:	4313      	orrs	r3, r2
   11696:	2282      	movs	r2, #130	; 0x82
   11698:	5ca2      	ldrb	r2, [r4, r2]
   1169a:	4313      	orrs	r3, r2
   1169c:	2283      	movs	r2, #131	; 0x83
   1169e:	5ca2      	ldrb	r2, [r4, r2]
   116a0:	0212      	lsls	r2, r2, #8
   116a2:	4313      	orrs	r3, r2
   116a4:	021b      	lsls	r3, r3, #8
   116a6:	0a1b      	lsrs	r3, r3, #8
   116a8:	4a09      	ldr	r2, [pc, #36]	; (116d0 <check_fs+0xa0>)
   116aa:	4694      	mov	ip, r2
   116ac:	4463      	add	r3, ip
   116ae:	1e58      	subs	r0, r3, #1
   116b0:	4183      	sbcs	r3, r0
		return 3;
   116b2:	b2db      	uxtb	r3, r3
   116b4:	e7c8      	b.n	11648 <check_fs+0x18>
		return 0;
   116b6:	2300      	movs	r3, #0
   116b8:	e7c6      	b.n	11648 <check_fs+0x18>
   116ba:	46c0      	nop			; (mov r8, r8)
   116bc:	000113e1 	.word	0x000113e1
   116c0:	0000022f 	.word	0x0000022f
   116c4:	0000022e 	.word	0x0000022e
   116c8:	ffffaa55 	.word	0xffffaa55
   116cc:	00544146 	.word	0x00544146
   116d0:	ffabbeba 	.word	0xffabbeba

000116d4 <chk_mounted>:
{
   116d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   116d6:	46d6      	mov	lr, sl
   116d8:	464f      	mov	r7, r9
   116da:	4646      	mov	r6, r8
   116dc:	b5c0      	push	{r6, r7, lr}
   116de:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   116e0:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   116e2:	781c      	ldrb	r4, [r3, #0]
   116e4:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   116e6:	2c09      	cmp	r4, #9
   116e8:	d80e      	bhi.n	11708 <chk_mounted+0x34>
   116ea:	785a      	ldrb	r2, [r3, #1]
   116ec:	2a3a      	cmp	r2, #58	; 0x3a
   116ee:	d001      	beq.n	116f4 <chk_mounted+0x20>
   116f0:	2400      	movs	r4, #0
   116f2:	e00a      	b.n	1170a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   116f4:	3302      	adds	r3, #2
   116f6:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   116f8:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   116fa:	2c07      	cmp	r4, #7
   116fc:	d905      	bls.n	1170a <chk_mounted+0x36>
}
   116fe:	bc1c      	pop	{r2, r3, r4}
   11700:	4690      	mov	r8, r2
   11702:	4699      	mov	r9, r3
   11704:	46a2      	mov	sl, r4
   11706:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11708:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   1170a:	00a3      	lsls	r3, r4, #2
   1170c:	4ac5      	ldr	r2, [pc, #788]	; (11a24 <chk_mounted+0x350>)
   1170e:	589e      	ldr	r6, [r3, r2]
   11710:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   11712:	2e00      	cmp	r6, #0
   11714:	d100      	bne.n	11718 <chk_mounted+0x44>
   11716:	e0e8      	b.n	118ea <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   11718:	7833      	ldrb	r3, [r6, #0]
   1171a:	2b00      	cmp	r3, #0
   1171c:	d00d      	beq.n	1173a <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   1171e:	7870      	ldrb	r0, [r6, #1]
   11720:	4bc1      	ldr	r3, [pc, #772]	; (11a28 <chk_mounted+0x354>)
   11722:	4798      	blx	r3
   11724:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   11726:	07c2      	lsls	r2, r0, #31
   11728:	d407      	bmi.n	1173a <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   1172a:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   1172c:	2d00      	cmp	r5, #0
   1172e:	d0e6      	beq.n	116fe <chk_mounted+0x2a>
   11730:	075b      	lsls	r3, r3, #29
   11732:	d400      	bmi.n	11736 <chk_mounted+0x62>
   11734:	e0db      	b.n	118ee <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   11736:	300a      	adds	r0, #10
   11738:	e7e1      	b.n	116fe <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   1173a:	2300      	movs	r3, #0
   1173c:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   1173e:	b2e0      	uxtb	r0, r4
   11740:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   11742:	4bba      	ldr	r3, [pc, #744]	; (11a2c <chk_mounted+0x358>)
   11744:	4798      	blx	r3
   11746:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   11748:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   1174a:	07da      	lsls	r2, r3, #31
   1174c:	d4d7      	bmi.n	116fe <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   1174e:	2d00      	cmp	r5, #0
   11750:	d002      	beq.n	11758 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   11752:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   11754:	075b      	lsls	r3, r3, #29
   11756:	d4d2      	bmi.n	116fe <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   11758:	2100      	movs	r1, #0
   1175a:	0030      	movs	r0, r6
   1175c:	4bb4      	ldr	r3, [pc, #720]	; (11a30 <chk_mounted+0x35c>)
   1175e:	4798      	blx	r3
   11760:	0003      	movs	r3, r0
   11762:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   11764:	2801      	cmp	r0, #1
   11766:	d100      	bne.n	1176a <chk_mounted+0x96>
   11768:	e09a      	b.n	118a0 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   1176a:	2b03      	cmp	r3, #3
   1176c:	d100      	bne.n	11770 <chk_mounted+0x9c>
   1176e:	e0c0      	b.n	118f2 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   11770:	200d      	movs	r0, #13
   11772:	2b00      	cmp	r3, #0
   11774:	d1c3      	bne.n	116fe <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   11776:	333c      	adds	r3, #60	; 0x3c
   11778:	5cf2      	ldrb	r2, [r6, r3]
   1177a:	0212      	lsls	r2, r2, #8
   1177c:	3b01      	subs	r3, #1
   1177e:	5cf3      	ldrb	r3, [r6, r3]
   11780:	4313      	orrs	r3, r2
   11782:	2280      	movs	r2, #128	; 0x80
   11784:	0092      	lsls	r2, r2, #2
   11786:	b21b      	sxth	r3, r3
   11788:	4293      	cmp	r3, r2
   1178a:	d1b8      	bne.n	116fe <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   1178c:	2347      	movs	r3, #71	; 0x47
   1178e:	5cf3      	ldrb	r3, [r6, r3]
   11790:	021b      	lsls	r3, r3, #8
   11792:	3abb      	subs	r2, #187	; 0xbb
   11794:	3aff      	subs	r2, #255	; 0xff
   11796:	5cb5      	ldrb	r5, [r6, r2]
   11798:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   1179a:	d10d      	bne.n	117b8 <chk_mounted+0xe4>
   1179c:	2357      	movs	r3, #87	; 0x57
   1179e:	5cf5      	ldrb	r5, [r6, r3]
   117a0:	062d      	lsls	r5, r5, #24
   117a2:	3b01      	subs	r3, #1
   117a4:	5cf3      	ldrb	r3, [r6, r3]
   117a6:	041b      	lsls	r3, r3, #16
   117a8:	431d      	orrs	r5, r3
   117aa:	2354      	movs	r3, #84	; 0x54
   117ac:	5cf3      	ldrb	r3, [r6, r3]
   117ae:	431d      	orrs	r5, r3
   117b0:	2355      	movs	r3, #85	; 0x55
   117b2:	5cf3      	ldrb	r3, [r6, r3]
   117b4:	021b      	lsls	r3, r3, #8
   117b6:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   117b8:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   117ba:	2340      	movs	r3, #64	; 0x40
   117bc:	5cf2      	ldrb	r2, [r6, r3]
   117be:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   117c0:	1e53      	subs	r3, r2, #1
   117c2:	200d      	movs	r0, #13
   117c4:	2b01      	cmp	r3, #1
   117c6:	d89a      	bhi.n	116fe <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   117c8:	233d      	movs	r3, #61	; 0x3d
   117ca:	5cf1      	ldrb	r1, [r6, r3]
   117cc:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   117ce:	2900      	cmp	r1, #0
   117d0:	d095      	beq.n	116fe <chk_mounted+0x2a>
   117d2:	1e4b      	subs	r3, r1, #1
   117d4:	4219      	tst	r1, r3
   117d6:	d192      	bne.n	116fe <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   117d8:	2342      	movs	r3, #66	; 0x42
   117da:	5cf3      	ldrb	r3, [r6, r3]
   117dc:	021b      	lsls	r3, r3, #8
   117de:	3034      	adds	r0, #52	; 0x34
   117e0:	5c30      	ldrb	r0, [r6, r0]
   117e2:	4318      	orrs	r0, r3
   117e4:	4680      	mov	r8, r0
   117e6:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   117e8:	200d      	movs	r0, #13
   117ea:	4643      	mov	r3, r8
   117ec:	071b      	lsls	r3, r3, #28
   117ee:	d000      	beq.n	117f2 <chk_mounted+0x11e>
   117f0:	e785      	b.n	116fe <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   117f2:	2344      	movs	r3, #68	; 0x44
   117f4:	5cf3      	ldrb	r3, [r6, r3]
   117f6:	021b      	lsls	r3, r3, #8
   117f8:	3036      	adds	r0, #54	; 0x36
   117fa:	5c30      	ldrb	r0, [r6, r0]
   117fc:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   117fe:	d10d      	bne.n	1181c <chk_mounted+0x148>
   11800:	3353      	adds	r3, #83	; 0x53
   11802:	5cf3      	ldrb	r3, [r6, r3]
   11804:	061b      	lsls	r3, r3, #24
   11806:	2052      	movs	r0, #82	; 0x52
   11808:	5c30      	ldrb	r0, [r6, r0]
   1180a:	0400      	lsls	r0, r0, #16
   1180c:	4303      	orrs	r3, r0
   1180e:	2050      	movs	r0, #80	; 0x50
   11810:	5c30      	ldrb	r0, [r6, r0]
   11812:	4303      	orrs	r3, r0
   11814:	2051      	movs	r0, #81	; 0x51
   11816:	5c30      	ldrb	r0, [r6, r0]
   11818:	0200      	lsls	r0, r0, #8
   1181a:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   1181c:	203f      	movs	r0, #63	; 0x3f
   1181e:	5c30      	ldrb	r0, [r6, r0]
   11820:	0200      	lsls	r0, r0, #8
   11822:	273e      	movs	r7, #62	; 0x3e
   11824:	5df7      	ldrb	r7, [r6, r7]
   11826:	4307      	orrs	r7, r0
   11828:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   1182a:	200d      	movs	r0, #13
   1182c:	2f00      	cmp	r7, #0
   1182e:	d100      	bne.n	11832 <chk_mounted+0x15e>
   11830:	e765      	b.n	116fe <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   11832:	436a      	muls	r2, r5
   11834:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   11836:	4642      	mov	r2, r8
   11838:	0917      	lsrs	r7, r2, #4
   1183a:	4457      	add	r7, sl
   1183c:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   1183e:	42bb      	cmp	r3, r7
   11840:	d200      	bcs.n	11844 <chk_mounted+0x170>
   11842:	e75c      	b.n	116fe <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   11844:	1bd8      	subs	r0, r3, r7
   11846:	4b7b      	ldr	r3, [pc, #492]	; (11a34 <chk_mounted+0x360>)
   11848:	4798      	blx	r3
   1184a:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   1184c:	200d      	movs	r0, #13
   1184e:	2b00      	cmp	r3, #0
   11850:	d100      	bne.n	11854 <chk_mounted+0x180>
   11852:	e754      	b.n	116fe <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   11854:	4a78      	ldr	r2, [pc, #480]	; (11a38 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   11856:	429a      	cmp	r2, r3
   11858:	4192      	sbcs	r2, r2
   1185a:	4252      	negs	r2, r2
   1185c:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   1185e:	4977      	ldr	r1, [pc, #476]	; (11a3c <chk_mounted+0x368>)
   11860:	428b      	cmp	r3, r1
   11862:	d848      	bhi.n	118f6 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   11864:	3302      	adds	r3, #2
   11866:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   11868:	19e7      	adds	r7, r4, r7
   1186a:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   1186c:	4454      	add	r4, sl
   1186e:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   11870:	200d      	movs	r0, #13
   11872:	4641      	mov	r1, r8
   11874:	2900      	cmp	r1, #0
   11876:	d100      	bne.n	1187a <chk_mounted+0x1a6>
   11878:	e741      	b.n	116fe <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   1187a:	444c      	add	r4, r9
   1187c:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   1187e:	2a02      	cmp	r2, #2
   11880:	d12c      	bne.n	118dc <chk_mounted+0x208>
   11882:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   11884:	496e      	ldr	r1, [pc, #440]	; (11a40 <chk_mounted+0x36c>)
   11886:	468c      	mov	ip, r1
   11888:	4463      	add	r3, ip
   1188a:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   1188c:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1188e:	429d      	cmp	r5, r3
   11890:	d200      	bcs.n	11894 <chk_mounted+0x1c0>
   11892:	e734      	b.n	116fe <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   11894:	2301      	movs	r3, #1
   11896:	425b      	negs	r3, r3
   11898:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   1189a:	2300      	movs	r3, #0
   1189c:	60f3      	str	r3, [r6, #12]
   1189e:	e0b6      	b.n	11a0e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   118a0:	33f2      	adds	r3, #242	; 0xf2
   118a2:	33ff      	adds	r3, #255	; 0xff
   118a4:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   118a6:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   118a8:	2b00      	cmp	r3, #0
   118aa:	d100      	bne.n	118ae <chk_mounted+0x1da>
   118ac:	e727      	b.n	116fe <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   118ae:	23fa      	movs	r3, #250	; 0xfa
   118b0:	33ff      	adds	r3, #255	; 0xff
   118b2:	5cf4      	ldrb	r4, [r6, r3]
   118b4:	0624      	lsls	r4, r4, #24
   118b6:	3b01      	subs	r3, #1
   118b8:	5cf3      	ldrb	r3, [r6, r3]
   118ba:	041b      	lsls	r3, r3, #16
   118bc:	431c      	orrs	r4, r3
   118be:	23fb      	movs	r3, #251	; 0xfb
   118c0:	005b      	lsls	r3, r3, #1
   118c2:	5cf3      	ldrb	r3, [r6, r3]
   118c4:	431c      	orrs	r4, r3
   118c6:	23f8      	movs	r3, #248	; 0xf8
   118c8:	33ff      	adds	r3, #255	; 0xff
   118ca:	5cf2      	ldrb	r2, [r6, r3]
   118cc:	0212      	lsls	r2, r2, #8
   118ce:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   118d0:	0021      	movs	r1, r4
   118d2:	0030      	movs	r0, r6
   118d4:	4b56      	ldr	r3, [pc, #344]	; (11a30 <chk_mounted+0x35c>)
   118d6:	4798      	blx	r3
   118d8:	0003      	movs	r3, r0
   118da:	e746      	b.n	1176a <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   118dc:	2103      	movs	r1, #3
   118de:	4359      	muls	r1, r3
   118e0:	0849      	lsrs	r1, r1, #1
   118e2:	2001      	movs	r0, #1
   118e4:	4003      	ands	r3, r0
   118e6:	18cb      	adds	r3, r1, r3
   118e8:	e7cc      	b.n	11884 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   118ea:	200c      	movs	r0, #12
   118ec:	e707      	b.n	116fe <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   118ee:	2000      	movs	r0, #0
   118f0:	e705      	b.n	116fe <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   118f2:	2001      	movs	r0, #1
   118f4:	e703      	b.n	116fe <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   118f6:	3302      	adds	r3, #2
   118f8:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   118fa:	19e7      	adds	r7, r4, r7
   118fc:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   118fe:	4652      	mov	r2, sl
   11900:	18a2      	adds	r2, r4, r2
   11902:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   11904:	200d      	movs	r0, #13
   11906:	4642      	mov	r2, r8
   11908:	2a00      	cmp	r2, #0
   1190a:	d000      	beq.n	1190e <chk_mounted+0x23a>
   1190c:	e6f7      	b.n	116fe <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   1190e:	225f      	movs	r2, #95	; 0x5f
   11910:	5cb2      	ldrb	r2, [r6, r2]
   11912:	0612      	lsls	r2, r2, #24
   11914:	215e      	movs	r1, #94	; 0x5e
   11916:	5c71      	ldrb	r1, [r6, r1]
   11918:	0409      	lsls	r1, r1, #16
   1191a:	430a      	orrs	r2, r1
   1191c:	215c      	movs	r1, #92	; 0x5c
   1191e:	5c71      	ldrb	r1, [r6, r1]
   11920:	430a      	orrs	r2, r1
   11922:	215d      	movs	r1, #93	; 0x5d
   11924:	5c71      	ldrb	r1, [r6, r1]
   11926:	0209      	lsls	r1, r1, #8
   11928:	430a      	orrs	r2, r1
   1192a:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   1192c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   1192e:	4a44      	ldr	r2, [pc, #272]	; (11a40 <chk_mounted+0x36c>)
   11930:	4694      	mov	ip, r2
   11932:	4463      	add	r3, ip
   11934:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   11936:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   11938:	429d      	cmp	r5, r3
   1193a:	d200      	bcs.n	1193e <chk_mounted+0x26a>
   1193c:	e6df      	b.n	116fe <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   1193e:	2301      	movs	r3, #1
   11940:	425b      	negs	r3, r3
   11942:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   11944:	2300      	movs	r3, #0
   11946:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   11948:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   1194a:	3361      	adds	r3, #97	; 0x61
   1194c:	5cf3      	ldrb	r3, [r6, r3]
   1194e:	021b      	lsls	r3, r3, #8
   11950:	2260      	movs	r2, #96	; 0x60
   11952:	5cb2      	ldrb	r2, [r6, r2]
   11954:	431a      	orrs	r2, r3
   11956:	1912      	adds	r2, r2, r4
   11958:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   1195a:	0031      	movs	r1, r6
   1195c:	3130      	adds	r1, #48	; 0x30
   1195e:	7870      	ldrb	r0, [r6, #1]
   11960:	2301      	movs	r3, #1
   11962:	4c38      	ldr	r4, [pc, #224]	; (11a44 <chk_mounted+0x370>)
   11964:	47a0      	blx	r4
   11966:	2203      	movs	r2, #3
   11968:	2800      	cmp	r0, #0
   1196a:	d150      	bne.n	11a0e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1196c:	4b36      	ldr	r3, [pc, #216]	; (11a48 <chk_mounted+0x374>)
   1196e:	5cf2      	ldrb	r2, [r6, r3]
   11970:	0212      	lsls	r2, r2, #8
   11972:	4b36      	ldr	r3, [pc, #216]	; (11a4c <chk_mounted+0x378>)
   11974:	5cf3      	ldrb	r3, [r6, r3]
   11976:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   11978:	4935      	ldr	r1, [pc, #212]	; (11a50 <chk_mounted+0x37c>)
   1197a:	b21b      	sxth	r3, r3
   1197c:	2203      	movs	r2, #3
   1197e:	428b      	cmp	r3, r1
   11980:	d145      	bne.n	11a0e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   11982:	2333      	movs	r3, #51	; 0x33
   11984:	5cf3      	ldrb	r3, [r6, r3]
   11986:	061b      	lsls	r3, r3, #24
   11988:	322f      	adds	r2, #47	; 0x2f
   1198a:	5cb2      	ldrb	r2, [r6, r2]
   1198c:	0412      	lsls	r2, r2, #16
   1198e:	4313      	orrs	r3, r2
   11990:	2230      	movs	r2, #48	; 0x30
   11992:	5cb2      	ldrb	r2, [r6, r2]
   11994:	4313      	orrs	r3, r2
   11996:	2231      	movs	r2, #49	; 0x31
   11998:	5cb2      	ldrb	r2, [r6, r2]
   1199a:	0212      	lsls	r2, r2, #8
   1199c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   1199e:	492d      	ldr	r1, [pc, #180]	; (11a54 <chk_mounted+0x380>)
   119a0:	2203      	movs	r2, #3
   119a2:	428b      	cmp	r3, r1
   119a4:	d133      	bne.n	11a0e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   119a6:	4b2c      	ldr	r3, [pc, #176]	; (11a58 <chk_mounted+0x384>)
   119a8:	5cf3      	ldrb	r3, [r6, r3]
   119aa:	061b      	lsls	r3, r3, #24
   119ac:	4a2b      	ldr	r2, [pc, #172]	; (11a5c <chk_mounted+0x388>)
   119ae:	5cb2      	ldrb	r2, [r6, r2]
   119b0:	0412      	lsls	r2, r2, #16
   119b2:	4313      	orrs	r3, r2
   119b4:	2285      	movs	r2, #133	; 0x85
   119b6:	0092      	lsls	r2, r2, #2
   119b8:	5cb2      	ldrb	r2, [r6, r2]
   119ba:	4313      	orrs	r3, r2
   119bc:	4a28      	ldr	r2, [pc, #160]	; (11a60 <chk_mounted+0x38c>)
   119be:	5cb2      	ldrb	r2, [r6, r2]
   119c0:	0212      	lsls	r2, r2, #8
   119c2:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   119c4:	4927      	ldr	r1, [pc, #156]	; (11a64 <chk_mounted+0x390>)
   119c6:	2203      	movs	r2, #3
   119c8:	428b      	cmp	r3, r1
   119ca:	d120      	bne.n	11a0e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   119cc:	4b26      	ldr	r3, [pc, #152]	; (11a68 <chk_mounted+0x394>)
   119ce:	5cf3      	ldrb	r3, [r6, r3]
   119d0:	061b      	lsls	r3, r3, #24
   119d2:	4a26      	ldr	r2, [pc, #152]	; (11a6c <chk_mounted+0x398>)
   119d4:	5cb2      	ldrb	r2, [r6, r2]
   119d6:	0412      	lsls	r2, r2, #16
   119d8:	4313      	orrs	r3, r2
   119da:	2287      	movs	r2, #135	; 0x87
   119dc:	0092      	lsls	r2, r2, #2
   119de:	5cb2      	ldrb	r2, [r6, r2]
   119e0:	4313      	orrs	r3, r2
   119e2:	4a23      	ldr	r2, [pc, #140]	; (11a70 <chk_mounted+0x39c>)
   119e4:	5cb2      	ldrb	r2, [r6, r2]
   119e6:	0212      	lsls	r2, r2, #8
   119e8:	4313      	orrs	r3, r2
   119ea:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   119ec:	4b21      	ldr	r3, [pc, #132]	; (11a74 <chk_mounted+0x3a0>)
   119ee:	5cf3      	ldrb	r3, [r6, r3]
   119f0:	061b      	lsls	r3, r3, #24
   119f2:	4a21      	ldr	r2, [pc, #132]	; (11a78 <chk_mounted+0x3a4>)
   119f4:	5cb2      	ldrb	r2, [r6, r2]
   119f6:	0412      	lsls	r2, r2, #16
   119f8:	4313      	orrs	r3, r2
   119fa:	2286      	movs	r2, #134	; 0x86
   119fc:	0092      	lsls	r2, r2, #2
   119fe:	5cb2      	ldrb	r2, [r6, r2]
   11a00:	4313      	orrs	r3, r2
   11a02:	4a1e      	ldr	r2, [pc, #120]	; (11a7c <chk_mounted+0x3a8>)
   11a04:	5cb2      	ldrb	r2, [r6, r2]
   11a06:	0212      	lsls	r2, r2, #8
   11a08:	4313      	orrs	r3, r2
   11a0a:	6133      	str	r3, [r6, #16]
   11a0c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   11a0e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   11a10:	4a1b      	ldr	r2, [pc, #108]	; (11a80 <chk_mounted+0x3ac>)
   11a12:	8813      	ldrh	r3, [r2, #0]
   11a14:	3301      	adds	r3, #1
   11a16:	b29b      	uxth	r3, r3
   11a18:	8013      	strh	r3, [r2, #0]
   11a1a:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   11a1c:	2000      	movs	r0, #0
   11a1e:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   11a20:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   11a22:	e66c      	b.n	116fe <chk_mounted+0x2a>
   11a24:	20000550 	.word	0x20000550
   11a28:	000113c5 	.word	0x000113c5
   11a2c:	00011329 	.word	0x00011329
   11a30:	00011631 	.word	0x00011631
   11a34:	00017015 	.word	0x00017015
   11a38:	00000ff5 	.word	0x00000ff5
   11a3c:	0000fff5 	.word	0x0000fff5
   11a40:	000001ff 	.word	0x000001ff
   11a44:	000113e1 	.word	0x000113e1
   11a48:	0000022f 	.word	0x0000022f
   11a4c:	0000022e 	.word	0x0000022e
   11a50:	ffffaa55 	.word	0xffffaa55
   11a54:	41615252 	.word	0x41615252
   11a58:	00000217 	.word	0x00000217
   11a5c:	00000216 	.word	0x00000216
   11a60:	00000215 	.word	0x00000215
   11a64:	61417272 	.word	0x61417272
   11a68:	0000021f 	.word	0x0000021f
   11a6c:	0000021e 	.word	0x0000021e
   11a70:	0000021d 	.word	0x0000021d
   11a74:	0000021b 	.word	0x0000021b
   11a78:	0000021a 	.word	0x0000021a
   11a7c:	00000219 	.word	0x00000219
   11a80:	20000570 	.word	0x20000570

00011a84 <move_window>:
{
   11a84:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a86:	46ce      	mov	lr, r9
   11a88:	b500      	push	{lr}
   11a8a:	b082      	sub	sp, #8
   11a8c:	0004      	movs	r4, r0
   11a8e:	000f      	movs	r7, r1
	wsect = fs->winsect;
   11a90:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   11a92:	428d      	cmp	r5, r1
   11a94:	d03f      	beq.n	11b16 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   11a96:	7903      	ldrb	r3, [r0, #4]
   11a98:	2b00      	cmp	r3, #0
   11a9a:	d107      	bne.n	11aac <move_window+0x28>
	return FR_OK;
   11a9c:	2300      	movs	r3, #0
		if (sector) {
   11a9e:	2f00      	cmp	r7, #0
   11aa0:	d12c      	bne.n	11afc <move_window+0x78>
}
   11aa2:	0018      	movs	r0, r3
   11aa4:	b002      	add	sp, #8
   11aa6:	bc04      	pop	{r2}
   11aa8:	4691      	mov	r9, r2
   11aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   11aac:	2330      	movs	r3, #48	; 0x30
   11aae:	469c      	mov	ip, r3
   11ab0:	4484      	add	ip, r0
   11ab2:	4663      	mov	r3, ip
   11ab4:	4661      	mov	r1, ip
   11ab6:	9301      	str	r3, [sp, #4]
   11ab8:	7840      	ldrb	r0, [r0, #1]
   11aba:	2301      	movs	r3, #1
   11abc:	002a      	movs	r2, r5
   11abe:	4e17      	ldr	r6, [pc, #92]	; (11b1c <move_window+0x98>)
   11ac0:	47b0      	blx	r6
				return FR_DISK_ERR;
   11ac2:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   11ac4:	2800      	cmp	r0, #0
   11ac6:	d1ec      	bne.n	11aa2 <move_window+0x1e>
			fs->wflag = 0;
   11ac8:	2300      	movs	r3, #0
   11aca:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   11acc:	6a23      	ldr	r3, [r4, #32]
   11ace:	69e2      	ldr	r2, [r4, #28]
   11ad0:	4694      	mov	ip, r2
   11ad2:	4463      	add	r3, ip
   11ad4:	429d      	cmp	r5, r3
   11ad6:	d2e1      	bcs.n	11a9c <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   11ad8:	78e6      	ldrb	r6, [r4, #3]
   11ada:	2e01      	cmp	r6, #1
   11adc:	d9de      	bls.n	11a9c <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   11ade:	4b0f      	ldr	r3, [pc, #60]	; (11b1c <move_window+0x98>)
   11ae0:	4699      	mov	r9, r3
					wsect += fs->fsize;
   11ae2:	69e3      	ldr	r3, [r4, #28]
   11ae4:	469c      	mov	ip, r3
   11ae6:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   11ae8:	7860      	ldrb	r0, [r4, #1]
   11aea:	2301      	movs	r3, #1
   11aec:	002a      	movs	r2, r5
   11aee:	9901      	ldr	r1, [sp, #4]
   11af0:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   11af2:	3e01      	subs	r6, #1
   11af4:	b2f6      	uxtb	r6, r6
   11af6:	2e01      	cmp	r6, #1
   11af8:	d1f3      	bne.n	11ae2 <move_window+0x5e>
   11afa:	e7cf      	b.n	11a9c <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   11afc:	0021      	movs	r1, r4
   11afe:	3130      	adds	r1, #48	; 0x30
   11b00:	7860      	ldrb	r0, [r4, #1]
   11b02:	3301      	adds	r3, #1
   11b04:	003a      	movs	r2, r7
   11b06:	4d06      	ldr	r5, [pc, #24]	; (11b20 <move_window+0x9c>)
   11b08:	47a8      	blx	r5
				return FR_DISK_ERR;
   11b0a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   11b0c:	2800      	cmp	r0, #0
   11b0e:	d1c8      	bne.n	11aa2 <move_window+0x1e>
			fs->winsect = sector;
   11b10:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   11b12:	2300      	movs	r3, #0
   11b14:	e7c5      	b.n	11aa2 <move_window+0x1e>
   11b16:	2300      	movs	r3, #0
   11b18:	e7c3      	b.n	11aa2 <move_window+0x1e>
   11b1a:	46c0      	nop			; (mov r8, r8)
   11b1c:	00011465 	.word	0x00011465
   11b20:	000113e1 	.word	0x000113e1

00011b24 <get_fat>:
{
   11b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b26:	0005      	movs	r5, r0
   11b28:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   11b2a:	2901      	cmp	r1, #1
   11b2c:	d974      	bls.n	11c18 <get_fat+0xf4>
		return 1;
   11b2e:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   11b30:	69ab      	ldr	r3, [r5, #24]
   11b32:	4299      	cmp	r1, r3
   11b34:	d271      	bcs.n	11c1a <get_fat+0xf6>
	switch (fs->fs_type) {
   11b36:	782b      	ldrb	r3, [r5, #0]
   11b38:	2b02      	cmp	r3, #2
   11b3a:	d034      	beq.n	11ba6 <get_fat+0x82>
   11b3c:	2b03      	cmp	r3, #3
   11b3e:	d049      	beq.n	11bd4 <get_fat+0xb0>
   11b40:	2b01      	cmp	r3, #1
   11b42:	d002      	beq.n	11b4a <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   11b44:	2001      	movs	r0, #1
   11b46:	4240      	negs	r0, r0
   11b48:	e067      	b.n	11c1a <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   11b4a:	084e      	lsrs	r6, r1, #1
   11b4c:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   11b4e:	0a71      	lsrs	r1, r6, #9
   11b50:	6a2b      	ldr	r3, [r5, #32]
   11b52:	469c      	mov	ip, r3
   11b54:	4461      	add	r1, ip
   11b56:	0028      	movs	r0, r5
   11b58:	4b30      	ldr	r3, [pc, #192]	; (11c1c <get_fat+0xf8>)
   11b5a:	4798      	blx	r3
   11b5c:	2800      	cmp	r0, #0
   11b5e:	d002      	beq.n	11b66 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   11b60:	2001      	movs	r0, #1
   11b62:	4240      	negs	r0, r0
   11b64:	e059      	b.n	11c1a <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   11b66:	05f3      	lsls	r3, r6, #23
   11b68:	0ddb      	lsrs	r3, r3, #23
   11b6a:	18eb      	adds	r3, r5, r3
   11b6c:	3330      	adds	r3, #48	; 0x30
   11b6e:	781f      	ldrb	r7, [r3, #0]
   11b70:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   11b72:	0a71      	lsrs	r1, r6, #9
   11b74:	6a2b      	ldr	r3, [r5, #32]
   11b76:	469c      	mov	ip, r3
   11b78:	4461      	add	r1, ip
   11b7a:	0028      	movs	r0, r5
   11b7c:	4b27      	ldr	r3, [pc, #156]	; (11c1c <get_fat+0xf8>)
   11b7e:	4798      	blx	r3
   11b80:	2800      	cmp	r0, #0
   11b82:	d002      	beq.n	11b8a <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   11b84:	2001      	movs	r0, #1
   11b86:	4240      	negs	r0, r0
   11b88:	e047      	b.n	11c1a <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   11b8a:	05f6      	lsls	r6, r6, #23
   11b8c:	0df6      	lsrs	r6, r6, #23
   11b8e:	19ad      	adds	r5, r5, r6
   11b90:	3530      	adds	r5, #48	; 0x30
   11b92:	7828      	ldrb	r0, [r5, #0]
   11b94:	0200      	lsls	r0, r0, #8
   11b96:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   11b98:	07e3      	lsls	r3, r4, #31
   11b9a:	d501      	bpl.n	11ba0 <get_fat+0x7c>
   11b9c:	0900      	lsrs	r0, r0, #4
   11b9e:	e03c      	b.n	11c1a <get_fat+0xf6>
   11ba0:	0500      	lsls	r0, r0, #20
   11ba2:	0d00      	lsrs	r0, r0, #20
   11ba4:	e039      	b.n	11c1a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   11ba6:	0a09      	lsrs	r1, r1, #8
   11ba8:	6a2b      	ldr	r3, [r5, #32]
   11baa:	469c      	mov	ip, r3
   11bac:	4461      	add	r1, ip
   11bae:	0028      	movs	r0, r5
   11bb0:	4b1a      	ldr	r3, [pc, #104]	; (11c1c <get_fat+0xf8>)
   11bb2:	4798      	blx	r3
   11bb4:	2800      	cmp	r0, #0
   11bb6:	d002      	beq.n	11bbe <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   11bb8:	2001      	movs	r0, #1
   11bba:	4240      	negs	r0, r0
   11bbc:	e02d      	b.n	11c1a <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   11bbe:	0064      	lsls	r4, r4, #1
   11bc0:	23ff      	movs	r3, #255	; 0xff
   11bc2:	005b      	lsls	r3, r3, #1
   11bc4:	401c      	ands	r4, r3
		return LD_WORD(p);
   11bc6:	192d      	adds	r5, r5, r4
   11bc8:	3530      	adds	r5, #48	; 0x30
   11bca:	786b      	ldrb	r3, [r5, #1]
   11bcc:	021b      	lsls	r3, r3, #8
   11bce:	7828      	ldrb	r0, [r5, #0]
   11bd0:	4318      	orrs	r0, r3
   11bd2:	e022      	b.n	11c1a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   11bd4:	09c9      	lsrs	r1, r1, #7
   11bd6:	6a2b      	ldr	r3, [r5, #32]
   11bd8:	469c      	mov	ip, r3
   11bda:	4461      	add	r1, ip
   11bdc:	0028      	movs	r0, r5
   11bde:	4b0f      	ldr	r3, [pc, #60]	; (11c1c <get_fat+0xf8>)
   11be0:	4798      	blx	r3
   11be2:	2800      	cmp	r0, #0
   11be4:	d002      	beq.n	11bec <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   11be6:	2001      	movs	r0, #1
   11be8:	4240      	negs	r0, r0
   11bea:	e016      	b.n	11c1a <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   11bec:	00a4      	lsls	r4, r4, #2
   11bee:	23fe      	movs	r3, #254	; 0xfe
   11bf0:	005b      	lsls	r3, r3, #1
   11bf2:	401c      	ands	r4, r3
   11bf4:	0023      	movs	r3, r4
   11bf6:	3330      	adds	r3, #48	; 0x30
   11bf8:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   11bfa:	78d8      	ldrb	r0, [r3, #3]
   11bfc:	0600      	lsls	r0, r0, #24
   11bfe:	789a      	ldrb	r2, [r3, #2]
   11c00:	0412      	lsls	r2, r2, #16
   11c02:	4310      	orrs	r0, r2
   11c04:	192c      	adds	r4, r5, r4
   11c06:	3430      	adds	r4, #48	; 0x30
   11c08:	7822      	ldrb	r2, [r4, #0]
   11c0a:	4310      	orrs	r0, r2
   11c0c:	785b      	ldrb	r3, [r3, #1]
   11c0e:	021b      	lsls	r3, r3, #8
   11c10:	4318      	orrs	r0, r3
   11c12:	0100      	lsls	r0, r0, #4
   11c14:	0900      	lsrs	r0, r0, #4
   11c16:	e000      	b.n	11c1a <get_fat+0xf6>
		return 1;
   11c18:	2001      	movs	r0, #1
}
   11c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c1c:	00011a85 	.word	0x00011a85

00011c20 <dir_sdi>:
{
   11c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c22:	0004      	movs	r4, r0
   11c24:	000d      	movs	r5, r1
	dj->index = idx;
   11c26:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   11c28:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   11c2a:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   11c2c:	2901      	cmp	r1, #1
   11c2e:	d003      	beq.n	11c38 <dir_sdi+0x18>
   11c30:	6823      	ldr	r3, [r4, #0]
   11c32:	699a      	ldr	r2, [r3, #24]
   11c34:	4291      	cmp	r1, r2
   11c36:	d300      	bcc.n	11c3a <dir_sdi+0x1a>
}
   11c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   11c3a:	2900      	cmp	r1, #0
   11c3c:	d119      	bne.n	11c72 <dir_sdi+0x52>
   11c3e:	781a      	ldrb	r2, [r3, #0]
   11c40:	2a03      	cmp	r2, #3
   11c42:	d013      	beq.n	11c6c <dir_sdi+0x4c>
		dj->clust = clst;
   11c44:	2200      	movs	r2, #0
   11c46:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   11c48:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   11c4a:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   11c4c:	42aa      	cmp	r2, r5
   11c4e:	d9f3      	bls.n	11c38 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   11c50:	092a      	lsrs	r2, r5, #4
   11c52:	b292      	uxth	r2, r2
   11c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11c56:	189b      	adds	r3, r3, r2
   11c58:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   11c5a:	6823      	ldr	r3, [r4, #0]
   11c5c:	3330      	adds	r3, #48	; 0x30
   11c5e:	220f      	movs	r2, #15
   11c60:	4015      	ands	r5, r2
   11c62:	016d      	lsls	r5, r5, #5
   11c64:	195d      	adds	r5, r3, r5
   11c66:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   11c68:	2000      	movs	r0, #0
   11c6a:	e7e5      	b.n	11c38 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   11c6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   11c6e:	2900      	cmp	r1, #0
   11c70:	d0e8      	beq.n	11c44 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   11c72:	789e      	ldrb	r6, [r3, #2]
   11c74:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   11c76:	42b5      	cmp	r5, r6
   11c78:	d313      	bcc.n	11ca2 <dir_sdi+0x82>
   11c7a:	1bad      	subs	r5, r5, r6
   11c7c:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   11c7e:	4f10      	ldr	r7, [pc, #64]	; (11cc0 <dir_sdi+0xa0>)
   11c80:	e000      	b.n	11c84 <dir_sdi+0x64>
   11c82:	001d      	movs	r5, r3
   11c84:	6820      	ldr	r0, [r4, #0]
   11c86:	47b8      	blx	r7
   11c88:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   11c8a:	1c43      	adds	r3, r0, #1
   11c8c:	d012      	beq.n	11cb4 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   11c8e:	2801      	cmp	r0, #1
   11c90:	d912      	bls.n	11cb8 <dir_sdi+0x98>
   11c92:	6823      	ldr	r3, [r4, #0]
   11c94:	699b      	ldr	r3, [r3, #24]
   11c96:	4298      	cmp	r0, r3
   11c98:	d210      	bcs.n	11cbc <dir_sdi+0x9c>
   11c9a:	1bab      	subs	r3, r5, r6
   11c9c:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   11c9e:	42b5      	cmp	r5, r6
   11ca0:	d2ef      	bcs.n	11c82 <dir_sdi+0x62>
		dj->clust = clst;
   11ca2:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   11ca4:	6820      	ldr	r0, [r4, #0]
   11ca6:	4b07      	ldr	r3, [pc, #28]	; (11cc4 <dir_sdi+0xa4>)
   11ca8:	4798      	blx	r3
   11caa:	092b      	lsrs	r3, r5, #4
   11cac:	b29b      	uxth	r3, r3
   11cae:	1818      	adds	r0, r3, r0
   11cb0:	6120      	str	r0, [r4, #16]
   11cb2:	e7d2      	b.n	11c5a <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   11cb4:	2001      	movs	r0, #1
   11cb6:	e7bf      	b.n	11c38 <dir_sdi+0x18>
				return FR_INT_ERR;
   11cb8:	2002      	movs	r0, #2
   11cba:	e7bd      	b.n	11c38 <dir_sdi+0x18>
   11cbc:	2002      	movs	r0, #2
   11cbe:	e7bb      	b.n	11c38 <dir_sdi+0x18>
   11cc0:	00011b25 	.word	0x00011b25
   11cc4:	000115cb 	.word	0x000115cb

00011cc8 <put_fat>:
{
   11cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cca:	46c6      	mov	lr, r8
   11ccc:	b500      	push	{lr}
   11cce:	0007      	movs	r7, r0
   11cd0:	000c      	movs	r4, r1
   11cd2:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   11cd4:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   11cd6:	2901      	cmp	r1, #1
   11cd8:	d902      	bls.n	11ce0 <put_fat+0x18>
   11cda:	6983      	ldr	r3, [r0, #24]
   11cdc:	4299      	cmp	r1, r3
   11cde:	d303      	bcc.n	11ce8 <put_fat+0x20>
}
   11ce0:	0028      	movs	r0, r5
   11ce2:	bc04      	pop	{r2}
   11ce4:	4690      	mov	r8, r2
   11ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   11ce8:	7803      	ldrb	r3, [r0, #0]
   11cea:	2b02      	cmp	r3, #2
   11cec:	d053      	beq.n	11d96 <put_fat+0xce>
   11cee:	2b03      	cmp	r3, #3
   11cf0:	d063      	beq.n	11dba <put_fat+0xf2>
			res = FR_INT_ERR;
   11cf2:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   11cf4:	2b01      	cmp	r3, #1
   11cf6:	d002      	beq.n	11cfe <put_fat+0x36>
		fs->wflag = 1;
   11cf8:	2301      	movs	r3, #1
   11cfa:	713b      	strb	r3, [r7, #4]
   11cfc:	e7f0      	b.n	11ce0 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   11cfe:	084b      	lsrs	r3, r1, #1
   11d00:	4698      	mov	r8, r3
   11d02:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   11d04:	4643      	mov	r3, r8
   11d06:	0a59      	lsrs	r1, r3, #9
   11d08:	6a03      	ldr	r3, [r0, #32]
   11d0a:	469c      	mov	ip, r3
   11d0c:	4461      	add	r1, ip
   11d0e:	4b3b      	ldr	r3, [pc, #236]	; (11dfc <put_fat+0x134>)
   11d10:	4798      	blx	r3
   11d12:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   11d14:	d1f0      	bne.n	11cf8 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   11d16:	4643      	mov	r3, r8
   11d18:	05db      	lsls	r3, r3, #23
   11d1a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   11d1c:	07e2      	lsls	r2, r4, #31
   11d1e:	d51f      	bpl.n	11d60 <put_fat+0x98>
   11d20:	18fb      	adds	r3, r7, r3
   11d22:	3330      	adds	r3, #48	; 0x30
   11d24:	7819      	ldrb	r1, [r3, #0]
   11d26:	220f      	movs	r2, #15
   11d28:	400a      	ands	r2, r1
   11d2a:	0131      	lsls	r1, r6, #4
   11d2c:	20ff      	movs	r0, #255	; 0xff
   11d2e:	0100      	lsls	r0, r0, #4
   11d30:	4001      	ands	r1, r0
   11d32:	430a      	orrs	r2, r1
   11d34:	701a      	strb	r2, [r3, #0]
			bc++;
   11d36:	4644      	mov	r4, r8
   11d38:	3401      	adds	r4, #1
			fs->wflag = 1;
   11d3a:	2301      	movs	r3, #1
   11d3c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   11d3e:	0a61      	lsrs	r1, r4, #9
   11d40:	6a3b      	ldr	r3, [r7, #32]
   11d42:	469c      	mov	ip, r3
   11d44:	4461      	add	r1, ip
   11d46:	0038      	movs	r0, r7
   11d48:	4b2c      	ldr	r3, [pc, #176]	; (11dfc <put_fat+0x134>)
   11d4a:	4798      	blx	r3
			if (res != FR_OK) break;
   11d4c:	2800      	cmp	r0, #0
   11d4e:	d151      	bne.n	11df4 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   11d50:	05e4      	lsls	r4, r4, #23
   11d52:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   11d54:	0936      	lsrs	r6, r6, #4
   11d56:	b2f6      	uxtb	r6, r6
   11d58:	193c      	adds	r4, r7, r4
   11d5a:	3430      	adds	r4, #48	; 0x30
   11d5c:	7026      	strb	r6, [r4, #0]
			break;
   11d5e:	e7cb      	b.n	11cf8 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   11d60:	18fb      	adds	r3, r7, r3
   11d62:	3330      	adds	r3, #48	; 0x30
   11d64:	701e      	strb	r6, [r3, #0]
			bc++;
   11d66:	4644      	mov	r4, r8
   11d68:	3401      	adds	r4, #1
			fs->wflag = 1;
   11d6a:	2301      	movs	r3, #1
   11d6c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   11d6e:	0a61      	lsrs	r1, r4, #9
   11d70:	6a3b      	ldr	r3, [r7, #32]
   11d72:	469c      	mov	ip, r3
   11d74:	4461      	add	r1, ip
   11d76:	0038      	movs	r0, r7
   11d78:	4b20      	ldr	r3, [pc, #128]	; (11dfc <put_fat+0x134>)
   11d7a:	4798      	blx	r3
			if (res != FR_OK) break;
   11d7c:	2800      	cmp	r0, #0
   11d7e:	d13b      	bne.n	11df8 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   11d80:	05e4      	lsls	r4, r4, #23
   11d82:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   11d84:	193b      	adds	r3, r7, r4
   11d86:	3330      	adds	r3, #48	; 0x30
   11d88:	781b      	ldrb	r3, [r3, #0]
   11d8a:	220f      	movs	r2, #15
   11d8c:	4393      	bics	r3, r2
   11d8e:	0536      	lsls	r6, r6, #20
   11d90:	0f36      	lsrs	r6, r6, #28
   11d92:	431e      	orrs	r6, r3
   11d94:	e7e0      	b.n	11d58 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   11d96:	0a09      	lsrs	r1, r1, #8
   11d98:	6a03      	ldr	r3, [r0, #32]
   11d9a:	469c      	mov	ip, r3
   11d9c:	4461      	add	r1, ip
   11d9e:	4b17      	ldr	r3, [pc, #92]	; (11dfc <put_fat+0x134>)
   11da0:	4798      	blx	r3
   11da2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   11da4:	d1a8      	bne.n	11cf8 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   11da6:	0063      	lsls	r3, r4, #1
   11da8:	24ff      	movs	r4, #255	; 0xff
   11daa:	0064      	lsls	r4, r4, #1
   11dac:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   11dae:	18fb      	adds	r3, r7, r3
   11db0:	3330      	adds	r3, #48	; 0x30
   11db2:	701e      	strb	r6, [r3, #0]
   11db4:	0a36      	lsrs	r6, r6, #8
   11db6:	705e      	strb	r6, [r3, #1]
			break;
   11db8:	e79e      	b.n	11cf8 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   11dba:	09c9      	lsrs	r1, r1, #7
   11dbc:	6a03      	ldr	r3, [r0, #32]
   11dbe:	469c      	mov	ip, r3
   11dc0:	4461      	add	r1, ip
   11dc2:	4b0e      	ldr	r3, [pc, #56]	; (11dfc <put_fat+0x134>)
   11dc4:	4798      	blx	r3
   11dc6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   11dc8:	d196      	bne.n	11cf8 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   11dca:	00a4      	lsls	r4, r4, #2
   11dcc:	23fe      	movs	r3, #254	; 0xfe
   11dce:	005b      	lsls	r3, r3, #1
   11dd0:	401c      	ands	r4, r3
   11dd2:	0022      	movs	r2, r4
   11dd4:	3230      	adds	r2, #48	; 0x30
   11dd6:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   11dd8:	78d3      	ldrb	r3, [r2, #3]
   11dda:	193c      	adds	r4, r7, r4
   11ddc:	3430      	adds	r4, #48	; 0x30
   11dde:	091b      	lsrs	r3, r3, #4
   11de0:	071b      	lsls	r3, r3, #28
   11de2:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   11de4:	7026      	strb	r6, [r4, #0]
   11de6:	0a33      	lsrs	r3, r6, #8
   11de8:	7053      	strb	r3, [r2, #1]
   11dea:	0c33      	lsrs	r3, r6, #16
   11dec:	7093      	strb	r3, [r2, #2]
   11dee:	0e36      	lsrs	r6, r6, #24
   11df0:	70d6      	strb	r6, [r2, #3]
			break;
   11df2:	e781      	b.n	11cf8 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   11df4:	0005      	movs	r5, r0
   11df6:	e77f      	b.n	11cf8 <put_fat+0x30>
   11df8:	0005      	movs	r5, r0
   11dfa:	e77d      	b.n	11cf8 <put_fat+0x30>
   11dfc:	00011a85 	.word	0x00011a85

00011e00 <create_chain>:
{
   11e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e02:	46c6      	mov	lr, r8
   11e04:	b500      	push	{lr}
   11e06:	0005      	movs	r5, r0
   11e08:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   11e0a:	2900      	cmp	r1, #0
   11e0c:	d107      	bne.n	11e1e <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   11e0e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   11e10:	2e00      	cmp	r6, #0
   11e12:	d00d      	beq.n	11e30 <create_chain+0x30>
   11e14:	6983      	ldr	r3, [r0, #24]
   11e16:	429e      	cmp	r6, r3
   11e18:	d30b      	bcc.n	11e32 <create_chain+0x32>
   11e1a:	2601      	movs	r6, #1
   11e1c:	e009      	b.n	11e32 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   11e1e:	4b26      	ldr	r3, [pc, #152]	; (11eb8 <create_chain+0xb8>)
   11e20:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   11e22:	2801      	cmp	r0, #1
   11e24:	d93d      	bls.n	11ea2 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   11e26:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   11e28:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   11e2a:	4298      	cmp	r0, r3
   11e2c:	d201      	bcs.n	11e32 <create_chain+0x32>
   11e2e:	e03d      	b.n	11eac <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   11e30:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   11e32:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   11e34:	4f20      	ldr	r7, [pc, #128]	; (11eb8 <create_chain+0xb8>)
   11e36:	e00a      	b.n	11e4e <create_chain+0x4e>
   11e38:	0021      	movs	r1, r4
   11e3a:	0028      	movs	r0, r5
   11e3c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   11e3e:	2800      	cmp	r0, #0
   11e40:	d00d      	beq.n	11e5e <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   11e42:	1c43      	adds	r3, r0, #1
   11e44:	d032      	beq.n	11eac <create_chain+0xac>
   11e46:	2801      	cmp	r0, #1
   11e48:	d030      	beq.n	11eac <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   11e4a:	42b4      	cmp	r4, r6
   11e4c:	d02d      	beq.n	11eaa <create_chain+0xaa>
		ncl++;							/* Next cluster */
   11e4e:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   11e50:	69ab      	ldr	r3, [r5, #24]
   11e52:	429c      	cmp	r4, r3
   11e54:	d3f0      	bcc.n	11e38 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   11e56:	2e01      	cmp	r6, #1
   11e58:	d925      	bls.n	11ea6 <create_chain+0xa6>
			ncl = 2;
   11e5a:	2402      	movs	r4, #2
   11e5c:	e7ec      	b.n	11e38 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   11e5e:	4a17      	ldr	r2, [pc, #92]	; (11ebc <create_chain+0xbc>)
   11e60:	0021      	movs	r1, r4
   11e62:	0028      	movs	r0, r5
   11e64:	4b16      	ldr	r3, [pc, #88]	; (11ec0 <create_chain+0xc0>)
   11e66:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   11e68:	2800      	cmp	r0, #0
   11e6a:	d113      	bne.n	11e94 <create_chain+0x94>
   11e6c:	4643      	mov	r3, r8
   11e6e:	2b00      	cmp	r3, #0
   11e70:	d109      	bne.n	11e86 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   11e72:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   11e74:	692b      	ldr	r3, [r5, #16]
   11e76:	1c5a      	adds	r2, r3, #1
   11e78:	d01b      	beq.n	11eb2 <create_chain+0xb2>
			fs->free_clust--;
   11e7a:	3b01      	subs	r3, #1
   11e7c:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   11e7e:	2301      	movs	r3, #1
   11e80:	716b      	strb	r3, [r5, #5]
   11e82:	0020      	movs	r0, r4
   11e84:	e012      	b.n	11eac <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   11e86:	0022      	movs	r2, r4
   11e88:	4641      	mov	r1, r8
   11e8a:	0028      	movs	r0, r5
   11e8c:	4b0c      	ldr	r3, [pc, #48]	; (11ec0 <create_chain+0xc0>)
   11e8e:	4798      	blx	r3
	if (res == FR_OK) {
   11e90:	2800      	cmp	r0, #0
   11e92:	d0ee      	beq.n	11e72 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   11e94:	3801      	subs	r0, #1
   11e96:	4242      	negs	r2, r0
   11e98:	4142      	adcs	r2, r0
   11e9a:	4250      	negs	r0, r2
   11e9c:	2301      	movs	r3, #1
   11e9e:	4318      	orrs	r0, r3
   11ea0:	e004      	b.n	11eac <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   11ea2:	2001      	movs	r0, #1
   11ea4:	e002      	b.n	11eac <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   11ea6:	2000      	movs	r0, #0
   11ea8:	e000      	b.n	11eac <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   11eaa:	2000      	movs	r0, #0
}
   11eac:	bc04      	pop	{r2}
   11eae:	4690      	mov	r8, r2
   11eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11eb2:	0020      	movs	r0, r4
   11eb4:	e7fa      	b.n	11eac <create_chain+0xac>
   11eb6:	46c0      	nop			; (mov r8, r8)
   11eb8:	00011b25 	.word	0x00011b25
   11ebc:	0fffffff 	.word	0x0fffffff
   11ec0:	00011cc9 	.word	0x00011cc9

00011ec4 <remove_chain>:
{
   11ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ec6:	46ce      	mov	lr, r9
   11ec8:	4647      	mov	r7, r8
   11eca:	b580      	push	{r7, lr}
   11ecc:	0004      	movs	r4, r0
   11ece:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   11ed0:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   11ed2:	2901      	cmp	r1, #1
   11ed4:	d902      	bls.n	11edc <remove_chain+0x18>
   11ed6:	69a3      	ldr	r3, [r4, #24]
   11ed8:	4299      	cmp	r1, r3
   11eda:	d303      	bcc.n	11ee4 <remove_chain+0x20>
}
   11edc:	bc0c      	pop	{r2, r3}
   11ede:	4690      	mov	r8, r2
   11ee0:	4699      	mov	r9, r3
   11ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   11ee4:	4f13      	ldr	r7, [pc, #76]	; (11f34 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   11ee6:	4b14      	ldr	r3, [pc, #80]	; (11f38 <remove_chain+0x74>)
   11ee8:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   11eea:	2301      	movs	r3, #1
   11eec:	4699      	mov	r9, r3
   11eee:	e003      	b.n	11ef8 <remove_chain+0x34>
   11ef0:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   11ef2:	69a3      	ldr	r3, [r4, #24]
   11ef4:	42b3      	cmp	r3, r6
   11ef6:	d9f1      	bls.n	11edc <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   11ef8:	0029      	movs	r1, r5
   11efa:	0020      	movs	r0, r4
   11efc:	47b8      	blx	r7
   11efe:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   11f00:	d011      	beq.n	11f26 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   11f02:	2801      	cmp	r0, #1
   11f04:	d011      	beq.n	11f2a <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   11f06:	1c43      	adds	r3, r0, #1
   11f08:	d011      	beq.n	11f2e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   11f0a:	2200      	movs	r2, #0
   11f0c:	0029      	movs	r1, r5
   11f0e:	0020      	movs	r0, r4
   11f10:	47c0      	blx	r8
			if (res != FR_OK) break;
   11f12:	2800      	cmp	r0, #0
   11f14:	d1e2      	bne.n	11edc <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   11f16:	6923      	ldr	r3, [r4, #16]
   11f18:	1c5a      	adds	r2, r3, #1
   11f1a:	d0e9      	beq.n	11ef0 <remove_chain+0x2c>
				fs->free_clust++;
   11f1c:	3301      	adds	r3, #1
   11f1e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   11f20:	464b      	mov	r3, r9
   11f22:	7163      	strb	r3, [r4, #5]
   11f24:	e7e4      	b.n	11ef0 <remove_chain+0x2c>
   11f26:	2000      	movs	r0, #0
   11f28:	e7d8      	b.n	11edc <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   11f2a:	2002      	movs	r0, #2
   11f2c:	e7d6      	b.n	11edc <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   11f2e:	2001      	movs	r0, #1
   11f30:	e7d4      	b.n	11edc <remove_chain+0x18>
   11f32:	46c0      	nop			; (mov r8, r8)
   11f34:	00011b25 	.word	0x00011b25
   11f38:	00011cc9 	.word	0x00011cc9

00011f3c <dir_next>:
{
   11f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f3e:	46d6      	mov	lr, sl
   11f40:	4647      	mov	r7, r8
   11f42:	b580      	push	{r7, lr}
   11f44:	0006      	movs	r6, r0
   11f46:	000d      	movs	r5, r1
	i = dj->index + 1;
   11f48:	88c4      	ldrh	r4, [r0, #6]
   11f4a:	3401      	adds	r4, #1
   11f4c:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   11f4e:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   11f50:	2c00      	cmp	r4, #0
   11f52:	d103      	bne.n	11f5c <dir_next+0x20>
}
   11f54:	bc0c      	pop	{r2, r3}
   11f56:	4690      	mov	r8, r2
   11f58:	469a      	mov	sl, r3
   11f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   11f5c:	6933      	ldr	r3, [r6, #16]
   11f5e:	2b00      	cmp	r3, #0
   11f60:	d0f8      	beq.n	11f54 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   11f62:	270f      	movs	r7, #15
   11f64:	4027      	ands	r7, r4
   11f66:	d10f      	bne.n	11f88 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   11f68:	3301      	adds	r3, #1
   11f6a:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   11f6c:	68f1      	ldr	r1, [r6, #12]
   11f6e:	2900      	cmp	r1, #0
   11f70:	d104      	bne.n	11f7c <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   11f72:	6833      	ldr	r3, [r6, #0]
   11f74:	891b      	ldrh	r3, [r3, #8]
   11f76:	42a3      	cmp	r3, r4
   11f78:	d9ec      	bls.n	11f54 <dir_next+0x18>
   11f7a:	e005      	b.n	11f88 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   11f7c:	6830      	ldr	r0, [r6, #0]
   11f7e:	7883      	ldrb	r3, [r0, #2]
   11f80:	3b01      	subs	r3, #1
   11f82:	0922      	lsrs	r2, r4, #4
   11f84:	421a      	tst	r2, r3
   11f86:	d007      	beq.n	11f98 <dir_next+0x5c>
	dj->index = i;
   11f88:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   11f8a:	6833      	ldr	r3, [r6, #0]
   11f8c:	3330      	adds	r3, #48	; 0x30
   11f8e:	017f      	lsls	r7, r7, #5
   11f90:	19df      	adds	r7, r3, r7
   11f92:	6177      	str	r7, [r6, #20]
	return FR_OK;
   11f94:	2000      	movs	r0, #0
   11f96:	e7dd      	b.n	11f54 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   11f98:	4b2c      	ldr	r3, [pc, #176]	; (1204c <dir_next+0x110>)
   11f9a:	4798      	blx	r3
   11f9c:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   11f9e:	2002      	movs	r0, #2
   11fa0:	4643      	mov	r3, r8
   11fa2:	2b01      	cmp	r3, #1
   11fa4:	d9d6      	bls.n	11f54 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   11fa6:	3301      	adds	r3, #1
   11fa8:	d04b      	beq.n	12042 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   11faa:	6833      	ldr	r3, [r6, #0]
   11fac:	699a      	ldr	r2, [r3, #24]
   11fae:	4590      	cmp	r8, r2
   11fb0:	d33f      	bcc.n	12032 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   11fb2:	3002      	adds	r0, #2
   11fb4:	2d00      	cmp	r5, #0
   11fb6:	d0cd      	beq.n	11f54 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   11fb8:	68f1      	ldr	r1, [r6, #12]
   11fba:	0018      	movs	r0, r3
   11fbc:	4b24      	ldr	r3, [pc, #144]	; (12050 <dir_next+0x114>)
   11fbe:	4798      	blx	r3
   11fc0:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   11fc2:	2007      	movs	r0, #7
   11fc4:	4643      	mov	r3, r8
   11fc6:	2b00      	cmp	r3, #0
   11fc8:	d0c4      	beq.n	11f54 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   11fca:	3805      	subs	r0, #5
   11fcc:	2b01      	cmp	r3, #1
   11fce:	d0c1      	beq.n	11f54 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   11fd0:	3801      	subs	r0, #1
   11fd2:	3301      	adds	r3, #1
   11fd4:	d0be      	beq.n	11f54 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   11fd6:	2100      	movs	r1, #0
   11fd8:	6830      	ldr	r0, [r6, #0]
   11fda:	4b1e      	ldr	r3, [pc, #120]	; (12054 <dir_next+0x118>)
   11fdc:	4798      	blx	r3
   11fde:	0003      	movs	r3, r0
   11fe0:	2001      	movs	r0, #1
   11fe2:	2b00      	cmp	r3, #0
   11fe4:	d1b6      	bne.n	11f54 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   11fe6:	6830      	ldr	r0, [r6, #0]
   11fe8:	3030      	adds	r0, #48	; 0x30
   11fea:	2280      	movs	r2, #128	; 0x80
   11fec:	0092      	lsls	r2, r2, #2
   11fee:	2100      	movs	r1, #0
   11ff0:	4b19      	ldr	r3, [pc, #100]	; (12058 <dir_next+0x11c>)
   11ff2:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   11ff4:	6835      	ldr	r5, [r6, #0]
   11ff6:	4641      	mov	r1, r8
   11ff8:	0028      	movs	r0, r5
   11ffa:	4b18      	ldr	r3, [pc, #96]	; (1205c <dir_next+0x120>)
   11ffc:	4798      	blx	r3
   11ffe:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12000:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   12002:	2301      	movs	r3, #1
   12004:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12006:	6833      	ldr	r3, [r6, #0]
   12008:	789a      	ldrb	r2, [r3, #2]
   1200a:	42aa      	cmp	r2, r5
   1200c:	d90e      	bls.n	1202c <dir_next+0xf0>
						dj->fs->wflag = 1;
   1200e:	4652      	mov	r2, sl
   12010:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12012:	2100      	movs	r1, #0
   12014:	6830      	ldr	r0, [r6, #0]
   12016:	4b0f      	ldr	r3, [pc, #60]	; (12054 <dir_next+0x118>)
   12018:	4798      	blx	r3
   1201a:	2800      	cmp	r0, #0
   1201c:	d113      	bne.n	12046 <dir_next+0x10a>
						dj->fs->winsect++;
   1201e:	6832      	ldr	r2, [r6, #0]
   12020:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   12022:	3301      	adds	r3, #1
   12024:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   12026:	3501      	adds	r5, #1
   12028:	b2ed      	uxtb	r5, r5
   1202a:	e7ec      	b.n	12006 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   1202c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1202e:	1b52      	subs	r2, r2, r5
   12030:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   12032:	4643      	mov	r3, r8
   12034:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   12036:	4641      	mov	r1, r8
   12038:	6830      	ldr	r0, [r6, #0]
   1203a:	4b08      	ldr	r3, [pc, #32]	; (1205c <dir_next+0x120>)
   1203c:	4798      	blx	r3
   1203e:	6130      	str	r0, [r6, #16]
   12040:	e7a2      	b.n	11f88 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   12042:	2001      	movs	r0, #1
   12044:	e786      	b.n	11f54 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   12046:	2001      	movs	r0, #1
   12048:	e784      	b.n	11f54 <dir_next+0x18>
   1204a:	46c0      	nop			; (mov r8, r8)
   1204c:	00011b25 	.word	0x00011b25
   12050:	00011e01 	.word	0x00011e01
   12054:	00011a85 	.word	0x00011a85
   12058:	000115b9 	.word	0x000115b9
   1205c:	000115cb 	.word	0x000115cb

00012060 <dir_find>:
{
   12060:	b5f0      	push	{r4, r5, r6, r7, lr}
   12062:	46de      	mov	lr, fp
   12064:	4657      	mov	r7, sl
   12066:	464e      	mov	r6, r9
   12068:	4645      	mov	r5, r8
   1206a:	b5e0      	push	{r5, r6, r7, lr}
   1206c:	b083      	sub	sp, #12
   1206e:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   12070:	2100      	movs	r1, #0
   12072:	4b5a      	ldr	r3, [pc, #360]	; (121dc <dir_find+0x17c>)
   12074:	4798      	blx	r3
   12076:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   12078:	d000      	beq.n	1207c <dir_find+0x1c>
   1207a:	e09e      	b.n	121ba <dir_find+0x15a>
   1207c:	23ff      	movs	r3, #255	; 0xff
   1207e:	4699      	mov	r9, r3
   12080:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   12082:	4b57      	ldr	r3, [pc, #348]	; (121e0 <dir_find+0x180>)
   12084:	469b      	mov	fp, r3
   12086:	e01b      	b.n	120c0 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   12088:	2b0f      	cmp	r3, #15
   1208a:	d030      	beq.n	120ee <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1208c:	4653      	mov	r3, sl
   1208e:	2b00      	cmp	r3, #0
   12090:	d105      	bne.n	1209e <dir_find+0x3e>
   12092:	0020      	movs	r0, r4
   12094:	4b53      	ldr	r3, [pc, #332]	; (121e4 <dir_find+0x184>)
   12096:	4798      	blx	r3
   12098:	4581      	cmp	r9, r0
   1209a:	d100      	bne.n	1209e <dir_find+0x3e>
   1209c:	e08d      	b.n	121ba <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1209e:	2301      	movs	r3, #1
   120a0:	425b      	negs	r3, r3
   120a2:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   120a4:	69a8      	ldr	r0, [r5, #24]
   120a6:	7ac3      	ldrb	r3, [r0, #11]
   120a8:	07db      	lsls	r3, r3, #31
   120aa:	d400      	bmi.n	120ae <dir_find+0x4e>
   120ac:	e07d      	b.n	121aa <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   120ae:	23ff      	movs	r3, #255	; 0xff
   120b0:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   120b2:	2100      	movs	r1, #0
   120b4:	0028      	movs	r0, r5
   120b6:	4b4c      	ldr	r3, [pc, #304]	; (121e8 <dir_find+0x188>)
   120b8:	4798      	blx	r3
   120ba:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   120bc:	d000      	beq.n	120c0 <dir_find+0x60>
   120be:	e07c      	b.n	121ba <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   120c0:	6929      	ldr	r1, [r5, #16]
   120c2:	6828      	ldr	r0, [r5, #0]
   120c4:	47d8      	blx	fp
   120c6:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   120c8:	d177      	bne.n	121ba <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   120ca:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   120cc:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   120ce:	2e00      	cmp	r6, #0
   120d0:	d100      	bne.n	120d4 <dir_find+0x74>
   120d2:	e080      	b.n	121d6 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   120d4:	7ae2      	ldrb	r2, [r4, #11]
   120d6:	233f      	movs	r3, #63	; 0x3f
   120d8:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   120da:	2ee5      	cmp	r6, #229	; 0xe5
   120dc:	d100      	bne.n	120e0 <dir_find+0x80>
   120de:	e077      	b.n	121d0 <dir_find+0x170>
   120e0:	0712      	lsls	r2, r2, #28
   120e2:	d5d1      	bpl.n	12088 <dir_find+0x28>
   120e4:	2b0f      	cmp	r3, #15
   120e6:	d002      	beq.n	120ee <dir_find+0x8e>
			ord = 0xFF;
   120e8:	23ff      	movs	r3, #255	; 0xff
   120ea:	469a      	mov	sl, r3
   120ec:	e7e1      	b.n	120b2 <dir_find+0x52>
				if (dj->lfn) {
   120ee:	69ef      	ldr	r7, [r5, #28]
   120f0:	2f00      	cmp	r7, #0
   120f2:	d0de      	beq.n	120b2 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   120f4:	0673      	lsls	r3, r6, #25
   120f6:	d518      	bpl.n	1212a <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   120f8:	7b63      	ldrb	r3, [r4, #13]
   120fa:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   120fc:	2340      	movs	r3, #64	; 0x40
   120fe:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   12100:	88eb      	ldrh	r3, [r5, #6]
   12102:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12104:	7b63      	ldrb	r3, [r4, #13]
   12106:	9300      	str	r3, [sp, #0]
   12108:	22ff      	movs	r2, #255	; 0xff
   1210a:	4692      	mov	sl, r2
   1210c:	454b      	cmp	r3, r9
   1210e:	d1d0      	bne.n	120b2 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   12110:	7823      	ldrb	r3, [r4, #0]
   12112:	3abf      	subs	r2, #191	; 0xbf
   12114:	4393      	bics	r3, r2
   12116:	3b01      	subs	r3, #1
   12118:	005a      	lsls	r2, r3, #1
   1211a:	18d2      	adds	r2, r2, r3
   1211c:	0092      	lsls	r2, r2, #2
   1211e:	4692      	mov	sl, r2
   12120:	449a      	add	sl, r3
	s = 0; wc = 1;
   12122:	2201      	movs	r2, #1
   12124:	2300      	movs	r3, #0
   12126:	4699      	mov	r9, r3
   12128:	e01d      	b.n	12166 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1212a:	45b2      	cmp	sl, r6
   1212c:	d0ea      	beq.n	12104 <dir_find+0xa4>
   1212e:	23ff      	movs	r3, #255	; 0xff
   12130:	469a      	mov	sl, r3
   12132:	e7be      	b.n	120b2 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   12134:	4b2d      	ldr	r3, [pc, #180]	; (121ec <dir_find+0x18c>)
   12136:	4798      	blx	r3
   12138:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   1213a:	4653      	mov	r3, sl
   1213c:	2bfe      	cmp	r3, #254	; 0xfe
   1213e:	d81f      	bhi.n	12180 <dir_find+0x120>
   12140:	2301      	movs	r3, #1
   12142:	4453      	add	r3, sl
   12144:	4698      	mov	r8, r3
   12146:	4653      	mov	r3, sl
   12148:	005b      	lsls	r3, r3, #1
   1214a:	5bd8      	ldrh	r0, [r3, r7]
   1214c:	4b27      	ldr	r3, [pc, #156]	; (121ec <dir_find+0x18c>)
   1214e:	4798      	blx	r3
   12150:	0002      	movs	r2, r0
   12152:	9b01      	ldr	r3, [sp, #4]
   12154:	4283      	cmp	r3, r0
   12156:	d113      	bne.n	12180 <dir_find+0x120>
   12158:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   1215a:	2301      	movs	r3, #1
   1215c:	469c      	mov	ip, r3
   1215e:	44e1      	add	r9, ip
   12160:	464b      	mov	r3, r9
   12162:	2b0d      	cmp	r3, #13
   12164:	d011      	beq.n	1218a <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   12166:	4b22      	ldr	r3, [pc, #136]	; (121f0 <dir_find+0x190>)
   12168:	4649      	mov	r1, r9
   1216a:	5cc9      	ldrb	r1, [r1, r3]
   1216c:	1863      	adds	r3, r4, r1
   1216e:	785b      	ldrb	r3, [r3, #1]
   12170:	021b      	lsls	r3, r3, #8
   12172:	5c60      	ldrb	r0, [r4, r1]
   12174:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   12176:	2a00      	cmp	r2, #0
   12178:	d1dc      	bne.n	12134 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   1217a:	4b1e      	ldr	r3, [pc, #120]	; (121f4 <dir_find+0x194>)
   1217c:	4298      	cmp	r0, r3
   1217e:	d0ec      	beq.n	1215a <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   12180:	9b00      	ldr	r3, [sp, #0]
   12182:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12184:	23ff      	movs	r3, #255	; 0xff
   12186:	469a      	mov	sl, r3
   12188:	e793      	b.n	120b2 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   1218a:	7823      	ldrb	r3, [r4, #0]
   1218c:	065b      	lsls	r3, r3, #25
   1218e:	d506      	bpl.n	1219e <dir_find+0x13e>
   12190:	2a00      	cmp	r2, #0
   12192:	d004      	beq.n	1219e <dir_find+0x13e>
   12194:	4653      	mov	r3, sl
   12196:	005b      	lsls	r3, r3, #1
   12198:	5bdb      	ldrh	r3, [r3, r7]
   1219a:	2b00      	cmp	r3, #0
   1219c:	d1f0      	bne.n	12180 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1219e:	3e01      	subs	r6, #1
   121a0:	b2f3      	uxtb	r3, r6
   121a2:	469a      	mov	sl, r3
   121a4:	9b00      	ldr	r3, [sp, #0]
   121a6:	4699      	mov	r9, r3
   121a8:	e783      	b.n	120b2 <dir_find+0x52>
   121aa:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   121ac:	5ce1      	ldrb	r1, [r4, r3]
   121ae:	5cc2      	ldrb	r2, [r0, r3]
   121b0:	4291      	cmp	r1, r2
   121b2:	d10a      	bne.n	121ca <dir_find+0x16a>
   121b4:	3301      	adds	r3, #1
   121b6:	2b0b      	cmp	r3, #11
   121b8:	d1f8      	bne.n	121ac <dir_find+0x14c>
}
   121ba:	0038      	movs	r0, r7
   121bc:	b003      	add	sp, #12
   121be:	bc3c      	pop	{r2, r3, r4, r5}
   121c0:	4690      	mov	r8, r2
   121c2:	4699      	mov	r9, r3
   121c4:	46a2      	mov	sl, r4
   121c6:	46ab      	mov	fp, r5
   121c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   121ca:	23ff      	movs	r3, #255	; 0xff
   121cc:	469a      	mov	sl, r3
   121ce:	e770      	b.n	120b2 <dir_find+0x52>
			ord = 0xFF;
   121d0:	23ff      	movs	r3, #255	; 0xff
   121d2:	469a      	mov	sl, r3
   121d4:	e76d      	b.n	120b2 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   121d6:	2704      	movs	r7, #4
   121d8:	e7ef      	b.n	121ba <dir_find+0x15a>
   121da:	46c0      	nop			; (mov r8, r8)
   121dc:	00011c21 	.word	0x00011c21
   121e0:	00011a85 	.word	0x00011a85
   121e4:	000115e3 	.word	0x000115e3
   121e8:	00011f3d 	.word	0x00011f3d
   121ec:	00013279 	.word	0x00013279
   121f0:	0001c474 	.word	0x0001c474
   121f4:	0000ffff 	.word	0x0000ffff

000121f8 <dir_register>:
{
   121f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   121fa:	46de      	mov	lr, fp
   121fc:	4657      	mov	r7, sl
   121fe:	464e      	mov	r6, r9
   12200:	4645      	mov	r5, r8
   12202:	b5e0      	push	{r5, r6, r7, lr}
   12204:	b089      	sub	sp, #36	; 0x24
   12206:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   12208:	6987      	ldr	r7, [r0, #24]
   1220a:	69c3      	ldr	r3, [r0, #28]
   1220c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   1220e:	ad05      	add	r5, sp, #20
   12210:	220c      	movs	r2, #12
   12212:	0039      	movs	r1, r7
   12214:	0028      	movs	r0, r5
   12216:	4ba7      	ldr	r3, [pc, #668]	; (124b4 <dir_register+0x2bc>)
   12218:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   1221a:	7aeb      	ldrb	r3, [r5, #11]
   1221c:	07db      	lsls	r3, r3, #31
   1221e:	d400      	bmi.n	12222 <dir_register+0x2a>
   12220:	e070      	b.n	12304 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   12222:	2300      	movs	r3, #0
   12224:	72fb      	strb	r3, [r7, #11]
   12226:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   12228:	220b      	movs	r2, #11
   1222a:	a905      	add	r1, sp, #20
   1222c:	0038      	movs	r0, r7
   1222e:	4ba1      	ldr	r3, [pc, #644]	; (124b4 <dir_register+0x2bc>)
   12230:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   12232:	2301      	movs	r3, #1
		ns[i--] = c;
   12234:	ad03      	add	r5, sp, #12
   12236:	001e      	movs	r6, r3
   12238:	46a0      	mov	r8, r4
   1223a:	e049      	b.n	122d0 <dir_register+0xd8>
   1223c:	3801      	subs	r0, #1
   1223e:	1829      	adds	r1, r5, r0
   12240:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   12242:	091b      	lsrs	r3, r3, #4
   12244:	b29b      	uxth	r3, r3
	} while (seq);
   12246:	2b00      	cmp	r3, #0
   12248:	d007      	beq.n	1225a <dir_register+0x62>
		c = (seq % 16) + '0';
   1224a:	0021      	movs	r1, r4
   1224c:	4019      	ands	r1, r3
   1224e:	000a      	movs	r2, r1
   12250:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   12252:	2a39      	cmp	r2, #57	; 0x39
   12254:	d9f2      	bls.n	1223c <dir_register+0x44>
   12256:	3207      	adds	r2, #7
   12258:	e7f0      	b.n	1223c <dir_register+0x44>
	ns[i] = '~';
   1225a:	337e      	adds	r3, #126	; 0x7e
   1225c:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   1225e:	2800      	cmp	r0, #0
   12260:	d00a      	beq.n	12278 <dir_register+0x80>
   12262:	783b      	ldrb	r3, [r7, #0]
   12264:	2b20      	cmp	r3, #32
   12266:	d009      	beq.n	1227c <dir_register+0x84>
   12268:	2300      	movs	r3, #0
   1226a:	3301      	adds	r3, #1
   1226c:	4298      	cmp	r0, r3
   1226e:	d007      	beq.n	12280 <dir_register+0x88>
   12270:	5cfa      	ldrb	r2, [r7, r3]
   12272:	2a20      	cmp	r2, #32
   12274:	d1f9      	bne.n	1226a <dir_register+0x72>
   12276:	e009      	b.n	1228c <dir_register+0x94>
   12278:	0003      	movs	r3, r0
   1227a:	e007      	b.n	1228c <dir_register+0x94>
   1227c:	2300      	movs	r3, #0
   1227e:	e005      	b.n	1228c <dir_register+0x94>
   12280:	0003      	movs	r3, r0
   12282:	e003      	b.n	1228c <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   12284:	54fa      	strb	r2, [r7, r3]
   12286:	3301      	adds	r3, #1
	} while (j < 8);
   12288:	2b07      	cmp	r3, #7
   1228a:	d805      	bhi.n	12298 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1228c:	2220      	movs	r2, #32
   1228e:	2807      	cmp	r0, #7
   12290:	d8f8      	bhi.n	12284 <dir_register+0x8c>
   12292:	5c2a      	ldrb	r2, [r5, r0]
   12294:	3001      	adds	r0, #1
   12296:	e7f5      	b.n	12284 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   12298:	4640      	mov	r0, r8
   1229a:	4b87      	ldr	r3, [pc, #540]	; (124b8 <dir_register+0x2c0>)
   1229c:	4798      	blx	r3
			if (res != FR_OK) break;
   1229e:	2800      	cmp	r0, #0
   122a0:	d11c      	bne.n	122dc <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   122a2:	3601      	adds	r6, #1
   122a4:	b2b6      	uxth	r6, r6
   122a6:	2e64      	cmp	r6, #100	; 0x64
   122a8:	d015      	beq.n	122d6 <dir_register+0xde>
	mem_cpy(dst, src, 11);
   122aa:	220b      	movs	r2, #11
   122ac:	a905      	add	r1, sp, #20
   122ae:	0038      	movs	r0, r7
   122b0:	4b80      	ldr	r3, [pc, #512]	; (124b4 <dir_register+0x2bc>)
   122b2:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   122b4:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   122b6:	2e05      	cmp	r6, #5
   122b8:	d90a      	bls.n	122d0 <dir_register+0xd8>
   122ba:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   122bc:	085a      	lsrs	r2, r3, #1
   122be:	03db      	lsls	r3, r3, #15
   122c0:	4313      	orrs	r3, r2
   122c2:	880a      	ldrh	r2, [r1, #0]
   122c4:	189b      	adds	r3, r3, r2
   122c6:	b29b      	uxth	r3, r3
   122c8:	3102      	adds	r1, #2
   122ca:	880a      	ldrh	r2, [r1, #0]
   122cc:	2a00      	cmp	r2, #0
   122ce:	d1f5      	bne.n	122bc <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   122d0:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   122d2:	240f      	movs	r4, #15
   122d4:	e7b9      	b.n	1224a <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   122d6:	2307      	movs	r3, #7
   122d8:	4698      	mov	r8, r3
   122da:	e006      	b.n	122ea <dir_register+0xf2>
   122dc:	4644      	mov	r4, r8
   122de:	4680      	mov	r8, r0
   122e0:	2e64      	cmp	r6, #100	; 0x64
   122e2:	d100      	bne.n	122e6 <dir_register+0xee>
   122e4:	e0a5      	b.n	12432 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   122e6:	2804      	cmp	r0, #4
   122e8:	d007      	beq.n	122fa <dir_register+0x102>
}
   122ea:	4640      	mov	r0, r8
   122ec:	b009      	add	sp, #36	; 0x24
   122ee:	bc3c      	pop	{r2, r3, r4, r5}
   122f0:	4690      	mov	r8, r2
   122f2:	4699      	mov	r9, r3
   122f4:	46a2      	mov	sl, r4
   122f6:	46ab      	mov	fp, r5
   122f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   122fa:	ab05      	add	r3, sp, #20
   122fc:	7adb      	ldrb	r3, [r3, #11]
   122fe:	72fb      	strb	r3, [r7, #11]
   12300:	4653      	mov	r3, sl
   12302:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   12304:	ab05      	add	r3, sp, #20
   12306:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   12308:	2201      	movs	r2, #1
   1230a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   1230c:	079b      	lsls	r3, r3, #30
   1230e:	d511      	bpl.n	12334 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   12310:	4653      	mov	r3, sl
   12312:	881b      	ldrh	r3, [r3, #0]
   12314:	2b00      	cmp	r3, #0
   12316:	d01b      	beq.n	12350 <dir_register+0x158>
   12318:	2000      	movs	r0, #0
   1231a:	4652      	mov	r2, sl
   1231c:	3001      	adds	r0, #1
   1231e:	b280      	uxth	r0, r0
   12320:	0043      	lsls	r3, r0, #1
   12322:	5a9b      	ldrh	r3, [r3, r2]
   12324:	2b00      	cmp	r3, #0
   12326:	d1f9      	bne.n	1231c <dir_register+0x124>
		ne = (ne + 25) / 13;
   12328:	3019      	adds	r0, #25
   1232a:	210d      	movs	r1, #13
   1232c:	4b63      	ldr	r3, [pc, #396]	; (124bc <dir_register+0x2c4>)
   1232e:	4798      	blx	r3
   12330:	b283      	uxth	r3, r0
   12332:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   12334:	2100      	movs	r1, #0
   12336:	0020      	movs	r0, r4
   12338:	4b61      	ldr	r3, [pc, #388]	; (124c0 <dir_register+0x2c8>)
   1233a:	4798      	blx	r3
   1233c:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   1233e:	2800      	cmp	r0, #0
   12340:	d1d3      	bne.n	122ea <dir_register+0xf2>
   12342:	4682      	mov	sl, r0
   12344:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   12346:	4f5f      	ldr	r7, [pc, #380]	; (124c4 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   12348:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   1234a:	4b5f      	ldr	r3, [pc, #380]	; (124c8 <dir_register+0x2d0>)
   1234c:	4699      	mov	r9, r3
   1234e:	e00b      	b.n	12368 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   12350:	2000      	movs	r0, #0
   12352:	e7e9      	b.n	12328 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   12354:	1c6b      	adds	r3, r5, #1
   12356:	b29b      	uxth	r3, r3
   12358:	459b      	cmp	fp, r3
   1235a:	d06d      	beq.n	12438 <dir_register+0x240>
   1235c:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   1235e:	2101      	movs	r1, #1
   12360:	0020      	movs	r0, r4
   12362:	47c8      	blx	r9
	} while (res == FR_OK);
   12364:	2800      	cmp	r0, #0
   12366:	d112      	bne.n	1238e <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   12368:	6921      	ldr	r1, [r4, #16]
   1236a:	6820      	ldr	r0, [r4, #0]
   1236c:	47b8      	blx	r7
		if (res != FR_OK) break;
   1236e:	2800      	cmp	r0, #0
   12370:	d000      	beq.n	12374 <dir_register+0x17c>
   12372:	e098      	b.n	124a6 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   12374:	6963      	ldr	r3, [r4, #20]
   12376:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   12378:	2be5      	cmp	r3, #229	; 0xe5
   1237a:	d001      	beq.n	12380 <dir_register+0x188>
   1237c:	2b00      	cmp	r3, #0
   1237e:	d104      	bne.n	1238a <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   12380:	2d00      	cmp	r5, #0
   12382:	d1e7      	bne.n	12354 <dir_register+0x15c>
   12384:	88e3      	ldrh	r3, [r4, #6]
   12386:	469a      	mov	sl, r3
   12388:	e7e4      	b.n	12354 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   1238a:	0035      	movs	r5, r6
   1238c:	e7e7      	b.n	1235e <dir_register+0x166>
   1238e:	4680      	mov	r8, r0
   12390:	e7ab      	b.n	122ea <dir_register+0xf2>
		res = dir_sdi(dj, is);
   12392:	4651      	mov	r1, sl
   12394:	0020      	movs	r0, r4
   12396:	4b4a      	ldr	r3, [pc, #296]	; (124c0 <dir_register+0x2c8>)
   12398:	4798      	blx	r3
   1239a:	4680      	mov	r8, r0
		if (res == FR_OK) {
   1239c:	2800      	cmp	r0, #0
   1239e:	d1a4      	bne.n	122ea <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   123a0:	69a0      	ldr	r0, [r4, #24]
   123a2:	4b4a      	ldr	r3, [pc, #296]	; (124cc <dir_register+0x2d4>)
   123a4:	4798      	blx	r3
   123a6:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   123a8:	46a8      	mov	r8, r5
   123aa:	e01f      	b.n	123ec <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   123ac:	0022      	movs	r2, r4
   123ae:	e067      	b.n	12480 <dir_register+0x288>
   123b0:	465e      	mov	r6, fp
   123b2:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   123b4:	4946      	ldr	r1, [pc, #280]	; (124d0 <dir_register+0x2d8>)
   123b6:	428b      	cmp	r3, r1
   123b8:	d003      	beq.n	123c2 <dir_register+0x1ca>
   123ba:	0052      	lsls	r2, r2, #1
   123bc:	5b93      	ldrh	r3, [r2, r6]
   123be:	2b00      	cmp	r3, #0
   123c0:	d103      	bne.n	123ca <dir_register+0x1d2>
   123c2:	2340      	movs	r3, #64	; 0x40
   123c4:	464a      	mov	r2, r9
   123c6:	431a      	orrs	r2, r3
   123c8:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   123ca:	464b      	mov	r3, r9
   123cc:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   123ce:	2301      	movs	r3, #1
   123d0:	6822      	ldr	r2, [r4, #0]
   123d2:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   123d4:	2100      	movs	r1, #0
   123d6:	0020      	movs	r0, r4
   123d8:	4b3b      	ldr	r3, [pc, #236]	; (124c8 <dir_register+0x2d0>)
   123da:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   123dc:	2800      	cmp	r0, #0
   123de:	d166      	bne.n	124ae <dir_register+0x2b6>
   123e0:	4645      	mov	r5, r8
   123e2:	3d01      	subs	r5, #1
   123e4:	b2ab      	uxth	r3, r5
   123e6:	4698      	mov	r8, r3
   123e8:	2b00      	cmp	r3, #0
   123ea:	d027      	beq.n	1243c <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   123ec:	6921      	ldr	r1, [r4, #16]
   123ee:	6820      	ldr	r0, [r4, #0]
   123f0:	4b34      	ldr	r3, [pc, #208]	; (124c4 <dir_register+0x2cc>)
   123f2:	4798      	blx	r3
				if (res != FR_OK) break;
   123f4:	2800      	cmp	r0, #0
   123f6:	d158      	bne.n	124aa <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   123f8:	69e6      	ldr	r6, [r4, #28]
   123fa:	6960      	ldr	r0, [r4, #20]
   123fc:	4643      	mov	r3, r8
   123fe:	466a      	mov	r2, sp
   12400:	70d3      	strb	r3, [r2, #3]
   12402:	78d3      	ldrb	r3, [r2, #3]
   12404:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   12406:	7913      	ldrb	r3, [r2, #4]
   12408:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   1240a:	230f      	movs	r3, #15
   1240c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   1240e:	2300      	movs	r3, #0
   12410:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   12412:	7683      	strb	r3, [r0, #26]
   12414:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   12416:	464b      	mov	r3, r9
   12418:	3b01      	subs	r3, #1
   1241a:	005a      	lsls	r2, r3, #1
   1241c:	18d2      	adds	r2, r2, r3
   1241e:	0092      	lsls	r2, r2, #2
   12420:	18d2      	adds	r2, r2, r3
   12422:	492c      	ldr	r1, [pc, #176]	; (124d4 <dir_register+0x2dc>)
   12424:	000d      	movs	r5, r1
   12426:	350d      	adds	r5, #13
	s = wc = 0;
   12428:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1242a:	4f29      	ldr	r7, [pc, #164]	; (124d0 <dir_register+0x2d8>)
   1242c:	46b3      	mov	fp, r6
   1242e:	46a4      	mov	ip, r4
   12430:	e029      	b.n	12486 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   12432:	2307      	movs	r3, #7
   12434:	4698      	mov	r8, r3
   12436:	e758      	b.n	122ea <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   12438:	2b01      	cmp	r3, #1
   1243a:	d8aa      	bhi.n	12392 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   1243c:	6921      	ldr	r1, [r4, #16]
   1243e:	6820      	ldr	r0, [r4, #0]
   12440:	4b20      	ldr	r3, [pc, #128]	; (124c4 <dir_register+0x2cc>)
   12442:	4798      	blx	r3
   12444:	4680      	mov	r8, r0
		if (res == FR_OK) {
   12446:	2800      	cmp	r0, #0
   12448:	d000      	beq.n	1244c <dir_register+0x254>
   1244a:	e74e      	b.n	122ea <dir_register+0xf2>
			dir = dj->dir;
   1244c:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   1244e:	2220      	movs	r2, #32
   12450:	2100      	movs	r1, #0
   12452:	0028      	movs	r0, r5
   12454:	4b20      	ldr	r3, [pc, #128]	; (124d8 <dir_register+0x2e0>)
   12456:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   12458:	220b      	movs	r2, #11
   1245a:	69a1      	ldr	r1, [r4, #24]
   1245c:	0028      	movs	r0, r5
   1245e:	4b15      	ldr	r3, [pc, #84]	; (124b4 <dir_register+0x2bc>)
   12460:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   12462:	69a3      	ldr	r3, [r4, #24]
   12464:	7ada      	ldrb	r2, [r3, #11]
   12466:	2318      	movs	r3, #24
   12468:	4013      	ands	r3, r2
   1246a:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   1246c:	6823      	ldr	r3, [r4, #0]
   1246e:	2201      	movs	r2, #1
   12470:	711a      	strb	r2, [r3, #4]
   12472:	e73a      	b.n	122ea <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   12474:	780c      	ldrb	r4, [r1, #0]
   12476:	26ff      	movs	r6, #255	; 0xff
   12478:	5506      	strb	r6, [r0, r4]
   1247a:	1904      	adds	r4, r0, r4
   1247c:	26ff      	movs	r6, #255	; 0xff
   1247e:	7066      	strb	r6, [r4, #1]
   12480:	3101      	adds	r1, #1
	} while (++s < 13);
   12482:	42a9      	cmp	r1, r5
   12484:	d094      	beq.n	123b0 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   12486:	42bb      	cmp	r3, r7
   12488:	d0f4      	beq.n	12474 <dir_register+0x27c>
   1248a:	1c54      	adds	r4, r2, #1
   1248c:	0052      	lsls	r2, r2, #1
   1248e:	465b      	mov	r3, fp
   12490:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   12492:	780a      	ldrb	r2, [r1, #0]
   12494:	5483      	strb	r3, [r0, r2]
   12496:	1882      	adds	r2, r0, r2
   12498:	0a1e      	lsrs	r6, r3, #8
   1249a:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   1249c:	2b00      	cmp	r3, #0
   1249e:	d185      	bne.n	123ac <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   124a0:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   124a2:	003b      	movs	r3, r7
   124a4:	e7ec      	b.n	12480 <dir_register+0x288>
   124a6:	4680      	mov	r8, r0
   124a8:	e71f      	b.n	122ea <dir_register+0xf2>
   124aa:	4680      	mov	r8, r0
   124ac:	e71d      	b.n	122ea <dir_register+0xf2>
   124ae:	4680      	mov	r8, r0
   124b0:	e71b      	b.n	122ea <dir_register+0xf2>
   124b2:	46c0      	nop			; (mov r8, r8)
   124b4:	000115a5 	.word	0x000115a5
   124b8:	00012061 	.word	0x00012061
   124bc:	00017129 	.word	0x00017129
   124c0:	00011c21 	.word	0x00011c21
   124c4:	00011a85 	.word	0x00011a85
   124c8:	00011f3d 	.word	0x00011f3d
   124cc:	000115e3 	.word	0x000115e3
   124d0:	0000ffff 	.word	0x0000ffff
   124d4:	0001c474 	.word	0x0001c474
   124d8:	000115b9 	.word	0x000115b9

000124dc <dir_read>:
{
   124dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   124de:	46de      	mov	lr, fp
   124e0:	4657      	mov	r7, sl
   124e2:	464e      	mov	r6, r9
   124e4:	4645      	mov	r5, r8
   124e6:	b5e0      	push	{r5, r6, r7, lr}
   124e8:	b083      	sub	sp, #12
   124ea:	0005      	movs	r5, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
   124ec:	23ff      	movs	r3, #255	; 0xff
   124ee:	4699      	mov	r9, r3
   124f0:	26ff      	movs	r6, #255	; 0xff
	res = FR_NO_FILE;
   124f2:	2404      	movs	r4, #4
		res = move_window(dj->fs, dj->sect);
   124f4:	4f44      	ldr	r7, [pc, #272]	; (12608 <dir_read+0x12c>)
		res = dir_next(dj, 0);				/* Next entry */
   124f6:	4b45      	ldr	r3, [pc, #276]	; (1260c <dir_read+0x130>)
   124f8:	4698      	mov	r8, r3
	while (dj->sect) {
   124fa:	e05b      	b.n	125b4 <dir_read+0xd8>
			if (a == AM_LFN) {			/* An LFN entry is found */
   124fc:	2a0f      	cmp	r2, #15
   124fe:	d147      	bne.n	12590 <dir_read+0xb4>
				if (c & LLE) {			/* Is it start of LFN sequence? */
   12500:	065a      	lsls	r2, r3, #25
   12502:	d51a      	bpl.n	1253a <dir_read+0x5e>
					sum = dir[LDIR_Chksum];
   12504:	7b42      	ldrb	r2, [r0, #13]
   12506:	4691      	mov	r9, r2
					c &= ~LLE; ord = c;
   12508:	2240      	movs	r2, #64	; 0x40
   1250a:	4393      	bics	r3, r2
					dj->lfn_idx = dj->index;
   1250c:	88ea      	ldrh	r2, [r5, #6]
   1250e:	842a      	strh	r2, [r5, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12510:	7b42      	ldrb	r2, [r0, #13]
   12512:	4694      	mov	ip, r2
   12514:	26ff      	movs	r6, #255	; 0xff
   12516:	454a      	cmp	r2, r9
   12518:	d147      	bne.n	125aa <dir_read+0xce>
   1251a:	69ea      	ldr	r2, [r5, #28]
   1251c:	4691      	mov	r9, r2
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   1251e:	7802      	ldrb	r2, [r0, #0]
   12520:	243f      	movs	r4, #63	; 0x3f
   12522:	4022      	ands	r2, r4
   12524:	3a01      	subs	r2, #1
   12526:	0054      	lsls	r4, r2, #1
   12528:	18a4      	adds	r4, r4, r2
   1252a:	00a4      	lsls	r4, r4, #2
   1252c:	18a2      	adds	r2, r4, r2
   1252e:	9201      	str	r2, [sp, #4]
	s = 0; wc = 1;
   12530:	3efe      	subs	r6, #254	; 0xfe
   12532:	2100      	movs	r1, #0
			if (uc != 0xFFFF) return 0;		/* Check filler */
   12534:	4a36      	ldr	r2, [pc, #216]	; (12610 <dir_read+0x134>)
   12536:	4692      	mov	sl, r2
   12538:	e008      	b.n	1254c <dir_read+0x70>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1253a:	429e      	cmp	r6, r3
   1253c:	d0e8      	beq.n	12510 <dir_read+0x34>
   1253e:	26ff      	movs	r6, #255	; 0xff
   12540:	e033      	b.n	125aa <dir_read+0xce>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   12542:	4552      	cmp	r2, sl
   12544:	d151      	bne.n	125ea <dir_read+0x10e>
	} while (++s < 13);						/* Read all character in the entry */
   12546:	3101      	adds	r1, #1
   12548:	290d      	cmp	r1, #13
   1254a:	d013      	beq.n	12574 <dir_read+0x98>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   1254c:	4a31      	ldr	r2, [pc, #196]	; (12614 <dir_read+0x138>)
   1254e:	5c8a      	ldrb	r2, [r1, r2]
   12550:	1884      	adds	r4, r0, r2
   12552:	7864      	ldrb	r4, [r4, #1]
   12554:	0224      	lsls	r4, r4, #8
   12556:	5c82      	ldrb	r2, [r0, r2]
   12558:	4322      	orrs	r2, r4
		if (wc) {	/* Last char has not been processed */
   1255a:	2e00      	cmp	r6, #0
   1255c:	d0f1      	beq.n	12542 <dir_read+0x66>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   1255e:	9c01      	ldr	r4, [sp, #4]
   12560:	2cfe      	cmp	r4, #254	; 0xfe
   12562:	d842      	bhi.n	125ea <dir_read+0x10e>
			lfnbuf[i++] = wc = uc;			/* Store it */
   12564:	0066      	lsls	r6, r4, #1
   12566:	464c      	mov	r4, r9
   12568:	5332      	strh	r2, [r6, r4]
   1256a:	0016      	movs	r6, r2
   1256c:	9c01      	ldr	r4, [sp, #4]
   1256e:	3401      	adds	r4, #1
   12570:	9401      	str	r4, [sp, #4]
   12572:	e7e8      	b.n	12546 <dir_read+0x6a>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
   12574:	7802      	ldrb	r2, [r0, #0]
   12576:	0652      	lsls	r2, r2, #25
   12578:	d506      	bpl.n	12588 <dir_read+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   1257a:	9a01      	ldr	r2, [sp, #4]
   1257c:	2afe      	cmp	r2, #254	; 0xfe
   1257e:	d834      	bhi.n	125ea <dir_read+0x10e>
		lfnbuf[i] = 0;
   12580:	0054      	lsls	r4, r2, #1
   12582:	2200      	movs	r2, #0
   12584:	4649      	mov	r1, r9
   12586:	5262      	strh	r2, [r4, r1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   12588:	3b01      	subs	r3, #1
   1258a:	b2de      	uxtb	r6, r3
   1258c:	46e1      	mov	r9, ip
   1258e:	e00c      	b.n	125aa <dir_read+0xce>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   12590:	2e00      	cmp	r6, #0
   12592:	d103      	bne.n	1259c <dir_read+0xc0>
   12594:	4b20      	ldr	r3, [pc, #128]	; (12618 <dir_read+0x13c>)
   12596:	4798      	blx	r3
   12598:	4581      	cmp	r9, r0
   1259a:	d02c      	beq.n	125f6 <dir_read+0x11a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   1259c:	2301      	movs	r3, #1
   1259e:	425b      	negs	r3, r3
   125a0:	842b      	strh	r3, [r5, #32]
   125a2:	e028      	b.n	125f6 <dir_read+0x11a>
			ord = 0xFF;
   125a4:	26ff      	movs	r6, #255	; 0xff
   125a6:	e000      	b.n	125aa <dir_read+0xce>
   125a8:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dj, 0);				/* Next entry */
   125aa:	2100      	movs	r1, #0
   125ac:	0028      	movs	r0, r5
   125ae:	47c0      	blx	r8
   125b0:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
   125b2:	d11e      	bne.n	125f2 <dir_read+0x116>
	while (dj->sect) {
   125b4:	6929      	ldr	r1, [r5, #16]
   125b6:	2900      	cmp	r1, #0
   125b8:	d014      	beq.n	125e4 <dir_read+0x108>
		res = move_window(dj->fs, dj->sect);
   125ba:	6828      	ldr	r0, [r5, #0]
   125bc:	47b8      	blx	r7
   125be:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
   125c0:	d117      	bne.n	125f2 <dir_read+0x116>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   125c2:	6968      	ldr	r0, [r5, #20]
		c = dir[DIR_Name];
   125c4:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   125c6:	2b00      	cmp	r3, #0
   125c8:	d012      	beq.n	125f0 <dir_read+0x114>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   125ca:	2be5      	cmp	r3, #229	; 0xe5
   125cc:	d0ea      	beq.n	125a4 <dir_read+0xc8>
   125ce:	2b2e      	cmp	r3, #46	; 0x2e
   125d0:	d0ea      	beq.n	125a8 <dir_read+0xcc>
		a = dir[DIR_Attr] & AM_MASK;
   125d2:	7ac1      	ldrb	r1, [r0, #11]
   125d4:	223f      	movs	r2, #63	; 0x3f
   125d6:	400a      	ands	r2, r1
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   125d8:	0709      	lsls	r1, r1, #28
   125da:	d58f      	bpl.n	124fc <dir_read+0x20>
   125dc:	2a0f      	cmp	r2, #15
   125de:	d08f      	beq.n	12500 <dir_read+0x24>
			ord = 0xFF;
   125e0:	26ff      	movs	r6, #255	; 0xff
   125e2:	e7e2      	b.n	125aa <dir_read+0xce>
	if (res != FR_OK) dj->sect = 0;
   125e4:	2c00      	cmp	r4, #0
   125e6:	d006      	beq.n	125f6 <dir_read+0x11a>
   125e8:	e003      	b.n	125f2 <dir_read+0x116>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   125ea:	46e1      	mov	r9, ip
   125ec:	26ff      	movs	r6, #255	; 0xff
   125ee:	e7dc      	b.n	125aa <dir_read+0xce>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   125f0:	2404      	movs	r4, #4
	if (res != FR_OK) dj->sect = 0;
   125f2:	2300      	movs	r3, #0
   125f4:	612b      	str	r3, [r5, #16]
}
   125f6:	0020      	movs	r0, r4
   125f8:	b003      	add	sp, #12
   125fa:	bc3c      	pop	{r2, r3, r4, r5}
   125fc:	4690      	mov	r8, r2
   125fe:	4699      	mov	r9, r3
   12600:	46a2      	mov	sl, r4
   12602:	46ab      	mov	fp, r5
   12604:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12606:	46c0      	nop			; (mov r8, r8)
   12608:	00011a85 	.word	0x00011a85
   1260c:	00011f3d 	.word	0x00011f3d
   12610:	0000ffff 	.word	0x0000ffff
   12614:	0001c474 	.word	0x0001c474
   12618:	000115e3 	.word	0x000115e3

0001261c <dir_remove>:
{
   1261c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1261e:	46c6      	mov	lr, r8
   12620:	b500      	push	{lr}
   12622:	0004      	movs	r4, r0
	i = dj->index;	/* SFN index */
   12624:	88c5      	ldrh	r5, [r0, #6]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   12626:	8c01      	ldrh	r1, [r0, #32]
   12628:	4b12      	ldr	r3, [pc, #72]	; (12674 <dir_remove+0x58>)
   1262a:	4299      	cmp	r1, r3
   1262c:	d020      	beq.n	12670 <dir_remove+0x54>
   1262e:	0020      	movs	r0, r4
   12630:	4b11      	ldr	r3, [pc, #68]	; (12678 <dir_remove+0x5c>)
   12632:	4798      	blx	r3
	if (res == FR_OK) {
   12634:	2800      	cmp	r0, #0
   12636:	d118      	bne.n	1266a <dir_remove+0x4e>
			res = move_window(dj->fs, dj->sect);
   12638:	4e10      	ldr	r6, [pc, #64]	; (1267c <dir_remove+0x60>)
			*dj->dir = DDE;			/* Mark the entry "deleted" */
   1263a:	27e5      	movs	r7, #229	; 0xe5
			res = dir_next(dj, 0);		/* Next entry */
   1263c:	4b10      	ldr	r3, [pc, #64]	; (12680 <dir_remove+0x64>)
   1263e:	4698      	mov	r8, r3
			res = move_window(dj->fs, dj->sect);
   12640:	6921      	ldr	r1, [r4, #16]
   12642:	6820      	ldr	r0, [r4, #0]
   12644:	47b0      	blx	r6
			if (res != FR_OK) break;
   12646:	2800      	cmp	r0, #0
   12648:	d10c      	bne.n	12664 <dir_remove+0x48>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
   1264a:	6963      	ldr	r3, [r4, #20]
   1264c:	701f      	strb	r7, [r3, #0]
			dj->fs->wflag = 1;
   1264e:	2301      	movs	r3, #1
   12650:	6822      	ldr	r2, [r4, #0]
   12652:	7113      	strb	r3, [r2, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   12654:	88e3      	ldrh	r3, [r4, #6]
   12656:	42ab      	cmp	r3, r5
   12658:	d207      	bcs.n	1266a <dir_remove+0x4e>
			res = dir_next(dj, 0);		/* Next entry */
   1265a:	2100      	movs	r1, #0
   1265c:	0020      	movs	r0, r4
   1265e:	47c0      	blx	r8
		} while (res == FR_OK);
   12660:	2800      	cmp	r0, #0
   12662:	d0ed      	beq.n	12640 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   12664:	2804      	cmp	r0, #4
   12666:	d100      	bne.n	1266a <dir_remove+0x4e>
   12668:	3802      	subs	r0, #2
}
   1266a:	bc04      	pop	{r2}
   1266c:	4690      	mov	r8, r2
   1266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   12670:	0029      	movs	r1, r5
   12672:	e7dc      	b.n	1262e <dir_remove+0x12>
   12674:	0000ffff 	.word	0x0000ffff
   12678:	00011c21 	.word	0x00011c21
   1267c:	00011a85 	.word	0x00011a85
   12680:	00011f3d 	.word	0x00011f3d

00012684 <sync>:
{
   12684:	b570      	push	{r4, r5, r6, lr}
   12686:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   12688:	2100      	movs	r1, #0
   1268a:	4b2c      	ldr	r3, [pc, #176]	; (1273c <sync+0xb8>)
   1268c:	4798      	blx	r3
	if (res == FR_OK) {
   1268e:	2800      	cmp	r0, #0
   12690:	d10a      	bne.n	126a8 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   12692:	7823      	ldrb	r3, [r4, #0]
   12694:	2b03      	cmp	r3, #3
   12696:	d008      	beq.n	126aa <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   12698:	7860      	ldrb	r0, [r4, #1]
   1269a:	2200      	movs	r2, #0
   1269c:	2100      	movs	r1, #0
   1269e:	4b28      	ldr	r3, [pc, #160]	; (12740 <sync+0xbc>)
   126a0:	4798      	blx	r3
   126a2:	1e43      	subs	r3, r0, #1
   126a4:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   126a6:	b2c0      	uxtb	r0, r0
}
   126a8:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   126aa:	7963      	ldrb	r3, [r4, #5]
   126ac:	2b00      	cmp	r3, #0
   126ae:	d0f3      	beq.n	12698 <sync+0x14>
			fs->winsect = 0;
   126b0:	2600      	movs	r6, #0
   126b2:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   126b4:	0025      	movs	r5, r4
   126b6:	3530      	adds	r5, #48	; 0x30
   126b8:	2280      	movs	r2, #128	; 0x80
   126ba:	0092      	lsls	r2, r2, #2
   126bc:	2100      	movs	r1, #0
   126be:	0028      	movs	r0, r5
   126c0:	4b20      	ldr	r3, [pc, #128]	; (12744 <sync+0xc0>)
   126c2:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   126c4:	2255      	movs	r2, #85	; 0x55
   126c6:	4b20      	ldr	r3, [pc, #128]	; (12748 <sync+0xc4>)
   126c8:	54e2      	strb	r2, [r4, r3]
   126ca:	3255      	adds	r2, #85	; 0x55
   126cc:	4b1f      	ldr	r3, [pc, #124]	; (1274c <sync+0xc8>)
   126ce:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   126d0:	3bde      	subs	r3, #222	; 0xde
   126d2:	3bff      	subs	r3, #255	; 0xff
   126d4:	3a7a      	subs	r2, #122	; 0x7a
   126d6:	54a3      	strb	r3, [r4, r2]
   126d8:	3201      	adds	r2, #1
   126da:	54a3      	strb	r3, [r4, r2]
   126dc:	330f      	adds	r3, #15
   126de:	3201      	adds	r2, #1
   126e0:	54a3      	strb	r3, [r4, r2]
   126e2:	320f      	adds	r2, #15
   126e4:	2133      	movs	r1, #51	; 0x33
   126e6:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   126e8:	313f      	adds	r1, #63	; 0x3f
   126ea:	2085      	movs	r0, #133	; 0x85
   126ec:	0080      	lsls	r0, r0, #2
   126ee:	5421      	strb	r1, [r4, r0]
   126f0:	4817      	ldr	r0, [pc, #92]	; (12750 <sync+0xcc>)
   126f2:	5421      	strb	r1, [r4, r0]
   126f4:	4917      	ldr	r1, [pc, #92]	; (12754 <sync+0xd0>)
   126f6:	5462      	strb	r2, [r4, r1]
   126f8:	4a17      	ldr	r2, [pc, #92]	; (12758 <sync+0xd4>)
   126fa:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   126fc:	6923      	ldr	r3, [r4, #16]
   126fe:	3201      	adds	r2, #1
   12700:	54a3      	strb	r3, [r4, r2]
   12702:	0a19      	lsrs	r1, r3, #8
   12704:	4a15      	ldr	r2, [pc, #84]	; (1275c <sync+0xd8>)
   12706:	54a1      	strb	r1, [r4, r2]
   12708:	0c19      	lsrs	r1, r3, #16
   1270a:	4a15      	ldr	r2, [pc, #84]	; (12760 <sync+0xdc>)
   1270c:	54a1      	strb	r1, [r4, r2]
   1270e:	0e1b      	lsrs	r3, r3, #24
   12710:	4a14      	ldr	r2, [pc, #80]	; (12764 <sync+0xe0>)
   12712:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   12714:	68e3      	ldr	r3, [r4, #12]
   12716:	3201      	adds	r2, #1
   12718:	54a3      	strb	r3, [r4, r2]
   1271a:	0a19      	lsrs	r1, r3, #8
   1271c:	4a12      	ldr	r2, [pc, #72]	; (12768 <sync+0xe4>)
   1271e:	54a1      	strb	r1, [r4, r2]
   12720:	0c19      	lsrs	r1, r3, #16
   12722:	4a12      	ldr	r2, [pc, #72]	; (1276c <sync+0xe8>)
   12724:	54a1      	strb	r1, [r4, r2]
   12726:	0e1b      	lsrs	r3, r3, #24
   12728:	4a11      	ldr	r2, [pc, #68]	; (12770 <sync+0xec>)
   1272a:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   1272c:	7860      	ldrb	r0, [r4, #1]
   1272e:	2301      	movs	r3, #1
   12730:	6962      	ldr	r2, [r4, #20]
   12732:	0029      	movs	r1, r5
   12734:	4d0f      	ldr	r5, [pc, #60]	; (12774 <sync+0xf0>)
   12736:	47a8      	blx	r5
			fs->fsi_flag = 0;
   12738:	7166      	strb	r6, [r4, #5]
   1273a:	e7ad      	b.n	12698 <sync+0x14>
   1273c:	00011a85 	.word	0x00011a85
   12740:	000114e9 	.word	0x000114e9
   12744:	000115b9 	.word	0x000115b9
   12748:	0000022e 	.word	0x0000022e
   1274c:	0000022f 	.word	0x0000022f
   12750:	00000215 	.word	0x00000215
   12754:	00000216 	.word	0x00000216
   12758:	00000217 	.word	0x00000217
   1275c:	00000219 	.word	0x00000219
   12760:	0000021a 	.word	0x0000021a
   12764:	0000021b 	.word	0x0000021b
   12768:	0000021d 	.word	0x0000021d
   1276c:	0000021e 	.word	0x0000021e
   12770:	0000021f 	.word	0x0000021f
   12774:	00011465 	.word	0x00011465

00012778 <follow_path>:
{
   12778:	b5f0      	push	{r4, r5, r6, r7, lr}
   1277a:	46de      	mov	lr, fp
   1277c:	4657      	mov	r7, sl
   1277e:	464e      	mov	r6, r9
   12780:	4645      	mov	r5, r8
   12782:	b5e0      	push	{r5, r6, r7, lr}
   12784:	b083      	sub	sp, #12
   12786:	4682      	mov	sl, r0
   12788:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   1278a:	780b      	ldrb	r3, [r1, #0]
   1278c:	2b2f      	cmp	r3, #47	; 0x2f
   1278e:	d00f      	beq.n	127b0 <follow_path+0x38>
   12790:	2b5c      	cmp	r3, #92	; 0x5c
   12792:	d00d      	beq.n	127b0 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   12794:	2300      	movs	r3, #0
   12796:	4652      	mov	r2, sl
   12798:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   1279a:	782b      	ldrb	r3, [r5, #0]
   1279c:	4657      	mov	r7, sl
   1279e:	2b1f      	cmp	r3, #31
   127a0:	d809      	bhi.n	127b6 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   127a2:	2100      	movs	r1, #0
   127a4:	4650      	mov	r0, sl
   127a6:	4bb2      	ldr	r3, [pc, #712]	; (12a70 <follow_path+0x2f8>)
   127a8:	4798      	blx	r3
		dj->dir = 0;
   127aa:	2300      	movs	r3, #0
   127ac:	617b      	str	r3, [r7, #20]
   127ae:	e13a      	b.n	12a26 <follow_path+0x2ae>
		path++;
   127b0:	3501      	adds	r5, #1
   127b2:	e7ef      	b.n	12794 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   127b4:	3501      	adds	r5, #1
   127b6:	7828      	ldrb	r0, [r5, #0]
   127b8:	282f      	cmp	r0, #47	; 0x2f
   127ba:	d0fb      	beq.n	127b4 <follow_path+0x3c>
   127bc:	285c      	cmp	r0, #92	; 0x5c
   127be:	d0f9      	beq.n	127b4 <follow_path+0x3c>
	lfn = dj->lfn;
   127c0:	69fb      	ldr	r3, [r7, #28]
   127c2:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   127c4:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   127c6:	281f      	cmp	r0, #31
   127c8:	d800      	bhi.n	127cc <follow_path+0x54>
   127ca:	e13b      	b.n	12a44 <follow_path+0x2cc>
   127cc:	282f      	cmp	r0, #47	; 0x2f
   127ce:	d100      	bne.n	127d2 <follow_path+0x5a>
   127d0:	e13b      	b.n	12a4a <follow_path+0x2d2>
   127d2:	285c      	cmp	r0, #92	; 0x5c
   127d4:	d100      	bne.n	127d8 <follow_path+0x60>
   127d6:	e13b      	b.n	12a50 <follow_path+0x2d8>
   127d8:	1c6e      	adds	r6, r5, #1
   127da:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   127dc:	2380      	movs	r3, #128	; 0x80
   127de:	005b      	lsls	r3, r3, #1
   127e0:	4698      	mov	r8, r3
   127e2:	46bb      	mov	fp, r7
   127e4:	002b      	movs	r3, r5
   127e6:	0025      	movs	r5, r4
   127e8:	0034      	movs	r4, r6
   127ea:	4656      	mov	r6, sl
   127ec:	4699      	mov	r9, r3
   127ee:	e011      	b.n	12814 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   127f0:	2b00      	cmp	r3, #0
   127f2:	d135      	bne.n	12860 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   127f4:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   127f6:	1c6b      	adds	r3, r5, #1
   127f8:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   127fa:	281f      	cmp	r0, #31
   127fc:	d91e      	bls.n	1283c <follow_path+0xc4>
   127fe:	282f      	cmp	r0, #47	; 0x2f
   12800:	d100      	bne.n	12804 <follow_path+0x8c>
   12802:	e128      	b.n	12a56 <follow_path+0x2de>
   12804:	285c      	cmp	r0, #92	; 0x5c
   12806:	d100      	bne.n	1280a <follow_path+0x92>
   12808:	e142      	b.n	12a90 <follow_path+0x318>
   1280a:	3602      	adds	r6, #2
   1280c:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   1280e:	4543      	cmp	r3, r8
   12810:	d026      	beq.n	12860 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   12812:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   12814:	2101      	movs	r1, #1
   12816:	4b97      	ldr	r3, [pc, #604]	; (12a74 <follow_path+0x2fc>)
   12818:	4798      	blx	r3
   1281a:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   1281c:	d020      	beq.n	12860 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   1281e:	287f      	cmp	r0, #127	; 0x7f
   12820:	d8e8      	bhi.n	127f4 <follow_path+0x7c>
	while (*str && *str != chr) str++;
   12822:	2822      	cmp	r0, #34	; 0x22
   12824:	d100      	bne.n	12828 <follow_path+0xb0>
   12826:	e0fd      	b.n	12a24 <follow_path+0x2ac>
   12828:	232a      	movs	r3, #42	; 0x2a
   1282a:	4a93      	ldr	r2, [pc, #588]	; (12a78 <follow_path+0x300>)
   1282c:	b29f      	uxth	r7, r3
   1282e:	428f      	cmp	r7, r1
   12830:	d0de      	beq.n	127f0 <follow_path+0x78>
   12832:	3201      	adds	r2, #1
   12834:	7813      	ldrb	r3, [r2, #0]
   12836:	2b00      	cmp	r3, #0
   12838:	d1f8      	bne.n	1282c <follow_path+0xb4>
   1283a:	e7db      	b.n	127f4 <follow_path+0x7c>
   1283c:	002c      	movs	r4, r5
   1283e:	465f      	mov	r7, fp
   12840:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   12842:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   12844:	2604      	movs	r6, #4
   12846:	e10b      	b.n	12a60 <follow_path+0x2e8>
		di--;
   12848:	3c01      	subs	r4, #1
   1284a:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   1284c:	2c00      	cmp	r4, #0
   1284e:	d100      	bne.n	12852 <follow_path+0xda>
   12850:	e0e8      	b.n	12a24 <follow_path+0x2ac>
		w = lfn[di-1];
   12852:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   12854:	2a20      	cmp	r2, #32
   12856:	d0f7      	beq.n	12848 <follow_path+0xd0>
   12858:	2a2e      	cmp	r2, #46	; 0x2e
   1285a:	d0f5      	beq.n	12848 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   1285c:	2c00      	cmp	r4, #0
   1285e:	d101      	bne.n	12864 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   12860:	2006      	movs	r0, #6
	return res;
   12862:	e0e0      	b.n	12a26 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   12864:	0063      	lsls	r3, r4, #1
   12866:	4698      	mov	r8, r3
   12868:	2300      	movs	r3, #0
   1286a:	4652      	mov	r2, sl
   1286c:	4641      	mov	r1, r8
   1286e:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   12870:	220b      	movs	r2, #11
   12872:	2120      	movs	r1, #32
   12874:	69b8      	ldr	r0, [r7, #24]
   12876:	4b81      	ldr	r3, [pc, #516]	; (12a7c <follow_path+0x304>)
   12878:	4798      	blx	r3
   1287a:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   1287c:	2300      	movs	r3, #0
   1287e:	e001      	b.n	12884 <follow_path+0x10c>
   12880:	3301      	adds	r3, #1
   12882:	3202      	adds	r2, #2
   12884:	8811      	ldrh	r1, [r2, #0]
   12886:	2920      	cmp	r1, #32
   12888:	d0fa      	beq.n	12880 <follow_path+0x108>
   1288a:	292e      	cmp	r1, #46	; 0x2e
   1288c:	d0f8      	beq.n	12880 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   1288e:	2b00      	cmp	r3, #0
   12890:	d001      	beq.n	12896 <follow_path+0x11e>
   12892:	2203      	movs	r2, #3
   12894:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   12896:	4652      	mov	r2, sl
   12898:	4442      	add	r2, r8
   1289a:	3a02      	subs	r2, #2
   1289c:	8812      	ldrh	r2, [r2, #0]
   1289e:	2a2e      	cmp	r2, #46	; 0x2e
   128a0:	d009      	beq.n	128b6 <follow_path+0x13e>
   128a2:	4642      	mov	r2, r8
   128a4:	3a04      	subs	r2, #4
   128a6:	4452      	add	r2, sl
   128a8:	3c01      	subs	r4, #1
   128aa:	2c00      	cmp	r4, #0
   128ac:	d003      	beq.n	128b6 <follow_path+0x13e>
   128ae:	3a02      	subs	r2, #2
   128b0:	8851      	ldrh	r1, [r2, #2]
   128b2:	292e      	cmp	r1, #46	; 0x2e
   128b4:	d1f8      	bne.n	128a8 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   128b6:	2208      	movs	r2, #8
   128b8:	9201      	str	r2, [sp, #4]
   128ba:	2200      	movs	r2, #0
   128bc:	4693      	mov	fp, r2
   128be:	4691      	mov	r9, r2
   128c0:	46a0      	mov	r8, r4
   128c2:	e006      	b.n	128d2 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   128c4:	4544      	cmp	r4, r8
   128c6:	d100      	bne.n	128ca <follow_path+0x152>
   128c8:	e0e6      	b.n	12a98 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   128ca:	2303      	movs	r3, #3
   128cc:	431e      	orrs	r6, r3
   128ce:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   128d0:	0023      	movs	r3, r4
   128d2:	1c5c      	adds	r4, r3, #1
   128d4:	005b      	lsls	r3, r3, #1
   128d6:	4652      	mov	r2, sl
   128d8:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   128da:	2800      	cmp	r0, #0
   128dc:	d02c      	beq.n	12938 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   128de:	2820      	cmp	r0, #32
   128e0:	d0f3      	beq.n	128ca <follow_path+0x152>
   128e2:	282e      	cmp	r0, #46	; 0x2e
   128e4:	d0ee      	beq.n	128c4 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   128e6:	9b01      	ldr	r3, [sp, #4]
   128e8:	459b      	cmp	fp, r3
   128ea:	d219      	bcs.n	12920 <follow_path+0x1a8>
   128ec:	4544      	cmp	r4, r8
   128ee:	d100      	bne.n	128f2 <follow_path+0x17a>
   128f0:	e0d2      	b.n	12a98 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   128f2:	287f      	cmp	r0, #127	; 0x7f
   128f4:	d85e      	bhi.n	129b4 <follow_path+0x23c>
	while (*str && *str != chr) str++;
   128f6:	282b      	cmp	r0, #43	; 0x2b
   128f8:	d06e      	beq.n	129d8 <follow_path+0x260>
   128fa:	232c      	movs	r3, #44	; 0x2c
   128fc:	4a60      	ldr	r2, [pc, #384]	; (12a80 <follow_path+0x308>)
   128fe:	b299      	uxth	r1, r3
   12900:	4281      	cmp	r1, r0
   12902:	d067      	beq.n	129d4 <follow_path+0x25c>
   12904:	3201      	adds	r2, #1
   12906:	7813      	ldrb	r3, [r2, #0]
   12908:	2b00      	cmp	r3, #0
   1290a:	d1f8      	bne.n	128fe <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   1290c:	0003      	movs	r3, r0
   1290e:	3b41      	subs	r3, #65	; 0x41
   12910:	b29b      	uxth	r3, r3
   12912:	2b19      	cmp	r3, #25
   12914:	d86c      	bhi.n	129f0 <follow_path+0x278>
					b |= 2;
   12916:	2302      	movs	r3, #2
   12918:	464a      	mov	r2, r9
   1291a:	431a      	orrs	r2, r3
   1291c:	4691      	mov	r9, r2
   1291e:	e05f      	b.n	129e0 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   12920:	9b01      	ldr	r3, [sp, #4]
   12922:	2b0b      	cmp	r3, #11
   12924:	d03b      	beq.n	1299e <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   12926:	4544      	cmp	r4, r8
   12928:	d100      	bne.n	1292c <follow_path+0x1b4>
   1292a:	e0b9      	b.n	12aa0 <follow_path+0x328>
   1292c:	2303      	movs	r3, #3
   1292e:	431e      	orrs	r6, r3
   12930:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   12932:	4544      	cmp	r4, r8
   12934:	d800      	bhi.n	12938 <follow_path+0x1c0>
   12936:	e0b3      	b.n	12aa0 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   12938:	69bb      	ldr	r3, [r7, #24]
   1293a:	781a      	ldrb	r2, [r3, #0]
   1293c:	2ae5      	cmp	r2, #229	; 0xe5
   1293e:	d036      	beq.n	129ae <follow_path+0x236>
	if (ni == 8) b <<= 2;
   12940:	9b01      	ldr	r3, [sp, #4]
   12942:	2b08      	cmp	r3, #8
   12944:	d060      	beq.n	12a08 <follow_path+0x290>
   12946:	230c      	movs	r3, #12
   12948:	464a      	mov	r2, r9
   1294a:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   1294c:	2b0c      	cmp	r3, #12
   1294e:	d060      	beq.n	12a12 <follow_path+0x29a>
   12950:	43d2      	mvns	r2, r2
   12952:	0792      	lsls	r2, r2, #30
   12954:	d05d      	beq.n	12a12 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   12956:	07b2      	lsls	r2, r6, #30
   12958:	d406      	bmi.n	12968 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   1295a:	2203      	movs	r2, #3
   1295c:	4649      	mov	r1, r9
   1295e:	400a      	ands	r2, r1
   12960:	2a01      	cmp	r2, #1
   12962:	d059      	beq.n	12a18 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   12964:	2b04      	cmp	r3, #4
   12966:	d05a      	beq.n	12a1e <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   12968:	69bb      	ldr	r3, [r7, #24]
   1296a:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   1296c:	0038      	movs	r0, r7
   1296e:	4b45      	ldr	r3, [pc, #276]	; (12a84 <follow_path+0x30c>)
   12970:	4798      	blx	r3
			ns = *(dj->fn+NS);
   12972:	69bb      	ldr	r3, [r7, #24]
   12974:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   12976:	2800      	cmp	r0, #0
   12978:	d15c      	bne.n	12a34 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   1297a:	075b      	lsls	r3, r3, #29
   1297c:	d453      	bmi.n	12a26 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   1297e:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   12980:	7ad3      	ldrb	r3, [r2, #11]
   12982:	06db      	lsls	r3, r3, #27
   12984:	d55c      	bpl.n	12a40 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   12986:	7d51      	ldrb	r1, [r2, #21]
   12988:	0209      	lsls	r1, r1, #8
   1298a:	7d13      	ldrb	r3, [r2, #20]
   1298c:	430b      	orrs	r3, r1
   1298e:	041b      	lsls	r3, r3, #16
   12990:	7ed1      	ldrb	r1, [r2, #27]
   12992:	0209      	lsls	r1, r1, #8
   12994:	7e92      	ldrb	r2, [r2, #26]
   12996:	430a      	orrs	r2, r1
   12998:	4313      	orrs	r3, r2
   1299a:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   1299c:	e70b      	b.n	127b6 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   1299e:	2303      	movs	r3, #3
   129a0:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   129a2:	69bb      	ldr	r3, [r7, #24]
   129a4:	781a      	ldrb	r2, [r3, #0]
   129a6:	2ae5      	cmp	r2, #229	; 0xe5
   129a8:	d1cd      	bne.n	12946 <follow_path+0x1ce>
   129aa:	220b      	movs	r2, #11
   129ac:	9201      	str	r2, [sp, #4]
   129ae:	2205      	movs	r2, #5
   129b0:	701a      	strb	r2, [r3, #0]
   129b2:	e7c5      	b.n	12940 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   129b4:	2100      	movs	r1, #0
   129b6:	4b2f      	ldr	r3, [pc, #188]	; (12a74 <follow_path+0x2fc>)
   129b8:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   129ba:	2800      	cmp	r0, #0
   129bc:	d100      	bne.n	129c0 <follow_path+0x248>
   129be:	e079      	b.n	12ab4 <follow_path+0x33c>
   129c0:	4b31      	ldr	r3, [pc, #196]	; (12a88 <follow_path+0x310>)
   129c2:	469c      	mov	ip, r3
   129c4:	4460      	add	r0, ip
   129c6:	3880      	subs	r0, #128	; 0x80
   129c8:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   129ca:	2302      	movs	r3, #2
   129cc:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   129ce:	2800      	cmp	r0, #0
   129d0:	d002      	beq.n	129d8 <follow_path+0x260>
   129d2:	e790      	b.n	128f6 <follow_path+0x17e>
   129d4:	2b00      	cmp	r3, #0
   129d6:	d099      	beq.n	1290c <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   129d8:	2303      	movs	r3, #3
   129da:	431e      	orrs	r6, r3
   129dc:	b2f6      	uxtb	r6, r6
   129de:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   129e0:	69bb      	ldr	r3, [r7, #24]
   129e2:	465a      	mov	r2, fp
   129e4:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   129e6:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   129e8:	2201      	movs	r2, #1
   129ea:	4694      	mov	ip, r2
   129ec:	44e3      	add	fp, ip
   129ee:	e770      	b.n	128d2 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   129f0:	0003      	movs	r3, r0
   129f2:	3b61      	subs	r3, #97	; 0x61
   129f4:	b29b      	uxth	r3, r3
   129f6:	2b19      	cmp	r3, #25
   129f8:	d8f2      	bhi.n	129e0 <follow_path+0x268>
						b |= 1; w -= 0x20;
   129fa:	2301      	movs	r3, #1
   129fc:	464a      	mov	r2, r9
   129fe:	431a      	orrs	r2, r3
   12a00:	4691      	mov	r9, r2
   12a02:	3820      	subs	r0, #32
   12a04:	b280      	uxth	r0, r0
   12a06:	e7eb      	b.n	129e0 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   12a08:	464b      	mov	r3, r9
   12a0a:	009b      	lsls	r3, r3, #2
   12a0c:	b2db      	uxtb	r3, r3
   12a0e:	4699      	mov	r9, r3
   12a10:	e799      	b.n	12946 <follow_path+0x1ce>
		cf |= NS_LFN;
   12a12:	2202      	movs	r2, #2
   12a14:	4316      	orrs	r6, r2
   12a16:	e79e      	b.n	12956 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   12a18:	320f      	adds	r2, #15
   12a1a:	4316      	orrs	r6, r2
   12a1c:	e7a2      	b.n	12964 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   12a1e:	3304      	adds	r3, #4
   12a20:	431e      	orrs	r6, r3
   12a22:	e7a1      	b.n	12968 <follow_path+0x1f0>
   12a24:	2006      	movs	r0, #6
}
   12a26:	b003      	add	sp, #12
   12a28:	bc3c      	pop	{r2, r3, r4, r5}
   12a2a:	4690      	mov	r8, r2
   12a2c:	4699      	mov	r9, r3
   12a2e:	46a2      	mov	sl, r4
   12a30:	46ab      	mov	fp, r5
   12a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   12a34:	2804      	cmp	r0, #4
   12a36:	d1f6      	bne.n	12a26 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   12a38:	075b      	lsls	r3, r3, #29
   12a3a:	d4f4      	bmi.n	12a26 <follow_path+0x2ae>
   12a3c:	3001      	adds	r0, #1
   12a3e:	e7f2      	b.n	12a26 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   12a40:	2005      	movs	r0, #5
   12a42:	e7f0      	b.n	12a26 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   12a44:	2301      	movs	r3, #1
	si = di = 0;
   12a46:	2400      	movs	r4, #0
   12a48:	e6fb      	b.n	12842 <follow_path+0xca>
		w = p[si++];					/* Get a character */
   12a4a:	2301      	movs	r3, #1
	si = di = 0;
   12a4c:	2400      	movs	r4, #0
   12a4e:	e005      	b.n	12a5c <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   12a50:	2301      	movs	r3, #1
	si = di = 0;
   12a52:	2400      	movs	r4, #0
   12a54:	e002      	b.n	12a5c <follow_path+0x2e4>
   12a56:	002c      	movs	r4, r5
   12a58:	465f      	mov	r7, fp
   12a5a:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   12a5c:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   12a5e:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   12a60:	2c00      	cmp	r4, #0
   12a62:	d0df      	beq.n	12a24 <follow_path+0x2ac>
   12a64:	4b09      	ldr	r3, [pc, #36]	; (12a8c <follow_path+0x314>)
   12a66:	18e3      	adds	r3, r4, r3
   12a68:	005b      	lsls	r3, r3, #1
   12a6a:	4453      	add	r3, sl
   12a6c:	e6f1      	b.n	12852 <follow_path+0xda>
   12a6e:	46c0      	nop			; (mov r8, r8)
   12a70:	00011c21 	.word	0x00011c21
   12a74:	00013231 	.word	0x00013231
   12a78:	0001c505 	.word	0x0001c505
   12a7c:	000115b9 	.word	0x000115b9
   12a80:	0001c511 	.word	0x0001c511
   12a84:	00012061 	.word	0x00012061
   12a88:	0001c484 	.word	0x0001c484
   12a8c:	7fffffff 	.word	0x7fffffff
   12a90:	002c      	movs	r4, r5
   12a92:	465f      	mov	r7, fp
   12a94:	464d      	mov	r5, r9
   12a96:	e7e1      	b.n	12a5c <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   12a98:	9b01      	ldr	r3, [sp, #4]
   12a9a:	2b0b      	cmp	r3, #11
   12a9c:	d100      	bne.n	12aa0 <follow_path+0x328>
   12a9e:	e77e      	b.n	1299e <follow_path+0x226>
			b <<= 2; continue;
   12aa0:	464b      	mov	r3, r9
   12aa2:	009b      	lsls	r3, r3, #2
   12aa4:	b2db      	uxtb	r3, r3
   12aa6:	4699      	mov	r9, r3
   12aa8:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   12aaa:	220b      	movs	r2, #11
   12aac:	9201      	str	r2, [sp, #4]
   12aae:	3a03      	subs	r2, #3
   12ab0:	4693      	mov	fp, r2
   12ab2:	e70e      	b.n	128d2 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   12ab4:	2302      	movs	r3, #2
   12ab6:	431e      	orrs	r6, r3
   12ab8:	e78e      	b.n	129d8 <follow_path+0x260>
   12aba:	46c0      	nop			; (mov r8, r8)

00012abc <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   12abc:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   12abe:	2807      	cmp	r0, #7
   12ac0:	d901      	bls.n	12ac6 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   12ac2:	0018      	movs	r0, r3
   12ac4:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   12ac6:	0083      	lsls	r3, r0, #2
   12ac8:	4a07      	ldr	r2, [pc, #28]	; (12ae8 <f_mount+0x2c>)
   12aca:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   12acc:	2b00      	cmp	r3, #0
   12ace:	d001      	beq.n	12ad4 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   12ad0:	2200      	movs	r2, #0
   12ad2:	701a      	strb	r2, [r3, #0]
	if (fs) {
   12ad4:	2900      	cmp	r1, #0
   12ad6:	d001      	beq.n	12adc <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   12ad8:	2300      	movs	r3, #0
   12ada:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   12adc:	0080      	lsls	r0, r0, #2
   12ade:	4b02      	ldr	r3, [pc, #8]	; (12ae8 <f_mount+0x2c>)
   12ae0:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   12ae2:	2300      	movs	r3, #0
   12ae4:	e7ed      	b.n	12ac2 <f_mount+0x6>
   12ae6:	46c0      	nop			; (mov r8, r8)
   12ae8:	20000550 	.word	0x20000550

00012aec <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   12aec:	b5f0      	push	{r4, r5, r6, r7, lr}
   12aee:	46c6      	mov	lr, r8
   12af0:	b500      	push	{lr}
   12af2:	4c59      	ldr	r4, [pc, #356]	; (12c58 <f_open+0x16c>)
   12af4:	44a5      	add	sp, r4
   12af6:	0005      	movs	r5, r0
   12af8:	9101      	str	r1, [sp, #4]
   12afa:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   12afc:	2300      	movs	r3, #0
   12afe:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   12b00:	261f      	movs	r6, #31
   12b02:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   12b04:	221e      	movs	r2, #30
   12b06:	403a      	ands	r2, r7
   12b08:	a985      	add	r1, sp, #532	; 0x214
   12b0a:	a801      	add	r0, sp, #4
   12b0c:	4b53      	ldr	r3, [pc, #332]	; (12c5c <f_open+0x170>)
   12b0e:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   12b10:	ab82      	add	r3, sp, #520	; 0x208
   12b12:	938b      	str	r3, [sp, #556]	; 0x22c
   12b14:	ab02      	add	r3, sp, #8
   12b16:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   12b18:	2800      	cmp	r0, #0
   12b1a:	d006      	beq.n	12b2a <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   12b1c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   12b1e:	231c      	movs	r3, #28
   12b20:	423b      	tst	r3, r7
   12b22:	d145      	bne.n	12bb0 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   12b24:	2800      	cmp	r0, #0
   12b26:	d13d      	bne.n	12ba4 <f_open+0xb8>
   12b28:	e00c      	b.n	12b44 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   12b2a:	9901      	ldr	r1, [sp, #4]
   12b2c:	a885      	add	r0, sp, #532	; 0x214
   12b2e:	4b4c      	ldr	r3, [pc, #304]	; (12c60 <f_open+0x174>)
   12b30:	4798      	blx	r3
	dir = dj.dir;
   12b32:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   12b34:	2800      	cmp	r0, #0
   12b36:	d1f2      	bne.n	12b1e <f_open+0x32>
		if (!dir)	/* Current dir itself */
   12b38:	2c00      	cmp	r4, #0
   12b3a:	d100      	bne.n	12b3e <f_open+0x52>
   12b3c:	e086      	b.n	12c4c <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   12b3e:	231c      	movs	r3, #28
   12b40:	423b      	tst	r3, r7
   12b42:	d146      	bne.n	12bd2 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   12b44:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   12b46:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   12b48:	06da      	lsls	r2, r3, #27
   12b4a:	d42b      	bmi.n	12ba4 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   12b4c:	07ba      	lsls	r2, r7, #30
   12b4e:	d502      	bpl.n	12b56 <f_open+0x6a>
					res = FR_DENIED;
   12b50:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   12b52:	07db      	lsls	r3, r3, #31
   12b54:	d426      	bmi.n	12ba4 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   12b56:	073b      	lsls	r3, r7, #28
   12b58:	d501      	bpl.n	12b5e <f_open+0x72>
			mode |= FA__WRITTEN;
   12b5a:	2320      	movs	r3, #32
   12b5c:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   12b5e:	9b85      	ldr	r3, [sp, #532]	; 0x214
   12b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12b62:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   12b64:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   12b66:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   12b68:	7d62      	ldrb	r2, [r4, #21]
   12b6a:	0212      	lsls	r2, r2, #8
   12b6c:	7d23      	ldrb	r3, [r4, #20]
   12b6e:	4313      	orrs	r3, r2
   12b70:	041b      	lsls	r3, r3, #16
   12b72:	7ee1      	ldrb	r1, [r4, #27]
   12b74:	0209      	lsls	r1, r1, #8
   12b76:	7ea2      	ldrb	r2, [r4, #26]
   12b78:	430a      	orrs	r2, r1
   12b7a:	4313      	orrs	r3, r2
   12b7c:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   12b7e:	7fe3      	ldrb	r3, [r4, #31]
   12b80:	061b      	lsls	r3, r3, #24
   12b82:	7fa2      	ldrb	r2, [r4, #30]
   12b84:	0412      	lsls	r2, r2, #16
   12b86:	4313      	orrs	r3, r2
   12b88:	7f22      	ldrb	r2, [r4, #28]
   12b8a:	4313      	orrs	r3, r2
   12b8c:	7f62      	ldrb	r2, [r4, #29]
   12b8e:	0212      	lsls	r2, r2, #8
   12b90:	4313      	orrs	r3, r2
   12b92:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   12b94:	2300      	movs	r3, #0
   12b96:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   12b98:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   12b9a:	9b85      	ldr	r3, [sp, #532]	; 0x214
   12b9c:	602b      	str	r3, [r5, #0]
   12b9e:	88db      	ldrh	r3, [r3, #6]
   12ba0:	80ab      	strh	r3, [r5, #4]
   12ba2:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   12ba4:	238e      	movs	r3, #142	; 0x8e
   12ba6:	009b      	lsls	r3, r3, #2
   12ba8:	449d      	add	sp, r3
   12baa:	bc04      	pop	{r2}
   12bac:	4690      	mov	r8, r2
   12bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   12bb0:	2804      	cmp	r0, #4
   12bb2:	d005      	beq.n	12bc0 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   12bb4:	2308      	movs	r3, #8
   12bb6:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   12bb8:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   12bba:	2800      	cmp	r0, #0
   12bbc:	d0d3      	beq.n	12b66 <f_open+0x7a>
   12bbe:	e7f1      	b.n	12ba4 <f_open+0xb8>
				res = dir_register(&dj);
   12bc0:	a885      	add	r0, sp, #532	; 0x214
   12bc2:	4b28      	ldr	r3, [pc, #160]	; (12c64 <f_open+0x178>)
   12bc4:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   12bc6:	2308      	movs	r3, #8
   12bc8:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   12bca:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   12bcc:	2800      	cmp	r0, #0
   12bce:	d008      	beq.n	12be2 <f_open+0xf6>
   12bd0:	e7e8      	b.n	12ba4 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   12bd2:	7ae3      	ldrb	r3, [r4, #11]
   12bd4:	2211      	movs	r2, #17
				res = FR_DENIED;
   12bd6:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   12bd8:	421a      	tst	r2, r3
   12bda:	d1e3      	bne.n	12ba4 <f_open+0xb8>
					res = FR_EXIST;
   12bdc:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   12bde:	077b      	lsls	r3, r7, #29
   12be0:	d4e0      	bmi.n	12ba4 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   12be2:	0733      	lsls	r3, r6, #28
   12be4:	d5bb      	bpl.n	12b5e <f_open+0x72>
			dw = get_fattime();					/* Created time */
   12be6:	4b20      	ldr	r3, [pc, #128]	; (12c68 <f_open+0x17c>)
   12be8:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   12bea:	73a0      	strb	r0, [r4, #14]
   12bec:	0a03      	lsrs	r3, r0, #8
   12bee:	73e3      	strb	r3, [r4, #15]
   12bf0:	0c03      	lsrs	r3, r0, #16
   12bf2:	7423      	strb	r3, [r4, #16]
   12bf4:	0e00      	lsrs	r0, r0, #24
   12bf6:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   12bf8:	2300      	movs	r3, #0
   12bfa:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   12bfc:	7723      	strb	r3, [r4, #28]
   12bfe:	7763      	strb	r3, [r4, #29]
   12c00:	77a3      	strb	r3, [r4, #30]
   12c02:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   12c04:	7d62      	ldrb	r2, [r4, #21]
   12c06:	0212      	lsls	r2, r2, #8
   12c08:	7d27      	ldrb	r7, [r4, #20]
   12c0a:	4317      	orrs	r7, r2
   12c0c:	043f      	lsls	r7, r7, #16
   12c0e:	7ee1      	ldrb	r1, [r4, #27]
   12c10:	0209      	lsls	r1, r1, #8
   12c12:	7ea2      	ldrb	r2, [r4, #26]
   12c14:	430a      	orrs	r2, r1
   12c16:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   12c18:	76a3      	strb	r3, [r4, #26]
   12c1a:	76e3      	strb	r3, [r4, #27]
   12c1c:	7523      	strb	r3, [r4, #20]
   12c1e:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   12c20:	9885      	ldr	r0, [sp, #532]	; 0x214
   12c22:	3301      	adds	r3, #1
   12c24:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   12c26:	2f00      	cmp	r7, #0
   12c28:	d097      	beq.n	12b5a <f_open+0x6e>
				dw = dj.fs->winsect;
   12c2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   12c2c:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   12c2e:	0039      	movs	r1, r7
   12c30:	4b0e      	ldr	r3, [pc, #56]	; (12c6c <f_open+0x180>)
   12c32:	4798      	blx	r3
				if (res == FR_OK) {
   12c34:	2800      	cmp	r0, #0
   12c36:	d1b5      	bne.n	12ba4 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   12c38:	9885      	ldr	r0, [sp, #532]	; 0x214
   12c3a:	3f01      	subs	r7, #1
   12c3c:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   12c3e:	4641      	mov	r1, r8
   12c40:	4b0b      	ldr	r3, [pc, #44]	; (12c70 <f_open+0x184>)
   12c42:	4798      	blx	r3
	if (res == FR_OK) {
   12c44:	2800      	cmp	r0, #0
   12c46:	d100      	bne.n	12c4a <f_open+0x15e>
   12c48:	e787      	b.n	12b5a <f_open+0x6e>
   12c4a:	e7ab      	b.n	12ba4 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   12c4c:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   12c4e:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   12c50:	423b      	tst	r3, r7
   12c52:	d0b2      	beq.n	12bba <f_open+0xce>
			res = FR_INVALID_NAME;
   12c54:	2006      	movs	r0, #6
   12c56:	e7ad      	b.n	12bb4 <f_open+0xc8>
   12c58:	fffffdc8 	.word	0xfffffdc8
   12c5c:	000116d5 	.word	0x000116d5
   12c60:	00012779 	.word	0x00012779
   12c64:	000121f9 	.word	0x000121f9
   12c68:	00011555 	.word	0x00011555
   12c6c:	00011ec5 	.word	0x00011ec5
   12c70:	00011a85 	.word	0x00011a85

00012c74 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
   12c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c76:	46de      	mov	lr, fp
   12c78:	4657      	mov	r7, sl
   12c7a:	464e      	mov	r6, r9
   12c7c:	4645      	mov	r5, r8
   12c7e:	b5e0      	push	{r5, r6, r7, lr}
   12c80:	b083      	sub	sp, #12
   12c82:	0004      	movs	r4, r0
   12c84:	000f      	movs	r7, r1
   12c86:	0015      	movs	r5, r2
   12c88:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
   12c8a:	2300      	movs	r3, #0
   12c8c:	464a      	mov	r2, r9
   12c8e:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
   12c90:	8881      	ldrh	r1, [r0, #4]
   12c92:	6800      	ldr	r0, [r0, #0]
   12c94:	4b5e      	ldr	r3, [pc, #376]	; (12e10 <f_read+0x19c>)
   12c96:	4798      	blx	r3
   12c98:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   12c9a:	2800      	cmp	r0, #0
   12c9c:	d000      	beq.n	12ca0 <f_read+0x2c>
   12c9e:	e0af      	b.n	12e00 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
   12ca0:	79a3      	ldrb	r3, [r4, #6]
   12ca2:	b25a      	sxtb	r2, r3
   12ca4:	2a00      	cmp	r2, #0
   12ca6:	da00      	bge.n	12caa <f_read+0x36>
   12ca8:	e0a8      	b.n	12dfc <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   12caa:	07db      	lsls	r3, r3, #31
   12cac:	d402      	bmi.n	12cb4 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   12cae:	2307      	movs	r3, #7
   12cb0:	9300      	str	r3, [sp, #0]
   12cb2:	e0a5      	b.n	12e00 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
   12cb4:	68e3      	ldr	r3, [r4, #12]
   12cb6:	68a2      	ldr	r2, [r4, #8]
   12cb8:	1a9e      	subs	r6, r3, r2
   12cba:	42ae      	cmp	r6, r5
   12cbc:	d900      	bls.n	12cc0 <f_read+0x4c>
   12cbe:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
   12cc0:	2e00      	cmp	r6, #0
   12cc2:	d153      	bne.n	12d6c <f_read+0xf8>
   12cc4:	e09c      	b.n	12e00 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   12cc6:	6961      	ldr	r1, [r4, #20]
   12cc8:	4b52      	ldr	r3, [pc, #328]	; (12e14 <f_read+0x1a0>)
   12cca:	4798      	blx	r3
   12ccc:	e05c      	b.n	12d88 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   12cce:	79a2      	ldrb	r2, [r4, #6]
   12cd0:	2380      	movs	r3, #128	; 0x80
   12cd2:	425b      	negs	r3, r3
   12cd4:	4313      	orrs	r3, r2
   12cd6:	71a3      	strb	r3, [r4, #6]
   12cd8:	2302      	movs	r3, #2
   12cda:	9300      	str	r3, [sp, #0]
   12cdc:	e090      	b.n	12e00 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   12cde:	79a2      	ldrb	r2, [r4, #6]
   12ce0:	2380      	movs	r3, #128	; 0x80
   12ce2:	425b      	negs	r3, r3
   12ce4:	4313      	orrs	r3, r2
   12ce6:	71a3      	strb	r3, [r4, #6]
   12ce8:	2301      	movs	r3, #1
   12cea:	9300      	str	r3, [sp, #0]
   12cec:	e088      	b.n	12e00 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   12cee:	79a2      	ldrb	r2, [r4, #6]
   12cf0:	2380      	movs	r3, #128	; 0x80
   12cf2:	425b      	negs	r3, r3
   12cf4:	4313      	orrs	r3, r2
   12cf6:	71a3      	strb	r3, [r4, #6]
   12cf8:	2302      	movs	r3, #2
   12cfa:	9300      	str	r3, [sp, #0]
   12cfc:	e080      	b.n	12e00 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
   12cfe:	79a2      	ldrb	r2, [r4, #6]
   12d00:	2380      	movs	r3, #128	; 0x80
   12d02:	425b      	negs	r3, r3
   12d04:	4313      	orrs	r3, r2
   12d06:	71a3      	strb	r3, [r4, #6]
   12d08:	2301      	movs	r3, #1
   12d0a:	9300      	str	r3, [sp, #0]
   12d0c:	e078      	b.n	12e00 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   12d0e:	3130      	adds	r1, #48	; 0x30
   12d10:	0240      	lsls	r0, r0, #9
   12d12:	1838      	adds	r0, r7, r0
   12d14:	2280      	movs	r2, #128	; 0x80
   12d16:	0092      	lsls	r2, r2, #2
   12d18:	4b3f      	ldr	r3, [pc, #252]	; (12e18 <f_read+0x1a4>)
   12d1a:	4798      	blx	r3
   12d1c:	e063      	b.n	12de6 <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   12d1e:	4643      	mov	r3, r8
   12d20:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   12d22:	68a3      	ldr	r3, [r4, #8]
   12d24:	05dd      	lsls	r5, r3, #23
   12d26:	0ded      	lsrs	r5, r5, #23
   12d28:	2380      	movs	r3, #128	; 0x80
   12d2a:	009b      	lsls	r3, r3, #2
   12d2c:	1b5d      	subs	r5, r3, r5
   12d2e:	42b5      	cmp	r5, r6
   12d30:	d900      	bls.n	12d34 <f_read+0xc0>
   12d32:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
   12d34:	69a1      	ldr	r1, [r4, #24]
   12d36:	6820      	ldr	r0, [r4, #0]
   12d38:	4b38      	ldr	r3, [pc, #224]	; (12e1c <f_read+0x1a8>)
   12d3a:	4798      	blx	r3
   12d3c:	2800      	cmp	r0, #0
   12d3e:	d155      	bne.n	12dec <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   12d40:	68a3      	ldr	r3, [r4, #8]
   12d42:	05d9      	lsls	r1, r3, #23
   12d44:	0dc9      	lsrs	r1, r1, #23
   12d46:	3130      	adds	r1, #48	; 0x30
   12d48:	6823      	ldr	r3, [r4, #0]
   12d4a:	469c      	mov	ip, r3
   12d4c:	4461      	add	r1, ip
   12d4e:	002a      	movs	r2, r5
   12d50:	0038      	movs	r0, r7
   12d52:	4b31      	ldr	r3, [pc, #196]	; (12e18 <f_read+0x1a4>)
   12d54:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   12d56:	197f      	adds	r7, r7, r5
   12d58:	68a3      	ldr	r3, [r4, #8]
   12d5a:	195b      	adds	r3, r3, r5
   12d5c:	60a3      	str	r3, [r4, #8]
   12d5e:	464b      	mov	r3, r9
   12d60:	681b      	ldr	r3, [r3, #0]
   12d62:	195b      	adds	r3, r3, r5
   12d64:	464a      	mov	r2, r9
   12d66:	6013      	str	r3, [r2, #0]
   12d68:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
   12d6a:	d049      	beq.n	12e00 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   12d6c:	68a3      	ldr	r3, [r4, #8]
   12d6e:	05da      	lsls	r2, r3, #23
   12d70:	d1d7      	bne.n	12d22 <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   12d72:	6820      	ldr	r0, [r4, #0]
   12d74:	7882      	ldrb	r2, [r0, #2]
   12d76:	3a01      	subs	r2, #1
   12d78:	0a5d      	lsrs	r5, r3, #9
   12d7a:	4015      	ands	r5, r2
   12d7c:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
   12d7e:	2d00      	cmp	r5, #0
   12d80:	d107      	bne.n	12d92 <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
   12d82:	2b00      	cmp	r3, #0
   12d84:	d19f      	bne.n	12cc6 <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
   12d86:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   12d88:	2801      	cmp	r0, #1
   12d8a:	d9a0      	bls.n	12cce <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   12d8c:	1c43      	adds	r3, r0, #1
   12d8e:	d0a6      	beq.n	12cde <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
   12d90:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   12d92:	6823      	ldr	r3, [r4, #0]
   12d94:	469a      	mov	sl, r3
   12d96:	6961      	ldr	r1, [r4, #20]
   12d98:	0018      	movs	r0, r3
   12d9a:	4b21      	ldr	r3, [pc, #132]	; (12e20 <f_read+0x1ac>)
   12d9c:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   12d9e:	2800      	cmp	r0, #0
   12da0:	d0a5      	beq.n	12cee <f_read+0x7a>
			sect += csect;
   12da2:	4680      	mov	r8, r0
   12da4:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
   12da6:	0a73      	lsrs	r3, r6, #9
   12da8:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
   12daa:	d0b8      	beq.n	12d1e <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   12dac:	4653      	mov	r3, sl
   12dae:	789b      	ldrb	r3, [r3, #2]
   12db0:	465a      	mov	r2, fp
   12db2:	18aa      	adds	r2, r5, r2
   12db4:	429a      	cmp	r2, r3
   12db6:	d901      	bls.n	12dbc <f_read+0x148>
					cc = fp->fs->csize - csect;
   12db8:	1b5b      	subs	r3, r3, r5
   12dba:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   12dbc:	465b      	mov	r3, fp
   12dbe:	466a      	mov	r2, sp
   12dc0:	71d3      	strb	r3, [r2, #7]
   12dc2:	79d3      	ldrb	r3, [r2, #7]
   12dc4:	4652      	mov	r2, sl
   12dc6:	7850      	ldrb	r0, [r2, #1]
   12dc8:	4642      	mov	r2, r8
   12dca:	0039      	movs	r1, r7
   12dcc:	4d15      	ldr	r5, [pc, #84]	; (12e24 <f_read+0x1b0>)
   12dce:	47a8      	blx	r5
   12dd0:	2800      	cmp	r0, #0
   12dd2:	d194      	bne.n	12cfe <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   12dd4:	6821      	ldr	r1, [r4, #0]
   12dd6:	790b      	ldrb	r3, [r1, #4]
   12dd8:	2b00      	cmp	r3, #0
   12dda:	d004      	beq.n	12de6 <f_read+0x172>
   12ddc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   12dde:	4642      	mov	r2, r8
   12de0:	1a98      	subs	r0, r3, r2
   12de2:	4583      	cmp	fp, r0
   12de4:	d893      	bhi.n	12d0e <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   12de6:	465b      	mov	r3, fp
   12de8:	025d      	lsls	r5, r3, #9
				continue;
   12dea:	e7b4      	b.n	12d56 <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
   12dec:	79a2      	ldrb	r2, [r4, #6]
   12dee:	2380      	movs	r3, #128	; 0x80
   12df0:	425b      	negs	r3, r3
   12df2:	4313      	orrs	r3, r2
   12df4:	71a3      	strb	r3, [r4, #6]
   12df6:	2301      	movs	r3, #1
   12df8:	9300      	str	r3, [sp, #0]
   12dfa:	e001      	b.n	12e00 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   12dfc:	2302      	movs	r3, #2
   12dfe:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
   12e00:	9800      	ldr	r0, [sp, #0]
   12e02:	b003      	add	sp, #12
   12e04:	bc3c      	pop	{r2, r3, r4, r5}
   12e06:	4690      	mov	r8, r2
   12e08:	4699      	mov	r9, r3
   12e0a:	46a2      	mov	sl, r4
   12e0c:	46ab      	mov	fp, r5
   12e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e10:	00011601 	.word	0x00011601
   12e14:	00011b25 	.word	0x00011b25
   12e18:	000115a5 	.word	0x000115a5
   12e1c:	00011a85 	.word	0x00011a85
   12e20:	000115cb 	.word	0x000115cb
   12e24:	000113e1 	.word	0x000113e1

00012e28 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   12e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e2a:	46de      	mov	lr, fp
   12e2c:	4657      	mov	r7, sl
   12e2e:	464e      	mov	r6, r9
   12e30:	4645      	mov	r5, r8
   12e32:	b5e0      	push	{r5, r6, r7, lr}
   12e34:	b083      	sub	sp, #12
   12e36:	0004      	movs	r4, r0
   12e38:	000d      	movs	r5, r1
   12e3a:	0016      	movs	r6, r2
   12e3c:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   12e3e:	2300      	movs	r3, #0
   12e40:	464a      	mov	r2, r9
   12e42:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   12e44:	8881      	ldrh	r1, [r0, #4]
   12e46:	6800      	ldr	r0, [r0, #0]
   12e48:	4b7f      	ldr	r3, [pc, #508]	; (13048 <f_write+0x220>)
   12e4a:	4798      	blx	r3
   12e4c:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   12e4e:	2800      	cmp	r0, #0
   12e50:	d000      	beq.n	12e54 <f_write+0x2c>
   12e52:	e0f1      	b.n	13038 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   12e54:	79a3      	ldrb	r3, [r4, #6]
   12e56:	b25a      	sxtb	r2, r3
   12e58:	2a00      	cmp	r2, #0
   12e5a:	da00      	bge.n	12e5e <f_write+0x36>
   12e5c:	e0ea      	b.n	13034 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   12e5e:	079b      	lsls	r3, r3, #30
   12e60:	d402      	bmi.n	12e68 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   12e62:	2307      	movs	r3, #7
   12e64:	9300      	str	r3, [sp, #0]
   12e66:	e0e7      	b.n	13038 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   12e68:	68e3      	ldr	r3, [r4, #12]
   12e6a:	199a      	adds	r2, r3, r6
   12e6c:	4293      	cmp	r3, r2
   12e6e:	d810      	bhi.n	12e92 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   12e70:	2e00      	cmp	r6, #0
   12e72:	d00e      	beq.n	12e92 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   12e74:	002f      	movs	r7, r5
   12e76:	e07b      	b.n	12f70 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   12e78:	2100      	movs	r1, #0
   12e7a:	4b74      	ldr	r3, [pc, #464]	; (1304c <f_write+0x224>)
   12e7c:	4798      	blx	r3
   12e7e:	0003      	movs	r3, r0
   12e80:	6120      	str	r0, [r4, #16]
   12e82:	e003      	b.n	12e8c <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   12e84:	6961      	ldr	r1, [r4, #20]
   12e86:	4b71      	ldr	r3, [pc, #452]	; (1304c <f_write+0x224>)
   12e88:	4798      	blx	r3
   12e8a:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   12e8c:	2b00      	cmp	r3, #0
   12e8e:	d000      	beq.n	12e92 <f_write+0x6a>
   12e90:	e080      	b.n	12f94 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   12e92:	68a3      	ldr	r3, [r4, #8]
   12e94:	68e2      	ldr	r2, [r4, #12]
   12e96:	4293      	cmp	r3, r2
   12e98:	d900      	bls.n	12e9c <f_write+0x74>
   12e9a:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   12e9c:	79a3      	ldrb	r3, [r4, #6]
   12e9e:	2220      	movs	r2, #32
   12ea0:	4313      	orrs	r3, r2
   12ea2:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   12ea4:	e0c8      	b.n	13038 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   12ea6:	79a2      	ldrb	r2, [r4, #6]
   12ea8:	3b81      	subs	r3, #129	; 0x81
   12eaa:	4313      	orrs	r3, r2
   12eac:	71a3      	strb	r3, [r4, #6]
   12eae:	2302      	movs	r3, #2
   12eb0:	9300      	str	r3, [sp, #0]
   12eb2:	e0c1      	b.n	13038 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   12eb4:	79a2      	ldrb	r2, [r4, #6]
   12eb6:	3b7f      	subs	r3, #127	; 0x7f
   12eb8:	4313      	orrs	r3, r2
   12eba:	71a3      	strb	r3, [r4, #6]
   12ebc:	2301      	movs	r3, #1
   12ebe:	9300      	str	r3, [sp, #0]
   12ec0:	e0ba      	b.n	13038 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   12ec2:	2100      	movs	r1, #0
   12ec4:	4b62      	ldr	r3, [pc, #392]	; (13050 <f_write+0x228>)
   12ec6:	4798      	blx	r3
   12ec8:	2800      	cmp	r0, #0
   12eca:	d06d      	beq.n	12fa8 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   12ecc:	79a2      	ldrb	r2, [r4, #6]
   12ece:	2380      	movs	r3, #128	; 0x80
   12ed0:	425b      	negs	r3, r3
   12ed2:	4313      	orrs	r3, r2
   12ed4:	71a3      	strb	r3, [r4, #6]
   12ed6:	2301      	movs	r3, #1
   12ed8:	9300      	str	r3, [sp, #0]
   12eda:	e0ad      	b.n	13038 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   12edc:	79a2      	ldrb	r2, [r4, #6]
   12ede:	2380      	movs	r3, #128	; 0x80
   12ee0:	425b      	negs	r3, r3
   12ee2:	4313      	orrs	r3, r2
   12ee4:	71a3      	strb	r3, [r4, #6]
   12ee6:	2302      	movs	r3, #2
   12ee8:	9300      	str	r3, [sp, #0]
   12eea:	e0a5      	b.n	13038 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   12eec:	79a2      	ldrb	r2, [r4, #6]
   12eee:	2380      	movs	r3, #128	; 0x80
   12ef0:	425b      	negs	r3, r3
   12ef2:	4313      	orrs	r3, r2
   12ef4:	71a3      	strb	r3, [r4, #6]
   12ef6:	2301      	movs	r3, #1
   12ef8:	9300      	str	r3, [sp, #0]
   12efa:	e09d      	b.n	13038 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   12efc:	0240      	lsls	r0, r0, #9
   12efe:	1839      	adds	r1, r7, r0
   12f00:	3330      	adds	r3, #48	; 0x30
   12f02:	0018      	movs	r0, r3
   12f04:	2280      	movs	r2, #128	; 0x80
   12f06:	0092      	lsls	r2, r2, #2
   12f08:	4b52      	ldr	r3, [pc, #328]	; (13054 <f_write+0x22c>)
   12f0a:	4798      	blx	r3
					fp->fs->wflag = 0;
   12f0c:	2300      	movs	r3, #0
   12f0e:	6822      	ldr	r2, [r4, #0]
   12f10:	7113      	strb	r3, [r2, #4]
   12f12:	e072      	b.n	12ffa <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   12f14:	68a3      	ldr	r3, [r4, #8]
   12f16:	68e2      	ldr	r2, [r4, #12]
   12f18:	4293      	cmp	r3, r2
   12f1a:	d271      	bcs.n	13000 <f_write+0x1d8>
			fp->dsect = sect;
   12f1c:	4643      	mov	r3, r8
   12f1e:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   12f20:	68a3      	ldr	r3, [r4, #8]
   12f22:	05dd      	lsls	r5, r3, #23
   12f24:	0ded      	lsrs	r5, r5, #23
   12f26:	2380      	movs	r3, #128	; 0x80
   12f28:	009b      	lsls	r3, r3, #2
   12f2a:	1b5d      	subs	r5, r3, r5
   12f2c:	42b5      	cmp	r5, r6
   12f2e:	d900      	bls.n	12f32 <f_write+0x10a>
   12f30:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   12f32:	69a1      	ldr	r1, [r4, #24]
   12f34:	6820      	ldr	r0, [r4, #0]
   12f36:	4b46      	ldr	r3, [pc, #280]	; (13050 <f_write+0x228>)
   12f38:	4798      	blx	r3
   12f3a:	2800      	cmp	r0, #0
   12f3c:	d172      	bne.n	13024 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   12f3e:	68a3      	ldr	r3, [r4, #8]
   12f40:	05d8      	lsls	r0, r3, #23
   12f42:	0dc0      	lsrs	r0, r0, #23
   12f44:	3030      	adds	r0, #48	; 0x30
   12f46:	6823      	ldr	r3, [r4, #0]
   12f48:	469c      	mov	ip, r3
   12f4a:	4460      	add	r0, ip
   12f4c:	002a      	movs	r2, r5
   12f4e:	0039      	movs	r1, r7
   12f50:	4b40      	ldr	r3, [pc, #256]	; (13054 <f_write+0x22c>)
   12f52:	4798      	blx	r3
		fp->fs->wflag = 1;
   12f54:	2301      	movs	r3, #1
   12f56:	6822      	ldr	r2, [r4, #0]
   12f58:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   12f5a:	197f      	adds	r7, r7, r5
   12f5c:	68a3      	ldr	r3, [r4, #8]
   12f5e:	195b      	adds	r3, r3, r5
   12f60:	60a3      	str	r3, [r4, #8]
   12f62:	464b      	mov	r3, r9
   12f64:	681b      	ldr	r3, [r3, #0]
   12f66:	195b      	adds	r3, r3, r5
   12f68:	464a      	mov	r2, r9
   12f6a:	6013      	str	r3, [r2, #0]
   12f6c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   12f6e:	d090      	beq.n	12e92 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   12f70:	68a3      	ldr	r3, [r4, #8]
   12f72:	05da      	lsls	r2, r3, #23
   12f74:	d1d4      	bne.n	12f20 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   12f76:	6820      	ldr	r0, [r4, #0]
   12f78:	7882      	ldrb	r2, [r0, #2]
   12f7a:	3a01      	subs	r2, #1
   12f7c:	0a5d      	lsrs	r5, r3, #9
   12f7e:	4015      	ands	r5, r2
   12f80:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   12f82:	2d00      	cmp	r5, #0
   12f84:	d10b      	bne.n	12f9e <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   12f86:	2b00      	cmp	r3, #0
   12f88:	d000      	beq.n	12f8c <f_write+0x164>
   12f8a:	e77b      	b.n	12e84 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   12f8c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   12f8e:	2b00      	cmp	r3, #0
   12f90:	d100      	bne.n	12f94 <f_write+0x16c>
   12f92:	e771      	b.n	12e78 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   12f94:	2b01      	cmp	r3, #1
   12f96:	d086      	beq.n	12ea6 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   12f98:	1c5a      	adds	r2, r3, #1
   12f9a:	d08b      	beq.n	12eb4 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   12f9c:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   12f9e:	6820      	ldr	r0, [r4, #0]
   12fa0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   12fa2:	69a2      	ldr	r2, [r4, #24]
   12fa4:	4293      	cmp	r3, r2
   12fa6:	d08c      	beq.n	12ec2 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   12fa8:	6823      	ldr	r3, [r4, #0]
   12faa:	469a      	mov	sl, r3
   12fac:	6961      	ldr	r1, [r4, #20]
   12fae:	0018      	movs	r0, r3
   12fb0:	4b29      	ldr	r3, [pc, #164]	; (13058 <f_write+0x230>)
   12fb2:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   12fb4:	2800      	cmp	r0, #0
   12fb6:	d091      	beq.n	12edc <f_write+0xb4>
			sect += csect;
   12fb8:	4680      	mov	r8, r0
   12fba:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   12fbc:	0a73      	lsrs	r3, r6, #9
   12fbe:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   12fc0:	d0a8      	beq.n	12f14 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   12fc2:	4653      	mov	r3, sl
   12fc4:	789b      	ldrb	r3, [r3, #2]
   12fc6:	465a      	mov	r2, fp
   12fc8:	18aa      	adds	r2, r5, r2
   12fca:	429a      	cmp	r2, r3
   12fcc:	d901      	bls.n	12fd2 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   12fce:	1b5b      	subs	r3, r3, r5
   12fd0:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   12fd2:	465b      	mov	r3, fp
   12fd4:	466a      	mov	r2, sp
   12fd6:	71d3      	strb	r3, [r2, #7]
   12fd8:	79d3      	ldrb	r3, [r2, #7]
   12fda:	4652      	mov	r2, sl
   12fdc:	7850      	ldrb	r0, [r2, #1]
   12fde:	4642      	mov	r2, r8
   12fe0:	0039      	movs	r1, r7
   12fe2:	4d1e      	ldr	r5, [pc, #120]	; (1305c <f_write+0x234>)
   12fe4:	47a8      	blx	r5
   12fe6:	2800      	cmp	r0, #0
   12fe8:	d000      	beq.n	12fec <f_write+0x1c4>
   12fea:	e77f      	b.n	12eec <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   12fec:	6823      	ldr	r3, [r4, #0]
   12fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12ff0:	4641      	mov	r1, r8
   12ff2:	1a50      	subs	r0, r2, r1
   12ff4:	4583      	cmp	fp, r0
   12ff6:	d900      	bls.n	12ffa <f_write+0x1d2>
   12ff8:	e780      	b.n	12efc <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   12ffa:	465b      	mov	r3, fp
   12ffc:	025d      	lsls	r5, r3, #9
				continue;
   12ffe:	e7ac      	b.n	12f5a <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13000:	2100      	movs	r1, #0
   13002:	4650      	mov	r0, sl
   13004:	4b12      	ldr	r3, [pc, #72]	; (13050 <f_write+0x228>)
   13006:	4798      	blx	r3
   13008:	2800      	cmp	r0, #0
   1300a:	d103      	bne.n	13014 <f_write+0x1ec>
				fp->fs->winsect = sect;
   1300c:	6823      	ldr	r3, [r4, #0]
   1300e:	4642      	mov	r2, r8
   13010:	62da      	str	r2, [r3, #44]	; 0x2c
   13012:	e783      	b.n	12f1c <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   13014:	79a2      	ldrb	r2, [r4, #6]
   13016:	2380      	movs	r3, #128	; 0x80
   13018:	425b      	negs	r3, r3
   1301a:	4313      	orrs	r3, r2
   1301c:	71a3      	strb	r3, [r4, #6]
   1301e:	2301      	movs	r3, #1
   13020:	9300      	str	r3, [sp, #0]
   13022:	e009      	b.n	13038 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   13024:	79a2      	ldrb	r2, [r4, #6]
   13026:	2380      	movs	r3, #128	; 0x80
   13028:	425b      	negs	r3, r3
   1302a:	4313      	orrs	r3, r2
   1302c:	71a3      	strb	r3, [r4, #6]
   1302e:	2301      	movs	r3, #1
   13030:	9300      	str	r3, [sp, #0]
   13032:	e001      	b.n	13038 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   13034:	2302      	movs	r3, #2
   13036:	9300      	str	r3, [sp, #0]
}
   13038:	9800      	ldr	r0, [sp, #0]
   1303a:	b003      	add	sp, #12
   1303c:	bc3c      	pop	{r2, r3, r4, r5}
   1303e:	4690      	mov	r8, r2
   13040:	4699      	mov	r9, r3
   13042:	46a2      	mov	sl, r4
   13044:	46ab      	mov	fp, r5
   13046:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13048:	00011601 	.word	0x00011601
   1304c:	00011e01 	.word	0x00011e01
   13050:	00011a85 	.word	0x00011a85
   13054:	000115a5 	.word	0x000115a5
   13058:	000115cb 	.word	0x000115cb
   1305c:	00011465 	.word	0x00011465

00013060 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   13060:	b570      	push	{r4, r5, r6, lr}
   13062:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   13064:	8881      	ldrh	r1, [r0, #4]
   13066:	6800      	ldr	r0, [r0, #0]
   13068:	4b1c      	ldr	r3, [pc, #112]	; (130dc <f_sync+0x7c>)
   1306a:	4798      	blx	r3
	if (res == FR_OK) {
   1306c:	2800      	cmp	r0, #0
   1306e:	d102      	bne.n	13076 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   13070:	79a3      	ldrb	r3, [r4, #6]
   13072:	069b      	lsls	r3, r3, #26
   13074:	d400      	bmi.n	13078 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   13076:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   13078:	69e1      	ldr	r1, [r4, #28]
   1307a:	6820      	ldr	r0, [r4, #0]
   1307c:	4b18      	ldr	r3, [pc, #96]	; (130e0 <f_sync+0x80>)
   1307e:	4798      	blx	r3
			if (res == FR_OK) {
   13080:	2800      	cmp	r0, #0
   13082:	d1f8      	bne.n	13076 <f_sync+0x16>
				dir = fp->dir_ptr;
   13084:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   13086:	7aeb      	ldrb	r3, [r5, #11]
   13088:	2220      	movs	r2, #32
   1308a:	4313      	orrs	r3, r2
   1308c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1308e:	7b23      	ldrb	r3, [r4, #12]
   13090:	772b      	strb	r3, [r5, #28]
   13092:	89a3      	ldrh	r3, [r4, #12]
   13094:	0a1b      	lsrs	r3, r3, #8
   13096:	776b      	strb	r3, [r5, #29]
   13098:	89e3      	ldrh	r3, [r4, #14]
   1309a:	77ab      	strb	r3, [r5, #30]
   1309c:	7be3      	ldrb	r3, [r4, #15]
   1309e:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   130a0:	7c23      	ldrb	r3, [r4, #16]
   130a2:	76ab      	strb	r3, [r5, #26]
   130a4:	8a23      	ldrh	r3, [r4, #16]
   130a6:	0a1b      	lsrs	r3, r3, #8
   130a8:	76eb      	strb	r3, [r5, #27]
   130aa:	8a63      	ldrh	r3, [r4, #18]
   130ac:	752b      	strb	r3, [r5, #20]
   130ae:	8a63      	ldrh	r3, [r4, #18]
   130b0:	0a1b      	lsrs	r3, r3, #8
   130b2:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   130b4:	4b0b      	ldr	r3, [pc, #44]	; (130e4 <f_sync+0x84>)
   130b6:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   130b8:	75a8      	strb	r0, [r5, #22]
   130ba:	0a03      	lsrs	r3, r0, #8
   130bc:	75eb      	strb	r3, [r5, #23]
   130be:	0c03      	lsrs	r3, r0, #16
   130c0:	762b      	strb	r3, [r5, #24]
   130c2:	0e00      	lsrs	r0, r0, #24
   130c4:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   130c6:	79a3      	ldrb	r3, [r4, #6]
   130c8:	2220      	movs	r2, #32
   130ca:	4393      	bics	r3, r2
   130cc:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   130ce:	2301      	movs	r3, #1
   130d0:	6822      	ldr	r2, [r4, #0]
   130d2:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   130d4:	6820      	ldr	r0, [r4, #0]
   130d6:	4b04      	ldr	r3, [pc, #16]	; (130e8 <f_sync+0x88>)
   130d8:	4798      	blx	r3
   130da:	e7cc      	b.n	13076 <f_sync+0x16>
   130dc:	00011601 	.word	0x00011601
   130e0:	00011a85 	.word	0x00011a85
   130e4:	00011555 	.word	0x00011555
   130e8:	00012685 	.word	0x00012685

000130ec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   130ec:	b510      	push	{r4, lr}
   130ee:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   130f0:	4b03      	ldr	r3, [pc, #12]	; (13100 <f_close+0x14>)
   130f2:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   130f4:	2800      	cmp	r0, #0
   130f6:	d101      	bne.n	130fc <f_close+0x10>
   130f8:	2300      	movs	r3, #0
   130fa:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   130fc:	bd10      	pop	{r4, pc}
   130fe:	46c0      	nop			; (mov r8, r8)
   13100:	00013061 	.word	0x00013061

00013104 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
   13104:	b510      	push	{r4, lr}
   13106:	4c2c      	ldr	r4, [pc, #176]	; (131b8 <f_unlink+0xb4>)
   13108:	44a5      	add	sp, r4
   1310a:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   1310c:	2201      	movs	r2, #1
   1310e:	a98f      	add	r1, sp, #572	; 0x23c
   13110:	a801      	add	r0, sp, #4
   13112:	4b2a      	ldr	r3, [pc, #168]	; (131bc <f_unlink+0xb8>)
   13114:	4798      	blx	r3
	if (res == FR_OK) {
   13116:	2800      	cmp	r0, #0
   13118:	d003      	beq.n	13122 <f_unlink+0x1e>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
   1311a:	2398      	movs	r3, #152	; 0x98
   1311c:	009b      	lsls	r3, r3, #2
   1311e:	449d      	add	sp, r3
   13120:	bd10      	pop	{r4, pc}
		INIT_BUF(dj);
   13122:	ab83      	add	r3, sp, #524	; 0x20c
   13124:	9395      	str	r3, [sp, #596]	; 0x254
   13126:	ab03      	add	r3, sp, #12
   13128:	9396      	str	r3, [sp, #600]	; 0x258
		res = follow_path(&dj, path);		/* Follow the file path */
   1312a:	9901      	ldr	r1, [sp, #4]
   1312c:	a88f      	add	r0, sp, #572	; 0x23c
   1312e:	4b24      	ldr	r3, [pc, #144]	; (131c0 <f_unlink+0xbc>)
   13130:	4798      	blx	r3
		if (res == FR_OK) {					/* The object is accessible */
   13132:	2800      	cmp	r0, #0
   13134:	d1f1      	bne.n	1311a <f_unlink+0x16>
			dir = dj.dir;
   13136:	9b94      	ldr	r3, [sp, #592]	; 0x250
			if (!dir) {
   13138:	2b00      	cmp	r3, #0
   1313a:	d039      	beq.n	131b0 <f_unlink+0xac>
				if (dir[DIR_Attr] & AM_RDO)
   1313c:	7ada      	ldrb	r2, [r3, #11]
					res = FR_DENIED;		/* Cannot remove R/O object */
   1313e:	3007      	adds	r0, #7
				if (dir[DIR_Attr] & AM_RDO)
   13140:	07d2      	lsls	r2, r2, #31
   13142:	d4ea      	bmi.n	1311a <f_unlink+0x16>
			dclst = LD_CLUST(dir);
   13144:	7d5a      	ldrb	r2, [r3, #21]
   13146:	0212      	lsls	r2, r2, #8
   13148:	7d1c      	ldrb	r4, [r3, #20]
   1314a:	4314      	orrs	r4, r2
   1314c:	0424      	lsls	r4, r4, #16
   1314e:	7ed9      	ldrb	r1, [r3, #27]
   13150:	0209      	lsls	r1, r1, #8
   13152:	7e9a      	ldrb	r2, [r3, #26]
   13154:	430a      	orrs	r2, r1
   13156:	4314      	orrs	r4, r2
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   13158:	7adb      	ldrb	r3, [r3, #11]
   1315a:	06db      	lsls	r3, r3, #27
   1315c:	d40a      	bmi.n	13174 <f_unlink+0x70>
				res = dir_remove(&dj);		/* Remove the directory entry */
   1315e:	a88f      	add	r0, sp, #572	; 0x23c
   13160:	4b18      	ldr	r3, [pc, #96]	; (131c4 <f_unlink+0xc0>)
   13162:	4798      	blx	r3
				if (res == FR_OK) {
   13164:	2800      	cmp	r0, #0
   13166:	d1d8      	bne.n	1311a <f_unlink+0x16>
					if (dclst)				/* Remove the cluster chain if exist */
   13168:	2c00      	cmp	r4, #0
   1316a:	d11a      	bne.n	131a2 <f_unlink+0x9e>
					if (res == FR_OK) res = sync(dj.fs);
   1316c:	988f      	ldr	r0, [sp, #572]	; 0x23c
   1316e:	4b16      	ldr	r3, [pc, #88]	; (131c8 <f_unlink+0xc4>)
   13170:	4798      	blx	r3
   13172:	e7d2      	b.n	1311a <f_unlink+0x16>
					res = FR_INT_ERR;
   13174:	2002      	movs	r0, #2
				if (dclst < 2) {
   13176:	2c01      	cmp	r4, #1
   13178:	d9cf      	bls.n	1311a <f_unlink+0x16>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   1317a:	2224      	movs	r2, #36	; 0x24
   1317c:	a98f      	add	r1, sp, #572	; 0x23c
   1317e:	a886      	add	r0, sp, #536	; 0x218
   13180:	4b12      	ldr	r3, [pc, #72]	; (131cc <f_unlink+0xc8>)
   13182:	4798      	blx	r3
					sdj.sclust = dclst;
   13184:	9488      	str	r4, [sp, #544]	; 0x220
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
   13186:	2102      	movs	r1, #2
   13188:	a886      	add	r0, sp, #536	; 0x218
   1318a:	4b11      	ldr	r3, [pc, #68]	; (131d0 <f_unlink+0xcc>)
   1318c:	4798      	blx	r3
					if (res == FR_OK) {
   1318e:	2800      	cmp	r0, #0
   13190:	d1c3      	bne.n	1311a <f_unlink+0x16>
						res = dir_read(&sdj);
   13192:	a886      	add	r0, sp, #536	; 0x218
   13194:	4b0f      	ldr	r3, [pc, #60]	; (131d4 <f_unlink+0xd0>)
   13196:	4798      	blx	r3
						if (res == FR_OK			/* Not empty dir */
   13198:	2800      	cmp	r0, #0
   1319a:	d00b      	beq.n	131b4 <f_unlink+0xb0>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
   1319c:	2804      	cmp	r0, #4
   1319e:	d0de      	beq.n	1315e <f_unlink+0x5a>
   131a0:	e7bb      	b.n	1311a <f_unlink+0x16>
						res = remove_chain(dj.fs, dclst);
   131a2:	0021      	movs	r1, r4
   131a4:	988f      	ldr	r0, [sp, #572]	; 0x23c
   131a6:	4b0c      	ldr	r3, [pc, #48]	; (131d8 <f_unlink+0xd4>)
   131a8:	4798      	blx	r3
					if (res == FR_OK) res = sync(dj.fs);
   131aa:	2800      	cmp	r0, #0
   131ac:	d1b5      	bne.n	1311a <f_unlink+0x16>
   131ae:	e7dd      	b.n	1316c <f_unlink+0x68>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
   131b0:	2006      	movs	r0, #6
   131b2:	e7b2      	b.n	1311a <f_unlink+0x16>
						) res = FR_DENIED;
   131b4:	2007      	movs	r0, #7
	LEAVE_FF(dj.fs, res);
   131b6:	e7b0      	b.n	1311a <f_unlink+0x16>
   131b8:	fffffda0 	.word	0xfffffda0
   131bc:	000116d5 	.word	0x000116d5
   131c0:	00012779 	.word	0x00012779
   131c4:	0001261d 	.word	0x0001261d
   131c8:	00012685 	.word	0x00012685
   131cc:	000115a5 	.word	0x000115a5
   131d0:	00011c21 	.word	0x00011c21
   131d4:	000124dd 	.word	0x000124dd
   131d8:	00011ec5 	.word	0x00011ec5

000131dc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
   131dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   131de:	46c6      	mov	lr, r8
   131e0:	b500      	push	{lr}
   131e2:	b084      	sub	sp, #16
   131e4:	0007      	movs	r7, r0
   131e6:	9201      	str	r2, [sp, #4]
	int n = 0;
	TCHAR c, *p = buff;
   131e8:	0005      	movs	r5, r0
	int n = 0;
   131ea:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
   131ec:	1e4b      	subs	r3, r1, #1
   131ee:	4698      	mov	r8, r3
		f_read(fil, s, 1, &rc);
   131f0:	4e0e      	ldr	r6, [pc, #56]	; (1322c <f_gets+0x50>)
	while (n < len - 1) {			/* Read bytes until buffer gets filled */
   131f2:	4544      	cmp	r4, r8
   131f4:	da0e      	bge.n	13214 <f_gets+0x38>
		f_read(fil, s, 1, &rc);
   131f6:	ab02      	add	r3, sp, #8
   131f8:	2201      	movs	r2, #1
   131fa:	a903      	add	r1, sp, #12
   131fc:	9801      	ldr	r0, [sp, #4]
   131fe:	47b0      	blx	r6
		if (rc != 1) break;			/* Break on EOF or error */
   13200:	9b02      	ldr	r3, [sp, #8]
   13202:	2b01      	cmp	r3, #1
   13204:	d106      	bne.n	13214 <f_gets+0x38>
		c = s[0];
   13206:	ab03      	add	r3, sp, #12
   13208:	781b      	ldrb	r3, [r3, #0]
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
   1320a:	3501      	adds	r5, #1
   1320c:	553b      	strb	r3, [r7, r4]
		n++;
   1320e:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
   13210:	2b0a      	cmp	r3, #10
   13212:	d1ee      	bne.n	131f2 <f_gets+0x16>
	}
	*p = 0;
   13214:	2300      	movs	r3, #0
   13216:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
   13218:	1e63      	subs	r3, r4, #1
   1321a:	419c      	sbcs	r4, r3
   1321c:	4264      	negs	r4, r4
   1321e:	4027      	ands	r7, r4
}
   13220:	0038      	movs	r0, r7
   13222:	b004      	add	sp, #16
   13224:	bc04      	pop	{r2}
   13226:	4690      	mov	r8, r2
   13228:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1322a:	46c0      	nop			; (mov r8, r8)
   1322c:	00012c75 	.word	0x00012c75

00013230 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   13230:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   13232:	287f      	cmp	r0, #127	; 0x7f
   13234:	d911      	bls.n	1325a <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   13236:	2900      	cmp	r1, #0
   13238:	d111      	bne.n	1325e <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   1323a:	28c7      	cmp	r0, #199	; 0xc7
   1323c:	d017      	beq.n	1326e <ff_convert+0x3e>
   1323e:	4a0d      	ldr	r2, [pc, #52]	; (13274 <ff_convert+0x44>)
   13240:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   13242:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   13244:	8811      	ldrh	r1, [r2, #0]
   13246:	4281      	cmp	r1, r0
   13248:	d004      	beq.n	13254 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   1324a:	3301      	adds	r3, #1
   1324c:	b29b      	uxth	r3, r3
   1324e:	3202      	adds	r2, #2
   13250:	2b80      	cmp	r3, #128	; 0x80
   13252:	d1f7      	bne.n	13244 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   13254:	3380      	adds	r3, #128	; 0x80
   13256:	20ff      	movs	r0, #255	; 0xff
   13258:	4003      	ands	r3, r0
		}
	}

	return c;
}
   1325a:	0018      	movs	r0, r3
   1325c:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   1325e:	2300      	movs	r3, #0
   13260:	28ff      	cmp	r0, #255	; 0xff
   13262:	d8fa      	bhi.n	1325a <ff_convert+0x2a>
   13264:	3880      	subs	r0, #128	; 0x80
   13266:	0040      	lsls	r0, r0, #1
   13268:	4b02      	ldr	r3, [pc, #8]	; (13274 <ff_convert+0x44>)
   1326a:	5ac3      	ldrh	r3, [r0, r3]
   1326c:	e7f5      	b.n	1325a <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   1326e:	2300      	movs	r3, #0
   13270:	e7f0      	b.n	13254 <ff_convert+0x24>
   13272:	46c0      	nop			; (mov r8, r8)
   13274:	0001c518 	.word	0x0001c518

00013278 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   13278:	2861      	cmp	r0, #97	; 0x61
   1327a:	d014      	beq.n	132a6 <ff_wtoupper+0x2e>
   1327c:	4b0b      	ldr	r3, [pc, #44]	; (132ac <ff_wtoupper+0x34>)
   1327e:	3304      	adds	r3, #4
   13280:	2101      	movs	r1, #1
   13282:	2262      	movs	r2, #98	; 0x62
   13284:	4290      	cmp	r0, r2
   13286:	d007      	beq.n	13298 <ff_wtoupper+0x20>
   13288:	3101      	adds	r1, #1
   1328a:	3302      	adds	r3, #2
   1328c:	1e9a      	subs	r2, r3, #2
   1328e:	8812      	ldrh	r2, [r2, #0]
   13290:	2a00      	cmp	r2, #0
   13292:	d1f7      	bne.n	13284 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   13294:	0003      	movs	r3, r0
   13296:	e004      	b.n	132a2 <ff_wtoupper+0x2a>
   13298:	1e03      	subs	r3, r0, #0
   1329a:	d002      	beq.n	132a2 <ff_wtoupper+0x2a>
   1329c:	0049      	lsls	r1, r1, #1
   1329e:	4b04      	ldr	r3, [pc, #16]	; (132b0 <ff_wtoupper+0x38>)
   132a0:	5acb      	ldrh	r3, [r1, r3]
}
   132a2:	0018      	movs	r0, r3
   132a4:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   132a6:	2100      	movs	r1, #0
   132a8:	e7f8      	b.n	1329c <ff_wtoupper+0x24>
   132aa:	46c0      	nop			; (mov r8, r8)
   132ac:	0001c618 	.word	0x0001c618
   132b0:	0001c7f8 	.word	0x0001c7f8

000132b4 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   132b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   132b6:	46de      	mov	lr, fp
   132b8:	4657      	mov	r7, sl
   132ba:	464e      	mov	r6, r9
   132bc:	4645      	mov	r5, r8
   132be:	b5e0      	push	{r5, r6, r7, lr}
   132c0:	b083      	sub	sp, #12
   132c2:	0007      	movs	r7, r0
   132c4:	4688      	mov	r8, r1
   132c6:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   132c8:	2400      	movs	r4, #0
   132ca:	2900      	cmp	r1, #0
   132cc:	dd18      	ble.n	13300 <sendPacket+0x4c>
   132ce:	4b15      	ldr	r3, [pc, #84]	; (13324 <sendPacket+0x70>)
   132d0:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   132d2:	4b15      	ldr	r3, [pc, #84]	; (13328 <sendPacket+0x74>)
   132d4:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   132d6:	9801      	ldr	r0, [sp, #4]
   132d8:	47d0      	blx	sl
   132da:	2800      	cmp	r0, #0
   132dc:	d110      	bne.n	13300 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   132de:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   132e0:	68f3      	ldr	r3, [r6, #12]
   132e2:	4699      	mov	r9, r3
   132e4:	693b      	ldr	r3, [r7, #16]
   132e6:	191d      	adds	r5, r3, r4
   132e8:	9801      	ldr	r0, [sp, #4]
   132ea:	47d8      	blx	fp
   132ec:	0003      	movs	r3, r0
   132ee:	4642      	mov	r2, r8
   132f0:	0029      	movs	r1, r5
   132f2:	0030      	movs	r0, r6
   132f4:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   132f6:	2800      	cmp	r0, #0
   132f8:	db02      	blt.n	13300 <sendPacket+0x4c>
            break;
        sent += rc;
   132fa:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   132fc:	45a0      	cmp	r8, r4
   132fe:	dcea      	bgt.n	132d6 <sendPacket+0x22>
    }
    if (sent == length)
   13300:	45a0      	cmp	r8, r4
   13302:	d10c      	bne.n	1331e <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   13304:	69b9      	ldr	r1, [r7, #24]
   13306:	0038      	movs	r0, r7
   13308:	3054      	adds	r0, #84	; 0x54
   1330a:	4b08      	ldr	r3, [pc, #32]	; (1332c <sendPacket+0x78>)
   1330c:	4798      	blx	r3
        rc = SUCCESS;
   1330e:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   13310:	b003      	add	sp, #12
   13312:	bc3c      	pop	{r2, r3, r4, r5}
   13314:	4690      	mov	r8, r2
   13316:	4699      	mov	r9, r3
   13318:	46a2      	mov	sl, r4
   1331a:	46ab      	mov	fp, r5
   1331c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   1331e:	2001      	movs	r0, #1
   13320:	4240      	negs	r0, r0
    return rc;
   13322:	e7f5      	b.n	13310 <sendPacket+0x5c>
   13324:	00013c31 	.word	0x00013c31
   13328:	00013c65 	.word	0x00013c65
   1332c:	00013c51 	.word	0x00013c51

00013330 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   13330:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   13332:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   13334:	2100      	movs	r1, #0
   13336:	6241      	str	r1, [r0, #36]	; 0x24
   13338:	62c1      	str	r1, [r0, #44]	; 0x2c
   1333a:	6341      	str	r1, [r0, #52]	; 0x34
   1333c:	63c1      	str	r1, [r0, #60]	; 0x3c
   1333e:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   13340:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   13342:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   13344:	9b02      	ldr	r3, [sp, #8]
   13346:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   13348:	9b03      	ldr	r3, [sp, #12]
   1334a:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   1334c:	9b04      	ldr	r3, [sp, #16]
   1334e:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   13350:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   13352:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   13354:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   13356:	2301      	movs	r3, #1
   13358:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   1335a:	3054      	adds	r0, #84	; 0x54
   1335c:	4b01      	ldr	r3, [pc, #4]	; (13364 <MQTTClientInit+0x34>)
   1335e:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   13360:	bd10      	pop	{r4, pc}
   13362:	46c0      	nop			; (mov r8, r8)
   13364:	00013c79 	.word	0x00013c79

00013368 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   13368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1336a:	46de      	mov	lr, fp
   1336c:	4657      	mov	r7, sl
   1336e:	464e      	mov	r6, r9
   13370:	4645      	mov	r5, r8
   13372:	b5e0      	push	{r5, r6, r7, lr}
   13374:	b085      	sub	sp, #20
   13376:	4682      	mov	sl, r0
   13378:	000f      	movs	r7, r1
   1337a:	4691      	mov	r9, r2
   1337c:	0004      	movs	r4, r0
   1337e:	3424      	adds	r4, #36	; 0x24
   13380:	234c      	movs	r3, #76	; 0x4c
   13382:	4453      	add	r3, sl
   13384:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   13386:	2301      	movs	r3, #1
   13388:	425b      	negs	r3, r3
   1338a:	9301      	str	r3, [sp, #4]
   1338c:	e056      	b.n	1343c <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   1338e:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   13390:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   13392:	687a      	ldr	r2, [r7, #4]
   13394:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   13396:	780a      	ldrb	r2, [r1, #0]
   13398:	2a00      	cmp	r2, #0
   1339a:	d04a      	beq.n	13432 <deliverMessage+0xca>
   1339c:	42b3      	cmp	r3, r6
   1339e:	d24a      	bcs.n	13436 <deliverMessage+0xce>
   133a0:	3101      	adds	r1, #1
   133a2:	1e70      	subs	r0, r6, #1
   133a4:	e008      	b.n	133b8 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   133a6:	2a2f      	cmp	r2, #47	; 0x2f
   133a8:	d10f      	bne.n	133ca <deliverMessage+0x62>
        curn++;
   133aa:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   133ac:	780a      	ldrb	r2, [r1, #0]
   133ae:	2a00      	cmp	r2, #0
   133b0:	d03f      	beq.n	13432 <deliverMessage+0xca>
   133b2:	429e      	cmp	r6, r3
   133b4:	d93f      	bls.n	13436 <deliverMessage+0xce>
   133b6:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   133b8:	781d      	ldrb	r5, [r3, #0]
   133ba:	2d2f      	cmp	r5, #47	; 0x2f
   133bc:	d0f3      	beq.n	133a6 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   133be:	2a2b      	cmp	r2, #43	; 0x2b
   133c0:	d008      	beq.n	133d4 <deliverMessage+0x6c>
   133c2:	2a23      	cmp	r2, #35	; 0x23
   133c4:	d013      	beq.n	133ee <deliverMessage+0x86>
   133c6:	4295      	cmp	r5, r2
   133c8:	d0ef      	beq.n	133aa <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   133ca:	429e      	cmp	r6, r3
   133cc:	d133      	bne.n	13436 <deliverMessage+0xce>
   133ce:	2a00      	cmp	r2, #0
   133d0:	d03d      	beq.n	1344e <deliverMessage+0xe6>
   133d2:	e030      	b.n	13436 <deliverMessage+0xce>
            char* nextpos = curn + 1;
   133d4:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   133d6:	42ae      	cmp	r6, r5
   133d8:	d927      	bls.n	1342a <deliverMessage+0xc2>
   133da:	785a      	ldrb	r2, [r3, #1]
   133dc:	2a2f      	cmp	r2, #47	; 0x2f
   133de:	d01f      	beq.n	13420 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   133e0:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   133e2:	4283      	cmp	r3, r0
   133e4:	d0e1      	beq.n	133aa <deliverMessage+0x42>
   133e6:	785a      	ldrb	r2, [r3, #1]
   133e8:	2a2f      	cmp	r2, #47	; 0x2f
   133ea:	d1f9      	bne.n	133e0 <deliverMessage+0x78>
   133ec:	e7dd      	b.n	133aa <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   133ee:	1e73      	subs	r3, r6, #1
   133f0:	e7db      	b.n	133aa <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   133f2:	9b01      	ldr	r3, [sp, #4]
   133f4:	3301      	adds	r3, #1
   133f6:	d007      	beq.n	13408 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   133f8:	9801      	ldr	r0, [sp, #4]
   133fa:	b005      	add	sp, #20
   133fc:	bc3c      	pop	{r2, r3, r4, r5}
   133fe:	4690      	mov	r8, r2
   13400:	4699      	mov	r9, r3
   13402:	46a2      	mov	sl, r4
   13404:	46ab      	mov	fp, r5
   13406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   13408:	4653      	mov	r3, sl
   1340a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1340c:	2b00      	cmp	r3, #0
   1340e:	d0f3      	beq.n	133f8 <deliverMessage+0x90>
    md->topicName = aTopicName;
   13410:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   13412:	464a      	mov	r2, r9
   13414:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   13416:	a802      	add	r0, sp, #8
   13418:	4798      	blx	r3
        rc = SUCCESS;
   1341a:	2300      	movs	r3, #0
   1341c:	9301      	str	r3, [sp, #4]
    return rc;
   1341e:	e7eb      	b.n	133f8 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   13420:	780a      	ldrb	r2, [r1, #0]
   13422:	2a00      	cmp	r2, #0
   13424:	d007      	beq.n	13436 <deliverMessage+0xce>
        curn++;
   13426:	002b      	movs	r3, r5
   13428:	e7c5      	b.n	133b6 <deliverMessage+0x4e>
   1342a:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   1342c:	780a      	ldrb	r2, [r1, #0]
   1342e:	2a00      	cmp	r2, #0
   13430:	d101      	bne.n	13436 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   13432:	429e      	cmp	r6, r3
   13434:	d00b      	beq.n	1344e <deliverMessage+0xe6>
   13436:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   13438:	4544      	cmp	r4, r8
   1343a:	d0da      	beq.n	133f2 <deliverMessage+0x8a>
   1343c:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1343e:	6821      	ldr	r1, [r4, #0]
   13440:	2900      	cmp	r1, #0
   13442:	d0f8      	beq.n	13436 <deliverMessage+0xce>
   13444:	0038      	movs	r0, r7
   13446:	4b08      	ldr	r3, [pc, #32]	; (13468 <deliverMessage+0x100>)
   13448:	4798      	blx	r3
   1344a:	2800      	cmp	r0, #0
   1344c:	d09f      	beq.n	1338e <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   1344e:	465b      	mov	r3, fp
   13450:	685b      	ldr	r3, [r3, #4]
   13452:	2b00      	cmp	r3, #0
   13454:	d0ef      	beq.n	13436 <deliverMessage+0xce>
    md->topicName = aTopicName;
   13456:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   13458:	464a      	mov	r2, r9
   1345a:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   1345c:	a802      	add	r0, sp, #8
   1345e:	4798      	blx	r3
                rc = SUCCESS;
   13460:	2300      	movs	r3, #0
   13462:	9301      	str	r3, [sp, #4]
   13464:	e7e7      	b.n	13436 <deliverMessage+0xce>
   13466:	46c0      	nop			; (mov r8, r8)
   13468:	0001454d 	.word	0x0001454d

0001346c <keepalive>:


int keepalive(MQTTClient* c)
{
   1346c:	b510      	push	{r4, lr}
   1346e:	b082      	sub	sp, #8
   13470:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   13472:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   13474:	69a3      	ldr	r3, [r4, #24]
   13476:	2b00      	cmp	r3, #0
   13478:	d101      	bne.n	1347e <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   1347a:	b002      	add	sp, #8
   1347c:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   1347e:	0020      	movs	r0, r4
   13480:	3054      	adds	r0, #84	; 0x54
   13482:	4b14      	ldr	r3, [pc, #80]	; (134d4 <keepalive+0x68>)
   13484:	4798      	blx	r3
   13486:	2800      	cmp	r0, #0
   13488:	d01d      	beq.n	134c6 <keepalive+0x5a>
        if (!c->ping_outstanding)
   1348a:	7f23      	ldrb	r3, [r4, #28]
   1348c:	2b00      	cmp	r3, #0
   1348e:	d11d      	bne.n	134cc <keepalive+0x60>
            TimerInit(&timer);
   13490:	4668      	mov	r0, sp
   13492:	4b11      	ldr	r3, [pc, #68]	; (134d8 <keepalive+0x6c>)
   13494:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   13496:	21fa      	movs	r1, #250	; 0xfa
   13498:	0089      	lsls	r1, r1, #2
   1349a:	4668      	mov	r0, sp
   1349c:	4b0f      	ldr	r3, [pc, #60]	; (134dc <keepalive+0x70>)
   1349e:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   134a0:	68a1      	ldr	r1, [r4, #8]
   134a2:	6920      	ldr	r0, [r4, #16]
   134a4:	4b0e      	ldr	r3, [pc, #56]	; (134e0 <keepalive+0x74>)
   134a6:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   134a8:	2800      	cmp	r0, #0
   134aa:	dd09      	ble.n	134c0 <keepalive+0x54>
   134ac:	466a      	mov	r2, sp
   134ae:	0001      	movs	r1, r0
   134b0:	0020      	movs	r0, r4
   134b2:	4b0c      	ldr	r3, [pc, #48]	; (134e4 <keepalive+0x78>)
   134b4:	4798      	blx	r3
   134b6:	2800      	cmp	r0, #0
   134b8:	d1df      	bne.n	1347a <keepalive+0xe>
                c->ping_outstanding = 1;
   134ba:	2301      	movs	r3, #1
   134bc:	7723      	strb	r3, [r4, #28]
   134be:	e7dc      	b.n	1347a <keepalive+0xe>
    int rc = FAILURE;
   134c0:	2001      	movs	r0, #1
   134c2:	4240      	negs	r0, r0
   134c4:	e7d9      	b.n	1347a <keepalive+0xe>
   134c6:	2001      	movs	r0, #1
   134c8:	4240      	negs	r0, r0
   134ca:	e7d6      	b.n	1347a <keepalive+0xe>
   134cc:	2001      	movs	r0, #1
   134ce:	4240      	negs	r0, r0
    return rc;
   134d0:	e7d3      	b.n	1347a <keepalive+0xe>
   134d2:	46c0      	nop			; (mov r8, r8)
   134d4:	00013c31 	.word	0x00013c31
   134d8:	00013c79 	.word	0x00013c79
   134dc:	00013c41 	.word	0x00013c41
   134e0:	00014235 	.word	0x00014235
   134e4:	000132b5 	.word	0x000132b5

000134e8 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   134e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   134ea:	46de      	mov	lr, fp
   134ec:	464f      	mov	r7, r9
   134ee:	4646      	mov	r6, r8
   134f0:	b5c0      	push	{r6, r7, lr}
   134f2:	b090      	sub	sp, #64	; 0x40
   134f4:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   134f6:	6d05      	ldr	r5, [r0, #80]	; 0x50
   134f8:	68ae      	ldr	r6, [r5, #8]
   134fa:	6947      	ldr	r7, [r0, #20]
   134fc:	9107      	str	r1, [sp, #28]
   134fe:	0008      	movs	r0, r1
   13500:	4b65      	ldr	r3, [pc, #404]	; (13698 <cycle+0x1b0>)
   13502:	4798      	blx	r3
   13504:	0003      	movs	r3, r0
   13506:	2201      	movs	r2, #1
   13508:	0039      	movs	r1, r7
   1350a:	0028      	movs	r0, r5
   1350c:	47b0      	blx	r6
   1350e:	0005      	movs	r5, r0
   13510:	2801      	cmp	r0, #1
   13512:	d000      	beq.n	13516 <cycle+0x2e>
   13514:	e0bd      	b.n	13692 <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   13516:	9807      	ldr	r0, [sp, #28]
   13518:	4b5f      	ldr	r3, [pc, #380]	; (13698 <cycle+0x1b0>)
   1351a:	4798      	blx	r3
   1351c:	9006      	str	r0, [sp, #24]
   1351e:	2604      	movs	r6, #4
    *value = 0;
   13520:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   13522:	237f      	movs	r3, #127	; 0x7f
   13524:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   13526:	6d20      	ldr	r0, [r4, #80]	; 0x50
   13528:	6883      	ldr	r3, [r0, #8]
   1352a:	4698      	mov	r8, r3
   1352c:	9b06      	ldr	r3, [sp, #24]
   1352e:	2201      	movs	r2, #1
   13530:	a90c      	add	r1, sp, #48	; 0x30
   13532:	47c0      	blx	r8
        if (rc != 1)
   13534:	2801      	cmp	r0, #1
   13536:	d10e      	bne.n	13556 <cycle+0x6e>
        *value += (i & 127) * multiplier;
   13538:	ab02      	add	r3, sp, #8
   1353a:	2228      	movs	r2, #40	; 0x28
   1353c:	189b      	adds	r3, r3, r2
   1353e:	781b      	ldrb	r3, [r3, #0]
   13540:	465a      	mov	r2, fp
   13542:	401a      	ands	r2, r3
   13544:	436a      	muls	r2, r5
   13546:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   13548:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   1354a:	b25b      	sxtb	r3, r3
   1354c:	2b00      	cmp	r3, #0
   1354e:	da02      	bge.n	13556 <cycle+0x6e>
   13550:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   13552:	2e00      	cmp	r6, #0
   13554:	d1e7      	bne.n	13526 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   13556:	6963      	ldr	r3, [r4, #20]
   13558:	1c58      	adds	r0, r3, #1
   1355a:	0039      	movs	r1, r7
   1355c:	4b4f      	ldr	r3, [pc, #316]	; (1369c <cycle+0x1b4>)
   1355e:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   13560:	2f00      	cmp	r7, #0
   13562:	dd10      	ble.n	13586 <cycle+0x9e>
   13564:	6d26      	ldr	r6, [r4, #80]	; 0x50
   13566:	68b3      	ldr	r3, [r6, #8]
   13568:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   1356a:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   1356c:	6963      	ldr	r3, [r4, #20]
   1356e:	181d      	adds	r5, r3, r0
   13570:	9807      	ldr	r0, [sp, #28]
   13572:	4b49      	ldr	r3, [pc, #292]	; (13698 <cycle+0x1b0>)
   13574:	4798      	blx	r3
   13576:	0003      	movs	r3, r0
   13578:	003a      	movs	r2, r7
   1357a:	0029      	movs	r1, r5
   1357c:	0030      	movs	r0, r6
   1357e:	47c8      	blx	r9
   13580:	42b8      	cmp	r0, r7
   13582:	d000      	beq.n	13586 <cycle+0x9e>
   13584:	e085      	b.n	13692 <cycle+0x1aa>
    header.byte = c->readbuf[0];
   13586:	6963      	ldr	r3, [r4, #20]
   13588:	781d      	ldrb	r5, [r3, #0]
   1358a:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   1358c:	2d05      	cmp	r5, #5
   1358e:	d051      	beq.n	13634 <cycle+0x14c>
   13590:	2d0d      	cmp	r5, #13
   13592:	d06e      	beq.n	13672 <cycle+0x18a>
        rc = SUCCESS;
   13594:	2600      	movs	r6, #0
    switch (packet_type)
   13596:	2d03      	cmp	r5, #3
   13598:	d16e      	bne.n	13678 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   1359a:	68e2      	ldr	r2, [r4, #12]
   1359c:	9204      	str	r2, [sp, #16]
   1359e:	9303      	str	r3, [sp, #12]
   135a0:	ab0f      	add	r3, sp, #60	; 0x3c
   135a2:	9302      	str	r3, [sp, #8]
   135a4:	ab0e      	add	r3, sp, #56	; 0x38
   135a6:	9301      	str	r3, [sp, #4]
   135a8:	ab09      	add	r3, sp, #36	; 0x24
   135aa:	9300      	str	r3, [sp, #0]
   135ac:	ab0d      	add	r3, sp, #52	; 0x34
   135ae:	2229      	movs	r2, #41	; 0x29
   135b0:	a902      	add	r1, sp, #8
   135b2:	468c      	mov	ip, r1
   135b4:	4462      	add	r2, ip
   135b6:	a908      	add	r1, sp, #32
   135b8:	202a      	movs	r0, #42	; 0x2a
   135ba:	4460      	add	r0, ip
   135bc:	4e38      	ldr	r6, [pc, #224]	; (136a0 <cycle+0x1b8>)
   135be:	47b0      	blx	r6
        rc = SUCCESS;
   135c0:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   135c2:	2801      	cmp	r0, #1
   135c4:	d15b      	bne.n	1367e <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   135c6:	ae0c      	add	r6, sp, #48	; 0x30
   135c8:	ab02      	add	r3, sp, #8
   135ca:	7e1b      	ldrb	r3, [r3, #24]
   135cc:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   135ce:	0032      	movs	r2, r6
   135d0:	a909      	add	r1, sp, #36	; 0x24
   135d2:	0020      	movs	r0, r4
   135d4:	4b33      	ldr	r3, [pc, #204]	; (136a4 <cycle+0x1bc>)
   135d6:	4798      	blx	r3
            if (msg.qos != QOS0)
   135d8:	7833      	ldrb	r3, [r6, #0]
   135da:	2b00      	cmp	r3, #0
   135dc:	d028      	beq.n	13630 <cycle+0x148>
            {
                if (msg.qos == QOS1)
   135de:	2b01      	cmp	r3, #1
   135e0:	d004      	beq.n	135ec <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   135e2:	2b02      	cmp	r3, #2
   135e4:	d016      	beq.n	13614 <cycle+0x12c>
   135e6:	2601      	movs	r6, #1
   135e8:	4276      	negs	r6, r6
   135ea:	e048      	b.n	1367e <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   135ec:	ab0c      	add	r3, sp, #48	; 0x30
   135ee:	889b      	ldrh	r3, [r3, #4]
   135f0:	9300      	str	r3, [sp, #0]
   135f2:	2300      	movs	r3, #0
   135f4:	2204      	movs	r2, #4
   135f6:	68a1      	ldr	r1, [r4, #8]
   135f8:	6920      	ldr	r0, [r4, #16]
   135fa:	4e2b      	ldr	r6, [pc, #172]	; (136a8 <cycle+0x1c0>)
   135fc:	47b0      	blx	r6
   135fe:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   13600:	2900      	cmp	r1, #0
   13602:	dd12      	ble.n	1362a <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   13604:	9a07      	ldr	r2, [sp, #28]
   13606:	0020      	movs	r0, r4
   13608:	4b28      	ldr	r3, [pc, #160]	; (136ac <cycle+0x1c4>)
   1360a:	4798      	blx	r3
   1360c:	0006      	movs	r6, r0
                if (rc == FAILURE)
   1360e:	1c43      	adds	r3, r0, #1
   13610:	d132      	bne.n	13678 <cycle+0x190>
   13612:	e034      	b.n	1367e <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   13614:	ab0c      	add	r3, sp, #48	; 0x30
   13616:	889b      	ldrh	r3, [r3, #4]
   13618:	9300      	str	r3, [sp, #0]
   1361a:	2300      	movs	r3, #0
   1361c:	2205      	movs	r2, #5
   1361e:	68a1      	ldr	r1, [r4, #8]
   13620:	6920      	ldr	r0, [r4, #16]
   13622:	4e21      	ldr	r6, [pc, #132]	; (136a8 <cycle+0x1c0>)
   13624:	47b0      	blx	r6
   13626:	0001      	movs	r1, r0
   13628:	e7ea      	b.n	13600 <cycle+0x118>
   1362a:	2601      	movs	r6, #1
   1362c:	4276      	negs	r6, r6
   1362e:	e026      	b.n	1367e <cycle+0x196>
        rc = SUCCESS;
   13630:	2600      	movs	r6, #0
   13632:	e021      	b.n	13678 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   13634:	68e2      	ldr	r2, [r4, #12]
   13636:	9200      	str	r2, [sp, #0]
   13638:	aa0c      	add	r2, sp, #48	; 0x30
   1363a:	a908      	add	r1, sp, #32
   1363c:	a809      	add	r0, sp, #36	; 0x24
   1363e:	4e1c      	ldr	r6, [pc, #112]	; (136b0 <cycle+0x1c8>)
   13640:	47b0      	blx	r6
   13642:	2801      	cmp	r0, #1
   13644:	d002      	beq.n	1364c <cycle+0x164>
   13646:	2601      	movs	r6, #1
   13648:	4276      	negs	r6, r6
   1364a:	e01b      	b.n	13684 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   1364c:	ab0c      	add	r3, sp, #48	; 0x30
   1364e:	881b      	ldrh	r3, [r3, #0]
   13650:	9300      	str	r3, [sp, #0]
   13652:	2300      	movs	r3, #0
   13654:	2206      	movs	r2, #6
   13656:	68a1      	ldr	r1, [r4, #8]
   13658:	6920      	ldr	r0, [r4, #16]
   1365a:	4e13      	ldr	r6, [pc, #76]	; (136a8 <cycle+0x1c0>)
   1365c:	47b0      	blx	r6
   1365e:	2800      	cmp	r0, #0
   13660:	ddf1      	ble.n	13646 <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   13662:	9a07      	ldr	r2, [sp, #28]
   13664:	0001      	movs	r1, r0
   13666:	0020      	movs	r0, r4
   13668:	4b10      	ldr	r3, [pc, #64]	; (136ac <cycle+0x1c4>)
   1366a:	4798      	blx	r3
   1366c:	1e06      	subs	r6, r0, #0
   1366e:	d1ea      	bne.n	13646 <cycle+0x15e>
   13670:	e002      	b.n	13678 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   13672:	2300      	movs	r3, #0
   13674:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   13676:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   13678:	0020      	movs	r0, r4
   1367a:	4b0e      	ldr	r3, [pc, #56]	; (136b4 <cycle+0x1cc>)
   1367c:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   1367e:	2e00      	cmp	r6, #0
   13680:	d100      	bne.n	13684 <cycle+0x19c>
   13682:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   13684:	0030      	movs	r0, r6
   13686:	b010      	add	sp, #64	; 0x40
   13688:	bc1c      	pop	{r2, r3, r4}
   1368a:	4690      	mov	r8, r2
   1368c:	4699      	mov	r9, r3
   1368e:	46a3      	mov	fp, r4
   13690:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13692:	4d09      	ldr	r5, [pc, #36]	; (136b8 <cycle+0x1d0>)
        rc = SUCCESS;
   13694:	2600      	movs	r6, #0
   13696:	e7ef      	b.n	13678 <cycle+0x190>
   13698:	00013c65 	.word	0x00013c65
   1369c:	0001434d 	.word	0x0001434d
   136a0:	00014245 	.word	0x00014245
   136a4:	00013369 	.word	0x00013369
   136a8:	00014681 	.word	0x00014681
   136ac:	000132b5 	.word	0x000132b5
   136b0:	000142dd 	.word	0x000142dd
   136b4:	0001346d 	.word	0x0001346d
   136b8:	0000ffff 	.word	0x0000ffff

000136bc <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   136bc:	b570      	push	{r4, r5, r6, lr}
   136be:	b082      	sub	sp, #8
   136c0:	0005      	movs	r5, r0
   136c2:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   136c4:	4668      	mov	r0, sp
   136c6:	4b0a      	ldr	r3, [pc, #40]	; (136f0 <MQTTYield+0x34>)
   136c8:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   136ca:	0021      	movs	r1, r4
   136cc:	4668      	mov	r0, sp
   136ce:	4b09      	ldr	r3, [pc, #36]	; (136f4 <MQTTYield+0x38>)
   136d0:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   136d2:	4c09      	ldr	r4, [pc, #36]	; (136f8 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   136d4:	4e09      	ldr	r6, [pc, #36]	; (136fc <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   136d6:	4669      	mov	r1, sp
   136d8:	0028      	movs	r0, r5
   136da:	47a0      	blx	r4
   136dc:	1c43      	adds	r3, r0, #1
   136de:	d004      	beq.n	136ea <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   136e0:	4668      	mov	r0, sp
   136e2:	47b0      	blx	r6
   136e4:	2800      	cmp	r0, #0
   136e6:	d0f6      	beq.n	136d6 <MQTTYield+0x1a>
    int rc = SUCCESS;
   136e8:	2000      	movs	r0, #0
        
    return rc;
}
   136ea:	b002      	add	sp, #8
   136ec:	bd70      	pop	{r4, r5, r6, pc}
   136ee:	46c0      	nop			; (mov r8, r8)
   136f0:	00013c79 	.word	0x00013c79
   136f4:	00013c41 	.word	0x00013c41
   136f8:	000134e9 	.word	0x000134e9
   136fc:	00013c31 	.word	0x00013c31

00013700 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   13700:	b5f0      	push	{r4, r5, r6, r7, lr}
   13702:	b083      	sub	sp, #12
   13704:	9001      	str	r0, [sp, #4]
   13706:	000e      	movs	r6, r1
   13708:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   1370a:	2401      	movs	r4, #1
   1370c:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   1370e:	4f08      	ldr	r7, [pc, #32]	; (13730 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   13710:	4d08      	ldr	r5, [pc, #32]	; (13734 <waitfor+0x34>)
        if (TimerIsExpired(timer))
   13712:	9800      	ldr	r0, [sp, #0]
   13714:	47b8      	blx	r7
   13716:	2800      	cmp	r0, #0
   13718:	d106      	bne.n	13728 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   1371a:	9900      	ldr	r1, [sp, #0]
   1371c:	9801      	ldr	r0, [sp, #4]
   1371e:	47a8      	blx	r5
   13720:	0004      	movs	r4, r0
   13722:	42b0      	cmp	r0, r6
   13724:	d1f5      	bne.n	13712 <waitfor+0x12>
   13726:	0034      	movs	r4, r6
    
    return rc;
}
   13728:	0020      	movs	r0, r4
   1372a:	b003      	add	sp, #12
   1372c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1372e:	46c0      	nop			; (mov r8, r8)
   13730:	00013c31 	.word	0x00013c31
   13734:	000134e9 	.word	0x000134e9

00013738 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   13738:	b530      	push	{r4, r5, lr}
   1373a:	b09b      	sub	sp, #108	; 0x6c
   1373c:	0004      	movs	r4, r0
   1373e:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   13740:	2258      	movs	r2, #88	; 0x58
   13742:	4928      	ldr	r1, [pc, #160]	; (137e4 <MQTTConnect+0xac>)
   13744:	a802      	add	r0, sp, #8
   13746:	4b28      	ldr	r3, [pc, #160]	; (137e8 <MQTTConnect+0xb0>)
   13748:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   1374a:	6a23      	ldr	r3, [r4, #32]
   1374c:	2b00      	cmp	r3, #0
   1374e:	d13f      	bne.n	137d0 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   13750:	a818      	add	r0, sp, #96	; 0x60
   13752:	4b26      	ldr	r3, [pc, #152]	; (137ec <MQTTConnect+0xb4>)
   13754:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   13756:	6861      	ldr	r1, [r4, #4]
   13758:	a818      	add	r0, sp, #96	; 0x60
   1375a:	4b25      	ldr	r3, [pc, #148]	; (137f0 <MQTTConnect+0xb8>)
   1375c:	4798      	blx	r3

    if (options == 0)
   1375e:	2d00      	cmp	r5, #0
   13760:	d015      	beq.n	1378e <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   13762:	8b29      	ldrh	r1, [r5, #24]
   13764:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   13766:	0020      	movs	r0, r4
   13768:	3054      	adds	r0, #84	; 0x54
   1376a:	4b22      	ldr	r3, [pc, #136]	; (137f4 <MQTTConnect+0xbc>)
   1376c:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   1376e:	002a      	movs	r2, r5
   13770:	68a1      	ldr	r1, [r4, #8]
   13772:	6920      	ldr	r0, [r4, #16]
   13774:	4b20      	ldr	r3, [pc, #128]	; (137f8 <MQTTConnect+0xc0>)
   13776:	4798      	blx	r3
   13778:	2800      	cmp	r0, #0
   1377a:	dd2c      	ble.n	137d6 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   1377c:	aa18      	add	r2, sp, #96	; 0x60
   1377e:	0001      	movs	r1, r0
   13780:	0020      	movs	r0, r4
   13782:	4b1e      	ldr	r3, [pc, #120]	; (137fc <MQTTConnect+0xc4>)
   13784:	4798      	blx	r3
   13786:	2800      	cmp	r0, #0
   13788:	d003      	beq.n	13792 <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   1378a:	b01b      	add	sp, #108	; 0x6c
   1378c:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   1378e:	ad02      	add	r5, sp, #8
   13790:	e7e7      	b.n	13762 <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   13792:	aa18      	add	r2, sp, #96	; 0x60
   13794:	2102      	movs	r1, #2
   13796:	0020      	movs	r0, r4
   13798:	4b19      	ldr	r3, [pc, #100]	; (13800 <MQTTConnect+0xc8>)
   1379a:	4798      	blx	r3
   1379c:	2802      	cmp	r0, #2
   1379e:	d11d      	bne.n	137dc <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   137a0:	466b      	mov	r3, sp
   137a2:	1d99      	adds	r1, r3, #6
   137a4:	23ff      	movs	r3, #255	; 0xff
   137a6:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   137a8:	466b      	mov	r3, sp
   137aa:	1dd8      	adds	r0, r3, #7
   137ac:	2300      	movs	r3, #0
   137ae:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   137b0:	68e3      	ldr	r3, [r4, #12]
   137b2:	6962      	ldr	r2, [r4, #20]
   137b4:	4d13      	ldr	r5, [pc, #76]	; (13804 <MQTTConnect+0xcc>)
   137b6:	47a8      	blx	r5
   137b8:	2801      	cmp	r0, #1
   137ba:	d002      	beq.n	137c2 <MQTTConnect+0x8a>
            rc = FAILURE;
   137bc:	2001      	movs	r0, #1
   137be:	4240      	negs	r0, r0
   137c0:	e7e3      	b.n	1378a <MQTTConnect+0x52>
            rc = connack_rc;
   137c2:	466b      	mov	r3, sp
   137c4:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   137c6:	2800      	cmp	r0, #0
   137c8:	d1df      	bne.n	1378a <MQTTConnect+0x52>
        c->isconnected = 1;
   137ca:	2301      	movs	r3, #1
   137cc:	6223      	str	r3, [r4, #32]
    return rc;
   137ce:	e7dc      	b.n	1378a <MQTTConnect+0x52>
    int rc = FAILURE;
   137d0:	2001      	movs	r0, #1
   137d2:	4240      	negs	r0, r0
   137d4:	e7d9      	b.n	1378a <MQTTConnect+0x52>
   137d6:	2001      	movs	r0, #1
   137d8:	4240      	negs	r0, r0
   137da:	e7d6      	b.n	1378a <MQTTConnect+0x52>
        rc = FAILURE;
   137dc:	2001      	movs	r0, #1
   137de:	4240      	negs	r0, r0
   137e0:	e7d3      	b.n	1378a <MQTTConnect+0x52>
   137e2:	46c0      	nop			; (mov r8, r8)
   137e4:	0001c9d8 	.word	0x0001c9d8
   137e8:	00018fd5 	.word	0x00018fd5
   137ec:	00013c79 	.word	0x00013c79
   137f0:	00013c41 	.word	0x00013c41
   137f4:	00013c51 	.word	0x00013c51
   137f8:	00014051 	.word	0x00014051
   137fc:	000132b5 	.word	0x000132b5
   13800:	00013701 	.word	0x00013701
   13804:	00014199 	.word	0x00014199

00013808 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   13808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1380a:	b091      	sub	sp, #68	; 0x44
   1380c:	0004      	movs	r4, r0
   1380e:	000f      	movs	r7, r1
   13810:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   13812:	2300      	movs	r3, #0
   13814:	930c      	str	r3, [sp, #48]	; 0x30
   13816:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   13818:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   1381a:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1381c:	6a03      	ldr	r3, [r0, #32]
   1381e:	2b00      	cmp	r3, #0
   13820:	d05c      	beq.n	138dc <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   13822:	a80e      	add	r0, sp, #56	; 0x38
   13824:	4b32      	ldr	r3, [pc, #200]	; (138f0 <MQTTSubscribe+0xe8>)
   13826:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   13828:	6861      	ldr	r1, [r4, #4]
   1382a:	a80e      	add	r0, sp, #56	; 0x38
   1382c:	4b31      	ldr	r3, [pc, #196]	; (138f4 <MQTTSubscribe+0xec>)
   1382e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   13830:	6920      	ldr	r0, [r4, #16]
   13832:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   13834:	6823      	ldr	r3, [r4, #0]
   13836:	4a30      	ldr	r2, [pc, #192]	; (138f8 <MQTTSubscribe+0xf0>)
   13838:	4293      	cmp	r3, r2
   1383a:	d017      	beq.n	1386c <MQTTSubscribe+0x64>
   1383c:	3301      	adds	r3, #1
   1383e:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   13840:	b29b      	uxth	r3, r3
   13842:	aa0a      	add	r2, sp, #40	; 0x28
   13844:	9202      	str	r2, [sp, #8]
   13846:	aa0b      	add	r2, sp, #44	; 0x2c
   13848:	9201      	str	r2, [sp, #4]
   1384a:	2201      	movs	r2, #1
   1384c:	9200      	str	r2, [sp, #0]
   1384e:	2200      	movs	r2, #0
   13850:	4e2a      	ldr	r6, [pc, #168]	; (138fc <MQTTSubscribe+0xf4>)
   13852:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   13854:	2800      	cmp	r0, #0
   13856:	dd44      	ble.n	138e2 <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   13858:	aa0e      	add	r2, sp, #56	; 0x38
   1385a:	0001      	movs	r1, r0
   1385c:	0020      	movs	r0, r4
   1385e:	4b28      	ldr	r3, [pc, #160]	; (13900 <MQTTSubscribe+0xf8>)
   13860:	4798      	blx	r3
   13862:	1e06      	subs	r6, r0, #0
   13864:	d004      	beq.n	13870 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   13866:	0030      	movs	r0, r6
   13868:	b011      	add	sp, #68	; 0x44
   1386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1386c:	2301      	movs	r3, #1
   1386e:	e7e6      	b.n	1383e <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   13870:	aa0e      	add	r2, sp, #56	; 0x38
   13872:	2109      	movs	r1, #9
   13874:	0020      	movs	r0, r4
   13876:	4b23      	ldr	r3, [pc, #140]	; (13904 <MQTTSubscribe+0xfc>)
   13878:	4798      	blx	r3
   1387a:	2809      	cmp	r0, #9
   1387c:	d134      	bne.n	138e8 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   1387e:	2300      	movs	r3, #0
   13880:	9308      	str	r3, [sp, #32]
   13882:	3b01      	subs	r3, #1
   13884:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   13886:	68e3      	ldr	r3, [r4, #12]
   13888:	9301      	str	r3, [sp, #4]
   1388a:	6963      	ldr	r3, [r4, #20]
   1388c:	9300      	str	r3, [sp, #0]
   1388e:	ab09      	add	r3, sp, #36	; 0x24
   13890:	aa08      	add	r2, sp, #32
   13892:	2101      	movs	r1, #1
   13894:	300d      	adds	r0, #13
   13896:	ad02      	add	r5, sp, #8
   13898:	46ac      	mov	ip, r5
   1389a:	4460      	add	r0, ip
   1389c:	4d1a      	ldr	r5, [pc, #104]	; (13908 <MQTTSubscribe+0x100>)
   1389e:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   138a0:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   138a2:	2801      	cmp	r0, #1
   138a4:	d00e      	beq.n	138c4 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   138a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   138a8:	2b00      	cmp	r3, #0
   138aa:	d010      	beq.n	138ce <MQTTSubscribe+0xc6>
   138ac:	0022      	movs	r2, r4
   138ae:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   138b0:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   138b2:	6810      	ldr	r0, [r2, #0]
   138b4:	2800      	cmp	r0, #0
   138b6:	d00b      	beq.n	138d0 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   138b8:	3301      	adds	r3, #1
   138ba:	3208      	adds	r2, #8
   138bc:	2b05      	cmp	r3, #5
   138be:	d1f8      	bne.n	138b2 <MQTTSubscribe+0xaa>
   138c0:	000e      	movs	r6, r1
   138c2:	e7d0      	b.n	13866 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   138c4:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   138c6:	2980      	cmp	r1, #128	; 0x80
   138c8:	d1ed      	bne.n	138a6 <MQTTSubscribe+0x9e>
   138ca:	000e      	movs	r6, r1
   138cc:	e7cb      	b.n	13866 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   138ce:	0033      	movs	r3, r6
   138d0:	00db      	lsls	r3, r3, #3
   138d2:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   138d4:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   138d6:	9b05      	ldr	r3, [sp, #20]
   138d8:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   138da:	e7c4      	b.n	13866 <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   138dc:	2601      	movs	r6, #1
   138de:	4276      	negs	r6, r6
   138e0:	e7c1      	b.n	13866 <MQTTSubscribe+0x5e>
   138e2:	2601      	movs	r6, #1
   138e4:	4276      	negs	r6, r6
   138e6:	e7be      	b.n	13866 <MQTTSubscribe+0x5e>
        rc = FAILURE;
   138e8:	2601      	movs	r6, #1
   138ea:	4276      	negs	r6, r6
    return rc;
   138ec:	e7bb      	b.n	13866 <MQTTSubscribe+0x5e>
   138ee:	46c0      	nop			; (mov r8, r8)
   138f0:	00013c79 	.word	0x00013c79
   138f4:	00013c41 	.word	0x00013c41
   138f8:	0000ffff 	.word	0x0000ffff
   138fc:	00014719 	.word	0x00014719
   13900:	000132b5 	.word	0x000132b5
   13904:	00013701 	.word	0x00013701
   13908:	000147cd 	.word	0x000147cd

0001390c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   1390c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1390e:	b08f      	sub	sp, #60	; 0x3c
   13910:	0005      	movs	r5, r0
   13912:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   13914:	2300      	movs	r3, #0
   13916:	930a      	str	r3, [sp, #40]	; 0x28
   13918:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   1391a:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   1391c:	6a03      	ldr	r3, [r0, #32]
   1391e:	2b00      	cmp	r3, #0
   13920:	d062      	beq.n	139e8 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   13922:	a80c      	add	r0, sp, #48	; 0x30
   13924:	4b36      	ldr	r3, [pc, #216]	; (13a00 <MQTTPublish+0xf4>)
   13926:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   13928:	6869      	ldr	r1, [r5, #4]
   1392a:	a80c      	add	r0, sp, #48	; 0x30
   1392c:	4b35      	ldr	r3, [pc, #212]	; (13a04 <MQTTPublish+0xf8>)
   1392e:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   13930:	7823      	ldrb	r3, [r4, #0]
   13932:	3b01      	subs	r3, #1
   13934:	2b01      	cmp	r3, #1
   13936:	d921      	bls.n	1397c <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   13938:	7823      	ldrb	r3, [r4, #0]
   1393a:	68e2      	ldr	r2, [r4, #12]
   1393c:	9206      	str	r2, [sp, #24]
   1393e:	68a2      	ldr	r2, [r4, #8]
   13940:	9205      	str	r2, [sp, #20]
   13942:	aa09      	add	r2, sp, #36	; 0x24
   13944:	a902      	add	r1, sp, #8
   13946:	cac1      	ldmia	r2!, {r0, r6, r7}
   13948:	c1c1      	stmia	r1!, {r0, r6, r7}
   1394a:	88a2      	ldrh	r2, [r4, #4]
   1394c:	9201      	str	r2, [sp, #4]
   1394e:	7862      	ldrb	r2, [r4, #1]
   13950:	9200      	str	r2, [sp, #0]
   13952:	2200      	movs	r2, #0
   13954:	68a9      	ldr	r1, [r5, #8]
   13956:	6928      	ldr	r0, [r5, #16]
   13958:	4e2b      	ldr	r6, [pc, #172]	; (13a08 <MQTTPublish+0xfc>)
   1395a:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   1395c:	2800      	cmp	r0, #0
   1395e:	dd46      	ble.n	139ee <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   13960:	aa0c      	add	r2, sp, #48	; 0x30
   13962:	0001      	movs	r1, r0
   13964:	0028      	movs	r0, r5
   13966:	4b29      	ldr	r3, [pc, #164]	; (13a0c <MQTTPublish+0x100>)
   13968:	4798      	blx	r3
   1396a:	2800      	cmp	r0, #0
   1396c:	d104      	bne.n	13978 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   1396e:	7823      	ldrb	r3, [r4, #0]
   13970:	2b01      	cmp	r3, #1
   13972:	d00d      	beq.n	13990 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   13974:	2b02      	cmp	r3, #2
   13976:	d021      	beq.n	139bc <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   13978:	b00f      	add	sp, #60	; 0x3c
   1397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1397c:	682b      	ldr	r3, [r5, #0]
   1397e:	4a24      	ldr	r2, [pc, #144]	; (13a10 <MQTTPublish+0x104>)
   13980:	4293      	cmp	r3, r2
   13982:	d003      	beq.n	1398c <MQTTPublish+0x80>
   13984:	3301      	adds	r3, #1
   13986:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   13988:	80a3      	strh	r3, [r4, #4]
   1398a:	e7d5      	b.n	13938 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   1398c:	2301      	movs	r3, #1
   1398e:	e7fa      	b.n	13986 <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   13990:	aa0c      	add	r2, sp, #48	; 0x30
   13992:	2104      	movs	r1, #4
   13994:	0028      	movs	r0, r5
   13996:	4b1f      	ldr	r3, [pc, #124]	; (13a14 <MQTTPublish+0x108>)
   13998:	4798      	blx	r3
   1399a:	2804      	cmp	r0, #4
   1399c:	d12a      	bne.n	139f4 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   1399e:	696b      	ldr	r3, [r5, #20]
   139a0:	68ea      	ldr	r2, [r5, #12]
   139a2:	9200      	str	r2, [sp, #0]
   139a4:	2222      	movs	r2, #34	; 0x22
   139a6:	446a      	add	r2, sp
   139a8:	a908      	add	r1, sp, #32
   139aa:	301d      	adds	r0, #29
   139ac:	4468      	add	r0, sp
   139ae:	4c1a      	ldr	r4, [pc, #104]	; (13a18 <MQTTPublish+0x10c>)
   139b0:	47a0      	blx	r4
   139b2:	3801      	subs	r0, #1
   139b4:	1e43      	subs	r3, r0, #1
   139b6:	4198      	sbcs	r0, r3
   139b8:	4240      	negs	r0, r0
   139ba:	e7dd      	b.n	13978 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   139bc:	aa0c      	add	r2, sp, #48	; 0x30
   139be:	2107      	movs	r1, #7
   139c0:	0028      	movs	r0, r5
   139c2:	4b14      	ldr	r3, [pc, #80]	; (13a14 <MQTTPublish+0x108>)
   139c4:	4798      	blx	r3
   139c6:	2807      	cmp	r0, #7
   139c8:	d117      	bne.n	139fa <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   139ca:	696b      	ldr	r3, [r5, #20]
   139cc:	68ea      	ldr	r2, [r5, #12]
   139ce:	9200      	str	r2, [sp, #0]
   139d0:	2222      	movs	r2, #34	; 0x22
   139d2:	446a      	add	r2, sp
   139d4:	a908      	add	r1, sp, #32
   139d6:	301a      	adds	r0, #26
   139d8:	4468      	add	r0, sp
   139da:	4c0f      	ldr	r4, [pc, #60]	; (13a18 <MQTTPublish+0x10c>)
   139dc:	47a0      	blx	r4
   139de:	3801      	subs	r0, #1
   139e0:	1e43      	subs	r3, r0, #1
   139e2:	4198      	sbcs	r0, r3
   139e4:	4240      	negs	r0, r0
   139e6:	e7c7      	b.n	13978 <MQTTPublish+0x6c>
    int rc = FAILURE;
   139e8:	2001      	movs	r0, #1
   139ea:	4240      	negs	r0, r0
   139ec:	e7c4      	b.n	13978 <MQTTPublish+0x6c>
   139ee:	2001      	movs	r0, #1
   139f0:	4240      	negs	r0, r0
   139f2:	e7c1      	b.n	13978 <MQTTPublish+0x6c>
            rc = FAILURE;
   139f4:	2001      	movs	r0, #1
   139f6:	4240      	negs	r0, r0
   139f8:	e7be      	b.n	13978 <MQTTPublish+0x6c>
            rc = FAILURE;
   139fa:	2001      	movs	r0, #1
   139fc:	4240      	negs	r0, r0
    return rc;
   139fe:	e7bb      	b.n	13978 <MQTTPublish+0x6c>
   13a00:	00013c79 	.word	0x00013c79
   13a04:	00013c41 	.word	0x00013c41
   13a08:	000145b9 	.word	0x000145b9
   13a0c:	000132b5 	.word	0x000132b5
   13a10:	0000ffff 	.word	0x0000ffff
   13a14:	00013701 	.word	0x00013701
   13a18:	000142dd 	.word	0x000142dd

00013a1c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   13a1c:	b510      	push	{r4, lr}
   13a1e:	b082      	sub	sp, #8
   13a20:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   13a22:	4668      	mov	r0, sp
   13a24:	4b0b      	ldr	r3, [pc, #44]	; (13a54 <MQTTDisconnect+0x38>)
   13a26:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   13a28:	6861      	ldr	r1, [r4, #4]
   13a2a:	4668      	mov	r0, sp
   13a2c:	4b0a      	ldr	r3, [pc, #40]	; (13a58 <MQTTDisconnect+0x3c>)
   13a2e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   13a30:	68a1      	ldr	r1, [r4, #8]
   13a32:	6920      	ldr	r0, [r4, #16]
   13a34:	4b09      	ldr	r3, [pc, #36]	; (13a5c <MQTTDisconnect+0x40>)
   13a36:	4798      	blx	r3
    if (len > 0)
   13a38:	2800      	cmp	r0, #0
   13a3a:	dd08      	ble.n	13a4e <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   13a3c:	466a      	mov	r2, sp
   13a3e:	0001      	movs	r1, r0
   13a40:	0020      	movs	r0, r4
   13a42:	4b07      	ldr	r3, [pc, #28]	; (13a60 <MQTTDisconnect+0x44>)
   13a44:	4798      	blx	r3
        
    c->isconnected = 0;
   13a46:	2300      	movs	r3, #0
   13a48:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   13a4a:	b002      	add	sp, #8
   13a4c:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   13a4e:	2001      	movs	r0, #1
   13a50:	4240      	negs	r0, r0
   13a52:	e7f8      	b.n	13a46 <MQTTDisconnect+0x2a>
   13a54:	00013c79 	.word	0x00013c79
   13a58:	00013c41 	.word	0x00013c41
   13a5c:	00014225 	.word	0x00014225
   13a60:	000132b5 	.word	0x000132b5

00013a64 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   13a64:	b510      	push	{r4, lr}
   13a66:	0004      	movs	r4, r0
	close(n->socket);
   13a68:	2000      	movs	r0, #0
   13a6a:	5620      	ldrsb	r0, [r4, r0]
   13a6c:	4b04      	ldr	r3, [pc, #16]	; (13a80 <WINC1500_disconnect+0x1c>)
   13a6e:	4798      	blx	r3
	n->socket=-1;
   13a70:	2301      	movs	r3, #1
   13a72:	425b      	negs	r3, r3
   13a74:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   13a76:	2200      	movs	r2, #0
   13a78:	4b02      	ldr	r3, [pc, #8]	; (13a84 <WINC1500_disconnect+0x20>)
   13a7a:	701a      	strb	r2, [r3, #0]
}
   13a7c:	bd10      	pop	{r4, pc}
   13a7e:	46c0      	nop			; (mov r8, r8)
   13a80:	0000e7bd 	.word	0x0000e7bd
   13a84:	20000578 	.word	0x20000578

00013a88 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   13a88:	b570      	push	{r4, r5, r6, lr}
   13a8a:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   13a8c:	2200      	movs	r2, #0
   13a8e:	4b0d      	ldr	r3, [pc, #52]	; (13ac4 <WINC1500_write+0x3c>)
   13a90:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   13a92:	b2b2      	uxth	r2, r6
   13a94:	7800      	ldrb	r0, [r0, #0]
   13a96:	b240      	sxtb	r0, r0
   13a98:	2300      	movs	r3, #0
   13a9a:	4c0b      	ldr	r4, [pc, #44]	; (13ac8 <WINC1500_write+0x40>)
   13a9c:	47a0      	blx	r4
   13a9e:	2800      	cmp	r0, #0
   13aa0:	d10c      	bne.n	13abc <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   13aa2:	4b08      	ldr	r3, [pc, #32]	; (13ac4 <WINC1500_write+0x3c>)
   13aa4:	781b      	ldrb	r3, [r3, #0]
   13aa6:	2b00      	cmp	r3, #0
   13aa8:	d106      	bne.n	13ab8 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   13aaa:	4d08      	ldr	r5, [pc, #32]	; (13acc <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   13aac:	4c05      	ldr	r4, [pc, #20]	; (13ac4 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   13aae:	2000      	movs	r0, #0
   13ab0:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   13ab2:	7823      	ldrb	r3, [r4, #0]
   13ab4:	2b00      	cmp	r3, #0
   13ab6:	d0fa      	beq.n	13aae <WINC1500_write+0x26>
}
   13ab8:	0030      	movs	r0, r6
   13aba:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   13abc:	2601      	movs	r6, #1
   13abe:	4276      	negs	r6, r6
   13ac0:	e7fa      	b.n	13ab8 <WINC1500_write+0x30>
   13ac2:	46c0      	nop			; (mov r8, r8)
   13ac4:	2000057b 	.word	0x2000057b
   13ac8:	0000e691 	.word	0x0000e691
   13acc:	0000c8f5 	.word	0x0000c8f5

00013ad0 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   13ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ad2:	b083      	sub	sp, #12
   13ad4:	9101      	str	r1, [sp, #4]
   13ad6:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   13ad8:	2b00      	cmp	r3, #0
   13ada:	d100      	bne.n	13ade <WINC1500_read+0xe>
   13adc:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   13ade:	4a22      	ldr	r2, [pc, #136]	; (13b68 <WINC1500_read+0x98>)
   13ae0:	6812      	ldr	r2, [r2, #0]
   13ae2:	2a00      	cmp	r2, #0
   13ae4:	d013      	beq.n	13b0e <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   13ae6:	4b20      	ldr	r3, [pc, #128]	; (13b68 <WINC1500_read+0x98>)
   13ae8:	681d      	ldr	r5, [r3, #0]
   13aea:	42a5      	cmp	r5, r4
   13aec:	db39      	blt.n	13b62 <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   13aee:	4e1f      	ldr	r6, [pc, #124]	; (13b6c <WINC1500_read+0x9c>)
   13af0:	6837      	ldr	r7, [r6, #0]
   13af2:	491f      	ldr	r1, [pc, #124]	; (13b70 <WINC1500_read+0xa0>)
   13af4:	19c9      	adds	r1, r1, r7
   13af6:	0022      	movs	r2, r4
   13af8:	9801      	ldr	r0, [sp, #4]
   13afa:	4b1e      	ldr	r3, [pc, #120]	; (13b74 <WINC1500_read+0xa4>)
   13afc:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   13afe:	1b2d      	subs	r5, r5, r4
   13b00:	4b19      	ldr	r3, [pc, #100]	; (13b68 <WINC1500_read+0x98>)
   13b02:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   13b04:	193f      	adds	r7, r7, r4
   13b06:	6037      	str	r7, [r6, #0]
  return len;
   13b08:	0020      	movs	r0, r4
}
   13b0a:	b003      	add	sp, #12
   13b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   13b0e:	2100      	movs	r1, #0
   13b10:	4a19      	ldr	r2, [pc, #100]	; (13b78 <WINC1500_read+0xa8>)
   13b12:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   13b14:	7800      	ldrb	r0, [r0, #0]
   13b16:	b240      	sxtb	r0, r0
   13b18:	2280      	movs	r2, #128	; 0x80
   13b1a:	0052      	lsls	r2, r2, #1
   13b1c:	4914      	ldr	r1, [pc, #80]	; (13b70 <WINC1500_read+0xa0>)
   13b1e:	4d17      	ldr	r5, [pc, #92]	; (13b7c <WINC1500_read+0xac>)
   13b20:	47a8      	blx	r5
   13b22:	2800      	cmp	r0, #0
   13b24:	d11a      	bne.n	13b5c <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   13b26:	4b14      	ldr	r3, [pc, #80]	; (13b78 <WINC1500_read+0xa8>)
   13b28:	781b      	ldrb	r3, [r3, #0]
   13b2a:	2b00      	cmp	r3, #0
   13b2c:	d106      	bne.n	13b3c <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   13b2e:	4f14      	ldr	r7, [pc, #80]	; (13b80 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   13b30:	4d11      	ldr	r5, [pc, #68]	; (13b78 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   13b32:	2000      	movs	r0, #0
   13b34:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   13b36:	782b      	ldrb	r3, [r5, #0]
   13b38:	2b00      	cmp	r3, #0
   13b3a:	d0fa      	beq.n	13b32 <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   13b3c:	4b11      	ldr	r3, [pc, #68]	; (13b84 <WINC1500_read+0xb4>)
   13b3e:	6818      	ldr	r0, [r3, #0]
   13b40:	2800      	cmp	r0, #0
   13b42:	dd05      	ble.n	13b50 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   13b44:	4b08      	ldr	r3, [pc, #32]	; (13b68 <WINC1500_read+0x98>)
   13b46:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   13b48:	2200      	movs	r2, #0
   13b4a:	4b08      	ldr	r3, [pc, #32]	; (13b6c <WINC1500_read+0x9c>)
   13b4c:	601a      	str	r2, [r3, #0]
   13b4e:	e7ca      	b.n	13ae6 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   13b50:	2300      	movs	r3, #0
   13b52:	4a05      	ldr	r2, [pc, #20]	; (13b68 <WINC1500_read+0x98>)
   13b54:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   13b56:	4a05      	ldr	r2, [pc, #20]	; (13b6c <WINC1500_read+0x9c>)
   13b58:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   13b5a:	e7d6      	b.n	13b0a <WINC1500_read+0x3a>
		  return -1;
   13b5c:	2001      	movs	r0, #1
   13b5e:	4240      	negs	r0, r0
   13b60:	e7d3      	b.n	13b0a <WINC1500_read+0x3a>
	  return -1;
   13b62:	2001      	movs	r0, #1
   13b64:	4240      	negs	r0, r0
   13b66:	e7d0      	b.n	13b0a <WINC1500_read+0x3a>
   13b68:	20000688 	.word	0x20000688
   13b6c:	2000068c 	.word	0x2000068c
   13b70:	2000057c 	.word	0x2000057c
   13b74:	00018fd5 	.word	0x00018fd5
   13b78:	2000057a 	.word	0x2000057a
   13b7c:	0000e729 	.word	0x0000e729
   13b80:	0000c8f5 	.word	0x0000c8f5
   13b84:	20000680 	.word	0x20000680

00013b88 <dnsResolveCallback>:
{
   13b88:	b510      	push	{r4, lr}
   13b8a:	0002      	movs	r2, r0
   13b8c:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   13b8e:	4b08      	ldr	r3, [pc, #32]	; (13bb0 <dnsResolveCallback+0x28>)
   13b90:	781b      	ldrb	r3, [r3, #0]
   13b92:	2b00      	cmp	r3, #0
   13b94:	d10b      	bne.n	13bae <dnsResolveCallback+0x26>
   13b96:	4b07      	ldr	r3, [pc, #28]	; (13bb4 <dnsResolveCallback+0x2c>)
   13b98:	6818      	ldr	r0, [r3, #0]
   13b9a:	0011      	movs	r1, r2
   13b9c:	4b06      	ldr	r3, [pc, #24]	; (13bb8 <dnsResolveCallback+0x30>)
   13b9e:	4798      	blx	r3
   13ba0:	2800      	cmp	r0, #0
   13ba2:	d104      	bne.n	13bae <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   13ba4:	4b05      	ldr	r3, [pc, #20]	; (13bbc <dnsResolveCallback+0x34>)
   13ba6:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   13ba8:	2201      	movs	r2, #1
   13baa:	4b01      	ldr	r3, [pc, #4]	; (13bb0 <dnsResolveCallback+0x28>)
   13bac:	701a      	strb	r2, [r3, #0]
}
   13bae:	bd10      	pop	{r4, pc}
   13bb0:	20000579 	.word	0x20000579
   13bb4:	20000684 	.word	0x20000684
   13bb8:	00019569 	.word	0x00019569
   13bbc:	2000067c 	.word	0x2000067c

00013bc0 <tcpClientSocketEventHandler>:
{
   13bc0:	b530      	push	{r4, r5, lr}
   13bc2:	4b12      	ldr	r3, [pc, #72]	; (13c0c <tcpClientSocketEventHandler+0x4c>)
   13bc4:	24a8      	movs	r4, #168	; 0xa8
   13bc6:	00a4      	lsls	r4, r4, #2
   13bc8:	191d      	adds	r5, r3, r4
   13bca:	e002      	b.n	13bd2 <tcpClientSocketEventHandler+0x12>
   13bcc:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   13bce:	42ab      	cmp	r3, r5
   13bd0:	d00b      	beq.n	13bea <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   13bd2:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   13bd4:	2c00      	cmp	r4, #0
   13bd6:	d0f9      	beq.n	13bcc <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   13bd8:	6a24      	ldr	r4, [r4, #32]
   13bda:	4284      	cmp	r4, r0
   13bdc:	d1f6      	bne.n	13bcc <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   13bde:	2906      	cmp	r1, #6
   13be0:	d00c      	beq.n	13bfc <tcpClientSocketEventHandler+0x3c>
   13be2:	2907      	cmp	r1, #7
   13be4:	d006      	beq.n	13bf4 <tcpClientSocketEventHandler+0x34>
   13be6:	2905      	cmp	r1, #5
   13be8:	d000      	beq.n	13bec <tcpClientSocketEventHandler+0x2c>
}
   13bea:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   13bec:	2201      	movs	r2, #1
   13bee:	4b08      	ldr	r3, [pc, #32]	; (13c10 <tcpClientSocketEventHandler+0x50>)
   13bf0:	701a      	strb	r2, [r3, #0]
			break;
   13bf2:	e7fa      	b.n	13bea <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   13bf4:	2201      	movs	r2, #1
   13bf6:	4b07      	ldr	r3, [pc, #28]	; (13c14 <tcpClientSocketEventHandler+0x54>)
   13bf8:	701a      	strb	r2, [r3, #0]
			break;
   13bfa:	e7f6      	b.n	13bea <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   13bfc:	2304      	movs	r3, #4
   13bfe:	5ed2      	ldrsh	r2, [r2, r3]
   13c00:	4b05      	ldr	r3, [pc, #20]	; (13c18 <tcpClientSocketEventHandler+0x58>)
   13c02:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   13c04:	2201      	movs	r2, #1
   13c06:	4b05      	ldr	r3, [pc, #20]	; (13c1c <tcpClientSocketEventHandler+0x5c>)
   13c08:	701a      	strb	r2, [r3, #0]
}
   13c0a:	e7ee      	b.n	13bea <tcpClientSocketEventHandler+0x2a>
   13c0c:	20000690 	.word	0x20000690
   13c10:	20000578 	.word	0x20000578
   13c14:	2000057b 	.word	0x2000057b
   13c18:	20000680 	.word	0x20000680
   13c1c:	2000057a 	.word	0x2000057a

00013c20 <SysTick_Handler>:
	MilliTimer++;
   13c20:	4a02      	ldr	r2, [pc, #8]	; (13c2c <SysTick_Handler+0xc>)
   13c22:	6813      	ldr	r3, [r2, #0]
   13c24:	3301      	adds	r3, #1
   13c26:	6013      	str	r3, [r2, #0]
}
   13c28:	4770      	bx	lr
   13c2a:	46c0      	nop			; (mov r8, r8)
   13c2c:	20000574 	.word	0x20000574

00013c30 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
   13c30:	6840      	ldr	r0, [r0, #4]
   13c32:	4b02      	ldr	r3, [pc, #8]	; (13c3c <TimerIsExpired+0xc>)
   13c34:	681b      	ldr	r3, [r3, #0]
   13c36:	1ac0      	subs	r0, r0, r3
	return (left < 0);
   13c38:	0fc0      	lsrs	r0, r0, #31
}
   13c3a:	4770      	bx	lr
   13c3c:	20000574 	.word	0x20000574

00013c40 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
   13c40:	4b02      	ldr	r3, [pc, #8]	; (13c4c <TimerCountdownMS+0xc>)
   13c42:	681b      	ldr	r3, [r3, #0]
   13c44:	1859      	adds	r1, r3, r1
   13c46:	6041      	str	r1, [r0, #4]
}
   13c48:	4770      	bx	lr
   13c4a:	46c0      	nop			; (mov r8, r8)
   13c4c:	20000574 	.word	0x20000574

00013c50 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
   13c50:	23fa      	movs	r3, #250	; 0xfa
   13c52:	009b      	lsls	r3, r3, #2
   13c54:	4359      	muls	r1, r3
   13c56:	4b02      	ldr	r3, [pc, #8]	; (13c60 <TimerCountdown+0x10>)
   13c58:	681b      	ldr	r3, [r3, #0]
   13c5a:	18c9      	adds	r1, r1, r3
   13c5c:	6041      	str	r1, [r0, #4]
}
   13c5e:	4770      	bx	lr
   13c60:	20000574 	.word	0x20000574

00013c64 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
   13c64:	6840      	ldr	r0, [r0, #4]
   13c66:	4b03      	ldr	r3, [pc, #12]	; (13c74 <TimerLeftMS+0x10>)
   13c68:	681b      	ldr	r3, [r3, #0]
   13c6a:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
   13c6c:	43c3      	mvns	r3, r0
   13c6e:	17db      	asrs	r3, r3, #31
   13c70:	4018      	ands	r0, r3
}
   13c72:	4770      	bx	lr
   13c74:	20000574 	.word	0x20000574

00013c78 <TimerInit>:
	timer->end_time = 0;
   13c78:	2300      	movs	r3, #0
   13c7a:	6043      	str	r3, [r0, #4]
}
   13c7c:	4770      	bx	lr
	...

00013c80 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   13c80:	2301      	movs	r3, #1
   13c82:	425b      	negs	r3, r3
   13c84:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   13c86:	4b03      	ldr	r3, [pc, #12]	; (13c94 <NetworkInit+0x14>)
   13c88:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   13c8a:	4b03      	ldr	r3, [pc, #12]	; (13c98 <NetworkInit+0x18>)
   13c8c:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   13c8e:	4b03      	ldr	r3, [pc, #12]	; (13c9c <NetworkInit+0x1c>)
   13c90:	6103      	str	r3, [r0, #16]
}
   13c92:	4770      	bx	lr
   13c94:	00013ad1 	.word	0x00013ad1
   13c98:	00013a89 	.word	0x00013a89
   13c9c:	00013a65 	.word	0x00013a65

00013ca0 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   13ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ca2:	b087      	sub	sp, #28
   13ca4:	0006      	movs	r6, r0
   13ca6:	0015      	movs	r5, r2
   13ca8:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   13caa:	4c25      	ldr	r4, [pc, #148]	; (13d40 <ConnectNetwork+0xa0>)
   13cac:	2300      	movs	r3, #0
   13cae:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   13cb0:	4b24      	ldr	r3, [pc, #144]	; (13d44 <ConnectNetwork+0xa4>)
   13cb2:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   13cb4:	0008      	movs	r0, r1
   13cb6:	4b24      	ldr	r3, [pc, #144]	; (13d48 <ConnectNetwork+0xa8>)
   13cb8:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   13cba:	7823      	ldrb	r3, [r4, #0]
   13cbc:	2b00      	cmp	r3, #0
   13cbe:	d106      	bne.n	13cce <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   13cc0:	4f22      	ldr	r7, [pc, #136]	; (13d4c <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   13cc2:	4c1f      	ldr	r4, [pc, #124]	; (13d40 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   13cc4:	2000      	movs	r0, #0
   13cc6:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   13cc8:	7823      	ldrb	r3, [r4, #0]
   13cca:	2b00      	cmp	r3, #0
   13ccc:	d0fa      	beq.n	13cc4 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   13cce:	4b20      	ldr	r3, [pc, #128]	; (13d50 <ConnectNetwork+0xb0>)
   13cd0:	681a      	ldr	r2, [r3, #0]
   13cd2:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   13cd4:	2302      	movs	r3, #2
   13cd6:	a902      	add	r1, sp, #8
   13cd8:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   13cda:	022b      	lsls	r3, r5, #8
   13cdc:	491d      	ldr	r1, [pc, #116]	; (13d54 <ConnectNetwork+0xb4>)
   13cde:	400b      	ands	r3, r1
   13ce0:	b2ad      	uxth	r5, r5
   13ce2:	0a2d      	lsrs	r5, r5, #8
   13ce4:	431d      	orrs	r5, r3
   13ce6:	ab02      	add	r3, sp, #8
   13ce8:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   13cea:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   13cec:	6833      	ldr	r3, [r6, #0]
   13cee:	2b00      	cmp	r3, #0
   13cf0:	db16      	blt.n	13d20 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   13cf2:	6830      	ldr	r0, [r6, #0]
   13cf4:	1c43      	adds	r3, r0, #1
   13cf6:	d01b      	beq.n	13d30 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   13cf8:	b240      	sxtb	r0, r0
   13cfa:	2210      	movs	r2, #16
   13cfc:	a902      	add	r1, sp, #8
   13cfe:	4b16      	ldr	r3, [pc, #88]	; (13d58 <ConnectNetwork+0xb8>)
   13d00:	4798      	blx	r3
   13d02:	2800      	cmp	r0, #0
   13d04:	d119      	bne.n	13d3a <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   13d06:	2200      	movs	r2, #0
   13d08:	4b14      	ldr	r3, [pc, #80]	; (13d5c <ConnectNetwork+0xbc>)
   13d0a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   13d0c:	4d0f      	ldr	r5, [pc, #60]	; (13d4c <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   13d0e:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   13d10:	2000      	movs	r0, #0
   13d12:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   13d14:	7823      	ldrb	r3, [r4, #0]
   13d16:	2b00      	cmp	r3, #0
   13d18:	d0fa      	beq.n	13d10 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   13d1a:	2000      	movs	r0, #0
   13d1c:	b007      	add	sp, #28
   13d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   13d20:	466b      	mov	r3, sp
   13d22:	791a      	ldrb	r2, [r3, #4]
   13d24:	2101      	movs	r1, #1
   13d26:	2002      	movs	r0, #2
   13d28:	4b0d      	ldr	r3, [pc, #52]	; (13d60 <ConnectNetwork+0xc0>)
   13d2a:	4798      	blx	r3
   13d2c:	6030      	str	r0, [r6, #0]
   13d2e:	e7e0      	b.n	13cf2 <ConnectNetwork+0x52>
   close(n->socket);
   13d30:	4b0c      	ldr	r3, [pc, #48]	; (13d64 <ConnectNetwork+0xc4>)
   13d32:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   13d34:	2009      	movs	r0, #9
   13d36:	4240      	negs	r0, r0
   13d38:	e7f0      	b.n	13d1c <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   13d3a:	2009      	movs	r0, #9
   13d3c:	4240      	negs	r0, r0
   13d3e:	e7ed      	b.n	13d1c <ConnectNetwork+0x7c>
   13d40:	20000579 	.word	0x20000579
   13d44:	20000684 	.word	0x20000684
   13d48:	0000e8c5 	.word	0x0000e8c5
   13d4c:	0000c8f5 	.word	0x0000c8f5
   13d50:	2000067c 	.word	0x2000067c
   13d54:	00ffff00 	.word	0x00ffff00
   13d58:	0000e601 	.word	0x0000e601
   13d5c:	20000578 	.word	0x20000578
   13d60:	0000e47d 	.word	0x0000e47d
   13d64:	0000e7bd 	.word	0x0000e7bd

00013d68 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   13d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d6a:	b085      	sub	sp, #20
   13d6c:	0006      	movs	r6, r0
   13d6e:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   13d70:	2800      	cmp	r0, #0
   13d72:	d03d      	beq.n	13df0 <mqtt_init+0x88>
   13d74:	2900      	cmp	r1, #0
   13d76:	d03e      	beq.n	13df6 <mqtt_init+0x8e>
   13d78:	690b      	ldr	r3, [r1, #16]
   13d7a:	2b00      	cmp	r3, #0
   13d7c:	d03e      	beq.n	13dfc <mqtt_init+0x94>
   13d7e:	688b      	ldr	r3, [r1, #8]
   13d80:	2b00      	cmp	r3, #0
   13d82:	d03e      	beq.n	13e02 <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   13d84:	888b      	ldrh	r3, [r1, #4]
   13d86:	27fa      	movs	r7, #250	; 0xfa
   13d88:	00bf      	lsls	r7, r7, #2
   13d8a:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   13d8c:	0004      	movs	r4, r0
   13d8e:	3420      	adds	r4, #32
   13d90:	0020      	movs	r0, r4
   13d92:	4b1f      	ldr	r3, [pc, #124]	; (13e10 <mqtt_init+0xa8>)
   13d94:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   13d96:	1d30      	adds	r0, r6, #4
   13d98:	2218      	movs	r2, #24
   13d9a:	0029      	movs	r1, r5
   13d9c:	4b1d      	ldr	r3, [pc, #116]	; (13e14 <mqtt_init+0xac>)
   13d9e:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   13da0:	4b1d      	ldr	r3, [pc, #116]	; (13e18 <mqtt_init+0xb0>)
   13da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13da4:	2b00      	cmp	r3, #0
   13da6:	d01a      	beq.n	13dde <mqtt_init+0x76>
   13da8:	4b1b      	ldr	r3, [pc, #108]	; (13e18 <mqtt_init+0xb0>)
   13daa:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   13dac:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   13dae:	6819      	ldr	r1, [r3, #0]
   13db0:	2900      	cmp	r1, #0
   13db2:	d015      	beq.n	13de0 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   13db4:	3201      	adds	r2, #1
   13db6:	3360      	adds	r3, #96	; 0x60
   13db8:	2a07      	cmp	r2, #7
   13dba:	d1f8      	bne.n	13dae <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   13dbc:	69f0      	ldr	r0, [r6, #28]
   13dbe:	2800      	cmp	r0, #0
   13dc0:	d022      	beq.n	13e08 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   13dc2:	692b      	ldr	r3, [r5, #16]
   13dc4:	68ea      	ldr	r2, [r5, #12]
   13dc6:	9202      	str	r2, [sp, #8]
   13dc8:	68aa      	ldr	r2, [r5, #8]
   13dca:	9201      	str	r2, [sp, #4]
   13dcc:	696a      	ldr	r2, [r5, #20]
   13dce:	9200      	str	r2, [sp, #0]
   13dd0:	003a      	movs	r2, r7
   13dd2:	0021      	movs	r1, r4
   13dd4:	4c11      	ldr	r4, [pc, #68]	; (13e1c <mqtt_init+0xb4>)
   13dd6:	47a0      	blx	r4
		return SUCCESS;
   13dd8:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   13dda:	b005      	add	sp, #20
   13ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   13dde:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   13de0:	480d      	ldr	r0, [pc, #52]	; (13e18 <mqtt_init+0xb0>)
   13de2:	0053      	lsls	r3, r2, #1
   13de4:	1899      	adds	r1, r3, r2
   13de6:	0149      	lsls	r1, r1, #5
   13de8:	1841      	adds	r1, r0, r1
   13dea:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   13dec:	61f1      	str	r1, [r6, #28]
   13dee:	e7e5      	b.n	13dbc <mqtt_init+0x54>
		return FAILURE;
   13df0:	2001      	movs	r0, #1
   13df2:	4240      	negs	r0, r0
   13df4:	e7f1      	b.n	13dda <mqtt_init+0x72>
   13df6:	2001      	movs	r0, #1
   13df8:	4240      	negs	r0, r0
   13dfa:	e7ee      	b.n	13dda <mqtt_init+0x72>
   13dfc:	2001      	movs	r0, #1
   13dfe:	4240      	negs	r0, r0
   13e00:	e7eb      	b.n	13dda <mqtt_init+0x72>
   13e02:	2001      	movs	r0, #1
   13e04:	4240      	negs	r0, r0
   13e06:	e7e8      	b.n	13dda <mqtt_init+0x72>
		return FAILURE;
   13e08:	2001      	movs	r0, #1
   13e0a:	4240      	negs	r0, r0
   13e0c:	e7e5      	b.n	13dda <mqtt_init+0x72>
   13e0e:	46c0      	nop			; (mov r8, r8)
   13e10:	00013c81 	.word	0x00013c81
   13e14:	00018fd5 	.word	0x00018fd5
   13e18:	20000690 	.word	0x20000690
   13e1c:	00013331 	.word	0x00013331

00013e20 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   13e20:	4b05      	ldr	r3, [pc, #20]	; (13e38 <mqtt_get_config_defaults+0x18>)
   13e22:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   13e24:	2300      	movs	r3, #0
   13e26:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   13e28:	223c      	movs	r2, #60	; 0x3c
   13e2a:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   13e2c:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   13e2e:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   13e30:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   13e32:	6143      	str	r3, [r0, #20]
}
   13e34:	4770      	bx	lr
   13e36:	46c0      	nop			; (mov r8, r8)
   13e38:	0000075b 	.word	0x0000075b

00013e3c <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   13e3c:	2800      	cmp	r0, #0
   13e3e:	d002      	beq.n	13e46 <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   13e40:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   13e42:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   13e44:	4770      	bx	lr
		return FAILURE;
   13e46:	2001      	movs	r0, #1
   13e48:	4240      	negs	r0, r0
   13e4a:	e7fb      	b.n	13e44 <mqtt_register_callback+0x8>

00013e4c <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   13e4c:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   13e4e:	4b01      	ldr	r3, [pc, #4]	; (13e54 <mqtt_socket_event_handler+0x8>)
   13e50:	4798      	blx	r3
}
   13e52:	bd10      	pop	{r4, pc}
   13e54:	00013bc1 	.word	0x00013bc1

00013e58 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   13e58:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   13e5a:	4b01      	ldr	r3, [pc, #4]	; (13e60 <mqtt_socket_resolve_handler+0x8>)
   13e5c:	4798      	blx	r3
}
   13e5e:	bd10      	pop	{r4, pc}
   13e60:	00013b89 	.word	0x00013b89

00013e64 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   13e64:	b530      	push	{r4, r5, lr}
   13e66:	b083      	sub	sp, #12
   13e68:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   13e6a:	7983      	ldrb	r3, [r0, #6]
   13e6c:	8882      	ldrh	r2, [r0, #4]
   13e6e:	3020      	adds	r0, #32
   13e70:	4d06      	ldr	r5, [pc, #24]	; (13e8c <mqtt_connect+0x28>)
   13e72:	47a8      	blx	r5
   13e74:	9001      	str	r0, [sp, #4]
	if(module->callback)
   13e76:	6823      	ldr	r3, [r4, #0]
   13e78:	2b00      	cmp	r3, #0
   13e7a:	d003      	beq.n	13e84 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   13e7c:	aa01      	add	r2, sp, #4
   13e7e:	2100      	movs	r1, #0
   13e80:	0020      	movs	r0, r4
   13e82:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   13e84:	9801      	ldr	r0, [sp, #4]
   13e86:	b003      	add	sp, #12
   13e88:	bd30      	pop	{r4, r5, pc}
   13e8a:	46c0      	nop			; (mov r8, r8)
   13e8c:	00013ca1 	.word	0x00013ca1

00013e90 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   13e90:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e92:	46de      	mov	lr, fp
   13e94:	4657      	mov	r7, sl
   13e96:	464e      	mov	r6, r9
   13e98:	b5c0      	push	{r6, r7, lr}
   13e9a:	b098      	sub	sp, #96	; 0x60
   13e9c:	0005      	movs	r5, r0
   13e9e:	4689      	mov	r9, r1
   13ea0:	4693      	mov	fp, r2
   13ea2:	469a      	mov	sl, r3
   13ea4:	ab24      	add	r3, sp, #144	; 0x90
   13ea6:	781f      	ldrb	r7, [r3, #0]
   13ea8:	ab25      	add	r3, sp, #148	; 0x94
   13eaa:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   13eac:	ac01      	add	r4, sp, #4
   13eae:	2258      	movs	r2, #88	; 0x58
   13eb0:	491a      	ldr	r1, [pc, #104]	; (13f1c <mqtt_connect_broker+0x8c>)
   13eb2:	0020      	movs	r0, r4
   13eb4:	4b1a      	ldr	r3, [pc, #104]	; (13f20 <mqtt_connect_broker+0x90>)
   13eb6:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   13eb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13eba:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   13ebc:	465b      	mov	r3, fp
   13ebe:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   13ec0:	4653      	mov	r3, sl
   13ec2:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   13ec4:	464b      	mov	r3, r9
   13ec6:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   13ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13eca:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   13ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13ece:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   13ed0:	233c      	movs	r3, #60	; 0x3c
   13ed2:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   13ed4:	3301      	adds	r3, #1
   13ed6:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   13ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13eda:	2b00      	cmp	r3, #0
   13edc:	d005      	beq.n	13eea <mqtt_connect_broker+0x5a>
   13ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
   13ee0:	2b00      	cmp	r3, #0
   13ee2:	d002      	beq.n	13eea <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   13ee4:	2201      	movs	r2, #1
   13ee6:	ab01      	add	r3, sp, #4
   13ee8:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   13eea:	a901      	add	r1, sp, #4
   13eec:	69e8      	ldr	r0, [r5, #28]
   13eee:	4b0d      	ldr	r3, [pc, #52]	; (13f24 <mqtt_connect_broker+0x94>)
   13ef0:	4798      	blx	r3
   13ef2:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   13ef4:	ab17      	add	r3, sp, #92	; 0x5c
   13ef6:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   13ef8:	682b      	ldr	r3, [r5, #0]
   13efa:	2b00      	cmp	r3, #0
   13efc:	d003      	beq.n	13f06 <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   13efe:	aa17      	add	r2, sp, #92	; 0x5c
   13f00:	2101      	movs	r1, #1
   13f02:	0028      	movs	r0, r5
   13f04:	4798      	blx	r3
	
	module->isConnected = true;
   13f06:	2201      	movs	r2, #1
   13f08:	2334      	movs	r3, #52	; 0x34
   13f0a:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   13f0c:	0020      	movs	r0, r4
   13f0e:	b018      	add	sp, #96	; 0x60
   13f10:	bc1c      	pop	{r2, r3, r4}
   13f12:	4691      	mov	r9, r2
   13f14:	469a      	mov	sl, r3
   13f16:	46a3      	mov	fp, r4
   13f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f1a:	46c0      	nop			; (mov r8, r8)
   13f1c:	0001ca30 	.word	0x0001ca30
   13f20:	00018fd5 	.word	0x00018fd5
   13f24:	00013739 	.word	0x00013739

00013f28 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   13f28:	b530      	push	{r4, r5, lr}
   13f2a:	b083      	sub	sp, #12
   13f2c:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   13f2e:	69c0      	ldr	r0, [r0, #28]
   13f30:	4b08      	ldr	r3, [pc, #32]	; (13f54 <mqtt_disconnect+0x2c>)
   13f32:	4798      	blx	r3
   13f34:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   13f36:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   13f38:	6823      	ldr	r3, [r4, #0]
   13f3a:	2b00      	cmp	r3, #0
   13f3c:	d003      	beq.n	13f46 <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   13f3e:	aa01      	add	r2, sp, #4
   13f40:	2105      	movs	r1, #5
   13f42:	0020      	movs	r0, r4
   13f44:	4798      	blx	r3
	
	module->isConnected = false;
   13f46:	2200      	movs	r2, #0
   13f48:	2334      	movs	r3, #52	; 0x34
   13f4a:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   13f4c:	0028      	movs	r0, r5
   13f4e:	b003      	add	sp, #12
   13f50:	bd30      	pop	{r4, r5, pc}
   13f52:	46c0      	nop			; (mov r8, r8)
   13f54:	00013a1d 	.word	0x00013a1d

00013f58 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   13f58:	b570      	push	{r4, r5, r6, lr}
   13f5a:	b084      	sub	sp, #16
   13f5c:	0004      	movs	r4, r0
   13f5e:	a808      	add	r0, sp, #32
   13f60:	7805      	ldrb	r5, [r0, #0]
   13f62:	a809      	add	r0, sp, #36	; 0x24
   13f64:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   13f66:	466e      	mov	r6, sp
   13f68:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   13f6a:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   13f6c:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   13f6e:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   13f70:	466a      	mov	r2, sp
   13f72:	69e0      	ldr	r0, [r4, #28]
   13f74:	4b06      	ldr	r3, [pc, #24]	; (13f90 <mqtt_publish+0x38>)
   13f76:	4798      	blx	r3
   13f78:	0005      	movs	r5, r0
	
	if(module->callback)
   13f7a:	6823      	ldr	r3, [r4, #0]
   13f7c:	2b00      	cmp	r3, #0
   13f7e:	d003      	beq.n	13f88 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   13f80:	2200      	movs	r2, #0
   13f82:	2102      	movs	r1, #2
   13f84:	0020      	movs	r0, r4
   13f86:	4798      	blx	r3
	
	return rc;
}
   13f88:	0028      	movs	r0, r5
   13f8a:	b004      	add	sp, #16
   13f8c:	bd70      	pop	{r4, r5, r6, pc}
   13f8e:	46c0      	nop			; (mov r8, r8)
   13f90:	0001390d 	.word	0x0001390d

00013f94 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   13f94:	b570      	push	{r4, r5, r6, lr}
   13f96:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   13f98:	69c0      	ldr	r0, [r0, #28]
   13f9a:	4d06      	ldr	r5, [pc, #24]	; (13fb4 <mqtt_subscribe+0x20>)
   13f9c:	47a8      	blx	r5
   13f9e:	0005      	movs	r5, r0
	
	if(module->callback)
   13fa0:	6823      	ldr	r3, [r4, #0]
   13fa2:	2b00      	cmp	r3, #0
   13fa4:	d003      	beq.n	13fae <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   13fa6:	2200      	movs	r2, #0
   13fa8:	2103      	movs	r1, #3
   13faa:	0020      	movs	r0, r4
   13fac:	4798      	blx	r3
	
	return rc;
}
   13fae:	0028      	movs	r0, r5
   13fb0:	bd70      	pop	{r4, r5, r6, pc}
   13fb2:	46c0      	nop			; (mov r8, r8)
   13fb4:	00013809 	.word	0x00013809

00013fb8 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   13fb8:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   13fba:	69c0      	ldr	r0, [r0, #28]
   13fbc:	4b01      	ldr	r3, [pc, #4]	; (13fc4 <mqtt_yield+0xc>)
   13fbe:	4798      	blx	r3
   13fc0:	bd10      	pop	{r4, pc}
   13fc2:	46c0      	nop			; (mov r8, r8)
   13fc4:	000136bd 	.word	0x000136bd

00013fc8 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   13fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13fca:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   13fcc:	7a03      	ldrb	r3, [r0, #8]
   13fce:	2b03      	cmp	r3, #3
   13fd0:	d024      	beq.n	1401c <MQTTSerialize_connectLength+0x54>
	int len = 0;
   13fd2:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   13fd4:	2b04      	cmp	r3, #4
   13fd6:	d01f      	beq.n	14018 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   13fd8:	68e0      	ldr	r0, [r4, #12]
   13fda:	6921      	ldr	r1, [r4, #16]
   13fdc:	6962      	ldr	r2, [r4, #20]
   13fde:	4b1b      	ldr	r3, [pc, #108]	; (1404c <MQTTSerialize_connectLength+0x84>)
   13fe0:	4798      	blx	r3
   13fe2:	1c85      	adds	r5, r0, #2
   13fe4:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   13fe6:	7ee3      	ldrb	r3, [r4, #27]
   13fe8:	2b00      	cmp	r3, #0
   13fea:	d119      	bne.n	14020 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   13fec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   13fee:	2b00      	cmp	r3, #0
   13ff0:	d024      	beq.n	1403c <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   13ff2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   13ff4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   13ff6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   13ff8:	4b14      	ldr	r3, [pc, #80]	; (1404c <MQTTSerialize_connectLength+0x84>)
   13ffa:	4798      	blx	r3
   13ffc:	3002      	adds	r0, #2
   13ffe:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   14000:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14002:	2b00      	cmp	r3, #0
   14004:	d01e      	beq.n	14044 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   14006:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   14008:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1400a:	6d62      	ldr	r2, [r4, #84]	; 0x54
   1400c:	4b0f      	ldr	r3, [pc, #60]	; (1404c <MQTTSerialize_connectLength+0x84>)
   1400e:	4798      	blx	r3
   14010:	3002      	adds	r0, #2
   14012:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   14014:	0028      	movs	r0, r5
   14016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   14018:	360a      	adds	r6, #10
   1401a:	e7dd      	b.n	13fd8 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   1401c:	260c      	movs	r6, #12
   1401e:	e7db      	b.n	13fd8 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   14020:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14022:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14024:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   14026:	4f09      	ldr	r7, [pc, #36]	; (1404c <MQTTSerialize_connectLength+0x84>)
   14028:	47b8      	blx	r7
   1402a:	0006      	movs	r6, r0
   1402c:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1402e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14030:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   14032:	47b8      	blx	r7
   14034:	1836      	adds	r6, r6, r0
   14036:	3604      	adds	r6, #4
   14038:	19ad      	adds	r5, r5, r6
   1403a:	e7d7      	b.n	13fec <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   1403c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1403e:	2b00      	cmp	r3, #0
   14040:	d1d7      	bne.n	13ff2 <MQTTSerialize_connectLength+0x2a>
   14042:	e7dd      	b.n	14000 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   14044:	6d63      	ldr	r3, [r4, #84]	; 0x54
   14046:	2b00      	cmp	r3, #0
   14048:	d1dd      	bne.n	14006 <MQTTSerialize_connectLength+0x3e>
   1404a:	e7e3      	b.n	14014 <MQTTSerialize_connectLength+0x4c>
   1404c:	00014531 	.word	0x00014531

00014050 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   14050:	b5f0      	push	{r4, r5, r6, r7, lr}
   14052:	b083      	sub	sp, #12
   14054:	0006      	movs	r6, r0
   14056:	000f      	movs	r7, r1
   14058:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   1405a:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   1405c:	0010      	movs	r0, r2
   1405e:	4b45      	ldr	r3, [pc, #276]	; (14174 <MQTTSerialize_connect+0x124>)
   14060:	4798      	blx	r3
   14062:	0004      	movs	r4, r0
   14064:	4b44      	ldr	r3, [pc, #272]	; (14178 <MQTTSerialize_connect+0x128>)
   14066:	4798      	blx	r3
   14068:	42b8      	cmp	r0, r7
   1406a:	dd00      	ble.n	1406e <MQTTSerialize_connect+0x1e>
   1406c:	e07f      	b.n	1416e <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   1406e:	2110      	movs	r1, #16
   14070:	a801      	add	r0, sp, #4
   14072:	4b42      	ldr	r3, [pc, #264]	; (1417c <MQTTSerialize_connect+0x12c>)
   14074:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   14076:	0021      	movs	r1, r4
   14078:	9801      	ldr	r0, [sp, #4]
   1407a:	4b41      	ldr	r3, [pc, #260]	; (14180 <MQTTSerialize_connect+0x130>)
   1407c:	4798      	blx	r3
   1407e:	9b01      	ldr	r3, [sp, #4]
   14080:	469c      	mov	ip, r3
   14082:	4460      	add	r0, ip
   14084:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   14086:	7a2b      	ldrb	r3, [r5, #8]
   14088:	2b04      	cmp	r3, #4
   1408a:	d045      	beq.n	14118 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   1408c:	493d      	ldr	r1, [pc, #244]	; (14184 <MQTTSerialize_connect+0x134>)
   1408e:	a801      	add	r0, sp, #4
   14090:	4b3d      	ldr	r3, [pc, #244]	; (14188 <MQTTSerialize_connect+0x138>)
   14092:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   14094:	2103      	movs	r1, #3
   14096:	a801      	add	r0, sp, #4
   14098:	4b38      	ldr	r3, [pc, #224]	; (1417c <MQTTSerialize_connect+0x12c>)
   1409a:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   1409c:	7ea9      	ldrb	r1, [r5, #26]
   1409e:	2301      	movs	r3, #1
   140a0:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   140a2:	7eea      	ldrb	r2, [r5, #27]
   140a4:	1e50      	subs	r0, r2, #1
   140a6:	4182      	sbcs	r2, r0
   140a8:	b2d2      	uxtb	r2, r2
   140aa:	4013      	ands	r3, r2
   140ac:	009b      	lsls	r3, r3, #2
   140ae:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   140b0:	4319      	orrs	r1, r3
   140b2:	2b00      	cmp	r3, #0
   140b4:	d00b      	beq.n	140ce <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   140b6:	233d      	movs	r3, #61	; 0x3d
   140b8:	5cea      	ldrb	r2, [r5, r3]
   140ba:	3b3a      	subs	r3, #58	; 0x3a
   140bc:	4013      	ands	r3, r2
   140be:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   140c0:	223c      	movs	r2, #60	; 0x3c
   140c2:	5ca8      	ldrb	r0, [r5, r2]
   140c4:	3a3b      	subs	r2, #59	; 0x3b
   140c6:	4002      	ands	r2, r0
   140c8:	0152      	lsls	r2, r2, #5
   140ca:	4319      	orrs	r1, r3
   140cc:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   140ce:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   140d0:	2b00      	cmp	r3, #0
   140d2:	d02a      	beq.n	1412a <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   140d4:	2380      	movs	r3, #128	; 0x80
   140d6:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   140d8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   140da:	2b00      	cmp	r3, #0
   140dc:	d029      	beq.n	14132 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   140de:	2340      	movs	r3, #64	; 0x40
   140e0:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   140e2:	b2cc      	uxtb	r4, r1
   140e4:	0021      	movs	r1, r4
   140e6:	a801      	add	r0, sp, #4
   140e8:	4b24      	ldr	r3, [pc, #144]	; (1417c <MQTTSerialize_connect+0x12c>)
   140ea:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   140ec:	8b29      	ldrh	r1, [r5, #24]
   140ee:	a801      	add	r0, sp, #4
   140f0:	4b26      	ldr	r3, [pc, #152]	; (1418c <MQTTSerialize_connect+0x13c>)
   140f2:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   140f4:	68e9      	ldr	r1, [r5, #12]
   140f6:	692a      	ldr	r2, [r5, #16]
   140f8:	696b      	ldr	r3, [r5, #20]
   140fa:	a801      	add	r0, sp, #4
   140fc:	4f24      	ldr	r7, [pc, #144]	; (14190 <MQTTSerialize_connect+0x140>)
   140fe:	47b8      	blx	r7
	if (options->willFlag)
   14100:	7eeb      	ldrb	r3, [r5, #27]
   14102:	2b00      	cmp	r3, #0
   14104:	d119      	bne.n	1413a <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   14106:	b263      	sxtb	r3, r4
   14108:	2b00      	cmp	r3, #0
   1410a:	db22      	blt.n	14152 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   1410c:	0663      	lsls	r3, r4, #25
   1410e:	d427      	bmi.n	14160 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   14110:	9b01      	ldr	r3, [sp, #4]
   14112:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   14114:	b003      	add	sp, #12
   14116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   14118:	491e      	ldr	r1, [pc, #120]	; (14194 <MQTTSerialize_connect+0x144>)
   1411a:	a801      	add	r0, sp, #4
   1411c:	4b1a      	ldr	r3, [pc, #104]	; (14188 <MQTTSerialize_connect+0x138>)
   1411e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   14120:	2104      	movs	r1, #4
   14122:	a801      	add	r0, sp, #4
   14124:	4b15      	ldr	r3, [pc, #84]	; (1417c <MQTTSerialize_connect+0x12c>)
   14126:	4798      	blx	r3
   14128:	e7b8      	b.n	1409c <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   1412a:	6cab      	ldr	r3, [r5, #72]	; 0x48
   1412c:	2b00      	cmp	r3, #0
   1412e:	d1d1      	bne.n	140d4 <MQTTSerialize_connect+0x84>
   14130:	e7d2      	b.n	140d8 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   14132:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14134:	2b00      	cmp	r3, #0
   14136:	d1d2      	bne.n	140de <MQTTSerialize_connect+0x8e>
   14138:	e7d3      	b.n	140e2 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   1413a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1413c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1413e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   14140:	a801      	add	r0, sp, #4
   14142:	4f13      	ldr	r7, [pc, #76]	; (14190 <MQTTSerialize_connect+0x140>)
   14144:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   14146:	6b29      	ldr	r1, [r5, #48]	; 0x30
   14148:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1414a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1414c:	a801      	add	r0, sp, #4
   1414e:	47b8      	blx	r7
   14150:	e7d9      	b.n	14106 <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   14152:	6c29      	ldr	r1, [r5, #64]	; 0x40
   14154:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   14156:	6cab      	ldr	r3, [r5, #72]	; 0x48
   14158:	a801      	add	r0, sp, #4
   1415a:	4f0d      	ldr	r7, [pc, #52]	; (14190 <MQTTSerialize_connect+0x140>)
   1415c:	47b8      	blx	r7
   1415e:	e7d5      	b.n	1410c <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   14160:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   14162:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   14164:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   14166:	a801      	add	r0, sp, #4
   14168:	4c09      	ldr	r4, [pc, #36]	; (14190 <MQTTSerialize_connect+0x140>)
   1416a:	47a0      	blx	r4
   1416c:	e7d0      	b.n	14110 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1416e:	2002      	movs	r0, #2
   14170:	4240      	negs	r0, r0
	return rc;
   14172:	e7cf      	b.n	14114 <MQTTSerialize_connect+0xc4>
   14174:	00013fc9 	.word	0x00013fc9
   14178:	000143d5 	.word	0x000143d5
   1417c:	00014437 	.word	0x00014437
   14180:	0001434d 	.word	0x0001434d
   14184:	0001ca90 	.word	0x0001ca90
   14188:	0001446d 	.word	0x0001446d
   1418c:	00014443 	.word	0x00014443
   14190:	000144a5 	.word	0x000144a5
   14194:	0001ca88 	.word	0x0001ca88

00014198 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   14198:	b570      	push	{r4, r5, r6, lr}
   1419a:	b082      	sub	sp, #8
   1419c:	0005      	movs	r5, r0
   1419e:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   141a0:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   141a2:	a801      	add	r0, sp, #4
   141a4:	4b0e      	ldr	r3, [pc, #56]	; (141e0 <MQTTDeserialize_connack+0x48>)
   141a6:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   141a8:	23f0      	movs	r3, #240	; 0xf0
   141aa:	4003      	ands	r3, r0
	int rc = 0;
   141ac:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   141ae:	2b20      	cmp	r3, #32
   141b0:	d001      	beq.n	141b6 <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   141b2:	b002      	add	sp, #8
   141b4:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   141b6:	4669      	mov	r1, sp
   141b8:	9801      	ldr	r0, [sp, #4]
   141ba:	4b0a      	ldr	r3, [pc, #40]	; (141e4 <MQTTDeserialize_connack+0x4c>)
   141bc:	4798      	blx	r3
   141be:	9b01      	ldr	r3, [sp, #4]
   141c0:	181b      	adds	r3, r3, r0
   141c2:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   141c4:	9b00      	ldr	r3, [sp, #0]
   141c6:	2b01      	cmp	r3, #1
   141c8:	ddf3      	ble.n	141b2 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   141ca:	a801      	add	r0, sp, #4
   141cc:	4e04      	ldr	r6, [pc, #16]	; (141e0 <MQTTDeserialize_connack+0x48>)
   141ce:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   141d0:	0600      	lsls	r0, r0, #24
   141d2:	0fc0      	lsrs	r0, r0, #31
   141d4:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   141d6:	a801      	add	r0, sp, #4
   141d8:	47b0      	blx	r6
   141da:	7020      	strb	r0, [r4, #0]
	rc = 1;
   141dc:	2001      	movs	r0, #1
   141de:	e7e8      	b.n	141b2 <MQTTDeserialize_connack+0x1a>
   141e0:	0001442b 	.word	0x0001442b
   141e4:	000143fd 	.word	0x000143fd

000141e8 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   141e8:	b510      	push	{r4, lr}
   141ea:	b082      	sub	sp, #8
   141ec:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   141ee:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   141f0:	2901      	cmp	r1, #1
   141f2:	dd0f      	ble.n	14214 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   141f4:	210f      	movs	r1, #15
   141f6:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   141f8:	0109      	lsls	r1, r1, #4
   141fa:	a801      	add	r0, sp, #4
   141fc:	4b07      	ldr	r3, [pc, #28]	; (1421c <MQTTSerialize_zero+0x34>)
   141fe:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   14200:	2100      	movs	r1, #0
   14202:	9801      	ldr	r0, [sp, #4]
   14204:	4b06      	ldr	r3, [pc, #24]	; (14220 <MQTTSerialize_zero+0x38>)
   14206:	4798      	blx	r3
   14208:	9b01      	ldr	r3, [sp, #4]
   1420a:	469c      	mov	ip, r3
   1420c:	4460      	add	r0, ip
	rc = ptr - buf;
   1420e:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14210:	b002      	add	sp, #8
   14212:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14214:	2002      	movs	r0, #2
   14216:	4240      	negs	r0, r0
	return rc;
   14218:	e7fa      	b.n	14210 <MQTTSerialize_zero+0x28>
   1421a:	46c0      	nop			; (mov r8, r8)
   1421c:	00014437 	.word	0x00014437
   14220:	0001434d 	.word	0x0001434d

00014224 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   14224:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   14226:	220e      	movs	r2, #14
   14228:	4b01      	ldr	r3, [pc, #4]	; (14230 <MQTTSerialize_disconnect+0xc>)
   1422a:	4798      	blx	r3
}
   1422c:	bd10      	pop	{r4, pc}
   1422e:	46c0      	nop			; (mov r8, r8)
   14230:	000141e9 	.word	0x000141e9

00014234 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   14234:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   14236:	220c      	movs	r2, #12
   14238:	4b01      	ldr	r3, [pc, #4]	; (14240 <MQTTSerialize_pingreq+0xc>)
   1423a:	4798      	blx	r3
}
   1423c:	bd10      	pop	{r4, pc}
   1423e:	46c0      	nop			; (mov r8, r8)
   14240:	000141e9 	.word	0x000141e9

00014244 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   14244:	b5f0      	push	{r4, r5, r6, r7, lr}
   14246:	b085      	sub	sp, #20
   14248:	0005      	movs	r5, r0
   1424a:	000e      	movs	r6, r1
   1424c:	0014      	movs	r4, r2
   1424e:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   14250:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14252:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   14254:	2300      	movs	r3, #0
   14256:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   14258:	a803      	add	r0, sp, #12
   1425a:	4b1c      	ldr	r3, [pc, #112]	; (142cc <MQTTDeserialize_publish+0x88>)
   1425c:	4798      	blx	r3
   1425e:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   14260:	22f0      	movs	r2, #240	; 0xf0
   14262:	4010      	ands	r0, r2
	int rc = 0;
   14264:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   14266:	2830      	cmp	r0, #48	; 0x30
   14268:	d002      	beq.n	14270 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1426a:	0038      	movs	r0, r7
   1426c:	b005      	add	sp, #20
   1426e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   14270:	071a      	lsls	r2, r3, #28
   14272:	0fd2      	lsrs	r2, r2, #31
   14274:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   14276:	075a      	lsls	r2, r3, #29
   14278:	0f92      	lsrs	r2, r2, #30
   1427a:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   1427c:	07db      	lsls	r3, r3, #31
   1427e:	0fdb      	lsrs	r3, r3, #31
   14280:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   14282:	a902      	add	r1, sp, #8
   14284:	9803      	ldr	r0, [sp, #12]
   14286:	4b12      	ldr	r3, [pc, #72]	; (142d0 <MQTTDeserialize_publish+0x8c>)
   14288:	4798      	blx	r3
   1428a:	0007      	movs	r7, r0
   1428c:	9b03      	ldr	r3, [sp, #12]
   1428e:	181c      	adds	r4, r3, r0
   14290:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   14292:	9b02      	ldr	r3, [sp, #8]
   14294:	469c      	mov	ip, r3
   14296:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   14298:	0022      	movs	r2, r4
   1429a:	a903      	add	r1, sp, #12
   1429c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1429e:	4b0d      	ldr	r3, [pc, #52]	; (142d4 <MQTTDeserialize_publish+0x90>)
   142a0:	4798      	blx	r3
   142a2:	2800      	cmp	r0, #0
   142a4:	d0e1      	beq.n	1426a <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   142a6:	9b03      	ldr	r3, [sp, #12]
   142a8:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   142aa:	d4de      	bmi.n	1426a <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   142ac:	6833      	ldr	r3, [r6, #0]
   142ae:	2b00      	cmp	r3, #0
   142b0:	dd04      	ble.n	142bc <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   142b2:	a803      	add	r0, sp, #12
   142b4:	4b08      	ldr	r3, [pc, #32]	; (142d8 <MQTTDeserialize_publish+0x94>)
   142b6:	4798      	blx	r3
   142b8:	9b01      	ldr	r3, [sp, #4]
   142ba:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   142bc:	9b03      	ldr	r3, [sp, #12]
   142be:	1ae4      	subs	r4, r4, r3
   142c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   142c2:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   142c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   142c6:	6013      	str	r3, [r2, #0]
	rc = 1;
   142c8:	2701      	movs	r7, #1
   142ca:	e7ce      	b.n	1426a <MQTTDeserialize_publish+0x26>
   142cc:	0001442b 	.word	0x0001442b
   142d0:	000143fd 	.word	0x000143fd
   142d4:	000144f1 	.word	0x000144f1
   142d8:	00014419 	.word	0x00014419

000142dc <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   142dc:	b570      	push	{r4, r5, r6, lr}
   142de:	b082      	sub	sp, #8
   142e0:	0005      	movs	r5, r0
   142e2:	000e      	movs	r6, r1
   142e4:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   142e6:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   142e8:	a801      	add	r0, sp, #4
   142ea:	4b0c      	ldr	r3, [pc, #48]	; (1431c <MQTTDeserialize_ack+0x40>)
   142ec:	4798      	blx	r3
	*dup = header.bits.dup;
   142ee:	0703      	lsls	r3, r0, #28
   142f0:	0fdb      	lsrs	r3, r3, #31
   142f2:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   142f4:	0600      	lsls	r0, r0, #24
   142f6:	0f00      	lsrs	r0, r0, #28
   142f8:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   142fa:	4669      	mov	r1, sp
   142fc:	9801      	ldr	r0, [sp, #4]
   142fe:	4b08      	ldr	r3, [pc, #32]	; (14320 <MQTTDeserialize_ack+0x44>)
   14300:	4798      	blx	r3
   14302:	9b01      	ldr	r3, [sp, #4]
   14304:	181b      	adds	r3, r3, r0
   14306:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   14308:	9b00      	ldr	r3, [sp, #0]
   1430a:	2b01      	cmp	r3, #1
   1430c:	dd04      	ble.n	14318 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   1430e:	a801      	add	r0, sp, #4
   14310:	4b04      	ldr	r3, [pc, #16]	; (14324 <MQTTDeserialize_ack+0x48>)
   14312:	4798      	blx	r3
   14314:	8020      	strh	r0, [r4, #0]

	rc = 1;
   14316:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14318:	b002      	add	sp, #8
   1431a:	bd70      	pop	{r4, r5, r6, pc}
   1431c:	0001442b 	.word	0x0001442b
   14320:	000143fd 	.word	0x000143fd
   14324:	00014419 	.word	0x00014419

00014328 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   14328:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   1432a:	2900      	cmp	r1, #0
   1432c:	dd0a      	ble.n	14344 <bufchar+0x1c>
   1432e:	4b06      	ldr	r3, [pc, #24]	; (14348 <bufchar+0x20>)
   14330:	681b      	ldr	r3, [r3, #0]
   14332:	185d      	adds	r5, r3, r1
   14334:	002c      	movs	r4, r5
		*c = *bufptr++;
   14336:	781a      	ldrb	r2, [r3, #0]
   14338:	7002      	strb	r2, [r0, #0]
   1433a:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   1433c:	42a3      	cmp	r3, r4
   1433e:	d1fa      	bne.n	14336 <bufchar+0xe>
   14340:	4b01      	ldr	r3, [pc, #4]	; (14348 <bufchar+0x20>)
   14342:	601d      	str	r5, [r3, #0]
	return count;
}
   14344:	0008      	movs	r0, r1
   14346:	bd30      	pop	{r4, r5, pc}
   14348:	20000930 	.word	0x20000930

0001434c <MQTTPacket_encode>:
{
   1434c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1434e:	b083      	sub	sp, #12
   14350:	2500      	movs	r5, #0
		char d = length % 128;
   14352:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   14354:	2780      	movs	r7, #128	; 0x80
   14356:	427f      	negs	r7, r7
   14358:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   1435a:	17ca      	asrs	r2, r1, #31
   1435c:	0e54      	lsrs	r4, r2, #25
   1435e:	190b      	adds	r3, r1, r4
   14360:	4033      	ands	r3, r6
   14362:	1b1b      	subs	r3, r3, r4
   14364:	b2db      	uxtb	r3, r3
		length /= 128;
   14366:	4032      	ands	r2, r6
   14368:	1851      	adds	r1, r2, r1
   1436a:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   1436c:	2900      	cmp	r1, #0
   1436e:	dd03      	ble.n	14378 <MQTTPacket_encode+0x2c>
			d |= 0x80;
   14370:	433b      	orrs	r3, r7
		buf[rc++] = d;
   14372:	5543      	strb	r3, [r0, r5]
   14374:	3501      	adds	r5, #1
   14376:	e7ef      	b.n	14358 <MQTTPacket_encode+0xc>
   14378:	5543      	strb	r3, [r0, r5]
   1437a:	9801      	ldr	r0, [sp, #4]
   1437c:	3001      	adds	r0, #1
}
   1437e:	b003      	add	sp, #12
   14380:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014382 <MQTTPacket_decode>:
{
   14382:	b5f0      	push	{r4, r5, r6, r7, lr}
   14384:	46ce      	mov	lr, r9
   14386:	4647      	mov	r7, r8
   14388:	b580      	push	{r7, lr}
   1438a:	b083      	sub	sp, #12
   1438c:	4680      	mov	r8, r0
   1438e:	000f      	movs	r7, r1
	*value = 0;
   14390:	2300      	movs	r3, #0
   14392:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   14394:	2401      	movs	r4, #1
	int multiplier = 1;
   14396:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   14398:	466b      	mov	r3, sp
   1439a:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   1439c:	237f      	movs	r3, #127	; 0x7f
   1439e:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   143a0:	2101      	movs	r1, #1
   143a2:	0028      	movs	r0, r5
   143a4:	47c0      	blx	r8
		if (rc != 1)
   143a6:	2801      	cmp	r0, #1
   143a8:	d10e      	bne.n	143c8 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   143aa:	782b      	ldrb	r3, [r5, #0]
   143ac:	464a      	mov	r2, r9
   143ae:	401a      	ands	r2, r3
   143b0:	4372      	muls	r2, r6
   143b2:	6839      	ldr	r1, [r7, #0]
   143b4:	468c      	mov	ip, r1
   143b6:	4462      	add	r2, ip
   143b8:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   143ba:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   143bc:	b25b      	sxtb	r3, r3
   143be:	2b00      	cmp	r3, #0
   143c0:	da02      	bge.n	143c8 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   143c2:	3401      	adds	r4, #1
   143c4:	2c05      	cmp	r4, #5
   143c6:	d1eb      	bne.n	143a0 <MQTTPacket_decode+0x1e>
}
   143c8:	0020      	movs	r0, r4
   143ca:	b003      	add	sp, #12
   143cc:	bc0c      	pop	{r2, r3}
   143ce:	4690      	mov	r8, r2
   143d0:	4699      	mov	r9, r3
   143d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000143d4 <MQTTPacket_len>:
{
   143d4:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   143d6:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   143d8:	3002      	adds	r0, #2
	if (rem_len < 128)
   143da:	2a7f      	cmp	r2, #127	; 0x7f
   143dc:	dd07      	ble.n	143ee <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   143de:	4905      	ldr	r1, [pc, #20]	; (143f4 <MQTTPacket_len+0x20>)
		rem_len += 2;
   143e0:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   143e2:	428a      	cmp	r2, r1
   143e4:	dd03      	ble.n	143ee <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   143e6:	4904      	ldr	r1, [pc, #16]	; (143f8 <MQTTPacket_len+0x24>)
		rem_len += 4;
   143e8:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   143ea:	428a      	cmp	r2, r1
   143ec:	dd00      	ble.n	143f0 <MQTTPacket_len+0x1c>
}
   143ee:	4770      	bx	lr
		rem_len += 3;
   143f0:	1d18      	adds	r0, r3, #4
   143f2:	e7fc      	b.n	143ee <MQTTPacket_len+0x1a>
   143f4:	00003fff 	.word	0x00003fff
   143f8:	001ffffe 	.word	0x001ffffe

000143fc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   143fc:	b510      	push	{r4, lr}
	bufptr = buf;
   143fe:	4b03      	ldr	r3, [pc, #12]	; (1440c <MQTTPacket_decodeBuf+0x10>)
   14400:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   14402:	4803      	ldr	r0, [pc, #12]	; (14410 <MQTTPacket_decodeBuf+0x14>)
   14404:	4b03      	ldr	r3, [pc, #12]	; (14414 <MQTTPacket_decodeBuf+0x18>)
   14406:	4798      	blx	r3
}
   14408:	bd10      	pop	{r4, pc}
   1440a:	46c0      	nop			; (mov r8, r8)
   1440c:	20000930 	.word	0x20000930
   14410:	00014329 	.word	0x00014329
   14414:	00014383 	.word	0x00014383

00014418 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   14418:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   1441a:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   1441c:	7813      	ldrb	r3, [r2, #0]
   1441e:	021b      	lsls	r3, r3, #8
   14420:	7850      	ldrb	r0, [r2, #1]
   14422:	1818      	adds	r0, r3, r0
	*pptr += 2;
   14424:	3202      	adds	r2, #2
   14426:	600a      	str	r2, [r1, #0]
	return len;
}
   14428:	4770      	bx	lr

0001442a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   1442a:	0002      	movs	r2, r0
	char c = **pptr;
   1442c:	6803      	ldr	r3, [r0, #0]
   1442e:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   14430:	3301      	adds	r3, #1
   14432:	6013      	str	r3, [r2, #0]
	return c;
}
   14434:	4770      	bx	lr

00014436 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   14436:	6803      	ldr	r3, [r0, #0]
   14438:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   1443a:	6803      	ldr	r3, [r0, #0]
   1443c:	3301      	adds	r3, #1
   1443e:	6003      	str	r3, [r0, #0]
}
   14440:	4770      	bx	lr

00014442 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   14442:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   14444:	17ca      	asrs	r2, r1, #31
   14446:	23ff      	movs	r3, #255	; 0xff
   14448:	001c      	movs	r4, r3
   1444a:	4014      	ands	r4, r2
   1444c:	1864      	adds	r4, r4, r1
   1444e:	1224      	asrs	r4, r4, #8
   14450:	6805      	ldr	r5, [r0, #0]
   14452:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   14454:	6804      	ldr	r4, [r0, #0]
   14456:	1c65      	adds	r5, r4, #1
   14458:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   1445a:	0e12      	lsrs	r2, r2, #24
   1445c:	1889      	adds	r1, r1, r2
   1445e:	400b      	ands	r3, r1
   14460:	1a9b      	subs	r3, r3, r2
   14462:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   14464:	6803      	ldr	r3, [r0, #0]
   14466:	3301      	adds	r3, #1
   14468:	6003      	str	r3, [r0, #0]
}
   1446a:	bd30      	pop	{r4, r5, pc}

0001446c <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   1446c:	b570      	push	{r4, r5, r6, lr}
   1446e:	0004      	movs	r4, r0
   14470:	000e      	movs	r6, r1
	int len = strlen(string);
   14472:	0008      	movs	r0, r1
   14474:	4b08      	ldr	r3, [pc, #32]	; (14498 <writeCString+0x2c>)
   14476:	4798      	blx	r3
   14478:	0005      	movs	r5, r0
	writeInt(pptr, len);
   1447a:	0001      	movs	r1, r0
   1447c:	0020      	movs	r0, r4
   1447e:	4b07      	ldr	r3, [pc, #28]	; (1449c <writeCString+0x30>)
   14480:	4798      	blx	r3
	memcpy(*pptr, string, len);
   14482:	002a      	movs	r2, r5
   14484:	0031      	movs	r1, r6
   14486:	6820      	ldr	r0, [r4, #0]
   14488:	4b05      	ldr	r3, [pc, #20]	; (144a0 <writeCString+0x34>)
   1448a:	4798      	blx	r3
	*pptr += len;
   1448c:	6823      	ldr	r3, [r4, #0]
   1448e:	469c      	mov	ip, r3
   14490:	4465      	add	r5, ip
   14492:	6025      	str	r5, [r4, #0]
}
   14494:	bd70      	pop	{r4, r5, r6, pc}
   14496:	46c0      	nop			; (mov r8, r8)
   14498:	000195c7 	.word	0x000195c7
   1449c:	00014443 	.word	0x00014443
   144a0:	00018fd5 	.word	0x00018fd5

000144a4 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   144a4:	b530      	push	{r4, r5, lr}
   144a6:	b085      	sub	sp, #20
   144a8:	0005      	movs	r5, r0
   144aa:	9101      	str	r1, [sp, #4]
   144ac:	9303      	str	r3, [sp, #12]
   144ae:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   144b0:	dc06      	bgt.n	144c0 <writeMQTTString+0x1c>
   144b2:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   144b4:	2900      	cmp	r1, #0
   144b6:	d010      	beq.n	144da <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   144b8:	4b0a      	ldr	r3, [pc, #40]	; (144e4 <writeMQTTString+0x40>)
   144ba:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   144bc:	b005      	add	sp, #20
   144be:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   144c0:	0011      	movs	r1, r2
   144c2:	4b09      	ldr	r3, [pc, #36]	; (144e8 <writeMQTTString+0x44>)
   144c4:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   144c6:	0022      	movs	r2, r4
   144c8:	9903      	ldr	r1, [sp, #12]
   144ca:	6828      	ldr	r0, [r5, #0]
   144cc:	4b07      	ldr	r3, [pc, #28]	; (144ec <writeMQTTString+0x48>)
   144ce:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   144d0:	682b      	ldr	r3, [r5, #0]
   144d2:	469c      	mov	ip, r3
   144d4:	4464      	add	r4, ip
   144d6:	602c      	str	r4, [r5, #0]
   144d8:	e7f0      	b.n	144bc <writeMQTTString+0x18>
		writeInt(pptr, 0);
   144da:	2100      	movs	r1, #0
   144dc:	4b02      	ldr	r3, [pc, #8]	; (144e8 <writeMQTTString+0x44>)
   144de:	4798      	blx	r3
}
   144e0:	e7ec      	b.n	144bc <writeMQTTString+0x18>
   144e2:	46c0      	nop			; (mov r8, r8)
   144e4:	0001446d 	.word	0x0001446d
   144e8:	00014443 	.word	0x00014443
   144ec:	00018fd5 	.word	0x00018fd5

000144f0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   144f0:	b570      	push	{r4, r5, r6, lr}
   144f2:	0005      	movs	r5, r0
   144f4:	000c      	movs	r4, r1
   144f6:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   144f8:	680b      	ldr	r3, [r1, #0]
   144fa:	1ad3      	subs	r3, r2, r3
   144fc:	2b01      	cmp	r3, #1
   144fe:	dd12      	ble.n	14526 <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   14500:	0008      	movs	r0, r1
   14502:	4b0a      	ldr	r3, [pc, #40]	; (1452c <readMQTTLenString+0x3c>)
   14504:	4798      	blx	r3
   14506:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   14508:	6822      	ldr	r2, [r4, #0]
   1450a:	1811      	adds	r1, r2, r0
	int rc = 0;
   1450c:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   1450e:	428e      	cmp	r6, r1
   14510:	d305      	bcc.n	1451e <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   14512:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   14514:	6823      	ldr	r3, [r4, #0]
   14516:	469c      	mov	ip, r3
   14518:	4460      	add	r0, ip
   1451a:	6020      	str	r0, [r4, #0]
			rc = 1;
   1451c:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   1451e:	2200      	movs	r2, #0
   14520:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   14522:	0018      	movs	r0, r3
   14524:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   14526:	2300      	movs	r3, #0
   14528:	e7f9      	b.n	1451e <readMQTTLenString+0x2e>
   1452a:	46c0      	nop			; (mov r8, r8)
   1452c:	00014419 	.word	0x00014419

00014530 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   14530:	b500      	push	{lr}
   14532:	b085      	sub	sp, #20
   14534:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   14536:	2800      	cmp	r0, #0
   14538:	d003      	beq.n	14542 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   1453a:	4b03      	ldr	r3, [pc, #12]	; (14548 <MQTTstrlen+0x18>)
   1453c:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   1453e:	b005      	add	sp, #20
   14540:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   14542:	9802      	ldr	r0, [sp, #8]
	return rc;
   14544:	e7fb      	b.n	1453e <MQTTstrlen+0xe>
   14546:	46c0      	nop			; (mov r8, r8)
   14548:	000195c7 	.word	0x000195c7

0001454c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   1454c:	b570      	push	{r4, r5, r6, lr}
   1454e:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   14550:	6806      	ldr	r6, [r0, #0]
   14552:	2e00      	cmp	r6, #0
   14554:	d00b      	beq.n	1456e <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   14556:	0030      	movs	r0, r6
   14558:	4b0b      	ldr	r3, [pc, #44]	; (14588 <MQTTPacket_equals+0x3c>)
   1455a:	4798      	blx	r3
   1455c:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   1455e:	0028      	movs	r0, r5
   14560:	4b09      	ldr	r3, [pc, #36]	; (14588 <MQTTPacket_equals+0x3c>)
   14562:	4798      	blx	r3
   14564:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14566:	4284      	cmp	r4, r0
   14568:	d004      	beq.n	14574 <MQTTPacket_equals+0x28>
}
   1456a:	0018      	movs	r0, r3
   1456c:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   1456e:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   14570:	6844      	ldr	r4, [r0, #4]
   14572:	e7f4      	b.n	1455e <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14574:	0022      	movs	r2, r4
   14576:	0029      	movs	r1, r5
   14578:	0030      	movs	r0, r6
   1457a:	4b04      	ldr	r3, [pc, #16]	; (1458c <MQTTPacket_equals+0x40>)
   1457c:	4798      	blx	r3
   1457e:	4243      	negs	r3, r0
   14580:	4143      	adcs	r3, r0
   14582:	b2db      	uxtb	r3, r3
   14584:	e7f1      	b.n	1456a <MQTTPacket_equals+0x1e>
   14586:	46c0      	nop			; (mov r8, r8)
   14588:	000195c7 	.word	0x000195c7
   1458c:	000195d5 	.word	0x000195d5

00014590 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   14590:	b510      	push	{r4, lr}
   14592:	b084      	sub	sp, #16
   14594:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   14596:	0008      	movs	r0, r1
   14598:	0011      	movs	r1, r2
   1459a:	001a      	movs	r2, r3
   1459c:	4b05      	ldr	r3, [pc, #20]	; (145b4 <MQTTSerialize_publishLength+0x24>)
   1459e:	4798      	blx	r3
   145a0:	3002      	adds	r0, #2
   145a2:	9b06      	ldr	r3, [sp, #24]
   145a4:	469c      	mov	ip, r3
   145a6:	4460      	add	r0, ip
	if (qos > 0)
   145a8:	2c00      	cmp	r4, #0
   145aa:	dd00      	ble.n	145ae <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   145ac:	3002      	adds	r0, #2
	return len;
}
   145ae:	b004      	add	sp, #16
   145b0:	bd10      	pop	{r4, pc}
   145b2:	46c0      	nop			; (mov r8, r8)
   145b4:	00014531 	.word	0x00014531

000145b8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   145b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   145ba:	46de      	mov	lr, fp
   145bc:	4657      	mov	r7, sl
   145be:	464e      	mov	r6, r9
   145c0:	b5c0      	push	{r6, r7, lr}
   145c2:	b084      	sub	sp, #16
   145c4:	0007      	movs	r7, r0
   145c6:	468b      	mov	fp, r1
   145c8:	4692      	mov	sl, r2
   145ca:	001e      	movs	r6, r3
   145cc:	ab0c      	add	r3, sp, #48	; 0x30
   145ce:	781b      	ldrb	r3, [r3, #0]
   145d0:	4699      	mov	r9, r3
   145d2:	ab0d      	add	r3, sp, #52	; 0x34
   145d4:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   145d6:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   145d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   145da:	9300      	str	r3, [sp, #0]
   145dc:	990e      	ldr	r1, [sp, #56]	; 0x38
   145de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   145e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   145e2:	0030      	movs	r0, r6
   145e4:	4d1f      	ldr	r5, [pc, #124]	; (14664 <MQTTSerialize_publish+0xac>)
   145e6:	47a8      	blx	r5
   145e8:	0005      	movs	r5, r0
   145ea:	4b1f      	ldr	r3, [pc, #124]	; (14668 <MQTTSerialize_publish+0xb0>)
   145ec:	4798      	blx	r3
   145ee:	4558      	cmp	r0, fp
   145f0:	dc34      	bgt.n	1465c <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   145f2:	2201      	movs	r2, #1
   145f4:	4653      	mov	r3, sl
   145f6:	4013      	ands	r3, r2
   145f8:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   145fa:	2103      	movs	r1, #3
   145fc:	4031      	ands	r1, r6
   145fe:	0048      	lsls	r0, r1, #1
   14600:	2130      	movs	r1, #48	; 0x30
   14602:	4319      	orrs	r1, r3
   14604:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   14606:	464b      	mov	r3, r9
   14608:	4013      	ands	r3, r2
   1460a:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1460c:	4319      	orrs	r1, r3
   1460e:	a803      	add	r0, sp, #12
   14610:	4b16      	ldr	r3, [pc, #88]	; (1466c <MQTTSerialize_publish+0xb4>)
   14612:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   14614:	0029      	movs	r1, r5
   14616:	9803      	ldr	r0, [sp, #12]
   14618:	4b15      	ldr	r3, [pc, #84]	; (14670 <MQTTSerialize_publish+0xb8>)
   1461a:	4798      	blx	r3
   1461c:	9b03      	ldr	r3, [sp, #12]
   1461e:	469c      	mov	ip, r3
   14620:	4460      	add	r0, ip
   14622:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   14624:	990e      	ldr	r1, [sp, #56]	; 0x38
   14626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14628:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1462a:	a803      	add	r0, sp, #12
   1462c:	4d11      	ldr	r5, [pc, #68]	; (14674 <MQTTSerialize_publish+0xbc>)
   1462e:	47a8      	blx	r5

	if (qos > 0)
   14630:	2e00      	cmp	r6, #0
   14632:	dd03      	ble.n	1463c <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   14634:	0021      	movs	r1, r4
   14636:	a803      	add	r0, sp, #12
   14638:	4b0f      	ldr	r3, [pc, #60]	; (14678 <MQTTSerialize_publish+0xc0>)
   1463a:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   1463c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1463e:	9911      	ldr	r1, [sp, #68]	; 0x44
   14640:	9803      	ldr	r0, [sp, #12]
   14642:	4b0e      	ldr	r3, [pc, #56]	; (1467c <MQTTSerialize_publish+0xc4>)
   14644:	4798      	blx	r3
	ptr += payloadlen;
   14646:	9b03      	ldr	r3, [sp, #12]
   14648:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1464a:	4694      	mov	ip, r2
   1464c:	4463      	add	r3, ip

	rc = ptr - buf;
   1464e:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   14650:	b004      	add	sp, #16
   14652:	bc1c      	pop	{r2, r3, r4}
   14654:	4691      	mov	r9, r2
   14656:	469a      	mov	sl, r3
   14658:	46a3      	mov	fp, r4
   1465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1465c:	2002      	movs	r0, #2
   1465e:	4240      	negs	r0, r0
	return rc;
   14660:	e7f6      	b.n	14650 <MQTTSerialize_publish+0x98>
   14662:	46c0      	nop			; (mov r8, r8)
   14664:	00014591 	.word	0x00014591
   14668:	000143d5 	.word	0x000143d5
   1466c:	00014437 	.word	0x00014437
   14670:	0001434d 	.word	0x0001434d
   14674:	000144a5 	.word	0x000144a5
   14678:	00014443 	.word	0x00014443
   1467c:	00018fd5 	.word	0x00018fd5

00014680 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   14680:	b530      	push	{r4, r5, lr}
   14682:	b083      	sub	sp, #12
   14684:	0004      	movs	r4, r0
   14686:	a806      	add	r0, sp, #24
   14688:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   1468a:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   1468c:	2903      	cmp	r1, #3
   1468e:	dd1e      	ble.n	146ce <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   14690:	210f      	movs	r1, #15
   14692:	4011      	ands	r1, r2
	header.bits.dup = dup;
   14694:	2001      	movs	r0, #1
   14696:	4003      	ands	r3, r0
   14698:	00db      	lsls	r3, r3, #3
   1469a:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   1469c:	3a06      	subs	r2, #6
   1469e:	4250      	negs	r0, r2
   146a0:	4142      	adcs	r2, r0
   146a2:	0052      	lsls	r2, r2, #1
   146a4:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   146a6:	4311      	orrs	r1, r2
   146a8:	a801      	add	r0, sp, #4
   146aa:	4b0a      	ldr	r3, [pc, #40]	; (146d4 <MQTTSerialize_ack+0x54>)
   146ac:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   146ae:	2102      	movs	r1, #2
   146b0:	9801      	ldr	r0, [sp, #4]
   146b2:	4b09      	ldr	r3, [pc, #36]	; (146d8 <MQTTSerialize_ack+0x58>)
   146b4:	4798      	blx	r3
   146b6:	9b01      	ldr	r3, [sp, #4]
   146b8:	469c      	mov	ip, r3
   146ba:	4460      	add	r0, ip
   146bc:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   146be:	0029      	movs	r1, r5
   146c0:	a801      	add	r0, sp, #4
   146c2:	4b06      	ldr	r3, [pc, #24]	; (146dc <MQTTSerialize_ack+0x5c>)
   146c4:	4798      	blx	r3
	rc = ptr - buf;
   146c6:	9b01      	ldr	r3, [sp, #4]
   146c8:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   146ca:	b003      	add	sp, #12
   146cc:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   146ce:	2002      	movs	r0, #2
   146d0:	4240      	negs	r0, r0
	return rc;
   146d2:	e7fa      	b.n	146ca <MQTTSerialize_ack+0x4a>
   146d4:	00014437 	.word	0x00014437
   146d8:	0001434d 	.word	0x0001434d
   146dc:	00014443 	.word	0x00014443

000146e0 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   146e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   146e2:	46c6      	mov	lr, r8
   146e4:	b500      	push	{lr}
   146e6:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   146e8:	dd12      	ble.n	14710 <MQTTSerialize_subscribeLength+0x30>
   146ea:	000c      	movs	r4, r1
   146ec:	2602      	movs	r6, #2
   146ee:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   146f0:	4b08      	ldr	r3, [pc, #32]	; (14714 <MQTTSerialize_subscribeLength+0x34>)
   146f2:	4698      	mov	r8, r3
   146f4:	6820      	ldr	r0, [r4, #0]
   146f6:	6861      	ldr	r1, [r4, #4]
   146f8:	68a2      	ldr	r2, [r4, #8]
   146fa:	47c0      	blx	r8
   146fc:	3003      	adds	r0, #3
   146fe:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   14700:	3501      	adds	r5, #1
   14702:	340c      	adds	r4, #12
   14704:	42af      	cmp	r7, r5
   14706:	d1f5      	bne.n	146f4 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   14708:	0030      	movs	r0, r6
   1470a:	bc04      	pop	{r2}
   1470c:	4690      	mov	r8, r2
   1470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   14710:	2602      	movs	r6, #2
	return len;
   14712:	e7f9      	b.n	14708 <MQTTSerialize_subscribeLength+0x28>
   14714:	00014531 	.word	0x00014531

00014718 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   14718:	b5f0      	push	{r4, r5, r6, r7, lr}
   1471a:	46d6      	mov	lr, sl
   1471c:	464f      	mov	r7, r9
   1471e:	4646      	mov	r6, r8
   14720:	b5c0      	push	{r6, r7, lr}
   14722:	b084      	sub	sp, #16
   14724:	4682      	mov	sl, r0
   14726:	000e      	movs	r6, r1
   14728:	0015      	movs	r5, r2
   1472a:	9301      	str	r3, [sp, #4]
   1472c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   1472e:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   14730:	990d      	ldr	r1, [sp, #52]	; 0x34
   14732:	0038      	movs	r0, r7
   14734:	4b1f      	ldr	r3, [pc, #124]	; (147b4 <MQTTSerialize_subscribe+0x9c>)
   14736:	4798      	blx	r3
   14738:	0004      	movs	r4, r0
   1473a:	4b1f      	ldr	r3, [pc, #124]	; (147b8 <MQTTSerialize_subscribe+0xa0>)
   1473c:	4798      	blx	r3
   1473e:	42b0      	cmp	r0, r6
   14740:	dc34      	bgt.n	147ac <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   14742:	2101      	movs	r1, #1
   14744:	4029      	ands	r1, r5
   14746:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   14748:	2180      	movs	r1, #128	; 0x80
   1474a:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   1474c:	2302      	movs	r3, #2
   1474e:	4319      	orrs	r1, r3
   14750:	a803      	add	r0, sp, #12
   14752:	4b1a      	ldr	r3, [pc, #104]	; (147bc <MQTTSerialize_subscribe+0xa4>)
   14754:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   14756:	0021      	movs	r1, r4
   14758:	9803      	ldr	r0, [sp, #12]
   1475a:	4b19      	ldr	r3, [pc, #100]	; (147c0 <MQTTSerialize_subscribe+0xa8>)
   1475c:	4798      	blx	r3
   1475e:	9a03      	ldr	r2, [sp, #12]
   14760:	4694      	mov	ip, r2
   14762:	4460      	add	r0, ip
   14764:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   14766:	9901      	ldr	r1, [sp, #4]
   14768:	a803      	add	r0, sp, #12
   1476a:	4b16      	ldr	r3, [pc, #88]	; (147c4 <MQTTSerialize_subscribe+0xac>)
   1476c:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   1476e:	2f00      	cmp	r7, #0
   14770:	dd13      	ble.n	1479a <MQTTSerialize_subscribe+0x82>
   14772:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   14774:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   14776:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   14778:	4b13      	ldr	r3, [pc, #76]	; (147c8 <MQTTSerialize_subscribe+0xb0>)
   1477a:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   1477c:	4b0f      	ldr	r3, [pc, #60]	; (147bc <MQTTSerialize_subscribe+0xa4>)
   1477e:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   14780:	6821      	ldr	r1, [r4, #0]
   14782:	6862      	ldr	r2, [r4, #4]
   14784:	68a3      	ldr	r3, [r4, #8]
   14786:	a803      	add	r0, sp, #12
   14788:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   1478a:	ce02      	ldmia	r6!, {r1}
   1478c:	b2c9      	uxtb	r1, r1
   1478e:	a803      	add	r0, sp, #12
   14790:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   14792:	3501      	adds	r5, #1
   14794:	340c      	adds	r4, #12
   14796:	42af      	cmp	r7, r5
   14798:	d1f2      	bne.n	14780 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   1479a:	9b03      	ldr	r3, [sp, #12]
   1479c:	4652      	mov	r2, sl
   1479e:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   147a0:	b004      	add	sp, #16
   147a2:	bc1c      	pop	{r2, r3, r4}
   147a4:	4690      	mov	r8, r2
   147a6:	4699      	mov	r9, r3
   147a8:	46a2      	mov	sl, r4
   147aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   147ac:	2002      	movs	r0, #2
   147ae:	4240      	negs	r0, r0
	return rc;
   147b0:	e7f6      	b.n	147a0 <MQTTSerialize_subscribe+0x88>
   147b2:	46c0      	nop			; (mov r8, r8)
   147b4:	000146e1 	.word	0x000146e1
   147b8:	000143d5 	.word	0x000143d5
   147bc:	00014437 	.word	0x00014437
   147c0:	0001434d 	.word	0x0001434d
   147c4:	00014443 	.word	0x00014443
   147c8:	000144a5 	.word	0x000144a5

000147cc <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   147cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   147ce:	46ce      	mov	lr, r9
   147d0:	4647      	mov	r7, r8
   147d2:	b580      	push	{r7, lr}
   147d4:	b083      	sub	sp, #12
   147d6:	0004      	movs	r4, r0
   147d8:	000e      	movs	r6, r1
   147da:	0015      	movs	r5, r2
   147dc:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   147de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   147e0:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   147e2:	a801      	add	r0, sp, #4
   147e4:	4b1e      	ldr	r3, [pc, #120]	; (14860 <MQTTDeserialize_suback+0x94>)
   147e6:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   147e8:	23f0      	movs	r3, #240	; 0xf0
   147ea:	4003      	ands	r3, r0
	int rc = 0;
   147ec:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   147ee:	2b90      	cmp	r3, #144	; 0x90
   147f0:	d004      	beq.n	147fc <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   147f2:	b003      	add	sp, #12
   147f4:	bc0c      	pop	{r2, r3}
   147f6:	4690      	mov	r8, r2
   147f8:	4699      	mov	r9, r3
   147fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   147fc:	4669      	mov	r1, sp
   147fe:	9801      	ldr	r0, [sp, #4]
   14800:	4b18      	ldr	r3, [pc, #96]	; (14864 <MQTTDeserialize_suback+0x98>)
   14802:	4798      	blx	r3
   14804:	9b01      	ldr	r3, [sp, #4]
   14806:	181b      	adds	r3, r3, r0
   14808:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   1480a:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   1480c:	2a01      	cmp	r2, #1
   1480e:	ddf0      	ble.n	147f2 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   14810:	4698      	mov	r8, r3
   14812:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   14814:	a801      	add	r0, sp, #4
   14816:	4b14      	ldr	r3, [pc, #80]	; (14868 <MQTTDeserialize_suback+0x9c>)
   14818:	4798      	blx	r3
   1481a:	8020      	strh	r0, [r4, #0]
	*count = 0;
   1481c:	2300      	movs	r3, #0
   1481e:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   14820:	9b01      	ldr	r3, [sp, #4]
   14822:	4598      	cmp	r8, r3
   14824:	d916      	bls.n	14854 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   14826:	2e00      	cmp	r6, #0
   14828:	db16      	blt.n	14858 <MQTTDeserialize_suback+0x8c>
   1482a:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   1482c:	4a0c      	ldr	r2, [pc, #48]	; (14860 <MQTTDeserialize_suback+0x94>)
   1482e:	4691      	mov	r9, r2
   14830:	1c5a      	adds	r2, r3, #1
   14832:	602a      	str	r2, [r5, #0]
   14834:	009b      	lsls	r3, r3, #2
   14836:	18fc      	adds	r4, r7, r3
   14838:	a801      	add	r0, sp, #4
   1483a:	47c8      	blx	r9
   1483c:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   1483e:	9b01      	ldr	r3, [sp, #4]
   14840:	4598      	cmp	r8, r3
   14842:	d905      	bls.n	14850 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   14844:	682b      	ldr	r3, [r5, #0]
   14846:	42b3      	cmp	r3, r6
   14848:	ddf2      	ble.n	14830 <MQTTDeserialize_suback+0x64>
			rc = -1;
   1484a:	2001      	movs	r0, #1
   1484c:	4240      	negs	r0, r0
	return rc;
   1484e:	e7d0      	b.n	147f2 <MQTTDeserialize_suback+0x26>
	rc = 1;
   14850:	2001      	movs	r0, #1
   14852:	e7ce      	b.n	147f2 <MQTTDeserialize_suback+0x26>
   14854:	2001      	movs	r0, #1
   14856:	e7cc      	b.n	147f2 <MQTTDeserialize_suback+0x26>
			rc = -1;
   14858:	2001      	movs	r0, #1
   1485a:	4240      	negs	r0, r0
   1485c:	e7c9      	b.n	147f2 <MQTTDeserialize_suback+0x26>
   1485e:	46c0      	nop			; (mov r8, r8)
   14860:	0001442b 	.word	0x0001442b
   14864:	000143fd 	.word	0x000143fd
   14868:	00014419 	.word	0x00014419

0001486c <clear_buffer>:

/** 
* Clears the stdin buffer for receiving new command
*/
void clear_buffer (uint8_t* buffer)
{
   1486c:	0002      	movs	r2, r0
   1486e:	3219      	adds	r2, #25
	for(int i = 0 ; i < CLI_BUF_SIZE; i++)
		buffer[i] = 0;	
   14870:	2300      	movs	r3, #0
   14872:	7003      	strb	r3, [r0, #0]
   14874:	3001      	adds	r0, #1
	for(int i = 0 ; i < CLI_BUF_SIZE; i++)
   14876:	4290      	cmp	r0, r2
   14878:	d1fb      	bne.n	14872 <clear_buffer+0x6>
}
   1487a:	4770      	bx	lr

0001487c <read_to_buffer>:

/**
* Reads char by char from the stdin serial with backspace handling
*/
void read_to_buffer (uint8_t* buffer)
{
   1487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1487e:	46ce      	mov	lr, r9
   14880:	4647      	mov	r7, r8
   14882:	b580      	push	{r7, lr}
   14884:	0007      	movs	r7, r0
	int i = 0;
   14886:	2400      	movs	r4, #0
	
	while(i < CLI_BUF_SIZE)
	{
		buffer[i] = getchar();
   14888:	4b4b      	ldr	r3, [pc, #300]	; (149b8 <read_to_buffer+0x13c>)
   1488a:	4698      	mov	r8, r3
			}				
					
			continue;
		}
		
		putchar(buffer[i]);
   1488c:	4699      	mov	r9, r3
   1488e:	e06a      	b.n	14966 <read_to_buffer+0xea>
		buffer[i] = getchar();
   14890:	6841      	ldr	r1, [r0, #4]
   14892:	4b4a      	ldr	r3, [pc, #296]	; (149bc <read_to_buffer+0x140>)
   14894:	4798      	blx	r3
   14896:	b2c1      	uxtb	r1, r0
   14898:	e074      	b.n	14984 <read_to_buffer+0x108>
			if(i != 0)
   1489a:	2c00      	cmp	r4, #0
   1489c:	d045      	beq.n	1492a <read_to_buffer+0xae>
				putchar(buffer[i]); // This guy moves the cursor in the terminal (buffer of i contains \b)
   1489e:	4b46      	ldr	r3, [pc, #280]	; (149b8 <read_to_buffer+0x13c>)
   148a0:	6818      	ldr	r0, [r3, #0]
   148a2:	6882      	ldr	r2, [r0, #8]
_ELIDABLE_INLINE int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   148a4:	6893      	ldr	r3, [r2, #8]
   148a6:	3b01      	subs	r3, #1
   148a8:	6093      	str	r3, [r2, #8]
   148aa:	2b00      	cmp	r3, #0
   148ac:	db26      	blt.n	148fc <read_to_buffer+0x80>
		return (*_p->_p++ = _c);
   148ae:	6813      	ldr	r3, [r2, #0]
   148b0:	1c59      	adds	r1, r3, #1
   148b2:	6011      	str	r1, [r2, #0]
   148b4:	2208      	movs	r2, #8
   148b6:	701a      	strb	r2, [r3, #0]
				putchar(' ');		// This guy prints a space	
   148b8:	4b3f      	ldr	r3, [pc, #252]	; (149b8 <read_to_buffer+0x13c>)
   148ba:	6818      	ldr	r0, [r3, #0]
   148bc:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   148be:	6893      	ldr	r3, [r2, #8]
   148c0:	3b01      	subs	r3, #1
   148c2:	6093      	str	r3, [r2, #8]
   148c4:	2b00      	cmp	r3, #0
   148c6:	db20      	blt.n	1490a <read_to_buffer+0x8e>
		return (*_p->_p++ = _c);
   148c8:	6813      	ldr	r3, [r2, #0]
   148ca:	1c59      	adds	r1, r3, #1
   148cc:	6011      	str	r1, [r2, #0]
   148ce:	2220      	movs	r2, #32
   148d0:	701a      	strb	r2, [r3, #0]
				putchar(buffer[i]); // This guy again goes back to where it should be
   148d2:	4b39      	ldr	r3, [pc, #228]	; (149b8 <read_to_buffer+0x13c>)
   148d4:	681b      	ldr	r3, [r3, #0]
   148d6:	469c      	mov	ip, r3
   148d8:	7831      	ldrb	r1, [r6, #0]
   148da:	689a      	ldr	r2, [r3, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   148dc:	6893      	ldr	r3, [r2, #8]
   148de:	3b01      	subs	r3, #1
   148e0:	6093      	str	r3, [r2, #8]
   148e2:	2b00      	cmp	r3, #0
   148e4:	db18      	blt.n	14918 <read_to_buffer+0x9c>
		return (*_p->_p++ = _c);
   148e6:	6813      	ldr	r3, [r2, #0]
   148e8:	1c58      	adds	r0, r3, #1
   148ea:	6010      	str	r0, [r2, #0]
   148ec:	7019      	strb	r1, [r3, #0]
				buffer[i] = 0;
   148ee:	2300      	movs	r3, #0
   148f0:	7033      	strb	r3, [r6, #0]
				buffer[i-1] = 0;
   148f2:	197d      	adds	r5, r7, r5
   148f4:	3d01      	subs	r5, #1
   148f6:	702b      	strb	r3, [r5, #0]
				i--;	
   148f8:	3c01      	subs	r4, #1
   148fa:	e032      	b.n	14962 <read_to_buffer+0xe6>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   148fc:	6991      	ldr	r1, [r2, #24]
   148fe:	428b      	cmp	r3, r1
   14900:	dad5      	bge.n	148ae <read_to_buffer+0x32>
	else
		return (__swbuf_r(_ptr, _c, _p));
   14902:	2108      	movs	r1, #8
   14904:	4b2e      	ldr	r3, [pc, #184]	; (149c0 <read_to_buffer+0x144>)
   14906:	4798      	blx	r3
   14908:	e7d6      	b.n	148b8 <read_to_buffer+0x3c>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   1490a:	6991      	ldr	r1, [r2, #24]
   1490c:	428b      	cmp	r3, r1
   1490e:	dadb      	bge.n	148c8 <read_to_buffer+0x4c>
		return (__swbuf_r(_ptr, _c, _p));
   14910:	2120      	movs	r1, #32
   14912:	4b2b      	ldr	r3, [pc, #172]	; (149c0 <read_to_buffer+0x144>)
   14914:	4798      	blx	r3
   14916:	e7dc      	b.n	148d2 <read_to_buffer+0x56>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   14918:	6990      	ldr	r0, [r2, #24]
   1491a:	4283      	cmp	r3, r0
   1491c:	db01      	blt.n	14922 <read_to_buffer+0xa6>
   1491e:	290a      	cmp	r1, #10
   14920:	d1e1      	bne.n	148e6 <read_to_buffer+0x6a>
		return (__swbuf_r(_ptr, _c, _p));
   14922:	4660      	mov	r0, ip
   14924:	4b26      	ldr	r3, [pc, #152]	; (149c0 <read_to_buffer+0x144>)
   14926:	4798      	blx	r3
   14928:	e7e1      	b.n	148ee <read_to_buffer+0x72>
				putchar(buffer[i]);	
   1492a:	4b23      	ldr	r3, [pc, #140]	; (149b8 <read_to_buffer+0x13c>)
   1492c:	6818      	ldr	r0, [r3, #0]
   1492e:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   14930:	6893      	ldr	r3, [r2, #8]
   14932:	3b01      	subs	r3, #1
   14934:	6093      	str	r3, [r2, #8]
   14936:	2b00      	cmp	r3, #0
   14938:	db07      	blt.n	1494a <read_to_buffer+0xce>
		return (*_p->_p++ = _c);
   1493a:	6813      	ldr	r3, [r2, #0]
   1493c:	1c59      	adds	r1, r3, #1
   1493e:	6011      	str	r1, [r2, #0]
   14940:	2208      	movs	r2, #8
   14942:	701a      	strb	r2, [r3, #0]
				buffer[i] = 0;
   14944:	2300      	movs	r3, #0
   14946:	7033      	strb	r3, [r6, #0]
   14948:	e00d      	b.n	14966 <read_to_buffer+0xea>
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   1494a:	6991      	ldr	r1, [r2, #24]
   1494c:	428b      	cmp	r3, r1
   1494e:	daf4      	bge.n	1493a <read_to_buffer+0xbe>
		return (__swbuf_r(_ptr, _c, _p));
   14950:	2108      	movs	r1, #8
   14952:	4b1b      	ldr	r3, [pc, #108]	; (149c0 <read_to_buffer+0x144>)
   14954:	4798      	blx	r3
   14956:	e7f5      	b.n	14944 <read_to_buffer+0xc8>
		return (*_p->_p++ = _c);
   14958:	6813      	ldr	r3, [r2, #0]
   1495a:	1c58      	adds	r0, r3, #1
   1495c:	6010      	str	r0, [r2, #0]
   1495e:	7019      	strb	r1, [r3, #0]
		i++;
   14960:	3401      	adds	r4, #1
	while(i < CLI_BUF_SIZE)
   14962:	2c18      	cmp	r4, #24
   14964:	dc23      	bgt.n	149ae <read_to_buffer+0x132>
		buffer[i] = getchar();
   14966:	0025      	movs	r5, r4
   14968:	193e      	adds	r6, r7, r4
   1496a:	4643      	mov	r3, r8
   1496c:	6818      	ldr	r0, [r3, #0]
   1496e:	6842      	ldr	r2, [r0, #4]
   14970:	6853      	ldr	r3, [r2, #4]
   14972:	3b01      	subs	r3, #1
   14974:	6053      	str	r3, [r2, #4]
   14976:	2b00      	cmp	r3, #0
   14978:	db8a      	blt.n	14890 <read_to_buffer+0x14>
   1497a:	6842      	ldr	r2, [r0, #4]
   1497c:	6813      	ldr	r3, [r2, #0]
   1497e:	1c59      	adds	r1, r3, #1
   14980:	6011      	str	r1, [r2, #0]
   14982:	7819      	ldrb	r1, [r3, #0]
   14984:	7031      	strb	r1, [r6, #0]
		if(buffer[i] == 13)
   14986:	290d      	cmp	r1, #13
   14988:	d011      	beq.n	149ae <read_to_buffer+0x132>
		if(buffer[i] == 8)
   1498a:	2908      	cmp	r1, #8
   1498c:	d085      	beq.n	1489a <read_to_buffer+0x1e>
		putchar(buffer[i]);
   1498e:	464b      	mov	r3, r9
   14990:	6818      	ldr	r0, [r3, #0]
   14992:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
   14994:	6893      	ldr	r3, [r2, #8]
   14996:	3b01      	subs	r3, #1
   14998:	6093      	str	r3, [r2, #8]
   1499a:	2b00      	cmp	r3, #0
   1499c:	dadc      	bge.n	14958 <read_to_buffer+0xdc>
   1499e:	6995      	ldr	r5, [r2, #24]
   149a0:	42ab      	cmp	r3, r5
   149a2:	db01      	blt.n	149a8 <read_to_buffer+0x12c>
   149a4:	290a      	cmp	r1, #10
   149a6:	d1d7      	bne.n	14958 <read_to_buffer+0xdc>
		return (__swbuf_r(_ptr, _c, _p));
   149a8:	4b05      	ldr	r3, [pc, #20]	; (149c0 <read_to_buffer+0x144>)
   149aa:	4798      	blx	r3
   149ac:	e7d8      	b.n	14960 <read_to_buffer+0xe4>
	}
}	
   149ae:	bc0c      	pop	{r2, r3}
   149b0:	4690      	mov	r8, r2
   149b2:	4699      	mov	r9, r3
   149b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   149b6:	46c0      	nop			; (mov r8, r8)
   149b8:	20000180 	.word	0x20000180
   149bc:	0001929d 	.word	0x0001929d
   149c0:	000197c9 	.word	0x000197c9

000149c4 <cli>:
{
   149c4:	b570      	push	{r4, r5, r6, lr}
   149c6:	b08a      	sub	sp, #40	; 0x28
   149c8:	0005      	movs	r5, r0
	clear_buffer(input);			
   149ca:	a803      	add	r0, sp, #12
   149cc:	4b63      	ldr	r3, [pc, #396]	; (14b5c <cli+0x198>)
   149ce:	4798      	blx	r3
	read_to_buffer(input);				
   149d0:	a803      	add	r0, sp, #12
   149d2:	4b63      	ldr	r3, [pc, #396]	; (14b60 <cli+0x19c>)
   149d4:	4798      	blx	r3
	if (strncmp(input,"help",strlen("help")) == 0)
   149d6:	2204      	movs	r2, #4
   149d8:	4962      	ldr	r1, [pc, #392]	; (14b64 <cli+0x1a0>)
   149da:	a803      	add	r0, sp, #12
   149dc:	4b62      	ldr	r3, [pc, #392]	; (14b68 <cli+0x1a4>)
   149de:	4798      	blx	r3
   149e0:	1e04      	subs	r4, r0, #0
   149e2:	d048      	beq.n	14a76 <cli+0xb2>
	else if (strncmp(input,"ver_bl",strlen("ver_bl")) == 0)
   149e4:	2206      	movs	r2, #6
   149e6:	4961      	ldr	r1, [pc, #388]	; (14b6c <cli+0x1a8>)
   149e8:	a803      	add	r0, sp, #12
   149ea:	4b5f      	ldr	r3, [pc, #380]	; (14b68 <cli+0x1a4>)
   149ec:	4798      	blx	r3
   149ee:	1e04      	subs	r4, r0, #0
   149f0:	d058      	beq.n	14aa4 <cli+0xe0>
	else if (strncmp(input,"ver_app",strlen("ver_app")) == 0)
   149f2:	2207      	movs	r2, #7
   149f4:	495e      	ldr	r1, [pc, #376]	; (14b70 <cli+0x1ac>)
   149f6:	a803      	add	r0, sp, #12
   149f8:	4b5b      	ldr	r3, [pc, #364]	; (14b68 <cli+0x1a4>)
   149fa:	4798      	blx	r3
   149fc:	1e04      	subs	r4, r0, #0
   149fe:	d058      	beq.n	14ab2 <cli+0xee>
	else if (strncmp(input,"mac",strlen("mac")) == 0)
   14a00:	2203      	movs	r2, #3
   14a02:	495c      	ldr	r1, [pc, #368]	; (14b74 <cli+0x1b0>)
   14a04:	a803      	add	r0, sp, #12
   14a06:	4b58      	ldr	r3, [pc, #352]	; (14b68 <cli+0x1a4>)
   14a08:	4798      	blx	r3
   14a0a:	1e04      	subs	r4, r0, #0
   14a0c:	d058      	beq.n	14ac0 <cli+0xfc>
	else if (strncmp(input,"ip",strlen("ip")) == 0)
   14a0e:	2202      	movs	r2, #2
   14a10:	4959      	ldr	r1, [pc, #356]	; (14b78 <cli+0x1b4>)
   14a12:	a803      	add	r0, sp, #12
   14a14:	4b54      	ldr	r3, [pc, #336]	; (14b68 <cli+0x1a4>)
   14a16:	4798      	blx	r3
   14a18:	1e04      	subs	r4, r0, #0
   14a1a:	d055      	beq.n	14ac8 <cli+0x104>
	else if (strncmp(input,"devName",strlen("devName")) == 0)
   14a1c:	2207      	movs	r2, #7
   14a1e:	4957      	ldr	r1, [pc, #348]	; (14b7c <cli+0x1b8>)
   14a20:	a803      	add	r0, sp, #12
   14a22:	4b51      	ldr	r3, [pc, #324]	; (14b68 <cli+0x1a4>)
   14a24:	4798      	blx	r3
   14a26:	1e04      	subs	r4, r0, #0
   14a28:	d052      	beq.n	14ad0 <cli+0x10c>
	else if (strncmp(input,"setDeviceName",strlen("setDeviceName")) == 0)
   14a2a:	220d      	movs	r2, #13
   14a2c:	4954      	ldr	r1, [pc, #336]	; (14b80 <cli+0x1bc>)
   14a2e:	a803      	add	r0, sp, #12
   14a30:	4b4d      	ldr	r3, [pc, #308]	; (14b68 <cli+0x1a4>)
   14a32:	4798      	blx	r3
   14a34:	1e04      	subs	r4, r0, #0
   14a36:	d14f      	bne.n	14ad8 <cli+0x114>
		while(input[iter1] != '\r')
   14a38:	ab03      	add	r3, sp, #12
   14a3a:	7b9b      	ldrb	r3, [r3, #14]
   14a3c:	2b0d      	cmp	r3, #13
   14a3e:	d015      	beq.n	14a6c <cli+0xa8>
			if(input[iter1] != ' ')
   14a40:	2b20      	cmp	r3, #32
   14a42:	d000      	beq.n	14a46 <cli+0x82>
   14a44:	e088      	b.n	14b58 <cli+0x194>
   14a46:	210e      	movs	r1, #14
		while(input[iter1] != '\r')
   14a48:	aa03      	add	r2, sp, #12
				iter1++;
   14a4a:	3101      	adds	r1, #1
		while(input[iter1] != '\r')
   14a4c:	5c8b      	ldrb	r3, [r1, r2]
   14a4e:	2b0d      	cmp	r3, #13
   14a50:	d00c      	beq.n	14a6c <cli+0xa8>
			if(input[iter1] != ' ')
   14a52:	2b20      	cmp	r3, #32
   14a54:	d0f9      	beq.n	14a4a <cli+0x86>
				while(input[iter1] != '\r')
   14a56:	ab03      	add	r3, sp, #12
   14a58:	5c5a      	ldrb	r2, [r3, r1]
   14a5a:	000b      	movs	r3, r1
					device_name[iter2] = input[iter1];
   14a5c:	4849      	ldr	r0, [pc, #292]	; (14b84 <cli+0x1c0>)
   14a5e:	1a41      	subs	r1, r0, r1
				while(input[iter1] != '\r')
   14a60:	a803      	add	r0, sp, #12
					device_name[iter2] = input[iter1];
   14a62:	54ca      	strb	r2, [r1, r3]
					iter1++;
   14a64:	3301      	adds	r3, #1
				while(input[iter1] != '\r')
   14a66:	5c1a      	ldrb	r2, [r3, r0]
   14a68:	2a0d      	cmp	r2, #13
   14a6a:	d1fa      	bne.n	14a62 <cli+0x9e>
		printf("\r\nDevice name set to %s\r\n",device_name);
   14a6c:	4945      	ldr	r1, [pc, #276]	; (14b84 <cli+0x1c0>)
   14a6e:	4846      	ldr	r0, [pc, #280]	; (14b88 <cli+0x1c4>)
   14a70:	4b46      	ldr	r3, [pc, #280]	; (14b8c <cli+0x1c8>)
   14a72:	4798      	blx	r3
		return 0;
   14a74:	e013      	b.n	14a9e <cli+0xda>
		printf("\r\nAvailable Commands:\r\n");
   14a76:	4846      	ldr	r0, [pc, #280]	; (14b90 <cli+0x1cc>)
   14a78:	4d46      	ldr	r5, [pc, #280]	; (14b94 <cli+0x1d0>)
   14a7a:	47a8      	blx	r5
		printf("ver_bl - bootloader version\r\n");
   14a7c:	4846      	ldr	r0, [pc, #280]	; (14b98 <cli+0x1d4>)
   14a7e:	47a8      	blx	r5
		printf("ver_app - Application code version\r\n");
   14a80:	4846      	ldr	r0, [pc, #280]	; (14b9c <cli+0x1d8>)
   14a82:	47a8      	blx	r5
		printf("mac - mac address\r\n");
   14a84:	4846      	ldr	r0, [pc, #280]	; (14ba0 <cli+0x1dc>)
   14a86:	47a8      	blx	r5
		printf("ip - ip address\r\n");
   14a88:	4846      	ldr	r0, [pc, #280]	; (14ba4 <cli+0x1e0>)
   14a8a:	47a8      	blx	r5
		printf("devName - develor name\r\n");
   14a8c:	4846      	ldr	r0, [pc, #280]	; (14ba8 <cli+0x1e4>)
   14a8e:	47a8      	blx	r5
		printf("setDeviceName <string name> - Device Name set\r\n");
   14a90:	4846      	ldr	r0, [pc, #280]	; (14bac <cli+0x1e8>)
   14a92:	47a8      	blx	r5
		printf("getDeviceName - Get Device Name\r\n");
   14a94:	4846      	ldr	r0, [pc, #280]	; (14bb0 <cli+0x1ec>)
   14a96:	47a8      	blx	r5
		clear_buffer(input);
   14a98:	a803      	add	r0, sp, #12
   14a9a:	4b30      	ldr	r3, [pc, #192]	; (14b5c <cli+0x198>)
   14a9c:	4798      	blx	r3
}
   14a9e:	0020      	movs	r0, r4
   14aa0:	b00a      	add	sp, #40	; 0x28
   14aa2:	bd70      	pop	{r4, r5, r6, pc}
		printf("\r\nBootloader Firmware version: %d.%d.%d \r\n",major,minor,patch);
   14aa4:	2301      	movs	r3, #1
   14aa6:	2201      	movs	r2, #1
   14aa8:	2101      	movs	r1, #1
   14aaa:	4842      	ldr	r0, [pc, #264]	; (14bb4 <cli+0x1f0>)
   14aac:	4d37      	ldr	r5, [pc, #220]	; (14b8c <cli+0x1c8>)
   14aae:	47a8      	blx	r5
		return 0;
   14ab0:	e7f5      	b.n	14a9e <cli+0xda>
		printf("\r\nCode Firmware version: %d.%d.%d \r\n",major,minor,patch);
   14ab2:	2306      	movs	r3, #6
   14ab4:	2205      	movs	r2, #5
   14ab6:	2104      	movs	r1, #4
   14ab8:	483f      	ldr	r0, [pc, #252]	; (14bb8 <cli+0x1f4>)
   14aba:	4d34      	ldr	r5, [pc, #208]	; (14b8c <cli+0x1c8>)
   14abc:	47a8      	blx	r5
		return 0;
   14abe:	e7ee      	b.n	14a9e <cli+0xda>
		printf("\r\nMac Address: F8-F0-05-F3-F9-9E\r\n");
   14ac0:	483e      	ldr	r0, [pc, #248]	; (14bbc <cli+0x1f8>)
   14ac2:	4b34      	ldr	r3, [pc, #208]	; (14b94 <cli+0x1d0>)
   14ac4:	4798      	blx	r3
		return 0;
   14ac6:	e7ea      	b.n	14a9e <cli+0xda>
		printf("\r\nIP Address: 0.0.0.0 \r\n");
   14ac8:	483d      	ldr	r0, [pc, #244]	; (14bc0 <cli+0x1fc>)
   14aca:	4b32      	ldr	r3, [pc, #200]	; (14b94 <cli+0x1d0>)
   14acc:	4798      	blx	r3
		return 0;
   14ace:	e7e6      	b.n	14a9e <cli+0xda>
		printf("\r\nName : DELOS INC.\r\n");
   14ad0:	483c      	ldr	r0, [pc, #240]	; (14bc4 <cli+0x200>)
   14ad2:	4b30      	ldr	r3, [pc, #192]	; (14b94 <cli+0x1d0>)
   14ad4:	4798      	blx	r3
		return 0;
   14ad6:	e7e2      	b.n	14a9e <cli+0xda>
	else if (strncmp(input,"getDeviceName",strlen("getDeviceName")) == 0)
   14ad8:	220d      	movs	r2, #13
   14ada:	493b      	ldr	r1, [pc, #236]	; (14bc8 <cli+0x204>)
   14adc:	a803      	add	r0, sp, #12
   14ade:	4b22      	ldr	r3, [pc, #136]	; (14b68 <cli+0x1a4>)
   14ae0:	4798      	blx	r3
   14ae2:	1e04      	subs	r4, r0, #0
   14ae4:	d012      	beq.n	14b0c <cli+0x148>
	else if (strncmp(input,"tempdata",strlen("tempdata")) == 0)
   14ae6:	2208      	movs	r2, #8
   14ae8:	4938      	ldr	r1, [pc, #224]	; (14bcc <cli+0x208>)
   14aea:	a803      	add	r0, sp, #12
   14aec:	4b1e      	ldr	r3, [pc, #120]	; (14b68 <cli+0x1a4>)
   14aee:	4798      	blx	r3
   14af0:	1e04      	subs	r4, r0, #0
   14af2:	d010      	beq.n	14b16 <cli+0x152>
	else if (strncmp(input,"exit",strlen("exit")) == 0)
   14af4:	2204      	movs	r2, #4
   14af6:	4936      	ldr	r1, [pc, #216]	; (14bd0 <cli+0x20c>)
   14af8:	a803      	add	r0, sp, #12
   14afa:	4b1b      	ldr	r3, [pc, #108]	; (14b68 <cli+0x1a4>)
   14afc:	4798      	blx	r3
   14afe:	2800      	cmp	r0, #0
   14b00:	d025      	beq.n	14b4e <cli+0x18a>
		printf("\n\rERROR > retry\r\n");
   14b02:	4834      	ldr	r0, [pc, #208]	; (14bd4 <cli+0x210>)
   14b04:	4b23      	ldr	r3, [pc, #140]	; (14b94 <cli+0x1d0>)
   14b06:	4798      	blx	r3
		return 0;
   14b08:	2400      	movs	r4, #0
   14b0a:	e7c8      	b.n	14a9e <cli+0xda>
		printf("\r\nDevice name is %s\r\n",device_name);
   14b0c:	491d      	ldr	r1, [pc, #116]	; (14b84 <cli+0x1c0>)
   14b0e:	4832      	ldr	r0, [pc, #200]	; (14bd8 <cli+0x214>)
   14b10:	4b1e      	ldr	r3, [pc, #120]	; (14b8c <cli+0x1c8>)
   14b12:	4798      	blx	r3
		return 0;
   14b14:	e7c3      	b.n	14a9e <cli+0xda>
		printf("\nEnter Temperature:");
   14b16:	4831      	ldr	r0, [pc, #196]	; (14bdc <cli+0x218>)
   14b18:	4b1c      	ldr	r3, [pc, #112]	; (14b8c <cli+0x1c8>)
   14b1a:	4798      	blx	r3
		scanf("%d",temp);
   14b1c:	2600      	movs	r6, #0
   14b1e:	0031      	movs	r1, r6
   14b20:	482f      	ldr	r0, [pc, #188]	; (14be0 <cli+0x21c>)
   14b22:	4b30      	ldr	r3, [pc, #192]	; (14be4 <cli+0x220>)
   14b24:	4798      	blx	r3
		snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temp);
   14b26:	0033      	movs	r3, r6
   14b28:	4a2f      	ldr	r2, [pc, #188]	; (14be8 <cli+0x224>)
   14b2a:	213f      	movs	r1, #63	; 0x3f
   14b2c:	0028      	movs	r0, r5
   14b2e:	4e2f      	ldr	r6, [pc, #188]	; (14bec <cli+0x228>)
   14b30:	47b0      	blx	r6
		mqtt_publish(&mqtt_inst, TEMP_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   14b32:	0028      	movs	r0, r5
   14b34:	4b2e      	ldr	r3, [pc, #184]	; (14bf0 <cli+0x22c>)
   14b36:	4798      	blx	r3
   14b38:	0003      	movs	r3, r0
   14b3a:	2200      	movs	r2, #0
   14b3c:	9201      	str	r2, [sp, #4]
   14b3e:	3202      	adds	r2, #2
   14b40:	9200      	str	r2, [sp, #0]
   14b42:	002a      	movs	r2, r5
   14b44:	492b      	ldr	r1, [pc, #172]	; (14bf4 <cli+0x230>)
   14b46:	482c      	ldr	r0, [pc, #176]	; (14bf8 <cli+0x234>)
   14b48:	4d2c      	ldr	r5, [pc, #176]	; (14bfc <cli+0x238>)
   14b4a:	47a8      	blx	r5
		return 0;
   14b4c:	e7a7      	b.n	14a9e <cli+0xda>
		printf("\r\nClosing cli ..... \n\r");
   14b4e:	482c      	ldr	r0, [pc, #176]	; (14c00 <cli+0x23c>)
   14b50:	4b0e      	ldr	r3, [pc, #56]	; (14b8c <cli+0x1c8>)
   14b52:	4798      	blx	r3
		return 1;
   14b54:	2401      	movs	r4, #1
   14b56:	e7a2      	b.n	14a9e <cli+0xda>
			if(input[iter1] != ' ')
   14b58:	210e      	movs	r1, #14
   14b5a:	e77c      	b.n	14a56 <cli+0x92>
   14b5c:	0001486d 	.word	0x0001486d
   14b60:	0001487d 	.word	0x0001487d
   14b64:	0001ca98 	.word	0x0001ca98
   14b68:	000195d5 	.word	0x000195d5
   14b6c:	0001cb90 	.word	0x0001cb90
   14b70:	0001cbc4 	.word	0x0001cbc4
   14b74:	0001cbf4 	.word	0x0001cbf4
   14b78:	0001b7f8 	.word	0x0001b7f8
   14b7c:	0001cc34 	.word	0x0001cc34
   14b80:	0001cc54 	.word	0x0001cc54
   14b84:	20000934 	.word	0x20000934
   14b88:	0001cc64 	.word	0x0001cc64
   14b8c:	0001916d 	.word	0x0001916d
   14b90:	0001caa0 	.word	0x0001caa0
   14b94:	00019289 	.word	0x00019289
   14b98:	0001cab8 	.word	0x0001cab8
   14b9c:	0001cad8 	.word	0x0001cad8
   14ba0:	0001cafc 	.word	0x0001cafc
   14ba4:	0001cb10 	.word	0x0001cb10
   14ba8:	0001cb24 	.word	0x0001cb24
   14bac:	0001cb3c 	.word	0x0001cb3c
   14bb0:	0001cb6c 	.word	0x0001cb6c
   14bb4:	0001cb98 	.word	0x0001cb98
   14bb8:	0001cbcc 	.word	0x0001cbcc
   14bbc:	0001cbf8 	.word	0x0001cbf8
   14bc0:	0001cc1c 	.word	0x0001cc1c
   14bc4:	0001cc3c 	.word	0x0001cc3c
   14bc8:	0001cc80 	.word	0x0001cc80
   14bcc:	0001cca8 	.word	0x0001cca8
   14bd0:	0001cce4 	.word	0x0001cce4
   14bd4:	0001cd04 	.word	0x0001cd04
   14bd8:	0001cc90 	.word	0x0001cc90
   14bdc:	0001ccb4 	.word	0x0001ccb4
   14be0:	0001cf84 	.word	0x0001cf84
   14be4:	00019321 	.word	0x00019321
   14be8:	0001ccc8 	.word	0x0001ccc8
   14bec:	000194c1 	.word	0x000194c1
   14bf0:	000195c7 	.word	0x000195c7
   14bf4:	0001ccdc 	.word	0x0001ccdc
   14bf8:	20000950 	.word	0x20000950
   14bfc:	00013f59 	.word	0x00013f59
   14c00:	0001ccec 	.word	0x0001ccec

00014c04 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   14c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c06:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   14c08:	2041      	movs	r0, #65	; 0x41
   14c0a:	5c23      	ldrb	r3, [r4, r0]
   14c0c:	2501      	movs	r5, #1
   14c0e:	432b      	orrs	r3, r5
   14c10:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   14c12:	b292      	uxth	r2, r2
   14c14:	2000      	movs	r0, #0
   14c16:	5620      	ldrsb	r0, [r4, r0]
   14c18:	2300      	movs	r3, #0
   14c1a:	4d12      	ldr	r5, [pc, #72]	; (14c64 <_http_client_send_wait+0x60>)
   14c1c:	47a8      	blx	r5
   14c1e:	2800      	cmp	r0, #0
   14c20:	db16      	blt.n	14c50 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   14c22:	2341      	movs	r3, #65	; 0x41
   14c24:	5ce3      	ldrb	r3, [r4, r3]
   14c26:	07db      	lsls	r3, r3, #31
   14c28:	d518      	bpl.n	14c5c <_http_client_send_wait+0x58>
   14c2a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   14c2c:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   14c2e:	2b02      	cmp	r3, #2
   14c30:	d917      	bls.n	14c62 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   14c32:	4f0d      	ldr	r7, [pc, #52]	; (14c68 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   14c34:	4e0d      	ldr	r6, [pc, #52]	; (14c6c <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   14c36:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   14c38:	2000      	movs	r0, #0
   14c3a:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   14c3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   14c3e:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   14c40:	5d63      	ldrb	r3, [r4, r5]
   14c42:	07db      	lsls	r3, r3, #31
   14c44:	d50c      	bpl.n	14c60 <_http_client_send_wait+0x5c>
   14c46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14c48:	2b02      	cmp	r3, #2
   14c4a:	d8f5      	bhi.n	14c38 <_http_client_send_wait+0x34>
	return 0;
   14c4c:	2000      	movs	r0, #0
   14c4e:	e008      	b.n	14c62 <_http_client_send_wait+0x5e>
		module->sending = 0;
   14c50:	2241      	movs	r2, #65	; 0x41
   14c52:	5ca3      	ldrb	r3, [r4, r2]
   14c54:	2101      	movs	r1, #1
   14c56:	438b      	bics	r3, r1
   14c58:	54a3      	strb	r3, [r4, r2]
		return result;
   14c5a:	e002      	b.n	14c62 <_http_client_send_wait+0x5e>
	return 0;
   14c5c:	2000      	movs	r0, #0
   14c5e:	e000      	b.n	14c62 <_http_client_send_wait+0x5e>
   14c60:	2000      	movs	r0, #0
}
   14c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c64:	0000e691 	.word	0x0000e691
   14c68:	0000c8f5 	.word	0x0000c8f5
   14c6c:	00015da1 	.word	0x00015da1

00014c70 <http_client_get_config_defaults>:
	config->port = 443;
   14c70:	23bc      	movs	r3, #188	; 0xbc
   14c72:	33ff      	adds	r3, #255	; 0xff
   14c74:	8003      	strh	r3, [r0, #0]
	config->tls = 1;
   14c76:	3bbb      	subs	r3, #187	; 0xbb
   14c78:	3bff      	subs	r3, #255	; 0xff
   14c7a:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   14c7c:	4b06      	ldr	r3, [pc, #24]	; (14c98 <http_client_get_config_defaults+0x28>)
   14c7e:	8103      	strh	r3, [r0, #8]
	config->timer_inst = NULL;
   14c80:	2300      	movs	r3, #0
   14c82:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   14c84:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   14c86:	3301      	adds	r3, #1
   14c88:	33ff      	adds	r3, #255	; 0xff
   14c8a:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   14c8c:	3bae      	subs	r3, #174	; 0xae
   14c8e:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   14c90:	4b02      	ldr	r3, [pc, #8]	; (14c9c <http_client_get_config_defaults+0x2c>)
   14c92:	6183      	str	r3, [r0, #24]
}
   14c94:	4770      	bx	lr
   14c96:	46c0      	nop			; (mov r8, r8)
   14c98:	00004e20 	.word	0x00004e20
   14c9c:	0001cee0 	.word	0x0001cee0

00014ca0 <http_client_init>:
{
   14ca0:	b570      	push	{r4, r5, r6, lr}
   14ca2:	0004      	movs	r4, r0
   14ca4:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   14ca6:	2800      	cmp	r0, #0
   14ca8:	d038      	beq.n	14d1c <http_client_init+0x7c>
   14caa:	2900      	cmp	r1, #0
   14cac:	d039      	beq.n	14d22 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   14cae:	690b      	ldr	r3, [r1, #16]
   14cb0:	2b00      	cmp	r3, #0
   14cb2:	d039      	beq.n	14d28 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   14cb4:	684b      	ldr	r3, [r1, #4]
   14cb6:	2b00      	cmp	r3, #0
   14cb8:	d039      	beq.n	14d2e <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   14cba:	694b      	ldr	r3, [r1, #20]
   14cbc:	2b51      	cmp	r3, #81	; 0x51
   14cbe:	d939      	bls.n	14d34 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   14cc0:	22e8      	movs	r2, #232	; 0xe8
   14cc2:	2100      	movs	r1, #0
   14cc4:	4b1e      	ldr	r3, [pc, #120]	; (14d40 <http_client_init+0xa0>)
   14cc6:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   14cc8:	0020      	movs	r0, r4
   14cca:	3050      	adds	r0, #80	; 0x50
   14ccc:	221c      	movs	r2, #28
   14cce:	0029      	movs	r1, r5
   14cd0:	4b1c      	ldr	r3, [pc, #112]	; (14d44 <http_client_init+0xa4>)
   14cd2:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   14cd4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   14cd6:	2b00      	cmp	r3, #0
   14cd8:	d008      	beq.n	14cec <http_client_init+0x4c>
	if (config->timeout > 0) {
   14cda:	892b      	ldrh	r3, [r5, #8]
   14cdc:	2b00      	cmp	r3, #0
   14cde:	d111      	bne.n	14d04 <http_client_init+0x64>
	module->req.state = STATE_INIT;
   14ce0:	2300      	movs	r3, #0
   14ce2:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   14ce4:	22d8      	movs	r2, #216	; 0xd8
   14ce6:	50a3      	str	r3, [r4, r2]
	return 0;
   14ce8:	2000      	movs	r0, #0
}
   14cea:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   14cec:	6928      	ldr	r0, [r5, #16]
   14cee:	4b16      	ldr	r3, [pc, #88]	; (14d48 <http_client_init+0xa8>)
   14cf0:	4798      	blx	r3
   14cf2:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   14cf4:	2800      	cmp	r0, #0
   14cf6:	d020      	beq.n	14d3a <http_client_init+0x9a>
		module->alloc_buffer = 1;
   14cf8:	2241      	movs	r2, #65	; 0x41
   14cfa:	5ca3      	ldrb	r3, [r4, r2]
   14cfc:	2104      	movs	r1, #4
   14cfe:	430b      	orrs	r3, r1
   14d00:	54a3      	strb	r3, [r4, r2]
   14d02:	e7ea      	b.n	14cda <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   14d04:	6868      	ldr	r0, [r5, #4]
   14d06:	2300      	movs	r3, #0
   14d08:	0022      	movs	r2, r4
   14d0a:	4910      	ldr	r1, [pc, #64]	; (14d4c <http_client_init+0xac>)
   14d0c:	4d10      	ldr	r5, [pc, #64]	; (14d50 <http_client_init+0xb0>)
   14d0e:	47a8      	blx	r5
   14d10:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   14d12:	2800      	cmp	r0, #0
   14d14:	dae4      	bge.n	14ce0 <http_client_init+0x40>
			return -ENOSPC;
   14d16:	201c      	movs	r0, #28
   14d18:	4240      	negs	r0, r0
   14d1a:	e7e6      	b.n	14cea <http_client_init+0x4a>
		return -EINVAL;
   14d1c:	2016      	movs	r0, #22
   14d1e:	4240      	negs	r0, r0
   14d20:	e7e3      	b.n	14cea <http_client_init+0x4a>
   14d22:	2016      	movs	r0, #22
   14d24:	4240      	negs	r0, r0
   14d26:	e7e0      	b.n	14cea <http_client_init+0x4a>
		return -EINVAL;
   14d28:	2016      	movs	r0, #22
   14d2a:	4240      	negs	r0, r0
   14d2c:	e7dd      	b.n	14cea <http_client_init+0x4a>
		return -EINVAL;
   14d2e:	2016      	movs	r0, #22
   14d30:	4240      	negs	r0, r0
   14d32:	e7da      	b.n	14cea <http_client_init+0x4a>
		return -EINVAL;
   14d34:	2016      	movs	r0, #22
   14d36:	4240      	negs	r0, r0
   14d38:	e7d7      	b.n	14cea <http_client_init+0x4a>
			return -ENOMEM;
   14d3a:	200c      	movs	r0, #12
   14d3c:	4240      	negs	r0, r0
   14d3e:	e7d4      	b.n	14cea <http_client_init+0x4a>
   14d40:	0001900b 	.word	0x0001900b
   14d44:	00018fd5 	.word	0x00018fd5
   14d48:	00018fad 	.word	0x00018fad
   14d4c:	00014e65 	.word	0x00014e65
   14d50:	00015d2d 	.word	0x00015d2d

00014d54 <http_client_register_callback>:
	if (module == NULL) {
   14d54:	2800      	cmp	r0, #0
   14d56:	d002      	beq.n	14d5e <http_client_register_callback+0xa>
	module->cb = callback;
   14d58:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   14d5a:	2000      	movs	r0, #0
}
   14d5c:	4770      	bx	lr
		return -EINVAL;
   14d5e:	2016      	movs	r0, #22
   14d60:	4240      	negs	r0, r0
   14d62:	e7fb      	b.n	14d5c <http_client_register_callback+0x8>

00014d64 <_http_client_clear_conn>:
{
   14d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d66:	b085      	sub	sp, #20
   14d68:	0004      	movs	r4, r0
   14d6a:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   14d6c:	23c0      	movs	r3, #192	; 0xc0
   14d6e:	58c3      	ldr	r3, [r0, r3]
   14d70:	2b00      	cmp	r3, #0
   14d72:	d002      	beq.n	14d7a <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   14d74:	22c4      	movs	r2, #196	; 0xc4
   14d76:	5880      	ldr	r0, [r0, r2]
   14d78:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   14d7a:	0020      	movs	r0, r4
   14d7c:	30b0      	adds	r0, #176	; 0xb0
   14d7e:	2218      	movs	r2, #24
   14d80:	2100      	movs	r1, #0
   14d82:	4b17      	ldr	r3, [pc, #92]	; (14de0 <_http_client_clear_conn+0x7c>)
   14d84:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   14d86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14d88:	2b00      	cmp	r3, #0
   14d8a:	d124      	bne.n	14dd6 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   14d8c:	2300      	movs	r3, #0
   14d8e:	56e3      	ldrsb	r3, [r4, r3]
   14d90:	009b      	lsls	r3, r3, #2
   14d92:	2500      	movs	r5, #0
   14d94:	4a13      	ldr	r2, [pc, #76]	; (14de4 <_http_client_clear_conn+0x80>)
   14d96:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   14d98:	0020      	movs	r0, r4
   14d9a:	306c      	adds	r0, #108	; 0x6c
   14d9c:	226c      	movs	r2, #108	; 0x6c
   14d9e:	2100      	movs	r1, #0
   14da0:	4f0f      	ldr	r7, [pc, #60]	; (14de0 <_http_client_clear_conn+0x7c>)
   14da2:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   14da4:	0020      	movs	r0, r4
   14da6:	30d8      	adds	r0, #216	; 0xd8
   14da8:	2210      	movs	r2, #16
   14daa:	2100      	movs	r1, #0
   14dac:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   14dae:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   14db0:	23d8      	movs	r3, #216	; 0xd8
   14db2:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   14db4:	2241      	movs	r2, #65	; 0x41
   14db6:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   14db8:	2101      	movs	r1, #1
   14dba:	438b      	bics	r3, r1
   14dbc:	3101      	adds	r1, #1
   14dbe:	438b      	bics	r3, r1
   14dc0:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   14dc2:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   14dc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14dc6:	2b00      	cmp	r3, #0
   14dc8:	d003      	beq.n	14dd2 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   14dca:	aa01      	add	r2, sp, #4
   14dcc:	3102      	adds	r1, #2
   14dce:	0020      	movs	r0, r4
   14dd0:	4798      	blx	r3
}
   14dd2:	b005      	add	sp, #20
   14dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   14dd6:	2000      	movs	r0, #0
   14dd8:	5620      	ldrsb	r0, [r4, r0]
   14dda:	4b03      	ldr	r3, [pc, #12]	; (14de8 <_http_client_clear_conn+0x84>)
   14ddc:	4798      	blx	r3
   14dde:	e7d5      	b.n	14d8c <_http_client_clear_conn+0x28>
   14de0:	0001900b 	.word	0x0001900b
   14de4:	20000988 	.word	0x20000988
   14de8:	0000e7bd 	.word	0x0000e7bd

00014dec <http_client_socket_resolve_handler>:
{
   14dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   14dee:	b087      	sub	sp, #28
   14df0:	9000      	str	r0, [sp, #0]
   14df2:	9101      	str	r1, [sp, #4]
   14df4:	4c17      	ldr	r4, [pc, #92]	; (14e54 <http_client_socket_resolve_handler+0x68>)
   14df6:	0026      	movs	r6, r4
   14df8:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   14dfa:	4f17      	ldr	r7, [pc, #92]	; (14e58 <http_client_socket_resolve_handler+0x6c>)
   14dfc:	e015      	b.n	14e2a <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   14dfe:	2302      	movs	r3, #2
   14e00:	aa02      	add	r2, sp, #8
   14e02:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   14e04:	334e      	adds	r3, #78	; 0x4e
   14e06:	5aeb      	ldrh	r3, [r5, r3]
   14e08:	021a      	lsls	r2, r3, #8
   14e0a:	0a1b      	lsrs	r3, r3, #8
   14e0c:	4313      	orrs	r3, r2
   14e0e:	aa02      	add	r2, sp, #8
   14e10:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   14e12:	9b01      	ldr	r3, [sp, #4]
   14e14:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   14e16:	2000      	movs	r0, #0
   14e18:	5628      	ldrsb	r0, [r5, r0]
   14e1a:	2210      	movs	r2, #16
   14e1c:	a902      	add	r1, sp, #8
   14e1e:	4b0f      	ldr	r3, [pc, #60]	; (14e5c <http_client_socket_resolve_handler+0x70>)
   14e20:	4798      	blx	r3
				return;
   14e22:	e015      	b.n	14e50 <http_client_socket_resolve_handler+0x64>
   14e24:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   14e26:	42b4      	cmp	r4, r6
   14e28:	d012      	beq.n	14e50 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   14e2a:	6825      	ldr	r5, [r4, #0]
   14e2c:	2d00      	cmp	r5, #0
   14e2e:	d0f9      	beq.n	14e24 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   14e30:	1c69      	adds	r1, r5, #1
   14e32:	9800      	ldr	r0, [sp, #0]
   14e34:	47b8      	blx	r7
   14e36:	2800      	cmp	r0, #0
   14e38:	d1f4      	bne.n	14e24 <http_client_socket_resolve_handler+0x38>
   14e3a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   14e3c:	2b01      	cmp	r3, #1
   14e3e:	d1f1      	bne.n	14e24 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   14e40:	9b01      	ldr	r3, [sp, #4]
   14e42:	2b00      	cmp	r3, #0
   14e44:	d1db      	bne.n	14dfe <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   14e46:	2176      	movs	r1, #118	; 0x76
   14e48:	4249      	negs	r1, r1
   14e4a:	0028      	movs	r0, r5
   14e4c:	4b04      	ldr	r3, [pc, #16]	; (14e60 <http_client_socket_resolve_handler+0x74>)
   14e4e:	4798      	blx	r3
}
   14e50:	b007      	add	sp, #28
   14e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e54:	20000988 	.word	0x20000988
   14e58:	00019569 	.word	0x00019569
   14e5c:	0000e601 	.word	0x0000e601
   14e60:	00014d65 	.word	0x00014d65

00014e64 <http_client_timer_callback>:
{
   14e64:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   14e66:	2a00      	cmp	r2, #0
   14e68:	d004      	beq.n	14e74 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   14e6a:	213e      	movs	r1, #62	; 0x3e
   14e6c:	4249      	negs	r1, r1
   14e6e:	0010      	movs	r0, r2
   14e70:	4b01      	ldr	r3, [pc, #4]	; (14e78 <http_client_timer_callback+0x14>)
   14e72:	4798      	blx	r3
}
   14e74:	bd10      	pop	{r4, pc}
   14e76:	46c0      	nop			; (mov r8, r8)
   14e78:	00014d65 	.word	0x00014d65

00014e7c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   14e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e7e:	46de      	mov	lr, fp
   14e80:	4657      	mov	r7, sl
   14e82:	b580      	push	{r7, lr}
   14e84:	b095      	sub	sp, #84	; 0x54
   14e86:	af02      	add	r7, sp, #8
   14e88:	0004      	movs	r4, r0
   14e8a:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   14e8c:	2310      	movs	r3, #16
   14e8e:	2208      	movs	r2, #8
   14e90:	18ba      	adds	r2, r7, r2
   14e92:	18d2      	adds	r2, r2, r3
   14e94:	4bb1      	ldr	r3, [pc, #708]	; (1515c <_http_client_request+0x2e0>)
   14e96:	cb23      	ldmia	r3!, {r0, r1, r5}
   14e98:	c223      	stmia	r2!, {r0, r1, r5}
   14e9a:	681b      	ldr	r3, [r3, #0]
   14e9c:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   14e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14ea0:	1dd3      	adds	r3, r2, #7
   14ea2:	08db      	lsrs	r3, r3, #3
   14ea4:	00db      	lsls	r3, r3, #3
   14ea6:	4669      	mov	r1, sp
   14ea8:	1acb      	subs	r3, r1, r3
   14eaa:	469d      	mov	sp, r3
   14eac:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   14eae:	2c00      	cmp	r4, #0
   14eb0:	d100      	bne.n	14eb4 <_http_client_request+0x38>
   14eb2:	e1f0      	b.n	15296 <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   14eb4:	2341      	movs	r3, #65	; 0x41
   14eb6:	5ce3      	ldrb	r3, [r4, r3]
   14eb8:	07db      	lsls	r3, r3, #31
   14eba:	d500      	bpl.n	14ebe <_http_client_request+0x42>
   14ebc:	e1eb      	b.n	15296 <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   14ebe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14ec0:	2b03      	cmp	r3, #3
   14ec2:	d004      	beq.n	14ece <_http_client_request+0x52>
   14ec4:	2b04      	cmp	r3, #4
   14ec6:	d100      	bne.n	14eca <_http_client_request+0x4e>
   14ec8:	e120      	b.n	1510c <_http_client_request+0x290>
   14eca:	46dd      	mov	sp, fp
   14ecc:	e1e4      	b.n	15298 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   14ece:	2300      	movs	r3, #0
   14ed0:	21cc      	movs	r1, #204	; 0xcc
   14ed2:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   14ed4:	3104      	adds	r1, #4
   14ed6:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   14ed8:	9400      	str	r4, [sp, #0]
   14eda:	4ba1      	ldr	r3, [pc, #644]	; (15160 <_http_client_request+0x2e4>)
   14edc:	0031      	movs	r1, r6
   14ede:	202c      	movs	r0, #44	; 0x2c
   14ee0:	2508      	movs	r5, #8
   14ee2:	46ac      	mov	ip, r5
   14ee4:	44bc      	add	ip, r7
   14ee6:	4460      	add	r0, ip
   14ee8:	4d9e      	ldr	r5, [pc, #632]	; (15164 <_http_client_request+0x2e8>)
   14eea:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   14eec:	23c8      	movs	r3, #200	; 0xc8
   14eee:	5ce3      	ldrb	r3, [r4, r3]
   14ef0:	2b01      	cmp	r3, #1
   14ef2:	d100      	bne.n	14ef6 <_http_client_request+0x7a>
   14ef4:	e0a9      	b.n	1504a <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   14ef6:	2b02      	cmp	r3, #2
   14ef8:	d100      	bne.n	14efc <_http_client_request+0x80>
   14efa:	e0af      	b.n	1505c <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   14efc:	2b03      	cmp	r3, #3
   14efe:	d100      	bne.n	14f02 <_http_client_request+0x86>
   14f00:	e0b5      	b.n	1506e <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   14f02:	2b04      	cmp	r3, #4
   14f04:	d100      	bne.n	14f08 <_http_client_request+0x8c>
   14f06:	e0bb      	b.n	15080 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   14f08:	2b05      	cmp	r3, #5
   14f0a:	d100      	bne.n	14f0e <_http_client_request+0x92>
   14f0c:	e0c1      	b.n	15092 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   14f0e:	2b06      	cmp	r3, #6
   14f10:	d100      	bne.n	14f14 <_http_client_request+0x98>
   14f12:	e0c7      	b.n	150a4 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   14f14:	0025      	movs	r5, r4
   14f16:	3570      	adds	r5, #112	; 0x70
   14f18:	0028      	movs	r0, r5
   14f1a:	4b93      	ldr	r3, [pc, #588]	; (15168 <_http_client_request+0x2ec>)
   14f1c:	469a      	mov	sl, r3
   14f1e:	4798      	blx	r3
   14f20:	0002      	movs	r2, r0
   14f22:	0029      	movs	r1, r5
   14f24:	232c      	movs	r3, #44	; 0x2c
   14f26:	2008      	movs	r0, #8
   14f28:	1838      	adds	r0, r7, r0
   14f2a:	18c0      	adds	r0, r0, r3
   14f2c:	4d8f      	ldr	r5, [pc, #572]	; (1516c <_http_client_request+0x2f0>)
   14f2e:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   14f30:	220b      	movs	r2, #11
   14f32:	498f      	ldr	r1, [pc, #572]	; (15170 <_http_client_request+0x2f4>)
   14f34:	232c      	movs	r3, #44	; 0x2c
   14f36:	2008      	movs	r0, #8
   14f38:	1838      	adds	r0, r7, r0
   14f3a:	18c0      	adds	r0, r0, r3
   14f3c:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   14f3e:	220c      	movs	r2, #12
   14f40:	498c      	ldr	r1, [pc, #560]	; (15174 <_http_client_request+0x2f8>)
   14f42:	232c      	movs	r3, #44	; 0x2c
   14f44:	2008      	movs	r0, #8
   14f46:	1838      	adds	r0, r7, r0
   14f48:	18c0      	adds	r0, r0, r3
   14f4a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   14f4c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   14f4e:	607b      	str	r3, [r7, #4]
   14f50:	0018      	movs	r0, r3
   14f52:	47d0      	blx	sl
   14f54:	0002      	movs	r2, r0
   14f56:	6879      	ldr	r1, [r7, #4]
   14f58:	232c      	movs	r3, #44	; 0x2c
   14f5a:	2008      	movs	r0, #8
   14f5c:	1838      	adds	r0, r7, r0
   14f5e:	18c0      	adds	r0, r0, r3
   14f60:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   14f62:	2202      	movs	r2, #2
   14f64:	4984      	ldr	r1, [pc, #528]	; (15178 <_http_client_request+0x2fc>)
   14f66:	232c      	movs	r3, #44	; 0x2c
   14f68:	2008      	movs	r0, #8
   14f6a:	1838      	adds	r0, r7, r0
   14f6c:	18c0      	adds	r0, r0, r3
   14f6e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   14f70:	2206      	movs	r2, #6
   14f72:	4982      	ldr	r1, [pc, #520]	; (1517c <_http_client_request+0x300>)
   14f74:	232c      	movs	r3, #44	; 0x2c
   14f76:	2008      	movs	r0, #8
   14f78:	1838      	adds	r0, r7, r0
   14f7a:	18c0      	adds	r0, r0, r3
   14f7c:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   14f7e:	1c63      	adds	r3, r4, #1
   14f80:	607b      	str	r3, [r7, #4]
   14f82:	0018      	movs	r0, r3
   14f84:	47d0      	blx	sl
   14f86:	0002      	movs	r2, r0
   14f88:	6879      	ldr	r1, [r7, #4]
   14f8a:	232c      	movs	r3, #44	; 0x2c
   14f8c:	2008      	movs	r0, #8
   14f8e:	1838      	adds	r0, r7, r0
   14f90:	18c0      	adds	r0, r0, r3
   14f92:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   14f94:	2202      	movs	r2, #2
   14f96:	4978      	ldr	r1, [pc, #480]	; (15178 <_http_client_request+0x2fc>)
   14f98:	232c      	movs	r3, #44	; 0x2c
   14f9a:	2008      	movs	r0, #8
   14f9c:	1838      	adds	r0, r7, r0
   14f9e:	18c0      	adds	r0, r0, r3
   14fa0:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   14fa2:	2218      	movs	r2, #24
   14fa4:	4976      	ldr	r1, [pc, #472]	; (15180 <_http_client_request+0x304>)
   14fa6:	232c      	movs	r3, #44	; 0x2c
   14fa8:	2008      	movs	r0, #8
   14faa:	1838      	adds	r0, r7, r0
   14fac:	18c0      	adds	r0, r0, r3
   14fae:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   14fb0:	2213      	movs	r2, #19
   14fb2:	4974      	ldr	r1, [pc, #464]	; (15184 <_http_client_request+0x308>)
   14fb4:	232c      	movs	r3, #44	; 0x2c
   14fb6:	2008      	movs	r0, #8
   14fb8:	1838      	adds	r0, r7, r0
   14fba:	18c0      	adds	r0, r0, r3
   14fbc:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   14fbe:	2217      	movs	r2, #23
   14fc0:	4971      	ldr	r1, [pc, #452]	; (15188 <_http_client_request+0x30c>)
   14fc2:	232c      	movs	r3, #44	; 0x2c
   14fc4:	2008      	movs	r0, #8
   14fc6:	1838      	adds	r0, r7, r0
   14fc8:	18c0      	adds	r0, r0, r3
   14fca:	47a8      	blx	r5

		if (entity->read != NULL) {
   14fcc:	0023      	movs	r3, r4
   14fce:	33b0      	adds	r3, #176	; 0xb0
   14fd0:	68db      	ldr	r3, [r3, #12]
   14fd2:	2b00      	cmp	r3, #0
   14fd4:	d07b      	beq.n	150ce <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   14fd6:	23b0      	movs	r3, #176	; 0xb0
   14fd8:	5ce3      	ldrb	r3, [r4, r3]
   14fda:	2b00      	cmp	r3, #0
   14fdc:	d16b      	bne.n	150b6 <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   14fde:	0023      	movs	r3, r4
   14fe0:	33b0      	adds	r3, #176	; 0xb0
   14fe2:	689b      	ldr	r3, [r3, #8]
   14fe4:	2b00      	cmp	r3, #0
   14fe6:	d072      	beq.n	150ce <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   14fe8:	0022      	movs	r2, r4
   14fea:	32b0      	adds	r2, #176	; 0xb0
   14fec:	6950      	ldr	r0, [r2, #20]
   14fee:	4798      	blx	r3
   14ff0:	23cc      	movs	r3, #204	; 0xcc
   14ff2:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   14ff4:	2800      	cmp	r0, #0
   14ff6:	da00      	bge.n	14ffa <_http_client_request+0x17e>
   14ff8:	e0ac      	b.n	15154 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   14ffa:	0002      	movs	r2, r0
   14ffc:	4963      	ldr	r1, [pc, #396]	; (1518c <_http_client_request+0x310>)
   14ffe:	2320      	movs	r3, #32
   15000:	2008      	movs	r0, #8
   15002:	1838      	adds	r0, r7, r0
   15004:	18c0      	adds	r0, r0, r3
   15006:	4b62      	ldr	r3, [pc, #392]	; (15190 <_http_client_request+0x314>)
   15008:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   1500a:	2210      	movs	r2, #16
   1500c:	4961      	ldr	r1, [pc, #388]	; (15194 <_http_client_request+0x318>)
   1500e:	232c      	movs	r3, #44	; 0x2c
   15010:	2008      	movs	r0, #8
   15012:	1838      	adds	r0, r7, r0
   15014:	18c0      	adds	r0, r0, r3
   15016:	4d55      	ldr	r5, [pc, #340]	; (1516c <_http_client_request+0x2f0>)
   15018:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   1501a:	2320      	movs	r3, #32
   1501c:	2208      	movs	r2, #8
   1501e:	18ba      	adds	r2, r7, r2
   15020:	18d0      	adds	r0, r2, r3
   15022:	4b51      	ldr	r3, [pc, #324]	; (15168 <_http_client_request+0x2ec>)
   15024:	4798      	blx	r3
   15026:	0002      	movs	r2, r0
   15028:	2320      	movs	r3, #32
   1502a:	2108      	movs	r1, #8
   1502c:	1879      	adds	r1, r7, r1
   1502e:	18c9      	adds	r1, r1, r3
   15030:	330c      	adds	r3, #12
   15032:	2008      	movs	r0, #8
   15034:	1838      	adds	r0, r7, r0
   15036:	18c0      	adds	r0, r0, r3
   15038:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   1503a:	2202      	movs	r2, #2
   1503c:	494e      	ldr	r1, [pc, #312]	; (15178 <_http_client_request+0x2fc>)
   1503e:	232c      	movs	r3, #44	; 0x2c
   15040:	2008      	movs	r0, #8
   15042:	1838      	adds	r0, r7, r0
   15044:	18c0      	adds	r0, r0, r3
   15046:	47a8      	blx	r5
   15048:	e041      	b.n	150ce <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   1504a:	2204      	movs	r2, #4
   1504c:	4952      	ldr	r1, [pc, #328]	; (15198 <_http_client_request+0x31c>)
   1504e:	332b      	adds	r3, #43	; 0x2b
   15050:	2008      	movs	r0, #8
   15052:	1838      	adds	r0, r7, r0
   15054:	18c0      	adds	r0, r0, r3
   15056:	4b45      	ldr	r3, [pc, #276]	; (1516c <_http_client_request+0x2f0>)
   15058:	4798      	blx	r3
   1505a:	e75b      	b.n	14f14 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   1505c:	2205      	movs	r2, #5
   1505e:	494f      	ldr	r1, [pc, #316]	; (1519c <_http_client_request+0x320>)
   15060:	332a      	adds	r3, #42	; 0x2a
   15062:	2008      	movs	r0, #8
   15064:	1838      	adds	r0, r7, r0
   15066:	18c0      	adds	r0, r0, r3
   15068:	4b40      	ldr	r3, [pc, #256]	; (1516c <_http_client_request+0x2f0>)
   1506a:	4798      	blx	r3
   1506c:	e752      	b.n	14f14 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   1506e:	2207      	movs	r2, #7
   15070:	494b      	ldr	r1, [pc, #300]	; (151a0 <_http_client_request+0x324>)
   15072:	3329      	adds	r3, #41	; 0x29
   15074:	2008      	movs	r0, #8
   15076:	1838      	adds	r0, r7, r0
   15078:	18c0      	adds	r0, r0, r3
   1507a:	4b3c      	ldr	r3, [pc, #240]	; (1516c <_http_client_request+0x2f0>)
   1507c:	4798      	blx	r3
   1507e:	e749      	b.n	14f14 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   15080:	2204      	movs	r2, #4
   15082:	4948      	ldr	r1, [pc, #288]	; (151a4 <_http_client_request+0x328>)
   15084:	3328      	adds	r3, #40	; 0x28
   15086:	2008      	movs	r0, #8
   15088:	1838      	adds	r0, r7, r0
   1508a:	18c0      	adds	r0, r0, r3
   1508c:	4b37      	ldr	r3, [pc, #220]	; (1516c <_http_client_request+0x2f0>)
   1508e:	4798      	blx	r3
   15090:	e740      	b.n	14f14 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   15092:	2208      	movs	r2, #8
   15094:	4944      	ldr	r1, [pc, #272]	; (151a8 <_http_client_request+0x32c>)
   15096:	3327      	adds	r3, #39	; 0x27
   15098:	2008      	movs	r0, #8
   1509a:	1838      	adds	r0, r7, r0
   1509c:	18c0      	adds	r0, r0, r3
   1509e:	4b33      	ldr	r3, [pc, #204]	; (1516c <_http_client_request+0x2f0>)
   150a0:	4798      	blx	r3
   150a2:	e737      	b.n	14f14 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   150a4:	2205      	movs	r2, #5
   150a6:	4941      	ldr	r1, [pc, #260]	; (151ac <_http_client_request+0x330>)
   150a8:	3326      	adds	r3, #38	; 0x26
   150aa:	2008      	movs	r0, #8
   150ac:	1838      	adds	r0, r7, r0
   150ae:	18c0      	adds	r0, r0, r3
   150b0:	4b2e      	ldr	r3, [pc, #184]	; (1516c <_http_client_request+0x2f0>)
   150b2:	4798      	blx	r3
   150b4:	e72e      	b.n	14f14 <_http_client_request+0x98>
				module->req.content_length = -1;
   150b6:	2201      	movs	r2, #1
   150b8:	4252      	negs	r2, r2
   150ba:	23cc      	movs	r3, #204	; 0xcc
   150bc:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   150be:	321d      	adds	r2, #29
   150c0:	493b      	ldr	r1, [pc, #236]	; (151b0 <_http_client_request+0x334>)
   150c2:	3ba0      	subs	r3, #160	; 0xa0
   150c4:	2008      	movs	r0, #8
   150c6:	1838      	adds	r0, r7, r0
   150c8:	18c0      	adds	r0, r0, r3
   150ca:	4b28      	ldr	r3, [pc, #160]	; (1516c <_http_client_request+0x2f0>)
   150cc:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   150ce:	23d4      	movs	r3, #212	; 0xd4
   150d0:	58e5      	ldr	r5, [r4, r3]
   150d2:	2d00      	cmp	r5, #0
   150d4:	d00a      	beq.n	150ec <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   150d6:	0028      	movs	r0, r5
   150d8:	4b23      	ldr	r3, [pc, #140]	; (15168 <_http_client_request+0x2ec>)
   150da:	4798      	blx	r3
   150dc:	0002      	movs	r2, r0
   150de:	0029      	movs	r1, r5
   150e0:	232c      	movs	r3, #44	; 0x2c
   150e2:	2008      	movs	r0, #8
   150e4:	1838      	adds	r0, r7, r0
   150e6:	18c0      	adds	r0, r0, r3
   150e8:	4b20      	ldr	r3, [pc, #128]	; (1516c <_http_client_request+0x2f0>)
   150ea:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   150ec:	2202      	movs	r2, #2
   150ee:	4922      	ldr	r1, [pc, #136]	; (15178 <_http_client_request+0x2fc>)
   150f0:	232c      	movs	r3, #44	; 0x2c
   150f2:	2008      	movs	r0, #8
   150f4:	1838      	adds	r0, r7, r0
   150f6:	18c0      	adds	r0, r0, r3
   150f8:	4b1c      	ldr	r3, [pc, #112]	; (1516c <_http_client_request+0x2f0>)
   150fa:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   150fc:	232c      	movs	r3, #44	; 0x2c
   150fe:	2208      	movs	r2, #8
   15100:	18ba      	adds	r2, r7, r2
   15102:	18d0      	adds	r0, r2, r3
   15104:	4b2b      	ldr	r3, [pc, #172]	; (151b4 <_http_client_request+0x338>)
   15106:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   15108:	2304      	movs	r3, #4
   1510a:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   1510c:	23cc      	movs	r3, #204	; 0xcc
   1510e:	58e2      	ldr	r2, [r4, r3]
   15110:	2a00      	cmp	r2, #0
   15112:	db51      	blt.n	151b8 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   15114:	dc00      	bgt.n	15118 <_http_client_request+0x29c>
   15116:	e0f0      	b.n	152fa <_http_client_request+0x47e>
   15118:	0023      	movs	r3, r4
   1511a:	33b0      	adds	r3, #176	; 0xb0
   1511c:	68dd      	ldr	r5, [r3, #12]
   1511e:	2d00      	cmp	r5, #0
   15120:	d100      	bne.n	15124 <_http_client_request+0x2a8>
   15122:	e0ea      	b.n	152fa <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   15124:	23d0      	movs	r3, #208	; 0xd0
   15126:	58e3      	ldr	r3, [r4, r3]
   15128:	429a      	cmp	r2, r3
   1512a:	dd00      	ble.n	1512e <_http_client_request+0x2b2>
   1512c:	e0ba      	b.n	152a4 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   1512e:	23c0      	movs	r3, #192	; 0xc0
   15130:	58e3      	ldr	r3, [r4, r3]
   15132:	2b00      	cmp	r3, #0
   15134:	d002      	beq.n	1513c <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   15136:	22c4      	movs	r2, #196	; 0xc4
   15138:	58a0      	ldr	r0, [r4, r2]
   1513a:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   1513c:	2302      	movs	r3, #2
   1513e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   15140:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15142:	2b00      	cmp	r3, #0
   15144:	d100      	bne.n	15148 <_http_client_request+0x2cc>
   15146:	e6c0      	b.n	14eca <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15148:	220c      	movs	r2, #12
   1514a:	18ba      	adds	r2, r7, r2
   1514c:	2101      	movs	r1, #1
   1514e:	0020      	movs	r0, r4
   15150:	4798      	blx	r3
   15152:	e6ba      	b.n	14eca <_http_client_request+0x4e>
					module->req.content_length = 0;
   15154:	2200      	movs	r2, #0
   15156:	50e2      	str	r2, [r4, r3]
   15158:	e7b9      	b.n	150ce <_http_client_request+0x252>
   1515a:	46c0      	nop			; (mov r8, r8)
   1515c:	0001cdc8 	.word	0x0001cdc8
   15160:	00014c05 	.word	0x00014c05
   15164:	00015bd9 	.word	0x00015bd9
   15168:	000195c7 	.word	0x000195c7
   1516c:	00015c2d 	.word	0x00015c2d
   15170:	0001ce3c 	.word	0x0001ce3c
   15174:	0001ce48 	.word	0x0001ce48
   15178:	0001cbc0 	.word	0x0001cbc0
   1517c:	0001ce58 	.word	0x0001ce58
   15180:	0001ce60 	.word	0x0001ce60
   15184:	0001ce7c 	.word	0x0001ce7c
   15188:	0001ce90 	.word	0x0001ce90
   1518c:	0001cec8 	.word	0x0001cec8
   15190:	00019525 	.word	0x00019525
   15194:	0001cecc 	.word	0x0001cecc
   15198:	0001ce08 	.word	0x0001ce08
   1519c:	0001ce10 	.word	0x0001ce10
   151a0:	0001ce18 	.word	0x0001ce18
   151a4:	0001ce20 	.word	0x0001ce20
   151a8:	0001ce28 	.word	0x0001ce28
   151ac:	0001ce34 	.word	0x0001ce34
   151b0:	0001cea8 	.word	0x0001cea8
   151b4:	00015be9 	.word	0x00015be9
		if (module->req.content_length < 0 && entity->read) {
   151b8:	0023      	movs	r3, r4
   151ba:	33b0      	adds	r3, #176	; 0xb0
   151bc:	68dd      	ldr	r5, [r3, #12]
   151be:	2d00      	cmp	r5, #0
   151c0:	d100      	bne.n	151c4 <_http_client_request+0x348>
   151c2:	e09a      	b.n	152fa <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   151c4:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   151c6:	58e3      	ldr	r3, [r4, r3]
   151c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   151ca:	3a07      	subs	r2, #7
   151cc:	1d71      	adds	r1, r6, #5
   151ce:	0020      	movs	r0, r4
   151d0:	30b0      	adds	r0, #176	; 0xb0
   151d2:	6940      	ldr	r0, [r0, #20]
   151d4:	47a8      	blx	r5
   151d6:	0005      	movs	r5, r0
   151d8:	43c3      	mvns	r3, r0
   151da:	17db      	asrs	r3, r3, #31
   151dc:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   151de:	220a      	movs	r2, #10
   151e0:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   151e2:	210d      	movs	r1, #13
   151e4:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   151e6:	1973      	adds	r3, r6, r5
   151e8:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   151ea:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   151ec:	230f      	movs	r3, #15
   151ee:	402b      	ands	r3, r5
   151f0:	3206      	adds	r2, #6
   151f2:	3905      	subs	r1, #5
   151f4:	468c      	mov	ip, r1
   151f6:	44bc      	add	ip, r7
   151f8:	4462      	add	r2, ip
   151fa:	5cd3      	ldrb	r3, [r2, r3]
   151fc:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   151fe:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   15200:	2d0f      	cmp	r5, #15
   15202:	dd0d      	ble.n	15220 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   15204:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   15206:	17eb      	asrs	r3, r5, #31
   15208:	220f      	movs	r2, #15
   1520a:	4013      	ands	r3, r2
   1520c:	195b      	adds	r3, r3, r5
   1520e:	111b      	asrs	r3, r3, #4
   15210:	4013      	ands	r3, r2
   15212:	3201      	adds	r2, #1
   15214:	2008      	movs	r0, #8
   15216:	4684      	mov	ip, r0
   15218:	44bc      	add	ip, r7
   1521a:	4462      	add	r2, ip
   1521c:	5cd3      	ldrb	r3, [r2, r3]
   1521e:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   15220:	2dff      	cmp	r5, #255	; 0xff
   15222:	dd0d      	ble.n	15240 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   15224:	17ea      	asrs	r2, r5, #31
   15226:	23ff      	movs	r3, #255	; 0xff
   15228:	4013      	ands	r3, r2
   1522a:	195b      	adds	r3, r3, r5
   1522c:	051b      	lsls	r3, r3, #20
   1522e:	0f1b      	lsrs	r3, r3, #28
   15230:	2210      	movs	r2, #16
   15232:	2108      	movs	r1, #8
   15234:	468c      	mov	ip, r1
   15236:	44bc      	add	ip, r7
   15238:	4462      	add	r2, ip
   1523a:	5cd3      	ldrb	r3, [r2, r3]
   1523c:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   1523e:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   15240:	1cca      	adds	r2, r1, #3
   15242:	1b92      	subs	r2, r2, r6
   15244:	1d2b      	adds	r3, r5, #4
   15246:	18d2      	adds	r2, r2, r3
   15248:	b292      	uxth	r2, r2
   1524a:	2000      	movs	r0, #0
   1524c:	5620      	ldrsb	r0, [r4, r0]
   1524e:	2300      	movs	r3, #0
   15250:	4e30      	ldr	r6, [pc, #192]	; (15314 <_http_client_request+0x498>)
   15252:	47b0      	blx	r6
   15254:	2800      	cmp	r0, #0
   15256:	db19      	blt.n	1528c <_http_client_request+0x410>
			module->req.sent_length += size;
   15258:	22d0      	movs	r2, #208	; 0xd0
   1525a:	58a3      	ldr	r3, [r4, r2]
   1525c:	195b      	adds	r3, r3, r5
   1525e:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   15260:	2d00      	cmp	r5, #0
   15262:	d000      	beq.n	15266 <_http_client_request+0x3ea>
   15264:	e631      	b.n	14eca <_http_client_request+0x4e>
				if (module->req.entity.close) {
   15266:	23c0      	movs	r3, #192	; 0xc0
   15268:	58e3      	ldr	r3, [r4, r3]
   1526a:	2b00      	cmp	r3, #0
   1526c:	d002      	beq.n	15274 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   1526e:	3a0c      	subs	r2, #12
   15270:	58a0      	ldr	r0, [r4, r2]
   15272:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   15274:	2302      	movs	r3, #2
   15276:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   15278:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1527a:	2b00      	cmp	r3, #0
   1527c:	d100      	bne.n	15280 <_http_client_request+0x404>
   1527e:	e624      	b.n	14eca <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15280:	220c      	movs	r2, #12
   15282:	18ba      	adds	r2, r7, r2
   15284:	2101      	movs	r1, #1
   15286:	0020      	movs	r0, r4
   15288:	4798      	blx	r3
   1528a:	e61e      	b.n	14eca <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   1528c:	2105      	movs	r1, #5
   1528e:	4249      	negs	r1, r1
   15290:	0020      	movs	r0, r4
   15292:	4b21      	ldr	r3, [pc, #132]	; (15318 <_http_client_request+0x49c>)
   15294:	4798      	blx	r3
   15296:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   15298:	46bd      	mov	sp, r7
   1529a:	b013      	add	sp, #76	; 0x4c
   1529c:	bc0c      	pop	{r2, r3}
   1529e:	4692      	mov	sl, r2
   152a0:	469b      	mov	fp, r3
   152a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   152a4:	0022      	movs	r2, r4
   152a6:	32b0      	adds	r2, #176	; 0xb0
   152a8:	6950      	ldr	r0, [r2, #20]
   152aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
   152ac:	0031      	movs	r1, r6
   152ae:	47a8      	blx	r5
			if (size < 0) {
   152b0:	2800      	cmp	r0, #0
   152b2:	db16      	blt.n	152e2 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   152b4:	23cc      	movs	r3, #204	; 0xcc
   152b6:	58e5      	ldr	r5, [r4, r3]
   152b8:	3304      	adds	r3, #4
   152ba:	58e3      	ldr	r3, [r4, r3]
   152bc:	1aed      	subs	r5, r5, r3
   152be:	4285      	cmp	r5, r0
   152c0:	dd00      	ble.n	152c4 <_http_client_request+0x448>
   152c2:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   152c4:	b2aa      	uxth	r2, r5
   152c6:	2000      	movs	r0, #0
   152c8:	5620      	ldrsb	r0, [r4, r0]
   152ca:	2300      	movs	r3, #0
   152cc:	0031      	movs	r1, r6
   152ce:	4e11      	ldr	r6, [pc, #68]	; (15314 <_http_client_request+0x498>)
   152d0:	47b0      	blx	r6
   152d2:	2800      	cmp	r0, #0
   152d4:	db0b      	blt.n	152ee <_http_client_request+0x472>
				module->req.sent_length += size;
   152d6:	23d0      	movs	r3, #208	; 0xd0
   152d8:	58e2      	ldr	r2, [r4, r3]
   152da:	4694      	mov	ip, r2
   152dc:	4465      	add	r5, ip
   152de:	50e5      	str	r5, [r4, r3]
   152e0:	e5f3      	b.n	14eca <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   152e2:	2105      	movs	r1, #5
   152e4:	4249      	negs	r1, r1
   152e6:	0020      	movs	r0, r4
   152e8:	4b0b      	ldr	r3, [pc, #44]	; (15318 <_http_client_request+0x49c>)
   152ea:	4798      	blx	r3
   152ec:	e5ed      	b.n	14eca <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   152ee:	2105      	movs	r1, #5
   152f0:	4249      	negs	r1, r1
   152f2:	0020      	movs	r0, r4
   152f4:	4b08      	ldr	r3, [pc, #32]	; (15318 <_http_client_request+0x49c>)
   152f6:	4798      	blx	r3
					return;
   152f8:	e7cd      	b.n	15296 <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   152fa:	2302      	movs	r3, #2
   152fc:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   152fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15300:	2b00      	cmp	r3, #0
   15302:	d100      	bne.n	15306 <_http_client_request+0x48a>
   15304:	e5e1      	b.n	14eca <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   15306:	220c      	movs	r2, #12
   15308:	18ba      	adds	r2, r7, r2
   1530a:	2101      	movs	r1, #1
   1530c:	0020      	movs	r0, r4
   1530e:	4798      	blx	r3
   15310:	e5db      	b.n	14eca <_http_client_request+0x4e>
   15312:	46c0      	nop			; (mov r8, r8)
   15314:	0000e691 	.word	0x0000e691
   15318:	00014d65 	.word	0x00014d65

0001531c <http_client_send_request>:
{
   1531c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1531e:	46d6      	mov	lr, sl
   15320:	b500      	push	{lr}
   15322:	b088      	sub	sp, #32
   15324:	0004      	movs	r4, r0
   15326:	000f      	movs	r7, r1
   15328:	4692      	mov	sl, r2
   1532a:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   1532c:	2800      	cmp	r0, #0
   1532e:	d100      	bne.n	15332 <http_client_send_request+0x16>
   15330:	e0d3      	b.n	154da <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   15332:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   15334:	2b02      	cmp	r3, #2
   15336:	d900      	bls.n	1533a <http_client_send_request+0x1e>
   15338:	e0d3      	b.n	154e2 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   1533a:	2207      	movs	r2, #7
   1533c:	4981      	ldr	r1, [pc, #516]	; (15544 <http_client_send_request+0x228>)
   1533e:	0038      	movs	r0, r7
   15340:	4b81      	ldr	r3, [pc, #516]	; (15548 <http_client_send_request+0x22c>)
   15342:	4798      	blx	r3
		i = 7;
   15344:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   15346:	2800      	cmp	r0, #0
   15348:	d007      	beq.n	1535a <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   1534a:	2208      	movs	r2, #8
   1534c:	497f      	ldr	r1, [pc, #508]	; (1554c <http_client_send_request+0x230>)
   1534e:	0038      	movs	r0, r7
   15350:	4b7d      	ldr	r3, [pc, #500]	; (15548 <http_client_send_request+0x22c>)
   15352:	4798      	blx	r3
		i = 8;
   15354:	4246      	negs	r6, r0
   15356:	4146      	adcs	r6, r0
   15358:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   1535a:	1c63      	adds	r3, r4, #1
   1535c:	19bd      	adds	r5, r7, r6
   1535e:	9302      	str	r3, [sp, #8]
   15360:	0018      	movs	r0, r3
   15362:	4b7b      	ldr	r3, [pc, #492]	; (15550 <http_client_send_request+0x234>)
   15364:	4798      	blx	r3
   15366:	0002      	movs	r2, r0
   15368:	0029      	movs	r1, r5
   1536a:	9802      	ldr	r0, [sp, #8]
   1536c:	4b76      	ldr	r3, [pc, #472]	; (15548 <http_client_send_request+0x22c>)
   1536e:	4798      	blx	r3
   15370:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   15372:	782b      	ldrb	r3, [r5, #0]
   15374:	2b00      	cmp	r3, #0
   15376:	d052      	beq.n	1541e <http_client_send_request+0x102>
   15378:	2b2f      	cmp	r3, #47	; 0x2f
   1537a:	d052      	beq.n	15422 <http_client_send_request+0x106>
   1537c:	1c71      	adds	r1, r6, #1
   1537e:	1879      	adds	r1, r7, r1
   15380:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   15382:	3201      	adds	r2, #1
   15384:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   15386:	000d      	movs	r5, r1
   15388:	780b      	ldrb	r3, [r1, #0]
   1538a:	2b00      	cmp	r3, #0
   1538c:	d002      	beq.n	15394 <http_client_send_request+0x78>
   1538e:	3101      	adds	r1, #1
   15390:	2b2f      	cmp	r3, #47	; 0x2f
   15392:	d1f6      	bne.n	15382 <http_client_send_request+0x66>
	module->host[j] = '\0';
   15394:	18a2      	adds	r2, r4, r2
   15396:	2300      	movs	r3, #0
   15398:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   1539a:	7863      	ldrb	r3, [r4, #1]
   1539c:	2b00      	cmp	r3, #0
   1539e:	d100      	bne.n	153a2 <http_client_send_request+0x86>
   153a0:	e0a3      	b.n	154ea <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   153a2:	0028      	movs	r0, r5
   153a4:	4b6a      	ldr	r3, [pc, #424]	; (15550 <http_client_send_request+0x234>)
   153a6:	4798      	blx	r3
   153a8:	283f      	cmp	r0, #63	; 0x3f
   153aa:	d900      	bls.n	153ae <http_client_send_request+0x92>
   153ac:	e0a1      	b.n	154f2 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   153ae:	23d4      	movs	r3, #212	; 0xd4
   153b0:	58e0      	ldr	r0, [r4, r3]
   153b2:	2800      	cmp	r0, #0
   153b4:	d001      	beq.n	153ba <http_client_send_request+0x9e>
		free(module->req.ext_header);
   153b6:	4b67      	ldr	r3, [pc, #412]	; (15554 <http_client_send_request+0x238>)
   153b8:	4798      	blx	r3
	if (ext_header != NULL) {
   153ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   153bc:	2b00      	cmp	r3, #0
   153be:	d032      	beq.n	15426 <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   153c0:	0018      	movs	r0, r3
   153c2:	4b65      	ldr	r3, [pc, #404]	; (15558 <http_client_send_request+0x23c>)
   153c4:	4798      	blx	r3
   153c6:	23d4      	movs	r3, #212	; 0xd4
   153c8:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   153ca:	2800      	cmp	r0, #0
   153cc:	d100      	bne.n	153d0 <http_client_send_request+0xb4>
   153ce:	e094      	b.n	154fa <http_client_send_request+0x1de>
	module->sending = 0;
   153d0:	2241      	movs	r2, #65	; 0x41
   153d2:	5ca3      	ldrb	r3, [r4, r2]
   153d4:	2101      	movs	r1, #1
   153d6:	438b      	bics	r3, r1
   153d8:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   153da:	2300      	movs	r3, #0
   153dc:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   153de:	782b      	ldrb	r3, [r5, #0]
   153e0:	2b2f      	cmp	r3, #47	; 0x2f
   153e2:	d024      	beq.n	1542e <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   153e4:	222f      	movs	r2, #47	; 0x2f
   153e6:	2370      	movs	r3, #112	; 0x70
   153e8:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   153ea:	782b      	ldrb	r3, [r5, #0]
   153ec:	2b00      	cmp	r3, #0
   153ee:	d124      	bne.n	1543a <http_client_send_request+0x11e>
	if (entity != NULL) {
   153f0:	9b03      	ldr	r3, [sp, #12]
   153f2:	2b00      	cmp	r3, #0
   153f4:	d027      	beq.n	15446 <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   153f6:	0020      	movs	r0, r4
   153f8:	30b0      	adds	r0, #176	; 0xb0
   153fa:	2218      	movs	r2, #24
   153fc:	0019      	movs	r1, r3
   153fe:	4b57      	ldr	r3, [pc, #348]	; (1555c <http_client_send_request+0x240>)
   15400:	4798      	blx	r3
	module->req.method = method;
   15402:	23c8      	movs	r3, #200	; 0xc8
   15404:	4652      	mov	r2, sl
   15406:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   15408:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   1540a:	2b01      	cmp	r3, #1
   1540c:	d022      	beq.n	15454 <http_client_send_request+0x138>
   1540e:	2b00      	cmp	r3, #0
   15410:	d027      	beq.n	15462 <http_client_send_request+0x146>
   15412:	2b02      	cmp	r3, #2
   15414:	d03a      	beq.n	1548c <http_client_send_request+0x170>
		return -EAGAIN;
   15416:	230b      	movs	r3, #11
   15418:	425b      	negs	r3, r3
   1541a:	9301      	str	r3, [sp, #4]
   1541c:	e08d      	b.n	1553a <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   1541e:	2200      	movs	r2, #0
   15420:	e7b8      	b.n	15394 <http_client_send_request+0x78>
   15422:	2200      	movs	r2, #0
   15424:	e7b6      	b.n	15394 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   15426:	2200      	movs	r2, #0
   15428:	23d4      	movs	r3, #212	; 0xd4
   1542a:	50e2      	str	r2, [r4, r3]
   1542c:	e7d0      	b.n	153d0 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   1542e:	0020      	movs	r0, r4
   15430:	3070      	adds	r0, #112	; 0x70
   15432:	0029      	movs	r1, r5
   15434:	4b4a      	ldr	r3, [pc, #296]	; (15560 <http_client_send_request+0x244>)
   15436:	4798      	blx	r3
   15438:	e7da      	b.n	153f0 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   1543a:	0029      	movs	r1, r5
   1543c:	0020      	movs	r0, r4
   1543e:	3071      	adds	r0, #113	; 0x71
   15440:	4b47      	ldr	r3, [pc, #284]	; (15560 <http_client_send_request+0x244>)
   15442:	4798      	blx	r3
   15444:	e7d4      	b.n	153f0 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   15446:	0020      	movs	r0, r4
   15448:	30b0      	adds	r0, #176	; 0xb0
   1544a:	2218      	movs	r2, #24
   1544c:	2100      	movs	r1, #0
   1544e:	4b45      	ldr	r3, [pc, #276]	; (15564 <http_client_send_request+0x248>)
   15450:	4798      	blx	r3
   15452:	e7d6      	b.n	15402 <http_client_send_request+0xe6>
		if (!reconnect) {
   15454:	9b01      	ldr	r3, [sp, #4]
   15456:	2b00      	cmp	r3, #0
   15458:	d06f      	beq.n	1553a <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   1545a:	2100      	movs	r1, #0
   1545c:	0020      	movs	r0, r4
   1545e:	4b42      	ldr	r3, [pc, #264]	; (15568 <http_client_send_request+0x24c>)
   15460:	4798      	blx	r3
		if (module->config.tls) {
   15462:	2352      	movs	r3, #82	; 0x52
   15464:	5ce2      	ldrb	r2, [r4, r3]
   15466:	1e53      	subs	r3, r2, #1
   15468:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   1546a:	b2d2      	uxtb	r2, r2
   1546c:	2101      	movs	r1, #1
   1546e:	2002      	movs	r0, #2
   15470:	4b3e      	ldr	r3, [pc, #248]	; (1556c <http_client_send_request+0x250>)
   15472:	4798      	blx	r3
   15474:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   15476:	2800      	cmp	r0, #0
   15478:	db43      	blt.n	15502 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   1547a:	0080      	lsls	r0, r0, #2
   1547c:	4b3c      	ldr	r3, [pc, #240]	; (15570 <http_client_send_request+0x254>)
   1547e:	50c4      	str	r4, [r0, r3]
   15480:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   15482:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   15484:	2620      	movs	r6, #32
			isv6 = 1;
   15486:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   15488:	2730      	movs	r7, #48	; 0x30
   1548a:	e00c      	b.n	154a6 <http_client_send_request+0x18a>
		if (!reconnect) {
   1548c:	9b01      	ldr	r3, [sp, #4]
   1548e:	2b00      	cmp	r3, #0
   15490:	d1e3      	bne.n	1545a <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   15492:	3303      	adds	r3, #3
   15494:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   15496:	0020      	movs	r0, r4
   15498:	4b36      	ldr	r3, [pc, #216]	; (15574 <http_client_send_request+0x258>)
   1549a:	4798      	blx	r3
			break;
   1549c:	e04d      	b.n	1553a <http_client_send_request+0x21e>
			if (isv6) {
   1549e:	2900      	cmp	r1, #0
   154a0:	d001      	beq.n	154a6 <http_client_send_request+0x18a>
   154a2:	e012      	b.n	154ca <http_client_send_request+0x1ae>
			isv6 = 1;
   154a4:	0001      	movs	r1, r0
	while (*host != '\0') {
   154a6:	782a      	ldrb	r2, [r5, #0]
   154a8:	2a00      	cmp	r2, #0
   154aa:	d02e      	beq.n	1550a <http_client_send_request+0x1ee>
		ch = *host++;
   154ac:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   154ae:	0013      	movs	r3, r2
   154b0:	43b3      	bics	r3, r6
   154b2:	3b41      	subs	r3, #65	; 0x41
   154b4:	2b05      	cmp	r3, #5
   154b6:	d9f5      	bls.n	154a4 <http_client_send_request+0x188>
   154b8:	2a3a      	cmp	r2, #58	; 0x3a
   154ba:	d00a      	beq.n	154d2 <http_client_send_request+0x1b6>
   154bc:	2a2f      	cmp	r2, #47	; 0x2f
   154be:	d00a      	beq.n	154d6 <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   154c0:	2a2e      	cmp	r2, #46	; 0x2e
   154c2:	d0ec      	beq.n	1549e <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   154c4:	403a      	ands	r2, r7
   154c6:	2a30      	cmp	r2, #48	; 0x30
   154c8:	d0ed      	beq.n	154a6 <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   154ca:	9802      	ldr	r0, [sp, #8]
   154cc:	4b2a      	ldr	r3, [pc, #168]	; (15578 <http_client_send_request+0x25c>)
   154ce:	4798      	blx	r3
   154d0:	e02f      	b.n	15532 <http_client_send_request+0x216>
			isv6 = 1;
   154d2:	0001      	movs	r1, r0
   154d4:	e7e7      	b.n	154a6 <http_client_send_request+0x18a>
   154d6:	0001      	movs	r1, r0
   154d8:	e7e5      	b.n	154a6 <http_client_send_request+0x18a>
		return -EINVAL;
   154da:	2316      	movs	r3, #22
   154dc:	425b      	negs	r3, r3
   154de:	9301      	str	r3, [sp, #4]
   154e0:	e02b      	b.n	1553a <http_client_send_request+0x21e>
		return -EBUSY;
   154e2:	2310      	movs	r3, #16
   154e4:	425b      	negs	r3, r3
   154e6:	9301      	str	r3, [sp, #4]
   154e8:	e027      	b.n	1553a <http_client_send_request+0x21e>
		return -EINVAL;
   154ea:	2316      	movs	r3, #22
   154ec:	425b      	negs	r3, r3
   154ee:	9301      	str	r3, [sp, #4]
   154f0:	e023      	b.n	1553a <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   154f2:	235b      	movs	r3, #91	; 0x5b
   154f4:	425b      	negs	r3, r3
   154f6:	9301      	str	r3, [sp, #4]
   154f8:	e01f      	b.n	1553a <http_client_send_request+0x21e>
			return -ENOMEM;
   154fa:	230c      	movs	r3, #12
   154fc:	425b      	negs	r3, r3
   154fe:	9301      	str	r3, [sp, #4]
   15500:	e01b      	b.n	1553a <http_client_send_request+0x21e>
			return -ENOSPC;
   15502:	231c      	movs	r3, #28
   15504:	425b      	negs	r3, r3
   15506:	9301      	str	r3, [sp, #4]
   15508:	e017      	b.n	1553a <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   1550a:	2302      	movs	r3, #2
   1550c:	aa04      	add	r2, sp, #16
   1550e:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   15510:	334e      	adds	r3, #78	; 0x4e
   15512:	5ae3      	ldrh	r3, [r4, r3]
   15514:	021a      	lsls	r2, r3, #8
   15516:	0a1b      	lsrs	r3, r3, #8
   15518:	4313      	orrs	r3, r2
   1551a:	aa04      	add	r2, sp, #16
   1551c:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   1551e:	9802      	ldr	r0, [sp, #8]
   15520:	4b16      	ldr	r3, [pc, #88]	; (1557c <http_client_send_request+0x260>)
   15522:	4798      	blx	r3
   15524:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   15526:	2000      	movs	r0, #0
   15528:	5620      	ldrsb	r0, [r4, r0]
   1552a:	2210      	movs	r2, #16
   1552c:	a904      	add	r1, sp, #16
   1552e:	4b14      	ldr	r3, [pc, #80]	; (15580 <http_client_send_request+0x264>)
   15530:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   15532:	2301      	movs	r3, #1
   15534:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   15536:	2300      	movs	r3, #0
   15538:	9301      	str	r3, [sp, #4]
}
   1553a:	9801      	ldr	r0, [sp, #4]
   1553c:	b008      	add	sp, #32
   1553e:	bc04      	pop	{r2}
   15540:	4692      	mov	sl, r2
   15542:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15544:	0001ceec 	.word	0x0001ceec
   15548:	000195d5 	.word	0x000195d5
   1554c:	0001cef4 	.word	0x0001cef4
   15550:	000195c7 	.word	0x000195c7
   15554:	00018fc1 	.word	0x00018fc1
   15558:	0001958d 	.word	0x0001958d
   1555c:	00018fd5 	.word	0x00018fd5
   15560:	0001957d 	.word	0x0001957d
   15564:	0001900b 	.word	0x0001900b
   15568:	00014d65 	.word	0x00014d65
   1556c:	0000e47d 	.word	0x0000e47d
   15570:	20000988 	.word	0x20000988
   15574:	00014e7d 	.word	0x00014e7d
   15578:	0000e8c5 	.word	0x0000e8c5
   1557c:	0000e859 	.word	0x0000e859
   15580:	0000e601 	.word	0x0000e601

00015584 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   15584:	b510      	push	{r4, lr}
	if (module == NULL) {
   15586:	2800      	cmp	r0, #0
   15588:	d00d      	beq.n	155a6 <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   1558a:	6c41      	ldr	r1, [r0, #68]	; 0x44
   1558c:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1558e:	4291      	cmp	r1, r2
   15590:	d20a      	bcs.n	155a8 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   15592:	1a52      	subs	r2, r2, r1
   15594:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   15596:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   15598:	469c      	mov	ip, r3
   1559a:	4461      	add	r1, ip
	recv(module->sock,
   1559c:	7800      	ldrb	r0, [r0, #0]
   1559e:	b240      	sxtb	r0, r0
   155a0:	2300      	movs	r3, #0
   155a2:	4c04      	ldr	r4, [pc, #16]	; (155b4 <_http_client_recv_packet+0x30>)
   155a4:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   155a6:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   155a8:	218b      	movs	r1, #139	; 0x8b
   155aa:	4249      	negs	r1, r1
   155ac:	4b02      	ldr	r3, [pc, #8]	; (155b8 <_http_client_recv_packet+0x34>)
   155ae:	4798      	blx	r3
		return;
   155b0:	e7f9      	b.n	155a6 <_http_client_recv_packet+0x22>
   155b2:	46c0      	nop			; (mov r8, r8)
   155b4:	0000e729 	.word	0x0000e729
   155b8:	00014d65 	.word	0x00014d65

000155bc <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   155bc:	b570      	push	{r4, r5, r6, lr}
   155be:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   155c0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   155c2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   155c4:	1a5c      	subs	r4, r3, r1
   155c6:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   155c8:	2c00      	cmp	r4, #0
   155ca:	dc02      	bgt.n	155d2 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   155cc:	2300      	movs	r3, #0
   155ce:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   155d0:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   155d2:	0022      	movs	r2, r4
   155d4:	4b01      	ldr	r3, [pc, #4]	; (155dc <_http_client_move_buffer+0x20>)
   155d6:	4798      	blx	r3
		module->recved_size = remain;
   155d8:	646c      	str	r4, [r5, #68]	; 0x44
   155da:	e7f9      	b.n	155d0 <_http_client_move_buffer+0x14>
   155dc:	00018fe7 	.word	0x00018fe7

000155e0 <_http_client_handle_header>:
{
   155e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   155e2:	46ce      	mov	lr, r9
   155e4:	b500      	push	{lr}
   155e6:	b084      	sub	sp, #16
   155e8:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   155ea:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   155ec:	4b62      	ldr	r3, [pc, #392]	; (15778 <_http_client_handle_header+0x198>)
   155ee:	4699      	mov	r9, r3
   155f0:	e049      	b.n	15686 <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   155f2:	0021      	movs	r1, r4
   155f4:	0038      	movs	r0, r7
   155f6:	4b61      	ldr	r3, [pc, #388]	; (1577c <_http_client_handle_header+0x19c>)
   155f8:	4798      	blx	r3
			return 0;
   155fa:	2600      	movs	r6, #0
}
   155fc:	0030      	movs	r0, r6
   155fe:	b004      	add	sp, #16
   15600:	bc04      	pop	{r2}
   15602:	4691      	mov	r9, r2
   15604:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   15606:	1ca1      	adds	r1, r4, #2
   15608:	0038      	movs	r0, r7
   1560a:	4b5c      	ldr	r3, [pc, #368]	; (1577c <_http_client_handle_header+0x19c>)
   1560c:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   1560e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   15610:	2b00      	cmp	r3, #0
   15612:	d00a      	beq.n	1562a <_http_client_handle_header+0x4a>
   15614:	22e4      	movs	r2, #228	; 0xe4
   15616:	5ab9      	ldrh	r1, [r7, r2]
   15618:	2900      	cmp	r1, #0
   1561a:	d006      	beq.n	1562a <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   1561c:	3a08      	subs	r2, #8
   1561e:	58b8      	ldr	r0, [r7, r2]
   15620:	2800      	cmp	r0, #0
   15622:	db07      	blt.n	15634 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   15624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   15626:	4290      	cmp	r0, r2
   15628:	dc10      	bgt.n	1564c <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   1562a:	2201      	movs	r2, #1
   1562c:	23d8      	movs	r3, #216	; 0xd8
   1562e:	50fa      	str	r2, [r7, r3]
			return 1;
   15630:	2601      	movs	r6, #1
   15632:	e7e3      	b.n	155fc <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   15634:	aa01      	add	r2, sp, #4
   15636:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   15638:	2101      	movs	r1, #1
   1563a:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   1563c:	2100      	movs	r1, #0
   1563e:	20e0      	movs	r0, #224	; 0xe0
   15640:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   15642:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   15644:	3102      	adds	r1, #2
   15646:	0038      	movs	r0, r7
   15648:	4798      	blx	r3
   1564a:	e7ee      	b.n	1562a <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   1564c:	aa01      	add	r2, sp, #4
   1564e:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   15650:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   15652:	2100      	movs	r1, #0
   15654:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   15656:	20e0      	movs	r0, #224	; 0xe0
   15658:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1565a:	3102      	adds	r1, #2
   1565c:	0038      	movs	r0, r7
   1565e:	4798      	blx	r3
   15660:	e7e3      	b.n	1562a <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   15662:	0020      	movs	r0, r4
   15664:	3010      	adds	r0, #16
   15666:	4b46      	ldr	r3, [pc, #280]	; (15780 <_http_client_handle_header+0x1a0>)
   15668:	4798      	blx	r3
   1566a:	23dc      	movs	r3, #220	; 0xdc
   1566c:	50f8      	str	r0, [r7, r3]
   1566e:	e009      	b.n	15684 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15670:	3201      	adds	r2, #1
   15672:	4295      	cmp	r5, r2
   15674:	d006      	beq.n	15684 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   15676:	7813      	ldrb	r3, [r2, #0]
   15678:	2b20      	cmp	r3, #32
   1567a:	d12b      	bne.n	156d4 <_http_client_handle_header+0xf4>
   1567c:	e7f8      	b.n	15670 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   1567e:	3a21      	subs	r2, #33	; 0x21
   15680:	3389      	adds	r3, #137	; 0x89
   15682:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   15684:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   15686:	493f      	ldr	r1, [pc, #252]	; (15784 <_http_client_handle_header+0x1a4>)
   15688:	0020      	movs	r0, r4
   1568a:	47c8      	blx	r9
   1568c:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   1568e:	d0b0      	beq.n	155f2 <_http_client_handle_header+0x12>
   15690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   15692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   15694:	4694      	mov	ip, r2
   15696:	4463      	add	r3, ip
   15698:	4298      	cmp	r0, r3
   1569a:	d2aa      	bcs.n	155f2 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   1569c:	2202      	movs	r2, #2
   1569e:	4939      	ldr	r1, [pc, #228]	; (15784 <_http_client_handle_header+0x1a4>)
   156a0:	0020      	movs	r0, r4
   156a2:	4b39      	ldr	r3, [pc, #228]	; (15788 <_http_client_handle_header+0x1a8>)
   156a4:	4798      	blx	r3
   156a6:	2800      	cmp	r0, #0
   156a8:	d0ad      	beq.n	15606 <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   156aa:	2210      	movs	r2, #16
   156ac:	4937      	ldr	r1, [pc, #220]	; (1578c <_http_client_handle_header+0x1ac>)
   156ae:	0020      	movs	r0, r4
   156b0:	4b35      	ldr	r3, [pc, #212]	; (15788 <_http_client_handle_header+0x1a8>)
   156b2:	4798      	blx	r3
   156b4:	2800      	cmp	r0, #0
   156b6:	d0d4      	beq.n	15662 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   156b8:	2213      	movs	r2, #19
   156ba:	4935      	ldr	r1, [pc, #212]	; (15790 <_http_client_handle_header+0x1b0>)
   156bc:	0020      	movs	r0, r4
   156be:	4b32      	ldr	r3, [pc, #200]	; (15788 <_http_client_handle_header+0x1a8>)
   156c0:	4798      	blx	r3
   156c2:	1e06      	subs	r6, r0, #0
   156c4:	d110      	bne.n	156e8 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   156c6:	0022      	movs	r2, r4
   156c8:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   156ca:	4295      	cmp	r5, r2
   156cc:	d9da      	bls.n	15684 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   156ce:	7ce3      	ldrb	r3, [r4, #19]
   156d0:	2b20      	cmp	r3, #32
   156d2:	d0cd      	beq.n	15670 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   156d4:	2220      	movs	r2, #32
   156d6:	4393      	bics	r3, r2
   156d8:	2b43      	cmp	r3, #67	; 0x43
   156da:	d0d0      	beq.n	1567e <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   156dc:	2186      	movs	r1, #134	; 0x86
   156de:	4249      	negs	r1, r1
   156e0:	0038      	movs	r0, r7
   156e2:	4b2c      	ldr	r3, [pc, #176]	; (15794 <_http_client_handle_header+0x1b4>)
   156e4:	4798      	blx	r3
					return 0;
   156e6:	e789      	b.n	155fc <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   156e8:	220c      	movs	r2, #12
   156ea:	492b      	ldr	r1, [pc, #172]	; (15798 <_http_client_handle_header+0x1b8>)
   156ec:	0020      	movs	r0, r4
   156ee:	4b26      	ldr	r3, [pc, #152]	; (15788 <_http_client_handle_header+0x1a8>)
   156f0:	4798      	blx	r3
   156f2:	2800      	cmp	r0, #0
   156f4:	d11d      	bne.n	15732 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   156f6:	0022      	movs	r2, r4
   156f8:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   156fa:	4295      	cmp	r5, r2
   156fc:	d9c2      	bls.n	15684 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   156fe:	7b23      	ldrb	r3, [r4, #12]
   15700:	2b20      	cmp	r3, #32
   15702:	d009      	beq.n	15718 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   15704:	2220      	movs	r2, #32
   15706:	4393      	bics	r3, r2
   15708:	2b4b      	cmp	r3, #75	; 0x4b
   1570a:	d00c      	beq.n	15726 <_http_client_handle_header+0x146>
					module->permanent = 0;
   1570c:	2241      	movs	r2, #65	; 0x41
   1570e:	5cbb      	ldrb	r3, [r7, r2]
   15710:	2102      	movs	r1, #2
   15712:	438b      	bics	r3, r1
   15714:	54bb      	strb	r3, [r7, r2]
   15716:	e7b5      	b.n	15684 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   15718:	3201      	adds	r2, #1
   1571a:	4295      	cmp	r5, r2
   1571c:	d0b2      	beq.n	15684 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   1571e:	7813      	ldrb	r3, [r2, #0]
   15720:	2b20      	cmp	r3, #32
   15722:	d1ef      	bne.n	15704 <_http_client_handle_header+0x124>
   15724:	e7f8      	b.n	15718 <_http_client_handle_header+0x138>
					module->permanent = 1;
   15726:	3221      	adds	r2, #33	; 0x21
   15728:	5cbb      	ldrb	r3, [r7, r2]
   1572a:	2102      	movs	r1, #2
   1572c:	430b      	orrs	r3, r1
   1572e:	54bb      	strb	r3, [r7, r2]
   15730:	e7a8      	b.n	15684 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   15732:	2205      	movs	r2, #5
   15734:	4919      	ldr	r1, [pc, #100]	; (1579c <_http_client_handle_header+0x1bc>)
   15736:	0020      	movs	r0, r4
   15738:	4b13      	ldr	r3, [pc, #76]	; (15788 <_http_client_handle_header+0x1a8>)
   1573a:	4798      	blx	r3
   1573c:	2800      	cmp	r0, #0
   1573e:	d1a1      	bne.n	15684 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   15740:	0020      	movs	r0, r4
   15742:	3009      	adds	r0, #9
   15744:	4b0e      	ldr	r3, [pc, #56]	; (15780 <_http_client_handle_header+0x1a0>)
   15746:	4798      	blx	r3
   15748:	23e4      	movs	r3, #228	; 0xe4
   1574a:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   1574c:	2200      	movs	r2, #0
   1574e:	3b08      	subs	r3, #8
   15750:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   15752:	7963      	ldrb	r3, [r4, #5]
   15754:	2b31      	cmp	r3, #49	; 0x31
   15756:	d802      	bhi.n	1575e <_http_client_handle_header+0x17e>
   15758:	79e3      	ldrb	r3, [r4, #7]
   1575a:	2b30      	cmp	r3, #48	; 0x30
   1575c:	d905      	bls.n	1576a <_http_client_handle_header+0x18a>
				module->permanent = 1;
   1575e:	2241      	movs	r2, #65	; 0x41
   15760:	5cbb      	ldrb	r3, [r7, r2]
   15762:	2102      	movs	r1, #2
   15764:	430b      	orrs	r3, r1
   15766:	54bb      	strb	r3, [r7, r2]
   15768:	e78c      	b.n	15684 <_http_client_handle_header+0xa4>
				module->permanent = 0;
   1576a:	2241      	movs	r2, #65	; 0x41
   1576c:	5cbb      	ldrb	r3, [r7, r2]
   1576e:	2102      	movs	r1, #2
   15770:	438b      	bics	r3, r1
   15772:	54bb      	strb	r3, [r7, r2]
   15774:	e786      	b.n	15684 <_http_client_handle_header+0xa4>
   15776:	46c0      	nop			; (mov r8, r8)
   15778:	00019645 	.word	0x00019645
   1577c:	000155bd 	.word	0x000155bd
   15780:	00018f59 	.word	0x00018f59
   15784:	0001cbc0 	.word	0x0001cbc0
   15788:	000195d5 	.word	0x000195d5
   1578c:	0001cecc 	.word	0x0001cecc
   15790:	0001cddc 	.word	0x0001cddc
   15794:	00014d65 	.word	0x00014d65
   15798:	0001cdf0 	.word	0x0001cdf0
   1579c:	0001ce00 	.word	0x0001ce00

000157a0 <_http_client_handle_entity>:
{
   157a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   157a2:	46ce      	mov	lr, r9
   157a4:	b500      	push	{lr}
   157a6:	b086      	sub	sp, #24
   157a8:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   157aa:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   157ac:	23dc      	movs	r3, #220	; 0xdc
   157ae:	58c3      	ldr	r3, [r0, r3]
   157b0:	2b00      	cmp	r3, #0
   157b2:	db69      	blt.n	15888 <_http_client_handle_entity+0xe8>
   157b4:	6e02      	ldr	r2, [r0, #96]	; 0x60
   157b6:	4293      	cmp	r3, r2
   157b8:	dc2b      	bgt.n	15812 <_http_client_handle_entity+0x72>
	return 0;
   157ba:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   157bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
   157be:	4293      	cmp	r3, r2
   157c0:	dc4e      	bgt.n	15860 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   157c2:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   157c4:	2e00      	cmp	r6, #0
   157c6:	d003      	beq.n	157d0 <_http_client_handle_entity+0x30>
   157c8:	22e4      	movs	r2, #228	; 0xe4
   157ca:	5aa1      	ldrh	r1, [r4, r2]
   157cc:	2900      	cmp	r1, #0
   157ce:	d10e      	bne.n	157ee <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   157d0:	2300      	movs	r3, #0
   157d2:	22d8      	movs	r2, #216	; 0xd8
   157d4:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   157d6:	320c      	adds	r2, #12
   157d8:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   157da:	3341      	adds	r3, #65	; 0x41
   157dc:	5ce3      	ldrb	r3, [r4, r3]
   157de:	079b      	lsls	r3, r3, #30
   157e0:	d40f      	bmi.n	15802 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   157e2:	2100      	movs	r1, #0
   157e4:	0020      	movs	r0, r4
   157e6:	4b71      	ldr	r3, [pc, #452]	; (159ac <_http_client_handle_entity+0x20c>)
   157e8:	4798      	blx	r3
	return 0;
   157ea:	2000      	movs	r0, #0
   157ec:	e038      	b.n	15860 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   157ee:	aa03      	add	r2, sp, #12
   157f0:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   157f2:	2100      	movs	r1, #0
   157f4:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   157f6:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   157f8:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   157fa:	3102      	adds	r1, #2
   157fc:	0020      	movs	r0, r4
   157fe:	47b0      	blx	r6
   15800:	e7e6      	b.n	157d0 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   15802:	23dc      	movs	r3, #220	; 0xdc
   15804:	58e1      	ldr	r1, [r4, r3]
   15806:	1869      	adds	r1, r5, r1
   15808:	0020      	movs	r0, r4
   1580a:	4b69      	ldr	r3, [pc, #420]	; (159b0 <_http_client_handle_entity+0x210>)
   1580c:	4798      	blx	r3
				return module->recved_size;
   1580e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   15810:	e026      	b.n	15860 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   15812:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15814:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   15816:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   15818:	21e0      	movs	r1, #224	; 0xe0
   1581a:	5840      	ldr	r0, [r0, r1]
   1581c:	4684      	mov	ip, r0
   1581e:	4462      	add	r2, ip
   15820:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   15822:	4293      	cmp	r3, r2
   15824:	dc20      	bgt.n	15868 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   15826:	2300      	movs	r3, #0
   15828:	22d8      	movs	r2, #216	; 0xd8
   1582a:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   1582c:	320c      	adds	r2, #12
   1582e:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   15830:	3ae3      	subs	r2, #227	; 0xe3
   15832:	ab03      	add	r3, sp, #12
   15834:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   15836:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15838:	2b00      	cmp	r3, #0
   1583a:	d007      	beq.n	1584c <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   1583c:	ae03      	add	r6, sp, #12
   1583e:	0032      	movs	r2, r6
   15840:	2103      	movs	r1, #3
   15842:	0020      	movs	r0, r4
   15844:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   15846:	7a33      	ldrb	r3, [r6, #8]
   15848:	2b01      	cmp	r3, #1
   1584a:	d103      	bne.n	15854 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   1584c:	2341      	movs	r3, #65	; 0x41
   1584e:	5ce3      	ldrb	r3, [r4, r3]
   15850:	079b      	lsls	r3, r3, #30
   15852:	d510      	bpl.n	15876 <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   15854:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15856:	18e9      	adds	r1, r5, r3
   15858:	0020      	movs	r0, r4
   1585a:	4b55      	ldr	r3, [pc, #340]	; (159b0 <_http_client_handle_entity+0x210>)
   1585c:	4798      	blx	r3
	return 0;
   1585e:	2000      	movs	r0, #0
}
   15860:	b006      	add	sp, #24
   15862:	bc04      	pop	{r2}
   15864:	4691      	mov	r9, r2
   15866:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   15868:	2200      	movs	r2, #0
   1586a:	ab03      	add	r3, sp, #12
   1586c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   1586e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15870:	2b00      	cmp	r3, #0
   15872:	d0ef      	beq.n	15854 <_http_client_handle_entity+0xb4>
   15874:	e7e2      	b.n	1583c <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   15876:	484f      	ldr	r0, [pc, #316]	; (159b4 <_http_client_handle_entity+0x214>)
   15878:	4b4f      	ldr	r3, [pc, #316]	; (159b8 <_http_client_handle_entity+0x218>)
   1587a:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   1587c:	2100      	movs	r1, #0
   1587e:	0020      	movs	r0, r4
   15880:	4b4a      	ldr	r3, [pc, #296]	; (159ac <_http_client_handle_entity+0x20c>)
   15882:	4798      	blx	r3
					return 0;
   15884:	2000      	movs	r0, #0
   15886:	e7eb      	b.n	15860 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   15888:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   1588a:	2300      	movs	r3, #0
   1588c:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   1588e:	26e0      	movs	r6, #224	; 0xe0
   15890:	e00a      	b.n	158a8 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   15892:	2341      	movs	r3, #65	; 0x41
   15894:	5ce3      	ldrb	r3, [r4, r3]
   15896:	079b      	lsls	r3, r3, #30
   15898:	d51b      	bpl.n	158d2 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   1589a:	1ca9      	adds	r1, r5, #2
   1589c:	0020      	movs	r0, r4
   1589e:	4b44      	ldr	r3, [pc, #272]	; (159b0 <_http_client_handle_entity+0x210>)
   158a0:	4798      	blx	r3
	} while(module->recved_size > 0);
   158a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   158a4:	2b00      	cmp	r3, #0
   158a6:	d073      	beq.n	15990 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   158a8:	59a3      	ldr	r3, [r4, r6]
   158aa:	2b00      	cmp	r3, #0
   158ac:	db30      	blt.n	15910 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   158ae:	d116      	bne.n	158de <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   158b0:	22d8      	movs	r2, #216	; 0xd8
   158b2:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   158b4:	320c      	adds	r2, #12
   158b6:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   158b8:	3ae3      	subs	r2, #227	; 0xe3
   158ba:	4669      	mov	r1, sp
   158bc:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   158be:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   158c0:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   158c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   158c4:	2b00      	cmp	r3, #0
   158c6:	d0e4      	beq.n	15892 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   158c8:	466a      	mov	r2, sp
   158ca:	2103      	movs	r1, #3
   158cc:	0020      	movs	r0, r4
   158ce:	4798      	blx	r3
   158d0:	e7df      	b.n	15892 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   158d2:	2100      	movs	r1, #0
   158d4:	0020      	movs	r0, r4
   158d6:	4b35      	ldr	r3, [pc, #212]	; (159ac <_http_client_handle_entity+0x20c>)
   158d8:	4798      	blx	r3
	return 0;
   158da:	2000      	movs	r0, #0
   158dc:	e7c0      	b.n	15860 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   158de:	42bb      	cmp	r3, r7
   158e0:	dcdf      	bgt.n	158a2 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   158e2:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   158e4:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   158e6:	2300      	movs	r3, #0
   158e8:	466a      	mov	r2, sp
   158ea:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   158ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   158ee:	2b00      	cmp	r3, #0
   158f0:	d002      	beq.n	158f8 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   158f2:	2103      	movs	r1, #3
   158f4:	0020      	movs	r0, r4
   158f6:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   158f8:	59a3      	ldr	r3, [r4, r6]
   158fa:	1c99      	adds	r1, r3, #2
   158fc:	1869      	adds	r1, r5, r1
   158fe:	0020      	movs	r0, r4
   15900:	4b2b      	ldr	r3, [pc, #172]	; (159b0 <_http_client_handle_entity+0x210>)
   15902:	4798      	blx	r3
				length = (int)module->recved_size;
   15904:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   15906:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   15908:	2301      	movs	r3, #1
   1590a:	425b      	negs	r3, r3
   1590c:	51a3      	str	r3, [r4, r6]
   1590e:	e7c8      	b.n	158a2 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   15910:	2300      	movs	r3, #0
   15912:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   15914:	2f00      	cmp	r7, #0
   15916:	dd04      	ble.n	15922 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   15918:	782b      	ldrb	r3, [r5, #0]
   1591a:	2b0a      	cmp	r3, #10
   1591c:	d11c      	bne.n	15958 <_http_client_handle_entity+0x1b8>
					buffer++;
   1591e:	3501      	adds	r5, #1
					length--;
   15920:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   15922:	59a3      	ldr	r3, [r4, r6]
   15924:	6e22      	ldr	r2, [r4, #96]	; 0x60
   15926:	4293      	cmp	r3, r2
   15928:	dc39      	bgt.n	1599e <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   1592a:	2f00      	cmp	r7, #0
   1592c:	d1b9      	bne.n	158a2 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   1592e:	2201      	movs	r2, #1
   15930:	4252      	negs	r2, r2
   15932:	23e0      	movs	r3, #224	; 0xe0
   15934:	50e2      	str	r2, [r4, r3]
   15936:	e7d0      	b.n	158da <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   15938:	001a      	movs	r2, r3
   1593a:	3a61      	subs	r2, #97	; 0x61
   1593c:	2a05      	cmp	r2, #5
   1593e:	d818      	bhi.n	15972 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   15940:	59a2      	ldr	r2, [r4, r6]
   15942:	0112      	lsls	r2, r2, #4
   15944:	18d3      	adds	r3, r2, r3
   15946:	3b61      	subs	r3, #97	; 0x61
   15948:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   1594a:	3501      	adds	r5, #1
   1594c:	3f01      	subs	r7, #1
   1594e:	2f00      	cmp	r7, #0
   15950:	d020      	beq.n	15994 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   15952:	782b      	ldrb	r3, [r5, #0]
   15954:	2b0a      	cmp	r3, #10
   15956:	d0e2      	beq.n	1591e <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   15958:	464a      	mov	r2, r9
   1595a:	2a00      	cmp	r2, #0
   1595c:	d1f5      	bne.n	1594a <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   1595e:	001a      	movs	r2, r3
   15960:	3a30      	subs	r2, #48	; 0x30
   15962:	2a09      	cmp	r2, #9
   15964:	d8e8      	bhi.n	15938 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   15966:	59a2      	ldr	r2, [r4, r6]
   15968:	0112      	lsls	r2, r2, #4
   1596a:	18d3      	adds	r3, r2, r3
   1596c:	3b30      	subs	r3, #48	; 0x30
   1596e:	51a3      	str	r3, [r4, r6]
   15970:	e7eb      	b.n	1594a <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   15972:	001a      	movs	r2, r3
   15974:	3a41      	subs	r2, #65	; 0x41
   15976:	2a05      	cmp	r2, #5
   15978:	d805      	bhi.n	15986 <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   1597a:	59a2      	ldr	r2, [r4, r6]
   1597c:	0112      	lsls	r2, r2, #4
   1597e:	18d3      	adds	r3, r2, r3
   15980:	3b41      	subs	r3, #65	; 0x41
   15982:	51a3      	str	r3, [r4, r6]
   15984:	e7e1      	b.n	1594a <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   15986:	3b3b      	subs	r3, #59	; 0x3b
   15988:	425a      	negs	r2, r3
   1598a:	415a      	adcs	r2, r3
   1598c:	4691      	mov	r9, r2
   1598e:	e7dc      	b.n	1594a <_http_client_handle_entity+0x1aa>
	return 0;
   15990:	2000      	movs	r0, #0
   15992:	e765      	b.n	15860 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   15994:	23e0      	movs	r3, #224	; 0xe0
   15996:	58e3      	ldr	r3, [r4, r3]
   15998:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1599a:	4293      	cmp	r3, r2
   1599c:	ddc7      	ble.n	1592e <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   1599e:	218b      	movs	r1, #139	; 0x8b
   159a0:	4249      	negs	r1, r1
   159a2:	0020      	movs	r0, r4
   159a4:	4b01      	ldr	r3, [pc, #4]	; (159ac <_http_client_handle_entity+0x20c>)
   159a6:	4798      	blx	r3
   159a8:	e797      	b.n	158da <_http_client_handle_entity+0x13a>
   159aa:	46c0      	nop			; (mov r8, r8)
   159ac:	00014d65 	.word	0x00014d65
   159b0:	000155bd 	.word	0x000155bd
   159b4:	0001cdd8 	.word	0x0001cdd8
   159b8:	00019289 	.word	0x00019289

000159bc <_http_client_handle_response>:
{
   159bc:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   159be:	23d8      	movs	r3, #216	; 0xd8
   159c0:	58c3      	ldr	r3, [r0, r3]
   159c2:	2b00      	cmp	r3, #0
   159c4:	d003      	beq.n	159ce <_http_client_handle_response+0x12>
   159c6:	2b01      	cmp	r3, #1
   159c8:	d004      	beq.n	159d4 <_http_client_handle_response+0x18>
	return 0;
   159ca:	2000      	movs	r0, #0
   159cc:	e001      	b.n	159d2 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   159ce:	4b03      	ldr	r3, [pc, #12]	; (159dc <_http_client_handle_response+0x20>)
   159d0:	4798      	blx	r3
}
   159d2:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   159d4:	4b02      	ldr	r3, [pc, #8]	; (159e0 <_http_client_handle_response+0x24>)
   159d6:	4798      	blx	r3
   159d8:	e7fb      	b.n	159d2 <_http_client_handle_response+0x16>
   159da:	46c0      	nop			; (mov r8, r8)
   159dc:	000155e1 	.word	0x000155e1
   159e0:	000157a1 	.word	0x000157a1

000159e4 <_http_client_recved_packet>:
{
   159e4:	b570      	push	{r4, r5, r6, lr}
   159e6:	0004      	movs	r4, r0
	module->recved_size += read_len;
   159e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   159ea:	469c      	mov	ip, r3
   159ec:	4461      	add	r1, ip
   159ee:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   159f0:	2358      	movs	r3, #88	; 0x58
   159f2:	5ac3      	ldrh	r3, [r0, r3]
   159f4:	2b00      	cmp	r3, #0
   159f6:	d105      	bne.n	15a04 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   159f8:	4d05      	ldr	r5, [pc, #20]	; (15a10 <_http_client_recved_packet+0x2c>)
   159fa:	0020      	movs	r0, r4
   159fc:	47a8      	blx	r5
   159fe:	2800      	cmp	r0, #0
   15a00:	d1fb      	bne.n	159fa <_http_client_recved_packet+0x16>
}
   15a02:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   15a04:	6c81      	ldr	r1, [r0, #72]	; 0x48
   15a06:	6d40      	ldr	r0, [r0, #84]	; 0x54
   15a08:	4b02      	ldr	r3, [pc, #8]	; (15a14 <_http_client_recved_packet+0x30>)
   15a0a:	4798      	blx	r3
   15a0c:	e7f4      	b.n	159f8 <_http_client_recved_packet+0x14>
   15a0e:	46c0      	nop			; (mov r8, r8)
   15a10:	000159bd 	.word	0x000159bd
   15a14:	00015d91 	.word	0x00015d91

00015a18 <http_client_socket_event_handler>:
{
   15a18:	b510      	push	{r4, lr}
   15a1a:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   15a1c:	0080      	lsls	r0, r0, #2
   15a1e:	4b65      	ldr	r3, [pc, #404]	; (15bb4 <http_client_socket_event_handler+0x19c>)
   15a20:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   15a22:	2c00      	cmp	r4, #0
   15a24:	d006      	beq.n	15a34 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   15a26:	2906      	cmp	r1, #6
   15a28:	d051      	beq.n	15ace <http_client_socket_event_handler+0xb6>
   15a2a:	2907      	cmp	r1, #7
   15a2c:	d100      	bne.n	15a30 <http_client_socket_event_handler+0x18>
   15a2e:	e08a      	b.n	15b46 <http_client_socket_event_handler+0x12e>
   15a30:	2905      	cmp	r1, #5
   15a32:	d001      	beq.n	15a38 <http_client_socket_event_handler+0x20>
}
   15a34:	b004      	add	sp, #16
   15a36:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   15a38:	2301      	movs	r3, #1
   15a3a:	56d3      	ldrsb	r3, [r2, r3]
   15a3c:	1e1a      	subs	r2, r3, #0
   15a3e:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   15a40:	db15      	blt.n	15a6e <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   15a42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15a44:	2b00      	cmp	r3, #0
   15a46:	d003      	beq.n	15a50 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   15a48:	aa01      	add	r2, sp, #4
   15a4a:	2100      	movs	r1, #0
   15a4c:	0020      	movs	r0, r4
   15a4e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   15a50:	2303      	movs	r3, #3
   15a52:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   15a54:	3355      	adds	r3, #85	; 0x55
   15a56:	5ae2      	ldrh	r2, [r4, r3]
   15a58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   15a5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   15a5c:	4b56      	ldr	r3, [pc, #344]	; (15bb8 <http_client_socket_event_handler+0x1a0>)
   15a5e:	4798      	blx	r3
    		_http_client_recv_packet(module);
   15a60:	0020      	movs	r0, r4
   15a62:	4b56      	ldr	r3, [pc, #344]	; (15bbc <http_client_socket_event_handler+0x1a4>)
   15a64:	4798      	blx	r3
			_http_client_request(module);
   15a66:	0020      	movs	r0, r4
   15a68:	4b55      	ldr	r3, [pc, #340]	; (15bc0 <http_client_socket_event_handler+0x1a8>)
   15a6a:	4798      	blx	r3
   15a6c:	e7e2      	b.n	15a34 <http_client_socket_event_handler+0x1c>
	switch (err) {
   15a6e:	330e      	adds	r3, #14
   15a70:	b2d9      	uxtb	r1, r3
   15a72:	290e      	cmp	r1, #14
   15a74:	d81e      	bhi.n	15ab4 <http_client_socket_event_handler+0x9c>
   15a76:	008b      	lsls	r3, r1, #2
   15a78:	4952      	ldr	r1, [pc, #328]	; (15bc4 <http_client_socket_event_handler+0x1ac>)
   15a7a:	58cb      	ldr	r3, [r1, r3]
   15a7c:	469f      	mov	pc, r3
			return -ENOENT;
   15a7e:	2102      	movs	r1, #2
   15a80:	4249      	negs	r1, r1
   15a82:	e01d      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   15a84:	2170      	movs	r1, #112	; 0x70
   15a86:	4249      	negs	r1, r1
   15a88:	e01a      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   15a8a:	210c      	movs	r1, #12
   15a8c:	4249      	negs	r1, r1
   15a8e:	e017      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   15a90:	2116      	movs	r1, #22
   15a92:	4249      	negs	r1, r1
   15a94:	e014      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   15a96:	210c      	movs	r1, #12
   15a98:	4249      	negs	r1, r1
   15a9a:	e011      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   15a9c:	2179      	movs	r1, #121	; 0x79
   15a9e:	4249      	negs	r1, r1
   15aa0:	e00e      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   15aa2:	2168      	movs	r1, #104	; 0x68
   15aa4:	4249      	negs	r1, r1
   15aa6:	e00b      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   15aa8:	210b      	movs	r1, #11
   15aaa:	4249      	negs	r1, r1
   15aac:	e008      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   15aae:	2110      	movs	r1, #16
   15ab0:	4249      	negs	r1, r1
   15ab2:	e005      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   15ab4:	2a00      	cmp	r2, #0
   15ab6:	db07      	blt.n	15ac8 <http_client_socket_event_handler+0xb0>
			return 0;
   15ab8:	2100      	movs	r1, #0
   15aba:	e001      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
			return -EIO;
   15abc:	2105      	movs	r1, #5
   15abe:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   15ac0:	0020      	movs	r0, r4
   15ac2:	4b41      	ldr	r3, [pc, #260]	; (15bc8 <http_client_socket_event_handler+0x1b0>)
   15ac4:	4798      	blx	r3
   15ac6:	e7b5      	b.n	15a34 <http_client_socket_event_handler+0x1c>
				return -EIO;
   15ac8:	2105      	movs	r1, #5
   15aca:	4249      	negs	r1, r1
   15acc:	e7f8      	b.n	15ac0 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   15ace:	2304      	movs	r3, #4
   15ad0:	5ed1      	ldrsh	r1, [r2, r3]
   15ad2:	2900      	cmp	r1, #0
   15ad4:	dd06      	ble.n	15ae4 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   15ad6:	0020      	movs	r0, r4
   15ad8:	4b3c      	ldr	r3, [pc, #240]	; (15bcc <http_client_socket_event_handler+0x1b4>)
   15ada:	4798      	blx	r3
		_http_client_recv_packet(module);
   15adc:	0020      	movs	r0, r4
   15ade:	4b37      	ldr	r3, [pc, #220]	; (15bbc <http_client_socket_event_handler+0x1a4>)
   15ae0:	4798      	blx	r3
		break;
   15ae2:	e7a7      	b.n	15a34 <http_client_socket_event_handler+0x1c>
	switch (err) {
   15ae4:	000b      	movs	r3, r1
   15ae6:	330e      	adds	r3, #14
   15ae8:	b29a      	uxth	r2, r3
   15aea:	2a0e      	cmp	r2, #14
   15aec:	d81e      	bhi.n	15b2c <http_client_socket_event_handler+0x114>
   15aee:	0093      	lsls	r3, r2, #2
   15af0:	4a37      	ldr	r2, [pc, #220]	; (15bd0 <http_client_socket_event_handler+0x1b8>)
   15af2:	58d3      	ldr	r3, [r2, r3]
   15af4:	469f      	mov	pc, r3
			return -ENOENT;
   15af6:	2102      	movs	r1, #2
   15af8:	4249      	negs	r1, r1
   15afa:	e01d      	b.n	15b38 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   15afc:	2170      	movs	r1, #112	; 0x70
   15afe:	4249      	negs	r1, r1
   15b00:	e01a      	b.n	15b38 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   15b02:	210c      	movs	r1, #12
   15b04:	4249      	negs	r1, r1
   15b06:	e017      	b.n	15b38 <http_client_socket_event_handler+0x120>
			return -EINVAL;
   15b08:	2116      	movs	r1, #22
   15b0a:	4249      	negs	r1, r1
   15b0c:	e014      	b.n	15b38 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   15b0e:	210c      	movs	r1, #12
   15b10:	4249      	negs	r1, r1
   15b12:	e011      	b.n	15b38 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   15b14:	2179      	movs	r1, #121	; 0x79
   15b16:	4249      	negs	r1, r1
   15b18:	e00e      	b.n	15b38 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   15b1a:	2168      	movs	r1, #104	; 0x68
   15b1c:	4249      	negs	r1, r1
   15b1e:	e00b      	b.n	15b38 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   15b20:	210b      	movs	r1, #11
   15b22:	4249      	negs	r1, r1
   15b24:	e008      	b.n	15b38 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   15b26:	2110      	movs	r1, #16
   15b28:	4249      	negs	r1, r1
   15b2a:	e005      	b.n	15b38 <http_client_socket_event_handler+0x120>
			if (err < 0) {
   15b2c:	2900      	cmp	r1, #0
   15b2e:	db07      	blt.n	15b40 <http_client_socket_event_handler+0x128>
			return 0;
   15b30:	2100      	movs	r1, #0
   15b32:	e001      	b.n	15b38 <http_client_socket_event_handler+0x120>
			return -EIO;
   15b34:	2105      	movs	r1, #5
   15b36:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   15b38:	0020      	movs	r0, r4
   15b3a:	4b23      	ldr	r3, [pc, #140]	; (15bc8 <http_client_socket_event_handler+0x1b0>)
   15b3c:	4798      	blx	r3
   15b3e:	e7cd      	b.n	15adc <http_client_socket_event_handler+0xc4>
				return -EIO;
   15b40:	2105      	movs	r1, #5
   15b42:	4249      	negs	r1, r1
   15b44:	e7f8      	b.n	15b38 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   15b46:	2300      	movs	r3, #0
   15b48:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   15b4a:	2b00      	cmp	r3, #0
   15b4c:	db08      	blt.n	15b60 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   15b4e:	0020      	movs	r0, r4
   15b50:	4b1b      	ldr	r3, [pc, #108]	; (15bc0 <http_client_socket_event_handler+0x1a8>)
   15b52:	4798      	blx	r3
		module->sending = 0;
   15b54:	2241      	movs	r2, #65	; 0x41
   15b56:	5ca3      	ldrb	r3, [r4, r2]
   15b58:	2101      	movs	r1, #1
   15b5a:	438b      	bics	r3, r1
   15b5c:	54a3      	strb	r3, [r4, r2]
    	break;
   15b5e:	e769      	b.n	15a34 <http_client_socket_event_handler+0x1c>
	switch (err) {
   15b60:	330e      	adds	r3, #14
   15b62:	b29a      	uxth	r2, r3
   15b64:	2a0d      	cmp	r2, #13
   15b66:	d81e      	bhi.n	15ba6 <http_client_socket_event_handler+0x18e>
   15b68:	0093      	lsls	r3, r2, #2
   15b6a:	4a1a      	ldr	r2, [pc, #104]	; (15bd4 <http_client_socket_event_handler+0x1bc>)
   15b6c:	58d3      	ldr	r3, [r2, r3]
   15b6e:	469f      	mov	pc, r3
			return -ENOENT;
   15b70:	2102      	movs	r1, #2
   15b72:	4249      	negs	r1, r1
   15b74:	e019      	b.n	15baa <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   15b76:	2170      	movs	r1, #112	; 0x70
   15b78:	4249      	negs	r1, r1
   15b7a:	e016      	b.n	15baa <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   15b7c:	210c      	movs	r1, #12
   15b7e:	4249      	negs	r1, r1
   15b80:	e013      	b.n	15baa <http_client_socket_event_handler+0x192>
			return -EINVAL;
   15b82:	2116      	movs	r1, #22
   15b84:	4249      	negs	r1, r1
   15b86:	e010      	b.n	15baa <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   15b88:	210c      	movs	r1, #12
   15b8a:	4249      	negs	r1, r1
   15b8c:	e00d      	b.n	15baa <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   15b8e:	2179      	movs	r1, #121	; 0x79
   15b90:	4249      	negs	r1, r1
   15b92:	e00a      	b.n	15baa <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   15b94:	2168      	movs	r1, #104	; 0x68
   15b96:	4249      	negs	r1, r1
   15b98:	e007      	b.n	15baa <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   15b9a:	210b      	movs	r1, #11
   15b9c:	4249      	negs	r1, r1
   15b9e:	e004      	b.n	15baa <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   15ba0:	2110      	movs	r1, #16
   15ba2:	4249      	negs	r1, r1
   15ba4:	e001      	b.n	15baa <http_client_socket_event_handler+0x192>
			return -EIO;
   15ba6:	2105      	movs	r1, #5
   15ba8:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   15baa:	0020      	movs	r0, r4
   15bac:	4b06      	ldr	r3, [pc, #24]	; (15bc8 <http_client_socket_event_handler+0x1b0>)
   15bae:	4798      	blx	r3
   15bb0:	e7d0      	b.n	15b54 <http_client_socket_event_handler+0x13c>
   15bb2:	46c0      	nop			; (mov r8, r8)
   15bb4:	20000988 	.word	0x20000988
   15bb8:	00015d65 	.word	0x00015d65
   15bbc:	00015585 	.word	0x00015585
   15bc0:	00014e7d 	.word	0x00014e7d
   15bc4:	0001cd18 	.word	0x0001cd18
   15bc8:	00014d65 	.word	0x00014d65
   15bcc:	000159e5 	.word	0x000159e5
   15bd0:	0001cd54 	.word	0x0001cd54
   15bd4:	0001cd90 	.word	0x0001cd90

00015bd8 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   15bd8:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   15bda:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   15bdc:	2200      	movs	r2, #0
   15bde:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   15be0:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   15be2:	9b00      	ldr	r3, [sp, #0]
   15be4:	60c3      	str	r3, [r0, #12]
}
   15be6:	4770      	bx	lr

00015be8 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   15be8:	b510      	push	{r4, lr}
   15bea:	0004      	movs	r4, r0
	if(writer->written > 0) {
   15bec:	6842      	ldr	r2, [r0, #4]
   15bee:	2a00      	cmp	r2, #0
   15bf0:	d100      	bne.n	15bf4 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   15bf2:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   15bf4:	6901      	ldr	r1, [r0, #16]
   15bf6:	68c0      	ldr	r0, [r0, #12]
   15bf8:	68a3      	ldr	r3, [r4, #8]
   15bfa:	4798      	blx	r3
		writer->written = 0;
   15bfc:	2300      	movs	r3, #0
   15bfe:	6063      	str	r3, [r4, #4]
}
   15c00:	e7f7      	b.n	15bf2 <stream_writer_send_remain+0xa>
	...

00015c04 <stream_writer_send_8>:
{
   15c04:	b570      	push	{r4, r5, r6, lr}
   15c06:	0004      	movs	r4, r0
   15c08:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   15c0a:	6803      	ldr	r3, [r0, #0]
   15c0c:	6842      	ldr	r2, [r0, #4]
   15c0e:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   15c10:	2b00      	cmp	r3, #0
   15c12:	dd05      	ble.n	15c20 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   15c14:	6922      	ldr	r2, [r4, #16]
   15c16:	6863      	ldr	r3, [r4, #4]
   15c18:	1c59      	adds	r1, r3, #1
   15c1a:	6061      	str	r1, [r4, #4]
   15c1c:	54d5      	strb	r5, [r2, r3]
}
   15c1e:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   15c20:	4b01      	ldr	r3, [pc, #4]	; (15c28 <stream_writer_send_8+0x24>)
   15c22:	4798      	blx	r3
   15c24:	e7f6      	b.n	15c14 <stream_writer_send_8+0x10>
   15c26:	46c0      	nop			; (mov r8, r8)
   15c28:	00015be9 	.word	0x00015be9

00015c2c <stream_writer_send_buffer>:
{
   15c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15c2e:	0006      	movs	r6, r0
   15c30:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   15c32:	2a00      	cmp	r2, #0
   15c34:	d008      	beq.n	15c48 <stream_writer_send_buffer+0x1c>
   15c36:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   15c38:	4f04      	ldr	r7, [pc, #16]	; (15c4c <stream_writer_send_buffer+0x20>)
   15c3a:	2100      	movs	r1, #0
   15c3c:	5661      	ldrsb	r1, [r4, r1]
   15c3e:	0030      	movs	r0, r6
   15c40:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   15c42:	3401      	adds	r4, #1
   15c44:	42a5      	cmp	r5, r4
   15c46:	d1f8      	bne.n	15c3a <stream_writer_send_buffer+0xe>
}
   15c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15c4a:	46c0      	nop			; (mov r8, r8)
   15c4c:	00015c05 	.word	0x00015c05

00015c50 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   15c50:	4a02      	ldr	r2, [pc, #8]	; (15c5c <sw_timer_tcc_callback+0xc>)
   15c52:	6813      	ldr	r3, [r2, #0]
   15c54:	3301      	adds	r3, #1
   15c56:	6013      	str	r3, [r2, #0]
}
   15c58:	4770      	bx	lr
   15c5a:	46c0      	nop			; (mov r8, r8)
   15c5c:	200009a4 	.word	0x200009a4

00015c60 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   15c60:	2364      	movs	r3, #100	; 0x64
   15c62:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   15c64:	2300      	movs	r3, #0
   15c66:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   15c68:	7043      	strb	r3, [r0, #1]
}
   15c6a:	4770      	bx	lr

00015c6c <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   15c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15c6e:	46c6      	mov	lr, r8
   15c70:	b500      	push	{lr}
   15c72:	b0ac      	sub	sp, #176	; 0xb0
   15c74:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   15c76:	466e      	mov	r6, sp
   15c78:	4b1d      	ldr	r3, [pc, #116]	; (15cf0 <sw_timer_init+0x84>)
   15c7a:	466a      	mov	r2, sp
   15c7c:	cb92      	ldmia	r3!, {r1, r4, r7}
   15c7e:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   15c80:	886b      	ldrh	r3, [r5, #2]
   15c82:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   15c84:	3014      	adds	r0, #20
   15c86:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   15c88:	782b      	ldrb	r3, [r5, #0]
   15c8a:	009b      	lsls	r3, r3, #2
   15c8c:	5999      	ldr	r1, [r3, r6]
   15c8e:	0017      	movs	r7, r2
   15c90:	0010      	movs	r0, r2
   15c92:	4b18      	ldr	r3, [pc, #96]	; (15cf4 <sw_timer_init+0x88>)
   15c94:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   15c96:	2000      	movs	r0, #0
   15c98:	4b17      	ldr	r3, [pc, #92]	; (15cf8 <sw_timer_init+0x8c>)
   15c9a:	4798      	blx	r3
   15c9c:	4b17      	ldr	r3, [pc, #92]	; (15cfc <sw_timer_init+0x90>)
   15c9e:	7a1b      	ldrb	r3, [r3, #8]
   15ca0:	b2db      	uxtb	r3, r3
   15ca2:	40d8      	lsrs	r0, r3
   15ca4:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   15ca6:	8869      	ldrh	r1, [r5, #2]
   15ca8:	20fa      	movs	r0, #250	; 0xfa
   15caa:	0200      	lsls	r0, r0, #8
   15cac:	4b14      	ldr	r3, [pc, #80]	; (15d00 <sw_timer_init+0x94>)
   15cae:	4798      	blx	r3
   15cb0:	0001      	movs	r1, r0
   15cb2:	4640      	mov	r0, r8
   15cb4:	4b13      	ldr	r3, [pc, #76]	; (15d04 <sw_timer_init+0x98>)
   15cb6:	4798      	blx	r3
   15cb8:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   15cba:	2305      	movs	r3, #5
   15cbc:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   15cbe:	782b      	ldrb	r3, [r5, #0]
   15cc0:	009b      	lsls	r3, r3, #2
   15cc2:	5999      	ldr	r1, [r3, r6]
   15cc4:	003a      	movs	r2, r7
   15cc6:	0020      	movs	r0, r4
   15cc8:	4b0f      	ldr	r3, [pc, #60]	; (15d08 <sw_timer_init+0x9c>)
   15cca:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15ccc:	786a      	ldrb	r2, [r5, #1]
   15cce:	3208      	adds	r2, #8
   15cd0:	b2d2      	uxtb	r2, r2
   15cd2:	490e      	ldr	r1, [pc, #56]	; (15d0c <sw_timer_init+0xa0>)
   15cd4:	0020      	movs	r0, r4
   15cd6:	4b0e      	ldr	r3, [pc, #56]	; (15d10 <sw_timer_init+0xa4>)
   15cd8:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15cda:	7869      	ldrb	r1, [r5, #1]
   15cdc:	3108      	adds	r1, #8
   15cde:	b2c9      	uxtb	r1, r1
   15ce0:	0020      	movs	r0, r4
   15ce2:	4b0c      	ldr	r3, [pc, #48]	; (15d14 <sw_timer_init+0xa8>)
   15ce4:	4798      	blx	r3
	
	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   15ce6:	b02c      	add	sp, #176	; 0xb0
   15ce8:	bc04      	pop	{r2}
   15cea:	4690      	mov	r8, r2
   15cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15cee:	46c0      	nop			; (mov r8, r8)
   15cf0:	0001cf00 	.word	0x0001cf00
   15cf4:	00010b45 	.word	0x00010b45
   15cf8:	000108a1 	.word	0x000108a1
   15cfc:	40000400 	.word	0x40000400
   15d00:	00017129 	.word	0x00017129
   15d04:	00017015 	.word	0x00017015
   15d08:	00010c91 	.word	0x00010c91
   15d0c:	00015c51 	.word	0x00015c51
   15d10:	0001109d 	.word	0x0001109d
   15d14:	000110b5 	.word	0x000110b5

00015d18 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   15d18:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   15d1a:	2102      	movs	r1, #2
   15d1c:	6893      	ldr	r3, [r2, #8]
   15d1e:	4219      	tst	r1, r3
   15d20:	d1fc      	bne.n	15d1c <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   15d22:	6813      	ldr	r3, [r2, #0]
   15d24:	2102      	movs	r1, #2
   15d26:	430b      	orrs	r3, r1
   15d28:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   15d2a:	4770      	bx	lr

00015d2c <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   15d2c:	b570      	push	{r4, r5, r6, lr}
   15d2e:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   15d30:	7805      	ldrb	r5, [r0, #0]
   15d32:	07e8      	lsls	r0, r5, #31
   15d34:	d502      	bpl.n	15d3c <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   15d36:	2001      	movs	r0, #1
   15d38:	4240      	negs	r0, r0
}
   15d3a:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   15d3c:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   15d3e:	0029      	movs	r1, r5
   15d40:	2002      	movs	r0, #2
   15d42:	4381      	bics	r1, r0
   15d44:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   15d46:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   15d48:	6d61      	ldr	r1, [r4, #84]	; 0x54
   15d4a:	0018      	movs	r0, r3
   15d4c:	4b04      	ldr	r3, [pc, #16]	; (15d60 <sw_timer_register_callback+0x34>)
   15d4e:	4798      	blx	r3
   15d50:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   15d52:	7823      	ldrb	r3, [r4, #0]
   15d54:	2201      	movs	r2, #1
   15d56:	4313      	orrs	r3, r2
   15d58:	7023      	strb	r3, [r4, #0]
			return index;
   15d5a:	2000      	movs	r0, #0
   15d5c:	e7ed      	b.n	15d3a <sw_timer_register_callback+0xe>
   15d5e:	46c0      	nop			; (mov r8, r8)
   15d60:	00017015 	.word	0x00017015

00015d64 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   15d64:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   15d66:	008b      	lsls	r3, r1, #2
   15d68:	185d      	adds	r5, r3, r1
   15d6a:	00ad      	lsls	r5, r5, #2
   15d6c:	5c29      	ldrb	r1, [r5, r0]
   15d6e:	2602      	movs	r6, #2
   15d70:	4331      	orrs	r1, r6
   15d72:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   15d74:	1944      	adds	r4, r0, r5
   15d76:	6d41      	ldr	r1, [r0, #84]	; 0x54
   15d78:	0010      	movs	r0, r2
   15d7a:	4b03      	ldr	r3, [pc, #12]	; (15d88 <sw_timer_enable_callback+0x24>)
   15d7c:	4798      	blx	r3
   15d7e:	4b03      	ldr	r3, [pc, #12]	; (15d8c <sw_timer_enable_callback+0x28>)
   15d80:	681b      	ldr	r3, [r3, #0]
   15d82:	18c0      	adds	r0, r0, r3
   15d84:	6120      	str	r0, [r4, #16]
}
   15d86:	bd70      	pop	{r4, r5, r6, pc}
   15d88:	00017015 	.word	0x00017015
   15d8c:	200009a4 	.word	0x200009a4

00015d90 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   15d90:	008b      	lsls	r3, r1, #2
   15d92:	1859      	adds	r1, r3, r1
   15d94:	0089      	lsls	r1, r1, #2
   15d96:	5c0b      	ldrb	r3, [r1, r0]
   15d98:	2202      	movs	r2, #2
   15d9a:	4393      	bics	r3, r2
   15d9c:	540b      	strb	r3, [r1, r0]
}
   15d9e:	4770      	bx	lr

00015da0 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   15da0:	b570      	push	{r4, r5, r6, lr}
   15da2:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   15da4:	7803      	ldrb	r3, [r0, #0]
   15da6:	07db      	lsls	r3, r3, #31
   15da8:	d507      	bpl.n	15dba <sw_timer_task+0x1a>
   15daa:	7803      	ldrb	r3, [r0, #0]
   15dac:	079b      	lsls	r3, r3, #30
   15dae:	d504      	bpl.n	15dba <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   15db0:	4b10      	ldr	r3, [pc, #64]	; (15df4 <sw_timer_task+0x54>)
   15db2:	681a      	ldr	r2, [r3, #0]
   15db4:	6903      	ldr	r3, [r0, #16]
   15db6:	1a9b      	subs	r3, r3, r2
   15db8:	d400      	bmi.n	15dbc <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   15dba:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   15dbc:	7803      	ldrb	r3, [r0, #0]
   15dbe:	075b      	lsls	r3, r3, #29
   15dc0:	d4fb      	bmi.n	15dba <sw_timer_task+0x1a>
				handler->busy = 1;
   15dc2:	7803      	ldrb	r3, [r0, #0]
   15dc4:	2104      	movs	r1, #4
   15dc6:	430b      	orrs	r3, r1
   15dc8:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   15dca:	68c3      	ldr	r3, [r0, #12]
   15dcc:	2b00      	cmp	r3, #0
   15dce:	d00b      	beq.n	15de8 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   15dd0:	18d2      	adds	r2, r2, r3
   15dd2:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   15dd4:	68a2      	ldr	r2, [r4, #8]
   15dd6:	2100      	movs	r1, #0
   15dd8:	0020      	movs	r0, r4
   15dda:	6865      	ldr	r5, [r4, #4]
   15ddc:	47a8      	blx	r5
				handler->busy = 0;
   15dde:	7823      	ldrb	r3, [r4, #0]
   15de0:	2204      	movs	r2, #4
   15de2:	4393      	bics	r3, r2
   15de4:	7023      	strb	r3, [r4, #0]
}
   15de6:	e7e8      	b.n	15dba <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   15de8:	7802      	ldrb	r2, [r0, #0]
   15dea:	2102      	movs	r1, #2
   15dec:	438a      	bics	r2, r1
   15dee:	7002      	strb	r2, [r0, #0]
   15df0:	e7f0      	b.n	15dd4 <sw_timer_task+0x34>
   15df2:	46c0      	nop			; (mov r8, r8)
   15df4:	200009a4 	.word	0x200009a4

00015df8 <clear_state>:
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
	down_state &= ~mask;
   15df8:	4a02      	ldr	r2, [pc, #8]	; (15e04 <clear_state+0xc>)
   15dfa:	7813      	ldrb	r3, [r2, #0]
   15dfc:	4383      	bics	r3, r0
   15dfe:	7013      	strb	r3, [r2, #0]
}
   15e00:	4770      	bx	lr
   15e02:	46c0      	nop			; (mov r8, r8)
   15e04:	200009f1 	.word	0x200009f1

00015e08 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   15e08:	4b02      	ldr	r3, [pc, #8]	; (15e14 <add_state+0xc>)
   15e0a:	781a      	ldrb	r2, [r3, #0]
   15e0c:	4310      	orrs	r0, r2
   15e0e:	7018      	strb	r0, [r3, #0]
}
   15e10:	4770      	bx	lr
   15e12:	46c0      	nop			; (mov r8, r8)
   15e14:	200009f1 	.word	0x200009f1

00015e18 <extint_detection_callback>:
* Checking button press SW0
*/
volatile bool isPressed = false;
void extint_detection_callback(void)
{
	isPressed = true;
   15e18:	2201      	movs	r2, #1
   15e1a:	4b01      	ldr	r3, [pc, #4]	; (15e20 <extint_detection_callback+0x8>)
   15e1c:	701a      	strb	r2, [r3, #0]
}
   15e1e:	4770      	bx	lr
   15e20:	20000c50 	.word	0x20000c50

00015e24 <SubscribeHandler>:
{
   15e24:	b570      	push	{r4, r5, r6, lr}
   15e26:	0004      	movs	r4, r0
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   15e28:	6843      	ldr	r3, [r0, #4]
   15e2a:	689a      	ldr	r2, [r3, #8]
   15e2c:	6859      	ldr	r1, [r3, #4]
   15e2e:	4832      	ldr	r0, [pc, #200]	; (15ef8 <SubscribeHandler+0xd4>)
   15e30:	4d32      	ldr	r5, [pc, #200]	; (15efc <SubscribeHandler+0xd8>)
   15e32:	47a8      	blx	r5
	printf(" >> ");
   15e34:	4832      	ldr	r0, [pc, #200]	; (15f00 <SubscribeHandler+0xdc>)
   15e36:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   15e38:	6823      	ldr	r3, [r4, #0]
   15e3a:	689a      	ldr	r2, [r3, #8]
   15e3c:	68d9      	ldr	r1, [r3, #12]
   15e3e:	4831      	ldr	r0, [pc, #196]	; (15f04 <SubscribeHandler+0xe0>)
   15e40:	47a8      	blx	r5
	if(strncmp((char *) msgData->topicName->lenstring.data, START_TOPIC	, msgData->message->payloadlen) == 0)
   15e42:	6823      	ldr	r3, [r4, #0]
   15e44:	68da      	ldr	r2, [r3, #12]
   15e46:	6863      	ldr	r3, [r4, #4]
   15e48:	6898      	ldr	r0, [r3, #8]
   15e4a:	492f      	ldr	r1, [pc, #188]	; (15f08 <SubscribeHandler+0xe4>)
   15e4c:	4b2f      	ldr	r3, [pc, #188]	; (15f0c <SubscribeHandler+0xe8>)
   15e4e:	4798      	blx	r3
   15e50:	2800      	cmp	r0, #0
   15e52:	d109      	bne.n	15e68 <SubscribeHandler+0x44>
		BUTTON_CNT++;
   15e54:	4a2e      	ldr	r2, [pc, #184]	; (15f10 <SubscribeHandler+0xec>)
   15e56:	6813      	ldr	r3, [r2, #0]
   15e58:	3301      	adds	r3, #1
   15e5a:	6013      	str	r3, [r2, #0]
		if(BUTTON_CNT == 1)
   15e5c:	2b01      	cmp	r3, #1
   15e5e:	d01f      	beq.n	15ea0 <SubscribeHandler+0x7c>
		if(BUTTON_CNT == 2)
   15e60:	4b2b      	ldr	r3, [pc, #172]	; (15f10 <SubscribeHandler+0xec>)
   15e62:	681b      	ldr	r3, [r3, #0]
   15e64:	2b02      	cmp	r3, #2
   15e66:	d022      	beq.n	15eae <SubscribeHandler+0x8a>
	if(strncmp((char *) msgData->topicName->lenstring.data, KNOB_TOPIC	, msgData->message->payloadlen) == 0)
   15e68:	6825      	ldr	r5, [r4, #0]
   15e6a:	6863      	ldr	r3, [r4, #4]
   15e6c:	6898      	ldr	r0, [r3, #8]
   15e6e:	68ea      	ldr	r2, [r5, #12]
   15e70:	4928      	ldr	r1, [pc, #160]	; (15f14 <SubscribeHandler+0xf0>)
   15e72:	4b26      	ldr	r3, [pc, #152]	; (15f0c <SubscribeHandler+0xe8>)
   15e74:	4798      	blx	r3
   15e76:	2800      	cmp	r0, #0
   15e78:	d022      	beq.n	15ec0 <SubscribeHandler+0x9c>
	if(strncmp((char *) msgData->topicName->lenstring.data, TIME_TOPIC	, msgData->message->payloadlen) == 0)
   15e7a:	6825      	ldr	r5, [r4, #0]
   15e7c:	6863      	ldr	r3, [r4, #4]
   15e7e:	6898      	ldr	r0, [r3, #8]
   15e80:	68ea      	ldr	r2, [r5, #12]
   15e82:	4925      	ldr	r1, [pc, #148]	; (15f18 <SubscribeHandler+0xf4>)
   15e84:	4b21      	ldr	r3, [pc, #132]	; (15f0c <SubscribeHandler+0xe8>)
   15e86:	4798      	blx	r3
   15e88:	2800      	cmp	r0, #0
   15e8a:	d023      	beq.n	15ed4 <SubscribeHandler+0xb0>
	if(strncmp((char *) msgData->topicName->lenstring.data, OTAFU_TOPIC	, msgData->message->payloadlen) == 0)
   15e8c:	6823      	ldr	r3, [r4, #0]
   15e8e:	68da      	ldr	r2, [r3, #12]
   15e90:	6863      	ldr	r3, [r4, #4]
   15e92:	6898      	ldr	r0, [r3, #8]
   15e94:	4921      	ldr	r1, [pc, #132]	; (15f1c <SubscribeHandler+0xf8>)
   15e96:	4b1d      	ldr	r3, [pc, #116]	; (15f0c <SubscribeHandler+0xe8>)
   15e98:	4798      	blx	r3
   15e9a:	2800      	cmp	r0, #0
   15e9c:	d024      	beq.n	15ee8 <SubscribeHandler+0xc4>
}
   15e9e:	bd70      	pop	{r4, r5, r6, pc}
			START_BUTTON = true;
   15ea0:	2201      	movs	r2, #1
   15ea2:	4b1f      	ldr	r3, [pc, #124]	; (15f20 <SubscribeHandler+0xfc>)
   15ea4:	701a      	strb	r2, [r3, #0]
			printf("\n Cooking started");
   15ea6:	481f      	ldr	r0, [pc, #124]	; (15f24 <SubscribeHandler+0x100>)
   15ea8:	4b14      	ldr	r3, [pc, #80]	; (15efc <SubscribeHandler+0xd8>)
   15eaa:	4798      	blx	r3
   15eac:	e7d8      	b.n	15e60 <SubscribeHandler+0x3c>
			START_BUTTON = false;
   15eae:	2300      	movs	r3, #0
   15eb0:	4a1b      	ldr	r2, [pc, #108]	; (15f20 <SubscribeHandler+0xfc>)
   15eb2:	7013      	strb	r3, [r2, #0]
			BUTTON_CNT = 0;
   15eb4:	4a16      	ldr	r2, [pc, #88]	; (15f10 <SubscribeHandler+0xec>)
   15eb6:	6013      	str	r3, [r2, #0]
			printf("\n Cooking stopped");
   15eb8:	481b      	ldr	r0, [pc, #108]	; (15f28 <SubscribeHandler+0x104>)
   15eba:	4b10      	ldr	r3, [pc, #64]	; (15efc <SubscribeHandler+0xd8>)
   15ebc:	4798      	blx	r3
   15ebe:	e7d3      	b.n	15e68 <SubscribeHandler+0x44>
		KNOB_VALUE = atoi(msgData->message->payload);
   15ec0:	68a8      	ldr	r0, [r5, #8]
   15ec2:	4b1a      	ldr	r3, [pc, #104]	; (15f2c <SubscribeHandler+0x108>)
   15ec4:	4798      	blx	r3
   15ec6:	0001      	movs	r1, r0
   15ec8:	4b19      	ldr	r3, [pc, #100]	; (15f30 <SubscribeHandler+0x10c>)
   15eca:	6018      	str	r0, [r3, #0]
		printf("\n Knob level set to:%d",KNOB_VALUE);
   15ecc:	4819      	ldr	r0, [pc, #100]	; (15f34 <SubscribeHandler+0x110>)
   15ece:	4b0b      	ldr	r3, [pc, #44]	; (15efc <SubscribeHandler+0xd8>)
   15ed0:	4798      	blx	r3
   15ed2:	e7d2      	b.n	15e7a <SubscribeHandler+0x56>
		TIME_VALUE = atoi(msgData->message->payload);
   15ed4:	68a8      	ldr	r0, [r5, #8]
   15ed6:	4b15      	ldr	r3, [pc, #84]	; (15f2c <SubscribeHandler+0x108>)
   15ed8:	4798      	blx	r3
   15eda:	0001      	movs	r1, r0
   15edc:	4b16      	ldr	r3, [pc, #88]	; (15f38 <SubscribeHandler+0x114>)
   15ede:	6018      	str	r0, [r3, #0]
		printf("\n Time level set to:%d",TIME_VALUE);
   15ee0:	4816      	ldr	r0, [pc, #88]	; (15f3c <SubscribeHandler+0x118>)
   15ee2:	4b06      	ldr	r3, [pc, #24]	; (15efc <SubscribeHandler+0xd8>)
   15ee4:	4798      	blx	r3
   15ee6:	e7d1      	b.n	15e8c <SubscribeHandler+0x68>
		OTAFU_REQ = true;
   15ee8:	2201      	movs	r2, #1
   15eea:	4b15      	ldr	r3, [pc, #84]	; (15f40 <SubscribeHandler+0x11c>)
   15eec:	701a      	strb	r2, [r3, #0]
		printf("\nOTAFU Requested");
   15eee:	4815      	ldr	r0, [pc, #84]	; (15f44 <SubscribeHandler+0x120>)
   15ef0:	4b02      	ldr	r3, [pc, #8]	; (15efc <SubscribeHandler+0xd8>)
   15ef2:	4798      	blx	r3
	return;
   15ef4:	e7d3      	b.n	15e9e <SubscribeHandler+0x7a>
   15ef6:	46c0      	nop			; (mov r8, r8)
   15ef8:	0001cf20 	.word	0x0001cf20
   15efc:	0001916d 	.word	0x0001916d
   15f00:	0001cf28 	.word	0x0001cf28
   15f04:	0001cf30 	.word	0x0001cf30
   15f08:	0001cf38 	.word	0x0001cf38
   15f0c:	000195d5 	.word	0x000195d5
   15f10:	200009a8 	.word	0x200009a8
   15f14:	0001cf68 	.word	0x0001cf68
   15f18:	0001cf88 	.word	0x0001cf88
   15f1c:	0001cfa8 	.word	0x0001cfa8
   15f20:	200009b1 	.word	0x200009b1
   15f24:	0001cf40 	.word	0x0001cf40
   15f28:	0001cf54 	.word	0x0001cf54
   15f2c:	00018f59 	.word	0x00018f59
   15f30:	200009ac 	.word	0x200009ac
   15f34:	0001cf70 	.word	0x0001cf70
   15f38:	200009b4 	.word	0x200009b4
   15f3c:	0001cf90 	.word	0x0001cf90
   15f40:	200009b0 	.word	0x200009b0
   15f44:	0001cfb0 	.word	0x0001cfb0

00015f48 <resolve_cb>:
{
   15f48:	b570      	push	{r4, r5, r6, lr}
   15f4a:	b082      	sub	sp, #8
   15f4c:	0005      	movs	r5, r0
   15f4e:	000c      	movs	r4, r1
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   15f50:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   15f52:	21ff      	movs	r1, #255	; 0xff
   15f54:	400b      	ands	r3, r1
   15f56:	000a      	movs	r2, r1
   15f58:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   15f5a:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   15f5c:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   15f5e:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   15f60:	4001      	ands	r1, r0
   15f62:	9100      	str	r1, [sp, #0]
   15f64:	0029      	movs	r1, r5
   15f66:	4804      	ldr	r0, [pc, #16]	; (15f78 <resolve_cb+0x30>)
   15f68:	4e04      	ldr	r6, [pc, #16]	; (15f7c <resolve_cb+0x34>)
   15f6a:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   15f6c:	0021      	movs	r1, r4
   15f6e:	0028      	movs	r0, r5
   15f70:	4b03      	ldr	r3, [pc, #12]	; (15f80 <resolve_cb+0x38>)
   15f72:	4798      	blx	r3
}
   15f74:	b002      	add	sp, #8
   15f76:	bd70      	pop	{r4, r5, r6, pc}
   15f78:	0001d938 	.word	0x0001d938
   15f7c:	0001916d 	.word	0x0001916d
   15f80:	00014ded 	.word	0x00014ded

00015f84 <socket_cb>:
{
   15f84:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   15f86:	4b01      	ldr	r3, [pc, #4]	; (15f8c <socket_cb+0x8>)
   15f88:	4798      	blx	r3
}
   15f8a:	bd10      	pop	{r4, pc}
   15f8c:	00015a19 	.word	0x00015a19

00015f90 <start_download>:
{
   15f90:	b510      	push	{r4, lr}
   15f92:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   15f94:	4b13      	ldr	r3, [pc, #76]	; (15fe4 <start_download+0x54>)
   15f96:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   15f98:	07da      	lsls	r2, r3, #31
   15f9a:	d512      	bpl.n	15fc2 <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
   15f9c:	079a      	lsls	r2, r3, #30
   15f9e:	d514      	bpl.n	15fca <start_download+0x3a>
	if (is_state_set(GET_REQUESTED)) {
   15fa0:	075a      	lsls	r2, r3, #29
   15fa2:	d416      	bmi.n	15fd2 <start_download+0x42>
	if (is_state_set(DOWNLOADING)) {
   15fa4:	071b      	lsls	r3, r3, #28
   15fa6:	d418      	bmi.n	15fda <start_download+0x4a>
	printf("start_download: sending HTTP request...\r\n");
   15fa8:	480f      	ldr	r0, [pc, #60]	; (15fe8 <start_download+0x58>)
   15faa:	4b10      	ldr	r3, [pc, #64]	; (15fec <start_download+0x5c>)
   15fac:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, desired_url, HTTP_METHOD_GET, NULL, NULL);
   15fae:	4b10      	ldr	r3, [pc, #64]	; (15ff0 <start_download+0x60>)
   15fb0:	6819      	ldr	r1, [r3, #0]
   15fb2:	2300      	movs	r3, #0
   15fb4:	9300      	str	r3, [sp, #0]
   15fb6:	2201      	movs	r2, #1
   15fb8:	480e      	ldr	r0, [pc, #56]	; (15ff4 <start_download+0x64>)
   15fba:	4c0f      	ldr	r4, [pc, #60]	; (15ff8 <start_download+0x68>)
   15fbc:	47a0      	blx	r4
}
   15fbe:	b002      	add	sp, #8
   15fc0:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
   15fc2:	480e      	ldr	r0, [pc, #56]	; (15ffc <start_download+0x6c>)
   15fc4:	4b09      	ldr	r3, [pc, #36]	; (15fec <start_download+0x5c>)
   15fc6:	4798      	blx	r3
		return;
   15fc8:	e7f9      	b.n	15fbe <start_download+0x2e>
		printf("start_download: Wi-Fi is not connected.\r\n");
   15fca:	480d      	ldr	r0, [pc, #52]	; (16000 <start_download+0x70>)
   15fcc:	4b07      	ldr	r3, [pc, #28]	; (15fec <start_download+0x5c>)
   15fce:	4798      	blx	r3
		return;
   15fd0:	e7f5      	b.n	15fbe <start_download+0x2e>
		printf("start_download: request is sent already.\r\n");
   15fd2:	480c      	ldr	r0, [pc, #48]	; (16004 <start_download+0x74>)
   15fd4:	4b05      	ldr	r3, [pc, #20]	; (15fec <start_download+0x5c>)
   15fd6:	4798      	blx	r3
		return;
   15fd8:	e7f1      	b.n	15fbe <start_download+0x2e>
		printf("start_download: running download already.\r\n");
   15fda:	480b      	ldr	r0, [pc, #44]	; (16008 <start_download+0x78>)
   15fdc:	4b03      	ldr	r3, [pc, #12]	; (15fec <start_download+0x5c>)
   15fde:	4798      	blx	r3
		return;
   15fe0:	e7ed      	b.n	15fbe <start_download+0x2e>
   15fe2:	46c0      	nop			; (mov r8, r8)
   15fe4:	200009f1 	.word	0x200009f1
   15fe8:	0001da14 	.word	0x0001da14
   15fec:	00019289 	.word	0x00019289
   15ff0:	200009ec 	.word	0x200009ec
   15ff4:	20001374 	.word	0x20001374
   15ff8:	0001531d 	.word	0x0001531d
   15ffc:	0001d968 	.word	0x0001d968
   16000:	0001d990 	.word	0x0001d990
   16004:	0001d9bc 	.word	0x0001d9bc
   16008:	0001d9e8 	.word	0x0001d9e8

0001600c <socket_resolve_handler>:
{
   1600c:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   1600e:	4b01      	ldr	r3, [pc, #4]	; (16014 <socket_resolve_handler+0x8>)
   16010:	4798      	blx	r3
}
   16012:	bd10      	pop	{r4, pc}
   16014:	00013e59 	.word	0x00013e59

00016018 <socket_event_handler>:
{
   16018:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   1601a:	4b01      	ldr	r3, [pc, #4]	; (16020 <socket_event_handler+0x8>)
   1601c:	4798      	blx	r3
}
   1601e:	bd10      	pop	{r4, pc}
   16020:	00013e4d 	.word	0x00013e4d

00016024 <wifi_cb>:
{
   16024:	b510      	push	{r4, lr}
   16026:	b082      	sub	sp, #8
	switch (u8MsgType) {
   16028:	282c      	cmp	r0, #44	; 0x2c
   1602a:	d003      	beq.n	16034 <wifi_cb+0x10>
   1602c:	2832      	cmp	r0, #50	; 0x32
   1602e:	d032      	beq.n	16096 <wifi_cb+0x72>
}
   16030:	b002      	add	sp, #8
   16032:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16034:	780b      	ldrb	r3, [r1, #0]
   16036:	2b01      	cmp	r3, #1
   16038:	d01c      	beq.n	16074 <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   1603a:	2b00      	cmp	r3, #0
   1603c:	d1f8      	bne.n	16030 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   1603e:	4824      	ldr	r0, [pc, #144]	; (160d0 <wifi_cb+0xac>)
   16040:	4b24      	ldr	r3, [pc, #144]	; (160d4 <wifi_cb+0xb0>)
   16042:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
   16044:	2002      	movs	r0, #2
   16046:	4b24      	ldr	r3, [pc, #144]	; (160d8 <wifi_cb+0xb4>)
   16048:	4798      	blx	r3
	return ((down_state & mask) != 0);
   1604a:	4b24      	ldr	r3, [pc, #144]	; (160dc <wifi_cb+0xb8>)
   1604c:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   1604e:	071b      	lsls	r3, r3, #28
   16050:	d416      	bmi.n	16080 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
   16052:	4b22      	ldr	r3, [pc, #136]	; (160dc <wifi_cb+0xb8>)
   16054:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   16056:	075b      	lsls	r3, r3, #29
   16058:	d419      	bmi.n	1608e <wifi_cb+0x6a>
			mqtt_disconnect(&mqtt_inst, 1);
   1605a:	2101      	movs	r1, #1
   1605c:	4820      	ldr	r0, [pc, #128]	; (160e0 <wifi_cb+0xbc>)
   1605e:	4b21      	ldr	r3, [pc, #132]	; (160e4 <wifi_cb+0xc0>)
   16060:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   16062:	23ff      	movs	r3, #255	; 0xff
   16064:	9300      	str	r3, [sp, #0]
   16066:	4b20      	ldr	r3, [pc, #128]	; (160e8 <wifi_cb+0xc4>)
   16068:	2202      	movs	r2, #2
   1606a:	2112      	movs	r1, #18
   1606c:	481f      	ldr	r0, [pc, #124]	; (160ec <wifi_cb+0xc8>)
   1606e:	4c20      	ldr	r4, [pc, #128]	; (160f0 <wifi_cb+0xcc>)
   16070:	47a0      	blx	r4
   16072:	e7dd      	b.n	16030 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16074:	481f      	ldr	r0, [pc, #124]	; (160f4 <wifi_cb+0xd0>)
   16076:	4b17      	ldr	r3, [pc, #92]	; (160d4 <wifi_cb+0xb0>)
   16078:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   1607a:	4b1f      	ldr	r3, [pc, #124]	; (160f8 <wifi_cb+0xd4>)
   1607c:	4798      	blx	r3
   1607e:	e7d7      	b.n	16030 <wifi_cb+0xc>
				f_close(&file_object);
   16080:	481e      	ldr	r0, [pc, #120]	; (160fc <wifi_cb+0xd8>)
   16082:	4b1f      	ldr	r3, [pc, #124]	; (16100 <wifi_cb+0xdc>)
   16084:	4798      	blx	r3
				clear_state(DOWNLOADING);
   16086:	2008      	movs	r0, #8
   16088:	4b13      	ldr	r3, [pc, #76]	; (160d8 <wifi_cb+0xb4>)
   1608a:	4798      	blx	r3
   1608c:	e7e1      	b.n	16052 <wifi_cb+0x2e>
				clear_state(GET_REQUESTED);
   1608e:	2004      	movs	r0, #4
   16090:	4b11      	ldr	r3, [pc, #68]	; (160d8 <wifi_cb+0xb4>)
   16092:	4798      	blx	r3
   16094:	e7e1      	b.n	1605a <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   16096:	788b      	ldrb	r3, [r1, #2]
   16098:	784a      	ldrb	r2, [r1, #1]
   1609a:	7808      	ldrb	r0, [r1, #0]
   1609c:	78c9      	ldrb	r1, [r1, #3]
   1609e:	9100      	str	r1, [sp, #0]
   160a0:	0001      	movs	r1, r0
   160a2:	4818      	ldr	r0, [pc, #96]	; (16104 <wifi_cb+0xe0>)
   160a4:	4c18      	ldr	r4, [pc, #96]	; (16108 <wifi_cb+0xe4>)
   160a6:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   160a8:	2002      	movs	r0, #2
   160aa:	4b18      	ldr	r3, [pc, #96]	; (1610c <wifi_cb+0xe8>)
   160ac:	4798      	blx	r3
		if(do_download_flag == 1)
   160ae:	4b18      	ldr	r3, [pc, #96]	; (16110 <wifi_cb+0xec>)
   160b0:	781b      	ldrb	r3, [r3, #0]
   160b2:	2b01      	cmp	r3, #1
   160b4:	d009      	beq.n	160ca <wifi_cb+0xa6>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   160b6:	4917      	ldr	r1, [pc, #92]	; (16114 <wifi_cb+0xf0>)
   160b8:	4809      	ldr	r0, [pc, #36]	; (160e0 <wifi_cb+0xbc>)
   160ba:	4b17      	ldr	r3, [pc, #92]	; (16118 <wifi_cb+0xf4>)
   160bc:	4798      	blx	r3
   160be:	2800      	cmp	r0, #0
   160c0:	d0b6      	beq.n	16030 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
   160c2:	4816      	ldr	r0, [pc, #88]	; (1611c <wifi_cb+0xf8>)
   160c4:	4b03      	ldr	r3, [pc, #12]	; (160d4 <wifi_cb+0xb0>)
   160c6:	4798      	blx	r3
}
   160c8:	e7b2      	b.n	16030 <wifi_cb+0xc>
			start_download();
   160ca:	4b15      	ldr	r3, [pc, #84]	; (16120 <wifi_cb+0xfc>)
   160cc:	4798      	blx	r3
   160ce:	e7af      	b.n	16030 <wifi_cb+0xc>
   160d0:	0001dbc0 	.word	0x0001dbc0
   160d4:	00019289 	.word	0x00019289
   160d8:	00015df9 	.word	0x00015df9
   160dc:	200009f1 	.word	0x200009f1
   160e0:	20000c54 	.word	0x20000c54
   160e4:	00013f29 	.word	0x00013f29
   160e8:	0001dbe0 	.word	0x0001dbe0
   160ec:	0001dbf0 	.word	0x0001dbf0
   160f0:	0000cb91 	.word	0x0000cb91
   160f4:	0001dba0 	.word	0x0001dba0
   160f8:	0000cbad 	.word	0x0000cbad
   160fc:	20000c24 	.word	0x20000c24
   16100:	000130ed 	.word	0x000130ed
   16104:	0001dc04 	.word	0x0001dc04
   16108:	0001916d 	.word	0x0001916d
   1610c:	00015e09 	.word	0x00015e09
   16110:	200009f0 	.word	0x200009f0
   16114:	0001d408 	.word	0x0001d408
   16118:	00013e65 	.word	0x00013e65
   1611c:	0001dc2c 	.word	0x0001dc2c
   16120:	00015f91 	.word	0x00015f91

00016124 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   16124:	b570      	push	{r4, r5, r6, lr}
   16126:	b082      	sub	sp, #8
   16128:	0005      	movs	r5, r0
   1612a:	000e      	movs	r6, r1
	uint16_t temp = 0;
   1612c:	2200      	movs	r2, #0
   1612e:	466b      	mov	r3, sp
   16130:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
   16132:	4c06      	ldr	r4, [pc, #24]	; (1614c <usart_serial_getchar+0x28>)
   16134:	466b      	mov	r3, sp
   16136:	1d99      	adds	r1, r3, #6
   16138:	0028      	movs	r0, r5
   1613a:	47a0      	blx	r4
   1613c:	2800      	cmp	r0, #0
   1613e:	d1f9      	bne.n	16134 <usart_serial_getchar+0x10>

	*c = temp;
   16140:	466b      	mov	r3, sp
   16142:	3306      	adds	r3, #6
   16144:	881b      	ldrh	r3, [r3, #0]
   16146:	7033      	strb	r3, [r6, #0]
}
   16148:	b002      	add	sp, #8
   1614a:	bd70      	pop	{r4, r5, r6, pc}
   1614c:	0001016d 	.word	0x0001016d

00016150 <usart_serial_putchar>:
{
   16150:	b570      	push	{r4, r5, r6, lr}
   16152:	0005      	movs	r5, r0
	while(STATUS_OK != usart_write_wait(module, c));
   16154:	b28c      	uxth	r4, r1
   16156:	4e03      	ldr	r6, [pc, #12]	; (16164 <usart_serial_putchar+0x14>)
   16158:	0021      	movs	r1, r4
   1615a:	0028      	movs	r0, r5
   1615c:	47b0      	blx	r6
   1615e:	2800      	cmp	r0, #0
   16160:	d1fa      	bne.n	16158 <usart_serial_putchar+0x8>
}
   16162:	bd70      	pop	{r4, r5, r6, pc}
   16164:	00010141 	.word	0x00010141

00016168 <mqtt_callback>:
{
   16168:	b570      	push	{r4, r5, r6, lr}
   1616a:	b086      	sub	sp, #24
   1616c:	0004      	movs	r4, r0
	switch (type) {
   1616e:	2901      	cmp	r1, #1
   16170:	d02c      	beq.n	161cc <mqtt_callback+0x64>
   16172:	2905      	cmp	r1, #5
   16174:	d04f      	beq.n	16216 <mqtt_callback+0xae>
   16176:	2900      	cmp	r1, #0
   16178:	d001      	beq.n	1617e <mqtt_callback+0x16>
}
   1617a:	b006      	add	sp, #24
   1617c:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
   1617e:	6813      	ldr	r3, [r2, #0]
   16180:	2b00      	cmp	r3, #0
   16182:	db19      	blt.n	161b8 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
   16184:	4829      	ldr	r0, [pc, #164]	; (1622c <mqtt_callback+0xc4>)
   16186:	4b2a      	ldr	r3, [pc, #168]	; (16230 <mqtt_callback+0xc8>)
   16188:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   1618a:	4a2a      	ldr	r2, [pc, #168]	; (16234 <mqtt_callback+0xcc>)
   1618c:	2300      	movs	r3, #0
   1618e:	9305      	str	r3, [sp, #20]
   16190:	9304      	str	r3, [sp, #16]
   16192:	9303      	str	r3, [sp, #12]
   16194:	9302      	str	r3, [sp, #8]
   16196:	9301      	str	r3, [sp, #4]
   16198:	9200      	str	r2, [sp, #0]
   1619a:	4b27      	ldr	r3, [pc, #156]	; (16238 <mqtt_callback+0xd0>)
   1619c:	2101      	movs	r1, #1
   1619e:	0020      	movs	r0, r4
   161a0:	4c26      	ldr	r4, [pc, #152]	; (1623c <mqtt_callback+0xd4>)
   161a2:	47a0      	blx	r4
   161a4:	2800      	cmp	r0, #0
   161a6:	d003      	beq.n	161b0 <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
   161a8:	4825      	ldr	r0, [pc, #148]	; (16240 <mqtt_callback+0xd8>)
   161aa:	4b26      	ldr	r3, [pc, #152]	; (16244 <mqtt_callback+0xdc>)
   161ac:	4798      	blx	r3
   161ae:	e7e4      	b.n	1617a <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
   161b0:	4825      	ldr	r0, [pc, #148]	; (16248 <mqtt_callback+0xe0>)
   161b2:	4b24      	ldr	r3, [pc, #144]	; (16244 <mqtt_callback+0xdc>)
   161b4:	4798      	blx	r3
   161b6:	e7e0      	b.n	1617a <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   161b8:	4d24      	ldr	r5, [pc, #144]	; (1624c <mqtt_callback+0xe4>)
   161ba:	0029      	movs	r1, r5
   161bc:	4824      	ldr	r0, [pc, #144]	; (16250 <mqtt_callback+0xe8>)
   161be:	4b1c      	ldr	r3, [pc, #112]	; (16230 <mqtt_callback+0xc8>)
   161c0:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   161c2:	0029      	movs	r1, r5
   161c4:	0020      	movs	r0, r4
   161c6:	4b23      	ldr	r3, [pc, #140]	; (16254 <mqtt_callback+0xec>)
   161c8:	4798      	blx	r3
   161ca:	e7d6      	b.n	1617a <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   161cc:	7811      	ldrb	r1, [r2, #0]
   161ce:	2900      	cmp	r1, #0
   161d0:	d11d      	bne.n	1620e <mqtt_callback+0xa6>
			mqtt_subscribe(module_inst, TEMP_TOPIC, 2, SubscribeHandler);
   161d2:	4e21      	ldr	r6, [pc, #132]	; (16258 <mqtt_callback+0xf0>)
   161d4:	0033      	movs	r3, r6
   161d6:	2202      	movs	r2, #2
   161d8:	4920      	ldr	r1, [pc, #128]	; (1625c <mqtt_callback+0xf4>)
   161da:	4d21      	ldr	r5, [pc, #132]	; (16260 <mqtt_callback+0xf8>)
   161dc:	47a8      	blx	r5
			mqtt_subscribe(module_inst, START_TOPIC, 2, SubscribeHandler);
   161de:	0033      	movs	r3, r6
   161e0:	2202      	movs	r2, #2
   161e2:	4920      	ldr	r1, [pc, #128]	; (16264 <mqtt_callback+0xfc>)
   161e4:	0020      	movs	r0, r4
   161e6:	47a8      	blx	r5
			mqtt_subscribe(module_inst, KNOB_TOPIC, 2, SubscribeHandler);
   161e8:	0033      	movs	r3, r6
   161ea:	2202      	movs	r2, #2
   161ec:	491e      	ldr	r1, [pc, #120]	; (16268 <mqtt_callback+0x100>)
   161ee:	0020      	movs	r0, r4
   161f0:	47a8      	blx	r5
			mqtt_subscribe(module_inst, TIME_TOPIC, 2, SubscribeHandler);
   161f2:	0033      	movs	r3, r6
   161f4:	2202      	movs	r2, #2
   161f6:	491d      	ldr	r1, [pc, #116]	; (1626c <mqtt_callback+0x104>)
   161f8:	0020      	movs	r0, r4
   161fa:	47a8      	blx	r5
			mqtt_subscribe(module_inst, OTAFU_TOPIC, 2, SubscribeHandler);
   161fc:	0033      	movs	r3, r6
   161fe:	2202      	movs	r2, #2
   16200:	491b      	ldr	r1, [pc, #108]	; (16270 <mqtt_callback+0x108>)
   16202:	0020      	movs	r0, r4
   16204:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
   16206:	481b      	ldr	r0, [pc, #108]	; (16274 <mqtt_callback+0x10c>)
   16208:	4b0e      	ldr	r3, [pc, #56]	; (16244 <mqtt_callback+0xdc>)
   1620a:	4798      	blx	r3
   1620c:	e7b5      	b.n	1617a <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   1620e:	481a      	ldr	r0, [pc, #104]	; (16278 <mqtt_callback+0x110>)
   16210:	4b07      	ldr	r3, [pc, #28]	; (16230 <mqtt_callback+0xc8>)
   16212:	4798      	blx	r3
   16214:	e7b1      	b.n	1617a <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
   16216:	4819      	ldr	r0, [pc, #100]	; (1627c <mqtt_callback+0x114>)
   16218:	4b0a      	ldr	r3, [pc, #40]	; (16244 <mqtt_callback+0xdc>)
   1621a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   1621c:	4918      	ldr	r1, [pc, #96]	; (16280 <mqtt_callback+0x118>)
   1621e:	2231      	movs	r2, #49	; 0x31
   16220:	5c8b      	ldrb	r3, [r1, r2]
   16222:	2002      	movs	r0, #2
   16224:	4383      	bics	r3, r0
   16226:	548b      	strb	r3, [r1, r2]
}
   16228:	e7a7      	b.n	1617a <mqtt_callback+0x12>
   1622a:	46c0      	nop			; (mov r8, r8)
   1622c:	0001d41c 	.word	0x0001d41c
   16230:	0001916d 	.word	0x0001916d
   16234:	0001d448 	.word	0x0001d448
   16238:	0001d438 	.word	0x0001d438
   1623c:	00013e91 	.word	0x00013e91
   16240:	0001d454 	.word	0x0001d454
   16244:	00019289 	.word	0x00019289
   16248:	0001d47c 	.word	0x0001d47c
   1624c:	0001d408 	.word	0x0001d408
   16250:	0001d498 	.word	0x0001d498
   16254:	00013e65 	.word	0x00013e65
   16258:	00015e25 	.word	0x00015e25
   1625c:	0001ccdc 	.word	0x0001ccdc
   16260:	00013f95 	.word	0x00013f95
   16264:	0001cf38 	.word	0x0001cf38
   16268:	0001cf68 	.word	0x0001cf68
   1626c:	0001cf88 	.word	0x0001cf88
   16270:	0001cfa8 	.word	0x0001cfa8
   16274:	0001d4d0 	.word	0x0001d4d0
   16278:	0001d4e0 	.word	0x0001d4e0
   1627c:	0001d514 	.word	0x0001d514
   16280:	200009b8 	.word	0x200009b8

00016284 <rename_to_unique>:
{
   16284:	b5f0      	push	{r4, r5, r6, r7, lr}
   16286:	46de      	mov	lr, fp
   16288:	b500      	push	{lr}
   1628a:	b0c8      	sub	sp, #288	; 0x120
   1628c:	0007      	movs	r7, r0
   1628e:	000e      	movs	r6, r1
   16290:	9101      	str	r1, [sp, #4]
   16292:	9203      	str	r2, [sp, #12]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   16294:	22fb      	movs	r2, #251	; 0xfb
   16296:	2100      	movs	r1, #0
   16298:	a809      	add	r0, sp, #36	; 0x24
   1629a:	4d52      	ldr	r5, [pc, #328]	; (163e4 <rename_to_unique+0x160>)
   1629c:	47a8      	blx	r5
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   1629e:	2209      	movs	r2, #9
   162a0:	2100      	movs	r1, #0
   162a2:	a806      	add	r0, sp, #24
   162a4:	47a8      	blx	r5
	char numbering[NUMBRING_MAX + 1] = {0};
   162a6:	2300      	movs	r3, #0
   162a8:	9305      	str	r3, [sp, #20]
	if (file_path_name == NULL) {
   162aa:	2e00      	cmp	r6, #0
   162ac:	d100      	bne.n	162b0 <rename_to_unique+0x2c>
   162ae:	e090      	b.n	163d2 <rename_to_unique+0x14e>
	if (fp == NULL || file_path_name == NULL) {
   162b0:	2f00      	cmp	r7, #0
   162b2:	d100      	bne.n	162b6 <rename_to_unique+0x32>
   162b4:	e08f      	b.n	163d6 <rename_to_unique+0x152>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   162b6:	4d4c      	ldr	r5, [pc, #304]	; (163e8 <rename_to_unique+0x164>)
   162b8:	2200      	movs	r2, #0
   162ba:	0031      	movs	r1, r6
   162bc:	0028      	movs	r0, r5
   162be:	4b4b      	ldr	r3, [pc, #300]	; (163ec <rename_to_unique+0x168>)
   162c0:	4798      	blx	r3
   162c2:	0007      	movs	r7, r0
	f_close(&file_object);
   162c4:	0028      	movs	r0, r5
   162c6:	4b4a      	ldr	r3, [pc, #296]	; (163f0 <rename_to_unique+0x16c>)
   162c8:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
   162ca:	2f00      	cmp	r7, #0
   162cc:	d000      	beq.n	162d0 <rename_to_unique+0x4c>
   162ce:	e084      	b.n	163da <rename_to_unique+0x156>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   162d0:	0030      	movs	r0, r6
   162d2:	4b48      	ldr	r3, [pc, #288]	; (163f4 <rename_to_unique+0x170>)
   162d4:	4798      	blx	r3
   162d6:	0003      	movs	r3, r0
		return false;
   162d8:	2000      	movs	r0, #0
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   162da:	2bfa      	cmp	r3, #250	; 0xfa
   162dc:	d87e      	bhi.n	163dc <rename_to_unique+0x158>
	p = strrchr(file_path_name, '.');
   162de:	212e      	movs	r1, #46	; 0x2e
   162e0:	0030      	movs	r0, r6
   162e2:	4b45      	ldr	r3, [pc, #276]	; (163f8 <rename_to_unique+0x174>)
   162e4:	4798      	blx	r3
   162e6:	1e05      	subs	r5, r0, #0
	if (p != NULL) {
   162e8:	d039      	beq.n	1635e <rename_to_unique+0xda>
		ext_len = strlen(p);
   162ea:	4b42      	ldr	r3, [pc, #264]	; (163f4 <rename_to_unique+0x170>)
   162ec:	4798      	blx	r3
   162ee:	0007      	movs	r7, r0
   162f0:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   162f2:	2c07      	cmp	r4, #7
   162f4:	d820      	bhi.n	16338 <rename_to_unique+0xb4>
			strcpy(ext, p);
   162f6:	0029      	movs	r1, r5
   162f8:	a806      	add	r0, sp, #24
   162fa:	4b40      	ldr	r3, [pc, #256]	; (163fc <rename_to_unique+0x178>)
   162fc:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   162fe:	0030      	movs	r0, r6
   16300:	4b3c      	ldr	r3, [pc, #240]	; (163f4 <rename_to_unique+0x170>)
   16302:	4798      	blx	r3
   16304:	043f      	lsls	r7, r7, #16
   16306:	0c3f      	lsrs	r7, r7, #16
   16308:	1bc7      	subs	r7, r0, r7
   1630a:	2ff6      	cmp	r7, #246	; 0xf6
   1630c:	d909      	bls.n	16322 <rename_to_unique+0x9e>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   1630e:	25f6      	movs	r5, #246	; 0xf6
   16310:	1b2d      	subs	r5, r5, r4
   16312:	b2ad      	uxth	r5, r5
				strncpy(name, file_path_name, name_len);
   16314:	002a      	movs	r2, r5
   16316:	0031      	movs	r1, r6
   16318:	a809      	add	r0, sp, #36	; 0x24
   1631a:	4b39      	ldr	r3, [pc, #228]	; (16400 <rename_to_unique+0x17c>)
   1631c:	4798      	blx	r3
			valid_ext = true;
   1631e:	2401      	movs	r4, #1
   16320:	e011      	b.n	16346 <rename_to_unique+0xc2>
				name_len = (p - file_path_name);
   16322:	9b01      	ldr	r3, [sp, #4]
   16324:	1aea      	subs	r2, r5, r3
   16326:	b295      	uxth	r5, r2
				strncpy(name, file_path_name, name_len);
   16328:	0412      	lsls	r2, r2, #16
   1632a:	0c12      	lsrs	r2, r2, #16
   1632c:	0019      	movs	r1, r3
   1632e:	a809      	add	r0, sp, #36	; 0x24
   16330:	4b33      	ldr	r3, [pc, #204]	; (16400 <rename_to_unique+0x17c>)
   16332:	4798      	blx	r3
			valid_ext = true;
   16334:	2401      	movs	r4, #1
   16336:	e006      	b.n	16346 <rename_to_unique+0xc2>
			strncpy(name, file_path_name, name_len);
   16338:	22f6      	movs	r2, #246	; 0xf6
   1633a:	9901      	ldr	r1, [sp, #4]
   1633c:	a809      	add	r0, sp, #36	; 0x24
   1633e:	4b30      	ldr	r3, [pc, #192]	; (16400 <rename_to_unique+0x17c>)
   16340:	4798      	blx	r3
	bool valid_ext = false;
   16342:	2400      	movs	r4, #0
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16344:	25f6      	movs	r5, #246	; 0xf6
	name[name_len++] = '-';
   16346:	1c6e      	adds	r6, r5, #1
   16348:	b2b6      	uxth	r6, r6
   1634a:	222d      	movs	r2, #45	; 0x2d
   1634c:	ab09      	add	r3, sp, #36	; 0x24
   1634e:	555a      	strb	r2, [r3, r5]
   16350:	2501      	movs	r5, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   16352:	1cf3      	adds	r3, r6, #3
   16354:	aa09      	add	r2, sp, #36	; 0x24
   16356:	4694      	mov	ip, r2
   16358:	4463      	add	r3, ip
   1635a:	9302      	str	r3, [sp, #8]
   1635c:	e019      	b.n	16392 <rename_to_unique+0x10e>
		strncpy(name, file_path_name, name_len);
   1635e:	22f6      	movs	r2, #246	; 0xf6
   16360:	9901      	ldr	r1, [sp, #4]
   16362:	a809      	add	r0, sp, #36	; 0x24
   16364:	4b26      	ldr	r3, [pc, #152]	; (16400 <rename_to_unique+0x17c>)
   16366:	4798      	blx	r3
	bool valid_ext = false;
   16368:	2400      	movs	r4, #0
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1636a:	25f6      	movs	r5, #246	; 0xf6
   1636c:	e7eb      	b.n	16346 <rename_to_unique+0xc2>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   1636e:	4f1e      	ldr	r7, [pc, #120]	; (163e8 <rename_to_unique+0x164>)
   16370:	2200      	movs	r2, #0
   16372:	a909      	add	r1, sp, #36	; 0x24
   16374:	0038      	movs	r0, r7
   16376:	4b1d      	ldr	r3, [pc, #116]	; (163ec <rename_to_unique+0x168>)
   16378:	4798      	blx	r3
   1637a:	4683      	mov	fp, r0
	f_close(&file_object);
   1637c:	0038      	movs	r0, r7
   1637e:	4b1c      	ldr	r3, [pc, #112]	; (163f0 <rename_to_unique+0x16c>)
   16380:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
   16382:	465b      	mov	r3, fp
   16384:	2b00      	cmp	r3, #0
   16386:	d116      	bne.n	163b6 <rename_to_unique+0x132>
   16388:	3501      	adds	r5, #1
	for (i = 1; i < count; i++) {
   1638a:	4b1e      	ldr	r3, [pc, #120]	; (16404 <rename_to_unique+0x180>)
   1638c:	b2aa      	uxth	r2, r5
   1638e:	429a      	cmp	r2, r3
   16390:	d81d      	bhi.n	163ce <rename_to_unique+0x14a>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16392:	002a      	movs	r2, r5
   16394:	491c      	ldr	r1, [pc, #112]	; (16408 <rename_to_unique+0x184>)
   16396:	a805      	add	r0, sp, #20
   16398:	4b1c      	ldr	r3, [pc, #112]	; (1640c <rename_to_unique+0x188>)
   1639a:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   1639c:	ab09      	add	r3, sp, #36	; 0x24
   1639e:	1998      	adds	r0, r3, r6
   163a0:	2203      	movs	r2, #3
   163a2:	a905      	add	r1, sp, #20
   163a4:	4b16      	ldr	r3, [pc, #88]	; (16400 <rename_to_unique+0x17c>)
   163a6:	4798      	blx	r3
		if (valid_ext) {
   163a8:	2c00      	cmp	r4, #0
   163aa:	d0e0      	beq.n	1636e <rename_to_unique+0xea>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   163ac:	a906      	add	r1, sp, #24
   163ae:	9802      	ldr	r0, [sp, #8]
   163b0:	4b12      	ldr	r3, [pc, #72]	; (163fc <rename_to_unique+0x178>)
   163b2:	4798      	blx	r3
   163b4:	e7db      	b.n	1636e <rename_to_unique+0xea>
			memset(file_path_name, 0, max_len);
   163b6:	9a03      	ldr	r2, [sp, #12]
   163b8:	2100      	movs	r1, #0
   163ba:	9c01      	ldr	r4, [sp, #4]
   163bc:	0020      	movs	r0, r4
   163be:	4b09      	ldr	r3, [pc, #36]	; (163e4 <rename_to_unique+0x160>)
   163c0:	4798      	blx	r3
			strcpy(file_path_name, name);
   163c2:	a909      	add	r1, sp, #36	; 0x24
   163c4:	0020      	movs	r0, r4
   163c6:	4b0d      	ldr	r3, [pc, #52]	; (163fc <rename_to_unique+0x178>)
   163c8:	4798      	blx	r3
			return true;
   163ca:	2001      	movs	r0, #1
   163cc:	e006      	b.n	163dc <rename_to_unique+0x158>
	return false;
   163ce:	2000      	movs	r0, #0
   163d0:	e004      	b.n	163dc <rename_to_unique+0x158>
		return false;
   163d2:	2000      	movs	r0, #0
   163d4:	e002      	b.n	163dc <rename_to_unique+0x158>
		return true;
   163d6:	2001      	movs	r0, #1
   163d8:	e000      	b.n	163dc <rename_to_unique+0x158>
   163da:	2001      	movs	r0, #1
}
   163dc:	b048      	add	sp, #288	; 0x120
   163de:	bc04      	pop	{r2}
   163e0:	4693      	mov	fp, r2
   163e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   163e4:	0001900b 	.word	0x0001900b
   163e8:	20000c24 	.word	0x20000c24
   163ec:	00012aed 	.word	0x00012aed
   163f0:	000130ed 	.word	0x000130ed
   163f4:	000195c7 	.word	0x000195c7
   163f8:	00019621 	.word	0x00019621
   163fc:	0001957d 	.word	0x0001957d
   16400:	000195f7 	.word	0x000195f7
   16404:	000003e7 	.word	0x000003e7
   16408:	0001d930 	.word	0x0001d930
   1640c:	00019525 	.word	0x00019525

00016410 <store_file_packet>:
{
   16410:	b5f0      	push	{r4, r5, r6, r7, lr}
   16412:	b083      	sub	sp, #12
   16414:	0005      	movs	r5, r0
   16416:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
   16418:	2800      	cmp	r0, #0
   1641a:	d04c      	beq.n	164b6 <store_file_packet+0xa6>
   1641c:	2900      	cmp	r1, #0
   1641e:	d04a      	beq.n	164b6 <store_file_packet+0xa6>
	return ((down_state & mask) != 0);
   16420:	4b3c      	ldr	r3, [pc, #240]	; (16514 <store_file_packet+0x104>)
   16422:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   16424:	071b      	lsls	r3, r3, #28
   16426:	d432      	bmi.n	1648e <store_file_packet+0x7e>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16428:	4b3b      	ldr	r3, [pc, #236]	; (16518 <store_file_packet+0x108>)
   1642a:	2230      	movs	r2, #48	; 0x30
   1642c:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   1642e:	320a      	adds	r2, #10
   16430:	705a      	strb	r2, [r3, #1]
		cp = (char *)(desired_url + strlen(desired_url));
   16432:	4b3a      	ldr	r3, [pc, #232]	; (1651c <store_file_packet+0x10c>)
   16434:	681c      	ldr	r4, [r3, #0]
   16436:	0020      	movs	r0, r4
   16438:	4b39      	ldr	r3, [pc, #228]	; (16520 <store_file_packet+0x110>)
   1643a:	4798      	blx	r3
   1643c:	1824      	adds	r4, r4, r0
		while (*cp != '/') {
   1643e:	7823      	ldrb	r3, [r4, #0]
   16440:	2b2f      	cmp	r3, #47	; 0x2f
   16442:	d003      	beq.n	1644c <store_file_packet+0x3c>
			cp--;
   16444:	3c01      	subs	r4, #1
		while (*cp != '/') {
   16446:	7823      	ldrb	r3, [r4, #0]
   16448:	2b2f      	cmp	r3, #47	; 0x2f
   1644a:	d1fb      	bne.n	16444 <store_file_packet+0x34>
		if (strlen(cp) > 1) {
   1644c:	0020      	movs	r0, r4
   1644e:	4b34      	ldr	r3, [pc, #208]	; (16520 <store_file_packet+0x110>)
   16450:	4798      	blx	r3
   16452:	2801      	cmp	r0, #1
   16454:	d934      	bls.n	164c0 <store_file_packet+0xb0>
			cp++;
   16456:	1c61      	adds	r1, r4, #1
			strcpy(&save_file_name[2], cp);
   16458:	4c2f      	ldr	r4, [pc, #188]	; (16518 <store_file_packet+0x108>)
   1645a:	1ca0      	adds	r0, r4, #2
   1645c:	4b31      	ldr	r3, [pc, #196]	; (16524 <store_file_packet+0x114>)
   1645e:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16460:	4f31      	ldr	r7, [pc, #196]	; (16528 <store_file_packet+0x118>)
   16462:	22fa      	movs	r2, #250	; 0xfa
   16464:	0021      	movs	r1, r4
   16466:	0038      	movs	r0, r7
   16468:	4b30      	ldr	r3, [pc, #192]	; (1652c <store_file_packet+0x11c>)
   1646a:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
   1646c:	0021      	movs	r1, r4
   1646e:	4830      	ldr	r0, [pc, #192]	; (16530 <store_file_packet+0x120>)
   16470:	4b30      	ldr	r3, [pc, #192]	; (16534 <store_file_packet+0x124>)
   16472:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16474:	220a      	movs	r2, #10
   16476:	0021      	movs	r1, r4
   16478:	0038      	movs	r0, r7
   1647a:	4b2f      	ldr	r3, [pc, #188]	; (16538 <store_file_packet+0x128>)
   1647c:	4798      	blx	r3
		if (ret != FR_OK) {
   1647e:	2800      	cmp	r0, #0
   16480:	d125      	bne.n	164ce <store_file_packet+0xbe>
		received_file_size = 0;
   16482:	2200      	movs	r2, #0
   16484:	4b2d      	ldr	r3, [pc, #180]	; (1653c <store_file_packet+0x12c>)
   16486:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   16488:	2008      	movs	r0, #8
   1648a:	4b2d      	ldr	r3, [pc, #180]	; (16540 <store_file_packet+0x130>)
   1648c:	4798      	blx	r3
		UINT wsize = 0;
   1648e:	2300      	movs	r3, #0
   16490:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   16492:	ab01      	add	r3, sp, #4
   16494:	0032      	movs	r2, r6
   16496:	0029      	movs	r1, r5
   16498:	4823      	ldr	r0, [pc, #140]	; (16528 <store_file_packet+0x118>)
   1649a:	4c2a      	ldr	r4, [pc, #168]	; (16544 <store_file_packet+0x134>)
   1649c:	47a0      	blx	r4
		if (ret != FR_OK) {
   1649e:	2800      	cmp	r0, #0
   164a0:	d01a      	beq.n	164d8 <store_file_packet+0xc8>
			f_close(&file_object);
   164a2:	4821      	ldr	r0, [pc, #132]	; (16528 <store_file_packet+0x118>)
   164a4:	4b28      	ldr	r3, [pc, #160]	; (16548 <store_file_packet+0x138>)
   164a6:	4798      	blx	r3
			add_state(CANCELED);
   164a8:	2020      	movs	r0, #32
   164aa:	4b25      	ldr	r3, [pc, #148]	; (16540 <store_file_packet+0x130>)
   164ac:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
   164ae:	4827      	ldr	r0, [pc, #156]	; (1654c <store_file_packet+0x13c>)
   164b0:	4b27      	ldr	r3, [pc, #156]	; (16550 <store_file_packet+0x140>)
   164b2:	4798      	blx	r3
			return;
   164b4:	e002      	b.n	164bc <store_file_packet+0xac>
		printf("store_file_packet: empty data.\r\n");
   164b6:	4827      	ldr	r0, [pc, #156]	; (16554 <store_file_packet+0x144>)
   164b8:	4b25      	ldr	r3, [pc, #148]	; (16550 <store_file_packet+0x140>)
   164ba:	4798      	blx	r3
}
   164bc:	b003      	add	sp, #12
   164be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
   164c0:	4825      	ldr	r0, [pc, #148]	; (16558 <store_file_packet+0x148>)
   164c2:	4b23      	ldr	r3, [pc, #140]	; (16550 <store_file_packet+0x140>)
   164c4:	4798      	blx	r3
			add_state(CANCELED);
   164c6:	2020      	movs	r0, #32
   164c8:	4b1d      	ldr	r3, [pc, #116]	; (16540 <store_file_packet+0x130>)
   164ca:	4798      	blx	r3
			return;
   164cc:	e7f6      	b.n	164bc <store_file_packet+0xac>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
   164ce:	0001      	movs	r1, r0
   164d0:	4822      	ldr	r0, [pc, #136]	; (1655c <store_file_packet+0x14c>)
   164d2:	4b18      	ldr	r3, [pc, #96]	; (16534 <store_file_packet+0x124>)
   164d4:	4798      	blx	r3
			return;
   164d6:	e7f1      	b.n	164bc <store_file_packet+0xac>
		received_file_size += wsize;
   164d8:	4c18      	ldr	r4, [pc, #96]	; (1653c <store_file_packet+0x12c>)
   164da:	6823      	ldr	r3, [r4, #0]
   164dc:	9a01      	ldr	r2, [sp, #4]
   164de:	4694      	mov	ip, r2
   164e0:	4463      	add	r3, ip
   164e2:	0019      	movs	r1, r3
   164e4:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   164e6:	4d1e      	ldr	r5, [pc, #120]	; (16560 <store_file_packet+0x150>)
   164e8:	682a      	ldr	r2, [r5, #0]
   164ea:	481e      	ldr	r0, [pc, #120]	; (16564 <store_file_packet+0x154>)
   164ec:	4b11      	ldr	r3, [pc, #68]	; (16534 <store_file_packet+0x124>)
   164ee:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
   164f0:	6822      	ldr	r2, [r4, #0]
   164f2:	682b      	ldr	r3, [r5, #0]
   164f4:	429a      	cmp	r2, r3
   164f6:	d3e1      	bcc.n	164bc <store_file_packet+0xac>
			f_close(&file_object);
   164f8:	480b      	ldr	r0, [pc, #44]	; (16528 <store_file_packet+0x118>)
   164fa:	4b13      	ldr	r3, [pc, #76]	; (16548 <store_file_packet+0x138>)
   164fc:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
   164fe:	481a      	ldr	r0, [pc, #104]	; (16568 <store_file_packet+0x158>)
   16500:	4b13      	ldr	r3, [pc, #76]	; (16550 <store_file_packet+0x140>)
   16502:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   16504:	2280      	movs	r2, #128	; 0x80
   16506:	0412      	lsls	r2, r2, #16
   16508:	4b18      	ldr	r3, [pc, #96]	; (1656c <store_file_packet+0x15c>)
   1650a:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   1650c:	2010      	movs	r0, #16
   1650e:	4b0c      	ldr	r3, [pc, #48]	; (16540 <store_file_packet+0x130>)
   16510:	4798      	blx	r3
			return;
   16512:	e7d3      	b.n	164bc <store_file_packet+0xac>
   16514:	200009f1 	.word	0x200009f1
   16518:	20000060 	.word	0x20000060
   1651c:	200009ec 	.word	0x200009ec
   16520:	000195c7 	.word	0x000195c7
   16524:	0001957d 	.word	0x0001957d
   16528:	20000c24 	.word	0x20000c24
   1652c:	00016285 	.word	0x00016285
   16530:	0001da60 	.word	0x0001da60
   16534:	0001916d 	.word	0x0001916d
   16538:	00012aed 	.word	0x00012aed
   1653c:	2000108c 	.word	0x2000108c
   16540:	00015e09 	.word	0x00015e09
   16544:	00012e29 	.word	0x00012e29
   16548:	000130ed 	.word	0x000130ed
   1654c:	0001dafc 	.word	0x0001dafc
   16550:	00019289 	.word	0x00019289
   16554:	0001da40 	.word	0x0001da40
   16558:	0001da88 	.word	0x0001da88
   1655c:	0001dac8 	.word	0x0001dac8
   16560:	20000c48 	.word	0x20000c48
   16564:	0001db38 	.word	0x0001db38
   16568:	0001db6c 	.word	0x0001db6c
   1656c:	41004400 	.word	0x41004400

00016570 <http_client_callback>:
{
   16570:	b510      	push	{r4, lr}
   16572:	0014      	movs	r4, r2
	switch (type) {
   16574:	2904      	cmp	r1, #4
   16576:	d806      	bhi.n	16586 <http_client_callback+0x16>
   16578:	0089      	lsls	r1, r1, #2
   1657a:	4b29      	ldr	r3, [pc, #164]	; (16620 <http_client_callback+0xb0>)
   1657c:	585b      	ldr	r3, [r3, r1]
   1657e:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
   16580:	4828      	ldr	r0, [pc, #160]	; (16624 <http_client_callback+0xb4>)
   16582:	4b29      	ldr	r3, [pc, #164]	; (16628 <http_client_callback+0xb8>)
   16584:	4798      	blx	r3
}
   16586:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
   16588:	4828      	ldr	r0, [pc, #160]	; (1662c <http_client_callback+0xbc>)
   1658a:	4b27      	ldr	r3, [pc, #156]	; (16628 <http_client_callback+0xb8>)
   1658c:	4798      	blx	r3
		add_state(GET_REQUESTED);
   1658e:	2004      	movs	r0, #4
   16590:	4b27      	ldr	r3, [pc, #156]	; (16630 <http_client_callback+0xc0>)
   16592:	4798      	blx	r3
		break;
   16594:	e7f7      	b.n	16586 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
   16596:	8811      	ldrh	r1, [r2, #0]
   16598:	6852      	ldr	r2, [r2, #4]
   1659a:	4826      	ldr	r0, [pc, #152]	; (16634 <http_client_callback+0xc4>)
   1659c:	4b26      	ldr	r3, [pc, #152]	; (16638 <http_client_callback+0xc8>)
   1659e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   165a0:	8823      	ldrh	r3, [r4, #0]
   165a2:	2bc8      	cmp	r3, #200	; 0xc8
   165a4:	d10f      	bne.n	165c6 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
   165a6:	6861      	ldr	r1, [r4, #4]
   165a8:	4b24      	ldr	r3, [pc, #144]	; (1663c <http_client_callback+0xcc>)
   165aa:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   165ac:	2200      	movs	r2, #0
   165ae:	4b24      	ldr	r3, [pc, #144]	; (16640 <http_client_callback+0xd0>)
   165b0:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   165b2:	4b24      	ldr	r3, [pc, #144]	; (16644 <http_client_callback+0xd4>)
   165b4:	4299      	cmp	r1, r3
   165b6:	d8e6      	bhi.n	16586 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   165b8:	68a0      	ldr	r0, [r4, #8]
   165ba:	4b23      	ldr	r3, [pc, #140]	; (16648 <http_client_callback+0xd8>)
   165bc:	4798      	blx	r3
			add_state(COMPLETED);
   165be:	2010      	movs	r0, #16
   165c0:	4b1b      	ldr	r3, [pc, #108]	; (16630 <http_client_callback+0xc0>)
   165c2:	4798      	blx	r3
   165c4:	e7df      	b.n	16586 <http_client_callback+0x16>
			add_state(CANCELED);
   165c6:	2020      	movs	r0, #32
   165c8:	4b19      	ldr	r3, [pc, #100]	; (16630 <http_client_callback+0xc0>)
   165ca:	4798      	blx	r3
			return;
   165cc:	e7db      	b.n	16586 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   165ce:	6811      	ldr	r1, [r2, #0]
   165d0:	6850      	ldr	r0, [r2, #4]
   165d2:	4b1d      	ldr	r3, [pc, #116]	; (16648 <http_client_callback+0xd8>)
   165d4:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   165d6:	7a23      	ldrb	r3, [r4, #8]
   165d8:	2b00      	cmp	r3, #0
   165da:	d0d4      	beq.n	16586 <http_client_callback+0x16>
			add_state(COMPLETED);
   165dc:	2010      	movs	r0, #16
   165de:	4b14      	ldr	r3, [pc, #80]	; (16630 <http_client_callback+0xc0>)
   165e0:	4798      	blx	r3
   165e2:	e7d0      	b.n	16586 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   165e4:	6811      	ldr	r1, [r2, #0]
   165e6:	4819      	ldr	r0, [pc, #100]	; (1664c <http_client_callback+0xdc>)
   165e8:	4b13      	ldr	r3, [pc, #76]	; (16638 <http_client_callback+0xc8>)
   165ea:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   165ec:	6823      	ldr	r3, [r4, #0]
   165ee:	330b      	adds	r3, #11
   165f0:	d1c9      	bne.n	16586 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
   165f2:	4b17      	ldr	r3, [pc, #92]	; (16650 <http_client_callback+0xe0>)
   165f4:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   165f6:	071b      	lsls	r3, r3, #28
   165f8:	d406      	bmi.n	16608 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
   165fa:	4b15      	ldr	r3, [pc, #84]	; (16650 <http_client_callback+0xe0>)
   165fc:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   165fe:	075b      	lsls	r3, r3, #29
   16600:	d409      	bmi.n	16616 <http_client_callback+0xa6>
			start_download();
   16602:	4b14      	ldr	r3, [pc, #80]	; (16654 <http_client_callback+0xe4>)
   16604:	4798      	blx	r3
   16606:	e7be      	b.n	16586 <http_client_callback+0x16>
				f_close(&file_object);
   16608:	4813      	ldr	r0, [pc, #76]	; (16658 <http_client_callback+0xe8>)
   1660a:	4b14      	ldr	r3, [pc, #80]	; (1665c <http_client_callback+0xec>)
   1660c:	4798      	blx	r3
				clear_state(DOWNLOADING);
   1660e:	2008      	movs	r0, #8
   16610:	4b13      	ldr	r3, [pc, #76]	; (16660 <http_client_callback+0xf0>)
   16612:	4798      	blx	r3
   16614:	e7f1      	b.n	165fa <http_client_callback+0x8a>
				clear_state(GET_REQUESTED);
   16616:	2004      	movs	r0, #4
   16618:	4b11      	ldr	r3, [pc, #68]	; (16660 <http_client_callback+0xf0>)
   1661a:	4798      	blx	r3
   1661c:	e7f1      	b.n	16602 <http_client_callback+0x92>
   1661e:	46c0      	nop			; (mov r8, r8)
   16620:	0001cf0c 	.word	0x0001cf0c
   16624:	0001cfc4 	.word	0x0001cfc4
   16628:	00019289 	.word	0x00019289
   1662c:	0001cffc 	.word	0x0001cffc
   16630:	00015e09 	.word	0x00015e09
   16634:	0001d028 	.word	0x0001d028
   16638:	0001916d 	.word	0x0001916d
   1663c:	20000c48 	.word	0x20000c48
   16640:	2000108c 	.word	0x2000108c
   16644:	000005a6 	.word	0x000005a6
   16648:	00016411 	.word	0x00016411
   1664c:	0001d064 	.word	0x0001d064
   16650:	200009f1 	.word	0x200009f1
   16654:	00015f91 	.word	0x00015f91
   16658:	20000c24 	.word	0x20000c24
   1665c:	000130ed 	.word	0x000130ed
   16660:	00015df9 	.word	0x00015df9

00016664 <configure_extint_channel>:
{
   16664:	b510      	push	{r4, lr}
    extint_chan_get_config_defaults(&config_extint_chan);
   16666:	4c08      	ldr	r4, [pc, #32]	; (16688 <configure_extint_channel+0x24>)
   16668:	0020      	movs	r0, r4
   1666a:	4b08      	ldr	r3, [pc, #32]	; (1668c <configure_extint_channel+0x28>)
   1666c:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   1666e:	2337      	movs	r3, #55	; 0x37
   16670:	6023      	str	r3, [r4, #0]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   16672:	2300      	movs	r3, #0
   16674:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   16676:	3301      	adds	r3, #1
   16678:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1667a:	3301      	adds	r3, #1
   1667c:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   1667e:	0021      	movs	r1, r4
   16680:	2007      	movs	r0, #7
   16682:	4b03      	ldr	r3, [pc, #12]	; (16690 <configure_extint_channel+0x2c>)
   16684:	4798      	blx	r3
}
   16686:	bd10      	pop	{r4, pc}
   16688:	2000149c 	.word	0x2000149c
   1668c:	0000ed41 	.word	0x0000ed41
   16690:	0000ed55 	.word	0x0000ed55

00016694 <configure_extint_callbacks>:
{
   16694:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   16696:	2200      	movs	r2, #0
   16698:	2107      	movs	r1, #7
   1669a:	4804      	ldr	r0, [pc, #16]	; (166ac <configure_extint_callbacks+0x18>)
   1669c:	4b04      	ldr	r3, [pc, #16]	; (166b0 <configure_extint_callbacks+0x1c>)
   1669e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   166a0:	2100      	movs	r1, #0
   166a2:	2007      	movs	r0, #7
   166a4:	4b03      	ldr	r3, [pc, #12]	; (166b4 <configure_extint_callbacks+0x20>)
   166a6:	4798      	blx	r3
}
   166a8:	bd10      	pop	{r4, pc}
   166aa:	46c0      	nop			; (mov r8, r8)
   166ac:	00015e19 	.word	0x00015e19
   166b0:	0000ebfd 	.word	0x0000ebfd
   166b4:	0000ec29 	.word	0x0000ec29

000166b8 <configure_nvm>:

/**
* NVM CONFIGURATION
*/
void configure_nvm(void)
{
   166b8:	b510      	push	{r4, lr}
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   166ba:	4807      	ldr	r0, [pc, #28]	; (166d8 <configure_nvm+0x20>)
   166bc:	2200      	movs	r2, #0
   166be:	7002      	strb	r2, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   166c0:	4b06      	ldr	r3, [pc, #24]	; (166dc <configure_nvm+0x24>)
   166c2:	685b      	ldr	r3, [r3, #4]
   166c4:	06db      	lsls	r3, r3, #27
   166c6:	0f1b      	lsrs	r3, r3, #28
   166c8:	7083      	strb	r3, [r0, #2]
	config->disable_cache     = false;
   166ca:	70c2      	strb	r2, [r0, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   166cc:	7102      	strb	r2, [r0, #4]
	nvm_get_config_defaults(&nvm_cfg);	
	nvm_cfg.manual_page_write = false;
   166ce:	7042      	strb	r2, [r0, #1]
	nvm_set_config(&nvm_cfg);
   166d0:	4b03      	ldr	r3, [pc, #12]	; (166e0 <configure_nvm+0x28>)
   166d2:	4798      	blx	r3
}
   166d4:	bd10      	pop	{r4, pc}
   166d6:	46c0      	nop			; (mov r8, r8)
   166d8:	20001310 	.word	0x20001310
   166dc:	41004000 	.word	0x41004000
   166e0:	0000edcd 	.word	0x0000edcd

000166e4 <otafu_download_operation>:
*/


// MAIN HTTP INTERACTION FOR DOWNLOAD
int otafu_download_operation(int file_type)
{
   166e4:	b570      	push	{r4, r5, r6, lr}
	static http_socket_flag = 0; 
	
	if (file_type == VERSION)
   166e6:	2801      	cmp	r0, #1
   166e8:	d027      	beq.n	1673a <otafu_download_operation+0x56>
	{
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Version.txt";	
	}
	else if (file_type == FIRMWARE)
   166ea:	2802      	cmp	r0, #2
   166ec:	d029      	beq.n	16742 <otafu_download_operation+0x5e>
	{
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Firmware.bin";	
	}
	else if (file_type == CRC)
   166ee:	2803      	cmp	r0, #3
   166f0:	d02b      	beq.n	1674a <otafu_download_operation+0x66>
	{
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Crc.txt";	
	}
	
	//DOWNLOAD A FILE
	do_download_flag = true;
   166f2:	2201      	movs	r2, #1
   166f4:	4b1c      	ldr	r3, [pc, #112]	; (16768 <otafu_download_operation+0x84>)
   166f6:	701a      	strb	r2, [r3, #0]
	
	if(http_socket_flag == 0)
   166f8:	4b1c      	ldr	r3, [pc, #112]	; (1676c <otafu_download_operation+0x88>)
   166fa:	681b      	ldr	r3, [r3, #0]
   166fc:	2b00      	cmp	r3, #0
   166fe:	d028      	beq.n	16752 <otafu_download_operation+0x6e>
		
		http_socket_flag = 1;	
	}

	
	start_download();
   16700:	4b1b      	ldr	r3, [pc, #108]	; (16770 <otafu_download_operation+0x8c>)
   16702:	4798      	blx	r3
	return ((down_state & mask) != 0);
   16704:	4b1b      	ldr	r3, [pc, #108]	; (16774 <otafu_download_operation+0x90>)
	
	
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) 
   16706:	781b      	ldrb	r3, [r3, #0]
   16708:	2230      	movs	r2, #48	; 0x30
   1670a:	421a      	tst	r2, r3
   1670c:	d10b      	bne.n	16726 <otafu_download_operation+0x42>
	{
		// Handle pending events from network controller. 
		m2m_wifi_handle_events(NULL);
   1670e:	4e1a      	ldr	r6, [pc, #104]	; (16778 <otafu_download_operation+0x94>)
		// Checks the timer timeout. 
		sw_timer_task(&swt_module_inst);
   16710:	4c1a      	ldr	r4, [pc, #104]	; (1677c <otafu_download_operation+0x98>)
   16712:	4d1b      	ldr	r5, [pc, #108]	; (16780 <otafu_download_operation+0x9c>)
		m2m_wifi_handle_events(NULL);
   16714:	2000      	movs	r0, #0
   16716:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   16718:	0020      	movs	r0, r4
   1671a:	47a8      	blx	r5
	return ((down_state & mask) != 0);
   1671c:	4b15      	ldr	r3, [pc, #84]	; (16774 <otafu_download_operation+0x90>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) 
   1671e:	781b      	ldrb	r3, [r3, #0]
   16720:	2230      	movs	r2, #48	; 0x30
   16722:	421a      	tst	r2, r3
   16724:	d0f6      	beq.n	16714 <otafu_download_operation+0x30>
	}
	
	//Disable all flags pertaining to download
	clear_state(GET_REQUESTED);
   16726:	2004      	movs	r0, #4
   16728:	4c16      	ldr	r4, [pc, #88]	; (16784 <otafu_download_operation+0xa0>)
   1672a:	47a0      	blx	r4
	clear_state(COMPLETED);
   1672c:	2010      	movs	r0, #16
   1672e:	47a0      	blx	r4
	clear_state(CANCELED);
   16730:	2020      	movs	r0, #32
   16732:	47a0      	blx	r4
	clear_state(DOWNLOADING);
   16734:	2008      	movs	r0, #8
   16736:	47a0      	blx	r4
	
	//Disable socket for HTTP Transfer when completely done with the http related operations
}
   16738:	bd70      	pop	{r4, r5, r6, pc}
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Version.txt";	
   1673a:	4a13      	ldr	r2, [pc, #76]	; (16788 <otafu_download_operation+0xa4>)
   1673c:	4b13      	ldr	r3, [pc, #76]	; (1678c <otafu_download_operation+0xa8>)
   1673e:	601a      	str	r2, [r3, #0]
   16740:	e7d7      	b.n	166f2 <otafu_download_operation+0xe>
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Firmware.bin";	
   16742:	4a13      	ldr	r2, [pc, #76]	; (16790 <otafu_download_operation+0xac>)
   16744:	4b11      	ldr	r3, [pc, #68]	; (1678c <otafu_download_operation+0xa8>)
   16746:	601a      	str	r2, [r3, #0]
   16748:	e7d3      	b.n	166f2 <otafu_download_operation+0xe>
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Crc.txt";	
   1674a:	4a12      	ldr	r2, [pc, #72]	; (16794 <otafu_download_operation+0xb0>)
   1674c:	4b0f      	ldr	r3, [pc, #60]	; (1678c <otafu_download_operation+0xa8>)
   1674e:	601a      	str	r2, [r3, #0]
   16750:	e7cf      	b.n	166f2 <otafu_download_operation+0xe>
		socketInit();
   16752:	4b11      	ldr	r3, [pc, #68]	; (16798 <otafu_download_operation+0xb4>)
   16754:	4798      	blx	r3
		registerSocketCallback(socket_cb, resolve_cb);
   16756:	4911      	ldr	r1, [pc, #68]	; (1679c <otafu_download_operation+0xb8>)
   16758:	4811      	ldr	r0, [pc, #68]	; (167a0 <otafu_download_operation+0xbc>)
   1675a:	4b12      	ldr	r3, [pc, #72]	; (167a4 <otafu_download_operation+0xc0>)
   1675c:	4798      	blx	r3
		http_socket_flag = 1;	
   1675e:	2201      	movs	r2, #1
   16760:	4b02      	ldr	r3, [pc, #8]	; (1676c <otafu_download_operation+0x88>)
   16762:	601a      	str	r2, [r3, #0]
   16764:	e7cc      	b.n	16700 <otafu_download_operation+0x1c>
   16766:	46c0      	nop			; (mov r8, r8)
   16768:	200009f0 	.word	0x200009f0
   1676c:	20000c4c 	.word	0x20000c4c
   16770:	00015f91 	.word	0x00015f91
   16774:	200009f1 	.word	0x200009f1
   16778:	0000c8f5 	.word	0x0000c8f5
   1677c:	2000131c 	.word	0x2000131c
   16780:	00015da1 	.word	0x00015da1
   16784:	00015df9 	.word	0x00015df9
   16788:	0001d724 	.word	0x0001d724
   1678c:	200009ec 	.word	0x200009ec
   16790:	0001d758 	.word	0x0001d758
   16794:	0001d78c 	.word	0x0001d78c
   16798:	0000e3e9 	.word	0x0000e3e9
   1679c:	00015f49 	.word	0x00015f49
   167a0:	00015f85 	.word	0x00015f85
   167a4:	0000e469 	.word	0x0000e469

000167a8 <otafu_version_check>:


// Version Check > If actually the firmware is to be downloaded or not
int otafu_version_check()
{
   167a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   167aa:	b083      	sub	sp, #12
	char sd_download_version_num[1];
	uint8_t nvm_curr_version_num;

	printf("otafu_version_check: Checking for new Version ...... \n\r");
   167ac:	481f      	ldr	r0, [pc, #124]	; (1682c <otafu_version_check+0x84>)
   167ae:	4b20      	ldr	r3, [pc, #128]	; (16830 <otafu_version_check+0x88>)
   167b0:	4798      	blx	r3
	
	// 1. Erase Version.txt file from SD card
	ver_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   167b2:	4d20      	ldr	r5, [pc, #128]	; (16834 <otafu_version_check+0x8c>)
   167b4:	2430      	movs	r4, #48	; 0x30
   167b6:	702c      	strb	r4, [r5, #0]
	FRESULT ret = f_unlink((char const *)ver_file_name); 
   167b8:	0028      	movs	r0, r5
   167ba:	4b1f      	ldr	r3, [pc, #124]	; (16838 <otafu_version_check+0x90>)
   167bc:	4798      	blx	r3
	
	// 2. Download new Version.txt into SD card
	otafu_download_operation(VERSION);
   167be:	2001      	movs	r0, #1
   167c0:	4b1e      	ldr	r3, [pc, #120]	; (1683c <otafu_version_check+0x94>)
   167c2:	4798      	blx	r3
	
	// 3. Read Version from text file (New)
	ver_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   167c4:	702c      	strb	r4, [r5, #0]
	FRESULT res_ver = f_open(&file_object,(char const *)ver_file_name,FA_READ);
   167c6:	4c1e      	ldr	r4, [pc, #120]	; (16840 <otafu_version_check+0x98>)
   167c8:	2201      	movs	r2, #1
   167ca:	0029      	movs	r1, r5
   167cc:	0020      	movs	r0, r4
   167ce:	4b1d      	ldr	r3, [pc, #116]	; (16844 <otafu_version_check+0x9c>)
   167d0:	4798      	blx	r3
	f_gets(sd_download_version_num,&file_object.fsize,&file_object);
   167d2:	0021      	movs	r1, r4
   167d4:	310c      	adds	r1, #12
   167d6:	0022      	movs	r2, r4
   167d8:	a801      	add	r0, sp, #4
   167da:	4b1b      	ldr	r3, [pc, #108]	; (16848 <otafu_version_check+0xa0>)
   167dc:	4798      	blx	r3
	f_close(&file_object);	
   167de:	0020      	movs	r0, r4
   167e0:	4b1a      	ldr	r3, [pc, #104]	; (1684c <otafu_version_check+0xa4>)
   167e2:	4798      	blx	r3
	
	uint8_t sd_version_num_int = atoi(sd_download_version_num);		
   167e4:	a801      	add	r0, sp, #4
   167e6:	4b1a      	ldr	r3, [pc, #104]	; (16850 <otafu_version_check+0xa8>)
   167e8:	4798      	blx	r3
   167ea:	0006      	movs	r6, r0
   167ec:	b2c7      	uxtb	r7, r0
	
	// 4. Read Version from NVM (Old)
	do
	{
		error_code = nvm_read_buffer(VERSION_ADDRESS,&nvm_curr_version_num,1);			
   167ee:	4d19      	ldr	r5, [pc, #100]	; (16854 <otafu_version_check+0xac>)
   167f0:	4c19      	ldr	r4, [pc, #100]	; (16858 <otafu_version_check+0xb0>)
   167f2:	2201      	movs	r2, #1
   167f4:	466b      	mov	r3, sp
   167f6:	1cd9      	adds	r1, r3, #3
   167f8:	209a      	movs	r0, #154	; 0x9a
   167fa:	0200      	lsls	r0, r0, #8
   167fc:	47a8      	blx	r5
   167fe:	7020      	strb	r0, [r4, #0]
	} while (error_code == STATUS_BUSY);
   16800:	2805      	cmp	r0, #5
   16802:	d0f6      	beq.n	167f2 <otafu_version_check+0x4a>
	
	// 5. If New Version > Old Version -> return version number
	if ((nvm_curr_version_num == 255) || (nvm_curr_version_num < sd_version_num_int))
   16804:	466b      	mov	r3, sp
   16806:	3303      	adds	r3, #3
   16808:	781b      	ldrb	r3, [r3, #0]
   1680a:	2bff      	cmp	r3, #255	; 0xff
   1680c:	d001      	beq.n	16812 <otafu_version_check+0x6a>
   1680e:	429f      	cmp	r7, r3
   16810:	d906      	bls.n	16820 <otafu_version_check+0x78>
	{
		printf("otafu_version_check: Version Different, Writing new code ..... \n\r");
   16812:	4812      	ldr	r0, [pc, #72]	; (1685c <otafu_version_check+0xb4>)
   16814:	4b06      	ldr	r3, [pc, #24]	; (16830 <otafu_version_check+0x88>)
   16816:	4798      	blx	r3
   16818:	20ff      	movs	r0, #255	; 0xff
   1681a:	4030      	ands	r0, r6
	else
	{
		printf("otafu_version_check: >> Version Same or Current version is latest\n\r");
		return 0;
	}
}
   1681c:	b003      	add	sp, #12
   1681e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("otafu_version_check: >> Version Same or Current version is latest\n\r");
   16820:	480f      	ldr	r0, [pc, #60]	; (16860 <otafu_version_check+0xb8>)
   16822:	4b03      	ldr	r3, [pc, #12]	; (16830 <otafu_version_check+0x88>)
   16824:	4798      	blx	r3
		return 0;
   16826:	2000      	movs	r0, #0
   16828:	e7f8      	b.n	1681c <otafu_version_check+0x74>
   1682a:	46c0      	nop			; (mov r8, r8)
   1682c:	0001d870 	.word	0x0001d870
   16830:	0001916d 	.word	0x0001916d
   16834:	20000170 	.word	0x20000170
   16838:	00013105 	.word	0x00013105
   1683c:	000166e5 	.word	0x000166e5
   16840:	20000c24 	.word	0x20000c24
   16844:	00012aed 	.word	0x00012aed
   16848:	000131dd 	.word	0x000131dd
   1684c:	000130ed 	.word	0x000130ed
   16850:	00018f59 	.word	0x00018f59
   16854:	0000ef9d 	.word	0x0000ef9d
   16858:	200014a8 	.word	0x200014a8
   1685c:	0001d8a8 	.word	0x0001d8a8
   16860:	0001d8ec 	.word	0x0001d8ec

00016864 <otafu_firmware_download>:


// Firmware Download > Download the new firmware file and also its crc for successful download verification
int otafu_firmware_download()
{
   16864:	b5f0      	push	{r4, r5, r6, r7, lr}
   16866:	46ce      	mov	lr, r9
   16868:	b500      	push	{lr}
   1686a:	b086      	sub	sp, #24
	uint32_t crc_on_server = 0;
	uint32_t crc_downloaded_in_sd_card = 0;
   1686c:	2300      	movs	r3, #0
   1686e:	9305      	str	r3, [sp, #20]
	printf("otafu_firmware_download: Downloading new firmware ...... \n\r");
   16870:	483d      	ldr	r0, [pc, #244]	; (16968 <otafu_firmware_download+0x104>)
   16872:	4b3e      	ldr	r3, [pc, #248]	; (1696c <otafu_firmware_download+0x108>)
   16874:	4798      	blx	r3
	
	// 1. Erase Firmware.bin file from SD card
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16876:	4c3e      	ldr	r4, [pc, #248]	; (16970 <otafu_firmware_download+0x10c>)
   16878:	2530      	movs	r5, #48	; 0x30
   1687a:	7025      	strb	r5, [r4, #0]
	FRESULT ret_firm = f_unlink((char const *)test_file_name);
   1687c:	0020      	movs	r0, r4
   1687e:	4e3d      	ldr	r6, [pc, #244]	; (16974 <otafu_firmware_download+0x110>)
   16880:	47b0      	blx	r6
	
	// 2. Erase crc_new.txt file from SD card
	crc_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16882:	483d      	ldr	r0, [pc, #244]	; (16978 <otafu_firmware_download+0x114>)
   16884:	7005      	strb	r5, [r0, #0]
	FRESULT ret_crc = f_unlink((char const *)crc_file_name);
   16886:	47b0      	blx	r6
	
	// 4. Download Firmware.bin into SD card
	otafu_download_operation(FIRMWARE);
   16888:	2002      	movs	r0, #2
   1688a:	4e3c      	ldr	r6, [pc, #240]	; (1697c <otafu_firmware_download+0x118>)
   1688c:	47b0      	blx	r6
	
	// 3. Download Crc.txt into SD card
	otafu_download_operation(CRC);
   1688e:	2003      	movs	r0, #3
   16890:	47b0      	blx	r6
	
	// 5. crc check on Firmware.bin file in the SD card
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16892:	7025      	strb	r5, [r4, #0]
	res1 = f_open(&file_object,(char const*)test_file_name,FA_READ);
   16894:	2201      	movs	r2, #1
   16896:	0021      	movs	r1, r4
   16898:	4839      	ldr	r0, [pc, #228]	; (16980 <otafu_firmware_download+0x11c>)
   1689a:	4b3a      	ldr	r3, [pc, #232]	; (16984 <otafu_firmware_download+0x120>)
   1689c:	4798      	blx	r3
   1689e:	4b3a      	ldr	r3, [pc, #232]	; (16988 <otafu_firmware_download+0x124>)
   168a0:	7018      	strb	r0, [r3, #0]
	if (res1 != FR_OK)
   168a2:	2800      	cmp	r0, #0
   168a4:	d119      	bne.n	168da <otafu_firmware_download+0x76>
	{
		printf("sd operation: >> Opening a file failed\n\r");
		return 0;
	}
	printf("sd operation: >> File open success\n\r");
   168a6:	4839      	ldr	r0, [pc, #228]	; (1698c <otafu_firmware_download+0x128>)
   168a8:	4b30      	ldr	r3, [pc, #192]	; (1696c <otafu_firmware_download+0x108>)
   168aa:	4798      	blx	r3
	
	uint32_t bytes_read = 0;
   168ac:	2300      	movs	r3, #0
   168ae:	9304      	str	r3, [sp, #16]
	uint32_t num_pages=0;
	uint32_t off_set=0;
	uint32_t fw_size= f_size(&file_object);
   168b0:	4b33      	ldr	r3, [pc, #204]	; (16980 <otafu_firmware_download+0x11c>)
   168b2:	68db      	ldr	r3, [r3, #12]
	uint32_t rem = fw_size%NVMCTRL_PAGE_SIZE;
   168b4:	223f      	movs	r2, #63	; 0x3f
   168b6:	401a      	ands	r2, r3
   168b8:	4691      	mov	r9, r2
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
	}
	else
	{
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE);
   168ba:	099f      	lsrs	r7, r3, #6
	if(rem!=0)
   168bc:	2a00      	cmp	r2, #0
   168be:	d004      	beq.n	168ca <otafu_firmware_download+0x66>
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
   168c0:	003a      	movs	r2, r7
   168c2:	3701      	adds	r7, #1
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
   168c4:	0192      	lsls	r2, r2, #6
   168c6:	1a9a      	subs	r2, r3, r2
   168c8:	4691      	mov	r9, r2
		off_set = 0;
	}
	
	if (fw_size != 0)
   168ca:	2b00      	cmp	r3, #0
   168cc:	d025      	beq.n	1691a <otafu_firmware_download+0xb6>
	{
		for(uint16_t j=0;j<num_pages;j++)
   168ce:	2f00      	cmp	r7, #0
   168d0:	d023      	beq.n	1691a <otafu_firmware_download+0xb6>
   168d2:	2500      	movs	r5, #0
   168d4:	2400      	movs	r4, #0
		{
			f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
   168d6:	4e2e      	ldr	r6, [pc, #184]	; (16990 <otafu_firmware_download+0x12c>)
   168d8:	e00e      	b.n	168f8 <otafu_firmware_download+0x94>
		printf("sd operation: >> Opening a file failed\n\r");
   168da:	482e      	ldr	r0, [pc, #184]	; (16994 <otafu_firmware_download+0x130>)
   168dc:	4b23      	ldr	r3, [pc, #140]	; (1696c <otafu_firmware_download+0x108>)
   168de:	4798      	blx	r3
		return 0;
   168e0:	2000      	movs	r0, #0
   168e2:	e03c      	b.n	1695e <otafu_firmware_download+0xfa>
			{
				crc32_recalculate(page_buffer,off_set,&crc_downloaded_in_sd_card);
			}
			else
			{
				crc32_recalculate(page_buffer,NVMCTRL_PAGE_SIZE,&crc_downloaded_in_sd_card);
   168e4:	aa05      	add	r2, sp, #20
   168e6:	2140      	movs	r1, #64	; 0x40
   168e8:	482b      	ldr	r0, [pc, #172]	; (16998 <otafu_firmware_download+0x134>)
   168ea:	4b2c      	ldr	r3, [pc, #176]	; (1699c <otafu_firmware_download+0x138>)
   168ec:	4798      	blx	r3
		for(uint16_t j=0;j<num_pages;j++)
   168ee:	3401      	adds	r4, #1
   168f0:	b2a4      	uxth	r4, r4
   168f2:	0025      	movs	r5, r4
   168f4:	42a7      	cmp	r7, r4
   168f6:	d910      	bls.n	1691a <otafu_firmware_download+0xb6>
			f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
   168f8:	ab04      	add	r3, sp, #16
   168fa:	2240      	movs	r2, #64	; 0x40
   168fc:	4926      	ldr	r1, [pc, #152]	; (16998 <otafu_firmware_download+0x134>)
   168fe:	4820      	ldr	r0, [pc, #128]	; (16980 <otafu_firmware_download+0x11c>)
   16900:	47b0      	blx	r6
			if((j==(num_pages-1)) && off_set!=0)
   16902:	1e7b      	subs	r3, r7, #1
   16904:	42ab      	cmp	r3, r5
   16906:	d1ed      	bne.n	168e4 <otafu_firmware_download+0x80>
   16908:	464b      	mov	r3, r9
   1690a:	2b00      	cmp	r3, #0
   1690c:	d0ea      	beq.n	168e4 <otafu_firmware_download+0x80>
				crc32_recalculate(page_buffer,off_set,&crc_downloaded_in_sd_card);
   1690e:	aa05      	add	r2, sp, #20
   16910:	4649      	mov	r1, r9
   16912:	4821      	ldr	r0, [pc, #132]	; (16998 <otafu_firmware_download+0x134>)
   16914:	4b21      	ldr	r3, [pc, #132]	; (1699c <otafu_firmware_download+0x138>)
   16916:	4798      	blx	r3
   16918:	e7e9      	b.n	168ee <otafu_firmware_download+0x8a>
			}
		}
	}
	f_close(&file_object);
   1691a:	4c19      	ldr	r4, [pc, #100]	; (16980 <otafu_firmware_download+0x11c>)
   1691c:	0020      	movs	r0, r4
   1691e:	4e20      	ldr	r6, [pc, #128]	; (169a0 <otafu_firmware_download+0x13c>)
   16920:	47b0      	blx	r6
	printf("CRC_DOWN = %u\n\r", (uint32_t*)crc_downloaded_in_sd_card);
   16922:	9905      	ldr	r1, [sp, #20]
   16924:	481f      	ldr	r0, [pc, #124]	; (169a4 <otafu_firmware_download+0x140>)
   16926:	4d11      	ldr	r5, [pc, #68]	; (1696c <otafu_firmware_download+0x108>)
   16928:	47a8      	blx	r5
	
	// 6. crc on Crc.txt 
	char sd_download_crc[10];
	
	crc_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1692a:	4913      	ldr	r1, [pc, #76]	; (16978 <otafu_firmware_download+0x114>)
   1692c:	2330      	movs	r3, #48	; 0x30
   1692e:	700b      	strb	r3, [r1, #0]
	FRESULT res_crc = f_open(&file_object,(char const *)crc_file_name,FA_READ);
   16930:	2201      	movs	r2, #1
   16932:	0020      	movs	r0, r4
   16934:	4b13      	ldr	r3, [pc, #76]	; (16984 <otafu_firmware_download+0x120>)
   16936:	4798      	blx	r3
	f_gets(sd_download_crc,&file_object.fsize,&file_object);
   16938:	0021      	movs	r1, r4
   1693a:	310c      	adds	r1, #12
   1693c:	0022      	movs	r2, r4
   1693e:	a801      	add	r0, sp, #4
   16940:	4b19      	ldr	r3, [pc, #100]	; (169a8 <otafu_firmware_download+0x144>)
   16942:	4798      	blx	r3
	f_close(&file_object);	
   16944:	0020      	movs	r0, r4
   16946:	47b0      	blx	r6
	
	crc_on_server = atoi(sd_download_crc);
   16948:	a801      	add	r0, sp, #4
   1694a:	4b18      	ldr	r3, [pc, #96]	; (169ac <otafu_firmware_download+0x148>)
   1694c:	4798      	blx	r3
   1694e:	0004      	movs	r4, r0
	printf("CRC_SERVER = %u\n\r", (uint32_t*)crc_on_server);
   16950:	0001      	movs	r1, r0
   16952:	4817      	ldr	r0, [pc, #92]	; (169b0 <otafu_firmware_download+0x14c>)
   16954:	47a8      	blx	r5
	
	// 7. Compare crc with crc from the
	if (crc_on_server == crc_downloaded_in_sd_card)	
   16956:	9b05      	ldr	r3, [sp, #20]
   16958:	1b18      	subs	r0, r3, r4
		return 0;
   1695a:	4243      	negs	r3, r0
   1695c:	4158      	adcs	r0, r3
		return 1; 
	else
		return 0;
}
   1695e:	b006      	add	sp, #24
   16960:	bc04      	pop	{r2}
   16962:	4691      	mov	r9, r2
   16964:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16966:	46c0      	nop			; (mov r8, r8)
   16968:	0001d7bc 	.word	0x0001d7bc
   1696c:	0001916d 	.word	0x0001916d
   16970:	20000160 	.word	0x20000160
   16974:	00013105 	.word	0x00013105
   16978:	20000014 	.word	0x20000014
   1697c:	000166e5 	.word	0x000166e5
   16980:	20000c24 	.word	0x20000c24
   16984:	00012aed 	.word	0x00012aed
   16988:	200012d8 	.word	0x200012d8
   1698c:	0001d824 	.word	0x0001d824
   16990:	00012c75 	.word	0x00012c75
   16994:	0001d7f8 	.word	0x0001d7f8
   16998:	2000145c 	.word	0x2000145c
   1699c:	0000e9e9 	.word	0x0000e9e9
   169a0:	000130ed 	.word	0x000130ed
   169a4:	0001d84c 	.word	0x0001d84c
   169a8:	000131dd 	.word	0x000131dd
   169ac:	00018f59 	.word	0x00018f59
   169b0:	0001d85c 	.word	0x0001d85c

000169b4 <otafu_download>:

/** 
************************ MAIN OTAFU LOGIC *****************************
*/ 
int otafu_download()
{
   169b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   169b6:	b083      	sub	sp, #12
	int new_ver_num = 0;
	char user_reponse;
	int download_attempts = 0;

	printf("otafu_download: Downloading update version ..... \n\r");
   169b8:	4822      	ldr	r0, [pc, #136]	; (16a44 <otafu_download+0x90>)
   169ba:	4b23      	ldr	r3, [pc, #140]	; (16a48 <otafu_download+0x94>)
   169bc:	4798      	blx	r3
 	
 	if( (new_ver_num = otafu_version_check()) == 0)
   169be:	4b23      	ldr	r3, [pc, #140]	; (16a4c <otafu_download+0x98>)
   169c0:	4798      	blx	r3
   169c2:	1e04      	subs	r4, r0, #0
   169c4:	d01a      	beq.n	169fc <otafu_download+0x48>
		 //Disable socket for HTTP Transfer
		 socketDeinit();
 		return 0;
 	}
		
 	printf("otafu_download: New Firmware Available, version: %d \n\r",new_ver_num);
   169c6:	0001      	movs	r1, r0
   169c8:	4821      	ldr	r0, [pc, #132]	; (16a50 <otafu_download+0x9c>)
   169ca:	4b1f      	ldr	r3, [pc, #124]	; (16a48 <otafu_download+0x94>)
   169cc:	4798      	blx	r3
 	
 	USER_INPUT:
 	
 	printf("Would you like to download the new version: (y/n) > ");
   169ce:	4e21      	ldr	r6, [pc, #132]	; (16a54 <otafu_download+0xa0>)
   169d0:	4f1d      	ldr	r7, [pc, #116]	; (16a48 <otafu_download+0x94>)
 	scanf("%c",&user_reponse);
   169d2:	4d21      	ldr	r5, [pc, #132]	; (16a58 <otafu_download+0xa4>)
 	printf("Would you like to download the new version: (y/n) > ");
   169d4:	0030      	movs	r0, r6
   169d6:	47b8      	blx	r7
 	scanf("%c",&user_reponse);
   169d8:	466b      	mov	r3, sp
   169da:	1ddc      	adds	r4, r3, #7
   169dc:	0021      	movs	r1, r4
   169de:	0028      	movs	r0, r5
   169e0:	4b1e      	ldr	r3, [pc, #120]	; (16a5c <otafu_download+0xa8>)
   169e2:	4798      	blx	r3
 	printf("%c\n\r",user_reponse);
   169e4:	7821      	ldrb	r1, [r4, #0]
   169e6:	481e      	ldr	r0, [pc, #120]	; (16a60 <otafu_download+0xac>)
   169e8:	47b8      	blx	r7
	 
 	if (user_reponse == 'n')
   169ea:	7823      	ldrb	r3, [r4, #0]
   169ec:	2b6e      	cmp	r3, #110	; 0x6e
   169ee:	d00d      	beq.n	16a0c <otafu_download+0x58>
 	{
 		printf("otafu_download: >> Resuming application\n\r");
 		return 0;
 	}
 	else if (user_reponse == 'y')
   169f0:	2b79      	cmp	r3, #121	; 0x79
   169f2:	d010      	beq.n	16a16 <otafu_download+0x62>
		 socketDeinit();
 		return 0;
 	}
	else
	{
		printf("invalid response, please try again\n\r");
   169f4:	481b      	ldr	r0, [pc, #108]	; (16a64 <otafu_download+0xb0>)
   169f6:	4b14      	ldr	r3, [pc, #80]	; (16a48 <otafu_download+0x94>)
   169f8:	4798      	blx	r3
		goto USER_INPUT;
   169fa:	e7eb      	b.n	169d4 <otafu_download+0x20>
 		printf("otafu_download: >> Resuming application\n\r");
   169fc:	481a      	ldr	r0, [pc, #104]	; (16a68 <otafu_download+0xb4>)
   169fe:	4b12      	ldr	r3, [pc, #72]	; (16a48 <otafu_download+0x94>)
   16a00:	4798      	blx	r3
		 socketDeinit();
   16a02:	4b1a      	ldr	r3, [pc, #104]	; (16a6c <otafu_download+0xb8>)
   16a04:	4798      	blx	r3
	}
}
   16a06:	0020      	movs	r0, r4
   16a08:	b003      	add	sp, #12
   16a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 		printf("otafu_download: >> Resuming application\n\r");
   16a0c:	4816      	ldr	r0, [pc, #88]	; (16a68 <otafu_download+0xb4>)
   16a0e:	4b0e      	ldr	r3, [pc, #56]	; (16a48 <otafu_download+0x94>)
   16a10:	4798      	blx	r3
 		return 0;
   16a12:	2400      	movs	r4, #0
   16a14:	e7f7      	b.n	16a06 <otafu_download+0x52>
   16a16:	2500      	movs	r5, #0
 			if (otafu_firmware_download() == 0)
   16a18:	4e15      	ldr	r6, [pc, #84]	; (16a70 <otafu_download+0xbc>)
 				printf("otafu_download: attempt [%d] > Downloading failed, trying again \n\r",download_attempts);
   16a1a:	4f0b      	ldr	r7, [pc, #44]	; (16a48 <otafu_download+0x94>)
 			if (otafu_firmware_download() == 0)
   16a1c:	47b0      	blx	r6
   16a1e:	1e04      	subs	r4, r0, #0
   16a20:	d10d      	bne.n	16a3e <otafu_download+0x8a>
 				printf("otafu_download: attempt [%d] > Downloading failed, trying again \n\r",download_attempts);
   16a22:	0029      	movs	r1, r5
   16a24:	4813      	ldr	r0, [pc, #76]	; (16a74 <otafu_download+0xc0>)
   16a26:	47b8      	blx	r7
 		for (download_attempts = 0;download_attempts < 3;download_attempts++)
   16a28:	3501      	adds	r5, #1
   16a2a:	2d03      	cmp	r5, #3
   16a2c:	d1f6      	bne.n	16a1c <otafu_download+0x68>
 		printf("otafu_download: >> Downloading failed even after multiple attempts\n\r");
   16a2e:	4812      	ldr	r0, [pc, #72]	; (16a78 <otafu_download+0xc4>)
   16a30:	4d05      	ldr	r5, [pc, #20]	; (16a48 <otafu_download+0x94>)
   16a32:	47a8      	blx	r5
 		printf("otafu_download: >> Resuming application for now\n\r");
   16a34:	4811      	ldr	r0, [pc, #68]	; (16a7c <otafu_download+0xc8>)
   16a36:	47a8      	blx	r5
		 socketDeinit();
   16a38:	4b0c      	ldr	r3, [pc, #48]	; (16a6c <otafu_download+0xb8>)
   16a3a:	4798      	blx	r3
 		return 0;
   16a3c:	e7e3      	b.n	16a06 <otafu_download+0x52>
 				return 1;
   16a3e:	2401      	movs	r4, #1
   16a40:	e7e1      	b.n	16a06 <otafu_download+0x52>
   16a42:	46c0      	nop			; (mov r8, r8)
   16a44:	0001d560 	.word	0x0001d560
   16a48:	0001916d 	.word	0x0001916d
   16a4c:	000167a9 	.word	0x000167a9
   16a50:	0001d5c0 	.word	0x0001d5c0
   16a54:	0001d5f8 	.word	0x0001d5f8
   16a58:	0001d630 	.word	0x0001d630
   16a5c:	00019321 	.word	0x00019321
   16a60:	0001d634 	.word	0x0001d634
   16a64:	0001d6fc 	.word	0x0001d6fc
   16a68:	0001d594 	.word	0x0001d594
   16a6c:	0000e42d 	.word	0x0000e42d
   16a70:	00016865 	.word	0x00016865
   16a74:	0001d63c 	.word	0x0001d63c
   16a78:	0001d680 	.word	0x0001d680
   16a7c:	0001d6c8 	.word	0x0001d6c8

00016a80 <otafu>:

// OTAFU trigger check > MQTT request
void otafu()
{
   16a80:	b570      	push	{r4, r5, r6, lr}
   16a82:	b082      	sub	sp, #8
	if(otafu_download() == 0)   
   16a84:	4b14      	ldr	r3, [pc, #80]	; (16ad8 <otafu+0x58>)
   16a86:	4798      	blx	r3
   16a88:	2800      	cmp	r0, #0
   16a8a:	d101      	bne.n	16a90 <otafu+0x10>
		} while (error_code == STATUS_BUSY);
				
		// 2. jump to bootloader // Software reset
		NVIC_SystemReset();		
	}			
}
   16a8c:	b002      	add	sp, #8
   16a8e:	bd70      	pop	{r4, r5, r6, pc}
		printf(">> New Firmware Downloaded \n\r Device Reseting .... \n\r");
   16a90:	4812      	ldr	r0, [pc, #72]	; (16adc <otafu+0x5c>)
   16a92:	4b13      	ldr	r3, [pc, #76]	; (16ae0 <otafu+0x60>)
   16a94:	4798      	blx	r3
		socketDeinit();
   16a96:	4b13      	ldr	r3, [pc, #76]	; (16ae4 <otafu+0x64>)
   16a98:	4798      	blx	r3
		uint8_t otaflag = 1;
   16a9a:	2201      	movs	r2, #1
   16a9c:	466b      	mov	r3, sp
   16a9e:	71da      	strb	r2, [r3, #7]
			error_code = nvm_erase_row(OTAFU_ADDRESS);
   16aa0:	269b      	movs	r6, #155	; 0x9b
   16aa2:	0236      	lsls	r6, r6, #8
   16aa4:	4d10      	ldr	r5, [pc, #64]	; (16ae8 <otafu+0x68>)
   16aa6:	4c11      	ldr	r4, [pc, #68]	; (16aec <otafu+0x6c>)
   16aa8:	0030      	movs	r0, r6
   16aaa:	47a8      	blx	r5
   16aac:	7020      	strb	r0, [r4, #0]
		} while (error_code == STATUS_BUSY);
   16aae:	2805      	cmp	r0, #5
   16ab0:	d0fa      	beq.n	16aa8 <otafu+0x28>
			error_code = nvm_write_buffer(OTAFU_ADDRESS,&otaflag,1);
   16ab2:	4d0f      	ldr	r5, [pc, #60]	; (16af0 <otafu+0x70>)
   16ab4:	4c0d      	ldr	r4, [pc, #52]	; (16aec <otafu+0x6c>)
   16ab6:	2201      	movs	r2, #1
   16ab8:	466b      	mov	r3, sp
   16aba:	1dd9      	adds	r1, r3, #7
   16abc:	209b      	movs	r0, #155	; 0x9b
   16abe:	0200      	lsls	r0, r0, #8
   16ac0:	47a8      	blx	r5
   16ac2:	7020      	strb	r0, [r4, #0]
		} while (error_code == STATUS_BUSY);
   16ac4:	2805      	cmp	r0, #5
   16ac6:	d0f6      	beq.n	16ab6 <otafu+0x36>
  __ASM volatile ("dsb");
   16ac8:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   16acc:	4a09      	ldr	r2, [pc, #36]	; (16af4 <otafu+0x74>)
   16ace:	4b0a      	ldr	r3, [pc, #40]	; (16af8 <otafu+0x78>)
   16ad0:	60da      	str	r2, [r3, #12]
   16ad2:	f3bf 8f4f 	dsb	sy
   16ad6:	e7fe      	b.n	16ad6 <otafu+0x56>
   16ad8:	000169b5 	.word	0x000169b5
   16adc:	0001d528 	.word	0x0001d528
   16ae0:	0001916d 	.word	0x0001916d
   16ae4:	0000e42d 	.word	0x0000e42d
   16ae8:	0000f009 	.word	0x0000f009
   16aec:	200014a8 	.word	0x200014a8
   16af0:	0000eef5 	.word	0x0000eef5
   16af4:	05fa0004 	.word	0x05fa0004
   16af8:	e000ed00 	.word	0xe000ed00

00016afc <main>:
/////////////////////////////////////////////////////////////////////////////
///* ...... MAIN ........ *
////////////////////////////////////////////////////////////////////////////

int main(void)
{
   16afc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16afe:	46c6      	mov	lr, r8
   16b00:	b500      	push	{lr}
   16b02:	b098      	sub	sp, #96	; 0x60
	down_state = NOT_READY;
   16b04:	2400      	movs	r4, #0
   16b06:	2600      	movs	r6, #0
   16b08:	4bd4      	ldr	r3, [pc, #848]	; (16e5c <main+0x360>)
   16b0a:	701c      	strb	r4, [r3, #0]
	/** INITIALIZATING THE BOARD AND PERIPHERALS */
	tstrWifiInitParam param;
	int8_t ret;
	init_state();
	
	system_init();													/* Initialize the board. */	
   16b0c:	4bd4      	ldr	r3, [pc, #848]	; (16e60 <main+0x364>)
   16b0e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   16b10:	aa02      	add	r2, sp, #8
   16b12:	2380      	movs	r3, #128	; 0x80
   16b14:	05db      	lsls	r3, r3, #23
   16b16:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   16b18:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
   16b1a:	23ff      	movs	r3, #255	; 0xff
   16b1c:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
   16b1e:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   16b20:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   16b22:	2501      	movs	r5, #1
   16b24:	3bdb      	subs	r3, #219	; 0xdb
   16b26:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
   16b28:	3301      	adds	r3, #1
   16b2a:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
   16b2c:	3301      	adds	r3, #1
   16b2e:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
   16b30:	3301      	adds	r3, #1
   16b32:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
   16b34:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   16b36:	3305      	adds	r3, #5
   16b38:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
   16b3a:	3301      	adds	r3, #1
   16b3c:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   16b3e:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   16b40:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   16b42:	2300      	movs	r3, #0
   16b44:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   16b46:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   16b48:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   16b4a:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
   16b4c:	2313      	movs	r3, #19
   16b4e:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   16b50:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   16b52:	23c4      	movs	r3, #196	; 0xc4
   16b54:	039b      	lsls	r3, r3, #14
   16b56:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   16b58:	2301      	movs	r3, #1
   16b5a:	425b      	negs	r3, r3
   16b5c:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   16b5e:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   16b60:	4bc0      	ldr	r3, [pc, #768]	; (16e64 <main+0x368>)
   16b62:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   16b64:	4bc0      	ldr	r3, [pc, #768]	; (16e68 <main+0x36c>)
   16b66:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   16b68:	23e1      	movs	r3, #225	; 0xe1
   16b6a:	025b      	lsls	r3, r3, #9
   16b6c:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
   16b6e:	4cbf      	ldr	r4, [pc, #764]	; (16e6c <main+0x370>)
   16b70:	4bbf      	ldr	r3, [pc, #764]	; (16e70 <main+0x374>)
   16b72:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   16b74:	49bf      	ldr	r1, [pc, #764]	; (16e74 <main+0x378>)
   16b76:	4bc0      	ldr	r3, [pc, #768]	; (16e78 <main+0x37c>)
   16b78:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   16b7a:	49c0      	ldr	r1, [pc, #768]	; (16e7c <main+0x380>)
   16b7c:	4bc0      	ldr	r3, [pc, #768]	; (16e80 <main+0x384>)
   16b7e:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
   16b80:	49c0      	ldr	r1, [pc, #768]	; (16e84 <main+0x388>)
   16b82:	0020      	movs	r0, r4
   16b84:	4bc0      	ldr	r3, [pc, #768]	; (16e88 <main+0x38c>)
   16b86:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   16b88:	4fc0      	ldr	r7, [pc, #768]	; (16e8c <main+0x390>)
   16b8a:	683b      	ldr	r3, [r7, #0]
   16b8c:	6898      	ldr	r0, [r3, #8]
   16b8e:	2100      	movs	r1, #0
   16b90:	4ebf      	ldr	r6, [pc, #764]	; (16e90 <main+0x394>)
   16b92:	47b0      	blx	r6
	setbuf(stdin, NULL);
   16b94:	683b      	ldr	r3, [r7, #0]
   16b96:	6858      	ldr	r0, [r3, #4]
   16b98:	2100      	movs	r1, #0
   16b9a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   16b9c:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   16b9e:	0030      	movs	r0, r6
   16ba0:	4bbc      	ldr	r3, [pc, #752]	; (16e94 <main+0x398>)
   16ba2:	4798      	blx	r3
   16ba4:	231f      	movs	r3, #31
   16ba6:	4018      	ands	r0, r3
   16ba8:	4085      	lsls	r5, r0
   16baa:	4bbb      	ldr	r3, [pc, #748]	; (16e98 <main+0x39c>)
   16bac:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   16bae:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
   16bb0:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   16bb2:	2a00      	cmp	r2, #0
   16bb4:	d1fc      	bne.n	16bb0 <main+0xb4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   16bb6:	6833      	ldr	r3, [r6, #0]
   16bb8:	3202      	adds	r2, #2
   16bba:	4313      	orrs	r3, r2
   16bbc:	6033      	str	r3, [r6, #0]
	configure_console();											/* Initialize the UART console. */
	
	printf(STRING_HEADER);
   16bbe:	48b7      	ldr	r0, [pc, #732]	; (16e9c <main+0x3a0>)
   16bc0:	4cb7      	ldr	r4, [pc, #732]	; (16ea0 <main+0x3a4>)
   16bc2:	47a0      	blx	r4
	printf("\r\nmain: Initializing Board and peripherals for application...... \r\n\r\n");
   16bc4:	48b7      	ldr	r0, [pc, #732]	; (16ea4 <main+0x3a8>)
   16bc6:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
   16bc8:	a802      	add	r0, sp, #8
   16bca:	4bb7      	ldr	r3, [pc, #732]	; (16ea8 <main+0x3ac>)
   16bcc:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   16bce:	4db7      	ldr	r5, [pc, #732]	; (16eac <main+0x3b0>)
   16bd0:	a902      	add	r1, sp, #8
   16bd2:	0028      	movs	r0, r5
   16bd4:	4bb6      	ldr	r3, [pc, #728]	; (16eb0 <main+0x3b4>)
   16bd6:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   16bd8:	0028      	movs	r0, r5
   16bda:	4bb6      	ldr	r3, [pc, #728]	; (16eb4 <main+0x3b8>)
   16bdc:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   16bde:	4cb6      	ldr	r4, [pc, #728]	; (16eb8 <main+0x3bc>)
   16be0:	0020      	movs	r0, r4
   16be2:	4bb6      	ldr	r3, [pc, #728]	; (16ebc <main+0x3c0>)
   16be4:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16be6:	4bb6      	ldr	r3, [pc, #728]	; (16ec0 <main+0x3c4>)
   16be8:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   16bea:	6065      	str	r5, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16bec:	0021      	movs	r1, r4
   16bee:	48b5      	ldr	r0, [pc, #724]	; (16ec4 <main+0x3c8>)
   16bf0:	4bb5      	ldr	r3, [pc, #724]	; (16ec8 <main+0x3cc>)
   16bf2:	4798      	blx	r3
   16bf4:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   16bf6:	da03      	bge.n	16c00 <main+0x104>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16bf8:	48b4      	ldr	r0, [pc, #720]	; (16ecc <main+0x3d0>)
   16bfa:	4bb5      	ldr	r3, [pc, #724]	; (16ed0 <main+0x3d4>)
   16bfc:	4798      	blx	r3
   16bfe:	e7fe      	b.n	16bfe <main+0x102>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   16c00:	49b4      	ldr	r1, [pc, #720]	; (16ed4 <main+0x3d8>)
   16c02:	48b0      	ldr	r0, [pc, #704]	; (16ec4 <main+0x3c8>)
   16c04:	4bb4      	ldr	r3, [pc, #720]	; (16ed8 <main+0x3dc>)
   16c06:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   16c08:	4cb4      	ldr	r4, [pc, #720]	; (16edc <main+0x3e0>)
   16c0a:	0020      	movs	r0, r4
   16c0c:	4bb4      	ldr	r3, [pc, #720]	; (16ee0 <main+0x3e4>)
   16c0e:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   16c10:	4bb4      	ldr	r3, [pc, #720]	; (16ee4 <main+0x3e8>)
   16c12:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16c14:	2380      	movs	r3, #128	; 0x80
   16c16:	009b      	lsls	r3, r3, #2
   16c18:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   16c1a:	4ab3      	ldr	r2, [pc, #716]	; (16ee8 <main+0x3ec>)
   16c1c:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16c1e:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   16c20:	4bb2      	ldr	r3, [pc, #712]	; (16eec <main+0x3f0>)
   16c22:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
   16c24:	4bb2      	ldr	r3, [pc, #712]	; (16ef0 <main+0x3f4>)
   16c26:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   16c28:	0021      	movs	r1, r4
   16c2a:	48b2      	ldr	r0, [pc, #712]	; (16ef4 <main+0x3f8>)
   16c2c:	4bb2      	ldr	r3, [pc, #712]	; (16ef8 <main+0x3fc>)
   16c2e:	4798      	blx	r3
   16c30:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   16c32:	da03      	bge.n	16c3c <main+0x140>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   16c34:	48b1      	ldr	r0, [pc, #708]	; (16efc <main+0x400>)
   16c36:	4ba6      	ldr	r3, [pc, #664]	; (16ed0 <main+0x3d4>)
   16c38:	4798      	blx	r3
   16c3a:	e7fe      	b.n	16c3a <main+0x13e>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   16c3c:	49b0      	ldr	r1, [pc, #704]	; (16f00 <main+0x404>)
   16c3e:	48ad      	ldr	r0, [pc, #692]	; (16ef4 <main+0x3f8>)
   16c40:	4bb0      	ldr	r3, [pc, #704]	; (16f04 <main+0x408>)
   16c42:	4798      	blx	r3
   16c44:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   16c46:	da03      	bge.n	16c50 <main+0x154>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   16c48:	48af      	ldr	r0, [pc, #700]	; (16f08 <main+0x40c>)
   16c4a:	4ba1      	ldr	r3, [pc, #644]	; (16ed0 <main+0x3d4>)
   16c4c:	4798      	blx	r3
   16c4e:	e7fe      	b.n	16c4e <main+0x152>
//	NVIC_SystemReset();					// Reset testing
	
 	configure_timer();												/* Initialize the Timer. */	
 	configure_http_client();										/* Initialize the HTTP client service. */
 	configure_mqtt();												/* Initialize the MQTT service. */
 	nm_bsp_init();													/* Initialize the BSP. */
   16c50:	4bae      	ldr	r3, [pc, #696]	; (16f0c <main+0x410>)
   16c52:	4798      	blx	r3
 	
 	delay_init();													/* Initialize delay */
   16c54:	4bae      	ldr	r3, [pc, #696]	; (16f10 <main+0x414>)
   16c56:	4798      	blx	r3
	sd_mmc_init();
   16c58:	4bae      	ldr	r3, [pc, #696]	; (16f14 <main+0x418>)
   16c5a:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");
   16c5c:	48ae      	ldr	r0, [pc, #696]	; (16f18 <main+0x41c>)
   16c5e:	4b90      	ldr	r3, [pc, #576]	; (16ea0 <main+0x3a4>)
   16c60:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
   16c62:	4dae      	ldr	r5, [pc, #696]	; (16f1c <main+0x420>)
				printf("init_storage: SD Card install failed.\r\n");
   16c64:	4c8e      	ldr	r4, [pc, #568]	; (16ea0 <main+0x3a4>)
			status = sd_mmc_test_unit_ready(0);
   16c66:	2000      	movs	r0, #0
   16c68:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
   16c6a:	2801      	cmp	r0, #1
   16c6c:	d109      	bne.n	16c82 <main+0x186>
				printf("init_storage: SD Card install failed.\r\n");
   16c6e:	48ac      	ldr	r0, [pc, #688]	; (16f20 <main+0x424>)
   16c70:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
   16c72:	48ac      	ldr	r0, [pc, #688]	; (16f24 <main+0x428>)
   16c74:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   16c76:	4eac      	ldr	r6, [pc, #688]	; (16f28 <main+0x42c>)
   16c78:	2000      	movs	r0, #0
   16c7a:	47b0      	blx	r6
   16c7c:	2802      	cmp	r0, #2
   16c7e:	d1fb      	bne.n	16c78 <main+0x17c>
   16c80:	e7f1      	b.n	16c66 <main+0x16a>
		} while (CTRL_GOOD != status);
   16c82:	2800      	cmp	r0, #0
   16c84:	d1ef      	bne.n	16c66 <main+0x16a>
		printf("init_storage: mounting SD card...\r\n");
   16c86:	48a9      	ldr	r0, [pc, #676]	; (16f2c <main+0x430>)
   16c88:	4b85      	ldr	r3, [pc, #532]	; (16ea0 <main+0x3a4>)
   16c8a:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   16c8c:	4ca8      	ldr	r4, [pc, #672]	; (16f30 <main+0x434>)
   16c8e:	228c      	movs	r2, #140	; 0x8c
   16c90:	0092      	lsls	r2, r2, #2
   16c92:	2100      	movs	r1, #0
   16c94:	0020      	movs	r0, r4
   16c96:	4ba7      	ldr	r3, [pc, #668]	; (16f34 <main+0x438>)
   16c98:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   16c9a:	0021      	movs	r1, r4
   16c9c:	2000      	movs	r0, #0
   16c9e:	4ba6      	ldr	r3, [pc, #664]	; (16f38 <main+0x43c>)
   16ca0:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   16ca2:	280b      	cmp	r0, #11
   16ca4:	d11d      	bne.n	16ce2 <main+0x1e6>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
   16ca6:	210b      	movs	r1, #11
   16ca8:	48a4      	ldr	r0, [pc, #656]	; (16f3c <main+0x440>)
   16caa:	4b89      	ldr	r3, [pc, #548]	; (16ed0 <main+0x3d4>)
   16cac:	4798      	blx	r3
 	
 	init_storage();													/* Initialize SD/MMC storage. */
 	
 	configure_extint_channel();										/*Initialize BUTTON 0 as an external interrupt*/
   16cae:	4ba4      	ldr	r3, [pc, #656]	; (16f40 <main+0x444>)
   16cb0:	4798      	blx	r3
 	configure_extint_callbacks();
   16cb2:	4ba4      	ldr	r3, [pc, #656]	; (16f44 <main+0x448>)
   16cb4:	4798      	blx	r3
 
 	configure_nvm();												/*Initialize NVM */										
   16cb6:	4ba4      	ldr	r3, [pc, #656]	; (16f48 <main+0x44c>)
   16cb8:	4798      	blx	r3
	
	configure_i2c();												/* I2C configuration for camera */
   16cba:	4ba4      	ldr	r3, [pc, #656]	; (16f4c <main+0x450>)
   16cbc:	4798      	blx	r3
	configure_i2c_callbacks();
   16cbe:	4ba4      	ldr	r3, [pc, #656]	; (16f50 <main+0x454>)
   16cc0:	4798      	blx	r3
	
 	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));		// Initialize Wi-Fi parameters structure. 
   16cc2:	2218      	movs	r2, #24
   16cc4:	2100      	movs	r1, #0
   16cc6:	a812      	add	r0, sp, #72	; 0x48
   16cc8:	4b9a      	ldr	r3, [pc, #616]	; (16f34 <main+0x438>)
   16cca:	4798      	blx	r3
 
	param.pfAppWifiCb = wifi_cb;									// Initialize Wi-Fi driver with data and status callbacks. 
   16ccc:	4ba1      	ldr	r3, [pc, #644]	; (16f54 <main+0x458>)
   16cce:	9312      	str	r3, [sp, #72]	; 0x48
	ret = m2m_wifi_init(&param);
   16cd0:	a812      	add	r0, sp, #72	; 0x48
   16cd2:	4ba1      	ldr	r3, [pc, #644]	; (16f58 <main+0x45c>)
   16cd4:	4798      	blx	r3
   16cd6:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) 
   16cd8:	d00a      	beq.n	16cf0 <main+0x1f4>
	{
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16cda:	48a0      	ldr	r0, [pc, #640]	; (16f5c <main+0x460>)
   16cdc:	4b7c      	ldr	r3, [pc, #496]	; (16ed0 <main+0x3d4>)
   16cde:	4798      	blx	r3
   16ce0:	e7fe      	b.n	16ce0 <main+0x1e4>
		printf("init_storage: SD card mount OK.\r\n");
   16ce2:	489f      	ldr	r0, [pc, #636]	; (16f60 <main+0x464>)
   16ce4:	4b6e      	ldr	r3, [pc, #440]	; (16ea0 <main+0x3a4>)
   16ce6:	4798      	blx	r3
		add_state(STORAGE_READY);
   16ce8:	2001      	movs	r0, #1
   16cea:	4b9e      	ldr	r3, [pc, #632]	; (16f64 <main+0x468>)
   16cec:	4798      	blx	r3
   16cee:	e7de      	b.n	16cae <main+0x1b2>
   16cf0:	2000      	movs	r0, #0
   16cf2:	4b9d      	ldr	r3, [pc, #628]	; (16f68 <main+0x46c>)
   16cf4:	4798      	blx	r3
   16cf6:	4b9d      	ldr	r3, [pc, #628]	; (16f6c <main+0x470>)
   16cf8:	7a1b      	ldrb	r3, [r3, #8]
   16cfa:	b2db      	uxtb	r3, r3
   16cfc:	40d8      	lsrs	r0, r3
		while (1);
	}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
   16cfe:	21fa      	movs	r1, #250	; 0xfa
   16d00:	0089      	lsls	r1, r1, #2
   16d02:	4b9b      	ldr	r3, [pc, #620]	; (16f70 <main+0x474>)
   16d04:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   16d06:	3801      	subs	r0, #1
   16d08:	4b9a      	ldr	r3, [pc, #616]	; (16f74 <main+0x478>)
   16d0a:	4298      	cmp	r0, r3
   16d0c:	d900      	bls.n	16d10 <main+0x214>
   16d0e:	e0a1      	b.n	16e54 <main+0x358>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   16d10:	4a99      	ldr	r2, [pc, #612]	; (16f78 <main+0x47c>)
   16d12:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
   16d14:	4899      	ldr	r0, [pc, #612]	; (16f7c <main+0x480>)
   16d16:	6a03      	ldr	r3, [r0, #32]
   16d18:	021b      	lsls	r3, r3, #8
   16d1a:	0a1b      	lsrs	r3, r3, #8
   16d1c:	21c0      	movs	r1, #192	; 0xc0
   16d1e:	0609      	lsls	r1, r1, #24
   16d20:	430b      	orrs	r3, r1
   16d22:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   16d24:	2500      	movs	r5, #0
   16d26:	6095      	str	r5, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   16d28:	2307      	movs	r3, #7
   16d2a:	6013      	str	r3, [r2, #0]
	{
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}
	
	printf("\n\rmain: >> Board and peripherals initialized\n\r");
   16d2c:	4894      	ldr	r0, [pc, #592]	; (16f80 <main+0x484>)
   16d2e:	4e68      	ldr	r6, [pc, #416]	; (16ed0 <main+0x3d4>)
   16d30:	47b0      	blx	r6
	
	/** INITIALIZATION COMPLETE */	

	delay_s(2);
   16d32:	20fa      	movs	r0, #250	; 0xfa
   16d34:	00c0      	lsls	r0, r0, #3
   16d36:	4c93      	ldr	r4, [pc, #588]	; (16f84 <main+0x488>)
   16d38:	47a0      	blx	r4
	
	//CONNECT TO MQTT BROKER
	do_download_flag = false;    // Flag false indicating that mqtt broker to be contacted 
   16d3a:	4b93      	ldr	r3, [pc, #588]	; (16f88 <main+0x48c>)
   16d3c:	701d      	strb	r5, [r3, #0]
	
	socketInit();
   16d3e:	4b93      	ldr	r3, [pc, #588]	; (16f8c <main+0x490>)
   16d40:	4798      	blx	r3
	registerSocketCallback(socket_event_handler,socket_resolve_handler);
   16d42:	4993      	ldr	r1, [pc, #588]	; (16f90 <main+0x494>)
   16d44:	4893      	ldr	r0, [pc, #588]	; (16f94 <main+0x498>)
   16d46:	4b94      	ldr	r3, [pc, #592]	; (16f98 <main+0x49c>)
   16d48:	4798      	blx	r3
	
	//Connect to router. 
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   16d4a:	4d94      	ldr	r5, [pc, #592]	; (16f9c <main+0x4a0>)
   16d4c:	0029      	movs	r1, r5
   16d4e:	4894      	ldr	r0, [pc, #592]	; (16fa0 <main+0x4a4>)
   16d50:	47b0      	blx	r6
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16d52:	23ff      	movs	r3, #255	; 0xff
   16d54:	9300      	str	r3, [sp, #0]
   16d56:	4b93      	ldr	r3, [pc, #588]	; (16fa4 <main+0x4a8>)
   16d58:	2202      	movs	r2, #2
   16d5a:	2112      	movs	r1, #18
   16d5c:	0028      	movs	r0, r5
   16d5e:	4d92      	ldr	r5, [pc, #584]	; (16fa8 <main+0x4ac>)
   16d60:	47a8      	blx	r5
 	
	delay_s(1); 
   16d62:	20fa      	movs	r0, #250	; 0xfa
   16d64:	0080      	lsls	r0, r0, #2
   16d66:	47a0      	blx	r4
	 
	while(1)
	{
		m2m_wifi_handle_events(NULL);
   16d68:	4b90      	ldr	r3, [pc, #576]	; (16fac <main+0x4b0>)
   16d6a:	4698      	mov	r8, r3
		sw_timer_task(&swt_module_inst);
   16d6c:	4f90      	ldr	r7, [pc, #576]	; (16fb0 <main+0x4b4>)
   16d6e:	e023      	b.n	16db8 <main+0x2bc>
		}
		 
		//OTAFU
		if ((OTAFU_REQ == true)&&(START_BUTTON == false))
		{
			mqtt_disconnect(&mqtt_inst, main_mqtt_broker);
   16d70:	4d90      	ldr	r5, [pc, #576]	; (16fb4 <main+0x4b8>)
   16d72:	4c60      	ldr	r4, [pc, #384]	; (16ef4 <main+0x3f8>)
   16d74:	0029      	movs	r1, r5
   16d76:	0020      	movs	r0, r4
   16d78:	4b8f      	ldr	r3, [pc, #572]	; (16fb8 <main+0x4bc>)
   16d7a:	4798      	blx	r3
			socketDeinit();
   16d7c:	4b8f      	ldr	r3, [pc, #572]	; (16fbc <main+0x4c0>)
   16d7e:	4798      	blx	r3
			
			// THE OTAFU OPERATION call
			otafu();
   16d80:	4b8f      	ldr	r3, [pc, #572]	; (16fc0 <main+0x4c4>)
   16d82:	4798      	blx	r3
			
			OTAFU_REQ = false;
   16d84:	2300      	movs	r3, #0
   16d86:	4a8f      	ldr	r2, [pc, #572]	; (16fc4 <main+0x4c8>)
   16d88:	7013      	strb	r3, [r2, #0]
			do_download_flag = false;
   16d8a:	4a7f      	ldr	r2, [pc, #508]	; (16f88 <main+0x48c>)
   16d8c:	7013      	strb	r3, [r2, #0]
			socketInit();
   16d8e:	4b7f      	ldr	r3, [pc, #508]	; (16f8c <main+0x490>)
   16d90:	4798      	blx	r3
			registerSocketCallback(socket_event_handler,socket_resolve_handler);
   16d92:	497f      	ldr	r1, [pc, #508]	; (16f90 <main+0x494>)
   16d94:	487f      	ldr	r0, [pc, #508]	; (16f94 <main+0x498>)
   16d96:	4b80      	ldr	r3, [pc, #512]	; (16f98 <main+0x49c>)
   16d98:	4798      	blx	r3
			if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   16d9a:	0029      	movs	r1, r5
   16d9c:	0020      	movs	r0, r4
   16d9e:	4b8a      	ldr	r3, [pc, #552]	; (16fc8 <main+0x4cc>)
   16da0:	4798      	blx	r3
   16da2:	2800      	cmp	r0, #0
   16da4:	d14d      	bne.n	16e42 <main+0x346>
				printf("Error connecting to MQTT Broker!\r\n");
			}
		}
		
		//START/STOP OP
		if(START_BUTTON)
   16da6:	4b89      	ldr	r3, [pc, #548]	; (16fcc <main+0x4d0>)
   16da8:	781b      	ldrb	r3, [r3, #0]
   16daa:	2b00      	cmp	r3, #0
   16dac:	d130      	bne.n	16e10 <main+0x314>
			snprintf(mqtt_msg,63,"{\"d\":{\"temp\":%d}}",temperature);
			mqtt_publish(&mqtt_inst, TEMP_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
		}

					//Handle MQTT messages
					if(mqtt_inst.isConnected)
   16dae:	2334      	movs	r3, #52	; 0x34
   16db0:	4a50      	ldr	r2, [pc, #320]	; (16ef4 <main+0x3f8>)
   16db2:	5cd3      	ldrb	r3, [r2, r3]
   16db4:	2b00      	cmp	r3, #0
   16db6:	d148      	bne.n	16e4a <main+0x34e>
		m2m_wifi_handle_events(NULL);
   16db8:	2000      	movs	r0, #0
   16dba:	47c0      	blx	r8
		sw_timer_task(&swt_module_inst);
   16dbc:	483b      	ldr	r0, [pc, #236]	; (16eac <main+0x3b0>)
   16dbe:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
   16dc0:	4c83      	ldr	r4, [pc, #524]	; (16fd0 <main+0x4d4>)
   16dc2:	2580      	movs	r5, #128	; 0x80
   16dc4:	042d      	lsls	r5, r5, #16
   16dc6:	61a5      	str	r5, [r4, #24]
		delay_ms(200);			
   16dc8:	20c8      	movs	r0, #200	; 0xc8
   16dca:	4b6e      	ldr	r3, [pc, #440]	; (16f84 <main+0x488>)
   16dcc:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   16dce:	6165      	str	r5, [r4, #20]
		if(isPressed == true) 
   16dd0:	4b80      	ldr	r3, [pc, #512]	; (16fd4 <main+0x4d8>)
   16dd2:	781b      	ldrb	r3, [r3, #0]
   16dd4:	2b00      	cmp	r3, #0
   16dd6:	d013      	beq.n	16e00 <main+0x304>
			printf("CLI command line active \n\r type 'help' for the command list\n\r");
   16dd8:	487f      	ldr	r0, [pc, #508]	; (16fd8 <main+0x4dc>)
   16dda:	4b3d      	ldr	r3, [pc, #244]	; (16ed0 <main+0x3d4>)
   16ddc:	4798      	blx	r3
				printf("delos_inc > ");
   16dde:	4d7f      	ldr	r5, [pc, #508]	; (16fdc <main+0x4e0>)
   16de0:	4e3b      	ldr	r6, [pc, #236]	; (16ed0 <main+0x3d4>)
				response = cli(mqtt_msg);
   16de2:	4c7f      	ldr	r4, [pc, #508]	; (16fe0 <main+0x4e4>)
				printf("delos_inc > ");
   16de4:	0028      	movs	r0, r5
   16de6:	47b0      	blx	r6
				response = cli(mqtt_msg);
   16de8:	0020      	movs	r0, r4
   16dea:	4b7e      	ldr	r3, [pc, #504]	; (16fe4 <main+0x4e8>)
   16dec:	4798      	blx	r3
			while(response != 1)
   16dee:	b2c0      	uxtb	r0, r0
   16df0:	2801      	cmp	r0, #1
   16df2:	d1f7      	bne.n	16de4 <main+0x2e8>
			isPressed = false;
   16df4:	2200      	movs	r2, #0
   16df6:	4b77      	ldr	r3, [pc, #476]	; (16fd4 <main+0x4d8>)
   16df8:	701a      	strb	r2, [r3, #0]
			printf("CLI Exited \n\r");
   16dfa:	487b      	ldr	r0, [pc, #492]	; (16fe8 <main+0x4ec>)
   16dfc:	4b34      	ldr	r3, [pc, #208]	; (16ed0 <main+0x3d4>)
   16dfe:	4798      	blx	r3
		if ((OTAFU_REQ == true)&&(START_BUTTON == false))
   16e00:	4b70      	ldr	r3, [pc, #448]	; (16fc4 <main+0x4c8>)
   16e02:	781b      	ldrb	r3, [r3, #0]
   16e04:	2b00      	cmp	r3, #0
   16e06:	d0ce      	beq.n	16da6 <main+0x2aa>
   16e08:	4b70      	ldr	r3, [pc, #448]	; (16fcc <main+0x4d0>)
   16e0a:	781b      	ldrb	r3, [r3, #0]
   16e0c:	2b00      	cmp	r3, #0
   16e0e:	d0af      	beq.n	16d70 <main+0x274>
			temperature = thercam_read();
   16e10:	4b76      	ldr	r3, [pc, #472]	; (16fec <main+0x4f0>)
   16e12:	4798      	blx	r3
   16e14:	4b76      	ldr	r3, [pc, #472]	; (16ff0 <main+0x4f4>)
   16e16:	6018      	str	r0, [r3, #0]
			snprintf(mqtt_msg,63,"{\"d\":{\"temp\":%d}}",temperature);
   16e18:	681b      	ldr	r3, [r3, #0]
   16e1a:	4c71      	ldr	r4, [pc, #452]	; (16fe0 <main+0x4e4>)
   16e1c:	4a75      	ldr	r2, [pc, #468]	; (16ff4 <main+0x4f8>)
   16e1e:	213f      	movs	r1, #63	; 0x3f
   16e20:	0020      	movs	r0, r4
   16e22:	4d75      	ldr	r5, [pc, #468]	; (16ff8 <main+0x4fc>)
   16e24:	47a8      	blx	r5
			mqtt_publish(&mqtt_inst, TEMP_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   16e26:	0020      	movs	r0, r4
   16e28:	4b74      	ldr	r3, [pc, #464]	; (16ffc <main+0x500>)
   16e2a:	4798      	blx	r3
   16e2c:	0003      	movs	r3, r0
   16e2e:	2200      	movs	r2, #0
   16e30:	9201      	str	r2, [sp, #4]
   16e32:	3202      	adds	r2, #2
   16e34:	9200      	str	r2, [sp, #0]
   16e36:	0022      	movs	r2, r4
   16e38:	4971      	ldr	r1, [pc, #452]	; (17000 <main+0x504>)
   16e3a:	482e      	ldr	r0, [pc, #184]	; (16ef4 <main+0x3f8>)
   16e3c:	4c71      	ldr	r4, [pc, #452]	; (17004 <main+0x508>)
   16e3e:	47a0      	blx	r4
   16e40:	e7b5      	b.n	16dae <main+0x2b2>
				printf("Error connecting to MQTT Broker!\r\n");
   16e42:	4871      	ldr	r0, [pc, #452]	; (17008 <main+0x50c>)
   16e44:	4b16      	ldr	r3, [pc, #88]	; (16ea0 <main+0x3a4>)
   16e46:	4798      	blx	r3
   16e48:	e7ad      	b.n	16da6 <main+0x2aa>
					mqtt_yield(&mqtt_inst, 100);		
   16e4a:	2164      	movs	r1, #100	; 0x64
   16e4c:	0010      	movs	r0, r2
   16e4e:	4b6f      	ldr	r3, [pc, #444]	; (1700c <main+0x510>)
   16e50:	4798      	blx	r3
   16e52:	e7b1      	b.n	16db8 <main+0x2bc>
		puts("ERR>> Systick configuration error\r\n");
   16e54:	486e      	ldr	r0, [pc, #440]	; (17010 <main+0x514>)
   16e56:	4b12      	ldr	r3, [pc, #72]	; (16ea0 <main+0x3a4>)
   16e58:	4798      	blx	r3
   16e5a:	e7fe      	b.n	16e5a <main+0x35e>
   16e5c:	200009f1 	.word	0x200009f1
   16e60:	00010ae5 	.word	0x00010ae5
   16e64:	002a0003 	.word	0x002a0003
   16e68:	002b0003 	.word	0x002b0003
   16e6c:	200009b8 	.word	0x200009b8
   16e70:	2000127c 	.word	0x2000127c
   16e74:	00016151 	.word	0x00016151
   16e78:	20001278 	.word	0x20001278
   16e7c:	00016125 	.word	0x00016125
   16e80:	20001274 	.word	0x20001274
   16e84:	42001800 	.word	0x42001800
   16e88:	0000fdfd 	.word	0x0000fdfd
   16e8c:	20000180 	.word	0x20000180
   16e90:	00019355 	.word	0x00019355
   16e94:	0000f679 	.word	0x0000f679
   16e98:	e000e100 	.word	0xe000e100
   16e9c:	0001d094 	.word	0x0001d094
   16ea0:	00019289 	.word	0x00019289
   16ea4:	0001d104 	.word	0x0001d104
   16ea8:	00015c61 	.word	0x00015c61
   16eac:	2000131c 	.word	0x2000131c
   16eb0:	00015c6d 	.word	0x00015c6d
   16eb4:	00015d19 	.word	0x00015d19
   16eb8:	200012f4 	.word	0x200012f4
   16ebc:	00014c71 	.word	0x00014c71
   16ec0:	000005a6 	.word	0x000005a6
   16ec4:	20001374 	.word	0x20001374
   16ec8:	00014ca1 	.word	0x00014ca1
   16ecc:	0001d14c 	.word	0x0001d14c
   16ed0:	0001916d 	.word	0x0001916d
   16ed4:	00016571 	.word	0x00016571
   16ed8:	00014d55 	.word	0x00014d55
   16edc:	200012dc 	.word	0x200012dc
   16ee0:	00013e21 	.word	0x00013e21
   16ee4:	20000c8c 	.word	0x20000c8c
   16ee8:	20000e8c 	.word	0x20000e8c
   16eec:	00002b1e 	.word	0x00002b1e
   16ef0:	00001770 	.word	0x00001770
   16ef4:	20000c54 	.word	0x20000c54
   16ef8:	00013d69 	.word	0x00013d69
   16efc:	0001d194 	.word	0x0001d194
   16f00:	00016169 	.word	0x00016169
   16f04:	00013e3d 	.word	0x00013e3d
   16f08:	0001d1c8 	.word	0x0001d1c8
   16f0c:	0000b7c5 	.word	0x0000b7c5
   16f10:	0000b745 	.word	0x0000b745
   16f14:	0000a7ad 	.word	0x0000a7ad
   16f18:	0001d1fc 	.word	0x0001d1fc
   16f1c:	0000aee1 	.word	0x0000aee1
   16f20:	0001d234 	.word	0x0001d234
   16f24:	0001d25c 	.word	0x0001d25c
   16f28:	0000a7cd 	.word	0x0000a7cd
   16f2c:	0001d28c 	.word	0x0001d28c
   16f30:	200009f4 	.word	0x200009f4
   16f34:	0001900b 	.word	0x0001900b
   16f38:	00012abd 	.word	0x00012abd
   16f3c:	0001d2b0 	.word	0x0001d2b0
   16f40:	00016665 	.word	0x00016665
   16f44:	00016695 	.word	0x00016695
   16f48:	000166b9 	.word	0x000166b9
   16f4c:	0000a481 	.word	0x0000a481
   16f50:	0000a45d 	.word	0x0000a45d
   16f54:	00016025 	.word	0x00016025
   16f58:	0000c7c1 	.word	0x0000c7c1
   16f5c:	0001d304 	.word	0x0001d304
   16f60:	0001d2e0 	.word	0x0001d2e0
   16f64:	00015e09 	.word	0x00015e09
   16f68:	000108a1 	.word	0x000108a1
   16f6c:	40000400 	.word	0x40000400
   16f70:	00017015 	.word	0x00017015
   16f74:	00ffffff 	.word	0x00ffffff
   16f78:	e000e010 	.word	0xe000e010
   16f7c:	e000ed00 	.word	0xe000ed00
   16f80:	0001d330 	.word	0x0001d330
   16f84:	0000b785 	.word	0x0000b785
   16f88:	200009f0 	.word	0x200009f0
   16f8c:	0000e3e9 	.word	0x0000e3e9
   16f90:	0001600d 	.word	0x0001600d
   16f94:	00016019 	.word	0x00016019
   16f98:	0000e469 	.word	0x0000e469
   16f9c:	0001dbf0 	.word	0x0001dbf0
   16fa0:	0001d360 	.word	0x0001d360
   16fa4:	0001dbe0 	.word	0x0001dbe0
   16fa8:	0000cb91 	.word	0x0000cb91
   16fac:	0000c8f5 	.word	0x0000c8f5
   16fb0:	00015da1 	.word	0x00015da1
   16fb4:	0001d408 	.word	0x0001d408
   16fb8:	00013f29 	.word	0x00013f29
   16fbc:	0000e42d 	.word	0x0000e42d
   16fc0:	00016a81 	.word	0x00016a81
   16fc4:	200009b0 	.word	0x200009b0
   16fc8:	00013e65 	.word	0x00013e65
   16fcc:	200009b1 	.word	0x200009b1
   16fd0:	41004400 	.word	0x41004400
   16fd4:	20000c50 	.word	0x20000c50
   16fd8:	0001d384 	.word	0x0001d384
   16fdc:	0001d3c4 	.word	0x0001d3c4
   16fe0:	20000020 	.word	0x20000020
   16fe4:	000149c5 	.word	0x000149c5
   16fe8:	0001d3d4 	.word	0x0001d3d4
   16fec:	0000a535 	.word	0x0000a535
   16ff0:	2000015c 	.word	0x2000015c
   16ff4:	0001ccc8 	.word	0x0001ccc8
   16ff8:	000194c1 	.word	0x000194c1
   16ffc:	000195c7 	.word	0x000195c7
   17000:	0001ccdc 	.word	0x0001ccdc
   17004:	00013f59 	.word	0x00013f59
   17008:	0001dc2c 	.word	0x0001dc2c
   1700c:	00013fb9 	.word	0x00013fb9
   17010:	0001d3e4 	.word	0x0001d3e4

00017014 <__udivsi3>:
   17014:	2200      	movs	r2, #0
   17016:	0843      	lsrs	r3, r0, #1
   17018:	428b      	cmp	r3, r1
   1701a:	d374      	bcc.n	17106 <__udivsi3+0xf2>
   1701c:	0903      	lsrs	r3, r0, #4
   1701e:	428b      	cmp	r3, r1
   17020:	d35f      	bcc.n	170e2 <__udivsi3+0xce>
   17022:	0a03      	lsrs	r3, r0, #8
   17024:	428b      	cmp	r3, r1
   17026:	d344      	bcc.n	170b2 <__udivsi3+0x9e>
   17028:	0b03      	lsrs	r3, r0, #12
   1702a:	428b      	cmp	r3, r1
   1702c:	d328      	bcc.n	17080 <__udivsi3+0x6c>
   1702e:	0c03      	lsrs	r3, r0, #16
   17030:	428b      	cmp	r3, r1
   17032:	d30d      	bcc.n	17050 <__udivsi3+0x3c>
   17034:	22ff      	movs	r2, #255	; 0xff
   17036:	0209      	lsls	r1, r1, #8
   17038:	ba12      	rev	r2, r2
   1703a:	0c03      	lsrs	r3, r0, #16
   1703c:	428b      	cmp	r3, r1
   1703e:	d302      	bcc.n	17046 <__udivsi3+0x32>
   17040:	1212      	asrs	r2, r2, #8
   17042:	0209      	lsls	r1, r1, #8
   17044:	d065      	beq.n	17112 <__udivsi3+0xfe>
   17046:	0b03      	lsrs	r3, r0, #12
   17048:	428b      	cmp	r3, r1
   1704a:	d319      	bcc.n	17080 <__udivsi3+0x6c>
   1704c:	e000      	b.n	17050 <__udivsi3+0x3c>
   1704e:	0a09      	lsrs	r1, r1, #8
   17050:	0bc3      	lsrs	r3, r0, #15
   17052:	428b      	cmp	r3, r1
   17054:	d301      	bcc.n	1705a <__udivsi3+0x46>
   17056:	03cb      	lsls	r3, r1, #15
   17058:	1ac0      	subs	r0, r0, r3
   1705a:	4152      	adcs	r2, r2
   1705c:	0b83      	lsrs	r3, r0, #14
   1705e:	428b      	cmp	r3, r1
   17060:	d301      	bcc.n	17066 <__udivsi3+0x52>
   17062:	038b      	lsls	r3, r1, #14
   17064:	1ac0      	subs	r0, r0, r3
   17066:	4152      	adcs	r2, r2
   17068:	0b43      	lsrs	r3, r0, #13
   1706a:	428b      	cmp	r3, r1
   1706c:	d301      	bcc.n	17072 <__udivsi3+0x5e>
   1706e:	034b      	lsls	r3, r1, #13
   17070:	1ac0      	subs	r0, r0, r3
   17072:	4152      	adcs	r2, r2
   17074:	0b03      	lsrs	r3, r0, #12
   17076:	428b      	cmp	r3, r1
   17078:	d301      	bcc.n	1707e <__udivsi3+0x6a>
   1707a:	030b      	lsls	r3, r1, #12
   1707c:	1ac0      	subs	r0, r0, r3
   1707e:	4152      	adcs	r2, r2
   17080:	0ac3      	lsrs	r3, r0, #11
   17082:	428b      	cmp	r3, r1
   17084:	d301      	bcc.n	1708a <__udivsi3+0x76>
   17086:	02cb      	lsls	r3, r1, #11
   17088:	1ac0      	subs	r0, r0, r3
   1708a:	4152      	adcs	r2, r2
   1708c:	0a83      	lsrs	r3, r0, #10
   1708e:	428b      	cmp	r3, r1
   17090:	d301      	bcc.n	17096 <__udivsi3+0x82>
   17092:	028b      	lsls	r3, r1, #10
   17094:	1ac0      	subs	r0, r0, r3
   17096:	4152      	adcs	r2, r2
   17098:	0a43      	lsrs	r3, r0, #9
   1709a:	428b      	cmp	r3, r1
   1709c:	d301      	bcc.n	170a2 <__udivsi3+0x8e>
   1709e:	024b      	lsls	r3, r1, #9
   170a0:	1ac0      	subs	r0, r0, r3
   170a2:	4152      	adcs	r2, r2
   170a4:	0a03      	lsrs	r3, r0, #8
   170a6:	428b      	cmp	r3, r1
   170a8:	d301      	bcc.n	170ae <__udivsi3+0x9a>
   170aa:	020b      	lsls	r3, r1, #8
   170ac:	1ac0      	subs	r0, r0, r3
   170ae:	4152      	adcs	r2, r2
   170b0:	d2cd      	bcs.n	1704e <__udivsi3+0x3a>
   170b2:	09c3      	lsrs	r3, r0, #7
   170b4:	428b      	cmp	r3, r1
   170b6:	d301      	bcc.n	170bc <__udivsi3+0xa8>
   170b8:	01cb      	lsls	r3, r1, #7
   170ba:	1ac0      	subs	r0, r0, r3
   170bc:	4152      	adcs	r2, r2
   170be:	0983      	lsrs	r3, r0, #6
   170c0:	428b      	cmp	r3, r1
   170c2:	d301      	bcc.n	170c8 <__udivsi3+0xb4>
   170c4:	018b      	lsls	r3, r1, #6
   170c6:	1ac0      	subs	r0, r0, r3
   170c8:	4152      	adcs	r2, r2
   170ca:	0943      	lsrs	r3, r0, #5
   170cc:	428b      	cmp	r3, r1
   170ce:	d301      	bcc.n	170d4 <__udivsi3+0xc0>
   170d0:	014b      	lsls	r3, r1, #5
   170d2:	1ac0      	subs	r0, r0, r3
   170d4:	4152      	adcs	r2, r2
   170d6:	0903      	lsrs	r3, r0, #4
   170d8:	428b      	cmp	r3, r1
   170da:	d301      	bcc.n	170e0 <__udivsi3+0xcc>
   170dc:	010b      	lsls	r3, r1, #4
   170de:	1ac0      	subs	r0, r0, r3
   170e0:	4152      	adcs	r2, r2
   170e2:	08c3      	lsrs	r3, r0, #3
   170e4:	428b      	cmp	r3, r1
   170e6:	d301      	bcc.n	170ec <__udivsi3+0xd8>
   170e8:	00cb      	lsls	r3, r1, #3
   170ea:	1ac0      	subs	r0, r0, r3
   170ec:	4152      	adcs	r2, r2
   170ee:	0883      	lsrs	r3, r0, #2
   170f0:	428b      	cmp	r3, r1
   170f2:	d301      	bcc.n	170f8 <__udivsi3+0xe4>
   170f4:	008b      	lsls	r3, r1, #2
   170f6:	1ac0      	subs	r0, r0, r3
   170f8:	4152      	adcs	r2, r2
   170fa:	0843      	lsrs	r3, r0, #1
   170fc:	428b      	cmp	r3, r1
   170fe:	d301      	bcc.n	17104 <__udivsi3+0xf0>
   17100:	004b      	lsls	r3, r1, #1
   17102:	1ac0      	subs	r0, r0, r3
   17104:	4152      	adcs	r2, r2
   17106:	1a41      	subs	r1, r0, r1
   17108:	d200      	bcs.n	1710c <__udivsi3+0xf8>
   1710a:	4601      	mov	r1, r0
   1710c:	4152      	adcs	r2, r2
   1710e:	4610      	mov	r0, r2
   17110:	4770      	bx	lr
   17112:	e7ff      	b.n	17114 <__udivsi3+0x100>
   17114:	b501      	push	{r0, lr}
   17116:	2000      	movs	r0, #0
   17118:	f000 f8f0 	bl	172fc <__aeabi_idiv0>
   1711c:	bd02      	pop	{r1, pc}
   1711e:	46c0      	nop			; (mov r8, r8)

00017120 <__aeabi_uidivmod>:
   17120:	2900      	cmp	r1, #0
   17122:	d0f7      	beq.n	17114 <__udivsi3+0x100>
   17124:	e776      	b.n	17014 <__udivsi3>
   17126:	4770      	bx	lr

00017128 <__divsi3>:
   17128:	4603      	mov	r3, r0
   1712a:	430b      	orrs	r3, r1
   1712c:	d47f      	bmi.n	1722e <__divsi3+0x106>
   1712e:	2200      	movs	r2, #0
   17130:	0843      	lsrs	r3, r0, #1
   17132:	428b      	cmp	r3, r1
   17134:	d374      	bcc.n	17220 <__divsi3+0xf8>
   17136:	0903      	lsrs	r3, r0, #4
   17138:	428b      	cmp	r3, r1
   1713a:	d35f      	bcc.n	171fc <__divsi3+0xd4>
   1713c:	0a03      	lsrs	r3, r0, #8
   1713e:	428b      	cmp	r3, r1
   17140:	d344      	bcc.n	171cc <__divsi3+0xa4>
   17142:	0b03      	lsrs	r3, r0, #12
   17144:	428b      	cmp	r3, r1
   17146:	d328      	bcc.n	1719a <__divsi3+0x72>
   17148:	0c03      	lsrs	r3, r0, #16
   1714a:	428b      	cmp	r3, r1
   1714c:	d30d      	bcc.n	1716a <__divsi3+0x42>
   1714e:	22ff      	movs	r2, #255	; 0xff
   17150:	0209      	lsls	r1, r1, #8
   17152:	ba12      	rev	r2, r2
   17154:	0c03      	lsrs	r3, r0, #16
   17156:	428b      	cmp	r3, r1
   17158:	d302      	bcc.n	17160 <__divsi3+0x38>
   1715a:	1212      	asrs	r2, r2, #8
   1715c:	0209      	lsls	r1, r1, #8
   1715e:	d065      	beq.n	1722c <__divsi3+0x104>
   17160:	0b03      	lsrs	r3, r0, #12
   17162:	428b      	cmp	r3, r1
   17164:	d319      	bcc.n	1719a <__divsi3+0x72>
   17166:	e000      	b.n	1716a <__divsi3+0x42>
   17168:	0a09      	lsrs	r1, r1, #8
   1716a:	0bc3      	lsrs	r3, r0, #15
   1716c:	428b      	cmp	r3, r1
   1716e:	d301      	bcc.n	17174 <__divsi3+0x4c>
   17170:	03cb      	lsls	r3, r1, #15
   17172:	1ac0      	subs	r0, r0, r3
   17174:	4152      	adcs	r2, r2
   17176:	0b83      	lsrs	r3, r0, #14
   17178:	428b      	cmp	r3, r1
   1717a:	d301      	bcc.n	17180 <__divsi3+0x58>
   1717c:	038b      	lsls	r3, r1, #14
   1717e:	1ac0      	subs	r0, r0, r3
   17180:	4152      	adcs	r2, r2
   17182:	0b43      	lsrs	r3, r0, #13
   17184:	428b      	cmp	r3, r1
   17186:	d301      	bcc.n	1718c <__divsi3+0x64>
   17188:	034b      	lsls	r3, r1, #13
   1718a:	1ac0      	subs	r0, r0, r3
   1718c:	4152      	adcs	r2, r2
   1718e:	0b03      	lsrs	r3, r0, #12
   17190:	428b      	cmp	r3, r1
   17192:	d301      	bcc.n	17198 <__divsi3+0x70>
   17194:	030b      	lsls	r3, r1, #12
   17196:	1ac0      	subs	r0, r0, r3
   17198:	4152      	adcs	r2, r2
   1719a:	0ac3      	lsrs	r3, r0, #11
   1719c:	428b      	cmp	r3, r1
   1719e:	d301      	bcc.n	171a4 <__divsi3+0x7c>
   171a0:	02cb      	lsls	r3, r1, #11
   171a2:	1ac0      	subs	r0, r0, r3
   171a4:	4152      	adcs	r2, r2
   171a6:	0a83      	lsrs	r3, r0, #10
   171a8:	428b      	cmp	r3, r1
   171aa:	d301      	bcc.n	171b0 <__divsi3+0x88>
   171ac:	028b      	lsls	r3, r1, #10
   171ae:	1ac0      	subs	r0, r0, r3
   171b0:	4152      	adcs	r2, r2
   171b2:	0a43      	lsrs	r3, r0, #9
   171b4:	428b      	cmp	r3, r1
   171b6:	d301      	bcc.n	171bc <__divsi3+0x94>
   171b8:	024b      	lsls	r3, r1, #9
   171ba:	1ac0      	subs	r0, r0, r3
   171bc:	4152      	adcs	r2, r2
   171be:	0a03      	lsrs	r3, r0, #8
   171c0:	428b      	cmp	r3, r1
   171c2:	d301      	bcc.n	171c8 <__divsi3+0xa0>
   171c4:	020b      	lsls	r3, r1, #8
   171c6:	1ac0      	subs	r0, r0, r3
   171c8:	4152      	adcs	r2, r2
   171ca:	d2cd      	bcs.n	17168 <__divsi3+0x40>
   171cc:	09c3      	lsrs	r3, r0, #7
   171ce:	428b      	cmp	r3, r1
   171d0:	d301      	bcc.n	171d6 <__divsi3+0xae>
   171d2:	01cb      	lsls	r3, r1, #7
   171d4:	1ac0      	subs	r0, r0, r3
   171d6:	4152      	adcs	r2, r2
   171d8:	0983      	lsrs	r3, r0, #6
   171da:	428b      	cmp	r3, r1
   171dc:	d301      	bcc.n	171e2 <__divsi3+0xba>
   171de:	018b      	lsls	r3, r1, #6
   171e0:	1ac0      	subs	r0, r0, r3
   171e2:	4152      	adcs	r2, r2
   171e4:	0943      	lsrs	r3, r0, #5
   171e6:	428b      	cmp	r3, r1
   171e8:	d301      	bcc.n	171ee <__divsi3+0xc6>
   171ea:	014b      	lsls	r3, r1, #5
   171ec:	1ac0      	subs	r0, r0, r3
   171ee:	4152      	adcs	r2, r2
   171f0:	0903      	lsrs	r3, r0, #4
   171f2:	428b      	cmp	r3, r1
   171f4:	d301      	bcc.n	171fa <__divsi3+0xd2>
   171f6:	010b      	lsls	r3, r1, #4
   171f8:	1ac0      	subs	r0, r0, r3
   171fa:	4152      	adcs	r2, r2
   171fc:	08c3      	lsrs	r3, r0, #3
   171fe:	428b      	cmp	r3, r1
   17200:	d301      	bcc.n	17206 <__divsi3+0xde>
   17202:	00cb      	lsls	r3, r1, #3
   17204:	1ac0      	subs	r0, r0, r3
   17206:	4152      	adcs	r2, r2
   17208:	0883      	lsrs	r3, r0, #2
   1720a:	428b      	cmp	r3, r1
   1720c:	d301      	bcc.n	17212 <__divsi3+0xea>
   1720e:	008b      	lsls	r3, r1, #2
   17210:	1ac0      	subs	r0, r0, r3
   17212:	4152      	adcs	r2, r2
   17214:	0843      	lsrs	r3, r0, #1
   17216:	428b      	cmp	r3, r1
   17218:	d301      	bcc.n	1721e <__divsi3+0xf6>
   1721a:	004b      	lsls	r3, r1, #1
   1721c:	1ac0      	subs	r0, r0, r3
   1721e:	4152      	adcs	r2, r2
   17220:	1a41      	subs	r1, r0, r1
   17222:	d200      	bcs.n	17226 <__divsi3+0xfe>
   17224:	4601      	mov	r1, r0
   17226:	4152      	adcs	r2, r2
   17228:	4610      	mov	r0, r2
   1722a:	4770      	bx	lr
   1722c:	e05d      	b.n	172ea <__divsi3+0x1c2>
   1722e:	0fca      	lsrs	r2, r1, #31
   17230:	d000      	beq.n	17234 <__divsi3+0x10c>
   17232:	4249      	negs	r1, r1
   17234:	1003      	asrs	r3, r0, #32
   17236:	d300      	bcc.n	1723a <__divsi3+0x112>
   17238:	4240      	negs	r0, r0
   1723a:	4053      	eors	r3, r2
   1723c:	2200      	movs	r2, #0
   1723e:	469c      	mov	ip, r3
   17240:	0903      	lsrs	r3, r0, #4
   17242:	428b      	cmp	r3, r1
   17244:	d32d      	bcc.n	172a2 <__divsi3+0x17a>
   17246:	0a03      	lsrs	r3, r0, #8
   17248:	428b      	cmp	r3, r1
   1724a:	d312      	bcc.n	17272 <__divsi3+0x14a>
   1724c:	22fc      	movs	r2, #252	; 0xfc
   1724e:	0189      	lsls	r1, r1, #6
   17250:	ba12      	rev	r2, r2
   17252:	0a03      	lsrs	r3, r0, #8
   17254:	428b      	cmp	r3, r1
   17256:	d30c      	bcc.n	17272 <__divsi3+0x14a>
   17258:	0189      	lsls	r1, r1, #6
   1725a:	1192      	asrs	r2, r2, #6
   1725c:	428b      	cmp	r3, r1
   1725e:	d308      	bcc.n	17272 <__divsi3+0x14a>
   17260:	0189      	lsls	r1, r1, #6
   17262:	1192      	asrs	r2, r2, #6
   17264:	428b      	cmp	r3, r1
   17266:	d304      	bcc.n	17272 <__divsi3+0x14a>
   17268:	0189      	lsls	r1, r1, #6
   1726a:	d03a      	beq.n	172e2 <__divsi3+0x1ba>
   1726c:	1192      	asrs	r2, r2, #6
   1726e:	e000      	b.n	17272 <__divsi3+0x14a>
   17270:	0989      	lsrs	r1, r1, #6
   17272:	09c3      	lsrs	r3, r0, #7
   17274:	428b      	cmp	r3, r1
   17276:	d301      	bcc.n	1727c <__divsi3+0x154>
   17278:	01cb      	lsls	r3, r1, #7
   1727a:	1ac0      	subs	r0, r0, r3
   1727c:	4152      	adcs	r2, r2
   1727e:	0983      	lsrs	r3, r0, #6
   17280:	428b      	cmp	r3, r1
   17282:	d301      	bcc.n	17288 <__divsi3+0x160>
   17284:	018b      	lsls	r3, r1, #6
   17286:	1ac0      	subs	r0, r0, r3
   17288:	4152      	adcs	r2, r2
   1728a:	0943      	lsrs	r3, r0, #5
   1728c:	428b      	cmp	r3, r1
   1728e:	d301      	bcc.n	17294 <__divsi3+0x16c>
   17290:	014b      	lsls	r3, r1, #5
   17292:	1ac0      	subs	r0, r0, r3
   17294:	4152      	adcs	r2, r2
   17296:	0903      	lsrs	r3, r0, #4
   17298:	428b      	cmp	r3, r1
   1729a:	d301      	bcc.n	172a0 <__divsi3+0x178>
   1729c:	010b      	lsls	r3, r1, #4
   1729e:	1ac0      	subs	r0, r0, r3
   172a0:	4152      	adcs	r2, r2
   172a2:	08c3      	lsrs	r3, r0, #3
   172a4:	428b      	cmp	r3, r1
   172a6:	d301      	bcc.n	172ac <__divsi3+0x184>
   172a8:	00cb      	lsls	r3, r1, #3
   172aa:	1ac0      	subs	r0, r0, r3
   172ac:	4152      	adcs	r2, r2
   172ae:	0883      	lsrs	r3, r0, #2
   172b0:	428b      	cmp	r3, r1
   172b2:	d301      	bcc.n	172b8 <__divsi3+0x190>
   172b4:	008b      	lsls	r3, r1, #2
   172b6:	1ac0      	subs	r0, r0, r3
   172b8:	4152      	adcs	r2, r2
   172ba:	d2d9      	bcs.n	17270 <__divsi3+0x148>
   172bc:	0843      	lsrs	r3, r0, #1
   172be:	428b      	cmp	r3, r1
   172c0:	d301      	bcc.n	172c6 <__divsi3+0x19e>
   172c2:	004b      	lsls	r3, r1, #1
   172c4:	1ac0      	subs	r0, r0, r3
   172c6:	4152      	adcs	r2, r2
   172c8:	1a41      	subs	r1, r0, r1
   172ca:	d200      	bcs.n	172ce <__divsi3+0x1a6>
   172cc:	4601      	mov	r1, r0
   172ce:	4663      	mov	r3, ip
   172d0:	4152      	adcs	r2, r2
   172d2:	105b      	asrs	r3, r3, #1
   172d4:	4610      	mov	r0, r2
   172d6:	d301      	bcc.n	172dc <__divsi3+0x1b4>
   172d8:	4240      	negs	r0, r0
   172da:	2b00      	cmp	r3, #0
   172dc:	d500      	bpl.n	172e0 <__divsi3+0x1b8>
   172de:	4249      	negs	r1, r1
   172e0:	4770      	bx	lr
   172e2:	4663      	mov	r3, ip
   172e4:	105b      	asrs	r3, r3, #1
   172e6:	d300      	bcc.n	172ea <__divsi3+0x1c2>
   172e8:	4240      	negs	r0, r0
   172ea:	b501      	push	{r0, lr}
   172ec:	2000      	movs	r0, #0
   172ee:	f000 f805 	bl	172fc <__aeabi_idiv0>
   172f2:	bd02      	pop	{r1, pc}

000172f4 <__aeabi_idivmod>:
   172f4:	2900      	cmp	r1, #0
   172f6:	d0f8      	beq.n	172ea <__divsi3+0x1c2>
   172f8:	e716      	b.n	17128 <__divsi3>
   172fa:	4770      	bx	lr

000172fc <__aeabi_idiv0>:
   172fc:	4770      	bx	lr
   172fe:	46c0      	nop			; (mov r8, r8)

00017300 <__aeabi_lmul>:
   17300:	b5f0      	push	{r4, r5, r6, r7, lr}
   17302:	46ce      	mov	lr, r9
   17304:	4647      	mov	r7, r8
   17306:	0415      	lsls	r5, r2, #16
   17308:	0c2d      	lsrs	r5, r5, #16
   1730a:	002e      	movs	r6, r5
   1730c:	b580      	push	{r7, lr}
   1730e:	0407      	lsls	r7, r0, #16
   17310:	0c14      	lsrs	r4, r2, #16
   17312:	0c3f      	lsrs	r7, r7, #16
   17314:	4699      	mov	r9, r3
   17316:	0c03      	lsrs	r3, r0, #16
   17318:	437e      	muls	r6, r7
   1731a:	435d      	muls	r5, r3
   1731c:	4367      	muls	r7, r4
   1731e:	4363      	muls	r3, r4
   17320:	197f      	adds	r7, r7, r5
   17322:	0c34      	lsrs	r4, r6, #16
   17324:	19e4      	adds	r4, r4, r7
   17326:	469c      	mov	ip, r3
   17328:	42a5      	cmp	r5, r4
   1732a:	d903      	bls.n	17334 <__aeabi_lmul+0x34>
   1732c:	2380      	movs	r3, #128	; 0x80
   1732e:	025b      	lsls	r3, r3, #9
   17330:	4698      	mov	r8, r3
   17332:	44c4      	add	ip, r8
   17334:	464b      	mov	r3, r9
   17336:	4351      	muls	r1, r2
   17338:	4343      	muls	r3, r0
   1733a:	0436      	lsls	r6, r6, #16
   1733c:	0c36      	lsrs	r6, r6, #16
   1733e:	0c25      	lsrs	r5, r4, #16
   17340:	0424      	lsls	r4, r4, #16
   17342:	4465      	add	r5, ip
   17344:	19a4      	adds	r4, r4, r6
   17346:	1859      	adds	r1, r3, r1
   17348:	1949      	adds	r1, r1, r5
   1734a:	0020      	movs	r0, r4
   1734c:	bc0c      	pop	{r2, r3}
   1734e:	4690      	mov	r8, r2
   17350:	4699      	mov	r9, r3
   17352:	bdf0      	pop	{r4, r5, r6, r7, pc}

00017354 <__aeabi_d2uiz>:
   17354:	b570      	push	{r4, r5, r6, lr}
   17356:	2200      	movs	r2, #0
   17358:	4b0c      	ldr	r3, [pc, #48]	; (1738c <__aeabi_d2uiz+0x38>)
   1735a:	0004      	movs	r4, r0
   1735c:	000d      	movs	r5, r1
   1735e:	f001 fcd3 	bl	18d08 <__aeabi_dcmpge>
   17362:	2800      	cmp	r0, #0
   17364:	d104      	bne.n	17370 <__aeabi_d2uiz+0x1c>
   17366:	0020      	movs	r0, r4
   17368:	0029      	movs	r1, r5
   1736a:	f001 fbeb 	bl	18b44 <__aeabi_d2iz>
   1736e:	bd70      	pop	{r4, r5, r6, pc}
   17370:	4b06      	ldr	r3, [pc, #24]	; (1738c <__aeabi_d2uiz+0x38>)
   17372:	2200      	movs	r2, #0
   17374:	0020      	movs	r0, r4
   17376:	0029      	movs	r1, r5
   17378:	f001 f8ce 	bl	18518 <__aeabi_dsub>
   1737c:	f001 fbe2 	bl	18b44 <__aeabi_d2iz>
   17380:	2380      	movs	r3, #128	; 0x80
   17382:	061b      	lsls	r3, r3, #24
   17384:	469c      	mov	ip, r3
   17386:	4460      	add	r0, ip
   17388:	e7f1      	b.n	1736e <__aeabi_d2uiz+0x1a>
   1738a:	46c0      	nop			; (mov r8, r8)
   1738c:	41e00000 	.word	0x41e00000

00017390 <__aeabi_dadd>:
   17390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17392:	4645      	mov	r5, r8
   17394:	46de      	mov	lr, fp
   17396:	4657      	mov	r7, sl
   17398:	464e      	mov	r6, r9
   1739a:	030c      	lsls	r4, r1, #12
   1739c:	b5e0      	push	{r5, r6, r7, lr}
   1739e:	004e      	lsls	r6, r1, #1
   173a0:	0fc9      	lsrs	r1, r1, #31
   173a2:	4688      	mov	r8, r1
   173a4:	000d      	movs	r5, r1
   173a6:	0a61      	lsrs	r1, r4, #9
   173a8:	0f44      	lsrs	r4, r0, #29
   173aa:	430c      	orrs	r4, r1
   173ac:	00c7      	lsls	r7, r0, #3
   173ae:	0319      	lsls	r1, r3, #12
   173b0:	0058      	lsls	r0, r3, #1
   173b2:	0fdb      	lsrs	r3, r3, #31
   173b4:	469b      	mov	fp, r3
   173b6:	0a4b      	lsrs	r3, r1, #9
   173b8:	0f51      	lsrs	r1, r2, #29
   173ba:	430b      	orrs	r3, r1
   173bc:	0d76      	lsrs	r6, r6, #21
   173be:	0d40      	lsrs	r0, r0, #21
   173c0:	0019      	movs	r1, r3
   173c2:	00d2      	lsls	r2, r2, #3
   173c4:	45d8      	cmp	r8, fp
   173c6:	d100      	bne.n	173ca <__aeabi_dadd+0x3a>
   173c8:	e0ae      	b.n	17528 <__aeabi_dadd+0x198>
   173ca:	1a35      	subs	r5, r6, r0
   173cc:	2d00      	cmp	r5, #0
   173ce:	dc00      	bgt.n	173d2 <__aeabi_dadd+0x42>
   173d0:	e0f6      	b.n	175c0 <__aeabi_dadd+0x230>
   173d2:	2800      	cmp	r0, #0
   173d4:	d10f      	bne.n	173f6 <__aeabi_dadd+0x66>
   173d6:	4313      	orrs	r3, r2
   173d8:	d100      	bne.n	173dc <__aeabi_dadd+0x4c>
   173da:	e0db      	b.n	17594 <__aeabi_dadd+0x204>
   173dc:	1e6b      	subs	r3, r5, #1
   173de:	2b00      	cmp	r3, #0
   173e0:	d000      	beq.n	173e4 <__aeabi_dadd+0x54>
   173e2:	e137      	b.n	17654 <__aeabi_dadd+0x2c4>
   173e4:	1aba      	subs	r2, r7, r2
   173e6:	4297      	cmp	r7, r2
   173e8:	41bf      	sbcs	r7, r7
   173ea:	1a64      	subs	r4, r4, r1
   173ec:	427f      	negs	r7, r7
   173ee:	1be4      	subs	r4, r4, r7
   173f0:	2601      	movs	r6, #1
   173f2:	0017      	movs	r7, r2
   173f4:	e024      	b.n	17440 <__aeabi_dadd+0xb0>
   173f6:	4bc6      	ldr	r3, [pc, #792]	; (17710 <__aeabi_dadd+0x380>)
   173f8:	429e      	cmp	r6, r3
   173fa:	d04d      	beq.n	17498 <__aeabi_dadd+0x108>
   173fc:	2380      	movs	r3, #128	; 0x80
   173fe:	041b      	lsls	r3, r3, #16
   17400:	4319      	orrs	r1, r3
   17402:	2d38      	cmp	r5, #56	; 0x38
   17404:	dd00      	ble.n	17408 <__aeabi_dadd+0x78>
   17406:	e107      	b.n	17618 <__aeabi_dadd+0x288>
   17408:	2d1f      	cmp	r5, #31
   1740a:	dd00      	ble.n	1740e <__aeabi_dadd+0x7e>
   1740c:	e138      	b.n	17680 <__aeabi_dadd+0x2f0>
   1740e:	2020      	movs	r0, #32
   17410:	1b43      	subs	r3, r0, r5
   17412:	469a      	mov	sl, r3
   17414:	000b      	movs	r3, r1
   17416:	4650      	mov	r0, sl
   17418:	4083      	lsls	r3, r0
   1741a:	4699      	mov	r9, r3
   1741c:	0013      	movs	r3, r2
   1741e:	4648      	mov	r0, r9
   17420:	40eb      	lsrs	r3, r5
   17422:	4318      	orrs	r0, r3
   17424:	0003      	movs	r3, r0
   17426:	4650      	mov	r0, sl
   17428:	4082      	lsls	r2, r0
   1742a:	1e50      	subs	r0, r2, #1
   1742c:	4182      	sbcs	r2, r0
   1742e:	40e9      	lsrs	r1, r5
   17430:	431a      	orrs	r2, r3
   17432:	1aba      	subs	r2, r7, r2
   17434:	1a61      	subs	r1, r4, r1
   17436:	4297      	cmp	r7, r2
   17438:	41a4      	sbcs	r4, r4
   1743a:	0017      	movs	r7, r2
   1743c:	4264      	negs	r4, r4
   1743e:	1b0c      	subs	r4, r1, r4
   17440:	0223      	lsls	r3, r4, #8
   17442:	d562      	bpl.n	1750a <__aeabi_dadd+0x17a>
   17444:	0264      	lsls	r4, r4, #9
   17446:	0a65      	lsrs	r5, r4, #9
   17448:	2d00      	cmp	r5, #0
   1744a:	d100      	bne.n	1744e <__aeabi_dadd+0xbe>
   1744c:	e0df      	b.n	1760e <__aeabi_dadd+0x27e>
   1744e:	0028      	movs	r0, r5
   17450:	f001 fc64 	bl	18d1c <__clzsi2>
   17454:	0003      	movs	r3, r0
   17456:	3b08      	subs	r3, #8
   17458:	2b1f      	cmp	r3, #31
   1745a:	dd00      	ble.n	1745e <__aeabi_dadd+0xce>
   1745c:	e0d2      	b.n	17604 <__aeabi_dadd+0x274>
   1745e:	2220      	movs	r2, #32
   17460:	003c      	movs	r4, r7
   17462:	1ad2      	subs	r2, r2, r3
   17464:	409d      	lsls	r5, r3
   17466:	40d4      	lsrs	r4, r2
   17468:	409f      	lsls	r7, r3
   1746a:	4325      	orrs	r5, r4
   1746c:	429e      	cmp	r6, r3
   1746e:	dd00      	ble.n	17472 <__aeabi_dadd+0xe2>
   17470:	e0c4      	b.n	175fc <__aeabi_dadd+0x26c>
   17472:	1b9e      	subs	r6, r3, r6
   17474:	1c73      	adds	r3, r6, #1
   17476:	2b1f      	cmp	r3, #31
   17478:	dd00      	ble.n	1747c <__aeabi_dadd+0xec>
   1747a:	e0f1      	b.n	17660 <__aeabi_dadd+0x2d0>
   1747c:	2220      	movs	r2, #32
   1747e:	0038      	movs	r0, r7
   17480:	0029      	movs	r1, r5
   17482:	1ad2      	subs	r2, r2, r3
   17484:	40d8      	lsrs	r0, r3
   17486:	4091      	lsls	r1, r2
   17488:	4097      	lsls	r7, r2
   1748a:	002c      	movs	r4, r5
   1748c:	4301      	orrs	r1, r0
   1748e:	1e78      	subs	r0, r7, #1
   17490:	4187      	sbcs	r7, r0
   17492:	40dc      	lsrs	r4, r3
   17494:	2600      	movs	r6, #0
   17496:	430f      	orrs	r7, r1
   17498:	077b      	lsls	r3, r7, #29
   1749a:	d009      	beq.n	174b0 <__aeabi_dadd+0x120>
   1749c:	230f      	movs	r3, #15
   1749e:	403b      	ands	r3, r7
   174a0:	2b04      	cmp	r3, #4
   174a2:	d005      	beq.n	174b0 <__aeabi_dadd+0x120>
   174a4:	1d3b      	adds	r3, r7, #4
   174a6:	42bb      	cmp	r3, r7
   174a8:	41bf      	sbcs	r7, r7
   174aa:	427f      	negs	r7, r7
   174ac:	19e4      	adds	r4, r4, r7
   174ae:	001f      	movs	r7, r3
   174b0:	0223      	lsls	r3, r4, #8
   174b2:	d52c      	bpl.n	1750e <__aeabi_dadd+0x17e>
   174b4:	4b96      	ldr	r3, [pc, #600]	; (17710 <__aeabi_dadd+0x380>)
   174b6:	3601      	adds	r6, #1
   174b8:	429e      	cmp	r6, r3
   174ba:	d100      	bne.n	174be <__aeabi_dadd+0x12e>
   174bc:	e09a      	b.n	175f4 <__aeabi_dadd+0x264>
   174be:	4645      	mov	r5, r8
   174c0:	4b94      	ldr	r3, [pc, #592]	; (17714 <__aeabi_dadd+0x384>)
   174c2:	08ff      	lsrs	r7, r7, #3
   174c4:	401c      	ands	r4, r3
   174c6:	0760      	lsls	r0, r4, #29
   174c8:	0576      	lsls	r6, r6, #21
   174ca:	0264      	lsls	r4, r4, #9
   174cc:	4307      	orrs	r7, r0
   174ce:	0b24      	lsrs	r4, r4, #12
   174d0:	0d76      	lsrs	r6, r6, #21
   174d2:	2100      	movs	r1, #0
   174d4:	0324      	lsls	r4, r4, #12
   174d6:	0b23      	lsrs	r3, r4, #12
   174d8:	0d0c      	lsrs	r4, r1, #20
   174da:	4a8f      	ldr	r2, [pc, #572]	; (17718 <__aeabi_dadd+0x388>)
   174dc:	0524      	lsls	r4, r4, #20
   174de:	431c      	orrs	r4, r3
   174e0:	4014      	ands	r4, r2
   174e2:	0533      	lsls	r3, r6, #20
   174e4:	4323      	orrs	r3, r4
   174e6:	005b      	lsls	r3, r3, #1
   174e8:	07ed      	lsls	r5, r5, #31
   174ea:	085b      	lsrs	r3, r3, #1
   174ec:	432b      	orrs	r3, r5
   174ee:	0038      	movs	r0, r7
   174f0:	0019      	movs	r1, r3
   174f2:	bc3c      	pop	{r2, r3, r4, r5}
   174f4:	4690      	mov	r8, r2
   174f6:	4699      	mov	r9, r3
   174f8:	46a2      	mov	sl, r4
   174fa:	46ab      	mov	fp, r5
   174fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   174fe:	4664      	mov	r4, ip
   17500:	4304      	orrs	r4, r0
   17502:	d100      	bne.n	17506 <__aeabi_dadd+0x176>
   17504:	e211      	b.n	1792a <__aeabi_dadd+0x59a>
   17506:	0004      	movs	r4, r0
   17508:	4667      	mov	r7, ip
   1750a:	077b      	lsls	r3, r7, #29
   1750c:	d1c6      	bne.n	1749c <__aeabi_dadd+0x10c>
   1750e:	4645      	mov	r5, r8
   17510:	0760      	lsls	r0, r4, #29
   17512:	08ff      	lsrs	r7, r7, #3
   17514:	4307      	orrs	r7, r0
   17516:	08e4      	lsrs	r4, r4, #3
   17518:	4b7d      	ldr	r3, [pc, #500]	; (17710 <__aeabi_dadd+0x380>)
   1751a:	429e      	cmp	r6, r3
   1751c:	d030      	beq.n	17580 <__aeabi_dadd+0x1f0>
   1751e:	0324      	lsls	r4, r4, #12
   17520:	0576      	lsls	r6, r6, #21
   17522:	0b24      	lsrs	r4, r4, #12
   17524:	0d76      	lsrs	r6, r6, #21
   17526:	e7d4      	b.n	174d2 <__aeabi_dadd+0x142>
   17528:	1a33      	subs	r3, r6, r0
   1752a:	469a      	mov	sl, r3
   1752c:	2b00      	cmp	r3, #0
   1752e:	dd78      	ble.n	17622 <__aeabi_dadd+0x292>
   17530:	2800      	cmp	r0, #0
   17532:	d031      	beq.n	17598 <__aeabi_dadd+0x208>
   17534:	4876      	ldr	r0, [pc, #472]	; (17710 <__aeabi_dadd+0x380>)
   17536:	4286      	cmp	r6, r0
   17538:	d0ae      	beq.n	17498 <__aeabi_dadd+0x108>
   1753a:	2080      	movs	r0, #128	; 0x80
   1753c:	0400      	lsls	r0, r0, #16
   1753e:	4301      	orrs	r1, r0
   17540:	4653      	mov	r3, sl
   17542:	2b38      	cmp	r3, #56	; 0x38
   17544:	dc00      	bgt.n	17548 <__aeabi_dadd+0x1b8>
   17546:	e0e9      	b.n	1771c <__aeabi_dadd+0x38c>
   17548:	430a      	orrs	r2, r1
   1754a:	1e51      	subs	r1, r2, #1
   1754c:	418a      	sbcs	r2, r1
   1754e:	2100      	movs	r1, #0
   17550:	19d2      	adds	r2, r2, r7
   17552:	42ba      	cmp	r2, r7
   17554:	41bf      	sbcs	r7, r7
   17556:	1909      	adds	r1, r1, r4
   17558:	427c      	negs	r4, r7
   1755a:	0017      	movs	r7, r2
   1755c:	190c      	adds	r4, r1, r4
   1755e:	0223      	lsls	r3, r4, #8
   17560:	d5d3      	bpl.n	1750a <__aeabi_dadd+0x17a>
   17562:	4b6b      	ldr	r3, [pc, #428]	; (17710 <__aeabi_dadd+0x380>)
   17564:	3601      	adds	r6, #1
   17566:	429e      	cmp	r6, r3
   17568:	d100      	bne.n	1756c <__aeabi_dadd+0x1dc>
   1756a:	e13a      	b.n	177e2 <__aeabi_dadd+0x452>
   1756c:	2001      	movs	r0, #1
   1756e:	4b69      	ldr	r3, [pc, #420]	; (17714 <__aeabi_dadd+0x384>)
   17570:	401c      	ands	r4, r3
   17572:	087b      	lsrs	r3, r7, #1
   17574:	4007      	ands	r7, r0
   17576:	431f      	orrs	r7, r3
   17578:	07e0      	lsls	r0, r4, #31
   1757a:	4307      	orrs	r7, r0
   1757c:	0864      	lsrs	r4, r4, #1
   1757e:	e78b      	b.n	17498 <__aeabi_dadd+0x108>
   17580:	0023      	movs	r3, r4
   17582:	433b      	orrs	r3, r7
   17584:	d100      	bne.n	17588 <__aeabi_dadd+0x1f8>
   17586:	e1cb      	b.n	17920 <__aeabi_dadd+0x590>
   17588:	2280      	movs	r2, #128	; 0x80
   1758a:	0312      	lsls	r2, r2, #12
   1758c:	4314      	orrs	r4, r2
   1758e:	0324      	lsls	r4, r4, #12
   17590:	0b24      	lsrs	r4, r4, #12
   17592:	e79e      	b.n	174d2 <__aeabi_dadd+0x142>
   17594:	002e      	movs	r6, r5
   17596:	e77f      	b.n	17498 <__aeabi_dadd+0x108>
   17598:	0008      	movs	r0, r1
   1759a:	4310      	orrs	r0, r2
   1759c:	d100      	bne.n	175a0 <__aeabi_dadd+0x210>
   1759e:	e0b4      	b.n	1770a <__aeabi_dadd+0x37a>
   175a0:	1e58      	subs	r0, r3, #1
   175a2:	2800      	cmp	r0, #0
   175a4:	d000      	beq.n	175a8 <__aeabi_dadd+0x218>
   175a6:	e0de      	b.n	17766 <__aeabi_dadd+0x3d6>
   175a8:	18ba      	adds	r2, r7, r2
   175aa:	42ba      	cmp	r2, r7
   175ac:	419b      	sbcs	r3, r3
   175ae:	1864      	adds	r4, r4, r1
   175b0:	425b      	negs	r3, r3
   175b2:	18e4      	adds	r4, r4, r3
   175b4:	0017      	movs	r7, r2
   175b6:	2601      	movs	r6, #1
   175b8:	0223      	lsls	r3, r4, #8
   175ba:	d5a6      	bpl.n	1750a <__aeabi_dadd+0x17a>
   175bc:	2602      	movs	r6, #2
   175be:	e7d5      	b.n	1756c <__aeabi_dadd+0x1dc>
   175c0:	2d00      	cmp	r5, #0
   175c2:	d16e      	bne.n	176a2 <__aeabi_dadd+0x312>
   175c4:	1c70      	adds	r0, r6, #1
   175c6:	0540      	lsls	r0, r0, #21
   175c8:	0d40      	lsrs	r0, r0, #21
   175ca:	2801      	cmp	r0, #1
   175cc:	dc00      	bgt.n	175d0 <__aeabi_dadd+0x240>
   175ce:	e0f9      	b.n	177c4 <__aeabi_dadd+0x434>
   175d0:	1ab8      	subs	r0, r7, r2
   175d2:	4684      	mov	ip, r0
   175d4:	4287      	cmp	r7, r0
   175d6:	4180      	sbcs	r0, r0
   175d8:	1ae5      	subs	r5, r4, r3
   175da:	4240      	negs	r0, r0
   175dc:	1a2d      	subs	r5, r5, r0
   175de:	0228      	lsls	r0, r5, #8
   175e0:	d400      	bmi.n	175e4 <__aeabi_dadd+0x254>
   175e2:	e089      	b.n	176f8 <__aeabi_dadd+0x368>
   175e4:	1bd7      	subs	r7, r2, r7
   175e6:	42ba      	cmp	r2, r7
   175e8:	4192      	sbcs	r2, r2
   175ea:	1b1c      	subs	r4, r3, r4
   175ec:	4252      	negs	r2, r2
   175ee:	1aa5      	subs	r5, r4, r2
   175f0:	46d8      	mov	r8, fp
   175f2:	e729      	b.n	17448 <__aeabi_dadd+0xb8>
   175f4:	4645      	mov	r5, r8
   175f6:	2400      	movs	r4, #0
   175f8:	2700      	movs	r7, #0
   175fa:	e76a      	b.n	174d2 <__aeabi_dadd+0x142>
   175fc:	4c45      	ldr	r4, [pc, #276]	; (17714 <__aeabi_dadd+0x384>)
   175fe:	1af6      	subs	r6, r6, r3
   17600:	402c      	ands	r4, r5
   17602:	e749      	b.n	17498 <__aeabi_dadd+0x108>
   17604:	003d      	movs	r5, r7
   17606:	3828      	subs	r0, #40	; 0x28
   17608:	4085      	lsls	r5, r0
   1760a:	2700      	movs	r7, #0
   1760c:	e72e      	b.n	1746c <__aeabi_dadd+0xdc>
   1760e:	0038      	movs	r0, r7
   17610:	f001 fb84 	bl	18d1c <__clzsi2>
   17614:	3020      	adds	r0, #32
   17616:	e71d      	b.n	17454 <__aeabi_dadd+0xc4>
   17618:	430a      	orrs	r2, r1
   1761a:	1e51      	subs	r1, r2, #1
   1761c:	418a      	sbcs	r2, r1
   1761e:	2100      	movs	r1, #0
   17620:	e707      	b.n	17432 <__aeabi_dadd+0xa2>
   17622:	2b00      	cmp	r3, #0
   17624:	d000      	beq.n	17628 <__aeabi_dadd+0x298>
   17626:	e0f3      	b.n	17810 <__aeabi_dadd+0x480>
   17628:	1c70      	adds	r0, r6, #1
   1762a:	0543      	lsls	r3, r0, #21
   1762c:	0d5b      	lsrs	r3, r3, #21
   1762e:	2b01      	cmp	r3, #1
   17630:	dc00      	bgt.n	17634 <__aeabi_dadd+0x2a4>
   17632:	e0ad      	b.n	17790 <__aeabi_dadd+0x400>
   17634:	4b36      	ldr	r3, [pc, #216]	; (17710 <__aeabi_dadd+0x380>)
   17636:	4298      	cmp	r0, r3
   17638:	d100      	bne.n	1763c <__aeabi_dadd+0x2ac>
   1763a:	e0d1      	b.n	177e0 <__aeabi_dadd+0x450>
   1763c:	18ba      	adds	r2, r7, r2
   1763e:	42ba      	cmp	r2, r7
   17640:	41bf      	sbcs	r7, r7
   17642:	1864      	adds	r4, r4, r1
   17644:	427f      	negs	r7, r7
   17646:	19e4      	adds	r4, r4, r7
   17648:	07e7      	lsls	r7, r4, #31
   1764a:	0852      	lsrs	r2, r2, #1
   1764c:	4317      	orrs	r7, r2
   1764e:	0864      	lsrs	r4, r4, #1
   17650:	0006      	movs	r6, r0
   17652:	e721      	b.n	17498 <__aeabi_dadd+0x108>
   17654:	482e      	ldr	r0, [pc, #184]	; (17710 <__aeabi_dadd+0x380>)
   17656:	4285      	cmp	r5, r0
   17658:	d100      	bne.n	1765c <__aeabi_dadd+0x2cc>
   1765a:	e093      	b.n	17784 <__aeabi_dadd+0x3f4>
   1765c:	001d      	movs	r5, r3
   1765e:	e6d0      	b.n	17402 <__aeabi_dadd+0x72>
   17660:	0029      	movs	r1, r5
   17662:	3e1f      	subs	r6, #31
   17664:	40f1      	lsrs	r1, r6
   17666:	2b20      	cmp	r3, #32
   17668:	d100      	bne.n	1766c <__aeabi_dadd+0x2dc>
   1766a:	e08d      	b.n	17788 <__aeabi_dadd+0x3f8>
   1766c:	2240      	movs	r2, #64	; 0x40
   1766e:	1ad3      	subs	r3, r2, r3
   17670:	409d      	lsls	r5, r3
   17672:	432f      	orrs	r7, r5
   17674:	1e7d      	subs	r5, r7, #1
   17676:	41af      	sbcs	r7, r5
   17678:	2400      	movs	r4, #0
   1767a:	430f      	orrs	r7, r1
   1767c:	2600      	movs	r6, #0
   1767e:	e744      	b.n	1750a <__aeabi_dadd+0x17a>
   17680:	002b      	movs	r3, r5
   17682:	0008      	movs	r0, r1
   17684:	3b20      	subs	r3, #32
   17686:	40d8      	lsrs	r0, r3
   17688:	0003      	movs	r3, r0
   1768a:	2d20      	cmp	r5, #32
   1768c:	d100      	bne.n	17690 <__aeabi_dadd+0x300>
   1768e:	e07d      	b.n	1778c <__aeabi_dadd+0x3fc>
   17690:	2040      	movs	r0, #64	; 0x40
   17692:	1b45      	subs	r5, r0, r5
   17694:	40a9      	lsls	r1, r5
   17696:	430a      	orrs	r2, r1
   17698:	1e51      	subs	r1, r2, #1
   1769a:	418a      	sbcs	r2, r1
   1769c:	2100      	movs	r1, #0
   1769e:	431a      	orrs	r2, r3
   176a0:	e6c7      	b.n	17432 <__aeabi_dadd+0xa2>
   176a2:	2e00      	cmp	r6, #0
   176a4:	d050      	beq.n	17748 <__aeabi_dadd+0x3b8>
   176a6:	4e1a      	ldr	r6, [pc, #104]	; (17710 <__aeabi_dadd+0x380>)
   176a8:	42b0      	cmp	r0, r6
   176aa:	d057      	beq.n	1775c <__aeabi_dadd+0x3cc>
   176ac:	2680      	movs	r6, #128	; 0x80
   176ae:	426b      	negs	r3, r5
   176b0:	4699      	mov	r9, r3
   176b2:	0436      	lsls	r6, r6, #16
   176b4:	4334      	orrs	r4, r6
   176b6:	464b      	mov	r3, r9
   176b8:	2b38      	cmp	r3, #56	; 0x38
   176ba:	dd00      	ble.n	176be <__aeabi_dadd+0x32e>
   176bc:	e0d6      	b.n	1786c <__aeabi_dadd+0x4dc>
   176be:	2b1f      	cmp	r3, #31
   176c0:	dd00      	ble.n	176c4 <__aeabi_dadd+0x334>
   176c2:	e135      	b.n	17930 <__aeabi_dadd+0x5a0>
   176c4:	2620      	movs	r6, #32
   176c6:	1af5      	subs	r5, r6, r3
   176c8:	0026      	movs	r6, r4
   176ca:	40ae      	lsls	r6, r5
   176cc:	46b2      	mov	sl, r6
   176ce:	003e      	movs	r6, r7
   176d0:	40de      	lsrs	r6, r3
   176d2:	46ac      	mov	ip, r5
   176d4:	0035      	movs	r5, r6
   176d6:	4656      	mov	r6, sl
   176d8:	432e      	orrs	r6, r5
   176da:	4665      	mov	r5, ip
   176dc:	40af      	lsls	r7, r5
   176de:	1e7d      	subs	r5, r7, #1
   176e0:	41af      	sbcs	r7, r5
   176e2:	40dc      	lsrs	r4, r3
   176e4:	4337      	orrs	r7, r6
   176e6:	1bd7      	subs	r7, r2, r7
   176e8:	42ba      	cmp	r2, r7
   176ea:	4192      	sbcs	r2, r2
   176ec:	1b0c      	subs	r4, r1, r4
   176ee:	4252      	negs	r2, r2
   176f0:	1aa4      	subs	r4, r4, r2
   176f2:	0006      	movs	r6, r0
   176f4:	46d8      	mov	r8, fp
   176f6:	e6a3      	b.n	17440 <__aeabi_dadd+0xb0>
   176f8:	4664      	mov	r4, ip
   176fa:	4667      	mov	r7, ip
   176fc:	432c      	orrs	r4, r5
   176fe:	d000      	beq.n	17702 <__aeabi_dadd+0x372>
   17700:	e6a2      	b.n	17448 <__aeabi_dadd+0xb8>
   17702:	2500      	movs	r5, #0
   17704:	2600      	movs	r6, #0
   17706:	2700      	movs	r7, #0
   17708:	e706      	b.n	17518 <__aeabi_dadd+0x188>
   1770a:	001e      	movs	r6, r3
   1770c:	e6c4      	b.n	17498 <__aeabi_dadd+0x108>
   1770e:	46c0      	nop			; (mov r8, r8)
   17710:	000007ff 	.word	0x000007ff
   17714:	ff7fffff 	.word	0xff7fffff
   17718:	800fffff 	.word	0x800fffff
   1771c:	2b1f      	cmp	r3, #31
   1771e:	dc63      	bgt.n	177e8 <__aeabi_dadd+0x458>
   17720:	2020      	movs	r0, #32
   17722:	1ac3      	subs	r3, r0, r3
   17724:	0008      	movs	r0, r1
   17726:	4098      	lsls	r0, r3
   17728:	469c      	mov	ip, r3
   1772a:	4683      	mov	fp, r0
   1772c:	4653      	mov	r3, sl
   1772e:	0010      	movs	r0, r2
   17730:	40d8      	lsrs	r0, r3
   17732:	0003      	movs	r3, r0
   17734:	4658      	mov	r0, fp
   17736:	4318      	orrs	r0, r3
   17738:	4663      	mov	r3, ip
   1773a:	409a      	lsls	r2, r3
   1773c:	1e53      	subs	r3, r2, #1
   1773e:	419a      	sbcs	r2, r3
   17740:	4653      	mov	r3, sl
   17742:	4302      	orrs	r2, r0
   17744:	40d9      	lsrs	r1, r3
   17746:	e703      	b.n	17550 <__aeabi_dadd+0x1c0>
   17748:	0026      	movs	r6, r4
   1774a:	433e      	orrs	r6, r7
   1774c:	d006      	beq.n	1775c <__aeabi_dadd+0x3cc>
   1774e:	43eb      	mvns	r3, r5
   17750:	4699      	mov	r9, r3
   17752:	2b00      	cmp	r3, #0
   17754:	d0c7      	beq.n	176e6 <__aeabi_dadd+0x356>
   17756:	4e94      	ldr	r6, [pc, #592]	; (179a8 <__aeabi_dadd+0x618>)
   17758:	42b0      	cmp	r0, r6
   1775a:	d1ac      	bne.n	176b6 <__aeabi_dadd+0x326>
   1775c:	000c      	movs	r4, r1
   1775e:	0017      	movs	r7, r2
   17760:	0006      	movs	r6, r0
   17762:	46d8      	mov	r8, fp
   17764:	e698      	b.n	17498 <__aeabi_dadd+0x108>
   17766:	4b90      	ldr	r3, [pc, #576]	; (179a8 <__aeabi_dadd+0x618>)
   17768:	459a      	cmp	sl, r3
   1776a:	d00b      	beq.n	17784 <__aeabi_dadd+0x3f4>
   1776c:	4682      	mov	sl, r0
   1776e:	e6e7      	b.n	17540 <__aeabi_dadd+0x1b0>
   17770:	2800      	cmp	r0, #0
   17772:	d000      	beq.n	17776 <__aeabi_dadd+0x3e6>
   17774:	e09e      	b.n	178b4 <__aeabi_dadd+0x524>
   17776:	0018      	movs	r0, r3
   17778:	4310      	orrs	r0, r2
   1777a:	d100      	bne.n	1777e <__aeabi_dadd+0x3ee>
   1777c:	e0e9      	b.n	17952 <__aeabi_dadd+0x5c2>
   1777e:	001c      	movs	r4, r3
   17780:	0017      	movs	r7, r2
   17782:	46d8      	mov	r8, fp
   17784:	4e88      	ldr	r6, [pc, #544]	; (179a8 <__aeabi_dadd+0x618>)
   17786:	e687      	b.n	17498 <__aeabi_dadd+0x108>
   17788:	2500      	movs	r5, #0
   1778a:	e772      	b.n	17672 <__aeabi_dadd+0x2e2>
   1778c:	2100      	movs	r1, #0
   1778e:	e782      	b.n	17696 <__aeabi_dadd+0x306>
   17790:	0023      	movs	r3, r4
   17792:	433b      	orrs	r3, r7
   17794:	2e00      	cmp	r6, #0
   17796:	d000      	beq.n	1779a <__aeabi_dadd+0x40a>
   17798:	e0ab      	b.n	178f2 <__aeabi_dadd+0x562>
   1779a:	2b00      	cmp	r3, #0
   1779c:	d100      	bne.n	177a0 <__aeabi_dadd+0x410>
   1779e:	e0e7      	b.n	17970 <__aeabi_dadd+0x5e0>
   177a0:	000b      	movs	r3, r1
   177a2:	4313      	orrs	r3, r2
   177a4:	d100      	bne.n	177a8 <__aeabi_dadd+0x418>
   177a6:	e677      	b.n	17498 <__aeabi_dadd+0x108>
   177a8:	18ba      	adds	r2, r7, r2
   177aa:	42ba      	cmp	r2, r7
   177ac:	41bf      	sbcs	r7, r7
   177ae:	1864      	adds	r4, r4, r1
   177b0:	427f      	negs	r7, r7
   177b2:	19e4      	adds	r4, r4, r7
   177b4:	0223      	lsls	r3, r4, #8
   177b6:	d400      	bmi.n	177ba <__aeabi_dadd+0x42a>
   177b8:	e0f2      	b.n	179a0 <__aeabi_dadd+0x610>
   177ba:	4b7c      	ldr	r3, [pc, #496]	; (179ac <__aeabi_dadd+0x61c>)
   177bc:	0017      	movs	r7, r2
   177be:	401c      	ands	r4, r3
   177c0:	0006      	movs	r6, r0
   177c2:	e669      	b.n	17498 <__aeabi_dadd+0x108>
   177c4:	0020      	movs	r0, r4
   177c6:	4338      	orrs	r0, r7
   177c8:	2e00      	cmp	r6, #0
   177ca:	d1d1      	bne.n	17770 <__aeabi_dadd+0x3e0>
   177cc:	2800      	cmp	r0, #0
   177ce:	d15b      	bne.n	17888 <__aeabi_dadd+0x4f8>
   177d0:	001c      	movs	r4, r3
   177d2:	4314      	orrs	r4, r2
   177d4:	d100      	bne.n	177d8 <__aeabi_dadd+0x448>
   177d6:	e0a8      	b.n	1792a <__aeabi_dadd+0x59a>
   177d8:	001c      	movs	r4, r3
   177da:	0017      	movs	r7, r2
   177dc:	46d8      	mov	r8, fp
   177de:	e65b      	b.n	17498 <__aeabi_dadd+0x108>
   177e0:	0006      	movs	r6, r0
   177e2:	2400      	movs	r4, #0
   177e4:	2700      	movs	r7, #0
   177e6:	e697      	b.n	17518 <__aeabi_dadd+0x188>
   177e8:	4650      	mov	r0, sl
   177ea:	000b      	movs	r3, r1
   177ec:	3820      	subs	r0, #32
   177ee:	40c3      	lsrs	r3, r0
   177f0:	4699      	mov	r9, r3
   177f2:	4653      	mov	r3, sl
   177f4:	2b20      	cmp	r3, #32
   177f6:	d100      	bne.n	177fa <__aeabi_dadd+0x46a>
   177f8:	e095      	b.n	17926 <__aeabi_dadd+0x596>
   177fa:	2340      	movs	r3, #64	; 0x40
   177fc:	4650      	mov	r0, sl
   177fe:	1a1b      	subs	r3, r3, r0
   17800:	4099      	lsls	r1, r3
   17802:	430a      	orrs	r2, r1
   17804:	1e51      	subs	r1, r2, #1
   17806:	418a      	sbcs	r2, r1
   17808:	464b      	mov	r3, r9
   1780a:	2100      	movs	r1, #0
   1780c:	431a      	orrs	r2, r3
   1780e:	e69f      	b.n	17550 <__aeabi_dadd+0x1c0>
   17810:	2e00      	cmp	r6, #0
   17812:	d130      	bne.n	17876 <__aeabi_dadd+0x4e6>
   17814:	0026      	movs	r6, r4
   17816:	433e      	orrs	r6, r7
   17818:	d067      	beq.n	178ea <__aeabi_dadd+0x55a>
   1781a:	43db      	mvns	r3, r3
   1781c:	469a      	mov	sl, r3
   1781e:	2b00      	cmp	r3, #0
   17820:	d01c      	beq.n	1785c <__aeabi_dadd+0x4cc>
   17822:	4e61      	ldr	r6, [pc, #388]	; (179a8 <__aeabi_dadd+0x618>)
   17824:	42b0      	cmp	r0, r6
   17826:	d060      	beq.n	178ea <__aeabi_dadd+0x55a>
   17828:	4653      	mov	r3, sl
   1782a:	2b38      	cmp	r3, #56	; 0x38
   1782c:	dd00      	ble.n	17830 <__aeabi_dadd+0x4a0>
   1782e:	e096      	b.n	1795e <__aeabi_dadd+0x5ce>
   17830:	2b1f      	cmp	r3, #31
   17832:	dd00      	ble.n	17836 <__aeabi_dadd+0x4a6>
   17834:	e09f      	b.n	17976 <__aeabi_dadd+0x5e6>
   17836:	2620      	movs	r6, #32
   17838:	1af3      	subs	r3, r6, r3
   1783a:	0026      	movs	r6, r4
   1783c:	409e      	lsls	r6, r3
   1783e:	469c      	mov	ip, r3
   17840:	46b3      	mov	fp, r6
   17842:	4653      	mov	r3, sl
   17844:	003e      	movs	r6, r7
   17846:	40de      	lsrs	r6, r3
   17848:	0033      	movs	r3, r6
   1784a:	465e      	mov	r6, fp
   1784c:	431e      	orrs	r6, r3
   1784e:	4663      	mov	r3, ip
   17850:	409f      	lsls	r7, r3
   17852:	1e7b      	subs	r3, r7, #1
   17854:	419f      	sbcs	r7, r3
   17856:	4653      	mov	r3, sl
   17858:	40dc      	lsrs	r4, r3
   1785a:	4337      	orrs	r7, r6
   1785c:	18bf      	adds	r7, r7, r2
   1785e:	4297      	cmp	r7, r2
   17860:	4192      	sbcs	r2, r2
   17862:	1864      	adds	r4, r4, r1
   17864:	4252      	negs	r2, r2
   17866:	18a4      	adds	r4, r4, r2
   17868:	0006      	movs	r6, r0
   1786a:	e678      	b.n	1755e <__aeabi_dadd+0x1ce>
   1786c:	4327      	orrs	r7, r4
   1786e:	1e7c      	subs	r4, r7, #1
   17870:	41a7      	sbcs	r7, r4
   17872:	2400      	movs	r4, #0
   17874:	e737      	b.n	176e6 <__aeabi_dadd+0x356>
   17876:	4e4c      	ldr	r6, [pc, #304]	; (179a8 <__aeabi_dadd+0x618>)
   17878:	42b0      	cmp	r0, r6
   1787a:	d036      	beq.n	178ea <__aeabi_dadd+0x55a>
   1787c:	2680      	movs	r6, #128	; 0x80
   1787e:	425b      	negs	r3, r3
   17880:	0436      	lsls	r6, r6, #16
   17882:	469a      	mov	sl, r3
   17884:	4334      	orrs	r4, r6
   17886:	e7cf      	b.n	17828 <__aeabi_dadd+0x498>
   17888:	0018      	movs	r0, r3
   1788a:	4310      	orrs	r0, r2
   1788c:	d100      	bne.n	17890 <__aeabi_dadd+0x500>
   1788e:	e603      	b.n	17498 <__aeabi_dadd+0x108>
   17890:	1ab8      	subs	r0, r7, r2
   17892:	4684      	mov	ip, r0
   17894:	4567      	cmp	r7, ip
   17896:	41ad      	sbcs	r5, r5
   17898:	1ae0      	subs	r0, r4, r3
   1789a:	426d      	negs	r5, r5
   1789c:	1b40      	subs	r0, r0, r5
   1789e:	0205      	lsls	r5, r0, #8
   178a0:	d400      	bmi.n	178a4 <__aeabi_dadd+0x514>
   178a2:	e62c      	b.n	174fe <__aeabi_dadd+0x16e>
   178a4:	1bd7      	subs	r7, r2, r7
   178a6:	42ba      	cmp	r2, r7
   178a8:	4192      	sbcs	r2, r2
   178aa:	1b1c      	subs	r4, r3, r4
   178ac:	4252      	negs	r2, r2
   178ae:	1aa4      	subs	r4, r4, r2
   178b0:	46d8      	mov	r8, fp
   178b2:	e5f1      	b.n	17498 <__aeabi_dadd+0x108>
   178b4:	0018      	movs	r0, r3
   178b6:	4310      	orrs	r0, r2
   178b8:	d100      	bne.n	178bc <__aeabi_dadd+0x52c>
   178ba:	e763      	b.n	17784 <__aeabi_dadd+0x3f4>
   178bc:	08f8      	lsrs	r0, r7, #3
   178be:	0767      	lsls	r7, r4, #29
   178c0:	4307      	orrs	r7, r0
   178c2:	2080      	movs	r0, #128	; 0x80
   178c4:	08e4      	lsrs	r4, r4, #3
   178c6:	0300      	lsls	r0, r0, #12
   178c8:	4204      	tst	r4, r0
   178ca:	d008      	beq.n	178de <__aeabi_dadd+0x54e>
   178cc:	08dd      	lsrs	r5, r3, #3
   178ce:	4205      	tst	r5, r0
   178d0:	d105      	bne.n	178de <__aeabi_dadd+0x54e>
   178d2:	08d2      	lsrs	r2, r2, #3
   178d4:	0759      	lsls	r1, r3, #29
   178d6:	4311      	orrs	r1, r2
   178d8:	000f      	movs	r7, r1
   178da:	002c      	movs	r4, r5
   178dc:	46d8      	mov	r8, fp
   178de:	0f7b      	lsrs	r3, r7, #29
   178e0:	00e4      	lsls	r4, r4, #3
   178e2:	431c      	orrs	r4, r3
   178e4:	00ff      	lsls	r7, r7, #3
   178e6:	4e30      	ldr	r6, [pc, #192]	; (179a8 <__aeabi_dadd+0x618>)
   178e8:	e5d6      	b.n	17498 <__aeabi_dadd+0x108>
   178ea:	000c      	movs	r4, r1
   178ec:	0017      	movs	r7, r2
   178ee:	0006      	movs	r6, r0
   178f0:	e5d2      	b.n	17498 <__aeabi_dadd+0x108>
   178f2:	2b00      	cmp	r3, #0
   178f4:	d038      	beq.n	17968 <__aeabi_dadd+0x5d8>
   178f6:	000b      	movs	r3, r1
   178f8:	4313      	orrs	r3, r2
   178fa:	d100      	bne.n	178fe <__aeabi_dadd+0x56e>
   178fc:	e742      	b.n	17784 <__aeabi_dadd+0x3f4>
   178fe:	08f8      	lsrs	r0, r7, #3
   17900:	0767      	lsls	r7, r4, #29
   17902:	4307      	orrs	r7, r0
   17904:	2080      	movs	r0, #128	; 0x80
   17906:	08e4      	lsrs	r4, r4, #3
   17908:	0300      	lsls	r0, r0, #12
   1790a:	4204      	tst	r4, r0
   1790c:	d0e7      	beq.n	178de <__aeabi_dadd+0x54e>
   1790e:	08cb      	lsrs	r3, r1, #3
   17910:	4203      	tst	r3, r0
   17912:	d1e4      	bne.n	178de <__aeabi_dadd+0x54e>
   17914:	08d2      	lsrs	r2, r2, #3
   17916:	0749      	lsls	r1, r1, #29
   17918:	4311      	orrs	r1, r2
   1791a:	000f      	movs	r7, r1
   1791c:	001c      	movs	r4, r3
   1791e:	e7de      	b.n	178de <__aeabi_dadd+0x54e>
   17920:	2700      	movs	r7, #0
   17922:	2400      	movs	r4, #0
   17924:	e5d5      	b.n	174d2 <__aeabi_dadd+0x142>
   17926:	2100      	movs	r1, #0
   17928:	e76b      	b.n	17802 <__aeabi_dadd+0x472>
   1792a:	2500      	movs	r5, #0
   1792c:	2700      	movs	r7, #0
   1792e:	e5f3      	b.n	17518 <__aeabi_dadd+0x188>
   17930:	464e      	mov	r6, r9
   17932:	0025      	movs	r5, r4
   17934:	3e20      	subs	r6, #32
   17936:	40f5      	lsrs	r5, r6
   17938:	464b      	mov	r3, r9
   1793a:	002e      	movs	r6, r5
   1793c:	2b20      	cmp	r3, #32
   1793e:	d02d      	beq.n	1799c <__aeabi_dadd+0x60c>
   17940:	2540      	movs	r5, #64	; 0x40
   17942:	1aed      	subs	r5, r5, r3
   17944:	40ac      	lsls	r4, r5
   17946:	4327      	orrs	r7, r4
   17948:	1e7c      	subs	r4, r7, #1
   1794a:	41a7      	sbcs	r7, r4
   1794c:	2400      	movs	r4, #0
   1794e:	4337      	orrs	r7, r6
   17950:	e6c9      	b.n	176e6 <__aeabi_dadd+0x356>
   17952:	2480      	movs	r4, #128	; 0x80
   17954:	2500      	movs	r5, #0
   17956:	0324      	lsls	r4, r4, #12
   17958:	4e13      	ldr	r6, [pc, #76]	; (179a8 <__aeabi_dadd+0x618>)
   1795a:	2700      	movs	r7, #0
   1795c:	e5dc      	b.n	17518 <__aeabi_dadd+0x188>
   1795e:	4327      	orrs	r7, r4
   17960:	1e7c      	subs	r4, r7, #1
   17962:	41a7      	sbcs	r7, r4
   17964:	2400      	movs	r4, #0
   17966:	e779      	b.n	1785c <__aeabi_dadd+0x4cc>
   17968:	000c      	movs	r4, r1
   1796a:	0017      	movs	r7, r2
   1796c:	4e0e      	ldr	r6, [pc, #56]	; (179a8 <__aeabi_dadd+0x618>)
   1796e:	e593      	b.n	17498 <__aeabi_dadd+0x108>
   17970:	000c      	movs	r4, r1
   17972:	0017      	movs	r7, r2
   17974:	e590      	b.n	17498 <__aeabi_dadd+0x108>
   17976:	4656      	mov	r6, sl
   17978:	0023      	movs	r3, r4
   1797a:	3e20      	subs	r6, #32
   1797c:	40f3      	lsrs	r3, r6
   1797e:	4699      	mov	r9, r3
   17980:	4653      	mov	r3, sl
   17982:	2b20      	cmp	r3, #32
   17984:	d00e      	beq.n	179a4 <__aeabi_dadd+0x614>
   17986:	2340      	movs	r3, #64	; 0x40
   17988:	4656      	mov	r6, sl
   1798a:	1b9b      	subs	r3, r3, r6
   1798c:	409c      	lsls	r4, r3
   1798e:	4327      	orrs	r7, r4
   17990:	1e7c      	subs	r4, r7, #1
   17992:	41a7      	sbcs	r7, r4
   17994:	464b      	mov	r3, r9
   17996:	2400      	movs	r4, #0
   17998:	431f      	orrs	r7, r3
   1799a:	e75f      	b.n	1785c <__aeabi_dadd+0x4cc>
   1799c:	2400      	movs	r4, #0
   1799e:	e7d2      	b.n	17946 <__aeabi_dadd+0x5b6>
   179a0:	0017      	movs	r7, r2
   179a2:	e5b2      	b.n	1750a <__aeabi_dadd+0x17a>
   179a4:	2400      	movs	r4, #0
   179a6:	e7f2      	b.n	1798e <__aeabi_dadd+0x5fe>
   179a8:	000007ff 	.word	0x000007ff
   179ac:	ff7fffff 	.word	0xff7fffff

000179b0 <__aeabi_ddiv>:
   179b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   179b2:	4657      	mov	r7, sl
   179b4:	4645      	mov	r5, r8
   179b6:	46de      	mov	lr, fp
   179b8:	464e      	mov	r6, r9
   179ba:	b5e0      	push	{r5, r6, r7, lr}
   179bc:	004c      	lsls	r4, r1, #1
   179be:	030e      	lsls	r6, r1, #12
   179c0:	b087      	sub	sp, #28
   179c2:	4683      	mov	fp, r0
   179c4:	4692      	mov	sl, r2
   179c6:	001d      	movs	r5, r3
   179c8:	4680      	mov	r8, r0
   179ca:	0b36      	lsrs	r6, r6, #12
   179cc:	0d64      	lsrs	r4, r4, #21
   179ce:	0fcf      	lsrs	r7, r1, #31
   179d0:	2c00      	cmp	r4, #0
   179d2:	d04f      	beq.n	17a74 <__aeabi_ddiv+0xc4>
   179d4:	4b6f      	ldr	r3, [pc, #444]	; (17b94 <__aeabi_ddiv+0x1e4>)
   179d6:	429c      	cmp	r4, r3
   179d8:	d035      	beq.n	17a46 <__aeabi_ddiv+0x96>
   179da:	2380      	movs	r3, #128	; 0x80
   179dc:	0f42      	lsrs	r2, r0, #29
   179de:	041b      	lsls	r3, r3, #16
   179e0:	00f6      	lsls	r6, r6, #3
   179e2:	4313      	orrs	r3, r2
   179e4:	4333      	orrs	r3, r6
   179e6:	4699      	mov	r9, r3
   179e8:	00c3      	lsls	r3, r0, #3
   179ea:	4698      	mov	r8, r3
   179ec:	4b6a      	ldr	r3, [pc, #424]	; (17b98 <__aeabi_ddiv+0x1e8>)
   179ee:	2600      	movs	r6, #0
   179f0:	469c      	mov	ip, r3
   179f2:	2300      	movs	r3, #0
   179f4:	4464      	add	r4, ip
   179f6:	9303      	str	r3, [sp, #12]
   179f8:	032b      	lsls	r3, r5, #12
   179fa:	0b1b      	lsrs	r3, r3, #12
   179fc:	469b      	mov	fp, r3
   179fe:	006b      	lsls	r3, r5, #1
   17a00:	0fed      	lsrs	r5, r5, #31
   17a02:	4650      	mov	r0, sl
   17a04:	0d5b      	lsrs	r3, r3, #21
   17a06:	9501      	str	r5, [sp, #4]
   17a08:	d05e      	beq.n	17ac8 <__aeabi_ddiv+0x118>
   17a0a:	4a62      	ldr	r2, [pc, #392]	; (17b94 <__aeabi_ddiv+0x1e4>)
   17a0c:	4293      	cmp	r3, r2
   17a0e:	d053      	beq.n	17ab8 <__aeabi_ddiv+0x108>
   17a10:	465a      	mov	r2, fp
   17a12:	00d1      	lsls	r1, r2, #3
   17a14:	2280      	movs	r2, #128	; 0x80
   17a16:	0f40      	lsrs	r0, r0, #29
   17a18:	0412      	lsls	r2, r2, #16
   17a1a:	4302      	orrs	r2, r0
   17a1c:	430a      	orrs	r2, r1
   17a1e:	4693      	mov	fp, r2
   17a20:	4652      	mov	r2, sl
   17a22:	00d1      	lsls	r1, r2, #3
   17a24:	4a5c      	ldr	r2, [pc, #368]	; (17b98 <__aeabi_ddiv+0x1e8>)
   17a26:	4694      	mov	ip, r2
   17a28:	2200      	movs	r2, #0
   17a2a:	4463      	add	r3, ip
   17a2c:	0038      	movs	r0, r7
   17a2e:	4068      	eors	r0, r5
   17a30:	4684      	mov	ip, r0
   17a32:	9002      	str	r0, [sp, #8]
   17a34:	1ae4      	subs	r4, r4, r3
   17a36:	4316      	orrs	r6, r2
   17a38:	2e0f      	cmp	r6, #15
   17a3a:	d900      	bls.n	17a3e <__aeabi_ddiv+0x8e>
   17a3c:	e0b4      	b.n	17ba8 <__aeabi_ddiv+0x1f8>
   17a3e:	4b57      	ldr	r3, [pc, #348]	; (17b9c <__aeabi_ddiv+0x1ec>)
   17a40:	00b6      	lsls	r6, r6, #2
   17a42:	599b      	ldr	r3, [r3, r6]
   17a44:	469f      	mov	pc, r3
   17a46:	0003      	movs	r3, r0
   17a48:	4333      	orrs	r3, r6
   17a4a:	4699      	mov	r9, r3
   17a4c:	d16c      	bne.n	17b28 <__aeabi_ddiv+0x178>
   17a4e:	2300      	movs	r3, #0
   17a50:	4698      	mov	r8, r3
   17a52:	3302      	adds	r3, #2
   17a54:	2608      	movs	r6, #8
   17a56:	9303      	str	r3, [sp, #12]
   17a58:	e7ce      	b.n	179f8 <__aeabi_ddiv+0x48>
   17a5a:	46cb      	mov	fp, r9
   17a5c:	4641      	mov	r1, r8
   17a5e:	9a03      	ldr	r2, [sp, #12]
   17a60:	9701      	str	r7, [sp, #4]
   17a62:	2a02      	cmp	r2, #2
   17a64:	d165      	bne.n	17b32 <__aeabi_ddiv+0x182>
   17a66:	9b01      	ldr	r3, [sp, #4]
   17a68:	4c4a      	ldr	r4, [pc, #296]	; (17b94 <__aeabi_ddiv+0x1e4>)
   17a6a:	469c      	mov	ip, r3
   17a6c:	2300      	movs	r3, #0
   17a6e:	2200      	movs	r2, #0
   17a70:	4698      	mov	r8, r3
   17a72:	e06b      	b.n	17b4c <__aeabi_ddiv+0x19c>
   17a74:	0003      	movs	r3, r0
   17a76:	4333      	orrs	r3, r6
   17a78:	4699      	mov	r9, r3
   17a7a:	d04e      	beq.n	17b1a <__aeabi_ddiv+0x16a>
   17a7c:	2e00      	cmp	r6, #0
   17a7e:	d100      	bne.n	17a82 <__aeabi_ddiv+0xd2>
   17a80:	e1bc      	b.n	17dfc <__aeabi_ddiv+0x44c>
   17a82:	0030      	movs	r0, r6
   17a84:	f001 f94a 	bl	18d1c <__clzsi2>
   17a88:	0003      	movs	r3, r0
   17a8a:	3b0b      	subs	r3, #11
   17a8c:	2b1c      	cmp	r3, #28
   17a8e:	dd00      	ble.n	17a92 <__aeabi_ddiv+0xe2>
   17a90:	e1ac      	b.n	17dec <__aeabi_ddiv+0x43c>
   17a92:	221d      	movs	r2, #29
   17a94:	1ad3      	subs	r3, r2, r3
   17a96:	465a      	mov	r2, fp
   17a98:	0001      	movs	r1, r0
   17a9a:	40da      	lsrs	r2, r3
   17a9c:	3908      	subs	r1, #8
   17a9e:	408e      	lsls	r6, r1
   17aa0:	0013      	movs	r3, r2
   17aa2:	4333      	orrs	r3, r6
   17aa4:	4699      	mov	r9, r3
   17aa6:	465b      	mov	r3, fp
   17aa8:	408b      	lsls	r3, r1
   17aaa:	4698      	mov	r8, r3
   17aac:	2300      	movs	r3, #0
   17aae:	4c3c      	ldr	r4, [pc, #240]	; (17ba0 <__aeabi_ddiv+0x1f0>)
   17ab0:	2600      	movs	r6, #0
   17ab2:	1a24      	subs	r4, r4, r0
   17ab4:	9303      	str	r3, [sp, #12]
   17ab6:	e79f      	b.n	179f8 <__aeabi_ddiv+0x48>
   17ab8:	4651      	mov	r1, sl
   17aba:	465a      	mov	r2, fp
   17abc:	4311      	orrs	r1, r2
   17abe:	d129      	bne.n	17b14 <__aeabi_ddiv+0x164>
   17ac0:	2200      	movs	r2, #0
   17ac2:	4693      	mov	fp, r2
   17ac4:	3202      	adds	r2, #2
   17ac6:	e7b1      	b.n	17a2c <__aeabi_ddiv+0x7c>
   17ac8:	4659      	mov	r1, fp
   17aca:	4301      	orrs	r1, r0
   17acc:	d01e      	beq.n	17b0c <__aeabi_ddiv+0x15c>
   17ace:	465b      	mov	r3, fp
   17ad0:	2b00      	cmp	r3, #0
   17ad2:	d100      	bne.n	17ad6 <__aeabi_ddiv+0x126>
   17ad4:	e19e      	b.n	17e14 <__aeabi_ddiv+0x464>
   17ad6:	4658      	mov	r0, fp
   17ad8:	f001 f920 	bl	18d1c <__clzsi2>
   17adc:	0003      	movs	r3, r0
   17ade:	3b0b      	subs	r3, #11
   17ae0:	2b1c      	cmp	r3, #28
   17ae2:	dd00      	ble.n	17ae6 <__aeabi_ddiv+0x136>
   17ae4:	e18f      	b.n	17e06 <__aeabi_ddiv+0x456>
   17ae6:	0002      	movs	r2, r0
   17ae8:	4659      	mov	r1, fp
   17aea:	3a08      	subs	r2, #8
   17aec:	4091      	lsls	r1, r2
   17aee:	468b      	mov	fp, r1
   17af0:	211d      	movs	r1, #29
   17af2:	1acb      	subs	r3, r1, r3
   17af4:	4651      	mov	r1, sl
   17af6:	40d9      	lsrs	r1, r3
   17af8:	000b      	movs	r3, r1
   17afa:	4659      	mov	r1, fp
   17afc:	430b      	orrs	r3, r1
   17afe:	4651      	mov	r1, sl
   17b00:	469b      	mov	fp, r3
   17b02:	4091      	lsls	r1, r2
   17b04:	4b26      	ldr	r3, [pc, #152]	; (17ba0 <__aeabi_ddiv+0x1f0>)
   17b06:	2200      	movs	r2, #0
   17b08:	1a1b      	subs	r3, r3, r0
   17b0a:	e78f      	b.n	17a2c <__aeabi_ddiv+0x7c>
   17b0c:	2300      	movs	r3, #0
   17b0e:	2201      	movs	r2, #1
   17b10:	469b      	mov	fp, r3
   17b12:	e78b      	b.n	17a2c <__aeabi_ddiv+0x7c>
   17b14:	4651      	mov	r1, sl
   17b16:	2203      	movs	r2, #3
   17b18:	e788      	b.n	17a2c <__aeabi_ddiv+0x7c>
   17b1a:	2300      	movs	r3, #0
   17b1c:	4698      	mov	r8, r3
   17b1e:	3301      	adds	r3, #1
   17b20:	2604      	movs	r6, #4
   17b22:	2400      	movs	r4, #0
   17b24:	9303      	str	r3, [sp, #12]
   17b26:	e767      	b.n	179f8 <__aeabi_ddiv+0x48>
   17b28:	2303      	movs	r3, #3
   17b2a:	46b1      	mov	r9, r6
   17b2c:	9303      	str	r3, [sp, #12]
   17b2e:	260c      	movs	r6, #12
   17b30:	e762      	b.n	179f8 <__aeabi_ddiv+0x48>
   17b32:	2a03      	cmp	r2, #3
   17b34:	d100      	bne.n	17b38 <__aeabi_ddiv+0x188>
   17b36:	e25c      	b.n	17ff2 <__aeabi_ddiv+0x642>
   17b38:	9b01      	ldr	r3, [sp, #4]
   17b3a:	2a01      	cmp	r2, #1
   17b3c:	d000      	beq.n	17b40 <__aeabi_ddiv+0x190>
   17b3e:	e1e4      	b.n	17f0a <__aeabi_ddiv+0x55a>
   17b40:	4013      	ands	r3, r2
   17b42:	469c      	mov	ip, r3
   17b44:	2300      	movs	r3, #0
   17b46:	2400      	movs	r4, #0
   17b48:	2200      	movs	r2, #0
   17b4a:	4698      	mov	r8, r3
   17b4c:	2100      	movs	r1, #0
   17b4e:	0312      	lsls	r2, r2, #12
   17b50:	0b13      	lsrs	r3, r2, #12
   17b52:	0d0a      	lsrs	r2, r1, #20
   17b54:	0512      	lsls	r2, r2, #20
   17b56:	431a      	orrs	r2, r3
   17b58:	0523      	lsls	r3, r4, #20
   17b5a:	4c12      	ldr	r4, [pc, #72]	; (17ba4 <__aeabi_ddiv+0x1f4>)
   17b5c:	4640      	mov	r0, r8
   17b5e:	4022      	ands	r2, r4
   17b60:	4313      	orrs	r3, r2
   17b62:	4662      	mov	r2, ip
   17b64:	005b      	lsls	r3, r3, #1
   17b66:	07d2      	lsls	r2, r2, #31
   17b68:	085b      	lsrs	r3, r3, #1
   17b6a:	4313      	orrs	r3, r2
   17b6c:	0019      	movs	r1, r3
   17b6e:	b007      	add	sp, #28
   17b70:	bc3c      	pop	{r2, r3, r4, r5}
   17b72:	4690      	mov	r8, r2
   17b74:	4699      	mov	r9, r3
   17b76:	46a2      	mov	sl, r4
   17b78:	46ab      	mov	fp, r5
   17b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17b7c:	2300      	movs	r3, #0
   17b7e:	2280      	movs	r2, #128	; 0x80
   17b80:	469c      	mov	ip, r3
   17b82:	0312      	lsls	r2, r2, #12
   17b84:	4698      	mov	r8, r3
   17b86:	4c03      	ldr	r4, [pc, #12]	; (17b94 <__aeabi_ddiv+0x1e4>)
   17b88:	e7e0      	b.n	17b4c <__aeabi_ddiv+0x19c>
   17b8a:	2300      	movs	r3, #0
   17b8c:	4c01      	ldr	r4, [pc, #4]	; (17b94 <__aeabi_ddiv+0x1e4>)
   17b8e:	2200      	movs	r2, #0
   17b90:	4698      	mov	r8, r3
   17b92:	e7db      	b.n	17b4c <__aeabi_ddiv+0x19c>
   17b94:	000007ff 	.word	0x000007ff
   17b98:	fffffc01 	.word	0xfffffc01
   17b9c:	0001dc50 	.word	0x0001dc50
   17ba0:	fffffc0d 	.word	0xfffffc0d
   17ba4:	800fffff 	.word	0x800fffff
   17ba8:	45d9      	cmp	r9, fp
   17baa:	d900      	bls.n	17bae <__aeabi_ddiv+0x1fe>
   17bac:	e139      	b.n	17e22 <__aeabi_ddiv+0x472>
   17bae:	d100      	bne.n	17bb2 <__aeabi_ddiv+0x202>
   17bb0:	e134      	b.n	17e1c <__aeabi_ddiv+0x46c>
   17bb2:	2300      	movs	r3, #0
   17bb4:	4646      	mov	r6, r8
   17bb6:	464d      	mov	r5, r9
   17bb8:	469a      	mov	sl, r3
   17bba:	3c01      	subs	r4, #1
   17bbc:	465b      	mov	r3, fp
   17bbe:	0e0a      	lsrs	r2, r1, #24
   17bc0:	021b      	lsls	r3, r3, #8
   17bc2:	431a      	orrs	r2, r3
   17bc4:	020b      	lsls	r3, r1, #8
   17bc6:	0c17      	lsrs	r7, r2, #16
   17bc8:	9303      	str	r3, [sp, #12]
   17bca:	0413      	lsls	r3, r2, #16
   17bcc:	0c1b      	lsrs	r3, r3, #16
   17bce:	0039      	movs	r1, r7
   17bd0:	0028      	movs	r0, r5
   17bd2:	4690      	mov	r8, r2
   17bd4:	9301      	str	r3, [sp, #4]
   17bd6:	f7ff fa1d 	bl	17014 <__udivsi3>
   17bda:	0002      	movs	r2, r0
   17bdc:	9b01      	ldr	r3, [sp, #4]
   17bde:	4683      	mov	fp, r0
   17be0:	435a      	muls	r2, r3
   17be2:	0028      	movs	r0, r5
   17be4:	0039      	movs	r1, r7
   17be6:	4691      	mov	r9, r2
   17be8:	f7ff fa9a 	bl	17120 <__aeabi_uidivmod>
   17bec:	0c35      	lsrs	r5, r6, #16
   17bee:	0409      	lsls	r1, r1, #16
   17bf0:	430d      	orrs	r5, r1
   17bf2:	45a9      	cmp	r9, r5
   17bf4:	d90d      	bls.n	17c12 <__aeabi_ddiv+0x262>
   17bf6:	465b      	mov	r3, fp
   17bf8:	4445      	add	r5, r8
   17bfa:	3b01      	subs	r3, #1
   17bfc:	45a8      	cmp	r8, r5
   17bfe:	d900      	bls.n	17c02 <__aeabi_ddiv+0x252>
   17c00:	e13a      	b.n	17e78 <__aeabi_ddiv+0x4c8>
   17c02:	45a9      	cmp	r9, r5
   17c04:	d800      	bhi.n	17c08 <__aeabi_ddiv+0x258>
   17c06:	e137      	b.n	17e78 <__aeabi_ddiv+0x4c8>
   17c08:	2302      	movs	r3, #2
   17c0a:	425b      	negs	r3, r3
   17c0c:	469c      	mov	ip, r3
   17c0e:	4445      	add	r5, r8
   17c10:	44e3      	add	fp, ip
   17c12:	464b      	mov	r3, r9
   17c14:	1aeb      	subs	r3, r5, r3
   17c16:	0039      	movs	r1, r7
   17c18:	0018      	movs	r0, r3
   17c1a:	9304      	str	r3, [sp, #16]
   17c1c:	f7ff f9fa 	bl	17014 <__udivsi3>
   17c20:	9b01      	ldr	r3, [sp, #4]
   17c22:	0005      	movs	r5, r0
   17c24:	4343      	muls	r3, r0
   17c26:	0039      	movs	r1, r7
   17c28:	9804      	ldr	r0, [sp, #16]
   17c2a:	4699      	mov	r9, r3
   17c2c:	f7ff fa78 	bl	17120 <__aeabi_uidivmod>
   17c30:	0433      	lsls	r3, r6, #16
   17c32:	0409      	lsls	r1, r1, #16
   17c34:	0c1b      	lsrs	r3, r3, #16
   17c36:	430b      	orrs	r3, r1
   17c38:	4599      	cmp	r9, r3
   17c3a:	d909      	bls.n	17c50 <__aeabi_ddiv+0x2a0>
   17c3c:	4443      	add	r3, r8
   17c3e:	1e6a      	subs	r2, r5, #1
   17c40:	4598      	cmp	r8, r3
   17c42:	d900      	bls.n	17c46 <__aeabi_ddiv+0x296>
   17c44:	e11a      	b.n	17e7c <__aeabi_ddiv+0x4cc>
   17c46:	4599      	cmp	r9, r3
   17c48:	d800      	bhi.n	17c4c <__aeabi_ddiv+0x29c>
   17c4a:	e117      	b.n	17e7c <__aeabi_ddiv+0x4cc>
   17c4c:	3d02      	subs	r5, #2
   17c4e:	4443      	add	r3, r8
   17c50:	464a      	mov	r2, r9
   17c52:	1a9b      	subs	r3, r3, r2
   17c54:	465a      	mov	r2, fp
   17c56:	0412      	lsls	r2, r2, #16
   17c58:	432a      	orrs	r2, r5
   17c5a:	9903      	ldr	r1, [sp, #12]
   17c5c:	4693      	mov	fp, r2
   17c5e:	0c10      	lsrs	r0, r2, #16
   17c60:	0c0a      	lsrs	r2, r1, #16
   17c62:	4691      	mov	r9, r2
   17c64:	0409      	lsls	r1, r1, #16
   17c66:	465a      	mov	r2, fp
   17c68:	0c09      	lsrs	r1, r1, #16
   17c6a:	464e      	mov	r6, r9
   17c6c:	000d      	movs	r5, r1
   17c6e:	0412      	lsls	r2, r2, #16
   17c70:	0c12      	lsrs	r2, r2, #16
   17c72:	4345      	muls	r5, r0
   17c74:	9105      	str	r1, [sp, #20]
   17c76:	4351      	muls	r1, r2
   17c78:	4372      	muls	r2, r6
   17c7a:	4370      	muls	r0, r6
   17c7c:	1952      	adds	r2, r2, r5
   17c7e:	0c0e      	lsrs	r6, r1, #16
   17c80:	18b2      	adds	r2, r6, r2
   17c82:	4295      	cmp	r5, r2
   17c84:	d903      	bls.n	17c8e <__aeabi_ddiv+0x2de>
   17c86:	2580      	movs	r5, #128	; 0x80
   17c88:	026d      	lsls	r5, r5, #9
   17c8a:	46ac      	mov	ip, r5
   17c8c:	4460      	add	r0, ip
   17c8e:	0c15      	lsrs	r5, r2, #16
   17c90:	0409      	lsls	r1, r1, #16
   17c92:	0412      	lsls	r2, r2, #16
   17c94:	0c09      	lsrs	r1, r1, #16
   17c96:	1828      	adds	r0, r5, r0
   17c98:	1852      	adds	r2, r2, r1
   17c9a:	4283      	cmp	r3, r0
   17c9c:	d200      	bcs.n	17ca0 <__aeabi_ddiv+0x2f0>
   17c9e:	e0ce      	b.n	17e3e <__aeabi_ddiv+0x48e>
   17ca0:	d100      	bne.n	17ca4 <__aeabi_ddiv+0x2f4>
   17ca2:	e0c8      	b.n	17e36 <__aeabi_ddiv+0x486>
   17ca4:	1a1d      	subs	r5, r3, r0
   17ca6:	4653      	mov	r3, sl
   17ca8:	1a9e      	subs	r6, r3, r2
   17caa:	45b2      	cmp	sl, r6
   17cac:	4192      	sbcs	r2, r2
   17cae:	4252      	negs	r2, r2
   17cb0:	1aab      	subs	r3, r5, r2
   17cb2:	469a      	mov	sl, r3
   17cb4:	4598      	cmp	r8, r3
   17cb6:	d100      	bne.n	17cba <__aeabi_ddiv+0x30a>
   17cb8:	e117      	b.n	17eea <__aeabi_ddiv+0x53a>
   17cba:	0039      	movs	r1, r7
   17cbc:	0018      	movs	r0, r3
   17cbe:	f7ff f9a9 	bl	17014 <__udivsi3>
   17cc2:	9b01      	ldr	r3, [sp, #4]
   17cc4:	0005      	movs	r5, r0
   17cc6:	4343      	muls	r3, r0
   17cc8:	0039      	movs	r1, r7
   17cca:	4650      	mov	r0, sl
   17ccc:	9304      	str	r3, [sp, #16]
   17cce:	f7ff fa27 	bl	17120 <__aeabi_uidivmod>
   17cd2:	9804      	ldr	r0, [sp, #16]
   17cd4:	040b      	lsls	r3, r1, #16
   17cd6:	0c31      	lsrs	r1, r6, #16
   17cd8:	4319      	orrs	r1, r3
   17cda:	4288      	cmp	r0, r1
   17cdc:	d909      	bls.n	17cf2 <__aeabi_ddiv+0x342>
   17cde:	4441      	add	r1, r8
   17ce0:	1e6b      	subs	r3, r5, #1
   17ce2:	4588      	cmp	r8, r1
   17ce4:	d900      	bls.n	17ce8 <__aeabi_ddiv+0x338>
   17ce6:	e107      	b.n	17ef8 <__aeabi_ddiv+0x548>
   17ce8:	4288      	cmp	r0, r1
   17cea:	d800      	bhi.n	17cee <__aeabi_ddiv+0x33e>
   17cec:	e104      	b.n	17ef8 <__aeabi_ddiv+0x548>
   17cee:	3d02      	subs	r5, #2
   17cf0:	4441      	add	r1, r8
   17cf2:	9b04      	ldr	r3, [sp, #16]
   17cf4:	1acb      	subs	r3, r1, r3
   17cf6:	0018      	movs	r0, r3
   17cf8:	0039      	movs	r1, r7
   17cfa:	9304      	str	r3, [sp, #16]
   17cfc:	f7ff f98a 	bl	17014 <__udivsi3>
   17d00:	9b01      	ldr	r3, [sp, #4]
   17d02:	4682      	mov	sl, r0
   17d04:	4343      	muls	r3, r0
   17d06:	0039      	movs	r1, r7
   17d08:	9804      	ldr	r0, [sp, #16]
   17d0a:	9301      	str	r3, [sp, #4]
   17d0c:	f7ff fa08 	bl	17120 <__aeabi_uidivmod>
   17d10:	9801      	ldr	r0, [sp, #4]
   17d12:	040b      	lsls	r3, r1, #16
   17d14:	0431      	lsls	r1, r6, #16
   17d16:	0c09      	lsrs	r1, r1, #16
   17d18:	4319      	orrs	r1, r3
   17d1a:	4288      	cmp	r0, r1
   17d1c:	d90d      	bls.n	17d3a <__aeabi_ddiv+0x38a>
   17d1e:	4653      	mov	r3, sl
   17d20:	4441      	add	r1, r8
   17d22:	3b01      	subs	r3, #1
   17d24:	4588      	cmp	r8, r1
   17d26:	d900      	bls.n	17d2a <__aeabi_ddiv+0x37a>
   17d28:	e0e8      	b.n	17efc <__aeabi_ddiv+0x54c>
   17d2a:	4288      	cmp	r0, r1
   17d2c:	d800      	bhi.n	17d30 <__aeabi_ddiv+0x380>
   17d2e:	e0e5      	b.n	17efc <__aeabi_ddiv+0x54c>
   17d30:	2302      	movs	r3, #2
   17d32:	425b      	negs	r3, r3
   17d34:	469c      	mov	ip, r3
   17d36:	4441      	add	r1, r8
   17d38:	44e2      	add	sl, ip
   17d3a:	9b01      	ldr	r3, [sp, #4]
   17d3c:	042d      	lsls	r5, r5, #16
   17d3e:	1ace      	subs	r6, r1, r3
   17d40:	4651      	mov	r1, sl
   17d42:	4329      	orrs	r1, r5
   17d44:	9d05      	ldr	r5, [sp, #20]
   17d46:	464f      	mov	r7, r9
   17d48:	002a      	movs	r2, r5
   17d4a:	040b      	lsls	r3, r1, #16
   17d4c:	0c08      	lsrs	r0, r1, #16
   17d4e:	0c1b      	lsrs	r3, r3, #16
   17d50:	435a      	muls	r2, r3
   17d52:	4345      	muls	r5, r0
   17d54:	437b      	muls	r3, r7
   17d56:	4378      	muls	r0, r7
   17d58:	195b      	adds	r3, r3, r5
   17d5a:	0c17      	lsrs	r7, r2, #16
   17d5c:	18fb      	adds	r3, r7, r3
   17d5e:	429d      	cmp	r5, r3
   17d60:	d903      	bls.n	17d6a <__aeabi_ddiv+0x3ba>
   17d62:	2580      	movs	r5, #128	; 0x80
   17d64:	026d      	lsls	r5, r5, #9
   17d66:	46ac      	mov	ip, r5
   17d68:	4460      	add	r0, ip
   17d6a:	0c1d      	lsrs	r5, r3, #16
   17d6c:	0412      	lsls	r2, r2, #16
   17d6e:	041b      	lsls	r3, r3, #16
   17d70:	0c12      	lsrs	r2, r2, #16
   17d72:	1828      	adds	r0, r5, r0
   17d74:	189b      	adds	r3, r3, r2
   17d76:	4286      	cmp	r6, r0
   17d78:	d200      	bcs.n	17d7c <__aeabi_ddiv+0x3cc>
   17d7a:	e093      	b.n	17ea4 <__aeabi_ddiv+0x4f4>
   17d7c:	d100      	bne.n	17d80 <__aeabi_ddiv+0x3d0>
   17d7e:	e08e      	b.n	17e9e <__aeabi_ddiv+0x4ee>
   17d80:	2301      	movs	r3, #1
   17d82:	4319      	orrs	r1, r3
   17d84:	4ba0      	ldr	r3, [pc, #640]	; (18008 <__aeabi_ddiv+0x658>)
   17d86:	18e3      	adds	r3, r4, r3
   17d88:	2b00      	cmp	r3, #0
   17d8a:	dc00      	bgt.n	17d8e <__aeabi_ddiv+0x3de>
   17d8c:	e099      	b.n	17ec2 <__aeabi_ddiv+0x512>
   17d8e:	074a      	lsls	r2, r1, #29
   17d90:	d000      	beq.n	17d94 <__aeabi_ddiv+0x3e4>
   17d92:	e09e      	b.n	17ed2 <__aeabi_ddiv+0x522>
   17d94:	465a      	mov	r2, fp
   17d96:	01d2      	lsls	r2, r2, #7
   17d98:	d506      	bpl.n	17da8 <__aeabi_ddiv+0x3f8>
   17d9a:	465a      	mov	r2, fp
   17d9c:	4b9b      	ldr	r3, [pc, #620]	; (1800c <__aeabi_ddiv+0x65c>)
   17d9e:	401a      	ands	r2, r3
   17da0:	2380      	movs	r3, #128	; 0x80
   17da2:	4693      	mov	fp, r2
   17da4:	00db      	lsls	r3, r3, #3
   17da6:	18e3      	adds	r3, r4, r3
   17da8:	4a99      	ldr	r2, [pc, #612]	; (18010 <__aeabi_ddiv+0x660>)
   17daa:	4293      	cmp	r3, r2
   17dac:	dd68      	ble.n	17e80 <__aeabi_ddiv+0x4d0>
   17dae:	2301      	movs	r3, #1
   17db0:	9a02      	ldr	r2, [sp, #8]
   17db2:	4c98      	ldr	r4, [pc, #608]	; (18014 <__aeabi_ddiv+0x664>)
   17db4:	401a      	ands	r2, r3
   17db6:	2300      	movs	r3, #0
   17db8:	4694      	mov	ip, r2
   17dba:	4698      	mov	r8, r3
   17dbc:	2200      	movs	r2, #0
   17dbe:	e6c5      	b.n	17b4c <__aeabi_ddiv+0x19c>
   17dc0:	2280      	movs	r2, #128	; 0x80
   17dc2:	464b      	mov	r3, r9
   17dc4:	0312      	lsls	r2, r2, #12
   17dc6:	4213      	tst	r3, r2
   17dc8:	d00a      	beq.n	17de0 <__aeabi_ddiv+0x430>
   17dca:	465b      	mov	r3, fp
   17dcc:	4213      	tst	r3, r2
   17dce:	d106      	bne.n	17dde <__aeabi_ddiv+0x42e>
   17dd0:	431a      	orrs	r2, r3
   17dd2:	0312      	lsls	r2, r2, #12
   17dd4:	0b12      	lsrs	r2, r2, #12
   17dd6:	46ac      	mov	ip, r5
   17dd8:	4688      	mov	r8, r1
   17dda:	4c8e      	ldr	r4, [pc, #568]	; (18014 <__aeabi_ddiv+0x664>)
   17ddc:	e6b6      	b.n	17b4c <__aeabi_ddiv+0x19c>
   17dde:	464b      	mov	r3, r9
   17de0:	431a      	orrs	r2, r3
   17de2:	0312      	lsls	r2, r2, #12
   17de4:	0b12      	lsrs	r2, r2, #12
   17de6:	46bc      	mov	ip, r7
   17de8:	4c8a      	ldr	r4, [pc, #552]	; (18014 <__aeabi_ddiv+0x664>)
   17dea:	e6af      	b.n	17b4c <__aeabi_ddiv+0x19c>
   17dec:	0003      	movs	r3, r0
   17dee:	465a      	mov	r2, fp
   17df0:	3b28      	subs	r3, #40	; 0x28
   17df2:	409a      	lsls	r2, r3
   17df4:	2300      	movs	r3, #0
   17df6:	4691      	mov	r9, r2
   17df8:	4698      	mov	r8, r3
   17dfa:	e657      	b.n	17aac <__aeabi_ddiv+0xfc>
   17dfc:	4658      	mov	r0, fp
   17dfe:	f000 ff8d 	bl	18d1c <__clzsi2>
   17e02:	3020      	adds	r0, #32
   17e04:	e640      	b.n	17a88 <__aeabi_ddiv+0xd8>
   17e06:	0003      	movs	r3, r0
   17e08:	4652      	mov	r2, sl
   17e0a:	3b28      	subs	r3, #40	; 0x28
   17e0c:	409a      	lsls	r2, r3
   17e0e:	2100      	movs	r1, #0
   17e10:	4693      	mov	fp, r2
   17e12:	e677      	b.n	17b04 <__aeabi_ddiv+0x154>
   17e14:	f000 ff82 	bl	18d1c <__clzsi2>
   17e18:	3020      	adds	r0, #32
   17e1a:	e65f      	b.n	17adc <__aeabi_ddiv+0x12c>
   17e1c:	4588      	cmp	r8, r1
   17e1e:	d200      	bcs.n	17e22 <__aeabi_ddiv+0x472>
   17e20:	e6c7      	b.n	17bb2 <__aeabi_ddiv+0x202>
   17e22:	464b      	mov	r3, r9
   17e24:	07de      	lsls	r6, r3, #31
   17e26:	085d      	lsrs	r5, r3, #1
   17e28:	4643      	mov	r3, r8
   17e2a:	085b      	lsrs	r3, r3, #1
   17e2c:	431e      	orrs	r6, r3
   17e2e:	4643      	mov	r3, r8
   17e30:	07db      	lsls	r3, r3, #31
   17e32:	469a      	mov	sl, r3
   17e34:	e6c2      	b.n	17bbc <__aeabi_ddiv+0x20c>
   17e36:	2500      	movs	r5, #0
   17e38:	4592      	cmp	sl, r2
   17e3a:	d300      	bcc.n	17e3e <__aeabi_ddiv+0x48e>
   17e3c:	e733      	b.n	17ca6 <__aeabi_ddiv+0x2f6>
   17e3e:	9e03      	ldr	r6, [sp, #12]
   17e40:	4659      	mov	r1, fp
   17e42:	46b4      	mov	ip, r6
   17e44:	44e2      	add	sl, ip
   17e46:	45b2      	cmp	sl, r6
   17e48:	41ad      	sbcs	r5, r5
   17e4a:	426d      	negs	r5, r5
   17e4c:	4445      	add	r5, r8
   17e4e:	18eb      	adds	r3, r5, r3
   17e50:	3901      	subs	r1, #1
   17e52:	4598      	cmp	r8, r3
   17e54:	d207      	bcs.n	17e66 <__aeabi_ddiv+0x4b6>
   17e56:	4298      	cmp	r0, r3
   17e58:	d900      	bls.n	17e5c <__aeabi_ddiv+0x4ac>
   17e5a:	e07f      	b.n	17f5c <__aeabi_ddiv+0x5ac>
   17e5c:	d100      	bne.n	17e60 <__aeabi_ddiv+0x4b0>
   17e5e:	e0bc      	b.n	17fda <__aeabi_ddiv+0x62a>
   17e60:	1a1d      	subs	r5, r3, r0
   17e62:	468b      	mov	fp, r1
   17e64:	e71f      	b.n	17ca6 <__aeabi_ddiv+0x2f6>
   17e66:	4598      	cmp	r8, r3
   17e68:	d1fa      	bne.n	17e60 <__aeabi_ddiv+0x4b0>
   17e6a:	9d03      	ldr	r5, [sp, #12]
   17e6c:	4555      	cmp	r5, sl
   17e6e:	d9f2      	bls.n	17e56 <__aeabi_ddiv+0x4a6>
   17e70:	4643      	mov	r3, r8
   17e72:	468b      	mov	fp, r1
   17e74:	1a1d      	subs	r5, r3, r0
   17e76:	e716      	b.n	17ca6 <__aeabi_ddiv+0x2f6>
   17e78:	469b      	mov	fp, r3
   17e7a:	e6ca      	b.n	17c12 <__aeabi_ddiv+0x262>
   17e7c:	0015      	movs	r5, r2
   17e7e:	e6e7      	b.n	17c50 <__aeabi_ddiv+0x2a0>
   17e80:	465a      	mov	r2, fp
   17e82:	08c9      	lsrs	r1, r1, #3
   17e84:	0752      	lsls	r2, r2, #29
   17e86:	430a      	orrs	r2, r1
   17e88:	055b      	lsls	r3, r3, #21
   17e8a:	4690      	mov	r8, r2
   17e8c:	0d5c      	lsrs	r4, r3, #21
   17e8e:	465a      	mov	r2, fp
   17e90:	2301      	movs	r3, #1
   17e92:	9902      	ldr	r1, [sp, #8]
   17e94:	0252      	lsls	r2, r2, #9
   17e96:	4019      	ands	r1, r3
   17e98:	0b12      	lsrs	r2, r2, #12
   17e9a:	468c      	mov	ip, r1
   17e9c:	e656      	b.n	17b4c <__aeabi_ddiv+0x19c>
   17e9e:	2b00      	cmp	r3, #0
   17ea0:	d100      	bne.n	17ea4 <__aeabi_ddiv+0x4f4>
   17ea2:	e76f      	b.n	17d84 <__aeabi_ddiv+0x3d4>
   17ea4:	4446      	add	r6, r8
   17ea6:	1e4a      	subs	r2, r1, #1
   17ea8:	45b0      	cmp	r8, r6
   17eaa:	d929      	bls.n	17f00 <__aeabi_ddiv+0x550>
   17eac:	0011      	movs	r1, r2
   17eae:	4286      	cmp	r6, r0
   17eb0:	d000      	beq.n	17eb4 <__aeabi_ddiv+0x504>
   17eb2:	e765      	b.n	17d80 <__aeabi_ddiv+0x3d0>
   17eb4:	9a03      	ldr	r2, [sp, #12]
   17eb6:	4293      	cmp	r3, r2
   17eb8:	d000      	beq.n	17ebc <__aeabi_ddiv+0x50c>
   17eba:	e761      	b.n	17d80 <__aeabi_ddiv+0x3d0>
   17ebc:	e762      	b.n	17d84 <__aeabi_ddiv+0x3d4>
   17ebe:	2101      	movs	r1, #1
   17ec0:	4249      	negs	r1, r1
   17ec2:	2001      	movs	r0, #1
   17ec4:	1ac2      	subs	r2, r0, r3
   17ec6:	2a38      	cmp	r2, #56	; 0x38
   17ec8:	dd21      	ble.n	17f0e <__aeabi_ddiv+0x55e>
   17eca:	9b02      	ldr	r3, [sp, #8]
   17ecc:	4003      	ands	r3, r0
   17ece:	469c      	mov	ip, r3
   17ed0:	e638      	b.n	17b44 <__aeabi_ddiv+0x194>
   17ed2:	220f      	movs	r2, #15
   17ed4:	400a      	ands	r2, r1
   17ed6:	2a04      	cmp	r2, #4
   17ed8:	d100      	bne.n	17edc <__aeabi_ddiv+0x52c>
   17eda:	e75b      	b.n	17d94 <__aeabi_ddiv+0x3e4>
   17edc:	000a      	movs	r2, r1
   17ede:	1d11      	adds	r1, r2, #4
   17ee0:	4291      	cmp	r1, r2
   17ee2:	4192      	sbcs	r2, r2
   17ee4:	4252      	negs	r2, r2
   17ee6:	4493      	add	fp, r2
   17ee8:	e754      	b.n	17d94 <__aeabi_ddiv+0x3e4>
   17eea:	4b47      	ldr	r3, [pc, #284]	; (18008 <__aeabi_ddiv+0x658>)
   17eec:	18e3      	adds	r3, r4, r3
   17eee:	2b00      	cmp	r3, #0
   17ef0:	dde5      	ble.n	17ebe <__aeabi_ddiv+0x50e>
   17ef2:	2201      	movs	r2, #1
   17ef4:	4252      	negs	r2, r2
   17ef6:	e7f2      	b.n	17ede <__aeabi_ddiv+0x52e>
   17ef8:	001d      	movs	r5, r3
   17efa:	e6fa      	b.n	17cf2 <__aeabi_ddiv+0x342>
   17efc:	469a      	mov	sl, r3
   17efe:	e71c      	b.n	17d3a <__aeabi_ddiv+0x38a>
   17f00:	42b0      	cmp	r0, r6
   17f02:	d839      	bhi.n	17f78 <__aeabi_ddiv+0x5c8>
   17f04:	d06e      	beq.n	17fe4 <__aeabi_ddiv+0x634>
   17f06:	0011      	movs	r1, r2
   17f08:	e73a      	b.n	17d80 <__aeabi_ddiv+0x3d0>
   17f0a:	9302      	str	r3, [sp, #8]
   17f0c:	e73a      	b.n	17d84 <__aeabi_ddiv+0x3d4>
   17f0e:	2a1f      	cmp	r2, #31
   17f10:	dc3c      	bgt.n	17f8c <__aeabi_ddiv+0x5dc>
   17f12:	2320      	movs	r3, #32
   17f14:	1a9b      	subs	r3, r3, r2
   17f16:	000c      	movs	r4, r1
   17f18:	4658      	mov	r0, fp
   17f1a:	4099      	lsls	r1, r3
   17f1c:	4098      	lsls	r0, r3
   17f1e:	1e4b      	subs	r3, r1, #1
   17f20:	4199      	sbcs	r1, r3
   17f22:	465b      	mov	r3, fp
   17f24:	40d4      	lsrs	r4, r2
   17f26:	40d3      	lsrs	r3, r2
   17f28:	4320      	orrs	r0, r4
   17f2a:	4308      	orrs	r0, r1
   17f2c:	001a      	movs	r2, r3
   17f2e:	0743      	lsls	r3, r0, #29
   17f30:	d009      	beq.n	17f46 <__aeabi_ddiv+0x596>
   17f32:	230f      	movs	r3, #15
   17f34:	4003      	ands	r3, r0
   17f36:	2b04      	cmp	r3, #4
   17f38:	d005      	beq.n	17f46 <__aeabi_ddiv+0x596>
   17f3a:	0001      	movs	r1, r0
   17f3c:	1d08      	adds	r0, r1, #4
   17f3e:	4288      	cmp	r0, r1
   17f40:	419b      	sbcs	r3, r3
   17f42:	425b      	negs	r3, r3
   17f44:	18d2      	adds	r2, r2, r3
   17f46:	0213      	lsls	r3, r2, #8
   17f48:	d53a      	bpl.n	17fc0 <__aeabi_ddiv+0x610>
   17f4a:	2301      	movs	r3, #1
   17f4c:	9a02      	ldr	r2, [sp, #8]
   17f4e:	2401      	movs	r4, #1
   17f50:	401a      	ands	r2, r3
   17f52:	2300      	movs	r3, #0
   17f54:	4694      	mov	ip, r2
   17f56:	4698      	mov	r8, r3
   17f58:	2200      	movs	r2, #0
   17f5a:	e5f7      	b.n	17b4c <__aeabi_ddiv+0x19c>
   17f5c:	2102      	movs	r1, #2
   17f5e:	4249      	negs	r1, r1
   17f60:	468c      	mov	ip, r1
   17f62:	9d03      	ldr	r5, [sp, #12]
   17f64:	44e3      	add	fp, ip
   17f66:	46ac      	mov	ip, r5
   17f68:	44e2      	add	sl, ip
   17f6a:	45aa      	cmp	sl, r5
   17f6c:	41ad      	sbcs	r5, r5
   17f6e:	426d      	negs	r5, r5
   17f70:	4445      	add	r5, r8
   17f72:	18ed      	adds	r5, r5, r3
   17f74:	1a2d      	subs	r5, r5, r0
   17f76:	e696      	b.n	17ca6 <__aeabi_ddiv+0x2f6>
   17f78:	1e8a      	subs	r2, r1, #2
   17f7a:	9903      	ldr	r1, [sp, #12]
   17f7c:	004d      	lsls	r5, r1, #1
   17f7e:	428d      	cmp	r5, r1
   17f80:	4189      	sbcs	r1, r1
   17f82:	4249      	negs	r1, r1
   17f84:	4441      	add	r1, r8
   17f86:	1876      	adds	r6, r6, r1
   17f88:	9503      	str	r5, [sp, #12]
   17f8a:	e78f      	b.n	17eac <__aeabi_ddiv+0x4fc>
   17f8c:	201f      	movs	r0, #31
   17f8e:	4240      	negs	r0, r0
   17f90:	1ac3      	subs	r3, r0, r3
   17f92:	4658      	mov	r0, fp
   17f94:	40d8      	lsrs	r0, r3
   17f96:	0003      	movs	r3, r0
   17f98:	2a20      	cmp	r2, #32
   17f9a:	d028      	beq.n	17fee <__aeabi_ddiv+0x63e>
   17f9c:	2040      	movs	r0, #64	; 0x40
   17f9e:	465d      	mov	r5, fp
   17fa0:	1a82      	subs	r2, r0, r2
   17fa2:	4095      	lsls	r5, r2
   17fa4:	4329      	orrs	r1, r5
   17fa6:	1e4a      	subs	r2, r1, #1
   17fa8:	4191      	sbcs	r1, r2
   17faa:	4319      	orrs	r1, r3
   17fac:	2307      	movs	r3, #7
   17fae:	2200      	movs	r2, #0
   17fb0:	400b      	ands	r3, r1
   17fb2:	d009      	beq.n	17fc8 <__aeabi_ddiv+0x618>
   17fb4:	230f      	movs	r3, #15
   17fb6:	2200      	movs	r2, #0
   17fb8:	400b      	ands	r3, r1
   17fba:	0008      	movs	r0, r1
   17fbc:	2b04      	cmp	r3, #4
   17fbe:	d1bd      	bne.n	17f3c <__aeabi_ddiv+0x58c>
   17fc0:	0001      	movs	r1, r0
   17fc2:	0753      	lsls	r3, r2, #29
   17fc4:	0252      	lsls	r2, r2, #9
   17fc6:	0b12      	lsrs	r2, r2, #12
   17fc8:	08c9      	lsrs	r1, r1, #3
   17fca:	4319      	orrs	r1, r3
   17fcc:	2301      	movs	r3, #1
   17fce:	4688      	mov	r8, r1
   17fd0:	9902      	ldr	r1, [sp, #8]
   17fd2:	2400      	movs	r4, #0
   17fd4:	4019      	ands	r1, r3
   17fd6:	468c      	mov	ip, r1
   17fd8:	e5b8      	b.n	17b4c <__aeabi_ddiv+0x19c>
   17fda:	4552      	cmp	r2, sl
   17fdc:	d8be      	bhi.n	17f5c <__aeabi_ddiv+0x5ac>
   17fde:	468b      	mov	fp, r1
   17fe0:	2500      	movs	r5, #0
   17fe2:	e660      	b.n	17ca6 <__aeabi_ddiv+0x2f6>
   17fe4:	9d03      	ldr	r5, [sp, #12]
   17fe6:	429d      	cmp	r5, r3
   17fe8:	d3c6      	bcc.n	17f78 <__aeabi_ddiv+0x5c8>
   17fea:	0011      	movs	r1, r2
   17fec:	e762      	b.n	17eb4 <__aeabi_ddiv+0x504>
   17fee:	2500      	movs	r5, #0
   17ff0:	e7d8      	b.n	17fa4 <__aeabi_ddiv+0x5f4>
   17ff2:	2280      	movs	r2, #128	; 0x80
   17ff4:	465b      	mov	r3, fp
   17ff6:	0312      	lsls	r2, r2, #12
   17ff8:	431a      	orrs	r2, r3
   17ffa:	9b01      	ldr	r3, [sp, #4]
   17ffc:	0312      	lsls	r2, r2, #12
   17ffe:	0b12      	lsrs	r2, r2, #12
   18000:	469c      	mov	ip, r3
   18002:	4688      	mov	r8, r1
   18004:	4c03      	ldr	r4, [pc, #12]	; (18014 <__aeabi_ddiv+0x664>)
   18006:	e5a1      	b.n	17b4c <__aeabi_ddiv+0x19c>
   18008:	000003ff 	.word	0x000003ff
   1800c:	feffffff 	.word	0xfeffffff
   18010:	000007fe 	.word	0x000007fe
   18014:	000007ff 	.word	0x000007ff

00018018 <__aeabi_dmul>:
   18018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1801a:	4657      	mov	r7, sl
   1801c:	4645      	mov	r5, r8
   1801e:	46de      	mov	lr, fp
   18020:	464e      	mov	r6, r9
   18022:	b5e0      	push	{r5, r6, r7, lr}
   18024:	030c      	lsls	r4, r1, #12
   18026:	4698      	mov	r8, r3
   18028:	004e      	lsls	r6, r1, #1
   1802a:	0b23      	lsrs	r3, r4, #12
   1802c:	b087      	sub	sp, #28
   1802e:	0007      	movs	r7, r0
   18030:	4692      	mov	sl, r2
   18032:	469b      	mov	fp, r3
   18034:	0d76      	lsrs	r6, r6, #21
   18036:	0fcd      	lsrs	r5, r1, #31
   18038:	2e00      	cmp	r6, #0
   1803a:	d06b      	beq.n	18114 <__aeabi_dmul+0xfc>
   1803c:	4b6d      	ldr	r3, [pc, #436]	; (181f4 <__aeabi_dmul+0x1dc>)
   1803e:	429e      	cmp	r6, r3
   18040:	d035      	beq.n	180ae <__aeabi_dmul+0x96>
   18042:	2480      	movs	r4, #128	; 0x80
   18044:	465b      	mov	r3, fp
   18046:	0f42      	lsrs	r2, r0, #29
   18048:	0424      	lsls	r4, r4, #16
   1804a:	00db      	lsls	r3, r3, #3
   1804c:	4314      	orrs	r4, r2
   1804e:	431c      	orrs	r4, r3
   18050:	00c3      	lsls	r3, r0, #3
   18052:	4699      	mov	r9, r3
   18054:	4b68      	ldr	r3, [pc, #416]	; (181f8 <__aeabi_dmul+0x1e0>)
   18056:	46a3      	mov	fp, r4
   18058:	469c      	mov	ip, r3
   1805a:	2300      	movs	r3, #0
   1805c:	2700      	movs	r7, #0
   1805e:	4466      	add	r6, ip
   18060:	9302      	str	r3, [sp, #8]
   18062:	4643      	mov	r3, r8
   18064:	031c      	lsls	r4, r3, #12
   18066:	005a      	lsls	r2, r3, #1
   18068:	0fdb      	lsrs	r3, r3, #31
   1806a:	4650      	mov	r0, sl
   1806c:	0b24      	lsrs	r4, r4, #12
   1806e:	0d52      	lsrs	r2, r2, #21
   18070:	4698      	mov	r8, r3
   18072:	d100      	bne.n	18076 <__aeabi_dmul+0x5e>
   18074:	e076      	b.n	18164 <__aeabi_dmul+0x14c>
   18076:	4b5f      	ldr	r3, [pc, #380]	; (181f4 <__aeabi_dmul+0x1dc>)
   18078:	429a      	cmp	r2, r3
   1807a:	d06d      	beq.n	18158 <__aeabi_dmul+0x140>
   1807c:	2380      	movs	r3, #128	; 0x80
   1807e:	0f41      	lsrs	r1, r0, #29
   18080:	041b      	lsls	r3, r3, #16
   18082:	430b      	orrs	r3, r1
   18084:	495c      	ldr	r1, [pc, #368]	; (181f8 <__aeabi_dmul+0x1e0>)
   18086:	00e4      	lsls	r4, r4, #3
   18088:	468c      	mov	ip, r1
   1808a:	431c      	orrs	r4, r3
   1808c:	00c3      	lsls	r3, r0, #3
   1808e:	2000      	movs	r0, #0
   18090:	4462      	add	r2, ip
   18092:	4641      	mov	r1, r8
   18094:	18b6      	adds	r6, r6, r2
   18096:	4069      	eors	r1, r5
   18098:	1c72      	adds	r2, r6, #1
   1809a:	9101      	str	r1, [sp, #4]
   1809c:	4694      	mov	ip, r2
   1809e:	4307      	orrs	r7, r0
   180a0:	2f0f      	cmp	r7, #15
   180a2:	d900      	bls.n	180a6 <__aeabi_dmul+0x8e>
   180a4:	e0b0      	b.n	18208 <__aeabi_dmul+0x1f0>
   180a6:	4a55      	ldr	r2, [pc, #340]	; (181fc <__aeabi_dmul+0x1e4>)
   180a8:	00bf      	lsls	r7, r7, #2
   180aa:	59d2      	ldr	r2, [r2, r7]
   180ac:	4697      	mov	pc, r2
   180ae:	465b      	mov	r3, fp
   180b0:	4303      	orrs	r3, r0
   180b2:	4699      	mov	r9, r3
   180b4:	d000      	beq.n	180b8 <__aeabi_dmul+0xa0>
   180b6:	e087      	b.n	181c8 <__aeabi_dmul+0x1b0>
   180b8:	2300      	movs	r3, #0
   180ba:	469b      	mov	fp, r3
   180bc:	3302      	adds	r3, #2
   180be:	2708      	movs	r7, #8
   180c0:	9302      	str	r3, [sp, #8]
   180c2:	e7ce      	b.n	18062 <__aeabi_dmul+0x4a>
   180c4:	4642      	mov	r2, r8
   180c6:	9201      	str	r2, [sp, #4]
   180c8:	2802      	cmp	r0, #2
   180ca:	d067      	beq.n	1819c <__aeabi_dmul+0x184>
   180cc:	2803      	cmp	r0, #3
   180ce:	d100      	bne.n	180d2 <__aeabi_dmul+0xba>
   180d0:	e20e      	b.n	184f0 <__aeabi_dmul+0x4d8>
   180d2:	2801      	cmp	r0, #1
   180d4:	d000      	beq.n	180d8 <__aeabi_dmul+0xc0>
   180d6:	e162      	b.n	1839e <__aeabi_dmul+0x386>
   180d8:	2300      	movs	r3, #0
   180da:	2400      	movs	r4, #0
   180dc:	2200      	movs	r2, #0
   180de:	4699      	mov	r9, r3
   180e0:	9901      	ldr	r1, [sp, #4]
   180e2:	4001      	ands	r1, r0
   180e4:	b2cd      	uxtb	r5, r1
   180e6:	2100      	movs	r1, #0
   180e8:	0312      	lsls	r2, r2, #12
   180ea:	0d0b      	lsrs	r3, r1, #20
   180ec:	0b12      	lsrs	r2, r2, #12
   180ee:	051b      	lsls	r3, r3, #20
   180f0:	4313      	orrs	r3, r2
   180f2:	4a43      	ldr	r2, [pc, #268]	; (18200 <__aeabi_dmul+0x1e8>)
   180f4:	0524      	lsls	r4, r4, #20
   180f6:	4013      	ands	r3, r2
   180f8:	431c      	orrs	r4, r3
   180fa:	0064      	lsls	r4, r4, #1
   180fc:	07ed      	lsls	r5, r5, #31
   180fe:	0864      	lsrs	r4, r4, #1
   18100:	432c      	orrs	r4, r5
   18102:	4648      	mov	r0, r9
   18104:	0021      	movs	r1, r4
   18106:	b007      	add	sp, #28
   18108:	bc3c      	pop	{r2, r3, r4, r5}
   1810a:	4690      	mov	r8, r2
   1810c:	4699      	mov	r9, r3
   1810e:	46a2      	mov	sl, r4
   18110:	46ab      	mov	fp, r5
   18112:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18114:	4303      	orrs	r3, r0
   18116:	4699      	mov	r9, r3
   18118:	d04f      	beq.n	181ba <__aeabi_dmul+0x1a2>
   1811a:	465b      	mov	r3, fp
   1811c:	2b00      	cmp	r3, #0
   1811e:	d100      	bne.n	18122 <__aeabi_dmul+0x10a>
   18120:	e189      	b.n	18436 <__aeabi_dmul+0x41e>
   18122:	4658      	mov	r0, fp
   18124:	f000 fdfa 	bl	18d1c <__clzsi2>
   18128:	0003      	movs	r3, r0
   1812a:	3b0b      	subs	r3, #11
   1812c:	2b1c      	cmp	r3, #28
   1812e:	dd00      	ble.n	18132 <__aeabi_dmul+0x11a>
   18130:	e17a      	b.n	18428 <__aeabi_dmul+0x410>
   18132:	221d      	movs	r2, #29
   18134:	1ad3      	subs	r3, r2, r3
   18136:	003a      	movs	r2, r7
   18138:	0001      	movs	r1, r0
   1813a:	465c      	mov	r4, fp
   1813c:	40da      	lsrs	r2, r3
   1813e:	3908      	subs	r1, #8
   18140:	408c      	lsls	r4, r1
   18142:	0013      	movs	r3, r2
   18144:	408f      	lsls	r7, r1
   18146:	4323      	orrs	r3, r4
   18148:	469b      	mov	fp, r3
   1814a:	46b9      	mov	r9, r7
   1814c:	2300      	movs	r3, #0
   1814e:	4e2d      	ldr	r6, [pc, #180]	; (18204 <__aeabi_dmul+0x1ec>)
   18150:	2700      	movs	r7, #0
   18152:	1a36      	subs	r6, r6, r0
   18154:	9302      	str	r3, [sp, #8]
   18156:	e784      	b.n	18062 <__aeabi_dmul+0x4a>
   18158:	4653      	mov	r3, sl
   1815a:	4323      	orrs	r3, r4
   1815c:	d12a      	bne.n	181b4 <__aeabi_dmul+0x19c>
   1815e:	2400      	movs	r4, #0
   18160:	2002      	movs	r0, #2
   18162:	e796      	b.n	18092 <__aeabi_dmul+0x7a>
   18164:	4653      	mov	r3, sl
   18166:	4323      	orrs	r3, r4
   18168:	d020      	beq.n	181ac <__aeabi_dmul+0x194>
   1816a:	2c00      	cmp	r4, #0
   1816c:	d100      	bne.n	18170 <__aeabi_dmul+0x158>
   1816e:	e157      	b.n	18420 <__aeabi_dmul+0x408>
   18170:	0020      	movs	r0, r4
   18172:	f000 fdd3 	bl	18d1c <__clzsi2>
   18176:	0003      	movs	r3, r0
   18178:	3b0b      	subs	r3, #11
   1817a:	2b1c      	cmp	r3, #28
   1817c:	dd00      	ble.n	18180 <__aeabi_dmul+0x168>
   1817e:	e149      	b.n	18414 <__aeabi_dmul+0x3fc>
   18180:	211d      	movs	r1, #29
   18182:	1acb      	subs	r3, r1, r3
   18184:	4651      	mov	r1, sl
   18186:	0002      	movs	r2, r0
   18188:	40d9      	lsrs	r1, r3
   1818a:	4653      	mov	r3, sl
   1818c:	3a08      	subs	r2, #8
   1818e:	4094      	lsls	r4, r2
   18190:	4093      	lsls	r3, r2
   18192:	430c      	orrs	r4, r1
   18194:	4a1b      	ldr	r2, [pc, #108]	; (18204 <__aeabi_dmul+0x1ec>)
   18196:	1a12      	subs	r2, r2, r0
   18198:	2000      	movs	r0, #0
   1819a:	e77a      	b.n	18092 <__aeabi_dmul+0x7a>
   1819c:	2501      	movs	r5, #1
   1819e:	9b01      	ldr	r3, [sp, #4]
   181a0:	4c14      	ldr	r4, [pc, #80]	; (181f4 <__aeabi_dmul+0x1dc>)
   181a2:	401d      	ands	r5, r3
   181a4:	2300      	movs	r3, #0
   181a6:	2200      	movs	r2, #0
   181a8:	4699      	mov	r9, r3
   181aa:	e79c      	b.n	180e6 <__aeabi_dmul+0xce>
   181ac:	2400      	movs	r4, #0
   181ae:	2200      	movs	r2, #0
   181b0:	2001      	movs	r0, #1
   181b2:	e76e      	b.n	18092 <__aeabi_dmul+0x7a>
   181b4:	4653      	mov	r3, sl
   181b6:	2003      	movs	r0, #3
   181b8:	e76b      	b.n	18092 <__aeabi_dmul+0x7a>
   181ba:	2300      	movs	r3, #0
   181bc:	469b      	mov	fp, r3
   181be:	3301      	adds	r3, #1
   181c0:	2704      	movs	r7, #4
   181c2:	2600      	movs	r6, #0
   181c4:	9302      	str	r3, [sp, #8]
   181c6:	e74c      	b.n	18062 <__aeabi_dmul+0x4a>
   181c8:	2303      	movs	r3, #3
   181ca:	4681      	mov	r9, r0
   181cc:	270c      	movs	r7, #12
   181ce:	9302      	str	r3, [sp, #8]
   181d0:	e747      	b.n	18062 <__aeabi_dmul+0x4a>
   181d2:	2280      	movs	r2, #128	; 0x80
   181d4:	2300      	movs	r3, #0
   181d6:	2500      	movs	r5, #0
   181d8:	0312      	lsls	r2, r2, #12
   181da:	4699      	mov	r9, r3
   181dc:	4c05      	ldr	r4, [pc, #20]	; (181f4 <__aeabi_dmul+0x1dc>)
   181de:	e782      	b.n	180e6 <__aeabi_dmul+0xce>
   181e0:	465c      	mov	r4, fp
   181e2:	464b      	mov	r3, r9
   181e4:	9802      	ldr	r0, [sp, #8]
   181e6:	e76f      	b.n	180c8 <__aeabi_dmul+0xb0>
   181e8:	465c      	mov	r4, fp
   181ea:	464b      	mov	r3, r9
   181ec:	9501      	str	r5, [sp, #4]
   181ee:	9802      	ldr	r0, [sp, #8]
   181f0:	e76a      	b.n	180c8 <__aeabi_dmul+0xb0>
   181f2:	46c0      	nop			; (mov r8, r8)
   181f4:	000007ff 	.word	0x000007ff
   181f8:	fffffc01 	.word	0xfffffc01
   181fc:	0001dc90 	.word	0x0001dc90
   18200:	800fffff 	.word	0x800fffff
   18204:	fffffc0d 	.word	0xfffffc0d
   18208:	464a      	mov	r2, r9
   1820a:	4649      	mov	r1, r9
   1820c:	0c17      	lsrs	r7, r2, #16
   1820e:	0c1a      	lsrs	r2, r3, #16
   18210:	041b      	lsls	r3, r3, #16
   18212:	0c1b      	lsrs	r3, r3, #16
   18214:	0408      	lsls	r0, r1, #16
   18216:	0019      	movs	r1, r3
   18218:	0c00      	lsrs	r0, r0, #16
   1821a:	4341      	muls	r1, r0
   1821c:	0015      	movs	r5, r2
   1821e:	4688      	mov	r8, r1
   18220:	0019      	movs	r1, r3
   18222:	437d      	muls	r5, r7
   18224:	4379      	muls	r1, r7
   18226:	9503      	str	r5, [sp, #12]
   18228:	4689      	mov	r9, r1
   1822a:	0029      	movs	r1, r5
   1822c:	0015      	movs	r5, r2
   1822e:	4345      	muls	r5, r0
   18230:	444d      	add	r5, r9
   18232:	9502      	str	r5, [sp, #8]
   18234:	4645      	mov	r5, r8
   18236:	0c2d      	lsrs	r5, r5, #16
   18238:	46aa      	mov	sl, r5
   1823a:	9d02      	ldr	r5, [sp, #8]
   1823c:	4455      	add	r5, sl
   1823e:	45a9      	cmp	r9, r5
   18240:	d906      	bls.n	18250 <__aeabi_dmul+0x238>
   18242:	468a      	mov	sl, r1
   18244:	2180      	movs	r1, #128	; 0x80
   18246:	0249      	lsls	r1, r1, #9
   18248:	4689      	mov	r9, r1
   1824a:	44ca      	add	sl, r9
   1824c:	4651      	mov	r1, sl
   1824e:	9103      	str	r1, [sp, #12]
   18250:	0c29      	lsrs	r1, r5, #16
   18252:	9104      	str	r1, [sp, #16]
   18254:	4641      	mov	r1, r8
   18256:	0409      	lsls	r1, r1, #16
   18258:	042d      	lsls	r5, r5, #16
   1825a:	0c09      	lsrs	r1, r1, #16
   1825c:	4688      	mov	r8, r1
   1825e:	0029      	movs	r1, r5
   18260:	0c25      	lsrs	r5, r4, #16
   18262:	0424      	lsls	r4, r4, #16
   18264:	4441      	add	r1, r8
   18266:	0c24      	lsrs	r4, r4, #16
   18268:	9105      	str	r1, [sp, #20]
   1826a:	0021      	movs	r1, r4
   1826c:	4341      	muls	r1, r0
   1826e:	4688      	mov	r8, r1
   18270:	0021      	movs	r1, r4
   18272:	4379      	muls	r1, r7
   18274:	468a      	mov	sl, r1
   18276:	4368      	muls	r0, r5
   18278:	4641      	mov	r1, r8
   1827a:	4450      	add	r0, sl
   1827c:	4681      	mov	r9, r0
   1827e:	0c08      	lsrs	r0, r1, #16
   18280:	4448      	add	r0, r9
   18282:	436f      	muls	r7, r5
   18284:	4582      	cmp	sl, r0
   18286:	d903      	bls.n	18290 <__aeabi_dmul+0x278>
   18288:	2180      	movs	r1, #128	; 0x80
   1828a:	0249      	lsls	r1, r1, #9
   1828c:	4689      	mov	r9, r1
   1828e:	444f      	add	r7, r9
   18290:	0c01      	lsrs	r1, r0, #16
   18292:	4689      	mov	r9, r1
   18294:	0039      	movs	r1, r7
   18296:	4449      	add	r1, r9
   18298:	9102      	str	r1, [sp, #8]
   1829a:	4641      	mov	r1, r8
   1829c:	040f      	lsls	r7, r1, #16
   1829e:	9904      	ldr	r1, [sp, #16]
   182a0:	0c3f      	lsrs	r7, r7, #16
   182a2:	4688      	mov	r8, r1
   182a4:	0400      	lsls	r0, r0, #16
   182a6:	19c0      	adds	r0, r0, r7
   182a8:	4480      	add	r8, r0
   182aa:	4641      	mov	r1, r8
   182ac:	9104      	str	r1, [sp, #16]
   182ae:	4659      	mov	r1, fp
   182b0:	0c0f      	lsrs	r7, r1, #16
   182b2:	0409      	lsls	r1, r1, #16
   182b4:	0c09      	lsrs	r1, r1, #16
   182b6:	4688      	mov	r8, r1
   182b8:	4359      	muls	r1, r3
   182ba:	468a      	mov	sl, r1
   182bc:	0039      	movs	r1, r7
   182be:	4351      	muls	r1, r2
   182c0:	4689      	mov	r9, r1
   182c2:	4641      	mov	r1, r8
   182c4:	434a      	muls	r2, r1
   182c6:	4651      	mov	r1, sl
   182c8:	0c09      	lsrs	r1, r1, #16
   182ca:	468b      	mov	fp, r1
   182cc:	437b      	muls	r3, r7
   182ce:	18d2      	adds	r2, r2, r3
   182d0:	445a      	add	r2, fp
   182d2:	4293      	cmp	r3, r2
   182d4:	d903      	bls.n	182de <__aeabi_dmul+0x2c6>
   182d6:	2380      	movs	r3, #128	; 0x80
   182d8:	025b      	lsls	r3, r3, #9
   182da:	469b      	mov	fp, r3
   182dc:	44d9      	add	r9, fp
   182de:	4651      	mov	r1, sl
   182e0:	0409      	lsls	r1, r1, #16
   182e2:	0c09      	lsrs	r1, r1, #16
   182e4:	468a      	mov	sl, r1
   182e6:	4641      	mov	r1, r8
   182e8:	4361      	muls	r1, r4
   182ea:	437c      	muls	r4, r7
   182ec:	0c13      	lsrs	r3, r2, #16
   182ee:	0412      	lsls	r2, r2, #16
   182f0:	444b      	add	r3, r9
   182f2:	4452      	add	r2, sl
   182f4:	46a1      	mov	r9, r4
   182f6:	468a      	mov	sl, r1
   182f8:	003c      	movs	r4, r7
   182fa:	4641      	mov	r1, r8
   182fc:	436c      	muls	r4, r5
   182fe:	434d      	muls	r5, r1
   18300:	4651      	mov	r1, sl
   18302:	444d      	add	r5, r9
   18304:	0c0f      	lsrs	r7, r1, #16
   18306:	197d      	adds	r5, r7, r5
   18308:	45a9      	cmp	r9, r5
   1830a:	d903      	bls.n	18314 <__aeabi_dmul+0x2fc>
   1830c:	2180      	movs	r1, #128	; 0x80
   1830e:	0249      	lsls	r1, r1, #9
   18310:	4688      	mov	r8, r1
   18312:	4444      	add	r4, r8
   18314:	9f04      	ldr	r7, [sp, #16]
   18316:	9903      	ldr	r1, [sp, #12]
   18318:	46b8      	mov	r8, r7
   1831a:	4441      	add	r1, r8
   1831c:	468b      	mov	fp, r1
   1831e:	4583      	cmp	fp, r0
   18320:	4180      	sbcs	r0, r0
   18322:	4241      	negs	r1, r0
   18324:	4688      	mov	r8, r1
   18326:	4651      	mov	r1, sl
   18328:	0408      	lsls	r0, r1, #16
   1832a:	042f      	lsls	r7, r5, #16
   1832c:	0c00      	lsrs	r0, r0, #16
   1832e:	183f      	adds	r7, r7, r0
   18330:	4658      	mov	r0, fp
   18332:	9902      	ldr	r1, [sp, #8]
   18334:	1810      	adds	r0, r2, r0
   18336:	4689      	mov	r9, r1
   18338:	4290      	cmp	r0, r2
   1833a:	4192      	sbcs	r2, r2
   1833c:	444f      	add	r7, r9
   1833e:	46ba      	mov	sl, r7
   18340:	4252      	negs	r2, r2
   18342:	4699      	mov	r9, r3
   18344:	4693      	mov	fp, r2
   18346:	44c2      	add	sl, r8
   18348:	44d1      	add	r9, sl
   1834a:	44cb      	add	fp, r9
   1834c:	428f      	cmp	r7, r1
   1834e:	41bf      	sbcs	r7, r7
   18350:	45c2      	cmp	sl, r8
   18352:	4189      	sbcs	r1, r1
   18354:	4599      	cmp	r9, r3
   18356:	419b      	sbcs	r3, r3
   18358:	4593      	cmp	fp, r2
   1835a:	4192      	sbcs	r2, r2
   1835c:	427f      	negs	r7, r7
   1835e:	4249      	negs	r1, r1
   18360:	0c2d      	lsrs	r5, r5, #16
   18362:	4252      	negs	r2, r2
   18364:	430f      	orrs	r7, r1
   18366:	425b      	negs	r3, r3
   18368:	4313      	orrs	r3, r2
   1836a:	197f      	adds	r7, r7, r5
   1836c:	18ff      	adds	r7, r7, r3
   1836e:	465b      	mov	r3, fp
   18370:	193c      	adds	r4, r7, r4
   18372:	0ddb      	lsrs	r3, r3, #23
   18374:	9a05      	ldr	r2, [sp, #20]
   18376:	0264      	lsls	r4, r4, #9
   18378:	431c      	orrs	r4, r3
   1837a:	0243      	lsls	r3, r0, #9
   1837c:	4313      	orrs	r3, r2
   1837e:	1e5d      	subs	r5, r3, #1
   18380:	41ab      	sbcs	r3, r5
   18382:	465a      	mov	r2, fp
   18384:	0dc0      	lsrs	r0, r0, #23
   18386:	4303      	orrs	r3, r0
   18388:	0252      	lsls	r2, r2, #9
   1838a:	4313      	orrs	r3, r2
   1838c:	01e2      	lsls	r2, r4, #7
   1838e:	d556      	bpl.n	1843e <__aeabi_dmul+0x426>
   18390:	2001      	movs	r0, #1
   18392:	085a      	lsrs	r2, r3, #1
   18394:	4003      	ands	r3, r0
   18396:	4313      	orrs	r3, r2
   18398:	07e2      	lsls	r2, r4, #31
   1839a:	4313      	orrs	r3, r2
   1839c:	0864      	lsrs	r4, r4, #1
   1839e:	485a      	ldr	r0, [pc, #360]	; (18508 <__aeabi_dmul+0x4f0>)
   183a0:	4460      	add	r0, ip
   183a2:	2800      	cmp	r0, #0
   183a4:	dd4d      	ble.n	18442 <__aeabi_dmul+0x42a>
   183a6:	075a      	lsls	r2, r3, #29
   183a8:	d009      	beq.n	183be <__aeabi_dmul+0x3a6>
   183aa:	220f      	movs	r2, #15
   183ac:	401a      	ands	r2, r3
   183ae:	2a04      	cmp	r2, #4
   183b0:	d005      	beq.n	183be <__aeabi_dmul+0x3a6>
   183b2:	1d1a      	adds	r2, r3, #4
   183b4:	429a      	cmp	r2, r3
   183b6:	419b      	sbcs	r3, r3
   183b8:	425b      	negs	r3, r3
   183ba:	18e4      	adds	r4, r4, r3
   183bc:	0013      	movs	r3, r2
   183be:	01e2      	lsls	r2, r4, #7
   183c0:	d504      	bpl.n	183cc <__aeabi_dmul+0x3b4>
   183c2:	2080      	movs	r0, #128	; 0x80
   183c4:	4a51      	ldr	r2, [pc, #324]	; (1850c <__aeabi_dmul+0x4f4>)
   183c6:	00c0      	lsls	r0, r0, #3
   183c8:	4014      	ands	r4, r2
   183ca:	4460      	add	r0, ip
   183cc:	4a50      	ldr	r2, [pc, #320]	; (18510 <__aeabi_dmul+0x4f8>)
   183ce:	4290      	cmp	r0, r2
   183d0:	dd00      	ble.n	183d4 <__aeabi_dmul+0x3bc>
   183d2:	e6e3      	b.n	1819c <__aeabi_dmul+0x184>
   183d4:	2501      	movs	r5, #1
   183d6:	08db      	lsrs	r3, r3, #3
   183d8:	0762      	lsls	r2, r4, #29
   183da:	431a      	orrs	r2, r3
   183dc:	0264      	lsls	r4, r4, #9
   183de:	9b01      	ldr	r3, [sp, #4]
   183e0:	4691      	mov	r9, r2
   183e2:	0b22      	lsrs	r2, r4, #12
   183e4:	0544      	lsls	r4, r0, #21
   183e6:	0d64      	lsrs	r4, r4, #21
   183e8:	401d      	ands	r5, r3
   183ea:	e67c      	b.n	180e6 <__aeabi_dmul+0xce>
   183ec:	2280      	movs	r2, #128	; 0x80
   183ee:	4659      	mov	r1, fp
   183f0:	0312      	lsls	r2, r2, #12
   183f2:	4211      	tst	r1, r2
   183f4:	d008      	beq.n	18408 <__aeabi_dmul+0x3f0>
   183f6:	4214      	tst	r4, r2
   183f8:	d106      	bne.n	18408 <__aeabi_dmul+0x3f0>
   183fa:	4322      	orrs	r2, r4
   183fc:	0312      	lsls	r2, r2, #12
   183fe:	0b12      	lsrs	r2, r2, #12
   18400:	4645      	mov	r5, r8
   18402:	4699      	mov	r9, r3
   18404:	4c43      	ldr	r4, [pc, #268]	; (18514 <__aeabi_dmul+0x4fc>)
   18406:	e66e      	b.n	180e6 <__aeabi_dmul+0xce>
   18408:	465b      	mov	r3, fp
   1840a:	431a      	orrs	r2, r3
   1840c:	0312      	lsls	r2, r2, #12
   1840e:	0b12      	lsrs	r2, r2, #12
   18410:	4c40      	ldr	r4, [pc, #256]	; (18514 <__aeabi_dmul+0x4fc>)
   18412:	e668      	b.n	180e6 <__aeabi_dmul+0xce>
   18414:	0003      	movs	r3, r0
   18416:	4654      	mov	r4, sl
   18418:	3b28      	subs	r3, #40	; 0x28
   1841a:	409c      	lsls	r4, r3
   1841c:	2300      	movs	r3, #0
   1841e:	e6b9      	b.n	18194 <__aeabi_dmul+0x17c>
   18420:	f000 fc7c 	bl	18d1c <__clzsi2>
   18424:	3020      	adds	r0, #32
   18426:	e6a6      	b.n	18176 <__aeabi_dmul+0x15e>
   18428:	0003      	movs	r3, r0
   1842a:	3b28      	subs	r3, #40	; 0x28
   1842c:	409f      	lsls	r7, r3
   1842e:	2300      	movs	r3, #0
   18430:	46bb      	mov	fp, r7
   18432:	4699      	mov	r9, r3
   18434:	e68a      	b.n	1814c <__aeabi_dmul+0x134>
   18436:	f000 fc71 	bl	18d1c <__clzsi2>
   1843a:	3020      	adds	r0, #32
   1843c:	e674      	b.n	18128 <__aeabi_dmul+0x110>
   1843e:	46b4      	mov	ip, r6
   18440:	e7ad      	b.n	1839e <__aeabi_dmul+0x386>
   18442:	2501      	movs	r5, #1
   18444:	1a2a      	subs	r2, r5, r0
   18446:	2a38      	cmp	r2, #56	; 0x38
   18448:	dd06      	ble.n	18458 <__aeabi_dmul+0x440>
   1844a:	9b01      	ldr	r3, [sp, #4]
   1844c:	2400      	movs	r4, #0
   1844e:	401d      	ands	r5, r3
   18450:	2300      	movs	r3, #0
   18452:	2200      	movs	r2, #0
   18454:	4699      	mov	r9, r3
   18456:	e646      	b.n	180e6 <__aeabi_dmul+0xce>
   18458:	2a1f      	cmp	r2, #31
   1845a:	dc21      	bgt.n	184a0 <__aeabi_dmul+0x488>
   1845c:	2520      	movs	r5, #32
   1845e:	0020      	movs	r0, r4
   18460:	1aad      	subs	r5, r5, r2
   18462:	001e      	movs	r6, r3
   18464:	40ab      	lsls	r3, r5
   18466:	40a8      	lsls	r0, r5
   18468:	40d6      	lsrs	r6, r2
   1846a:	1e5d      	subs	r5, r3, #1
   1846c:	41ab      	sbcs	r3, r5
   1846e:	4330      	orrs	r0, r6
   18470:	4318      	orrs	r0, r3
   18472:	40d4      	lsrs	r4, r2
   18474:	0743      	lsls	r3, r0, #29
   18476:	d009      	beq.n	1848c <__aeabi_dmul+0x474>
   18478:	230f      	movs	r3, #15
   1847a:	4003      	ands	r3, r0
   1847c:	2b04      	cmp	r3, #4
   1847e:	d005      	beq.n	1848c <__aeabi_dmul+0x474>
   18480:	0003      	movs	r3, r0
   18482:	1d18      	adds	r0, r3, #4
   18484:	4298      	cmp	r0, r3
   18486:	419b      	sbcs	r3, r3
   18488:	425b      	negs	r3, r3
   1848a:	18e4      	adds	r4, r4, r3
   1848c:	0223      	lsls	r3, r4, #8
   1848e:	d521      	bpl.n	184d4 <__aeabi_dmul+0x4bc>
   18490:	2501      	movs	r5, #1
   18492:	9b01      	ldr	r3, [sp, #4]
   18494:	2401      	movs	r4, #1
   18496:	401d      	ands	r5, r3
   18498:	2300      	movs	r3, #0
   1849a:	2200      	movs	r2, #0
   1849c:	4699      	mov	r9, r3
   1849e:	e622      	b.n	180e6 <__aeabi_dmul+0xce>
   184a0:	251f      	movs	r5, #31
   184a2:	0021      	movs	r1, r4
   184a4:	426d      	negs	r5, r5
   184a6:	1a28      	subs	r0, r5, r0
   184a8:	40c1      	lsrs	r1, r0
   184aa:	0008      	movs	r0, r1
   184ac:	2a20      	cmp	r2, #32
   184ae:	d01d      	beq.n	184ec <__aeabi_dmul+0x4d4>
   184b0:	355f      	adds	r5, #95	; 0x5f
   184b2:	1aaa      	subs	r2, r5, r2
   184b4:	4094      	lsls	r4, r2
   184b6:	4323      	orrs	r3, r4
   184b8:	1e5c      	subs	r4, r3, #1
   184ba:	41a3      	sbcs	r3, r4
   184bc:	2507      	movs	r5, #7
   184be:	4303      	orrs	r3, r0
   184c0:	401d      	ands	r5, r3
   184c2:	2200      	movs	r2, #0
   184c4:	2d00      	cmp	r5, #0
   184c6:	d009      	beq.n	184dc <__aeabi_dmul+0x4c4>
   184c8:	220f      	movs	r2, #15
   184ca:	2400      	movs	r4, #0
   184cc:	401a      	ands	r2, r3
   184ce:	0018      	movs	r0, r3
   184d0:	2a04      	cmp	r2, #4
   184d2:	d1d6      	bne.n	18482 <__aeabi_dmul+0x46a>
   184d4:	0003      	movs	r3, r0
   184d6:	0765      	lsls	r5, r4, #29
   184d8:	0264      	lsls	r4, r4, #9
   184da:	0b22      	lsrs	r2, r4, #12
   184dc:	08db      	lsrs	r3, r3, #3
   184de:	432b      	orrs	r3, r5
   184e0:	2501      	movs	r5, #1
   184e2:	4699      	mov	r9, r3
   184e4:	9b01      	ldr	r3, [sp, #4]
   184e6:	2400      	movs	r4, #0
   184e8:	401d      	ands	r5, r3
   184ea:	e5fc      	b.n	180e6 <__aeabi_dmul+0xce>
   184ec:	2400      	movs	r4, #0
   184ee:	e7e2      	b.n	184b6 <__aeabi_dmul+0x49e>
   184f0:	2280      	movs	r2, #128	; 0x80
   184f2:	2501      	movs	r5, #1
   184f4:	0312      	lsls	r2, r2, #12
   184f6:	4322      	orrs	r2, r4
   184f8:	9901      	ldr	r1, [sp, #4]
   184fa:	0312      	lsls	r2, r2, #12
   184fc:	0b12      	lsrs	r2, r2, #12
   184fe:	400d      	ands	r5, r1
   18500:	4699      	mov	r9, r3
   18502:	4c04      	ldr	r4, [pc, #16]	; (18514 <__aeabi_dmul+0x4fc>)
   18504:	e5ef      	b.n	180e6 <__aeabi_dmul+0xce>
   18506:	46c0      	nop			; (mov r8, r8)
   18508:	000003ff 	.word	0x000003ff
   1850c:	feffffff 	.word	0xfeffffff
   18510:	000007fe 	.word	0x000007fe
   18514:	000007ff 	.word	0x000007ff

00018518 <__aeabi_dsub>:
   18518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1851a:	4646      	mov	r6, r8
   1851c:	46d6      	mov	lr, sl
   1851e:	464f      	mov	r7, r9
   18520:	030c      	lsls	r4, r1, #12
   18522:	b5c0      	push	{r6, r7, lr}
   18524:	0fcd      	lsrs	r5, r1, #31
   18526:	004e      	lsls	r6, r1, #1
   18528:	0a61      	lsrs	r1, r4, #9
   1852a:	0f44      	lsrs	r4, r0, #29
   1852c:	430c      	orrs	r4, r1
   1852e:	00c1      	lsls	r1, r0, #3
   18530:	0058      	lsls	r0, r3, #1
   18532:	0d40      	lsrs	r0, r0, #21
   18534:	4684      	mov	ip, r0
   18536:	468a      	mov	sl, r1
   18538:	000f      	movs	r7, r1
   1853a:	0319      	lsls	r1, r3, #12
   1853c:	0f50      	lsrs	r0, r2, #29
   1853e:	0a49      	lsrs	r1, r1, #9
   18540:	4301      	orrs	r1, r0
   18542:	48c6      	ldr	r0, [pc, #792]	; (1885c <__aeabi_dsub+0x344>)
   18544:	0d76      	lsrs	r6, r6, #21
   18546:	46a8      	mov	r8, r5
   18548:	0fdb      	lsrs	r3, r3, #31
   1854a:	00d2      	lsls	r2, r2, #3
   1854c:	4584      	cmp	ip, r0
   1854e:	d100      	bne.n	18552 <__aeabi_dsub+0x3a>
   18550:	e0d8      	b.n	18704 <__aeabi_dsub+0x1ec>
   18552:	2001      	movs	r0, #1
   18554:	4043      	eors	r3, r0
   18556:	42ab      	cmp	r3, r5
   18558:	d100      	bne.n	1855c <__aeabi_dsub+0x44>
   1855a:	e0a6      	b.n	186aa <__aeabi_dsub+0x192>
   1855c:	4660      	mov	r0, ip
   1855e:	1a35      	subs	r5, r6, r0
   18560:	2d00      	cmp	r5, #0
   18562:	dc00      	bgt.n	18566 <__aeabi_dsub+0x4e>
   18564:	e105      	b.n	18772 <__aeabi_dsub+0x25a>
   18566:	2800      	cmp	r0, #0
   18568:	d110      	bne.n	1858c <__aeabi_dsub+0x74>
   1856a:	000b      	movs	r3, r1
   1856c:	4313      	orrs	r3, r2
   1856e:	d100      	bne.n	18572 <__aeabi_dsub+0x5a>
   18570:	e0d7      	b.n	18722 <__aeabi_dsub+0x20a>
   18572:	1e6b      	subs	r3, r5, #1
   18574:	2b00      	cmp	r3, #0
   18576:	d000      	beq.n	1857a <__aeabi_dsub+0x62>
   18578:	e14b      	b.n	18812 <__aeabi_dsub+0x2fa>
   1857a:	4653      	mov	r3, sl
   1857c:	1a9f      	subs	r7, r3, r2
   1857e:	45ba      	cmp	sl, r7
   18580:	4180      	sbcs	r0, r0
   18582:	1a64      	subs	r4, r4, r1
   18584:	4240      	negs	r0, r0
   18586:	1a24      	subs	r4, r4, r0
   18588:	2601      	movs	r6, #1
   1858a:	e01e      	b.n	185ca <__aeabi_dsub+0xb2>
   1858c:	4bb3      	ldr	r3, [pc, #716]	; (1885c <__aeabi_dsub+0x344>)
   1858e:	429e      	cmp	r6, r3
   18590:	d048      	beq.n	18624 <__aeabi_dsub+0x10c>
   18592:	2380      	movs	r3, #128	; 0x80
   18594:	041b      	lsls	r3, r3, #16
   18596:	4319      	orrs	r1, r3
   18598:	2d38      	cmp	r5, #56	; 0x38
   1859a:	dd00      	ble.n	1859e <__aeabi_dsub+0x86>
   1859c:	e119      	b.n	187d2 <__aeabi_dsub+0x2ba>
   1859e:	2d1f      	cmp	r5, #31
   185a0:	dd00      	ble.n	185a4 <__aeabi_dsub+0x8c>
   185a2:	e14c      	b.n	1883e <__aeabi_dsub+0x326>
   185a4:	2320      	movs	r3, #32
   185a6:	000f      	movs	r7, r1
   185a8:	1b5b      	subs	r3, r3, r5
   185aa:	0010      	movs	r0, r2
   185ac:	409a      	lsls	r2, r3
   185ae:	409f      	lsls	r7, r3
   185b0:	40e8      	lsrs	r0, r5
   185b2:	1e53      	subs	r3, r2, #1
   185b4:	419a      	sbcs	r2, r3
   185b6:	40e9      	lsrs	r1, r5
   185b8:	4307      	orrs	r7, r0
   185ba:	4317      	orrs	r7, r2
   185bc:	4653      	mov	r3, sl
   185be:	1bdf      	subs	r7, r3, r7
   185c0:	1a61      	subs	r1, r4, r1
   185c2:	45ba      	cmp	sl, r7
   185c4:	41a4      	sbcs	r4, r4
   185c6:	4264      	negs	r4, r4
   185c8:	1b0c      	subs	r4, r1, r4
   185ca:	0223      	lsls	r3, r4, #8
   185cc:	d400      	bmi.n	185d0 <__aeabi_dsub+0xb8>
   185ce:	e0c5      	b.n	1875c <__aeabi_dsub+0x244>
   185d0:	0264      	lsls	r4, r4, #9
   185d2:	0a65      	lsrs	r5, r4, #9
   185d4:	2d00      	cmp	r5, #0
   185d6:	d100      	bne.n	185da <__aeabi_dsub+0xc2>
   185d8:	e0f6      	b.n	187c8 <__aeabi_dsub+0x2b0>
   185da:	0028      	movs	r0, r5
   185dc:	f000 fb9e 	bl	18d1c <__clzsi2>
   185e0:	0003      	movs	r3, r0
   185e2:	3b08      	subs	r3, #8
   185e4:	2b1f      	cmp	r3, #31
   185e6:	dd00      	ble.n	185ea <__aeabi_dsub+0xd2>
   185e8:	e0e9      	b.n	187be <__aeabi_dsub+0x2a6>
   185ea:	2220      	movs	r2, #32
   185ec:	003c      	movs	r4, r7
   185ee:	1ad2      	subs	r2, r2, r3
   185f0:	409d      	lsls	r5, r3
   185f2:	40d4      	lsrs	r4, r2
   185f4:	409f      	lsls	r7, r3
   185f6:	4325      	orrs	r5, r4
   185f8:	429e      	cmp	r6, r3
   185fa:	dd00      	ble.n	185fe <__aeabi_dsub+0xe6>
   185fc:	e0db      	b.n	187b6 <__aeabi_dsub+0x29e>
   185fe:	1b9e      	subs	r6, r3, r6
   18600:	1c73      	adds	r3, r6, #1
   18602:	2b1f      	cmp	r3, #31
   18604:	dd00      	ble.n	18608 <__aeabi_dsub+0xf0>
   18606:	e10a      	b.n	1881e <__aeabi_dsub+0x306>
   18608:	2220      	movs	r2, #32
   1860a:	0038      	movs	r0, r7
   1860c:	1ad2      	subs	r2, r2, r3
   1860e:	0029      	movs	r1, r5
   18610:	4097      	lsls	r7, r2
   18612:	002c      	movs	r4, r5
   18614:	4091      	lsls	r1, r2
   18616:	40d8      	lsrs	r0, r3
   18618:	1e7a      	subs	r2, r7, #1
   1861a:	4197      	sbcs	r7, r2
   1861c:	40dc      	lsrs	r4, r3
   1861e:	2600      	movs	r6, #0
   18620:	4301      	orrs	r1, r0
   18622:	430f      	orrs	r7, r1
   18624:	077b      	lsls	r3, r7, #29
   18626:	d009      	beq.n	1863c <__aeabi_dsub+0x124>
   18628:	230f      	movs	r3, #15
   1862a:	403b      	ands	r3, r7
   1862c:	2b04      	cmp	r3, #4
   1862e:	d005      	beq.n	1863c <__aeabi_dsub+0x124>
   18630:	1d3b      	adds	r3, r7, #4
   18632:	42bb      	cmp	r3, r7
   18634:	41bf      	sbcs	r7, r7
   18636:	427f      	negs	r7, r7
   18638:	19e4      	adds	r4, r4, r7
   1863a:	001f      	movs	r7, r3
   1863c:	0223      	lsls	r3, r4, #8
   1863e:	d525      	bpl.n	1868c <__aeabi_dsub+0x174>
   18640:	4b86      	ldr	r3, [pc, #536]	; (1885c <__aeabi_dsub+0x344>)
   18642:	3601      	adds	r6, #1
   18644:	429e      	cmp	r6, r3
   18646:	d100      	bne.n	1864a <__aeabi_dsub+0x132>
   18648:	e0af      	b.n	187aa <__aeabi_dsub+0x292>
   1864a:	4b85      	ldr	r3, [pc, #532]	; (18860 <__aeabi_dsub+0x348>)
   1864c:	2501      	movs	r5, #1
   1864e:	401c      	ands	r4, r3
   18650:	4643      	mov	r3, r8
   18652:	0762      	lsls	r2, r4, #29
   18654:	08ff      	lsrs	r7, r7, #3
   18656:	0264      	lsls	r4, r4, #9
   18658:	0576      	lsls	r6, r6, #21
   1865a:	4317      	orrs	r7, r2
   1865c:	0b24      	lsrs	r4, r4, #12
   1865e:	0d76      	lsrs	r6, r6, #21
   18660:	401d      	ands	r5, r3
   18662:	2100      	movs	r1, #0
   18664:	0324      	lsls	r4, r4, #12
   18666:	0b23      	lsrs	r3, r4, #12
   18668:	0d0c      	lsrs	r4, r1, #20
   1866a:	4a7e      	ldr	r2, [pc, #504]	; (18864 <__aeabi_dsub+0x34c>)
   1866c:	0524      	lsls	r4, r4, #20
   1866e:	431c      	orrs	r4, r3
   18670:	4014      	ands	r4, r2
   18672:	0533      	lsls	r3, r6, #20
   18674:	4323      	orrs	r3, r4
   18676:	005b      	lsls	r3, r3, #1
   18678:	07ed      	lsls	r5, r5, #31
   1867a:	085b      	lsrs	r3, r3, #1
   1867c:	432b      	orrs	r3, r5
   1867e:	0038      	movs	r0, r7
   18680:	0019      	movs	r1, r3
   18682:	bc1c      	pop	{r2, r3, r4}
   18684:	4690      	mov	r8, r2
   18686:	4699      	mov	r9, r3
   18688:	46a2      	mov	sl, r4
   1868a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1868c:	2501      	movs	r5, #1
   1868e:	4643      	mov	r3, r8
   18690:	0762      	lsls	r2, r4, #29
   18692:	08ff      	lsrs	r7, r7, #3
   18694:	4317      	orrs	r7, r2
   18696:	08e4      	lsrs	r4, r4, #3
   18698:	401d      	ands	r5, r3
   1869a:	4b70      	ldr	r3, [pc, #448]	; (1885c <__aeabi_dsub+0x344>)
   1869c:	429e      	cmp	r6, r3
   1869e:	d036      	beq.n	1870e <__aeabi_dsub+0x1f6>
   186a0:	0324      	lsls	r4, r4, #12
   186a2:	0576      	lsls	r6, r6, #21
   186a4:	0b24      	lsrs	r4, r4, #12
   186a6:	0d76      	lsrs	r6, r6, #21
   186a8:	e7db      	b.n	18662 <__aeabi_dsub+0x14a>
   186aa:	4663      	mov	r3, ip
   186ac:	1af3      	subs	r3, r6, r3
   186ae:	2b00      	cmp	r3, #0
   186b0:	dc00      	bgt.n	186b4 <__aeabi_dsub+0x19c>
   186b2:	e094      	b.n	187de <__aeabi_dsub+0x2c6>
   186b4:	4660      	mov	r0, ip
   186b6:	2800      	cmp	r0, #0
   186b8:	d035      	beq.n	18726 <__aeabi_dsub+0x20e>
   186ba:	4868      	ldr	r0, [pc, #416]	; (1885c <__aeabi_dsub+0x344>)
   186bc:	4286      	cmp	r6, r0
   186be:	d0b1      	beq.n	18624 <__aeabi_dsub+0x10c>
   186c0:	2780      	movs	r7, #128	; 0x80
   186c2:	043f      	lsls	r7, r7, #16
   186c4:	4339      	orrs	r1, r7
   186c6:	2b38      	cmp	r3, #56	; 0x38
   186c8:	dc00      	bgt.n	186cc <__aeabi_dsub+0x1b4>
   186ca:	e0fd      	b.n	188c8 <__aeabi_dsub+0x3b0>
   186cc:	430a      	orrs	r2, r1
   186ce:	0017      	movs	r7, r2
   186d0:	2100      	movs	r1, #0
   186d2:	1e7a      	subs	r2, r7, #1
   186d4:	4197      	sbcs	r7, r2
   186d6:	4457      	add	r7, sl
   186d8:	4557      	cmp	r7, sl
   186da:	4180      	sbcs	r0, r0
   186dc:	1909      	adds	r1, r1, r4
   186de:	4244      	negs	r4, r0
   186e0:	190c      	adds	r4, r1, r4
   186e2:	0223      	lsls	r3, r4, #8
   186e4:	d53a      	bpl.n	1875c <__aeabi_dsub+0x244>
   186e6:	4b5d      	ldr	r3, [pc, #372]	; (1885c <__aeabi_dsub+0x344>)
   186e8:	3601      	adds	r6, #1
   186ea:	429e      	cmp	r6, r3
   186ec:	d100      	bne.n	186f0 <__aeabi_dsub+0x1d8>
   186ee:	e14b      	b.n	18988 <__aeabi_dsub+0x470>
   186f0:	2201      	movs	r2, #1
   186f2:	4b5b      	ldr	r3, [pc, #364]	; (18860 <__aeabi_dsub+0x348>)
   186f4:	401c      	ands	r4, r3
   186f6:	087b      	lsrs	r3, r7, #1
   186f8:	4017      	ands	r7, r2
   186fa:	431f      	orrs	r7, r3
   186fc:	07e2      	lsls	r2, r4, #31
   186fe:	4317      	orrs	r7, r2
   18700:	0864      	lsrs	r4, r4, #1
   18702:	e78f      	b.n	18624 <__aeabi_dsub+0x10c>
   18704:	0008      	movs	r0, r1
   18706:	4310      	orrs	r0, r2
   18708:	d000      	beq.n	1870c <__aeabi_dsub+0x1f4>
   1870a:	e724      	b.n	18556 <__aeabi_dsub+0x3e>
   1870c:	e721      	b.n	18552 <__aeabi_dsub+0x3a>
   1870e:	0023      	movs	r3, r4
   18710:	433b      	orrs	r3, r7
   18712:	d100      	bne.n	18716 <__aeabi_dsub+0x1fe>
   18714:	e1b9      	b.n	18a8a <__aeabi_dsub+0x572>
   18716:	2280      	movs	r2, #128	; 0x80
   18718:	0312      	lsls	r2, r2, #12
   1871a:	4314      	orrs	r4, r2
   1871c:	0324      	lsls	r4, r4, #12
   1871e:	0b24      	lsrs	r4, r4, #12
   18720:	e79f      	b.n	18662 <__aeabi_dsub+0x14a>
   18722:	002e      	movs	r6, r5
   18724:	e77e      	b.n	18624 <__aeabi_dsub+0x10c>
   18726:	0008      	movs	r0, r1
   18728:	4310      	orrs	r0, r2
   1872a:	d100      	bne.n	1872e <__aeabi_dsub+0x216>
   1872c:	e0ca      	b.n	188c4 <__aeabi_dsub+0x3ac>
   1872e:	1e58      	subs	r0, r3, #1
   18730:	4684      	mov	ip, r0
   18732:	2800      	cmp	r0, #0
   18734:	d000      	beq.n	18738 <__aeabi_dsub+0x220>
   18736:	e0e7      	b.n	18908 <__aeabi_dsub+0x3f0>
   18738:	4452      	add	r2, sl
   1873a:	4552      	cmp	r2, sl
   1873c:	4180      	sbcs	r0, r0
   1873e:	1864      	adds	r4, r4, r1
   18740:	4240      	negs	r0, r0
   18742:	1824      	adds	r4, r4, r0
   18744:	0017      	movs	r7, r2
   18746:	2601      	movs	r6, #1
   18748:	0223      	lsls	r3, r4, #8
   1874a:	d507      	bpl.n	1875c <__aeabi_dsub+0x244>
   1874c:	2602      	movs	r6, #2
   1874e:	e7cf      	b.n	186f0 <__aeabi_dsub+0x1d8>
   18750:	4664      	mov	r4, ip
   18752:	432c      	orrs	r4, r5
   18754:	d100      	bne.n	18758 <__aeabi_dsub+0x240>
   18756:	e1b3      	b.n	18ac0 <__aeabi_dsub+0x5a8>
   18758:	002c      	movs	r4, r5
   1875a:	4667      	mov	r7, ip
   1875c:	077b      	lsls	r3, r7, #29
   1875e:	d000      	beq.n	18762 <__aeabi_dsub+0x24a>
   18760:	e762      	b.n	18628 <__aeabi_dsub+0x110>
   18762:	0763      	lsls	r3, r4, #29
   18764:	08ff      	lsrs	r7, r7, #3
   18766:	431f      	orrs	r7, r3
   18768:	2501      	movs	r5, #1
   1876a:	4643      	mov	r3, r8
   1876c:	08e4      	lsrs	r4, r4, #3
   1876e:	401d      	ands	r5, r3
   18770:	e793      	b.n	1869a <__aeabi_dsub+0x182>
   18772:	2d00      	cmp	r5, #0
   18774:	d178      	bne.n	18868 <__aeabi_dsub+0x350>
   18776:	1c75      	adds	r5, r6, #1
   18778:	056d      	lsls	r5, r5, #21
   1877a:	0d6d      	lsrs	r5, r5, #21
   1877c:	2d01      	cmp	r5, #1
   1877e:	dc00      	bgt.n	18782 <__aeabi_dsub+0x26a>
   18780:	e0f2      	b.n	18968 <__aeabi_dsub+0x450>
   18782:	4650      	mov	r0, sl
   18784:	1a80      	subs	r0, r0, r2
   18786:	4582      	cmp	sl, r0
   18788:	41bf      	sbcs	r7, r7
   1878a:	1a65      	subs	r5, r4, r1
   1878c:	427f      	negs	r7, r7
   1878e:	1bed      	subs	r5, r5, r7
   18790:	4684      	mov	ip, r0
   18792:	0228      	lsls	r0, r5, #8
   18794:	d400      	bmi.n	18798 <__aeabi_dsub+0x280>
   18796:	e08c      	b.n	188b2 <__aeabi_dsub+0x39a>
   18798:	4650      	mov	r0, sl
   1879a:	1a17      	subs	r7, r2, r0
   1879c:	42ba      	cmp	r2, r7
   1879e:	4192      	sbcs	r2, r2
   187a0:	1b0c      	subs	r4, r1, r4
   187a2:	4255      	negs	r5, r2
   187a4:	1b65      	subs	r5, r4, r5
   187a6:	4698      	mov	r8, r3
   187a8:	e714      	b.n	185d4 <__aeabi_dsub+0xbc>
   187aa:	2501      	movs	r5, #1
   187ac:	4643      	mov	r3, r8
   187ae:	2400      	movs	r4, #0
   187b0:	401d      	ands	r5, r3
   187b2:	2700      	movs	r7, #0
   187b4:	e755      	b.n	18662 <__aeabi_dsub+0x14a>
   187b6:	4c2a      	ldr	r4, [pc, #168]	; (18860 <__aeabi_dsub+0x348>)
   187b8:	1af6      	subs	r6, r6, r3
   187ba:	402c      	ands	r4, r5
   187bc:	e732      	b.n	18624 <__aeabi_dsub+0x10c>
   187be:	003d      	movs	r5, r7
   187c0:	3828      	subs	r0, #40	; 0x28
   187c2:	4085      	lsls	r5, r0
   187c4:	2700      	movs	r7, #0
   187c6:	e717      	b.n	185f8 <__aeabi_dsub+0xe0>
   187c8:	0038      	movs	r0, r7
   187ca:	f000 faa7 	bl	18d1c <__clzsi2>
   187ce:	3020      	adds	r0, #32
   187d0:	e706      	b.n	185e0 <__aeabi_dsub+0xc8>
   187d2:	430a      	orrs	r2, r1
   187d4:	0017      	movs	r7, r2
   187d6:	2100      	movs	r1, #0
   187d8:	1e7a      	subs	r2, r7, #1
   187da:	4197      	sbcs	r7, r2
   187dc:	e6ee      	b.n	185bc <__aeabi_dsub+0xa4>
   187de:	2b00      	cmp	r3, #0
   187e0:	d000      	beq.n	187e4 <__aeabi_dsub+0x2cc>
   187e2:	e0e5      	b.n	189b0 <__aeabi_dsub+0x498>
   187e4:	1c73      	adds	r3, r6, #1
   187e6:	469c      	mov	ip, r3
   187e8:	055b      	lsls	r3, r3, #21
   187ea:	0d5b      	lsrs	r3, r3, #21
   187ec:	2b01      	cmp	r3, #1
   187ee:	dc00      	bgt.n	187f2 <__aeabi_dsub+0x2da>
   187f0:	e09f      	b.n	18932 <__aeabi_dsub+0x41a>
   187f2:	4b1a      	ldr	r3, [pc, #104]	; (1885c <__aeabi_dsub+0x344>)
   187f4:	459c      	cmp	ip, r3
   187f6:	d100      	bne.n	187fa <__aeabi_dsub+0x2e2>
   187f8:	e0c5      	b.n	18986 <__aeabi_dsub+0x46e>
   187fa:	4452      	add	r2, sl
   187fc:	4552      	cmp	r2, sl
   187fe:	4180      	sbcs	r0, r0
   18800:	1864      	adds	r4, r4, r1
   18802:	4240      	negs	r0, r0
   18804:	1824      	adds	r4, r4, r0
   18806:	07e7      	lsls	r7, r4, #31
   18808:	0852      	lsrs	r2, r2, #1
   1880a:	4317      	orrs	r7, r2
   1880c:	0864      	lsrs	r4, r4, #1
   1880e:	4666      	mov	r6, ip
   18810:	e708      	b.n	18624 <__aeabi_dsub+0x10c>
   18812:	4812      	ldr	r0, [pc, #72]	; (1885c <__aeabi_dsub+0x344>)
   18814:	4285      	cmp	r5, r0
   18816:	d100      	bne.n	1881a <__aeabi_dsub+0x302>
   18818:	e085      	b.n	18926 <__aeabi_dsub+0x40e>
   1881a:	001d      	movs	r5, r3
   1881c:	e6bc      	b.n	18598 <__aeabi_dsub+0x80>
   1881e:	0029      	movs	r1, r5
   18820:	3e1f      	subs	r6, #31
   18822:	40f1      	lsrs	r1, r6
   18824:	2b20      	cmp	r3, #32
   18826:	d100      	bne.n	1882a <__aeabi_dsub+0x312>
   18828:	e07f      	b.n	1892a <__aeabi_dsub+0x412>
   1882a:	2240      	movs	r2, #64	; 0x40
   1882c:	1ad3      	subs	r3, r2, r3
   1882e:	409d      	lsls	r5, r3
   18830:	432f      	orrs	r7, r5
   18832:	1e7d      	subs	r5, r7, #1
   18834:	41af      	sbcs	r7, r5
   18836:	2400      	movs	r4, #0
   18838:	430f      	orrs	r7, r1
   1883a:	2600      	movs	r6, #0
   1883c:	e78e      	b.n	1875c <__aeabi_dsub+0x244>
   1883e:	002b      	movs	r3, r5
   18840:	000f      	movs	r7, r1
   18842:	3b20      	subs	r3, #32
   18844:	40df      	lsrs	r7, r3
   18846:	2d20      	cmp	r5, #32
   18848:	d071      	beq.n	1892e <__aeabi_dsub+0x416>
   1884a:	2340      	movs	r3, #64	; 0x40
   1884c:	1b5d      	subs	r5, r3, r5
   1884e:	40a9      	lsls	r1, r5
   18850:	430a      	orrs	r2, r1
   18852:	1e51      	subs	r1, r2, #1
   18854:	418a      	sbcs	r2, r1
   18856:	2100      	movs	r1, #0
   18858:	4317      	orrs	r7, r2
   1885a:	e6af      	b.n	185bc <__aeabi_dsub+0xa4>
   1885c:	000007ff 	.word	0x000007ff
   18860:	ff7fffff 	.word	0xff7fffff
   18864:	800fffff 	.word	0x800fffff
   18868:	2e00      	cmp	r6, #0
   1886a:	d03e      	beq.n	188ea <__aeabi_dsub+0x3d2>
   1886c:	4eb3      	ldr	r6, [pc, #716]	; (18b3c <__aeabi_dsub+0x624>)
   1886e:	45b4      	cmp	ip, r6
   18870:	d045      	beq.n	188fe <__aeabi_dsub+0x3e6>
   18872:	2680      	movs	r6, #128	; 0x80
   18874:	0436      	lsls	r6, r6, #16
   18876:	426d      	negs	r5, r5
   18878:	4334      	orrs	r4, r6
   1887a:	2d38      	cmp	r5, #56	; 0x38
   1887c:	dd00      	ble.n	18880 <__aeabi_dsub+0x368>
   1887e:	e0a8      	b.n	189d2 <__aeabi_dsub+0x4ba>
   18880:	2d1f      	cmp	r5, #31
   18882:	dd00      	ble.n	18886 <__aeabi_dsub+0x36e>
   18884:	e11f      	b.n	18ac6 <__aeabi_dsub+0x5ae>
   18886:	2620      	movs	r6, #32
   18888:	0027      	movs	r7, r4
   1888a:	4650      	mov	r0, sl
   1888c:	1b76      	subs	r6, r6, r5
   1888e:	40b7      	lsls	r7, r6
   18890:	40e8      	lsrs	r0, r5
   18892:	4307      	orrs	r7, r0
   18894:	4650      	mov	r0, sl
   18896:	40b0      	lsls	r0, r6
   18898:	1e46      	subs	r6, r0, #1
   1889a:	41b0      	sbcs	r0, r6
   1889c:	40ec      	lsrs	r4, r5
   1889e:	4338      	orrs	r0, r7
   188a0:	1a17      	subs	r7, r2, r0
   188a2:	42ba      	cmp	r2, r7
   188a4:	4192      	sbcs	r2, r2
   188a6:	1b0c      	subs	r4, r1, r4
   188a8:	4252      	negs	r2, r2
   188aa:	1aa4      	subs	r4, r4, r2
   188ac:	4666      	mov	r6, ip
   188ae:	4698      	mov	r8, r3
   188b0:	e68b      	b.n	185ca <__aeabi_dsub+0xb2>
   188b2:	4664      	mov	r4, ip
   188b4:	4667      	mov	r7, ip
   188b6:	432c      	orrs	r4, r5
   188b8:	d000      	beq.n	188bc <__aeabi_dsub+0x3a4>
   188ba:	e68b      	b.n	185d4 <__aeabi_dsub+0xbc>
   188bc:	2500      	movs	r5, #0
   188be:	2600      	movs	r6, #0
   188c0:	2700      	movs	r7, #0
   188c2:	e6ea      	b.n	1869a <__aeabi_dsub+0x182>
   188c4:	001e      	movs	r6, r3
   188c6:	e6ad      	b.n	18624 <__aeabi_dsub+0x10c>
   188c8:	2b1f      	cmp	r3, #31
   188ca:	dc60      	bgt.n	1898e <__aeabi_dsub+0x476>
   188cc:	2720      	movs	r7, #32
   188ce:	1af8      	subs	r0, r7, r3
   188d0:	000f      	movs	r7, r1
   188d2:	4684      	mov	ip, r0
   188d4:	4087      	lsls	r7, r0
   188d6:	0010      	movs	r0, r2
   188d8:	40d8      	lsrs	r0, r3
   188da:	4307      	orrs	r7, r0
   188dc:	4660      	mov	r0, ip
   188de:	4082      	lsls	r2, r0
   188e0:	1e50      	subs	r0, r2, #1
   188e2:	4182      	sbcs	r2, r0
   188e4:	40d9      	lsrs	r1, r3
   188e6:	4317      	orrs	r7, r2
   188e8:	e6f5      	b.n	186d6 <__aeabi_dsub+0x1be>
   188ea:	0026      	movs	r6, r4
   188ec:	4650      	mov	r0, sl
   188ee:	4306      	orrs	r6, r0
   188f0:	d005      	beq.n	188fe <__aeabi_dsub+0x3e6>
   188f2:	43ed      	mvns	r5, r5
   188f4:	2d00      	cmp	r5, #0
   188f6:	d0d3      	beq.n	188a0 <__aeabi_dsub+0x388>
   188f8:	4e90      	ldr	r6, [pc, #576]	; (18b3c <__aeabi_dsub+0x624>)
   188fa:	45b4      	cmp	ip, r6
   188fc:	d1bd      	bne.n	1887a <__aeabi_dsub+0x362>
   188fe:	000c      	movs	r4, r1
   18900:	0017      	movs	r7, r2
   18902:	4666      	mov	r6, ip
   18904:	4698      	mov	r8, r3
   18906:	e68d      	b.n	18624 <__aeabi_dsub+0x10c>
   18908:	488c      	ldr	r0, [pc, #560]	; (18b3c <__aeabi_dsub+0x624>)
   1890a:	4283      	cmp	r3, r0
   1890c:	d00b      	beq.n	18926 <__aeabi_dsub+0x40e>
   1890e:	4663      	mov	r3, ip
   18910:	e6d9      	b.n	186c6 <__aeabi_dsub+0x1ae>
   18912:	2d00      	cmp	r5, #0
   18914:	d000      	beq.n	18918 <__aeabi_dsub+0x400>
   18916:	e096      	b.n	18a46 <__aeabi_dsub+0x52e>
   18918:	0008      	movs	r0, r1
   1891a:	4310      	orrs	r0, r2
   1891c:	d100      	bne.n	18920 <__aeabi_dsub+0x408>
   1891e:	e0e2      	b.n	18ae6 <__aeabi_dsub+0x5ce>
   18920:	000c      	movs	r4, r1
   18922:	0017      	movs	r7, r2
   18924:	4698      	mov	r8, r3
   18926:	4e85      	ldr	r6, [pc, #532]	; (18b3c <__aeabi_dsub+0x624>)
   18928:	e67c      	b.n	18624 <__aeabi_dsub+0x10c>
   1892a:	2500      	movs	r5, #0
   1892c:	e780      	b.n	18830 <__aeabi_dsub+0x318>
   1892e:	2100      	movs	r1, #0
   18930:	e78e      	b.n	18850 <__aeabi_dsub+0x338>
   18932:	0023      	movs	r3, r4
   18934:	4650      	mov	r0, sl
   18936:	4303      	orrs	r3, r0
   18938:	2e00      	cmp	r6, #0
   1893a:	d000      	beq.n	1893e <__aeabi_dsub+0x426>
   1893c:	e0a8      	b.n	18a90 <__aeabi_dsub+0x578>
   1893e:	2b00      	cmp	r3, #0
   18940:	d100      	bne.n	18944 <__aeabi_dsub+0x42c>
   18942:	e0de      	b.n	18b02 <__aeabi_dsub+0x5ea>
   18944:	000b      	movs	r3, r1
   18946:	4313      	orrs	r3, r2
   18948:	d100      	bne.n	1894c <__aeabi_dsub+0x434>
   1894a:	e66b      	b.n	18624 <__aeabi_dsub+0x10c>
   1894c:	4452      	add	r2, sl
   1894e:	4552      	cmp	r2, sl
   18950:	4180      	sbcs	r0, r0
   18952:	1864      	adds	r4, r4, r1
   18954:	4240      	negs	r0, r0
   18956:	1824      	adds	r4, r4, r0
   18958:	0017      	movs	r7, r2
   1895a:	0223      	lsls	r3, r4, #8
   1895c:	d400      	bmi.n	18960 <__aeabi_dsub+0x448>
   1895e:	e6fd      	b.n	1875c <__aeabi_dsub+0x244>
   18960:	4b77      	ldr	r3, [pc, #476]	; (18b40 <__aeabi_dsub+0x628>)
   18962:	4666      	mov	r6, ip
   18964:	401c      	ands	r4, r3
   18966:	e65d      	b.n	18624 <__aeabi_dsub+0x10c>
   18968:	0025      	movs	r5, r4
   1896a:	4650      	mov	r0, sl
   1896c:	4305      	orrs	r5, r0
   1896e:	2e00      	cmp	r6, #0
   18970:	d1cf      	bne.n	18912 <__aeabi_dsub+0x3fa>
   18972:	2d00      	cmp	r5, #0
   18974:	d14f      	bne.n	18a16 <__aeabi_dsub+0x4fe>
   18976:	000c      	movs	r4, r1
   18978:	4314      	orrs	r4, r2
   1897a:	d100      	bne.n	1897e <__aeabi_dsub+0x466>
   1897c:	e0a0      	b.n	18ac0 <__aeabi_dsub+0x5a8>
   1897e:	000c      	movs	r4, r1
   18980:	0017      	movs	r7, r2
   18982:	4698      	mov	r8, r3
   18984:	e64e      	b.n	18624 <__aeabi_dsub+0x10c>
   18986:	4666      	mov	r6, ip
   18988:	2400      	movs	r4, #0
   1898a:	2700      	movs	r7, #0
   1898c:	e685      	b.n	1869a <__aeabi_dsub+0x182>
   1898e:	001f      	movs	r7, r3
   18990:	0008      	movs	r0, r1
   18992:	3f20      	subs	r7, #32
   18994:	40f8      	lsrs	r0, r7
   18996:	0007      	movs	r7, r0
   18998:	2b20      	cmp	r3, #32
   1899a:	d100      	bne.n	1899e <__aeabi_dsub+0x486>
   1899c:	e08e      	b.n	18abc <__aeabi_dsub+0x5a4>
   1899e:	2040      	movs	r0, #64	; 0x40
   189a0:	1ac3      	subs	r3, r0, r3
   189a2:	4099      	lsls	r1, r3
   189a4:	430a      	orrs	r2, r1
   189a6:	1e51      	subs	r1, r2, #1
   189a8:	418a      	sbcs	r2, r1
   189aa:	2100      	movs	r1, #0
   189ac:	4317      	orrs	r7, r2
   189ae:	e692      	b.n	186d6 <__aeabi_dsub+0x1be>
   189b0:	2e00      	cmp	r6, #0
   189b2:	d114      	bne.n	189de <__aeabi_dsub+0x4c6>
   189b4:	0026      	movs	r6, r4
   189b6:	4650      	mov	r0, sl
   189b8:	4306      	orrs	r6, r0
   189ba:	d062      	beq.n	18a82 <__aeabi_dsub+0x56a>
   189bc:	43db      	mvns	r3, r3
   189be:	2b00      	cmp	r3, #0
   189c0:	d15c      	bne.n	18a7c <__aeabi_dsub+0x564>
   189c2:	1887      	adds	r7, r0, r2
   189c4:	4297      	cmp	r7, r2
   189c6:	4192      	sbcs	r2, r2
   189c8:	1864      	adds	r4, r4, r1
   189ca:	4252      	negs	r2, r2
   189cc:	18a4      	adds	r4, r4, r2
   189ce:	4666      	mov	r6, ip
   189d0:	e687      	b.n	186e2 <__aeabi_dsub+0x1ca>
   189d2:	4650      	mov	r0, sl
   189d4:	4320      	orrs	r0, r4
   189d6:	1e44      	subs	r4, r0, #1
   189d8:	41a0      	sbcs	r0, r4
   189da:	2400      	movs	r4, #0
   189dc:	e760      	b.n	188a0 <__aeabi_dsub+0x388>
   189de:	4e57      	ldr	r6, [pc, #348]	; (18b3c <__aeabi_dsub+0x624>)
   189e0:	45b4      	cmp	ip, r6
   189e2:	d04e      	beq.n	18a82 <__aeabi_dsub+0x56a>
   189e4:	2680      	movs	r6, #128	; 0x80
   189e6:	0436      	lsls	r6, r6, #16
   189e8:	425b      	negs	r3, r3
   189ea:	4334      	orrs	r4, r6
   189ec:	2b38      	cmp	r3, #56	; 0x38
   189ee:	dd00      	ble.n	189f2 <__aeabi_dsub+0x4da>
   189f0:	e07f      	b.n	18af2 <__aeabi_dsub+0x5da>
   189f2:	2b1f      	cmp	r3, #31
   189f4:	dd00      	ble.n	189f8 <__aeabi_dsub+0x4e0>
   189f6:	e08b      	b.n	18b10 <__aeabi_dsub+0x5f8>
   189f8:	2620      	movs	r6, #32
   189fa:	0027      	movs	r7, r4
   189fc:	4650      	mov	r0, sl
   189fe:	1af6      	subs	r6, r6, r3
   18a00:	40b7      	lsls	r7, r6
   18a02:	40d8      	lsrs	r0, r3
   18a04:	4307      	orrs	r7, r0
   18a06:	4650      	mov	r0, sl
   18a08:	40b0      	lsls	r0, r6
   18a0a:	1e46      	subs	r6, r0, #1
   18a0c:	41b0      	sbcs	r0, r6
   18a0e:	4307      	orrs	r7, r0
   18a10:	40dc      	lsrs	r4, r3
   18a12:	18bf      	adds	r7, r7, r2
   18a14:	e7d6      	b.n	189c4 <__aeabi_dsub+0x4ac>
   18a16:	000d      	movs	r5, r1
   18a18:	4315      	orrs	r5, r2
   18a1a:	d100      	bne.n	18a1e <__aeabi_dsub+0x506>
   18a1c:	e602      	b.n	18624 <__aeabi_dsub+0x10c>
   18a1e:	4650      	mov	r0, sl
   18a20:	1a80      	subs	r0, r0, r2
   18a22:	4582      	cmp	sl, r0
   18a24:	41bf      	sbcs	r7, r7
   18a26:	1a65      	subs	r5, r4, r1
   18a28:	427f      	negs	r7, r7
   18a2a:	1bed      	subs	r5, r5, r7
   18a2c:	4684      	mov	ip, r0
   18a2e:	0228      	lsls	r0, r5, #8
   18a30:	d400      	bmi.n	18a34 <__aeabi_dsub+0x51c>
   18a32:	e68d      	b.n	18750 <__aeabi_dsub+0x238>
   18a34:	4650      	mov	r0, sl
   18a36:	1a17      	subs	r7, r2, r0
   18a38:	42ba      	cmp	r2, r7
   18a3a:	4192      	sbcs	r2, r2
   18a3c:	1b0c      	subs	r4, r1, r4
   18a3e:	4252      	negs	r2, r2
   18a40:	1aa4      	subs	r4, r4, r2
   18a42:	4698      	mov	r8, r3
   18a44:	e5ee      	b.n	18624 <__aeabi_dsub+0x10c>
   18a46:	000d      	movs	r5, r1
   18a48:	4315      	orrs	r5, r2
   18a4a:	d100      	bne.n	18a4e <__aeabi_dsub+0x536>
   18a4c:	e76b      	b.n	18926 <__aeabi_dsub+0x40e>
   18a4e:	4650      	mov	r0, sl
   18a50:	0767      	lsls	r7, r4, #29
   18a52:	08c0      	lsrs	r0, r0, #3
   18a54:	4307      	orrs	r7, r0
   18a56:	2080      	movs	r0, #128	; 0x80
   18a58:	08e4      	lsrs	r4, r4, #3
   18a5a:	0300      	lsls	r0, r0, #12
   18a5c:	4204      	tst	r4, r0
   18a5e:	d007      	beq.n	18a70 <__aeabi_dsub+0x558>
   18a60:	08cd      	lsrs	r5, r1, #3
   18a62:	4205      	tst	r5, r0
   18a64:	d104      	bne.n	18a70 <__aeabi_dsub+0x558>
   18a66:	002c      	movs	r4, r5
   18a68:	4698      	mov	r8, r3
   18a6a:	08d7      	lsrs	r7, r2, #3
   18a6c:	0749      	lsls	r1, r1, #29
   18a6e:	430f      	orrs	r7, r1
   18a70:	0f7b      	lsrs	r3, r7, #29
   18a72:	00e4      	lsls	r4, r4, #3
   18a74:	431c      	orrs	r4, r3
   18a76:	00ff      	lsls	r7, r7, #3
   18a78:	4e30      	ldr	r6, [pc, #192]	; (18b3c <__aeabi_dsub+0x624>)
   18a7a:	e5d3      	b.n	18624 <__aeabi_dsub+0x10c>
   18a7c:	4e2f      	ldr	r6, [pc, #188]	; (18b3c <__aeabi_dsub+0x624>)
   18a7e:	45b4      	cmp	ip, r6
   18a80:	d1b4      	bne.n	189ec <__aeabi_dsub+0x4d4>
   18a82:	000c      	movs	r4, r1
   18a84:	0017      	movs	r7, r2
   18a86:	4666      	mov	r6, ip
   18a88:	e5cc      	b.n	18624 <__aeabi_dsub+0x10c>
   18a8a:	2700      	movs	r7, #0
   18a8c:	2400      	movs	r4, #0
   18a8e:	e5e8      	b.n	18662 <__aeabi_dsub+0x14a>
   18a90:	2b00      	cmp	r3, #0
   18a92:	d039      	beq.n	18b08 <__aeabi_dsub+0x5f0>
   18a94:	000b      	movs	r3, r1
   18a96:	4313      	orrs	r3, r2
   18a98:	d100      	bne.n	18a9c <__aeabi_dsub+0x584>
   18a9a:	e744      	b.n	18926 <__aeabi_dsub+0x40e>
   18a9c:	08c0      	lsrs	r0, r0, #3
   18a9e:	0767      	lsls	r7, r4, #29
   18aa0:	4307      	orrs	r7, r0
   18aa2:	2080      	movs	r0, #128	; 0x80
   18aa4:	08e4      	lsrs	r4, r4, #3
   18aa6:	0300      	lsls	r0, r0, #12
   18aa8:	4204      	tst	r4, r0
   18aaa:	d0e1      	beq.n	18a70 <__aeabi_dsub+0x558>
   18aac:	08cb      	lsrs	r3, r1, #3
   18aae:	4203      	tst	r3, r0
   18ab0:	d1de      	bne.n	18a70 <__aeabi_dsub+0x558>
   18ab2:	08d7      	lsrs	r7, r2, #3
   18ab4:	0749      	lsls	r1, r1, #29
   18ab6:	430f      	orrs	r7, r1
   18ab8:	001c      	movs	r4, r3
   18aba:	e7d9      	b.n	18a70 <__aeabi_dsub+0x558>
   18abc:	2100      	movs	r1, #0
   18abe:	e771      	b.n	189a4 <__aeabi_dsub+0x48c>
   18ac0:	2500      	movs	r5, #0
   18ac2:	2700      	movs	r7, #0
   18ac4:	e5e9      	b.n	1869a <__aeabi_dsub+0x182>
   18ac6:	002e      	movs	r6, r5
   18ac8:	0027      	movs	r7, r4
   18aca:	3e20      	subs	r6, #32
   18acc:	40f7      	lsrs	r7, r6
   18ace:	2d20      	cmp	r5, #32
   18ad0:	d02f      	beq.n	18b32 <__aeabi_dsub+0x61a>
   18ad2:	2640      	movs	r6, #64	; 0x40
   18ad4:	1b75      	subs	r5, r6, r5
   18ad6:	40ac      	lsls	r4, r5
   18ad8:	4650      	mov	r0, sl
   18ada:	4320      	orrs	r0, r4
   18adc:	1e44      	subs	r4, r0, #1
   18ade:	41a0      	sbcs	r0, r4
   18ae0:	2400      	movs	r4, #0
   18ae2:	4338      	orrs	r0, r7
   18ae4:	e6dc      	b.n	188a0 <__aeabi_dsub+0x388>
   18ae6:	2480      	movs	r4, #128	; 0x80
   18ae8:	2500      	movs	r5, #0
   18aea:	0324      	lsls	r4, r4, #12
   18aec:	4e13      	ldr	r6, [pc, #76]	; (18b3c <__aeabi_dsub+0x624>)
   18aee:	2700      	movs	r7, #0
   18af0:	e5d3      	b.n	1869a <__aeabi_dsub+0x182>
   18af2:	4650      	mov	r0, sl
   18af4:	4320      	orrs	r0, r4
   18af6:	0007      	movs	r7, r0
   18af8:	1e78      	subs	r0, r7, #1
   18afa:	4187      	sbcs	r7, r0
   18afc:	2400      	movs	r4, #0
   18afe:	18bf      	adds	r7, r7, r2
   18b00:	e760      	b.n	189c4 <__aeabi_dsub+0x4ac>
   18b02:	000c      	movs	r4, r1
   18b04:	0017      	movs	r7, r2
   18b06:	e58d      	b.n	18624 <__aeabi_dsub+0x10c>
   18b08:	000c      	movs	r4, r1
   18b0a:	0017      	movs	r7, r2
   18b0c:	4e0b      	ldr	r6, [pc, #44]	; (18b3c <__aeabi_dsub+0x624>)
   18b0e:	e589      	b.n	18624 <__aeabi_dsub+0x10c>
   18b10:	001e      	movs	r6, r3
   18b12:	0027      	movs	r7, r4
   18b14:	3e20      	subs	r6, #32
   18b16:	40f7      	lsrs	r7, r6
   18b18:	2b20      	cmp	r3, #32
   18b1a:	d00c      	beq.n	18b36 <__aeabi_dsub+0x61e>
   18b1c:	2640      	movs	r6, #64	; 0x40
   18b1e:	1af3      	subs	r3, r6, r3
   18b20:	409c      	lsls	r4, r3
   18b22:	4650      	mov	r0, sl
   18b24:	4320      	orrs	r0, r4
   18b26:	1e44      	subs	r4, r0, #1
   18b28:	41a0      	sbcs	r0, r4
   18b2a:	4307      	orrs	r7, r0
   18b2c:	2400      	movs	r4, #0
   18b2e:	18bf      	adds	r7, r7, r2
   18b30:	e748      	b.n	189c4 <__aeabi_dsub+0x4ac>
   18b32:	2400      	movs	r4, #0
   18b34:	e7d0      	b.n	18ad8 <__aeabi_dsub+0x5c0>
   18b36:	2400      	movs	r4, #0
   18b38:	e7f3      	b.n	18b22 <__aeabi_dsub+0x60a>
   18b3a:	46c0      	nop			; (mov r8, r8)
   18b3c:	000007ff 	.word	0x000007ff
   18b40:	ff7fffff 	.word	0xff7fffff

00018b44 <__aeabi_d2iz>:
   18b44:	b530      	push	{r4, r5, lr}
   18b46:	4d13      	ldr	r5, [pc, #76]	; (18b94 <__aeabi_d2iz+0x50>)
   18b48:	030a      	lsls	r2, r1, #12
   18b4a:	004b      	lsls	r3, r1, #1
   18b4c:	0b12      	lsrs	r2, r2, #12
   18b4e:	0d5b      	lsrs	r3, r3, #21
   18b50:	0fc9      	lsrs	r1, r1, #31
   18b52:	2400      	movs	r4, #0
   18b54:	42ab      	cmp	r3, r5
   18b56:	dd10      	ble.n	18b7a <__aeabi_d2iz+0x36>
   18b58:	4c0f      	ldr	r4, [pc, #60]	; (18b98 <__aeabi_d2iz+0x54>)
   18b5a:	42a3      	cmp	r3, r4
   18b5c:	dc0f      	bgt.n	18b7e <__aeabi_d2iz+0x3a>
   18b5e:	2480      	movs	r4, #128	; 0x80
   18b60:	4d0e      	ldr	r5, [pc, #56]	; (18b9c <__aeabi_d2iz+0x58>)
   18b62:	0364      	lsls	r4, r4, #13
   18b64:	4322      	orrs	r2, r4
   18b66:	1aed      	subs	r5, r5, r3
   18b68:	2d1f      	cmp	r5, #31
   18b6a:	dd0b      	ble.n	18b84 <__aeabi_d2iz+0x40>
   18b6c:	480c      	ldr	r0, [pc, #48]	; (18ba0 <__aeabi_d2iz+0x5c>)
   18b6e:	1ac3      	subs	r3, r0, r3
   18b70:	40da      	lsrs	r2, r3
   18b72:	4254      	negs	r4, r2
   18b74:	2900      	cmp	r1, #0
   18b76:	d100      	bne.n	18b7a <__aeabi_d2iz+0x36>
   18b78:	0014      	movs	r4, r2
   18b7a:	0020      	movs	r0, r4
   18b7c:	bd30      	pop	{r4, r5, pc}
   18b7e:	4b09      	ldr	r3, [pc, #36]	; (18ba4 <__aeabi_d2iz+0x60>)
   18b80:	18cc      	adds	r4, r1, r3
   18b82:	e7fa      	b.n	18b7a <__aeabi_d2iz+0x36>
   18b84:	4c08      	ldr	r4, [pc, #32]	; (18ba8 <__aeabi_d2iz+0x64>)
   18b86:	40e8      	lsrs	r0, r5
   18b88:	46a4      	mov	ip, r4
   18b8a:	4463      	add	r3, ip
   18b8c:	409a      	lsls	r2, r3
   18b8e:	4302      	orrs	r2, r0
   18b90:	e7ef      	b.n	18b72 <__aeabi_d2iz+0x2e>
   18b92:	46c0      	nop			; (mov r8, r8)
   18b94:	000003fe 	.word	0x000003fe
   18b98:	0000041d 	.word	0x0000041d
   18b9c:	00000433 	.word	0x00000433
   18ba0:	00000413 	.word	0x00000413
   18ba4:	7fffffff 	.word	0x7fffffff
   18ba8:	fffffbed 	.word	0xfffffbed

00018bac <__aeabi_i2d>:
   18bac:	b570      	push	{r4, r5, r6, lr}
   18bae:	2800      	cmp	r0, #0
   18bb0:	d030      	beq.n	18c14 <__aeabi_i2d+0x68>
   18bb2:	17c3      	asrs	r3, r0, #31
   18bb4:	18c4      	adds	r4, r0, r3
   18bb6:	405c      	eors	r4, r3
   18bb8:	0fc5      	lsrs	r5, r0, #31
   18bba:	0020      	movs	r0, r4
   18bbc:	f000 f8ae 	bl	18d1c <__clzsi2>
   18bc0:	4b17      	ldr	r3, [pc, #92]	; (18c20 <__aeabi_i2d+0x74>)
   18bc2:	4a18      	ldr	r2, [pc, #96]	; (18c24 <__aeabi_i2d+0x78>)
   18bc4:	1a1b      	subs	r3, r3, r0
   18bc6:	1ad2      	subs	r2, r2, r3
   18bc8:	2a1f      	cmp	r2, #31
   18bca:	dd18      	ble.n	18bfe <__aeabi_i2d+0x52>
   18bcc:	4a16      	ldr	r2, [pc, #88]	; (18c28 <__aeabi_i2d+0x7c>)
   18bce:	1ad2      	subs	r2, r2, r3
   18bd0:	4094      	lsls	r4, r2
   18bd2:	2200      	movs	r2, #0
   18bd4:	0324      	lsls	r4, r4, #12
   18bd6:	055b      	lsls	r3, r3, #21
   18bd8:	0b24      	lsrs	r4, r4, #12
   18bda:	0d5b      	lsrs	r3, r3, #21
   18bdc:	2100      	movs	r1, #0
   18bde:	0010      	movs	r0, r2
   18be0:	0324      	lsls	r4, r4, #12
   18be2:	0d0a      	lsrs	r2, r1, #20
   18be4:	0b24      	lsrs	r4, r4, #12
   18be6:	0512      	lsls	r2, r2, #20
   18be8:	4322      	orrs	r2, r4
   18bea:	4c10      	ldr	r4, [pc, #64]	; (18c2c <__aeabi_i2d+0x80>)
   18bec:	051b      	lsls	r3, r3, #20
   18bee:	4022      	ands	r2, r4
   18bf0:	4313      	orrs	r3, r2
   18bf2:	005b      	lsls	r3, r3, #1
   18bf4:	07ed      	lsls	r5, r5, #31
   18bf6:	085b      	lsrs	r3, r3, #1
   18bf8:	432b      	orrs	r3, r5
   18bfa:	0019      	movs	r1, r3
   18bfc:	bd70      	pop	{r4, r5, r6, pc}
   18bfe:	0021      	movs	r1, r4
   18c00:	4091      	lsls	r1, r2
   18c02:	000a      	movs	r2, r1
   18c04:	210b      	movs	r1, #11
   18c06:	1a08      	subs	r0, r1, r0
   18c08:	40c4      	lsrs	r4, r0
   18c0a:	055b      	lsls	r3, r3, #21
   18c0c:	0324      	lsls	r4, r4, #12
   18c0e:	0b24      	lsrs	r4, r4, #12
   18c10:	0d5b      	lsrs	r3, r3, #21
   18c12:	e7e3      	b.n	18bdc <__aeabi_i2d+0x30>
   18c14:	2500      	movs	r5, #0
   18c16:	2300      	movs	r3, #0
   18c18:	2400      	movs	r4, #0
   18c1a:	2200      	movs	r2, #0
   18c1c:	e7de      	b.n	18bdc <__aeabi_i2d+0x30>
   18c1e:	46c0      	nop			; (mov r8, r8)
   18c20:	0000041e 	.word	0x0000041e
   18c24:	00000433 	.word	0x00000433
   18c28:	00000413 	.word	0x00000413
   18c2c:	800fffff 	.word	0x800fffff

00018c30 <__aeabi_ui2d>:
   18c30:	b510      	push	{r4, lr}
   18c32:	1e04      	subs	r4, r0, #0
   18c34:	d028      	beq.n	18c88 <__aeabi_ui2d+0x58>
   18c36:	f000 f871 	bl	18d1c <__clzsi2>
   18c3a:	4b15      	ldr	r3, [pc, #84]	; (18c90 <__aeabi_ui2d+0x60>)
   18c3c:	4a15      	ldr	r2, [pc, #84]	; (18c94 <__aeabi_ui2d+0x64>)
   18c3e:	1a1b      	subs	r3, r3, r0
   18c40:	1ad2      	subs	r2, r2, r3
   18c42:	2a1f      	cmp	r2, #31
   18c44:	dd15      	ble.n	18c72 <__aeabi_ui2d+0x42>
   18c46:	4a14      	ldr	r2, [pc, #80]	; (18c98 <__aeabi_ui2d+0x68>)
   18c48:	1ad2      	subs	r2, r2, r3
   18c4a:	4094      	lsls	r4, r2
   18c4c:	2200      	movs	r2, #0
   18c4e:	0324      	lsls	r4, r4, #12
   18c50:	055b      	lsls	r3, r3, #21
   18c52:	0b24      	lsrs	r4, r4, #12
   18c54:	0d5b      	lsrs	r3, r3, #21
   18c56:	2100      	movs	r1, #0
   18c58:	0010      	movs	r0, r2
   18c5a:	0324      	lsls	r4, r4, #12
   18c5c:	0d0a      	lsrs	r2, r1, #20
   18c5e:	0b24      	lsrs	r4, r4, #12
   18c60:	0512      	lsls	r2, r2, #20
   18c62:	4322      	orrs	r2, r4
   18c64:	4c0d      	ldr	r4, [pc, #52]	; (18c9c <__aeabi_ui2d+0x6c>)
   18c66:	051b      	lsls	r3, r3, #20
   18c68:	4022      	ands	r2, r4
   18c6a:	4313      	orrs	r3, r2
   18c6c:	005b      	lsls	r3, r3, #1
   18c6e:	0859      	lsrs	r1, r3, #1
   18c70:	bd10      	pop	{r4, pc}
   18c72:	0021      	movs	r1, r4
   18c74:	4091      	lsls	r1, r2
   18c76:	000a      	movs	r2, r1
   18c78:	210b      	movs	r1, #11
   18c7a:	1a08      	subs	r0, r1, r0
   18c7c:	40c4      	lsrs	r4, r0
   18c7e:	055b      	lsls	r3, r3, #21
   18c80:	0324      	lsls	r4, r4, #12
   18c82:	0b24      	lsrs	r4, r4, #12
   18c84:	0d5b      	lsrs	r3, r3, #21
   18c86:	e7e6      	b.n	18c56 <__aeabi_ui2d+0x26>
   18c88:	2300      	movs	r3, #0
   18c8a:	2400      	movs	r4, #0
   18c8c:	2200      	movs	r2, #0
   18c8e:	e7e2      	b.n	18c56 <__aeabi_ui2d+0x26>
   18c90:	0000041e 	.word	0x0000041e
   18c94:	00000433 	.word	0x00000433
   18c98:	00000413 	.word	0x00000413
   18c9c:	800fffff 	.word	0x800fffff

00018ca0 <__aeabi_cdrcmple>:
   18ca0:	4684      	mov	ip, r0
   18ca2:	1c10      	adds	r0, r2, #0
   18ca4:	4662      	mov	r2, ip
   18ca6:	468c      	mov	ip, r1
   18ca8:	1c19      	adds	r1, r3, #0
   18caa:	4663      	mov	r3, ip
   18cac:	e000      	b.n	18cb0 <__aeabi_cdcmpeq>
   18cae:	46c0      	nop			; (mov r8, r8)

00018cb0 <__aeabi_cdcmpeq>:
   18cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   18cb2:	f000 f8ef 	bl	18e94 <__ledf2>
   18cb6:	2800      	cmp	r0, #0
   18cb8:	d401      	bmi.n	18cbe <__aeabi_cdcmpeq+0xe>
   18cba:	2100      	movs	r1, #0
   18cbc:	42c8      	cmn	r0, r1
   18cbe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00018cc0 <__aeabi_dcmpeq>:
   18cc0:	b510      	push	{r4, lr}
   18cc2:	f000 f849 	bl	18d58 <__eqdf2>
   18cc6:	4240      	negs	r0, r0
   18cc8:	3001      	adds	r0, #1
   18cca:	bd10      	pop	{r4, pc}

00018ccc <__aeabi_dcmplt>:
   18ccc:	b510      	push	{r4, lr}
   18cce:	f000 f8e1 	bl	18e94 <__ledf2>
   18cd2:	2800      	cmp	r0, #0
   18cd4:	db01      	blt.n	18cda <__aeabi_dcmplt+0xe>
   18cd6:	2000      	movs	r0, #0
   18cd8:	bd10      	pop	{r4, pc}
   18cda:	2001      	movs	r0, #1
   18cdc:	bd10      	pop	{r4, pc}
   18cde:	46c0      	nop			; (mov r8, r8)

00018ce0 <__aeabi_dcmple>:
   18ce0:	b510      	push	{r4, lr}
   18ce2:	f000 f8d7 	bl	18e94 <__ledf2>
   18ce6:	2800      	cmp	r0, #0
   18ce8:	dd01      	ble.n	18cee <__aeabi_dcmple+0xe>
   18cea:	2000      	movs	r0, #0
   18cec:	bd10      	pop	{r4, pc}
   18cee:	2001      	movs	r0, #1
   18cf0:	bd10      	pop	{r4, pc}
   18cf2:	46c0      	nop			; (mov r8, r8)

00018cf4 <__aeabi_dcmpgt>:
   18cf4:	b510      	push	{r4, lr}
   18cf6:	f000 f869 	bl	18dcc <__gedf2>
   18cfa:	2800      	cmp	r0, #0
   18cfc:	dc01      	bgt.n	18d02 <__aeabi_dcmpgt+0xe>
   18cfe:	2000      	movs	r0, #0
   18d00:	bd10      	pop	{r4, pc}
   18d02:	2001      	movs	r0, #1
   18d04:	bd10      	pop	{r4, pc}
   18d06:	46c0      	nop			; (mov r8, r8)

00018d08 <__aeabi_dcmpge>:
   18d08:	b510      	push	{r4, lr}
   18d0a:	f000 f85f 	bl	18dcc <__gedf2>
   18d0e:	2800      	cmp	r0, #0
   18d10:	da01      	bge.n	18d16 <__aeabi_dcmpge+0xe>
   18d12:	2000      	movs	r0, #0
   18d14:	bd10      	pop	{r4, pc}
   18d16:	2001      	movs	r0, #1
   18d18:	bd10      	pop	{r4, pc}
   18d1a:	46c0      	nop			; (mov r8, r8)

00018d1c <__clzsi2>:
   18d1c:	211c      	movs	r1, #28
   18d1e:	2301      	movs	r3, #1
   18d20:	041b      	lsls	r3, r3, #16
   18d22:	4298      	cmp	r0, r3
   18d24:	d301      	bcc.n	18d2a <__clzsi2+0xe>
   18d26:	0c00      	lsrs	r0, r0, #16
   18d28:	3910      	subs	r1, #16
   18d2a:	0a1b      	lsrs	r3, r3, #8
   18d2c:	4298      	cmp	r0, r3
   18d2e:	d301      	bcc.n	18d34 <__clzsi2+0x18>
   18d30:	0a00      	lsrs	r0, r0, #8
   18d32:	3908      	subs	r1, #8
   18d34:	091b      	lsrs	r3, r3, #4
   18d36:	4298      	cmp	r0, r3
   18d38:	d301      	bcc.n	18d3e <__clzsi2+0x22>
   18d3a:	0900      	lsrs	r0, r0, #4
   18d3c:	3904      	subs	r1, #4
   18d3e:	a202      	add	r2, pc, #8	; (adr r2, 18d48 <__clzsi2+0x2c>)
   18d40:	5c10      	ldrb	r0, [r2, r0]
   18d42:	1840      	adds	r0, r0, r1
   18d44:	4770      	bx	lr
   18d46:	46c0      	nop			; (mov r8, r8)
   18d48:	02020304 	.word	0x02020304
   18d4c:	01010101 	.word	0x01010101
	...

00018d58 <__eqdf2>:
   18d58:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d5a:	464f      	mov	r7, r9
   18d5c:	4646      	mov	r6, r8
   18d5e:	46d6      	mov	lr, sl
   18d60:	005c      	lsls	r4, r3, #1
   18d62:	b5c0      	push	{r6, r7, lr}
   18d64:	031f      	lsls	r7, r3, #12
   18d66:	0fdb      	lsrs	r3, r3, #31
   18d68:	469a      	mov	sl, r3
   18d6a:	4b17      	ldr	r3, [pc, #92]	; (18dc8 <__eqdf2+0x70>)
   18d6c:	030e      	lsls	r6, r1, #12
   18d6e:	004d      	lsls	r5, r1, #1
   18d70:	4684      	mov	ip, r0
   18d72:	4680      	mov	r8, r0
   18d74:	0b36      	lsrs	r6, r6, #12
   18d76:	0d6d      	lsrs	r5, r5, #21
   18d78:	0fc9      	lsrs	r1, r1, #31
   18d7a:	4691      	mov	r9, r2
   18d7c:	0b3f      	lsrs	r7, r7, #12
   18d7e:	0d64      	lsrs	r4, r4, #21
   18d80:	2001      	movs	r0, #1
   18d82:	429d      	cmp	r5, r3
   18d84:	d008      	beq.n	18d98 <__eqdf2+0x40>
   18d86:	429c      	cmp	r4, r3
   18d88:	d001      	beq.n	18d8e <__eqdf2+0x36>
   18d8a:	42a5      	cmp	r5, r4
   18d8c:	d00b      	beq.n	18da6 <__eqdf2+0x4e>
   18d8e:	bc1c      	pop	{r2, r3, r4}
   18d90:	4690      	mov	r8, r2
   18d92:	4699      	mov	r9, r3
   18d94:	46a2      	mov	sl, r4
   18d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18d98:	4663      	mov	r3, ip
   18d9a:	4333      	orrs	r3, r6
   18d9c:	d1f7      	bne.n	18d8e <__eqdf2+0x36>
   18d9e:	42ac      	cmp	r4, r5
   18da0:	d1f5      	bne.n	18d8e <__eqdf2+0x36>
   18da2:	433a      	orrs	r2, r7
   18da4:	d1f3      	bne.n	18d8e <__eqdf2+0x36>
   18da6:	2001      	movs	r0, #1
   18da8:	42be      	cmp	r6, r7
   18daa:	d1f0      	bne.n	18d8e <__eqdf2+0x36>
   18dac:	45c8      	cmp	r8, r9
   18dae:	d1ee      	bne.n	18d8e <__eqdf2+0x36>
   18db0:	4551      	cmp	r1, sl
   18db2:	d007      	beq.n	18dc4 <__eqdf2+0x6c>
   18db4:	2d00      	cmp	r5, #0
   18db6:	d1ea      	bne.n	18d8e <__eqdf2+0x36>
   18db8:	4663      	mov	r3, ip
   18dba:	431e      	orrs	r6, r3
   18dbc:	0030      	movs	r0, r6
   18dbe:	1e46      	subs	r6, r0, #1
   18dc0:	41b0      	sbcs	r0, r6
   18dc2:	e7e4      	b.n	18d8e <__eqdf2+0x36>
   18dc4:	2000      	movs	r0, #0
   18dc6:	e7e2      	b.n	18d8e <__eqdf2+0x36>
   18dc8:	000007ff 	.word	0x000007ff

00018dcc <__gedf2>:
   18dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   18dce:	4645      	mov	r5, r8
   18dd0:	46de      	mov	lr, fp
   18dd2:	4657      	mov	r7, sl
   18dd4:	464e      	mov	r6, r9
   18dd6:	b5e0      	push	{r5, r6, r7, lr}
   18dd8:	031f      	lsls	r7, r3, #12
   18dda:	0b3d      	lsrs	r5, r7, #12
   18ddc:	4f2c      	ldr	r7, [pc, #176]	; (18e90 <__gedf2+0xc4>)
   18dde:	030e      	lsls	r6, r1, #12
   18de0:	004c      	lsls	r4, r1, #1
   18de2:	46ab      	mov	fp, r5
   18de4:	005d      	lsls	r5, r3, #1
   18de6:	4684      	mov	ip, r0
   18de8:	0b36      	lsrs	r6, r6, #12
   18dea:	0d64      	lsrs	r4, r4, #21
   18dec:	0fc9      	lsrs	r1, r1, #31
   18dee:	4690      	mov	r8, r2
   18df0:	0d6d      	lsrs	r5, r5, #21
   18df2:	0fdb      	lsrs	r3, r3, #31
   18df4:	42bc      	cmp	r4, r7
   18df6:	d02a      	beq.n	18e4e <__gedf2+0x82>
   18df8:	4f25      	ldr	r7, [pc, #148]	; (18e90 <__gedf2+0xc4>)
   18dfa:	42bd      	cmp	r5, r7
   18dfc:	d02d      	beq.n	18e5a <__gedf2+0x8e>
   18dfe:	2c00      	cmp	r4, #0
   18e00:	d10f      	bne.n	18e22 <__gedf2+0x56>
   18e02:	4330      	orrs	r0, r6
   18e04:	0007      	movs	r7, r0
   18e06:	4681      	mov	r9, r0
   18e08:	4278      	negs	r0, r7
   18e0a:	4178      	adcs	r0, r7
   18e0c:	b2c0      	uxtb	r0, r0
   18e0e:	2d00      	cmp	r5, #0
   18e10:	d117      	bne.n	18e42 <__gedf2+0x76>
   18e12:	465f      	mov	r7, fp
   18e14:	433a      	orrs	r2, r7
   18e16:	d114      	bne.n	18e42 <__gedf2+0x76>
   18e18:	464b      	mov	r3, r9
   18e1a:	2000      	movs	r0, #0
   18e1c:	2b00      	cmp	r3, #0
   18e1e:	d00a      	beq.n	18e36 <__gedf2+0x6a>
   18e20:	e006      	b.n	18e30 <__gedf2+0x64>
   18e22:	2d00      	cmp	r5, #0
   18e24:	d102      	bne.n	18e2c <__gedf2+0x60>
   18e26:	4658      	mov	r0, fp
   18e28:	4302      	orrs	r2, r0
   18e2a:	d001      	beq.n	18e30 <__gedf2+0x64>
   18e2c:	4299      	cmp	r1, r3
   18e2e:	d018      	beq.n	18e62 <__gedf2+0x96>
   18e30:	4248      	negs	r0, r1
   18e32:	2101      	movs	r1, #1
   18e34:	4308      	orrs	r0, r1
   18e36:	bc3c      	pop	{r2, r3, r4, r5}
   18e38:	4690      	mov	r8, r2
   18e3a:	4699      	mov	r9, r3
   18e3c:	46a2      	mov	sl, r4
   18e3e:	46ab      	mov	fp, r5
   18e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18e42:	2800      	cmp	r0, #0
   18e44:	d0f2      	beq.n	18e2c <__gedf2+0x60>
   18e46:	2001      	movs	r0, #1
   18e48:	3b01      	subs	r3, #1
   18e4a:	4318      	orrs	r0, r3
   18e4c:	e7f3      	b.n	18e36 <__gedf2+0x6a>
   18e4e:	0037      	movs	r7, r6
   18e50:	4307      	orrs	r7, r0
   18e52:	d0d1      	beq.n	18df8 <__gedf2+0x2c>
   18e54:	2002      	movs	r0, #2
   18e56:	4240      	negs	r0, r0
   18e58:	e7ed      	b.n	18e36 <__gedf2+0x6a>
   18e5a:	465f      	mov	r7, fp
   18e5c:	4317      	orrs	r7, r2
   18e5e:	d0ce      	beq.n	18dfe <__gedf2+0x32>
   18e60:	e7f8      	b.n	18e54 <__gedf2+0x88>
   18e62:	42ac      	cmp	r4, r5
   18e64:	dce4      	bgt.n	18e30 <__gedf2+0x64>
   18e66:	da03      	bge.n	18e70 <__gedf2+0xa4>
   18e68:	1e48      	subs	r0, r1, #1
   18e6a:	2101      	movs	r1, #1
   18e6c:	4308      	orrs	r0, r1
   18e6e:	e7e2      	b.n	18e36 <__gedf2+0x6a>
   18e70:	455e      	cmp	r6, fp
   18e72:	d8dd      	bhi.n	18e30 <__gedf2+0x64>
   18e74:	d006      	beq.n	18e84 <__gedf2+0xb8>
   18e76:	2000      	movs	r0, #0
   18e78:	455e      	cmp	r6, fp
   18e7a:	d2dc      	bcs.n	18e36 <__gedf2+0x6a>
   18e7c:	2301      	movs	r3, #1
   18e7e:	1e48      	subs	r0, r1, #1
   18e80:	4318      	orrs	r0, r3
   18e82:	e7d8      	b.n	18e36 <__gedf2+0x6a>
   18e84:	45c4      	cmp	ip, r8
   18e86:	d8d3      	bhi.n	18e30 <__gedf2+0x64>
   18e88:	2000      	movs	r0, #0
   18e8a:	45c4      	cmp	ip, r8
   18e8c:	d3f6      	bcc.n	18e7c <__gedf2+0xb0>
   18e8e:	e7d2      	b.n	18e36 <__gedf2+0x6a>
   18e90:	000007ff 	.word	0x000007ff

00018e94 <__ledf2>:
   18e94:	b5f0      	push	{r4, r5, r6, r7, lr}
   18e96:	464e      	mov	r6, r9
   18e98:	4645      	mov	r5, r8
   18e9a:	46de      	mov	lr, fp
   18e9c:	4657      	mov	r7, sl
   18e9e:	005c      	lsls	r4, r3, #1
   18ea0:	b5e0      	push	{r5, r6, r7, lr}
   18ea2:	031f      	lsls	r7, r3, #12
   18ea4:	0fdb      	lsrs	r3, r3, #31
   18ea6:	4699      	mov	r9, r3
   18ea8:	4b2a      	ldr	r3, [pc, #168]	; (18f54 <__ledf2+0xc0>)
   18eaa:	030e      	lsls	r6, r1, #12
   18eac:	004d      	lsls	r5, r1, #1
   18eae:	0fc9      	lsrs	r1, r1, #31
   18eb0:	4684      	mov	ip, r0
   18eb2:	0b36      	lsrs	r6, r6, #12
   18eb4:	0d6d      	lsrs	r5, r5, #21
   18eb6:	468b      	mov	fp, r1
   18eb8:	4690      	mov	r8, r2
   18eba:	0b3f      	lsrs	r7, r7, #12
   18ebc:	0d64      	lsrs	r4, r4, #21
   18ebe:	429d      	cmp	r5, r3
   18ec0:	d020      	beq.n	18f04 <__ledf2+0x70>
   18ec2:	4b24      	ldr	r3, [pc, #144]	; (18f54 <__ledf2+0xc0>)
   18ec4:	429c      	cmp	r4, r3
   18ec6:	d022      	beq.n	18f0e <__ledf2+0x7a>
   18ec8:	2d00      	cmp	r5, #0
   18eca:	d112      	bne.n	18ef2 <__ledf2+0x5e>
   18ecc:	4330      	orrs	r0, r6
   18ece:	4243      	negs	r3, r0
   18ed0:	4143      	adcs	r3, r0
   18ed2:	b2db      	uxtb	r3, r3
   18ed4:	2c00      	cmp	r4, #0
   18ed6:	d01f      	beq.n	18f18 <__ledf2+0x84>
   18ed8:	2b00      	cmp	r3, #0
   18eda:	d00c      	beq.n	18ef6 <__ledf2+0x62>
   18edc:	464b      	mov	r3, r9
   18ede:	2001      	movs	r0, #1
   18ee0:	3b01      	subs	r3, #1
   18ee2:	4303      	orrs	r3, r0
   18ee4:	0018      	movs	r0, r3
   18ee6:	bc3c      	pop	{r2, r3, r4, r5}
   18ee8:	4690      	mov	r8, r2
   18eea:	4699      	mov	r9, r3
   18eec:	46a2      	mov	sl, r4
   18eee:	46ab      	mov	fp, r5
   18ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18ef2:	2c00      	cmp	r4, #0
   18ef4:	d016      	beq.n	18f24 <__ledf2+0x90>
   18ef6:	45cb      	cmp	fp, r9
   18ef8:	d017      	beq.n	18f2a <__ledf2+0x96>
   18efa:	465b      	mov	r3, fp
   18efc:	4259      	negs	r1, r3
   18efe:	2301      	movs	r3, #1
   18f00:	430b      	orrs	r3, r1
   18f02:	e7ef      	b.n	18ee4 <__ledf2+0x50>
   18f04:	0031      	movs	r1, r6
   18f06:	2302      	movs	r3, #2
   18f08:	4301      	orrs	r1, r0
   18f0a:	d1eb      	bne.n	18ee4 <__ledf2+0x50>
   18f0c:	e7d9      	b.n	18ec2 <__ledf2+0x2e>
   18f0e:	0039      	movs	r1, r7
   18f10:	2302      	movs	r3, #2
   18f12:	4311      	orrs	r1, r2
   18f14:	d1e6      	bne.n	18ee4 <__ledf2+0x50>
   18f16:	e7d7      	b.n	18ec8 <__ledf2+0x34>
   18f18:	433a      	orrs	r2, r7
   18f1a:	d1dd      	bne.n	18ed8 <__ledf2+0x44>
   18f1c:	2300      	movs	r3, #0
   18f1e:	2800      	cmp	r0, #0
   18f20:	d0e0      	beq.n	18ee4 <__ledf2+0x50>
   18f22:	e7ea      	b.n	18efa <__ledf2+0x66>
   18f24:	433a      	orrs	r2, r7
   18f26:	d1e6      	bne.n	18ef6 <__ledf2+0x62>
   18f28:	e7e7      	b.n	18efa <__ledf2+0x66>
   18f2a:	42a5      	cmp	r5, r4
   18f2c:	dce5      	bgt.n	18efa <__ledf2+0x66>
   18f2e:	db05      	blt.n	18f3c <__ledf2+0xa8>
   18f30:	42be      	cmp	r6, r7
   18f32:	d8e2      	bhi.n	18efa <__ledf2+0x66>
   18f34:	d007      	beq.n	18f46 <__ledf2+0xb2>
   18f36:	2300      	movs	r3, #0
   18f38:	42be      	cmp	r6, r7
   18f3a:	d2d3      	bcs.n	18ee4 <__ledf2+0x50>
   18f3c:	4659      	mov	r1, fp
   18f3e:	2301      	movs	r3, #1
   18f40:	3901      	subs	r1, #1
   18f42:	430b      	orrs	r3, r1
   18f44:	e7ce      	b.n	18ee4 <__ledf2+0x50>
   18f46:	45c4      	cmp	ip, r8
   18f48:	d8d7      	bhi.n	18efa <__ledf2+0x66>
   18f4a:	2300      	movs	r3, #0
   18f4c:	45c4      	cmp	ip, r8
   18f4e:	d3f5      	bcc.n	18f3c <__ledf2+0xa8>
   18f50:	e7c8      	b.n	18ee4 <__ledf2+0x50>
   18f52:	46c0      	nop			; (mov r8, r8)
   18f54:	000007ff 	.word	0x000007ff

00018f58 <atoi>:
   18f58:	b510      	push	{r4, lr}
   18f5a:	220a      	movs	r2, #10
   18f5c:	2100      	movs	r1, #0
   18f5e:	f000 fc1f 	bl	197a0 <strtol>
   18f62:	bd10      	pop	{r4, pc}

00018f64 <__libc_init_array>:
   18f64:	b570      	push	{r4, r5, r6, lr}
   18f66:	2600      	movs	r6, #0
   18f68:	4d0c      	ldr	r5, [pc, #48]	; (18f9c <__libc_init_array+0x38>)
   18f6a:	4c0d      	ldr	r4, [pc, #52]	; (18fa0 <__libc_init_array+0x3c>)
   18f6c:	1b64      	subs	r4, r4, r5
   18f6e:	10a4      	asrs	r4, r4, #2
   18f70:	42a6      	cmp	r6, r4
   18f72:	d109      	bne.n	18f88 <__libc_init_array+0x24>
   18f74:	2600      	movs	r6, #0
   18f76:	f004 ff91 	bl	1de9c <_init>
   18f7a:	4d0a      	ldr	r5, [pc, #40]	; (18fa4 <__libc_init_array+0x40>)
   18f7c:	4c0a      	ldr	r4, [pc, #40]	; (18fa8 <__libc_init_array+0x44>)
   18f7e:	1b64      	subs	r4, r4, r5
   18f80:	10a4      	asrs	r4, r4, #2
   18f82:	42a6      	cmp	r6, r4
   18f84:	d105      	bne.n	18f92 <__libc_init_array+0x2e>
   18f86:	bd70      	pop	{r4, r5, r6, pc}
   18f88:	00b3      	lsls	r3, r6, #2
   18f8a:	58eb      	ldr	r3, [r5, r3]
   18f8c:	4798      	blx	r3
   18f8e:	3601      	adds	r6, #1
   18f90:	e7ee      	b.n	18f70 <__libc_init_array+0xc>
   18f92:	00b3      	lsls	r3, r6, #2
   18f94:	58eb      	ldr	r3, [r5, r3]
   18f96:	4798      	blx	r3
   18f98:	3601      	adds	r6, #1
   18f9a:	e7f2      	b.n	18f82 <__libc_init_array+0x1e>
   18f9c:	0001dea8 	.word	0x0001dea8
   18fa0:	0001dea8 	.word	0x0001dea8
   18fa4:	0001dea8 	.word	0x0001dea8
   18fa8:	0001deac 	.word	0x0001deac

00018fac <malloc>:
   18fac:	b510      	push	{r4, lr}
   18fae:	4b03      	ldr	r3, [pc, #12]	; (18fbc <malloc+0x10>)
   18fb0:	0001      	movs	r1, r0
   18fb2:	6818      	ldr	r0, [r3, #0]
   18fb4:	f000 f87c 	bl	190b0 <_malloc_r>
   18fb8:	bd10      	pop	{r4, pc}
   18fba:	46c0      	nop			; (mov r8, r8)
   18fbc:	20000180 	.word	0x20000180

00018fc0 <free>:
   18fc0:	b510      	push	{r4, lr}
   18fc2:	4b03      	ldr	r3, [pc, #12]	; (18fd0 <free+0x10>)
   18fc4:	0001      	movs	r1, r0
   18fc6:	6818      	ldr	r0, [r3, #0]
   18fc8:	f000 f828 	bl	1901c <_free_r>
   18fcc:	bd10      	pop	{r4, pc}
   18fce:	46c0      	nop			; (mov r8, r8)
   18fd0:	20000180 	.word	0x20000180

00018fd4 <memcpy>:
   18fd4:	2300      	movs	r3, #0
   18fd6:	b510      	push	{r4, lr}
   18fd8:	429a      	cmp	r2, r3
   18fda:	d100      	bne.n	18fde <memcpy+0xa>
   18fdc:	bd10      	pop	{r4, pc}
   18fde:	5ccc      	ldrb	r4, [r1, r3]
   18fe0:	54c4      	strb	r4, [r0, r3]
   18fe2:	3301      	adds	r3, #1
   18fe4:	e7f8      	b.n	18fd8 <memcpy+0x4>

00018fe6 <memmove>:
   18fe6:	b510      	push	{r4, lr}
   18fe8:	4288      	cmp	r0, r1
   18fea:	d902      	bls.n	18ff2 <memmove+0xc>
   18fec:	188b      	adds	r3, r1, r2
   18fee:	4298      	cmp	r0, r3
   18ff0:	d308      	bcc.n	19004 <memmove+0x1e>
   18ff2:	2300      	movs	r3, #0
   18ff4:	429a      	cmp	r2, r3
   18ff6:	d007      	beq.n	19008 <memmove+0x22>
   18ff8:	5ccc      	ldrb	r4, [r1, r3]
   18ffa:	54c4      	strb	r4, [r0, r3]
   18ffc:	3301      	adds	r3, #1
   18ffe:	e7f9      	b.n	18ff4 <memmove+0xe>
   19000:	5c8b      	ldrb	r3, [r1, r2]
   19002:	5483      	strb	r3, [r0, r2]
   19004:	3a01      	subs	r2, #1
   19006:	d2fb      	bcs.n	19000 <memmove+0x1a>
   19008:	bd10      	pop	{r4, pc}

0001900a <memset>:
   1900a:	0003      	movs	r3, r0
   1900c:	1882      	adds	r2, r0, r2
   1900e:	4293      	cmp	r3, r2
   19010:	d100      	bne.n	19014 <memset+0xa>
   19012:	4770      	bx	lr
   19014:	7019      	strb	r1, [r3, #0]
   19016:	3301      	adds	r3, #1
   19018:	e7f9      	b.n	1900e <memset+0x4>
	...

0001901c <_free_r>:
   1901c:	b570      	push	{r4, r5, r6, lr}
   1901e:	0005      	movs	r5, r0
   19020:	2900      	cmp	r1, #0
   19022:	d010      	beq.n	19046 <_free_r+0x2a>
   19024:	1f0c      	subs	r4, r1, #4
   19026:	6823      	ldr	r3, [r4, #0]
   19028:	2b00      	cmp	r3, #0
   1902a:	da00      	bge.n	1902e <_free_r+0x12>
   1902c:	18e4      	adds	r4, r4, r3
   1902e:	0028      	movs	r0, r5
   19030:	f000 fee2 	bl	19df8 <__malloc_lock>
   19034:	4a1d      	ldr	r2, [pc, #116]	; (190ac <_free_r+0x90>)
   19036:	6813      	ldr	r3, [r2, #0]
   19038:	2b00      	cmp	r3, #0
   1903a:	d105      	bne.n	19048 <_free_r+0x2c>
   1903c:	6063      	str	r3, [r4, #4]
   1903e:	6014      	str	r4, [r2, #0]
   19040:	0028      	movs	r0, r5
   19042:	f000 feda 	bl	19dfa <__malloc_unlock>
   19046:	bd70      	pop	{r4, r5, r6, pc}
   19048:	42a3      	cmp	r3, r4
   1904a:	d909      	bls.n	19060 <_free_r+0x44>
   1904c:	6821      	ldr	r1, [r4, #0]
   1904e:	1860      	adds	r0, r4, r1
   19050:	4283      	cmp	r3, r0
   19052:	d1f3      	bne.n	1903c <_free_r+0x20>
   19054:	6818      	ldr	r0, [r3, #0]
   19056:	685b      	ldr	r3, [r3, #4]
   19058:	1841      	adds	r1, r0, r1
   1905a:	6021      	str	r1, [r4, #0]
   1905c:	e7ee      	b.n	1903c <_free_r+0x20>
   1905e:	0013      	movs	r3, r2
   19060:	685a      	ldr	r2, [r3, #4]
   19062:	2a00      	cmp	r2, #0
   19064:	d001      	beq.n	1906a <_free_r+0x4e>
   19066:	42a2      	cmp	r2, r4
   19068:	d9f9      	bls.n	1905e <_free_r+0x42>
   1906a:	6819      	ldr	r1, [r3, #0]
   1906c:	1858      	adds	r0, r3, r1
   1906e:	42a0      	cmp	r0, r4
   19070:	d10b      	bne.n	1908a <_free_r+0x6e>
   19072:	6820      	ldr	r0, [r4, #0]
   19074:	1809      	adds	r1, r1, r0
   19076:	1858      	adds	r0, r3, r1
   19078:	6019      	str	r1, [r3, #0]
   1907a:	4282      	cmp	r2, r0
   1907c:	d1e0      	bne.n	19040 <_free_r+0x24>
   1907e:	6810      	ldr	r0, [r2, #0]
   19080:	6852      	ldr	r2, [r2, #4]
   19082:	1841      	adds	r1, r0, r1
   19084:	6019      	str	r1, [r3, #0]
   19086:	605a      	str	r2, [r3, #4]
   19088:	e7da      	b.n	19040 <_free_r+0x24>
   1908a:	42a0      	cmp	r0, r4
   1908c:	d902      	bls.n	19094 <_free_r+0x78>
   1908e:	230c      	movs	r3, #12
   19090:	602b      	str	r3, [r5, #0]
   19092:	e7d5      	b.n	19040 <_free_r+0x24>
   19094:	6821      	ldr	r1, [r4, #0]
   19096:	1860      	adds	r0, r4, r1
   19098:	4282      	cmp	r2, r0
   1909a:	d103      	bne.n	190a4 <_free_r+0x88>
   1909c:	6810      	ldr	r0, [r2, #0]
   1909e:	6852      	ldr	r2, [r2, #4]
   190a0:	1841      	adds	r1, r0, r1
   190a2:	6021      	str	r1, [r4, #0]
   190a4:	6062      	str	r2, [r4, #4]
   190a6:	605c      	str	r4, [r3, #4]
   190a8:	e7ca      	b.n	19040 <_free_r+0x24>
   190aa:	46c0      	nop			; (mov r8, r8)
   190ac:	20001090 	.word	0x20001090

000190b0 <_malloc_r>:
   190b0:	2303      	movs	r3, #3
   190b2:	b570      	push	{r4, r5, r6, lr}
   190b4:	1ccd      	adds	r5, r1, #3
   190b6:	439d      	bics	r5, r3
   190b8:	3508      	adds	r5, #8
   190ba:	0006      	movs	r6, r0
   190bc:	2d0c      	cmp	r5, #12
   190be:	d21e      	bcs.n	190fe <_malloc_r+0x4e>
   190c0:	250c      	movs	r5, #12
   190c2:	42a9      	cmp	r1, r5
   190c4:	d81d      	bhi.n	19102 <_malloc_r+0x52>
   190c6:	0030      	movs	r0, r6
   190c8:	f000 fe96 	bl	19df8 <__malloc_lock>
   190cc:	4a25      	ldr	r2, [pc, #148]	; (19164 <_malloc_r+0xb4>)
   190ce:	6814      	ldr	r4, [r2, #0]
   190d0:	0021      	movs	r1, r4
   190d2:	2900      	cmp	r1, #0
   190d4:	d119      	bne.n	1910a <_malloc_r+0x5a>
   190d6:	4c24      	ldr	r4, [pc, #144]	; (19168 <_malloc_r+0xb8>)
   190d8:	6823      	ldr	r3, [r4, #0]
   190da:	2b00      	cmp	r3, #0
   190dc:	d103      	bne.n	190e6 <_malloc_r+0x36>
   190de:	0030      	movs	r0, r6
   190e0:	f000 f90c 	bl	192fc <_sbrk_r>
   190e4:	6020      	str	r0, [r4, #0]
   190e6:	0029      	movs	r1, r5
   190e8:	0030      	movs	r0, r6
   190ea:	f000 f907 	bl	192fc <_sbrk_r>
   190ee:	1c43      	adds	r3, r0, #1
   190f0:	d12c      	bne.n	1914c <_malloc_r+0x9c>
   190f2:	230c      	movs	r3, #12
   190f4:	0030      	movs	r0, r6
   190f6:	6033      	str	r3, [r6, #0]
   190f8:	f000 fe7f 	bl	19dfa <__malloc_unlock>
   190fc:	e003      	b.n	19106 <_malloc_r+0x56>
   190fe:	2d00      	cmp	r5, #0
   19100:	dadf      	bge.n	190c2 <_malloc_r+0x12>
   19102:	230c      	movs	r3, #12
   19104:	6033      	str	r3, [r6, #0]
   19106:	2000      	movs	r0, #0
   19108:	bd70      	pop	{r4, r5, r6, pc}
   1910a:	680b      	ldr	r3, [r1, #0]
   1910c:	1b5b      	subs	r3, r3, r5
   1910e:	d41a      	bmi.n	19146 <_malloc_r+0x96>
   19110:	2b0b      	cmp	r3, #11
   19112:	d903      	bls.n	1911c <_malloc_r+0x6c>
   19114:	600b      	str	r3, [r1, #0]
   19116:	18cc      	adds	r4, r1, r3
   19118:	6025      	str	r5, [r4, #0]
   1911a:	e003      	b.n	19124 <_malloc_r+0x74>
   1911c:	428c      	cmp	r4, r1
   1911e:	d10e      	bne.n	1913e <_malloc_r+0x8e>
   19120:	6863      	ldr	r3, [r4, #4]
   19122:	6013      	str	r3, [r2, #0]
   19124:	0030      	movs	r0, r6
   19126:	f000 fe68 	bl	19dfa <__malloc_unlock>
   1912a:	0020      	movs	r0, r4
   1912c:	2207      	movs	r2, #7
   1912e:	300b      	adds	r0, #11
   19130:	1d23      	adds	r3, r4, #4
   19132:	4390      	bics	r0, r2
   19134:	1ac3      	subs	r3, r0, r3
   19136:	d0e7      	beq.n	19108 <_malloc_r+0x58>
   19138:	425a      	negs	r2, r3
   1913a:	50e2      	str	r2, [r4, r3]
   1913c:	e7e4      	b.n	19108 <_malloc_r+0x58>
   1913e:	684b      	ldr	r3, [r1, #4]
   19140:	6063      	str	r3, [r4, #4]
   19142:	000c      	movs	r4, r1
   19144:	e7ee      	b.n	19124 <_malloc_r+0x74>
   19146:	000c      	movs	r4, r1
   19148:	6849      	ldr	r1, [r1, #4]
   1914a:	e7c2      	b.n	190d2 <_malloc_r+0x22>
   1914c:	2303      	movs	r3, #3
   1914e:	1cc4      	adds	r4, r0, #3
   19150:	439c      	bics	r4, r3
   19152:	42a0      	cmp	r0, r4
   19154:	d0e0      	beq.n	19118 <_malloc_r+0x68>
   19156:	1a21      	subs	r1, r4, r0
   19158:	0030      	movs	r0, r6
   1915a:	f000 f8cf 	bl	192fc <_sbrk_r>
   1915e:	1c43      	adds	r3, r0, #1
   19160:	d1da      	bne.n	19118 <_malloc_r+0x68>
   19162:	e7c6      	b.n	190f2 <_malloc_r+0x42>
   19164:	20001090 	.word	0x20001090
   19168:	20001094 	.word	0x20001094

0001916c <iprintf>:
   1916c:	b40f      	push	{r0, r1, r2, r3}
   1916e:	4b0b      	ldr	r3, [pc, #44]	; (1919c <iprintf+0x30>)
   19170:	b513      	push	{r0, r1, r4, lr}
   19172:	681c      	ldr	r4, [r3, #0]
   19174:	2c00      	cmp	r4, #0
   19176:	d005      	beq.n	19184 <iprintf+0x18>
   19178:	69a3      	ldr	r3, [r4, #24]
   1917a:	2b00      	cmp	r3, #0
   1917c:	d102      	bne.n	19184 <iprintf+0x18>
   1917e:	0020      	movs	r0, r4
   19180:	f000 fcfa 	bl	19b78 <__sinit>
   19184:	ab05      	add	r3, sp, #20
   19186:	9a04      	ldr	r2, [sp, #16]
   19188:	68a1      	ldr	r1, [r4, #8]
   1918a:	0020      	movs	r0, r4
   1918c:	9301      	str	r3, [sp, #4]
   1918e:	f000 ffc3 	bl	1a118 <_vfiprintf_r>
   19192:	bc16      	pop	{r1, r2, r4}
   19194:	bc08      	pop	{r3}
   19196:	b004      	add	sp, #16
   19198:	4718      	bx	r3
   1919a:	46c0      	nop			; (mov r8, r8)
   1919c:	20000180 	.word	0x20000180

000191a0 <putchar>:
   191a0:	4b08      	ldr	r3, [pc, #32]	; (191c4 <putchar+0x24>)
   191a2:	b570      	push	{r4, r5, r6, lr}
   191a4:	681c      	ldr	r4, [r3, #0]
   191a6:	0005      	movs	r5, r0
   191a8:	2c00      	cmp	r4, #0
   191aa:	d005      	beq.n	191b8 <putchar+0x18>
   191ac:	69a3      	ldr	r3, [r4, #24]
   191ae:	2b00      	cmp	r3, #0
   191b0:	d102      	bne.n	191b8 <putchar+0x18>
   191b2:	0020      	movs	r0, r4
   191b4:	f000 fce0 	bl	19b78 <__sinit>
   191b8:	0029      	movs	r1, r5
   191ba:	68a2      	ldr	r2, [r4, #8]
   191bc:	0020      	movs	r0, r4
   191be:	f001 fd61 	bl	1ac84 <_putc_r>
   191c2:	bd70      	pop	{r4, r5, r6, pc}
   191c4:	20000180 	.word	0x20000180

000191c8 <_puts_r>:
   191c8:	b570      	push	{r4, r5, r6, lr}
   191ca:	0005      	movs	r5, r0
   191cc:	000e      	movs	r6, r1
   191ce:	2800      	cmp	r0, #0
   191d0:	d004      	beq.n	191dc <_puts_r+0x14>
   191d2:	6983      	ldr	r3, [r0, #24]
   191d4:	2b00      	cmp	r3, #0
   191d6:	d101      	bne.n	191dc <_puts_r+0x14>
   191d8:	f000 fcce 	bl	19b78 <__sinit>
   191dc:	69ab      	ldr	r3, [r5, #24]
   191de:	68ac      	ldr	r4, [r5, #8]
   191e0:	2b00      	cmp	r3, #0
   191e2:	d102      	bne.n	191ea <_puts_r+0x22>
   191e4:	0028      	movs	r0, r5
   191e6:	f000 fcc7 	bl	19b78 <__sinit>
   191ea:	4b24      	ldr	r3, [pc, #144]	; (1927c <_puts_r+0xb4>)
   191ec:	429c      	cmp	r4, r3
   191ee:	d10f      	bne.n	19210 <_puts_r+0x48>
   191f0:	686c      	ldr	r4, [r5, #4]
   191f2:	89a3      	ldrh	r3, [r4, #12]
   191f4:	071b      	lsls	r3, r3, #28
   191f6:	d502      	bpl.n	191fe <_puts_r+0x36>
   191f8:	6923      	ldr	r3, [r4, #16]
   191fa:	2b00      	cmp	r3, #0
   191fc:	d120      	bne.n	19240 <_puts_r+0x78>
   191fe:	0021      	movs	r1, r4
   19200:	0028      	movs	r0, r5
   19202:	f000 fb37 	bl	19874 <__swsetup_r>
   19206:	2800      	cmp	r0, #0
   19208:	d01a      	beq.n	19240 <_puts_r+0x78>
   1920a:	2001      	movs	r0, #1
   1920c:	4240      	negs	r0, r0
   1920e:	bd70      	pop	{r4, r5, r6, pc}
   19210:	4b1b      	ldr	r3, [pc, #108]	; (19280 <_puts_r+0xb8>)
   19212:	429c      	cmp	r4, r3
   19214:	d101      	bne.n	1921a <_puts_r+0x52>
   19216:	68ac      	ldr	r4, [r5, #8]
   19218:	e7eb      	b.n	191f2 <_puts_r+0x2a>
   1921a:	4b1a      	ldr	r3, [pc, #104]	; (19284 <_puts_r+0xbc>)
   1921c:	429c      	cmp	r4, r3
   1921e:	d1e8      	bne.n	191f2 <_puts_r+0x2a>
   19220:	68ec      	ldr	r4, [r5, #12]
   19222:	e7e6      	b.n	191f2 <_puts_r+0x2a>
   19224:	3b01      	subs	r3, #1
   19226:	3601      	adds	r6, #1
   19228:	60a3      	str	r3, [r4, #8]
   1922a:	2b00      	cmp	r3, #0
   1922c:	da04      	bge.n	19238 <_puts_r+0x70>
   1922e:	69a2      	ldr	r2, [r4, #24]
   19230:	4293      	cmp	r3, r2
   19232:	db16      	blt.n	19262 <_puts_r+0x9a>
   19234:	290a      	cmp	r1, #10
   19236:	d014      	beq.n	19262 <_puts_r+0x9a>
   19238:	6823      	ldr	r3, [r4, #0]
   1923a:	1c5a      	adds	r2, r3, #1
   1923c:	6022      	str	r2, [r4, #0]
   1923e:	7019      	strb	r1, [r3, #0]
   19240:	7831      	ldrb	r1, [r6, #0]
   19242:	68a3      	ldr	r3, [r4, #8]
   19244:	2900      	cmp	r1, #0
   19246:	d1ed      	bne.n	19224 <_puts_r+0x5c>
   19248:	3b01      	subs	r3, #1
   1924a:	60a3      	str	r3, [r4, #8]
   1924c:	2b00      	cmp	r3, #0
   1924e:	da0f      	bge.n	19270 <_puts_r+0xa8>
   19250:	0022      	movs	r2, r4
   19252:	310a      	adds	r1, #10
   19254:	0028      	movs	r0, r5
   19256:	f000 fab7 	bl	197c8 <__swbuf_r>
   1925a:	1c43      	adds	r3, r0, #1
   1925c:	d0d5      	beq.n	1920a <_puts_r+0x42>
   1925e:	200a      	movs	r0, #10
   19260:	e7d5      	b.n	1920e <_puts_r+0x46>
   19262:	0022      	movs	r2, r4
   19264:	0028      	movs	r0, r5
   19266:	f000 faaf 	bl	197c8 <__swbuf_r>
   1926a:	1c43      	adds	r3, r0, #1
   1926c:	d1e8      	bne.n	19240 <_puts_r+0x78>
   1926e:	e7cc      	b.n	1920a <_puts_r+0x42>
   19270:	200a      	movs	r0, #10
   19272:	6823      	ldr	r3, [r4, #0]
   19274:	1c5a      	adds	r2, r3, #1
   19276:	6022      	str	r2, [r4, #0]
   19278:	7018      	strb	r0, [r3, #0]
   1927a:	e7c8      	b.n	1920e <_puts_r+0x46>
   1927c:	0001dcf4 	.word	0x0001dcf4
   19280:	0001dd14 	.word	0x0001dd14
   19284:	0001dcd4 	.word	0x0001dcd4

00019288 <puts>:
   19288:	b510      	push	{r4, lr}
   1928a:	4b03      	ldr	r3, [pc, #12]	; (19298 <puts+0x10>)
   1928c:	0001      	movs	r1, r0
   1928e:	6818      	ldr	r0, [r3, #0]
   19290:	f7ff ff9a 	bl	191c8 <_puts_r>
   19294:	bd10      	pop	{r4, pc}
   19296:	46c0      	nop			; (mov r8, r8)
   19298:	20000180 	.word	0x20000180

0001929c <__srget_r>:
   1929c:	b570      	push	{r4, r5, r6, lr}
   1929e:	0005      	movs	r5, r0
   192a0:	000c      	movs	r4, r1
   192a2:	2800      	cmp	r0, #0
   192a4:	d004      	beq.n	192b0 <__srget_r+0x14>
   192a6:	6983      	ldr	r3, [r0, #24]
   192a8:	2b00      	cmp	r3, #0
   192aa:	d101      	bne.n	192b0 <__srget_r+0x14>
   192ac:	f000 fc64 	bl	19b78 <__sinit>
   192b0:	4b0f      	ldr	r3, [pc, #60]	; (192f0 <__srget_r+0x54>)
   192b2:	429c      	cmp	r4, r3
   192b4:	d10e      	bne.n	192d4 <__srget_r+0x38>
   192b6:	686c      	ldr	r4, [r5, #4]
   192b8:	0021      	movs	r1, r4
   192ba:	0028      	movs	r0, r5
   192bc:	f001 fd24 	bl	1ad08 <__srefill_r>
   192c0:	2800      	cmp	r0, #0
   192c2:	d111      	bne.n	192e8 <__srget_r+0x4c>
   192c4:	6863      	ldr	r3, [r4, #4]
   192c6:	3b01      	subs	r3, #1
   192c8:	6063      	str	r3, [r4, #4]
   192ca:	6823      	ldr	r3, [r4, #0]
   192cc:	1c5a      	adds	r2, r3, #1
   192ce:	6022      	str	r2, [r4, #0]
   192d0:	7818      	ldrb	r0, [r3, #0]
   192d2:	bd70      	pop	{r4, r5, r6, pc}
   192d4:	4b07      	ldr	r3, [pc, #28]	; (192f4 <__srget_r+0x58>)
   192d6:	429c      	cmp	r4, r3
   192d8:	d101      	bne.n	192de <__srget_r+0x42>
   192da:	68ac      	ldr	r4, [r5, #8]
   192dc:	e7ec      	b.n	192b8 <__srget_r+0x1c>
   192de:	4b06      	ldr	r3, [pc, #24]	; (192f8 <__srget_r+0x5c>)
   192e0:	429c      	cmp	r4, r3
   192e2:	d1e9      	bne.n	192b8 <__srget_r+0x1c>
   192e4:	68ec      	ldr	r4, [r5, #12]
   192e6:	e7e7      	b.n	192b8 <__srget_r+0x1c>
   192e8:	2001      	movs	r0, #1
   192ea:	4240      	negs	r0, r0
   192ec:	e7f1      	b.n	192d2 <__srget_r+0x36>
   192ee:	46c0      	nop			; (mov r8, r8)
   192f0:	0001dcf4 	.word	0x0001dcf4
   192f4:	0001dd14 	.word	0x0001dd14
   192f8:	0001dcd4 	.word	0x0001dcd4

000192fc <_sbrk_r>:
   192fc:	2300      	movs	r3, #0
   192fe:	b570      	push	{r4, r5, r6, lr}
   19300:	4c06      	ldr	r4, [pc, #24]	; (1931c <_sbrk_r+0x20>)
   19302:	0005      	movs	r5, r0
   19304:	0008      	movs	r0, r1
   19306:	6023      	str	r3, [r4, #0]
   19308:	f7f7 fff0 	bl	112ec <_sbrk>
   1930c:	1c43      	adds	r3, r0, #1
   1930e:	d103      	bne.n	19318 <_sbrk_r+0x1c>
   19310:	6823      	ldr	r3, [r4, #0]
   19312:	2b00      	cmp	r3, #0
   19314:	d000      	beq.n	19318 <_sbrk_r+0x1c>
   19316:	602b      	str	r3, [r5, #0]
   19318:	bd70      	pop	{r4, r5, r6, pc}
   1931a:	46c0      	nop			; (mov r8, r8)
   1931c:	200014ac 	.word	0x200014ac

00019320 <iscanf>:
   19320:	b40f      	push	{r0, r1, r2, r3}
   19322:	4b0b      	ldr	r3, [pc, #44]	; (19350 <iscanf+0x30>)
   19324:	b513      	push	{r0, r1, r4, lr}
   19326:	681c      	ldr	r4, [r3, #0]
   19328:	2c00      	cmp	r4, #0
   1932a:	d005      	beq.n	19338 <iscanf+0x18>
   1932c:	69a3      	ldr	r3, [r4, #24]
   1932e:	2b00      	cmp	r3, #0
   19330:	d102      	bne.n	19338 <iscanf+0x18>
   19332:	0020      	movs	r0, r4
   19334:	f000 fc20 	bl	19b78 <__sinit>
   19338:	ab05      	add	r3, sp, #20
   1933a:	9a04      	ldr	r2, [sp, #16]
   1933c:	6861      	ldr	r1, [r4, #4]
   1933e:	0020      	movs	r0, r4
   19340:	9301      	str	r3, [sp, #4]
   19342:	f001 fb13 	bl	1a96c <_vfiscanf_r>
   19346:	bc16      	pop	{r1, r2, r4}
   19348:	bc08      	pop	{r3}
   1934a:	b004      	add	sp, #16
   1934c:	4718      	bx	r3
   1934e:	46c0      	nop			; (mov r8, r8)
   19350:	20000180 	.word	0x20000180

00019354 <setbuf>:
   19354:	424a      	negs	r2, r1
   19356:	414a      	adcs	r2, r1
   19358:	2380      	movs	r3, #128	; 0x80
   1935a:	b510      	push	{r4, lr}
   1935c:	0052      	lsls	r2, r2, #1
   1935e:	00db      	lsls	r3, r3, #3
   19360:	f000 f802 	bl	19368 <setvbuf>
   19364:	bd10      	pop	{r4, pc}
	...

00019368 <setvbuf>:
   19368:	b5f0      	push	{r4, r5, r6, r7, lr}
   1936a:	001d      	movs	r5, r3
   1936c:	4b4f      	ldr	r3, [pc, #316]	; (194ac <setvbuf+0x144>)
   1936e:	b085      	sub	sp, #20
   19370:	681e      	ldr	r6, [r3, #0]
   19372:	0004      	movs	r4, r0
   19374:	000f      	movs	r7, r1
   19376:	9200      	str	r2, [sp, #0]
   19378:	2e00      	cmp	r6, #0
   1937a:	d005      	beq.n	19388 <setvbuf+0x20>
   1937c:	69b3      	ldr	r3, [r6, #24]
   1937e:	2b00      	cmp	r3, #0
   19380:	d102      	bne.n	19388 <setvbuf+0x20>
   19382:	0030      	movs	r0, r6
   19384:	f000 fbf8 	bl	19b78 <__sinit>
   19388:	4b49      	ldr	r3, [pc, #292]	; (194b0 <setvbuf+0x148>)
   1938a:	429c      	cmp	r4, r3
   1938c:	d150      	bne.n	19430 <setvbuf+0xc8>
   1938e:	6874      	ldr	r4, [r6, #4]
   19390:	9b00      	ldr	r3, [sp, #0]
   19392:	2b02      	cmp	r3, #2
   19394:	d005      	beq.n	193a2 <setvbuf+0x3a>
   19396:	2b01      	cmp	r3, #1
   19398:	d900      	bls.n	1939c <setvbuf+0x34>
   1939a:	e084      	b.n	194a6 <setvbuf+0x13e>
   1939c:	2d00      	cmp	r5, #0
   1939e:	da00      	bge.n	193a2 <setvbuf+0x3a>
   193a0:	e081      	b.n	194a6 <setvbuf+0x13e>
   193a2:	0021      	movs	r1, r4
   193a4:	0030      	movs	r0, r6
   193a6:	f000 fb65 	bl	19a74 <_fflush_r>
   193aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   193ac:	2900      	cmp	r1, #0
   193ae:	d008      	beq.n	193c2 <setvbuf+0x5a>
   193b0:	0023      	movs	r3, r4
   193b2:	3344      	adds	r3, #68	; 0x44
   193b4:	4299      	cmp	r1, r3
   193b6:	d002      	beq.n	193be <setvbuf+0x56>
   193b8:	0030      	movs	r0, r6
   193ba:	f7ff fe2f 	bl	1901c <_free_r>
   193be:	2300      	movs	r3, #0
   193c0:	6363      	str	r3, [r4, #52]	; 0x34
   193c2:	2300      	movs	r3, #0
   193c4:	61a3      	str	r3, [r4, #24]
   193c6:	6063      	str	r3, [r4, #4]
   193c8:	89a3      	ldrh	r3, [r4, #12]
   193ca:	061b      	lsls	r3, r3, #24
   193cc:	d503      	bpl.n	193d6 <setvbuf+0x6e>
   193ce:	6921      	ldr	r1, [r4, #16]
   193d0:	0030      	movs	r0, r6
   193d2:	f7ff fe23 	bl	1901c <_free_r>
   193d6:	89a3      	ldrh	r3, [r4, #12]
   193d8:	4a36      	ldr	r2, [pc, #216]	; (194b4 <setvbuf+0x14c>)
   193da:	4013      	ands	r3, r2
   193dc:	81a3      	strh	r3, [r4, #12]
   193de:	9b00      	ldr	r3, [sp, #0]
   193e0:	2b02      	cmp	r3, #2
   193e2:	d05a      	beq.n	1949a <setvbuf+0x132>
   193e4:	ab03      	add	r3, sp, #12
   193e6:	aa02      	add	r2, sp, #8
   193e8:	0021      	movs	r1, r4
   193ea:	0030      	movs	r0, r6
   193ec:	f000 fc86 	bl	19cfc <__swhatbuf_r>
   193f0:	89a3      	ldrh	r3, [r4, #12]
   193f2:	4318      	orrs	r0, r3
   193f4:	81a0      	strh	r0, [r4, #12]
   193f6:	2d00      	cmp	r5, #0
   193f8:	d124      	bne.n	19444 <setvbuf+0xdc>
   193fa:	9d02      	ldr	r5, [sp, #8]
   193fc:	0028      	movs	r0, r5
   193fe:	f7ff fdd5 	bl	18fac <malloc>
   19402:	9501      	str	r5, [sp, #4]
   19404:	1e07      	subs	r7, r0, #0
   19406:	d142      	bne.n	1948e <setvbuf+0x126>
   19408:	9b02      	ldr	r3, [sp, #8]
   1940a:	9301      	str	r3, [sp, #4]
   1940c:	42ab      	cmp	r3, r5
   1940e:	d139      	bne.n	19484 <setvbuf+0x11c>
   19410:	2001      	movs	r0, #1
   19412:	4240      	negs	r0, r0
   19414:	2302      	movs	r3, #2
   19416:	89a2      	ldrh	r2, [r4, #12]
   19418:	4313      	orrs	r3, r2
   1941a:	81a3      	strh	r3, [r4, #12]
   1941c:	2300      	movs	r3, #0
   1941e:	60a3      	str	r3, [r4, #8]
   19420:	0023      	movs	r3, r4
   19422:	3347      	adds	r3, #71	; 0x47
   19424:	6023      	str	r3, [r4, #0]
   19426:	6123      	str	r3, [r4, #16]
   19428:	2301      	movs	r3, #1
   1942a:	6163      	str	r3, [r4, #20]
   1942c:	b005      	add	sp, #20
   1942e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19430:	4b21      	ldr	r3, [pc, #132]	; (194b8 <setvbuf+0x150>)
   19432:	429c      	cmp	r4, r3
   19434:	d101      	bne.n	1943a <setvbuf+0xd2>
   19436:	68b4      	ldr	r4, [r6, #8]
   19438:	e7aa      	b.n	19390 <setvbuf+0x28>
   1943a:	4b20      	ldr	r3, [pc, #128]	; (194bc <setvbuf+0x154>)
   1943c:	429c      	cmp	r4, r3
   1943e:	d1a7      	bne.n	19390 <setvbuf+0x28>
   19440:	68f4      	ldr	r4, [r6, #12]
   19442:	e7a5      	b.n	19390 <setvbuf+0x28>
   19444:	2f00      	cmp	r7, #0
   19446:	d0d9      	beq.n	193fc <setvbuf+0x94>
   19448:	69b3      	ldr	r3, [r6, #24]
   1944a:	2b00      	cmp	r3, #0
   1944c:	d102      	bne.n	19454 <setvbuf+0xec>
   1944e:	0030      	movs	r0, r6
   19450:	f000 fb92 	bl	19b78 <__sinit>
   19454:	9b00      	ldr	r3, [sp, #0]
   19456:	2b01      	cmp	r3, #1
   19458:	d103      	bne.n	19462 <setvbuf+0xfa>
   1945a:	89a3      	ldrh	r3, [r4, #12]
   1945c:	9a00      	ldr	r2, [sp, #0]
   1945e:	431a      	orrs	r2, r3
   19460:	81a2      	strh	r2, [r4, #12]
   19462:	2008      	movs	r0, #8
   19464:	89a3      	ldrh	r3, [r4, #12]
   19466:	6027      	str	r7, [r4, #0]
   19468:	6127      	str	r7, [r4, #16]
   1946a:	6165      	str	r5, [r4, #20]
   1946c:	4018      	ands	r0, r3
   1946e:	d018      	beq.n	194a2 <setvbuf+0x13a>
   19470:	2001      	movs	r0, #1
   19472:	4018      	ands	r0, r3
   19474:	2300      	movs	r3, #0
   19476:	4298      	cmp	r0, r3
   19478:	d011      	beq.n	1949e <setvbuf+0x136>
   1947a:	426d      	negs	r5, r5
   1947c:	60a3      	str	r3, [r4, #8]
   1947e:	61a5      	str	r5, [r4, #24]
   19480:	0018      	movs	r0, r3
   19482:	e7d3      	b.n	1942c <setvbuf+0xc4>
   19484:	9801      	ldr	r0, [sp, #4]
   19486:	f7ff fd91 	bl	18fac <malloc>
   1948a:	1e07      	subs	r7, r0, #0
   1948c:	d0c0      	beq.n	19410 <setvbuf+0xa8>
   1948e:	2380      	movs	r3, #128	; 0x80
   19490:	89a2      	ldrh	r2, [r4, #12]
   19492:	9d01      	ldr	r5, [sp, #4]
   19494:	4313      	orrs	r3, r2
   19496:	81a3      	strh	r3, [r4, #12]
   19498:	e7d6      	b.n	19448 <setvbuf+0xe0>
   1949a:	2000      	movs	r0, #0
   1949c:	e7ba      	b.n	19414 <setvbuf+0xac>
   1949e:	60a5      	str	r5, [r4, #8]
   194a0:	e7c4      	b.n	1942c <setvbuf+0xc4>
   194a2:	60a0      	str	r0, [r4, #8]
   194a4:	e7c2      	b.n	1942c <setvbuf+0xc4>
   194a6:	2001      	movs	r0, #1
   194a8:	4240      	negs	r0, r0
   194aa:	e7bf      	b.n	1942c <setvbuf+0xc4>
   194ac:	20000180 	.word	0x20000180
   194b0:	0001dcf4 	.word	0x0001dcf4
   194b4:	fffff35c 	.word	0xfffff35c
   194b8:	0001dd14 	.word	0x0001dd14
   194bc:	0001dcd4 	.word	0x0001dcd4

000194c0 <sniprintf>:
   194c0:	b40c      	push	{r2, r3}
   194c2:	b530      	push	{r4, r5, lr}
   194c4:	4b16      	ldr	r3, [pc, #88]	; (19520 <sniprintf+0x60>)
   194c6:	b09d      	sub	sp, #116	; 0x74
   194c8:	1e0c      	subs	r4, r1, #0
   194ca:	681d      	ldr	r5, [r3, #0]
   194cc:	da08      	bge.n	194e0 <sniprintf+0x20>
   194ce:	238b      	movs	r3, #139	; 0x8b
   194d0:	2001      	movs	r0, #1
   194d2:	602b      	str	r3, [r5, #0]
   194d4:	4240      	negs	r0, r0
   194d6:	b01d      	add	sp, #116	; 0x74
   194d8:	bc30      	pop	{r4, r5}
   194da:	bc08      	pop	{r3}
   194dc:	b002      	add	sp, #8
   194de:	4718      	bx	r3
   194e0:	2382      	movs	r3, #130	; 0x82
   194e2:	a902      	add	r1, sp, #8
   194e4:	009b      	lsls	r3, r3, #2
   194e6:	818b      	strh	r3, [r1, #12]
   194e8:	2300      	movs	r3, #0
   194ea:	9002      	str	r0, [sp, #8]
   194ec:	6108      	str	r0, [r1, #16]
   194ee:	429c      	cmp	r4, r3
   194f0:	d000      	beq.n	194f4 <sniprintf+0x34>
   194f2:	1e63      	subs	r3, r4, #1
   194f4:	608b      	str	r3, [r1, #8]
   194f6:	614b      	str	r3, [r1, #20]
   194f8:	2301      	movs	r3, #1
   194fa:	425b      	negs	r3, r3
   194fc:	81cb      	strh	r3, [r1, #14]
   194fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
   19500:	ab21      	add	r3, sp, #132	; 0x84
   19502:	0028      	movs	r0, r5
   19504:	9301      	str	r3, [sp, #4]
   19506:	f000 fcdb 	bl	19ec0 <_svfiprintf_r>
   1950a:	1c43      	adds	r3, r0, #1
   1950c:	da01      	bge.n	19512 <sniprintf+0x52>
   1950e:	238b      	movs	r3, #139	; 0x8b
   19510:	602b      	str	r3, [r5, #0]
   19512:	2c00      	cmp	r4, #0
   19514:	d0df      	beq.n	194d6 <sniprintf+0x16>
   19516:	2300      	movs	r3, #0
   19518:	9a02      	ldr	r2, [sp, #8]
   1951a:	7013      	strb	r3, [r2, #0]
   1951c:	e7db      	b.n	194d6 <sniprintf+0x16>
   1951e:	46c0      	nop			; (mov r8, r8)
   19520:	20000180 	.word	0x20000180

00019524 <siprintf>:
   19524:	b40e      	push	{r1, r2, r3}
   19526:	b510      	push	{r4, lr}
   19528:	b09d      	sub	sp, #116	; 0x74
   1952a:	a902      	add	r1, sp, #8
   1952c:	9002      	str	r0, [sp, #8]
   1952e:	6108      	str	r0, [r1, #16]
   19530:	480b      	ldr	r0, [pc, #44]	; (19560 <siprintf+0x3c>)
   19532:	2482      	movs	r4, #130	; 0x82
   19534:	6088      	str	r0, [r1, #8]
   19536:	6148      	str	r0, [r1, #20]
   19538:	2001      	movs	r0, #1
   1953a:	4240      	negs	r0, r0
   1953c:	ab1f      	add	r3, sp, #124	; 0x7c
   1953e:	81c8      	strh	r0, [r1, #14]
   19540:	4808      	ldr	r0, [pc, #32]	; (19564 <siprintf+0x40>)
   19542:	cb04      	ldmia	r3!, {r2}
   19544:	00a4      	lsls	r4, r4, #2
   19546:	6800      	ldr	r0, [r0, #0]
   19548:	9301      	str	r3, [sp, #4]
   1954a:	818c      	strh	r4, [r1, #12]
   1954c:	f000 fcb8 	bl	19ec0 <_svfiprintf_r>
   19550:	2300      	movs	r3, #0
   19552:	9a02      	ldr	r2, [sp, #8]
   19554:	7013      	strb	r3, [r2, #0]
   19556:	b01d      	add	sp, #116	; 0x74
   19558:	bc10      	pop	{r4}
   1955a:	bc08      	pop	{r3}
   1955c:	b003      	add	sp, #12
   1955e:	4718      	bx	r3
   19560:	7fffffff 	.word	0x7fffffff
   19564:	20000180 	.word	0x20000180

00019568 <strcmp>:
   19568:	7802      	ldrb	r2, [r0, #0]
   1956a:	780b      	ldrb	r3, [r1, #0]
   1956c:	2a00      	cmp	r2, #0
   1956e:	d003      	beq.n	19578 <strcmp+0x10>
   19570:	3001      	adds	r0, #1
   19572:	3101      	adds	r1, #1
   19574:	429a      	cmp	r2, r3
   19576:	d0f7      	beq.n	19568 <strcmp>
   19578:	1ad0      	subs	r0, r2, r3
   1957a:	4770      	bx	lr

0001957c <strcpy>:
   1957c:	1c03      	adds	r3, r0, #0
   1957e:	780a      	ldrb	r2, [r1, #0]
   19580:	3101      	adds	r1, #1
   19582:	701a      	strb	r2, [r3, #0]
   19584:	3301      	adds	r3, #1
   19586:	2a00      	cmp	r2, #0
   19588:	d1f9      	bne.n	1957e <strcpy+0x2>
   1958a:	4770      	bx	lr

0001958c <strdup>:
   1958c:	b510      	push	{r4, lr}
   1958e:	4b03      	ldr	r3, [pc, #12]	; (1959c <strdup+0x10>)
   19590:	0001      	movs	r1, r0
   19592:	6818      	ldr	r0, [r3, #0]
   19594:	f000 f804 	bl	195a0 <_strdup_r>
   19598:	bd10      	pop	{r4, pc}
   1959a:	46c0      	nop			; (mov r8, r8)
   1959c:	20000180 	.word	0x20000180

000195a0 <_strdup_r>:
   195a0:	b570      	push	{r4, r5, r6, lr}
   195a2:	0005      	movs	r5, r0
   195a4:	0008      	movs	r0, r1
   195a6:	000e      	movs	r6, r1
   195a8:	f000 f80d 	bl	195c6 <strlen>
   195ac:	1c44      	adds	r4, r0, #1
   195ae:	0021      	movs	r1, r4
   195b0:	0028      	movs	r0, r5
   195b2:	f7ff fd7d 	bl	190b0 <_malloc_r>
   195b6:	1e05      	subs	r5, r0, #0
   195b8:	d003      	beq.n	195c2 <_strdup_r+0x22>
   195ba:	0022      	movs	r2, r4
   195bc:	0031      	movs	r1, r6
   195be:	f7ff fd09 	bl	18fd4 <memcpy>
   195c2:	0028      	movs	r0, r5
   195c4:	bd70      	pop	{r4, r5, r6, pc}

000195c6 <strlen>:
   195c6:	2300      	movs	r3, #0
   195c8:	5cc2      	ldrb	r2, [r0, r3]
   195ca:	3301      	adds	r3, #1
   195cc:	2a00      	cmp	r2, #0
   195ce:	d1fb      	bne.n	195c8 <strlen+0x2>
   195d0:	1e58      	subs	r0, r3, #1
   195d2:	4770      	bx	lr

000195d4 <strncmp>:
   195d4:	2300      	movs	r3, #0
   195d6:	b530      	push	{r4, r5, lr}
   195d8:	429a      	cmp	r2, r3
   195da:	d00a      	beq.n	195f2 <strncmp+0x1e>
   195dc:	3a01      	subs	r2, #1
   195de:	5cc4      	ldrb	r4, [r0, r3]
   195e0:	5ccd      	ldrb	r5, [r1, r3]
   195e2:	42ac      	cmp	r4, r5
   195e4:	d104      	bne.n	195f0 <strncmp+0x1c>
   195e6:	429a      	cmp	r2, r3
   195e8:	d002      	beq.n	195f0 <strncmp+0x1c>
   195ea:	3301      	adds	r3, #1
   195ec:	2c00      	cmp	r4, #0
   195ee:	d1f6      	bne.n	195de <strncmp+0xa>
   195f0:	1b63      	subs	r3, r4, r5
   195f2:	0018      	movs	r0, r3
   195f4:	bd30      	pop	{r4, r5, pc}

000195f6 <strncpy>:
   195f6:	b570      	push	{r4, r5, r6, lr}
   195f8:	0004      	movs	r4, r0
   195fa:	2a00      	cmp	r2, #0
   195fc:	d100      	bne.n	19600 <strncpy+0xa>
   195fe:	bd70      	pop	{r4, r5, r6, pc}
   19600:	780d      	ldrb	r5, [r1, #0]
   19602:	1e56      	subs	r6, r2, #1
   19604:	1c63      	adds	r3, r4, #1
   19606:	7025      	strb	r5, [r4, #0]
   19608:	3101      	adds	r1, #1
   1960a:	2d00      	cmp	r5, #0
   1960c:	d105      	bne.n	1961a <strncpy+0x24>
   1960e:	18a4      	adds	r4, r4, r2
   19610:	429c      	cmp	r4, r3
   19612:	d0f4      	beq.n	195fe <strncpy+0x8>
   19614:	701d      	strb	r5, [r3, #0]
   19616:	3301      	adds	r3, #1
   19618:	e7fa      	b.n	19610 <strncpy+0x1a>
   1961a:	001c      	movs	r4, r3
   1961c:	0032      	movs	r2, r6
   1961e:	e7ec      	b.n	195fa <strncpy+0x4>

00019620 <strrchr>:
   19620:	b570      	push	{r4, r5, r6, lr}
   19622:	000d      	movs	r5, r1
   19624:	2400      	movs	r4, #0
   19626:	2900      	cmp	r1, #0
   19628:	d105      	bne.n	19636 <strrchr+0x16>
   1962a:	f001 fc7b 	bl	1af24 <strchr>
   1962e:	0004      	movs	r4, r0
   19630:	e006      	b.n	19640 <strrchr+0x20>
   19632:	001c      	movs	r4, r3
   19634:	1c58      	adds	r0, r3, #1
   19636:	0029      	movs	r1, r5
   19638:	f001 fc74 	bl	1af24 <strchr>
   1963c:	1e03      	subs	r3, r0, #0
   1963e:	d1f8      	bne.n	19632 <strrchr+0x12>
   19640:	0020      	movs	r0, r4
   19642:	bd70      	pop	{r4, r5, r6, pc}

00019644 <strstr>:
   19644:	b510      	push	{r4, lr}
   19646:	0002      	movs	r2, r0
   19648:	7800      	ldrb	r0, [r0, #0]
   1964a:	2800      	cmp	r0, #0
   1964c:	d104      	bne.n	19658 <strstr+0x14>
   1964e:	7809      	ldrb	r1, [r1, #0]
   19650:	2900      	cmp	r1, #0
   19652:	d00d      	beq.n	19670 <strstr+0x2c>
   19654:	bd10      	pop	{r4, pc}
   19656:	3201      	adds	r2, #1
   19658:	7810      	ldrb	r0, [r2, #0]
   1965a:	2800      	cmp	r0, #0
   1965c:	d0fa      	beq.n	19654 <strstr+0x10>
   1965e:	2300      	movs	r3, #0
   19660:	5cc8      	ldrb	r0, [r1, r3]
   19662:	2800      	cmp	r0, #0
   19664:	d004      	beq.n	19670 <strstr+0x2c>
   19666:	5cd4      	ldrb	r4, [r2, r3]
   19668:	4284      	cmp	r4, r0
   1966a:	d1f4      	bne.n	19656 <strstr+0x12>
   1966c:	3301      	adds	r3, #1
   1966e:	e7f7      	b.n	19660 <strstr+0x1c>
   19670:	0010      	movs	r0, r2
   19672:	e7ef      	b.n	19654 <strstr+0x10>

00019674 <_strtol_l.isra.0>:
   19674:	b5f0      	push	{r4, r5, r6, r7, lr}
   19676:	001f      	movs	r7, r3
   19678:	000e      	movs	r6, r1
   1967a:	b087      	sub	sp, #28
   1967c:	9005      	str	r0, [sp, #20]
   1967e:	9103      	str	r1, [sp, #12]
   19680:	9202      	str	r2, [sp, #8]
   19682:	980c      	ldr	r0, [sp, #48]	; 0x30
   19684:	7834      	ldrb	r4, [r6, #0]
   19686:	f000 fb28 	bl	19cda <__locale_ctype_ptr_l>
   1968a:	2208      	movs	r2, #8
   1968c:	1900      	adds	r0, r0, r4
   1968e:	7843      	ldrb	r3, [r0, #1]
   19690:	1c75      	adds	r5, r6, #1
   19692:	4013      	ands	r3, r2
   19694:	d10c      	bne.n	196b0 <_strtol_l.isra.0+0x3c>
   19696:	2c2d      	cmp	r4, #45	; 0x2d
   19698:	d10c      	bne.n	196b4 <_strtol_l.isra.0+0x40>
   1969a:	3301      	adds	r3, #1
   1969c:	782c      	ldrb	r4, [r5, #0]
   1969e:	9301      	str	r3, [sp, #4]
   196a0:	1cb5      	adds	r5, r6, #2
   196a2:	2f00      	cmp	r7, #0
   196a4:	d00c      	beq.n	196c0 <_strtol_l.isra.0+0x4c>
   196a6:	2f10      	cmp	r7, #16
   196a8:	d114      	bne.n	196d4 <_strtol_l.isra.0+0x60>
   196aa:	2c30      	cmp	r4, #48	; 0x30
   196ac:	d00a      	beq.n	196c4 <_strtol_l.isra.0+0x50>
   196ae:	e011      	b.n	196d4 <_strtol_l.isra.0+0x60>
   196b0:	002e      	movs	r6, r5
   196b2:	e7e6      	b.n	19682 <_strtol_l.isra.0+0xe>
   196b4:	9301      	str	r3, [sp, #4]
   196b6:	2c2b      	cmp	r4, #43	; 0x2b
   196b8:	d1f3      	bne.n	196a2 <_strtol_l.isra.0+0x2e>
   196ba:	782c      	ldrb	r4, [r5, #0]
   196bc:	1cb5      	adds	r5, r6, #2
   196be:	e7f0      	b.n	196a2 <_strtol_l.isra.0+0x2e>
   196c0:	2c30      	cmp	r4, #48	; 0x30
   196c2:	d12f      	bne.n	19724 <_strtol_l.isra.0+0xb0>
   196c4:	2220      	movs	r2, #32
   196c6:	782b      	ldrb	r3, [r5, #0]
   196c8:	4393      	bics	r3, r2
   196ca:	2b58      	cmp	r3, #88	; 0x58
   196cc:	d151      	bne.n	19772 <_strtol_l.isra.0+0xfe>
   196ce:	2710      	movs	r7, #16
   196d0:	786c      	ldrb	r4, [r5, #1]
   196d2:	3502      	adds	r5, #2
   196d4:	9b01      	ldr	r3, [sp, #4]
   196d6:	4a29      	ldr	r2, [pc, #164]	; (1977c <_strtol_l.isra.0+0x108>)
   196d8:	0039      	movs	r1, r7
   196da:	189e      	adds	r6, r3, r2
   196dc:	0030      	movs	r0, r6
   196de:	f7fd fd1f 	bl	17120 <__aeabi_uidivmod>
   196e2:	0030      	movs	r0, r6
   196e4:	9104      	str	r1, [sp, #16]
   196e6:	0039      	movs	r1, r7
   196e8:	f7fd fc94 	bl	17014 <__udivsi3>
   196ec:	2101      	movs	r1, #1
   196ee:	2300      	movs	r3, #0
   196f0:	4249      	negs	r1, r1
   196f2:	0002      	movs	r2, r0
   196f4:	468c      	mov	ip, r1
   196f6:	0018      	movs	r0, r3
   196f8:	0021      	movs	r1, r4
   196fa:	3930      	subs	r1, #48	; 0x30
   196fc:	2909      	cmp	r1, #9
   196fe:	d813      	bhi.n	19728 <_strtol_l.isra.0+0xb4>
   19700:	000c      	movs	r4, r1
   19702:	42a7      	cmp	r7, r4
   19704:	dd1c      	ble.n	19740 <_strtol_l.isra.0+0xcc>
   19706:	1c59      	adds	r1, r3, #1
   19708:	d009      	beq.n	1971e <_strtol_l.isra.0+0xaa>
   1970a:	4663      	mov	r3, ip
   1970c:	4282      	cmp	r2, r0
   1970e:	d306      	bcc.n	1971e <_strtol_l.isra.0+0xaa>
   19710:	d102      	bne.n	19718 <_strtol_l.isra.0+0xa4>
   19712:	9904      	ldr	r1, [sp, #16]
   19714:	42a1      	cmp	r1, r4
   19716:	db02      	blt.n	1971e <_strtol_l.isra.0+0xaa>
   19718:	2301      	movs	r3, #1
   1971a:	4378      	muls	r0, r7
   1971c:	1820      	adds	r0, r4, r0
   1971e:	782c      	ldrb	r4, [r5, #0]
   19720:	3501      	adds	r5, #1
   19722:	e7e9      	b.n	196f8 <_strtol_l.isra.0+0x84>
   19724:	270a      	movs	r7, #10
   19726:	e7d5      	b.n	196d4 <_strtol_l.isra.0+0x60>
   19728:	0021      	movs	r1, r4
   1972a:	3941      	subs	r1, #65	; 0x41
   1972c:	2919      	cmp	r1, #25
   1972e:	d801      	bhi.n	19734 <_strtol_l.isra.0+0xc0>
   19730:	3c37      	subs	r4, #55	; 0x37
   19732:	e7e6      	b.n	19702 <_strtol_l.isra.0+0x8e>
   19734:	0021      	movs	r1, r4
   19736:	3961      	subs	r1, #97	; 0x61
   19738:	2919      	cmp	r1, #25
   1973a:	d801      	bhi.n	19740 <_strtol_l.isra.0+0xcc>
   1973c:	3c57      	subs	r4, #87	; 0x57
   1973e:	e7e0      	b.n	19702 <_strtol_l.isra.0+0x8e>
   19740:	1c5a      	adds	r2, r3, #1
   19742:	d108      	bne.n	19756 <_strtol_l.isra.0+0xe2>
   19744:	9a05      	ldr	r2, [sp, #20]
   19746:	3323      	adds	r3, #35	; 0x23
   19748:	6013      	str	r3, [r2, #0]
   1974a:	9b02      	ldr	r3, [sp, #8]
   1974c:	0030      	movs	r0, r6
   1974e:	2b00      	cmp	r3, #0
   19750:	d10b      	bne.n	1976a <_strtol_l.isra.0+0xf6>
   19752:	b007      	add	sp, #28
   19754:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19756:	9a01      	ldr	r2, [sp, #4]
   19758:	2a00      	cmp	r2, #0
   1975a:	d000      	beq.n	1975e <_strtol_l.isra.0+0xea>
   1975c:	4240      	negs	r0, r0
   1975e:	9a02      	ldr	r2, [sp, #8]
   19760:	2a00      	cmp	r2, #0
   19762:	d0f6      	beq.n	19752 <_strtol_l.isra.0+0xde>
   19764:	9a03      	ldr	r2, [sp, #12]
   19766:	2b00      	cmp	r3, #0
   19768:	d000      	beq.n	1976c <_strtol_l.isra.0+0xf8>
   1976a:	1e6a      	subs	r2, r5, #1
   1976c:	9b02      	ldr	r3, [sp, #8]
   1976e:	601a      	str	r2, [r3, #0]
   19770:	e7ef      	b.n	19752 <_strtol_l.isra.0+0xde>
   19772:	2430      	movs	r4, #48	; 0x30
   19774:	2f00      	cmp	r7, #0
   19776:	d1ad      	bne.n	196d4 <_strtol_l.isra.0+0x60>
   19778:	3708      	adds	r7, #8
   1977a:	e7ab      	b.n	196d4 <_strtol_l.isra.0+0x60>
   1977c:	7fffffff 	.word	0x7fffffff

00019780 <_strtol_r>:
   19780:	b513      	push	{r0, r1, r4, lr}
   19782:	4c05      	ldr	r4, [pc, #20]	; (19798 <_strtol_r+0x18>)
   19784:	6824      	ldr	r4, [r4, #0]
   19786:	6a24      	ldr	r4, [r4, #32]
   19788:	2c00      	cmp	r4, #0
   1978a:	d100      	bne.n	1978e <_strtol_r+0xe>
   1978c:	4c03      	ldr	r4, [pc, #12]	; (1979c <_strtol_r+0x1c>)
   1978e:	9400      	str	r4, [sp, #0]
   19790:	f7ff ff70 	bl	19674 <_strtol_l.isra.0>
   19794:	bd16      	pop	{r1, r2, r4, pc}
   19796:	46c0      	nop			; (mov r8, r8)
   19798:	20000180 	.word	0x20000180
   1979c:	200001e4 	.word	0x200001e4

000197a0 <strtol>:
   197a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   197a2:	0013      	movs	r3, r2
   197a4:	4a06      	ldr	r2, [pc, #24]	; (197c0 <strtol+0x20>)
   197a6:	0005      	movs	r5, r0
   197a8:	6810      	ldr	r0, [r2, #0]
   197aa:	6a04      	ldr	r4, [r0, #32]
   197ac:	2c00      	cmp	r4, #0
   197ae:	d100      	bne.n	197b2 <strtol+0x12>
   197b0:	4c04      	ldr	r4, [pc, #16]	; (197c4 <strtol+0x24>)
   197b2:	000a      	movs	r2, r1
   197b4:	9400      	str	r4, [sp, #0]
   197b6:	0029      	movs	r1, r5
   197b8:	f7ff ff5c 	bl	19674 <_strtol_l.isra.0>
   197bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   197be:	46c0      	nop			; (mov r8, r8)
   197c0:	20000180 	.word	0x20000180
   197c4:	200001e4 	.word	0x200001e4

000197c8 <__swbuf_r>:
   197c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   197ca:	0005      	movs	r5, r0
   197cc:	000e      	movs	r6, r1
   197ce:	0014      	movs	r4, r2
   197d0:	2800      	cmp	r0, #0
   197d2:	d004      	beq.n	197de <__swbuf_r+0x16>
   197d4:	6983      	ldr	r3, [r0, #24]
   197d6:	2b00      	cmp	r3, #0
   197d8:	d101      	bne.n	197de <__swbuf_r+0x16>
   197da:	f000 f9cd 	bl	19b78 <__sinit>
   197de:	4b22      	ldr	r3, [pc, #136]	; (19868 <__swbuf_r+0xa0>)
   197e0:	429c      	cmp	r4, r3
   197e2:	d12d      	bne.n	19840 <__swbuf_r+0x78>
   197e4:	686c      	ldr	r4, [r5, #4]
   197e6:	69a3      	ldr	r3, [r4, #24]
   197e8:	60a3      	str	r3, [r4, #8]
   197ea:	89a3      	ldrh	r3, [r4, #12]
   197ec:	071b      	lsls	r3, r3, #28
   197ee:	d531      	bpl.n	19854 <__swbuf_r+0x8c>
   197f0:	6923      	ldr	r3, [r4, #16]
   197f2:	2b00      	cmp	r3, #0
   197f4:	d02e      	beq.n	19854 <__swbuf_r+0x8c>
   197f6:	6823      	ldr	r3, [r4, #0]
   197f8:	6922      	ldr	r2, [r4, #16]
   197fa:	b2f7      	uxtb	r7, r6
   197fc:	1a98      	subs	r0, r3, r2
   197fe:	6963      	ldr	r3, [r4, #20]
   19800:	b2f6      	uxtb	r6, r6
   19802:	4298      	cmp	r0, r3
   19804:	db05      	blt.n	19812 <__swbuf_r+0x4a>
   19806:	0021      	movs	r1, r4
   19808:	0028      	movs	r0, r5
   1980a:	f000 f933 	bl	19a74 <_fflush_r>
   1980e:	2800      	cmp	r0, #0
   19810:	d126      	bne.n	19860 <__swbuf_r+0x98>
   19812:	68a3      	ldr	r3, [r4, #8]
   19814:	3001      	adds	r0, #1
   19816:	3b01      	subs	r3, #1
   19818:	60a3      	str	r3, [r4, #8]
   1981a:	6823      	ldr	r3, [r4, #0]
   1981c:	1c5a      	adds	r2, r3, #1
   1981e:	6022      	str	r2, [r4, #0]
   19820:	701f      	strb	r7, [r3, #0]
   19822:	6963      	ldr	r3, [r4, #20]
   19824:	4298      	cmp	r0, r3
   19826:	d004      	beq.n	19832 <__swbuf_r+0x6a>
   19828:	89a3      	ldrh	r3, [r4, #12]
   1982a:	07db      	lsls	r3, r3, #31
   1982c:	d51a      	bpl.n	19864 <__swbuf_r+0x9c>
   1982e:	2e0a      	cmp	r6, #10
   19830:	d118      	bne.n	19864 <__swbuf_r+0x9c>
   19832:	0021      	movs	r1, r4
   19834:	0028      	movs	r0, r5
   19836:	f000 f91d 	bl	19a74 <_fflush_r>
   1983a:	2800      	cmp	r0, #0
   1983c:	d012      	beq.n	19864 <__swbuf_r+0x9c>
   1983e:	e00f      	b.n	19860 <__swbuf_r+0x98>
   19840:	4b0a      	ldr	r3, [pc, #40]	; (1986c <__swbuf_r+0xa4>)
   19842:	429c      	cmp	r4, r3
   19844:	d101      	bne.n	1984a <__swbuf_r+0x82>
   19846:	68ac      	ldr	r4, [r5, #8]
   19848:	e7cd      	b.n	197e6 <__swbuf_r+0x1e>
   1984a:	4b09      	ldr	r3, [pc, #36]	; (19870 <__swbuf_r+0xa8>)
   1984c:	429c      	cmp	r4, r3
   1984e:	d1ca      	bne.n	197e6 <__swbuf_r+0x1e>
   19850:	68ec      	ldr	r4, [r5, #12]
   19852:	e7c8      	b.n	197e6 <__swbuf_r+0x1e>
   19854:	0021      	movs	r1, r4
   19856:	0028      	movs	r0, r5
   19858:	f000 f80c 	bl	19874 <__swsetup_r>
   1985c:	2800      	cmp	r0, #0
   1985e:	d0ca      	beq.n	197f6 <__swbuf_r+0x2e>
   19860:	2601      	movs	r6, #1
   19862:	4276      	negs	r6, r6
   19864:	0030      	movs	r0, r6
   19866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19868:	0001dcf4 	.word	0x0001dcf4
   1986c:	0001dd14 	.word	0x0001dd14
   19870:	0001dcd4 	.word	0x0001dcd4

00019874 <__swsetup_r>:
   19874:	4b36      	ldr	r3, [pc, #216]	; (19950 <__swsetup_r+0xdc>)
   19876:	b570      	push	{r4, r5, r6, lr}
   19878:	681d      	ldr	r5, [r3, #0]
   1987a:	0006      	movs	r6, r0
   1987c:	000c      	movs	r4, r1
   1987e:	2d00      	cmp	r5, #0
   19880:	d005      	beq.n	1988e <__swsetup_r+0x1a>
   19882:	69ab      	ldr	r3, [r5, #24]
   19884:	2b00      	cmp	r3, #0
   19886:	d102      	bne.n	1988e <__swsetup_r+0x1a>
   19888:	0028      	movs	r0, r5
   1988a:	f000 f975 	bl	19b78 <__sinit>
   1988e:	4b31      	ldr	r3, [pc, #196]	; (19954 <__swsetup_r+0xe0>)
   19890:	429c      	cmp	r4, r3
   19892:	d10f      	bne.n	198b4 <__swsetup_r+0x40>
   19894:	686c      	ldr	r4, [r5, #4]
   19896:	230c      	movs	r3, #12
   19898:	5ee2      	ldrsh	r2, [r4, r3]
   1989a:	b293      	uxth	r3, r2
   1989c:	0719      	lsls	r1, r3, #28
   1989e:	d42d      	bmi.n	198fc <__swsetup_r+0x88>
   198a0:	06d9      	lsls	r1, r3, #27
   198a2:	d411      	bmi.n	198c8 <__swsetup_r+0x54>
   198a4:	2309      	movs	r3, #9
   198a6:	2001      	movs	r0, #1
   198a8:	6033      	str	r3, [r6, #0]
   198aa:	3337      	adds	r3, #55	; 0x37
   198ac:	4313      	orrs	r3, r2
   198ae:	81a3      	strh	r3, [r4, #12]
   198b0:	4240      	negs	r0, r0
   198b2:	bd70      	pop	{r4, r5, r6, pc}
   198b4:	4b28      	ldr	r3, [pc, #160]	; (19958 <__swsetup_r+0xe4>)
   198b6:	429c      	cmp	r4, r3
   198b8:	d101      	bne.n	198be <__swsetup_r+0x4a>
   198ba:	68ac      	ldr	r4, [r5, #8]
   198bc:	e7eb      	b.n	19896 <__swsetup_r+0x22>
   198be:	4b27      	ldr	r3, [pc, #156]	; (1995c <__swsetup_r+0xe8>)
   198c0:	429c      	cmp	r4, r3
   198c2:	d1e8      	bne.n	19896 <__swsetup_r+0x22>
   198c4:	68ec      	ldr	r4, [r5, #12]
   198c6:	e7e6      	b.n	19896 <__swsetup_r+0x22>
   198c8:	075b      	lsls	r3, r3, #29
   198ca:	d513      	bpl.n	198f4 <__swsetup_r+0x80>
   198cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   198ce:	2900      	cmp	r1, #0
   198d0:	d008      	beq.n	198e4 <__swsetup_r+0x70>
   198d2:	0023      	movs	r3, r4
   198d4:	3344      	adds	r3, #68	; 0x44
   198d6:	4299      	cmp	r1, r3
   198d8:	d002      	beq.n	198e0 <__swsetup_r+0x6c>
   198da:	0030      	movs	r0, r6
   198dc:	f7ff fb9e 	bl	1901c <_free_r>
   198e0:	2300      	movs	r3, #0
   198e2:	6363      	str	r3, [r4, #52]	; 0x34
   198e4:	2224      	movs	r2, #36	; 0x24
   198e6:	89a3      	ldrh	r3, [r4, #12]
   198e8:	4393      	bics	r3, r2
   198ea:	81a3      	strh	r3, [r4, #12]
   198ec:	2300      	movs	r3, #0
   198ee:	6063      	str	r3, [r4, #4]
   198f0:	6923      	ldr	r3, [r4, #16]
   198f2:	6023      	str	r3, [r4, #0]
   198f4:	2308      	movs	r3, #8
   198f6:	89a2      	ldrh	r2, [r4, #12]
   198f8:	4313      	orrs	r3, r2
   198fa:	81a3      	strh	r3, [r4, #12]
   198fc:	6923      	ldr	r3, [r4, #16]
   198fe:	2b00      	cmp	r3, #0
   19900:	d10b      	bne.n	1991a <__swsetup_r+0xa6>
   19902:	21a0      	movs	r1, #160	; 0xa0
   19904:	2280      	movs	r2, #128	; 0x80
   19906:	89a3      	ldrh	r3, [r4, #12]
   19908:	0089      	lsls	r1, r1, #2
   1990a:	0092      	lsls	r2, r2, #2
   1990c:	400b      	ands	r3, r1
   1990e:	4293      	cmp	r3, r2
   19910:	d003      	beq.n	1991a <__swsetup_r+0xa6>
   19912:	0021      	movs	r1, r4
   19914:	0030      	movs	r0, r6
   19916:	f000 fa19 	bl	19d4c <__smakebuf_r>
   1991a:	2301      	movs	r3, #1
   1991c:	89a2      	ldrh	r2, [r4, #12]
   1991e:	4013      	ands	r3, r2
   19920:	d011      	beq.n	19946 <__swsetup_r+0xd2>
   19922:	2300      	movs	r3, #0
   19924:	60a3      	str	r3, [r4, #8]
   19926:	6963      	ldr	r3, [r4, #20]
   19928:	425b      	negs	r3, r3
   1992a:	61a3      	str	r3, [r4, #24]
   1992c:	2000      	movs	r0, #0
   1992e:	6923      	ldr	r3, [r4, #16]
   19930:	4283      	cmp	r3, r0
   19932:	d1be      	bne.n	198b2 <__swsetup_r+0x3e>
   19934:	230c      	movs	r3, #12
   19936:	5ee2      	ldrsh	r2, [r4, r3]
   19938:	0613      	lsls	r3, r2, #24
   1993a:	d5ba      	bpl.n	198b2 <__swsetup_r+0x3e>
   1993c:	2340      	movs	r3, #64	; 0x40
   1993e:	4313      	orrs	r3, r2
   19940:	81a3      	strh	r3, [r4, #12]
   19942:	3801      	subs	r0, #1
   19944:	e7b5      	b.n	198b2 <__swsetup_r+0x3e>
   19946:	0792      	lsls	r2, r2, #30
   19948:	d400      	bmi.n	1994c <__swsetup_r+0xd8>
   1994a:	6963      	ldr	r3, [r4, #20]
   1994c:	60a3      	str	r3, [r4, #8]
   1994e:	e7ed      	b.n	1992c <__swsetup_r+0xb8>
   19950:	20000180 	.word	0x20000180
   19954:	0001dcf4 	.word	0x0001dcf4
   19958:	0001dd14 	.word	0x0001dd14
   1995c:	0001dcd4 	.word	0x0001dcd4

00019960 <__sflush_r>:
   19960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19962:	898a      	ldrh	r2, [r1, #12]
   19964:	0005      	movs	r5, r0
   19966:	000c      	movs	r4, r1
   19968:	0713      	lsls	r3, r2, #28
   1996a:	d460      	bmi.n	19a2e <__sflush_r+0xce>
   1996c:	684b      	ldr	r3, [r1, #4]
   1996e:	2b00      	cmp	r3, #0
   19970:	dc04      	bgt.n	1997c <__sflush_r+0x1c>
   19972:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   19974:	2b00      	cmp	r3, #0
   19976:	dc01      	bgt.n	1997c <__sflush_r+0x1c>
   19978:	2000      	movs	r0, #0
   1997a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1997c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1997e:	2f00      	cmp	r7, #0
   19980:	d0fa      	beq.n	19978 <__sflush_r+0x18>
   19982:	2300      	movs	r3, #0
   19984:	682e      	ldr	r6, [r5, #0]
   19986:	602b      	str	r3, [r5, #0]
   19988:	2380      	movs	r3, #128	; 0x80
   1998a:	015b      	lsls	r3, r3, #5
   1998c:	401a      	ands	r2, r3
   1998e:	d034      	beq.n	199fa <__sflush_r+0x9a>
   19990:	6d60      	ldr	r0, [r4, #84]	; 0x54
   19992:	89a3      	ldrh	r3, [r4, #12]
   19994:	075b      	lsls	r3, r3, #29
   19996:	d506      	bpl.n	199a6 <__sflush_r+0x46>
   19998:	6863      	ldr	r3, [r4, #4]
   1999a:	1ac0      	subs	r0, r0, r3
   1999c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1999e:	2b00      	cmp	r3, #0
   199a0:	d001      	beq.n	199a6 <__sflush_r+0x46>
   199a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   199a4:	1ac0      	subs	r0, r0, r3
   199a6:	0002      	movs	r2, r0
   199a8:	6a21      	ldr	r1, [r4, #32]
   199aa:	2300      	movs	r3, #0
   199ac:	0028      	movs	r0, r5
   199ae:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   199b0:	47b8      	blx	r7
   199b2:	89a1      	ldrh	r1, [r4, #12]
   199b4:	1c43      	adds	r3, r0, #1
   199b6:	d106      	bne.n	199c6 <__sflush_r+0x66>
   199b8:	682b      	ldr	r3, [r5, #0]
   199ba:	2b1d      	cmp	r3, #29
   199bc:	d831      	bhi.n	19a22 <__sflush_r+0xc2>
   199be:	4a2c      	ldr	r2, [pc, #176]	; (19a70 <__sflush_r+0x110>)
   199c0:	40da      	lsrs	r2, r3
   199c2:	07d3      	lsls	r3, r2, #31
   199c4:	d52d      	bpl.n	19a22 <__sflush_r+0xc2>
   199c6:	2300      	movs	r3, #0
   199c8:	6063      	str	r3, [r4, #4]
   199ca:	6923      	ldr	r3, [r4, #16]
   199cc:	6023      	str	r3, [r4, #0]
   199ce:	04cb      	lsls	r3, r1, #19
   199d0:	d505      	bpl.n	199de <__sflush_r+0x7e>
   199d2:	1c43      	adds	r3, r0, #1
   199d4:	d102      	bne.n	199dc <__sflush_r+0x7c>
   199d6:	682b      	ldr	r3, [r5, #0]
   199d8:	2b00      	cmp	r3, #0
   199da:	d100      	bne.n	199de <__sflush_r+0x7e>
   199dc:	6560      	str	r0, [r4, #84]	; 0x54
   199de:	6b61      	ldr	r1, [r4, #52]	; 0x34
   199e0:	602e      	str	r6, [r5, #0]
   199e2:	2900      	cmp	r1, #0
   199e4:	d0c8      	beq.n	19978 <__sflush_r+0x18>
   199e6:	0023      	movs	r3, r4
   199e8:	3344      	adds	r3, #68	; 0x44
   199ea:	4299      	cmp	r1, r3
   199ec:	d002      	beq.n	199f4 <__sflush_r+0x94>
   199ee:	0028      	movs	r0, r5
   199f0:	f7ff fb14 	bl	1901c <_free_r>
   199f4:	2000      	movs	r0, #0
   199f6:	6360      	str	r0, [r4, #52]	; 0x34
   199f8:	e7bf      	b.n	1997a <__sflush_r+0x1a>
   199fa:	2301      	movs	r3, #1
   199fc:	6a21      	ldr	r1, [r4, #32]
   199fe:	0028      	movs	r0, r5
   19a00:	47b8      	blx	r7
   19a02:	1c43      	adds	r3, r0, #1
   19a04:	d1c5      	bne.n	19992 <__sflush_r+0x32>
   19a06:	682b      	ldr	r3, [r5, #0]
   19a08:	2b00      	cmp	r3, #0
   19a0a:	d0c2      	beq.n	19992 <__sflush_r+0x32>
   19a0c:	2b1d      	cmp	r3, #29
   19a0e:	d001      	beq.n	19a14 <__sflush_r+0xb4>
   19a10:	2b16      	cmp	r3, #22
   19a12:	d101      	bne.n	19a18 <__sflush_r+0xb8>
   19a14:	602e      	str	r6, [r5, #0]
   19a16:	e7af      	b.n	19978 <__sflush_r+0x18>
   19a18:	2340      	movs	r3, #64	; 0x40
   19a1a:	89a2      	ldrh	r2, [r4, #12]
   19a1c:	4313      	orrs	r3, r2
   19a1e:	81a3      	strh	r3, [r4, #12]
   19a20:	e7ab      	b.n	1997a <__sflush_r+0x1a>
   19a22:	2340      	movs	r3, #64	; 0x40
   19a24:	430b      	orrs	r3, r1
   19a26:	2001      	movs	r0, #1
   19a28:	81a3      	strh	r3, [r4, #12]
   19a2a:	4240      	negs	r0, r0
   19a2c:	e7a5      	b.n	1997a <__sflush_r+0x1a>
   19a2e:	690f      	ldr	r7, [r1, #16]
   19a30:	2f00      	cmp	r7, #0
   19a32:	d0a1      	beq.n	19978 <__sflush_r+0x18>
   19a34:	680b      	ldr	r3, [r1, #0]
   19a36:	600f      	str	r7, [r1, #0]
   19a38:	1bdb      	subs	r3, r3, r7
   19a3a:	9301      	str	r3, [sp, #4]
   19a3c:	2300      	movs	r3, #0
   19a3e:	0792      	lsls	r2, r2, #30
   19a40:	d100      	bne.n	19a44 <__sflush_r+0xe4>
   19a42:	694b      	ldr	r3, [r1, #20]
   19a44:	60a3      	str	r3, [r4, #8]
   19a46:	9b01      	ldr	r3, [sp, #4]
   19a48:	2b00      	cmp	r3, #0
   19a4a:	dc00      	bgt.n	19a4e <__sflush_r+0xee>
   19a4c:	e794      	b.n	19978 <__sflush_r+0x18>
   19a4e:	9b01      	ldr	r3, [sp, #4]
   19a50:	003a      	movs	r2, r7
   19a52:	6a21      	ldr	r1, [r4, #32]
   19a54:	0028      	movs	r0, r5
   19a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   19a58:	47b0      	blx	r6
   19a5a:	2800      	cmp	r0, #0
   19a5c:	dc03      	bgt.n	19a66 <__sflush_r+0x106>
   19a5e:	2340      	movs	r3, #64	; 0x40
   19a60:	89a2      	ldrh	r2, [r4, #12]
   19a62:	4313      	orrs	r3, r2
   19a64:	e7df      	b.n	19a26 <__sflush_r+0xc6>
   19a66:	9b01      	ldr	r3, [sp, #4]
   19a68:	183f      	adds	r7, r7, r0
   19a6a:	1a1b      	subs	r3, r3, r0
   19a6c:	9301      	str	r3, [sp, #4]
   19a6e:	e7ea      	b.n	19a46 <__sflush_r+0xe6>
   19a70:	20400001 	.word	0x20400001

00019a74 <_fflush_r>:
   19a74:	690b      	ldr	r3, [r1, #16]
   19a76:	b570      	push	{r4, r5, r6, lr}
   19a78:	0005      	movs	r5, r0
   19a7a:	000c      	movs	r4, r1
   19a7c:	2b00      	cmp	r3, #0
   19a7e:	d101      	bne.n	19a84 <_fflush_r+0x10>
   19a80:	2000      	movs	r0, #0
   19a82:	bd70      	pop	{r4, r5, r6, pc}
   19a84:	2800      	cmp	r0, #0
   19a86:	d004      	beq.n	19a92 <_fflush_r+0x1e>
   19a88:	6983      	ldr	r3, [r0, #24]
   19a8a:	2b00      	cmp	r3, #0
   19a8c:	d101      	bne.n	19a92 <_fflush_r+0x1e>
   19a8e:	f000 f873 	bl	19b78 <__sinit>
   19a92:	4b0b      	ldr	r3, [pc, #44]	; (19ac0 <_fflush_r+0x4c>)
   19a94:	429c      	cmp	r4, r3
   19a96:	d109      	bne.n	19aac <_fflush_r+0x38>
   19a98:	686c      	ldr	r4, [r5, #4]
   19a9a:	220c      	movs	r2, #12
   19a9c:	5ea3      	ldrsh	r3, [r4, r2]
   19a9e:	2b00      	cmp	r3, #0
   19aa0:	d0ee      	beq.n	19a80 <_fflush_r+0xc>
   19aa2:	0021      	movs	r1, r4
   19aa4:	0028      	movs	r0, r5
   19aa6:	f7ff ff5b 	bl	19960 <__sflush_r>
   19aaa:	e7ea      	b.n	19a82 <_fflush_r+0xe>
   19aac:	4b05      	ldr	r3, [pc, #20]	; (19ac4 <_fflush_r+0x50>)
   19aae:	429c      	cmp	r4, r3
   19ab0:	d101      	bne.n	19ab6 <_fflush_r+0x42>
   19ab2:	68ac      	ldr	r4, [r5, #8]
   19ab4:	e7f1      	b.n	19a9a <_fflush_r+0x26>
   19ab6:	4b04      	ldr	r3, [pc, #16]	; (19ac8 <_fflush_r+0x54>)
   19ab8:	429c      	cmp	r4, r3
   19aba:	d1ee      	bne.n	19a9a <_fflush_r+0x26>
   19abc:	68ec      	ldr	r4, [r5, #12]
   19abe:	e7ec      	b.n	19a9a <_fflush_r+0x26>
   19ac0:	0001dcf4 	.word	0x0001dcf4
   19ac4:	0001dd14 	.word	0x0001dd14
   19ac8:	0001dcd4 	.word	0x0001dcd4

00019acc <fflush>:
   19acc:	b510      	push	{r4, lr}
   19ace:	1e01      	subs	r1, r0, #0
   19ad0:	d105      	bne.n	19ade <fflush+0x12>
   19ad2:	4b05      	ldr	r3, [pc, #20]	; (19ae8 <fflush+0x1c>)
   19ad4:	4905      	ldr	r1, [pc, #20]	; (19aec <fflush+0x20>)
   19ad6:	6818      	ldr	r0, [r3, #0]
   19ad8:	f000 f8de 	bl	19c98 <_fwalk_reent>
   19adc:	bd10      	pop	{r4, pc}
   19ade:	4b04      	ldr	r3, [pc, #16]	; (19af0 <fflush+0x24>)
   19ae0:	6818      	ldr	r0, [r3, #0]
   19ae2:	f7ff ffc7 	bl	19a74 <_fflush_r>
   19ae6:	e7f9      	b.n	19adc <fflush+0x10>
   19ae8:	0001dcd0 	.word	0x0001dcd0
   19aec:	00019a75 	.word	0x00019a75
   19af0:	20000180 	.word	0x20000180

00019af4 <_cleanup_r>:
   19af4:	b510      	push	{r4, lr}
   19af6:	4902      	ldr	r1, [pc, #8]	; (19b00 <_cleanup_r+0xc>)
   19af8:	f000 f8ce 	bl	19c98 <_fwalk_reent>
   19afc:	bd10      	pop	{r4, pc}
   19afe:	46c0      	nop			; (mov r8, r8)
   19b00:	00019a75 	.word	0x00019a75

00019b04 <std.isra.0>:
   19b04:	2300      	movs	r3, #0
   19b06:	b510      	push	{r4, lr}
   19b08:	0004      	movs	r4, r0
   19b0a:	6003      	str	r3, [r0, #0]
   19b0c:	6043      	str	r3, [r0, #4]
   19b0e:	6083      	str	r3, [r0, #8]
   19b10:	8181      	strh	r1, [r0, #12]
   19b12:	6643      	str	r3, [r0, #100]	; 0x64
   19b14:	81c2      	strh	r2, [r0, #14]
   19b16:	6103      	str	r3, [r0, #16]
   19b18:	6143      	str	r3, [r0, #20]
   19b1a:	6183      	str	r3, [r0, #24]
   19b1c:	0019      	movs	r1, r3
   19b1e:	2208      	movs	r2, #8
   19b20:	305c      	adds	r0, #92	; 0x5c
   19b22:	f7ff fa72 	bl	1900a <memset>
   19b26:	4b05      	ldr	r3, [pc, #20]	; (19b3c <std.isra.0+0x38>)
   19b28:	6224      	str	r4, [r4, #32]
   19b2a:	6263      	str	r3, [r4, #36]	; 0x24
   19b2c:	4b04      	ldr	r3, [pc, #16]	; (19b40 <std.isra.0+0x3c>)
   19b2e:	62a3      	str	r3, [r4, #40]	; 0x28
   19b30:	4b04      	ldr	r3, [pc, #16]	; (19b44 <std.isra.0+0x40>)
   19b32:	62e3      	str	r3, [r4, #44]	; 0x2c
   19b34:	4b04      	ldr	r3, [pc, #16]	; (19b48 <std.isra.0+0x44>)
   19b36:	6323      	str	r3, [r4, #48]	; 0x30
   19b38:	bd10      	pop	{r4, pc}
   19b3a:	46c0      	nop			; (mov r8, r8)
   19b3c:	0001ae8d 	.word	0x0001ae8d
   19b40:	0001aeb5 	.word	0x0001aeb5
   19b44:	0001aeed 	.word	0x0001aeed
   19b48:	0001af19 	.word	0x0001af19

00019b4c <__sfmoreglue>:
   19b4c:	b570      	push	{r4, r5, r6, lr}
   19b4e:	2568      	movs	r5, #104	; 0x68
   19b50:	1e4a      	subs	r2, r1, #1
   19b52:	4355      	muls	r5, r2
   19b54:	000e      	movs	r6, r1
   19b56:	0029      	movs	r1, r5
   19b58:	3174      	adds	r1, #116	; 0x74
   19b5a:	f7ff faa9 	bl	190b0 <_malloc_r>
   19b5e:	1e04      	subs	r4, r0, #0
   19b60:	d008      	beq.n	19b74 <__sfmoreglue+0x28>
   19b62:	2100      	movs	r1, #0
   19b64:	002a      	movs	r2, r5
   19b66:	6001      	str	r1, [r0, #0]
   19b68:	6046      	str	r6, [r0, #4]
   19b6a:	300c      	adds	r0, #12
   19b6c:	60a0      	str	r0, [r4, #8]
   19b6e:	3268      	adds	r2, #104	; 0x68
   19b70:	f7ff fa4b 	bl	1900a <memset>
   19b74:	0020      	movs	r0, r4
   19b76:	bd70      	pop	{r4, r5, r6, pc}

00019b78 <__sinit>:
   19b78:	6983      	ldr	r3, [r0, #24]
   19b7a:	b513      	push	{r0, r1, r4, lr}
   19b7c:	0004      	movs	r4, r0
   19b7e:	2b00      	cmp	r3, #0
   19b80:	d128      	bne.n	19bd4 <__sinit+0x5c>
   19b82:	6483      	str	r3, [r0, #72]	; 0x48
   19b84:	64c3      	str	r3, [r0, #76]	; 0x4c
   19b86:	6503      	str	r3, [r0, #80]	; 0x50
   19b88:	4b13      	ldr	r3, [pc, #76]	; (19bd8 <__sinit+0x60>)
   19b8a:	4a14      	ldr	r2, [pc, #80]	; (19bdc <__sinit+0x64>)
   19b8c:	681b      	ldr	r3, [r3, #0]
   19b8e:	6282      	str	r2, [r0, #40]	; 0x28
   19b90:	9301      	str	r3, [sp, #4]
   19b92:	4298      	cmp	r0, r3
   19b94:	d101      	bne.n	19b9a <__sinit+0x22>
   19b96:	2301      	movs	r3, #1
   19b98:	6183      	str	r3, [r0, #24]
   19b9a:	0020      	movs	r0, r4
   19b9c:	f000 f820 	bl	19be0 <__sfp>
   19ba0:	6060      	str	r0, [r4, #4]
   19ba2:	0020      	movs	r0, r4
   19ba4:	f000 f81c 	bl	19be0 <__sfp>
   19ba8:	60a0      	str	r0, [r4, #8]
   19baa:	0020      	movs	r0, r4
   19bac:	f000 f818 	bl	19be0 <__sfp>
   19bb0:	2200      	movs	r2, #0
   19bb2:	60e0      	str	r0, [r4, #12]
   19bb4:	2104      	movs	r1, #4
   19bb6:	6860      	ldr	r0, [r4, #4]
   19bb8:	f7ff ffa4 	bl	19b04 <std.isra.0>
   19bbc:	2201      	movs	r2, #1
   19bbe:	2109      	movs	r1, #9
   19bc0:	68a0      	ldr	r0, [r4, #8]
   19bc2:	f7ff ff9f 	bl	19b04 <std.isra.0>
   19bc6:	2202      	movs	r2, #2
   19bc8:	2112      	movs	r1, #18
   19bca:	68e0      	ldr	r0, [r4, #12]
   19bcc:	f7ff ff9a 	bl	19b04 <std.isra.0>
   19bd0:	2301      	movs	r3, #1
   19bd2:	61a3      	str	r3, [r4, #24]
   19bd4:	bd13      	pop	{r0, r1, r4, pc}
   19bd6:	46c0      	nop			; (mov r8, r8)
   19bd8:	0001dcd0 	.word	0x0001dcd0
   19bdc:	00019af5 	.word	0x00019af5

00019be0 <__sfp>:
   19be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19be2:	4b1e      	ldr	r3, [pc, #120]	; (19c5c <__sfp+0x7c>)
   19be4:	0007      	movs	r7, r0
   19be6:	681e      	ldr	r6, [r3, #0]
   19be8:	69b3      	ldr	r3, [r6, #24]
   19bea:	2b00      	cmp	r3, #0
   19bec:	d102      	bne.n	19bf4 <__sfp+0x14>
   19bee:	0030      	movs	r0, r6
   19bf0:	f7ff ffc2 	bl	19b78 <__sinit>
   19bf4:	3648      	adds	r6, #72	; 0x48
   19bf6:	68b4      	ldr	r4, [r6, #8]
   19bf8:	6873      	ldr	r3, [r6, #4]
   19bfa:	3b01      	subs	r3, #1
   19bfc:	d504      	bpl.n	19c08 <__sfp+0x28>
   19bfe:	6833      	ldr	r3, [r6, #0]
   19c00:	2b00      	cmp	r3, #0
   19c02:	d007      	beq.n	19c14 <__sfp+0x34>
   19c04:	6836      	ldr	r6, [r6, #0]
   19c06:	e7f6      	b.n	19bf6 <__sfp+0x16>
   19c08:	220c      	movs	r2, #12
   19c0a:	5ea5      	ldrsh	r5, [r4, r2]
   19c0c:	2d00      	cmp	r5, #0
   19c0e:	d00d      	beq.n	19c2c <__sfp+0x4c>
   19c10:	3468      	adds	r4, #104	; 0x68
   19c12:	e7f2      	b.n	19bfa <__sfp+0x1a>
   19c14:	2104      	movs	r1, #4
   19c16:	0038      	movs	r0, r7
   19c18:	f7ff ff98 	bl	19b4c <__sfmoreglue>
   19c1c:	6030      	str	r0, [r6, #0]
   19c1e:	2800      	cmp	r0, #0
   19c20:	d1f0      	bne.n	19c04 <__sfp+0x24>
   19c22:	230c      	movs	r3, #12
   19c24:	0004      	movs	r4, r0
   19c26:	603b      	str	r3, [r7, #0]
   19c28:	0020      	movs	r0, r4
   19c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19c2c:	2301      	movs	r3, #1
   19c2e:	0020      	movs	r0, r4
   19c30:	425b      	negs	r3, r3
   19c32:	81e3      	strh	r3, [r4, #14]
   19c34:	3302      	adds	r3, #2
   19c36:	81a3      	strh	r3, [r4, #12]
   19c38:	6665      	str	r5, [r4, #100]	; 0x64
   19c3a:	6025      	str	r5, [r4, #0]
   19c3c:	60a5      	str	r5, [r4, #8]
   19c3e:	6065      	str	r5, [r4, #4]
   19c40:	6125      	str	r5, [r4, #16]
   19c42:	6165      	str	r5, [r4, #20]
   19c44:	61a5      	str	r5, [r4, #24]
   19c46:	2208      	movs	r2, #8
   19c48:	0029      	movs	r1, r5
   19c4a:	305c      	adds	r0, #92	; 0x5c
   19c4c:	f7ff f9dd 	bl	1900a <memset>
   19c50:	6365      	str	r5, [r4, #52]	; 0x34
   19c52:	63a5      	str	r5, [r4, #56]	; 0x38
   19c54:	64a5      	str	r5, [r4, #72]	; 0x48
   19c56:	64e5      	str	r5, [r4, #76]	; 0x4c
   19c58:	e7e6      	b.n	19c28 <__sfp+0x48>
   19c5a:	46c0      	nop			; (mov r8, r8)
   19c5c:	0001dcd0 	.word	0x0001dcd0

00019c60 <_fwalk>:
   19c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19c62:	3048      	adds	r0, #72	; 0x48
   19c64:	0004      	movs	r4, r0
   19c66:	2600      	movs	r6, #0
   19c68:	9101      	str	r1, [sp, #4]
   19c6a:	2c00      	cmp	r4, #0
   19c6c:	d101      	bne.n	19c72 <_fwalk+0x12>
   19c6e:	0030      	movs	r0, r6
   19c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   19c72:	68a5      	ldr	r5, [r4, #8]
   19c74:	6867      	ldr	r7, [r4, #4]
   19c76:	3f01      	subs	r7, #1
   19c78:	d501      	bpl.n	19c7e <_fwalk+0x1e>
   19c7a:	6824      	ldr	r4, [r4, #0]
   19c7c:	e7f5      	b.n	19c6a <_fwalk+0xa>
   19c7e:	89ab      	ldrh	r3, [r5, #12]
   19c80:	2b01      	cmp	r3, #1
   19c82:	d907      	bls.n	19c94 <_fwalk+0x34>
   19c84:	220e      	movs	r2, #14
   19c86:	5eab      	ldrsh	r3, [r5, r2]
   19c88:	3301      	adds	r3, #1
   19c8a:	d003      	beq.n	19c94 <_fwalk+0x34>
   19c8c:	0028      	movs	r0, r5
   19c8e:	9b01      	ldr	r3, [sp, #4]
   19c90:	4798      	blx	r3
   19c92:	4306      	orrs	r6, r0
   19c94:	3568      	adds	r5, #104	; 0x68
   19c96:	e7ee      	b.n	19c76 <_fwalk+0x16>

00019c98 <_fwalk_reent>:
   19c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19c9a:	0004      	movs	r4, r0
   19c9c:	0007      	movs	r7, r0
   19c9e:	2600      	movs	r6, #0
   19ca0:	9101      	str	r1, [sp, #4]
   19ca2:	3448      	adds	r4, #72	; 0x48
   19ca4:	2c00      	cmp	r4, #0
   19ca6:	d101      	bne.n	19cac <_fwalk_reent+0x14>
   19ca8:	0030      	movs	r0, r6
   19caa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   19cac:	6863      	ldr	r3, [r4, #4]
   19cae:	68a5      	ldr	r5, [r4, #8]
   19cb0:	9300      	str	r3, [sp, #0]
   19cb2:	9b00      	ldr	r3, [sp, #0]
   19cb4:	3b01      	subs	r3, #1
   19cb6:	9300      	str	r3, [sp, #0]
   19cb8:	d501      	bpl.n	19cbe <_fwalk_reent+0x26>
   19cba:	6824      	ldr	r4, [r4, #0]
   19cbc:	e7f2      	b.n	19ca4 <_fwalk_reent+0xc>
   19cbe:	89ab      	ldrh	r3, [r5, #12]
   19cc0:	2b01      	cmp	r3, #1
   19cc2:	d908      	bls.n	19cd6 <_fwalk_reent+0x3e>
   19cc4:	220e      	movs	r2, #14
   19cc6:	5eab      	ldrsh	r3, [r5, r2]
   19cc8:	3301      	adds	r3, #1
   19cca:	d004      	beq.n	19cd6 <_fwalk_reent+0x3e>
   19ccc:	0029      	movs	r1, r5
   19cce:	0038      	movs	r0, r7
   19cd0:	9b01      	ldr	r3, [sp, #4]
   19cd2:	4798      	blx	r3
   19cd4:	4306      	orrs	r6, r0
   19cd6:	3568      	adds	r5, #104	; 0x68
   19cd8:	e7eb      	b.n	19cb2 <_fwalk_reent+0x1a>

00019cda <__locale_ctype_ptr_l>:
   19cda:	30ec      	adds	r0, #236	; 0xec
   19cdc:	6800      	ldr	r0, [r0, #0]
   19cde:	4770      	bx	lr

00019ce0 <__locale_ctype_ptr>:
   19ce0:	4b04      	ldr	r3, [pc, #16]	; (19cf4 <__locale_ctype_ptr+0x14>)
   19ce2:	681b      	ldr	r3, [r3, #0]
   19ce4:	6a1b      	ldr	r3, [r3, #32]
   19ce6:	2b00      	cmp	r3, #0
   19ce8:	d100      	bne.n	19cec <__locale_ctype_ptr+0xc>
   19cea:	4b03      	ldr	r3, [pc, #12]	; (19cf8 <__locale_ctype_ptr+0x18>)
   19cec:	33ec      	adds	r3, #236	; 0xec
   19cee:	6818      	ldr	r0, [r3, #0]
   19cf0:	4770      	bx	lr
   19cf2:	46c0      	nop			; (mov r8, r8)
   19cf4:	20000180 	.word	0x20000180
   19cf8:	200001e4 	.word	0x200001e4

00019cfc <__swhatbuf_r>:
   19cfc:	b570      	push	{r4, r5, r6, lr}
   19cfe:	000e      	movs	r6, r1
   19d00:	001d      	movs	r5, r3
   19d02:	230e      	movs	r3, #14
   19d04:	5ec9      	ldrsh	r1, [r1, r3]
   19d06:	b090      	sub	sp, #64	; 0x40
   19d08:	0014      	movs	r4, r2
   19d0a:	2900      	cmp	r1, #0
   19d0c:	da07      	bge.n	19d1e <__swhatbuf_r+0x22>
   19d0e:	2300      	movs	r3, #0
   19d10:	602b      	str	r3, [r5, #0]
   19d12:	89b3      	ldrh	r3, [r6, #12]
   19d14:	061b      	lsls	r3, r3, #24
   19d16:	d411      	bmi.n	19d3c <__swhatbuf_r+0x40>
   19d18:	2380      	movs	r3, #128	; 0x80
   19d1a:	00db      	lsls	r3, r3, #3
   19d1c:	e00f      	b.n	19d3e <__swhatbuf_r+0x42>
   19d1e:	aa01      	add	r2, sp, #4
   19d20:	f001 fa88 	bl	1b234 <_fstat_r>
   19d24:	2800      	cmp	r0, #0
   19d26:	dbf2      	blt.n	19d0e <__swhatbuf_r+0x12>
   19d28:	22f0      	movs	r2, #240	; 0xf0
   19d2a:	9b02      	ldr	r3, [sp, #8]
   19d2c:	0212      	lsls	r2, r2, #8
   19d2e:	4013      	ands	r3, r2
   19d30:	4a05      	ldr	r2, [pc, #20]	; (19d48 <__swhatbuf_r+0x4c>)
   19d32:	189b      	adds	r3, r3, r2
   19d34:	425a      	negs	r2, r3
   19d36:	4153      	adcs	r3, r2
   19d38:	602b      	str	r3, [r5, #0]
   19d3a:	e7ed      	b.n	19d18 <__swhatbuf_r+0x1c>
   19d3c:	2340      	movs	r3, #64	; 0x40
   19d3e:	2000      	movs	r0, #0
   19d40:	6023      	str	r3, [r4, #0]
   19d42:	b010      	add	sp, #64	; 0x40
   19d44:	bd70      	pop	{r4, r5, r6, pc}
   19d46:	46c0      	nop			; (mov r8, r8)
   19d48:	ffffe000 	.word	0xffffe000

00019d4c <__smakebuf_r>:
   19d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19d4e:	2602      	movs	r6, #2
   19d50:	898b      	ldrh	r3, [r1, #12]
   19d52:	0005      	movs	r5, r0
   19d54:	000c      	movs	r4, r1
   19d56:	4233      	tst	r3, r6
   19d58:	d006      	beq.n	19d68 <__smakebuf_r+0x1c>
   19d5a:	0023      	movs	r3, r4
   19d5c:	3347      	adds	r3, #71	; 0x47
   19d5e:	6023      	str	r3, [r4, #0]
   19d60:	6123      	str	r3, [r4, #16]
   19d62:	2301      	movs	r3, #1
   19d64:	6163      	str	r3, [r4, #20]
   19d66:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   19d68:	ab01      	add	r3, sp, #4
   19d6a:	466a      	mov	r2, sp
   19d6c:	f7ff ffc6 	bl	19cfc <__swhatbuf_r>
   19d70:	9900      	ldr	r1, [sp, #0]
   19d72:	0007      	movs	r7, r0
   19d74:	0028      	movs	r0, r5
   19d76:	f7ff f99b 	bl	190b0 <_malloc_r>
   19d7a:	2800      	cmp	r0, #0
   19d7c:	d108      	bne.n	19d90 <__smakebuf_r+0x44>
   19d7e:	220c      	movs	r2, #12
   19d80:	5ea3      	ldrsh	r3, [r4, r2]
   19d82:	059a      	lsls	r2, r3, #22
   19d84:	d4ef      	bmi.n	19d66 <__smakebuf_r+0x1a>
   19d86:	2203      	movs	r2, #3
   19d88:	4393      	bics	r3, r2
   19d8a:	431e      	orrs	r6, r3
   19d8c:	81a6      	strh	r6, [r4, #12]
   19d8e:	e7e4      	b.n	19d5a <__smakebuf_r+0xe>
   19d90:	4b0f      	ldr	r3, [pc, #60]	; (19dd0 <__smakebuf_r+0x84>)
   19d92:	62ab      	str	r3, [r5, #40]	; 0x28
   19d94:	2380      	movs	r3, #128	; 0x80
   19d96:	89a2      	ldrh	r2, [r4, #12]
   19d98:	6020      	str	r0, [r4, #0]
   19d9a:	4313      	orrs	r3, r2
   19d9c:	81a3      	strh	r3, [r4, #12]
   19d9e:	9b00      	ldr	r3, [sp, #0]
   19da0:	6120      	str	r0, [r4, #16]
   19da2:	6163      	str	r3, [r4, #20]
   19da4:	9b01      	ldr	r3, [sp, #4]
   19da6:	2b00      	cmp	r3, #0
   19da8:	d00d      	beq.n	19dc6 <__smakebuf_r+0x7a>
   19daa:	230e      	movs	r3, #14
   19dac:	5ee1      	ldrsh	r1, [r4, r3]
   19dae:	0028      	movs	r0, r5
   19db0:	f001 fa52 	bl	1b258 <_isatty_r>
   19db4:	2800      	cmp	r0, #0
   19db6:	d006      	beq.n	19dc6 <__smakebuf_r+0x7a>
   19db8:	2203      	movs	r2, #3
   19dba:	89a3      	ldrh	r3, [r4, #12]
   19dbc:	4393      	bics	r3, r2
   19dbe:	001a      	movs	r2, r3
   19dc0:	2301      	movs	r3, #1
   19dc2:	4313      	orrs	r3, r2
   19dc4:	81a3      	strh	r3, [r4, #12]
   19dc6:	89a0      	ldrh	r0, [r4, #12]
   19dc8:	4338      	orrs	r0, r7
   19dca:	81a0      	strh	r0, [r4, #12]
   19dcc:	e7cb      	b.n	19d66 <__smakebuf_r+0x1a>
   19dce:	46c0      	nop			; (mov r8, r8)
   19dd0:	00019af5 	.word	0x00019af5

00019dd4 <__ascii_mbtowc>:
   19dd4:	b082      	sub	sp, #8
   19dd6:	2900      	cmp	r1, #0
   19dd8:	d100      	bne.n	19ddc <__ascii_mbtowc+0x8>
   19dda:	a901      	add	r1, sp, #4
   19ddc:	1e10      	subs	r0, r2, #0
   19dde:	d006      	beq.n	19dee <__ascii_mbtowc+0x1a>
   19de0:	2b00      	cmp	r3, #0
   19de2:	d006      	beq.n	19df2 <__ascii_mbtowc+0x1e>
   19de4:	7813      	ldrb	r3, [r2, #0]
   19de6:	600b      	str	r3, [r1, #0]
   19de8:	7810      	ldrb	r0, [r2, #0]
   19dea:	1e43      	subs	r3, r0, #1
   19dec:	4198      	sbcs	r0, r3
   19dee:	b002      	add	sp, #8
   19df0:	4770      	bx	lr
   19df2:	2002      	movs	r0, #2
   19df4:	4240      	negs	r0, r0
   19df6:	e7fa      	b.n	19dee <__ascii_mbtowc+0x1a>

00019df8 <__malloc_lock>:
   19df8:	4770      	bx	lr

00019dfa <__malloc_unlock>:
   19dfa:	4770      	bx	lr

00019dfc <__ssputs_r>:
   19dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dfe:	688e      	ldr	r6, [r1, #8]
   19e00:	b085      	sub	sp, #20
   19e02:	0007      	movs	r7, r0
   19e04:	000c      	movs	r4, r1
   19e06:	9203      	str	r2, [sp, #12]
   19e08:	9301      	str	r3, [sp, #4]
   19e0a:	429e      	cmp	r6, r3
   19e0c:	d839      	bhi.n	19e82 <__ssputs_r+0x86>
   19e0e:	2390      	movs	r3, #144	; 0x90
   19e10:	898a      	ldrh	r2, [r1, #12]
   19e12:	00db      	lsls	r3, r3, #3
   19e14:	421a      	tst	r2, r3
   19e16:	d034      	beq.n	19e82 <__ssputs_r+0x86>
   19e18:	2503      	movs	r5, #3
   19e1a:	6909      	ldr	r1, [r1, #16]
   19e1c:	6823      	ldr	r3, [r4, #0]
   19e1e:	1a5b      	subs	r3, r3, r1
   19e20:	9302      	str	r3, [sp, #8]
   19e22:	6963      	ldr	r3, [r4, #20]
   19e24:	9802      	ldr	r0, [sp, #8]
   19e26:	435d      	muls	r5, r3
   19e28:	0feb      	lsrs	r3, r5, #31
   19e2a:	195d      	adds	r5, r3, r5
   19e2c:	9b01      	ldr	r3, [sp, #4]
   19e2e:	106d      	asrs	r5, r5, #1
   19e30:	3301      	adds	r3, #1
   19e32:	181b      	adds	r3, r3, r0
   19e34:	42ab      	cmp	r3, r5
   19e36:	d900      	bls.n	19e3a <__ssputs_r+0x3e>
   19e38:	001d      	movs	r5, r3
   19e3a:	0553      	lsls	r3, r2, #21
   19e3c:	d532      	bpl.n	19ea4 <__ssputs_r+0xa8>
   19e3e:	0029      	movs	r1, r5
   19e40:	0038      	movs	r0, r7
   19e42:	f7ff f935 	bl	190b0 <_malloc_r>
   19e46:	1e06      	subs	r6, r0, #0
   19e48:	d109      	bne.n	19e5e <__ssputs_r+0x62>
   19e4a:	230c      	movs	r3, #12
   19e4c:	603b      	str	r3, [r7, #0]
   19e4e:	2340      	movs	r3, #64	; 0x40
   19e50:	2001      	movs	r0, #1
   19e52:	89a2      	ldrh	r2, [r4, #12]
   19e54:	4240      	negs	r0, r0
   19e56:	4313      	orrs	r3, r2
   19e58:	81a3      	strh	r3, [r4, #12]
   19e5a:	b005      	add	sp, #20
   19e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e5e:	9a02      	ldr	r2, [sp, #8]
   19e60:	6921      	ldr	r1, [r4, #16]
   19e62:	f7ff f8b7 	bl	18fd4 <memcpy>
   19e66:	89a3      	ldrh	r3, [r4, #12]
   19e68:	4a14      	ldr	r2, [pc, #80]	; (19ebc <__ssputs_r+0xc0>)
   19e6a:	401a      	ands	r2, r3
   19e6c:	2380      	movs	r3, #128	; 0x80
   19e6e:	4313      	orrs	r3, r2
   19e70:	81a3      	strh	r3, [r4, #12]
   19e72:	9b02      	ldr	r3, [sp, #8]
   19e74:	6126      	str	r6, [r4, #16]
   19e76:	18f6      	adds	r6, r6, r3
   19e78:	6026      	str	r6, [r4, #0]
   19e7a:	6165      	str	r5, [r4, #20]
   19e7c:	9e01      	ldr	r6, [sp, #4]
   19e7e:	1aed      	subs	r5, r5, r3
   19e80:	60a5      	str	r5, [r4, #8]
   19e82:	9b01      	ldr	r3, [sp, #4]
   19e84:	42b3      	cmp	r3, r6
   19e86:	d200      	bcs.n	19e8a <__ssputs_r+0x8e>
   19e88:	001e      	movs	r6, r3
   19e8a:	0032      	movs	r2, r6
   19e8c:	9903      	ldr	r1, [sp, #12]
   19e8e:	6820      	ldr	r0, [r4, #0]
   19e90:	f7ff f8a9 	bl	18fe6 <memmove>
   19e94:	68a3      	ldr	r3, [r4, #8]
   19e96:	2000      	movs	r0, #0
   19e98:	1b9b      	subs	r3, r3, r6
   19e9a:	60a3      	str	r3, [r4, #8]
   19e9c:	6823      	ldr	r3, [r4, #0]
   19e9e:	199e      	adds	r6, r3, r6
   19ea0:	6026      	str	r6, [r4, #0]
   19ea2:	e7da      	b.n	19e5a <__ssputs_r+0x5e>
   19ea4:	002a      	movs	r2, r5
   19ea6:	0038      	movs	r0, r7
   19ea8:	f001 fa07 	bl	1b2ba <_realloc_r>
   19eac:	1e06      	subs	r6, r0, #0
   19eae:	d1e0      	bne.n	19e72 <__ssputs_r+0x76>
   19eb0:	6921      	ldr	r1, [r4, #16]
   19eb2:	0038      	movs	r0, r7
   19eb4:	f7ff f8b2 	bl	1901c <_free_r>
   19eb8:	e7c7      	b.n	19e4a <__ssputs_r+0x4e>
   19eba:	46c0      	nop			; (mov r8, r8)
   19ebc:	fffffb7f 	.word	0xfffffb7f

00019ec0 <_svfiprintf_r>:
   19ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ec2:	b09f      	sub	sp, #124	; 0x7c
   19ec4:	9002      	str	r0, [sp, #8]
   19ec6:	9305      	str	r3, [sp, #20]
   19ec8:	898b      	ldrh	r3, [r1, #12]
   19eca:	000f      	movs	r7, r1
   19ecc:	0016      	movs	r6, r2
   19ece:	061b      	lsls	r3, r3, #24
   19ed0:	d511      	bpl.n	19ef6 <_svfiprintf_r+0x36>
   19ed2:	690b      	ldr	r3, [r1, #16]
   19ed4:	2b00      	cmp	r3, #0
   19ed6:	d10e      	bne.n	19ef6 <_svfiprintf_r+0x36>
   19ed8:	2140      	movs	r1, #64	; 0x40
   19eda:	f7ff f8e9 	bl	190b0 <_malloc_r>
   19ede:	6038      	str	r0, [r7, #0]
   19ee0:	6138      	str	r0, [r7, #16]
   19ee2:	2800      	cmp	r0, #0
   19ee4:	d105      	bne.n	19ef2 <_svfiprintf_r+0x32>
   19ee6:	230c      	movs	r3, #12
   19ee8:	9a02      	ldr	r2, [sp, #8]
   19eea:	3801      	subs	r0, #1
   19eec:	6013      	str	r3, [r2, #0]
   19eee:	b01f      	add	sp, #124	; 0x7c
   19ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ef2:	2340      	movs	r3, #64	; 0x40
   19ef4:	617b      	str	r3, [r7, #20]
   19ef6:	2300      	movs	r3, #0
   19ef8:	ad06      	add	r5, sp, #24
   19efa:	616b      	str	r3, [r5, #20]
   19efc:	3320      	adds	r3, #32
   19efe:	766b      	strb	r3, [r5, #25]
   19f00:	3310      	adds	r3, #16
   19f02:	76ab      	strb	r3, [r5, #26]
   19f04:	0034      	movs	r4, r6
   19f06:	7823      	ldrb	r3, [r4, #0]
   19f08:	2b00      	cmp	r3, #0
   19f0a:	d147      	bne.n	19f9c <_svfiprintf_r+0xdc>
   19f0c:	1ba3      	subs	r3, r4, r6
   19f0e:	9304      	str	r3, [sp, #16]
   19f10:	d00d      	beq.n	19f2e <_svfiprintf_r+0x6e>
   19f12:	1ba3      	subs	r3, r4, r6
   19f14:	0032      	movs	r2, r6
   19f16:	0039      	movs	r1, r7
   19f18:	9802      	ldr	r0, [sp, #8]
   19f1a:	f7ff ff6f 	bl	19dfc <__ssputs_r>
   19f1e:	1c43      	adds	r3, r0, #1
   19f20:	d100      	bne.n	19f24 <_svfiprintf_r+0x64>
   19f22:	e0b5      	b.n	1a090 <_svfiprintf_r+0x1d0>
   19f24:	696a      	ldr	r2, [r5, #20]
   19f26:	9b04      	ldr	r3, [sp, #16]
   19f28:	4694      	mov	ip, r2
   19f2a:	4463      	add	r3, ip
   19f2c:	616b      	str	r3, [r5, #20]
   19f2e:	7823      	ldrb	r3, [r4, #0]
   19f30:	2b00      	cmp	r3, #0
   19f32:	d100      	bne.n	19f36 <_svfiprintf_r+0x76>
   19f34:	e0ac      	b.n	1a090 <_svfiprintf_r+0x1d0>
   19f36:	2201      	movs	r2, #1
   19f38:	2300      	movs	r3, #0
   19f3a:	4252      	negs	r2, r2
   19f3c:	606a      	str	r2, [r5, #4]
   19f3e:	a902      	add	r1, sp, #8
   19f40:	3254      	adds	r2, #84	; 0x54
   19f42:	1852      	adds	r2, r2, r1
   19f44:	3401      	adds	r4, #1
   19f46:	602b      	str	r3, [r5, #0]
   19f48:	60eb      	str	r3, [r5, #12]
   19f4a:	60ab      	str	r3, [r5, #8]
   19f4c:	7013      	strb	r3, [r2, #0]
   19f4e:	65ab      	str	r3, [r5, #88]	; 0x58
   19f50:	4e58      	ldr	r6, [pc, #352]	; (1a0b4 <_svfiprintf_r+0x1f4>)
   19f52:	2205      	movs	r2, #5
   19f54:	7821      	ldrb	r1, [r4, #0]
   19f56:	0030      	movs	r0, r6
   19f58:	f001 f9a4 	bl	1b2a4 <memchr>
   19f5c:	1c62      	adds	r2, r4, #1
   19f5e:	2800      	cmp	r0, #0
   19f60:	d120      	bne.n	19fa4 <_svfiprintf_r+0xe4>
   19f62:	6829      	ldr	r1, [r5, #0]
   19f64:	06cb      	lsls	r3, r1, #27
   19f66:	d504      	bpl.n	19f72 <_svfiprintf_r+0xb2>
   19f68:	2353      	movs	r3, #83	; 0x53
   19f6a:	ae02      	add	r6, sp, #8
   19f6c:	3020      	adds	r0, #32
   19f6e:	199b      	adds	r3, r3, r6
   19f70:	7018      	strb	r0, [r3, #0]
   19f72:	070b      	lsls	r3, r1, #28
   19f74:	d504      	bpl.n	19f80 <_svfiprintf_r+0xc0>
   19f76:	2353      	movs	r3, #83	; 0x53
   19f78:	202b      	movs	r0, #43	; 0x2b
   19f7a:	ae02      	add	r6, sp, #8
   19f7c:	199b      	adds	r3, r3, r6
   19f7e:	7018      	strb	r0, [r3, #0]
   19f80:	7823      	ldrb	r3, [r4, #0]
   19f82:	2b2a      	cmp	r3, #42	; 0x2a
   19f84:	d016      	beq.n	19fb4 <_svfiprintf_r+0xf4>
   19f86:	2000      	movs	r0, #0
   19f88:	210a      	movs	r1, #10
   19f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19f8c:	7822      	ldrb	r2, [r4, #0]
   19f8e:	3a30      	subs	r2, #48	; 0x30
   19f90:	2a09      	cmp	r2, #9
   19f92:	d955      	bls.n	1a040 <_svfiprintf_r+0x180>
   19f94:	2800      	cmp	r0, #0
   19f96:	d015      	beq.n	19fc4 <_svfiprintf_r+0x104>
   19f98:	9309      	str	r3, [sp, #36]	; 0x24
   19f9a:	e013      	b.n	19fc4 <_svfiprintf_r+0x104>
   19f9c:	2b25      	cmp	r3, #37	; 0x25
   19f9e:	d0b5      	beq.n	19f0c <_svfiprintf_r+0x4c>
   19fa0:	3401      	adds	r4, #1
   19fa2:	e7b0      	b.n	19f06 <_svfiprintf_r+0x46>
   19fa4:	2301      	movs	r3, #1
   19fa6:	1b80      	subs	r0, r0, r6
   19fa8:	4083      	lsls	r3, r0
   19faa:	6829      	ldr	r1, [r5, #0]
   19fac:	0014      	movs	r4, r2
   19fae:	430b      	orrs	r3, r1
   19fb0:	602b      	str	r3, [r5, #0]
   19fb2:	e7cd      	b.n	19f50 <_svfiprintf_r+0x90>
   19fb4:	9b05      	ldr	r3, [sp, #20]
   19fb6:	1d18      	adds	r0, r3, #4
   19fb8:	681b      	ldr	r3, [r3, #0]
   19fba:	9005      	str	r0, [sp, #20]
   19fbc:	2b00      	cmp	r3, #0
   19fbe:	db39      	blt.n	1a034 <_svfiprintf_r+0x174>
   19fc0:	9309      	str	r3, [sp, #36]	; 0x24
   19fc2:	0014      	movs	r4, r2
   19fc4:	7823      	ldrb	r3, [r4, #0]
   19fc6:	2b2e      	cmp	r3, #46	; 0x2e
   19fc8:	d10b      	bne.n	19fe2 <_svfiprintf_r+0x122>
   19fca:	7863      	ldrb	r3, [r4, #1]
   19fcc:	1c62      	adds	r2, r4, #1
   19fce:	2b2a      	cmp	r3, #42	; 0x2a
   19fd0:	d13e      	bne.n	1a050 <_svfiprintf_r+0x190>
   19fd2:	9b05      	ldr	r3, [sp, #20]
   19fd4:	3402      	adds	r4, #2
   19fd6:	1d1a      	adds	r2, r3, #4
   19fd8:	681b      	ldr	r3, [r3, #0]
   19fda:	9205      	str	r2, [sp, #20]
   19fdc:	2b00      	cmp	r3, #0
   19fde:	db34      	blt.n	1a04a <_svfiprintf_r+0x18a>
   19fe0:	9307      	str	r3, [sp, #28]
   19fe2:	4e35      	ldr	r6, [pc, #212]	; (1a0b8 <_svfiprintf_r+0x1f8>)
   19fe4:	7821      	ldrb	r1, [r4, #0]
   19fe6:	2203      	movs	r2, #3
   19fe8:	0030      	movs	r0, r6
   19fea:	f001 f95b 	bl	1b2a4 <memchr>
   19fee:	2800      	cmp	r0, #0
   19ff0:	d006      	beq.n	1a000 <_svfiprintf_r+0x140>
   19ff2:	2340      	movs	r3, #64	; 0x40
   19ff4:	1b80      	subs	r0, r0, r6
   19ff6:	4083      	lsls	r3, r0
   19ff8:	682a      	ldr	r2, [r5, #0]
   19ffa:	3401      	adds	r4, #1
   19ffc:	4313      	orrs	r3, r2
   19ffe:	602b      	str	r3, [r5, #0]
   1a000:	7821      	ldrb	r1, [r4, #0]
   1a002:	2206      	movs	r2, #6
   1a004:	482d      	ldr	r0, [pc, #180]	; (1a0bc <_svfiprintf_r+0x1fc>)
   1a006:	1c66      	adds	r6, r4, #1
   1a008:	7629      	strb	r1, [r5, #24]
   1a00a:	f001 f94b 	bl	1b2a4 <memchr>
   1a00e:	2800      	cmp	r0, #0
   1a010:	d046      	beq.n	1a0a0 <_svfiprintf_r+0x1e0>
   1a012:	4b2b      	ldr	r3, [pc, #172]	; (1a0c0 <_svfiprintf_r+0x200>)
   1a014:	2b00      	cmp	r3, #0
   1a016:	d12f      	bne.n	1a078 <_svfiprintf_r+0x1b8>
   1a018:	6829      	ldr	r1, [r5, #0]
   1a01a:	9b05      	ldr	r3, [sp, #20]
   1a01c:	2207      	movs	r2, #7
   1a01e:	05c9      	lsls	r1, r1, #23
   1a020:	d528      	bpl.n	1a074 <_svfiprintf_r+0x1b4>
   1a022:	189b      	adds	r3, r3, r2
   1a024:	4393      	bics	r3, r2
   1a026:	3308      	adds	r3, #8
   1a028:	9305      	str	r3, [sp, #20]
   1a02a:	696b      	ldr	r3, [r5, #20]
   1a02c:	9a03      	ldr	r2, [sp, #12]
   1a02e:	189b      	adds	r3, r3, r2
   1a030:	616b      	str	r3, [r5, #20]
   1a032:	e767      	b.n	19f04 <_svfiprintf_r+0x44>
   1a034:	425b      	negs	r3, r3
   1a036:	60eb      	str	r3, [r5, #12]
   1a038:	2302      	movs	r3, #2
   1a03a:	430b      	orrs	r3, r1
   1a03c:	602b      	str	r3, [r5, #0]
   1a03e:	e7c0      	b.n	19fc2 <_svfiprintf_r+0x102>
   1a040:	434b      	muls	r3, r1
   1a042:	3401      	adds	r4, #1
   1a044:	189b      	adds	r3, r3, r2
   1a046:	2001      	movs	r0, #1
   1a048:	e7a0      	b.n	19f8c <_svfiprintf_r+0xcc>
   1a04a:	2301      	movs	r3, #1
   1a04c:	425b      	negs	r3, r3
   1a04e:	e7c7      	b.n	19fe0 <_svfiprintf_r+0x120>
   1a050:	2300      	movs	r3, #0
   1a052:	0014      	movs	r4, r2
   1a054:	200a      	movs	r0, #10
   1a056:	001a      	movs	r2, r3
   1a058:	606b      	str	r3, [r5, #4]
   1a05a:	7821      	ldrb	r1, [r4, #0]
   1a05c:	3930      	subs	r1, #48	; 0x30
   1a05e:	2909      	cmp	r1, #9
   1a060:	d903      	bls.n	1a06a <_svfiprintf_r+0x1aa>
   1a062:	2b00      	cmp	r3, #0
   1a064:	d0bd      	beq.n	19fe2 <_svfiprintf_r+0x122>
   1a066:	9207      	str	r2, [sp, #28]
   1a068:	e7bb      	b.n	19fe2 <_svfiprintf_r+0x122>
   1a06a:	4342      	muls	r2, r0
   1a06c:	3401      	adds	r4, #1
   1a06e:	1852      	adds	r2, r2, r1
   1a070:	2301      	movs	r3, #1
   1a072:	e7f2      	b.n	1a05a <_svfiprintf_r+0x19a>
   1a074:	3307      	adds	r3, #7
   1a076:	e7d5      	b.n	1a024 <_svfiprintf_r+0x164>
   1a078:	ab05      	add	r3, sp, #20
   1a07a:	9300      	str	r3, [sp, #0]
   1a07c:	003a      	movs	r2, r7
   1a07e:	4b11      	ldr	r3, [pc, #68]	; (1a0c4 <_svfiprintf_r+0x204>)
   1a080:	0029      	movs	r1, r5
   1a082:	9802      	ldr	r0, [sp, #8]
   1a084:	e000      	b.n	1a088 <_svfiprintf_r+0x1c8>
   1a086:	bf00      	nop
   1a088:	9003      	str	r0, [sp, #12]
   1a08a:	9b03      	ldr	r3, [sp, #12]
   1a08c:	3301      	adds	r3, #1
   1a08e:	d1cc      	bne.n	1a02a <_svfiprintf_r+0x16a>
   1a090:	89bb      	ldrh	r3, [r7, #12]
   1a092:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1a094:	065b      	lsls	r3, r3, #25
   1a096:	d400      	bmi.n	1a09a <_svfiprintf_r+0x1da>
   1a098:	e729      	b.n	19eee <_svfiprintf_r+0x2e>
   1a09a:	2001      	movs	r0, #1
   1a09c:	4240      	negs	r0, r0
   1a09e:	e726      	b.n	19eee <_svfiprintf_r+0x2e>
   1a0a0:	ab05      	add	r3, sp, #20
   1a0a2:	9300      	str	r3, [sp, #0]
   1a0a4:	003a      	movs	r2, r7
   1a0a6:	4b07      	ldr	r3, [pc, #28]	; (1a0c4 <_svfiprintf_r+0x204>)
   1a0a8:	0029      	movs	r1, r5
   1a0aa:	9802      	ldr	r0, [sp, #8]
   1a0ac:	f000 f9be 	bl	1a42c <_printf_i>
   1a0b0:	e7ea      	b.n	1a088 <_svfiprintf_r+0x1c8>
   1a0b2:	46c0      	nop			; (mov r8, r8)
   1a0b4:	0001dd3e 	.word	0x0001dd3e
   1a0b8:	0001dd44 	.word	0x0001dd44
   1a0bc:	0001dd48 	.word	0x0001dd48
   1a0c0:	00000000 	.word	0x00000000
   1a0c4:	00019dfd 	.word	0x00019dfd

0001a0c8 <__sfputc_r>:
   1a0c8:	6893      	ldr	r3, [r2, #8]
   1a0ca:	b510      	push	{r4, lr}
   1a0cc:	3b01      	subs	r3, #1
   1a0ce:	6093      	str	r3, [r2, #8]
   1a0d0:	2b00      	cmp	r3, #0
   1a0d2:	da05      	bge.n	1a0e0 <__sfputc_r+0x18>
   1a0d4:	6994      	ldr	r4, [r2, #24]
   1a0d6:	42a3      	cmp	r3, r4
   1a0d8:	db08      	blt.n	1a0ec <__sfputc_r+0x24>
   1a0da:	b2cb      	uxtb	r3, r1
   1a0dc:	2b0a      	cmp	r3, #10
   1a0de:	d005      	beq.n	1a0ec <__sfputc_r+0x24>
   1a0e0:	6813      	ldr	r3, [r2, #0]
   1a0e2:	1c58      	adds	r0, r3, #1
   1a0e4:	6010      	str	r0, [r2, #0]
   1a0e6:	7019      	strb	r1, [r3, #0]
   1a0e8:	b2c8      	uxtb	r0, r1
   1a0ea:	bd10      	pop	{r4, pc}
   1a0ec:	f7ff fb6c 	bl	197c8 <__swbuf_r>
   1a0f0:	e7fb      	b.n	1a0ea <__sfputc_r+0x22>

0001a0f2 <__sfputs_r>:
   1a0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a0f4:	0006      	movs	r6, r0
   1a0f6:	000f      	movs	r7, r1
   1a0f8:	0014      	movs	r4, r2
   1a0fa:	18d5      	adds	r5, r2, r3
   1a0fc:	42ac      	cmp	r4, r5
   1a0fe:	d101      	bne.n	1a104 <__sfputs_r+0x12>
   1a100:	2000      	movs	r0, #0
   1a102:	e007      	b.n	1a114 <__sfputs_r+0x22>
   1a104:	7821      	ldrb	r1, [r4, #0]
   1a106:	003a      	movs	r2, r7
   1a108:	0030      	movs	r0, r6
   1a10a:	f7ff ffdd 	bl	1a0c8 <__sfputc_r>
   1a10e:	3401      	adds	r4, #1
   1a110:	1c43      	adds	r3, r0, #1
   1a112:	d1f3      	bne.n	1a0fc <__sfputs_r+0xa>
   1a114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001a118 <_vfiprintf_r>:
   1a118:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a11a:	b09f      	sub	sp, #124	; 0x7c
   1a11c:	0006      	movs	r6, r0
   1a11e:	000f      	movs	r7, r1
   1a120:	0014      	movs	r4, r2
   1a122:	9305      	str	r3, [sp, #20]
   1a124:	2800      	cmp	r0, #0
   1a126:	d004      	beq.n	1a132 <_vfiprintf_r+0x1a>
   1a128:	6983      	ldr	r3, [r0, #24]
   1a12a:	2b00      	cmp	r3, #0
   1a12c:	d101      	bne.n	1a132 <_vfiprintf_r+0x1a>
   1a12e:	f7ff fd23 	bl	19b78 <__sinit>
   1a132:	4b7f      	ldr	r3, [pc, #508]	; (1a330 <_vfiprintf_r+0x218>)
   1a134:	429f      	cmp	r7, r3
   1a136:	d15c      	bne.n	1a1f2 <_vfiprintf_r+0xda>
   1a138:	6877      	ldr	r7, [r6, #4]
   1a13a:	89bb      	ldrh	r3, [r7, #12]
   1a13c:	071b      	lsls	r3, r3, #28
   1a13e:	d562      	bpl.n	1a206 <_vfiprintf_r+0xee>
   1a140:	693b      	ldr	r3, [r7, #16]
   1a142:	2b00      	cmp	r3, #0
   1a144:	d05f      	beq.n	1a206 <_vfiprintf_r+0xee>
   1a146:	2300      	movs	r3, #0
   1a148:	ad06      	add	r5, sp, #24
   1a14a:	616b      	str	r3, [r5, #20]
   1a14c:	3320      	adds	r3, #32
   1a14e:	766b      	strb	r3, [r5, #25]
   1a150:	3310      	adds	r3, #16
   1a152:	76ab      	strb	r3, [r5, #26]
   1a154:	9402      	str	r4, [sp, #8]
   1a156:	9c02      	ldr	r4, [sp, #8]
   1a158:	7823      	ldrb	r3, [r4, #0]
   1a15a:	2b00      	cmp	r3, #0
   1a15c:	d15d      	bne.n	1a21a <_vfiprintf_r+0x102>
   1a15e:	9b02      	ldr	r3, [sp, #8]
   1a160:	1ae3      	subs	r3, r4, r3
   1a162:	9304      	str	r3, [sp, #16]
   1a164:	d00d      	beq.n	1a182 <_vfiprintf_r+0x6a>
   1a166:	9b04      	ldr	r3, [sp, #16]
   1a168:	9a02      	ldr	r2, [sp, #8]
   1a16a:	0039      	movs	r1, r7
   1a16c:	0030      	movs	r0, r6
   1a16e:	f7ff ffc0 	bl	1a0f2 <__sfputs_r>
   1a172:	1c43      	adds	r3, r0, #1
   1a174:	d100      	bne.n	1a178 <_vfiprintf_r+0x60>
   1a176:	e0cc      	b.n	1a312 <_vfiprintf_r+0x1fa>
   1a178:	696a      	ldr	r2, [r5, #20]
   1a17a:	9b04      	ldr	r3, [sp, #16]
   1a17c:	4694      	mov	ip, r2
   1a17e:	4463      	add	r3, ip
   1a180:	616b      	str	r3, [r5, #20]
   1a182:	7823      	ldrb	r3, [r4, #0]
   1a184:	2b00      	cmp	r3, #0
   1a186:	d100      	bne.n	1a18a <_vfiprintf_r+0x72>
   1a188:	e0c3      	b.n	1a312 <_vfiprintf_r+0x1fa>
   1a18a:	2201      	movs	r2, #1
   1a18c:	2300      	movs	r3, #0
   1a18e:	4252      	negs	r2, r2
   1a190:	606a      	str	r2, [r5, #4]
   1a192:	a902      	add	r1, sp, #8
   1a194:	3254      	adds	r2, #84	; 0x54
   1a196:	1852      	adds	r2, r2, r1
   1a198:	3401      	adds	r4, #1
   1a19a:	602b      	str	r3, [r5, #0]
   1a19c:	60eb      	str	r3, [r5, #12]
   1a19e:	60ab      	str	r3, [r5, #8]
   1a1a0:	7013      	strb	r3, [r2, #0]
   1a1a2:	65ab      	str	r3, [r5, #88]	; 0x58
   1a1a4:	7821      	ldrb	r1, [r4, #0]
   1a1a6:	2205      	movs	r2, #5
   1a1a8:	4862      	ldr	r0, [pc, #392]	; (1a334 <_vfiprintf_r+0x21c>)
   1a1aa:	f001 f87b 	bl	1b2a4 <memchr>
   1a1ae:	1c63      	adds	r3, r4, #1
   1a1b0:	469c      	mov	ip, r3
   1a1b2:	2800      	cmp	r0, #0
   1a1b4:	d135      	bne.n	1a222 <_vfiprintf_r+0x10a>
   1a1b6:	6829      	ldr	r1, [r5, #0]
   1a1b8:	06cb      	lsls	r3, r1, #27
   1a1ba:	d504      	bpl.n	1a1c6 <_vfiprintf_r+0xae>
   1a1bc:	2353      	movs	r3, #83	; 0x53
   1a1be:	aa02      	add	r2, sp, #8
   1a1c0:	3020      	adds	r0, #32
   1a1c2:	189b      	adds	r3, r3, r2
   1a1c4:	7018      	strb	r0, [r3, #0]
   1a1c6:	070b      	lsls	r3, r1, #28
   1a1c8:	d504      	bpl.n	1a1d4 <_vfiprintf_r+0xbc>
   1a1ca:	2353      	movs	r3, #83	; 0x53
   1a1cc:	202b      	movs	r0, #43	; 0x2b
   1a1ce:	aa02      	add	r2, sp, #8
   1a1d0:	189b      	adds	r3, r3, r2
   1a1d2:	7018      	strb	r0, [r3, #0]
   1a1d4:	7823      	ldrb	r3, [r4, #0]
   1a1d6:	2b2a      	cmp	r3, #42	; 0x2a
   1a1d8:	d02c      	beq.n	1a234 <_vfiprintf_r+0x11c>
   1a1da:	2000      	movs	r0, #0
   1a1dc:	210a      	movs	r1, #10
   1a1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a1e0:	7822      	ldrb	r2, [r4, #0]
   1a1e2:	3a30      	subs	r2, #48	; 0x30
   1a1e4:	2a09      	cmp	r2, #9
   1a1e6:	d800      	bhi.n	1a1ea <_vfiprintf_r+0xd2>
   1a1e8:	e06b      	b.n	1a2c2 <_vfiprintf_r+0x1aa>
   1a1ea:	2800      	cmp	r0, #0
   1a1ec:	d02a      	beq.n	1a244 <_vfiprintf_r+0x12c>
   1a1ee:	9309      	str	r3, [sp, #36]	; 0x24
   1a1f0:	e028      	b.n	1a244 <_vfiprintf_r+0x12c>
   1a1f2:	4b51      	ldr	r3, [pc, #324]	; (1a338 <_vfiprintf_r+0x220>)
   1a1f4:	429f      	cmp	r7, r3
   1a1f6:	d101      	bne.n	1a1fc <_vfiprintf_r+0xe4>
   1a1f8:	68b7      	ldr	r7, [r6, #8]
   1a1fa:	e79e      	b.n	1a13a <_vfiprintf_r+0x22>
   1a1fc:	4b4f      	ldr	r3, [pc, #316]	; (1a33c <_vfiprintf_r+0x224>)
   1a1fe:	429f      	cmp	r7, r3
   1a200:	d19b      	bne.n	1a13a <_vfiprintf_r+0x22>
   1a202:	68f7      	ldr	r7, [r6, #12]
   1a204:	e799      	b.n	1a13a <_vfiprintf_r+0x22>
   1a206:	0039      	movs	r1, r7
   1a208:	0030      	movs	r0, r6
   1a20a:	f7ff fb33 	bl	19874 <__swsetup_r>
   1a20e:	2800      	cmp	r0, #0
   1a210:	d099      	beq.n	1a146 <_vfiprintf_r+0x2e>
   1a212:	2001      	movs	r0, #1
   1a214:	4240      	negs	r0, r0
   1a216:	b01f      	add	sp, #124	; 0x7c
   1a218:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a21a:	2b25      	cmp	r3, #37	; 0x25
   1a21c:	d09f      	beq.n	1a15e <_vfiprintf_r+0x46>
   1a21e:	3401      	adds	r4, #1
   1a220:	e79a      	b.n	1a158 <_vfiprintf_r+0x40>
   1a222:	4b44      	ldr	r3, [pc, #272]	; (1a334 <_vfiprintf_r+0x21c>)
   1a224:	6829      	ldr	r1, [r5, #0]
   1a226:	1ac0      	subs	r0, r0, r3
   1a228:	2301      	movs	r3, #1
   1a22a:	4083      	lsls	r3, r0
   1a22c:	430b      	orrs	r3, r1
   1a22e:	602b      	str	r3, [r5, #0]
   1a230:	4664      	mov	r4, ip
   1a232:	e7b7      	b.n	1a1a4 <_vfiprintf_r+0x8c>
   1a234:	9b05      	ldr	r3, [sp, #20]
   1a236:	1d18      	adds	r0, r3, #4
   1a238:	681b      	ldr	r3, [r3, #0]
   1a23a:	9005      	str	r0, [sp, #20]
   1a23c:	2b00      	cmp	r3, #0
   1a23e:	db3a      	blt.n	1a2b6 <_vfiprintf_r+0x19e>
   1a240:	9309      	str	r3, [sp, #36]	; 0x24
   1a242:	4664      	mov	r4, ip
   1a244:	7823      	ldrb	r3, [r4, #0]
   1a246:	2b2e      	cmp	r3, #46	; 0x2e
   1a248:	d10b      	bne.n	1a262 <_vfiprintf_r+0x14a>
   1a24a:	7863      	ldrb	r3, [r4, #1]
   1a24c:	1c62      	adds	r2, r4, #1
   1a24e:	2b2a      	cmp	r3, #42	; 0x2a
   1a250:	d13f      	bne.n	1a2d2 <_vfiprintf_r+0x1ba>
   1a252:	9b05      	ldr	r3, [sp, #20]
   1a254:	3402      	adds	r4, #2
   1a256:	1d1a      	adds	r2, r3, #4
   1a258:	681b      	ldr	r3, [r3, #0]
   1a25a:	9205      	str	r2, [sp, #20]
   1a25c:	2b00      	cmp	r3, #0
   1a25e:	db35      	blt.n	1a2cc <_vfiprintf_r+0x1b4>
   1a260:	9307      	str	r3, [sp, #28]
   1a262:	7821      	ldrb	r1, [r4, #0]
   1a264:	2203      	movs	r2, #3
   1a266:	4836      	ldr	r0, [pc, #216]	; (1a340 <_vfiprintf_r+0x228>)
   1a268:	f001 f81c 	bl	1b2a4 <memchr>
   1a26c:	2800      	cmp	r0, #0
   1a26e:	d007      	beq.n	1a280 <_vfiprintf_r+0x168>
   1a270:	4b33      	ldr	r3, [pc, #204]	; (1a340 <_vfiprintf_r+0x228>)
   1a272:	682a      	ldr	r2, [r5, #0]
   1a274:	1ac0      	subs	r0, r0, r3
   1a276:	2340      	movs	r3, #64	; 0x40
   1a278:	4083      	lsls	r3, r0
   1a27a:	4313      	orrs	r3, r2
   1a27c:	602b      	str	r3, [r5, #0]
   1a27e:	3401      	adds	r4, #1
   1a280:	7821      	ldrb	r1, [r4, #0]
   1a282:	1c63      	adds	r3, r4, #1
   1a284:	2206      	movs	r2, #6
   1a286:	482f      	ldr	r0, [pc, #188]	; (1a344 <_vfiprintf_r+0x22c>)
   1a288:	9302      	str	r3, [sp, #8]
   1a28a:	7629      	strb	r1, [r5, #24]
   1a28c:	f001 f80a 	bl	1b2a4 <memchr>
   1a290:	2800      	cmp	r0, #0
   1a292:	d044      	beq.n	1a31e <_vfiprintf_r+0x206>
   1a294:	4b2c      	ldr	r3, [pc, #176]	; (1a348 <_vfiprintf_r+0x230>)
   1a296:	2b00      	cmp	r3, #0
   1a298:	d12f      	bne.n	1a2fa <_vfiprintf_r+0x1e2>
   1a29a:	6829      	ldr	r1, [r5, #0]
   1a29c:	9b05      	ldr	r3, [sp, #20]
   1a29e:	2207      	movs	r2, #7
   1a2a0:	05c9      	lsls	r1, r1, #23
   1a2a2:	d528      	bpl.n	1a2f6 <_vfiprintf_r+0x1de>
   1a2a4:	189b      	adds	r3, r3, r2
   1a2a6:	4393      	bics	r3, r2
   1a2a8:	3308      	adds	r3, #8
   1a2aa:	9305      	str	r3, [sp, #20]
   1a2ac:	696b      	ldr	r3, [r5, #20]
   1a2ae:	9a03      	ldr	r2, [sp, #12]
   1a2b0:	189b      	adds	r3, r3, r2
   1a2b2:	616b      	str	r3, [r5, #20]
   1a2b4:	e74f      	b.n	1a156 <_vfiprintf_r+0x3e>
   1a2b6:	425b      	negs	r3, r3
   1a2b8:	60eb      	str	r3, [r5, #12]
   1a2ba:	2302      	movs	r3, #2
   1a2bc:	430b      	orrs	r3, r1
   1a2be:	602b      	str	r3, [r5, #0]
   1a2c0:	e7bf      	b.n	1a242 <_vfiprintf_r+0x12a>
   1a2c2:	434b      	muls	r3, r1
   1a2c4:	3401      	adds	r4, #1
   1a2c6:	189b      	adds	r3, r3, r2
   1a2c8:	2001      	movs	r0, #1
   1a2ca:	e789      	b.n	1a1e0 <_vfiprintf_r+0xc8>
   1a2cc:	2301      	movs	r3, #1
   1a2ce:	425b      	negs	r3, r3
   1a2d0:	e7c6      	b.n	1a260 <_vfiprintf_r+0x148>
   1a2d2:	2300      	movs	r3, #0
   1a2d4:	0014      	movs	r4, r2
   1a2d6:	200a      	movs	r0, #10
   1a2d8:	001a      	movs	r2, r3
   1a2da:	606b      	str	r3, [r5, #4]
   1a2dc:	7821      	ldrb	r1, [r4, #0]
   1a2de:	3930      	subs	r1, #48	; 0x30
   1a2e0:	2909      	cmp	r1, #9
   1a2e2:	d903      	bls.n	1a2ec <_vfiprintf_r+0x1d4>
   1a2e4:	2b00      	cmp	r3, #0
   1a2e6:	d0bc      	beq.n	1a262 <_vfiprintf_r+0x14a>
   1a2e8:	9207      	str	r2, [sp, #28]
   1a2ea:	e7ba      	b.n	1a262 <_vfiprintf_r+0x14a>
   1a2ec:	4342      	muls	r2, r0
   1a2ee:	3401      	adds	r4, #1
   1a2f0:	1852      	adds	r2, r2, r1
   1a2f2:	2301      	movs	r3, #1
   1a2f4:	e7f2      	b.n	1a2dc <_vfiprintf_r+0x1c4>
   1a2f6:	3307      	adds	r3, #7
   1a2f8:	e7d5      	b.n	1a2a6 <_vfiprintf_r+0x18e>
   1a2fa:	ab05      	add	r3, sp, #20
   1a2fc:	9300      	str	r3, [sp, #0]
   1a2fe:	003a      	movs	r2, r7
   1a300:	4b12      	ldr	r3, [pc, #72]	; (1a34c <_vfiprintf_r+0x234>)
   1a302:	0029      	movs	r1, r5
   1a304:	0030      	movs	r0, r6
   1a306:	e000      	b.n	1a30a <_vfiprintf_r+0x1f2>
   1a308:	bf00      	nop
   1a30a:	9003      	str	r0, [sp, #12]
   1a30c:	9b03      	ldr	r3, [sp, #12]
   1a30e:	3301      	adds	r3, #1
   1a310:	d1cc      	bne.n	1a2ac <_vfiprintf_r+0x194>
   1a312:	89bb      	ldrh	r3, [r7, #12]
   1a314:	065b      	lsls	r3, r3, #25
   1a316:	d500      	bpl.n	1a31a <_vfiprintf_r+0x202>
   1a318:	e77b      	b.n	1a212 <_vfiprintf_r+0xfa>
   1a31a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1a31c:	e77b      	b.n	1a216 <_vfiprintf_r+0xfe>
   1a31e:	ab05      	add	r3, sp, #20
   1a320:	9300      	str	r3, [sp, #0]
   1a322:	003a      	movs	r2, r7
   1a324:	4b09      	ldr	r3, [pc, #36]	; (1a34c <_vfiprintf_r+0x234>)
   1a326:	0029      	movs	r1, r5
   1a328:	0030      	movs	r0, r6
   1a32a:	f000 f87f 	bl	1a42c <_printf_i>
   1a32e:	e7ec      	b.n	1a30a <_vfiprintf_r+0x1f2>
   1a330:	0001dcf4 	.word	0x0001dcf4
   1a334:	0001dd3e 	.word	0x0001dd3e
   1a338:	0001dd14 	.word	0x0001dd14
   1a33c:	0001dcd4 	.word	0x0001dcd4
   1a340:	0001dd44 	.word	0x0001dd44
   1a344:	0001dd48 	.word	0x0001dd48
   1a348:	00000000 	.word	0x00000000
   1a34c:	0001a0f3 	.word	0x0001a0f3

0001a350 <_printf_common>:
   1a350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a352:	0015      	movs	r5, r2
   1a354:	9301      	str	r3, [sp, #4]
   1a356:	688a      	ldr	r2, [r1, #8]
   1a358:	690b      	ldr	r3, [r1, #16]
   1a35a:	9000      	str	r0, [sp, #0]
   1a35c:	000c      	movs	r4, r1
   1a35e:	4293      	cmp	r3, r2
   1a360:	da00      	bge.n	1a364 <_printf_common+0x14>
   1a362:	0013      	movs	r3, r2
   1a364:	0022      	movs	r2, r4
   1a366:	602b      	str	r3, [r5, #0]
   1a368:	3243      	adds	r2, #67	; 0x43
   1a36a:	7812      	ldrb	r2, [r2, #0]
   1a36c:	2a00      	cmp	r2, #0
   1a36e:	d001      	beq.n	1a374 <_printf_common+0x24>
   1a370:	3301      	adds	r3, #1
   1a372:	602b      	str	r3, [r5, #0]
   1a374:	6823      	ldr	r3, [r4, #0]
   1a376:	069b      	lsls	r3, r3, #26
   1a378:	d502      	bpl.n	1a380 <_printf_common+0x30>
   1a37a:	682b      	ldr	r3, [r5, #0]
   1a37c:	3302      	adds	r3, #2
   1a37e:	602b      	str	r3, [r5, #0]
   1a380:	2706      	movs	r7, #6
   1a382:	6823      	ldr	r3, [r4, #0]
   1a384:	401f      	ands	r7, r3
   1a386:	d027      	beq.n	1a3d8 <_printf_common+0x88>
   1a388:	0023      	movs	r3, r4
   1a38a:	3343      	adds	r3, #67	; 0x43
   1a38c:	781b      	ldrb	r3, [r3, #0]
   1a38e:	1e5a      	subs	r2, r3, #1
   1a390:	4193      	sbcs	r3, r2
   1a392:	6822      	ldr	r2, [r4, #0]
   1a394:	0692      	lsls	r2, r2, #26
   1a396:	d430      	bmi.n	1a3fa <_printf_common+0xaa>
   1a398:	0022      	movs	r2, r4
   1a39a:	9901      	ldr	r1, [sp, #4]
   1a39c:	3243      	adds	r2, #67	; 0x43
   1a39e:	9800      	ldr	r0, [sp, #0]
   1a3a0:	9e08      	ldr	r6, [sp, #32]
   1a3a2:	47b0      	blx	r6
   1a3a4:	1c43      	adds	r3, r0, #1
   1a3a6:	d025      	beq.n	1a3f4 <_printf_common+0xa4>
   1a3a8:	2306      	movs	r3, #6
   1a3aa:	6820      	ldr	r0, [r4, #0]
   1a3ac:	682a      	ldr	r2, [r5, #0]
   1a3ae:	68e1      	ldr	r1, [r4, #12]
   1a3b0:	4003      	ands	r3, r0
   1a3b2:	2500      	movs	r5, #0
   1a3b4:	2b04      	cmp	r3, #4
   1a3b6:	d103      	bne.n	1a3c0 <_printf_common+0x70>
   1a3b8:	1a8d      	subs	r5, r1, r2
   1a3ba:	43eb      	mvns	r3, r5
   1a3bc:	17db      	asrs	r3, r3, #31
   1a3be:	401d      	ands	r5, r3
   1a3c0:	68a3      	ldr	r3, [r4, #8]
   1a3c2:	6922      	ldr	r2, [r4, #16]
   1a3c4:	4293      	cmp	r3, r2
   1a3c6:	dd01      	ble.n	1a3cc <_printf_common+0x7c>
   1a3c8:	1a9b      	subs	r3, r3, r2
   1a3ca:	18ed      	adds	r5, r5, r3
   1a3cc:	2700      	movs	r7, #0
   1a3ce:	42bd      	cmp	r5, r7
   1a3d0:	d120      	bne.n	1a414 <_printf_common+0xc4>
   1a3d2:	2000      	movs	r0, #0
   1a3d4:	e010      	b.n	1a3f8 <_printf_common+0xa8>
   1a3d6:	3701      	adds	r7, #1
   1a3d8:	68e3      	ldr	r3, [r4, #12]
   1a3da:	682a      	ldr	r2, [r5, #0]
   1a3dc:	1a9b      	subs	r3, r3, r2
   1a3de:	429f      	cmp	r7, r3
   1a3e0:	dad2      	bge.n	1a388 <_printf_common+0x38>
   1a3e2:	0022      	movs	r2, r4
   1a3e4:	2301      	movs	r3, #1
   1a3e6:	3219      	adds	r2, #25
   1a3e8:	9901      	ldr	r1, [sp, #4]
   1a3ea:	9800      	ldr	r0, [sp, #0]
   1a3ec:	9e08      	ldr	r6, [sp, #32]
   1a3ee:	47b0      	blx	r6
   1a3f0:	1c43      	adds	r3, r0, #1
   1a3f2:	d1f0      	bne.n	1a3d6 <_printf_common+0x86>
   1a3f4:	2001      	movs	r0, #1
   1a3f6:	4240      	negs	r0, r0
   1a3f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1a3fa:	2030      	movs	r0, #48	; 0x30
   1a3fc:	18e1      	adds	r1, r4, r3
   1a3fe:	3143      	adds	r1, #67	; 0x43
   1a400:	7008      	strb	r0, [r1, #0]
   1a402:	0021      	movs	r1, r4
   1a404:	1c5a      	adds	r2, r3, #1
   1a406:	3145      	adds	r1, #69	; 0x45
   1a408:	7809      	ldrb	r1, [r1, #0]
   1a40a:	18a2      	adds	r2, r4, r2
   1a40c:	3243      	adds	r2, #67	; 0x43
   1a40e:	3302      	adds	r3, #2
   1a410:	7011      	strb	r1, [r2, #0]
   1a412:	e7c1      	b.n	1a398 <_printf_common+0x48>
   1a414:	0022      	movs	r2, r4
   1a416:	2301      	movs	r3, #1
   1a418:	321a      	adds	r2, #26
   1a41a:	9901      	ldr	r1, [sp, #4]
   1a41c:	9800      	ldr	r0, [sp, #0]
   1a41e:	9e08      	ldr	r6, [sp, #32]
   1a420:	47b0      	blx	r6
   1a422:	1c43      	adds	r3, r0, #1
   1a424:	d0e6      	beq.n	1a3f4 <_printf_common+0xa4>
   1a426:	3701      	adds	r7, #1
   1a428:	e7d1      	b.n	1a3ce <_printf_common+0x7e>
	...

0001a42c <_printf_i>:
   1a42c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a42e:	b08b      	sub	sp, #44	; 0x2c
   1a430:	9206      	str	r2, [sp, #24]
   1a432:	000a      	movs	r2, r1
   1a434:	3243      	adds	r2, #67	; 0x43
   1a436:	9307      	str	r3, [sp, #28]
   1a438:	9005      	str	r0, [sp, #20]
   1a43a:	9204      	str	r2, [sp, #16]
   1a43c:	7e0a      	ldrb	r2, [r1, #24]
   1a43e:	000c      	movs	r4, r1
   1a440:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1a442:	2a6e      	cmp	r2, #110	; 0x6e
   1a444:	d100      	bne.n	1a448 <_printf_i+0x1c>
   1a446:	e08f      	b.n	1a568 <_printf_i+0x13c>
   1a448:	d817      	bhi.n	1a47a <_printf_i+0x4e>
   1a44a:	2a63      	cmp	r2, #99	; 0x63
   1a44c:	d02c      	beq.n	1a4a8 <_printf_i+0x7c>
   1a44e:	d808      	bhi.n	1a462 <_printf_i+0x36>
   1a450:	2a00      	cmp	r2, #0
   1a452:	d100      	bne.n	1a456 <_printf_i+0x2a>
   1a454:	e099      	b.n	1a58a <_printf_i+0x15e>
   1a456:	2a58      	cmp	r2, #88	; 0x58
   1a458:	d054      	beq.n	1a504 <_printf_i+0xd8>
   1a45a:	0026      	movs	r6, r4
   1a45c:	3642      	adds	r6, #66	; 0x42
   1a45e:	7032      	strb	r2, [r6, #0]
   1a460:	e029      	b.n	1a4b6 <_printf_i+0x8a>
   1a462:	2a64      	cmp	r2, #100	; 0x64
   1a464:	d001      	beq.n	1a46a <_printf_i+0x3e>
   1a466:	2a69      	cmp	r2, #105	; 0x69
   1a468:	d1f7      	bne.n	1a45a <_printf_i+0x2e>
   1a46a:	6821      	ldr	r1, [r4, #0]
   1a46c:	681a      	ldr	r2, [r3, #0]
   1a46e:	0608      	lsls	r0, r1, #24
   1a470:	d523      	bpl.n	1a4ba <_printf_i+0x8e>
   1a472:	1d11      	adds	r1, r2, #4
   1a474:	6019      	str	r1, [r3, #0]
   1a476:	6815      	ldr	r5, [r2, #0]
   1a478:	e025      	b.n	1a4c6 <_printf_i+0x9a>
   1a47a:	2a73      	cmp	r2, #115	; 0x73
   1a47c:	d100      	bne.n	1a480 <_printf_i+0x54>
   1a47e:	e088      	b.n	1a592 <_printf_i+0x166>
   1a480:	d808      	bhi.n	1a494 <_printf_i+0x68>
   1a482:	2a6f      	cmp	r2, #111	; 0x6f
   1a484:	d029      	beq.n	1a4da <_printf_i+0xae>
   1a486:	2a70      	cmp	r2, #112	; 0x70
   1a488:	d1e7      	bne.n	1a45a <_printf_i+0x2e>
   1a48a:	2220      	movs	r2, #32
   1a48c:	6809      	ldr	r1, [r1, #0]
   1a48e:	430a      	orrs	r2, r1
   1a490:	6022      	str	r2, [r4, #0]
   1a492:	e003      	b.n	1a49c <_printf_i+0x70>
   1a494:	2a75      	cmp	r2, #117	; 0x75
   1a496:	d020      	beq.n	1a4da <_printf_i+0xae>
   1a498:	2a78      	cmp	r2, #120	; 0x78
   1a49a:	d1de      	bne.n	1a45a <_printf_i+0x2e>
   1a49c:	0022      	movs	r2, r4
   1a49e:	2178      	movs	r1, #120	; 0x78
   1a4a0:	3245      	adds	r2, #69	; 0x45
   1a4a2:	7011      	strb	r1, [r2, #0]
   1a4a4:	4a6c      	ldr	r2, [pc, #432]	; (1a658 <_printf_i+0x22c>)
   1a4a6:	e030      	b.n	1a50a <_printf_i+0xde>
   1a4a8:	000e      	movs	r6, r1
   1a4aa:	681a      	ldr	r2, [r3, #0]
   1a4ac:	3642      	adds	r6, #66	; 0x42
   1a4ae:	1d11      	adds	r1, r2, #4
   1a4b0:	6019      	str	r1, [r3, #0]
   1a4b2:	6813      	ldr	r3, [r2, #0]
   1a4b4:	7033      	strb	r3, [r6, #0]
   1a4b6:	2301      	movs	r3, #1
   1a4b8:	e079      	b.n	1a5ae <_printf_i+0x182>
   1a4ba:	0649      	lsls	r1, r1, #25
   1a4bc:	d5d9      	bpl.n	1a472 <_printf_i+0x46>
   1a4be:	1d11      	adds	r1, r2, #4
   1a4c0:	6019      	str	r1, [r3, #0]
   1a4c2:	2300      	movs	r3, #0
   1a4c4:	5ed5      	ldrsh	r5, [r2, r3]
   1a4c6:	2d00      	cmp	r5, #0
   1a4c8:	da03      	bge.n	1a4d2 <_printf_i+0xa6>
   1a4ca:	232d      	movs	r3, #45	; 0x2d
   1a4cc:	9a04      	ldr	r2, [sp, #16]
   1a4ce:	426d      	negs	r5, r5
   1a4d0:	7013      	strb	r3, [r2, #0]
   1a4d2:	4b62      	ldr	r3, [pc, #392]	; (1a65c <_printf_i+0x230>)
   1a4d4:	270a      	movs	r7, #10
   1a4d6:	9303      	str	r3, [sp, #12]
   1a4d8:	e02f      	b.n	1a53a <_printf_i+0x10e>
   1a4da:	6820      	ldr	r0, [r4, #0]
   1a4dc:	6819      	ldr	r1, [r3, #0]
   1a4de:	0605      	lsls	r5, r0, #24
   1a4e0:	d503      	bpl.n	1a4ea <_printf_i+0xbe>
   1a4e2:	1d08      	adds	r0, r1, #4
   1a4e4:	6018      	str	r0, [r3, #0]
   1a4e6:	680d      	ldr	r5, [r1, #0]
   1a4e8:	e005      	b.n	1a4f6 <_printf_i+0xca>
   1a4ea:	0640      	lsls	r0, r0, #25
   1a4ec:	d5f9      	bpl.n	1a4e2 <_printf_i+0xb6>
   1a4ee:	680d      	ldr	r5, [r1, #0]
   1a4f0:	1d08      	adds	r0, r1, #4
   1a4f2:	6018      	str	r0, [r3, #0]
   1a4f4:	b2ad      	uxth	r5, r5
   1a4f6:	4b59      	ldr	r3, [pc, #356]	; (1a65c <_printf_i+0x230>)
   1a4f8:	2708      	movs	r7, #8
   1a4fa:	9303      	str	r3, [sp, #12]
   1a4fc:	2a6f      	cmp	r2, #111	; 0x6f
   1a4fe:	d018      	beq.n	1a532 <_printf_i+0x106>
   1a500:	270a      	movs	r7, #10
   1a502:	e016      	b.n	1a532 <_printf_i+0x106>
   1a504:	3145      	adds	r1, #69	; 0x45
   1a506:	700a      	strb	r2, [r1, #0]
   1a508:	4a54      	ldr	r2, [pc, #336]	; (1a65c <_printf_i+0x230>)
   1a50a:	9203      	str	r2, [sp, #12]
   1a50c:	681a      	ldr	r2, [r3, #0]
   1a50e:	6821      	ldr	r1, [r4, #0]
   1a510:	1d10      	adds	r0, r2, #4
   1a512:	6018      	str	r0, [r3, #0]
   1a514:	6815      	ldr	r5, [r2, #0]
   1a516:	0608      	lsls	r0, r1, #24
   1a518:	d522      	bpl.n	1a560 <_printf_i+0x134>
   1a51a:	07cb      	lsls	r3, r1, #31
   1a51c:	d502      	bpl.n	1a524 <_printf_i+0xf8>
   1a51e:	2320      	movs	r3, #32
   1a520:	4319      	orrs	r1, r3
   1a522:	6021      	str	r1, [r4, #0]
   1a524:	2710      	movs	r7, #16
   1a526:	2d00      	cmp	r5, #0
   1a528:	d103      	bne.n	1a532 <_printf_i+0x106>
   1a52a:	2320      	movs	r3, #32
   1a52c:	6822      	ldr	r2, [r4, #0]
   1a52e:	439a      	bics	r2, r3
   1a530:	6022      	str	r2, [r4, #0]
   1a532:	0023      	movs	r3, r4
   1a534:	2200      	movs	r2, #0
   1a536:	3343      	adds	r3, #67	; 0x43
   1a538:	701a      	strb	r2, [r3, #0]
   1a53a:	6863      	ldr	r3, [r4, #4]
   1a53c:	60a3      	str	r3, [r4, #8]
   1a53e:	2b00      	cmp	r3, #0
   1a540:	db5c      	blt.n	1a5fc <_printf_i+0x1d0>
   1a542:	2204      	movs	r2, #4
   1a544:	6821      	ldr	r1, [r4, #0]
   1a546:	4391      	bics	r1, r2
   1a548:	6021      	str	r1, [r4, #0]
   1a54a:	2d00      	cmp	r5, #0
   1a54c:	d158      	bne.n	1a600 <_printf_i+0x1d4>
   1a54e:	9e04      	ldr	r6, [sp, #16]
   1a550:	2b00      	cmp	r3, #0
   1a552:	d064      	beq.n	1a61e <_printf_i+0x1f2>
   1a554:	0026      	movs	r6, r4
   1a556:	9b03      	ldr	r3, [sp, #12]
   1a558:	3642      	adds	r6, #66	; 0x42
   1a55a:	781b      	ldrb	r3, [r3, #0]
   1a55c:	7033      	strb	r3, [r6, #0]
   1a55e:	e05e      	b.n	1a61e <_printf_i+0x1f2>
   1a560:	0648      	lsls	r0, r1, #25
   1a562:	d5da      	bpl.n	1a51a <_printf_i+0xee>
   1a564:	b2ad      	uxth	r5, r5
   1a566:	e7d8      	b.n	1a51a <_printf_i+0xee>
   1a568:	6809      	ldr	r1, [r1, #0]
   1a56a:	681a      	ldr	r2, [r3, #0]
   1a56c:	0608      	lsls	r0, r1, #24
   1a56e:	d505      	bpl.n	1a57c <_printf_i+0x150>
   1a570:	1d11      	adds	r1, r2, #4
   1a572:	6019      	str	r1, [r3, #0]
   1a574:	6813      	ldr	r3, [r2, #0]
   1a576:	6962      	ldr	r2, [r4, #20]
   1a578:	601a      	str	r2, [r3, #0]
   1a57a:	e006      	b.n	1a58a <_printf_i+0x15e>
   1a57c:	0649      	lsls	r1, r1, #25
   1a57e:	d5f7      	bpl.n	1a570 <_printf_i+0x144>
   1a580:	1d11      	adds	r1, r2, #4
   1a582:	6019      	str	r1, [r3, #0]
   1a584:	6813      	ldr	r3, [r2, #0]
   1a586:	8aa2      	ldrh	r2, [r4, #20]
   1a588:	801a      	strh	r2, [r3, #0]
   1a58a:	2300      	movs	r3, #0
   1a58c:	9e04      	ldr	r6, [sp, #16]
   1a58e:	6123      	str	r3, [r4, #16]
   1a590:	e054      	b.n	1a63c <_printf_i+0x210>
   1a592:	681a      	ldr	r2, [r3, #0]
   1a594:	1d11      	adds	r1, r2, #4
   1a596:	6019      	str	r1, [r3, #0]
   1a598:	6816      	ldr	r6, [r2, #0]
   1a59a:	2100      	movs	r1, #0
   1a59c:	6862      	ldr	r2, [r4, #4]
   1a59e:	0030      	movs	r0, r6
   1a5a0:	f000 fe80 	bl	1b2a4 <memchr>
   1a5a4:	2800      	cmp	r0, #0
   1a5a6:	d001      	beq.n	1a5ac <_printf_i+0x180>
   1a5a8:	1b80      	subs	r0, r0, r6
   1a5aa:	6060      	str	r0, [r4, #4]
   1a5ac:	6863      	ldr	r3, [r4, #4]
   1a5ae:	6123      	str	r3, [r4, #16]
   1a5b0:	2300      	movs	r3, #0
   1a5b2:	9a04      	ldr	r2, [sp, #16]
   1a5b4:	7013      	strb	r3, [r2, #0]
   1a5b6:	e041      	b.n	1a63c <_printf_i+0x210>
   1a5b8:	6923      	ldr	r3, [r4, #16]
   1a5ba:	0032      	movs	r2, r6
   1a5bc:	9906      	ldr	r1, [sp, #24]
   1a5be:	9805      	ldr	r0, [sp, #20]
   1a5c0:	9d07      	ldr	r5, [sp, #28]
   1a5c2:	47a8      	blx	r5
   1a5c4:	1c43      	adds	r3, r0, #1
   1a5c6:	d043      	beq.n	1a650 <_printf_i+0x224>
   1a5c8:	6823      	ldr	r3, [r4, #0]
   1a5ca:	2500      	movs	r5, #0
   1a5cc:	079b      	lsls	r3, r3, #30
   1a5ce:	d40f      	bmi.n	1a5f0 <_printf_i+0x1c4>
   1a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a5d2:	68e0      	ldr	r0, [r4, #12]
   1a5d4:	4298      	cmp	r0, r3
   1a5d6:	da3d      	bge.n	1a654 <_printf_i+0x228>
   1a5d8:	0018      	movs	r0, r3
   1a5da:	e03b      	b.n	1a654 <_printf_i+0x228>
   1a5dc:	0022      	movs	r2, r4
   1a5de:	2301      	movs	r3, #1
   1a5e0:	3219      	adds	r2, #25
   1a5e2:	9906      	ldr	r1, [sp, #24]
   1a5e4:	9805      	ldr	r0, [sp, #20]
   1a5e6:	9e07      	ldr	r6, [sp, #28]
   1a5e8:	47b0      	blx	r6
   1a5ea:	1c43      	adds	r3, r0, #1
   1a5ec:	d030      	beq.n	1a650 <_printf_i+0x224>
   1a5ee:	3501      	adds	r5, #1
   1a5f0:	68e3      	ldr	r3, [r4, #12]
   1a5f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a5f4:	1a9b      	subs	r3, r3, r2
   1a5f6:	429d      	cmp	r5, r3
   1a5f8:	dbf0      	blt.n	1a5dc <_printf_i+0x1b0>
   1a5fa:	e7e9      	b.n	1a5d0 <_printf_i+0x1a4>
   1a5fc:	2d00      	cmp	r5, #0
   1a5fe:	d0a9      	beq.n	1a554 <_printf_i+0x128>
   1a600:	9e04      	ldr	r6, [sp, #16]
   1a602:	0028      	movs	r0, r5
   1a604:	0039      	movs	r1, r7
   1a606:	f7fc fd8b 	bl	17120 <__aeabi_uidivmod>
   1a60a:	9b03      	ldr	r3, [sp, #12]
   1a60c:	3e01      	subs	r6, #1
   1a60e:	5c5b      	ldrb	r3, [r3, r1]
   1a610:	0028      	movs	r0, r5
   1a612:	7033      	strb	r3, [r6, #0]
   1a614:	0039      	movs	r1, r7
   1a616:	f7fc fcfd 	bl	17014 <__udivsi3>
   1a61a:	1e05      	subs	r5, r0, #0
   1a61c:	d1f1      	bne.n	1a602 <_printf_i+0x1d6>
   1a61e:	2f08      	cmp	r7, #8
   1a620:	d109      	bne.n	1a636 <_printf_i+0x20a>
   1a622:	6823      	ldr	r3, [r4, #0]
   1a624:	07db      	lsls	r3, r3, #31
   1a626:	d506      	bpl.n	1a636 <_printf_i+0x20a>
   1a628:	6863      	ldr	r3, [r4, #4]
   1a62a:	6922      	ldr	r2, [r4, #16]
   1a62c:	4293      	cmp	r3, r2
   1a62e:	dc02      	bgt.n	1a636 <_printf_i+0x20a>
   1a630:	2330      	movs	r3, #48	; 0x30
   1a632:	3e01      	subs	r6, #1
   1a634:	7033      	strb	r3, [r6, #0]
   1a636:	9b04      	ldr	r3, [sp, #16]
   1a638:	1b9b      	subs	r3, r3, r6
   1a63a:	6123      	str	r3, [r4, #16]
   1a63c:	9b07      	ldr	r3, [sp, #28]
   1a63e:	aa09      	add	r2, sp, #36	; 0x24
   1a640:	9300      	str	r3, [sp, #0]
   1a642:	0021      	movs	r1, r4
   1a644:	9b06      	ldr	r3, [sp, #24]
   1a646:	9805      	ldr	r0, [sp, #20]
   1a648:	f7ff fe82 	bl	1a350 <_printf_common>
   1a64c:	1c43      	adds	r3, r0, #1
   1a64e:	d1b3      	bne.n	1a5b8 <_printf_i+0x18c>
   1a650:	2001      	movs	r0, #1
   1a652:	4240      	negs	r0, r0
   1a654:	b00b      	add	sp, #44	; 0x2c
   1a656:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a658:	0001dd60 	.word	0x0001dd60
   1a65c:	0001dd4f 	.word	0x0001dd4f

0001a660 <__svfiscanf_r>:
   1a660:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a662:	4cbd      	ldr	r4, [pc, #756]	; (1a958 <__svfiscanf_r+0x2f8>)
   1a664:	2586      	movs	r5, #134	; 0x86
   1a666:	44a5      	add	sp, r4
   1a668:	9303      	str	r3, [sp, #12]
   1a66a:	2300      	movs	r3, #0
   1a66c:	9348      	str	r3, [sp, #288]	; 0x120
   1a66e:	9349      	str	r3, [sp, #292]	; 0x124
   1a670:	ab05      	add	r3, sp, #20
   1a672:	934a      	str	r3, [sp, #296]	; 0x128
   1a674:	23be      	movs	r3, #190	; 0xbe
   1a676:	006d      	lsls	r5, r5, #1
   1a678:	9000      	str	r0, [sp, #0]
   1a67a:	000c      	movs	r4, r1
   1a67c:	a802      	add	r0, sp, #8
   1a67e:	49b7      	ldr	r1, [pc, #732]	; (1a95c <__svfiscanf_r+0x2fc>)
   1a680:	005b      	lsls	r3, r3, #1
   1a682:	1940      	adds	r0, r0, r5
   1a684:	27c0      	movs	r7, #192	; 0xc0
   1a686:	50c1      	str	r1, [r0, r3]
   1a688:	ab02      	add	r3, sp, #8
   1a68a:	195b      	adds	r3, r3, r5
   1a68c:	0015      	movs	r5, r2
   1a68e:	49b4      	ldr	r1, [pc, #720]	; (1a960 <__svfiscanf_r+0x300>)
   1a690:	007f      	lsls	r7, r7, #1
   1a692:	51d9      	str	r1, [r3, r7]
   1a694:	782b      	ldrb	r3, [r5, #0]
   1a696:	2b00      	cmp	r3, #0
   1a698:	d100      	bne.n	1a69c <__svfiscanf_r+0x3c>
   1a69a:	e15b      	b.n	1a954 <__svfiscanf_r+0x2f4>
   1a69c:	f7ff fb20 	bl	19ce0 <__locale_ctype_ptr>
   1a6a0:	2208      	movs	r2, #8
   1a6a2:	782b      	ldrb	r3, [r5, #0]
   1a6a4:	18c0      	adds	r0, r0, r3
   1a6a6:	9301      	str	r3, [sp, #4]
   1a6a8:	7843      	ldrb	r3, [r0, #1]
   1a6aa:	4013      	ands	r3, r2
   1a6ac:	d141      	bne.n	1a732 <__svfiscanf_r+0xd2>
   1a6ae:	9a01      	ldr	r2, [sp, #4]
   1a6b0:	1c6e      	adds	r6, r5, #1
   1a6b2:	2a25      	cmp	r2, #37	; 0x25
   1a6b4:	d000      	beq.n	1a6b8 <__svfiscanf_r+0x58>
   1a6b6:	e0a8      	b.n	1a80a <__svfiscanf_r+0x1aa>
   1a6b8:	9347      	str	r3, [sp, #284]	; 0x11c
   1a6ba:	9345      	str	r3, [sp, #276]	; 0x114
   1a6bc:	786b      	ldrb	r3, [r5, #1]
   1a6be:	2b2a      	cmp	r3, #42	; 0x2a
   1a6c0:	d102      	bne.n	1a6c8 <__svfiscanf_r+0x68>
   1a6c2:	3b1a      	subs	r3, #26
   1a6c4:	9345      	str	r3, [sp, #276]	; 0x114
   1a6c6:	1cae      	adds	r6, r5, #2
   1a6c8:	0035      	movs	r5, r6
   1a6ca:	220a      	movs	r2, #10
   1a6cc:	7829      	ldrb	r1, [r5, #0]
   1a6ce:	000b      	movs	r3, r1
   1a6d0:	3b30      	subs	r3, #48	; 0x30
   1a6d2:	2b09      	cmp	r3, #9
   1a6d4:	d948      	bls.n	1a768 <__svfiscanf_r+0x108>
   1a6d6:	4ea3      	ldr	r6, [pc, #652]	; (1a964 <__svfiscanf_r+0x304>)
   1a6d8:	2203      	movs	r2, #3
   1a6da:	0030      	movs	r0, r6
   1a6dc:	f000 fde2 	bl	1b2a4 <memchr>
   1a6e0:	2800      	cmp	r0, #0
   1a6e2:	d007      	beq.n	1a6f4 <__svfiscanf_r+0x94>
   1a6e4:	2301      	movs	r3, #1
   1a6e6:	1b80      	subs	r0, r0, r6
   1a6e8:	4083      	lsls	r3, r0
   1a6ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1a6ec:	3501      	adds	r5, #1
   1a6ee:	4313      	orrs	r3, r2
   1a6f0:	9202      	str	r2, [sp, #8]
   1a6f2:	9345      	str	r3, [sp, #276]	; 0x114
   1a6f4:	782b      	ldrb	r3, [r5, #0]
   1a6f6:	1c6e      	adds	r6, r5, #1
   1a6f8:	2b67      	cmp	r3, #103	; 0x67
   1a6fa:	d858      	bhi.n	1a7ae <__svfiscanf_r+0x14e>
   1a6fc:	2b65      	cmp	r3, #101	; 0x65
   1a6fe:	d300      	bcc.n	1a702 <__svfiscanf_r+0xa2>
   1a700:	e0dd      	b.n	1a8be <__svfiscanf_r+0x25e>
   1a702:	2b47      	cmp	r3, #71	; 0x47
   1a704:	d838      	bhi.n	1a778 <__svfiscanf_r+0x118>
   1a706:	2b45      	cmp	r3, #69	; 0x45
   1a708:	d300      	bcc.n	1a70c <__svfiscanf_r+0xac>
   1a70a:	e0d8      	b.n	1a8be <__svfiscanf_r+0x25e>
   1a70c:	2b00      	cmp	r3, #0
   1a70e:	d100      	bne.n	1a712 <__svfiscanf_r+0xb2>
   1a710:	e11d      	b.n	1a94e <__svfiscanf_r+0x2ee>
   1a712:	2b25      	cmp	r3, #37	; 0x25
   1a714:	d079      	beq.n	1a80a <__svfiscanf_r+0x1aa>
   1a716:	2303      	movs	r3, #3
   1a718:	934b      	str	r3, [sp, #300]	; 0x12c
   1a71a:	3307      	adds	r3, #7
   1a71c:	9346      	str	r3, [sp, #280]	; 0x118
   1a71e:	e053      	b.n	1a7c8 <__svfiscanf_r+0x168>
   1a720:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1a722:	3301      	adds	r3, #1
   1a724:	9201      	str	r2, [sp, #4]
   1a726:	3201      	adds	r2, #1
   1a728:	9249      	str	r2, [sp, #292]	; 0x124
   1a72a:	6862      	ldr	r2, [r4, #4]
   1a72c:	6023      	str	r3, [r4, #0]
   1a72e:	3a01      	subs	r2, #1
   1a730:	6062      	str	r2, [r4, #4]
   1a732:	6863      	ldr	r3, [r4, #4]
   1a734:	2b00      	cmp	r3, #0
   1a736:	dd0b      	ble.n	1a750 <__svfiscanf_r+0xf0>
   1a738:	f7ff fad2 	bl	19ce0 <__locale_ctype_ptr>
   1a73c:	2108      	movs	r1, #8
   1a73e:	6823      	ldr	r3, [r4, #0]
   1a740:	781a      	ldrb	r2, [r3, #0]
   1a742:	1880      	adds	r0, r0, r2
   1a744:	7842      	ldrb	r2, [r0, #1]
   1a746:	420a      	tst	r2, r1
   1a748:	d1ea      	bne.n	1a720 <__svfiscanf_r+0xc0>
   1a74a:	1c6e      	adds	r6, r5, #1
   1a74c:	0035      	movs	r5, r6
   1a74e:	e7a1      	b.n	1a694 <__svfiscanf_r+0x34>
   1a750:	2286      	movs	r2, #134	; 0x86
   1a752:	ab02      	add	r3, sp, #8
   1a754:	0052      	lsls	r2, r2, #1
   1a756:	189b      	adds	r3, r3, r2
   1a758:	59db      	ldr	r3, [r3, r7]
   1a75a:	0021      	movs	r1, r4
   1a75c:	9800      	ldr	r0, [sp, #0]
   1a75e:	9301      	str	r3, [sp, #4]
   1a760:	4798      	blx	r3
   1a762:	2800      	cmp	r0, #0
   1a764:	d0e8      	beq.n	1a738 <__svfiscanf_r+0xd8>
   1a766:	e7f0      	b.n	1a74a <__svfiscanf_r+0xea>
   1a768:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1a76a:	3501      	adds	r5, #1
   1a76c:	9302      	str	r3, [sp, #8]
   1a76e:	4353      	muls	r3, r2
   1a770:	3b30      	subs	r3, #48	; 0x30
   1a772:	1859      	adds	r1, r3, r1
   1a774:	9147      	str	r1, [sp, #284]	; 0x11c
   1a776:	e7a9      	b.n	1a6cc <__svfiscanf_r+0x6c>
   1a778:	2b5b      	cmp	r3, #91	; 0x5b
   1a77a:	d100      	bne.n	1a77e <__svfiscanf_r+0x11e>
   1a77c:	e077      	b.n	1a86e <__svfiscanf_r+0x20e>
   1a77e:	d80f      	bhi.n	1a7a0 <__svfiscanf_r+0x140>
   1a780:	2b58      	cmp	r3, #88	; 0x58
   1a782:	d1c8      	bne.n	1a716 <__svfiscanf_r+0xb6>
   1a784:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1a786:	9201      	str	r2, [sp, #4]
   1a788:	2280      	movs	r2, #128	; 0x80
   1a78a:	9901      	ldr	r1, [sp, #4]
   1a78c:	0092      	lsls	r2, r2, #2
   1a78e:	430a      	orrs	r2, r1
   1a790:	9245      	str	r2, [sp, #276]	; 0x114
   1a792:	2210      	movs	r2, #16
   1a794:	9246      	str	r2, [sp, #280]	; 0x118
   1a796:	2203      	movs	r2, #3
   1a798:	2b6e      	cmp	r3, #110	; 0x6e
   1a79a:	dd14      	ble.n	1a7c6 <__svfiscanf_r+0x166>
   1a79c:	3201      	adds	r2, #1
   1a79e:	e012      	b.n	1a7c6 <__svfiscanf_r+0x166>
   1a7a0:	2b63      	cmp	r3, #99	; 0x63
   1a7a2:	d100      	bne.n	1a7a6 <__svfiscanf_r+0x146>
   1a7a4:	e071      	b.n	1a88a <__svfiscanf_r+0x22a>
   1a7a6:	2b64      	cmp	r3, #100	; 0x64
   1a7a8:	d1b5      	bne.n	1a716 <__svfiscanf_r+0xb6>
   1a7aa:	220a      	movs	r2, #10
   1a7ac:	e7f2      	b.n	1a794 <__svfiscanf_r+0x134>
   1a7ae:	2b70      	cmp	r3, #112	; 0x70
   1a7b0:	d052      	beq.n	1a858 <__svfiscanf_r+0x1f8>
   1a7b2:	d822      	bhi.n	1a7fa <__svfiscanf_r+0x19a>
   1a7b4:	2b6e      	cmp	r3, #110	; 0x6e
   1a7b6:	d100      	bne.n	1a7ba <__svfiscanf_r+0x15a>
   1a7b8:	e06f      	b.n	1a89a <__svfiscanf_r+0x23a>
   1a7ba:	d854      	bhi.n	1a866 <__svfiscanf_r+0x206>
   1a7bc:	2b69      	cmp	r3, #105	; 0x69
   1a7be:	d1aa      	bne.n	1a716 <__svfiscanf_r+0xb6>
   1a7c0:	2300      	movs	r3, #0
   1a7c2:	2203      	movs	r2, #3
   1a7c4:	9346      	str	r3, [sp, #280]	; 0x118
   1a7c6:	924b      	str	r2, [sp, #300]	; 0x12c
   1a7c8:	6863      	ldr	r3, [r4, #4]
   1a7ca:	2b00      	cmp	r3, #0
   1a7cc:	dc00      	bgt.n	1a7d0 <__svfiscanf_r+0x170>
   1a7ce:	e078      	b.n	1a8c2 <__svfiscanf_r+0x262>
   1a7d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1a7d2:	9301      	str	r3, [sp, #4]
   1a7d4:	065b      	lsls	r3, r3, #25
   1a7d6:	d400      	bmi.n	1a7da <__svfiscanf_r+0x17a>
   1a7d8:	e08b      	b.n	1a8f2 <__svfiscanf_r+0x292>
   1a7da:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   1a7dc:	2b02      	cmp	r3, #2
   1a7de:	dd00      	ble.n	1a7e2 <__svfiscanf_r+0x182>
   1a7e0:	e09d      	b.n	1a91e <__svfiscanf_r+0x2be>
   1a7e2:	ab03      	add	r3, sp, #12
   1a7e4:	0022      	movs	r2, r4
   1a7e6:	a945      	add	r1, sp, #276	; 0x114
   1a7e8:	9800      	ldr	r0, [sp, #0]
   1a7ea:	f000 f8e7 	bl	1a9bc <_scanf_chars>
   1a7ee:	2801      	cmp	r0, #1
   1a7f0:	d100      	bne.n	1a7f4 <__svfiscanf_r+0x194>
   1a7f2:	e0af      	b.n	1a954 <__svfiscanf_r+0x2f4>
   1a7f4:	2802      	cmp	r0, #2
   1a7f6:	d1a9      	bne.n	1a74c <__svfiscanf_r+0xec>
   1a7f8:	e025      	b.n	1a846 <__svfiscanf_r+0x1e6>
   1a7fa:	2b75      	cmp	r3, #117	; 0x75
   1a7fc:	d0d5      	beq.n	1a7aa <__svfiscanf_r+0x14a>
   1a7fe:	2b78      	cmp	r3, #120	; 0x78
   1a800:	d0c0      	beq.n	1a784 <__svfiscanf_r+0x124>
   1a802:	2b73      	cmp	r3, #115	; 0x73
   1a804:	d187      	bne.n	1a716 <__svfiscanf_r+0xb6>
   1a806:	2302      	movs	r3, #2
   1a808:	e03d      	b.n	1a886 <__svfiscanf_r+0x226>
   1a80a:	6863      	ldr	r3, [r4, #4]
   1a80c:	2b00      	cmp	r3, #0
   1a80e:	dd0f      	ble.n	1a830 <__svfiscanf_r+0x1d0>
   1a810:	6823      	ldr	r3, [r4, #0]
   1a812:	9901      	ldr	r1, [sp, #4]
   1a814:	781a      	ldrb	r2, [r3, #0]
   1a816:	4291      	cmp	r1, r2
   1a818:	d000      	beq.n	1a81c <__svfiscanf_r+0x1bc>
   1a81a:	e09b      	b.n	1a954 <__svfiscanf_r+0x2f4>
   1a81c:	3301      	adds	r3, #1
   1a81e:	6862      	ldr	r2, [r4, #4]
   1a820:	6023      	str	r3, [r4, #0]
   1a822:	9b49      	ldr	r3, [sp, #292]	; 0x124
   1a824:	3a01      	subs	r2, #1
   1a826:	9301      	str	r3, [sp, #4]
   1a828:	3301      	adds	r3, #1
   1a82a:	6062      	str	r2, [r4, #4]
   1a82c:	9349      	str	r3, [sp, #292]	; 0x124
   1a82e:	e78d      	b.n	1a74c <__svfiscanf_r+0xec>
   1a830:	2286      	movs	r2, #134	; 0x86
   1a832:	ab02      	add	r3, sp, #8
   1a834:	0052      	lsls	r2, r2, #1
   1a836:	189b      	adds	r3, r3, r2
   1a838:	59db      	ldr	r3, [r3, r7]
   1a83a:	0021      	movs	r1, r4
   1a83c:	9800      	ldr	r0, [sp, #0]
   1a83e:	9302      	str	r3, [sp, #8]
   1a840:	4798      	blx	r3
   1a842:	2800      	cmp	r0, #0
   1a844:	d0e4      	beq.n	1a810 <__svfiscanf_r+0x1b0>
   1a846:	9848      	ldr	r0, [sp, #288]	; 0x120
   1a848:	2800      	cmp	r0, #0
   1a84a:	d000      	beq.n	1a84e <__svfiscanf_r+0x1ee>
   1a84c:	e07b      	b.n	1a946 <__svfiscanf_r+0x2e6>
   1a84e:	3801      	subs	r0, #1
   1a850:	23a7      	movs	r3, #167	; 0xa7
   1a852:	009b      	lsls	r3, r3, #2
   1a854:	449d      	add	sp, r3
   1a856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a858:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1a85a:	9201      	str	r2, [sp, #4]
   1a85c:	2220      	movs	r2, #32
   1a85e:	9901      	ldr	r1, [sp, #4]
   1a860:	430a      	orrs	r2, r1
   1a862:	9245      	str	r2, [sp, #276]	; 0x114
   1a864:	e78e      	b.n	1a784 <__svfiscanf_r+0x124>
   1a866:	2308      	movs	r3, #8
   1a868:	2204      	movs	r2, #4
   1a86a:	9346      	str	r3, [sp, #280]	; 0x118
   1a86c:	e7ab      	b.n	1a7c6 <__svfiscanf_r+0x166>
   1a86e:	0031      	movs	r1, r6
   1a870:	a805      	add	r0, sp, #20
   1a872:	f000 fad9 	bl	1ae28 <__sccl>
   1a876:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1a878:	0006      	movs	r6, r0
   1a87a:	9301      	str	r3, [sp, #4]
   1a87c:	2340      	movs	r3, #64	; 0x40
   1a87e:	9a01      	ldr	r2, [sp, #4]
   1a880:	4313      	orrs	r3, r2
   1a882:	9345      	str	r3, [sp, #276]	; 0x114
   1a884:	2301      	movs	r3, #1
   1a886:	934b      	str	r3, [sp, #300]	; 0x12c
   1a888:	e79e      	b.n	1a7c8 <__svfiscanf_r+0x168>
   1a88a:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1a88c:	9301      	str	r3, [sp, #4]
   1a88e:	2340      	movs	r3, #64	; 0x40
   1a890:	9a01      	ldr	r2, [sp, #4]
   1a892:	4313      	orrs	r3, r2
   1a894:	9345      	str	r3, [sp, #276]	; 0x114
   1a896:	2300      	movs	r3, #0
   1a898:	e7f5      	b.n	1a886 <__svfiscanf_r+0x226>
   1a89a:	9945      	ldr	r1, [sp, #276]	; 0x114
   1a89c:	06cb      	lsls	r3, r1, #27
   1a89e:	d500      	bpl.n	1a8a2 <__svfiscanf_r+0x242>
   1a8a0:	e754      	b.n	1a74c <__svfiscanf_r+0xec>
   1a8a2:	9b03      	ldr	r3, [sp, #12]
   1a8a4:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1a8a6:	07c8      	lsls	r0, r1, #31
   1a8a8:	d504      	bpl.n	1a8b4 <__svfiscanf_r+0x254>
   1a8aa:	1d19      	adds	r1, r3, #4
   1a8ac:	9103      	str	r1, [sp, #12]
   1a8ae:	681b      	ldr	r3, [r3, #0]
   1a8b0:	801a      	strh	r2, [r3, #0]
   1a8b2:	e74b      	b.n	1a74c <__svfiscanf_r+0xec>
   1a8b4:	1d19      	adds	r1, r3, #4
   1a8b6:	9103      	str	r1, [sp, #12]
   1a8b8:	681b      	ldr	r3, [r3, #0]
   1a8ba:	601a      	str	r2, [r3, #0]
   1a8bc:	e746      	b.n	1a74c <__svfiscanf_r+0xec>
   1a8be:	2305      	movs	r3, #5
   1a8c0:	e7e1      	b.n	1a886 <__svfiscanf_r+0x226>
   1a8c2:	2286      	movs	r2, #134	; 0x86
   1a8c4:	ab02      	add	r3, sp, #8
   1a8c6:	0052      	lsls	r2, r2, #1
   1a8c8:	189b      	adds	r3, r3, r2
   1a8ca:	59db      	ldr	r3, [r3, r7]
   1a8cc:	0021      	movs	r1, r4
   1a8ce:	9800      	ldr	r0, [sp, #0]
   1a8d0:	9301      	str	r3, [sp, #4]
   1a8d2:	4798      	blx	r3
   1a8d4:	2800      	cmp	r0, #0
   1a8d6:	d100      	bne.n	1a8da <__svfiscanf_r+0x27a>
   1a8d8:	e77a      	b.n	1a7d0 <__svfiscanf_r+0x170>
   1a8da:	e7b4      	b.n	1a846 <__svfiscanf_r+0x1e6>
   1a8dc:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1a8de:	9201      	str	r2, [sp, #4]
   1a8e0:	3201      	adds	r2, #1
   1a8e2:	9249      	str	r2, [sp, #292]	; 0x124
   1a8e4:	6862      	ldr	r2, [r4, #4]
   1a8e6:	3a01      	subs	r2, #1
   1a8e8:	6062      	str	r2, [r4, #4]
   1a8ea:	2a00      	cmp	r2, #0
   1a8ec:	dd0b      	ble.n	1a906 <__svfiscanf_r+0x2a6>
   1a8ee:	3301      	adds	r3, #1
   1a8f0:	6023      	str	r3, [r4, #0]
   1a8f2:	f7ff f9f5 	bl	19ce0 <__locale_ctype_ptr>
   1a8f6:	2108      	movs	r1, #8
   1a8f8:	6823      	ldr	r3, [r4, #0]
   1a8fa:	781a      	ldrb	r2, [r3, #0]
   1a8fc:	1880      	adds	r0, r0, r2
   1a8fe:	7842      	ldrb	r2, [r0, #1]
   1a900:	420a      	tst	r2, r1
   1a902:	d1eb      	bne.n	1a8dc <__svfiscanf_r+0x27c>
   1a904:	e769      	b.n	1a7da <__svfiscanf_r+0x17a>
   1a906:	2286      	movs	r2, #134	; 0x86
   1a908:	ab02      	add	r3, sp, #8
   1a90a:	0052      	lsls	r2, r2, #1
   1a90c:	189b      	adds	r3, r3, r2
   1a90e:	59db      	ldr	r3, [r3, r7]
   1a910:	0021      	movs	r1, r4
   1a912:	9800      	ldr	r0, [sp, #0]
   1a914:	9301      	str	r3, [sp, #4]
   1a916:	4798      	blx	r3
   1a918:	2800      	cmp	r0, #0
   1a91a:	d0ea      	beq.n	1a8f2 <__svfiscanf_r+0x292>
   1a91c:	e793      	b.n	1a846 <__svfiscanf_r+0x1e6>
   1a91e:	2b04      	cmp	r3, #4
   1a920:	dc06      	bgt.n	1a930 <__svfiscanf_r+0x2d0>
   1a922:	ab03      	add	r3, sp, #12
   1a924:	0022      	movs	r2, r4
   1a926:	a945      	add	r1, sp, #276	; 0x114
   1a928:	9800      	ldr	r0, [sp, #0]
   1a92a:	f000 f8ab 	bl	1aa84 <_scanf_i>
   1a92e:	e75e      	b.n	1a7ee <__svfiscanf_r+0x18e>
   1a930:	4b0d      	ldr	r3, [pc, #52]	; (1a968 <__svfiscanf_r+0x308>)
   1a932:	2b00      	cmp	r3, #0
   1a934:	d100      	bne.n	1a938 <__svfiscanf_r+0x2d8>
   1a936:	e709      	b.n	1a74c <__svfiscanf_r+0xec>
   1a938:	ab03      	add	r3, sp, #12
   1a93a:	0022      	movs	r2, r4
   1a93c:	a945      	add	r1, sp, #276	; 0x114
   1a93e:	9800      	ldr	r0, [sp, #0]
   1a940:	e000      	b.n	1a944 <__svfiscanf_r+0x2e4>
   1a942:	bf00      	nop
   1a944:	e753      	b.n	1a7ee <__svfiscanf_r+0x18e>
   1a946:	89a3      	ldrh	r3, [r4, #12]
   1a948:	065b      	lsls	r3, r3, #25
   1a94a:	d400      	bmi.n	1a94e <__svfiscanf_r+0x2ee>
   1a94c:	e780      	b.n	1a850 <__svfiscanf_r+0x1f0>
   1a94e:	2001      	movs	r0, #1
   1a950:	4240      	negs	r0, r0
   1a952:	e77d      	b.n	1a850 <__svfiscanf_r+0x1f0>
   1a954:	9848      	ldr	r0, [sp, #288]	; 0x120
   1a956:	e77b      	b.n	1a850 <__svfiscanf_r+0x1f0>
   1a958:	fffffd64 	.word	0xfffffd64
   1a95c:	0001b0ed 	.word	0x0001b0ed
   1a960:	0001ad09 	.word	0x0001ad09
   1a964:	0001dd44 	.word	0x0001dd44
   1a968:	00000000 	.word	0x00000000

0001a96c <_vfiscanf_r>:
   1a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a96e:	0004      	movs	r4, r0
   1a970:	000d      	movs	r5, r1
   1a972:	0016      	movs	r6, r2
   1a974:	001f      	movs	r7, r3
   1a976:	2800      	cmp	r0, #0
   1a978:	d004      	beq.n	1a984 <_vfiscanf_r+0x18>
   1a97a:	6983      	ldr	r3, [r0, #24]
   1a97c:	2b00      	cmp	r3, #0
   1a97e:	d101      	bne.n	1a984 <_vfiscanf_r+0x18>
   1a980:	f7ff f8fa 	bl	19b78 <__sinit>
   1a984:	4b0a      	ldr	r3, [pc, #40]	; (1a9b0 <_vfiscanf_r+0x44>)
   1a986:	429d      	cmp	r5, r3
   1a988:	d107      	bne.n	1a99a <_vfiscanf_r+0x2e>
   1a98a:	6865      	ldr	r5, [r4, #4]
   1a98c:	003b      	movs	r3, r7
   1a98e:	0032      	movs	r2, r6
   1a990:	0029      	movs	r1, r5
   1a992:	0020      	movs	r0, r4
   1a994:	f7ff fe64 	bl	1a660 <__svfiscanf_r>
   1a998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a99a:	4b06      	ldr	r3, [pc, #24]	; (1a9b4 <_vfiscanf_r+0x48>)
   1a99c:	429d      	cmp	r5, r3
   1a99e:	d101      	bne.n	1a9a4 <_vfiscanf_r+0x38>
   1a9a0:	68a5      	ldr	r5, [r4, #8]
   1a9a2:	e7f3      	b.n	1a98c <_vfiscanf_r+0x20>
   1a9a4:	4b04      	ldr	r3, [pc, #16]	; (1a9b8 <_vfiscanf_r+0x4c>)
   1a9a6:	429d      	cmp	r5, r3
   1a9a8:	d1f0      	bne.n	1a98c <_vfiscanf_r+0x20>
   1a9aa:	68e5      	ldr	r5, [r4, #12]
   1a9ac:	e7ee      	b.n	1a98c <_vfiscanf_r+0x20>
   1a9ae:	46c0      	nop			; (mov r8, r8)
   1a9b0:	0001dcf4 	.word	0x0001dcf4
   1a9b4:	0001dd14 	.word	0x0001dd14
   1a9b8:	0001dcd4 	.word	0x0001dcd4

0001a9bc <_scanf_chars>:
   1a9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a9be:	0015      	movs	r5, r2
   1a9c0:	688a      	ldr	r2, [r1, #8]
   1a9c2:	9001      	str	r0, [sp, #4]
   1a9c4:	000c      	movs	r4, r1
   1a9c6:	2a00      	cmp	r2, #0
   1a9c8:	d106      	bne.n	1a9d8 <_scanf_chars+0x1c>
   1a9ca:	698a      	ldr	r2, [r1, #24]
   1a9cc:	1e51      	subs	r1, r2, #1
   1a9ce:	418a      	sbcs	r2, r1
   1a9d0:	2101      	movs	r1, #1
   1a9d2:	4252      	negs	r2, r2
   1a9d4:	430a      	orrs	r2, r1
   1a9d6:	60a2      	str	r2, [r4, #8]
   1a9d8:	6822      	ldr	r2, [r4, #0]
   1a9da:	06d2      	lsls	r2, r2, #27
   1a9dc:	d403      	bmi.n	1a9e6 <_scanf_chars+0x2a>
   1a9de:	681a      	ldr	r2, [r3, #0]
   1a9e0:	1d11      	adds	r1, r2, #4
   1a9e2:	6019      	str	r1, [r3, #0]
   1a9e4:	6817      	ldr	r7, [r2, #0]
   1a9e6:	2600      	movs	r6, #0
   1a9e8:	69a3      	ldr	r3, [r4, #24]
   1a9ea:	2b00      	cmp	r3, #0
   1a9ec:	d01c      	beq.n	1aa28 <_scanf_chars+0x6c>
   1a9ee:	2b01      	cmp	r3, #1
   1a9f0:	d108      	bne.n	1aa04 <_scanf_chars+0x48>
   1a9f2:	682b      	ldr	r3, [r5, #0]
   1a9f4:	6962      	ldr	r2, [r4, #20]
   1a9f6:	781b      	ldrb	r3, [r3, #0]
   1a9f8:	5cd3      	ldrb	r3, [r2, r3]
   1a9fa:	2b00      	cmp	r3, #0
   1a9fc:	d114      	bne.n	1aa28 <_scanf_chars+0x6c>
   1a9fe:	2e00      	cmp	r6, #0
   1aa00:	d130      	bne.n	1aa64 <_scanf_chars+0xa8>
   1aa02:	e006      	b.n	1aa12 <_scanf_chars+0x56>
   1aa04:	2b02      	cmp	r3, #2
   1aa06:	d006      	beq.n	1aa16 <_scanf_chars+0x5a>
   1aa08:	2e00      	cmp	r6, #0
   1aa0a:	d12b      	bne.n	1aa64 <_scanf_chars+0xa8>
   1aa0c:	69a3      	ldr	r3, [r4, #24]
   1aa0e:	2b01      	cmp	r3, #1
   1aa10:	d128      	bne.n	1aa64 <_scanf_chars+0xa8>
   1aa12:	2001      	movs	r0, #1
   1aa14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1aa16:	f7ff f963 	bl	19ce0 <__locale_ctype_ptr>
   1aa1a:	2208      	movs	r2, #8
   1aa1c:	682b      	ldr	r3, [r5, #0]
   1aa1e:	781b      	ldrb	r3, [r3, #0]
   1aa20:	18c0      	adds	r0, r0, r3
   1aa22:	7843      	ldrb	r3, [r0, #1]
   1aa24:	4213      	tst	r3, r2
   1aa26:	d1ef      	bne.n	1aa08 <_scanf_chars+0x4c>
   1aa28:	2210      	movs	r2, #16
   1aa2a:	6823      	ldr	r3, [r4, #0]
   1aa2c:	3601      	adds	r6, #1
   1aa2e:	4213      	tst	r3, r2
   1aa30:	d103      	bne.n	1aa3a <_scanf_chars+0x7e>
   1aa32:	682b      	ldr	r3, [r5, #0]
   1aa34:	781b      	ldrb	r3, [r3, #0]
   1aa36:	703b      	strb	r3, [r7, #0]
   1aa38:	3701      	adds	r7, #1
   1aa3a:	682a      	ldr	r2, [r5, #0]
   1aa3c:	686b      	ldr	r3, [r5, #4]
   1aa3e:	3201      	adds	r2, #1
   1aa40:	602a      	str	r2, [r5, #0]
   1aa42:	68a2      	ldr	r2, [r4, #8]
   1aa44:	3b01      	subs	r3, #1
   1aa46:	3a01      	subs	r2, #1
   1aa48:	606b      	str	r3, [r5, #4]
   1aa4a:	60a2      	str	r2, [r4, #8]
   1aa4c:	2a00      	cmp	r2, #0
   1aa4e:	d009      	beq.n	1aa64 <_scanf_chars+0xa8>
   1aa50:	2b00      	cmp	r3, #0
   1aa52:	dcc9      	bgt.n	1a9e8 <_scanf_chars+0x2c>
   1aa54:	23c0      	movs	r3, #192	; 0xc0
   1aa56:	005b      	lsls	r3, r3, #1
   1aa58:	58e3      	ldr	r3, [r4, r3]
   1aa5a:	0029      	movs	r1, r5
   1aa5c:	9801      	ldr	r0, [sp, #4]
   1aa5e:	4798      	blx	r3
   1aa60:	2800      	cmp	r0, #0
   1aa62:	d0c1      	beq.n	1a9e8 <_scanf_chars+0x2c>
   1aa64:	2310      	movs	r3, #16
   1aa66:	6822      	ldr	r2, [r4, #0]
   1aa68:	4013      	ands	r3, r2
   1aa6a:	d106      	bne.n	1aa7a <_scanf_chars+0xbe>
   1aa6c:	68e2      	ldr	r2, [r4, #12]
   1aa6e:	3201      	adds	r2, #1
   1aa70:	60e2      	str	r2, [r4, #12]
   1aa72:	69a2      	ldr	r2, [r4, #24]
   1aa74:	2a00      	cmp	r2, #0
   1aa76:	d000      	beq.n	1aa7a <_scanf_chars+0xbe>
   1aa78:	703b      	strb	r3, [r7, #0]
   1aa7a:	6923      	ldr	r3, [r4, #16]
   1aa7c:	2000      	movs	r0, #0
   1aa7e:	199e      	adds	r6, r3, r6
   1aa80:	6126      	str	r6, [r4, #16]
   1aa82:	e7c7      	b.n	1aa14 <_scanf_chars+0x58>

0001aa84 <_scanf_i>:
   1aa84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa86:	000c      	movs	r4, r1
   1aa88:	b08d      	sub	sp, #52	; 0x34
   1aa8a:	9302      	str	r3, [sp, #8]
   1aa8c:	4b77      	ldr	r3, [pc, #476]	; (1ac6c <_scanf_i+0x1e8>)
   1aa8e:	9005      	str	r0, [sp, #20]
   1aa90:	0016      	movs	r6, r2
   1aa92:	aa09      	add	r2, sp, #36	; 0x24
   1aa94:	cb23      	ldmia	r3!, {r0, r1, r5}
   1aa96:	c223      	stmia	r2!, {r0, r1, r5}
   1aa98:	4b75      	ldr	r3, [pc, #468]	; (1ac70 <_scanf_i+0x1ec>)
   1aa9a:	9306      	str	r3, [sp, #24]
   1aa9c:	69a3      	ldr	r3, [r4, #24]
   1aa9e:	2b03      	cmp	r3, #3
   1aaa0:	d001      	beq.n	1aaa6 <_scanf_i+0x22>
   1aaa2:	4b74      	ldr	r3, [pc, #464]	; (1ac74 <_scanf_i+0x1f0>)
   1aaa4:	9306      	str	r3, [sp, #24]
   1aaa6:	22ae      	movs	r2, #174	; 0xae
   1aaa8:	2000      	movs	r0, #0
   1aaaa:	68a3      	ldr	r3, [r4, #8]
   1aaac:	0052      	lsls	r2, r2, #1
   1aaae:	1e59      	subs	r1, r3, #1
   1aab0:	9004      	str	r0, [sp, #16]
   1aab2:	4291      	cmp	r1, r2
   1aab4:	d905      	bls.n	1aac2 <_scanf_i+0x3e>
   1aab6:	3b5e      	subs	r3, #94	; 0x5e
   1aab8:	3bff      	subs	r3, #255	; 0xff
   1aaba:	9304      	str	r3, [sp, #16]
   1aabc:	235e      	movs	r3, #94	; 0x5e
   1aabe:	33ff      	adds	r3, #255	; 0xff
   1aac0:	60a3      	str	r3, [r4, #8]
   1aac2:	0023      	movs	r3, r4
   1aac4:	331c      	adds	r3, #28
   1aac6:	9301      	str	r3, [sp, #4]
   1aac8:	23d0      	movs	r3, #208	; 0xd0
   1aaca:	2700      	movs	r7, #0
   1aacc:	6822      	ldr	r2, [r4, #0]
   1aace:	011b      	lsls	r3, r3, #4
   1aad0:	4313      	orrs	r3, r2
   1aad2:	6023      	str	r3, [r4, #0]
   1aad4:	9b01      	ldr	r3, [sp, #4]
   1aad6:	9303      	str	r3, [sp, #12]
   1aad8:	6833      	ldr	r3, [r6, #0]
   1aada:	a809      	add	r0, sp, #36	; 0x24
   1aadc:	7819      	ldrb	r1, [r3, #0]
   1aade:	00bb      	lsls	r3, r7, #2
   1aae0:	2202      	movs	r2, #2
   1aae2:	5818      	ldr	r0, [r3, r0]
   1aae4:	f000 fbde 	bl	1b2a4 <memchr>
   1aae8:	2800      	cmp	r0, #0
   1aaea:	d02b      	beq.n	1ab44 <_scanf_i+0xc0>
   1aaec:	2f01      	cmp	r7, #1
   1aaee:	d15f      	bne.n	1abb0 <_scanf_i+0x12c>
   1aaf0:	6863      	ldr	r3, [r4, #4]
   1aaf2:	2b00      	cmp	r3, #0
   1aaf4:	d106      	bne.n	1ab04 <_scanf_i+0x80>
   1aaf6:	3308      	adds	r3, #8
   1aaf8:	6822      	ldr	r2, [r4, #0]
   1aafa:	6063      	str	r3, [r4, #4]
   1aafc:	33f9      	adds	r3, #249	; 0xf9
   1aafe:	33ff      	adds	r3, #255	; 0xff
   1ab00:	4313      	orrs	r3, r2
   1ab02:	6023      	str	r3, [r4, #0]
   1ab04:	4b5c      	ldr	r3, [pc, #368]	; (1ac78 <_scanf_i+0x1f4>)
   1ab06:	6822      	ldr	r2, [r4, #0]
   1ab08:	4013      	ands	r3, r2
   1ab0a:	6023      	str	r3, [r4, #0]
   1ab0c:	68a3      	ldr	r3, [r4, #8]
   1ab0e:	1e5a      	subs	r2, r3, #1
   1ab10:	60a2      	str	r2, [r4, #8]
   1ab12:	2b00      	cmp	r3, #0
   1ab14:	d016      	beq.n	1ab44 <_scanf_i+0xc0>
   1ab16:	9b03      	ldr	r3, [sp, #12]
   1ab18:	1c5d      	adds	r5, r3, #1
   1ab1a:	6833      	ldr	r3, [r6, #0]
   1ab1c:	1c5a      	adds	r2, r3, #1
   1ab1e:	6032      	str	r2, [r6, #0]
   1ab20:	781b      	ldrb	r3, [r3, #0]
   1ab22:	9a03      	ldr	r2, [sp, #12]
   1ab24:	9503      	str	r5, [sp, #12]
   1ab26:	7013      	strb	r3, [r2, #0]
   1ab28:	6873      	ldr	r3, [r6, #4]
   1ab2a:	3b01      	subs	r3, #1
   1ab2c:	6073      	str	r3, [r6, #4]
   1ab2e:	2b00      	cmp	r3, #0
   1ab30:	dc08      	bgt.n	1ab44 <_scanf_i+0xc0>
   1ab32:	23c0      	movs	r3, #192	; 0xc0
   1ab34:	005b      	lsls	r3, r3, #1
   1ab36:	58e3      	ldr	r3, [r4, r3]
   1ab38:	0031      	movs	r1, r6
   1ab3a:	9805      	ldr	r0, [sp, #20]
   1ab3c:	9307      	str	r3, [sp, #28]
   1ab3e:	4798      	blx	r3
   1ab40:	2800      	cmp	r0, #0
   1ab42:	d17d      	bne.n	1ac40 <_scanf_i+0x1bc>
   1ab44:	3701      	adds	r7, #1
   1ab46:	2f03      	cmp	r7, #3
   1ab48:	d1c6      	bne.n	1aad8 <_scanf_i+0x54>
   1ab4a:	6863      	ldr	r3, [r4, #4]
   1ab4c:	2b00      	cmp	r3, #0
   1ab4e:	d101      	bne.n	1ab54 <_scanf_i+0xd0>
   1ab50:	330a      	adds	r3, #10
   1ab52:	6063      	str	r3, [r4, #4]
   1ab54:	2110      	movs	r1, #16
   1ab56:	2700      	movs	r7, #0
   1ab58:	6863      	ldr	r3, [r4, #4]
   1ab5a:	6960      	ldr	r0, [r4, #20]
   1ab5c:	1ac9      	subs	r1, r1, r3
   1ab5e:	4b47      	ldr	r3, [pc, #284]	; (1ac7c <_scanf_i+0x1f8>)
   1ab60:	18c9      	adds	r1, r1, r3
   1ab62:	f000 f961 	bl	1ae28 <__sccl>
   1ab66:	9d03      	ldr	r5, [sp, #12]
   1ab68:	68a3      	ldr	r3, [r4, #8]
   1ab6a:	2b00      	cmp	r3, #0
   1ab6c:	d041      	beq.n	1abf2 <_scanf_i+0x16e>
   1ab6e:	6832      	ldr	r2, [r6, #0]
   1ab70:	6960      	ldr	r0, [r4, #20]
   1ab72:	7811      	ldrb	r1, [r2, #0]
   1ab74:	5c40      	ldrb	r0, [r0, r1]
   1ab76:	2800      	cmp	r0, #0
   1ab78:	d03b      	beq.n	1abf2 <_scanf_i+0x16e>
   1ab7a:	2930      	cmp	r1, #48	; 0x30
   1ab7c:	d128      	bne.n	1abd0 <_scanf_i+0x14c>
   1ab7e:	2080      	movs	r0, #128	; 0x80
   1ab80:	6821      	ldr	r1, [r4, #0]
   1ab82:	0100      	lsls	r0, r0, #4
   1ab84:	4201      	tst	r1, r0
   1ab86:	d023      	beq.n	1abd0 <_scanf_i+0x14c>
   1ab88:	9a04      	ldr	r2, [sp, #16]
   1ab8a:	3701      	adds	r7, #1
   1ab8c:	2a00      	cmp	r2, #0
   1ab8e:	d003      	beq.n	1ab98 <_scanf_i+0x114>
   1ab90:	3a01      	subs	r2, #1
   1ab92:	3301      	adds	r3, #1
   1ab94:	9204      	str	r2, [sp, #16]
   1ab96:	60a3      	str	r3, [r4, #8]
   1ab98:	6873      	ldr	r3, [r6, #4]
   1ab9a:	3b01      	subs	r3, #1
   1ab9c:	6073      	str	r3, [r6, #4]
   1ab9e:	2b00      	cmp	r3, #0
   1aba0:	dd1e      	ble.n	1abe0 <_scanf_i+0x15c>
   1aba2:	6833      	ldr	r3, [r6, #0]
   1aba4:	3301      	adds	r3, #1
   1aba6:	6033      	str	r3, [r6, #0]
   1aba8:	68a3      	ldr	r3, [r4, #8]
   1abaa:	3b01      	subs	r3, #1
   1abac:	60a3      	str	r3, [r4, #8]
   1abae:	e7db      	b.n	1ab68 <_scanf_i+0xe4>
   1abb0:	2f02      	cmp	r7, #2
   1abb2:	d1ab      	bne.n	1ab0c <_scanf_i+0x88>
   1abb4:	21c0      	movs	r1, #192	; 0xc0
   1abb6:	2380      	movs	r3, #128	; 0x80
   1abb8:	6822      	ldr	r2, [r4, #0]
   1abba:	00c9      	lsls	r1, r1, #3
   1abbc:	4011      	ands	r1, r2
   1abbe:	009b      	lsls	r3, r3, #2
   1abc0:	4299      	cmp	r1, r3
   1abc2:	d1c2      	bne.n	1ab4a <_scanf_i+0xc6>
   1abc4:	3bf1      	subs	r3, #241	; 0xf1
   1abc6:	3bff      	subs	r3, #255	; 0xff
   1abc8:	6063      	str	r3, [r4, #4]
   1abca:	33f0      	adds	r3, #240	; 0xf0
   1abcc:	4313      	orrs	r3, r2
   1abce:	e79c      	b.n	1ab0a <_scanf_i+0x86>
   1abd0:	6821      	ldr	r1, [r4, #0]
   1abd2:	4b2b      	ldr	r3, [pc, #172]	; (1ac80 <_scanf_i+0x1fc>)
   1abd4:	400b      	ands	r3, r1
   1abd6:	6023      	str	r3, [r4, #0]
   1abd8:	7813      	ldrb	r3, [r2, #0]
   1abda:	702b      	strb	r3, [r5, #0]
   1abdc:	3501      	adds	r5, #1
   1abde:	e7db      	b.n	1ab98 <_scanf_i+0x114>
   1abe0:	23c0      	movs	r3, #192	; 0xc0
   1abe2:	005b      	lsls	r3, r3, #1
   1abe4:	58e3      	ldr	r3, [r4, r3]
   1abe6:	0031      	movs	r1, r6
   1abe8:	9805      	ldr	r0, [sp, #20]
   1abea:	9303      	str	r3, [sp, #12]
   1abec:	4798      	blx	r3
   1abee:	2800      	cmp	r0, #0
   1abf0:	d0da      	beq.n	1aba8 <_scanf_i+0x124>
   1abf2:	6823      	ldr	r3, [r4, #0]
   1abf4:	05db      	lsls	r3, r3, #23
   1abf6:	d50e      	bpl.n	1ac16 <_scanf_i+0x192>
   1abf8:	9b01      	ldr	r3, [sp, #4]
   1abfa:	429d      	cmp	r5, r3
   1abfc:	d907      	bls.n	1ac0e <_scanf_i+0x18a>
   1abfe:	23be      	movs	r3, #190	; 0xbe
   1ac00:	3d01      	subs	r5, #1
   1ac02:	005b      	lsls	r3, r3, #1
   1ac04:	7829      	ldrb	r1, [r5, #0]
   1ac06:	58e3      	ldr	r3, [r4, r3]
   1ac08:	0032      	movs	r2, r6
   1ac0a:	9805      	ldr	r0, [sp, #20]
   1ac0c:	4798      	blx	r3
   1ac0e:	9b01      	ldr	r3, [sp, #4]
   1ac10:	2001      	movs	r0, #1
   1ac12:	429d      	cmp	r5, r3
   1ac14:	d027      	beq.n	1ac66 <_scanf_i+0x1e2>
   1ac16:	2210      	movs	r2, #16
   1ac18:	6823      	ldr	r3, [r4, #0]
   1ac1a:	401a      	ands	r2, r3
   1ac1c:	d11c      	bne.n	1ac58 <_scanf_i+0x1d4>
   1ac1e:	702a      	strb	r2, [r5, #0]
   1ac20:	6863      	ldr	r3, [r4, #4]
   1ac22:	9901      	ldr	r1, [sp, #4]
   1ac24:	9805      	ldr	r0, [sp, #20]
   1ac26:	9e06      	ldr	r6, [sp, #24]
   1ac28:	47b0      	blx	r6
   1ac2a:	9b02      	ldr	r3, [sp, #8]
   1ac2c:	6822      	ldr	r2, [r4, #0]
   1ac2e:	681b      	ldr	r3, [r3, #0]
   1ac30:	0691      	lsls	r1, r2, #26
   1ac32:	d507      	bpl.n	1ac44 <_scanf_i+0x1c0>
   1ac34:	9902      	ldr	r1, [sp, #8]
   1ac36:	1d1a      	adds	r2, r3, #4
   1ac38:	600a      	str	r2, [r1, #0]
   1ac3a:	681b      	ldr	r3, [r3, #0]
   1ac3c:	6018      	str	r0, [r3, #0]
   1ac3e:	e008      	b.n	1ac52 <_scanf_i+0x1ce>
   1ac40:	2700      	movs	r7, #0
   1ac42:	e7d6      	b.n	1abf2 <_scanf_i+0x16e>
   1ac44:	07d1      	lsls	r1, r2, #31
   1ac46:	d5f5      	bpl.n	1ac34 <_scanf_i+0x1b0>
   1ac48:	9902      	ldr	r1, [sp, #8]
   1ac4a:	1d1a      	adds	r2, r3, #4
   1ac4c:	600a      	str	r2, [r1, #0]
   1ac4e:	681b      	ldr	r3, [r3, #0]
   1ac50:	8018      	strh	r0, [r3, #0]
   1ac52:	68e3      	ldr	r3, [r4, #12]
   1ac54:	3301      	adds	r3, #1
   1ac56:	60e3      	str	r3, [r4, #12]
   1ac58:	2000      	movs	r0, #0
   1ac5a:	9b01      	ldr	r3, [sp, #4]
   1ac5c:	1aed      	subs	r5, r5, r3
   1ac5e:	6923      	ldr	r3, [r4, #16]
   1ac60:	19ef      	adds	r7, r5, r7
   1ac62:	19df      	adds	r7, r3, r7
   1ac64:	6127      	str	r7, [r4, #16]
   1ac66:	b00d      	add	sp, #52	; 0x34
   1ac68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac6a:	46c0      	nop			; (mov r8, r8)
   1ac6c:	0001dd74 	.word	0x0001dd74
   1ac70:	00019781 	.word	0x00019781
   1ac74:	0001b051 	.word	0x0001b051
   1ac78:	fffffaff 	.word	0xfffffaff
   1ac7c:	0001dd80 	.word	0x0001dd80
   1ac80:	fffff6ff 	.word	0xfffff6ff

0001ac84 <_putc_r>:
   1ac84:	b570      	push	{r4, r5, r6, lr}
   1ac86:	0006      	movs	r6, r0
   1ac88:	000d      	movs	r5, r1
   1ac8a:	0014      	movs	r4, r2
   1ac8c:	2800      	cmp	r0, #0
   1ac8e:	d004      	beq.n	1ac9a <_putc_r+0x16>
   1ac90:	6983      	ldr	r3, [r0, #24]
   1ac92:	2b00      	cmp	r3, #0
   1ac94:	d101      	bne.n	1ac9a <_putc_r+0x16>
   1ac96:	f7fe ff6f 	bl	19b78 <__sinit>
   1ac9a:	4b12      	ldr	r3, [pc, #72]	; (1ace4 <_putc_r+0x60>)
   1ac9c:	429c      	cmp	r4, r3
   1ac9e:	d111      	bne.n	1acc4 <_putc_r+0x40>
   1aca0:	6874      	ldr	r4, [r6, #4]
   1aca2:	68a3      	ldr	r3, [r4, #8]
   1aca4:	3b01      	subs	r3, #1
   1aca6:	60a3      	str	r3, [r4, #8]
   1aca8:	2b00      	cmp	r3, #0
   1acaa:	da05      	bge.n	1acb8 <_putc_r+0x34>
   1acac:	69a2      	ldr	r2, [r4, #24]
   1acae:	4293      	cmp	r3, r2
   1acb0:	db12      	blt.n	1acd8 <_putc_r+0x54>
   1acb2:	b2eb      	uxtb	r3, r5
   1acb4:	2b0a      	cmp	r3, #10
   1acb6:	d00f      	beq.n	1acd8 <_putc_r+0x54>
   1acb8:	6823      	ldr	r3, [r4, #0]
   1acba:	b2e8      	uxtb	r0, r5
   1acbc:	1c5a      	adds	r2, r3, #1
   1acbe:	6022      	str	r2, [r4, #0]
   1acc0:	701d      	strb	r5, [r3, #0]
   1acc2:	bd70      	pop	{r4, r5, r6, pc}
   1acc4:	4b08      	ldr	r3, [pc, #32]	; (1ace8 <_putc_r+0x64>)
   1acc6:	429c      	cmp	r4, r3
   1acc8:	d101      	bne.n	1acce <_putc_r+0x4a>
   1acca:	68b4      	ldr	r4, [r6, #8]
   1accc:	e7e9      	b.n	1aca2 <_putc_r+0x1e>
   1acce:	4b07      	ldr	r3, [pc, #28]	; (1acec <_putc_r+0x68>)
   1acd0:	429c      	cmp	r4, r3
   1acd2:	d1e6      	bne.n	1aca2 <_putc_r+0x1e>
   1acd4:	68f4      	ldr	r4, [r6, #12]
   1acd6:	e7e4      	b.n	1aca2 <_putc_r+0x1e>
   1acd8:	0022      	movs	r2, r4
   1acda:	0029      	movs	r1, r5
   1acdc:	0030      	movs	r0, r6
   1acde:	f7fe fd73 	bl	197c8 <__swbuf_r>
   1ace2:	e7ee      	b.n	1acc2 <_putc_r+0x3e>
   1ace4:	0001dcf4 	.word	0x0001dcf4
   1ace8:	0001dd14 	.word	0x0001dd14
   1acec:	0001dcd4 	.word	0x0001dcd4

0001acf0 <lflush>:
   1acf0:	2209      	movs	r2, #9
   1acf2:	b510      	push	{r4, lr}
   1acf4:	8983      	ldrh	r3, [r0, #12]
   1acf6:	4013      	ands	r3, r2
   1acf8:	2200      	movs	r2, #0
   1acfa:	2b09      	cmp	r3, #9
   1acfc:	d102      	bne.n	1ad04 <lflush+0x14>
   1acfe:	f7fe fee5 	bl	19acc <fflush>
   1ad02:	0002      	movs	r2, r0
   1ad04:	0010      	movs	r0, r2
   1ad06:	bd10      	pop	{r4, pc}

0001ad08 <__srefill_r>:
   1ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad0a:	0005      	movs	r5, r0
   1ad0c:	000c      	movs	r4, r1
   1ad0e:	2800      	cmp	r0, #0
   1ad10:	d004      	beq.n	1ad1c <__srefill_r+0x14>
   1ad12:	6983      	ldr	r3, [r0, #24]
   1ad14:	2b00      	cmp	r3, #0
   1ad16:	d101      	bne.n	1ad1c <__srefill_r+0x14>
   1ad18:	f7fe ff2e 	bl	19b78 <__sinit>
   1ad1c:	4b3d      	ldr	r3, [pc, #244]	; (1ae14 <__srefill_r+0x10c>)
   1ad1e:	429c      	cmp	r4, r3
   1ad20:	d10a      	bne.n	1ad38 <__srefill_r+0x30>
   1ad22:	686c      	ldr	r4, [r5, #4]
   1ad24:	2300      	movs	r3, #0
   1ad26:	6063      	str	r3, [r4, #4]
   1ad28:	230c      	movs	r3, #12
   1ad2a:	5ee2      	ldrsh	r2, [r4, r3]
   1ad2c:	b293      	uxth	r3, r2
   1ad2e:	0699      	lsls	r1, r3, #26
   1ad30:	d50c      	bpl.n	1ad4c <__srefill_r+0x44>
   1ad32:	2001      	movs	r0, #1
   1ad34:	4240      	negs	r0, r0
   1ad36:	e068      	b.n	1ae0a <__srefill_r+0x102>
   1ad38:	4b37      	ldr	r3, [pc, #220]	; (1ae18 <__srefill_r+0x110>)
   1ad3a:	429c      	cmp	r4, r3
   1ad3c:	d101      	bne.n	1ad42 <__srefill_r+0x3a>
   1ad3e:	68ac      	ldr	r4, [r5, #8]
   1ad40:	e7f0      	b.n	1ad24 <__srefill_r+0x1c>
   1ad42:	4b36      	ldr	r3, [pc, #216]	; (1ae1c <__srefill_r+0x114>)
   1ad44:	429c      	cmp	r4, r3
   1ad46:	d1ed      	bne.n	1ad24 <__srefill_r+0x1c>
   1ad48:	68ec      	ldr	r4, [r5, #12]
   1ad4a:	e7eb      	b.n	1ad24 <__srefill_r+0x1c>
   1ad4c:	0759      	lsls	r1, r3, #29
   1ad4e:	d44a      	bmi.n	1ade6 <__srefill_r+0xde>
   1ad50:	06d9      	lsls	r1, r3, #27
   1ad52:	d405      	bmi.n	1ad60 <__srefill_r+0x58>
   1ad54:	2309      	movs	r3, #9
   1ad56:	602b      	str	r3, [r5, #0]
   1ad58:	3337      	adds	r3, #55	; 0x37
   1ad5a:	4313      	orrs	r3, r2
   1ad5c:	81a3      	strh	r3, [r4, #12]
   1ad5e:	e7e8      	b.n	1ad32 <__srefill_r+0x2a>
   1ad60:	2608      	movs	r6, #8
   1ad62:	4233      	tst	r3, r6
   1ad64:	d00a      	beq.n	1ad7c <__srefill_r+0x74>
   1ad66:	0021      	movs	r1, r4
   1ad68:	0028      	movs	r0, r5
   1ad6a:	f7fe fe83 	bl	19a74 <_fflush_r>
   1ad6e:	2800      	cmp	r0, #0
   1ad70:	d1df      	bne.n	1ad32 <__srefill_r+0x2a>
   1ad72:	89a3      	ldrh	r3, [r4, #12]
   1ad74:	60a0      	str	r0, [r4, #8]
   1ad76:	43b3      	bics	r3, r6
   1ad78:	81a3      	strh	r3, [r4, #12]
   1ad7a:	61a0      	str	r0, [r4, #24]
   1ad7c:	2304      	movs	r3, #4
   1ad7e:	89a2      	ldrh	r2, [r4, #12]
   1ad80:	4313      	orrs	r3, r2
   1ad82:	81a3      	strh	r3, [r4, #12]
   1ad84:	6923      	ldr	r3, [r4, #16]
   1ad86:	2b00      	cmp	r3, #0
   1ad88:	d103      	bne.n	1ad92 <__srefill_r+0x8a>
   1ad8a:	0021      	movs	r1, r4
   1ad8c:	0028      	movs	r0, r5
   1ad8e:	f7fe ffdd 	bl	19d4c <__smakebuf_r>
   1ad92:	230c      	movs	r3, #12
   1ad94:	5ee7      	ldrsh	r7, [r4, r3]
   1ad96:	b2be      	uxth	r6, r7
   1ad98:	07b3      	lsls	r3, r6, #30
   1ad9a:	d00f      	beq.n	1adbc <__srefill_r+0xb4>
   1ad9c:	2301      	movs	r3, #1
   1ad9e:	81a3      	strh	r3, [r4, #12]
   1ada0:	4b1f      	ldr	r3, [pc, #124]	; (1ae20 <__srefill_r+0x118>)
   1ada2:	4920      	ldr	r1, [pc, #128]	; (1ae24 <__srefill_r+0x11c>)
   1ada4:	6818      	ldr	r0, [r3, #0]
   1ada6:	f7fe ff5b 	bl	19c60 <_fwalk>
   1adaa:	2309      	movs	r3, #9
   1adac:	81a7      	strh	r7, [r4, #12]
   1adae:	401e      	ands	r6, r3
   1adb0:	429e      	cmp	r6, r3
   1adb2:	d103      	bne.n	1adbc <__srefill_r+0xb4>
   1adb4:	0021      	movs	r1, r4
   1adb6:	0028      	movs	r0, r5
   1adb8:	f7fe fdd2 	bl	19960 <__sflush_r>
   1adbc:	6923      	ldr	r3, [r4, #16]
   1adbe:	6922      	ldr	r2, [r4, #16]
   1adc0:	6023      	str	r3, [r4, #0]
   1adc2:	0028      	movs	r0, r5
   1adc4:	6963      	ldr	r3, [r4, #20]
   1adc6:	6a21      	ldr	r1, [r4, #32]
   1adc8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1adca:	47a8      	blx	r5
   1adcc:	0002      	movs	r2, r0
   1adce:	6060      	str	r0, [r4, #4]
   1add0:	2000      	movs	r0, #0
   1add2:	4282      	cmp	r2, r0
   1add4:	dc19      	bgt.n	1ae0a <__srefill_r+0x102>
   1add6:	89a1      	ldrh	r1, [r4, #12]
   1add8:	4282      	cmp	r2, r0
   1adda:	d117      	bne.n	1ae0c <__srefill_r+0x104>
   1addc:	2320      	movs	r3, #32
   1adde:	430b      	orrs	r3, r1
   1ade0:	81a3      	strh	r3, [r4, #12]
   1ade2:	3801      	subs	r0, #1
   1ade4:	e011      	b.n	1ae0a <__srefill_r+0x102>
   1ade6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1ade8:	2900      	cmp	r1, #0
   1adea:	d0cb      	beq.n	1ad84 <__srefill_r+0x7c>
   1adec:	0023      	movs	r3, r4
   1adee:	3344      	adds	r3, #68	; 0x44
   1adf0:	4299      	cmp	r1, r3
   1adf2:	d002      	beq.n	1adfa <__srefill_r+0xf2>
   1adf4:	0028      	movs	r0, r5
   1adf6:	f7fe f911 	bl	1901c <_free_r>
   1adfa:	2000      	movs	r0, #0
   1adfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1adfe:	6360      	str	r0, [r4, #52]	; 0x34
   1ae00:	6063      	str	r3, [r4, #4]
   1ae02:	4283      	cmp	r3, r0
   1ae04:	d0be      	beq.n	1ad84 <__srefill_r+0x7c>
   1ae06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1ae08:	6023      	str	r3, [r4, #0]
   1ae0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ae0c:	2340      	movs	r3, #64	; 0x40
   1ae0e:	6060      	str	r0, [r4, #4]
   1ae10:	430b      	orrs	r3, r1
   1ae12:	e7a3      	b.n	1ad5c <__srefill_r+0x54>
   1ae14:	0001dcf4 	.word	0x0001dcf4
   1ae18:	0001dd14 	.word	0x0001dd14
   1ae1c:	0001dcd4 	.word	0x0001dcd4
   1ae20:	0001dcd0 	.word	0x0001dcd0
   1ae24:	0001acf1 	.word	0x0001acf1

0001ae28 <__sccl>:
   1ae28:	b570      	push	{r4, r5, r6, lr}
   1ae2a:	780b      	ldrb	r3, [r1, #0]
   1ae2c:	2b5e      	cmp	r3, #94	; 0x5e
   1ae2e:	d00d      	beq.n	1ae4c <__sccl+0x24>
   1ae30:	1c4a      	adds	r2, r1, #1
   1ae32:	2100      	movs	r1, #0
   1ae34:	0004      	movs	r4, r0
   1ae36:	1c45      	adds	r5, r0, #1
   1ae38:	35ff      	adds	r5, #255	; 0xff
   1ae3a:	7021      	strb	r1, [r4, #0]
   1ae3c:	3401      	adds	r4, #1
   1ae3e:	42a5      	cmp	r5, r4
   1ae40:	d1fb      	bne.n	1ae3a <__sccl+0x12>
   1ae42:	2b00      	cmp	r3, #0
   1ae44:	d106      	bne.n	1ae54 <__sccl+0x2c>
   1ae46:	3a01      	subs	r2, #1
   1ae48:	0010      	movs	r0, r2
   1ae4a:	bd70      	pop	{r4, r5, r6, pc}
   1ae4c:	1c8a      	adds	r2, r1, #2
   1ae4e:	784b      	ldrb	r3, [r1, #1]
   1ae50:	2101      	movs	r1, #1
   1ae52:	e7ef      	b.n	1ae34 <__sccl+0xc>
   1ae54:	2401      	movs	r4, #1
   1ae56:	404c      	eors	r4, r1
   1ae58:	0011      	movs	r1, r2
   1ae5a:	54c4      	strb	r4, [r0, r3]
   1ae5c:	780d      	ldrb	r5, [r1, #0]
   1ae5e:	1c4a      	adds	r2, r1, #1
   1ae60:	2d2d      	cmp	r5, #45	; 0x2d
   1ae62:	d007      	beq.n	1ae74 <__sccl+0x4c>
   1ae64:	2d5d      	cmp	r5, #93	; 0x5d
   1ae66:	d0ef      	beq.n	1ae48 <__sccl+0x20>
   1ae68:	2d00      	cmp	r5, #0
   1ae6a:	d101      	bne.n	1ae70 <__sccl+0x48>
   1ae6c:	000a      	movs	r2, r1
   1ae6e:	e7eb      	b.n	1ae48 <__sccl+0x20>
   1ae70:	002b      	movs	r3, r5
   1ae72:	e7f1      	b.n	1ae58 <__sccl+0x30>
   1ae74:	784e      	ldrb	r6, [r1, #1]
   1ae76:	2e5d      	cmp	r6, #93	; 0x5d
   1ae78:	d0fa      	beq.n	1ae70 <__sccl+0x48>
   1ae7a:	42b3      	cmp	r3, r6
   1ae7c:	dcf8      	bgt.n	1ae70 <__sccl+0x48>
   1ae7e:	3102      	adds	r1, #2
   1ae80:	3301      	adds	r3, #1
   1ae82:	54c4      	strb	r4, [r0, r3]
   1ae84:	429e      	cmp	r6, r3
   1ae86:	dcfb      	bgt.n	1ae80 <__sccl+0x58>
   1ae88:	e7e8      	b.n	1ae5c <__sccl+0x34>
	...

0001ae8c <__sread>:
   1ae8c:	b570      	push	{r4, r5, r6, lr}
   1ae8e:	000c      	movs	r4, r1
   1ae90:	250e      	movs	r5, #14
   1ae92:	5f49      	ldrsh	r1, [r1, r5]
   1ae94:	f000 fa38 	bl	1b308 <_read_r>
   1ae98:	2800      	cmp	r0, #0
   1ae9a:	db03      	blt.n	1aea4 <__sread+0x18>
   1ae9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1ae9e:	181b      	adds	r3, r3, r0
   1aea0:	6563      	str	r3, [r4, #84]	; 0x54
   1aea2:	bd70      	pop	{r4, r5, r6, pc}
   1aea4:	89a3      	ldrh	r3, [r4, #12]
   1aea6:	4a02      	ldr	r2, [pc, #8]	; (1aeb0 <__sread+0x24>)
   1aea8:	4013      	ands	r3, r2
   1aeaa:	81a3      	strh	r3, [r4, #12]
   1aeac:	e7f9      	b.n	1aea2 <__sread+0x16>
   1aeae:	46c0      	nop			; (mov r8, r8)
   1aeb0:	ffffefff 	.word	0xffffefff

0001aeb4 <__swrite>:
   1aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aeb6:	001f      	movs	r7, r3
   1aeb8:	898b      	ldrh	r3, [r1, #12]
   1aeba:	0005      	movs	r5, r0
   1aebc:	000c      	movs	r4, r1
   1aebe:	0016      	movs	r6, r2
   1aec0:	05db      	lsls	r3, r3, #23
   1aec2:	d505      	bpl.n	1aed0 <__swrite+0x1c>
   1aec4:	230e      	movs	r3, #14
   1aec6:	5ec9      	ldrsh	r1, [r1, r3]
   1aec8:	2200      	movs	r2, #0
   1aeca:	2302      	movs	r3, #2
   1aecc:	f000 f9d6 	bl	1b27c <_lseek_r>
   1aed0:	89a3      	ldrh	r3, [r4, #12]
   1aed2:	4a05      	ldr	r2, [pc, #20]	; (1aee8 <__swrite+0x34>)
   1aed4:	0028      	movs	r0, r5
   1aed6:	4013      	ands	r3, r2
   1aed8:	81a3      	strh	r3, [r4, #12]
   1aeda:	0032      	movs	r2, r6
   1aedc:	230e      	movs	r3, #14
   1aede:	5ee1      	ldrsh	r1, [r4, r3]
   1aee0:	003b      	movs	r3, r7
   1aee2:	f000 f981 	bl	1b1e8 <_write_r>
   1aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aee8:	ffffefff 	.word	0xffffefff

0001aeec <__sseek>:
   1aeec:	b570      	push	{r4, r5, r6, lr}
   1aeee:	000c      	movs	r4, r1
   1aef0:	250e      	movs	r5, #14
   1aef2:	5f49      	ldrsh	r1, [r1, r5]
   1aef4:	f000 f9c2 	bl	1b27c <_lseek_r>
   1aef8:	89a3      	ldrh	r3, [r4, #12]
   1aefa:	1c42      	adds	r2, r0, #1
   1aefc:	d103      	bne.n	1af06 <__sseek+0x1a>
   1aefe:	4a05      	ldr	r2, [pc, #20]	; (1af14 <__sseek+0x28>)
   1af00:	4013      	ands	r3, r2
   1af02:	81a3      	strh	r3, [r4, #12]
   1af04:	bd70      	pop	{r4, r5, r6, pc}
   1af06:	2280      	movs	r2, #128	; 0x80
   1af08:	0152      	lsls	r2, r2, #5
   1af0a:	4313      	orrs	r3, r2
   1af0c:	81a3      	strh	r3, [r4, #12]
   1af0e:	6560      	str	r0, [r4, #84]	; 0x54
   1af10:	e7f8      	b.n	1af04 <__sseek+0x18>
   1af12:	46c0      	nop			; (mov r8, r8)
   1af14:	ffffefff 	.word	0xffffefff

0001af18 <__sclose>:
   1af18:	b510      	push	{r4, lr}
   1af1a:	230e      	movs	r3, #14
   1af1c:	5ec9      	ldrsh	r1, [r1, r3]
   1af1e:	f000 f977 	bl	1b210 <_close_r>
   1af22:	bd10      	pop	{r4, pc}

0001af24 <strchr>:
   1af24:	b2c9      	uxtb	r1, r1
   1af26:	7803      	ldrb	r3, [r0, #0]
   1af28:	2b00      	cmp	r3, #0
   1af2a:	d004      	beq.n	1af36 <strchr+0x12>
   1af2c:	4299      	cmp	r1, r3
   1af2e:	d100      	bne.n	1af32 <strchr+0xe>
   1af30:	4770      	bx	lr
   1af32:	3001      	adds	r0, #1
   1af34:	e7f7      	b.n	1af26 <strchr+0x2>
   1af36:	424b      	negs	r3, r1
   1af38:	4159      	adcs	r1, r3
   1af3a:	4249      	negs	r1, r1
   1af3c:	4008      	ands	r0, r1
   1af3e:	e7f7      	b.n	1af30 <strchr+0xc>

0001af40 <_strtoul_l.isra.0>:
   1af40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af42:	001f      	movs	r7, r3
   1af44:	000e      	movs	r6, r1
   1af46:	b087      	sub	sp, #28
   1af48:	9005      	str	r0, [sp, #20]
   1af4a:	9103      	str	r1, [sp, #12]
   1af4c:	9201      	str	r2, [sp, #4]
   1af4e:	980c      	ldr	r0, [sp, #48]	; 0x30
   1af50:	7834      	ldrb	r4, [r6, #0]
   1af52:	f7fe fec2 	bl	19cda <__locale_ctype_ptr_l>
   1af56:	2208      	movs	r2, #8
   1af58:	1900      	adds	r0, r0, r4
   1af5a:	7843      	ldrb	r3, [r0, #1]
   1af5c:	1c75      	adds	r5, r6, #1
   1af5e:	4013      	ands	r3, r2
   1af60:	d10c      	bne.n	1af7c <_strtoul_l.isra.0+0x3c>
   1af62:	2c2d      	cmp	r4, #45	; 0x2d
   1af64:	d10c      	bne.n	1af80 <_strtoul_l.isra.0+0x40>
   1af66:	3301      	adds	r3, #1
   1af68:	782c      	ldrb	r4, [r5, #0]
   1af6a:	9302      	str	r3, [sp, #8]
   1af6c:	1cb5      	adds	r5, r6, #2
   1af6e:	2f00      	cmp	r7, #0
   1af70:	d00c      	beq.n	1af8c <_strtoul_l.isra.0+0x4c>
   1af72:	2f10      	cmp	r7, #16
   1af74:	d114      	bne.n	1afa0 <_strtoul_l.isra.0+0x60>
   1af76:	2c30      	cmp	r4, #48	; 0x30
   1af78:	d00a      	beq.n	1af90 <_strtoul_l.isra.0+0x50>
   1af7a:	e011      	b.n	1afa0 <_strtoul_l.isra.0+0x60>
   1af7c:	002e      	movs	r6, r5
   1af7e:	e7e6      	b.n	1af4e <_strtoul_l.isra.0+0xe>
   1af80:	9302      	str	r3, [sp, #8]
   1af82:	2c2b      	cmp	r4, #43	; 0x2b
   1af84:	d1f3      	bne.n	1af6e <_strtoul_l.isra.0+0x2e>
   1af86:	782c      	ldrb	r4, [r5, #0]
   1af88:	1cb5      	adds	r5, r6, #2
   1af8a:	e7f0      	b.n	1af6e <_strtoul_l.isra.0+0x2e>
   1af8c:	2c30      	cmp	r4, #48	; 0x30
   1af8e:	d12f      	bne.n	1aff0 <_strtoul_l.isra.0+0xb0>
   1af90:	2220      	movs	r2, #32
   1af92:	782b      	ldrb	r3, [r5, #0]
   1af94:	4393      	bics	r3, r2
   1af96:	2b58      	cmp	r3, #88	; 0x58
   1af98:	d154      	bne.n	1b044 <_strtoul_l.isra.0+0x104>
   1af9a:	2710      	movs	r7, #16
   1af9c:	786c      	ldrb	r4, [r5, #1]
   1af9e:	3502      	adds	r5, #2
   1afa0:	2001      	movs	r0, #1
   1afa2:	0039      	movs	r1, r7
   1afa4:	4240      	negs	r0, r0
   1afa6:	f7fc f835 	bl	17014 <__udivsi3>
   1afaa:	0006      	movs	r6, r0
   1afac:	2001      	movs	r0, #1
   1afae:	0039      	movs	r1, r7
   1afb0:	4240      	negs	r0, r0
   1afb2:	f7fc f8b5 	bl	17120 <__aeabi_uidivmod>
   1afb6:	2300      	movs	r3, #0
   1afb8:	9104      	str	r1, [sp, #16]
   1afba:	2101      	movs	r1, #1
   1afbc:	2201      	movs	r2, #1
   1afbe:	0018      	movs	r0, r3
   1afc0:	468c      	mov	ip, r1
   1afc2:	4252      	negs	r2, r2
   1afc4:	0021      	movs	r1, r4
   1afc6:	3930      	subs	r1, #48	; 0x30
   1afc8:	2909      	cmp	r1, #9
   1afca:	d813      	bhi.n	1aff4 <_strtoul_l.isra.0+0xb4>
   1afcc:	000c      	movs	r4, r1
   1afce:	42a7      	cmp	r7, r4
   1afd0:	dd1e      	ble.n	1b010 <_strtoul_l.isra.0+0xd0>
   1afd2:	2b00      	cmp	r3, #0
   1afd4:	db1a      	blt.n	1b00c <_strtoul_l.isra.0+0xcc>
   1afd6:	0013      	movs	r3, r2
   1afd8:	4286      	cmp	r6, r0
   1afda:	d306      	bcc.n	1afea <_strtoul_l.isra.0+0xaa>
   1afdc:	d102      	bne.n	1afe4 <_strtoul_l.isra.0+0xa4>
   1afde:	9904      	ldr	r1, [sp, #16]
   1afe0:	42a1      	cmp	r1, r4
   1afe2:	db02      	blt.n	1afea <_strtoul_l.isra.0+0xaa>
   1afe4:	4663      	mov	r3, ip
   1afe6:	4378      	muls	r0, r7
   1afe8:	1820      	adds	r0, r4, r0
   1afea:	782c      	ldrb	r4, [r5, #0]
   1afec:	3501      	adds	r5, #1
   1afee:	e7e9      	b.n	1afc4 <_strtoul_l.isra.0+0x84>
   1aff0:	270a      	movs	r7, #10
   1aff2:	e7d5      	b.n	1afa0 <_strtoul_l.isra.0+0x60>
   1aff4:	0021      	movs	r1, r4
   1aff6:	3941      	subs	r1, #65	; 0x41
   1aff8:	2919      	cmp	r1, #25
   1affa:	d801      	bhi.n	1b000 <_strtoul_l.isra.0+0xc0>
   1affc:	3c37      	subs	r4, #55	; 0x37
   1affe:	e7e6      	b.n	1afce <_strtoul_l.isra.0+0x8e>
   1b000:	0021      	movs	r1, r4
   1b002:	3961      	subs	r1, #97	; 0x61
   1b004:	2919      	cmp	r1, #25
   1b006:	d803      	bhi.n	1b010 <_strtoul_l.isra.0+0xd0>
   1b008:	3c57      	subs	r4, #87	; 0x57
   1b00a:	e7e0      	b.n	1afce <_strtoul_l.isra.0+0x8e>
   1b00c:	0013      	movs	r3, r2
   1b00e:	e7ec      	b.n	1afea <_strtoul_l.isra.0+0xaa>
   1b010:	2b00      	cmp	r3, #0
   1b012:	da09      	bge.n	1b028 <_strtoul_l.isra.0+0xe8>
   1b014:	2322      	movs	r3, #34	; 0x22
   1b016:	2001      	movs	r0, #1
   1b018:	9a05      	ldr	r2, [sp, #20]
   1b01a:	4240      	negs	r0, r0
   1b01c:	6013      	str	r3, [r2, #0]
   1b01e:	9b01      	ldr	r3, [sp, #4]
   1b020:	2b00      	cmp	r3, #0
   1b022:	d10b      	bne.n	1b03c <_strtoul_l.isra.0+0xfc>
   1b024:	b007      	add	sp, #28
   1b026:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b028:	9a02      	ldr	r2, [sp, #8]
   1b02a:	2a00      	cmp	r2, #0
   1b02c:	d000      	beq.n	1b030 <_strtoul_l.isra.0+0xf0>
   1b02e:	4240      	negs	r0, r0
   1b030:	9a01      	ldr	r2, [sp, #4]
   1b032:	2a00      	cmp	r2, #0
   1b034:	d0f6      	beq.n	1b024 <_strtoul_l.isra.0+0xe4>
   1b036:	9a03      	ldr	r2, [sp, #12]
   1b038:	2b00      	cmp	r3, #0
   1b03a:	d000      	beq.n	1b03e <_strtoul_l.isra.0+0xfe>
   1b03c:	1e6a      	subs	r2, r5, #1
   1b03e:	9b01      	ldr	r3, [sp, #4]
   1b040:	601a      	str	r2, [r3, #0]
   1b042:	e7ef      	b.n	1b024 <_strtoul_l.isra.0+0xe4>
   1b044:	2430      	movs	r4, #48	; 0x30
   1b046:	2f00      	cmp	r7, #0
   1b048:	d1aa      	bne.n	1afa0 <_strtoul_l.isra.0+0x60>
   1b04a:	3708      	adds	r7, #8
   1b04c:	e7a8      	b.n	1afa0 <_strtoul_l.isra.0+0x60>
	...

0001b050 <_strtoul_r>:
   1b050:	b513      	push	{r0, r1, r4, lr}
   1b052:	4c05      	ldr	r4, [pc, #20]	; (1b068 <_strtoul_r+0x18>)
   1b054:	6824      	ldr	r4, [r4, #0]
   1b056:	6a24      	ldr	r4, [r4, #32]
   1b058:	2c00      	cmp	r4, #0
   1b05a:	d100      	bne.n	1b05e <_strtoul_r+0xe>
   1b05c:	4c03      	ldr	r4, [pc, #12]	; (1b06c <_strtoul_r+0x1c>)
   1b05e:	9400      	str	r4, [sp, #0]
   1b060:	f7ff ff6e 	bl	1af40 <_strtoul_l.isra.0>
   1b064:	bd16      	pop	{r1, r2, r4, pc}
   1b066:	46c0      	nop			; (mov r8, r8)
   1b068:	20000180 	.word	0x20000180
   1b06c:	200001e4 	.word	0x200001e4

0001b070 <__submore>:
   1b070:	000b      	movs	r3, r1
   1b072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b074:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   1b076:	3344      	adds	r3, #68	; 0x44
   1b078:	000c      	movs	r4, r1
   1b07a:	429d      	cmp	r5, r3
   1b07c:	d11c      	bne.n	1b0b8 <__submore+0x48>
   1b07e:	2680      	movs	r6, #128	; 0x80
   1b080:	00f6      	lsls	r6, r6, #3
   1b082:	0031      	movs	r1, r6
   1b084:	f7fe f814 	bl	190b0 <_malloc_r>
   1b088:	2800      	cmp	r0, #0
   1b08a:	d102      	bne.n	1b092 <__submore+0x22>
   1b08c:	2001      	movs	r0, #1
   1b08e:	4240      	negs	r0, r0
   1b090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1b092:	0023      	movs	r3, r4
   1b094:	6360      	str	r0, [r4, #52]	; 0x34
   1b096:	63a6      	str	r6, [r4, #56]	; 0x38
   1b098:	3346      	adds	r3, #70	; 0x46
   1b09a:	781a      	ldrb	r2, [r3, #0]
   1b09c:	4b10      	ldr	r3, [pc, #64]	; (1b0e0 <__submore+0x70>)
   1b09e:	54c2      	strb	r2, [r0, r3]
   1b0a0:	0023      	movs	r3, r4
   1b0a2:	3345      	adds	r3, #69	; 0x45
   1b0a4:	781a      	ldrb	r2, [r3, #0]
   1b0a6:	4b0f      	ldr	r3, [pc, #60]	; (1b0e4 <__submore+0x74>)
   1b0a8:	54c2      	strb	r2, [r0, r3]
   1b0aa:	782a      	ldrb	r2, [r5, #0]
   1b0ac:	4b0e      	ldr	r3, [pc, #56]	; (1b0e8 <__submore+0x78>)
   1b0ae:	54c2      	strb	r2, [r0, r3]
   1b0b0:	18c0      	adds	r0, r0, r3
   1b0b2:	6020      	str	r0, [r4, #0]
   1b0b4:	2000      	movs	r0, #0
   1b0b6:	e7eb      	b.n	1b090 <__submore+0x20>
   1b0b8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
   1b0ba:	0029      	movs	r1, r5
   1b0bc:	0073      	lsls	r3, r6, #1
   1b0be:	001a      	movs	r2, r3
   1b0c0:	9301      	str	r3, [sp, #4]
   1b0c2:	f000 f8fa 	bl	1b2ba <_realloc_r>
   1b0c6:	1e05      	subs	r5, r0, #0
   1b0c8:	d0e0      	beq.n	1b08c <__submore+0x1c>
   1b0ca:	1987      	adds	r7, r0, r6
   1b0cc:	0001      	movs	r1, r0
   1b0ce:	0032      	movs	r2, r6
   1b0d0:	0038      	movs	r0, r7
   1b0d2:	f7fd ff7f 	bl	18fd4 <memcpy>
   1b0d6:	9b01      	ldr	r3, [sp, #4]
   1b0d8:	6027      	str	r7, [r4, #0]
   1b0da:	6365      	str	r5, [r4, #52]	; 0x34
   1b0dc:	63a3      	str	r3, [r4, #56]	; 0x38
   1b0de:	e7e9      	b.n	1b0b4 <__submore+0x44>
   1b0e0:	000003ff 	.word	0x000003ff
   1b0e4:	000003fe 	.word	0x000003fe
   1b0e8:	000003fd 	.word	0x000003fd

0001b0ec <_ungetc_r>:
   1b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0ee:	0005      	movs	r5, r0
   1b0f0:	000e      	movs	r6, r1
   1b0f2:	0014      	movs	r4, r2
   1b0f4:	1c4b      	adds	r3, r1, #1
   1b0f6:	d103      	bne.n	1b100 <_ungetc_r+0x14>
   1b0f8:	2601      	movs	r6, #1
   1b0fa:	4276      	negs	r6, r6
   1b0fc:	0030      	movs	r0, r6
   1b0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b100:	2800      	cmp	r0, #0
   1b102:	d004      	beq.n	1b10e <_ungetc_r+0x22>
   1b104:	6983      	ldr	r3, [r0, #24]
   1b106:	2b00      	cmp	r3, #0
   1b108:	d101      	bne.n	1b10e <_ungetc_r+0x22>
   1b10a:	f7fe fd35 	bl	19b78 <__sinit>
   1b10e:	4b2d      	ldr	r3, [pc, #180]	; (1b1c4 <_ungetc_r+0xd8>)
   1b110:	429c      	cmp	r4, r3
   1b112:	d12d      	bne.n	1b170 <_ungetc_r+0x84>
   1b114:	686c      	ldr	r4, [r5, #4]
   1b116:	2220      	movs	r2, #32
   1b118:	89a3      	ldrh	r3, [r4, #12]
   1b11a:	4393      	bics	r3, r2
   1b11c:	b21b      	sxth	r3, r3
   1b11e:	81a3      	strh	r3, [r4, #12]
   1b120:	b29b      	uxth	r3, r3
   1b122:	075a      	lsls	r2, r3, #29
   1b124:	d413      	bmi.n	1b14e <_ungetc_r+0x62>
   1b126:	06da      	lsls	r2, r3, #27
   1b128:	d5e6      	bpl.n	1b0f8 <_ungetc_r+0xc>
   1b12a:	2708      	movs	r7, #8
   1b12c:	423b      	tst	r3, r7
   1b12e:	d00a      	beq.n	1b146 <_ungetc_r+0x5a>
   1b130:	0021      	movs	r1, r4
   1b132:	0028      	movs	r0, r5
   1b134:	f7fe fc9e 	bl	19a74 <_fflush_r>
   1b138:	2800      	cmp	r0, #0
   1b13a:	d1dd      	bne.n	1b0f8 <_ungetc_r+0xc>
   1b13c:	89a3      	ldrh	r3, [r4, #12]
   1b13e:	60a0      	str	r0, [r4, #8]
   1b140:	43bb      	bics	r3, r7
   1b142:	81a3      	strh	r3, [r4, #12]
   1b144:	61a0      	str	r0, [r4, #24]
   1b146:	2304      	movs	r3, #4
   1b148:	89a2      	ldrh	r2, [r4, #12]
   1b14a:	4313      	orrs	r3, r2
   1b14c:	81a3      	strh	r3, [r4, #12]
   1b14e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1b150:	b2f7      	uxtb	r7, r6
   1b152:	6863      	ldr	r3, [r4, #4]
   1b154:	b2f6      	uxtb	r6, r6
   1b156:	2a00      	cmp	r2, #0
   1b158:	d01b      	beq.n	1b192 <_ungetc_r+0xa6>
   1b15a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1b15c:	4293      	cmp	r3, r2
   1b15e:	da11      	bge.n	1b184 <_ungetc_r+0x98>
   1b160:	6823      	ldr	r3, [r4, #0]
   1b162:	3b01      	subs	r3, #1
   1b164:	6023      	str	r3, [r4, #0]
   1b166:	701f      	strb	r7, [r3, #0]
   1b168:	6863      	ldr	r3, [r4, #4]
   1b16a:	3301      	adds	r3, #1
   1b16c:	6063      	str	r3, [r4, #4]
   1b16e:	e7c5      	b.n	1b0fc <_ungetc_r+0x10>
   1b170:	4b15      	ldr	r3, [pc, #84]	; (1b1c8 <_ungetc_r+0xdc>)
   1b172:	429c      	cmp	r4, r3
   1b174:	d101      	bne.n	1b17a <_ungetc_r+0x8e>
   1b176:	68ac      	ldr	r4, [r5, #8]
   1b178:	e7cd      	b.n	1b116 <_ungetc_r+0x2a>
   1b17a:	4b14      	ldr	r3, [pc, #80]	; (1b1cc <_ungetc_r+0xe0>)
   1b17c:	429c      	cmp	r4, r3
   1b17e:	d1ca      	bne.n	1b116 <_ungetc_r+0x2a>
   1b180:	68ec      	ldr	r4, [r5, #12]
   1b182:	e7c8      	b.n	1b116 <_ungetc_r+0x2a>
   1b184:	0021      	movs	r1, r4
   1b186:	0028      	movs	r0, r5
   1b188:	f7ff ff72 	bl	1b070 <__submore>
   1b18c:	2800      	cmp	r0, #0
   1b18e:	d0e7      	beq.n	1b160 <_ungetc_r+0x74>
   1b190:	e7b2      	b.n	1b0f8 <_ungetc_r+0xc>
   1b192:	6921      	ldr	r1, [r4, #16]
   1b194:	6822      	ldr	r2, [r4, #0]
   1b196:	2900      	cmp	r1, #0
   1b198:	d007      	beq.n	1b1aa <_ungetc_r+0xbe>
   1b19a:	4291      	cmp	r1, r2
   1b19c:	d205      	bcs.n	1b1aa <_ungetc_r+0xbe>
   1b19e:	1e51      	subs	r1, r2, #1
   1b1a0:	7808      	ldrb	r0, [r1, #0]
   1b1a2:	4286      	cmp	r6, r0
   1b1a4:	d101      	bne.n	1b1aa <_ungetc_r+0xbe>
   1b1a6:	6021      	str	r1, [r4, #0]
   1b1a8:	e7df      	b.n	1b16a <_ungetc_r+0x7e>
   1b1aa:	6423      	str	r3, [r4, #64]	; 0x40
   1b1ac:	0023      	movs	r3, r4
   1b1ae:	3344      	adds	r3, #68	; 0x44
   1b1b0:	6363      	str	r3, [r4, #52]	; 0x34
   1b1b2:	2303      	movs	r3, #3
   1b1b4:	63a3      	str	r3, [r4, #56]	; 0x38
   1b1b6:	0023      	movs	r3, r4
   1b1b8:	3346      	adds	r3, #70	; 0x46
   1b1ba:	63e2      	str	r2, [r4, #60]	; 0x3c
   1b1bc:	701f      	strb	r7, [r3, #0]
   1b1be:	6023      	str	r3, [r4, #0]
   1b1c0:	2301      	movs	r3, #1
   1b1c2:	e7d3      	b.n	1b16c <_ungetc_r+0x80>
   1b1c4:	0001dcf4 	.word	0x0001dcf4
   1b1c8:	0001dd14 	.word	0x0001dd14
   1b1cc:	0001dcd4 	.word	0x0001dcd4

0001b1d0 <__ascii_wctomb>:
   1b1d0:	1e0b      	subs	r3, r1, #0
   1b1d2:	d004      	beq.n	1b1de <__ascii_wctomb+0xe>
   1b1d4:	2aff      	cmp	r2, #255	; 0xff
   1b1d6:	d904      	bls.n	1b1e2 <__ascii_wctomb+0x12>
   1b1d8:	238a      	movs	r3, #138	; 0x8a
   1b1da:	6003      	str	r3, [r0, #0]
   1b1dc:	3b8b      	subs	r3, #139	; 0x8b
   1b1de:	0018      	movs	r0, r3
   1b1e0:	4770      	bx	lr
   1b1e2:	700a      	strb	r2, [r1, #0]
   1b1e4:	2301      	movs	r3, #1
   1b1e6:	e7fa      	b.n	1b1de <__ascii_wctomb+0xe>

0001b1e8 <_write_r>:
   1b1e8:	b570      	push	{r4, r5, r6, lr}
   1b1ea:	0005      	movs	r5, r0
   1b1ec:	0008      	movs	r0, r1
   1b1ee:	0011      	movs	r1, r2
   1b1f0:	2200      	movs	r2, #0
   1b1f2:	4c06      	ldr	r4, [pc, #24]	; (1b20c <_write_r+0x24>)
   1b1f4:	6022      	str	r2, [r4, #0]
   1b1f6:	001a      	movs	r2, r3
   1b1f8:	f7f6 f850 	bl	1129c <_write>
   1b1fc:	1c43      	adds	r3, r0, #1
   1b1fe:	d103      	bne.n	1b208 <_write_r+0x20>
   1b200:	6823      	ldr	r3, [r4, #0]
   1b202:	2b00      	cmp	r3, #0
   1b204:	d000      	beq.n	1b208 <_write_r+0x20>
   1b206:	602b      	str	r3, [r5, #0]
   1b208:	bd70      	pop	{r4, r5, r6, pc}
   1b20a:	46c0      	nop			; (mov r8, r8)
   1b20c:	200014ac 	.word	0x200014ac

0001b210 <_close_r>:
   1b210:	2300      	movs	r3, #0
   1b212:	b570      	push	{r4, r5, r6, lr}
   1b214:	4c06      	ldr	r4, [pc, #24]	; (1b230 <_close_r+0x20>)
   1b216:	0005      	movs	r5, r0
   1b218:	0008      	movs	r0, r1
   1b21a:	6023      	str	r3, [r4, #0]
   1b21c:	f7f6 f878 	bl	11310 <_close>
   1b220:	1c43      	adds	r3, r0, #1
   1b222:	d103      	bne.n	1b22c <_close_r+0x1c>
   1b224:	6823      	ldr	r3, [r4, #0]
   1b226:	2b00      	cmp	r3, #0
   1b228:	d000      	beq.n	1b22c <_close_r+0x1c>
   1b22a:	602b      	str	r3, [r5, #0]
   1b22c:	bd70      	pop	{r4, r5, r6, pc}
   1b22e:	46c0      	nop			; (mov r8, r8)
   1b230:	200014ac 	.word	0x200014ac

0001b234 <_fstat_r>:
   1b234:	2300      	movs	r3, #0
   1b236:	b570      	push	{r4, r5, r6, lr}
   1b238:	4c06      	ldr	r4, [pc, #24]	; (1b254 <_fstat_r+0x20>)
   1b23a:	0005      	movs	r5, r0
   1b23c:	0008      	movs	r0, r1
   1b23e:	0011      	movs	r1, r2
   1b240:	6023      	str	r3, [r4, #0]
   1b242:	f7f6 f868 	bl	11316 <_fstat>
   1b246:	1c43      	adds	r3, r0, #1
   1b248:	d103      	bne.n	1b252 <_fstat_r+0x1e>
   1b24a:	6823      	ldr	r3, [r4, #0]
   1b24c:	2b00      	cmp	r3, #0
   1b24e:	d000      	beq.n	1b252 <_fstat_r+0x1e>
   1b250:	602b      	str	r3, [r5, #0]
   1b252:	bd70      	pop	{r4, r5, r6, pc}
   1b254:	200014ac 	.word	0x200014ac

0001b258 <_isatty_r>:
   1b258:	2300      	movs	r3, #0
   1b25a:	b570      	push	{r4, r5, r6, lr}
   1b25c:	4c06      	ldr	r4, [pc, #24]	; (1b278 <_isatty_r+0x20>)
   1b25e:	0005      	movs	r5, r0
   1b260:	0008      	movs	r0, r1
   1b262:	6023      	str	r3, [r4, #0]
   1b264:	f7f6 f85c 	bl	11320 <_isatty>
   1b268:	1c43      	adds	r3, r0, #1
   1b26a:	d103      	bne.n	1b274 <_isatty_r+0x1c>
   1b26c:	6823      	ldr	r3, [r4, #0]
   1b26e:	2b00      	cmp	r3, #0
   1b270:	d000      	beq.n	1b274 <_isatty_r+0x1c>
   1b272:	602b      	str	r3, [r5, #0]
   1b274:	bd70      	pop	{r4, r5, r6, pc}
   1b276:	46c0      	nop			; (mov r8, r8)
   1b278:	200014ac 	.word	0x200014ac

0001b27c <_lseek_r>:
   1b27c:	b570      	push	{r4, r5, r6, lr}
   1b27e:	0005      	movs	r5, r0
   1b280:	0008      	movs	r0, r1
   1b282:	0011      	movs	r1, r2
   1b284:	2200      	movs	r2, #0
   1b286:	4c06      	ldr	r4, [pc, #24]	; (1b2a0 <_lseek_r+0x24>)
   1b288:	6022      	str	r2, [r4, #0]
   1b28a:	001a      	movs	r2, r3
   1b28c:	f7f6 f84a 	bl	11324 <_lseek>
   1b290:	1c43      	adds	r3, r0, #1
   1b292:	d103      	bne.n	1b29c <_lseek_r+0x20>
   1b294:	6823      	ldr	r3, [r4, #0]
   1b296:	2b00      	cmp	r3, #0
   1b298:	d000      	beq.n	1b29c <_lseek_r+0x20>
   1b29a:	602b      	str	r3, [r5, #0]
   1b29c:	bd70      	pop	{r4, r5, r6, pc}
   1b29e:	46c0      	nop			; (mov r8, r8)
   1b2a0:	200014ac 	.word	0x200014ac

0001b2a4 <memchr>:
   1b2a4:	b2c9      	uxtb	r1, r1
   1b2a6:	1882      	adds	r2, r0, r2
   1b2a8:	4290      	cmp	r0, r2
   1b2aa:	d101      	bne.n	1b2b0 <memchr+0xc>
   1b2ac:	2000      	movs	r0, #0
   1b2ae:	4770      	bx	lr
   1b2b0:	7803      	ldrb	r3, [r0, #0]
   1b2b2:	428b      	cmp	r3, r1
   1b2b4:	d0fb      	beq.n	1b2ae <memchr+0xa>
   1b2b6:	3001      	adds	r0, #1
   1b2b8:	e7f6      	b.n	1b2a8 <memchr+0x4>

0001b2ba <_realloc_r>:
   1b2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2bc:	0007      	movs	r7, r0
   1b2be:	000d      	movs	r5, r1
   1b2c0:	0016      	movs	r6, r2
   1b2c2:	2900      	cmp	r1, #0
   1b2c4:	d105      	bne.n	1b2d2 <_realloc_r+0x18>
   1b2c6:	0011      	movs	r1, r2
   1b2c8:	f7fd fef2 	bl	190b0 <_malloc_r>
   1b2cc:	0004      	movs	r4, r0
   1b2ce:	0020      	movs	r0, r4
   1b2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b2d2:	2a00      	cmp	r2, #0
   1b2d4:	d103      	bne.n	1b2de <_realloc_r+0x24>
   1b2d6:	f7fd fea1 	bl	1901c <_free_r>
   1b2da:	0034      	movs	r4, r6
   1b2dc:	e7f7      	b.n	1b2ce <_realloc_r+0x14>
   1b2de:	f000 f827 	bl	1b330 <_malloc_usable_size_r>
   1b2e2:	002c      	movs	r4, r5
   1b2e4:	4286      	cmp	r6, r0
   1b2e6:	d9f2      	bls.n	1b2ce <_realloc_r+0x14>
   1b2e8:	0031      	movs	r1, r6
   1b2ea:	0038      	movs	r0, r7
   1b2ec:	f7fd fee0 	bl	190b0 <_malloc_r>
   1b2f0:	1e04      	subs	r4, r0, #0
   1b2f2:	d0ec      	beq.n	1b2ce <_realloc_r+0x14>
   1b2f4:	0029      	movs	r1, r5
   1b2f6:	0032      	movs	r2, r6
   1b2f8:	f7fd fe6c 	bl	18fd4 <memcpy>
   1b2fc:	0029      	movs	r1, r5
   1b2fe:	0038      	movs	r0, r7
   1b300:	f7fd fe8c 	bl	1901c <_free_r>
   1b304:	e7e3      	b.n	1b2ce <_realloc_r+0x14>
	...

0001b308 <_read_r>:
   1b308:	b570      	push	{r4, r5, r6, lr}
   1b30a:	0005      	movs	r5, r0
   1b30c:	0008      	movs	r0, r1
   1b30e:	0011      	movs	r1, r2
   1b310:	2200      	movs	r2, #0
   1b312:	4c06      	ldr	r4, [pc, #24]	; (1b32c <_read_r+0x24>)
   1b314:	6022      	str	r2, [r4, #0]
   1b316:	001a      	movs	r2, r3
   1b318:	f7f5 ff9e 	bl	11258 <_read>
   1b31c:	1c43      	adds	r3, r0, #1
   1b31e:	d103      	bne.n	1b328 <_read_r+0x20>
   1b320:	6823      	ldr	r3, [r4, #0]
   1b322:	2b00      	cmp	r3, #0
   1b324:	d000      	beq.n	1b328 <_read_r+0x20>
   1b326:	602b      	str	r3, [r5, #0]
   1b328:	bd70      	pop	{r4, r5, r6, pc}
   1b32a:	46c0      	nop			; (mov r8, r8)
   1b32c:	200014ac 	.word	0x200014ac

0001b330 <_malloc_usable_size_r>:
   1b330:	1f0b      	subs	r3, r1, #4
   1b332:	681b      	ldr	r3, [r3, #0]
   1b334:	1f18      	subs	r0, r3, #4
   1b336:	2b00      	cmp	r3, #0
   1b338:	da01      	bge.n	1b33e <_malloc_usable_size_r+0xe>
   1b33a:	580b      	ldr	r3, [r1, r0]
   1b33c:	18c0      	adds	r0, r0, r3
   1b33e:	4770      	bx	lr
   1b340:	72656854 	.word	0x72656854
   1b344:	3a6d6163 	.word	0x3a6d6163
   1b348:	203e3e20 	.word	0x203e3e20
   1b34c:	20656e4f 	.word	0x20656e4f
   1b350:	6d617266 	.word	0x6d617266
   1b354:	65722065 	.word	0x65722065
   1b358:	0d0a6461 	.word	0x0d0a6461
   1b35c:	00000000 	.word	0x00000000
   1b360:	00206425 	.word	0x00206425
   1b364:	203b6425 	.word	0x203b6425
   1b368:	00000d0a 	.word	0x00000d0a
   1b36c:	0d0a6425 	.word	0x0d0a6425
   1b370:	00000000 	.word	0x00000000

0001b374 <mmc_trans_multipliers>:
   1b374:	00000000 0000000a 0000000c 0000000d     ................
   1b384:	0000000f 00000014 0000001a 0000001e     ................
   1b394:	00000023 00000028 0000002d 00000034     #...(...-...4...
   1b3a4:	00000037 0000003c 00000046 00000050     7...<...F...P...

0001b3b4 <sd_mmc_trans_units>:
   1b3b4:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0001b3d0 <sd_trans_multipliers>:
   1b3d0:	00000000 0000000a 0000000c 0000000d     ................
   1b3e0:	0000000f 00000014 00000019 0000001e     ................
   1b3f0:	00000023 00000028 0000002d 00000032     #...(...-...2...
   1b400:	00000037 0000003c 00000046 00000050     7...<...F...P...

0001b410 <__FUNCTION__.14850>:
   1b410:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1b420:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1b430:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   1b440:	6320746c 0000646d 0000c4a0 0000c470     lt cmd......p...
   1b450:	0000c468 0000c480 0000c478 0000c498     h.......x.......
   1b460:	0000c488 0000c490                       ........

0001b468 <__FUNCTION__.13113>:
   1b468:	5f666968 646e6573 00000000              hif_send....

0001b474 <__FUNCTION__.13123>:
   1b474:	5f666968 00727369                       hif_isr.

0001b47c <__FUNCTION__.13133>:
   1b47c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0001b48c <__FUNCTION__.13145>:
   1b48c:	5f666968 65636572 00657669              hif_receive.

0001b498 <__FUNCTION__.13161>:
   1b498:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1b4a8:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   1b4b8:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   1b4c8:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   1b4d8:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   1b4e8:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   1b4f8:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   1b508:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   1b518:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   1b528:	6c616320 6361626c 7369206b 746f6e20      callback is not
   1b538:	67657220 65747369 00646572 6b636f53      registered.Sock
   1b548:	63207465 626c6c61 206b6361 6e207369     et callback is n
   1b558:	7220746f 73696765 65726574 00000064     ot registered...
   1b568:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   1b578:	20746f6e 69676572 72657473 00006465     not registered..
   1b588:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   1b598:	6e207369 7220746f 73696765 65726574     is not registere
   1b5a8:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   1b5b8:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   1b5c8:	64657265 00000000 204c5353 6c6c6163     ered....SSL call
   1b5d8:	6b636162 20736920 20746f6e 69676572     back is not regi
   1b5e8:	72657473 00006465 66696828 6e692029     stered..(hif) in
   1b5f8:	696c6176 72672064 2070756f 00004449     valid group ID..
   1b608:	66696828 6f682029 61207473 64207070     (hif) host app d
   1b618:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   1b628:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   1b638:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   1b648:	66696828 61462029 2065736c 65746e69     (hif) False inte
   1b658:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
   1b668:	61462029 64656c69 206f7420 64616552     ) Failed to Read
   1b678:	746e6920 75727265 72207470 00006765      interrupt reg..
   1b688:	46494828 61462029 64656c69 206f7420     (HIF) Failed to 
   1b698:	646e6168 6920656c 7265746e 74707572     handle interrupt
   1b6a8:	2c642520 6f626120 6e697472 75642067      %d, aborting du
   1b6b8:	6f742065 6f6f7420 6e616d20 65722079     e to too many re
   1b6c8:	65697274 00000a73 46494828 61462029     tries...(HIF) Fa
   1b6d8:	64656c69 206f7420 646e6168 6920656c     iled to handle i
   1b6e8:	7265746e 74707572 20642520 20797274     nterrupt %d try 
   1b6f8:	69616761 2e2e2e6e 75252820 00000a29     again... (%u)...
   1b708:	66696820 6365725f 65766965 6e49203a      hif_receive: In
   1b718:	696c6176 72612064 656d7567 0000746e     valid argument..
   1b728:	20505041 75716552 65747365 69532064     APP Requested Si
   1b738:	6920657a 616c2073 72656772 61687420     ze is larger tha
   1b748:	6874206e 65722065 76696563 62206465     n the received b
   1b758:	65666675 69732072 3c20657a 3c3e7525     uffer size <%u><
   1b768:	3e756c25 0000000a 20505041 75716552     %lu>....APP Requ
   1b778:	65747365 64412064 73657264 65622073     ested Address be
   1b788:	646e6f79 65687420 63657220 65766965     yond the receive
   1b798:	75622064 72656666 64646120 73736572     d buffer address
   1b7a8:	646e6120 6e656c20 00687467 20705247      and length.GRp 
   1b7b8:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
   1b7c8:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
   1b7d8:	002e2e2e 46494828 69614629 2064656c     ....(HIF)Failed 
   1b7e8:	77206f74 75656b61 68742070 68632065     to wakeup the ch
   1b7f8:	00007069 20464948 7373656d 20656761     ip..HIF message 
   1b808:	676e656c 28206874 20296425 65637865     length (%d) exce
   1b818:	20736465 2078616d 676e656c 28206874     eds max length (
   1b828:	0a296425 00000000                       %d).....

0001b830 <__FUNCTION__.13095>:
   1b830:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001b83c <__FUNCTION__.13124>:
   1b83c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0001b84c <__FUNCTION__.13155>:
   1b84c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   1b85c:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   1b86c:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   1b87c:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   1b88c:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   1b89c:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   1b8ac:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   1b8bc:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   1b8cc:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   1b8dc:	20706557 2079656b 65646e69 64252078     Wep key index %d
   1b8ec:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   1b8fc:	2079656b 676e656c 25206874 00000a64     key length %d...
   1b90c:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   1b91c:	656c2079 6874676e 00000000 65646e75     y length....unde
   1b92c:	656e6966 65732064 79742063 00006570     fined sec type..
   1b93c:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   1b94c:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   1b95c:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   1b96c:	69754220 2520646c 69542073 2520656d      Build %s Time %
   1b97c:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   1b98c:	69726420 20726576 20726576 7525203a      driver ver : %u
   1b99c:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   1b9ac:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
   1b9bc:	313a3130 35303a38 00000000 2079614d     01:18:05....May 
   1b9cc:	32203520 00393130 76697244 62207265      5 2019.Driver b
   1b9dc:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   1b9ec:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
   1b9fc:	65562065 6f697372 0000006e              e Version...

0001ba08 <__FUNCTION__.12952>:
   1ba08:	70696863 6b61775f 00000065              chip_wake...

0001ba14 <__FUNCTION__.13001>:
   1ba14:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   1ba24:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   1ba34:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   1ba44:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   1ba54:	74206465 6177206f 2070756b 20656874     ed to wakup the 
   1ba64:	70696863 00000000 76697244 65567265     chip....DriverVe
   1ba74:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0001ba84 <__FUNCTION__.12999>:
   1ba84:	645f6d6e 695f7672 0074696e              nm_drv_init.

0001ba90 <__FUNCTION__.13006>:
   1ba90:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   1baa0:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   1bab0:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   1bac0:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   1bad0:	73616c66 69642068 6c626173 61662065     flash disable fa
   1bae0:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   1baf0:	6c696166 696e6920 75622074 00000073     fail init bus...
   1bb00:	6c696166 74206465 6e65206f 656c6261     failed to enable
   1bb10:	746e6920 75727265 2e737470 0000002e      interrupts.....
   1bb20:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   1bb30:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   1bb40:	20444920 0a786c25 00000000 0000d480      ID %lx.........
   1bb50:	0000d480 0000d4b0 0000d432 0000d456     ........2...V...
   1bb60:	0000d464 0000d496 0000d496 0000d4de     d...............
   1bb70:	0000d416 0000d518 0000d518 0000d518     ................
   1bb80:	0000d518 0000d472 cac4c9c3              ....r.......

0001bb8c <__FUNCTION__.12268>:
   1bb8c:	5f697073 00646d63                       spi_cmd.

0001bb94 <__FUNCTION__.12275>:
   1bb94:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001bba4 <__FUNCTION__.12284>:
   1bba4:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0001bbb0 <__FUNCTION__.12300>:
   1bbb0:	5f697073 61746164 6165725f 00000064     spi_data_read...

0001bbc0 <__FUNCTION__.12315>:
   1bbc0:	5f697073 61746164 6972775f 00006574     spi_data_write..

0001bbd0 <__FUNCTION__.12327>:
   1bbd0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0001bbe0 <__FUNCTION__.12338>:
   1bbe0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0001bbf0 <__FUNCTION__.12350>:
   1bbf0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0001bc00 <__FUNCTION__.12363>:
   1bc00:	735f6d6e 725f6970 00646165              nm_spi_read.

0001bc0c <__FUNCTION__.12384>:
   1bc0c:	735f6d6e 695f6970 0074696e              nm_spi_init.

0001bc18 <crc7_syndrome_table>:
   1bc18:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1bc28:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1bc38:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1bc48:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1bc58:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1bc68:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1bc78:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1bc88:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1bc98:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1bca8:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1bcb8:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1bcc8:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1bcd8:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1bce8:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1bcf8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1bd08:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1bd18:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1bd28:	6e692064 6e726574 72206c61 20646165     d internal read 
   1bd38:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   1bd48:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   1bd58:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   1bd68:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1bd78:	6e692064 6e726574 72206c61 20646165     d internal read 
   1bd88:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   1bd98:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   1bda8:	6e726574 77206c61 65746972 6f727020     ternal write pro
   1bdb8:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   1bdc8:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   1bdd8:	20646d63 64616572 69686320 64692070     cmd read chip id
   1bde8:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1bdf8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1be08:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1be18:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1be28:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1be38:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1be48:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1be58:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1be68:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1be78:	00000000 65736552 6e612074 65722064     ....Reset and re
   1be88:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   1be98:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1bea8:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   1beb8:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1bec8:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1bed8:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1bee8:	69727720 62206574 6b636f6c 30252820      write block (%0
   1bef8:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1bf08:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1bf18:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   1bf28:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1bf38:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1bf48:	61642064 62206174 6b636f6c 69727720     d data block wri
   1bf58:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1bf68:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1bf78:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1bf88:	63726320 69727720 202c6574 20737562      crc write, bus 
   1bf98:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   1bfa8:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   1bfb8:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   1bfc8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1bfd8:	72206174 6f707365 2065736e 64616572     ta response read
   1bfe8:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   1bff8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1c008:	206b636f 61746164 69727720 2e2e6574     ock data write..
   1c018:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1c028:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1c038:	73756220 72726520 2e2e726f 0000002e      bus error......
   1c048:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1c058:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1c068:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1c078:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1c088:	656c6961 61642064 72206174 6f707365     ailed data respo
   1c098:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1c0a8:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   1c0b8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1c0c8:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1c0d8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1c0e8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1c0f8:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1c108:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1c118:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1c128:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1c138:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1c148:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1c158:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1c168:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1c178:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1c188:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1c198:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1c1a8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1c1b8:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1c1c8:	6e612074 65722064 20797274 25206425     t and retry %d %
   1c1d8:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1c1e8:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   1c1f8:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   1c208:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1c218:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   1c228:	74697277 65722065 25282067 29783830     write reg (%08x)
   1c238:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   1c248:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   1c258:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
   1c268:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
   1c278:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   1c288:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
   1c298:	4449206e 25203d20 000a0d64 0000eedc     n ID = %d.......
   1c2a8:	0000eedc 0000eeb8 0000eedc 0000eeb8     ................
   1c2b8:	0000ee9e 0000ee9e 0000eedc 0000eedc     ................
   1c2c8:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c2d8:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c2e8:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c2f8:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c308:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c318:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c328:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c338:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c348:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c358:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c368:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c378:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c388:	0000eedc 0000eedc 0000eedc 0000eedc     ................
   1c398:	0000eedc 0000eedc 0000eedc 0000eeb8     ................
   1c3a8:	0000eeb8 0000eec0 0000eec0 0000eec0     ................
   1c3b8:	0000eec0 42000800 42000c00 42001000     .......B...B...B
   1c3c8:	42001400 42001800 42001c00 00010382     ...B...B...B....
   1c3d8:	0001037e 0001037e 000103e4 000103e4     ~...~...........
   1c3e8:	00010396 00010388 0001039c 000103d2     ................
   1c3f8:	000105a4 00010584 00010584 00010610     ................
   1c408:	00010596 000105b2 00010588 000105c0     ................
   1c418:	00010600                                ....

0001c41c <_tcc_apbcmasks>:
   1c41c:	00000100 00000200 00000400              ............

0001c428 <_tcc_cc_nums>:
   1c428:	00020204                                ....

0001c42c <_tcc_gclk_ids>:
   1c42c:	001b1a1a                                ....

0001c430 <_tcc_maxs>:
   1c430:	00ffffff 00ffffff 0000ffff              ............

0001c43c <_tcc_ow_nums>:
   1c43c:	00020408                                ....

0001c440 <_tcc_intflag>:
   1c440:	00000001 00000002 00000004 00000008     ................
   1c450:	00001000 00002000 00004000 00008000     ..... ...@......
   1c460:	00010000 00020000 00040000 00080000     ................

0001c470 <tcc_interrupt_vectors.12458>:
   1c470:	0011100f                                ....

0001c474 <LfnOfs>:
   1c474:	07050301 12100e09 1c181614 0000001e     ................

0001c484 <excvt.4558>:
   1c484:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   1c494:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   1c4a4:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   1c4b4:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   1c4c4:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   1c4d4:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   1c4e4:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   1c4f4:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   1c504:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   1c514:	00005d5b                                []..

0001c518 <Tbl>:
   1c518:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   1c528:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   1c538:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   1c548:	00d600ff 00f800dc 00d800a3 019200d7     ................
   1c558:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   1c568:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   1c578:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   1c588:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   1c598:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   1c5a8:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   1c5b8:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   1c5c8:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   1c5d8:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   1c5e8:	00da00de 00d900db 00dd00fd 00b400af     ................
   1c5f8:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   1c608:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0001c618 <tbl_lower.4308>:
   1c618:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   1c628:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   1c638:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   1c648:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   1c658:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   1c668:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   1c678:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   1c688:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   1c698:	01050103 01090107 010d010b 0111010f     ................
   1c6a8:	01150113 01190117 011d011b 0121011f     ..............!.
   1c6b8:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   1c6c8:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   1c6d8:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   1c6e8:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   1c6f8:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   1c708:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   1c718:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   1c728:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   1c738:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   1c748:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   1c758:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   1c768:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   1c778:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   1c788:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   1c798:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   1c7a8:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   1c7b8:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   1c7c8:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   1c7d8:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   1c7e8:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0001c7f8 <tbl_upper.4309>:
   1c7f8:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   1c808:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   1c818:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   1c828:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   1c838:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   1c848:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   1c858:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   1c868:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   1c878:	01040102 01080106 010c010a 0110010e     ................
   1c888:	01140112 01180116 011c011a 0120011e     .............. .
   1c898:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   1c8a8:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   1c8b8:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   1c8c8:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   1c8d8:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   1c8e8:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   1c8f8:	03940393 03960395 03980397 039a0399     ................
   1c908:	039c039b 039e039d 03a0039f 03a303a1     ................
   1c918:	03a503a4 03a703a6 03a903a8 041003aa     ................
   1c928:	04120411 04140413 04160415 04180417     ................
   1c938:	041a0419 041c041b 041e041d 0420041f     .............. .
   1c948:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   1c958:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   1c968:	04030402 04050404 04070406 04090408     ................
   1c978:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   1c988:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   1c998:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   1c9a8:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   1c9b8:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   1c9c8:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   1c9d8:	4354514d 00000000 00000004 00000000     MQTC............
	...
   1c9f0:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   1ca30:	4354514d 00000000 00000004 00000000     MQTC............
	...
   1ca48:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   1ca88:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   1ca98:	706c6568 00000000 76410a0d 616c6961     help......Availa
   1caa8:	20656c62 6d6d6f43 73646e61 00000d3a     ble Commands:...
   1cab8:	5f726576 2d206c62 6f6f6220 616f6c74     ver_bl - bootloa
   1cac8:	20726564 73726576 0d6e6f69 00000000     der version.....
   1cad8:	5f726576 20707061 7041202d 63696c70     ver_app - Applic
   1cae8:	6f697461 6f63206e 76206564 69737265     ation code versi
   1caf8:	000d6e6f 2063616d 616d202d 64612063     on..mac - mac ad
   1cb08:	73657264 00000d73 2d207069 20706920     dress...ip - ip 
   1cb18:	72646461 0d737365 00000000 4e766564     address.....devN
   1cb28:	20656d61 6564202d 6f6c6576 616e2072     ame - develor na
   1cb38:	000d656d 44746573 63697665 6d614e65     me..setDeviceNam
   1cb48:	733c2065 6e697274 616e2067 203e656d     e <string name> 
   1cb58:	6544202d 65636976 6d614e20 65732065     - Device Name se
   1cb68:	00000d74 44746567 63697665 6d614e65     t...getDeviceNam
   1cb78:	202d2065 20746547 69766544 4e206563     e - Get Device N
   1cb88:	0d656d61 00000000 5f726576 00006c62     ame.....ver_bl..
   1cb98:	6f420a0d 6f6c746f 72656461 72694620     ..Bootloader Fir
   1cba8:	7261776d 65762065 6f697372 25203a6e     mware version: %
   1cbb8:	64252e64 2064252e 00000a0d 5f726576     d.%d.%d ....ver_
   1cbc8:	00707061 6f430a0d 46206564 776d7269     app...Code Firmw
   1cbd8:	20657261 73726576 3a6e6f69 2e642520     are version: %d.
   1cbe8:	252e6425 0a0d2064 00000000 0063616d     %d.%d ......mac.
   1cbf8:	614d0a0d 64412063 73657264 46203a73     ..Mac Address: F
   1cc08:	30462d38 2d35302d 462d3346 45392d39     8-F0-05-F3-F9-9E
   1cc18:	0000000d 50490a0d 64644120 73736572     ......IP Address
   1cc28:	2e30203a 2e302e30 000d2030 4e766564     : 0.0.0.0 ..devN
   1cc38:	00656d61 614e0a0d 3a20656d 4c454420     ame...Name : DEL
   1cc48:	4920534f 0d2e434e 00000000 44746573     OS INC......setD
   1cc58:	63697665 6d614e65 00000065 65440a0d     eviceName.....De
   1cc68:	65636976 6d616e20 65732065 6f742074     vice name set to
   1cc78:	0d732520 0000000a 44746567 63697665      %s.....getDevic
   1cc88:	6d614e65 00000065 65440a0d 65636976     eName.....Device
   1cc98:	6d616e20 73692065 0d732520 0000000a      name is %s.....
   1cca8:	706d6574 61746164 00000000 746e450a     tempdata.....Ent
   1ccb8:	54207265 65706d65 75746172 003a6572     er Temperature:.
   1ccc8:	2264227b 74227b3a 22706d65 7d64253a     {"d":{"temp":%d}
   1ccd8:	0000007d 504d4554 00000000 74697865     }...TEMP....exit
   1cce8:	00000000 6c430a0d 6e69736f 6c632067     ......Closing cl
   1ccf8:	2e2e2069 202e2e2e 00000d0a 52450d0a     i ..... ......ER
   1cd08:	20524f52 6572203e 0d797274 00000000     ROR > retry.....
   1cd18:	00015aae 00015aa8 00015aa2 00015a9c     .Z...Z...Z...Z..
   1cd28:	00015ab4 00015abc 00015ab4 00015a96     .Z...Z...Z...Z..
   1cd38:	00015a90 00015ab4 00015a8a 00015a8a     .Z...Z...Z...Z..
   1cd48:	00015a84 00015a7e 00015abc 00015b26     .Z..~Z...Z..&[..
   1cd58:	00015b20 00015b1a 00015b14 00015b2c      [...[...[..,[..
   1cd68:	00015b34 00015b2c 00015b0e 00015b08     4[..,[...[...[..
   1cd78:	00015b2c 00015b02 00015b02 00015afc     ,[...[...[...Z..
   1cd88:	00015af6 00015b34 00015ba0 00015b9a     .Z..4[...[...[..
   1cd98:	00015b94 00015b8e 00015ba6 00015ba6     .[...[...[...[..
   1cda8:	00015ba6 00015b88 00015b82 00015ba6     .[...[...[...[..
   1cdb8:	00015b7c 00015b7c 00015b76 00015b70     |[..|[..v[..p[..
   1cdc8:	33323130 37363534 62613938 66656463     0123456789abcdef
   1cdd8:	00000d31 6e617254 72656673 636e452d     1...Transfer-Enc
   1cde8:	6e69646f 00203a67 6e6e6f43 69746365     oding: .Connecti
   1cdf8:	203a6e6f 00000000 50545448 0000002f     on: ....HTTP/...
   1ce08:	20544547 00000000 54534f50 00000020     GET ....POST ...
   1ce18:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
   1ce28:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
   1ce38:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
   1ce48:	72657355 6567412d 203a746e 00000000     User-Agent: ....
   1ce58:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
   1ce68:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   1ce78:	00000000 65636341 452d7470 646f636e     ....Accept-Encod
   1ce88:	3a676e69 000a0d20 65636341 432d7470     ing: ...Accept-C
   1ce98:	73726168 203a7465 2d667475 000a0d38     harset: utf-8...
   1cea8:	6e617254 72656673 636e452d 6e69646f     Transfer-Encodin
   1ceb8:	63203a67 6b6e7568 0a0d6465 00000000     g: chunked......
   1cec8:	00007525 746e6f43 2d746e65 676e654c     %u..Content-Leng
   1ced8:	203a6874 00000000 656d7461 2e312f6c     th: ....atmel/1.
   1cee8:	00322e30 70747468 002f2f3a 70747468     0.2.http://.http
   1cef8:	2f2f3a73 00000000 42002000 42002400     s://..... .B.$.B
   1cf08:	42002800 00016580 00016588 00016596     .(.B.e...e...e..
   1cf18:	000165ce 000165e4 25200a0d 00732a2e     .e...e.... %.*s.
   1cf28:	203e3e20 00000000 732a2e25 00000000      >> ....%.*s....
   1cf38:	52415453 00000054 6f43200a 6e696b6f     START.... Cookin
   1cf48:	74732067 65747261 00000064 6f43200a     g started.... Co
   1cf58:	6e696b6f 74732067 6570706f 00000064     oking stopped...
   1cf68:	424f4e4b 00000000 6e4b200a 6c20626f     KNOB..... Knob l
   1cf78:	6c657665 74657320 3a6f7420 00006425     evel set to:%d..
   1cf88:	454d4954 00000000 6954200a 6c20656d     TIME..... Time l
   1cf98:	6c657665 74657320 3a6f7420 00006425     evel set to:%d..
   1cfa8:	4641544f 00000055 41544f0a 52205546     OTAFU....OTAFU R
   1cfb8:	65757165 64657473 00000000 70747468     equested....http
   1cfc8:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1cfd8:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
   1cfe8:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
   1cff8:	00000000 70747468 696c635f 5f746e65     ....http_client_
   1d008:	6c6c6163 6b636162 6572203a 73657571     callback: reques
   1d018:	6f632074 656c706d 2e646574 0000000d     t completed.....
   1d028:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
   1d038:	6b636162 6572203a 76696563 72206465     back: received r
   1d048:	6f707365 2065736e 64207525 20617461     esponse %u data 
   1d058:	657a6973 0d752520 0000000a 70747468     size %u.....http
   1d068:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1d078:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
   1d088:	73616572 253a6e6f 000a0d64 2d2d0a0d     reason:%d.....--
   1d098:	544f4920 414d5320 4b205452 20424f4e      IOT SMART KNOB 
   1d0a8:	544e4f43 4c4c4f52 2d205245 2d0a0d2d     CONTROLLER --..-
   1d0b8:	4544202d 20534f4c 2e434e49 206e6f20     - DELOS INC. on 
   1d0c8:	444d4153 31473132 4d204138 2d205543     SAMD21G18A MCU -
   1d0d8:	2d0a0d2d 6f43202d 6c69706d 203a6465     -..-- Compiled: 
   1d0e8:	2079614d 32203520 20393130 333a3130     May  5 2019 01:3
   1d0f8:	33323a33 0d2d2d20 00000000 616d0a0d     3:23 --.......ma
   1d108:	203a6e69 74696e49 696c6169 676e697a     in: Initializing
   1d118:	616f4220 61206472 7020646e 70697265      Board and perip
   1d128:	61726568 6620736c 6120726f 696c7070     herals for appli
   1d138:	69746163 2e2e6e6f 2e2e2e2e 0d0a0d20     cation...... ...
   1d148:	00000000 666e6f63 72756769 74685f65     ....configure_ht
   1d158:	635f7074 6e65696c 48203a74 20505454     tp_client: HTTP 
   1d168:	65696c63 6920746e 6974696e 7a696c61     client initializ
   1d178:	6f697461 6166206e 64656c69 72282021     ation failed! (r
   1d188:	25207365 0a0d2964 00000000 5454514d     es %d)......MQTT
   1d198:	696e6920 6c616974 74617a69 206e6f69      initialization 
   1d1a8:	6c696166 202e6465 6f727245 6f632072     failed. Error co
   1d1b8:	69206564 25282073 0a0d2964 00000000     de is (%d)......
   1d1c8:	5454514d 67657220 65747369 61632072     MQTT register ca
   1d1d8:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
   1d1e8:	726f7272 646f6320 73692065 64252820     rror code is (%d
   1d1f8:	000a0d29 74696e69 6f74735f 65676172     )...init_storage
   1d208:	6c70203a 65736165 756c7020 6e612067     : please plug an
   1d218:	2f445320 20434d4d 64726163 206e6920      SD/MMC card in 
   1d228:	746f6c73 0d2e2e2e 00000000 74696e69     slot........init
   1d238:	6f74735f 65676172 4453203a 72614320     _storage: SD Car
   1d248:	6e692064 6c617473 6166206c 64656c69     d install failed
   1d258:	00000d2e 74696e69 6f74735f 65676172     ....init_storage
   1d268:	7274203a 6e752079 67756c70 646e6120     : try unplug and
   1d278:	2d657220 67756c70 65687420 72616320      re-plug the car
   1d288:	000d2e64 74696e69 6f74735f 65676172     d...init_storage
   1d298:	6f6d203a 69746e75 5320676e 61632044     : mounting SD ca
   1d2a8:	2e2e6472 00000d2e 74696e69 6f74735f     rd......init_sto
   1d2b8:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
   1d2c8:	20746e75 6c696166 20216465 73657228     unt failed! (res
   1d2d8:	29642520 00000a0d 74696e69 6f74735f      %d)....init_sto
   1d2e8:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
   1d2f8:	20746e75 0d2e4b4f 00000000 6e69616d     unt OK......main
   1d308:	326d203a 69775f6d 695f6966 2074696e     : m2m_wifi_init 
   1d318:	6c6c6163 72726520 2021726f 73657228     call error! (res
   1d328:	29642520 00000a0d 616d0d0a 203a6e69      %d)......main: 
   1d338:	42203e3e 6472616f 646e6120 72657020     >> Board and per
   1d348:	65687069 736c6172 696e6920 6c616974     ipherals initial
   1d358:	64657a69 00000d0a 6e69616d 6f63203a     ized....main: co
   1d368:	63656e6e 676e6974 206f7420 69466957     nnecting to WiFi
   1d378:	20504120 2e2e7325 000a0d2e 20494c43      AP %s......CLI 
   1d388:	6d6d6f63 20646e61 656e696c 74636120     command line act
   1d398:	20657669 74200d0a 20657079 6c656827     ive .. type 'hel
   1d3a8:	66202770 7420726f 63206568 616d6d6f     p' for the comma
   1d3b8:	6c20646e 0a747369 0000000d 6f6c6564     nd list.....delo
   1d3c8:	6e695f73 203e2063 00000000 20494c43     s_inc > ....CLI 
   1d3d8:	74697845 0a206465 0000000d 3e525245     Exited .....ERR>
   1d3e8:	7953203e 63697473 6f63206b 6769666e     > Systick config
   1d3f8:	74617275 206e6f69 6f727265 000a0d72     uration error...

0001d408 <main_mqtt_broker>:
   1d408:	2e36316d 756f6c63 74716d64 6f632e74     m16.cloudmqtt.co
   1d418:	0000006d 6f430a0d 63656e6e 676e6974     m.....Connecting
   1d428:	206f7420 6b6f7242 2e2e7265 0000002e      to Broker......
   1d438:	5256384b 655f7648 6e374b79 00000000     K8VRHv_eyK7n....
   1d448:	6463786d 68797069 00000000 5454514d     mxcdipyh....MQTT
   1d458:	72452020 20726f72 4f4e202d 6f432054       Error - NOT Co
   1d468:	63656e6e 20646574 62206f74 656b6f72     nnected to broke
   1d478:	00000d72 5454514d 6e6f4320 7463656e     r...MQTT Connect
   1d488:	74206465 7262206f 72656b6f 0000000d     ed to broker....
   1d498:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
   1d4a8:	76726573 25287265 20212973 72746572     server(%s)! retr
   1d4b8:	74692079 74756120 74616d6f 6c616369     y it automatical
   1d4c8:	0d2e796c 0000000a 5454514d 6e6f4320     ly......MQTT Con
   1d4d8:	7463656e 000d6465 5454514d 6f726220     nected..MQTT bro
   1d4e8:	2072656b 6c636564 20656e69 72756f79     ker decline your
   1d4f8:	63636120 21737365 72726520 6320726f      access! error c
   1d508:	2065646f 0a0d6425 00000000 5454514d     ode %d......MQTT
   1d518:	73696420 6e6e6f63 65746365 00000d64      disconnected...
   1d528:	4e203e3e 46207765 776d7269 20657261     >> New Firmware 
   1d538:	6e776f44 64616f6c 0a206465 6544200d     Downloaded .. De
   1d548:	65636976 73655220 6e697465 2e2e2067     vice Reseting ..
   1d558:	0a202e2e 0000000d 6661746f 6f645f75     .. .....otafu_do
   1d568:	6f6c6e77 203a6461 6e776f44 64616f6c     wnload: Download
   1d578:	20676e69 61647075 76206574 69737265     ing update versi
   1d588:	2e206e6f 2e2e2e2e 000d0a20 6661746f     on ..... ...otaf
   1d598:	6f645f75 6f6c6e77 203a6461 52203e3e     u_download: >> R
   1d5a8:	6d757365 20676e69 6c707061 74616369     esuming applicat
   1d5b8:	0a6e6f69 0000000d 6661746f 6f645f75     ion.....otafu_do
   1d5c8:	6f6c6e77 203a6461 2077654e 6d726946     wnload: New Firm
   1d5d8:	65726177 61764120 62616c69 202c656c     ware Available, 
   1d5e8:	73726576 3a6e6f69 20642520 00000d0a     version: %d ....
   1d5f8:	6c756f57 6f792064 696c2075 7420656b     Would you like t
   1d608:	6f64206f 6f6c6e77 74206461 6e206568     o download the n
   1d618:	76207765 69737265 203a6e6f 6e2f7928     ew version: (y/n
   1d628:	203e2029 00000000 00006325 0d0a6325     ) > ....%c..%c..
   1d638:	00000000 6661746f 6f645f75 6f6c6e77     ....otafu_downlo
   1d648:	203a6461 65747461 2074706d 5d64255b     ad: attempt [%d]
   1d658:	44203e20 6c6e776f 6964616f 6620676e      > Downloading f
   1d668:	656c6961 74202c64 6e697972 67612067     ailed, trying ag
   1d678:	206e6961 00000d0a 6661746f 6f645f75     ain ....otafu_do
   1d688:	6f6c6e77 203a6461 44203e3e 6c6e776f     wnload: >> Downl
   1d698:	6964616f 6620676e 656c6961 76652064     oading failed ev
   1d6a8:	61206e65 72657466 6c756d20 6c706974     en after multipl
   1d6b8:	74612065 706d6574 0d0a7374 00000000     e attempts......
   1d6c8:	6661746f 6f645f75 6f6c6e77 203a6461     otafu_download: 
   1d6d8:	52203e3e 6d757365 20676e69 6c707061     >> Resuming appl
   1d6e8:	74616369 206e6f69 20726f66 0a776f6e     ication for now.
   1d6f8:	0000000d 61766e69 2064696c 70736572     ....invalid resp
   1d708:	65736e6f 6c70202c 65736165 79727420     onse, please try
   1d718:	61676120 0d0a6e69 00000000 70747468      again......http
   1d728:	2f2f3a73 2e777777 73616573 6570752e     s://www.seas.upe
   1d738:	652e6e6e 7e2f7564 65686774 6f6f6164     nn.edu/~tghedaoo
   1d748:	7265562f 6e6f6973 7478742e 00000000     /Version.txt....
   1d758:	70747468 2f2f3a73 2e777777 73616573     https://www.seas
   1d768:	6570752e 652e6e6e 7e2f7564 65686774     .upenn.edu/~tghe
   1d778:	6f6f6164 7269462f 7261776d 69622e65     daoo/Firmware.bi
   1d788:	0000006e 70747468 2f2f3a73 2e777777     n...https://www.
   1d798:	73616573 6570752e 652e6e6e 7e2f7564     seas.upenn.edu/~
   1d7a8:	65686774 6f6f6164 6372432f 7478742e     tghedaoo/Crc.txt
   1d7b8:	00000000 6661746f 69665f75 61776d72     ....otafu_firmwa
   1d7c8:	645f6572 6c6e776f 3a64616f 776f4420     re_download: Dow
   1d7d8:	616f6c6e 676e6964 77656e20 72696620     nloading new fir
   1d7e8:	7261776d 2e2e2065 2e2e2e2e 000d0a20     mware ...... ...
   1d7f8:	6f206473 61726570 6e6f6974 3e3e203a     sd operation: >>
   1d808:	65704f20 676e696e 66206120 20656c69      Opening a file 
   1d818:	6c696166 0d0a6465 00000000 6f206473     failed......sd o
   1d828:	61726570 6e6f6974 3e3e203a 6c694620     peration: >> Fil
   1d838:	706f2065 73206e65 65636375 0d0a7373     e open success..
   1d848:	00000000 5f435243 4e574f44 25203d20     ....CRC_DOWN = %
   1d858:	000d0a75 5f435243 56524553 3d205245     u...CRC_SERVER =
   1d868:	0a752520 0000000d 6661746f 65765f75      %u.....otafu_ve
   1d878:	6f697372 68635f6e 3a6b6365 65684320     rsion_check: Che
   1d888:	6e696b63 6f662067 656e2072 65562077     cking for new Ve
   1d898:	6f697372 2e2e206e 2e2e2e2e 000d0a20     rsion ...... ...
   1d8a8:	6661746f 65765f75 6f697372 68635f6e     otafu_version_ch
   1d8b8:	3a6b6365 72655620 6e6f6973 66694420     eck: Version Dif
   1d8c8:	65726566 202c746e 74697257 20676e69     ferent, Writing 
   1d8d8:	2077656e 65646f63 2e2e2e20 0a202e2e     new code ..... .
   1d8e8:	0000000d 6661746f 65765f75 6f697372     ....otafu_versio
   1d8f8:	68635f6e 3a6b6365 203e3e20 73726556     n_check: >> Vers
   1d908:	206e6f69 656d6153 20726f20 72727543     ion Same or Curr
   1d918:	20746e65 73726576 206e6f69 6c207369     ent version is l
   1d928:	73657461 000d0a74 64333025 00000000     atest...%03d....
   1d938:	6f736572 5f65766c 203a6263 49207325     resolve_cb: %s I
   1d948:	64612050 73657264 73692073 2e642520     P address is %d.
   1d958:	252e6425 64252e64 0a0d0a0d 00000000     %d.%d.%d........
   1d968:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   1d978:	20434d4d 726f7473 20656761 20746f6e     MMC storage not 
   1d988:	64616572 000d2e79 72617473 6f645f74     ready...start_do
   1d998:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
   1d9a8:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
   1d9b8:	00000000 72617473 6f645f74 6f6c6e77     ....start_downlo
   1d9c8:	203a6461 75716572 20747365 73207369     ad: request is s
   1d9d8:	20746e65 65726c61 2e796461 0000000d     ent already.....
   1d9e8:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   1d9f8:	6e6e7572 20676e69 6e776f64 64616f6c     running download
   1da08:	726c6120 79646165 00000d2e 72617473      already....star
   1da18:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
   1da28:	20676e69 50545448 71657220 74736575     ing HTTP request
   1da38:	0d2e2e2e 00000000 726f7473 69665f65     ........store_fi
   1da48:	705f656c 656b6361 65203a74 7974706d     le_packet: empty
   1da58:	74616420 000d2e61 726f7473 69665f65      data...store_fi
   1da68:	705f656c 656b6361 63203a74 74616572     le_packet: creat
   1da78:	20676e69 656c6966 73255b20 000a0d5d     ing file [%s]...
   1da88:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   1da98:	66203a74 20656c69 656d616e 20736920     t: file name is 
   1daa8:	61766e69 2e64696c 776f4420 616f6c6e     invalid. Downloa
   1dab8:	61632064 6c65636e 0d2e6465 00000000     d canceled......
   1dac8:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   1dad8:	66203a74 20656c69 61657263 6e6f6974     t: file creation
   1dae8:	72726520 2021726f 3a746572 0a0d6425      error! ret:%d..
   1daf8:	00000000 726f7473 69665f65 705f656c     ....store_file_p
   1db08:	656b6361 66203a74 20656c69 74697277     acket: file writ
   1db18:	72652065 2c726f72 776f6420 616f6c6e     e error, downloa
   1db28:	61632064 6c65636e 0d2e6465 00000000     d canceled......
   1db38:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   1db48:	72203a74 69656365 5b646576 5d756c25     t: received[%lu]
   1db58:	6966202c 7320656c 5b657a69 5d756c25     , file size[%lu]
   1db68:	00000a0d 726f7473 69665f65 705f656c     ....store_file_p
   1db78:	656b6361 66203a74 20656c69 6e776f64     acket: file down
   1db88:	64616f6c 73206465 65636375 75667373     loaded successfu
   1db98:	2e796c6c 0000000d 69666977 3a62635f     lly.....wifi_cb:
   1dba8:	4d324d20 4649575f 4f435f49 43454e4e      M2M_WIFI_CONNEC
   1dbb8:	0d444554 00000000 69666977 3a62635f     TED.....wifi_cb:
   1dbc8:	4d324d20 4649575f 49445f49 4e4f4353      M2M_WIFI_DISCON
   1dbd8:	5443454e 000d4445 6e6e6570 30343731     NECTED..penn1740
   1dbe8:	69666977 00000000 50726941 4e6e6e65     wifi....AirPennN
   1dbf8:	442d7465 63697665 00000065 69666977     et-Device...wifi
   1dc08:	3a62635f 20504920 72646461 20737365     _cb: IP address 
   1dc18:	25207369 75252e75 2e75252e 0a0d7525     is %u.%u.%u.%u..
   1dc28:	00000000 6f727245 6f632072 63656e6e     ....Error connec
   1dc38:	676e6974 206f7420 5454514d 6f724220     ting to MQTT Bro
   1dc48:	2172656b 0000000d 00017ba8 00017b8a     ker!.....{...{..
   1dc58:	00017b44 00017a62 00017b44 00017b7c     D{..bz..D{..|{..
   1dc68:	00017b44 00017a62 00017b8a 00017b8a     D{..bz...{...{..
   1dc78:	00017b7c 00017a62 00017a5a 00017a5a     |{..bz..Zz..Zz..
   1dc88:	00017a5a 00017dc0 00018208 000180c8     Zz...}..........
   1dc98:	000180c8 000180c4 000181e0 000181e0     ................
   1dca8:	000181d2 000180c4 000181e0 000181d2     ................
   1dcb8:	000181e0 000180c4 000181e8 000181e8     ................
   1dcc8:	000181e8 000183ec                       ........

0001dcd0 <_global_impure_ptr>:
   1dcd0:	20000184                                ... 

0001dcd4 <__sf_fake_stderr>:
	...

0001dcf4 <__sf_fake_stdin>:
	...

0001dd14 <__sf_fake_stdout>:
	...
   1dd34:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   1dd44:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   1dd54:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   1dd64:	37363534 62613938 66656463 00000000     456789abcdef....
   1dd74:	0001dd92 0001dd95 0001dd98 61462d41     ............A-Fa
   1dd84:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
   1dd94:	00303000 00005878                                .00.xX.

0001dd9b <_ctype_>:
   1dd9b:	20202000 20202020 28282020 20282828     .         ((((( 
   1ddab:	20202020 20202020 20202020 20202020                     
   1ddbb:	10108820 10101010 10101010 10101010      ...............
   1ddcb:	04040410 04040404 10040404 10101010     ................
   1dddb:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1ddeb:	01010101 01010101 01010101 10101010     ................
   1ddfb:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1de0b:	02020202 02020202 02020202 10101010     ................
   1de1b:	00000020 00000000 00000000 00000000      ...............
	...

0001de9c <_init>:
   1de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de9e:	46c0      	nop			; (mov r8, r8)
   1dea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1dea2:	bc08      	pop	{r3}
   1dea4:	469e      	mov	lr, r3
   1dea6:	4770      	bx	lr

0001dea8 <__init_array_start>:
   1dea8:	00009cdd 	.word	0x00009cdd

0001deac <_fini>:
   1deac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1deae:	46c0      	nop			; (mov r8, r8)
   1deb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1deb2:	bc08      	pop	{r3}
   1deb4:	469e      	mov	lr, r3
   1deb6:	4770      	bx	lr

0001deb8 <__fini_array_start>:
   1deb8:	00009cb5 	.word	0x00009cb5
