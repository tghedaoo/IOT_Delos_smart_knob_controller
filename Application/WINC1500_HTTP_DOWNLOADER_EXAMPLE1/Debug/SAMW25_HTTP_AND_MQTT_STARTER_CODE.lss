
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000115b4  00009c00  00009c00  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000033c  20000000  0001b1b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ffc  2000033c  0001b4f0  0002033c  2**2
                  ALLOC
  3 .stack        00002000  20001338  0001c4ec  0002033c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
  6 .debug_info   00083eed  00000000  00000000  000203bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000c8fb  00000000  00000000  000a42aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00022d3e  00000000  00000000  000b0ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017f0  00000000  00000000  000d38e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002218  00000000  00000000  000d50d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002a9d2  00000000  00000000  000d72eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002b1ae  00000000  00000000  00101cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a1490  00000000  00000000  0012ce6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000529c  00000000  00000000  001ce2fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00009c00 <exception_table>:
    9c00:	38 33 00 20 15 07 01 00 11 07 01 00 11 07 01 00     83. ............
	...
    9c2c:	11 07 01 00 00 00 00 00 00 00 00 00 11 07 01 00     ................
    9c3c:	6d 31 01 00 11 07 01 00 11 07 01 00 11 07 01 00     m1..............
    9c4c:	21 e8 00 00 75 e2 00 00 11 07 01 00 11 07 01 00     !...u...........
    9c5c:	11 07 01 00 11 07 01 00 49 ec 00 00 59 ec 00 00     ........I...Y...
    9c6c:	69 ec 00 00 79 ec 00 00 89 ec 00 00 99 ec 00 00     i...y...........
    9c7c:	e1 06 01 00 f1 06 01 00 01 07 01 00 11 07 01 00     ................
    9c8c:	11 07 01 00 11 07 01 00 00 00 00 00 00 00 00 00     ................
    9c9c:	11 07 01 00 11 07 01 00 11 07 01 00 11 07 01 00     ................
    9cac:	11 07 01 00 00 00 00 00                             ........

00009cb4 <__do_global_dtors_aux>:
    9cb4:	b510      	push	{r4, lr}
    9cb6:	4c06      	ldr	r4, [pc, #24]	; (9cd0 <__do_global_dtors_aux+0x1c>)
    9cb8:	7823      	ldrb	r3, [r4, #0]
    9cba:	2b00      	cmp	r3, #0
    9cbc:	d107      	bne.n	9cce <__do_global_dtors_aux+0x1a>
    9cbe:	4b05      	ldr	r3, [pc, #20]	; (9cd4 <__do_global_dtors_aux+0x20>)
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d002      	beq.n	9cca <__do_global_dtors_aux+0x16>
    9cc4:	4804      	ldr	r0, [pc, #16]	; (9cd8 <__do_global_dtors_aux+0x24>)
    9cc6:	e000      	b.n	9cca <__do_global_dtors_aux+0x16>
    9cc8:	bf00      	nop
    9cca:	2301      	movs	r3, #1
    9ccc:	7023      	strb	r3, [r4, #0]
    9cce:	bd10      	pop	{r4, pc}
    9cd0:	2000033c 	.word	0x2000033c
    9cd4:	00000000 	.word	0x00000000
    9cd8:	0001b1b4 	.word	0x0001b1b4

00009cdc <frame_dummy>:
    9cdc:	4b08      	ldr	r3, [pc, #32]	; (9d00 <frame_dummy+0x24>)
    9cde:	b510      	push	{r4, lr}
    9ce0:	2b00      	cmp	r3, #0
    9ce2:	d003      	beq.n	9cec <frame_dummy+0x10>
    9ce4:	4907      	ldr	r1, [pc, #28]	; (9d04 <frame_dummy+0x28>)
    9ce6:	4808      	ldr	r0, [pc, #32]	; (9d08 <frame_dummy+0x2c>)
    9ce8:	e000      	b.n	9cec <frame_dummy+0x10>
    9cea:	bf00      	nop
    9cec:	4807      	ldr	r0, [pc, #28]	; (9d0c <frame_dummy+0x30>)
    9cee:	6803      	ldr	r3, [r0, #0]
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	d100      	bne.n	9cf6 <frame_dummy+0x1a>
    9cf4:	bd10      	pop	{r4, pc}
    9cf6:	4b06      	ldr	r3, [pc, #24]	; (9d10 <frame_dummy+0x34>)
    9cf8:	2b00      	cmp	r3, #0
    9cfa:	d0fb      	beq.n	9cf4 <frame_dummy+0x18>
    9cfc:	4798      	blx	r3
    9cfe:	e7f9      	b.n	9cf4 <frame_dummy+0x18>
    9d00:	00000000 	.word	0x00000000
    9d04:	20000340 	.word	0x20000340
    9d08:	0001b1b4 	.word	0x0001b1b4
    9d0c:	0001b1b4 	.word	0x0001b1b4
    9d10:	00000000 	.word	0x00000000

00009d14 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    9d14:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    9d16:	4b06      	ldr	r3, [pc, #24]	; (9d30 <sd_mmc_configure_slot+0x1c>)
    9d18:	6819      	ldr	r1, [r3, #0]
    9d1a:	7f8b      	ldrb	r3, [r1, #30]
    9d1c:	1e5a      	subs	r2, r3, #1
    9d1e:	4193      	sbcs	r3, r2
    9d20:	b2db      	uxtb	r3, r3
    9d22:	7b4a      	ldrb	r2, [r1, #13]
    9d24:	6809      	ldr	r1, [r1, #0]
    9d26:	4803      	ldr	r0, [pc, #12]	; (9d34 <sd_mmc_configure_slot+0x20>)
    9d28:	7800      	ldrb	r0, [r0, #0]
    9d2a:	4c03      	ldr	r4, [pc, #12]	; (9d38 <sd_mmc_configure_slot+0x24>)
    9d2c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    9d2e:	bd10      	pop	{r4, pc}
    9d30:	20000358 	.word	0x20000358
    9d34:	20000380 	.word	0x20000380
    9d38:	0000a9bd 	.word	0x0000a9bd

00009d3c <sd_mmc_select_slot>:
{
    9d3c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    9d3e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    9d40:	2800      	cmp	r0, #0
    9d42:	d001      	beq.n	9d48 <sd_mmc_select_slot+0xc>
}
    9d44:	0018      	movs	r0, r3
    9d46:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    9d48:	4b0e      	ldr	r3, [pc, #56]	; (9d84 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    9d4a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    9d4c:	3b03      	subs	r3, #3
    9d4e:	2b01      	cmp	r3, #1
    9d50:	d90d      	bls.n	9d6e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    9d52:	2200      	movs	r2, #0
    9d54:	4b0c      	ldr	r3, [pc, #48]	; (9d88 <sd_mmc_select_slot+0x4c>)
    9d56:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    9d58:	4c0a      	ldr	r4, [pc, #40]	; (9d84 <sd_mmc_select_slot+0x48>)
    9d5a:	4b0c      	ldr	r3, [pc, #48]	; (9d8c <sd_mmc_select_slot+0x50>)
    9d5c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    9d5e:	4b0c      	ldr	r3, [pc, #48]	; (9d90 <sd_mmc_select_slot+0x54>)
    9d60:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    9d62:	7aa3      	ldrb	r3, [r4, #10]
    9d64:	3b02      	subs	r3, #2
    9d66:	4258      	negs	r0, r3
    9d68:	4143      	adcs	r3, r0
    9d6a:	b2db      	uxtb	r3, r3
    9d6c:	e7ea      	b.n	9d44 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    9d6e:	4b05      	ldr	r3, [pc, #20]	; (9d84 <sd_mmc_select_slot+0x48>)
    9d70:	2202      	movs	r2, #2
    9d72:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    9d74:	4a07      	ldr	r2, [pc, #28]	; (9d94 <sd_mmc_select_slot+0x58>)
    9d76:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    9d78:	2201      	movs	r2, #1
    9d7a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    9d7c:	2200      	movs	r2, #0
    9d7e:	779a      	strb	r2, [r3, #30]
    9d80:	e7e7      	b.n	9d52 <sd_mmc_select_slot+0x16>
    9d82:	46c0      	nop			; (mov r8, r8)
    9d84:	2000035c 	.word	0x2000035c
    9d88:	20000380 	.word	0x20000380
    9d8c:	20000358 	.word	0x20000358
    9d90:	00009d15 	.word	0x00009d15
    9d94:	00061a80 	.word	0x00061a80

00009d98 <sd_mmc_cmd13>:
{
    9d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d9a:	4d09      	ldr	r5, [pc, #36]	; (9dc0 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    9d9c:	4f09      	ldr	r7, [pc, #36]	; (9dc4 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    9d9e:	4e0a      	ldr	r6, [pc, #40]	; (9dc8 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    9da0:	2100      	movs	r1, #0
    9da2:	480a      	ldr	r0, [pc, #40]	; (9dcc <sd_mmc_cmd13+0x34>)
    9da4:	47b8      	blx	r7
    9da6:	1e04      	subs	r4, r0, #0
    9da8:	d007      	beq.n	9dba <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    9daa:	47b0      	blx	r6
    9dac:	23ff      	movs	r3, #255	; 0xff
    9dae:	4203      	tst	r3, r0
    9db0:	d003      	beq.n	9dba <sd_mmc_cmd13+0x22>
    9db2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    9db4:	2d00      	cmp	r5, #0
    9db6:	d1f3      	bne.n	9da0 <sd_mmc_cmd13+0x8>
			return false;
    9db8:	2400      	movs	r4, #0
}
    9dba:	0020      	movs	r0, r4
    9dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9dbe:	46c0      	nop			; (mov r8, r8)
    9dc0:	00030d41 	.word	0x00030d41
    9dc4:	0000ac01 	.word	0x0000ac01
    9dc8:	0000ac19 	.word	0x0000ac19
    9dcc:	00001b0d 	.word	0x00001b0d

00009dd0 <sd_mmc_cmd9_spi>:
{
    9dd0:	b510      	push	{r4, lr}
    9dd2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    9dd4:	4b0c      	ldr	r3, [pc, #48]	; (9e08 <sd_mmc_cmd9_spi+0x38>)
    9dd6:	681b      	ldr	r3, [r3, #0]
    9dd8:	8919      	ldrh	r1, [r3, #8]
    9dda:	0409      	lsls	r1, r1, #16
    9ddc:	2301      	movs	r3, #1
    9dde:	9300      	str	r3, [sp, #0]
    9de0:	2210      	movs	r2, #16
    9de2:	480a      	ldr	r0, [pc, #40]	; (9e0c <sd_mmc_cmd9_spi+0x3c>)
    9de4:	4c0a      	ldr	r4, [pc, #40]	; (9e10 <sd_mmc_cmd9_spi+0x40>)
    9de6:	47a0      	blx	r4
    9de8:	2800      	cmp	r0, #0
    9dea:	d101      	bne.n	9df0 <sd_mmc_cmd9_spi+0x20>
}
    9dec:	b002      	add	sp, #8
    9dee:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    9df0:	4b05      	ldr	r3, [pc, #20]	; (9e08 <sd_mmc_cmd9_spi+0x38>)
    9df2:	6818      	ldr	r0, [r3, #0]
    9df4:	300e      	adds	r0, #14
    9df6:	2101      	movs	r1, #1
    9df8:	4b06      	ldr	r3, [pc, #24]	; (9e14 <sd_mmc_cmd9_spi+0x44>)
    9dfa:	4798      	blx	r3
    9dfc:	2800      	cmp	r0, #0
    9dfe:	d0f5      	beq.n	9dec <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    9e00:	4b05      	ldr	r3, [pc, #20]	; (9e18 <sd_mmc_cmd9_spi+0x48>)
    9e02:	4798      	blx	r3
    9e04:	e7f2      	b.n	9dec <sd_mmc_cmd9_spi+0x1c>
    9e06:	46c0      	nop			; (mov r8, r8)
    9e08:	20000358 	.word	0x20000358
    9e0c:	00081109 	.word	0x00081109
    9e10:	0000aa71 	.word	0x0000aa71
    9e14:	0000ac9d 	.word	0x0000ac9d
    9e18:	0000ad29 	.word	0x0000ad29

00009e1c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    9e1c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    9e1e:	4b04      	ldr	r3, [pc, #16]	; (9e30 <sd_mmc_deselect_slot+0x14>)
    9e20:	781b      	ldrb	r3, [r3, #0]
    9e22:	2b00      	cmp	r3, #0
    9e24:	d000      	beq.n	9e28 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    9e26:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    9e28:	2000      	movs	r0, #0
    9e2a:	4b02      	ldr	r3, [pc, #8]	; (9e34 <sd_mmc_deselect_slot+0x18>)
    9e2c:	4798      	blx	r3
}
    9e2e:	e7fa      	b.n	9e26 <sd_mmc_deselect_slot+0xa>
    9e30:	20000380 	.word	0x20000380
    9e34:	0000aa11 	.word	0x0000aa11

00009e38 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
    9e38:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    9e3a:	2204      	movs	r2, #4
    9e3c:	4b03      	ldr	r3, [pc, #12]	; (9e4c <sd_mmc_init+0x14>)
    9e3e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    9e40:	32fb      	adds	r2, #251	; 0xfb
    9e42:	4b03      	ldr	r3, [pc, #12]	; (9e50 <sd_mmc_init+0x18>)
    9e44:	701a      	strb	r2, [r3, #0]
	driver_init();
    9e46:	4b03      	ldr	r3, [pc, #12]	; (9e54 <sd_mmc_init+0x1c>)
    9e48:	4798      	blx	r3
}
    9e4a:	bd10      	pop	{r4, pc}
    9e4c:	2000035c 	.word	0x2000035c
    9e50:	20000380 	.word	0x20000380
    9e54:	0000a8bd 	.word	0x0000a8bd

00009e58 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    9e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e5a:	46c6      	mov	lr, r8
    9e5c:	b500      	push	{lr}
    9e5e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    9e60:	4bcb      	ldr	r3, [pc, #812]	; (a190 <sd_mmc_check+0x338>)
    9e62:	4798      	blx	r3
    9e64:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    9e66:	2801      	cmp	r0, #1
    9e68:	d006      	beq.n	9e78 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    9e6a:	4bca      	ldr	r3, [pc, #808]	; (a194 <sd_mmc_check+0x33c>)
    9e6c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    9e6e:	0020      	movs	r0, r4
    9e70:	b008      	add	sp, #32
    9e72:	bc04      	pop	{r2}
    9e74:	4690      	mov	r8, r2
    9e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    9e78:	4bc7      	ldr	r3, [pc, #796]	; (a198 <sd_mmc_check+0x340>)
    9e7a:	681b      	ldr	r3, [r3, #0]
    9e7c:	2201      	movs	r2, #1
    9e7e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    9e80:	2200      	movs	r2, #0
    9e82:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    9e84:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    9e86:	4bc5      	ldr	r3, [pc, #788]	; (a19c <sd_mmc_check+0x344>)
    9e88:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9e8a:	2100      	movs	r1, #0
    9e8c:	2088      	movs	r0, #136	; 0x88
    9e8e:	0140      	lsls	r0, r0, #5
    9e90:	4bc3      	ldr	r3, [pc, #780]	; (a1a0 <sd_mmc_check+0x348>)
    9e92:	4798      	blx	r3
    9e94:	2800      	cmp	r0, #0
    9e96:	d107      	bne.n	9ea8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    9e98:	4bbf      	ldr	r3, [pc, #764]	; (a198 <sd_mmc_check+0x340>)
    9e9a:	681b      	ldr	r3, [r3, #0]
    9e9c:	2203      	movs	r2, #3
    9e9e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    9ea0:	4bbc      	ldr	r3, [pc, #752]	; (a194 <sd_mmc_check+0x33c>)
    9ea2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    9ea4:	2403      	movs	r4, #3
    9ea6:	e7e2      	b.n	9e6e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    9ea8:	21d5      	movs	r1, #213	; 0xd5
    9eaa:	0049      	lsls	r1, r1, #1
    9eac:	48bd      	ldr	r0, [pc, #756]	; (a1a4 <sd_mmc_check+0x34c>)
    9eae:	4bbc      	ldr	r3, [pc, #752]	; (a1a0 <sd_mmc_check+0x348>)
    9eb0:	4798      	blx	r3
	*v2 = 0;
    9eb2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    9eb4:	2800      	cmp	r0, #0
    9eb6:	d125      	bne.n	9f04 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9eb8:	4bb7      	ldr	r3, [pc, #732]	; (a198 <sd_mmc_check+0x340>)
    9eba:	681b      	ldr	r3, [r3, #0]
    9ebc:	7adb      	ldrb	r3, [r3, #11]
    9ebe:	07db      	lsls	r3, r3, #31
    9ec0:	d500      	bpl.n	9ec4 <sd_mmc_check+0x6c>
    9ec2:	e1eb      	b.n	a29c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    9ec4:	4bb4      	ldr	r3, [pc, #720]	; (a198 <sd_mmc_check+0x340>)
    9ec6:	681b      	ldr	r3, [r3, #0]
    9ec8:	7ada      	ldrb	r2, [r3, #11]
    9eca:	2309      	movs	r3, #9
    9ecc:	4013      	ands	r3, r2
    9ece:	2b01      	cmp	r3, #1
    9ed0:	d10f      	bne.n	9ef2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    9ed2:	2180      	movs	r1, #128	; 0x80
    9ed4:	0089      	lsls	r1, r1, #2
    9ed6:	48b4      	ldr	r0, [pc, #720]	; (a1a8 <sd_mmc_check+0x350>)
    9ed8:	4bb1      	ldr	r3, [pc, #708]	; (a1a0 <sd_mmc_check+0x348>)
    9eda:	4798      	blx	r3
    9edc:	2800      	cmp	r0, #0
    9ede:	d0db      	beq.n	9e98 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9ee0:	4bad      	ldr	r3, [pc, #692]	; (a198 <sd_mmc_check+0x340>)
    9ee2:	681b      	ldr	r3, [r3, #0]
    9ee4:	7adb      	ldrb	r3, [r3, #11]
    9ee6:	07db      	lsls	r3, r3, #31
    9ee8:	d503      	bpl.n	9ef2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    9eea:	4bb0      	ldr	r3, [pc, #704]	; (a1ac <sd_mmc_check+0x354>)
    9eec:	4798      	blx	r3
    9eee:	2800      	cmp	r0, #0
    9ef0:	d0d2      	beq.n	9e98 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    9ef2:	4baf      	ldr	r3, [pc, #700]	; (a1b0 <sd_mmc_check+0x358>)
    9ef4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    9ef6:	4ba8      	ldr	r3, [pc, #672]	; (a198 <sd_mmc_check+0x340>)
    9ef8:	681b      	ldr	r3, [r3, #0]
    9efa:	2200      	movs	r2, #0
    9efc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    9efe:	4ba5      	ldr	r3, [pc, #660]	; (a194 <sd_mmc_check+0x33c>)
    9f00:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    9f02:	e7b4      	b.n	9e6e <sd_mmc_check+0x16>
	resp = driver_get_response();
    9f04:	4bab      	ldr	r3, [pc, #684]	; (a1b4 <sd_mmc_check+0x35c>)
    9f06:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    9f08:	1c43      	adds	r3, r0, #1
    9f0a:	d100      	bne.n	9f0e <sd_mmc_check+0xb6>
    9f0c:	e1c4      	b.n	a298 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    9f0e:	0500      	lsls	r0, r0, #20
    9f10:	0d00      	lsrs	r0, r0, #20
    9f12:	23d5      	movs	r3, #213	; 0xd5
    9f14:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    9f16:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    9f18:	4298      	cmp	r0, r3
    9f1a:	d1bd      	bne.n	9e98 <sd_mmc_check+0x40>
    9f1c:	e7cc      	b.n	9eb8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    9f1e:	2100      	movs	r1, #0
    9f20:	48a5      	ldr	r0, [pc, #660]	; (a1b8 <sd_mmc_check+0x360>)
    9f22:	4b9f      	ldr	r3, [pc, #636]	; (a1a0 <sd_mmc_check+0x348>)
    9f24:	4798      	blx	r3
    9f26:	2800      	cmp	r0, #0
    9f28:	d119      	bne.n	9f5e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    9f2a:	4b9b      	ldr	r3, [pc, #620]	; (a198 <sd_mmc_check+0x340>)
    9f2c:	681b      	ldr	r3, [r3, #0]
    9f2e:	2202      	movs	r2, #2
    9f30:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    9f32:	2100      	movs	r1, #0
    9f34:	2088      	movs	r0, #136	; 0x88
    9f36:	0140      	lsls	r0, r0, #5
    9f38:	4b99      	ldr	r3, [pc, #612]	; (a1a0 <sd_mmc_check+0x348>)
    9f3a:	4798      	blx	r3
    9f3c:	2800      	cmp	r0, #0
    9f3e:	d0ab      	beq.n	9e98 <sd_mmc_check+0x40>
    9f40:	4d9e      	ldr	r5, [pc, #632]	; (a1bc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    9f42:	4f97      	ldr	r7, [pc, #604]	; (a1a0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
    9f44:	4e9b      	ldr	r6, [pc, #620]	; (a1b4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    9f46:	2100      	movs	r1, #0
    9f48:	489d      	ldr	r0, [pc, #628]	; (a1c0 <sd_mmc_check+0x368>)
    9f4a:	47b8      	blx	r7
    9f4c:	2800      	cmp	r0, #0
    9f4e:	d0a3      	beq.n	9e98 <sd_mmc_check+0x40>
		resp = driver_get_response();
    9f50:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    9f52:	07c3      	lsls	r3, r0, #31
    9f54:	d57d      	bpl.n	a052 <sd_mmc_check+0x1fa>
    9f56:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    9f58:	2d00      	cmp	r5, #0
    9f5a:	d1f4      	bne.n	9f46 <sd_mmc_check+0xee>
    9f5c:	e79c      	b.n	9e98 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    9f5e:	4b95      	ldr	r3, [pc, #596]	; (a1b4 <sd_mmc_check+0x35c>)
    9f60:	4798      	blx	r3
    9f62:	0043      	lsls	r3, r0, #1
    9f64:	d505      	bpl.n	9f72 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    9f66:	4b8c      	ldr	r3, [pc, #560]	; (a198 <sd_mmc_check+0x340>)
    9f68:	681a      	ldr	r2, [r3, #0]
    9f6a:	7ad3      	ldrb	r3, [r2, #11]
    9f6c:	2108      	movs	r1, #8
    9f6e:	430b      	orrs	r3, r1
    9f70:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    9f72:	2100      	movs	r1, #0
    9f74:	4893      	ldr	r0, [pc, #588]	; (a1c4 <sd_mmc_check+0x36c>)
    9f76:	4b8a      	ldr	r3, [pc, #552]	; (a1a0 <sd_mmc_check+0x348>)
    9f78:	4798      	blx	r3
    9f7a:	2800      	cmp	r0, #0
    9f7c:	d08c      	beq.n	9e98 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    9f7e:	4b86      	ldr	r3, [pc, #536]	; (a198 <sd_mmc_check+0x340>)
    9f80:	681b      	ldr	r3, [r3, #0]
    9f82:	7adb      	ldrb	r3, [r3, #11]
    9f84:	07da      	lsls	r2, r3, #31
    9f86:	d400      	bmi.n	9f8a <sd_mmc_check+0x132>
    9f88:	e1a4      	b.n	a2d4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    9f8a:	4b8f      	ldr	r3, [pc, #572]	; (a1c8 <sd_mmc_check+0x370>)
    9f8c:	4798      	blx	r3
    9f8e:	2800      	cmp	r0, #0
    9f90:	d082      	beq.n	9e98 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    9f92:	4b81      	ldr	r3, [pc, #516]	; (a198 <sd_mmc_check+0x340>)
    9f94:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9f96:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    9f98:	2107      	movs	r1, #7
    9f9a:	4019      	ands	r1, r3
    9f9c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    9f9e:	488b      	ldr	r0, [pc, #556]	; (a1cc <sd_mmc_check+0x374>)
    9fa0:	5808      	ldr	r0, [r1, r0]
    9fa2:	21fa      	movs	r1, #250	; 0xfa
    9fa4:	0089      	lsls	r1, r1, #2
    9fa6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    9fa8:	065b      	lsls	r3, r3, #25
    9faa:	0f1b      	lsrs	r3, r3, #28
    9fac:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    9fae:	4888      	ldr	r0, [pc, #544]	; (a1d0 <sd_mmc_check+0x378>)
    9fb0:	581b      	ldr	r3, [r3, r0]
    9fb2:	434b      	muls	r3, r1
    9fb4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    9fb6:	7b93      	ldrb	r3, [r2, #14]
    9fb8:	099b      	lsrs	r3, r3, #6
    9fba:	d000      	beq.n	9fbe <sd_mmc_check+0x166>
    9fbc:	e13c      	b.n	a238 <sd_mmc_check+0x3e0>
    9fbe:	7d91      	ldrb	r1, [r2, #22]
    9fc0:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9fc2:	7d53      	ldrb	r3, [r2, #21]
    9fc4:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9fc6:	7d10      	ldrb	r0, [r2, #20]
    9fc8:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    9fca:	4303      	orrs	r3, r0
    9fcc:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    9fce:	7e10      	ldrb	r0, [r2, #24]
    9fd0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    9fd2:	7dd1      	ldrb	r1, [r2, #23]
    9fd4:	0049      	lsls	r1, r1, #1
    9fd6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    9fd8:	051b      	lsls	r3, r3, #20
    9fda:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    9fdc:	3301      	adds	r3, #1
    9fde:	2107      	movs	r1, #7
    9fe0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    9fe2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    9fe4:	408b      	lsls	r3, r1
    9fe6:	7cd0      	ldrb	r0, [r2, #19]
    9fe8:	210f      	movs	r1, #15
    9fea:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    9fec:	408b      	lsls	r3, r1
				/ 1024;
    9fee:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    9ff0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    9ff2:	8911      	ldrh	r1, [r2, #8]
    9ff4:	0409      	lsls	r1, r1, #16
    9ff6:	4877      	ldr	r0, [pc, #476]	; (a1d4 <sd_mmc_check+0x37c>)
    9ff8:	4b69      	ldr	r3, [pc, #420]	; (a1a0 <sd_mmc_check+0x348>)
    9ffa:	4798      	blx	r3
    9ffc:	2800      	cmp	r0, #0
    9ffe:	d100      	bne.n	a002 <sd_mmc_check+0x1aa>
    a000:	e74a      	b.n	9e98 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    a002:	2301      	movs	r3, #1
    a004:	9300      	str	r3, [sp, #0]
    a006:	2208      	movs	r2, #8
    a008:	2100      	movs	r1, #0
    a00a:	4873      	ldr	r0, [pc, #460]	; (a1d8 <sd_mmc_check+0x380>)
    a00c:	4d73      	ldr	r5, [pc, #460]	; (a1dc <sd_mmc_check+0x384>)
    a00e:	47a8      	blx	r5
    a010:	2800      	cmp	r0, #0
    a012:	d100      	bne.n	a016 <sd_mmc_check+0x1be>
    a014:	e740      	b.n	9e98 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    a016:	2101      	movs	r1, #1
    a018:	a806      	add	r0, sp, #24
    a01a:	4b71      	ldr	r3, [pc, #452]	; (a1e0 <sd_mmc_check+0x388>)
    a01c:	4798      	blx	r3
    a01e:	2800      	cmp	r0, #0
    a020:	d100      	bne.n	a024 <sd_mmc_check+0x1cc>
    a022:	e739      	b.n	9e98 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    a024:	4b6f      	ldr	r3, [pc, #444]	; (a1e4 <sd_mmc_check+0x38c>)
    a026:	4798      	blx	r3
    a028:	2800      	cmp	r0, #0
    a02a:	d100      	bne.n	a02e <sd_mmc_check+0x1d6>
    a02c:	e734      	b.n	9e98 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a02e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    a030:	781b      	ldrb	r3, [r3, #0]
    a032:	220f      	movs	r2, #15
    a034:	4013      	ands	r3, r2
    a036:	2b01      	cmp	r3, #1
    a038:	d100      	bne.n	a03c <sd_mmc_check+0x1e4>
    a03a:	e119      	b.n	a270 <sd_mmc_check+0x418>
    a03c:	2b00      	cmp	r3, #0
    a03e:	d100      	bne.n	a042 <sd_mmc_check+0x1ea>
    a040:	e109      	b.n	a256 <sd_mmc_check+0x3fe>
    a042:	2b02      	cmp	r3, #2
    a044:	d100      	bne.n	a048 <sd_mmc_check+0x1f0>
    a046:	e118      	b.n	a27a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    a048:	4b53      	ldr	r3, [pc, #332]	; (a198 <sd_mmc_check+0x340>)
    a04a:	681b      	ldr	r3, [r3, #0]
    a04c:	2210      	movs	r2, #16
    a04e:	731a      	strb	r2, [r3, #12]
    a050:	e105      	b.n	a25e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    a052:	2100      	movs	r1, #0
    a054:	4858      	ldr	r0, [pc, #352]	; (a1b8 <sd_mmc_check+0x360>)
    a056:	4b52      	ldr	r3, [pc, #328]	; (a1a0 <sd_mmc_check+0x348>)
    a058:	4798      	blx	r3
    a05a:	2800      	cmp	r0, #0
    a05c:	d100      	bne.n	a060 <sd_mmc_check+0x208>
    a05e:	e71b      	b.n	9e98 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    a060:	4b54      	ldr	r3, [pc, #336]	; (a1b4 <sd_mmc_check+0x35c>)
    a062:	4798      	blx	r3
    a064:	23c0      	movs	r3, #192	; 0xc0
    a066:	05db      	lsls	r3, r3, #23
    a068:	4018      	ands	r0, r3
    a06a:	2380      	movs	r3, #128	; 0x80
    a06c:	05db      	lsls	r3, r3, #23
    a06e:	4298      	cmp	r0, r3
    a070:	d105      	bne.n	a07e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    a072:	4b49      	ldr	r3, [pc, #292]	; (a198 <sd_mmc_check+0x340>)
    a074:	681a      	ldr	r2, [r3, #0]
    a076:	7ad1      	ldrb	r1, [r2, #11]
    a078:	2308      	movs	r3, #8
    a07a:	430b      	orrs	r3, r1
    a07c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    a07e:	2100      	movs	r1, #0
    a080:	4850      	ldr	r0, [pc, #320]	; (a1c4 <sd_mmc_check+0x36c>)
    a082:	4b47      	ldr	r3, [pc, #284]	; (a1a0 <sd_mmc_check+0x348>)
    a084:	4798      	blx	r3
    a086:	2800      	cmp	r0, #0
    a088:	d100      	bne.n	a08c <sd_mmc_check+0x234>
    a08a:	e705      	b.n	9e98 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    a08c:	4b4e      	ldr	r3, [pc, #312]	; (a1c8 <sd_mmc_check+0x370>)
    a08e:	4798      	blx	r3
    a090:	2800      	cmp	r0, #0
    a092:	d100      	bne.n	a096 <sd_mmc_check+0x23e>
    a094:	e700      	b.n	9e98 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a096:	4b40      	ldr	r3, [pc, #256]	; (a198 <sd_mmc_check+0x340>)
    a098:	681a      	ldr	r2, [r3, #0]
    a09a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    a09c:	069b      	lsls	r3, r3, #26
    a09e:	0f1b      	lsrs	r3, r3, #28
    a0a0:	2b02      	cmp	r3, #2
    a0a2:	d100      	bne.n	a0a6 <sd_mmc_check+0x24e>
    a0a4:	e0a8      	b.n	a1f8 <sd_mmc_check+0x3a0>
    a0a6:	d907      	bls.n	a0b8 <sd_mmc_check+0x260>
    a0a8:	2b03      	cmp	r3, #3
    a0aa:	d100      	bne.n	a0ae <sd_mmc_check+0x256>
    a0ac:	e0a7      	b.n	a1fe <sd_mmc_check+0x3a6>
    a0ae:	2b04      	cmp	r3, #4
    a0b0:	d104      	bne.n	a0bc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    a0b2:	2340      	movs	r3, #64	; 0x40
    a0b4:	7313      	strb	r3, [r2, #12]
    a0b6:	e003      	b.n	a0c0 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    a0b8:	2b01      	cmp	r3, #1
    a0ba:	d066      	beq.n	a18a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    a0bc:	2312      	movs	r3, #18
    a0be:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a0c0:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    a0c2:	0659      	lsls	r1, r3, #25
    a0c4:	0f09      	lsrs	r1, r1, #28
    a0c6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    a0c8:	2007      	movs	r0, #7
    a0ca:	4003      	ands	r3, r0
    a0cc:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    a0ce:	483f      	ldr	r0, [pc, #252]	; (a1cc <sd_mmc_check+0x374>)
    a0d0:	5818      	ldr	r0, [r3, r0]
    a0d2:	23fa      	movs	r3, #250	; 0xfa
    a0d4:	009b      	lsls	r3, r3, #2
    a0d6:	4343      	muls	r3, r0
    a0d8:	4843      	ldr	r0, [pc, #268]	; (a1e8 <sd_mmc_check+0x390>)
    a0da:	5809      	ldr	r1, [r1, r0]
    a0dc:	434b      	muls	r3, r1
    a0de:	6013      	str	r3, [r2, #0]
    a0e0:	7d91      	ldrb	r1, [r2, #22]
    a0e2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a0e4:	7d53      	ldrb	r3, [r2, #21]
    a0e6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a0e8:	7d10      	ldrb	r0, [r2, #20]
    a0ea:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a0ec:	4303      	orrs	r3, r0
    a0ee:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    a0f0:	051b      	lsls	r3, r3, #20
    a0f2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    a0f4:	493d      	ldr	r1, [pc, #244]	; (a1ec <sd_mmc_check+0x394>)
    a0f6:	428b      	cmp	r3, r1
    a0f8:	d00f      	beq.n	a11a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a0fa:	7e10      	ldrb	r0, [r2, #24]
    a0fc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a0fe:	7dd1      	ldrb	r1, [r2, #23]
    a100:	0049      	lsls	r1, r1, #1
    a102:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a104:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    a106:	2007      	movs	r0, #7
    a108:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    a10a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    a10c:	408b      	lsls	r3, r1
    a10e:	7cd1      	ldrb	r1, [r2, #19]
    a110:	3008      	adds	r0, #8
    a112:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    a114:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    a116:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    a118:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    a11a:	7b13      	ldrb	r3, [r2, #12]
    a11c:	2b3f      	cmp	r3, #63	; 0x3f
    a11e:	d97b      	bls.n	a218 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    a120:	2100      	movs	r1, #0
    a122:	9100      	str	r1, [sp, #0]
    a124:	2301      	movs	r3, #1
    a126:	2280      	movs	r2, #128	; 0x80
    a128:	0092      	lsls	r2, r2, #2
    a12a:	4831      	ldr	r0, [pc, #196]	; (a1f0 <sd_mmc_check+0x398>)
    a12c:	4d2b      	ldr	r5, [pc, #172]	; (a1dc <sd_mmc_check+0x384>)
    a12e:	47a8      	blx	r5
    a130:	2800      	cmp	r0, #0
    a132:	d100      	bne.n	a136 <sd_mmc_check+0x2de>
    a134:	e6b0      	b.n	9e98 <sd_mmc_check+0x40>
    a136:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    a138:	4e2e      	ldr	r6, [pc, #184]	; (a1f4 <sd_mmc_check+0x39c>)
    a13a:	a805      	add	r0, sp, #20
    a13c:	47b0      	blx	r6
    a13e:	2800      	cmp	r0, #0
    a140:	d100      	bne.n	a144 <sd_mmc_check+0x2ec>
    a142:	e6a9      	b.n	9e98 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    a144:	3501      	adds	r5, #1
    a146:	b2ad      	uxth	r5, r5
    a148:	2d32      	cmp	r5, #50	; 0x32
    a14a:	d1f6      	bne.n	a13a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    a14c:	4b12      	ldr	r3, [pc, #72]	; (a198 <sd_mmc_check+0x340>)
    a14e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a150:	7d8a      	ldrb	r2, [r1, #22]
    a152:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a154:	7d4b      	ldrb	r3, [r1, #21]
    a156:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a158:	7d09      	ldrb	r1, [r1, #20]
    a15a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a15c:	430b      	orrs	r3, r1
    a15e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    a160:	051b      	lsls	r3, r3, #20
    a162:	0d1b      	lsrs	r3, r3, #20
    a164:	4a21      	ldr	r2, [pc, #132]	; (a1ec <sd_mmc_check+0x394>)
    a166:	4293      	cmp	r3, r2
    a168:	d154      	bne.n	a214 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    a16a:	4e22      	ldr	r6, [pc, #136]	; (a1f4 <sd_mmc_check+0x39c>)
    a16c:	a806      	add	r0, sp, #24
    a16e:	47b0      	blx	r6
    a170:	2800      	cmp	r0, #0
    a172:	d100      	bne.n	a176 <sd_mmc_check+0x31e>
    a174:	e690      	b.n	9e98 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    a176:	3501      	adds	r5, #1
    a178:	b2ad      	uxth	r5, r5
    a17a:	2d35      	cmp	r5, #53	; 0x35
    a17c:	d9f6      	bls.n	a16c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    a17e:	4b06      	ldr	r3, [pc, #24]	; (a198 <sd_mmc_check+0x340>)
    a180:	681a      	ldr	r2, [r3, #0]
    a182:	9b06      	ldr	r3, [sp, #24]
    a184:	085b      	lsrs	r3, r3, #1
    a186:	6053      	str	r3, [r2, #4]
    a188:	e044      	b.n	a214 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    a18a:	2314      	movs	r3, #20
    a18c:	7313      	strb	r3, [r2, #12]
    a18e:	e797      	b.n	a0c0 <sd_mmc_check+0x268>
    a190:	00009d3d 	.word	0x00009d3d
    a194:	00009e1d 	.word	0x00009e1d
    a198:	20000358 	.word	0x20000358
    a19c:	0000aa39 	.word	0x0000aa39
    a1a0:	0000ac01 	.word	0x0000ac01
    a1a4:	00005508 	.word	0x00005508
    a1a8:	00001110 	.word	0x00001110
    a1ac:	00009d99 	.word	0x00009d99
    a1b0:	00009d15 	.word	0x00009d15
    a1b4:	0000ac19 	.word	0x0000ac19
    a1b8:	0000053a 	.word	0x0000053a
    a1bc:	00001bef 	.word	0x00001bef
    a1c0:	00001101 	.word	0x00001101
    a1c4:	0000113b 	.word	0x0000113b
    a1c8:	00009dd1 	.word	0x00009dd1
    a1cc:	00018914 	.word	0x00018914
    a1d0:	00018930 	.word	0x00018930
    a1d4:	00001137 	.word	0x00001137
    a1d8:	00081133 	.word	0x00081133
    a1dc:	0000aa71 	.word	0x0000aa71
    a1e0:	0000ac9d 	.word	0x0000ac9d
    a1e4:	0000ad29 	.word	0x0000ad29
    a1e8:	000188d4 	.word	0x000188d4
    a1ec:	00000fff 	.word	0x00000fff
    a1f0:	00081108 	.word	0x00081108
    a1f4:	0000ac25 	.word	0x0000ac25
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    a1f8:	2322      	movs	r3, #34	; 0x22
    a1fa:	7313      	strb	r3, [r2, #12]
    a1fc:	e760      	b.n	a0c0 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    a1fe:	2330      	movs	r3, #48	; 0x30
    a200:	7313      	strb	r3, [r2, #12]
    a202:	e75d      	b.n	a0c0 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    a204:	a806      	add	r0, sp, #24
    a206:	4b36      	ldr	r3, [pc, #216]	; (a2e0 <sd_mmc_check+0x488>)
    a208:	4798      	blx	r3
    a20a:	2800      	cmp	r0, #0
    a20c:	d100      	bne.n	a210 <sd_mmc_check+0x3b8>
    a20e:	e643      	b.n	9e98 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    a210:	3501      	adds	r5, #1
    a212:	b2ad      	uxth	r5, r5
    a214:	2d7f      	cmp	r5, #127	; 0x7f
    a216:	d9f5      	bls.n	a204 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    a218:	2180      	movs	r1, #128	; 0x80
    a21a:	0089      	lsls	r1, r1, #2
    a21c:	4831      	ldr	r0, [pc, #196]	; (a2e4 <sd_mmc_check+0x48c>)
    a21e:	4b32      	ldr	r3, [pc, #200]	; (a2e8 <sd_mmc_check+0x490>)
    a220:	4798      	blx	r3
    a222:	2800      	cmp	r0, #0
    a224:	d100      	bne.n	a228 <sd_mmc_check+0x3d0>
    a226:	e637      	b.n	9e98 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    a228:	4b30      	ldr	r3, [pc, #192]	; (a2ec <sd_mmc_check+0x494>)
    a22a:	4798      	blx	r3
    a22c:	2800      	cmp	r0, #0
    a22e:	d100      	bne.n	a232 <sd_mmc_check+0x3da>
    a230:	e632      	b.n	9e98 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    a232:	4b2f      	ldr	r3, [pc, #188]	; (a2f0 <sd_mmc_check+0x498>)
    a234:	4798      	blx	r3
    a236:	e65e      	b.n	9ef6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a238:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    a23a:	7d93      	ldrb	r3, [r2, #22]
    a23c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a23e:	7d51      	ldrb	r1, [r2, #21]
    a240:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    a242:	430b      	orrs	r3, r1
    a244:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    a246:	029b      	lsls	r3, r3, #10
				* 512;
    a248:	085b      	lsrs	r3, r3, #1
    a24a:	2180      	movs	r1, #128	; 0x80
    a24c:	0089      	lsls	r1, r1, #2
    a24e:	468c      	mov	ip, r1
    a250:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    a252:	6053      	str	r3, [r2, #4]
    a254:	e6cd      	b.n	9ff2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    a256:	4b27      	ldr	r3, [pc, #156]	; (a2f4 <sd_mmc_check+0x49c>)
    a258:	681b      	ldr	r3, [r3, #0]
    a25a:	2210      	movs	r2, #16
    a25c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a25e:	4b25      	ldr	r3, [pc, #148]	; (a2f4 <sd_mmc_check+0x49c>)
    a260:	681b      	ldr	r3, [r3, #0]
    a262:	7adb      	ldrb	r3, [r3, #11]
    a264:	2209      	movs	r2, #9
    a266:	4013      	ands	r3, r2
    a268:	2b01      	cmp	r3, #1
    a26a:	d000      	beq.n	a26e <sd_mmc_check+0x416>
    a26c:	e638      	b.n	9ee0 <sd_mmc_check+0x88>
    a26e:	e630      	b.n	9ed2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    a270:	4b20      	ldr	r3, [pc, #128]	; (a2f4 <sd_mmc_check+0x49c>)
    a272:	681b      	ldr	r3, [r3, #0]
    a274:	221a      	movs	r2, #26
    a276:	731a      	strb	r2, [r3, #12]
    a278:	e7f1      	b.n	a25e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    a27a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    a27c:	789b      	ldrb	r3, [r3, #2]
    a27e:	09db      	lsrs	r3, r3, #7
    a280:	2b01      	cmp	r3, #1
    a282:	d104      	bne.n	a28e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    a284:	4b1b      	ldr	r3, [pc, #108]	; (a2f4 <sd_mmc_check+0x49c>)
    a286:	681b      	ldr	r3, [r3, #0]
    a288:	2230      	movs	r2, #48	; 0x30
    a28a:	731a      	strb	r2, [r3, #12]
    a28c:	e7e7      	b.n	a25e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    a28e:	4b19      	ldr	r3, [pc, #100]	; (a2f4 <sd_mmc_check+0x49c>)
    a290:	681b      	ldr	r3, [r3, #0]
    a292:	2220      	movs	r2, #32
    a294:	731a      	strb	r2, [r3, #12]
    a296:	e7e2      	b.n	a25e <sd_mmc_check+0x406>
	*v2 = 0;
    a298:	2600      	movs	r6, #0
    a29a:	e60d      	b.n	9eb8 <sd_mmc_check+0x60>
    a29c:	1e73      	subs	r3, r6, #1
    a29e:	419e      	sbcs	r6, r3
    a2a0:	07b3      	lsls	r3, r6, #30
    a2a2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    a2a4:	4d14      	ldr	r5, [pc, #80]	; (a2f8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    a2a6:	4f10      	ldr	r7, [pc, #64]	; (a2e8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    a2a8:	46b8      	mov	r8, r7
		resp = driver_get_response();
    a2aa:	4e14      	ldr	r6, [pc, #80]	; (a2fc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    a2ac:	2100      	movs	r1, #0
    a2ae:	4814      	ldr	r0, [pc, #80]	; (a300 <sd_mmc_check+0x4a8>)
    a2b0:	47b8      	blx	r7
    a2b2:	2800      	cmp	r0, #0
    a2b4:	d100      	bne.n	a2b8 <sd_mmc_check+0x460>
    a2b6:	e638      	b.n	9f2a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    a2b8:	9903      	ldr	r1, [sp, #12]
    a2ba:	4812      	ldr	r0, [pc, #72]	; (a304 <sd_mmc_check+0x4ac>)
    a2bc:	47c0      	blx	r8
    a2be:	2800      	cmp	r0, #0
    a2c0:	d100      	bne.n	a2c4 <sd_mmc_check+0x46c>
    a2c2:	e632      	b.n	9f2a <sd_mmc_check+0xd2>
		resp = driver_get_response();
    a2c4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    a2c6:	07c3      	lsls	r3, r0, #31
    a2c8:	d400      	bmi.n	a2cc <sd_mmc_check+0x474>
    a2ca:	e628      	b.n	9f1e <sd_mmc_check+0xc6>
    a2cc:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    a2ce:	2d00      	cmp	r5, #0
    a2d0:	d1ec      	bne.n	a2ac <sd_mmc_check+0x454>
    a2d2:	e62a      	b.n	9f2a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    a2d4:	2209      	movs	r2, #9
    a2d6:	4013      	ands	r3, r2
    a2d8:	2b01      	cmp	r3, #1
    a2da:	d000      	beq.n	a2de <sd_mmc_check+0x486>
    a2dc:	e609      	b.n	9ef2 <sd_mmc_check+0x9a>
    a2de:	e5f8      	b.n	9ed2 <sd_mmc_check+0x7a>
    a2e0:	0000ac25 	.word	0x0000ac25
    a2e4:	00001110 	.word	0x00001110
    a2e8:	0000ac01 	.word	0x0000ac01
    a2ec:	00009d99 	.word	0x00009d99
    a2f0:	00009d15 	.word	0x00009d15
    a2f4:	20000358 	.word	0x20000358
    a2f8:	00001bef 	.word	0x00001bef
    a2fc:	0000ac19 	.word	0x0000ac19
    a300:	00001137 	.word	0x00001137
    a304:	00001129 	.word	0x00001129

0000a308 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    a308:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a30a:	4b06      	ldr	r3, [pc, #24]	; (a324 <sd_mmc_get_type+0x1c>)
    a30c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    a30e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a310:	2800      	cmp	r0, #0
    a312:	d001      	beq.n	a318 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    a314:	0018      	movs	r0, r3
    a316:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    a318:	4b03      	ldr	r3, [pc, #12]	; (a328 <sd_mmc_get_type+0x20>)
    a31a:	4798      	blx	r3
	return sd_mmc_card->type;
    a31c:	4b03      	ldr	r3, [pc, #12]	; (a32c <sd_mmc_get_type+0x24>)
    a31e:	681b      	ldr	r3, [r3, #0]
    a320:	7adb      	ldrb	r3, [r3, #11]
    a322:	e7f7      	b.n	a314 <sd_mmc_get_type+0xc>
    a324:	00009d3d 	.word	0x00009d3d
    a328:	00009e1d 	.word	0x00009e1d
    a32c:	20000358 	.word	0x20000358

0000a330 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    a330:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a332:	4b06      	ldr	r3, [pc, #24]	; (a34c <sd_mmc_get_capacity+0x1c>)
    a334:	4798      	blx	r3
		return 0;
    a336:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    a338:	2800      	cmp	r0, #0
    a33a:	d001      	beq.n	a340 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    a33c:	0018      	movs	r0, r3
    a33e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    a340:	4b03      	ldr	r3, [pc, #12]	; (a350 <sd_mmc_get_capacity+0x20>)
    a342:	4798      	blx	r3
	return sd_mmc_card->capacity;
    a344:	4b03      	ldr	r3, [pc, #12]	; (a354 <sd_mmc_get_capacity+0x24>)
    a346:	681b      	ldr	r3, [r3, #0]
    a348:	685b      	ldr	r3, [r3, #4]
    a34a:	e7f7      	b.n	a33c <sd_mmc_get_capacity+0xc>
    a34c:	00009d3d 	.word	0x00009d3d
    a350:	00009e1d 	.word	0x00009e1d
    a354:	20000358 	.word	0x20000358

0000a358 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    a358:	2000      	movs	r0, #0
    a35a:	4770      	bx	lr

0000a35c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    a35c:	b570      	push	{r4, r5, r6, lr}
    a35e:	b082      	sub	sp, #8
    a360:	000e      	movs	r6, r1
    a362:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    a364:	4b16      	ldr	r3, [pc, #88]	; (a3c0 <sd_mmc_init_read_blocks+0x64>)
    a366:	4798      	blx	r3
    a368:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    a36a:	d002      	beq.n	a372 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    a36c:	0020      	movs	r0, r4
    a36e:	b002      	add	sp, #8
    a370:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    a372:	4b14      	ldr	r3, [pc, #80]	; (a3c4 <sd_mmc_init_read_blocks+0x68>)
    a374:	4798      	blx	r3
    a376:	2800      	cmp	r0, #0
    a378:	d017      	beq.n	a3aa <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    a37a:	2d01      	cmp	r5, #1
    a37c:	d919      	bls.n	a3b2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    a37e:	4812      	ldr	r0, [pc, #72]	; (a3c8 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    a380:	4b12      	ldr	r3, [pc, #72]	; (a3cc <sd_mmc_init_read_blocks+0x70>)
    a382:	681b      	ldr	r3, [r3, #0]
    a384:	7adb      	ldrb	r3, [r3, #11]
    a386:	071b      	lsls	r3, r3, #28
    a388:	d400      	bmi.n	a38c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    a38a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    a38c:	2301      	movs	r3, #1
    a38e:	9300      	str	r3, [sp, #0]
    a390:	002b      	movs	r3, r5
    a392:	2280      	movs	r2, #128	; 0x80
    a394:	0092      	lsls	r2, r2, #2
    a396:	0031      	movs	r1, r6
    a398:	4e0d      	ldr	r6, [pc, #52]	; (a3d0 <sd_mmc_init_read_blocks+0x74>)
    a39a:	47b0      	blx	r6
    a39c:	2800      	cmp	r0, #0
    a39e:	d00a      	beq.n	a3b6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    a3a0:	4b0c      	ldr	r3, [pc, #48]	; (a3d4 <sd_mmc_init_read_blocks+0x78>)
    a3a2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    a3a4:	4b0c      	ldr	r3, [pc, #48]	; (a3d8 <sd_mmc_init_read_blocks+0x7c>)
    a3a6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    a3a8:	e7e0      	b.n	a36c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    a3aa:	4b0c      	ldr	r3, [pc, #48]	; (a3dc <sd_mmc_init_read_blocks+0x80>)
    a3ac:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a3ae:	3405      	adds	r4, #5
    a3b0:	e7dc      	b.n	a36c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    a3b2:	480b      	ldr	r0, [pc, #44]	; (a3e0 <sd_mmc_init_read_blocks+0x84>)
    a3b4:	e7e4      	b.n	a380 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    a3b6:	4b09      	ldr	r3, [pc, #36]	; (a3dc <sd_mmc_init_read_blocks+0x80>)
    a3b8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a3ba:	2405      	movs	r4, #5
    a3bc:	e7d6      	b.n	a36c <sd_mmc_init_read_blocks+0x10>
    a3be:	46c0      	nop			; (mov r8, r8)
    a3c0:	00009d3d 	.word	0x00009d3d
    a3c4:	00009d99 	.word	0x00009d99
    a3c8:	00101112 	.word	0x00101112
    a3cc:	20000358 	.word	0x20000358
    a3d0:	0000aa71 	.word	0x0000aa71
    a3d4:	2000037c 	.word	0x2000037c
    a3d8:	2000037e 	.word	0x2000037e
    a3dc:	00009e1d 	.word	0x00009e1d
    a3e0:	00081111 	.word	0x00081111

0000a3e4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    a3e4:	b510      	push	{r4, lr}
    a3e6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    a3e8:	4b07      	ldr	r3, [pc, #28]	; (a408 <sd_mmc_start_read_blocks+0x24>)
    a3ea:	4798      	blx	r3
    a3ec:	2800      	cmp	r0, #0
    a3ee:	d104      	bne.n	a3fa <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    a3f0:	2200      	movs	r2, #0
    a3f2:	4b06      	ldr	r3, [pc, #24]	; (a40c <sd_mmc_start_read_blocks+0x28>)
    a3f4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    a3f6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    a3f8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    a3fa:	4a04      	ldr	r2, [pc, #16]	; (a40c <sd_mmc_start_read_blocks+0x28>)
    a3fc:	8813      	ldrh	r3, [r2, #0]
    a3fe:	1b1c      	subs	r4, r3, r4
    a400:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    a402:	2000      	movs	r0, #0
    a404:	e7f8      	b.n	a3f8 <sd_mmc_start_read_blocks+0x14>
    a406:	46c0      	nop			; (mov r8, r8)
    a408:	0000ac9d 	.word	0x0000ac9d
    a40c:	2000037c 	.word	0x2000037c

0000a410 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    a410:	b510      	push	{r4, lr}
    a412:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    a414:	4b14      	ldr	r3, [pc, #80]	; (a468 <sd_mmc_wait_end_of_read_blocks+0x58>)
    a416:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a418:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    a41a:	2800      	cmp	r0, #0
    a41c:	d101      	bne.n	a422 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    a41e:	0018      	movs	r0, r3
    a420:	bd10      	pop	{r4, pc}
	if (abort) {
    a422:	2c00      	cmp	r4, #0
    a424:	d010      	beq.n	a448 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    a426:	2200      	movs	r2, #0
    a428:	4b10      	ldr	r3, [pc, #64]	; (a46c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    a42a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    a42c:	4b10      	ldr	r3, [pc, #64]	; (a470 <sd_mmc_wait_end_of_read_blocks+0x60>)
    a42e:	881b      	ldrh	r3, [r3, #0]
    a430:	2b01      	cmp	r3, #1
    a432:	d00f      	beq.n	a454 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    a434:	2100      	movs	r1, #0
    a436:	480f      	ldr	r0, [pc, #60]	; (a474 <sd_mmc_wait_end_of_read_blocks+0x64>)
    a438:	4b0f      	ldr	r3, [pc, #60]	; (a478 <sd_mmc_wait_end_of_read_blocks+0x68>)
    a43a:	4798      	blx	r3
    a43c:	2800      	cmp	r0, #0
    a43e:	d00d      	beq.n	a45c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    a440:	4b0e      	ldr	r3, [pc, #56]	; (a47c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    a442:	4798      	blx	r3
	return SD_MMC_OK;
    a444:	2300      	movs	r3, #0
    a446:	e7ea      	b.n	a41e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    a448:	4b08      	ldr	r3, [pc, #32]	; (a46c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    a44a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    a44c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    a44e:	2a00      	cmp	r2, #0
    a450:	d0ec      	beq.n	a42c <sd_mmc_wait_end_of_read_blocks+0x1c>
    a452:	e7e4      	b.n	a41e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    a454:	4b09      	ldr	r3, [pc, #36]	; (a47c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    a456:	4798      	blx	r3
		return SD_MMC_OK;
    a458:	2300      	movs	r3, #0
    a45a:	e7e0      	b.n	a41e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    a45c:	2100      	movs	r1, #0
    a45e:	4805      	ldr	r0, [pc, #20]	; (a474 <sd_mmc_wait_end_of_read_blocks+0x64>)
    a460:	4b05      	ldr	r3, [pc, #20]	; (a478 <sd_mmc_wait_end_of_read_blocks+0x68>)
    a462:	4798      	blx	r3
    a464:	e7ec      	b.n	a440 <sd_mmc_wait_end_of_read_blocks+0x30>
    a466:	46c0      	nop			; (mov r8, r8)
    a468:	0000ad29 	.word	0x0000ad29
    a46c:	2000037c 	.word	0x2000037c
    a470:	2000037e 	.word	0x2000037e
    a474:	0000310c 	.word	0x0000310c
    a478:	0000ac01 	.word	0x0000ac01
    a47c:	00009e1d 	.word	0x00009e1d

0000a480 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    a480:	b570      	push	{r4, r5, r6, lr}
    a482:	b082      	sub	sp, #8
    a484:	000e      	movs	r6, r1
    a486:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    a488:	4b11      	ldr	r3, [pc, #68]	; (a4d0 <sd_mmc_init_write_blocks+0x50>)
    a48a:	4798      	blx	r3
    a48c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    a48e:	d116      	bne.n	a4be <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    a490:	2d01      	cmp	r5, #1
    a492:	d917      	bls.n	a4c4 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    a494:	480f      	ldr	r0, [pc, #60]	; (a4d4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    a496:	4b10      	ldr	r3, [pc, #64]	; (a4d8 <sd_mmc_init_write_blocks+0x58>)
    a498:	681b      	ldr	r3, [r3, #0]
    a49a:	7adb      	ldrb	r3, [r3, #11]
    a49c:	071b      	lsls	r3, r3, #28
    a49e:	d400      	bmi.n	a4a2 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    a4a0:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    a4a2:	2301      	movs	r3, #1
    a4a4:	9300      	str	r3, [sp, #0]
    a4a6:	002b      	movs	r3, r5
    a4a8:	2280      	movs	r2, #128	; 0x80
    a4aa:	0092      	lsls	r2, r2, #2
    a4ac:	0031      	movs	r1, r6
    a4ae:	4e0b      	ldr	r6, [pc, #44]	; (a4dc <sd_mmc_init_write_blocks+0x5c>)
    a4b0:	47b0      	blx	r6
    a4b2:	2800      	cmp	r0, #0
    a4b4:	d008      	beq.n	a4c8 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    a4b6:	4b0a      	ldr	r3, [pc, #40]	; (a4e0 <sd_mmc_init_write_blocks+0x60>)
    a4b8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    a4ba:	4b0a      	ldr	r3, [pc, #40]	; (a4e4 <sd_mmc_init_write_blocks+0x64>)
    a4bc:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    a4be:	0020      	movs	r0, r4
    a4c0:	b002      	add	sp, #8
    a4c2:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    a4c4:	4808      	ldr	r0, [pc, #32]	; (a4e8 <sd_mmc_init_write_blocks+0x68>)
    a4c6:	e7e6      	b.n	a496 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    a4c8:	4b08      	ldr	r3, [pc, #32]	; (a4ec <sd_mmc_init_write_blocks+0x6c>)
    a4ca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a4cc:	2405      	movs	r4, #5
    a4ce:	e7f6      	b.n	a4be <sd_mmc_init_write_blocks+0x3e>
    a4d0:	00009d3d 	.word	0x00009d3d
    a4d4:	00109119 	.word	0x00109119
    a4d8:	20000358 	.word	0x20000358
    a4dc:	0000aa71 	.word	0x0000aa71
    a4e0:	2000037c 	.word	0x2000037c
    a4e4:	2000037e 	.word	0x2000037e
    a4e8:	00089118 	.word	0x00089118
    a4ec:	00009e1d 	.word	0x00009e1d

0000a4f0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    a4f0:	b510      	push	{r4, lr}
    a4f2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    a4f4:	4b07      	ldr	r3, [pc, #28]	; (a514 <sd_mmc_start_write_blocks+0x24>)
    a4f6:	4798      	blx	r3
    a4f8:	2800      	cmp	r0, #0
    a4fa:	d104      	bne.n	a506 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    a4fc:	2200      	movs	r2, #0
    a4fe:	4b06      	ldr	r3, [pc, #24]	; (a518 <sd_mmc_start_write_blocks+0x28>)
    a500:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    a502:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    a504:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    a506:	4a04      	ldr	r2, [pc, #16]	; (a518 <sd_mmc_start_write_blocks+0x28>)
    a508:	8813      	ldrh	r3, [r2, #0]
    a50a:	1b1c      	subs	r4, r3, r4
    a50c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    a50e:	2000      	movs	r0, #0
    a510:	e7f8      	b.n	a504 <sd_mmc_start_write_blocks+0x14>
    a512:	46c0      	nop			; (mov r8, r8)
    a514:	0000ad2d 	.word	0x0000ad2d
    a518:	2000037c 	.word	0x2000037c

0000a51c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    a51c:	b510      	push	{r4, lr}
    a51e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    a520:	4b0e      	ldr	r3, [pc, #56]	; (a55c <sd_mmc_wait_end_of_write_blocks+0x40>)
    a522:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    a524:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    a526:	2800      	cmp	r0, #0
    a528:	d101      	bne.n	a52e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    a52a:	0018      	movs	r0, r3
    a52c:	bd10      	pop	{r4, pc}
	if (abort) {
    a52e:	2c00      	cmp	r4, #0
    a530:	d00a      	beq.n	a548 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    a532:	2200      	movs	r2, #0
    a534:	4b0a      	ldr	r3, [pc, #40]	; (a560 <sd_mmc_wait_end_of_write_blocks+0x44>)
    a536:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    a538:	4b0a      	ldr	r3, [pc, #40]	; (a564 <sd_mmc_wait_end_of_write_blocks+0x48>)
    a53a:	881b      	ldrh	r3, [r3, #0]
    a53c:	2b01      	cmp	r3, #1
    a53e:	d009      	beq.n	a554 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    a540:	4b09      	ldr	r3, [pc, #36]	; (a568 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    a542:	4798      	blx	r3
	return SD_MMC_OK;
    a544:	2300      	movs	r3, #0
    a546:	e7f0      	b.n	a52a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    a548:	4b05      	ldr	r3, [pc, #20]	; (a560 <sd_mmc_wait_end_of_write_blocks+0x44>)
    a54a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    a54c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    a54e:	2a00      	cmp	r2, #0
    a550:	d0f2      	beq.n	a538 <sd_mmc_wait_end_of_write_blocks+0x1c>
    a552:	e7ea      	b.n	a52a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    a554:	4b04      	ldr	r3, [pc, #16]	; (a568 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    a556:	4798      	blx	r3
		return SD_MMC_OK;
    a558:	2300      	movs	r3, #0
    a55a:	e7e6      	b.n	a52a <sd_mmc_wait_end_of_write_blocks+0xe>
    a55c:	0000adad 	.word	0x0000adad
    a560:	2000037c 	.word	0x2000037c
    a564:	2000037e 	.word	0x2000037e
    a568:	00009e1d 	.word	0x00009e1d

0000a56c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    a56c:	b510      	push	{r4, lr}
    a56e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    a570:	4b0f      	ldr	r3, [pc, #60]	; (a5b0 <sd_mmc_test_unit_ready+0x44>)
    a572:	4798      	blx	r3
    a574:	2801      	cmp	r0, #1
    a576:	d019      	beq.n	a5ac <sd_mmc_test_unit_ready+0x40>
    a578:	2800      	cmp	r0, #0
    a57a:	d003      	beq.n	a584 <sd_mmc_test_unit_ready+0x18>
    a57c:	2802      	cmp	r0, #2
    a57e:	d010      	beq.n	a5a2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    a580:	2001      	movs	r0, #1
	}
}
    a582:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    a584:	4b0b      	ldr	r3, [pc, #44]	; (a5b4 <sd_mmc_test_unit_ready+0x48>)
    a586:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    a588:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    a58a:	2b00      	cmp	r3, #0
    a58c:	d1f9      	bne.n	a582 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    a58e:	0020      	movs	r0, r4
    a590:	4b09      	ldr	r3, [pc, #36]	; (a5b8 <sd_mmc_test_unit_ready+0x4c>)
    a592:	4798      	blx	r3
    a594:	0003      	movs	r3, r0
    a596:	2003      	movs	r0, #3
    a598:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    a59a:	4243      	negs	r3, r0
    a59c:	4158      	adcs	r0, r3
    a59e:	0040      	lsls	r0, r0, #1
    a5a0:	e7ef      	b.n	a582 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    a5a2:	2200      	movs	r2, #0
    a5a4:	4b03      	ldr	r3, [pc, #12]	; (a5b4 <sd_mmc_test_unit_ready+0x48>)
    a5a6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    a5a8:	2002      	movs	r0, #2
    a5aa:	e7ea      	b.n	a582 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    a5ac:	2003      	movs	r0, #3
    a5ae:	e7e8      	b.n	a582 <sd_mmc_test_unit_ready+0x16>
    a5b0:	00009e59 	.word	0x00009e59
    a5b4:	20000384 	.word	0x20000384
    a5b8:	0000a309 	.word	0x0000a309

0000a5bc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    a5bc:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    a5be:	2000      	movs	r0, #0
    a5c0:	4b01      	ldr	r3, [pc, #4]	; (a5c8 <sd_mmc_test_unit_ready_0+0xc>)
    a5c2:	4798      	blx	r3
}
    a5c4:	bd10      	pop	{r4, pc}
    a5c6:	46c0      	nop			; (mov r8, r8)
    a5c8:	0000a56d 	.word	0x0000a56d

0000a5cc <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    a5cc:	b570      	push	{r4, r5, r6, lr}
    a5ce:	0004      	movs	r4, r0
    a5d0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    a5d2:	4b04      	ldr	r3, [pc, #16]	; (a5e4 <sd_mmc_read_capacity+0x18>)
    a5d4:	4798      	blx	r3
    a5d6:	0040      	lsls	r0, r0, #1
    a5d8:	3801      	subs	r0, #1
    a5da:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    a5dc:	0020      	movs	r0, r4
    a5de:	4b02      	ldr	r3, [pc, #8]	; (a5e8 <sd_mmc_read_capacity+0x1c>)
    a5e0:	4798      	blx	r3
}
    a5e2:	bd70      	pop	{r4, r5, r6, pc}
    a5e4:	0000a331 	.word	0x0000a331
    a5e8:	0000a56d 	.word	0x0000a56d

0000a5ec <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    a5ec:	b510      	push	{r4, lr}
    a5ee:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    a5f0:	2000      	movs	r0, #0
    a5f2:	4b01      	ldr	r3, [pc, #4]	; (a5f8 <sd_mmc_read_capacity_0+0xc>)
    a5f4:	4798      	blx	r3
}
    a5f6:	bd10      	pop	{r4, pc}
    a5f8:	0000a5cd 	.word	0x0000a5cd

0000a5fc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    a5fc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    a5fe:	2000      	movs	r0, #0
    a600:	4b01      	ldr	r3, [pc, #4]	; (a608 <sd_mmc_wr_protect_0+0xc>)
    a602:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    a604:	bd10      	pop	{r4, pc}
    a606:	46c0      	nop			; (mov r8, r8)
    a608:	0000a359 	.word	0x0000a359

0000a60c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    a60c:	b510      	push	{r4, lr}
    a60e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    a610:	2201      	movs	r2, #1
    a612:	4b0c      	ldr	r3, [pc, #48]	; (a644 <sd_mmc_mem_2_ram+0x38>)
    a614:	4798      	blx	r3
    a616:	2800      	cmp	r0, #0
    a618:	d004      	beq.n	a624 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    a61a:	3802      	subs	r0, #2
    a61c:	4243      	negs	r3, r0
    a61e:	4158      	adcs	r0, r3
    a620:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    a622:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    a624:	2101      	movs	r1, #1
    a626:	0020      	movs	r0, r4
    a628:	4b07      	ldr	r3, [pc, #28]	; (a648 <sd_mmc_mem_2_ram+0x3c>)
    a62a:	4798      	blx	r3
    a62c:	0003      	movs	r3, r0
		return CTRL_FAIL;
    a62e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    a630:	2b00      	cmp	r3, #0
    a632:	d1f6      	bne.n	a622 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    a634:	2000      	movs	r0, #0
    a636:	4b05      	ldr	r3, [pc, #20]	; (a64c <sd_mmc_mem_2_ram+0x40>)
    a638:	4798      	blx	r3
    a63a:	1e43      	subs	r3, r0, #1
    a63c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    a63e:	b2c0      	uxtb	r0, r0
    a640:	e7ef      	b.n	a622 <sd_mmc_mem_2_ram+0x16>
    a642:	46c0      	nop			; (mov r8, r8)
    a644:	0000a35d 	.word	0x0000a35d
    a648:	0000a3e5 	.word	0x0000a3e5
    a64c:	0000a411 	.word	0x0000a411

0000a650 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    a650:	b510      	push	{r4, lr}
    a652:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    a654:	0001      	movs	r1, r0
    a656:	2000      	movs	r0, #0
    a658:	4b01      	ldr	r3, [pc, #4]	; (a660 <sd_mmc_mem_2_ram_0+0x10>)
    a65a:	4798      	blx	r3
}
    a65c:	bd10      	pop	{r4, pc}
    a65e:	46c0      	nop			; (mov r8, r8)
    a660:	0000a60d 	.word	0x0000a60d

0000a664 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    a664:	b510      	push	{r4, lr}
    a666:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    a668:	2201      	movs	r2, #1
    a66a:	4b0c      	ldr	r3, [pc, #48]	; (a69c <sd_mmc_ram_2_mem+0x38>)
    a66c:	4798      	blx	r3
    a66e:	2800      	cmp	r0, #0
    a670:	d004      	beq.n	a67c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    a672:	3802      	subs	r0, #2
    a674:	4243      	negs	r3, r0
    a676:	4158      	adcs	r0, r3
    a678:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    a67a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    a67c:	2101      	movs	r1, #1
    a67e:	0020      	movs	r0, r4
    a680:	4b07      	ldr	r3, [pc, #28]	; (a6a0 <sd_mmc_ram_2_mem+0x3c>)
    a682:	4798      	blx	r3
    a684:	0003      	movs	r3, r0
		return CTRL_FAIL;
    a686:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    a688:	2b00      	cmp	r3, #0
    a68a:	d1f6      	bne.n	a67a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    a68c:	2000      	movs	r0, #0
    a68e:	4b05      	ldr	r3, [pc, #20]	; (a6a4 <sd_mmc_ram_2_mem+0x40>)
    a690:	4798      	blx	r3
    a692:	1e43      	subs	r3, r0, #1
    a694:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    a696:	b2c0      	uxtb	r0, r0
    a698:	e7ef      	b.n	a67a <sd_mmc_ram_2_mem+0x16>
    a69a:	46c0      	nop			; (mov r8, r8)
    a69c:	0000a481 	.word	0x0000a481
    a6a0:	0000a4f1 	.word	0x0000a4f1
    a6a4:	0000a51d 	.word	0x0000a51d

0000a6a8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    a6a8:	b510      	push	{r4, lr}
    a6aa:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    a6ac:	0001      	movs	r1, r0
    a6ae:	2000      	movs	r0, #0
    a6b0:	4b01      	ldr	r3, [pc, #4]	; (a6b8 <sd_mmc_ram_2_mem_0+0x10>)
    a6b2:	4798      	blx	r3
}
    a6b4:	bd10      	pop	{r4, pc}
    a6b6:	46c0      	nop			; (mov r8, r8)
    a6b8:	0000a665 	.word	0x0000a665

0000a6bc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    a6bc:	b500      	push	{lr}
    a6be:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    a6c0:	466b      	mov	r3, sp
    a6c2:	1dd9      	adds	r1, r3, #7
    a6c4:	23ff      	movs	r3, #255	; 0xff
    a6c6:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    a6c8:	2201      	movs	r2, #1
    a6ca:	480b      	ldr	r0, [pc, #44]	; (a6f8 <sd_mmc_spi_start_write_block+0x3c>)
    a6cc:	4b0b      	ldr	r3, [pc, #44]	; (a6fc <sd_mmc_spi_start_write_block+0x40>)
    a6ce:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    a6d0:	4b0b      	ldr	r3, [pc, #44]	; (a700 <sd_mmc_spi_start_write_block+0x44>)
    a6d2:	881b      	ldrh	r3, [r3, #0]
    a6d4:	2b01      	cmp	r3, #1
    a6d6:	d00a      	beq.n	a6ee <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    a6d8:	22fc      	movs	r2, #252	; 0xfc
    a6da:	466b      	mov	r3, sp
    a6dc:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    a6de:	2201      	movs	r2, #1
    a6e0:	466b      	mov	r3, sp
    a6e2:	1d99      	adds	r1, r3, #6
    a6e4:	4804      	ldr	r0, [pc, #16]	; (a6f8 <sd_mmc_spi_start_write_block+0x3c>)
    a6e6:	4b05      	ldr	r3, [pc, #20]	; (a6fc <sd_mmc_spi_start_write_block+0x40>)
    a6e8:	4798      	blx	r3
}
    a6ea:	b003      	add	sp, #12
    a6ec:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    a6ee:	22fe      	movs	r2, #254	; 0xfe
    a6f0:	466b      	mov	r3, sp
    a6f2:	719a      	strb	r2, [r3, #6]
    a6f4:	e7f3      	b.n	a6de <sd_mmc_spi_start_write_block+0x22>
    a6f6:	46c0      	nop			; (mov r8, r8)
    a6f8:	20000388 	.word	0x20000388
    a6fc:	0000f101 	.word	0x0000f101
    a700:	200003cc 	.word	0x200003cc

0000a704 <sd_mmc_spi_wait_busy>:
{
    a704:	b5f0      	push	{r4, r5, r6, r7, lr}
    a706:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    a708:	466b      	mov	r3, sp
    a70a:	1ddc      	adds	r4, r3, #7
    a70c:	23ff      	movs	r3, #255	; 0xff
    a70e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a710:	4e12      	ldr	r6, [pc, #72]	; (a75c <sd_mmc_spi_wait_busy+0x58>)
    a712:	2201      	movs	r2, #1
    a714:	0021      	movs	r1, r4
    a716:	0030      	movs	r0, r6
    a718:	4d11      	ldr	r5, [pc, #68]	; (a760 <sd_mmc_spi_wait_busy+0x5c>)
    a71a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a71c:	23ff      	movs	r3, #255	; 0xff
    a71e:	2201      	movs	r2, #1
    a720:	0021      	movs	r1, r4
    a722:	0030      	movs	r0, r6
    a724:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a726:	23ff      	movs	r3, #255	; 0xff
    a728:	2201      	movs	r2, #1
    a72a:	0021      	movs	r1, r4
    a72c:	0030      	movs	r0, r6
    a72e:	47a8      	blx	r5
    a730:	4c0c      	ldr	r4, [pc, #48]	; (a764 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    a732:	466b      	mov	r3, sp
    a734:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a736:	4e09      	ldr	r6, [pc, #36]	; (a75c <sd_mmc_spi_wait_busy+0x58>)
    a738:	4f09      	ldr	r7, [pc, #36]	; (a760 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    a73a:	782b      	ldrb	r3, [r5, #0]
    a73c:	2bff      	cmp	r3, #255	; 0xff
    a73e:	d009      	beq.n	a754 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    a740:	23ff      	movs	r3, #255	; 0xff
    a742:	2201      	movs	r2, #1
    a744:	0029      	movs	r1, r5
    a746:	0030      	movs	r0, r6
    a748:	47b8      	blx	r7
    a74a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    a74c:	2c00      	cmp	r4, #0
    a74e:	d1f4      	bne.n	a73a <sd_mmc_spi_wait_busy+0x36>
			return false;
    a750:	2000      	movs	r0, #0
    a752:	e000      	b.n	a756 <sd_mmc_spi_wait_busy+0x52>
	return true;
    a754:	2001      	movs	r0, #1
}
    a756:	b003      	add	sp, #12
    a758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a75a:	46c0      	nop			; (mov r8, r8)
    a75c:	20000388 	.word	0x20000388
    a760:	0000ef39 	.word	0x0000ef39
    a764:	00030d40 	.word	0x00030d40

0000a768 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    a768:	b570      	push	{r4, r5, r6, lr}
    a76a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    a76c:	4b14      	ldr	r3, [pc, #80]	; (a7c0 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    a76e:	881c      	ldrh	r4, [r3, #0]
    a770:	2c01      	cmp	r4, #1
    a772:	d023      	beq.n	a7bc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    a774:	4b13      	ldr	r3, [pc, #76]	; (a7c4 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    a776:	8819      	ldrh	r1, [r3, #0]
    a778:	4b13      	ldr	r3, [pc, #76]	; (a7c8 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    a77a:	6818      	ldr	r0, [r3, #0]
    a77c:	4b13      	ldr	r3, [pc, #76]	; (a7cc <sd_mmc_spi_stop_multiwrite_block+0x64>)
    a77e:	4798      	blx	r3
		return true; // It is not the End of multi write
    a780:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    a782:	4284      	cmp	r4, r0
    a784:	d902      	bls.n	a78c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    a786:	0018      	movs	r0, r3
    a788:	b002      	add	sp, #8
    a78a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    a78c:	466b      	mov	r3, sp
    a78e:	1ddc      	adds	r4, r3, #7
    a790:	23ff      	movs	r3, #255	; 0xff
    a792:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    a794:	4e0e      	ldr	r6, [pc, #56]	; (a7d0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    a796:	2201      	movs	r2, #1
    a798:	0021      	movs	r1, r4
    a79a:	0030      	movs	r0, r6
    a79c:	4d0d      	ldr	r5, [pc, #52]	; (a7d4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    a79e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    a7a0:	23fd      	movs	r3, #253	; 0xfd
    a7a2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    a7a4:	2201      	movs	r2, #1
    a7a6:	0021      	movs	r1, r4
    a7a8:	0030      	movs	r0, r6
    a7aa:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    a7ac:	4b0a      	ldr	r3, [pc, #40]	; (a7d8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    a7ae:	4798      	blx	r3
    a7b0:	1e03      	subs	r3, r0, #0
    a7b2:	d1e8      	bne.n	a786 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    a7b4:	2105      	movs	r1, #5
    a7b6:	4a09      	ldr	r2, [pc, #36]	; (a7dc <sd_mmc_spi_stop_multiwrite_block+0x74>)
    a7b8:	7011      	strb	r1, [r2, #0]
		return false;
    a7ba:	e7e4      	b.n	a786 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    a7bc:	2301      	movs	r3, #1
    a7be:	e7e2      	b.n	a786 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    a7c0:	200003cc 	.word	0x200003cc
    a7c4:	200003c4 	.word	0x200003c4
    a7c8:	200003d4 	.word	0x200003d4
    a7cc:	0001620d 	.word	0x0001620d
    a7d0:	20000388 	.word	0x20000388
    a7d4:	0000f101 	.word	0x0000f101
    a7d8:	0000a705 	.word	0x0000a705
    a7dc:	200003cb 	.word	0x200003cb

0000a7e0 <sd_mmc_spi_start_read_block>:
{
    a7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7e2:	b083      	sub	sp, #12
	token = 0;
    a7e4:	2200      	movs	r2, #0
    a7e6:	466b      	mov	r3, sp
    a7e8:	71da      	strb	r2, [r3, #7]
    a7ea:	4c14      	ldr	r4, [pc, #80]	; (a83c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    a7ec:	466b      	mov	r3, sp
    a7ee:	1ddd      	adds	r5, r3, #7
    a7f0:	4e13      	ldr	r6, [pc, #76]	; (a840 <sd_mmc_spi_start_read_block+0x60>)
    a7f2:	4f14      	ldr	r7, [pc, #80]	; (a844 <sd_mmc_spi_start_read_block+0x64>)
    a7f4:	23ff      	movs	r3, #255	; 0xff
    a7f6:	2201      	movs	r2, #1
    a7f8:	0029      	movs	r1, r5
    a7fa:	0030      	movs	r0, r6
    a7fc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    a7fe:	782b      	ldrb	r3, [r5, #0]
    a800:	220f      	movs	r2, #15
    a802:	0019      	movs	r1, r3
    a804:	4391      	bics	r1, r2
    a806:	1e0a      	subs	r2, r1, #0
    a808:	d009      	beq.n	a81e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    a80a:	2bfe      	cmp	r3, #254	; 0xfe
    a80c:	d013      	beq.n	a836 <sd_mmc_spi_start_read_block+0x56>
    a80e:	3c01      	subs	r4, #1
		if (i-- == 0) {
    a810:	2c00      	cmp	r4, #0
    a812:	d1ef      	bne.n	a7f4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    a814:	2204      	movs	r2, #4
    a816:	4b0c      	ldr	r3, [pc, #48]	; (a848 <sd_mmc_spi_start_read_block+0x68>)
    a818:	701a      	strb	r2, [r3, #0]
			return false;
    a81a:	2000      	movs	r0, #0
    a81c:	e00c      	b.n	a838 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    a81e:	075b      	lsls	r3, r3, #29
    a820:	d004      	beq.n	a82c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    a822:	3207      	adds	r2, #7
    a824:	4b08      	ldr	r3, [pc, #32]	; (a848 <sd_mmc_spi_start_read_block+0x68>)
    a826:	701a      	strb	r2, [r3, #0]
			return false;
    a828:	2000      	movs	r0, #0
    a82a:	e005      	b.n	a838 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    a82c:	220b      	movs	r2, #11
    a82e:	4b06      	ldr	r3, [pc, #24]	; (a848 <sd_mmc_spi_start_read_block+0x68>)
    a830:	701a      	strb	r2, [r3, #0]
			return false;
    a832:	2000      	movs	r0, #0
    a834:	e000      	b.n	a838 <sd_mmc_spi_start_read_block+0x58>
	return true;
    a836:	2001      	movs	r0, #1
}
    a838:	b003      	add	sp, #12
    a83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a83c:	0007a120 	.word	0x0007a120
    a840:	20000388 	.word	0x20000388
    a844:	0000ef39 	.word	0x0000ef39
    a848:	200003cb 	.word	0x200003cb

0000a84c <sd_mmc_spi_stop_write_block>:
{
    a84c:	b530      	push	{r4, r5, lr}
    a84e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    a850:	a901      	add	r1, sp, #4
    a852:	2301      	movs	r3, #1
    a854:	425b      	negs	r3, r3
    a856:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    a858:	4d14      	ldr	r5, [pc, #80]	; (a8ac <sd_mmc_spi_stop_write_block+0x60>)
    a85a:	2202      	movs	r2, #2
    a85c:	0028      	movs	r0, r5
    a85e:	4b14      	ldr	r3, [pc, #80]	; (a8b0 <sd_mmc_spi_stop_write_block+0x64>)
    a860:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    a862:	466b      	mov	r3, sp
    a864:	1ddc      	adds	r4, r3, #7
    a866:	23ff      	movs	r3, #255	; 0xff
    a868:	2201      	movs	r2, #1
    a86a:	0021      	movs	r1, r4
    a86c:	0028      	movs	r0, r5
    a86e:	4d11      	ldr	r5, [pc, #68]	; (a8b4 <sd_mmc_spi_stop_write_block+0x68>)
    a870:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    a872:	7822      	ldrb	r2, [r4, #0]
    a874:	2311      	movs	r3, #17
    a876:	4013      	ands	r3, r2
    a878:	2b01      	cmp	r3, #1
    a87a:	d005      	beq.n	a888 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    a87c:	2201      	movs	r2, #1
    a87e:	4b0e      	ldr	r3, [pc, #56]	; (a8b8 <sd_mmc_spi_stop_write_block+0x6c>)
    a880:	701a      	strb	r2, [r3, #0]
		return false;
    a882:	2000      	movs	r0, #0
}
    a884:	b003      	add	sp, #12
    a886:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    a888:	231e      	movs	r3, #30
    a88a:	401a      	ands	r2, r3
    a88c:	2a04      	cmp	r2, #4
    a88e:	d00b      	beq.n	a8a8 <sd_mmc_spi_stop_write_block+0x5c>
    a890:	2a0a      	cmp	r2, #10
    a892:	d104      	bne.n	a89e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    a894:	3a02      	subs	r2, #2
    a896:	4b08      	ldr	r3, [pc, #32]	; (a8b8 <sd_mmc_spi_stop_write_block+0x6c>)
    a898:	701a      	strb	r2, [r3, #0]
		return false;
    a89a:	2000      	movs	r0, #0
    a89c:	e7f2      	b.n	a884 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    a89e:	220a      	movs	r2, #10
    a8a0:	4b05      	ldr	r3, [pc, #20]	; (a8b8 <sd_mmc_spi_stop_write_block+0x6c>)
    a8a2:	701a      	strb	r2, [r3, #0]
		return false;
    a8a4:	2000      	movs	r0, #0
    a8a6:	e7ed      	b.n	a884 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    a8a8:	2001      	movs	r0, #1
    a8aa:	e7eb      	b.n	a884 <sd_mmc_spi_stop_write_block+0x38>
    a8ac:	20000388 	.word	0x20000388
    a8b0:	0000f101 	.word	0x0000f101
    a8b4:	0000ef39 	.word	0x0000ef39
    a8b8:	200003cb 	.word	0x200003cb

0000a8bc <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    a8bc:	b570      	push	{r4, r5, r6, lr}
    a8be:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a8c0:	2300      	movs	r3, #0
    a8c2:	4a2d      	ldr	r2, [pc, #180]	; (a978 <sd_mmc_spi_init+0xbc>)
    a8c4:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    a8c6:	ac02      	add	r4, sp, #8
    a8c8:	2501      	movs	r5, #1
    a8ca:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    a8cc:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    a8ce:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    a8d0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    a8d2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    a8d4:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    a8d6:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    a8d8:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    a8da:	2224      	movs	r2, #36	; 0x24
    a8dc:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    a8de:	3a18      	subs	r2, #24
    a8e0:	2100      	movs	r1, #0
    a8e2:	a808      	add	r0, sp, #32
    a8e4:	4b25      	ldr	r3, [pc, #148]	; (a97c <sd_mmc_spi_init+0xc0>)
    a8e6:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    a8e8:	2380      	movs	r3, #128	; 0x80
    a8ea:	025b      	lsls	r3, r3, #9
    a8ec:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    a8ee:	4b24      	ldr	r3, [pc, #144]	; (a980 <sd_mmc_spi_init+0xc4>)
    a8f0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    a8f2:	4b24      	ldr	r3, [pc, #144]	; (a984 <sd_mmc_spi_init+0xc8>)
    a8f4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    a8f6:	4b24      	ldr	r3, [pc, #144]	; (a988 <sd_mmc_spi_init+0xcc>)
    a8f8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    a8fa:	4b24      	ldr	r3, [pc, #144]	; (a98c <sd_mmc_spi_init+0xd0>)
    a8fc:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    a8fe:	4b24      	ldr	r3, [pc, #144]	; (a990 <sd_mmc_spi_init+0xd4>)
    a900:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    a902:	4e24      	ldr	r6, [pc, #144]	; (a994 <sd_mmc_spi_init+0xd8>)
    a904:	0022      	movs	r2, r4
    a906:	4924      	ldr	r1, [pc, #144]	; (a998 <sd_mmc_spi_init+0xdc>)
    a908:	0030      	movs	r0, r6
    a90a:	4b24      	ldr	r3, [pc, #144]	; (a99c <sd_mmc_spi_init+0xe0>)
    a90c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    a90e:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    a910:	0020      	movs	r0, r4
    a912:	4b23      	ldr	r3, [pc, #140]	; (a9a0 <sd_mmc_spi_init+0xe4>)
    a914:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a916:	231f      	movs	r3, #31
    a918:	4018      	ands	r0, r3
    a91a:	4085      	lsls	r5, r0
    a91c:	4b21      	ldr	r3, [pc, #132]	; (a9a4 <sd_mmc_spi_init+0xe8>)
    a91e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    a920:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    a922:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    a924:	2b00      	cmp	r3, #0
    a926:	d1fc      	bne.n	a922 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    a928:	6823      	ldr	r3, [r4, #0]
    a92a:	2202      	movs	r2, #2
    a92c:	4313      	orrs	r3, r2
    a92e:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    a930:	4a1d      	ldr	r2, [pc, #116]	; (a9a8 <sd_mmc_spi_init+0xec>)
    a932:	2300      	movs	r3, #0
    a934:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    a936:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    a938:	491c      	ldr	r1, [pc, #112]	; (a9ac <sd_mmc_spi_init+0xf0>)
    a93a:	7808      	ldrb	r0, [r1, #0]
    a93c:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    a93e:	4c1c      	ldr	r4, [pc, #112]	; (a9b0 <sd_mmc_spi_init+0xf4>)
    a940:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    a942:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    a944:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    a946:	a901      	add	r1, sp, #4
    a948:	2201      	movs	r2, #1
    a94a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    a94c:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    a94e:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    a950:	4b18      	ldr	r3, [pc, #96]	; (a9b4 <sd_mmc_spi_init+0xf8>)
    a952:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    a954:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    a956:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    a958:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    a95a:	2900      	cmp	r1, #0
    a95c:	d104      	bne.n	a968 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    a95e:	0953      	lsrs	r3, r2, #5
    a960:	01db      	lsls	r3, r3, #7
    a962:	4915      	ldr	r1, [pc, #84]	; (a9b8 <sd_mmc_spi_init+0xfc>)
    a964:	468c      	mov	ip, r1
    a966:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    a968:	211f      	movs	r1, #31
    a96a:	4011      	ands	r1, r2
    a96c:	2201      	movs	r2, #1
    a96e:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    a970:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    a972:	b010      	add	sp, #64	; 0x40
    a974:	bd70      	pop	{r4, r5, r6, pc}
    a976:	46c0      	nop			; (mov r8, r8)
    a978:	200003cb 	.word	0x200003cb
    a97c:	000165ff 	.word	0x000165ff
    a980:	00100002 	.word	0x00100002
    a984:	00110002 	.word	0x00110002
    a988:	00120002 	.word	0x00120002
    a98c:	00130002 	.word	0x00130002
    a990:	00061a80 	.word	0x00061a80
    a994:	20000388 	.word	0x20000388
    a998:	42000c00 	.word	0x42000c00
    a99c:	0000ed61 	.word	0x0000ed61
    a9a0:	0000ec19 	.word	0x0000ec19
    a9a4:	e000e100 	.word	0xe000e100
    a9a8:	200003d8 	.word	0x200003d8
    a9ac:	20000000 	.word	0x20000000
    a9b0:	200003c8 	.word	0x200003c8
    a9b4:	0000e605 	.word	0x0000e605
    a9b8:	41004400 	.word	0x41004400

0000a9bc <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9be:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    a9c0:	2200      	movs	r2, #0
    a9c2:	4b0d      	ldr	r3, [pc, #52]	; (a9f8 <sd_mmc_spi_select_device+0x3c>)
    a9c4:	701a      	strb	r2, [r3, #0]
    a9c6:	000c      	movs	r4, r1
    a9c8:	4b0c      	ldr	r3, [pc, #48]	; (a9fc <sd_mmc_spi_select_device+0x40>)
    a9ca:	4299      	cmp	r1, r3
    a9cc:	d900      	bls.n	a9d0 <sd_mmc_spi_select_device+0x14>
    a9ce:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    a9d0:	4d0b      	ldr	r5, [pc, #44]	; (aa00 <sd_mmc_spi_select_device+0x44>)
    a9d2:	4e0c      	ldr	r6, [pc, #48]	; (aa04 <sd_mmc_spi_select_device+0x48>)
    a9d4:	e001      	b.n	a9da <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    a9d6:	08e3      	lsrs	r3, r4, #3
    a9d8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    a9da:	0021      	movs	r1, r4
    a9dc:	0028      	movs	r0, r5
    a9de:	47b0      	blx	r6
    a9e0:	2817      	cmp	r0, #23
    a9e2:	d0f8      	beq.n	a9d6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    a9e4:	0079      	lsls	r1, r7, #1
    a9e6:	19cf      	adds	r7, r1, r7
    a9e8:	4907      	ldr	r1, [pc, #28]	; (aa08 <sd_mmc_spi_select_device+0x4c>)
    a9ea:	19c9      	adds	r1, r1, r7
    a9ec:	2201      	movs	r2, #1
    a9ee:	4804      	ldr	r0, [pc, #16]	; (aa00 <sd_mmc_spi_select_device+0x44>)
    a9f0:	4b06      	ldr	r3, [pc, #24]	; (aa0c <sd_mmc_spi_select_device+0x50>)
    a9f2:	4798      	blx	r3
}
    a9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a9f6:	46c0      	nop			; (mov r8, r8)
    a9f8:	200003cb 	.word	0x200003cb
    a9fc:	00989680 	.word	0x00989680
    aa00:	20000388 	.word	0x20000388
    aa04:	0000eca9 	.word	0x0000eca9
    aa08:	200003c8 	.word	0x200003c8
    aa0c:	0000f00d 	.word	0x0000f00d

0000aa10 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    aa10:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa12:	2200      	movs	r2, #0
    aa14:	4b04      	ldr	r3, [pc, #16]	; (aa28 <sd_mmc_spi_deselect_device+0x18>)
    aa16:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    aa18:	0041      	lsls	r1, r0, #1
    aa1a:	1808      	adds	r0, r1, r0
    aa1c:	4903      	ldr	r1, [pc, #12]	; (aa2c <sd_mmc_spi_deselect_device+0x1c>)
    aa1e:	1809      	adds	r1, r1, r0
    aa20:	4803      	ldr	r0, [pc, #12]	; (aa30 <sd_mmc_spi_deselect_device+0x20>)
    aa22:	4b04      	ldr	r3, [pc, #16]	; (aa34 <sd_mmc_spi_deselect_device+0x24>)
    aa24:	4798      	blx	r3
}
    aa26:	bd10      	pop	{r4, pc}
    aa28:	200003cb 	.word	0x200003cb
    aa2c:	200003c8 	.word	0x200003c8
    aa30:	20000388 	.word	0x20000388
    aa34:	0000f00d 	.word	0x0000f00d

0000aa38 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    aa38:	b570      	push	{r4, r5, r6, lr}
    aa3a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    aa3c:	22ff      	movs	r2, #255	; 0xff
    aa3e:	466b      	mov	r3, sp
    aa40:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa42:	2200      	movs	r2, #0
    aa44:	4b07      	ldr	r3, [pc, #28]	; (aa64 <sd_mmc_spi_send_clock+0x2c>)
    aa46:	701a      	strb	r2, [r3, #0]
    aa48:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    aa4a:	4e07      	ldr	r6, [pc, #28]	; (aa68 <sd_mmc_spi_send_clock+0x30>)
    aa4c:	4d07      	ldr	r5, [pc, #28]	; (aa6c <sd_mmc_spi_send_clock+0x34>)
    aa4e:	2201      	movs	r2, #1
    aa50:	466b      	mov	r3, sp
    aa52:	1dd9      	adds	r1, r3, #7
    aa54:	0030      	movs	r0, r6
    aa56:	47a8      	blx	r5
    aa58:	3c01      	subs	r4, #1
    aa5a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    aa5c:	2c00      	cmp	r4, #0
    aa5e:	d1f6      	bne.n	aa4e <sd_mmc_spi_send_clock+0x16>
	}
}
    aa60:	b002      	add	sp, #8
    aa62:	bd70      	pop	{r4, r5, r6, pc}
    aa64:	200003cb 	.word	0x200003cb
    aa68:	20000388 	.word	0x20000388
    aa6c:	0000f101 	.word	0x0000f101

0000aa70 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    aa70:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa72:	46c6      	mov	lr, r8
    aa74:	b500      	push	{lr}
    aa76:	b086      	sub	sp, #24
    aa78:	4680      	mov	r8, r0
    aa7a:	9200      	str	r2, [sp, #0]
    aa7c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    aa7e:	22ff      	movs	r2, #255	; 0xff
    aa80:	230f      	movs	r3, #15
    aa82:	a802      	add	r0, sp, #8
    aa84:	4684      	mov	ip, r0
    aa86:	4463      	add	r3, ip
    aa88:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    aa8a:	2200      	movs	r2, #0
    aa8c:	4b53      	ldr	r3, [pc, #332]	; (abdc <sd_mmc_spi_adtc_start+0x16c>)
    aa8e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    aa90:	ab04      	add	r3, sp, #16
    aa92:	323f      	adds	r2, #63	; 0x3f
    aa94:	4640      	mov	r0, r8
    aa96:	4002      	ands	r2, r0
    aa98:	2040      	movs	r0, #64	; 0x40
    aa9a:	4302      	orrs	r2, r0
    aa9c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    aa9e:	0e0a      	lsrs	r2, r1, #24
    aaa0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    aaa2:	0c0a      	lsrs	r2, r1, #16
    aaa4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    aaa6:	0a0a      	lsrs	r2, r1, #8
    aaa8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    aaaa:	7119      	strb	r1, [r3, #4]
    aaac:	2700      	movs	r7, #0
	crc = 0;
    aaae:	2300      	movs	r3, #0
		value = *buf++;
    aab0:	a904      	add	r1, sp, #16
    aab2:	2208      	movs	r2, #8
				crc ^= 0x09;
    aab4:	2409      	movs	r4, #9
    aab6:	e011      	b.n	aadc <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    aab8:	0076      	lsls	r6, r6, #1
    aaba:	b2f6      	uxtb	r6, r6
    aabc:	3801      	subs	r0, #1
    aabe:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    aac0:	2800      	cmp	r0, #0
    aac2:	d008      	beq.n	aad6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    aac4:	005b      	lsls	r3, r3, #1
    aac6:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    aac8:	001d      	movs	r5, r3
    aaca:	4075      	eors	r5, r6
    aacc:	062d      	lsls	r5, r5, #24
    aace:	d5f3      	bpl.n	aab8 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    aad0:	4063      	eors	r3, r4
    aad2:	b2db      	uxtb	r3, r3
    aad4:	e7f0      	b.n	aab8 <sd_mmc_spi_adtc_start+0x48>
    aad6:	3701      	adds	r7, #1
	while (size--) {
    aad8:	2f05      	cmp	r7, #5
    aada:	d002      	beq.n	aae2 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    aadc:	5c7e      	ldrb	r6, [r7, r1]
    aade:	0010      	movs	r0, r2
    aae0:	e7f0      	b.n	aac4 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    aae2:	005b      	lsls	r3, r3, #1
    aae4:	2201      	movs	r2, #1
    aae6:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    aae8:	ac04      	add	r4, sp, #16
    aaea:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    aaec:	4e3c      	ldr	r6, [pc, #240]	; (abe0 <sd_mmc_spi_adtc_start+0x170>)
    aaee:	2201      	movs	r2, #1
    aaf0:	210f      	movs	r1, #15
    aaf2:	ab02      	add	r3, sp, #8
    aaf4:	469c      	mov	ip, r3
    aaf6:	4461      	add	r1, ip
    aaf8:	0030      	movs	r0, r6
    aafa:	4f3a      	ldr	r7, [pc, #232]	; (abe4 <sd_mmc_spi_adtc_start+0x174>)
    aafc:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    aafe:	2206      	movs	r2, #6
    ab00:	0021      	movs	r1, r4
    ab02:	0030      	movs	r0, r6
    ab04:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    ab06:	ab02      	add	r3, sp, #8
    ab08:	1dd9      	adds	r1, r3, #7
    ab0a:	23ff      	movs	r3, #255	; 0xff
    ab0c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    ab0e:	2201      	movs	r2, #1
    ab10:	0030      	movs	r0, r6
    ab12:	4e35      	ldr	r6, [pc, #212]	; (abe8 <sd_mmc_spi_adtc_start+0x178>)
    ab14:	47b0      	blx	r6
    ab16:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    ab18:	ab02      	add	r3, sp, #8
    ab1a:	1dde      	adds	r6, r3, #7
    ab1c:	4f30      	ldr	r7, [pc, #192]	; (abe0 <sd_mmc_spi_adtc_start+0x170>)
    ab1e:	4d32      	ldr	r5, [pc, #200]	; (abe8 <sd_mmc_spi_adtc_start+0x178>)
    ab20:	23ff      	movs	r3, #255	; 0xff
    ab22:	2201      	movs	r2, #1
    ab24:	0031      	movs	r1, r6
    ab26:	0038      	movs	r0, r7
    ab28:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    ab2a:	7833      	ldrb	r3, [r6, #0]
    ab2c:	b25a      	sxtb	r2, r3
    ab2e:	2a00      	cmp	r2, #0
    ab30:	da0b      	bge.n	ab4a <sd_mmc_spi_adtc_start+0xda>
    ab32:	3c01      	subs	r4, #1
    ab34:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    ab36:	2c00      	cmp	r4, #0
    ab38:	d1f2      	bne.n	ab20 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    ab3a:	2202      	movs	r2, #2
    ab3c:	4b27      	ldr	r3, [pc, #156]	; (abdc <sd_mmc_spi_adtc_start+0x16c>)
    ab3e:	701a      	strb	r2, [r3, #0]
			return false;
    ab40:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    ab42:	b006      	add	sp, #24
    ab44:	bc04      	pop	{r2}
    ab46:	4690      	mov	r8, r2
    ab48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    ab4a:	4a28      	ldr	r2, [pc, #160]	; (abec <sd_mmc_spi_adtc_start+0x17c>)
    ab4c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    ab4e:	071a      	lsls	r2, r3, #28
    ab50:	d41a      	bmi.n	ab88 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    ab52:	075a      	lsls	r2, r3, #29
    ab54:	d41d      	bmi.n	ab92 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    ab56:	2201      	movs	r2, #1
    ab58:	4393      	bics	r3, r2
    ab5a:	d11f      	bne.n	ab9c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    ab5c:	4643      	mov	r3, r8
    ab5e:	049b      	lsls	r3, r3, #18
    ab60:	d420      	bmi.n	aba4 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    ab62:	4643      	mov	r3, r8
    ab64:	059b      	lsls	r3, r3, #22
    ab66:	d425      	bmi.n	abb4 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    ab68:	4643      	mov	r3, r8
    ab6a:	055b      	lsls	r3, r3, #21
    ab6c:	d42b      	bmi.n	abc6 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    ab6e:	4b20      	ldr	r3, [pc, #128]	; (abf0 <sd_mmc_spi_adtc_start+0x180>)
    ab70:	466a      	mov	r2, sp
    ab72:	8812      	ldrh	r2, [r2, #0]
    ab74:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    ab76:	4b1f      	ldr	r3, [pc, #124]	; (abf4 <sd_mmc_spi_adtc_start+0x184>)
    ab78:	466a      	mov	r2, sp
    ab7a:	8892      	ldrh	r2, [r2, #4]
    ab7c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    ab7e:	2200      	movs	r2, #0
    ab80:	4b1d      	ldr	r3, [pc, #116]	; (abf8 <sd_mmc_spi_adtc_start+0x188>)
    ab82:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    ab84:	2001      	movs	r0, #1
    ab86:	e7dc      	b.n	ab42 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    ab88:	2206      	movs	r2, #6
    ab8a:	4b14      	ldr	r3, [pc, #80]	; (abdc <sd_mmc_spi_adtc_start+0x16c>)
    ab8c:	701a      	strb	r2, [r3, #0]
		return false;
    ab8e:	2000      	movs	r0, #0
    ab90:	e7d7      	b.n	ab42 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    ab92:	2209      	movs	r2, #9
    ab94:	4b11      	ldr	r3, [pc, #68]	; (abdc <sd_mmc_spi_adtc_start+0x16c>)
    ab96:	701a      	strb	r2, [r3, #0]
		return false;
    ab98:	2000      	movs	r0, #0
    ab9a:	e7d2      	b.n	ab42 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    ab9c:	4b0f      	ldr	r3, [pc, #60]	; (abdc <sd_mmc_spi_adtc_start+0x16c>)
    ab9e:	701a      	strb	r2, [r3, #0]
		return false;
    aba0:	2000      	movs	r0, #0
    aba2:	e7ce      	b.n	ab42 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    aba4:	4b15      	ldr	r3, [pc, #84]	; (abfc <sd_mmc_spi_adtc_start+0x18c>)
    aba6:	4798      	blx	r3
    aba8:	2800      	cmp	r0, #0
    abaa:	d1da      	bne.n	ab62 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    abac:	2203      	movs	r2, #3
    abae:	4b0b      	ldr	r3, [pc, #44]	; (abdc <sd_mmc_spi_adtc_start+0x16c>)
    abb0:	701a      	strb	r2, [r3, #0]
			return false;
    abb2:	e7c6      	b.n	ab42 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    abb4:	490d      	ldr	r1, [pc, #52]	; (abec <sd_mmc_spi_adtc_start+0x17c>)
    abb6:	2300      	movs	r3, #0
    abb8:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    abba:	33ff      	adds	r3, #255	; 0xff
    abbc:	2201      	movs	r2, #1
    abbe:	4808      	ldr	r0, [pc, #32]	; (abe0 <sd_mmc_spi_adtc_start+0x170>)
    abc0:	4e09      	ldr	r6, [pc, #36]	; (abe8 <sd_mmc_spi_adtc_start+0x178>)
    abc2:	47b0      	blx	r6
    abc4:	e7d0      	b.n	ab68 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    abc6:	4e09      	ldr	r6, [pc, #36]	; (abec <sd_mmc_spi_adtc_start+0x17c>)
    abc8:	23ff      	movs	r3, #255	; 0xff
    abca:	2204      	movs	r2, #4
    abcc:	0031      	movs	r1, r6
    abce:	4804      	ldr	r0, [pc, #16]	; (abe0 <sd_mmc_spi_adtc_start+0x170>)
    abd0:	4f05      	ldr	r7, [pc, #20]	; (abe8 <sd_mmc_spi_adtc_start+0x178>)
    abd2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    abd4:	6833      	ldr	r3, [r6, #0]
    abd6:	ba1b      	rev	r3, r3
    abd8:	6033      	str	r3, [r6, #0]
    abda:	e7c8      	b.n	ab6e <sd_mmc_spi_adtc_start+0xfe>
    abdc:	200003cb 	.word	0x200003cb
    abe0:	20000388 	.word	0x20000388
    abe4:	0000f101 	.word	0x0000f101
    abe8:	0000ef39 	.word	0x0000ef39
    abec:	200003d0 	.word	0x200003d0
    abf0:	200003c4 	.word	0x200003c4
    abf4:	200003cc 	.word	0x200003cc
    abf8:	200003d4 	.word	0x200003d4
    abfc:	0000a705 	.word	0x0000a705

0000ac00 <sd_mmc_spi_send_cmd>:
{
    ac00:	b510      	push	{r4, lr}
    ac02:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    ac04:	2300      	movs	r3, #0
    ac06:	9300      	str	r3, [sp, #0]
    ac08:	2200      	movs	r2, #0
    ac0a:	4c02      	ldr	r4, [pc, #8]	; (ac14 <sd_mmc_spi_send_cmd+0x14>)
    ac0c:	47a0      	blx	r4
}
    ac0e:	b002      	add	sp, #8
    ac10:	bd10      	pop	{r4, pc}
    ac12:	46c0      	nop			; (mov r8, r8)
    ac14:	0000aa71 	.word	0x0000aa71

0000ac18 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    ac18:	4b01      	ldr	r3, [pc, #4]	; (ac20 <sd_mmc_spi_get_response+0x8>)
    ac1a:	6818      	ldr	r0, [r3, #0]
}
    ac1c:	4770      	bx	lr
    ac1e:	46c0      	nop			; (mov r8, r8)
    ac20:	200003d0 	.word	0x200003d0

0000ac24 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    ac24:	b510      	push	{r4, lr}
    ac26:	b084      	sub	sp, #16
    ac28:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ac2a:	2200      	movs	r2, #0
    ac2c:	4b14      	ldr	r3, [pc, #80]	; (ac80 <sd_mmc_spi_read_word+0x5c>)
    ac2e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ac30:	4b14      	ldr	r3, [pc, #80]	; (ac84 <sd_mmc_spi_read_word+0x60>)
    ac32:	8819      	ldrh	r1, [r3, #0]
    ac34:	4b14      	ldr	r3, [pc, #80]	; (ac88 <sd_mmc_spi_read_word+0x64>)
    ac36:	6818      	ldr	r0, [r3, #0]
    ac38:	4b14      	ldr	r3, [pc, #80]	; (ac8c <sd_mmc_spi_read_word+0x68>)
    ac3a:	4798      	blx	r3
    ac3c:	2900      	cmp	r1, #0
    ac3e:	d103      	bne.n	ac48 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    ac40:	4b13      	ldr	r3, [pc, #76]	; (ac90 <sd_mmc_spi_read_word+0x6c>)
    ac42:	4798      	blx	r3
    ac44:	2800      	cmp	r0, #0
    ac46:	d010      	beq.n	ac6a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    ac48:	23ff      	movs	r3, #255	; 0xff
    ac4a:	2204      	movs	r2, #4
    ac4c:	a901      	add	r1, sp, #4
    ac4e:	4811      	ldr	r0, [pc, #68]	; (ac94 <sd_mmc_spi_read_word+0x70>)
    ac50:	4c11      	ldr	r4, [pc, #68]	; (ac98 <sd_mmc_spi_read_word+0x74>)
    ac52:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    ac54:	4b0c      	ldr	r3, [pc, #48]	; (ac88 <sd_mmc_spi_read_word+0x64>)
    ac56:	681a      	ldr	r2, [r3, #0]
    ac58:	1d10      	adds	r0, r2, #4
    ac5a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ac5c:	4b09      	ldr	r3, [pc, #36]	; (ac84 <sd_mmc_spi_read_word+0x60>)
    ac5e:	8819      	ldrh	r1, [r3, #0]
    ac60:	4b0a      	ldr	r3, [pc, #40]	; (ac8c <sd_mmc_spi_read_word+0x68>)
    ac62:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    ac64:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    ac66:	2900      	cmp	r1, #0
    ac68:	d001      	beq.n	ac6e <sd_mmc_spi_read_word+0x4a>
}
    ac6a:	b004      	add	sp, #16
    ac6c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    ac6e:	23ff      	movs	r3, #255	; 0xff
    ac70:	2202      	movs	r2, #2
    ac72:	a903      	add	r1, sp, #12
    ac74:	4807      	ldr	r0, [pc, #28]	; (ac94 <sd_mmc_spi_read_word+0x70>)
    ac76:	4c08      	ldr	r4, [pc, #32]	; (ac98 <sd_mmc_spi_read_word+0x74>)
    ac78:	47a0      	blx	r4
	return true;
    ac7a:	2001      	movs	r0, #1
    ac7c:	e7f5      	b.n	ac6a <sd_mmc_spi_read_word+0x46>
    ac7e:	46c0      	nop			; (mov r8, r8)
    ac80:	200003cb 	.word	0x200003cb
    ac84:	200003c4 	.word	0x200003c4
    ac88:	200003d4 	.word	0x200003d4
    ac8c:	00016319 	.word	0x00016319
    ac90:	0000a7e1 	.word	0x0000a7e1
    ac94:	20000388 	.word	0x20000388
    ac98:	0000ef39 	.word	0x0000ef39

0000ac9c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    ac9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac9e:	46de      	mov	lr, fp
    aca0:	4657      	mov	r7, sl
    aca2:	4646      	mov	r6, r8
    aca4:	b5c0      	push	{r6, r7, lr}
    aca6:	b082      	sub	sp, #8
    aca8:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    acaa:	2200      	movs	r2, #0
    acac:	4b17      	ldr	r3, [pc, #92]	; (ad0c <sd_mmc_spi_start_read_blocks+0x70>)
    acae:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    acb0:	1e4c      	subs	r4, r1, #1
    acb2:	b2a4      	uxth	r4, r4
    acb4:	2900      	cmp	r1, #0
    acb6:	d026      	beq.n	ad06 <sd_mmc_spi_start_read_blocks+0x6a>
    acb8:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    acba:	4b15      	ldr	r3, [pc, #84]	; (ad10 <sd_mmc_spi_start_read_blocks+0x74>)
    acbc:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    acbe:	4f15      	ldr	r7, [pc, #84]	; (ad14 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    acc0:	47d0      	blx	sl
    acc2:	4680      	mov	r8, r0
    acc4:	2800      	cmp	r0, #0
    acc6:	d017      	beq.n	acf8 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    acc8:	883a      	ldrh	r2, [r7, #0]
    acca:	465b      	mov	r3, fp
    accc:	1999      	adds	r1, r3, r6
    acce:	23ff      	movs	r3, #255	; 0xff
    acd0:	4811      	ldr	r0, [pc, #68]	; (ad18 <sd_mmc_spi_start_read_blocks+0x7c>)
    acd2:	4d12      	ldr	r5, [pc, #72]	; (ad1c <sd_mmc_spi_start_read_blocks+0x80>)
    acd4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    acd6:	883b      	ldrh	r3, [r7, #0]
    acd8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    acda:	4a11      	ldr	r2, [pc, #68]	; (ad20 <sd_mmc_spi_start_read_blocks+0x84>)
    acdc:	6811      	ldr	r1, [r2, #0]
    acde:	468c      	mov	ip, r1
    ace0:	4463      	add	r3, ip
    ace2:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    ace4:	23ff      	movs	r3, #255	; 0xff
    ace6:	2202      	movs	r2, #2
    ace8:	a901      	add	r1, sp, #4
    acea:	480b      	ldr	r0, [pc, #44]	; (ad18 <sd_mmc_spi_start_read_blocks+0x7c>)
    acec:	47a8      	blx	r5
	while (nb_block--) {
    acee:	3c01      	subs	r4, #1
    acf0:	b2a4      	uxth	r4, r4
    acf2:	4b0c      	ldr	r3, [pc, #48]	; (ad24 <sd_mmc_spi_start_read_blocks+0x88>)
    acf4:	429c      	cmp	r4, r3
    acf6:	d1e3      	bne.n	acc0 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    acf8:	4640      	mov	r0, r8
    acfa:	b002      	add	sp, #8
    acfc:	bc1c      	pop	{r2, r3, r4}
    acfe:	4690      	mov	r8, r2
    ad00:	469a      	mov	sl, r3
    ad02:	46a3      	mov	fp, r4
    ad04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    ad06:	2301      	movs	r3, #1
    ad08:	4698      	mov	r8, r3
    ad0a:	e7f5      	b.n	acf8 <sd_mmc_spi_start_read_blocks+0x5c>
    ad0c:	200003cb 	.word	0x200003cb
    ad10:	0000a7e1 	.word	0x0000a7e1
    ad14:	200003c4 	.word	0x200003c4
    ad18:	20000388 	.word	0x20000388
    ad1c:	0000ef39 	.word	0x0000ef39
    ad20:	200003d4 	.word	0x200003d4
    ad24:	0000ffff 	.word	0x0000ffff

0000ad28 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    ad28:	2001      	movs	r0, #1
    ad2a:	4770      	bx	lr

0000ad2c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    ad2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad2e:	46c6      	mov	lr, r8
    ad30:	b500      	push	{lr}
    ad32:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    ad34:	2200      	movs	r2, #0
    ad36:	4b15      	ldr	r3, [pc, #84]	; (ad8c <sd_mmc_spi_start_write_blocks+0x60>)
    ad38:	701a      	strb	r2, [r3, #0]
	pos = 0;
    ad3a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    ad3c:	4f14      	ldr	r7, [pc, #80]	; (ad90 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    ad3e:	4e15      	ldr	r6, [pc, #84]	; (ad94 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    ad40:	e000      	b.n	ad44 <sd_mmc_spi_start_write_blocks+0x18>
{
    ad42:	0021      	movs	r1, r4
	while (nb_block--) {
    ad44:	1e4c      	subs	r4, r1, #1
    ad46:	b2a4      	uxth	r4, r4
    ad48:	2900      	cmp	r1, #0
    ad4a:	d01b      	beq.n	ad84 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    ad4c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    ad4e:	8832      	ldrh	r2, [r6, #0]
    ad50:	4643      	mov	r3, r8
    ad52:	1959      	adds	r1, r3, r5
    ad54:	4810      	ldr	r0, [pc, #64]	; (ad98 <sd_mmc_spi_start_write_blocks+0x6c>)
    ad56:	4b11      	ldr	r3, [pc, #68]	; (ad9c <sd_mmc_spi_start_write_blocks+0x70>)
    ad58:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    ad5a:	8833      	ldrh	r3, [r6, #0]
    ad5c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    ad5e:	4a10      	ldr	r2, [pc, #64]	; (ada0 <sd_mmc_spi_start_write_blocks+0x74>)
    ad60:	6811      	ldr	r1, [r2, #0]
    ad62:	468c      	mov	ip, r1
    ad64:	4463      	add	r3, ip
    ad66:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    ad68:	4b0e      	ldr	r3, [pc, #56]	; (ada4 <sd_mmc_spi_start_write_blocks+0x78>)
    ad6a:	4798      	blx	r3
    ad6c:	2800      	cmp	r0, #0
    ad6e:	d00a      	beq.n	ad86 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    ad70:	2c00      	cmp	r4, #0
    ad72:	d0e6      	beq.n	ad42 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    ad74:	4b0c      	ldr	r3, [pc, #48]	; (ada8 <sd_mmc_spi_start_write_blocks+0x7c>)
    ad76:	4798      	blx	r3
    ad78:	2800      	cmp	r0, #0
    ad7a:	d1e2      	bne.n	ad42 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    ad7c:	2205      	movs	r2, #5
    ad7e:	4b03      	ldr	r3, [pc, #12]	; (ad8c <sd_mmc_spi_start_write_blocks+0x60>)
    ad80:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    ad82:	e000      	b.n	ad86 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    ad84:	2001      	movs	r0, #1
}
    ad86:	bc04      	pop	{r2}
    ad88:	4690      	mov	r8, r2
    ad8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad8c:	200003cb 	.word	0x200003cb
    ad90:	0000a6bd 	.word	0x0000a6bd
    ad94:	200003c4 	.word	0x200003c4
    ad98:	20000388 	.word	0x20000388
    ad9c:	0000f101 	.word	0x0000f101
    ada0:	200003d4 	.word	0x200003d4
    ada4:	0000a84d 	.word	0x0000a84d
    ada8:	0000a705 	.word	0x0000a705

0000adac <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    adac:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    adae:	4b05      	ldr	r3, [pc, #20]	; (adc4 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    adb0:	4798      	blx	r3
    adb2:	2800      	cmp	r0, #0
    adb4:	d103      	bne.n	adbe <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    adb6:	2205      	movs	r2, #5
    adb8:	4b03      	ldr	r3, [pc, #12]	; (adc8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    adba:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    adbc:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    adbe:	4b03      	ldr	r3, [pc, #12]	; (adcc <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    adc0:	4798      	blx	r3
    adc2:	e7fb      	b.n	adbc <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    adc4:	0000a705 	.word	0x0000a705
    adc8:	200003cb 	.word	0x200003cb
    adcc:	0000a769 	.word	0x0000a769

0000add0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    add0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    add2:	2000      	movs	r0, #0
    add4:	4b08      	ldr	r3, [pc, #32]	; (adf8 <delay_init+0x28>)
    add6:	4798      	blx	r3
    add8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    adda:	4c08      	ldr	r4, [pc, #32]	; (adfc <delay_init+0x2c>)
    addc:	21fa      	movs	r1, #250	; 0xfa
    adde:	0089      	lsls	r1, r1, #2
    ade0:	47a0      	blx	r4
    ade2:	4b07      	ldr	r3, [pc, #28]	; (ae00 <delay_init+0x30>)
    ade4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    ade6:	4907      	ldr	r1, [pc, #28]	; (ae04 <delay_init+0x34>)
    ade8:	0028      	movs	r0, r5
    adea:	47a0      	blx	r4
    adec:	4b06      	ldr	r3, [pc, #24]	; (ae08 <delay_init+0x38>)
    adee:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    adf0:	2205      	movs	r2, #5
    adf2:	4b06      	ldr	r3, [pc, #24]	; (ae0c <delay_init+0x3c>)
    adf4:	601a      	str	r2, [r3, #0]
}
    adf6:	bd70      	pop	{r4, r5, r6, pc}
    adf8:	0000fe41 	.word	0x0000fe41
    adfc:	0001620d 	.word	0x0001620d
    ae00:	20000004 	.word	0x20000004
    ae04:	000f4240 	.word	0x000f4240
    ae08:	20000008 	.word	0x20000008
    ae0c:	e000e010 	.word	0xe000e010

0000ae10 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    ae10:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    ae12:	4b08      	ldr	r3, [pc, #32]	; (ae34 <delay_cycles_ms+0x24>)
    ae14:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    ae16:	4a08      	ldr	r2, [pc, #32]	; (ae38 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    ae18:	2500      	movs	r5, #0

			while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    ae1a:	2180      	movs	r1, #128	; 0x80
    ae1c:	0249      	lsls	r1, r1, #9
	while (n--) {
    ae1e:	3801      	subs	r0, #1
    ae20:	d307      	bcc.n	ae32 <delay_cycles_ms+0x22>
	if (n > 0) {
    ae22:	2c00      	cmp	r4, #0
    ae24:	d0fb      	beq.n	ae1e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    ae26:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    ae28:	6095      	str	r5, [r2, #8]
			while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    ae2a:	6813      	ldr	r3, [r2, #0]
    ae2c:	420b      	tst	r3, r1
    ae2e:	d0fc      	beq.n	ae2a <delay_cycles_ms+0x1a>
    ae30:	e7f5      	b.n	ae1e <delay_cycles_ms+0xe>
	}
}
    ae32:	bd30      	pop	{r4, r5, pc}
    ae34:	20000004 	.word	0x20000004
    ae38:	e000e010 	.word	0xe000e010

0000ae3c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    ae3c:	b510      	push	{r4, lr}
	if (gpfIsr) {
    ae3e:	4b03      	ldr	r3, [pc, #12]	; (ae4c <chip_isr+0x10>)
    ae40:	681b      	ldr	r3, [r3, #0]
    ae42:	2b00      	cmp	r3, #0
    ae44:	d000      	beq.n	ae48 <chip_isr+0xc>
		gpfIsr();
    ae46:	4798      	blx	r3
	}
}
    ae48:	bd10      	pop	{r4, pc}
    ae4a:	46c0      	nop			; (mov r8, r8)
    ae4c:	200003dc 	.word	0x200003dc

0000ae50 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    ae50:	b570      	push	{r4, r5, r6, lr}
    ae52:	b082      	sub	sp, #8
	gpfIsr = NULL;
    ae54:	2300      	movs	r3, #0
    ae56:	4a15      	ldr	r2, [pc, #84]	; (aeac <nm_bsp_init+0x5c>)
    ae58:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    ae5a:	ac01      	add	r4, sp, #4
    ae5c:	2501      	movs	r5, #1
    ae5e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    ae60:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    ae62:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    ae64:	0021      	movs	r1, r4
    ae66:	201b      	movs	r0, #27
    ae68:	4e11      	ldr	r6, [pc, #68]	; (aeb0 <nm_bsp_init+0x60>)
    ae6a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    ae6c:	0021      	movs	r1, r4
    ae6e:	201c      	movs	r0, #28
    ae70:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    ae72:	0021      	movs	r1, r4
    ae74:	2028      	movs	r0, #40	; 0x28
    ae76:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    ae78:	4b0e      	ldr	r3, [pc, #56]	; (aeb4 <nm_bsp_init+0x64>)
    ae7a:	2280      	movs	r2, #128	; 0x80
    ae7c:	0552      	lsls	r2, r2, #21
    ae7e:	615a      	str	r2, [r3, #20]
    ae80:	2280      	movs	r2, #128	; 0x80
    ae82:	0512      	lsls	r2, r2, #20
    ae84:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    ae86:	4b0c      	ldr	r3, [pc, #48]	; (aeb8 <nm_bsp_init+0x68>)
    ae88:	681b      	ldr	r3, [r3, #0]
    ae8a:	421d      	tst	r5, r3
    ae8c:	d003      	beq.n	ae96 <nm_bsp_init+0x46>
    ae8e:	4b0a      	ldr	r3, [pc, #40]	; (aeb8 <nm_bsp_init+0x68>)
    ae90:	681b      	ldr	r3, [r3, #0]
    ae92:	079b      	lsls	r3, r3, #30
    ae94:	d401      	bmi.n	ae9a <nm_bsp_init+0x4a>
	    delay_init();
    ae96:	4b09      	ldr	r3, [pc, #36]	; (aebc <nm_bsp_init+0x6c>)
    ae98:	4798      	blx	r3
	cpu_irq_enable();
    ae9a:	2201      	movs	r2, #1
    ae9c:	4b08      	ldr	r3, [pc, #32]	; (aec0 <nm_bsp_init+0x70>)
    ae9e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    aea0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    aea4:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    aea6:	2000      	movs	r0, #0
    aea8:	b002      	add	sp, #8
    aeaa:	bd70      	pop	{r4, r5, r6, pc}
    aeac:	200003dc 	.word	0x200003dc
    aeb0:	0000e605 	.word	0x0000e605
    aeb4:	41004400 	.word	0x41004400
    aeb8:	e000e010 	.word	0xe000e010
    aebc:	0000add1 	.word	0x0000add1
    aec0:	2000000e 	.word	0x2000000e

0000aec4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    aec4:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    aec6:	1e44      	subs	r4, r0, #1
    aec8:	2800      	cmp	r0, #0
    aeca:	d004      	beq.n	aed6 <nm_bsp_sleep+0x12>
		delay_ms(1);
    aecc:	4d02      	ldr	r5, [pc, #8]	; (aed8 <nm_bsp_sleep+0x14>)
    aece:	2001      	movs	r0, #1
    aed0:	47a8      	blx	r5
	while (u32TimeMsec--) {
    aed2:	3c01      	subs	r4, #1
    aed4:	d2fb      	bcs.n	aece <nm_bsp_sleep+0xa>
	}
}
    aed6:	bd70      	pop	{r4, r5, r6, pc}
    aed8:	0000ae11 	.word	0x0000ae11

0000aedc <nm_bsp_reset>:
{
    aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aede:	4c07      	ldr	r4, [pc, #28]	; (aefc <nm_bsp_reset+0x20>)
    aee0:	2780      	movs	r7, #128	; 0x80
    aee2:	057f      	lsls	r7, r7, #21
    aee4:	6167      	str	r7, [r4, #20]
    aee6:	2580      	movs	r5, #128	; 0x80
    aee8:	052d      	lsls	r5, r5, #20
    aeea:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    aeec:	2001      	movs	r0, #1
    aeee:	4e04      	ldr	r6, [pc, #16]	; (af00 <nm_bsp_reset+0x24>)
    aef0:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    aef2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    aef4:	200a      	movs	r0, #10
    aef6:	47b0      	blx	r6
    aef8:	61a5      	str	r5, [r4, #24]
}
    aefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aefc:	41004400 	.word	0x41004400
    af00:	0000aec5 	.word	0x0000aec5

0000af04 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    af04:	b510      	push	{r4, lr}
    af06:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    af08:	4b0e      	ldr	r3, [pc, #56]	; (af44 <nm_bsp_register_isr+0x40>)
    af0a:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    af0c:	ac01      	add	r4, sp, #4
    af0e:	0020      	movs	r0, r4
    af10:	4b0d      	ldr	r3, [pc, #52]	; (af48 <nm_bsp_register_isr+0x44>)
    af12:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    af14:	2329      	movs	r3, #41	; 0x29
    af16:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    af18:	2300      	movs	r3, #0
    af1a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    af1c:	3301      	adds	r3, #1
    af1e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    af20:	3301      	adds	r3, #1
    af22:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    af24:	0021      	movs	r1, r4
    af26:	2009      	movs	r0, #9
    af28:	4b08      	ldr	r3, [pc, #32]	; (af4c <nm_bsp_register_isr+0x48>)
    af2a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    af2c:	2200      	movs	r2, #0
    af2e:	2109      	movs	r1, #9
    af30:	4807      	ldr	r0, [pc, #28]	; (af50 <nm_bsp_register_isr+0x4c>)
    af32:	4b08      	ldr	r3, [pc, #32]	; (af54 <nm_bsp_register_isr+0x50>)
    af34:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    af36:	2100      	movs	r1, #0
    af38:	2009      	movs	r0, #9
    af3a:	4b07      	ldr	r3, [pc, #28]	; (af58 <nm_bsp_register_isr+0x54>)
    af3c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    af3e:	b004      	add	sp, #16
    af40:	bd10      	pop	{r4, pc}
    af42:	46c0      	nop			; (mov r8, r8)
    af44:	200003dc 	.word	0x200003dc
    af48:	0000e34d 	.word	0x0000e34d
    af4c:	0000e361 	.word	0x0000e361
    af50:	0000ae3d 	.word	0x0000ae3d
    af54:	0000e209 	.word	0x0000e209
    af58:	0000e235 	.word	0x0000e235

0000af5c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    af5c:	b510      	push	{r4, lr}
	if (u8Enable) {
    af5e:	2800      	cmp	r0, #0
    af60:	d104      	bne.n	af6c <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    af62:	2100      	movs	r1, #0
    af64:	2009      	movs	r0, #9
    af66:	4b04      	ldr	r3, [pc, #16]	; (af78 <nm_bsp_interrupt_ctrl+0x1c>)
    af68:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    af6a:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    af6c:	2100      	movs	r1, #0
    af6e:	2009      	movs	r0, #9
    af70:	4b02      	ldr	r3, [pc, #8]	; (af7c <nm_bsp_interrupt_ctrl+0x20>)
    af72:	4798      	blx	r3
    af74:	e7f9      	b.n	af6a <nm_bsp_interrupt_ctrl+0xe>
    af76:	46c0      	nop			; (mov r8, r8)
    af78:	0000e255 	.word	0x0000e255
    af7c:	0000e235 	.word	0x0000e235

0000af80 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    af80:	b530      	push	{r4, r5, lr}
    af82:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    af84:	4c30      	ldr	r4, [pc, #192]	; (b048 <nm_bus_init+0xc8>)
    af86:	230e      	movs	r3, #14
    af88:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    af8a:	2300      	movs	r3, #0
    af8c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    af8e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    af90:	a901      	add	r1, sp, #4
    af92:	2201      	movs	r2, #1
    af94:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    af96:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    af98:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    af9a:	200e      	movs	r0, #14
    af9c:	4b2b      	ldr	r3, [pc, #172]	; (b04c <nm_bus_init+0xcc>)
    af9e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    afa0:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    afa2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    afa4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    afa6:	2900      	cmp	r1, #0
    afa8:	d104      	bne.n	afb4 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    afaa:	0953      	lsrs	r3, r2, #5
    afac:	01db      	lsls	r3, r3, #7
    afae:	4928      	ldr	r1, [pc, #160]	; (b050 <nm_bus_init+0xd0>)
    afb0:	468c      	mov	ip, r1
    afb2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    afb4:	211f      	movs	r1, #31
    afb6:	4011      	ands	r1, r2
    afb8:	2201      	movs	r2, #1
    afba:	0010      	movs	r0, r2
    afbc:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    afbe:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    afc0:	ac02      	add	r4, sp, #8
    afc2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    afc4:	2300      	movs	r3, #0
    afc6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    afc8:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    afca:	21c0      	movs	r1, #192	; 0xc0
    afcc:	0389      	lsls	r1, r1, #14
    afce:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    afd0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    afd2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    afd4:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    afd6:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    afd8:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    afda:	3223      	adds	r2, #35	; 0x23
    afdc:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    afde:	3a18      	subs	r2, #24
    afe0:	2100      	movs	r1, #0
    afe2:	a808      	add	r0, sp, #32
    afe4:	4b1b      	ldr	r3, [pc, #108]	; (b054 <nm_bus_init+0xd4>)
    afe6:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    afe8:	4b1b      	ldr	r3, [pc, #108]	; (b058 <nm_bus_init+0xd8>)
    afea:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    afec:	4b1b      	ldr	r3, [pc, #108]	; (b05c <nm_bus_init+0xdc>)
    afee:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    aff0:	2301      	movs	r3, #1
    aff2:	425b      	negs	r3, r3
    aff4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    aff6:	4b1a      	ldr	r3, [pc, #104]	; (b060 <nm_bus_init+0xe0>)
    aff8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    affa:	4b1a      	ldr	r3, [pc, #104]	; (b064 <nm_bus_init+0xe4>)
    affc:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    affe:	0022      	movs	r2, r4
    b000:	4919      	ldr	r1, [pc, #100]	; (b068 <nm_bus_init+0xe8>)
    b002:	481a      	ldr	r0, [pc, #104]	; (b06c <nm_bus_init+0xec>)
    b004:	4b1a      	ldr	r3, [pc, #104]	; (b070 <nm_bus_init+0xf0>)
    b006:	4798      	blx	r3
    b008:	2800      	cmp	r0, #0
    b00a:	d11a      	bne.n	b042 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    b00c:	4d17      	ldr	r5, [pc, #92]	; (b06c <nm_bus_init+0xec>)
    b00e:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b010:	0020      	movs	r0, r4
    b012:	4b18      	ldr	r3, [pc, #96]	; (b074 <nm_bus_init+0xf4>)
    b014:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b016:	231f      	movs	r3, #31
    b018:	4018      	ands	r0, r3
    b01a:	3b1e      	subs	r3, #30
    b01c:	4083      	lsls	r3, r0
    b01e:	4a16      	ldr	r2, [pc, #88]	; (b078 <nm_bus_init+0xf8>)
    b020:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b022:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    b024:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b026:	2b00      	cmp	r3, #0
    b028:	d1fc      	bne.n	b024 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    b02a:	6823      	ldr	r3, [r4, #0]
    b02c:	2202      	movs	r2, #2
    b02e:	4313      	orrs	r3, r2
    b030:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    b032:	4b12      	ldr	r3, [pc, #72]	; (b07c <nm_bus_init+0xfc>)
    b034:	4798      	blx	r3
	nm_bsp_sleep(1);
    b036:	2001      	movs	r0, #1
    b038:	4b11      	ldr	r3, [pc, #68]	; (b080 <nm_bus_init+0x100>)
    b03a:	4798      	blx	r3
#endif
	return result;
    b03c:	2000      	movs	r0, #0
}
    b03e:	b011      	add	sp, #68	; 0x44
    b040:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    b042:	2006      	movs	r0, #6
    b044:	4240      	negs	r0, r0
    b046:	e7fa      	b.n	b03e <nm_bus_init+0xbe>
    b048:	20000f60 	.word	0x20000f60
    b04c:	0000e605 	.word	0x0000e605
    b050:	41004400 	.word	0x41004400
    b054:	000165ff 	.word	0x000165ff
    b058:	000c0002 	.word	0x000c0002
    b05c:	000d0002 	.word	0x000d0002
    b060:	000f0002 	.word	0x000f0002
    b064:	00b71b00 	.word	0x00b71b00
    b068:	42001000 	.word	0x42001000
    b06c:	20000f64 	.word	0x20000f64
    b070:	0000ed61 	.word	0x0000ed61
    b074:	0000ec19 	.word	0x0000ec19
    b078:	e000e100 	.word	0xe000e100
    b07c:	0000aedd 	.word	0x0000aedd
    b080:	0000aec5 	.word	0x0000aec5

0000b084 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    b084:	b5f0      	push	{r4, r5, r6, r7, lr}
    b086:	46de      	mov	lr, fp
    b088:	4657      	mov	r7, sl
    b08a:	464e      	mov	r6, r9
    b08c:	4645      	mov	r5, r8
    b08e:	b5e0      	push	{r5, r6, r7, lr}
    b090:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    b092:	2803      	cmp	r0, #3
    b094:	d000      	beq.n	b098 <nm_bus_ioctl+0x14>
    b096:	e075      	b.n	b184 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    b098:	680e      	ldr	r6, [r1, #0]
    b09a:	684d      	ldr	r5, [r1, #4]
    b09c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    b09e:	2200      	movs	r2, #0
    b0a0:	466b      	mov	r3, sp
    b0a2:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    b0a4:	2d00      	cmp	r5, #0
    b0a6:	d027      	beq.n	b0f8 <nm_bus_ioctl+0x74>
    b0a8:	2c00      	cmp	r4, #0
    b0aa:	d065      	beq.n	b178 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    b0ac:	2e00      	cmp	r6, #0
    b0ae:	d100      	bne.n	b0b2 <nm_bus_ioctl+0x2e>
    b0b0:	e077      	b.n	b1a2 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    b0b2:	2300      	movs	r3, #0
    b0b4:	4698      	mov	r8, r3
    b0b6:	2300      	movs	r3, #0
    b0b8:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    b0ba:	2201      	movs	r2, #1
    b0bc:	493b      	ldr	r1, [pc, #236]	; (b1ac <nm_bus_ioctl+0x128>)
    b0be:	483c      	ldr	r0, [pc, #240]	; (b1b0 <nm_bus_ioctl+0x12c>)
    b0c0:	4b3c      	ldr	r3, [pc, #240]	; (b1b4 <nm_bus_ioctl+0x130>)
    b0c2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    b0c4:	4b3a      	ldr	r3, [pc, #232]	; (b1b0 <nm_bus_ioctl+0x12c>)
    b0c6:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    b0c8:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    b0ca:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    b0cc:	4699      	mov	r9, r3
			pu8Miso++;
    b0ce:	4659      	mov	r1, fp
    b0d0:	424b      	negs	r3, r1
    b0d2:	4159      	adcs	r1, r3
    b0d4:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    b0d6:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b0d8:	4653      	mov	r3, sl
    b0da:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    b0dc:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    b0de:	4239      	tst	r1, r7
    b0e0:	d0fc      	beq.n	b0dc <nm_bus_ioctl+0x58>
    b0e2:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    b0e4:	4239      	tst	r1, r7
    b0e6:	d0fc      	beq.n	b0e2 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    b0e8:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    b0ea:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    b0ec:	4211      	tst	r1, r2
    b0ee:	d0fc      	beq.n	b0ea <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    b0f0:	4649      	mov	r1, r9
    b0f2:	7989      	ldrb	r1, [r1, #6]
    b0f4:	468c      	mov	ip, r1
    b0f6:	e011      	b.n	b11c <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    b0f8:	2e00      	cmp	r6, #0
    b0fa:	d03a      	beq.n	b172 <nm_bus_ioctl+0xee>
    b0fc:	2c00      	cmp	r4, #0
    b0fe:	d03e      	beq.n	b17e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    b100:	2300      	movs	r3, #0
    b102:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    b104:	3301      	adds	r3, #1
    b106:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    b108:	466b      	mov	r3, sp
    b10a:	1ddd      	adds	r5, r3, #7
    b10c:	e7d5      	b.n	b0ba <nm_bus_ioctl+0x36>
    b10e:	4660      	mov	r0, ip
    b110:	2801      	cmp	r0, #1
    b112:	d00d      	beq.n	b130 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    b114:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b116:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    b118:	2900      	cmp	r1, #0
    b11a:	d00d      	beq.n	b138 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    b11c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    b11e:	4211      	tst	r1, r2
    b120:	d0fc      	beq.n	b11c <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    b122:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    b124:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    b126:	4210      	tst	r0, r2
    b128:	d0f1      	beq.n	b10e <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    b12a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    b12c:	311e      	adds	r1, #30
    b12e:	e7ee      	b.n	b10e <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    b130:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b132:	05c0      	lsls	r0, r0, #23
    b134:	0dc0      	lsrs	r0, r0, #23
    b136:	e7ef      	b.n	b118 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    b138:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    b13a:	3c01      	subs	r4, #1
    b13c:	b2a4      	uxth	r4, r4
			pu8Miso++;
    b13e:	445d      	add	r5, fp
			pu8Mosi++;
    b140:	4643      	mov	r3, r8
    b142:	4259      	negs	r1, r3
    b144:	414b      	adcs	r3, r1
    b146:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    b148:	2c00      	cmp	r4, #0
    b14a:	d1c4      	bne.n	b0d6 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    b14c:	4b18      	ldr	r3, [pc, #96]	; (b1b0 <nm_bus_ioctl+0x12c>)
    b14e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    b150:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    b152:	7e0b      	ldrb	r3, [r1, #24]
    b154:	4213      	tst	r3, r2
    b156:	d0fc      	beq.n	b152 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    b158:	2200      	movs	r2, #0
    b15a:	4914      	ldr	r1, [pc, #80]	; (b1ac <nm_bus_ioctl+0x128>)
    b15c:	4814      	ldr	r0, [pc, #80]	; (b1b0 <nm_bus_ioctl+0x12c>)
    b15e:	4b15      	ldr	r3, [pc, #84]	; (b1b4 <nm_bus_ioctl+0x130>)
    b160:	4798      	blx	r3
	return M2M_SUCCESS;
    b162:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    b164:	b003      	add	sp, #12
    b166:	bc3c      	pop	{r2, r3, r4, r5}
    b168:	4690      	mov	r8, r2
    b16a:	4699      	mov	r9, r3
    b16c:	46a2      	mov	sl, r4
    b16e:	46ab      	mov	fp, r5
    b170:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    b172:	200f      	movs	r0, #15
    b174:	4240      	negs	r0, r0
    b176:	e7f5      	b.n	b164 <nm_bus_ioctl+0xe0>
    b178:	200f      	movs	r0, #15
    b17a:	4240      	negs	r0, r0
    b17c:	e7f2      	b.n	b164 <nm_bus_ioctl+0xe0>
    b17e:	200f      	movs	r0, #15
    b180:	4240      	negs	r0, r0
		break;
    b182:	e7ef      	b.n	b164 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    b184:	2283      	movs	r2, #131	; 0x83
    b186:	0052      	lsls	r2, r2, #1
    b188:	490b      	ldr	r1, [pc, #44]	; (b1b8 <nm_bus_ioctl+0x134>)
    b18a:	480c      	ldr	r0, [pc, #48]	; (b1bc <nm_bus_ioctl+0x138>)
    b18c:	4b0c      	ldr	r3, [pc, #48]	; (b1c0 <nm_bus_ioctl+0x13c>)
    b18e:	4798      	blx	r3
    b190:	480c      	ldr	r0, [pc, #48]	; (b1c4 <nm_bus_ioctl+0x140>)
    b192:	4b0d      	ldr	r3, [pc, #52]	; (b1c8 <nm_bus_ioctl+0x144>)
    b194:	4798      	blx	r3
    b196:	200d      	movs	r0, #13
    b198:	4b0c      	ldr	r3, [pc, #48]	; (b1cc <nm_bus_ioctl+0x148>)
    b19a:	4798      	blx	r3
			s8Ret = -1;
    b19c:	2001      	movs	r0, #1
    b19e:	4240      	negs	r0, r0
	return s8Ret;
    b1a0:	e7e0      	b.n	b164 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    b1a2:	2301      	movs	r3, #1
    b1a4:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    b1a6:	466b      	mov	r3, sp
    b1a8:	1dde      	adds	r6, r3, #7
    b1aa:	e784      	b.n	b0b6 <nm_bus_ioctl+0x32>
    b1ac:	20000f60 	.word	0x20000f60
    b1b0:	20000f64 	.word	0x20000f64
    b1b4:	0000f00d 	.word	0x0000f00d
    b1b8:	00018970 	.word	0x00018970
    b1bc:	00018980 	.word	0x00018980
    b1c0:	00016761 	.word	0x00016761
    b1c4:	00018994 	.word	0x00018994
    b1c8:	0001687d 	.word	0x0001687d
    b1cc:	00016795 	.word	0x00016795

0000b1d0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    b1d0:	b530      	push	{r4, r5, lr}
    b1d2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    b1d4:	ab01      	add	r3, sp, #4
    b1d6:	2200      	movs	r2, #0
    b1d8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    b1da:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    b1dc:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b1de:	4d13      	ldr	r5, [pc, #76]	; (b22c <nm_bus_deinit+0x5c>)
    b1e0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    b1e2:	0020      	movs	r0, r4
    b1e4:	4b12      	ldr	r3, [pc, #72]	; (b230 <nm_bus_deinit+0x60>)
    b1e6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b1e8:	231f      	movs	r3, #31
    b1ea:	4018      	ands	r0, r3
    b1ec:	3b1e      	subs	r3, #30
    b1ee:	4083      	lsls	r3, r0
    b1f0:	2280      	movs	r2, #128	; 0x80
    b1f2:	4910      	ldr	r1, [pc, #64]	; (b234 <nm_bus_deinit+0x64>)
    b1f4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    b1f6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    b1f8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    b1fa:	2b00      	cmp	r3, #0
    b1fc:	d1fc      	bne.n	b1f8 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    b1fe:	338f      	adds	r3, #143	; 0x8f
    b200:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    b202:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    b204:	6823      	ldr	r3, [r4, #0]
    b206:	2202      	movs	r2, #2
    b208:	4393      	bics	r3, r2
    b20a:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    b20c:	a901      	add	r1, sp, #4
    b20e:	200c      	movs	r0, #12
    b210:	4c09      	ldr	r4, [pc, #36]	; (b238 <nm_bus_deinit+0x68>)
    b212:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    b214:	a901      	add	r1, sp, #4
    b216:	200f      	movs	r0, #15
    b218:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    b21a:	a901      	add	r1, sp, #4
    b21c:	200d      	movs	r0, #13
    b21e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    b220:	a901      	add	r1, sp, #4
    b222:	200e      	movs	r0, #14
    b224:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    b226:	2000      	movs	r0, #0
    b228:	b003      	add	sp, #12
    b22a:	bd30      	pop	{r4, r5, pc}
    b22c:	20000f64 	.word	0x20000f64
    b230:	0000ec19 	.word	0x0000ec19
    b234:	e000e100 	.word	0xe000e100
    b238:	0000e605 	.word	0x0000e605

0000b23c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    b23c:	2a00      	cmp	r2, #0
    b23e:	d006      	beq.n	b24e <m2m_memcpy+0x12>
    b240:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    b242:	780b      	ldrb	r3, [r1, #0]
    b244:	7003      	strb	r3, [r0, #0]
		pDst++;
    b246:	3001      	adds	r0, #1
		pSrc++;
    b248:	3101      	adds	r1, #1
	}while(--sz);
    b24a:	4290      	cmp	r0, r2
    b24c:	d1f9      	bne.n	b242 <m2m_memcpy+0x6>
}
    b24e:	4770      	bx	lr

0000b250 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    b250:	2a00      	cmp	r2, #0
    b252:	d004      	beq.n	b25e <m2m_memset+0xe>
    b254:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    b256:	7001      	strb	r1, [r0, #0]
		pBuf++;
    b258:	3001      	adds	r0, #1
	}while(--sz);
    b25a:	4290      	cmp	r0, r2
    b25c:	d1fb      	bne.n	b256 <m2m_memset+0x6>
}
    b25e:	4770      	bx	lr

0000b260 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    b260:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    b262:	7802      	ldrb	r2, [r0, #0]
    b264:	2a00      	cmp	r2, #0
    b266:	d007      	beq.n	b278 <m2m_strlen+0x18>
    b268:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    b26a:	3001      	adds	r0, #1
    b26c:	b280      	uxth	r0, r0
		pcStr++;
    b26e:	3301      	adds	r3, #1
	while(*pcStr)
    b270:	781a      	ldrb	r2, [r3, #0]
    b272:	2a00      	cmp	r2, #0
    b274:	d1f9      	bne.n	b26a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    b276:	4770      	bx	lr
	uint16	u16StrLen = 0;
    b278:	2000      	movs	r0, #0
    b27a:	e7fc      	b.n	b276 <m2m_strlen+0x16>

0000b27c <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    b27c:	4a02      	ldr	r2, [pc, #8]	; (b288 <isr+0xc>)
    b27e:	78d3      	ldrb	r3, [r2, #3]
    b280:	3301      	adds	r3, #1
    b282:	b2db      	uxtb	r3, r3
    b284:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    b286:	4770      	bx	lr
    b288:	20000fa0 	.word	0x20000fa0

0000b28c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    b28c:	4770      	bx	lr
	...

0000b290 <hif_set_rx_done>:
{
    b290:	b500      	push	{lr}
    b292:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    b294:	2200      	movs	r2, #0
    b296:	4b0a      	ldr	r3, [pc, #40]	; (b2c0 <hif_set_rx_done+0x30>)
    b298:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    b29a:	2001      	movs	r0, #1
    b29c:	4b09      	ldr	r3, [pc, #36]	; (b2c4 <hif_set_rx_done+0x34>)
    b29e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    b2a0:	a901      	add	r1, sp, #4
    b2a2:	4809      	ldr	r0, [pc, #36]	; (b2c8 <hif_set_rx_done+0x38>)
    b2a4:	4b09      	ldr	r3, [pc, #36]	; (b2cc <hif_set_rx_done+0x3c>)
    b2a6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    b2a8:	2800      	cmp	r0, #0
    b2aa:	d001      	beq.n	b2b0 <hif_set_rx_done+0x20>
}
    b2ac:	b003      	add	sp, #12
    b2ae:	bd00      	pop	{pc}
	reg |= NBIT1;
    b2b0:	2102      	movs	r1, #2
    b2b2:	9b01      	ldr	r3, [sp, #4]
    b2b4:	4319      	orrs	r1, r3
    b2b6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b2b8:	4803      	ldr	r0, [pc, #12]	; (b2c8 <hif_set_rx_done+0x38>)
    b2ba:	4b05      	ldr	r3, [pc, #20]	; (b2d0 <hif_set_rx_done+0x40>)
    b2bc:	4798      	blx	r3
    b2be:	e7f5      	b.n	b2ac <hif_set_rx_done+0x1c>
    b2c0:	20000fa0 	.word	0x20000fa0
    b2c4:	0000af5d 	.word	0x0000af5d
    b2c8:	00001070 	.word	0x00001070
    b2cc:	0000c6a1 	.word	0x0000c6a1
    b2d0:	0000c6ad 	.word	0x0000c6ad

0000b2d4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    b2d4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    b2d6:	4b0c      	ldr	r3, [pc, #48]	; (b308 <hif_chip_wake+0x34>)
    b2d8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    b2da:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    b2dc:	2b00      	cmp	r3, #0
    b2de:	d10d      	bne.n	b2fc <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    b2e0:	4b09      	ldr	r3, [pc, #36]	; (b308 <hif_chip_wake+0x34>)
    b2e2:	785b      	ldrb	r3, [r3, #1]
    b2e4:	2b00      	cmp	r3, #0
    b2e6:	d103      	bne.n	b2f0 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    b2e8:	4b07      	ldr	r3, [pc, #28]	; (b308 <hif_chip_wake+0x34>)
    b2ea:	781b      	ldrb	r3, [r3, #0]
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d106      	bne.n	b2fe <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    b2f0:	4a05      	ldr	r2, [pc, #20]	; (b308 <hif_chip_wake+0x34>)
    b2f2:	7853      	ldrb	r3, [r2, #1]
    b2f4:	3301      	adds	r3, #1
    b2f6:	b2db      	uxtb	r3, r3
    b2f8:	7053      	strb	r3, [r2, #1]
    b2fa:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    b2fc:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    b2fe:	4b03      	ldr	r3, [pc, #12]	; (b30c <hif_chip_wake+0x38>)
    b300:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    b302:	2800      	cmp	r0, #0
    b304:	d0f4      	beq.n	b2f0 <hif_chip_wake+0x1c>
    b306:	e7f9      	b.n	b2fc <hif_chip_wake+0x28>
    b308:	20000fa0 	.word	0x20000fa0
    b30c:	0000c389 	.word	0x0000c389

0000b310 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    b310:	4b05      	ldr	r3, [pc, #20]	; (b328 <hif_chip_sleep_sc+0x18>)
    b312:	785b      	ldrb	r3, [r3, #1]
    b314:	2b00      	cmp	r3, #0
    b316:	d004      	beq.n	b322 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    b318:	4a03      	ldr	r2, [pc, #12]	; (b328 <hif_chip_sleep_sc+0x18>)
    b31a:	7853      	ldrb	r3, [r2, #1]
    b31c:	3b01      	subs	r3, #1
    b31e:	b2db      	uxtb	r3, r3
    b320:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    b322:	2000      	movs	r0, #0
    b324:	4770      	bx	lr
    b326:	46c0      	nop			; (mov r8, r8)
    b328:	20000fa0 	.word	0x20000fa0

0000b32c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    b32c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    b32e:	4b0b      	ldr	r3, [pc, #44]	; (b35c <hif_chip_sleep+0x30>)
    b330:	785b      	ldrb	r3, [r3, #1]
    b332:	2b00      	cmp	r3, #0
    b334:	d004      	beq.n	b340 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    b336:	4a09      	ldr	r2, [pc, #36]	; (b35c <hif_chip_sleep+0x30>)
    b338:	7853      	ldrb	r3, [r2, #1]
    b33a:	3b01      	subs	r3, #1
    b33c:	b2db      	uxtb	r3, r3
    b33e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    b340:	4b06      	ldr	r3, [pc, #24]	; (b35c <hif_chip_sleep+0x30>)
    b342:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    b344:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    b346:	2b00      	cmp	r3, #0
    b348:	d103      	bne.n	b352 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    b34a:	4b04      	ldr	r3, [pc, #16]	; (b35c <hif_chip_sleep+0x30>)
    b34c:	781b      	ldrb	r3, [r3, #0]
    b34e:	2b00      	cmp	r3, #0
    b350:	d100      	bne.n	b354 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    b352:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    b354:	4b02      	ldr	r3, [pc, #8]	; (b360 <hif_chip_sleep+0x34>)
    b356:	4798      	blx	r3
    b358:	e7fb      	b.n	b352 <hif_chip_sleep+0x26>
    b35a:	46c0      	nop			; (mov r8, r8)
    b35c:	20000fa0 	.word	0x20000fa0
    b360:	0000c321 	.word	0x0000c321

0000b364 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    b364:	b5f0      	push	{r4, r5, r6, r7, lr}
    b366:	46de      	mov	lr, fp
    b368:	4657      	mov	r7, sl
    b36a:	b580      	push	{r7, lr}
    b36c:	b089      	sub	sp, #36	; 0x24
    b36e:	4683      	mov	fp, r0
    b370:	468a      	mov	sl, r1
    b372:	9201      	str	r2, [sp, #4]
    b374:	9300      	str	r3, [sp, #0]
    b376:	ab10      	add	r3, sp, #64	; 0x40
    b378:	cb80      	ldmia	r3!, {r7}
    b37a:	881e      	ldrh	r6, [r3, #0]
    b37c:	ab12      	add	r3, sp, #72	; 0x48
    b37e:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    b380:	227f      	movs	r2, #127	; 0x7f
    b382:	400a      	ands	r2, r1
    b384:	ab07      	add	r3, sp, #28
    b386:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    b388:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    b38a:	2208      	movs	r2, #8
    b38c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    b38e:	2f00      	cmp	r7, #0
    b390:	d03d      	beq.n	b40e <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    b392:	885a      	ldrh	r2, [r3, #2]
    b394:	1992      	adds	r2, r2, r6
    b396:	18aa      	adds	r2, r5, r2
    b398:	b292      	uxth	r2, r2
    b39a:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    b39c:	4b69      	ldr	r3, [pc, #420]	; (b544 <hif_send+0x1e0>)
    b39e:	4798      	blx	r3
    b3a0:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    b3a2:	d000      	beq.n	b3a6 <hif_send+0x42>
    b3a4:	e0c1      	b.n	b52a <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    b3a6:	2300      	movs	r3, #0
    b3a8:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    b3aa:	aa02      	add	r2, sp, #8
    b3ac:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    b3ae:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    b3b0:	9b04      	ldr	r3, [sp, #16]
    b3b2:	465a      	mov	r2, fp
    b3b4:	431a      	orrs	r2, r3
    b3b6:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    b3b8:	9a04      	ldr	r2, [sp, #16]
    b3ba:	4653      	mov	r3, sl
    b3bc:	021b      	lsls	r3, r3, #8
    b3be:	4313      	orrs	r3, r2
    b3c0:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    b3c2:	ab07      	add	r3, sp, #28
    b3c4:	885b      	ldrh	r3, [r3, #2]
    b3c6:	9a04      	ldr	r2, [sp, #16]
    b3c8:	041b      	lsls	r3, r3, #16
    b3ca:	4313      	orrs	r3, r2
    b3cc:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    b3ce:	9904      	ldr	r1, [sp, #16]
    b3d0:	485d      	ldr	r0, [pc, #372]	; (b548 <hif_send+0x1e4>)
    b3d2:	4b5e      	ldr	r3, [pc, #376]	; (b54c <hif_send+0x1e8>)
    b3d4:	4798      	blx	r3
    b3d6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    b3d8:	d157      	bne.n	b48a <hif_send+0x126>

		reg = 0UL;
    b3da:	2300      	movs	r3, #0
    b3dc:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    b3de:	9b04      	ldr	r3, [sp, #16]
    b3e0:	2202      	movs	r2, #2
    b3e2:	4313      	orrs	r3, r2
    b3e4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    b3e6:	9904      	ldr	r1, [sp, #16]
    b3e8:	4859      	ldr	r0, [pc, #356]	; (b550 <hif_send+0x1ec>)
    b3ea:	4b58      	ldr	r3, [pc, #352]	; (b54c <hif_send+0x1e8>)
    b3ec:	4798      	blx	r3
    b3ee:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    b3f0:	d14b      	bne.n	b48a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    b3f2:	2200      	movs	r2, #0
    b3f4:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    b3f6:	ab02      	add	r3, sp, #8
    b3f8:	80da      	strh	r2, [r3, #6]
    b3fa:	3306      	adds	r3, #6
    b3fc:	881b      	ldrh	r3, [r3, #0]
    b3fe:	b29b      	uxth	r3, r3
    b400:	4a54      	ldr	r2, [pc, #336]	; (b554 <hif_send+0x1f0>)
    b402:	4293      	cmp	r3, r2
    b404:	d849      	bhi.n	b49a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    b406:	4c54      	ldr	r4, [pc, #336]	; (b558 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    b408:	4b54      	ldr	r3, [pc, #336]	; (b55c <hif_send+0x1f8>)
    b40a:	469a      	mov	sl, r3
    b40c:	e017      	b.n	b43e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    b40e:	ab07      	add	r3, sp, #28
    b410:	885a      	ldrh	r2, [r3, #2]
    b412:	9900      	ldr	r1, [sp, #0]
    b414:	468c      	mov	ip, r1
    b416:	4462      	add	r2, ip
    b418:	b292      	uxth	r2, r2
    b41a:	805a      	strh	r2, [r3, #2]
    b41c:	e7be      	b.n	b39c <hif_send+0x38>
				nm_bsp_sleep(1);
    b41e:	2001      	movs	r0, #1
    b420:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    b422:	9b04      	ldr	r3, [sp, #16]
    b424:	079b      	lsls	r3, r3, #30
    b426:	d528      	bpl.n	b47a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    b428:	ab02      	add	r3, sp, #8
    b42a:	88da      	ldrh	r2, [r3, #6]
    b42c:	3201      	adds	r2, #1
    b42e:	b292      	uxth	r2, r2
    b430:	80da      	strh	r2, [r3, #6]
    b432:	3306      	adds	r3, #6
    b434:	881b      	ldrh	r3, [r3, #0]
    b436:	b29b      	uxth	r3, r3
    b438:	4a46      	ldr	r2, [pc, #280]	; (b554 <hif_send+0x1f0>)
    b43a:	4293      	cmp	r3, r2
    b43c:	d82d      	bhi.n	b49a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    b43e:	a904      	add	r1, sp, #16
    b440:	4843      	ldr	r0, [pc, #268]	; (b550 <hif_send+0x1ec>)
    b442:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    b444:	2800      	cmp	r0, #0
    b446:	d128      	bne.n	b49a <hif_send+0x136>
			if(cnt >= 500) {
    b448:	ab02      	add	r3, sp, #8
    b44a:	3306      	adds	r3, #6
    b44c:	881b      	ldrh	r3, [r3, #0]
    b44e:	b29b      	uxth	r3, r3
    b450:	22f4      	movs	r2, #244	; 0xf4
    b452:	32ff      	adds	r2, #255	; 0xff
    b454:	4293      	cmp	r3, r2
    b456:	d9e4      	bls.n	b422 <hif_send+0xbe>
				if(cnt < 501) {
    b458:	ab02      	add	r3, sp, #8
    b45a:	3306      	adds	r3, #6
    b45c:	881b      	ldrh	r3, [r3, #0]
    b45e:	b29b      	uxth	r3, r3
    b460:	3201      	adds	r2, #1
    b462:	4293      	cmp	r3, r2
    b464:	d8db      	bhi.n	b41e <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    b466:	483e      	ldr	r0, [pc, #248]	; (b560 <hif_send+0x1fc>)
    b468:	4b3e      	ldr	r3, [pc, #248]	; (b564 <hif_send+0x200>)
    b46a:	4798      	blx	r3
    b46c:	483e      	ldr	r0, [pc, #248]	; (b568 <hif_send+0x204>)
    b46e:	4b3f      	ldr	r3, [pc, #252]	; (b56c <hif_send+0x208>)
    b470:	4798      	blx	r3
    b472:	200d      	movs	r0, #13
    b474:	4b3e      	ldr	r3, [pc, #248]	; (b570 <hif_send+0x20c>)
    b476:	4798      	blx	r3
    b478:	e7d1      	b.n	b41e <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    b47a:	a905      	add	r1, sp, #20
    b47c:	483d      	ldr	r0, [pc, #244]	; (b574 <hif_send+0x210>)
    b47e:	4b36      	ldr	r3, [pc, #216]	; (b558 <hif_send+0x1f4>)
    b480:	4798      	blx	r3
    b482:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    b484:	d009      	beq.n	b49a <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    b486:	2300      	movs	r3, #0
    b488:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    b48a:	4b3b      	ldr	r3, [pc, #236]	; (b578 <hif_send+0x214>)
    b48c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    b48e:	0020      	movs	r0, r4
    b490:	b009      	add	sp, #36	; 0x24
    b492:	bc0c      	pop	{r2, r3}
    b494:	4692      	mov	sl, r2
    b496:	469b      	mov	fp, r3
    b498:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    b49a:	9b05      	ldr	r3, [sp, #20]
    b49c:	2b00      	cmp	r3, #0
    b49e:	d03f      	beq.n	b520 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    b4a0:	9b05      	ldr	r3, [sp, #20]
    b4a2:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    b4a4:	a907      	add	r1, sp, #28
    b4a6:	884b      	ldrh	r3, [r1, #2]
    b4a8:	b29b      	uxth	r3, r3
    b4aa:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    b4ac:	9806      	ldr	r0, [sp, #24]
    b4ae:	2208      	movs	r2, #8
    b4b0:	4b32      	ldr	r3, [pc, #200]	; (b57c <hif_send+0x218>)
    b4b2:	4798      	blx	r3
    b4b4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    b4b6:	d1e8      	bne.n	b48a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    b4b8:	9b06      	ldr	r3, [sp, #24]
    b4ba:	3308      	adds	r3, #8
    b4bc:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    b4be:	9b01      	ldr	r3, [sp, #4]
    b4c0:	2b00      	cmp	r3, #0
    b4c2:	d00b      	beq.n	b4dc <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    b4c4:	9806      	ldr	r0, [sp, #24]
    b4c6:	9a00      	ldr	r2, [sp, #0]
    b4c8:	0019      	movs	r1, r3
    b4ca:	4b2c      	ldr	r3, [pc, #176]	; (b57c <hif_send+0x218>)
    b4cc:	4798      	blx	r3
    b4ce:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    b4d0:	d1db      	bne.n	b48a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    b4d2:	9b06      	ldr	r3, [sp, #24]
    b4d4:	9a00      	ldr	r2, [sp, #0]
    b4d6:	4694      	mov	ip, r2
    b4d8:	4463      	add	r3, ip
    b4da:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    b4dc:	2f00      	cmp	r7, #0
    b4de:	d00e      	beq.n	b4fe <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    b4e0:	9b06      	ldr	r3, [sp, #24]
    b4e2:	9a00      	ldr	r2, [sp, #0]
    b4e4:	1aad      	subs	r5, r5, r2
    b4e6:	18ed      	adds	r5, r5, r3
    b4e8:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    b4ea:	9806      	ldr	r0, [sp, #24]
    b4ec:	0032      	movs	r2, r6
    b4ee:	0039      	movs	r1, r7
    b4f0:	4b22      	ldr	r3, [pc, #136]	; (b57c <hif_send+0x218>)
    b4f2:	4798      	blx	r3
    b4f4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    b4f6:	d1c8      	bne.n	b48a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    b4f8:	9b06      	ldr	r3, [sp, #24]
    b4fa:	18f3      	adds	r3, r6, r3
    b4fc:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    b4fe:	9b05      	ldr	r3, [sp, #20]
    b500:	009b      	lsls	r3, r3, #2
    b502:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    b504:	9b04      	ldr	r3, [sp, #16]
    b506:	2202      	movs	r2, #2
    b508:	4313      	orrs	r3, r2
    b50a:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    b50c:	9904      	ldr	r1, [sp, #16]
    b50e:	481c      	ldr	r0, [pc, #112]	; (b580 <hif_send+0x21c>)
    b510:	4b0e      	ldr	r3, [pc, #56]	; (b54c <hif_send+0x1e8>)
    b512:	4798      	blx	r3
    b514:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    b516:	d1b8      	bne.n	b48a <hif_send+0x126>
 	ret = hif_chip_sleep();
    b518:	4b1a      	ldr	r3, [pc, #104]	; (b584 <hif_send+0x220>)
    b51a:	4798      	blx	r3
    b51c:	0004      	movs	r4, r0
	return ret;
    b51e:	e7b6      	b.n	b48e <hif_send+0x12a>
			ret = hif_chip_sleep();
    b520:	4b18      	ldr	r3, [pc, #96]	; (b584 <hif_send+0x220>)
    b522:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    b524:	2403      	movs	r4, #3
    b526:	4264      	negs	r4, r4
			goto ERR2;
    b528:	e7b1      	b.n	b48e <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    b52a:	2298      	movs	r2, #152	; 0x98
    b52c:	32ff      	adds	r2, #255	; 0xff
    b52e:	4916      	ldr	r1, [pc, #88]	; (b588 <hif_send+0x224>)
    b530:	4816      	ldr	r0, [pc, #88]	; (b58c <hif_send+0x228>)
    b532:	4b0c      	ldr	r3, [pc, #48]	; (b564 <hif_send+0x200>)
    b534:	4798      	blx	r3
    b536:	4816      	ldr	r0, [pc, #88]	; (b590 <hif_send+0x22c>)
    b538:	4b0c      	ldr	r3, [pc, #48]	; (b56c <hif_send+0x208>)
    b53a:	4798      	blx	r3
    b53c:	200d      	movs	r0, #13
    b53e:	4b0c      	ldr	r3, [pc, #48]	; (b570 <hif_send+0x20c>)
    b540:	4798      	blx	r3
		goto ERR2;
    b542:	e7a4      	b.n	b48e <hif_send+0x12a>
    b544:	0000b2d5 	.word	0x0000b2d5
    b548:	0000108c 	.word	0x0000108c
    b54c:	0000c6ad 	.word	0x0000c6ad
    b550:	00001078 	.word	0x00001078
    b554:	000003e7 	.word	0x000003e7
    b558:	0000c6a1 	.word	0x0000c6a1
    b55c:	0000aec5 	.word	0x0000aec5
    b560:	00018cb0 	.word	0x00018cb0
    b564:	00016761 	.word	0x00016761
    b568:	00018cbc 	.word	0x00018cbc
    b56c:	0001687d 	.word	0x0001687d
    b570:	00016795 	.word	0x00016795
    b574:	00150400 	.word	0x00150400
    b578:	0000b311 	.word	0x0000b311
    b57c:	0000c721 	.word	0x0000c721
    b580:	0000106c 	.word	0x0000106c
    b584:	0000b32d 	.word	0x0000b32d
    b588:	000189c8 	.word	0x000189c8
    b58c:	00018980 	.word	0x00018980
    b590:	00018ccc 	.word	0x00018ccc

0000b594 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    b594:	b5f0      	push	{r4, r5, r6, r7, lr}
    b596:	46ce      	mov	lr, r9
    b598:	4647      	mov	r7, r8
    b59a:	b580      	push	{r7, lr}
    b59c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    b59e:	2200      	movs	r2, #0
    b5a0:	4bd1      	ldr	r3, [pc, #836]	; (b8e8 <hif_handle_isr+0x354>)
    b5a2:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    b5a4:	4699      	mov	r9, r3
    b5a6:	4698      	mov	r8, r3
    b5a8:	e081      	b.n	b6ae <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    b5aa:	4bcf      	ldr	r3, [pc, #828]	; (b8e8 <hif_handle_isr+0x354>)
    b5ac:	9a05      	ldr	r2, [sp, #20]
    b5ae:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    b5b0:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    b5b2:	af04      	add	r7, sp, #16
    b5b4:	2204      	movs	r2, #4
    b5b6:	0039      	movs	r1, r7
    b5b8:	9805      	ldr	r0, [sp, #20]
    b5ba:	4bcc      	ldr	r3, [pc, #816]	; (b8ec <hif_handle_isr+0x358>)
    b5bc:	4798      	blx	r3
    b5be:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    b5c0:	887b      	ldrh	r3, [r7, #2]
    b5c2:	b29b      	uxth	r3, r3
    b5c4:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    b5c6:	2800      	cmp	r0, #0
    b5c8:	d134      	bne.n	b634 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    b5ca:	ab04      	add	r3, sp, #16
    b5cc:	885b      	ldrh	r3, [r3, #2]
    b5ce:	b29b      	uxth	r3, r3
    b5d0:	429e      	cmp	r6, r3
    b5d2:	d004      	beq.n	b5de <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    b5d4:	ab04      	add	r3, sp, #16
    b5d6:	885b      	ldrh	r3, [r3, #2]
    b5d8:	1af3      	subs	r3, r6, r3
    b5da:	2b04      	cmp	r3, #4
    b5dc:	dc3a      	bgt.n	b654 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    b5de:	ab04      	add	r3, sp, #16
    b5e0:	781b      	ldrb	r3, [r3, #0]
    b5e2:	2b01      	cmp	r3, #1
    b5e4:	d04f      	beq.n	b686 <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    b5e6:	ab04      	add	r3, sp, #16
    b5e8:	781b      	ldrb	r3, [r3, #0]
    b5ea:	2b02      	cmp	r3, #2
    b5ec:	d07d      	beq.n	b6ea <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    b5ee:	ab04      	add	r3, sp, #16
    b5f0:	781b      	ldrb	r3, [r3, #0]
    b5f2:	2b04      	cmp	r3, #4
    b5f4:	d100      	bne.n	b5f8 <hif_handle_isr+0x64>
    b5f6:	e095      	b.n	b724 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    b5f8:	ab04      	add	r3, sp, #16
    b5fa:	781b      	ldrb	r3, [r3, #0]
    b5fc:	2b06      	cmp	r3, #6
    b5fe:	d100      	bne.n	b602 <hif_handle_isr+0x6e>
    b600:	e0ad      	b.n	b75e <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    b602:	ab04      	add	r3, sp, #16
    b604:	781b      	ldrb	r3, [r3, #0]
    b606:	2b07      	cmp	r3, #7
    b608:	d100      	bne.n	b60c <hif_handle_isr+0x78>
    b60a:	e0c5      	b.n	b798 <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    b60c:	ab04      	add	r3, sp, #16
    b60e:	781b      	ldrb	r3, [r3, #0]
    b610:	2b05      	cmp	r3, #5
    b612:	d100      	bne.n	b616 <hif_handle_isr+0x82>
    b614:	e0dc      	b.n	b7d0 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    b616:	2284      	movs	r2, #132	; 0x84
    b618:	0092      	lsls	r2, r2, #2
    b61a:	49b5      	ldr	r1, [pc, #724]	; (b8f0 <hif_handle_isr+0x35c>)
    b61c:	48b5      	ldr	r0, [pc, #724]	; (b8f4 <hif_handle_isr+0x360>)
    b61e:	4bb6      	ldr	r3, [pc, #728]	; (b8f8 <hif_handle_isr+0x364>)
    b620:	4798      	blx	r3
    b622:	48b6      	ldr	r0, [pc, #728]	; (b8fc <hif_handle_isr+0x368>)
    b624:	4bb6      	ldr	r3, [pc, #728]	; (b900 <hif_handle_isr+0x36c>)
    b626:	4798      	blx	r3
    b628:	200d      	movs	r0, #13
    b62a:	4bb6      	ldr	r3, [pc, #728]	; (b904 <hif_handle_isr+0x370>)
    b62c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    b62e:	2406      	movs	r4, #6
    b630:	4264      	negs	r4, r4
    b632:	e119      	b.n	b868 <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    b634:	22e9      	movs	r2, #233	; 0xe9
    b636:	0052      	lsls	r2, r2, #1
    b638:	49ad      	ldr	r1, [pc, #692]	; (b8f0 <hif_handle_isr+0x35c>)
    b63a:	48ae      	ldr	r0, [pc, #696]	; (b8f4 <hif_handle_isr+0x360>)
    b63c:	4bae      	ldr	r3, [pc, #696]	; (b8f8 <hif_handle_isr+0x364>)
    b63e:	4798      	blx	r3
    b640:	48b1      	ldr	r0, [pc, #708]	; (b908 <hif_handle_isr+0x374>)
    b642:	4baf      	ldr	r3, [pc, #700]	; (b900 <hif_handle_isr+0x36c>)
    b644:	4798      	blx	r3
    b646:	200d      	movs	r0, #13
    b648:	4bae      	ldr	r3, [pc, #696]	; (b904 <hif_handle_isr+0x370>)
    b64a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    b64c:	2001      	movs	r0, #1
    b64e:	4baf      	ldr	r3, [pc, #700]	; (b90c <hif_handle_isr+0x378>)
    b650:	4798      	blx	r3
    b652:	e109      	b.n	b868 <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    b654:	22dc      	movs	r2, #220	; 0xdc
    b656:	32ff      	adds	r2, #255	; 0xff
    b658:	49a5      	ldr	r1, [pc, #660]	; (b8f0 <hif_handle_isr+0x35c>)
    b65a:	48a6      	ldr	r0, [pc, #664]	; (b8f4 <hif_handle_isr+0x360>)
    b65c:	4ca6      	ldr	r4, [pc, #664]	; (b8f8 <hif_handle_isr+0x364>)
    b65e:	47a0      	blx	r4
    b660:	a904      	add	r1, sp, #16
    b662:	884a      	ldrh	r2, [r1, #2]
    b664:	b292      	uxth	r2, r2
    b666:	780b      	ldrb	r3, [r1, #0]
    b668:	b2db      	uxtb	r3, r3
    b66a:	7849      	ldrb	r1, [r1, #1]
    b66c:	9100      	str	r1, [sp, #0]
    b66e:	0031      	movs	r1, r6
    b670:	48a7      	ldr	r0, [pc, #668]	; (b910 <hif_handle_isr+0x37c>)
    b672:	47a0      	blx	r4
    b674:	200d      	movs	r0, #13
    b676:	4ba3      	ldr	r3, [pc, #652]	; (b904 <hif_handle_isr+0x370>)
    b678:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    b67a:	2001      	movs	r0, #1
    b67c:	4ba3      	ldr	r3, [pc, #652]	; (b90c <hif_handle_isr+0x378>)
    b67e:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    b680:	2406      	movs	r4, #6
    b682:	4264      	negs	r4, r4
    b684:	e0f0      	b.n	b868 <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    b686:	4b98      	ldr	r3, [pc, #608]	; (b8e8 <hif_handle_isr+0x354>)
    b688:	691b      	ldr	r3, [r3, #16]
    b68a:	2b00      	cmp	r3, #0
    b68c:	d020      	beq.n	b6d0 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b68e:	4b96      	ldr	r3, [pc, #600]	; (b8e8 <hif_handle_isr+0x354>)
    b690:	691b      	ldr	r3, [r3, #16]
    b692:	aa04      	add	r2, sp, #16
    b694:	7850      	ldrb	r0, [r2, #1]
    b696:	b2c0      	uxtb	r0, r0
    b698:	8851      	ldrh	r1, [r2, #2]
    b69a:	9a05      	ldr	r2, [sp, #20]
    b69c:	3208      	adds	r2, #8
    b69e:	3908      	subs	r1, #8
    b6a0:	b289      	uxth	r1, r1
    b6a2:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    b6a4:	4b90      	ldr	r3, [pc, #576]	; (b8e8 <hif_handle_isr+0x354>)
    b6a6:	789b      	ldrb	r3, [r3, #2]
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d000      	beq.n	b6ae <hif_handle_isr+0x11a>
    b6ac:	e0a1      	b.n	b7f2 <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    b6ae:	464b      	mov	r3, r9
    b6b0:	78db      	ldrb	r3, [r3, #3]
    b6b2:	2b00      	cmp	r3, #0
    b6b4:	d100      	bne.n	b6b8 <hif_handle_isr+0x124>
    b6b6:	e15b      	b.n	b970 <hif_handle_isr+0x3dc>
    b6b8:	4643      	mov	r3, r8
    b6ba:	791b      	ldrb	r3, [r3, #4]
    b6bc:	2b00      	cmp	r3, #0
    b6be:	d000      	beq.n	b6c2 <hif_handle_isr+0x12e>
    b6c0:	e156      	b.n	b970 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    b6c2:	4a89      	ldr	r2, [pc, #548]	; (b8e8 <hif_handle_isr+0x354>)
    b6c4:	78d3      	ldrb	r3, [r2, #3]
    b6c6:	3b01      	subs	r3, #1
    b6c8:	b2db      	uxtb	r3, r3
    b6ca:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    b6cc:	4d91      	ldr	r5, [pc, #580]	; (b914 <hif_handle_isr+0x380>)
    b6ce:	e0d6      	b.n	b87e <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    b6d0:	22e8      	movs	r2, #232	; 0xe8
    b6d2:	32ff      	adds	r2, #255	; 0xff
    b6d4:	4986      	ldr	r1, [pc, #536]	; (b8f0 <hif_handle_isr+0x35c>)
    b6d6:	4887      	ldr	r0, [pc, #540]	; (b8f4 <hif_handle_isr+0x360>)
    b6d8:	4b87      	ldr	r3, [pc, #540]	; (b8f8 <hif_handle_isr+0x364>)
    b6da:	4798      	blx	r3
    b6dc:	488e      	ldr	r0, [pc, #568]	; (b918 <hif_handle_isr+0x384>)
    b6de:	4b88      	ldr	r3, [pc, #544]	; (b900 <hif_handle_isr+0x36c>)
    b6e0:	4798      	blx	r3
    b6e2:	200d      	movs	r0, #13
    b6e4:	4b87      	ldr	r3, [pc, #540]	; (b904 <hif_handle_isr+0x370>)
    b6e6:	4798      	blx	r3
    b6e8:	e7dc      	b.n	b6a4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    b6ea:	4b7f      	ldr	r3, [pc, #508]	; (b8e8 <hif_handle_isr+0x354>)
    b6ec:	695b      	ldr	r3, [r3, #20]
    b6ee:	2b00      	cmp	r3, #0
    b6f0:	d00b      	beq.n	b70a <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b6f2:	4b7d      	ldr	r3, [pc, #500]	; (b8e8 <hif_handle_isr+0x354>)
    b6f4:	695b      	ldr	r3, [r3, #20]
    b6f6:	aa04      	add	r2, sp, #16
    b6f8:	7850      	ldrb	r0, [r2, #1]
    b6fa:	b2c0      	uxtb	r0, r0
    b6fc:	8851      	ldrh	r1, [r2, #2]
    b6fe:	9a05      	ldr	r2, [sp, #20]
    b700:	3208      	adds	r2, #8
    b702:	3908      	subs	r1, #8
    b704:	b289      	uxth	r1, r1
    b706:	4798      	blx	r3
    b708:	e7cc      	b.n	b6a4 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    b70a:	22f0      	movs	r2, #240	; 0xf0
    b70c:	32ff      	adds	r2, #255	; 0xff
    b70e:	4978      	ldr	r1, [pc, #480]	; (b8f0 <hif_handle_isr+0x35c>)
    b710:	4878      	ldr	r0, [pc, #480]	; (b8f4 <hif_handle_isr+0x360>)
    b712:	4b79      	ldr	r3, [pc, #484]	; (b8f8 <hif_handle_isr+0x364>)
    b714:	4798      	blx	r3
    b716:	4881      	ldr	r0, [pc, #516]	; (b91c <hif_handle_isr+0x388>)
    b718:	4b79      	ldr	r3, [pc, #484]	; (b900 <hif_handle_isr+0x36c>)
    b71a:	4798      	blx	r3
    b71c:	200d      	movs	r0, #13
    b71e:	4b79      	ldr	r3, [pc, #484]	; (b904 <hif_handle_isr+0x370>)
    b720:	4798      	blx	r3
    b722:	e7bf      	b.n	b6a4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    b724:	4b70      	ldr	r3, [pc, #448]	; (b8e8 <hif_handle_isr+0x354>)
    b726:	699b      	ldr	r3, [r3, #24]
    b728:	2b00      	cmp	r3, #0
    b72a:	d00b      	beq.n	b744 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b72c:	4b6e      	ldr	r3, [pc, #440]	; (b8e8 <hif_handle_isr+0x354>)
    b72e:	699b      	ldr	r3, [r3, #24]
    b730:	aa04      	add	r2, sp, #16
    b732:	7850      	ldrb	r0, [r2, #1]
    b734:	b2c0      	uxtb	r0, r0
    b736:	8851      	ldrh	r1, [r2, #2]
    b738:	9a05      	ldr	r2, [sp, #20]
    b73a:	3208      	adds	r2, #8
    b73c:	3908      	subs	r1, #8
    b73e:	b289      	uxth	r1, r1
    b740:	4798      	blx	r3
    b742:	e7af      	b.n	b6a4 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    b744:	22f8      	movs	r2, #248	; 0xf8
    b746:	32ff      	adds	r2, #255	; 0xff
    b748:	4969      	ldr	r1, [pc, #420]	; (b8f0 <hif_handle_isr+0x35c>)
    b74a:	486a      	ldr	r0, [pc, #424]	; (b8f4 <hif_handle_isr+0x360>)
    b74c:	4b6a      	ldr	r3, [pc, #424]	; (b8f8 <hif_handle_isr+0x364>)
    b74e:	4798      	blx	r3
    b750:	4873      	ldr	r0, [pc, #460]	; (b920 <hif_handle_isr+0x38c>)
    b752:	4b6b      	ldr	r3, [pc, #428]	; (b900 <hif_handle_isr+0x36c>)
    b754:	4798      	blx	r3
    b756:	200d      	movs	r0, #13
    b758:	4b6a      	ldr	r3, [pc, #424]	; (b904 <hif_handle_isr+0x370>)
    b75a:	4798      	blx	r3
    b75c:	e7a2      	b.n	b6a4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    b75e:	4b62      	ldr	r3, [pc, #392]	; (b8e8 <hif_handle_isr+0x354>)
    b760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b762:	2b00      	cmp	r3, #0
    b764:	d00b      	beq.n	b77e <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b766:	4b60      	ldr	r3, [pc, #384]	; (b8e8 <hif_handle_isr+0x354>)
    b768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b76a:	aa04      	add	r2, sp, #16
    b76c:	7850      	ldrb	r0, [r2, #1]
    b76e:	b2c0      	uxtb	r0, r0
    b770:	8851      	ldrh	r1, [r2, #2]
    b772:	9a05      	ldr	r2, [sp, #20]
    b774:	3208      	adds	r2, #8
    b776:	3908      	subs	r1, #8
    b778:	b289      	uxth	r1, r1
    b77a:	4798      	blx	r3
    b77c:	e792      	b.n	b6a4 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    b77e:	2280      	movs	r2, #128	; 0x80
    b780:	0092      	lsls	r2, r2, #2
    b782:	495b      	ldr	r1, [pc, #364]	; (b8f0 <hif_handle_isr+0x35c>)
    b784:	485b      	ldr	r0, [pc, #364]	; (b8f4 <hif_handle_isr+0x360>)
    b786:	4b5c      	ldr	r3, [pc, #368]	; (b8f8 <hif_handle_isr+0x364>)
    b788:	4798      	blx	r3
    b78a:	4866      	ldr	r0, [pc, #408]	; (b924 <hif_handle_isr+0x390>)
    b78c:	4b5c      	ldr	r3, [pc, #368]	; (b900 <hif_handle_isr+0x36c>)
    b78e:	4798      	blx	r3
    b790:	200d      	movs	r0, #13
    b792:	4b5c      	ldr	r3, [pc, #368]	; (b904 <hif_handle_isr+0x370>)
    b794:	4798      	blx	r3
    b796:	e785      	b.n	b6a4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    b798:	4b53      	ldr	r3, [pc, #332]	; (b8e8 <hif_handle_isr+0x354>)
    b79a:	69db      	ldr	r3, [r3, #28]
    b79c:	2b00      	cmp	r3, #0
    b79e:	d00b      	beq.n	b7b8 <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b7a0:	4b51      	ldr	r3, [pc, #324]	; (b8e8 <hif_handle_isr+0x354>)
    b7a2:	69db      	ldr	r3, [r3, #28]
    b7a4:	aa04      	add	r2, sp, #16
    b7a6:	7850      	ldrb	r0, [r2, #1]
    b7a8:	b2c0      	uxtb	r0, r0
    b7aa:	8851      	ldrh	r1, [r2, #2]
    b7ac:	9a05      	ldr	r2, [sp, #20]
    b7ae:	3208      	adds	r2, #8
    b7b0:	3908      	subs	r1, #8
    b7b2:	b289      	uxth	r1, r1
    b7b4:	4798      	blx	r3
    b7b6:	e775      	b.n	b6a4 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    b7b8:	4a5b      	ldr	r2, [pc, #364]	; (b928 <hif_handle_isr+0x394>)
    b7ba:	494d      	ldr	r1, [pc, #308]	; (b8f0 <hif_handle_isr+0x35c>)
    b7bc:	484d      	ldr	r0, [pc, #308]	; (b8f4 <hif_handle_isr+0x360>)
    b7be:	4b4e      	ldr	r3, [pc, #312]	; (b8f8 <hif_handle_isr+0x364>)
    b7c0:	4798      	blx	r3
    b7c2:	485a      	ldr	r0, [pc, #360]	; (b92c <hif_handle_isr+0x398>)
    b7c4:	4b4e      	ldr	r3, [pc, #312]	; (b900 <hif_handle_isr+0x36c>)
    b7c6:	4798      	blx	r3
    b7c8:	200d      	movs	r0, #13
    b7ca:	4b4e      	ldr	r3, [pc, #312]	; (b904 <hif_handle_isr+0x370>)
    b7cc:	4798      	blx	r3
    b7ce:	e769      	b.n	b6a4 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    b7d0:	4b45      	ldr	r3, [pc, #276]	; (b8e8 <hif_handle_isr+0x354>)
    b7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b7d4:	2b00      	cmp	r3, #0
    b7d6:	d100      	bne.n	b7da <hif_handle_isr+0x246>
    b7d8:	e764      	b.n	b6a4 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    b7da:	4b43      	ldr	r3, [pc, #268]	; (b8e8 <hif_handle_isr+0x354>)
    b7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b7de:	aa04      	add	r2, sp, #16
    b7e0:	7850      	ldrb	r0, [r2, #1]
    b7e2:	b2c0      	uxtb	r0, r0
    b7e4:	8851      	ldrh	r1, [r2, #2]
    b7e6:	9a05      	ldr	r2, [sp, #20]
    b7e8:	3208      	adds	r2, #8
    b7ea:	3908      	subs	r1, #8
    b7ec:	b289      	uxth	r1, r1
    b7ee:	4798      	blx	r3
    b7f0:	e758      	b.n	b6a4 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    b7f2:	4a4f      	ldr	r2, [pc, #316]	; (b930 <hif_handle_isr+0x39c>)
    b7f4:	493e      	ldr	r1, [pc, #248]	; (b8f0 <hif_handle_isr+0x35c>)
    b7f6:	483f      	ldr	r0, [pc, #252]	; (b8f4 <hif_handle_isr+0x360>)
    b7f8:	4c3f      	ldr	r4, [pc, #252]	; (b8f8 <hif_handle_isr+0x364>)
    b7fa:	47a0      	blx	r4
    b7fc:	ab04      	add	r3, sp, #16
    b7fe:	7819      	ldrb	r1, [r3, #0]
    b800:	b2c9      	uxtb	r1, r1
    b802:	785a      	ldrb	r2, [r3, #1]
    b804:	b2d2      	uxtb	r2, r2
    b806:	484b      	ldr	r0, [pc, #300]	; (b934 <hif_handle_isr+0x3a0>)
    b808:	47a0      	blx	r4
    b80a:	200d      	movs	r0, #13
    b80c:	4b3d      	ldr	r3, [pc, #244]	; (b904 <hif_handle_isr+0x370>)
    b80e:	4798      	blx	r3
					ret = hif_set_rx_done();
    b810:	4b49      	ldr	r3, [pc, #292]	; (b938 <hif_handle_isr+0x3a4>)
    b812:	4798      	blx	r3
    b814:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    b816:	d127      	bne.n	b868 <hif_handle_isr+0x2d4>
    b818:	e749      	b.n	b6ae <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    b81a:	4a48      	ldr	r2, [pc, #288]	; (b93c <hif_handle_isr+0x3a8>)
    b81c:	4934      	ldr	r1, [pc, #208]	; (b8f0 <hif_handle_isr+0x35c>)
    b81e:	4835      	ldr	r0, [pc, #212]	; (b8f4 <hif_handle_isr+0x360>)
    b820:	4b35      	ldr	r3, [pc, #212]	; (b8f8 <hif_handle_isr+0x364>)
    b822:	4798      	blx	r3
    b824:	4846      	ldr	r0, [pc, #280]	; (b940 <hif_handle_isr+0x3ac>)
    b826:	4b36      	ldr	r3, [pc, #216]	; (b900 <hif_handle_isr+0x36c>)
    b828:	4798      	blx	r3
    b82a:	200d      	movs	r0, #13
    b82c:	4b35      	ldr	r3, [pc, #212]	; (b904 <hif_handle_isr+0x370>)
    b82e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    b830:	2402      	movs	r4, #2
    b832:	4264      	negs	r4, r4
    b834:	e018      	b.n	b868 <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    b836:	4a43      	ldr	r2, [pc, #268]	; (b944 <hif_handle_isr+0x3b0>)
    b838:	492d      	ldr	r1, [pc, #180]	; (b8f0 <hif_handle_isr+0x35c>)
    b83a:	482e      	ldr	r0, [pc, #184]	; (b8f4 <hif_handle_isr+0x360>)
    b83c:	4c2e      	ldr	r4, [pc, #184]	; (b8f8 <hif_handle_isr+0x364>)
    b83e:	47a0      	blx	r4
    b840:	9903      	ldr	r1, [sp, #12]
    b842:	4841      	ldr	r0, [pc, #260]	; (b948 <hif_handle_isr+0x3b4>)
    b844:	47a0      	blx	r4
    b846:	200d      	movs	r0, #13
    b848:	4b2e      	ldr	r3, [pc, #184]	; (b904 <hif_handle_isr+0x370>)
    b84a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    b84c:	240c      	movs	r4, #12
    b84e:	4264      	negs	r4, r4
    b850:	e00a      	b.n	b868 <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    b852:	4a3e      	ldr	r2, [pc, #248]	; (b94c <hif_handle_isr+0x3b8>)
    b854:	4926      	ldr	r1, [pc, #152]	; (b8f0 <hif_handle_isr+0x35c>)
    b856:	4827      	ldr	r0, [pc, #156]	; (b8f4 <hif_handle_isr+0x360>)
    b858:	4b27      	ldr	r3, [pc, #156]	; (b8f8 <hif_handle_isr+0x364>)
    b85a:	4798      	blx	r3
    b85c:	483c      	ldr	r0, [pc, #240]	; (b950 <hif_handle_isr+0x3bc>)
    b85e:	4b28      	ldr	r3, [pc, #160]	; (b900 <hif_handle_isr+0x36c>)
    b860:	4798      	blx	r3
    b862:	200d      	movs	r0, #13
    b864:	4b27      	ldr	r3, [pc, #156]	; (b904 <hif_handle_isr+0x370>)
    b866:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    b868:	4a3a      	ldr	r2, [pc, #232]	; (b954 <hif_handle_isr+0x3c0>)
    b86a:	493b      	ldr	r1, [pc, #236]	; (b958 <hif_handle_isr+0x3c4>)
    b86c:	4821      	ldr	r0, [pc, #132]	; (b8f4 <hif_handle_isr+0x360>)
    b86e:	4f22      	ldr	r7, [pc, #136]	; (b8f8 <hif_handle_isr+0x364>)
    b870:	47b8      	blx	r7
    b872:	0021      	movs	r1, r4
    b874:	4839      	ldr	r0, [pc, #228]	; (b95c <hif_handle_isr+0x3c8>)
    b876:	47b8      	blx	r7
    b878:	200d      	movs	r0, #13
    b87a:	4b22      	ldr	r3, [pc, #136]	; (b904 <hif_handle_isr+0x370>)
    b87c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    b87e:	a903      	add	r1, sp, #12
    b880:	4837      	ldr	r0, [pc, #220]	; (b960 <hif_handle_isr+0x3cc>)
    b882:	47a8      	blx	r5
    b884:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    b886:	d1e4      	bne.n	b852 <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    b888:	9b03      	ldr	r3, [sp, #12]
    b88a:	07db      	lsls	r3, r3, #31
    b88c:	d5d3      	bpl.n	b836 <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    b88e:	2000      	movs	r0, #0
    b890:	4b1e      	ldr	r3, [pc, #120]	; (b90c <hif_handle_isr+0x378>)
    b892:	4798      	blx	r3
			reg &= ~NBIT0;
    b894:	2301      	movs	r3, #1
    b896:	9903      	ldr	r1, [sp, #12]
    b898:	4399      	bics	r1, r3
    b89a:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    b89c:	4830      	ldr	r0, [pc, #192]	; (b960 <hif_handle_isr+0x3cc>)
    b89e:	4b31      	ldr	r3, [pc, #196]	; (b964 <hif_handle_isr+0x3d0>)
    b8a0:	4798      	blx	r3
    b8a2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    b8a4:	d1e0      	bne.n	b868 <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    b8a6:	2201      	movs	r2, #1
    b8a8:	4b0f      	ldr	r3, [pc, #60]	; (b8e8 <hif_handle_isr+0x354>)
    b8aa:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    b8ac:	9b03      	ldr	r3, [sp, #12]
    b8ae:	049e      	lsls	r6, r3, #18
    b8b0:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    b8b2:	d0b2      	beq.n	b81a <hif_handle_isr+0x286>
				uint32 address = 0;
    b8b4:	2300      	movs	r3, #0
    b8b6:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    b8b8:	a905      	add	r1, sp, #20
    b8ba:	482b      	ldr	r0, [pc, #172]	; (b968 <hif_handle_isr+0x3d4>)
    b8bc:	4b15      	ldr	r3, [pc, #84]	; (b914 <hif_handle_isr+0x380>)
    b8be:	4798      	blx	r3
    b8c0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    b8c2:	d100      	bne.n	b8c6 <hif_handle_isr+0x332>
    b8c4:	e671      	b.n	b5aa <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    b8c6:	22e4      	movs	r2, #228	; 0xe4
    b8c8:	0052      	lsls	r2, r2, #1
    b8ca:	4909      	ldr	r1, [pc, #36]	; (b8f0 <hif_handle_isr+0x35c>)
    b8cc:	4809      	ldr	r0, [pc, #36]	; (b8f4 <hif_handle_isr+0x360>)
    b8ce:	4b0a      	ldr	r3, [pc, #40]	; (b8f8 <hif_handle_isr+0x364>)
    b8d0:	4798      	blx	r3
    b8d2:	4826      	ldr	r0, [pc, #152]	; (b96c <hif_handle_isr+0x3d8>)
    b8d4:	4b0a      	ldr	r3, [pc, #40]	; (b900 <hif_handle_isr+0x36c>)
    b8d6:	4798      	blx	r3
    b8d8:	200d      	movs	r0, #13
    b8da:	4b0a      	ldr	r3, [pc, #40]	; (b904 <hif_handle_isr+0x370>)
    b8dc:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    b8de:	2001      	movs	r0, #1
    b8e0:	4b0a      	ldr	r3, [pc, #40]	; (b90c <hif_handle_isr+0x378>)
    b8e2:	4798      	blx	r3
    b8e4:	e7c0      	b.n	b868 <hif_handle_isr+0x2d4>
    b8e6:	46c0      	nop			; (mov r8, r8)
    b8e8:	20000fa0 	.word	0x20000fa0
    b8ec:	0000c6b9 	.word	0x0000c6b9
    b8f0:	000189d4 	.word	0x000189d4
    b8f4:	00018980 	.word	0x00018980
    b8f8:	00016761 	.word	0x00016761
    b8fc:	00018b30 	.word	0x00018b30
    b900:	0001687d 	.word	0x0001687d
    b904:	00016795 	.word	0x00016795
    b908:	00018a2c 	.word	0x00018a2c
    b90c:	0000af5d 	.word	0x0000af5d
    b910:	00018a44 	.word	0x00018a44
    b914:	0000c6a1 	.word	0x0000c6a1
    b918:	00018a84 	.word	0x00018a84
    b91c:	00018aa4 	.word	0x00018aa4
    b920:	00018ac8 	.word	0x00018ac8
    b924:	00018ae8 	.word	0x00018ae8
    b928:	00000207 	.word	0x00000207
    b92c:	00018b0c 	.word	0x00018b0c
    b930:	00000216 	.word	0x00000216
    b934:	00018b48 	.word	0x00018b48
    b938:	0000b291 	.word	0x0000b291
    b93c:	0000021d 	.word	0x0000021d
    b940:	00018b74 	.word	0x00018b74
    b944:	00000225 	.word	0x00000225
    b948:	00018b88 	.word	0x00018b88
    b94c:	0000022e 	.word	0x0000022e
    b950:	00018ba4 	.word	0x00018ba4
    b954:	00000257 	.word	0x00000257
    b958:	000189dc 	.word	0x000189dc
    b95c:	00018bc8 	.word	0x00018bc8
    b960:	00001070 	.word	0x00001070
    b964:	0000c6ad 	.word	0x0000c6ad
    b968:	00001084 	.word	0x00001084
    b96c:	00018a08 	.word	0x00018a08
			}
		}
	}

	return ret;
}
    b970:	2000      	movs	r0, #0
    b972:	b007      	add	sp, #28
    b974:	bc0c      	pop	{r2, r3}
    b976:	4690      	mov	r8, r2
    b978:	4699      	mov	r9, r3
    b97a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b97c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    b97c:	b570      	push	{r4, r5, r6, lr}
    b97e:	0014      	movs	r4, r2
    b980:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    b982:	2800      	cmp	r0, #0
    b984:	d003      	beq.n	b98e <hif_receive+0x12>
    b986:	2900      	cmp	r1, #0
    b988:	d001      	beq.n	b98e <hif_receive+0x12>
    b98a:	2a00      	cmp	r2, #0
    b98c:	d113      	bne.n	b9b6 <hif_receive+0x3a>
	{
		if(isDone)
    b98e:	2d00      	cmp	r5, #0
    b990:	d002      	beq.n	b998 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    b992:	4b28      	ldr	r3, [pc, #160]	; (ba34 <hif_receive+0xb8>)
    b994:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    b996:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    b998:	229e      	movs	r2, #158	; 0x9e
    b99a:	0092      	lsls	r2, r2, #2
    b99c:	4926      	ldr	r1, [pc, #152]	; (ba38 <hif_receive+0xbc>)
    b99e:	4827      	ldr	r0, [pc, #156]	; (ba3c <hif_receive+0xc0>)
    b9a0:	4b27      	ldr	r3, [pc, #156]	; (ba40 <hif_receive+0xc4>)
    b9a2:	4798      	blx	r3
    b9a4:	4827      	ldr	r0, [pc, #156]	; (ba44 <hif_receive+0xc8>)
    b9a6:	4b28      	ldr	r3, [pc, #160]	; (ba48 <hif_receive+0xcc>)
    b9a8:	4798      	blx	r3
    b9aa:	200d      	movs	r0, #13
    b9ac:	4b27      	ldr	r3, [pc, #156]	; (ba4c <hif_receive+0xd0>)
    b9ae:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    b9b0:	200c      	movs	r0, #12
    b9b2:	4240      	negs	r0, r0
    b9b4:	e7ef      	b.n	b996 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    b9b6:	4b26      	ldr	r3, [pc, #152]	; (ba50 <hif_receive+0xd4>)
    b9b8:	68db      	ldr	r3, [r3, #12]
    b9ba:	429a      	cmp	r2, r3
    b9bc:	d81a      	bhi.n	b9f4 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    b9be:	4b24      	ldr	r3, [pc, #144]	; (ba50 <hif_receive+0xd4>)
    b9c0:	689b      	ldr	r3, [r3, #8]
    b9c2:	4298      	cmp	r0, r3
    b9c4:	d327      	bcc.n	ba16 <hif_receive+0x9a>
    b9c6:	1886      	adds	r6, r0, r2
    b9c8:	4a21      	ldr	r2, [pc, #132]	; (ba50 <hif_receive+0xd4>)
    b9ca:	6893      	ldr	r3, [r2, #8]
    b9cc:	68d2      	ldr	r2, [r2, #12]
    b9ce:	189b      	adds	r3, r3, r2
    b9d0:	429e      	cmp	r6, r3
    b9d2:	d820      	bhi.n	ba16 <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    b9d4:	0022      	movs	r2, r4
    b9d6:	4b1f      	ldr	r3, [pc, #124]	; (ba54 <hif_receive+0xd8>)
    b9d8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    b9da:	2800      	cmp	r0, #0
    b9dc:	d1db      	bne.n	b996 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    b9de:	4a1c      	ldr	r2, [pc, #112]	; (ba50 <hif_receive+0xd4>)
    b9e0:	6893      	ldr	r3, [r2, #8]
    b9e2:	68d2      	ldr	r2, [r2, #12]
    b9e4:	189b      	adds	r3, r3, r2
    b9e6:	429e      	cmp	r6, r3
    b9e8:	d001      	beq.n	b9ee <hif_receive+0x72>
    b9ea:	2d00      	cmp	r5, #0
    b9ec:	d0d3      	beq.n	b996 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    b9ee:	4b11      	ldr	r3, [pc, #68]	; (ba34 <hif_receive+0xb8>)
    b9f0:	4798      	blx	r3
    b9f2:	e7d0      	b.n	b996 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    b9f4:	22a0      	movs	r2, #160	; 0xa0
    b9f6:	0092      	lsls	r2, r2, #2
    b9f8:	490f      	ldr	r1, [pc, #60]	; (ba38 <hif_receive+0xbc>)
    b9fa:	4810      	ldr	r0, [pc, #64]	; (ba3c <hif_receive+0xc0>)
    b9fc:	4d10      	ldr	r5, [pc, #64]	; (ba40 <hif_receive+0xc4>)
    b9fe:	47a8      	blx	r5
    ba00:	4b13      	ldr	r3, [pc, #76]	; (ba50 <hif_receive+0xd4>)
    ba02:	68da      	ldr	r2, [r3, #12]
    ba04:	0021      	movs	r1, r4
    ba06:	4814      	ldr	r0, [pc, #80]	; (ba58 <hif_receive+0xdc>)
    ba08:	47a8      	blx	r5
    ba0a:	200d      	movs	r0, #13
    ba0c:	4b0f      	ldr	r3, [pc, #60]	; (ba4c <hif_receive+0xd0>)
    ba0e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    ba10:	200c      	movs	r0, #12
    ba12:	4240      	negs	r0, r0
		goto ERR1;
    ba14:	e7bf      	b.n	b996 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    ba16:	4a11      	ldr	r2, [pc, #68]	; (ba5c <hif_receive+0xe0>)
    ba18:	4907      	ldr	r1, [pc, #28]	; (ba38 <hif_receive+0xbc>)
    ba1a:	4808      	ldr	r0, [pc, #32]	; (ba3c <hif_receive+0xc0>)
    ba1c:	4b08      	ldr	r3, [pc, #32]	; (ba40 <hif_receive+0xc4>)
    ba1e:	4798      	blx	r3
    ba20:	480f      	ldr	r0, [pc, #60]	; (ba60 <hif_receive+0xe4>)
    ba22:	4b09      	ldr	r3, [pc, #36]	; (ba48 <hif_receive+0xcc>)
    ba24:	4798      	blx	r3
    ba26:	200d      	movs	r0, #13
    ba28:	4b08      	ldr	r3, [pc, #32]	; (ba4c <hif_receive+0xd0>)
    ba2a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    ba2c:	200c      	movs	r0, #12
    ba2e:	4240      	negs	r0, r0
		goto ERR1;
    ba30:	e7b1      	b.n	b996 <hif_receive+0x1a>
    ba32:	46c0      	nop			; (mov r8, r8)
    ba34:	0000b291 	.word	0x0000b291
    ba38:	000189ec 	.word	0x000189ec
    ba3c:	00018980 	.word	0x00018980
    ba40:	00016761 	.word	0x00016761
    ba44:	00018bf8 	.word	0x00018bf8
    ba48:	0001687d 	.word	0x0001687d
    ba4c:	00016795 	.word	0x00016795
    ba50:	20000fa0 	.word	0x20000fa0
    ba54:	0000c6b9 	.word	0x0000c6b9
    ba58:	00018c18 	.word	0x00018c18
    ba5c:	00000286 	.word	0x00000286
    ba60:	00018c60 	.word	0x00018c60

0000ba64 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    ba64:	b570      	push	{r4, r5, r6, lr}
    ba66:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    ba68:	2807      	cmp	r0, #7
    ba6a:	d81f      	bhi.n	baac <hif_register_cb+0x48>
    ba6c:	0083      	lsls	r3, r0, #2
    ba6e:	4a16      	ldr	r2, [pc, #88]	; (bac8 <hif_register_cb+0x64>)
    ba70:	58d3      	ldr	r3, [r2, r3]
    ba72:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    ba74:	4b15      	ldr	r3, [pc, #84]	; (bacc <hif_register_cb+0x68>)
    ba76:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    ba78:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    ba7a:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    ba7c:	4b13      	ldr	r3, [pc, #76]	; (bacc <hif_register_cb+0x68>)
    ba7e:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    ba80:	2000      	movs	r0, #0
			break;
    ba82:	e7fa      	b.n	ba7a <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    ba84:	4b11      	ldr	r3, [pc, #68]	; (bacc <hif_register_cb+0x68>)
    ba86:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    ba88:	2000      	movs	r0, #0
			break;
    ba8a:	e7f6      	b.n	ba7a <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    ba8c:	4b0f      	ldr	r3, [pc, #60]	; (bacc <hif_register_cb+0x68>)
    ba8e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    ba90:	2000      	movs	r0, #0
			break;
    ba92:	e7f2      	b.n	ba7a <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    ba94:	4b0d      	ldr	r3, [pc, #52]	; (bacc <hif_register_cb+0x68>)
    ba96:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    ba98:	2000      	movs	r0, #0
			break;
    ba9a:	e7ee      	b.n	ba7a <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    ba9c:	4b0b      	ldr	r3, [pc, #44]	; (bacc <hif_register_cb+0x68>)
    ba9e:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    baa0:	2000      	movs	r0, #0
			break;
    baa2:	e7ea      	b.n	ba7a <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    baa4:	4b09      	ldr	r3, [pc, #36]	; (bacc <hif_register_cb+0x68>)
    baa6:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    baa8:	2000      	movs	r0, #0
			break;
    baaa:	e7e6      	b.n	ba7a <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    baac:	4a08      	ldr	r2, [pc, #32]	; (bad0 <hif_register_cb+0x6c>)
    baae:	4909      	ldr	r1, [pc, #36]	; (bad4 <hif_register_cb+0x70>)
    bab0:	4809      	ldr	r0, [pc, #36]	; (bad8 <hif_register_cb+0x74>)
    bab2:	4d0a      	ldr	r5, [pc, #40]	; (badc <hif_register_cb+0x78>)
    bab4:	47a8      	blx	r5
    bab6:	0021      	movs	r1, r4
    bab8:	4809      	ldr	r0, [pc, #36]	; (bae0 <hif_register_cb+0x7c>)
    baba:	47a8      	blx	r5
    babc:	200d      	movs	r0, #13
    babe:	4b09      	ldr	r3, [pc, #36]	; (bae4 <hif_register_cb+0x80>)
    bac0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    bac2:	200c      	movs	r0, #12
    bac4:	4240      	negs	r0, r0
			break;
    bac6:	e7d8      	b.n	ba7a <hif_register_cb+0x16>
    bac8:	000189a8 	.word	0x000189a8
    bacc:	20000fa0 	.word	0x20000fa0
    bad0:	000002be 	.word	0x000002be
    bad4:	000189f8 	.word	0x000189f8
    bad8:	00018980 	.word	0x00018980
    badc:	00016761 	.word	0x00016761
    bae0:	00018ca4 	.word	0x00018ca4
    bae4:	00016795 	.word	0x00016795

0000bae8 <hif_init>:
{
    bae8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    baea:	222c      	movs	r2, #44	; 0x2c
    baec:	2100      	movs	r1, #0
    baee:	4806      	ldr	r0, [pc, #24]	; (bb08 <hif_init+0x20>)
    baf0:	4b06      	ldr	r3, [pc, #24]	; (bb0c <hif_init+0x24>)
    baf2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    baf4:	4806      	ldr	r0, [pc, #24]	; (bb10 <hif_init+0x28>)
    baf6:	4b07      	ldr	r3, [pc, #28]	; (bb14 <hif_init+0x2c>)
    baf8:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    bafa:	4907      	ldr	r1, [pc, #28]	; (bb18 <hif_init+0x30>)
    bafc:	2003      	movs	r0, #3
    bafe:	4b07      	ldr	r3, [pc, #28]	; (bb1c <hif_init+0x34>)
    bb00:	4798      	blx	r3
}
    bb02:	2000      	movs	r0, #0
    bb04:	bd10      	pop	{r4, pc}
    bb06:	46c0      	nop			; (mov r8, r8)
    bb08:	20000fa0 	.word	0x20000fa0
    bb0c:	0000b251 	.word	0x0000b251
    bb10:	0000b27d 	.word	0x0000b27d
    bb14:	0000af05 	.word	0x0000af05
    bb18:	0000b28d 	.word	0x0000b28d
    bb1c:	0000ba65 	.word	0x0000ba65

0000bb20 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    bb20:	b530      	push	{r4, r5, lr}
    bb22:	b09f      	sub	sp, #124	; 0x7c
    bb24:	0004      	movs	r4, r0
    bb26:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    bb28:	282c      	cmp	r0, #44	; 0x2c
    bb2a:	d02f      	beq.n	bb8c <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    bb2c:	281b      	cmp	r0, #27
    bb2e:	d03d      	beq.n	bbac <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    bb30:	2806      	cmp	r0, #6
    bb32:	d04b      	beq.n	bbcc <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    bb34:	280e      	cmp	r0, #14
    bb36:	d027      	beq.n	bb88 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    bb38:	2832      	cmp	r0, #50	; 0x32
    bb3a:	d057      	beq.n	bbec <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    bb3c:	282f      	cmp	r0, #47	; 0x2f
    bb3e:	d065      	beq.n	bc0c <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    bb40:	2834      	cmp	r0, #52	; 0x34
    bb42:	d100      	bne.n	bb46 <m2m_wifi_cb+0x26>
    bb44:	e077      	b.n	bc36 <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    bb46:	2811      	cmp	r0, #17
    bb48:	d100      	bne.n	bb4c <m2m_wifi_cb+0x2c>
    bb4a:	e096      	b.n	bc7a <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    bb4c:	2813      	cmp	r0, #19
    bb4e:	d100      	bne.n	bb52 <m2m_wifi_cb+0x32>
    bb50:	e0ac      	b.n	bcac <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    bb52:	2804      	cmp	r0, #4
    bb54:	d100      	bne.n	bb58 <m2m_wifi_cb+0x38>
    bb56:	e0bb      	b.n	bcd0 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    bb58:	2865      	cmp	r0, #101	; 0x65
    bb5a:	d100      	bne.n	bb5e <m2m_wifi_cb+0x3e>
    bb5c:	e0ca      	b.n	bcf4 <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    bb5e:	2809      	cmp	r0, #9
    bb60:	d100      	bne.n	bb64 <m2m_wifi_cb+0x44>
    bb62:	e0d9      	b.n	bd18 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    bb64:	282a      	cmp	r0, #42	; 0x2a
    bb66:	d100      	bne.n	bb6a <m2m_wifi_cb+0x4a>
    bb68:	e0e8      	b.n	bd3c <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    bb6a:	2820      	cmp	r0, #32
    bb6c:	d100      	bne.n	bb70 <m2m_wifi_cb+0x50>
    bb6e:	e0f7      	b.n	bd60 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    bb70:	2224      	movs	r2, #36	; 0x24
    bb72:	32ff      	adds	r2, #255	; 0xff
    bb74:	4989      	ldr	r1, [pc, #548]	; (bd9c <m2m_wifi_cb+0x27c>)
    bb76:	488a      	ldr	r0, [pc, #552]	; (bda0 <m2m_wifi_cb+0x280>)
    bb78:	4d8a      	ldr	r5, [pc, #552]	; (bda4 <m2m_wifi_cb+0x284>)
    bb7a:	47a8      	blx	r5
    bb7c:	0021      	movs	r1, r4
    bb7e:	488a      	ldr	r0, [pc, #552]	; (bda8 <m2m_wifi_cb+0x288>)
    bb80:	47a8      	blx	r5
    bb82:	200d      	movs	r0, #13
    bb84:	4b89      	ldr	r3, [pc, #548]	; (bdac <m2m_wifi_cb+0x28c>)
    bb86:	4798      	blx	r3
	}
}
    bb88:	b01f      	add	sp, #124	; 0x7c
    bb8a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    bb8c:	2300      	movs	r3, #0
    bb8e:	2204      	movs	r2, #4
    bb90:	a903      	add	r1, sp, #12
    bb92:	0028      	movs	r0, r5
    bb94:	4c86      	ldr	r4, [pc, #536]	; (bdb0 <m2m_wifi_cb+0x290>)
    bb96:	47a0      	blx	r4
    bb98:	2800      	cmp	r0, #0
    bb9a:	d1f5      	bne.n	bb88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bb9c:	4b85      	ldr	r3, [pc, #532]	; (bdb4 <m2m_wifi_cb+0x294>)
    bb9e:	681b      	ldr	r3, [r3, #0]
    bba0:	2b00      	cmp	r3, #0
    bba2:	d0f1      	beq.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    bba4:	a903      	add	r1, sp, #12
    bba6:	302c      	adds	r0, #44	; 0x2c
    bba8:	4798      	blx	r3
    bbaa:	e7ed      	b.n	bb88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    bbac:	2300      	movs	r3, #0
    bbae:	2208      	movs	r2, #8
    bbb0:	a903      	add	r1, sp, #12
    bbb2:	0028      	movs	r0, r5
    bbb4:	4c7e      	ldr	r4, [pc, #504]	; (bdb0 <m2m_wifi_cb+0x290>)
    bbb6:	47a0      	blx	r4
    bbb8:	2800      	cmp	r0, #0
    bbba:	d1e5      	bne.n	bb88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bbbc:	4b7d      	ldr	r3, [pc, #500]	; (bdb4 <m2m_wifi_cb+0x294>)
    bbbe:	681b      	ldr	r3, [r3, #0]
    bbc0:	2b00      	cmp	r3, #0
    bbc2:	d0e1      	beq.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    bbc4:	a903      	add	r1, sp, #12
    bbc6:	301b      	adds	r0, #27
    bbc8:	4798      	blx	r3
    bbca:	e7dd      	b.n	bb88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    bbcc:	2301      	movs	r3, #1
    bbce:	2230      	movs	r2, #48	; 0x30
    bbd0:	a903      	add	r1, sp, #12
    bbd2:	0028      	movs	r0, r5
    bbd4:	4c76      	ldr	r4, [pc, #472]	; (bdb0 <m2m_wifi_cb+0x290>)
    bbd6:	47a0      	blx	r4
    bbd8:	2800      	cmp	r0, #0
    bbda:	d1d5      	bne.n	bb88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    bbdc:	4b75      	ldr	r3, [pc, #468]	; (bdb4 <m2m_wifi_cb+0x294>)
    bbde:	681b      	ldr	r3, [r3, #0]
    bbe0:	2b00      	cmp	r3, #0
    bbe2:	d0d1      	beq.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    bbe4:	a903      	add	r1, sp, #12
    bbe6:	3006      	adds	r0, #6
    bbe8:	4798      	blx	r3
    bbea:	e7cd      	b.n	bb88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    bbec:	2300      	movs	r3, #0
    bbee:	2218      	movs	r2, #24
    bbf0:	a903      	add	r1, sp, #12
    bbf2:	0028      	movs	r0, r5
    bbf4:	4c6e      	ldr	r4, [pc, #440]	; (bdb0 <m2m_wifi_cb+0x290>)
    bbf6:	47a0      	blx	r4
    bbf8:	2800      	cmp	r0, #0
    bbfa:	d1c5      	bne.n	bb88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bbfc:	4b6d      	ldr	r3, [pc, #436]	; (bdb4 <m2m_wifi_cb+0x294>)
    bbfe:	681b      	ldr	r3, [r3, #0]
    bc00:	2b00      	cmp	r3, #0
    bc02:	d0c1      	beq.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    bc04:	a903      	add	r1, sp, #12
    bc06:	3032      	adds	r0, #50	; 0x32
    bc08:	4798      	blx	r3
    bc0a:	e7bd      	b.n	bb88 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    bc0c:	2264      	movs	r2, #100	; 0x64
    bc0e:	2100      	movs	r1, #0
    bc10:	a803      	add	r0, sp, #12
    bc12:	4b69      	ldr	r3, [pc, #420]	; (bdb8 <m2m_wifi_cb+0x298>)
    bc14:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    bc16:	2300      	movs	r3, #0
    bc18:	2264      	movs	r2, #100	; 0x64
    bc1a:	a903      	add	r1, sp, #12
    bc1c:	0028      	movs	r0, r5
    bc1e:	4c64      	ldr	r4, [pc, #400]	; (bdb0 <m2m_wifi_cb+0x290>)
    bc20:	47a0      	blx	r4
    bc22:	2800      	cmp	r0, #0
    bc24:	d1b0      	bne.n	bb88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bc26:	4b63      	ldr	r3, [pc, #396]	; (bdb4 <m2m_wifi_cb+0x294>)
    bc28:	681b      	ldr	r3, [r3, #0]
    bc2a:	2b00      	cmp	r3, #0
    bc2c:	d0ac      	beq.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    bc2e:	a903      	add	r1, sp, #12
    bc30:	302f      	adds	r0, #47	; 0x2f
    bc32:	4798      	blx	r3
    bc34:	e7a8      	b.n	bb88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    bc36:	2300      	movs	r3, #0
    bc38:	2204      	movs	r2, #4
    bc3a:	a903      	add	r1, sp, #12
    bc3c:	0028      	movs	r0, r5
    bc3e:	4c5c      	ldr	r4, [pc, #368]	; (bdb0 <m2m_wifi_cb+0x290>)
    bc40:	47a0      	blx	r4
    bc42:	2800      	cmp	r0, #0
    bc44:	d1a0      	bne.n	bb88 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    bc46:	485d      	ldr	r0, [pc, #372]	; (bdbc <m2m_wifi_cb+0x29c>)
    bc48:	4d56      	ldr	r5, [pc, #344]	; (bda4 <m2m_wifi_cb+0x284>)
    bc4a:	47a8      	blx	r5
    bc4c:	9c03      	ldr	r4, [sp, #12]
    bc4e:	0a23      	lsrs	r3, r4, #8
    bc50:	20ff      	movs	r0, #255	; 0xff
    bc52:	4003      	ands	r3, r0
    bc54:	0c22      	lsrs	r2, r4, #16
    bc56:	4002      	ands	r2, r0
    bc58:	0e21      	lsrs	r1, r4, #24
    bc5a:	4020      	ands	r0, r4
    bc5c:	9000      	str	r0, [sp, #0]
    bc5e:	4858      	ldr	r0, [pc, #352]	; (bdc0 <m2m_wifi_cb+0x2a0>)
    bc60:	47a8      	blx	r5
    bc62:	200d      	movs	r0, #13
    bc64:	4b51      	ldr	r3, [pc, #324]	; (bdac <m2m_wifi_cb+0x28c>)
    bc66:	4798      	blx	r3
			if (gpfAppWifiCb)
    bc68:	4b52      	ldr	r3, [pc, #328]	; (bdb4 <m2m_wifi_cb+0x294>)
    bc6a:	681b      	ldr	r3, [r3, #0]
    bc6c:	2b00      	cmp	r3, #0
    bc6e:	d100      	bne.n	bc72 <m2m_wifi_cb+0x152>
    bc70:	e78a      	b.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    bc72:	2100      	movs	r1, #0
    bc74:	2034      	movs	r0, #52	; 0x34
    bc76:	4798      	blx	r3
    bc78:	e786      	b.n	bb88 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    bc7a:	2200      	movs	r2, #0
    bc7c:	4b51      	ldr	r3, [pc, #324]	; (bdc4 <m2m_wifi_cb+0x2a4>)
    bc7e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    bc80:	2300      	movs	r3, #0
    bc82:	3204      	adds	r2, #4
    bc84:	a903      	add	r1, sp, #12
    bc86:	0028      	movs	r0, r5
    bc88:	4c49      	ldr	r4, [pc, #292]	; (bdb0 <m2m_wifi_cb+0x290>)
    bc8a:	47a0      	blx	r4
    bc8c:	2800      	cmp	r0, #0
    bc8e:	d000      	beq.n	bc92 <m2m_wifi_cb+0x172>
    bc90:	e77a      	b.n	bb88 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    bc92:	ab03      	add	r3, sp, #12
    bc94:	781a      	ldrb	r2, [r3, #0]
    bc96:	4b4c      	ldr	r3, [pc, #304]	; (bdc8 <m2m_wifi_cb+0x2a8>)
    bc98:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    bc9a:	4b46      	ldr	r3, [pc, #280]	; (bdb4 <m2m_wifi_cb+0x294>)
    bc9c:	681b      	ldr	r3, [r3, #0]
    bc9e:	2b00      	cmp	r3, #0
    bca0:	d100      	bne.n	bca4 <m2m_wifi_cb+0x184>
    bca2:	e771      	b.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    bca4:	a903      	add	r1, sp, #12
    bca6:	3011      	adds	r0, #17
    bca8:	4798      	blx	r3
    bcaa:	e76d      	b.n	bb88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    bcac:	2300      	movs	r3, #0
    bcae:	222c      	movs	r2, #44	; 0x2c
    bcb0:	a903      	add	r1, sp, #12
    bcb2:	0028      	movs	r0, r5
    bcb4:	4c3e      	ldr	r4, [pc, #248]	; (bdb0 <m2m_wifi_cb+0x290>)
    bcb6:	47a0      	blx	r4
    bcb8:	2800      	cmp	r0, #0
    bcba:	d000      	beq.n	bcbe <m2m_wifi_cb+0x19e>
    bcbc:	e764      	b.n	bb88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bcbe:	4b3d      	ldr	r3, [pc, #244]	; (bdb4 <m2m_wifi_cb+0x294>)
    bcc0:	681b      	ldr	r3, [r3, #0]
    bcc2:	2b00      	cmp	r3, #0
    bcc4:	d100      	bne.n	bcc8 <m2m_wifi_cb+0x1a8>
    bcc6:	e75f      	b.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    bcc8:	a903      	add	r1, sp, #12
    bcca:	3013      	adds	r0, #19
    bccc:	4798      	blx	r3
    bcce:	e75b      	b.n	bb88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    bcd0:	2300      	movs	r3, #0
    bcd2:	2204      	movs	r2, #4
    bcd4:	a91c      	add	r1, sp, #112	; 0x70
    bcd6:	0028      	movs	r0, r5
    bcd8:	4c35      	ldr	r4, [pc, #212]	; (bdb0 <m2m_wifi_cb+0x290>)
    bcda:	47a0      	blx	r4
    bcdc:	2800      	cmp	r0, #0
    bcde:	d000      	beq.n	bce2 <m2m_wifi_cb+0x1c2>
    bce0:	e752      	b.n	bb88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bce2:	4b34      	ldr	r3, [pc, #208]	; (bdb4 <m2m_wifi_cb+0x294>)
    bce4:	681b      	ldr	r3, [r3, #0]
    bce6:	2b00      	cmp	r3, #0
    bce8:	d100      	bne.n	bcec <m2m_wifi_cb+0x1cc>
    bcea:	e74d      	b.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    bcec:	a91c      	add	r1, sp, #112	; 0x70
    bcee:	3004      	adds	r0, #4
    bcf0:	4798      	blx	r3
    bcf2:	e749      	b.n	bb88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    bcf4:	2300      	movs	r3, #0
    bcf6:	2204      	movs	r2, #4
    bcf8:	a91c      	add	r1, sp, #112	; 0x70
    bcfa:	0028      	movs	r0, r5
    bcfc:	4c2c      	ldr	r4, [pc, #176]	; (bdb0 <m2m_wifi_cb+0x290>)
    bcfe:	47a0      	blx	r4
    bd00:	2800      	cmp	r0, #0
    bd02:	d000      	beq.n	bd06 <m2m_wifi_cb+0x1e6>
    bd04:	e740      	b.n	bb88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    bd06:	4b2b      	ldr	r3, [pc, #172]	; (bdb4 <m2m_wifi_cb+0x294>)
    bd08:	681b      	ldr	r3, [r3, #0]
    bd0a:	2b00      	cmp	r3, #0
    bd0c:	d100      	bne.n	bd10 <m2m_wifi_cb+0x1f0>
    bd0e:	e73b      	b.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    bd10:	a91c      	add	r1, sp, #112	; 0x70
    bd12:	3065      	adds	r0, #101	; 0x65
    bd14:	4798      	blx	r3
    bd16:	e737      	b.n	bb88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    bd18:	2301      	movs	r3, #1
    bd1a:	2264      	movs	r2, #100	; 0x64
    bd1c:	a903      	add	r1, sp, #12
    bd1e:	0028      	movs	r0, r5
    bd20:	4c23      	ldr	r4, [pc, #140]	; (bdb0 <m2m_wifi_cb+0x290>)
    bd22:	47a0      	blx	r4
    bd24:	2800      	cmp	r0, #0
    bd26:	d000      	beq.n	bd2a <m2m_wifi_cb+0x20a>
    bd28:	e72e      	b.n	bb88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    bd2a:	4b22      	ldr	r3, [pc, #136]	; (bdb4 <m2m_wifi_cb+0x294>)
    bd2c:	681b      	ldr	r3, [r3, #0]
    bd2e:	2b00      	cmp	r3, #0
    bd30:	d100      	bne.n	bd34 <m2m_wifi_cb+0x214>
    bd32:	e729      	b.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    bd34:	a903      	add	r1, sp, #12
    bd36:	3009      	adds	r0, #9
    bd38:	4798      	blx	r3
    bd3a:	e725      	b.n	bb88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    bd3c:	2301      	movs	r3, #1
    bd3e:	2204      	movs	r2, #4
    bd40:	a903      	add	r1, sp, #12
    bd42:	0028      	movs	r0, r5
    bd44:	4c1a      	ldr	r4, [pc, #104]	; (bdb0 <m2m_wifi_cb+0x290>)
    bd46:	47a0      	blx	r4
    bd48:	2800      	cmp	r0, #0
    bd4a:	d000      	beq.n	bd4e <m2m_wifi_cb+0x22e>
    bd4c:	e71c      	b.n	bb88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    bd4e:	4b19      	ldr	r3, [pc, #100]	; (bdb4 <m2m_wifi_cb+0x294>)
    bd50:	681b      	ldr	r3, [r3, #0]
    bd52:	2b00      	cmp	r3, #0
    bd54:	d100      	bne.n	bd58 <m2m_wifi_cb+0x238>
    bd56:	e717      	b.n	bb88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    bd58:	a903      	add	r1, sp, #12
    bd5a:	302a      	adds	r0, #42	; 0x2a
    bd5c:	4798      	blx	r3
    bd5e:	e713      	b.n	bb88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    bd60:	2300      	movs	r3, #0
    bd62:	2208      	movs	r2, #8
    bd64:	a903      	add	r1, sp, #12
    bd66:	0028      	movs	r0, r5
    bd68:	4c11      	ldr	r4, [pc, #68]	; (bdb0 <m2m_wifi_cb+0x290>)
    bd6a:	47a0      	blx	r4
    bd6c:	2800      	cmp	r0, #0
    bd6e:	d000      	beq.n	bd72 <m2m_wifi_cb+0x252>
    bd70:	e70a      	b.n	bb88 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    bd72:	ab03      	add	r3, sp, #12
    bd74:	889a      	ldrh	r2, [r3, #4]
    bd76:	0028      	movs	r0, r5
    bd78:	3008      	adds	r0, #8
    bd7a:	2301      	movs	r3, #1
    bd7c:	9903      	ldr	r1, [sp, #12]
    bd7e:	4c0c      	ldr	r4, [pc, #48]	; (bdb0 <m2m_wifi_cb+0x290>)
    bd80:	47a0      	blx	r4
    bd82:	2800      	cmp	r0, #0
    bd84:	d000      	beq.n	bd88 <m2m_wifi_cb+0x268>
    bd86:	e6ff      	b.n	bb88 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    bd88:	4b0a      	ldr	r3, [pc, #40]	; (bdb4 <m2m_wifi_cb+0x294>)
    bd8a:	681b      	ldr	r3, [r3, #0]
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	d100      	bne.n	bd92 <m2m_wifi_cb+0x272>
    bd90:	e6fa      	b.n	bb88 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    bd92:	a903      	add	r1, sp, #12
    bd94:	3020      	adds	r0, #32
    bd96:	4798      	blx	r3
    bd98:	e6f6      	b.n	bb88 <m2m_wifi_cb+0x68>
    bd9a:	46c0      	nop			; (mov r8, r8)
    bd9c:	00018ce8 	.word	0x00018ce8
    bda0:	00018980 	.word	0x00018980
    bda4:	00016761 	.word	0x00016761
    bda8:	00018d38 	.word	0x00018d38
    bdac:	00016795 	.word	0x00016795
    bdb0:	0000b97d 	.word	0x0000b97d
    bdb4:	200003e0 	.word	0x200003e0
    bdb8:	0000b251 	.word	0x0000b251
    bdbc:	00018cb0 	.word	0x00018cb0
    bdc0:	00018d18 	.word	0x00018d18
    bdc4:	200003e5 	.word	0x200003e5
    bdc8:	200003e4 	.word	0x200003e4

0000bdcc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdce:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    bdd0:	2201      	movs	r2, #1
    bdd2:	230f      	movs	r3, #15
    bdd4:	446b      	add	r3, sp
    bdd6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    bdd8:	2800      	cmp	r0, #0
    bdda:	d061      	beq.n	bea0 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    bddc:	6802      	ldr	r2, [r0, #0]
    bdde:	4b32      	ldr	r3, [pc, #200]	; (bea8 <m2m_wifi_init+0xdc>)
    bde0:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    bde2:	2200      	movs	r2, #0
    bde4:	4b31      	ldr	r3, [pc, #196]	; (beac <m2m_wifi_init+0xe0>)
    bde6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    bde8:	200f      	movs	r0, #15
    bdea:	4468      	add	r0, sp
    bdec:	4b30      	ldr	r3, [pc, #192]	; (beb0 <m2m_wifi_init+0xe4>)
    bdee:	4798      	blx	r3
    bdf0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    bdf2:	d002      	beq.n	bdfa <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    bdf4:	0020      	movs	r0, r4
    bdf6:	b00f      	add	sp, #60	; 0x3c
    bdf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    bdfa:	2000      	movs	r0, #0
    bdfc:	4b2d      	ldr	r3, [pc, #180]	; (beb4 <m2m_wifi_init+0xe8>)
    bdfe:	4798      	blx	r3
    be00:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    be02:	d149      	bne.n	be98 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    be04:	492c      	ldr	r1, [pc, #176]	; (beb8 <m2m_wifi_init+0xec>)
    be06:	2001      	movs	r0, #1
    be08:	4b2c      	ldr	r3, [pc, #176]	; (bebc <m2m_wifi_init+0xf0>)
    be0a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    be0c:	ae04      	add	r6, sp, #16
    be0e:	0030      	movs	r0, r6
    be10:	4b2b      	ldr	r3, [pc, #172]	; (bec0 <m2m_wifi_init+0xf4>)
    be12:	4798      	blx	r3
    be14:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    be16:	482b      	ldr	r0, [pc, #172]	; (bec4 <m2m_wifi_init+0xf8>)
    be18:	4d2b      	ldr	r5, [pc, #172]	; (bec8 <m2m_wifi_init+0xfc>)
    be1a:	47a8      	blx	r5
    be1c:	79b3      	ldrb	r3, [r6, #6]
    be1e:	7972      	ldrb	r2, [r6, #5]
    be20:	7931      	ldrb	r1, [r6, #4]
    be22:	8c30      	ldrh	r0, [r6, #32]
    be24:	9000      	str	r0, [sp, #0]
    be26:	4829      	ldr	r0, [pc, #164]	; (becc <m2m_wifi_init+0x100>)
    be28:	47a8      	blx	r5
    be2a:	200d      	movs	r0, #13
    be2c:	4f28      	ldr	r7, [pc, #160]	; (bed0 <m2m_wifi_init+0x104>)
    be2e:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    be30:	4824      	ldr	r0, [pc, #144]	; (bec4 <m2m_wifi_init+0xf8>)
    be32:	47a8      	blx	r5
    be34:	2226      	movs	r2, #38	; 0x26
    be36:	446a      	add	r2, sp
    be38:	211a      	movs	r1, #26
    be3a:	4469      	add	r1, sp
    be3c:	4825      	ldr	r0, [pc, #148]	; (bed4 <m2m_wifi_init+0x108>)
    be3e:	47a8      	blx	r5
    be40:	200d      	movs	r0, #13
    be42:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    be44:	481f      	ldr	r0, [pc, #124]	; (bec4 <m2m_wifi_init+0xf8>)
    be46:	47a8      	blx	r5
    be48:	7a73      	ldrb	r3, [r6, #9]
    be4a:	7a32      	ldrb	r2, [r6, #8]
    be4c:	79f1      	ldrb	r1, [r6, #7]
    be4e:	4822      	ldr	r0, [pc, #136]	; (bed8 <m2m_wifi_init+0x10c>)
    be50:	47a8      	blx	r5
    be52:	200d      	movs	r0, #13
    be54:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    be56:	481b      	ldr	r0, [pc, #108]	; (bec4 <m2m_wifi_init+0xf8>)
    be58:	47a8      	blx	r5
    be5a:	2304      	movs	r3, #4
    be5c:	2205      	movs	r2, #5
    be5e:	2113      	movs	r1, #19
    be60:	481e      	ldr	r0, [pc, #120]	; (bedc <m2m_wifi_init+0x110>)
    be62:	47a8      	blx	r5
    be64:	200d      	movs	r0, #13
    be66:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    be68:	4816      	ldr	r0, [pc, #88]	; (bec4 <m2m_wifi_init+0xf8>)
    be6a:	47a8      	blx	r5
    be6c:	4a1c      	ldr	r2, [pc, #112]	; (bee0 <m2m_wifi_init+0x114>)
    be6e:	491d      	ldr	r1, [pc, #116]	; (bee4 <m2m_wifi_init+0x118>)
    be70:	481d      	ldr	r0, [pc, #116]	; (bee8 <m2m_wifi_init+0x11c>)
    be72:	47a8      	blx	r5
    be74:	200d      	movs	r0, #13
    be76:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    be78:	0023      	movs	r3, r4
    be7a:	330d      	adds	r3, #13
    be7c:	d1ba      	bne.n	bdf4 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    be7e:	22e8      	movs	r2, #232	; 0xe8
    be80:	32ff      	adds	r2, #255	; 0xff
    be82:	491a      	ldr	r1, [pc, #104]	; (beec <m2m_wifi_init+0x120>)
    be84:	481a      	ldr	r0, [pc, #104]	; (bef0 <m2m_wifi_init+0x124>)
    be86:	4b10      	ldr	r3, [pc, #64]	; (bec8 <m2m_wifi_init+0xfc>)
    be88:	4798      	blx	r3
    be8a:	481a      	ldr	r0, [pc, #104]	; (bef4 <m2m_wifi_init+0x128>)
    be8c:	4b1a      	ldr	r3, [pc, #104]	; (bef8 <m2m_wifi_init+0x12c>)
    be8e:	4798      	blx	r3
    be90:	200d      	movs	r0, #13
    be92:	4b0f      	ldr	r3, [pc, #60]	; (bed0 <m2m_wifi_init+0x104>)
    be94:	4798      	blx	r3
    be96:	e7ad      	b.n	bdf4 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    be98:	2000      	movs	r0, #0
    be9a:	4b18      	ldr	r3, [pc, #96]	; (befc <m2m_wifi_init+0x130>)
    be9c:	4798      	blx	r3
    be9e:	e7a9      	b.n	bdf4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    bea0:	240c      	movs	r4, #12
    bea2:	4264      	negs	r4, r4
    bea4:	e7a6      	b.n	bdf4 <m2m_wifi_init+0x28>
    bea6:	46c0      	nop			; (mov r8, r8)
    bea8:	200003e0 	.word	0x200003e0
    beac:	200003e5 	.word	0x200003e5
    beb0:	0000c86d 	.word	0x0000c86d
    beb4:	0000bae9 	.word	0x0000bae9
    beb8:	0000bb21 	.word	0x0000bb21
    bebc:	0000ba65 	.word	0x0000ba65
    bec0:	0000c789 	.word	0x0000c789
    bec4:	00018cb0 	.word	0x00018cb0
    bec8:	00016761 	.word	0x00016761
    becc:	00018df4 	.word	0x00018df4
    bed0:	00016795 	.word	0x00016795
    bed4:	00018e1c 	.word	0x00018e1c
    bed8:	00018e38 	.word	0x00018e38
    bedc:	00018e5c 	.word	0x00018e5c
    bee0:	00018e74 	.word	0x00018e74
    bee4:	00018e80 	.word	0x00018e80
    bee8:	00018e8c 	.word	0x00018e8c
    beec:	00018cf4 	.word	0x00018cf4
    bef0:	00018980 	.word	0x00018980
    bef4:	00018ea4 	.word	0x00018ea4
    bef8:	0001687d 	.word	0x0001687d
    befc:	0000c941 	.word	0x0000c941

0000bf00 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    bf00:	b510      	push	{r4, lr}
	return hif_handle_isr();
    bf02:	4b01      	ldr	r3, [pc, #4]	; (bf08 <m2m_wifi_handle_events+0x8>)
    bf04:	4798      	blx	r3
}
    bf06:	bd10      	pop	{r4, pc}
    bf08:	0000b595 	.word	0x0000b595

0000bf0c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    bf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf0e:	46ce      	mov	lr, r9
    bf10:	4647      	mov	r7, r8
    bf12:	b580      	push	{r7, lr}
    bf14:	b0a3      	sub	sp, #140	; 0x8c
    bf16:	9005      	str	r0, [sp, #20]
    bf18:	000c      	movs	r4, r1
    bf1a:	0015      	movs	r5, r2
    bf1c:	001f      	movs	r7, r3
    bf1e:	ab2a      	add	r3, sp, #168	; 0xa8
    bf20:	881b      	ldrh	r3, [r3, #0]
    bf22:	4699      	mov	r9, r3
    bf24:	ab2b      	add	r3, sp, #172	; 0xac
    bf26:	781b      	ldrb	r3, [r3, #0]
    bf28:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    bf2a:	2a01      	cmp	r2, #1
    bf2c:	d003      	beq.n	bf36 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    bf2e:	2f00      	cmp	r7, #0
    bf30:	d040      	beq.n	bfb4 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    bf32:	2a02      	cmp	r2, #2
    bf34:	d04c      	beq.n	bfd0 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    bf36:	1e63      	subs	r3, r4, #1
    bf38:	2b1f      	cmp	r3, #31
    bf3a:	d900      	bls.n	bf3e <m2m_wifi_connect_sc+0x32>
    bf3c:	e078      	b.n	c030 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    bf3e:	464b      	mov	r3, r9
    bf40:	3b01      	subs	r3, #1
    bf42:	b29b      	uxth	r3, r3
    bf44:	2b0d      	cmp	r3, #13
    bf46:	d903      	bls.n	bf50 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    bf48:	464b      	mov	r3, r9
    bf4a:	2bff      	cmp	r3, #255	; 0xff
    bf4c:	d000      	beq.n	bf50 <m2m_wifi_connect_sc+0x44>
    bf4e:	e07e      	b.n	c04e <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    bf50:	ae07      	add	r6, sp, #28
    bf52:	0022      	movs	r2, r4
    bf54:	9905      	ldr	r1, [sp, #20]
    bf56:	205a      	movs	r0, #90	; 0x5a
    bf58:	ab02      	add	r3, sp, #8
    bf5a:	469c      	mov	ip, r3
    bf5c:	4460      	add	r0, ip
    bf5e:	4b79      	ldr	r3, [pc, #484]	; (c144 <m2m_wifi_connect_sc+0x238>)
    bf60:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    bf62:	1934      	adds	r4, r6, r4
    bf64:	3446      	adds	r4, #70	; 0x46
    bf66:	2300      	movs	r3, #0
    bf68:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    bf6a:	3344      	adds	r3, #68	; 0x44
    bf6c:	464a      	mov	r2, r9
    bf6e:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    bf70:	4643      	mov	r3, r8
    bf72:	1e5a      	subs	r2, r3, #1
    bf74:	4193      	sbcs	r3, r2
    bf76:	2267      	movs	r2, #103	; 0x67
    bf78:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    bf7a:	2341      	movs	r3, #65	; 0x41
    bf7c:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    bf7e:	2d03      	cmp	r5, #3
    bf80:	d100      	bne.n	bf84 <m2m_wifi_connect_sc+0x78>
    bf82:	e072      	b.n	c06a <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    bf84:	2d02      	cmp	r5, #2
    bf86:	d100      	bne.n	bf8a <m2m_wifi_connect_sc+0x7e>
    bf88:	e0ac      	b.n	c0e4 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    bf8a:	2d04      	cmp	r5, #4
    bf8c:	d100      	bne.n	bf90 <m2m_wifi_connect_sc+0x84>
    bf8e:	e0c4      	b.n	c11a <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    bf90:	2d01      	cmp	r5, #1
    bf92:	d000      	beq.n	bf96 <m2m_wifi_connect_sc+0x8a>
    bf94:	e0c7      	b.n	c126 <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    bf96:	2300      	movs	r3, #0
    bf98:	9302      	str	r3, [sp, #8]
    bf9a:	9301      	str	r3, [sp, #4]
    bf9c:	9300      	str	r3, [sp, #0]
    bf9e:	336c      	adds	r3, #108	; 0x6c
    bfa0:	aa07      	add	r2, sp, #28
    bfa2:	2128      	movs	r1, #40	; 0x28
    bfa4:	2001      	movs	r0, #1
    bfa6:	4c68      	ldr	r4, [pc, #416]	; (c148 <m2m_wifi_connect_sc+0x23c>)
    bfa8:	47a0      	blx	r4

ERR1:
	return ret;
}
    bfaa:	b023      	add	sp, #140	; 0x8c
    bfac:	bc0c      	pop	{r2, r3}
    bfae:	4690      	mov	r8, r2
    bfb0:	4699      	mov	r9, r3
    bfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    bfb4:	4a65      	ldr	r2, [pc, #404]	; (c14c <m2m_wifi_connect_sc+0x240>)
    bfb6:	4966      	ldr	r1, [pc, #408]	; (c150 <m2m_wifi_connect_sc+0x244>)
    bfb8:	4866      	ldr	r0, [pc, #408]	; (c154 <m2m_wifi_connect_sc+0x248>)
    bfba:	4b67      	ldr	r3, [pc, #412]	; (c158 <m2m_wifi_connect_sc+0x24c>)
    bfbc:	4798      	blx	r3
    bfbe:	4867      	ldr	r0, [pc, #412]	; (c15c <m2m_wifi_connect_sc+0x250>)
    bfc0:	4b67      	ldr	r3, [pc, #412]	; (c160 <m2m_wifi_connect_sc+0x254>)
    bfc2:	4798      	blx	r3
    bfc4:	200d      	movs	r0, #13
    bfc6:	4b67      	ldr	r3, [pc, #412]	; (c164 <m2m_wifi_connect_sc+0x258>)
    bfc8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    bfca:	200c      	movs	r0, #12
    bfcc:	4240      	negs	r0, r0
			goto ERR1;
    bfce:	e7ec      	b.n	bfaa <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    bfd0:	0038      	movs	r0, r7
    bfd2:	4b65      	ldr	r3, [pc, #404]	; (c168 <m2m_wifi_connect_sc+0x25c>)
    bfd4:	4798      	blx	r3
    bfd6:	2840      	cmp	r0, #64	; 0x40
    bfd8:	d1ad      	bne.n	bf36 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    bfda:	783b      	ldrb	r3, [r7, #0]
    bfdc:	001a      	movs	r2, r3
    bfde:	3a30      	subs	r2, #48	; 0x30
    bfe0:	2a36      	cmp	r2, #54	; 0x36
    bfe2:	d817      	bhi.n	c014 <m2m_wifi_connect_sc+0x108>
    bfe4:	3a0a      	subs	r2, #10
    bfe6:	2a06      	cmp	r2, #6
    bfe8:	d914      	bls.n	c014 <m2m_wifi_connect_sc+0x108>
    bfea:	3b47      	subs	r3, #71	; 0x47
    bfec:	2b19      	cmp	r3, #25
    bfee:	d911      	bls.n	c014 <m2m_wifi_connect_sc+0x108>
    bff0:	1c7a      	adds	r2, r7, #1
    bff2:	0038      	movs	r0, r7
    bff4:	3040      	adds	r0, #64	; 0x40
    bff6:	7813      	ldrb	r3, [r2, #0]
    bff8:	0019      	movs	r1, r3
    bffa:	3930      	subs	r1, #48	; 0x30
    bffc:	2936      	cmp	r1, #54	; 0x36
    bffe:	d809      	bhi.n	c014 <m2m_wifi_connect_sc+0x108>
    c000:	390a      	subs	r1, #10
    c002:	2906      	cmp	r1, #6
    c004:	d906      	bls.n	c014 <m2m_wifi_connect_sc+0x108>
    c006:	3b47      	subs	r3, #71	; 0x47
    c008:	2b19      	cmp	r3, #25
    c00a:	d903      	bls.n	c014 <m2m_wifi_connect_sc+0x108>
    c00c:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    c00e:	4282      	cmp	r2, r0
    c010:	d1f1      	bne.n	bff6 <m2m_wifi_connect_sc+0xea>
    c012:	e790      	b.n	bf36 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    c014:	4a55      	ldr	r2, [pc, #340]	; (c16c <m2m_wifi_connect_sc+0x260>)
    c016:	494e      	ldr	r1, [pc, #312]	; (c150 <m2m_wifi_connect_sc+0x244>)
    c018:	484e      	ldr	r0, [pc, #312]	; (c154 <m2m_wifi_connect_sc+0x248>)
    c01a:	4b4f      	ldr	r3, [pc, #316]	; (c158 <m2m_wifi_connect_sc+0x24c>)
    c01c:	4798      	blx	r3
    c01e:	4854      	ldr	r0, [pc, #336]	; (c170 <m2m_wifi_connect_sc+0x264>)
    c020:	4b4f      	ldr	r3, [pc, #316]	; (c160 <m2m_wifi_connect_sc+0x254>)
    c022:	4798      	blx	r3
    c024:	200d      	movs	r0, #13
    c026:	4b4f      	ldr	r3, [pc, #316]	; (c164 <m2m_wifi_connect_sc+0x258>)
    c028:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    c02a:	200c      	movs	r0, #12
    c02c:	4240      	negs	r0, r0
					goto ERR1;
    c02e:	e7bc      	b.n	bfaa <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    c030:	228c      	movs	r2, #140	; 0x8c
    c032:	0092      	lsls	r2, r2, #2
    c034:	4946      	ldr	r1, [pc, #280]	; (c150 <m2m_wifi_connect_sc+0x244>)
    c036:	4847      	ldr	r0, [pc, #284]	; (c154 <m2m_wifi_connect_sc+0x248>)
    c038:	4b47      	ldr	r3, [pc, #284]	; (c158 <m2m_wifi_connect_sc+0x24c>)
    c03a:	4798      	blx	r3
    c03c:	484d      	ldr	r0, [pc, #308]	; (c174 <m2m_wifi_connect_sc+0x268>)
    c03e:	4b48      	ldr	r3, [pc, #288]	; (c160 <m2m_wifi_connect_sc+0x254>)
    c040:	4798      	blx	r3
    c042:	200d      	movs	r0, #13
    c044:	4b47      	ldr	r3, [pc, #284]	; (c164 <m2m_wifi_connect_sc+0x258>)
    c046:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    c048:	200c      	movs	r0, #12
    c04a:	4240      	negs	r0, r0
		goto ERR1;
    c04c:	e7ad      	b.n	bfaa <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    c04e:	4a4a      	ldr	r2, [pc, #296]	; (c178 <m2m_wifi_connect_sc+0x26c>)
    c050:	493f      	ldr	r1, [pc, #252]	; (c150 <m2m_wifi_connect_sc+0x244>)
    c052:	4840      	ldr	r0, [pc, #256]	; (c154 <m2m_wifi_connect_sc+0x248>)
    c054:	4b40      	ldr	r3, [pc, #256]	; (c158 <m2m_wifi_connect_sc+0x24c>)
    c056:	4798      	blx	r3
    c058:	4848      	ldr	r0, [pc, #288]	; (c17c <m2m_wifi_connect_sc+0x270>)
    c05a:	4b41      	ldr	r3, [pc, #260]	; (c160 <m2m_wifi_connect_sc+0x254>)
    c05c:	4798      	blx	r3
    c05e:	200d      	movs	r0, #13
    c060:	4b40      	ldr	r3, [pc, #256]	; (c164 <m2m_wifi_connect_sc+0x258>)
    c062:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c064:	200c      	movs	r0, #12
    c066:	4240      	negs	r0, r0
			goto ERR1;
    c068:	e79f      	b.n	bfaa <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    c06a:	783b      	ldrb	r3, [r7, #0]
    c06c:	3b01      	subs	r3, #1
    c06e:	b2db      	uxtb	r3, r3
    c070:	aa07      	add	r2, sp, #28
    c072:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    c074:	2b03      	cmp	r3, #3
    c076:	d817      	bhi.n	c0a8 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    c078:	787a      	ldrb	r2, [r7, #1]
    c07a:	1e51      	subs	r1, r2, #1
    c07c:	ab07      	add	r3, sp, #28
    c07e:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    c080:	2310      	movs	r3, #16
    c082:	0011      	movs	r1, r2
    c084:	4399      	bics	r1, r3
    c086:	290b      	cmp	r1, #11
    c088:	d01e      	beq.n	c0c8 <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    c08a:	4a3d      	ldr	r2, [pc, #244]	; (c180 <m2m_wifi_connect_sc+0x274>)
    c08c:	4930      	ldr	r1, [pc, #192]	; (c150 <m2m_wifi_connect_sc+0x244>)
    c08e:	4831      	ldr	r0, [pc, #196]	; (c154 <m2m_wifi_connect_sc+0x248>)
    c090:	4c31      	ldr	r4, [pc, #196]	; (c158 <m2m_wifi_connect_sc+0x24c>)
    c092:	47a0      	blx	r4
    c094:	ab07      	add	r3, sp, #28
    c096:	7859      	ldrb	r1, [r3, #1]
    c098:	483a      	ldr	r0, [pc, #232]	; (c184 <m2m_wifi_connect_sc+0x278>)
    c09a:	47a0      	blx	r4
    c09c:	200d      	movs	r0, #13
    c09e:	4b31      	ldr	r3, [pc, #196]	; (c164 <m2m_wifi_connect_sc+0x258>)
    c0a0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c0a2:	200c      	movs	r0, #12
    c0a4:	4240      	negs	r0, r0
			goto ERR1;
    c0a6:	e780      	b.n	bfaa <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    c0a8:	2294      	movs	r2, #148	; 0x94
    c0aa:	0092      	lsls	r2, r2, #2
    c0ac:	4928      	ldr	r1, [pc, #160]	; (c150 <m2m_wifi_connect_sc+0x244>)
    c0ae:	4829      	ldr	r0, [pc, #164]	; (c154 <m2m_wifi_connect_sc+0x248>)
    c0b0:	4c29      	ldr	r4, [pc, #164]	; (c158 <m2m_wifi_connect_sc+0x24c>)
    c0b2:	47a0      	blx	r4
    c0b4:	ab07      	add	r3, sp, #28
    c0b6:	7819      	ldrb	r1, [r3, #0]
    c0b8:	4833      	ldr	r0, [pc, #204]	; (c188 <m2m_wifi_connect_sc+0x27c>)
    c0ba:	47a0      	blx	r4
    c0bc:	200d      	movs	r0, #13
    c0be:	4b29      	ldr	r3, [pc, #164]	; (c164 <m2m_wifi_connect_sc+0x258>)
    c0c0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c0c2:	200c      	movs	r0, #12
    c0c4:	4240      	negs	r0, r0
			goto ERR1;
    c0c6:	e770      	b.n	bfaa <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    c0c8:	1cb9      	adds	r1, r7, #2
    c0ca:	2016      	movs	r0, #22
    c0cc:	ab02      	add	r3, sp, #8
    c0ce:	469c      	mov	ip, r3
    c0d0:	4460      	add	r0, ip
    c0d2:	4b1c      	ldr	r3, [pc, #112]	; (c144 <m2m_wifi_connect_sc+0x238>)
    c0d4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    c0d6:	787b      	ldrb	r3, [r7, #1]
    c0d8:	aa07      	add	r2, sp, #28
    c0da:	4694      	mov	ip, r2
    c0dc:	4463      	add	r3, ip
    c0de:	2200      	movs	r2, #0
    c0e0:	709a      	strb	r2, [r3, #2]
    c0e2:	e758      	b.n	bf96 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    c0e4:	0038      	movs	r0, r7
    c0e6:	4b20      	ldr	r3, [pc, #128]	; (c168 <m2m_wifi_connect_sc+0x25c>)
    c0e8:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    c0ea:	1e43      	subs	r3, r0, #1
    c0ec:	b29b      	uxth	r3, r3
    c0ee:	2b3f      	cmp	r3, #63	; 0x3f
    c0f0:	d805      	bhi.n	c0fe <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    c0f2:	1c42      	adds	r2, r0, #1
    c0f4:	0039      	movs	r1, r7
    c0f6:	a807      	add	r0, sp, #28
    c0f8:	4b12      	ldr	r3, [pc, #72]	; (c144 <m2m_wifi_connect_sc+0x238>)
    c0fa:	4798      	blx	r3
    c0fc:	e74b      	b.n	bf96 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    c0fe:	4a23      	ldr	r2, [pc, #140]	; (c18c <m2m_wifi_connect_sc+0x280>)
    c100:	4913      	ldr	r1, [pc, #76]	; (c150 <m2m_wifi_connect_sc+0x244>)
    c102:	4814      	ldr	r0, [pc, #80]	; (c154 <m2m_wifi_connect_sc+0x248>)
    c104:	4b14      	ldr	r3, [pc, #80]	; (c158 <m2m_wifi_connect_sc+0x24c>)
    c106:	4798      	blx	r3
    c108:	4821      	ldr	r0, [pc, #132]	; (c190 <m2m_wifi_connect_sc+0x284>)
    c10a:	4b15      	ldr	r3, [pc, #84]	; (c160 <m2m_wifi_connect_sc+0x254>)
    c10c:	4798      	blx	r3
    c10e:	200d      	movs	r0, #13
    c110:	4b14      	ldr	r3, [pc, #80]	; (c164 <m2m_wifi_connect_sc+0x258>)
    c112:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    c114:	200c      	movs	r0, #12
    c116:	4240      	negs	r0, r0
			goto ERR1;
    c118:	e747      	b.n	bfaa <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    c11a:	223e      	movs	r2, #62	; 0x3e
    c11c:	0039      	movs	r1, r7
    c11e:	a807      	add	r0, sp, #28
    c120:	4b08      	ldr	r3, [pc, #32]	; (c144 <m2m_wifi_connect_sc+0x238>)
    c122:	4798      	blx	r3
    c124:	e737      	b.n	bf96 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    c126:	4a1b      	ldr	r2, [pc, #108]	; (c194 <m2m_wifi_connect_sc+0x288>)
    c128:	4909      	ldr	r1, [pc, #36]	; (c150 <m2m_wifi_connect_sc+0x244>)
    c12a:	480a      	ldr	r0, [pc, #40]	; (c154 <m2m_wifi_connect_sc+0x248>)
    c12c:	4b0a      	ldr	r3, [pc, #40]	; (c158 <m2m_wifi_connect_sc+0x24c>)
    c12e:	4798      	blx	r3
    c130:	4819      	ldr	r0, [pc, #100]	; (c198 <m2m_wifi_connect_sc+0x28c>)
    c132:	4b0b      	ldr	r3, [pc, #44]	; (c160 <m2m_wifi_connect_sc+0x254>)
    c134:	4798      	blx	r3
    c136:	200d      	movs	r0, #13
    c138:	4b0a      	ldr	r3, [pc, #40]	; (c164 <m2m_wifi_connect_sc+0x258>)
    c13a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    c13c:	200c      	movs	r0, #12
    c13e:	4240      	negs	r0, r0
		goto ERR1;
    c140:	e733      	b.n	bfaa <m2m_wifi_connect_sc+0x9e>
    c142:	46c0      	nop			; (mov r8, r8)
    c144:	0000b23d 	.word	0x0000b23d
    c148:	0000b365 	.word	0x0000b365
    c14c:	0000021a 	.word	0x0000021a
    c150:	00018d04 	.word	0x00018d04
    c154:	00018980 	.word	0x00018980
    c158:	00016761 	.word	0x00016761
    c15c:	00018d4c 	.word	0x00018d4c
    c160:	0001687d 	.word	0x0001687d
    c164:	00016795 	.word	0x00016795
    c168:	0000b261 	.word	0x0000b261
    c16c:	00000226 	.word	0x00000226
    c170:	00018d60 	.word	0x00018d60
    c174:	00018d6c 	.word	0x00018d6c
    c178:	00000239 	.word	0x00000239
    c17c:	00018d80 	.word	0x00018d80
    c180:	00000257 	.word	0x00000257
    c184:	00018da8 	.word	0x00018da8
    c188:	00018d8c 	.word	0x00018d8c
    c18c:	00000266 	.word	0x00000266
    c190:	00018dc4 	.word	0x00018dc4
    c194:	00000276 	.word	0x00000276
    c198:	00018de0 	.word	0x00018de0

0000c19c <m2m_wifi_connect>:
{
    c19c:	b530      	push	{r4, r5, lr}
    c19e:	b083      	sub	sp, #12
    c1a0:	ac06      	add	r4, sp, #24
    c1a2:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    c1a4:	2500      	movs	r5, #0
    c1a6:	9501      	str	r5, [sp, #4]
    c1a8:	9400      	str	r4, [sp, #0]
    c1aa:	4c02      	ldr	r4, [pc, #8]	; (c1b4 <m2m_wifi_connect+0x18>)
    c1ac:	47a0      	blx	r4
}
    c1ae:	b003      	add	sp, #12
    c1b0:	bd30      	pop	{r4, r5, pc}
    c1b2:	46c0      	nop			; (mov r8, r8)
    c1b4:	0000bf0d 	.word	0x0000bf0d

0000c1b8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    c1b8:	2000      	movs	r0, #0
    c1ba:	4770      	bx	lr

0000c1bc <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    c1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1be:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    c1c0:	2580      	movs	r5, #128	; 0x80
    c1c2:	006d      	lsls	r5, r5, #1
    c1c4:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    c1c6:	24a5      	movs	r4, #165	; 0xa5
    c1c8:	0164      	lsls	r4, r4, #5
    c1ca:	4f08      	ldr	r7, [pc, #32]	; (c1ec <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    c1cc:	4e08      	ldr	r6, [pc, #32]	; (c1f0 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    c1ce:	0029      	movs	r1, r5
    c1d0:	0020      	movs	r0, r4
    c1d2:	47b8      	blx	r7
			uint32 reg = 0;
    c1d4:	2300      	movs	r3, #0
    c1d6:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    c1d8:	a901      	add	r1, sp, #4
    c1da:	0020      	movs	r0, r4
    c1dc:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    c1de:	2800      	cmp	r0, #0
    c1e0:	d1f5      	bne.n	c1ce <chip_apply_conf+0x12>
				if(reg == val32)
    c1e2:	9b01      	ldr	r3, [sp, #4]
    c1e4:	429d      	cmp	r5, r3
    c1e6:	d1f2      	bne.n	c1ce <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    c1e8:	b003      	add	sp, #12
    c1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1ec:	0000c6ad 	.word	0x0000c6ad
    c1f0:	0000c6a1 	.word	0x0000c6a1

0000c1f4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    c1f4:	b500      	push	{lr}
    c1f6:	b083      	sub	sp, #12
	uint32 reg = 0;
    c1f8:	2300      	movs	r3, #0
    c1fa:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    c1fc:	a901      	add	r1, sp, #4
    c1fe:	4811      	ldr	r0, [pc, #68]	; (c244 <enable_interrupts+0x50>)
    c200:	4b11      	ldr	r3, [pc, #68]	; (c248 <enable_interrupts+0x54>)
    c202:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    c204:	2800      	cmp	r0, #0
    c206:	d001      	beq.n	c20c <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    c208:	b003      	add	sp, #12
    c20a:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    c20c:	2180      	movs	r1, #128	; 0x80
    c20e:	0049      	lsls	r1, r1, #1
    c210:	9b01      	ldr	r3, [sp, #4]
    c212:	4319      	orrs	r1, r3
    c214:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    c216:	480b      	ldr	r0, [pc, #44]	; (c244 <enable_interrupts+0x50>)
    c218:	4b0c      	ldr	r3, [pc, #48]	; (c24c <enable_interrupts+0x58>)
    c21a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    c21c:	2800      	cmp	r0, #0
    c21e:	d1f3      	bne.n	c208 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    c220:	a901      	add	r1, sp, #4
    c222:	20d0      	movs	r0, #208	; 0xd0
    c224:	0140      	lsls	r0, r0, #5
    c226:	4b08      	ldr	r3, [pc, #32]	; (c248 <enable_interrupts+0x54>)
    c228:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    c22a:	2800      	cmp	r0, #0
    c22c:	d1ec      	bne.n	c208 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    c22e:	2180      	movs	r1, #128	; 0x80
    c230:	0249      	lsls	r1, r1, #9
    c232:	9b01      	ldr	r3, [sp, #4]
    c234:	4319      	orrs	r1, r3
    c236:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    c238:	20d0      	movs	r0, #208	; 0xd0
    c23a:	0140      	lsls	r0, r0, #5
    c23c:	4b03      	ldr	r3, [pc, #12]	; (c24c <enable_interrupts+0x58>)
    c23e:	4798      	blx	r3
    c240:	e7e2      	b.n	c208 <enable_interrupts+0x14>
    c242:	46c0      	nop			; (mov r8, r8)
    c244:	00001408 	.word	0x00001408
    c248:	0000c6a1 	.word	0x0000c6a1
    c24c:	0000c6ad 	.word	0x0000c6ad

0000c250 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    c250:	b510      	push	{r4, lr}
    c252:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    c254:	4b28      	ldr	r3, [pc, #160]	; (c2f8 <nmi_get_chipid+0xa8>)
    c256:	681c      	ldr	r4, [r3, #0]
    c258:	2c00      	cmp	r4, #0
    c25a:	d004      	beq.n	c266 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    c25c:	4b26      	ldr	r3, [pc, #152]	; (c2f8 <nmi_get_chipid+0xa8>)
    c25e:	681c      	ldr	r4, [r3, #0]
}
    c260:	0020      	movs	r0, r4
    c262:	b002      	add	sp, #8
    c264:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    c266:	0019      	movs	r1, r3
    c268:	2080      	movs	r0, #128	; 0x80
    c26a:	0140      	lsls	r0, r0, #5
    c26c:	4b23      	ldr	r3, [pc, #140]	; (c2fc <nmi_get_chipid+0xac>)
    c26e:	4798      	blx	r3
    c270:	2800      	cmp	r0, #0
    c272:	d003      	beq.n	c27c <nmi_get_chipid+0x2c>
			chipid = 0;
    c274:	2200      	movs	r2, #0
    c276:	4b20      	ldr	r3, [pc, #128]	; (c2f8 <nmi_get_chipid+0xa8>)
    c278:	601a      	str	r2, [r3, #0]
			return 0;
    c27a:	e7f1      	b.n	c260 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    c27c:	a901      	add	r1, sp, #4
    c27e:	4820      	ldr	r0, [pc, #128]	; (c300 <nmi_get_chipid+0xb0>)
    c280:	4b1e      	ldr	r3, [pc, #120]	; (c2fc <nmi_get_chipid+0xac>)
    c282:	4798      	blx	r3
    c284:	2800      	cmp	r0, #0
    c286:	d003      	beq.n	c290 <nmi_get_chipid+0x40>
			chipid = 0;
    c288:	2200      	movs	r2, #0
    c28a:	4b1b      	ldr	r3, [pc, #108]	; (c2f8 <nmi_get_chipid+0xa8>)
    c28c:	601a      	str	r2, [r3, #0]
			return 0;
    c28e:	e7e7      	b.n	c260 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    c290:	4b19      	ldr	r3, [pc, #100]	; (c2f8 <nmi_get_chipid+0xa8>)
    c292:	681b      	ldr	r3, [r3, #0]
    c294:	4a1b      	ldr	r2, [pc, #108]	; (c304 <nmi_get_chipid+0xb4>)
    c296:	4293      	cmp	r3, r2
    c298:	d00e      	beq.n	c2b8 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    c29a:	4a1b      	ldr	r2, [pc, #108]	; (c308 <nmi_get_chipid+0xb8>)
    c29c:	4293      	cmp	r3, r2
    c29e:	d012      	beq.n	c2c6 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    c2a0:	4a1a      	ldr	r2, [pc, #104]	; (c30c <nmi_get_chipid+0xbc>)
    c2a2:	4293      	cmp	r3, r2
    c2a4:	d01c      	beq.n	c2e0 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    c2a6:	4914      	ldr	r1, [pc, #80]	; (c2f8 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    c2a8:	4a19      	ldr	r2, [pc, #100]	; (c310 <nmi_get_chipid+0xc0>)
    c2aa:	680b      	ldr	r3, [r1, #0]
    c2ac:	401a      	ands	r2, r3
		chipid |= 0x050000;
    c2ae:	23a0      	movs	r3, #160	; 0xa0
    c2b0:	02db      	lsls	r3, r3, #11
    c2b2:	4313      	orrs	r3, r2
    c2b4:	600b      	str	r3, [r1, #0]
    c2b6:	e7d1      	b.n	c25c <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    c2b8:	9b01      	ldr	r3, [sp, #4]
    c2ba:	2b01      	cmp	r3, #1
    c2bc:	d0f3      	beq.n	c2a6 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    c2be:	4a15      	ldr	r2, [pc, #84]	; (c314 <nmi_get_chipid+0xc4>)
    c2c0:	4b0d      	ldr	r3, [pc, #52]	; (c2f8 <nmi_get_chipid+0xa8>)
    c2c2:	601a      	str	r2, [r3, #0]
    c2c4:	e7ef      	b.n	c2a6 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    c2c6:	9b01      	ldr	r3, [sp, #4]
    c2c8:	2b03      	cmp	r3, #3
    c2ca:	d0ec      	beq.n	c2a6 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    c2cc:	2b04      	cmp	r3, #4
    c2ce:	d003      	beq.n	c2d8 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    c2d0:	4a11      	ldr	r2, [pc, #68]	; (c318 <nmi_get_chipid+0xc8>)
    c2d2:	4b09      	ldr	r3, [pc, #36]	; (c2f8 <nmi_get_chipid+0xa8>)
    c2d4:	601a      	str	r2, [r3, #0]
    c2d6:	e7e6      	b.n	c2a6 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    c2d8:	4a10      	ldr	r2, [pc, #64]	; (c31c <nmi_get_chipid+0xcc>)
    c2da:	4b07      	ldr	r3, [pc, #28]	; (c2f8 <nmi_get_chipid+0xa8>)
    c2dc:	601a      	str	r2, [r3, #0]
    c2de:	e7e2      	b.n	c2a6 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    c2e0:	4905      	ldr	r1, [pc, #20]	; (c2f8 <nmi_get_chipid+0xa8>)
    c2e2:	20ec      	movs	r0, #236	; 0xec
    c2e4:	0380      	lsls	r0, r0, #14
    c2e6:	4b05      	ldr	r3, [pc, #20]	; (c2fc <nmi_get_chipid+0xac>)
    c2e8:	4798      	blx	r3
    c2ea:	2800      	cmp	r0, #0
    c2ec:	d0db      	beq.n	c2a6 <nmi_get_chipid+0x56>
			chipid = 0;
    c2ee:	2200      	movs	r2, #0
    c2f0:	4b01      	ldr	r3, [pc, #4]	; (c2f8 <nmi_get_chipid+0xa8>)
    c2f2:	601a      	str	r2, [r3, #0]
			return 0;
    c2f4:	e7b4      	b.n	c260 <nmi_get_chipid+0x10>
    c2f6:	46c0      	nop			; (mov r8, r8)
    c2f8:	200003e8 	.word	0x200003e8
    c2fc:	0000c6a1 	.word	0x0000c6a1
    c300:	000013f4 	.word	0x000013f4
    c304:	001002a0 	.word	0x001002a0
    c308:	001002b0 	.word	0x001002b0
    c30c:	001000f0 	.word	0x001000f0
    c310:	fff0ffff 	.word	0xfff0ffff
    c314:	001002a1 	.word	0x001002a1
    c318:	001002b2 	.word	0x001002b2
    c31c:	001002b1 	.word	0x001002b1

0000c320 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    c320:	b530      	push	{r4, r5, lr}
    c322:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    c324:	4c16      	ldr	r4, [pc, #88]	; (c380 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    c326:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    c328:	a901      	add	r1, sp, #4
    c32a:	2010      	movs	r0, #16
    c32c:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    c32e:	2800      	cmp	r0, #0
    c330:	d11c      	bne.n	c36c <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    c332:	9b01      	ldr	r3, [sp, #4]
    c334:	422b      	tst	r3, r5
    c336:	d1f7      	bne.n	c328 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    c338:	a901      	add	r1, sp, #4
    c33a:	3001      	adds	r0, #1
    c33c:	4b10      	ldr	r3, [pc, #64]	; (c380 <chip_sleep+0x60>)
    c33e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    c340:	2800      	cmp	r0, #0
    c342:	d113      	bne.n	c36c <chip_sleep+0x4c>
	if(reg & NBIT1)
    c344:	9901      	ldr	r1, [sp, #4]
    c346:	078b      	lsls	r3, r1, #30
    c348:	d507      	bpl.n	c35a <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    c34a:	2302      	movs	r3, #2
    c34c:	4399      	bics	r1, r3
    c34e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    c350:	3001      	adds	r0, #1
    c352:	4b0c      	ldr	r3, [pc, #48]	; (c384 <chip_sleep+0x64>)
    c354:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    c356:	2800      	cmp	r0, #0
    c358:	d108      	bne.n	c36c <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c35a:	a901      	add	r1, sp, #4
    c35c:	200b      	movs	r0, #11
    c35e:	4b08      	ldr	r3, [pc, #32]	; (c380 <chip_sleep+0x60>)
    c360:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    c362:	2800      	cmp	r0, #0
    c364:	d102      	bne.n	c36c <chip_sleep+0x4c>
	if(reg & NBIT0)
    c366:	9901      	ldr	r1, [sp, #4]
    c368:	07cb      	lsls	r3, r1, #31
    c36a:	d401      	bmi.n	c370 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    c36c:	b003      	add	sp, #12
    c36e:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    c370:	2301      	movs	r3, #1
    c372:	4399      	bics	r1, r3
    c374:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    c376:	300b      	adds	r0, #11
    c378:	4b02      	ldr	r3, [pc, #8]	; (c384 <chip_sleep+0x64>)
    c37a:	4798      	blx	r3
    c37c:	e7f6      	b.n	c36c <chip_sleep+0x4c>
    c37e:	46c0      	nop			; (mov r8, r8)
    c380:	0000c6a1 	.word	0x0000c6a1
    c384:	0000c6ad 	.word	0x0000c6ad

0000c388 <chip_wake>:
sint8 chip_wake(void)
{
    c388:	b5f0      	push	{r4, r5, r6, r7, lr}
    c38a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    c38c:	2300      	movs	r3, #0
    c38e:	9301      	str	r3, [sp, #4]
    c390:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    c392:	a901      	add	r1, sp, #4
    c394:	200b      	movs	r0, #11
    c396:	4b28      	ldr	r3, [pc, #160]	; (c438 <chip_wake+0xb0>)
    c398:	4798      	blx	r3
    c39a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c39c:	d130      	bne.n	c400 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    c39e:	9901      	ldr	r1, [sp, #4]
    c3a0:	07cb      	lsls	r3, r1, #31
    c3a2:	d406      	bmi.n	c3b2 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    c3a4:	2301      	movs	r3, #1
    c3a6:	4319      	orrs	r1, r3
    c3a8:	200b      	movs	r0, #11
    c3aa:	4b24      	ldr	r3, [pc, #144]	; (c43c <chip_wake+0xb4>)
    c3ac:	4798      	blx	r3
    c3ae:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c3b0:	d126      	bne.n	c400 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    c3b2:	a901      	add	r1, sp, #4
    c3b4:	2001      	movs	r0, #1
    c3b6:	4b20      	ldr	r3, [pc, #128]	; (c438 <chip_wake+0xb0>)
    c3b8:	4798      	blx	r3
    c3ba:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    c3bc:	d120      	bne.n	c400 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    c3be:	9901      	ldr	r1, [sp, #4]
    c3c0:	078b      	lsls	r3, r1, #30
    c3c2:	d520      	bpl.n	c406 <chip_wake+0x7e>
{
    c3c4:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    c3c6:	4f1c      	ldr	r7, [pc, #112]	; (c438 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    c3c8:	4e1d      	ldr	r6, [pc, #116]	; (c440 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    c3ca:	4669      	mov	r1, sp
    c3cc:	200f      	movs	r0, #15
    c3ce:	47b8      	blx	r7
    c3d0:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    c3d2:	d120      	bne.n	c416 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    c3d4:	9b00      	ldr	r3, [sp, #0]
    c3d6:	075b      	lsls	r3, r3, #29
    c3d8:	d42b      	bmi.n	c432 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    c3da:	2002      	movs	r0, #2
    c3dc:	47b0      	blx	r6
    c3de:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    c3e0:	2d00      	cmp	r5, #0
    c3e2:	d1f2      	bne.n	c3ca <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    c3e4:	22ad      	movs	r2, #173	; 0xad
    c3e6:	0052      	lsls	r2, r2, #1
    c3e8:	4916      	ldr	r1, [pc, #88]	; (c444 <chip_wake+0xbc>)
    c3ea:	4817      	ldr	r0, [pc, #92]	; (c448 <chip_wake+0xc0>)
    c3ec:	4b17      	ldr	r3, [pc, #92]	; (c44c <chip_wake+0xc4>)
    c3ee:	4798      	blx	r3
    c3f0:	4817      	ldr	r0, [pc, #92]	; (c450 <chip_wake+0xc8>)
    c3f2:	4b18      	ldr	r3, [pc, #96]	; (c454 <chip_wake+0xcc>)
    c3f4:	4798      	blx	r3
    c3f6:	200d      	movs	r0, #13
    c3f8:	4b17      	ldr	r3, [pc, #92]	; (c458 <chip_wake+0xd0>)
    c3fa:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    c3fc:	2404      	movs	r4, #4
    c3fe:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    c400:	0020      	movs	r0, r4
    c402:	b003      	add	sp, #12
    c404:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    c406:	2302      	movs	r3, #2
    c408:	4319      	orrs	r1, r3
    c40a:	2001      	movs	r0, #1
    c40c:	4b0b      	ldr	r3, [pc, #44]	; (c43c <chip_wake+0xb4>)
    c40e:	4798      	blx	r3
    c410:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    c412:	d0d7      	beq.n	c3c4 <chip_wake+0x3c>
    c414:	e7f4      	b.n	c400 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    c416:	22a8      	movs	r2, #168	; 0xa8
    c418:	0052      	lsls	r2, r2, #1
    c41a:	490a      	ldr	r1, [pc, #40]	; (c444 <chip_wake+0xbc>)
    c41c:	480a      	ldr	r0, [pc, #40]	; (c448 <chip_wake+0xc0>)
    c41e:	4d0b      	ldr	r5, [pc, #44]	; (c44c <chip_wake+0xc4>)
    c420:	47a8      	blx	r5
    c422:	9a00      	ldr	r2, [sp, #0]
    c424:	0021      	movs	r1, r4
    c426:	480d      	ldr	r0, [pc, #52]	; (c45c <chip_wake+0xd4>)
    c428:	47a8      	blx	r5
    c42a:	200d      	movs	r0, #13
    c42c:	4b0a      	ldr	r3, [pc, #40]	; (c458 <chip_wake+0xd0>)
    c42e:	4798      	blx	r3
			goto _WAKE_EXIT;
    c430:	e7e6      	b.n	c400 <chip_wake+0x78>
	nm_bus_reset();
    c432:	4b0b      	ldr	r3, [pc, #44]	; (c460 <chip_wake+0xd8>)
    c434:	4798      	blx	r3
    c436:	e7e3      	b.n	c400 <chip_wake+0x78>
    c438:	0000c6a1 	.word	0x0000c6a1
    c43c:	0000c6ad 	.word	0x0000c6ad
    c440:	0000aec5 	.word	0x0000aec5
    c444:	00018ec0 	.word	0x00018ec0
    c448:	00018980 	.word	0x00018980
    c44c:	00016761 	.word	0x00016761
    c450:	00018f08 	.word	0x00018f08
    c454:	0001687d 	.word	0x0001687d
    c458:	00016795 	.word	0x00016795
    c45c:	00018ef0 	.word	0x00018ef0
    c460:	0000c689 	.word	0x0000c689

0000c464 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    c464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c466:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    c468:	4d2d      	ldr	r5, [pc, #180]	; (c520 <wait_for_bootrom+0xbc>)
    c46a:	4c2e      	ldr	r4, [pc, #184]	; (c524 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    c46c:	4e2e      	ldr	r6, [pc, #184]	; (c528 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    c46e:	0028      	movs	r0, r5
    c470:	47a0      	blx	r4
		if (reg & 0x80000000) {
    c472:	2800      	cmp	r0, #0
    c474:	db02      	blt.n	c47c <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    c476:	2001      	movs	r0, #1
    c478:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    c47a:	e7f8      	b.n	c46e <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    c47c:	482b      	ldr	r0, [pc, #172]	; (c52c <wait_for_bootrom+0xc8>)
    c47e:	4b29      	ldr	r3, [pc, #164]	; (c524 <wait_for_bootrom+0xc0>)
    c480:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    c482:	07c3      	lsls	r3, r0, #31
    c484:	d409      	bmi.n	c49a <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    c486:	4e28      	ldr	r6, [pc, #160]	; (c528 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    c488:	4c29      	ldr	r4, [pc, #164]	; (c530 <wait_for_bootrom+0xcc>)
    c48a:	4d26      	ldr	r5, [pc, #152]	; (c524 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    c48c:	2001      	movs	r0, #1
    c48e:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    c490:	0020      	movs	r0, r4
    c492:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    c494:	4b27      	ldr	r3, [pc, #156]	; (c534 <wait_for_bootrom+0xd0>)
    c496:	4298      	cmp	r0, r3
    c498:	d1f8      	bne.n	c48c <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    c49a:	2f02      	cmp	r7, #2
    c49c:	d021      	beq.n	c4e2 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    c49e:	2f03      	cmp	r7, #3
    c4a0:	d029      	beq.n	c4f6 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    c4a2:	2f04      	cmp	r7, #4
    c4a4:	d030      	beq.n	c508 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    c4a6:	4924      	ldr	r1, [pc, #144]	; (c538 <wait_for_bootrom+0xd4>)
    c4a8:	4824      	ldr	r0, [pc, #144]	; (c53c <wait_for_bootrom+0xd8>)
    c4aa:	4b25      	ldr	r3, [pc, #148]	; (c540 <wait_for_bootrom+0xdc>)
    c4ac:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    c4ae:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    c4b0:	4b24      	ldr	r3, [pc, #144]	; (c544 <wait_for_bootrom+0xe0>)
    c4b2:	4798      	blx	r3
    c4b4:	0500      	lsls	r0, r0, #20
    c4b6:	0d00      	lsrs	r0, r0, #20
    c4b8:	4b23      	ldr	r3, [pc, #140]	; (c548 <wait_for_bootrom+0xe4>)
    c4ba:	4298      	cmp	r0, r3
    c4bc:	d82a      	bhi.n	c514 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    c4be:	0020      	movs	r0, r4
    c4c0:	4b22      	ldr	r3, [pc, #136]	; (c54c <wait_for_bootrom+0xe8>)
    c4c2:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    c4c4:	4822      	ldr	r0, [pc, #136]	; (c550 <wait_for_bootrom+0xec>)
    c4c6:	4c23      	ldr	r4, [pc, #140]	; (c554 <wait_for_bootrom+0xf0>)
    c4c8:	47a0      	blx	r4
    c4ca:	491b      	ldr	r1, [pc, #108]	; (c538 <wait_for_bootrom+0xd4>)
    c4cc:	4822      	ldr	r0, [pc, #136]	; (c558 <wait_for_bootrom+0xf4>)
    c4ce:	47a0      	blx	r4
    c4d0:	200d      	movs	r0, #13
    c4d2:	4b22      	ldr	r3, [pc, #136]	; (c55c <wait_for_bootrom+0xf8>)
    c4d4:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    c4d6:	4922      	ldr	r1, [pc, #136]	; (c560 <wait_for_bootrom+0xfc>)
    c4d8:	4815      	ldr	r0, [pc, #84]	; (c530 <wait_for_bootrom+0xcc>)
    c4da:	4b19      	ldr	r3, [pc, #100]	; (c540 <wait_for_bootrom+0xdc>)
    c4dc:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    c4de:	2000      	movs	r0, #0
    c4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    c4e2:	4920      	ldr	r1, [pc, #128]	; (c564 <wait_for_bootrom+0x100>)
    c4e4:	4820      	ldr	r0, [pc, #128]	; (c568 <wait_for_bootrom+0x104>)
    c4e6:	4c16      	ldr	r4, [pc, #88]	; (c540 <wait_for_bootrom+0xdc>)
    c4e8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    c4ea:	2180      	movs	r1, #128	; 0x80
    c4ec:	0349      	lsls	r1, r1, #13
    c4ee:	4813      	ldr	r0, [pc, #76]	; (c53c <wait_for_bootrom+0xd8>)
    c4f0:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    c4f2:	2400      	movs	r4, #0
    c4f4:	e7dc      	b.n	c4b0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    c4f6:	491b      	ldr	r1, [pc, #108]	; (c564 <wait_for_bootrom+0x100>)
    c4f8:	481b      	ldr	r0, [pc, #108]	; (c568 <wait_for_bootrom+0x104>)
    c4fa:	4c11      	ldr	r4, [pc, #68]	; (c540 <wait_for_bootrom+0xdc>)
    c4fc:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    c4fe:	2100      	movs	r1, #0
    c500:	480e      	ldr	r0, [pc, #56]	; (c53c <wait_for_bootrom+0xd8>)
    c502:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    c504:	2400      	movs	r4, #0
    c506:	e7d3      	b.n	c4b0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    c508:	490b      	ldr	r1, [pc, #44]	; (c538 <wait_for_bootrom+0xd4>)
    c50a:	480c      	ldr	r0, [pc, #48]	; (c53c <wait_for_bootrom+0xd8>)
    c50c:	4b0c      	ldr	r3, [pc, #48]	; (c540 <wait_for_bootrom+0xdc>)
    c50e:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    c510:	2480      	movs	r4, #128	; 0x80
    c512:	e7cd      	b.n	c4b0 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    c514:	2002      	movs	r0, #2
    c516:	4320      	orrs	r0, r4
    c518:	4b0c      	ldr	r3, [pc, #48]	; (c54c <wait_for_bootrom+0xe8>)
    c51a:	4798      	blx	r3
    c51c:	e7d2      	b.n	c4c4 <wait_for_bootrom+0x60>
    c51e:	46c0      	nop			; (mov r8, r8)
    c520:	00001014 	.word	0x00001014
    c524:	0000c695 	.word	0x0000c695
    c528:	0000aec5 	.word	0x0000aec5
    c52c:	000207bc 	.word	0x000207bc
    c530:	000c000c 	.word	0x000c000c
    c534:	10add09e 	.word	0x10add09e
    c538:	13301354 	.word	0x13301354
    c53c:	0000108c 	.word	0x0000108c
    c540:	0000c6ad 	.word	0x0000c6ad
    c544:	0000c251 	.word	0x0000c251
    c548:	0000039f 	.word	0x0000039f
    c54c:	0000c1bd 	.word	0x0000c1bd
    c550:	00018cb0 	.word	0x00018cb0
    c554:	00016761 	.word	0x00016761
    c558:	00018f24 	.word	0x00018f24
    c55c:	00016795 	.word	0x00016795
    c560:	ef522f61 	.word	0xef522f61
    c564:	3c1cd57d 	.word	0x3c1cd57d
    c568:	000207ac 	.word	0x000207ac

0000c56c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    c56c:	b570      	push	{r4, r5, r6, lr}
    c56e:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    c570:	4b15      	ldr	r3, [pc, #84]	; (c5c8 <wait_for_firmware_start+0x5c>)
    c572:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    c574:	4b15      	ldr	r3, [pc, #84]	; (c5cc <wait_for_firmware_start+0x60>)
    c576:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    c578:	3802      	subs	r0, #2
    c57a:	2801      	cmp	r0, #1
    c57c:	d911      	bls.n	c5a2 <wait_for_firmware_start+0x36>
{
    c57e:	2401      	movs	r4, #1
    c580:	4264      	negs	r4, r4
    c582:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    c584:	4e12      	ldr	r6, [pc, #72]	; (c5d0 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    c586:	4d13      	ldr	r5, [pc, #76]	; (c5d4 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    c588:	9b00      	ldr	r3, [sp, #0]
    c58a:	4298      	cmp	r0, r3
    c58c:	d00e      	beq.n	c5ac <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    c58e:	2002      	movs	r0, #2
    c590:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    c592:	9801      	ldr	r0, [sp, #4]
    c594:	47a8      	blx	r5
    c596:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    c598:	2c00      	cmp	r4, #0
    c59a:	d1f5      	bne.n	c588 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    c59c:	2005      	movs	r0, #5
    c59e:	4240      	negs	r0, r0
    c5a0:	e009      	b.n	c5b6 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    c5a2:	4b0d      	ldr	r3, [pc, #52]	; (c5d8 <wait_for_firmware_start+0x6c>)
    c5a4:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    c5a6:	4b0d      	ldr	r3, [pc, #52]	; (c5dc <wait_for_firmware_start+0x70>)
    c5a8:	9300      	str	r3, [sp, #0]
    c5aa:	e7e8      	b.n	c57e <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    c5ac:	9a00      	ldr	r2, [sp, #0]
    c5ae:	4b07      	ldr	r3, [pc, #28]	; (c5cc <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    c5b0:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    c5b2:	429a      	cmp	r2, r3
    c5b4:	d001      	beq.n	c5ba <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    c5b6:	b002      	add	sp, #8
    c5b8:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    c5ba:	2100      	movs	r1, #0
    c5bc:	4802      	ldr	r0, [pc, #8]	; (c5c8 <wait_for_firmware_start+0x5c>)
    c5be:	4b08      	ldr	r3, [pc, #32]	; (c5e0 <wait_for_firmware_start+0x74>)
    c5c0:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    c5c2:	2000      	movs	r0, #0
    c5c4:	e7f7      	b.n	c5b6 <wait_for_firmware_start+0x4a>
    c5c6:	46c0      	nop			; (mov r8, r8)
    c5c8:	0000108c 	.word	0x0000108c
    c5cc:	02532636 	.word	0x02532636
    c5d0:	0000aec5 	.word	0x0000aec5
    c5d4:	0000c695 	.word	0x0000c695
    c5d8:	000207ac 	.word	0x000207ac
    c5dc:	d75dc1c3 	.word	0xd75dc1c3
    c5e0:	0000c6ad 	.word	0x0000c6ad

0000c5e4 <chip_deinit>:

sint8 chip_deinit(void)
{
    c5e4:	b510      	push	{r4, lr}
    c5e6:	b082      	sub	sp, #8
	uint32 reg = 0;
    c5e8:	2300      	movs	r3, #0
    c5ea:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    c5ec:	a901      	add	r1, sp, #4
    c5ee:	20a0      	movs	r0, #160	; 0xa0
    c5f0:	0140      	lsls	r0, r0, #5
    c5f2:	4b14      	ldr	r3, [pc, #80]	; (c644 <chip_deinit+0x60>)
    c5f4:	4798      	blx	r3
    c5f6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    c5f8:	d115      	bne.n	c626 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    c5fa:	4913      	ldr	r1, [pc, #76]	; (c648 <chip_deinit+0x64>)
    c5fc:	9b01      	ldr	r3, [sp, #4]
    c5fe:	4019      	ands	r1, r3
    c600:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    c602:	20a0      	movs	r0, #160	; 0xa0
    c604:	0140      	lsls	r0, r0, #5
    c606:	4b11      	ldr	r3, [pc, #68]	; (c64c <chip_deinit+0x68>)
    c608:	4798      	blx	r3
    c60a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    c60c:	d016      	beq.n	c63c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    c60e:	4a10      	ldr	r2, [pc, #64]	; (c650 <chip_deinit+0x6c>)
    c610:	4910      	ldr	r1, [pc, #64]	; (c654 <chip_deinit+0x70>)
    c612:	4811      	ldr	r0, [pc, #68]	; (c658 <chip_deinit+0x74>)
    c614:	4b11      	ldr	r3, [pc, #68]	; (c65c <chip_deinit+0x78>)
    c616:	4798      	blx	r3
    c618:	4811      	ldr	r0, [pc, #68]	; (c660 <chip_deinit+0x7c>)
    c61a:	4b12      	ldr	r3, [pc, #72]	; (c664 <chip_deinit+0x80>)
    c61c:	4798      	blx	r3
    c61e:	200d      	movs	r0, #13
    c620:	4b11      	ldr	r3, [pc, #68]	; (c668 <chip_deinit+0x84>)
    c622:	4798      	blx	r3
		goto ERR1;
    c624:	e00a      	b.n	c63c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    c626:	4a11      	ldr	r2, [pc, #68]	; (c66c <chip_deinit+0x88>)
    c628:	490a      	ldr	r1, [pc, #40]	; (c654 <chip_deinit+0x70>)
    c62a:	480b      	ldr	r0, [pc, #44]	; (c658 <chip_deinit+0x74>)
    c62c:	4b0b      	ldr	r3, [pc, #44]	; (c65c <chip_deinit+0x78>)
    c62e:	4798      	blx	r3
    c630:	480b      	ldr	r0, [pc, #44]	; (c660 <chip_deinit+0x7c>)
    c632:	4b0c      	ldr	r3, [pc, #48]	; (c664 <chip_deinit+0x80>)
    c634:	4798      	blx	r3
    c636:	200d      	movs	r0, #13
    c638:	4b0b      	ldr	r3, [pc, #44]	; (c668 <chip_deinit+0x84>)
    c63a:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    c63c:	0020      	movs	r0, r4
    c63e:	b002      	add	sp, #8
    c640:	bd10      	pop	{r4, pc}
    c642:	46c0      	nop			; (mov r8, r8)
    c644:	0000c6a1 	.word	0x0000c6a1
    c648:	fffffbff 	.word	0xfffffbff
    c64c:	0000c6ad 	.word	0x0000c6ad
    c650:	00000207 	.word	0x00000207
    c654:	00018ecc 	.word	0x00018ecc
    c658:	00018980 	.word	0x00018980
    c65c:	00016761 	.word	0x00016761
    c660:	00018ed8 	.word	0x00018ed8
    c664:	0001687d 	.word	0x0001687d
    c668:	00016795 	.word	0x00016795
    c66c:	00000201 	.word	0x00000201

0000c670 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    c670:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    c672:	4b01      	ldr	r3, [pc, #4]	; (c678 <nm_bus_iface_init+0x8>)
    c674:	4798      	blx	r3
	return ret;
}
    c676:	bd10      	pop	{r4, pc}
    c678:	0000af81 	.word	0x0000af81

0000c67c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    c67c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    c67e:	4b01      	ldr	r3, [pc, #4]	; (c684 <nm_bus_iface_deinit+0x8>)
    c680:	4798      	blx	r3

	return ret;
}
    c682:	bd10      	pop	{r4, pc}
    c684:	0000b1d1 	.word	0x0000b1d1

0000c688 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    c688:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    c68a:	4b01      	ldr	r3, [pc, #4]	; (c690 <nm_bus_reset+0x8>)
    c68c:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    c68e:	bd10      	pop	{r4, pc}
    c690:	0000d031 	.word	0x0000d031

0000c694 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    c694:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    c696:	4b01      	ldr	r3, [pc, #4]	; (c69c <nm_read_reg+0x8>)
    c698:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    c69a:	bd10      	pop	{r4, pc}
    c69c:	0000d069 	.word	0x0000d069

0000c6a0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    c6a0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    c6a2:	4b01      	ldr	r3, [pc, #4]	; (c6a8 <nm_read_reg_with_ret+0x8>)
    c6a4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    c6a6:	bd10      	pop	{r4, pc}
    c6a8:	0000d07d 	.word	0x0000d07d

0000c6ac <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    c6ac:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    c6ae:	4b01      	ldr	r3, [pc, #4]	; (c6b4 <nm_write_reg+0x8>)
    c6b0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    c6b2:	bd10      	pop	{r4, pc}
    c6b4:	0000d095 	.word	0x0000d095

0000c6b8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    c6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6ba:	46d6      	mov	lr, sl
    c6bc:	464f      	mov	r7, r9
    c6be:	4646      	mov	r6, r8
    c6c0:	b5c0      	push	{r6, r7, lr}
    c6c2:	b082      	sub	sp, #8
    c6c4:	4680      	mov	r8, r0
    c6c6:	4689      	mov	r9, r1
    c6c8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c6ca:	4b13      	ldr	r3, [pc, #76]	; (c718 <nm_read_block+0x60>)
    c6cc:	881f      	ldrh	r7, [r3, #0]
    c6ce:	3f08      	subs	r7, #8
    c6d0:	b2bb      	uxth	r3, r7
    c6d2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    c6d4:	001e      	movs	r6, r3
    c6d6:	0004      	movs	r4, r0
    c6d8:	429a      	cmp	r2, r3
    c6da:	d91a      	bls.n	c712 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    c6dc:	4b0f      	ldr	r3, [pc, #60]	; (c71c <nm_read_block+0x64>)
    c6de:	469a      	mov	sl, r3
    c6e0:	1a37      	subs	r7, r6, r0
    c6e2:	4643      	mov	r3, r8
    c6e4:	1ae1      	subs	r1, r4, r3
    c6e6:	4449      	add	r1, r9
    c6e8:	9a01      	ldr	r2, [sp, #4]
    c6ea:	0020      	movs	r0, r4
    c6ec:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    c6ee:	2800      	cmp	r0, #0
    c6f0:	d109      	bne.n	c706 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    c6f2:	1bad      	subs	r5, r5, r6
    c6f4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    c6f6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    c6f8:	42b5      	cmp	r5, r6
    c6fa:	d8f2      	bhi.n	c6e2 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    c6fc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    c6fe:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    c700:	0020      	movs	r0, r4
    c702:	4b06      	ldr	r3, [pc, #24]	; (c71c <nm_read_block+0x64>)
    c704:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    c706:	b002      	add	sp, #8
    c708:	bc1c      	pop	{r2, r3, r4}
    c70a:	4690      	mov	r8, r2
    c70c:	4699      	mov	r9, r3
    c70e:	46a2      	mov	sl, r4
    c710:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    c712:	2100      	movs	r1, #0
    c714:	e7f2      	b.n	c6fc <nm_read_block+0x44>
    c716:	46c0      	nop			; (mov r8, r8)
    c718:	2000000c 	.word	0x2000000c
    c71c:	0000d1d5 	.word	0x0000d1d5

0000c720 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    c720:	b5f0      	push	{r4, r5, r6, r7, lr}
    c722:	46d6      	mov	lr, sl
    c724:	464f      	mov	r7, r9
    c726:	4646      	mov	r6, r8
    c728:	b5c0      	push	{r6, r7, lr}
    c72a:	b082      	sub	sp, #8
    c72c:	4680      	mov	r8, r0
    c72e:	4689      	mov	r9, r1
    c730:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    c732:	4b13      	ldr	r3, [pc, #76]	; (c780 <nm_write_block+0x60>)
    c734:	881f      	ldrh	r7, [r3, #0]
    c736:	3f08      	subs	r7, #8
    c738:	b2bb      	uxth	r3, r7
    c73a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    c73c:	001e      	movs	r6, r3
    c73e:	0004      	movs	r4, r0
    c740:	429a      	cmp	r2, r3
    c742:	d91a      	bls.n	c77a <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    c744:	4b0f      	ldr	r3, [pc, #60]	; (c784 <nm_write_block+0x64>)
    c746:	469a      	mov	sl, r3
    c748:	1a37      	subs	r7, r6, r0
    c74a:	4643      	mov	r3, r8
    c74c:	1ae1      	subs	r1, r4, r3
    c74e:	4449      	add	r1, r9
    c750:	9a01      	ldr	r2, [sp, #4]
    c752:	0020      	movs	r0, r4
    c754:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    c756:	2800      	cmp	r0, #0
    c758:	d109      	bne.n	c76e <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    c75a:	1bad      	subs	r5, r5, r6
    c75c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    c75e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    c760:	42b5      	cmp	r5, r6
    c762:	d8f2      	bhi.n	c74a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    c764:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    c766:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    c768:	0020      	movs	r0, r4
    c76a:	4b06      	ldr	r3, [pc, #24]	; (c784 <nm_write_block+0x64>)
    c76c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    c76e:	b002      	add	sp, #8
    c770:	bc1c      	pop	{r2, r3, r4}
    c772:	4690      	mov	r8, r2
    c774:	4699      	mov	r9, r3
    c776:	46a2      	mov	sl, r4
    c778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    c77a:	2100      	movs	r1, #0
    c77c:	e7f2      	b.n	c764 <nm_write_block+0x44>
    c77e:	46c0      	nop			; (mov r8, r8)
    c780:	2000000c 	.word	0x2000000c
    c784:	0000d331 	.word	0x0000d331

0000c788 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    c788:	b570      	push	{r4, r5, r6, lr}
    c78a:	b084      	sub	sp, #16
    c78c:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    c78e:	2300      	movs	r3, #0
    c790:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    c792:	2208      	movs	r2, #8
    c794:	2100      	movs	r1, #0
    c796:	a801      	add	r0, sp, #4
    c798:	4b2d      	ldr	r3, [pc, #180]	; (c850 <nm_get_firmware_full_info+0xc8>)
    c79a:	4798      	blx	r3
	if (pstrRev != NULL)
    c79c:	2c00      	cmp	r4, #0
    c79e:	d044      	beq.n	c82a <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    c7a0:	2228      	movs	r2, #40	; 0x28
    c7a2:	2100      	movs	r1, #0
    c7a4:	0020      	movs	r0, r4
    c7a6:	4b2b      	ldr	r3, [pc, #172]	; (c854 <nm_get_firmware_full_info+0xcc>)
    c7a8:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    c7aa:	a903      	add	r1, sp, #12
    c7ac:	482a      	ldr	r0, [pc, #168]	; (c858 <nm_get_firmware_full_info+0xd0>)
    c7ae:	4b2b      	ldr	r3, [pc, #172]	; (c85c <nm_get_firmware_full_info+0xd4>)
    c7b0:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    c7b2:	2800      	cmp	r0, #0
    c7b4:	d13a      	bne.n	c82c <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    c7b6:	9b03      	ldr	r3, [sp, #12]
    c7b8:	2b00      	cmp	r3, #0
    c7ba:	d039      	beq.n	c830 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    c7bc:	20c0      	movs	r0, #192	; 0xc0
    c7be:	0280      	lsls	r0, r0, #10
    c7c0:	4318      	orrs	r0, r3
    c7c2:	2208      	movs	r2, #8
    c7c4:	a901      	add	r1, sp, #4
    c7c6:	4b26      	ldr	r3, [pc, #152]	; (c860 <nm_get_firmware_full_info+0xd8>)
    c7c8:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    c7ca:	2800      	cmp	r0, #0
    c7cc:	d12e      	bne.n	c82c <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    c7ce:	9b02      	ldr	r3, [sp, #8]
    c7d0:	0418      	lsls	r0, r3, #16
    c7d2:	0c00      	lsrs	r0, r0, #16
    c7d4:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    c7d6:	d02e      	beq.n	c836 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    c7d8:	23c0      	movs	r3, #192	; 0xc0
    c7da:	029b      	lsls	r3, r3, #10
    c7dc:	4318      	orrs	r0, r3
    c7de:	2228      	movs	r2, #40	; 0x28
    c7e0:	0021      	movs	r1, r4
    c7e2:	4b1f      	ldr	r3, [pc, #124]	; (c860 <nm_get_firmware_full_info+0xd8>)
    c7e4:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    c7e6:	2800      	cmp	r0, #0
    c7e8:	d120      	bne.n	c82c <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    c7ea:	7921      	ldrb	r1, [r4, #4]
    c7ec:	0209      	lsls	r1, r1, #8
    c7ee:	79a2      	ldrb	r2, [r4, #6]
    c7f0:	230f      	movs	r3, #15
    c7f2:	401a      	ands	r2, r3
    c7f4:	430a      	orrs	r2, r1
    c7f6:	7961      	ldrb	r1, [r4, #5]
    c7f8:	0109      	lsls	r1, r1, #4
    c7fa:	25ff      	movs	r5, #255	; 0xff
    c7fc:	4029      	ands	r1, r5
    c7fe:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    c800:	79e1      	ldrb	r1, [r4, #7]
    c802:	0209      	lsls	r1, r1, #8
    c804:	7a66      	ldrb	r6, [r4, #9]
    c806:	4033      	ands	r3, r6
    c808:	430b      	orrs	r3, r1
    c80a:	7a21      	ldrb	r1, [r4, #8]
    c80c:	0109      	lsls	r1, r1, #4
    c80e:	400d      	ands	r5, r1
    c810:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    c812:	2a00      	cmp	r2, #0
    c814:	d012      	beq.n	c83c <nm_get_firmware_full_info+0xb4>
    c816:	2b00      	cmp	r3, #0
    c818:	d013      	beq.n	c842 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    c81a:	4912      	ldr	r1, [pc, #72]	; (c864 <nm_get_firmware_full_info+0xdc>)
    c81c:	428b      	cmp	r3, r1
    c81e:	d813      	bhi.n	c848 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    c820:	4b11      	ldr	r3, [pc, #68]	; (c868 <nm_get_firmware_full_info+0xe0>)
    c822:	429a      	cmp	r2, r3
    c824:	d802      	bhi.n	c82c <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    c826:	380d      	subs	r0, #13
    c828:	e000      	b.n	c82c <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    c82a:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    c82c:	b004      	add	sp, #16
    c82e:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    c830:	200c      	movs	r0, #12
    c832:	4240      	negs	r0, r0
    c834:	e7fa      	b.n	c82c <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    c836:	200c      	movs	r0, #12
    c838:	4240      	negs	r0, r0
    c83a:	e7f7      	b.n	c82c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    c83c:	200c      	movs	r0, #12
    c83e:	4240      	negs	r0, r0
    c840:	e7f4      	b.n	c82c <nm_get_firmware_full_info+0xa4>
    c842:	200c      	movs	r0, #12
    c844:	4240      	negs	r0, r0
    c846:	e7f1      	b.n	c82c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    c848:	200d      	movs	r0, #13
    c84a:	4240      	negs	r0, r0
    c84c:	e7ee      	b.n	c82c <nm_get_firmware_full_info+0xa4>
    c84e:	46c0      	nop			; (mov r8, r8)
    c850:	000165ff 	.word	0x000165ff
    c854:	0000b251 	.word	0x0000b251
    c858:	000c0008 	.word	0x000c0008
    c85c:	0000c6a1 	.word	0x0000c6a1
    c860:	0000c6b9 	.word	0x0000c6b9
    c864:	00001354 	.word	0x00001354
    c868:	00001353 	.word	0x00001353

0000c86c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    c86c:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    c86e:	2800      	cmp	r0, #0
    c870:	d037      	beq.n	c8e2 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    c872:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    c874:	1e6b      	subs	r3, r5, #1
    c876:	2b03      	cmp	r3, #3
    c878:	d900      	bls.n	c87c <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    c87a:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    c87c:	2000      	movs	r0, #0
    c87e:	4b20      	ldr	r3, [pc, #128]	; (c900 <nm_drv_init+0x94>)
    c880:	4798      	blx	r3
    c882:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c884:	d12f      	bne.n	c8e6 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    c886:	481f      	ldr	r0, [pc, #124]	; (c904 <nm_drv_init+0x98>)
    c888:	4c1f      	ldr	r4, [pc, #124]	; (c908 <nm_drv_init+0x9c>)
    c88a:	47a0      	blx	r4
    c88c:	4b1f      	ldr	r3, [pc, #124]	; (c90c <nm_drv_init+0xa0>)
    c88e:	4798      	blx	r3
    c890:	0001      	movs	r1, r0
    c892:	481f      	ldr	r0, [pc, #124]	; (c910 <nm_drv_init+0xa4>)
    c894:	47a0      	blx	r4
    c896:	200d      	movs	r0, #13
    c898:	4b1e      	ldr	r3, [pc, #120]	; (c914 <nm_drv_init+0xa8>)
    c89a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    c89c:	4b1e      	ldr	r3, [pc, #120]	; (c918 <nm_drv_init+0xac>)
    c89e:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    c8a0:	0028      	movs	r0, r5
    c8a2:	4b1e      	ldr	r3, [pc, #120]	; (c91c <nm_drv_init+0xb0>)
    c8a4:	4798      	blx	r3
    c8a6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c8a8:	d117      	bne.n	c8da <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    c8aa:	0028      	movs	r0, r5
    c8ac:	4b1c      	ldr	r3, [pc, #112]	; (c920 <nm_drv_init+0xb4>)
    c8ae:	4798      	blx	r3
    c8b0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c8b2:	d112      	bne.n	c8da <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    c8b4:	3d02      	subs	r5, #2
    c8b6:	2d01      	cmp	r5, #1
    c8b8:	d911      	bls.n	c8de <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    c8ba:	4b1a      	ldr	r3, [pc, #104]	; (c924 <nm_drv_init+0xb8>)
    c8bc:	4798      	blx	r3
    c8be:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c8c0:	d00d      	beq.n	c8de <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    c8c2:	22a7      	movs	r2, #167	; 0xa7
    c8c4:	0052      	lsls	r2, r2, #1
    c8c6:	4918      	ldr	r1, [pc, #96]	; (c928 <nm_drv_init+0xbc>)
    c8c8:	4818      	ldr	r0, [pc, #96]	; (c92c <nm_drv_init+0xc0>)
    c8ca:	4b0f      	ldr	r3, [pc, #60]	; (c908 <nm_drv_init+0x9c>)
    c8cc:	4798      	blx	r3
    c8ce:	4818      	ldr	r0, [pc, #96]	; (c930 <nm_drv_init+0xc4>)
    c8d0:	4b18      	ldr	r3, [pc, #96]	; (c934 <nm_drv_init+0xc8>)
    c8d2:	4798      	blx	r3
    c8d4:	200d      	movs	r0, #13
    c8d6:	4b0f      	ldr	r3, [pc, #60]	; (c914 <nm_drv_init+0xa8>)
    c8d8:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    c8da:	4b17      	ldr	r3, [pc, #92]	; (c938 <nm_drv_init+0xcc>)
    c8dc:	4798      	blx	r3
ERR1:
	return ret;
}
    c8de:	0020      	movs	r0, r4
    c8e0:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    c8e2:	2501      	movs	r5, #1
    c8e4:	e7ca      	b.n	c87c <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    c8e6:	2290      	movs	r2, #144	; 0x90
    c8e8:	0052      	lsls	r2, r2, #1
    c8ea:	490f      	ldr	r1, [pc, #60]	; (c928 <nm_drv_init+0xbc>)
    c8ec:	480f      	ldr	r0, [pc, #60]	; (c92c <nm_drv_init+0xc0>)
    c8ee:	4b06      	ldr	r3, [pc, #24]	; (c908 <nm_drv_init+0x9c>)
    c8f0:	4798      	blx	r3
    c8f2:	4812      	ldr	r0, [pc, #72]	; (c93c <nm_drv_init+0xd0>)
    c8f4:	4b0f      	ldr	r3, [pc, #60]	; (c934 <nm_drv_init+0xc8>)
    c8f6:	4798      	blx	r3
    c8f8:	200d      	movs	r0, #13
    c8fa:	4b06      	ldr	r3, [pc, #24]	; (c914 <nm_drv_init+0xa8>)
    c8fc:	4798      	blx	r3
		goto ERR1;
    c8fe:	e7ee      	b.n	c8de <nm_drv_init+0x72>
    c900:	0000c671 	.word	0x0000c671
    c904:	00018cb0 	.word	0x00018cb0
    c908:	00016761 	.word	0x00016761
    c90c:	0000c251 	.word	0x0000c251
    c910:	00018ff4 	.word	0x00018ff4
    c914:	00016795 	.word	0x00016795
    c918:	0000d0ad 	.word	0x0000d0ad
    c91c:	0000c465 	.word	0x0000c465
    c920:	0000c56d 	.word	0x0000c56d
    c924:	0000c1f5 	.word	0x0000c1f5
    c928:	00018f3c 	.word	0x00018f3c
    c92c:	00018980 	.word	0x00018980
    c930:	00018fb8 	.word	0x00018fb8
    c934:	0001687d 	.word	0x0001687d
    c938:	0000c67d 	.word	0x0000c67d
    c93c:	00018fd8 	.word	0x00018fd8

0000c940 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    c940:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    c942:	4b1c      	ldr	r3, [pc, #112]	; (c9b4 <nm_drv_deinit+0x74>)
    c944:	4798      	blx	r3
    c946:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c948:	d10b      	bne.n	c962 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    c94a:	2000      	movs	r0, #0
    c94c:	4b1a      	ldr	r3, [pc, #104]	; (c9b8 <nm_drv_deinit+0x78>)
    c94e:	4798      	blx	r3
    c950:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c952:	d114      	bne.n	c97e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    c954:	4b19      	ldr	r3, [pc, #100]	; (c9bc <nm_drv_deinit+0x7c>)
    c956:	4798      	blx	r3
    c958:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    c95a:	d11d      	bne.n	c998 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    c95c:	4b18      	ldr	r3, [pc, #96]	; (c9c0 <nm_drv_deinit+0x80>)
    c95e:	4798      	blx	r3
    c960:	e00b      	b.n	c97a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    c962:	2266      	movs	r2, #102	; 0x66
    c964:	32ff      	adds	r2, #255	; 0xff
    c966:	4917      	ldr	r1, [pc, #92]	; (c9c4 <nm_drv_deinit+0x84>)
    c968:	4817      	ldr	r0, [pc, #92]	; (c9c8 <nm_drv_deinit+0x88>)
    c96a:	4b18      	ldr	r3, [pc, #96]	; (c9cc <nm_drv_deinit+0x8c>)
    c96c:	4798      	blx	r3
    c96e:	4818      	ldr	r0, [pc, #96]	; (c9d0 <nm_drv_deinit+0x90>)
    c970:	4b18      	ldr	r3, [pc, #96]	; (c9d4 <nm_drv_deinit+0x94>)
    c972:	4798      	blx	r3
    c974:	200d      	movs	r0, #13
    c976:	4b18      	ldr	r3, [pc, #96]	; (c9d8 <nm_drv_deinit+0x98>)
    c978:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    c97a:	0020      	movs	r0, r4
    c97c:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    c97e:	22b6      	movs	r2, #182	; 0xb6
    c980:	0052      	lsls	r2, r2, #1
    c982:	4910      	ldr	r1, [pc, #64]	; (c9c4 <nm_drv_deinit+0x84>)
    c984:	4810      	ldr	r0, [pc, #64]	; (c9c8 <nm_drv_deinit+0x88>)
    c986:	4b11      	ldr	r3, [pc, #68]	; (c9cc <nm_drv_deinit+0x8c>)
    c988:	4798      	blx	r3
    c98a:	4814      	ldr	r0, [pc, #80]	; (c9dc <nm_drv_deinit+0x9c>)
    c98c:	4b11      	ldr	r3, [pc, #68]	; (c9d4 <nm_drv_deinit+0x94>)
    c98e:	4798      	blx	r3
    c990:	200d      	movs	r0, #13
    c992:	4b11      	ldr	r3, [pc, #68]	; (c9d8 <nm_drv_deinit+0x98>)
    c994:	4798      	blx	r3
		goto ERR1;
    c996:	e7f0      	b.n	c97a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    c998:	22b9      	movs	r2, #185	; 0xb9
    c99a:	0052      	lsls	r2, r2, #1
    c99c:	4909      	ldr	r1, [pc, #36]	; (c9c4 <nm_drv_deinit+0x84>)
    c99e:	480a      	ldr	r0, [pc, #40]	; (c9c8 <nm_drv_deinit+0x88>)
    c9a0:	4b0a      	ldr	r3, [pc, #40]	; (c9cc <nm_drv_deinit+0x8c>)
    c9a2:	4798      	blx	r3
    c9a4:	480e      	ldr	r0, [pc, #56]	; (c9e0 <nm_drv_deinit+0xa0>)
    c9a6:	4b0b      	ldr	r3, [pc, #44]	; (c9d4 <nm_drv_deinit+0x94>)
    c9a8:	4798      	blx	r3
    c9aa:	200d      	movs	r0, #13
    c9ac:	4b0a      	ldr	r3, [pc, #40]	; (c9d8 <nm_drv_deinit+0x98>)
    c9ae:	4798      	blx	r3
		goto ERR1;
    c9b0:	e7e3      	b.n	c97a <nm_drv_deinit+0x3a>
    c9b2:	46c0      	nop			; (mov r8, r8)
    c9b4:	0000c5e5 	.word	0x0000c5e5
    c9b8:	0000df0d 	.word	0x0000df0d
    c9bc:	0000c67d 	.word	0x0000c67d
    c9c0:	0000d059 	.word	0x0000d059
    c9c4:	00018f48 	.word	0x00018f48
    c9c8:	00018980 	.word	0x00018980
    c9cc:	00016761 	.word	0x00016761
    c9d0:	00018f58 	.word	0x00018f58
    c9d4:	0001687d 	.word	0x0001687d
    c9d8:	00016795 	.word	0x00016795
    c9dc:	00018f78 	.word	0x00018f78
    c9e0:	00018f9c 	.word	0x00018f9c

0000c9e4 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    c9e4:	b500      	push	{lr}
    c9e6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    c9e8:	ab01      	add	r3, sp, #4
    c9ea:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    c9ec:	2200      	movs	r2, #0
    c9ee:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    c9f0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    c9f2:	0019      	movs	r1, r3
    c9f4:	2003      	movs	r0, #3
    c9f6:	4b02      	ldr	r3, [pc, #8]	; (ca00 <nmi_spi_write+0x1c>)
    c9f8:	4798      	blx	r3
}
    c9fa:	b005      	add	sp, #20
    c9fc:	bd00      	pop	{pc}
    c9fe:	46c0      	nop			; (mov r8, r8)
    ca00:	0000b085 	.word	0x0000b085

0000ca04 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    ca04:	b570      	push	{r4, r5, r6, lr}
    ca06:	b084      	sub	sp, #16
    ca08:	ac08      	add	r4, sp, #32
    ca0a:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    ca0c:	ac01      	add	r4, sp, #4
    ca0e:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    ca10:	303f      	adds	r0, #63	; 0x3f
    ca12:	b2c4      	uxtb	r4, r0
    ca14:	2c0e      	cmp	r4, #14
    ca16:	d900      	bls.n	ca1a <spi_cmd+0x16>
    ca18:	e084      	b.n	cb24 <spi_cmd+0x120>
    ca1a:	00a0      	lsls	r0, r4, #2
    ca1c:	4c4f      	ldr	r4, [pc, #316]	; (cb5c <spi_cmd+0x158>)
    ca1e:	5820      	ldr	r0, [r4, r0]
    ca20:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    ca22:	ab01      	add	r3, sp, #4
    ca24:	0c0a      	lsrs	r2, r1, #16
    ca26:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    ca28:	0a0a      	lsrs	r2, r1, #8
    ca2a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    ca2c:	70d9      	strb	r1, [r3, #3]
		len = 5;
    ca2e:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    ca30:	4b4b      	ldr	r3, [pc, #300]	; (cb60 <spi_cmd+0x15c>)
    ca32:	781b      	ldrb	r3, [r3, #0]
    ca34:	2b00      	cmp	r3, #0
    ca36:	d077      	beq.n	cb28 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    ca38:	3901      	subs	r1, #1
    ca3a:	b2c9      	uxtb	r1, r1
    ca3c:	e083      	b.n	cb46 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    ca3e:	0a0b      	lsrs	r3, r1, #8
    ca40:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    ca42:	2d00      	cmp	r5, #0
    ca44:	d107      	bne.n	ca56 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    ca46:	aa01      	add	r2, sp, #4
    ca48:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    ca4a:	ab01      	add	r3, sp, #4
    ca4c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    ca4e:	2200      	movs	r2, #0
    ca50:	70da      	strb	r2, [r3, #3]
		len = 5;
    ca52:	2105      	movs	r1, #5
		break;
    ca54:	e7ec      	b.n	ca30 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    ca56:	2280      	movs	r2, #128	; 0x80
    ca58:	4252      	negs	r2, r2
    ca5a:	4313      	orrs	r3, r2
    ca5c:	aa01      	add	r2, sp, #4
    ca5e:	7053      	strb	r3, [r2, #1]
    ca60:	e7f3      	b.n	ca4a <spi_cmd+0x46>
		bc[1] = 0x00;
    ca62:	ab01      	add	r3, sp, #4
    ca64:	2200      	movs	r2, #0
    ca66:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    ca68:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    ca6a:	70da      	strb	r2, [r3, #3]
		len = 5;
    ca6c:	2105      	movs	r1, #5
		break;
    ca6e:	e7df      	b.n	ca30 <spi_cmd+0x2c>
		bc[1] = 0x00;
    ca70:	ab01      	add	r3, sp, #4
    ca72:	2200      	movs	r2, #0
    ca74:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    ca76:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    ca78:	70da      	strb	r2, [r3, #3]
		len = 5;
    ca7a:	2105      	movs	r1, #5
		break;
    ca7c:	e7d8      	b.n	ca30 <spi_cmd+0x2c>
		bc[1] = 0xff;
    ca7e:	ab01      	add	r3, sp, #4
    ca80:	22ff      	movs	r2, #255	; 0xff
    ca82:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    ca84:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    ca86:	70da      	strb	r2, [r3, #3]
		len = 5;
    ca88:	2105      	movs	r1, #5
		break;
    ca8a:	e7d1      	b.n	ca30 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    ca8c:	aa01      	add	r2, sp, #4
    ca8e:	0c08      	lsrs	r0, r1, #16
    ca90:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    ca92:	0a08      	lsrs	r0, r1, #8
    ca94:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    ca96:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    ca98:	0a19      	lsrs	r1, r3, #8
    ca9a:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    ca9c:	7153      	strb	r3, [r2, #5]
		len = 7;
    ca9e:	2107      	movs	r1, #7
		break;
    caa0:	e7c6      	b.n	ca30 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    caa2:	aa01      	add	r2, sp, #4
    caa4:	0c08      	lsrs	r0, r1, #16
    caa6:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    caa8:	0a08      	lsrs	r0, r1, #8
    caaa:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    caac:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    caae:	0c19      	lsrs	r1, r3, #16
    cab0:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    cab2:	0a19      	lsrs	r1, r3, #8
    cab4:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    cab6:	7193      	strb	r3, [r2, #6]
		len = 8;
    cab8:	2108      	movs	r1, #8
		break;
    caba:	e7b9      	b.n	ca30 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    cabc:	0a0b      	lsrs	r3, r1, #8
    cabe:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    cac0:	2d00      	cmp	r5, #0
    cac2:	d10c      	bne.n	cade <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    cac4:	a801      	add	r0, sp, #4
    cac6:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    cac8:	ab01      	add	r3, sp, #4
    caca:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    cacc:	0e11      	lsrs	r1, r2, #24
    cace:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    cad0:	0c11      	lsrs	r1, r2, #16
    cad2:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    cad4:	0a11      	lsrs	r1, r2, #8
    cad6:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    cad8:	719a      	strb	r2, [r3, #6]
		len = 8;
    cada:	2108      	movs	r1, #8
		break;
    cadc:	e7a8      	b.n	ca30 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    cade:	2080      	movs	r0, #128	; 0x80
    cae0:	4240      	negs	r0, r0
    cae2:	4303      	orrs	r3, r0
    cae4:	a801      	add	r0, sp, #4
    cae6:	7043      	strb	r3, [r0, #1]
    cae8:	e7ee      	b.n	cac8 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    caea:	ab01      	add	r3, sp, #4
    caec:	0c08      	lsrs	r0, r1, #16
    caee:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    caf0:	0a08      	lsrs	r0, r1, #8
    caf2:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    caf4:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    caf6:	0e11      	lsrs	r1, r2, #24
    caf8:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    cafa:	0c11      	lsrs	r1, r2, #16
    cafc:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    cafe:	0a11      	lsrs	r1, r2, #8
    cb00:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    cb02:	71da      	strb	r2, [r3, #7]
		len = 9;
    cb04:	2109      	movs	r1, #9
		break;
    cb06:	e793      	b.n	ca30 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    cb08:	2290      	movs	r2, #144	; 0x90
    cb0a:	0052      	lsls	r2, r2, #1
    cb0c:	4915      	ldr	r1, [pc, #84]	; (cb64 <spi_cmd+0x160>)
    cb0e:	4816      	ldr	r0, [pc, #88]	; (cb68 <spi_cmd+0x164>)
    cb10:	4b16      	ldr	r3, [pc, #88]	; (cb6c <spi_cmd+0x168>)
    cb12:	4798      	blx	r3
    cb14:	4816      	ldr	r0, [pc, #88]	; (cb70 <spi_cmd+0x16c>)
    cb16:	4b17      	ldr	r3, [pc, #92]	; (cb74 <spi_cmd+0x170>)
    cb18:	4798      	blx	r3
    cb1a:	200d      	movs	r0, #13
    cb1c:	4b16      	ldr	r3, [pc, #88]	; (cb78 <spi_cmd+0x174>)
    cb1e:	4798      	blx	r3
			result = N_FAIL;
    cb20:	2300      	movs	r3, #0
    cb22:	e017      	b.n	cb54 <spi_cmd+0x150>
	switch (cmd) {
    cb24:	2300      	movs	r3, #0
    cb26:	e015      	b.n	cb54 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    cb28:	1e4e      	subs	r6, r1, #1
    cb2a:	aa01      	add	r2, sp, #4
    cb2c:	1995      	adds	r5, r2, r6
    cb2e:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    cb30:	4c12      	ldr	r4, [pc, #72]	; (cb7c <spi_cmd+0x178>)
    cb32:	005b      	lsls	r3, r3, #1
    cb34:	7810      	ldrb	r0, [r2, #0]
    cb36:	4043      	eors	r3, r0
    cb38:	5ce3      	ldrb	r3, [r4, r3]
    cb3a:	3201      	adds	r2, #1
	while (len--)
    cb3c:	42aa      	cmp	r2, r5
    cb3e:	d1f8      	bne.n	cb32 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    cb40:	005b      	lsls	r3, r3, #1
    cb42:	aa01      	add	r2, sp, #4
    cb44:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    cb46:	b289      	uxth	r1, r1
    cb48:	a801      	add	r0, sp, #4
    cb4a:	4b0d      	ldr	r3, [pc, #52]	; (cb80 <spi_cmd+0x17c>)
    cb4c:	4798      	blx	r3
    cb4e:	2301      	movs	r3, #1
    cb50:	2800      	cmp	r0, #0
    cb52:	d1d9      	bne.n	cb08 <spi_cmd+0x104>
		}
	}

	return result;
}
    cb54:	0018      	movs	r0, r3
    cb56:	b004      	add	sp, #16
    cb58:	bd70      	pop	{r4, r5, r6, pc}
    cb5a:	46c0      	nop			; (mov r8, r8)
    cb5c:	00019004 	.word	0x00019004
    cb60:	200003ec 	.word	0x200003ec
    cb64:	00019044 	.word	0x00019044
    cb68:	00018980 	.word	0x00018980
    cb6c:	00016761 	.word	0x00016761
    cb70:	000194d4 	.word	0x000194d4
    cb74:	0001687d 	.word	0x0001687d
    cb78:	00016795 	.word	0x00016795
    cb7c:	000190d0 	.word	0x000190d0
    cb80:	0000c9e5 	.word	0x0000c9e5

0000cb84 <nmi_spi_read>:
{
    cb84:	b500      	push	{lr}
    cb86:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    cb88:	ab01      	add	r3, sp, #4
    cb8a:	2200      	movs	r2, #0
    cb8c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    cb8e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    cb90:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    cb92:	0019      	movs	r1, r3
    cb94:	2003      	movs	r0, #3
    cb96:	4b02      	ldr	r3, [pc, #8]	; (cba0 <nmi_spi_read+0x1c>)
    cb98:	4798      	blx	r3
}
    cb9a:	b005      	add	sp, #20
    cb9c:	bd00      	pop	{pc}
    cb9e:	46c0      	nop			; (mov r8, r8)
    cba0:	0000b085 	.word	0x0000b085

0000cba4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    cba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cba6:	46c6      	mov	lr, r8
    cba8:	b500      	push	{lr}
    cbaa:	b082      	sub	sp, #8
    cbac:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    cbae:	28cf      	cmp	r0, #207	; 0xcf
    cbb0:	d02b      	beq.n	cc0a <spi_cmd_rsp+0x66>
    cbb2:	0003      	movs	r3, r0
    cbb4:	333b      	adds	r3, #59	; 0x3b
    cbb6:	b2db      	uxtb	r3, r3
    cbb8:	2b01      	cmp	r3, #1
    cbba:	d926      	bls.n	cc0a <spi_cmd_rsp+0x66>
{
    cbbc:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cbbe:	466b      	mov	r3, sp
    cbc0:	1dde      	adds	r6, r3, #7
    cbc2:	4b26      	ldr	r3, [pc, #152]	; (cc5c <spi_cmd_rsp+0xb8>)
    cbc4:	4698      	mov	r8, r3
    cbc6:	2101      	movs	r1, #1
    cbc8:	0030      	movs	r0, r6
    cbca:	47c0      	blx	r8
    cbcc:	1e05      	subs	r5, r0, #0
    cbce:	d125      	bne.n	cc1c <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    cbd0:	7833      	ldrb	r3, [r6, #0]
    cbd2:	42bb      	cmp	r3, r7
    cbd4:	d030      	beq.n	cc38 <spi_cmd_rsp+0x94>
    cbd6:	3c01      	subs	r4, #1
    cbd8:	b2e4      	uxtb	r4, r4
    cbda:	2c00      	cmp	r4, #0
    cbdc:	d1f3      	bne.n	cbc6 <spi_cmd_rsp+0x22>
    cbde:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cbe0:	466b      	mov	r3, sp
    cbe2:	1dde      	adds	r6, r3, #7
    cbe4:	4f1d      	ldr	r7, [pc, #116]	; (cc5c <spi_cmd_rsp+0xb8>)
    cbe6:	2101      	movs	r1, #1
    cbe8:	0030      	movs	r0, r6
    cbea:	47b8      	blx	r7
    cbec:	2800      	cmp	r0, #0
    cbee:	d125      	bne.n	cc3c <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    cbf0:	7833      	ldrb	r3, [r6, #0]
    cbf2:	2b00      	cmp	r3, #0
    cbf4:	d02f      	beq.n	cc56 <spi_cmd_rsp+0xb2>
    cbf6:	3c01      	subs	r4, #1
    cbf8:	b2e4      	uxtb	r4, r4
    cbfa:	2c00      	cmp	r4, #0
    cbfc:	d1f3      	bne.n	cbe6 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    cbfe:	2501      	movs	r5, #1

_fail_:

	return result;
}
    cc00:	0028      	movs	r0, r5
    cc02:	b002      	add	sp, #8
    cc04:	bc04      	pop	{r2}
    cc06:	4690      	mov	r8, r2
    cc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cc0a:	2101      	movs	r1, #1
    cc0c:	466b      	mov	r3, sp
    cc0e:	1dd8      	adds	r0, r3, #7
    cc10:	4b12      	ldr	r3, [pc, #72]	; (cc5c <spi_cmd_rsp+0xb8>)
    cc12:	4798      	blx	r3
			result = N_FAIL;
    cc14:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cc16:	2800      	cmp	r0, #0
    cc18:	d0d0      	beq.n	cbbc <spi_cmd_rsp+0x18>
    cc1a:	e7f1      	b.n	cc00 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    cc1c:	225c      	movs	r2, #92	; 0x5c
    cc1e:	32ff      	adds	r2, #255	; 0xff
    cc20:	490f      	ldr	r1, [pc, #60]	; (cc60 <spi_cmd_rsp+0xbc>)
    cc22:	4810      	ldr	r0, [pc, #64]	; (cc64 <spi_cmd_rsp+0xc0>)
    cc24:	4b10      	ldr	r3, [pc, #64]	; (cc68 <spi_cmd_rsp+0xc4>)
    cc26:	4798      	blx	r3
    cc28:	4810      	ldr	r0, [pc, #64]	; (cc6c <spi_cmd_rsp+0xc8>)
    cc2a:	4b11      	ldr	r3, [pc, #68]	; (cc70 <spi_cmd_rsp+0xcc>)
    cc2c:	4798      	blx	r3
    cc2e:	200d      	movs	r0, #13
    cc30:	4b10      	ldr	r3, [pc, #64]	; (cc74 <spi_cmd_rsp+0xd0>)
    cc32:	4798      	blx	r3
			result = N_FAIL;
    cc34:	2500      	movs	r5, #0
			goto _fail_;
    cc36:	e7e3      	b.n	cc00 <spi_cmd_rsp+0x5c>
    cc38:	240b      	movs	r4, #11
    cc3a:	e7d1      	b.n	cbe0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    cc3c:	226a      	movs	r2, #106	; 0x6a
    cc3e:	32ff      	adds	r2, #255	; 0xff
    cc40:	4907      	ldr	r1, [pc, #28]	; (cc60 <spi_cmd_rsp+0xbc>)
    cc42:	4808      	ldr	r0, [pc, #32]	; (cc64 <spi_cmd_rsp+0xc0>)
    cc44:	4b08      	ldr	r3, [pc, #32]	; (cc68 <spi_cmd_rsp+0xc4>)
    cc46:	4798      	blx	r3
    cc48:	4808      	ldr	r0, [pc, #32]	; (cc6c <spi_cmd_rsp+0xc8>)
    cc4a:	4b09      	ldr	r3, [pc, #36]	; (cc70 <spi_cmd_rsp+0xcc>)
    cc4c:	4798      	blx	r3
    cc4e:	200d      	movs	r0, #13
    cc50:	4b08      	ldr	r3, [pc, #32]	; (cc74 <spi_cmd_rsp+0xd0>)
    cc52:	4798      	blx	r3
			goto _fail_;
    cc54:	e7d4      	b.n	cc00 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    cc56:	2501      	movs	r5, #1
    cc58:	e7d2      	b.n	cc00 <spi_cmd_rsp+0x5c>
    cc5a:	46c0      	nop			; (mov r8, r8)
    cc5c:	0000cb85 	.word	0x0000cb85
    cc60:	0001905c 	.word	0x0001905c
    cc64:	00018980 	.word	0x00018980
    cc68:	00016761 	.word	0x00016761
    cc6c:	00019500 	.word	0x00019500
    cc70:	0001687d 	.word	0x0001687d
    cc74:	00016795 	.word	0x00016795

0000cc78 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    cc78:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc7a:	46de      	mov	lr, fp
    cc7c:	4657      	mov	r7, sl
    cc7e:	464e      	mov	r6, r9
    cc80:	4645      	mov	r5, r8
    cc82:	b5e0      	push	{r5, r6, r7, lr}
    cc84:	b087      	sub	sp, #28
    cc86:	9001      	str	r0, [sp, #4]
    cc88:	4689      	mov	r9, r1
    cc8a:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    cc8c:	2300      	movs	r3, #0
    cc8e:	469a      	mov	sl, r3
    cc90:	2380      	movs	r3, #128	; 0x80
    cc92:	019b      	lsls	r3, r3, #6
    cc94:	469b      	mov	fp, r3
    cc96:	466a      	mov	r2, sp
    cc98:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cc9a:	4b3c      	ldr	r3, [pc, #240]	; (cd8c <spi_data_read+0x114>)
    cc9c:	4698      	mov	r8, r3
    cc9e:	e02f      	b.n	cd00 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    cca0:	22be      	movs	r2, #190	; 0xbe
    cca2:	0092      	lsls	r2, r2, #2
    cca4:	493a      	ldr	r1, [pc, #232]	; (cd90 <spi_data_read+0x118>)
    cca6:	483b      	ldr	r0, [pc, #236]	; (cd94 <spi_data_read+0x11c>)
    cca8:	4b3b      	ldr	r3, [pc, #236]	; (cd98 <spi_data_read+0x120>)
    ccaa:	4798      	blx	r3
    ccac:	483b      	ldr	r0, [pc, #236]	; (cd9c <spi_data_read+0x124>)
    ccae:	4b3c      	ldr	r3, [pc, #240]	; (cda0 <spi_data_read+0x128>)
    ccb0:	4798      	blx	r3
    ccb2:	200d      	movs	r0, #13
    ccb4:	4b3b      	ldr	r3, [pc, #236]	; (cda4 <spi_data_read+0x12c>)
    ccb6:	4798      	blx	r3
    ccb8:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    ccba:	0028      	movs	r0, r5
    ccbc:	b007      	add	sp, #28
    ccbe:	bc3c      	pop	{r2, r3, r4, r5}
    ccc0:	4690      	mov	r8, r2
    ccc2:	4699      	mov	r9, r3
    ccc4:	46a2      	mov	sl, r4
    ccc6:	46ab      	mov	fp, r5
    ccc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    ccca:	2c00      	cmp	r4, #0
    cccc:	dd2e      	ble.n	cd2c <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    ccce:	9b01      	ldr	r3, [sp, #4]
    ccd0:	4453      	add	r3, sl
    ccd2:	0018      	movs	r0, r3
    ccd4:	0039      	movs	r1, r7
    ccd6:	4b2d      	ldr	r3, [pc, #180]	; (cd8c <spi_data_read+0x114>)
    ccd8:	4798      	blx	r3
    ccda:	1e04      	subs	r4, r0, #0
    ccdc:	d134      	bne.n	cd48 <spi_data_read+0xd0>
		if(!clockless)
    ccde:	9b02      	ldr	r3, [sp, #8]
    cce0:	2b00      	cmp	r3, #0
    cce2:	d103      	bne.n	ccec <spi_data_read+0x74>
			if (!gu8Crc_off) {
    cce4:	4b30      	ldr	r3, [pc, #192]	; (cda8 <spi_data_read+0x130>)
    cce6:	781b      	ldrb	r3, [r3, #0]
    cce8:	2b00      	cmp	r3, #0
    ccea:	d039      	beq.n	cd60 <spi_data_read+0xe8>
		ix += nbytes;
    ccec:	4653      	mov	r3, sl
    ccee:	18fb      	adds	r3, r7, r3
    ccf0:	b21b      	sxth	r3, r3
    ccf2:	469a      	mov	sl, r3
		sz -= nbytes;
    ccf4:	464b      	mov	r3, r9
    ccf6:	1bdf      	subs	r7, r3, r7
    ccf8:	b2bb      	uxth	r3, r7
    ccfa:	4699      	mov	r9, r3
	} while (sz);
    ccfc:	2b00      	cmp	r3, #0
    ccfe:	d043      	beq.n	cd88 <spi_data_read+0x110>
    cd00:	464f      	mov	r7, r9
    cd02:	45d9      	cmp	r9, fp
    cd04:	d901      	bls.n	cd0a <spi_data_read+0x92>
    cd06:	466b      	mov	r3, sp
    cd08:	89df      	ldrh	r7, [r3, #14]
    cd0a:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    cd0c:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    cd0e:	ab04      	add	r3, sp, #16
    cd10:	1cde      	adds	r6, r3, #3
    cd12:	2101      	movs	r1, #1
    cd14:	0030      	movs	r0, r6
    cd16:	47c0      	blx	r8
    cd18:	1e05      	subs	r5, r0, #0
    cd1a:	d1c1      	bne.n	cca0 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    cd1c:	7833      	ldrb	r3, [r6, #0]
    cd1e:	091b      	lsrs	r3, r3, #4
    cd20:	2b0f      	cmp	r3, #15
    cd22:	d0d2      	beq.n	ccca <spi_data_read+0x52>
    cd24:	3c01      	subs	r4, #1
    cd26:	b224      	sxth	r4, r4
		} while (retry--);
    cd28:	1c63      	adds	r3, r4, #1
    cd2a:	d1f2      	bne.n	cd12 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    cd2c:	22c1      	movs	r2, #193	; 0xc1
    cd2e:	0092      	lsls	r2, r2, #2
    cd30:	4917      	ldr	r1, [pc, #92]	; (cd90 <spi_data_read+0x118>)
    cd32:	4818      	ldr	r0, [pc, #96]	; (cd94 <spi_data_read+0x11c>)
    cd34:	4c18      	ldr	r4, [pc, #96]	; (cd98 <spi_data_read+0x120>)
    cd36:	47a0      	blx	r4
    cd38:	ab04      	add	r3, sp, #16
    cd3a:	78d9      	ldrb	r1, [r3, #3]
    cd3c:	481b      	ldr	r0, [pc, #108]	; (cdac <spi_data_read+0x134>)
    cd3e:	47a0      	blx	r4
    cd40:	200d      	movs	r0, #13
    cd42:	4b18      	ldr	r3, [pc, #96]	; (cda4 <spi_data_read+0x12c>)
    cd44:	4798      	blx	r3
			break;
    cd46:	e7b8      	b.n	ccba <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    cd48:	4a19      	ldr	r2, [pc, #100]	; (cdb0 <spi_data_read+0x138>)
    cd4a:	4911      	ldr	r1, [pc, #68]	; (cd90 <spi_data_read+0x118>)
    cd4c:	4811      	ldr	r0, [pc, #68]	; (cd94 <spi_data_read+0x11c>)
    cd4e:	4b12      	ldr	r3, [pc, #72]	; (cd98 <spi_data_read+0x120>)
    cd50:	4798      	blx	r3
    cd52:	4818      	ldr	r0, [pc, #96]	; (cdb4 <spi_data_read+0x13c>)
    cd54:	4b12      	ldr	r3, [pc, #72]	; (cda0 <spi_data_read+0x128>)
    cd56:	4798      	blx	r3
    cd58:	200d      	movs	r0, #13
    cd5a:	4b12      	ldr	r3, [pc, #72]	; (cda4 <spi_data_read+0x12c>)
    cd5c:	4798      	blx	r3
			break;
    cd5e:	e7ac      	b.n	ccba <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    cd60:	2102      	movs	r1, #2
    cd62:	a805      	add	r0, sp, #20
    cd64:	4b09      	ldr	r3, [pc, #36]	; (cd8c <spi_data_read+0x114>)
    cd66:	4798      	blx	r3
    cd68:	2800      	cmp	r0, #0
    cd6a:	d0bf      	beq.n	ccec <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    cd6c:	22c6      	movs	r2, #198	; 0xc6
    cd6e:	0092      	lsls	r2, r2, #2
    cd70:	4907      	ldr	r1, [pc, #28]	; (cd90 <spi_data_read+0x118>)
    cd72:	4808      	ldr	r0, [pc, #32]	; (cd94 <spi_data_read+0x11c>)
    cd74:	4b08      	ldr	r3, [pc, #32]	; (cd98 <spi_data_read+0x120>)
    cd76:	4798      	blx	r3
    cd78:	480f      	ldr	r0, [pc, #60]	; (cdb8 <spi_data_read+0x140>)
    cd7a:	4b09      	ldr	r3, [pc, #36]	; (cda0 <spi_data_read+0x128>)
    cd7c:	4798      	blx	r3
    cd7e:	200d      	movs	r0, #13
    cd80:	4b08      	ldr	r3, [pc, #32]	; (cda4 <spi_data_read+0x12c>)
    cd82:	4798      	blx	r3
					result = N_FAIL;
    cd84:	0025      	movs	r5, r4
					break;
    cd86:	e798      	b.n	ccba <spi_data_read+0x42>
    cd88:	2501      	movs	r5, #1
    cd8a:	e796      	b.n	ccba <spi_data_read+0x42>
    cd8c:	0000cb85 	.word	0x0000cb85
    cd90:	00019068 	.word	0x00019068
    cd94:	00018980 	.word	0x00018980
    cd98:	00016761 	.word	0x00016761
    cd9c:	00019534 	.word	0x00019534
    cda0:	0001687d 	.word	0x0001687d
    cda4:	00016795 	.word	0x00016795
    cda8:	200003ec 	.word	0x200003ec
    cdac:	00019568 	.word	0x00019568
    cdb0:	0000030d 	.word	0x0000030d
    cdb4:	00019598 	.word	0x00019598
    cdb8:	000195c8 	.word	0x000195c8

0000cdbc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    cdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cdbe:	46d6      	mov	lr, sl
    cdc0:	464f      	mov	r7, r9
    cdc2:	4646      	mov	r6, r8
    cdc4:	b5c0      	push	{r6, r7, lr}
    cdc6:	b086      	sub	sp, #24
    cdc8:	9003      	str	r0, [sp, #12]
    cdca:	9104      	str	r1, [sp, #16]
    cdcc:	2830      	cmp	r0, #48	; 0x30
    cdce:	d80f      	bhi.n	cdf0 <spi_write_reg+0x34>
    cdd0:	4b30      	ldr	r3, [pc, #192]	; (ce94 <spi_write_reg+0xd8>)
    cdd2:	781f      	ldrb	r7, [r3, #0]
    cdd4:	b2fb      	uxtb	r3, r7
    cdd6:	9305      	str	r3, [sp, #20]
    cdd8:	2300      	movs	r3, #0
    cdda:	2230      	movs	r2, #48	; 0x30
    cddc:	9903      	ldr	r1, [sp, #12]
    cdde:	428a      	cmp	r2, r1
    cde0:	415b      	adcs	r3, r3
    cde2:	b2db      	uxtb	r3, r3
    cde4:	469a      	mov	sl, r3
    cde6:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    cde8:	4b2b      	ldr	r3, [pc, #172]	; (ce98 <spi_write_reg+0xdc>)
    cdea:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    cdec:	46d1      	mov	r9, sl
    cdee:	e033      	b.n	ce58 <spi_write_reg+0x9c>
    cdf0:	4b2a      	ldr	r3, [pc, #168]	; (ce9c <spi_write_reg+0xe0>)
    cdf2:	781f      	ldrb	r7, [r3, #0]
    cdf4:	e7ee      	b.n	cdd4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    cdf6:	9805      	ldr	r0, [sp, #20]
    cdf8:	4b29      	ldr	r3, [pc, #164]	; (cea0 <spi_write_reg+0xe4>)
    cdfa:	4798      	blx	r3
    cdfc:	0004      	movs	r4, r0
	if (result != N_OK) {
    cdfe:	2801      	cmp	r0, #1
    ce00:	d041      	beq.n	ce86 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    ce02:	4a28      	ldr	r2, [pc, #160]	; (cea4 <spi_write_reg+0xe8>)
    ce04:	4928      	ldr	r1, [pc, #160]	; (cea8 <spi_write_reg+0xec>)
    ce06:	4829      	ldr	r0, [pc, #164]	; (ceac <spi_write_reg+0xf0>)
    ce08:	4e29      	ldr	r6, [pc, #164]	; (ceb0 <spi_write_reg+0xf4>)
    ce0a:	47b0      	blx	r6
    ce0c:	9903      	ldr	r1, [sp, #12]
    ce0e:	4829      	ldr	r0, [pc, #164]	; (ceb4 <spi_write_reg+0xf8>)
    ce10:	47b0      	blx	r6
    ce12:	200d      	movs	r0, #13
    ce14:	4b28      	ldr	r3, [pc, #160]	; (ceb8 <spi_write_reg+0xfc>)
    ce16:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    ce18:	2001      	movs	r0, #1
    ce1a:	4e28      	ldr	r6, [pc, #160]	; (cebc <spi_write_reg+0x100>)
    ce1c:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    ce1e:	2300      	movs	r3, #0
    ce20:	9300      	str	r3, [sp, #0]
    ce22:	2200      	movs	r2, #0
    ce24:	2100      	movs	r1, #0
    ce26:	20cf      	movs	r0, #207	; 0xcf
    ce28:	4f1b      	ldr	r7, [pc, #108]	; (ce98 <spi_write_reg+0xdc>)
    ce2a:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    ce2c:	20cf      	movs	r0, #207	; 0xcf
    ce2e:	4b1c      	ldr	r3, [pc, #112]	; (cea0 <spi_write_reg+0xe4>)
    ce30:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    ce32:	22ea      	movs	r2, #234	; 0xea
    ce34:	0092      	lsls	r2, r2, #2
    ce36:	491c      	ldr	r1, [pc, #112]	; (cea8 <spi_write_reg+0xec>)
    ce38:	481c      	ldr	r0, [pc, #112]	; (ceac <spi_write_reg+0xf0>)
    ce3a:	4f1d      	ldr	r7, [pc, #116]	; (ceb0 <spi_write_reg+0xf4>)
    ce3c:	47b8      	blx	r7
    ce3e:	9b04      	ldr	r3, [sp, #16]
    ce40:	9a03      	ldr	r2, [sp, #12]
    ce42:	0029      	movs	r1, r5
    ce44:	481e      	ldr	r0, [pc, #120]	; (cec0 <spi_write_reg+0x104>)
    ce46:	47b8      	blx	r7
    ce48:	200d      	movs	r0, #13
    ce4a:	4b1b      	ldr	r3, [pc, #108]	; (ceb8 <spi_write_reg+0xfc>)
    ce4c:	4798      	blx	r3
		nm_bsp_sleep(1);
    ce4e:	2001      	movs	r0, #1
    ce50:	47b0      	blx	r6
    ce52:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    ce54:	2d00      	cmp	r5, #0
    ce56:	d016      	beq.n	ce86 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    ce58:	464b      	mov	r3, r9
    ce5a:	9300      	str	r3, [sp, #0]
    ce5c:	2304      	movs	r3, #4
    ce5e:	9a04      	ldr	r2, [sp, #16]
    ce60:	9f03      	ldr	r7, [sp, #12]
    ce62:	0039      	movs	r1, r7
    ce64:	9805      	ldr	r0, [sp, #20]
    ce66:	47c0      	blx	r8
    ce68:	0004      	movs	r4, r0
	if (result != N_OK) {
    ce6a:	2801      	cmp	r0, #1
    ce6c:	d0c3      	beq.n	cdf6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    ce6e:	4a15      	ldr	r2, [pc, #84]	; (cec4 <spi_write_reg+0x108>)
    ce70:	490d      	ldr	r1, [pc, #52]	; (cea8 <spi_write_reg+0xec>)
    ce72:	480e      	ldr	r0, [pc, #56]	; (ceac <spi_write_reg+0xf0>)
    ce74:	4e0e      	ldr	r6, [pc, #56]	; (ceb0 <spi_write_reg+0xf4>)
    ce76:	47b0      	blx	r6
    ce78:	0039      	movs	r1, r7
    ce7a:	4813      	ldr	r0, [pc, #76]	; (cec8 <spi_write_reg+0x10c>)
    ce7c:	47b0      	blx	r6
    ce7e:	200d      	movs	r0, #13
    ce80:	4b0d      	ldr	r3, [pc, #52]	; (ceb8 <spi_write_reg+0xfc>)
    ce82:	4798      	blx	r3
		goto _FAIL_;
    ce84:	e7c8      	b.n	ce18 <spi_write_reg+0x5c>
	}

	return result;
}
    ce86:	0020      	movs	r0, r4
    ce88:	b006      	add	sp, #24
    ce8a:	bc1c      	pop	{r2, r3, r4}
    ce8c:	4690      	mov	r8, r2
    ce8e:	4699      	mov	r9, r3
    ce90:	46a2      	mov	sl, r4
    ce92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce94:	00019040 	.word	0x00019040
    ce98:	0000ca05 	.word	0x0000ca05
    ce9c:	00019041 	.word	0x00019041
    cea0:	0000cba5 	.word	0x0000cba5
    cea4:	00000395 	.word	0x00000395
    cea8:	00019088 	.word	0x00019088
    ceac:	00018980 	.word	0x00018980
    ceb0:	00016761 	.word	0x00016761
    ceb4:	000196c0 	.word	0x000196c0
    ceb8:	00016795 	.word	0x00016795
    cebc:	0000aec5 	.word	0x0000aec5
    cec0:	000196f8 	.word	0x000196f8
    cec4:	0000038f 	.word	0x0000038f
    cec8:	00019694 	.word	0x00019694

0000cecc <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    cecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cece:	46de      	mov	lr, fp
    ced0:	4657      	mov	r7, sl
    ced2:	464e      	mov	r6, r9
    ced4:	4645      	mov	r5, r8
    ced6:	b5e0      	push	{r5, r6, r7, lr}
    ced8:	b087      	sub	sp, #28
    ceda:	9002      	str	r0, [sp, #8]
    cedc:	468b      	mov	fp, r1
    cede:	28ff      	cmp	r0, #255	; 0xff
    cee0:	d80f      	bhi.n	cf02 <spi_read_reg+0x36>
    cee2:	4b41      	ldr	r3, [pc, #260]	; (cfe8 <spi_read_reg+0x11c>)
    cee4:	781f      	ldrb	r7, [r3, #0]
    cee6:	b2fb      	uxtb	r3, r7
    cee8:	9303      	str	r3, [sp, #12]
    ceea:	2300      	movs	r3, #0
    ceec:	22ff      	movs	r2, #255	; 0xff
    ceee:	9902      	ldr	r1, [sp, #8]
    cef0:	428a      	cmp	r2, r1
    cef2:	415b      	adcs	r3, r3
    cef4:	b2db      	uxtb	r3, r3
    cef6:	469a      	mov	sl, r3
    cef8:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    cefa:	4b3c      	ldr	r3, [pc, #240]	; (cfec <spi_read_reg+0x120>)
    cefc:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    cefe:	46d1      	mov	r9, sl
    cf00:	e031      	b.n	cf66 <spi_read_reg+0x9a>
    cf02:	4b3b      	ldr	r3, [pc, #236]	; (cff0 <spi_read_reg+0x124>)
    cf04:	781f      	ldrb	r7, [r3, #0]
    cf06:	e7ee      	b.n	cee6 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    cf08:	9803      	ldr	r0, [sp, #12]
    cf0a:	4b3a      	ldr	r3, [pc, #232]	; (cff4 <spi_read_reg+0x128>)
    cf0c:	4798      	blx	r3
    cf0e:	0004      	movs	r4, r0
	if (result != N_OK) {
    cf10:	2801      	cmp	r0, #1
    cf12:	d040      	beq.n	cf96 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    cf14:	4a38      	ldr	r2, [pc, #224]	; (cff8 <spi_read_reg+0x12c>)
    cf16:	4939      	ldr	r1, [pc, #228]	; (cffc <spi_read_reg+0x130>)
    cf18:	4839      	ldr	r0, [pc, #228]	; (d000 <spi_read_reg+0x134>)
    cf1a:	4e3a      	ldr	r6, [pc, #232]	; (d004 <spi_read_reg+0x138>)
    cf1c:	47b0      	blx	r6
    cf1e:	9902      	ldr	r1, [sp, #8]
    cf20:	4839      	ldr	r0, [pc, #228]	; (d008 <spi_read_reg+0x13c>)
    cf22:	47b0      	blx	r6
    cf24:	200d      	movs	r0, #13
    cf26:	4b39      	ldr	r3, [pc, #228]	; (d00c <spi_read_reg+0x140>)
    cf28:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    cf2a:	2001      	movs	r0, #1
    cf2c:	4e38      	ldr	r6, [pc, #224]	; (d010 <spi_read_reg+0x144>)
    cf2e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    cf30:	2300      	movs	r3, #0
    cf32:	9300      	str	r3, [sp, #0]
    cf34:	2200      	movs	r2, #0
    cf36:	2100      	movs	r1, #0
    cf38:	20cf      	movs	r0, #207	; 0xcf
    cf3a:	4f2c      	ldr	r7, [pc, #176]	; (cfec <spi_read_reg+0x120>)
    cf3c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    cf3e:	20cf      	movs	r0, #207	; 0xcf
    cf40:	4b2c      	ldr	r3, [pc, #176]	; (cff4 <spi_read_reg+0x128>)
    cf42:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    cf44:	4a33      	ldr	r2, [pc, #204]	; (d014 <spi_read_reg+0x148>)
    cf46:	492d      	ldr	r1, [pc, #180]	; (cffc <spi_read_reg+0x130>)
    cf48:	482d      	ldr	r0, [pc, #180]	; (d000 <spi_read_reg+0x134>)
    cf4a:	4f2e      	ldr	r7, [pc, #184]	; (d004 <spi_read_reg+0x138>)
    cf4c:	47b8      	blx	r7
    cf4e:	9a02      	ldr	r2, [sp, #8]
    cf50:	0029      	movs	r1, r5
    cf52:	4831      	ldr	r0, [pc, #196]	; (d018 <spi_read_reg+0x14c>)
    cf54:	47b8      	blx	r7
    cf56:	200d      	movs	r0, #13
    cf58:	4b2c      	ldr	r3, [pc, #176]	; (d00c <spi_read_reg+0x140>)
    cf5a:	4798      	blx	r3
		nm_bsp_sleep(1);
    cf5c:	2001      	movs	r0, #1
    cf5e:	47b0      	blx	r6
    cf60:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    cf62:	2d00      	cmp	r5, #0
    cf64:	d038      	beq.n	cfd8 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    cf66:	464b      	mov	r3, r9
    cf68:	9300      	str	r3, [sp, #0]
    cf6a:	2304      	movs	r3, #4
    cf6c:	2200      	movs	r2, #0
    cf6e:	9f02      	ldr	r7, [sp, #8]
    cf70:	0039      	movs	r1, r7
    cf72:	9803      	ldr	r0, [sp, #12]
    cf74:	47c0      	blx	r8
    cf76:	0004      	movs	r4, r0
	if (result != N_OK) {
    cf78:	2801      	cmp	r0, #1
    cf7a:	d0c5      	beq.n	cf08 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    cf7c:	2282      	movs	r2, #130	; 0x82
    cf7e:	00d2      	lsls	r2, r2, #3
    cf80:	491e      	ldr	r1, [pc, #120]	; (cffc <spi_read_reg+0x130>)
    cf82:	481f      	ldr	r0, [pc, #124]	; (d000 <spi_read_reg+0x134>)
    cf84:	4e1f      	ldr	r6, [pc, #124]	; (d004 <spi_read_reg+0x138>)
    cf86:	47b0      	blx	r6
    cf88:	0039      	movs	r1, r7
    cf8a:	4824      	ldr	r0, [pc, #144]	; (d01c <spi_read_reg+0x150>)
    cf8c:	47b0      	blx	r6
    cf8e:	200d      	movs	r0, #13
    cf90:	4b1e      	ldr	r3, [pc, #120]	; (d00c <spi_read_reg+0x140>)
    cf92:	4798      	blx	r3
		goto _FAIL_;
    cf94:	e7c9      	b.n	cf2a <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    cf96:	464a      	mov	r2, r9
    cf98:	2104      	movs	r1, #4
    cf9a:	a805      	add	r0, sp, #20
    cf9c:	4b20      	ldr	r3, [pc, #128]	; (d020 <spi_read_reg+0x154>)
    cf9e:	4798      	blx	r3
    cfa0:	0004      	movs	r4, r0
	if (result != N_OK) {
    cfa2:	2801      	cmp	r0, #1
    cfa4:	d00b      	beq.n	cfbe <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    cfa6:	4a1f      	ldr	r2, [pc, #124]	; (d024 <spi_read_reg+0x158>)
    cfa8:	4914      	ldr	r1, [pc, #80]	; (cffc <spi_read_reg+0x130>)
    cfaa:	4815      	ldr	r0, [pc, #84]	; (d000 <spi_read_reg+0x134>)
    cfac:	4b15      	ldr	r3, [pc, #84]	; (d004 <spi_read_reg+0x138>)
    cfae:	4798      	blx	r3
    cfb0:	481d      	ldr	r0, [pc, #116]	; (d028 <spi_read_reg+0x15c>)
    cfb2:	4b1e      	ldr	r3, [pc, #120]	; (d02c <spi_read_reg+0x160>)
    cfb4:	4798      	blx	r3
    cfb6:	200d      	movs	r0, #13
    cfb8:	4b14      	ldr	r3, [pc, #80]	; (d00c <spi_read_reg+0x140>)
    cfba:	4798      	blx	r3
		goto _FAIL_;
    cfbc:	e7b5      	b.n	cf2a <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    cfbe:	aa05      	add	r2, sp, #20
    cfc0:	7853      	ldrb	r3, [r2, #1]
    cfc2:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    cfc4:	7891      	ldrb	r1, [r2, #2]
    cfc6:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    cfc8:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    cfca:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    cfcc:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    cfce:	78d2      	ldrb	r2, [r2, #3]
    cfd0:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    cfd2:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    cfd4:	465a      	mov	r2, fp
    cfd6:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    cfd8:	0020      	movs	r0, r4
    cfda:	b007      	add	sp, #28
    cfdc:	bc3c      	pop	{r2, r3, r4, r5}
    cfde:	4690      	mov	r8, r2
    cfe0:	4699      	mov	r9, r3
    cfe2:	46a2      	mov	sl, r4
    cfe4:	46ab      	mov	fp, r5
    cfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfe8:	00019042 	.word	0x00019042
    cfec:	0000ca05 	.word	0x0000ca05
    cff0:	00019043 	.word	0x00019043
    cff4:	0000cba5 	.word	0x0000cba5
    cff8:	00000416 	.word	0x00000416
    cffc:	000190a8 	.word	0x000190a8
    d000:	00018980 	.word	0x00018980
    d004:	00016761 	.word	0x00016761
    d008:	00019628 	.word	0x00019628
    d00c:	00016795 	.word	0x00016795
    d010:	0000aec5 	.word	0x0000aec5
    d014:	00000435 	.word	0x00000435
    d018:	0001967c 	.word	0x0001967c
    d01c:	000195fc 	.word	0x000195fc
    d020:	0000cc79 	.word	0x0000cc79
    d024:	0000041d 	.word	0x0000041d
    d028:	0001965c 	.word	0x0001965c
    d02c:	0001687d 	.word	0x0001687d

0000d030 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    d030:	b510      	push	{r4, lr}
    d032:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d034:	2300      	movs	r3, #0
    d036:	9300      	str	r3, [sp, #0]
    d038:	2200      	movs	r2, #0
    d03a:	2100      	movs	r1, #0
    d03c:	20cf      	movs	r0, #207	; 0xcf
    d03e:	4c04      	ldr	r4, [pc, #16]	; (d050 <nm_spi_reset+0x20>)
    d040:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    d042:	20cf      	movs	r0, #207	; 0xcf
    d044:	4b03      	ldr	r3, [pc, #12]	; (d054 <nm_spi_reset+0x24>)
    d046:	4798      	blx	r3
	return M2M_SUCCESS;
}
    d048:	2000      	movs	r0, #0
    d04a:	b002      	add	sp, #8
    d04c:	bd10      	pop	{r4, pc}
    d04e:	46c0      	nop			; (mov r8, r8)
    d050:	0000ca05 	.word	0x0000ca05
    d054:	0000cba5 	.word	0x0000cba5

0000d058 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    d058:	2200      	movs	r2, #0
    d05a:	4b02      	ldr	r3, [pc, #8]	; (d064 <nm_spi_deinit+0xc>)
    d05c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    d05e:	2000      	movs	r0, #0
    d060:	4770      	bx	lr
    d062:	46c0      	nop			; (mov r8, r8)
    d064:	200003ec 	.word	0x200003ec

0000d068 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    d068:	b500      	push	{lr}
    d06a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    d06c:	a901      	add	r1, sp, #4
    d06e:	4b02      	ldr	r3, [pc, #8]	; (d078 <nm_spi_read_reg+0x10>)
    d070:	4798      	blx	r3

	return u32Val;
}
    d072:	9801      	ldr	r0, [sp, #4]
    d074:	b003      	add	sp, #12
    d076:	bd00      	pop	{pc}
    d078:	0000cecd 	.word	0x0000cecd

0000d07c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    d07c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    d07e:	4b04      	ldr	r3, [pc, #16]	; (d090 <nm_spi_read_reg_with_ret+0x14>)
    d080:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d082:	2300      	movs	r3, #0
    d084:	2801      	cmp	r0, #1
    d086:	d101      	bne.n	d08c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    d088:	0018      	movs	r0, r3
    d08a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    d08c:	3b06      	subs	r3, #6
    d08e:	e7fb      	b.n	d088 <nm_spi_read_reg_with_ret+0xc>
    d090:	0000cecd 	.word	0x0000cecd

0000d094 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    d094:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    d096:	4b04      	ldr	r3, [pc, #16]	; (d0a8 <nm_spi_write_reg+0x14>)
    d098:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d09a:	2300      	movs	r3, #0
    d09c:	2801      	cmp	r0, #1
    d09e:	d101      	bne.n	d0a4 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    d0a0:	0018      	movs	r0, r3
    d0a2:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    d0a4:	3b06      	subs	r3, #6
    d0a6:	e7fb      	b.n	d0a0 <nm_spi_write_reg+0xc>
    d0a8:	0000cdbd 	.word	0x0000cdbd

0000d0ac <nm_spi_init>:
{
    d0ac:	b510      	push	{r4, lr}
    d0ae:	b082      	sub	sp, #8
	uint32 reg = 0;
    d0b0:	2300      	movs	r3, #0
    d0b2:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    d0b4:	4a35      	ldr	r2, [pc, #212]	; (d18c <nm_spi_init+0xe0>)
    d0b6:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    d0b8:	4669      	mov	r1, sp
    d0ba:	4835      	ldr	r0, [pc, #212]	; (d190 <nm_spi_init+0xe4>)
    d0bc:	4b35      	ldr	r3, [pc, #212]	; (d194 <nm_spi_init+0xe8>)
    d0be:	4798      	blx	r3
    d0c0:	2800      	cmp	r0, #0
    d0c2:	d028      	beq.n	d116 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    d0c4:	4b31      	ldr	r3, [pc, #196]	; (d18c <nm_spi_init+0xe0>)
    d0c6:	781b      	ldrb	r3, [r3, #0]
    d0c8:	2b00      	cmp	r3, #0
    d0ca:	d10d      	bne.n	d0e8 <nm_spi_init+0x3c>
		reg &= ~0x70;
    d0cc:	337c      	adds	r3, #124	; 0x7c
    d0ce:	9900      	ldr	r1, [sp, #0]
    d0d0:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    d0d2:	3b2c      	subs	r3, #44	; 0x2c
    d0d4:	4319      	orrs	r1, r3
    d0d6:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    d0d8:	482d      	ldr	r0, [pc, #180]	; (d190 <nm_spi_init+0xe4>)
    d0da:	4b2f      	ldr	r3, [pc, #188]	; (d198 <nm_spi_init+0xec>)
    d0dc:	4798      	blx	r3
    d0de:	1e04      	subs	r4, r0, #0
    d0e0:	d03a      	beq.n	d158 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    d0e2:	2201      	movs	r2, #1
    d0e4:	4b29      	ldr	r3, [pc, #164]	; (d18c <nm_spi_init+0xe0>)
    d0e6:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    d0e8:	a901      	add	r1, sp, #4
    d0ea:	2080      	movs	r0, #128	; 0x80
    d0ec:	0140      	lsls	r0, r0, #5
    d0ee:	4b29      	ldr	r3, [pc, #164]	; (d194 <nm_spi_init+0xe8>)
    d0f0:	4798      	blx	r3
    d0f2:	2800      	cmp	r0, #0
    d0f4:	d03c      	beq.n	d170 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    d0f6:	4c26      	ldr	r4, [pc, #152]	; (d190 <nm_spi_init+0xe4>)
    d0f8:	0020      	movs	r0, r4
    d0fa:	4b28      	ldr	r3, [pc, #160]	; (d19c <nm_spi_init+0xf0>)
    d0fc:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    d0fe:	2370      	movs	r3, #112	; 0x70
    d100:	0001      	movs	r1, r0
    d102:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    d104:	2050      	movs	r0, #80	; 0x50
    d106:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    d108:	0020      	movs	r0, r4
    d10a:	4b25      	ldr	r3, [pc, #148]	; (d1a0 <nm_spi_init+0xf4>)
    d10c:	4798      	blx	r3
	return M2M_SUCCESS;
    d10e:	2400      	movs	r4, #0
}
    d110:	0020      	movs	r0, r4
    d112:	b002      	add	sp, #8
    d114:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    d116:	2201      	movs	r2, #1
    d118:	4b1c      	ldr	r3, [pc, #112]	; (d18c <nm_spi_init+0xe0>)
    d11a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    d11c:	2298      	movs	r2, #152	; 0x98
    d11e:	00d2      	lsls	r2, r2, #3
    d120:	4920      	ldr	r1, [pc, #128]	; (d1a4 <nm_spi_init+0xf8>)
    d122:	4821      	ldr	r0, [pc, #132]	; (d1a8 <nm_spi_init+0xfc>)
    d124:	4b21      	ldr	r3, [pc, #132]	; (d1ac <nm_spi_init+0x100>)
    d126:	4798      	blx	r3
    d128:	4821      	ldr	r0, [pc, #132]	; (d1b0 <nm_spi_init+0x104>)
    d12a:	4b22      	ldr	r3, [pc, #136]	; (d1b4 <nm_spi_init+0x108>)
    d12c:	4798      	blx	r3
    d12e:	200d      	movs	r0, #13
    d130:	4b21      	ldr	r3, [pc, #132]	; (d1b8 <nm_spi_init+0x10c>)
    d132:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    d134:	4669      	mov	r1, sp
    d136:	4816      	ldr	r0, [pc, #88]	; (d190 <nm_spi_init+0xe4>)
    d138:	4b16      	ldr	r3, [pc, #88]	; (d194 <nm_spi_init+0xe8>)
    d13a:	4798      	blx	r3
    d13c:	1e04      	subs	r4, r0, #0
    d13e:	d1c1      	bne.n	d0c4 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    d140:	4a1e      	ldr	r2, [pc, #120]	; (d1bc <nm_spi_init+0x110>)
    d142:	4918      	ldr	r1, [pc, #96]	; (d1a4 <nm_spi_init+0xf8>)
    d144:	4818      	ldr	r0, [pc, #96]	; (d1a8 <nm_spi_init+0xfc>)
    d146:	4b19      	ldr	r3, [pc, #100]	; (d1ac <nm_spi_init+0x100>)
    d148:	4798      	blx	r3
    d14a:	481d      	ldr	r0, [pc, #116]	; (d1c0 <nm_spi_init+0x114>)
    d14c:	4b19      	ldr	r3, [pc, #100]	; (d1b4 <nm_spi_init+0x108>)
    d14e:	4798      	blx	r3
    d150:	200d      	movs	r0, #13
    d152:	4b19      	ldr	r3, [pc, #100]	; (d1b8 <nm_spi_init+0x10c>)
    d154:	4798      	blx	r3
			return 0;
    d156:	e7db      	b.n	d110 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    d158:	4a1a      	ldr	r2, [pc, #104]	; (d1c4 <nm_spi_init+0x118>)
    d15a:	4912      	ldr	r1, [pc, #72]	; (d1a4 <nm_spi_init+0xf8>)
    d15c:	4812      	ldr	r0, [pc, #72]	; (d1a8 <nm_spi_init+0xfc>)
    d15e:	4b13      	ldr	r3, [pc, #76]	; (d1ac <nm_spi_init+0x100>)
    d160:	4798      	blx	r3
    d162:	4819      	ldr	r0, [pc, #100]	; (d1c8 <nm_spi_init+0x11c>)
    d164:	4b13      	ldr	r3, [pc, #76]	; (d1b4 <nm_spi_init+0x108>)
    d166:	4798      	blx	r3
    d168:	200d      	movs	r0, #13
    d16a:	4b13      	ldr	r3, [pc, #76]	; (d1b8 <nm_spi_init+0x10c>)
    d16c:	4798      	blx	r3
			return 0;
    d16e:	e7cf      	b.n	d110 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    d170:	4a16      	ldr	r2, [pc, #88]	; (d1cc <nm_spi_init+0x120>)
    d172:	490c      	ldr	r1, [pc, #48]	; (d1a4 <nm_spi_init+0xf8>)
    d174:	480c      	ldr	r0, [pc, #48]	; (d1a8 <nm_spi_init+0xfc>)
    d176:	4b0d      	ldr	r3, [pc, #52]	; (d1ac <nm_spi_init+0x100>)
    d178:	4798      	blx	r3
    d17a:	4815      	ldr	r0, [pc, #84]	; (d1d0 <nm_spi_init+0x124>)
    d17c:	4b0d      	ldr	r3, [pc, #52]	; (d1b4 <nm_spi_init+0x108>)
    d17e:	4798      	blx	r3
    d180:	200d      	movs	r0, #13
    d182:	4b0d      	ldr	r3, [pc, #52]	; (d1b8 <nm_spi_init+0x10c>)
    d184:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    d186:	2406      	movs	r4, #6
    d188:	4264      	negs	r4, r4
    d18a:	e7c1      	b.n	d110 <nm_spi_init+0x64>
    d18c:	200003ec 	.word	0x200003ec
    d190:	0000e824 	.word	0x0000e824
    d194:	0000cecd 	.word	0x0000cecd
    d198:	0000cdbd 	.word	0x0000cdbd
    d19c:	0000d069 	.word	0x0000d069
    d1a0:	0000d095 	.word	0x0000d095
    d1a4:	000190c4 	.word	0x000190c4
    d1a8:	00018980 	.word	0x00018980
    d1ac:	00016761 	.word	0x00016761
    d1b0:	000191d0 	.word	0x000191d0
    d1b4:	0001687d 	.word	0x0001687d
    d1b8:	00016795 	.word	0x00016795
    d1bc:	000004c3 	.word	0x000004c3
    d1c0:	00019220 	.word	0x00019220
    d1c4:	000004cd 	.word	0x000004cd
    d1c8:	0001924c 	.word	0x0001924c
    d1cc:	000004d7 	.word	0x000004d7
    d1d0:	00019280 	.word	0x00019280

0000d1d4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    d1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1d6:	46de      	mov	lr, fp
    d1d8:	4657      	mov	r7, sl
    d1da:	464e      	mov	r6, r9
    d1dc:	4645      	mov	r5, r8
    d1de:	b5e0      	push	{r5, r6, r7, lr}
    d1e0:	b087      	sub	sp, #28
    d1e2:	9002      	str	r0, [sp, #8]
    d1e4:	9103      	str	r1, [sp, #12]
    d1e6:	0016      	movs	r6, r2
    d1e8:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    d1ea:	2300      	movs	r3, #0
    d1ec:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    d1ee:	2400      	movs	r4, #0
    d1f0:	4b3e      	ldr	r3, [pc, #248]	; (d2ec <nm_spi_read_block+0x118>)
    d1f2:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    d1f4:	46a9      	mov	r9, r5
    d1f6:	e037      	b.n	d268 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    d1f8:	2301      	movs	r3, #1
    d1fa:	469b      	mov	fp, r3
		size = 2;
    d1fc:	3601      	adds	r6, #1
    d1fe:	e035      	b.n	d26c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    d200:	20c8      	movs	r0, #200	; 0xc8
    d202:	4b3b      	ldr	r3, [pc, #236]	; (d2f0 <nm_spi_read_block+0x11c>)
    d204:	4798      	blx	r3
	if (result != N_OK) {
    d206:	2801      	cmp	r0, #1
    d208:	d045      	beq.n	d296 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    d20a:	4a3a      	ldr	r2, [pc, #232]	; (d2f4 <nm_spi_read_block+0x120>)
    d20c:	493a      	ldr	r1, [pc, #232]	; (d2f8 <nm_spi_read_block+0x124>)
    d20e:	483b      	ldr	r0, [pc, #236]	; (d2fc <nm_spi_read_block+0x128>)
    d210:	4f3b      	ldr	r7, [pc, #236]	; (d300 <nm_spi_read_block+0x12c>)
    d212:	47b8      	blx	r7
    d214:	9902      	ldr	r1, [sp, #8]
    d216:	483b      	ldr	r0, [pc, #236]	; (d304 <nm_spi_read_block+0x130>)
    d218:	47b8      	blx	r7
    d21a:	200d      	movs	r0, #13
    d21c:	4b3a      	ldr	r3, [pc, #232]	; (d308 <nm_spi_read_block+0x134>)
    d21e:	4798      	blx	r3
		nm_bsp_sleep(1);
    d220:	2001      	movs	r0, #1
    d222:	4f3a      	ldr	r7, [pc, #232]	; (d30c <nm_spi_read_block+0x138>)
    d224:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d226:	9400      	str	r4, [sp, #0]
    d228:	0023      	movs	r3, r4
    d22a:	0022      	movs	r2, r4
    d22c:	0021      	movs	r1, r4
    d22e:	20cf      	movs	r0, #207	; 0xcf
    d230:	4d2e      	ldr	r5, [pc, #184]	; (d2ec <nm_spi_read_block+0x118>)
    d232:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    d234:	20cf      	movs	r0, #207	; 0xcf
    d236:	4b2e      	ldr	r3, [pc, #184]	; (d2f0 <nm_spi_read_block+0x11c>)
    d238:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    d23a:	4a35      	ldr	r2, [pc, #212]	; (d310 <nm_spi_read_block+0x13c>)
    d23c:	492e      	ldr	r1, [pc, #184]	; (d2f8 <nm_spi_read_block+0x124>)
    d23e:	482f      	ldr	r0, [pc, #188]	; (d2fc <nm_spi_read_block+0x128>)
    d240:	4b2f      	ldr	r3, [pc, #188]	; (d300 <nm_spi_read_block+0x12c>)
    d242:	469a      	mov	sl, r3
    d244:	4798      	blx	r3
    d246:	0033      	movs	r3, r6
    d248:	9a02      	ldr	r2, [sp, #8]
    d24a:	4649      	mov	r1, r9
    d24c:	4831      	ldr	r0, [pc, #196]	; (d314 <nm_spi_read_block+0x140>)
    d24e:	47d0      	blx	sl
    d250:	200d      	movs	r0, #13
    d252:	4b2d      	ldr	r3, [pc, #180]	; (d308 <nm_spi_read_block+0x134>)
    d254:	4798      	blx	r3
		nm_bsp_sleep(1);
    d256:	2001      	movs	r0, #1
    d258:	47b8      	blx	r7
    d25a:	2301      	movs	r3, #1
    d25c:	425b      	negs	r3, r3
    d25e:	469c      	mov	ip, r3
    d260:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    d262:	464b      	mov	r3, r9
    d264:	2b00      	cmp	r3, #0
    d266:	d038      	beq.n	d2da <nm_spi_read_block+0x106>
	if (size == 1)
    d268:	2e01      	cmp	r6, #1
    d26a:	d0c5      	beq.n	d1f8 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    d26c:	9400      	str	r4, [sp, #0]
    d26e:	0033      	movs	r3, r6
    d270:	0022      	movs	r2, r4
    d272:	9d02      	ldr	r5, [sp, #8]
    d274:	0029      	movs	r1, r5
    d276:	20c8      	movs	r0, #200	; 0xc8
    d278:	47c0      	blx	r8
	if (result != N_OK) {
    d27a:	2801      	cmp	r0, #1
    d27c:	d0c0      	beq.n	d200 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    d27e:	4a26      	ldr	r2, [pc, #152]	; (d318 <nm_spi_read_block+0x144>)
    d280:	491d      	ldr	r1, [pc, #116]	; (d2f8 <nm_spi_read_block+0x124>)
    d282:	481e      	ldr	r0, [pc, #120]	; (d2fc <nm_spi_read_block+0x128>)
    d284:	4f1e      	ldr	r7, [pc, #120]	; (d300 <nm_spi_read_block+0x12c>)
    d286:	47b8      	blx	r7
    d288:	0029      	movs	r1, r5
    d28a:	4824      	ldr	r0, [pc, #144]	; (d31c <nm_spi_read_block+0x148>)
    d28c:	47b8      	blx	r7
    d28e:	200d      	movs	r0, #13
    d290:	4b1d      	ldr	r3, [pc, #116]	; (d308 <nm_spi_read_block+0x134>)
    d292:	4798      	blx	r3
    d294:	e7c4      	b.n	d220 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    d296:	465b      	mov	r3, fp
    d298:	2b00      	cmp	r3, #0
    d29a:	d016      	beq.n	d2ca <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    d29c:	af05      	add	r7, sp, #20
    d29e:	0022      	movs	r2, r4
    d2a0:	0031      	movs	r1, r6
    d2a2:	0038      	movs	r0, r7
    d2a4:	4b1e      	ldr	r3, [pc, #120]	; (d320 <nm_spi_read_block+0x14c>)
    d2a6:	4798      	blx	r3
		buf[0] = tmp[0];
    d2a8:	783b      	ldrb	r3, [r7, #0]
    d2aa:	9a03      	ldr	r2, [sp, #12]
    d2ac:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    d2ae:	2801      	cmp	r0, #1
    d2b0:	d011      	beq.n	d2d6 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    d2b2:	4a1c      	ldr	r2, [pc, #112]	; (d324 <nm_spi_read_block+0x150>)
    d2b4:	4910      	ldr	r1, [pc, #64]	; (d2f8 <nm_spi_read_block+0x124>)
    d2b6:	4811      	ldr	r0, [pc, #68]	; (d2fc <nm_spi_read_block+0x128>)
    d2b8:	4b11      	ldr	r3, [pc, #68]	; (d300 <nm_spi_read_block+0x12c>)
    d2ba:	4798      	blx	r3
    d2bc:	481a      	ldr	r0, [pc, #104]	; (d328 <nm_spi_read_block+0x154>)
    d2be:	4b1b      	ldr	r3, [pc, #108]	; (d32c <nm_spi_read_block+0x158>)
    d2c0:	4798      	blx	r3
    d2c2:	200d      	movs	r0, #13
    d2c4:	4b10      	ldr	r3, [pc, #64]	; (d308 <nm_spi_read_block+0x134>)
    d2c6:	4798      	blx	r3
    d2c8:	e7aa      	b.n	d220 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    d2ca:	0022      	movs	r2, r4
    d2cc:	0031      	movs	r1, r6
    d2ce:	9803      	ldr	r0, [sp, #12]
    d2d0:	4b13      	ldr	r3, [pc, #76]	; (d320 <nm_spi_read_block+0x14c>)
    d2d2:	4798      	blx	r3
    d2d4:	e7eb      	b.n	d2ae <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d2d6:	2000      	movs	r0, #0
    d2d8:	e001      	b.n	d2de <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    d2da:	2006      	movs	r0, #6
    d2dc:	4240      	negs	r0, r0

	return s8Ret;
}
    d2de:	b007      	add	sp, #28
    d2e0:	bc3c      	pop	{r2, r3, r4, r5}
    d2e2:	4690      	mov	r8, r2
    d2e4:	4699      	mov	r9, r3
    d2e6:	46a2      	mov	sl, r4
    d2e8:	46ab      	mov	fp, r5
    d2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2ec:	0000ca05 	.word	0x0000ca05
    d2f0:	0000cba5 	.word	0x0000cba5
    d2f4:	0000045c 	.word	0x0000045c
    d2f8:	000190b8 	.word	0x000190b8
    d2fc:	00018980 	.word	0x00018980
    d300:	00016761 	.word	0x00016761
    d304:	000192d4 	.word	0x000192d4
    d308:	00016795 	.word	0x00016795
    d30c:	0000aec5 	.word	0x0000aec5
    d310:	0000047d 	.word	0x0000047d
    d314:	00019334 	.word	0x00019334
    d318:	00000456 	.word	0x00000456
    d31c:	000192a4 	.word	0x000192a4
    d320:	0000cc79 	.word	0x0000cc79
    d324:	0000046c 	.word	0x0000046c
    d328:	0001930c 	.word	0x0001930c
    d32c:	0001687d 	.word	0x0001687d

0000d330 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    d330:	b5f0      	push	{r4, r5, r6, r7, lr}
    d332:	46de      	mov	lr, fp
    d334:	4647      	mov	r7, r8
    d336:	b580      	push	{r7, lr}
    d338:	b089      	sub	sp, #36	; 0x24
    d33a:	9004      	str	r0, [sp, #16]
    d33c:	468b      	mov	fp, r1
    d33e:	9203      	str	r2, [sp, #12]
    d340:	260a      	movs	r6, #10
    d342:	2780      	movs	r7, #128	; 0x80
    d344:	01bf      	lsls	r7, r7, #6
    d346:	466b      	mov	r3, sp
    d348:	82df      	strh	r7, [r3, #22]
    d34a:	0035      	movs	r5, r6
    d34c:	e02d      	b.n	d3aa <nm_spi_write_block+0x7a>
		size = 2;
    d34e:	3301      	adds	r3, #1
    d350:	9303      	str	r3, [sp, #12]
    d352:	e02d      	b.n	d3b0 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    d354:	4a82      	ldr	r2, [pc, #520]	; (d560 <nm_spi_write_block+0x230>)
    d356:	4983      	ldr	r1, [pc, #524]	; (d564 <nm_spi_write_block+0x234>)
    d358:	4883      	ldr	r0, [pc, #524]	; (d568 <nm_spi_write_block+0x238>)
    d35a:	4c84      	ldr	r4, [pc, #528]	; (d56c <nm_spi_write_block+0x23c>)
    d35c:	47a0      	blx	r4
    d35e:	0031      	movs	r1, r6
    d360:	4883      	ldr	r0, [pc, #524]	; (d570 <nm_spi_write_block+0x240>)
    d362:	47a0      	blx	r4
    d364:	200d      	movs	r0, #13
    d366:	4b83      	ldr	r3, [pc, #524]	; (d574 <nm_spi_write_block+0x244>)
    d368:	4798      	blx	r3
		nm_bsp_sleep(1);
    d36a:	2001      	movs	r0, #1
    d36c:	4c82      	ldr	r4, [pc, #520]	; (d578 <nm_spi_write_block+0x248>)
    d36e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    d370:	2300      	movs	r3, #0
    d372:	9300      	str	r3, [sp, #0]
    d374:	2200      	movs	r2, #0
    d376:	2100      	movs	r1, #0
    d378:	20cf      	movs	r0, #207	; 0xcf
    d37a:	4e80      	ldr	r6, [pc, #512]	; (d57c <nm_spi_write_block+0x24c>)
    d37c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    d37e:	20cf      	movs	r0, #207	; 0xcf
    d380:	4b7f      	ldr	r3, [pc, #508]	; (d580 <nm_spi_write_block+0x250>)
    d382:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    d384:	4a7f      	ldr	r2, [pc, #508]	; (d584 <nm_spi_write_block+0x254>)
    d386:	4977      	ldr	r1, [pc, #476]	; (d564 <nm_spi_write_block+0x234>)
    d388:	4877      	ldr	r0, [pc, #476]	; (d568 <nm_spi_write_block+0x238>)
    d38a:	4e78      	ldr	r6, [pc, #480]	; (d56c <nm_spi_write_block+0x23c>)
    d38c:	47b0      	blx	r6
    d38e:	9b03      	ldr	r3, [sp, #12]
    d390:	9a04      	ldr	r2, [sp, #16]
    d392:	0029      	movs	r1, r5
    d394:	487c      	ldr	r0, [pc, #496]	; (d588 <nm_spi_write_block+0x258>)
    d396:	47b0      	blx	r6
    d398:	200d      	movs	r0, #13
    d39a:	4b76      	ldr	r3, [pc, #472]	; (d574 <nm_spi_write_block+0x244>)
    d39c:	4798      	blx	r3
		nm_bsp_sleep(1);
    d39e:	2001      	movs	r0, #1
    d3a0:	47a0      	blx	r4
    d3a2:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    d3a4:	2d00      	cmp	r5, #0
    d3a6:	d100      	bne.n	d3aa <nm_spi_write_block+0x7a>
    d3a8:	e0d2      	b.n	d550 <nm_spi_write_block+0x220>
	if (size == 1)
    d3aa:	9b03      	ldr	r3, [sp, #12]
    d3ac:	2b01      	cmp	r3, #1
    d3ae:	d0ce      	beq.n	d34e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    d3b0:	2300      	movs	r3, #0
    d3b2:	9300      	str	r3, [sp, #0]
    d3b4:	9b03      	ldr	r3, [sp, #12]
    d3b6:	2200      	movs	r2, #0
    d3b8:	9e04      	ldr	r6, [sp, #16]
    d3ba:	0031      	movs	r1, r6
    d3bc:	20c7      	movs	r0, #199	; 0xc7
    d3be:	4c6f      	ldr	r4, [pc, #444]	; (d57c <nm_spi_write_block+0x24c>)
    d3c0:	47a0      	blx	r4
	if (result != N_OK) {
    d3c2:	2801      	cmp	r0, #1
    d3c4:	d1c6      	bne.n	d354 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    d3c6:	20c7      	movs	r0, #199	; 0xc7
    d3c8:	4b6d      	ldr	r3, [pc, #436]	; (d580 <nm_spi_write_block+0x250>)
    d3ca:	4798      	blx	r3
	if (result != N_OK) {
    d3cc:	2801      	cmp	r0, #1
    d3ce:	d00b      	beq.n	d3e8 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    d3d0:	4a6e      	ldr	r2, [pc, #440]	; (d58c <nm_spi_write_block+0x25c>)
    d3d2:	4964      	ldr	r1, [pc, #400]	; (d564 <nm_spi_write_block+0x234>)
    d3d4:	4864      	ldr	r0, [pc, #400]	; (d568 <nm_spi_write_block+0x238>)
    d3d6:	4c65      	ldr	r4, [pc, #404]	; (d56c <nm_spi_write_block+0x23c>)
    d3d8:	47a0      	blx	r4
    d3da:	9904      	ldr	r1, [sp, #16]
    d3dc:	486c      	ldr	r0, [pc, #432]	; (d590 <nm_spi_write_block+0x260>)
    d3de:	47a0      	blx	r4
    d3e0:	200d      	movs	r0, #13
    d3e2:	4b64      	ldr	r3, [pc, #400]	; (d574 <nm_spi_write_block+0x244>)
    d3e4:	4798      	blx	r3
    d3e6:	e7c0      	b.n	d36a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    d3e8:	2200      	movs	r2, #0
    d3ea:	ab07      	add	r3, sp, #28
    d3ec:	801a      	strh	r2, [r3, #0]
    d3ee:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    d3f0:	2600      	movs	r6, #0
				order = 0x1;
    d3f2:	46a8      	mov	r8, r5
    d3f4:	0035      	movs	r5, r6
    d3f6:	0026      	movs	r6, r4
    d3f8:	e021      	b.n	d43e <nm_spi_write_block+0x10e>
				order = 0x2;
    d3fa:	2300      	movs	r3, #0
    d3fc:	42b7      	cmp	r7, r6
    d3fe:	415b      	adcs	r3, r3
    d400:	3302      	adds	r3, #2
		cmd |= order;
    d402:	200b      	movs	r0, #11
    d404:	aa04      	add	r2, sp, #16
    d406:	4694      	mov	ip, r2
    d408:	4460      	add	r0, ip
    d40a:	2210      	movs	r2, #16
    d40c:	4252      	negs	r2, r2
    d40e:	4313      	orrs	r3, r2
    d410:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    d412:	2101      	movs	r1, #1
    d414:	4b5f      	ldr	r3, [pc, #380]	; (d594 <nm_spi_write_block+0x264>)
    d416:	4798      	blx	r3
    d418:	2800      	cmp	r0, #0
    d41a:	d11d      	bne.n	d458 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    d41c:	465b      	mov	r3, fp
    d41e:	1958      	adds	r0, r3, r5
    d420:	0021      	movs	r1, r4
    d422:	4b5c      	ldr	r3, [pc, #368]	; (d594 <nm_spi_write_block+0x264>)
    d424:	4798      	blx	r3
    d426:	2800      	cmp	r0, #0
    d428:	d12e      	bne.n	d488 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    d42a:	4b5b      	ldr	r3, [pc, #364]	; (d598 <nm_spi_write_block+0x268>)
    d42c:	781b      	ldrb	r3, [r3, #0]
    d42e:	2b00      	cmp	r3, #0
    d430:	d037      	beq.n	d4a2 <nm_spi_write_block+0x172>
		ix += nbytes;
    d432:	1965      	adds	r5, r4, r5
    d434:	b22d      	sxth	r5, r5
		sz -= nbytes;
    d436:	1b36      	subs	r6, r6, r4
    d438:	b2b6      	uxth	r6, r6
	} while (sz);
    d43a:	2e00      	cmp	r6, #0
    d43c:	d052      	beq.n	d4e4 <nm_spi_write_block+0x1b4>
    d43e:	1c34      	adds	r4, r6, #0
    d440:	42be      	cmp	r6, r7
    d442:	d901      	bls.n	d448 <nm_spi_write_block+0x118>
    d444:	466b      	mov	r3, sp
    d446:	8adc      	ldrh	r4, [r3, #22]
    d448:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    d44a:	2d00      	cmp	r5, #0
    d44c:	d1d5      	bne.n	d3fa <nm_spi_write_block+0xca>
				order = 0x3;
    d44e:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    d450:	42be      	cmp	r6, r7
    d452:	d9d6      	bls.n	d402 <nm_spi_write_block+0xd2>
				order = 0x1;
    d454:	3b02      	subs	r3, #2
    d456:	e7d4      	b.n	d402 <nm_spi_write_block+0xd2>
    d458:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    d45a:	4a50      	ldr	r2, [pc, #320]	; (d59c <nm_spi_write_block+0x26c>)
    d45c:	4950      	ldr	r1, [pc, #320]	; (d5a0 <nm_spi_write_block+0x270>)
    d45e:	4842      	ldr	r0, [pc, #264]	; (d568 <nm_spi_write_block+0x238>)
    d460:	4b42      	ldr	r3, [pc, #264]	; (d56c <nm_spi_write_block+0x23c>)
    d462:	4798      	blx	r3
    d464:	484f      	ldr	r0, [pc, #316]	; (d5a4 <nm_spi_write_block+0x274>)
    d466:	4b50      	ldr	r3, [pc, #320]	; (d5a8 <nm_spi_write_block+0x278>)
    d468:	4798      	blx	r3
    d46a:	200d      	movs	r0, #13
    d46c:	4b41      	ldr	r3, [pc, #260]	; (d574 <nm_spi_write_block+0x244>)
    d46e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    d470:	4a4e      	ldr	r2, [pc, #312]	; (d5ac <nm_spi_write_block+0x27c>)
    d472:	493c      	ldr	r1, [pc, #240]	; (d564 <nm_spi_write_block+0x234>)
    d474:	483c      	ldr	r0, [pc, #240]	; (d568 <nm_spi_write_block+0x238>)
    d476:	4b3d      	ldr	r3, [pc, #244]	; (d56c <nm_spi_write_block+0x23c>)
    d478:	4798      	blx	r3
    d47a:	484d      	ldr	r0, [pc, #308]	; (d5b0 <nm_spi_write_block+0x280>)
    d47c:	4b4a      	ldr	r3, [pc, #296]	; (d5a8 <nm_spi_write_block+0x278>)
    d47e:	4798      	blx	r3
    d480:	200d      	movs	r0, #13
    d482:	4b3c      	ldr	r3, [pc, #240]	; (d574 <nm_spi_write_block+0x244>)
    d484:	4798      	blx	r3
    d486:	e770      	b.n	d36a <nm_spi_write_block+0x3a>
    d488:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    d48a:	4a4a      	ldr	r2, [pc, #296]	; (d5b4 <nm_spi_write_block+0x284>)
    d48c:	4944      	ldr	r1, [pc, #272]	; (d5a0 <nm_spi_write_block+0x270>)
    d48e:	4836      	ldr	r0, [pc, #216]	; (d568 <nm_spi_write_block+0x238>)
    d490:	4b36      	ldr	r3, [pc, #216]	; (d56c <nm_spi_write_block+0x23c>)
    d492:	4798      	blx	r3
    d494:	4848      	ldr	r0, [pc, #288]	; (d5b8 <nm_spi_write_block+0x288>)
    d496:	4b44      	ldr	r3, [pc, #272]	; (d5a8 <nm_spi_write_block+0x278>)
    d498:	4798      	blx	r3
    d49a:	200d      	movs	r0, #13
    d49c:	4b35      	ldr	r3, [pc, #212]	; (d574 <nm_spi_write_block+0x244>)
    d49e:	4798      	blx	r3
    d4a0:	e7e6      	b.n	d470 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    d4a2:	2102      	movs	r1, #2
    d4a4:	a807      	add	r0, sp, #28
    d4a6:	4b3b      	ldr	r3, [pc, #236]	; (d594 <nm_spi_write_block+0x264>)
    d4a8:	4798      	blx	r3
    d4aa:	2800      	cmp	r0, #0
    d4ac:	d0c1      	beq.n	d432 <nm_spi_write_block+0x102>
    d4ae:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    d4b0:	22d7      	movs	r2, #215	; 0xd7
    d4b2:	0092      	lsls	r2, r2, #2
    d4b4:	493a      	ldr	r1, [pc, #232]	; (d5a0 <nm_spi_write_block+0x270>)
    d4b6:	482c      	ldr	r0, [pc, #176]	; (d568 <nm_spi_write_block+0x238>)
    d4b8:	4b2c      	ldr	r3, [pc, #176]	; (d56c <nm_spi_write_block+0x23c>)
    d4ba:	4798      	blx	r3
    d4bc:	483f      	ldr	r0, [pc, #252]	; (d5bc <nm_spi_write_block+0x28c>)
    d4be:	4b3a      	ldr	r3, [pc, #232]	; (d5a8 <nm_spi_write_block+0x278>)
    d4c0:	4798      	blx	r3
    d4c2:	200d      	movs	r0, #13
    d4c4:	4b2b      	ldr	r3, [pc, #172]	; (d574 <nm_spi_write_block+0x244>)
    d4c6:	4798      	blx	r3
    d4c8:	e7d2      	b.n	d470 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    d4ca:	229a      	movs	r2, #154	; 0x9a
    d4cc:	0052      	lsls	r2, r2, #1
    d4ce:	493c      	ldr	r1, [pc, #240]	; (d5c0 <nm_spi_write_block+0x290>)
    d4d0:	4825      	ldr	r0, [pc, #148]	; (d568 <nm_spi_write_block+0x238>)
    d4d2:	4b26      	ldr	r3, [pc, #152]	; (d56c <nm_spi_write_block+0x23c>)
    d4d4:	4798      	blx	r3
    d4d6:	483b      	ldr	r0, [pc, #236]	; (d5c4 <nm_spi_write_block+0x294>)
    d4d8:	4b33      	ldr	r3, [pc, #204]	; (d5a8 <nm_spi_write_block+0x278>)
    d4da:	4798      	blx	r3
    d4dc:	200d      	movs	r0, #13
    d4de:	4b25      	ldr	r3, [pc, #148]	; (d574 <nm_spi_write_block+0x244>)
    d4e0:	4798      	blx	r3
    d4e2:	e027      	b.n	d534 <nm_spi_write_block+0x204>
    d4e4:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    d4e6:	4b2c      	ldr	r3, [pc, #176]	; (d598 <nm_spi_write_block+0x268>)
    d4e8:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    d4ea:	1e63      	subs	r3, r4, #1
    d4ec:	419c      	sbcs	r4, r3
    d4ee:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    d4f0:	b2a1      	uxth	r1, r4
    d4f2:	a807      	add	r0, sp, #28
    d4f4:	4b34      	ldr	r3, [pc, #208]	; (d5c8 <nm_spi_write_block+0x298>)
    d4f6:	4798      	blx	r3
    d4f8:	2800      	cmp	r0, #0
    d4fa:	d1e6      	bne.n	d4ca <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    d4fc:	ab08      	add	r3, sp, #32
    d4fe:	191b      	adds	r3, r3, r4
    d500:	3b05      	subs	r3, #5
    d502:	781b      	ldrb	r3, [r3, #0]
    d504:	2b00      	cmp	r3, #0
    d506:	d106      	bne.n	d516 <nm_spi_write_block+0x1e6>
    d508:	ab08      	add	r3, sp, #32
    d50a:	469c      	mov	ip, r3
    d50c:	4464      	add	r4, ip
    d50e:	3c06      	subs	r4, #6
    d510:	7823      	ldrb	r3, [r4, #0]
    d512:	2bc3      	cmp	r3, #195	; 0xc3
    d514:	d01a      	beq.n	d54c <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    d516:	223c      	movs	r2, #60	; 0x3c
    d518:	32ff      	adds	r2, #255	; 0xff
    d51a:	4929      	ldr	r1, [pc, #164]	; (d5c0 <nm_spi_write_block+0x290>)
    d51c:	4812      	ldr	r0, [pc, #72]	; (d568 <nm_spi_write_block+0x238>)
    d51e:	4c13      	ldr	r4, [pc, #76]	; (d56c <nm_spi_write_block+0x23c>)
    d520:	47a0      	blx	r4
    d522:	a907      	add	r1, sp, #28
    d524:	788b      	ldrb	r3, [r1, #2]
    d526:	784a      	ldrb	r2, [r1, #1]
    d528:	7809      	ldrb	r1, [r1, #0]
    d52a:	4828      	ldr	r0, [pc, #160]	; (d5cc <nm_spi_write_block+0x29c>)
    d52c:	47a0      	blx	r4
    d52e:	200d      	movs	r0, #13
    d530:	4b10      	ldr	r3, [pc, #64]	; (d574 <nm_spi_write_block+0x244>)
    d532:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    d534:	4a26      	ldr	r2, [pc, #152]	; (d5d0 <nm_spi_write_block+0x2a0>)
    d536:	490b      	ldr	r1, [pc, #44]	; (d564 <nm_spi_write_block+0x234>)
    d538:	480b      	ldr	r0, [pc, #44]	; (d568 <nm_spi_write_block+0x238>)
    d53a:	4b0c      	ldr	r3, [pc, #48]	; (d56c <nm_spi_write_block+0x23c>)
    d53c:	4798      	blx	r3
    d53e:	481c      	ldr	r0, [pc, #112]	; (d5b0 <nm_spi_write_block+0x280>)
    d540:	4b19      	ldr	r3, [pc, #100]	; (d5a8 <nm_spi_write_block+0x278>)
    d542:	4798      	blx	r3
    d544:	200d      	movs	r0, #13
    d546:	4b0b      	ldr	r3, [pc, #44]	; (d574 <nm_spi_write_block+0x244>)
    d548:	4798      	blx	r3
    d54a:	e70e      	b.n	d36a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    d54c:	2000      	movs	r0, #0
    d54e:	e001      	b.n	d554 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    d550:	2006      	movs	r0, #6
    d552:	4240      	negs	r0, r0

	return s8Ret;
}
    d554:	b009      	add	sp, #36	; 0x24
    d556:	bc0c      	pop	{r2, r3}
    d558:	4690      	mov	r8, r2
    d55a:	469b      	mov	fp, r3
    d55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d55e:	46c0      	nop			; (mov r8, r8)
    d560:	000003c3 	.word	0x000003c3
    d564:	00019098 	.word	0x00019098
    d568:	00018980 	.word	0x00018980
    d56c:	00016761 	.word	0x00016761
    d570:	00019350 	.word	0x00019350
    d574:	00016795 	.word	0x00016795
    d578:	0000aec5 	.word	0x0000aec5
    d57c:	0000ca05 	.word	0x0000ca05
    d580:	0000cba5 	.word	0x0000cba5
    d584:	000003eb 	.word	0x000003eb
    d588:	00019334 	.word	0x00019334
    d58c:	000003c9 	.word	0x000003c9
    d590:	00019380 	.word	0x00019380
    d594:	0000c9e5 	.word	0x0000c9e5
    d598:	200003ec 	.word	0x200003ec
    d59c:	00000349 	.word	0x00000349
    d5a0:	00019078 	.word	0x00019078
    d5a4:	000193b8 	.word	0x000193b8
    d5a8:	0001687d 	.word	0x0001687d
    d5ac:	000003d9 	.word	0x000003d9
    d5b0:	000194ac 	.word	0x000194ac
    d5b4:	00000352 	.word	0x00000352
    d5b8:	000193f0 	.word	0x000193f0
    d5bc:	00019424 	.word	0x00019424
    d5c0:	0001904c 	.word	0x0001904c
    d5c4:	0001945c 	.word	0x0001945c
    d5c8:	0000cb85 	.word	0x0000cb85
    d5cc:	0001947c 	.word	0x0001947c
    d5d0:	000003e1 	.word	0x000003e1

0000d5d4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    d5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5d6:	46de      	mov	lr, fp
    d5d8:	4657      	mov	r7, sl
    d5da:	464e      	mov	r6, r9
    d5dc:	4645      	mov	r5, r8
    d5de:	b5e0      	push	{r5, r6, r7, lr}
    d5e0:	b085      	sub	sp, #20
    d5e2:	9001      	str	r0, [sp, #4]
    d5e4:	000e      	movs	r6, r1
    d5e6:	9202      	str	r2, [sp, #8]
    d5e8:	001d      	movs	r5, r3
    d5ea:	ab0e      	add	r3, sp, #56	; 0x38
    d5ec:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    d5ee:	2c00      	cmp	r4, #0
    d5f0:	d064      	beq.n	d6bc <Socket_ReadSocketData+0xe8>
    d5f2:	0103      	lsls	r3, r0, #4
    d5f4:	4935      	ldr	r1, [pc, #212]	; (d6cc <Socket_ReadSocketData+0xf8>)
    d5f6:	585b      	ldr	r3, [r3, r1]
    d5f8:	2b00      	cmp	r3, #0
    d5fa:	d05f      	beq.n	d6bc <Socket_ReadSocketData+0xe8>
    d5fc:	0101      	lsls	r1, r0, #4
    d5fe:	4b33      	ldr	r3, [pc, #204]	; (d6cc <Socket_ReadSocketData+0xf8>)
    d600:	185b      	adds	r3, r3, r1
    d602:	889b      	ldrh	r3, [r3, #4]
    d604:	b29b      	uxth	r3, r3
    d606:	2b00      	cmp	r3, #0
    d608:	d058      	beq.n	d6bc <Socket_ReadSocketData+0xe8>
    d60a:	4b30      	ldr	r3, [pc, #192]	; (d6cc <Socket_ReadSocketData+0xf8>)
    d60c:	185b      	adds	r3, r3, r1
    d60e:	7a9b      	ldrb	r3, [r3, #10]
    d610:	2b01      	cmp	r3, #1
    d612:	d153      	bne.n	d6bc <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    d614:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    d616:	4b2d      	ldr	r3, [pc, #180]	; (d6cc <Socket_ReadSocketData+0xf8>)
    d618:	469b      	mov	fp, r3
    d61a:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    d61c:	465b      	mov	r3, fp
    d61e:	220a      	movs	r2, #10
    d620:	4690      	mov	r8, r2
    d622:	44d8      	add	r8, fp
    d624:	468a      	mov	sl, r1
    d626:	9500      	str	r5, [sp, #0]
    d628:	9303      	str	r3, [sp, #12]
    d62a:	e015      	b.n	d658 <Socket_ReadSocketData+0x84>
    d62c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    d62e:	2301      	movs	r3, #1
    d630:	e01c      	b.n	d66c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    d632:	3301      	adds	r3, #1
    d634:	2200      	movs	r2, #0
    d636:	2100      	movs	r1, #0
    d638:	2000      	movs	r0, #0
    d63a:	4c25      	ldr	r4, [pc, #148]	; (d6d0 <Socket_ReadSocketData+0xfc>)
    d63c:	47a0      	blx	r4
    d63e:	e03d      	b.n	d6bc <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    d640:	4824      	ldr	r0, [pc, #144]	; (d6d4 <Socket_ReadSocketData+0x100>)
    d642:	4d25      	ldr	r5, [pc, #148]	; (d6d8 <Socket_ReadSocketData+0x104>)
    d644:	47a8      	blx	r5
    d646:	0021      	movs	r1, r4
    d648:	4824      	ldr	r0, [pc, #144]	; (d6dc <Socket_ReadSocketData+0x108>)
    d64a:	47a8      	blx	r5
    d64c:	200d      	movs	r0, #13
    d64e:	4b24      	ldr	r3, [pc, #144]	; (d6e0 <Socket_ReadSocketData+0x10c>)
    d650:	4798      	blx	r3
				break;
    d652:	e033      	b.n	d6bc <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    d654:	2c00      	cmp	r4, #0
    d656:	d031      	beq.n	d6bc <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    d658:	465b      	mov	r3, fp
    d65a:	889b      	ldrh	r3, [r3, #4]
    d65c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    d65e:	b21b      	sxth	r3, r3
    d660:	2b00      	cmp	r3, #0
    d662:	dde3      	ble.n	d62c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    d664:	9b03      	ldr	r3, [sp, #12]
    d666:	889d      	ldrh	r5, [r3, #4]
    d668:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    d66a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    d66c:	4a17      	ldr	r2, [pc, #92]	; (d6cc <Socket_ReadSocketData+0xf8>)
    d66e:	4651      	mov	r1, sl
    d670:	5889      	ldr	r1, [r1, r2]
    d672:	002a      	movs	r2, r5
    d674:	9800      	ldr	r0, [sp, #0]
    d676:	4f16      	ldr	r7, [pc, #88]	; (d6d0 <Socket_ReadSocketData+0xfc>)
    d678:	47b8      	blx	r7
    d67a:	2800      	cmp	r0, #0
    d67c:	d1e0      	bne.n	d640 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    d67e:	4b13      	ldr	r3, [pc, #76]	; (d6cc <Socket_ReadSocketData+0xf8>)
    d680:	4652      	mov	r2, sl
    d682:	58d3      	ldr	r3, [r2, r3]
    d684:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    d686:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    d688:	88f3      	ldrh	r3, [r6, #6]
    d68a:	1b5b      	subs	r3, r3, r5
    d68c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    d68e:	4b15      	ldr	r3, [pc, #84]	; (d6e4 <Socket_ReadSocketData+0x110>)
    d690:	681b      	ldr	r3, [r3, #0]
    d692:	2b00      	cmp	r3, #0
    d694:	d005      	beq.n	d6a2 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    d696:	4b13      	ldr	r3, [pc, #76]	; (d6e4 <Socket_ReadSocketData+0x110>)
    d698:	681b      	ldr	r3, [r3, #0]
    d69a:	0032      	movs	r2, r6
    d69c:	9902      	ldr	r1, [sp, #8]
    d69e:	9801      	ldr	r0, [sp, #4]
    d6a0:	4798      	blx	r3
				u16ReadCount -= u16Read;
    d6a2:	1b64      	subs	r4, r4, r5
    d6a4:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    d6a6:	9b00      	ldr	r3, [sp, #0]
    d6a8:	469c      	mov	ip, r3
    d6aa:	44ac      	add	ip, r5
    d6ac:	4663      	mov	r3, ip
    d6ae:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    d6b0:	4643      	mov	r3, r8
    d6b2:	781b      	ldrb	r3, [r3, #0]
    d6b4:	2b00      	cmp	r3, #0
    d6b6:	d1cd      	bne.n	d654 <Socket_ReadSocketData+0x80>
    d6b8:	2c00      	cmp	r4, #0
    d6ba:	d1ba      	bne.n	d632 <Socket_ReadSocketData+0x5e>
	}
}
    d6bc:	b005      	add	sp, #20
    d6be:	bc3c      	pop	{r2, r3, r4, r5}
    d6c0:	4690      	mov	r8, r2
    d6c2:	4699      	mov	r9, r3
    d6c4:	46a2      	mov	sl, r4
    d6c6:	46ab      	mov	fp, r5
    d6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6ca:	46c0      	nop			; (mov r8, r8)
    d6cc:	20000fd0 	.word	0x20000fd0
    d6d0:	0000b97d 	.word	0x0000b97d
    d6d4:	00018cb0 	.word	0x00018cb0
    d6d8:	00016761 	.word	0x00016761
    d6dc:	00019714 	.word	0x00019714
    d6e0:	00016795 	.word	0x00016795
    d6e4:	20001080 	.word	0x20001080

0000d6e8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    d6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6ea:	46d6      	mov	lr, sl
    d6ec:	464f      	mov	r7, r9
    d6ee:	4646      	mov	r6, r8
    d6f0:	b5c0      	push	{r6, r7, lr}
    d6f2:	b09a      	sub	sp, #104	; 0x68
    d6f4:	000d      	movs	r5, r1
    d6f6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    d6f8:	2841      	cmp	r0, #65	; 0x41
    d6fa:	d039      	beq.n	d770 <m2m_ip_cb+0x88>
    d6fc:	2854      	cmp	r0, #84	; 0x54
    d6fe:	d037      	beq.n	d770 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    d700:	2842      	cmp	r0, #66	; 0x42
    d702:	d053      	beq.n	d7ac <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    d704:	2843      	cmp	r0, #67	; 0x43
    d706:	d06a      	beq.n	d7de <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    d708:	2844      	cmp	r0, #68	; 0x44
    d70a:	d100      	bne.n	d70e <m2m_ip_cb+0x26>
    d70c:	e0af      	b.n	d86e <m2m_ip_cb+0x186>
    d70e:	284b      	cmp	r0, #75	; 0x4b
    d710:	d100      	bne.n	d714 <m2m_ip_cb+0x2c>
    d712:	e0ac      	b.n	d86e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    d714:	284a      	cmp	r0, #74	; 0x4a
    d716:	d100      	bne.n	d71a <m2m_ip_cb+0x32>
    d718:	e0cf      	b.n	d8ba <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    d71a:	2846      	cmp	r0, #70	; 0x46
    d71c:	d100      	bne.n	d720 <m2m_ip_cb+0x38>
    d71e:	e0e5      	b.n	d8ec <m2m_ip_cb+0x204>
    d720:	2848      	cmp	r0, #72	; 0x48
    d722:	d100      	bne.n	d726 <m2m_ip_cb+0x3e>
    d724:	e10e      	b.n	d944 <m2m_ip_cb+0x25c>
    d726:	284d      	cmp	r0, #77	; 0x4d
    d728:	d100      	bne.n	d72c <m2m_ip_cb+0x44>
    d72a:	e0dc      	b.n	d8e6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    d72c:	2845      	cmp	r0, #69	; 0x45
    d72e:	d100      	bne.n	d732 <m2m_ip_cb+0x4a>
    d730:	e12c      	b.n	d98c <m2m_ip_cb+0x2a4>
    d732:	2847      	cmp	r0, #71	; 0x47
    d734:	d100      	bne.n	d738 <m2m_ip_cb+0x50>
    d736:	e14d      	b.n	d9d4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    d738:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    d73a:	284c      	cmp	r0, #76	; 0x4c
    d73c:	d100      	bne.n	d740 <m2m_ip_cb+0x58>
    d73e:	e126      	b.n	d98e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    d740:	2852      	cmp	r0, #82	; 0x52
    d742:	d12d      	bne.n	d7a0 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    d744:	2301      	movs	r3, #1
    d746:	2214      	movs	r2, #20
    d748:	a909      	add	r1, sp, #36	; 0x24
    d74a:	0020      	movs	r0, r4
    d74c:	4ca2      	ldr	r4, [pc, #648]	; (d9d8 <m2m_ip_cb+0x2f0>)
    d74e:	47a0      	blx	r4
    d750:	2800      	cmp	r0, #0
    d752:	d125      	bne.n	d7a0 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    d754:	4ba1      	ldr	r3, [pc, #644]	; (d9dc <m2m_ip_cb+0x2f4>)
    d756:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d758:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    d75a:	681b      	ldr	r3, [r3, #0]
    d75c:	2b00      	cmp	r3, #0
    d75e:	d01f      	beq.n	d7a0 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    d760:	4b9e      	ldr	r3, [pc, #632]	; (d9dc <m2m_ip_cb+0x2f4>)
    d762:	681c      	ldr	r4, [r3, #0]
    d764:	ab09      	add	r3, sp, #36	; 0x24
    d766:	7c1a      	ldrb	r2, [r3, #16]
    d768:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d76a:	9809      	ldr	r0, [sp, #36]	; 0x24
    d76c:	47a0      	blx	r4
			}
		}
	}
}
    d76e:	e017      	b.n	d7a0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    d770:	2300      	movs	r3, #0
    d772:	2204      	movs	r2, #4
    d774:	a909      	add	r1, sp, #36	; 0x24
    d776:	0020      	movs	r0, r4
    d778:	4c97      	ldr	r4, [pc, #604]	; (d9d8 <m2m_ip_cb+0x2f0>)
    d77a:	47a0      	blx	r4
    d77c:	2800      	cmp	r0, #0
    d77e:	d10f      	bne.n	d7a0 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    d780:	ab09      	add	r3, sp, #36	; 0x24
    d782:	785a      	ldrb	r2, [r3, #1]
    d784:	ab05      	add	r3, sp, #20
    d786:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    d788:	4b95      	ldr	r3, [pc, #596]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d78a:	681b      	ldr	r3, [r3, #0]
    d78c:	2b00      	cmp	r3, #0
    d78e:	d007      	beq.n	d7a0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    d790:	4b93      	ldr	r3, [pc, #588]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d792:	681b      	ldr	r3, [r3, #0]
    d794:	aa09      	add	r2, sp, #36	; 0x24
    d796:	2000      	movs	r0, #0
    d798:	5610      	ldrsb	r0, [r2, r0]
    d79a:	aa05      	add	r2, sp, #20
    d79c:	2101      	movs	r1, #1
    d79e:	4798      	blx	r3
}
    d7a0:	b01a      	add	sp, #104	; 0x68
    d7a2:	bc1c      	pop	{r2, r3, r4}
    d7a4:	4690      	mov	r8, r2
    d7a6:	4699      	mov	r9, r3
    d7a8:	46a2      	mov	sl, r4
    d7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    d7ac:	2300      	movs	r3, #0
    d7ae:	2204      	movs	r2, #4
    d7b0:	a909      	add	r1, sp, #36	; 0x24
    d7b2:	0020      	movs	r0, r4
    d7b4:	4c88      	ldr	r4, [pc, #544]	; (d9d8 <m2m_ip_cb+0x2f0>)
    d7b6:	47a0      	blx	r4
    d7b8:	2800      	cmp	r0, #0
    d7ba:	d1f1      	bne.n	d7a0 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    d7bc:	ab09      	add	r3, sp, #36	; 0x24
    d7be:	785a      	ldrb	r2, [r3, #1]
    d7c0:	ab05      	add	r3, sp, #20
    d7c2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    d7c4:	4b86      	ldr	r3, [pc, #536]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d7c6:	681b      	ldr	r3, [r3, #0]
    d7c8:	2b00      	cmp	r3, #0
    d7ca:	d0e9      	beq.n	d7a0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    d7cc:	4b84      	ldr	r3, [pc, #528]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d7ce:	681b      	ldr	r3, [r3, #0]
    d7d0:	aa09      	add	r2, sp, #36	; 0x24
    d7d2:	2000      	movs	r0, #0
    d7d4:	5610      	ldrsb	r0, [r2, r0]
    d7d6:	aa05      	add	r2, sp, #20
    d7d8:	2102      	movs	r1, #2
    d7da:	4798      	blx	r3
    d7dc:	e7e0      	b.n	d7a0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    d7de:	2300      	movs	r3, #0
    d7e0:	220c      	movs	r2, #12
    d7e2:	a905      	add	r1, sp, #20
    d7e4:	0020      	movs	r0, r4
    d7e6:	4c7c      	ldr	r4, [pc, #496]	; (d9d8 <m2m_ip_cb+0x2f0>)
    d7e8:	47a0      	blx	r4
    d7ea:	2800      	cmp	r0, #0
    d7ec:	d1d8      	bne.n	d7a0 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    d7ee:	ab05      	add	r3, sp, #20
    d7f0:	2209      	movs	r2, #9
    d7f2:	569a      	ldrsb	r2, [r3, r2]
    d7f4:	2a00      	cmp	r2, #0
    d7f6:	db24      	blt.n	d842 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    d7f8:	0018      	movs	r0, r3
    d7fa:	2108      	movs	r1, #8
    d7fc:	5659      	ldrsb	r1, [r3, r1]
    d7fe:	4b79      	ldr	r3, [pc, #484]	; (d9e4 <m2m_ip_cb+0x2fc>)
    d800:	0109      	lsls	r1, r1, #4
    d802:	1859      	adds	r1, r3, r1
    d804:	7ac9      	ldrb	r1, [r1, #11]
    d806:	b2c9      	uxtb	r1, r1
    d808:	0114      	lsls	r4, r2, #4
    d80a:	191b      	adds	r3, r3, r4
    d80c:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    d80e:	2101      	movs	r1, #1
    d810:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    d812:	8941      	ldrh	r1, [r0, #10]
    d814:	3908      	subs	r1, #8
    d816:	b289      	uxth	r1, r1
    d818:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    d81a:	4973      	ldr	r1, [pc, #460]	; (d9e8 <m2m_ip_cb+0x300>)
    d81c:	880b      	ldrh	r3, [r1, #0]
    d81e:	3301      	adds	r3, #1
    d820:	b29b      	uxth	r3, r3
    d822:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    d824:	880b      	ldrh	r3, [r1, #0]
    d826:	b29b      	uxth	r3, r3
    d828:	2b00      	cmp	r3, #0
    d82a:	d103      	bne.n	d834 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    d82c:	880b      	ldrh	r3, [r1, #0]
    d82e:	3301      	adds	r3, #1
    d830:	b29b      	uxth	r3, r3
    d832:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    d834:	4b6c      	ldr	r3, [pc, #432]	; (d9e8 <m2m_ip_cb+0x300>)
    d836:	8819      	ldrh	r1, [r3, #0]
    d838:	b289      	uxth	r1, r1
    d83a:	0110      	lsls	r0, r2, #4
    d83c:	4b69      	ldr	r3, [pc, #420]	; (d9e4 <m2m_ip_cb+0x2fc>)
    d83e:	181b      	adds	r3, r3, r0
    d840:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    d842:	ab09      	add	r3, sp, #36	; 0x24
    d844:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    d846:	2202      	movs	r2, #2
    d848:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    d84a:	aa05      	add	r2, sp, #20
    d84c:	8851      	ldrh	r1, [r2, #2]
    d84e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    d850:	9a06      	ldr	r2, [sp, #24]
    d852:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    d854:	4b62      	ldr	r3, [pc, #392]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d856:	681b      	ldr	r3, [r3, #0]
    d858:	2b00      	cmp	r3, #0
    d85a:	d0a1      	beq.n	d7a0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    d85c:	4b60      	ldr	r3, [pc, #384]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d85e:	681b      	ldr	r3, [r3, #0]
    d860:	aa05      	add	r2, sp, #20
    d862:	2008      	movs	r0, #8
    d864:	5610      	ldrsb	r0, [r2, r0]
    d866:	aa09      	add	r2, sp, #36	; 0x24
    d868:	2104      	movs	r1, #4
    d86a:	4798      	blx	r3
    d86c:	e798      	b.n	d7a0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    d86e:	2300      	movs	r3, #0
    d870:	2204      	movs	r2, #4
    d872:	a909      	add	r1, sp, #36	; 0x24
    d874:	0020      	movs	r0, r4
    d876:	4c58      	ldr	r4, [pc, #352]	; (d9d8 <m2m_ip_cb+0x2f0>)
    d878:	47a0      	blx	r4
    d87a:	2800      	cmp	r0, #0
    d87c:	d000      	beq.n	d880 <m2m_ip_cb+0x198>
    d87e:	e78f      	b.n	d7a0 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    d880:	ab09      	add	r3, sp, #36	; 0x24
    d882:	2000      	movs	r0, #0
    d884:	5618      	ldrsb	r0, [r3, r0]
    d886:	aa05      	add	r2, sp, #20
    d888:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    d88a:	785b      	ldrb	r3, [r3, #1]
    d88c:	b25b      	sxtb	r3, r3
    d88e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    d890:	2b00      	cmp	r3, #0
    d892:	d107      	bne.n	d8a4 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    d894:	ab09      	add	r3, sp, #36	; 0x24
    d896:	885b      	ldrh	r3, [r3, #2]
    d898:	3b08      	subs	r3, #8
    d89a:	b29b      	uxth	r3, r3
    d89c:	0101      	lsls	r1, r0, #4
    d89e:	4a51      	ldr	r2, [pc, #324]	; (d9e4 <m2m_ip_cb+0x2fc>)
    d8a0:	1852      	adds	r2, r2, r1
    d8a2:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    d8a4:	4b4e      	ldr	r3, [pc, #312]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d8a6:	681b      	ldr	r3, [r3, #0]
    d8a8:	2b00      	cmp	r3, #0
    d8aa:	d100      	bne.n	d8ae <m2m_ip_cb+0x1c6>
    d8ac:	e778      	b.n	d7a0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    d8ae:	4b4c      	ldr	r3, [pc, #304]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d8b0:	681b      	ldr	r3, [r3, #0]
    d8b2:	aa05      	add	r2, sp, #20
    d8b4:	2105      	movs	r1, #5
    d8b6:	4798      	blx	r3
	{
    d8b8:	e772      	b.n	d7a0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    d8ba:	2300      	movs	r3, #0
    d8bc:	2244      	movs	r2, #68	; 0x44
    d8be:	a909      	add	r1, sp, #36	; 0x24
    d8c0:	0020      	movs	r0, r4
    d8c2:	4c45      	ldr	r4, [pc, #276]	; (d9d8 <m2m_ip_cb+0x2f0>)
    d8c4:	47a0      	blx	r4
    d8c6:	2800      	cmp	r0, #0
    d8c8:	d000      	beq.n	d8cc <m2m_ip_cb+0x1e4>
    d8ca:	e769      	b.n	d7a0 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    d8cc:	4b47      	ldr	r3, [pc, #284]	; (d9ec <m2m_ip_cb+0x304>)
    d8ce:	681b      	ldr	r3, [r3, #0]
    d8d0:	2b00      	cmp	r3, #0
    d8d2:	d100      	bne.n	d8d6 <m2m_ip_cb+0x1ee>
    d8d4:	e764      	b.n	d7a0 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    d8d6:	4b45      	ldr	r3, [pc, #276]	; (d9ec <m2m_ip_cb+0x304>)
    d8d8:	681b      	ldr	r3, [r3, #0]
    d8da:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d8dc:	9203      	str	r2, [sp, #12]
    d8de:	0011      	movs	r1, r2
    d8e0:	a809      	add	r0, sp, #36	; 0x24
    d8e2:	4798      	blx	r3
    d8e4:	e75c      	b.n	d7a0 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    d8e6:	2306      	movs	r3, #6
    d8e8:	469a      	mov	sl, r3
    d8ea:	e001      	b.n	d8f0 <m2m_ip_cb+0x208>
    d8ec:	2306      	movs	r3, #6
    d8ee:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    d8f0:	2300      	movs	r3, #0
    d8f2:	2210      	movs	r2, #16
    d8f4:	a905      	add	r1, sp, #20
    d8f6:	0020      	movs	r0, r4
    d8f8:	4f37      	ldr	r7, [pc, #220]	; (d9d8 <m2m_ip_cb+0x2f0>)
    d8fa:	47b8      	blx	r7
    d8fc:	2800      	cmp	r0, #0
    d8fe:	d000      	beq.n	d902 <m2m_ip_cb+0x21a>
    d900:	e74e      	b.n	d7a0 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    d902:	aa05      	add	r2, sp, #20
    d904:	200c      	movs	r0, #12
    d906:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    d908:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    d90a:	0107      	lsls	r7, r0, #4
    d90c:	4935      	ldr	r1, [pc, #212]	; (d9e4 <m2m_ip_cb+0x2fc>)
    d90e:	19c9      	adds	r1, r1, r7
    d910:	2700      	movs	r7, #0
    d912:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    d914:	2608      	movs	r6, #8
    d916:	5f97      	ldrsh	r7, [r2, r6]
    d918:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    d91a:	8957      	ldrh	r7, [r2, #10]
    d91c:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    d91e:	af09      	add	r7, sp, #36	; 0x24
    d920:	8856      	ldrh	r6, [r2, #2]
    d922:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    d924:	9a06      	ldr	r2, [sp, #24]
    d926:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    d928:	88ca      	ldrh	r2, [r1, #6]
    d92a:	b292      	uxth	r2, r2
    d92c:	4293      	cmp	r3, r2
    d92e:	d00c      	beq.n	d94a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    d930:	2d10      	cmp	r5, #16
    d932:	d800      	bhi.n	d936 <m2m_ip_cb+0x24e>
    d934:	e734      	b.n	d7a0 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    d936:	2301      	movs	r3, #1
    d938:	2200      	movs	r2, #0
    d93a:	2100      	movs	r1, #0
    d93c:	2000      	movs	r0, #0
    d93e:	4c26      	ldr	r4, [pc, #152]	; (d9d8 <m2m_ip_cb+0x2f0>)
    d940:	47a0      	blx	r4
	{
    d942:	e72d      	b.n	d7a0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    d944:	2309      	movs	r3, #9
    d946:	469a      	mov	sl, r3
    d948:	e7d2      	b.n	d8f0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    d94a:	4643      	mov	r3, r8
    d94c:	2b00      	cmp	r3, #0
    d94e:	dd01      	ble.n	d954 <m2m_ip_cb+0x26c>
    d950:	45a8      	cmp	r8, r5
    d952:	db0f      	blt.n	d974 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    d954:	ab09      	add	r3, sp, #36	; 0x24
    d956:	4642      	mov	r2, r8
    d958:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    d95a:	2300      	movs	r3, #0
    d95c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    d95e:	4b20      	ldr	r3, [pc, #128]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d960:	681b      	ldr	r3, [r3, #0]
    d962:	2b00      	cmp	r3, #0
    d964:	d100      	bne.n	d968 <m2m_ip_cb+0x280>
    d966:	e71b      	b.n	d7a0 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    d968:	4b1d      	ldr	r3, [pc, #116]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d96a:	681b      	ldr	r3, [r3, #0]
    d96c:	aa09      	add	r2, sp, #36	; 0x24
    d96e:	4651      	mov	r1, sl
    d970:	4798      	blx	r3
    d972:	e715      	b.n	d7a0 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    d974:	0023      	movs	r3, r4
    d976:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    d978:	4642      	mov	r2, r8
    d97a:	4669      	mov	r1, sp
    d97c:	818a      	strh	r2, [r1, #12]
    d97e:	898a      	ldrh	r2, [r1, #12]
    d980:	9200      	str	r2, [sp, #0]
    d982:	4652      	mov	r2, sl
    d984:	0039      	movs	r1, r7
    d986:	4c1a      	ldr	r4, [pc, #104]	; (d9f0 <m2m_ip_cb+0x308>)
    d988:	47a0      	blx	r4
    d98a:	e709      	b.n	d7a0 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    d98c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    d98e:	2300      	movs	r3, #0
    d990:	2208      	movs	r2, #8
    d992:	a909      	add	r1, sp, #36	; 0x24
    d994:	0020      	movs	r0, r4
    d996:	4c10      	ldr	r4, [pc, #64]	; (d9d8 <m2m_ip_cb+0x2f0>)
    d998:	47a0      	blx	r4
    d99a:	2800      	cmp	r0, #0
    d99c:	d000      	beq.n	d9a0 <m2m_ip_cb+0x2b8>
    d99e:	e6ff      	b.n	d7a0 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    d9a0:	ab09      	add	r3, sp, #36	; 0x24
    d9a2:	2000      	movs	r0, #0
    d9a4:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    d9a6:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    d9a8:	8859      	ldrh	r1, [r3, #2]
    d9aa:	ab05      	add	r3, sp, #20
    d9ac:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    d9ae:	0101      	lsls	r1, r0, #4
    d9b0:	4b0c      	ldr	r3, [pc, #48]	; (d9e4 <m2m_ip_cb+0x2fc>)
    d9b2:	185b      	adds	r3, r3, r1
    d9b4:	88db      	ldrh	r3, [r3, #6]
    d9b6:	b29b      	uxth	r3, r3
    d9b8:	429a      	cmp	r2, r3
    d9ba:	d000      	beq.n	d9be <m2m_ip_cb+0x2d6>
    d9bc:	e6f0      	b.n	d7a0 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    d9be:	4b08      	ldr	r3, [pc, #32]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d9c0:	681b      	ldr	r3, [r3, #0]
    d9c2:	2b00      	cmp	r3, #0
    d9c4:	d100      	bne.n	d9c8 <m2m_ip_cb+0x2e0>
    d9c6:	e6eb      	b.n	d7a0 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    d9c8:	4b05      	ldr	r3, [pc, #20]	; (d9e0 <m2m_ip_cb+0x2f8>)
    d9ca:	681b      	ldr	r3, [r3, #0]
    d9cc:	aa05      	add	r2, sp, #20
    d9ce:	0029      	movs	r1, r5
    d9d0:	4798      	blx	r3
	{
    d9d2:	e6e5      	b.n	d7a0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    d9d4:	2508      	movs	r5, #8
    d9d6:	e7da      	b.n	d98e <m2m_ip_cb+0x2a6>
    d9d8:	0000b97d 	.word	0x0000b97d
    d9dc:	20001084 	.word	0x20001084
    d9e0:	20001080 	.word	0x20001080
    d9e4:	20000fd0 	.word	0x20000fd0
    d9e8:	200003ee 	.word	0x200003ee
    d9ec:	20001088 	.word	0x20001088
    d9f0:	0000d5d5 	.word	0x0000d5d5

0000d9f4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    d9f4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    d9f6:	4b0a      	ldr	r3, [pc, #40]	; (da20 <socketInit+0x2c>)
    d9f8:	781b      	ldrb	r3, [r3, #0]
    d9fa:	2b00      	cmp	r3, #0
    d9fc:	d000      	beq.n	da00 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    d9fe:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    da00:	22b0      	movs	r2, #176	; 0xb0
    da02:	2100      	movs	r1, #0
    da04:	4807      	ldr	r0, [pc, #28]	; (da24 <socketInit+0x30>)
    da06:	4b08      	ldr	r3, [pc, #32]	; (da28 <socketInit+0x34>)
    da08:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    da0a:	4908      	ldr	r1, [pc, #32]	; (da2c <socketInit+0x38>)
    da0c:	2002      	movs	r0, #2
    da0e:	4b08      	ldr	r3, [pc, #32]	; (da30 <socketInit+0x3c>)
    da10:	4798      	blx	r3
		gbSocketInit	= 1;
    da12:	2201      	movs	r2, #1
    da14:	4b02      	ldr	r3, [pc, #8]	; (da20 <socketInit+0x2c>)
    da16:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    da18:	2200      	movs	r2, #0
    da1a:	4b06      	ldr	r3, [pc, #24]	; (da34 <socketInit+0x40>)
    da1c:	801a      	strh	r2, [r3, #0]
}
    da1e:	e7ee      	b.n	d9fe <socketInit+0xa>
    da20:	200003ed 	.word	0x200003ed
    da24:	20000fd0 	.word	0x20000fd0
    da28:	0000b251 	.word	0x0000b251
    da2c:	0000d6e9 	.word	0x0000d6e9
    da30:	0000ba65 	.word	0x0000ba65
    da34:	200003ee 	.word	0x200003ee

0000da38 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    da38:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    da3a:	22b0      	movs	r2, #176	; 0xb0
    da3c:	2100      	movs	r1, #0
    da3e:	4807      	ldr	r0, [pc, #28]	; (da5c <socketDeinit+0x24>)
    da40:	4b07      	ldr	r3, [pc, #28]	; (da60 <socketDeinit+0x28>)
    da42:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    da44:	2100      	movs	r1, #0
    da46:	2002      	movs	r0, #2
    da48:	4b06      	ldr	r3, [pc, #24]	; (da64 <socketDeinit+0x2c>)
    da4a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    da4c:	2300      	movs	r3, #0
    da4e:	4a06      	ldr	r2, [pc, #24]	; (da68 <socketDeinit+0x30>)
    da50:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    da52:	4a06      	ldr	r2, [pc, #24]	; (da6c <socketDeinit+0x34>)
    da54:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    da56:	4a06      	ldr	r2, [pc, #24]	; (da70 <socketDeinit+0x38>)
    da58:	7013      	strb	r3, [r2, #0]
}
    da5a:	bd10      	pop	{r4, pc}
    da5c:	20000fd0 	.word	0x20000fd0
    da60:	0000b251 	.word	0x0000b251
    da64:	0000ba65 	.word	0x0000ba65
    da68:	20001080 	.word	0x20001080
    da6c:	20001088 	.word	0x20001088
    da70:	200003ed 	.word	0x200003ed

0000da74 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    da74:	4b02      	ldr	r3, [pc, #8]	; (da80 <registerSocketCallback+0xc>)
    da76:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    da78:	4b02      	ldr	r3, [pc, #8]	; (da84 <registerSocketCallback+0x10>)
    da7a:	6019      	str	r1, [r3, #0]
}
    da7c:	4770      	bx	lr
    da7e:	46c0      	nop			; (mov r8, r8)
    da80:	20001080 	.word	0x20001080
    da84:	20001088 	.word	0x20001088

0000da88 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    da88:	b5f0      	push	{r4, r5, r6, r7, lr}
    da8a:	46d6      	mov	lr, sl
    da8c:	4647      	mov	r7, r8
    da8e:	b580      	push	{r7, lr}
    da90:	b089      	sub	sp, #36	; 0x24
    da92:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    da94:	2802      	cmp	r0, #2
    da96:	d000      	beq.n	da9a <socket+0x12>
    da98:	e09c      	b.n	dbd4 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    da9a:	2901      	cmp	r1, #1
    da9c:	d00a      	beq.n	dab4 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    da9e:	2902      	cmp	r1, #2
    daa0:	d100      	bne.n	daa4 <socket+0x1c>
    daa2:	e070      	b.n	db86 <socket+0xfe>
	SOCKET					sock = -1;
    daa4:	2501      	movs	r5, #1
    daa6:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    daa8:	0028      	movs	r0, r5
    daaa:	b009      	add	sp, #36	; 0x24
    daac:	bc0c      	pop	{r2, r3}
    daae:	4690      	mov	r8, r2
    dab0:	469a      	mov	sl, r3
    dab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    dab4:	4c49      	ldr	r4, [pc, #292]	; (dbdc <socket+0x154>)
    dab6:	7827      	ldrb	r7, [r4, #0]
    dab8:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    daba:	7826      	ldrb	r6, [r4, #0]
    dabc:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    dabe:	7820      	ldrb	r0, [r4, #0]
    dac0:	3001      	adds	r0, #1
    dac2:	3106      	adds	r1, #6
    dac4:	4b46      	ldr	r3, [pc, #280]	; (dbe0 <socket+0x158>)
    dac6:	4798      	blx	r3
    dac8:	b2c9      	uxtb	r1, r1
    daca:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    dacc:	0132      	lsls	r2, r6, #4
    dace:	4b45      	ldr	r3, [pc, #276]	; (dbe4 <socket+0x15c>)
    dad0:	189b      	adds	r3, r3, r2
    dad2:	7a9b      	ldrb	r3, [r3, #10]
    dad4:	2506      	movs	r5, #6
    dad6:	2b00      	cmp	r3, #0
    dad8:	d018      	beq.n	db0c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    dada:	4e40      	ldr	r6, [pc, #256]	; (dbdc <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    dadc:	4b40      	ldr	r3, [pc, #256]	; (dbe0 <socket+0x158>)
    dade:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    dae0:	4b40      	ldr	r3, [pc, #256]	; (dbe4 <socket+0x15c>)
    dae2:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    dae4:	7837      	ldrb	r7, [r6, #0]
    dae6:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    dae8:	7834      	ldrb	r4, [r6, #0]
    daea:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    daec:	7830      	ldrb	r0, [r6, #0]
    daee:	3001      	adds	r0, #1
    daf0:	2107      	movs	r1, #7
    daf2:	47d0      	blx	sl
    daf4:	b2c9      	uxtb	r1, r1
    daf6:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    daf8:	0123      	lsls	r3, r4, #4
    dafa:	4443      	add	r3, r8
    dafc:	7a9b      	ldrb	r3, [r3, #10]
    dafe:	2b00      	cmp	r3, #0
    db00:	d007      	beq.n	db12 <socket+0x8a>
    db02:	3d01      	subs	r5, #1
    db04:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    db06:	2d00      	cmp	r5, #0
    db08:	d1ec      	bne.n	dae4 <socket+0x5c>
    db0a:	e7cb      	b.n	daa4 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    db0c:	4b35      	ldr	r3, [pc, #212]	; (dbe4 <socket+0x15c>)
    db0e:	18d4      	adds	r4, r2, r3
    db10:	e002      	b.n	db18 <socket+0x90>
    db12:	0124      	lsls	r4, r4, #4
    db14:	4b33      	ldr	r3, [pc, #204]	; (dbe4 <socket+0x15c>)
    db16:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    db18:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    db1a:	2d00      	cmp	r5, #0
    db1c:	dbc4      	blt.n	daa8 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    db1e:	2210      	movs	r2, #16
    db20:	2100      	movs	r1, #0
    db22:	0020      	movs	r0, r4
    db24:	4b30      	ldr	r3, [pc, #192]	; (dbe8 <socket+0x160>)
    db26:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    db28:	2301      	movs	r3, #1
    db2a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    db2c:	4a2f      	ldr	r2, [pc, #188]	; (dbec <socket+0x164>)
    db2e:	8813      	ldrh	r3, [r2, #0]
    db30:	3301      	adds	r3, #1
    db32:	b29b      	uxth	r3, r3
    db34:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    db36:	8813      	ldrh	r3, [r2, #0]
    db38:	b29b      	uxth	r3, r3
    db3a:	2b00      	cmp	r3, #0
    db3c:	d103      	bne.n	db46 <socket+0xbe>
				++gu16SessionID;
    db3e:	8813      	ldrh	r3, [r2, #0]
    db40:	3301      	adds	r3, #1
    db42:	b29b      	uxth	r3, r3
    db44:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    db46:	4e29      	ldr	r6, [pc, #164]	; (dbec <socket+0x164>)
    db48:	8833      	ldrh	r3, [r6, #0]
    db4a:	b29b      	uxth	r3, r3
    db4c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    db4e:	4828      	ldr	r0, [pc, #160]	; (dbf0 <socket+0x168>)
    db50:	4f28      	ldr	r7, [pc, #160]	; (dbf4 <socket+0x16c>)
    db52:	47b8      	blx	r7
    db54:	8832      	ldrh	r2, [r6, #0]
    db56:	b292      	uxth	r2, r2
    db58:	0029      	movs	r1, r5
    db5a:	4827      	ldr	r0, [pc, #156]	; (dbf8 <socket+0x170>)
    db5c:	47b8      	blx	r7
    db5e:	200d      	movs	r0, #13
    db60:	4b26      	ldr	r3, [pc, #152]	; (dbfc <socket+0x174>)
    db62:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    db64:	9b05      	ldr	r3, [sp, #20]
    db66:	07db      	lsls	r3, r3, #31
    db68:	d59e      	bpl.n	daa8 <socket+0x20>
				strSSLCreate.sslSock = sock;
    db6a:	aa07      	add	r2, sp, #28
    db6c:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    db6e:	2321      	movs	r3, #33	; 0x21
    db70:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    db72:	2300      	movs	r3, #0
    db74:	9302      	str	r3, [sp, #8]
    db76:	9301      	str	r3, [sp, #4]
    db78:	9300      	str	r3, [sp, #0]
    db7a:	3304      	adds	r3, #4
    db7c:	2150      	movs	r1, #80	; 0x50
    db7e:	2002      	movs	r0, #2
    db80:	4c1f      	ldr	r4, [pc, #124]	; (dc00 <socket+0x178>)
    db82:	47a0      	blx	r4
    db84:	e790      	b.n	daa8 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    db86:	4b1f      	ldr	r3, [pc, #124]	; (dc04 <socket+0x17c>)
    db88:	781d      	ldrb	r5, [r3, #0]
    db8a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    db8c:	781c      	ldrb	r4, [r3, #0]
    db8e:	0124      	lsls	r4, r4, #4
    db90:	4a1d      	ldr	r2, [pc, #116]	; (dc08 <socket+0x180>)
    db92:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    db94:	7819      	ldrb	r1, [r3, #0]
    db96:	3101      	adds	r1, #1
    db98:	2203      	movs	r2, #3
    db9a:	400a      	ands	r2, r1
    db9c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    db9e:	7aa3      	ldrb	r3, [r4, #10]
    dba0:	2b00      	cmp	r3, #0
    dba2:	d014      	beq.n	dbce <socket+0x146>
    dba4:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    dba6:	4917      	ldr	r1, [pc, #92]	; (dc04 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    dba8:	4f17      	ldr	r7, [pc, #92]	; (dc08 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    dbaa:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    dbac:	780d      	ldrb	r5, [r1, #0]
    dbae:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    dbb0:	780c      	ldrb	r4, [r1, #0]
    dbb2:	0124      	lsls	r4, r4, #4
    dbb4:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    dbb6:	780b      	ldrb	r3, [r1, #0]
    dbb8:	3301      	adds	r3, #1
    dbba:	4003      	ands	r3, r0
    dbbc:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    dbbe:	7aa3      	ldrb	r3, [r4, #10]
    dbc0:	2b00      	cmp	r3, #0
    dbc2:	d004      	beq.n	dbce <socket+0x146>
    dbc4:	3a01      	subs	r2, #1
    dbc6:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    dbc8:	2a00      	cmp	r2, #0
    dbca:	d1ef      	bne.n	dbac <socket+0x124>
    dbcc:	e76a      	b.n	daa4 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    dbce:	3507      	adds	r5, #7
    dbd0:	b26d      	sxtb	r5, r5
					break;
    dbd2:	e7a2      	b.n	db1a <socket+0x92>
	SOCKET					sock = -1;
    dbd4:	2501      	movs	r5, #1
    dbd6:	426d      	negs	r5, r5
    dbd8:	e766      	b.n	daa8 <socket+0x20>
    dbda:	46c0      	nop			; (mov r8, r8)
    dbdc:	200003f0 	.word	0x200003f0
    dbe0:	000164ed 	.word	0x000164ed
    dbe4:	20000fd0 	.word	0x20000fd0
    dbe8:	0000b251 	.word	0x0000b251
    dbec:	200003ee 	.word	0x200003ee
    dbf0:	00018cb0 	.word	0x00018cb0
    dbf4:	00016761 	.word	0x00016761
    dbf8:	00019740 	.word	0x00019740
    dbfc:	00016795 	.word	0x00016795
    dc00:	0000b365 	.word	0x0000b365
    dc04:	200003f1 	.word	0x200003f1
    dc08:	20001040 	.word	0x20001040

0000dc0c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    dc0c:	b570      	push	{r4, r5, r6, lr}
    dc0e:	b088      	sub	sp, #32
    dc10:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    dc12:	db30      	blt.n	dc76 <connect+0x6a>
    dc14:	2900      	cmp	r1, #0
    dc16:	d031      	beq.n	dc7c <connect+0x70>
    dc18:	0100      	lsls	r0, r0, #4
    dc1a:	4b1d      	ldr	r3, [pc, #116]	; (dc90 <connect+0x84>)
    dc1c:	181b      	adds	r3, r3, r0
    dc1e:	7a9b      	ldrb	r3, [r3, #10]
    dc20:	2b01      	cmp	r3, #1
    dc22:	d12e      	bne.n	dc82 <connect+0x76>
    dc24:	2a00      	cmp	r2, #0
    dc26:	d02f      	beq.n	dc88 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    dc28:	4b19      	ldr	r3, [pc, #100]	; (dc90 <connect+0x84>)
    dc2a:	181b      	adds	r3, r3, r0
    dc2c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    dc2e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    dc30:	07db      	lsls	r3, r3, #31
    dc32:	d505      	bpl.n	dc40 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    dc34:	4b16      	ldr	r3, [pc, #88]	; (dc90 <connect+0x84>)
    dc36:	181b      	adds	r3, r3, r0
    dc38:	7ada      	ldrb	r2, [r3, #11]
    dc3a:	ab05      	add	r3, sp, #20
    dc3c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    dc3e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    dc40:	ad05      	add	r5, sp, #20
    dc42:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    dc44:	2208      	movs	r2, #8
    dc46:	0028      	movs	r0, r5
    dc48:	4b12      	ldr	r3, [pc, #72]	; (dc94 <connect+0x88>)
    dc4a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    dc4c:	0124      	lsls	r4, r4, #4
    dc4e:	4b10      	ldr	r3, [pc, #64]	; (dc90 <connect+0x84>)
    dc50:	191c      	adds	r4, r3, r4
    dc52:	88e3      	ldrh	r3, [r4, #6]
    dc54:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    dc56:	2300      	movs	r3, #0
    dc58:	9302      	str	r3, [sp, #8]
    dc5a:	9301      	str	r3, [sp, #4]
    dc5c:	9300      	str	r3, [sp, #0]
    dc5e:	330c      	adds	r3, #12
    dc60:	002a      	movs	r2, r5
    dc62:	0031      	movs	r1, r6
    dc64:	2002      	movs	r0, #2
    dc66:	4c0c      	ldr	r4, [pc, #48]	; (dc98 <connect+0x8c>)
    dc68:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    dc6a:	2800      	cmp	r0, #0
    dc6c:	d001      	beq.n	dc72 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    dc6e:	2009      	movs	r0, #9
    dc70:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    dc72:	b008      	add	sp, #32
    dc74:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    dc76:	2006      	movs	r0, #6
    dc78:	4240      	negs	r0, r0
    dc7a:	e7fa      	b.n	dc72 <connect+0x66>
    dc7c:	2006      	movs	r0, #6
    dc7e:	4240      	negs	r0, r0
    dc80:	e7f7      	b.n	dc72 <connect+0x66>
    dc82:	2006      	movs	r0, #6
    dc84:	4240      	negs	r0, r0
    dc86:	e7f4      	b.n	dc72 <connect+0x66>
    dc88:	2006      	movs	r0, #6
    dc8a:	4240      	negs	r0, r0
    dc8c:	e7f1      	b.n	dc72 <connect+0x66>
    dc8e:	46c0      	nop			; (mov r8, r8)
    dc90:	20000fd0 	.word	0x20000fd0
    dc94:	0000b23d 	.word	0x0000b23d
    dc98:	0000b365 	.word	0x0000b365

0000dc9c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    dc9c:	b530      	push	{r4, r5, lr}
    dc9e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    dca0:	2800      	cmp	r0, #0
    dca2:	db36      	blt.n	dd12 <send+0x76>
    dca4:	2900      	cmp	r1, #0
    dca6:	d037      	beq.n	dd18 <send+0x7c>
    dca8:	23af      	movs	r3, #175	; 0xaf
    dcaa:	00db      	lsls	r3, r3, #3
    dcac:	429a      	cmp	r2, r3
    dcae:	d836      	bhi.n	dd1e <send+0x82>
    dcb0:	0104      	lsls	r4, r0, #4
    dcb2:	4b1e      	ldr	r3, [pc, #120]	; (dd2c <send+0x90>)
    dcb4:	191b      	adds	r3, r3, r4
    dcb6:	7a9b      	ldrb	r3, [r3, #10]
    dcb8:	2b01      	cmp	r3, #1
    dcba:	d133      	bne.n	dd24 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    dcbc:	ab04      	add	r3, sp, #16
    dcbe:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    dcc0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    dcc2:	0025      	movs	r5, r4
    dcc4:	4c19      	ldr	r4, [pc, #100]	; (dd2c <send+0x90>)
    dcc6:	1964      	adds	r4, r4, r5
    dcc8:	88e4      	ldrh	r4, [r4, #6]
    dcca:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    dccc:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    dcce:	2806      	cmp	r0, #6
    dcd0:	dd00      	ble.n	dcd4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    dcd2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dcd4:	0104      	lsls	r4, r0, #4
    dcd6:	4b15      	ldr	r3, [pc, #84]	; (dd2c <send+0x90>)
    dcd8:	191b      	adds	r3, r3, r4
    dcda:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    dcdc:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dcde:	07e4      	lsls	r4, r4, #31
    dce0:	d505      	bpl.n	dcee <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    dce2:	0100      	lsls	r0, r0, #4
    dce4:	4b11      	ldr	r3, [pc, #68]	; (dd2c <send+0x90>)
    dce6:	1818      	adds	r0, r3, r0
    dce8:	8905      	ldrh	r5, [r0, #8]
    dcea:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    dcec:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    dcee:	2080      	movs	r0, #128	; 0x80
    dcf0:	4318      	orrs	r0, r3
    dcf2:	9502      	str	r5, [sp, #8]
    dcf4:	9201      	str	r2, [sp, #4]
    dcf6:	9100      	str	r1, [sp, #0]
    dcf8:	2310      	movs	r3, #16
    dcfa:	aa04      	add	r2, sp, #16
    dcfc:	0001      	movs	r1, r0
    dcfe:	2002      	movs	r0, #2
    dd00:	4c0b      	ldr	r4, [pc, #44]	; (dd30 <send+0x94>)
    dd02:	47a0      	blx	r4
    dd04:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    dd06:	2800      	cmp	r0, #0
    dd08:	d000      	beq.n	dd0c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    dd0a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    dd0c:	0018      	movs	r0, r3
    dd0e:	b009      	add	sp, #36	; 0x24
    dd10:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    dd12:	2306      	movs	r3, #6
    dd14:	425b      	negs	r3, r3
    dd16:	e7f9      	b.n	dd0c <send+0x70>
    dd18:	2306      	movs	r3, #6
    dd1a:	425b      	negs	r3, r3
    dd1c:	e7f6      	b.n	dd0c <send+0x70>
    dd1e:	2306      	movs	r3, #6
    dd20:	425b      	negs	r3, r3
    dd22:	e7f3      	b.n	dd0c <send+0x70>
    dd24:	2306      	movs	r3, #6
    dd26:	425b      	negs	r3, r3
    dd28:	e7f0      	b.n	dd0c <send+0x70>
    dd2a:	46c0      	nop			; (mov r8, r8)
    dd2c:	20000fd0 	.word	0x20000fd0
    dd30:	0000b365 	.word	0x0000b365

0000dd34 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    dd34:	b530      	push	{r4, r5, lr}
    dd36:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    dd38:	2800      	cmp	r0, #0
    dd3a:	db34      	blt.n	dda6 <recv+0x72>
    dd3c:	2900      	cmp	r1, #0
    dd3e:	d035      	beq.n	ddac <recv+0x78>
    dd40:	2a00      	cmp	r2, #0
    dd42:	d036      	beq.n	ddb2 <recv+0x7e>
    dd44:	0105      	lsls	r5, r0, #4
    dd46:	4c1e      	ldr	r4, [pc, #120]	; (ddc0 <recv+0x8c>)
    dd48:	1964      	adds	r4, r4, r5
    dd4a:	7aa4      	ldrb	r4, [r4, #10]
    dd4c:	2c01      	cmp	r4, #1
    dd4e:	d133      	bne.n	ddb8 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    dd50:	4c1b      	ldr	r4, [pc, #108]	; (ddc0 <recv+0x8c>)
    dd52:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    dd54:	1964      	adds	r4, r4, r5
    dd56:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    dd58:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    dd5a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    dd5c:	2900      	cmp	r1, #0
    dd5e:	d11d      	bne.n	dd9c <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    dd60:	2101      	movs	r1, #1
    dd62:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dd64:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    dd66:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    dd68:	07d2      	lsls	r2, r2, #31
    dd6a:	d500      	bpl.n	dd6e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    dd6c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    dd6e:	2b00      	cmp	r3, #0
    dd70:	d117      	bne.n	dda2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    dd72:	3b01      	subs	r3, #1
    dd74:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    dd76:	aa04      	add	r2, sp, #16
    dd78:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    dd7a:	0100      	lsls	r0, r0, #4
    dd7c:	4b10      	ldr	r3, [pc, #64]	; (ddc0 <recv+0x8c>)
    dd7e:	1818      	adds	r0, r3, r0
    dd80:	88c3      	ldrh	r3, [r0, #6]
    dd82:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    dd84:	2300      	movs	r3, #0
    dd86:	9302      	str	r3, [sp, #8]
    dd88:	9301      	str	r3, [sp, #4]
    dd8a:	9300      	str	r3, [sp, #0]
    dd8c:	3308      	adds	r3, #8
    dd8e:	2002      	movs	r0, #2
    dd90:	4c0c      	ldr	r4, [pc, #48]	; (ddc4 <recv+0x90>)
    dd92:	47a0      	blx	r4
    dd94:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    dd96:	2800      	cmp	r0, #0
    dd98:	d000      	beq.n	dd9c <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    dd9a:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    dd9c:	0010      	movs	r0, r2
    dd9e:	b007      	add	sp, #28
    dda0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    dda2:	9304      	str	r3, [sp, #16]
    dda4:	e7e7      	b.n	dd76 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    dda6:	2206      	movs	r2, #6
    dda8:	4252      	negs	r2, r2
    ddaa:	e7f7      	b.n	dd9c <recv+0x68>
    ddac:	2206      	movs	r2, #6
    ddae:	4252      	negs	r2, r2
    ddb0:	e7f4      	b.n	dd9c <recv+0x68>
    ddb2:	2206      	movs	r2, #6
    ddb4:	4252      	negs	r2, r2
    ddb6:	e7f1      	b.n	dd9c <recv+0x68>
    ddb8:	2206      	movs	r2, #6
    ddba:	4252      	negs	r2, r2
    ddbc:	e7ee      	b.n	dd9c <recv+0x68>
    ddbe:	46c0      	nop			; (mov r8, r8)
    ddc0:	20000fd0 	.word	0x20000fd0
    ddc4:	0000b365 	.word	0x0000b365

0000ddc8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    ddc8:	b530      	push	{r4, r5, lr}
    ddca:	b087      	sub	sp, #28
    ddcc:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    ddce:	481e      	ldr	r0, [pc, #120]	; (de48 <close+0x80>)
    ddd0:	4d1e      	ldr	r5, [pc, #120]	; (de4c <close+0x84>)
    ddd2:	47a8      	blx	r5
    ddd4:	0021      	movs	r1, r4
    ddd6:	481e      	ldr	r0, [pc, #120]	; (de50 <close+0x88>)
    ddd8:	47a8      	blx	r5
    ddda:	200d      	movs	r0, #13
    dddc:	4b1d      	ldr	r3, [pc, #116]	; (de54 <close+0x8c>)
    ddde:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    dde0:	2c00      	cmp	r4, #0
    dde2:	db2a      	blt.n	de3a <close+0x72>
    dde4:	0122      	lsls	r2, r4, #4
    dde6:	4b1c      	ldr	r3, [pc, #112]	; (de58 <close+0x90>)
    dde8:	189b      	adds	r3, r3, r2
    ddea:	7a9b      	ldrb	r3, [r3, #10]
    ddec:	2b01      	cmp	r3, #1
    ddee:	d127      	bne.n	de40 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    ddf0:	a905      	add	r1, sp, #20
    ddf2:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    ddf4:	4b18      	ldr	r3, [pc, #96]	; (de58 <close+0x90>)
    ddf6:	189b      	adds	r3, r3, r2
    ddf8:	88da      	ldrh	r2, [r3, #6]
    ddfa:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    ddfc:	2200      	movs	r2, #0
    ddfe:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    de00:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    de02:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    de04:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    de06:	07db      	lsls	r3, r3, #31
    de08:	d500      	bpl.n	de0c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    de0a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    de0c:	2300      	movs	r3, #0
    de0e:	9302      	str	r3, [sp, #8]
    de10:	9301      	str	r3, [sp, #4]
    de12:	9300      	str	r3, [sp, #0]
    de14:	3304      	adds	r3, #4
    de16:	aa05      	add	r2, sp, #20
    de18:	2002      	movs	r0, #2
    de1a:	4d10      	ldr	r5, [pc, #64]	; (de5c <close+0x94>)
    de1c:	47a8      	blx	r5
    de1e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    de20:	d001      	beq.n	de26 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    de22:	2509      	movs	r5, #9
    de24:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    de26:	0124      	lsls	r4, r4, #4
    de28:	480b      	ldr	r0, [pc, #44]	; (de58 <close+0x90>)
    de2a:	1820      	adds	r0, r4, r0
    de2c:	2210      	movs	r2, #16
    de2e:	2100      	movs	r1, #0
    de30:	4b0b      	ldr	r3, [pc, #44]	; (de60 <close+0x98>)
    de32:	4798      	blx	r3
	}
	return s8Ret;
}
    de34:	0028      	movs	r0, r5
    de36:	b007      	add	sp, #28
    de38:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    de3a:	2506      	movs	r5, #6
    de3c:	426d      	negs	r5, r5
    de3e:	e7f9      	b.n	de34 <close+0x6c>
    de40:	2506      	movs	r5, #6
    de42:	426d      	negs	r5, r5
    de44:	e7f6      	b.n	de34 <close+0x6c>
    de46:	46c0      	nop			; (mov r8, r8)
    de48:	00018cb0 	.word	0x00018cb0
    de4c:	00016761 	.word	0x00016761
    de50:	00019728 	.word	0x00019728
    de54:	00016795 	.word	0x00016795
    de58:	20000fd0 	.word	0x20000fd0
    de5c:	0000b365 	.word	0x0000b365
    de60:	0000b251 	.word	0x0000b251

0000de64 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    de64:	b570      	push	{r4, r5, r6, lr}
    de66:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    de68:	2300      	movs	r3, #0
    de6a:	9301      	str	r3, [sp, #4]
    de6c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    de6e:	2100      	movs	r1, #0
    de70:	7802      	ldrb	r2, [r0, #0]
    de72:	1c44      	adds	r4, r0, #1
    de74:	3005      	adds	r0, #5
    de76:	000b      	movs	r3, r1
    de78:	e009      	b.n	de8e <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    de7a:	009d      	lsls	r5, r3, #2
    de7c:	195b      	adds	r3, r3, r5
    de7e:	005b      	lsls	r3, r3, #1
    de80:	189b      	adds	r3, r3, r2
    de82:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    de84:	0022      	movs	r2, r4
    de86:	3401      	adds	r4, #1
			if(j > 4)
    de88:	42a0      	cmp	r0, r4
    de8a:	d00a      	beq.n	dea2 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    de8c:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    de8e:	2a2e      	cmp	r2, #46	; 0x2e
    de90:	d00a      	beq.n	dea8 <nmi_inet_addr+0x44>
    de92:	2a00      	cmp	r2, #0
    de94:	d00c      	beq.n	deb0 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    de96:	3a30      	subs	r2, #48	; 0x30
    de98:	b2d2      	uxtb	r2, r2
    de9a:	2a09      	cmp	r2, #9
    de9c:	d9ed      	bls.n	de7a <nmi_inet_addr+0x16>
				return 0;
    de9e:	2000      	movs	r0, #0
    dea0:	e000      	b.n	dea4 <nmi_inet_addr+0x40>
				return 0;
    dea2:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    dea4:	b002      	add	sp, #8
    dea6:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    dea8:	466a      	mov	r2, sp
    deaa:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    deac:	0020      	movs	r0, r4
    deae:	e002      	b.n	deb6 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    deb0:	466a      	mov	r2, sp
    deb2:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    deb4:	0020      	movs	r0, r4
    deb6:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    deb8:	2e04      	cmp	r6, #4
    deba:	d1d9      	bne.n	de70 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    debc:	2204      	movs	r2, #4
    debe:	4669      	mov	r1, sp
    dec0:	a801      	add	r0, sp, #4
    dec2:	4b02      	ldr	r3, [pc, #8]	; (decc <nmi_inet_addr+0x68>)
    dec4:	4798      	blx	r3
	return u32IP;
    dec6:	9801      	ldr	r0, [sp, #4]
    dec8:	e7ec      	b.n	dea4 <nmi_inet_addr+0x40>
    deca:	46c0      	nop			; (mov r8, r8)
    decc:	0000b23d 	.word	0x0000b23d

0000ded0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    ded0:	b510      	push	{r4, lr}
    ded2:	b084      	sub	sp, #16
    ded4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    ded6:	4b0b      	ldr	r3, [pc, #44]	; (df04 <gethostbyname+0x34>)
    ded8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    deda:	b2c3      	uxtb	r3, r0
    dedc:	2b40      	cmp	r3, #64	; 0x40
    dede:	d80d      	bhi.n	defc <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    dee0:	23ff      	movs	r3, #255	; 0xff
    dee2:	4003      	ands	r3, r0
    dee4:	3301      	adds	r3, #1
    dee6:	2200      	movs	r2, #0
    dee8:	9202      	str	r2, [sp, #8]
    deea:	9201      	str	r2, [sp, #4]
    deec:	9200      	str	r2, [sp, #0]
    deee:	0022      	movs	r2, r4
    def0:	214a      	movs	r1, #74	; 0x4a
    def2:	2002      	movs	r0, #2
    def4:	4c04      	ldr	r4, [pc, #16]	; (df08 <gethostbyname+0x38>)
    def6:	47a0      	blx	r4
	}
	return s8Err;
}
    def8:	b004      	add	sp, #16
    defa:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    defc:	2006      	movs	r0, #6
    defe:	4240      	negs	r0, r0
    df00:	e7fa      	b.n	def8 <gethostbyname+0x28>
    df02:	46c0      	nop			; (mov r8, r8)
    df04:	0000b261 	.word	0x0000b261
    df08:	0000b365 	.word	0x0000b365

0000df0c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    df0c:	b570      	push	{r4, r5, r6, lr}
    df0e:	b082      	sub	sp, #8
    df10:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    df12:	4b2a      	ldr	r3, [pc, #168]	; (dfbc <spi_flash_enable+0xb0>)
    df14:	4798      	blx	r3
    df16:	0500      	lsls	r0, r0, #20
    df18:	0d00      	lsrs	r0, r0, #20
    df1a:	4b29      	ldr	r3, [pc, #164]	; (dfc0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    df1c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    df1e:	4298      	cmp	r0, r3
    df20:	d802      	bhi.n	df28 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    df22:	0028      	movs	r0, r5
    df24:	b002      	add	sp, #8
    df26:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    df28:	a901      	add	r1, sp, #4
    df2a:	4826      	ldr	r0, [pc, #152]	; (dfc4 <spi_flash_enable+0xb8>)
    df2c:	4b26      	ldr	r3, [pc, #152]	; (dfc8 <spi_flash_enable+0xbc>)
    df2e:	4798      	blx	r3
    df30:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    df32:	d1f6      	bne.n	df22 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    df34:	4b25      	ldr	r3, [pc, #148]	; (dfcc <spi_flash_enable+0xc0>)
    df36:	9a01      	ldr	r2, [sp, #4]
    df38:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    df3a:	4925      	ldr	r1, [pc, #148]	; (dfd0 <spi_flash_enable+0xc4>)
    df3c:	4319      	orrs	r1, r3
    df3e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    df40:	4820      	ldr	r0, [pc, #128]	; (dfc4 <spi_flash_enable+0xb8>)
    df42:	4b24      	ldr	r3, [pc, #144]	; (dfd4 <spi_flash_enable+0xc8>)
    df44:	4798      	blx	r3
		if(enable) {
    df46:	2c00      	cmp	r4, #0
    df48:	d020      	beq.n	df8c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    df4a:	2100      	movs	r1, #0
    df4c:	4822      	ldr	r0, [pc, #136]	; (dfd8 <spi_flash_enable+0xcc>)
    df4e:	4c21      	ldr	r4, [pc, #132]	; (dfd4 <spi_flash_enable+0xc8>)
    df50:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    df52:	21ab      	movs	r1, #171	; 0xab
    df54:	4821      	ldr	r0, [pc, #132]	; (dfdc <spi_flash_enable+0xd0>)
    df56:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    df58:	2101      	movs	r1, #1
    df5a:	4821      	ldr	r0, [pc, #132]	; (dfe0 <spi_flash_enable+0xd4>)
    df5c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    df5e:	2100      	movs	r1, #0
    df60:	4820      	ldr	r0, [pc, #128]	; (dfe4 <spi_flash_enable+0xd8>)
    df62:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    df64:	2181      	movs	r1, #129	; 0x81
    df66:	4820      	ldr	r0, [pc, #128]	; (dfe8 <spi_flash_enable+0xdc>)
    df68:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    df6a:	4e20      	ldr	r6, [pc, #128]	; (dfec <spi_flash_enable+0xe0>)
    df6c:	4c20      	ldr	r4, [pc, #128]	; (dff0 <spi_flash_enable+0xe4>)
    df6e:	0030      	movs	r0, r6
    df70:	47a0      	blx	r4
    df72:	2801      	cmp	r0, #1
    df74:	d1fb      	bne.n	df6e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    df76:	4b15      	ldr	r3, [pc, #84]	; (dfcc <spi_flash_enable+0xc0>)
    df78:	9a01      	ldr	r2, [sp, #4]
    df7a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    df7c:	2180      	movs	r1, #128	; 0x80
    df7e:	0249      	lsls	r1, r1, #9
    df80:	4319      	orrs	r1, r3
    df82:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    df84:	480f      	ldr	r0, [pc, #60]	; (dfc4 <spi_flash_enable+0xb8>)
    df86:	4b13      	ldr	r3, [pc, #76]	; (dfd4 <spi_flash_enable+0xc8>)
    df88:	4798      	blx	r3
    df8a:	e7ca      	b.n	df22 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    df8c:	2100      	movs	r1, #0
    df8e:	4812      	ldr	r0, [pc, #72]	; (dfd8 <spi_flash_enable+0xcc>)
    df90:	4c10      	ldr	r4, [pc, #64]	; (dfd4 <spi_flash_enable+0xc8>)
    df92:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    df94:	21b9      	movs	r1, #185	; 0xb9
    df96:	4811      	ldr	r0, [pc, #68]	; (dfdc <spi_flash_enable+0xd0>)
    df98:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    df9a:	2101      	movs	r1, #1
    df9c:	4810      	ldr	r0, [pc, #64]	; (dfe0 <spi_flash_enable+0xd4>)
    df9e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    dfa0:	2100      	movs	r1, #0
    dfa2:	4810      	ldr	r0, [pc, #64]	; (dfe4 <spi_flash_enable+0xd8>)
    dfa4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    dfa6:	2181      	movs	r1, #129	; 0x81
    dfa8:	480f      	ldr	r0, [pc, #60]	; (dfe8 <spi_flash_enable+0xdc>)
    dfaa:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    dfac:	4e0f      	ldr	r6, [pc, #60]	; (dfec <spi_flash_enable+0xe0>)
    dfae:	4c10      	ldr	r4, [pc, #64]	; (dff0 <spi_flash_enable+0xe4>)
    dfb0:	0030      	movs	r0, r6
    dfb2:	47a0      	blx	r4
    dfb4:	2801      	cmp	r0, #1
    dfb6:	d1fb      	bne.n	dfb0 <spi_flash_enable+0xa4>
    dfb8:	e7dd      	b.n	df76 <spi_flash_enable+0x6a>
    dfba:	46c0      	nop			; (mov r8, r8)
    dfbc:	0000c251 	.word	0x0000c251
    dfc0:	0000039f 	.word	0x0000039f
    dfc4:	00001410 	.word	0x00001410
    dfc8:	0000c6a1 	.word	0x0000c6a1
    dfcc:	f8888fff 	.word	0xf8888fff
    dfd0:	01111000 	.word	0x01111000
    dfd4:	0000c6ad 	.word	0x0000c6ad
    dfd8:	00010208 	.word	0x00010208
    dfdc:	0001020c 	.word	0x0001020c
    dfe0:	00010214 	.word	0x00010214
    dfe4:	0001021c 	.word	0x0001021c
    dfe8:	00010204 	.word	0x00010204
    dfec:	00010218 	.word	0x00010218
    dff0:	0000c695 	.word	0x0000c695

0000dff4 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    dff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dff6:	46c6      	mov	lr, r8
    dff8:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    dffa:	2303      	movs	r3, #3
    dffc:	0007      	movs	r7, r0
    dffe:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    e000:	6813      	ldr	r3, [r2, #0]
    e002:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    e004:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    e006:	2903      	cmp	r1, #3
    e008:	d902      	bls.n	e010 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    e00a:	4244      	negs	r4, r0
    e00c:	2003      	movs	r0, #3
    e00e:	4004      	ands	r4, r0
	}

	if (temp_length) {
    e010:	2c00      	cmp	r4, #0
    e012:	d016      	beq.n	e042 <crc32_recalculate+0x4e>
		length -= temp_length;
    e014:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    e016:	1d3e      	adds	r6, r7, #4
    e018:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    e01a:	00e0      	lsls	r0, r4, #3
    e01c:	4240      	negs	r0, r0
    e01e:	3020      	adds	r0, #32
    e020:	40c5      	lsrs	r5, r0
	crc ^= data;
    e022:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    e024:	00e0      	lsls	r0, r4, #3
    e026:	d019      	beq.n	e05c <crc32_recalculate+0x68>
		if (crc & 1) {
    e028:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    e02a:	4d27      	ldr	r5, [pc, #156]	; (e0c8 <crc32_recalculate+0xd4>)
    e02c:	e003      	b.n	e036 <crc32_recalculate+0x42>
			crc >>= 1;
    e02e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    e030:	3801      	subs	r0, #1
    e032:	2800      	cmp	r0, #0
    e034:	d004      	beq.n	e040 <crc32_recalculate+0x4c>
		if (crc & 1) {
    e036:	421c      	tst	r4, r3
    e038:	d0f9      	beq.n	e02e <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    e03a:	085b      	lsrs	r3, r3, #1
    e03c:	406b      	eors	r3, r5
    e03e:	e7f7      	b.n	e030 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    e040:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    e042:	2003      	movs	r0, #3
    e044:	000c      	movs	r4, r1
    e046:	4384      	bics	r4, r0

	if (temp_length) {
    e048:	d01e      	beq.n	e088 <crc32_recalculate+0x94>
		length -= temp_length;
    e04a:	1b08      	subs	r0, r1, r4
    e04c:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    e04e:	0889      	lsrs	r1, r1, #2
    e050:	4688      	mov	r8, r1
    e052:	003e      	movs	r6, r7
    e054:	000d      	movs	r5, r1
		if (crc & 1) {
    e056:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    e058:	4c1b      	ldr	r4, [pc, #108]	; (e0c8 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    e05a:	e00b      	b.n	e074 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    e05c:	0037      	movs	r7, r6
    e05e:	e7f0      	b.n	e042 <crc32_recalculate+0x4e>
			crc >>= 1;
    e060:	085b      	lsrs	r3, r3, #1
    e062:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    e064:	2900      	cmp	r1, #0
    e066:	d004      	beq.n	e072 <crc32_recalculate+0x7e>
		if (crc & 1) {
    e068:	4218      	tst	r0, r3
    e06a:	d0f9      	beq.n	e060 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    e06c:	085b      	lsrs	r3, r3, #1
    e06e:	4063      	eors	r3, r4
    e070:	e7f7      	b.n	e062 <crc32_recalculate+0x6e>
    e072:	3604      	adds	r6, #4
		while (temp_length--) {
    e074:	3d01      	subs	r5, #1
    e076:	d303      	bcc.n	e080 <crc32_recalculate+0x8c>
	crc ^= data;
    e078:	6831      	ldr	r1, [r6, #0]
    e07a:	404b      	eors	r3, r1
    e07c:	2120      	movs	r1, #32
    e07e:	e7f3      	b.n	e068 <crc32_recalculate+0x74>
    e080:	4641      	mov	r1, r8
    e082:	0089      	lsls	r1, r1, #2
    e084:	187f      	adds	r7, r7, r1
		length -= temp_length;
    e086:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    e088:	2900      	cmp	r1, #0
    e08a:	d017      	beq.n	e0bc <crc32_recalculate+0xc8>
		word = *word_ptr;
    e08c:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    e08e:	00c8      	lsls	r0, r1, #3
    e090:	4240      	negs	r0, r0
    e092:	3020      	adds	r0, #32
    e094:	2501      	movs	r5, #1
    e096:	426d      	negs	r5, r5
    e098:	40c5      	lsrs	r5, r0
    e09a:	0028      	movs	r0, r5
    e09c:	4020      	ands	r0, r4
	crc ^= data;
    e09e:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    e0a0:	00c9      	lsls	r1, r1, #3
    e0a2:	d00b      	beq.n	e0bc <crc32_recalculate+0xc8>
		if (crc & 1) {
    e0a4:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    e0a6:	4c08      	ldr	r4, [pc, #32]	; (e0c8 <crc32_recalculate+0xd4>)
    e0a8:	e003      	b.n	e0b2 <crc32_recalculate+0xbe>
			crc >>= 1;
    e0aa:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    e0ac:	3901      	subs	r1, #1
    e0ae:	2900      	cmp	r1, #0
    e0b0:	d004      	beq.n	e0bc <crc32_recalculate+0xc8>
		if (crc & 1) {
    e0b2:	4218      	tst	r0, r3
    e0b4:	d0f9      	beq.n	e0aa <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    e0b6:	085b      	lsrs	r3, r3, #1
    e0b8:	4063      	eors	r3, r4
    e0ba:	e7f7      	b.n	e0ac <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    e0bc:	43db      	mvns	r3, r3
    e0be:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    e0c0:	2000      	movs	r0, #0
    e0c2:	bc04      	pop	{r2}
    e0c4:	4690      	mov	r8, r2
    e0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0c8:	edb88320 	.word	0xedb88320

0000e0cc <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    e0cc:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    e0ce:	2301      	movs	r3, #1
    e0d0:	2800      	cmp	r0, #0
    e0d2:	d001      	beq.n	e0d8 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    e0d4:	0018      	movs	r0, r3
    e0d6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    e0d8:	4b01      	ldr	r3, [pc, #4]	; (e0e0 <mem_test_unit_ready+0x14>)
    e0da:	4798      	blx	r3
    e0dc:	0003      	movs	r3, r0
    e0de:	e7f9      	b.n	e0d4 <mem_test_unit_ready+0x8>
    e0e0:	0000a5bd 	.word	0x0000a5bd

0000e0e4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    e0e4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    e0e6:	2301      	movs	r3, #1
    e0e8:	2800      	cmp	r0, #0
    e0ea:	d001      	beq.n	e0f0 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    e0ec:	0018      	movs	r0, r3
    e0ee:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    e0f0:	0008      	movs	r0, r1
    e0f2:	4b02      	ldr	r3, [pc, #8]	; (e0fc <mem_read_capacity+0x18>)
    e0f4:	4798      	blx	r3
    e0f6:	0003      	movs	r3, r0
    e0f8:	e7f8      	b.n	e0ec <mem_read_capacity+0x8>
    e0fa:	46c0      	nop			; (mov r8, r8)
    e0fc:	0000a5ed 	.word	0x0000a5ed

0000e100 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    e100:	4243      	negs	r3, r0
    e102:	4158      	adcs	r0, r3
    e104:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    e106:	4770      	bx	lr

0000e108 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    e108:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    e10a:	2301      	movs	r3, #1
    e10c:	2800      	cmp	r0, #0
    e10e:	d001      	beq.n	e114 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    e110:	0018      	movs	r0, r3
    e112:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    e114:	4b01      	ldr	r3, [pc, #4]	; (e11c <mem_wr_protect+0x14>)
    e116:	4798      	blx	r3
    e118:	0003      	movs	r3, r0
    e11a:	e7f9      	b.n	e110 <mem_wr_protect+0x8>
    e11c:	0000a5fd 	.word	0x0000a5fd

0000e120 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    e120:	b510      	push	{r4, lr}
    e122:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    e124:	2301      	movs	r3, #1
    e126:	2800      	cmp	r0, #0
    e128:	d001      	beq.n	e12e <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    e12a:	0018      	movs	r0, r3
    e12c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    e12e:	0011      	movs	r1, r2
    e130:	0020      	movs	r0, r4
    e132:	4b02      	ldr	r3, [pc, #8]	; (e13c <memory_2_ram+0x1c>)
    e134:	4798      	blx	r3
    e136:	0003      	movs	r3, r0
    e138:	e7f7      	b.n	e12a <memory_2_ram+0xa>
    e13a:	46c0      	nop			; (mov r8, r8)
    e13c:	0000a651 	.word	0x0000a651

0000e140 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    e140:	b510      	push	{r4, lr}
    e142:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    e144:	2301      	movs	r3, #1
    e146:	2800      	cmp	r0, #0
    e148:	d001      	beq.n	e14e <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    e14a:	0018      	movs	r0, r3
    e14c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    e14e:	0011      	movs	r1, r2
    e150:	0020      	movs	r0, r4
    e152:	4b02      	ldr	r3, [pc, #8]	; (e15c <ram_2_memory+0x1c>)
    e154:	4798      	blx	r3
    e156:	0003      	movs	r3, r0
    e158:	e7f7      	b.n	e14a <ram_2_memory+0xa>
    e15a:	46c0      	nop			; (mov r8, r8)
    e15c:	0000a6a9 	.word	0x0000a6a9

0000e160 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    e160:	4b0c      	ldr	r3, [pc, #48]	; (e194 <cpu_irq_enter_critical+0x34>)
    e162:	681b      	ldr	r3, [r3, #0]
    e164:	2b00      	cmp	r3, #0
    e166:	d106      	bne.n	e176 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    e168:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    e16c:	2b00      	cmp	r3, #0
    e16e:	d007      	beq.n	e180 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    e170:	2200      	movs	r2, #0
    e172:	4b09      	ldr	r3, [pc, #36]	; (e198 <cpu_irq_enter_critical+0x38>)
    e174:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    e176:	4a07      	ldr	r2, [pc, #28]	; (e194 <cpu_irq_enter_critical+0x34>)
    e178:	6813      	ldr	r3, [r2, #0]
    e17a:	3301      	adds	r3, #1
    e17c:	6013      	str	r3, [r2, #0]
}
    e17e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    e180:	b672      	cpsid	i
    e182:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    e186:	2200      	movs	r2, #0
    e188:	4b04      	ldr	r3, [pc, #16]	; (e19c <cpu_irq_enter_critical+0x3c>)
    e18a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    e18c:	3201      	adds	r2, #1
    e18e:	4b02      	ldr	r3, [pc, #8]	; (e198 <cpu_irq_enter_critical+0x38>)
    e190:	701a      	strb	r2, [r3, #0]
    e192:	e7f0      	b.n	e176 <cpu_irq_enter_critical+0x16>
    e194:	200003f4 	.word	0x200003f4
    e198:	200003f8 	.word	0x200003f8
    e19c:	2000000e 	.word	0x2000000e

0000e1a0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    e1a0:	4b08      	ldr	r3, [pc, #32]	; (e1c4 <cpu_irq_leave_critical+0x24>)
    e1a2:	681a      	ldr	r2, [r3, #0]
    e1a4:	3a01      	subs	r2, #1
    e1a6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    e1a8:	681b      	ldr	r3, [r3, #0]
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	d109      	bne.n	e1c2 <cpu_irq_leave_critical+0x22>
    e1ae:	4b06      	ldr	r3, [pc, #24]	; (e1c8 <cpu_irq_leave_critical+0x28>)
    e1b0:	781b      	ldrb	r3, [r3, #0]
    e1b2:	2b00      	cmp	r3, #0
    e1b4:	d005      	beq.n	e1c2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    e1b6:	2201      	movs	r2, #1
    e1b8:	4b04      	ldr	r3, [pc, #16]	; (e1cc <cpu_irq_leave_critical+0x2c>)
    e1ba:	701a      	strb	r2, [r3, #0]
    e1bc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e1c0:	b662      	cpsie	i
	}
}
    e1c2:	4770      	bx	lr
    e1c4:	200003f4 	.word	0x200003f4
    e1c8:	200003f8 	.word	0x200003f8
    e1cc:	2000000e 	.word	0x2000000e

0000e1d0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    e1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1d2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    e1d4:	ac01      	add	r4, sp, #4
    e1d6:	2501      	movs	r5, #1
    e1d8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    e1da:	2700      	movs	r7, #0
    e1dc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    e1de:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    e1e0:	0021      	movs	r1, r4
    e1e2:	2017      	movs	r0, #23
    e1e4:	4e06      	ldr	r6, [pc, #24]	; (e200 <system_board_init+0x30>)
    e1e6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    e1e8:	2280      	movs	r2, #128	; 0x80
    e1ea:	0412      	lsls	r2, r2, #16
    e1ec:	4b05      	ldr	r3, [pc, #20]	; (e204 <system_board_init+0x34>)
    e1ee:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    e1f0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    e1f2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    e1f4:	0021      	movs	r1, r4
    e1f6:	2037      	movs	r0, #55	; 0x37
    e1f8:	47b0      	blx	r6
}
    e1fa:	b003      	add	sp, #12
    e1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1fe:	46c0      	nop			; (mov r8, r8)
    e200:	0000e605 	.word	0x0000e605
    e204:	41004400 	.word	0x41004400

0000e208 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    e208:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    e20a:	2a00      	cmp	r2, #0
    e20c:	d001      	beq.n	e212 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    e20e:	0018      	movs	r0, r3
    e210:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    e212:	008b      	lsls	r3, r1, #2
    e214:	4a06      	ldr	r2, [pc, #24]	; (e230 <extint_register_callback+0x28>)
    e216:	589b      	ldr	r3, [r3, r2]
    e218:	2b00      	cmp	r3, #0
    e21a:	d003      	beq.n	e224 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    e21c:	4283      	cmp	r3, r0
    e21e:	d005      	beq.n	e22c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    e220:	231d      	movs	r3, #29
    e222:	e7f4      	b.n	e20e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    e224:	0089      	lsls	r1, r1, #2
    e226:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    e228:	2300      	movs	r3, #0
    e22a:	e7f0      	b.n	e20e <extint_register_callback+0x6>
		return STATUS_OK;
    e22c:	2300      	movs	r3, #0
    e22e:	e7ee      	b.n	e20e <extint_register_callback+0x6>
    e230:	20001090 	.word	0x20001090

0000e234 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    e234:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    e236:	2900      	cmp	r1, #0
    e238:	d001      	beq.n	e23e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    e23a:	0018      	movs	r0, r3
    e23c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    e23e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    e240:	281f      	cmp	r0, #31
    e242:	d800      	bhi.n	e246 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    e244:	4a02      	ldr	r2, [pc, #8]	; (e250 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    e246:	2301      	movs	r3, #1
    e248:	4083      	lsls	r3, r0
    e24a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    e24c:	2300      	movs	r3, #0
    e24e:	e7f4      	b.n	e23a <extint_chan_enable_callback+0x6>
    e250:	40001800 	.word	0x40001800

0000e254 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    e254:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    e256:	2900      	cmp	r1, #0
    e258:	d001      	beq.n	e25e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    e25a:	0018      	movs	r0, r3
    e25c:	4770      	bx	lr
		return NULL;
    e25e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    e260:	281f      	cmp	r0, #31
    e262:	d800      	bhi.n	e266 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    e264:	4a02      	ldr	r2, [pc, #8]	; (e270 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    e266:	2301      	movs	r3, #1
    e268:	4083      	lsls	r3, r0
    e26a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    e26c:	2300      	movs	r3, #0
    e26e:	e7f4      	b.n	e25a <extint_chan_disable_callback+0x6>
    e270:	40001800 	.word	0x40001800

0000e274 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    e274:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    e276:	2200      	movs	r2, #0
    e278:	4b10      	ldr	r3, [pc, #64]	; (e2bc <EIC_Handler+0x48>)
    e27a:	701a      	strb	r2, [r3, #0]
    e27c:	2300      	movs	r3, #0
    e27e:	4910      	ldr	r1, [pc, #64]	; (e2c0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    e280:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    e282:	4e10      	ldr	r6, [pc, #64]	; (e2c4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    e284:	4c0d      	ldr	r4, [pc, #52]	; (e2bc <EIC_Handler+0x48>)
    e286:	e00a      	b.n	e29e <EIC_Handler+0x2a>
		return eics[eic_index];
    e288:	490d      	ldr	r1, [pc, #52]	; (e2c0 <EIC_Handler+0x4c>)
    e28a:	e008      	b.n	e29e <EIC_Handler+0x2a>
    e28c:	7823      	ldrb	r3, [r4, #0]
    e28e:	3301      	adds	r3, #1
    e290:	b2db      	uxtb	r3, r3
    e292:	7023      	strb	r3, [r4, #0]
    e294:	2b0f      	cmp	r3, #15
    e296:	d810      	bhi.n	e2ba <EIC_Handler+0x46>
		return NULL;
    e298:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    e29a:	2b1f      	cmp	r3, #31
    e29c:	d9f4      	bls.n	e288 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    e29e:	0028      	movs	r0, r5
    e2a0:	4018      	ands	r0, r3
    e2a2:	2201      	movs	r2, #1
    e2a4:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    e2a6:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    e2a8:	4210      	tst	r0, r2
    e2aa:	d0ef      	beq.n	e28c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    e2ac:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    e2ae:	009b      	lsls	r3, r3, #2
    e2b0:	599b      	ldr	r3, [r3, r6]
    e2b2:	2b00      	cmp	r3, #0
    e2b4:	d0ea      	beq.n	e28c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    e2b6:	4798      	blx	r3
    e2b8:	e7e8      	b.n	e28c <EIC_Handler+0x18>
			}
		}
	}
}
    e2ba:	bd70      	pop	{r4, r5, r6, pc}
    e2bc:	2000108c 	.word	0x2000108c
    e2c0:	40001800 	.word	0x40001800
    e2c4:	20001090 	.word	0x20001090

0000e2c8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    e2c8:	4a04      	ldr	r2, [pc, #16]	; (e2dc <_extint_enable+0x14>)
    e2ca:	7813      	ldrb	r3, [r2, #0]
    e2cc:	2102      	movs	r1, #2
    e2ce:	430b      	orrs	r3, r1
    e2d0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    e2d2:	7853      	ldrb	r3, [r2, #1]
    e2d4:	b25b      	sxtb	r3, r3
    e2d6:	2b00      	cmp	r3, #0
    e2d8:	dbfb      	blt.n	e2d2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    e2da:	4770      	bx	lr
    e2dc:	40001800 	.word	0x40001800

0000e2e0 <_system_extint_init>:
{
    e2e0:	b500      	push	{lr}
    e2e2:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    e2e4:	4a12      	ldr	r2, [pc, #72]	; (e330 <_system_extint_init+0x50>)
    e2e6:	6993      	ldr	r3, [r2, #24]
    e2e8:	2140      	movs	r1, #64	; 0x40
    e2ea:	430b      	orrs	r3, r1
    e2ec:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    e2ee:	a901      	add	r1, sp, #4
    e2f0:	2300      	movs	r3, #0
    e2f2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    e2f4:	2005      	movs	r0, #5
    e2f6:	4b0f      	ldr	r3, [pc, #60]	; (e334 <_system_extint_init+0x54>)
    e2f8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    e2fa:	2005      	movs	r0, #5
    e2fc:	4b0e      	ldr	r3, [pc, #56]	; (e338 <_system_extint_init+0x58>)
    e2fe:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    e300:	4a0e      	ldr	r2, [pc, #56]	; (e33c <_system_extint_init+0x5c>)
    e302:	7813      	ldrb	r3, [r2, #0]
    e304:	2101      	movs	r1, #1
    e306:	430b      	orrs	r3, r1
    e308:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    e30a:	7853      	ldrb	r3, [r2, #1]
    e30c:	b25b      	sxtb	r3, r3
    e30e:	2b00      	cmp	r3, #0
    e310:	dbfb      	blt.n	e30a <_system_extint_init+0x2a>
    e312:	4b0b      	ldr	r3, [pc, #44]	; (e340 <_system_extint_init+0x60>)
    e314:	0019      	movs	r1, r3
    e316:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    e318:	2200      	movs	r2, #0
    e31a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    e31c:	4299      	cmp	r1, r3
    e31e:	d1fc      	bne.n	e31a <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    e320:	2210      	movs	r2, #16
    e322:	4b08      	ldr	r3, [pc, #32]	; (e344 <_system_extint_init+0x64>)
    e324:	601a      	str	r2, [r3, #0]
	_extint_enable();
    e326:	4b08      	ldr	r3, [pc, #32]	; (e348 <_system_extint_init+0x68>)
    e328:	4798      	blx	r3
}
    e32a:	b003      	add	sp, #12
    e32c:	bd00      	pop	{pc}
    e32e:	46c0      	nop			; (mov r8, r8)
    e330:	40000400 	.word	0x40000400
    e334:	0000ff59 	.word	0x0000ff59
    e338:	0000fecd 	.word	0x0000fecd
    e33c:	40001800 	.word	0x40001800
    e340:	20001090 	.word	0x20001090
    e344:	e000e100 	.word	0xe000e100
    e348:	0000e2c9 	.word	0x0000e2c9

0000e34c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    e34c:	2300      	movs	r3, #0
    e34e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    e350:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    e352:	2201      	movs	r2, #1
    e354:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    e356:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    e358:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    e35a:	3302      	adds	r3, #2
    e35c:	72c3      	strb	r3, [r0, #11]
}
    e35e:	4770      	bx	lr

0000e360 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    e360:	b5f0      	push	{r4, r5, r6, r7, lr}
    e362:	b083      	sub	sp, #12
    e364:	0005      	movs	r5, r0
    e366:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    e368:	a901      	add	r1, sp, #4
    e36a:	2300      	movs	r3, #0
    e36c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    e36e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    e370:	7923      	ldrb	r3, [r4, #4]
    e372:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    e374:	7a23      	ldrb	r3, [r4, #8]
    e376:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    e378:	7820      	ldrb	r0, [r4, #0]
    e37a:	4b15      	ldr	r3, [pc, #84]	; (e3d0 <extint_chan_set_config+0x70>)
    e37c:	4798      	blx	r3
		return NULL;
    e37e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    e380:	2d1f      	cmp	r5, #31
    e382:	d800      	bhi.n	e386 <extint_chan_set_config+0x26>
		return eics[eic_index];
    e384:	4813      	ldr	r0, [pc, #76]	; (e3d4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    e386:	2207      	movs	r2, #7
    e388:	402a      	ands	r2, r5
    e38a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    e38c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    e38e:	7aa3      	ldrb	r3, [r4, #10]
    e390:	2b00      	cmp	r3, #0
    e392:	d001      	beq.n	e398 <extint_chan_set_config+0x38>
    e394:	2308      	movs	r3, #8
    e396:	431f      	orrs	r7, r3
    e398:	08eb      	lsrs	r3, r5, #3
    e39a:	009b      	lsls	r3, r3, #2
    e39c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    e39e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    e3a0:	260f      	movs	r6, #15
    e3a2:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    e3a4:	43b1      	bics	r1, r6
			(new_config << config_pos);
    e3a6:	4097      	lsls	r7, r2
    e3a8:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    e3aa:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    e3ac:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    e3ae:	7a63      	ldrb	r3, [r4, #9]
    e3b0:	2b00      	cmp	r3, #0
    e3b2:	d106      	bne.n	e3c2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    e3b4:	6943      	ldr	r3, [r0, #20]
    e3b6:	2201      	movs	r2, #1
    e3b8:	40aa      	lsls	r2, r5
    e3ba:	4393      	bics	r3, r2
    e3bc:	6143      	str	r3, [r0, #20]
	}
}
    e3be:	b003      	add	sp, #12
    e3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    e3c2:	6942      	ldr	r2, [r0, #20]
    e3c4:	2301      	movs	r3, #1
    e3c6:	40ab      	lsls	r3, r5
    e3c8:	4313      	orrs	r3, r2
    e3ca:	6143      	str	r3, [r0, #20]
    e3cc:	e7f7      	b.n	e3be <extint_chan_set_config+0x5e>
    e3ce:	46c0      	nop			; (mov r8, r8)
    e3d0:	00010051 	.word	0x00010051
    e3d4:	40001800 	.word	0x40001800

0000e3d8 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    e3d8:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    e3da:	4a1e      	ldr	r2, [pc, #120]	; (e454 <nvm_set_config+0x7c>)
    e3dc:	69d3      	ldr	r3, [r2, #28]
    e3de:	2104      	movs	r1, #4
    e3e0:	430b      	orrs	r3, r1
    e3e2:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e3e4:	4b1c      	ldr	r3, [pc, #112]	; (e458 <nvm_set_config+0x80>)
    e3e6:	2220      	movs	r2, #32
    e3e8:	32ff      	adds	r2, #255	; 0xff
    e3ea:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    e3ec:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    e3ee:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    e3f0:	07d2      	lsls	r2, r2, #31
    e3f2:	d401      	bmi.n	e3f8 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    e3f4:	0018      	movs	r0, r3
    e3f6:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    e3f8:	7803      	ldrb	r3, [r0, #0]
    e3fa:	021b      	lsls	r3, r3, #8
    e3fc:	22c0      	movs	r2, #192	; 0xc0
    e3fe:	0092      	lsls	r2, r2, #2
    e400:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    e402:	7841      	ldrb	r1, [r0, #1]
    e404:	01c9      	lsls	r1, r1, #7
    e406:	22ff      	movs	r2, #255	; 0xff
    e408:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    e40a:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    e40c:	7881      	ldrb	r1, [r0, #2]
    e40e:	0049      	lsls	r1, r1, #1
    e410:	221e      	movs	r2, #30
    e412:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    e414:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    e416:	78c2      	ldrb	r2, [r0, #3]
    e418:	0492      	lsls	r2, r2, #18
    e41a:	2180      	movs	r1, #128	; 0x80
    e41c:	02c9      	lsls	r1, r1, #11
    e41e:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    e420:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    e422:	7902      	ldrb	r2, [r0, #4]
    e424:	0412      	lsls	r2, r2, #16
    e426:	21c0      	movs	r1, #192	; 0xc0
    e428:	0289      	lsls	r1, r1, #10
    e42a:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    e42c:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    e42e:	4a0a      	ldr	r2, [pc, #40]	; (e458 <nvm_set_config+0x80>)
    e430:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    e432:	6893      	ldr	r3, [r2, #8]
    e434:	035b      	lsls	r3, r3, #13
    e436:	0f5b      	lsrs	r3, r3, #29
    e438:	4908      	ldr	r1, [pc, #32]	; (e45c <nvm_set_config+0x84>)
    e43a:	2408      	movs	r4, #8
    e43c:	409c      	lsls	r4, r3
    e43e:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    e440:	6893      	ldr	r3, [r2, #8]
    e442:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    e444:	7843      	ldrb	r3, [r0, #1]
    e446:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    e448:	8b13      	ldrh	r3, [r2, #24]
    e44a:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    e44c:	0fdb      	lsrs	r3, r3, #31
    e44e:	011b      	lsls	r3, r3, #4
    e450:	e7d0      	b.n	e3f4 <nvm_set_config+0x1c>
    e452:	46c0      	nop			; (mov r8, r8)
    e454:	40000400 	.word	0x40000400
    e458:	41004000 	.word	0x41004000
    e45c:	200003fc 	.word	0x200003fc

0000e460 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    e460:	b530      	push	{r4, r5, lr}
    e462:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    e464:	4a22      	ldr	r2, [pc, #136]	; (e4f0 <nvm_execute_command+0x90>)
    e466:	8810      	ldrh	r0, [r2, #0]
    e468:	8853      	ldrh	r3, [r2, #2]
    e46a:	4343      	muls	r3, r0
    e46c:	428b      	cmp	r3, r1
    e46e:	d206      	bcs.n	e47e <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    e470:	2280      	movs	r2, #128	; 0x80
    e472:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    e474:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    e476:	4b1f      	ldr	r3, [pc, #124]	; (e4f4 <nvm_execute_command+0x94>)
    e478:	18cb      	adds	r3, r1, r3
    e47a:	4293      	cmp	r3, r2
    e47c:	d80e      	bhi.n	e49c <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    e47e:	4b1e      	ldr	r3, [pc, #120]	; (e4f8 <nvm_execute_command+0x98>)
    e480:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    e482:	2280      	movs	r2, #128	; 0x80
    e484:	02d2      	lsls	r2, r2, #11
    e486:	432a      	orrs	r2, r5
    e488:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e48a:	2220      	movs	r2, #32
    e48c:	32ff      	adds	r2, #255	; 0xff
    e48e:	831a      	strh	r2, [r3, #24]
    e490:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    e492:	07db      	lsls	r3, r3, #31
    e494:	d403      	bmi.n	e49e <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    e496:	4b18      	ldr	r3, [pc, #96]	; (e4f8 <nvm_execute_command+0x98>)
    e498:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    e49a:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    e49c:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    e49e:	2c45      	cmp	r4, #69	; 0x45
    e4a0:	d822      	bhi.n	e4e8 <nvm_execute_command+0x88>
    e4a2:	00a3      	lsls	r3, r4, #2
    e4a4:	4a15      	ldr	r2, [pc, #84]	; (e4fc <nvm_execute_command+0x9c>)
    e4a6:	58d3      	ldr	r3, [r2, r3]
    e4a8:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    e4aa:	4b13      	ldr	r3, [pc, #76]	; (e4f8 <nvm_execute_command+0x98>)
    e4ac:	8b1b      	ldrh	r3, [r3, #24]
    e4ae:	05db      	lsls	r3, r3, #23
    e4b0:	d503      	bpl.n	e4ba <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    e4b2:	4b11      	ldr	r3, [pc, #68]	; (e4f8 <nvm_execute_command+0x98>)
    e4b4:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    e4b6:	2010      	movs	r0, #16
    e4b8:	e7f0      	b.n	e49c <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    e4ba:	0889      	lsrs	r1, r1, #2
    e4bc:	0049      	lsls	r1, r1, #1
    e4be:	4b0e      	ldr	r3, [pc, #56]	; (e4f8 <nvm_execute_command+0x98>)
    e4c0:	61d9      	str	r1, [r3, #28]
			break;
    e4c2:	e003      	b.n	e4cc <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    e4c4:	0889      	lsrs	r1, r1, #2
    e4c6:	0049      	lsls	r1, r1, #1
    e4c8:	4b0b      	ldr	r3, [pc, #44]	; (e4f8 <nvm_execute_command+0x98>)
    e4ca:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    e4cc:	20a5      	movs	r0, #165	; 0xa5
    e4ce:	0200      	lsls	r0, r0, #8
    e4d0:	4304      	orrs	r4, r0
    e4d2:	4b09      	ldr	r3, [pc, #36]	; (e4f8 <nvm_execute_command+0x98>)
    e4d4:	801c      	strh	r4, [r3, #0]
    e4d6:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    e4d8:	2201      	movs	r2, #1
    e4da:	7d0b      	ldrb	r3, [r1, #20]
    e4dc:	4213      	tst	r3, r2
    e4de:	d0fc      	beq.n	e4da <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    e4e0:	4b05      	ldr	r3, [pc, #20]	; (e4f8 <nvm_execute_command+0x98>)
    e4e2:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    e4e4:	2000      	movs	r0, #0
    e4e6:	e7d9      	b.n	e49c <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    e4e8:	4b03      	ldr	r3, [pc, #12]	; (e4f8 <nvm_execute_command+0x98>)
    e4ea:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    e4ec:	2017      	movs	r0, #23
    e4ee:	e7d5      	b.n	e49c <nvm_execute_command+0x3c>
    e4f0:	200003fc 	.word	0x200003fc
    e4f4:	ff7fc000 	.word	0xff7fc000
    e4f8:	41004000 	.word	0x41004000
    e4fc:	0001975c 	.word	0x0001975c

0000e500 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    e500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    e502:	4b25      	ldr	r3, [pc, #148]	; (e598 <nvm_write_buffer+0x98>)
    e504:	881d      	ldrh	r5, [r3, #0]
    e506:	885b      	ldrh	r3, [r3, #2]
    e508:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    e50a:	2418      	movs	r4, #24
	if (destination_address >
    e50c:	4283      	cmp	r3, r0
    e50e:	d201      	bcs.n	e514 <nvm_write_buffer+0x14>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}
	return STATUS_OK;
}
    e510:	0020      	movs	r0, r4
    e512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    e514:	1e6b      	subs	r3, r5, #1
    e516:	4218      	tst	r0, r3
    e518:	d1fa      	bne.n	e510 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    e51a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    e51c:	4295      	cmp	r5, r2
    e51e:	d3f7      	bcc.n	e510 <nvm_write_buffer+0x10>
    e520:	4b1e      	ldr	r3, [pc, #120]	; (e59c <nvm_write_buffer+0x9c>)
    e522:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    e524:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    e526:	07db      	lsls	r3, r3, #31
    e528:	d5f2      	bpl.n	e510 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    e52a:	4c1d      	ldr	r4, [pc, #116]	; (e5a0 <nvm_write_buffer+0xa0>)
    e52c:	4b1b      	ldr	r3, [pc, #108]	; (e59c <nvm_write_buffer+0x9c>)
    e52e:	801c      	strh	r4, [r3, #0]
    e530:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    e532:	2401      	movs	r4, #1
    e534:	7d2b      	ldrb	r3, [r5, #20]
    e536:	4223      	tst	r3, r4
    e538:	d0fc      	beq.n	e534 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e53a:	2420      	movs	r4, #32
    e53c:	34ff      	adds	r4, #255	; 0xff
    e53e:	4b17      	ldr	r3, [pc, #92]	; (e59c <nvm_write_buffer+0x9c>)
    e540:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    e542:	2a00      	cmp	r2, #0
    e544:	d022      	beq.n	e58c <nvm_write_buffer+0x8c>
    e546:	2301      	movs	r3, #1
    e548:	0005      	movs	r5, r0
    e54a:	439d      	bics	r5, r3
    e54c:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    e54e:	1e57      	subs	r7, r2, #1
    e550:	e009      	b.n	e566 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    e552:	18ce      	adds	r6, r1, r3
    e554:	7876      	ldrb	r6, [r6, #1]
    e556:	0236      	lsls	r6, r6, #8
    e558:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    e55a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    e55c:	3302      	adds	r3, #2
    e55e:	b29b      	uxth	r3, r3
    e560:	3502      	adds	r5, #2
    e562:	429a      	cmp	r2, r3
    e564:	d904      	bls.n	e570 <nvm_write_buffer+0x70>
		data = buffer[i];
    e566:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    e568:	42bb      	cmp	r3, r7
    e56a:	dbf2      	blt.n	e552 <nvm_write_buffer+0x52>
		data = buffer[i];
    e56c:	b2a4      	uxth	r4, r4
    e56e:	e7f4      	b.n	e55a <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    e570:	4b09      	ldr	r3, [pc, #36]	; (e598 <nvm_write_buffer+0x98>)
    e572:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    e574:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    e576:	2b00      	cmp	r3, #0
    e578:	d1ca      	bne.n	e510 <nvm_write_buffer+0x10>
    e57a:	2a3f      	cmp	r2, #63	; 0x3f
    e57c:	d8c8      	bhi.n	e510 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    e57e:	2200      	movs	r2, #0
    e580:	0001      	movs	r1, r0
    e582:	2004      	movs	r0, #4
    e584:	4b07      	ldr	r3, [pc, #28]	; (e5a4 <nvm_write_buffer+0xa4>)
    e586:	4798      	blx	r3
    e588:	0004      	movs	r4, r0
    e58a:	e7c1      	b.n	e510 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    e58c:	4b02      	ldr	r3, [pc, #8]	; (e598 <nvm_write_buffer+0x98>)
    e58e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    e590:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    e592:	2b00      	cmp	r3, #0
    e594:	d0f3      	beq.n	e57e <nvm_write_buffer+0x7e>
    e596:	e7bb      	b.n	e510 <nvm_write_buffer+0x10>
    e598:	200003fc 	.word	0x200003fc
    e59c:	41004000 	.word	0x41004000
    e5a0:	ffffa544 	.word	0xffffa544
    e5a4:	0000e461 	.word	0x0000e461

0000e5a8 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    e5a8:	4b13      	ldr	r3, [pc, #76]	; (e5f8 <nvm_erase_row+0x50>)
    e5aa:	881a      	ldrh	r2, [r3, #0]
    e5ac:	885b      	ldrh	r3, [r3, #2]
    e5ae:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    e5b0:	2118      	movs	r1, #24
	if (row_address >
    e5b2:	4283      	cmp	r3, r0
    e5b4:	d201      	bcs.n	e5ba <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    e5b6:	0008      	movs	r0, r1
    e5b8:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    e5ba:	0092      	lsls	r2, r2, #2
    e5bc:	3a01      	subs	r2, #1
    e5be:	4210      	tst	r0, r2
    e5c0:	d1f9      	bne.n	e5b6 <nvm_erase_row+0xe>
    e5c2:	4b0e      	ldr	r3, [pc, #56]	; (e5fc <nvm_erase_row+0x54>)
    e5c4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    e5c6:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    e5c8:	07db      	lsls	r3, r3, #31
    e5ca:	d5f4      	bpl.n	e5b6 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    e5cc:	4b0b      	ldr	r3, [pc, #44]	; (e5fc <nvm_erase_row+0x54>)
    e5ce:	2220      	movs	r2, #32
    e5d0:	32ff      	adds	r2, #255	; 0xff
    e5d2:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    e5d4:	0880      	lsrs	r0, r0, #2
    e5d6:	0040      	lsls	r0, r0, #1
    e5d8:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    e5da:	4a09      	ldr	r2, [pc, #36]	; (e600 <nvm_erase_row+0x58>)
    e5dc:	801a      	strh	r2, [r3, #0]
    e5de:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    e5e0:	2201      	movs	r2, #1
    e5e2:	7d0b      	ldrb	r3, [r1, #20]
    e5e4:	4213      	tst	r3, r2
    e5e6:	d0fc      	beq.n	e5e2 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    e5e8:	4b04      	ldr	r3, [pc, #16]	; (e5fc <nvm_erase_row+0x54>)
    e5ea:	8b19      	ldrh	r1, [r3, #24]
    e5ec:	201c      	movs	r0, #28
    e5ee:	4001      	ands	r1, r0
	return STATUS_OK;
    e5f0:	1e48      	subs	r0, r1, #1
    e5f2:	4181      	sbcs	r1, r0
    e5f4:	0089      	lsls	r1, r1, #2
    e5f6:	e7de      	b.n	e5b6 <nvm_erase_row+0xe>
    e5f8:	200003fc 	.word	0x200003fc
    e5fc:	41004000 	.word	0x41004000
    e600:	ffffa502 	.word	0xffffa502

0000e604 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    e604:	b500      	push	{lr}
    e606:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    e608:	ab01      	add	r3, sp, #4
    e60a:	2280      	movs	r2, #128	; 0x80
    e60c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    e60e:	780a      	ldrb	r2, [r1, #0]
    e610:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    e612:	784a      	ldrb	r2, [r1, #1]
    e614:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    e616:	788a      	ldrb	r2, [r1, #2]
    e618:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    e61a:	0019      	movs	r1, r3
    e61c:	4b01      	ldr	r3, [pc, #4]	; (e624 <port_pin_set_config+0x20>)
    e61e:	4798      	blx	r3
}
    e620:	b003      	add	sp, #12
    e622:	bd00      	pop	{pc}
    e624:	00010051 	.word	0x00010051

0000e628 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    e628:	6801      	ldr	r1, [r0, #0]
    e62a:	2208      	movs	r2, #8
    e62c:	4b05      	ldr	r3, [pc, #20]	; (e644 <rtc_calendar_enable+0x1c>)
    e62e:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    e630:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    e632:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    e634:	b25b      	sxtb	r3, r3
    e636:	2b00      	cmp	r3, #0
    e638:	dbfb      	blt.n	e632 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    e63a:	880b      	ldrh	r3, [r1, #0]
    e63c:	2202      	movs	r2, #2
    e63e:	4313      	orrs	r3, r2
    e640:	800b      	strh	r3, [r1, #0]
}
    e642:	4770      	bx	lr
    e644:	e000e100 	.word	0xe000e100

0000e648 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    e648:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    e64a:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    e64c:	2408      	movs	r4, #8
    e64e:	2380      	movs	r3, #128	; 0x80
    e650:	4907      	ldr	r1, [pc, #28]	; (e670 <rtc_calendar_disable+0x28>)
    e652:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    e654:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    e656:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    e658:	b25b      	sxtb	r3, r3
    e65a:	2b00      	cmp	r3, #0
    e65c:	dbfb      	blt.n	e656 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    e65e:	23c1      	movs	r3, #193	; 0xc1
    e660:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    e662:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    e664:	8813      	ldrh	r3, [r2, #0]
    e666:	2102      	movs	r1, #2
    e668:	438b      	bics	r3, r1
    e66a:	8013      	strh	r3, [r2, #0]
}
    e66c:	bd10      	pop	{r4, pc}
    e66e:	46c0      	nop			; (mov r8, r8)
    e670:	e000e100 	.word	0xe000e100

0000e674 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    e674:	b570      	push	{r4, r5, r6, lr}
    e676:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    e678:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    e67a:	4b07      	ldr	r3, [pc, #28]	; (e698 <rtc_calendar_reset+0x24>)
    e67c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    e67e:	2300      	movs	r3, #0
    e680:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    e682:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    e684:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    e686:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    e688:	b25b      	sxtb	r3, r3
    e68a:	2b00      	cmp	r3, #0
    e68c:	dbfb      	blt.n	e686 <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    e68e:	882b      	ldrh	r3, [r5, #0]
    e690:	2201      	movs	r2, #1
    e692:	4313      	orrs	r3, r2
    e694:	802b      	strh	r3, [r5, #0]
}
    e696:	bd70      	pop	{r4, r5, r6, pc}
    e698:	0000e649 	.word	0x0000e649

0000e69c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    e69c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    e69e:	88cb      	ldrh	r3, [r1, #6]
    e6a0:	88c2      	ldrh	r2, [r0, #6]
    e6a2:	1a9a      	subs	r2, r3, r2
    e6a4:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    e6a6:	794b      	ldrb	r3, [r1, #5]
    e6a8:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    e6aa:	790c      	ldrb	r4, [r1, #4]
    e6ac:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    e6ae:	4323      	orrs	r3, r4
    e6b0:	788c      	ldrb	r4, [r1, #2]
    e6b2:	0324      	lsls	r4, r4, #12
    e6b4:	4323      	orrs	r3, r4
    e6b6:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    e6b8:	7902      	ldrb	r2, [r0, #4]
    e6ba:	2a00      	cmp	r2, #0
    e6bc:	d105      	bne.n	e6ca <rtc_calendar_time_to_register_value+0x2e>
    e6be:	78ca      	ldrb	r2, [r1, #3]
    e6c0:	2a00      	cmp	r2, #0
    e6c2:	d002      	beq.n	e6ca <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    e6c4:	2280      	movs	r2, #128	; 0x80
    e6c6:	0252      	lsls	r2, r2, #9
    e6c8:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    e6ca:	7848      	ldrb	r0, [r1, #1]
    e6cc:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    e6ce:	780a      	ldrb	r2, [r1, #0]
    e6d0:	4310      	orrs	r0, r2
    e6d2:	4318      	orrs	r0, r3

	return register_value;
}
    e6d4:	bd10      	pop	{r4, pc}

0000e6d6 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    e6d6:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    e6d8:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    e6da:	88c4      	ldrh	r4, [r0, #6]
    e6dc:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    e6de:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    e6e0:	018b      	lsls	r3, r1, #6
    e6e2:	0f1b      	lsrs	r3, r3, #28
    e6e4:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    e6e6:	028b      	lsls	r3, r1, #10
    e6e8:	0edb      	lsrs	r3, r3, #27
    e6ea:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    e6ec:	7903      	ldrb	r3, [r0, #4]
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	d10c      	bne.n	e70c <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    e6f2:	040b      	lsls	r3, r1, #16
    e6f4:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    e6f6:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    e6f8:	03cb      	lsls	r3, r1, #15
    e6fa:	0fdb      	lsrs	r3, r3, #31
    e6fc:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    e6fe:	0988      	lsrs	r0, r1, #6
    e700:	233f      	movs	r3, #63	; 0x3f
    e702:	4018      	ands	r0, r3
    e704:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    e706:	4019      	ands	r1, r3
    e708:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    e70a:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    e70c:	03cb      	lsls	r3, r1, #15
    e70e:	0edb      	lsrs	r3, r3, #27
    e710:	7093      	strb	r3, [r2, #2]
    e712:	e7f4      	b.n	e6fe <rtc_calendar_register_value_to_time+0x28>

0000e714 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    e714:	b510      	push	{r4, lr}
    e716:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    e718:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    e71a:	7941      	ldrb	r1, [r0, #5]
    e71c:	2900      	cmp	r1, #0
    e71e:	d006      	beq.n	e72e <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    e720:	8859      	ldrh	r1, [r3, #2]
    e722:	0449      	lsls	r1, r1, #17
    e724:	d50b      	bpl.n	e73e <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    e726:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    e728:	4b0a      	ldr	r3, [pc, #40]	; (e754 <rtc_calendar_get_time+0x40>)
    e72a:	4798      	blx	r3
}
    e72c:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    e72e:	490a      	ldr	r1, [pc, #40]	; (e758 <rtc_calendar_get_time+0x44>)
    e730:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    e732:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    e734:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    e736:	b249      	sxtb	r1, r1
    e738:	2900      	cmp	r1, #0
    e73a:	dbfb      	blt.n	e734 <rtc_calendar_get_time+0x20>
    e73c:	e7f3      	b.n	e726 <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    e73e:	8859      	ldrh	r1, [r3, #2]
    e740:	24c0      	movs	r4, #192	; 0xc0
    e742:	0224      	lsls	r4, r4, #8
    e744:	4321      	orrs	r1, r4
    e746:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    e748:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    e74a:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    e74c:	b249      	sxtb	r1, r1
    e74e:	2900      	cmp	r1, #0
    e750:	dbfb      	blt.n	e74a <rtc_calendar_get_time+0x36>
    e752:	e7e8      	b.n	e726 <rtc_calendar_get_time+0x12>
    e754:	0000e6d7 	.word	0x0000e6d7
    e758:	ffff8000 	.word	0xffff8000

0000e75c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    e75c:	b570      	push	{r4, r5, r6, lr}
    e75e:	000d      	movs	r5, r1
    e760:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    e762:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    e764:	2a01      	cmp	r2, #1
    e766:	d901      	bls.n	e76c <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    e768:	0018      	movs	r0, r3
    e76a:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    e76c:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    e76e:	4b06      	ldr	r3, [pc, #24]	; (e788 <rtc_calendar_set_alarm+0x2c>)
    e770:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    e772:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    e774:	b25b      	sxtb	r3, r3
    e776:	2b00      	cmp	r3, #0
    e778:	dbfb      	blt.n	e772 <rtc_calendar_set_alarm+0x16>
    e77a:	00e4      	lsls	r4, r4, #3
    e77c:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    e77e:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    e780:	7a2b      	ldrb	r3, [r5, #8]
    e782:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    e784:	2300      	movs	r3, #0
    e786:	e7ef      	b.n	e768 <rtc_calendar_set_alarm+0xc>
    e788:	0000e69d 	.word	0x0000e69d

0000e78c <rtc_calendar_init>:
{
    e78c:	b530      	push	{r4, r5, lr}
    e78e:	b083      	sub	sp, #12
    e790:	0005      	movs	r5, r0
    e792:	0014      	movs	r4, r2
	module->hw = hw;
    e794:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    e796:	4a1c      	ldr	r2, [pc, #112]	; (e808 <rtc_calendar_init+0x7c>)
    e798:	6993      	ldr	r3, [r2, #24]
    e79a:	2120      	movs	r1, #32
    e79c:	430b      	orrs	r3, r1
    e79e:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    e7a0:	a901      	add	r1, sp, #4
    e7a2:	2302      	movs	r3, #2
    e7a4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    e7a6:	2004      	movs	r0, #4
    e7a8:	4b18      	ldr	r3, [pc, #96]	; (e80c <rtc_calendar_init+0x80>)
    e7aa:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    e7ac:	2004      	movs	r0, #4
    e7ae:	4b18      	ldr	r3, [pc, #96]	; (e810 <rtc_calendar_init+0x84>)
    e7b0:	4798      	blx	r3
	rtc_calendar_reset(module);
    e7b2:	0028      	movs	r0, r5
    e7b4:	4b17      	ldr	r3, [pc, #92]	; (e814 <rtc_calendar_init+0x88>)
    e7b6:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    e7b8:	7923      	ldrb	r3, [r4, #4]
    e7ba:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    e7bc:	78e3      	ldrb	r3, [r4, #3]
    e7be:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    e7c0:	88e3      	ldrh	r3, [r4, #6]
    e7c2:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    e7c4:	4b14      	ldr	r3, [pc, #80]	; (e818 <rtc_calendar_init+0x8c>)
    e7c6:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    e7c8:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    e7ca:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    e7cc:	7921      	ldrb	r1, [r4, #4]
    e7ce:	2900      	cmp	r1, #0
    e7d0:	d017      	beq.n	e802 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    e7d2:	2108      	movs	r1, #8
    e7d4:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    e7d6:	78a1      	ldrb	r1, [r4, #2]
    e7d8:	2900      	cmp	r1, #0
    e7da:	d001      	beq.n	e7e0 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    e7dc:	2180      	movs	r1, #128	; 0x80
    e7de:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    e7e0:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    e7e2:	78e3      	ldrb	r3, [r4, #3]
    e7e4:	2b00      	cmp	r3, #0
    e7e6:	d004      	beq.n	e7f2 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    e7e8:	8853      	ldrh	r3, [r2, #2]
    e7ea:	2180      	movs	r1, #128	; 0x80
    e7ec:	01c9      	lsls	r1, r1, #7
    e7ee:	430b      	orrs	r3, r1
    e7f0:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    e7f2:	0021      	movs	r1, r4
    e7f4:	3108      	adds	r1, #8
    e7f6:	2200      	movs	r2, #0
    e7f8:	0028      	movs	r0, r5
    e7fa:	4b08      	ldr	r3, [pc, #32]	; (e81c <rtc_calendar_init+0x90>)
    e7fc:	4798      	blx	r3
}
    e7fe:	b003      	add	sp, #12
    e800:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    e802:	2148      	movs	r1, #72	; 0x48
    e804:	430b      	orrs	r3, r1
    e806:	e7e6      	b.n	e7d6 <rtc_calendar_init+0x4a>
    e808:	40000400 	.word	0x40000400
    e80c:	0000ff59 	.word	0x0000ff59
    e810:	0000fecd 	.word	0x0000fecd
    e814:	0000e675 	.word	0x0000e675
    e818:	200010d0 	.word	0x200010d0
    e81c:	0000e75d 	.word	0x0000e75d

0000e820 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    e820:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    e822:	4b0f      	ldr	r3, [pc, #60]	; (e860 <RTC_Handler+0x40>)
    e824:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    e826:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    e828:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    e82a:	8a13      	ldrh	r3, [r2, #16]
    e82c:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    e82e:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    e830:	79e3      	ldrb	r3, [r4, #7]
    e832:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    e834:	b258      	sxtb	r0, r3
    e836:	2800      	cmp	r0, #0
    e838:	db06      	blt.n	e848 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    e83a:	07db      	lsls	r3, r3, #31
    e83c:	d503      	bpl.n	e846 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    e83e:	07cb      	lsls	r3, r1, #31
    e840:	d40a      	bmi.n	e858 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    e842:	2301      	movs	r3, #1
    e844:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    e846:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    e848:	078b      	lsls	r3, r1, #30
    e84a:	d402      	bmi.n	e852 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    e84c:	2380      	movs	r3, #128	; 0x80
    e84e:	7223      	strb	r3, [r4, #8]
    e850:	e7f9      	b.n	e846 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    e852:	68d3      	ldr	r3, [r2, #12]
    e854:	4798      	blx	r3
    e856:	e7f9      	b.n	e84c <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    e858:	6893      	ldr	r3, [r2, #8]
    e85a:	4798      	blx	r3
    e85c:	e7f1      	b.n	e842 <RTC_Handler+0x22>
    e85e:	46c0      	nop			; (mov r8, r8)
    e860:	200010d0 	.word	0x200010d0

0000e864 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    e864:	b5f0      	push	{r4, r5, r6, r7, lr}
    e866:	46de      	mov	lr, fp
    e868:	4657      	mov	r7, sl
    e86a:	464e      	mov	r6, r9
    e86c:	4645      	mov	r5, r8
    e86e:	b5e0      	push	{r5, r6, r7, lr}
    e870:	b087      	sub	sp, #28
    e872:	4680      	mov	r8, r0
    e874:	9104      	str	r1, [sp, #16]
    e876:	0016      	movs	r6, r2
    e878:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    e87a:	2200      	movs	r2, #0
    e87c:	2300      	movs	r3, #0
    e87e:	2100      	movs	r1, #0
    e880:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    e882:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    e884:	2001      	movs	r0, #1
    e886:	0021      	movs	r1, r4
    e888:	9600      	str	r6, [sp, #0]
    e88a:	9701      	str	r7, [sp, #4]
    e88c:	465c      	mov	r4, fp
    e88e:	9403      	str	r4, [sp, #12]
    e890:	4644      	mov	r4, r8
    e892:	9405      	str	r4, [sp, #20]
    e894:	e013      	b.n	e8be <long_division+0x5a>
    e896:	2420      	movs	r4, #32
    e898:	1a64      	subs	r4, r4, r1
    e89a:	0005      	movs	r5, r0
    e89c:	40e5      	lsrs	r5, r4
    e89e:	46a8      	mov	r8, r5
    e8a0:	e014      	b.n	e8cc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    e8a2:	9c00      	ldr	r4, [sp, #0]
    e8a4:	9d01      	ldr	r5, [sp, #4]
    e8a6:	1b12      	subs	r2, r2, r4
    e8a8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    e8aa:	465c      	mov	r4, fp
    e8ac:	464d      	mov	r5, r9
    e8ae:	432c      	orrs	r4, r5
    e8b0:	46a3      	mov	fp, r4
    e8b2:	9c03      	ldr	r4, [sp, #12]
    e8b4:	4645      	mov	r5, r8
    e8b6:	432c      	orrs	r4, r5
    e8b8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    e8ba:	3901      	subs	r1, #1
    e8bc:	d325      	bcc.n	e90a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    e8be:	2420      	movs	r4, #32
    e8c0:	4264      	negs	r4, r4
    e8c2:	190c      	adds	r4, r1, r4
    e8c4:	d4e7      	bmi.n	e896 <long_division+0x32>
    e8c6:	0005      	movs	r5, r0
    e8c8:	40a5      	lsls	r5, r4
    e8ca:	46a8      	mov	r8, r5
    e8cc:	0004      	movs	r4, r0
    e8ce:	408c      	lsls	r4, r1
    e8d0:	46a1      	mov	r9, r4
		r = r << 1;
    e8d2:	1892      	adds	r2, r2, r2
    e8d4:	415b      	adcs	r3, r3
    e8d6:	0014      	movs	r4, r2
    e8d8:	001d      	movs	r5, r3
		if (n & bit_shift) {
    e8da:	9e05      	ldr	r6, [sp, #20]
    e8dc:	464f      	mov	r7, r9
    e8de:	403e      	ands	r6, r7
    e8e0:	46b4      	mov	ip, r6
    e8e2:	9e04      	ldr	r6, [sp, #16]
    e8e4:	4647      	mov	r7, r8
    e8e6:	403e      	ands	r6, r7
    e8e8:	46b2      	mov	sl, r6
    e8ea:	4666      	mov	r6, ip
    e8ec:	4657      	mov	r7, sl
    e8ee:	433e      	orrs	r6, r7
    e8f0:	d003      	beq.n	e8fa <long_division+0x96>
			r |= 0x01;
    e8f2:	0006      	movs	r6, r0
    e8f4:	4326      	orrs	r6, r4
    e8f6:	0032      	movs	r2, r6
    e8f8:	002b      	movs	r3, r5
		if (r >= d) {
    e8fa:	9c00      	ldr	r4, [sp, #0]
    e8fc:	9d01      	ldr	r5, [sp, #4]
    e8fe:	429d      	cmp	r5, r3
    e900:	d8db      	bhi.n	e8ba <long_division+0x56>
    e902:	d1ce      	bne.n	e8a2 <long_division+0x3e>
    e904:	4294      	cmp	r4, r2
    e906:	d8d8      	bhi.n	e8ba <long_division+0x56>
    e908:	e7cb      	b.n	e8a2 <long_division+0x3e>
    e90a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    e90c:	4658      	mov	r0, fp
    e90e:	0019      	movs	r1, r3
    e910:	b007      	add	sp, #28
    e912:	bc3c      	pop	{r2, r3, r4, r5}
    e914:	4690      	mov	r8, r2
    e916:	4699      	mov	r9, r3
    e918:	46a2      	mov	sl, r4
    e91a:	46ab      	mov	fp, r5
    e91c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e91e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    e91e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    e920:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e922:	2340      	movs	r3, #64	; 0x40
    e924:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    e926:	4281      	cmp	r1, r0
    e928:	d202      	bcs.n	e930 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    e92a:	0018      	movs	r0, r3
    e92c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    e92e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    e930:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    e932:	1c63      	adds	r3, r4, #1
    e934:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    e936:	4288      	cmp	r0, r1
    e938:	d9f9      	bls.n	e92e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e93a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    e93c:	2cff      	cmp	r4, #255	; 0xff
    e93e:	d8f4      	bhi.n	e92a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    e940:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    e942:	2300      	movs	r3, #0
    e944:	e7f1      	b.n	e92a <_sercom_get_sync_baud_val+0xc>
	...

0000e948 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    e948:	b5f0      	push	{r4, r5, r6, r7, lr}
    e94a:	b083      	sub	sp, #12
    e94c:	000f      	movs	r7, r1
    e94e:	0016      	movs	r6, r2
    e950:	aa08      	add	r2, sp, #32
    e952:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    e954:	0004      	movs	r4, r0
    e956:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e958:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    e95a:	42bc      	cmp	r4, r7
    e95c:	d902      	bls.n	e964 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    e95e:	0010      	movs	r0, r2
    e960:	b003      	add	sp, #12
    e962:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    e964:	2b00      	cmp	r3, #0
    e966:	d114      	bne.n	e992 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    e968:	0002      	movs	r2, r0
    e96a:	0008      	movs	r0, r1
    e96c:	2100      	movs	r1, #0
    e96e:	4c19      	ldr	r4, [pc, #100]	; (e9d4 <_sercom_get_async_baud_val+0x8c>)
    e970:	47a0      	blx	r4
    e972:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    e974:	003a      	movs	r2, r7
    e976:	2300      	movs	r3, #0
    e978:	2000      	movs	r0, #0
    e97a:	4c17      	ldr	r4, [pc, #92]	; (e9d8 <_sercom_get_async_baud_val+0x90>)
    e97c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    e97e:	2200      	movs	r2, #0
    e980:	2301      	movs	r3, #1
    e982:	1a12      	subs	r2, r2, r0
    e984:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    e986:	0c12      	lsrs	r2, r2, #16
    e988:	041b      	lsls	r3, r3, #16
    e98a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    e98c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    e98e:	2200      	movs	r2, #0
    e990:	e7e5      	b.n	e95e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    e992:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    e994:	2b01      	cmp	r3, #1
    e996:	d1f9      	bne.n	e98c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    e998:	000a      	movs	r2, r1
    e99a:	2300      	movs	r3, #0
    e99c:	2100      	movs	r1, #0
    e99e:	4c0d      	ldr	r4, [pc, #52]	; (e9d4 <_sercom_get_async_baud_val+0x8c>)
    e9a0:	47a0      	blx	r4
    e9a2:	0002      	movs	r2, r0
    e9a4:	000b      	movs	r3, r1
    e9a6:	9200      	str	r2, [sp, #0]
    e9a8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    e9aa:	0038      	movs	r0, r7
    e9ac:	2100      	movs	r1, #0
    e9ae:	4c0a      	ldr	r4, [pc, #40]	; (e9d8 <_sercom_get_async_baud_val+0x90>)
    e9b0:	47a0      	blx	r4
    e9b2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    e9b4:	2380      	movs	r3, #128	; 0x80
    e9b6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    e9b8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    e9ba:	4298      	cmp	r0, r3
    e9bc:	d8cf      	bhi.n	e95e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    e9be:	0f79      	lsrs	r1, r7, #29
    e9c0:	00f8      	lsls	r0, r7, #3
    e9c2:	9a00      	ldr	r2, [sp, #0]
    e9c4:	9b01      	ldr	r3, [sp, #4]
    e9c6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    e9c8:	00ea      	lsls	r2, r5, #3
    e9ca:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    e9cc:	b2d2      	uxtb	r2, r2
    e9ce:	0352      	lsls	r2, r2, #13
    e9d0:	432a      	orrs	r2, r5
    e9d2:	e7db      	b.n	e98c <_sercom_get_async_baud_val+0x44>
    e9d4:	000164f9 	.word	0x000164f9
    e9d8:	0000e865 	.word	0x0000e865

0000e9dc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    e9dc:	b510      	push	{r4, lr}
    e9de:	b082      	sub	sp, #8
    e9e0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    e9e2:	4b0e      	ldr	r3, [pc, #56]	; (ea1c <sercom_set_gclk_generator+0x40>)
    e9e4:	781b      	ldrb	r3, [r3, #0]
    e9e6:	2b00      	cmp	r3, #0
    e9e8:	d007      	beq.n	e9fa <sercom_set_gclk_generator+0x1e>
    e9ea:	2900      	cmp	r1, #0
    e9ec:	d105      	bne.n	e9fa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    e9ee:	4b0b      	ldr	r3, [pc, #44]	; (ea1c <sercom_set_gclk_generator+0x40>)
    e9f0:	785b      	ldrb	r3, [r3, #1]
    e9f2:	4283      	cmp	r3, r0
    e9f4:	d010      	beq.n	ea18 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    e9f6:	201d      	movs	r0, #29
    e9f8:	e00c      	b.n	ea14 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    e9fa:	a901      	add	r1, sp, #4
    e9fc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    e9fe:	2013      	movs	r0, #19
    ea00:	4b07      	ldr	r3, [pc, #28]	; (ea20 <sercom_set_gclk_generator+0x44>)
    ea02:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    ea04:	2013      	movs	r0, #19
    ea06:	4b07      	ldr	r3, [pc, #28]	; (ea24 <sercom_set_gclk_generator+0x48>)
    ea08:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    ea0a:	4b04      	ldr	r3, [pc, #16]	; (ea1c <sercom_set_gclk_generator+0x40>)
    ea0c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    ea0e:	2201      	movs	r2, #1
    ea10:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    ea12:	2000      	movs	r0, #0
}
    ea14:	b002      	add	sp, #8
    ea16:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    ea18:	2000      	movs	r0, #0
    ea1a:	e7fb      	b.n	ea14 <sercom_set_gclk_generator+0x38>
    ea1c:	20000404 	.word	0x20000404
    ea20:	0000ff59 	.word	0x0000ff59
    ea24:	0000fecd 	.word	0x0000fecd

0000ea28 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    ea28:	4b40      	ldr	r3, [pc, #256]	; (eb2c <_sercom_get_default_pad+0x104>)
    ea2a:	4298      	cmp	r0, r3
    ea2c:	d031      	beq.n	ea92 <_sercom_get_default_pad+0x6a>
    ea2e:	d90a      	bls.n	ea46 <_sercom_get_default_pad+0x1e>
    ea30:	4b3f      	ldr	r3, [pc, #252]	; (eb30 <_sercom_get_default_pad+0x108>)
    ea32:	4298      	cmp	r0, r3
    ea34:	d04d      	beq.n	ead2 <_sercom_get_default_pad+0xaa>
    ea36:	4b3f      	ldr	r3, [pc, #252]	; (eb34 <_sercom_get_default_pad+0x10c>)
    ea38:	4298      	cmp	r0, r3
    ea3a:	d05a      	beq.n	eaf2 <_sercom_get_default_pad+0xca>
    ea3c:	4b3e      	ldr	r3, [pc, #248]	; (eb38 <_sercom_get_default_pad+0x110>)
    ea3e:	4298      	cmp	r0, r3
    ea40:	d037      	beq.n	eab2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    ea42:	2000      	movs	r0, #0
}
    ea44:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    ea46:	4b3d      	ldr	r3, [pc, #244]	; (eb3c <_sercom_get_default_pad+0x114>)
    ea48:	4298      	cmp	r0, r3
    ea4a:	d00c      	beq.n	ea66 <_sercom_get_default_pad+0x3e>
    ea4c:	4b3c      	ldr	r3, [pc, #240]	; (eb40 <_sercom_get_default_pad+0x118>)
    ea4e:	4298      	cmp	r0, r3
    ea50:	d1f7      	bne.n	ea42 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ea52:	2901      	cmp	r1, #1
    ea54:	d017      	beq.n	ea86 <_sercom_get_default_pad+0x5e>
    ea56:	2900      	cmp	r1, #0
    ea58:	d05d      	beq.n	eb16 <_sercom_get_default_pad+0xee>
    ea5a:	2902      	cmp	r1, #2
    ea5c:	d015      	beq.n	ea8a <_sercom_get_default_pad+0x62>
    ea5e:	2903      	cmp	r1, #3
    ea60:	d015      	beq.n	ea8e <_sercom_get_default_pad+0x66>
	return 0;
    ea62:	2000      	movs	r0, #0
    ea64:	e7ee      	b.n	ea44 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ea66:	2901      	cmp	r1, #1
    ea68:	d007      	beq.n	ea7a <_sercom_get_default_pad+0x52>
    ea6a:	2900      	cmp	r1, #0
    ea6c:	d051      	beq.n	eb12 <_sercom_get_default_pad+0xea>
    ea6e:	2902      	cmp	r1, #2
    ea70:	d005      	beq.n	ea7e <_sercom_get_default_pad+0x56>
    ea72:	2903      	cmp	r1, #3
    ea74:	d005      	beq.n	ea82 <_sercom_get_default_pad+0x5a>
	return 0;
    ea76:	2000      	movs	r0, #0
    ea78:	e7e4      	b.n	ea44 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    ea7a:	4832      	ldr	r0, [pc, #200]	; (eb44 <_sercom_get_default_pad+0x11c>)
    ea7c:	e7e2      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    ea7e:	4832      	ldr	r0, [pc, #200]	; (eb48 <_sercom_get_default_pad+0x120>)
    ea80:	e7e0      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    ea82:	4832      	ldr	r0, [pc, #200]	; (eb4c <_sercom_get_default_pad+0x124>)
    ea84:	e7de      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    ea86:	4832      	ldr	r0, [pc, #200]	; (eb50 <_sercom_get_default_pad+0x128>)
    ea88:	e7dc      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    ea8a:	4832      	ldr	r0, [pc, #200]	; (eb54 <_sercom_get_default_pad+0x12c>)
    ea8c:	e7da      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    ea8e:	4832      	ldr	r0, [pc, #200]	; (eb58 <_sercom_get_default_pad+0x130>)
    ea90:	e7d8      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    ea92:	2901      	cmp	r1, #1
    ea94:	d007      	beq.n	eaa6 <_sercom_get_default_pad+0x7e>
    ea96:	2900      	cmp	r1, #0
    ea98:	d03f      	beq.n	eb1a <_sercom_get_default_pad+0xf2>
    ea9a:	2902      	cmp	r1, #2
    ea9c:	d005      	beq.n	eaaa <_sercom_get_default_pad+0x82>
    ea9e:	2903      	cmp	r1, #3
    eaa0:	d005      	beq.n	eaae <_sercom_get_default_pad+0x86>
	return 0;
    eaa2:	2000      	movs	r0, #0
    eaa4:	e7ce      	b.n	ea44 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    eaa6:	482d      	ldr	r0, [pc, #180]	; (eb5c <_sercom_get_default_pad+0x134>)
    eaa8:	e7cc      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eaaa:	482d      	ldr	r0, [pc, #180]	; (eb60 <_sercom_get_default_pad+0x138>)
    eaac:	e7ca      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eaae:	482d      	ldr	r0, [pc, #180]	; (eb64 <_sercom_get_default_pad+0x13c>)
    eab0:	e7c8      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eab2:	2901      	cmp	r1, #1
    eab4:	d007      	beq.n	eac6 <_sercom_get_default_pad+0x9e>
    eab6:	2900      	cmp	r1, #0
    eab8:	d031      	beq.n	eb1e <_sercom_get_default_pad+0xf6>
    eaba:	2902      	cmp	r1, #2
    eabc:	d005      	beq.n	eaca <_sercom_get_default_pad+0xa2>
    eabe:	2903      	cmp	r1, #3
    eac0:	d005      	beq.n	eace <_sercom_get_default_pad+0xa6>
	return 0;
    eac2:	2000      	movs	r0, #0
    eac4:	e7be      	b.n	ea44 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    eac6:	4828      	ldr	r0, [pc, #160]	; (eb68 <_sercom_get_default_pad+0x140>)
    eac8:	e7bc      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eaca:	4828      	ldr	r0, [pc, #160]	; (eb6c <_sercom_get_default_pad+0x144>)
    eacc:	e7ba      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eace:	4828      	ldr	r0, [pc, #160]	; (eb70 <_sercom_get_default_pad+0x148>)
    ead0:	e7b8      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    ead2:	2901      	cmp	r1, #1
    ead4:	d007      	beq.n	eae6 <_sercom_get_default_pad+0xbe>
    ead6:	2900      	cmp	r1, #0
    ead8:	d023      	beq.n	eb22 <_sercom_get_default_pad+0xfa>
    eada:	2902      	cmp	r1, #2
    eadc:	d005      	beq.n	eaea <_sercom_get_default_pad+0xc2>
    eade:	2903      	cmp	r1, #3
    eae0:	d005      	beq.n	eaee <_sercom_get_default_pad+0xc6>
	return 0;
    eae2:	2000      	movs	r0, #0
    eae4:	e7ae      	b.n	ea44 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    eae6:	4823      	ldr	r0, [pc, #140]	; (eb74 <_sercom_get_default_pad+0x14c>)
    eae8:	e7ac      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eaea:	4823      	ldr	r0, [pc, #140]	; (eb78 <_sercom_get_default_pad+0x150>)
    eaec:	e7aa      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eaee:	4823      	ldr	r0, [pc, #140]	; (eb7c <_sercom_get_default_pad+0x154>)
    eaf0:	e7a8      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eaf2:	2901      	cmp	r1, #1
    eaf4:	d007      	beq.n	eb06 <_sercom_get_default_pad+0xde>
    eaf6:	2900      	cmp	r1, #0
    eaf8:	d015      	beq.n	eb26 <_sercom_get_default_pad+0xfe>
    eafa:	2902      	cmp	r1, #2
    eafc:	d005      	beq.n	eb0a <_sercom_get_default_pad+0xe2>
    eafe:	2903      	cmp	r1, #3
    eb00:	d005      	beq.n	eb0e <_sercom_get_default_pad+0xe6>
	return 0;
    eb02:	2000      	movs	r0, #0
    eb04:	e79e      	b.n	ea44 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    eb06:	481e      	ldr	r0, [pc, #120]	; (eb80 <_sercom_get_default_pad+0x158>)
    eb08:	e79c      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eb0a:	481e      	ldr	r0, [pc, #120]	; (eb84 <_sercom_get_default_pad+0x15c>)
    eb0c:	e79a      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eb0e:	481e      	ldr	r0, [pc, #120]	; (eb88 <_sercom_get_default_pad+0x160>)
    eb10:	e798      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eb12:	481e      	ldr	r0, [pc, #120]	; (eb8c <_sercom_get_default_pad+0x164>)
    eb14:	e796      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eb16:	2003      	movs	r0, #3
    eb18:	e794      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eb1a:	481d      	ldr	r0, [pc, #116]	; (eb90 <_sercom_get_default_pad+0x168>)
    eb1c:	e792      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eb1e:	481d      	ldr	r0, [pc, #116]	; (eb94 <_sercom_get_default_pad+0x16c>)
    eb20:	e790      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eb22:	481d      	ldr	r0, [pc, #116]	; (eb98 <_sercom_get_default_pad+0x170>)
    eb24:	e78e      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eb26:	481d      	ldr	r0, [pc, #116]	; (eb9c <_sercom_get_default_pad+0x174>)
    eb28:	e78c      	b.n	ea44 <_sercom_get_default_pad+0x1c>
    eb2a:	46c0      	nop			; (mov r8, r8)
    eb2c:	42001000 	.word	0x42001000
    eb30:	42001800 	.word	0x42001800
    eb34:	42001c00 	.word	0x42001c00
    eb38:	42001400 	.word	0x42001400
    eb3c:	42000800 	.word	0x42000800
    eb40:	42000c00 	.word	0x42000c00
    eb44:	00050003 	.word	0x00050003
    eb48:	00060003 	.word	0x00060003
    eb4c:	00070003 	.word	0x00070003
    eb50:	00010003 	.word	0x00010003
    eb54:	001e0003 	.word	0x001e0003
    eb58:	001f0003 	.word	0x001f0003
    eb5c:	00090003 	.word	0x00090003
    eb60:	000a0003 	.word	0x000a0003
    eb64:	000b0003 	.word	0x000b0003
    eb68:	00110003 	.word	0x00110003
    eb6c:	00120003 	.word	0x00120003
    eb70:	00130003 	.word	0x00130003
    eb74:	000d0003 	.word	0x000d0003
    eb78:	000e0003 	.word	0x000e0003
    eb7c:	000f0003 	.word	0x000f0003
    eb80:	00170003 	.word	0x00170003
    eb84:	00180003 	.word	0x00180003
    eb88:	00190003 	.word	0x00190003
    eb8c:	00040003 	.word	0x00040003
    eb90:	00080003 	.word	0x00080003
    eb94:	00100003 	.word	0x00100003
    eb98:	000c0003 	.word	0x000c0003
    eb9c:	00160003 	.word	0x00160003

0000eba0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    eba0:	b530      	push	{r4, r5, lr}
    eba2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    eba4:	4b0b      	ldr	r3, [pc, #44]	; (ebd4 <_sercom_get_sercom_inst_index+0x34>)
    eba6:	466a      	mov	r2, sp
    eba8:	cb32      	ldmia	r3!, {r1, r4, r5}
    ebaa:	c232      	stmia	r2!, {r1, r4, r5}
    ebac:	cb32      	ldmia	r3!, {r1, r4, r5}
    ebae:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    ebb0:	9b00      	ldr	r3, [sp, #0]
    ebb2:	4283      	cmp	r3, r0
    ebb4:	d00b      	beq.n	ebce <_sercom_get_sercom_inst_index+0x2e>
    ebb6:	2301      	movs	r3, #1
    ebb8:	009a      	lsls	r2, r3, #2
    ebba:	4669      	mov	r1, sp
    ebbc:	5852      	ldr	r2, [r2, r1]
    ebbe:	4282      	cmp	r2, r0
    ebc0:	d006      	beq.n	ebd0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ebc2:	3301      	adds	r3, #1
    ebc4:	2b06      	cmp	r3, #6
    ebc6:	d1f7      	bne.n	ebb8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    ebc8:	2000      	movs	r0, #0
}
    ebca:	b007      	add	sp, #28
    ebcc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ebce:	2300      	movs	r3, #0
			return i;
    ebd0:	b2d8      	uxtb	r0, r3
    ebd2:	e7fa      	b.n	ebca <_sercom_get_sercom_inst_index+0x2a>
    ebd4:	00019874 	.word	0x00019874

0000ebd8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    ebd8:	4770      	bx	lr
	...

0000ebdc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    ebdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    ebde:	4b0a      	ldr	r3, [pc, #40]	; (ec08 <_sercom_set_handler+0x2c>)
    ebe0:	781b      	ldrb	r3, [r3, #0]
    ebe2:	2b00      	cmp	r3, #0
    ebe4:	d10c      	bne.n	ec00 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    ebe6:	4f09      	ldr	r7, [pc, #36]	; (ec0c <_sercom_set_handler+0x30>)
    ebe8:	4e09      	ldr	r6, [pc, #36]	; (ec10 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    ebea:	4d0a      	ldr	r5, [pc, #40]	; (ec14 <_sercom_set_handler+0x38>)
    ebec:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    ebee:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    ebf0:	195a      	adds	r2, r3, r5
    ebf2:	6014      	str	r4, [r2, #0]
    ebf4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ebf6:	2b18      	cmp	r3, #24
    ebf8:	d1f9      	bne.n	ebee <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    ebfa:	2201      	movs	r2, #1
    ebfc:	4b02      	ldr	r3, [pc, #8]	; (ec08 <_sercom_set_handler+0x2c>)
    ebfe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    ec00:	0080      	lsls	r0, r0, #2
    ec02:	4b02      	ldr	r3, [pc, #8]	; (ec0c <_sercom_set_handler+0x30>)
    ec04:	50c1      	str	r1, [r0, r3]
}
    ec06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec08:	20000406 	.word	0x20000406
    ec0c:	20000408 	.word	0x20000408
    ec10:	0000ebd9 	.word	0x0000ebd9
    ec14:	200010d4 	.word	0x200010d4

0000ec18 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    ec18:	b500      	push	{lr}
    ec1a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    ec1c:	2309      	movs	r3, #9
    ec1e:	466a      	mov	r2, sp
    ec20:	7013      	strb	r3, [r2, #0]
    ec22:	3301      	adds	r3, #1
    ec24:	7053      	strb	r3, [r2, #1]
    ec26:	3301      	adds	r3, #1
    ec28:	7093      	strb	r3, [r2, #2]
    ec2a:	3301      	adds	r3, #1
    ec2c:	70d3      	strb	r3, [r2, #3]
    ec2e:	3301      	adds	r3, #1
    ec30:	7113      	strb	r3, [r2, #4]
    ec32:	3301      	adds	r3, #1
    ec34:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    ec36:	4b03      	ldr	r3, [pc, #12]	; (ec44 <_sercom_get_interrupt_vector+0x2c>)
    ec38:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    ec3a:	466b      	mov	r3, sp
    ec3c:	5618      	ldrsb	r0, [r3, r0]
}
    ec3e:	b003      	add	sp, #12
    ec40:	bd00      	pop	{pc}
    ec42:	46c0      	nop			; (mov r8, r8)
    ec44:	0000eba1 	.word	0x0000eba1

0000ec48 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    ec48:	b510      	push	{r4, lr}
    ec4a:	4b02      	ldr	r3, [pc, #8]	; (ec54 <SERCOM0_Handler+0xc>)
    ec4c:	681b      	ldr	r3, [r3, #0]
    ec4e:	2000      	movs	r0, #0
    ec50:	4798      	blx	r3
    ec52:	bd10      	pop	{r4, pc}
    ec54:	20000408 	.word	0x20000408

0000ec58 <SERCOM1_Handler>:
    ec58:	b510      	push	{r4, lr}
    ec5a:	4b02      	ldr	r3, [pc, #8]	; (ec64 <SERCOM1_Handler+0xc>)
    ec5c:	685b      	ldr	r3, [r3, #4]
    ec5e:	2001      	movs	r0, #1
    ec60:	4798      	blx	r3
    ec62:	bd10      	pop	{r4, pc}
    ec64:	20000408 	.word	0x20000408

0000ec68 <SERCOM2_Handler>:
    ec68:	b510      	push	{r4, lr}
    ec6a:	4b02      	ldr	r3, [pc, #8]	; (ec74 <SERCOM2_Handler+0xc>)
    ec6c:	689b      	ldr	r3, [r3, #8]
    ec6e:	2002      	movs	r0, #2
    ec70:	4798      	blx	r3
    ec72:	bd10      	pop	{r4, pc}
    ec74:	20000408 	.word	0x20000408

0000ec78 <SERCOM3_Handler>:
    ec78:	b510      	push	{r4, lr}
    ec7a:	4b02      	ldr	r3, [pc, #8]	; (ec84 <SERCOM3_Handler+0xc>)
    ec7c:	68db      	ldr	r3, [r3, #12]
    ec7e:	2003      	movs	r0, #3
    ec80:	4798      	blx	r3
    ec82:	bd10      	pop	{r4, pc}
    ec84:	20000408 	.word	0x20000408

0000ec88 <SERCOM4_Handler>:
    ec88:	b510      	push	{r4, lr}
    ec8a:	4b02      	ldr	r3, [pc, #8]	; (ec94 <SERCOM4_Handler+0xc>)
    ec8c:	691b      	ldr	r3, [r3, #16]
    ec8e:	2004      	movs	r0, #4
    ec90:	4798      	blx	r3
    ec92:	bd10      	pop	{r4, pc}
    ec94:	20000408 	.word	0x20000408

0000ec98 <SERCOM5_Handler>:
    ec98:	b510      	push	{r4, lr}
    ec9a:	4b02      	ldr	r3, [pc, #8]	; (eca4 <SERCOM5_Handler+0xc>)
    ec9c:	695b      	ldr	r3, [r3, #20]
    ec9e:	2005      	movs	r0, #5
    eca0:	4798      	blx	r3
    eca2:	bd10      	pop	{r4, pc}
    eca4:	20000408 	.word	0x20000408

0000eca8 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    eca8:	b570      	push	{r4, r5, r6, lr}
    ecaa:	b082      	sub	sp, #8
    ecac:	0005      	movs	r5, r0
    ecae:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    ecb0:	2200      	movs	r2, #0
    ecb2:	466b      	mov	r3, sp
    ecb4:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    ecb6:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    ecb8:	0030      	movs	r0, r6
    ecba:	4b24      	ldr	r3, [pc, #144]	; (ed4c <spi_set_baudrate+0xa4>)
    ecbc:	4798      	blx	r3
    ecbe:	231f      	movs	r3, #31
    ecc0:	4018      	ands	r0, r3
    ecc2:	3b1e      	subs	r3, #30
    ecc4:	4083      	lsls	r3, r0
    ecc6:	2280      	movs	r2, #128	; 0x80
    ecc8:	4921      	ldr	r1, [pc, #132]	; (ed50 <spi_set_baudrate+0xa8>)
    ecca:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    eccc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    ecce:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    ecd0:	2b00      	cmp	r3, #0
    ecd2:	d1fc      	bne.n	ecce <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    ecd4:	338f      	adds	r3, #143	; 0x8f
    ecd6:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    ecd8:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    ecda:	6833      	ldr	r3, [r6, #0]
    ecdc:	2202      	movs	r2, #2
    ecde:	4393      	bics	r3, r2
    ece0:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ece2:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    ece4:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    ece6:	2b00      	cmp	r3, #0
    ece8:	d1fc      	bne.n	ece4 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    ecea:	4b1a      	ldr	r3, [pc, #104]	; (ed54 <spi_set_baudrate+0xac>)
    ecec:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    ecee:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    ecf0:	b2c0      	uxtb	r0, r0
    ecf2:	4b19      	ldr	r3, [pc, #100]	; (ed58 <spi_set_baudrate+0xb0>)
    ecf4:	4798      	blx	r3
    ecf6:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    ecf8:	466b      	mov	r3, sp
    ecfa:	1d9a      	adds	r2, r3, #6
    ecfc:	0020      	movs	r0, r4
    ecfe:	4b17      	ldr	r3, [pc, #92]	; (ed5c <spi_set_baudrate+0xb4>)
    ed00:	4798      	blx	r3
    ed02:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    ed04:	d003      	beq.n	ed0e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    ed06:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    ed08:	0020      	movs	r0, r4
    ed0a:	b002      	add	sp, #8
    ed0c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    ed0e:	466b      	mov	r3, sp
    ed10:	3306      	adds	r3, #6
    ed12:	781b      	ldrb	r3, [r3, #0]
    ed14:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ed16:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    ed18:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    ed1a:	2b00      	cmp	r3, #0
    ed1c:	d1fc      	bne.n	ed18 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    ed1e:	0030      	movs	r0, r6
    ed20:	4b0a      	ldr	r3, [pc, #40]	; (ed4c <spi_set_baudrate+0xa4>)
    ed22:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ed24:	231f      	movs	r3, #31
    ed26:	4018      	ands	r0, r3
    ed28:	3b1e      	subs	r3, #30
    ed2a:	4083      	lsls	r3, r0
    ed2c:	4a08      	ldr	r2, [pc, #32]	; (ed50 <spi_set_baudrate+0xa8>)
    ed2e:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ed30:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    ed32:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    ed34:	2b00      	cmp	r3, #0
    ed36:	d1fc      	bne.n	ed32 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    ed38:	6833      	ldr	r3, [r6, #0]
    ed3a:	2202      	movs	r2, #2
    ed3c:	4313      	orrs	r3, r2
    ed3e:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ed40:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    ed42:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    ed44:	2b00      	cmp	r3, #0
    ed46:	d1fc      	bne.n	ed42 <spi_set_baudrate+0x9a>
    ed48:	e7de      	b.n	ed08 <spi_set_baudrate+0x60>
    ed4a:	46c0      	nop			; (mov r8, r8)
    ed4c:	0000ec19 	.word	0x0000ec19
    ed50:	e000e100 	.word	0xe000e100
    ed54:	0000eba1 	.word	0x0000eba1
    ed58:	0000ff75 	.word	0x0000ff75
    ed5c:	0000e91f 	.word	0x0000e91f

0000ed60 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    ed60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed62:	b08b      	sub	sp, #44	; 0x2c
    ed64:	0005      	movs	r5, r0
    ed66:	000c      	movs	r4, r1
    ed68:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    ed6a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    ed6c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    ed6e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    ed70:	079b      	lsls	r3, r3, #30
    ed72:	d501      	bpl.n	ed78 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    ed74:	b00b      	add	sp, #44	; 0x2c
    ed76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    ed78:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    ed7a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    ed7c:	07db      	lsls	r3, r3, #31
    ed7e:	d4f9      	bmi.n	ed74 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    ed80:	0008      	movs	r0, r1
    ed82:	4b60      	ldr	r3, [pc, #384]	; (ef04 <spi_init+0x1a4>)
    ed84:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    ed86:	4a60      	ldr	r2, [pc, #384]	; (ef08 <spi_init+0x1a8>)
    ed88:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    ed8a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    ed8c:	2301      	movs	r3, #1
    ed8e:	40bb      	lsls	r3, r7
    ed90:	430b      	orrs	r3, r1
    ed92:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    ed94:	a909      	add	r1, sp, #36	; 0x24
    ed96:	2724      	movs	r7, #36	; 0x24
    ed98:	5df3      	ldrb	r3, [r6, r7]
    ed9a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    ed9c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    ed9e:	b2c3      	uxtb	r3, r0
    eda0:	9301      	str	r3, [sp, #4]
    eda2:	0018      	movs	r0, r3
    eda4:	4b59      	ldr	r3, [pc, #356]	; (ef0c <spi_init+0x1ac>)
    eda6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    eda8:	9801      	ldr	r0, [sp, #4]
    edaa:	4b59      	ldr	r3, [pc, #356]	; (ef10 <spi_init+0x1b0>)
    edac:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    edae:	5df0      	ldrb	r0, [r6, r7]
    edb0:	2100      	movs	r1, #0
    edb2:	4b58      	ldr	r3, [pc, #352]	; (ef14 <spi_init+0x1b4>)
    edb4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    edb6:	7833      	ldrb	r3, [r6, #0]
    edb8:	2b01      	cmp	r3, #1
    edba:	d038      	beq.n	ee2e <spi_init+0xce>
    edbc:	002b      	movs	r3, r5
    edbe:	330c      	adds	r3, #12
    edc0:	0029      	movs	r1, r5
    edc2:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    edc4:	2200      	movs	r2, #0
    edc6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    edc8:	428b      	cmp	r3, r1
    edca:	d1fc      	bne.n	edc6 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    edcc:	2300      	movs	r3, #0
    edce:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    edd0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    edd2:	2400      	movs	r4, #0
    edd4:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    edd6:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    edd8:	3336      	adds	r3, #54	; 0x36
    edda:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    eddc:	3301      	adds	r3, #1
    edde:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    ede0:	3301      	adds	r3, #1
    ede2:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    ede4:	3b35      	subs	r3, #53	; 0x35
    ede6:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    ede8:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    edea:	6828      	ldr	r0, [r5, #0]
    edec:	4b45      	ldr	r3, [pc, #276]	; (ef04 <spi_init+0x1a4>)
    edee:	4798      	blx	r3
    edf0:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    edf2:	4949      	ldr	r1, [pc, #292]	; (ef18 <spi_init+0x1b8>)
    edf4:	4b49      	ldr	r3, [pc, #292]	; (ef1c <spi_init+0x1bc>)
    edf6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    edf8:	00bf      	lsls	r7, r7, #2
    edfa:	4b49      	ldr	r3, [pc, #292]	; (ef20 <spi_init+0x1c0>)
    edfc:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    edfe:	682f      	ldr	r7, [r5, #0]
    ee00:	ab04      	add	r3, sp, #16
    ee02:	2280      	movs	r2, #128	; 0x80
    ee04:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ee06:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    ee08:	3a7f      	subs	r2, #127	; 0x7f
    ee0a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    ee0c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    ee0e:	7833      	ldrb	r3, [r6, #0]
    ee10:	2b00      	cmp	r3, #0
    ee12:	d102      	bne.n	ee1a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    ee14:	2200      	movs	r2, #0
    ee16:	ab04      	add	r3, sp, #16
    ee18:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    ee1a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    ee1c:	9305      	str	r3, [sp, #20]
    ee1e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    ee20:	9306      	str	r3, [sp, #24]
    ee22:	6b33      	ldr	r3, [r6, #48]	; 0x30
    ee24:	9307      	str	r3, [sp, #28]
    ee26:	6b73      	ldr	r3, [r6, #52]	; 0x34
    ee28:	9308      	str	r3, [sp, #32]
    ee2a:	2400      	movs	r4, #0
    ee2c:	e00b      	b.n	ee46 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    ee2e:	6823      	ldr	r3, [r4, #0]
    ee30:	220c      	movs	r2, #12
    ee32:	4313      	orrs	r3, r2
    ee34:	6023      	str	r3, [r4, #0]
    ee36:	e7c1      	b.n	edbc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    ee38:	0038      	movs	r0, r7
    ee3a:	4b3a      	ldr	r3, [pc, #232]	; (ef24 <spi_init+0x1c4>)
    ee3c:	4798      	blx	r3
    ee3e:	e00a      	b.n	ee56 <spi_init+0xf6>
    ee40:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    ee42:	2c04      	cmp	r4, #4
    ee44:	d010      	beq.n	ee68 <spi_init+0x108>
    ee46:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    ee48:	00a3      	lsls	r3, r4, #2
    ee4a:	aa02      	add	r2, sp, #8
    ee4c:	200c      	movs	r0, #12
    ee4e:	1812      	adds	r2, r2, r0
    ee50:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    ee52:	2800      	cmp	r0, #0
    ee54:	d0f0      	beq.n	ee38 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    ee56:	1c43      	adds	r3, r0, #1
    ee58:	d0f2      	beq.n	ee40 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    ee5a:	a904      	add	r1, sp, #16
    ee5c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    ee5e:	0c00      	lsrs	r0, r0, #16
    ee60:	b2c0      	uxtb	r0, r0
    ee62:	4b31      	ldr	r3, [pc, #196]	; (ef28 <spi_init+0x1c8>)
    ee64:	4798      	blx	r3
    ee66:	e7eb      	b.n	ee40 <spi_init+0xe0>
	module->mode             = config->mode;
    ee68:	7833      	ldrb	r3, [r6, #0]
    ee6a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    ee6c:	7c33      	ldrb	r3, [r6, #16]
    ee6e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    ee70:	7cb3      	ldrb	r3, [r6, #18]
    ee72:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    ee74:	7d33      	ldrb	r3, [r6, #20]
    ee76:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    ee78:	2200      	movs	r2, #0
    ee7a:	ab02      	add	r3, sp, #8
    ee7c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    ee7e:	7833      	ldrb	r3, [r6, #0]
    ee80:	2b01      	cmp	r3, #1
    ee82:	d028      	beq.n	eed6 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    ee84:	6873      	ldr	r3, [r6, #4]
    ee86:	68b2      	ldr	r2, [r6, #8]
    ee88:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    ee8a:	68f2      	ldr	r2, [r6, #12]
    ee8c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    ee8e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    ee90:	7c72      	ldrb	r2, [r6, #17]
    ee92:	2a00      	cmp	r2, #0
    ee94:	d103      	bne.n	ee9e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    ee96:	4a25      	ldr	r2, [pc, #148]	; (ef2c <spi_init+0x1cc>)
    ee98:	7892      	ldrb	r2, [r2, #2]
    ee9a:	0792      	lsls	r2, r2, #30
    ee9c:	d501      	bpl.n	eea2 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    ee9e:	2280      	movs	r2, #128	; 0x80
    eea0:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    eea2:	7cb2      	ldrb	r2, [r6, #18]
    eea4:	2a00      	cmp	r2, #0
    eea6:	d002      	beq.n	eeae <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    eea8:	2280      	movs	r2, #128	; 0x80
    eeaa:	0292      	lsls	r2, r2, #10
    eeac:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    eeae:	7cf2      	ldrb	r2, [r6, #19]
    eeb0:	2a00      	cmp	r2, #0
    eeb2:	d002      	beq.n	eeba <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    eeb4:	2280      	movs	r2, #128	; 0x80
    eeb6:	0092      	lsls	r2, r2, #2
    eeb8:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    eeba:	7d32      	ldrb	r2, [r6, #20]
    eebc:	2a00      	cmp	r2, #0
    eebe:	d002      	beq.n	eec6 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    eec0:	2280      	movs	r2, #128	; 0x80
    eec2:	0192      	lsls	r2, r2, #6
    eec4:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    eec6:	683a      	ldr	r2, [r7, #0]
    eec8:	4313      	orrs	r3, r2
    eeca:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    eecc:	687b      	ldr	r3, [r7, #4]
    eece:	430b      	orrs	r3, r1
    eed0:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    eed2:	2000      	movs	r0, #0
    eed4:	e74e      	b.n	ed74 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    eed6:	6828      	ldr	r0, [r5, #0]
    eed8:	4b0a      	ldr	r3, [pc, #40]	; (ef04 <spi_init+0x1a4>)
    eeda:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    eedc:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    eede:	b2c0      	uxtb	r0, r0
    eee0:	4b13      	ldr	r3, [pc, #76]	; (ef30 <spi_init+0x1d0>)
    eee2:	4798      	blx	r3
    eee4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    eee6:	ab02      	add	r3, sp, #8
    eee8:	1d9a      	adds	r2, r3, #6
    eeea:	69b0      	ldr	r0, [r6, #24]
    eeec:	4b11      	ldr	r3, [pc, #68]	; (ef34 <spi_init+0x1d4>)
    eeee:	4798      	blx	r3
    eef0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    eef2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    eef4:	2b00      	cmp	r3, #0
    eef6:	d000      	beq.n	eefa <spi_init+0x19a>
    eef8:	e73c      	b.n	ed74 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    eefa:	ab02      	add	r3, sp, #8
    eefc:	3306      	adds	r3, #6
    eefe:	781b      	ldrb	r3, [r3, #0]
    ef00:	733b      	strb	r3, [r7, #12]
    ef02:	e7bf      	b.n	ee84 <spi_init+0x124>
    ef04:	0000eba1 	.word	0x0000eba1
    ef08:	40000400 	.word	0x40000400
    ef0c:	0000ff59 	.word	0x0000ff59
    ef10:	0000fecd 	.word	0x0000fecd
    ef14:	0000e9dd 	.word	0x0000e9dd
    ef18:	0000f1cd 	.word	0x0000f1cd
    ef1c:	0000ebdd 	.word	0x0000ebdd
    ef20:	200010d4 	.word	0x200010d4
    ef24:	0000ea29 	.word	0x0000ea29
    ef28:	00010051 	.word	0x00010051
    ef2c:	41002000 	.word	0x41002000
    ef30:	0000ff75 	.word	0x0000ff75
    ef34:	0000e91f 	.word	0x0000e91f

0000ef38 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    ef38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef3a:	46d6      	mov	lr, sl
    ef3c:	4647      	mov	r7, r8
    ef3e:	b580      	push	{r7, lr}
    ef40:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    ef42:	2438      	movs	r4, #56	; 0x38
    ef44:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    ef46:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    ef48:	2d05      	cmp	r5, #5
    ef4a:	d002      	beq.n	ef52 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    ef4c:	3412      	adds	r4, #18
	if (length == 0) {
    ef4e:	2a00      	cmp	r2, #0
    ef50:	d105      	bne.n	ef5e <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    ef52:	0020      	movs	r0, r4
    ef54:	b003      	add	sp, #12
    ef56:	bc0c      	pop	{r2, r3}
    ef58:	4690      	mov	r8, r2
    ef5a:	469a      	mov	sl, r3
    ef5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    ef5e:	79c4      	ldrb	r4, [r0, #7]
    ef60:	2c00      	cmp	r4, #0
    ef62:	d144      	bne.n	efee <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    ef64:	341c      	adds	r4, #28
    ef66:	e7f4      	b.n	ef52 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    ef68:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ef6a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    ef6c:	423c      	tst	r4, r7
    ef6e:	d0fc      	beq.n	ef6a <spi_read_buffer_wait+0x32>
    ef70:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    ef72:	423c      	tst	r4, r7
    ef74:	d01a      	beq.n	efac <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ef76:	4644      	mov	r4, r8
    ef78:	62ac      	str	r4, [r5, #40]	; 0x28
    ef7a:	e017      	b.n	efac <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ef7c:	7984      	ldrb	r4, [r0, #6]
    ef7e:	2c01      	cmp	r4, #1
    ef80:	d026      	beq.n	efd0 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ef82:	6aad      	ldr	r5, [r5, #40]	; 0x28
    ef84:	b2ec      	uxtb	r4, r5
    ef86:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    ef88:	9c01      	ldr	r4, [sp, #4]
    ef8a:	2c00      	cmp	r4, #0
    ef8c:	d13a      	bne.n	f004 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    ef8e:	1c75      	adds	r5, r6, #1
    ef90:	b2ad      	uxth	r5, r5
    ef92:	4664      	mov	r4, ip
    ef94:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ef96:	7984      	ldrb	r4, [r0, #6]
    ef98:	2c01      	cmp	r4, #1
    ef9a:	d01e      	beq.n	efda <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    ef9c:	002e      	movs	r6, r5
	while (length--) {
    ef9e:	3a01      	subs	r2, #1
    efa0:	b292      	uxth	r2, r2
    efa2:	4552      	cmp	r2, sl
    efa4:	d01f      	beq.n	efe6 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    efa6:	7944      	ldrb	r4, [r0, #5]
    efa8:	2c01      	cmp	r4, #1
    efaa:	d0dd      	beq.n	ef68 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    efac:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    efae:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    efb0:	421c      	tst	r4, r3
    efb2:	d0fc      	beq.n	efae <spi_read_buffer_wait+0x76>
    efb4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    efb6:	421c      	tst	r4, r3
    efb8:	d017      	beq.n	efea <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    efba:	8b6c      	ldrh	r4, [r5, #26]
    efbc:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    efbe:	2400      	movs	r4, #0
    efc0:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    efc2:	4664      	mov	r4, ip
    efc4:	421c      	tst	r4, r3
    efc6:	d0d9      	beq.n	ef7c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    efc8:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    efca:	241e      	movs	r4, #30
    efcc:	9401      	str	r4, [sp, #4]
    efce:	e7d5      	b.n	ef7c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    efd0:	6aac      	ldr	r4, [r5, #40]	; 0x28
    efd2:	05e4      	lsls	r4, r4, #23
    efd4:	0de4      	lsrs	r4, r4, #23
    efd6:	46a4      	mov	ip, r4
    efd8:	e7d6      	b.n	ef88 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    efda:	3602      	adds	r6, #2
    efdc:	b2b6      	uxth	r6, r6
    efde:	4664      	mov	r4, ip
    efe0:	0a24      	lsrs	r4, r4, #8
    efe2:	554c      	strb	r4, [r1, r5]
    efe4:	e7db      	b.n	ef9e <spi_read_buffer_wait+0x66>
    efe6:	9c01      	ldr	r4, [sp, #4]
    efe8:	e7b3      	b.n	ef52 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    efea:	2410      	movs	r4, #16
    efec:	e7b1      	b.n	ef52 <spi_read_buffer_wait+0x1a>
	while (length--) {
    efee:	3a01      	subs	r2, #1
    eff0:	b292      	uxth	r2, r2
    eff2:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    eff4:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    eff6:	05db      	lsls	r3, r3, #23
    eff8:	0ddb      	lsrs	r3, r3, #23
    effa:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    effc:	2304      	movs	r3, #4
	while (length--) {
    effe:	4c02      	ldr	r4, [pc, #8]	; (f008 <spi_read_buffer_wait+0xd0>)
    f000:	46a2      	mov	sl, r4
    f002:	e7d0      	b.n	efa6 <spi_read_buffer_wait+0x6e>
    f004:	9c01      	ldr	r4, [sp, #4]
    f006:	e7a4      	b.n	ef52 <spi_read_buffer_wait+0x1a>
    f008:	0000ffff 	.word	0x0000ffff

0000f00c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    f00c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    f00e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    f010:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    f012:	2c01      	cmp	r4, #1
    f014:	d001      	beq.n	f01a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    f016:	0018      	movs	r0, r3
    f018:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    f01a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    f01c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    f01e:	2c00      	cmp	r4, #0
    f020:	d1f9      	bne.n	f016 <spi_select_slave+0xa>
		if (select) {
    f022:	2a00      	cmp	r2, #0
    f024:	d058      	beq.n	f0d8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    f026:	784b      	ldrb	r3, [r1, #1]
    f028:	2b00      	cmp	r3, #0
    f02a:	d044      	beq.n	f0b6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f02c:	6803      	ldr	r3, [r0, #0]
    f02e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    f030:	07db      	lsls	r3, r3, #31
    f032:	d410      	bmi.n	f056 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    f034:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    f036:	09d1      	lsrs	r1, r2, #7
		return NULL;
    f038:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    f03a:	2900      	cmp	r1, #0
    f03c:	d104      	bne.n	f048 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    f03e:	0953      	lsrs	r3, r2, #5
    f040:	01db      	lsls	r3, r3, #7
    f042:	492e      	ldr	r1, [pc, #184]	; (f0fc <spi_select_slave+0xf0>)
    f044:	468c      	mov	ip, r1
    f046:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f048:	211f      	movs	r1, #31
    f04a:	4011      	ands	r1, r2
    f04c:	2201      	movs	r2, #1
    f04e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    f050:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    f052:	2305      	movs	r3, #5
    f054:	e7df      	b.n	f016 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    f056:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    f058:	09d4      	lsrs	r4, r2, #7
		return NULL;
    f05a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    f05c:	2c00      	cmp	r4, #0
    f05e:	d104      	bne.n	f06a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    f060:	0953      	lsrs	r3, r2, #5
    f062:	01db      	lsls	r3, r3, #7
    f064:	4c25      	ldr	r4, [pc, #148]	; (f0fc <spi_select_slave+0xf0>)
    f066:	46a4      	mov	ip, r4
    f068:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f06a:	241f      	movs	r4, #31
    f06c:	4014      	ands	r4, r2
    f06e:	2201      	movs	r2, #1
    f070:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    f072:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    f074:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f076:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    f078:	07d2      	lsls	r2, r2, #31
    f07a:	d501      	bpl.n	f080 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f07c:	788a      	ldrb	r2, [r1, #2]
    f07e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    f080:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    f082:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    f084:	2a00      	cmp	r2, #0
    f086:	d1c6      	bne.n	f016 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f088:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    f08a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f08c:	7e13      	ldrb	r3, [r2, #24]
    f08e:	420b      	tst	r3, r1
    f090:	d0fc      	beq.n	f08c <spi_select_slave+0x80>
    f092:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    f094:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    f096:	0749      	lsls	r1, r1, #29
    f098:	d5bd      	bpl.n	f016 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f09a:	8b53      	ldrh	r3, [r2, #26]
    f09c:	075b      	lsls	r3, r3, #29
    f09e:	d501      	bpl.n	f0a4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f0a0:	2304      	movs	r3, #4
    f0a2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f0a4:	7983      	ldrb	r3, [r0, #6]
    f0a6:	2b01      	cmp	r3, #1
    f0a8:	d002      	beq.n	f0b0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    f0aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f0ac:	2300      	movs	r3, #0
    f0ae:	e7b2      	b.n	f016 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    f0b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f0b2:	2300      	movs	r3, #0
    f0b4:	e7af      	b.n	f016 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    f0b6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    f0b8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    f0ba:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    f0bc:	2900      	cmp	r1, #0
    f0be:	d104      	bne.n	f0ca <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    f0c0:	0953      	lsrs	r3, r2, #5
    f0c2:	01db      	lsls	r3, r3, #7
    f0c4:	490d      	ldr	r1, [pc, #52]	; (f0fc <spi_select_slave+0xf0>)
    f0c6:	468c      	mov	ip, r1
    f0c8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f0ca:	211f      	movs	r1, #31
    f0cc:	4011      	ands	r1, r2
    f0ce:	2201      	movs	r2, #1
    f0d0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    f0d2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    f0d4:	2300      	movs	r3, #0
    f0d6:	e79e      	b.n	f016 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    f0d8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    f0da:	09d1      	lsrs	r1, r2, #7
		return NULL;
    f0dc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    f0de:	2900      	cmp	r1, #0
    f0e0:	d104      	bne.n	f0ec <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    f0e2:	0953      	lsrs	r3, r2, #5
    f0e4:	01db      	lsls	r3, r3, #7
    f0e6:	4905      	ldr	r1, [pc, #20]	; (f0fc <spi_select_slave+0xf0>)
    f0e8:	468c      	mov	ip, r1
    f0ea:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    f0ec:	211f      	movs	r1, #31
    f0ee:	4011      	ands	r1, r2
    f0f0:	2201      	movs	r2, #1
    f0f2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    f0f4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    f0f6:	2300      	movs	r3, #0
    f0f8:	e78d      	b.n	f016 <spi_select_slave+0xa>
    f0fa:	46c0      	nop			; (mov r8, r8)
    f0fc:	41004400 	.word	0x41004400

0000f100 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    f100:	b5f0      	push	{r4, r5, r6, r7, lr}
    f102:	46de      	mov	lr, fp
    f104:	4657      	mov	r7, sl
    f106:	464e      	mov	r6, r9
    f108:	4645      	mov	r5, r8
    f10a:	b5e0      	push	{r5, r6, r7, lr}
    f10c:	b083      	sub	sp, #12
    f10e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    f110:	2338      	movs	r3, #56	; 0x38
    f112:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    f114:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    f116:	2c05      	cmp	r4, #5
    f118:	d002      	beq.n	f120 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    f11a:	3312      	adds	r3, #18
	if (length == 0) {
    f11c:	2a00      	cmp	r2, #0
    f11e:	d14b      	bne.n	f1b8 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    f120:	0018      	movs	r0, r3
    f122:	b003      	add	sp, #12
    f124:	bc3c      	pop	{r2, r3, r4, r5}
    f126:	4690      	mov	r8, r2
    f128:	4699      	mov	r9, r3
    f12a:	46a2      	mov	sl, r4
    f12c:	46ab      	mov	fp, r5
    f12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    f130:	3702      	adds	r7, #2
    f132:	b2bf      	uxth	r7, r7
    f134:	4641      	mov	r1, r8
    f136:	4653      	mov	r3, sl
    f138:	5c59      	ldrb	r1, [r3, r1]
    f13a:	0209      	lsls	r1, r1, #8
    f13c:	465b      	mov	r3, fp
    f13e:	430b      	orrs	r3, r1
    f140:	e018      	b.n	f174 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f142:	7983      	ldrb	r3, [r0, #6]
    f144:	2b01      	cmp	r3, #1
    f146:	d02a      	beq.n	f19e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    f148:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    f14a:	3e01      	subs	r6, #1
    f14c:	b2b6      	uxth	r6, r6
    f14e:	4566      	cmp	r6, ip
    f150:	d027      	beq.n	f1a2 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f152:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    f154:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    f156:	4223      	tst	r3, r4
    f158:	d0fc      	beq.n	f154 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    f15a:	1c7b      	adds	r3, r7, #1
    f15c:	b29b      	uxth	r3, r3
    f15e:	4698      	mov	r8, r3
    f160:	4653      	mov	r3, sl
    f162:	5ddb      	ldrb	r3, [r3, r7]
    f164:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f166:	7981      	ldrb	r1, [r0, #6]
    f168:	2901      	cmp	r1, #1
    f16a:	d0e1      	beq.n	f130 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    f16c:	4669      	mov	r1, sp
    f16e:	80cb      	strh	r3, [r1, #6]
    f170:	88cb      	ldrh	r3, [r1, #6]
    f172:	4647      	mov	r7, r8
    f174:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    f176:	4221      	tst	r1, r4
    f178:	d002      	beq.n	f180 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    f17a:	05db      	lsls	r3, r3, #23
    f17c:	0ddb      	lsrs	r3, r3, #23
    f17e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    f180:	79c3      	ldrb	r3, [r0, #7]
    f182:	2b00      	cmp	r3, #0
    f184:	d0e1      	beq.n	f14a <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f186:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    f188:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    f18a:	422b      	tst	r3, r5
    f18c:	d0fc      	beq.n	f188 <spi_write_buffer_wait+0x88>
    f18e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    f190:	422b      	tst	r3, r5
    f192:	d0da      	beq.n	f14a <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f194:	8b53      	ldrh	r3, [r2, #26]
    f196:	422b      	tst	r3, r5
    f198:	d0d3      	beq.n	f142 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f19a:	8355      	strh	r5, [r2, #26]
    f19c:	e7d1      	b.n	f142 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    f19e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    f1a0:	e7d3      	b.n	f14a <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    f1a2:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    f1a4:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    f1a6:	2a01      	cmp	r2, #1
    f1a8:	d1ba      	bne.n	f120 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    f1aa:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    f1ac:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    f1ae:	7e0b      	ldrb	r3, [r1, #24]
    f1b0:	4213      	tst	r3, r2
    f1b2:	d0fc      	beq.n	f1ae <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    f1b4:	2300      	movs	r3, #0
    f1b6:	e7b3      	b.n	f120 <spi_write_buffer_wait+0x20>
	while (length--) {
    f1b8:	3a01      	subs	r2, #1
    f1ba:	b296      	uxth	r6, r2
    f1bc:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    f1be:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    f1c0:	2504      	movs	r5, #4
	while (length--) {
    f1c2:	4b01      	ldr	r3, [pc, #4]	; (f1c8 <spi_write_buffer_wait+0xc8>)
    f1c4:	469c      	mov	ip, r3
    f1c6:	e7c4      	b.n	f152 <spi_write_buffer_wait+0x52>
    f1c8:	0000ffff 	.word	0x0000ffff

0000f1cc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    f1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    f1ce:	0080      	lsls	r0, r0, #2
    f1d0:	4b70      	ldr	r3, [pc, #448]	; (f394 <_spi_interrupt_handler+0x1c8>)
    f1d2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    f1d4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    f1d6:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    f1d8:	5ce7      	ldrb	r7, [r4, r3]
    f1da:	2236      	movs	r2, #54	; 0x36
    f1dc:	5ca2      	ldrb	r2, [r4, r2]
    f1de:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    f1e0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    f1e2:	7db5      	ldrb	r5, [r6, #22]
    f1e4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    f1e6:	07eb      	lsls	r3, r5, #31
    f1e8:	d502      	bpl.n	f1f0 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    f1ea:	7963      	ldrb	r3, [r4, #5]
    f1ec:	2b01      	cmp	r3, #1
    f1ee:	d01e      	beq.n	f22e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    f1f0:	076b      	lsls	r3, r5, #29
    f1f2:	d511      	bpl.n	f218 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    f1f4:	8b73      	ldrh	r3, [r6, #26]
    f1f6:	075b      	lsls	r3, r3, #29
    f1f8:	d55a      	bpl.n	f2b0 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    f1fa:	7a63      	ldrb	r3, [r4, #9]
    f1fc:	2b01      	cmp	r3, #1
    f1fe:	d008      	beq.n	f212 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    f200:	221e      	movs	r2, #30
    f202:	2338      	movs	r3, #56	; 0x38
    f204:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    f206:	3b35      	subs	r3, #53	; 0x35
    f208:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    f20a:	3302      	adds	r3, #2
    f20c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    f20e:	073b      	lsls	r3, r7, #28
    f210:	d44a      	bmi.n	f2a8 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    f212:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    f214:	2304      	movs	r3, #4
    f216:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    f218:	07ab      	lsls	r3, r5, #30
    f21a:	d503      	bpl.n	f224 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    f21c:	7963      	ldrb	r3, [r4, #5]
    f21e:	2b01      	cmp	r3, #1
    f220:	d100      	bne.n	f224 <_spi_interrupt_handler+0x58>
    f222:	e097      	b.n	f354 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    f224:	b26d      	sxtb	r5, r5
    f226:	2d00      	cmp	r5, #0
    f228:	da00      	bge.n	f22c <_spi_interrupt_handler+0x60>
    f22a:	e0a9      	b.n	f380 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    f22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    f22e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    f230:	2b00      	cmp	r3, #0
    f232:	d022      	beq.n	f27a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    f234:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    f236:	2b00      	cmp	r3, #0
    f238:	d0da      	beq.n	f1f0 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    f23a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    f23c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    f23e:	7813      	ldrb	r3, [r2, #0]
    f240:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    f242:	1c50      	adds	r0, r2, #1
    f244:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f246:	79a0      	ldrb	r0, [r4, #6]
    f248:	2801      	cmp	r0, #1
    f24a:	d027      	beq.n	f29c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    f24c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    f24e:	05db      	lsls	r3, r3, #23
    f250:	0ddb      	lsrs	r3, r3, #23
    f252:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    f254:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    f256:	3b01      	subs	r3, #1
    f258:	b29b      	uxth	r3, r3
    f25a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    f25c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    f25e:	b29b      	uxth	r3, r3
    f260:	2b00      	cmp	r3, #0
    f262:	d1c5      	bne.n	f1f0 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    f264:	3301      	adds	r3, #1
    f266:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    f268:	7a63      	ldrb	r3, [r4, #9]
    f26a:	2b01      	cmp	r3, #1
    f26c:	d1c0      	bne.n	f1f0 <_spi_interrupt_handler+0x24>
    f26e:	79e3      	ldrb	r3, [r4, #7]
    f270:	2b00      	cmp	r3, #0
    f272:	d1bd      	bne.n	f1f0 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    f274:	3302      	adds	r3, #2
    f276:	75b3      	strb	r3, [r6, #22]
    f278:	e7ba      	b.n	f1f0 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    f27a:	4b47      	ldr	r3, [pc, #284]	; (f398 <_spi_interrupt_handler+0x1cc>)
    f27c:	881b      	ldrh	r3, [r3, #0]
    f27e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    f280:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f282:	3b01      	subs	r3, #1
    f284:	b29b      	uxth	r3, r3
    f286:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    f288:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f28a:	b29b      	uxth	r3, r3
    f28c:	2b00      	cmp	r3, #0
    f28e:	d101      	bne.n	f294 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    f290:	3301      	adds	r3, #1
    f292:	7533      	strb	r3, [r6, #20]
		if (0
    f294:	7963      	ldrb	r3, [r4, #5]
    f296:	2b01      	cmp	r3, #1
    f298:	d0cc      	beq.n	f234 <_spi_interrupt_handler+0x68>
    f29a:	e7a9      	b.n	f1f0 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    f29c:	7850      	ldrb	r0, [r2, #1]
    f29e:	0200      	lsls	r0, r0, #8
    f2a0:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    f2a2:	3202      	adds	r2, #2
    f2a4:	62e2      	str	r2, [r4, #44]	; 0x2c
    f2a6:	e7d2      	b.n	f24e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    f2a8:	0020      	movs	r0, r4
    f2aa:	69a3      	ldr	r3, [r4, #24]
    f2ac:	4798      	blx	r3
    f2ae:	e7b0      	b.n	f212 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    f2b0:	7a63      	ldrb	r3, [r4, #9]
    f2b2:	2b01      	cmp	r3, #1
    f2b4:	d028      	beq.n	f308 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    f2b6:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    f2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f2ba:	05db      	lsls	r3, r3, #23
    f2bc:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    f2be:	b2da      	uxtb	r2, r3
    f2c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    f2c2:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    f2c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f2c6:	1c51      	adds	r1, r2, #1
    f2c8:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    f2ca:	79a1      	ldrb	r1, [r4, #6]
    f2cc:	2901      	cmp	r1, #1
    f2ce:	d034      	beq.n	f33a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    f2d0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f2d2:	3b01      	subs	r3, #1
    f2d4:	b29b      	uxth	r3, r3
    f2d6:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    f2d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    f2da:	b29b      	uxth	r3, r3
    f2dc:	2b00      	cmp	r3, #0
    f2de:	d000      	beq.n	f2e2 <_spi_interrupt_handler+0x116>
    f2e0:	e79a      	b.n	f218 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    f2e2:	2200      	movs	r2, #0
    f2e4:	3338      	adds	r3, #56	; 0x38
    f2e6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    f2e8:	3b34      	subs	r3, #52	; 0x34
    f2ea:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    f2ec:	7a63      	ldrb	r3, [r4, #9]
    f2ee:	2b02      	cmp	r3, #2
    f2f0:	d029      	beq.n	f346 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    f2f2:	7a63      	ldrb	r3, [r4, #9]
    f2f4:	2b00      	cmp	r3, #0
    f2f6:	d000      	beq.n	f2fa <_spi_interrupt_handler+0x12e>
    f2f8:	e78e      	b.n	f218 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    f2fa:	07bb      	lsls	r3, r7, #30
    f2fc:	d400      	bmi.n	f300 <_spi_interrupt_handler+0x134>
    f2fe:	e78b      	b.n	f218 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    f300:	0020      	movs	r0, r4
    f302:	6923      	ldr	r3, [r4, #16]
    f304:	4798      	blx	r3
    f306:	e787      	b.n	f218 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    f308:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    f30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    f30c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f30e:	3b01      	subs	r3, #1
    f310:	b29b      	uxth	r3, r3
    f312:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    f314:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    f316:	b29b      	uxth	r3, r3
    f318:	2b00      	cmp	r3, #0
    f31a:	d000      	beq.n	f31e <_spi_interrupt_handler+0x152>
    f31c:	e77c      	b.n	f218 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    f31e:	3304      	adds	r3, #4
    f320:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    f322:	2200      	movs	r2, #0
    f324:	3334      	adds	r3, #52	; 0x34
    f326:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    f328:	3b35      	subs	r3, #53	; 0x35
    f32a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    f32c:	07fb      	lsls	r3, r7, #31
    f32e:	d400      	bmi.n	f332 <_spi_interrupt_handler+0x166>
    f330:	e772      	b.n	f218 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    f332:	0020      	movs	r0, r4
    f334:	68e3      	ldr	r3, [r4, #12]
    f336:	4798      	blx	r3
    f338:	e76e      	b.n	f218 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    f33a:	0a1b      	lsrs	r3, r3, #8
    f33c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    f33e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f340:	3301      	adds	r3, #1
    f342:	62a3      	str	r3, [r4, #40]	; 0x28
    f344:	e7c4      	b.n	f2d0 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    f346:	077b      	lsls	r3, r7, #29
    f348:	d400      	bmi.n	f34c <_spi_interrupt_handler+0x180>
    f34a:	e765      	b.n	f218 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    f34c:	0020      	movs	r0, r4
    f34e:	6963      	ldr	r3, [r4, #20]
    f350:	4798      	blx	r3
    f352:	e761      	b.n	f218 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    f354:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    f356:	2b01      	cmp	r3, #1
    f358:	d000      	beq.n	f35c <_spi_interrupt_handler+0x190>
    f35a:	e763      	b.n	f224 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    f35c:	79e3      	ldrb	r3, [r4, #7]
    f35e:	2b00      	cmp	r3, #0
    f360:	d000      	beq.n	f364 <_spi_interrupt_handler+0x198>
    f362:	e75f      	b.n	f224 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    f364:	3302      	adds	r3, #2
    f366:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    f368:	3301      	adds	r3, #1
    f36a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    f36c:	2200      	movs	r2, #0
    f36e:	3335      	adds	r3, #53	; 0x35
    f370:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    f372:	07fb      	lsls	r3, r7, #31
    f374:	d400      	bmi.n	f378 <_spi_interrupt_handler+0x1ac>
    f376:	e755      	b.n	f224 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    f378:	0020      	movs	r0, r4
    f37a:	68e3      	ldr	r3, [r4, #12]
    f37c:	4798      	blx	r3
    f37e:	e751      	b.n	f224 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    f380:	2380      	movs	r3, #128	; 0x80
    f382:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    f384:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    f386:	067b      	lsls	r3, r7, #25
    f388:	d400      	bmi.n	f38c <_spi_interrupt_handler+0x1c0>
    f38a:	e74f      	b.n	f22c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    f38c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f38e:	0020      	movs	r0, r4
    f390:	4798      	blx	r3
}
    f392:	e74b      	b.n	f22c <_spi_interrupt_handler+0x60>
    f394:	200010d4 	.word	0x200010d4
    f398:	200010ec 	.word	0x200010ec

0000f39c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    f39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f39e:	46de      	mov	lr, fp
    f3a0:	4657      	mov	r7, sl
    f3a2:	464e      	mov	r6, r9
    f3a4:	4645      	mov	r5, r8
    f3a6:	b5e0      	push	{r5, r6, r7, lr}
    f3a8:	b091      	sub	sp, #68	; 0x44
    f3aa:	0005      	movs	r5, r0
    f3ac:	000c      	movs	r4, r1
    f3ae:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    f3b0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f3b2:	0008      	movs	r0, r1
    f3b4:	4bbc      	ldr	r3, [pc, #752]	; (f6a8 <usart_init+0x30c>)
    f3b6:	4798      	blx	r3
    f3b8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    f3ba:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    f3bc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    f3be:	07db      	lsls	r3, r3, #31
    f3c0:	d506      	bpl.n	f3d0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    f3c2:	b011      	add	sp, #68	; 0x44
    f3c4:	bc3c      	pop	{r2, r3, r4, r5}
    f3c6:	4690      	mov	r8, r2
    f3c8:	4699      	mov	r9, r3
    f3ca:	46a2      	mov	sl, r4
    f3cc:	46ab      	mov	fp, r5
    f3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    f3d0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    f3d2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    f3d4:	079b      	lsls	r3, r3, #30
    f3d6:	d4f4      	bmi.n	f3c2 <usart_init+0x26>
    f3d8:	49b4      	ldr	r1, [pc, #720]	; (f6ac <usart_init+0x310>)
    f3da:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    f3dc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    f3de:	2301      	movs	r3, #1
    f3e0:	40bb      	lsls	r3, r7
    f3e2:	4303      	orrs	r3, r0
    f3e4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    f3e6:	a90f      	add	r1, sp, #60	; 0x3c
    f3e8:	272d      	movs	r7, #45	; 0x2d
    f3ea:	5df3      	ldrb	r3, [r6, r7]
    f3ec:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f3ee:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    f3f0:	b2d3      	uxtb	r3, r2
    f3f2:	9302      	str	r3, [sp, #8]
    f3f4:	0018      	movs	r0, r3
    f3f6:	4bae      	ldr	r3, [pc, #696]	; (f6b0 <usart_init+0x314>)
    f3f8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    f3fa:	9802      	ldr	r0, [sp, #8]
    f3fc:	4bad      	ldr	r3, [pc, #692]	; (f6b4 <usart_init+0x318>)
    f3fe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    f400:	5df0      	ldrb	r0, [r6, r7]
    f402:	2100      	movs	r1, #0
    f404:	4bac      	ldr	r3, [pc, #688]	; (f6b8 <usart_init+0x31c>)
    f406:	4798      	blx	r3
	module->character_size = config->character_size;
    f408:	7af3      	ldrb	r3, [r6, #11]
    f40a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    f40c:	2324      	movs	r3, #36	; 0x24
    f40e:	5cf3      	ldrb	r3, [r6, r3]
    f410:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    f412:	2325      	movs	r3, #37	; 0x25
    f414:	5cf3      	ldrb	r3, [r6, r3]
    f416:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    f418:	7ef3      	ldrb	r3, [r6, #27]
    f41a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    f41c:	7f33      	ldrb	r3, [r6, #28]
    f41e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    f420:	682b      	ldr	r3, [r5, #0]
    f422:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    f424:	0018      	movs	r0, r3
    f426:	4ba0      	ldr	r3, [pc, #640]	; (f6a8 <usart_init+0x30c>)
    f428:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    f42a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    f42c:	2200      	movs	r2, #0
    f42e:	230e      	movs	r3, #14
    f430:	a906      	add	r1, sp, #24
    f432:	468c      	mov	ip, r1
    f434:	4463      	add	r3, ip
    f436:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    f438:	8a32      	ldrh	r2, [r6, #16]
    f43a:	9202      	str	r2, [sp, #8]
    f43c:	2380      	movs	r3, #128	; 0x80
    f43e:	01db      	lsls	r3, r3, #7
    f440:	429a      	cmp	r2, r3
    f442:	d100      	bne.n	f446 <usart_init+0xaa>
    f444:	e09e      	b.n	f584 <usart_init+0x1e8>
    f446:	d90f      	bls.n	f468 <usart_init+0xcc>
    f448:	23c0      	movs	r3, #192	; 0xc0
    f44a:	01db      	lsls	r3, r3, #7
    f44c:	9a02      	ldr	r2, [sp, #8]
    f44e:	429a      	cmp	r2, r3
    f450:	d100      	bne.n	f454 <usart_init+0xb8>
    f452:	e092      	b.n	f57a <usart_init+0x1de>
    f454:	2380      	movs	r3, #128	; 0x80
    f456:	021b      	lsls	r3, r3, #8
    f458:	429a      	cmp	r2, r3
    f45a:	d000      	beq.n	f45e <usart_init+0xc2>
    f45c:	e11f      	b.n	f69e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    f45e:	2303      	movs	r3, #3
    f460:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f462:	2300      	movs	r3, #0
    f464:	9307      	str	r3, [sp, #28]
    f466:	e008      	b.n	f47a <usart_init+0xde>
	switch (config->sample_rate) {
    f468:	2380      	movs	r3, #128	; 0x80
    f46a:	019b      	lsls	r3, r3, #6
    f46c:	429a      	cmp	r2, r3
    f46e:	d000      	beq.n	f472 <usart_init+0xd6>
    f470:	e115      	b.n	f69e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    f472:	2310      	movs	r3, #16
    f474:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    f476:	3b0f      	subs	r3, #15
    f478:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    f47a:	6833      	ldr	r3, [r6, #0]
    f47c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    f47e:	68f3      	ldr	r3, [r6, #12]
    f480:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    f482:	6973      	ldr	r3, [r6, #20]
    f484:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    f486:	7e33      	ldrb	r3, [r6, #24]
    f488:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    f48a:	2326      	movs	r3, #38	; 0x26
    f48c:	5cf3      	ldrb	r3, [r6, r3]
    f48e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    f490:	6873      	ldr	r3, [r6, #4]
    f492:	4699      	mov	r9, r3
	switch (transfer_mode)
    f494:	2b00      	cmp	r3, #0
    f496:	d100      	bne.n	f49a <usart_init+0xfe>
    f498:	e0a0      	b.n	f5dc <usart_init+0x240>
    f49a:	2380      	movs	r3, #128	; 0x80
    f49c:	055b      	lsls	r3, r3, #21
    f49e:	4599      	cmp	r9, r3
    f4a0:	d100      	bne.n	f4a4 <usart_init+0x108>
    f4a2:	e084      	b.n	f5ae <usart_init+0x212>
	if(config->encoding_format_enable) {
    f4a4:	7e73      	ldrb	r3, [r6, #25]
    f4a6:	2b00      	cmp	r3, #0
    f4a8:	d002      	beq.n	f4b0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    f4aa:	7eb3      	ldrb	r3, [r6, #26]
    f4ac:	4642      	mov	r2, r8
    f4ae:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    f4b0:	682a      	ldr	r2, [r5, #0]
    f4b2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    f4b4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    f4b6:	2b00      	cmp	r3, #0
    f4b8:	d1fc      	bne.n	f4b4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    f4ba:	330e      	adds	r3, #14
    f4bc:	aa06      	add	r2, sp, #24
    f4be:	4694      	mov	ip, r2
    f4c0:	4463      	add	r3, ip
    f4c2:	881b      	ldrh	r3, [r3, #0]
    f4c4:	4642      	mov	r2, r8
    f4c6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    f4c8:	9b05      	ldr	r3, [sp, #20]
    f4ca:	9a03      	ldr	r2, [sp, #12]
    f4cc:	4313      	orrs	r3, r2
    f4ce:	9a04      	ldr	r2, [sp, #16]
    f4d0:	4313      	orrs	r3, r2
    f4d2:	464a      	mov	r2, r9
    f4d4:	4313      	orrs	r3, r2
    f4d6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    f4d8:	465b      	mov	r3, fp
    f4da:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    f4dc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    f4de:	4653      	mov	r3, sl
    f4e0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    f4e2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    f4e4:	2327      	movs	r3, #39	; 0x27
    f4e6:	5cf3      	ldrb	r3, [r6, r3]
    f4e8:	2b00      	cmp	r3, #0
    f4ea:	d101      	bne.n	f4f0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    f4ec:	3304      	adds	r3, #4
    f4ee:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    f4f0:	7e73      	ldrb	r3, [r6, #25]
    f4f2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    f4f4:	7f32      	ldrb	r2, [r6, #28]
    f4f6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    f4f8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    f4fa:	7f72      	ldrb	r2, [r6, #29]
    f4fc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    f4fe:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    f500:	2224      	movs	r2, #36	; 0x24
    f502:	5cb2      	ldrb	r2, [r6, r2]
    f504:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    f506:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    f508:	2225      	movs	r2, #37	; 0x25
    f50a:	5cb2      	ldrb	r2, [r6, r2]
    f50c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    f50e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    f510:	7ab1      	ldrb	r1, [r6, #10]
    f512:	7af2      	ldrb	r2, [r6, #11]
    f514:	4311      	orrs	r1, r2
    f516:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    f518:	8933      	ldrh	r3, [r6, #8]
    f51a:	2bff      	cmp	r3, #255	; 0xff
    f51c:	d100      	bne.n	f520 <usart_init+0x184>
    f51e:	e081      	b.n	f624 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    f520:	2280      	movs	r2, #128	; 0x80
    f522:	0452      	lsls	r2, r2, #17
    f524:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    f526:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    f528:	232c      	movs	r3, #44	; 0x2c
    f52a:	5cf3      	ldrb	r3, [r6, r3]
    f52c:	2b00      	cmp	r3, #0
    f52e:	d103      	bne.n	f538 <usart_init+0x19c>
    f530:	4b62      	ldr	r3, [pc, #392]	; (f6bc <usart_init+0x320>)
    f532:	789b      	ldrb	r3, [r3, #2]
    f534:	079b      	lsls	r3, r3, #30
    f536:	d501      	bpl.n	f53c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    f538:	2380      	movs	r3, #128	; 0x80
    f53a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    f53c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    f53e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    f540:	2b00      	cmp	r3, #0
    f542:	d1fc      	bne.n	f53e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    f544:	4643      	mov	r3, r8
    f546:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    f548:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    f54a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    f54c:	2b00      	cmp	r3, #0
    f54e:	d1fc      	bne.n	f54a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    f550:	4643      	mov	r3, r8
    f552:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    f554:	ab0e      	add	r3, sp, #56	; 0x38
    f556:	2280      	movs	r2, #128	; 0x80
    f558:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    f55a:	2200      	movs	r2, #0
    f55c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    f55e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    f560:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    f562:	6b33      	ldr	r3, [r6, #48]	; 0x30
    f564:	930a      	str	r3, [sp, #40]	; 0x28
    f566:	6b73      	ldr	r3, [r6, #52]	; 0x34
    f568:	930b      	str	r3, [sp, #44]	; 0x2c
    f56a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    f56c:	930c      	str	r3, [sp, #48]	; 0x30
    f56e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    f570:	9302      	str	r3, [sp, #8]
    f572:	930d      	str	r3, [sp, #52]	; 0x34
    f574:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    f576:	ae0a      	add	r6, sp, #40	; 0x28
    f578:	e063      	b.n	f642 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    f57a:	2308      	movs	r3, #8
    f57c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    f57e:	3b07      	subs	r3, #7
    f580:	9307      	str	r3, [sp, #28]
    f582:	e77a      	b.n	f47a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    f584:	6833      	ldr	r3, [r6, #0]
    f586:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    f588:	68f3      	ldr	r3, [r6, #12]
    f58a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    f58c:	6973      	ldr	r3, [r6, #20]
    f58e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    f590:	7e33      	ldrb	r3, [r6, #24]
    f592:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    f594:	2326      	movs	r3, #38	; 0x26
    f596:	5cf3      	ldrb	r3, [r6, r3]
    f598:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    f59a:	6873      	ldr	r3, [r6, #4]
    f59c:	4699      	mov	r9, r3
	switch (transfer_mode)
    f59e:	2b00      	cmp	r3, #0
    f5a0:	d018      	beq.n	f5d4 <usart_init+0x238>
    f5a2:	2380      	movs	r3, #128	; 0x80
    f5a4:	055b      	lsls	r3, r3, #21
    f5a6:	4599      	cmp	r9, r3
    f5a8:	d001      	beq.n	f5ae <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    f5aa:	2000      	movs	r0, #0
    f5ac:	e025      	b.n	f5fa <usart_init+0x25e>
			if (!config->use_external_clock) {
    f5ae:	2327      	movs	r3, #39	; 0x27
    f5b0:	5cf3      	ldrb	r3, [r6, r3]
    f5b2:	2b00      	cmp	r3, #0
    f5b4:	d000      	beq.n	f5b8 <usart_init+0x21c>
    f5b6:	e775      	b.n	f4a4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    f5b8:	6a33      	ldr	r3, [r6, #32]
    f5ba:	001f      	movs	r7, r3
    f5bc:	b2c0      	uxtb	r0, r0
    f5be:	4b40      	ldr	r3, [pc, #256]	; (f6c0 <usart_init+0x324>)
    f5c0:	4798      	blx	r3
    f5c2:	0001      	movs	r1, r0
    f5c4:	220e      	movs	r2, #14
    f5c6:	ab06      	add	r3, sp, #24
    f5c8:	469c      	mov	ip, r3
    f5ca:	4462      	add	r2, ip
    f5cc:	0038      	movs	r0, r7
    f5ce:	4b3d      	ldr	r3, [pc, #244]	; (f6c4 <usart_init+0x328>)
    f5d0:	4798      	blx	r3
    f5d2:	e012      	b.n	f5fa <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    f5d4:	2308      	movs	r3, #8
    f5d6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f5d8:	2300      	movs	r3, #0
    f5da:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    f5dc:	2327      	movs	r3, #39	; 0x27
    f5de:	5cf3      	ldrb	r3, [r6, r3]
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d00e      	beq.n	f602 <usart_init+0x266>
				status_code =
    f5e4:	9b06      	ldr	r3, [sp, #24]
    f5e6:	9300      	str	r3, [sp, #0]
    f5e8:	9b07      	ldr	r3, [sp, #28]
    f5ea:	220e      	movs	r2, #14
    f5ec:	a906      	add	r1, sp, #24
    f5ee:	468c      	mov	ip, r1
    f5f0:	4462      	add	r2, ip
    f5f2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    f5f4:	6a30      	ldr	r0, [r6, #32]
    f5f6:	4f34      	ldr	r7, [pc, #208]	; (f6c8 <usart_init+0x32c>)
    f5f8:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    f5fa:	2800      	cmp	r0, #0
    f5fc:	d000      	beq.n	f600 <usart_init+0x264>
    f5fe:	e6e0      	b.n	f3c2 <usart_init+0x26>
    f600:	e750      	b.n	f4a4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    f602:	6a33      	ldr	r3, [r6, #32]
    f604:	001f      	movs	r7, r3
    f606:	b2c0      	uxtb	r0, r0
    f608:	4b2d      	ldr	r3, [pc, #180]	; (f6c0 <usart_init+0x324>)
    f60a:	4798      	blx	r3
    f60c:	0001      	movs	r1, r0
				status_code =
    f60e:	9b06      	ldr	r3, [sp, #24]
    f610:	9300      	str	r3, [sp, #0]
    f612:	9b07      	ldr	r3, [sp, #28]
    f614:	220e      	movs	r2, #14
    f616:	a806      	add	r0, sp, #24
    f618:	4684      	mov	ip, r0
    f61a:	4462      	add	r2, ip
    f61c:	0038      	movs	r0, r7
    f61e:	4f2a      	ldr	r7, [pc, #168]	; (f6c8 <usart_init+0x32c>)
    f620:	47b8      	blx	r7
    f622:	e7ea      	b.n	f5fa <usart_init+0x25e>
		if(config->lin_slave_enable) {
    f624:	7ef3      	ldrb	r3, [r6, #27]
    f626:	2b00      	cmp	r3, #0
    f628:	d100      	bne.n	f62c <usart_init+0x290>
    f62a:	e77d      	b.n	f528 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    f62c:	2380      	movs	r3, #128	; 0x80
    f62e:	04db      	lsls	r3, r3, #19
    f630:	431f      	orrs	r7, r3
    f632:	e779      	b.n	f528 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    f634:	0020      	movs	r0, r4
    f636:	4b25      	ldr	r3, [pc, #148]	; (f6cc <usart_init+0x330>)
    f638:	4798      	blx	r3
    f63a:	e007      	b.n	f64c <usart_init+0x2b0>
    f63c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    f63e:	2f04      	cmp	r7, #4
    f640:	d00d      	beq.n	f65e <usart_init+0x2c2>
    f642:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    f644:	00bb      	lsls	r3, r7, #2
    f646:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    f648:	2800      	cmp	r0, #0
    f64a:	d0f3      	beq.n	f634 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    f64c:	1c43      	adds	r3, r0, #1
    f64e:	d0f5      	beq.n	f63c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    f650:	a90e      	add	r1, sp, #56	; 0x38
    f652:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    f654:	0c00      	lsrs	r0, r0, #16
    f656:	b2c0      	uxtb	r0, r0
    f658:	4b1d      	ldr	r3, [pc, #116]	; (f6d0 <usart_init+0x334>)
    f65a:	4798      	blx	r3
    f65c:	e7ee      	b.n	f63c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    f65e:	2300      	movs	r3, #0
    f660:	60eb      	str	r3, [r5, #12]
    f662:	612b      	str	r3, [r5, #16]
    f664:	616b      	str	r3, [r5, #20]
    f666:	61ab      	str	r3, [r5, #24]
    f668:	61eb      	str	r3, [r5, #28]
    f66a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    f66c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    f66e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    f670:	2200      	movs	r2, #0
    f672:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    f674:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    f676:	3330      	adds	r3, #48	; 0x30
    f678:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    f67a:	3301      	adds	r3, #1
    f67c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    f67e:	3301      	adds	r3, #1
    f680:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    f682:	3301      	adds	r3, #1
    f684:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    f686:	6828      	ldr	r0, [r5, #0]
    f688:	4b07      	ldr	r3, [pc, #28]	; (f6a8 <usart_init+0x30c>)
    f68a:	4798      	blx	r3
    f68c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    f68e:	4911      	ldr	r1, [pc, #68]	; (f6d4 <usart_init+0x338>)
    f690:	4b11      	ldr	r3, [pc, #68]	; (f6d8 <usart_init+0x33c>)
    f692:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    f694:	00a4      	lsls	r4, r4, #2
    f696:	4b11      	ldr	r3, [pc, #68]	; (f6dc <usart_init+0x340>)
    f698:	50e5      	str	r5, [r4, r3]
	return status_code;
    f69a:	2000      	movs	r0, #0
    f69c:	e691      	b.n	f3c2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    f69e:	2310      	movs	r3, #16
    f6a0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    f6a2:	2300      	movs	r3, #0
    f6a4:	9307      	str	r3, [sp, #28]
    f6a6:	e6e8      	b.n	f47a <usart_init+0xde>
    f6a8:	0000eba1 	.word	0x0000eba1
    f6ac:	40000400 	.word	0x40000400
    f6b0:	0000ff59 	.word	0x0000ff59
    f6b4:	0000fecd 	.word	0x0000fecd
    f6b8:	0000e9dd 	.word	0x0000e9dd
    f6bc:	41002000 	.word	0x41002000
    f6c0:	0000ff75 	.word	0x0000ff75
    f6c4:	0000e91f 	.word	0x0000e91f
    f6c8:	0000e949 	.word	0x0000e949
    f6cc:	0000ea29 	.word	0x0000ea29
    f6d0:	00010051 	.word	0x00010051
    f6d4:	0000f77d 	.word	0x0000f77d
    f6d8:	0000ebdd 	.word	0x0000ebdd
    f6dc:	200010d4 	.word	0x200010d4

0000f6e0 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    f6e0:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    f6e2:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    f6e4:	2a00      	cmp	r2, #0
    f6e6:	d101      	bne.n	f6ec <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    f6e8:	0018      	movs	r0, r3
    f6ea:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    f6ec:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    f6ee:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    f6f0:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    f6f2:	2a00      	cmp	r2, #0
    f6f4:	d1f8      	bne.n	f6e8 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    f6f6:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    f6f8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    f6fa:	2a00      	cmp	r2, #0
    f6fc:	d1fc      	bne.n	f6f8 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    f6fe:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    f700:	2102      	movs	r1, #2
    f702:	7e1a      	ldrb	r2, [r3, #24]
    f704:	420a      	tst	r2, r1
    f706:	d0fc      	beq.n	f702 <usart_write_wait+0x22>
	return STATUS_OK;
    f708:	2300      	movs	r3, #0
    f70a:	e7ed      	b.n	f6e8 <usart_write_wait+0x8>

0000f70c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    f70c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    f70e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    f710:	2a00      	cmp	r2, #0
    f712:	d101      	bne.n	f718 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    f714:	0018      	movs	r0, r3
    f716:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    f718:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    f71a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    f71c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    f71e:	2a00      	cmp	r2, #0
    f720:	d1f8      	bne.n	f714 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    f722:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    f724:	7e10      	ldrb	r0, [r2, #24]
    f726:	0740      	lsls	r0, r0, #29
    f728:	d5f4      	bpl.n	f714 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    f72a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    f72c:	2b00      	cmp	r3, #0
    f72e:	d1fc      	bne.n	f72a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    f730:	8b53      	ldrh	r3, [r2, #26]
    f732:	b2db      	uxtb	r3, r3
	if (error_code) {
    f734:	0698      	lsls	r0, r3, #26
    f736:	d01d      	beq.n	f774 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    f738:	0798      	lsls	r0, r3, #30
    f73a:	d503      	bpl.n	f744 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    f73c:	2302      	movs	r3, #2
    f73e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    f740:	3318      	adds	r3, #24
    f742:	e7e7      	b.n	f714 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    f744:	0758      	lsls	r0, r3, #29
    f746:	d503      	bpl.n	f750 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    f748:	2304      	movs	r3, #4
    f74a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    f74c:	331a      	adds	r3, #26
    f74e:	e7e1      	b.n	f714 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    f750:	07d8      	lsls	r0, r3, #31
    f752:	d503      	bpl.n	f75c <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    f754:	2301      	movs	r3, #1
    f756:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    f758:	3312      	adds	r3, #18
    f75a:	e7db      	b.n	f714 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    f75c:	06d8      	lsls	r0, r3, #27
    f75e:	d503      	bpl.n	f768 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    f760:	2310      	movs	r3, #16
    f762:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    f764:	3332      	adds	r3, #50	; 0x32
    f766:	e7d5      	b.n	f714 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    f768:	069b      	lsls	r3, r3, #26
    f76a:	d503      	bpl.n	f774 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    f76c:	2320      	movs	r3, #32
    f76e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    f770:	3321      	adds	r3, #33	; 0x21
    f772:	e7cf      	b.n	f714 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    f774:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    f776:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    f778:	2300      	movs	r3, #0
    f77a:	e7cb      	b.n	f714 <usart_read_wait+0x8>

0000f77c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    f77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    f77e:	0080      	lsls	r0, r0, #2
    f780:	4b62      	ldr	r3, [pc, #392]	; (f90c <_usart_interrupt_handler+0x190>)
    f782:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    f784:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    f786:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    f788:	2b00      	cmp	r3, #0
    f78a:	d1fc      	bne.n	f786 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    f78c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    f78e:	7da6      	ldrb	r6, [r4, #22]
    f790:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    f792:	2330      	movs	r3, #48	; 0x30
    f794:	5ceb      	ldrb	r3, [r5, r3]
    f796:	2231      	movs	r2, #49	; 0x31
    f798:	5caf      	ldrb	r7, [r5, r2]
    f79a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    f79c:	07f3      	lsls	r3, r6, #31
    f79e:	d522      	bpl.n	f7e6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    f7a0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    f7a2:	b29b      	uxth	r3, r3
    f7a4:	2b00      	cmp	r3, #0
    f7a6:	d01c      	beq.n	f7e2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    f7a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    f7aa:	7813      	ldrb	r3, [r2, #0]
    f7ac:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    f7ae:	1c51      	adds	r1, r2, #1
    f7b0:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    f7b2:	7969      	ldrb	r1, [r5, #5]
    f7b4:	2901      	cmp	r1, #1
    f7b6:	d00e      	beq.n	f7d6 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    f7b8:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    f7ba:	05db      	lsls	r3, r3, #23
    f7bc:	0ddb      	lsrs	r3, r3, #23
    f7be:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    f7c0:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    f7c2:	3b01      	subs	r3, #1
    f7c4:	b29b      	uxth	r3, r3
    f7c6:	85eb      	strh	r3, [r5, #46]	; 0x2e
    f7c8:	2b00      	cmp	r3, #0
    f7ca:	d10c      	bne.n	f7e6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    f7cc:	3301      	adds	r3, #1
    f7ce:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    f7d0:	3301      	adds	r3, #1
    f7d2:	75a3      	strb	r3, [r4, #22]
    f7d4:	e007      	b.n	f7e6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    f7d6:	7851      	ldrb	r1, [r2, #1]
    f7d8:	0209      	lsls	r1, r1, #8
    f7da:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    f7dc:	3202      	adds	r2, #2
    f7de:	62aa      	str	r2, [r5, #40]	; 0x28
    f7e0:	e7eb      	b.n	f7ba <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    f7e2:	2301      	movs	r3, #1
    f7e4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    f7e6:	07b3      	lsls	r3, r6, #30
    f7e8:	d506      	bpl.n	f7f8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    f7ea:	2302      	movs	r3, #2
    f7ec:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    f7ee:	2200      	movs	r2, #0
    f7f0:	3331      	adds	r3, #49	; 0x31
    f7f2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    f7f4:	07fb      	lsls	r3, r7, #31
    f7f6:	d41a      	bmi.n	f82e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    f7f8:	0773      	lsls	r3, r6, #29
    f7fa:	d565      	bpl.n	f8c8 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    f7fc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    f7fe:	b29b      	uxth	r3, r3
    f800:	2b00      	cmp	r3, #0
    f802:	d05f      	beq.n	f8c4 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    f804:	8b63      	ldrh	r3, [r4, #26]
    f806:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    f808:	071a      	lsls	r2, r3, #28
    f80a:	d414      	bmi.n	f836 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    f80c:	223f      	movs	r2, #63	; 0x3f
    f80e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    f810:	2b00      	cmp	r3, #0
    f812:	d034      	beq.n	f87e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    f814:	079a      	lsls	r2, r3, #30
    f816:	d511      	bpl.n	f83c <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    f818:	221a      	movs	r2, #26
    f81a:	2332      	movs	r3, #50	; 0x32
    f81c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    f81e:	3b30      	subs	r3, #48	; 0x30
    f820:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    f822:	077b      	lsls	r3, r7, #29
    f824:	d550      	bpl.n	f8c8 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    f826:	0028      	movs	r0, r5
    f828:	696b      	ldr	r3, [r5, #20]
    f82a:	4798      	blx	r3
    f82c:	e04c      	b.n	f8c8 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    f82e:	0028      	movs	r0, r5
    f830:	68eb      	ldr	r3, [r5, #12]
    f832:	4798      	blx	r3
    f834:	e7e0      	b.n	f7f8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    f836:	2237      	movs	r2, #55	; 0x37
    f838:	4013      	ands	r3, r2
    f83a:	e7e9      	b.n	f810 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    f83c:	075a      	lsls	r2, r3, #29
    f83e:	d505      	bpl.n	f84c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    f840:	221e      	movs	r2, #30
    f842:	2332      	movs	r3, #50	; 0x32
    f844:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    f846:	3b2e      	subs	r3, #46	; 0x2e
    f848:	8363      	strh	r3, [r4, #26]
    f84a:	e7ea      	b.n	f822 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    f84c:	07da      	lsls	r2, r3, #31
    f84e:	d505      	bpl.n	f85c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    f850:	2213      	movs	r2, #19
    f852:	2332      	movs	r3, #50	; 0x32
    f854:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    f856:	3b31      	subs	r3, #49	; 0x31
    f858:	8363      	strh	r3, [r4, #26]
    f85a:	e7e2      	b.n	f822 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    f85c:	06da      	lsls	r2, r3, #27
    f85e:	d505      	bpl.n	f86c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    f860:	2242      	movs	r2, #66	; 0x42
    f862:	2332      	movs	r3, #50	; 0x32
    f864:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    f866:	3b22      	subs	r3, #34	; 0x22
    f868:	8363      	strh	r3, [r4, #26]
    f86a:	e7da      	b.n	f822 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    f86c:	2220      	movs	r2, #32
    f86e:	421a      	tst	r2, r3
    f870:	d0d7      	beq.n	f822 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    f872:	3221      	adds	r2, #33	; 0x21
    f874:	2332      	movs	r3, #50	; 0x32
    f876:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    f878:	3b12      	subs	r3, #18
    f87a:	8363      	strh	r3, [r4, #26]
    f87c:	e7d1      	b.n	f822 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    f87e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    f880:	05db      	lsls	r3, r3, #23
    f882:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    f884:	b2da      	uxtb	r2, r3
    f886:	6a69      	ldr	r1, [r5, #36]	; 0x24
    f888:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    f88a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    f88c:	1c51      	adds	r1, r2, #1
    f88e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    f890:	7969      	ldrb	r1, [r5, #5]
    f892:	2901      	cmp	r1, #1
    f894:	d010      	beq.n	f8b8 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    f896:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    f898:	3b01      	subs	r3, #1
    f89a:	b29b      	uxth	r3, r3
    f89c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    f89e:	2b00      	cmp	r3, #0
    f8a0:	d112      	bne.n	f8c8 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    f8a2:	3304      	adds	r3, #4
    f8a4:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    f8a6:	2200      	movs	r2, #0
    f8a8:	332e      	adds	r3, #46	; 0x2e
    f8aa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    f8ac:	07bb      	lsls	r3, r7, #30
    f8ae:	d50b      	bpl.n	f8c8 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    f8b0:	0028      	movs	r0, r5
    f8b2:	692b      	ldr	r3, [r5, #16]
    f8b4:	4798      	blx	r3
    f8b6:	e007      	b.n	f8c8 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    f8b8:	0a1b      	lsrs	r3, r3, #8
    f8ba:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    f8bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    f8be:	3301      	adds	r3, #1
    f8c0:	626b      	str	r3, [r5, #36]	; 0x24
    f8c2:	e7e8      	b.n	f896 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    f8c4:	2304      	movs	r3, #4
    f8c6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    f8c8:	06f3      	lsls	r3, r6, #27
    f8ca:	d504      	bpl.n	f8d6 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    f8cc:	2310      	movs	r3, #16
    f8ce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    f8d0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    f8d2:	06fb      	lsls	r3, r7, #27
    f8d4:	d40e      	bmi.n	f8f4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    f8d6:	06b3      	lsls	r3, r6, #26
    f8d8:	d504      	bpl.n	f8e4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    f8da:	2320      	movs	r3, #32
    f8dc:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    f8de:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    f8e0:	073b      	lsls	r3, r7, #28
    f8e2:	d40b      	bmi.n	f8fc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    f8e4:	0733      	lsls	r3, r6, #28
    f8e6:	d504      	bpl.n	f8f2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    f8e8:	2308      	movs	r3, #8
    f8ea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    f8ec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    f8ee:	06bb      	lsls	r3, r7, #26
    f8f0:	d408      	bmi.n	f904 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    f8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    f8f4:	0028      	movs	r0, r5
    f8f6:	69eb      	ldr	r3, [r5, #28]
    f8f8:	4798      	blx	r3
    f8fa:	e7ec      	b.n	f8d6 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    f8fc:	0028      	movs	r0, r5
    f8fe:	69ab      	ldr	r3, [r5, #24]
    f900:	4798      	blx	r3
    f902:	e7ef      	b.n	f8e4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    f904:	6a2b      	ldr	r3, [r5, #32]
    f906:	0028      	movs	r0, r5
    f908:	4798      	blx	r3
}
    f90a:	e7f2      	b.n	f8f2 <_usart_interrupt_handler+0x176>
    f90c:	200010d4 	.word	0x200010d4

0000f910 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    f910:	b510      	push	{r4, lr}
	switch (clock_source) {
    f912:	2808      	cmp	r0, #8
    f914:	d803      	bhi.n	f91e <system_clock_source_get_hz+0xe>
    f916:	0080      	lsls	r0, r0, #2
    f918:	4b1c      	ldr	r3, [pc, #112]	; (f98c <system_clock_source_get_hz+0x7c>)
    f91a:	581b      	ldr	r3, [r3, r0]
    f91c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    f91e:	2000      	movs	r0, #0
    f920:	e032      	b.n	f988 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    f922:	4b1b      	ldr	r3, [pc, #108]	; (f990 <system_clock_source_get_hz+0x80>)
    f924:	6918      	ldr	r0, [r3, #16]
    f926:	e02f      	b.n	f988 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    f928:	4b1a      	ldr	r3, [pc, #104]	; (f994 <system_clock_source_get_hz+0x84>)
    f92a:	6a1b      	ldr	r3, [r3, #32]
    f92c:	059b      	lsls	r3, r3, #22
    f92e:	0f9b      	lsrs	r3, r3, #30
    f930:	4819      	ldr	r0, [pc, #100]	; (f998 <system_clock_source_get_hz+0x88>)
    f932:	40d8      	lsrs	r0, r3
    f934:	e028      	b.n	f988 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    f936:	4b16      	ldr	r3, [pc, #88]	; (f990 <system_clock_source_get_hz+0x80>)
    f938:	6958      	ldr	r0, [r3, #20]
    f93a:	e025      	b.n	f988 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    f93c:	4b14      	ldr	r3, [pc, #80]	; (f990 <system_clock_source_get_hz+0x80>)
    f93e:	681b      	ldr	r3, [r3, #0]
			return 0;
    f940:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    f942:	079b      	lsls	r3, r3, #30
    f944:	d520      	bpl.n	f988 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    f946:	4913      	ldr	r1, [pc, #76]	; (f994 <system_clock_source_get_hz+0x84>)
    f948:	2210      	movs	r2, #16
    f94a:	68cb      	ldr	r3, [r1, #12]
    f94c:	421a      	tst	r2, r3
    f94e:	d0fc      	beq.n	f94a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    f950:	4b0f      	ldr	r3, [pc, #60]	; (f990 <system_clock_source_get_hz+0x80>)
    f952:	681a      	ldr	r2, [r3, #0]
    f954:	2324      	movs	r3, #36	; 0x24
    f956:	4013      	ands	r3, r2
    f958:	2b04      	cmp	r3, #4
    f95a:	d001      	beq.n	f960 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    f95c:	480f      	ldr	r0, [pc, #60]	; (f99c <system_clock_source_get_hz+0x8c>)
    f95e:	e013      	b.n	f988 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    f960:	2000      	movs	r0, #0
    f962:	4b0f      	ldr	r3, [pc, #60]	; (f9a0 <system_clock_source_get_hz+0x90>)
    f964:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    f966:	4b0a      	ldr	r3, [pc, #40]	; (f990 <system_clock_source_get_hz+0x80>)
    f968:	689b      	ldr	r3, [r3, #8]
    f96a:	041b      	lsls	r3, r3, #16
    f96c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    f96e:	4358      	muls	r0, r3
    f970:	e00a      	b.n	f988 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    f972:	2350      	movs	r3, #80	; 0x50
    f974:	4a07      	ldr	r2, [pc, #28]	; (f994 <system_clock_source_get_hz+0x84>)
    f976:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    f978:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    f97a:	075b      	lsls	r3, r3, #29
    f97c:	d504      	bpl.n	f988 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    f97e:	4b04      	ldr	r3, [pc, #16]	; (f990 <system_clock_source_get_hz+0x80>)
    f980:	68d8      	ldr	r0, [r3, #12]
    f982:	e001      	b.n	f988 <system_clock_source_get_hz+0x78>
		return 32768UL;
    f984:	2080      	movs	r0, #128	; 0x80
    f986:	0200      	lsls	r0, r0, #8
	}
}
    f988:	bd10      	pop	{r4, pc}
    f98a:	46c0      	nop			; (mov r8, r8)
    f98c:	0001988c 	.word	0x0001988c
    f990:	20000420 	.word	0x20000420
    f994:	40000800 	.word	0x40000800
    f998:	007a1200 	.word	0x007a1200
    f99c:	02dc6c00 	.word	0x02dc6c00
    f9a0:	0000ff75 	.word	0x0000ff75

0000f9a4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    f9a4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    f9a6:	490c      	ldr	r1, [pc, #48]	; (f9d8 <system_clock_source_osc8m_set_config+0x34>)
    f9a8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    f9aa:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    f9ac:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    f9ae:	7840      	ldrb	r0, [r0, #1]
    f9b0:	2201      	movs	r2, #1
    f9b2:	4010      	ands	r0, r2
    f9b4:	0180      	lsls	r0, r0, #6
    f9b6:	2640      	movs	r6, #64	; 0x40
    f9b8:	43b3      	bics	r3, r6
    f9ba:	4303      	orrs	r3, r0
    f9bc:	402a      	ands	r2, r5
    f9be:	01d2      	lsls	r2, r2, #7
    f9c0:	2080      	movs	r0, #128	; 0x80
    f9c2:	4383      	bics	r3, r0
    f9c4:	4313      	orrs	r3, r2
    f9c6:	2203      	movs	r2, #3
    f9c8:	4022      	ands	r2, r4
    f9ca:	0212      	lsls	r2, r2, #8
    f9cc:	4803      	ldr	r0, [pc, #12]	; (f9dc <system_clock_source_osc8m_set_config+0x38>)
    f9ce:	4003      	ands	r3, r0
    f9d0:	4313      	orrs	r3, r2
    f9d2:	620b      	str	r3, [r1, #32]
}
    f9d4:	bd70      	pop	{r4, r5, r6, pc}
    f9d6:	46c0      	nop			; (mov r8, r8)
    f9d8:	40000800 	.word	0x40000800
    f9dc:	fffffcff 	.word	0xfffffcff

0000f9e0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    f9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9e2:	46de      	mov	lr, fp
    f9e4:	4657      	mov	r7, sl
    f9e6:	464e      	mov	r6, r9
    f9e8:	4645      	mov	r5, r8
    f9ea:	b5e0      	push	{r5, r6, r7, lr}
    f9ec:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    f9ee:	4b26      	ldr	r3, [pc, #152]	; (fa88 <system_clock_source_xosc32k_set_config+0xa8>)
    f9f0:	469b      	mov	fp, r3
    f9f2:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    f9f4:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    f9f6:	7800      	ldrb	r0, [r0, #0]
    f9f8:	4242      	negs	r2, r0
    f9fa:	4142      	adcs	r2, r0
    f9fc:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    f9fe:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    fa00:	78ca      	ldrb	r2, [r1, #3]
    fa02:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    fa04:	790a      	ldrb	r2, [r1, #4]
    fa06:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    fa08:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    fa0a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    fa0c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    fa0e:	688a      	ldr	r2, [r1, #8]
    fa10:	491e      	ldr	r1, [pc, #120]	; (fa8c <system_clock_source_xosc32k_set_config+0xac>)
    fa12:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    fa14:	2101      	movs	r1, #1
    fa16:	464a      	mov	r2, r9
    fa18:	0092      	lsls	r2, r2, #2
    fa1a:	4691      	mov	r9, r2
    fa1c:	2204      	movs	r2, #4
    fa1e:	4393      	bics	r3, r2
    fa20:	464a      	mov	r2, r9
    fa22:	4313      	orrs	r3, r2
    fa24:	4642      	mov	r2, r8
    fa26:	400a      	ands	r2, r1
    fa28:	00d2      	lsls	r2, r2, #3
    fa2a:	4690      	mov	r8, r2
    fa2c:	2208      	movs	r2, #8
    fa2e:	4393      	bics	r3, r2
    fa30:	4642      	mov	r2, r8
    fa32:	4313      	orrs	r3, r2
    fa34:	4662      	mov	r2, ip
    fa36:	400a      	ands	r2, r1
    fa38:	0112      	lsls	r2, r2, #4
    fa3a:	4694      	mov	ip, r2
    fa3c:	2210      	movs	r2, #16
    fa3e:	4393      	bics	r3, r2
    fa40:	4662      	mov	r2, ip
    fa42:	4313      	orrs	r3, r2
    fa44:	4008      	ands	r0, r1
    fa46:	0140      	lsls	r0, r0, #5
    fa48:	2220      	movs	r2, #32
    fa4a:	4393      	bics	r3, r2
    fa4c:	4303      	orrs	r3, r0
    fa4e:	400f      	ands	r7, r1
    fa50:	01bf      	lsls	r7, r7, #6
    fa52:	2040      	movs	r0, #64	; 0x40
    fa54:	4383      	bics	r3, r0
    fa56:	433b      	orrs	r3, r7
    fa58:	400e      	ands	r6, r1
    fa5a:	01f6      	lsls	r6, r6, #7
    fa5c:	3040      	adds	r0, #64	; 0x40
    fa5e:	4383      	bics	r3, r0
    fa60:	4333      	orrs	r3, r6
    fa62:	3879      	subs	r0, #121	; 0x79
    fa64:	4005      	ands	r5, r0
    fa66:	022d      	lsls	r5, r5, #8
    fa68:	4809      	ldr	r0, [pc, #36]	; (fa90 <system_clock_source_xosc32k_set_config+0xb0>)
    fa6a:	4003      	ands	r3, r0
    fa6c:	432b      	orrs	r3, r5
    fa6e:	4021      	ands	r1, r4
    fa70:	0309      	lsls	r1, r1, #12
    fa72:	4808      	ldr	r0, [pc, #32]	; (fa94 <system_clock_source_xosc32k_set_config+0xb4>)
    fa74:	4003      	ands	r3, r0
    fa76:	430b      	orrs	r3, r1
    fa78:	465a      	mov	r2, fp
    fa7a:	8293      	strh	r3, [r2, #20]
}
    fa7c:	bc3c      	pop	{r2, r3, r4, r5}
    fa7e:	4690      	mov	r8, r2
    fa80:	4699      	mov	r9, r3
    fa82:	46a2      	mov	sl, r4
    fa84:	46ab      	mov	fp, r5
    fa86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa88:	40000800 	.word	0x40000800
    fa8c:	20000420 	.word	0x20000420
    fa90:	fffff8ff 	.word	0xfffff8ff
    fa94:	ffffefff 	.word	0xffffefff

0000fa98 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    fa98:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    fa9a:	7a03      	ldrb	r3, [r0, #8]
    fa9c:	069b      	lsls	r3, r3, #26
    fa9e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    faa0:	8942      	ldrh	r2, [r0, #10]
    faa2:	0592      	lsls	r2, r2, #22
    faa4:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    faa6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    faa8:	4918      	ldr	r1, [pc, #96]	; (fb0c <system_clock_source_dfll_set_config+0x74>)
    faaa:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    faac:	7983      	ldrb	r3, [r0, #6]
    faae:	79c2      	ldrb	r2, [r0, #7]
    fab0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    fab2:	8842      	ldrh	r2, [r0, #2]
    fab4:	8884      	ldrh	r4, [r0, #4]
    fab6:	4322      	orrs	r2, r4
    fab8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    faba:	7842      	ldrb	r2, [r0, #1]
    fabc:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    fabe:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    fac0:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    fac2:	7803      	ldrb	r3, [r0, #0]
    fac4:	2b04      	cmp	r3, #4
    fac6:	d011      	beq.n	faec <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    fac8:	2b20      	cmp	r3, #32
    faca:	d10e      	bne.n	faea <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    facc:	7b03      	ldrb	r3, [r0, #12]
    face:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    fad0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    fad2:	4313      	orrs	r3, r2
    fad4:	89c2      	ldrh	r2, [r0, #14]
    fad6:	0412      	lsls	r2, r2, #16
    fad8:	490d      	ldr	r1, [pc, #52]	; (fb10 <system_clock_source_dfll_set_config+0x78>)
    fada:	400a      	ands	r2, r1
    fadc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    fade:	4a0b      	ldr	r2, [pc, #44]	; (fb0c <system_clock_source_dfll_set_config+0x74>)
    fae0:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    fae2:	6811      	ldr	r1, [r2, #0]
    fae4:	4b0b      	ldr	r3, [pc, #44]	; (fb14 <system_clock_source_dfll_set_config+0x7c>)
    fae6:	430b      	orrs	r3, r1
    fae8:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    faea:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    faec:	7b03      	ldrb	r3, [r0, #12]
    faee:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    faf0:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    faf2:	4313      	orrs	r3, r2
    faf4:	89c2      	ldrh	r2, [r0, #14]
    faf6:	0412      	lsls	r2, r2, #16
    faf8:	4905      	ldr	r1, [pc, #20]	; (fb10 <system_clock_source_dfll_set_config+0x78>)
    fafa:	400a      	ands	r2, r1
    fafc:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    fafe:	4a03      	ldr	r2, [pc, #12]	; (fb0c <system_clock_source_dfll_set_config+0x74>)
    fb00:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    fb02:	6813      	ldr	r3, [r2, #0]
    fb04:	2104      	movs	r1, #4
    fb06:	430b      	orrs	r3, r1
    fb08:	6013      	str	r3, [r2, #0]
    fb0a:	e7ee      	b.n	faea <system_clock_source_dfll_set_config+0x52>
    fb0c:	20000420 	.word	0x20000420
    fb10:	03ff0000 	.word	0x03ff0000
    fb14:	00000424 	.word	0x00000424

0000fb18 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    fb18:	2808      	cmp	r0, #8
    fb1a:	d803      	bhi.n	fb24 <system_clock_source_enable+0xc>
    fb1c:	0080      	lsls	r0, r0, #2
    fb1e:	4b25      	ldr	r3, [pc, #148]	; (fbb4 <system_clock_source_enable+0x9c>)
    fb20:	581b      	ldr	r3, [r3, r0]
    fb22:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    fb24:	2017      	movs	r0, #23
    fb26:	e044      	b.n	fbb2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    fb28:	4a23      	ldr	r2, [pc, #140]	; (fbb8 <system_clock_source_enable+0xa0>)
    fb2a:	6a13      	ldr	r3, [r2, #32]
    fb2c:	2102      	movs	r1, #2
    fb2e:	430b      	orrs	r3, r1
    fb30:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    fb32:	2000      	movs	r0, #0
    fb34:	e03d      	b.n	fbb2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    fb36:	4a20      	ldr	r2, [pc, #128]	; (fbb8 <system_clock_source_enable+0xa0>)
    fb38:	6993      	ldr	r3, [r2, #24]
    fb3a:	2102      	movs	r1, #2
    fb3c:	430b      	orrs	r3, r1
    fb3e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    fb40:	2000      	movs	r0, #0
		break;
    fb42:	e036      	b.n	fbb2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    fb44:	4a1c      	ldr	r2, [pc, #112]	; (fbb8 <system_clock_source_enable+0xa0>)
    fb46:	8a13      	ldrh	r3, [r2, #16]
    fb48:	2102      	movs	r1, #2
    fb4a:	430b      	orrs	r3, r1
    fb4c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    fb4e:	2000      	movs	r0, #0
		break;
    fb50:	e02f      	b.n	fbb2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    fb52:	4a19      	ldr	r2, [pc, #100]	; (fbb8 <system_clock_source_enable+0xa0>)
    fb54:	8a93      	ldrh	r3, [r2, #20]
    fb56:	2102      	movs	r1, #2
    fb58:	430b      	orrs	r3, r1
    fb5a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    fb5c:	2000      	movs	r0, #0
		break;
    fb5e:	e028      	b.n	fbb2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    fb60:	4916      	ldr	r1, [pc, #88]	; (fbbc <system_clock_source_enable+0xa4>)
    fb62:	680b      	ldr	r3, [r1, #0]
    fb64:	2202      	movs	r2, #2
    fb66:	4313      	orrs	r3, r2
    fb68:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    fb6a:	4b13      	ldr	r3, [pc, #76]	; (fbb8 <system_clock_source_enable+0xa0>)
    fb6c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    fb6e:	0019      	movs	r1, r3
    fb70:	320e      	adds	r2, #14
    fb72:	68cb      	ldr	r3, [r1, #12]
    fb74:	421a      	tst	r2, r3
    fb76:	d0fc      	beq.n	fb72 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    fb78:	4a10      	ldr	r2, [pc, #64]	; (fbbc <system_clock_source_enable+0xa4>)
    fb7a:	6891      	ldr	r1, [r2, #8]
    fb7c:	4b0e      	ldr	r3, [pc, #56]	; (fbb8 <system_clock_source_enable+0xa0>)
    fb7e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    fb80:	6852      	ldr	r2, [r2, #4]
    fb82:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    fb84:	2200      	movs	r2, #0
    fb86:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    fb88:	0019      	movs	r1, r3
    fb8a:	3210      	adds	r2, #16
    fb8c:	68cb      	ldr	r3, [r1, #12]
    fb8e:	421a      	tst	r2, r3
    fb90:	d0fc      	beq.n	fb8c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    fb92:	4b0a      	ldr	r3, [pc, #40]	; (fbbc <system_clock_source_enable+0xa4>)
    fb94:	681b      	ldr	r3, [r3, #0]
    fb96:	b29b      	uxth	r3, r3
    fb98:	4a07      	ldr	r2, [pc, #28]	; (fbb8 <system_clock_source_enable+0xa0>)
    fb9a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    fb9c:	2000      	movs	r0, #0
    fb9e:	e008      	b.n	fbb2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    fba0:	4905      	ldr	r1, [pc, #20]	; (fbb8 <system_clock_source_enable+0xa0>)
    fba2:	2244      	movs	r2, #68	; 0x44
    fba4:	5c8b      	ldrb	r3, [r1, r2]
    fba6:	2002      	movs	r0, #2
    fba8:	4303      	orrs	r3, r0
    fbaa:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    fbac:	2000      	movs	r0, #0
		break;
    fbae:	e000      	b.n	fbb2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    fbb0:	2000      	movs	r0, #0
}
    fbb2:	4770      	bx	lr
    fbb4:	000198b0 	.word	0x000198b0
    fbb8:	40000800 	.word	0x40000800
    fbbc:	20000420 	.word	0x20000420

0000fbc0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    fbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fbc2:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    fbc4:	22c2      	movs	r2, #194	; 0xc2
    fbc6:	00d2      	lsls	r2, r2, #3
    fbc8:	4b47      	ldr	r3, [pc, #284]	; (fce8 <system_clock_init+0x128>)
    fbca:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    fbcc:	4a47      	ldr	r2, [pc, #284]	; (fcec <system_clock_init+0x12c>)
    fbce:	6853      	ldr	r3, [r2, #4]
    fbd0:	211e      	movs	r1, #30
    fbd2:	438b      	bics	r3, r1
    fbd4:	391a      	subs	r1, #26
    fbd6:	430b      	orrs	r3, r1
    fbd8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    fbda:	2202      	movs	r2, #2
    fbdc:	ab01      	add	r3, sp, #4
    fbde:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    fbe0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    fbe2:	4d43      	ldr	r5, [pc, #268]	; (fcf0 <system_clock_init+0x130>)
    fbe4:	b2e0      	uxtb	r0, r4
    fbe6:	a901      	add	r1, sp, #4
    fbe8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    fbea:	3401      	adds	r4, #1
    fbec:	2c25      	cmp	r4, #37	; 0x25
    fbee:	d1f9      	bne.n	fbe4 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    fbf0:	a80a      	add	r0, sp, #40	; 0x28
    fbf2:	2300      	movs	r3, #0
    fbf4:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    fbf6:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    fbf8:	2280      	movs	r2, #128	; 0x80
    fbfa:	0212      	lsls	r2, r2, #8
    fbfc:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    fbfe:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    fc00:	2201      	movs	r2, #1
    fc02:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    fc04:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    fc06:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    fc08:	3202      	adds	r2, #2
    fc0a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    fc0c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    fc0e:	4b39      	ldr	r3, [pc, #228]	; (fcf4 <system_clock_init+0x134>)
    fc10:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    fc12:	2005      	movs	r0, #5
    fc14:	4b38      	ldr	r3, [pc, #224]	; (fcf8 <system_clock_init+0x138>)
    fc16:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    fc18:	4933      	ldr	r1, [pc, #204]	; (fce8 <system_clock_init+0x128>)
    fc1a:	2202      	movs	r2, #2
    fc1c:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    fc1e:	421a      	tst	r2, r3
    fc20:	d0fc      	beq.n	fc1c <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    fc22:	4a31      	ldr	r2, [pc, #196]	; (fce8 <system_clock_init+0x128>)
    fc24:	8a93      	ldrh	r3, [r2, #20]
    fc26:	2180      	movs	r1, #128	; 0x80
    fc28:	430b      	orrs	r3, r1
    fc2a:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    fc2c:	ab05      	add	r3, sp, #20
    fc2e:	2100      	movs	r1, #0
    fc30:	2200      	movs	r2, #0
    fc32:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    fc34:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    fc36:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    fc38:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    fc3a:	313f      	adds	r1, #63	; 0x3f
    fc3c:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    fc3e:	393b      	subs	r1, #59	; 0x3b
    fc40:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    fc42:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    fc44:	4b2d      	ldr	r3, [pc, #180]	; (fcfc <system_clock_init+0x13c>)
    fc46:	681b      	ldr	r3, [r3, #0]
    fc48:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    fc4a:	2b3f      	cmp	r3, #63	; 0x3f
    fc4c:	d04a      	beq.n	fce4 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    fc4e:	a805      	add	r0, sp, #20
    fc50:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    fc52:	4b2b      	ldr	r3, [pc, #172]	; (fd00 <system_clock_init+0x140>)
    fc54:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    fc56:	2307      	movs	r3, #7
    fc58:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    fc5a:	3338      	adds	r3, #56	; 0x38
    fc5c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    fc5e:	4b29      	ldr	r3, [pc, #164]	; (fd04 <system_clock_init+0x144>)
    fc60:	4798      	blx	r3
	config->run_in_standby  = false;
    fc62:	a804      	add	r0, sp, #16
    fc64:	2500      	movs	r5, #0
    fc66:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    fc68:	2601      	movs	r6, #1
    fc6a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    fc6c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    fc6e:	4b26      	ldr	r3, [pc, #152]	; (fd08 <system_clock_init+0x148>)
    fc70:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    fc72:	2006      	movs	r0, #6
    fc74:	4f20      	ldr	r7, [pc, #128]	; (fcf8 <system_clock_init+0x138>)
    fc76:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    fc78:	4b24      	ldr	r3, [pc, #144]	; (fd0c <system_clock_init+0x14c>)
    fc7a:	4798      	blx	r3
	config->division_factor    = 1;
    fc7c:	ac01      	add	r4, sp, #4
    fc7e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    fc80:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    fc82:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    fc84:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    fc86:	2305      	movs	r3, #5
    fc88:	7023      	strb	r3, [r4, #0]
    fc8a:	0021      	movs	r1, r4
    fc8c:	2001      	movs	r0, #1
    fc8e:	4b20      	ldr	r3, [pc, #128]	; (fd10 <system_clock_init+0x150>)
    fc90:	4798      	blx	r3
    fc92:	2001      	movs	r0, #1
    fc94:	4b1f      	ldr	r3, [pc, #124]	; (fd14 <system_clock_init+0x154>)
    fc96:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    fc98:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    fc9a:	0021      	movs	r1, r4
    fc9c:	2000      	movs	r0, #0
    fc9e:	4b14      	ldr	r3, [pc, #80]	; (fcf0 <system_clock_init+0x130>)
    fca0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    fca2:	2000      	movs	r0, #0
    fca4:	4b1c      	ldr	r3, [pc, #112]	; (fd18 <system_clock_init+0x158>)
    fca6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    fca8:	2007      	movs	r0, #7
    fcaa:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    fcac:	490e      	ldr	r1, [pc, #56]	; (fce8 <system_clock_init+0x128>)
    fcae:	22d0      	movs	r2, #208	; 0xd0
    fcb0:	68cb      	ldr	r3, [r1, #12]
    fcb2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    fcb4:	2bd0      	cmp	r3, #208	; 0xd0
    fcb6:	d1fb      	bne.n	fcb0 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    fcb8:	4a18      	ldr	r2, [pc, #96]	; (fd1c <system_clock_init+0x15c>)
    fcba:	2300      	movs	r3, #0
    fcbc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    fcbe:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    fcc0:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    fcc2:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    fcc4:	a901      	add	r1, sp, #4
    fcc6:	2201      	movs	r2, #1
    fcc8:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    fcca:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    fccc:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    fcce:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    fcd0:	3307      	adds	r3, #7
    fcd2:	700b      	strb	r3, [r1, #0]
    fcd4:	2000      	movs	r0, #0
    fcd6:	4b0e      	ldr	r3, [pc, #56]	; (fd10 <system_clock_init+0x150>)
    fcd8:	4798      	blx	r3
    fcda:	2000      	movs	r0, #0
    fcdc:	4b0d      	ldr	r3, [pc, #52]	; (fd14 <system_clock_init+0x154>)
    fcde:	4798      	blx	r3
#endif
}
    fce0:	b00f      	add	sp, #60	; 0x3c
    fce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    fce4:	3b20      	subs	r3, #32
    fce6:	e7b2      	b.n	fc4e <system_clock_init+0x8e>
    fce8:	40000800 	.word	0x40000800
    fcec:	41004000 	.word	0x41004000
    fcf0:	0000ff59 	.word	0x0000ff59
    fcf4:	0000f9e1 	.word	0x0000f9e1
    fcf8:	0000fb19 	.word	0x0000fb19
    fcfc:	00806024 	.word	0x00806024
    fd00:	000005b9 	.word	0x000005b9
    fd04:	0000fa99 	.word	0x0000fa99
    fd08:	0000f9a5 	.word	0x0000f9a5
    fd0c:	0000fd21 	.word	0x0000fd21
    fd10:	0000fd45 	.word	0x0000fd45
    fd14:	0000fdfd 	.word	0x0000fdfd
    fd18:	0000fecd 	.word	0x0000fecd
    fd1c:	40000400 	.word	0x40000400

0000fd20 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    fd20:	4a06      	ldr	r2, [pc, #24]	; (fd3c <system_gclk_init+0x1c>)
    fd22:	6993      	ldr	r3, [r2, #24]
    fd24:	2108      	movs	r1, #8
    fd26:	430b      	orrs	r3, r1
    fd28:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    fd2a:	2201      	movs	r2, #1
    fd2c:	4b04      	ldr	r3, [pc, #16]	; (fd40 <system_gclk_init+0x20>)
    fd2e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    fd30:	0019      	movs	r1, r3
    fd32:	780b      	ldrb	r3, [r1, #0]
    fd34:	4213      	tst	r3, r2
    fd36:	d1fc      	bne.n	fd32 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    fd38:	4770      	bx	lr
    fd3a:	46c0      	nop			; (mov r8, r8)
    fd3c:	40000400 	.word	0x40000400
    fd40:	40000c00 	.word	0x40000c00

0000fd44 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    fd44:	b570      	push	{r4, r5, r6, lr}
    fd46:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    fd48:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    fd4a:	780d      	ldrb	r5, [r1, #0]
    fd4c:	022d      	lsls	r5, r5, #8
    fd4e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    fd50:	784b      	ldrb	r3, [r1, #1]
    fd52:	2b00      	cmp	r3, #0
    fd54:	d002      	beq.n	fd5c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    fd56:	2380      	movs	r3, #128	; 0x80
    fd58:	02db      	lsls	r3, r3, #11
    fd5a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    fd5c:	7a4b      	ldrb	r3, [r1, #9]
    fd5e:	2b00      	cmp	r3, #0
    fd60:	d002      	beq.n	fd68 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    fd62:	2380      	movs	r3, #128	; 0x80
    fd64:	031b      	lsls	r3, r3, #12
    fd66:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    fd68:	6848      	ldr	r0, [r1, #4]
    fd6a:	2801      	cmp	r0, #1
    fd6c:	d910      	bls.n	fd90 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    fd6e:	1e43      	subs	r3, r0, #1
    fd70:	4218      	tst	r0, r3
    fd72:	d134      	bne.n	fdde <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    fd74:	2802      	cmp	r0, #2
    fd76:	d930      	bls.n	fdda <system_gclk_gen_set_config+0x96>
    fd78:	2302      	movs	r3, #2
    fd7a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    fd7c:	3201      	adds	r2, #1
						mask <<= 1) {
    fd7e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    fd80:	4298      	cmp	r0, r3
    fd82:	d8fb      	bhi.n	fd7c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    fd84:	0212      	lsls	r2, r2, #8
    fd86:	4332      	orrs	r2, r6
    fd88:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    fd8a:	2380      	movs	r3, #128	; 0x80
    fd8c:	035b      	lsls	r3, r3, #13
    fd8e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    fd90:	7a0b      	ldrb	r3, [r1, #8]
    fd92:	2b00      	cmp	r3, #0
    fd94:	d002      	beq.n	fd9c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    fd96:	2380      	movs	r3, #128	; 0x80
    fd98:	039b      	lsls	r3, r3, #14
    fd9a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    fd9c:	4a13      	ldr	r2, [pc, #76]	; (fdec <system_gclk_gen_set_config+0xa8>)
    fd9e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    fda0:	b25b      	sxtb	r3, r3
    fda2:	2b00      	cmp	r3, #0
    fda4:	dbfb      	blt.n	fd9e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    fda6:	4b12      	ldr	r3, [pc, #72]	; (fdf0 <system_gclk_gen_set_config+0xac>)
    fda8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    fdaa:	4b12      	ldr	r3, [pc, #72]	; (fdf4 <system_gclk_gen_set_config+0xb0>)
    fdac:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    fdae:	4a0f      	ldr	r2, [pc, #60]	; (fdec <system_gclk_gen_set_config+0xa8>)
    fdb0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    fdb2:	b25b      	sxtb	r3, r3
    fdb4:	2b00      	cmp	r3, #0
    fdb6:	dbfb      	blt.n	fdb0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    fdb8:	4b0c      	ldr	r3, [pc, #48]	; (fdec <system_gclk_gen_set_config+0xa8>)
    fdba:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    fdbc:	001a      	movs	r2, r3
    fdbe:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    fdc0:	b25b      	sxtb	r3, r3
    fdc2:	2b00      	cmp	r3, #0
    fdc4:	dbfb      	blt.n	fdbe <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    fdc6:	4a09      	ldr	r2, [pc, #36]	; (fdec <system_gclk_gen_set_config+0xa8>)
    fdc8:	6853      	ldr	r3, [r2, #4]
    fdca:	2180      	movs	r1, #128	; 0x80
    fdcc:	0249      	lsls	r1, r1, #9
    fdce:	400b      	ands	r3, r1
    fdd0:	431d      	orrs	r5, r3
    fdd2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    fdd4:	4b08      	ldr	r3, [pc, #32]	; (fdf8 <system_gclk_gen_set_config+0xb4>)
    fdd6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    fdd8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    fdda:	2200      	movs	r2, #0
    fddc:	e7d2      	b.n	fd84 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    fdde:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    fde0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    fde2:	2380      	movs	r3, #128	; 0x80
    fde4:	029b      	lsls	r3, r3, #10
    fde6:	431d      	orrs	r5, r3
    fde8:	e7d2      	b.n	fd90 <system_gclk_gen_set_config+0x4c>
    fdea:	46c0      	nop			; (mov r8, r8)
    fdec:	40000c00 	.word	0x40000c00
    fdf0:	0000e161 	.word	0x0000e161
    fdf4:	40000c08 	.word	0x40000c08
    fdf8:	0000e1a1 	.word	0x0000e1a1

0000fdfc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    fdfc:	b510      	push	{r4, lr}
    fdfe:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    fe00:	4a0b      	ldr	r2, [pc, #44]	; (fe30 <system_gclk_gen_enable+0x34>)
    fe02:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    fe04:	b25b      	sxtb	r3, r3
    fe06:	2b00      	cmp	r3, #0
    fe08:	dbfb      	blt.n	fe02 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    fe0a:	4b0a      	ldr	r3, [pc, #40]	; (fe34 <system_gclk_gen_enable+0x38>)
    fe0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    fe0e:	4b0a      	ldr	r3, [pc, #40]	; (fe38 <system_gclk_gen_enable+0x3c>)
    fe10:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    fe12:	4a07      	ldr	r2, [pc, #28]	; (fe30 <system_gclk_gen_enable+0x34>)
    fe14:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    fe16:	b25b      	sxtb	r3, r3
    fe18:	2b00      	cmp	r3, #0
    fe1a:	dbfb      	blt.n	fe14 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    fe1c:	4a04      	ldr	r2, [pc, #16]	; (fe30 <system_gclk_gen_enable+0x34>)
    fe1e:	6851      	ldr	r1, [r2, #4]
    fe20:	2380      	movs	r3, #128	; 0x80
    fe22:	025b      	lsls	r3, r3, #9
    fe24:	430b      	orrs	r3, r1
    fe26:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    fe28:	4b04      	ldr	r3, [pc, #16]	; (fe3c <system_gclk_gen_enable+0x40>)
    fe2a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    fe2c:	bd10      	pop	{r4, pc}
    fe2e:	46c0      	nop			; (mov r8, r8)
    fe30:	40000c00 	.word	0x40000c00
    fe34:	0000e161 	.word	0x0000e161
    fe38:	40000c04 	.word	0x40000c04
    fe3c:	0000e1a1 	.word	0x0000e1a1

0000fe40 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    fe40:	b570      	push	{r4, r5, r6, lr}
    fe42:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    fe44:	4a1a      	ldr	r2, [pc, #104]	; (feb0 <system_gclk_gen_get_hz+0x70>)
    fe46:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    fe48:	b25b      	sxtb	r3, r3
    fe4a:	2b00      	cmp	r3, #0
    fe4c:	dbfb      	blt.n	fe46 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    fe4e:	4b19      	ldr	r3, [pc, #100]	; (feb4 <system_gclk_gen_get_hz+0x74>)
    fe50:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    fe52:	4b19      	ldr	r3, [pc, #100]	; (feb8 <system_gclk_gen_get_hz+0x78>)
    fe54:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    fe56:	4a16      	ldr	r2, [pc, #88]	; (feb0 <system_gclk_gen_get_hz+0x70>)
    fe58:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    fe5a:	b25b      	sxtb	r3, r3
    fe5c:	2b00      	cmp	r3, #0
    fe5e:	dbfb      	blt.n	fe58 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    fe60:	4e13      	ldr	r6, [pc, #76]	; (feb0 <system_gclk_gen_get_hz+0x70>)
    fe62:	6870      	ldr	r0, [r6, #4]
    fe64:	04c0      	lsls	r0, r0, #19
    fe66:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    fe68:	4b14      	ldr	r3, [pc, #80]	; (febc <system_gclk_gen_get_hz+0x7c>)
    fe6a:	4798      	blx	r3
    fe6c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    fe6e:	4b12      	ldr	r3, [pc, #72]	; (feb8 <system_gclk_gen_get_hz+0x78>)
    fe70:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    fe72:	6876      	ldr	r6, [r6, #4]
    fe74:	02f6      	lsls	r6, r6, #11
    fe76:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    fe78:	4b11      	ldr	r3, [pc, #68]	; (fec0 <system_gclk_gen_get_hz+0x80>)
    fe7a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    fe7c:	4a0c      	ldr	r2, [pc, #48]	; (feb0 <system_gclk_gen_get_hz+0x70>)
    fe7e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    fe80:	b25b      	sxtb	r3, r3
    fe82:	2b00      	cmp	r3, #0
    fe84:	dbfb      	blt.n	fe7e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    fe86:	4b0a      	ldr	r3, [pc, #40]	; (feb0 <system_gclk_gen_get_hz+0x70>)
    fe88:	689c      	ldr	r4, [r3, #8]
    fe8a:	0224      	lsls	r4, r4, #8
    fe8c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    fe8e:	4b0d      	ldr	r3, [pc, #52]	; (fec4 <system_gclk_gen_get_hz+0x84>)
    fe90:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    fe92:	2e00      	cmp	r6, #0
    fe94:	d107      	bne.n	fea6 <system_gclk_gen_get_hz+0x66>
    fe96:	2c01      	cmp	r4, #1
    fe98:	d907      	bls.n	feaa <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    fe9a:	0021      	movs	r1, r4
    fe9c:	0028      	movs	r0, r5
    fe9e:	4b0a      	ldr	r3, [pc, #40]	; (fec8 <system_gclk_gen_get_hz+0x88>)
    fea0:	4798      	blx	r3
    fea2:	0005      	movs	r5, r0
    fea4:	e001      	b.n	feaa <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    fea6:	3401      	adds	r4, #1
    fea8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    feaa:	0028      	movs	r0, r5
    feac:	bd70      	pop	{r4, r5, r6, pc}
    feae:	46c0      	nop			; (mov r8, r8)
    feb0:	40000c00 	.word	0x40000c00
    feb4:	0000e161 	.word	0x0000e161
    feb8:	40000c04 	.word	0x40000c04
    febc:	0000f911 	.word	0x0000f911
    fec0:	40000c08 	.word	0x40000c08
    fec4:	0000e1a1 	.word	0x0000e1a1
    fec8:	0001620d 	.word	0x0001620d

0000fecc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    fecc:	b510      	push	{r4, lr}
    fece:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    fed0:	4b06      	ldr	r3, [pc, #24]	; (feec <system_gclk_chan_enable+0x20>)
    fed2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    fed4:	4b06      	ldr	r3, [pc, #24]	; (fef0 <system_gclk_chan_enable+0x24>)
    fed6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    fed8:	4a06      	ldr	r2, [pc, #24]	; (fef4 <system_gclk_chan_enable+0x28>)
    feda:	8853      	ldrh	r3, [r2, #2]
    fedc:	2180      	movs	r1, #128	; 0x80
    fede:	01c9      	lsls	r1, r1, #7
    fee0:	430b      	orrs	r3, r1
    fee2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    fee4:	4b04      	ldr	r3, [pc, #16]	; (fef8 <system_gclk_chan_enable+0x2c>)
    fee6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    fee8:	bd10      	pop	{r4, pc}
    feea:	46c0      	nop			; (mov r8, r8)
    feec:	0000e161 	.word	0x0000e161
    fef0:	40000c02 	.word	0x40000c02
    fef4:	40000c00 	.word	0x40000c00
    fef8:	0000e1a1 	.word	0x0000e1a1

0000fefc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    fefc:	b510      	push	{r4, lr}
    fefe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    ff00:	4b0f      	ldr	r3, [pc, #60]	; (ff40 <system_gclk_chan_disable+0x44>)
    ff02:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    ff04:	4b0f      	ldr	r3, [pc, #60]	; (ff44 <system_gclk_chan_disable+0x48>)
    ff06:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    ff08:	4a0f      	ldr	r2, [pc, #60]	; (ff48 <system_gclk_chan_disable+0x4c>)
    ff0a:	8853      	ldrh	r3, [r2, #2]
    ff0c:	051b      	lsls	r3, r3, #20
    ff0e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    ff10:	8853      	ldrh	r3, [r2, #2]
    ff12:	490e      	ldr	r1, [pc, #56]	; (ff4c <system_gclk_chan_disable+0x50>)
    ff14:	400b      	ands	r3, r1
    ff16:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    ff18:	8853      	ldrh	r3, [r2, #2]
    ff1a:	490d      	ldr	r1, [pc, #52]	; (ff50 <system_gclk_chan_disable+0x54>)
    ff1c:	400b      	ands	r3, r1
    ff1e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    ff20:	0011      	movs	r1, r2
    ff22:	2280      	movs	r2, #128	; 0x80
    ff24:	01d2      	lsls	r2, r2, #7
    ff26:	884b      	ldrh	r3, [r1, #2]
    ff28:	4213      	tst	r3, r2
    ff2a:	d1fc      	bne.n	ff26 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    ff2c:	4906      	ldr	r1, [pc, #24]	; (ff48 <system_gclk_chan_disable+0x4c>)
    ff2e:	884a      	ldrh	r2, [r1, #2]
    ff30:	0203      	lsls	r3, r0, #8
    ff32:	4806      	ldr	r0, [pc, #24]	; (ff4c <system_gclk_chan_disable+0x50>)
    ff34:	4002      	ands	r2, r0
    ff36:	4313      	orrs	r3, r2
    ff38:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    ff3a:	4b06      	ldr	r3, [pc, #24]	; (ff54 <system_gclk_chan_disable+0x58>)
    ff3c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    ff3e:	bd10      	pop	{r4, pc}
    ff40:	0000e161 	.word	0x0000e161
    ff44:	40000c02 	.word	0x40000c02
    ff48:	40000c00 	.word	0x40000c00
    ff4c:	fffff0ff 	.word	0xfffff0ff
    ff50:	ffffbfff 	.word	0xffffbfff
    ff54:	0000e1a1 	.word	0x0000e1a1

0000ff58 <system_gclk_chan_set_config>:
{
    ff58:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    ff5a:	780c      	ldrb	r4, [r1, #0]
    ff5c:	0224      	lsls	r4, r4, #8
    ff5e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    ff60:	4b02      	ldr	r3, [pc, #8]	; (ff6c <system_gclk_chan_set_config+0x14>)
    ff62:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    ff64:	b2a4      	uxth	r4, r4
    ff66:	4b02      	ldr	r3, [pc, #8]	; (ff70 <system_gclk_chan_set_config+0x18>)
    ff68:	805c      	strh	r4, [r3, #2]
}
    ff6a:	bd10      	pop	{r4, pc}
    ff6c:	0000fefd 	.word	0x0000fefd
    ff70:	40000c00 	.word	0x40000c00

0000ff74 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    ff74:	b510      	push	{r4, lr}
    ff76:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    ff78:	4b06      	ldr	r3, [pc, #24]	; (ff94 <system_gclk_chan_get_hz+0x20>)
    ff7a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    ff7c:	4b06      	ldr	r3, [pc, #24]	; (ff98 <system_gclk_chan_get_hz+0x24>)
    ff7e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    ff80:	4b06      	ldr	r3, [pc, #24]	; (ff9c <system_gclk_chan_get_hz+0x28>)
    ff82:	885c      	ldrh	r4, [r3, #2]
    ff84:	0524      	lsls	r4, r4, #20
    ff86:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    ff88:	4b05      	ldr	r3, [pc, #20]	; (ffa0 <system_gclk_chan_get_hz+0x2c>)
    ff8a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    ff8c:	0020      	movs	r0, r4
    ff8e:	4b05      	ldr	r3, [pc, #20]	; (ffa4 <system_gclk_chan_get_hz+0x30>)
    ff90:	4798      	blx	r3
}
    ff92:	bd10      	pop	{r4, pc}
    ff94:	0000e161 	.word	0x0000e161
    ff98:	40000c02 	.word	0x40000c02
    ff9c:	40000c00 	.word	0x40000c00
    ffa0:	0000e1a1 	.word	0x0000e1a1
    ffa4:	0000fe41 	.word	0x0000fe41

0000ffa8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    ffa8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    ffaa:	78d3      	ldrb	r3, [r2, #3]
    ffac:	2b00      	cmp	r3, #0
    ffae:	d135      	bne.n	1001c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    ffb0:	7813      	ldrb	r3, [r2, #0]
    ffb2:	2b80      	cmp	r3, #128	; 0x80
    ffb4:	d029      	beq.n	1000a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    ffb6:	061b      	lsls	r3, r3, #24
    ffb8:	2480      	movs	r4, #128	; 0x80
    ffba:	0264      	lsls	r4, r4, #9
    ffbc:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    ffbe:	7854      	ldrb	r4, [r2, #1]
    ffc0:	2502      	movs	r5, #2
    ffc2:	43ac      	bics	r4, r5
    ffc4:	d106      	bne.n	ffd4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    ffc6:	7894      	ldrb	r4, [r2, #2]
    ffc8:	2c00      	cmp	r4, #0
    ffca:	d120      	bne.n	1000e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    ffcc:	2480      	movs	r4, #128	; 0x80
    ffce:	02a4      	lsls	r4, r4, #10
    ffd0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    ffd2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    ffd4:	7854      	ldrb	r4, [r2, #1]
    ffd6:	3c01      	subs	r4, #1
    ffd8:	2c01      	cmp	r4, #1
    ffda:	d91c      	bls.n	10016 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    ffdc:	040d      	lsls	r5, r1, #16
    ffde:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    ffe0:	24a0      	movs	r4, #160	; 0xa0
    ffe2:	05e4      	lsls	r4, r4, #23
    ffe4:	432c      	orrs	r4, r5
    ffe6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ffe8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    ffea:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    ffec:	24d0      	movs	r4, #208	; 0xd0
    ffee:	0624      	lsls	r4, r4, #24
    fff0:	432c      	orrs	r4, r5
    fff2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    fff4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    fff6:	78d4      	ldrb	r4, [r2, #3]
    fff8:	2c00      	cmp	r4, #0
    fffa:	d122      	bne.n	10042 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    fffc:	035b      	lsls	r3, r3, #13
    fffe:	d51c      	bpl.n	1003a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   10000:	7893      	ldrb	r3, [r2, #2]
   10002:	2b01      	cmp	r3, #1
   10004:	d01e      	beq.n	10044 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
   10006:	6141      	str	r1, [r0, #20]
   10008:	e017      	b.n	1003a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
   1000a:	2300      	movs	r3, #0
   1000c:	e7d7      	b.n	ffbe <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   1000e:	24c0      	movs	r4, #192	; 0xc0
   10010:	02e4      	lsls	r4, r4, #11
   10012:	4323      	orrs	r3, r4
   10014:	e7dd      	b.n	ffd2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   10016:	4c0d      	ldr	r4, [pc, #52]	; (1004c <_system_pinmux_config+0xa4>)
   10018:	4023      	ands	r3, r4
   1001a:	e7df      	b.n	ffdc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
   1001c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   1001e:	040c      	lsls	r4, r1, #16
   10020:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   10022:	23a0      	movs	r3, #160	; 0xa0
   10024:	05db      	lsls	r3, r3, #23
   10026:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10028:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
   1002a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   1002c:	23d0      	movs	r3, #208	; 0xd0
   1002e:	061b      	lsls	r3, r3, #24
   10030:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   10032:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
   10034:	78d3      	ldrb	r3, [r2, #3]
   10036:	2b00      	cmp	r3, #0
   10038:	d103      	bne.n	10042 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   1003a:	7853      	ldrb	r3, [r2, #1]
   1003c:	3b01      	subs	r3, #1
   1003e:	2b01      	cmp	r3, #1
   10040:	d902      	bls.n	10048 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
   10042:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
   10044:	6181      	str	r1, [r0, #24]
   10046:	e7f8      	b.n	1003a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
   10048:	6081      	str	r1, [r0, #8]
}
   1004a:	e7fa      	b.n	10042 <_system_pinmux_config+0x9a>
   1004c:	fffbffff 	.word	0xfffbffff

00010050 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   10050:	b510      	push	{r4, lr}
   10052:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
   10054:	09c1      	lsrs	r1, r0, #7
		return NULL;
   10056:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
   10058:	2900      	cmp	r1, #0
   1005a:	d104      	bne.n	10066 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
   1005c:	0943      	lsrs	r3, r0, #5
   1005e:	01db      	lsls	r3, r3, #7
   10060:	4905      	ldr	r1, [pc, #20]	; (10078 <system_pinmux_pin_set_config+0x28>)
   10062:	468c      	mov	ip, r1
   10064:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   10066:	241f      	movs	r4, #31
   10068:	4020      	ands	r0, r4
   1006a:	2101      	movs	r1, #1
   1006c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
   1006e:	0018      	movs	r0, r3
   10070:	4b02      	ldr	r3, [pc, #8]	; (1007c <system_pinmux_pin_set_config+0x2c>)
   10072:	4798      	blx	r3
}
   10074:	bd10      	pop	{r4, pc}
   10076:	46c0      	nop			; (mov r8, r8)
   10078:	41004400 	.word	0x41004400
   1007c:	0000ffa9 	.word	0x0000ffa9

00010080 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
   10080:	4770      	bx	lr
	...

00010084 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   10084:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   10086:	4b05      	ldr	r3, [pc, #20]	; (1009c <system_init+0x18>)
   10088:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   1008a:	4b05      	ldr	r3, [pc, #20]	; (100a0 <system_init+0x1c>)
   1008c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   1008e:	4b05      	ldr	r3, [pc, #20]	; (100a4 <system_init+0x20>)
   10090:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   10092:	4b05      	ldr	r3, [pc, #20]	; (100a8 <system_init+0x24>)
   10094:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   10096:	4b05      	ldr	r3, [pc, #20]	; (100ac <system_init+0x28>)
   10098:	4798      	blx	r3
}
   1009a:	bd10      	pop	{r4, pc}
   1009c:	0000fbc1 	.word	0x0000fbc1
   100a0:	0000e1d1 	.word	0x0000e1d1
   100a4:	00010081 	.word	0x00010081
   100a8:	0000e2e1 	.word	0x0000e2e1
   100ac:	00010081 	.word	0x00010081

000100b0 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
   100b0:	4b09      	ldr	r3, [pc, #36]	; (100d8 <_tcc_get_inst_index+0x28>)
   100b2:	4298      	cmp	r0, r3
   100b4:	d00c      	beq.n	100d0 <_tcc_get_inst_index+0x20>
   100b6:	4b09      	ldr	r3, [pc, #36]	; (100dc <_tcc_get_inst_index+0x2c>)
   100b8:	4298      	cmp	r0, r3
   100ba:	d007      	beq.n	100cc <_tcc_get_inst_index+0x1c>
   100bc:	4a08      	ldr	r2, [pc, #32]	; (100e0 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   100be:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
   100c0:	4290      	cmp	r0, r2
   100c2:	d001      	beq.n	100c8 <_tcc_get_inst_index+0x18>
}
   100c4:	0018      	movs	r0, r3
   100c6:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   100c8:	3302      	adds	r3, #2
   100ca:	e002      	b.n	100d2 <_tcc_get_inst_index+0x22>
   100cc:	2301      	movs	r3, #1
   100ce:	e000      	b.n	100d2 <_tcc_get_inst_index+0x22>
   100d0:	2300      	movs	r3, #0
			return i;
   100d2:	b2db      	uxtb	r3, r3
   100d4:	e7f6      	b.n	100c4 <_tcc_get_inst_index+0x14>
   100d6:	46c0      	nop			; (mov r8, r8)
   100d8:	42002000 	.word	0x42002000
   100dc:	42002400 	.word	0x42002400
   100e0:	42002800 	.word	0x42002800

000100e4 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   100e4:	b510      	push	{r4, lr}
   100e6:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   100e8:	0008      	movs	r0, r1
   100ea:	4b4f      	ldr	r3, [pc, #316]	; (10228 <tcc_get_config_defaults+0x144>)
   100ec:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
   100ee:	2300      	movs	r3, #0
   100f0:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   100f2:	0080      	lsls	r0, r0, #2
   100f4:	4a4d      	ldr	r2, [pc, #308]	; (1022c <tcc_get_config_defaults+0x148>)
   100f6:	5882      	ldr	r2, [r0, r2]
   100f8:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   100fa:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   100fc:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   100fe:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   10100:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
   10102:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   10104:	61e3      	str	r3, [r4, #28]
   10106:	6223      	str	r3, [r4, #32]
   10108:	6263      	str	r3, [r4, #36]	; 0x24
   1010a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   1010c:	7523      	strb	r3, [r4, #20]
   1010e:	7563      	strb	r3, [r4, #21]
   10110:	75a3      	strb	r3, [r4, #22]
   10112:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   10114:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   10116:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   10118:	7423      	strb	r3, [r4, #16]
   1011a:	7463      	strb	r3, [r4, #17]
   1011c:	74a3      	strb	r3, [r4, #18]
   1011e:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   10120:	222c      	movs	r2, #44	; 0x2c
   10122:	54a3      	strb	r3, [r4, r2]
   10124:	3201      	adds	r2, #1
   10126:	54a3      	strb	r3, [r4, r2]
   10128:	3201      	adds	r2, #1
   1012a:	54a3      	strb	r3, [r4, r2]
   1012c:	3201      	adds	r2, #1
   1012e:	54a3      	strb	r3, [r4, r2]
   10130:	3201      	adds	r2, #1
   10132:	54a3      	strb	r3, [r4, r2]
   10134:	3201      	adds	r2, #1
   10136:	54a3      	strb	r3, [r4, r2]
   10138:	3201      	adds	r2, #1
   1013a:	54a3      	strb	r3, [r4, r2]
   1013c:	3201      	adds	r2, #1
   1013e:	54a3      	strb	r3, [r4, r2]
   10140:	3201      	adds	r2, #1
   10142:	54a3      	strb	r3, [r4, r2]
   10144:	3201      	adds	r2, #1
   10146:	54a3      	strb	r3, [r4, r2]
   10148:	3201      	adds	r2, #1
   1014a:	54a3      	strb	r3, [r4, r2]
   1014c:	3201      	adds	r2, #1
   1014e:	54a3      	strb	r3, [r4, r2]
   10150:	3201      	adds	r2, #1
   10152:	54a3      	strb	r3, [r4, r2]
   10154:	3201      	adds	r2, #1
   10156:	54a3      	strb	r3, [r4, r2]
   10158:	3201      	adds	r2, #1
   1015a:	54a3      	strb	r3, [r4, r2]
   1015c:	3201      	adds	r2, #1
   1015e:	54a3      	strb	r3, [r4, r2]
   10160:	3201      	adds	r2, #1
   10162:	54a3      	strb	r3, [r4, r2]
   10164:	3201      	adds	r2, #1
   10166:	54a3      	strb	r3, [r4, r2]
   10168:	3201      	adds	r2, #1
   1016a:	54a3      	strb	r3, [r4, r2]
   1016c:	3201      	adds	r2, #1
   1016e:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   10170:	3201      	adds	r2, #1
   10172:	54a3      	strb	r3, [r4, r2]
   10174:	3201      	adds	r2, #1
   10176:	54a3      	strb	r3, [r4, r2]
   10178:	3201      	adds	r2, #1
   1017a:	54a3      	strb	r3, [r4, r2]
   1017c:	3201      	adds	r2, #1
   1017e:	54a3      	strb	r3, [r4, r2]
   10180:	3201      	adds	r2, #1
   10182:	54a3      	strb	r3, [r4, r2]
   10184:	3201      	adds	r2, #1
   10186:	54a3      	strb	r3, [r4, r2]
   10188:	3201      	adds	r2, #1
   1018a:	54a3      	strb	r3, [r4, r2]
   1018c:	3201      	adds	r2, #1
   1018e:	54a3      	strb	r3, [r4, r2]
   10190:	3201      	adds	r2, #1
   10192:	54a3      	strb	r3, [r4, r2]
   10194:	3201      	adds	r2, #1
   10196:	54a3      	strb	r3, [r4, r2]
   10198:	3201      	adds	r2, #1
   1019a:	54a3      	strb	r3, [r4, r2]
   1019c:	3201      	adds	r2, #1
   1019e:	54a3      	strb	r3, [r4, r2]
   101a0:	3201      	adds	r2, #1
   101a2:	54a3      	strb	r3, [r4, r2]
   101a4:	3201      	adds	r2, #1
   101a6:	54a3      	strb	r3, [r4, r2]
   101a8:	3201      	adds	r2, #1
   101aa:	54a3      	strb	r3, [r4, r2]
   101ac:	3201      	adds	r2, #1
   101ae:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   101b0:	3201      	adds	r2, #1
   101b2:	54a3      	strb	r3, [r4, r2]
   101b4:	3201      	adds	r2, #1
   101b6:	54a3      	strb	r3, [r4, r2]
   101b8:	3201      	adds	r2, #1
   101ba:	54a3      	strb	r3, [r4, r2]
   101bc:	3201      	adds	r2, #1
   101be:	54a3      	strb	r3, [r4, r2]
   101c0:	3201      	adds	r2, #1
   101c2:	54a3      	strb	r3, [r4, r2]
   101c4:	3201      	adds	r2, #1
   101c6:	54a3      	strb	r3, [r4, r2]
   101c8:	3201      	adds	r2, #1
   101ca:	54a3      	strb	r3, [r4, r2]
   101cc:	3201      	adds	r2, #1
   101ce:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   101d0:	3241      	adds	r2, #65	; 0x41
   101d2:	54a3      	strb	r3, [r4, r2]
   101d4:	65a3      	str	r3, [r4, #88]	; 0x58
   101d6:	67a3      	str	r3, [r4, #120]	; 0x78
   101d8:	3201      	adds	r2, #1
   101da:	54a3      	strb	r3, [r4, r2]
   101dc:	65e3      	str	r3, [r4, #92]	; 0x5c
   101de:	67e3      	str	r3, [r4, #124]	; 0x7c
   101e0:	3201      	adds	r2, #1
   101e2:	54a3      	strb	r3, [r4, r2]
   101e4:	6623      	str	r3, [r4, #96]	; 0x60
   101e6:	3a1a      	subs	r2, #26
   101e8:	50a3      	str	r3, [r4, r2]
   101ea:	321b      	adds	r2, #27
   101ec:	54a3      	strb	r3, [r4, r2]
   101ee:	6663      	str	r3, [r4, #100]	; 0x64
   101f0:	3a17      	subs	r2, #23
   101f2:	50a3      	str	r3, [r4, r2]
   101f4:	3218      	adds	r2, #24
   101f6:	54a3      	strb	r3, [r4, r2]
   101f8:	66a3      	str	r3, [r4, #104]	; 0x68
   101fa:	3a14      	subs	r2, #20
   101fc:	50a3      	str	r3, [r4, r2]
   101fe:	3215      	adds	r2, #21
   10200:	54a3      	strb	r3, [r4, r2]
   10202:	66e3      	str	r3, [r4, #108]	; 0x6c
   10204:	3a11      	subs	r2, #17
   10206:	50a3      	str	r3, [r4, r2]
   10208:	3212      	adds	r2, #18
   1020a:	54a3      	strb	r3, [r4, r2]
   1020c:	6723      	str	r3, [r4, #112]	; 0x70
   1020e:	3a0e      	subs	r2, #14
   10210:	50a3      	str	r3, [r4, r2]
   10212:	320f      	adds	r2, #15
   10214:	54a3      	strb	r3, [r4, r2]
   10216:	6763      	str	r3, [r4, #116]	; 0x74
   10218:	3a0b      	subs	r2, #11
   1021a:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   1021c:	2101      	movs	r1, #1
   1021e:	320c      	adds	r2, #12
   10220:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
   10222:	3201      	adds	r2, #1
   10224:	54a3      	strb	r3, [r4, r2]
}
   10226:	bd10      	pop	{r4, pc}
   10228:	000100b1 	.word	0x000100b1
   1022c:	000198e8 	.word	0x000198e8

00010230 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   10230:	b5f0      	push	{r4, r5, r6, r7, lr}
   10232:	46de      	mov	lr, fp
   10234:	4657      	mov	r7, sl
   10236:	464e      	mov	r6, r9
   10238:	4645      	mov	r5, r8
   1023a:	b5e0      	push	{r5, r6, r7, lr}
   1023c:	b091      	sub	sp, #68	; 0x44
   1023e:	9001      	str	r0, [sp, #4]
   10240:	000c      	movs	r4, r1
   10242:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   10244:	0008      	movs	r0, r1
   10246:	4bc3      	ldr	r3, [pc, #780]	; (10554 <tcc_init+0x324>)
   10248:	4798      	blx	r3
   1024a:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   1024c:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
   1024e:	48c2      	ldr	r0, [pc, #776]	; (10558 <tcc_init+0x328>)
   10250:	6a02      	ldr	r2, [r0, #32]
   10252:	009e      	lsls	r6, r3, #2
   10254:	4fc1      	ldr	r7, [pc, #772]	; (1055c <tcc_init+0x32c>)
   10256:	59f7      	ldr	r7, [r6, r7]
   10258:	433a      	orrs	r2, r7
   1025a:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   1025c:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
   1025e:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   10260:	0792      	lsls	r2, r2, #30
   10262:	d506      	bpl.n	10272 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
   10264:	b011      	add	sp, #68	; 0x44
   10266:	bc3c      	pop	{r2, r3, r4, r5}
   10268:	4690      	mov	r8, r2
   1026a:	4699      	mov	r9, r3
   1026c:	46a2      	mov	sl, r4
   1026e:	46ab      	mov	fp, r5
   10270:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   10272:	6822      	ldr	r2, [r4, #0]
   10274:	2701      	movs	r7, #1
   10276:	4017      	ands	r7, r2
   10278:	d1f4      	bne.n	10264 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
   1027a:	48b9      	ldr	r0, [pc, #740]	; (10560 <tcc_init+0x330>)
   1027c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
   1027e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
   10280:	682e      	ldr	r6, [r5, #0]
   10282:	42b2      	cmp	r2, r6
   10284:	d3ee      	bcc.n	10264 <tcc_init+0x34>
		|| (config->counter.period > count_max)
   10286:	686e      	ldr	r6, [r5, #4]
   10288:	42b2      	cmp	r2, r6
   1028a:	d3eb      	bcc.n	10264 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
   1028c:	69e8      	ldr	r0, [r5, #28]
   1028e:	4282      	cmp	r2, r0
   10290:	d200      	bcs.n	10294 <tcc_init+0x64>
   10292:	e1b9      	b.n	10608 <tcc_init+0x3d8>
   10294:	6a28      	ldr	r0, [r5, #32]
   10296:	4282      	cmp	r2, r0
   10298:	d200      	bcs.n	1029c <tcc_init+0x6c>
   1029a:	e1b7      	b.n	1060c <tcc_init+0x3dc>
   1029c:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1029e:	4282      	cmp	r2, r0
   102a0:	d200      	bcs.n	102a4 <tcc_init+0x74>
   102a2:	e1b5      	b.n	10610 <tcc_init+0x3e0>
   102a4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   102a6:	4282      	cmp	r2, r0
   102a8:	d200      	bcs.n	102ac <tcc_init+0x7c>
   102aa:	e1b3      	b.n	10614 <tcc_init+0x3e4>
   102ac:	2298      	movs	r2, #152	; 0x98
   102ae:	4694      	mov	ip, r2
   102b0:	44ac      	add	ip, r5
   102b2:	4662      	mov	r2, ip
   102b4:	9208      	str	r2, [sp, #32]
   102b6:	2000      	movs	r0, #0
   102b8:	e003      	b.n	102c2 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   102ba:	3001      	adds	r0, #1
   102bc:	3201      	adds	r2, #1
   102be:	2808      	cmp	r0, #8
   102c0:	d008      	beq.n	102d4 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
   102c2:	7816      	ldrb	r6, [r2, #0]
   102c4:	2e00      	cmp	r6, #0
   102c6:	d0f8      	beq.n	102ba <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
   102c8:	4ea6      	ldr	r6, [pc, #664]	; (10564 <tcc_init+0x334>)
   102ca:	5c76      	ldrb	r6, [r6, r1]
   102cc:	4286      	cmp	r6, r0
   102ce:	dcf4      	bgt.n	102ba <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
   102d0:	2017      	movs	r0, #23
   102d2:	e7c7      	b.n	10264 <tcc_init+0x34>
   102d4:	2200      	movs	r2, #0
   102d6:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   102d8:	2080      	movs	r0, #128	; 0x80
   102da:	0440      	lsls	r0, r0, #17
   102dc:	4684      	mov	ip, r0
   102de:	e002      	b.n	102e6 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   102e0:	3201      	adds	r2, #1
   102e2:	2a04      	cmp	r2, #4
   102e4:	d00e      	beq.n	10304 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
   102e6:	18a8      	adds	r0, r5, r2
   102e8:	7c00      	ldrb	r0, [r0, #16]
   102ea:	2801      	cmp	r0, #1
   102ec:	d1f8      	bne.n	102e0 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
   102ee:	489e      	ldr	r0, [pc, #632]	; (10568 <tcc_init+0x338>)
   102f0:	5c40      	ldrb	r0, [r0, r1]
   102f2:	4290      	cmp	r0, r2
   102f4:	da00      	bge.n	102f8 <tcc_init+0xc8>
   102f6:	e18f      	b.n	10618 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   102f8:	4660      	mov	r0, ip
   102fa:	4090      	lsls	r0, r2
   102fc:	9e02      	ldr	r6, [sp, #8]
   102fe:	4306      	orrs	r6, r0
   10300:	9602      	str	r6, [sp, #8]
   10302:	e7ed      	b.n	102e0 <tcc_init+0xb0>
	if (config->run_in_standby) {
   10304:	329d      	adds	r2, #157	; 0x9d
   10306:	5caa      	ldrb	r2, [r5, r2]
   10308:	2a00      	cmp	r2, #0
   1030a:	d004      	beq.n	10316 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   1030c:	2280      	movs	r2, #128	; 0x80
   1030e:	0112      	lsls	r2, r2, #4
   10310:	9902      	ldr	r1, [sp, #8]
   10312:	4311      	orrs	r1, r2
   10314:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
   10316:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   10318:	1e51      	subs	r1, r2, #1
   1031a:	418a      	sbcs	r2, r1
   1031c:	0092      	lsls	r2, r2, #2
   1031e:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   10320:	7a6a      	ldrb	r2, [r5, #9]
   10322:	2a01      	cmp	r2, #1
   10324:	d022      	beq.n	1036c <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
   10326:	4a90      	ldr	r2, [pc, #576]	; (10568 <tcc_init+0x338>)
   10328:	5cd2      	ldrb	r2, [r2, r3]
   1032a:	0011      	movs	r1, r2
   1032c:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
   1032e:	2235      	movs	r2, #53	; 0x35
   10330:	5caa      	ldrb	r2, [r5, r2]
   10332:	428a      	cmp	r2, r1
   10334:	d300      	bcc.n	10338 <tcc_init+0x108>
   10336:	e179      	b.n	1062c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   10338:	212c      	movs	r1, #44	; 0x2c
   1033a:	5c69      	ldrb	r1, [r5, r1]
   1033c:	290f      	cmp	r1, #15
   1033e:	d900      	bls.n	10342 <tcc_init+0x112>
   10340:	e174      	b.n	1062c <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   10342:	7b28      	ldrb	r0, [r5, #12]
   10344:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   10346:	7ae8      	ldrb	r0, [r5, #11]
   10348:	900b      	str	r0, [sp, #44]	; 0x2c
   1034a:	202d      	movs	r0, #45	; 0x2d
   1034c:	4682      	mov	sl, r0
   1034e:	44aa      	add	sl, r5
   10350:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   10352:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
   10354:	ae0e      	add	r6, sp, #56	; 0x38
   10356:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   10358:	26c0      	movs	r6, #192	; 0xc0
   1035a:	0136      	lsls	r6, r6, #4
   1035c:	46b1      	mov	r9, r6
   1035e:	4684      	mov	ip, r0
   10360:	46a0      	mov	r8, r4
   10362:	0028      	movs	r0, r5
   10364:	4655      	mov	r5, sl
   10366:	9309      	str	r3, [sp, #36]	; 0x24
   10368:	4682      	mov	sl, r0
   1036a:	e035      	b.n	103d8 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
   1036c:	9906      	ldr	r1, [sp, #24]
   1036e:	4311      	orrs	r1, r2
   10370:	9106      	str	r1, [sp, #24]
   10372:	e7d8      	b.n	10326 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   10374:	0292      	lsls	r2, r2, #10
   10376:	464f      	mov	r7, r9
   10378:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1037a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
   1037c:	7919      	ldrb	r1, [r3, #4]
   1037e:	468b      	mov	fp, r1
   10380:	2103      	movs	r1, #3
   10382:	465f      	mov	r7, fp
   10384:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   10386:	430a      	orrs	r2, r1
   10388:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
   1038a:	795a      	ldrb	r2, [r3, #5]
   1038c:	0152      	lsls	r2, r2, #5
   1038e:	2160      	movs	r1, #96	; 0x60
   10390:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   10392:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
   10394:	7999      	ldrb	r1, [r3, #6]
   10396:	0209      	lsls	r1, r1, #8
   10398:	26c0      	movs	r6, #192	; 0xc0
   1039a:	00b6      	lsls	r6, r6, #2
   1039c:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   1039e:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   103a0:	79da      	ldrb	r2, [r3, #7]
   103a2:	0312      	lsls	r2, r2, #12
   103a4:	21e0      	movs	r1, #224	; 0xe0
   103a6:	01c9      	lsls	r1, r1, #7
   103a8:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   103aa:	4316      	orrs	r6, r2
   103ac:	4334      	orrs	r4, r6
   103ae:	9a03      	ldr	r2, [sp, #12]
   103b0:	4314      	orrs	r4, r2
   103b2:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
   103b4:	4662      	mov	r2, ip
   103b6:	9907      	ldr	r1, [sp, #28]
   103b8:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   103ba:	2a04      	cmp	r2, #4
   103bc:	d02a      	beq.n	10414 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
   103be:	7c9a      	ldrb	r2, [r3, #18]
   103c0:	9905      	ldr	r1, [sp, #20]
   103c2:	4291      	cmp	r1, r2
   103c4:	d800      	bhi.n	103c8 <tcc_init+0x198>
   103c6:	e131      	b.n	1062c <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
   103c8:	7a59      	ldrb	r1, [r3, #9]
   103ca:	350a      	adds	r5, #10
   103cc:	2304      	movs	r3, #4
   103ce:	469b      	mov	fp, r3
   103d0:	44dc      	add	ip, fp
   103d2:	290f      	cmp	r1, #15
   103d4:	d900      	bls.n	103d8 <tcc_init+0x1a8>
   103d6:	e129      	b.n	1062c <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   103d8:	0609      	lsls	r1, r1, #24
   103da:	23f0      	movs	r3, #240	; 0xf0
   103dc:	051b      	lsls	r3, r3, #20
   103de:	4019      	ands	r1, r3
   103e0:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   103e2:	782e      	ldrb	r6, [r5, #0]
   103e4:	0436      	lsls	r6, r6, #16
   103e6:	20ff      	movs	r0, #255	; 0xff
   103e8:	0400      	lsls	r0, r0, #16
   103ea:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   103ec:	7868      	ldrb	r0, [r5, #1]
   103ee:	2480      	movs	r4, #128	; 0x80
   103f0:	2800      	cmp	r0, #0
   103f2:	d100      	bne.n	103f6 <tcc_init+0x1c6>
   103f4:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   103f6:	7898      	ldrb	r0, [r3, #2]
   103f8:	2708      	movs	r7, #8
   103fa:	9703      	str	r7, [sp, #12]
   103fc:	2800      	cmp	r0, #0
   103fe:	d101      	bne.n	10404 <tcc_init+0x1d4>
   10400:	9804      	ldr	r0, [sp, #16]
   10402:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   10404:	78d8      	ldrb	r0, [r3, #3]
   10406:	4683      	mov	fp, r0
   10408:	2010      	movs	r0, #16
   1040a:	465f      	mov	r7, fp
   1040c:	2f00      	cmp	r7, #0
   1040e:	d1b1      	bne.n	10374 <tcc_init+0x144>
   10410:	9804      	ldr	r0, [sp, #16]
   10412:	e7af      	b.n	10374 <tcc_init+0x144>
   10414:	4644      	mov	r4, r8
   10416:	4655      	mov	r5, sl
   10418:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
   1041a:	4a52      	ldr	r2, [pc, #328]	; (10564 <tcc_init+0x334>)
   1041c:	5cd2      	ldrb	r2, [r2, r3]
   1041e:	4691      	mov	r9, r2
   10420:	4651      	mov	r1, sl
   10422:	3150      	adds	r1, #80	; 0x50
   10424:	4650      	mov	r0, sl
   10426:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
   10428:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1042a:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   1042c:	2601      	movs	r6, #1
   1042e:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   10430:	2602      	movs	r6, #2
   10432:	36ff      	adds	r6, #255	; 0xff
   10434:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   10436:	2680      	movs	r6, #128	; 0x80
   10438:	0276      	lsls	r6, r6, #9
   1043a:	46b0      	mov	r8, r6
   1043c:	46a4      	mov	ip, r4
   1043e:	001c      	movs	r4, r3
   10440:	464b      	mov	r3, r9
   10442:	e00f      	b.n	10464 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
   10444:	7806      	ldrb	r6, [r0, #0]
   10446:	2e00      	cmp	r6, #0
   10448:	d007      	beq.n	1045a <tcc_init+0x22a>
			if (i >= ow_num) {
   1044a:	4293      	cmp	r3, r2
   1044c:	d800      	bhi.n	10450 <tcc_init+0x220>
   1044e:	e0e7      	b.n	10620 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
   10450:	2e02      	cmp	r6, #2
   10452:	d014      	beq.n	1047e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   10454:	4656      	mov	r6, sl
   10456:	4096      	lsls	r6, r2
   10458:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   1045a:	3201      	adds	r2, #1
   1045c:	3101      	adds	r1, #1
   1045e:	3002      	adds	r0, #2
   10460:	2a08      	cmp	r2, #8
   10462:	d010      	beq.n	10486 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
   10464:	780e      	ldrb	r6, [r1, #0]
   10466:	2e00      	cmp	r6, #0
   10468:	d0ec      	beq.n	10444 <tcc_init+0x214>
			if (i >= ow_num) {
   1046a:	4293      	cmp	r3, r2
   1046c:	d800      	bhi.n	10470 <tcc_init+0x240>
   1046e:	e0d5      	b.n	1061c <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   10470:	4646      	mov	r6, r8
   10472:	4096      	lsls	r6, r2
   10474:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
   10476:	7806      	ldrb	r6, [r0, #0]
   10478:	2e00      	cmp	r6, #0
   1047a:	d1e9      	bne.n	10450 <tcc_init+0x220>
   1047c:	e7ed      	b.n	1045a <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   1047e:	465e      	mov	r6, fp
   10480:	4096      	lsls	r6, r2
   10482:	4337      	orrs	r7, r6
   10484:	e7e9      	b.n	1045a <tcc_init+0x22a>
   10486:	4699      	mov	r9, r3
   10488:	0023      	movs	r3, r4
   1048a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1048c:	7e6a      	ldrb	r2, [r5, #25]
   1048e:	0112      	lsls	r2, r2, #4
   10490:	2130      	movs	r1, #48	; 0x30
   10492:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   10494:	7e28      	ldrb	r0, [r5, #24]
   10496:	2207      	movs	r2, #7
   10498:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   1049a:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   1049c:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
   1049e:	2080      	movs	r0, #128	; 0x80
   104a0:	0240      	lsls	r0, r0, #9
   104a2:	000e      	movs	r6, r1
   104a4:	e002      	b.n	104ac <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   104a6:	3201      	adds	r2, #1
   104a8:	2a04      	cmp	r2, #4
   104aa:	d00b      	beq.n	104c4 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
   104ac:	18a9      	adds	r1, r5, r2
   104ae:	7d09      	ldrb	r1, [r1, #20]
   104b0:	2900      	cmp	r1, #0
   104b2:	d0f8      	beq.n	104a6 <tcc_init+0x276>
			if (n >= cc_num) {
   104b4:	9905      	ldr	r1, [sp, #20]
   104b6:	4291      	cmp	r1, r2
   104b8:	dc00      	bgt.n	104bc <tcc_init+0x28c>
   104ba:	e0b3      	b.n	10624 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
   104bc:	0001      	movs	r1, r0
   104be:	4091      	lsls	r1, r2
   104c0:	430e      	orrs	r6, r1
   104c2:	e7f0      	b.n	104a6 <tcc_init+0x276>
   104c4:	46b2      	mov	sl, r6
   104c6:	9801      	ldr	r0, [sp, #4]
   104c8:	0002      	movs	r2, r0
   104ca:	3204      	adds	r2, #4
   104cc:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
   104ce:	2100      	movs	r1, #0
   104d0:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   104d2:	4282      	cmp	r2, r0
   104d4:	d1fc      	bne.n	104d0 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
   104d6:	2200      	movs	r2, #0
   104d8:	9801      	ldr	r0, [sp, #4]
   104da:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   104dc:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   104de:	0099      	lsls	r1, r3, #2
   104e0:	4a22      	ldr	r2, [pc, #136]	; (1056c <tcc_init+0x33c>)
   104e2:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
   104e4:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   104e6:	22a0      	movs	r2, #160	; 0xa0
   104e8:	5ca9      	ldrb	r1, [r5, r2]
   104ea:	3a64      	subs	r2, #100	; 0x64
   104ec:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
   104ee:	a90d      	add	r1, sp, #52	; 0x34
   104f0:	7aaa      	ldrb	r2, [r5, #10]
   104f2:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   104f4:	4a1e      	ldr	r2, [pc, #120]	; (10570 <tcc_init+0x340>)
   104f6:	5cd6      	ldrb	r6, [r2, r3]
   104f8:	0030      	movs	r0, r6
   104fa:	4b1e      	ldr	r3, [pc, #120]	; (10574 <tcc_init+0x344>)
   104fc:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   104fe:	0030      	movs	r0, r6
   10500:	4b1d      	ldr	r3, [pc, #116]	; (10578 <tcc_init+0x348>)
   10502:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   10504:	464b      	mov	r3, r9
   10506:	2b00      	cmp	r3, #0
   10508:	dd3c      	ble.n	10584 <tcc_init+0x354>
   1050a:	002e      	movs	r6, r5
   1050c:	3658      	adds	r6, #88	; 0x58
   1050e:	3398      	adds	r3, #152	; 0x98
   10510:	4698      	mov	r8, r3
   10512:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   10514:	2301      	movs	r3, #1
   10516:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
   10518:	46ab      	mov	fp, r5
   1051a:	4645      	mov	r5, r8
   1051c:	46a0      	mov	r8, r4
   1051e:	9c08      	ldr	r4, [sp, #32]
   10520:	e003      	b.n	1052a <tcc_init+0x2fa>
   10522:	3401      	adds	r4, #1
   10524:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   10526:	42ac      	cmp	r4, r5
   10528:	d02a      	beq.n	10580 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
   1052a:	7823      	ldrb	r3, [r4, #0]
   1052c:	2b00      	cmp	r3, #0
   1052e:	d0f8      	beq.n	10522 <tcc_init+0x2f2>
   10530:	ab0c      	add	r3, sp, #48	; 0x30
   10532:	464a      	mov	r2, r9
   10534:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   10536:	2300      	movs	r3, #0
   10538:	aa0c      	add	r2, sp, #48	; 0x30
   1053a:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   1053c:	0013      	movs	r3, r2
   1053e:	2220      	movs	r2, #32
   10540:	18b2      	adds	r2, r6, r2
   10542:	7812      	ldrb	r2, [r2, #0]
   10544:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   10546:	464a      	mov	r2, r9
   10548:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
   1054a:	7830      	ldrb	r0, [r6, #0]
   1054c:	0019      	movs	r1, r3
   1054e:	4b0b      	ldr	r3, [pc, #44]	; (1057c <tcc_init+0x34c>)
   10550:	4798      	blx	r3
   10552:	e7e6      	b.n	10522 <tcc_init+0x2f2>
   10554:	000100b1 	.word	0x000100b1
   10558:	40000400 	.word	0x40000400
   1055c:	000198d4 	.word	0x000198d4
   10560:	000198e8 	.word	0x000198e8
   10564:	000198f4 	.word	0x000198f4
   10568:	000198e0 	.word	0x000198e0
   1056c:	200010f0 	.word	0x200010f0
   10570:	000198e4 	.word	0x000198e4
   10574:	0000ff59 	.word	0x0000ff59
   10578:	0000fecd 	.word	0x0000fecd
   1057c:	00010051 	.word	0x00010051
   10580:	4644      	mov	r4, r8
   10582:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   10584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10586:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   10588:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1058a:	0212      	lsls	r2, r2, #8
   1058c:	4313      	orrs	r3, r2
   1058e:	9a02      	ldr	r2, [sp, #8]
   10590:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
   10592:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   10594:	2204      	movs	r2, #4
   10596:	68a3      	ldr	r3, [r4, #8]
   10598:	421a      	tst	r2, r3
   1059a:	d1fc      	bne.n	10596 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
   1059c:	23ff      	movs	r3, #255	; 0xff
   1059e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   105a0:	2204      	movs	r2, #4
   105a2:	68a3      	ldr	r3, [r4, #8]
   105a4:	421a      	tst	r2, r3
   105a6:	d1fc      	bne.n	105a2 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
   105a8:	466b      	mov	r3, sp
   105aa:	7e1b      	ldrb	r3, [r3, #24]
   105ac:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
   105ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   105b0:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
   105b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   105b4:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
   105b6:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   105b8:	4a1d      	ldr	r2, [pc, #116]	; (10630 <tcc_init+0x400>)
   105ba:	68a3      	ldr	r3, [r4, #8]
   105bc:	4213      	tst	r3, r2
   105be:	d1fc      	bne.n	105ba <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
   105c0:	4653      	mov	r3, sl
   105c2:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   105c4:	2210      	movs	r2, #16
   105c6:	68a3      	ldr	r3, [r4, #8]
   105c8:	421a      	tst	r2, r3
   105ca:	d1fc      	bne.n	105c6 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
   105cc:	682b      	ldr	r3, [r5, #0]
   105ce:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   105d0:	4a18      	ldr	r2, [pc, #96]	; (10634 <tcc_init+0x404>)
   105d2:	68a3      	ldr	r3, [r4, #8]
   105d4:	4213      	tst	r3, r2
   105d6:	d1fc      	bne.n	105d2 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
   105d8:	686b      	ldr	r3, [r5, #4]
   105da:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   105dc:	9805      	ldr	r0, [sp, #20]
   105de:	2800      	cmp	r0, #0
   105e0:	dd22      	ble.n	10628 <tcc_init+0x3f8>
   105e2:	351c      	adds	r5, #28
   105e4:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   105e6:	4e14      	ldr	r6, [pc, #80]	; (10638 <tcc_init+0x408>)
   105e8:	0032      	movs	r2, r6
   105ea:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
   105ec:	68a3      	ldr	r3, [r4, #8]
   105ee:	421a      	tst	r2, r3
   105f0:	d1fc      	bne.n	105ec <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
   105f2:	cd04      	ldmia	r5!, {r2}
   105f4:	000b      	movs	r3, r1
   105f6:	3310      	adds	r3, #16
   105f8:	009b      	lsls	r3, r3, #2
   105fa:	18e3      	adds	r3, r4, r3
   105fc:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   105fe:	3101      	adds	r1, #1
   10600:	4288      	cmp	r0, r1
   10602:	dcf1      	bgt.n	105e8 <tcc_init+0x3b8>
	return STATUS_OK;
   10604:	2000      	movs	r0, #0
   10606:	e62d      	b.n	10264 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
   10608:	2017      	movs	r0, #23
   1060a:	e62b      	b.n	10264 <tcc_init+0x34>
   1060c:	2017      	movs	r0, #23
   1060e:	e629      	b.n	10264 <tcc_init+0x34>
   10610:	2017      	movs	r0, #23
   10612:	e627      	b.n	10264 <tcc_init+0x34>
   10614:	2017      	movs	r0, #23
   10616:	e625      	b.n	10264 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   10618:	2017      	movs	r0, #23
   1061a:	e623      	b.n	10264 <tcc_init+0x34>
			if (i >= ow_num) {
   1061c:	2017      	movs	r0, #23
   1061e:	e621      	b.n	10264 <tcc_init+0x34>
			if (i >= ow_num) {
   10620:	2017      	movs	r0, #23
   10622:	e61f      	b.n	10264 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   10624:	2017      	movs	r0, #23
   10626:	e61d      	b.n	10264 <tcc_init+0x34>
	return STATUS_OK;
   10628:	2000      	movs	r0, #0
   1062a:	e61b      	b.n	10264 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
   1062c:	2017      	movs	r0, #23
   1062e:	e619      	b.n	10264 <tcc_init+0x34>
   10630:	00020040 	.word	0x00020040
   10634:	00040080 	.word	0x00040080
   10638:	00080100 	.word	0x00080100

0001063c <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   1063c:	0092      	lsls	r2, r2, #2
   1063e:	1883      	adds	r3, r0, r2
   10640:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   10642:	4b03      	ldr	r3, [pc, #12]	; (10650 <tcc_register_callback+0x14>)
   10644:	58d3      	ldr	r3, [r2, r3]
   10646:	6b42      	ldr	r2, [r0, #52]	; 0x34
   10648:	4313      	orrs	r3, r2
   1064a:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
   1064c:	2000      	movs	r0, #0
   1064e:	4770      	bx	lr
   10650:	000198f8 	.word	0x000198f8

00010654 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   10654:	b570      	push	{r4, r5, r6, lr}
   10656:	0004      	movs	r4, r0
   10658:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   1065a:	6800      	ldr	r0, [r0, #0]
   1065c:	4b09      	ldr	r3, [pc, #36]	; (10684 <tcc_enable_callback+0x30>)
   1065e:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   10660:	4b09      	ldr	r3, [pc, #36]	; (10688 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   10662:	5c1b      	ldrb	r3, [r3, r0]
   10664:	221f      	movs	r2, #31
   10666:	401a      	ands	r2, r3
   10668:	2301      	movs	r3, #1
   1066a:	4093      	lsls	r3, r2
   1066c:	4a07      	ldr	r2, [pc, #28]	; (1068c <tcc_enable_callback+0x38>)
   1066e:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   10670:	00ad      	lsls	r5, r5, #2
   10672:	4b07      	ldr	r3, [pc, #28]	; (10690 <tcc_enable_callback+0x3c>)
   10674:	58ea      	ldr	r2, [r5, r3]
   10676:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   10678:	4313      	orrs	r3, r2
   1067a:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   1067c:	6823      	ldr	r3, [r4, #0]
   1067e:	629a      	str	r2, [r3, #40]	; 0x28
}
   10680:	bd70      	pop	{r4, r5, r6, pc}
   10682:	46c0      	nop			; (mov r8, r8)
   10684:	000100b1 	.word	0x000100b1
   10688:	00019928 	.word	0x00019928
   1068c:	e000e100 	.word	0xe000e100
   10690:	000198f8 	.word	0x000198f8

00010694 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   10694:	b5f0      	push	{r4, r5, r6, r7, lr}
   10696:	46c6      	mov	lr, r8
   10698:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
   1069a:	0080      	lsls	r0, r0, #2
   1069c:	4b0e      	ldr	r3, [pc, #56]	; (106d8 <_tcc_interrupt_handler+0x44>)
   1069e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   106a0:	683b      	ldr	r3, [r7, #0]
   106a2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   106a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   106a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   106a8:	4013      	ands	r3, r2
   106aa:	401e      	ands	r6, r3
   106ac:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   106ae:	4b0b      	ldr	r3, [pc, #44]	; (106dc <_tcc_interrupt_handler+0x48>)
   106b0:	4698      	mov	r8, r3
   106b2:	e002      	b.n	106ba <_tcc_interrupt_handler+0x26>
   106b4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   106b6:	2c30      	cmp	r4, #48	; 0x30
   106b8:	d00a      	beq.n	106d0 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   106ba:	4643      	mov	r3, r8
   106bc:	58e5      	ldr	r5, [r4, r3]
   106be:	4235      	tst	r5, r6
   106c0:	d0f8      	beq.n	106b4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   106c2:	193b      	adds	r3, r7, r4
   106c4:	685b      	ldr	r3, [r3, #4]
   106c6:	0038      	movs	r0, r7
   106c8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   106ca:	683b      	ldr	r3, [r7, #0]
   106cc:	62dd      	str	r5, [r3, #44]	; 0x2c
   106ce:	e7f1      	b.n	106b4 <_tcc_interrupt_handler+0x20>
		}
	}
}
   106d0:	bc04      	pop	{r2}
   106d2:	4690      	mov	r8, r2
   106d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106d6:	46c0      	nop			; (mov r8, r8)
   106d8:	200010f0 	.word	0x200010f0
   106dc:	000198f8 	.word	0x000198f8

000106e0 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   106e0:	b510      	push	{r4, lr}
   106e2:	2000      	movs	r0, #0
   106e4:	4b01      	ldr	r3, [pc, #4]	; (106ec <TCC0_Handler+0xc>)
   106e6:	4798      	blx	r3
   106e8:	bd10      	pop	{r4, pc}
   106ea:	46c0      	nop			; (mov r8, r8)
   106ec:	00010695 	.word	0x00010695

000106f0 <TCC1_Handler>:
   106f0:	b510      	push	{r4, lr}
   106f2:	2001      	movs	r0, #1
   106f4:	4b01      	ldr	r3, [pc, #4]	; (106fc <TCC1_Handler+0xc>)
   106f6:	4798      	blx	r3
   106f8:	bd10      	pop	{r4, pc}
   106fa:	46c0      	nop			; (mov r8, r8)
   106fc:	00010695 	.word	0x00010695

00010700 <TCC2_Handler>:
   10700:	b510      	push	{r4, lr}
   10702:	2002      	movs	r0, #2
   10704:	4b01      	ldr	r3, [pc, #4]	; (1070c <TCC2_Handler+0xc>)
   10706:	4798      	blx	r3
   10708:	bd10      	pop	{r4, pc}
   1070a:	46c0      	nop			; (mov r8, r8)
   1070c:	00010695 	.word	0x00010695

00010710 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   10710:	e7fe      	b.n	10710 <Dummy_Handler>
	...

00010714 <Reset_Handler>:
{
   10714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
   10716:	4a2a      	ldr	r2, [pc, #168]	; (107c0 <Reset_Handler+0xac>)
   10718:	4b2a      	ldr	r3, [pc, #168]	; (107c4 <Reset_Handler+0xb0>)
   1071a:	429a      	cmp	r2, r3
   1071c:	d011      	beq.n	10742 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
   1071e:	001a      	movs	r2, r3
   10720:	4b29      	ldr	r3, [pc, #164]	; (107c8 <Reset_Handler+0xb4>)
   10722:	429a      	cmp	r2, r3
   10724:	d20d      	bcs.n	10742 <Reset_Handler+0x2e>
   10726:	4a29      	ldr	r2, [pc, #164]	; (107cc <Reset_Handler+0xb8>)
   10728:	3303      	adds	r3, #3
   1072a:	1a9b      	subs	r3, r3, r2
   1072c:	089b      	lsrs	r3, r3, #2
   1072e:	3301      	adds	r3, #1
   10730:	009b      	lsls	r3, r3, #2
   10732:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
   10734:	4823      	ldr	r0, [pc, #140]	; (107c4 <Reset_Handler+0xb0>)
   10736:	4922      	ldr	r1, [pc, #136]	; (107c0 <Reset_Handler+0xac>)
   10738:	588c      	ldr	r4, [r1, r2]
   1073a:	5084      	str	r4, [r0, r2]
   1073c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   1073e:	429a      	cmp	r2, r3
   10740:	d1fa      	bne.n	10738 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
   10742:	4a23      	ldr	r2, [pc, #140]	; (107d0 <Reset_Handler+0xbc>)
   10744:	4b23      	ldr	r3, [pc, #140]	; (107d4 <Reset_Handler+0xc0>)
   10746:	429a      	cmp	r2, r3
   10748:	d20a      	bcs.n	10760 <Reset_Handler+0x4c>
   1074a:	43d3      	mvns	r3, r2
   1074c:	4921      	ldr	r1, [pc, #132]	; (107d4 <Reset_Handler+0xc0>)
   1074e:	185b      	adds	r3, r3, r1
   10750:	2103      	movs	r1, #3
   10752:	438b      	bics	r3, r1
   10754:	3304      	adds	r3, #4
   10756:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
   10758:	2100      	movs	r1, #0
   1075a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
   1075c:	4293      	cmp	r3, r2
   1075e:	d1fc      	bne.n	1075a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   10760:	4a1d      	ldr	r2, [pc, #116]	; (107d8 <Reset_Handler+0xc4>)
   10762:	21ff      	movs	r1, #255	; 0xff
   10764:	4b1d      	ldr	r3, [pc, #116]	; (107dc <Reset_Handler+0xc8>)
   10766:	438b      	bics	r3, r1
   10768:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   1076a:	39fd      	subs	r1, #253	; 0xfd
   1076c:	2390      	movs	r3, #144	; 0x90
   1076e:	005b      	lsls	r3, r3, #1
   10770:	4a1b      	ldr	r2, [pc, #108]	; (107e0 <Reset_Handler+0xcc>)
   10772:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   10774:	4a1b      	ldr	r2, [pc, #108]	; (107e4 <Reset_Handler+0xd0>)
   10776:	78d3      	ldrb	r3, [r2, #3]
   10778:	2503      	movs	r5, #3
   1077a:	43ab      	bics	r3, r5
   1077c:	2402      	movs	r4, #2
   1077e:	4323      	orrs	r3, r4
   10780:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   10782:	78d3      	ldrb	r3, [r2, #3]
   10784:	270c      	movs	r7, #12
   10786:	43bb      	bics	r3, r7
   10788:	2608      	movs	r6, #8
   1078a:	4333      	orrs	r3, r6
   1078c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
   1078e:	4b16      	ldr	r3, [pc, #88]	; (107e8 <Reset_Handler+0xd4>)
   10790:	7b98      	ldrb	r0, [r3, #14]
   10792:	2230      	movs	r2, #48	; 0x30
   10794:	4390      	bics	r0, r2
   10796:	2220      	movs	r2, #32
   10798:	4310      	orrs	r0, r2
   1079a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   1079c:	7b99      	ldrb	r1, [r3, #14]
   1079e:	43b9      	bics	r1, r7
   107a0:	4331      	orrs	r1, r6
   107a2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   107a4:	7b9a      	ldrb	r2, [r3, #14]
   107a6:	43aa      	bics	r2, r5
   107a8:	4322      	orrs	r2, r4
   107aa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
   107ac:	4a0f      	ldr	r2, [pc, #60]	; (107ec <Reset_Handler+0xd8>)
   107ae:	6853      	ldr	r3, [r2, #4]
   107b0:	2180      	movs	r1, #128	; 0x80
   107b2:	430b      	orrs	r3, r1
   107b4:	6053      	str	r3, [r2, #4]
        __libc_init_array();
   107b6:	4b0e      	ldr	r3, [pc, #56]	; (107f0 <Reset_Handler+0xdc>)
   107b8:	4798      	blx	r3
        main();
   107ba:	4b0e      	ldr	r3, [pc, #56]	; (107f4 <Reset_Handler+0xe0>)
   107bc:	4798      	blx	r3
   107be:	e7fe      	b.n	107be <Reset_Handler+0xaa>
   107c0:	0001b1b4 	.word	0x0001b1b4
   107c4:	20000000 	.word	0x20000000
   107c8:	2000033c 	.word	0x2000033c
   107cc:	20000004 	.word	0x20000004
   107d0:	2000033c 	.word	0x2000033c
   107d4:	20001338 	.word	0x20001338
   107d8:	e000ed00 	.word	0xe000ed00
   107dc:	00009c00 	.word	0x00009c00
   107e0:	41007000 	.word	0x41007000
   107e4:	41005000 	.word	0x41005000
   107e8:	41004800 	.word	0x41004800
   107ec:	41004000 	.word	0x41004000
   107f0:	00016559 	.word	0x00016559
   107f4:	00015d05 	.word	0x00015d05

000107f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   107f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   107fa:	46c6      	mov	lr, r8
   107fc:	b500      	push	{lr}
   107fe:	000c      	movs	r4, r1
   10800:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   10802:	2800      	cmp	r0, #0
   10804:	d10f      	bne.n	10826 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
   10806:	2a00      	cmp	r2, #0
   10808:	dd11      	ble.n	1082e <_read+0x36>
   1080a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   1080c:	4e09      	ldr	r6, [pc, #36]	; (10834 <_read+0x3c>)
   1080e:	4d0a      	ldr	r5, [pc, #40]	; (10838 <_read+0x40>)
   10810:	6830      	ldr	r0, [r6, #0]
   10812:	0021      	movs	r1, r4
   10814:	682b      	ldr	r3, [r5, #0]
   10816:	4798      	blx	r3
		ptr++;
   10818:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   1081a:	42bc      	cmp	r4, r7
   1081c:	d1f8      	bne.n	10810 <_read+0x18>
		nChars++;
	}
	return nChars;
}
   1081e:	4640      	mov	r0, r8
   10820:	bc04      	pop	{r2}
   10822:	4690      	mov	r8, r2
   10824:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   10826:	2301      	movs	r3, #1
   10828:	425b      	negs	r3, r3
   1082a:	4698      	mov	r8, r3
   1082c:	e7f7      	b.n	1081e <_read+0x26>
	for (; len > 0; --len) {
   1082e:	4680      	mov	r8, r0
   10830:	e7f5      	b.n	1081e <_read+0x26>
   10832:	46c0      	nop			; (mov r8, r8)
   10834:	20001104 	.word	0x20001104
   10838:	200010fc 	.word	0x200010fc

0001083c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   1083c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1083e:	46c6      	mov	lr, r8
   10840:	b500      	push	{lr}
   10842:	000e      	movs	r6, r1
   10844:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   10846:	3801      	subs	r0, #1
   10848:	2802      	cmp	r0, #2
   1084a:	d810      	bhi.n	1086e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
   1084c:	2a00      	cmp	r2, #0
   1084e:	d011      	beq.n	10874 <_write+0x38>
   10850:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   10852:	4b0c      	ldr	r3, [pc, #48]	; (10884 <_write+0x48>)
   10854:	4698      	mov	r8, r3
   10856:	4f0c      	ldr	r7, [pc, #48]	; (10888 <_write+0x4c>)
   10858:	4643      	mov	r3, r8
   1085a:	6818      	ldr	r0, [r3, #0]
   1085c:	5d31      	ldrb	r1, [r6, r4]
   1085e:	683b      	ldr	r3, [r7, #0]
   10860:	4798      	blx	r3
   10862:	2800      	cmp	r0, #0
   10864:	db08      	blt.n	10878 <_write+0x3c>
			return -1;
		}
		++nChars;
   10866:	3401      	adds	r4, #1
	for (; len != 0; --len) {
   10868:	42a5      	cmp	r5, r4
   1086a:	d1f5      	bne.n	10858 <_write+0x1c>
   1086c:	e006      	b.n	1087c <_write+0x40>
		return -1;
   1086e:	2401      	movs	r4, #1
   10870:	4264      	negs	r4, r4
   10872:	e003      	b.n	1087c <_write+0x40>
	for (; len != 0; --len) {
   10874:	0014      	movs	r4, r2
   10876:	e001      	b.n	1087c <_write+0x40>
			return -1;
   10878:	2401      	movs	r4, #1
   1087a:	4264      	negs	r4, r4
	}
	return nChars;
}
   1087c:	0020      	movs	r0, r4
   1087e:	bc04      	pop	{r2}
   10880:	4690      	mov	r8, r2
   10882:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10884:	20001104 	.word	0x20001104
   10888:	20001100 	.word	0x20001100

0001088c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   1088c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   1088e:	4a06      	ldr	r2, [pc, #24]	; (108a8 <_sbrk+0x1c>)
   10890:	6812      	ldr	r2, [r2, #0]
   10892:	2a00      	cmp	r2, #0
   10894:	d004      	beq.n	108a0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   10896:	4a04      	ldr	r2, [pc, #16]	; (108a8 <_sbrk+0x1c>)
   10898:	6810      	ldr	r0, [r2, #0]

	heap += incr;
   1089a:	18c3      	adds	r3, r0, r3
   1089c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   1089e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   108a0:	4902      	ldr	r1, [pc, #8]	; (108ac <_sbrk+0x20>)
   108a2:	4a01      	ldr	r2, [pc, #4]	; (108a8 <_sbrk+0x1c>)
   108a4:	6011      	str	r1, [r2, #0]
   108a6:	e7f6      	b.n	10896 <_sbrk+0xa>
   108a8:	20000438 	.word	0x20000438
   108ac:	20003338 	.word	0x20003338

000108b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   108b0:	2001      	movs	r0, #1
   108b2:	4240      	negs	r0, r0
   108b4:	4770      	bx	lr

000108b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   108b6:	2380      	movs	r3, #128	; 0x80
   108b8:	019b      	lsls	r3, r3, #6
   108ba:	604b      	str	r3, [r1, #4]

	return 0;
}
   108bc:	2000      	movs	r0, #0
   108be:	4770      	bx	lr

000108c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   108c0:	2001      	movs	r0, #1
   108c2:	4770      	bx	lr

000108c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   108c4:	2000      	movs	r0, #0
   108c6:	4770      	bx	lr

000108c8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   108c8:	b530      	push	{r4, r5, lr}
   108ca:	b087      	sub	sp, #28
   108cc:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   108ce:	aa01      	add	r2, sp, #4
   108d0:	23a0      	movs	r3, #160	; 0xa0
   108d2:	011b      	lsls	r3, r3, #4
   108d4:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
   108d6:	2300      	movs	r3, #0
   108d8:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   108da:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
   108dc:	21fa      	movs	r1, #250	; 0xfa
   108de:	00c9      	lsls	r1, r1, #3
   108e0:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
   108e2:	2101      	movs	r1, #1
   108e4:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   108e6:	2004      	movs	r0, #4
   108e8:	7210      	strb	r0, [r2, #8]
   108ea:	7253      	strb	r3, [r2, #9]
   108ec:	7293      	strb	r3, [r2, #10]
   108ee:	72d3      	strb	r3, [r2, #11]
   108f0:	7311      	strb	r1, [r2, #12]
   108f2:	7351      	strb	r1, [r2, #13]
   108f4:	4b14      	ldr	r3, [pc, #80]	; (10948 <disk_initialize+0x80>)
   108f6:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   108f8:	2306      	movs	r3, #6
   108fa:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   108fc:	4d13      	ldr	r5, [pc, #76]	; (1094c <disk_initialize+0x84>)
   108fe:	4914      	ldr	r1, [pc, #80]	; (10950 <disk_initialize+0x88>)
   10900:	0028      	movs	r0, r5
   10902:	4b14      	ldr	r3, [pc, #80]	; (10954 <disk_initialize+0x8c>)
   10904:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
   10906:	0028      	movs	r0, r5
   10908:	4b13      	ldr	r3, [pc, #76]	; (10958 <disk_initialize+0x90>)
   1090a:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   1090c:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
   1090e:	2c01      	cmp	r4, #1
   10910:	d901      	bls.n	10916 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
   10912:	b007      	add	sp, #28
   10914:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
   10916:	0020      	movs	r0, r4
   10918:	4b10      	ldr	r3, [pc, #64]	; (1095c <disk_initialize+0x94>)
   1091a:	4798      	blx	r3
   1091c:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
   1091e:	2803      	cmp	r0, #3
   10920:	d106      	bne.n	10930 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
   10922:	0020      	movs	r0, r4
   10924:	4b0d      	ldr	r3, [pc, #52]	; (1095c <disk_initialize+0x94>)
   10926:	4798      	blx	r3
   10928:	0003      	movs	r3, r0
		return STA_NOINIT;
   1092a:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
   1092c:	2b03      	cmp	r3, #3
   1092e:	d0f0      	beq.n	10912 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
   10930:	2b00      	cmp	r3, #0
   10932:	d106      	bne.n	10942 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
   10934:	0020      	movs	r0, r4
   10936:	4b0a      	ldr	r3, [pc, #40]	; (10960 <disk_initialize+0x98>)
   10938:	4798      	blx	r3
	return 0;
   1093a:	1e43      	subs	r3, r0, #1
   1093c:	4198      	sbcs	r0, r3
   1093e:	0080      	lsls	r0, r0, #2
   10940:	e7e7      	b.n	10912 <disk_initialize+0x4a>
		return STA_NOINIT;
   10942:	2001      	movs	r0, #1
   10944:	e7e5      	b.n	10912 <disk_initialize+0x4a>
   10946:	46c0      	nop			; (mov r8, r8)
   10948:	000007de 	.word	0x000007de
   1094c:	20001108 	.word	0x20001108
   10950:	40001400 	.word	0x40001400
   10954:	0000e78d 	.word	0x0000e78d
   10958:	0000e629 	.word	0x0000e629
   1095c:	0000e0cd 	.word	0x0000e0cd
   10960:	0000e109 	.word	0x0000e109

00010964 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   10964:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
   10966:	4b05      	ldr	r3, [pc, #20]	; (1097c <disk_status+0x18>)
   10968:	4798      	blx	r3
   1096a:	1e03      	subs	r3, r0, #0
   1096c:	d004      	beq.n	10978 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   1096e:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
   10970:	2b02      	cmp	r3, #2
   10972:	d000      	beq.n	10976 <disk_status+0x12>
	default:
		return STA_NOINIT;
   10974:	3802      	subs	r0, #2
	}
}
   10976:	bd10      	pop	{r4, pc}
		return 0;
   10978:	2000      	movs	r0, #0
   1097a:	e7fc      	b.n	10976 <disk_status+0x12>
   1097c:	0000e0cd 	.word	0x0000e0cd

00010980 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   10980:	b5f0      	push	{r4, r5, r6, r7, lr}
   10982:	46de      	mov	lr, fp
   10984:	464f      	mov	r7, r9
   10986:	4646      	mov	r6, r8
   10988:	b5c0      	push	{r6, r7, lr}
   1098a:	b084      	sub	sp, #16
   1098c:	9001      	str	r0, [sp, #4]
   1098e:	000d      	movs	r5, r1
   10990:	0014      	movs	r4, r2
   10992:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   10994:	4b18      	ldr	r3, [pc, #96]	; (109f8 <disk_read+0x78>)
   10996:	4798      	blx	r3
   10998:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   1099a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   1099c:	2e00      	cmp	r6, #0
   1099e:	d105      	bne.n	109ac <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   109a0:	b004      	add	sp, #16
   109a2:	bc1c      	pop	{r2, r3, r4}
   109a4:	4690      	mov	r8, r2
   109a6:	4699      	mov	r9, r3
   109a8:	46a3      	mov	fp, r4
   109aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   109ac:	a903      	add	r1, sp, #12
   109ae:	9801      	ldr	r0, [sp, #4]
   109b0:	4b12      	ldr	r3, [pc, #72]	; (109fc <disk_read+0x7c>)
   109b2:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   109b4:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   109b6:	0032      	movs	r2, r6
   109b8:	437a      	muls	r2, r7
   109ba:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   109bc:	9b03      	ldr	r3, [sp, #12]
   109be:	3301      	adds	r3, #1
   109c0:	4373      	muls	r3, r6
		return RES_PARERR;
   109c2:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   109c4:	429a      	cmp	r2, r3
   109c6:	d8eb      	bhi.n	109a0 <disk_read+0x20>
	for (i = 0; i < count; i++) {
   109c8:	2f00      	cmp	r7, #0
   109ca:	d011      	beq.n	109f0 <disk_read+0x70>
   109cc:	0273      	lsls	r3, r6, #9
   109ce:	4698      	mov	r8, r3
   109d0:	1c7b      	adds	r3, r7, #1
   109d2:	469b      	mov	fp, r3
   109d4:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   109d6:	4e0a      	ldr	r6, [pc, #40]	; (10a00 <disk_read+0x80>)
   109d8:	002a      	movs	r2, r5
   109da:	0021      	movs	r1, r4
   109dc:	9801      	ldr	r0, [sp, #4]
   109de:	47b0      	blx	r6
   109e0:	2800      	cmp	r0, #0
   109e2:	d107      	bne.n	109f4 <disk_read+0x74>
   109e4:	3701      	adds	r7, #1
   109e6:	444c      	add	r4, r9
   109e8:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   109ea:	455f      	cmp	r7, fp
   109ec:	d1f4      	bne.n	109d8 <disk_read+0x58>
   109ee:	e7d7      	b.n	109a0 <disk_read+0x20>
	return RES_OK;
   109f0:	2000      	movs	r0, #0
   109f2:	e7d5      	b.n	109a0 <disk_read+0x20>
			return RES_ERROR;
   109f4:	2001      	movs	r0, #1
   109f6:	e7d3      	b.n	109a0 <disk_read+0x20>
   109f8:	0000e101 	.word	0x0000e101
   109fc:	0000e0e5 	.word	0x0000e0e5
   10a00:	0000e121 	.word	0x0000e121

00010a04 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   10a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a06:	46de      	mov	lr, fp
   10a08:	464f      	mov	r7, r9
   10a0a:	4646      	mov	r6, r8
   10a0c:	b5c0      	push	{r6, r7, lr}
   10a0e:	b084      	sub	sp, #16
   10a10:	9001      	str	r0, [sp, #4]
   10a12:	000d      	movs	r5, r1
   10a14:	0014      	movs	r4, r2
   10a16:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   10a18:	4b18      	ldr	r3, [pc, #96]	; (10a7c <disk_write+0x78>)
   10a1a:	4798      	blx	r3
   10a1c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
   10a1e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
   10a20:	2e00      	cmp	r6, #0
   10a22:	d105      	bne.n	10a30 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
   10a24:	b004      	add	sp, #16
   10a26:	bc1c      	pop	{r2, r3, r4}
   10a28:	4690      	mov	r8, r2
   10a2a:	4699      	mov	r9, r3
   10a2c:	46a3      	mov	fp, r4
   10a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
   10a30:	a903      	add	r1, sp, #12
   10a32:	9801      	ldr	r0, [sp, #4]
   10a34:	4b12      	ldr	r3, [pc, #72]	; (10a80 <disk_write+0x7c>)
   10a36:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   10a38:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
   10a3a:	0032      	movs	r2, r6
   10a3c:	437a      	muls	r2, r7
   10a3e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
   10a40:	9b03      	ldr	r3, [sp, #12]
   10a42:	3301      	adds	r3, #1
   10a44:	4373      	muls	r3, r6
		return RES_PARERR;
   10a46:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
   10a48:	429a      	cmp	r2, r3
   10a4a:	d8eb      	bhi.n	10a24 <disk_write+0x20>
	for (i = 0; i < count; i++) {
   10a4c:	2f00      	cmp	r7, #0
   10a4e:	d011      	beq.n	10a74 <disk_write+0x70>
   10a50:	0273      	lsls	r3, r6, #9
   10a52:	4698      	mov	r8, r3
   10a54:	1c7b      	adds	r3, r7, #1
   10a56:	469b      	mov	fp, r3
   10a58:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   10a5a:	4e0a      	ldr	r6, [pc, #40]	; (10a84 <disk_write+0x80>)
   10a5c:	002a      	movs	r2, r5
   10a5e:	0021      	movs	r1, r4
   10a60:	9801      	ldr	r0, [sp, #4]
   10a62:	47b0      	blx	r6
   10a64:	2800      	cmp	r0, #0
   10a66:	d107      	bne.n	10a78 <disk_write+0x74>
   10a68:	3701      	adds	r7, #1
   10a6a:	444c      	add	r4, r9
   10a6c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
   10a6e:	455f      	cmp	r7, fp
   10a70:	d1f4      	bne.n	10a5c <disk_write+0x58>
   10a72:	e7d7      	b.n	10a24 <disk_write+0x20>
	return RES_OK;
   10a74:	2000      	movs	r0, #0
   10a76:	e7d5      	b.n	10a24 <disk_write+0x20>
			return RES_ERROR;
   10a78:	2001      	movs	r0, #1
   10a7a:	e7d3      	b.n	10a24 <disk_write+0x20>
   10a7c:	0000e101 	.word	0x0000e101
   10a80:	0000e0e5 	.word	0x0000e0e5
   10a84:	0000e141 	.word	0x0000e141

00010a88 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   10a88:	b510      	push	{r4, lr}
   10a8a:	b082      	sub	sp, #8
   10a8c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
   10a8e:	2901      	cmp	r1, #1
   10a90:	d00b      	beq.n	10aaa <disk_ioctl+0x22>
   10a92:	2900      	cmp	r1, #0
   10a94:	d020      	beq.n	10ad8 <disk_ioctl+0x50>
   10a96:	2902      	cmp	r1, #2
   10a98:	d00f      	beq.n	10aba <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
   10a9a:	2004      	movs	r0, #4
	switch (ctrl) {
   10a9c:	2903      	cmp	r1, #3
   10a9e:	d102      	bne.n	10aa6 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
   10aa0:	2301      	movs	r3, #1
   10aa2:	6013      	str	r3, [r2, #0]
		res = RES_OK;
   10aa4:	2000      	movs	r0, #0
	}

	return res;
}
   10aa6:	b002      	add	sp, #8
   10aa8:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
   10aaa:	a901      	add	r1, sp, #4
   10aac:	4b0e      	ldr	r3, [pc, #56]	; (10ae8 <disk_ioctl+0x60>)
   10aae:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
   10ab0:	9b01      	ldr	r3, [sp, #4]
   10ab2:	3301      	adds	r3, #1
   10ab4:	6023      	str	r3, [r4, #0]
		res = RES_OK;
   10ab6:	2000      	movs	r0, #0
	break;
   10ab8:	e7f5      	b.n	10aa6 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
   10aba:	4b0c      	ldr	r3, [pc, #48]	; (10aec <disk_ioctl+0x64>)
   10abc:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
   10abe:	1e43      	subs	r3, r0, #1
   10ac0:	b2db      	uxtb	r3, r3
   10ac2:	2b01      	cmp	r3, #1
   10ac4:	d904      	bls.n	10ad0 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   10ac6:	1f03      	subs	r3, r0, #4
   10ac8:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
   10aca:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
   10acc:	4213      	tst	r3, r2
   10ace:	d1ea      	bne.n	10aa6 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   10ad0:	2300      	movs	r3, #0
   10ad2:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
   10ad4:	2000      	movs	r0, #0
	break;
   10ad6:	e7e6      	b.n	10aa6 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   10ad8:	4b05      	ldr	r3, [pc, #20]	; (10af0 <disk_ioctl+0x68>)
   10ada:	4798      	blx	r3
   10adc:	2800      	cmp	r0, #0
   10ade:	d001      	beq.n	10ae4 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
   10ae0:	2003      	movs	r0, #3
   10ae2:	e7e0      	b.n	10aa6 <disk_ioctl+0x1e>
			res = RES_OK;
   10ae4:	2000      	movs	r0, #0
   10ae6:	e7de      	b.n	10aa6 <disk_ioctl+0x1e>
   10ae8:	0000e0e5 	.word	0x0000e0e5
   10aec:	0000e101 	.word	0x0000e101
   10af0:	0000e0cd 	.word	0x0000e0cd

00010af4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   10af4:	b500      	push	{lr}
   10af6:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   10af8:	4669      	mov	r1, sp
   10afa:	480f      	ldr	r0, [pc, #60]	; (10b38 <get_fattime+0x44>)
   10afc:	4b0f      	ldr	r3, [pc, #60]	; (10b3c <get_fattime+0x48>)
   10afe:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
   10b00:	466b      	mov	r3, sp
   10b02:	7958      	ldrb	r0, [r3, #5]
   10b04:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
   10b06:	791b      	ldrb	r3, [r3, #4]
   10b08:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
   10b0a:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
   10b0c:	466b      	mov	r3, sp
   10b0e:	789b      	ldrb	r3, [r3, #2]
   10b10:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
   10b12:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
   10b14:	466b      	mov	r3, sp
   10b16:	785b      	ldrb	r3, [r3, #1]
   10b18:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
   10b1a:	4318      	orrs	r0, r3
   10b1c:	466b      	mov	r3, sp
   10b1e:	781b      	ldrb	r3, [r3, #0]
   10b20:	085b      	lsrs	r3, r3, #1
   10b22:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
   10b24:	466b      	mov	r3, sp
   10b26:	88db      	ldrh	r3, [r3, #6]
   10b28:	4a05      	ldr	r2, [pc, #20]	; (10b40 <get_fattime+0x4c>)
   10b2a:	4694      	mov	ip, r2
   10b2c:	4463      	add	r3, ip
   10b2e:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
   10b30:	4318      	orrs	r0, r3

	return ul_time;
}
   10b32:	b003      	add	sp, #12
   10b34:	bd00      	pop	{pc}
   10b36:	46c0      	nop			; (mov r8, r8)
   10b38:	20001108 	.word	0x20001108
   10b3c:	0000e715 	.word	0x0000e715
   10b40:	fffff844 	.word	0xfffff844

00010b44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   10b44:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   10b46:	2a00      	cmp	r2, #0
   10b48:	d005      	beq.n	10b56 <mem_cpy+0x12>
   10b4a:	2300      	movs	r3, #0
		*d++ = *s++;
   10b4c:	5ccc      	ldrb	r4, [r1, r3]
   10b4e:	54c4      	strb	r4, [r0, r3]
   10b50:	3301      	adds	r3, #1
	while (cnt--)
   10b52:	4293      	cmp	r3, r2
   10b54:	d1fa      	bne.n	10b4c <mem_cpy+0x8>
}
   10b56:	bd10      	pop	{r4, pc}

00010b58 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
   10b58:	2a00      	cmp	r2, #0
   10b5a:	d005      	beq.n	10b68 <mem_set+0x10>
   10b5c:	0003      	movs	r3, r0
   10b5e:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
   10b60:	7019      	strb	r1, [r3, #0]
   10b62:	3301      	adds	r3, #1
	while (cnt--)
   10b64:	4293      	cmp	r3, r2
   10b66:	d1fb      	bne.n	10b60 <mem_set+0x8>
}
   10b68:	4770      	bx	lr

00010b6a <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   10b6a:	0002      	movs	r2, r0
	clst -= 2;
   10b6c:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   10b6e:	6983      	ldr	r3, [r0, #24]
   10b70:	3b02      	subs	r3, #2
   10b72:	2000      	movs	r0, #0
   10b74:	4299      	cmp	r1, r3
   10b76:	d203      	bcs.n	10b80 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
   10b78:	7890      	ldrb	r0, [r2, #2]
   10b7a:	4341      	muls	r1, r0
   10b7c:	6a90      	ldr	r0, [r2, #40]	; 0x28
   10b7e:	1808      	adds	r0, r1, r0
}
   10b80:	4770      	bx	lr

00010b82 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   10b82:	0002      	movs	r2, r0
   10b84:	0001      	movs	r1, r0
   10b86:	310b      	adds	r1, #11
	BYTE sum = 0;
   10b88:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   10b8a:	0843      	lsrs	r3, r0, #1
   10b8c:	01c0      	lsls	r0, r0, #7
   10b8e:	4303      	orrs	r3, r0
   10b90:	7810      	ldrb	r0, [r2, #0]
   10b92:	1818      	adds	r0, r3, r0
   10b94:	b2c0      	uxtb	r0, r0
   10b96:	3201      	adds	r2, #1
   10b98:	428a      	cmp	r2, r1
   10b9a:	d1f6      	bne.n	10b8a <sum_sfn+0x8>
	return sum;
}
   10b9c:	4770      	bx	lr
	...

00010ba0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   10ba0:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
   10ba2:	2800      	cmp	r0, #0
   10ba4:	d010      	beq.n	10bc8 <validate+0x28>
   10ba6:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
   10ba8:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
   10baa:	2a00      	cmp	r2, #0
   10bac:	d101      	bne.n	10bb2 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
   10bae:	0018      	movs	r0, r3
   10bb0:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
   10bb2:	88c2      	ldrh	r2, [r0, #6]
   10bb4:	428a      	cmp	r2, r1
   10bb6:	d1fa      	bne.n	10bae <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
   10bb8:	7840      	ldrb	r0, [r0, #1]
   10bba:	4b04      	ldr	r3, [pc, #16]	; (10bcc <validate+0x2c>)
   10bbc:	4798      	blx	r3
		return FR_NOT_READY;
   10bbe:	2303      	movs	r3, #3
	return FR_OK;
   10bc0:	07c0      	lsls	r0, r0, #31
   10bc2:	17c0      	asrs	r0, r0, #31
   10bc4:	4003      	ands	r3, r0
   10bc6:	e7f2      	b.n	10bae <validate+0xe>
		return FR_INVALID_OBJECT;
   10bc8:	2309      	movs	r3, #9
   10bca:	e7f0      	b.n	10bae <validate+0xe>
   10bcc:	00010965 	.word	0x00010965

00010bd0 <check_fs>:
{
   10bd0:	b570      	push	{r4, r5, r6, lr}
   10bd2:	0004      	movs	r4, r0
   10bd4:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   10bd6:	0001      	movs	r1, r0
   10bd8:	3130      	adds	r1, #48	; 0x30
   10bda:	7840      	ldrb	r0, [r0, #1]
   10bdc:	2301      	movs	r3, #1
   10bde:	4d1f      	ldr	r5, [pc, #124]	; (10c5c <check_fs+0x8c>)
   10be0:	47a8      	blx	r5
		return 3;
   10be2:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   10be4:	2800      	cmp	r0, #0
   10be6:	d001      	beq.n	10bec <check_fs+0x1c>
}
   10be8:	0018      	movs	r0, r3
   10bea:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   10bec:	4b1c      	ldr	r3, [pc, #112]	; (10c60 <check_fs+0x90>)
   10bee:	5ce3      	ldrb	r3, [r4, r3]
   10bf0:	021b      	lsls	r3, r3, #8
   10bf2:	4a1c      	ldr	r2, [pc, #112]	; (10c64 <check_fs+0x94>)
   10bf4:	5ca2      	ldrb	r2, [r4, r2]
   10bf6:	431a      	orrs	r2, r3
   10bf8:	491b      	ldr	r1, [pc, #108]	; (10c68 <check_fs+0x98>)
   10bfa:	b212      	sxth	r2, r2
		return 2;
   10bfc:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   10bfe:	428a      	cmp	r2, r1
   10c00:	d1f2      	bne.n	10be8 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   10c02:	3367      	adds	r3, #103	; 0x67
   10c04:	5ce3      	ldrb	r3, [r4, r3]
   10c06:	061b      	lsls	r3, r3, #24
   10c08:	2268      	movs	r2, #104	; 0x68
   10c0a:	5ca2      	ldrb	r2, [r4, r2]
   10c0c:	0412      	lsls	r2, r2, #16
   10c0e:	4313      	orrs	r3, r2
   10c10:	2266      	movs	r2, #102	; 0x66
   10c12:	5ca2      	ldrb	r2, [r4, r2]
   10c14:	4313      	orrs	r3, r2
   10c16:	2267      	movs	r2, #103	; 0x67
   10c18:	5ca2      	ldrb	r2, [r4, r2]
   10c1a:	0212      	lsls	r2, r2, #8
   10c1c:	4313      	orrs	r3, r2
   10c1e:	021b      	lsls	r3, r3, #8
   10c20:	0a1b      	lsrs	r3, r3, #8
   10c22:	4a12      	ldr	r2, [pc, #72]	; (10c6c <check_fs+0x9c>)
   10c24:	4293      	cmp	r3, r2
   10c26:	d016      	beq.n	10c56 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   10c28:	2385      	movs	r3, #133	; 0x85
   10c2a:	5ce3      	ldrb	r3, [r4, r3]
   10c2c:	061b      	lsls	r3, r3, #24
   10c2e:	2284      	movs	r2, #132	; 0x84
   10c30:	5ca2      	ldrb	r2, [r4, r2]
   10c32:	0412      	lsls	r2, r2, #16
   10c34:	4313      	orrs	r3, r2
   10c36:	2282      	movs	r2, #130	; 0x82
   10c38:	5ca2      	ldrb	r2, [r4, r2]
   10c3a:	4313      	orrs	r3, r2
   10c3c:	2283      	movs	r2, #131	; 0x83
   10c3e:	5ca2      	ldrb	r2, [r4, r2]
   10c40:	0212      	lsls	r2, r2, #8
   10c42:	4313      	orrs	r3, r2
   10c44:	021b      	lsls	r3, r3, #8
   10c46:	0a1b      	lsrs	r3, r3, #8
   10c48:	4a09      	ldr	r2, [pc, #36]	; (10c70 <check_fs+0xa0>)
   10c4a:	4694      	mov	ip, r2
   10c4c:	4463      	add	r3, ip
   10c4e:	1e58      	subs	r0, r3, #1
   10c50:	4183      	sbcs	r3, r0
		return 3;
   10c52:	b2db      	uxtb	r3, r3
   10c54:	e7c8      	b.n	10be8 <check_fs+0x18>
		return 0;
   10c56:	2300      	movs	r3, #0
   10c58:	e7c6      	b.n	10be8 <check_fs+0x18>
   10c5a:	46c0      	nop			; (mov r8, r8)
   10c5c:	00010981 	.word	0x00010981
   10c60:	0000022f 	.word	0x0000022f
   10c64:	0000022e 	.word	0x0000022e
   10c68:	ffffaa55 	.word	0xffffaa55
   10c6c:	00544146 	.word	0x00544146
   10c70:	ffabbeba 	.word	0xffabbeba

00010c74 <chk_mounted>:
{
   10c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c76:	46d6      	mov	lr, sl
   10c78:	464f      	mov	r7, r9
   10c7a:	4646      	mov	r6, r8
   10c7c:	b5c0      	push	{r6, r7, lr}
   10c7e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
   10c80:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
   10c82:	781c      	ldrb	r4, [r3, #0]
   10c84:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   10c86:	2c09      	cmp	r4, #9
   10c88:	d80e      	bhi.n	10ca8 <chk_mounted+0x34>
   10c8a:	785a      	ldrb	r2, [r3, #1]
   10c8c:	2a3a      	cmp	r2, #58	; 0x3a
   10c8e:	d001      	beq.n	10c94 <chk_mounted+0x20>
   10c90:	2400      	movs	r4, #0
   10c92:	e00a      	b.n	10caa <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
   10c94:	3302      	adds	r3, #2
   10c96:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
   10c98:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   10c9a:	2c07      	cmp	r4, #7
   10c9c:	d905      	bls.n	10caa <chk_mounted+0x36>
}
   10c9e:	bc1c      	pop	{r2, r3, r4}
   10ca0:	4690      	mov	r8, r2
   10ca2:	4699      	mov	r9, r3
   10ca4:	46a2      	mov	sl, r4
   10ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ca8:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   10caa:	00a3      	lsls	r3, r4, #2
   10cac:	4ac5      	ldr	r2, [pc, #788]	; (10fc4 <chk_mounted+0x350>)
   10cae:	589e      	ldr	r6, [r3, r2]
   10cb0:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   10cb2:	2e00      	cmp	r6, #0
   10cb4:	d100      	bne.n	10cb8 <chk_mounted+0x44>
   10cb6:	e0e8      	b.n	10e8a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
   10cb8:	7833      	ldrb	r3, [r6, #0]
   10cba:	2b00      	cmp	r3, #0
   10cbc:	d00d      	beq.n	10cda <chk_mounted+0x66>
		stat = disk_status(fs->drv);
   10cbe:	7870      	ldrb	r0, [r6, #1]
   10cc0:	4bc1      	ldr	r3, [pc, #772]	; (10fc8 <chk_mounted+0x354>)
   10cc2:	4798      	blx	r3
   10cc4:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   10cc6:	07c2      	lsls	r2, r0, #31
   10cc8:	d407      	bmi.n	10cda <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
   10cca:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   10ccc:	2d00      	cmp	r5, #0
   10cce:	d0e6      	beq.n	10c9e <chk_mounted+0x2a>
   10cd0:	075b      	lsls	r3, r3, #29
   10cd2:	d400      	bmi.n	10cd6 <chk_mounted+0x62>
   10cd4:	e0db      	b.n	10e8e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
   10cd6:	300a      	adds	r0, #10
   10cd8:	e7e1      	b.n	10c9e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
   10cda:	2300      	movs	r3, #0
   10cdc:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   10cde:	b2e0      	uxtb	r0, r4
   10ce0:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   10ce2:	4bba      	ldr	r3, [pc, #744]	; (10fcc <chk_mounted+0x358>)
   10ce4:	4798      	blx	r3
   10ce6:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   10ce8:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   10cea:	07da      	lsls	r2, r3, #31
   10cec:	d4d7      	bmi.n	10c9e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   10cee:	2d00      	cmp	r5, #0
   10cf0:	d002      	beq.n	10cf8 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
   10cf2:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   10cf4:	075b      	lsls	r3, r3, #29
   10cf6:	d4d2      	bmi.n	10c9e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   10cf8:	2100      	movs	r1, #0
   10cfa:	0030      	movs	r0, r6
   10cfc:	4bb4      	ldr	r3, [pc, #720]	; (10fd0 <chk_mounted+0x35c>)
   10cfe:	4798      	blx	r3
   10d00:	0003      	movs	r3, r0
   10d02:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   10d04:	2801      	cmp	r0, #1
   10d06:	d100      	bne.n	10d0a <chk_mounted+0x96>
   10d08:	e09a      	b.n	10e40 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
   10d0a:	2b03      	cmp	r3, #3
   10d0c:	d100      	bne.n	10d10 <chk_mounted+0x9c>
   10d0e:	e0c0      	b.n	10e92 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   10d10:	200d      	movs	r0, #13
   10d12:	2b00      	cmp	r3, #0
   10d14:	d1c3      	bne.n	10c9e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   10d16:	333c      	adds	r3, #60	; 0x3c
   10d18:	5cf2      	ldrb	r2, [r6, r3]
   10d1a:	0212      	lsls	r2, r2, #8
   10d1c:	3b01      	subs	r3, #1
   10d1e:	5cf3      	ldrb	r3, [r6, r3]
   10d20:	4313      	orrs	r3, r2
   10d22:	2280      	movs	r2, #128	; 0x80
   10d24:	0092      	lsls	r2, r2, #2
   10d26:	b21b      	sxth	r3, r3
   10d28:	4293      	cmp	r3, r2
   10d2a:	d1b8      	bne.n	10c9e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   10d2c:	2347      	movs	r3, #71	; 0x47
   10d2e:	5cf3      	ldrb	r3, [r6, r3]
   10d30:	021b      	lsls	r3, r3, #8
   10d32:	3abb      	subs	r2, #187	; 0xbb
   10d34:	3aff      	subs	r2, #255	; 0xff
   10d36:	5cb5      	ldrb	r5, [r6, r2]
   10d38:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   10d3a:	d10d      	bne.n	10d58 <chk_mounted+0xe4>
   10d3c:	2357      	movs	r3, #87	; 0x57
   10d3e:	5cf5      	ldrb	r5, [r6, r3]
   10d40:	062d      	lsls	r5, r5, #24
   10d42:	3b01      	subs	r3, #1
   10d44:	5cf3      	ldrb	r3, [r6, r3]
   10d46:	041b      	lsls	r3, r3, #16
   10d48:	431d      	orrs	r5, r3
   10d4a:	2354      	movs	r3, #84	; 0x54
   10d4c:	5cf3      	ldrb	r3, [r6, r3]
   10d4e:	431d      	orrs	r5, r3
   10d50:	2355      	movs	r3, #85	; 0x55
   10d52:	5cf3      	ldrb	r3, [r6, r3]
   10d54:	021b      	lsls	r3, r3, #8
   10d56:	431d      	orrs	r5, r3
	fs->fsize = fasize;
   10d58:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   10d5a:	2340      	movs	r3, #64	; 0x40
   10d5c:	5cf2      	ldrb	r2, [r6, r3]
   10d5e:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   10d60:	1e53      	subs	r3, r2, #1
   10d62:	200d      	movs	r0, #13
   10d64:	2b01      	cmp	r3, #1
   10d66:	d89a      	bhi.n	10c9e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   10d68:	233d      	movs	r3, #61	; 0x3d
   10d6a:	5cf1      	ldrb	r1, [r6, r3]
   10d6c:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   10d6e:	2900      	cmp	r1, #0
   10d70:	d095      	beq.n	10c9e <chk_mounted+0x2a>
   10d72:	1e4b      	subs	r3, r1, #1
   10d74:	4219      	tst	r1, r3
   10d76:	d192      	bne.n	10c9e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   10d78:	2342      	movs	r3, #66	; 0x42
   10d7a:	5cf3      	ldrb	r3, [r6, r3]
   10d7c:	021b      	lsls	r3, r3, #8
   10d7e:	3034      	adds	r0, #52	; 0x34
   10d80:	5c30      	ldrb	r0, [r6, r0]
   10d82:	4318      	orrs	r0, r3
   10d84:	4680      	mov	r8, r0
   10d86:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   10d88:	200d      	movs	r0, #13
   10d8a:	4643      	mov	r3, r8
   10d8c:	071b      	lsls	r3, r3, #28
   10d8e:	d000      	beq.n	10d92 <chk_mounted+0x11e>
   10d90:	e785      	b.n	10c9e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   10d92:	2344      	movs	r3, #68	; 0x44
   10d94:	5cf3      	ldrb	r3, [r6, r3]
   10d96:	021b      	lsls	r3, r3, #8
   10d98:	3036      	adds	r0, #54	; 0x36
   10d9a:	5c30      	ldrb	r0, [r6, r0]
   10d9c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   10d9e:	d10d      	bne.n	10dbc <chk_mounted+0x148>
   10da0:	3353      	adds	r3, #83	; 0x53
   10da2:	5cf3      	ldrb	r3, [r6, r3]
   10da4:	061b      	lsls	r3, r3, #24
   10da6:	2052      	movs	r0, #82	; 0x52
   10da8:	5c30      	ldrb	r0, [r6, r0]
   10daa:	0400      	lsls	r0, r0, #16
   10dac:	4303      	orrs	r3, r0
   10dae:	2050      	movs	r0, #80	; 0x50
   10db0:	5c30      	ldrb	r0, [r6, r0]
   10db2:	4303      	orrs	r3, r0
   10db4:	2051      	movs	r0, #81	; 0x51
   10db6:	5c30      	ldrb	r0, [r6, r0]
   10db8:	0200      	lsls	r0, r0, #8
   10dba:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   10dbc:	203f      	movs	r0, #63	; 0x3f
   10dbe:	5c30      	ldrb	r0, [r6, r0]
   10dc0:	0200      	lsls	r0, r0, #8
   10dc2:	273e      	movs	r7, #62	; 0x3e
   10dc4:	5df7      	ldrb	r7, [r6, r7]
   10dc6:	4307      	orrs	r7, r0
   10dc8:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   10dca:	200d      	movs	r0, #13
   10dcc:	2f00      	cmp	r7, #0
   10dce:	d100      	bne.n	10dd2 <chk_mounted+0x15e>
   10dd0:	e765      	b.n	10c9e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
   10dd2:	436a      	muls	r2, r5
   10dd4:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   10dd6:	4642      	mov	r2, r8
   10dd8:	0917      	lsrs	r7, r2, #4
   10dda:	4457      	add	r7, sl
   10ddc:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   10dde:	42bb      	cmp	r3, r7
   10de0:	d200      	bcs.n	10de4 <chk_mounted+0x170>
   10de2:	e75c      	b.n	10c9e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   10de4:	1bd8      	subs	r0, r3, r7
   10de6:	4b7b      	ldr	r3, [pc, #492]	; (10fd4 <chk_mounted+0x360>)
   10de8:	4798      	blx	r3
   10dea:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   10dec:	200d      	movs	r0, #13
   10dee:	2b00      	cmp	r3, #0
   10df0:	d100      	bne.n	10df4 <chk_mounted+0x180>
   10df2:	e754      	b.n	10c9e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   10df4:	4a78      	ldr	r2, [pc, #480]	; (10fd8 <chk_mounted+0x364>)
	fmt = FS_FAT12;
   10df6:	429a      	cmp	r2, r3
   10df8:	4192      	sbcs	r2, r2
   10dfa:	4252      	negs	r2, r2
   10dfc:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   10dfe:	4977      	ldr	r1, [pc, #476]	; (10fdc <chk_mounted+0x368>)
   10e00:	428b      	cmp	r3, r1
   10e02:	d848      	bhi.n	10e96 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   10e04:	3302      	adds	r3, #2
   10e06:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   10e08:	19e7      	adds	r7, r4, r7
   10e0a:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   10e0c:	4454      	add	r4, sl
   10e0e:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   10e10:	200d      	movs	r0, #13
   10e12:	4641      	mov	r1, r8
   10e14:	2900      	cmp	r1, #0
   10e16:	d100      	bne.n	10e1a <chk_mounted+0x1a6>
   10e18:	e741      	b.n	10c9e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   10e1a:	444c      	add	r4, r9
   10e1c:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   10e1e:	2a02      	cmp	r2, #2
   10e20:	d12c      	bne.n	10e7c <chk_mounted+0x208>
   10e22:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   10e24:	496e      	ldr	r1, [pc, #440]	; (10fe0 <chk_mounted+0x36c>)
   10e26:	468c      	mov	ip, r1
   10e28:	4463      	add	r3, ip
   10e2a:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   10e2c:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   10e2e:	429d      	cmp	r5, r3
   10e30:	d200      	bcs.n	10e34 <chk_mounted+0x1c0>
   10e32:	e734      	b.n	10c9e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   10e34:	2301      	movs	r3, #1
   10e36:	425b      	negs	r3, r3
   10e38:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   10e3a:	2300      	movs	r3, #0
   10e3c:	60f3      	str	r3, [r6, #12]
   10e3e:	e0b6      	b.n	10fae <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
   10e40:	33f2      	adds	r3, #242	; 0xf2
   10e42:	33ff      	adds	r3, #255	; 0xff
   10e44:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   10e46:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
   10e48:	2b00      	cmp	r3, #0
   10e4a:	d100      	bne.n	10e4e <chk_mounted+0x1da>
   10e4c:	e727      	b.n	10c9e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   10e4e:	23fa      	movs	r3, #250	; 0xfa
   10e50:	33ff      	adds	r3, #255	; 0xff
   10e52:	5cf4      	ldrb	r4, [r6, r3]
   10e54:	0624      	lsls	r4, r4, #24
   10e56:	3b01      	subs	r3, #1
   10e58:	5cf3      	ldrb	r3, [r6, r3]
   10e5a:	041b      	lsls	r3, r3, #16
   10e5c:	431c      	orrs	r4, r3
   10e5e:	23fb      	movs	r3, #251	; 0xfb
   10e60:	005b      	lsls	r3, r3, #1
   10e62:	5cf3      	ldrb	r3, [r6, r3]
   10e64:	431c      	orrs	r4, r3
   10e66:	23f8      	movs	r3, #248	; 0xf8
   10e68:	33ff      	adds	r3, #255	; 0xff
   10e6a:	5cf2      	ldrb	r2, [r6, r3]
   10e6c:	0212      	lsls	r2, r2, #8
   10e6e:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
   10e70:	0021      	movs	r1, r4
   10e72:	0030      	movs	r0, r6
   10e74:	4b56      	ldr	r3, [pc, #344]	; (10fd0 <chk_mounted+0x35c>)
   10e76:	4798      	blx	r3
   10e78:	0003      	movs	r3, r0
   10e7a:	e746      	b.n	10d0a <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   10e7c:	2103      	movs	r1, #3
   10e7e:	4359      	muls	r1, r3
   10e80:	0849      	lsrs	r1, r1, #1
   10e82:	2001      	movs	r0, #1
   10e84:	4003      	ands	r3, r0
   10e86:	18cb      	adds	r3, r1, r3
   10e88:	e7cc      	b.n	10e24 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   10e8a:	200c      	movs	r0, #12
   10e8c:	e707      	b.n	10c9e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
   10e8e:	2000      	movs	r0, #0
   10e90:	e705      	b.n	10c9e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
   10e92:	2001      	movs	r0, #1
   10e94:	e703      	b.n	10c9e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   10e96:	3302      	adds	r3, #2
   10e98:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   10e9a:	19e7      	adds	r7, r4, r7
   10e9c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   10e9e:	4652      	mov	r2, sl
   10ea0:	18a2      	adds	r2, r4, r2
   10ea2:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   10ea4:	200d      	movs	r0, #13
   10ea6:	4642      	mov	r2, r8
   10ea8:	2a00      	cmp	r2, #0
   10eaa:	d000      	beq.n	10eae <chk_mounted+0x23a>
   10eac:	e6f7      	b.n	10c9e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   10eae:	225f      	movs	r2, #95	; 0x5f
   10eb0:	5cb2      	ldrb	r2, [r6, r2]
   10eb2:	0612      	lsls	r2, r2, #24
   10eb4:	215e      	movs	r1, #94	; 0x5e
   10eb6:	5c71      	ldrb	r1, [r6, r1]
   10eb8:	0409      	lsls	r1, r1, #16
   10eba:	430a      	orrs	r2, r1
   10ebc:	215c      	movs	r1, #92	; 0x5c
   10ebe:	5c71      	ldrb	r1, [r6, r1]
   10ec0:	430a      	orrs	r2, r1
   10ec2:	215d      	movs	r1, #93	; 0x5d
   10ec4:	5c71      	ldrb	r1, [r6, r1]
   10ec6:	0209      	lsls	r1, r1, #8
   10ec8:	430a      	orrs	r2, r1
   10eca:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   10ecc:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   10ece:	4a44      	ldr	r2, [pc, #272]	; (10fe0 <chk_mounted+0x36c>)
   10ed0:	4694      	mov	ip, r2
   10ed2:	4463      	add	r3, ip
   10ed4:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
   10ed6:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   10ed8:	429d      	cmp	r5, r3
   10eda:	d200      	bcs.n	10ede <chk_mounted+0x26a>
   10edc:	e6df      	b.n	10c9e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
   10ede:	2301      	movs	r3, #1
   10ee0:	425b      	negs	r3, r3
   10ee2:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
   10ee4:	2300      	movs	r3, #0
   10ee6:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
   10ee8:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   10eea:	3361      	adds	r3, #97	; 0x61
   10eec:	5cf3      	ldrb	r3, [r6, r3]
   10eee:	021b      	lsls	r3, r3, #8
   10ef0:	2260      	movs	r2, #96	; 0x60
   10ef2:	5cb2      	ldrb	r2, [r6, r2]
   10ef4:	431a      	orrs	r2, r3
   10ef6:	1912      	adds	r2, r2, r4
   10ef8:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   10efa:	0031      	movs	r1, r6
   10efc:	3130      	adds	r1, #48	; 0x30
   10efe:	7870      	ldrb	r0, [r6, #1]
   10f00:	2301      	movs	r3, #1
   10f02:	4c38      	ldr	r4, [pc, #224]	; (10fe4 <chk_mounted+0x370>)
   10f04:	47a0      	blx	r4
   10f06:	2203      	movs	r2, #3
   10f08:	2800      	cmp	r0, #0
   10f0a:	d150      	bne.n	10fae <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   10f0c:	4b36      	ldr	r3, [pc, #216]	; (10fe8 <chk_mounted+0x374>)
   10f0e:	5cf2      	ldrb	r2, [r6, r3]
   10f10:	0212      	lsls	r2, r2, #8
   10f12:	4b36      	ldr	r3, [pc, #216]	; (10fec <chk_mounted+0x378>)
   10f14:	5cf3      	ldrb	r3, [r6, r3]
   10f16:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   10f18:	4935      	ldr	r1, [pc, #212]	; (10ff0 <chk_mounted+0x37c>)
   10f1a:	b21b      	sxth	r3, r3
   10f1c:	2203      	movs	r2, #3
   10f1e:	428b      	cmp	r3, r1
   10f20:	d145      	bne.n	10fae <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   10f22:	2333      	movs	r3, #51	; 0x33
   10f24:	5cf3      	ldrb	r3, [r6, r3]
   10f26:	061b      	lsls	r3, r3, #24
   10f28:	322f      	adds	r2, #47	; 0x2f
   10f2a:	5cb2      	ldrb	r2, [r6, r2]
   10f2c:	0412      	lsls	r2, r2, #16
   10f2e:	4313      	orrs	r3, r2
   10f30:	2230      	movs	r2, #48	; 0x30
   10f32:	5cb2      	ldrb	r2, [r6, r2]
   10f34:	4313      	orrs	r3, r2
   10f36:	2231      	movs	r2, #49	; 0x31
   10f38:	5cb2      	ldrb	r2, [r6, r2]
   10f3a:	0212      	lsls	r2, r2, #8
   10f3c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   10f3e:	492d      	ldr	r1, [pc, #180]	; (10ff4 <chk_mounted+0x380>)
   10f40:	2203      	movs	r2, #3
   10f42:	428b      	cmp	r3, r1
   10f44:	d133      	bne.n	10fae <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   10f46:	4b2c      	ldr	r3, [pc, #176]	; (10ff8 <chk_mounted+0x384>)
   10f48:	5cf3      	ldrb	r3, [r6, r3]
   10f4a:	061b      	lsls	r3, r3, #24
   10f4c:	4a2b      	ldr	r2, [pc, #172]	; (10ffc <chk_mounted+0x388>)
   10f4e:	5cb2      	ldrb	r2, [r6, r2]
   10f50:	0412      	lsls	r2, r2, #16
   10f52:	4313      	orrs	r3, r2
   10f54:	2285      	movs	r2, #133	; 0x85
   10f56:	0092      	lsls	r2, r2, #2
   10f58:	5cb2      	ldrb	r2, [r6, r2]
   10f5a:	4313      	orrs	r3, r2
   10f5c:	4a28      	ldr	r2, [pc, #160]	; (11000 <chk_mounted+0x38c>)
   10f5e:	5cb2      	ldrb	r2, [r6, r2]
   10f60:	0212      	lsls	r2, r2, #8
   10f62:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   10f64:	4927      	ldr	r1, [pc, #156]	; (11004 <chk_mounted+0x390>)
   10f66:	2203      	movs	r2, #3
   10f68:	428b      	cmp	r3, r1
   10f6a:	d120      	bne.n	10fae <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   10f6c:	4b26      	ldr	r3, [pc, #152]	; (11008 <chk_mounted+0x394>)
   10f6e:	5cf3      	ldrb	r3, [r6, r3]
   10f70:	061b      	lsls	r3, r3, #24
   10f72:	4a26      	ldr	r2, [pc, #152]	; (1100c <chk_mounted+0x398>)
   10f74:	5cb2      	ldrb	r2, [r6, r2]
   10f76:	0412      	lsls	r2, r2, #16
   10f78:	4313      	orrs	r3, r2
   10f7a:	2287      	movs	r2, #135	; 0x87
   10f7c:	0092      	lsls	r2, r2, #2
   10f7e:	5cb2      	ldrb	r2, [r6, r2]
   10f80:	4313      	orrs	r3, r2
   10f82:	4a23      	ldr	r2, [pc, #140]	; (11010 <chk_mounted+0x39c>)
   10f84:	5cb2      	ldrb	r2, [r6, r2]
   10f86:	0212      	lsls	r2, r2, #8
   10f88:	4313      	orrs	r3, r2
   10f8a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   10f8c:	4b21      	ldr	r3, [pc, #132]	; (11014 <chk_mounted+0x3a0>)
   10f8e:	5cf3      	ldrb	r3, [r6, r3]
   10f90:	061b      	lsls	r3, r3, #24
   10f92:	4a21      	ldr	r2, [pc, #132]	; (11018 <chk_mounted+0x3a4>)
   10f94:	5cb2      	ldrb	r2, [r6, r2]
   10f96:	0412      	lsls	r2, r2, #16
   10f98:	4313      	orrs	r3, r2
   10f9a:	2286      	movs	r2, #134	; 0x86
   10f9c:	0092      	lsls	r2, r2, #2
   10f9e:	5cb2      	ldrb	r2, [r6, r2]
   10fa0:	4313      	orrs	r3, r2
   10fa2:	4a1e      	ldr	r2, [pc, #120]	; (1101c <chk_mounted+0x3a8>)
   10fa4:	5cb2      	ldrb	r2, [r6, r2]
   10fa6:	0212      	lsls	r2, r2, #8
   10fa8:	4313      	orrs	r3, r2
   10faa:	6133      	str	r3, [r6, #16]
   10fac:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
   10fae:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   10fb0:	4a1b      	ldr	r2, [pc, #108]	; (11020 <chk_mounted+0x3ac>)
   10fb2:	8813      	ldrh	r3, [r2, #0]
   10fb4:	3301      	adds	r3, #1
   10fb6:	b29b      	uxth	r3, r3
   10fb8:	8013      	strh	r3, [r2, #0]
   10fba:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   10fbc:	2000      	movs	r0, #0
   10fbe:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
   10fc0:	7130      	strb	r0, [r6, #4]
	return FR_OK;
   10fc2:	e66c      	b.n	10c9e <chk_mounted+0x2a>
   10fc4:	2000043c 	.word	0x2000043c
   10fc8:	00010965 	.word	0x00010965
   10fcc:	000108c9 	.word	0x000108c9
   10fd0:	00010bd1 	.word	0x00010bd1
   10fd4:	0001620d 	.word	0x0001620d
   10fd8:	00000ff5 	.word	0x00000ff5
   10fdc:	0000fff5 	.word	0x0000fff5
   10fe0:	000001ff 	.word	0x000001ff
   10fe4:	00010981 	.word	0x00010981
   10fe8:	0000022f 	.word	0x0000022f
   10fec:	0000022e 	.word	0x0000022e
   10ff0:	ffffaa55 	.word	0xffffaa55
   10ff4:	41615252 	.word	0x41615252
   10ff8:	00000217 	.word	0x00000217
   10ffc:	00000216 	.word	0x00000216
   11000:	00000215 	.word	0x00000215
   11004:	61417272 	.word	0x61417272
   11008:	0000021f 	.word	0x0000021f
   1100c:	0000021e 	.word	0x0000021e
   11010:	0000021d 	.word	0x0000021d
   11014:	0000021b 	.word	0x0000021b
   11018:	0000021a 	.word	0x0000021a
   1101c:	00000219 	.word	0x00000219
   11020:	2000045c 	.word	0x2000045c

00011024 <move_window>:
{
   11024:	b5f0      	push	{r4, r5, r6, r7, lr}
   11026:	46ce      	mov	lr, r9
   11028:	b500      	push	{lr}
   1102a:	b082      	sub	sp, #8
   1102c:	0004      	movs	r4, r0
   1102e:	000f      	movs	r7, r1
	wsect = fs->winsect;
   11030:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
   11032:	428d      	cmp	r5, r1
   11034:	d03f      	beq.n	110b6 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
   11036:	7903      	ldrb	r3, [r0, #4]
   11038:	2b00      	cmp	r3, #0
   1103a:	d107      	bne.n	1104c <move_window+0x28>
	return FR_OK;
   1103c:	2300      	movs	r3, #0
		if (sector) {
   1103e:	2f00      	cmp	r7, #0
   11040:	d12c      	bne.n	1109c <move_window+0x78>
}
   11042:	0018      	movs	r0, r3
   11044:	b002      	add	sp, #8
   11046:	bc04      	pop	{r2}
   11048:	4691      	mov	r9, r2
   1104a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   1104c:	2330      	movs	r3, #48	; 0x30
   1104e:	469c      	mov	ip, r3
   11050:	4484      	add	ip, r0
   11052:	4663      	mov	r3, ip
   11054:	4661      	mov	r1, ip
   11056:	9301      	str	r3, [sp, #4]
   11058:	7840      	ldrb	r0, [r0, #1]
   1105a:	2301      	movs	r3, #1
   1105c:	002a      	movs	r2, r5
   1105e:	4e17      	ldr	r6, [pc, #92]	; (110bc <move_window+0x98>)
   11060:	47b0      	blx	r6
				return FR_DISK_ERR;
   11062:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   11064:	2800      	cmp	r0, #0
   11066:	d1ec      	bne.n	11042 <move_window+0x1e>
			fs->wflag = 0;
   11068:	2300      	movs	r3, #0
   1106a:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   1106c:	6a23      	ldr	r3, [r4, #32]
   1106e:	69e2      	ldr	r2, [r4, #28]
   11070:	4694      	mov	ip, r2
   11072:	4463      	add	r3, ip
   11074:	429d      	cmp	r5, r3
   11076:	d2e1      	bcs.n	1103c <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   11078:	78e6      	ldrb	r6, [r4, #3]
   1107a:	2e01      	cmp	r6, #1
   1107c:	d9de      	bls.n	1103c <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
   1107e:	4b0f      	ldr	r3, [pc, #60]	; (110bc <move_window+0x98>)
   11080:	4699      	mov	r9, r3
					wsect += fs->fsize;
   11082:	69e3      	ldr	r3, [r4, #28]
   11084:	469c      	mov	ip, r3
   11086:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
   11088:	7860      	ldrb	r0, [r4, #1]
   1108a:	2301      	movs	r3, #1
   1108c:	002a      	movs	r2, r5
   1108e:	9901      	ldr	r1, [sp, #4]
   11090:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   11092:	3e01      	subs	r6, #1
   11094:	b2f6      	uxtb	r6, r6
   11096:	2e01      	cmp	r6, #1
   11098:	d1f3      	bne.n	11082 <move_window+0x5e>
   1109a:	e7cf      	b.n	1103c <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   1109c:	0021      	movs	r1, r4
   1109e:	3130      	adds	r1, #48	; 0x30
   110a0:	7860      	ldrb	r0, [r4, #1]
   110a2:	3301      	adds	r3, #1
   110a4:	003a      	movs	r2, r7
   110a6:	4d06      	ldr	r5, [pc, #24]	; (110c0 <move_window+0x9c>)
   110a8:	47a8      	blx	r5
				return FR_DISK_ERR;
   110aa:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   110ac:	2800      	cmp	r0, #0
   110ae:	d1c8      	bne.n	11042 <move_window+0x1e>
			fs->winsect = sector;
   110b0:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
   110b2:	2300      	movs	r3, #0
   110b4:	e7c5      	b.n	11042 <move_window+0x1e>
   110b6:	2300      	movs	r3, #0
   110b8:	e7c3      	b.n	11042 <move_window+0x1e>
   110ba:	46c0      	nop			; (mov r8, r8)
   110bc:	00010a05 	.word	0x00010a05
   110c0:	00010981 	.word	0x00010981

000110c4 <get_fat>:
{
   110c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110c6:	0005      	movs	r5, r0
   110c8:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   110ca:	2901      	cmp	r1, #1
   110cc:	d974      	bls.n	111b8 <get_fat+0xf4>
		return 1;
   110ce:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   110d0:	69ab      	ldr	r3, [r5, #24]
   110d2:	4299      	cmp	r1, r3
   110d4:	d271      	bcs.n	111ba <get_fat+0xf6>
	switch (fs->fs_type) {
   110d6:	782b      	ldrb	r3, [r5, #0]
   110d8:	2b02      	cmp	r3, #2
   110da:	d034      	beq.n	11146 <get_fat+0x82>
   110dc:	2b03      	cmp	r3, #3
   110de:	d049      	beq.n	11174 <get_fat+0xb0>
   110e0:	2b01      	cmp	r3, #1
   110e2:	d002      	beq.n	110ea <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   110e4:	2001      	movs	r0, #1
   110e6:	4240      	negs	r0, r0
   110e8:	e067      	b.n	111ba <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
   110ea:	084e      	lsrs	r6, r1, #1
   110ec:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   110ee:	0a71      	lsrs	r1, r6, #9
   110f0:	6a2b      	ldr	r3, [r5, #32]
   110f2:	469c      	mov	ip, r3
   110f4:	4461      	add	r1, ip
   110f6:	0028      	movs	r0, r5
   110f8:	4b30      	ldr	r3, [pc, #192]	; (111bc <get_fat+0xf8>)
   110fa:	4798      	blx	r3
   110fc:	2800      	cmp	r0, #0
   110fe:	d002      	beq.n	11106 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   11100:	2001      	movs	r0, #1
   11102:	4240      	negs	r0, r0
   11104:	e059      	b.n	111ba <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
   11106:	05f3      	lsls	r3, r6, #23
   11108:	0ddb      	lsrs	r3, r3, #23
   1110a:	18eb      	adds	r3, r5, r3
   1110c:	3330      	adds	r3, #48	; 0x30
   1110e:	781f      	ldrb	r7, [r3, #0]
   11110:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   11112:	0a71      	lsrs	r1, r6, #9
   11114:	6a2b      	ldr	r3, [r5, #32]
   11116:	469c      	mov	ip, r3
   11118:	4461      	add	r1, ip
   1111a:	0028      	movs	r0, r5
   1111c:	4b27      	ldr	r3, [pc, #156]	; (111bc <get_fat+0xf8>)
   1111e:	4798      	blx	r3
   11120:	2800      	cmp	r0, #0
   11122:	d002      	beq.n	1112a <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   11124:	2001      	movs	r0, #1
   11126:	4240      	negs	r0, r0
   11128:	e047      	b.n	111ba <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
   1112a:	05f6      	lsls	r6, r6, #23
   1112c:	0df6      	lsrs	r6, r6, #23
   1112e:	19ad      	adds	r5, r5, r6
   11130:	3530      	adds	r5, #48	; 0x30
   11132:	7828      	ldrb	r0, [r5, #0]
   11134:	0200      	lsls	r0, r0, #8
   11136:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   11138:	07e3      	lsls	r3, r4, #31
   1113a:	d501      	bpl.n	11140 <get_fat+0x7c>
   1113c:	0900      	lsrs	r0, r0, #4
   1113e:	e03c      	b.n	111ba <get_fat+0xf6>
   11140:	0500      	lsls	r0, r0, #20
   11142:	0d00      	lsrs	r0, r0, #20
   11144:	e039      	b.n	111ba <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   11146:	0a09      	lsrs	r1, r1, #8
   11148:	6a2b      	ldr	r3, [r5, #32]
   1114a:	469c      	mov	ip, r3
   1114c:	4461      	add	r1, ip
   1114e:	0028      	movs	r0, r5
   11150:	4b1a      	ldr	r3, [pc, #104]	; (111bc <get_fat+0xf8>)
   11152:	4798      	blx	r3
   11154:	2800      	cmp	r0, #0
   11156:	d002      	beq.n	1115e <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   11158:	2001      	movs	r0, #1
   1115a:	4240      	negs	r0, r0
   1115c:	e02d      	b.n	111ba <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
   1115e:	0064      	lsls	r4, r4, #1
   11160:	23ff      	movs	r3, #255	; 0xff
   11162:	005b      	lsls	r3, r3, #1
   11164:	401c      	ands	r4, r3
		return LD_WORD(p);
   11166:	192d      	adds	r5, r5, r4
   11168:	3530      	adds	r5, #48	; 0x30
   1116a:	786b      	ldrb	r3, [r5, #1]
   1116c:	021b      	lsls	r3, r3, #8
   1116e:	7828      	ldrb	r0, [r5, #0]
   11170:	4318      	orrs	r0, r3
   11172:	e022      	b.n	111ba <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   11174:	09c9      	lsrs	r1, r1, #7
   11176:	6a2b      	ldr	r3, [r5, #32]
   11178:	469c      	mov	ip, r3
   1117a:	4461      	add	r1, ip
   1117c:	0028      	movs	r0, r5
   1117e:	4b0f      	ldr	r3, [pc, #60]	; (111bc <get_fat+0xf8>)
   11180:	4798      	blx	r3
   11182:	2800      	cmp	r0, #0
   11184:	d002      	beq.n	1118c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   11186:	2001      	movs	r0, #1
   11188:	4240      	negs	r0, r0
   1118a:	e016      	b.n	111ba <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
   1118c:	00a4      	lsls	r4, r4, #2
   1118e:	23fe      	movs	r3, #254	; 0xfe
   11190:	005b      	lsls	r3, r3, #1
   11192:	401c      	ands	r4, r3
   11194:	0023      	movs	r3, r4
   11196:	3330      	adds	r3, #48	; 0x30
   11198:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
   1119a:	78d8      	ldrb	r0, [r3, #3]
   1119c:	0600      	lsls	r0, r0, #24
   1119e:	789a      	ldrb	r2, [r3, #2]
   111a0:	0412      	lsls	r2, r2, #16
   111a2:	4310      	orrs	r0, r2
   111a4:	192c      	adds	r4, r5, r4
   111a6:	3430      	adds	r4, #48	; 0x30
   111a8:	7822      	ldrb	r2, [r4, #0]
   111aa:	4310      	orrs	r0, r2
   111ac:	785b      	ldrb	r3, [r3, #1]
   111ae:	021b      	lsls	r3, r3, #8
   111b0:	4318      	orrs	r0, r3
   111b2:	0100      	lsls	r0, r0, #4
   111b4:	0900      	lsrs	r0, r0, #4
   111b6:	e000      	b.n	111ba <get_fat+0xf6>
		return 1;
   111b8:	2001      	movs	r0, #1
}
   111ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   111bc:	00011025 	.word	0x00011025

000111c0 <dir_sdi>:
{
   111c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111c2:	0004      	movs	r4, r0
   111c4:	000d      	movs	r5, r1
	dj->index = idx;
   111c6:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
   111c8:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
   111ca:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   111cc:	2901      	cmp	r1, #1
   111ce:	d003      	beq.n	111d8 <dir_sdi+0x18>
   111d0:	6823      	ldr	r3, [r4, #0]
   111d2:	699a      	ldr	r2, [r3, #24]
   111d4:	4291      	cmp	r1, r2
   111d6:	d300      	bcc.n	111da <dir_sdi+0x1a>
}
   111d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   111da:	2900      	cmp	r1, #0
   111dc:	d119      	bne.n	11212 <dir_sdi+0x52>
   111de:	781a      	ldrb	r2, [r3, #0]
   111e0:	2a03      	cmp	r2, #3
   111e2:	d013      	beq.n	1120c <dir_sdi+0x4c>
		dj->clust = clst;
   111e4:	2200      	movs	r2, #0
   111e6:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   111e8:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
   111ea:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   111ec:	42aa      	cmp	r2, r5
   111ee:	d9f3      	bls.n	111d8 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   111f0:	092a      	lsrs	r2, r5, #4
   111f2:	b292      	uxth	r2, r2
   111f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   111f6:	189b      	adds	r3, r3, r2
   111f8:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   111fa:	6823      	ldr	r3, [r4, #0]
   111fc:	3330      	adds	r3, #48	; 0x30
   111fe:	220f      	movs	r2, #15
   11200:	4015      	ands	r5, r2
   11202:	016d      	lsls	r5, r5, #5
   11204:	195d      	adds	r5, r3, r5
   11206:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
   11208:	2000      	movs	r0, #0
   1120a:	e7e5      	b.n	111d8 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
   1120c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   1120e:	2900      	cmp	r1, #0
   11210:	d0e8      	beq.n	111e4 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   11212:	789e      	ldrb	r6, [r3, #2]
   11214:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
   11216:	42b5      	cmp	r5, r6
   11218:	d313      	bcc.n	11242 <dir_sdi+0x82>
   1121a:	1bad      	subs	r5, r5, r6
   1121c:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   1121e:	4f10      	ldr	r7, [pc, #64]	; (11260 <dir_sdi+0xa0>)
   11220:	e000      	b.n	11224 <dir_sdi+0x64>
   11222:	001d      	movs	r5, r3
   11224:	6820      	ldr	r0, [r4, #0]
   11226:	47b8      	blx	r7
   11228:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   1122a:	1c43      	adds	r3, r0, #1
   1122c:	d012      	beq.n	11254 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   1122e:	2801      	cmp	r0, #1
   11230:	d912      	bls.n	11258 <dir_sdi+0x98>
   11232:	6823      	ldr	r3, [r4, #0]
   11234:	699b      	ldr	r3, [r3, #24]
   11236:	4298      	cmp	r0, r3
   11238:	d210      	bcs.n	1125c <dir_sdi+0x9c>
   1123a:	1bab      	subs	r3, r5, r6
   1123c:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
   1123e:	42b5      	cmp	r5, r6
   11240:	d2ef      	bcs.n	11222 <dir_sdi+0x62>
		dj->clust = clst;
   11242:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   11244:	6820      	ldr	r0, [r4, #0]
   11246:	4b07      	ldr	r3, [pc, #28]	; (11264 <dir_sdi+0xa4>)
   11248:	4798      	blx	r3
   1124a:	092b      	lsrs	r3, r5, #4
   1124c:	b29b      	uxth	r3, r3
   1124e:	1818      	adds	r0, r3, r0
   11250:	6120      	str	r0, [r4, #16]
   11252:	e7d2      	b.n	111fa <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   11254:	2001      	movs	r0, #1
   11256:	e7bf      	b.n	111d8 <dir_sdi+0x18>
				return FR_INT_ERR;
   11258:	2002      	movs	r0, #2
   1125a:	e7bd      	b.n	111d8 <dir_sdi+0x18>
   1125c:	2002      	movs	r0, #2
   1125e:	e7bb      	b.n	111d8 <dir_sdi+0x18>
   11260:	000110c5 	.word	0x000110c5
   11264:	00010b6b 	.word	0x00010b6b

00011268 <put_fat>:
{
   11268:	b5f0      	push	{r4, r5, r6, r7, lr}
   1126a:	46c6      	mov	lr, r8
   1126c:	b500      	push	{lr}
   1126e:	0007      	movs	r7, r0
   11270:	000c      	movs	r4, r1
   11272:	0016      	movs	r6, r2
		res = FR_INT_ERR;
   11274:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   11276:	2901      	cmp	r1, #1
   11278:	d902      	bls.n	11280 <put_fat+0x18>
   1127a:	6983      	ldr	r3, [r0, #24]
   1127c:	4299      	cmp	r1, r3
   1127e:	d303      	bcc.n	11288 <put_fat+0x20>
}
   11280:	0028      	movs	r0, r5
   11282:	bc04      	pop	{r2}
   11284:	4690      	mov	r8, r2
   11286:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
   11288:	7803      	ldrb	r3, [r0, #0]
   1128a:	2b02      	cmp	r3, #2
   1128c:	d053      	beq.n	11336 <put_fat+0xce>
   1128e:	2b03      	cmp	r3, #3
   11290:	d063      	beq.n	1135a <put_fat+0xf2>
			res = FR_INT_ERR;
   11292:	2502      	movs	r5, #2
		switch (fs->fs_type) {
   11294:	2b01      	cmp	r3, #1
   11296:	d002      	beq.n	1129e <put_fat+0x36>
		fs->wflag = 1;
   11298:	2301      	movs	r3, #1
   1129a:	713b      	strb	r3, [r7, #4]
   1129c:	e7f0      	b.n	11280 <put_fat+0x18>
			bc = clst; bc += bc / 2;
   1129e:	084b      	lsrs	r3, r1, #1
   112a0:	4698      	mov	r8, r3
   112a2:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   112a4:	4643      	mov	r3, r8
   112a6:	0a59      	lsrs	r1, r3, #9
   112a8:	6a03      	ldr	r3, [r0, #32]
   112aa:	469c      	mov	ip, r3
   112ac:	4461      	add	r1, ip
   112ae:	4b3b      	ldr	r3, [pc, #236]	; (1139c <put_fat+0x134>)
   112b0:	4798      	blx	r3
   112b2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   112b4:	d1f0      	bne.n	11298 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
   112b6:	4643      	mov	r3, r8
   112b8:	05db      	lsls	r3, r3, #23
   112ba:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   112bc:	07e2      	lsls	r2, r4, #31
   112be:	d51f      	bpl.n	11300 <put_fat+0x98>
   112c0:	18fb      	adds	r3, r7, r3
   112c2:	3330      	adds	r3, #48	; 0x30
   112c4:	7819      	ldrb	r1, [r3, #0]
   112c6:	220f      	movs	r2, #15
   112c8:	400a      	ands	r2, r1
   112ca:	0131      	lsls	r1, r6, #4
   112cc:	20ff      	movs	r0, #255	; 0xff
   112ce:	0100      	lsls	r0, r0, #4
   112d0:	4001      	ands	r1, r0
   112d2:	430a      	orrs	r2, r1
   112d4:	701a      	strb	r2, [r3, #0]
			bc++;
   112d6:	4644      	mov	r4, r8
   112d8:	3401      	adds	r4, #1
			fs->wflag = 1;
   112da:	2301      	movs	r3, #1
   112dc:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   112de:	0a61      	lsrs	r1, r4, #9
   112e0:	6a3b      	ldr	r3, [r7, #32]
   112e2:	469c      	mov	ip, r3
   112e4:	4461      	add	r1, ip
   112e6:	0038      	movs	r0, r7
   112e8:	4b2c      	ldr	r3, [pc, #176]	; (1139c <put_fat+0x134>)
   112ea:	4798      	blx	r3
			if (res != FR_OK) break;
   112ec:	2800      	cmp	r0, #0
   112ee:	d151      	bne.n	11394 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
   112f0:	05e4      	lsls	r4, r4, #23
   112f2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   112f4:	0936      	lsrs	r6, r6, #4
   112f6:	b2f6      	uxtb	r6, r6
   112f8:	193c      	adds	r4, r7, r4
   112fa:	3430      	adds	r4, #48	; 0x30
   112fc:	7026      	strb	r6, [r4, #0]
			break;
   112fe:	e7cb      	b.n	11298 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   11300:	18fb      	adds	r3, r7, r3
   11302:	3330      	adds	r3, #48	; 0x30
   11304:	701e      	strb	r6, [r3, #0]
			bc++;
   11306:	4644      	mov	r4, r8
   11308:	3401      	adds	r4, #1
			fs->wflag = 1;
   1130a:	2301      	movs	r3, #1
   1130c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   1130e:	0a61      	lsrs	r1, r4, #9
   11310:	6a3b      	ldr	r3, [r7, #32]
   11312:	469c      	mov	ip, r3
   11314:	4461      	add	r1, ip
   11316:	0038      	movs	r0, r7
   11318:	4b20      	ldr	r3, [pc, #128]	; (1139c <put_fat+0x134>)
   1131a:	4798      	blx	r3
			if (res != FR_OK) break;
   1131c:	2800      	cmp	r0, #0
   1131e:	d13b      	bne.n	11398 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
   11320:	05e4      	lsls	r4, r4, #23
   11322:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   11324:	193b      	adds	r3, r7, r4
   11326:	3330      	adds	r3, #48	; 0x30
   11328:	781b      	ldrb	r3, [r3, #0]
   1132a:	220f      	movs	r2, #15
   1132c:	4393      	bics	r3, r2
   1132e:	0536      	lsls	r6, r6, #20
   11330:	0f36      	lsrs	r6, r6, #28
   11332:	431e      	orrs	r6, r3
   11334:	e7e0      	b.n	112f8 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   11336:	0a09      	lsrs	r1, r1, #8
   11338:	6a03      	ldr	r3, [r0, #32]
   1133a:	469c      	mov	ip, r3
   1133c:	4461      	add	r1, ip
   1133e:	4b17      	ldr	r3, [pc, #92]	; (1139c <put_fat+0x134>)
   11340:	4798      	blx	r3
   11342:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   11344:	d1a8      	bne.n	11298 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
   11346:	0063      	lsls	r3, r4, #1
   11348:	24ff      	movs	r4, #255	; 0xff
   1134a:	0064      	lsls	r4, r4, #1
   1134c:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
   1134e:	18fb      	adds	r3, r7, r3
   11350:	3330      	adds	r3, #48	; 0x30
   11352:	701e      	strb	r6, [r3, #0]
   11354:	0a36      	lsrs	r6, r6, #8
   11356:	705e      	strb	r6, [r3, #1]
			break;
   11358:	e79e      	b.n	11298 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   1135a:	09c9      	lsrs	r1, r1, #7
   1135c:	6a03      	ldr	r3, [r0, #32]
   1135e:	469c      	mov	ip, r3
   11360:	4461      	add	r1, ip
   11362:	4b0e      	ldr	r3, [pc, #56]	; (1139c <put_fat+0x134>)
   11364:	4798      	blx	r3
   11366:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
   11368:	d196      	bne.n	11298 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
   1136a:	00a4      	lsls	r4, r4, #2
   1136c:	23fe      	movs	r3, #254	; 0xfe
   1136e:	005b      	lsls	r3, r3, #1
   11370:	401c      	ands	r4, r3
   11372:	0022      	movs	r2, r4
   11374:	3230      	adds	r2, #48	; 0x30
   11376:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
   11378:	78d3      	ldrb	r3, [r2, #3]
   1137a:	193c      	adds	r4, r7, r4
   1137c:	3430      	adds	r4, #48	; 0x30
   1137e:	091b      	lsrs	r3, r3, #4
   11380:	071b      	lsls	r3, r3, #28
   11382:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
   11384:	7026      	strb	r6, [r4, #0]
   11386:	0a33      	lsrs	r3, r6, #8
   11388:	7053      	strb	r3, [r2, #1]
   1138a:	0c33      	lsrs	r3, r6, #16
   1138c:	7093      	strb	r3, [r2, #2]
   1138e:	0e36      	lsrs	r6, r6, #24
   11390:	70d6      	strb	r6, [r2, #3]
			break;
   11392:	e781      	b.n	11298 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   11394:	0005      	movs	r5, r0
   11396:	e77f      	b.n	11298 <put_fat+0x30>
   11398:	0005      	movs	r5, r0
   1139a:	e77d      	b.n	11298 <put_fat+0x30>
   1139c:	00011025 	.word	0x00011025

000113a0 <create_chain>:
{
   113a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   113a2:	46c6      	mov	lr, r8
   113a4:	b500      	push	{lr}
   113a6:	0005      	movs	r5, r0
   113a8:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
   113aa:	2900      	cmp	r1, #0
   113ac:	d107      	bne.n	113be <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
   113ae:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   113b0:	2e00      	cmp	r6, #0
   113b2:	d00d      	beq.n	113d0 <create_chain+0x30>
   113b4:	6983      	ldr	r3, [r0, #24]
   113b6:	429e      	cmp	r6, r3
   113b8:	d30b      	bcc.n	113d2 <create_chain+0x32>
   113ba:	2601      	movs	r6, #1
   113bc:	e009      	b.n	113d2 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
   113be:	4b26      	ldr	r3, [pc, #152]	; (11458 <create_chain+0xb8>)
   113c0:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
   113c2:	2801      	cmp	r0, #1
   113c4:	d93d      	bls.n	11442 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   113c6:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
   113c8:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   113ca:	4298      	cmp	r0, r3
   113cc:	d201      	bcs.n	113d2 <create_chain+0x32>
   113ce:	e03d      	b.n	1144c <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
   113d0:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
   113d2:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   113d4:	4f20      	ldr	r7, [pc, #128]	; (11458 <create_chain+0xb8>)
   113d6:	e00a      	b.n	113ee <create_chain+0x4e>
   113d8:	0021      	movs	r1, r4
   113da:	0028      	movs	r0, r5
   113dc:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
   113de:	2800      	cmp	r0, #0
   113e0:	d00d      	beq.n	113fe <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   113e2:	1c43      	adds	r3, r0, #1
   113e4:	d032      	beq.n	1144c <create_chain+0xac>
   113e6:	2801      	cmp	r0, #1
   113e8:	d030      	beq.n	1144c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   113ea:	42b4      	cmp	r4, r6
   113ec:	d02d      	beq.n	1144a <create_chain+0xaa>
		ncl++;							/* Next cluster */
   113ee:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   113f0:	69ab      	ldr	r3, [r5, #24]
   113f2:	429c      	cmp	r4, r3
   113f4:	d3f0      	bcc.n	113d8 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
   113f6:	2e01      	cmp	r6, #1
   113f8:	d925      	bls.n	11446 <create_chain+0xa6>
			ncl = 2;
   113fa:	2402      	movs	r4, #2
   113fc:	e7ec      	b.n	113d8 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   113fe:	4a17      	ldr	r2, [pc, #92]	; (1145c <create_chain+0xbc>)
   11400:	0021      	movs	r1, r4
   11402:	0028      	movs	r0, r5
   11404:	4b16      	ldr	r3, [pc, #88]	; (11460 <create_chain+0xc0>)
   11406:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
   11408:	2800      	cmp	r0, #0
   1140a:	d113      	bne.n	11434 <create_chain+0x94>
   1140c:	4643      	mov	r3, r8
   1140e:	2b00      	cmp	r3, #0
   11410:	d109      	bne.n	11426 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
   11412:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   11414:	692b      	ldr	r3, [r5, #16]
   11416:	1c5a      	adds	r2, r3, #1
   11418:	d01b      	beq.n	11452 <create_chain+0xb2>
			fs->free_clust--;
   1141a:	3b01      	subs	r3, #1
   1141c:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
   1141e:	2301      	movs	r3, #1
   11420:	716b      	strb	r3, [r5, #5]
   11422:	0020      	movs	r0, r4
   11424:	e012      	b.n	1144c <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   11426:	0022      	movs	r2, r4
   11428:	4641      	mov	r1, r8
   1142a:	0028      	movs	r0, r5
   1142c:	4b0c      	ldr	r3, [pc, #48]	; (11460 <create_chain+0xc0>)
   1142e:	4798      	blx	r3
	if (res == FR_OK) {
   11430:	2800      	cmp	r0, #0
   11432:	d0ee      	beq.n	11412 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   11434:	3801      	subs	r0, #1
   11436:	4242      	negs	r2, r0
   11438:	4142      	adcs	r2, r0
   1143a:	4250      	negs	r0, r2
   1143c:	2301      	movs	r3, #1
   1143e:	4318      	orrs	r0, r3
   11440:	e004      	b.n	1144c <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
   11442:	2001      	movs	r0, #1
   11444:	e002      	b.n	1144c <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
   11446:	2000      	movs	r0, #0
   11448:	e000      	b.n	1144c <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
   1144a:	2000      	movs	r0, #0
}
   1144c:	bc04      	pop	{r2}
   1144e:	4690      	mov	r8, r2
   11450:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11452:	0020      	movs	r0, r4
   11454:	e7fa      	b.n	1144c <create_chain+0xac>
   11456:	46c0      	nop			; (mov r8, r8)
   11458:	000110c5 	.word	0x000110c5
   1145c:	0fffffff 	.word	0x0fffffff
   11460:	00011269 	.word	0x00011269

00011464 <remove_chain>:
{
   11464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11466:	46ce      	mov	lr, r9
   11468:	4647      	mov	r7, r8
   1146a:	b580      	push	{r7, lr}
   1146c:	0004      	movs	r4, r0
   1146e:	000d      	movs	r5, r1
		res = FR_INT_ERR;
   11470:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   11472:	2901      	cmp	r1, #1
   11474:	d902      	bls.n	1147c <remove_chain+0x18>
   11476:	69a3      	ldr	r3, [r4, #24]
   11478:	4299      	cmp	r1, r3
   1147a:	d303      	bcc.n	11484 <remove_chain+0x20>
}
   1147c:	bc0c      	pop	{r2, r3}
   1147e:	4690      	mov	r8, r2
   11480:	4699      	mov	r9, r3
   11482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
   11484:	4f13      	ldr	r7, [pc, #76]	; (114d4 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   11486:	4b14      	ldr	r3, [pc, #80]	; (114d8 <remove_chain+0x74>)
   11488:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
   1148a:	2301      	movs	r3, #1
   1148c:	4699      	mov	r9, r3
   1148e:	e003      	b.n	11498 <remove_chain+0x34>
   11490:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
   11492:	69a3      	ldr	r3, [r4, #24]
   11494:	42b3      	cmp	r3, r6
   11496:	d9f1      	bls.n	1147c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   11498:	0029      	movs	r1, r5
   1149a:	0020      	movs	r0, r4
   1149c:	47b8      	blx	r7
   1149e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
   114a0:	d011      	beq.n	114c6 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   114a2:	2801      	cmp	r0, #1
   114a4:	d011      	beq.n	114ca <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   114a6:	1c43      	adds	r3, r0, #1
   114a8:	d011      	beq.n	114ce <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   114aa:	2200      	movs	r2, #0
   114ac:	0029      	movs	r1, r5
   114ae:	0020      	movs	r0, r4
   114b0:	47c0      	blx	r8
			if (res != FR_OK) break;
   114b2:	2800      	cmp	r0, #0
   114b4:	d1e2      	bne.n	1147c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   114b6:	6923      	ldr	r3, [r4, #16]
   114b8:	1c5a      	adds	r2, r3, #1
   114ba:	d0e9      	beq.n	11490 <remove_chain+0x2c>
				fs->free_clust++;
   114bc:	3301      	adds	r3, #1
   114be:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
   114c0:	464b      	mov	r3, r9
   114c2:	7163      	strb	r3, [r4, #5]
   114c4:	e7e4      	b.n	11490 <remove_chain+0x2c>
   114c6:	2000      	movs	r0, #0
   114c8:	e7d8      	b.n	1147c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   114ca:	2002      	movs	r0, #2
   114cc:	e7d6      	b.n	1147c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   114ce:	2001      	movs	r0, #1
   114d0:	e7d4      	b.n	1147c <remove_chain+0x18>
   114d2:	46c0      	nop			; (mov r8, r8)
   114d4:	000110c5 	.word	0x000110c5
   114d8:	00011269 	.word	0x00011269

000114dc <dir_next>:
{
   114dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   114de:	46d6      	mov	lr, sl
   114e0:	4647      	mov	r7, r8
   114e2:	b580      	push	{r7, lr}
   114e4:	0006      	movs	r6, r0
   114e6:	000d      	movs	r5, r1
	i = dj->index + 1;
   114e8:	88c4      	ldrh	r4, [r0, #6]
   114ea:	3401      	adds	r4, #1
   114ec:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
   114ee:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   114f0:	2c00      	cmp	r4, #0
   114f2:	d103      	bne.n	114fc <dir_next+0x20>
}
   114f4:	bc0c      	pop	{r2, r3}
   114f6:	4690      	mov	r8, r2
   114f8:	469a      	mov	sl, r3
   114fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   114fc:	6933      	ldr	r3, [r6, #16]
   114fe:	2b00      	cmp	r3, #0
   11500:	d0f8      	beq.n	114f4 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   11502:	270f      	movs	r7, #15
   11504:	4027      	ands	r7, r4
   11506:	d10f      	bne.n	11528 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
   11508:	3301      	adds	r3, #1
   1150a:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
   1150c:	68f1      	ldr	r1, [r6, #12]
   1150e:	2900      	cmp	r1, #0
   11510:	d104      	bne.n	1151c <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   11512:	6833      	ldr	r3, [r6, #0]
   11514:	891b      	ldrh	r3, [r3, #8]
   11516:	42a3      	cmp	r3, r4
   11518:	d9ec      	bls.n	114f4 <dir_next+0x18>
   1151a:	e005      	b.n	11528 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   1151c:	6830      	ldr	r0, [r6, #0]
   1151e:	7883      	ldrb	r3, [r0, #2]
   11520:	3b01      	subs	r3, #1
   11522:	0922      	lsrs	r2, r4, #4
   11524:	421a      	tst	r2, r3
   11526:	d007      	beq.n	11538 <dir_next+0x5c>
	dj->index = i;
   11528:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   1152a:	6833      	ldr	r3, [r6, #0]
   1152c:	3330      	adds	r3, #48	; 0x30
   1152e:	017f      	lsls	r7, r7, #5
   11530:	19df      	adds	r7, r3, r7
   11532:	6177      	str	r7, [r6, #20]
	return FR_OK;
   11534:	2000      	movs	r0, #0
   11536:	e7dd      	b.n	114f4 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   11538:	4b2c      	ldr	r3, [pc, #176]	; (115ec <dir_next+0x110>)
   1153a:	4798      	blx	r3
   1153c:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
   1153e:	2002      	movs	r0, #2
   11540:	4643      	mov	r3, r8
   11542:	2b01      	cmp	r3, #1
   11544:	d9d6      	bls.n	114f4 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   11546:	3301      	adds	r3, #1
   11548:	d04b      	beq.n	115e2 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   1154a:	6833      	ldr	r3, [r6, #0]
   1154c:	699a      	ldr	r2, [r3, #24]
   1154e:	4590      	cmp	r8, r2
   11550:	d33f      	bcc.n	115d2 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   11552:	3002      	adds	r0, #2
   11554:	2d00      	cmp	r5, #0
   11556:	d0cd      	beq.n	114f4 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   11558:	68f1      	ldr	r1, [r6, #12]
   1155a:	0018      	movs	r0, r3
   1155c:	4b24      	ldr	r3, [pc, #144]	; (115f0 <dir_next+0x114>)
   1155e:	4798      	blx	r3
   11560:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   11562:	2007      	movs	r0, #7
   11564:	4643      	mov	r3, r8
   11566:	2b00      	cmp	r3, #0
   11568:	d0c4      	beq.n	114f4 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
   1156a:	3805      	subs	r0, #5
   1156c:	2b01      	cmp	r3, #1
   1156e:	d0c1      	beq.n	114f4 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   11570:	3801      	subs	r0, #1
   11572:	3301      	adds	r3, #1
   11574:	d0be      	beq.n	114f4 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   11576:	2100      	movs	r1, #0
   11578:	6830      	ldr	r0, [r6, #0]
   1157a:	4b1e      	ldr	r3, [pc, #120]	; (115f4 <dir_next+0x118>)
   1157c:	4798      	blx	r3
   1157e:	0003      	movs	r3, r0
   11580:	2001      	movs	r0, #1
   11582:	2b00      	cmp	r3, #0
   11584:	d1b6      	bne.n	114f4 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   11586:	6830      	ldr	r0, [r6, #0]
   11588:	3030      	adds	r0, #48	; 0x30
   1158a:	2280      	movs	r2, #128	; 0x80
   1158c:	0092      	lsls	r2, r2, #2
   1158e:	2100      	movs	r1, #0
   11590:	4b19      	ldr	r3, [pc, #100]	; (115f8 <dir_next+0x11c>)
   11592:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   11594:	6835      	ldr	r5, [r6, #0]
   11596:	4641      	mov	r1, r8
   11598:	0028      	movs	r0, r5
   1159a:	4b18      	ldr	r3, [pc, #96]	; (115fc <dir_next+0x120>)
   1159c:	4798      	blx	r3
   1159e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   115a0:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
   115a2:	2301      	movs	r3, #1
   115a4:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   115a6:	6833      	ldr	r3, [r6, #0]
   115a8:	789a      	ldrb	r2, [r3, #2]
   115aa:	42aa      	cmp	r2, r5
   115ac:	d90e      	bls.n	115cc <dir_next+0xf0>
						dj->fs->wflag = 1;
   115ae:	4652      	mov	r2, sl
   115b0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   115b2:	2100      	movs	r1, #0
   115b4:	6830      	ldr	r0, [r6, #0]
   115b6:	4b0f      	ldr	r3, [pc, #60]	; (115f4 <dir_next+0x118>)
   115b8:	4798      	blx	r3
   115ba:	2800      	cmp	r0, #0
   115bc:	d113      	bne.n	115e6 <dir_next+0x10a>
						dj->fs->winsect++;
   115be:	6832      	ldr	r2, [r6, #0]
   115c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   115c2:	3301      	adds	r3, #1
   115c4:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   115c6:	3501      	adds	r5, #1
   115c8:	b2ed      	uxtb	r5, r5
   115ca:	e7ec      	b.n	115a6 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
   115cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   115ce:	1b52      	subs	r2, r2, r5
   115d0:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
   115d2:	4643      	mov	r3, r8
   115d4:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
   115d6:	4641      	mov	r1, r8
   115d8:	6830      	ldr	r0, [r6, #0]
   115da:	4b08      	ldr	r3, [pc, #32]	; (115fc <dir_next+0x120>)
   115dc:	4798      	blx	r3
   115de:	6130      	str	r0, [r6, #16]
   115e0:	e7a2      	b.n	11528 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   115e2:	2001      	movs	r0, #1
   115e4:	e786      	b.n	114f4 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   115e6:	2001      	movs	r0, #1
   115e8:	e784      	b.n	114f4 <dir_next+0x18>
   115ea:	46c0      	nop			; (mov r8, r8)
   115ec:	000110c5 	.word	0x000110c5
   115f0:	000113a1 	.word	0x000113a1
   115f4:	00011025 	.word	0x00011025
   115f8:	00010b59 	.word	0x00010b59
   115fc:	00010b6b 	.word	0x00010b6b

00011600 <dir_find>:
{
   11600:	b5f0      	push	{r4, r5, r6, r7, lr}
   11602:	46de      	mov	lr, fp
   11604:	4657      	mov	r7, sl
   11606:	464e      	mov	r6, r9
   11608:	4645      	mov	r5, r8
   1160a:	b5e0      	push	{r5, r6, r7, lr}
   1160c:	b083      	sub	sp, #12
   1160e:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
   11610:	2100      	movs	r1, #0
   11612:	4b5a      	ldr	r3, [pc, #360]	; (1177c <dir_find+0x17c>)
   11614:	4798      	blx	r3
   11616:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
   11618:	d000      	beq.n	1161c <dir_find+0x1c>
   1161a:	e09e      	b.n	1175a <dir_find+0x15a>
   1161c:	23ff      	movs	r3, #255	; 0xff
   1161e:	4699      	mov	r9, r3
   11620:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
   11622:	4b57      	ldr	r3, [pc, #348]	; (11780 <dir_find+0x180>)
   11624:	469b      	mov	fp, r3
   11626:	e01b      	b.n	11660 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
   11628:	2b0f      	cmp	r3, #15
   1162a:	d030      	beq.n	1168e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   1162c:	4653      	mov	r3, sl
   1162e:	2b00      	cmp	r3, #0
   11630:	d105      	bne.n	1163e <dir_find+0x3e>
   11632:	0020      	movs	r0, r4
   11634:	4b53      	ldr	r3, [pc, #332]	; (11784 <dir_find+0x184>)
   11636:	4798      	blx	r3
   11638:	4581      	cmp	r9, r0
   1163a:	d100      	bne.n	1163e <dir_find+0x3e>
   1163c:	e08d      	b.n	1175a <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1163e:	2301      	movs	r3, #1
   11640:	425b      	negs	r3, r3
   11642:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   11644:	69a8      	ldr	r0, [r5, #24]
   11646:	7ac3      	ldrb	r3, [r0, #11]
   11648:	07db      	lsls	r3, r3, #31
   1164a:	d400      	bmi.n	1164e <dir_find+0x4e>
   1164c:	e07d      	b.n	1174a <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1164e:	23ff      	movs	r3, #255	; 0xff
   11650:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
   11652:	2100      	movs	r1, #0
   11654:	0028      	movs	r0, r5
   11656:	4b4c      	ldr	r3, [pc, #304]	; (11788 <dir_find+0x188>)
   11658:	4798      	blx	r3
   1165a:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
   1165c:	d000      	beq.n	11660 <dir_find+0x60>
   1165e:	e07c      	b.n	1175a <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
   11660:	6929      	ldr	r1, [r5, #16]
   11662:	6828      	ldr	r0, [r5, #0]
   11664:	47d8      	blx	fp
   11666:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
   11668:	d177      	bne.n	1175a <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   1166a:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
   1166c:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   1166e:	2e00      	cmp	r6, #0
   11670:	d100      	bne.n	11674 <dir_find+0x74>
   11672:	e080      	b.n	11776 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
   11674:	7ae2      	ldrb	r2, [r4, #11]
   11676:	233f      	movs	r3, #63	; 0x3f
   11678:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   1167a:	2ee5      	cmp	r6, #229	; 0xe5
   1167c:	d100      	bne.n	11680 <dir_find+0x80>
   1167e:	e077      	b.n	11770 <dir_find+0x170>
   11680:	0712      	lsls	r2, r2, #28
   11682:	d5d1      	bpl.n	11628 <dir_find+0x28>
   11684:	2b0f      	cmp	r3, #15
   11686:	d002      	beq.n	1168e <dir_find+0x8e>
			ord = 0xFF;
   11688:	23ff      	movs	r3, #255	; 0xff
   1168a:	469a      	mov	sl, r3
   1168c:	e7e1      	b.n	11652 <dir_find+0x52>
				if (dj->lfn) {
   1168e:	69ef      	ldr	r7, [r5, #28]
   11690:	2f00      	cmp	r7, #0
   11692:	d0de      	beq.n	11652 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   11694:	0673      	lsls	r3, r6, #25
   11696:	d518      	bpl.n	116ca <dir_find+0xca>
						sum = dir[LDIR_Chksum];
   11698:	7b63      	ldrb	r3, [r4, #13]
   1169a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
   1169c:	2340      	movs	r3, #64	; 0x40
   1169e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
   116a0:	88eb      	ldrh	r3, [r5, #6]
   116a2:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   116a4:	7b63      	ldrb	r3, [r4, #13]
   116a6:	9300      	str	r3, [sp, #0]
   116a8:	22ff      	movs	r2, #255	; 0xff
   116aa:	4692      	mov	sl, r2
   116ac:	454b      	cmp	r3, r9
   116ae:	d1d0      	bne.n	11652 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   116b0:	7823      	ldrb	r3, [r4, #0]
   116b2:	3abf      	subs	r2, #191	; 0xbf
   116b4:	4393      	bics	r3, r2
   116b6:	3b01      	subs	r3, #1
   116b8:	005a      	lsls	r2, r3, #1
   116ba:	18d2      	adds	r2, r2, r3
   116bc:	0092      	lsls	r2, r2, #2
   116be:	4692      	mov	sl, r2
   116c0:	449a      	add	sl, r3
	s = 0; wc = 1;
   116c2:	2201      	movs	r2, #1
   116c4:	2300      	movs	r3, #0
   116c6:	4699      	mov	r9, r3
   116c8:	e01d      	b.n	11706 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   116ca:	45b2      	cmp	sl, r6
   116cc:	d0ea      	beq.n	116a4 <dir_find+0xa4>
   116ce:	23ff      	movs	r3, #255	; 0xff
   116d0:	469a      	mov	sl, r3
   116d2:	e7be      	b.n	11652 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   116d4:	4b2d      	ldr	r3, [pc, #180]	; (1178c <dir_find+0x18c>)
   116d6:	4798      	blx	r3
   116d8:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   116da:	4653      	mov	r3, sl
   116dc:	2bfe      	cmp	r3, #254	; 0xfe
   116de:	d81f      	bhi.n	11720 <dir_find+0x120>
   116e0:	2301      	movs	r3, #1
   116e2:	4453      	add	r3, sl
   116e4:	4698      	mov	r8, r3
   116e6:	4653      	mov	r3, sl
   116e8:	005b      	lsls	r3, r3, #1
   116ea:	5bd8      	ldrh	r0, [r3, r7]
   116ec:	4b27      	ldr	r3, [pc, #156]	; (1178c <dir_find+0x18c>)
   116ee:	4798      	blx	r3
   116f0:	0002      	movs	r2, r0
   116f2:	9b01      	ldr	r3, [sp, #4]
   116f4:	4283      	cmp	r3, r0
   116f6:	d113      	bne.n	11720 <dir_find+0x120>
   116f8:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   116fa:	2301      	movs	r3, #1
   116fc:	469c      	mov	ip, r3
   116fe:	44e1      	add	r9, ip
   11700:	464b      	mov	r3, r9
   11702:	2b0d      	cmp	r3, #13
   11704:	d011      	beq.n	1172a <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   11706:	4b22      	ldr	r3, [pc, #136]	; (11790 <dir_find+0x190>)
   11708:	4649      	mov	r1, r9
   1170a:	5cc9      	ldrb	r1, [r1, r3]
   1170c:	1863      	adds	r3, r4, r1
   1170e:	785b      	ldrb	r3, [r3, #1]
   11710:	021b      	lsls	r3, r3, #8
   11712:	5c60      	ldrb	r0, [r4, r1]
   11714:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
   11716:	2a00      	cmp	r2, #0
   11718:	d1dc      	bne.n	116d4 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
   1171a:	4b1e      	ldr	r3, [pc, #120]	; (11794 <dir_find+0x194>)
   1171c:	4298      	cmp	r0, r3
   1171e:	d0ec      	beq.n	116fa <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   11720:	9b00      	ldr	r3, [sp, #0]
   11722:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   11724:	23ff      	movs	r3, #255	; 0xff
   11726:	469a      	mov	sl, r3
   11728:	e793      	b.n	11652 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   1172a:	7823      	ldrb	r3, [r4, #0]
   1172c:	065b      	lsls	r3, r3, #25
   1172e:	d506      	bpl.n	1173e <dir_find+0x13e>
   11730:	2a00      	cmp	r2, #0
   11732:	d004      	beq.n	1173e <dir_find+0x13e>
   11734:	4653      	mov	r3, sl
   11736:	005b      	lsls	r3, r3, #1
   11738:	5bdb      	ldrh	r3, [r3, r7]
   1173a:	2b00      	cmp	r3, #0
   1173c:	d1f0      	bne.n	11720 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   1173e:	3e01      	subs	r6, #1
   11740:	b2f3      	uxtb	r3, r6
   11742:	469a      	mov	sl, r3
   11744:	9b00      	ldr	r3, [sp, #0]
   11746:	4699      	mov	r9, r3
   11748:	e783      	b.n	11652 <dir_find+0x52>
   1174a:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
   1174c:	5ce1      	ldrb	r1, [r4, r3]
   1174e:	5cc2      	ldrb	r2, [r0, r3]
   11750:	4291      	cmp	r1, r2
   11752:	d10a      	bne.n	1176a <dir_find+0x16a>
   11754:	3301      	adds	r3, #1
   11756:	2b0b      	cmp	r3, #11
   11758:	d1f8      	bne.n	1174c <dir_find+0x14c>
}
   1175a:	0038      	movs	r0, r7
   1175c:	b003      	add	sp, #12
   1175e:	bc3c      	pop	{r2, r3, r4, r5}
   11760:	4690      	mov	r8, r2
   11762:	4699      	mov	r9, r3
   11764:	46a2      	mov	sl, r4
   11766:	46ab      	mov	fp, r5
   11768:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   1176a:	23ff      	movs	r3, #255	; 0xff
   1176c:	469a      	mov	sl, r3
   1176e:	e770      	b.n	11652 <dir_find+0x52>
			ord = 0xFF;
   11770:	23ff      	movs	r3, #255	; 0xff
   11772:	469a      	mov	sl, r3
   11774:	e76d      	b.n	11652 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   11776:	2704      	movs	r7, #4
   11778:	e7ef      	b.n	1175a <dir_find+0x15a>
   1177a:	46c0      	nop			; (mov r8, r8)
   1177c:	000111c1 	.word	0x000111c1
   11780:	00011025 	.word	0x00011025
   11784:	00010b83 	.word	0x00010b83
   11788:	000114dd 	.word	0x000114dd
   1178c:	000127c5 	.word	0x000127c5
   11790:	0001992c 	.word	0x0001992c
   11794:	0000ffff 	.word	0x0000ffff

00011798 <dir_register>:
{
   11798:	b5f0      	push	{r4, r5, r6, r7, lr}
   1179a:	46de      	mov	lr, fp
   1179c:	4657      	mov	r7, sl
   1179e:	464e      	mov	r6, r9
   117a0:	4645      	mov	r5, r8
   117a2:	b5e0      	push	{r5, r6, r7, lr}
   117a4:	b089      	sub	sp, #36	; 0x24
   117a6:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
   117a8:	6987      	ldr	r7, [r0, #24]
   117aa:	69c3      	ldr	r3, [r0, #28]
   117ac:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
   117ae:	ad05      	add	r5, sp, #20
   117b0:	220c      	movs	r2, #12
   117b2:	0039      	movs	r1, r7
   117b4:	0028      	movs	r0, r5
   117b6:	4ba7      	ldr	r3, [pc, #668]	; (11a54 <dir_register+0x2bc>)
   117b8:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   117ba:	7aeb      	ldrb	r3, [r5, #11]
   117bc:	07db      	lsls	r3, r3, #31
   117be:	d400      	bmi.n	117c2 <dir_register+0x2a>
   117c0:	e070      	b.n	118a4 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   117c2:	2300      	movs	r3, #0
   117c4:	72fb      	strb	r3, [r7, #11]
   117c6:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
   117c8:	220b      	movs	r2, #11
   117ca:	a905      	add	r1, sp, #20
   117cc:	0038      	movs	r0, r7
   117ce:	4ba1      	ldr	r3, [pc, #644]	; (11a54 <dir_register+0x2bc>)
   117d0:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   117d2:	2301      	movs	r3, #1
		ns[i--] = c;
   117d4:	ad03      	add	r5, sp, #12
   117d6:	001e      	movs	r6, r3
   117d8:	46a0      	mov	r8, r4
   117da:	e049      	b.n	11870 <dir_register+0xd8>
   117dc:	3801      	subs	r0, #1
   117de:	1829      	adds	r1, r5, r0
   117e0:	704a      	strb	r2, [r1, #1]
		seq /= 16;
   117e2:	091b      	lsrs	r3, r3, #4
   117e4:	b29b      	uxth	r3, r3
	} while (seq);
   117e6:	2b00      	cmp	r3, #0
   117e8:	d007      	beq.n	117fa <dir_register+0x62>
		c = (seq % 16) + '0';
   117ea:	0021      	movs	r1, r4
   117ec:	4019      	ands	r1, r3
   117ee:	000a      	movs	r2, r1
   117f0:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
   117f2:	2a39      	cmp	r2, #57	; 0x39
   117f4:	d9f2      	bls.n	117dc <dir_register+0x44>
   117f6:	3207      	adds	r2, #7
   117f8:	e7f0      	b.n	117dc <dir_register+0x44>
	ns[i] = '~';
   117fa:	337e      	adds	r3, #126	; 0x7e
   117fc:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
   117fe:	2800      	cmp	r0, #0
   11800:	d00a      	beq.n	11818 <dir_register+0x80>
   11802:	783b      	ldrb	r3, [r7, #0]
   11804:	2b20      	cmp	r3, #32
   11806:	d009      	beq.n	1181c <dir_register+0x84>
   11808:	2300      	movs	r3, #0
   1180a:	3301      	adds	r3, #1
   1180c:	4298      	cmp	r0, r3
   1180e:	d007      	beq.n	11820 <dir_register+0x88>
   11810:	5cfa      	ldrb	r2, [r7, r3]
   11812:	2a20      	cmp	r2, #32
   11814:	d1f9      	bne.n	1180a <dir_register+0x72>
   11816:	e009      	b.n	1182c <dir_register+0x94>
   11818:	0003      	movs	r3, r0
   1181a:	e007      	b.n	1182c <dir_register+0x94>
   1181c:	2300      	movs	r3, #0
   1181e:	e005      	b.n	1182c <dir_register+0x94>
   11820:	0003      	movs	r3, r0
   11822:	e003      	b.n	1182c <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   11824:	54fa      	strb	r2, [r7, r3]
   11826:	3301      	adds	r3, #1
	} while (j < 8);
   11828:	2b07      	cmp	r3, #7
   1182a:	d805      	bhi.n	11838 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   1182c:	2220      	movs	r2, #32
   1182e:	2807      	cmp	r0, #7
   11830:	d8f8      	bhi.n	11824 <dir_register+0x8c>
   11832:	5c2a      	ldrb	r2, [r5, r0]
   11834:	3001      	adds	r0, #1
   11836:	e7f5      	b.n	11824 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   11838:	4640      	mov	r0, r8
   1183a:	4b87      	ldr	r3, [pc, #540]	; (11a58 <dir_register+0x2c0>)
   1183c:	4798      	blx	r3
			if (res != FR_OK) break;
   1183e:	2800      	cmp	r0, #0
   11840:	d11c      	bne.n	1187c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
   11842:	3601      	adds	r6, #1
   11844:	b2b6      	uxth	r6, r6
   11846:	2e64      	cmp	r6, #100	; 0x64
   11848:	d015      	beq.n	11876 <dir_register+0xde>
	mem_cpy(dst, src, 11);
   1184a:	220b      	movs	r2, #11
   1184c:	a905      	add	r1, sp, #20
   1184e:	0038      	movs	r0, r7
   11850:	4b80      	ldr	r3, [pc, #512]	; (11a54 <dir_register+0x2bc>)
   11852:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
   11854:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   11856:	2e05      	cmp	r6, #5
   11858:	d90a      	bls.n	11870 <dir_register+0xd8>
   1185a:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   1185c:	085a      	lsrs	r2, r3, #1
   1185e:	03db      	lsls	r3, r3, #15
   11860:	4313      	orrs	r3, r2
   11862:	880a      	ldrh	r2, [r1, #0]
   11864:	189b      	adds	r3, r3, r2
   11866:	b29b      	uxth	r3, r3
   11868:	3102      	adds	r1, #2
   1186a:	880a      	ldrh	r2, [r1, #0]
   1186c:	2a00      	cmp	r2, #0
   1186e:	d1f5      	bne.n	1185c <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
   11870:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
   11872:	240f      	movs	r4, #15
   11874:	e7b9      	b.n	117ea <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   11876:	2307      	movs	r3, #7
   11878:	4698      	mov	r8, r3
   1187a:	e006      	b.n	1188a <dir_register+0xf2>
   1187c:	4644      	mov	r4, r8
   1187e:	4680      	mov	r8, r0
   11880:	2e64      	cmp	r6, #100	; 0x64
   11882:	d100      	bne.n	11886 <dir_register+0xee>
   11884:	e0a5      	b.n	119d2 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   11886:	2804      	cmp	r0, #4
   11888:	d007      	beq.n	1189a <dir_register+0x102>
}
   1188a:	4640      	mov	r0, r8
   1188c:	b009      	add	sp, #36	; 0x24
   1188e:	bc3c      	pop	{r2, r3, r4, r5}
   11890:	4690      	mov	r8, r2
   11892:	4699      	mov	r9, r3
   11894:	46a2      	mov	sl, r4
   11896:	46ab      	mov	fp, r5
   11898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
   1189a:	ab05      	add	r3, sp, #20
   1189c:	7adb      	ldrb	r3, [r3, #11]
   1189e:	72fb      	strb	r3, [r7, #11]
   118a0:	4653      	mov	r3, sl
   118a2:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   118a4:	ab05      	add	r3, sp, #20
   118a6:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
   118a8:	2201      	movs	r2, #1
   118aa:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   118ac:	079b      	lsls	r3, r3, #30
   118ae:	d511      	bpl.n	118d4 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
   118b0:	4653      	mov	r3, sl
   118b2:	881b      	ldrh	r3, [r3, #0]
   118b4:	2b00      	cmp	r3, #0
   118b6:	d01b      	beq.n	118f0 <dir_register+0x158>
   118b8:	2000      	movs	r0, #0
   118ba:	4652      	mov	r2, sl
   118bc:	3001      	adds	r0, #1
   118be:	b280      	uxth	r0, r0
   118c0:	0043      	lsls	r3, r0, #1
   118c2:	5a9b      	ldrh	r3, [r3, r2]
   118c4:	2b00      	cmp	r3, #0
   118c6:	d1f9      	bne.n	118bc <dir_register+0x124>
		ne = (ne + 25) / 13;
   118c8:	3019      	adds	r0, #25
   118ca:	210d      	movs	r1, #13
   118cc:	4b63      	ldr	r3, [pc, #396]	; (11a5c <dir_register+0x2c4>)
   118ce:	4798      	blx	r3
   118d0:	b283      	uxth	r3, r0
   118d2:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
   118d4:	2100      	movs	r1, #0
   118d6:	0020      	movs	r0, r4
   118d8:	4b61      	ldr	r3, [pc, #388]	; (11a60 <dir_register+0x2c8>)
   118da:	4798      	blx	r3
   118dc:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
   118de:	2800      	cmp	r0, #0
   118e0:	d1d3      	bne.n	1188a <dir_register+0xf2>
   118e2:	4682      	mov	sl, r0
   118e4:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
   118e6:	4f5f      	ldr	r7, [pc, #380]	; (11a64 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
   118e8:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   118ea:	4b5f      	ldr	r3, [pc, #380]	; (11a68 <dir_register+0x2d0>)
   118ec:	4699      	mov	r9, r3
   118ee:	e00b      	b.n	11908 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
   118f0:	2000      	movs	r0, #0
   118f2:	e7e9      	b.n	118c8 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   118f4:	1c6b      	adds	r3, r5, #1
   118f6:	b29b      	uxth	r3, r3
   118f8:	459b      	cmp	fp, r3
   118fa:	d06d      	beq.n	119d8 <dir_register+0x240>
   118fc:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   118fe:	2101      	movs	r1, #1
   11900:	0020      	movs	r0, r4
   11902:	47c8      	blx	r9
	} while (res == FR_OK);
   11904:	2800      	cmp	r0, #0
   11906:	d112      	bne.n	1192e <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
   11908:	6921      	ldr	r1, [r4, #16]
   1190a:	6820      	ldr	r0, [r4, #0]
   1190c:	47b8      	blx	r7
		if (res != FR_OK) break;
   1190e:	2800      	cmp	r0, #0
   11910:	d000      	beq.n	11914 <dir_register+0x17c>
   11912:	e098      	b.n	11a46 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
   11914:	6963      	ldr	r3, [r4, #20]
   11916:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   11918:	2be5      	cmp	r3, #229	; 0xe5
   1191a:	d001      	beq.n	11920 <dir_register+0x188>
   1191c:	2b00      	cmp	r3, #0
   1191e:	d104      	bne.n	1192a <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   11920:	2d00      	cmp	r5, #0
   11922:	d1e7      	bne.n	118f4 <dir_register+0x15c>
   11924:	88e3      	ldrh	r3, [r4, #6]
   11926:	469a      	mov	sl, r3
   11928:	e7e4      	b.n	118f4 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
   1192a:	0035      	movs	r5, r6
   1192c:	e7e7      	b.n	118fe <dir_register+0x166>
   1192e:	4680      	mov	r8, r0
   11930:	e7ab      	b.n	1188a <dir_register+0xf2>
		res = dir_sdi(dj, is);
   11932:	4651      	mov	r1, sl
   11934:	0020      	movs	r0, r4
   11936:	4b4a      	ldr	r3, [pc, #296]	; (11a60 <dir_register+0x2c8>)
   11938:	4798      	blx	r3
   1193a:	4680      	mov	r8, r0
		if (res == FR_OK) {
   1193c:	2800      	cmp	r0, #0
   1193e:	d1a4      	bne.n	1188a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   11940:	69a0      	ldr	r0, [r4, #24]
   11942:	4b4a      	ldr	r3, [pc, #296]	; (11a6c <dir_register+0x2d4>)
   11944:	4798      	blx	r3
   11946:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   11948:	46a8      	mov	r8, r5
   1194a:	e01f      	b.n	1198c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   1194c:	0022      	movs	r2, r4
   1194e:	e067      	b.n	11a20 <dir_register+0x288>
   11950:	465e      	mov	r6, fp
   11952:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   11954:	4946      	ldr	r1, [pc, #280]	; (11a70 <dir_register+0x2d8>)
   11956:	428b      	cmp	r3, r1
   11958:	d003      	beq.n	11962 <dir_register+0x1ca>
   1195a:	0052      	lsls	r2, r2, #1
   1195c:	5b93      	ldrh	r3, [r2, r6]
   1195e:	2b00      	cmp	r3, #0
   11960:	d103      	bne.n	1196a <dir_register+0x1d2>
   11962:	2340      	movs	r3, #64	; 0x40
   11964:	464a      	mov	r2, r9
   11966:	431a      	orrs	r2, r3
   11968:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   1196a:	464b      	mov	r3, r9
   1196c:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
   1196e:	2301      	movs	r3, #1
   11970:	6822      	ldr	r2, [r4, #0]
   11972:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
   11974:	2100      	movs	r1, #0
   11976:	0020      	movs	r0, r4
   11978:	4b3b      	ldr	r3, [pc, #236]	; (11a68 <dir_register+0x2d0>)
   1197a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
   1197c:	2800      	cmp	r0, #0
   1197e:	d166      	bne.n	11a4e <dir_register+0x2b6>
   11980:	4645      	mov	r5, r8
   11982:	3d01      	subs	r5, #1
   11984:	b2ab      	uxth	r3, r5
   11986:	4698      	mov	r8, r3
   11988:	2b00      	cmp	r3, #0
   1198a:	d027      	beq.n	119dc <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
   1198c:	6921      	ldr	r1, [r4, #16]
   1198e:	6820      	ldr	r0, [r4, #0]
   11990:	4b34      	ldr	r3, [pc, #208]	; (11a64 <dir_register+0x2cc>)
   11992:	4798      	blx	r3
				if (res != FR_OK) break;
   11994:	2800      	cmp	r0, #0
   11996:	d158      	bne.n	11a4a <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   11998:	69e6      	ldr	r6, [r4, #28]
   1199a:	6960      	ldr	r0, [r4, #20]
   1199c:	4643      	mov	r3, r8
   1199e:	466a      	mov	r2, sp
   119a0:	70d3      	strb	r3, [r2, #3]
   119a2:	78d3      	ldrb	r3, [r2, #3]
   119a4:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
   119a6:	7913      	ldrb	r3, [r2, #4]
   119a8:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   119aa:	230f      	movs	r3, #15
   119ac:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
   119ae:	2300      	movs	r3, #0
   119b0:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   119b2:	7683      	strb	r3, [r0, #26]
   119b4:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   119b6:	464b      	mov	r3, r9
   119b8:	3b01      	subs	r3, #1
   119ba:	005a      	lsls	r2, r3, #1
   119bc:	18d2      	adds	r2, r2, r3
   119be:	0092      	lsls	r2, r2, #2
   119c0:	18d2      	adds	r2, r2, r3
   119c2:	492c      	ldr	r1, [pc, #176]	; (11a74 <dir_register+0x2dc>)
   119c4:	000d      	movs	r5, r1
   119c6:	350d      	adds	r5, #13
	s = wc = 0;
   119c8:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   119ca:	4f29      	ldr	r7, [pc, #164]	; (11a70 <dir_register+0x2d8>)
   119cc:	46b3      	mov	fp, r6
   119ce:	46a4      	mov	ip, r4
   119d0:	e029      	b.n	11a26 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   119d2:	2307      	movs	r3, #7
   119d4:	4698      	mov	r8, r3
   119d6:	e758      	b.n	1188a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   119d8:	2b01      	cmp	r3, #1
   119da:	d8aa      	bhi.n	11932 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
   119dc:	6921      	ldr	r1, [r4, #16]
   119de:	6820      	ldr	r0, [r4, #0]
   119e0:	4b20      	ldr	r3, [pc, #128]	; (11a64 <dir_register+0x2cc>)
   119e2:	4798      	blx	r3
   119e4:	4680      	mov	r8, r0
		if (res == FR_OK) {
   119e6:	2800      	cmp	r0, #0
   119e8:	d000      	beq.n	119ec <dir_register+0x254>
   119ea:	e74e      	b.n	1188a <dir_register+0xf2>
			dir = dj->dir;
   119ec:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   119ee:	2220      	movs	r2, #32
   119f0:	2100      	movs	r1, #0
   119f2:	0028      	movs	r0, r5
   119f4:	4b20      	ldr	r3, [pc, #128]	; (11a78 <dir_register+0x2e0>)
   119f6:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   119f8:	220b      	movs	r2, #11
   119fa:	69a1      	ldr	r1, [r4, #24]
   119fc:	0028      	movs	r0, r5
   119fe:	4b15      	ldr	r3, [pc, #84]	; (11a54 <dir_register+0x2bc>)
   11a00:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   11a02:	69a3      	ldr	r3, [r4, #24]
   11a04:	7ada      	ldrb	r2, [r3, #11]
   11a06:	2318      	movs	r3, #24
   11a08:	4013      	ands	r3, r2
   11a0a:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
   11a0c:	6823      	ldr	r3, [r4, #0]
   11a0e:	2201      	movs	r2, #1
   11a10:	711a      	strb	r2, [r3, #4]
   11a12:	e73a      	b.n	1188a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   11a14:	780c      	ldrb	r4, [r1, #0]
   11a16:	26ff      	movs	r6, #255	; 0xff
   11a18:	5506      	strb	r6, [r0, r4]
   11a1a:	1904      	adds	r4, r0, r4
   11a1c:	26ff      	movs	r6, #255	; 0xff
   11a1e:	7066      	strb	r6, [r4, #1]
   11a20:	3101      	adds	r1, #1
	} while (++s < 13);
   11a22:	42a9      	cmp	r1, r5
   11a24:	d094      	beq.n	11950 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   11a26:	42bb      	cmp	r3, r7
   11a28:	d0f4      	beq.n	11a14 <dir_register+0x27c>
   11a2a:	1c54      	adds	r4, r2, #1
   11a2c:	0052      	lsls	r2, r2, #1
   11a2e:	465b      	mov	r3, fp
   11a30:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   11a32:	780a      	ldrb	r2, [r1, #0]
   11a34:	5483      	strb	r3, [r0, r2]
   11a36:	1882      	adds	r2, r0, r2
   11a38:	0a1e      	lsrs	r6, r3, #8
   11a3a:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   11a3c:	2b00      	cmp	r3, #0
   11a3e:	d185      	bne.n	1194c <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   11a40:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   11a42:	003b      	movs	r3, r7
   11a44:	e7ec      	b.n	11a20 <dir_register+0x288>
   11a46:	4680      	mov	r8, r0
   11a48:	e71f      	b.n	1188a <dir_register+0xf2>
   11a4a:	4680      	mov	r8, r0
   11a4c:	e71d      	b.n	1188a <dir_register+0xf2>
   11a4e:	4680      	mov	r8, r0
   11a50:	e71b      	b.n	1188a <dir_register+0xf2>
   11a52:	46c0      	nop			; (mov r8, r8)
   11a54:	00010b45 	.word	0x00010b45
   11a58:	00011601 	.word	0x00011601
   11a5c:	00016321 	.word	0x00016321
   11a60:	000111c1 	.word	0x000111c1
   11a64:	00011025 	.word	0x00011025
   11a68:	000114dd 	.word	0x000114dd
   11a6c:	00010b83 	.word	0x00010b83
   11a70:	0000ffff 	.word	0x0000ffff
   11a74:	0001992c 	.word	0x0001992c
   11a78:	00010b59 	.word	0x00010b59

00011a7c <dir_read>:
{
   11a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a7e:	46de      	mov	lr, fp
   11a80:	4657      	mov	r7, sl
   11a82:	464e      	mov	r6, r9
   11a84:	4645      	mov	r5, r8
   11a86:	b5e0      	push	{r5, r6, r7, lr}
   11a88:	b083      	sub	sp, #12
   11a8a:	0005      	movs	r5, r0
	BYTE a, ord = 0xFF, sum = 0xFF;
   11a8c:	23ff      	movs	r3, #255	; 0xff
   11a8e:	4699      	mov	r9, r3
   11a90:	26ff      	movs	r6, #255	; 0xff
	res = FR_NO_FILE;
   11a92:	2404      	movs	r4, #4
		res = move_window(dj->fs, dj->sect);
   11a94:	4f44      	ldr	r7, [pc, #272]	; (11ba8 <dir_read+0x12c>)
		res = dir_next(dj, 0);				/* Next entry */
   11a96:	4b45      	ldr	r3, [pc, #276]	; (11bac <dir_read+0x130>)
   11a98:	4698      	mov	r8, r3
	while (dj->sect) {
   11a9a:	e05b      	b.n	11b54 <dir_read+0xd8>
			if (a == AM_LFN) {			/* An LFN entry is found */
   11a9c:	2a0f      	cmp	r2, #15
   11a9e:	d147      	bne.n	11b30 <dir_read+0xb4>
				if (c & LLE) {			/* Is it start of LFN sequence? */
   11aa0:	065a      	lsls	r2, r3, #25
   11aa2:	d51a      	bpl.n	11ada <dir_read+0x5e>
					sum = dir[LDIR_Chksum];
   11aa4:	7b42      	ldrb	r2, [r0, #13]
   11aa6:	4691      	mov	r9, r2
					c &= ~LLE; ord = c;
   11aa8:	2240      	movs	r2, #64	; 0x40
   11aaa:	4393      	bics	r3, r2
					dj->lfn_idx = dj->index;
   11aac:	88ea      	ldrh	r2, [r5, #6]
   11aae:	842a      	strh	r2, [r5, #32]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   11ab0:	7b42      	ldrb	r2, [r0, #13]
   11ab2:	4694      	mov	ip, r2
   11ab4:	26ff      	movs	r6, #255	; 0xff
   11ab6:	454a      	cmp	r2, r9
   11ab8:	d147      	bne.n	11b4a <dir_read+0xce>
   11aba:	69ea      	ldr	r2, [r5, #28]
   11abc:	4691      	mov	r9, r2
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   11abe:	7802      	ldrb	r2, [r0, #0]
   11ac0:	243f      	movs	r4, #63	; 0x3f
   11ac2:	4022      	ands	r2, r4
   11ac4:	3a01      	subs	r2, #1
   11ac6:	0054      	lsls	r4, r2, #1
   11ac8:	18a4      	adds	r4, r4, r2
   11aca:	00a4      	lsls	r4, r4, #2
   11acc:	18a2      	adds	r2, r4, r2
   11ace:	9201      	str	r2, [sp, #4]
	s = 0; wc = 1;
   11ad0:	3efe      	subs	r6, #254	; 0xfe
   11ad2:	2100      	movs	r1, #0
			if (uc != 0xFFFF) return 0;		/* Check filler */
   11ad4:	4a36      	ldr	r2, [pc, #216]	; (11bb0 <dir_read+0x134>)
   11ad6:	4692      	mov	sl, r2
   11ad8:	e008      	b.n	11aec <dir_read+0x70>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   11ada:	429e      	cmp	r6, r3
   11adc:	d0e8      	beq.n	11ab0 <dir_read+0x34>
   11ade:	26ff      	movs	r6, #255	; 0xff
   11ae0:	e033      	b.n	11b4a <dir_read+0xce>
			if (uc != 0xFFFF) return 0;		/* Check filler */
   11ae2:	4552      	cmp	r2, sl
   11ae4:	d151      	bne.n	11b8a <dir_read+0x10e>
	} while (++s < 13);						/* Read all character in the entry */
   11ae6:	3101      	adds	r1, #1
   11ae8:	290d      	cmp	r1, #13
   11aea:	d013      	beq.n	11b14 <dir_read+0x98>
		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
   11aec:	4a31      	ldr	r2, [pc, #196]	; (11bb4 <dir_read+0x138>)
   11aee:	5c8a      	ldrb	r2, [r1, r2]
   11af0:	1884      	adds	r4, r0, r2
   11af2:	7864      	ldrb	r4, [r4, #1]
   11af4:	0224      	lsls	r4, r4, #8
   11af6:	5c82      	ldrb	r2, [r0, r2]
   11af8:	4322      	orrs	r2, r4
		if (wc) {	/* Last char has not been processed */
   11afa:	2e00      	cmp	r6, #0
   11afc:	d0f1      	beq.n	11ae2 <dir_read+0x66>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
   11afe:	9c01      	ldr	r4, [sp, #4]
   11b00:	2cfe      	cmp	r4, #254	; 0xfe
   11b02:	d842      	bhi.n	11b8a <dir_read+0x10e>
			lfnbuf[i++] = wc = uc;			/* Store it */
   11b04:	0066      	lsls	r6, r4, #1
   11b06:	464c      	mov	r4, r9
   11b08:	5332      	strh	r2, [r6, r4]
   11b0a:	0016      	movs	r6, r2
   11b0c:	9c01      	ldr	r4, [sp, #4]
   11b0e:	3401      	adds	r4, #1
   11b10:	9401      	str	r4, [sp, #4]
   11b12:	e7e8      	b.n	11ae6 <dir_read+0x6a>
	if (dir[LDIR_Ord] & LLE) {				/* Put terminator if it is the last LFN part */
   11b14:	7802      	ldrb	r2, [r0, #0]
   11b16:	0652      	lsls	r2, r2, #25
   11b18:	d506      	bpl.n	11b28 <dir_read+0xac>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
   11b1a:	9a01      	ldr	r2, [sp, #4]
   11b1c:	2afe      	cmp	r2, #254	; 0xfe
   11b1e:	d834      	bhi.n	11b8a <dir_read+0x10e>
		lfnbuf[i] = 0;
   11b20:	0054      	lsls	r4, r2, #1
   11b22:	2200      	movs	r2, #0
   11b24:	4649      	mov	r1, r9
   11b26:	5262      	strh	r2, [r4, r1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   11b28:	3b01      	subs	r3, #1
   11b2a:	b2de      	uxtb	r6, r3
   11b2c:	46e1      	mov	r9, ip
   11b2e:	e00c      	b.n	11b4a <dir_read+0xce>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
   11b30:	2e00      	cmp	r6, #0
   11b32:	d103      	bne.n	11b3c <dir_read+0xc0>
   11b34:	4b20      	ldr	r3, [pc, #128]	; (11bb8 <dir_read+0x13c>)
   11b36:	4798      	blx	r3
   11b38:	4581      	cmp	r9, r0
   11b3a:	d02c      	beq.n	11b96 <dir_read+0x11a>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
   11b3c:	2301      	movs	r3, #1
   11b3e:	425b      	negs	r3, r3
   11b40:	842b      	strh	r3, [r5, #32]
   11b42:	e028      	b.n	11b96 <dir_read+0x11a>
			ord = 0xFF;
   11b44:	26ff      	movs	r6, #255	; 0xff
   11b46:	e000      	b.n	11b4a <dir_read+0xce>
   11b48:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dj, 0);				/* Next entry */
   11b4a:	2100      	movs	r1, #0
   11b4c:	0028      	movs	r0, r5
   11b4e:	47c0      	blx	r8
   11b50:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
   11b52:	d11e      	bne.n	11b92 <dir_read+0x116>
	while (dj->sect) {
   11b54:	6929      	ldr	r1, [r5, #16]
   11b56:	2900      	cmp	r1, #0
   11b58:	d014      	beq.n	11b84 <dir_read+0x108>
		res = move_window(dj->fs, dj->sect);
   11b5a:	6828      	ldr	r0, [r5, #0]
   11b5c:	47b8      	blx	r7
   11b5e:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
   11b60:	d117      	bne.n	11b92 <dir_read+0x116>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   11b62:	6968      	ldr	r0, [r5, #20]
		c = dir[DIR_Name];
   11b64:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   11b66:	2b00      	cmp	r3, #0
   11b68:	d012      	beq.n	11b90 <dir_read+0x114>
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   11b6a:	2be5      	cmp	r3, #229	; 0xe5
   11b6c:	d0ea      	beq.n	11b44 <dir_read+0xc8>
   11b6e:	2b2e      	cmp	r3, #46	; 0x2e
   11b70:	d0ea      	beq.n	11b48 <dir_read+0xcc>
		a = dir[DIR_Attr] & AM_MASK;
   11b72:	7ac1      	ldrb	r1, [r0, #11]
   11b74:	223f      	movs	r2, #63	; 0x3f
   11b76:	400a      	ands	r2, r1
		if (c == DDE || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   11b78:	0709      	lsls	r1, r1, #28
   11b7a:	d58f      	bpl.n	11a9c <dir_read+0x20>
   11b7c:	2a0f      	cmp	r2, #15
   11b7e:	d08f      	beq.n	11aa0 <dir_read+0x24>
			ord = 0xFF;
   11b80:	26ff      	movs	r6, #255	; 0xff
   11b82:	e7e2      	b.n	11b4a <dir_read+0xce>
	if (res != FR_OK) dj->sect = 0;
   11b84:	2c00      	cmp	r4, #0
   11b86:	d006      	beq.n	11b96 <dir_read+0x11a>
   11b88:	e003      	b.n	11b92 <dir_read+0x116>
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   11b8a:	46e1      	mov	r9, ip
   11b8c:	26ff      	movs	r6, #255	; 0xff
   11b8e:	e7dc      	b.n	11b4a <dir_read+0xce>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   11b90:	2404      	movs	r4, #4
	if (res != FR_OK) dj->sect = 0;
   11b92:	2300      	movs	r3, #0
   11b94:	612b      	str	r3, [r5, #16]
}
   11b96:	0020      	movs	r0, r4
   11b98:	b003      	add	sp, #12
   11b9a:	bc3c      	pop	{r2, r3, r4, r5}
   11b9c:	4690      	mov	r8, r2
   11b9e:	4699      	mov	r9, r3
   11ba0:	46a2      	mov	sl, r4
   11ba2:	46ab      	mov	fp, r5
   11ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ba6:	46c0      	nop			; (mov r8, r8)
   11ba8:	00011025 	.word	0x00011025
   11bac:	000114dd 	.word	0x000114dd
   11bb0:	0000ffff 	.word	0x0000ffff
   11bb4:	0001992c 	.word	0x0001992c
   11bb8:	00010b83 	.word	0x00010b83

00011bbc <dir_remove>:
{
   11bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bbe:	46c6      	mov	lr, r8
   11bc0:	b500      	push	{lr}
   11bc2:	0004      	movs	r4, r0
	i = dj->index;	/* SFN index */
   11bc4:	88c5      	ldrh	r5, [r0, #6]
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   11bc6:	8c01      	ldrh	r1, [r0, #32]
   11bc8:	4b12      	ldr	r3, [pc, #72]	; (11c14 <dir_remove+0x58>)
   11bca:	4299      	cmp	r1, r3
   11bcc:	d020      	beq.n	11c10 <dir_remove+0x54>
   11bce:	0020      	movs	r0, r4
   11bd0:	4b11      	ldr	r3, [pc, #68]	; (11c18 <dir_remove+0x5c>)
   11bd2:	4798      	blx	r3
	if (res == FR_OK) {
   11bd4:	2800      	cmp	r0, #0
   11bd6:	d118      	bne.n	11c0a <dir_remove+0x4e>
			res = move_window(dj->fs, dj->sect);
   11bd8:	4e10      	ldr	r6, [pc, #64]	; (11c1c <dir_remove+0x60>)
			*dj->dir = DDE;			/* Mark the entry "deleted" */
   11bda:	27e5      	movs	r7, #229	; 0xe5
			res = dir_next(dj, 0);		/* Next entry */
   11bdc:	4b10      	ldr	r3, [pc, #64]	; (11c20 <dir_remove+0x64>)
   11bde:	4698      	mov	r8, r3
			res = move_window(dj->fs, dj->sect);
   11be0:	6921      	ldr	r1, [r4, #16]
   11be2:	6820      	ldr	r0, [r4, #0]
   11be4:	47b0      	blx	r6
			if (res != FR_OK) break;
   11be6:	2800      	cmp	r0, #0
   11be8:	d10c      	bne.n	11c04 <dir_remove+0x48>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
   11bea:	6963      	ldr	r3, [r4, #20]
   11bec:	701f      	strb	r7, [r3, #0]
			dj->fs->wflag = 1;
   11bee:	2301      	movs	r3, #1
   11bf0:	6822      	ldr	r2, [r4, #0]
   11bf2:	7113      	strb	r3, [r2, #4]
			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
   11bf4:	88e3      	ldrh	r3, [r4, #6]
   11bf6:	42ab      	cmp	r3, r5
   11bf8:	d207      	bcs.n	11c0a <dir_remove+0x4e>
			res = dir_next(dj, 0);		/* Next entry */
   11bfa:	2100      	movs	r1, #0
   11bfc:	0020      	movs	r0, r4
   11bfe:	47c0      	blx	r8
		} while (res == FR_OK);
   11c00:	2800      	cmp	r0, #0
   11c02:	d0ed      	beq.n	11be0 <dir_remove+0x24>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
   11c04:	2804      	cmp	r0, #4
   11c06:	d100      	bne.n	11c0a <dir_remove+0x4e>
   11c08:	3802      	subs	r0, #2
}
   11c0a:	bc04      	pop	{r2}
   11c0c:	4690      	mov	r8, r2
   11c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
   11c10:	0029      	movs	r1, r5
   11c12:	e7dc      	b.n	11bce <dir_remove+0x12>
   11c14:	0000ffff 	.word	0x0000ffff
   11c18:	000111c1 	.word	0x000111c1
   11c1c:	00011025 	.word	0x00011025
   11c20:	000114dd 	.word	0x000114dd

00011c24 <sync>:
{
   11c24:	b570      	push	{r4, r5, r6, lr}
   11c26:	0004      	movs	r4, r0
	res = move_window(fs, 0);
   11c28:	2100      	movs	r1, #0
   11c2a:	4b2c      	ldr	r3, [pc, #176]	; (11cdc <sync+0xb8>)
   11c2c:	4798      	blx	r3
	if (res == FR_OK) {
   11c2e:	2800      	cmp	r0, #0
   11c30:	d10a      	bne.n	11c48 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   11c32:	7823      	ldrb	r3, [r4, #0]
   11c34:	2b03      	cmp	r3, #3
   11c36:	d008      	beq.n	11c4a <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   11c38:	7860      	ldrb	r0, [r4, #1]
   11c3a:	2200      	movs	r2, #0
   11c3c:	2100      	movs	r1, #0
   11c3e:	4b28      	ldr	r3, [pc, #160]	; (11ce0 <sync+0xbc>)
   11c40:	4798      	blx	r3
   11c42:	1e43      	subs	r3, r0, #1
   11c44:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
   11c46:	b2c0      	uxtb	r0, r0
}
   11c48:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   11c4a:	7963      	ldrb	r3, [r4, #5]
   11c4c:	2b00      	cmp	r3, #0
   11c4e:	d0f3      	beq.n	11c38 <sync+0x14>
			fs->winsect = 0;
   11c50:	2600      	movs	r6, #0
   11c52:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
   11c54:	0025      	movs	r5, r4
   11c56:	3530      	adds	r5, #48	; 0x30
   11c58:	2280      	movs	r2, #128	; 0x80
   11c5a:	0092      	lsls	r2, r2, #2
   11c5c:	2100      	movs	r1, #0
   11c5e:	0028      	movs	r0, r5
   11c60:	4b20      	ldr	r3, [pc, #128]	; (11ce4 <sync+0xc0>)
   11c62:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   11c64:	2255      	movs	r2, #85	; 0x55
   11c66:	4b20      	ldr	r3, [pc, #128]	; (11ce8 <sync+0xc4>)
   11c68:	54e2      	strb	r2, [r4, r3]
   11c6a:	3255      	adds	r2, #85	; 0x55
   11c6c:	4b1f      	ldr	r3, [pc, #124]	; (11cec <sync+0xc8>)
   11c6e:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   11c70:	3bde      	subs	r3, #222	; 0xde
   11c72:	3bff      	subs	r3, #255	; 0xff
   11c74:	3a7a      	subs	r2, #122	; 0x7a
   11c76:	54a3      	strb	r3, [r4, r2]
   11c78:	3201      	adds	r2, #1
   11c7a:	54a3      	strb	r3, [r4, r2]
   11c7c:	330f      	adds	r3, #15
   11c7e:	3201      	adds	r2, #1
   11c80:	54a3      	strb	r3, [r4, r2]
   11c82:	320f      	adds	r2, #15
   11c84:	2133      	movs	r1, #51	; 0x33
   11c86:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   11c88:	313f      	adds	r1, #63	; 0x3f
   11c8a:	2085      	movs	r0, #133	; 0x85
   11c8c:	0080      	lsls	r0, r0, #2
   11c8e:	5421      	strb	r1, [r4, r0]
   11c90:	4817      	ldr	r0, [pc, #92]	; (11cf0 <sync+0xcc>)
   11c92:	5421      	strb	r1, [r4, r0]
   11c94:	4917      	ldr	r1, [pc, #92]	; (11cf4 <sync+0xd0>)
   11c96:	5462      	strb	r2, [r4, r1]
   11c98:	4a17      	ldr	r2, [pc, #92]	; (11cf8 <sync+0xd4>)
   11c9a:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   11c9c:	6923      	ldr	r3, [r4, #16]
   11c9e:	3201      	adds	r2, #1
   11ca0:	54a3      	strb	r3, [r4, r2]
   11ca2:	0a19      	lsrs	r1, r3, #8
   11ca4:	4a15      	ldr	r2, [pc, #84]	; (11cfc <sync+0xd8>)
   11ca6:	54a1      	strb	r1, [r4, r2]
   11ca8:	0c19      	lsrs	r1, r3, #16
   11caa:	4a15      	ldr	r2, [pc, #84]	; (11d00 <sync+0xdc>)
   11cac:	54a1      	strb	r1, [r4, r2]
   11cae:	0e1b      	lsrs	r3, r3, #24
   11cb0:	4a14      	ldr	r2, [pc, #80]	; (11d04 <sync+0xe0>)
   11cb2:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   11cb4:	68e3      	ldr	r3, [r4, #12]
   11cb6:	3201      	adds	r2, #1
   11cb8:	54a3      	strb	r3, [r4, r2]
   11cba:	0a19      	lsrs	r1, r3, #8
   11cbc:	4a12      	ldr	r2, [pc, #72]	; (11d08 <sync+0xe4>)
   11cbe:	54a1      	strb	r1, [r4, r2]
   11cc0:	0c19      	lsrs	r1, r3, #16
   11cc2:	4a12      	ldr	r2, [pc, #72]	; (11d0c <sync+0xe8>)
   11cc4:	54a1      	strb	r1, [r4, r2]
   11cc6:	0e1b      	lsrs	r3, r3, #24
   11cc8:	4a11      	ldr	r2, [pc, #68]	; (11d10 <sync+0xec>)
   11cca:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   11ccc:	7860      	ldrb	r0, [r4, #1]
   11cce:	2301      	movs	r3, #1
   11cd0:	6962      	ldr	r2, [r4, #20]
   11cd2:	0029      	movs	r1, r5
   11cd4:	4d0f      	ldr	r5, [pc, #60]	; (11d14 <sync+0xf0>)
   11cd6:	47a8      	blx	r5
			fs->fsi_flag = 0;
   11cd8:	7166      	strb	r6, [r4, #5]
   11cda:	e7ad      	b.n	11c38 <sync+0x14>
   11cdc:	00011025 	.word	0x00011025
   11ce0:	00010a89 	.word	0x00010a89
   11ce4:	00010b59 	.word	0x00010b59
   11ce8:	0000022e 	.word	0x0000022e
   11cec:	0000022f 	.word	0x0000022f
   11cf0:	00000215 	.word	0x00000215
   11cf4:	00000216 	.word	0x00000216
   11cf8:	00000217 	.word	0x00000217
   11cfc:	00000219 	.word	0x00000219
   11d00:	0000021a 	.word	0x0000021a
   11d04:	0000021b 	.word	0x0000021b
   11d08:	0000021d 	.word	0x0000021d
   11d0c:	0000021e 	.word	0x0000021e
   11d10:	0000021f 	.word	0x0000021f
   11d14:	00010a05 	.word	0x00010a05

00011d18 <follow_path>:
{
   11d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d1a:	46de      	mov	lr, fp
   11d1c:	4657      	mov	r7, sl
   11d1e:	464e      	mov	r6, r9
   11d20:	4645      	mov	r5, r8
   11d22:	b5e0      	push	{r5, r6, r7, lr}
   11d24:	b083      	sub	sp, #12
   11d26:	4682      	mov	sl, r0
   11d28:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   11d2a:	780b      	ldrb	r3, [r1, #0]
   11d2c:	2b2f      	cmp	r3, #47	; 0x2f
   11d2e:	d00f      	beq.n	11d50 <follow_path+0x38>
   11d30:	2b5c      	cmp	r3, #92	; 0x5c
   11d32:	d00d      	beq.n	11d50 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
   11d34:	2300      	movs	r3, #0
   11d36:	4652      	mov	r2, sl
   11d38:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   11d3a:	782b      	ldrb	r3, [r5, #0]
   11d3c:	4657      	mov	r7, sl
   11d3e:	2b1f      	cmp	r3, #31
   11d40:	d809      	bhi.n	11d56 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
   11d42:	2100      	movs	r1, #0
   11d44:	4650      	mov	r0, sl
   11d46:	4bb2      	ldr	r3, [pc, #712]	; (12010 <follow_path+0x2f8>)
   11d48:	4798      	blx	r3
		dj->dir = 0;
   11d4a:	2300      	movs	r3, #0
   11d4c:	617b      	str	r3, [r7, #20]
   11d4e:	e13a      	b.n	11fc6 <follow_path+0x2ae>
		path++;
   11d50:	3501      	adds	r5, #1
   11d52:	e7ef      	b.n	11d34 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   11d54:	3501      	adds	r5, #1
   11d56:	7828      	ldrb	r0, [r5, #0]
   11d58:	282f      	cmp	r0, #47	; 0x2f
   11d5a:	d0fb      	beq.n	11d54 <follow_path+0x3c>
   11d5c:	285c      	cmp	r0, #92	; 0x5c
   11d5e:	d0f9      	beq.n	11d54 <follow_path+0x3c>
	lfn = dj->lfn;
   11d60:	69fb      	ldr	r3, [r7, #28]
   11d62:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
   11d64:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   11d66:	281f      	cmp	r0, #31
   11d68:	d800      	bhi.n	11d6c <follow_path+0x54>
   11d6a:	e13b      	b.n	11fe4 <follow_path+0x2cc>
   11d6c:	282f      	cmp	r0, #47	; 0x2f
   11d6e:	d100      	bne.n	11d72 <follow_path+0x5a>
   11d70:	e13b      	b.n	11fea <follow_path+0x2d2>
   11d72:	285c      	cmp	r0, #92	; 0x5c
   11d74:	d100      	bne.n	11d78 <follow_path+0x60>
   11d76:	e13b      	b.n	11ff0 <follow_path+0x2d8>
   11d78:	1c6e      	adds	r6, r5, #1
   11d7a:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   11d7c:	2380      	movs	r3, #128	; 0x80
   11d7e:	005b      	lsls	r3, r3, #1
   11d80:	4698      	mov	r8, r3
   11d82:	46bb      	mov	fp, r7
   11d84:	002b      	movs	r3, r5
   11d86:	0025      	movs	r5, r4
   11d88:	0034      	movs	r4, r6
   11d8a:	4656      	mov	r6, sl
   11d8c:	4699      	mov	r9, r3
   11d8e:	e011      	b.n	11db4 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   11d90:	2b00      	cmp	r3, #0
   11d92:	d135      	bne.n	11e00 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
   11d94:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
   11d96:	1c6b      	adds	r3, r5, #1
   11d98:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   11d9a:	281f      	cmp	r0, #31
   11d9c:	d91e      	bls.n	11ddc <follow_path+0xc4>
   11d9e:	282f      	cmp	r0, #47	; 0x2f
   11da0:	d100      	bne.n	11da4 <follow_path+0x8c>
   11da2:	e128      	b.n	11ff6 <follow_path+0x2de>
   11da4:	285c      	cmp	r0, #92	; 0x5c
   11da6:	d100      	bne.n	11daa <follow_path+0x92>
   11da8:	e142      	b.n	12030 <follow_path+0x318>
   11daa:	3602      	adds	r6, #2
   11dac:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
   11dae:	4543      	cmp	r3, r8
   11db0:	d026      	beq.n	11e00 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
   11db2:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   11db4:	2101      	movs	r1, #1
   11db6:	4b97      	ldr	r3, [pc, #604]	; (12014 <follow_path+0x2fc>)
   11db8:	4798      	blx	r3
   11dba:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   11dbc:	d020      	beq.n	11e00 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   11dbe:	287f      	cmp	r0, #127	; 0x7f
   11dc0:	d8e8      	bhi.n	11d94 <follow_path+0x7c>
	while (*str && *str != chr) str++;
   11dc2:	2822      	cmp	r0, #34	; 0x22
   11dc4:	d100      	bne.n	11dc8 <follow_path+0xb0>
   11dc6:	e0fd      	b.n	11fc4 <follow_path+0x2ac>
   11dc8:	232a      	movs	r3, #42	; 0x2a
   11dca:	4a93      	ldr	r2, [pc, #588]	; (12018 <follow_path+0x300>)
   11dcc:	b29f      	uxth	r7, r3
   11dce:	428f      	cmp	r7, r1
   11dd0:	d0de      	beq.n	11d90 <follow_path+0x78>
   11dd2:	3201      	adds	r2, #1
   11dd4:	7813      	ldrb	r3, [r2, #0]
   11dd6:	2b00      	cmp	r3, #0
   11dd8:	d1f8      	bne.n	11dcc <follow_path+0xb4>
   11dda:	e7db      	b.n	11d94 <follow_path+0x7c>
   11ddc:	002c      	movs	r4, r5
   11dde:	465f      	mov	r7, fp
   11de0:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   11de2:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   11de4:	2604      	movs	r6, #4
   11de6:	e10b      	b.n	12000 <follow_path+0x2e8>
		di--;
   11de8:	3c01      	subs	r4, #1
   11dea:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
   11dec:	2c00      	cmp	r4, #0
   11dee:	d100      	bne.n	11df2 <follow_path+0xda>
   11df0:	e0e8      	b.n	11fc4 <follow_path+0x2ac>
		w = lfn[di-1];
   11df2:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   11df4:	2a20      	cmp	r2, #32
   11df6:	d0f7      	beq.n	11de8 <follow_path+0xd0>
   11df8:	2a2e      	cmp	r2, #46	; 0x2e
   11dfa:	d0f5      	beq.n	11de8 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   11dfc:	2c00      	cmp	r4, #0
   11dfe:	d101      	bne.n	11e04 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   11e00:	2006      	movs	r0, #6
	return res;
   11e02:	e0e0      	b.n	11fc6 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
   11e04:	0063      	lsls	r3, r4, #1
   11e06:	4698      	mov	r8, r3
   11e08:	2300      	movs	r3, #0
   11e0a:	4652      	mov	r2, sl
   11e0c:	4641      	mov	r1, r8
   11e0e:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
   11e10:	220b      	movs	r2, #11
   11e12:	2120      	movs	r1, #32
   11e14:	69b8      	ldr	r0, [r7, #24]
   11e16:	4b81      	ldr	r3, [pc, #516]	; (1201c <follow_path+0x304>)
   11e18:	4798      	blx	r3
   11e1a:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   11e1c:	2300      	movs	r3, #0
   11e1e:	e001      	b.n	11e24 <follow_path+0x10c>
   11e20:	3301      	adds	r3, #1
   11e22:	3202      	adds	r2, #2
   11e24:	8811      	ldrh	r1, [r2, #0]
   11e26:	2920      	cmp	r1, #32
   11e28:	d0fa      	beq.n	11e20 <follow_path+0x108>
   11e2a:	292e      	cmp	r1, #46	; 0x2e
   11e2c:	d0f8      	beq.n	11e20 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
   11e2e:	2b00      	cmp	r3, #0
   11e30:	d001      	beq.n	11e36 <follow_path+0x11e>
   11e32:	2203      	movs	r2, #3
   11e34:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   11e36:	4652      	mov	r2, sl
   11e38:	4442      	add	r2, r8
   11e3a:	3a02      	subs	r2, #2
   11e3c:	8812      	ldrh	r2, [r2, #0]
   11e3e:	2a2e      	cmp	r2, #46	; 0x2e
   11e40:	d009      	beq.n	11e56 <follow_path+0x13e>
   11e42:	4642      	mov	r2, r8
   11e44:	3a04      	subs	r2, #4
   11e46:	4452      	add	r2, sl
   11e48:	3c01      	subs	r4, #1
   11e4a:	2c00      	cmp	r4, #0
   11e4c:	d003      	beq.n	11e56 <follow_path+0x13e>
   11e4e:	3a02      	subs	r2, #2
   11e50:	8851      	ldrh	r1, [r2, #2]
   11e52:	292e      	cmp	r1, #46	; 0x2e
   11e54:	d1f8      	bne.n	11e48 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
   11e56:	2208      	movs	r2, #8
   11e58:	9201      	str	r2, [sp, #4]
   11e5a:	2200      	movs	r2, #0
   11e5c:	4693      	mov	fp, r2
   11e5e:	4691      	mov	r9, r2
   11e60:	46a0      	mov	r8, r4
   11e62:	e006      	b.n	11e72 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   11e64:	4544      	cmp	r4, r8
   11e66:	d100      	bne.n	11e6a <follow_path+0x152>
   11e68:	e0e6      	b.n	12038 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
   11e6a:	2303      	movs	r3, #3
   11e6c:	431e      	orrs	r6, r3
   11e6e:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
   11e70:	0023      	movs	r3, r4
   11e72:	1c5c      	adds	r4, r3, #1
   11e74:	005b      	lsls	r3, r3, #1
   11e76:	4652      	mov	r2, sl
   11e78:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
   11e7a:	2800      	cmp	r0, #0
   11e7c:	d02c      	beq.n	11ed8 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   11e7e:	2820      	cmp	r0, #32
   11e80:	d0f3      	beq.n	11e6a <follow_path+0x152>
   11e82:	282e      	cmp	r0, #46	; 0x2e
   11e84:	d0ee      	beq.n	11e64 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
   11e86:	9b01      	ldr	r3, [sp, #4]
   11e88:	459b      	cmp	fp, r3
   11e8a:	d219      	bcs.n	11ec0 <follow_path+0x1a8>
   11e8c:	4544      	cmp	r4, r8
   11e8e:	d100      	bne.n	11e92 <follow_path+0x17a>
   11e90:	e0d2      	b.n	12038 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
   11e92:	287f      	cmp	r0, #127	; 0x7f
   11e94:	d85e      	bhi.n	11f54 <follow_path+0x23c>
	while (*str && *str != chr) str++;
   11e96:	282b      	cmp	r0, #43	; 0x2b
   11e98:	d06e      	beq.n	11f78 <follow_path+0x260>
   11e9a:	232c      	movs	r3, #44	; 0x2c
   11e9c:	4a60      	ldr	r2, [pc, #384]	; (12020 <follow_path+0x308>)
   11e9e:	b299      	uxth	r1, r3
   11ea0:	4281      	cmp	r1, r0
   11ea2:	d067      	beq.n	11f74 <follow_path+0x25c>
   11ea4:	3201      	adds	r2, #1
   11ea6:	7813      	ldrb	r3, [r2, #0]
   11ea8:	2b00      	cmp	r3, #0
   11eaa:	d1f8      	bne.n	11e9e <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
   11eac:	0003      	movs	r3, r0
   11eae:	3b41      	subs	r3, #65	; 0x41
   11eb0:	b29b      	uxth	r3, r3
   11eb2:	2b19      	cmp	r3, #25
   11eb4:	d86c      	bhi.n	11f90 <follow_path+0x278>
					b |= 2;
   11eb6:	2302      	movs	r3, #2
   11eb8:	464a      	mov	r2, r9
   11eba:	431a      	orrs	r2, r3
   11ebc:	4691      	mov	r9, r2
   11ebe:	e05f      	b.n	11f80 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
   11ec0:	9b01      	ldr	r3, [sp, #4]
   11ec2:	2b0b      	cmp	r3, #11
   11ec4:	d03b      	beq.n	11f3e <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   11ec6:	4544      	cmp	r4, r8
   11ec8:	d100      	bne.n	11ecc <follow_path+0x1b4>
   11eca:	e0b9      	b.n	12040 <follow_path+0x328>
   11ecc:	2303      	movs	r3, #3
   11ece:	431e      	orrs	r6, r3
   11ed0:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
   11ed2:	4544      	cmp	r4, r8
   11ed4:	d800      	bhi.n	11ed8 <follow_path+0x1c0>
   11ed6:	e0b3      	b.n	12040 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   11ed8:	69bb      	ldr	r3, [r7, #24]
   11eda:	781a      	ldrb	r2, [r3, #0]
   11edc:	2ae5      	cmp	r2, #229	; 0xe5
   11ede:	d036      	beq.n	11f4e <follow_path+0x236>
	if (ni == 8) b <<= 2;
   11ee0:	9b01      	ldr	r3, [sp, #4]
   11ee2:	2b08      	cmp	r3, #8
   11ee4:	d060      	beq.n	11fa8 <follow_path+0x290>
   11ee6:	230c      	movs	r3, #12
   11ee8:	464a      	mov	r2, r9
   11eea:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   11eec:	2b0c      	cmp	r3, #12
   11eee:	d060      	beq.n	11fb2 <follow_path+0x29a>
   11ef0:	43d2      	mvns	r2, r2
   11ef2:	0792      	lsls	r2, r2, #30
   11ef4:	d05d      	beq.n	11fb2 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   11ef6:	07b2      	lsls	r2, r6, #30
   11ef8:	d406      	bmi.n	11f08 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   11efa:	2203      	movs	r2, #3
   11efc:	4649      	mov	r1, r9
   11efe:	400a      	ands	r2, r1
   11f00:	2a01      	cmp	r2, #1
   11f02:	d059      	beq.n	11fb8 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   11f04:	2b04      	cmp	r3, #4
   11f06:	d05a      	beq.n	11fbe <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
   11f08:	69bb      	ldr	r3, [r7, #24]
   11f0a:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
   11f0c:	0038      	movs	r0, r7
   11f0e:	4b45      	ldr	r3, [pc, #276]	; (12024 <follow_path+0x30c>)
   11f10:	4798      	blx	r3
			ns = *(dj->fn+NS);
   11f12:	69bb      	ldr	r3, [r7, #24]
   11f14:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
   11f16:	2800      	cmp	r0, #0
   11f18:	d15c      	bne.n	11fd4 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   11f1a:	075b      	lsls	r3, r3, #29
   11f1c:	d453      	bmi.n	11fc6 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   11f1e:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   11f20:	7ad3      	ldrb	r3, [r2, #11]
   11f22:	06db      	lsls	r3, r3, #27
   11f24:	d55c      	bpl.n	11fe0 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
   11f26:	7d51      	ldrb	r1, [r2, #21]
   11f28:	0209      	lsls	r1, r1, #8
   11f2a:	7d13      	ldrb	r3, [r2, #20]
   11f2c:	430b      	orrs	r3, r1
   11f2e:	041b      	lsls	r3, r3, #16
   11f30:	7ed1      	ldrb	r1, [r2, #27]
   11f32:	0209      	lsls	r1, r1, #8
   11f34:	7e92      	ldrb	r2, [r2, #26]
   11f36:	430a      	orrs	r2, r1
   11f38:	4313      	orrs	r3, r2
   11f3a:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
   11f3c:	e70b      	b.n	11d56 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
   11f3e:	2303      	movs	r3, #3
   11f40:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   11f42:	69bb      	ldr	r3, [r7, #24]
   11f44:	781a      	ldrb	r2, [r3, #0]
   11f46:	2ae5      	cmp	r2, #229	; 0xe5
   11f48:	d1cd      	bne.n	11ee6 <follow_path+0x1ce>
   11f4a:	220b      	movs	r2, #11
   11f4c:	9201      	str	r2, [sp, #4]
   11f4e:	2205      	movs	r2, #5
   11f50:	701a      	strb	r2, [r3, #0]
   11f52:	e7c5      	b.n	11ee0 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   11f54:	2100      	movs	r1, #0
   11f56:	4b2f      	ldr	r3, [pc, #188]	; (12014 <follow_path+0x2fc>)
   11f58:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   11f5a:	2800      	cmp	r0, #0
   11f5c:	d100      	bne.n	11f60 <follow_path+0x248>
   11f5e:	e079      	b.n	12054 <follow_path+0x33c>
   11f60:	4b31      	ldr	r3, [pc, #196]	; (12028 <follow_path+0x310>)
   11f62:	469c      	mov	ip, r3
   11f64:	4460      	add	r0, ip
   11f66:	3880      	subs	r0, #128	; 0x80
   11f68:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
   11f6a:	2302      	movs	r3, #2
   11f6c:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   11f6e:	2800      	cmp	r0, #0
   11f70:	d002      	beq.n	11f78 <follow_path+0x260>
   11f72:	e790      	b.n	11e96 <follow_path+0x17e>
   11f74:	2b00      	cmp	r3, #0
   11f76:	d099      	beq.n	11eac <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   11f78:	2303      	movs	r3, #3
   11f7a:	431e      	orrs	r6, r3
   11f7c:	b2f6      	uxtb	r6, r6
   11f7e:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
   11f80:	69bb      	ldr	r3, [r7, #24]
   11f82:	465a      	mov	r2, fp
   11f84:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
   11f86:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
   11f88:	2201      	movs	r2, #1
   11f8a:	4694      	mov	ip, r2
   11f8c:	44e3      	add	fp, ip
   11f8e:	e770      	b.n	11e72 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
   11f90:	0003      	movs	r3, r0
   11f92:	3b61      	subs	r3, #97	; 0x61
   11f94:	b29b      	uxth	r3, r3
   11f96:	2b19      	cmp	r3, #25
   11f98:	d8f2      	bhi.n	11f80 <follow_path+0x268>
						b |= 1; w -= 0x20;
   11f9a:	2301      	movs	r3, #1
   11f9c:	464a      	mov	r2, r9
   11f9e:	431a      	orrs	r2, r3
   11fa0:	4691      	mov	r9, r2
   11fa2:	3820      	subs	r0, #32
   11fa4:	b280      	uxth	r0, r0
   11fa6:	e7eb      	b.n	11f80 <follow_path+0x268>
	if (ni == 8) b <<= 2;
   11fa8:	464b      	mov	r3, r9
   11faa:	009b      	lsls	r3, r3, #2
   11fac:	b2db      	uxtb	r3, r3
   11fae:	4699      	mov	r9, r3
   11fb0:	e799      	b.n	11ee6 <follow_path+0x1ce>
		cf |= NS_LFN;
   11fb2:	2202      	movs	r2, #2
   11fb4:	4316      	orrs	r6, r2
   11fb6:	e79e      	b.n	11ef6 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   11fb8:	320f      	adds	r2, #15
   11fba:	4316      	orrs	r6, r2
   11fbc:	e7a2      	b.n	11f04 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   11fbe:	3304      	adds	r3, #4
   11fc0:	431e      	orrs	r6, r3
   11fc2:	e7a1      	b.n	11f08 <follow_path+0x1f0>
   11fc4:	2006      	movs	r0, #6
}
   11fc6:	b003      	add	sp, #12
   11fc8:	bc3c      	pop	{r2, r3, r4, r5}
   11fca:	4690      	mov	r8, r2
   11fcc:	4699      	mov	r9, r3
   11fce:	46a2      	mov	sl, r4
   11fd0:	46ab      	mov	fp, r5
   11fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   11fd4:	2804      	cmp	r0, #4
   11fd6:	d1f6      	bne.n	11fc6 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   11fd8:	075b      	lsls	r3, r3, #29
   11fda:	d4f4      	bmi.n	11fc6 <follow_path+0x2ae>
   11fdc:	3001      	adds	r0, #1
   11fde:	e7f2      	b.n	11fc6 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
   11fe0:	2005      	movs	r0, #5
   11fe2:	e7f0      	b.n	11fc6 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
   11fe4:	2301      	movs	r3, #1
	si = di = 0;
   11fe6:	2400      	movs	r4, #0
   11fe8:	e6fb      	b.n	11de2 <follow_path+0xca>
		w = p[si++];					/* Get a character */
   11fea:	2301      	movs	r3, #1
	si = di = 0;
   11fec:	2400      	movs	r4, #0
   11fee:	e005      	b.n	11ffc <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
   11ff0:	2301      	movs	r3, #1
	si = di = 0;
   11ff2:	2400      	movs	r4, #0
   11ff4:	e002      	b.n	11ffc <follow_path+0x2e4>
   11ff6:	002c      	movs	r4, r5
   11ff8:	465f      	mov	r7, fp
   11ffa:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
   11ffc:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   11ffe:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
   12000:	2c00      	cmp	r4, #0
   12002:	d0df      	beq.n	11fc4 <follow_path+0x2ac>
   12004:	4b09      	ldr	r3, [pc, #36]	; (1202c <follow_path+0x314>)
   12006:	18e3      	adds	r3, r4, r3
   12008:	005b      	lsls	r3, r3, #1
   1200a:	4453      	add	r3, sl
   1200c:	e6f1      	b.n	11df2 <follow_path+0xda>
   1200e:	46c0      	nop			; (mov r8, r8)
   12010:	000111c1 	.word	0x000111c1
   12014:	0001277d 	.word	0x0001277d
   12018:	000199bd 	.word	0x000199bd
   1201c:	00010b59 	.word	0x00010b59
   12020:	000199c9 	.word	0x000199c9
   12024:	00011601 	.word	0x00011601
   12028:	0001993c 	.word	0x0001993c
   1202c:	7fffffff 	.word	0x7fffffff
   12030:	002c      	movs	r4, r5
   12032:	465f      	mov	r7, fp
   12034:	464d      	mov	r5, r9
   12036:	e7e1      	b.n	11ffc <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
   12038:	9b01      	ldr	r3, [sp, #4]
   1203a:	2b0b      	cmp	r3, #11
   1203c:	d100      	bne.n	12040 <follow_path+0x328>
   1203e:	e77e      	b.n	11f3e <follow_path+0x226>
			b <<= 2; continue;
   12040:	464b      	mov	r3, r9
   12042:	009b      	lsls	r3, r3, #2
   12044:	b2db      	uxtb	r3, r3
   12046:	4699      	mov	r9, r3
   12048:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
   1204a:	220b      	movs	r2, #11
   1204c:	9201      	str	r2, [sp, #4]
   1204e:	3a03      	subs	r2, #3
   12050:	4693      	mov	fp, r2
   12052:	e70e      	b.n	11e72 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
   12054:	2302      	movs	r3, #2
   12056:	431e      	orrs	r6, r3
   12058:	e78e      	b.n	11f78 <follow_path+0x260>
   1205a:	46c0      	nop			; (mov r8, r8)

0001205c <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   1205c:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   1205e:	2807      	cmp	r0, #7
   12060:	d901      	bls.n	12066 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
   12062:	0018      	movs	r0, r3
   12064:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
   12066:	0083      	lsls	r3, r0, #2
   12068:	4a07      	ldr	r2, [pc, #28]	; (12088 <f_mount+0x2c>)
   1206a:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
   1206c:	2b00      	cmp	r3, #0
   1206e:	d001      	beq.n	12074 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
   12070:	2200      	movs	r2, #0
   12072:	701a      	strb	r2, [r3, #0]
	if (fs) {
   12074:	2900      	cmp	r1, #0
   12076:	d001      	beq.n	1207c <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
   12078:	2300      	movs	r3, #0
   1207a:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
   1207c:	0080      	lsls	r0, r0, #2
   1207e:	4b02      	ldr	r3, [pc, #8]	; (12088 <f_mount+0x2c>)
   12080:	50c1      	str	r1, [r0, r3]
	return FR_OK;
   12082:	2300      	movs	r3, #0
   12084:	e7ed      	b.n	12062 <f_mount+0x6>
   12086:	46c0      	nop			; (mov r8, r8)
   12088:	2000043c 	.word	0x2000043c

0001208c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   1208c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1208e:	46c6      	mov	lr, r8
   12090:	b500      	push	{lr}
   12092:	4c59      	ldr	r4, [pc, #356]	; (121f8 <f_open+0x16c>)
   12094:	44a5      	add	sp, r4
   12096:	0005      	movs	r5, r0
   12098:	9101      	str	r1, [sp, #4]
   1209a:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   1209c:	2300      	movs	r3, #0
   1209e:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   120a0:	261f      	movs	r6, #31
   120a2:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   120a4:	221e      	movs	r2, #30
   120a6:	403a      	ands	r2, r7
   120a8:	a985      	add	r1, sp, #532	; 0x214
   120aa:	a801      	add	r0, sp, #4
   120ac:	4b53      	ldr	r3, [pc, #332]	; (121fc <f_open+0x170>)
   120ae:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   120b0:	ab82      	add	r3, sp, #520	; 0x208
   120b2:	938b      	str	r3, [sp, #556]	; 0x22c
   120b4:	ab02      	add	r3, sp, #8
   120b6:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
   120b8:	2800      	cmp	r0, #0
   120ba:	d006      	beq.n	120ca <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
   120bc:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   120be:	231c      	movs	r3, #28
   120c0:	423b      	tst	r3, r7
   120c2:	d145      	bne.n	12150 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   120c4:	2800      	cmp	r0, #0
   120c6:	d13d      	bne.n	12144 <f_open+0xb8>
   120c8:	e00c      	b.n	120e4 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
   120ca:	9901      	ldr	r1, [sp, #4]
   120cc:	a885      	add	r0, sp, #532	; 0x214
   120ce:	4b4c      	ldr	r3, [pc, #304]	; (12200 <f_open+0x174>)
   120d0:	4798      	blx	r3
	dir = dj.dir;
   120d2:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   120d4:	2800      	cmp	r0, #0
   120d6:	d1f2      	bne.n	120be <f_open+0x32>
		if (!dir)	/* Current dir itself */
   120d8:	2c00      	cmp	r4, #0
   120da:	d100      	bne.n	120de <f_open+0x52>
   120dc:	e086      	b.n	121ec <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   120de:	231c      	movs	r3, #28
   120e0:	423b      	tst	r3, r7
   120e2:	d146      	bne.n	12172 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   120e4:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
   120e6:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   120e8:	06da      	lsls	r2, r3, #27
   120ea:	d42b      	bmi.n	12144 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   120ec:	07ba      	lsls	r2, r7, #30
   120ee:	d502      	bpl.n	120f6 <f_open+0x6a>
					res = FR_DENIED;
   120f0:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   120f2:	07db      	lsls	r3, r3, #31
   120f4:	d426      	bmi.n	12144 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   120f6:	073b      	lsls	r3, r7, #28
   120f8:	d501      	bpl.n	120fe <f_open+0x72>
			mode |= FA__WRITTEN;
   120fa:	2320      	movs	r3, #32
   120fc:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   120fe:	9b85      	ldr	r3, [sp, #532]	; 0x214
   12100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12102:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
   12104:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   12106:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   12108:	7d62      	ldrb	r2, [r4, #21]
   1210a:	0212      	lsls	r2, r2, #8
   1210c:	7d23      	ldrb	r3, [r4, #20]
   1210e:	4313      	orrs	r3, r2
   12110:	041b      	lsls	r3, r3, #16
   12112:	7ee1      	ldrb	r1, [r4, #27]
   12114:	0209      	lsls	r1, r1, #8
   12116:	7ea2      	ldrb	r2, [r4, #26]
   12118:	430a      	orrs	r2, r1
   1211a:	4313      	orrs	r3, r2
   1211c:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   1211e:	7fe3      	ldrb	r3, [r4, #31]
   12120:	061b      	lsls	r3, r3, #24
   12122:	7fa2      	ldrb	r2, [r4, #30]
   12124:	0412      	lsls	r2, r2, #16
   12126:	4313      	orrs	r3, r2
   12128:	7f22      	ldrb	r2, [r4, #28]
   1212a:	4313      	orrs	r3, r2
   1212c:	7f62      	ldrb	r2, [r4, #29]
   1212e:	0212      	lsls	r2, r2, #8
   12130:	4313      	orrs	r3, r2
   12132:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
   12134:	2300      	movs	r3, #0
   12136:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
   12138:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   1213a:	9b85      	ldr	r3, [sp, #532]	; 0x214
   1213c:	602b      	str	r3, [r5, #0]
   1213e:	88db      	ldrh	r3, [r3, #6]
   12140:	80ab      	strh	r3, [r5, #4]
   12142:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
   12144:	238e      	movs	r3, #142	; 0x8e
   12146:	009b      	lsls	r3, r3, #2
   12148:	449d      	add	sp, r3
   1214a:	bc04      	pop	{r2}
   1214c:	4690      	mov	r8, r2
   1214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   12150:	2804      	cmp	r0, #4
   12152:	d005      	beq.n	12160 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   12154:	2308      	movs	r3, #8
   12156:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   12158:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
   1215a:	2800      	cmp	r0, #0
   1215c:	d0d3      	beq.n	12106 <f_open+0x7a>
   1215e:	e7f1      	b.n	12144 <f_open+0xb8>
				res = dir_register(&dj);
   12160:	a885      	add	r0, sp, #532	; 0x214
   12162:	4b28      	ldr	r3, [pc, #160]	; (12204 <f_open+0x178>)
   12164:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   12166:	2308      	movs	r3, #8
   12168:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
   1216a:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   1216c:	2800      	cmp	r0, #0
   1216e:	d008      	beq.n	12182 <f_open+0xf6>
   12170:	e7e8      	b.n	12144 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   12172:	7ae3      	ldrb	r3, [r4, #11]
   12174:	2211      	movs	r2, #17
				res = FR_DENIED;
   12176:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   12178:	421a      	tst	r2, r3
   1217a:	d1e3      	bne.n	12144 <f_open+0xb8>
					res = FR_EXIST;
   1217c:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   1217e:	077b      	lsls	r3, r7, #29
   12180:	d4e0      	bmi.n	12144 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   12182:	0733      	lsls	r3, r6, #28
   12184:	d5bb      	bpl.n	120fe <f_open+0x72>
			dw = get_fattime();					/* Created time */
   12186:	4b20      	ldr	r3, [pc, #128]	; (12208 <f_open+0x17c>)
   12188:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
   1218a:	73a0      	strb	r0, [r4, #14]
   1218c:	0a03      	lsrs	r3, r0, #8
   1218e:	73e3      	strb	r3, [r4, #15]
   12190:	0c03      	lsrs	r3, r0, #16
   12192:	7423      	strb	r3, [r4, #16]
   12194:	0e00      	lsrs	r0, r0, #24
   12196:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   12198:	2300      	movs	r3, #0
   1219a:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   1219c:	7723      	strb	r3, [r4, #28]
   1219e:	7763      	strb	r3, [r4, #29]
   121a0:	77a3      	strb	r3, [r4, #30]
   121a2:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
   121a4:	7d62      	ldrb	r2, [r4, #21]
   121a6:	0212      	lsls	r2, r2, #8
   121a8:	7d27      	ldrb	r7, [r4, #20]
   121aa:	4317      	orrs	r7, r2
   121ac:	043f      	lsls	r7, r7, #16
   121ae:	7ee1      	ldrb	r1, [r4, #27]
   121b0:	0209      	lsls	r1, r1, #8
   121b2:	7ea2      	ldrb	r2, [r4, #26]
   121b4:	430a      	orrs	r2, r1
   121b6:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
   121b8:	76a3      	strb	r3, [r4, #26]
   121ba:	76e3      	strb	r3, [r4, #27]
   121bc:	7523      	strb	r3, [r4, #20]
   121be:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
   121c0:	9885      	ldr	r0, [sp, #532]	; 0x214
   121c2:	3301      	adds	r3, #1
   121c4:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   121c6:	2f00      	cmp	r7, #0
   121c8:	d097      	beq.n	120fa <f_open+0x6e>
				dw = dj.fs->winsect;
   121ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   121cc:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
   121ce:	0039      	movs	r1, r7
   121d0:	4b0e      	ldr	r3, [pc, #56]	; (1220c <f_open+0x180>)
   121d2:	4798      	blx	r3
				if (res == FR_OK) {
   121d4:	2800      	cmp	r0, #0
   121d6:	d1b5      	bne.n	12144 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   121d8:	9885      	ldr	r0, [sp, #532]	; 0x214
   121da:	3f01      	subs	r7, #1
   121dc:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
   121de:	4641      	mov	r1, r8
   121e0:	4b0b      	ldr	r3, [pc, #44]	; (12210 <f_open+0x184>)
   121e2:	4798      	blx	r3
	if (res == FR_OK) {
   121e4:	2800      	cmp	r0, #0
   121e6:	d100      	bne.n	121ea <f_open+0x15e>
   121e8:	e787      	b.n	120fa <f_open+0x6e>
   121ea:	e7ab      	b.n	12144 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   121ec:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
   121ee:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   121f0:	423b      	tst	r3, r7
   121f2:	d0b2      	beq.n	1215a <f_open+0xce>
			res = FR_INVALID_NAME;
   121f4:	2006      	movs	r0, #6
   121f6:	e7ad      	b.n	12154 <f_open+0xc8>
   121f8:	fffffdc8 	.word	0xfffffdc8
   121fc:	00010c75 	.word	0x00010c75
   12200:	00011d19 	.word	0x00011d19
   12204:	00011799 	.word	0x00011799
   12208:	00010af5 	.word	0x00010af5
   1220c:	00011465 	.word	0x00011465
   12210:	00011025 	.word	0x00011025

00012214 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
   12214:	b5f0      	push	{r4, r5, r6, r7, lr}
   12216:	46de      	mov	lr, fp
   12218:	4657      	mov	r7, sl
   1221a:	464e      	mov	r6, r9
   1221c:	4645      	mov	r5, r8
   1221e:	b5e0      	push	{r5, r6, r7, lr}
   12220:	b083      	sub	sp, #12
   12222:	0004      	movs	r4, r0
   12224:	000f      	movs	r7, r1
   12226:	0015      	movs	r5, r2
   12228:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
   1222a:	2300      	movs	r3, #0
   1222c:	464a      	mov	r2, r9
   1222e:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
   12230:	8881      	ldrh	r1, [r0, #4]
   12232:	6800      	ldr	r0, [r0, #0]
   12234:	4b5e      	ldr	r3, [pc, #376]	; (123b0 <f_read+0x19c>)
   12236:	4798      	blx	r3
   12238:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   1223a:	2800      	cmp	r0, #0
   1223c:	d000      	beq.n	12240 <f_read+0x2c>
   1223e:	e0af      	b.n	123a0 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
   12240:	79a3      	ldrb	r3, [r4, #6]
   12242:	b25a      	sxtb	r2, r3
   12244:	2a00      	cmp	r2, #0
   12246:	da00      	bge.n	1224a <f_read+0x36>
   12248:	e0a8      	b.n	1239c <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   1224a:	07db      	lsls	r3, r3, #31
   1224c:	d402      	bmi.n	12254 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   1224e:	2307      	movs	r3, #7
   12250:	9300      	str	r3, [sp, #0]
   12252:	e0a5      	b.n	123a0 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
   12254:	68e3      	ldr	r3, [r4, #12]
   12256:	68a2      	ldr	r2, [r4, #8]
   12258:	1a9e      	subs	r6, r3, r2
   1225a:	42ae      	cmp	r6, r5
   1225c:	d900      	bls.n	12260 <f_read+0x4c>
   1225e:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
   12260:	2e00      	cmp	r6, #0
   12262:	d153      	bne.n	1230c <f_read+0xf8>
   12264:	e09c      	b.n	123a0 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   12266:	6961      	ldr	r1, [r4, #20]
   12268:	4b52      	ldr	r3, [pc, #328]	; (123b4 <f_read+0x1a0>)
   1226a:	4798      	blx	r3
   1226c:	e05c      	b.n	12328 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   1226e:	79a2      	ldrb	r2, [r4, #6]
   12270:	2380      	movs	r3, #128	; 0x80
   12272:	425b      	negs	r3, r3
   12274:	4313      	orrs	r3, r2
   12276:	71a3      	strb	r3, [r4, #6]
   12278:	2302      	movs	r3, #2
   1227a:	9300      	str	r3, [sp, #0]
   1227c:	e090      	b.n	123a0 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1227e:	79a2      	ldrb	r2, [r4, #6]
   12280:	2380      	movs	r3, #128	; 0x80
   12282:	425b      	negs	r3, r3
   12284:	4313      	orrs	r3, r2
   12286:	71a3      	strb	r3, [r4, #6]
   12288:	2301      	movs	r3, #1
   1228a:	9300      	str	r3, [sp, #0]
   1228c:	e088      	b.n	123a0 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1228e:	79a2      	ldrb	r2, [r4, #6]
   12290:	2380      	movs	r3, #128	; 0x80
   12292:	425b      	negs	r3, r3
   12294:	4313      	orrs	r3, r2
   12296:	71a3      	strb	r3, [r4, #6]
   12298:	2302      	movs	r3, #2
   1229a:	9300      	str	r3, [sp, #0]
   1229c:	e080      	b.n	123a0 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
   1229e:	79a2      	ldrb	r2, [r4, #6]
   122a0:	2380      	movs	r3, #128	; 0x80
   122a2:	425b      	negs	r3, r3
   122a4:	4313      	orrs	r3, r2
   122a6:	71a3      	strb	r3, [r4, #6]
   122a8:	2301      	movs	r3, #1
   122aa:	9300      	str	r3, [sp, #0]
   122ac:	e078      	b.n	123a0 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   122ae:	3130      	adds	r1, #48	; 0x30
   122b0:	0240      	lsls	r0, r0, #9
   122b2:	1838      	adds	r0, r7, r0
   122b4:	2280      	movs	r2, #128	; 0x80
   122b6:	0092      	lsls	r2, r2, #2
   122b8:	4b3f      	ldr	r3, [pc, #252]	; (123b8 <f_read+0x1a4>)
   122ba:	4798      	blx	r3
   122bc:	e063      	b.n	12386 <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   122be:	4643      	mov	r3, r8
   122c0:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   122c2:	68a3      	ldr	r3, [r4, #8]
   122c4:	05dd      	lsls	r5, r3, #23
   122c6:	0ded      	lsrs	r5, r5, #23
   122c8:	2380      	movs	r3, #128	; 0x80
   122ca:	009b      	lsls	r3, r3, #2
   122cc:	1b5d      	subs	r5, r3, r5
   122ce:	42b5      	cmp	r5, r6
   122d0:	d900      	bls.n	122d4 <f_read+0xc0>
   122d2:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
   122d4:	69a1      	ldr	r1, [r4, #24]
   122d6:	6820      	ldr	r0, [r4, #0]
   122d8:	4b38      	ldr	r3, [pc, #224]	; (123bc <f_read+0x1a8>)
   122da:	4798      	blx	r3
   122dc:	2800      	cmp	r0, #0
   122de:	d155      	bne.n	1238c <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   122e0:	68a3      	ldr	r3, [r4, #8]
   122e2:	05d9      	lsls	r1, r3, #23
   122e4:	0dc9      	lsrs	r1, r1, #23
   122e6:	3130      	adds	r1, #48	; 0x30
   122e8:	6823      	ldr	r3, [r4, #0]
   122ea:	469c      	mov	ip, r3
   122ec:	4461      	add	r1, ip
   122ee:	002a      	movs	r2, r5
   122f0:	0038      	movs	r0, r7
   122f2:	4b31      	ldr	r3, [pc, #196]	; (123b8 <f_read+0x1a4>)
   122f4:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   122f6:	197f      	adds	r7, r7, r5
   122f8:	68a3      	ldr	r3, [r4, #8]
   122fa:	195b      	adds	r3, r3, r5
   122fc:	60a3      	str	r3, [r4, #8]
   122fe:	464b      	mov	r3, r9
   12300:	681b      	ldr	r3, [r3, #0]
   12302:	195b      	adds	r3, r3, r5
   12304:	464a      	mov	r2, r9
   12306:	6013      	str	r3, [r2, #0]
   12308:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
   1230a:	d049      	beq.n	123a0 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   1230c:	68a3      	ldr	r3, [r4, #8]
   1230e:	05da      	lsls	r2, r3, #23
   12310:	d1d7      	bne.n	122c2 <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   12312:	6820      	ldr	r0, [r4, #0]
   12314:	7882      	ldrb	r2, [r0, #2]
   12316:	3a01      	subs	r2, #1
   12318:	0a5d      	lsrs	r5, r3, #9
   1231a:	4015      	ands	r5, r2
   1231c:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
   1231e:	2d00      	cmp	r5, #0
   12320:	d107      	bne.n	12332 <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
   12322:	2b00      	cmp	r3, #0
   12324:	d19f      	bne.n	12266 <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
   12326:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   12328:	2801      	cmp	r0, #1
   1232a:	d9a0      	bls.n	1226e <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   1232c:	1c43      	adds	r3, r0, #1
   1232e:	d0a6      	beq.n	1227e <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
   12330:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   12332:	6823      	ldr	r3, [r4, #0]
   12334:	469a      	mov	sl, r3
   12336:	6961      	ldr	r1, [r4, #20]
   12338:	0018      	movs	r0, r3
   1233a:	4b21      	ldr	r3, [pc, #132]	; (123c0 <f_read+0x1ac>)
   1233c:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1233e:	2800      	cmp	r0, #0
   12340:	d0a5      	beq.n	1228e <f_read+0x7a>
			sect += csect;
   12342:	4680      	mov	r8, r0
   12344:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
   12346:	0a73      	lsrs	r3, r6, #9
   12348:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
   1234a:	d0b8      	beq.n	122be <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1234c:	4653      	mov	r3, sl
   1234e:	789b      	ldrb	r3, [r3, #2]
   12350:	465a      	mov	r2, fp
   12352:	18aa      	adds	r2, r5, r2
   12354:	429a      	cmp	r2, r3
   12356:	d901      	bls.n	1235c <f_read+0x148>
					cc = fp->fs->csize - csect;
   12358:	1b5b      	subs	r3, r3, r5
   1235a:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   1235c:	465b      	mov	r3, fp
   1235e:	466a      	mov	r2, sp
   12360:	71d3      	strb	r3, [r2, #7]
   12362:	79d3      	ldrb	r3, [r2, #7]
   12364:	4652      	mov	r2, sl
   12366:	7850      	ldrb	r0, [r2, #1]
   12368:	4642      	mov	r2, r8
   1236a:	0039      	movs	r1, r7
   1236c:	4d15      	ldr	r5, [pc, #84]	; (123c4 <f_read+0x1b0>)
   1236e:	47a8      	blx	r5
   12370:	2800      	cmp	r0, #0
   12372:	d194      	bne.n	1229e <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   12374:	6821      	ldr	r1, [r4, #0]
   12376:	790b      	ldrb	r3, [r1, #4]
   12378:	2b00      	cmp	r3, #0
   1237a:	d004      	beq.n	12386 <f_read+0x172>
   1237c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   1237e:	4642      	mov	r2, r8
   12380:	1a98      	subs	r0, r3, r2
   12382:	4583      	cmp	fp, r0
   12384:	d893      	bhi.n	122ae <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   12386:	465b      	mov	r3, fp
   12388:	025d      	lsls	r5, r3, #9
				continue;
   1238a:	e7b4      	b.n	122f6 <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
   1238c:	79a2      	ldrb	r2, [r4, #6]
   1238e:	2380      	movs	r3, #128	; 0x80
   12390:	425b      	negs	r3, r3
   12392:	4313      	orrs	r3, r2
   12394:	71a3      	strb	r3, [r4, #6]
   12396:	2301      	movs	r3, #1
   12398:	9300      	str	r3, [sp, #0]
   1239a:	e001      	b.n	123a0 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   1239c:	2302      	movs	r3, #2
   1239e:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
   123a0:	9800      	ldr	r0, [sp, #0]
   123a2:	b003      	add	sp, #12
   123a4:	bc3c      	pop	{r2, r3, r4, r5}
   123a6:	4690      	mov	r8, r2
   123a8:	4699      	mov	r9, r3
   123aa:	46a2      	mov	sl, r4
   123ac:	46ab      	mov	fp, r5
   123ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123b0:	00010ba1 	.word	0x00010ba1
   123b4:	000110c5 	.word	0x000110c5
   123b8:	00010b45 	.word	0x00010b45
   123bc:	00011025 	.word	0x00011025
   123c0:	00010b6b 	.word	0x00010b6b
   123c4:	00010981 	.word	0x00010981

000123c8 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   123c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   123ca:	46de      	mov	lr, fp
   123cc:	4657      	mov	r7, sl
   123ce:	464e      	mov	r6, r9
   123d0:	4645      	mov	r5, r8
   123d2:	b5e0      	push	{r5, r6, r7, lr}
   123d4:	b083      	sub	sp, #12
   123d6:	0004      	movs	r4, r0
   123d8:	000d      	movs	r5, r1
   123da:	0016      	movs	r6, r2
   123dc:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   123de:	2300      	movs	r3, #0
   123e0:	464a      	mov	r2, r9
   123e2:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   123e4:	8881      	ldrh	r1, [r0, #4]
   123e6:	6800      	ldr	r0, [r0, #0]
   123e8:	4b7f      	ldr	r3, [pc, #508]	; (125e8 <f_write+0x220>)
   123ea:	4798      	blx	r3
   123ec:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   123ee:	2800      	cmp	r0, #0
   123f0:	d000      	beq.n	123f4 <f_write+0x2c>
   123f2:	e0f1      	b.n	125d8 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   123f4:	79a3      	ldrb	r3, [r4, #6]
   123f6:	b25a      	sxtb	r2, r3
   123f8:	2a00      	cmp	r2, #0
   123fa:	da00      	bge.n	123fe <f_write+0x36>
   123fc:	e0ea      	b.n	125d4 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   123fe:	079b      	lsls	r3, r3, #30
   12400:	d402      	bmi.n	12408 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
   12402:	2307      	movs	r3, #7
   12404:	9300      	str	r3, [sp, #0]
   12406:	e0e7      	b.n	125d8 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   12408:	68e3      	ldr	r3, [r4, #12]
   1240a:	199a      	adds	r2, r3, r6
   1240c:	4293      	cmp	r3, r2
   1240e:	d810      	bhi.n	12432 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
   12410:	2e00      	cmp	r6, #0
   12412:	d00e      	beq.n	12432 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   12414:	002f      	movs	r7, r5
   12416:	e07b      	b.n	12510 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   12418:	2100      	movs	r1, #0
   1241a:	4b74      	ldr	r3, [pc, #464]	; (125ec <f_write+0x224>)
   1241c:	4798      	blx	r3
   1241e:	0003      	movs	r3, r0
   12420:	6120      	str	r0, [r4, #16]
   12422:	e003      	b.n	1242c <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   12424:	6961      	ldr	r1, [r4, #20]
   12426:	4b71      	ldr	r3, [pc, #452]	; (125ec <f_write+0x224>)
   12428:	4798      	blx	r3
   1242a:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1242c:	2b00      	cmp	r3, #0
   1242e:	d000      	beq.n	12432 <f_write+0x6a>
   12430:	e080      	b.n	12534 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   12432:	68a3      	ldr	r3, [r4, #8]
   12434:	68e2      	ldr	r2, [r4, #12]
   12436:	4293      	cmp	r3, r2
   12438:	d900      	bls.n	1243c <f_write+0x74>
   1243a:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   1243c:	79a3      	ldrb	r3, [r4, #6]
   1243e:	2220      	movs	r2, #32
   12440:	4313      	orrs	r3, r2
   12442:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
   12444:	e0c8      	b.n	125d8 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   12446:	79a2      	ldrb	r2, [r4, #6]
   12448:	3b81      	subs	r3, #129	; 0x81
   1244a:	4313      	orrs	r3, r2
   1244c:	71a3      	strb	r3, [r4, #6]
   1244e:	2302      	movs	r3, #2
   12450:	9300      	str	r3, [sp, #0]
   12452:	e0c1      	b.n	125d8 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   12454:	79a2      	ldrb	r2, [r4, #6]
   12456:	3b7f      	subs	r3, #127	; 0x7f
   12458:	4313      	orrs	r3, r2
   1245a:	71a3      	strb	r3, [r4, #6]
   1245c:	2301      	movs	r3, #1
   1245e:	9300      	str	r3, [sp, #0]
   12460:	e0ba      	b.n	125d8 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   12462:	2100      	movs	r1, #0
   12464:	4b62      	ldr	r3, [pc, #392]	; (125f0 <f_write+0x228>)
   12466:	4798      	blx	r3
   12468:	2800      	cmp	r0, #0
   1246a:	d06d      	beq.n	12548 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
   1246c:	79a2      	ldrb	r2, [r4, #6]
   1246e:	2380      	movs	r3, #128	; 0x80
   12470:	425b      	negs	r3, r3
   12472:	4313      	orrs	r3, r2
   12474:	71a3      	strb	r3, [r4, #6]
   12476:	2301      	movs	r3, #1
   12478:	9300      	str	r3, [sp, #0]
   1247a:	e0ad      	b.n	125d8 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1247c:	79a2      	ldrb	r2, [r4, #6]
   1247e:	2380      	movs	r3, #128	; 0x80
   12480:	425b      	negs	r3, r3
   12482:	4313      	orrs	r3, r2
   12484:	71a3      	strb	r3, [r4, #6]
   12486:	2302      	movs	r3, #2
   12488:	9300      	str	r3, [sp, #0]
   1248a:	e0a5      	b.n	125d8 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
   1248c:	79a2      	ldrb	r2, [r4, #6]
   1248e:	2380      	movs	r3, #128	; 0x80
   12490:	425b      	negs	r3, r3
   12492:	4313      	orrs	r3, r2
   12494:	71a3      	strb	r3, [r4, #6]
   12496:	2301      	movs	r3, #1
   12498:	9300      	str	r3, [sp, #0]
   1249a:	e09d      	b.n	125d8 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   1249c:	0240      	lsls	r0, r0, #9
   1249e:	1839      	adds	r1, r7, r0
   124a0:	3330      	adds	r3, #48	; 0x30
   124a2:	0018      	movs	r0, r3
   124a4:	2280      	movs	r2, #128	; 0x80
   124a6:	0092      	lsls	r2, r2, #2
   124a8:	4b52      	ldr	r3, [pc, #328]	; (125f4 <f_write+0x22c>)
   124aa:	4798      	blx	r3
					fp->fs->wflag = 0;
   124ac:	2300      	movs	r3, #0
   124ae:	6822      	ldr	r2, [r4, #0]
   124b0:	7113      	strb	r3, [r2, #4]
   124b2:	e072      	b.n	1259a <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   124b4:	68a3      	ldr	r3, [r4, #8]
   124b6:	68e2      	ldr	r2, [r4, #12]
   124b8:	4293      	cmp	r3, r2
   124ba:	d271      	bcs.n	125a0 <f_write+0x1d8>
			fp->dsect = sect;
   124bc:	4643      	mov	r3, r8
   124be:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   124c0:	68a3      	ldr	r3, [r4, #8]
   124c2:	05dd      	lsls	r5, r3, #23
   124c4:	0ded      	lsrs	r5, r5, #23
   124c6:	2380      	movs	r3, #128	; 0x80
   124c8:	009b      	lsls	r3, r3, #2
   124ca:	1b5d      	subs	r5, r3, r5
   124cc:	42b5      	cmp	r5, r6
   124ce:	d900      	bls.n	124d2 <f_write+0x10a>
   124d0:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   124d2:	69a1      	ldr	r1, [r4, #24]
   124d4:	6820      	ldr	r0, [r4, #0]
   124d6:	4b46      	ldr	r3, [pc, #280]	; (125f0 <f_write+0x228>)
   124d8:	4798      	blx	r3
   124da:	2800      	cmp	r0, #0
   124dc:	d172      	bne.n	125c4 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   124de:	68a3      	ldr	r3, [r4, #8]
   124e0:	05d8      	lsls	r0, r3, #23
   124e2:	0dc0      	lsrs	r0, r0, #23
   124e4:	3030      	adds	r0, #48	; 0x30
   124e6:	6823      	ldr	r3, [r4, #0]
   124e8:	469c      	mov	ip, r3
   124ea:	4460      	add	r0, ip
   124ec:	002a      	movs	r2, r5
   124ee:	0039      	movs	r1, r7
   124f0:	4b40      	ldr	r3, [pc, #256]	; (125f4 <f_write+0x22c>)
   124f2:	4798      	blx	r3
		fp->fs->wflag = 1;
   124f4:	2301      	movs	r3, #1
   124f6:	6822      	ldr	r2, [r4, #0]
   124f8:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   124fa:	197f      	adds	r7, r7, r5
   124fc:	68a3      	ldr	r3, [r4, #8]
   124fe:	195b      	adds	r3, r3, r5
   12500:	60a3      	str	r3, [r4, #8]
   12502:	464b      	mov	r3, r9
   12504:	681b      	ldr	r3, [r3, #0]
   12506:	195b      	adds	r3, r3, r5
   12508:	464a      	mov	r2, r9
   1250a:	6013      	str	r3, [r2, #0]
   1250c:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
   1250e:	d090      	beq.n	12432 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   12510:	68a3      	ldr	r3, [r4, #8]
   12512:	05da      	lsls	r2, r3, #23
   12514:	d1d4      	bne.n	124c0 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   12516:	6820      	ldr	r0, [r4, #0]
   12518:	7882      	ldrb	r2, [r0, #2]
   1251a:	3a01      	subs	r2, #1
   1251c:	0a5d      	lsrs	r5, r3, #9
   1251e:	4015      	ands	r5, r2
   12520:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
   12522:	2d00      	cmp	r5, #0
   12524:	d10b      	bne.n	1253e <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
   12526:	2b00      	cmp	r3, #0
   12528:	d000      	beq.n	1252c <f_write+0x164>
   1252a:	e77b      	b.n	12424 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
   1252c:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
   1252e:	2b00      	cmp	r3, #0
   12530:	d100      	bne.n	12534 <f_write+0x16c>
   12532:	e771      	b.n	12418 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   12534:	2b01      	cmp	r3, #1
   12536:	d086      	beq.n	12446 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   12538:	1c5a      	adds	r2, r3, #1
   1253a:	d08b      	beq.n	12454 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
   1253c:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   1253e:	6820      	ldr	r0, [r4, #0]
   12540:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   12542:	69a2      	ldr	r2, [r4, #24]
   12544:	4293      	cmp	r3, r2
   12546:	d08c      	beq.n	12462 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   12548:	6823      	ldr	r3, [r4, #0]
   1254a:	469a      	mov	sl, r3
   1254c:	6961      	ldr	r1, [r4, #20]
   1254e:	0018      	movs	r0, r3
   12550:	4b29      	ldr	r3, [pc, #164]	; (125f8 <f_write+0x230>)
   12552:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   12554:	2800      	cmp	r0, #0
   12556:	d091      	beq.n	1247c <f_write+0xb4>
			sect += csect;
   12558:	4680      	mov	r8, r0
   1255a:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   1255c:	0a73      	lsrs	r3, r6, #9
   1255e:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
   12560:	d0a8      	beq.n	124b4 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   12562:	4653      	mov	r3, sl
   12564:	789b      	ldrb	r3, [r3, #2]
   12566:	465a      	mov	r2, fp
   12568:	18aa      	adds	r2, r5, r2
   1256a:	429a      	cmp	r2, r3
   1256c:	d901      	bls.n	12572 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
   1256e:	1b5b      	subs	r3, r3, r5
   12570:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   12572:	465b      	mov	r3, fp
   12574:	466a      	mov	r2, sp
   12576:	71d3      	strb	r3, [r2, #7]
   12578:	79d3      	ldrb	r3, [r2, #7]
   1257a:	4652      	mov	r2, sl
   1257c:	7850      	ldrb	r0, [r2, #1]
   1257e:	4642      	mov	r2, r8
   12580:	0039      	movs	r1, r7
   12582:	4d1e      	ldr	r5, [pc, #120]	; (125fc <f_write+0x234>)
   12584:	47a8      	blx	r5
   12586:	2800      	cmp	r0, #0
   12588:	d000      	beq.n	1258c <f_write+0x1c4>
   1258a:	e77f      	b.n	1248c <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   1258c:	6823      	ldr	r3, [r4, #0]
   1258e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12590:	4641      	mov	r1, r8
   12592:	1a50      	subs	r0, r2, r1
   12594:	4583      	cmp	fp, r0
   12596:	d900      	bls.n	1259a <f_write+0x1d2>
   12598:	e780      	b.n	1249c <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   1259a:	465b      	mov	r3, fp
   1259c:	025d      	lsls	r5, r3, #9
				continue;
   1259e:	e7ac      	b.n	124fa <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   125a0:	2100      	movs	r1, #0
   125a2:	4650      	mov	r0, sl
   125a4:	4b12      	ldr	r3, [pc, #72]	; (125f0 <f_write+0x228>)
   125a6:	4798      	blx	r3
   125a8:	2800      	cmp	r0, #0
   125aa:	d103      	bne.n	125b4 <f_write+0x1ec>
				fp->fs->winsect = sect;
   125ac:	6823      	ldr	r3, [r4, #0]
   125ae:	4642      	mov	r2, r8
   125b0:	62da      	str	r2, [r3, #44]	; 0x2c
   125b2:	e783      	b.n	124bc <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   125b4:	79a2      	ldrb	r2, [r4, #6]
   125b6:	2380      	movs	r3, #128	; 0x80
   125b8:	425b      	negs	r3, r3
   125ba:	4313      	orrs	r3, r2
   125bc:	71a3      	strb	r3, [r4, #6]
   125be:	2301      	movs	r3, #1
   125c0:	9300      	str	r3, [sp, #0]
   125c2:	e009      	b.n	125d8 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
   125c4:	79a2      	ldrb	r2, [r4, #6]
   125c6:	2380      	movs	r3, #128	; 0x80
   125c8:	425b      	negs	r3, r3
   125ca:	4313      	orrs	r3, r2
   125cc:	71a3      	strb	r3, [r4, #6]
   125ce:	2301      	movs	r3, #1
   125d0:	9300      	str	r3, [sp, #0]
   125d2:	e001      	b.n	125d8 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   125d4:	2302      	movs	r3, #2
   125d6:	9300      	str	r3, [sp, #0]
}
   125d8:	9800      	ldr	r0, [sp, #0]
   125da:	b003      	add	sp, #12
   125dc:	bc3c      	pop	{r2, r3, r4, r5}
   125de:	4690      	mov	r8, r2
   125e0:	4699      	mov	r9, r3
   125e2:	46a2      	mov	sl, r4
   125e4:	46ab      	mov	fp, r5
   125e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125e8:	00010ba1 	.word	0x00010ba1
   125ec:	000113a1 	.word	0x000113a1
   125f0:	00011025 	.word	0x00011025
   125f4:	00010b45 	.word	0x00010b45
   125f8:	00010b6b 	.word	0x00010b6b
   125fc:	00010a05 	.word	0x00010a05

00012600 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   12600:	b570      	push	{r4, r5, r6, lr}
   12602:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   12604:	8881      	ldrh	r1, [r0, #4]
   12606:	6800      	ldr	r0, [r0, #0]
   12608:	4b1c      	ldr	r3, [pc, #112]	; (1267c <f_sync+0x7c>)
   1260a:	4798      	blx	r3
	if (res == FR_OK) {
   1260c:	2800      	cmp	r0, #0
   1260e:	d102      	bne.n	12616 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   12610:	79a3      	ldrb	r3, [r4, #6]
   12612:	069b      	lsls	r3, r3, #26
   12614:	d400      	bmi.n	12618 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   12616:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
   12618:	69e1      	ldr	r1, [r4, #28]
   1261a:	6820      	ldr	r0, [r4, #0]
   1261c:	4b18      	ldr	r3, [pc, #96]	; (12680 <f_sync+0x80>)
   1261e:	4798      	blx	r3
			if (res == FR_OK) {
   12620:	2800      	cmp	r0, #0
   12622:	d1f8      	bne.n	12616 <f_sync+0x16>
				dir = fp->dir_ptr;
   12624:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   12626:	7aeb      	ldrb	r3, [r5, #11]
   12628:	2220      	movs	r2, #32
   1262a:	4313      	orrs	r3, r2
   1262c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1262e:	7b23      	ldrb	r3, [r4, #12]
   12630:	772b      	strb	r3, [r5, #28]
   12632:	89a3      	ldrh	r3, [r4, #12]
   12634:	0a1b      	lsrs	r3, r3, #8
   12636:	776b      	strb	r3, [r5, #29]
   12638:	89e3      	ldrh	r3, [r4, #14]
   1263a:	77ab      	strb	r3, [r5, #30]
   1263c:	7be3      	ldrb	r3, [r4, #15]
   1263e:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   12640:	7c23      	ldrb	r3, [r4, #16]
   12642:	76ab      	strb	r3, [r5, #26]
   12644:	8a23      	ldrh	r3, [r4, #16]
   12646:	0a1b      	lsrs	r3, r3, #8
   12648:	76eb      	strb	r3, [r5, #27]
   1264a:	8a63      	ldrh	r3, [r4, #18]
   1264c:	752b      	strb	r3, [r5, #20]
   1264e:	8a63      	ldrh	r3, [r4, #18]
   12650:	0a1b      	lsrs	r3, r3, #8
   12652:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
   12654:	4b0b      	ldr	r3, [pc, #44]	; (12684 <f_sync+0x84>)
   12656:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
   12658:	75a8      	strb	r0, [r5, #22]
   1265a:	0a03      	lsrs	r3, r0, #8
   1265c:	75eb      	strb	r3, [r5, #23]
   1265e:	0c03      	lsrs	r3, r0, #16
   12660:	762b      	strb	r3, [r5, #24]
   12662:	0e00      	lsrs	r0, r0, #24
   12664:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
   12666:	79a3      	ldrb	r3, [r4, #6]
   12668:	2220      	movs	r2, #32
   1266a:	4393      	bics	r3, r2
   1266c:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
   1266e:	2301      	movs	r3, #1
   12670:	6822      	ldr	r2, [r4, #0]
   12672:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
   12674:	6820      	ldr	r0, [r4, #0]
   12676:	4b04      	ldr	r3, [pc, #16]	; (12688 <f_sync+0x88>)
   12678:	4798      	blx	r3
   1267a:	e7cc      	b.n	12616 <f_sync+0x16>
   1267c:	00010ba1 	.word	0x00010ba1
   12680:	00011025 	.word	0x00011025
   12684:	00010af5 	.word	0x00010af5
   12688:	00011c25 	.word	0x00011c25

0001268c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   1268c:	b510      	push	{r4, lr}
   1268e:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   12690:	4b03      	ldr	r3, [pc, #12]	; (126a0 <f_close+0x14>)
   12692:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   12694:	2800      	cmp	r0, #0
   12696:	d101      	bne.n	1269c <f_close+0x10>
   12698:	2300      	movs	r3, #0
   1269a:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
   1269c:	bd10      	pop	{r4, pc}
   1269e:	46c0      	nop			; (mov r8, r8)
   126a0:	00012601 	.word	0x00012601

000126a4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
   126a4:	b510      	push	{r4, lr}
   126a6:	4c2c      	ldr	r4, [pc, #176]	; (12758 <f_unlink+0xb4>)
   126a8:	44a5      	add	sp, r4
   126aa:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   126ac:	2201      	movs	r2, #1
   126ae:	a98f      	add	r1, sp, #572	; 0x23c
   126b0:	a801      	add	r0, sp, #4
   126b2:	4b2a      	ldr	r3, [pc, #168]	; (1275c <f_unlink+0xb8>)
   126b4:	4798      	blx	r3
	if (res == FR_OK) {
   126b6:	2800      	cmp	r0, #0
   126b8:	d003      	beq.n	126c2 <f_unlink+0x1e>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
   126ba:	2398      	movs	r3, #152	; 0x98
   126bc:	009b      	lsls	r3, r3, #2
   126be:	449d      	add	sp, r3
   126c0:	bd10      	pop	{r4, pc}
		INIT_BUF(dj);
   126c2:	ab83      	add	r3, sp, #524	; 0x20c
   126c4:	9395      	str	r3, [sp, #596]	; 0x254
   126c6:	ab03      	add	r3, sp, #12
   126c8:	9396      	str	r3, [sp, #600]	; 0x258
		res = follow_path(&dj, path);		/* Follow the file path */
   126ca:	9901      	ldr	r1, [sp, #4]
   126cc:	a88f      	add	r0, sp, #572	; 0x23c
   126ce:	4b24      	ldr	r3, [pc, #144]	; (12760 <f_unlink+0xbc>)
   126d0:	4798      	blx	r3
		if (res == FR_OK) {					/* The object is accessible */
   126d2:	2800      	cmp	r0, #0
   126d4:	d1f1      	bne.n	126ba <f_unlink+0x16>
			dir = dj.dir;
   126d6:	9b94      	ldr	r3, [sp, #592]	; 0x250
			if (!dir) {
   126d8:	2b00      	cmp	r3, #0
   126da:	d039      	beq.n	12750 <f_unlink+0xac>
				if (dir[DIR_Attr] & AM_RDO)
   126dc:	7ada      	ldrb	r2, [r3, #11]
					res = FR_DENIED;		/* Cannot remove R/O object */
   126de:	3007      	adds	r0, #7
				if (dir[DIR_Attr] & AM_RDO)
   126e0:	07d2      	lsls	r2, r2, #31
   126e2:	d4ea      	bmi.n	126ba <f_unlink+0x16>
			dclst = LD_CLUST(dir);
   126e4:	7d5a      	ldrb	r2, [r3, #21]
   126e6:	0212      	lsls	r2, r2, #8
   126e8:	7d1c      	ldrb	r4, [r3, #20]
   126ea:	4314      	orrs	r4, r2
   126ec:	0424      	lsls	r4, r4, #16
   126ee:	7ed9      	ldrb	r1, [r3, #27]
   126f0:	0209      	lsls	r1, r1, #8
   126f2:	7e9a      	ldrb	r2, [r3, #26]
   126f4:	430a      	orrs	r2, r1
   126f6:	4314      	orrs	r4, r2
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   126f8:	7adb      	ldrb	r3, [r3, #11]
   126fa:	06db      	lsls	r3, r3, #27
   126fc:	d40a      	bmi.n	12714 <f_unlink+0x70>
				res = dir_remove(&dj);		/* Remove the directory entry */
   126fe:	a88f      	add	r0, sp, #572	; 0x23c
   12700:	4b18      	ldr	r3, [pc, #96]	; (12764 <f_unlink+0xc0>)
   12702:	4798      	blx	r3
				if (res == FR_OK) {
   12704:	2800      	cmp	r0, #0
   12706:	d1d8      	bne.n	126ba <f_unlink+0x16>
					if (dclst)				/* Remove the cluster chain if exist */
   12708:	2c00      	cmp	r4, #0
   1270a:	d11a      	bne.n	12742 <f_unlink+0x9e>
					if (res == FR_OK) res = sync(dj.fs);
   1270c:	988f      	ldr	r0, [sp, #572]	; 0x23c
   1270e:	4b16      	ldr	r3, [pc, #88]	; (12768 <f_unlink+0xc4>)
   12710:	4798      	blx	r3
   12712:	e7d2      	b.n	126ba <f_unlink+0x16>
					res = FR_INT_ERR;
   12714:	2002      	movs	r0, #2
				if (dclst < 2) {
   12716:	2c01      	cmp	r4, #1
   12718:	d9cf      	bls.n	126ba <f_unlink+0x16>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   1271a:	2224      	movs	r2, #36	; 0x24
   1271c:	a98f      	add	r1, sp, #572	; 0x23c
   1271e:	a886      	add	r0, sp, #536	; 0x218
   12720:	4b12      	ldr	r3, [pc, #72]	; (1276c <f_unlink+0xc8>)
   12722:	4798      	blx	r3
					sdj.sclust = dclst;
   12724:	9488      	str	r4, [sp, #544]	; 0x220
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
   12726:	2102      	movs	r1, #2
   12728:	a886      	add	r0, sp, #536	; 0x218
   1272a:	4b11      	ldr	r3, [pc, #68]	; (12770 <f_unlink+0xcc>)
   1272c:	4798      	blx	r3
					if (res == FR_OK) {
   1272e:	2800      	cmp	r0, #0
   12730:	d1c3      	bne.n	126ba <f_unlink+0x16>
						res = dir_read(&sdj);
   12732:	a886      	add	r0, sp, #536	; 0x218
   12734:	4b0f      	ldr	r3, [pc, #60]	; (12774 <f_unlink+0xd0>)
   12736:	4798      	blx	r3
						if (res == FR_OK			/* Not empty dir */
   12738:	2800      	cmp	r0, #0
   1273a:	d00b      	beq.n	12754 <f_unlink+0xb0>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
   1273c:	2804      	cmp	r0, #4
   1273e:	d0de      	beq.n	126fe <f_unlink+0x5a>
   12740:	e7bb      	b.n	126ba <f_unlink+0x16>
						res = remove_chain(dj.fs, dclst);
   12742:	0021      	movs	r1, r4
   12744:	988f      	ldr	r0, [sp, #572]	; 0x23c
   12746:	4b0c      	ldr	r3, [pc, #48]	; (12778 <f_unlink+0xd4>)
   12748:	4798      	blx	r3
					if (res == FR_OK) res = sync(dj.fs);
   1274a:	2800      	cmp	r0, #0
   1274c:	d1b5      	bne.n	126ba <f_unlink+0x16>
   1274e:	e7dd      	b.n	1270c <f_unlink+0x68>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
   12750:	2006      	movs	r0, #6
   12752:	e7b2      	b.n	126ba <f_unlink+0x16>
						) res = FR_DENIED;
   12754:	2007      	movs	r0, #7
	LEAVE_FF(dj.fs, res);
   12756:	e7b0      	b.n	126ba <f_unlink+0x16>
   12758:	fffffda0 	.word	0xfffffda0
   1275c:	00010c75 	.word	0x00010c75
   12760:	00011d19 	.word	0x00011d19
   12764:	00011bbd 	.word	0x00011bbd
   12768:	00011c25 	.word	0x00011c25
   1276c:	00010b45 	.word	0x00010b45
   12770:	000111c1 	.word	0x000111c1
   12774:	00011a7d 	.word	0x00011a7d
   12778:	00011465 	.word	0x00011465

0001277c <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
   1277c:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
   1277e:	287f      	cmp	r0, #127	; 0x7f
   12780:	d911      	bls.n	127a6 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   12782:	2900      	cmp	r1, #0
   12784:	d111      	bne.n	127aa <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
   12786:	28c7      	cmp	r0, #199	; 0xc7
   12788:	d017      	beq.n	127ba <ff_convert+0x3e>
   1278a:	4a0d      	ldr	r2, [pc, #52]	; (127c0 <ff_convert+0x44>)
   1278c:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
   1278e:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
   12790:	8811      	ldrh	r1, [r2, #0]
   12792:	4281      	cmp	r1, r0
   12794:	d004      	beq.n	127a0 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
   12796:	3301      	adds	r3, #1
   12798:	b29b      	uxth	r3, r3
   1279a:	3202      	adds	r2, #2
   1279c:	2b80      	cmp	r3, #128	; 0x80
   1279e:	d1f7      	bne.n	12790 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
   127a0:	3380      	adds	r3, #128	; 0x80
   127a2:	20ff      	movs	r0, #255	; 0xff
   127a4:	4003      	ands	r3, r0
		}
	}

	return c;
}
   127a6:	0018      	movs	r0, r3
   127a8:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   127aa:	2300      	movs	r3, #0
   127ac:	28ff      	cmp	r0, #255	; 0xff
   127ae:	d8fa      	bhi.n	127a6 <ff_convert+0x2a>
   127b0:	3880      	subs	r0, #128	; 0x80
   127b2:	0040      	lsls	r0, r0, #1
   127b4:	4b02      	ldr	r3, [pc, #8]	; (127c0 <ff_convert+0x44>)
   127b6:	5ac3      	ldrh	r3, [r0, r3]
   127b8:	e7f5      	b.n	127a6 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
   127ba:	2300      	movs	r3, #0
   127bc:	e7f0      	b.n	127a0 <ff_convert+0x24>
   127be:	46c0      	nop			; (mov r8, r8)
   127c0:	000199d0 	.word	0x000199d0

000127c4 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   127c4:	2861      	cmp	r0, #97	; 0x61
   127c6:	d014      	beq.n	127f2 <ff_wtoupper+0x2e>
   127c8:	4b0b      	ldr	r3, [pc, #44]	; (127f8 <ff_wtoupper+0x34>)
   127ca:	3304      	adds	r3, #4
   127cc:	2101      	movs	r1, #1
   127ce:	2262      	movs	r2, #98	; 0x62
   127d0:	4290      	cmp	r0, r2
   127d2:	d007      	beq.n	127e4 <ff_wtoupper+0x20>
   127d4:	3101      	adds	r1, #1
   127d6:	3302      	adds	r3, #2
   127d8:	1e9a      	subs	r2, r3, #2
   127da:	8812      	ldrh	r2, [r2, #0]
   127dc:	2a00      	cmp	r2, #0
   127de:	d1f7      	bne.n	127d0 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   127e0:	0003      	movs	r3, r0
   127e2:	e004      	b.n	127ee <ff_wtoupper+0x2a>
   127e4:	1e03      	subs	r3, r0, #0
   127e6:	d002      	beq.n	127ee <ff_wtoupper+0x2a>
   127e8:	0049      	lsls	r1, r1, #1
   127ea:	4b04      	ldr	r3, [pc, #16]	; (127fc <ff_wtoupper+0x38>)
   127ec:	5acb      	ldrh	r3, [r1, r3]
}
   127ee:	0018      	movs	r0, r3
   127f0:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   127f2:	2100      	movs	r1, #0
   127f4:	e7f8      	b.n	127e8 <ff_wtoupper+0x24>
   127f6:	46c0      	nop			; (mov r8, r8)
   127f8:	00019ad0 	.word	0x00019ad0
   127fc:	00019cb0 	.word	0x00019cb0

00012800 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   12800:	b5f0      	push	{r4, r5, r6, r7, lr}
   12802:	46de      	mov	lr, fp
   12804:	4657      	mov	r7, sl
   12806:	464e      	mov	r6, r9
   12808:	4645      	mov	r5, r8
   1280a:	b5e0      	push	{r5, r6, r7, lr}
   1280c:	b083      	sub	sp, #12
   1280e:	0007      	movs	r7, r0
   12810:	4688      	mov	r8, r1
   12812:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
   12814:	2400      	movs	r4, #0
   12816:	2900      	cmp	r1, #0
   12818:	dd18      	ble.n	1284c <sendPacket+0x4c>
   1281a:	4b15      	ldr	r3, [pc, #84]	; (12870 <sendPacket+0x70>)
   1281c:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1281e:	4b15      	ldr	r3, [pc, #84]	; (12874 <sendPacket+0x74>)
   12820:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
   12822:	9801      	ldr	r0, [sp, #4]
   12824:	47d0      	blx	sl
   12826:	2800      	cmp	r0, #0
   12828:	d110      	bne.n	1284c <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   1282a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   1282c:	68f3      	ldr	r3, [r6, #12]
   1282e:	4699      	mov	r9, r3
   12830:	693b      	ldr	r3, [r7, #16]
   12832:	191d      	adds	r5, r3, r4
   12834:	9801      	ldr	r0, [sp, #4]
   12836:	47d8      	blx	fp
   12838:	0003      	movs	r3, r0
   1283a:	4642      	mov	r2, r8
   1283c:	0029      	movs	r1, r5
   1283e:	0030      	movs	r0, r6
   12840:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
   12842:	2800      	cmp	r0, #0
   12844:	db02      	blt.n	1284c <sendPacket+0x4c>
            break;
        sent += rc;
   12846:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
   12848:	45a0      	cmp	r8, r4
   1284a:	dcea      	bgt.n	12822 <sendPacket+0x22>
    }
    if (sent == length)
   1284c:	45a0      	cmp	r8, r4
   1284e:	d10c      	bne.n	1286a <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   12850:	69b9      	ldr	r1, [r7, #24]
   12852:	0038      	movs	r0, r7
   12854:	3054      	adds	r0, #84	; 0x54
   12856:	4b08      	ldr	r3, [pc, #32]	; (12878 <sendPacket+0x78>)
   12858:	4798      	blx	r3
        rc = SUCCESS;
   1285a:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
   1285c:	b003      	add	sp, #12
   1285e:	bc3c      	pop	{r2, r3, r4, r5}
   12860:	4690      	mov	r8, r2
   12862:	4699      	mov	r9, r3
   12864:	46a2      	mov	sl, r4
   12866:	46ab      	mov	fp, r5
   12868:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
   1286a:	2001      	movs	r0, #1
   1286c:	4240      	negs	r0, r0
    return rc;
   1286e:	e7f5      	b.n	1285c <sendPacket+0x5c>
   12870:	0001317d 	.word	0x0001317d
   12874:	000131b1 	.word	0x000131b1
   12878:	0001319d 	.word	0x0001319d

0001287c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   1287c:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
   1287e:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
   12880:	2100      	movs	r1, #0
   12882:	6241      	str	r1, [r0, #36]	; 0x24
   12884:	62c1      	str	r1, [r0, #44]	; 0x2c
   12886:	6341      	str	r1, [r0, #52]	; 0x34
   12888:	63c1      	str	r1, [r0, #60]	; 0x3c
   1288a:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
   1288c:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
   1288e:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
   12890:	9b02      	ldr	r3, [sp, #8]
   12892:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
   12894:	9b03      	ldr	r3, [sp, #12]
   12896:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
   12898:	9b04      	ldr	r3, [sp, #16]
   1289a:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
   1289c:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
   1289e:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
   128a0:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
   128a2:	2301      	movs	r3, #1
   128a4:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
   128a6:	3054      	adds	r0, #84	; 0x54
   128a8:	4b01      	ldr	r3, [pc, #4]	; (128b0 <MQTTClientInit+0x34>)
   128aa:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   128ac:	bd10      	pop	{r4, pc}
   128ae:	46c0      	nop			; (mov r8, r8)
   128b0:	000131c5 	.word	0x000131c5

000128b4 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   128b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   128b6:	46de      	mov	lr, fp
   128b8:	4657      	mov	r7, sl
   128ba:	464e      	mov	r6, r9
   128bc:	4645      	mov	r5, r8
   128be:	b5e0      	push	{r5, r6, r7, lr}
   128c0:	b085      	sub	sp, #20
   128c2:	4682      	mov	sl, r0
   128c4:	000f      	movs	r7, r1
   128c6:	4691      	mov	r9, r2
   128c8:	0004      	movs	r4, r0
   128ca:	3424      	adds	r4, #36	; 0x24
   128cc:	234c      	movs	r3, #76	; 0x4c
   128ce:	4453      	add	r3, sl
   128d0:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
   128d2:	2301      	movs	r3, #1
   128d4:	425b      	negs	r3, r3
   128d6:	9301      	str	r3, [sp, #4]
   128d8:	e056      	b.n	12988 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   128da:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
   128dc:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
   128de:	687a      	ldr	r2, [r7, #4]
   128e0:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
   128e2:	780a      	ldrb	r2, [r1, #0]
   128e4:	2a00      	cmp	r2, #0
   128e6:	d04a      	beq.n	1297e <deliverMessage+0xca>
   128e8:	42b3      	cmp	r3, r6
   128ea:	d24a      	bcs.n	12982 <deliverMessage+0xce>
   128ec:	3101      	adds	r1, #1
   128ee:	1e70      	subs	r0, r6, #1
   128f0:	e008      	b.n	12904 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
   128f2:	2a2f      	cmp	r2, #47	; 0x2f
   128f4:	d10f      	bne.n	12916 <deliverMessage+0x62>
        curn++;
   128f6:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   128f8:	780a      	ldrb	r2, [r1, #0]
   128fa:	2a00      	cmp	r2, #0
   128fc:	d03f      	beq.n	1297e <deliverMessage+0xca>
   128fe:	429e      	cmp	r6, r3
   12900:	d93f      	bls.n	12982 <deliverMessage+0xce>
   12902:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
   12904:	781d      	ldrb	r5, [r3, #0]
   12906:	2d2f      	cmp	r5, #47	; 0x2f
   12908:	d0f3      	beq.n	128f2 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   1290a:	2a2b      	cmp	r2, #43	; 0x2b
   1290c:	d008      	beq.n	12920 <deliverMessage+0x6c>
   1290e:	2a23      	cmp	r2, #35	; 0x23
   12910:	d013      	beq.n	1293a <deliverMessage+0x86>
   12912:	4295      	cmp	r5, r2
   12914:	d0ef      	beq.n	128f6 <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
   12916:	429e      	cmp	r6, r3
   12918:	d133      	bne.n	12982 <deliverMessage+0xce>
   1291a:	2a00      	cmp	r2, #0
   1291c:	d03d      	beq.n	1299a <deliverMessage+0xe6>
   1291e:	e030      	b.n	12982 <deliverMessage+0xce>
            char* nextpos = curn + 1;
   12920:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   12922:	42ae      	cmp	r6, r5
   12924:	d927      	bls.n	12976 <deliverMessage+0xc2>
   12926:	785a      	ldrb	r2, [r3, #1]
   12928:	2a2f      	cmp	r2, #47	; 0x2f
   1292a:	d01f      	beq.n	1296c <deliverMessage+0xb8>
                nextpos = ++curn + 1;
   1292c:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
   1292e:	4283      	cmp	r3, r0
   12930:	d0e1      	beq.n	128f6 <deliverMessage+0x42>
   12932:	785a      	ldrb	r2, [r3, #1]
   12934:	2a2f      	cmp	r2, #47	; 0x2f
   12936:	d1f9      	bne.n	1292c <deliverMessage+0x78>
   12938:	e7dd      	b.n	128f6 <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
   1293a:	1e73      	subs	r3, r6, #1
   1293c:	e7db      	b.n	128f6 <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   1293e:	9b01      	ldr	r3, [sp, #4]
   12940:	3301      	adds	r3, #1
   12942:	d007      	beq.n	12954 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
   12944:	9801      	ldr	r0, [sp, #4]
   12946:	b005      	add	sp, #20
   12948:	bc3c      	pop	{r2, r3, r4, r5}
   1294a:	4690      	mov	r8, r2
   1294c:	4699      	mov	r9, r3
   1294e:	46a2      	mov	sl, r4
   12950:	46ab      	mov	fp, r5
   12952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   12954:	4653      	mov	r3, sl
   12956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12958:	2b00      	cmp	r3, #0
   1295a:	d0f3      	beq.n	12944 <deliverMessage+0x90>
    md->topicName = aTopicName;
   1295c:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   1295e:	464a      	mov	r2, r9
   12960:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
   12962:	a802      	add	r0, sp, #8
   12964:	4798      	blx	r3
        rc = SUCCESS;
   12966:	2300      	movs	r3, #0
   12968:	9301      	str	r3, [sp, #4]
    return rc;
   1296a:	e7eb      	b.n	12944 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
   1296c:	780a      	ldrb	r2, [r1, #0]
   1296e:	2a00      	cmp	r2, #0
   12970:	d007      	beq.n	12982 <deliverMessage+0xce>
        curn++;
   12972:	002b      	movs	r3, r5
   12974:	e7c5      	b.n	12902 <deliverMessage+0x4e>
   12976:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
   12978:	780a      	ldrb	r2, [r1, #0]
   1297a:	2a00      	cmp	r2, #0
   1297c:	d101      	bne.n	12982 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
   1297e:	429e      	cmp	r6, r3
   12980:	d00b      	beq.n	1299a <deliverMessage+0xe6>
   12982:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12984:	4544      	cmp	r4, r8
   12986:	d0da      	beq.n	1293e <deliverMessage+0x8a>
   12988:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   1298a:	6821      	ldr	r1, [r4, #0]
   1298c:	2900      	cmp	r1, #0
   1298e:	d0f8      	beq.n	12982 <deliverMessage+0xce>
   12990:	0038      	movs	r0, r7
   12992:	4b08      	ldr	r3, [pc, #32]	; (129b4 <deliverMessage+0x100>)
   12994:	4798      	blx	r3
   12996:	2800      	cmp	r0, #0
   12998:	d09f      	beq.n	128da <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
   1299a:	465b      	mov	r3, fp
   1299c:	685b      	ldr	r3, [r3, #4]
   1299e:	2b00      	cmp	r3, #0
   129a0:	d0ef      	beq.n	12982 <deliverMessage+0xce>
    md->topicName = aTopicName;
   129a2:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
   129a4:	464a      	mov	r2, r9
   129a6:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
   129a8:	a802      	add	r0, sp, #8
   129aa:	4798      	blx	r3
                rc = SUCCESS;
   129ac:	2300      	movs	r3, #0
   129ae:	9301      	str	r3, [sp, #4]
   129b0:	e7e7      	b.n	12982 <deliverMessage+0xce>
   129b2:	46c0      	nop			; (mov r8, r8)
   129b4:	00013a99 	.word	0x00013a99

000129b8 <keepalive>:


int keepalive(MQTTClient* c)
{
   129b8:	b510      	push	{r4, lr}
   129ba:	b082      	sub	sp, #8
   129bc:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
   129be:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
   129c0:	69a3      	ldr	r3, [r4, #24]
   129c2:	2b00      	cmp	r3, #0
   129c4:	d101      	bne.n	129ca <keepalive+0x12>
        }
    }

exit:
    return rc;
}
   129c6:	b002      	add	sp, #8
   129c8:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
   129ca:	0020      	movs	r0, r4
   129cc:	3054      	adds	r0, #84	; 0x54
   129ce:	4b14      	ldr	r3, [pc, #80]	; (12a20 <keepalive+0x68>)
   129d0:	4798      	blx	r3
   129d2:	2800      	cmp	r0, #0
   129d4:	d01d      	beq.n	12a12 <keepalive+0x5a>
        if (!c->ping_outstanding)
   129d6:	7f23      	ldrb	r3, [r4, #28]
   129d8:	2b00      	cmp	r3, #0
   129da:	d11d      	bne.n	12a18 <keepalive+0x60>
            TimerInit(&timer);
   129dc:	4668      	mov	r0, sp
   129de:	4b11      	ldr	r3, [pc, #68]	; (12a24 <keepalive+0x6c>)
   129e0:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   129e2:	21fa      	movs	r1, #250	; 0xfa
   129e4:	0089      	lsls	r1, r1, #2
   129e6:	4668      	mov	r0, sp
   129e8:	4b0f      	ldr	r3, [pc, #60]	; (12a28 <keepalive+0x70>)
   129ea:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   129ec:	68a1      	ldr	r1, [r4, #8]
   129ee:	6920      	ldr	r0, [r4, #16]
   129f0:	4b0e      	ldr	r3, [pc, #56]	; (12a2c <keepalive+0x74>)
   129f2:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   129f4:	2800      	cmp	r0, #0
   129f6:	dd09      	ble.n	12a0c <keepalive+0x54>
   129f8:	466a      	mov	r2, sp
   129fa:	0001      	movs	r1, r0
   129fc:	0020      	movs	r0, r4
   129fe:	4b0c      	ldr	r3, [pc, #48]	; (12a30 <keepalive+0x78>)
   12a00:	4798      	blx	r3
   12a02:	2800      	cmp	r0, #0
   12a04:	d1df      	bne.n	129c6 <keepalive+0xe>
                c->ping_outstanding = 1;
   12a06:	2301      	movs	r3, #1
   12a08:	7723      	strb	r3, [r4, #28]
   12a0a:	e7dc      	b.n	129c6 <keepalive+0xe>
    int rc = FAILURE;
   12a0c:	2001      	movs	r0, #1
   12a0e:	4240      	negs	r0, r0
   12a10:	e7d9      	b.n	129c6 <keepalive+0xe>
   12a12:	2001      	movs	r0, #1
   12a14:	4240      	negs	r0, r0
   12a16:	e7d6      	b.n	129c6 <keepalive+0xe>
   12a18:	2001      	movs	r0, #1
   12a1a:	4240      	negs	r0, r0
    return rc;
   12a1c:	e7d3      	b.n	129c6 <keepalive+0xe>
   12a1e:	46c0      	nop			; (mov r8, r8)
   12a20:	0001317d 	.word	0x0001317d
   12a24:	000131c5 	.word	0x000131c5
   12a28:	0001318d 	.word	0x0001318d
   12a2c:	00013781 	.word	0x00013781
   12a30:	00012801 	.word	0x00012801

00012a34 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   12a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a36:	46de      	mov	lr, fp
   12a38:	464f      	mov	r7, r9
   12a3a:	4646      	mov	r6, r8
   12a3c:	b5c0      	push	{r6, r7, lr}
   12a3e:	b090      	sub	sp, #64	; 0x40
   12a40:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   12a42:	6d05      	ldr	r5, [r0, #80]	; 0x50
   12a44:	68ae      	ldr	r6, [r5, #8]
   12a46:	6947      	ldr	r7, [r0, #20]
   12a48:	9107      	str	r1, [sp, #28]
   12a4a:	0008      	movs	r0, r1
   12a4c:	4b65      	ldr	r3, [pc, #404]	; (12be4 <cycle+0x1b0>)
   12a4e:	4798      	blx	r3
   12a50:	0003      	movs	r3, r0
   12a52:	2201      	movs	r2, #1
   12a54:	0039      	movs	r1, r7
   12a56:	0028      	movs	r0, r5
   12a58:	47b0      	blx	r6
   12a5a:	0005      	movs	r5, r0
   12a5c:	2801      	cmp	r0, #1
   12a5e:	d000      	beq.n	12a62 <cycle+0x2e>
   12a60:	e0bd      	b.n	12bde <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   12a62:	9807      	ldr	r0, [sp, #28]
   12a64:	4b5f      	ldr	r3, [pc, #380]	; (12be4 <cycle+0x1b0>)
   12a66:	4798      	blx	r3
   12a68:	9006      	str	r0, [sp, #24]
   12a6a:	2604      	movs	r6, #4
    *value = 0;
   12a6c:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
   12a6e:	237f      	movs	r3, #127	; 0x7f
   12a70:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   12a72:	6d20      	ldr	r0, [r4, #80]	; 0x50
   12a74:	6883      	ldr	r3, [r0, #8]
   12a76:	4698      	mov	r8, r3
   12a78:	9b06      	ldr	r3, [sp, #24]
   12a7a:	2201      	movs	r2, #1
   12a7c:	a90c      	add	r1, sp, #48	; 0x30
   12a7e:	47c0      	blx	r8
        if (rc != 1)
   12a80:	2801      	cmp	r0, #1
   12a82:	d10e      	bne.n	12aa2 <cycle+0x6e>
        *value += (i & 127) * multiplier;
   12a84:	ab02      	add	r3, sp, #8
   12a86:	2228      	movs	r2, #40	; 0x28
   12a88:	189b      	adds	r3, r3, r2
   12a8a:	781b      	ldrb	r3, [r3, #0]
   12a8c:	465a      	mov	r2, fp
   12a8e:	401a      	ands	r2, r3
   12a90:	436a      	muls	r2, r5
   12a92:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
   12a94:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
   12a96:	b25b      	sxtb	r3, r3
   12a98:	2b00      	cmp	r3, #0
   12a9a:	da02      	bge.n	12aa2 <cycle+0x6e>
   12a9c:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   12a9e:	2e00      	cmp	r6, #0
   12aa0:	d1e7      	bne.n	12a72 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   12aa2:	6963      	ldr	r3, [r4, #20]
   12aa4:	1c58      	adds	r0, r3, #1
   12aa6:	0039      	movs	r1, r7
   12aa8:	4b4f      	ldr	r3, [pc, #316]	; (12be8 <cycle+0x1b4>)
   12aaa:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   12aac:	2f00      	cmp	r7, #0
   12aae:	dd10      	ble.n	12ad2 <cycle+0x9e>
   12ab0:	6d26      	ldr	r6, [r4, #80]	; 0x50
   12ab2:	68b3      	ldr	r3, [r6, #8]
   12ab4:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   12ab6:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   12ab8:	6963      	ldr	r3, [r4, #20]
   12aba:	181d      	adds	r5, r3, r0
   12abc:	9807      	ldr	r0, [sp, #28]
   12abe:	4b49      	ldr	r3, [pc, #292]	; (12be4 <cycle+0x1b0>)
   12ac0:	4798      	blx	r3
   12ac2:	0003      	movs	r3, r0
   12ac4:	003a      	movs	r2, r7
   12ac6:	0029      	movs	r1, r5
   12ac8:	0030      	movs	r0, r6
   12aca:	47c8      	blx	r9
   12acc:	42b8      	cmp	r0, r7
   12ace:	d000      	beq.n	12ad2 <cycle+0x9e>
   12ad0:	e085      	b.n	12bde <cycle+0x1aa>
    header.byte = c->readbuf[0];
   12ad2:	6963      	ldr	r3, [r4, #20]
   12ad4:	781d      	ldrb	r5, [r3, #0]
   12ad6:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
   12ad8:	2d05      	cmp	r5, #5
   12ada:	d051      	beq.n	12b80 <cycle+0x14c>
   12adc:	2d0d      	cmp	r5, #13
   12ade:	d06e      	beq.n	12bbe <cycle+0x18a>
        rc = SUCCESS;
   12ae0:	2600      	movs	r6, #0
    switch (packet_type)
   12ae2:	2d03      	cmp	r5, #3
   12ae4:	d16e      	bne.n	12bc4 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   12ae6:	68e2      	ldr	r2, [r4, #12]
   12ae8:	9204      	str	r2, [sp, #16]
   12aea:	9303      	str	r3, [sp, #12]
   12aec:	ab0f      	add	r3, sp, #60	; 0x3c
   12aee:	9302      	str	r3, [sp, #8]
   12af0:	ab0e      	add	r3, sp, #56	; 0x38
   12af2:	9301      	str	r3, [sp, #4]
   12af4:	ab09      	add	r3, sp, #36	; 0x24
   12af6:	9300      	str	r3, [sp, #0]
   12af8:	ab0d      	add	r3, sp, #52	; 0x34
   12afa:	2229      	movs	r2, #41	; 0x29
   12afc:	a902      	add	r1, sp, #8
   12afe:	468c      	mov	ip, r1
   12b00:	4462      	add	r2, ip
   12b02:	a908      	add	r1, sp, #32
   12b04:	202a      	movs	r0, #42	; 0x2a
   12b06:	4460      	add	r0, ip
   12b08:	4e38      	ldr	r6, [pc, #224]	; (12bec <cycle+0x1b8>)
   12b0a:	47b0      	blx	r6
        rc = SUCCESS;
   12b0c:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   12b0e:	2801      	cmp	r0, #1
   12b10:	d15b      	bne.n	12bca <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
   12b12:	ae0c      	add	r6, sp, #48	; 0x30
   12b14:	ab02      	add	r3, sp, #8
   12b16:	7e1b      	ldrb	r3, [r3, #24]
   12b18:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
   12b1a:	0032      	movs	r2, r6
   12b1c:	a909      	add	r1, sp, #36	; 0x24
   12b1e:	0020      	movs	r0, r4
   12b20:	4b33      	ldr	r3, [pc, #204]	; (12bf0 <cycle+0x1bc>)
   12b22:	4798      	blx	r3
            if (msg.qos != QOS0)
   12b24:	7833      	ldrb	r3, [r6, #0]
   12b26:	2b00      	cmp	r3, #0
   12b28:	d028      	beq.n	12b7c <cycle+0x148>
            {
                if (msg.qos == QOS1)
   12b2a:	2b01      	cmp	r3, #1
   12b2c:	d004      	beq.n	12b38 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
   12b2e:	2b02      	cmp	r3, #2
   12b30:	d016      	beq.n	12b60 <cycle+0x12c>
   12b32:	2601      	movs	r6, #1
   12b34:	4276      	negs	r6, r6
   12b36:	e048      	b.n	12bca <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   12b38:	ab0c      	add	r3, sp, #48	; 0x30
   12b3a:	889b      	ldrh	r3, [r3, #4]
   12b3c:	9300      	str	r3, [sp, #0]
   12b3e:	2300      	movs	r3, #0
   12b40:	2204      	movs	r2, #4
   12b42:	68a1      	ldr	r1, [r4, #8]
   12b44:	6920      	ldr	r0, [r4, #16]
   12b46:	4e2b      	ldr	r6, [pc, #172]	; (12bf4 <cycle+0x1c0>)
   12b48:	47b0      	blx	r6
   12b4a:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
   12b4c:	2900      	cmp	r1, #0
   12b4e:	dd12      	ble.n	12b76 <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
   12b50:	9a07      	ldr	r2, [sp, #28]
   12b52:	0020      	movs	r0, r4
   12b54:	4b28      	ldr	r3, [pc, #160]	; (12bf8 <cycle+0x1c4>)
   12b56:	4798      	blx	r3
   12b58:	0006      	movs	r6, r0
                if (rc == FAILURE)
   12b5a:	1c43      	adds	r3, r0, #1
   12b5c:	d132      	bne.n	12bc4 <cycle+0x190>
   12b5e:	e034      	b.n	12bca <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   12b60:	ab0c      	add	r3, sp, #48	; 0x30
   12b62:	889b      	ldrh	r3, [r3, #4]
   12b64:	9300      	str	r3, [sp, #0]
   12b66:	2300      	movs	r3, #0
   12b68:	2205      	movs	r2, #5
   12b6a:	68a1      	ldr	r1, [r4, #8]
   12b6c:	6920      	ldr	r0, [r4, #16]
   12b6e:	4e21      	ldr	r6, [pc, #132]	; (12bf4 <cycle+0x1c0>)
   12b70:	47b0      	blx	r6
   12b72:	0001      	movs	r1, r0
   12b74:	e7ea      	b.n	12b4c <cycle+0x118>
   12b76:	2601      	movs	r6, #1
   12b78:	4276      	negs	r6, r6
   12b7a:	e026      	b.n	12bca <cycle+0x196>
        rc = SUCCESS;
   12b7c:	2600      	movs	r6, #0
   12b7e:	e021      	b.n	12bc4 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   12b80:	68e2      	ldr	r2, [r4, #12]
   12b82:	9200      	str	r2, [sp, #0]
   12b84:	aa0c      	add	r2, sp, #48	; 0x30
   12b86:	a908      	add	r1, sp, #32
   12b88:	a809      	add	r0, sp, #36	; 0x24
   12b8a:	4e1c      	ldr	r6, [pc, #112]	; (12bfc <cycle+0x1c8>)
   12b8c:	47b0      	blx	r6
   12b8e:	2801      	cmp	r0, #1
   12b90:	d002      	beq.n	12b98 <cycle+0x164>
   12b92:	2601      	movs	r6, #1
   12b94:	4276      	negs	r6, r6
   12b96:	e01b      	b.n	12bd0 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   12b98:	ab0c      	add	r3, sp, #48	; 0x30
   12b9a:	881b      	ldrh	r3, [r3, #0]
   12b9c:	9300      	str	r3, [sp, #0]
   12b9e:	2300      	movs	r3, #0
   12ba0:	2206      	movs	r2, #6
   12ba2:	68a1      	ldr	r1, [r4, #8]
   12ba4:	6920      	ldr	r0, [r4, #16]
   12ba6:	4e13      	ldr	r6, [pc, #76]	; (12bf4 <cycle+0x1c0>)
   12ba8:	47b0      	blx	r6
   12baa:	2800      	cmp	r0, #0
   12bac:	ddf1      	ble.n	12b92 <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   12bae:	9a07      	ldr	r2, [sp, #28]
   12bb0:	0001      	movs	r1, r0
   12bb2:	0020      	movs	r0, r4
   12bb4:	4b10      	ldr	r3, [pc, #64]	; (12bf8 <cycle+0x1c4>)
   12bb6:	4798      	blx	r3
   12bb8:	1e06      	subs	r6, r0, #0
   12bba:	d1ea      	bne.n	12b92 <cycle+0x15e>
   12bbc:	e002      	b.n	12bc4 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   12bbe:	2300      	movs	r3, #0
   12bc0:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
   12bc2:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
   12bc4:	0020      	movs	r0, r4
   12bc6:	4b0e      	ldr	r3, [pc, #56]	; (12c00 <cycle+0x1cc>)
   12bc8:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
   12bca:	2e00      	cmp	r6, #0
   12bcc:	d100      	bne.n	12bd0 <cycle+0x19c>
   12bce:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
   12bd0:	0030      	movs	r0, r6
   12bd2:	b010      	add	sp, #64	; 0x40
   12bd4:	bc1c      	pop	{r2, r3, r4}
   12bd6:	4690      	mov	r8, r2
   12bd8:	4699      	mov	r9, r3
   12bda:	46a3      	mov	fp, r4
   12bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bde:	4d09      	ldr	r5, [pc, #36]	; (12c04 <cycle+0x1d0>)
        rc = SUCCESS;
   12be0:	2600      	movs	r6, #0
   12be2:	e7ef      	b.n	12bc4 <cycle+0x190>
   12be4:	000131b1 	.word	0x000131b1
   12be8:	00013899 	.word	0x00013899
   12bec:	00013791 	.word	0x00013791
   12bf0:	000128b5 	.word	0x000128b5
   12bf4:	00013bcd 	.word	0x00013bcd
   12bf8:	00012801 	.word	0x00012801
   12bfc:	00013829 	.word	0x00013829
   12c00:	000129b9 	.word	0x000129b9
   12c04:	0000ffff 	.word	0x0000ffff

00012c08 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   12c08:	b570      	push	{r4, r5, r6, lr}
   12c0a:	b082      	sub	sp, #8
   12c0c:	0005      	movs	r5, r0
   12c0e:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
   12c10:	4668      	mov	r0, sp
   12c12:	4b0a      	ldr	r3, [pc, #40]	; (12c3c <MQTTYield+0x34>)
   12c14:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   12c16:	0021      	movs	r1, r4
   12c18:	4668      	mov	r0, sp
   12c1a:	4b09      	ldr	r3, [pc, #36]	; (12c40 <MQTTYield+0x38>)
   12c1c:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   12c1e:	4c09      	ldr	r4, [pc, #36]	; (12c44 <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
   12c20:	4e09      	ldr	r6, [pc, #36]	; (12c48 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
   12c22:	4669      	mov	r1, sp
   12c24:	0028      	movs	r0, r5
   12c26:	47a0      	blx	r4
   12c28:	1c43      	adds	r3, r0, #1
   12c2a:	d004      	beq.n	12c36 <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
   12c2c:	4668      	mov	r0, sp
   12c2e:	47b0      	blx	r6
   12c30:	2800      	cmp	r0, #0
   12c32:	d0f6      	beq.n	12c22 <MQTTYield+0x1a>
    int rc = SUCCESS;
   12c34:	2000      	movs	r0, #0
        
    return rc;
}
   12c36:	b002      	add	sp, #8
   12c38:	bd70      	pop	{r4, r5, r6, pc}
   12c3a:	46c0      	nop			; (mov r8, r8)
   12c3c:	000131c5 	.word	0x000131c5
   12c40:	0001318d 	.word	0x0001318d
   12c44:	00012a35 	.word	0x00012a35
   12c48:	0001317d 	.word	0x0001317d

00012c4c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   12c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c4e:	b083      	sub	sp, #12
   12c50:	9001      	str	r0, [sp, #4]
   12c52:	000e      	movs	r6, r1
   12c54:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
   12c56:	2401      	movs	r4, #1
   12c58:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
   12c5a:	4f08      	ldr	r7, [pc, #32]	; (12c7c <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   12c5c:	4d08      	ldr	r5, [pc, #32]	; (12c80 <waitfor+0x34>)
        if (TimerIsExpired(timer))
   12c5e:	9800      	ldr	r0, [sp, #0]
   12c60:	47b8      	blx	r7
   12c62:	2800      	cmp	r0, #0
   12c64:	d106      	bne.n	12c74 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
   12c66:	9900      	ldr	r1, [sp, #0]
   12c68:	9801      	ldr	r0, [sp, #4]
   12c6a:	47a8      	blx	r5
   12c6c:	0004      	movs	r4, r0
   12c6e:	42b0      	cmp	r0, r6
   12c70:	d1f5      	bne.n	12c5e <waitfor+0x12>
   12c72:	0034      	movs	r4, r6
    
    return rc;
}
   12c74:	0020      	movs	r0, r4
   12c76:	b003      	add	sp, #12
   12c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12c7a:	46c0      	nop			; (mov r8, r8)
   12c7c:	0001317d 	.word	0x0001317d
   12c80:	00012a35 	.word	0x00012a35

00012c84 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   12c84:	b530      	push	{r4, r5, lr}
   12c86:	b09b      	sub	sp, #108	; 0x6c
   12c88:	0004      	movs	r4, r0
   12c8a:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   12c8c:	2258      	movs	r2, #88	; 0x58
   12c8e:	4928      	ldr	r1, [pc, #160]	; (12d30 <MQTTConnect+0xac>)
   12c90:	a802      	add	r0, sp, #8
   12c92:	4b28      	ldr	r3, [pc, #160]	; (12d34 <MQTTConnect+0xb0>)
   12c94:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   12c96:	6a23      	ldr	r3, [r4, #32]
   12c98:	2b00      	cmp	r3, #0
   12c9a:	d13f      	bne.n	12d1c <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
   12c9c:	a818      	add	r0, sp, #96	; 0x60
   12c9e:	4b26      	ldr	r3, [pc, #152]	; (12d38 <MQTTConnect+0xb4>)
   12ca0:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   12ca2:	6861      	ldr	r1, [r4, #4]
   12ca4:	a818      	add	r0, sp, #96	; 0x60
   12ca6:	4b25      	ldr	r3, [pc, #148]	; (12d3c <MQTTConnect+0xb8>)
   12ca8:	4798      	blx	r3

    if (options == 0)
   12caa:	2d00      	cmp	r5, #0
   12cac:	d015      	beq.n	12cda <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
   12cae:	8b29      	ldrh	r1, [r5, #24]
   12cb0:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   12cb2:	0020      	movs	r0, r4
   12cb4:	3054      	adds	r0, #84	; 0x54
   12cb6:	4b22      	ldr	r3, [pc, #136]	; (12d40 <MQTTConnect+0xbc>)
   12cb8:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   12cba:	002a      	movs	r2, r5
   12cbc:	68a1      	ldr	r1, [r4, #8]
   12cbe:	6920      	ldr	r0, [r4, #16]
   12cc0:	4b20      	ldr	r3, [pc, #128]	; (12d44 <MQTTConnect+0xc0>)
   12cc2:	4798      	blx	r3
   12cc4:	2800      	cmp	r0, #0
   12cc6:	dd2c      	ble.n	12d22 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   12cc8:	aa18      	add	r2, sp, #96	; 0x60
   12cca:	0001      	movs	r1, r0
   12ccc:	0020      	movs	r0, r4
   12cce:	4b1e      	ldr	r3, [pc, #120]	; (12d48 <MQTTConnect+0xc4>)
   12cd0:	4798      	blx	r3
   12cd2:	2800      	cmp	r0, #0
   12cd4:	d003      	beq.n	12cde <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
   12cd6:	b01b      	add	sp, #108	; 0x6c
   12cd8:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
   12cda:	ad02      	add	r5, sp, #8
   12cdc:	e7e7      	b.n	12cae <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   12cde:	aa18      	add	r2, sp, #96	; 0x60
   12ce0:	2102      	movs	r1, #2
   12ce2:	0020      	movs	r0, r4
   12ce4:	4b19      	ldr	r3, [pc, #100]	; (12d4c <MQTTConnect+0xc8>)
   12ce6:	4798      	blx	r3
   12ce8:	2802      	cmp	r0, #2
   12cea:	d11d      	bne.n	12d28 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
   12cec:	466b      	mov	r3, sp
   12cee:	1d99      	adds	r1, r3, #6
   12cf0:	23ff      	movs	r3, #255	; 0xff
   12cf2:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
   12cf4:	466b      	mov	r3, sp
   12cf6:	1dd8      	adds	r0, r3, #7
   12cf8:	2300      	movs	r3, #0
   12cfa:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   12cfc:	68e3      	ldr	r3, [r4, #12]
   12cfe:	6962      	ldr	r2, [r4, #20]
   12d00:	4d13      	ldr	r5, [pc, #76]	; (12d50 <MQTTConnect+0xcc>)
   12d02:	47a8      	blx	r5
   12d04:	2801      	cmp	r0, #1
   12d06:	d002      	beq.n	12d0e <MQTTConnect+0x8a>
            rc = FAILURE;
   12d08:	2001      	movs	r0, #1
   12d0a:	4240      	negs	r0, r0
   12d0c:	e7e3      	b.n	12cd6 <MQTTConnect+0x52>
            rc = connack_rc;
   12d0e:	466b      	mov	r3, sp
   12d10:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
   12d12:	2800      	cmp	r0, #0
   12d14:	d1df      	bne.n	12cd6 <MQTTConnect+0x52>
        c->isconnected = 1;
   12d16:	2301      	movs	r3, #1
   12d18:	6223      	str	r3, [r4, #32]
    return rc;
   12d1a:	e7dc      	b.n	12cd6 <MQTTConnect+0x52>
    int rc = FAILURE;
   12d1c:	2001      	movs	r0, #1
   12d1e:	4240      	negs	r0, r0
   12d20:	e7d9      	b.n	12cd6 <MQTTConnect+0x52>
   12d22:	2001      	movs	r0, #1
   12d24:	4240      	negs	r0, r0
   12d26:	e7d6      	b.n	12cd6 <MQTTConnect+0x52>
        rc = FAILURE;
   12d28:	2001      	movs	r0, #1
   12d2a:	4240      	negs	r0, r0
   12d2c:	e7d3      	b.n	12cd6 <MQTTConnect+0x52>
   12d2e:	46c0      	nop			; (mov r8, r8)
   12d30:	00019e90 	.word	0x00019e90
   12d34:	000165c9 	.word	0x000165c9
   12d38:	000131c5 	.word	0x000131c5
   12d3c:	0001318d 	.word	0x0001318d
   12d40:	0001319d 	.word	0x0001319d
   12d44:	0001359d 	.word	0x0001359d
   12d48:	00012801 	.word	0x00012801
   12d4c:	00012c4d 	.word	0x00012c4d
   12d50:	000136e5 	.word	0x000136e5

00012d54 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   12d54:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d56:	b091      	sub	sp, #68	; 0x44
   12d58:	0004      	movs	r4, r0
   12d5a:	000f      	movs	r7, r1
   12d5c:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
   12d5e:	2300      	movs	r3, #0
   12d60:	930c      	str	r3, [sp, #48]	; 0x30
   12d62:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
   12d64:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
   12d66:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   12d68:	6a03      	ldr	r3, [r0, #32]
   12d6a:	2b00      	cmp	r3, #0
   12d6c:	d05c      	beq.n	12e28 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
   12d6e:	a80e      	add	r0, sp, #56	; 0x38
   12d70:	4b32      	ldr	r3, [pc, #200]	; (12e3c <MQTTSubscribe+0xe8>)
   12d72:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   12d74:	6861      	ldr	r1, [r4, #4]
   12d76:	a80e      	add	r0, sp, #56	; 0x38
   12d78:	4b31      	ldr	r3, [pc, #196]	; (12e40 <MQTTSubscribe+0xec>)
   12d7a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   12d7c:	6920      	ldr	r0, [r4, #16]
   12d7e:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   12d80:	6823      	ldr	r3, [r4, #0]
   12d82:	4a30      	ldr	r2, [pc, #192]	; (12e44 <MQTTSubscribe+0xf0>)
   12d84:	4293      	cmp	r3, r2
   12d86:	d017      	beq.n	12db8 <MQTTSubscribe+0x64>
   12d88:	3301      	adds	r3, #1
   12d8a:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   12d8c:	b29b      	uxth	r3, r3
   12d8e:	aa0a      	add	r2, sp, #40	; 0x28
   12d90:	9202      	str	r2, [sp, #8]
   12d92:	aa0b      	add	r2, sp, #44	; 0x2c
   12d94:	9201      	str	r2, [sp, #4]
   12d96:	2201      	movs	r2, #1
   12d98:	9200      	str	r2, [sp, #0]
   12d9a:	2200      	movs	r2, #0
   12d9c:	4e2a      	ldr	r6, [pc, #168]	; (12e48 <MQTTSubscribe+0xf4>)
   12d9e:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   12da0:	2800      	cmp	r0, #0
   12da2:	dd44      	ble.n	12e2e <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   12da4:	aa0e      	add	r2, sp, #56	; 0x38
   12da6:	0001      	movs	r1, r0
   12da8:	0020      	movs	r0, r4
   12daa:	4b28      	ldr	r3, [pc, #160]	; (12e4c <MQTTSubscribe+0xf8>)
   12dac:	4798      	blx	r3
   12dae:	1e06      	subs	r6, r0, #0
   12db0:	d004      	beq.n	12dbc <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   12db2:	0030      	movs	r0, r6
   12db4:	b011      	add	sp, #68	; 0x44
   12db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   12db8:	2301      	movs	r3, #1
   12dba:	e7e6      	b.n	12d8a <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   12dbc:	aa0e      	add	r2, sp, #56	; 0x38
   12dbe:	2109      	movs	r1, #9
   12dc0:	0020      	movs	r0, r4
   12dc2:	4b23      	ldr	r3, [pc, #140]	; (12e50 <MQTTSubscribe+0xfc>)
   12dc4:	4798      	blx	r3
   12dc6:	2809      	cmp	r0, #9
   12dc8:	d134      	bne.n	12e34 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
   12dca:	2300      	movs	r3, #0
   12dcc:	9308      	str	r3, [sp, #32]
   12dce:	3b01      	subs	r3, #1
   12dd0:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   12dd2:	68e3      	ldr	r3, [r4, #12]
   12dd4:	9301      	str	r3, [sp, #4]
   12dd6:	6963      	ldr	r3, [r4, #20]
   12dd8:	9300      	str	r3, [sp, #0]
   12dda:	ab09      	add	r3, sp, #36	; 0x24
   12ddc:	aa08      	add	r2, sp, #32
   12dde:	2101      	movs	r1, #1
   12de0:	300d      	adds	r0, #13
   12de2:	ad02      	add	r5, sp, #8
   12de4:	46ac      	mov	ip, r5
   12de6:	4460      	add	r0, ip
   12de8:	4d1a      	ldr	r5, [pc, #104]	; (12e54 <MQTTSubscribe+0x100>)
   12dea:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   12dec:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   12dee:	2801      	cmp	r0, #1
   12df0:	d00e      	beq.n	12e10 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
   12df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12df4:	2b00      	cmp	r3, #0
   12df6:	d010      	beq.n	12e1a <MQTTSubscribe+0xc6>
   12df8:	0022      	movs	r2, r4
   12dfa:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12dfc:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
   12dfe:	6810      	ldr	r0, [r2, #0]
   12e00:	2800      	cmp	r0, #0
   12e02:	d00b      	beq.n	12e1c <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12e04:	3301      	adds	r3, #1
   12e06:	3208      	adds	r2, #8
   12e08:	2b05      	cmp	r3, #5
   12e0a:	d1f8      	bne.n	12dfe <MQTTSubscribe+0xaa>
   12e0c:	000e      	movs	r6, r1
   12e0e:	e7d0      	b.n	12db2 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   12e10:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
   12e12:	2980      	cmp	r1, #128	; 0x80
   12e14:	d1ed      	bne.n	12df2 <MQTTSubscribe+0x9e>
   12e16:	000e      	movs	r6, r1
   12e18:	e7cb      	b.n	12db2 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
   12e1a:	0033      	movs	r3, r6
   12e1c:	00db      	lsls	r3, r3, #3
   12e1e:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
   12e20:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
   12e22:	9b05      	ldr	r3, [sp, #20]
   12e24:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
   12e26:	e7c4      	b.n	12db2 <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
   12e28:	2601      	movs	r6, #1
   12e2a:	4276      	negs	r6, r6
   12e2c:	e7c1      	b.n	12db2 <MQTTSubscribe+0x5e>
   12e2e:	2601      	movs	r6, #1
   12e30:	4276      	negs	r6, r6
   12e32:	e7be      	b.n	12db2 <MQTTSubscribe+0x5e>
        rc = FAILURE;
   12e34:	2601      	movs	r6, #1
   12e36:	4276      	negs	r6, r6
    return rc;
   12e38:	e7bb      	b.n	12db2 <MQTTSubscribe+0x5e>
   12e3a:	46c0      	nop			; (mov r8, r8)
   12e3c:	000131c5 	.word	0x000131c5
   12e40:	0001318d 	.word	0x0001318d
   12e44:	0000ffff 	.word	0x0000ffff
   12e48:	00013c65 	.word	0x00013c65
   12e4c:	00012801 	.word	0x00012801
   12e50:	00012c4d 	.word	0x00012c4d
   12e54:	00013d19 	.word	0x00013d19

00012e58 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   12e58:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e5a:	b08f      	sub	sp, #60	; 0x3c
   12e5c:	0005      	movs	r5, r0
   12e5e:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   12e60:	2300      	movs	r3, #0
   12e62:	930a      	str	r3, [sp, #40]	; 0x28
   12e64:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
   12e66:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   12e68:	6a03      	ldr	r3, [r0, #32]
   12e6a:	2b00      	cmp	r3, #0
   12e6c:	d062      	beq.n	12f34 <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
   12e6e:	a80c      	add	r0, sp, #48	; 0x30
   12e70:	4b36      	ldr	r3, [pc, #216]	; (12f4c <MQTTPublish+0xf4>)
   12e72:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   12e74:	6869      	ldr	r1, [r5, #4]
   12e76:	a80c      	add	r0, sp, #48	; 0x30
   12e78:	4b35      	ldr	r3, [pc, #212]	; (12f50 <MQTTPublish+0xf8>)
   12e7a:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   12e7c:	7823      	ldrb	r3, [r4, #0]
   12e7e:	3b01      	subs	r3, #1
   12e80:	2b01      	cmp	r3, #1
   12e82:	d921      	bls.n	12ec8 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   12e84:	7823      	ldrb	r3, [r4, #0]
   12e86:	68e2      	ldr	r2, [r4, #12]
   12e88:	9206      	str	r2, [sp, #24]
   12e8a:	68a2      	ldr	r2, [r4, #8]
   12e8c:	9205      	str	r2, [sp, #20]
   12e8e:	aa09      	add	r2, sp, #36	; 0x24
   12e90:	a902      	add	r1, sp, #8
   12e92:	cac1      	ldmia	r2!, {r0, r6, r7}
   12e94:	c1c1      	stmia	r1!, {r0, r6, r7}
   12e96:	88a2      	ldrh	r2, [r4, #4]
   12e98:	9201      	str	r2, [sp, #4]
   12e9a:	7862      	ldrb	r2, [r4, #1]
   12e9c:	9200      	str	r2, [sp, #0]
   12e9e:	2200      	movs	r2, #0
   12ea0:	68a9      	ldr	r1, [r5, #8]
   12ea2:	6928      	ldr	r0, [r5, #16]
   12ea4:	4e2b      	ldr	r6, [pc, #172]	; (12f54 <MQTTPublish+0xfc>)
   12ea6:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
   12ea8:	2800      	cmp	r0, #0
   12eaa:	dd46      	ble.n	12f3a <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   12eac:	aa0c      	add	r2, sp, #48	; 0x30
   12eae:	0001      	movs	r1, r0
   12eb0:	0028      	movs	r0, r5
   12eb2:	4b29      	ldr	r3, [pc, #164]	; (12f58 <MQTTPublish+0x100>)
   12eb4:	4798      	blx	r3
   12eb6:	2800      	cmp	r0, #0
   12eb8:	d104      	bne.n	12ec4 <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   12eba:	7823      	ldrb	r3, [r4, #0]
   12ebc:	2b01      	cmp	r3, #1
   12ebe:	d00d      	beq.n	12edc <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
   12ec0:	2b02      	cmp	r3, #2
   12ec2:	d021      	beq.n	12f08 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   12ec4:	b00f      	add	sp, #60	; 0x3c
   12ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   12ec8:	682b      	ldr	r3, [r5, #0]
   12eca:	4a24      	ldr	r2, [pc, #144]	; (12f5c <MQTTPublish+0x104>)
   12ecc:	4293      	cmp	r3, r2
   12ece:	d003      	beq.n	12ed8 <MQTTPublish+0x80>
   12ed0:	3301      	adds	r3, #1
   12ed2:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
   12ed4:	80a3      	strh	r3, [r4, #4]
   12ed6:	e7d5      	b.n	12e84 <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   12ed8:	2301      	movs	r3, #1
   12eda:	e7fa      	b.n	12ed2 <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   12edc:	aa0c      	add	r2, sp, #48	; 0x30
   12ede:	2104      	movs	r1, #4
   12ee0:	0028      	movs	r0, r5
   12ee2:	4b1f      	ldr	r3, [pc, #124]	; (12f60 <MQTTPublish+0x108>)
   12ee4:	4798      	blx	r3
   12ee6:	2804      	cmp	r0, #4
   12ee8:	d12a      	bne.n	12f40 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   12eea:	696b      	ldr	r3, [r5, #20]
   12eec:	68ea      	ldr	r2, [r5, #12]
   12eee:	9200      	str	r2, [sp, #0]
   12ef0:	2222      	movs	r2, #34	; 0x22
   12ef2:	446a      	add	r2, sp
   12ef4:	a908      	add	r1, sp, #32
   12ef6:	301d      	adds	r0, #29
   12ef8:	4468      	add	r0, sp
   12efa:	4c1a      	ldr	r4, [pc, #104]	; (12f64 <MQTTPublish+0x10c>)
   12efc:	47a0      	blx	r4
   12efe:	3801      	subs	r0, #1
   12f00:	1e43      	subs	r3, r0, #1
   12f02:	4198      	sbcs	r0, r3
   12f04:	4240      	negs	r0, r0
   12f06:	e7dd      	b.n	12ec4 <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   12f08:	aa0c      	add	r2, sp, #48	; 0x30
   12f0a:	2107      	movs	r1, #7
   12f0c:	0028      	movs	r0, r5
   12f0e:	4b14      	ldr	r3, [pc, #80]	; (12f60 <MQTTPublish+0x108>)
   12f10:	4798      	blx	r3
   12f12:	2807      	cmp	r0, #7
   12f14:	d117      	bne.n	12f46 <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   12f16:	696b      	ldr	r3, [r5, #20]
   12f18:	68ea      	ldr	r2, [r5, #12]
   12f1a:	9200      	str	r2, [sp, #0]
   12f1c:	2222      	movs	r2, #34	; 0x22
   12f1e:	446a      	add	r2, sp
   12f20:	a908      	add	r1, sp, #32
   12f22:	301a      	adds	r0, #26
   12f24:	4468      	add	r0, sp
   12f26:	4c0f      	ldr	r4, [pc, #60]	; (12f64 <MQTTPublish+0x10c>)
   12f28:	47a0      	blx	r4
   12f2a:	3801      	subs	r0, #1
   12f2c:	1e43      	subs	r3, r0, #1
   12f2e:	4198      	sbcs	r0, r3
   12f30:	4240      	negs	r0, r0
   12f32:	e7c7      	b.n	12ec4 <MQTTPublish+0x6c>
    int rc = FAILURE;
   12f34:	2001      	movs	r0, #1
   12f36:	4240      	negs	r0, r0
   12f38:	e7c4      	b.n	12ec4 <MQTTPublish+0x6c>
   12f3a:	2001      	movs	r0, #1
   12f3c:	4240      	negs	r0, r0
   12f3e:	e7c1      	b.n	12ec4 <MQTTPublish+0x6c>
            rc = FAILURE;
   12f40:	2001      	movs	r0, #1
   12f42:	4240      	negs	r0, r0
   12f44:	e7be      	b.n	12ec4 <MQTTPublish+0x6c>
            rc = FAILURE;
   12f46:	2001      	movs	r0, #1
   12f48:	4240      	negs	r0, r0
    return rc;
   12f4a:	e7bb      	b.n	12ec4 <MQTTPublish+0x6c>
   12f4c:	000131c5 	.word	0x000131c5
   12f50:	0001318d 	.word	0x0001318d
   12f54:	00013b05 	.word	0x00013b05
   12f58:	00012801 	.word	0x00012801
   12f5c:	0000ffff 	.word	0x0000ffff
   12f60:	00012c4d 	.word	0x00012c4d
   12f64:	00013829 	.word	0x00013829

00012f68 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   12f68:	b510      	push	{r4, lr}
   12f6a:	b082      	sub	sp, #8
   12f6c:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   12f6e:	4668      	mov	r0, sp
   12f70:	4b0b      	ldr	r3, [pc, #44]	; (12fa0 <MQTTDisconnect+0x38>)
   12f72:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   12f74:	6861      	ldr	r1, [r4, #4]
   12f76:	4668      	mov	r0, sp
   12f78:	4b0a      	ldr	r3, [pc, #40]	; (12fa4 <MQTTDisconnect+0x3c>)
   12f7a:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   12f7c:	68a1      	ldr	r1, [r4, #8]
   12f7e:	6920      	ldr	r0, [r4, #16]
   12f80:	4b09      	ldr	r3, [pc, #36]	; (12fa8 <MQTTDisconnect+0x40>)
   12f82:	4798      	blx	r3
    if (len > 0)
   12f84:	2800      	cmp	r0, #0
   12f86:	dd08      	ble.n	12f9a <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   12f88:	466a      	mov	r2, sp
   12f8a:	0001      	movs	r1, r0
   12f8c:	0020      	movs	r0, r4
   12f8e:	4b07      	ldr	r3, [pc, #28]	; (12fac <MQTTDisconnect+0x44>)
   12f90:	4798      	blx	r3
        
    c->isconnected = 0;
   12f92:	2300      	movs	r3, #0
   12f94:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
   12f96:	b002      	add	sp, #8
   12f98:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
   12f9a:	2001      	movs	r0, #1
   12f9c:	4240      	negs	r0, r0
   12f9e:	e7f8      	b.n	12f92 <MQTTDisconnect+0x2a>
   12fa0:	000131c5 	.word	0x000131c5
   12fa4:	0001318d 	.word	0x0001318d
   12fa8:	00013771 	.word	0x00013771
   12fac:	00012801 	.word	0x00012801

00012fb0 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
   12fb0:	b510      	push	{r4, lr}
   12fb2:	0004      	movs	r4, r0
	close(n->socket);
   12fb4:	2000      	movs	r0, #0
   12fb6:	5620      	ldrsb	r0, [r4, r0]
   12fb8:	4b04      	ldr	r3, [pc, #16]	; (12fcc <WINC1500_disconnect+0x1c>)
   12fba:	4798      	blx	r3
	n->socket=-1;
   12fbc:	2301      	movs	r3, #1
   12fbe:	425b      	negs	r3, r3
   12fc0:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
   12fc2:	2200      	movs	r2, #0
   12fc4:	4b02      	ldr	r3, [pc, #8]	; (12fd0 <WINC1500_disconnect+0x20>)
   12fc6:	701a      	strb	r2, [r3, #0]
}
   12fc8:	bd10      	pop	{r4, pc}
   12fca:	46c0      	nop			; (mov r8, r8)
   12fcc:	0000ddc9 	.word	0x0000ddc9
   12fd0:	20000464 	.word	0x20000464

00012fd4 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   12fd4:	b570      	push	{r4, r5, r6, lr}
   12fd6:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
   12fd8:	2200      	movs	r2, #0
   12fda:	4b0d      	ldr	r3, [pc, #52]	; (13010 <WINC1500_write+0x3c>)
   12fdc:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   12fde:	b2b2      	uxth	r2, r6
   12fe0:	7800      	ldrb	r0, [r0, #0]
   12fe2:	b240      	sxtb	r0, r0
   12fe4:	2300      	movs	r3, #0
   12fe6:	4c0b      	ldr	r4, [pc, #44]	; (13014 <WINC1500_write+0x40>)
   12fe8:	47a0      	blx	r4
   12fea:	2800      	cmp	r0, #0
   12fec:	d10c      	bne.n	13008 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
   12fee:	4b08      	ldr	r3, [pc, #32]	; (13010 <WINC1500_write+0x3c>)
   12ff0:	781b      	ldrb	r3, [r3, #0]
   12ff2:	2b00      	cmp	r3, #0
   12ff4:	d106      	bne.n	13004 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
   12ff6:	4d08      	ldr	r5, [pc, #32]	; (13018 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
   12ff8:	4c05      	ldr	r4, [pc, #20]	; (13010 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
   12ffa:	2000      	movs	r0, #0
   12ffc:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
   12ffe:	7823      	ldrb	r3, [r4, #0]
   13000:	2b00      	cmp	r3, #0
   13002:	d0fa      	beq.n	12ffa <WINC1500_write+0x26>
}
   13004:	0030      	movs	r0, r6
   13006:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
   13008:	2601      	movs	r6, #1
   1300a:	4276      	negs	r6, r6
   1300c:	e7fa      	b.n	13004 <WINC1500_write+0x30>
   1300e:	46c0      	nop			; (mov r8, r8)
   13010:	20000467 	.word	0x20000467
   13014:	0000dc9d 	.word	0x0000dc9d
   13018:	0000bf01 	.word	0x0000bf01

0001301c <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   1301c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1301e:	b083      	sub	sp, #12
   13020:	9101      	str	r1, [sp, #4]
   13022:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
   13024:	2b00      	cmp	r3, #0
   13026:	d100      	bne.n	1302a <WINC1500_read+0xe>
   13028:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   1302a:	4a22      	ldr	r2, [pc, #136]	; (130b4 <WINC1500_read+0x98>)
   1302c:	6812      	ldr	r2, [r2, #0]
   1302e:	2a00      	cmp	r2, #0
   13030:	d013      	beq.n	1305a <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
   13032:	4b20      	ldr	r3, [pc, #128]	; (130b4 <WINC1500_read+0x98>)
   13034:	681d      	ldr	r5, [r3, #0]
   13036:	42a5      	cmp	r5, r4
   13038:	db39      	blt.n	130ae <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   1303a:	4e1f      	ldr	r6, [pc, #124]	; (130b8 <WINC1500_read+0x9c>)
   1303c:	6837      	ldr	r7, [r6, #0]
   1303e:	491f      	ldr	r1, [pc, #124]	; (130bc <WINC1500_read+0xa0>)
   13040:	19c9      	adds	r1, r1, r7
   13042:	0022      	movs	r2, r4
   13044:	9801      	ldr	r0, [sp, #4]
   13046:	4b1e      	ldr	r3, [pc, #120]	; (130c0 <WINC1500_read+0xa4>)
   13048:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   1304a:	1b2d      	subs	r5, r5, r4
   1304c:	4b19      	ldr	r3, [pc, #100]	; (130b4 <WINC1500_read+0x98>)
   1304e:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   13050:	193f      	adds	r7, r7, r4
   13052:	6037      	str	r7, [r6, #0]
  return len;
   13054:	0020      	movs	r0, r4
}
   13056:	b003      	add	sp, #12
   13058:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
   1305a:	2100      	movs	r1, #0
   1305c:	4a19      	ldr	r2, [pc, #100]	; (130c4 <WINC1500_read+0xa8>)
   1305e:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   13060:	7800      	ldrb	r0, [r0, #0]
   13062:	b240      	sxtb	r0, r0
   13064:	2280      	movs	r2, #128	; 0x80
   13066:	0052      	lsls	r2, r2, #1
   13068:	4914      	ldr	r1, [pc, #80]	; (130bc <WINC1500_read+0xa0>)
   1306a:	4d17      	ldr	r5, [pc, #92]	; (130c8 <WINC1500_read+0xac>)
   1306c:	47a8      	blx	r5
   1306e:	2800      	cmp	r0, #0
   13070:	d11a      	bne.n	130a8 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
   13072:	4b14      	ldr	r3, [pc, #80]	; (130c4 <WINC1500_read+0xa8>)
   13074:	781b      	ldrb	r3, [r3, #0]
   13076:	2b00      	cmp	r3, #0
   13078:	d106      	bne.n	13088 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
   1307a:	4f14      	ldr	r7, [pc, #80]	; (130cc <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
   1307c:	4d11      	ldr	r5, [pc, #68]	; (130c4 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
   1307e:	2000      	movs	r0, #0
   13080:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
   13082:	782b      	ldrb	r3, [r5, #0]
   13084:	2b00      	cmp	r3, #0
   13086:	d0fa      	beq.n	1307e <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   13088:	4b11      	ldr	r3, [pc, #68]	; (130d0 <WINC1500_read+0xb4>)
   1308a:	6818      	ldr	r0, [r3, #0]
   1308c:	2800      	cmp	r0, #0
   1308e:	dd05      	ble.n	1309c <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   13090:	4b08      	ldr	r3, [pc, #32]	; (130b4 <WINC1500_read+0x98>)
   13092:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   13094:	2200      	movs	r2, #0
   13096:	4b08      	ldr	r3, [pc, #32]	; (130b8 <WINC1500_read+0x9c>)
   13098:	601a      	str	r2, [r3, #0]
   1309a:	e7ca      	b.n	13032 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
   1309c:	2300      	movs	r3, #0
   1309e:	4a05      	ldr	r2, [pc, #20]	; (130b4 <WINC1500_read+0x98>)
   130a0:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
   130a2:	4a05      	ldr	r2, [pc, #20]	; (130b8 <WINC1500_read+0x9c>)
   130a4:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   130a6:	e7d6      	b.n	13056 <WINC1500_read+0x3a>
		  return -1;
   130a8:	2001      	movs	r0, #1
   130aa:	4240      	negs	r0, r0
   130ac:	e7d3      	b.n	13056 <WINC1500_read+0x3a>
	  return -1;
   130ae:	2001      	movs	r0, #1
   130b0:	4240      	negs	r0, r0
   130b2:	e7d0      	b.n	13056 <WINC1500_read+0x3a>
   130b4:	20000574 	.word	0x20000574
   130b8:	20000578 	.word	0x20000578
   130bc:	20000468 	.word	0x20000468
   130c0:	000165c9 	.word	0x000165c9
   130c4:	20000466 	.word	0x20000466
   130c8:	0000dd35 	.word	0x0000dd35
   130cc:	0000bf01 	.word	0x0000bf01
   130d0:	2000056c 	.word	0x2000056c

000130d4 <dnsResolveCallback>:
{
   130d4:	b510      	push	{r4, lr}
   130d6:	0002      	movs	r2, r0
   130d8:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   130da:	4b08      	ldr	r3, [pc, #32]	; (130fc <dnsResolveCallback+0x28>)
   130dc:	781b      	ldrb	r3, [r3, #0]
   130de:	2b00      	cmp	r3, #0
   130e0:	d10b      	bne.n	130fa <dnsResolveCallback+0x26>
   130e2:	4b07      	ldr	r3, [pc, #28]	; (13100 <dnsResolveCallback+0x2c>)
   130e4:	6818      	ldr	r0, [r3, #0]
   130e6:	0011      	movs	r1, r2
   130e8:	4b06      	ldr	r3, [pc, #24]	; (13104 <dnsResolveCallback+0x30>)
   130ea:	4798      	blx	r3
   130ec:	2800      	cmp	r0, #0
   130ee:	d104      	bne.n	130fa <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
   130f0:	4b05      	ldr	r3, [pc, #20]	; (13108 <dnsResolveCallback+0x34>)
   130f2:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   130f4:	2201      	movs	r2, #1
   130f6:	4b01      	ldr	r3, [pc, #4]	; (130fc <dnsResolveCallback+0x28>)
   130f8:	701a      	strb	r2, [r3, #0]
}
   130fa:	bd10      	pop	{r4, pc}
   130fc:	20000465 	.word	0x20000465
   13100:	20000570 	.word	0x20000570
   13104:	00016afd 	.word	0x00016afd
   13108:	20000568 	.word	0x20000568

0001310c <tcpClientSocketEventHandler>:
{
   1310c:	b530      	push	{r4, r5, lr}
   1310e:	4b12      	ldr	r3, [pc, #72]	; (13158 <tcpClientSocketEventHandler+0x4c>)
   13110:	24a8      	movs	r4, #168	; 0xa8
   13112:	00a4      	lsls	r4, r4, #2
   13114:	191d      	adds	r5, r3, r4
   13116:	e002      	b.n	1311e <tcpClientSocketEventHandler+0x12>
   13118:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   1311a:	42ab      	cmp	r3, r5
   1311c:	d00b      	beq.n	13136 <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   1311e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   13120:	2c00      	cmp	r4, #0
   13122:	d0f9      	beq.n	13118 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
   13124:	6a24      	ldr	r4, [r4, #32]
   13126:	4284      	cmp	r4, r0
   13128:	d1f6      	bne.n	13118 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
   1312a:	2906      	cmp	r1, #6
   1312c:	d00c      	beq.n	13148 <tcpClientSocketEventHandler+0x3c>
   1312e:	2907      	cmp	r1, #7
   13130:	d006      	beq.n	13140 <tcpClientSocketEventHandler+0x34>
   13132:	2905      	cmp	r1, #5
   13134:	d000      	beq.n	13138 <tcpClientSocketEventHandler+0x2c>
}
   13136:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
   13138:	2201      	movs	r2, #1
   1313a:	4b08      	ldr	r3, [pc, #32]	; (1315c <tcpClientSocketEventHandler+0x50>)
   1313c:	701a      	strb	r2, [r3, #0]
			break;
   1313e:	e7fa      	b.n	13136 <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
   13140:	2201      	movs	r2, #1
   13142:	4b07      	ldr	r3, [pc, #28]	; (13160 <tcpClientSocketEventHandler+0x54>)
   13144:	701a      	strb	r2, [r3, #0]
			break;
   13146:	e7f6      	b.n	13136 <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   13148:	2304      	movs	r3, #4
   1314a:	5ed2      	ldrsh	r2, [r2, r3]
   1314c:	4b05      	ldr	r3, [pc, #20]	; (13164 <tcpClientSocketEventHandler+0x58>)
   1314e:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   13150:	2201      	movs	r2, #1
   13152:	4b05      	ldr	r3, [pc, #20]	; (13168 <tcpClientSocketEventHandler+0x5c>)
   13154:	701a      	strb	r2, [r3, #0]
}
   13156:	e7ee      	b.n	13136 <tcpClientSocketEventHandler+0x2a>
   13158:	2000057c 	.word	0x2000057c
   1315c:	20000464 	.word	0x20000464
   13160:	20000467 	.word	0x20000467
   13164:	2000056c 	.word	0x2000056c
   13168:	20000466 	.word	0x20000466

0001316c <SysTick_Handler>:
	MilliTimer++;
   1316c:	4a02      	ldr	r2, [pc, #8]	; (13178 <SysTick_Handler+0xc>)
   1316e:	6813      	ldr	r3, [r2, #0]
   13170:	3301      	adds	r3, #1
   13172:	6013      	str	r3, [r2, #0]
}
   13174:	4770      	bx	lr
   13176:	46c0      	nop			; (mov r8, r8)
   13178:	20000460 	.word	0x20000460

0001317c <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
   1317c:	6840      	ldr	r0, [r0, #4]
   1317e:	4b02      	ldr	r3, [pc, #8]	; (13188 <TimerIsExpired+0xc>)
   13180:	681b      	ldr	r3, [r3, #0]
   13182:	1ac0      	subs	r0, r0, r3
	return (left < 0);
   13184:	0fc0      	lsrs	r0, r0, #31
}
   13186:	4770      	bx	lr
   13188:	20000460 	.word	0x20000460

0001318c <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
   1318c:	4b02      	ldr	r3, [pc, #8]	; (13198 <TimerCountdownMS+0xc>)
   1318e:	681b      	ldr	r3, [r3, #0]
   13190:	1859      	adds	r1, r3, r1
   13192:	6041      	str	r1, [r0, #4]
}
   13194:	4770      	bx	lr
   13196:	46c0      	nop			; (mov r8, r8)
   13198:	20000460 	.word	0x20000460

0001319c <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
   1319c:	23fa      	movs	r3, #250	; 0xfa
   1319e:	009b      	lsls	r3, r3, #2
   131a0:	4359      	muls	r1, r3
   131a2:	4b02      	ldr	r3, [pc, #8]	; (131ac <TimerCountdown+0x10>)
   131a4:	681b      	ldr	r3, [r3, #0]
   131a6:	18c9      	adds	r1, r1, r3
   131a8:	6041      	str	r1, [r0, #4]
}
   131aa:	4770      	bx	lr
   131ac:	20000460 	.word	0x20000460

000131b0 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
   131b0:	6840      	ldr	r0, [r0, #4]
   131b2:	4b03      	ldr	r3, [pc, #12]	; (131c0 <TimerLeftMS+0x10>)
   131b4:	681b      	ldr	r3, [r3, #0]
   131b6:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
   131b8:	43c3      	mvns	r3, r0
   131ba:	17db      	asrs	r3, r3, #31
   131bc:	4018      	ands	r0, r3
}
   131be:	4770      	bx	lr
   131c0:	20000460 	.word	0x20000460

000131c4 <TimerInit>:
	timer->end_time = 0;
   131c4:	2300      	movs	r3, #0
   131c6:	6043      	str	r3, [r0, #4]
}
   131c8:	4770      	bx	lr
	...

000131cc <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
   131cc:	2301      	movs	r3, #1
   131ce:	425b      	negs	r3, r3
   131d0:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
   131d2:	4b03      	ldr	r3, [pc, #12]	; (131e0 <NetworkInit+0x14>)
   131d4:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
   131d6:	4b03      	ldr	r3, [pc, #12]	; (131e4 <NetworkInit+0x18>)
   131d8:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
   131da:	4b03      	ldr	r3, [pc, #12]	; (131e8 <NetworkInit+0x1c>)
   131dc:	6103      	str	r3, [r0, #16]
}
   131de:	4770      	bx	lr
   131e0:	0001301d 	.word	0x0001301d
   131e4:	00012fd5 	.word	0x00012fd5
   131e8:	00012fb1 	.word	0x00012fb1

000131ec <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   131ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   131ee:	b087      	sub	sp, #28
   131f0:	0006      	movs	r6, r0
   131f2:	0015      	movs	r5, r2
   131f4:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   131f6:	4c25      	ldr	r4, [pc, #148]	; (1328c <ConnectNetwork+0xa0>)
   131f8:	2300      	movs	r3, #0
   131fa:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
   131fc:	4b24      	ldr	r3, [pc, #144]	; (13290 <ConnectNetwork+0xa4>)
   131fe:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
   13200:	0008      	movs	r0, r1
   13202:	4b24      	ldr	r3, [pc, #144]	; (13294 <ConnectNetwork+0xa8>)
   13204:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   13206:	7823      	ldrb	r3, [r4, #0]
   13208:	2b00      	cmp	r3, #0
   1320a:	d106      	bne.n	1321a <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
   1320c:	4f22      	ldr	r7, [pc, #136]	; (13298 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
   1320e:	4c1f      	ldr	r4, [pc, #124]	; (1328c <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
   13210:	2000      	movs	r0, #0
   13212:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
   13214:	7823      	ldrb	r3, [r4, #0]
   13216:	2b00      	cmp	r3, #0
   13218:	d0fa      	beq.n	13210 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   1321a:	4b20      	ldr	r3, [pc, #128]	; (1329c <ConnectNetwork+0xb0>)
   1321c:	681a      	ldr	r2, [r3, #0]
   1321e:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   13220:	2302      	movs	r3, #2
   13222:	a902      	add	r1, sp, #8
   13224:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
   13226:	022b      	lsls	r3, r5, #8
   13228:	491d      	ldr	r1, [pc, #116]	; (132a0 <ConnectNetwork+0xb4>)
   1322a:	400b      	ands	r3, r1
   1322c:	b2ad      	uxth	r5, r5
   1322e:	0a2d      	lsrs	r5, r5, #8
   13230:	431d      	orrs	r5, r3
   13232:	ab02      	add	r3, sp, #8
   13234:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   13236:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
   13238:	6833      	ldr	r3, [r6, #0]
   1323a:	2b00      	cmp	r3, #0
   1323c:	db16      	blt.n	1326c <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   1323e:	6830      	ldr	r0, [r6, #0]
   13240:	1c43      	adds	r3, r0, #1
   13242:	d01b      	beq.n	1327c <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   13244:	b240      	sxtb	r0, r0
   13246:	2210      	movs	r2, #16
   13248:	a902      	add	r1, sp, #8
   1324a:	4b16      	ldr	r3, [pc, #88]	; (132a4 <ConnectNetwork+0xb8>)
   1324c:	4798      	blx	r3
   1324e:	2800      	cmp	r0, #0
   13250:	d119      	bne.n	13286 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
   13252:	2200      	movs	r2, #0
   13254:	4b14      	ldr	r3, [pc, #80]	; (132a8 <ConnectNetwork+0xbc>)
   13256:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
   13258:	4d0f      	ldr	r5, [pc, #60]	; (13298 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
   1325a:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
   1325c:	2000      	movs	r0, #0
   1325e:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
   13260:	7823      	ldrb	r3, [r4, #0]
   13262:	2b00      	cmp	r3, #0
   13264:	d0fa      	beq.n	1325c <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   13266:	2000      	movs	r0, #0
   13268:	b007      	add	sp, #28
   1326a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   1326c:	466b      	mov	r3, sp
   1326e:	791a      	ldrb	r2, [r3, #4]
   13270:	2101      	movs	r1, #1
   13272:	2002      	movs	r0, #2
   13274:	4b0d      	ldr	r3, [pc, #52]	; (132ac <ConnectNetwork+0xc0>)
   13276:	4798      	blx	r3
   13278:	6030      	str	r0, [r6, #0]
   1327a:	e7e0      	b.n	1323e <ConnectNetwork+0x52>
   close(n->socket);
   1327c:	4b0c      	ldr	r3, [pc, #48]	; (132b0 <ConnectNetwork+0xc4>)
   1327e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   13280:	2009      	movs	r0, #9
   13282:	4240      	negs	r0, r0
   13284:	e7f0      	b.n	13268 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
   13286:	2009      	movs	r0, #9
   13288:	4240      	negs	r0, r0
   1328a:	e7ed      	b.n	13268 <ConnectNetwork+0x7c>
   1328c:	20000465 	.word	0x20000465
   13290:	20000570 	.word	0x20000570
   13294:	0000ded1 	.word	0x0000ded1
   13298:	0000bf01 	.word	0x0000bf01
   1329c:	20000568 	.word	0x20000568
   132a0:	00ffff00 	.word	0x00ffff00
   132a4:	0000dc0d 	.word	0x0000dc0d
   132a8:	20000464 	.word	0x20000464
   132ac:	0000da89 	.word	0x0000da89
   132b0:	0000ddc9 	.word	0x0000ddc9

000132b4 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   132b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   132b6:	b085      	sub	sp, #20
   132b8:	0006      	movs	r6, r0
   132ba:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   132bc:	2800      	cmp	r0, #0
   132be:	d03d      	beq.n	1333c <mqtt_init+0x88>
   132c0:	2900      	cmp	r1, #0
   132c2:	d03e      	beq.n	13342 <mqtt_init+0x8e>
   132c4:	690b      	ldr	r3, [r1, #16]
   132c6:	2b00      	cmp	r3, #0
   132c8:	d03e      	beq.n	13348 <mqtt_init+0x94>
   132ca:	688b      	ldr	r3, [r1, #8]
   132cc:	2b00      	cmp	r3, #0
   132ce:	d03e      	beq.n	1334e <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
   132d0:	888b      	ldrh	r3, [r1, #4]
   132d2:	27fa      	movs	r7, #250	; 0xfa
   132d4:	00bf      	lsls	r7, r7, #2
   132d6:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
   132d8:	0004      	movs	r4, r0
   132da:	3420      	adds	r4, #32
   132dc:	0020      	movs	r0, r4
   132de:	4b1f      	ldr	r3, [pc, #124]	; (1335c <mqtt_init+0xa8>)
   132e0:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   132e2:	1d30      	adds	r0, r6, #4
   132e4:	2218      	movs	r2, #24
   132e6:	0029      	movs	r1, r5
   132e8:	4b1d      	ldr	r3, [pc, #116]	; (13360 <mqtt_init+0xac>)
   132ea:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   132ec:	4b1d      	ldr	r3, [pc, #116]	; (13364 <mqtt_init+0xb0>)
   132ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   132f0:	2b00      	cmp	r3, #0
   132f2:	d01a      	beq.n	1332a <mqtt_init+0x76>
   132f4:	4b1b      	ldr	r3, [pc, #108]	; (13364 <mqtt_init+0xb0>)
   132f6:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   132f8:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   132fa:	6819      	ldr	r1, [r3, #0]
   132fc:	2900      	cmp	r1, #0
   132fe:	d015      	beq.n	1332c <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   13300:	3201      	adds	r2, #1
   13302:	3360      	adds	r3, #96	; 0x60
   13304:	2a07      	cmp	r2, #7
   13306:	d1f8      	bne.n	132fa <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
   13308:	69f0      	ldr	r0, [r6, #28]
   1330a:	2800      	cmp	r0, #0
   1330c:	d022      	beq.n	13354 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   1330e:	692b      	ldr	r3, [r5, #16]
   13310:	68ea      	ldr	r2, [r5, #12]
   13312:	9202      	str	r2, [sp, #8]
   13314:	68aa      	ldr	r2, [r5, #8]
   13316:	9201      	str	r2, [sp, #4]
   13318:	696a      	ldr	r2, [r5, #20]
   1331a:	9200      	str	r2, [sp, #0]
   1331c:	003a      	movs	r2, r7
   1331e:	0021      	movs	r1, r4
   13320:	4c11      	ldr	r4, [pc, #68]	; (13368 <mqtt_init+0xb4>)
   13322:	47a0      	blx	r4
		return SUCCESS;
   13324:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   13326:	b005      	add	sp, #20
   13328:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   1332a:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
   1332c:	480d      	ldr	r0, [pc, #52]	; (13364 <mqtt_init+0xb0>)
   1332e:	0053      	lsls	r3, r2, #1
   13330:	1899      	adds	r1, r3, r2
   13332:	0149      	lsls	r1, r1, #5
   13334:	1841      	adds	r1, r0, r1
   13336:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
   13338:	61f1      	str	r1, [r6, #28]
   1333a:	e7e5      	b.n	13308 <mqtt_init+0x54>
		return FAILURE;
   1333c:	2001      	movs	r0, #1
   1333e:	4240      	negs	r0, r0
   13340:	e7f1      	b.n	13326 <mqtt_init+0x72>
   13342:	2001      	movs	r0, #1
   13344:	4240      	negs	r0, r0
   13346:	e7ee      	b.n	13326 <mqtt_init+0x72>
   13348:	2001      	movs	r0, #1
   1334a:	4240      	negs	r0, r0
   1334c:	e7eb      	b.n	13326 <mqtt_init+0x72>
   1334e:	2001      	movs	r0, #1
   13350:	4240      	negs	r0, r0
   13352:	e7e8      	b.n	13326 <mqtt_init+0x72>
		return FAILURE;
   13354:	2001      	movs	r0, #1
   13356:	4240      	negs	r0, r0
   13358:	e7e5      	b.n	13326 <mqtt_init+0x72>
   1335a:	46c0      	nop			; (mov r8, r8)
   1335c:	000131cd 	.word	0x000131cd
   13360:	000165c9 	.word	0x000165c9
   13364:	2000057c 	.word	0x2000057c
   13368:	0001287d 	.word	0x0001287d

0001336c <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
   1336c:	4b05      	ldr	r3, [pc, #20]	; (13384 <mqtt_get_config_defaults+0x18>)
   1336e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
   13370:	2300      	movs	r3, #0
   13372:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
   13374:	223c      	movs	r2, #60	; 0x3c
   13376:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   13378:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
   1337a:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
   1337c:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
   1337e:	6143      	str	r3, [r0, #20]
}
   13380:	4770      	bx	lr
   13382:	46c0      	nop			; (mov r8, r8)
   13384:	0000075b 	.word	0x0000075b

00013388 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
   13388:	2800      	cmp	r0, #0
   1338a:	d002      	beq.n	13392 <mqtt_register_callback+0xa>
	{
		module->callback = callback;
   1338c:	6001      	str	r1, [r0, #0]
		return SUCCESS;
   1338e:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
   13390:	4770      	bx	lr
		return FAILURE;
   13392:	2001      	movs	r0, #1
   13394:	4240      	negs	r0, r0
   13396:	e7fb      	b.n	13390 <mqtt_register_callback+0x8>

00013398 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   13398:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   1339a:	4b01      	ldr	r3, [pc, #4]	; (133a0 <mqtt_socket_event_handler+0x8>)
   1339c:	4798      	blx	r3
}
   1339e:	bd10      	pop	{r4, pc}
   133a0:	0001310d 	.word	0x0001310d

000133a4 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   133a4:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
   133a6:	4b01      	ldr	r3, [pc, #4]	; (133ac <mqtt_socket_resolve_handler+0x8>)
   133a8:	4798      	blx	r3
}
   133aa:	bd10      	pop	{r4, pc}
   133ac:	000130d5 	.word	0x000130d5

000133b0 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   133b0:	b530      	push	{r4, r5, lr}
   133b2:	b083      	sub	sp, #12
   133b4:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   133b6:	7983      	ldrb	r3, [r0, #6]
   133b8:	8882      	ldrh	r2, [r0, #4]
   133ba:	3020      	adds	r0, #32
   133bc:	4d06      	ldr	r5, [pc, #24]	; (133d8 <mqtt_connect+0x28>)
   133be:	47a8      	blx	r5
   133c0:	9001      	str	r0, [sp, #4]
	if(module->callback)
   133c2:	6823      	ldr	r3, [r4, #0]
   133c4:	2b00      	cmp	r3, #0
   133c6:	d003      	beq.n	133d0 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   133c8:	aa01      	add	r2, sp, #4
   133ca:	2100      	movs	r1, #0
   133cc:	0020      	movs	r0, r4
   133ce:	4798      	blx	r3
	return connResult.sock_connected.result;
}
   133d0:	9801      	ldr	r0, [sp, #4]
   133d2:	b003      	add	sp, #12
   133d4:	bd30      	pop	{r4, r5, pc}
   133d6:	46c0      	nop			; (mov r8, r8)
   133d8:	000131ed 	.word	0x000131ed

000133dc <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   133dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   133de:	46de      	mov	lr, fp
   133e0:	4657      	mov	r7, sl
   133e2:	464e      	mov	r6, r9
   133e4:	b5c0      	push	{r6, r7, lr}
   133e6:	b098      	sub	sp, #96	; 0x60
   133e8:	0005      	movs	r5, r0
   133ea:	4689      	mov	r9, r1
   133ec:	4693      	mov	fp, r2
   133ee:	469a      	mov	sl, r3
   133f0:	ab24      	add	r3, sp, #144	; 0x90
   133f2:	781f      	ldrb	r7, [r3, #0]
   133f4:	ab25      	add	r3, sp, #148	; 0x94
   133f6:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   133f8:	ac01      	add	r4, sp, #4
   133fa:	2258      	movs	r2, #88	; 0x58
   133fc:	491a      	ldr	r1, [pc, #104]	; (13468 <mqtt_connect_broker+0x8c>)
   133fe:	0020      	movs	r0, r4
   13400:	4b1a      	ldr	r3, [pc, #104]	; (1346c <mqtt_connect_broker+0x90>)
   13402:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
   13404:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13406:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
   13408:	465b      	mov	r3, fp
   1340a:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   1340c:	4653      	mov	r3, sl
   1340e:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
   13410:	464b      	mov	r3, r9
   13412:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   13414:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13416:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   13418:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1341a:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
   1341c:	233c      	movs	r3, #60	; 0x3c
   1341e:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
   13420:	3301      	adds	r3, #1
   13422:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
   13424:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13426:	2b00      	cmp	r3, #0
   13428:	d005      	beq.n	13436 <mqtt_connect_broker+0x5a>
   1342a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1342c:	2b00      	cmp	r3, #0
   1342e:	d002      	beq.n	13436 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
   13430:	2201      	movs	r2, #1
   13432:	ab01      	add	r3, sp, #4
   13434:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   13436:	a901      	add	r1, sp, #4
   13438:	69e8      	ldr	r0, [r5, #28]
   1343a:	4b0d      	ldr	r3, [pc, #52]	; (13470 <mqtt_connect_broker+0x94>)
   1343c:	4798      	blx	r3
   1343e:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
   13440:	ab17      	add	r3, sp, #92	; 0x5c
   13442:	7018      	strb	r0, [r3, #0]
	if(module->callback)
   13444:	682b      	ldr	r3, [r5, #0]
   13446:	2b00      	cmp	r3, #0
   13448:	d003      	beq.n	13452 <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   1344a:	aa17      	add	r2, sp, #92	; 0x5c
   1344c:	2101      	movs	r1, #1
   1344e:	0028      	movs	r0, r5
   13450:	4798      	blx	r3
	
	module->isConnected = true;
   13452:	2201      	movs	r2, #1
   13454:	2334      	movs	r3, #52	; 0x34
   13456:	54ea      	strb	r2, [r5, r3]
	return rc;
}
   13458:	0020      	movs	r0, r4
   1345a:	b018      	add	sp, #96	; 0x60
   1345c:	bc1c      	pop	{r2, r3, r4}
   1345e:	4691      	mov	r9, r2
   13460:	469a      	mov	sl, r3
   13462:	46a3      	mov	fp, r4
   13464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13466:	46c0      	nop			; (mov r8, r8)
   13468:	00019ee8 	.word	0x00019ee8
   1346c:	000165c9 	.word	0x000165c9
   13470:	00012c85 	.word	0x00012c85

00013474 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   13474:	b530      	push	{r4, r5, lr}
   13476:	b083      	sub	sp, #12
   13478:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   1347a:	69c0      	ldr	r0, [r0, #28]
   1347c:	4b08      	ldr	r3, [pc, #32]	; (134a0 <mqtt_disconnect+0x2c>)
   1347e:	4798      	blx	r3
   13480:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
   13482:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
   13484:	6823      	ldr	r3, [r4, #0]
   13486:	2b00      	cmp	r3, #0
   13488:	d003      	beq.n	13492 <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   1348a:	aa01      	add	r2, sp, #4
   1348c:	2105      	movs	r1, #5
   1348e:	0020      	movs	r0, r4
   13490:	4798      	blx	r3
	
	module->isConnected = false;
   13492:	2200      	movs	r2, #0
   13494:	2334      	movs	r3, #52	; 0x34
   13496:	54e2      	strb	r2, [r4, r3]
	return rc;
}
   13498:	0028      	movs	r0, r5
   1349a:	b003      	add	sp, #12
   1349c:	bd30      	pop	{r4, r5, pc}
   1349e:	46c0      	nop			; (mov r8, r8)
   134a0:	00012f69 	.word	0x00012f69

000134a4 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   134a4:	b570      	push	{r4, r5, r6, lr}
   134a6:	b084      	sub	sp, #16
   134a8:	0004      	movs	r4, r0
   134aa:	a808      	add	r0, sp, #32
   134ac:	7805      	ldrb	r5, [r0, #0]
   134ae:	a809      	add	r0, sp, #36	; 0x24
   134b0:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   134b2:	466e      	mov	r6, sp
   134b4:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
   134b6:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   134b8:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
   134ba:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   134bc:	466a      	mov	r2, sp
   134be:	69e0      	ldr	r0, [r4, #28]
   134c0:	4b06      	ldr	r3, [pc, #24]	; (134dc <mqtt_publish+0x38>)
   134c2:	4798      	blx	r3
   134c4:	0005      	movs	r5, r0
	
	if(module->callback)
   134c6:	6823      	ldr	r3, [r4, #0]
   134c8:	2b00      	cmp	r3, #0
   134ca:	d003      	beq.n	134d4 <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   134cc:	2200      	movs	r2, #0
   134ce:	2102      	movs	r1, #2
   134d0:	0020      	movs	r0, r4
   134d2:	4798      	blx	r3
	
	return rc;
}
   134d4:	0028      	movs	r0, r5
   134d6:	b004      	add	sp, #16
   134d8:	bd70      	pop	{r4, r5, r6, pc}
   134da:	46c0      	nop			; (mov r8, r8)
   134dc:	00012e59 	.word	0x00012e59

000134e0 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   134e0:	b570      	push	{r4, r5, r6, lr}
   134e2:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   134e4:	69c0      	ldr	r0, [r0, #28]
   134e6:	4d06      	ldr	r5, [pc, #24]	; (13500 <mqtt_subscribe+0x20>)
   134e8:	47a8      	blx	r5
   134ea:	0005      	movs	r5, r0
	
	if(module->callback)
   134ec:	6823      	ldr	r3, [r4, #0]
   134ee:	2b00      	cmp	r3, #0
   134f0:	d003      	beq.n	134fa <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   134f2:	2200      	movs	r2, #0
   134f4:	2103      	movs	r1, #3
   134f6:	0020      	movs	r0, r4
   134f8:	4798      	blx	r3
	
	return rc;
}
   134fa:	0028      	movs	r0, r5
   134fc:	bd70      	pop	{r4, r5, r6, pc}
   134fe:	46c0      	nop			; (mov r8, r8)
   13500:	00012d55 	.word	0x00012d55

00013504 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   13504:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
   13506:	69c0      	ldr	r0, [r0, #28]
   13508:	4b01      	ldr	r3, [pc, #4]	; (13510 <mqtt_yield+0xc>)
   1350a:	4798      	blx	r3
   1350c:	bd10      	pop	{r4, pc}
   1350e:	46c0      	nop			; (mov r8, r8)
   13510:	00012c09 	.word	0x00012c09

00013514 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   13514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13516:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   13518:	7a03      	ldrb	r3, [r0, #8]
   1351a:	2b03      	cmp	r3, #3
   1351c:	d024      	beq.n	13568 <MQTTSerialize_connectLength+0x54>
	int len = 0;
   1351e:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
   13520:	2b04      	cmp	r3, #4
   13522:	d01f      	beq.n	13564 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
   13524:	68e0      	ldr	r0, [r4, #12]
   13526:	6921      	ldr	r1, [r4, #16]
   13528:	6962      	ldr	r2, [r4, #20]
   1352a:	4b1b      	ldr	r3, [pc, #108]	; (13598 <MQTTSerialize_connectLength+0x84>)
   1352c:	4798      	blx	r3
   1352e:	1c85      	adds	r5, r0, #2
   13530:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
   13532:	7ee3      	ldrb	r3, [r4, #27]
   13534:	2b00      	cmp	r3, #0
   13536:	d119      	bne.n	1356c <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
   13538:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1353a:	2b00      	cmp	r3, #0
   1353c:	d024      	beq.n	13588 <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
   1353e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   13540:	6c61      	ldr	r1, [r4, #68]	; 0x44
   13542:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   13544:	4b14      	ldr	r3, [pc, #80]	; (13598 <MQTTSerialize_connectLength+0x84>)
   13546:	4798      	blx	r3
   13548:	3002      	adds	r0, #2
   1354a:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
   1354c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1354e:	2b00      	cmp	r3, #0
   13550:	d01e      	beq.n	13590 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
   13552:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   13554:	6d21      	ldr	r1, [r4, #80]	; 0x50
   13556:	6d62      	ldr	r2, [r4, #84]	; 0x54
   13558:	4b0f      	ldr	r3, [pc, #60]	; (13598 <MQTTSerialize_connectLength+0x84>)
   1355a:	4798      	blx	r3
   1355c:	3002      	adds	r0, #2
   1355e:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
   13560:	0028      	movs	r0, r5
   13562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
   13564:	360a      	adds	r6, #10
   13566:	e7dd      	b.n	13524 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
   13568:	260c      	movs	r6, #12
   1356a:	e7db      	b.n	13524 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   1356c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1356e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   13570:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13572:	4f09      	ldr	r7, [pc, #36]	; (13598 <MQTTSerialize_connectLength+0x84>)
   13574:	47b8      	blx	r7
   13576:	0006      	movs	r6, r0
   13578:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1357a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1357c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1357e:	47b8      	blx	r7
   13580:	1836      	adds	r6, r6, r0
   13582:	3604      	adds	r6, #4
   13584:	19ad      	adds	r5, r5, r6
   13586:	e7d7      	b.n	13538 <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
   13588:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1358a:	2b00      	cmp	r3, #0
   1358c:	d1d7      	bne.n	1353e <MQTTSerialize_connectLength+0x2a>
   1358e:	e7dd      	b.n	1354c <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
   13590:	6d63      	ldr	r3, [r4, #84]	; 0x54
   13592:	2b00      	cmp	r3, #0
   13594:	d1dd      	bne.n	13552 <MQTTSerialize_connectLength+0x3e>
   13596:	e7e3      	b.n	13560 <MQTTSerialize_connectLength+0x4c>
   13598:	00013a7d 	.word	0x00013a7d

0001359c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   1359c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1359e:	b083      	sub	sp, #12
   135a0:	0006      	movs	r6, r0
   135a2:	000f      	movs	r7, r1
   135a4:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
   135a6:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   135a8:	0010      	movs	r0, r2
   135aa:	4b45      	ldr	r3, [pc, #276]	; (136c0 <MQTTSerialize_connect+0x124>)
   135ac:	4798      	blx	r3
   135ae:	0004      	movs	r4, r0
   135b0:	4b44      	ldr	r3, [pc, #272]	; (136c4 <MQTTSerialize_connect+0x128>)
   135b2:	4798      	blx	r3
   135b4:	42b8      	cmp	r0, r7
   135b6:	dd00      	ble.n	135ba <MQTTSerialize_connect+0x1e>
   135b8:	e07f      	b.n	136ba <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
   135ba:	2110      	movs	r1, #16
   135bc:	a801      	add	r0, sp, #4
   135be:	4b42      	ldr	r3, [pc, #264]	; (136c8 <MQTTSerialize_connect+0x12c>)
   135c0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   135c2:	0021      	movs	r1, r4
   135c4:	9801      	ldr	r0, [sp, #4]
   135c6:	4b41      	ldr	r3, [pc, #260]	; (136cc <MQTTSerialize_connect+0x130>)
   135c8:	4798      	blx	r3
   135ca:	9b01      	ldr	r3, [sp, #4]
   135cc:	469c      	mov	ip, r3
   135ce:	4460      	add	r0, ip
   135d0:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
   135d2:	7a2b      	ldrb	r3, [r5, #8]
   135d4:	2b04      	cmp	r3, #4
   135d6:	d045      	beq.n	13664 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   135d8:	493d      	ldr	r1, [pc, #244]	; (136d0 <MQTTSerialize_connect+0x134>)
   135da:	a801      	add	r0, sp, #4
   135dc:	4b3d      	ldr	r3, [pc, #244]	; (136d4 <MQTTSerialize_connect+0x138>)
   135de:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   135e0:	2103      	movs	r1, #3
   135e2:	a801      	add	r0, sp, #4
   135e4:	4b38      	ldr	r3, [pc, #224]	; (136c8 <MQTTSerialize_connect+0x12c>)
   135e6:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
   135e8:	7ea9      	ldrb	r1, [r5, #26]
   135ea:	2301      	movs	r3, #1
   135ec:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
   135ee:	7eea      	ldrb	r2, [r5, #27]
   135f0:	1e50      	subs	r0, r2, #1
   135f2:	4182      	sbcs	r2, r0
   135f4:	b2d2      	uxtb	r2, r2
   135f6:	4013      	ands	r3, r2
   135f8:	009b      	lsls	r3, r3, #2
   135fa:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
   135fc:	4319      	orrs	r1, r3
   135fe:	2b00      	cmp	r3, #0
   13600:	d00b      	beq.n	1361a <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
   13602:	233d      	movs	r3, #61	; 0x3d
   13604:	5cea      	ldrb	r2, [r5, r3]
   13606:	3b3a      	subs	r3, #58	; 0x3a
   13608:	4013      	ands	r3, r2
   1360a:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
   1360c:	223c      	movs	r2, #60	; 0x3c
   1360e:	5ca8      	ldrb	r0, [r5, r2]
   13610:	3a3b      	subs	r2, #59	; 0x3b
   13612:	4002      	ands	r2, r0
   13614:	0152      	lsls	r2, r2, #5
   13616:	4319      	orrs	r1, r3
   13618:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
   1361a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1361c:	2b00      	cmp	r3, #0
   1361e:	d02a      	beq.n	13676 <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
   13620:	2380      	movs	r3, #128	; 0x80
   13622:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
   13624:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   13626:	2b00      	cmp	r3, #0
   13628:	d029      	beq.n	1367e <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
   1362a:	2340      	movs	r3, #64	; 0x40
   1362c:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
   1362e:	b2cc      	uxtb	r4, r1
   13630:	0021      	movs	r1, r4
   13632:	a801      	add	r0, sp, #4
   13634:	4b24      	ldr	r3, [pc, #144]	; (136c8 <MQTTSerialize_connect+0x12c>)
   13636:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   13638:	8b29      	ldrh	r1, [r5, #24]
   1363a:	a801      	add	r0, sp, #4
   1363c:	4b26      	ldr	r3, [pc, #152]	; (136d8 <MQTTSerialize_connect+0x13c>)
   1363e:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   13640:	68e9      	ldr	r1, [r5, #12]
   13642:	692a      	ldr	r2, [r5, #16]
   13644:	696b      	ldr	r3, [r5, #20]
   13646:	a801      	add	r0, sp, #4
   13648:	4f24      	ldr	r7, [pc, #144]	; (136dc <MQTTSerialize_connect+0x140>)
   1364a:	47b8      	blx	r7
	if (options->willFlag)
   1364c:	7eeb      	ldrb	r3, [r5, #27]
   1364e:	2b00      	cmp	r3, #0
   13650:	d119      	bne.n	13686 <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
   13652:	b263      	sxtb	r3, r4
   13654:	2b00      	cmp	r3, #0
   13656:	db22      	blt.n	1369e <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
   13658:	0663      	lsls	r3, r4, #25
   1365a:	d427      	bmi.n	136ac <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
   1365c:	9b01      	ldr	r3, [sp, #4]
   1365e:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
   13660:	b003      	add	sp, #12
   13662:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
   13664:	491e      	ldr	r1, [pc, #120]	; (136e0 <MQTTSerialize_connect+0x144>)
   13666:	a801      	add	r0, sp, #4
   13668:	4b1a      	ldr	r3, [pc, #104]	; (136d4 <MQTTSerialize_connect+0x138>)
   1366a:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   1366c:	2104      	movs	r1, #4
   1366e:	a801      	add	r0, sp, #4
   13670:	4b15      	ldr	r3, [pc, #84]	; (136c8 <MQTTSerialize_connect+0x12c>)
   13672:	4798      	blx	r3
   13674:	e7b8      	b.n	135e8 <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
   13676:	6cab      	ldr	r3, [r5, #72]	; 0x48
   13678:	2b00      	cmp	r3, #0
   1367a:	d1d1      	bne.n	13620 <MQTTSerialize_connect+0x84>
   1367c:	e7d2      	b.n	13624 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
   1367e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   13680:	2b00      	cmp	r3, #0
   13682:	d1d2      	bne.n	1362a <MQTTSerialize_connect+0x8e>
   13684:	e7d3      	b.n	1362e <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
   13686:	6a69      	ldr	r1, [r5, #36]	; 0x24
   13688:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1368a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1368c:	a801      	add	r0, sp, #4
   1368e:	4f13      	ldr	r7, [pc, #76]	; (136dc <MQTTSerialize_connect+0x140>)
   13690:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
   13692:	6b29      	ldr	r1, [r5, #48]	; 0x30
   13694:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   13696:	6bab      	ldr	r3, [r5, #56]	; 0x38
   13698:	a801      	add	r0, sp, #4
   1369a:	47b8      	blx	r7
   1369c:	e7d9      	b.n	13652 <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
   1369e:	6c29      	ldr	r1, [r5, #64]	; 0x40
   136a0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   136a2:	6cab      	ldr	r3, [r5, #72]	; 0x48
   136a4:	a801      	add	r0, sp, #4
   136a6:	4f0d      	ldr	r7, [pc, #52]	; (136dc <MQTTSerialize_connect+0x140>)
   136a8:	47b8      	blx	r7
   136aa:	e7d5      	b.n	13658 <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
   136ac:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   136ae:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   136b0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   136b2:	a801      	add	r0, sp, #4
   136b4:	4c09      	ldr	r4, [pc, #36]	; (136dc <MQTTSerialize_connect+0x140>)
   136b6:	47a0      	blx	r4
   136b8:	e7d0      	b.n	1365c <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   136ba:	2002      	movs	r0, #2
   136bc:	4240      	negs	r0, r0
	return rc;
   136be:	e7cf      	b.n	13660 <MQTTSerialize_connect+0xc4>
   136c0:	00013515 	.word	0x00013515
   136c4:	00013921 	.word	0x00013921
   136c8:	00013983 	.word	0x00013983
   136cc:	00013899 	.word	0x00013899
   136d0:	00019f48 	.word	0x00019f48
   136d4:	000139b9 	.word	0x000139b9
   136d8:	0001398f 	.word	0x0001398f
   136dc:	000139f1 	.word	0x000139f1
   136e0:	00019f40 	.word	0x00019f40

000136e4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   136e4:	b570      	push	{r4, r5, r6, lr}
   136e6:	b082      	sub	sp, #8
   136e8:	0005      	movs	r5, r0
   136ea:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   136ec:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   136ee:	a801      	add	r0, sp, #4
   136f0:	4b0e      	ldr	r3, [pc, #56]	; (1372c <MQTTDeserialize_connack+0x48>)
   136f2:	4798      	blx	r3
	if (header.bits.type != CONNACK)
   136f4:	23f0      	movs	r3, #240	; 0xf0
   136f6:	4003      	ands	r3, r0
	int rc = 0;
   136f8:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
   136fa:	2b20      	cmp	r3, #32
   136fc:	d001      	beq.n	13702 <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   136fe:	b002      	add	sp, #8
   13700:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   13702:	4669      	mov	r1, sp
   13704:	9801      	ldr	r0, [sp, #4]
   13706:	4b0a      	ldr	r3, [pc, #40]	; (13730 <MQTTDeserialize_connack+0x4c>)
   13708:	4798      	blx	r3
   1370a:	9b01      	ldr	r3, [sp, #4]
   1370c:	181b      	adds	r3, r3, r0
   1370e:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
   13710:	9b00      	ldr	r3, [sp, #0]
   13712:	2b01      	cmp	r3, #1
   13714:	ddf3      	ble.n	136fe <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
   13716:	a801      	add	r0, sp, #4
   13718:	4e04      	ldr	r6, [pc, #16]	; (1372c <MQTTDeserialize_connack+0x48>)
   1371a:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
   1371c:	0600      	lsls	r0, r0, #24
   1371e:	0fc0      	lsrs	r0, r0, #31
   13720:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
   13722:	a801      	add	r0, sp, #4
   13724:	47b0      	blx	r6
   13726:	7020      	strb	r0, [r4, #0]
	rc = 1;
   13728:	2001      	movs	r0, #1
   1372a:	e7e8      	b.n	136fe <MQTTDeserialize_connack+0x1a>
   1372c:	00013977 	.word	0x00013977
   13730:	00013949 	.word	0x00013949

00013734 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   13734:	b510      	push	{r4, lr}
   13736:	b082      	sub	sp, #8
   13738:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
   1373a:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
   1373c:	2901      	cmp	r1, #1
   1373e:	dd0f      	ble.n	13760 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
   13740:	210f      	movs	r1, #15
   13742:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   13744:	0109      	lsls	r1, r1, #4
   13746:	a801      	add	r0, sp, #4
   13748:	4b07      	ldr	r3, [pc, #28]	; (13768 <MQTTSerialize_zero+0x34>)
   1374a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   1374c:	2100      	movs	r1, #0
   1374e:	9801      	ldr	r0, [sp, #4]
   13750:	4b06      	ldr	r3, [pc, #24]	; (1376c <MQTTSerialize_zero+0x38>)
   13752:	4798      	blx	r3
   13754:	9b01      	ldr	r3, [sp, #4]
   13756:	469c      	mov	ip, r3
   13758:	4460      	add	r0, ip
	rc = ptr - buf;
   1375a:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   1375c:	b002      	add	sp, #8
   1375e:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   13760:	2002      	movs	r0, #2
   13762:	4240      	negs	r0, r0
	return rc;
   13764:	e7fa      	b.n	1375c <MQTTSerialize_zero+0x28>
   13766:	46c0      	nop			; (mov r8, r8)
   13768:	00013983 	.word	0x00013983
   1376c:	00013899 	.word	0x00013899

00013770 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   13770:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   13772:	220e      	movs	r2, #14
   13774:	4b01      	ldr	r3, [pc, #4]	; (1377c <MQTTSerialize_disconnect+0xc>)
   13776:	4798      	blx	r3
}
   13778:	bd10      	pop	{r4, pc}
   1377a:	46c0      	nop			; (mov r8, r8)
   1377c:	00013735 	.word	0x00013735

00013780 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   13780:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   13782:	220c      	movs	r2, #12
   13784:	4b01      	ldr	r3, [pc, #4]	; (1378c <MQTTSerialize_pingreq+0xc>)
   13786:	4798      	blx	r3
}
   13788:	bd10      	pop	{r4, pc}
   1378a:	46c0      	nop			; (mov r8, r8)
   1378c:	00013735 	.word	0x00013735

00013790 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   13790:	b5f0      	push	{r4, r5, r6, r7, lr}
   13792:	b085      	sub	sp, #20
   13794:	0005      	movs	r5, r0
   13796:	000e      	movs	r6, r1
   13798:	0014      	movs	r4, r2
   1379a:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   1379c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1379e:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
   137a0:	2300      	movs	r3, #0
   137a2:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   137a4:	a803      	add	r0, sp, #12
   137a6:	4b1c      	ldr	r3, [pc, #112]	; (13818 <MQTTDeserialize_publish+0x88>)
   137a8:	4798      	blx	r3
   137aa:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
   137ac:	22f0      	movs	r2, #240	; 0xf0
   137ae:	4010      	ands	r0, r2
	int rc = 0;
   137b0:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
   137b2:	2830      	cmp	r0, #48	; 0x30
   137b4:	d002      	beq.n	137bc <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   137b6:	0038      	movs	r0, r7
   137b8:	b005      	add	sp, #20
   137ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
   137bc:	071a      	lsls	r2, r3, #28
   137be:	0fd2      	lsrs	r2, r2, #31
   137c0:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
   137c2:	075a      	lsls	r2, r3, #29
   137c4:	0f92      	lsrs	r2, r2, #30
   137c6:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
   137c8:	07db      	lsls	r3, r3, #31
   137ca:	0fdb      	lsrs	r3, r3, #31
   137cc:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   137ce:	a902      	add	r1, sp, #8
   137d0:	9803      	ldr	r0, [sp, #12]
   137d2:	4b12      	ldr	r3, [pc, #72]	; (1381c <MQTTDeserialize_publish+0x8c>)
   137d4:	4798      	blx	r3
   137d6:	0007      	movs	r7, r0
   137d8:	9b03      	ldr	r3, [sp, #12]
   137da:	181c      	adds	r4, r3, r0
   137dc:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
   137de:	9b02      	ldr	r3, [sp, #8]
   137e0:	469c      	mov	ip, r3
   137e2:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   137e4:	0022      	movs	r2, r4
   137e6:	a903      	add	r1, sp, #12
   137e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   137ea:	4b0d      	ldr	r3, [pc, #52]	; (13820 <MQTTDeserialize_publish+0x90>)
   137ec:	4798      	blx	r3
   137ee:	2800      	cmp	r0, #0
   137f0:	d0e1      	beq.n	137b6 <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   137f2:	9b03      	ldr	r3, [sp, #12]
   137f4:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   137f6:	d4de      	bmi.n	137b6 <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
   137f8:	6833      	ldr	r3, [r6, #0]
   137fa:	2b00      	cmp	r3, #0
   137fc:	dd04      	ble.n	13808 <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
   137fe:	a803      	add	r0, sp, #12
   13800:	4b08      	ldr	r3, [pc, #32]	; (13824 <MQTTDeserialize_publish+0x94>)
   13802:	4798      	blx	r3
   13804:	9b01      	ldr	r3, [sp, #4]
   13806:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
   13808:	9b03      	ldr	r3, [sp, #12]
   1380a:	1ae4      	subs	r4, r4, r3
   1380c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1380e:	6014      	str	r4, [r2, #0]
	*payload = curdata;
   13810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13812:	6013      	str	r3, [r2, #0]
	rc = 1;
   13814:	2701      	movs	r7, #1
   13816:	e7ce      	b.n	137b6 <MQTTDeserialize_publish+0x26>
   13818:	00013977 	.word	0x00013977
   1381c:	00013949 	.word	0x00013949
   13820:	00013a3d 	.word	0x00013a3d
   13824:	00013965 	.word	0x00013965

00013828 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   13828:	b570      	push	{r4, r5, r6, lr}
   1382a:	b082      	sub	sp, #8
   1382c:	0005      	movs	r5, r0
   1382e:	000e      	movs	r6, r1
   13830:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   13832:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   13834:	a801      	add	r0, sp, #4
   13836:	4b0c      	ldr	r3, [pc, #48]	; (13868 <MQTTDeserialize_ack+0x40>)
   13838:	4798      	blx	r3
	*dup = header.bits.dup;
   1383a:	0703      	lsls	r3, r0, #28
   1383c:	0fdb      	lsrs	r3, r3, #31
   1383e:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
   13840:	0600      	lsls	r0, r0, #24
   13842:	0f00      	lsrs	r0, r0, #28
   13844:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   13846:	4669      	mov	r1, sp
   13848:	9801      	ldr	r0, [sp, #4]
   1384a:	4b08      	ldr	r3, [pc, #32]	; (1386c <MQTTDeserialize_ack+0x44>)
   1384c:	4798      	blx	r3
   1384e:	9b01      	ldr	r3, [sp, #4]
   13850:	181b      	adds	r3, r3, r0
   13852:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
   13854:	9b00      	ldr	r3, [sp, #0]
   13856:	2b01      	cmp	r3, #1
   13858:	dd04      	ble.n	13864 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
   1385a:	a801      	add	r0, sp, #4
   1385c:	4b04      	ldr	r3, [pc, #16]	; (13870 <MQTTDeserialize_ack+0x48>)
   1385e:	4798      	blx	r3
   13860:	8020      	strh	r0, [r4, #0]

	rc = 1;
   13862:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   13864:	b002      	add	sp, #8
   13866:	bd70      	pop	{r4, r5, r6, pc}
   13868:	00013977 	.word	0x00013977
   1386c:	00013949 	.word	0x00013949
   13870:	00013965 	.word	0x00013965

00013874 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   13874:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
   13876:	2900      	cmp	r1, #0
   13878:	dd0a      	ble.n	13890 <bufchar+0x1c>
   1387a:	4b06      	ldr	r3, [pc, #24]	; (13894 <bufchar+0x20>)
   1387c:	681b      	ldr	r3, [r3, #0]
   1387e:	185d      	adds	r5, r3, r1
   13880:	002c      	movs	r4, r5
		*c = *bufptr++;
   13882:	781a      	ldrb	r2, [r3, #0]
   13884:	7002      	strb	r2, [r0, #0]
   13886:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
   13888:	42a3      	cmp	r3, r4
   1388a:	d1fa      	bne.n	13882 <bufchar+0xe>
   1388c:	4b01      	ldr	r3, [pc, #4]	; (13894 <bufchar+0x20>)
   1388e:	601d      	str	r5, [r3, #0]
	return count;
}
   13890:	0008      	movs	r0, r1
   13892:	bd30      	pop	{r4, r5, pc}
   13894:	2000081c 	.word	0x2000081c

00013898 <MQTTPacket_encode>:
{
   13898:	b5f0      	push	{r4, r5, r6, r7, lr}
   1389a:	b083      	sub	sp, #12
   1389c:	2500      	movs	r5, #0
		char d = length % 128;
   1389e:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
   138a0:	2780      	movs	r7, #128	; 0x80
   138a2:	427f      	negs	r7, r7
   138a4:	9501      	str	r5, [sp, #4]
		char d = length % 128;
   138a6:	17ca      	asrs	r2, r1, #31
   138a8:	0e54      	lsrs	r4, r2, #25
   138aa:	190b      	adds	r3, r1, r4
   138ac:	4033      	ands	r3, r6
   138ae:	1b1b      	subs	r3, r3, r4
   138b0:	b2db      	uxtb	r3, r3
		length /= 128;
   138b2:	4032      	ands	r2, r6
   138b4:	1851      	adds	r1, r2, r1
   138b6:	11c9      	asrs	r1, r1, #7
		if (length > 0)
   138b8:	2900      	cmp	r1, #0
   138ba:	dd03      	ble.n	138c4 <MQTTPacket_encode+0x2c>
			d |= 0x80;
   138bc:	433b      	orrs	r3, r7
		buf[rc++] = d;
   138be:	5543      	strb	r3, [r0, r5]
   138c0:	3501      	adds	r5, #1
   138c2:	e7ef      	b.n	138a4 <MQTTPacket_encode+0xc>
   138c4:	5543      	strb	r3, [r0, r5]
   138c6:	9801      	ldr	r0, [sp, #4]
   138c8:	3001      	adds	r0, #1
}
   138ca:	b003      	add	sp, #12
   138cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000138ce <MQTTPacket_decode>:
{
   138ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   138d0:	46ce      	mov	lr, r9
   138d2:	4647      	mov	r7, r8
   138d4:	b580      	push	{r7, lr}
   138d6:	b083      	sub	sp, #12
   138d8:	4680      	mov	r8, r0
   138da:	000f      	movs	r7, r1
	*value = 0;
   138dc:	2300      	movs	r3, #0
   138de:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   138e0:	2401      	movs	r4, #1
	int multiplier = 1;
   138e2:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
   138e4:	466b      	mov	r3, sp
   138e6:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
   138e8:	237f      	movs	r3, #127	; 0x7f
   138ea:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
   138ec:	2101      	movs	r1, #1
   138ee:	0028      	movs	r0, r5
   138f0:	47c0      	blx	r8
		if (rc != 1)
   138f2:	2801      	cmp	r0, #1
   138f4:	d10e      	bne.n	13914 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
   138f6:	782b      	ldrb	r3, [r5, #0]
   138f8:	464a      	mov	r2, r9
   138fa:	401a      	ands	r2, r3
   138fc:	4372      	muls	r2, r6
   138fe:	6839      	ldr	r1, [r7, #0]
   13900:	468c      	mov	ip, r1
   13902:	4462      	add	r2, ip
   13904:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
   13906:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
   13908:	b25b      	sxtb	r3, r3
   1390a:	2b00      	cmp	r3, #0
   1390c:	da02      	bge.n	13914 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   1390e:	3401      	adds	r4, #1
   13910:	2c05      	cmp	r4, #5
   13912:	d1eb      	bne.n	138ec <MQTTPacket_decode+0x1e>
}
   13914:	0020      	movs	r0, r4
   13916:	b003      	add	sp, #12
   13918:	bc0c      	pop	{r2, r3}
   1391a:	4690      	mov	r8, r2
   1391c:	4699      	mov	r9, r3
   1391e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013920 <MQTTPacket_len>:
{
   13920:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
   13922:	1c42      	adds	r2, r0, #1
		rem_len += 1;
   13924:	3002      	adds	r0, #2
	if (rem_len < 128)
   13926:	2a7f      	cmp	r2, #127	; 0x7f
   13928:	dd07      	ble.n	1393a <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
   1392a:	4905      	ldr	r1, [pc, #20]	; (13940 <MQTTPacket_len+0x20>)
		rem_len += 2;
   1392c:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
   1392e:	428a      	cmp	r2, r1
   13930:	dd03      	ble.n	1393a <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
   13932:	4904      	ldr	r1, [pc, #16]	; (13944 <MQTTPacket_len+0x24>)
		rem_len += 4;
   13934:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
   13936:	428a      	cmp	r2, r1
   13938:	dd00      	ble.n	1393c <MQTTPacket_len+0x1c>
}
   1393a:	4770      	bx	lr
		rem_len += 3;
   1393c:	1d18      	adds	r0, r3, #4
   1393e:	e7fc      	b.n	1393a <MQTTPacket_len+0x1a>
   13940:	00003fff 	.word	0x00003fff
   13944:	001ffffe 	.word	0x001ffffe

00013948 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   13948:	b510      	push	{r4, lr}
	bufptr = buf;
   1394a:	4b03      	ldr	r3, [pc, #12]	; (13958 <MQTTPacket_decodeBuf+0x10>)
   1394c:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   1394e:	4803      	ldr	r0, [pc, #12]	; (1395c <MQTTPacket_decodeBuf+0x14>)
   13950:	4b03      	ldr	r3, [pc, #12]	; (13960 <MQTTPacket_decodeBuf+0x18>)
   13952:	4798      	blx	r3
}
   13954:	bd10      	pop	{r4, pc}
   13956:	46c0      	nop			; (mov r8, r8)
   13958:	2000081c 	.word	0x2000081c
   1395c:	00013875 	.word	0x00013875
   13960:	000138cf 	.word	0x000138cf

00013964 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   13964:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
   13966:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
   13968:	7813      	ldrb	r3, [r2, #0]
   1396a:	021b      	lsls	r3, r3, #8
   1396c:	7850      	ldrb	r0, [r2, #1]
   1396e:	1818      	adds	r0, r3, r0
	*pptr += 2;
   13970:	3202      	adds	r2, #2
   13972:	600a      	str	r2, [r1, #0]
	return len;
}
   13974:	4770      	bx	lr

00013976 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   13976:	0002      	movs	r2, r0
	char c = **pptr;
   13978:	6803      	ldr	r3, [r0, #0]
   1397a:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
   1397c:	3301      	adds	r3, #1
   1397e:	6013      	str	r3, [r2, #0]
	return c;
}
   13980:	4770      	bx	lr

00013982 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
   13982:	6803      	ldr	r3, [r0, #0]
   13984:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
   13986:	6803      	ldr	r3, [r0, #0]
   13988:	3301      	adds	r3, #1
   1398a:	6003      	str	r3, [r0, #0]
}
   1398c:	4770      	bx	lr

0001398e <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   1398e:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
   13990:	17ca      	asrs	r2, r1, #31
   13992:	23ff      	movs	r3, #255	; 0xff
   13994:	001c      	movs	r4, r3
   13996:	4014      	ands	r4, r2
   13998:	1864      	adds	r4, r4, r1
   1399a:	1224      	asrs	r4, r4, #8
   1399c:	6805      	ldr	r5, [r0, #0]
   1399e:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
   139a0:	6804      	ldr	r4, [r0, #0]
   139a2:	1c65      	adds	r5, r4, #1
   139a4:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
   139a6:	0e12      	lsrs	r2, r2, #24
   139a8:	1889      	adds	r1, r1, r2
   139aa:	400b      	ands	r3, r1
   139ac:	1a9b      	subs	r3, r3, r2
   139ae:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
   139b0:	6803      	ldr	r3, [r0, #0]
   139b2:	3301      	adds	r3, #1
   139b4:	6003      	str	r3, [r0, #0]
}
   139b6:	bd30      	pop	{r4, r5, pc}

000139b8 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   139b8:	b570      	push	{r4, r5, r6, lr}
   139ba:	0004      	movs	r4, r0
   139bc:	000e      	movs	r6, r1
	int len = strlen(string);
   139be:	0008      	movs	r0, r1
   139c0:	4b08      	ldr	r3, [pc, #32]	; (139e4 <writeCString+0x2c>)
   139c2:	4798      	blx	r3
   139c4:	0005      	movs	r5, r0
	writeInt(pptr, len);
   139c6:	0001      	movs	r1, r0
   139c8:	0020      	movs	r0, r4
   139ca:	4b07      	ldr	r3, [pc, #28]	; (139e8 <writeCString+0x30>)
   139cc:	4798      	blx	r3
	memcpy(*pptr, string, len);
   139ce:	002a      	movs	r2, r5
   139d0:	0031      	movs	r1, r6
   139d2:	6820      	ldr	r0, [r4, #0]
   139d4:	4b05      	ldr	r3, [pc, #20]	; (139ec <writeCString+0x34>)
   139d6:	4798      	blx	r3
	*pptr += len;
   139d8:	6823      	ldr	r3, [r4, #0]
   139da:	469c      	mov	ip, r3
   139dc:	4465      	add	r5, ip
   139de:	6025      	str	r5, [r4, #0]
}
   139e0:	bd70      	pop	{r4, r5, r6, pc}
   139e2:	46c0      	nop			; (mov r8, r8)
   139e4:	00016b5b 	.word	0x00016b5b
   139e8:	0001398f 	.word	0x0001398f
   139ec:	000165c9 	.word	0x000165c9

000139f0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   139f0:	b530      	push	{r4, r5, lr}
   139f2:	b085      	sub	sp, #20
   139f4:	0005      	movs	r5, r0
   139f6:	9101      	str	r1, [sp, #4]
   139f8:	9303      	str	r3, [sp, #12]
   139fa:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
   139fc:	dc06      	bgt.n	13a0c <writeMQTTString+0x1c>
   139fe:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
   13a00:	2900      	cmp	r1, #0
   13a02:	d010      	beq.n	13a26 <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
   13a04:	4b0a      	ldr	r3, [pc, #40]	; (13a30 <writeMQTTString+0x40>)
   13a06:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
   13a08:	b005      	add	sp, #20
   13a0a:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
   13a0c:	0011      	movs	r1, r2
   13a0e:	4b09      	ldr	r3, [pc, #36]	; (13a34 <writeMQTTString+0x44>)
   13a10:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   13a12:	0022      	movs	r2, r4
   13a14:	9903      	ldr	r1, [sp, #12]
   13a16:	6828      	ldr	r0, [r5, #0]
   13a18:	4b07      	ldr	r3, [pc, #28]	; (13a38 <writeMQTTString+0x48>)
   13a1a:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   13a1c:	682b      	ldr	r3, [r5, #0]
   13a1e:	469c      	mov	ip, r3
   13a20:	4464      	add	r4, ip
   13a22:	602c      	str	r4, [r5, #0]
   13a24:	e7f0      	b.n	13a08 <writeMQTTString+0x18>
		writeInt(pptr, 0);
   13a26:	2100      	movs	r1, #0
   13a28:	4b02      	ldr	r3, [pc, #8]	; (13a34 <writeMQTTString+0x44>)
   13a2a:	4798      	blx	r3
}
   13a2c:	e7ec      	b.n	13a08 <writeMQTTString+0x18>
   13a2e:	46c0      	nop			; (mov r8, r8)
   13a30:	000139b9 	.word	0x000139b9
   13a34:	0001398f 	.word	0x0001398f
   13a38:	000165c9 	.word	0x000165c9

00013a3c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   13a3c:	b570      	push	{r4, r5, r6, lr}
   13a3e:	0005      	movs	r5, r0
   13a40:	000c      	movs	r4, r1
   13a42:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   13a44:	680b      	ldr	r3, [r1, #0]
   13a46:	1ad3      	subs	r3, r2, r3
   13a48:	2b01      	cmp	r3, #1
   13a4a:	dd12      	ble.n	13a72 <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   13a4c:	0008      	movs	r0, r1
   13a4e:	4b0a      	ldr	r3, [pc, #40]	; (13a78 <readMQTTLenString+0x3c>)
   13a50:	4798      	blx	r3
   13a52:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   13a54:	6822      	ldr	r2, [r4, #0]
   13a56:	1811      	adds	r1, r2, r0
	int rc = 0;
   13a58:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   13a5a:	428e      	cmp	r6, r1
   13a5c:	d305      	bcc.n	13a6a <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   13a5e:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
   13a60:	6823      	ldr	r3, [r4, #0]
   13a62:	469c      	mov	ip, r3
   13a64:	4460      	add	r0, ip
   13a66:	6020      	str	r0, [r4, #0]
			rc = 1;
   13a68:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
   13a6a:	2200      	movs	r2, #0
   13a6c:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
   13a6e:	0018      	movs	r0, r3
   13a70:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
   13a72:	2300      	movs	r3, #0
   13a74:	e7f9      	b.n	13a6a <readMQTTLenString+0x2e>
   13a76:	46c0      	nop			; (mov r8, r8)
   13a78:	00013965 	.word	0x00013965

00013a7c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   13a7c:	b500      	push	{lr}
   13a7e:	b085      	sub	sp, #20
   13a80:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
   13a82:	2800      	cmp	r0, #0
   13a84:	d003      	beq.n	13a8e <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
   13a86:	4b03      	ldr	r3, [pc, #12]	; (13a94 <MQTTstrlen+0x18>)
   13a88:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
   13a8a:	b005      	add	sp, #20
   13a8c:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
   13a8e:	9802      	ldr	r0, [sp, #8]
	return rc;
   13a90:	e7fb      	b.n	13a8a <MQTTstrlen+0xe>
   13a92:	46c0      	nop			; (mov r8, r8)
   13a94:	00016b5b 	.word	0x00016b5b

00013a98 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   13a98:	b570      	push	{r4, r5, r6, lr}
   13a9a:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
   13a9c:	6806      	ldr	r6, [r0, #0]
   13a9e:	2e00      	cmp	r6, #0
   13aa0:	d00b      	beq.n	13aba <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
   13aa2:	0030      	movs	r0, r6
   13aa4:	4b0b      	ldr	r3, [pc, #44]	; (13ad4 <MQTTPacket_equals+0x3c>)
   13aa6:	4798      	blx	r3
   13aa8:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
   13aaa:	0028      	movs	r0, r5
   13aac:	4b09      	ldr	r3, [pc, #36]	; (13ad4 <MQTTPacket_equals+0x3c>)
   13aae:	4798      	blx	r3
   13ab0:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   13ab2:	4284      	cmp	r4, r0
   13ab4:	d004      	beq.n	13ac0 <MQTTPacket_equals+0x28>
}
   13ab6:	0018      	movs	r0, r3
   13ab8:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
   13aba:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
   13abc:	6844      	ldr	r4, [r0, #4]
   13abe:	e7f4      	b.n	13aaa <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   13ac0:	0022      	movs	r2, r4
   13ac2:	0029      	movs	r1, r5
   13ac4:	0030      	movs	r0, r6
   13ac6:	4b04      	ldr	r3, [pc, #16]	; (13ad8 <MQTTPacket_equals+0x40>)
   13ac8:	4798      	blx	r3
   13aca:	4243      	negs	r3, r0
   13acc:	4143      	adcs	r3, r0
   13ace:	b2db      	uxtb	r3, r3
   13ad0:	e7f1      	b.n	13ab6 <MQTTPacket_equals+0x1e>
   13ad2:	46c0      	nop			; (mov r8, r8)
   13ad4:	00016b5b 	.word	0x00016b5b
   13ad8:	00016b69 	.word	0x00016b69

00013adc <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   13adc:	b510      	push	{r4, lr}
   13ade:	b084      	sub	sp, #16
   13ae0:	0004      	movs	r4, r0
	int len = 0;

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   13ae2:	0008      	movs	r0, r1
   13ae4:	0011      	movs	r1, r2
   13ae6:	001a      	movs	r2, r3
   13ae8:	4b05      	ldr	r3, [pc, #20]	; (13b00 <MQTTSerialize_publishLength+0x24>)
   13aea:	4798      	blx	r3
   13aec:	3002      	adds	r0, #2
   13aee:	9b06      	ldr	r3, [sp, #24]
   13af0:	469c      	mov	ip, r3
   13af2:	4460      	add	r0, ip
	if (qos > 0)
   13af4:	2c00      	cmp	r4, #0
   13af6:	dd00      	ble.n	13afa <MQTTSerialize_publishLength+0x1e>
		len += 2; /* packetid */
   13af8:	3002      	adds	r0, #2
	return len;
}
   13afa:	b004      	add	sp, #16
   13afc:	bd10      	pop	{r4, pc}
   13afe:	46c0      	nop			; (mov r8, r8)
   13b00:	00013a7d 	.word	0x00013a7d

00013b04 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   13b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b06:	46de      	mov	lr, fp
   13b08:	4657      	mov	r7, sl
   13b0a:	464e      	mov	r6, r9
   13b0c:	b5c0      	push	{r6, r7, lr}
   13b0e:	b084      	sub	sp, #16
   13b10:	0007      	movs	r7, r0
   13b12:	468b      	mov	fp, r1
   13b14:	4692      	mov	sl, r2
   13b16:	001e      	movs	r6, r3
   13b18:	ab0c      	add	r3, sp, #48	; 0x30
   13b1a:	781b      	ldrb	r3, [r3, #0]
   13b1c:	4699      	mov	r9, r3
   13b1e:	ab0d      	add	r3, sp, #52	; 0x34
   13b20:	881c      	ldrh	r4, [r3, #0]
	unsigned char *ptr = buf;
   13b22:	9003      	str	r0, [sp, #12]
	MQTTHeader header = {0};
	int rem_len = 0;
	int rc = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   13b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13b26:	9300      	str	r3, [sp, #0]
   13b28:	990e      	ldr	r1, [sp, #56]	; 0x38
   13b2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13b2e:	0030      	movs	r0, r6
   13b30:	4d1f      	ldr	r5, [pc, #124]	; (13bb0 <MQTTSerialize_publish+0xac>)
   13b32:	47a8      	blx	r5
   13b34:	0005      	movs	r5, r0
   13b36:	4b1f      	ldr	r3, [pc, #124]	; (13bb4 <MQTTSerialize_publish+0xb0>)
   13b38:	4798      	blx	r3
   13b3a:	4558      	cmp	r0, fp
   13b3c:	dc34      	bgt.n	13ba8 <MQTTSerialize_publish+0xa4>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}

	header.bits.type = PUBLISH;
	header.bits.dup = dup;
   13b3e:	2201      	movs	r2, #1
   13b40:	4653      	mov	r3, sl
   13b42:	4013      	ands	r3, r2
   13b44:	00db      	lsls	r3, r3, #3
	header.bits.qos = qos;
   13b46:	2103      	movs	r1, #3
   13b48:	4031      	ands	r1, r6
   13b4a:	0048      	lsls	r0, r1, #1
   13b4c:	2130      	movs	r1, #48	; 0x30
   13b4e:	4319      	orrs	r1, r3
   13b50:	4301      	orrs	r1, r0
	header.bits.retain = retained;
   13b52:	464b      	mov	r3, r9
   13b54:	4013      	ands	r3, r2
   13b56:	4391      	bics	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   13b58:	4319      	orrs	r1, r3
   13b5a:	a803      	add	r0, sp, #12
   13b5c:	4b16      	ldr	r3, [pc, #88]	; (13bb8 <MQTTSerialize_publish+0xb4>)
   13b5e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   13b60:	0029      	movs	r1, r5
   13b62:	9803      	ldr	r0, [sp, #12]
   13b64:	4b15      	ldr	r3, [pc, #84]	; (13bbc <MQTTSerialize_publish+0xb8>)
   13b66:	4798      	blx	r3
   13b68:	9b03      	ldr	r3, [sp, #12]
   13b6a:	469c      	mov	ip, r3
   13b6c:	4460      	add	r0, ip
   13b6e:	9003      	str	r0, [sp, #12]

	writeMQTTString(&ptr, topicName);
   13b70:	990e      	ldr	r1, [sp, #56]	; 0x38
   13b72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
   13b76:	a803      	add	r0, sp, #12
   13b78:	4d11      	ldr	r5, [pc, #68]	; (13bc0 <MQTTSerialize_publish+0xbc>)
   13b7a:	47a8      	blx	r5

	if (qos > 0)
   13b7c:	2e00      	cmp	r6, #0
   13b7e:	dd03      	ble.n	13b88 <MQTTSerialize_publish+0x84>
		writeInt(&ptr, packetid);
   13b80:	0021      	movs	r1, r4
   13b82:	a803      	add	r0, sp, #12
   13b84:	4b0f      	ldr	r3, [pc, #60]	; (13bc4 <MQTTSerialize_publish+0xc0>)
   13b86:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   13b88:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13b8a:	9911      	ldr	r1, [sp, #68]	; 0x44
   13b8c:	9803      	ldr	r0, [sp, #12]
   13b8e:	4b0e      	ldr	r3, [pc, #56]	; (13bc8 <MQTTSerialize_publish+0xc4>)
   13b90:	4798      	blx	r3
	ptr += payloadlen;
   13b92:	9b03      	ldr	r3, [sp, #12]
   13b94:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13b96:	4694      	mov	ip, r2
   13b98:	4463      	add	r3, ip

	rc = ptr - buf;
   13b9a:	1bd8      	subs	r0, r3, r7

exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   13b9c:	b004      	add	sp, #16
   13b9e:	bc1c      	pop	{r2, r3, r4}
   13ba0:	4691      	mov	r9, r2
   13ba2:	469a      	mov	sl, r3
   13ba4:	46a3      	mov	fp, r4
   13ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   13ba8:	2002      	movs	r0, #2
   13baa:	4240      	negs	r0, r0
	return rc;
   13bac:	e7f6      	b.n	13b9c <MQTTSerialize_publish+0x98>
   13bae:	46c0      	nop			; (mov r8, r8)
   13bb0:	00013add 	.word	0x00013add
   13bb4:	00013921 	.word	0x00013921
   13bb8:	00013983 	.word	0x00013983
   13bbc:	00013899 	.word	0x00013899
   13bc0:	000139f1 	.word	0x000139f1
   13bc4:	0001398f 	.word	0x0001398f
   13bc8:	000165c9 	.word	0x000165c9

00013bcc <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   13bcc:	b530      	push	{r4, r5, lr}
   13bce:	b083      	sub	sp, #12
   13bd0:	0004      	movs	r4, r0
   13bd2:	a806      	add	r0, sp, #24
   13bd4:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
   13bd6:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
   13bd8:	2903      	cmp	r1, #3
   13bda:	dd1e      	ble.n	13c1a <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
   13bdc:	210f      	movs	r1, #15
   13bde:	4011      	ands	r1, r2
	header.bits.dup = dup;
   13be0:	2001      	movs	r0, #1
   13be2:	4003      	ands	r3, r0
   13be4:	00db      	lsls	r3, r3, #3
   13be6:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   13be8:	3a06      	subs	r2, #6
   13bea:	4250      	negs	r0, r2
   13bec:	4142      	adcs	r2, r0
   13bee:	0052      	lsls	r2, r2, #1
   13bf0:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
   13bf2:	4311      	orrs	r1, r2
   13bf4:	a801      	add	r0, sp, #4
   13bf6:	4b0a      	ldr	r3, [pc, #40]	; (13c20 <MQTTSerialize_ack+0x54>)
   13bf8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   13bfa:	2102      	movs	r1, #2
   13bfc:	9801      	ldr	r0, [sp, #4]
   13bfe:	4b09      	ldr	r3, [pc, #36]	; (13c24 <MQTTSerialize_ack+0x58>)
   13c00:	4798      	blx	r3
   13c02:	9b01      	ldr	r3, [sp, #4]
   13c04:	469c      	mov	ip, r3
   13c06:	4460      	add	r0, ip
   13c08:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
   13c0a:	0029      	movs	r1, r5
   13c0c:	a801      	add	r0, sp, #4
   13c0e:	4b06      	ldr	r3, [pc, #24]	; (13c28 <MQTTSerialize_ack+0x5c>)
   13c10:	4798      	blx	r3
	rc = ptr - buf;
   13c12:	9b01      	ldr	r3, [sp, #4]
   13c14:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   13c16:	b003      	add	sp, #12
   13c18:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   13c1a:	2002      	movs	r0, #2
   13c1c:	4240      	negs	r0, r0
	return rc;
   13c1e:	e7fa      	b.n	13c16 <MQTTSerialize_ack+0x4a>
   13c20:	00013983 	.word	0x00013983
   13c24:	00013899 	.word	0x00013899
   13c28:	0001398f 	.word	0x0001398f

00013c2c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   13c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c2e:	46c6      	mov	lr, r8
   13c30:	b500      	push	{lr}
   13c32:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
   13c34:	dd12      	ble.n	13c5c <MQTTSerialize_subscribeLength+0x30>
   13c36:	000c      	movs	r4, r1
   13c38:	2602      	movs	r6, #2
   13c3a:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   13c3c:	4b08      	ldr	r3, [pc, #32]	; (13c60 <MQTTSerialize_subscribeLength+0x34>)
   13c3e:	4698      	mov	r8, r3
   13c40:	6820      	ldr	r0, [r4, #0]
   13c42:	6861      	ldr	r1, [r4, #4]
   13c44:	68a2      	ldr	r2, [r4, #8]
   13c46:	47c0      	blx	r8
   13c48:	3003      	adds	r0, #3
   13c4a:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
   13c4c:	3501      	adds	r5, #1
   13c4e:	340c      	adds	r4, #12
   13c50:	42af      	cmp	r7, r5
   13c52:	d1f5      	bne.n	13c40 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
   13c54:	0030      	movs	r0, r6
   13c56:	bc04      	pop	{r2}
   13c58:	4690      	mov	r8, r2
   13c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
   13c5c:	2602      	movs	r6, #2
	return len;
   13c5e:	e7f9      	b.n	13c54 <MQTTSerialize_subscribeLength+0x28>
   13c60:	00013a7d 	.word	0x00013a7d

00013c64 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   13c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c66:	46d6      	mov	lr, sl
   13c68:	464f      	mov	r7, r9
   13c6a:	4646      	mov	r6, r8
   13c6c:	b5c0      	push	{r6, r7, lr}
   13c6e:	b084      	sub	sp, #16
   13c70:	4682      	mov	sl, r0
   13c72:	000e      	movs	r6, r1
   13c74:	0015      	movs	r5, r2
   13c76:	9301      	str	r3, [sp, #4]
   13c78:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
   13c7a:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   13c7c:	990d      	ldr	r1, [sp, #52]	; 0x34
   13c7e:	0038      	movs	r0, r7
   13c80:	4b1f      	ldr	r3, [pc, #124]	; (13d00 <MQTTSerialize_subscribe+0x9c>)
   13c82:	4798      	blx	r3
   13c84:	0004      	movs	r4, r0
   13c86:	4b1f      	ldr	r3, [pc, #124]	; (13d04 <MQTTSerialize_subscribe+0xa0>)
   13c88:	4798      	blx	r3
   13c8a:	42b0      	cmp	r0, r6
   13c8c:	dc34      	bgt.n	13cf8 <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
   13c8e:	2101      	movs	r1, #1
   13c90:	4029      	ands	r1, r5
   13c92:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
   13c94:	2180      	movs	r1, #128	; 0x80
   13c96:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
   13c98:	2302      	movs	r3, #2
   13c9a:	4319      	orrs	r1, r3
   13c9c:	a803      	add	r0, sp, #12
   13c9e:	4b1a      	ldr	r3, [pc, #104]	; (13d08 <MQTTSerialize_subscribe+0xa4>)
   13ca0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   13ca2:	0021      	movs	r1, r4
   13ca4:	9803      	ldr	r0, [sp, #12]
   13ca6:	4b19      	ldr	r3, [pc, #100]	; (13d0c <MQTTSerialize_subscribe+0xa8>)
   13ca8:	4798      	blx	r3
   13caa:	9a03      	ldr	r2, [sp, #12]
   13cac:	4694      	mov	ip, r2
   13cae:	4460      	add	r0, ip
   13cb0:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
   13cb2:	9901      	ldr	r1, [sp, #4]
   13cb4:	a803      	add	r0, sp, #12
   13cb6:	4b16      	ldr	r3, [pc, #88]	; (13d10 <MQTTSerialize_subscribe+0xac>)
   13cb8:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   13cba:	2f00      	cmp	r7, #0
   13cbc:	dd13      	ble.n	13ce6 <MQTTSerialize_subscribe+0x82>
   13cbe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   13cc0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   13cc2:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
   13cc4:	4b13      	ldr	r3, [pc, #76]	; (13d14 <MQTTSerialize_subscribe+0xb0>)
   13cc6:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
   13cc8:	4b0f      	ldr	r3, [pc, #60]	; (13d08 <MQTTSerialize_subscribe+0xa4>)
   13cca:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
   13ccc:	6821      	ldr	r1, [r4, #0]
   13cce:	6862      	ldr	r2, [r4, #4]
   13cd0:	68a3      	ldr	r3, [r4, #8]
   13cd2:	a803      	add	r0, sp, #12
   13cd4:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
   13cd6:	ce02      	ldmia	r6!, {r1}
   13cd8:	b2c9      	uxtb	r1, r1
   13cda:	a803      	add	r0, sp, #12
   13cdc:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
   13cde:	3501      	adds	r5, #1
   13ce0:	340c      	adds	r4, #12
   13ce2:	42af      	cmp	r7, r5
   13ce4:	d1f2      	bne.n	13ccc <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
   13ce6:	9b03      	ldr	r3, [sp, #12]
   13ce8:	4652      	mov	r2, sl
   13cea:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   13cec:	b004      	add	sp, #16
   13cee:	bc1c      	pop	{r2, r3, r4}
   13cf0:	4690      	mov	r8, r2
   13cf2:	4699      	mov	r9, r3
   13cf4:	46a2      	mov	sl, r4
   13cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   13cf8:	2002      	movs	r0, #2
   13cfa:	4240      	negs	r0, r0
	return rc;
   13cfc:	e7f6      	b.n	13cec <MQTTSerialize_subscribe+0x88>
   13cfe:	46c0      	nop			; (mov r8, r8)
   13d00:	00013c2d 	.word	0x00013c2d
   13d04:	00013921 	.word	0x00013921
   13d08:	00013983 	.word	0x00013983
   13d0c:	00013899 	.word	0x00013899
   13d10:	0001398f 	.word	0x0001398f
   13d14:	000139f1 	.word	0x000139f1

00013d18 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   13d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d1a:	46ce      	mov	lr, r9
   13d1c:	4647      	mov	r7, r8
   13d1e:	b580      	push	{r7, lr}
   13d20:	b083      	sub	sp, #12
   13d22:	0004      	movs	r4, r0
   13d24:	000e      	movs	r6, r1
   13d26:	0015      	movs	r5, r2
   13d28:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
   13d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13d2c:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   13d2e:	a801      	add	r0, sp, #4
   13d30:	4b1e      	ldr	r3, [pc, #120]	; (13dac <MQTTDeserialize_suback+0x94>)
   13d32:	4798      	blx	r3
	if (header.bits.type != SUBACK)
   13d34:	23f0      	movs	r3, #240	; 0xf0
   13d36:	4003      	ands	r3, r0
	int rc = 0;
   13d38:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
   13d3a:	2b90      	cmp	r3, #144	; 0x90
   13d3c:	d004      	beq.n	13d48 <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
   13d3e:	b003      	add	sp, #12
   13d40:	bc0c      	pop	{r2, r3}
   13d42:	4690      	mov	r8, r2
   13d44:	4699      	mov	r9, r3
   13d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   13d48:	4669      	mov	r1, sp
   13d4a:	9801      	ldr	r0, [sp, #4]
   13d4c:	4b18      	ldr	r3, [pc, #96]	; (13db0 <MQTTDeserialize_suback+0x98>)
   13d4e:	4798      	blx	r3
   13d50:	9b01      	ldr	r3, [sp, #4]
   13d52:	181b      	adds	r3, r3, r0
   13d54:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
   13d56:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
   13d58:	2a01      	cmp	r2, #1
   13d5a:	ddf0      	ble.n	13d3e <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
   13d5c:	4698      	mov	r8, r3
   13d5e:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
   13d60:	a801      	add	r0, sp, #4
   13d62:	4b14      	ldr	r3, [pc, #80]	; (13db4 <MQTTDeserialize_suback+0x9c>)
   13d64:	4798      	blx	r3
   13d66:	8020      	strh	r0, [r4, #0]
	*count = 0;
   13d68:	2300      	movs	r3, #0
   13d6a:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
   13d6c:	9b01      	ldr	r3, [sp, #4]
   13d6e:	4598      	cmp	r8, r3
   13d70:	d916      	bls.n	13da0 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
   13d72:	2e00      	cmp	r6, #0
   13d74:	db16      	blt.n	13da4 <MQTTDeserialize_suback+0x8c>
   13d76:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
   13d78:	4a0c      	ldr	r2, [pc, #48]	; (13dac <MQTTDeserialize_suback+0x94>)
   13d7a:	4691      	mov	r9, r2
   13d7c:	1c5a      	adds	r2, r3, #1
   13d7e:	602a      	str	r2, [r5, #0]
   13d80:	009b      	lsls	r3, r3, #2
   13d82:	18fc      	adds	r4, r7, r3
   13d84:	a801      	add	r0, sp, #4
   13d86:	47c8      	blx	r9
   13d88:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
   13d8a:	9b01      	ldr	r3, [sp, #4]
   13d8c:	4598      	cmp	r8, r3
   13d8e:	d905      	bls.n	13d9c <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
   13d90:	682b      	ldr	r3, [r5, #0]
   13d92:	42b3      	cmp	r3, r6
   13d94:	ddf2      	ble.n	13d7c <MQTTDeserialize_suback+0x64>
			rc = -1;
   13d96:	2001      	movs	r0, #1
   13d98:	4240      	negs	r0, r0
	return rc;
   13d9a:	e7d0      	b.n	13d3e <MQTTDeserialize_suback+0x26>
	rc = 1;
   13d9c:	2001      	movs	r0, #1
   13d9e:	e7ce      	b.n	13d3e <MQTTDeserialize_suback+0x26>
   13da0:	2001      	movs	r0, #1
   13da2:	e7cc      	b.n	13d3e <MQTTDeserialize_suback+0x26>
			rc = -1;
   13da4:	2001      	movs	r0, #1
   13da6:	4240      	negs	r0, r0
   13da8:	e7c9      	b.n	13d3e <MQTTDeserialize_suback+0x26>
   13daa:	46c0      	nop			; (mov r8, r8)
   13dac:	00013977 	.word	0x00013977
   13db0:	00013949 	.word	0x00013949
   13db4:	00013965 	.word	0x00013965

00013db8 <cli>:
#include <string.h>

static char  device_name[50];

int cli(char* input)
{
   13db8:	b510      	push	{r4, lr}
   13dba:	0004      	movs	r4, r0
	
	/* Comparing the input with the available set of commands */
	
	///<help
	if (strncmp(input,"help",strlen("help")) == 0)
   13dbc:	2204      	movs	r2, #4
   13dbe:	4947      	ldr	r1, [pc, #284]	; (13edc <cli+0x124>)
   13dc0:	4b47      	ldr	r3, [pc, #284]	; (13ee0 <cli+0x128>)
   13dc2:	4798      	blx	r3
   13dc4:	2800      	cmp	r0, #0
   13dc6:	d043      	beq.n	13e50 <cli+0x98>
		printf("getDeviceName - Get Device Name\r\n");
		return 1;
	}
	
	///<ver_bl
	else if (strncmp(input,"ver_bl",strlen("ver_bl")) == 0)
   13dc8:	2206      	movs	r2, #6
   13dca:	4946      	ldr	r1, [pc, #280]	; (13ee4 <cli+0x12c>)
   13dcc:	0020      	movs	r0, r4
   13dce:	4b44      	ldr	r3, [pc, #272]	; (13ee0 <cli+0x128>)
   13dd0:	4798      	blx	r3
   13dd2:	2800      	cmp	r0, #0
   13dd4:	d04f      	beq.n	13e76 <cli+0xbe>
		printf("Bootloader Firmware version: %d.%d.%d \r\n",major,minor,patch);
		return 1;
	}
	
	///<ver_app
	else if (strncmp(input,"ver_app",strlen("ver_app")) == 0)
   13dd6:	2207      	movs	r2, #7
   13dd8:	4943      	ldr	r1, [pc, #268]	; (13ee8 <cli+0x130>)
   13dda:	0020      	movs	r0, r4
   13ddc:	4b40      	ldr	r3, [pc, #256]	; (13ee0 <cli+0x128>)
   13dde:	4798      	blx	r3
   13de0:	2800      	cmp	r0, #0
   13de2:	d050      	beq.n	13e86 <cli+0xce>
		printf("Code Firmware version: %d.%d.%d \r\n",major,minor,patch);
		return 1;
	}
	
	///<mac
	else if (strncmp(input,"mac",strlen("mac")) == 0)
   13de4:	2203      	movs	r2, #3
   13de6:	4941      	ldr	r1, [pc, #260]	; (13eec <cli+0x134>)
   13de8:	0020      	movs	r0, r4
   13dea:	4b3d      	ldr	r3, [pc, #244]	; (13ee0 <cli+0x128>)
   13dec:	4798      	blx	r3
   13dee:	2800      	cmp	r0, #0
   13df0:	d051      	beq.n	13e96 <cli+0xde>
		printf("Mac Address: F8-F0-05-F3-F9-9E\r\n");
		return 1;
	}
	
	///<IP
	else if (strncmp(input,"ip",strlen("ip")) == 0)
   13df2:	2202      	movs	r2, #2
   13df4:	493e      	ldr	r1, [pc, #248]	; (13ef0 <cli+0x138>)
   13df6:	0020      	movs	r0, r4
   13df8:	4b39      	ldr	r3, [pc, #228]	; (13ee0 <cli+0x128>)
   13dfa:	4798      	blx	r3
   13dfc:	2800      	cmp	r0, #0
   13dfe:	d04f      	beq.n	13ea0 <cli+0xe8>
		printf("IP Address: \r\n");
		return 1;
	}
	
	///<dev Name
	else if (strncmp(input,"devName",strlen("devName")) == 0)
   13e00:	2207      	movs	r2, #7
   13e02:	493c      	ldr	r1, [pc, #240]	; (13ef4 <cli+0x13c>)
   13e04:	0020      	movs	r0, r4
   13e06:	4b36      	ldr	r3, [pc, #216]	; (13ee0 <cli+0x128>)
   13e08:	4798      	blx	r3
   13e0a:	2800      	cmp	r0, #0
   13e0c:	d04d      	beq.n	13eaa <cli+0xf2>
		printf("Name: DELOS INC.\r\n");
		return 1;
	}
	
	///<set Device Name
	else if (strncmp(input,"setDeviceName",strlen("setDeviceName")) == 0)
   13e0e:	220d      	movs	r2, #13
   13e10:	4939      	ldr	r1, [pc, #228]	; (13ef8 <cli+0x140>)
   13e12:	0020      	movs	r0, r4
   13e14:	4b32      	ldr	r3, [pc, #200]	; (13ee0 <cli+0x128>)
   13e16:	4798      	blx	r3
   13e18:	2800      	cmp	r0, #0
   13e1a:	d14b      	bne.n	13eb4 <cli+0xfc>
	{
		int iter1 = 14;
		int iter2;
		//Reading string after space
		while(input[iter1] != '\r')
   13e1c:	7ba3      	ldrb	r3, [r4, #14]
   13e1e:	2b0d      	cmp	r3, #13
   13e20:	d010      	beq.n	13e44 <cli+0x8c>
		{
			if(input[iter1] != ' ')
   13e22:	2b20      	cmp	r3, #32
   13e24:	d158      	bne.n	13ed8 <cli+0x120>
   13e26:	3b12      	subs	r3, #18
				}
				break;
			}
			else
			{
				iter1++;
   13e28:	3301      	adds	r3, #1
		while(input[iter1] != '\r')
   13e2a:	5ce2      	ldrb	r2, [r4, r3]
   13e2c:	2a0d      	cmp	r2, #13
   13e2e:	d009      	beq.n	13e44 <cli+0x8c>
			if(input[iter1] != ' ')
   13e30:	2a20      	cmp	r2, #32
   13e32:	d0f9      	beq.n	13e28 <cli+0x70>
				while(input[iter1] != '\r')
   13e34:	5ce2      	ldrb	r2, [r4, r3]
					device_name[iter2] = input[iter1];
   13e36:	4931      	ldr	r1, [pc, #196]	; (13efc <cli+0x144>)
   13e38:	1ac9      	subs	r1, r1, r3
   13e3a:	54ca      	strb	r2, [r1, r3]
					iter1++;
   13e3c:	3301      	adds	r3, #1
				while(input[iter1] != '\r')
   13e3e:	5ce2      	ldrb	r2, [r4, r3]
   13e40:	2a0d      	cmp	r2, #13
   13e42:	d1fa      	bne.n	13e3a <cli+0x82>
			}
		}
		printf("Device name set to %s\r\n",device_name);
   13e44:	492d      	ldr	r1, [pc, #180]	; (13efc <cli+0x144>)
   13e46:	482e      	ldr	r0, [pc, #184]	; (13f00 <cli+0x148>)
   13e48:	4b2e      	ldr	r3, [pc, #184]	; (13f04 <cli+0x14c>)
   13e4a:	4798      	blx	r3
		return 1;
   13e4c:	2001      	movs	r0, #1
   13e4e:	e011      	b.n	13e74 <cli+0xbc>
		printf("\r\nAvailable Commands:\r\n");
   13e50:	482d      	ldr	r0, [pc, #180]	; (13f08 <cli+0x150>)
   13e52:	4c2e      	ldr	r4, [pc, #184]	; (13f0c <cli+0x154>)
   13e54:	47a0      	blx	r4
		printf("ver_bl - bootloader version\r\n");
   13e56:	482e      	ldr	r0, [pc, #184]	; (13f10 <cli+0x158>)
   13e58:	47a0      	blx	r4
		printf("ver_app - Application code version\r\n");
   13e5a:	482e      	ldr	r0, [pc, #184]	; (13f14 <cli+0x15c>)
   13e5c:	47a0      	blx	r4
		printf("mac - mac address\r\n");
   13e5e:	482e      	ldr	r0, [pc, #184]	; (13f18 <cli+0x160>)
   13e60:	47a0      	blx	r4
		printf("ip - ip address\r\n");
   13e62:	482e      	ldr	r0, [pc, #184]	; (13f1c <cli+0x164>)
   13e64:	47a0      	blx	r4
		printf("devName - develor name\r\n");
   13e66:	482e      	ldr	r0, [pc, #184]	; (13f20 <cli+0x168>)
   13e68:	47a0      	blx	r4
		printf("setDeviceName <string name> - Device Name set\r\n");
   13e6a:	482e      	ldr	r0, [pc, #184]	; (13f24 <cli+0x16c>)
   13e6c:	47a0      	blx	r4
		printf("getDeviceName - Get Device Name\r\n");
   13e6e:	482e      	ldr	r0, [pc, #184]	; (13f28 <cli+0x170>)
   13e70:	47a0      	blx	r4
		return 1;
   13e72:	2001      	movs	r0, #1
	{
		printf("ERROR > retry\r\n");
		return 0;
	}	

}
   13e74:	bd10      	pop	{r4, pc}
		printf("Bootloader Firmware version: %d.%d.%d \r\n",major,minor,patch);
   13e76:	2301      	movs	r3, #1
   13e78:	2201      	movs	r2, #1
   13e7a:	2101      	movs	r1, #1
   13e7c:	482b      	ldr	r0, [pc, #172]	; (13f2c <cli+0x174>)
   13e7e:	4c21      	ldr	r4, [pc, #132]	; (13f04 <cli+0x14c>)
   13e80:	47a0      	blx	r4
		return 1;
   13e82:	2001      	movs	r0, #1
   13e84:	e7f6      	b.n	13e74 <cli+0xbc>
		printf("Code Firmware version: %d.%d.%d \r\n",major,minor,patch);
   13e86:	2306      	movs	r3, #6
   13e88:	2205      	movs	r2, #5
   13e8a:	2104      	movs	r1, #4
   13e8c:	4828      	ldr	r0, [pc, #160]	; (13f30 <cli+0x178>)
   13e8e:	4c1d      	ldr	r4, [pc, #116]	; (13f04 <cli+0x14c>)
   13e90:	47a0      	blx	r4
		return 1;
   13e92:	2001      	movs	r0, #1
   13e94:	e7ee      	b.n	13e74 <cli+0xbc>
		printf("Mac Address: F8-F0-05-F3-F9-9E\r\n");
   13e96:	4827      	ldr	r0, [pc, #156]	; (13f34 <cli+0x17c>)
   13e98:	4b1c      	ldr	r3, [pc, #112]	; (13f0c <cli+0x154>)
   13e9a:	4798      	blx	r3
		return 1;
   13e9c:	2001      	movs	r0, #1
   13e9e:	e7e9      	b.n	13e74 <cli+0xbc>
		printf("IP Address: \r\n");
   13ea0:	4825      	ldr	r0, [pc, #148]	; (13f38 <cli+0x180>)
   13ea2:	4b1a      	ldr	r3, [pc, #104]	; (13f0c <cli+0x154>)
   13ea4:	4798      	blx	r3
		return 1;
   13ea6:	2001      	movs	r0, #1
   13ea8:	e7e4      	b.n	13e74 <cli+0xbc>
		printf("Name: DELOS INC.\r\n");
   13eaa:	4824      	ldr	r0, [pc, #144]	; (13f3c <cli+0x184>)
   13eac:	4b17      	ldr	r3, [pc, #92]	; (13f0c <cli+0x154>)
   13eae:	4798      	blx	r3
		return 1;
   13eb0:	2001      	movs	r0, #1
   13eb2:	e7df      	b.n	13e74 <cli+0xbc>
	else if (strncmp(input,"getDeviceName",strlen("getDeviceName")) == 0)
   13eb4:	220d      	movs	r2, #13
   13eb6:	4922      	ldr	r1, [pc, #136]	; (13f40 <cli+0x188>)
   13eb8:	0020      	movs	r0, r4
   13eba:	4b09      	ldr	r3, [pc, #36]	; (13ee0 <cli+0x128>)
   13ebc:	4798      	blx	r3
   13ebe:	2800      	cmp	r0, #0
   13ec0:	d004      	beq.n	13ecc <cli+0x114>
		printf("ERROR > retry\r\n");
   13ec2:	4820      	ldr	r0, [pc, #128]	; (13f44 <cli+0x18c>)
   13ec4:	4b11      	ldr	r3, [pc, #68]	; (13f0c <cli+0x154>)
   13ec6:	4798      	blx	r3
		return 0;
   13ec8:	2000      	movs	r0, #0
   13eca:	e7d3      	b.n	13e74 <cli+0xbc>
		printf("Device name is %s\r\n",device_name);
   13ecc:	490b      	ldr	r1, [pc, #44]	; (13efc <cli+0x144>)
   13ece:	481e      	ldr	r0, [pc, #120]	; (13f48 <cli+0x190>)
   13ed0:	4b0c      	ldr	r3, [pc, #48]	; (13f04 <cli+0x14c>)
   13ed2:	4798      	blx	r3
		return 1;
   13ed4:	2001      	movs	r0, #1
   13ed6:	e7cd      	b.n	13e74 <cli+0xbc>
			if(input[iter1] != ' ')
   13ed8:	230e      	movs	r3, #14
   13eda:	e7ab      	b.n	13e34 <cli+0x7c>
   13edc:	00019f50 	.word	0x00019f50
   13ee0:	00016b69 	.word	0x00016b69
   13ee4:	0001a048 	.word	0x0001a048
   13ee8:	0001a07c 	.word	0x0001a07c
   13eec:	0001a0a8 	.word	0x0001a0a8
   13ef0:	0001a0cc 	.word	0x0001a0cc
   13ef4:	0001a0e0 	.word	0x0001a0e0
   13ef8:	0001a0fc 	.word	0x0001a0fc
   13efc:	20000820 	.word	0x20000820
   13f00:	0001a10c 	.word	0x0001a10c
   13f04:	00016761 	.word	0x00016761
   13f08:	00019f58 	.word	0x00019f58
   13f0c:	0001687d 	.word	0x0001687d
   13f10:	00019f70 	.word	0x00019f70
   13f14:	00019f90 	.word	0x00019f90
   13f18:	00019fb4 	.word	0x00019fb4
   13f1c:	00019fc8 	.word	0x00019fc8
   13f20:	00019fdc 	.word	0x00019fdc
   13f24:	00019ff4 	.word	0x00019ff4
   13f28:	0001a024 	.word	0x0001a024
   13f2c:	0001a050 	.word	0x0001a050
   13f30:	0001a084 	.word	0x0001a084
   13f34:	0001a0ac 	.word	0x0001a0ac
   13f38:	0001a0d0 	.word	0x0001a0d0
   13f3c:	0001a0e8 	.word	0x0001a0e8
   13f40:	0001a124 	.word	0x0001a124
   13f44:	0001a148 	.word	0x0001a148
   13f48:	0001a134 	.word	0x0001a134

00013f4c <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   13f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f4e:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
   13f50:	2041      	movs	r0, #65	; 0x41
   13f52:	5c23      	ldrb	r3, [r4, r0]
   13f54:	2501      	movs	r5, #1
   13f56:	432b      	orrs	r3, r5
   13f58:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   13f5a:	b292      	uxth	r2, r2
   13f5c:	2000      	movs	r0, #0
   13f5e:	5620      	ldrsb	r0, [r4, r0]
   13f60:	2300      	movs	r3, #0
   13f62:	4d12      	ldr	r5, [pc, #72]	; (13fac <_http_client_send_wait+0x60>)
   13f64:	47a8      	blx	r5
   13f66:	2800      	cmp	r0, #0
   13f68:	db16      	blt.n	13f98 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   13f6a:	2341      	movs	r3, #65	; 0x41
   13f6c:	5ce3      	ldrb	r3, [r4, r3]
   13f6e:	07db      	lsls	r3, r3, #31
   13f70:	d518      	bpl.n	13fa4 <_http_client_send_wait+0x58>
   13f72:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
   13f74:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   13f76:	2b02      	cmp	r3, #2
   13f78:	d917      	bls.n	13faa <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
   13f7a:	4f0d      	ldr	r7, [pc, #52]	; (13fb0 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
   13f7c:	4e0d      	ldr	r6, [pc, #52]	; (13fb4 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   13f7e:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
   13f80:	2000      	movs	r0, #0
   13f82:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
   13f84:	6d60      	ldr	r0, [r4, #84]	; 0x54
   13f86:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   13f88:	5d63      	ldrb	r3, [r4, r5]
   13f8a:	07db      	lsls	r3, r3, #31
   13f8c:	d50c      	bpl.n	13fa8 <_http_client_send_wait+0x5c>
   13f8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   13f90:	2b02      	cmp	r3, #2
   13f92:	d8f5      	bhi.n	13f80 <_http_client_send_wait+0x34>
	return 0;
   13f94:	2000      	movs	r0, #0
   13f96:	e008      	b.n	13faa <_http_client_send_wait+0x5e>
		module->sending = 0;
   13f98:	2241      	movs	r2, #65	; 0x41
   13f9a:	5ca3      	ldrb	r3, [r4, r2]
   13f9c:	2101      	movs	r1, #1
   13f9e:	438b      	bics	r3, r1
   13fa0:	54a3      	strb	r3, [r4, r2]
		return result;
   13fa2:	e002      	b.n	13faa <_http_client_send_wait+0x5e>
	return 0;
   13fa4:	2000      	movs	r0, #0
   13fa6:	e000      	b.n	13faa <_http_client_send_wait+0x5e>
   13fa8:	2000      	movs	r0, #0
}
   13faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13fac:	0000dc9d 	.word	0x0000dc9d
   13fb0:	0000bf01 	.word	0x0000bf01
   13fb4:	000150e9 	.word	0x000150e9

00013fb8 <http_client_get_config_defaults>:
	config->port = 443;
   13fb8:	23bc      	movs	r3, #188	; 0xbc
   13fba:	33ff      	adds	r3, #255	; 0xff
   13fbc:	8003      	strh	r3, [r0, #0]
	config->tls = 1;
   13fbe:	3bbb      	subs	r3, #187	; 0xbb
   13fc0:	3bff      	subs	r3, #255	; 0xff
   13fc2:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
   13fc4:	4b06      	ldr	r3, [pc, #24]	; (13fe0 <http_client_get_config_defaults+0x28>)
   13fc6:	8103      	strh	r3, [r0, #8]
	config->timer_inst = NULL;
   13fc8:	2300      	movs	r3, #0
   13fca:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
   13fcc:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
   13fce:	3301      	adds	r3, #1
   13fd0:	33ff      	adds	r3, #255	; 0xff
   13fd2:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   13fd4:	3bae      	subs	r3, #174	; 0xae
   13fd6:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   13fd8:	4b02      	ldr	r3, [pc, #8]	; (13fe4 <http_client_get_config_defaults+0x2c>)
   13fda:	6183      	str	r3, [r0, #24]
}
   13fdc:	4770      	bx	lr
   13fde:	46c0      	nop			; (mov r8, r8)
   13fe0:	00004e20 	.word	0x00004e20
   13fe4:	0001a320 	.word	0x0001a320

00013fe8 <http_client_init>:
{
   13fe8:	b570      	push	{r4, r5, r6, lr}
   13fea:	0004      	movs	r4, r0
   13fec:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
   13fee:	2800      	cmp	r0, #0
   13ff0:	d038      	beq.n	14064 <http_client_init+0x7c>
   13ff2:	2900      	cmp	r1, #0
   13ff4:	d039      	beq.n	1406a <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
   13ff6:	690b      	ldr	r3, [r1, #16]
   13ff8:	2b00      	cmp	r3, #0
   13ffa:	d039      	beq.n	14070 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
   13ffc:	684b      	ldr	r3, [r1, #4]
   13ffe:	2b00      	cmp	r3, #0
   14000:	d039      	beq.n	14076 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   14002:	694b      	ldr	r3, [r1, #20]
   14004:	2b51      	cmp	r3, #81	; 0x51
   14006:	d939      	bls.n	1407c <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
   14008:	22e8      	movs	r2, #232	; 0xe8
   1400a:	2100      	movs	r1, #0
   1400c:	4b1e      	ldr	r3, [pc, #120]	; (14088 <http_client_init+0xa0>)
   1400e:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   14010:	0020      	movs	r0, r4
   14012:	3050      	adds	r0, #80	; 0x50
   14014:	221c      	movs	r2, #28
   14016:	0029      	movs	r1, r5
   14018:	4b1c      	ldr	r3, [pc, #112]	; (1408c <http_client_init+0xa4>)
   1401a:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
   1401c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1401e:	2b00      	cmp	r3, #0
   14020:	d008      	beq.n	14034 <http_client_init+0x4c>
	if (config->timeout > 0) {
   14022:	892b      	ldrh	r3, [r5, #8]
   14024:	2b00      	cmp	r3, #0
   14026:	d111      	bne.n	1404c <http_client_init+0x64>
	module->req.state = STATE_INIT;
   14028:	2300      	movs	r3, #0
   1402a:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   1402c:	22d8      	movs	r2, #216	; 0xd8
   1402e:	50a3      	str	r3, [r4, r2]
	return 0;
   14030:	2000      	movs	r0, #0
}
   14032:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   14034:	6928      	ldr	r0, [r5, #16]
   14036:	4b16      	ldr	r3, [pc, #88]	; (14090 <http_client_init+0xa8>)
   14038:	4798      	blx	r3
   1403a:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   1403c:	2800      	cmp	r0, #0
   1403e:	d020      	beq.n	14082 <http_client_init+0x9a>
		module->alloc_buffer = 1;
   14040:	2241      	movs	r2, #65	; 0x41
   14042:	5ca3      	ldrb	r3, [r4, r2]
   14044:	2104      	movs	r1, #4
   14046:	430b      	orrs	r3, r1
   14048:	54a3      	strb	r3, [r4, r2]
   1404a:	e7ea      	b.n	14022 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   1404c:	6868      	ldr	r0, [r5, #4]
   1404e:	2300      	movs	r3, #0
   14050:	0022      	movs	r2, r4
   14052:	4910      	ldr	r1, [pc, #64]	; (14094 <http_client_init+0xac>)
   14054:	4d10      	ldr	r5, [pc, #64]	; (14098 <http_client_init+0xb0>)
   14056:	47a8      	blx	r5
   14058:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
   1405a:	2800      	cmp	r0, #0
   1405c:	dae4      	bge.n	14028 <http_client_init+0x40>
			return -ENOSPC;
   1405e:	201c      	movs	r0, #28
   14060:	4240      	negs	r0, r0
   14062:	e7e6      	b.n	14032 <http_client_init+0x4a>
		return -EINVAL;
   14064:	2016      	movs	r0, #22
   14066:	4240      	negs	r0, r0
   14068:	e7e3      	b.n	14032 <http_client_init+0x4a>
   1406a:	2016      	movs	r0, #22
   1406c:	4240      	negs	r0, r0
   1406e:	e7e0      	b.n	14032 <http_client_init+0x4a>
		return -EINVAL;
   14070:	2016      	movs	r0, #22
   14072:	4240      	negs	r0, r0
   14074:	e7dd      	b.n	14032 <http_client_init+0x4a>
		return -EINVAL;
   14076:	2016      	movs	r0, #22
   14078:	4240      	negs	r0, r0
   1407a:	e7da      	b.n	14032 <http_client_init+0x4a>
		return -EINVAL;
   1407c:	2016      	movs	r0, #22
   1407e:	4240      	negs	r0, r0
   14080:	e7d7      	b.n	14032 <http_client_init+0x4a>
			return -ENOMEM;
   14082:	200c      	movs	r0, #12
   14084:	4240      	negs	r0, r0
   14086:	e7d4      	b.n	14032 <http_client_init+0x4a>
   14088:	000165ff 	.word	0x000165ff
   1408c:	000165c9 	.word	0x000165c9
   14090:	000165a1 	.word	0x000165a1
   14094:	000141ad 	.word	0x000141ad
   14098:	00015075 	.word	0x00015075

0001409c <http_client_register_callback>:
	if (module == NULL) {
   1409c:	2800      	cmp	r0, #0
   1409e:	d002      	beq.n	140a6 <http_client_register_callback+0xa>
	module->cb = callback;
   140a0:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
   140a2:	2000      	movs	r0, #0
}
   140a4:	4770      	bx	lr
		return -EINVAL;
   140a6:	2016      	movs	r0, #22
   140a8:	4240      	negs	r0, r0
   140aa:	e7fb      	b.n	140a4 <http_client_register_callback+0x8>

000140ac <_http_client_clear_conn>:
{
   140ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   140ae:	b085      	sub	sp, #20
   140b0:	0004      	movs	r4, r0
   140b2:	000e      	movs	r6, r1
	if (module->req.entity.close) {
   140b4:	23c0      	movs	r3, #192	; 0xc0
   140b6:	58c3      	ldr	r3, [r0, r3]
   140b8:	2b00      	cmp	r3, #0
   140ba:	d002      	beq.n	140c2 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
   140bc:	22c4      	movs	r2, #196	; 0xc4
   140be:	5880      	ldr	r0, [r0, r2]
   140c0:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
   140c2:	0020      	movs	r0, r4
   140c4:	30b0      	adds	r0, #176	; 0xb0
   140c6:	2218      	movs	r2, #24
   140c8:	2100      	movs	r1, #0
   140ca:	4b17      	ldr	r3, [pc, #92]	; (14128 <_http_client_clear_conn+0x7c>)
   140cc:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   140ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   140d0:	2b00      	cmp	r3, #0
   140d2:	d124      	bne.n	1411e <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
   140d4:	2300      	movs	r3, #0
   140d6:	56e3      	ldrsb	r3, [r4, r3]
   140d8:	009b      	lsls	r3, r3, #2
   140da:	2500      	movs	r5, #0
   140dc:	4a13      	ldr	r2, [pc, #76]	; (1412c <_http_client_clear_conn+0x80>)
   140de:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
   140e0:	0020      	movs	r0, r4
   140e2:	306c      	adds	r0, #108	; 0x6c
   140e4:	226c      	movs	r2, #108	; 0x6c
   140e6:	2100      	movs	r1, #0
   140e8:	4f0f      	ldr	r7, [pc, #60]	; (14128 <_http_client_clear_conn+0x7c>)
   140ea:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   140ec:	0020      	movs	r0, r4
   140ee:	30d8      	adds	r0, #216	; 0xd8
   140f0:	2210      	movs	r2, #16
   140f2:	2100      	movs	r1, #0
   140f4:	47b8      	blx	r7
	module->req.state = STATE_INIT;
   140f6:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   140f8:	23d8      	movs	r3, #216	; 0xd8
   140fa:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
   140fc:	2241      	movs	r2, #65	; 0x41
   140fe:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
   14100:	2101      	movs	r1, #1
   14102:	438b      	bics	r3, r1
   14104:	3101      	adds	r1, #1
   14106:	438b      	bics	r3, r1
   14108:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
   1410a:	9601      	str	r6, [sp, #4]
	if (module->cb) {
   1410c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1410e:	2b00      	cmp	r3, #0
   14110:	d003      	beq.n	1411a <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   14112:	aa01      	add	r2, sp, #4
   14114:	3102      	adds	r1, #2
   14116:	0020      	movs	r0, r4
   14118:	4798      	blx	r3
}
   1411a:	b005      	add	sp, #20
   1411c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
   1411e:	2000      	movs	r0, #0
   14120:	5620      	ldrsb	r0, [r4, r0]
   14122:	4b03      	ldr	r3, [pc, #12]	; (14130 <_http_client_clear_conn+0x84>)
   14124:	4798      	blx	r3
   14126:	e7d5      	b.n	140d4 <_http_client_clear_conn+0x28>
   14128:	000165ff 	.word	0x000165ff
   1412c:	20000854 	.word	0x20000854
   14130:	0000ddc9 	.word	0x0000ddc9

00014134 <http_client_socket_resolve_handler>:
{
   14134:	b5f0      	push	{r4, r5, r6, r7, lr}
   14136:	b087      	sub	sp, #28
   14138:	9000      	str	r0, [sp, #0]
   1413a:	9101      	str	r1, [sp, #4]
   1413c:	4c17      	ldr	r4, [pc, #92]	; (1419c <http_client_socket_resolve_handler+0x68>)
   1413e:	0026      	movs	r6, r4
   14140:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   14142:	4f17      	ldr	r7, [pc, #92]	; (141a0 <http_client_socket_resolve_handler+0x6c>)
   14144:	e015      	b.n	14172 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
   14146:	2302      	movs	r3, #2
   14148:	aa02      	add	r2, sp, #8
   1414a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   1414c:	334e      	adds	r3, #78	; 0x4e
   1414e:	5aeb      	ldrh	r3, [r5, r3]
   14150:	021a      	lsls	r2, r3, #8
   14152:	0a1b      	lsrs	r3, r3, #8
   14154:	4313      	orrs	r3, r2
   14156:	aa02      	add	r2, sp, #8
   14158:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
   1415a:	9b01      	ldr	r3, [sp, #4]
   1415c:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1415e:	2000      	movs	r0, #0
   14160:	5628      	ldrsb	r0, [r5, r0]
   14162:	2210      	movs	r2, #16
   14164:	a902      	add	r1, sp, #8
   14166:	4b0f      	ldr	r3, [pc, #60]	; (141a4 <http_client_socket_resolve_handler+0x70>)
   14168:	4798      	blx	r3
				return;
   1416a:	e015      	b.n	14198 <http_client_socket_resolve_handler+0x64>
   1416c:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   1416e:	42b4      	cmp	r4, r6
   14170:	d012      	beq.n	14198 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
   14172:	6825      	ldr	r5, [r4, #0]
   14174:	2d00      	cmp	r5, #0
   14176:	d0f9      	beq.n	1416c <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   14178:	1c69      	adds	r1, r5, #1
   1417a:	9800      	ldr	r0, [sp, #0]
   1417c:	47b8      	blx	r7
   1417e:	2800      	cmp	r0, #0
   14180:	d1f4      	bne.n	1416c <http_client_socket_resolve_handler+0x38>
   14182:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
   14184:	2b01      	cmp	r3, #1
   14186:	d1f1      	bne.n	1416c <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   14188:	9b01      	ldr	r3, [sp, #4]
   1418a:	2b00      	cmp	r3, #0
   1418c:	d1db      	bne.n	14146 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   1418e:	2176      	movs	r1, #118	; 0x76
   14190:	4249      	negs	r1, r1
   14192:	0028      	movs	r0, r5
   14194:	4b04      	ldr	r3, [pc, #16]	; (141a8 <http_client_socket_resolve_handler+0x74>)
   14196:	4798      	blx	r3
}
   14198:	b007      	add	sp, #28
   1419a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1419c:	20000854 	.word	0x20000854
   141a0:	00016afd 	.word	0x00016afd
   141a4:	0000dc0d 	.word	0x0000dc0d
   141a8:	000140ad 	.word	0x000140ad

000141ac <http_client_timer_callback>:
{
   141ac:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
   141ae:	2a00      	cmp	r2, #0
   141b0:	d004      	beq.n	141bc <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
   141b2:	213e      	movs	r1, #62	; 0x3e
   141b4:	4249      	negs	r1, r1
   141b6:	0010      	movs	r0, r2
   141b8:	4b01      	ldr	r3, [pc, #4]	; (141c0 <http_client_timer_callback+0x14>)
   141ba:	4798      	blx	r3
}
   141bc:	bd10      	pop	{r4, pc}
   141be:	46c0      	nop			; (mov r8, r8)
   141c0:	000140ad 	.word	0x000140ad

000141c4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   141c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   141c6:	46de      	mov	lr, fp
   141c8:	4657      	mov	r7, sl
   141ca:	b580      	push	{r7, lr}
   141cc:	b095      	sub	sp, #84	; 0x54
   141ce:	af02      	add	r7, sp, #8
   141d0:	0004      	movs	r4, r0
   141d2:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   141d4:	2310      	movs	r3, #16
   141d6:	2208      	movs	r2, #8
   141d8:	18ba      	adds	r2, r7, r2
   141da:	18d2      	adds	r2, r2, r3
   141dc:	4bb1      	ldr	r3, [pc, #708]	; (144a4 <_http_client_request+0x2e0>)
   141de:	cb23      	ldmia	r3!, {r0, r1, r5}
   141e0:	c223      	stmia	r2!, {r0, r1, r5}
   141e2:	681b      	ldr	r3, [r3, #0]
   141e4:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   141e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   141e8:	1dd3      	adds	r3, r2, #7
   141ea:	08db      	lsrs	r3, r3, #3
   141ec:	00db      	lsls	r3, r3, #3
   141ee:	4669      	mov	r1, sp
   141f0:	1acb      	subs	r3, r1, r3
   141f2:	469d      	mov	sp, r3
   141f4:	ae02      	add	r6, sp, #8

	if (module == NULL) {
   141f6:	2c00      	cmp	r4, #0
   141f8:	d100      	bne.n	141fc <_http_client_request+0x38>
   141fa:	e1f0      	b.n	145de <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
   141fc:	2341      	movs	r3, #65	; 0x41
   141fe:	5ce3      	ldrb	r3, [r4, r3]
   14200:	07db      	lsls	r3, r3, #31
   14202:	d500      	bpl.n	14206 <_http_client_request+0x42>
   14204:	e1eb      	b.n	145de <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
   14206:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14208:	2b03      	cmp	r3, #3
   1420a:	d004      	beq.n	14216 <_http_client_request+0x52>
   1420c:	2b04      	cmp	r3, #4
   1420e:	d100      	bne.n	14212 <_http_client_request+0x4e>
   14210:	e120      	b.n	14454 <_http_client_request+0x290>
   14212:	46dd      	mov	sp, fp
   14214:	e1e4      	b.n	145e0 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
   14216:	2300      	movs	r3, #0
   14218:	21cc      	movs	r1, #204	; 0xcc
   1421a:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
   1421c:	3104      	adds	r1, #4
   1421e:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   14220:	9400      	str	r4, [sp, #0]
   14222:	4ba1      	ldr	r3, [pc, #644]	; (144a8 <_http_client_request+0x2e4>)
   14224:	0031      	movs	r1, r6
   14226:	202c      	movs	r0, #44	; 0x2c
   14228:	2508      	movs	r5, #8
   1422a:	46ac      	mov	ip, r5
   1422c:	44bc      	add	ip, r7
   1422e:	4460      	add	r0, ip
   14230:	4d9e      	ldr	r5, [pc, #632]	; (144ac <_http_client_request+0x2e8>)
   14232:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
   14234:	23c8      	movs	r3, #200	; 0xc8
   14236:	5ce3      	ldrb	r3, [r4, r3]
   14238:	2b01      	cmp	r3, #1
   1423a:	d100      	bne.n	1423e <_http_client_request+0x7a>
   1423c:	e0a9      	b.n	14392 <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
   1423e:	2b02      	cmp	r3, #2
   14240:	d100      	bne.n	14244 <_http_client_request+0x80>
   14242:	e0af      	b.n	143a4 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   14244:	2b03      	cmp	r3, #3
   14246:	d100      	bne.n	1424a <_http_client_request+0x86>
   14248:	e0b5      	b.n	143b6 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
   1424a:	2b04      	cmp	r3, #4
   1424c:	d100      	bne.n	14250 <_http_client_request+0x8c>
   1424e:	e0bb      	b.n	143c8 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   14250:	2b05      	cmp	r3, #5
   14252:	d100      	bne.n	14256 <_http_client_request+0x92>
   14254:	e0c1      	b.n	143da <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   14256:	2b06      	cmp	r3, #6
   14258:	d100      	bne.n	1425c <_http_client_request+0x98>
   1425a:	e0c7      	b.n	143ec <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   1425c:	0025      	movs	r5, r4
   1425e:	3570      	adds	r5, #112	; 0x70
   14260:	0028      	movs	r0, r5
   14262:	4b93      	ldr	r3, [pc, #588]	; (144b0 <_http_client_request+0x2ec>)
   14264:	469a      	mov	sl, r3
   14266:	4798      	blx	r3
   14268:	0002      	movs	r2, r0
   1426a:	0029      	movs	r1, r5
   1426c:	232c      	movs	r3, #44	; 0x2c
   1426e:	2008      	movs	r0, #8
   14270:	1838      	adds	r0, r7, r0
   14272:	18c0      	adds	r0, r0, r3
   14274:	4d8f      	ldr	r5, [pc, #572]	; (144b4 <_http_client_request+0x2f0>)
   14276:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   14278:	220b      	movs	r2, #11
   1427a:	498f      	ldr	r1, [pc, #572]	; (144b8 <_http_client_request+0x2f4>)
   1427c:	232c      	movs	r3, #44	; 0x2c
   1427e:	2008      	movs	r0, #8
   14280:	1838      	adds	r0, r7, r0
   14282:	18c0      	adds	r0, r0, r3
   14284:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   14286:	220c      	movs	r2, #12
   14288:	498c      	ldr	r1, [pc, #560]	; (144bc <_http_client_request+0x2f8>)
   1428a:	232c      	movs	r3, #44	; 0x2c
   1428c:	2008      	movs	r0, #8
   1428e:	1838      	adds	r0, r7, r0
   14290:	18c0      	adds	r0, r0, r3
   14292:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   14294:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   14296:	607b      	str	r3, [r7, #4]
   14298:	0018      	movs	r0, r3
   1429a:	47d0      	blx	sl
   1429c:	0002      	movs	r2, r0
   1429e:	6879      	ldr	r1, [r7, #4]
   142a0:	232c      	movs	r3, #44	; 0x2c
   142a2:	2008      	movs	r0, #8
   142a4:	1838      	adds	r0, r7, r0
   142a6:	18c0      	adds	r0, r0, r3
   142a8:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   142aa:	2202      	movs	r2, #2
   142ac:	4984      	ldr	r1, [pc, #528]	; (144c0 <_http_client_request+0x2fc>)
   142ae:	232c      	movs	r3, #44	; 0x2c
   142b0:	2008      	movs	r0, #8
   142b2:	1838      	adds	r0, r7, r0
   142b4:	18c0      	adds	r0, r0, r3
   142b6:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   142b8:	2206      	movs	r2, #6
   142ba:	4982      	ldr	r1, [pc, #520]	; (144c4 <_http_client_request+0x300>)
   142bc:	232c      	movs	r3, #44	; 0x2c
   142be:	2008      	movs	r0, #8
   142c0:	1838      	adds	r0, r7, r0
   142c2:	18c0      	adds	r0, r0, r3
   142c4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   142c6:	1c63      	adds	r3, r4, #1
   142c8:	607b      	str	r3, [r7, #4]
   142ca:	0018      	movs	r0, r3
   142cc:	47d0      	blx	sl
   142ce:	0002      	movs	r2, r0
   142d0:	6879      	ldr	r1, [r7, #4]
   142d2:	232c      	movs	r3, #44	; 0x2c
   142d4:	2008      	movs	r0, #8
   142d6:	1838      	adds	r0, r7, r0
   142d8:	18c0      	adds	r0, r0, r3
   142da:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   142dc:	2202      	movs	r2, #2
   142de:	4978      	ldr	r1, [pc, #480]	; (144c0 <_http_client_request+0x2fc>)
   142e0:	232c      	movs	r3, #44	; 0x2c
   142e2:	2008      	movs	r0, #8
   142e4:	1838      	adds	r0, r7, r0
   142e6:	18c0      	adds	r0, r0, r3
   142e8:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   142ea:	2218      	movs	r2, #24
   142ec:	4976      	ldr	r1, [pc, #472]	; (144c8 <_http_client_request+0x304>)
   142ee:	232c      	movs	r3, #44	; 0x2c
   142f0:	2008      	movs	r0, #8
   142f2:	1838      	adds	r0, r7, r0
   142f4:	18c0      	adds	r0, r0, r3
   142f6:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   142f8:	2213      	movs	r2, #19
   142fa:	4974      	ldr	r1, [pc, #464]	; (144cc <_http_client_request+0x308>)
   142fc:	232c      	movs	r3, #44	; 0x2c
   142fe:	2008      	movs	r0, #8
   14300:	1838      	adds	r0, r7, r0
   14302:	18c0      	adds	r0, r0, r3
   14304:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   14306:	2217      	movs	r2, #23
   14308:	4971      	ldr	r1, [pc, #452]	; (144d0 <_http_client_request+0x30c>)
   1430a:	232c      	movs	r3, #44	; 0x2c
   1430c:	2008      	movs	r0, #8
   1430e:	1838      	adds	r0, r7, r0
   14310:	18c0      	adds	r0, r0, r3
   14312:	47a8      	blx	r5

		if (entity->read != NULL) {
   14314:	0023      	movs	r3, r4
   14316:	33b0      	adds	r3, #176	; 0xb0
   14318:	68db      	ldr	r3, [r3, #12]
   1431a:	2b00      	cmp	r3, #0
   1431c:	d07b      	beq.n	14416 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
   1431e:	23b0      	movs	r3, #176	; 0xb0
   14320:	5ce3      	ldrb	r3, [r4, r3]
   14322:	2b00      	cmp	r3, #0
   14324:	d16b      	bne.n	143fe <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
   14326:	0023      	movs	r3, r4
   14328:	33b0      	adds	r3, #176	; 0xb0
   1432a:	689b      	ldr	r3, [r3, #8]
   1432c:	2b00      	cmp	r3, #0
   1432e:	d072      	beq.n	14416 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   14330:	0022      	movs	r2, r4
   14332:	32b0      	adds	r2, #176	; 0xb0
   14334:	6950      	ldr	r0, [r2, #20]
   14336:	4798      	blx	r3
   14338:	23cc      	movs	r3, #204	; 0xcc
   1433a:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
   1433c:	2800      	cmp	r0, #0
   1433e:	da00      	bge.n	14342 <_http_client_request+0x17e>
   14340:	e0ac      	b.n	1449c <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   14342:	0002      	movs	r2, r0
   14344:	4963      	ldr	r1, [pc, #396]	; (144d4 <_http_client_request+0x310>)
   14346:	2320      	movs	r3, #32
   14348:	2008      	movs	r0, #8
   1434a:	1838      	adds	r0, r7, r0
   1434c:	18c0      	adds	r0, r0, r3
   1434e:	4b62      	ldr	r3, [pc, #392]	; (144d8 <_http_client_request+0x314>)
   14350:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   14352:	2210      	movs	r2, #16
   14354:	4961      	ldr	r1, [pc, #388]	; (144dc <_http_client_request+0x318>)
   14356:	232c      	movs	r3, #44	; 0x2c
   14358:	2008      	movs	r0, #8
   1435a:	1838      	adds	r0, r7, r0
   1435c:	18c0      	adds	r0, r0, r3
   1435e:	4d55      	ldr	r5, [pc, #340]	; (144b4 <_http_client_request+0x2f0>)
   14360:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
   14362:	2320      	movs	r3, #32
   14364:	2208      	movs	r2, #8
   14366:	18ba      	adds	r2, r7, r2
   14368:	18d0      	adds	r0, r2, r3
   1436a:	4b51      	ldr	r3, [pc, #324]	; (144b0 <_http_client_request+0x2ec>)
   1436c:	4798      	blx	r3
   1436e:	0002      	movs	r2, r0
   14370:	2320      	movs	r3, #32
   14372:	2108      	movs	r1, #8
   14374:	1879      	adds	r1, r7, r1
   14376:	18c9      	adds	r1, r1, r3
   14378:	330c      	adds	r3, #12
   1437a:	2008      	movs	r0, #8
   1437c:	1838      	adds	r0, r7, r0
   1437e:	18c0      	adds	r0, r0, r3
   14380:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   14382:	2202      	movs	r2, #2
   14384:	494e      	ldr	r1, [pc, #312]	; (144c0 <_http_client_request+0x2fc>)
   14386:	232c      	movs	r3, #44	; 0x2c
   14388:	2008      	movs	r0, #8
   1438a:	1838      	adds	r0, r7, r0
   1438c:	18c0      	adds	r0, r0, r3
   1438e:	47a8      	blx	r5
   14390:	e041      	b.n	14416 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
   14392:	2204      	movs	r2, #4
   14394:	4952      	ldr	r1, [pc, #328]	; (144e0 <_http_client_request+0x31c>)
   14396:	332b      	adds	r3, #43	; 0x2b
   14398:	2008      	movs	r0, #8
   1439a:	1838      	adds	r0, r7, r0
   1439c:	18c0      	adds	r0, r0, r3
   1439e:	4b45      	ldr	r3, [pc, #276]	; (144b4 <_http_client_request+0x2f0>)
   143a0:	4798      	blx	r3
   143a2:	e75b      	b.n	1425c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
   143a4:	2205      	movs	r2, #5
   143a6:	494f      	ldr	r1, [pc, #316]	; (144e4 <_http_client_request+0x320>)
   143a8:	332a      	adds	r3, #42	; 0x2a
   143aa:	2008      	movs	r0, #8
   143ac:	1838      	adds	r0, r7, r0
   143ae:	18c0      	adds	r0, r0, r3
   143b0:	4b40      	ldr	r3, [pc, #256]	; (144b4 <_http_client_request+0x2f0>)
   143b2:	4798      	blx	r3
   143b4:	e752      	b.n	1425c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   143b6:	2207      	movs	r2, #7
   143b8:	494b      	ldr	r1, [pc, #300]	; (144e8 <_http_client_request+0x324>)
   143ba:	3329      	adds	r3, #41	; 0x29
   143bc:	2008      	movs	r0, #8
   143be:	1838      	adds	r0, r7, r0
   143c0:	18c0      	adds	r0, r0, r3
   143c2:	4b3c      	ldr	r3, [pc, #240]	; (144b4 <_http_client_request+0x2f0>)
   143c4:	4798      	blx	r3
   143c6:	e749      	b.n	1425c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   143c8:	2204      	movs	r2, #4
   143ca:	4948      	ldr	r1, [pc, #288]	; (144ec <_http_client_request+0x328>)
   143cc:	3328      	adds	r3, #40	; 0x28
   143ce:	2008      	movs	r0, #8
   143d0:	1838      	adds	r0, r7, r0
   143d2:	18c0      	adds	r0, r0, r3
   143d4:	4b37      	ldr	r3, [pc, #220]	; (144b4 <_http_client_request+0x2f0>)
   143d6:	4798      	blx	r3
   143d8:	e740      	b.n	1425c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   143da:	2208      	movs	r2, #8
   143dc:	4944      	ldr	r1, [pc, #272]	; (144f0 <_http_client_request+0x32c>)
   143de:	3327      	adds	r3, #39	; 0x27
   143e0:	2008      	movs	r0, #8
   143e2:	1838      	adds	r0, r7, r0
   143e4:	18c0      	adds	r0, r0, r3
   143e6:	4b33      	ldr	r3, [pc, #204]	; (144b4 <_http_client_request+0x2f0>)
   143e8:	4798      	blx	r3
   143ea:	e737      	b.n	1425c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   143ec:	2205      	movs	r2, #5
   143ee:	4941      	ldr	r1, [pc, #260]	; (144f4 <_http_client_request+0x330>)
   143f0:	3326      	adds	r3, #38	; 0x26
   143f2:	2008      	movs	r0, #8
   143f4:	1838      	adds	r0, r7, r0
   143f6:	18c0      	adds	r0, r0, r3
   143f8:	4b2e      	ldr	r3, [pc, #184]	; (144b4 <_http_client_request+0x2f0>)
   143fa:	4798      	blx	r3
   143fc:	e72e      	b.n	1425c <_http_client_request+0x98>
				module->req.content_length = -1;
   143fe:	2201      	movs	r2, #1
   14400:	4252      	negs	r2, r2
   14402:	23cc      	movs	r3, #204	; 0xcc
   14404:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   14406:	321d      	adds	r2, #29
   14408:	493b      	ldr	r1, [pc, #236]	; (144f8 <_http_client_request+0x334>)
   1440a:	3ba0      	subs	r3, #160	; 0xa0
   1440c:	2008      	movs	r0, #8
   1440e:	1838      	adds	r0, r7, r0
   14410:	18c0      	adds	r0, r0, r3
   14412:	4b28      	ldr	r3, [pc, #160]	; (144b4 <_http_client_request+0x2f0>)
   14414:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
   14416:	23d4      	movs	r3, #212	; 0xd4
   14418:	58e5      	ldr	r5, [r4, r3]
   1441a:	2d00      	cmp	r5, #0
   1441c:	d00a      	beq.n	14434 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
   1441e:	0028      	movs	r0, r5
   14420:	4b23      	ldr	r3, [pc, #140]	; (144b0 <_http_client_request+0x2ec>)
   14422:	4798      	blx	r3
   14424:	0002      	movs	r2, r0
   14426:	0029      	movs	r1, r5
   14428:	232c      	movs	r3, #44	; 0x2c
   1442a:	2008      	movs	r0, #8
   1442c:	1838      	adds	r0, r7, r0
   1442e:	18c0      	adds	r0, r0, r3
   14430:	4b20      	ldr	r3, [pc, #128]	; (144b4 <_http_client_request+0x2f0>)
   14432:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   14434:	2202      	movs	r2, #2
   14436:	4922      	ldr	r1, [pc, #136]	; (144c0 <_http_client_request+0x2fc>)
   14438:	232c      	movs	r3, #44	; 0x2c
   1443a:	2008      	movs	r0, #8
   1443c:	1838      	adds	r0, r7, r0
   1443e:	18c0      	adds	r0, r0, r3
   14440:	4b1c      	ldr	r3, [pc, #112]	; (144b4 <_http_client_request+0x2f0>)
   14442:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   14444:	232c      	movs	r3, #44	; 0x2c
   14446:	2208      	movs	r2, #8
   14448:	18ba      	adds	r2, r7, r2
   1444a:	18d0      	adds	r0, r2, r3
   1444c:	4b2b      	ldr	r3, [pc, #172]	; (144fc <_http_client_request+0x338>)
   1444e:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
   14450:	2304      	movs	r3, #4
   14452:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
   14454:	23cc      	movs	r3, #204	; 0xcc
   14456:	58e2      	ldr	r2, [r4, r3]
   14458:	2a00      	cmp	r2, #0
   1445a:	db51      	blt.n	14500 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
   1445c:	dc00      	bgt.n	14460 <_http_client_request+0x29c>
   1445e:	e0f0      	b.n	14642 <_http_client_request+0x47e>
   14460:	0023      	movs	r3, r4
   14462:	33b0      	adds	r3, #176	; 0xb0
   14464:	68dd      	ldr	r5, [r3, #12]
   14466:	2d00      	cmp	r5, #0
   14468:	d100      	bne.n	1446c <_http_client_request+0x2a8>
   1446a:	e0ea      	b.n	14642 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
   1446c:	23d0      	movs	r3, #208	; 0xd0
   1446e:	58e3      	ldr	r3, [r4, r3]
   14470:	429a      	cmp	r2, r3
   14472:	dd00      	ble.n	14476 <_http_client_request+0x2b2>
   14474:	e0ba      	b.n	145ec <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
   14476:	23c0      	movs	r3, #192	; 0xc0
   14478:	58e3      	ldr	r3, [r4, r3]
   1447a:	2b00      	cmp	r3, #0
   1447c:	d002      	beq.n	14484 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
   1447e:	22c4      	movs	r2, #196	; 0xc4
   14480:	58a0      	ldr	r0, [r4, r2]
   14482:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
   14484:	2302      	movs	r3, #2
   14486:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   14488:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1448a:	2b00      	cmp	r3, #0
   1448c:	d100      	bne.n	14490 <_http_client_request+0x2cc>
   1448e:	e6c0      	b.n	14212 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   14490:	220c      	movs	r2, #12
   14492:	18ba      	adds	r2, r7, r2
   14494:	2101      	movs	r1, #1
   14496:	0020      	movs	r0, r4
   14498:	4798      	blx	r3
   1449a:	e6ba      	b.n	14212 <_http_client_request+0x4e>
					module->req.content_length = 0;
   1449c:	2200      	movs	r2, #0
   1449e:	50e2      	str	r2, [r4, r3]
   144a0:	e7b9      	b.n	14416 <_http_client_request+0x252>
   144a2:	46c0      	nop			; (mov r8, r8)
   144a4:	0001a208 	.word	0x0001a208
   144a8:	00013f4d 	.word	0x00013f4d
   144ac:	00014f21 	.word	0x00014f21
   144b0:	00016b5b 	.word	0x00016b5b
   144b4:	00014f75 	.word	0x00014f75
   144b8:	0001a27c 	.word	0x0001a27c
   144bc:	0001a288 	.word	0x0001a288
   144c0:	0001a0a4 	.word	0x0001a0a4
   144c4:	0001a298 	.word	0x0001a298
   144c8:	0001a2a0 	.word	0x0001a2a0
   144cc:	0001a2bc 	.word	0x0001a2bc
   144d0:	0001a2d0 	.word	0x0001a2d0
   144d4:	0001a308 	.word	0x0001a308
   144d8:	00016ab9 	.word	0x00016ab9
   144dc:	0001a30c 	.word	0x0001a30c
   144e0:	0001a248 	.word	0x0001a248
   144e4:	0001a250 	.word	0x0001a250
   144e8:	0001a258 	.word	0x0001a258
   144ec:	0001a260 	.word	0x0001a260
   144f0:	0001a268 	.word	0x0001a268
   144f4:	0001a274 	.word	0x0001a274
   144f8:	0001a2e8 	.word	0x0001a2e8
   144fc:	00014f31 	.word	0x00014f31
		if (module->req.content_length < 0 && entity->read) {
   14500:	0023      	movs	r3, r4
   14502:	33b0      	adds	r3, #176	; 0xb0
   14504:	68dd      	ldr	r5, [r3, #12]
   14506:	2d00      	cmp	r5, #0
   14508:	d100      	bne.n	1450c <_http_client_request+0x348>
   1450a:	e09a      	b.n	14642 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   1450c:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   1450e:	58e3      	ldr	r3, [r4, r3]
   14510:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14512:	3a07      	subs	r2, #7
   14514:	1d71      	adds	r1, r6, #5
   14516:	0020      	movs	r0, r4
   14518:	30b0      	adds	r0, #176	; 0xb0
   1451a:	6940      	ldr	r0, [r0, #20]
   1451c:	47a8      	blx	r5
   1451e:	0005      	movs	r5, r0
   14520:	43c3      	mvns	r3, r0
   14522:	17db      	asrs	r3, r3, #31
   14524:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   14526:	220a      	movs	r2, #10
   14528:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   1452a:	210d      	movs	r1, #13
   1452c:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   1452e:	1973      	adds	r3, r6, r5
   14530:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   14532:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
   14534:	230f      	movs	r3, #15
   14536:	402b      	ands	r3, r5
   14538:	3206      	adds	r2, #6
   1453a:	3905      	subs	r1, #5
   1453c:	468c      	mov	ip, r1
   1453e:	44bc      	add	ip, r7
   14540:	4462      	add	r2, ip
   14542:	5cd3      	ldrb	r3, [r2, r3]
   14544:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
   14546:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
   14548:	2d0f      	cmp	r5, #15
   1454a:	dd0d      	ble.n	14568 <_http_client_request+0x3a4>
				ptr = buffer + 1;
   1454c:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
   1454e:	17eb      	asrs	r3, r5, #31
   14550:	220f      	movs	r2, #15
   14552:	4013      	ands	r3, r2
   14554:	195b      	adds	r3, r3, r5
   14556:	111b      	asrs	r3, r3, #4
   14558:	4013      	ands	r3, r2
   1455a:	3201      	adds	r2, #1
   1455c:	2008      	movs	r0, #8
   1455e:	4684      	mov	ip, r0
   14560:	44bc      	add	ip, r7
   14562:	4462      	add	r2, ip
   14564:	5cd3      	ldrb	r3, [r2, r3]
   14566:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
   14568:	2dff      	cmp	r5, #255	; 0xff
   1456a:	dd0d      	ble.n	14588 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
   1456c:	17ea      	asrs	r2, r5, #31
   1456e:	23ff      	movs	r3, #255	; 0xff
   14570:	4013      	ands	r3, r2
   14572:	195b      	adds	r3, r3, r5
   14574:	051b      	lsls	r3, r3, #20
   14576:	0f1b      	lsrs	r3, r3, #28
   14578:	2210      	movs	r2, #16
   1457a:	2108      	movs	r1, #8
   1457c:	468c      	mov	ip, r1
   1457e:	44bc      	add	ip, r7
   14580:	4462      	add	r2, ip
   14582:	5cd3      	ldrb	r3, [r2, r3]
   14584:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
   14586:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   14588:	1cca      	adds	r2, r1, #3
   1458a:	1b92      	subs	r2, r2, r6
   1458c:	1d2b      	adds	r3, r5, #4
   1458e:	18d2      	adds	r2, r2, r3
   14590:	b292      	uxth	r2, r2
   14592:	2000      	movs	r0, #0
   14594:	5620      	ldrsb	r0, [r4, r0]
   14596:	2300      	movs	r3, #0
   14598:	4e30      	ldr	r6, [pc, #192]	; (1465c <_http_client_request+0x498>)
   1459a:	47b0      	blx	r6
   1459c:	2800      	cmp	r0, #0
   1459e:	db19      	blt.n	145d4 <_http_client_request+0x410>
			module->req.sent_length += size;
   145a0:	22d0      	movs	r2, #208	; 0xd0
   145a2:	58a3      	ldr	r3, [r4, r2]
   145a4:	195b      	adds	r3, r3, r5
   145a6:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
   145a8:	2d00      	cmp	r5, #0
   145aa:	d000      	beq.n	145ae <_http_client_request+0x3ea>
   145ac:	e631      	b.n	14212 <_http_client_request+0x4e>
				if (module->req.entity.close) {
   145ae:	23c0      	movs	r3, #192	; 0xc0
   145b0:	58e3      	ldr	r3, [r4, r3]
   145b2:	2b00      	cmp	r3, #0
   145b4:	d002      	beq.n	145bc <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
   145b6:	3a0c      	subs	r2, #12
   145b8:	58a0      	ldr	r0, [r4, r2]
   145ba:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   145bc:	2302      	movs	r3, #2
   145be:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
   145c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   145c2:	2b00      	cmp	r3, #0
   145c4:	d100      	bne.n	145c8 <_http_client_request+0x404>
   145c6:	e624      	b.n	14212 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   145c8:	220c      	movs	r2, #12
   145ca:	18ba      	adds	r2, r7, r2
   145cc:	2101      	movs	r1, #1
   145ce:	0020      	movs	r0, r4
   145d0:	4798      	blx	r3
   145d2:	e61e      	b.n	14212 <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
   145d4:	2105      	movs	r1, #5
   145d6:	4249      	negs	r1, r1
   145d8:	0020      	movs	r0, r4
   145da:	4b21      	ldr	r3, [pc, #132]	; (14660 <_http_client_request+0x49c>)
   145dc:	4798      	blx	r3
   145de:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
   145e0:	46bd      	mov	sp, r7
   145e2:	b013      	add	sp, #76	; 0x4c
   145e4:	bc0c      	pop	{r2, r3}
   145e6:	4692      	mov	sl, r2
   145e8:	469b      	mov	fp, r3
   145ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   145ec:	0022      	movs	r2, r4
   145ee:	32b0      	adds	r2, #176	; 0xb0
   145f0:	6950      	ldr	r0, [r2, #20]
   145f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   145f4:	0031      	movs	r1, r6
   145f6:	47a8      	blx	r5
			if (size < 0) {
   145f8:	2800      	cmp	r0, #0
   145fa:	db16      	blt.n	1462a <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
   145fc:	23cc      	movs	r3, #204	; 0xcc
   145fe:	58e5      	ldr	r5, [r4, r3]
   14600:	3304      	adds	r3, #4
   14602:	58e3      	ldr	r3, [r4, r3]
   14604:	1aed      	subs	r5, r5, r3
   14606:	4285      	cmp	r5, r0
   14608:	dd00      	ble.n	1460c <_http_client_request+0x448>
   1460a:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   1460c:	b2aa      	uxth	r2, r5
   1460e:	2000      	movs	r0, #0
   14610:	5620      	ldrsb	r0, [r4, r0]
   14612:	2300      	movs	r3, #0
   14614:	0031      	movs	r1, r6
   14616:	4e11      	ldr	r6, [pc, #68]	; (1465c <_http_client_request+0x498>)
   14618:	47b0      	blx	r6
   1461a:	2800      	cmp	r0, #0
   1461c:	db0b      	blt.n	14636 <_http_client_request+0x472>
				module->req.sent_length += size;
   1461e:	23d0      	movs	r3, #208	; 0xd0
   14620:	58e2      	ldr	r2, [r4, r3]
   14622:	4694      	mov	ip, r2
   14624:	4465      	add	r5, ip
   14626:	50e5      	str	r5, [r4, r3]
   14628:	e5f3      	b.n	14212 <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   1462a:	2105      	movs	r1, #5
   1462c:	4249      	negs	r1, r1
   1462e:	0020      	movs	r0, r4
   14630:	4b0b      	ldr	r3, [pc, #44]	; (14660 <_http_client_request+0x49c>)
   14632:	4798      	blx	r3
   14634:	e5ed      	b.n	14212 <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
   14636:	2105      	movs	r1, #5
   14638:	4249      	negs	r1, r1
   1463a:	0020      	movs	r0, r4
   1463c:	4b08      	ldr	r3, [pc, #32]	; (14660 <_http_client_request+0x49c>)
   1463e:	4798      	blx	r3
					return;
   14640:	e7cd      	b.n	145de <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
   14642:	2302      	movs	r3, #2
   14644:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
   14646:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14648:	2b00      	cmp	r3, #0
   1464a:	d100      	bne.n	1464e <_http_client_request+0x48a>
   1464c:	e5e1      	b.n	14212 <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   1464e:	220c      	movs	r2, #12
   14650:	18ba      	adds	r2, r7, r2
   14652:	2101      	movs	r1, #1
   14654:	0020      	movs	r0, r4
   14656:	4798      	blx	r3
   14658:	e5db      	b.n	14212 <_http_client_request+0x4e>
   1465a:	46c0      	nop			; (mov r8, r8)
   1465c:	0000dc9d 	.word	0x0000dc9d
   14660:	000140ad 	.word	0x000140ad

00014664 <http_client_send_request>:
{
   14664:	b5f0      	push	{r4, r5, r6, r7, lr}
   14666:	46d6      	mov	lr, sl
   14668:	b500      	push	{lr}
   1466a:	b088      	sub	sp, #32
   1466c:	0004      	movs	r4, r0
   1466e:	000f      	movs	r7, r1
   14670:	4692      	mov	sl, r2
   14672:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
   14674:	2800      	cmp	r0, #0
   14676:	d100      	bne.n	1467a <http_client_send_request+0x16>
   14678:	e0d3      	b.n	14822 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
   1467a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1467c:	2b02      	cmp	r3, #2
   1467e:	d900      	bls.n	14682 <http_client_send_request+0x1e>
   14680:	e0d3      	b.n	1482a <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
   14682:	2207      	movs	r2, #7
   14684:	4981      	ldr	r1, [pc, #516]	; (1488c <http_client_send_request+0x228>)
   14686:	0038      	movs	r0, r7
   14688:	4b81      	ldr	r3, [pc, #516]	; (14890 <http_client_send_request+0x22c>)
   1468a:	4798      	blx	r3
		i = 7;
   1468c:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
   1468e:	2800      	cmp	r0, #0
   14690:	d007      	beq.n	146a2 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
   14692:	2208      	movs	r2, #8
   14694:	497f      	ldr	r1, [pc, #508]	; (14894 <http_client_send_request+0x230>)
   14696:	0038      	movs	r0, r7
   14698:	4b7d      	ldr	r3, [pc, #500]	; (14890 <http_client_send_request+0x22c>)
   1469a:	4798      	blx	r3
		i = 8;
   1469c:	4246      	negs	r6, r0
   1469e:	4146      	adcs	r6, r0
   146a0:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   146a2:	1c63      	adds	r3, r4, #1
   146a4:	19bd      	adds	r5, r7, r6
   146a6:	9302      	str	r3, [sp, #8]
   146a8:	0018      	movs	r0, r3
   146aa:	4b7b      	ldr	r3, [pc, #492]	; (14898 <http_client_send_request+0x234>)
   146ac:	4798      	blx	r3
   146ae:	0002      	movs	r2, r0
   146b0:	0029      	movs	r1, r5
   146b2:	9802      	ldr	r0, [sp, #8]
   146b4:	4b76      	ldr	r3, [pc, #472]	; (14890 <http_client_send_request+0x22c>)
   146b6:	4798      	blx	r3
   146b8:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   146ba:	782b      	ldrb	r3, [r5, #0]
   146bc:	2b00      	cmp	r3, #0
   146be:	d052      	beq.n	14766 <http_client_send_request+0x102>
   146c0:	2b2f      	cmp	r3, #47	; 0x2f
   146c2:	d052      	beq.n	1476a <http_client_send_request+0x106>
   146c4:	1c71      	adds	r1, r6, #1
   146c6:	1879      	adds	r1, r7, r1
   146c8:	2200      	movs	r2, #0
		module->host[j++] = url[i];
   146ca:	3201      	adds	r2, #1
   146cc:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   146ce:	000d      	movs	r5, r1
   146d0:	780b      	ldrb	r3, [r1, #0]
   146d2:	2b00      	cmp	r3, #0
   146d4:	d002      	beq.n	146dc <http_client_send_request+0x78>
   146d6:	3101      	adds	r1, #1
   146d8:	2b2f      	cmp	r3, #47	; 0x2f
   146da:	d1f6      	bne.n	146ca <http_client_send_request+0x66>
	module->host[j] = '\0';
   146dc:	18a2      	adds	r2, r4, r2
   146de:	2300      	movs	r3, #0
   146e0:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
   146e2:	7863      	ldrb	r3, [r4, #1]
   146e4:	2b00      	cmp	r3, #0
   146e6:	d100      	bne.n	146ea <http_client_send_request+0x86>
   146e8:	e0a3      	b.n	14832 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   146ea:	0028      	movs	r0, r5
   146ec:	4b6a      	ldr	r3, [pc, #424]	; (14898 <http_client_send_request+0x234>)
   146ee:	4798      	blx	r3
   146f0:	283f      	cmp	r0, #63	; 0x3f
   146f2:	d900      	bls.n	146f6 <http_client_send_request+0x92>
   146f4:	e0a1      	b.n	1483a <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
   146f6:	23d4      	movs	r3, #212	; 0xd4
   146f8:	58e0      	ldr	r0, [r4, r3]
   146fa:	2800      	cmp	r0, #0
   146fc:	d001      	beq.n	14702 <http_client_send_request+0x9e>
		free(module->req.ext_header);
   146fe:	4b67      	ldr	r3, [pc, #412]	; (1489c <http_client_send_request+0x238>)
   14700:	4798      	blx	r3
	if (ext_header != NULL) {
   14702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14704:	2b00      	cmp	r3, #0
   14706:	d032      	beq.n	1476e <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
   14708:	0018      	movs	r0, r3
   1470a:	4b65      	ldr	r3, [pc, #404]	; (148a0 <http_client_send_request+0x23c>)
   1470c:	4798      	blx	r3
   1470e:	23d4      	movs	r3, #212	; 0xd4
   14710:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
   14712:	2800      	cmp	r0, #0
   14714:	d100      	bne.n	14718 <http_client_send_request+0xb4>
   14716:	e094      	b.n	14842 <http_client_send_request+0x1de>
	module->sending = 0;
   14718:	2241      	movs	r2, #65	; 0x41
   1471a:	5ca3      	ldrb	r3, [r4, r2]
   1471c:	2101      	movs	r1, #1
   1471e:	438b      	bics	r3, r1
   14720:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
   14722:	2300      	movs	r3, #0
   14724:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
   14726:	782b      	ldrb	r3, [r5, #0]
   14728:	2b2f      	cmp	r3, #47	; 0x2f
   1472a:	d024      	beq.n	14776 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
   1472c:	222f      	movs	r2, #47	; 0x2f
   1472e:	2370      	movs	r3, #112	; 0x70
   14730:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
   14732:	782b      	ldrb	r3, [r5, #0]
   14734:	2b00      	cmp	r3, #0
   14736:	d124      	bne.n	14782 <http_client_send_request+0x11e>
	if (entity != NULL) {
   14738:	9b03      	ldr	r3, [sp, #12]
   1473a:	2b00      	cmp	r3, #0
   1473c:	d027      	beq.n	1478e <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   1473e:	0020      	movs	r0, r4
   14740:	30b0      	adds	r0, #176	; 0xb0
   14742:	2218      	movs	r2, #24
   14744:	0019      	movs	r1, r3
   14746:	4b57      	ldr	r3, [pc, #348]	; (148a4 <http_client_send_request+0x240>)
   14748:	4798      	blx	r3
	module->req.method = method;
   1474a:	23c8      	movs	r3, #200	; 0xc8
   1474c:	4652      	mov	r2, sl
   1474e:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
   14750:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   14752:	2b01      	cmp	r3, #1
   14754:	d022      	beq.n	1479c <http_client_send_request+0x138>
   14756:	2b00      	cmp	r3, #0
   14758:	d027      	beq.n	147aa <http_client_send_request+0x146>
   1475a:	2b02      	cmp	r3, #2
   1475c:	d03a      	beq.n	147d4 <http_client_send_request+0x170>
		return -EAGAIN;
   1475e:	230b      	movs	r3, #11
   14760:	425b      	negs	r3, r3
   14762:	9301      	str	r3, [sp, #4]
   14764:	e08d      	b.n	14882 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
   14766:	2200      	movs	r2, #0
   14768:	e7b8      	b.n	146dc <http_client_send_request+0x78>
   1476a:	2200      	movs	r2, #0
   1476c:	e7b6      	b.n	146dc <http_client_send_request+0x78>
		module->req.ext_header = NULL;
   1476e:	2200      	movs	r2, #0
   14770:	23d4      	movs	r3, #212	; 0xd4
   14772:	50e2      	str	r2, [r4, r3]
   14774:	e7d0      	b.n	14718 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
   14776:	0020      	movs	r0, r4
   14778:	3070      	adds	r0, #112	; 0x70
   1477a:	0029      	movs	r1, r5
   1477c:	4b4a      	ldr	r3, [pc, #296]	; (148a8 <http_client_send_request+0x244>)
   1477e:	4798      	blx	r3
   14780:	e7da      	b.n	14738 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
   14782:	0029      	movs	r1, r5
   14784:	0020      	movs	r0, r4
   14786:	3071      	adds	r0, #113	; 0x71
   14788:	4b47      	ldr	r3, [pc, #284]	; (148a8 <http_client_send_request+0x244>)
   1478a:	4798      	blx	r3
   1478c:	e7d4      	b.n	14738 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   1478e:	0020      	movs	r0, r4
   14790:	30b0      	adds	r0, #176	; 0xb0
   14792:	2218      	movs	r2, #24
   14794:	2100      	movs	r1, #0
   14796:	4b45      	ldr	r3, [pc, #276]	; (148ac <http_client_send_request+0x248>)
   14798:	4798      	blx	r3
   1479a:	e7d6      	b.n	1474a <http_client_send_request+0xe6>
		if (!reconnect) {
   1479c:	9b01      	ldr	r3, [sp, #4]
   1479e:	2b00      	cmp	r3, #0
   147a0:	d06f      	beq.n	14882 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
   147a2:	2100      	movs	r1, #0
   147a4:	0020      	movs	r0, r4
   147a6:	4b42      	ldr	r3, [pc, #264]	; (148b0 <http_client_send_request+0x24c>)
   147a8:	4798      	blx	r3
		if (module->config.tls) {
   147aa:	2352      	movs	r3, #82	; 0x52
   147ac:	5ce2      	ldrb	r2, [r4, r3]
   147ae:	1e53      	subs	r3, r2, #1
   147b0:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   147b2:	b2d2      	uxtb	r2, r2
   147b4:	2101      	movs	r1, #1
   147b6:	2002      	movs	r0, #2
   147b8:	4b3e      	ldr	r3, [pc, #248]	; (148b4 <http_client_send_request+0x250>)
   147ba:	4798      	blx	r3
   147bc:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
   147be:	2800      	cmp	r0, #0
   147c0:	db43      	blt.n	1484a <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
   147c2:	0080      	lsls	r0, r0, #2
   147c4:	4b3c      	ldr	r3, [pc, #240]	; (148b8 <http_client_send_request+0x254>)
   147c6:	50c4      	str	r4, [r0, r3]
   147c8:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
   147ca:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   147cc:	2620      	movs	r6, #32
			isv6 = 1;
   147ce:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
   147d0:	2730      	movs	r7, #48	; 0x30
   147d2:	e00c      	b.n	147ee <http_client_send_request+0x18a>
		if (!reconnect) {
   147d4:	9b01      	ldr	r3, [sp, #4]
   147d6:	2b00      	cmp	r3, #0
   147d8:	d1e3      	bne.n	147a2 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
   147da:	3303      	adds	r3, #3
   147dc:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
   147de:	0020      	movs	r0, r4
   147e0:	4b36      	ldr	r3, [pc, #216]	; (148bc <http_client_send_request+0x258>)
   147e2:	4798      	blx	r3
			break;
   147e4:	e04d      	b.n	14882 <http_client_send_request+0x21e>
			if (isv6) {
   147e6:	2900      	cmp	r1, #0
   147e8:	d001      	beq.n	147ee <http_client_send_request+0x18a>
   147ea:	e012      	b.n	14812 <http_client_send_request+0x1ae>
			isv6 = 1;
   147ec:	0001      	movs	r1, r0
	while (*host != '\0') {
   147ee:	782a      	ldrb	r2, [r5, #0]
   147f0:	2a00      	cmp	r2, #0
   147f2:	d02e      	beq.n	14852 <http_client_send_request+0x1ee>
		ch = *host++;
   147f4:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   147f6:	0013      	movs	r3, r2
   147f8:	43b3      	bics	r3, r6
   147fa:	3b41      	subs	r3, #65	; 0x41
   147fc:	2b05      	cmp	r3, #5
   147fe:	d9f5      	bls.n	147ec <http_client_send_request+0x188>
   14800:	2a3a      	cmp	r2, #58	; 0x3a
   14802:	d00a      	beq.n	1481a <http_client_send_request+0x1b6>
   14804:	2a2f      	cmp	r2, #47	; 0x2f
   14806:	d00a      	beq.n	1481e <http_client_send_request+0x1ba>
		} else if (ch == '.') {
   14808:	2a2e      	cmp	r2, #46	; 0x2e
   1480a:	d0ec      	beq.n	147e6 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
   1480c:	403a      	ands	r2, r7
   1480e:	2a30      	cmp	r2, #48	; 0x30
   14810:	d0ed      	beq.n	147ee <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
   14812:	9802      	ldr	r0, [sp, #8]
   14814:	4b2a      	ldr	r3, [pc, #168]	; (148c0 <http_client_send_request+0x25c>)
   14816:	4798      	blx	r3
   14818:	e02f      	b.n	1487a <http_client_send_request+0x216>
			isv6 = 1;
   1481a:	0001      	movs	r1, r0
   1481c:	e7e7      	b.n	147ee <http_client_send_request+0x18a>
   1481e:	0001      	movs	r1, r0
   14820:	e7e5      	b.n	147ee <http_client_send_request+0x18a>
		return -EINVAL;
   14822:	2316      	movs	r3, #22
   14824:	425b      	negs	r3, r3
   14826:	9301      	str	r3, [sp, #4]
   14828:	e02b      	b.n	14882 <http_client_send_request+0x21e>
		return -EBUSY;
   1482a:	2310      	movs	r3, #16
   1482c:	425b      	negs	r3, r3
   1482e:	9301      	str	r3, [sp, #4]
   14830:	e027      	b.n	14882 <http_client_send_request+0x21e>
		return -EINVAL;
   14832:	2316      	movs	r3, #22
   14834:	425b      	negs	r3, r3
   14836:	9301      	str	r3, [sp, #4]
   14838:	e023      	b.n	14882 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
   1483a:	235b      	movs	r3, #91	; 0x5b
   1483c:	425b      	negs	r3, r3
   1483e:	9301      	str	r3, [sp, #4]
   14840:	e01f      	b.n	14882 <http_client_send_request+0x21e>
			return -ENOMEM;
   14842:	230c      	movs	r3, #12
   14844:	425b      	negs	r3, r3
   14846:	9301      	str	r3, [sp, #4]
   14848:	e01b      	b.n	14882 <http_client_send_request+0x21e>
			return -ENOSPC;
   1484a:	231c      	movs	r3, #28
   1484c:	425b      	negs	r3, r3
   1484e:	9301      	str	r3, [sp, #4]
   14850:	e017      	b.n	14882 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
   14852:	2302      	movs	r3, #2
   14854:	aa04      	add	r2, sp, #16
   14856:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
   14858:	334e      	adds	r3, #78	; 0x4e
   1485a:	5ae3      	ldrh	r3, [r4, r3]
   1485c:	021a      	lsls	r2, r3, #8
   1485e:	0a1b      	lsrs	r3, r3, #8
   14860:	4313      	orrs	r3, r2
   14862:	aa04      	add	r2, sp, #16
   14864:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   14866:	9802      	ldr	r0, [sp, #8]
   14868:	4b16      	ldr	r3, [pc, #88]	; (148c4 <http_client_send_request+0x260>)
   1486a:	4798      	blx	r3
   1486c:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   1486e:	2000      	movs	r0, #0
   14870:	5620      	ldrsb	r0, [r4, r0]
   14872:	2210      	movs	r2, #16
   14874:	a904      	add	r1, sp, #16
   14876:	4b14      	ldr	r3, [pc, #80]	; (148c8 <http_client_send_request+0x264>)
   14878:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
   1487a:	2301      	movs	r3, #1
   1487c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
   1487e:	2300      	movs	r3, #0
   14880:	9301      	str	r3, [sp, #4]
}
   14882:	9801      	ldr	r0, [sp, #4]
   14884:	b008      	add	sp, #32
   14886:	bc04      	pop	{r2}
   14888:	4692      	mov	sl, r2
   1488a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1488c:	0001a32c 	.word	0x0001a32c
   14890:	00016b69 	.word	0x00016b69
   14894:	0001a334 	.word	0x0001a334
   14898:	00016b5b 	.word	0x00016b5b
   1489c:	000165b5 	.word	0x000165b5
   148a0:	00016b21 	.word	0x00016b21
   148a4:	000165c9 	.word	0x000165c9
   148a8:	00016b11 	.word	0x00016b11
   148ac:	000165ff 	.word	0x000165ff
   148b0:	000140ad 	.word	0x000140ad
   148b4:	0000da89 	.word	0x0000da89
   148b8:	20000854 	.word	0x20000854
   148bc:	000141c5 	.word	0x000141c5
   148c0:	0000ded1 	.word	0x0000ded1
   148c4:	0000de65 	.word	0x0000de65
   148c8:	0000dc0d 	.word	0x0000dc0d

000148cc <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   148cc:	b510      	push	{r4, lr}
	if (module == NULL) {
   148ce:	2800      	cmp	r0, #0
   148d0:	d00d      	beq.n	148ee <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   148d2:	6c41      	ldr	r1, [r0, #68]	; 0x44
   148d4:	6e02      	ldr	r2, [r0, #96]	; 0x60
   148d6:	4291      	cmp	r1, r2
   148d8:	d20a      	bcs.n	148f0 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   148da:	1a52      	subs	r2, r2, r1
   148dc:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
   148de:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   148e0:	469c      	mov	ip, r3
   148e2:	4461      	add	r1, ip
	recv(module->sock,
   148e4:	7800      	ldrb	r0, [r0, #0]
   148e6:	b240      	sxtb	r0, r0
   148e8:	2300      	movs	r3, #0
   148ea:	4c04      	ldr	r4, [pc, #16]	; (148fc <_http_client_recv_packet+0x30>)
   148ec:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
   148ee:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
   148f0:	218b      	movs	r1, #139	; 0x8b
   148f2:	4249      	negs	r1, r1
   148f4:	4b02      	ldr	r3, [pc, #8]	; (14900 <_http_client_recv_packet+0x34>)
   148f6:	4798      	blx	r3
		return;
   148f8:	e7f9      	b.n	148ee <_http_client_recv_packet+0x22>
   148fa:	46c0      	nop			; (mov r8, r8)
   148fc:	0000dd35 	.word	0x0000dd35
   14900:	000140ad 	.word	0x000140ad

00014904 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   14904:	b570      	push	{r4, r5, r6, lr}
   14906:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
   14908:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   1490a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   1490c:	1a5c      	subs	r4, r3, r1
   1490e:	1904      	adds	r4, r0, r4

	if (remain > 0) {
   14910:	2c00      	cmp	r4, #0
   14912:	dc02      	bgt.n	1491a <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
   14914:	2300      	movs	r3, #0
   14916:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
   14918:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
   1491a:	0022      	movs	r2, r4
   1491c:	4b01      	ldr	r3, [pc, #4]	; (14924 <_http_client_move_buffer+0x20>)
   1491e:	4798      	blx	r3
		module->recved_size = remain;
   14920:	646c      	str	r4, [r5, #68]	; 0x44
   14922:	e7f9      	b.n	14918 <_http_client_move_buffer+0x14>
   14924:	000165db 	.word	0x000165db

00014928 <_http_client_handle_header>:
{
   14928:	b5f0      	push	{r4, r5, r6, r7, lr}
   1492a:	46ce      	mov	lr, r9
   1492c:	b500      	push	{lr}
   1492e:	b084      	sub	sp, #16
   14930:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
   14932:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
   14934:	4b62      	ldr	r3, [pc, #392]	; (14ac0 <_http_client_handle_header+0x198>)
   14936:	4699      	mov	r9, r3
   14938:	e049      	b.n	149ce <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
   1493a:	0021      	movs	r1, r4
   1493c:	0038      	movs	r0, r7
   1493e:	4b61      	ldr	r3, [pc, #388]	; (14ac4 <_http_client_handle_header+0x19c>)
   14940:	4798      	blx	r3
			return 0;
   14942:	2600      	movs	r6, #0
}
   14944:	0030      	movs	r0, r6
   14946:	b004      	add	sp, #16
   14948:	bc04      	pop	{r2}
   1494a:	4691      	mov	r9, r2
   1494c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
   1494e:	1ca1      	adds	r1, r4, #2
   14950:	0038      	movs	r0, r7
   14952:	4b5c      	ldr	r3, [pc, #368]	; (14ac4 <_http_client_handle_header+0x19c>)
   14954:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
   14956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   14958:	2b00      	cmp	r3, #0
   1495a:	d00a      	beq.n	14972 <_http_client_handle_header+0x4a>
   1495c:	22e4      	movs	r2, #228	; 0xe4
   1495e:	5ab9      	ldrh	r1, [r7, r2]
   14960:	2900      	cmp	r1, #0
   14962:	d006      	beq.n	14972 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
   14964:	3a08      	subs	r2, #8
   14966:	58b8      	ldr	r0, [r7, r2]
   14968:	2800      	cmp	r0, #0
   1496a:	db07      	blt.n	1497c <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   1496c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1496e:	4290      	cmp	r0, r2
   14970:	dc10      	bgt.n	14994 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
   14972:	2201      	movs	r2, #1
   14974:	23d8      	movs	r3, #216	; 0xd8
   14976:	50fa      	str	r2, [r7, r3]
			return 1;
   14978:	2601      	movs	r6, #1
   1497a:	e7e3      	b.n	14944 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
   1497c:	aa01      	add	r2, sp, #4
   1497e:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
   14980:	2101      	movs	r1, #1
   14982:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
   14984:	2100      	movs	r1, #0
   14986:	20e0      	movs	r0, #224	; 0xe0
   14988:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
   1498a:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   1498c:	3102      	adds	r1, #2
   1498e:	0038      	movs	r0, r7
   14990:	4798      	blx	r3
   14992:	e7ee      	b.n	14972 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
   14994:	aa01      	add	r2, sp, #4
   14996:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
   14998:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
   1499a:	2100      	movs	r1, #0
   1499c:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
   1499e:	20e0      	movs	r0, #224	; 0xe0
   149a0:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   149a2:	3102      	adds	r1, #2
   149a4:	0038      	movs	r0, r7
   149a6:	4798      	blx	r3
   149a8:	e7e3      	b.n	14972 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   149aa:	0020      	movs	r0, r4
   149ac:	3010      	adds	r0, #16
   149ae:	4b46      	ldr	r3, [pc, #280]	; (14ac8 <_http_client_handle_header+0x1a0>)
   149b0:	4798      	blx	r3
   149b2:	23dc      	movs	r3, #220	; 0xdc
   149b4:	50f8      	str	r0, [r7, r3]
   149b6:	e009      	b.n	149cc <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   149b8:	3201      	adds	r2, #1
   149ba:	4295      	cmp	r5, r2
   149bc:	d006      	beq.n	149cc <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   149be:	7813      	ldrb	r3, [r2, #0]
   149c0:	2b20      	cmp	r3, #32
   149c2:	d12b      	bne.n	14a1c <_http_client_handle_header+0xf4>
   149c4:	e7f8      	b.n	149b8 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
   149c6:	3a21      	subs	r2, #33	; 0x21
   149c8:	3389      	adds	r3, #137	; 0x89
   149ca:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
   149cc:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
   149ce:	493f      	ldr	r1, [pc, #252]	; (14acc <_http_client_handle_header+0x1a4>)
   149d0:	0020      	movs	r0, r4
   149d2:	47c8      	blx	r9
   149d4:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   149d6:	d0b0      	beq.n	1493a <_http_client_handle_header+0x12>
   149d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   149da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   149dc:	4694      	mov	ip, r2
   149de:	4463      	add	r3, ip
   149e0:	4298      	cmp	r0, r3
   149e2:	d2aa      	bcs.n	1493a <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
   149e4:	2202      	movs	r2, #2
   149e6:	4939      	ldr	r1, [pc, #228]	; (14acc <_http_client_handle_header+0x1a4>)
   149e8:	0020      	movs	r0, r4
   149ea:	4b39      	ldr	r3, [pc, #228]	; (14ad0 <_http_client_handle_header+0x1a8>)
   149ec:	4798      	blx	r3
   149ee:	2800      	cmp	r0, #0
   149f0:	d0ad      	beq.n	1494e <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   149f2:	2210      	movs	r2, #16
   149f4:	4937      	ldr	r1, [pc, #220]	; (14ad4 <_http_client_handle_header+0x1ac>)
   149f6:	0020      	movs	r0, r4
   149f8:	4b35      	ldr	r3, [pc, #212]	; (14ad0 <_http_client_handle_header+0x1a8>)
   149fa:	4798      	blx	r3
   149fc:	2800      	cmp	r0, #0
   149fe:	d0d4      	beq.n	149aa <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   14a00:	2213      	movs	r2, #19
   14a02:	4935      	ldr	r1, [pc, #212]	; (14ad8 <_http_client_handle_header+0x1b0>)
   14a04:	0020      	movs	r0, r4
   14a06:	4b32      	ldr	r3, [pc, #200]	; (14ad0 <_http_client_handle_header+0x1a8>)
   14a08:	4798      	blx	r3
   14a0a:	1e06      	subs	r6, r0, #0
   14a0c:	d110      	bne.n	14a30 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   14a0e:	0022      	movs	r2, r4
   14a10:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
   14a12:	4295      	cmp	r5, r2
   14a14:	d9da      	bls.n	149cc <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   14a16:	7ce3      	ldrb	r3, [r4, #19]
   14a18:	2b20      	cmp	r3, #32
   14a1a:	d0cd      	beq.n	149b8 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   14a1c:	2220      	movs	r2, #32
   14a1e:	4393      	bics	r3, r2
   14a20:	2b43      	cmp	r3, #67	; 0x43
   14a22:	d0d0      	beq.n	149c6 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
   14a24:	2186      	movs	r1, #134	; 0x86
   14a26:	4249      	negs	r1, r1
   14a28:	0038      	movs	r0, r7
   14a2a:	4b2c      	ldr	r3, [pc, #176]	; (14adc <_http_client_handle_header+0x1b4>)
   14a2c:	4798      	blx	r3
					return 0;
   14a2e:	e789      	b.n	14944 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   14a30:	220c      	movs	r2, #12
   14a32:	492b      	ldr	r1, [pc, #172]	; (14ae0 <_http_client_handle_header+0x1b8>)
   14a34:	0020      	movs	r0, r4
   14a36:	4b26      	ldr	r3, [pc, #152]	; (14ad0 <_http_client_handle_header+0x1a8>)
   14a38:	4798      	blx	r3
   14a3a:	2800      	cmp	r0, #0
   14a3c:	d11d      	bne.n	14a7a <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
   14a3e:	0022      	movs	r2, r4
   14a40:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
   14a42:	4295      	cmp	r5, r2
   14a44:	d9c2      	bls.n	149cc <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   14a46:	7b23      	ldrb	r3, [r4, #12]
   14a48:	2b20      	cmp	r3, #32
   14a4a:	d009      	beq.n	14a60 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   14a4c:	2220      	movs	r2, #32
   14a4e:	4393      	bics	r3, r2
   14a50:	2b4b      	cmp	r3, #75	; 0x4b
   14a52:	d00c      	beq.n	14a6e <_http_client_handle_header+0x146>
					module->permanent = 0;
   14a54:	2241      	movs	r2, #65	; 0x41
   14a56:	5cbb      	ldrb	r3, [r7, r2]
   14a58:	2102      	movs	r1, #2
   14a5a:	438b      	bics	r3, r1
   14a5c:	54bb      	strb	r3, [r7, r2]
   14a5e:	e7b5      	b.n	149cc <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   14a60:	3201      	adds	r2, #1
   14a62:	4295      	cmp	r5, r2
   14a64:	d0b2      	beq.n	149cc <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
   14a66:	7813      	ldrb	r3, [r2, #0]
   14a68:	2b20      	cmp	r3, #32
   14a6a:	d1ef      	bne.n	14a4c <_http_client_handle_header+0x124>
   14a6c:	e7f8      	b.n	14a60 <_http_client_handle_header+0x138>
					module->permanent = 1;
   14a6e:	3221      	adds	r2, #33	; 0x21
   14a70:	5cbb      	ldrb	r3, [r7, r2]
   14a72:	2102      	movs	r1, #2
   14a74:	430b      	orrs	r3, r1
   14a76:	54bb      	strb	r3, [r7, r2]
   14a78:	e7a8      	b.n	149cc <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   14a7a:	2205      	movs	r2, #5
   14a7c:	4919      	ldr	r1, [pc, #100]	; (14ae4 <_http_client_handle_header+0x1bc>)
   14a7e:	0020      	movs	r0, r4
   14a80:	4b13      	ldr	r3, [pc, #76]	; (14ad0 <_http_client_handle_header+0x1a8>)
   14a82:	4798      	blx	r3
   14a84:	2800      	cmp	r0, #0
   14a86:	d1a1      	bne.n	149cc <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   14a88:	0020      	movs	r0, r4
   14a8a:	3009      	adds	r0, #9
   14a8c:	4b0e      	ldr	r3, [pc, #56]	; (14ac8 <_http_client_handle_header+0x1a0>)
   14a8e:	4798      	blx	r3
   14a90:	23e4      	movs	r3, #228	; 0xe4
   14a92:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
   14a94:	2200      	movs	r2, #0
   14a96:	3b08      	subs	r3, #8
   14a98:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
   14a9a:	7963      	ldrb	r3, [r4, #5]
   14a9c:	2b31      	cmp	r3, #49	; 0x31
   14a9e:	d802      	bhi.n	14aa6 <_http_client_handle_header+0x17e>
   14aa0:	79e3      	ldrb	r3, [r4, #7]
   14aa2:	2b30      	cmp	r3, #48	; 0x30
   14aa4:	d905      	bls.n	14ab2 <_http_client_handle_header+0x18a>
				module->permanent = 1;
   14aa6:	2241      	movs	r2, #65	; 0x41
   14aa8:	5cbb      	ldrb	r3, [r7, r2]
   14aaa:	2102      	movs	r1, #2
   14aac:	430b      	orrs	r3, r1
   14aae:	54bb      	strb	r3, [r7, r2]
   14ab0:	e78c      	b.n	149cc <_http_client_handle_header+0xa4>
				module->permanent = 0;
   14ab2:	2241      	movs	r2, #65	; 0x41
   14ab4:	5cbb      	ldrb	r3, [r7, r2]
   14ab6:	2102      	movs	r1, #2
   14ab8:	438b      	bics	r3, r1
   14aba:	54bb      	strb	r3, [r7, r2]
   14abc:	e786      	b.n	149cc <_http_client_handle_header+0xa4>
   14abe:	46c0      	nop			; (mov r8, r8)
   14ac0:	00016bd9 	.word	0x00016bd9
   14ac4:	00014905 	.word	0x00014905
   14ac8:	0001654d 	.word	0x0001654d
   14acc:	0001a0a4 	.word	0x0001a0a4
   14ad0:	00016b69 	.word	0x00016b69
   14ad4:	0001a30c 	.word	0x0001a30c
   14ad8:	0001a21c 	.word	0x0001a21c
   14adc:	000140ad 	.word	0x000140ad
   14ae0:	0001a230 	.word	0x0001a230
   14ae4:	0001a240 	.word	0x0001a240

00014ae8 <_http_client_handle_entity>:
{
   14ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   14aea:	46ce      	mov	lr, r9
   14aec:	b500      	push	{lr}
   14aee:	b086      	sub	sp, #24
   14af0:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
   14af2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   14af4:	23dc      	movs	r3, #220	; 0xdc
   14af6:	58c3      	ldr	r3, [r0, r3]
   14af8:	2b00      	cmp	r3, #0
   14afa:	db69      	blt.n	14bd0 <_http_client_handle_entity+0xe8>
   14afc:	6e02      	ldr	r2, [r0, #96]	; 0x60
   14afe:	4293      	cmp	r3, r2
   14b00:	dc2b      	bgt.n	14b5a <_http_client_handle_entity+0x72>
	return 0;
   14b02:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
   14b04:	6c62      	ldr	r2, [r4, #68]	; 0x44
   14b06:	4293      	cmp	r3, r2
   14b08:	dc4e      	bgt.n	14ba8 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
   14b0a:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   14b0c:	2e00      	cmp	r6, #0
   14b0e:	d003      	beq.n	14b18 <_http_client_handle_entity+0x30>
   14b10:	22e4      	movs	r2, #228	; 0xe4
   14b12:	5aa1      	ldrh	r1, [r4, r2]
   14b14:	2900      	cmp	r1, #0
   14b16:	d10e      	bne.n	14b36 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
   14b18:	2300      	movs	r3, #0
   14b1a:	22d8      	movs	r2, #216	; 0xd8
   14b1c:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
   14b1e:	320c      	adds	r2, #12
   14b20:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
   14b22:	3341      	adds	r3, #65	; 0x41
   14b24:	5ce3      	ldrb	r3, [r4, r3]
   14b26:	079b      	lsls	r3, r3, #30
   14b28:	d40f      	bmi.n	14b4a <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
   14b2a:	2100      	movs	r1, #0
   14b2c:	0020      	movs	r0, r4
   14b2e:	4b71      	ldr	r3, [pc, #452]	; (14cf4 <_http_client_handle_entity+0x20c>)
   14b30:	4798      	blx	r3
	return 0;
   14b32:	2000      	movs	r0, #0
   14b34:	e038      	b.n	14ba8 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
   14b36:	aa03      	add	r2, sp, #12
   14b38:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
   14b3a:	2100      	movs	r1, #0
   14b3c:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
   14b3e:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
   14b40:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   14b42:	3102      	adds	r1, #2
   14b44:	0020      	movs	r0, r4
   14b46:	47b0      	blx	r6
   14b48:	e7e6      	b.n	14b18 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   14b4a:	23dc      	movs	r3, #220	; 0xdc
   14b4c:	58e1      	ldr	r1, [r4, r3]
   14b4e:	1869      	adds	r1, r5, r1
   14b50:	0020      	movs	r0, r4
   14b52:	4b69      	ldr	r3, [pc, #420]	; (14cf8 <_http_client_handle_entity+0x210>)
   14b54:	4798      	blx	r3
				return module->recved_size;
   14b56:	6c60      	ldr	r0, [r4, #68]	; 0x44
   14b58:	e026      	b.n	14ba8 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
   14b5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   14b5c:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
   14b5e:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
   14b60:	21e0      	movs	r1, #224	; 0xe0
   14b62:	5840      	ldr	r0, [r0, r1]
   14b64:	4684      	mov	ip, r0
   14b66:	4462      	add	r2, ip
   14b68:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   14b6a:	4293      	cmp	r3, r2
   14b6c:	dc20      	bgt.n	14bb0 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
   14b6e:	2300      	movs	r3, #0
   14b70:	22d8      	movs	r2, #216	; 0xd8
   14b72:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   14b74:	320c      	adds	r2, #12
   14b76:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   14b78:	3ae3      	subs	r2, #227	; 0xe3
   14b7a:	ab03      	add	r3, sp, #12
   14b7c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   14b7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14b80:	2b00      	cmp	r3, #0
   14b82:	d007      	beq.n	14b94 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   14b84:	ae03      	add	r6, sp, #12
   14b86:	0032      	movs	r2, r6
   14b88:	2103      	movs	r1, #3
   14b8a:	0020      	movs	r0, r4
   14b8c:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
   14b8e:	7a33      	ldrb	r3, [r6, #8]
   14b90:	2b01      	cmp	r3, #1
   14b92:	d103      	bne.n	14b9c <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
   14b94:	2341      	movs	r3, #65	; 0x41
   14b96:	5ce3      	ldrb	r3, [r4, r3]
   14b98:	079b      	lsls	r3, r3, #30
   14b9a:	d510      	bpl.n	14bbe <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
   14b9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14b9e:	18e9      	adds	r1, r5, r3
   14ba0:	0020      	movs	r0, r4
   14ba2:	4b55      	ldr	r3, [pc, #340]	; (14cf8 <_http_client_handle_entity+0x210>)
   14ba4:	4798      	blx	r3
	return 0;
   14ba6:	2000      	movs	r0, #0
}
   14ba8:	b006      	add	sp, #24
   14baa:	bc04      	pop	{r2}
   14bac:	4691      	mov	r9, r2
   14bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
   14bb0:	2200      	movs	r2, #0
   14bb2:	ab03      	add	r3, sp, #12
   14bb4:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
   14bb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14bb8:	2b00      	cmp	r3, #0
   14bba:	d0ef      	beq.n	14b9c <_http_client_handle_entity+0xb4>
   14bbc:	e7e2      	b.n	14b84 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
   14bbe:	484f      	ldr	r0, [pc, #316]	; (14cfc <_http_client_handle_entity+0x214>)
   14bc0:	4b4f      	ldr	r3, [pc, #316]	; (14d00 <_http_client_handle_entity+0x218>)
   14bc2:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   14bc4:	2100      	movs	r1, #0
   14bc6:	0020      	movs	r0, r4
   14bc8:	4b4a      	ldr	r3, [pc, #296]	; (14cf4 <_http_client_handle_entity+0x20c>)
   14bca:	4798      	blx	r3
					return 0;
   14bcc:	2000      	movs	r0, #0
   14bce:	e7eb      	b.n	14ba8 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
   14bd0:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
   14bd2:	2300      	movs	r3, #0
   14bd4:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
   14bd6:	26e0      	movs	r6, #224	; 0xe0
   14bd8:	e00a      	b.n	14bf0 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
   14bda:	2341      	movs	r3, #65	; 0x41
   14bdc:	5ce3      	ldrb	r3, [r4, r3]
   14bde:	079b      	lsls	r3, r3, #30
   14be0:	d51b      	bpl.n	14c1a <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
   14be2:	1ca9      	adds	r1, r5, #2
   14be4:	0020      	movs	r0, r4
   14be6:	4b44      	ldr	r3, [pc, #272]	; (14cf8 <_http_client_handle_entity+0x210>)
   14be8:	4798      	blx	r3
	} while(module->recved_size > 0);
   14bea:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14bec:	2b00      	cmp	r3, #0
   14bee:	d073      	beq.n	14cd8 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
   14bf0:	59a3      	ldr	r3, [r4, r6]
   14bf2:	2b00      	cmp	r3, #0
   14bf4:	db30      	blt.n	14c58 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
   14bf6:	d116      	bne.n	14c26 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
   14bf8:	22d8      	movs	r2, #216	; 0xd8
   14bfa:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
   14bfc:	320c      	adds	r2, #12
   14bfe:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
   14c00:	3ae3      	subs	r2, #227	; 0xe3
   14c02:	4669      	mov	r1, sp
   14c04:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
   14c06:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
   14c08:	9301      	str	r3, [sp, #4]
				if (module->cb) {
   14c0a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14c0c:	2b00      	cmp	r3, #0
   14c0e:	d0e4      	beq.n	14bda <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   14c10:	466a      	mov	r2, sp
   14c12:	2103      	movs	r1, #3
   14c14:	0020      	movs	r0, r4
   14c16:	4798      	blx	r3
   14c18:	e7df      	b.n	14bda <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
   14c1a:	2100      	movs	r1, #0
   14c1c:	0020      	movs	r0, r4
   14c1e:	4b35      	ldr	r3, [pc, #212]	; (14cf4 <_http_client_handle_entity+0x20c>)
   14c20:	4798      	blx	r3
	return 0;
   14c22:	2000      	movs	r0, #0
   14c24:	e7c0      	b.n	14ba8 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
   14c26:	42bb      	cmp	r3, r7
   14c28:	dcdf      	bgt.n	14bea <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
   14c2a:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
   14c2c:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
   14c2e:	2300      	movs	r3, #0
   14c30:	466a      	mov	r2, sp
   14c32:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
   14c34:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14c36:	2b00      	cmp	r3, #0
   14c38:	d002      	beq.n	14c40 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   14c3a:	2103      	movs	r1, #3
   14c3c:	0020      	movs	r0, r4
   14c3e:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   14c40:	59a3      	ldr	r3, [r4, r6]
   14c42:	1c99      	adds	r1, r3, #2
   14c44:	1869      	adds	r1, r5, r1
   14c46:	0020      	movs	r0, r4
   14c48:	4b2b      	ldr	r3, [pc, #172]	; (14cf8 <_http_client_handle_entity+0x210>)
   14c4a:	4798      	blx	r3
				length = (int)module->recved_size;
   14c4c:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
   14c4e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
   14c50:	2301      	movs	r3, #1
   14c52:	425b      	negs	r3, r3
   14c54:	51a3      	str	r3, [r4, r6]
   14c56:	e7c8      	b.n	14bea <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
   14c58:	2300      	movs	r3, #0
   14c5a:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   14c5c:	2f00      	cmp	r7, #0
   14c5e:	dd04      	ble.n	14c6a <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
   14c60:	782b      	ldrb	r3, [r5, #0]
   14c62:	2b0a      	cmp	r3, #10
   14c64:	d11c      	bne.n	14ca0 <_http_client_handle_entity+0x1b8>
					buffer++;
   14c66:	3501      	adds	r5, #1
					length--;
   14c68:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   14c6a:	59a3      	ldr	r3, [r4, r6]
   14c6c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   14c6e:	4293      	cmp	r3, r2
   14c70:	dc39      	bgt.n	14ce6 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
   14c72:	2f00      	cmp	r7, #0
   14c74:	d1b9      	bne.n	14bea <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
   14c76:	2201      	movs	r2, #1
   14c78:	4252      	negs	r2, r2
   14c7a:	23e0      	movs	r3, #224	; 0xe0
   14c7c:	50e2      	str	r2, [r4, r3]
   14c7e:	e7d0      	b.n	14c22 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   14c80:	001a      	movs	r2, r3
   14c82:	3a61      	subs	r2, #97	; 0x61
   14c84:	2a05      	cmp	r2, #5
   14c86:	d818      	bhi.n	14cba <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   14c88:	59a2      	ldr	r2, [r4, r6]
   14c8a:	0112      	lsls	r2, r2, #4
   14c8c:	18d3      	adds	r3, r2, r3
   14c8e:	3b61      	subs	r3, #97	; 0x61
   14c90:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
   14c92:	3501      	adds	r5, #1
   14c94:	3f01      	subs	r7, #1
   14c96:	2f00      	cmp	r7, #0
   14c98:	d020      	beq.n	14cdc <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
   14c9a:	782b      	ldrb	r3, [r5, #0]
   14c9c:	2b0a      	cmp	r3, #10
   14c9e:	d0e2      	beq.n	14c66 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
   14ca0:	464a      	mov	r2, r9
   14ca2:	2a00      	cmp	r2, #0
   14ca4:	d1f5      	bne.n	14c92 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
   14ca6:	001a      	movs	r2, r3
   14ca8:	3a30      	subs	r2, #48	; 0x30
   14caa:	2a09      	cmp	r2, #9
   14cac:	d8e8      	bhi.n	14c80 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   14cae:	59a2      	ldr	r2, [r4, r6]
   14cb0:	0112      	lsls	r2, r2, #4
   14cb2:	18d3      	adds	r3, r2, r3
   14cb4:	3b30      	subs	r3, #48	; 0x30
   14cb6:	51a3      	str	r3, [r4, r6]
   14cb8:	e7eb      	b.n	14c92 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   14cba:	001a      	movs	r2, r3
   14cbc:	3a41      	subs	r2, #65	; 0x41
   14cbe:	2a05      	cmp	r2, #5
   14cc0:	d805      	bhi.n	14cce <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   14cc2:	59a2      	ldr	r2, [r4, r6]
   14cc4:	0112      	lsls	r2, r2, #4
   14cc6:	18d3      	adds	r3, r2, r3
   14cc8:	3b41      	subs	r3, #65	; 0x41
   14cca:	51a3      	str	r3, [r4, r6]
   14ccc:	e7e1      	b.n	14c92 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
   14cce:	3b3b      	subs	r3, #59	; 0x3b
   14cd0:	425a      	negs	r2, r3
   14cd2:	415a      	adcs	r2, r3
   14cd4:	4691      	mov	r9, r2
   14cd6:	e7dc      	b.n	14c92 <_http_client_handle_entity+0x1aa>
	return 0;
   14cd8:	2000      	movs	r0, #0
   14cda:	e765      	b.n	14ba8 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   14cdc:	23e0      	movs	r3, #224	; 0xe0
   14cde:	58e3      	ldr	r3, [r4, r3]
   14ce0:	6e22      	ldr	r2, [r4, #96]	; 0x60
   14ce2:	4293      	cmp	r3, r2
   14ce4:	ddc7      	ble.n	14c76 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
   14ce6:	218b      	movs	r1, #139	; 0x8b
   14ce8:	4249      	negs	r1, r1
   14cea:	0020      	movs	r0, r4
   14cec:	4b01      	ldr	r3, [pc, #4]	; (14cf4 <_http_client_handle_entity+0x20c>)
   14cee:	4798      	blx	r3
   14cf0:	e797      	b.n	14c22 <_http_client_handle_entity+0x13a>
   14cf2:	46c0      	nop			; (mov r8, r8)
   14cf4:	000140ad 	.word	0x000140ad
   14cf8:	00014905 	.word	0x00014905
   14cfc:	0001a218 	.word	0x0001a218
   14d00:	0001687d 	.word	0x0001687d

00014d04 <_http_client_handle_response>:
{
   14d04:	b510      	push	{r4, lr}
	switch(module->resp.state) {
   14d06:	23d8      	movs	r3, #216	; 0xd8
   14d08:	58c3      	ldr	r3, [r0, r3]
   14d0a:	2b00      	cmp	r3, #0
   14d0c:	d003      	beq.n	14d16 <_http_client_handle_response+0x12>
   14d0e:	2b01      	cmp	r3, #1
   14d10:	d004      	beq.n	14d1c <_http_client_handle_response+0x18>
	return 0;
   14d12:	2000      	movs	r0, #0
   14d14:	e001      	b.n	14d1a <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
   14d16:	4b03      	ldr	r3, [pc, #12]	; (14d24 <_http_client_handle_response+0x20>)
   14d18:	4798      	blx	r3
}
   14d1a:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
   14d1c:	4b02      	ldr	r3, [pc, #8]	; (14d28 <_http_client_handle_response+0x24>)
   14d1e:	4798      	blx	r3
   14d20:	e7fb      	b.n	14d1a <_http_client_handle_response+0x16>
   14d22:	46c0      	nop			; (mov r8, r8)
   14d24:	00014929 	.word	0x00014929
   14d28:	00014ae9 	.word	0x00014ae9

00014d2c <_http_client_recved_packet>:
{
   14d2c:	b570      	push	{r4, r5, r6, lr}
   14d2e:	0004      	movs	r4, r0
	module->recved_size += read_len;
   14d30:	6c43      	ldr	r3, [r0, #68]	; 0x44
   14d32:	469c      	mov	ip, r3
   14d34:	4461      	add	r1, ip
   14d36:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
   14d38:	2358      	movs	r3, #88	; 0x58
   14d3a:	5ac3      	ldrh	r3, [r0, r3]
   14d3c:	2b00      	cmp	r3, #0
   14d3e:	d105      	bne.n	14d4c <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
   14d40:	4d05      	ldr	r5, [pc, #20]	; (14d58 <_http_client_recved_packet+0x2c>)
   14d42:	0020      	movs	r0, r4
   14d44:	47a8      	blx	r5
   14d46:	2800      	cmp	r0, #0
   14d48:	d1fb      	bne.n	14d42 <_http_client_recved_packet+0x16>
}
   14d4a:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   14d4c:	6c81      	ldr	r1, [r0, #72]	; 0x48
   14d4e:	6d40      	ldr	r0, [r0, #84]	; 0x54
   14d50:	4b02      	ldr	r3, [pc, #8]	; (14d5c <_http_client_recved_packet+0x30>)
   14d52:	4798      	blx	r3
   14d54:	e7f4      	b.n	14d40 <_http_client_recved_packet+0x14>
   14d56:	46c0      	nop			; (mov r8, r8)
   14d58:	00014d05 	.word	0x00014d05
   14d5c:	000150d9 	.word	0x000150d9

00014d60 <http_client_socket_event_handler>:
{
   14d60:	b510      	push	{r4, lr}
   14d62:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
   14d64:	0080      	lsls	r0, r0, #2
   14d66:	4b65      	ldr	r3, [pc, #404]	; (14efc <http_client_socket_event_handler+0x19c>)
   14d68:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
   14d6a:	2c00      	cmp	r4, #0
   14d6c:	d006      	beq.n	14d7c <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
   14d6e:	2906      	cmp	r1, #6
   14d70:	d051      	beq.n	14e16 <http_client_socket_event_handler+0xb6>
   14d72:	2907      	cmp	r1, #7
   14d74:	d100      	bne.n	14d78 <http_client_socket_event_handler+0x18>
   14d76:	e08a      	b.n	14e8e <http_client_socket_event_handler+0x12e>
   14d78:	2905      	cmp	r1, #5
   14d7a:	d001      	beq.n	14d80 <http_client_socket_event_handler+0x20>
}
   14d7c:	b004      	add	sp, #16
   14d7e:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
   14d80:	2301      	movs	r3, #1
   14d82:	56d3      	ldrsb	r3, [r2, r3]
   14d84:	1e1a      	subs	r2, r3, #0
   14d86:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
   14d88:	db15      	blt.n	14db6 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
   14d8a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   14d8c:	2b00      	cmp	r3, #0
   14d8e:	d003      	beq.n	14d98 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   14d90:	aa01      	add	r2, sp, #4
   14d92:	2100      	movs	r1, #0
   14d94:	0020      	movs	r0, r4
   14d96:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   14d98:	2303      	movs	r3, #3
   14d9a:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   14d9c:	3355      	adds	r3, #85	; 0x55
   14d9e:	5ae2      	ldrh	r2, [r4, r3]
   14da0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   14da2:	6d60      	ldr	r0, [r4, #84]	; 0x54
   14da4:	4b56      	ldr	r3, [pc, #344]	; (14f00 <http_client_socket_event_handler+0x1a0>)
   14da6:	4798      	blx	r3
    		_http_client_recv_packet(module);
   14da8:	0020      	movs	r0, r4
   14daa:	4b56      	ldr	r3, [pc, #344]	; (14f04 <http_client_socket_event_handler+0x1a4>)
   14dac:	4798      	blx	r3
			_http_client_request(module);
   14dae:	0020      	movs	r0, r4
   14db0:	4b55      	ldr	r3, [pc, #340]	; (14f08 <http_client_socket_event_handler+0x1a8>)
   14db2:	4798      	blx	r3
   14db4:	e7e2      	b.n	14d7c <http_client_socket_event_handler+0x1c>
	switch (err) {
   14db6:	330e      	adds	r3, #14
   14db8:	b2d9      	uxtb	r1, r3
   14dba:	290e      	cmp	r1, #14
   14dbc:	d81e      	bhi.n	14dfc <http_client_socket_event_handler+0x9c>
   14dbe:	008b      	lsls	r3, r1, #2
   14dc0:	4952      	ldr	r1, [pc, #328]	; (14f0c <http_client_socket_event_handler+0x1ac>)
   14dc2:	58cb      	ldr	r3, [r1, r3]
   14dc4:	469f      	mov	pc, r3
			return -ENOENT;
   14dc6:	2102      	movs	r1, #2
   14dc8:	4249      	negs	r1, r1
   14dca:	e01d      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
   14dcc:	2170      	movs	r1, #112	; 0x70
   14dce:	4249      	negs	r1, r1
   14dd0:	e01a      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   14dd2:	210c      	movs	r1, #12
   14dd4:	4249      	negs	r1, r1
   14dd6:	e017      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
   14dd8:	2116      	movs	r1, #22
   14dda:	4249      	negs	r1, r1
   14ddc:	e014      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
   14dde:	210c      	movs	r1, #12
   14de0:	4249      	negs	r1, r1
   14de2:	e011      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
   14de4:	2179      	movs	r1, #121	; 0x79
   14de6:	4249      	negs	r1, r1
   14de8:	e00e      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
   14dea:	2168      	movs	r1, #104	; 0x68
   14dec:	4249      	negs	r1, r1
   14dee:	e00b      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
   14df0:	210b      	movs	r1, #11
   14df2:	4249      	negs	r1, r1
   14df4:	e008      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
   14df6:	2110      	movs	r1, #16
   14df8:	4249      	negs	r1, r1
   14dfa:	e005      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
   14dfc:	2a00      	cmp	r2, #0
   14dfe:	db07      	blt.n	14e10 <http_client_socket_event_handler+0xb0>
			return 0;
   14e00:	2100      	movs	r1, #0
   14e02:	e001      	b.n	14e08 <http_client_socket_event_handler+0xa8>
			return -EIO;
   14e04:	2105      	movs	r1, #5
   14e06:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   14e08:	0020      	movs	r0, r4
   14e0a:	4b41      	ldr	r3, [pc, #260]	; (14f10 <http_client_socket_event_handler+0x1b0>)
   14e0c:	4798      	blx	r3
   14e0e:	e7b5      	b.n	14d7c <http_client_socket_event_handler+0x1c>
				return -EIO;
   14e10:	2105      	movs	r1, #5
   14e12:	4249      	negs	r1, r1
   14e14:	e7f8      	b.n	14e08 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
   14e16:	2304      	movs	r3, #4
   14e18:	5ed1      	ldrsh	r1, [r2, r3]
   14e1a:	2900      	cmp	r1, #0
   14e1c:	dd06      	ble.n	14e2c <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   14e1e:	0020      	movs	r0, r4
   14e20:	4b3c      	ldr	r3, [pc, #240]	; (14f14 <http_client_socket_event_handler+0x1b4>)
   14e22:	4798      	blx	r3
		_http_client_recv_packet(module);
   14e24:	0020      	movs	r0, r4
   14e26:	4b37      	ldr	r3, [pc, #220]	; (14f04 <http_client_socket_event_handler+0x1a4>)
   14e28:	4798      	blx	r3
		break;
   14e2a:	e7a7      	b.n	14d7c <http_client_socket_event_handler+0x1c>
	switch (err) {
   14e2c:	000b      	movs	r3, r1
   14e2e:	330e      	adds	r3, #14
   14e30:	b29a      	uxth	r2, r3
   14e32:	2a0e      	cmp	r2, #14
   14e34:	d81e      	bhi.n	14e74 <http_client_socket_event_handler+0x114>
   14e36:	0093      	lsls	r3, r2, #2
   14e38:	4a37      	ldr	r2, [pc, #220]	; (14f18 <http_client_socket_event_handler+0x1b8>)
   14e3a:	58d3      	ldr	r3, [r2, r3]
   14e3c:	469f      	mov	pc, r3
			return -ENOENT;
   14e3e:	2102      	movs	r1, #2
   14e40:	4249      	negs	r1, r1
   14e42:	e01d      	b.n	14e80 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
   14e44:	2170      	movs	r1, #112	; 0x70
   14e46:	4249      	negs	r1, r1
   14e48:	e01a      	b.n	14e80 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   14e4a:	210c      	movs	r1, #12
   14e4c:	4249      	negs	r1, r1
   14e4e:	e017      	b.n	14e80 <http_client_socket_event_handler+0x120>
			return -EINVAL;
   14e50:	2116      	movs	r1, #22
   14e52:	4249      	negs	r1, r1
   14e54:	e014      	b.n	14e80 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
   14e56:	210c      	movs	r1, #12
   14e58:	4249      	negs	r1, r1
   14e5a:	e011      	b.n	14e80 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
   14e5c:	2179      	movs	r1, #121	; 0x79
   14e5e:	4249      	negs	r1, r1
   14e60:	e00e      	b.n	14e80 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
   14e62:	2168      	movs	r1, #104	; 0x68
   14e64:	4249      	negs	r1, r1
   14e66:	e00b      	b.n	14e80 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
   14e68:	210b      	movs	r1, #11
   14e6a:	4249      	negs	r1, r1
   14e6c:	e008      	b.n	14e80 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
   14e6e:	2110      	movs	r1, #16
   14e70:	4249      	negs	r1, r1
   14e72:	e005      	b.n	14e80 <http_client_socket_event_handler+0x120>
			if (err < 0) {
   14e74:	2900      	cmp	r1, #0
   14e76:	db07      	blt.n	14e88 <http_client_socket_event_handler+0x128>
			return 0;
   14e78:	2100      	movs	r1, #0
   14e7a:	e001      	b.n	14e80 <http_client_socket_event_handler+0x120>
			return -EIO;
   14e7c:	2105      	movs	r1, #5
   14e7e:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   14e80:	0020      	movs	r0, r4
   14e82:	4b23      	ldr	r3, [pc, #140]	; (14f10 <http_client_socket_event_handler+0x1b0>)
   14e84:	4798      	blx	r3
   14e86:	e7cd      	b.n	14e24 <http_client_socket_event_handler+0xc4>
				return -EIO;
   14e88:	2105      	movs	r1, #5
   14e8a:	4249      	negs	r1, r1
   14e8c:	e7f8      	b.n	14e80 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
   14e8e:	2300      	movs	r3, #0
   14e90:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
   14e92:	2b00      	cmp	r3, #0
   14e94:	db08      	blt.n	14ea8 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
   14e96:	0020      	movs	r0, r4
   14e98:	4b1b      	ldr	r3, [pc, #108]	; (14f08 <http_client_socket_event_handler+0x1a8>)
   14e9a:	4798      	blx	r3
		module->sending = 0;
   14e9c:	2241      	movs	r2, #65	; 0x41
   14e9e:	5ca3      	ldrb	r3, [r4, r2]
   14ea0:	2101      	movs	r1, #1
   14ea2:	438b      	bics	r3, r1
   14ea4:	54a3      	strb	r3, [r4, r2]
    	break;
   14ea6:	e769      	b.n	14d7c <http_client_socket_event_handler+0x1c>
	switch (err) {
   14ea8:	330e      	adds	r3, #14
   14eaa:	b29a      	uxth	r2, r3
   14eac:	2a0d      	cmp	r2, #13
   14eae:	d81e      	bhi.n	14eee <http_client_socket_event_handler+0x18e>
   14eb0:	0093      	lsls	r3, r2, #2
   14eb2:	4a1a      	ldr	r2, [pc, #104]	; (14f1c <http_client_socket_event_handler+0x1bc>)
   14eb4:	58d3      	ldr	r3, [r2, r3]
   14eb6:	469f      	mov	pc, r3
			return -ENOENT;
   14eb8:	2102      	movs	r1, #2
   14eba:	4249      	negs	r1, r1
   14ebc:	e019      	b.n	14ef2 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
   14ebe:	2170      	movs	r1, #112	; 0x70
   14ec0:	4249      	negs	r1, r1
   14ec2:	e016      	b.n	14ef2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   14ec4:	210c      	movs	r1, #12
   14ec6:	4249      	negs	r1, r1
   14ec8:	e013      	b.n	14ef2 <http_client_socket_event_handler+0x192>
			return -EINVAL;
   14eca:	2116      	movs	r1, #22
   14ecc:	4249      	negs	r1, r1
   14ece:	e010      	b.n	14ef2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
   14ed0:	210c      	movs	r1, #12
   14ed2:	4249      	negs	r1, r1
   14ed4:	e00d      	b.n	14ef2 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
   14ed6:	2179      	movs	r1, #121	; 0x79
   14ed8:	4249      	negs	r1, r1
   14eda:	e00a      	b.n	14ef2 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
   14edc:	2168      	movs	r1, #104	; 0x68
   14ede:	4249      	negs	r1, r1
   14ee0:	e007      	b.n	14ef2 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
   14ee2:	210b      	movs	r1, #11
   14ee4:	4249      	negs	r1, r1
   14ee6:	e004      	b.n	14ef2 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
   14ee8:	2110      	movs	r1, #16
   14eea:	4249      	negs	r1, r1
   14eec:	e001      	b.n	14ef2 <http_client_socket_event_handler+0x192>
			return -EIO;
   14eee:	2105      	movs	r1, #5
   14ef0:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   14ef2:	0020      	movs	r0, r4
   14ef4:	4b06      	ldr	r3, [pc, #24]	; (14f10 <http_client_socket_event_handler+0x1b0>)
   14ef6:	4798      	blx	r3
   14ef8:	e7d0      	b.n	14e9c <http_client_socket_event_handler+0x13c>
   14efa:	46c0      	nop			; (mov r8, r8)
   14efc:	20000854 	.word	0x20000854
   14f00:	000150ad 	.word	0x000150ad
   14f04:	000148cd 	.word	0x000148cd
   14f08:	000141c5 	.word	0x000141c5
   14f0c:	0001a158 	.word	0x0001a158
   14f10:	000140ad 	.word	0x000140ad
   14f14:	00014d2d 	.word	0x00014d2d
   14f18:	0001a194 	.word	0x0001a194
   14f1c:	0001a1d0 	.word	0x0001a1d0

00014f20 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
   14f20:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
   14f22:	6101      	str	r1, [r0, #16]
	writer->written = 0;
   14f24:	2200      	movs	r2, #0
   14f26:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
   14f28:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
   14f2a:	9b00      	ldr	r3, [sp, #0]
   14f2c:	60c3      	str	r3, [r0, #12]
}
   14f2e:	4770      	bx	lr

00014f30 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
   14f30:	b510      	push	{r4, lr}
   14f32:	0004      	movs	r4, r0
	if(writer->written > 0) {
   14f34:	6842      	ldr	r2, [r0, #4]
   14f36:	2a00      	cmp	r2, #0
   14f38:	d100      	bne.n	14f3c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
   14f3a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   14f3c:	6901      	ldr	r1, [r0, #16]
   14f3e:	68c0      	ldr	r0, [r0, #12]
   14f40:	68a3      	ldr	r3, [r4, #8]
   14f42:	4798      	blx	r3
		writer->written = 0;
   14f44:	2300      	movs	r3, #0
   14f46:	6063      	str	r3, [r4, #4]
}
   14f48:	e7f7      	b.n	14f3a <stream_writer_send_remain+0xa>
	...

00014f4c <stream_writer_send_8>:
{
   14f4c:	b570      	push	{r4, r5, r6, lr}
   14f4e:	0004      	movs	r4, r0
   14f50:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
   14f52:	6803      	ldr	r3, [r0, #0]
   14f54:	6842      	ldr	r2, [r0, #4]
   14f56:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
   14f58:	2b00      	cmp	r3, #0
   14f5a:	dd05      	ble.n	14f68 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
   14f5c:	6922      	ldr	r2, [r4, #16]
   14f5e:	6863      	ldr	r3, [r4, #4]
   14f60:	1c59      	adds	r1, r3, #1
   14f62:	6061      	str	r1, [r4, #4]
   14f64:	54d5      	strb	r5, [r2, r3]
}
   14f66:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
   14f68:	4b01      	ldr	r3, [pc, #4]	; (14f70 <stream_writer_send_8+0x24>)
   14f6a:	4798      	blx	r3
   14f6c:	e7f6      	b.n	14f5c <stream_writer_send_8+0x10>
   14f6e:	46c0      	nop			; (mov r8, r8)
   14f70:	00014f31 	.word	0x00014f31

00014f74 <stream_writer_send_buffer>:
{
   14f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f76:	0006      	movs	r6, r0
   14f78:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
   14f7a:	2a00      	cmp	r2, #0
   14f7c:	d008      	beq.n	14f90 <stream_writer_send_buffer+0x1c>
   14f7e:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
   14f80:	4f04      	ldr	r7, [pc, #16]	; (14f94 <stream_writer_send_buffer+0x20>)
   14f82:	2100      	movs	r1, #0
   14f84:	5661      	ldrsb	r1, [r4, r1]
   14f86:	0030      	movs	r0, r6
   14f88:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
   14f8a:	3401      	adds	r4, #1
   14f8c:	42a5      	cmp	r5, r4
   14f8e:	d1f8      	bne.n	14f82 <stream_writer_send_buffer+0xe>
}
   14f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14f92:	46c0      	nop			; (mov r8, r8)
   14f94:	00014f4d 	.word	0x00014f4d

00014f98 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
   14f98:	4a02      	ldr	r2, [pc, #8]	; (14fa4 <sw_timer_tcc_callback+0xc>)
   14f9a:	6813      	ldr	r3, [r2, #0]
   14f9c:	3301      	adds	r3, #1
   14f9e:	6013      	str	r3, [r2, #0]
}
   14fa0:	4770      	bx	lr
   14fa2:	46c0      	nop			; (mov r8, r8)
   14fa4:	20000870 	.word	0x20000870

00014fa8 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
   14fa8:	2364      	movs	r3, #100	; 0x64
   14faa:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
   14fac:	2300      	movs	r3, #0
   14fae:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
   14fb0:	7043      	strb	r3, [r0, #1]
}
   14fb2:	4770      	bx	lr

00014fb4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   14fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fb6:	46c6      	mov	lr, r8
   14fb8:	b500      	push	{lr}
   14fba:	b0ac      	sub	sp, #176	; 0xb0
   14fbc:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   14fbe:	466e      	mov	r6, sp
   14fc0:	4b1d      	ldr	r3, [pc, #116]	; (15038 <sw_timer_init+0x84>)
   14fc2:	466a      	mov	r2, sp
   14fc4:	cb92      	ldmia	r3!, {r1, r4, r7}
   14fc6:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   14fc8:	886b      	ldrh	r3, [r5, #2]
   14fca:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   14fcc:	3014      	adds	r0, #20
   14fce:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   14fd0:	782b      	ldrb	r3, [r5, #0]
   14fd2:	009b      	lsls	r3, r3, #2
   14fd4:	5999      	ldr	r1, [r3, r6]
   14fd6:	0017      	movs	r7, r2
   14fd8:	0010      	movs	r0, r2
   14fda:	4b18      	ldr	r3, [pc, #96]	; (1503c <sw_timer_init+0x88>)
   14fdc:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   14fde:	2000      	movs	r0, #0
   14fe0:	4b17      	ldr	r3, [pc, #92]	; (15040 <sw_timer_init+0x8c>)
   14fe2:	4798      	blx	r3
   14fe4:	4b17      	ldr	r3, [pc, #92]	; (15044 <sw_timer_init+0x90>)
   14fe6:	7a1b      	ldrb	r3, [r3, #8]
   14fe8:	b2db      	uxtb	r3, r3
   14fea:	40d8      	lsrs	r0, r3
   14fec:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   14fee:	8869      	ldrh	r1, [r5, #2]
   14ff0:	20fa      	movs	r0, #250	; 0xfa
   14ff2:	0200      	lsls	r0, r0, #8
   14ff4:	4b14      	ldr	r3, [pc, #80]	; (15048 <sw_timer_init+0x94>)
   14ff6:	4798      	blx	r3
   14ff8:	0001      	movs	r1, r0
   14ffa:	4640      	mov	r0, r8
   14ffc:	4b13      	ldr	r3, [pc, #76]	; (1504c <sw_timer_init+0x98>)
   14ffe:	4798      	blx	r3
   15000:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   15002:	2305      	movs	r3, #5
   15004:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   15006:	782b      	ldrb	r3, [r5, #0]
   15008:	009b      	lsls	r3, r3, #2
   1500a:	5999      	ldr	r1, [r3, r6]
   1500c:	003a      	movs	r2, r7
   1500e:	0020      	movs	r0, r4
   15010:	4b0f      	ldr	r3, [pc, #60]	; (15050 <sw_timer_init+0x9c>)
   15012:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15014:	786a      	ldrb	r2, [r5, #1]
   15016:	3208      	adds	r2, #8
   15018:	b2d2      	uxtb	r2, r2
   1501a:	490e      	ldr	r1, [pc, #56]	; (15054 <sw_timer_init+0xa0>)
   1501c:	0020      	movs	r0, r4
   1501e:	4b0e      	ldr	r3, [pc, #56]	; (15058 <sw_timer_init+0xa4>)
   15020:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   15022:	7869      	ldrb	r1, [r5, #1]
   15024:	3108      	adds	r1, #8
   15026:	b2c9      	uxtb	r1, r1
   15028:	0020      	movs	r0, r4
   1502a:	4b0c      	ldr	r3, [pc, #48]	; (1505c <sw_timer_init+0xa8>)
   1502c:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   1502e:	b02c      	add	sp, #176	; 0xb0
   15030:	bc04      	pop	{r2}
   15032:	4690      	mov	r8, r2
   15034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15036:	46c0      	nop			; (mov r8, r8)
   15038:	0001a340 	.word	0x0001a340
   1503c:	000100e5 	.word	0x000100e5
   15040:	0000fe41 	.word	0x0000fe41
   15044:	40000400 	.word	0x40000400
   15048:	00016321 	.word	0x00016321
   1504c:	0001620d 	.word	0x0001620d
   15050:	00010231 	.word	0x00010231
   15054:	00014f99 	.word	0x00014f99
   15058:	0001063d 	.word	0x0001063d
   1505c:	00010655 	.word	0x00010655

00015060 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   15060:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   15062:	2102      	movs	r1, #2
   15064:	6893      	ldr	r3, [r2, #8]
   15066:	4219      	tst	r1, r3
   15068:	d1fc      	bne.n	15064 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   1506a:	6813      	ldr	r3, [r2, #0]
   1506c:	2102      	movs	r1, #2
   1506e:	430b      	orrs	r3, r1
   15070:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   15072:	4770      	bx	lr

00015074 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   15074:	b570      	push	{r4, r5, r6, lr}
   15076:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
   15078:	7805      	ldrb	r5, [r0, #0]
   1507a:	07e8      	lsls	r0, r5, #31
   1507c:	d502      	bpl.n	15084 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
   1507e:	2001      	movs	r0, #1
   15080:	4240      	negs	r0, r0
}
   15082:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
   15084:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
   15086:	0029      	movs	r1, r5
   15088:	2002      	movs	r0, #2
   1508a:	4381      	bics	r1, r0
   1508c:	7021      	strb	r1, [r4, #0]
			handler->context = context;
   1508e:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
   15090:	6d61      	ldr	r1, [r4, #84]	; 0x54
   15092:	0018      	movs	r0, r3
   15094:	4b04      	ldr	r3, [pc, #16]	; (150a8 <sw_timer_register_callback+0x34>)
   15096:	4798      	blx	r3
   15098:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
   1509a:	7823      	ldrb	r3, [r4, #0]
   1509c:	2201      	movs	r2, #1
   1509e:	4313      	orrs	r3, r2
   150a0:	7023      	strb	r3, [r4, #0]
			return index;
   150a2:	2000      	movs	r0, #0
   150a4:	e7ed      	b.n	15082 <sw_timer_register_callback+0xe>
   150a6:	46c0      	nop			; (mov r8, r8)
   150a8:	0001620d 	.word	0x0001620d

000150ac <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   150ac:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
   150ae:	008b      	lsls	r3, r1, #2
   150b0:	185d      	adds	r5, r3, r1
   150b2:	00ad      	lsls	r5, r5, #2
   150b4:	5c29      	ldrb	r1, [r5, r0]
   150b6:	2602      	movs	r6, #2
   150b8:	4331      	orrs	r1, r6
   150ba:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   150bc:	1944      	adds	r4, r0, r5
   150be:	6d41      	ldr	r1, [r0, #84]	; 0x54
   150c0:	0010      	movs	r0, r2
   150c2:	4b03      	ldr	r3, [pc, #12]	; (150d0 <sw_timer_enable_callback+0x24>)
   150c4:	4798      	blx	r3
   150c6:	4b03      	ldr	r3, [pc, #12]	; (150d4 <sw_timer_enable_callback+0x28>)
   150c8:	681b      	ldr	r3, [r3, #0]
   150ca:	18c0      	adds	r0, r0, r3
   150cc:	6120      	str	r0, [r4, #16]
}
   150ce:	bd70      	pop	{r4, r5, r6, pc}
   150d0:	0001620d 	.word	0x0001620d
   150d4:	20000870 	.word	0x20000870

000150d8 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
   150d8:	008b      	lsls	r3, r1, #2
   150da:	1859      	adds	r1, r3, r1
   150dc:	0089      	lsls	r1, r1, #2
   150de:	5c0b      	ldrb	r3, [r1, r0]
   150e0:	2202      	movs	r2, #2
   150e2:	4393      	bics	r3, r2
   150e4:	540b      	strb	r3, [r1, r0]
}
   150e6:	4770      	bx	lr

000150e8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   150e8:	b570      	push	{r4, r5, r6, lr}
   150ea:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   150ec:	7803      	ldrb	r3, [r0, #0]
   150ee:	07db      	lsls	r3, r3, #31
   150f0:	d507      	bpl.n	15102 <sw_timer_task+0x1a>
   150f2:	7803      	ldrb	r3, [r0, #0]
   150f4:	079b      	lsls	r3, r3, #30
   150f6:	d504      	bpl.n	15102 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   150f8:	4b10      	ldr	r3, [pc, #64]	; (1513c <sw_timer_task+0x54>)
   150fa:	681a      	ldr	r2, [r3, #0]
   150fc:	6903      	ldr	r3, [r0, #16]
   150fe:	1a9b      	subs	r3, r3, r2
   15100:	d400      	bmi.n	15104 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
   15102:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   15104:	7803      	ldrb	r3, [r0, #0]
   15106:	075b      	lsls	r3, r3, #29
   15108:	d4fb      	bmi.n	15102 <sw_timer_task+0x1a>
				handler->busy = 1;
   1510a:	7803      	ldrb	r3, [r0, #0]
   1510c:	2104      	movs	r1, #4
   1510e:	430b      	orrs	r3, r1
   15110:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
   15112:	68c3      	ldr	r3, [r0, #12]
   15114:	2b00      	cmp	r3, #0
   15116:	d00b      	beq.n	15130 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
   15118:	18d2      	adds	r2, r2, r3
   1511a:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
   1511c:	68a2      	ldr	r2, [r4, #8]
   1511e:	2100      	movs	r1, #0
   15120:	0020      	movs	r0, r4
   15122:	6865      	ldr	r5, [r4, #4]
   15124:	47a8      	blx	r5
				handler->busy = 0;
   15126:	7823      	ldrb	r3, [r4, #0]
   15128:	2204      	movs	r2, #4
   1512a:	4393      	bics	r3, r2
   1512c:	7023      	strb	r3, [r4, #0]
}
   1512e:	e7e8      	b.n	15102 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
   15130:	7802      	ldrb	r2, [r0, #0]
   15132:	2102      	movs	r1, #2
   15134:	438a      	bics	r2, r1
   15136:	7002      	strb	r2, [r0, #0]
   15138:	e7f0      	b.n	1511c <sw_timer_task+0x34>
   1513a:	46c0      	nop			; (mov r8, r8)
   1513c:	20000870 	.word	0x20000870

00015140 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
   15140:	4b02      	ldr	r3, [pc, #8]	; (1514c <add_state+0xc>)
   15142:	781a      	ldrb	r2, [r3, #0]
   15144:	4310      	orrs	r0, r2
   15146:	7018      	strb	r0, [r3, #0]
}
   15148:	4770      	bx	lr
   1514a:	46c0      	nop			; (mov r8, r8)
   1514c:	200008bd 	.word	0x200008bd

00015150 <extint_detection_callback>:
{
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	//temperature++;
	//if (temperature > 40) temperature = 1;
	//snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);	
	isPressed = true;
   15150:	2201      	movs	r2, #1
   15152:	4b01      	ldr	r3, [pc, #4]	; (15158 <extint_detection_callback+0x8>)
   15154:	701a      	strb	r2, [r3, #0]
}
   15156:	4770      	bx	lr
   15158:	20000b18 	.word	0x20000b18

0001515c <SubscribeHandler>:
{
   1515c:	b570      	push	{r4, r5, r6, lr}
   1515e:	0004      	movs	r4, r0
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
   15160:	6843      	ldr	r3, [r0, #4]
   15162:	689a      	ldr	r2, [r3, #8]
   15164:	6859      	ldr	r1, [r3, #4]
   15166:	4832      	ldr	r0, [pc, #200]	; (15230 <SubscribeHandler+0xd4>)
   15168:	4d32      	ldr	r5, [pc, #200]	; (15234 <SubscribeHandler+0xd8>)
   1516a:	47a8      	blx	r5
	printf(" >> ");
   1516c:	4832      	ldr	r0, [pc, #200]	; (15238 <SubscribeHandler+0xdc>)
   1516e:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);
   15170:	6823      	ldr	r3, [r4, #0]
   15172:	689a      	ldr	r2, [r3, #8]
   15174:	68d9      	ldr	r1, [r3, #12]
   15176:	4831      	ldr	r0, [pc, #196]	; (1523c <SubscribeHandler+0xe0>)
   15178:	47a8      	blx	r5
	if(strncmp((char *) msgData->topicName->lenstring.data, START_TOPIC	, msgData->message->payloadlen) == 0)
   1517a:	6823      	ldr	r3, [r4, #0]
   1517c:	68da      	ldr	r2, [r3, #12]
   1517e:	6863      	ldr	r3, [r4, #4]
   15180:	6898      	ldr	r0, [r3, #8]
   15182:	492f      	ldr	r1, [pc, #188]	; (15240 <SubscribeHandler+0xe4>)
   15184:	4b2f      	ldr	r3, [pc, #188]	; (15244 <SubscribeHandler+0xe8>)
   15186:	4798      	blx	r3
   15188:	2800      	cmp	r0, #0
   1518a:	d109      	bne.n	151a0 <SubscribeHandler+0x44>
		BUTTON_CNT++;
   1518c:	4a2e      	ldr	r2, [pc, #184]	; (15248 <SubscribeHandler+0xec>)
   1518e:	6813      	ldr	r3, [r2, #0]
   15190:	3301      	adds	r3, #1
   15192:	6013      	str	r3, [r2, #0]
		if(BUTTON_CNT == 1)
   15194:	2b01      	cmp	r3, #1
   15196:	d01f      	beq.n	151d8 <SubscribeHandler+0x7c>
		if(BUTTON_CNT == 2)
   15198:	4b2b      	ldr	r3, [pc, #172]	; (15248 <SubscribeHandler+0xec>)
   1519a:	681b      	ldr	r3, [r3, #0]
   1519c:	2b02      	cmp	r3, #2
   1519e:	d022      	beq.n	151e6 <SubscribeHandler+0x8a>
	if(strncmp((char *) msgData->topicName->lenstring.data, KNOB_TOPIC	, msgData->message->payloadlen) == 0)
   151a0:	6825      	ldr	r5, [r4, #0]
   151a2:	6863      	ldr	r3, [r4, #4]
   151a4:	6898      	ldr	r0, [r3, #8]
   151a6:	68ea      	ldr	r2, [r5, #12]
   151a8:	4928      	ldr	r1, [pc, #160]	; (1524c <SubscribeHandler+0xf0>)
   151aa:	4b26      	ldr	r3, [pc, #152]	; (15244 <SubscribeHandler+0xe8>)
   151ac:	4798      	blx	r3
   151ae:	2800      	cmp	r0, #0
   151b0:	d022      	beq.n	151f8 <SubscribeHandler+0x9c>
	if(strncmp((char *) msgData->topicName->lenstring.data, TIME_TOPIC	, msgData->message->payloadlen) == 0)
   151b2:	6825      	ldr	r5, [r4, #0]
   151b4:	6863      	ldr	r3, [r4, #4]
   151b6:	6898      	ldr	r0, [r3, #8]
   151b8:	68ea      	ldr	r2, [r5, #12]
   151ba:	4925      	ldr	r1, [pc, #148]	; (15250 <SubscribeHandler+0xf4>)
   151bc:	4b21      	ldr	r3, [pc, #132]	; (15244 <SubscribeHandler+0xe8>)
   151be:	4798      	blx	r3
   151c0:	2800      	cmp	r0, #0
   151c2:	d023      	beq.n	1520c <SubscribeHandler+0xb0>
	if(strncmp((char *) msgData->topicName->lenstring.data, OTAFU_TOPIC	, msgData->message->payloadlen) == 0)
   151c4:	6823      	ldr	r3, [r4, #0]
   151c6:	68da      	ldr	r2, [r3, #12]
   151c8:	6863      	ldr	r3, [r4, #4]
   151ca:	6898      	ldr	r0, [r3, #8]
   151cc:	4921      	ldr	r1, [pc, #132]	; (15254 <SubscribeHandler+0xf8>)
   151ce:	4b1d      	ldr	r3, [pc, #116]	; (15244 <SubscribeHandler+0xe8>)
   151d0:	4798      	blx	r3
   151d2:	2800      	cmp	r0, #0
   151d4:	d024      	beq.n	15220 <SubscribeHandler+0xc4>
}
   151d6:	bd70      	pop	{r4, r5, r6, pc}
			START_BUTTON = true;
   151d8:	2201      	movs	r2, #1
   151da:	4b1f      	ldr	r3, [pc, #124]	; (15258 <SubscribeHandler+0xfc>)
   151dc:	701a      	strb	r2, [r3, #0]
			printf("\n Cooking started");
   151de:	481f      	ldr	r0, [pc, #124]	; (1525c <SubscribeHandler+0x100>)
   151e0:	4b14      	ldr	r3, [pc, #80]	; (15234 <SubscribeHandler+0xd8>)
   151e2:	4798      	blx	r3
   151e4:	e7d8      	b.n	15198 <SubscribeHandler+0x3c>
			START_BUTTON = false;
   151e6:	2300      	movs	r3, #0
   151e8:	4a1b      	ldr	r2, [pc, #108]	; (15258 <SubscribeHandler+0xfc>)
   151ea:	7013      	strb	r3, [r2, #0]
			BUTTON_CNT = 0;
   151ec:	4a16      	ldr	r2, [pc, #88]	; (15248 <SubscribeHandler+0xec>)
   151ee:	6013      	str	r3, [r2, #0]
			printf("\n Cooking stopped");
   151f0:	481b      	ldr	r0, [pc, #108]	; (15260 <SubscribeHandler+0x104>)
   151f2:	4b10      	ldr	r3, [pc, #64]	; (15234 <SubscribeHandler+0xd8>)
   151f4:	4798      	blx	r3
   151f6:	e7d3      	b.n	151a0 <SubscribeHandler+0x44>
		KNOB_VALUE = atoi(msgData->message->payload);
   151f8:	68a8      	ldr	r0, [r5, #8]
   151fa:	4b1a      	ldr	r3, [pc, #104]	; (15264 <SubscribeHandler+0x108>)
   151fc:	4798      	blx	r3
   151fe:	0001      	movs	r1, r0
   15200:	4b19      	ldr	r3, [pc, #100]	; (15268 <SubscribeHandler+0x10c>)
   15202:	6018      	str	r0, [r3, #0]
		printf("\n Knob level set to:%d",KNOB_VALUE);
   15204:	4819      	ldr	r0, [pc, #100]	; (1526c <SubscribeHandler+0x110>)
   15206:	4b0b      	ldr	r3, [pc, #44]	; (15234 <SubscribeHandler+0xd8>)
   15208:	4798      	blx	r3
   1520a:	e7d2      	b.n	151b2 <SubscribeHandler+0x56>
		TIME_VALUE = atoi(msgData->message->payload);
   1520c:	68a8      	ldr	r0, [r5, #8]
   1520e:	4b15      	ldr	r3, [pc, #84]	; (15264 <SubscribeHandler+0x108>)
   15210:	4798      	blx	r3
   15212:	0001      	movs	r1, r0
   15214:	4b16      	ldr	r3, [pc, #88]	; (15270 <SubscribeHandler+0x114>)
   15216:	6018      	str	r0, [r3, #0]
		printf("\n Time level set to:%d",TIME_VALUE);
   15218:	4816      	ldr	r0, [pc, #88]	; (15274 <SubscribeHandler+0x118>)
   1521a:	4b06      	ldr	r3, [pc, #24]	; (15234 <SubscribeHandler+0xd8>)
   1521c:	4798      	blx	r3
   1521e:	e7d1      	b.n	151c4 <SubscribeHandler+0x68>
		OTAFU_REQ = true;
   15220:	2201      	movs	r2, #1
   15222:	4b15      	ldr	r3, [pc, #84]	; (15278 <SubscribeHandler+0x11c>)
   15224:	701a      	strb	r2, [r3, #0]
		printf("\nOTAFU Requested");
   15226:	4815      	ldr	r0, [pc, #84]	; (1527c <SubscribeHandler+0x120>)
   15228:	4b02      	ldr	r3, [pc, #8]	; (15234 <SubscribeHandler+0xd8>)
   1522a:	4798      	blx	r3
	return;
   1522c:	e7d3      	b.n	151d6 <SubscribeHandler+0x7a>
   1522e:	46c0      	nop			; (mov r8, r8)
   15230:	0001a360 	.word	0x0001a360
   15234:	00016761 	.word	0x00016761
   15238:	0001a368 	.word	0x0001a368
   1523c:	0001a370 	.word	0x0001a370
   15240:	0001a378 	.word	0x0001a378
   15244:	00016b69 	.word	0x00016b69
   15248:	20000874 	.word	0x20000874
   1524c:	0001a3a8 	.word	0x0001a3a8
   15250:	0001a3c8 	.word	0x0001a3c8
   15254:	0001a3e8 	.word	0x0001a3e8
   15258:	2000087d 	.word	0x2000087d
   1525c:	0001a380 	.word	0x0001a380
   15260:	0001a394 	.word	0x0001a394
   15264:	0001654d 	.word	0x0001654d
   15268:	20000878 	.word	0x20000878
   1526c:	0001a3b0 	.word	0x0001a3b0
   15270:	20000880 	.word	0x20000880
   15274:	0001a3d0 	.word	0x0001a3d0
   15278:	2000087c 	.word	0x2000087c
   1527c:	0001a3f0 	.word	0x0001a3f0

00015280 <resolve_cb>:
{
   15280:	b570      	push	{r4, r5, r6, lr}
   15282:	b082      	sub	sp, #8
   15284:	0005      	movs	r5, r0
   15286:	000c      	movs	r4, r1
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
   15288:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   1528a:	21ff      	movs	r1, #255	; 0xff
   1528c:	400b      	ands	r3, r1
   1528e:	000a      	movs	r2, r1
   15290:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   15292:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   15294:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
   15296:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
   15298:	4001      	ands	r1, r0
   1529a:	9100      	str	r1, [sp, #0]
   1529c:	0029      	movs	r1, r5
   1529e:	4804      	ldr	r0, [pc, #16]	; (152b0 <resolve_cb+0x30>)
   152a0:	4e04      	ldr	r6, [pc, #16]	; (152b4 <resolve_cb+0x34>)
   152a2:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   152a4:	0021      	movs	r1, r4
   152a6:	0028      	movs	r0, r5
   152a8:	4b03      	ldr	r3, [pc, #12]	; (152b8 <resolve_cb+0x38>)
   152aa:	4798      	blx	r3
}
   152ac:	b002      	add	sp, #8
   152ae:	bd70      	pop	{r4, r5, r6, pc}
   152b0:	0001acb0 	.word	0x0001acb0
   152b4:	00016761 	.word	0x00016761
   152b8:	00014135 	.word	0x00014135

000152bc <socket_cb>:
{
   152bc:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
   152be:	4b01      	ldr	r3, [pc, #4]	; (152c4 <socket_cb+0x8>)
   152c0:	4798      	blx	r3
}
   152c2:	bd10      	pop	{r4, pc}
   152c4:	00014d61 	.word	0x00014d61

000152c8 <start_download>:
{
   152c8:	b510      	push	{r4, lr}
   152ca:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
   152cc:	4b13      	ldr	r3, [pc, #76]	; (1531c <start_download+0x54>)
   152ce:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
   152d0:	07da      	lsls	r2, r3, #31
   152d2:	d512      	bpl.n	152fa <start_download+0x32>
	if (!is_state_set(WIFI_CONNECTED)) {
   152d4:	079a      	lsls	r2, r3, #30
   152d6:	d514      	bpl.n	15302 <start_download+0x3a>
	if (is_state_set(GET_REQUESTED)) {
   152d8:	075a      	lsls	r2, r3, #29
   152da:	d416      	bmi.n	1530a <start_download+0x42>
	if (is_state_set(DOWNLOADING)) {
   152dc:	071b      	lsls	r3, r3, #28
   152de:	d418      	bmi.n	15312 <start_download+0x4a>
	printf("start_download: sending HTTP request...\r\n");
   152e0:	480f      	ldr	r0, [pc, #60]	; (15320 <start_download+0x58>)
   152e2:	4b10      	ldr	r3, [pc, #64]	; (15324 <start_download+0x5c>)
   152e4:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, desired_url, HTTP_METHOD_GET, NULL, NULL);
   152e6:	4b10      	ldr	r3, [pc, #64]	; (15328 <start_download+0x60>)
   152e8:	6819      	ldr	r1, [r3, #0]
   152ea:	2300      	movs	r3, #0
   152ec:	9300      	str	r3, [sp, #0]
   152ee:	2201      	movs	r2, #1
   152f0:	480e      	ldr	r0, [pc, #56]	; (1532c <start_download+0x64>)
   152f2:	4c0f      	ldr	r4, [pc, #60]	; (15330 <start_download+0x68>)
   152f4:	47a0      	blx	r4
}
   152f6:	b002      	add	sp, #8
   152f8:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
   152fa:	480e      	ldr	r0, [pc, #56]	; (15334 <start_download+0x6c>)
   152fc:	4b09      	ldr	r3, [pc, #36]	; (15324 <start_download+0x5c>)
   152fe:	4798      	blx	r3
		return;
   15300:	e7f9      	b.n	152f6 <start_download+0x2e>
		printf("start_download: Wi-Fi is not connected.\r\n");
   15302:	480d      	ldr	r0, [pc, #52]	; (15338 <start_download+0x70>)
   15304:	4b07      	ldr	r3, [pc, #28]	; (15324 <start_download+0x5c>)
   15306:	4798      	blx	r3
		return;
   15308:	e7f5      	b.n	152f6 <start_download+0x2e>
		printf("start_download: request is sent already.\r\n");
   1530a:	480c      	ldr	r0, [pc, #48]	; (1533c <start_download+0x74>)
   1530c:	4b05      	ldr	r3, [pc, #20]	; (15324 <start_download+0x5c>)
   1530e:	4798      	blx	r3
		return;
   15310:	e7f1      	b.n	152f6 <start_download+0x2e>
		printf("start_download: running download already.\r\n");
   15312:	480b      	ldr	r0, [pc, #44]	; (15340 <start_download+0x78>)
   15314:	4b03      	ldr	r3, [pc, #12]	; (15324 <start_download+0x5c>)
   15316:	4798      	blx	r3
		return;
   15318:	e7ed      	b.n	152f6 <start_download+0x2e>
   1531a:	46c0      	nop			; (mov r8, r8)
   1531c:	200008bd 	.word	0x200008bd
   15320:	0001ad8c 	.word	0x0001ad8c
   15324:	0001687d 	.word	0x0001687d
   15328:	200008b8 	.word	0x200008b8
   1532c:	200011fc 	.word	0x200011fc
   15330:	00014665 	.word	0x00014665
   15334:	0001ace0 	.word	0x0001ace0
   15338:	0001ad08 	.word	0x0001ad08
   1533c:	0001ad34 	.word	0x0001ad34
   15340:	0001ad60 	.word	0x0001ad60

00015344 <socket_resolve_handler>:
{
   15344:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
   15346:	4b01      	ldr	r3, [pc, #4]	; (1534c <socket_resolve_handler+0x8>)
   15348:	4798      	blx	r3
}
   1534a:	bd10      	pop	{r4, pc}
   1534c:	000133a5 	.word	0x000133a5

00015350 <socket_event_handler>:
{
   15350:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
   15352:	4b01      	ldr	r3, [pc, #4]	; (15358 <socket_event_handler+0x8>)
   15354:	4798      	blx	r3
}
   15356:	bd10      	pop	{r4, pc}
   15358:	00013399 	.word	0x00013399

0001535c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   1535c:	b570      	push	{r4, r5, r6, lr}
   1535e:	b082      	sub	sp, #8
   15360:	0005      	movs	r5, r0
   15362:	000e      	movs	r6, r1
	uint16_t temp = 0;
   15364:	2200      	movs	r2, #0
   15366:	466b      	mov	r3, sp
   15368:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
   1536a:	4c06      	ldr	r4, [pc, #24]	; (15384 <usart_serial_getchar+0x28>)
   1536c:	466b      	mov	r3, sp
   1536e:	1d99      	adds	r1, r3, #6
   15370:	0028      	movs	r0, r5
   15372:	47a0      	blx	r4
   15374:	2800      	cmp	r0, #0
   15376:	d1f9      	bne.n	1536c <usart_serial_getchar+0x10>

	*c = temp;
   15378:	466b      	mov	r3, sp
   1537a:	3306      	adds	r3, #6
   1537c:	881b      	ldrh	r3, [r3, #0]
   1537e:	7033      	strb	r3, [r6, #0]
}
   15380:	b002      	add	sp, #8
   15382:	bd70      	pop	{r4, r5, r6, pc}
   15384:	0000f70d 	.word	0x0000f70d

00015388 <usart_serial_putchar>:
{
   15388:	b570      	push	{r4, r5, r6, lr}
   1538a:	0005      	movs	r5, r0
	while(STATUS_OK != usart_write_wait(module, c));
   1538c:	b28c      	uxth	r4, r1
   1538e:	4e03      	ldr	r6, [pc, #12]	; (1539c <usart_serial_putchar+0x14>)
   15390:	0021      	movs	r1, r4
   15392:	0028      	movs	r0, r5
   15394:	47b0      	blx	r6
   15396:	2800      	cmp	r0, #0
   15398:	d1fa      	bne.n	15390 <usart_serial_putchar+0x8>
}
   1539a:	bd70      	pop	{r4, r5, r6, pc}
   1539c:	0000f6e1 	.word	0x0000f6e1

000153a0 <mqtt_callback>:
{
   153a0:	b570      	push	{r4, r5, r6, lr}
   153a2:	b086      	sub	sp, #24
   153a4:	0004      	movs	r4, r0
	switch (type) {
   153a6:	2901      	cmp	r1, #1
   153a8:	d02c      	beq.n	15404 <mqtt_callback+0x64>
   153aa:	2905      	cmp	r1, #5
   153ac:	d04f      	beq.n	1544e <mqtt_callback+0xae>
   153ae:	2900      	cmp	r1, #0
   153b0:	d001      	beq.n	153b6 <mqtt_callback+0x16>
}
   153b2:	b006      	add	sp, #24
   153b4:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
   153b6:	6813      	ldr	r3, [r2, #0]
   153b8:	2b00      	cmp	r3, #0
   153ba:	db19      	blt.n	153f0 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
   153bc:	4829      	ldr	r0, [pc, #164]	; (15464 <mqtt_callback+0xc4>)
   153be:	4b2a      	ldr	r3, [pc, #168]	; (15468 <mqtt_callback+0xc8>)
   153c0:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
   153c2:	4a2a      	ldr	r2, [pc, #168]	; (1546c <mqtt_callback+0xcc>)
   153c4:	2300      	movs	r3, #0
   153c6:	9305      	str	r3, [sp, #20]
   153c8:	9304      	str	r3, [sp, #16]
   153ca:	9303      	str	r3, [sp, #12]
   153cc:	9302      	str	r3, [sp, #8]
   153ce:	9301      	str	r3, [sp, #4]
   153d0:	9200      	str	r2, [sp, #0]
   153d2:	4b27      	ldr	r3, [pc, #156]	; (15470 <mqtt_callback+0xd0>)
   153d4:	2101      	movs	r1, #1
   153d6:	0020      	movs	r0, r4
   153d8:	4c26      	ldr	r4, [pc, #152]	; (15474 <mqtt_callback+0xd4>)
   153da:	47a0      	blx	r4
   153dc:	2800      	cmp	r0, #0
   153de:	d003      	beq.n	153e8 <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
   153e0:	4825      	ldr	r0, [pc, #148]	; (15478 <mqtt_callback+0xd8>)
   153e2:	4b26      	ldr	r3, [pc, #152]	; (1547c <mqtt_callback+0xdc>)
   153e4:	4798      	blx	r3
   153e6:	e7e4      	b.n	153b2 <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
   153e8:	4825      	ldr	r0, [pc, #148]	; (15480 <mqtt_callback+0xe0>)
   153ea:	4b24      	ldr	r3, [pc, #144]	; (1547c <mqtt_callback+0xdc>)
   153ec:	4798      	blx	r3
   153ee:	e7e0      	b.n	153b2 <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   153f0:	4d24      	ldr	r5, [pc, #144]	; (15484 <mqtt_callback+0xe4>)
   153f2:	0029      	movs	r1, r5
   153f4:	4824      	ldr	r0, [pc, #144]	; (15488 <mqtt_callback+0xe8>)
   153f6:	4b1c      	ldr	r3, [pc, #112]	; (15468 <mqtt_callback+0xc8>)
   153f8:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   153fa:	0029      	movs	r1, r5
   153fc:	0020      	movs	r0, r4
   153fe:	4b23      	ldr	r3, [pc, #140]	; (1548c <mqtt_callback+0xec>)
   15400:	4798      	blx	r3
   15402:	e7d6      	b.n	153b2 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15404:	7811      	ldrb	r1, [r2, #0]
   15406:	2900      	cmp	r1, #0
   15408:	d11d      	bne.n	15446 <mqtt_callback+0xa6>
			mqtt_subscribe(module_inst, TEMP_TOPIC, 2, SubscribeHandler);
   1540a:	4e21      	ldr	r6, [pc, #132]	; (15490 <mqtt_callback+0xf0>)
   1540c:	0033      	movs	r3, r6
   1540e:	2202      	movs	r2, #2
   15410:	4920      	ldr	r1, [pc, #128]	; (15494 <mqtt_callback+0xf4>)
   15412:	4d21      	ldr	r5, [pc, #132]	; (15498 <mqtt_callback+0xf8>)
   15414:	47a8      	blx	r5
			mqtt_subscribe(module_inst, START_TOPIC, 2, SubscribeHandler);
   15416:	0033      	movs	r3, r6
   15418:	2202      	movs	r2, #2
   1541a:	4920      	ldr	r1, [pc, #128]	; (1549c <mqtt_callback+0xfc>)
   1541c:	0020      	movs	r0, r4
   1541e:	47a8      	blx	r5
			mqtt_subscribe(module_inst, KNOB_TOPIC, 2, SubscribeHandler);
   15420:	0033      	movs	r3, r6
   15422:	2202      	movs	r2, #2
   15424:	491e      	ldr	r1, [pc, #120]	; (154a0 <mqtt_callback+0x100>)
   15426:	0020      	movs	r0, r4
   15428:	47a8      	blx	r5
			mqtt_subscribe(module_inst, TIME_TOPIC, 2, SubscribeHandler);
   1542a:	0033      	movs	r3, r6
   1542c:	2202      	movs	r2, #2
   1542e:	491d      	ldr	r1, [pc, #116]	; (154a4 <mqtt_callback+0x104>)
   15430:	0020      	movs	r0, r4
   15432:	47a8      	blx	r5
			mqtt_subscribe(module_inst, OTAFU_TOPIC, 2, SubscribeHandler);
   15434:	0033      	movs	r3, r6
   15436:	2202      	movs	r2, #2
   15438:	491b      	ldr	r1, [pc, #108]	; (154a8 <mqtt_callback+0x108>)
   1543a:	0020      	movs	r0, r4
   1543c:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
   1543e:	481b      	ldr	r0, [pc, #108]	; (154ac <mqtt_callback+0x10c>)
   15440:	4b0e      	ldr	r3, [pc, #56]	; (1547c <mqtt_callback+0xdc>)
   15442:	4798      	blx	r3
   15444:	e7b5      	b.n	153b2 <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
   15446:	481a      	ldr	r0, [pc, #104]	; (154b0 <mqtt_callback+0x110>)
   15448:	4b07      	ldr	r3, [pc, #28]	; (15468 <mqtt_callback+0xc8>)
   1544a:	4798      	blx	r3
   1544c:	e7b1      	b.n	153b2 <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
   1544e:	4819      	ldr	r0, [pc, #100]	; (154b4 <mqtt_callback+0x114>)
   15450:	4b0a      	ldr	r3, [pc, #40]	; (1547c <mqtt_callback+0xdc>)
   15452:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
   15454:	4918      	ldr	r1, [pc, #96]	; (154b8 <mqtt_callback+0x118>)
   15456:	2231      	movs	r2, #49	; 0x31
   15458:	5c8b      	ldrb	r3, [r1, r2]
   1545a:	2002      	movs	r0, #2
   1545c:	4383      	bics	r3, r0
   1545e:	548b      	strb	r3, [r1, r2]
}
   15460:	e7a7      	b.n	153b2 <mqtt_callback+0x12>
   15462:	46c0      	nop			; (mov r8, r8)
   15464:	0001a84c 	.word	0x0001a84c
   15468:	00016761 	.word	0x00016761
   1546c:	0001a878 	.word	0x0001a878
   15470:	0001a868 	.word	0x0001a868
   15474:	000133dd 	.word	0x000133dd
   15478:	0001a884 	.word	0x0001a884
   1547c:	0001687d 	.word	0x0001687d
   15480:	0001a8ac 	.word	0x0001a8ac
   15484:	0001a838 	.word	0x0001a838
   15488:	0001a8c8 	.word	0x0001a8c8
   1548c:	000133b1 	.word	0x000133b1
   15490:	0001515d 	.word	0x0001515d
   15494:	0001a900 	.word	0x0001a900
   15498:	000134e1 	.word	0x000134e1
   1549c:	0001a378 	.word	0x0001a378
   154a0:	0001a3a8 	.word	0x0001a3a8
   154a4:	0001a3c8 	.word	0x0001a3c8
   154a8:	0001a3e8 	.word	0x0001a3e8
   154ac:	0001a908 	.word	0x0001a908
   154b0:	0001a918 	.word	0x0001a918
   154b4:	0001a94c 	.word	0x0001a94c
   154b8:	20000884 	.word	0x20000884

000154bc <rename_to_unique>:
{
   154bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   154be:	46de      	mov	lr, fp
   154c0:	b500      	push	{lr}
   154c2:	b0c8      	sub	sp, #288	; 0x120
   154c4:	0007      	movs	r7, r0
   154c6:	000e      	movs	r6, r1
   154c8:	9101      	str	r1, [sp, #4]
   154ca:	9203      	str	r2, [sp, #12]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   154cc:	22fb      	movs	r2, #251	; 0xfb
   154ce:	2100      	movs	r1, #0
   154d0:	a809      	add	r0, sp, #36	; 0x24
   154d2:	4d52      	ldr	r5, [pc, #328]	; (1561c <rename_to_unique+0x160>)
   154d4:	47a8      	blx	r5
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   154d6:	2209      	movs	r2, #9
   154d8:	2100      	movs	r1, #0
   154da:	a806      	add	r0, sp, #24
   154dc:	47a8      	blx	r5
	char numbering[NUMBRING_MAX + 1] = {0};
   154de:	2300      	movs	r3, #0
   154e0:	9305      	str	r3, [sp, #20]
	if (file_path_name == NULL) {
   154e2:	2e00      	cmp	r6, #0
   154e4:	d100      	bne.n	154e8 <rename_to_unique+0x2c>
   154e6:	e090      	b.n	1560a <rename_to_unique+0x14e>
	if (fp == NULL || file_path_name == NULL) {
   154e8:	2f00      	cmp	r7, #0
   154ea:	d100      	bne.n	154ee <rename_to_unique+0x32>
   154ec:	e08f      	b.n	1560e <rename_to_unique+0x152>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   154ee:	4d4c      	ldr	r5, [pc, #304]	; (15620 <rename_to_unique+0x164>)
   154f0:	2200      	movs	r2, #0
   154f2:	0031      	movs	r1, r6
   154f4:	0028      	movs	r0, r5
   154f6:	4b4b      	ldr	r3, [pc, #300]	; (15624 <rename_to_unique+0x168>)
   154f8:	4798      	blx	r3
   154fa:	0007      	movs	r7, r0
	f_close(&file_object);
   154fc:	0028      	movs	r0, r5
   154fe:	4b4a      	ldr	r3, [pc, #296]	; (15628 <rename_to_unique+0x16c>)
   15500:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
   15502:	2f00      	cmp	r7, #0
   15504:	d000      	beq.n	15508 <rename_to_unique+0x4c>
   15506:	e084      	b.n	15612 <rename_to_unique+0x156>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15508:	0030      	movs	r0, r6
   1550a:	4b48      	ldr	r3, [pc, #288]	; (1562c <rename_to_unique+0x170>)
   1550c:	4798      	blx	r3
   1550e:	0003      	movs	r3, r0
		return false;
   15510:	2000      	movs	r0, #0
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   15512:	2bfa      	cmp	r3, #250	; 0xfa
   15514:	d87e      	bhi.n	15614 <rename_to_unique+0x158>
	p = strrchr(file_path_name, '.');
   15516:	212e      	movs	r1, #46	; 0x2e
   15518:	0030      	movs	r0, r6
   1551a:	4b45      	ldr	r3, [pc, #276]	; (15630 <rename_to_unique+0x174>)
   1551c:	4798      	blx	r3
   1551e:	1e05      	subs	r5, r0, #0
	if (p != NULL) {
   15520:	d039      	beq.n	15596 <rename_to_unique+0xda>
		ext_len = strlen(p);
   15522:	4b42      	ldr	r3, [pc, #264]	; (1562c <rename_to_unique+0x170>)
   15524:	4798      	blx	r3
   15526:	0007      	movs	r7, r0
   15528:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   1552a:	2c07      	cmp	r4, #7
   1552c:	d820      	bhi.n	15570 <rename_to_unique+0xb4>
			strcpy(ext, p);
   1552e:	0029      	movs	r1, r5
   15530:	a806      	add	r0, sp, #24
   15532:	4b40      	ldr	r3, [pc, #256]	; (15634 <rename_to_unique+0x178>)
   15534:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   15536:	0030      	movs	r0, r6
   15538:	4b3c      	ldr	r3, [pc, #240]	; (1562c <rename_to_unique+0x170>)
   1553a:	4798      	blx	r3
   1553c:	043f      	lsls	r7, r7, #16
   1553e:	0c3f      	lsrs	r7, r7, #16
   15540:	1bc7      	subs	r7, r0, r7
   15542:	2ff6      	cmp	r7, #246	; 0xf6
   15544:	d909      	bls.n	1555a <rename_to_unique+0x9e>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   15546:	25f6      	movs	r5, #246	; 0xf6
   15548:	1b2d      	subs	r5, r5, r4
   1554a:	b2ad      	uxth	r5, r5
				strncpy(name, file_path_name, name_len);
   1554c:	002a      	movs	r2, r5
   1554e:	0031      	movs	r1, r6
   15550:	a809      	add	r0, sp, #36	; 0x24
   15552:	4b39      	ldr	r3, [pc, #228]	; (15638 <rename_to_unique+0x17c>)
   15554:	4798      	blx	r3
			valid_ext = true;
   15556:	2401      	movs	r4, #1
   15558:	e011      	b.n	1557e <rename_to_unique+0xc2>
				name_len = (p - file_path_name);
   1555a:	9b01      	ldr	r3, [sp, #4]
   1555c:	1aea      	subs	r2, r5, r3
   1555e:	b295      	uxth	r5, r2
				strncpy(name, file_path_name, name_len);
   15560:	0412      	lsls	r2, r2, #16
   15562:	0c12      	lsrs	r2, r2, #16
   15564:	0019      	movs	r1, r3
   15566:	a809      	add	r0, sp, #36	; 0x24
   15568:	4b33      	ldr	r3, [pc, #204]	; (15638 <rename_to_unique+0x17c>)
   1556a:	4798      	blx	r3
			valid_ext = true;
   1556c:	2401      	movs	r4, #1
   1556e:	e006      	b.n	1557e <rename_to_unique+0xc2>
			strncpy(name, file_path_name, name_len);
   15570:	22f6      	movs	r2, #246	; 0xf6
   15572:	9901      	ldr	r1, [sp, #4]
   15574:	a809      	add	r0, sp, #36	; 0x24
   15576:	4b30      	ldr	r3, [pc, #192]	; (15638 <rename_to_unique+0x17c>)
   15578:	4798      	blx	r3
	bool valid_ext = false;
   1557a:	2400      	movs	r4, #0
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1557c:	25f6      	movs	r5, #246	; 0xf6
	name[name_len++] = '-';
   1557e:	1c6e      	adds	r6, r5, #1
   15580:	b2b6      	uxth	r6, r6
   15582:	222d      	movs	r2, #45	; 0x2d
   15584:	ab09      	add	r3, sp, #36	; 0x24
   15586:	555a      	strb	r2, [r3, r5]
   15588:	2501      	movs	r5, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   1558a:	1cf3      	adds	r3, r6, #3
   1558c:	aa09      	add	r2, sp, #36	; 0x24
   1558e:	4694      	mov	ip, r2
   15590:	4463      	add	r3, ip
   15592:	9302      	str	r3, [sp, #8]
   15594:	e019      	b.n	155ca <rename_to_unique+0x10e>
		strncpy(name, file_path_name, name_len);
   15596:	22f6      	movs	r2, #246	; 0xf6
   15598:	9901      	ldr	r1, [sp, #4]
   1559a:	a809      	add	r0, sp, #36	; 0x24
   1559c:	4b26      	ldr	r3, [pc, #152]	; (15638 <rename_to_unique+0x17c>)
   1559e:	4798      	blx	r3
	bool valid_ext = false;
   155a0:	2400      	movs	r4, #0
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   155a2:	25f6      	movs	r5, #246	; 0xf6
   155a4:	e7eb      	b.n	1557e <rename_to_unique+0xc2>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   155a6:	4f1e      	ldr	r7, [pc, #120]	; (15620 <rename_to_unique+0x164>)
   155a8:	2200      	movs	r2, #0
   155aa:	a909      	add	r1, sp, #36	; 0x24
   155ac:	0038      	movs	r0, r7
   155ae:	4b1d      	ldr	r3, [pc, #116]	; (15624 <rename_to_unique+0x168>)
   155b0:	4798      	blx	r3
   155b2:	4683      	mov	fp, r0
	f_close(&file_object);
   155b4:	0038      	movs	r0, r7
   155b6:	4b1c      	ldr	r3, [pc, #112]	; (15628 <rename_to_unique+0x16c>)
   155b8:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
   155ba:	465b      	mov	r3, fp
   155bc:	2b00      	cmp	r3, #0
   155be:	d116      	bne.n	155ee <rename_to_unique+0x132>
   155c0:	3501      	adds	r5, #1
	for (i = 1; i < count; i++) {
   155c2:	4b1e      	ldr	r3, [pc, #120]	; (1563c <rename_to_unique+0x180>)
   155c4:	b2aa      	uxth	r2, r5
   155c6:	429a      	cmp	r2, r3
   155c8:	d81d      	bhi.n	15606 <rename_to_unique+0x14a>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   155ca:	002a      	movs	r2, r5
   155cc:	491c      	ldr	r1, [pc, #112]	; (15640 <rename_to_unique+0x184>)
   155ce:	a805      	add	r0, sp, #20
   155d0:	4b1c      	ldr	r3, [pc, #112]	; (15644 <rename_to_unique+0x188>)
   155d2:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
   155d4:	ab09      	add	r3, sp, #36	; 0x24
   155d6:	1998      	adds	r0, r3, r6
   155d8:	2203      	movs	r2, #3
   155da:	a905      	add	r1, sp, #20
   155dc:	4b16      	ldr	r3, [pc, #88]	; (15638 <rename_to_unique+0x17c>)
   155de:	4798      	blx	r3
		if (valid_ext) {
   155e0:	2c00      	cmp	r4, #0
   155e2:	d0e0      	beq.n	155a6 <rename_to_unique+0xea>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
   155e4:	a906      	add	r1, sp, #24
   155e6:	9802      	ldr	r0, [sp, #8]
   155e8:	4b12      	ldr	r3, [pc, #72]	; (15634 <rename_to_unique+0x178>)
   155ea:	4798      	blx	r3
   155ec:	e7db      	b.n	155a6 <rename_to_unique+0xea>
			memset(file_path_name, 0, max_len);
   155ee:	9a03      	ldr	r2, [sp, #12]
   155f0:	2100      	movs	r1, #0
   155f2:	9c01      	ldr	r4, [sp, #4]
   155f4:	0020      	movs	r0, r4
   155f6:	4b09      	ldr	r3, [pc, #36]	; (1561c <rename_to_unique+0x160>)
   155f8:	4798      	blx	r3
			strcpy(file_path_name, name);
   155fa:	a909      	add	r1, sp, #36	; 0x24
   155fc:	0020      	movs	r0, r4
   155fe:	4b0d      	ldr	r3, [pc, #52]	; (15634 <rename_to_unique+0x178>)
   15600:	4798      	blx	r3
			return true;
   15602:	2001      	movs	r0, #1
   15604:	e006      	b.n	15614 <rename_to_unique+0x158>
	return false;
   15606:	2000      	movs	r0, #0
   15608:	e004      	b.n	15614 <rename_to_unique+0x158>
		return false;
   1560a:	2000      	movs	r0, #0
   1560c:	e002      	b.n	15614 <rename_to_unique+0x158>
		return true;
   1560e:	2001      	movs	r0, #1
   15610:	e000      	b.n	15614 <rename_to_unique+0x158>
   15612:	2001      	movs	r0, #1
}
   15614:	b048      	add	sp, #288	; 0x120
   15616:	bc04      	pop	{r2}
   15618:	4693      	mov	fp, r2
   1561a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1561c:	000165ff 	.word	0x000165ff
   15620:	20000af0 	.word	0x20000af0
   15624:	0001208d 	.word	0x0001208d
   15628:	0001268d 	.word	0x0001268d
   1562c:	00016b5b 	.word	0x00016b5b
   15630:	00016bb5 	.word	0x00016bb5
   15634:	00016b11 	.word	0x00016b11
   15638:	00016b8b 	.word	0x00016b8b
   1563c:	000003e7 	.word	0x000003e7
   15640:	0001aca8 	.word	0x0001aca8
   15644:	00016ab9 	.word	0x00016ab9

00015648 <store_file_packet>:
{
   15648:	b5f0      	push	{r4, r5, r6, r7, lr}
   1564a:	b083      	sub	sp, #12
   1564c:	0005      	movs	r5, r0
   1564e:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
   15650:	2800      	cmp	r0, #0
   15652:	d04c      	beq.n	156ee <store_file_packet+0xa6>
   15654:	2900      	cmp	r1, #0
   15656:	d04a      	beq.n	156ee <store_file_packet+0xa6>
	return ((down_state & mask) != 0);
   15658:	4b3c      	ldr	r3, [pc, #240]	; (1574c <store_file_packet+0x104>)
   1565a:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
   1565c:	071b      	lsls	r3, r3, #28
   1565e:	d432      	bmi.n	156c6 <store_file_packet+0x7e>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15660:	4b3b      	ldr	r3, [pc, #236]	; (15750 <store_file_packet+0x108>)
   15662:	2230      	movs	r2, #48	; 0x30
   15664:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
   15666:	320a      	adds	r2, #10
   15668:	705a      	strb	r2, [r3, #1]
		cp = (char *)(desired_url + strlen(desired_url));
   1566a:	4b3a      	ldr	r3, [pc, #232]	; (15754 <store_file_packet+0x10c>)
   1566c:	681c      	ldr	r4, [r3, #0]
   1566e:	0020      	movs	r0, r4
   15670:	4b39      	ldr	r3, [pc, #228]	; (15758 <store_file_packet+0x110>)
   15672:	4798      	blx	r3
   15674:	1824      	adds	r4, r4, r0
		while (*cp != '/') {
   15676:	7823      	ldrb	r3, [r4, #0]
   15678:	2b2f      	cmp	r3, #47	; 0x2f
   1567a:	d003      	beq.n	15684 <store_file_packet+0x3c>
			cp--;
   1567c:	3c01      	subs	r4, #1
		while (*cp != '/') {
   1567e:	7823      	ldrb	r3, [r4, #0]
   15680:	2b2f      	cmp	r3, #47	; 0x2f
   15682:	d1fb      	bne.n	1567c <store_file_packet+0x34>
		if (strlen(cp) > 1) {
   15684:	0020      	movs	r0, r4
   15686:	4b34      	ldr	r3, [pc, #208]	; (15758 <store_file_packet+0x110>)
   15688:	4798      	blx	r3
   1568a:	2801      	cmp	r0, #1
   1568c:	d934      	bls.n	156f8 <store_file_packet+0xb0>
			cp++;
   1568e:	1c61      	adds	r1, r4, #1
			strcpy(&save_file_name[2], cp);
   15690:	4c2f      	ldr	r4, [pc, #188]	; (15750 <store_file_packet+0x108>)
   15692:	1ca0      	adds	r0, r4, #2
   15694:	4b31      	ldr	r3, [pc, #196]	; (1575c <store_file_packet+0x114>)
   15696:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   15698:	4f31      	ldr	r7, [pc, #196]	; (15760 <store_file_packet+0x118>)
   1569a:	22fa      	movs	r2, #250	; 0xfa
   1569c:	0021      	movs	r1, r4
   1569e:	0038      	movs	r0, r7
   156a0:	4b30      	ldr	r3, [pc, #192]	; (15764 <store_file_packet+0x11c>)
   156a2:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
   156a4:	0021      	movs	r1, r4
   156a6:	4830      	ldr	r0, [pc, #192]	; (15768 <store_file_packet+0x120>)
   156a8:	4b30      	ldr	r3, [pc, #192]	; (1576c <store_file_packet+0x124>)
   156aa:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   156ac:	220a      	movs	r2, #10
   156ae:	0021      	movs	r1, r4
   156b0:	0038      	movs	r0, r7
   156b2:	4b2f      	ldr	r3, [pc, #188]	; (15770 <store_file_packet+0x128>)
   156b4:	4798      	blx	r3
		if (ret != FR_OK) {
   156b6:	2800      	cmp	r0, #0
   156b8:	d125      	bne.n	15706 <store_file_packet+0xbe>
		received_file_size = 0;
   156ba:	2200      	movs	r2, #0
   156bc:	4b2d      	ldr	r3, [pc, #180]	; (15774 <store_file_packet+0x12c>)
   156be:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
   156c0:	2008      	movs	r0, #8
   156c2:	4b2d      	ldr	r3, [pc, #180]	; (15778 <store_file_packet+0x130>)
   156c4:	4798      	blx	r3
		UINT wsize = 0;
   156c6:	2300      	movs	r3, #0
   156c8:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
   156ca:	ab01      	add	r3, sp, #4
   156cc:	0032      	movs	r2, r6
   156ce:	0029      	movs	r1, r5
   156d0:	4823      	ldr	r0, [pc, #140]	; (15760 <store_file_packet+0x118>)
   156d2:	4c2a      	ldr	r4, [pc, #168]	; (1577c <store_file_packet+0x134>)
   156d4:	47a0      	blx	r4
		if (ret != FR_OK) {
   156d6:	2800      	cmp	r0, #0
   156d8:	d01a      	beq.n	15710 <store_file_packet+0xc8>
			f_close(&file_object);
   156da:	4821      	ldr	r0, [pc, #132]	; (15760 <store_file_packet+0x118>)
   156dc:	4b28      	ldr	r3, [pc, #160]	; (15780 <store_file_packet+0x138>)
   156de:	4798      	blx	r3
			add_state(CANCELED);
   156e0:	2020      	movs	r0, #32
   156e2:	4b25      	ldr	r3, [pc, #148]	; (15778 <store_file_packet+0x130>)
   156e4:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
   156e6:	4827      	ldr	r0, [pc, #156]	; (15784 <store_file_packet+0x13c>)
   156e8:	4b27      	ldr	r3, [pc, #156]	; (15788 <store_file_packet+0x140>)
   156ea:	4798      	blx	r3
			return;
   156ec:	e002      	b.n	156f4 <store_file_packet+0xac>
		printf("store_file_packet: empty data.\r\n");
   156ee:	4827      	ldr	r0, [pc, #156]	; (1578c <store_file_packet+0x144>)
   156f0:	4b25      	ldr	r3, [pc, #148]	; (15788 <store_file_packet+0x140>)
   156f2:	4798      	blx	r3
}
   156f4:	b003      	add	sp, #12
   156f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
   156f8:	4825      	ldr	r0, [pc, #148]	; (15790 <store_file_packet+0x148>)
   156fa:	4b23      	ldr	r3, [pc, #140]	; (15788 <store_file_packet+0x140>)
   156fc:	4798      	blx	r3
			add_state(CANCELED);
   156fe:	2020      	movs	r0, #32
   15700:	4b1d      	ldr	r3, [pc, #116]	; (15778 <store_file_packet+0x130>)
   15702:	4798      	blx	r3
			return;
   15704:	e7f6      	b.n	156f4 <store_file_packet+0xac>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
   15706:	0001      	movs	r1, r0
   15708:	4822      	ldr	r0, [pc, #136]	; (15794 <store_file_packet+0x14c>)
   1570a:	4b18      	ldr	r3, [pc, #96]	; (1576c <store_file_packet+0x124>)
   1570c:	4798      	blx	r3
			return;
   1570e:	e7f1      	b.n	156f4 <store_file_packet+0xac>
		received_file_size += wsize;
   15710:	4c18      	ldr	r4, [pc, #96]	; (15774 <store_file_packet+0x12c>)
   15712:	6823      	ldr	r3, [r4, #0]
   15714:	9a01      	ldr	r2, [sp, #4]
   15716:	4694      	mov	ip, r2
   15718:	4463      	add	r3, ip
   1571a:	0019      	movs	r1, r3
   1571c:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   1571e:	4d1e      	ldr	r5, [pc, #120]	; (15798 <store_file_packet+0x150>)
   15720:	682a      	ldr	r2, [r5, #0]
   15722:	481e      	ldr	r0, [pc, #120]	; (1579c <store_file_packet+0x154>)
   15724:	4b11      	ldr	r3, [pc, #68]	; (1576c <store_file_packet+0x124>)
   15726:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
   15728:	6822      	ldr	r2, [r4, #0]
   1572a:	682b      	ldr	r3, [r5, #0]
   1572c:	429a      	cmp	r2, r3
   1572e:	d3e1      	bcc.n	156f4 <store_file_packet+0xac>
			f_close(&file_object);
   15730:	480b      	ldr	r0, [pc, #44]	; (15760 <store_file_packet+0x118>)
   15732:	4b13      	ldr	r3, [pc, #76]	; (15780 <store_file_packet+0x138>)
   15734:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
   15736:	481a      	ldr	r0, [pc, #104]	; (157a0 <store_file_packet+0x158>)
   15738:	4b13      	ldr	r3, [pc, #76]	; (15788 <store_file_packet+0x140>)
   1573a:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
   1573c:	2280      	movs	r2, #128	; 0x80
   1573e:	0412      	lsls	r2, r2, #16
   15740:	4b18      	ldr	r3, [pc, #96]	; (157a4 <store_file_packet+0x15c>)
   15742:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
   15744:	2010      	movs	r0, #16
   15746:	4b0c      	ldr	r3, [pc, #48]	; (15778 <store_file_packet+0x130>)
   15748:	4798      	blx	r3
			return;
   1574a:	e7d3      	b.n	156f4 <store_file_packet+0xac>
   1574c:	200008bd 	.word	0x200008bd
   15750:	2000005c 	.word	0x2000005c
   15754:	200008b8 	.word	0x200008b8
   15758:	00016b5b 	.word	0x00016b5b
   1575c:	00016b11 	.word	0x00016b11
   15760:	20000af0 	.word	0x20000af0
   15764:	000154bd 	.word	0x000154bd
   15768:	0001add8 	.word	0x0001add8
   1576c:	00016761 	.word	0x00016761
   15770:	0001208d 	.word	0x0001208d
   15774:	20000f54 	.word	0x20000f54
   15778:	00015141 	.word	0x00015141
   1577c:	000123c9 	.word	0x000123c9
   15780:	0001268d 	.word	0x0001268d
   15784:	0001ae74 	.word	0x0001ae74
   15788:	0001687d 	.word	0x0001687d
   1578c:	0001adb8 	.word	0x0001adb8
   15790:	0001ae00 	.word	0x0001ae00
   15794:	0001ae40 	.word	0x0001ae40
   15798:	20000b14 	.word	0x20000b14
   1579c:	0001aeb0 	.word	0x0001aeb0
   157a0:	0001aee4 	.word	0x0001aee4
   157a4:	41004400 	.word	0x41004400

000157a8 <http_client_callback>:
{
   157a8:	b510      	push	{r4, lr}
   157aa:	0014      	movs	r4, r2
	switch (type) {
   157ac:	2904      	cmp	r1, #4
   157ae:	d806      	bhi.n	157be <http_client_callback+0x16>
   157b0:	0089      	lsls	r1, r1, #2
   157b2:	4b2a      	ldr	r3, [pc, #168]	; (1585c <http_client_callback+0xb4>)
   157b4:	585b      	ldr	r3, [r3, r1]
   157b6:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
   157b8:	4829      	ldr	r0, [pc, #164]	; (15860 <http_client_callback+0xb8>)
   157ba:	4b2a      	ldr	r3, [pc, #168]	; (15864 <http_client_callback+0xbc>)
   157bc:	4798      	blx	r3
}
   157be:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
   157c0:	4829      	ldr	r0, [pc, #164]	; (15868 <http_client_callback+0xc0>)
   157c2:	4b28      	ldr	r3, [pc, #160]	; (15864 <http_client_callback+0xbc>)
   157c4:	4798      	blx	r3
		add_state(GET_REQUESTED);
   157c6:	2004      	movs	r0, #4
   157c8:	4b28      	ldr	r3, [pc, #160]	; (1586c <http_client_callback+0xc4>)
   157ca:	4798      	blx	r3
		break;
   157cc:	e7f7      	b.n	157be <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
   157ce:	8811      	ldrh	r1, [r2, #0]
   157d0:	6852      	ldr	r2, [r2, #4]
   157d2:	4827      	ldr	r0, [pc, #156]	; (15870 <http_client_callback+0xc8>)
   157d4:	4b27      	ldr	r3, [pc, #156]	; (15874 <http_client_callback+0xcc>)
   157d6:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
   157d8:	8823      	ldrh	r3, [r4, #0]
   157da:	2bc8      	cmp	r3, #200	; 0xc8
   157dc:	d10f      	bne.n	157fe <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
   157de:	6861      	ldr	r1, [r4, #4]
   157e0:	4b25      	ldr	r3, [pc, #148]	; (15878 <http_client_callback+0xd0>)
   157e2:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
   157e4:	2200      	movs	r2, #0
   157e6:	4b25      	ldr	r3, [pc, #148]	; (1587c <http_client_callback+0xd4>)
   157e8:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   157ea:	4b25      	ldr	r3, [pc, #148]	; (15880 <http_client_callback+0xd8>)
   157ec:	4299      	cmp	r1, r3
   157ee:	d8e6      	bhi.n	157be <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
   157f0:	68a0      	ldr	r0, [r4, #8]
   157f2:	4b24      	ldr	r3, [pc, #144]	; (15884 <http_client_callback+0xdc>)
   157f4:	4798      	blx	r3
			add_state(COMPLETED);
   157f6:	2010      	movs	r0, #16
   157f8:	4b1c      	ldr	r3, [pc, #112]	; (1586c <http_client_callback+0xc4>)
   157fa:	4798      	blx	r3
   157fc:	e7df      	b.n	157be <http_client_callback+0x16>
			add_state(CANCELED);
   157fe:	2020      	movs	r0, #32
   15800:	4b1a      	ldr	r3, [pc, #104]	; (1586c <http_client_callback+0xc4>)
   15802:	4798      	blx	r3
			return;
   15804:	e7db      	b.n	157be <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   15806:	6811      	ldr	r1, [r2, #0]
   15808:	6850      	ldr	r0, [r2, #4]
   1580a:	4b1e      	ldr	r3, [pc, #120]	; (15884 <http_client_callback+0xdc>)
   1580c:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
   1580e:	7a23      	ldrb	r3, [r4, #8]
   15810:	2b00      	cmp	r3, #0
   15812:	d0d4      	beq.n	157be <http_client_callback+0x16>
			add_state(COMPLETED);
   15814:	2010      	movs	r0, #16
   15816:	4b15      	ldr	r3, [pc, #84]	; (1586c <http_client_callback+0xc4>)
   15818:	4798      	blx	r3
   1581a:	e7d0      	b.n	157be <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   1581c:	6811      	ldr	r1, [r2, #0]
   1581e:	481a      	ldr	r0, [pc, #104]	; (15888 <http_client_callback+0xe0>)
   15820:	4b14      	ldr	r3, [pc, #80]	; (15874 <http_client_callback+0xcc>)
   15822:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
   15824:	6823      	ldr	r3, [r4, #0]
   15826:	330b      	adds	r3, #11
   15828:	d1c9      	bne.n	157be <http_client_callback+0x16>
	return ((down_state & mask) != 0);
   1582a:	4b18      	ldr	r3, [pc, #96]	; (1588c <http_client_callback+0xe4>)
   1582c:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
   1582e:	071b      	lsls	r3, r3, #28
   15830:	d406      	bmi.n	15840 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
   15832:	4b16      	ldr	r3, [pc, #88]	; (1588c <http_client_callback+0xe4>)
   15834:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   15836:	075a      	lsls	r2, r3, #29
   15838:	d40b      	bmi.n	15852 <http_client_callback+0xaa>
			start_download();
   1583a:	4b15      	ldr	r3, [pc, #84]	; (15890 <http_client_callback+0xe8>)
   1583c:	4798      	blx	r3
   1583e:	e7be      	b.n	157be <http_client_callback+0x16>
				f_close(&file_object);
   15840:	4814      	ldr	r0, [pc, #80]	; (15894 <http_client_callback+0xec>)
   15842:	4b15      	ldr	r3, [pc, #84]	; (15898 <http_client_callback+0xf0>)
   15844:	4798      	blx	r3
	down_state &= ~mask;
   15846:	4a11      	ldr	r2, [pc, #68]	; (1588c <http_client_callback+0xe4>)
   15848:	7813      	ldrb	r3, [r2, #0]
   1584a:	2108      	movs	r1, #8
   1584c:	438b      	bics	r3, r1
   1584e:	7013      	strb	r3, [r2, #0]
   15850:	e7ef      	b.n	15832 <http_client_callback+0x8a>
   15852:	2204      	movs	r2, #4
   15854:	4393      	bics	r3, r2
   15856:	4a0d      	ldr	r2, [pc, #52]	; (1588c <http_client_callback+0xe4>)
   15858:	7013      	strb	r3, [r2, #0]
   1585a:	e7ee      	b.n	1583a <http_client_callback+0x92>
   1585c:	0001a34c 	.word	0x0001a34c
   15860:	0001a404 	.word	0x0001a404
   15864:	0001687d 	.word	0x0001687d
   15868:	0001a43c 	.word	0x0001a43c
   1586c:	00015141 	.word	0x00015141
   15870:	0001a468 	.word	0x0001a468
   15874:	00016761 	.word	0x00016761
   15878:	20000b14 	.word	0x20000b14
   1587c:	20000f54 	.word	0x20000f54
   15880:	000005a6 	.word	0x000005a6
   15884:	00015649 	.word	0x00015649
   15888:	0001a4a4 	.word	0x0001a4a4
   1588c:	200008bd 	.word	0x200008bd
   15890:	000152c9 	.word	0x000152c9
   15894:	20000af0 	.word	0x20000af0
   15898:	0001268d 	.word	0x0001268d

0001589c <wifi_cb>:
{
   1589c:	b510      	push	{r4, lr}
   1589e:	b082      	sub	sp, #8
	switch (u8MsgType) {
   158a0:	282c      	cmp	r0, #44	; 0x2c
   158a2:	d003      	beq.n	158ac <wifi_cb+0x10>
   158a4:	2832      	cmp	r0, #50	; 0x32
   158a6:	d035      	beq.n	15914 <wifi_cb+0x78>
}
   158a8:	b002      	add	sp, #8
   158aa:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   158ac:	780b      	ldrb	r3, [r1, #0]
   158ae:	2b01      	cmp	r3, #1
   158b0:	d01c      	beq.n	158ec <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   158b2:	2b00      	cmp	r3, #0
   158b4:	d1f8      	bne.n	158a8 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   158b6:	4826      	ldr	r0, [pc, #152]	; (15950 <wifi_cb+0xb4>)
   158b8:	4b26      	ldr	r3, [pc, #152]	; (15954 <wifi_cb+0xb8>)
   158ba:	4798      	blx	r3
	down_state &= ~mask;
   158bc:	4a26      	ldr	r2, [pc, #152]	; (15958 <wifi_cb+0xbc>)
   158be:	7813      	ldrb	r3, [r2, #0]
   158c0:	2102      	movs	r1, #2
   158c2:	438b      	bics	r3, r1
   158c4:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
   158c6:	071b      	lsls	r3, r3, #28
   158c8:	d416      	bmi.n	158f8 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
   158ca:	4b23      	ldr	r3, [pc, #140]	; (15958 <wifi_cb+0xbc>)
   158cc:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
   158ce:	075a      	lsls	r2, r3, #29
   158d0:	d41b      	bmi.n	1590a <wifi_cb+0x6e>
			mqtt_disconnect(&mqtt_inst, 1);
   158d2:	2101      	movs	r1, #1
   158d4:	4821      	ldr	r0, [pc, #132]	; (1595c <wifi_cb+0xc0>)
   158d6:	4b22      	ldr	r3, [pc, #136]	; (15960 <wifi_cb+0xc4>)
   158d8:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
   158da:	23ff      	movs	r3, #255	; 0xff
   158dc:	9300      	str	r3, [sp, #0]
   158de:	4b21      	ldr	r3, [pc, #132]	; (15964 <wifi_cb+0xc8>)
   158e0:	2202      	movs	r2, #2
   158e2:	2112      	movs	r1, #18
   158e4:	4820      	ldr	r0, [pc, #128]	; (15968 <wifi_cb+0xcc>)
   158e6:	4c21      	ldr	r4, [pc, #132]	; (1596c <wifi_cb+0xd0>)
   158e8:	47a0      	blx	r4
   158ea:	e7dd      	b.n	158a8 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
   158ec:	4820      	ldr	r0, [pc, #128]	; (15970 <wifi_cb+0xd4>)
   158ee:	4b19      	ldr	r3, [pc, #100]	; (15954 <wifi_cb+0xb8>)
   158f0:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
   158f2:	4b20      	ldr	r3, [pc, #128]	; (15974 <wifi_cb+0xd8>)
   158f4:	4798      	blx	r3
   158f6:	e7d7      	b.n	158a8 <wifi_cb+0xc>
				f_close(&file_object);
   158f8:	481f      	ldr	r0, [pc, #124]	; (15978 <wifi_cb+0xdc>)
   158fa:	4b20      	ldr	r3, [pc, #128]	; (1597c <wifi_cb+0xe0>)
   158fc:	4798      	blx	r3
	down_state &= ~mask;
   158fe:	4a16      	ldr	r2, [pc, #88]	; (15958 <wifi_cb+0xbc>)
   15900:	7813      	ldrb	r3, [r2, #0]
   15902:	2108      	movs	r1, #8
   15904:	438b      	bics	r3, r1
   15906:	7013      	strb	r3, [r2, #0]
   15908:	e7df      	b.n	158ca <wifi_cb+0x2e>
   1590a:	2204      	movs	r2, #4
   1590c:	4393      	bics	r3, r2
   1590e:	4a12      	ldr	r2, [pc, #72]	; (15958 <wifi_cb+0xbc>)
   15910:	7013      	strb	r3, [r2, #0]
   15912:	e7de      	b.n	158d2 <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
   15914:	788b      	ldrb	r3, [r1, #2]
   15916:	784a      	ldrb	r2, [r1, #1]
   15918:	7808      	ldrb	r0, [r1, #0]
   1591a:	78c9      	ldrb	r1, [r1, #3]
   1591c:	9100      	str	r1, [sp, #0]
   1591e:	0001      	movs	r1, r0
   15920:	4817      	ldr	r0, [pc, #92]	; (15980 <wifi_cb+0xe4>)
   15922:	4c18      	ldr	r4, [pc, #96]	; (15984 <wifi_cb+0xe8>)
   15924:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
   15926:	2002      	movs	r0, #2
   15928:	4b17      	ldr	r3, [pc, #92]	; (15988 <wifi_cb+0xec>)
   1592a:	4798      	blx	r3
		if(do_download_flag == 1)
   1592c:	4b17      	ldr	r3, [pc, #92]	; (1598c <wifi_cb+0xf0>)
   1592e:	781b      	ldrb	r3, [r3, #0]
   15930:	2b01      	cmp	r3, #1
   15932:	d009      	beq.n	15948 <wifi_cb+0xac>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   15934:	4916      	ldr	r1, [pc, #88]	; (15990 <wifi_cb+0xf4>)
   15936:	4809      	ldr	r0, [pc, #36]	; (1595c <wifi_cb+0xc0>)
   15938:	4b16      	ldr	r3, [pc, #88]	; (15994 <wifi_cb+0xf8>)
   1593a:	4798      	blx	r3
   1593c:	2800      	cmp	r0, #0
   1593e:	d0b3      	beq.n	158a8 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
   15940:	4815      	ldr	r0, [pc, #84]	; (15998 <wifi_cb+0xfc>)
   15942:	4b04      	ldr	r3, [pc, #16]	; (15954 <wifi_cb+0xb8>)
   15944:	4798      	blx	r3
}
   15946:	e7af      	b.n	158a8 <wifi_cb+0xc>
			start_download();
   15948:	4b14      	ldr	r3, [pc, #80]	; (1599c <wifi_cb+0x100>)
   1594a:	4798      	blx	r3
   1594c:	e7ac      	b.n	158a8 <wifi_cb+0xc>
   1594e:	46c0      	nop			; (mov r8, r8)
   15950:	0001af38 	.word	0x0001af38
   15954:	0001687d 	.word	0x0001687d
   15958:	200008bd 	.word	0x200008bd
   1595c:	20000b1c 	.word	0x20000b1c
   15960:	00013475 	.word	0x00013475
   15964:	0001af58 	.word	0x0001af58
   15968:	0001af68 	.word	0x0001af68
   1596c:	0000c19d 	.word	0x0000c19d
   15970:	0001af18 	.word	0x0001af18
   15974:	0000c1b9 	.word	0x0000c1b9
   15978:	20000af0 	.word	0x20000af0
   1597c:	0001268d 	.word	0x0001268d
   15980:	0001af7c 	.word	0x0001af7c
   15984:	00016761 	.word	0x00016761
   15988:	00015141 	.word	0x00015141
   1598c:	200008bc 	.word	0x200008bc
   15990:	0001a838 	.word	0x0001a838
   15994:	000133b1 	.word	0x000133b1
   15998:	0001afa4 	.word	0x0001afa4
   1599c:	000152c9 	.word	0x000152c9

000159a0 <configure_extint_channel>:
{
   159a0:	b510      	push	{r4, lr}
    extint_chan_get_config_defaults(&config_extint_chan);
   159a2:	4c08      	ldr	r4, [pc, #32]	; (159c4 <configure_extint_channel+0x24>)
   159a4:	0020      	movs	r0, r4
   159a6:	4b08      	ldr	r3, [pc, #32]	; (159c8 <configure_extint_channel+0x28>)
   159a8:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
   159aa:	2337      	movs	r3, #55	; 0x37
   159ac:	6023      	str	r3, [r4, #0]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
   159ae:	2300      	movs	r3, #0
   159b0:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
   159b2:	3301      	adds	r3, #1
   159b4:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   159b6:	3301      	adds	r3, #1
   159b8:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   159ba:	0021      	movs	r1, r4
   159bc:	2007      	movs	r0, #7
   159be:	4b03      	ldr	r3, [pc, #12]	; (159cc <configure_extint_channel+0x2c>)
   159c0:	4798      	blx	r3
}
   159c2:	bd10      	pop	{r4, pc}
   159c4:	20001324 	.word	0x20001324
   159c8:	0000e34d 	.word	0x0000e34d
   159cc:	0000e361 	.word	0x0000e361

000159d0 <configure_extint_callbacks>:
{
   159d0:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
   159d2:	2200      	movs	r2, #0
   159d4:	2107      	movs	r1, #7
   159d6:	4804      	ldr	r0, [pc, #16]	; (159e8 <configure_extint_callbacks+0x18>)
   159d8:	4b04      	ldr	r3, [pc, #16]	; (159ec <configure_extint_callbacks+0x1c>)
   159da:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
   159dc:	2100      	movs	r1, #0
   159de:	2007      	movs	r0, #7
   159e0:	4b03      	ldr	r3, [pc, #12]	; (159f0 <configure_extint_callbacks+0x20>)
   159e2:	4798      	blx	r3
}
   159e4:	bd10      	pop	{r4, pc}
   159e6:	46c0      	nop			; (mov r8, r8)
   159e8:	00015151 	.word	0x00015151
   159ec:	0000e209 	.word	0x0000e209
   159f0:	0000e235 	.word	0x0000e235

000159f4 <configure_nvm>:

/**
* NVM CONFIGURATION
*/
void configure_nvm(void)
{
   159f4:	b510      	push	{r4, lr}
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
   159f6:	4807      	ldr	r0, [pc, #28]	; (15a14 <configure_nvm+0x20>)
   159f8:	2200      	movs	r2, #0
   159fa:	7002      	strb	r2, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
   159fc:	4b06      	ldr	r3, [pc, #24]	; (15a18 <configure_nvm+0x24>)
   159fe:	685b      	ldr	r3, [r3, #4]
   15a00:	06db      	lsls	r3, r3, #27
   15a02:	0f1b      	lsrs	r3, r3, #28
   15a04:	7083      	strb	r3, [r0, #2]
	config->disable_cache     = false;
   15a06:	70c2      	strb	r2, [r0, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
   15a08:	7102      	strb	r2, [r0, #4]
	nvm_get_config_defaults(&nvm_cfg);	
	nvm_cfg.manual_page_write = false;
   15a0a:	7042      	strb	r2, [r0, #1]
	nvm_set_config(&nvm_cfg);
   15a0c:	4b03      	ldr	r3, [pc, #12]	; (15a1c <configure_nvm+0x28>)
   15a0e:	4798      	blx	r3
}
   15a10:	bd10      	pop	{r4, pc}
   15a12:	46c0      	nop			; (mov r8, r8)
   15a14:	20001198 	.word	0x20001198
   15a18:	41004000 	.word	0x41004000
   15a1c:	0000e3d9 	.word	0x0000e3d9

00015a20 <otafu_download_operation>:
*/


// MAIN HTTP INTERACTION FOR DOWNLOAD
int otafu_download_operation(int file_type)
{
   15a20:	b570      	push	{r4, r5, r6, lr}
	if (file_type == VERSION)
   15a22:	2801      	cmp	r0, #1
   15a24:	d022      	beq.n	15a6c <otafu_download_operation+0x4c>
	{
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Version.txt";	
	}
	else if (file_type == FIRMWARE)
   15a26:	2802      	cmp	r0, #2
   15a28:	d024      	beq.n	15a74 <otafu_download_operation+0x54>
	{
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Firmware.bin";	
	}
	else if (file_type == CRC)
   15a2a:	2803      	cmp	r0, #3
   15a2c:	d026      	beq.n	15a7c <otafu_download_operation+0x5c>
	{
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Crc.txt";	
	}
	
	//DOWNLOAD A FILE
	do_download_flag = true;
   15a2e:	2201      	movs	r2, #1
   15a30:	4b14      	ldr	r3, [pc, #80]	; (15a84 <otafu_download_operation+0x64>)
   15a32:	701a      	strb	r2, [r3, #0]

	// Initialize socket module.
	socketInit();
   15a34:	4b14      	ldr	r3, [pc, #80]	; (15a88 <otafu_download_operation+0x68>)
   15a36:	4798      	blx	r3
	// Register socket callback function. 
	registerSocketCallback(socket_cb, resolve_cb);
   15a38:	4914      	ldr	r1, [pc, #80]	; (15a8c <otafu_download_operation+0x6c>)
   15a3a:	4815      	ldr	r0, [pc, #84]	; (15a90 <otafu_download_operation+0x70>)
   15a3c:	4b15      	ldr	r3, [pc, #84]	; (15a94 <otafu_download_operation+0x74>)
   15a3e:	4798      	blx	r3

	//Connect to router. 
// 	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
// 	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);	
// 	 
	start_download();
   15a40:	4b15      	ldr	r3, [pc, #84]	; (15a98 <otafu_download_operation+0x78>)
   15a42:	4798      	blx	r3
	return ((down_state & mask) != 0);
   15a44:	4b15      	ldr	r3, [pc, #84]	; (15a9c <otafu_download_operation+0x7c>)
	
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) 
   15a46:	781b      	ldrb	r3, [r3, #0]
   15a48:	2230      	movs	r2, #48	; 0x30
   15a4a:	421a      	tst	r2, r3
   15a4c:	d10b      	bne.n	15a66 <otafu_download_operation+0x46>
	{
		// Handle pending events from network controller. 
		m2m_wifi_handle_events(NULL);
   15a4e:	4e14      	ldr	r6, [pc, #80]	; (15aa0 <otafu_download_operation+0x80>)
		// Checks the timer timeout. 
		sw_timer_task(&swt_module_inst);
   15a50:	4c14      	ldr	r4, [pc, #80]	; (15aa4 <otafu_download_operation+0x84>)
   15a52:	4d15      	ldr	r5, [pc, #84]	; (15aa8 <otafu_download_operation+0x88>)
		m2m_wifi_handle_events(NULL);
   15a54:	2000      	movs	r0, #0
   15a56:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
   15a58:	0020      	movs	r0, r4
   15a5a:	47a8      	blx	r5
	return ((down_state & mask) != 0);
   15a5c:	4b0f      	ldr	r3, [pc, #60]	; (15a9c <otafu_download_operation+0x7c>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) 
   15a5e:	781b      	ldrb	r3, [r3, #0]
   15a60:	2230      	movs	r2, #48	; 0x30
   15a62:	421a      	tst	r2, r3
   15a64:	d0f6      	beq.n	15a54 <otafu_download_operation+0x34>
	}

	//Disable socket for HTTP Transfer
	socketDeinit();
   15a66:	4b11      	ldr	r3, [pc, #68]	; (15aac <otafu_download_operation+0x8c>)
   15a68:	4798      	blx	r3
}
   15a6a:	bd70      	pop	{r4, r5, r6, pc}
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Version.txt";	
   15a6c:	4a10      	ldr	r2, [pc, #64]	; (15ab0 <otafu_download_operation+0x90>)
   15a6e:	4b11      	ldr	r3, [pc, #68]	; (15ab4 <otafu_download_operation+0x94>)
   15a70:	601a      	str	r2, [r3, #0]
   15a72:	e7dc      	b.n	15a2e <otafu_download_operation+0xe>
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Firmware.bin";	
   15a74:	4a10      	ldr	r2, [pc, #64]	; (15ab8 <otafu_download_operation+0x98>)
   15a76:	4b0f      	ldr	r3, [pc, #60]	; (15ab4 <otafu_download_operation+0x94>)
   15a78:	601a      	str	r2, [r3, #0]
   15a7a:	e7d8      	b.n	15a2e <otafu_download_operation+0xe>
		desired_url = "https://www.seas.upenn.edu/~tghedaoo/Crc.txt";	
   15a7c:	4a0f      	ldr	r2, [pc, #60]	; (15abc <otafu_download_operation+0x9c>)
   15a7e:	4b0d      	ldr	r3, [pc, #52]	; (15ab4 <otafu_download_operation+0x94>)
   15a80:	601a      	str	r2, [r3, #0]
   15a82:	e7d4      	b.n	15a2e <otafu_download_operation+0xe>
   15a84:	200008bc 	.word	0x200008bc
   15a88:	0000d9f5 	.word	0x0000d9f5
   15a8c:	00015281 	.word	0x00015281
   15a90:	000152bd 	.word	0x000152bd
   15a94:	0000da75 	.word	0x0000da75
   15a98:	000152c9 	.word	0x000152c9
   15a9c:	200008bd 	.word	0x200008bd
   15aa0:	0000bf01 	.word	0x0000bf01
   15aa4:	200011a4 	.word	0x200011a4
   15aa8:	000150e9 	.word	0x000150e9
   15aac:	0000da39 	.word	0x0000da39
   15ab0:	0001ab5c 	.word	0x0001ab5c
   15ab4:	200008b8 	.word	0x200008b8
   15ab8:	0001ab90 	.word	0x0001ab90
   15abc:	0001abc4 	.word	0x0001abc4

00015ac0 <otafu_firmware_download>:
}


// Firmware Download > Download the new firmware file and also its crc for successful download verification
int otafu_firmware_download()
{
   15ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ac2:	46ce      	mov	lr, r9
   15ac4:	b500      	push	{lr}
   15ac6:	b082      	sub	sp, #8
	int crc_on_server = 0;
	int crc_downloaded_in_sd_card = 0;
   15ac8:	2300      	movs	r3, #0
   15aca:	9301      	str	r3, [sp, #4]
	printf("otafu_firmware_download: Downloading new firmware ...... \n\r");
   15acc:	4833      	ldr	r0, [pc, #204]	; (15b9c <otafu_firmware_download+0xdc>)
   15ace:	4b34      	ldr	r3, [pc, #208]	; (15ba0 <otafu_firmware_download+0xe0>)
   15ad0:	4798      	blx	r3
	
	// 1. Erase Firmware.bin file from SD card
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15ad2:	4c34      	ldr	r4, [pc, #208]	; (15ba4 <otafu_firmware_download+0xe4>)
   15ad4:	2530      	movs	r5, #48	; 0x30
   15ad6:	7025      	strb	r5, [r4, #0]
	FRESULT ret_firm = f_unlink((char const *)test_file_name);
   15ad8:	0020      	movs	r0, r4
   15ada:	4e33      	ldr	r6, [pc, #204]	; (15ba8 <otafu_firmware_download+0xe8>)
   15adc:	47b0      	blx	r6
	
	// 2. Erase crc_new.txt file from SD card
	crc_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15ade:	4833      	ldr	r0, [pc, #204]	; (15bac <otafu_firmware_download+0xec>)
   15ae0:	7005      	strb	r5, [r0, #0]
	FRESULT ret_crc = f_unlink((char const *)crc_file_name);
   15ae2:	47b0      	blx	r6
	
	// 4. Download Firmware.bin into SD card
	otafu_download_operation(FIRMWARE);
   15ae4:	2002      	movs	r0, #2
   15ae6:	4b32      	ldr	r3, [pc, #200]	; (15bb0 <otafu_firmware_download+0xf0>)
   15ae8:	4798      	blx	r3
	
	// 3. Download Crc.txt into SD card
	//otafu_download_operation(CRC);
	
	// 5. crc check on Firmware.bin file in the SD card
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15aea:	7025      	strb	r5, [r4, #0]
	res1 = f_open(&file_object,(char const*)test_file_name,FA_READ);
   15aec:	2201      	movs	r2, #1
   15aee:	0021      	movs	r1, r4
   15af0:	4830      	ldr	r0, [pc, #192]	; (15bb4 <otafu_firmware_download+0xf4>)
   15af2:	4b31      	ldr	r3, [pc, #196]	; (15bb8 <otafu_firmware_download+0xf8>)
   15af4:	4798      	blx	r3
   15af6:	4b31      	ldr	r3, [pc, #196]	; (15bbc <otafu_firmware_download+0xfc>)
   15af8:	7018      	strb	r0, [r3, #0]
	if (res1 != FR_OK)
   15afa:	2800      	cmp	r0, #0
   15afc:	d119      	bne.n	15b32 <otafu_firmware_download+0x72>
	{
		printf("sd operation: >> Opening a file failed\n\r");
		return 0;
	}
	printf("sd operation: >> File open success\n\r");
   15afe:	4830      	ldr	r0, [pc, #192]	; (15bc0 <otafu_firmware_download+0x100>)
   15b00:	4b27      	ldr	r3, [pc, #156]	; (15ba0 <otafu_firmware_download+0xe0>)
   15b02:	4798      	blx	r3
	
	uint32_t bytes_read = 0;
   15b04:	2300      	movs	r3, #0
   15b06:	9300      	str	r3, [sp, #0]
	uint32_t num_pages=0;
	uint32_t off_set=0;
	uint32_t fw_size= f_size(&file_object);
   15b08:	4b2a      	ldr	r3, [pc, #168]	; (15bb4 <otafu_firmware_download+0xf4>)
   15b0a:	68db      	ldr	r3, [r3, #12]
	uint32_t rem = fw_size%NVMCTRL_PAGE_SIZE;
   15b0c:	223f      	movs	r2, #63	; 0x3f
   15b0e:	401a      	ands	r2, r3
   15b10:	4691      	mov	r9, r2
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
	}
	else
	{
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE);
   15b12:	099f      	lsrs	r7, r3, #6
	if(rem!=0)
   15b14:	2a00      	cmp	r2, #0
   15b16:	d004      	beq.n	15b22 <otafu_firmware_download+0x62>
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
   15b18:	003a      	movs	r2, r7
   15b1a:	3701      	adds	r7, #1
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
   15b1c:	0192      	lsls	r2, r2, #6
   15b1e:	1a9a      	subs	r2, r3, r2
   15b20:	4691      	mov	r9, r2
		off_set = 0;
	}
	
	if (fw_size != 0)
   15b22:	2b00      	cmp	r3, #0
   15b24:	d025      	beq.n	15b72 <otafu_firmware_download+0xb2>
	{
		for(uint16_t j=0;j<num_pages;j++)
   15b26:	2f00      	cmp	r7, #0
   15b28:	d023      	beq.n	15b72 <otafu_firmware_download+0xb2>
   15b2a:	2500      	movs	r5, #0
   15b2c:	2400      	movs	r4, #0
		{
			f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
   15b2e:	4e25      	ldr	r6, [pc, #148]	; (15bc4 <otafu_firmware_download+0x104>)
   15b30:	e00e      	b.n	15b50 <otafu_firmware_download+0x90>
		printf("sd operation: >> Opening a file failed\n\r");
   15b32:	4825      	ldr	r0, [pc, #148]	; (15bc8 <otafu_firmware_download+0x108>)
   15b34:	4b1a      	ldr	r3, [pc, #104]	; (15ba0 <otafu_firmware_download+0xe0>)
   15b36:	4798      	blx	r3
		return 0;
   15b38:	2000      	movs	r0, #0
   15b3a:	e02b      	b.n	15b94 <otafu_firmware_download+0xd4>
			{
				crc32_recalculate(page_buffer,off_set,&crc_downloaded_in_sd_card);
			}
			else
			{
				crc32_recalculate(page_buffer,NVMCTRL_PAGE_SIZE,&crc_downloaded_in_sd_card);
   15b3c:	aa01      	add	r2, sp, #4
   15b3e:	2140      	movs	r1, #64	; 0x40
   15b40:	4822      	ldr	r0, [pc, #136]	; (15bcc <otafu_firmware_download+0x10c>)
   15b42:	4b23      	ldr	r3, [pc, #140]	; (15bd0 <otafu_firmware_download+0x110>)
   15b44:	4798      	blx	r3
		for(uint16_t j=0;j<num_pages;j++)
   15b46:	3401      	adds	r4, #1
   15b48:	b2a4      	uxth	r4, r4
   15b4a:	0025      	movs	r5, r4
   15b4c:	42a7      	cmp	r7, r4
   15b4e:	d910      	bls.n	15b72 <otafu_firmware_download+0xb2>
			f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
   15b50:	466b      	mov	r3, sp
   15b52:	2240      	movs	r2, #64	; 0x40
   15b54:	491d      	ldr	r1, [pc, #116]	; (15bcc <otafu_firmware_download+0x10c>)
   15b56:	4817      	ldr	r0, [pc, #92]	; (15bb4 <otafu_firmware_download+0xf4>)
   15b58:	47b0      	blx	r6
			if((j==(num_pages-1)) && off_set!=0)
   15b5a:	1e7b      	subs	r3, r7, #1
   15b5c:	42ab      	cmp	r3, r5
   15b5e:	d1ed      	bne.n	15b3c <otafu_firmware_download+0x7c>
   15b60:	464b      	mov	r3, r9
   15b62:	2b00      	cmp	r3, #0
   15b64:	d0ea      	beq.n	15b3c <otafu_firmware_download+0x7c>
				crc32_recalculate(page_buffer,off_set,&crc_downloaded_in_sd_card);
   15b66:	aa01      	add	r2, sp, #4
   15b68:	4649      	mov	r1, r9
   15b6a:	4818      	ldr	r0, [pc, #96]	; (15bcc <otafu_firmware_download+0x10c>)
   15b6c:	4b18      	ldr	r3, [pc, #96]	; (15bd0 <otafu_firmware_download+0x110>)
   15b6e:	4798      	blx	r3
   15b70:	e7e9      	b.n	15b46 <otafu_firmware_download+0x86>
			}
		}
	}
	f_close(&file_object);
   15b72:	4810      	ldr	r0, [pc, #64]	; (15bb4 <otafu_firmware_download+0xf4>)
   15b74:	4b17      	ldr	r3, [pc, #92]	; (15bd4 <otafu_firmware_download+0x114>)
   15b76:	4798      	blx	r3
	printf("CRC_DOWN = %u\n\r", (uint32_t*)crc_downloaded_in_sd_card);
   15b78:	9901      	ldr	r1, [sp, #4]
   15b7a:	4817      	ldr	r0, [pc, #92]	; (15bd8 <otafu_firmware_download+0x118>)
   15b7c:	4c08      	ldr	r4, [pc, #32]	; (15ba0 <otafu_firmware_download+0xe0>)
   15b7e:	47a0      	blx	r4
	
	// 6. crc on Crc.txt 
	// This should come from CRC file as of now the download is happening correctly
	crc_on_server = 1535712251;
	printf("CRC_SERVER = %u\n\r", (uint32_t*)crc_on_server);
   15b80:	4916      	ldr	r1, [pc, #88]	; (15bdc <otafu_firmware_download+0x11c>)
   15b82:	4817      	ldr	r0, [pc, #92]	; (15be0 <otafu_firmware_download+0x120>)
   15b84:	47a0      	blx	r4
	
	// 7. Compare crc with crc from the
	if (crc_on_server == crc_downloaded_in_sd_card)	
   15b86:	9b01      	ldr	r3, [sp, #4]
   15b88:	4a16      	ldr	r2, [pc, #88]	; (15be4 <otafu_firmware_download+0x124>)
   15b8a:	4694      	mov	ip, r2
   15b8c:	4463      	add	r3, ip
   15b8e:	0018      	movs	r0, r3
		return 0;
   15b90:	4243      	negs	r3, r0
   15b92:	4158      	adcs	r0, r3
		return 1; 
	else
		return 0;
}
   15b94:	b002      	add	sp, #8
   15b96:	bc04      	pop	{r2}
   15b98:	4691      	mov	r9, r2
   15b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b9c:	0001abf4 	.word	0x0001abf4
   15ba0:	00016761 	.word	0x00016761
   15ba4:	2000015c 	.word	0x2000015c
   15ba8:	000126a5 	.word	0x000126a5
   15bac:	20000010 	.word	0x20000010
   15bb0:	00015a21 	.word	0x00015a21
   15bb4:	20000af0 	.word	0x20000af0
   15bb8:	0001208d 	.word	0x0001208d
   15bbc:	20001160 	.word	0x20001160
   15bc0:	0001ac5c 	.word	0x0001ac5c
   15bc4:	00012215 	.word	0x00012215
   15bc8:	0001ac30 	.word	0x0001ac30
   15bcc:	200012e4 	.word	0x200012e4
   15bd0:	0000dff5 	.word	0x0000dff5
   15bd4:	0001268d 	.word	0x0001268d
   15bd8:	0001ac84 	.word	0x0001ac84
   15bdc:	5b891bfb 	.word	0x5b891bfb
   15be0:	0001ac94 	.word	0x0001ac94
   15be4:	a476e405 	.word	0xa476e405

00015be8 <otafu_download>:

/** 
************************ MAIN OTAFU LOGIC *****************************
*/ 
int otafu_download()
{
   15be8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15bea:	b083      	sub	sp, #12
	int new_ver_num = 0;
	char user_reponse;
	int download_attempts = 0;

	printf("otafu_download: Downloading update version ..... \n\r");
   15bec:	481b      	ldr	r0, [pc, #108]	; (15c5c <otafu_download+0x74>)
   15bee:	4c1c      	ldr	r4, [pc, #112]	; (15c60 <otafu_download+0x78>)
   15bf0:	47a0      	blx	r4
//  	{
//  		printf("otafu_download: >> Resuming application\n\r");
//  		return 0;
//  	}
		
 	printf("otafu_download: New Firmware Available, version: %d \n\r",new_ver_num);
   15bf2:	2100      	movs	r1, #0
   15bf4:	481b      	ldr	r0, [pc, #108]	; (15c64 <otafu_download+0x7c>)
   15bf6:	47a0      	blx	r4
 	
 	USER_INPUT:
 	
 	printf("Would you like to download the new version: (y/n) > ");
   15bf8:	4e1b      	ldr	r6, [pc, #108]	; (15c68 <otafu_download+0x80>)
   15bfa:	4f19      	ldr	r7, [pc, #100]	; (15c60 <otafu_download+0x78>)
 	scanf("%c",&user_reponse);
   15bfc:	4d1b      	ldr	r5, [pc, #108]	; (15c6c <otafu_download+0x84>)
 	printf("Would you like to download the new version: (y/n) > ");
   15bfe:	0030      	movs	r0, r6
   15c00:	47b8      	blx	r7
 	scanf("%c",&user_reponse);
   15c02:	466b      	mov	r3, sp
   15c04:	1ddc      	adds	r4, r3, #7
   15c06:	0021      	movs	r1, r4
   15c08:	0028      	movs	r0, r5
   15c0a:	4b19      	ldr	r3, [pc, #100]	; (15c70 <otafu_download+0x88>)
   15c0c:	4798      	blx	r3
 	printf("%c\n\r",user_reponse);
   15c0e:	7821      	ldrb	r1, [r4, #0]
   15c10:	4818      	ldr	r0, [pc, #96]	; (15c74 <otafu_download+0x8c>)
   15c12:	47b8      	blx	r7
	 
 	if (user_reponse == 'n')
   15c14:	7823      	ldrb	r3, [r4, #0]
   15c16:	2b6e      	cmp	r3, #110	; 0x6e
   15c18:	d005      	beq.n	15c26 <otafu_download+0x3e>
 	{
 		printf("otafu_download: >> Resuming application\n\r");
 		return 0;
 	}
 	else if (user_reponse == 'y')
   15c1a:	2b79      	cmp	r3, #121	; 0x79
   15c1c:	d00a      	beq.n	15c34 <otafu_download+0x4c>
 		printf("otafu_download: >> Resuming application for now\n\r");
 		return 0;
 	}
	else
	{
		printf("invalid response, please try again\n\r");
   15c1e:	4816      	ldr	r0, [pc, #88]	; (15c78 <otafu_download+0x90>)
   15c20:	4b0f      	ldr	r3, [pc, #60]	; (15c60 <otafu_download+0x78>)
   15c22:	4798      	blx	r3
		goto USER_INPUT;
   15c24:	e7eb      	b.n	15bfe <otafu_download+0x16>
 		printf("otafu_download: >> Resuming application\n\r");
   15c26:	4815      	ldr	r0, [pc, #84]	; (15c7c <otafu_download+0x94>)
   15c28:	4b0d      	ldr	r3, [pc, #52]	; (15c60 <otafu_download+0x78>)
   15c2a:	4798      	blx	r3
 		return 0;
   15c2c:	2500      	movs	r5, #0
	}
}
   15c2e:	0028      	movs	r0, r5
   15c30:	b003      	add	sp, #12
   15c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15c34:	2400      	movs	r4, #0
 			if (otafu_firmware_download() == 0)
   15c36:	4e12      	ldr	r6, [pc, #72]	; (15c80 <otafu_download+0x98>)
 				printf("otafu_download: attempt [%d] > Downloading failed, trying again \n\r",download_attempts);
   15c38:	4f09      	ldr	r7, [pc, #36]	; (15c60 <otafu_download+0x78>)
 			if (otafu_firmware_download() == 0)
   15c3a:	47b0      	blx	r6
   15c3c:	1e05      	subs	r5, r0, #0
   15c3e:	d10b      	bne.n	15c58 <otafu_download+0x70>
 				printf("otafu_download: attempt [%d] > Downloading failed, trying again \n\r",download_attempts);
   15c40:	0021      	movs	r1, r4
   15c42:	4810      	ldr	r0, [pc, #64]	; (15c84 <otafu_download+0x9c>)
   15c44:	47b8      	blx	r7
 		for (download_attempts = 0;download_attempts < 3;download_attempts++)
   15c46:	3401      	adds	r4, #1
   15c48:	2c03      	cmp	r4, #3
   15c4a:	d1f6      	bne.n	15c3a <otafu_download+0x52>
 		printf("otafu_download: >> Downloading failed even after multiple attempts\n\r");
   15c4c:	480e      	ldr	r0, [pc, #56]	; (15c88 <otafu_download+0xa0>)
   15c4e:	4c04      	ldr	r4, [pc, #16]	; (15c60 <otafu_download+0x78>)
   15c50:	47a0      	blx	r4
 		printf("otafu_download: >> Resuming application for now\n\r");
   15c52:	480e      	ldr	r0, [pc, #56]	; (15c8c <otafu_download+0xa4>)
   15c54:	47a0      	blx	r4
 		return 0;
   15c56:	e7ea      	b.n	15c2e <otafu_download+0x46>
 				return 1;
   15c58:	2501      	movs	r5, #1
   15c5a:	e7e8      	b.n	15c2e <otafu_download+0x46>
   15c5c:	0001a998 	.word	0x0001a998
   15c60:	00016761 	.word	0x00016761
   15c64:	0001a9cc 	.word	0x0001a9cc
   15c68:	0001aa04 	.word	0x0001aa04
   15c6c:	0001aa3c 	.word	0x0001aa3c
   15c70:	000168b5 	.word	0x000168b5
   15c74:	0001aa40 	.word	0x0001aa40
   15c78:	0001ab34 	.word	0x0001ab34
   15c7c:	0001aa48 	.word	0x0001aa48
   15c80:	00015ac1 	.word	0x00015ac1
   15c84:	0001aa74 	.word	0x0001aa74
   15c88:	0001aab8 	.word	0x0001aab8
   15c8c:	0001ab00 	.word	0x0001ab00

00015c90 <otafu>:

// OTAFU trigger check > MQTT request
void otafu()
{
   15c90:	b570      	push	{r4, r5, r6, lr}
   15c92:	b082      	sub	sp, #8
	if(otafu_download() == 0)   
   15c94:	4b13      	ldr	r3, [pc, #76]	; (15ce4 <otafu+0x54>)
   15c96:	4798      	blx	r3
   15c98:	2800      	cmp	r0, #0
   15c9a:	d101      	bne.n	15ca0 <otafu+0x10>
		} while (error_code == STATUS_BUSY);
				
		// 2. jump to bootloader // Software reset
		NVIC_SystemReset();		
	}			
}
   15c9c:	b002      	add	sp, #8
   15c9e:	bd70      	pop	{r4, r5, r6, pc}
		printf(">> New Firmware Downloaded \n\r Device Reseting .... \n\r");
   15ca0:	4811      	ldr	r0, [pc, #68]	; (15ce8 <otafu+0x58>)
   15ca2:	4b12      	ldr	r3, [pc, #72]	; (15cec <otafu+0x5c>)
   15ca4:	4798      	blx	r3
		uint8_t otaflag = 1;
   15ca6:	2201      	movs	r2, #1
   15ca8:	466b      	mov	r3, sp
   15caa:	71da      	strb	r2, [r3, #7]
			error_code = nvm_erase_row(OTAFU_ADDRESS);
   15cac:	269b      	movs	r6, #155	; 0x9b
   15cae:	0236      	lsls	r6, r6, #8
   15cb0:	4d0f      	ldr	r5, [pc, #60]	; (15cf0 <otafu+0x60>)
   15cb2:	4c10      	ldr	r4, [pc, #64]	; (15cf4 <otafu+0x64>)
   15cb4:	0030      	movs	r0, r6
   15cb6:	47a8      	blx	r5
   15cb8:	7020      	strb	r0, [r4, #0]
		} while (error_code == STATUS_BUSY);
   15cba:	2805      	cmp	r0, #5
   15cbc:	d0fa      	beq.n	15cb4 <otafu+0x24>
			error_code = nvm_write_buffer(OTAFU_ADDRESS,&otaflag,1);
   15cbe:	4d0e      	ldr	r5, [pc, #56]	; (15cf8 <otafu+0x68>)
   15cc0:	4c0c      	ldr	r4, [pc, #48]	; (15cf4 <otafu+0x64>)
   15cc2:	2201      	movs	r2, #1
   15cc4:	466b      	mov	r3, sp
   15cc6:	1dd9      	adds	r1, r3, #7
   15cc8:	209b      	movs	r0, #155	; 0x9b
   15cca:	0200      	lsls	r0, r0, #8
   15ccc:	47a8      	blx	r5
   15cce:	7020      	strb	r0, [r4, #0]
		} while (error_code == STATUS_BUSY);
   15cd0:	2805      	cmp	r0, #5
   15cd2:	d0f6      	beq.n	15cc2 <otafu+0x32>
  __ASM volatile ("dsb");
   15cd4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   15cd8:	4a08      	ldr	r2, [pc, #32]	; (15cfc <otafu+0x6c>)
   15cda:	4b09      	ldr	r3, [pc, #36]	; (15d00 <otafu+0x70>)
   15cdc:	60da      	str	r2, [r3, #12]
   15cde:	f3bf 8f4f 	dsb	sy
   15ce2:	e7fe      	b.n	15ce2 <otafu+0x52>
   15ce4:	00015be9 	.word	0x00015be9
   15ce8:	0001a960 	.word	0x0001a960
   15cec:	00016761 	.word	0x00016761
   15cf0:	0000e5a9 	.word	0x0000e5a9
   15cf4:	20001330 	.word	0x20001330
   15cf8:	0000e501 	.word	0x0000e501
   15cfc:	05fa0004 	.word	0x05fa0004
   15d00:	e000ed00 	.word	0xe000ed00

00015d04 <main>:
/////////////////////////////////////////////////////////////////////////////
///* ...... MAIN ........ *
////////////////////////////////////////////////////////////////////////////

int main(void)
{
   15d04:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d06:	46c6      	mov	lr, r8
   15d08:	b500      	push	{lr}
   15d0a:	b0a6      	sub	sp, #152	; 0x98
	down_state = NOT_READY;
   15d0c:	2400      	movs	r4, #0
   15d0e:	2600      	movs	r6, #0
   15d10:	4bd3      	ldr	r3, [pc, #844]	; (16060 <main+0x35c>)
   15d12:	701c      	strb	r4, [r3, #0]
	/** INITIALIZATING THE BOARD AND PERIPHERALS */
	tstrWifiInitParam param;
	int8_t ret;
	init_state();
	
	system_init();						/* Initialize the board. */	
   15d14:	4bd3      	ldr	r3, [pc, #844]	; (16064 <main+0x360>)
   15d16:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   15d18:	aa03      	add	r2, sp, #12
   15d1a:	2380      	movs	r3, #128	; 0x80
   15d1c:	05db      	lsls	r3, r3, #23
   15d1e:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   15d20:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
   15d22:	23ff      	movs	r3, #255	; 0xff
   15d24:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
   15d26:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   15d28:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
   15d2a:	2501      	movs	r5, #1
   15d2c:	3bdb      	subs	r3, #219	; 0xdb
   15d2e:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
   15d30:	3301      	adds	r3, #1
   15d32:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
   15d34:	3301      	adds	r3, #1
   15d36:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
   15d38:	3301      	adds	r3, #1
   15d3a:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
   15d3c:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
   15d3e:	3305      	adds	r3, #5
   15d40:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
   15d42:	3301      	adds	r3, #1
   15d44:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   15d46:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   15d48:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   15d4a:	2300      	movs	r3, #0
   15d4c:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   15d4e:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   15d50:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   15d52:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
   15d54:	2313      	movs	r3, #19
   15d56:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   15d58:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   15d5a:	23c4      	movs	r3, #196	; 0xc4
   15d5c:	039b      	lsls	r3, r3, #14
   15d5e:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   15d60:	2301      	movs	r3, #1
   15d62:	425b      	negs	r3, r3
   15d64:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   15d66:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   15d68:	4bbf      	ldr	r3, [pc, #764]	; (16068 <main+0x364>)
   15d6a:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   15d6c:	4bbf      	ldr	r3, [pc, #764]	; (1606c <main+0x368>)
   15d6e:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   15d70:	23e1      	movs	r3, #225	; 0xe1
   15d72:	025b      	lsls	r3, r3, #9
   15d74:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
   15d76:	4cbe      	ldr	r4, [pc, #760]	; (16070 <main+0x36c>)
   15d78:	4bbe      	ldr	r3, [pc, #760]	; (16074 <main+0x370>)
   15d7a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   15d7c:	49be      	ldr	r1, [pc, #760]	; (16078 <main+0x374>)
   15d7e:	4bbf      	ldr	r3, [pc, #764]	; (1607c <main+0x378>)
   15d80:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   15d82:	49bf      	ldr	r1, [pc, #764]	; (16080 <main+0x37c>)
   15d84:	4bbf      	ldr	r3, [pc, #764]	; (16084 <main+0x380>)
   15d86:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
   15d88:	49bf      	ldr	r1, [pc, #764]	; (16088 <main+0x384>)
   15d8a:	0020      	movs	r0, r4
   15d8c:	4bbf      	ldr	r3, [pc, #764]	; (1608c <main+0x388>)
   15d8e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   15d90:	4fbf      	ldr	r7, [pc, #764]	; (16090 <main+0x38c>)
   15d92:	683b      	ldr	r3, [r7, #0]
   15d94:	6898      	ldr	r0, [r3, #8]
   15d96:	2100      	movs	r1, #0
   15d98:	4ebe      	ldr	r6, [pc, #760]	; (16094 <main+0x390>)
   15d9a:	47b0      	blx	r6
	setbuf(stdin, NULL);
   15d9c:	683b      	ldr	r3, [r7, #0]
   15d9e:	6858      	ldr	r0, [r3, #4]
   15da0:	2100      	movs	r1, #0
   15da2:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   15da4:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   15da6:	0030      	movs	r0, r6
   15da8:	4bbb      	ldr	r3, [pc, #748]	; (16098 <main+0x394>)
   15daa:	4798      	blx	r3
   15dac:	231f      	movs	r3, #31
   15dae:	4018      	ands	r0, r3
   15db0:	4085      	lsls	r5, r0
   15db2:	4bba      	ldr	r3, [pc, #744]	; (1609c <main+0x398>)
   15db4:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
   15db6:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
   15db8:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
   15dba:	2a00      	cmp	r2, #0
   15dbc:	d1fc      	bne.n	15db8 <main+0xb4>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   15dbe:	6833      	ldr	r3, [r6, #0]
   15dc0:	3202      	adds	r2, #2
   15dc2:	4313      	orrs	r3, r2
   15dc4:	6033      	str	r3, [r6, #0]
	configure_console();				/* Initialize the UART console. */
	
	printf(STRING_HEADER);
   15dc6:	48b6      	ldr	r0, [pc, #728]	; (160a0 <main+0x39c>)
   15dc8:	4cb6      	ldr	r4, [pc, #728]	; (160a4 <main+0x3a0>)
   15dca:	47a0      	blx	r4
	printf("\r\nmain: Initializing Board and peripherals for application...... \r\n\r\n");
   15dcc:	48b6      	ldr	r0, [pc, #728]	; (160a8 <main+0x3a4>)
   15dce:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
   15dd0:	a803      	add	r0, sp, #12
   15dd2:	4bb6      	ldr	r3, [pc, #728]	; (160ac <main+0x3a8>)
   15dd4:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
   15dd6:	4db6      	ldr	r5, [pc, #728]	; (160b0 <main+0x3ac>)
   15dd8:	a903      	add	r1, sp, #12
   15dda:	0028      	movs	r0, r5
   15ddc:	4bb5      	ldr	r3, [pc, #724]	; (160b4 <main+0x3b0>)
   15dde:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
   15de0:	0028      	movs	r0, r5
   15de2:	4bb5      	ldr	r3, [pc, #724]	; (160b8 <main+0x3b4>)
   15de4:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
   15de6:	4cb5      	ldr	r4, [pc, #724]	; (160bc <main+0x3b8>)
   15de8:	0020      	movs	r0, r4
   15dea:	4bb5      	ldr	r3, [pc, #724]	; (160c0 <main+0x3bc>)
   15dec:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   15dee:	4bb5      	ldr	r3, [pc, #724]	; (160c4 <main+0x3c0>)
   15df0:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
   15df2:	6065      	str	r5, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
   15df4:	0021      	movs	r1, r4
   15df6:	48b4      	ldr	r0, [pc, #720]	; (160c8 <main+0x3c4>)
   15df8:	4bb4      	ldr	r3, [pc, #720]	; (160cc <main+0x3c8>)
   15dfa:	4798      	blx	r3
   15dfc:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
   15dfe:	da03      	bge.n	15e08 <main+0x104>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   15e00:	48b3      	ldr	r0, [pc, #716]	; (160d0 <main+0x3cc>)
   15e02:	4bb4      	ldr	r3, [pc, #720]	; (160d4 <main+0x3d0>)
   15e04:	4798      	blx	r3
   15e06:	e7fe      	b.n	15e06 <main+0x102>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
   15e08:	49b3      	ldr	r1, [pc, #716]	; (160d8 <main+0x3d4>)
   15e0a:	48af      	ldr	r0, [pc, #700]	; (160c8 <main+0x3c4>)
   15e0c:	4bb3      	ldr	r3, [pc, #716]	; (160dc <main+0x3d8>)
   15e0e:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
   15e10:	4cb3      	ldr	r4, [pc, #716]	; (160e0 <main+0x3dc>)
   15e12:	0020      	movs	r0, r4
   15e14:	4bb3      	ldr	r3, [pc, #716]	; (160e4 <main+0x3e0>)
   15e16:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
   15e18:	4bb3      	ldr	r3, [pc, #716]	; (160e8 <main+0x3e4>)
   15e1a:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15e1c:	2380      	movs	r3, #128	; 0x80
   15e1e:	009b      	lsls	r3, r3, #2
   15e20:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
   15e22:	4ab2      	ldr	r2, [pc, #712]	; (160ec <main+0x3e8>)
   15e24:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15e26:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
   15e28:	4bb1      	ldr	r3, [pc, #708]	; (160f0 <main+0x3ec>)
   15e2a:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
   15e2c:	4bb1      	ldr	r3, [pc, #708]	; (160f4 <main+0x3f0>)
   15e2e:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
   15e30:	0021      	movs	r1, r4
   15e32:	48b1      	ldr	r0, [pc, #708]	; (160f8 <main+0x3f4>)
   15e34:	4bb1      	ldr	r3, [pc, #708]	; (160fc <main+0x3f8>)
   15e36:	4798      	blx	r3
   15e38:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   15e3a:	da03      	bge.n	15e44 <main+0x140>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
   15e3c:	48b0      	ldr	r0, [pc, #704]	; (16100 <main+0x3fc>)
   15e3e:	4ba5      	ldr	r3, [pc, #660]	; (160d4 <main+0x3d0>)
   15e40:	4798      	blx	r3
   15e42:	e7fe      	b.n	15e42 <main+0x13e>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   15e44:	49af      	ldr	r1, [pc, #700]	; (16104 <main+0x400>)
   15e46:	48ac      	ldr	r0, [pc, #688]	; (160f8 <main+0x3f4>)
   15e48:	4baf      	ldr	r3, [pc, #700]	; (16108 <main+0x404>)
   15e4a:	4798      	blx	r3
   15e4c:	1e01      	subs	r1, r0, #0
	if (result < 0) {
   15e4e:	da03      	bge.n	15e58 <main+0x154>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
   15e50:	48ae      	ldr	r0, [pc, #696]	; (1610c <main+0x408>)
   15e52:	4ba0      	ldr	r3, [pc, #640]	; (160d4 <main+0x3d0>)
   15e54:	4798      	blx	r3
   15e56:	e7fe      	b.n	15e56 <main+0x152>
//	NVIC_SystemReset();					// Reset testing
	
 	configure_timer();					/* Initialize the Timer. */	
 	configure_http_client();			/* Initialize the HTTP client service. */
 	configure_mqtt();					/* Initialize the MQTT service. */
 	nm_bsp_init();						/* Initialize the BSP. */
   15e58:	4bad      	ldr	r3, [pc, #692]	; (16110 <main+0x40c>)
   15e5a:	4798      	blx	r3
 	
 	delay_init();						/* Initialize delay */
   15e5c:	4bad      	ldr	r3, [pc, #692]	; (16114 <main+0x410>)
   15e5e:	4798      	blx	r3
	sd_mmc_init();
   15e60:	4bad      	ldr	r3, [pc, #692]	; (16118 <main+0x414>)
   15e62:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");
   15e64:	48ad      	ldr	r0, [pc, #692]	; (1611c <main+0x418>)
   15e66:	4b8f      	ldr	r3, [pc, #572]	; (160a4 <main+0x3a0>)
   15e68:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
   15e6a:	4dad      	ldr	r5, [pc, #692]	; (16120 <main+0x41c>)
				printf("init_storage: SD Card install failed.\r\n");
   15e6c:	4c8d      	ldr	r4, [pc, #564]	; (160a4 <main+0x3a0>)
			status = sd_mmc_test_unit_ready(0);
   15e6e:	2000      	movs	r0, #0
   15e70:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
   15e72:	2801      	cmp	r0, #1
   15e74:	d109      	bne.n	15e8a <main+0x186>
				printf("init_storage: SD Card install failed.\r\n");
   15e76:	48ab      	ldr	r0, [pc, #684]	; (16124 <main+0x420>)
   15e78:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
   15e7a:	48ab      	ldr	r0, [pc, #684]	; (16128 <main+0x424>)
   15e7c:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   15e7e:	4eab      	ldr	r6, [pc, #684]	; (1612c <main+0x428>)
   15e80:	2000      	movs	r0, #0
   15e82:	47b0      	blx	r6
   15e84:	2802      	cmp	r0, #2
   15e86:	d1fb      	bne.n	15e80 <main+0x17c>
   15e88:	e7f1      	b.n	15e6e <main+0x16a>
		} while (CTRL_GOOD != status);
   15e8a:	2800      	cmp	r0, #0
   15e8c:	d1ef      	bne.n	15e6e <main+0x16a>
		printf("init_storage: mounting SD card...\r\n");
   15e8e:	48a8      	ldr	r0, [pc, #672]	; (16130 <main+0x42c>)
   15e90:	4b84      	ldr	r3, [pc, #528]	; (160a4 <main+0x3a0>)
   15e92:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
   15e94:	4ca7      	ldr	r4, [pc, #668]	; (16134 <main+0x430>)
   15e96:	228c      	movs	r2, #140	; 0x8c
   15e98:	0092      	lsls	r2, r2, #2
   15e9a:	2100      	movs	r1, #0
   15e9c:	0020      	movs	r0, r4
   15e9e:	4ba6      	ldr	r3, [pc, #664]	; (16138 <main+0x434>)
   15ea0:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   15ea2:	0021      	movs	r1, r4
   15ea4:	2000      	movs	r0, #0
   15ea6:	4ba5      	ldr	r3, [pc, #660]	; (1613c <main+0x438>)
   15ea8:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
   15eaa:	280b      	cmp	r0, #11
   15eac:	d119      	bne.n	15ee2 <main+0x1de>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
   15eae:	210b      	movs	r1, #11
   15eb0:	48a3      	ldr	r0, [pc, #652]	; (16140 <main+0x43c>)
   15eb2:	4b88      	ldr	r3, [pc, #544]	; (160d4 <main+0x3d0>)
   15eb4:	4798      	blx	r3
 	
 	init_storage();							/* Initialize SD/MMC storage. */
 	
 	configure_extint_channel();				/*Initialize BUTTON 0 as an external interrupt*/
   15eb6:	4ba3      	ldr	r3, [pc, #652]	; (16144 <main+0x440>)
   15eb8:	4798      	blx	r3
 	configure_extint_callbacks();
   15eba:	4ba3      	ldr	r3, [pc, #652]	; (16148 <main+0x444>)
   15ebc:	4798      	blx	r3
 
 	configure_nvm();						/*Initialize NVM */
   15ebe:	4ba3      	ldr	r3, [pc, #652]	; (1614c <main+0x448>)
   15ec0:	4798      	blx	r3
 
 	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));		// Initialize Wi-Fi parameters structure. 
   15ec2:	2218      	movs	r2, #24
   15ec4:	2100      	movs	r1, #0
   15ec6:	a813      	add	r0, sp, #76	; 0x4c
   15ec8:	4b9b      	ldr	r3, [pc, #620]	; (16138 <main+0x434>)
   15eca:	4798      	blx	r3
 
	param.pfAppWifiCb = wifi_cb;									// Initialize Wi-Fi driver with data and status callbacks. 
   15ecc:	4ba0      	ldr	r3, [pc, #640]	; (16150 <main+0x44c>)
   15ece:	9313      	str	r3, [sp, #76]	; 0x4c
	ret = m2m_wifi_init(&param);
   15ed0:	a813      	add	r0, sp, #76	; 0x4c
   15ed2:	4ba0      	ldr	r3, [pc, #640]	; (16154 <main+0x450>)
   15ed4:	4798      	blx	r3
   15ed6:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) 
   15ed8:	d00a      	beq.n	15ef0 <main+0x1ec>
	{
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
   15eda:	489f      	ldr	r0, [pc, #636]	; (16158 <main+0x454>)
   15edc:	4b7d      	ldr	r3, [pc, #500]	; (160d4 <main+0x3d0>)
   15ede:	4798      	blx	r3
   15ee0:	e7fe      	b.n	15ee0 <main+0x1dc>
		printf("init_storage: SD card mount OK.\r\n");
   15ee2:	489e      	ldr	r0, [pc, #632]	; (1615c <main+0x458>)
   15ee4:	4b6f      	ldr	r3, [pc, #444]	; (160a4 <main+0x3a0>)
   15ee6:	4798      	blx	r3
		add_state(STORAGE_READY);
   15ee8:	2001      	movs	r0, #1
   15eea:	4b9d      	ldr	r3, [pc, #628]	; (16160 <main+0x45c>)
   15eec:	4798      	blx	r3
   15eee:	e7e2      	b.n	15eb6 <main+0x1b2>
   15ef0:	2000      	movs	r0, #0
   15ef2:	4b9c      	ldr	r3, [pc, #624]	; (16164 <main+0x460>)
   15ef4:	4798      	blx	r3
   15ef6:	4b9c      	ldr	r3, [pc, #624]	; (16168 <main+0x464>)
   15ef8:	7a1b      	ldrb	r3, [r3, #8]
   15efa:	b2db      	uxtb	r3, r3
   15efc:	40d8      	lsrs	r0, r3
		while (1);
	}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
   15efe:	21fa      	movs	r1, #250	; 0xfa
   15f00:	0089      	lsls	r1, r1, #2
   15f02:	4b9a      	ldr	r3, [pc, #616]	; (1616c <main+0x468>)
   15f04:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
   15f06:	3801      	subs	r0, #1
   15f08:	4b99      	ldr	r3, [pc, #612]	; (16170 <main+0x46c>)
   15f0a:	4298      	cmp	r0, r3
   15f0c:	d900      	bls.n	15f10 <main+0x20c>
   15f0e:	e0a2      	b.n	16056 <main+0x352>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
   15f10:	4a98      	ldr	r2, [pc, #608]	; (16174 <main+0x470>)
   15f12:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
   15f14:	4898      	ldr	r0, [pc, #608]	; (16178 <main+0x474>)
   15f16:	6a03      	ldr	r3, [r0, #32]
   15f18:	021b      	lsls	r3, r3, #8
   15f1a:	0a1b      	lsrs	r3, r3, #8
   15f1c:	21c0      	movs	r1, #192	; 0xc0
   15f1e:	0609      	lsls	r1, r1, #24
   15f20:	430b      	orrs	r3, r1
   15f22:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   15f24:	2400      	movs	r4, #0
   15f26:	6094      	str	r4, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   15f28:	2307      	movs	r3, #7
   15f2a:	6013      	str	r3, [r2, #0]
	{
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}
	
	printf("\n\rmain: >> Board and peripherals initialized\n\r");
   15f2c:	4893      	ldr	r0, [pc, #588]	; (1617c <main+0x478>)
   15f2e:	4d69      	ldr	r5, [pc, #420]	; (160d4 <main+0x3d0>)
   15f30:	47a8      	blx	r5
	
	/** INITIALIZATION COMPLETE */	

	delay_s(2);
   15f32:	20fa      	movs	r0, #250	; 0xfa
   15f34:	00c0      	lsls	r0, r0, #3
   15f36:	4b92      	ldr	r3, [pc, #584]	; (16180 <main+0x47c>)
   15f38:	4798      	blx	r3
	
	//CONNECT TO MQTT BROKER
	do_download_flag = false;    // Flag false indicating that mqtt broker to be contacted 
   15f3a:	4b92      	ldr	r3, [pc, #584]	; (16184 <main+0x480>)
   15f3c:	701c      	strb	r4, [r3, #0]
	
	socketInit();
   15f3e:	4b92      	ldr	r3, [pc, #584]	; (16188 <main+0x484>)
   15f40:	4798      	blx	r3
	registerSocketCallback(socket_event_handler,socket_resolve_handler);
   15f42:	4992      	ldr	r1, [pc, #584]	; (1618c <main+0x488>)
   15f44:	4892      	ldr	r0, [pc, #584]	; (16190 <main+0x48c>)
   15f46:	4b93      	ldr	r3, [pc, #588]	; (16194 <main+0x490>)
   15f48:	4798      	blx	r3
	
	//Connect to router. 
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   15f4a:	4c93      	ldr	r4, [pc, #588]	; (16198 <main+0x494>)
   15f4c:	0021      	movs	r1, r4
   15f4e:	4893      	ldr	r0, [pc, #588]	; (1619c <main+0x498>)
   15f50:	47a8      	blx	r5
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   15f52:	23ff      	movs	r3, #255	; 0xff
   15f54:	9300      	str	r3, [sp, #0]
   15f56:	4b92      	ldr	r3, [pc, #584]	; (161a0 <main+0x49c>)
   15f58:	2202      	movs	r2, #2
   15f5a:	2112      	movs	r1, #18
   15f5c:	0020      	movs	r0, r4
   15f5e:	4c91      	ldr	r4, [pc, #580]	; (161a4 <main+0x4a0>)
   15f60:	47a0      	blx	r4
// 		printf("Error connecting to MQTT Broker!\r\n");
// 	}
 
	while(1)
	{
		m2m_wifi_handle_events(NULL);
   15f62:	4b91      	ldr	r3, [pc, #580]	; (161a8 <main+0x4a4>)
   15f64:	4698      	mov	r8, r3
		sw_timer_task(&swt_module_inst);
   15f66:	4f91      	ldr	r7, [pc, #580]	; (161ac <main+0x4a8>)
   15f68:	e023      	b.n	15fb2 <main+0x2ae>
		}
		 
		//OTAFU
		if ((OTAFU_REQ == true)&&(START_BUTTON == false)) 
		{
			mqtt_disconnect(&mqtt_inst, main_mqtt_broker);
   15f6a:	4d91      	ldr	r5, [pc, #580]	; (161b0 <main+0x4ac>)
   15f6c:	4c62      	ldr	r4, [pc, #392]	; (160f8 <main+0x3f4>)
   15f6e:	0029      	movs	r1, r5
   15f70:	0020      	movs	r0, r4
   15f72:	4b90      	ldr	r3, [pc, #576]	; (161b4 <main+0x4b0>)
   15f74:	4798      	blx	r3
			socketDeinit();
   15f76:	4b90      	ldr	r3, [pc, #576]	; (161b8 <main+0x4b4>)
   15f78:	4798      	blx	r3
			
			otafu();
   15f7a:	4b90      	ldr	r3, [pc, #576]	; (161bc <main+0x4b8>)
   15f7c:	4798      	blx	r3
			OTAFU_REQ = false;
   15f7e:	2300      	movs	r3, #0
   15f80:	4a8f      	ldr	r2, [pc, #572]	; (161c0 <main+0x4bc>)
   15f82:	7013      	strb	r3, [r2, #0]
			
			do_download_flag = false;
   15f84:	4a7f      	ldr	r2, [pc, #508]	; (16184 <main+0x480>)
   15f86:	7013      	strb	r3, [r2, #0]
			socketInit();
   15f88:	4b7f      	ldr	r3, [pc, #508]	; (16188 <main+0x484>)
   15f8a:	4798      	blx	r3
			registerSocketCallback(socket_event_handler,socket_resolve_handler);
   15f8c:	497f      	ldr	r1, [pc, #508]	; (1618c <main+0x488>)
   15f8e:	4880      	ldr	r0, [pc, #512]	; (16190 <main+0x48c>)
   15f90:	4b80      	ldr	r3, [pc, #512]	; (16194 <main+0x490>)
   15f92:	4798      	blx	r3
			if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
   15f94:	0029      	movs	r1, r5
   15f96:	0020      	movs	r0, r4
   15f98:	4b8a      	ldr	r3, [pc, #552]	; (161c4 <main+0x4c0>)
   15f9a:	4798      	blx	r3
   15f9c:	2800      	cmp	r0, #0
   15f9e:	d151      	bne.n	16044 <main+0x340>
				printf("Error connecting to MQTT Broker!\r\n");
			}
		}
		
		//START/STOP OP
		if(START_BUTTON)
   15fa0:	4b89      	ldr	r3, [pc, #548]	; (161c8 <main+0x4c4>)
   15fa2:	781b      	ldrb	r3, [r3, #0]
   15fa4:	2b00      	cmp	r3, #0
   15fa6:	d12d      	bne.n	16004 <main+0x300>
			snprintf(mqtt_msg,63,"{\"d\":{\"temp\":%d}}",temperature);
			mqtt_publish(&mqtt_inst, TEMP_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
		}

					//Handle MQTT messages
					if(mqtt_inst.isConnected)
   15fa8:	2334      	movs	r3, #52	; 0x34
   15faa:	4a53      	ldr	r2, [pc, #332]	; (160f8 <main+0x3f4>)
   15fac:	5cd3      	ldrb	r3, [r2, r3]
   15fae:	2b00      	cmp	r3, #0
   15fb0:	d14c      	bne.n	1604c <main+0x348>
		m2m_wifi_handle_events(NULL);
   15fb2:	2000      	movs	r0, #0
   15fb4:	47c0      	blx	r8
		sw_timer_task(&swt_module_inst);
   15fb6:	483e      	ldr	r0, [pc, #248]	; (160b0 <main+0x3ac>)
   15fb8:	47b8      	blx	r7
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
   15fba:	2280      	movs	r2, #128	; 0x80
   15fbc:	0412      	lsls	r2, r2, #16
   15fbe:	4b83      	ldr	r3, [pc, #524]	; (161cc <main+0x4c8>)
   15fc0:	61da      	str	r2, [r3, #28]
		delay_ms(200);			
   15fc2:	20c8      	movs	r0, #200	; 0xc8
   15fc4:	4b6e      	ldr	r3, [pc, #440]	; (16180 <main+0x47c>)
   15fc6:	4798      	blx	r3
		if(isPressed == true) 
   15fc8:	4b81      	ldr	r3, [pc, #516]	; (161d0 <main+0x4cc>)
   15fca:	781b      	ldrb	r3, [r3, #0]
   15fcc:	2b00      	cmp	r3, #0
   15fce:	d011      	beq.n	15ff4 <main+0x2f0>
				printf("enter command \n\r type 'help' for the command list\n\r> ");
   15fd0:	4d80      	ldr	r5, [pc, #512]	; (161d4 <main+0x4d0>)
   15fd2:	4e40      	ldr	r6, [pc, #256]	; (160d4 <main+0x3d0>)
				scanf("%s",input_buffer);
   15fd4:	4c80      	ldr	r4, [pc, #512]	; (161d8 <main+0x4d4>)
				printf("enter command \n\r type 'help' for the command list\n\r> ");
   15fd6:	0028      	movs	r0, r5
   15fd8:	47b0      	blx	r6
				scanf("%s",input_buffer);
   15fda:	a919      	add	r1, sp, #100	; 0x64
   15fdc:	0020      	movs	r0, r4
   15fde:	4b7f      	ldr	r3, [pc, #508]	; (161dc <main+0x4d8>)
   15fe0:	4798      	blx	r3
				response = cli(input_buffer);
   15fe2:	a819      	add	r0, sp, #100	; 0x64
   15fe4:	4b7e      	ldr	r3, [pc, #504]	; (161e0 <main+0x4dc>)
   15fe6:	4798      	blx	r3
			while(response != 1)
   15fe8:	b2c0      	uxtb	r0, r0
   15fea:	2801      	cmp	r0, #1
   15fec:	d1f3      	bne.n	15fd6 <main+0x2d2>
			isPressed = false;
   15fee:	2200      	movs	r2, #0
   15ff0:	4b77      	ldr	r3, [pc, #476]	; (161d0 <main+0x4cc>)
   15ff2:	701a      	strb	r2, [r3, #0]
		if ((OTAFU_REQ == true)&&(START_BUTTON == false)) 
   15ff4:	4b72      	ldr	r3, [pc, #456]	; (161c0 <main+0x4bc>)
   15ff6:	781b      	ldrb	r3, [r3, #0]
   15ff8:	2b00      	cmp	r3, #0
   15ffa:	d0d1      	beq.n	15fa0 <main+0x29c>
   15ffc:	4b72      	ldr	r3, [pc, #456]	; (161c8 <main+0x4c4>)
   15ffe:	781b      	ldrb	r3, [r3, #0]
   16000:	2b00      	cmp	r3, #0
   16002:	d0b2      	beq.n	15f6a <main+0x266>
			temperature++;
   16004:	4b77      	ldr	r3, [pc, #476]	; (161e4 <main+0x4e0>)
   16006:	681a      	ldr	r2, [r3, #0]
   16008:	3201      	adds	r2, #1
   1600a:	601a      	str	r2, [r3, #0]
			if(temperature > 40) temperature = 1;
   1600c:	681b      	ldr	r3, [r3, #0]
   1600e:	2b28      	cmp	r3, #40	; 0x28
   16010:	d902      	bls.n	16018 <main+0x314>
   16012:	2201      	movs	r2, #1
   16014:	4b73      	ldr	r3, [pc, #460]	; (161e4 <main+0x4e0>)
   16016:	601a      	str	r2, [r3, #0]
			snprintf(mqtt_msg,63,"{\"d\":{\"temp\":%d}}",temperature);
   16018:	4b72      	ldr	r3, [pc, #456]	; (161e4 <main+0x4e0>)
   1601a:	681b      	ldr	r3, [r3, #0]
   1601c:	4c72      	ldr	r4, [pc, #456]	; (161e8 <main+0x4e4>)
   1601e:	4a73      	ldr	r2, [pc, #460]	; (161ec <main+0x4e8>)
   16020:	213f      	movs	r1, #63	; 0x3f
   16022:	0020      	movs	r0, r4
   16024:	4d72      	ldr	r5, [pc, #456]	; (161f0 <main+0x4ec>)
   16026:	47a8      	blx	r5
			mqtt_publish(&mqtt_inst, TEMP_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
   16028:	0020      	movs	r0, r4
   1602a:	4b72      	ldr	r3, [pc, #456]	; (161f4 <main+0x4f0>)
   1602c:	4798      	blx	r3
   1602e:	0003      	movs	r3, r0
   16030:	2200      	movs	r2, #0
   16032:	9201      	str	r2, [sp, #4]
   16034:	3202      	adds	r2, #2
   16036:	9200      	str	r2, [sp, #0]
   16038:	0022      	movs	r2, r4
   1603a:	496f      	ldr	r1, [pc, #444]	; (161f8 <main+0x4f4>)
   1603c:	482e      	ldr	r0, [pc, #184]	; (160f8 <main+0x3f4>)
   1603e:	4c6f      	ldr	r4, [pc, #444]	; (161fc <main+0x4f8>)
   16040:	47a0      	blx	r4
   16042:	e7b1      	b.n	15fa8 <main+0x2a4>
				printf("Error connecting to MQTT Broker!\r\n");
   16044:	486e      	ldr	r0, [pc, #440]	; (16200 <main+0x4fc>)
   16046:	4b17      	ldr	r3, [pc, #92]	; (160a4 <main+0x3a0>)
   16048:	4798      	blx	r3
   1604a:	e7a9      	b.n	15fa0 <main+0x29c>
					mqtt_yield(&mqtt_inst, 100);		
   1604c:	2164      	movs	r1, #100	; 0x64
   1604e:	0010      	movs	r0, r2
   16050:	4b6c      	ldr	r3, [pc, #432]	; (16204 <main+0x500>)
   16052:	4798      	blx	r3
   16054:	e7ad      	b.n	15fb2 <main+0x2ae>
		puts("ERR>> Systick configuration error\r\n");
   16056:	486c      	ldr	r0, [pc, #432]	; (16208 <main+0x504>)
   16058:	4b12      	ldr	r3, [pc, #72]	; (160a4 <main+0x3a0>)
   1605a:	4798      	blx	r3
   1605c:	e7fe      	b.n	1605c <main+0x358>
   1605e:	46c0      	nop			; (mov r8, r8)
   16060:	200008bd 	.word	0x200008bd
   16064:	00010085 	.word	0x00010085
   16068:	002a0003 	.word	0x002a0003
   1606c:	002b0003 	.word	0x002b0003
   16070:	20000884 	.word	0x20000884
   16074:	20001104 	.word	0x20001104
   16078:	00015389 	.word	0x00015389
   1607c:	20001100 	.word	0x20001100
   16080:	0001535d 	.word	0x0001535d
   16084:	200010fc 	.word	0x200010fc
   16088:	42001800 	.word	0x42001800
   1608c:	0000f39d 	.word	0x0000f39d
   16090:	2000016c 	.word	0x2000016c
   16094:	000168e9 	.word	0x000168e9
   16098:	0000ec19 	.word	0x0000ec19
   1609c:	e000e100 	.word	0xe000e100
   160a0:	0001a4d4 	.word	0x0001a4d4
   160a4:	0001687d 	.word	0x0001687d
   160a8:	0001a544 	.word	0x0001a544
   160ac:	00014fa9 	.word	0x00014fa9
   160b0:	200011a4 	.word	0x200011a4
   160b4:	00014fb5 	.word	0x00014fb5
   160b8:	00015061 	.word	0x00015061
   160bc:	2000117c 	.word	0x2000117c
   160c0:	00013fb9 	.word	0x00013fb9
   160c4:	000005a6 	.word	0x000005a6
   160c8:	200011fc 	.word	0x200011fc
   160cc:	00013fe9 	.word	0x00013fe9
   160d0:	0001a58c 	.word	0x0001a58c
   160d4:	00016761 	.word	0x00016761
   160d8:	000157a9 	.word	0x000157a9
   160dc:	0001409d 	.word	0x0001409d
   160e0:	20001164 	.word	0x20001164
   160e4:	0001336d 	.word	0x0001336d
   160e8:	20000b54 	.word	0x20000b54
   160ec:	20000d54 	.word	0x20000d54
   160f0:	00002b1e 	.word	0x00002b1e
   160f4:	00001770 	.word	0x00001770
   160f8:	20000b1c 	.word	0x20000b1c
   160fc:	000132b5 	.word	0x000132b5
   16100:	0001a5d4 	.word	0x0001a5d4
   16104:	000153a1 	.word	0x000153a1
   16108:	00013389 	.word	0x00013389
   1610c:	0001a608 	.word	0x0001a608
   16110:	0000ae51 	.word	0x0000ae51
   16114:	0000add1 	.word	0x0000add1
   16118:	00009e39 	.word	0x00009e39
   1611c:	0001a63c 	.word	0x0001a63c
   16120:	0000a56d 	.word	0x0000a56d
   16124:	0001a674 	.word	0x0001a674
   16128:	0001a69c 	.word	0x0001a69c
   1612c:	00009e59 	.word	0x00009e59
   16130:	0001a6cc 	.word	0x0001a6cc
   16134:	200008c0 	.word	0x200008c0
   16138:	000165ff 	.word	0x000165ff
   1613c:	0001205d 	.word	0x0001205d
   16140:	0001a6f0 	.word	0x0001a6f0
   16144:	000159a1 	.word	0x000159a1
   16148:	000159d1 	.word	0x000159d1
   1614c:	000159f5 	.word	0x000159f5
   16150:	0001589d 	.word	0x0001589d
   16154:	0000bdcd 	.word	0x0000bdcd
   16158:	0001a744 	.word	0x0001a744
   1615c:	0001a720 	.word	0x0001a720
   16160:	00015141 	.word	0x00015141
   16164:	0000fe41 	.word	0x0000fe41
   16168:	40000400 	.word	0x40000400
   1616c:	0001620d 	.word	0x0001620d
   16170:	00ffffff 	.word	0x00ffffff
   16174:	e000e010 	.word	0xe000e010
   16178:	e000ed00 	.word	0xe000ed00
   1617c:	0001a770 	.word	0x0001a770
   16180:	0000ae11 	.word	0x0000ae11
   16184:	200008bc 	.word	0x200008bc
   16188:	0000d9f5 	.word	0x0000d9f5
   1618c:	00015345 	.word	0x00015345
   16190:	00015351 	.word	0x00015351
   16194:	0000da75 	.word	0x0000da75
   16198:	0001af68 	.word	0x0001af68
   1619c:	0001a7a0 	.word	0x0001a7a0
   161a0:	0001af58 	.word	0x0001af58
   161a4:	0000c19d 	.word	0x0000c19d
   161a8:	0000bf01 	.word	0x0000bf01
   161ac:	000150e9 	.word	0x000150e9
   161b0:	0001a838 	.word	0x0001a838
   161b4:	00013475 	.word	0x00013475
   161b8:	0000da39 	.word	0x0000da39
   161bc:	00015c91 	.word	0x00015c91
   161c0:	2000087c 	.word	0x2000087c
   161c4:	000133b1 	.word	0x000133b1
   161c8:	2000087d 	.word	0x2000087d
   161cc:	41004400 	.word	0x41004400
   161d0:	20000b18 	.word	0x20000b18
   161d4:	0001a7c4 	.word	0x0001a7c4
   161d8:	0001a7fc 	.word	0x0001a7fc
   161dc:	000168b5 	.word	0x000168b5
   161e0:	00013db9 	.word	0x00013db9
   161e4:	20000158 	.word	0x20000158
   161e8:	2000001c 	.word	0x2000001c
   161ec:	0001a800 	.word	0x0001a800
   161f0:	00016a55 	.word	0x00016a55
   161f4:	00016b5b 	.word	0x00016b5b
   161f8:	0001a900 	.word	0x0001a900
   161fc:	000134a5 	.word	0x000134a5
   16200:	0001afa4 	.word	0x0001afa4
   16204:	00013505 	.word	0x00013505
   16208:	0001a814 	.word	0x0001a814

0001620c <__udivsi3>:
   1620c:	2200      	movs	r2, #0
   1620e:	0843      	lsrs	r3, r0, #1
   16210:	428b      	cmp	r3, r1
   16212:	d374      	bcc.n	162fe <__udivsi3+0xf2>
   16214:	0903      	lsrs	r3, r0, #4
   16216:	428b      	cmp	r3, r1
   16218:	d35f      	bcc.n	162da <__udivsi3+0xce>
   1621a:	0a03      	lsrs	r3, r0, #8
   1621c:	428b      	cmp	r3, r1
   1621e:	d344      	bcc.n	162aa <__udivsi3+0x9e>
   16220:	0b03      	lsrs	r3, r0, #12
   16222:	428b      	cmp	r3, r1
   16224:	d328      	bcc.n	16278 <__udivsi3+0x6c>
   16226:	0c03      	lsrs	r3, r0, #16
   16228:	428b      	cmp	r3, r1
   1622a:	d30d      	bcc.n	16248 <__udivsi3+0x3c>
   1622c:	22ff      	movs	r2, #255	; 0xff
   1622e:	0209      	lsls	r1, r1, #8
   16230:	ba12      	rev	r2, r2
   16232:	0c03      	lsrs	r3, r0, #16
   16234:	428b      	cmp	r3, r1
   16236:	d302      	bcc.n	1623e <__udivsi3+0x32>
   16238:	1212      	asrs	r2, r2, #8
   1623a:	0209      	lsls	r1, r1, #8
   1623c:	d065      	beq.n	1630a <__udivsi3+0xfe>
   1623e:	0b03      	lsrs	r3, r0, #12
   16240:	428b      	cmp	r3, r1
   16242:	d319      	bcc.n	16278 <__udivsi3+0x6c>
   16244:	e000      	b.n	16248 <__udivsi3+0x3c>
   16246:	0a09      	lsrs	r1, r1, #8
   16248:	0bc3      	lsrs	r3, r0, #15
   1624a:	428b      	cmp	r3, r1
   1624c:	d301      	bcc.n	16252 <__udivsi3+0x46>
   1624e:	03cb      	lsls	r3, r1, #15
   16250:	1ac0      	subs	r0, r0, r3
   16252:	4152      	adcs	r2, r2
   16254:	0b83      	lsrs	r3, r0, #14
   16256:	428b      	cmp	r3, r1
   16258:	d301      	bcc.n	1625e <__udivsi3+0x52>
   1625a:	038b      	lsls	r3, r1, #14
   1625c:	1ac0      	subs	r0, r0, r3
   1625e:	4152      	adcs	r2, r2
   16260:	0b43      	lsrs	r3, r0, #13
   16262:	428b      	cmp	r3, r1
   16264:	d301      	bcc.n	1626a <__udivsi3+0x5e>
   16266:	034b      	lsls	r3, r1, #13
   16268:	1ac0      	subs	r0, r0, r3
   1626a:	4152      	adcs	r2, r2
   1626c:	0b03      	lsrs	r3, r0, #12
   1626e:	428b      	cmp	r3, r1
   16270:	d301      	bcc.n	16276 <__udivsi3+0x6a>
   16272:	030b      	lsls	r3, r1, #12
   16274:	1ac0      	subs	r0, r0, r3
   16276:	4152      	adcs	r2, r2
   16278:	0ac3      	lsrs	r3, r0, #11
   1627a:	428b      	cmp	r3, r1
   1627c:	d301      	bcc.n	16282 <__udivsi3+0x76>
   1627e:	02cb      	lsls	r3, r1, #11
   16280:	1ac0      	subs	r0, r0, r3
   16282:	4152      	adcs	r2, r2
   16284:	0a83      	lsrs	r3, r0, #10
   16286:	428b      	cmp	r3, r1
   16288:	d301      	bcc.n	1628e <__udivsi3+0x82>
   1628a:	028b      	lsls	r3, r1, #10
   1628c:	1ac0      	subs	r0, r0, r3
   1628e:	4152      	adcs	r2, r2
   16290:	0a43      	lsrs	r3, r0, #9
   16292:	428b      	cmp	r3, r1
   16294:	d301      	bcc.n	1629a <__udivsi3+0x8e>
   16296:	024b      	lsls	r3, r1, #9
   16298:	1ac0      	subs	r0, r0, r3
   1629a:	4152      	adcs	r2, r2
   1629c:	0a03      	lsrs	r3, r0, #8
   1629e:	428b      	cmp	r3, r1
   162a0:	d301      	bcc.n	162a6 <__udivsi3+0x9a>
   162a2:	020b      	lsls	r3, r1, #8
   162a4:	1ac0      	subs	r0, r0, r3
   162a6:	4152      	adcs	r2, r2
   162a8:	d2cd      	bcs.n	16246 <__udivsi3+0x3a>
   162aa:	09c3      	lsrs	r3, r0, #7
   162ac:	428b      	cmp	r3, r1
   162ae:	d301      	bcc.n	162b4 <__udivsi3+0xa8>
   162b0:	01cb      	lsls	r3, r1, #7
   162b2:	1ac0      	subs	r0, r0, r3
   162b4:	4152      	adcs	r2, r2
   162b6:	0983      	lsrs	r3, r0, #6
   162b8:	428b      	cmp	r3, r1
   162ba:	d301      	bcc.n	162c0 <__udivsi3+0xb4>
   162bc:	018b      	lsls	r3, r1, #6
   162be:	1ac0      	subs	r0, r0, r3
   162c0:	4152      	adcs	r2, r2
   162c2:	0943      	lsrs	r3, r0, #5
   162c4:	428b      	cmp	r3, r1
   162c6:	d301      	bcc.n	162cc <__udivsi3+0xc0>
   162c8:	014b      	lsls	r3, r1, #5
   162ca:	1ac0      	subs	r0, r0, r3
   162cc:	4152      	adcs	r2, r2
   162ce:	0903      	lsrs	r3, r0, #4
   162d0:	428b      	cmp	r3, r1
   162d2:	d301      	bcc.n	162d8 <__udivsi3+0xcc>
   162d4:	010b      	lsls	r3, r1, #4
   162d6:	1ac0      	subs	r0, r0, r3
   162d8:	4152      	adcs	r2, r2
   162da:	08c3      	lsrs	r3, r0, #3
   162dc:	428b      	cmp	r3, r1
   162de:	d301      	bcc.n	162e4 <__udivsi3+0xd8>
   162e0:	00cb      	lsls	r3, r1, #3
   162e2:	1ac0      	subs	r0, r0, r3
   162e4:	4152      	adcs	r2, r2
   162e6:	0883      	lsrs	r3, r0, #2
   162e8:	428b      	cmp	r3, r1
   162ea:	d301      	bcc.n	162f0 <__udivsi3+0xe4>
   162ec:	008b      	lsls	r3, r1, #2
   162ee:	1ac0      	subs	r0, r0, r3
   162f0:	4152      	adcs	r2, r2
   162f2:	0843      	lsrs	r3, r0, #1
   162f4:	428b      	cmp	r3, r1
   162f6:	d301      	bcc.n	162fc <__udivsi3+0xf0>
   162f8:	004b      	lsls	r3, r1, #1
   162fa:	1ac0      	subs	r0, r0, r3
   162fc:	4152      	adcs	r2, r2
   162fe:	1a41      	subs	r1, r0, r1
   16300:	d200      	bcs.n	16304 <__udivsi3+0xf8>
   16302:	4601      	mov	r1, r0
   16304:	4152      	adcs	r2, r2
   16306:	4610      	mov	r0, r2
   16308:	4770      	bx	lr
   1630a:	e7ff      	b.n	1630c <__udivsi3+0x100>
   1630c:	b501      	push	{r0, lr}
   1630e:	2000      	movs	r0, #0
   16310:	f000 f8f0 	bl	164f4 <__aeabi_idiv0>
   16314:	bd02      	pop	{r1, pc}
   16316:	46c0      	nop			; (mov r8, r8)

00016318 <__aeabi_uidivmod>:
   16318:	2900      	cmp	r1, #0
   1631a:	d0f7      	beq.n	1630c <__udivsi3+0x100>
   1631c:	e776      	b.n	1620c <__udivsi3>
   1631e:	4770      	bx	lr

00016320 <__divsi3>:
   16320:	4603      	mov	r3, r0
   16322:	430b      	orrs	r3, r1
   16324:	d47f      	bmi.n	16426 <__divsi3+0x106>
   16326:	2200      	movs	r2, #0
   16328:	0843      	lsrs	r3, r0, #1
   1632a:	428b      	cmp	r3, r1
   1632c:	d374      	bcc.n	16418 <__divsi3+0xf8>
   1632e:	0903      	lsrs	r3, r0, #4
   16330:	428b      	cmp	r3, r1
   16332:	d35f      	bcc.n	163f4 <__divsi3+0xd4>
   16334:	0a03      	lsrs	r3, r0, #8
   16336:	428b      	cmp	r3, r1
   16338:	d344      	bcc.n	163c4 <__divsi3+0xa4>
   1633a:	0b03      	lsrs	r3, r0, #12
   1633c:	428b      	cmp	r3, r1
   1633e:	d328      	bcc.n	16392 <__divsi3+0x72>
   16340:	0c03      	lsrs	r3, r0, #16
   16342:	428b      	cmp	r3, r1
   16344:	d30d      	bcc.n	16362 <__divsi3+0x42>
   16346:	22ff      	movs	r2, #255	; 0xff
   16348:	0209      	lsls	r1, r1, #8
   1634a:	ba12      	rev	r2, r2
   1634c:	0c03      	lsrs	r3, r0, #16
   1634e:	428b      	cmp	r3, r1
   16350:	d302      	bcc.n	16358 <__divsi3+0x38>
   16352:	1212      	asrs	r2, r2, #8
   16354:	0209      	lsls	r1, r1, #8
   16356:	d065      	beq.n	16424 <__divsi3+0x104>
   16358:	0b03      	lsrs	r3, r0, #12
   1635a:	428b      	cmp	r3, r1
   1635c:	d319      	bcc.n	16392 <__divsi3+0x72>
   1635e:	e000      	b.n	16362 <__divsi3+0x42>
   16360:	0a09      	lsrs	r1, r1, #8
   16362:	0bc3      	lsrs	r3, r0, #15
   16364:	428b      	cmp	r3, r1
   16366:	d301      	bcc.n	1636c <__divsi3+0x4c>
   16368:	03cb      	lsls	r3, r1, #15
   1636a:	1ac0      	subs	r0, r0, r3
   1636c:	4152      	adcs	r2, r2
   1636e:	0b83      	lsrs	r3, r0, #14
   16370:	428b      	cmp	r3, r1
   16372:	d301      	bcc.n	16378 <__divsi3+0x58>
   16374:	038b      	lsls	r3, r1, #14
   16376:	1ac0      	subs	r0, r0, r3
   16378:	4152      	adcs	r2, r2
   1637a:	0b43      	lsrs	r3, r0, #13
   1637c:	428b      	cmp	r3, r1
   1637e:	d301      	bcc.n	16384 <__divsi3+0x64>
   16380:	034b      	lsls	r3, r1, #13
   16382:	1ac0      	subs	r0, r0, r3
   16384:	4152      	adcs	r2, r2
   16386:	0b03      	lsrs	r3, r0, #12
   16388:	428b      	cmp	r3, r1
   1638a:	d301      	bcc.n	16390 <__divsi3+0x70>
   1638c:	030b      	lsls	r3, r1, #12
   1638e:	1ac0      	subs	r0, r0, r3
   16390:	4152      	adcs	r2, r2
   16392:	0ac3      	lsrs	r3, r0, #11
   16394:	428b      	cmp	r3, r1
   16396:	d301      	bcc.n	1639c <__divsi3+0x7c>
   16398:	02cb      	lsls	r3, r1, #11
   1639a:	1ac0      	subs	r0, r0, r3
   1639c:	4152      	adcs	r2, r2
   1639e:	0a83      	lsrs	r3, r0, #10
   163a0:	428b      	cmp	r3, r1
   163a2:	d301      	bcc.n	163a8 <__divsi3+0x88>
   163a4:	028b      	lsls	r3, r1, #10
   163a6:	1ac0      	subs	r0, r0, r3
   163a8:	4152      	adcs	r2, r2
   163aa:	0a43      	lsrs	r3, r0, #9
   163ac:	428b      	cmp	r3, r1
   163ae:	d301      	bcc.n	163b4 <__divsi3+0x94>
   163b0:	024b      	lsls	r3, r1, #9
   163b2:	1ac0      	subs	r0, r0, r3
   163b4:	4152      	adcs	r2, r2
   163b6:	0a03      	lsrs	r3, r0, #8
   163b8:	428b      	cmp	r3, r1
   163ba:	d301      	bcc.n	163c0 <__divsi3+0xa0>
   163bc:	020b      	lsls	r3, r1, #8
   163be:	1ac0      	subs	r0, r0, r3
   163c0:	4152      	adcs	r2, r2
   163c2:	d2cd      	bcs.n	16360 <__divsi3+0x40>
   163c4:	09c3      	lsrs	r3, r0, #7
   163c6:	428b      	cmp	r3, r1
   163c8:	d301      	bcc.n	163ce <__divsi3+0xae>
   163ca:	01cb      	lsls	r3, r1, #7
   163cc:	1ac0      	subs	r0, r0, r3
   163ce:	4152      	adcs	r2, r2
   163d0:	0983      	lsrs	r3, r0, #6
   163d2:	428b      	cmp	r3, r1
   163d4:	d301      	bcc.n	163da <__divsi3+0xba>
   163d6:	018b      	lsls	r3, r1, #6
   163d8:	1ac0      	subs	r0, r0, r3
   163da:	4152      	adcs	r2, r2
   163dc:	0943      	lsrs	r3, r0, #5
   163de:	428b      	cmp	r3, r1
   163e0:	d301      	bcc.n	163e6 <__divsi3+0xc6>
   163e2:	014b      	lsls	r3, r1, #5
   163e4:	1ac0      	subs	r0, r0, r3
   163e6:	4152      	adcs	r2, r2
   163e8:	0903      	lsrs	r3, r0, #4
   163ea:	428b      	cmp	r3, r1
   163ec:	d301      	bcc.n	163f2 <__divsi3+0xd2>
   163ee:	010b      	lsls	r3, r1, #4
   163f0:	1ac0      	subs	r0, r0, r3
   163f2:	4152      	adcs	r2, r2
   163f4:	08c3      	lsrs	r3, r0, #3
   163f6:	428b      	cmp	r3, r1
   163f8:	d301      	bcc.n	163fe <__divsi3+0xde>
   163fa:	00cb      	lsls	r3, r1, #3
   163fc:	1ac0      	subs	r0, r0, r3
   163fe:	4152      	adcs	r2, r2
   16400:	0883      	lsrs	r3, r0, #2
   16402:	428b      	cmp	r3, r1
   16404:	d301      	bcc.n	1640a <__divsi3+0xea>
   16406:	008b      	lsls	r3, r1, #2
   16408:	1ac0      	subs	r0, r0, r3
   1640a:	4152      	adcs	r2, r2
   1640c:	0843      	lsrs	r3, r0, #1
   1640e:	428b      	cmp	r3, r1
   16410:	d301      	bcc.n	16416 <__divsi3+0xf6>
   16412:	004b      	lsls	r3, r1, #1
   16414:	1ac0      	subs	r0, r0, r3
   16416:	4152      	adcs	r2, r2
   16418:	1a41      	subs	r1, r0, r1
   1641a:	d200      	bcs.n	1641e <__divsi3+0xfe>
   1641c:	4601      	mov	r1, r0
   1641e:	4152      	adcs	r2, r2
   16420:	4610      	mov	r0, r2
   16422:	4770      	bx	lr
   16424:	e05d      	b.n	164e2 <__divsi3+0x1c2>
   16426:	0fca      	lsrs	r2, r1, #31
   16428:	d000      	beq.n	1642c <__divsi3+0x10c>
   1642a:	4249      	negs	r1, r1
   1642c:	1003      	asrs	r3, r0, #32
   1642e:	d300      	bcc.n	16432 <__divsi3+0x112>
   16430:	4240      	negs	r0, r0
   16432:	4053      	eors	r3, r2
   16434:	2200      	movs	r2, #0
   16436:	469c      	mov	ip, r3
   16438:	0903      	lsrs	r3, r0, #4
   1643a:	428b      	cmp	r3, r1
   1643c:	d32d      	bcc.n	1649a <__divsi3+0x17a>
   1643e:	0a03      	lsrs	r3, r0, #8
   16440:	428b      	cmp	r3, r1
   16442:	d312      	bcc.n	1646a <__divsi3+0x14a>
   16444:	22fc      	movs	r2, #252	; 0xfc
   16446:	0189      	lsls	r1, r1, #6
   16448:	ba12      	rev	r2, r2
   1644a:	0a03      	lsrs	r3, r0, #8
   1644c:	428b      	cmp	r3, r1
   1644e:	d30c      	bcc.n	1646a <__divsi3+0x14a>
   16450:	0189      	lsls	r1, r1, #6
   16452:	1192      	asrs	r2, r2, #6
   16454:	428b      	cmp	r3, r1
   16456:	d308      	bcc.n	1646a <__divsi3+0x14a>
   16458:	0189      	lsls	r1, r1, #6
   1645a:	1192      	asrs	r2, r2, #6
   1645c:	428b      	cmp	r3, r1
   1645e:	d304      	bcc.n	1646a <__divsi3+0x14a>
   16460:	0189      	lsls	r1, r1, #6
   16462:	d03a      	beq.n	164da <__divsi3+0x1ba>
   16464:	1192      	asrs	r2, r2, #6
   16466:	e000      	b.n	1646a <__divsi3+0x14a>
   16468:	0989      	lsrs	r1, r1, #6
   1646a:	09c3      	lsrs	r3, r0, #7
   1646c:	428b      	cmp	r3, r1
   1646e:	d301      	bcc.n	16474 <__divsi3+0x154>
   16470:	01cb      	lsls	r3, r1, #7
   16472:	1ac0      	subs	r0, r0, r3
   16474:	4152      	adcs	r2, r2
   16476:	0983      	lsrs	r3, r0, #6
   16478:	428b      	cmp	r3, r1
   1647a:	d301      	bcc.n	16480 <__divsi3+0x160>
   1647c:	018b      	lsls	r3, r1, #6
   1647e:	1ac0      	subs	r0, r0, r3
   16480:	4152      	adcs	r2, r2
   16482:	0943      	lsrs	r3, r0, #5
   16484:	428b      	cmp	r3, r1
   16486:	d301      	bcc.n	1648c <__divsi3+0x16c>
   16488:	014b      	lsls	r3, r1, #5
   1648a:	1ac0      	subs	r0, r0, r3
   1648c:	4152      	adcs	r2, r2
   1648e:	0903      	lsrs	r3, r0, #4
   16490:	428b      	cmp	r3, r1
   16492:	d301      	bcc.n	16498 <__divsi3+0x178>
   16494:	010b      	lsls	r3, r1, #4
   16496:	1ac0      	subs	r0, r0, r3
   16498:	4152      	adcs	r2, r2
   1649a:	08c3      	lsrs	r3, r0, #3
   1649c:	428b      	cmp	r3, r1
   1649e:	d301      	bcc.n	164a4 <__divsi3+0x184>
   164a0:	00cb      	lsls	r3, r1, #3
   164a2:	1ac0      	subs	r0, r0, r3
   164a4:	4152      	adcs	r2, r2
   164a6:	0883      	lsrs	r3, r0, #2
   164a8:	428b      	cmp	r3, r1
   164aa:	d301      	bcc.n	164b0 <__divsi3+0x190>
   164ac:	008b      	lsls	r3, r1, #2
   164ae:	1ac0      	subs	r0, r0, r3
   164b0:	4152      	adcs	r2, r2
   164b2:	d2d9      	bcs.n	16468 <__divsi3+0x148>
   164b4:	0843      	lsrs	r3, r0, #1
   164b6:	428b      	cmp	r3, r1
   164b8:	d301      	bcc.n	164be <__divsi3+0x19e>
   164ba:	004b      	lsls	r3, r1, #1
   164bc:	1ac0      	subs	r0, r0, r3
   164be:	4152      	adcs	r2, r2
   164c0:	1a41      	subs	r1, r0, r1
   164c2:	d200      	bcs.n	164c6 <__divsi3+0x1a6>
   164c4:	4601      	mov	r1, r0
   164c6:	4663      	mov	r3, ip
   164c8:	4152      	adcs	r2, r2
   164ca:	105b      	asrs	r3, r3, #1
   164cc:	4610      	mov	r0, r2
   164ce:	d301      	bcc.n	164d4 <__divsi3+0x1b4>
   164d0:	4240      	negs	r0, r0
   164d2:	2b00      	cmp	r3, #0
   164d4:	d500      	bpl.n	164d8 <__divsi3+0x1b8>
   164d6:	4249      	negs	r1, r1
   164d8:	4770      	bx	lr
   164da:	4663      	mov	r3, ip
   164dc:	105b      	asrs	r3, r3, #1
   164de:	d300      	bcc.n	164e2 <__divsi3+0x1c2>
   164e0:	4240      	negs	r0, r0
   164e2:	b501      	push	{r0, lr}
   164e4:	2000      	movs	r0, #0
   164e6:	f000 f805 	bl	164f4 <__aeabi_idiv0>
   164ea:	bd02      	pop	{r1, pc}

000164ec <__aeabi_idivmod>:
   164ec:	2900      	cmp	r1, #0
   164ee:	d0f8      	beq.n	164e2 <__divsi3+0x1c2>
   164f0:	e716      	b.n	16320 <__divsi3>
   164f2:	4770      	bx	lr

000164f4 <__aeabi_idiv0>:
   164f4:	4770      	bx	lr
   164f6:	46c0      	nop			; (mov r8, r8)

000164f8 <__aeabi_lmul>:
   164f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   164fa:	46ce      	mov	lr, r9
   164fc:	4647      	mov	r7, r8
   164fe:	0415      	lsls	r5, r2, #16
   16500:	0c2d      	lsrs	r5, r5, #16
   16502:	002e      	movs	r6, r5
   16504:	b580      	push	{r7, lr}
   16506:	0407      	lsls	r7, r0, #16
   16508:	0c14      	lsrs	r4, r2, #16
   1650a:	0c3f      	lsrs	r7, r7, #16
   1650c:	4699      	mov	r9, r3
   1650e:	0c03      	lsrs	r3, r0, #16
   16510:	437e      	muls	r6, r7
   16512:	435d      	muls	r5, r3
   16514:	4367      	muls	r7, r4
   16516:	4363      	muls	r3, r4
   16518:	197f      	adds	r7, r7, r5
   1651a:	0c34      	lsrs	r4, r6, #16
   1651c:	19e4      	adds	r4, r4, r7
   1651e:	469c      	mov	ip, r3
   16520:	42a5      	cmp	r5, r4
   16522:	d903      	bls.n	1652c <__aeabi_lmul+0x34>
   16524:	2380      	movs	r3, #128	; 0x80
   16526:	025b      	lsls	r3, r3, #9
   16528:	4698      	mov	r8, r3
   1652a:	44c4      	add	ip, r8
   1652c:	464b      	mov	r3, r9
   1652e:	4351      	muls	r1, r2
   16530:	4343      	muls	r3, r0
   16532:	0436      	lsls	r6, r6, #16
   16534:	0c36      	lsrs	r6, r6, #16
   16536:	0c25      	lsrs	r5, r4, #16
   16538:	0424      	lsls	r4, r4, #16
   1653a:	4465      	add	r5, ip
   1653c:	19a4      	adds	r4, r4, r6
   1653e:	1859      	adds	r1, r3, r1
   16540:	1949      	adds	r1, r1, r5
   16542:	0020      	movs	r0, r4
   16544:	bc0c      	pop	{r2, r3}
   16546:	4690      	mov	r8, r2
   16548:	4699      	mov	r9, r3
   1654a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001654c <atoi>:
   1654c:	b510      	push	{r4, lr}
   1654e:	220a      	movs	r2, #10
   16550:	2100      	movs	r1, #0
   16552:	f000 fbef 	bl	16d34 <strtol>
   16556:	bd10      	pop	{r4, pc}

00016558 <__libc_init_array>:
   16558:	b570      	push	{r4, r5, r6, lr}
   1655a:	2600      	movs	r6, #0
   1655c:	4d0c      	ldr	r5, [pc, #48]	; (16590 <__libc_init_array+0x38>)
   1655e:	4c0d      	ldr	r4, [pc, #52]	; (16594 <__libc_init_array+0x3c>)
   16560:	1b64      	subs	r4, r4, r5
   16562:	10a4      	asrs	r4, r4, #2
   16564:	42a6      	cmp	r6, r4
   16566:	d109      	bne.n	1657c <__libc_init_array+0x24>
   16568:	2600      	movs	r6, #0
   1656a:	f004 fe13 	bl	1b194 <_init>
   1656e:	4d0a      	ldr	r5, [pc, #40]	; (16598 <__libc_init_array+0x40>)
   16570:	4c0a      	ldr	r4, [pc, #40]	; (1659c <__libc_init_array+0x44>)
   16572:	1b64      	subs	r4, r4, r5
   16574:	10a4      	asrs	r4, r4, #2
   16576:	42a6      	cmp	r6, r4
   16578:	d105      	bne.n	16586 <__libc_init_array+0x2e>
   1657a:	bd70      	pop	{r4, r5, r6, pc}
   1657c:	00b3      	lsls	r3, r6, #2
   1657e:	58eb      	ldr	r3, [r5, r3]
   16580:	4798      	blx	r3
   16582:	3601      	adds	r6, #1
   16584:	e7ee      	b.n	16564 <__libc_init_array+0xc>
   16586:	00b3      	lsls	r3, r6, #2
   16588:	58eb      	ldr	r3, [r5, r3]
   1658a:	4798      	blx	r3
   1658c:	3601      	adds	r6, #1
   1658e:	e7f2      	b.n	16576 <__libc_init_array+0x1e>
   16590:	0001b1a0 	.word	0x0001b1a0
   16594:	0001b1a0 	.word	0x0001b1a0
   16598:	0001b1a0 	.word	0x0001b1a0
   1659c:	0001b1a4 	.word	0x0001b1a4

000165a0 <malloc>:
   165a0:	b510      	push	{r4, lr}
   165a2:	4b03      	ldr	r3, [pc, #12]	; (165b0 <malloc+0x10>)
   165a4:	0001      	movs	r1, r0
   165a6:	6818      	ldr	r0, [r3, #0]
   165a8:	f000 f87c 	bl	166a4 <_malloc_r>
   165ac:	bd10      	pop	{r4, pc}
   165ae:	46c0      	nop			; (mov r8, r8)
   165b0:	2000016c 	.word	0x2000016c

000165b4 <free>:
   165b4:	b510      	push	{r4, lr}
   165b6:	4b03      	ldr	r3, [pc, #12]	; (165c4 <free+0x10>)
   165b8:	0001      	movs	r1, r0
   165ba:	6818      	ldr	r0, [r3, #0]
   165bc:	f000 f828 	bl	16610 <_free_r>
   165c0:	bd10      	pop	{r4, pc}
   165c2:	46c0      	nop			; (mov r8, r8)
   165c4:	2000016c 	.word	0x2000016c

000165c8 <memcpy>:
   165c8:	2300      	movs	r3, #0
   165ca:	b510      	push	{r4, lr}
   165cc:	429a      	cmp	r2, r3
   165ce:	d100      	bne.n	165d2 <memcpy+0xa>
   165d0:	bd10      	pop	{r4, pc}
   165d2:	5ccc      	ldrb	r4, [r1, r3]
   165d4:	54c4      	strb	r4, [r0, r3]
   165d6:	3301      	adds	r3, #1
   165d8:	e7f8      	b.n	165cc <memcpy+0x4>

000165da <memmove>:
   165da:	b510      	push	{r4, lr}
   165dc:	4288      	cmp	r0, r1
   165de:	d902      	bls.n	165e6 <memmove+0xc>
   165e0:	188b      	adds	r3, r1, r2
   165e2:	4298      	cmp	r0, r3
   165e4:	d308      	bcc.n	165f8 <memmove+0x1e>
   165e6:	2300      	movs	r3, #0
   165e8:	429a      	cmp	r2, r3
   165ea:	d007      	beq.n	165fc <memmove+0x22>
   165ec:	5ccc      	ldrb	r4, [r1, r3]
   165ee:	54c4      	strb	r4, [r0, r3]
   165f0:	3301      	adds	r3, #1
   165f2:	e7f9      	b.n	165e8 <memmove+0xe>
   165f4:	5c8b      	ldrb	r3, [r1, r2]
   165f6:	5483      	strb	r3, [r0, r2]
   165f8:	3a01      	subs	r2, #1
   165fa:	d2fb      	bcs.n	165f4 <memmove+0x1a>
   165fc:	bd10      	pop	{r4, pc}

000165fe <memset>:
   165fe:	0003      	movs	r3, r0
   16600:	1882      	adds	r2, r0, r2
   16602:	4293      	cmp	r3, r2
   16604:	d100      	bne.n	16608 <memset+0xa>
   16606:	4770      	bx	lr
   16608:	7019      	strb	r1, [r3, #0]
   1660a:	3301      	adds	r3, #1
   1660c:	e7f9      	b.n	16602 <memset+0x4>
	...

00016610 <_free_r>:
   16610:	b570      	push	{r4, r5, r6, lr}
   16612:	0005      	movs	r5, r0
   16614:	2900      	cmp	r1, #0
   16616:	d010      	beq.n	1663a <_free_r+0x2a>
   16618:	1f0c      	subs	r4, r1, #4
   1661a:	6823      	ldr	r3, [r4, #0]
   1661c:	2b00      	cmp	r3, #0
   1661e:	da00      	bge.n	16622 <_free_r+0x12>
   16620:	18e4      	adds	r4, r4, r3
   16622:	0028      	movs	r0, r5
   16624:	f000 feb2 	bl	1738c <__malloc_lock>
   16628:	4a1d      	ldr	r2, [pc, #116]	; (166a0 <_free_r+0x90>)
   1662a:	6813      	ldr	r3, [r2, #0]
   1662c:	2b00      	cmp	r3, #0
   1662e:	d105      	bne.n	1663c <_free_r+0x2c>
   16630:	6063      	str	r3, [r4, #4]
   16632:	6014      	str	r4, [r2, #0]
   16634:	0028      	movs	r0, r5
   16636:	f000 feaa 	bl	1738e <__malloc_unlock>
   1663a:	bd70      	pop	{r4, r5, r6, pc}
   1663c:	42a3      	cmp	r3, r4
   1663e:	d909      	bls.n	16654 <_free_r+0x44>
   16640:	6821      	ldr	r1, [r4, #0]
   16642:	1860      	adds	r0, r4, r1
   16644:	4283      	cmp	r3, r0
   16646:	d1f3      	bne.n	16630 <_free_r+0x20>
   16648:	6818      	ldr	r0, [r3, #0]
   1664a:	685b      	ldr	r3, [r3, #4]
   1664c:	1841      	adds	r1, r0, r1
   1664e:	6021      	str	r1, [r4, #0]
   16650:	e7ee      	b.n	16630 <_free_r+0x20>
   16652:	0013      	movs	r3, r2
   16654:	685a      	ldr	r2, [r3, #4]
   16656:	2a00      	cmp	r2, #0
   16658:	d001      	beq.n	1665e <_free_r+0x4e>
   1665a:	42a2      	cmp	r2, r4
   1665c:	d9f9      	bls.n	16652 <_free_r+0x42>
   1665e:	6819      	ldr	r1, [r3, #0]
   16660:	1858      	adds	r0, r3, r1
   16662:	42a0      	cmp	r0, r4
   16664:	d10b      	bne.n	1667e <_free_r+0x6e>
   16666:	6820      	ldr	r0, [r4, #0]
   16668:	1809      	adds	r1, r1, r0
   1666a:	1858      	adds	r0, r3, r1
   1666c:	6019      	str	r1, [r3, #0]
   1666e:	4282      	cmp	r2, r0
   16670:	d1e0      	bne.n	16634 <_free_r+0x24>
   16672:	6810      	ldr	r0, [r2, #0]
   16674:	6852      	ldr	r2, [r2, #4]
   16676:	1841      	adds	r1, r0, r1
   16678:	6019      	str	r1, [r3, #0]
   1667a:	605a      	str	r2, [r3, #4]
   1667c:	e7da      	b.n	16634 <_free_r+0x24>
   1667e:	42a0      	cmp	r0, r4
   16680:	d902      	bls.n	16688 <_free_r+0x78>
   16682:	230c      	movs	r3, #12
   16684:	602b      	str	r3, [r5, #0]
   16686:	e7d5      	b.n	16634 <_free_r+0x24>
   16688:	6821      	ldr	r1, [r4, #0]
   1668a:	1860      	adds	r0, r4, r1
   1668c:	4282      	cmp	r2, r0
   1668e:	d103      	bne.n	16698 <_free_r+0x88>
   16690:	6810      	ldr	r0, [r2, #0]
   16692:	6852      	ldr	r2, [r2, #4]
   16694:	1841      	adds	r1, r0, r1
   16696:	6021      	str	r1, [r4, #0]
   16698:	6062      	str	r2, [r4, #4]
   1669a:	605c      	str	r4, [r3, #4]
   1669c:	e7ca      	b.n	16634 <_free_r+0x24>
   1669e:	46c0      	nop			; (mov r8, r8)
   166a0:	20000f58 	.word	0x20000f58

000166a4 <_malloc_r>:
   166a4:	2303      	movs	r3, #3
   166a6:	b570      	push	{r4, r5, r6, lr}
   166a8:	1ccd      	adds	r5, r1, #3
   166aa:	439d      	bics	r5, r3
   166ac:	3508      	adds	r5, #8
   166ae:	0006      	movs	r6, r0
   166b0:	2d0c      	cmp	r5, #12
   166b2:	d21e      	bcs.n	166f2 <_malloc_r+0x4e>
   166b4:	250c      	movs	r5, #12
   166b6:	42a9      	cmp	r1, r5
   166b8:	d81d      	bhi.n	166f6 <_malloc_r+0x52>
   166ba:	0030      	movs	r0, r6
   166bc:	f000 fe66 	bl	1738c <__malloc_lock>
   166c0:	4a25      	ldr	r2, [pc, #148]	; (16758 <_malloc_r+0xb4>)
   166c2:	6814      	ldr	r4, [r2, #0]
   166c4:	0021      	movs	r1, r4
   166c6:	2900      	cmp	r1, #0
   166c8:	d119      	bne.n	166fe <_malloc_r+0x5a>
   166ca:	4c24      	ldr	r4, [pc, #144]	; (1675c <_malloc_r+0xb8>)
   166cc:	6823      	ldr	r3, [r4, #0]
   166ce:	2b00      	cmp	r3, #0
   166d0:	d103      	bne.n	166da <_malloc_r+0x36>
   166d2:	0030      	movs	r0, r6
   166d4:	f000 f8dc 	bl	16890 <_sbrk_r>
   166d8:	6020      	str	r0, [r4, #0]
   166da:	0029      	movs	r1, r5
   166dc:	0030      	movs	r0, r6
   166de:	f000 f8d7 	bl	16890 <_sbrk_r>
   166e2:	1c43      	adds	r3, r0, #1
   166e4:	d12c      	bne.n	16740 <_malloc_r+0x9c>
   166e6:	230c      	movs	r3, #12
   166e8:	0030      	movs	r0, r6
   166ea:	6033      	str	r3, [r6, #0]
   166ec:	f000 fe4f 	bl	1738e <__malloc_unlock>
   166f0:	e003      	b.n	166fa <_malloc_r+0x56>
   166f2:	2d00      	cmp	r5, #0
   166f4:	dadf      	bge.n	166b6 <_malloc_r+0x12>
   166f6:	230c      	movs	r3, #12
   166f8:	6033      	str	r3, [r6, #0]
   166fa:	2000      	movs	r0, #0
   166fc:	bd70      	pop	{r4, r5, r6, pc}
   166fe:	680b      	ldr	r3, [r1, #0]
   16700:	1b5b      	subs	r3, r3, r5
   16702:	d41a      	bmi.n	1673a <_malloc_r+0x96>
   16704:	2b0b      	cmp	r3, #11
   16706:	d903      	bls.n	16710 <_malloc_r+0x6c>
   16708:	600b      	str	r3, [r1, #0]
   1670a:	18cc      	adds	r4, r1, r3
   1670c:	6025      	str	r5, [r4, #0]
   1670e:	e003      	b.n	16718 <_malloc_r+0x74>
   16710:	428c      	cmp	r4, r1
   16712:	d10e      	bne.n	16732 <_malloc_r+0x8e>
   16714:	6863      	ldr	r3, [r4, #4]
   16716:	6013      	str	r3, [r2, #0]
   16718:	0030      	movs	r0, r6
   1671a:	f000 fe38 	bl	1738e <__malloc_unlock>
   1671e:	0020      	movs	r0, r4
   16720:	2207      	movs	r2, #7
   16722:	300b      	adds	r0, #11
   16724:	1d23      	adds	r3, r4, #4
   16726:	4390      	bics	r0, r2
   16728:	1ac3      	subs	r3, r0, r3
   1672a:	d0e7      	beq.n	166fc <_malloc_r+0x58>
   1672c:	425a      	negs	r2, r3
   1672e:	50e2      	str	r2, [r4, r3]
   16730:	e7e4      	b.n	166fc <_malloc_r+0x58>
   16732:	684b      	ldr	r3, [r1, #4]
   16734:	6063      	str	r3, [r4, #4]
   16736:	000c      	movs	r4, r1
   16738:	e7ee      	b.n	16718 <_malloc_r+0x74>
   1673a:	000c      	movs	r4, r1
   1673c:	6849      	ldr	r1, [r1, #4]
   1673e:	e7c2      	b.n	166c6 <_malloc_r+0x22>
   16740:	2303      	movs	r3, #3
   16742:	1cc4      	adds	r4, r0, #3
   16744:	439c      	bics	r4, r3
   16746:	42a0      	cmp	r0, r4
   16748:	d0e0      	beq.n	1670c <_malloc_r+0x68>
   1674a:	1a21      	subs	r1, r4, r0
   1674c:	0030      	movs	r0, r6
   1674e:	f000 f89f 	bl	16890 <_sbrk_r>
   16752:	1c43      	adds	r3, r0, #1
   16754:	d1da      	bne.n	1670c <_malloc_r+0x68>
   16756:	e7c6      	b.n	166e6 <_malloc_r+0x42>
   16758:	20000f58 	.word	0x20000f58
   1675c:	20000f5c 	.word	0x20000f5c

00016760 <iprintf>:
   16760:	b40f      	push	{r0, r1, r2, r3}
   16762:	4b0b      	ldr	r3, [pc, #44]	; (16790 <iprintf+0x30>)
   16764:	b513      	push	{r0, r1, r4, lr}
   16766:	681c      	ldr	r4, [r3, #0]
   16768:	2c00      	cmp	r4, #0
   1676a:	d005      	beq.n	16778 <iprintf+0x18>
   1676c:	69a3      	ldr	r3, [r4, #24]
   1676e:	2b00      	cmp	r3, #0
   16770:	d102      	bne.n	16778 <iprintf+0x18>
   16772:	0020      	movs	r0, r4
   16774:	f000 fcca 	bl	1710c <__sinit>
   16778:	ab05      	add	r3, sp, #20
   1677a:	9a04      	ldr	r2, [sp, #16]
   1677c:	68a1      	ldr	r1, [r4, #8]
   1677e:	0020      	movs	r0, r4
   16780:	9301      	str	r3, [sp, #4]
   16782:	f000 ff93 	bl	176ac <_vfiprintf_r>
   16786:	bc16      	pop	{r1, r2, r4}
   16788:	bc08      	pop	{r3}
   1678a:	b004      	add	sp, #16
   1678c:	4718      	bx	r3
   1678e:	46c0      	nop			; (mov r8, r8)
   16790:	2000016c 	.word	0x2000016c

00016794 <putchar>:
   16794:	4b08      	ldr	r3, [pc, #32]	; (167b8 <putchar+0x24>)
   16796:	b570      	push	{r4, r5, r6, lr}
   16798:	681c      	ldr	r4, [r3, #0]
   1679a:	0005      	movs	r5, r0
   1679c:	2c00      	cmp	r4, #0
   1679e:	d005      	beq.n	167ac <putchar+0x18>
   167a0:	69a3      	ldr	r3, [r4, #24]
   167a2:	2b00      	cmp	r3, #0
   167a4:	d102      	bne.n	167ac <putchar+0x18>
   167a6:	0020      	movs	r0, r4
   167a8:	f000 fcb0 	bl	1710c <__sinit>
   167ac:	0029      	movs	r1, r5
   167ae:	68a2      	ldr	r2, [r4, #8]
   167b0:	0020      	movs	r0, r4
   167b2:	f001 fd31 	bl	18218 <_putc_r>
   167b6:	bd70      	pop	{r4, r5, r6, pc}
   167b8:	2000016c 	.word	0x2000016c

000167bc <_puts_r>:
   167bc:	b570      	push	{r4, r5, r6, lr}
   167be:	0005      	movs	r5, r0
   167c0:	000e      	movs	r6, r1
   167c2:	2800      	cmp	r0, #0
   167c4:	d004      	beq.n	167d0 <_puts_r+0x14>
   167c6:	6983      	ldr	r3, [r0, #24]
   167c8:	2b00      	cmp	r3, #0
   167ca:	d101      	bne.n	167d0 <_puts_r+0x14>
   167cc:	f000 fc9e 	bl	1710c <__sinit>
   167d0:	69ab      	ldr	r3, [r5, #24]
   167d2:	68ac      	ldr	r4, [r5, #8]
   167d4:	2b00      	cmp	r3, #0
   167d6:	d102      	bne.n	167de <_puts_r+0x22>
   167d8:	0028      	movs	r0, r5
   167da:	f000 fc97 	bl	1710c <__sinit>
   167de:	4b24      	ldr	r3, [pc, #144]	; (16870 <_puts_r+0xb4>)
   167e0:	429c      	cmp	r4, r3
   167e2:	d10f      	bne.n	16804 <_puts_r+0x48>
   167e4:	686c      	ldr	r4, [r5, #4]
   167e6:	89a3      	ldrh	r3, [r4, #12]
   167e8:	071b      	lsls	r3, r3, #28
   167ea:	d502      	bpl.n	167f2 <_puts_r+0x36>
   167ec:	6923      	ldr	r3, [r4, #16]
   167ee:	2b00      	cmp	r3, #0
   167f0:	d120      	bne.n	16834 <_puts_r+0x78>
   167f2:	0021      	movs	r1, r4
   167f4:	0028      	movs	r0, r5
   167f6:	f000 fb07 	bl	16e08 <__swsetup_r>
   167fa:	2800      	cmp	r0, #0
   167fc:	d01a      	beq.n	16834 <_puts_r+0x78>
   167fe:	2001      	movs	r0, #1
   16800:	4240      	negs	r0, r0
   16802:	bd70      	pop	{r4, r5, r6, pc}
   16804:	4b1b      	ldr	r3, [pc, #108]	; (16874 <_puts_r+0xb8>)
   16806:	429c      	cmp	r4, r3
   16808:	d101      	bne.n	1680e <_puts_r+0x52>
   1680a:	68ac      	ldr	r4, [r5, #8]
   1680c:	e7eb      	b.n	167e6 <_puts_r+0x2a>
   1680e:	4b1a      	ldr	r3, [pc, #104]	; (16878 <_puts_r+0xbc>)
   16810:	429c      	cmp	r4, r3
   16812:	d1e8      	bne.n	167e6 <_puts_r+0x2a>
   16814:	68ec      	ldr	r4, [r5, #12]
   16816:	e7e6      	b.n	167e6 <_puts_r+0x2a>
   16818:	3b01      	subs	r3, #1
   1681a:	3601      	adds	r6, #1
   1681c:	60a3      	str	r3, [r4, #8]
   1681e:	2b00      	cmp	r3, #0
   16820:	da04      	bge.n	1682c <_puts_r+0x70>
   16822:	69a2      	ldr	r2, [r4, #24]
   16824:	4293      	cmp	r3, r2
   16826:	db16      	blt.n	16856 <_puts_r+0x9a>
   16828:	290a      	cmp	r1, #10
   1682a:	d014      	beq.n	16856 <_puts_r+0x9a>
   1682c:	6823      	ldr	r3, [r4, #0]
   1682e:	1c5a      	adds	r2, r3, #1
   16830:	6022      	str	r2, [r4, #0]
   16832:	7019      	strb	r1, [r3, #0]
   16834:	7831      	ldrb	r1, [r6, #0]
   16836:	68a3      	ldr	r3, [r4, #8]
   16838:	2900      	cmp	r1, #0
   1683a:	d1ed      	bne.n	16818 <_puts_r+0x5c>
   1683c:	3b01      	subs	r3, #1
   1683e:	60a3      	str	r3, [r4, #8]
   16840:	2b00      	cmp	r3, #0
   16842:	da0f      	bge.n	16864 <_puts_r+0xa8>
   16844:	0022      	movs	r2, r4
   16846:	310a      	adds	r1, #10
   16848:	0028      	movs	r0, r5
   1684a:	f000 fa87 	bl	16d5c <__swbuf_r>
   1684e:	1c43      	adds	r3, r0, #1
   16850:	d0d5      	beq.n	167fe <_puts_r+0x42>
   16852:	200a      	movs	r0, #10
   16854:	e7d5      	b.n	16802 <_puts_r+0x46>
   16856:	0022      	movs	r2, r4
   16858:	0028      	movs	r0, r5
   1685a:	f000 fa7f 	bl	16d5c <__swbuf_r>
   1685e:	1c43      	adds	r3, r0, #1
   16860:	d1e8      	bne.n	16834 <_puts_r+0x78>
   16862:	e7cc      	b.n	167fe <_puts_r+0x42>
   16864:	200a      	movs	r0, #10
   16866:	6823      	ldr	r3, [r4, #0]
   16868:	1c5a      	adds	r2, r3, #1
   1686a:	6022      	str	r2, [r4, #0]
   1686c:	7018      	strb	r0, [r3, #0]
   1686e:	e7c8      	b.n	16802 <_puts_r+0x46>
   16870:	0001afec 	.word	0x0001afec
   16874:	0001b00c 	.word	0x0001b00c
   16878:	0001afcc 	.word	0x0001afcc

0001687c <puts>:
   1687c:	b510      	push	{r4, lr}
   1687e:	4b03      	ldr	r3, [pc, #12]	; (1688c <puts+0x10>)
   16880:	0001      	movs	r1, r0
   16882:	6818      	ldr	r0, [r3, #0]
   16884:	f7ff ff9a 	bl	167bc <_puts_r>
   16888:	bd10      	pop	{r4, pc}
   1688a:	46c0      	nop			; (mov r8, r8)
   1688c:	2000016c 	.word	0x2000016c

00016890 <_sbrk_r>:
   16890:	2300      	movs	r3, #0
   16892:	b570      	push	{r4, r5, r6, lr}
   16894:	4c06      	ldr	r4, [pc, #24]	; (168b0 <_sbrk_r+0x20>)
   16896:	0005      	movs	r5, r0
   16898:	0008      	movs	r0, r1
   1689a:	6023      	str	r3, [r4, #0]
   1689c:	f7f9 fff6 	bl	1088c <_sbrk>
   168a0:	1c43      	adds	r3, r0, #1
   168a2:	d103      	bne.n	168ac <_sbrk_r+0x1c>
   168a4:	6823      	ldr	r3, [r4, #0]
   168a6:	2b00      	cmp	r3, #0
   168a8:	d000      	beq.n	168ac <_sbrk_r+0x1c>
   168aa:	602b      	str	r3, [r5, #0]
   168ac:	bd70      	pop	{r4, r5, r6, pc}
   168ae:	46c0      	nop			; (mov r8, r8)
   168b0:	20001334 	.word	0x20001334

000168b4 <iscanf>:
   168b4:	b40f      	push	{r0, r1, r2, r3}
   168b6:	4b0b      	ldr	r3, [pc, #44]	; (168e4 <iscanf+0x30>)
   168b8:	b513      	push	{r0, r1, r4, lr}
   168ba:	681c      	ldr	r4, [r3, #0]
   168bc:	2c00      	cmp	r4, #0
   168be:	d005      	beq.n	168cc <iscanf+0x18>
   168c0:	69a3      	ldr	r3, [r4, #24]
   168c2:	2b00      	cmp	r3, #0
   168c4:	d102      	bne.n	168cc <iscanf+0x18>
   168c6:	0020      	movs	r0, r4
   168c8:	f000 fc20 	bl	1710c <__sinit>
   168cc:	ab05      	add	r3, sp, #20
   168ce:	9a04      	ldr	r2, [sp, #16]
   168d0:	6861      	ldr	r1, [r4, #4]
   168d2:	0020      	movs	r0, r4
   168d4:	9301      	str	r3, [sp, #4]
   168d6:	f001 fb13 	bl	17f00 <_vfiscanf_r>
   168da:	bc16      	pop	{r1, r2, r4}
   168dc:	bc08      	pop	{r3}
   168de:	b004      	add	sp, #16
   168e0:	4718      	bx	r3
   168e2:	46c0      	nop			; (mov r8, r8)
   168e4:	2000016c 	.word	0x2000016c

000168e8 <setbuf>:
   168e8:	424a      	negs	r2, r1
   168ea:	414a      	adcs	r2, r1
   168ec:	2380      	movs	r3, #128	; 0x80
   168ee:	b510      	push	{r4, lr}
   168f0:	0052      	lsls	r2, r2, #1
   168f2:	00db      	lsls	r3, r3, #3
   168f4:	f000 f802 	bl	168fc <setvbuf>
   168f8:	bd10      	pop	{r4, pc}
	...

000168fc <setvbuf>:
   168fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   168fe:	001d      	movs	r5, r3
   16900:	4b4f      	ldr	r3, [pc, #316]	; (16a40 <setvbuf+0x144>)
   16902:	b085      	sub	sp, #20
   16904:	681e      	ldr	r6, [r3, #0]
   16906:	0004      	movs	r4, r0
   16908:	000f      	movs	r7, r1
   1690a:	9200      	str	r2, [sp, #0]
   1690c:	2e00      	cmp	r6, #0
   1690e:	d005      	beq.n	1691c <setvbuf+0x20>
   16910:	69b3      	ldr	r3, [r6, #24]
   16912:	2b00      	cmp	r3, #0
   16914:	d102      	bne.n	1691c <setvbuf+0x20>
   16916:	0030      	movs	r0, r6
   16918:	f000 fbf8 	bl	1710c <__sinit>
   1691c:	4b49      	ldr	r3, [pc, #292]	; (16a44 <setvbuf+0x148>)
   1691e:	429c      	cmp	r4, r3
   16920:	d150      	bne.n	169c4 <setvbuf+0xc8>
   16922:	6874      	ldr	r4, [r6, #4]
   16924:	9b00      	ldr	r3, [sp, #0]
   16926:	2b02      	cmp	r3, #2
   16928:	d005      	beq.n	16936 <setvbuf+0x3a>
   1692a:	2b01      	cmp	r3, #1
   1692c:	d900      	bls.n	16930 <setvbuf+0x34>
   1692e:	e084      	b.n	16a3a <setvbuf+0x13e>
   16930:	2d00      	cmp	r5, #0
   16932:	da00      	bge.n	16936 <setvbuf+0x3a>
   16934:	e081      	b.n	16a3a <setvbuf+0x13e>
   16936:	0021      	movs	r1, r4
   16938:	0030      	movs	r0, r6
   1693a:	f000 fb65 	bl	17008 <_fflush_r>
   1693e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16940:	2900      	cmp	r1, #0
   16942:	d008      	beq.n	16956 <setvbuf+0x5a>
   16944:	0023      	movs	r3, r4
   16946:	3344      	adds	r3, #68	; 0x44
   16948:	4299      	cmp	r1, r3
   1694a:	d002      	beq.n	16952 <setvbuf+0x56>
   1694c:	0030      	movs	r0, r6
   1694e:	f7ff fe5f 	bl	16610 <_free_r>
   16952:	2300      	movs	r3, #0
   16954:	6363      	str	r3, [r4, #52]	; 0x34
   16956:	2300      	movs	r3, #0
   16958:	61a3      	str	r3, [r4, #24]
   1695a:	6063      	str	r3, [r4, #4]
   1695c:	89a3      	ldrh	r3, [r4, #12]
   1695e:	061b      	lsls	r3, r3, #24
   16960:	d503      	bpl.n	1696a <setvbuf+0x6e>
   16962:	6921      	ldr	r1, [r4, #16]
   16964:	0030      	movs	r0, r6
   16966:	f7ff fe53 	bl	16610 <_free_r>
   1696a:	89a3      	ldrh	r3, [r4, #12]
   1696c:	4a36      	ldr	r2, [pc, #216]	; (16a48 <setvbuf+0x14c>)
   1696e:	4013      	ands	r3, r2
   16970:	81a3      	strh	r3, [r4, #12]
   16972:	9b00      	ldr	r3, [sp, #0]
   16974:	2b02      	cmp	r3, #2
   16976:	d05a      	beq.n	16a2e <setvbuf+0x132>
   16978:	ab03      	add	r3, sp, #12
   1697a:	aa02      	add	r2, sp, #8
   1697c:	0021      	movs	r1, r4
   1697e:	0030      	movs	r0, r6
   16980:	f000 fc86 	bl	17290 <__swhatbuf_r>
   16984:	89a3      	ldrh	r3, [r4, #12]
   16986:	4318      	orrs	r0, r3
   16988:	81a0      	strh	r0, [r4, #12]
   1698a:	2d00      	cmp	r5, #0
   1698c:	d124      	bne.n	169d8 <setvbuf+0xdc>
   1698e:	9d02      	ldr	r5, [sp, #8]
   16990:	0028      	movs	r0, r5
   16992:	f7ff fe05 	bl	165a0 <malloc>
   16996:	9501      	str	r5, [sp, #4]
   16998:	1e07      	subs	r7, r0, #0
   1699a:	d142      	bne.n	16a22 <setvbuf+0x126>
   1699c:	9b02      	ldr	r3, [sp, #8]
   1699e:	9301      	str	r3, [sp, #4]
   169a0:	42ab      	cmp	r3, r5
   169a2:	d139      	bne.n	16a18 <setvbuf+0x11c>
   169a4:	2001      	movs	r0, #1
   169a6:	4240      	negs	r0, r0
   169a8:	2302      	movs	r3, #2
   169aa:	89a2      	ldrh	r2, [r4, #12]
   169ac:	4313      	orrs	r3, r2
   169ae:	81a3      	strh	r3, [r4, #12]
   169b0:	2300      	movs	r3, #0
   169b2:	60a3      	str	r3, [r4, #8]
   169b4:	0023      	movs	r3, r4
   169b6:	3347      	adds	r3, #71	; 0x47
   169b8:	6023      	str	r3, [r4, #0]
   169ba:	6123      	str	r3, [r4, #16]
   169bc:	2301      	movs	r3, #1
   169be:	6163      	str	r3, [r4, #20]
   169c0:	b005      	add	sp, #20
   169c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   169c4:	4b21      	ldr	r3, [pc, #132]	; (16a4c <setvbuf+0x150>)
   169c6:	429c      	cmp	r4, r3
   169c8:	d101      	bne.n	169ce <setvbuf+0xd2>
   169ca:	68b4      	ldr	r4, [r6, #8]
   169cc:	e7aa      	b.n	16924 <setvbuf+0x28>
   169ce:	4b20      	ldr	r3, [pc, #128]	; (16a50 <setvbuf+0x154>)
   169d0:	429c      	cmp	r4, r3
   169d2:	d1a7      	bne.n	16924 <setvbuf+0x28>
   169d4:	68f4      	ldr	r4, [r6, #12]
   169d6:	e7a5      	b.n	16924 <setvbuf+0x28>
   169d8:	2f00      	cmp	r7, #0
   169da:	d0d9      	beq.n	16990 <setvbuf+0x94>
   169dc:	69b3      	ldr	r3, [r6, #24]
   169de:	2b00      	cmp	r3, #0
   169e0:	d102      	bne.n	169e8 <setvbuf+0xec>
   169e2:	0030      	movs	r0, r6
   169e4:	f000 fb92 	bl	1710c <__sinit>
   169e8:	9b00      	ldr	r3, [sp, #0]
   169ea:	2b01      	cmp	r3, #1
   169ec:	d103      	bne.n	169f6 <setvbuf+0xfa>
   169ee:	89a3      	ldrh	r3, [r4, #12]
   169f0:	9a00      	ldr	r2, [sp, #0]
   169f2:	431a      	orrs	r2, r3
   169f4:	81a2      	strh	r2, [r4, #12]
   169f6:	2008      	movs	r0, #8
   169f8:	89a3      	ldrh	r3, [r4, #12]
   169fa:	6027      	str	r7, [r4, #0]
   169fc:	6127      	str	r7, [r4, #16]
   169fe:	6165      	str	r5, [r4, #20]
   16a00:	4018      	ands	r0, r3
   16a02:	d018      	beq.n	16a36 <setvbuf+0x13a>
   16a04:	2001      	movs	r0, #1
   16a06:	4018      	ands	r0, r3
   16a08:	2300      	movs	r3, #0
   16a0a:	4298      	cmp	r0, r3
   16a0c:	d011      	beq.n	16a32 <setvbuf+0x136>
   16a0e:	426d      	negs	r5, r5
   16a10:	60a3      	str	r3, [r4, #8]
   16a12:	61a5      	str	r5, [r4, #24]
   16a14:	0018      	movs	r0, r3
   16a16:	e7d3      	b.n	169c0 <setvbuf+0xc4>
   16a18:	9801      	ldr	r0, [sp, #4]
   16a1a:	f7ff fdc1 	bl	165a0 <malloc>
   16a1e:	1e07      	subs	r7, r0, #0
   16a20:	d0c0      	beq.n	169a4 <setvbuf+0xa8>
   16a22:	2380      	movs	r3, #128	; 0x80
   16a24:	89a2      	ldrh	r2, [r4, #12]
   16a26:	9d01      	ldr	r5, [sp, #4]
   16a28:	4313      	orrs	r3, r2
   16a2a:	81a3      	strh	r3, [r4, #12]
   16a2c:	e7d6      	b.n	169dc <setvbuf+0xe0>
   16a2e:	2000      	movs	r0, #0
   16a30:	e7ba      	b.n	169a8 <setvbuf+0xac>
   16a32:	60a5      	str	r5, [r4, #8]
   16a34:	e7c4      	b.n	169c0 <setvbuf+0xc4>
   16a36:	60a0      	str	r0, [r4, #8]
   16a38:	e7c2      	b.n	169c0 <setvbuf+0xc4>
   16a3a:	2001      	movs	r0, #1
   16a3c:	4240      	negs	r0, r0
   16a3e:	e7bf      	b.n	169c0 <setvbuf+0xc4>
   16a40:	2000016c 	.word	0x2000016c
   16a44:	0001afec 	.word	0x0001afec
   16a48:	fffff35c 	.word	0xfffff35c
   16a4c:	0001b00c 	.word	0x0001b00c
   16a50:	0001afcc 	.word	0x0001afcc

00016a54 <sniprintf>:
   16a54:	b40c      	push	{r2, r3}
   16a56:	b530      	push	{r4, r5, lr}
   16a58:	4b16      	ldr	r3, [pc, #88]	; (16ab4 <sniprintf+0x60>)
   16a5a:	b09d      	sub	sp, #116	; 0x74
   16a5c:	1e0c      	subs	r4, r1, #0
   16a5e:	681d      	ldr	r5, [r3, #0]
   16a60:	da08      	bge.n	16a74 <sniprintf+0x20>
   16a62:	238b      	movs	r3, #139	; 0x8b
   16a64:	2001      	movs	r0, #1
   16a66:	602b      	str	r3, [r5, #0]
   16a68:	4240      	negs	r0, r0
   16a6a:	b01d      	add	sp, #116	; 0x74
   16a6c:	bc30      	pop	{r4, r5}
   16a6e:	bc08      	pop	{r3}
   16a70:	b002      	add	sp, #8
   16a72:	4718      	bx	r3
   16a74:	2382      	movs	r3, #130	; 0x82
   16a76:	a902      	add	r1, sp, #8
   16a78:	009b      	lsls	r3, r3, #2
   16a7a:	818b      	strh	r3, [r1, #12]
   16a7c:	2300      	movs	r3, #0
   16a7e:	9002      	str	r0, [sp, #8]
   16a80:	6108      	str	r0, [r1, #16]
   16a82:	429c      	cmp	r4, r3
   16a84:	d000      	beq.n	16a88 <sniprintf+0x34>
   16a86:	1e63      	subs	r3, r4, #1
   16a88:	608b      	str	r3, [r1, #8]
   16a8a:	614b      	str	r3, [r1, #20]
   16a8c:	2301      	movs	r3, #1
   16a8e:	425b      	negs	r3, r3
   16a90:	81cb      	strh	r3, [r1, #14]
   16a92:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16a94:	ab21      	add	r3, sp, #132	; 0x84
   16a96:	0028      	movs	r0, r5
   16a98:	9301      	str	r3, [sp, #4]
   16a9a:	f000 fcdb 	bl	17454 <_svfiprintf_r>
   16a9e:	1c43      	adds	r3, r0, #1
   16aa0:	da01      	bge.n	16aa6 <sniprintf+0x52>
   16aa2:	238b      	movs	r3, #139	; 0x8b
   16aa4:	602b      	str	r3, [r5, #0]
   16aa6:	2c00      	cmp	r4, #0
   16aa8:	d0df      	beq.n	16a6a <sniprintf+0x16>
   16aaa:	2300      	movs	r3, #0
   16aac:	9a02      	ldr	r2, [sp, #8]
   16aae:	7013      	strb	r3, [r2, #0]
   16ab0:	e7db      	b.n	16a6a <sniprintf+0x16>
   16ab2:	46c0      	nop			; (mov r8, r8)
   16ab4:	2000016c 	.word	0x2000016c

00016ab8 <siprintf>:
   16ab8:	b40e      	push	{r1, r2, r3}
   16aba:	b510      	push	{r4, lr}
   16abc:	b09d      	sub	sp, #116	; 0x74
   16abe:	a902      	add	r1, sp, #8
   16ac0:	9002      	str	r0, [sp, #8]
   16ac2:	6108      	str	r0, [r1, #16]
   16ac4:	480b      	ldr	r0, [pc, #44]	; (16af4 <siprintf+0x3c>)
   16ac6:	2482      	movs	r4, #130	; 0x82
   16ac8:	6088      	str	r0, [r1, #8]
   16aca:	6148      	str	r0, [r1, #20]
   16acc:	2001      	movs	r0, #1
   16ace:	4240      	negs	r0, r0
   16ad0:	ab1f      	add	r3, sp, #124	; 0x7c
   16ad2:	81c8      	strh	r0, [r1, #14]
   16ad4:	4808      	ldr	r0, [pc, #32]	; (16af8 <siprintf+0x40>)
   16ad6:	cb04      	ldmia	r3!, {r2}
   16ad8:	00a4      	lsls	r4, r4, #2
   16ada:	6800      	ldr	r0, [r0, #0]
   16adc:	9301      	str	r3, [sp, #4]
   16ade:	818c      	strh	r4, [r1, #12]
   16ae0:	f000 fcb8 	bl	17454 <_svfiprintf_r>
   16ae4:	2300      	movs	r3, #0
   16ae6:	9a02      	ldr	r2, [sp, #8]
   16ae8:	7013      	strb	r3, [r2, #0]
   16aea:	b01d      	add	sp, #116	; 0x74
   16aec:	bc10      	pop	{r4}
   16aee:	bc08      	pop	{r3}
   16af0:	b003      	add	sp, #12
   16af2:	4718      	bx	r3
   16af4:	7fffffff 	.word	0x7fffffff
   16af8:	2000016c 	.word	0x2000016c

00016afc <strcmp>:
   16afc:	7802      	ldrb	r2, [r0, #0]
   16afe:	780b      	ldrb	r3, [r1, #0]
   16b00:	2a00      	cmp	r2, #0
   16b02:	d003      	beq.n	16b0c <strcmp+0x10>
   16b04:	3001      	adds	r0, #1
   16b06:	3101      	adds	r1, #1
   16b08:	429a      	cmp	r2, r3
   16b0a:	d0f7      	beq.n	16afc <strcmp>
   16b0c:	1ad0      	subs	r0, r2, r3
   16b0e:	4770      	bx	lr

00016b10 <strcpy>:
   16b10:	1c03      	adds	r3, r0, #0
   16b12:	780a      	ldrb	r2, [r1, #0]
   16b14:	3101      	adds	r1, #1
   16b16:	701a      	strb	r2, [r3, #0]
   16b18:	3301      	adds	r3, #1
   16b1a:	2a00      	cmp	r2, #0
   16b1c:	d1f9      	bne.n	16b12 <strcpy+0x2>
   16b1e:	4770      	bx	lr

00016b20 <strdup>:
   16b20:	b510      	push	{r4, lr}
   16b22:	4b03      	ldr	r3, [pc, #12]	; (16b30 <strdup+0x10>)
   16b24:	0001      	movs	r1, r0
   16b26:	6818      	ldr	r0, [r3, #0]
   16b28:	f000 f804 	bl	16b34 <_strdup_r>
   16b2c:	bd10      	pop	{r4, pc}
   16b2e:	46c0      	nop			; (mov r8, r8)
   16b30:	2000016c 	.word	0x2000016c

00016b34 <_strdup_r>:
   16b34:	b570      	push	{r4, r5, r6, lr}
   16b36:	0005      	movs	r5, r0
   16b38:	0008      	movs	r0, r1
   16b3a:	000e      	movs	r6, r1
   16b3c:	f000 f80d 	bl	16b5a <strlen>
   16b40:	1c44      	adds	r4, r0, #1
   16b42:	0021      	movs	r1, r4
   16b44:	0028      	movs	r0, r5
   16b46:	f7ff fdad 	bl	166a4 <_malloc_r>
   16b4a:	1e05      	subs	r5, r0, #0
   16b4c:	d003      	beq.n	16b56 <_strdup_r+0x22>
   16b4e:	0022      	movs	r2, r4
   16b50:	0031      	movs	r1, r6
   16b52:	f7ff fd39 	bl	165c8 <memcpy>
   16b56:	0028      	movs	r0, r5
   16b58:	bd70      	pop	{r4, r5, r6, pc}

00016b5a <strlen>:
   16b5a:	2300      	movs	r3, #0
   16b5c:	5cc2      	ldrb	r2, [r0, r3]
   16b5e:	3301      	adds	r3, #1
   16b60:	2a00      	cmp	r2, #0
   16b62:	d1fb      	bne.n	16b5c <strlen+0x2>
   16b64:	1e58      	subs	r0, r3, #1
   16b66:	4770      	bx	lr

00016b68 <strncmp>:
   16b68:	2300      	movs	r3, #0
   16b6a:	b530      	push	{r4, r5, lr}
   16b6c:	429a      	cmp	r2, r3
   16b6e:	d00a      	beq.n	16b86 <strncmp+0x1e>
   16b70:	3a01      	subs	r2, #1
   16b72:	5cc4      	ldrb	r4, [r0, r3]
   16b74:	5ccd      	ldrb	r5, [r1, r3]
   16b76:	42ac      	cmp	r4, r5
   16b78:	d104      	bne.n	16b84 <strncmp+0x1c>
   16b7a:	429a      	cmp	r2, r3
   16b7c:	d002      	beq.n	16b84 <strncmp+0x1c>
   16b7e:	3301      	adds	r3, #1
   16b80:	2c00      	cmp	r4, #0
   16b82:	d1f6      	bne.n	16b72 <strncmp+0xa>
   16b84:	1b63      	subs	r3, r4, r5
   16b86:	0018      	movs	r0, r3
   16b88:	bd30      	pop	{r4, r5, pc}

00016b8a <strncpy>:
   16b8a:	b570      	push	{r4, r5, r6, lr}
   16b8c:	0004      	movs	r4, r0
   16b8e:	2a00      	cmp	r2, #0
   16b90:	d100      	bne.n	16b94 <strncpy+0xa>
   16b92:	bd70      	pop	{r4, r5, r6, pc}
   16b94:	780d      	ldrb	r5, [r1, #0]
   16b96:	1e56      	subs	r6, r2, #1
   16b98:	1c63      	adds	r3, r4, #1
   16b9a:	7025      	strb	r5, [r4, #0]
   16b9c:	3101      	adds	r1, #1
   16b9e:	2d00      	cmp	r5, #0
   16ba0:	d105      	bne.n	16bae <strncpy+0x24>
   16ba2:	18a4      	adds	r4, r4, r2
   16ba4:	429c      	cmp	r4, r3
   16ba6:	d0f4      	beq.n	16b92 <strncpy+0x8>
   16ba8:	701d      	strb	r5, [r3, #0]
   16baa:	3301      	adds	r3, #1
   16bac:	e7fa      	b.n	16ba4 <strncpy+0x1a>
   16bae:	001c      	movs	r4, r3
   16bb0:	0032      	movs	r2, r6
   16bb2:	e7ec      	b.n	16b8e <strncpy+0x4>

00016bb4 <strrchr>:
   16bb4:	b570      	push	{r4, r5, r6, lr}
   16bb6:	000d      	movs	r5, r1
   16bb8:	2400      	movs	r4, #0
   16bba:	2900      	cmp	r1, #0
   16bbc:	d105      	bne.n	16bca <strrchr+0x16>
   16bbe:	f001 fc7b 	bl	184b8 <strchr>
   16bc2:	0004      	movs	r4, r0
   16bc4:	e006      	b.n	16bd4 <strrchr+0x20>
   16bc6:	001c      	movs	r4, r3
   16bc8:	1c58      	adds	r0, r3, #1
   16bca:	0029      	movs	r1, r5
   16bcc:	f001 fc74 	bl	184b8 <strchr>
   16bd0:	1e03      	subs	r3, r0, #0
   16bd2:	d1f8      	bne.n	16bc6 <strrchr+0x12>
   16bd4:	0020      	movs	r0, r4
   16bd6:	bd70      	pop	{r4, r5, r6, pc}

00016bd8 <strstr>:
   16bd8:	b510      	push	{r4, lr}
   16bda:	0002      	movs	r2, r0
   16bdc:	7800      	ldrb	r0, [r0, #0]
   16bde:	2800      	cmp	r0, #0
   16be0:	d104      	bne.n	16bec <strstr+0x14>
   16be2:	7809      	ldrb	r1, [r1, #0]
   16be4:	2900      	cmp	r1, #0
   16be6:	d00d      	beq.n	16c04 <strstr+0x2c>
   16be8:	bd10      	pop	{r4, pc}
   16bea:	3201      	adds	r2, #1
   16bec:	7810      	ldrb	r0, [r2, #0]
   16bee:	2800      	cmp	r0, #0
   16bf0:	d0fa      	beq.n	16be8 <strstr+0x10>
   16bf2:	2300      	movs	r3, #0
   16bf4:	5cc8      	ldrb	r0, [r1, r3]
   16bf6:	2800      	cmp	r0, #0
   16bf8:	d004      	beq.n	16c04 <strstr+0x2c>
   16bfa:	5cd4      	ldrb	r4, [r2, r3]
   16bfc:	4284      	cmp	r4, r0
   16bfe:	d1f4      	bne.n	16bea <strstr+0x12>
   16c00:	3301      	adds	r3, #1
   16c02:	e7f7      	b.n	16bf4 <strstr+0x1c>
   16c04:	0010      	movs	r0, r2
   16c06:	e7ef      	b.n	16be8 <strstr+0x10>

00016c08 <_strtol_l.isra.0>:
   16c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c0a:	001f      	movs	r7, r3
   16c0c:	000e      	movs	r6, r1
   16c0e:	b087      	sub	sp, #28
   16c10:	9005      	str	r0, [sp, #20]
   16c12:	9103      	str	r1, [sp, #12]
   16c14:	9202      	str	r2, [sp, #8]
   16c16:	980c      	ldr	r0, [sp, #48]	; 0x30
   16c18:	7834      	ldrb	r4, [r6, #0]
   16c1a:	f000 fb28 	bl	1726e <__locale_ctype_ptr_l>
   16c1e:	2208      	movs	r2, #8
   16c20:	1900      	adds	r0, r0, r4
   16c22:	7843      	ldrb	r3, [r0, #1]
   16c24:	1c75      	adds	r5, r6, #1
   16c26:	4013      	ands	r3, r2
   16c28:	d10c      	bne.n	16c44 <_strtol_l.isra.0+0x3c>
   16c2a:	2c2d      	cmp	r4, #45	; 0x2d
   16c2c:	d10c      	bne.n	16c48 <_strtol_l.isra.0+0x40>
   16c2e:	3301      	adds	r3, #1
   16c30:	782c      	ldrb	r4, [r5, #0]
   16c32:	9301      	str	r3, [sp, #4]
   16c34:	1cb5      	adds	r5, r6, #2
   16c36:	2f00      	cmp	r7, #0
   16c38:	d00c      	beq.n	16c54 <_strtol_l.isra.0+0x4c>
   16c3a:	2f10      	cmp	r7, #16
   16c3c:	d114      	bne.n	16c68 <_strtol_l.isra.0+0x60>
   16c3e:	2c30      	cmp	r4, #48	; 0x30
   16c40:	d00a      	beq.n	16c58 <_strtol_l.isra.0+0x50>
   16c42:	e011      	b.n	16c68 <_strtol_l.isra.0+0x60>
   16c44:	002e      	movs	r6, r5
   16c46:	e7e6      	b.n	16c16 <_strtol_l.isra.0+0xe>
   16c48:	9301      	str	r3, [sp, #4]
   16c4a:	2c2b      	cmp	r4, #43	; 0x2b
   16c4c:	d1f3      	bne.n	16c36 <_strtol_l.isra.0+0x2e>
   16c4e:	782c      	ldrb	r4, [r5, #0]
   16c50:	1cb5      	adds	r5, r6, #2
   16c52:	e7f0      	b.n	16c36 <_strtol_l.isra.0+0x2e>
   16c54:	2c30      	cmp	r4, #48	; 0x30
   16c56:	d12f      	bne.n	16cb8 <_strtol_l.isra.0+0xb0>
   16c58:	2220      	movs	r2, #32
   16c5a:	782b      	ldrb	r3, [r5, #0]
   16c5c:	4393      	bics	r3, r2
   16c5e:	2b58      	cmp	r3, #88	; 0x58
   16c60:	d151      	bne.n	16d06 <_strtol_l.isra.0+0xfe>
   16c62:	2710      	movs	r7, #16
   16c64:	786c      	ldrb	r4, [r5, #1]
   16c66:	3502      	adds	r5, #2
   16c68:	9b01      	ldr	r3, [sp, #4]
   16c6a:	4a29      	ldr	r2, [pc, #164]	; (16d10 <_strtol_l.isra.0+0x108>)
   16c6c:	0039      	movs	r1, r7
   16c6e:	189e      	adds	r6, r3, r2
   16c70:	0030      	movs	r0, r6
   16c72:	f7ff fb51 	bl	16318 <__aeabi_uidivmod>
   16c76:	0030      	movs	r0, r6
   16c78:	9104      	str	r1, [sp, #16]
   16c7a:	0039      	movs	r1, r7
   16c7c:	f7ff fac6 	bl	1620c <__udivsi3>
   16c80:	2101      	movs	r1, #1
   16c82:	2300      	movs	r3, #0
   16c84:	4249      	negs	r1, r1
   16c86:	0002      	movs	r2, r0
   16c88:	468c      	mov	ip, r1
   16c8a:	0018      	movs	r0, r3
   16c8c:	0021      	movs	r1, r4
   16c8e:	3930      	subs	r1, #48	; 0x30
   16c90:	2909      	cmp	r1, #9
   16c92:	d813      	bhi.n	16cbc <_strtol_l.isra.0+0xb4>
   16c94:	000c      	movs	r4, r1
   16c96:	42a7      	cmp	r7, r4
   16c98:	dd1c      	ble.n	16cd4 <_strtol_l.isra.0+0xcc>
   16c9a:	1c59      	adds	r1, r3, #1
   16c9c:	d009      	beq.n	16cb2 <_strtol_l.isra.0+0xaa>
   16c9e:	4663      	mov	r3, ip
   16ca0:	4282      	cmp	r2, r0
   16ca2:	d306      	bcc.n	16cb2 <_strtol_l.isra.0+0xaa>
   16ca4:	d102      	bne.n	16cac <_strtol_l.isra.0+0xa4>
   16ca6:	9904      	ldr	r1, [sp, #16]
   16ca8:	42a1      	cmp	r1, r4
   16caa:	db02      	blt.n	16cb2 <_strtol_l.isra.0+0xaa>
   16cac:	2301      	movs	r3, #1
   16cae:	4378      	muls	r0, r7
   16cb0:	1820      	adds	r0, r4, r0
   16cb2:	782c      	ldrb	r4, [r5, #0]
   16cb4:	3501      	adds	r5, #1
   16cb6:	e7e9      	b.n	16c8c <_strtol_l.isra.0+0x84>
   16cb8:	270a      	movs	r7, #10
   16cba:	e7d5      	b.n	16c68 <_strtol_l.isra.0+0x60>
   16cbc:	0021      	movs	r1, r4
   16cbe:	3941      	subs	r1, #65	; 0x41
   16cc0:	2919      	cmp	r1, #25
   16cc2:	d801      	bhi.n	16cc8 <_strtol_l.isra.0+0xc0>
   16cc4:	3c37      	subs	r4, #55	; 0x37
   16cc6:	e7e6      	b.n	16c96 <_strtol_l.isra.0+0x8e>
   16cc8:	0021      	movs	r1, r4
   16cca:	3961      	subs	r1, #97	; 0x61
   16ccc:	2919      	cmp	r1, #25
   16cce:	d801      	bhi.n	16cd4 <_strtol_l.isra.0+0xcc>
   16cd0:	3c57      	subs	r4, #87	; 0x57
   16cd2:	e7e0      	b.n	16c96 <_strtol_l.isra.0+0x8e>
   16cd4:	1c5a      	adds	r2, r3, #1
   16cd6:	d108      	bne.n	16cea <_strtol_l.isra.0+0xe2>
   16cd8:	9a05      	ldr	r2, [sp, #20]
   16cda:	3323      	adds	r3, #35	; 0x23
   16cdc:	6013      	str	r3, [r2, #0]
   16cde:	9b02      	ldr	r3, [sp, #8]
   16ce0:	0030      	movs	r0, r6
   16ce2:	2b00      	cmp	r3, #0
   16ce4:	d10b      	bne.n	16cfe <_strtol_l.isra.0+0xf6>
   16ce6:	b007      	add	sp, #28
   16ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16cea:	9a01      	ldr	r2, [sp, #4]
   16cec:	2a00      	cmp	r2, #0
   16cee:	d000      	beq.n	16cf2 <_strtol_l.isra.0+0xea>
   16cf0:	4240      	negs	r0, r0
   16cf2:	9a02      	ldr	r2, [sp, #8]
   16cf4:	2a00      	cmp	r2, #0
   16cf6:	d0f6      	beq.n	16ce6 <_strtol_l.isra.0+0xde>
   16cf8:	9a03      	ldr	r2, [sp, #12]
   16cfa:	2b00      	cmp	r3, #0
   16cfc:	d000      	beq.n	16d00 <_strtol_l.isra.0+0xf8>
   16cfe:	1e6a      	subs	r2, r5, #1
   16d00:	9b02      	ldr	r3, [sp, #8]
   16d02:	601a      	str	r2, [r3, #0]
   16d04:	e7ef      	b.n	16ce6 <_strtol_l.isra.0+0xde>
   16d06:	2430      	movs	r4, #48	; 0x30
   16d08:	2f00      	cmp	r7, #0
   16d0a:	d1ad      	bne.n	16c68 <_strtol_l.isra.0+0x60>
   16d0c:	3708      	adds	r7, #8
   16d0e:	e7ab      	b.n	16c68 <_strtol_l.isra.0+0x60>
   16d10:	7fffffff 	.word	0x7fffffff

00016d14 <_strtol_r>:
   16d14:	b513      	push	{r0, r1, r4, lr}
   16d16:	4c05      	ldr	r4, [pc, #20]	; (16d2c <_strtol_r+0x18>)
   16d18:	6824      	ldr	r4, [r4, #0]
   16d1a:	6a24      	ldr	r4, [r4, #32]
   16d1c:	2c00      	cmp	r4, #0
   16d1e:	d100      	bne.n	16d22 <_strtol_r+0xe>
   16d20:	4c03      	ldr	r4, [pc, #12]	; (16d30 <_strtol_r+0x1c>)
   16d22:	9400      	str	r4, [sp, #0]
   16d24:	f7ff ff70 	bl	16c08 <_strtol_l.isra.0>
   16d28:	bd16      	pop	{r1, r2, r4, pc}
   16d2a:	46c0      	nop			; (mov r8, r8)
   16d2c:	2000016c 	.word	0x2000016c
   16d30:	200001d0 	.word	0x200001d0

00016d34 <strtol>:
   16d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16d36:	0013      	movs	r3, r2
   16d38:	4a06      	ldr	r2, [pc, #24]	; (16d54 <strtol+0x20>)
   16d3a:	0005      	movs	r5, r0
   16d3c:	6810      	ldr	r0, [r2, #0]
   16d3e:	6a04      	ldr	r4, [r0, #32]
   16d40:	2c00      	cmp	r4, #0
   16d42:	d100      	bne.n	16d46 <strtol+0x12>
   16d44:	4c04      	ldr	r4, [pc, #16]	; (16d58 <strtol+0x24>)
   16d46:	000a      	movs	r2, r1
   16d48:	9400      	str	r4, [sp, #0]
   16d4a:	0029      	movs	r1, r5
   16d4c:	f7ff ff5c 	bl	16c08 <_strtol_l.isra.0>
   16d50:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   16d52:	46c0      	nop			; (mov r8, r8)
   16d54:	2000016c 	.word	0x2000016c
   16d58:	200001d0 	.word	0x200001d0

00016d5c <__swbuf_r>:
   16d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d5e:	0005      	movs	r5, r0
   16d60:	000e      	movs	r6, r1
   16d62:	0014      	movs	r4, r2
   16d64:	2800      	cmp	r0, #0
   16d66:	d004      	beq.n	16d72 <__swbuf_r+0x16>
   16d68:	6983      	ldr	r3, [r0, #24]
   16d6a:	2b00      	cmp	r3, #0
   16d6c:	d101      	bne.n	16d72 <__swbuf_r+0x16>
   16d6e:	f000 f9cd 	bl	1710c <__sinit>
   16d72:	4b22      	ldr	r3, [pc, #136]	; (16dfc <__swbuf_r+0xa0>)
   16d74:	429c      	cmp	r4, r3
   16d76:	d12d      	bne.n	16dd4 <__swbuf_r+0x78>
   16d78:	686c      	ldr	r4, [r5, #4]
   16d7a:	69a3      	ldr	r3, [r4, #24]
   16d7c:	60a3      	str	r3, [r4, #8]
   16d7e:	89a3      	ldrh	r3, [r4, #12]
   16d80:	071b      	lsls	r3, r3, #28
   16d82:	d531      	bpl.n	16de8 <__swbuf_r+0x8c>
   16d84:	6923      	ldr	r3, [r4, #16]
   16d86:	2b00      	cmp	r3, #0
   16d88:	d02e      	beq.n	16de8 <__swbuf_r+0x8c>
   16d8a:	6823      	ldr	r3, [r4, #0]
   16d8c:	6922      	ldr	r2, [r4, #16]
   16d8e:	b2f7      	uxtb	r7, r6
   16d90:	1a98      	subs	r0, r3, r2
   16d92:	6963      	ldr	r3, [r4, #20]
   16d94:	b2f6      	uxtb	r6, r6
   16d96:	4298      	cmp	r0, r3
   16d98:	db05      	blt.n	16da6 <__swbuf_r+0x4a>
   16d9a:	0021      	movs	r1, r4
   16d9c:	0028      	movs	r0, r5
   16d9e:	f000 f933 	bl	17008 <_fflush_r>
   16da2:	2800      	cmp	r0, #0
   16da4:	d126      	bne.n	16df4 <__swbuf_r+0x98>
   16da6:	68a3      	ldr	r3, [r4, #8]
   16da8:	3001      	adds	r0, #1
   16daa:	3b01      	subs	r3, #1
   16dac:	60a3      	str	r3, [r4, #8]
   16dae:	6823      	ldr	r3, [r4, #0]
   16db0:	1c5a      	adds	r2, r3, #1
   16db2:	6022      	str	r2, [r4, #0]
   16db4:	701f      	strb	r7, [r3, #0]
   16db6:	6963      	ldr	r3, [r4, #20]
   16db8:	4298      	cmp	r0, r3
   16dba:	d004      	beq.n	16dc6 <__swbuf_r+0x6a>
   16dbc:	89a3      	ldrh	r3, [r4, #12]
   16dbe:	07db      	lsls	r3, r3, #31
   16dc0:	d51a      	bpl.n	16df8 <__swbuf_r+0x9c>
   16dc2:	2e0a      	cmp	r6, #10
   16dc4:	d118      	bne.n	16df8 <__swbuf_r+0x9c>
   16dc6:	0021      	movs	r1, r4
   16dc8:	0028      	movs	r0, r5
   16dca:	f000 f91d 	bl	17008 <_fflush_r>
   16dce:	2800      	cmp	r0, #0
   16dd0:	d012      	beq.n	16df8 <__swbuf_r+0x9c>
   16dd2:	e00f      	b.n	16df4 <__swbuf_r+0x98>
   16dd4:	4b0a      	ldr	r3, [pc, #40]	; (16e00 <__swbuf_r+0xa4>)
   16dd6:	429c      	cmp	r4, r3
   16dd8:	d101      	bne.n	16dde <__swbuf_r+0x82>
   16dda:	68ac      	ldr	r4, [r5, #8]
   16ddc:	e7cd      	b.n	16d7a <__swbuf_r+0x1e>
   16dde:	4b09      	ldr	r3, [pc, #36]	; (16e04 <__swbuf_r+0xa8>)
   16de0:	429c      	cmp	r4, r3
   16de2:	d1ca      	bne.n	16d7a <__swbuf_r+0x1e>
   16de4:	68ec      	ldr	r4, [r5, #12]
   16de6:	e7c8      	b.n	16d7a <__swbuf_r+0x1e>
   16de8:	0021      	movs	r1, r4
   16dea:	0028      	movs	r0, r5
   16dec:	f000 f80c 	bl	16e08 <__swsetup_r>
   16df0:	2800      	cmp	r0, #0
   16df2:	d0ca      	beq.n	16d8a <__swbuf_r+0x2e>
   16df4:	2601      	movs	r6, #1
   16df6:	4276      	negs	r6, r6
   16df8:	0030      	movs	r0, r6
   16dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16dfc:	0001afec 	.word	0x0001afec
   16e00:	0001b00c 	.word	0x0001b00c
   16e04:	0001afcc 	.word	0x0001afcc

00016e08 <__swsetup_r>:
   16e08:	4b36      	ldr	r3, [pc, #216]	; (16ee4 <__swsetup_r+0xdc>)
   16e0a:	b570      	push	{r4, r5, r6, lr}
   16e0c:	681d      	ldr	r5, [r3, #0]
   16e0e:	0006      	movs	r6, r0
   16e10:	000c      	movs	r4, r1
   16e12:	2d00      	cmp	r5, #0
   16e14:	d005      	beq.n	16e22 <__swsetup_r+0x1a>
   16e16:	69ab      	ldr	r3, [r5, #24]
   16e18:	2b00      	cmp	r3, #0
   16e1a:	d102      	bne.n	16e22 <__swsetup_r+0x1a>
   16e1c:	0028      	movs	r0, r5
   16e1e:	f000 f975 	bl	1710c <__sinit>
   16e22:	4b31      	ldr	r3, [pc, #196]	; (16ee8 <__swsetup_r+0xe0>)
   16e24:	429c      	cmp	r4, r3
   16e26:	d10f      	bne.n	16e48 <__swsetup_r+0x40>
   16e28:	686c      	ldr	r4, [r5, #4]
   16e2a:	230c      	movs	r3, #12
   16e2c:	5ee2      	ldrsh	r2, [r4, r3]
   16e2e:	b293      	uxth	r3, r2
   16e30:	0719      	lsls	r1, r3, #28
   16e32:	d42d      	bmi.n	16e90 <__swsetup_r+0x88>
   16e34:	06d9      	lsls	r1, r3, #27
   16e36:	d411      	bmi.n	16e5c <__swsetup_r+0x54>
   16e38:	2309      	movs	r3, #9
   16e3a:	2001      	movs	r0, #1
   16e3c:	6033      	str	r3, [r6, #0]
   16e3e:	3337      	adds	r3, #55	; 0x37
   16e40:	4313      	orrs	r3, r2
   16e42:	81a3      	strh	r3, [r4, #12]
   16e44:	4240      	negs	r0, r0
   16e46:	bd70      	pop	{r4, r5, r6, pc}
   16e48:	4b28      	ldr	r3, [pc, #160]	; (16eec <__swsetup_r+0xe4>)
   16e4a:	429c      	cmp	r4, r3
   16e4c:	d101      	bne.n	16e52 <__swsetup_r+0x4a>
   16e4e:	68ac      	ldr	r4, [r5, #8]
   16e50:	e7eb      	b.n	16e2a <__swsetup_r+0x22>
   16e52:	4b27      	ldr	r3, [pc, #156]	; (16ef0 <__swsetup_r+0xe8>)
   16e54:	429c      	cmp	r4, r3
   16e56:	d1e8      	bne.n	16e2a <__swsetup_r+0x22>
   16e58:	68ec      	ldr	r4, [r5, #12]
   16e5a:	e7e6      	b.n	16e2a <__swsetup_r+0x22>
   16e5c:	075b      	lsls	r3, r3, #29
   16e5e:	d513      	bpl.n	16e88 <__swsetup_r+0x80>
   16e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16e62:	2900      	cmp	r1, #0
   16e64:	d008      	beq.n	16e78 <__swsetup_r+0x70>
   16e66:	0023      	movs	r3, r4
   16e68:	3344      	adds	r3, #68	; 0x44
   16e6a:	4299      	cmp	r1, r3
   16e6c:	d002      	beq.n	16e74 <__swsetup_r+0x6c>
   16e6e:	0030      	movs	r0, r6
   16e70:	f7ff fbce 	bl	16610 <_free_r>
   16e74:	2300      	movs	r3, #0
   16e76:	6363      	str	r3, [r4, #52]	; 0x34
   16e78:	2224      	movs	r2, #36	; 0x24
   16e7a:	89a3      	ldrh	r3, [r4, #12]
   16e7c:	4393      	bics	r3, r2
   16e7e:	81a3      	strh	r3, [r4, #12]
   16e80:	2300      	movs	r3, #0
   16e82:	6063      	str	r3, [r4, #4]
   16e84:	6923      	ldr	r3, [r4, #16]
   16e86:	6023      	str	r3, [r4, #0]
   16e88:	2308      	movs	r3, #8
   16e8a:	89a2      	ldrh	r2, [r4, #12]
   16e8c:	4313      	orrs	r3, r2
   16e8e:	81a3      	strh	r3, [r4, #12]
   16e90:	6923      	ldr	r3, [r4, #16]
   16e92:	2b00      	cmp	r3, #0
   16e94:	d10b      	bne.n	16eae <__swsetup_r+0xa6>
   16e96:	21a0      	movs	r1, #160	; 0xa0
   16e98:	2280      	movs	r2, #128	; 0x80
   16e9a:	89a3      	ldrh	r3, [r4, #12]
   16e9c:	0089      	lsls	r1, r1, #2
   16e9e:	0092      	lsls	r2, r2, #2
   16ea0:	400b      	ands	r3, r1
   16ea2:	4293      	cmp	r3, r2
   16ea4:	d003      	beq.n	16eae <__swsetup_r+0xa6>
   16ea6:	0021      	movs	r1, r4
   16ea8:	0030      	movs	r0, r6
   16eaa:	f000 fa19 	bl	172e0 <__smakebuf_r>
   16eae:	2301      	movs	r3, #1
   16eb0:	89a2      	ldrh	r2, [r4, #12]
   16eb2:	4013      	ands	r3, r2
   16eb4:	d011      	beq.n	16eda <__swsetup_r+0xd2>
   16eb6:	2300      	movs	r3, #0
   16eb8:	60a3      	str	r3, [r4, #8]
   16eba:	6963      	ldr	r3, [r4, #20]
   16ebc:	425b      	negs	r3, r3
   16ebe:	61a3      	str	r3, [r4, #24]
   16ec0:	2000      	movs	r0, #0
   16ec2:	6923      	ldr	r3, [r4, #16]
   16ec4:	4283      	cmp	r3, r0
   16ec6:	d1be      	bne.n	16e46 <__swsetup_r+0x3e>
   16ec8:	230c      	movs	r3, #12
   16eca:	5ee2      	ldrsh	r2, [r4, r3]
   16ecc:	0613      	lsls	r3, r2, #24
   16ece:	d5ba      	bpl.n	16e46 <__swsetup_r+0x3e>
   16ed0:	2340      	movs	r3, #64	; 0x40
   16ed2:	4313      	orrs	r3, r2
   16ed4:	81a3      	strh	r3, [r4, #12]
   16ed6:	3801      	subs	r0, #1
   16ed8:	e7b5      	b.n	16e46 <__swsetup_r+0x3e>
   16eda:	0792      	lsls	r2, r2, #30
   16edc:	d400      	bmi.n	16ee0 <__swsetup_r+0xd8>
   16ede:	6963      	ldr	r3, [r4, #20]
   16ee0:	60a3      	str	r3, [r4, #8]
   16ee2:	e7ed      	b.n	16ec0 <__swsetup_r+0xb8>
   16ee4:	2000016c 	.word	0x2000016c
   16ee8:	0001afec 	.word	0x0001afec
   16eec:	0001b00c 	.word	0x0001b00c
   16ef0:	0001afcc 	.word	0x0001afcc

00016ef4 <__sflush_r>:
   16ef4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16ef6:	898a      	ldrh	r2, [r1, #12]
   16ef8:	0005      	movs	r5, r0
   16efa:	000c      	movs	r4, r1
   16efc:	0713      	lsls	r3, r2, #28
   16efe:	d460      	bmi.n	16fc2 <__sflush_r+0xce>
   16f00:	684b      	ldr	r3, [r1, #4]
   16f02:	2b00      	cmp	r3, #0
   16f04:	dc04      	bgt.n	16f10 <__sflush_r+0x1c>
   16f06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   16f08:	2b00      	cmp	r3, #0
   16f0a:	dc01      	bgt.n	16f10 <__sflush_r+0x1c>
   16f0c:	2000      	movs	r0, #0
   16f0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   16f10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   16f12:	2f00      	cmp	r7, #0
   16f14:	d0fa      	beq.n	16f0c <__sflush_r+0x18>
   16f16:	2300      	movs	r3, #0
   16f18:	682e      	ldr	r6, [r5, #0]
   16f1a:	602b      	str	r3, [r5, #0]
   16f1c:	2380      	movs	r3, #128	; 0x80
   16f1e:	015b      	lsls	r3, r3, #5
   16f20:	401a      	ands	r2, r3
   16f22:	d034      	beq.n	16f8e <__sflush_r+0x9a>
   16f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
   16f26:	89a3      	ldrh	r3, [r4, #12]
   16f28:	075b      	lsls	r3, r3, #29
   16f2a:	d506      	bpl.n	16f3a <__sflush_r+0x46>
   16f2c:	6863      	ldr	r3, [r4, #4]
   16f2e:	1ac0      	subs	r0, r0, r3
   16f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
   16f32:	2b00      	cmp	r3, #0
   16f34:	d001      	beq.n	16f3a <__sflush_r+0x46>
   16f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
   16f38:	1ac0      	subs	r0, r0, r3
   16f3a:	0002      	movs	r2, r0
   16f3c:	6a21      	ldr	r1, [r4, #32]
   16f3e:	2300      	movs	r3, #0
   16f40:	0028      	movs	r0, r5
   16f42:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   16f44:	47b8      	blx	r7
   16f46:	89a1      	ldrh	r1, [r4, #12]
   16f48:	1c43      	adds	r3, r0, #1
   16f4a:	d106      	bne.n	16f5a <__sflush_r+0x66>
   16f4c:	682b      	ldr	r3, [r5, #0]
   16f4e:	2b1d      	cmp	r3, #29
   16f50:	d831      	bhi.n	16fb6 <__sflush_r+0xc2>
   16f52:	4a2c      	ldr	r2, [pc, #176]	; (17004 <__sflush_r+0x110>)
   16f54:	40da      	lsrs	r2, r3
   16f56:	07d3      	lsls	r3, r2, #31
   16f58:	d52d      	bpl.n	16fb6 <__sflush_r+0xc2>
   16f5a:	2300      	movs	r3, #0
   16f5c:	6063      	str	r3, [r4, #4]
   16f5e:	6923      	ldr	r3, [r4, #16]
   16f60:	6023      	str	r3, [r4, #0]
   16f62:	04cb      	lsls	r3, r1, #19
   16f64:	d505      	bpl.n	16f72 <__sflush_r+0x7e>
   16f66:	1c43      	adds	r3, r0, #1
   16f68:	d102      	bne.n	16f70 <__sflush_r+0x7c>
   16f6a:	682b      	ldr	r3, [r5, #0]
   16f6c:	2b00      	cmp	r3, #0
   16f6e:	d100      	bne.n	16f72 <__sflush_r+0x7e>
   16f70:	6560      	str	r0, [r4, #84]	; 0x54
   16f72:	6b61      	ldr	r1, [r4, #52]	; 0x34
   16f74:	602e      	str	r6, [r5, #0]
   16f76:	2900      	cmp	r1, #0
   16f78:	d0c8      	beq.n	16f0c <__sflush_r+0x18>
   16f7a:	0023      	movs	r3, r4
   16f7c:	3344      	adds	r3, #68	; 0x44
   16f7e:	4299      	cmp	r1, r3
   16f80:	d002      	beq.n	16f88 <__sflush_r+0x94>
   16f82:	0028      	movs	r0, r5
   16f84:	f7ff fb44 	bl	16610 <_free_r>
   16f88:	2000      	movs	r0, #0
   16f8a:	6360      	str	r0, [r4, #52]	; 0x34
   16f8c:	e7bf      	b.n	16f0e <__sflush_r+0x1a>
   16f8e:	2301      	movs	r3, #1
   16f90:	6a21      	ldr	r1, [r4, #32]
   16f92:	0028      	movs	r0, r5
   16f94:	47b8      	blx	r7
   16f96:	1c43      	adds	r3, r0, #1
   16f98:	d1c5      	bne.n	16f26 <__sflush_r+0x32>
   16f9a:	682b      	ldr	r3, [r5, #0]
   16f9c:	2b00      	cmp	r3, #0
   16f9e:	d0c2      	beq.n	16f26 <__sflush_r+0x32>
   16fa0:	2b1d      	cmp	r3, #29
   16fa2:	d001      	beq.n	16fa8 <__sflush_r+0xb4>
   16fa4:	2b16      	cmp	r3, #22
   16fa6:	d101      	bne.n	16fac <__sflush_r+0xb8>
   16fa8:	602e      	str	r6, [r5, #0]
   16faa:	e7af      	b.n	16f0c <__sflush_r+0x18>
   16fac:	2340      	movs	r3, #64	; 0x40
   16fae:	89a2      	ldrh	r2, [r4, #12]
   16fb0:	4313      	orrs	r3, r2
   16fb2:	81a3      	strh	r3, [r4, #12]
   16fb4:	e7ab      	b.n	16f0e <__sflush_r+0x1a>
   16fb6:	2340      	movs	r3, #64	; 0x40
   16fb8:	430b      	orrs	r3, r1
   16fba:	2001      	movs	r0, #1
   16fbc:	81a3      	strh	r3, [r4, #12]
   16fbe:	4240      	negs	r0, r0
   16fc0:	e7a5      	b.n	16f0e <__sflush_r+0x1a>
   16fc2:	690f      	ldr	r7, [r1, #16]
   16fc4:	2f00      	cmp	r7, #0
   16fc6:	d0a1      	beq.n	16f0c <__sflush_r+0x18>
   16fc8:	680b      	ldr	r3, [r1, #0]
   16fca:	600f      	str	r7, [r1, #0]
   16fcc:	1bdb      	subs	r3, r3, r7
   16fce:	9301      	str	r3, [sp, #4]
   16fd0:	2300      	movs	r3, #0
   16fd2:	0792      	lsls	r2, r2, #30
   16fd4:	d100      	bne.n	16fd8 <__sflush_r+0xe4>
   16fd6:	694b      	ldr	r3, [r1, #20]
   16fd8:	60a3      	str	r3, [r4, #8]
   16fda:	9b01      	ldr	r3, [sp, #4]
   16fdc:	2b00      	cmp	r3, #0
   16fde:	dc00      	bgt.n	16fe2 <__sflush_r+0xee>
   16fe0:	e794      	b.n	16f0c <__sflush_r+0x18>
   16fe2:	9b01      	ldr	r3, [sp, #4]
   16fe4:	003a      	movs	r2, r7
   16fe6:	6a21      	ldr	r1, [r4, #32]
   16fe8:	0028      	movs	r0, r5
   16fea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   16fec:	47b0      	blx	r6
   16fee:	2800      	cmp	r0, #0
   16ff0:	dc03      	bgt.n	16ffa <__sflush_r+0x106>
   16ff2:	2340      	movs	r3, #64	; 0x40
   16ff4:	89a2      	ldrh	r2, [r4, #12]
   16ff6:	4313      	orrs	r3, r2
   16ff8:	e7df      	b.n	16fba <__sflush_r+0xc6>
   16ffa:	9b01      	ldr	r3, [sp, #4]
   16ffc:	183f      	adds	r7, r7, r0
   16ffe:	1a1b      	subs	r3, r3, r0
   17000:	9301      	str	r3, [sp, #4]
   17002:	e7ea      	b.n	16fda <__sflush_r+0xe6>
   17004:	20400001 	.word	0x20400001

00017008 <_fflush_r>:
   17008:	690b      	ldr	r3, [r1, #16]
   1700a:	b570      	push	{r4, r5, r6, lr}
   1700c:	0005      	movs	r5, r0
   1700e:	000c      	movs	r4, r1
   17010:	2b00      	cmp	r3, #0
   17012:	d101      	bne.n	17018 <_fflush_r+0x10>
   17014:	2000      	movs	r0, #0
   17016:	bd70      	pop	{r4, r5, r6, pc}
   17018:	2800      	cmp	r0, #0
   1701a:	d004      	beq.n	17026 <_fflush_r+0x1e>
   1701c:	6983      	ldr	r3, [r0, #24]
   1701e:	2b00      	cmp	r3, #0
   17020:	d101      	bne.n	17026 <_fflush_r+0x1e>
   17022:	f000 f873 	bl	1710c <__sinit>
   17026:	4b0b      	ldr	r3, [pc, #44]	; (17054 <_fflush_r+0x4c>)
   17028:	429c      	cmp	r4, r3
   1702a:	d109      	bne.n	17040 <_fflush_r+0x38>
   1702c:	686c      	ldr	r4, [r5, #4]
   1702e:	220c      	movs	r2, #12
   17030:	5ea3      	ldrsh	r3, [r4, r2]
   17032:	2b00      	cmp	r3, #0
   17034:	d0ee      	beq.n	17014 <_fflush_r+0xc>
   17036:	0021      	movs	r1, r4
   17038:	0028      	movs	r0, r5
   1703a:	f7ff ff5b 	bl	16ef4 <__sflush_r>
   1703e:	e7ea      	b.n	17016 <_fflush_r+0xe>
   17040:	4b05      	ldr	r3, [pc, #20]	; (17058 <_fflush_r+0x50>)
   17042:	429c      	cmp	r4, r3
   17044:	d101      	bne.n	1704a <_fflush_r+0x42>
   17046:	68ac      	ldr	r4, [r5, #8]
   17048:	e7f1      	b.n	1702e <_fflush_r+0x26>
   1704a:	4b04      	ldr	r3, [pc, #16]	; (1705c <_fflush_r+0x54>)
   1704c:	429c      	cmp	r4, r3
   1704e:	d1ee      	bne.n	1702e <_fflush_r+0x26>
   17050:	68ec      	ldr	r4, [r5, #12]
   17052:	e7ec      	b.n	1702e <_fflush_r+0x26>
   17054:	0001afec 	.word	0x0001afec
   17058:	0001b00c 	.word	0x0001b00c
   1705c:	0001afcc 	.word	0x0001afcc

00017060 <fflush>:
   17060:	b510      	push	{r4, lr}
   17062:	1e01      	subs	r1, r0, #0
   17064:	d105      	bne.n	17072 <fflush+0x12>
   17066:	4b05      	ldr	r3, [pc, #20]	; (1707c <fflush+0x1c>)
   17068:	4905      	ldr	r1, [pc, #20]	; (17080 <fflush+0x20>)
   1706a:	6818      	ldr	r0, [r3, #0]
   1706c:	f000 f8de 	bl	1722c <_fwalk_reent>
   17070:	bd10      	pop	{r4, pc}
   17072:	4b04      	ldr	r3, [pc, #16]	; (17084 <fflush+0x24>)
   17074:	6818      	ldr	r0, [r3, #0]
   17076:	f7ff ffc7 	bl	17008 <_fflush_r>
   1707a:	e7f9      	b.n	17070 <fflush+0x10>
   1707c:	0001afc8 	.word	0x0001afc8
   17080:	00017009 	.word	0x00017009
   17084:	2000016c 	.word	0x2000016c

00017088 <_cleanup_r>:
   17088:	b510      	push	{r4, lr}
   1708a:	4902      	ldr	r1, [pc, #8]	; (17094 <_cleanup_r+0xc>)
   1708c:	f000 f8ce 	bl	1722c <_fwalk_reent>
   17090:	bd10      	pop	{r4, pc}
   17092:	46c0      	nop			; (mov r8, r8)
   17094:	00017009 	.word	0x00017009

00017098 <std.isra.0>:
   17098:	2300      	movs	r3, #0
   1709a:	b510      	push	{r4, lr}
   1709c:	0004      	movs	r4, r0
   1709e:	6003      	str	r3, [r0, #0]
   170a0:	6043      	str	r3, [r0, #4]
   170a2:	6083      	str	r3, [r0, #8]
   170a4:	8181      	strh	r1, [r0, #12]
   170a6:	6643      	str	r3, [r0, #100]	; 0x64
   170a8:	81c2      	strh	r2, [r0, #14]
   170aa:	6103      	str	r3, [r0, #16]
   170ac:	6143      	str	r3, [r0, #20]
   170ae:	6183      	str	r3, [r0, #24]
   170b0:	0019      	movs	r1, r3
   170b2:	2208      	movs	r2, #8
   170b4:	305c      	adds	r0, #92	; 0x5c
   170b6:	f7ff faa2 	bl	165fe <memset>
   170ba:	4b05      	ldr	r3, [pc, #20]	; (170d0 <std.isra.0+0x38>)
   170bc:	6224      	str	r4, [r4, #32]
   170be:	6263      	str	r3, [r4, #36]	; 0x24
   170c0:	4b04      	ldr	r3, [pc, #16]	; (170d4 <std.isra.0+0x3c>)
   170c2:	62a3      	str	r3, [r4, #40]	; 0x28
   170c4:	4b04      	ldr	r3, [pc, #16]	; (170d8 <std.isra.0+0x40>)
   170c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   170c8:	4b04      	ldr	r3, [pc, #16]	; (170dc <std.isra.0+0x44>)
   170ca:	6323      	str	r3, [r4, #48]	; 0x30
   170cc:	bd10      	pop	{r4, pc}
   170ce:	46c0      	nop			; (mov r8, r8)
   170d0:	00018421 	.word	0x00018421
   170d4:	00018449 	.word	0x00018449
   170d8:	00018481 	.word	0x00018481
   170dc:	000184ad 	.word	0x000184ad

000170e0 <__sfmoreglue>:
   170e0:	b570      	push	{r4, r5, r6, lr}
   170e2:	2568      	movs	r5, #104	; 0x68
   170e4:	1e4a      	subs	r2, r1, #1
   170e6:	4355      	muls	r5, r2
   170e8:	000e      	movs	r6, r1
   170ea:	0029      	movs	r1, r5
   170ec:	3174      	adds	r1, #116	; 0x74
   170ee:	f7ff fad9 	bl	166a4 <_malloc_r>
   170f2:	1e04      	subs	r4, r0, #0
   170f4:	d008      	beq.n	17108 <__sfmoreglue+0x28>
   170f6:	2100      	movs	r1, #0
   170f8:	002a      	movs	r2, r5
   170fa:	6001      	str	r1, [r0, #0]
   170fc:	6046      	str	r6, [r0, #4]
   170fe:	300c      	adds	r0, #12
   17100:	60a0      	str	r0, [r4, #8]
   17102:	3268      	adds	r2, #104	; 0x68
   17104:	f7ff fa7b 	bl	165fe <memset>
   17108:	0020      	movs	r0, r4
   1710a:	bd70      	pop	{r4, r5, r6, pc}

0001710c <__sinit>:
   1710c:	6983      	ldr	r3, [r0, #24]
   1710e:	b513      	push	{r0, r1, r4, lr}
   17110:	0004      	movs	r4, r0
   17112:	2b00      	cmp	r3, #0
   17114:	d128      	bne.n	17168 <__sinit+0x5c>
   17116:	6483      	str	r3, [r0, #72]	; 0x48
   17118:	64c3      	str	r3, [r0, #76]	; 0x4c
   1711a:	6503      	str	r3, [r0, #80]	; 0x50
   1711c:	4b13      	ldr	r3, [pc, #76]	; (1716c <__sinit+0x60>)
   1711e:	4a14      	ldr	r2, [pc, #80]	; (17170 <__sinit+0x64>)
   17120:	681b      	ldr	r3, [r3, #0]
   17122:	6282      	str	r2, [r0, #40]	; 0x28
   17124:	9301      	str	r3, [sp, #4]
   17126:	4298      	cmp	r0, r3
   17128:	d101      	bne.n	1712e <__sinit+0x22>
   1712a:	2301      	movs	r3, #1
   1712c:	6183      	str	r3, [r0, #24]
   1712e:	0020      	movs	r0, r4
   17130:	f000 f820 	bl	17174 <__sfp>
   17134:	6060      	str	r0, [r4, #4]
   17136:	0020      	movs	r0, r4
   17138:	f000 f81c 	bl	17174 <__sfp>
   1713c:	60a0      	str	r0, [r4, #8]
   1713e:	0020      	movs	r0, r4
   17140:	f000 f818 	bl	17174 <__sfp>
   17144:	2200      	movs	r2, #0
   17146:	60e0      	str	r0, [r4, #12]
   17148:	2104      	movs	r1, #4
   1714a:	6860      	ldr	r0, [r4, #4]
   1714c:	f7ff ffa4 	bl	17098 <std.isra.0>
   17150:	2201      	movs	r2, #1
   17152:	2109      	movs	r1, #9
   17154:	68a0      	ldr	r0, [r4, #8]
   17156:	f7ff ff9f 	bl	17098 <std.isra.0>
   1715a:	2202      	movs	r2, #2
   1715c:	2112      	movs	r1, #18
   1715e:	68e0      	ldr	r0, [r4, #12]
   17160:	f7ff ff9a 	bl	17098 <std.isra.0>
   17164:	2301      	movs	r3, #1
   17166:	61a3      	str	r3, [r4, #24]
   17168:	bd13      	pop	{r0, r1, r4, pc}
   1716a:	46c0      	nop			; (mov r8, r8)
   1716c:	0001afc8 	.word	0x0001afc8
   17170:	00017089 	.word	0x00017089

00017174 <__sfp>:
   17174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17176:	4b1e      	ldr	r3, [pc, #120]	; (171f0 <__sfp+0x7c>)
   17178:	0007      	movs	r7, r0
   1717a:	681e      	ldr	r6, [r3, #0]
   1717c:	69b3      	ldr	r3, [r6, #24]
   1717e:	2b00      	cmp	r3, #0
   17180:	d102      	bne.n	17188 <__sfp+0x14>
   17182:	0030      	movs	r0, r6
   17184:	f7ff ffc2 	bl	1710c <__sinit>
   17188:	3648      	adds	r6, #72	; 0x48
   1718a:	68b4      	ldr	r4, [r6, #8]
   1718c:	6873      	ldr	r3, [r6, #4]
   1718e:	3b01      	subs	r3, #1
   17190:	d504      	bpl.n	1719c <__sfp+0x28>
   17192:	6833      	ldr	r3, [r6, #0]
   17194:	2b00      	cmp	r3, #0
   17196:	d007      	beq.n	171a8 <__sfp+0x34>
   17198:	6836      	ldr	r6, [r6, #0]
   1719a:	e7f6      	b.n	1718a <__sfp+0x16>
   1719c:	220c      	movs	r2, #12
   1719e:	5ea5      	ldrsh	r5, [r4, r2]
   171a0:	2d00      	cmp	r5, #0
   171a2:	d00d      	beq.n	171c0 <__sfp+0x4c>
   171a4:	3468      	adds	r4, #104	; 0x68
   171a6:	e7f2      	b.n	1718e <__sfp+0x1a>
   171a8:	2104      	movs	r1, #4
   171aa:	0038      	movs	r0, r7
   171ac:	f7ff ff98 	bl	170e0 <__sfmoreglue>
   171b0:	6030      	str	r0, [r6, #0]
   171b2:	2800      	cmp	r0, #0
   171b4:	d1f0      	bne.n	17198 <__sfp+0x24>
   171b6:	230c      	movs	r3, #12
   171b8:	0004      	movs	r4, r0
   171ba:	603b      	str	r3, [r7, #0]
   171bc:	0020      	movs	r0, r4
   171be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   171c0:	2301      	movs	r3, #1
   171c2:	0020      	movs	r0, r4
   171c4:	425b      	negs	r3, r3
   171c6:	81e3      	strh	r3, [r4, #14]
   171c8:	3302      	adds	r3, #2
   171ca:	81a3      	strh	r3, [r4, #12]
   171cc:	6665      	str	r5, [r4, #100]	; 0x64
   171ce:	6025      	str	r5, [r4, #0]
   171d0:	60a5      	str	r5, [r4, #8]
   171d2:	6065      	str	r5, [r4, #4]
   171d4:	6125      	str	r5, [r4, #16]
   171d6:	6165      	str	r5, [r4, #20]
   171d8:	61a5      	str	r5, [r4, #24]
   171da:	2208      	movs	r2, #8
   171dc:	0029      	movs	r1, r5
   171de:	305c      	adds	r0, #92	; 0x5c
   171e0:	f7ff fa0d 	bl	165fe <memset>
   171e4:	6365      	str	r5, [r4, #52]	; 0x34
   171e6:	63a5      	str	r5, [r4, #56]	; 0x38
   171e8:	64a5      	str	r5, [r4, #72]	; 0x48
   171ea:	64e5      	str	r5, [r4, #76]	; 0x4c
   171ec:	e7e6      	b.n	171bc <__sfp+0x48>
   171ee:	46c0      	nop			; (mov r8, r8)
   171f0:	0001afc8 	.word	0x0001afc8

000171f4 <_fwalk>:
   171f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   171f6:	3048      	adds	r0, #72	; 0x48
   171f8:	0004      	movs	r4, r0
   171fa:	2600      	movs	r6, #0
   171fc:	9101      	str	r1, [sp, #4]
   171fe:	2c00      	cmp	r4, #0
   17200:	d101      	bne.n	17206 <_fwalk+0x12>
   17202:	0030      	movs	r0, r6
   17204:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17206:	68a5      	ldr	r5, [r4, #8]
   17208:	6867      	ldr	r7, [r4, #4]
   1720a:	3f01      	subs	r7, #1
   1720c:	d501      	bpl.n	17212 <_fwalk+0x1e>
   1720e:	6824      	ldr	r4, [r4, #0]
   17210:	e7f5      	b.n	171fe <_fwalk+0xa>
   17212:	89ab      	ldrh	r3, [r5, #12]
   17214:	2b01      	cmp	r3, #1
   17216:	d907      	bls.n	17228 <_fwalk+0x34>
   17218:	220e      	movs	r2, #14
   1721a:	5eab      	ldrsh	r3, [r5, r2]
   1721c:	3301      	adds	r3, #1
   1721e:	d003      	beq.n	17228 <_fwalk+0x34>
   17220:	0028      	movs	r0, r5
   17222:	9b01      	ldr	r3, [sp, #4]
   17224:	4798      	blx	r3
   17226:	4306      	orrs	r6, r0
   17228:	3568      	adds	r5, #104	; 0x68
   1722a:	e7ee      	b.n	1720a <_fwalk+0x16>

0001722c <_fwalk_reent>:
   1722c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1722e:	0004      	movs	r4, r0
   17230:	0007      	movs	r7, r0
   17232:	2600      	movs	r6, #0
   17234:	9101      	str	r1, [sp, #4]
   17236:	3448      	adds	r4, #72	; 0x48
   17238:	2c00      	cmp	r4, #0
   1723a:	d101      	bne.n	17240 <_fwalk_reent+0x14>
   1723c:	0030      	movs	r0, r6
   1723e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17240:	6863      	ldr	r3, [r4, #4]
   17242:	68a5      	ldr	r5, [r4, #8]
   17244:	9300      	str	r3, [sp, #0]
   17246:	9b00      	ldr	r3, [sp, #0]
   17248:	3b01      	subs	r3, #1
   1724a:	9300      	str	r3, [sp, #0]
   1724c:	d501      	bpl.n	17252 <_fwalk_reent+0x26>
   1724e:	6824      	ldr	r4, [r4, #0]
   17250:	e7f2      	b.n	17238 <_fwalk_reent+0xc>
   17252:	89ab      	ldrh	r3, [r5, #12]
   17254:	2b01      	cmp	r3, #1
   17256:	d908      	bls.n	1726a <_fwalk_reent+0x3e>
   17258:	220e      	movs	r2, #14
   1725a:	5eab      	ldrsh	r3, [r5, r2]
   1725c:	3301      	adds	r3, #1
   1725e:	d004      	beq.n	1726a <_fwalk_reent+0x3e>
   17260:	0029      	movs	r1, r5
   17262:	0038      	movs	r0, r7
   17264:	9b01      	ldr	r3, [sp, #4]
   17266:	4798      	blx	r3
   17268:	4306      	orrs	r6, r0
   1726a:	3568      	adds	r5, #104	; 0x68
   1726c:	e7eb      	b.n	17246 <_fwalk_reent+0x1a>

0001726e <__locale_ctype_ptr_l>:
   1726e:	30ec      	adds	r0, #236	; 0xec
   17270:	6800      	ldr	r0, [r0, #0]
   17272:	4770      	bx	lr

00017274 <__locale_ctype_ptr>:
   17274:	4b04      	ldr	r3, [pc, #16]	; (17288 <__locale_ctype_ptr+0x14>)
   17276:	681b      	ldr	r3, [r3, #0]
   17278:	6a1b      	ldr	r3, [r3, #32]
   1727a:	2b00      	cmp	r3, #0
   1727c:	d100      	bne.n	17280 <__locale_ctype_ptr+0xc>
   1727e:	4b03      	ldr	r3, [pc, #12]	; (1728c <__locale_ctype_ptr+0x18>)
   17280:	33ec      	adds	r3, #236	; 0xec
   17282:	6818      	ldr	r0, [r3, #0]
   17284:	4770      	bx	lr
   17286:	46c0      	nop			; (mov r8, r8)
   17288:	2000016c 	.word	0x2000016c
   1728c:	200001d0 	.word	0x200001d0

00017290 <__swhatbuf_r>:
   17290:	b570      	push	{r4, r5, r6, lr}
   17292:	000e      	movs	r6, r1
   17294:	001d      	movs	r5, r3
   17296:	230e      	movs	r3, #14
   17298:	5ec9      	ldrsh	r1, [r1, r3]
   1729a:	b090      	sub	sp, #64	; 0x40
   1729c:	0014      	movs	r4, r2
   1729e:	2900      	cmp	r1, #0
   172a0:	da07      	bge.n	172b2 <__swhatbuf_r+0x22>
   172a2:	2300      	movs	r3, #0
   172a4:	602b      	str	r3, [r5, #0]
   172a6:	89b3      	ldrh	r3, [r6, #12]
   172a8:	061b      	lsls	r3, r3, #24
   172aa:	d411      	bmi.n	172d0 <__swhatbuf_r+0x40>
   172ac:	2380      	movs	r3, #128	; 0x80
   172ae:	00db      	lsls	r3, r3, #3
   172b0:	e00f      	b.n	172d2 <__swhatbuf_r+0x42>
   172b2:	aa01      	add	r2, sp, #4
   172b4:	f001 fa88 	bl	187c8 <_fstat_r>
   172b8:	2800      	cmp	r0, #0
   172ba:	dbf2      	blt.n	172a2 <__swhatbuf_r+0x12>
   172bc:	22f0      	movs	r2, #240	; 0xf0
   172be:	9b02      	ldr	r3, [sp, #8]
   172c0:	0212      	lsls	r2, r2, #8
   172c2:	4013      	ands	r3, r2
   172c4:	4a05      	ldr	r2, [pc, #20]	; (172dc <__swhatbuf_r+0x4c>)
   172c6:	189b      	adds	r3, r3, r2
   172c8:	425a      	negs	r2, r3
   172ca:	4153      	adcs	r3, r2
   172cc:	602b      	str	r3, [r5, #0]
   172ce:	e7ed      	b.n	172ac <__swhatbuf_r+0x1c>
   172d0:	2340      	movs	r3, #64	; 0x40
   172d2:	2000      	movs	r0, #0
   172d4:	6023      	str	r3, [r4, #0]
   172d6:	b010      	add	sp, #64	; 0x40
   172d8:	bd70      	pop	{r4, r5, r6, pc}
   172da:	46c0      	nop			; (mov r8, r8)
   172dc:	ffffe000 	.word	0xffffe000

000172e0 <__smakebuf_r>:
   172e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   172e2:	2602      	movs	r6, #2
   172e4:	898b      	ldrh	r3, [r1, #12]
   172e6:	0005      	movs	r5, r0
   172e8:	000c      	movs	r4, r1
   172ea:	4233      	tst	r3, r6
   172ec:	d006      	beq.n	172fc <__smakebuf_r+0x1c>
   172ee:	0023      	movs	r3, r4
   172f0:	3347      	adds	r3, #71	; 0x47
   172f2:	6023      	str	r3, [r4, #0]
   172f4:	6123      	str	r3, [r4, #16]
   172f6:	2301      	movs	r3, #1
   172f8:	6163      	str	r3, [r4, #20]
   172fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   172fc:	ab01      	add	r3, sp, #4
   172fe:	466a      	mov	r2, sp
   17300:	f7ff ffc6 	bl	17290 <__swhatbuf_r>
   17304:	9900      	ldr	r1, [sp, #0]
   17306:	0007      	movs	r7, r0
   17308:	0028      	movs	r0, r5
   1730a:	f7ff f9cb 	bl	166a4 <_malloc_r>
   1730e:	2800      	cmp	r0, #0
   17310:	d108      	bne.n	17324 <__smakebuf_r+0x44>
   17312:	220c      	movs	r2, #12
   17314:	5ea3      	ldrsh	r3, [r4, r2]
   17316:	059a      	lsls	r2, r3, #22
   17318:	d4ef      	bmi.n	172fa <__smakebuf_r+0x1a>
   1731a:	2203      	movs	r2, #3
   1731c:	4393      	bics	r3, r2
   1731e:	431e      	orrs	r6, r3
   17320:	81a6      	strh	r6, [r4, #12]
   17322:	e7e4      	b.n	172ee <__smakebuf_r+0xe>
   17324:	4b0f      	ldr	r3, [pc, #60]	; (17364 <__smakebuf_r+0x84>)
   17326:	62ab      	str	r3, [r5, #40]	; 0x28
   17328:	2380      	movs	r3, #128	; 0x80
   1732a:	89a2      	ldrh	r2, [r4, #12]
   1732c:	6020      	str	r0, [r4, #0]
   1732e:	4313      	orrs	r3, r2
   17330:	81a3      	strh	r3, [r4, #12]
   17332:	9b00      	ldr	r3, [sp, #0]
   17334:	6120      	str	r0, [r4, #16]
   17336:	6163      	str	r3, [r4, #20]
   17338:	9b01      	ldr	r3, [sp, #4]
   1733a:	2b00      	cmp	r3, #0
   1733c:	d00d      	beq.n	1735a <__smakebuf_r+0x7a>
   1733e:	230e      	movs	r3, #14
   17340:	5ee1      	ldrsh	r1, [r4, r3]
   17342:	0028      	movs	r0, r5
   17344:	f001 fa52 	bl	187ec <_isatty_r>
   17348:	2800      	cmp	r0, #0
   1734a:	d006      	beq.n	1735a <__smakebuf_r+0x7a>
   1734c:	2203      	movs	r2, #3
   1734e:	89a3      	ldrh	r3, [r4, #12]
   17350:	4393      	bics	r3, r2
   17352:	001a      	movs	r2, r3
   17354:	2301      	movs	r3, #1
   17356:	4313      	orrs	r3, r2
   17358:	81a3      	strh	r3, [r4, #12]
   1735a:	89a0      	ldrh	r0, [r4, #12]
   1735c:	4338      	orrs	r0, r7
   1735e:	81a0      	strh	r0, [r4, #12]
   17360:	e7cb      	b.n	172fa <__smakebuf_r+0x1a>
   17362:	46c0      	nop			; (mov r8, r8)
   17364:	00017089 	.word	0x00017089

00017368 <__ascii_mbtowc>:
   17368:	b082      	sub	sp, #8
   1736a:	2900      	cmp	r1, #0
   1736c:	d100      	bne.n	17370 <__ascii_mbtowc+0x8>
   1736e:	a901      	add	r1, sp, #4
   17370:	1e10      	subs	r0, r2, #0
   17372:	d006      	beq.n	17382 <__ascii_mbtowc+0x1a>
   17374:	2b00      	cmp	r3, #0
   17376:	d006      	beq.n	17386 <__ascii_mbtowc+0x1e>
   17378:	7813      	ldrb	r3, [r2, #0]
   1737a:	600b      	str	r3, [r1, #0]
   1737c:	7810      	ldrb	r0, [r2, #0]
   1737e:	1e43      	subs	r3, r0, #1
   17380:	4198      	sbcs	r0, r3
   17382:	b002      	add	sp, #8
   17384:	4770      	bx	lr
   17386:	2002      	movs	r0, #2
   17388:	4240      	negs	r0, r0
   1738a:	e7fa      	b.n	17382 <__ascii_mbtowc+0x1a>

0001738c <__malloc_lock>:
   1738c:	4770      	bx	lr

0001738e <__malloc_unlock>:
   1738e:	4770      	bx	lr

00017390 <__ssputs_r>:
   17390:	b5f0      	push	{r4, r5, r6, r7, lr}
   17392:	688e      	ldr	r6, [r1, #8]
   17394:	b085      	sub	sp, #20
   17396:	0007      	movs	r7, r0
   17398:	000c      	movs	r4, r1
   1739a:	9203      	str	r2, [sp, #12]
   1739c:	9301      	str	r3, [sp, #4]
   1739e:	429e      	cmp	r6, r3
   173a0:	d839      	bhi.n	17416 <__ssputs_r+0x86>
   173a2:	2390      	movs	r3, #144	; 0x90
   173a4:	898a      	ldrh	r2, [r1, #12]
   173a6:	00db      	lsls	r3, r3, #3
   173a8:	421a      	tst	r2, r3
   173aa:	d034      	beq.n	17416 <__ssputs_r+0x86>
   173ac:	2503      	movs	r5, #3
   173ae:	6909      	ldr	r1, [r1, #16]
   173b0:	6823      	ldr	r3, [r4, #0]
   173b2:	1a5b      	subs	r3, r3, r1
   173b4:	9302      	str	r3, [sp, #8]
   173b6:	6963      	ldr	r3, [r4, #20]
   173b8:	9802      	ldr	r0, [sp, #8]
   173ba:	435d      	muls	r5, r3
   173bc:	0feb      	lsrs	r3, r5, #31
   173be:	195d      	adds	r5, r3, r5
   173c0:	9b01      	ldr	r3, [sp, #4]
   173c2:	106d      	asrs	r5, r5, #1
   173c4:	3301      	adds	r3, #1
   173c6:	181b      	adds	r3, r3, r0
   173c8:	42ab      	cmp	r3, r5
   173ca:	d900      	bls.n	173ce <__ssputs_r+0x3e>
   173cc:	001d      	movs	r5, r3
   173ce:	0553      	lsls	r3, r2, #21
   173d0:	d532      	bpl.n	17438 <__ssputs_r+0xa8>
   173d2:	0029      	movs	r1, r5
   173d4:	0038      	movs	r0, r7
   173d6:	f7ff f965 	bl	166a4 <_malloc_r>
   173da:	1e06      	subs	r6, r0, #0
   173dc:	d109      	bne.n	173f2 <__ssputs_r+0x62>
   173de:	230c      	movs	r3, #12
   173e0:	603b      	str	r3, [r7, #0]
   173e2:	2340      	movs	r3, #64	; 0x40
   173e4:	2001      	movs	r0, #1
   173e6:	89a2      	ldrh	r2, [r4, #12]
   173e8:	4240      	negs	r0, r0
   173ea:	4313      	orrs	r3, r2
   173ec:	81a3      	strh	r3, [r4, #12]
   173ee:	b005      	add	sp, #20
   173f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   173f2:	9a02      	ldr	r2, [sp, #8]
   173f4:	6921      	ldr	r1, [r4, #16]
   173f6:	f7ff f8e7 	bl	165c8 <memcpy>
   173fa:	89a3      	ldrh	r3, [r4, #12]
   173fc:	4a14      	ldr	r2, [pc, #80]	; (17450 <__ssputs_r+0xc0>)
   173fe:	401a      	ands	r2, r3
   17400:	2380      	movs	r3, #128	; 0x80
   17402:	4313      	orrs	r3, r2
   17404:	81a3      	strh	r3, [r4, #12]
   17406:	9b02      	ldr	r3, [sp, #8]
   17408:	6126      	str	r6, [r4, #16]
   1740a:	18f6      	adds	r6, r6, r3
   1740c:	6026      	str	r6, [r4, #0]
   1740e:	6165      	str	r5, [r4, #20]
   17410:	9e01      	ldr	r6, [sp, #4]
   17412:	1aed      	subs	r5, r5, r3
   17414:	60a5      	str	r5, [r4, #8]
   17416:	9b01      	ldr	r3, [sp, #4]
   17418:	42b3      	cmp	r3, r6
   1741a:	d200      	bcs.n	1741e <__ssputs_r+0x8e>
   1741c:	001e      	movs	r6, r3
   1741e:	0032      	movs	r2, r6
   17420:	9903      	ldr	r1, [sp, #12]
   17422:	6820      	ldr	r0, [r4, #0]
   17424:	f7ff f8d9 	bl	165da <memmove>
   17428:	68a3      	ldr	r3, [r4, #8]
   1742a:	2000      	movs	r0, #0
   1742c:	1b9b      	subs	r3, r3, r6
   1742e:	60a3      	str	r3, [r4, #8]
   17430:	6823      	ldr	r3, [r4, #0]
   17432:	199e      	adds	r6, r3, r6
   17434:	6026      	str	r6, [r4, #0]
   17436:	e7da      	b.n	173ee <__ssputs_r+0x5e>
   17438:	002a      	movs	r2, r5
   1743a:	0038      	movs	r0, r7
   1743c:	f001 fa07 	bl	1884e <_realloc_r>
   17440:	1e06      	subs	r6, r0, #0
   17442:	d1e0      	bne.n	17406 <__ssputs_r+0x76>
   17444:	6921      	ldr	r1, [r4, #16]
   17446:	0038      	movs	r0, r7
   17448:	f7ff f8e2 	bl	16610 <_free_r>
   1744c:	e7c7      	b.n	173de <__ssputs_r+0x4e>
   1744e:	46c0      	nop			; (mov r8, r8)
   17450:	fffffb7f 	.word	0xfffffb7f

00017454 <_svfiprintf_r>:
   17454:	b5f0      	push	{r4, r5, r6, r7, lr}
   17456:	b09f      	sub	sp, #124	; 0x7c
   17458:	9002      	str	r0, [sp, #8]
   1745a:	9305      	str	r3, [sp, #20]
   1745c:	898b      	ldrh	r3, [r1, #12]
   1745e:	000f      	movs	r7, r1
   17460:	0016      	movs	r6, r2
   17462:	061b      	lsls	r3, r3, #24
   17464:	d511      	bpl.n	1748a <_svfiprintf_r+0x36>
   17466:	690b      	ldr	r3, [r1, #16]
   17468:	2b00      	cmp	r3, #0
   1746a:	d10e      	bne.n	1748a <_svfiprintf_r+0x36>
   1746c:	2140      	movs	r1, #64	; 0x40
   1746e:	f7ff f919 	bl	166a4 <_malloc_r>
   17472:	6038      	str	r0, [r7, #0]
   17474:	6138      	str	r0, [r7, #16]
   17476:	2800      	cmp	r0, #0
   17478:	d105      	bne.n	17486 <_svfiprintf_r+0x32>
   1747a:	230c      	movs	r3, #12
   1747c:	9a02      	ldr	r2, [sp, #8]
   1747e:	3801      	subs	r0, #1
   17480:	6013      	str	r3, [r2, #0]
   17482:	b01f      	add	sp, #124	; 0x7c
   17484:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17486:	2340      	movs	r3, #64	; 0x40
   17488:	617b      	str	r3, [r7, #20]
   1748a:	2300      	movs	r3, #0
   1748c:	ad06      	add	r5, sp, #24
   1748e:	616b      	str	r3, [r5, #20]
   17490:	3320      	adds	r3, #32
   17492:	766b      	strb	r3, [r5, #25]
   17494:	3310      	adds	r3, #16
   17496:	76ab      	strb	r3, [r5, #26]
   17498:	0034      	movs	r4, r6
   1749a:	7823      	ldrb	r3, [r4, #0]
   1749c:	2b00      	cmp	r3, #0
   1749e:	d147      	bne.n	17530 <_svfiprintf_r+0xdc>
   174a0:	1ba3      	subs	r3, r4, r6
   174a2:	9304      	str	r3, [sp, #16]
   174a4:	d00d      	beq.n	174c2 <_svfiprintf_r+0x6e>
   174a6:	1ba3      	subs	r3, r4, r6
   174a8:	0032      	movs	r2, r6
   174aa:	0039      	movs	r1, r7
   174ac:	9802      	ldr	r0, [sp, #8]
   174ae:	f7ff ff6f 	bl	17390 <__ssputs_r>
   174b2:	1c43      	adds	r3, r0, #1
   174b4:	d100      	bne.n	174b8 <_svfiprintf_r+0x64>
   174b6:	e0b5      	b.n	17624 <_svfiprintf_r+0x1d0>
   174b8:	696a      	ldr	r2, [r5, #20]
   174ba:	9b04      	ldr	r3, [sp, #16]
   174bc:	4694      	mov	ip, r2
   174be:	4463      	add	r3, ip
   174c0:	616b      	str	r3, [r5, #20]
   174c2:	7823      	ldrb	r3, [r4, #0]
   174c4:	2b00      	cmp	r3, #0
   174c6:	d100      	bne.n	174ca <_svfiprintf_r+0x76>
   174c8:	e0ac      	b.n	17624 <_svfiprintf_r+0x1d0>
   174ca:	2201      	movs	r2, #1
   174cc:	2300      	movs	r3, #0
   174ce:	4252      	negs	r2, r2
   174d0:	606a      	str	r2, [r5, #4]
   174d2:	a902      	add	r1, sp, #8
   174d4:	3254      	adds	r2, #84	; 0x54
   174d6:	1852      	adds	r2, r2, r1
   174d8:	3401      	adds	r4, #1
   174da:	602b      	str	r3, [r5, #0]
   174dc:	60eb      	str	r3, [r5, #12]
   174de:	60ab      	str	r3, [r5, #8]
   174e0:	7013      	strb	r3, [r2, #0]
   174e2:	65ab      	str	r3, [r5, #88]	; 0x58
   174e4:	4e58      	ldr	r6, [pc, #352]	; (17648 <_svfiprintf_r+0x1f4>)
   174e6:	2205      	movs	r2, #5
   174e8:	7821      	ldrb	r1, [r4, #0]
   174ea:	0030      	movs	r0, r6
   174ec:	f001 f9a4 	bl	18838 <memchr>
   174f0:	1c62      	adds	r2, r4, #1
   174f2:	2800      	cmp	r0, #0
   174f4:	d120      	bne.n	17538 <_svfiprintf_r+0xe4>
   174f6:	6829      	ldr	r1, [r5, #0]
   174f8:	06cb      	lsls	r3, r1, #27
   174fa:	d504      	bpl.n	17506 <_svfiprintf_r+0xb2>
   174fc:	2353      	movs	r3, #83	; 0x53
   174fe:	ae02      	add	r6, sp, #8
   17500:	3020      	adds	r0, #32
   17502:	199b      	adds	r3, r3, r6
   17504:	7018      	strb	r0, [r3, #0]
   17506:	070b      	lsls	r3, r1, #28
   17508:	d504      	bpl.n	17514 <_svfiprintf_r+0xc0>
   1750a:	2353      	movs	r3, #83	; 0x53
   1750c:	202b      	movs	r0, #43	; 0x2b
   1750e:	ae02      	add	r6, sp, #8
   17510:	199b      	adds	r3, r3, r6
   17512:	7018      	strb	r0, [r3, #0]
   17514:	7823      	ldrb	r3, [r4, #0]
   17516:	2b2a      	cmp	r3, #42	; 0x2a
   17518:	d016      	beq.n	17548 <_svfiprintf_r+0xf4>
   1751a:	2000      	movs	r0, #0
   1751c:	210a      	movs	r1, #10
   1751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17520:	7822      	ldrb	r2, [r4, #0]
   17522:	3a30      	subs	r2, #48	; 0x30
   17524:	2a09      	cmp	r2, #9
   17526:	d955      	bls.n	175d4 <_svfiprintf_r+0x180>
   17528:	2800      	cmp	r0, #0
   1752a:	d015      	beq.n	17558 <_svfiprintf_r+0x104>
   1752c:	9309      	str	r3, [sp, #36]	; 0x24
   1752e:	e013      	b.n	17558 <_svfiprintf_r+0x104>
   17530:	2b25      	cmp	r3, #37	; 0x25
   17532:	d0b5      	beq.n	174a0 <_svfiprintf_r+0x4c>
   17534:	3401      	adds	r4, #1
   17536:	e7b0      	b.n	1749a <_svfiprintf_r+0x46>
   17538:	2301      	movs	r3, #1
   1753a:	1b80      	subs	r0, r0, r6
   1753c:	4083      	lsls	r3, r0
   1753e:	6829      	ldr	r1, [r5, #0]
   17540:	0014      	movs	r4, r2
   17542:	430b      	orrs	r3, r1
   17544:	602b      	str	r3, [r5, #0]
   17546:	e7cd      	b.n	174e4 <_svfiprintf_r+0x90>
   17548:	9b05      	ldr	r3, [sp, #20]
   1754a:	1d18      	adds	r0, r3, #4
   1754c:	681b      	ldr	r3, [r3, #0]
   1754e:	9005      	str	r0, [sp, #20]
   17550:	2b00      	cmp	r3, #0
   17552:	db39      	blt.n	175c8 <_svfiprintf_r+0x174>
   17554:	9309      	str	r3, [sp, #36]	; 0x24
   17556:	0014      	movs	r4, r2
   17558:	7823      	ldrb	r3, [r4, #0]
   1755a:	2b2e      	cmp	r3, #46	; 0x2e
   1755c:	d10b      	bne.n	17576 <_svfiprintf_r+0x122>
   1755e:	7863      	ldrb	r3, [r4, #1]
   17560:	1c62      	adds	r2, r4, #1
   17562:	2b2a      	cmp	r3, #42	; 0x2a
   17564:	d13e      	bne.n	175e4 <_svfiprintf_r+0x190>
   17566:	9b05      	ldr	r3, [sp, #20]
   17568:	3402      	adds	r4, #2
   1756a:	1d1a      	adds	r2, r3, #4
   1756c:	681b      	ldr	r3, [r3, #0]
   1756e:	9205      	str	r2, [sp, #20]
   17570:	2b00      	cmp	r3, #0
   17572:	db34      	blt.n	175de <_svfiprintf_r+0x18a>
   17574:	9307      	str	r3, [sp, #28]
   17576:	4e35      	ldr	r6, [pc, #212]	; (1764c <_svfiprintf_r+0x1f8>)
   17578:	7821      	ldrb	r1, [r4, #0]
   1757a:	2203      	movs	r2, #3
   1757c:	0030      	movs	r0, r6
   1757e:	f001 f95b 	bl	18838 <memchr>
   17582:	2800      	cmp	r0, #0
   17584:	d006      	beq.n	17594 <_svfiprintf_r+0x140>
   17586:	2340      	movs	r3, #64	; 0x40
   17588:	1b80      	subs	r0, r0, r6
   1758a:	4083      	lsls	r3, r0
   1758c:	682a      	ldr	r2, [r5, #0]
   1758e:	3401      	adds	r4, #1
   17590:	4313      	orrs	r3, r2
   17592:	602b      	str	r3, [r5, #0]
   17594:	7821      	ldrb	r1, [r4, #0]
   17596:	2206      	movs	r2, #6
   17598:	482d      	ldr	r0, [pc, #180]	; (17650 <_svfiprintf_r+0x1fc>)
   1759a:	1c66      	adds	r6, r4, #1
   1759c:	7629      	strb	r1, [r5, #24]
   1759e:	f001 f94b 	bl	18838 <memchr>
   175a2:	2800      	cmp	r0, #0
   175a4:	d046      	beq.n	17634 <_svfiprintf_r+0x1e0>
   175a6:	4b2b      	ldr	r3, [pc, #172]	; (17654 <_svfiprintf_r+0x200>)
   175a8:	2b00      	cmp	r3, #0
   175aa:	d12f      	bne.n	1760c <_svfiprintf_r+0x1b8>
   175ac:	6829      	ldr	r1, [r5, #0]
   175ae:	9b05      	ldr	r3, [sp, #20]
   175b0:	2207      	movs	r2, #7
   175b2:	05c9      	lsls	r1, r1, #23
   175b4:	d528      	bpl.n	17608 <_svfiprintf_r+0x1b4>
   175b6:	189b      	adds	r3, r3, r2
   175b8:	4393      	bics	r3, r2
   175ba:	3308      	adds	r3, #8
   175bc:	9305      	str	r3, [sp, #20]
   175be:	696b      	ldr	r3, [r5, #20]
   175c0:	9a03      	ldr	r2, [sp, #12]
   175c2:	189b      	adds	r3, r3, r2
   175c4:	616b      	str	r3, [r5, #20]
   175c6:	e767      	b.n	17498 <_svfiprintf_r+0x44>
   175c8:	425b      	negs	r3, r3
   175ca:	60eb      	str	r3, [r5, #12]
   175cc:	2302      	movs	r3, #2
   175ce:	430b      	orrs	r3, r1
   175d0:	602b      	str	r3, [r5, #0]
   175d2:	e7c0      	b.n	17556 <_svfiprintf_r+0x102>
   175d4:	434b      	muls	r3, r1
   175d6:	3401      	adds	r4, #1
   175d8:	189b      	adds	r3, r3, r2
   175da:	2001      	movs	r0, #1
   175dc:	e7a0      	b.n	17520 <_svfiprintf_r+0xcc>
   175de:	2301      	movs	r3, #1
   175e0:	425b      	negs	r3, r3
   175e2:	e7c7      	b.n	17574 <_svfiprintf_r+0x120>
   175e4:	2300      	movs	r3, #0
   175e6:	0014      	movs	r4, r2
   175e8:	200a      	movs	r0, #10
   175ea:	001a      	movs	r2, r3
   175ec:	606b      	str	r3, [r5, #4]
   175ee:	7821      	ldrb	r1, [r4, #0]
   175f0:	3930      	subs	r1, #48	; 0x30
   175f2:	2909      	cmp	r1, #9
   175f4:	d903      	bls.n	175fe <_svfiprintf_r+0x1aa>
   175f6:	2b00      	cmp	r3, #0
   175f8:	d0bd      	beq.n	17576 <_svfiprintf_r+0x122>
   175fa:	9207      	str	r2, [sp, #28]
   175fc:	e7bb      	b.n	17576 <_svfiprintf_r+0x122>
   175fe:	4342      	muls	r2, r0
   17600:	3401      	adds	r4, #1
   17602:	1852      	adds	r2, r2, r1
   17604:	2301      	movs	r3, #1
   17606:	e7f2      	b.n	175ee <_svfiprintf_r+0x19a>
   17608:	3307      	adds	r3, #7
   1760a:	e7d5      	b.n	175b8 <_svfiprintf_r+0x164>
   1760c:	ab05      	add	r3, sp, #20
   1760e:	9300      	str	r3, [sp, #0]
   17610:	003a      	movs	r2, r7
   17612:	4b11      	ldr	r3, [pc, #68]	; (17658 <_svfiprintf_r+0x204>)
   17614:	0029      	movs	r1, r5
   17616:	9802      	ldr	r0, [sp, #8]
   17618:	e000      	b.n	1761c <_svfiprintf_r+0x1c8>
   1761a:	bf00      	nop
   1761c:	9003      	str	r0, [sp, #12]
   1761e:	9b03      	ldr	r3, [sp, #12]
   17620:	3301      	adds	r3, #1
   17622:	d1cc      	bne.n	175be <_svfiprintf_r+0x16a>
   17624:	89bb      	ldrh	r3, [r7, #12]
   17626:	980b      	ldr	r0, [sp, #44]	; 0x2c
   17628:	065b      	lsls	r3, r3, #25
   1762a:	d400      	bmi.n	1762e <_svfiprintf_r+0x1da>
   1762c:	e729      	b.n	17482 <_svfiprintf_r+0x2e>
   1762e:	2001      	movs	r0, #1
   17630:	4240      	negs	r0, r0
   17632:	e726      	b.n	17482 <_svfiprintf_r+0x2e>
   17634:	ab05      	add	r3, sp, #20
   17636:	9300      	str	r3, [sp, #0]
   17638:	003a      	movs	r2, r7
   1763a:	4b07      	ldr	r3, [pc, #28]	; (17658 <_svfiprintf_r+0x204>)
   1763c:	0029      	movs	r1, r5
   1763e:	9802      	ldr	r0, [sp, #8]
   17640:	f000 f9be 	bl	179c0 <_printf_i>
   17644:	e7ea      	b.n	1761c <_svfiprintf_r+0x1c8>
   17646:	46c0      	nop			; (mov r8, r8)
   17648:	0001b036 	.word	0x0001b036
   1764c:	0001b03c 	.word	0x0001b03c
   17650:	0001b040 	.word	0x0001b040
   17654:	00000000 	.word	0x00000000
   17658:	00017391 	.word	0x00017391

0001765c <__sfputc_r>:
   1765c:	6893      	ldr	r3, [r2, #8]
   1765e:	b510      	push	{r4, lr}
   17660:	3b01      	subs	r3, #1
   17662:	6093      	str	r3, [r2, #8]
   17664:	2b00      	cmp	r3, #0
   17666:	da05      	bge.n	17674 <__sfputc_r+0x18>
   17668:	6994      	ldr	r4, [r2, #24]
   1766a:	42a3      	cmp	r3, r4
   1766c:	db08      	blt.n	17680 <__sfputc_r+0x24>
   1766e:	b2cb      	uxtb	r3, r1
   17670:	2b0a      	cmp	r3, #10
   17672:	d005      	beq.n	17680 <__sfputc_r+0x24>
   17674:	6813      	ldr	r3, [r2, #0]
   17676:	1c58      	adds	r0, r3, #1
   17678:	6010      	str	r0, [r2, #0]
   1767a:	7019      	strb	r1, [r3, #0]
   1767c:	b2c8      	uxtb	r0, r1
   1767e:	bd10      	pop	{r4, pc}
   17680:	f7ff fb6c 	bl	16d5c <__swbuf_r>
   17684:	e7fb      	b.n	1767e <__sfputc_r+0x22>

00017686 <__sfputs_r>:
   17686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17688:	0006      	movs	r6, r0
   1768a:	000f      	movs	r7, r1
   1768c:	0014      	movs	r4, r2
   1768e:	18d5      	adds	r5, r2, r3
   17690:	42ac      	cmp	r4, r5
   17692:	d101      	bne.n	17698 <__sfputs_r+0x12>
   17694:	2000      	movs	r0, #0
   17696:	e007      	b.n	176a8 <__sfputs_r+0x22>
   17698:	7821      	ldrb	r1, [r4, #0]
   1769a:	003a      	movs	r2, r7
   1769c:	0030      	movs	r0, r6
   1769e:	f7ff ffdd 	bl	1765c <__sfputc_r>
   176a2:	3401      	adds	r4, #1
   176a4:	1c43      	adds	r3, r0, #1
   176a6:	d1f3      	bne.n	17690 <__sfputs_r+0xa>
   176a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000176ac <_vfiprintf_r>:
   176ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   176ae:	b09f      	sub	sp, #124	; 0x7c
   176b0:	0006      	movs	r6, r0
   176b2:	000f      	movs	r7, r1
   176b4:	0014      	movs	r4, r2
   176b6:	9305      	str	r3, [sp, #20]
   176b8:	2800      	cmp	r0, #0
   176ba:	d004      	beq.n	176c6 <_vfiprintf_r+0x1a>
   176bc:	6983      	ldr	r3, [r0, #24]
   176be:	2b00      	cmp	r3, #0
   176c0:	d101      	bne.n	176c6 <_vfiprintf_r+0x1a>
   176c2:	f7ff fd23 	bl	1710c <__sinit>
   176c6:	4b7f      	ldr	r3, [pc, #508]	; (178c4 <_vfiprintf_r+0x218>)
   176c8:	429f      	cmp	r7, r3
   176ca:	d15c      	bne.n	17786 <_vfiprintf_r+0xda>
   176cc:	6877      	ldr	r7, [r6, #4]
   176ce:	89bb      	ldrh	r3, [r7, #12]
   176d0:	071b      	lsls	r3, r3, #28
   176d2:	d562      	bpl.n	1779a <_vfiprintf_r+0xee>
   176d4:	693b      	ldr	r3, [r7, #16]
   176d6:	2b00      	cmp	r3, #0
   176d8:	d05f      	beq.n	1779a <_vfiprintf_r+0xee>
   176da:	2300      	movs	r3, #0
   176dc:	ad06      	add	r5, sp, #24
   176de:	616b      	str	r3, [r5, #20]
   176e0:	3320      	adds	r3, #32
   176e2:	766b      	strb	r3, [r5, #25]
   176e4:	3310      	adds	r3, #16
   176e6:	76ab      	strb	r3, [r5, #26]
   176e8:	9402      	str	r4, [sp, #8]
   176ea:	9c02      	ldr	r4, [sp, #8]
   176ec:	7823      	ldrb	r3, [r4, #0]
   176ee:	2b00      	cmp	r3, #0
   176f0:	d15d      	bne.n	177ae <_vfiprintf_r+0x102>
   176f2:	9b02      	ldr	r3, [sp, #8]
   176f4:	1ae3      	subs	r3, r4, r3
   176f6:	9304      	str	r3, [sp, #16]
   176f8:	d00d      	beq.n	17716 <_vfiprintf_r+0x6a>
   176fa:	9b04      	ldr	r3, [sp, #16]
   176fc:	9a02      	ldr	r2, [sp, #8]
   176fe:	0039      	movs	r1, r7
   17700:	0030      	movs	r0, r6
   17702:	f7ff ffc0 	bl	17686 <__sfputs_r>
   17706:	1c43      	adds	r3, r0, #1
   17708:	d100      	bne.n	1770c <_vfiprintf_r+0x60>
   1770a:	e0cc      	b.n	178a6 <_vfiprintf_r+0x1fa>
   1770c:	696a      	ldr	r2, [r5, #20]
   1770e:	9b04      	ldr	r3, [sp, #16]
   17710:	4694      	mov	ip, r2
   17712:	4463      	add	r3, ip
   17714:	616b      	str	r3, [r5, #20]
   17716:	7823      	ldrb	r3, [r4, #0]
   17718:	2b00      	cmp	r3, #0
   1771a:	d100      	bne.n	1771e <_vfiprintf_r+0x72>
   1771c:	e0c3      	b.n	178a6 <_vfiprintf_r+0x1fa>
   1771e:	2201      	movs	r2, #1
   17720:	2300      	movs	r3, #0
   17722:	4252      	negs	r2, r2
   17724:	606a      	str	r2, [r5, #4]
   17726:	a902      	add	r1, sp, #8
   17728:	3254      	adds	r2, #84	; 0x54
   1772a:	1852      	adds	r2, r2, r1
   1772c:	3401      	adds	r4, #1
   1772e:	602b      	str	r3, [r5, #0]
   17730:	60eb      	str	r3, [r5, #12]
   17732:	60ab      	str	r3, [r5, #8]
   17734:	7013      	strb	r3, [r2, #0]
   17736:	65ab      	str	r3, [r5, #88]	; 0x58
   17738:	7821      	ldrb	r1, [r4, #0]
   1773a:	2205      	movs	r2, #5
   1773c:	4862      	ldr	r0, [pc, #392]	; (178c8 <_vfiprintf_r+0x21c>)
   1773e:	f001 f87b 	bl	18838 <memchr>
   17742:	1c63      	adds	r3, r4, #1
   17744:	469c      	mov	ip, r3
   17746:	2800      	cmp	r0, #0
   17748:	d135      	bne.n	177b6 <_vfiprintf_r+0x10a>
   1774a:	6829      	ldr	r1, [r5, #0]
   1774c:	06cb      	lsls	r3, r1, #27
   1774e:	d504      	bpl.n	1775a <_vfiprintf_r+0xae>
   17750:	2353      	movs	r3, #83	; 0x53
   17752:	aa02      	add	r2, sp, #8
   17754:	3020      	adds	r0, #32
   17756:	189b      	adds	r3, r3, r2
   17758:	7018      	strb	r0, [r3, #0]
   1775a:	070b      	lsls	r3, r1, #28
   1775c:	d504      	bpl.n	17768 <_vfiprintf_r+0xbc>
   1775e:	2353      	movs	r3, #83	; 0x53
   17760:	202b      	movs	r0, #43	; 0x2b
   17762:	aa02      	add	r2, sp, #8
   17764:	189b      	adds	r3, r3, r2
   17766:	7018      	strb	r0, [r3, #0]
   17768:	7823      	ldrb	r3, [r4, #0]
   1776a:	2b2a      	cmp	r3, #42	; 0x2a
   1776c:	d02c      	beq.n	177c8 <_vfiprintf_r+0x11c>
   1776e:	2000      	movs	r0, #0
   17770:	210a      	movs	r1, #10
   17772:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17774:	7822      	ldrb	r2, [r4, #0]
   17776:	3a30      	subs	r2, #48	; 0x30
   17778:	2a09      	cmp	r2, #9
   1777a:	d800      	bhi.n	1777e <_vfiprintf_r+0xd2>
   1777c:	e06b      	b.n	17856 <_vfiprintf_r+0x1aa>
   1777e:	2800      	cmp	r0, #0
   17780:	d02a      	beq.n	177d8 <_vfiprintf_r+0x12c>
   17782:	9309      	str	r3, [sp, #36]	; 0x24
   17784:	e028      	b.n	177d8 <_vfiprintf_r+0x12c>
   17786:	4b51      	ldr	r3, [pc, #324]	; (178cc <_vfiprintf_r+0x220>)
   17788:	429f      	cmp	r7, r3
   1778a:	d101      	bne.n	17790 <_vfiprintf_r+0xe4>
   1778c:	68b7      	ldr	r7, [r6, #8]
   1778e:	e79e      	b.n	176ce <_vfiprintf_r+0x22>
   17790:	4b4f      	ldr	r3, [pc, #316]	; (178d0 <_vfiprintf_r+0x224>)
   17792:	429f      	cmp	r7, r3
   17794:	d19b      	bne.n	176ce <_vfiprintf_r+0x22>
   17796:	68f7      	ldr	r7, [r6, #12]
   17798:	e799      	b.n	176ce <_vfiprintf_r+0x22>
   1779a:	0039      	movs	r1, r7
   1779c:	0030      	movs	r0, r6
   1779e:	f7ff fb33 	bl	16e08 <__swsetup_r>
   177a2:	2800      	cmp	r0, #0
   177a4:	d099      	beq.n	176da <_vfiprintf_r+0x2e>
   177a6:	2001      	movs	r0, #1
   177a8:	4240      	negs	r0, r0
   177aa:	b01f      	add	sp, #124	; 0x7c
   177ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   177ae:	2b25      	cmp	r3, #37	; 0x25
   177b0:	d09f      	beq.n	176f2 <_vfiprintf_r+0x46>
   177b2:	3401      	adds	r4, #1
   177b4:	e79a      	b.n	176ec <_vfiprintf_r+0x40>
   177b6:	4b44      	ldr	r3, [pc, #272]	; (178c8 <_vfiprintf_r+0x21c>)
   177b8:	6829      	ldr	r1, [r5, #0]
   177ba:	1ac0      	subs	r0, r0, r3
   177bc:	2301      	movs	r3, #1
   177be:	4083      	lsls	r3, r0
   177c0:	430b      	orrs	r3, r1
   177c2:	602b      	str	r3, [r5, #0]
   177c4:	4664      	mov	r4, ip
   177c6:	e7b7      	b.n	17738 <_vfiprintf_r+0x8c>
   177c8:	9b05      	ldr	r3, [sp, #20]
   177ca:	1d18      	adds	r0, r3, #4
   177cc:	681b      	ldr	r3, [r3, #0]
   177ce:	9005      	str	r0, [sp, #20]
   177d0:	2b00      	cmp	r3, #0
   177d2:	db3a      	blt.n	1784a <_vfiprintf_r+0x19e>
   177d4:	9309      	str	r3, [sp, #36]	; 0x24
   177d6:	4664      	mov	r4, ip
   177d8:	7823      	ldrb	r3, [r4, #0]
   177da:	2b2e      	cmp	r3, #46	; 0x2e
   177dc:	d10b      	bne.n	177f6 <_vfiprintf_r+0x14a>
   177de:	7863      	ldrb	r3, [r4, #1]
   177e0:	1c62      	adds	r2, r4, #1
   177e2:	2b2a      	cmp	r3, #42	; 0x2a
   177e4:	d13f      	bne.n	17866 <_vfiprintf_r+0x1ba>
   177e6:	9b05      	ldr	r3, [sp, #20]
   177e8:	3402      	adds	r4, #2
   177ea:	1d1a      	adds	r2, r3, #4
   177ec:	681b      	ldr	r3, [r3, #0]
   177ee:	9205      	str	r2, [sp, #20]
   177f0:	2b00      	cmp	r3, #0
   177f2:	db35      	blt.n	17860 <_vfiprintf_r+0x1b4>
   177f4:	9307      	str	r3, [sp, #28]
   177f6:	7821      	ldrb	r1, [r4, #0]
   177f8:	2203      	movs	r2, #3
   177fa:	4836      	ldr	r0, [pc, #216]	; (178d4 <_vfiprintf_r+0x228>)
   177fc:	f001 f81c 	bl	18838 <memchr>
   17800:	2800      	cmp	r0, #0
   17802:	d007      	beq.n	17814 <_vfiprintf_r+0x168>
   17804:	4b33      	ldr	r3, [pc, #204]	; (178d4 <_vfiprintf_r+0x228>)
   17806:	682a      	ldr	r2, [r5, #0]
   17808:	1ac0      	subs	r0, r0, r3
   1780a:	2340      	movs	r3, #64	; 0x40
   1780c:	4083      	lsls	r3, r0
   1780e:	4313      	orrs	r3, r2
   17810:	602b      	str	r3, [r5, #0]
   17812:	3401      	adds	r4, #1
   17814:	7821      	ldrb	r1, [r4, #0]
   17816:	1c63      	adds	r3, r4, #1
   17818:	2206      	movs	r2, #6
   1781a:	482f      	ldr	r0, [pc, #188]	; (178d8 <_vfiprintf_r+0x22c>)
   1781c:	9302      	str	r3, [sp, #8]
   1781e:	7629      	strb	r1, [r5, #24]
   17820:	f001 f80a 	bl	18838 <memchr>
   17824:	2800      	cmp	r0, #0
   17826:	d044      	beq.n	178b2 <_vfiprintf_r+0x206>
   17828:	4b2c      	ldr	r3, [pc, #176]	; (178dc <_vfiprintf_r+0x230>)
   1782a:	2b00      	cmp	r3, #0
   1782c:	d12f      	bne.n	1788e <_vfiprintf_r+0x1e2>
   1782e:	6829      	ldr	r1, [r5, #0]
   17830:	9b05      	ldr	r3, [sp, #20]
   17832:	2207      	movs	r2, #7
   17834:	05c9      	lsls	r1, r1, #23
   17836:	d528      	bpl.n	1788a <_vfiprintf_r+0x1de>
   17838:	189b      	adds	r3, r3, r2
   1783a:	4393      	bics	r3, r2
   1783c:	3308      	adds	r3, #8
   1783e:	9305      	str	r3, [sp, #20]
   17840:	696b      	ldr	r3, [r5, #20]
   17842:	9a03      	ldr	r2, [sp, #12]
   17844:	189b      	adds	r3, r3, r2
   17846:	616b      	str	r3, [r5, #20]
   17848:	e74f      	b.n	176ea <_vfiprintf_r+0x3e>
   1784a:	425b      	negs	r3, r3
   1784c:	60eb      	str	r3, [r5, #12]
   1784e:	2302      	movs	r3, #2
   17850:	430b      	orrs	r3, r1
   17852:	602b      	str	r3, [r5, #0]
   17854:	e7bf      	b.n	177d6 <_vfiprintf_r+0x12a>
   17856:	434b      	muls	r3, r1
   17858:	3401      	adds	r4, #1
   1785a:	189b      	adds	r3, r3, r2
   1785c:	2001      	movs	r0, #1
   1785e:	e789      	b.n	17774 <_vfiprintf_r+0xc8>
   17860:	2301      	movs	r3, #1
   17862:	425b      	negs	r3, r3
   17864:	e7c6      	b.n	177f4 <_vfiprintf_r+0x148>
   17866:	2300      	movs	r3, #0
   17868:	0014      	movs	r4, r2
   1786a:	200a      	movs	r0, #10
   1786c:	001a      	movs	r2, r3
   1786e:	606b      	str	r3, [r5, #4]
   17870:	7821      	ldrb	r1, [r4, #0]
   17872:	3930      	subs	r1, #48	; 0x30
   17874:	2909      	cmp	r1, #9
   17876:	d903      	bls.n	17880 <_vfiprintf_r+0x1d4>
   17878:	2b00      	cmp	r3, #0
   1787a:	d0bc      	beq.n	177f6 <_vfiprintf_r+0x14a>
   1787c:	9207      	str	r2, [sp, #28]
   1787e:	e7ba      	b.n	177f6 <_vfiprintf_r+0x14a>
   17880:	4342      	muls	r2, r0
   17882:	3401      	adds	r4, #1
   17884:	1852      	adds	r2, r2, r1
   17886:	2301      	movs	r3, #1
   17888:	e7f2      	b.n	17870 <_vfiprintf_r+0x1c4>
   1788a:	3307      	adds	r3, #7
   1788c:	e7d5      	b.n	1783a <_vfiprintf_r+0x18e>
   1788e:	ab05      	add	r3, sp, #20
   17890:	9300      	str	r3, [sp, #0]
   17892:	003a      	movs	r2, r7
   17894:	4b12      	ldr	r3, [pc, #72]	; (178e0 <_vfiprintf_r+0x234>)
   17896:	0029      	movs	r1, r5
   17898:	0030      	movs	r0, r6
   1789a:	e000      	b.n	1789e <_vfiprintf_r+0x1f2>
   1789c:	bf00      	nop
   1789e:	9003      	str	r0, [sp, #12]
   178a0:	9b03      	ldr	r3, [sp, #12]
   178a2:	3301      	adds	r3, #1
   178a4:	d1cc      	bne.n	17840 <_vfiprintf_r+0x194>
   178a6:	89bb      	ldrh	r3, [r7, #12]
   178a8:	065b      	lsls	r3, r3, #25
   178aa:	d500      	bpl.n	178ae <_vfiprintf_r+0x202>
   178ac:	e77b      	b.n	177a6 <_vfiprintf_r+0xfa>
   178ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
   178b0:	e77b      	b.n	177aa <_vfiprintf_r+0xfe>
   178b2:	ab05      	add	r3, sp, #20
   178b4:	9300      	str	r3, [sp, #0]
   178b6:	003a      	movs	r2, r7
   178b8:	4b09      	ldr	r3, [pc, #36]	; (178e0 <_vfiprintf_r+0x234>)
   178ba:	0029      	movs	r1, r5
   178bc:	0030      	movs	r0, r6
   178be:	f000 f87f 	bl	179c0 <_printf_i>
   178c2:	e7ec      	b.n	1789e <_vfiprintf_r+0x1f2>
   178c4:	0001afec 	.word	0x0001afec
   178c8:	0001b036 	.word	0x0001b036
   178cc:	0001b00c 	.word	0x0001b00c
   178d0:	0001afcc 	.word	0x0001afcc
   178d4:	0001b03c 	.word	0x0001b03c
   178d8:	0001b040 	.word	0x0001b040
   178dc:	00000000 	.word	0x00000000
   178e0:	00017687 	.word	0x00017687

000178e4 <_printf_common>:
   178e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   178e6:	0015      	movs	r5, r2
   178e8:	9301      	str	r3, [sp, #4]
   178ea:	688a      	ldr	r2, [r1, #8]
   178ec:	690b      	ldr	r3, [r1, #16]
   178ee:	9000      	str	r0, [sp, #0]
   178f0:	000c      	movs	r4, r1
   178f2:	4293      	cmp	r3, r2
   178f4:	da00      	bge.n	178f8 <_printf_common+0x14>
   178f6:	0013      	movs	r3, r2
   178f8:	0022      	movs	r2, r4
   178fa:	602b      	str	r3, [r5, #0]
   178fc:	3243      	adds	r2, #67	; 0x43
   178fe:	7812      	ldrb	r2, [r2, #0]
   17900:	2a00      	cmp	r2, #0
   17902:	d001      	beq.n	17908 <_printf_common+0x24>
   17904:	3301      	adds	r3, #1
   17906:	602b      	str	r3, [r5, #0]
   17908:	6823      	ldr	r3, [r4, #0]
   1790a:	069b      	lsls	r3, r3, #26
   1790c:	d502      	bpl.n	17914 <_printf_common+0x30>
   1790e:	682b      	ldr	r3, [r5, #0]
   17910:	3302      	adds	r3, #2
   17912:	602b      	str	r3, [r5, #0]
   17914:	2706      	movs	r7, #6
   17916:	6823      	ldr	r3, [r4, #0]
   17918:	401f      	ands	r7, r3
   1791a:	d027      	beq.n	1796c <_printf_common+0x88>
   1791c:	0023      	movs	r3, r4
   1791e:	3343      	adds	r3, #67	; 0x43
   17920:	781b      	ldrb	r3, [r3, #0]
   17922:	1e5a      	subs	r2, r3, #1
   17924:	4193      	sbcs	r3, r2
   17926:	6822      	ldr	r2, [r4, #0]
   17928:	0692      	lsls	r2, r2, #26
   1792a:	d430      	bmi.n	1798e <_printf_common+0xaa>
   1792c:	0022      	movs	r2, r4
   1792e:	9901      	ldr	r1, [sp, #4]
   17930:	3243      	adds	r2, #67	; 0x43
   17932:	9800      	ldr	r0, [sp, #0]
   17934:	9e08      	ldr	r6, [sp, #32]
   17936:	47b0      	blx	r6
   17938:	1c43      	adds	r3, r0, #1
   1793a:	d025      	beq.n	17988 <_printf_common+0xa4>
   1793c:	2306      	movs	r3, #6
   1793e:	6820      	ldr	r0, [r4, #0]
   17940:	682a      	ldr	r2, [r5, #0]
   17942:	68e1      	ldr	r1, [r4, #12]
   17944:	4003      	ands	r3, r0
   17946:	2500      	movs	r5, #0
   17948:	2b04      	cmp	r3, #4
   1794a:	d103      	bne.n	17954 <_printf_common+0x70>
   1794c:	1a8d      	subs	r5, r1, r2
   1794e:	43eb      	mvns	r3, r5
   17950:	17db      	asrs	r3, r3, #31
   17952:	401d      	ands	r5, r3
   17954:	68a3      	ldr	r3, [r4, #8]
   17956:	6922      	ldr	r2, [r4, #16]
   17958:	4293      	cmp	r3, r2
   1795a:	dd01      	ble.n	17960 <_printf_common+0x7c>
   1795c:	1a9b      	subs	r3, r3, r2
   1795e:	18ed      	adds	r5, r5, r3
   17960:	2700      	movs	r7, #0
   17962:	42bd      	cmp	r5, r7
   17964:	d120      	bne.n	179a8 <_printf_common+0xc4>
   17966:	2000      	movs	r0, #0
   17968:	e010      	b.n	1798c <_printf_common+0xa8>
   1796a:	3701      	adds	r7, #1
   1796c:	68e3      	ldr	r3, [r4, #12]
   1796e:	682a      	ldr	r2, [r5, #0]
   17970:	1a9b      	subs	r3, r3, r2
   17972:	429f      	cmp	r7, r3
   17974:	dad2      	bge.n	1791c <_printf_common+0x38>
   17976:	0022      	movs	r2, r4
   17978:	2301      	movs	r3, #1
   1797a:	3219      	adds	r2, #25
   1797c:	9901      	ldr	r1, [sp, #4]
   1797e:	9800      	ldr	r0, [sp, #0]
   17980:	9e08      	ldr	r6, [sp, #32]
   17982:	47b0      	blx	r6
   17984:	1c43      	adds	r3, r0, #1
   17986:	d1f0      	bne.n	1796a <_printf_common+0x86>
   17988:	2001      	movs	r0, #1
   1798a:	4240      	negs	r0, r0
   1798c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1798e:	2030      	movs	r0, #48	; 0x30
   17990:	18e1      	adds	r1, r4, r3
   17992:	3143      	adds	r1, #67	; 0x43
   17994:	7008      	strb	r0, [r1, #0]
   17996:	0021      	movs	r1, r4
   17998:	1c5a      	adds	r2, r3, #1
   1799a:	3145      	adds	r1, #69	; 0x45
   1799c:	7809      	ldrb	r1, [r1, #0]
   1799e:	18a2      	adds	r2, r4, r2
   179a0:	3243      	adds	r2, #67	; 0x43
   179a2:	3302      	adds	r3, #2
   179a4:	7011      	strb	r1, [r2, #0]
   179a6:	e7c1      	b.n	1792c <_printf_common+0x48>
   179a8:	0022      	movs	r2, r4
   179aa:	2301      	movs	r3, #1
   179ac:	321a      	adds	r2, #26
   179ae:	9901      	ldr	r1, [sp, #4]
   179b0:	9800      	ldr	r0, [sp, #0]
   179b2:	9e08      	ldr	r6, [sp, #32]
   179b4:	47b0      	blx	r6
   179b6:	1c43      	adds	r3, r0, #1
   179b8:	d0e6      	beq.n	17988 <_printf_common+0xa4>
   179ba:	3701      	adds	r7, #1
   179bc:	e7d1      	b.n	17962 <_printf_common+0x7e>
	...

000179c0 <_printf_i>:
   179c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   179c2:	b08b      	sub	sp, #44	; 0x2c
   179c4:	9206      	str	r2, [sp, #24]
   179c6:	000a      	movs	r2, r1
   179c8:	3243      	adds	r2, #67	; 0x43
   179ca:	9307      	str	r3, [sp, #28]
   179cc:	9005      	str	r0, [sp, #20]
   179ce:	9204      	str	r2, [sp, #16]
   179d0:	7e0a      	ldrb	r2, [r1, #24]
   179d2:	000c      	movs	r4, r1
   179d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   179d6:	2a6e      	cmp	r2, #110	; 0x6e
   179d8:	d100      	bne.n	179dc <_printf_i+0x1c>
   179da:	e08f      	b.n	17afc <_printf_i+0x13c>
   179dc:	d817      	bhi.n	17a0e <_printf_i+0x4e>
   179de:	2a63      	cmp	r2, #99	; 0x63
   179e0:	d02c      	beq.n	17a3c <_printf_i+0x7c>
   179e2:	d808      	bhi.n	179f6 <_printf_i+0x36>
   179e4:	2a00      	cmp	r2, #0
   179e6:	d100      	bne.n	179ea <_printf_i+0x2a>
   179e8:	e099      	b.n	17b1e <_printf_i+0x15e>
   179ea:	2a58      	cmp	r2, #88	; 0x58
   179ec:	d054      	beq.n	17a98 <_printf_i+0xd8>
   179ee:	0026      	movs	r6, r4
   179f0:	3642      	adds	r6, #66	; 0x42
   179f2:	7032      	strb	r2, [r6, #0]
   179f4:	e029      	b.n	17a4a <_printf_i+0x8a>
   179f6:	2a64      	cmp	r2, #100	; 0x64
   179f8:	d001      	beq.n	179fe <_printf_i+0x3e>
   179fa:	2a69      	cmp	r2, #105	; 0x69
   179fc:	d1f7      	bne.n	179ee <_printf_i+0x2e>
   179fe:	6821      	ldr	r1, [r4, #0]
   17a00:	681a      	ldr	r2, [r3, #0]
   17a02:	0608      	lsls	r0, r1, #24
   17a04:	d523      	bpl.n	17a4e <_printf_i+0x8e>
   17a06:	1d11      	adds	r1, r2, #4
   17a08:	6019      	str	r1, [r3, #0]
   17a0a:	6815      	ldr	r5, [r2, #0]
   17a0c:	e025      	b.n	17a5a <_printf_i+0x9a>
   17a0e:	2a73      	cmp	r2, #115	; 0x73
   17a10:	d100      	bne.n	17a14 <_printf_i+0x54>
   17a12:	e088      	b.n	17b26 <_printf_i+0x166>
   17a14:	d808      	bhi.n	17a28 <_printf_i+0x68>
   17a16:	2a6f      	cmp	r2, #111	; 0x6f
   17a18:	d029      	beq.n	17a6e <_printf_i+0xae>
   17a1a:	2a70      	cmp	r2, #112	; 0x70
   17a1c:	d1e7      	bne.n	179ee <_printf_i+0x2e>
   17a1e:	2220      	movs	r2, #32
   17a20:	6809      	ldr	r1, [r1, #0]
   17a22:	430a      	orrs	r2, r1
   17a24:	6022      	str	r2, [r4, #0]
   17a26:	e003      	b.n	17a30 <_printf_i+0x70>
   17a28:	2a75      	cmp	r2, #117	; 0x75
   17a2a:	d020      	beq.n	17a6e <_printf_i+0xae>
   17a2c:	2a78      	cmp	r2, #120	; 0x78
   17a2e:	d1de      	bne.n	179ee <_printf_i+0x2e>
   17a30:	0022      	movs	r2, r4
   17a32:	2178      	movs	r1, #120	; 0x78
   17a34:	3245      	adds	r2, #69	; 0x45
   17a36:	7011      	strb	r1, [r2, #0]
   17a38:	4a6c      	ldr	r2, [pc, #432]	; (17bec <_printf_i+0x22c>)
   17a3a:	e030      	b.n	17a9e <_printf_i+0xde>
   17a3c:	000e      	movs	r6, r1
   17a3e:	681a      	ldr	r2, [r3, #0]
   17a40:	3642      	adds	r6, #66	; 0x42
   17a42:	1d11      	adds	r1, r2, #4
   17a44:	6019      	str	r1, [r3, #0]
   17a46:	6813      	ldr	r3, [r2, #0]
   17a48:	7033      	strb	r3, [r6, #0]
   17a4a:	2301      	movs	r3, #1
   17a4c:	e079      	b.n	17b42 <_printf_i+0x182>
   17a4e:	0649      	lsls	r1, r1, #25
   17a50:	d5d9      	bpl.n	17a06 <_printf_i+0x46>
   17a52:	1d11      	adds	r1, r2, #4
   17a54:	6019      	str	r1, [r3, #0]
   17a56:	2300      	movs	r3, #0
   17a58:	5ed5      	ldrsh	r5, [r2, r3]
   17a5a:	2d00      	cmp	r5, #0
   17a5c:	da03      	bge.n	17a66 <_printf_i+0xa6>
   17a5e:	232d      	movs	r3, #45	; 0x2d
   17a60:	9a04      	ldr	r2, [sp, #16]
   17a62:	426d      	negs	r5, r5
   17a64:	7013      	strb	r3, [r2, #0]
   17a66:	4b62      	ldr	r3, [pc, #392]	; (17bf0 <_printf_i+0x230>)
   17a68:	270a      	movs	r7, #10
   17a6a:	9303      	str	r3, [sp, #12]
   17a6c:	e02f      	b.n	17ace <_printf_i+0x10e>
   17a6e:	6820      	ldr	r0, [r4, #0]
   17a70:	6819      	ldr	r1, [r3, #0]
   17a72:	0605      	lsls	r5, r0, #24
   17a74:	d503      	bpl.n	17a7e <_printf_i+0xbe>
   17a76:	1d08      	adds	r0, r1, #4
   17a78:	6018      	str	r0, [r3, #0]
   17a7a:	680d      	ldr	r5, [r1, #0]
   17a7c:	e005      	b.n	17a8a <_printf_i+0xca>
   17a7e:	0640      	lsls	r0, r0, #25
   17a80:	d5f9      	bpl.n	17a76 <_printf_i+0xb6>
   17a82:	680d      	ldr	r5, [r1, #0]
   17a84:	1d08      	adds	r0, r1, #4
   17a86:	6018      	str	r0, [r3, #0]
   17a88:	b2ad      	uxth	r5, r5
   17a8a:	4b59      	ldr	r3, [pc, #356]	; (17bf0 <_printf_i+0x230>)
   17a8c:	2708      	movs	r7, #8
   17a8e:	9303      	str	r3, [sp, #12]
   17a90:	2a6f      	cmp	r2, #111	; 0x6f
   17a92:	d018      	beq.n	17ac6 <_printf_i+0x106>
   17a94:	270a      	movs	r7, #10
   17a96:	e016      	b.n	17ac6 <_printf_i+0x106>
   17a98:	3145      	adds	r1, #69	; 0x45
   17a9a:	700a      	strb	r2, [r1, #0]
   17a9c:	4a54      	ldr	r2, [pc, #336]	; (17bf0 <_printf_i+0x230>)
   17a9e:	9203      	str	r2, [sp, #12]
   17aa0:	681a      	ldr	r2, [r3, #0]
   17aa2:	6821      	ldr	r1, [r4, #0]
   17aa4:	1d10      	adds	r0, r2, #4
   17aa6:	6018      	str	r0, [r3, #0]
   17aa8:	6815      	ldr	r5, [r2, #0]
   17aaa:	0608      	lsls	r0, r1, #24
   17aac:	d522      	bpl.n	17af4 <_printf_i+0x134>
   17aae:	07cb      	lsls	r3, r1, #31
   17ab0:	d502      	bpl.n	17ab8 <_printf_i+0xf8>
   17ab2:	2320      	movs	r3, #32
   17ab4:	4319      	orrs	r1, r3
   17ab6:	6021      	str	r1, [r4, #0]
   17ab8:	2710      	movs	r7, #16
   17aba:	2d00      	cmp	r5, #0
   17abc:	d103      	bne.n	17ac6 <_printf_i+0x106>
   17abe:	2320      	movs	r3, #32
   17ac0:	6822      	ldr	r2, [r4, #0]
   17ac2:	439a      	bics	r2, r3
   17ac4:	6022      	str	r2, [r4, #0]
   17ac6:	0023      	movs	r3, r4
   17ac8:	2200      	movs	r2, #0
   17aca:	3343      	adds	r3, #67	; 0x43
   17acc:	701a      	strb	r2, [r3, #0]
   17ace:	6863      	ldr	r3, [r4, #4]
   17ad0:	60a3      	str	r3, [r4, #8]
   17ad2:	2b00      	cmp	r3, #0
   17ad4:	db5c      	blt.n	17b90 <_printf_i+0x1d0>
   17ad6:	2204      	movs	r2, #4
   17ad8:	6821      	ldr	r1, [r4, #0]
   17ada:	4391      	bics	r1, r2
   17adc:	6021      	str	r1, [r4, #0]
   17ade:	2d00      	cmp	r5, #0
   17ae0:	d158      	bne.n	17b94 <_printf_i+0x1d4>
   17ae2:	9e04      	ldr	r6, [sp, #16]
   17ae4:	2b00      	cmp	r3, #0
   17ae6:	d064      	beq.n	17bb2 <_printf_i+0x1f2>
   17ae8:	0026      	movs	r6, r4
   17aea:	9b03      	ldr	r3, [sp, #12]
   17aec:	3642      	adds	r6, #66	; 0x42
   17aee:	781b      	ldrb	r3, [r3, #0]
   17af0:	7033      	strb	r3, [r6, #0]
   17af2:	e05e      	b.n	17bb2 <_printf_i+0x1f2>
   17af4:	0648      	lsls	r0, r1, #25
   17af6:	d5da      	bpl.n	17aae <_printf_i+0xee>
   17af8:	b2ad      	uxth	r5, r5
   17afa:	e7d8      	b.n	17aae <_printf_i+0xee>
   17afc:	6809      	ldr	r1, [r1, #0]
   17afe:	681a      	ldr	r2, [r3, #0]
   17b00:	0608      	lsls	r0, r1, #24
   17b02:	d505      	bpl.n	17b10 <_printf_i+0x150>
   17b04:	1d11      	adds	r1, r2, #4
   17b06:	6019      	str	r1, [r3, #0]
   17b08:	6813      	ldr	r3, [r2, #0]
   17b0a:	6962      	ldr	r2, [r4, #20]
   17b0c:	601a      	str	r2, [r3, #0]
   17b0e:	e006      	b.n	17b1e <_printf_i+0x15e>
   17b10:	0649      	lsls	r1, r1, #25
   17b12:	d5f7      	bpl.n	17b04 <_printf_i+0x144>
   17b14:	1d11      	adds	r1, r2, #4
   17b16:	6019      	str	r1, [r3, #0]
   17b18:	6813      	ldr	r3, [r2, #0]
   17b1a:	8aa2      	ldrh	r2, [r4, #20]
   17b1c:	801a      	strh	r2, [r3, #0]
   17b1e:	2300      	movs	r3, #0
   17b20:	9e04      	ldr	r6, [sp, #16]
   17b22:	6123      	str	r3, [r4, #16]
   17b24:	e054      	b.n	17bd0 <_printf_i+0x210>
   17b26:	681a      	ldr	r2, [r3, #0]
   17b28:	1d11      	adds	r1, r2, #4
   17b2a:	6019      	str	r1, [r3, #0]
   17b2c:	6816      	ldr	r6, [r2, #0]
   17b2e:	2100      	movs	r1, #0
   17b30:	6862      	ldr	r2, [r4, #4]
   17b32:	0030      	movs	r0, r6
   17b34:	f000 fe80 	bl	18838 <memchr>
   17b38:	2800      	cmp	r0, #0
   17b3a:	d001      	beq.n	17b40 <_printf_i+0x180>
   17b3c:	1b80      	subs	r0, r0, r6
   17b3e:	6060      	str	r0, [r4, #4]
   17b40:	6863      	ldr	r3, [r4, #4]
   17b42:	6123      	str	r3, [r4, #16]
   17b44:	2300      	movs	r3, #0
   17b46:	9a04      	ldr	r2, [sp, #16]
   17b48:	7013      	strb	r3, [r2, #0]
   17b4a:	e041      	b.n	17bd0 <_printf_i+0x210>
   17b4c:	6923      	ldr	r3, [r4, #16]
   17b4e:	0032      	movs	r2, r6
   17b50:	9906      	ldr	r1, [sp, #24]
   17b52:	9805      	ldr	r0, [sp, #20]
   17b54:	9d07      	ldr	r5, [sp, #28]
   17b56:	47a8      	blx	r5
   17b58:	1c43      	adds	r3, r0, #1
   17b5a:	d043      	beq.n	17be4 <_printf_i+0x224>
   17b5c:	6823      	ldr	r3, [r4, #0]
   17b5e:	2500      	movs	r5, #0
   17b60:	079b      	lsls	r3, r3, #30
   17b62:	d40f      	bmi.n	17b84 <_printf_i+0x1c4>
   17b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17b66:	68e0      	ldr	r0, [r4, #12]
   17b68:	4298      	cmp	r0, r3
   17b6a:	da3d      	bge.n	17be8 <_printf_i+0x228>
   17b6c:	0018      	movs	r0, r3
   17b6e:	e03b      	b.n	17be8 <_printf_i+0x228>
   17b70:	0022      	movs	r2, r4
   17b72:	2301      	movs	r3, #1
   17b74:	3219      	adds	r2, #25
   17b76:	9906      	ldr	r1, [sp, #24]
   17b78:	9805      	ldr	r0, [sp, #20]
   17b7a:	9e07      	ldr	r6, [sp, #28]
   17b7c:	47b0      	blx	r6
   17b7e:	1c43      	adds	r3, r0, #1
   17b80:	d030      	beq.n	17be4 <_printf_i+0x224>
   17b82:	3501      	adds	r5, #1
   17b84:	68e3      	ldr	r3, [r4, #12]
   17b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17b88:	1a9b      	subs	r3, r3, r2
   17b8a:	429d      	cmp	r5, r3
   17b8c:	dbf0      	blt.n	17b70 <_printf_i+0x1b0>
   17b8e:	e7e9      	b.n	17b64 <_printf_i+0x1a4>
   17b90:	2d00      	cmp	r5, #0
   17b92:	d0a9      	beq.n	17ae8 <_printf_i+0x128>
   17b94:	9e04      	ldr	r6, [sp, #16]
   17b96:	0028      	movs	r0, r5
   17b98:	0039      	movs	r1, r7
   17b9a:	f7fe fbbd 	bl	16318 <__aeabi_uidivmod>
   17b9e:	9b03      	ldr	r3, [sp, #12]
   17ba0:	3e01      	subs	r6, #1
   17ba2:	5c5b      	ldrb	r3, [r3, r1]
   17ba4:	0028      	movs	r0, r5
   17ba6:	7033      	strb	r3, [r6, #0]
   17ba8:	0039      	movs	r1, r7
   17baa:	f7fe fb2f 	bl	1620c <__udivsi3>
   17bae:	1e05      	subs	r5, r0, #0
   17bb0:	d1f1      	bne.n	17b96 <_printf_i+0x1d6>
   17bb2:	2f08      	cmp	r7, #8
   17bb4:	d109      	bne.n	17bca <_printf_i+0x20a>
   17bb6:	6823      	ldr	r3, [r4, #0]
   17bb8:	07db      	lsls	r3, r3, #31
   17bba:	d506      	bpl.n	17bca <_printf_i+0x20a>
   17bbc:	6863      	ldr	r3, [r4, #4]
   17bbe:	6922      	ldr	r2, [r4, #16]
   17bc0:	4293      	cmp	r3, r2
   17bc2:	dc02      	bgt.n	17bca <_printf_i+0x20a>
   17bc4:	2330      	movs	r3, #48	; 0x30
   17bc6:	3e01      	subs	r6, #1
   17bc8:	7033      	strb	r3, [r6, #0]
   17bca:	9b04      	ldr	r3, [sp, #16]
   17bcc:	1b9b      	subs	r3, r3, r6
   17bce:	6123      	str	r3, [r4, #16]
   17bd0:	9b07      	ldr	r3, [sp, #28]
   17bd2:	aa09      	add	r2, sp, #36	; 0x24
   17bd4:	9300      	str	r3, [sp, #0]
   17bd6:	0021      	movs	r1, r4
   17bd8:	9b06      	ldr	r3, [sp, #24]
   17bda:	9805      	ldr	r0, [sp, #20]
   17bdc:	f7ff fe82 	bl	178e4 <_printf_common>
   17be0:	1c43      	adds	r3, r0, #1
   17be2:	d1b3      	bne.n	17b4c <_printf_i+0x18c>
   17be4:	2001      	movs	r0, #1
   17be6:	4240      	negs	r0, r0
   17be8:	b00b      	add	sp, #44	; 0x2c
   17bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17bec:	0001b058 	.word	0x0001b058
   17bf0:	0001b047 	.word	0x0001b047

00017bf4 <__svfiscanf_r>:
   17bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17bf6:	4cbd      	ldr	r4, [pc, #756]	; (17eec <__svfiscanf_r+0x2f8>)
   17bf8:	2586      	movs	r5, #134	; 0x86
   17bfa:	44a5      	add	sp, r4
   17bfc:	9303      	str	r3, [sp, #12]
   17bfe:	2300      	movs	r3, #0
   17c00:	9348      	str	r3, [sp, #288]	; 0x120
   17c02:	9349      	str	r3, [sp, #292]	; 0x124
   17c04:	ab05      	add	r3, sp, #20
   17c06:	934a      	str	r3, [sp, #296]	; 0x128
   17c08:	23be      	movs	r3, #190	; 0xbe
   17c0a:	006d      	lsls	r5, r5, #1
   17c0c:	9000      	str	r0, [sp, #0]
   17c0e:	000c      	movs	r4, r1
   17c10:	a802      	add	r0, sp, #8
   17c12:	49b7      	ldr	r1, [pc, #732]	; (17ef0 <__svfiscanf_r+0x2fc>)
   17c14:	005b      	lsls	r3, r3, #1
   17c16:	1940      	adds	r0, r0, r5
   17c18:	27c0      	movs	r7, #192	; 0xc0
   17c1a:	50c1      	str	r1, [r0, r3]
   17c1c:	ab02      	add	r3, sp, #8
   17c1e:	195b      	adds	r3, r3, r5
   17c20:	0015      	movs	r5, r2
   17c22:	49b4      	ldr	r1, [pc, #720]	; (17ef4 <__svfiscanf_r+0x300>)
   17c24:	007f      	lsls	r7, r7, #1
   17c26:	51d9      	str	r1, [r3, r7]
   17c28:	782b      	ldrb	r3, [r5, #0]
   17c2a:	2b00      	cmp	r3, #0
   17c2c:	d100      	bne.n	17c30 <__svfiscanf_r+0x3c>
   17c2e:	e15b      	b.n	17ee8 <__svfiscanf_r+0x2f4>
   17c30:	f7ff fb20 	bl	17274 <__locale_ctype_ptr>
   17c34:	2208      	movs	r2, #8
   17c36:	782b      	ldrb	r3, [r5, #0]
   17c38:	18c0      	adds	r0, r0, r3
   17c3a:	9301      	str	r3, [sp, #4]
   17c3c:	7843      	ldrb	r3, [r0, #1]
   17c3e:	4013      	ands	r3, r2
   17c40:	d141      	bne.n	17cc6 <__svfiscanf_r+0xd2>
   17c42:	9a01      	ldr	r2, [sp, #4]
   17c44:	1c6e      	adds	r6, r5, #1
   17c46:	2a25      	cmp	r2, #37	; 0x25
   17c48:	d000      	beq.n	17c4c <__svfiscanf_r+0x58>
   17c4a:	e0a8      	b.n	17d9e <__svfiscanf_r+0x1aa>
   17c4c:	9347      	str	r3, [sp, #284]	; 0x11c
   17c4e:	9345      	str	r3, [sp, #276]	; 0x114
   17c50:	786b      	ldrb	r3, [r5, #1]
   17c52:	2b2a      	cmp	r3, #42	; 0x2a
   17c54:	d102      	bne.n	17c5c <__svfiscanf_r+0x68>
   17c56:	3b1a      	subs	r3, #26
   17c58:	9345      	str	r3, [sp, #276]	; 0x114
   17c5a:	1cae      	adds	r6, r5, #2
   17c5c:	0035      	movs	r5, r6
   17c5e:	220a      	movs	r2, #10
   17c60:	7829      	ldrb	r1, [r5, #0]
   17c62:	000b      	movs	r3, r1
   17c64:	3b30      	subs	r3, #48	; 0x30
   17c66:	2b09      	cmp	r3, #9
   17c68:	d948      	bls.n	17cfc <__svfiscanf_r+0x108>
   17c6a:	4ea3      	ldr	r6, [pc, #652]	; (17ef8 <__svfiscanf_r+0x304>)
   17c6c:	2203      	movs	r2, #3
   17c6e:	0030      	movs	r0, r6
   17c70:	f000 fde2 	bl	18838 <memchr>
   17c74:	2800      	cmp	r0, #0
   17c76:	d007      	beq.n	17c88 <__svfiscanf_r+0x94>
   17c78:	2301      	movs	r3, #1
   17c7a:	1b80      	subs	r0, r0, r6
   17c7c:	4083      	lsls	r3, r0
   17c7e:	9a45      	ldr	r2, [sp, #276]	; 0x114
   17c80:	3501      	adds	r5, #1
   17c82:	4313      	orrs	r3, r2
   17c84:	9202      	str	r2, [sp, #8]
   17c86:	9345      	str	r3, [sp, #276]	; 0x114
   17c88:	782b      	ldrb	r3, [r5, #0]
   17c8a:	1c6e      	adds	r6, r5, #1
   17c8c:	2b67      	cmp	r3, #103	; 0x67
   17c8e:	d858      	bhi.n	17d42 <__svfiscanf_r+0x14e>
   17c90:	2b65      	cmp	r3, #101	; 0x65
   17c92:	d300      	bcc.n	17c96 <__svfiscanf_r+0xa2>
   17c94:	e0dd      	b.n	17e52 <__svfiscanf_r+0x25e>
   17c96:	2b47      	cmp	r3, #71	; 0x47
   17c98:	d838      	bhi.n	17d0c <__svfiscanf_r+0x118>
   17c9a:	2b45      	cmp	r3, #69	; 0x45
   17c9c:	d300      	bcc.n	17ca0 <__svfiscanf_r+0xac>
   17c9e:	e0d8      	b.n	17e52 <__svfiscanf_r+0x25e>
   17ca0:	2b00      	cmp	r3, #0
   17ca2:	d100      	bne.n	17ca6 <__svfiscanf_r+0xb2>
   17ca4:	e11d      	b.n	17ee2 <__svfiscanf_r+0x2ee>
   17ca6:	2b25      	cmp	r3, #37	; 0x25
   17ca8:	d079      	beq.n	17d9e <__svfiscanf_r+0x1aa>
   17caa:	2303      	movs	r3, #3
   17cac:	934b      	str	r3, [sp, #300]	; 0x12c
   17cae:	3307      	adds	r3, #7
   17cb0:	9346      	str	r3, [sp, #280]	; 0x118
   17cb2:	e053      	b.n	17d5c <__svfiscanf_r+0x168>
   17cb4:	9a49      	ldr	r2, [sp, #292]	; 0x124
   17cb6:	3301      	adds	r3, #1
   17cb8:	9201      	str	r2, [sp, #4]
   17cba:	3201      	adds	r2, #1
   17cbc:	9249      	str	r2, [sp, #292]	; 0x124
   17cbe:	6862      	ldr	r2, [r4, #4]
   17cc0:	6023      	str	r3, [r4, #0]
   17cc2:	3a01      	subs	r2, #1
   17cc4:	6062      	str	r2, [r4, #4]
   17cc6:	6863      	ldr	r3, [r4, #4]
   17cc8:	2b00      	cmp	r3, #0
   17cca:	dd0b      	ble.n	17ce4 <__svfiscanf_r+0xf0>
   17ccc:	f7ff fad2 	bl	17274 <__locale_ctype_ptr>
   17cd0:	2108      	movs	r1, #8
   17cd2:	6823      	ldr	r3, [r4, #0]
   17cd4:	781a      	ldrb	r2, [r3, #0]
   17cd6:	1880      	adds	r0, r0, r2
   17cd8:	7842      	ldrb	r2, [r0, #1]
   17cda:	420a      	tst	r2, r1
   17cdc:	d1ea      	bne.n	17cb4 <__svfiscanf_r+0xc0>
   17cde:	1c6e      	adds	r6, r5, #1
   17ce0:	0035      	movs	r5, r6
   17ce2:	e7a1      	b.n	17c28 <__svfiscanf_r+0x34>
   17ce4:	2286      	movs	r2, #134	; 0x86
   17ce6:	ab02      	add	r3, sp, #8
   17ce8:	0052      	lsls	r2, r2, #1
   17cea:	189b      	adds	r3, r3, r2
   17cec:	59db      	ldr	r3, [r3, r7]
   17cee:	0021      	movs	r1, r4
   17cf0:	9800      	ldr	r0, [sp, #0]
   17cf2:	9301      	str	r3, [sp, #4]
   17cf4:	4798      	blx	r3
   17cf6:	2800      	cmp	r0, #0
   17cf8:	d0e8      	beq.n	17ccc <__svfiscanf_r+0xd8>
   17cfa:	e7f0      	b.n	17cde <__svfiscanf_r+0xea>
   17cfc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   17cfe:	3501      	adds	r5, #1
   17d00:	9302      	str	r3, [sp, #8]
   17d02:	4353      	muls	r3, r2
   17d04:	3b30      	subs	r3, #48	; 0x30
   17d06:	1859      	adds	r1, r3, r1
   17d08:	9147      	str	r1, [sp, #284]	; 0x11c
   17d0a:	e7a9      	b.n	17c60 <__svfiscanf_r+0x6c>
   17d0c:	2b5b      	cmp	r3, #91	; 0x5b
   17d0e:	d100      	bne.n	17d12 <__svfiscanf_r+0x11e>
   17d10:	e077      	b.n	17e02 <__svfiscanf_r+0x20e>
   17d12:	d80f      	bhi.n	17d34 <__svfiscanf_r+0x140>
   17d14:	2b58      	cmp	r3, #88	; 0x58
   17d16:	d1c8      	bne.n	17caa <__svfiscanf_r+0xb6>
   17d18:	9a45      	ldr	r2, [sp, #276]	; 0x114
   17d1a:	9201      	str	r2, [sp, #4]
   17d1c:	2280      	movs	r2, #128	; 0x80
   17d1e:	9901      	ldr	r1, [sp, #4]
   17d20:	0092      	lsls	r2, r2, #2
   17d22:	430a      	orrs	r2, r1
   17d24:	9245      	str	r2, [sp, #276]	; 0x114
   17d26:	2210      	movs	r2, #16
   17d28:	9246      	str	r2, [sp, #280]	; 0x118
   17d2a:	2203      	movs	r2, #3
   17d2c:	2b6e      	cmp	r3, #110	; 0x6e
   17d2e:	dd14      	ble.n	17d5a <__svfiscanf_r+0x166>
   17d30:	3201      	adds	r2, #1
   17d32:	e012      	b.n	17d5a <__svfiscanf_r+0x166>
   17d34:	2b63      	cmp	r3, #99	; 0x63
   17d36:	d100      	bne.n	17d3a <__svfiscanf_r+0x146>
   17d38:	e071      	b.n	17e1e <__svfiscanf_r+0x22a>
   17d3a:	2b64      	cmp	r3, #100	; 0x64
   17d3c:	d1b5      	bne.n	17caa <__svfiscanf_r+0xb6>
   17d3e:	220a      	movs	r2, #10
   17d40:	e7f2      	b.n	17d28 <__svfiscanf_r+0x134>
   17d42:	2b70      	cmp	r3, #112	; 0x70
   17d44:	d052      	beq.n	17dec <__svfiscanf_r+0x1f8>
   17d46:	d822      	bhi.n	17d8e <__svfiscanf_r+0x19a>
   17d48:	2b6e      	cmp	r3, #110	; 0x6e
   17d4a:	d100      	bne.n	17d4e <__svfiscanf_r+0x15a>
   17d4c:	e06f      	b.n	17e2e <__svfiscanf_r+0x23a>
   17d4e:	d854      	bhi.n	17dfa <__svfiscanf_r+0x206>
   17d50:	2b69      	cmp	r3, #105	; 0x69
   17d52:	d1aa      	bne.n	17caa <__svfiscanf_r+0xb6>
   17d54:	2300      	movs	r3, #0
   17d56:	2203      	movs	r2, #3
   17d58:	9346      	str	r3, [sp, #280]	; 0x118
   17d5a:	924b      	str	r2, [sp, #300]	; 0x12c
   17d5c:	6863      	ldr	r3, [r4, #4]
   17d5e:	2b00      	cmp	r3, #0
   17d60:	dc00      	bgt.n	17d64 <__svfiscanf_r+0x170>
   17d62:	e078      	b.n	17e56 <__svfiscanf_r+0x262>
   17d64:	9b45      	ldr	r3, [sp, #276]	; 0x114
   17d66:	9301      	str	r3, [sp, #4]
   17d68:	065b      	lsls	r3, r3, #25
   17d6a:	d400      	bmi.n	17d6e <__svfiscanf_r+0x17a>
   17d6c:	e08b      	b.n	17e86 <__svfiscanf_r+0x292>
   17d6e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   17d70:	2b02      	cmp	r3, #2
   17d72:	dd00      	ble.n	17d76 <__svfiscanf_r+0x182>
   17d74:	e09d      	b.n	17eb2 <__svfiscanf_r+0x2be>
   17d76:	ab03      	add	r3, sp, #12
   17d78:	0022      	movs	r2, r4
   17d7a:	a945      	add	r1, sp, #276	; 0x114
   17d7c:	9800      	ldr	r0, [sp, #0]
   17d7e:	f000 f8e7 	bl	17f50 <_scanf_chars>
   17d82:	2801      	cmp	r0, #1
   17d84:	d100      	bne.n	17d88 <__svfiscanf_r+0x194>
   17d86:	e0af      	b.n	17ee8 <__svfiscanf_r+0x2f4>
   17d88:	2802      	cmp	r0, #2
   17d8a:	d1a9      	bne.n	17ce0 <__svfiscanf_r+0xec>
   17d8c:	e025      	b.n	17dda <__svfiscanf_r+0x1e6>
   17d8e:	2b75      	cmp	r3, #117	; 0x75
   17d90:	d0d5      	beq.n	17d3e <__svfiscanf_r+0x14a>
   17d92:	2b78      	cmp	r3, #120	; 0x78
   17d94:	d0c0      	beq.n	17d18 <__svfiscanf_r+0x124>
   17d96:	2b73      	cmp	r3, #115	; 0x73
   17d98:	d187      	bne.n	17caa <__svfiscanf_r+0xb6>
   17d9a:	2302      	movs	r3, #2
   17d9c:	e03d      	b.n	17e1a <__svfiscanf_r+0x226>
   17d9e:	6863      	ldr	r3, [r4, #4]
   17da0:	2b00      	cmp	r3, #0
   17da2:	dd0f      	ble.n	17dc4 <__svfiscanf_r+0x1d0>
   17da4:	6823      	ldr	r3, [r4, #0]
   17da6:	9901      	ldr	r1, [sp, #4]
   17da8:	781a      	ldrb	r2, [r3, #0]
   17daa:	4291      	cmp	r1, r2
   17dac:	d000      	beq.n	17db0 <__svfiscanf_r+0x1bc>
   17dae:	e09b      	b.n	17ee8 <__svfiscanf_r+0x2f4>
   17db0:	3301      	adds	r3, #1
   17db2:	6862      	ldr	r2, [r4, #4]
   17db4:	6023      	str	r3, [r4, #0]
   17db6:	9b49      	ldr	r3, [sp, #292]	; 0x124
   17db8:	3a01      	subs	r2, #1
   17dba:	9301      	str	r3, [sp, #4]
   17dbc:	3301      	adds	r3, #1
   17dbe:	6062      	str	r2, [r4, #4]
   17dc0:	9349      	str	r3, [sp, #292]	; 0x124
   17dc2:	e78d      	b.n	17ce0 <__svfiscanf_r+0xec>
   17dc4:	2286      	movs	r2, #134	; 0x86
   17dc6:	ab02      	add	r3, sp, #8
   17dc8:	0052      	lsls	r2, r2, #1
   17dca:	189b      	adds	r3, r3, r2
   17dcc:	59db      	ldr	r3, [r3, r7]
   17dce:	0021      	movs	r1, r4
   17dd0:	9800      	ldr	r0, [sp, #0]
   17dd2:	9302      	str	r3, [sp, #8]
   17dd4:	4798      	blx	r3
   17dd6:	2800      	cmp	r0, #0
   17dd8:	d0e4      	beq.n	17da4 <__svfiscanf_r+0x1b0>
   17dda:	9848      	ldr	r0, [sp, #288]	; 0x120
   17ddc:	2800      	cmp	r0, #0
   17dde:	d000      	beq.n	17de2 <__svfiscanf_r+0x1ee>
   17de0:	e07b      	b.n	17eda <__svfiscanf_r+0x2e6>
   17de2:	3801      	subs	r0, #1
   17de4:	23a7      	movs	r3, #167	; 0xa7
   17de6:	009b      	lsls	r3, r3, #2
   17de8:	449d      	add	sp, r3
   17dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17dec:	9a45      	ldr	r2, [sp, #276]	; 0x114
   17dee:	9201      	str	r2, [sp, #4]
   17df0:	2220      	movs	r2, #32
   17df2:	9901      	ldr	r1, [sp, #4]
   17df4:	430a      	orrs	r2, r1
   17df6:	9245      	str	r2, [sp, #276]	; 0x114
   17df8:	e78e      	b.n	17d18 <__svfiscanf_r+0x124>
   17dfa:	2308      	movs	r3, #8
   17dfc:	2204      	movs	r2, #4
   17dfe:	9346      	str	r3, [sp, #280]	; 0x118
   17e00:	e7ab      	b.n	17d5a <__svfiscanf_r+0x166>
   17e02:	0031      	movs	r1, r6
   17e04:	a805      	add	r0, sp, #20
   17e06:	f000 fad9 	bl	183bc <__sccl>
   17e0a:	9b45      	ldr	r3, [sp, #276]	; 0x114
   17e0c:	0006      	movs	r6, r0
   17e0e:	9301      	str	r3, [sp, #4]
   17e10:	2340      	movs	r3, #64	; 0x40
   17e12:	9a01      	ldr	r2, [sp, #4]
   17e14:	4313      	orrs	r3, r2
   17e16:	9345      	str	r3, [sp, #276]	; 0x114
   17e18:	2301      	movs	r3, #1
   17e1a:	934b      	str	r3, [sp, #300]	; 0x12c
   17e1c:	e79e      	b.n	17d5c <__svfiscanf_r+0x168>
   17e1e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   17e20:	9301      	str	r3, [sp, #4]
   17e22:	2340      	movs	r3, #64	; 0x40
   17e24:	9a01      	ldr	r2, [sp, #4]
   17e26:	4313      	orrs	r3, r2
   17e28:	9345      	str	r3, [sp, #276]	; 0x114
   17e2a:	2300      	movs	r3, #0
   17e2c:	e7f5      	b.n	17e1a <__svfiscanf_r+0x226>
   17e2e:	9945      	ldr	r1, [sp, #276]	; 0x114
   17e30:	06cb      	lsls	r3, r1, #27
   17e32:	d500      	bpl.n	17e36 <__svfiscanf_r+0x242>
   17e34:	e754      	b.n	17ce0 <__svfiscanf_r+0xec>
   17e36:	9b03      	ldr	r3, [sp, #12]
   17e38:	9a49      	ldr	r2, [sp, #292]	; 0x124
   17e3a:	07c8      	lsls	r0, r1, #31
   17e3c:	d504      	bpl.n	17e48 <__svfiscanf_r+0x254>
   17e3e:	1d19      	adds	r1, r3, #4
   17e40:	9103      	str	r1, [sp, #12]
   17e42:	681b      	ldr	r3, [r3, #0]
   17e44:	801a      	strh	r2, [r3, #0]
   17e46:	e74b      	b.n	17ce0 <__svfiscanf_r+0xec>
   17e48:	1d19      	adds	r1, r3, #4
   17e4a:	9103      	str	r1, [sp, #12]
   17e4c:	681b      	ldr	r3, [r3, #0]
   17e4e:	601a      	str	r2, [r3, #0]
   17e50:	e746      	b.n	17ce0 <__svfiscanf_r+0xec>
   17e52:	2305      	movs	r3, #5
   17e54:	e7e1      	b.n	17e1a <__svfiscanf_r+0x226>
   17e56:	2286      	movs	r2, #134	; 0x86
   17e58:	ab02      	add	r3, sp, #8
   17e5a:	0052      	lsls	r2, r2, #1
   17e5c:	189b      	adds	r3, r3, r2
   17e5e:	59db      	ldr	r3, [r3, r7]
   17e60:	0021      	movs	r1, r4
   17e62:	9800      	ldr	r0, [sp, #0]
   17e64:	9301      	str	r3, [sp, #4]
   17e66:	4798      	blx	r3
   17e68:	2800      	cmp	r0, #0
   17e6a:	d100      	bne.n	17e6e <__svfiscanf_r+0x27a>
   17e6c:	e77a      	b.n	17d64 <__svfiscanf_r+0x170>
   17e6e:	e7b4      	b.n	17dda <__svfiscanf_r+0x1e6>
   17e70:	9a49      	ldr	r2, [sp, #292]	; 0x124
   17e72:	9201      	str	r2, [sp, #4]
   17e74:	3201      	adds	r2, #1
   17e76:	9249      	str	r2, [sp, #292]	; 0x124
   17e78:	6862      	ldr	r2, [r4, #4]
   17e7a:	3a01      	subs	r2, #1
   17e7c:	6062      	str	r2, [r4, #4]
   17e7e:	2a00      	cmp	r2, #0
   17e80:	dd0b      	ble.n	17e9a <__svfiscanf_r+0x2a6>
   17e82:	3301      	adds	r3, #1
   17e84:	6023      	str	r3, [r4, #0]
   17e86:	f7ff f9f5 	bl	17274 <__locale_ctype_ptr>
   17e8a:	2108      	movs	r1, #8
   17e8c:	6823      	ldr	r3, [r4, #0]
   17e8e:	781a      	ldrb	r2, [r3, #0]
   17e90:	1880      	adds	r0, r0, r2
   17e92:	7842      	ldrb	r2, [r0, #1]
   17e94:	420a      	tst	r2, r1
   17e96:	d1eb      	bne.n	17e70 <__svfiscanf_r+0x27c>
   17e98:	e769      	b.n	17d6e <__svfiscanf_r+0x17a>
   17e9a:	2286      	movs	r2, #134	; 0x86
   17e9c:	ab02      	add	r3, sp, #8
   17e9e:	0052      	lsls	r2, r2, #1
   17ea0:	189b      	adds	r3, r3, r2
   17ea2:	59db      	ldr	r3, [r3, r7]
   17ea4:	0021      	movs	r1, r4
   17ea6:	9800      	ldr	r0, [sp, #0]
   17ea8:	9301      	str	r3, [sp, #4]
   17eaa:	4798      	blx	r3
   17eac:	2800      	cmp	r0, #0
   17eae:	d0ea      	beq.n	17e86 <__svfiscanf_r+0x292>
   17eb0:	e793      	b.n	17dda <__svfiscanf_r+0x1e6>
   17eb2:	2b04      	cmp	r3, #4
   17eb4:	dc06      	bgt.n	17ec4 <__svfiscanf_r+0x2d0>
   17eb6:	ab03      	add	r3, sp, #12
   17eb8:	0022      	movs	r2, r4
   17eba:	a945      	add	r1, sp, #276	; 0x114
   17ebc:	9800      	ldr	r0, [sp, #0]
   17ebe:	f000 f8ab 	bl	18018 <_scanf_i>
   17ec2:	e75e      	b.n	17d82 <__svfiscanf_r+0x18e>
   17ec4:	4b0d      	ldr	r3, [pc, #52]	; (17efc <__svfiscanf_r+0x308>)
   17ec6:	2b00      	cmp	r3, #0
   17ec8:	d100      	bne.n	17ecc <__svfiscanf_r+0x2d8>
   17eca:	e709      	b.n	17ce0 <__svfiscanf_r+0xec>
   17ecc:	ab03      	add	r3, sp, #12
   17ece:	0022      	movs	r2, r4
   17ed0:	a945      	add	r1, sp, #276	; 0x114
   17ed2:	9800      	ldr	r0, [sp, #0]
   17ed4:	e000      	b.n	17ed8 <__svfiscanf_r+0x2e4>
   17ed6:	bf00      	nop
   17ed8:	e753      	b.n	17d82 <__svfiscanf_r+0x18e>
   17eda:	89a3      	ldrh	r3, [r4, #12]
   17edc:	065b      	lsls	r3, r3, #25
   17ede:	d400      	bmi.n	17ee2 <__svfiscanf_r+0x2ee>
   17ee0:	e780      	b.n	17de4 <__svfiscanf_r+0x1f0>
   17ee2:	2001      	movs	r0, #1
   17ee4:	4240      	negs	r0, r0
   17ee6:	e77d      	b.n	17de4 <__svfiscanf_r+0x1f0>
   17ee8:	9848      	ldr	r0, [sp, #288]	; 0x120
   17eea:	e77b      	b.n	17de4 <__svfiscanf_r+0x1f0>
   17eec:	fffffd64 	.word	0xfffffd64
   17ef0:	00018681 	.word	0x00018681
   17ef4:	0001829d 	.word	0x0001829d
   17ef8:	0001b03c 	.word	0x0001b03c
   17efc:	00000000 	.word	0x00000000

00017f00 <_vfiscanf_r>:
   17f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f02:	0004      	movs	r4, r0
   17f04:	000d      	movs	r5, r1
   17f06:	0016      	movs	r6, r2
   17f08:	001f      	movs	r7, r3
   17f0a:	2800      	cmp	r0, #0
   17f0c:	d004      	beq.n	17f18 <_vfiscanf_r+0x18>
   17f0e:	6983      	ldr	r3, [r0, #24]
   17f10:	2b00      	cmp	r3, #0
   17f12:	d101      	bne.n	17f18 <_vfiscanf_r+0x18>
   17f14:	f7ff f8fa 	bl	1710c <__sinit>
   17f18:	4b0a      	ldr	r3, [pc, #40]	; (17f44 <_vfiscanf_r+0x44>)
   17f1a:	429d      	cmp	r5, r3
   17f1c:	d107      	bne.n	17f2e <_vfiscanf_r+0x2e>
   17f1e:	6865      	ldr	r5, [r4, #4]
   17f20:	003b      	movs	r3, r7
   17f22:	0032      	movs	r2, r6
   17f24:	0029      	movs	r1, r5
   17f26:	0020      	movs	r0, r4
   17f28:	f7ff fe64 	bl	17bf4 <__svfiscanf_r>
   17f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f2e:	4b06      	ldr	r3, [pc, #24]	; (17f48 <_vfiscanf_r+0x48>)
   17f30:	429d      	cmp	r5, r3
   17f32:	d101      	bne.n	17f38 <_vfiscanf_r+0x38>
   17f34:	68a5      	ldr	r5, [r4, #8]
   17f36:	e7f3      	b.n	17f20 <_vfiscanf_r+0x20>
   17f38:	4b04      	ldr	r3, [pc, #16]	; (17f4c <_vfiscanf_r+0x4c>)
   17f3a:	429d      	cmp	r5, r3
   17f3c:	d1f0      	bne.n	17f20 <_vfiscanf_r+0x20>
   17f3e:	68e5      	ldr	r5, [r4, #12]
   17f40:	e7ee      	b.n	17f20 <_vfiscanf_r+0x20>
   17f42:	46c0      	nop			; (mov r8, r8)
   17f44:	0001afec 	.word	0x0001afec
   17f48:	0001b00c 	.word	0x0001b00c
   17f4c:	0001afcc 	.word	0x0001afcc

00017f50 <_scanf_chars>:
   17f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17f52:	0015      	movs	r5, r2
   17f54:	688a      	ldr	r2, [r1, #8]
   17f56:	9001      	str	r0, [sp, #4]
   17f58:	000c      	movs	r4, r1
   17f5a:	2a00      	cmp	r2, #0
   17f5c:	d106      	bne.n	17f6c <_scanf_chars+0x1c>
   17f5e:	698a      	ldr	r2, [r1, #24]
   17f60:	1e51      	subs	r1, r2, #1
   17f62:	418a      	sbcs	r2, r1
   17f64:	2101      	movs	r1, #1
   17f66:	4252      	negs	r2, r2
   17f68:	430a      	orrs	r2, r1
   17f6a:	60a2      	str	r2, [r4, #8]
   17f6c:	6822      	ldr	r2, [r4, #0]
   17f6e:	06d2      	lsls	r2, r2, #27
   17f70:	d403      	bmi.n	17f7a <_scanf_chars+0x2a>
   17f72:	681a      	ldr	r2, [r3, #0]
   17f74:	1d11      	adds	r1, r2, #4
   17f76:	6019      	str	r1, [r3, #0]
   17f78:	6817      	ldr	r7, [r2, #0]
   17f7a:	2600      	movs	r6, #0
   17f7c:	69a3      	ldr	r3, [r4, #24]
   17f7e:	2b00      	cmp	r3, #0
   17f80:	d01c      	beq.n	17fbc <_scanf_chars+0x6c>
   17f82:	2b01      	cmp	r3, #1
   17f84:	d108      	bne.n	17f98 <_scanf_chars+0x48>
   17f86:	682b      	ldr	r3, [r5, #0]
   17f88:	6962      	ldr	r2, [r4, #20]
   17f8a:	781b      	ldrb	r3, [r3, #0]
   17f8c:	5cd3      	ldrb	r3, [r2, r3]
   17f8e:	2b00      	cmp	r3, #0
   17f90:	d114      	bne.n	17fbc <_scanf_chars+0x6c>
   17f92:	2e00      	cmp	r6, #0
   17f94:	d130      	bne.n	17ff8 <_scanf_chars+0xa8>
   17f96:	e006      	b.n	17fa6 <_scanf_chars+0x56>
   17f98:	2b02      	cmp	r3, #2
   17f9a:	d006      	beq.n	17faa <_scanf_chars+0x5a>
   17f9c:	2e00      	cmp	r6, #0
   17f9e:	d12b      	bne.n	17ff8 <_scanf_chars+0xa8>
   17fa0:	69a3      	ldr	r3, [r4, #24]
   17fa2:	2b01      	cmp	r3, #1
   17fa4:	d128      	bne.n	17ff8 <_scanf_chars+0xa8>
   17fa6:	2001      	movs	r0, #1
   17fa8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   17faa:	f7ff f963 	bl	17274 <__locale_ctype_ptr>
   17fae:	2208      	movs	r2, #8
   17fb0:	682b      	ldr	r3, [r5, #0]
   17fb2:	781b      	ldrb	r3, [r3, #0]
   17fb4:	18c0      	adds	r0, r0, r3
   17fb6:	7843      	ldrb	r3, [r0, #1]
   17fb8:	4213      	tst	r3, r2
   17fba:	d1ef      	bne.n	17f9c <_scanf_chars+0x4c>
   17fbc:	2210      	movs	r2, #16
   17fbe:	6823      	ldr	r3, [r4, #0]
   17fc0:	3601      	adds	r6, #1
   17fc2:	4213      	tst	r3, r2
   17fc4:	d103      	bne.n	17fce <_scanf_chars+0x7e>
   17fc6:	682b      	ldr	r3, [r5, #0]
   17fc8:	781b      	ldrb	r3, [r3, #0]
   17fca:	703b      	strb	r3, [r7, #0]
   17fcc:	3701      	adds	r7, #1
   17fce:	682a      	ldr	r2, [r5, #0]
   17fd0:	686b      	ldr	r3, [r5, #4]
   17fd2:	3201      	adds	r2, #1
   17fd4:	602a      	str	r2, [r5, #0]
   17fd6:	68a2      	ldr	r2, [r4, #8]
   17fd8:	3b01      	subs	r3, #1
   17fda:	3a01      	subs	r2, #1
   17fdc:	606b      	str	r3, [r5, #4]
   17fde:	60a2      	str	r2, [r4, #8]
   17fe0:	2a00      	cmp	r2, #0
   17fe2:	d009      	beq.n	17ff8 <_scanf_chars+0xa8>
   17fe4:	2b00      	cmp	r3, #0
   17fe6:	dcc9      	bgt.n	17f7c <_scanf_chars+0x2c>
   17fe8:	23c0      	movs	r3, #192	; 0xc0
   17fea:	005b      	lsls	r3, r3, #1
   17fec:	58e3      	ldr	r3, [r4, r3]
   17fee:	0029      	movs	r1, r5
   17ff0:	9801      	ldr	r0, [sp, #4]
   17ff2:	4798      	blx	r3
   17ff4:	2800      	cmp	r0, #0
   17ff6:	d0c1      	beq.n	17f7c <_scanf_chars+0x2c>
   17ff8:	2310      	movs	r3, #16
   17ffa:	6822      	ldr	r2, [r4, #0]
   17ffc:	4013      	ands	r3, r2
   17ffe:	d106      	bne.n	1800e <_scanf_chars+0xbe>
   18000:	68e2      	ldr	r2, [r4, #12]
   18002:	3201      	adds	r2, #1
   18004:	60e2      	str	r2, [r4, #12]
   18006:	69a2      	ldr	r2, [r4, #24]
   18008:	2a00      	cmp	r2, #0
   1800a:	d000      	beq.n	1800e <_scanf_chars+0xbe>
   1800c:	703b      	strb	r3, [r7, #0]
   1800e:	6923      	ldr	r3, [r4, #16]
   18010:	2000      	movs	r0, #0
   18012:	199e      	adds	r6, r3, r6
   18014:	6126      	str	r6, [r4, #16]
   18016:	e7c7      	b.n	17fa8 <_scanf_chars+0x58>

00018018 <_scanf_i>:
   18018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1801a:	000c      	movs	r4, r1
   1801c:	b08d      	sub	sp, #52	; 0x34
   1801e:	9302      	str	r3, [sp, #8]
   18020:	4b77      	ldr	r3, [pc, #476]	; (18200 <_scanf_i+0x1e8>)
   18022:	9005      	str	r0, [sp, #20]
   18024:	0016      	movs	r6, r2
   18026:	aa09      	add	r2, sp, #36	; 0x24
   18028:	cb23      	ldmia	r3!, {r0, r1, r5}
   1802a:	c223      	stmia	r2!, {r0, r1, r5}
   1802c:	4b75      	ldr	r3, [pc, #468]	; (18204 <_scanf_i+0x1ec>)
   1802e:	9306      	str	r3, [sp, #24]
   18030:	69a3      	ldr	r3, [r4, #24]
   18032:	2b03      	cmp	r3, #3
   18034:	d001      	beq.n	1803a <_scanf_i+0x22>
   18036:	4b74      	ldr	r3, [pc, #464]	; (18208 <_scanf_i+0x1f0>)
   18038:	9306      	str	r3, [sp, #24]
   1803a:	22ae      	movs	r2, #174	; 0xae
   1803c:	2000      	movs	r0, #0
   1803e:	68a3      	ldr	r3, [r4, #8]
   18040:	0052      	lsls	r2, r2, #1
   18042:	1e59      	subs	r1, r3, #1
   18044:	9004      	str	r0, [sp, #16]
   18046:	4291      	cmp	r1, r2
   18048:	d905      	bls.n	18056 <_scanf_i+0x3e>
   1804a:	3b5e      	subs	r3, #94	; 0x5e
   1804c:	3bff      	subs	r3, #255	; 0xff
   1804e:	9304      	str	r3, [sp, #16]
   18050:	235e      	movs	r3, #94	; 0x5e
   18052:	33ff      	adds	r3, #255	; 0xff
   18054:	60a3      	str	r3, [r4, #8]
   18056:	0023      	movs	r3, r4
   18058:	331c      	adds	r3, #28
   1805a:	9301      	str	r3, [sp, #4]
   1805c:	23d0      	movs	r3, #208	; 0xd0
   1805e:	2700      	movs	r7, #0
   18060:	6822      	ldr	r2, [r4, #0]
   18062:	011b      	lsls	r3, r3, #4
   18064:	4313      	orrs	r3, r2
   18066:	6023      	str	r3, [r4, #0]
   18068:	9b01      	ldr	r3, [sp, #4]
   1806a:	9303      	str	r3, [sp, #12]
   1806c:	6833      	ldr	r3, [r6, #0]
   1806e:	a809      	add	r0, sp, #36	; 0x24
   18070:	7819      	ldrb	r1, [r3, #0]
   18072:	00bb      	lsls	r3, r7, #2
   18074:	2202      	movs	r2, #2
   18076:	5818      	ldr	r0, [r3, r0]
   18078:	f000 fbde 	bl	18838 <memchr>
   1807c:	2800      	cmp	r0, #0
   1807e:	d02b      	beq.n	180d8 <_scanf_i+0xc0>
   18080:	2f01      	cmp	r7, #1
   18082:	d15f      	bne.n	18144 <_scanf_i+0x12c>
   18084:	6863      	ldr	r3, [r4, #4]
   18086:	2b00      	cmp	r3, #0
   18088:	d106      	bne.n	18098 <_scanf_i+0x80>
   1808a:	3308      	adds	r3, #8
   1808c:	6822      	ldr	r2, [r4, #0]
   1808e:	6063      	str	r3, [r4, #4]
   18090:	33f9      	adds	r3, #249	; 0xf9
   18092:	33ff      	adds	r3, #255	; 0xff
   18094:	4313      	orrs	r3, r2
   18096:	6023      	str	r3, [r4, #0]
   18098:	4b5c      	ldr	r3, [pc, #368]	; (1820c <_scanf_i+0x1f4>)
   1809a:	6822      	ldr	r2, [r4, #0]
   1809c:	4013      	ands	r3, r2
   1809e:	6023      	str	r3, [r4, #0]
   180a0:	68a3      	ldr	r3, [r4, #8]
   180a2:	1e5a      	subs	r2, r3, #1
   180a4:	60a2      	str	r2, [r4, #8]
   180a6:	2b00      	cmp	r3, #0
   180a8:	d016      	beq.n	180d8 <_scanf_i+0xc0>
   180aa:	9b03      	ldr	r3, [sp, #12]
   180ac:	1c5d      	adds	r5, r3, #1
   180ae:	6833      	ldr	r3, [r6, #0]
   180b0:	1c5a      	adds	r2, r3, #1
   180b2:	6032      	str	r2, [r6, #0]
   180b4:	781b      	ldrb	r3, [r3, #0]
   180b6:	9a03      	ldr	r2, [sp, #12]
   180b8:	9503      	str	r5, [sp, #12]
   180ba:	7013      	strb	r3, [r2, #0]
   180bc:	6873      	ldr	r3, [r6, #4]
   180be:	3b01      	subs	r3, #1
   180c0:	6073      	str	r3, [r6, #4]
   180c2:	2b00      	cmp	r3, #0
   180c4:	dc08      	bgt.n	180d8 <_scanf_i+0xc0>
   180c6:	23c0      	movs	r3, #192	; 0xc0
   180c8:	005b      	lsls	r3, r3, #1
   180ca:	58e3      	ldr	r3, [r4, r3]
   180cc:	0031      	movs	r1, r6
   180ce:	9805      	ldr	r0, [sp, #20]
   180d0:	9307      	str	r3, [sp, #28]
   180d2:	4798      	blx	r3
   180d4:	2800      	cmp	r0, #0
   180d6:	d17d      	bne.n	181d4 <_scanf_i+0x1bc>
   180d8:	3701      	adds	r7, #1
   180da:	2f03      	cmp	r7, #3
   180dc:	d1c6      	bne.n	1806c <_scanf_i+0x54>
   180de:	6863      	ldr	r3, [r4, #4]
   180e0:	2b00      	cmp	r3, #0
   180e2:	d101      	bne.n	180e8 <_scanf_i+0xd0>
   180e4:	330a      	adds	r3, #10
   180e6:	6063      	str	r3, [r4, #4]
   180e8:	2110      	movs	r1, #16
   180ea:	2700      	movs	r7, #0
   180ec:	6863      	ldr	r3, [r4, #4]
   180ee:	6960      	ldr	r0, [r4, #20]
   180f0:	1ac9      	subs	r1, r1, r3
   180f2:	4b47      	ldr	r3, [pc, #284]	; (18210 <_scanf_i+0x1f8>)
   180f4:	18c9      	adds	r1, r1, r3
   180f6:	f000 f961 	bl	183bc <__sccl>
   180fa:	9d03      	ldr	r5, [sp, #12]
   180fc:	68a3      	ldr	r3, [r4, #8]
   180fe:	2b00      	cmp	r3, #0
   18100:	d041      	beq.n	18186 <_scanf_i+0x16e>
   18102:	6832      	ldr	r2, [r6, #0]
   18104:	6960      	ldr	r0, [r4, #20]
   18106:	7811      	ldrb	r1, [r2, #0]
   18108:	5c40      	ldrb	r0, [r0, r1]
   1810a:	2800      	cmp	r0, #0
   1810c:	d03b      	beq.n	18186 <_scanf_i+0x16e>
   1810e:	2930      	cmp	r1, #48	; 0x30
   18110:	d128      	bne.n	18164 <_scanf_i+0x14c>
   18112:	2080      	movs	r0, #128	; 0x80
   18114:	6821      	ldr	r1, [r4, #0]
   18116:	0100      	lsls	r0, r0, #4
   18118:	4201      	tst	r1, r0
   1811a:	d023      	beq.n	18164 <_scanf_i+0x14c>
   1811c:	9a04      	ldr	r2, [sp, #16]
   1811e:	3701      	adds	r7, #1
   18120:	2a00      	cmp	r2, #0
   18122:	d003      	beq.n	1812c <_scanf_i+0x114>
   18124:	3a01      	subs	r2, #1
   18126:	3301      	adds	r3, #1
   18128:	9204      	str	r2, [sp, #16]
   1812a:	60a3      	str	r3, [r4, #8]
   1812c:	6873      	ldr	r3, [r6, #4]
   1812e:	3b01      	subs	r3, #1
   18130:	6073      	str	r3, [r6, #4]
   18132:	2b00      	cmp	r3, #0
   18134:	dd1e      	ble.n	18174 <_scanf_i+0x15c>
   18136:	6833      	ldr	r3, [r6, #0]
   18138:	3301      	adds	r3, #1
   1813a:	6033      	str	r3, [r6, #0]
   1813c:	68a3      	ldr	r3, [r4, #8]
   1813e:	3b01      	subs	r3, #1
   18140:	60a3      	str	r3, [r4, #8]
   18142:	e7db      	b.n	180fc <_scanf_i+0xe4>
   18144:	2f02      	cmp	r7, #2
   18146:	d1ab      	bne.n	180a0 <_scanf_i+0x88>
   18148:	21c0      	movs	r1, #192	; 0xc0
   1814a:	2380      	movs	r3, #128	; 0x80
   1814c:	6822      	ldr	r2, [r4, #0]
   1814e:	00c9      	lsls	r1, r1, #3
   18150:	4011      	ands	r1, r2
   18152:	009b      	lsls	r3, r3, #2
   18154:	4299      	cmp	r1, r3
   18156:	d1c2      	bne.n	180de <_scanf_i+0xc6>
   18158:	3bf1      	subs	r3, #241	; 0xf1
   1815a:	3bff      	subs	r3, #255	; 0xff
   1815c:	6063      	str	r3, [r4, #4]
   1815e:	33f0      	adds	r3, #240	; 0xf0
   18160:	4313      	orrs	r3, r2
   18162:	e79c      	b.n	1809e <_scanf_i+0x86>
   18164:	6821      	ldr	r1, [r4, #0]
   18166:	4b2b      	ldr	r3, [pc, #172]	; (18214 <_scanf_i+0x1fc>)
   18168:	400b      	ands	r3, r1
   1816a:	6023      	str	r3, [r4, #0]
   1816c:	7813      	ldrb	r3, [r2, #0]
   1816e:	702b      	strb	r3, [r5, #0]
   18170:	3501      	adds	r5, #1
   18172:	e7db      	b.n	1812c <_scanf_i+0x114>
   18174:	23c0      	movs	r3, #192	; 0xc0
   18176:	005b      	lsls	r3, r3, #1
   18178:	58e3      	ldr	r3, [r4, r3]
   1817a:	0031      	movs	r1, r6
   1817c:	9805      	ldr	r0, [sp, #20]
   1817e:	9303      	str	r3, [sp, #12]
   18180:	4798      	blx	r3
   18182:	2800      	cmp	r0, #0
   18184:	d0da      	beq.n	1813c <_scanf_i+0x124>
   18186:	6823      	ldr	r3, [r4, #0]
   18188:	05db      	lsls	r3, r3, #23
   1818a:	d50e      	bpl.n	181aa <_scanf_i+0x192>
   1818c:	9b01      	ldr	r3, [sp, #4]
   1818e:	429d      	cmp	r5, r3
   18190:	d907      	bls.n	181a2 <_scanf_i+0x18a>
   18192:	23be      	movs	r3, #190	; 0xbe
   18194:	3d01      	subs	r5, #1
   18196:	005b      	lsls	r3, r3, #1
   18198:	7829      	ldrb	r1, [r5, #0]
   1819a:	58e3      	ldr	r3, [r4, r3]
   1819c:	0032      	movs	r2, r6
   1819e:	9805      	ldr	r0, [sp, #20]
   181a0:	4798      	blx	r3
   181a2:	9b01      	ldr	r3, [sp, #4]
   181a4:	2001      	movs	r0, #1
   181a6:	429d      	cmp	r5, r3
   181a8:	d027      	beq.n	181fa <_scanf_i+0x1e2>
   181aa:	2210      	movs	r2, #16
   181ac:	6823      	ldr	r3, [r4, #0]
   181ae:	401a      	ands	r2, r3
   181b0:	d11c      	bne.n	181ec <_scanf_i+0x1d4>
   181b2:	702a      	strb	r2, [r5, #0]
   181b4:	6863      	ldr	r3, [r4, #4]
   181b6:	9901      	ldr	r1, [sp, #4]
   181b8:	9805      	ldr	r0, [sp, #20]
   181ba:	9e06      	ldr	r6, [sp, #24]
   181bc:	47b0      	blx	r6
   181be:	9b02      	ldr	r3, [sp, #8]
   181c0:	6822      	ldr	r2, [r4, #0]
   181c2:	681b      	ldr	r3, [r3, #0]
   181c4:	0691      	lsls	r1, r2, #26
   181c6:	d507      	bpl.n	181d8 <_scanf_i+0x1c0>
   181c8:	9902      	ldr	r1, [sp, #8]
   181ca:	1d1a      	adds	r2, r3, #4
   181cc:	600a      	str	r2, [r1, #0]
   181ce:	681b      	ldr	r3, [r3, #0]
   181d0:	6018      	str	r0, [r3, #0]
   181d2:	e008      	b.n	181e6 <_scanf_i+0x1ce>
   181d4:	2700      	movs	r7, #0
   181d6:	e7d6      	b.n	18186 <_scanf_i+0x16e>
   181d8:	07d1      	lsls	r1, r2, #31
   181da:	d5f5      	bpl.n	181c8 <_scanf_i+0x1b0>
   181dc:	9902      	ldr	r1, [sp, #8]
   181de:	1d1a      	adds	r2, r3, #4
   181e0:	600a      	str	r2, [r1, #0]
   181e2:	681b      	ldr	r3, [r3, #0]
   181e4:	8018      	strh	r0, [r3, #0]
   181e6:	68e3      	ldr	r3, [r4, #12]
   181e8:	3301      	adds	r3, #1
   181ea:	60e3      	str	r3, [r4, #12]
   181ec:	2000      	movs	r0, #0
   181ee:	9b01      	ldr	r3, [sp, #4]
   181f0:	1aed      	subs	r5, r5, r3
   181f2:	6923      	ldr	r3, [r4, #16]
   181f4:	19ef      	adds	r7, r5, r7
   181f6:	19df      	adds	r7, r3, r7
   181f8:	6127      	str	r7, [r4, #16]
   181fa:	b00d      	add	sp, #52	; 0x34
   181fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   181fe:	46c0      	nop			; (mov r8, r8)
   18200:	0001b06c 	.word	0x0001b06c
   18204:	00016d15 	.word	0x00016d15
   18208:	000185e5 	.word	0x000185e5
   1820c:	fffffaff 	.word	0xfffffaff
   18210:	0001b078 	.word	0x0001b078
   18214:	fffff6ff 	.word	0xfffff6ff

00018218 <_putc_r>:
   18218:	b570      	push	{r4, r5, r6, lr}
   1821a:	0006      	movs	r6, r0
   1821c:	000d      	movs	r5, r1
   1821e:	0014      	movs	r4, r2
   18220:	2800      	cmp	r0, #0
   18222:	d004      	beq.n	1822e <_putc_r+0x16>
   18224:	6983      	ldr	r3, [r0, #24]
   18226:	2b00      	cmp	r3, #0
   18228:	d101      	bne.n	1822e <_putc_r+0x16>
   1822a:	f7fe ff6f 	bl	1710c <__sinit>
   1822e:	4b12      	ldr	r3, [pc, #72]	; (18278 <_putc_r+0x60>)
   18230:	429c      	cmp	r4, r3
   18232:	d111      	bne.n	18258 <_putc_r+0x40>
   18234:	6874      	ldr	r4, [r6, #4]
   18236:	68a3      	ldr	r3, [r4, #8]
   18238:	3b01      	subs	r3, #1
   1823a:	60a3      	str	r3, [r4, #8]
   1823c:	2b00      	cmp	r3, #0
   1823e:	da05      	bge.n	1824c <_putc_r+0x34>
   18240:	69a2      	ldr	r2, [r4, #24]
   18242:	4293      	cmp	r3, r2
   18244:	db12      	blt.n	1826c <_putc_r+0x54>
   18246:	b2eb      	uxtb	r3, r5
   18248:	2b0a      	cmp	r3, #10
   1824a:	d00f      	beq.n	1826c <_putc_r+0x54>
   1824c:	6823      	ldr	r3, [r4, #0]
   1824e:	b2e8      	uxtb	r0, r5
   18250:	1c5a      	adds	r2, r3, #1
   18252:	6022      	str	r2, [r4, #0]
   18254:	701d      	strb	r5, [r3, #0]
   18256:	bd70      	pop	{r4, r5, r6, pc}
   18258:	4b08      	ldr	r3, [pc, #32]	; (1827c <_putc_r+0x64>)
   1825a:	429c      	cmp	r4, r3
   1825c:	d101      	bne.n	18262 <_putc_r+0x4a>
   1825e:	68b4      	ldr	r4, [r6, #8]
   18260:	e7e9      	b.n	18236 <_putc_r+0x1e>
   18262:	4b07      	ldr	r3, [pc, #28]	; (18280 <_putc_r+0x68>)
   18264:	429c      	cmp	r4, r3
   18266:	d1e6      	bne.n	18236 <_putc_r+0x1e>
   18268:	68f4      	ldr	r4, [r6, #12]
   1826a:	e7e4      	b.n	18236 <_putc_r+0x1e>
   1826c:	0022      	movs	r2, r4
   1826e:	0029      	movs	r1, r5
   18270:	0030      	movs	r0, r6
   18272:	f7fe fd73 	bl	16d5c <__swbuf_r>
   18276:	e7ee      	b.n	18256 <_putc_r+0x3e>
   18278:	0001afec 	.word	0x0001afec
   1827c:	0001b00c 	.word	0x0001b00c
   18280:	0001afcc 	.word	0x0001afcc

00018284 <lflush>:
   18284:	2209      	movs	r2, #9
   18286:	b510      	push	{r4, lr}
   18288:	8983      	ldrh	r3, [r0, #12]
   1828a:	4013      	ands	r3, r2
   1828c:	2200      	movs	r2, #0
   1828e:	2b09      	cmp	r3, #9
   18290:	d102      	bne.n	18298 <lflush+0x14>
   18292:	f7fe fee5 	bl	17060 <fflush>
   18296:	0002      	movs	r2, r0
   18298:	0010      	movs	r0, r2
   1829a:	bd10      	pop	{r4, pc}

0001829c <__srefill_r>:
   1829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1829e:	0005      	movs	r5, r0
   182a0:	000c      	movs	r4, r1
   182a2:	2800      	cmp	r0, #0
   182a4:	d004      	beq.n	182b0 <__srefill_r+0x14>
   182a6:	6983      	ldr	r3, [r0, #24]
   182a8:	2b00      	cmp	r3, #0
   182aa:	d101      	bne.n	182b0 <__srefill_r+0x14>
   182ac:	f7fe ff2e 	bl	1710c <__sinit>
   182b0:	4b3d      	ldr	r3, [pc, #244]	; (183a8 <__srefill_r+0x10c>)
   182b2:	429c      	cmp	r4, r3
   182b4:	d10a      	bne.n	182cc <__srefill_r+0x30>
   182b6:	686c      	ldr	r4, [r5, #4]
   182b8:	2300      	movs	r3, #0
   182ba:	6063      	str	r3, [r4, #4]
   182bc:	230c      	movs	r3, #12
   182be:	5ee2      	ldrsh	r2, [r4, r3]
   182c0:	b293      	uxth	r3, r2
   182c2:	0699      	lsls	r1, r3, #26
   182c4:	d50c      	bpl.n	182e0 <__srefill_r+0x44>
   182c6:	2001      	movs	r0, #1
   182c8:	4240      	negs	r0, r0
   182ca:	e068      	b.n	1839e <__srefill_r+0x102>
   182cc:	4b37      	ldr	r3, [pc, #220]	; (183ac <__srefill_r+0x110>)
   182ce:	429c      	cmp	r4, r3
   182d0:	d101      	bne.n	182d6 <__srefill_r+0x3a>
   182d2:	68ac      	ldr	r4, [r5, #8]
   182d4:	e7f0      	b.n	182b8 <__srefill_r+0x1c>
   182d6:	4b36      	ldr	r3, [pc, #216]	; (183b0 <__srefill_r+0x114>)
   182d8:	429c      	cmp	r4, r3
   182da:	d1ed      	bne.n	182b8 <__srefill_r+0x1c>
   182dc:	68ec      	ldr	r4, [r5, #12]
   182de:	e7eb      	b.n	182b8 <__srefill_r+0x1c>
   182e0:	0759      	lsls	r1, r3, #29
   182e2:	d44a      	bmi.n	1837a <__srefill_r+0xde>
   182e4:	06d9      	lsls	r1, r3, #27
   182e6:	d405      	bmi.n	182f4 <__srefill_r+0x58>
   182e8:	2309      	movs	r3, #9
   182ea:	602b      	str	r3, [r5, #0]
   182ec:	3337      	adds	r3, #55	; 0x37
   182ee:	4313      	orrs	r3, r2
   182f0:	81a3      	strh	r3, [r4, #12]
   182f2:	e7e8      	b.n	182c6 <__srefill_r+0x2a>
   182f4:	2608      	movs	r6, #8
   182f6:	4233      	tst	r3, r6
   182f8:	d00a      	beq.n	18310 <__srefill_r+0x74>
   182fa:	0021      	movs	r1, r4
   182fc:	0028      	movs	r0, r5
   182fe:	f7fe fe83 	bl	17008 <_fflush_r>
   18302:	2800      	cmp	r0, #0
   18304:	d1df      	bne.n	182c6 <__srefill_r+0x2a>
   18306:	89a3      	ldrh	r3, [r4, #12]
   18308:	60a0      	str	r0, [r4, #8]
   1830a:	43b3      	bics	r3, r6
   1830c:	81a3      	strh	r3, [r4, #12]
   1830e:	61a0      	str	r0, [r4, #24]
   18310:	2304      	movs	r3, #4
   18312:	89a2      	ldrh	r2, [r4, #12]
   18314:	4313      	orrs	r3, r2
   18316:	81a3      	strh	r3, [r4, #12]
   18318:	6923      	ldr	r3, [r4, #16]
   1831a:	2b00      	cmp	r3, #0
   1831c:	d103      	bne.n	18326 <__srefill_r+0x8a>
   1831e:	0021      	movs	r1, r4
   18320:	0028      	movs	r0, r5
   18322:	f7fe ffdd 	bl	172e0 <__smakebuf_r>
   18326:	230c      	movs	r3, #12
   18328:	5ee7      	ldrsh	r7, [r4, r3]
   1832a:	b2be      	uxth	r6, r7
   1832c:	07b3      	lsls	r3, r6, #30
   1832e:	d00f      	beq.n	18350 <__srefill_r+0xb4>
   18330:	2301      	movs	r3, #1
   18332:	81a3      	strh	r3, [r4, #12]
   18334:	4b1f      	ldr	r3, [pc, #124]	; (183b4 <__srefill_r+0x118>)
   18336:	4920      	ldr	r1, [pc, #128]	; (183b8 <__srefill_r+0x11c>)
   18338:	6818      	ldr	r0, [r3, #0]
   1833a:	f7fe ff5b 	bl	171f4 <_fwalk>
   1833e:	2309      	movs	r3, #9
   18340:	81a7      	strh	r7, [r4, #12]
   18342:	401e      	ands	r6, r3
   18344:	429e      	cmp	r6, r3
   18346:	d103      	bne.n	18350 <__srefill_r+0xb4>
   18348:	0021      	movs	r1, r4
   1834a:	0028      	movs	r0, r5
   1834c:	f7fe fdd2 	bl	16ef4 <__sflush_r>
   18350:	6923      	ldr	r3, [r4, #16]
   18352:	6922      	ldr	r2, [r4, #16]
   18354:	6023      	str	r3, [r4, #0]
   18356:	0028      	movs	r0, r5
   18358:	6963      	ldr	r3, [r4, #20]
   1835a:	6a21      	ldr	r1, [r4, #32]
   1835c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1835e:	47a8      	blx	r5
   18360:	0002      	movs	r2, r0
   18362:	6060      	str	r0, [r4, #4]
   18364:	2000      	movs	r0, #0
   18366:	4282      	cmp	r2, r0
   18368:	dc19      	bgt.n	1839e <__srefill_r+0x102>
   1836a:	89a1      	ldrh	r1, [r4, #12]
   1836c:	4282      	cmp	r2, r0
   1836e:	d117      	bne.n	183a0 <__srefill_r+0x104>
   18370:	2320      	movs	r3, #32
   18372:	430b      	orrs	r3, r1
   18374:	81a3      	strh	r3, [r4, #12]
   18376:	3801      	subs	r0, #1
   18378:	e011      	b.n	1839e <__srefill_r+0x102>
   1837a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1837c:	2900      	cmp	r1, #0
   1837e:	d0cb      	beq.n	18318 <__srefill_r+0x7c>
   18380:	0023      	movs	r3, r4
   18382:	3344      	adds	r3, #68	; 0x44
   18384:	4299      	cmp	r1, r3
   18386:	d002      	beq.n	1838e <__srefill_r+0xf2>
   18388:	0028      	movs	r0, r5
   1838a:	f7fe f941 	bl	16610 <_free_r>
   1838e:	2000      	movs	r0, #0
   18390:	6c23      	ldr	r3, [r4, #64]	; 0x40
   18392:	6360      	str	r0, [r4, #52]	; 0x34
   18394:	6063      	str	r3, [r4, #4]
   18396:	4283      	cmp	r3, r0
   18398:	d0be      	beq.n	18318 <__srefill_r+0x7c>
   1839a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1839c:	6023      	str	r3, [r4, #0]
   1839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   183a0:	2340      	movs	r3, #64	; 0x40
   183a2:	6060      	str	r0, [r4, #4]
   183a4:	430b      	orrs	r3, r1
   183a6:	e7a3      	b.n	182f0 <__srefill_r+0x54>
   183a8:	0001afec 	.word	0x0001afec
   183ac:	0001b00c 	.word	0x0001b00c
   183b0:	0001afcc 	.word	0x0001afcc
   183b4:	0001afc8 	.word	0x0001afc8
   183b8:	00018285 	.word	0x00018285

000183bc <__sccl>:
   183bc:	b570      	push	{r4, r5, r6, lr}
   183be:	780b      	ldrb	r3, [r1, #0]
   183c0:	2b5e      	cmp	r3, #94	; 0x5e
   183c2:	d00d      	beq.n	183e0 <__sccl+0x24>
   183c4:	1c4a      	adds	r2, r1, #1
   183c6:	2100      	movs	r1, #0
   183c8:	0004      	movs	r4, r0
   183ca:	1c45      	adds	r5, r0, #1
   183cc:	35ff      	adds	r5, #255	; 0xff
   183ce:	7021      	strb	r1, [r4, #0]
   183d0:	3401      	adds	r4, #1
   183d2:	42a5      	cmp	r5, r4
   183d4:	d1fb      	bne.n	183ce <__sccl+0x12>
   183d6:	2b00      	cmp	r3, #0
   183d8:	d106      	bne.n	183e8 <__sccl+0x2c>
   183da:	3a01      	subs	r2, #1
   183dc:	0010      	movs	r0, r2
   183de:	bd70      	pop	{r4, r5, r6, pc}
   183e0:	1c8a      	adds	r2, r1, #2
   183e2:	784b      	ldrb	r3, [r1, #1]
   183e4:	2101      	movs	r1, #1
   183e6:	e7ef      	b.n	183c8 <__sccl+0xc>
   183e8:	2401      	movs	r4, #1
   183ea:	404c      	eors	r4, r1
   183ec:	0011      	movs	r1, r2
   183ee:	54c4      	strb	r4, [r0, r3]
   183f0:	780d      	ldrb	r5, [r1, #0]
   183f2:	1c4a      	adds	r2, r1, #1
   183f4:	2d2d      	cmp	r5, #45	; 0x2d
   183f6:	d007      	beq.n	18408 <__sccl+0x4c>
   183f8:	2d5d      	cmp	r5, #93	; 0x5d
   183fa:	d0ef      	beq.n	183dc <__sccl+0x20>
   183fc:	2d00      	cmp	r5, #0
   183fe:	d101      	bne.n	18404 <__sccl+0x48>
   18400:	000a      	movs	r2, r1
   18402:	e7eb      	b.n	183dc <__sccl+0x20>
   18404:	002b      	movs	r3, r5
   18406:	e7f1      	b.n	183ec <__sccl+0x30>
   18408:	784e      	ldrb	r6, [r1, #1]
   1840a:	2e5d      	cmp	r6, #93	; 0x5d
   1840c:	d0fa      	beq.n	18404 <__sccl+0x48>
   1840e:	42b3      	cmp	r3, r6
   18410:	dcf8      	bgt.n	18404 <__sccl+0x48>
   18412:	3102      	adds	r1, #2
   18414:	3301      	adds	r3, #1
   18416:	54c4      	strb	r4, [r0, r3]
   18418:	429e      	cmp	r6, r3
   1841a:	dcfb      	bgt.n	18414 <__sccl+0x58>
   1841c:	e7e8      	b.n	183f0 <__sccl+0x34>
	...

00018420 <__sread>:
   18420:	b570      	push	{r4, r5, r6, lr}
   18422:	000c      	movs	r4, r1
   18424:	250e      	movs	r5, #14
   18426:	5f49      	ldrsh	r1, [r1, r5]
   18428:	f000 fa38 	bl	1889c <_read_r>
   1842c:	2800      	cmp	r0, #0
   1842e:	db03      	blt.n	18438 <__sread+0x18>
   18430:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18432:	181b      	adds	r3, r3, r0
   18434:	6563      	str	r3, [r4, #84]	; 0x54
   18436:	bd70      	pop	{r4, r5, r6, pc}
   18438:	89a3      	ldrh	r3, [r4, #12]
   1843a:	4a02      	ldr	r2, [pc, #8]	; (18444 <__sread+0x24>)
   1843c:	4013      	ands	r3, r2
   1843e:	81a3      	strh	r3, [r4, #12]
   18440:	e7f9      	b.n	18436 <__sread+0x16>
   18442:	46c0      	nop			; (mov r8, r8)
   18444:	ffffefff 	.word	0xffffefff

00018448 <__swrite>:
   18448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1844a:	001f      	movs	r7, r3
   1844c:	898b      	ldrh	r3, [r1, #12]
   1844e:	0005      	movs	r5, r0
   18450:	000c      	movs	r4, r1
   18452:	0016      	movs	r6, r2
   18454:	05db      	lsls	r3, r3, #23
   18456:	d505      	bpl.n	18464 <__swrite+0x1c>
   18458:	230e      	movs	r3, #14
   1845a:	5ec9      	ldrsh	r1, [r1, r3]
   1845c:	2200      	movs	r2, #0
   1845e:	2302      	movs	r3, #2
   18460:	f000 f9d6 	bl	18810 <_lseek_r>
   18464:	89a3      	ldrh	r3, [r4, #12]
   18466:	4a05      	ldr	r2, [pc, #20]	; (1847c <__swrite+0x34>)
   18468:	0028      	movs	r0, r5
   1846a:	4013      	ands	r3, r2
   1846c:	81a3      	strh	r3, [r4, #12]
   1846e:	0032      	movs	r2, r6
   18470:	230e      	movs	r3, #14
   18472:	5ee1      	ldrsh	r1, [r4, r3]
   18474:	003b      	movs	r3, r7
   18476:	f000 f981 	bl	1877c <_write_r>
   1847a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1847c:	ffffefff 	.word	0xffffefff

00018480 <__sseek>:
   18480:	b570      	push	{r4, r5, r6, lr}
   18482:	000c      	movs	r4, r1
   18484:	250e      	movs	r5, #14
   18486:	5f49      	ldrsh	r1, [r1, r5]
   18488:	f000 f9c2 	bl	18810 <_lseek_r>
   1848c:	89a3      	ldrh	r3, [r4, #12]
   1848e:	1c42      	adds	r2, r0, #1
   18490:	d103      	bne.n	1849a <__sseek+0x1a>
   18492:	4a05      	ldr	r2, [pc, #20]	; (184a8 <__sseek+0x28>)
   18494:	4013      	ands	r3, r2
   18496:	81a3      	strh	r3, [r4, #12]
   18498:	bd70      	pop	{r4, r5, r6, pc}
   1849a:	2280      	movs	r2, #128	; 0x80
   1849c:	0152      	lsls	r2, r2, #5
   1849e:	4313      	orrs	r3, r2
   184a0:	81a3      	strh	r3, [r4, #12]
   184a2:	6560      	str	r0, [r4, #84]	; 0x54
   184a4:	e7f8      	b.n	18498 <__sseek+0x18>
   184a6:	46c0      	nop			; (mov r8, r8)
   184a8:	ffffefff 	.word	0xffffefff

000184ac <__sclose>:
   184ac:	b510      	push	{r4, lr}
   184ae:	230e      	movs	r3, #14
   184b0:	5ec9      	ldrsh	r1, [r1, r3]
   184b2:	f000 f977 	bl	187a4 <_close_r>
   184b6:	bd10      	pop	{r4, pc}

000184b8 <strchr>:
   184b8:	b2c9      	uxtb	r1, r1
   184ba:	7803      	ldrb	r3, [r0, #0]
   184bc:	2b00      	cmp	r3, #0
   184be:	d004      	beq.n	184ca <strchr+0x12>
   184c0:	4299      	cmp	r1, r3
   184c2:	d100      	bne.n	184c6 <strchr+0xe>
   184c4:	4770      	bx	lr
   184c6:	3001      	adds	r0, #1
   184c8:	e7f7      	b.n	184ba <strchr+0x2>
   184ca:	424b      	negs	r3, r1
   184cc:	4159      	adcs	r1, r3
   184ce:	4249      	negs	r1, r1
   184d0:	4008      	ands	r0, r1
   184d2:	e7f7      	b.n	184c4 <strchr+0xc>

000184d4 <_strtoul_l.isra.0>:
   184d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   184d6:	001f      	movs	r7, r3
   184d8:	000e      	movs	r6, r1
   184da:	b087      	sub	sp, #28
   184dc:	9005      	str	r0, [sp, #20]
   184de:	9103      	str	r1, [sp, #12]
   184e0:	9201      	str	r2, [sp, #4]
   184e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   184e4:	7834      	ldrb	r4, [r6, #0]
   184e6:	f7fe fec2 	bl	1726e <__locale_ctype_ptr_l>
   184ea:	2208      	movs	r2, #8
   184ec:	1900      	adds	r0, r0, r4
   184ee:	7843      	ldrb	r3, [r0, #1]
   184f0:	1c75      	adds	r5, r6, #1
   184f2:	4013      	ands	r3, r2
   184f4:	d10c      	bne.n	18510 <_strtoul_l.isra.0+0x3c>
   184f6:	2c2d      	cmp	r4, #45	; 0x2d
   184f8:	d10c      	bne.n	18514 <_strtoul_l.isra.0+0x40>
   184fa:	3301      	adds	r3, #1
   184fc:	782c      	ldrb	r4, [r5, #0]
   184fe:	9302      	str	r3, [sp, #8]
   18500:	1cb5      	adds	r5, r6, #2
   18502:	2f00      	cmp	r7, #0
   18504:	d00c      	beq.n	18520 <_strtoul_l.isra.0+0x4c>
   18506:	2f10      	cmp	r7, #16
   18508:	d114      	bne.n	18534 <_strtoul_l.isra.0+0x60>
   1850a:	2c30      	cmp	r4, #48	; 0x30
   1850c:	d00a      	beq.n	18524 <_strtoul_l.isra.0+0x50>
   1850e:	e011      	b.n	18534 <_strtoul_l.isra.0+0x60>
   18510:	002e      	movs	r6, r5
   18512:	e7e6      	b.n	184e2 <_strtoul_l.isra.0+0xe>
   18514:	9302      	str	r3, [sp, #8]
   18516:	2c2b      	cmp	r4, #43	; 0x2b
   18518:	d1f3      	bne.n	18502 <_strtoul_l.isra.0+0x2e>
   1851a:	782c      	ldrb	r4, [r5, #0]
   1851c:	1cb5      	adds	r5, r6, #2
   1851e:	e7f0      	b.n	18502 <_strtoul_l.isra.0+0x2e>
   18520:	2c30      	cmp	r4, #48	; 0x30
   18522:	d12f      	bne.n	18584 <_strtoul_l.isra.0+0xb0>
   18524:	2220      	movs	r2, #32
   18526:	782b      	ldrb	r3, [r5, #0]
   18528:	4393      	bics	r3, r2
   1852a:	2b58      	cmp	r3, #88	; 0x58
   1852c:	d154      	bne.n	185d8 <_strtoul_l.isra.0+0x104>
   1852e:	2710      	movs	r7, #16
   18530:	786c      	ldrb	r4, [r5, #1]
   18532:	3502      	adds	r5, #2
   18534:	2001      	movs	r0, #1
   18536:	0039      	movs	r1, r7
   18538:	4240      	negs	r0, r0
   1853a:	f7fd fe67 	bl	1620c <__udivsi3>
   1853e:	0006      	movs	r6, r0
   18540:	2001      	movs	r0, #1
   18542:	0039      	movs	r1, r7
   18544:	4240      	negs	r0, r0
   18546:	f7fd fee7 	bl	16318 <__aeabi_uidivmod>
   1854a:	2300      	movs	r3, #0
   1854c:	9104      	str	r1, [sp, #16]
   1854e:	2101      	movs	r1, #1
   18550:	2201      	movs	r2, #1
   18552:	0018      	movs	r0, r3
   18554:	468c      	mov	ip, r1
   18556:	4252      	negs	r2, r2
   18558:	0021      	movs	r1, r4
   1855a:	3930      	subs	r1, #48	; 0x30
   1855c:	2909      	cmp	r1, #9
   1855e:	d813      	bhi.n	18588 <_strtoul_l.isra.0+0xb4>
   18560:	000c      	movs	r4, r1
   18562:	42a7      	cmp	r7, r4
   18564:	dd1e      	ble.n	185a4 <_strtoul_l.isra.0+0xd0>
   18566:	2b00      	cmp	r3, #0
   18568:	db1a      	blt.n	185a0 <_strtoul_l.isra.0+0xcc>
   1856a:	0013      	movs	r3, r2
   1856c:	4286      	cmp	r6, r0
   1856e:	d306      	bcc.n	1857e <_strtoul_l.isra.0+0xaa>
   18570:	d102      	bne.n	18578 <_strtoul_l.isra.0+0xa4>
   18572:	9904      	ldr	r1, [sp, #16]
   18574:	42a1      	cmp	r1, r4
   18576:	db02      	blt.n	1857e <_strtoul_l.isra.0+0xaa>
   18578:	4663      	mov	r3, ip
   1857a:	4378      	muls	r0, r7
   1857c:	1820      	adds	r0, r4, r0
   1857e:	782c      	ldrb	r4, [r5, #0]
   18580:	3501      	adds	r5, #1
   18582:	e7e9      	b.n	18558 <_strtoul_l.isra.0+0x84>
   18584:	270a      	movs	r7, #10
   18586:	e7d5      	b.n	18534 <_strtoul_l.isra.0+0x60>
   18588:	0021      	movs	r1, r4
   1858a:	3941      	subs	r1, #65	; 0x41
   1858c:	2919      	cmp	r1, #25
   1858e:	d801      	bhi.n	18594 <_strtoul_l.isra.0+0xc0>
   18590:	3c37      	subs	r4, #55	; 0x37
   18592:	e7e6      	b.n	18562 <_strtoul_l.isra.0+0x8e>
   18594:	0021      	movs	r1, r4
   18596:	3961      	subs	r1, #97	; 0x61
   18598:	2919      	cmp	r1, #25
   1859a:	d803      	bhi.n	185a4 <_strtoul_l.isra.0+0xd0>
   1859c:	3c57      	subs	r4, #87	; 0x57
   1859e:	e7e0      	b.n	18562 <_strtoul_l.isra.0+0x8e>
   185a0:	0013      	movs	r3, r2
   185a2:	e7ec      	b.n	1857e <_strtoul_l.isra.0+0xaa>
   185a4:	2b00      	cmp	r3, #0
   185a6:	da09      	bge.n	185bc <_strtoul_l.isra.0+0xe8>
   185a8:	2322      	movs	r3, #34	; 0x22
   185aa:	2001      	movs	r0, #1
   185ac:	9a05      	ldr	r2, [sp, #20]
   185ae:	4240      	negs	r0, r0
   185b0:	6013      	str	r3, [r2, #0]
   185b2:	9b01      	ldr	r3, [sp, #4]
   185b4:	2b00      	cmp	r3, #0
   185b6:	d10b      	bne.n	185d0 <_strtoul_l.isra.0+0xfc>
   185b8:	b007      	add	sp, #28
   185ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   185bc:	9a02      	ldr	r2, [sp, #8]
   185be:	2a00      	cmp	r2, #0
   185c0:	d000      	beq.n	185c4 <_strtoul_l.isra.0+0xf0>
   185c2:	4240      	negs	r0, r0
   185c4:	9a01      	ldr	r2, [sp, #4]
   185c6:	2a00      	cmp	r2, #0
   185c8:	d0f6      	beq.n	185b8 <_strtoul_l.isra.0+0xe4>
   185ca:	9a03      	ldr	r2, [sp, #12]
   185cc:	2b00      	cmp	r3, #0
   185ce:	d000      	beq.n	185d2 <_strtoul_l.isra.0+0xfe>
   185d0:	1e6a      	subs	r2, r5, #1
   185d2:	9b01      	ldr	r3, [sp, #4]
   185d4:	601a      	str	r2, [r3, #0]
   185d6:	e7ef      	b.n	185b8 <_strtoul_l.isra.0+0xe4>
   185d8:	2430      	movs	r4, #48	; 0x30
   185da:	2f00      	cmp	r7, #0
   185dc:	d1aa      	bne.n	18534 <_strtoul_l.isra.0+0x60>
   185de:	3708      	adds	r7, #8
   185e0:	e7a8      	b.n	18534 <_strtoul_l.isra.0+0x60>
	...

000185e4 <_strtoul_r>:
   185e4:	b513      	push	{r0, r1, r4, lr}
   185e6:	4c05      	ldr	r4, [pc, #20]	; (185fc <_strtoul_r+0x18>)
   185e8:	6824      	ldr	r4, [r4, #0]
   185ea:	6a24      	ldr	r4, [r4, #32]
   185ec:	2c00      	cmp	r4, #0
   185ee:	d100      	bne.n	185f2 <_strtoul_r+0xe>
   185f0:	4c03      	ldr	r4, [pc, #12]	; (18600 <_strtoul_r+0x1c>)
   185f2:	9400      	str	r4, [sp, #0]
   185f4:	f7ff ff6e 	bl	184d4 <_strtoul_l.isra.0>
   185f8:	bd16      	pop	{r1, r2, r4, pc}
   185fa:	46c0      	nop			; (mov r8, r8)
   185fc:	2000016c 	.word	0x2000016c
   18600:	200001d0 	.word	0x200001d0

00018604 <__submore>:
   18604:	000b      	movs	r3, r1
   18606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18608:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   1860a:	3344      	adds	r3, #68	; 0x44
   1860c:	000c      	movs	r4, r1
   1860e:	429d      	cmp	r5, r3
   18610:	d11c      	bne.n	1864c <__submore+0x48>
   18612:	2680      	movs	r6, #128	; 0x80
   18614:	00f6      	lsls	r6, r6, #3
   18616:	0031      	movs	r1, r6
   18618:	f7fe f844 	bl	166a4 <_malloc_r>
   1861c:	2800      	cmp	r0, #0
   1861e:	d102      	bne.n	18626 <__submore+0x22>
   18620:	2001      	movs	r0, #1
   18622:	4240      	negs	r0, r0
   18624:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   18626:	0023      	movs	r3, r4
   18628:	6360      	str	r0, [r4, #52]	; 0x34
   1862a:	63a6      	str	r6, [r4, #56]	; 0x38
   1862c:	3346      	adds	r3, #70	; 0x46
   1862e:	781a      	ldrb	r2, [r3, #0]
   18630:	4b10      	ldr	r3, [pc, #64]	; (18674 <__submore+0x70>)
   18632:	54c2      	strb	r2, [r0, r3]
   18634:	0023      	movs	r3, r4
   18636:	3345      	adds	r3, #69	; 0x45
   18638:	781a      	ldrb	r2, [r3, #0]
   1863a:	4b0f      	ldr	r3, [pc, #60]	; (18678 <__submore+0x74>)
   1863c:	54c2      	strb	r2, [r0, r3]
   1863e:	782a      	ldrb	r2, [r5, #0]
   18640:	4b0e      	ldr	r3, [pc, #56]	; (1867c <__submore+0x78>)
   18642:	54c2      	strb	r2, [r0, r3]
   18644:	18c0      	adds	r0, r0, r3
   18646:	6020      	str	r0, [r4, #0]
   18648:	2000      	movs	r0, #0
   1864a:	e7eb      	b.n	18624 <__submore+0x20>
   1864c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
   1864e:	0029      	movs	r1, r5
   18650:	0073      	lsls	r3, r6, #1
   18652:	001a      	movs	r2, r3
   18654:	9301      	str	r3, [sp, #4]
   18656:	f000 f8fa 	bl	1884e <_realloc_r>
   1865a:	1e05      	subs	r5, r0, #0
   1865c:	d0e0      	beq.n	18620 <__submore+0x1c>
   1865e:	1987      	adds	r7, r0, r6
   18660:	0001      	movs	r1, r0
   18662:	0032      	movs	r2, r6
   18664:	0038      	movs	r0, r7
   18666:	f7fd ffaf 	bl	165c8 <memcpy>
   1866a:	9b01      	ldr	r3, [sp, #4]
   1866c:	6027      	str	r7, [r4, #0]
   1866e:	6365      	str	r5, [r4, #52]	; 0x34
   18670:	63a3      	str	r3, [r4, #56]	; 0x38
   18672:	e7e9      	b.n	18648 <__submore+0x44>
   18674:	000003ff 	.word	0x000003ff
   18678:	000003fe 	.word	0x000003fe
   1867c:	000003fd 	.word	0x000003fd

00018680 <_ungetc_r>:
   18680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18682:	0005      	movs	r5, r0
   18684:	000e      	movs	r6, r1
   18686:	0014      	movs	r4, r2
   18688:	1c4b      	adds	r3, r1, #1
   1868a:	d103      	bne.n	18694 <_ungetc_r+0x14>
   1868c:	2601      	movs	r6, #1
   1868e:	4276      	negs	r6, r6
   18690:	0030      	movs	r0, r6
   18692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18694:	2800      	cmp	r0, #0
   18696:	d004      	beq.n	186a2 <_ungetc_r+0x22>
   18698:	6983      	ldr	r3, [r0, #24]
   1869a:	2b00      	cmp	r3, #0
   1869c:	d101      	bne.n	186a2 <_ungetc_r+0x22>
   1869e:	f7fe fd35 	bl	1710c <__sinit>
   186a2:	4b2d      	ldr	r3, [pc, #180]	; (18758 <_ungetc_r+0xd8>)
   186a4:	429c      	cmp	r4, r3
   186a6:	d12d      	bne.n	18704 <_ungetc_r+0x84>
   186a8:	686c      	ldr	r4, [r5, #4]
   186aa:	2220      	movs	r2, #32
   186ac:	89a3      	ldrh	r3, [r4, #12]
   186ae:	4393      	bics	r3, r2
   186b0:	b21b      	sxth	r3, r3
   186b2:	81a3      	strh	r3, [r4, #12]
   186b4:	b29b      	uxth	r3, r3
   186b6:	075a      	lsls	r2, r3, #29
   186b8:	d413      	bmi.n	186e2 <_ungetc_r+0x62>
   186ba:	06da      	lsls	r2, r3, #27
   186bc:	d5e6      	bpl.n	1868c <_ungetc_r+0xc>
   186be:	2708      	movs	r7, #8
   186c0:	423b      	tst	r3, r7
   186c2:	d00a      	beq.n	186da <_ungetc_r+0x5a>
   186c4:	0021      	movs	r1, r4
   186c6:	0028      	movs	r0, r5
   186c8:	f7fe fc9e 	bl	17008 <_fflush_r>
   186cc:	2800      	cmp	r0, #0
   186ce:	d1dd      	bne.n	1868c <_ungetc_r+0xc>
   186d0:	89a3      	ldrh	r3, [r4, #12]
   186d2:	60a0      	str	r0, [r4, #8]
   186d4:	43bb      	bics	r3, r7
   186d6:	81a3      	strh	r3, [r4, #12]
   186d8:	61a0      	str	r0, [r4, #24]
   186da:	2304      	movs	r3, #4
   186dc:	89a2      	ldrh	r2, [r4, #12]
   186de:	4313      	orrs	r3, r2
   186e0:	81a3      	strh	r3, [r4, #12]
   186e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   186e4:	b2f7      	uxtb	r7, r6
   186e6:	6863      	ldr	r3, [r4, #4]
   186e8:	b2f6      	uxtb	r6, r6
   186ea:	2a00      	cmp	r2, #0
   186ec:	d01b      	beq.n	18726 <_ungetc_r+0xa6>
   186ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   186f0:	4293      	cmp	r3, r2
   186f2:	da11      	bge.n	18718 <_ungetc_r+0x98>
   186f4:	6823      	ldr	r3, [r4, #0]
   186f6:	3b01      	subs	r3, #1
   186f8:	6023      	str	r3, [r4, #0]
   186fa:	701f      	strb	r7, [r3, #0]
   186fc:	6863      	ldr	r3, [r4, #4]
   186fe:	3301      	adds	r3, #1
   18700:	6063      	str	r3, [r4, #4]
   18702:	e7c5      	b.n	18690 <_ungetc_r+0x10>
   18704:	4b15      	ldr	r3, [pc, #84]	; (1875c <_ungetc_r+0xdc>)
   18706:	429c      	cmp	r4, r3
   18708:	d101      	bne.n	1870e <_ungetc_r+0x8e>
   1870a:	68ac      	ldr	r4, [r5, #8]
   1870c:	e7cd      	b.n	186aa <_ungetc_r+0x2a>
   1870e:	4b14      	ldr	r3, [pc, #80]	; (18760 <_ungetc_r+0xe0>)
   18710:	429c      	cmp	r4, r3
   18712:	d1ca      	bne.n	186aa <_ungetc_r+0x2a>
   18714:	68ec      	ldr	r4, [r5, #12]
   18716:	e7c8      	b.n	186aa <_ungetc_r+0x2a>
   18718:	0021      	movs	r1, r4
   1871a:	0028      	movs	r0, r5
   1871c:	f7ff ff72 	bl	18604 <__submore>
   18720:	2800      	cmp	r0, #0
   18722:	d0e7      	beq.n	186f4 <_ungetc_r+0x74>
   18724:	e7b2      	b.n	1868c <_ungetc_r+0xc>
   18726:	6921      	ldr	r1, [r4, #16]
   18728:	6822      	ldr	r2, [r4, #0]
   1872a:	2900      	cmp	r1, #0
   1872c:	d007      	beq.n	1873e <_ungetc_r+0xbe>
   1872e:	4291      	cmp	r1, r2
   18730:	d205      	bcs.n	1873e <_ungetc_r+0xbe>
   18732:	1e51      	subs	r1, r2, #1
   18734:	7808      	ldrb	r0, [r1, #0]
   18736:	4286      	cmp	r6, r0
   18738:	d101      	bne.n	1873e <_ungetc_r+0xbe>
   1873a:	6021      	str	r1, [r4, #0]
   1873c:	e7df      	b.n	186fe <_ungetc_r+0x7e>
   1873e:	6423      	str	r3, [r4, #64]	; 0x40
   18740:	0023      	movs	r3, r4
   18742:	3344      	adds	r3, #68	; 0x44
   18744:	6363      	str	r3, [r4, #52]	; 0x34
   18746:	2303      	movs	r3, #3
   18748:	63a3      	str	r3, [r4, #56]	; 0x38
   1874a:	0023      	movs	r3, r4
   1874c:	3346      	adds	r3, #70	; 0x46
   1874e:	63e2      	str	r2, [r4, #60]	; 0x3c
   18750:	701f      	strb	r7, [r3, #0]
   18752:	6023      	str	r3, [r4, #0]
   18754:	2301      	movs	r3, #1
   18756:	e7d3      	b.n	18700 <_ungetc_r+0x80>
   18758:	0001afec 	.word	0x0001afec
   1875c:	0001b00c 	.word	0x0001b00c
   18760:	0001afcc 	.word	0x0001afcc

00018764 <__ascii_wctomb>:
   18764:	1e0b      	subs	r3, r1, #0
   18766:	d004      	beq.n	18772 <__ascii_wctomb+0xe>
   18768:	2aff      	cmp	r2, #255	; 0xff
   1876a:	d904      	bls.n	18776 <__ascii_wctomb+0x12>
   1876c:	238a      	movs	r3, #138	; 0x8a
   1876e:	6003      	str	r3, [r0, #0]
   18770:	3b8b      	subs	r3, #139	; 0x8b
   18772:	0018      	movs	r0, r3
   18774:	4770      	bx	lr
   18776:	700a      	strb	r2, [r1, #0]
   18778:	2301      	movs	r3, #1
   1877a:	e7fa      	b.n	18772 <__ascii_wctomb+0xe>

0001877c <_write_r>:
   1877c:	b570      	push	{r4, r5, r6, lr}
   1877e:	0005      	movs	r5, r0
   18780:	0008      	movs	r0, r1
   18782:	0011      	movs	r1, r2
   18784:	2200      	movs	r2, #0
   18786:	4c06      	ldr	r4, [pc, #24]	; (187a0 <_write_r+0x24>)
   18788:	6022      	str	r2, [r4, #0]
   1878a:	001a      	movs	r2, r3
   1878c:	f7f8 f856 	bl	1083c <_write>
   18790:	1c43      	adds	r3, r0, #1
   18792:	d103      	bne.n	1879c <_write_r+0x20>
   18794:	6823      	ldr	r3, [r4, #0]
   18796:	2b00      	cmp	r3, #0
   18798:	d000      	beq.n	1879c <_write_r+0x20>
   1879a:	602b      	str	r3, [r5, #0]
   1879c:	bd70      	pop	{r4, r5, r6, pc}
   1879e:	46c0      	nop			; (mov r8, r8)
   187a0:	20001334 	.word	0x20001334

000187a4 <_close_r>:
   187a4:	2300      	movs	r3, #0
   187a6:	b570      	push	{r4, r5, r6, lr}
   187a8:	4c06      	ldr	r4, [pc, #24]	; (187c4 <_close_r+0x20>)
   187aa:	0005      	movs	r5, r0
   187ac:	0008      	movs	r0, r1
   187ae:	6023      	str	r3, [r4, #0]
   187b0:	f7f8 f87e 	bl	108b0 <_close>
   187b4:	1c43      	adds	r3, r0, #1
   187b6:	d103      	bne.n	187c0 <_close_r+0x1c>
   187b8:	6823      	ldr	r3, [r4, #0]
   187ba:	2b00      	cmp	r3, #0
   187bc:	d000      	beq.n	187c0 <_close_r+0x1c>
   187be:	602b      	str	r3, [r5, #0]
   187c0:	bd70      	pop	{r4, r5, r6, pc}
   187c2:	46c0      	nop			; (mov r8, r8)
   187c4:	20001334 	.word	0x20001334

000187c8 <_fstat_r>:
   187c8:	2300      	movs	r3, #0
   187ca:	b570      	push	{r4, r5, r6, lr}
   187cc:	4c06      	ldr	r4, [pc, #24]	; (187e8 <_fstat_r+0x20>)
   187ce:	0005      	movs	r5, r0
   187d0:	0008      	movs	r0, r1
   187d2:	0011      	movs	r1, r2
   187d4:	6023      	str	r3, [r4, #0]
   187d6:	f7f8 f86e 	bl	108b6 <_fstat>
   187da:	1c43      	adds	r3, r0, #1
   187dc:	d103      	bne.n	187e6 <_fstat_r+0x1e>
   187de:	6823      	ldr	r3, [r4, #0]
   187e0:	2b00      	cmp	r3, #0
   187e2:	d000      	beq.n	187e6 <_fstat_r+0x1e>
   187e4:	602b      	str	r3, [r5, #0]
   187e6:	bd70      	pop	{r4, r5, r6, pc}
   187e8:	20001334 	.word	0x20001334

000187ec <_isatty_r>:
   187ec:	2300      	movs	r3, #0
   187ee:	b570      	push	{r4, r5, r6, lr}
   187f0:	4c06      	ldr	r4, [pc, #24]	; (1880c <_isatty_r+0x20>)
   187f2:	0005      	movs	r5, r0
   187f4:	0008      	movs	r0, r1
   187f6:	6023      	str	r3, [r4, #0]
   187f8:	f7f8 f862 	bl	108c0 <_isatty>
   187fc:	1c43      	adds	r3, r0, #1
   187fe:	d103      	bne.n	18808 <_isatty_r+0x1c>
   18800:	6823      	ldr	r3, [r4, #0]
   18802:	2b00      	cmp	r3, #0
   18804:	d000      	beq.n	18808 <_isatty_r+0x1c>
   18806:	602b      	str	r3, [r5, #0]
   18808:	bd70      	pop	{r4, r5, r6, pc}
   1880a:	46c0      	nop			; (mov r8, r8)
   1880c:	20001334 	.word	0x20001334

00018810 <_lseek_r>:
   18810:	b570      	push	{r4, r5, r6, lr}
   18812:	0005      	movs	r5, r0
   18814:	0008      	movs	r0, r1
   18816:	0011      	movs	r1, r2
   18818:	2200      	movs	r2, #0
   1881a:	4c06      	ldr	r4, [pc, #24]	; (18834 <_lseek_r+0x24>)
   1881c:	6022      	str	r2, [r4, #0]
   1881e:	001a      	movs	r2, r3
   18820:	f7f8 f850 	bl	108c4 <_lseek>
   18824:	1c43      	adds	r3, r0, #1
   18826:	d103      	bne.n	18830 <_lseek_r+0x20>
   18828:	6823      	ldr	r3, [r4, #0]
   1882a:	2b00      	cmp	r3, #0
   1882c:	d000      	beq.n	18830 <_lseek_r+0x20>
   1882e:	602b      	str	r3, [r5, #0]
   18830:	bd70      	pop	{r4, r5, r6, pc}
   18832:	46c0      	nop			; (mov r8, r8)
   18834:	20001334 	.word	0x20001334

00018838 <memchr>:
   18838:	b2c9      	uxtb	r1, r1
   1883a:	1882      	adds	r2, r0, r2
   1883c:	4290      	cmp	r0, r2
   1883e:	d101      	bne.n	18844 <memchr+0xc>
   18840:	2000      	movs	r0, #0
   18842:	4770      	bx	lr
   18844:	7803      	ldrb	r3, [r0, #0]
   18846:	428b      	cmp	r3, r1
   18848:	d0fb      	beq.n	18842 <memchr+0xa>
   1884a:	3001      	adds	r0, #1
   1884c:	e7f6      	b.n	1883c <memchr+0x4>

0001884e <_realloc_r>:
   1884e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18850:	0007      	movs	r7, r0
   18852:	000d      	movs	r5, r1
   18854:	0016      	movs	r6, r2
   18856:	2900      	cmp	r1, #0
   18858:	d105      	bne.n	18866 <_realloc_r+0x18>
   1885a:	0011      	movs	r1, r2
   1885c:	f7fd ff22 	bl	166a4 <_malloc_r>
   18860:	0004      	movs	r4, r0
   18862:	0020      	movs	r0, r4
   18864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18866:	2a00      	cmp	r2, #0
   18868:	d103      	bne.n	18872 <_realloc_r+0x24>
   1886a:	f7fd fed1 	bl	16610 <_free_r>
   1886e:	0034      	movs	r4, r6
   18870:	e7f7      	b.n	18862 <_realloc_r+0x14>
   18872:	f000 f827 	bl	188c4 <_malloc_usable_size_r>
   18876:	002c      	movs	r4, r5
   18878:	4286      	cmp	r6, r0
   1887a:	d9f2      	bls.n	18862 <_realloc_r+0x14>
   1887c:	0031      	movs	r1, r6
   1887e:	0038      	movs	r0, r7
   18880:	f7fd ff10 	bl	166a4 <_malloc_r>
   18884:	1e04      	subs	r4, r0, #0
   18886:	d0ec      	beq.n	18862 <_realloc_r+0x14>
   18888:	0029      	movs	r1, r5
   1888a:	0032      	movs	r2, r6
   1888c:	f7fd fe9c 	bl	165c8 <memcpy>
   18890:	0029      	movs	r1, r5
   18892:	0038      	movs	r0, r7
   18894:	f7fd febc 	bl	16610 <_free_r>
   18898:	e7e3      	b.n	18862 <_realloc_r+0x14>
	...

0001889c <_read_r>:
   1889c:	b570      	push	{r4, r5, r6, lr}
   1889e:	0005      	movs	r5, r0
   188a0:	0008      	movs	r0, r1
   188a2:	0011      	movs	r1, r2
   188a4:	2200      	movs	r2, #0
   188a6:	4c06      	ldr	r4, [pc, #24]	; (188c0 <_read_r+0x24>)
   188a8:	6022      	str	r2, [r4, #0]
   188aa:	001a      	movs	r2, r3
   188ac:	f7f7 ffa4 	bl	107f8 <_read>
   188b0:	1c43      	adds	r3, r0, #1
   188b2:	d103      	bne.n	188bc <_read_r+0x20>
   188b4:	6823      	ldr	r3, [r4, #0]
   188b6:	2b00      	cmp	r3, #0
   188b8:	d000      	beq.n	188bc <_read_r+0x20>
   188ba:	602b      	str	r3, [r5, #0]
   188bc:	bd70      	pop	{r4, r5, r6, pc}
   188be:	46c0      	nop			; (mov r8, r8)
   188c0:	20001334 	.word	0x20001334

000188c4 <_malloc_usable_size_r>:
   188c4:	1f0b      	subs	r3, r1, #4
   188c6:	681b      	ldr	r3, [r3, #0]
   188c8:	1f18      	subs	r0, r3, #4
   188ca:	2b00      	cmp	r3, #0
   188cc:	da01      	bge.n	188d2 <_malloc_usable_size_r+0xe>
   188ce:	580b      	ldr	r3, [r1, r0]
   188d0:	18c0      	adds	r0, r0, r3
   188d2:	4770      	bx	lr

000188d4 <mmc_trans_multipliers>:
   188d4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   188e4:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   188f4:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   18904:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00018914 <sd_mmc_trans_units>:
   18914:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00018930 <sd_trans_multipliers>:
   18930:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   18940:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   18950:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   18960:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00018970 <__FUNCTION__.14666>:
   18970:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   18980:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   18990:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   189a0:	746c 6320 646d 0000 baac 0000 ba7c 0000     lt cmd......|...
   189b0:	ba74 0000 ba8c 0000 ba84 0000 baa4 0000     t...............
   189c0:	ba94 0000 ba9c 0000                         ........

000189c8 <__FUNCTION__.13113>:
   189c8:	6968 5f66 6573 646e 0000 0000               hif_send....

000189d4 <__FUNCTION__.13123>:
   189d4:	6968 5f66 7369 0072                         hif_isr.

000189dc <__FUNCTION__.13132>:
   189dc:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000189ec <__FUNCTION__.13144>:
   189ec:	6968 5f66 6572 6563 7669 0065               hif_receive.

000189f8 <__FUNCTION__.13160>:
   189f8:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   18a08:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
   18a18:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
   18a28:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
   18a38:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
   18a48:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
   18a58:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
   18a68:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
   18a78:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
   18a88:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
   18a98:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
   18aa8:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   18ab8:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
   18ac8:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   18ad8:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
   18ae8:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   18af8:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   18b08:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   18b18:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   18b28:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
   18b38:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
   18b48:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   18b58:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   18b68:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   18b78:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
   18b88:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   18b98:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   18ba8:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   18bb8:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
   18bc8:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   18bd8:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   18be8:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   18bf8:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   18c08:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
   18c18:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   18c28:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   18c38:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   18c48:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   18c58:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   18c68:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   18c78:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   18c88:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   18c98:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
   18ca8:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
   18cb8:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
   18cc8:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
   18cd8:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

00018ce8 <__FUNCTION__.13095>:
   18ce8:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00018cf4 <__FUNCTION__.13124>:
   18cf4:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00018d04 <__FUNCTION__.13155>:
   18d04:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   18d14:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
   18d24:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
   18d34:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
   18d44:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
   18d54:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
   18d64:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
   18d74:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
   18d84:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
   18d94:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   18da4:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   18db4:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   18dc4:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   18dd4:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
   18de4:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
   18df4:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
   18e04:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
   18e14:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
   18e24:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
   18e34:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
   18e44:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
   18e54:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
   18e64:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
   18e74:	3032 303a 3a37 3832 0000 0000 7041 2072     20:07:28....Apr 
   18e84:	3232 3220 3130 0039 7244 7669 7265 6220     22 2019.Driver b
   18e94:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
   18ea4:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
   18eb4:	2065 6556 7372 6f69 006e 0000               e Version...

00018ec0 <__FUNCTION__.12952>:
   18ec0:	6863 7069 775f 6b61 0065 0000               chip_wake...

00018ecc <__FUNCTION__.13001>:
   18ecc:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
   18edc:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
   18eec:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
   18efc:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
   18f0c:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
   18f1c:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
   18f2c:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

00018f3c <__FUNCTION__.12999>:
   18f3c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00018f48 <__FUNCTION__.13006>:
   18f48:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
   18f58:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
   18f68:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
   18f78:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
   18f88:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
   18f98:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
   18fa8:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
   18fb8:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
   18fc8:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
   18fd8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   18fe8:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
   18ff8:	4920 2044 6c25 0a78 0000 0000 ca8c 0000      ID %lx.........
   19008:	ca8c 0000 cabc 0000 ca3e 0000 ca62 0000     ........>...b...
   19018:	ca70 0000 caa2 0000 caa2 0000 caea 0000     p...............
   19028:	ca22 0000 cb24 0000 cb24 0000 cb24 0000     "...$...$...$...
   19038:	cb24 0000 ca7e 0000 c9c3 cac4               $...~.......

00019044 <__FUNCTION__.12268>:
   19044:	7073 5f69 6d63 0064                         spi_cmd.

0001904c <__FUNCTION__.12275>:
   1904c:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0001905c <__FUNCTION__.12284>:
   1905c:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00019068 <__FUNCTION__.12300>:
   19068:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

00019078 <__FUNCTION__.12315>:
   19078:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00019088 <__FUNCTION__.12327>:
   19088:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00019098 <__FUNCTION__.12338>:
   19098:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

000190a8 <__FUNCTION__.12350>:
   190a8:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000190b8 <__FUNCTION__.12363>:
   190b8:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000190c4 <__FUNCTION__.12384>:
   190c4:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

000190d0 <crc7_syndrome_table>:
   190d0:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   190e0:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   190f0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   19100:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   19110:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   19120:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   19130:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   19140:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   19150:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   19160:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   19170:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   19180:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   19190:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   191a0:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   191b0:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   191c0:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   191d0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   191e0:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   191f0:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
   19200:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
   19210:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
   19220:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19230:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
   19240:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
   19250:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   19260:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   19270:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
   19280:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   19290:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   192a0:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   192b0:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
   192c0:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
   192d0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   192e0:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   192f0:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
   19300:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
   19310:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   19320:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
   19330:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   19340:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
   19350:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19360:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
   19370:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
   19380:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
   19390:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
   193a0:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
   193b0:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
   193c0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   193d0:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   193e0:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
   193f0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19400:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   19410:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   19420:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19430:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   19440:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   19450:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
   19460:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
   19470:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
   19480:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   19490:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
   194a0:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
   194b0:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
   194c0:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
   194d0:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   194e0:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   194f0:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
   19500:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   19510:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
   19520:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
   19530:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   19540:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   19550:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   19560:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
   19570:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   19580:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   19590:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   195a0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   195b0:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   195c0:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
   195d0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   195e0:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
   195f0:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
   19600:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   19610:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
   19620:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
   19630:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   19640:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
   19650:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
   19660:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   19670:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
   19680:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   19690:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   196a0:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   196b0:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
   196c0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   196d0:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
   196e0:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
   196f0:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
   19700:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   19710:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
   19720:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
   19730:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
   19740:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   19750:	206e 4449 3d20 2520 0d64 000a e4e8 0000     n ID = %d.......
   19760:	e4e8 0000 e4c4 0000 e4e8 0000 e4c4 0000     ................
   19770:	e4aa 0000 e4aa 0000 e4e8 0000 e4e8 0000     ................
   19780:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   19790:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   197a0:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   197b0:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   197c0:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   197d0:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   197e0:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   197f0:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   19800:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   19810:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   19820:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   19830:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   19840:	e4e8 0000 e4e8 0000 e4e8 0000 e4e8 0000     ................
   19850:	e4e8 0000 e4e8 0000 e4e8 0000 e4c4 0000     ................
   19860:	e4c4 0000 e4cc 0000 e4cc 0000 e4cc 0000     ................
   19870:	e4cc 0000 0800 4200 0c00 4200 1000 4200     .......B...B...B
   19880:	1400 4200 1800 4200 1c00 4200 f922 0000     ...B...B...B"...
   19890:	f91e 0000 f91e 0000 f984 0000 f984 0000     ................
   198a0:	f936 0000 f928 0000 f93c 0000 f972 0000     6...(...<...r...
   198b0:	fb44 0000 fb24 0000 fb24 0000 fbb0 0000     D...$...$.......
   198c0:	fb36 0000 fb52 0000 fb28 0000 fb60 0000     6...R...(...`...
   198d0:	fba0 0000                                   ....

000198d4 <_tcc_apbcmasks>:
   198d4:	0100 0000 0200 0000 0400 0000               ............

000198e0 <_tcc_cc_nums>:
   198e0:	0204 0002                                   ....

000198e4 <_tcc_gclk_ids>:
   198e4:	1a1a 001b                                   ....

000198e8 <_tcc_maxs>:
   198e8:	ffff 00ff ffff 00ff ffff 0000               ............

000198f4 <_tcc_ow_nums>:
   198f4:	0408 0002                                   ....

000198f8 <_tcc_intflag>:
   198f8:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   19908:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   19918:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00019928 <tcc_interrupt_vectors.12458>:
   19928:	100f 0011                                   ....

0001992c <LfnOfs>:
   1992c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0001993c <excvt.4558>:
   1993c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   1994c:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   1995c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   1996c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   1997c:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   1998c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   1999c:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   199ac:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
   199bc:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   199cc:	5d5b 0000                                   []..

000199d0 <Tbl>:
   199d0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   199e0:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   199f0:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   19a00:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   19a10:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   19a20:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   19a30:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   19a40:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   19a50:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   19a60:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   19a70:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   19a80:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   19a90:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   19aa0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   19ab0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   19ac0:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00019ad0 <tbl_lower.4308>:
   19ad0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   19ae0:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   19af0:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   19b00:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   19b10:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   19b20:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   19b30:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   19b40:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   19b50:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   19b60:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   19b70:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   19b80:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   19b90:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   19ba0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   19bb0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   19bc0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   19bd0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   19be0:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   19bf0:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   19c00:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   19c10:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   19c20:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   19c30:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   19c40:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   19c50:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   19c60:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   19c70:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   19c80:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   19c90:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   19ca0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00019cb0 <tbl_upper.4309>:
   19cb0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   19cc0:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   19cd0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   19ce0:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   19cf0:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   19d00:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   19d10:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   19d20:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   19d30:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   19d40:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   19d50:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   19d60:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   19d70:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   19d80:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   19d90:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   19da0:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   19db0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   19dc0:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   19dd0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   19de0:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   19df0:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   19e00:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   19e10:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   19e20:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   19e30:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   19e40:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   19e50:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   19e60:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   19e70:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   19e80:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   19e90:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   19ea8:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   19ee8:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   19f00:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   19f40:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   19f50:	6568 706c 0000 0000 0a0d 7641 6961 616c     help......Availa
   19f60:	6c62 2065 6f43 6d6d 6e61 7364 0d3a 0000     ble Commands:...
   19f70:	6576 5f72 6c62 2d20 6220 6f6f 6c74 616f     ver_bl - bootloa
   19f80:	6564 2072 6576 7372 6f69 0d6e 0000 0000     der version.....
   19f90:	6576 5f72 7061 2070 202d 7041 6c70 6369     ver_app - Applic
   19fa0:	7461 6f69 206e 6f63 6564 7620 7265 6973     ation code versi
   19fb0:	6e6f 000d 616d 2063 202d 616d 2063 6461     on..mac - mac ad
   19fc0:	7264 7365 0d73 0000 7069 2d20 6920 2070     dress...ip - ip 
   19fd0:	6461 7264 7365 0d73 0000 0000 6564 4e76     address.....devN
   19fe0:	6d61 2065 202d 6564 6576 6f6c 2072 616e     ame - develor na
   19ff0:	656d 000d 6573 4474 7665 6369 4e65 6d61     me..setDeviceNam
   1a000:	2065 733c 7274 6e69 2067 616e 656d 203e     e <string name> 
   1a010:	202d 6544 6976 6563 4e20 6d61 2065 6573     - Device Name se
   1a020:	0d74 0000 6567 4474 7665 6369 4e65 6d61     t...getDeviceNam
   1a030:	2065 202d 6547 2074 6544 6976 6563 4e20     e - Get Device N
   1a040:	6d61 0d65 0000 0000 6576 5f72 6c62 0000     ame.....ver_bl..
   1a050:	6f42 746f 6f6c 6461 7265 4620 7269 776d     Bootloader Firmw
   1a060:	7261 2065 6576 7372 6f69 3a6e 2520 2e64     are version: %d.
   1a070:	6425 252e 2064 0a0d 0000 0000 6576 5f72     %d.%d ......ver_
   1a080:	7061 0070 6f43 6564 4620 7269 776d 7261     app.Code Firmwar
   1a090:	2065 6576 7372 6f69 3a6e 2520 2e64 6425     e version: %d.%d
   1a0a0:	252e 2064 0a0d 0000 616d 0063 614d 2063     .%d ....mac.Mac 
   1a0b0:	6441 7264 7365 3a73 4620 2d38 3046 302d     Address: F8-F0-0
   1a0c0:	2d35 3346 462d 2d39 4539 000d 7069 0000     5-F3-F9-9E..ip..
   1a0d0:	5049 4120 6464 6572 7373 203a 000d 0000     IP Address: ....
   1a0e0:	6564 4e76 6d61 0065 614e 656d 203a 4544     devName.Name: DE
   1a0f0:	4f4c 2053 4e49 2e43 000d 0000 6573 4474     LOS INC.....setD
   1a100:	7665 6369 4e65 6d61 0065 0000 6544 6976     eviceName...Devi
   1a110:	6563 6e20 6d61 2065 6573 2074 6f74 2520     ce name set to %
   1a120:	0d73 000a 6567 4474 7665 6369 4e65 6d61     s...getDeviceNam
   1a130:	0065 0000 6544 6976 6563 6e20 6d61 2065     e...Device name 
   1a140:	7369 2520 0d73 000a 5245 4f52 2052 203e     is %s...ERROR > 
   1a150:	6572 7274 0d79 0000 4df6 0001 4df0 0001     retry....M...M..
   1a160:	4dea 0001 4de4 0001 4dfc 0001 4e04 0001     .M...M...M...N..
   1a170:	4dfc 0001 4dde 0001 4dd8 0001 4dfc 0001     .M...M...M...M..
   1a180:	4dd2 0001 4dd2 0001 4dcc 0001 4dc6 0001     .M...M...M...M..
   1a190:	4e04 0001 4e6e 0001 4e68 0001 4e62 0001     .N..nN..hN..bN..
   1a1a0:	4e5c 0001 4e74 0001 4e7c 0001 4e74 0001     \N..tN..|N..tN..
   1a1b0:	4e56 0001 4e50 0001 4e74 0001 4e4a 0001     VN..PN..tN..JN..
   1a1c0:	4e4a 0001 4e44 0001 4e3e 0001 4e7c 0001     JN..DN..>N..|N..
   1a1d0:	4ee8 0001 4ee2 0001 4edc 0001 4ed6 0001     .N...N...N...N..
   1a1e0:	4eee 0001 4eee 0001 4eee 0001 4ed0 0001     .N...N...N...N..
   1a1f0:	4eca 0001 4eee 0001 4ec4 0001 4ec4 0001     .N...N...N...N..
   1a200:	4ebe 0001 4eb8 0001 3130 3332 3534 3736     .N...N..01234567
   1a210:	3938 6261 6463 6665 0d31 0000 7254 6e61     89abcdef1...Tran
   1a220:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   1a230:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   1a240:	5448 5054 002f 0000 4547 2054 0000 0000     HTTP/...GET ....
   1a250:	4f50 5453 0020 0000 4544 454c 4554 0020     POST ...DELETE .
   1a260:	5550 2054 0000 0000 504f 4954 4e4f 2053     PUT ....OPTIONS 
   1a270:	0000 0000 4548 4441 0020 0000 4820 5454     ....HEAD ... HTT
   1a280:	2f50 2e31 0d31 000a 7355 7265 412d 6567     P/1.1...User-Age
   1a290:	746e 203a 0000 0000 6f48 7473 203a 0000     nt: ....Host: ..
   1a2a0:	6f43 6e6e 6365 6974 6e6f 203a 654b 7065     Connection: Keep
   1a2b0:	412d 696c 6576 0a0d 0000 0000 6341 6563     -Alive......Acce
   1a2c0:	7470 452d 636e 646f 6e69 3a67 0d20 000a     pt-Encoding: ...
   1a2d0:	6341 6563 7470 432d 6168 7372 7465 203a     Accept-Charset: 
   1a2e0:	7475 2d66 0d38 000a 7254 6e61 6673 7265     utf-8...Transfer
   1a2f0:	452d 636e 646f 6e69 3a67 6320 7568 6b6e     -Encoding: chunk
   1a300:	6465 0a0d 0000 0000 7525 0000 6f43 746e     ed......%u..Cont
   1a310:	6e65 2d74 654c 676e 6874 203a 0000 0000     ent-Length: ....
   1a320:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   1a330:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   1a340:	2000 4200 2400 4200 2800 4200 57b8 0001     . .B.$.B.(.B.W..
   1a350:	57c0 0001 57ce 0001 5806 0001 581c 0001     .W...W...X...X..
   1a360:	0a0d 2520 2a2e 0073 3e20 203e 0000 0000     .. %.*s. >> ....
   1a370:	2e25 732a 0000 0000 5453 5241 0054 0000     %.*s....START...
   1a380:	200a 6f43 6b6f 6e69 2067 7473 7261 6574     . Cooking starte
   1a390:	0064 0000 200a 6f43 6b6f 6e69 2067 7473     d.... Cooking st
   1a3a0:	706f 6570 0064 0000 4e4b 424f 0000 0000     opped...KNOB....
   1a3b0:	200a 6e4b 626f 6c20 7665 6c65 7320 7465     . Knob level set
   1a3c0:	7420 3a6f 6425 0000 4954 454d 0000 0000      to:%d..TIME....
   1a3d0:	200a 6954 656d 6c20 7665 6c65 7320 7465     . Time level set
   1a3e0:	7420 3a6f 6425 0000 544f 4641 0055 0000      to:%d..OTAFU...
   1a3f0:	4f0a 4154 5546 5220 7165 6575 7473 6465     .OTAFU Requested
   1a400:	0000 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   1a410:	6163 6c6c 6162 6b63 203a 5448 5054 6320     callback: HTTP c
   1a420:	696c 6e65 2074 6f73 6b63 7465 6320 6e6f     lient socket con
   1a430:	656e 7463 6465 0d2e 0000 0000 7468 7074     nected......http
   1a440:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   1a450:	203a 6572 7571 7365 2074 6f63 706d 656c     : request comple
   1a460:	6574 2e64 000d 0000 7468 7074 635f 696c     ted.....http_cli
   1a470:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   1a480:	6563 7669 6465 7220 7365 6f70 736e 2065     ceived response 
   1a490:	7525 6420 7461 2061 6973 657a 2520 0d75     %u data size %u.
   1a4a0:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   1a4b0:	6163 6c6c 6162 6b63 203a 6964 6373 6e6f     callback: discon
   1a4c0:	656e 7463 6f69 206e 6572 7361 6e6f 253a     nection reason:%
   1a4d0:	0d64 000a 0a0d 2d2d 4920 544f 5320 414d     d.....-- IOT SMA
   1a4e0:	5452 4b20 4f4e 2042 4f43 544e 4f52 4c4c     RT KNOB CONTROLL
   1a4f0:	5245 2d20 0d2d 2d0a 202d 4544 4f4c 2053     ER --..-- DELOS 
   1a500:	4e49 2e43 6f20 206e 4153 444d 3132 3147     INC. on SAMD21G1
   1a510:	4138 4d20 5543 2d20 0d2d 2d0a 202d 6f43     8A MCU --..-- Co
   1a520:	706d 6c69 6465 203a 7041 2072 3232 3220     mpiled: Apr 22 2
   1a530:	3130 2039 3332 333a 3a34 3731 2d20 0d2d     019 23:34:17 --.
   1a540:	0000 0000 0a0d 616d 6e69 203a 6e49 7469     ......main: Init
   1a550:	6169 696c 697a 676e 4220 616f 6472 6120     ializing Board a
   1a560:	646e 7020 7265 7069 6568 6172 736c 6620     nd peripherals f
   1a570:	726f 6120 7070 696c 6163 6974 6e6f 2e2e     or application..
   1a580:	2e2e 2e2e 0d20 0d0a 0000 0000 6f63 666e     .... .......conf
   1a590:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   1a5a0:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   1a5b0:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   1a5c0:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   1a5d0:	0000 0000 514d 5454 6920 696e 6974 6c61     ....MQTT initial
   1a5e0:	7a69 7461 6f69 206e 6166 6c69 6465 202e     ization failed. 
   1a5f0:	7245 6f72 2072 6f63 6564 6920 2073 2528     Error code is (%
   1a600:	2964 0a0d 0000 0000 514d 5454 7220 6765     d)......MQTT reg
   1a610:	7369 6574 2072 6163 6c6c 6162 6b63 6620     ister callback f
   1a620:	6961 656c 2e64 4520 7272 726f 6320 646f     ailed. Error cod
   1a630:	2065 7369 2820 6425 0d29 000a 6e69 7469     e is (%d)...init
   1a640:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   1a650:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   1a660:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   1a670:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   1a680:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   1a690:	206c 6166 6c69 6465 0d2e 0000 6e69 7469     l failed....init
   1a6a0:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   1a6b0:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   1a6c0:	7420 6568 6320 7261 2e64 000d 6e69 7469      the card...init
   1a6d0:	735f 6f74 6172 6567 203a 6f6d 6e75 6974     _storage: mounti
   1a6e0:	676e 5320 2044 6163 6472 2e2e 0d2e 0000     ng SD card......
   1a6f0:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
   1a700:	6320 7261 2064 6f6d 6e75 2074 6166 6c69      card mount fail
   1a710:	6465 2021 7228 7365 2520 2964 0a0d 0000     ed! (res %d)....
   1a720:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
   1a730:	6320 7261 2064 6f6d 6e75 2074 4b4f 0d2e      card mount OK..
   1a740:	0000 0000 616d 6e69 203a 326d 5f6d 6977     ....main: m2m_wi
   1a750:	6966 695f 696e 2074 6163 6c6c 6520 7272     fi_init call err
   1a760:	726f 2021 7228 7365 2520 2964 0a0d 0000     or! (res %d)....
   1a770:	0d0a 616d 6e69 203a 3e3e 4220 616f 6472     ..main: >> Board
   1a780:	6120 646e 7020 7265 7069 6568 6172 736c      and peripherals
   1a790:	6920 696e 6974 6c61 7a69 6465 0d0a 0000      initialized....
   1a7a0:	616d 6e69 203a 6f63 6e6e 6365 6974 676e     main: connecting
   1a7b0:	7420 206f 6957 6946 4120 2050 7325 2e2e      to WiFi AP %s..
   1a7c0:	0d2e 000a 6e65 6574 2072 6f63 6d6d 6e61     ....enter comman
   1a7d0:	2064 0d0a 7420 7079 2065 6827 6c65 2770     d .. type 'help'
   1a7e0:	6620 726f 7420 6568 6320 6d6f 616d 646e      for the command
   1a7f0:	6c20 7369 0a74 3e0d 0020 0000 7325 0000      list..> ...%s..
   1a800:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   1a810:	007d 0000 5245 3e52 203e 7953 7473 6369     }...ERR>> Systic
   1a820:	206b 6f63 666e 6769 7275 7461 6f69 206e     k configuration 
   1a830:	7265 6f72 0d72 000a                         error...

0001a838 <main_mqtt_broker>:
   1a838:	316d 2e36 6c63 756f 6d64 7471 2e74 6f63     m16.cloudmqtt.co
   1a848:	006d 0000 0a0d 6f43 6e6e 6365 6974 676e     m.....Connecting
   1a858:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   1a868:	384b 5256 7648 655f 4b79 6e37 0000 0000     K8VRHv_eyK7n....
   1a878:	786d 6463 7069 6879 0000 0000 514d 5454     mxcdipyh....MQTT
   1a888:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   1a898:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   1a8a8:	0d72 0000 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   1a8b8:	6465 7420 206f 7262 6b6f 7265 000d 0000     ed to broker....
   1a8c8:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   1a8d8:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   1a8e8:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   1a8f8:	796c 0d2e 000a 0000 4554 504d 0000 0000     ly......TEMP....
   1a908:	514d 5454 4320 6e6f 656e 7463 6465 000d     MQTT Connected..
   1a918:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   1a928:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   1a938:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   1a948:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   1a958:	6365 6574 0d64 0000 3e3e 4e20 7765 4620     ected...>> New F
   1a968:	7269 776d 7261 2065 6f44 6e77 6f6c 6461     irmware Download
   1a978:	6465 0a20 200d 6544 6976 6563 5220 7365     ed .. Device Res
   1a988:	7465 6e69 2067 2e2e 2e2e 0a20 000d 0000     eting .... .....
   1a998:	746f 6661 5f75 6f64 6e77 6f6c 6461 203a     otafu_download: 
   1a9a8:	6f44 6e77 6f6c 6461 6e69 2067 7075 6164     Downloading upda
   1a9b8:	6574 7620 7265 6973 6e6f 2e20 2e2e 2e2e     te version .....
   1a9c8:	0a20 000d 746f 6661 5f75 6f64 6e77 6f6c      ...otafu_downlo
   1a9d8:	6461 203a 654e 2077 6946 6d72 6177 6572     ad: New Firmware
   1a9e8:	4120 6176 6c69 6261 656c 202c 6576 7372      Available, vers
   1a9f8:	6f69 3a6e 2520 2064 0d0a 0000 6f57 6c75     ion: %d ....Woul
   1aa08:	2064 6f79 2075 696c 656b 7420 206f 6f64     d you like to do
   1aa18:	6e77 6f6c 6461 7420 6568 6e20 7765 7620     wnload the new v
   1aa28:	7265 6973 6e6f 203a 7928 6e2f 2029 203e     ersion: (y/n) > 
   1aa38:	0000 0000 6325 0000 6325 0d0a 0000 0000     ....%c..%c......
   1aa48:	746f 6661 5f75 6f64 6e77 6f6c 6461 203a     otafu_download: 
   1aa58:	3e3e 5220 7365 6d75 6e69 2067 7061 6c70     >> Resuming appl
   1aa68:	6369 7461 6f69 0a6e 000d 0000 746f 6661     ication.....otaf
   1aa78:	5f75 6f64 6e77 6f6c 6461 203a 7461 6574     u_download: atte
   1aa88:	706d 2074 255b 5d64 3e20 4420 776f 6c6e     mpt [%d] > Downl
   1aa98:	616f 6964 676e 6620 6961 656c 2c64 7420     oading failed, t
   1aaa8:	7972 6e69 2067 6761 6961 206e 0d0a 0000     rying again ....
   1aab8:	746f 6661 5f75 6f64 6e77 6f6c 6461 203a     otafu_download: 
   1aac8:	3e3e 4420 776f 6c6e 616f 6964 676e 6620     >> Downloading f
   1aad8:	6961 656c 2064 7665 6e65 6120 7466 7265     ailed even after
   1aae8:	6d20 6c75 6974 6c70 2065 7461 6574 706d      multiple attemp
   1aaf8:	7374 0d0a 0000 0000 746f 6661 5f75 6f64     ts......otafu_do
   1ab08:	6e77 6f6c 6461 203a 3e3e 5220 7365 6d75     wnload: >> Resum
   1ab18:	6e69 2067 7061 6c70 6369 7461 6f69 206e     ing application 
   1ab28:	6f66 2072 6f6e 0a77 000d 0000 6e69 6176     for now.....inva
   1ab38:	696c 2064 6572 7073 6e6f 6573 202c 6c70     lid response, pl
   1ab48:	6165 6573 7420 7972 6120 6167 6e69 0d0a     ease try again..
   1ab58:	0000 0000 7468 7074 3a73 2f2f 7777 2e77     ....https://www.
   1ab68:	6573 7361 752e 6570 6e6e 652e 7564 7e2f     seas.upenn.edu/~
   1ab78:	6774 6568 6164 6f6f 562f 7265 6973 6e6f     tghedaoo/Version
   1ab88:	742e 7478 0000 0000 7468 7074 3a73 2f2f     .txt....https://
   1ab98:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   1aba8:	7564 7e2f 6774 6568 6164 6f6f 462f 7269     du/~tghedaoo/Fir
   1abb8:	776d 7261 2e65 6962 006e 0000 7468 7074     mware.bin...http
   1abc8:	3a73 2f2f 7777 2e77 6573 7361 752e 6570     s://www.seas.upe
   1abd8:	6e6e 652e 7564 7e2f 6774 6568 6164 6f6f     nn.edu/~tghedaoo
   1abe8:	432f 6372 742e 7478 0000 0000 746f 6661     /Crc.txt....otaf
   1abf8:	5f75 6966 6d72 6177 6572 645f 776f 6c6e     u_firmware_downl
   1ac08:	616f 3a64 4420 776f 6c6e 616f 6964 676e     oad: Downloading
   1ac18:	6e20 7765 6620 7269 776d 7261 2065 2e2e      new firmware ..
   1ac28:	2e2e 2e2e 0a20 000d 6473 6f20 6570 6172     .... ...sd opera
   1ac38:	6974 6e6f 203a 3e3e 4f20 6570 696e 676e     tion: >> Opening
   1ac48:	6120 6620 6c69 2065 6166 6c69 6465 0d0a      a file failed..
   1ac58:	0000 0000 6473 6f20 6570 6172 6974 6e6f     ....sd operation
   1ac68:	203a 3e3e 4620 6c69 2065 706f 6e65 7320     : >> File open s
   1ac78:	6375 6563 7373 0d0a 0000 0000 5243 5f43     uccess......CRC_
   1ac88:	4f44 4e57 3d20 2520 0a75 000d 5243 5f43     DOWN = %u...CRC_
   1ac98:	4553 5652 5245 3d20 2520 0a75 000d 0000     SERVER = %u.....
   1aca8:	3025 6433 0000 0000 6572 6f73 766c 5f65     %03d....resolve_
   1acb8:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   1acc8:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   1acd8:	0a0d 0a0d 0000 0000 7473 7261 5f74 6f64     ........start_do
   1ace8:	6e77 6f6c 6461 203a 4d4d 2043 7473 726f     wnload: MMC stor
   1acf8:	6761 2065 6f6e 2074 6572 6461 2e79 000d     age not ready...
   1ad08:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   1ad18:	6957 462d 2069 7369 6e20 746f 6320 6e6f     Wi-Fi is not con
   1ad28:	656e 7463 6465 0d2e 0000 0000 7473 7261     nected......star
   1ad38:	5f74 6f64 6e77 6f6c 6461 203a 6572 7571     t_download: requ
   1ad48:	7365 2074 7369 7320 6e65 2074 6c61 6572     est is sent alre
   1ad58:	6461 2e79 000d 0000 7473 7261 5f74 6f64     ady.....start_do
   1ad68:	6e77 6f6c 6461 203a 7572 6e6e 6e69 2067     wnload: running 
   1ad78:	6f64 6e77 6f6c 6461 6120 726c 6165 7964     download already
   1ad88:	0d2e 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   1ad98:	6461 203a 6573 646e 6e69 2067 5448 5054     ad: sending HTTP
   1ada8:	7220 7165 6575 7473 2e2e 0d2e 0000 0000      request........
   1adb8:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1adc8:	3a74 6520 706d 7974 6420 7461 2e61 000d     t: empty data...
   1add8:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   1ade8:	3a74 6320 6572 7461 6e69 2067 6966 656c     t: creating file
   1adf8:	5b20 7325 0d5d 000a 7473 726f 5f65 6966      [%s]...store_fi
   1ae08:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   1ae18:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   1ae28:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   1ae38:	6465 0d2e 0000 0000 7473 726f 5f65 6966     ed......store_fi
   1ae48:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   1ae58:	7263 6165 6974 6e6f 6520 7272 726f 2021     creation error! 
   1ae68:	6572 3a74 6425 0a0d 0000 0000 7473 726f     ret:%d......stor
   1ae78:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   1ae88:	6c69 2065 7277 7469 2065 7265 6f72 2c72     ile write error,
   1ae98:	6420 776f 6c6e 616f 2064 6163 636e 6c65      download cancel
   1aea8:	6465 0d2e 0000 0000 7473 726f 5f65 6966     ed......store_fi
   1aeb8:	656c 705f 6361 656b 3a74 7220 6365 6965     le_packet: recei
   1aec8:	6576 5b64 6c25 5d75 202c 6966 656c 7320     ved[%lu], file s
   1aed8:	7a69 5b65 6c25 5d75 0a0d 0000 7473 726f     ize[%lu]....stor
   1aee8:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   1aef8:	6c69 2065 6f64 6e77 6f6c 6461 6465 7320     ile downloaded s
   1af08:	6375 6563 7373 7566 6c6c 2e79 000d 0000     uccessfully.....
   1af18:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   1af28:	5f49 4f43 4e4e 4345 4554 0d44 0000 0000     I_CONNECTED.....
   1af38:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   1af48:	5f49 4944 4353 4e4f 454e 5443 4445 000d     I_DISCONNECTED..
   1af58:	6570 6e6e 3731 3034 6977 6966 0000 0000     penn1740wifi....
   1af68:	6941 5072 6e65 4e6e 7465 442d 7665 6369     AirPennNet-Devic
   1af78:	0065 0000 6977 6966 635f 3a62 4920 2050     e...wifi_cb: IP 
   1af88:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   1af98:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   1afa8:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   1afb8:	514d 5454 4220 6f72 656b 2172 000d 0000     MQTT Broker!....

0001afc8 <_global_impure_ptr>:
   1afc8:	0170 2000                                   p.. 

0001afcc <__sf_fake_stderr>:
	...

0001afec <__sf_fake_stdin>:
	...

0001b00c <__sf_fake_stdout>:
	...
   1b02c:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   1b03c:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   1b04c:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   1b05c:	3534 3736 3938 6261 6463 6665 0000 0000     456789abcdef....
   1b06c:	b08a 0001 b08d 0001 b090 0001 2d41 6146     ............A-Fa
   1b07c:	662d 3938 3130 3332 3534 3736 005d 2d2b     -f8901234567].+-
   1b08c:	3000 0030 5878 0000                              .00.xX.

0001b093 <_ctype_>:
   1b093:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   1b0a3:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1b0b3:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   1b0c3:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   1b0d3:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   1b0e3:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   1b0f3:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   1b103:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   1b113:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0001b194 <_init>:
   1b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b196:	46c0      	nop			; (mov r8, r8)
   1b198:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b19a:	bc08      	pop	{r3}
   1b19c:	469e      	mov	lr, r3
   1b19e:	4770      	bx	lr

0001b1a0 <__init_array_start>:
   1b1a0:	00009cdd 	.word	0x00009cdd

0001b1a4 <_fini>:
   1b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1a6:	46c0      	nop			; (mov r8, r8)
   1b1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1b1aa:	bc08      	pop	{r3}
   1b1ac:	469e      	mov	lr, r3
   1b1ae:	4770      	bx	lr

0001b1b0 <__fini_array_start>:
   1b1b0:	00009cb5 	.word	0x00009cb5
