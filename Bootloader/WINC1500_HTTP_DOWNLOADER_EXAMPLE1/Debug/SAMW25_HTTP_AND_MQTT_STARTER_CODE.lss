
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000433c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  0000433c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000498  20000074  000043b0  00020074  2**2
                  ALLOC
  3 .stack        00002004  2000050c  00004848  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00044930  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006601  00000000  00000000  00064a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001073f  00000000  00000000  0006b026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b18  00000000  00000000  0007b765  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001128  00000000  00000000  0007c27d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001fb9e  00000000  00000000  0007d3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000155f7  00000000  00000000  0009cf43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000989cd  00000000  00000000  000b253a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000259c  00000000  00000000  0014af08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	10 25 00 20 4d 28 00 00 49 28 00 00 49 28 00 00     .%. M(..I(..I(..
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	49 28 00 00 00 00 00 00 00 00 00 00 49 28 00 00     I(..........I(..
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	31 2a 00 00 49 28 00 00 49 28 00 00 49 28 00 00     1*..I(..I(..I(..
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	6d 0f 00 00 e9 0d 00 00 49 28 00 00 49 28 00 00     m.......I(..I(..
			time.hour = 12;
      5c:	49 28 00 00 49 28 00 00 95 13 00 00 a5 13 00 00     I(..I(..........
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	b5 13 00 00 c5 13 00 00 d5 13 00 00 e5 13 00 00     ................
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	49 28 00 00 49 28 00 00 49 28 00 00 49 28 00 00     I(..I(..I(..I(..

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	49 28 00 00 49 28 00 00 00 00 00 00 00 00 00 00     I(..I(..........
		if (time.pm == 1) {
      9c:	49 28 00 00 49 28 00 00 49 28 00 00 49 28 00 00     I(..I(..I(..I(..
			time.pm = 0;
      ac:	49 28 00 00 00 00 00 00                             I(......

000000b4 <__do_global_dtors_aux>:
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
			if (alarm.time.pm == 1) {
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
			} else if (alarm.time.hour == 12) {
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
		module->clock_24h = true;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
		} else if (time.hour == 12) {
      ce:	bd10      	pop	{r4, pc}
      d0:	20000074 	.word	0x20000074
      d4:	00000000 	.word	0x00000000
			time.hour = 0;
      d8:	0000433c 	.word	0x0000433c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
				alarm.time.hour = alarm.time.hour + 12;
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
				alarm.time.pm = 0;
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
				module->clock_24h = true;
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000078 	.word	0x20000078
     108:	0000433c 	.word	0x0000433c
     10c:	0000433c 	.word	0x0000433c
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b06      	ldr	r3, [pc, #24]	; (130 <sd_mmc_configure_slot+0x1c>)
     118:	6819      	ldr	r1, [r3, #0]
     11a:	7f8b      	ldrb	r3, [r1, #30]
     11c:	1e5a      	subs	r2, r3, #1
     11e:	4193      	sbcs	r3, r2
     120:	b2db      	uxtb	r3, r3
     122:	7b4a      	ldrb	r2, [r1, #13]
     124:	6809      	ldr	r1, [r1, #0]
     126:	4803      	ldr	r0, [pc, #12]	; (134 <sd_mmc_configure_slot+0x20>)
     128:	7800      	ldrb	r0, [r0, #0]
     12a:	4c03      	ldr	r4, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     12e:	bd10      	pop	{r4, pc}
     130:	20000090 	.word	0x20000090
     134:	200000b4 	.word	0x200000b4
     138:	00000965 	.word	0x00000965

0000013c <sd_mmc_select_slot>:
{
     13c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     13e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     140:	2800      	cmp	r0, #0
     142:	d001      	beq.n	148 <sd_mmc_select_slot+0xc>
}
     144:	0018      	movs	r0, r3
     146:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     148:	4b0e      	ldr	r3, [pc, #56]	; (184 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     14a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     14c:	3b03      	subs	r3, #3
     14e:	2b01      	cmp	r3, #1
     150:	d90d      	bls.n	16e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     152:	2200      	movs	r2, #0
     154:	4b0c      	ldr	r3, [pc, #48]	; (188 <sd_mmc_select_slot+0x4c>)
     156:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     158:	4c0a      	ldr	r4, [pc, #40]	; (184 <sd_mmc_select_slot+0x48>)
     15a:	4b0c      	ldr	r3, [pc, #48]	; (18c <sd_mmc_select_slot+0x50>)
     15c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     15e:	4b0c      	ldr	r3, [pc, #48]	; (190 <sd_mmc_select_slot+0x54>)
     160:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     162:	7aa3      	ldrb	r3, [r4, #10]
     164:	3b02      	subs	r3, #2
     166:	4258      	negs	r0, r3
     168:	4143      	adcs	r3, r0
     16a:	b2db      	uxtb	r3, r3
     16c:	e7ea      	b.n	144 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     16e:	4b05      	ldr	r3, [pc, #20]	; (184 <sd_mmc_select_slot+0x48>)
     170:	2202      	movs	r2, #2
     172:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     174:	4a07      	ldr	r2, [pc, #28]	; (194 <sd_mmc_select_slot+0x58>)
     176:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     178:	2201      	movs	r2, #1
     17a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     17c:	2200      	movs	r2, #0
     17e:	779a      	strb	r2, [r3, #30]
     180:	e7e7      	b.n	152 <sd_mmc_select_slot+0x16>
     182:	46c0      	nop			; (mov r8, r8)
     184:	20000094 	.word	0x20000094
     188:	200000b4 	.word	0x200000b4
     18c:	20000090 	.word	0x20000090
     190:	00000115 	.word	0x00000115
     194:	00061a80 	.word	0x00061a80

00000198 <sd_mmc_cmd13>:
{
     198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     19a:	4d09      	ldr	r5, [pc, #36]	; (1c0 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     19c:	4f09      	ldr	r7, [pc, #36]	; (1c4 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     19e:	4e0a      	ldr	r6, [pc, #40]	; (1c8 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     1a0:	2100      	movs	r1, #0
     1a2:	480a      	ldr	r0, [pc, #40]	; (1cc <sd_mmc_cmd13+0x34>)
     1a4:	47b8      	blx	r7
     1a6:	1e04      	subs	r4, r0, #0
     1a8:	d007      	beq.n	1ba <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     1aa:	47b0      	blx	r6
     1ac:	23ff      	movs	r3, #255	; 0xff
     1ae:	4203      	tst	r3, r0
     1b0:	d003      	beq.n	1ba <sd_mmc_cmd13+0x22>
     1b2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     1b4:	2d00      	cmp	r5, #0
     1b6:	d1f3      	bne.n	1a0 <sd_mmc_cmd13+0x8>
			return false;
     1b8:	2400      	movs	r4, #0
}
     1ba:	0020      	movs	r0, r4
     1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00030d41 	.word	0x00030d41
     1c4:	00000ba9 	.word	0x00000ba9
     1c8:	00000bc1 	.word	0x00000bc1
     1cc:	00001b0d 	.word	0x00001b0d

000001d0 <sd_mmc_cmd9_spi>:
{
     1d0:	b510      	push	{r4, lr}
     1d2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     1d4:	4b0c      	ldr	r3, [pc, #48]	; (208 <sd_mmc_cmd9_spi+0x38>)
     1d6:	681b      	ldr	r3, [r3, #0]
     1d8:	8919      	ldrh	r1, [r3, #8]
     1da:	0409      	lsls	r1, r1, #16
     1dc:	2301      	movs	r3, #1
     1de:	9300      	str	r3, [sp, #0]
     1e0:	2210      	movs	r2, #16
     1e2:	480a      	ldr	r0, [pc, #40]	; (20c <sd_mmc_cmd9_spi+0x3c>)
     1e4:	4c0a      	ldr	r4, [pc, #40]	; (210 <sd_mmc_cmd9_spi+0x40>)
     1e6:	47a0      	blx	r4
     1e8:	2800      	cmp	r0, #0
     1ea:	d101      	bne.n	1f0 <sd_mmc_cmd9_spi+0x20>
}
     1ec:	b002      	add	sp, #8
     1ee:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     1f0:	4b05      	ldr	r3, [pc, #20]	; (208 <sd_mmc_cmd9_spi+0x38>)
     1f2:	6818      	ldr	r0, [r3, #0]
     1f4:	300e      	adds	r0, #14
     1f6:	2101      	movs	r1, #1
     1f8:	4b06      	ldr	r3, [pc, #24]	; (214 <sd_mmc_cmd9_spi+0x44>)
     1fa:	4798      	blx	r3
     1fc:	2800      	cmp	r0, #0
     1fe:	d0f5      	beq.n	1ec <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     200:	4b05      	ldr	r3, [pc, #20]	; (218 <sd_mmc_cmd9_spi+0x48>)
     202:	4798      	blx	r3
     204:	e7f2      	b.n	1ec <sd_mmc_cmd9_spi+0x1c>
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000090 	.word	0x20000090
     20c:	00081109 	.word	0x00081109
     210:	00000a19 	.word	0x00000a19
     214:	00000c45 	.word	0x00000c45
     218:	00000cd1 	.word	0x00000cd1

0000021c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     21c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     21e:	4b04      	ldr	r3, [pc, #16]	; (230 <sd_mmc_deselect_slot+0x14>)
     220:	781b      	ldrb	r3, [r3, #0]
     222:	2b00      	cmp	r3, #0
     224:	d000      	beq.n	228 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     226:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     228:	2000      	movs	r0, #0
     22a:	4b02      	ldr	r3, [pc, #8]	; (234 <sd_mmc_deselect_slot+0x18>)
     22c:	4798      	blx	r3
}
     22e:	e7fa      	b.n	226 <sd_mmc_deselect_slot+0xa>
     230:	200000b4 	.word	0x200000b4
     234:	000009b9 	.word	0x000009b9

00000238 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     238:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     23a:	2204      	movs	r2, #4
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <sd_mmc_init+0x14>)
     23e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     240:	32fb      	adds	r2, #251	; 0xfb
     242:	4b03      	ldr	r3, [pc, #12]	; (250 <sd_mmc_init+0x18>)
     244:	701a      	strb	r2, [r3, #0]
	driver_init();
     246:	4b03      	ldr	r3, [pc, #12]	; (254 <sd_mmc_init+0x1c>)
     248:	4798      	blx	r3
}
     24a:	bd10      	pop	{r4, pc}
     24c:	20000094 	.word	0x20000094
     250:	200000b4 	.word	0x200000b4
     254:	00000865 	.word	0x00000865

00000258 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	46c6      	mov	lr, r8
     25c:	b500      	push	{lr}
     25e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     260:	4bcb      	ldr	r3, [pc, #812]	; (590 <sd_mmc_check+0x338>)
     262:	4798      	blx	r3
     264:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     266:	2801      	cmp	r0, #1
     268:	d006      	beq.n	278 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     26a:	4bca      	ldr	r3, [pc, #808]	; (594 <sd_mmc_check+0x33c>)
     26c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     26e:	0020      	movs	r0, r4
     270:	b008      	add	sp, #32
     272:	bc04      	pop	{r2}
     274:	4690      	mov	r8, r2
     276:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     278:	4bc7      	ldr	r3, [pc, #796]	; (598 <sd_mmc_check+0x340>)
     27a:	681b      	ldr	r3, [r3, #0]
     27c:	2201      	movs	r2, #1
     27e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     280:	2200      	movs	r2, #0
     282:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     284:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     286:	4bc5      	ldr	r3, [pc, #788]	; (59c <sd_mmc_check+0x344>)
     288:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     28a:	2100      	movs	r1, #0
     28c:	2088      	movs	r0, #136	; 0x88
     28e:	0140      	lsls	r0, r0, #5
     290:	4bc3      	ldr	r3, [pc, #780]	; (5a0 <sd_mmc_check+0x348>)
     292:	4798      	blx	r3
     294:	2800      	cmp	r0, #0
     296:	d107      	bne.n	2a8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     298:	4bbf      	ldr	r3, [pc, #764]	; (598 <sd_mmc_check+0x340>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	2203      	movs	r2, #3
     29e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     2a0:	4bbc      	ldr	r3, [pc, #752]	; (594 <sd_mmc_check+0x33c>)
     2a2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     2a4:	2403      	movs	r4, #3
     2a6:	e7e2      	b.n	26e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     2a8:	21d5      	movs	r1, #213	; 0xd5
     2aa:	0049      	lsls	r1, r1, #1
     2ac:	48bd      	ldr	r0, [pc, #756]	; (5a4 <sd_mmc_check+0x34c>)
     2ae:	4bbc      	ldr	r3, [pc, #752]	; (5a0 <sd_mmc_check+0x348>)
     2b0:	4798      	blx	r3
	*v2 = 0;
     2b2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     2b4:	2800      	cmp	r0, #0
     2b6:	d125      	bne.n	304 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     2b8:	4bb7      	ldr	r3, [pc, #732]	; (598 <sd_mmc_check+0x340>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	7adb      	ldrb	r3, [r3, #11]
     2be:	07db      	lsls	r3, r3, #31
     2c0:	d500      	bpl.n	2c4 <sd_mmc_check+0x6c>
     2c2:	e1eb      	b.n	69c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     2c4:	4bb4      	ldr	r3, [pc, #720]	; (598 <sd_mmc_check+0x340>)
     2c6:	681b      	ldr	r3, [r3, #0]
     2c8:	7ada      	ldrb	r2, [r3, #11]
     2ca:	2309      	movs	r3, #9
     2cc:	4013      	ands	r3, r2
     2ce:	2b01      	cmp	r3, #1
     2d0:	d10f      	bne.n	2f2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     2d2:	2180      	movs	r1, #128	; 0x80
     2d4:	0089      	lsls	r1, r1, #2
     2d6:	48b4      	ldr	r0, [pc, #720]	; (5a8 <sd_mmc_check+0x350>)
     2d8:	4bb1      	ldr	r3, [pc, #708]	; (5a0 <sd_mmc_check+0x348>)
     2da:	4798      	blx	r3
     2dc:	2800      	cmp	r0, #0
     2de:	d0db      	beq.n	298 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     2e0:	4bad      	ldr	r3, [pc, #692]	; (598 <sd_mmc_check+0x340>)
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	7adb      	ldrb	r3, [r3, #11]
     2e6:	07db      	lsls	r3, r3, #31
     2e8:	d503      	bpl.n	2f2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     2ea:	4bb0      	ldr	r3, [pc, #704]	; (5ac <sd_mmc_check+0x354>)
     2ec:	4798      	blx	r3
     2ee:	2800      	cmp	r0, #0
     2f0:	d0d2      	beq.n	298 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     2f2:	4baf      	ldr	r3, [pc, #700]	; (5b0 <sd_mmc_check+0x358>)
     2f4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     2f6:	4ba8      	ldr	r3, [pc, #672]	; (598 <sd_mmc_check+0x340>)
     2f8:	681b      	ldr	r3, [r3, #0]
     2fa:	2200      	movs	r2, #0
     2fc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     2fe:	4ba5      	ldr	r3, [pc, #660]	; (594 <sd_mmc_check+0x33c>)
     300:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     302:	e7b4      	b.n	26e <sd_mmc_check+0x16>
	resp = driver_get_response();
     304:	4bab      	ldr	r3, [pc, #684]	; (5b4 <sd_mmc_check+0x35c>)
     306:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     308:	1c43      	adds	r3, r0, #1
     30a:	d100      	bne.n	30e <sd_mmc_check+0xb6>
     30c:	e1c4      	b.n	698 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     30e:	0500      	lsls	r0, r0, #20
     310:	0d00      	lsrs	r0, r0, #20
     312:	23d5      	movs	r3, #213	; 0xd5
     314:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     316:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     318:	4298      	cmp	r0, r3
     31a:	d1bd      	bne.n	298 <sd_mmc_check+0x40>
     31c:	e7cc      	b.n	2b8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     31e:	2100      	movs	r1, #0
     320:	48a5      	ldr	r0, [pc, #660]	; (5b8 <sd_mmc_check+0x360>)
     322:	4b9f      	ldr	r3, [pc, #636]	; (5a0 <sd_mmc_check+0x348>)
     324:	4798      	blx	r3
     326:	2800      	cmp	r0, #0
     328:	d119      	bne.n	35e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     32a:	4b9b      	ldr	r3, [pc, #620]	; (598 <sd_mmc_check+0x340>)
     32c:	681b      	ldr	r3, [r3, #0]
     32e:	2202      	movs	r2, #2
     330:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     332:	2100      	movs	r1, #0
     334:	2088      	movs	r0, #136	; 0x88
     336:	0140      	lsls	r0, r0, #5
     338:	4b99      	ldr	r3, [pc, #612]	; (5a0 <sd_mmc_check+0x348>)
     33a:	4798      	blx	r3
     33c:	2800      	cmp	r0, #0
     33e:	d0ab      	beq.n	298 <sd_mmc_check+0x40>
     340:	4d9e      	ldr	r5, [pc, #632]	; (5bc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     342:	4f97      	ldr	r7, [pc, #604]	; (5a0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     344:	4e9b      	ldr	r6, [pc, #620]	; (5b4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     346:	2100      	movs	r1, #0
     348:	489d      	ldr	r0, [pc, #628]	; (5c0 <sd_mmc_check+0x368>)
     34a:	47b8      	blx	r7
     34c:	2800      	cmp	r0, #0
     34e:	d0a3      	beq.n	298 <sd_mmc_check+0x40>
		resp = driver_get_response();
     350:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     352:	07c3      	lsls	r3, r0, #31
     354:	d57d      	bpl.n	452 <sd_mmc_check+0x1fa>
     356:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     358:	2d00      	cmp	r5, #0
     35a:	d1f4      	bne.n	346 <sd_mmc_check+0xee>
     35c:	e79c      	b.n	298 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     35e:	4b95      	ldr	r3, [pc, #596]	; (5b4 <sd_mmc_check+0x35c>)
     360:	4798      	blx	r3
     362:	0043      	lsls	r3, r0, #1
     364:	d505      	bpl.n	372 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     366:	4b8c      	ldr	r3, [pc, #560]	; (598 <sd_mmc_check+0x340>)
     368:	681a      	ldr	r2, [r3, #0]
     36a:	7ad3      	ldrb	r3, [r2, #11]
     36c:	2108      	movs	r1, #8
     36e:	430b      	orrs	r3, r1
     370:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     372:	2100      	movs	r1, #0
     374:	4893      	ldr	r0, [pc, #588]	; (5c4 <sd_mmc_check+0x36c>)
     376:	4b8a      	ldr	r3, [pc, #552]	; (5a0 <sd_mmc_check+0x348>)
     378:	4798      	blx	r3
     37a:	2800      	cmp	r0, #0
     37c:	d08c      	beq.n	298 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     37e:	4b86      	ldr	r3, [pc, #536]	; (598 <sd_mmc_check+0x340>)
     380:	681b      	ldr	r3, [r3, #0]
     382:	7adb      	ldrb	r3, [r3, #11]
     384:	07da      	lsls	r2, r3, #31
     386:	d400      	bmi.n	38a <sd_mmc_check+0x132>
     388:	e1a4      	b.n	6d4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     38a:	4b8f      	ldr	r3, [pc, #572]	; (5c8 <sd_mmc_check+0x370>)
     38c:	4798      	blx	r3
     38e:	2800      	cmp	r0, #0
     390:	d082      	beq.n	298 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     392:	4b81      	ldr	r3, [pc, #516]	; (598 <sd_mmc_check+0x340>)
     394:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     396:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     398:	2107      	movs	r1, #7
     39a:	4019      	ands	r1, r3
     39c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     39e:	488b      	ldr	r0, [pc, #556]	; (5cc <sd_mmc_check+0x374>)
     3a0:	5808      	ldr	r0, [r1, r0]
     3a2:	21fa      	movs	r1, #250	; 0xfa
     3a4:	0089      	lsls	r1, r1, #2
     3a6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     3a8:	065b      	lsls	r3, r3, #25
     3aa:	0f1b      	lsrs	r3, r3, #28
     3ac:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     3ae:	4888      	ldr	r0, [pc, #544]	; (5d0 <sd_mmc_check+0x378>)
     3b0:	581b      	ldr	r3, [r3, r0]
     3b2:	434b      	muls	r3, r1
     3b4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     3b6:	7b93      	ldrb	r3, [r2, #14]
     3b8:	099b      	lsrs	r3, r3, #6
     3ba:	d000      	beq.n	3be <sd_mmc_check+0x166>
     3bc:	e13c      	b.n	638 <sd_mmc_check+0x3e0>
     3be:	7d91      	ldrb	r1, [r2, #22]
     3c0:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     3c2:	7d53      	ldrb	r3, [r2, #21]
     3c4:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3c6:	7d10      	ldrb	r0, [r2, #20]
     3c8:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3ca:	4303      	orrs	r3, r0
     3cc:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     3ce:	7e10      	ldrb	r0, [r2, #24]
     3d0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     3d2:	7dd1      	ldrb	r1, [r2, #23]
     3d4:	0049      	lsls	r1, r1, #1
     3d6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     3d8:	051b      	lsls	r3, r3, #20
     3da:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     3dc:	3301      	adds	r3, #1
     3de:	2107      	movs	r1, #7
     3e0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     3e2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     3e4:	408b      	lsls	r3, r1
     3e6:	7cd0      	ldrb	r0, [r2, #19]
     3e8:	210f      	movs	r1, #15
     3ea:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     3ec:	408b      	lsls	r3, r1
				/ 1024;
     3ee:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     3f0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     3f2:	8911      	ldrh	r1, [r2, #8]
     3f4:	0409      	lsls	r1, r1, #16
     3f6:	4877      	ldr	r0, [pc, #476]	; (5d4 <sd_mmc_check+0x37c>)
     3f8:	4b69      	ldr	r3, [pc, #420]	; (5a0 <sd_mmc_check+0x348>)
     3fa:	4798      	blx	r3
     3fc:	2800      	cmp	r0, #0
     3fe:	d100      	bne.n	402 <sd_mmc_check+0x1aa>
     400:	e74a      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     402:	2301      	movs	r3, #1
     404:	9300      	str	r3, [sp, #0]
     406:	2208      	movs	r2, #8
     408:	2100      	movs	r1, #0
     40a:	4873      	ldr	r0, [pc, #460]	; (5d8 <sd_mmc_check+0x380>)
     40c:	4d73      	ldr	r5, [pc, #460]	; (5dc <sd_mmc_check+0x384>)
     40e:	47a8      	blx	r5
     410:	2800      	cmp	r0, #0
     412:	d100      	bne.n	416 <sd_mmc_check+0x1be>
     414:	e740      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     416:	2101      	movs	r1, #1
     418:	a806      	add	r0, sp, #24
     41a:	4b71      	ldr	r3, [pc, #452]	; (5e0 <sd_mmc_check+0x388>)
     41c:	4798      	blx	r3
     41e:	2800      	cmp	r0, #0
     420:	d100      	bne.n	424 <sd_mmc_check+0x1cc>
     422:	e739      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     424:	4b6f      	ldr	r3, [pc, #444]	; (5e4 <sd_mmc_check+0x38c>)
     426:	4798      	blx	r3
     428:	2800      	cmp	r0, #0
     42a:	d100      	bne.n	42e <sd_mmc_check+0x1d6>
     42c:	e734      	b.n	298 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     42e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     430:	781b      	ldrb	r3, [r3, #0]
     432:	220f      	movs	r2, #15
     434:	4013      	ands	r3, r2
     436:	2b01      	cmp	r3, #1
     438:	d100      	bne.n	43c <sd_mmc_check+0x1e4>
     43a:	e119      	b.n	670 <sd_mmc_check+0x418>
     43c:	2b00      	cmp	r3, #0
     43e:	d100      	bne.n	442 <sd_mmc_check+0x1ea>
     440:	e109      	b.n	656 <sd_mmc_check+0x3fe>
     442:	2b02      	cmp	r3, #2
     444:	d100      	bne.n	448 <sd_mmc_check+0x1f0>
     446:	e118      	b.n	67a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     448:	4b53      	ldr	r3, [pc, #332]	; (598 <sd_mmc_check+0x340>)
     44a:	681b      	ldr	r3, [r3, #0]
     44c:	2210      	movs	r2, #16
     44e:	731a      	strb	r2, [r3, #12]
     450:	e105      	b.n	65e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     452:	2100      	movs	r1, #0
     454:	4858      	ldr	r0, [pc, #352]	; (5b8 <sd_mmc_check+0x360>)
     456:	4b52      	ldr	r3, [pc, #328]	; (5a0 <sd_mmc_check+0x348>)
     458:	4798      	blx	r3
     45a:	2800      	cmp	r0, #0
     45c:	d100      	bne.n	460 <sd_mmc_check+0x208>
     45e:	e71b      	b.n	298 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     460:	4b54      	ldr	r3, [pc, #336]	; (5b4 <sd_mmc_check+0x35c>)
     462:	4798      	blx	r3
     464:	23c0      	movs	r3, #192	; 0xc0
     466:	05db      	lsls	r3, r3, #23
     468:	4018      	ands	r0, r3
     46a:	2380      	movs	r3, #128	; 0x80
     46c:	05db      	lsls	r3, r3, #23
     46e:	4298      	cmp	r0, r3
     470:	d105      	bne.n	47e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     472:	4b49      	ldr	r3, [pc, #292]	; (598 <sd_mmc_check+0x340>)
     474:	681a      	ldr	r2, [r3, #0]
     476:	7ad1      	ldrb	r1, [r2, #11]
     478:	2308      	movs	r3, #8
     47a:	430b      	orrs	r3, r1
     47c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     47e:	2100      	movs	r1, #0
     480:	4850      	ldr	r0, [pc, #320]	; (5c4 <sd_mmc_check+0x36c>)
     482:	4b47      	ldr	r3, [pc, #284]	; (5a0 <sd_mmc_check+0x348>)
     484:	4798      	blx	r3
     486:	2800      	cmp	r0, #0
     488:	d100      	bne.n	48c <sd_mmc_check+0x234>
     48a:	e705      	b.n	298 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     48c:	4b4e      	ldr	r3, [pc, #312]	; (5c8 <sd_mmc_check+0x370>)
     48e:	4798      	blx	r3
     490:	2800      	cmp	r0, #0
     492:	d100      	bne.n	496 <sd_mmc_check+0x23e>
     494:	e700      	b.n	298 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     496:	4b40      	ldr	r3, [pc, #256]	; (598 <sd_mmc_check+0x340>)
     498:	681a      	ldr	r2, [r3, #0]
     49a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     49c:	069b      	lsls	r3, r3, #26
     49e:	0f1b      	lsrs	r3, r3, #28
     4a0:	2b02      	cmp	r3, #2
     4a2:	d100      	bne.n	4a6 <sd_mmc_check+0x24e>
     4a4:	e0a8      	b.n	5f8 <sd_mmc_check+0x3a0>
     4a6:	d907      	bls.n	4b8 <sd_mmc_check+0x260>
     4a8:	2b03      	cmp	r3, #3
     4aa:	d100      	bne.n	4ae <sd_mmc_check+0x256>
     4ac:	e0a7      	b.n	5fe <sd_mmc_check+0x3a6>
     4ae:	2b04      	cmp	r3, #4
     4b0:	d104      	bne.n	4bc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     4b2:	2340      	movs	r3, #64	; 0x40
     4b4:	7313      	strb	r3, [r2, #12]
     4b6:	e003      	b.n	4c0 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     4b8:	2b01      	cmp	r3, #1
     4ba:	d066      	beq.n	58a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     4bc:	2312      	movs	r3, #18
     4be:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4c0:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     4c2:	0659      	lsls	r1, r3, #25
     4c4:	0f09      	lsrs	r1, r1, #28
     4c6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     4c8:	2007      	movs	r0, #7
     4ca:	4003      	ands	r3, r0
     4cc:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     4ce:	483f      	ldr	r0, [pc, #252]	; (5cc <sd_mmc_check+0x374>)
     4d0:	5818      	ldr	r0, [r3, r0]
     4d2:	23fa      	movs	r3, #250	; 0xfa
     4d4:	009b      	lsls	r3, r3, #2
     4d6:	4343      	muls	r3, r0
     4d8:	4843      	ldr	r0, [pc, #268]	; (5e8 <sd_mmc_check+0x390>)
     4da:	5809      	ldr	r1, [r1, r0]
     4dc:	434b      	muls	r3, r1
     4de:	6013      	str	r3, [r2, #0]
     4e0:	7d91      	ldrb	r1, [r2, #22]
     4e2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4e4:	7d53      	ldrb	r3, [r2, #21]
     4e6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4e8:	7d10      	ldrb	r0, [r2, #20]
     4ea:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4ec:	4303      	orrs	r3, r0
     4ee:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     4f0:	051b      	lsls	r3, r3, #20
     4f2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     4f4:	493d      	ldr	r1, [pc, #244]	; (5ec <sd_mmc_check+0x394>)
     4f6:	428b      	cmp	r3, r1
     4f8:	d00f      	beq.n	51a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4fa:	7e10      	ldrb	r0, [r2, #24]
     4fc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4fe:	7dd1      	ldrb	r1, [r2, #23]
     500:	0049      	lsls	r1, r1, #1
     502:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     504:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     506:	2007      	movs	r0, #7
     508:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     50a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     50c:	408b      	lsls	r3, r1
     50e:	7cd1      	ldrb	r1, [r2, #19]
     510:	3008      	adds	r0, #8
     512:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     514:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     516:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     518:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     51a:	7b13      	ldrb	r3, [r2, #12]
     51c:	2b3f      	cmp	r3, #63	; 0x3f
     51e:	d97b      	bls.n	618 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     520:	2100      	movs	r1, #0
     522:	9100      	str	r1, [sp, #0]
     524:	2301      	movs	r3, #1
     526:	2280      	movs	r2, #128	; 0x80
     528:	0092      	lsls	r2, r2, #2
     52a:	4831      	ldr	r0, [pc, #196]	; (5f0 <sd_mmc_check+0x398>)
     52c:	4d2b      	ldr	r5, [pc, #172]	; (5dc <sd_mmc_check+0x384>)
     52e:	47a8      	blx	r5
     530:	2800      	cmp	r0, #0
     532:	d100      	bne.n	536 <sd_mmc_check+0x2de>
     534:	e6b0      	b.n	298 <sd_mmc_check+0x40>
     536:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     538:	4e2e      	ldr	r6, [pc, #184]	; (5f4 <sd_mmc_check+0x39c>)
     53a:	a805      	add	r0, sp, #20
     53c:	47b0      	blx	r6
     53e:	2800      	cmp	r0, #0
     540:	d100      	bne.n	544 <sd_mmc_check+0x2ec>
     542:	e6a9      	b.n	298 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     544:	3501      	adds	r5, #1
     546:	b2ad      	uxth	r5, r5
     548:	2d32      	cmp	r5, #50	; 0x32
     54a:	d1f6      	bne.n	53a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     54c:	4b12      	ldr	r3, [pc, #72]	; (598 <sd_mmc_check+0x340>)
     54e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     550:	7d8a      	ldrb	r2, [r1, #22]
     552:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     554:	7d4b      	ldrb	r3, [r1, #21]
     556:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     558:	7d09      	ldrb	r1, [r1, #20]
     55a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     55c:	430b      	orrs	r3, r1
     55e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     560:	051b      	lsls	r3, r3, #20
     562:	0d1b      	lsrs	r3, r3, #20
     564:	4a21      	ldr	r2, [pc, #132]	; (5ec <sd_mmc_check+0x394>)
     566:	4293      	cmp	r3, r2
     568:	d154      	bne.n	614 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     56a:	4e22      	ldr	r6, [pc, #136]	; (5f4 <sd_mmc_check+0x39c>)
     56c:	a806      	add	r0, sp, #24
     56e:	47b0      	blx	r6
     570:	2800      	cmp	r0, #0
     572:	d100      	bne.n	576 <sd_mmc_check+0x31e>
     574:	e690      	b.n	298 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     576:	3501      	adds	r5, #1
     578:	b2ad      	uxth	r5, r5
     57a:	2d35      	cmp	r5, #53	; 0x35
     57c:	d9f6      	bls.n	56c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     57e:	4b06      	ldr	r3, [pc, #24]	; (598 <sd_mmc_check+0x340>)
     580:	681a      	ldr	r2, [r3, #0]
     582:	9b06      	ldr	r3, [sp, #24]
     584:	085b      	lsrs	r3, r3, #1
     586:	6053      	str	r3, [r2, #4]
     588:	e044      	b.n	614 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     58a:	2314      	movs	r3, #20
     58c:	7313      	strb	r3, [r2, #12]
     58e:	e797      	b.n	4c0 <sd_mmc_check+0x268>
     590:	0000013d 	.word	0x0000013d
     594:	0000021d 	.word	0x0000021d
     598:	20000090 	.word	0x20000090
     59c:	000009e1 	.word	0x000009e1
     5a0:	00000ba9 	.word	0x00000ba9
     5a4:	00005508 	.word	0x00005508
     5a8:	00001110 	.word	0x00001110
     5ac:	00000199 	.word	0x00000199
     5b0:	00000115 	.word	0x00000115
     5b4:	00000bc1 	.word	0x00000bc1
     5b8:	0000053a 	.word	0x0000053a
     5bc:	00001bef 	.word	0x00001bef
     5c0:	00001101 	.word	0x00001101
     5c4:	0000113b 	.word	0x0000113b
     5c8:	000001d1 	.word	0x000001d1
     5cc:	00003fdc 	.word	0x00003fdc
     5d0:	00003ff8 	.word	0x00003ff8
     5d4:	00001137 	.word	0x00001137
     5d8:	00081133 	.word	0x00081133
     5dc:	00000a19 	.word	0x00000a19
     5e0:	00000c45 	.word	0x00000c45
     5e4:	00000cd1 	.word	0x00000cd1
     5e8:	00003f9c 	.word	0x00003f9c
     5ec:	00000fff 	.word	0x00000fff
     5f0:	00081108 	.word	0x00081108
     5f4:	00000bcd 	.word	0x00000bcd
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     5f8:	2322      	movs	r3, #34	; 0x22
     5fa:	7313      	strb	r3, [r2, #12]
     5fc:	e760      	b.n	4c0 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     5fe:	2330      	movs	r3, #48	; 0x30
     600:	7313      	strb	r3, [r2, #12]
     602:	e75d      	b.n	4c0 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     604:	a806      	add	r0, sp, #24
     606:	4b36      	ldr	r3, [pc, #216]	; (6e0 <sd_mmc_check+0x488>)
     608:	4798      	blx	r3
     60a:	2800      	cmp	r0, #0
     60c:	d100      	bne.n	610 <sd_mmc_check+0x3b8>
     60e:	e643      	b.n	298 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     610:	3501      	adds	r5, #1
     612:	b2ad      	uxth	r5, r5
     614:	2d7f      	cmp	r5, #127	; 0x7f
     616:	d9f5      	bls.n	604 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     618:	2180      	movs	r1, #128	; 0x80
     61a:	0089      	lsls	r1, r1, #2
     61c:	4831      	ldr	r0, [pc, #196]	; (6e4 <sd_mmc_check+0x48c>)
     61e:	4b32      	ldr	r3, [pc, #200]	; (6e8 <sd_mmc_check+0x490>)
     620:	4798      	blx	r3
     622:	2800      	cmp	r0, #0
     624:	d100      	bne.n	628 <sd_mmc_check+0x3d0>
     626:	e637      	b.n	298 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     628:	4b30      	ldr	r3, [pc, #192]	; (6ec <sd_mmc_check+0x494>)
     62a:	4798      	blx	r3
     62c:	2800      	cmp	r0, #0
     62e:	d100      	bne.n	632 <sd_mmc_check+0x3da>
     630:	e632      	b.n	298 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     632:	4b2f      	ldr	r3, [pc, #188]	; (6f0 <sd_mmc_check+0x498>)
     634:	4798      	blx	r3
     636:	e65e      	b.n	2f6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     638:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     63a:	7d93      	ldrb	r3, [r2, #22]
     63c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     63e:	7d51      	ldrb	r1, [r2, #21]
     640:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     642:	430b      	orrs	r3, r1
     644:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     646:	029b      	lsls	r3, r3, #10
				* 512;
     648:	085b      	lsrs	r3, r3, #1
     64a:	2180      	movs	r1, #128	; 0x80
     64c:	0089      	lsls	r1, r1, #2
     64e:	468c      	mov	ip, r1
     650:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     652:	6053      	str	r3, [r2, #4]
     654:	e6cd      	b.n	3f2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     656:	4b27      	ldr	r3, [pc, #156]	; (6f4 <sd_mmc_check+0x49c>)
     658:	681b      	ldr	r3, [r3, #0]
     65a:	2210      	movs	r2, #16
     65c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     65e:	4b25      	ldr	r3, [pc, #148]	; (6f4 <sd_mmc_check+0x49c>)
     660:	681b      	ldr	r3, [r3, #0]
     662:	7adb      	ldrb	r3, [r3, #11]
     664:	2209      	movs	r2, #9
     666:	4013      	ands	r3, r2
     668:	2b01      	cmp	r3, #1
     66a:	d000      	beq.n	66e <sd_mmc_check+0x416>
     66c:	e638      	b.n	2e0 <sd_mmc_check+0x88>
     66e:	e630      	b.n	2d2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     670:	4b20      	ldr	r3, [pc, #128]	; (6f4 <sd_mmc_check+0x49c>)
     672:	681b      	ldr	r3, [r3, #0]
     674:	221a      	movs	r2, #26
     676:	731a      	strb	r2, [r3, #12]
     678:	e7f1      	b.n	65e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     67a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     67c:	789b      	ldrb	r3, [r3, #2]
     67e:	09db      	lsrs	r3, r3, #7
     680:	2b01      	cmp	r3, #1
     682:	d104      	bne.n	68e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     684:	4b1b      	ldr	r3, [pc, #108]	; (6f4 <sd_mmc_check+0x49c>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	2230      	movs	r2, #48	; 0x30
     68a:	731a      	strb	r2, [r3, #12]
     68c:	e7e7      	b.n	65e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     68e:	4b19      	ldr	r3, [pc, #100]	; (6f4 <sd_mmc_check+0x49c>)
     690:	681b      	ldr	r3, [r3, #0]
     692:	2220      	movs	r2, #32
     694:	731a      	strb	r2, [r3, #12]
     696:	e7e2      	b.n	65e <sd_mmc_check+0x406>
	*v2 = 0;
     698:	2600      	movs	r6, #0
     69a:	e60d      	b.n	2b8 <sd_mmc_check+0x60>
     69c:	1e73      	subs	r3, r6, #1
     69e:	419e      	sbcs	r6, r3
     6a0:	07b3      	lsls	r3, r6, #30
     6a2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     6a4:	4d14      	ldr	r5, [pc, #80]	; (6f8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     6a6:	4f10      	ldr	r7, [pc, #64]	; (6e8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     6a8:	46b8      	mov	r8, r7
		resp = driver_get_response();
     6aa:	4e14      	ldr	r6, [pc, #80]	; (6fc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     6ac:	2100      	movs	r1, #0
     6ae:	4814      	ldr	r0, [pc, #80]	; (700 <sd_mmc_check+0x4a8>)
     6b0:	47b8      	blx	r7
     6b2:	2800      	cmp	r0, #0
     6b4:	d100      	bne.n	6b8 <sd_mmc_check+0x460>
     6b6:	e638      	b.n	32a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     6b8:	9903      	ldr	r1, [sp, #12]
     6ba:	4812      	ldr	r0, [pc, #72]	; (704 <sd_mmc_check+0x4ac>)
     6bc:	47c0      	blx	r8
     6be:	2800      	cmp	r0, #0
     6c0:	d100      	bne.n	6c4 <sd_mmc_check+0x46c>
     6c2:	e632      	b.n	32a <sd_mmc_check+0xd2>
		resp = driver_get_response();
     6c4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     6c6:	07c3      	lsls	r3, r0, #31
     6c8:	d400      	bmi.n	6cc <sd_mmc_check+0x474>
     6ca:	e628      	b.n	31e <sd_mmc_check+0xc6>
     6cc:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     6ce:	2d00      	cmp	r5, #0
     6d0:	d1ec      	bne.n	6ac <sd_mmc_check+0x454>
     6d2:	e62a      	b.n	32a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     6d4:	2209      	movs	r2, #9
     6d6:	4013      	ands	r3, r2
     6d8:	2b01      	cmp	r3, #1
     6da:	d000      	beq.n	6de <sd_mmc_check+0x486>
     6dc:	e609      	b.n	2f2 <sd_mmc_check+0x9a>
     6de:	e5f8      	b.n	2d2 <sd_mmc_check+0x7a>
     6e0:	00000bcd 	.word	0x00000bcd
     6e4:	00001110 	.word	0x00001110
     6e8:	00000ba9 	.word	0x00000ba9
     6ec:	00000199 	.word	0x00000199
     6f0:	00000115 	.word	0x00000115
     6f4:	20000090 	.word	0x20000090
     6f8:	00001bef 	.word	0x00001bef
     6fc:	00000bc1 	.word	0x00000bc1
     700:	00001137 	.word	0x00001137
     704:	00001129 	.word	0x00001129

00000708 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     708:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     70a:	4b06      	ldr	r3, [pc, #24]	; (724 <sd_mmc_get_type+0x1c>)
     70c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     70e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     710:	2800      	cmp	r0, #0
     712:	d001      	beq.n	718 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     714:	0018      	movs	r0, r3
     716:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     718:	4b03      	ldr	r3, [pc, #12]	; (728 <sd_mmc_get_type+0x20>)
     71a:	4798      	blx	r3
	return sd_mmc_card->type;
     71c:	4b03      	ldr	r3, [pc, #12]	; (72c <sd_mmc_get_type+0x24>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	7adb      	ldrb	r3, [r3, #11]
     722:	e7f7      	b.n	714 <sd_mmc_get_type+0xc>
     724:	0000013d 	.word	0x0000013d
     728:	0000021d 	.word	0x0000021d
     72c:	20000090 	.word	0x20000090

00000730 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     730:	b510      	push	{r4, lr}
     732:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     734:	4b0f      	ldr	r3, [pc, #60]	; (774 <sd_mmc_test_unit_ready+0x44>)
     736:	4798      	blx	r3
     738:	2801      	cmp	r0, #1
     73a:	d019      	beq.n	770 <sd_mmc_test_unit_ready+0x40>
     73c:	2800      	cmp	r0, #0
     73e:	d003      	beq.n	748 <sd_mmc_test_unit_ready+0x18>
     740:	2802      	cmp	r0, #2
     742:	d010      	beq.n	766 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     744:	2001      	movs	r0, #1
	}
}
     746:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     748:	4b0b      	ldr	r3, [pc, #44]	; (778 <sd_mmc_test_unit_ready+0x48>)
     74a:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     74c:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     74e:	2b00      	cmp	r3, #0
     750:	d1f9      	bne.n	746 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     752:	0020      	movs	r0, r4
     754:	4b09      	ldr	r3, [pc, #36]	; (77c <sd_mmc_test_unit_ready+0x4c>)
     756:	4798      	blx	r3
     758:	0003      	movs	r3, r0
     75a:	2003      	movs	r0, #3
     75c:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     75e:	4243      	negs	r3, r0
     760:	4158      	adcs	r0, r3
     762:	0040      	lsls	r0, r0, #1
     764:	e7ef      	b.n	746 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     766:	2200      	movs	r2, #0
     768:	4b03      	ldr	r3, [pc, #12]	; (778 <sd_mmc_test_unit_ready+0x48>)
     76a:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     76c:	2002      	movs	r0, #2
     76e:	e7ea      	b.n	746 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     770:	2003      	movs	r0, #3
     772:	e7e8      	b.n	746 <sd_mmc_test_unit_ready+0x16>
     774:	00000259 	.word	0x00000259
     778:	200000b8 	.word	0x200000b8
     77c:	00000709 	.word	0x00000709

00000780 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
     780:	b5f0      	push	{r4, r5, r6, r7, lr}
     782:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     784:	466b      	mov	r3, sp
     786:	1ddc      	adds	r4, r3, #7
     788:	23ff      	movs	r3, #255	; 0xff
     78a:	7023      	strb	r3, [r4, #0]
	uint16_t dummy = 0xFF;

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     78c:	4e12      	ldr	r6, [pc, #72]	; (7d8 <sd_mmc_spi_wait_busy+0x58>)
     78e:	2201      	movs	r2, #1
     790:	0021      	movs	r1, r4
     792:	0030      	movs	r0, r6
     794:	4d11      	ldr	r5, [pc, #68]	; (7dc <sd_mmc_spi_wait_busy+0x5c>)
     796:	47a8      	blx	r5
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     798:	23ff      	movs	r3, #255	; 0xff
     79a:	2201      	movs	r2, #1
     79c:	0021      	movs	r1, r4
     79e:	0030      	movs	r0, r6
     7a0:	47a8      	blx	r5
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     7a2:	23ff      	movs	r3, #255	; 0xff
     7a4:	2201      	movs	r2, #1
     7a6:	0021      	movs	r1, r4
     7a8:	0030      	movs	r0, r6
     7aa:	47a8      	blx	r5
     7ac:	4c0c      	ldr	r4, [pc, #48]	; (7e0 <sd_mmc_spi_wait_busy+0x60>)
			dummy);
		if (!(nec_timeout--)) {
			return false;
		}
	} while (line != 0xFF);
     7ae:	466b      	mov	r3, sp
     7b0:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     7b2:	4e09      	ldr	r6, [pc, #36]	; (7d8 <sd_mmc_spi_wait_busy+0x58>)
     7b4:	4f09      	ldr	r7, [pc, #36]	; (7dc <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     7b6:	782b      	ldrb	r3, [r5, #0]
     7b8:	2bff      	cmp	r3, #255	; 0xff
     7ba:	d009      	beq.n	7d0 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     7bc:	23ff      	movs	r3, #255	; 0xff
     7be:	2201      	movs	r2, #1
     7c0:	0029      	movs	r1, r5
     7c2:	0030      	movs	r0, r6
     7c4:	47b8      	blx	r7
     7c6:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     7c8:	2c00      	cmp	r4, #0
     7ca:	d1f4      	bne.n	7b6 <sd_mmc_spi_wait_busy+0x36>
			return false;
     7cc:	2000      	movs	r0, #0
     7ce:	e000      	b.n	7d2 <sd_mmc_spi_wait_busy+0x52>
	return true;
     7d0:	2001      	movs	r0, #1
}
     7d2:	b003      	add	sp, #12
     7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	200000bc 	.word	0x200000bc
     7dc:	000016d1 	.word	0x000016d1
     7e0:	00030d40 	.word	0x00030d40

000007e4 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
     7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     7e6:	b083      	sub	sp, #12
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
     7e8:	2200      	movs	r2, #0
     7ea:	466b      	mov	r3, sp
     7ec:	71da      	strb	r2, [r3, #7]
     7ee:	4c14      	ldr	r4, [pc, #80]	; (840 <sd_mmc_spi_start_read_block+0x5c>)
		if (i-- == 0) {
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     7f0:	466b      	mov	r3, sp
     7f2:	1ddd      	adds	r5, r3, #7
     7f4:	4e13      	ldr	r6, [pc, #76]	; (844 <sd_mmc_spi_start_read_block+0x60>)
     7f6:	4f14      	ldr	r7, [pc, #80]	; (848 <sd_mmc_spi_start_read_block+0x64>)
     7f8:	23ff      	movs	r3, #255	; 0xff
     7fa:	2201      	movs	r2, #1
     7fc:	0029      	movs	r1, r5
     7fe:	0030      	movs	r0, r6
     800:	47b8      	blx	r7
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     802:	782b      	ldrb	r3, [r5, #0]
     804:	220f      	movs	r2, #15
     806:	0019      	movs	r1, r3
     808:	4391      	bics	r1, r2
     80a:	1e0a      	subs	r2, r1, #0
     80c:	d009      	beq.n	822 <sd_mmc_spi_start_read_block+0x3e>
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
			}
			return false;
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     80e:	2bfe      	cmp	r3, #254	; 0xfe
     810:	d013      	beq.n	83a <sd_mmc_spi_start_read_block+0x56>
     812:	3c01      	subs	r4, #1
		if (i-- == 0) {
     814:	2c00      	cmp	r4, #0
     816:	d1ef      	bne.n	7f8 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     818:	2204      	movs	r2, #4
     81a:	4b0c      	ldr	r3, [pc, #48]	; (84c <sd_mmc_spi_start_read_block+0x68>)
     81c:	701a      	strb	r2, [r3, #0]
			return false;
     81e:	2000      	movs	r0, #0
     820:	e00c      	b.n	83c <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     822:	075b      	lsls	r3, r3, #29
     824:	d004      	beq.n	830 <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     826:	3207      	adds	r2, #7
     828:	4b08      	ldr	r3, [pc, #32]	; (84c <sd_mmc_spi_start_read_block+0x68>)
     82a:	701a      	strb	r2, [r3, #0]
			return false;
     82c:	2000      	movs	r0, #0
     82e:	e005      	b.n	83c <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     830:	220b      	movs	r2, #11
     832:	4b06      	ldr	r3, [pc, #24]	; (84c <sd_mmc_spi_start_read_block+0x68>)
     834:	701a      	strb	r2, [r3, #0]
			return false;
     836:	2000      	movs	r0, #0
     838:	e000      	b.n	83c <sd_mmc_spi_start_read_block+0x58>

	return true;
     83a:	2001      	movs	r0, #1
}
     83c:	b003      	add	sp, #12
     83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     840:	0007a120 	.word	0x0007a120
     844:	200000bc 	.word	0x200000bc
     848:	000016d1 	.word	0x000016d1
     84c:	200000ff 	.word	0x200000ff

00000850 <sd_deinit>:
{
     850:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
     852:	4802      	ldr	r0, [pc, #8]	; (85c <sd_deinit+0xc>)
     854:	4b02      	ldr	r3, [pc, #8]	; (860 <sd_deinit+0x10>)
     856:	4798      	blx	r3
}
     858:	bd10      	pop	{r4, pc}
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	200000bc 	.word	0x200000bc
     860:	000013f5 	.word	0x000013f5

00000864 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
     864:	b570      	push	{r4, r5, r6, lr}
     866:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     868:	2300      	movs	r3, #0
     86a:	4a2d      	ldr	r2, [pc, #180]	; (920 <sd_mmc_spi_init+0xbc>)
     86c:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     86e:	ac02      	add	r4, sp, #8
     870:	2501      	movs	r5, #1
     872:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     874:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     876:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     878:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     87a:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     87c:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     87e:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     880:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     882:	2224      	movs	r2, #36	; 0x24
     884:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     886:	3a18      	subs	r2, #24
     888:	2100      	movs	r1, #0
     88a:	a808      	add	r0, sp, #32
     88c:	4b25      	ldr	r3, [pc, #148]	; (924 <sd_mmc_spi_init+0xc0>)
     88e:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
     890:	2380      	movs	r3, #128	; 0x80
     892:	025b      	lsls	r3, r3, #9
     894:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
     896:	4b24      	ldr	r3, [pc, #144]	; (928 <sd_mmc_spi_init+0xc4>)
     898:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
     89a:	4b24      	ldr	r3, [pc, #144]	; (92c <sd_mmc_spi_init+0xc8>)
     89c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
     89e:	4b24      	ldr	r3, [pc, #144]	; (930 <sd_mmc_spi_init+0xcc>)
     8a0:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
     8a2:	4b24      	ldr	r3, [pc, #144]	; (934 <sd_mmc_spi_init+0xd0>)
     8a4:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
     8a6:	4b24      	ldr	r3, [pc, #144]	; (938 <sd_mmc_spi_init+0xd4>)
     8a8:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
     8aa:	4e24      	ldr	r6, [pc, #144]	; (93c <sd_mmc_spi_init+0xd8>)
     8ac:	0022      	movs	r2, r4
     8ae:	4924      	ldr	r1, [pc, #144]	; (940 <sd_mmc_spi_init+0xdc>)
     8b0:	0030      	movs	r0, r6
     8b2:	4b24      	ldr	r3, [pc, #144]	; (944 <sd_mmc_spi_init+0xe0>)
     8b4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8b6:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     8b8:	0020      	movs	r0, r4
     8ba:	4b23      	ldr	r3, [pc, #140]	; (948 <sd_mmc_spi_init+0xe4>)
     8bc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8be:	231f      	movs	r3, #31
     8c0:	4018      	ands	r0, r3
     8c2:	4085      	lsls	r5, r0
     8c4:	4b21      	ldr	r3, [pc, #132]	; (94c <sd_mmc_spi_init+0xe8>)
     8c6:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     8c8:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     8ca:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     8cc:	2b00      	cmp	r3, #0
     8ce:	d1fc      	bne.n	8ca <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     8d0:	6823      	ldr	r3, [r4, #0]
     8d2:	2202      	movs	r2, #2
     8d4:	4313      	orrs	r3, r2
     8d6:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     8d8:	4a1d      	ldr	r2, [pc, #116]	; (950 <sd_mmc_spi_init+0xec>)
     8da:	2300      	movs	r3, #0
     8dc:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
     8de:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
     8e0:	491c      	ldr	r1, [pc, #112]	; (954 <sd_mmc_spi_init+0xf0>)
     8e2:	7808      	ldrb	r0, [r1, #0]
     8e4:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
     8e6:	4c1c      	ldr	r4, [pc, #112]	; (958 <sd_mmc_spi_init+0xf4>)
     8e8:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
     8ea:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     8ec:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     8ee:	a901      	add	r1, sp, #4
     8f0:	2201      	movs	r2, #1
     8f2:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     8f4:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     8f6:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     8f8:	4b18      	ldr	r3, [pc, #96]	; (95c <sd_mmc_spi_init+0xf8>)
     8fa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     8fc:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     8fe:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     900:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     902:	2900      	cmp	r1, #0
     904:	d104      	bne.n	910 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
     906:	0953      	lsrs	r3, r2, #5
     908:	01db      	lsls	r3, r3, #7
     90a:	4915      	ldr	r1, [pc, #84]	; (960 <sd_mmc_spi_init+0xfc>)
     90c:	468c      	mov	ip, r1
     90e:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     910:	211f      	movs	r1, #31
     912:	4011      	ands	r1, r2
     914:	2201      	movs	r2, #1
     916:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     918:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
     91a:	b010      	add	sp, #64	; 0x40
     91c:	bd70      	pop	{r4, r5, r6, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	200000ff 	.word	0x200000ff
     924:	00002ed5 	.word	0x00002ed5
     928:	00100002 	.word	0x00100002
     92c:	00110002 	.word	0x00110002
     930:	00120002 	.word	0x00120002
     934:	00130002 	.word	0x00130002
     938:	00061a80 	.word	0x00061a80
     93c:	200000bc 	.word	0x200000bc
     940:	42000c00 	.word	0x42000c00
     944:	000014f9 	.word	0x000014f9
     948:	00001365 	.word	0x00001365
     94c:	e000e100 	.word	0xe000e100
     950:	2000010c 	.word	0x2000010c
     954:	20000000 	.word	0x20000000
     958:	200000fc 	.word	0x200000fc
     95c:	00000f49 	.word	0x00000f49
     960:	41004400 	.word	0x41004400

00000964 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
     964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     966:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     968:	2200      	movs	r2, #0
     96a:	4b0d      	ldr	r3, [pc, #52]	; (9a0 <sd_mmc_spi_select_device+0x3c>)
     96c:	701a      	strb	r2, [r3, #0]
     96e:	000c      	movs	r4, r1
     970:	4b0c      	ldr	r3, [pc, #48]	; (9a4 <sd_mmc_spi_select_device+0x40>)
     972:	4299      	cmp	r1, r3
     974:	d900      	bls.n	978 <sd_mmc_spi_select_device+0x14>
     976:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     978:	4d0b      	ldr	r5, [pc, #44]	; (9a8 <sd_mmc_spi_select_device+0x44>)
     97a:	4e0c      	ldr	r6, [pc, #48]	; (9ac <sd_mmc_spi_select_device+0x48>)
     97c:	e001      	b.n	982 <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
     97e:	08e3      	lsrs	r3, r4, #3
     980:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     982:	0021      	movs	r1, r4
     984:	0028      	movs	r0, r5
     986:	47b0      	blx	r6
     988:	2817      	cmp	r0, #23
     98a:	d0f8      	beq.n	97e <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
     98c:	0079      	lsls	r1, r7, #1
     98e:	19cf      	adds	r7, r1, r7
     990:	4907      	ldr	r1, [pc, #28]	; (9b0 <sd_mmc_spi_select_device+0x4c>)
     992:	19c9      	adds	r1, r1, r7
     994:	2201      	movs	r2, #1
     996:	4804      	ldr	r0, [pc, #16]	; (9a8 <sd_mmc_spi_select_device+0x44>)
     998:	4b06      	ldr	r3, [pc, #24]	; (9b4 <sd_mmc_spi_select_device+0x50>)
     99a:	4798      	blx	r3
}
     99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	200000ff 	.word	0x200000ff
     9a4:	00989680 	.word	0x00989680
     9a8:	200000bc 	.word	0x200000bc
     9ac:	00001441 	.word	0x00001441
     9b0:	200000fc 	.word	0x200000fc
     9b4:	000017a5 	.word	0x000017a5

000009b8 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
     9b8:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     9ba:	2200      	movs	r2, #0
     9bc:	4b04      	ldr	r3, [pc, #16]	; (9d0 <sd_mmc_spi_deselect_device+0x18>)
     9be:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
     9c0:	0041      	lsls	r1, r0, #1
     9c2:	1808      	adds	r0, r1, r0
     9c4:	4903      	ldr	r1, [pc, #12]	; (9d4 <sd_mmc_spi_deselect_device+0x1c>)
     9c6:	1809      	adds	r1, r1, r0
     9c8:	4803      	ldr	r0, [pc, #12]	; (9d8 <sd_mmc_spi_deselect_device+0x20>)
     9ca:	4b04      	ldr	r3, [pc, #16]	; (9dc <sd_mmc_spi_deselect_device+0x24>)
     9cc:	4798      	blx	r3
}
     9ce:	bd10      	pop	{r4, pc}
     9d0:	200000ff 	.word	0x200000ff
     9d4:	200000fc 	.word	0x200000fc
     9d8:	200000bc 	.word	0x200000bc
     9dc:	000017a5 	.word	0x000017a5

000009e0 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
     9e0:	b570      	push	{r4, r5, r6, lr}
     9e2:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
     9e4:	22ff      	movs	r2, #255	; 0xff
     9e6:	466b      	mov	r3, sp
     9e8:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     9ea:	2200      	movs	r2, #0
     9ec:	4b07      	ldr	r3, [pc, #28]	; (a0c <sd_mmc_spi_send_clock+0x2c>)
     9ee:	701a      	strb	r2, [r3, #0]
     9f0:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
     9f2:	4e07      	ldr	r6, [pc, #28]	; (a10 <sd_mmc_spi_send_clock+0x30>)
     9f4:	4d07      	ldr	r5, [pc, #28]	; (a14 <sd_mmc_spi_send_clock+0x34>)
     9f6:	2201      	movs	r2, #1
     9f8:	466b      	mov	r3, sp
     9fa:	1dd9      	adds	r1, r3, #7
     9fc:	0030      	movs	r0, r6
     9fe:	47a8      	blx	r5
     a00:	3c01      	subs	r4, #1
     a02:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
     a04:	2c00      	cmp	r4, #0
     a06:	d1f6      	bne.n	9f6 <sd_mmc_spi_send_clock+0x16>
	}
}
     a08:	b002      	add	sp, #8
     a0a:	bd70      	pop	{r4, r5, r6, pc}
     a0c:	200000ff 	.word	0x200000ff
     a10:	200000bc 	.word	0x200000bc
     a14:	00001899 	.word	0x00001899

00000a18 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
     a18:	b5f0      	push	{r4, r5, r6, r7, lr}
     a1a:	46c6      	mov	lr, r8
     a1c:	b500      	push	{lr}
     a1e:	b086      	sub	sp, #24
     a20:	4680      	mov	r8, r0
     a22:	9200      	str	r2, [sp, #0]
     a24:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
     a26:	22ff      	movs	r2, #255	; 0xff
     a28:	230f      	movs	r3, #15
     a2a:	a802      	add	r0, sp, #8
     a2c:	4684      	mov	ip, r0
     a2e:	4463      	add	r3, ip
     a30:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     a32:	2200      	movs	r2, #0
     a34:	4b53      	ldr	r3, [pc, #332]	; (b84 <sd_mmc_spi_adtc_start+0x16c>)
     a36:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
     a38:	ab04      	add	r3, sp, #16
     a3a:	323f      	adds	r2, #63	; 0x3f
     a3c:	4640      	mov	r0, r8
     a3e:	4002      	ands	r2, r0
     a40:	2040      	movs	r0, #64	; 0x40
     a42:	4302      	orrs	r2, r0
     a44:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
     a46:	0e0a      	lsrs	r2, r1, #24
     a48:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
     a4a:	0c0a      	lsrs	r2, r1, #16
     a4c:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
     a4e:	0a0a      	lsrs	r2, r1, #8
     a50:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
     a52:	7119      	strb	r1, [r3, #4]
     a54:	2700      	movs	r7, #0
	crc = 0;
     a56:	2300      	movs	r3, #0
		value = *buf++;
     a58:	a904      	add	r1, sp, #16
     a5a:	2208      	movs	r2, #8
				crc ^= 0x09;
     a5c:	2409      	movs	r4, #9
     a5e:	e011      	b.n	a84 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
     a60:	0076      	lsls	r6, r6, #1
     a62:	b2f6      	uxtb	r6, r6
     a64:	3801      	subs	r0, #1
     a66:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
     a68:	2800      	cmp	r0, #0
     a6a:	d008      	beq.n	a7e <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
     a6c:	005b      	lsls	r3, r3, #1
     a6e:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
     a70:	001d      	movs	r5, r3
     a72:	4075      	eors	r5, r6
     a74:	062d      	lsls	r5, r5, #24
     a76:	d5f3      	bpl.n	a60 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
     a78:	4063      	eors	r3, r4
     a7a:	b2db      	uxtb	r3, r3
     a7c:	e7f0      	b.n	a60 <sd_mmc_spi_adtc_start+0x48>
     a7e:	3701      	adds	r7, #1
	while (size--) {
     a80:	2f05      	cmp	r7, #5
     a82:	d002      	beq.n	a8a <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
     a84:	5c7e      	ldrb	r6, [r7, r1]
     a86:	0010      	movs	r0, r2
     a88:	e7f0      	b.n	a6c <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
     a8a:	005b      	lsls	r3, r3, #1
     a8c:	2201      	movs	r2, #1
     a8e:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
     a90:	ac04      	add	r4, sp, #16
     a92:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
     a94:	4e3c      	ldr	r6, [pc, #240]	; (b88 <sd_mmc_spi_adtc_start+0x170>)
     a96:	2201      	movs	r2, #1
     a98:	210f      	movs	r1, #15
     a9a:	ab02      	add	r3, sp, #8
     a9c:	469c      	mov	ip, r3
     a9e:	4461      	add	r1, ip
     aa0:	0030      	movs	r0, r6
     aa2:	4f3a      	ldr	r7, [pc, #232]	; (b8c <sd_mmc_spi_adtc_start+0x174>)
     aa4:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
     aa6:	2206      	movs	r2, #6
     aa8:	0021      	movs	r1, r4
     aaa:	0030      	movs	r0, r6
     aac:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
     aae:	ab02      	add	r3, sp, #8
     ab0:	1dd9      	adds	r1, r3, #7
     ab2:	23ff      	movs	r3, #255	; 0xff
     ab4:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     ab6:	2201      	movs	r2, #1
     ab8:	0030      	movs	r0, r6
     aba:	4e35      	ldr	r6, [pc, #212]	; (b90 <sd_mmc_spi_adtc_start+0x178>)
     abc:	47b0      	blx	r6
     abe:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     ac0:	ab02      	add	r3, sp, #8
     ac2:	1dde      	adds	r6, r3, #7
     ac4:	4f30      	ldr	r7, [pc, #192]	; (b88 <sd_mmc_spi_adtc_start+0x170>)
     ac6:	4d32      	ldr	r5, [pc, #200]	; (b90 <sd_mmc_spi_adtc_start+0x178>)
     ac8:	23ff      	movs	r3, #255	; 0xff
     aca:	2201      	movs	r2, #1
     acc:	0031      	movs	r1, r6
     ace:	0038      	movs	r0, r7
     ad0:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
     ad2:	7833      	ldrb	r3, [r6, #0]
     ad4:	b25a      	sxtb	r2, r3
     ad6:	2a00      	cmp	r2, #0
     ad8:	da0b      	bge.n	af2 <sd_mmc_spi_adtc_start+0xda>
     ada:	3c01      	subs	r4, #1
     adc:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
     ade:	2c00      	cmp	r4, #0
     ae0:	d1f2      	bne.n	ac8 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
     ae2:	2202      	movs	r2, #2
     ae4:	4b27      	ldr	r3, [pc, #156]	; (b84 <sd_mmc_spi_adtc_start+0x16c>)
     ae6:	701a      	strb	r2, [r3, #0]
			return false;
     ae8:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
     aea:	b006      	add	sp, #24
     aec:	bc04      	pop	{r2}
     aee:	4690      	mov	r8, r2
     af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
     af2:	4a28      	ldr	r2, [pc, #160]	; (b94 <sd_mmc_spi_adtc_start+0x17c>)
     af4:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
     af6:	071a      	lsls	r2, r3, #28
     af8:	d41a      	bmi.n	b30 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
     afa:	075a      	lsls	r2, r3, #29
     afc:	d41d      	bmi.n	b3a <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
     afe:	2201      	movs	r2, #1
     b00:	4393      	bics	r3, r2
     b02:	d11f      	bne.n	b44 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
     b04:	4643      	mov	r3, r8
     b06:	049b      	lsls	r3, r3, #18
     b08:	d420      	bmi.n	b4c <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
     b0a:	4643      	mov	r3, r8
     b0c:	059b      	lsls	r3, r3, #22
     b0e:	d425      	bmi.n	b5c <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
     b10:	4643      	mov	r3, r8
     b12:	055b      	lsls	r3, r3, #21
     b14:	d42b      	bmi.n	b6e <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
     b16:	4b20      	ldr	r3, [pc, #128]	; (b98 <sd_mmc_spi_adtc_start+0x180>)
     b18:	466a      	mov	r2, sp
     b1a:	8812      	ldrh	r2, [r2, #0]
     b1c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
     b1e:	4b1f      	ldr	r3, [pc, #124]	; (b9c <sd_mmc_spi_adtc_start+0x184>)
     b20:	466a      	mov	r2, sp
     b22:	8892      	ldrh	r2, [r2, #4]
     b24:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
     b26:	2200      	movs	r2, #0
     b28:	4b1d      	ldr	r3, [pc, #116]	; (ba0 <sd_mmc_spi_adtc_start+0x188>)
     b2a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
     b2c:	2001      	movs	r0, #1
     b2e:	e7dc      	b.n	aea <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
     b30:	2206      	movs	r2, #6
     b32:	4b14      	ldr	r3, [pc, #80]	; (b84 <sd_mmc_spi_adtc_start+0x16c>)
     b34:	701a      	strb	r2, [r3, #0]
		return false;
     b36:	2000      	movs	r0, #0
     b38:	e7d7      	b.n	aea <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
     b3a:	2209      	movs	r2, #9
     b3c:	4b11      	ldr	r3, [pc, #68]	; (b84 <sd_mmc_spi_adtc_start+0x16c>)
     b3e:	701a      	strb	r2, [r3, #0]
		return false;
     b40:	2000      	movs	r0, #0
     b42:	e7d2      	b.n	aea <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     b44:	4b0f      	ldr	r3, [pc, #60]	; (b84 <sd_mmc_spi_adtc_start+0x16c>)
     b46:	701a      	strb	r2, [r3, #0]
		return false;
     b48:	2000      	movs	r0, #0
     b4a:	e7ce      	b.n	aea <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
     b4c:	4b15      	ldr	r3, [pc, #84]	; (ba4 <sd_mmc_spi_adtc_start+0x18c>)
     b4e:	4798      	blx	r3
     b50:	2800      	cmp	r0, #0
     b52:	d1da      	bne.n	b0a <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
     b54:	2203      	movs	r2, #3
     b56:	4b0b      	ldr	r3, [pc, #44]	; (b84 <sd_mmc_spi_adtc_start+0x16c>)
     b58:	701a      	strb	r2, [r3, #0]
			return false;
     b5a:	e7c6      	b.n	aea <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
     b5c:	490d      	ldr	r1, [pc, #52]	; (b94 <sd_mmc_spi_adtc_start+0x17c>)
     b5e:	2300      	movs	r3, #0
     b60:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
     b62:	33ff      	adds	r3, #255	; 0xff
     b64:	2201      	movs	r2, #1
     b66:	4808      	ldr	r0, [pc, #32]	; (b88 <sd_mmc_spi_adtc_start+0x170>)
     b68:	4e09      	ldr	r6, [pc, #36]	; (b90 <sd_mmc_spi_adtc_start+0x178>)
     b6a:	47b0      	blx	r6
     b6c:	e7d0      	b.n	b10 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
     b6e:	4e09      	ldr	r6, [pc, #36]	; (b94 <sd_mmc_spi_adtc_start+0x17c>)
     b70:	23ff      	movs	r3, #255	; 0xff
     b72:	2204      	movs	r2, #4
     b74:	0031      	movs	r1, r6
     b76:	4804      	ldr	r0, [pc, #16]	; (b88 <sd_mmc_spi_adtc_start+0x170>)
     b78:	4f05      	ldr	r7, [pc, #20]	; (b90 <sd_mmc_spi_adtc_start+0x178>)
     b7a:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
     b7c:	6833      	ldr	r3, [r6, #0]
     b7e:	ba1b      	rev	r3, r3
     b80:	6033      	str	r3, [r6, #0]
     b82:	e7c8      	b.n	b16 <sd_mmc_spi_adtc_start+0xfe>
     b84:	200000ff 	.word	0x200000ff
     b88:	200000bc 	.word	0x200000bc
     b8c:	00001899 	.word	0x00001899
     b90:	000016d1 	.word	0x000016d1
     b94:	20000104 	.word	0x20000104
     b98:	200000f8 	.word	0x200000f8
     b9c:	20000100 	.word	0x20000100
     ba0:	20000108 	.word	0x20000108
     ba4:	00000781 	.word	0x00000781

00000ba8 <sd_mmc_spi_send_cmd>:
{
     ba8:	b510      	push	{r4, lr}
     baa:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
     bac:	2300      	movs	r3, #0
     bae:	9300      	str	r3, [sp, #0]
     bb0:	2200      	movs	r2, #0
     bb2:	4c02      	ldr	r4, [pc, #8]	; (bbc <sd_mmc_spi_send_cmd+0x14>)
     bb4:	47a0      	blx	r4
}
     bb6:	b002      	add	sp, #8
     bb8:	bd10      	pop	{r4, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	00000a19 	.word	0x00000a19

00000bc0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
     bc0:	4b01      	ldr	r3, [pc, #4]	; (bc8 <sd_mmc_spi_get_response+0x8>)
     bc2:	6818      	ldr	r0, [r3, #0]
}
     bc4:	4770      	bx	lr
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	20000104 	.word	0x20000104

00000bcc <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
     bcc:	b510      	push	{r4, lr}
     bce:	b084      	sub	sp, #16
     bd0:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     bd2:	2200      	movs	r2, #0
     bd4:	4b14      	ldr	r3, [pc, #80]	; (c28 <sd_mmc_spi_read_word+0x5c>)
     bd6:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
     bd8:	4b14      	ldr	r3, [pc, #80]	; (c2c <sd_mmc_spi_read_word+0x60>)
     bda:	8819      	ldrh	r1, [r3, #0]
     bdc:	4b14      	ldr	r3, [pc, #80]	; (c30 <sd_mmc_spi_read_word+0x64>)
     bde:	6818      	ldr	r0, [r3, #0]
     be0:	4b14      	ldr	r3, [pc, #80]	; (c34 <sd_mmc_spi_read_word+0x68>)
     be2:	4798      	blx	r3
     be4:	2900      	cmp	r1, #0
     be6:	d103      	bne.n	bf0 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
     be8:	4b13      	ldr	r3, [pc, #76]	; (c38 <sd_mmc_spi_read_word+0x6c>)
     bea:	4798      	blx	r3
     bec:	2800      	cmp	r0, #0
     bee:	d010      	beq.n	c12 <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
     bf0:	23ff      	movs	r3, #255	; 0xff
     bf2:	2204      	movs	r2, #4
     bf4:	a901      	add	r1, sp, #4
     bf6:	4811      	ldr	r0, [pc, #68]	; (c3c <sd_mmc_spi_read_word+0x70>)
     bf8:	4c11      	ldr	r4, [pc, #68]	; (c40 <sd_mmc_spi_read_word+0x74>)
     bfa:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
     bfc:	4b0c      	ldr	r3, [pc, #48]	; (c30 <sd_mmc_spi_read_word+0x64>)
     bfe:	681a      	ldr	r2, [r3, #0]
     c00:	1d10      	adds	r0, r2, #4
     c02:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
     c04:	4b09      	ldr	r3, [pc, #36]	; (c2c <sd_mmc_spi_read_word+0x60>)
     c06:	8819      	ldrh	r1, [r3, #0]
     c08:	4b0a      	ldr	r3, [pc, #40]	; (c34 <sd_mmc_spi_read_word+0x68>)
     c0a:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
     c0c:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
     c0e:	2900      	cmp	r1, #0
     c10:	d001      	beq.n	c16 <sd_mmc_spi_read_word+0x4a>
}
     c12:	b004      	add	sp, #16
     c14:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
     c16:	23ff      	movs	r3, #255	; 0xff
     c18:	2202      	movs	r2, #2
     c1a:	a903      	add	r1, sp, #12
     c1c:	4807      	ldr	r0, [pc, #28]	; (c3c <sd_mmc_spi_read_word+0x70>)
     c1e:	4c08      	ldr	r4, [pc, #32]	; (c40 <sd_mmc_spi_read_word+0x74>)
     c20:	47a0      	blx	r4
	return true;
     c22:	2001      	movs	r0, #1
     c24:	e7f5      	b.n	c12 <sd_mmc_spi_read_word+0x46>
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	200000ff 	.word	0x200000ff
     c2c:	200000f8 	.word	0x200000f8
     c30:	20000108 	.word	0x20000108
     c34:	00002e2d 	.word	0x00002e2d
     c38:	000007e5 	.word	0x000007e5
     c3c:	200000bc 	.word	0x200000bc
     c40:	000016d1 	.word	0x000016d1

00000c44 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
     c44:	b5f0      	push	{r4, r5, r6, r7, lr}
     c46:	46de      	mov	lr, fp
     c48:	4657      	mov	r7, sl
     c4a:	4646      	mov	r6, r8
     c4c:	b5c0      	push	{r6, r7, lr}
     c4e:	b082      	sub	sp, #8
     c50:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     c52:	2200      	movs	r2, #0
     c54:	4b17      	ldr	r3, [pc, #92]	; (cb4 <sd_mmc_spi_start_read_blocks+0x70>)
     c56:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
     c58:	1e4c      	subs	r4, r1, #1
     c5a:	b2a4      	uxth	r4, r4
     c5c:	2900      	cmp	r1, #0
     c5e:	d026      	beq.n	cae <sd_mmc_spi_start_read_blocks+0x6a>
     c60:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
     c62:	4b15      	ldr	r3, [pc, #84]	; (cb8 <sd_mmc_spi_start_read_blocks+0x74>)
     c64:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
     c66:	4f15      	ldr	r7, [pc, #84]	; (cbc <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
     c68:	47d0      	blx	sl
     c6a:	4680      	mov	r8, r0
     c6c:	2800      	cmp	r0, #0
     c6e:	d017      	beq.n	ca0 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
     c70:	883a      	ldrh	r2, [r7, #0]
     c72:	465b      	mov	r3, fp
     c74:	1999      	adds	r1, r3, r6
     c76:	23ff      	movs	r3, #255	; 0xff
     c78:	4811      	ldr	r0, [pc, #68]	; (cc0 <sd_mmc_spi_start_read_blocks+0x7c>)
     c7a:	4d12      	ldr	r5, [pc, #72]	; (cc4 <sd_mmc_spi_start_read_blocks+0x80>)
     c7c:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
     c7e:	883b      	ldrh	r3, [r7, #0]
     c80:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
     c82:	4a11      	ldr	r2, [pc, #68]	; (cc8 <sd_mmc_spi_start_read_blocks+0x84>)
     c84:	6811      	ldr	r1, [r2, #0]
     c86:	468c      	mov	ip, r1
     c88:	4463      	add	r3, ip
     c8a:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
     c8c:	23ff      	movs	r3, #255	; 0xff
     c8e:	2202      	movs	r2, #2
     c90:	a901      	add	r1, sp, #4
     c92:	480b      	ldr	r0, [pc, #44]	; (cc0 <sd_mmc_spi_start_read_blocks+0x7c>)
     c94:	47a8      	blx	r5
	while (nb_block--) {
     c96:	3c01      	subs	r4, #1
     c98:	b2a4      	uxth	r4, r4
     c9a:	4b0c      	ldr	r3, [pc, #48]	; (ccc <sd_mmc_spi_start_read_blocks+0x88>)
     c9c:	429c      	cmp	r4, r3
     c9e:	d1e3      	bne.n	c68 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
     ca0:	4640      	mov	r0, r8
     ca2:	b002      	add	sp, #8
     ca4:	bc1c      	pop	{r2, r3, r4}
     ca6:	4690      	mov	r8, r2
     ca8:	469a      	mov	sl, r3
     caa:	46a3      	mov	fp, r4
     cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
     cae:	2301      	movs	r3, #1
     cb0:	4698      	mov	r8, r3
     cb2:	e7f5      	b.n	ca0 <sd_mmc_spi_start_read_blocks+0x5c>
     cb4:	200000ff 	.word	0x200000ff
     cb8:	000007e5 	.word	0x000007e5
     cbc:	200000f8 	.word	0x200000f8
     cc0:	200000bc 	.word	0x200000bc
     cc4:	000016d1 	.word	0x000016d1
     cc8:	20000108 	.word	0x20000108
     ccc:	0000ffff 	.word	0x0000ffff

00000cd0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
     cd0:	2001      	movs	r0, #1
     cd2:	4770      	bx	lr

00000cd4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     cd4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     cd6:	2000      	movs	r0, #0
     cd8:	4b08      	ldr	r3, [pc, #32]	; (cfc <delay_init+0x28>)
     cda:	4798      	blx	r3
     cdc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     cde:	4c08      	ldr	r4, [pc, #32]	; (d00 <delay_init+0x2c>)
     ce0:	21fa      	movs	r1, #250	; 0xfa
     ce2:	0089      	lsls	r1, r1, #2
     ce4:	47a0      	blx	r4
     ce6:	4b07      	ldr	r3, [pc, #28]	; (d04 <delay_init+0x30>)
     ce8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     cea:	4907      	ldr	r1, [pc, #28]	; (d08 <delay_init+0x34>)
     cec:	0028      	movs	r0, r5
     cee:	47a0      	blx	r4
     cf0:	4b06      	ldr	r3, [pc, #24]	; (d0c <delay_init+0x38>)
     cf2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     cf4:	2205      	movs	r2, #5
     cf6:	4b06      	ldr	r3, [pc, #24]	; (d10 <delay_init+0x3c>)
     cf8:	601a      	str	r2, [r3, #0]
}
     cfa:	bd70      	pop	{r4, r5, r6, pc}
     cfc:	000025d9 	.word	0x000025d9
     d00:	00002d21 	.word	0x00002d21
     d04:	20000004 	.word	0x20000004
     d08:	000f4240 	.word	0x000f4240
     d0c:	20000008 	.word	0x20000008
     d10:	e000e010 	.word	0xe000e010

00000d14 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     d14:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     d16:	4b08      	ldr	r3, [pc, #32]	; (d38 <delay_cycles_ms+0x24>)
     d18:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     d1a:	4a08      	ldr	r2, [pc, #32]	; (d3c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     d1c:	2500      	movs	r5, #0

			while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d1e:	2180      	movs	r1, #128	; 0x80
     d20:	0249      	lsls	r1, r1, #9
	while (n--) {
     d22:	3801      	subs	r0, #1
     d24:	d307      	bcc.n	d36 <delay_cycles_ms+0x22>
	if (n > 0) {
     d26:	2c00      	cmp	r4, #0
     d28:	d0fb      	beq.n	d22 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     d2a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     d2c:	6095      	str	r5, [r2, #8]
			while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     d2e:	6813      	ldr	r3, [r2, #0]
     d30:	420b      	tst	r3, r1
     d32:	d0fc      	beq.n	d2e <delay_cycles_ms+0x1a>
     d34:	e7f5      	b.n	d22 <delay_cycles_ms+0xe>
	}
}
     d36:	bd30      	pop	{r4, r5, pc}
     d38:	20000004 	.word	0x20000004
     d3c:	e000e010 	.word	0xe000e010

00000d40 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     d40:	4b0c      	ldr	r3, [pc, #48]	; (d74 <cpu_irq_enter_critical+0x34>)
     d42:	681b      	ldr	r3, [r3, #0]
     d44:	2b00      	cmp	r3, #0
     d46:	d106      	bne.n	d56 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d48:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     d4c:	2b00      	cmp	r3, #0
     d4e:	d007      	beq.n	d60 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     d50:	2200      	movs	r2, #0
     d52:	4b09      	ldr	r3, [pc, #36]	; (d78 <cpu_irq_enter_critical+0x38>)
     d54:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     d56:	4a07      	ldr	r2, [pc, #28]	; (d74 <cpu_irq_enter_critical+0x34>)
     d58:	6813      	ldr	r3, [r2, #0]
     d5a:	3301      	adds	r3, #1
     d5c:	6013      	str	r3, [r2, #0]
}
     d5e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     d60:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d62:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     d66:	2200      	movs	r2, #0
     d68:	4b04      	ldr	r3, [pc, #16]	; (d7c <cpu_irq_enter_critical+0x3c>)
     d6a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     d6c:	3201      	adds	r2, #1
     d6e:	4b02      	ldr	r3, [pc, #8]	; (d78 <cpu_irq_enter_critical+0x38>)
     d70:	701a      	strb	r2, [r3, #0]
     d72:	e7f0      	b.n	d56 <cpu_irq_enter_critical+0x16>
     d74:	20000110 	.word	0x20000110
     d78:	20000114 	.word	0x20000114
     d7c:	2000000c 	.word	0x2000000c

00000d80 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     d80:	4b08      	ldr	r3, [pc, #32]	; (da4 <cpu_irq_leave_critical+0x24>)
     d82:	681a      	ldr	r2, [r3, #0]
     d84:	3a01      	subs	r2, #1
     d86:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     d88:	681b      	ldr	r3, [r3, #0]
     d8a:	2b00      	cmp	r3, #0
     d8c:	d109      	bne.n	da2 <cpu_irq_leave_critical+0x22>
     d8e:	4b06      	ldr	r3, [pc, #24]	; (da8 <cpu_irq_leave_critical+0x28>)
     d90:	781b      	ldrb	r3, [r3, #0]
     d92:	2b00      	cmp	r3, #0
     d94:	d005      	beq.n	da2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     d96:	2201      	movs	r2, #1
     d98:	4b04      	ldr	r3, [pc, #16]	; (dac <cpu_irq_leave_critical+0x2c>)
     d9a:	701a      	strb	r2, [r3, #0]
     d9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     da0:	b662      	cpsie	i
	}
}
     da2:	4770      	bx	lr
     da4:	20000110 	.word	0x20000110
     da8:	20000114 	.word	0x20000114
     dac:	2000000c 	.word	0x2000000c

00000db0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     db0:	b5f0      	push	{r4, r5, r6, r7, lr}
     db2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     db4:	ac01      	add	r4, sp, #4
     db6:	2501      	movs	r5, #1
     db8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     dba:	2700      	movs	r7, #0
     dbc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     dbe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     dc0:	0021      	movs	r1, r4
     dc2:	2017      	movs	r0, #23
     dc4:	4e06      	ldr	r6, [pc, #24]	; (de0 <system_board_init+0x30>)
     dc6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     dc8:	2280      	movs	r2, #128	; 0x80
     dca:	0412      	lsls	r2, r2, #16
     dcc:	4b05      	ldr	r3, [pc, #20]	; (de4 <system_board_init+0x34>)
     dce:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     dd0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     dd2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     dd4:	0021      	movs	r1, r4
     dd6:	2037      	movs	r0, #55	; 0x37
     dd8:	47b0      	blx	r6
}
     dda:	b003      	add	sp, #12
     ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	00000f49 	.word	0x00000f49
     de4:	41004400 	.word	0x41004400

00000de8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     de8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     dea:	2200      	movs	r2, #0
     dec:	4b10      	ldr	r3, [pc, #64]	; (e30 <EIC_Handler+0x48>)
     dee:	701a      	strb	r2, [r3, #0]
     df0:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     df2:	4910      	ldr	r1, [pc, #64]	; (e34 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     df4:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     df6:	4e10      	ldr	r6, [pc, #64]	; (e38 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     df8:	4c0d      	ldr	r4, [pc, #52]	; (e30 <EIC_Handler+0x48>)
     dfa:	e00a      	b.n	e12 <EIC_Handler+0x2a>
		return eics[eic_index];
     dfc:	490d      	ldr	r1, [pc, #52]	; (e34 <EIC_Handler+0x4c>)
     dfe:	e008      	b.n	e12 <EIC_Handler+0x2a>
     e00:	7823      	ldrb	r3, [r4, #0]
     e02:	3301      	adds	r3, #1
     e04:	b2db      	uxtb	r3, r3
     e06:	7023      	strb	r3, [r4, #0]
     e08:	2b0f      	cmp	r3, #15
     e0a:	d810      	bhi.n	e2e <EIC_Handler+0x46>
		return NULL;
     e0c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     e0e:	2b1f      	cmp	r3, #31
     e10:	d9f4      	bls.n	dfc <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     e12:	0028      	movs	r0, r5
     e14:	4018      	ands	r0, r3
     e16:	2201      	movs	r2, #1
     e18:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     e1a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     e1c:	4210      	tst	r0, r2
     e1e:	d0ef      	beq.n	e00 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     e20:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     e22:	009b      	lsls	r3, r3, #2
     e24:	599b      	ldr	r3, [r3, r6]
     e26:	2b00      	cmp	r3, #0
     e28:	d0ea      	beq.n	e00 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     e2a:	4798      	blx	r3
     e2c:	e7e8      	b.n	e00 <EIC_Handler+0x18>
			}
		}
	}
}
     e2e:	bd70      	pop	{r4, r5, r6, pc}
     e30:	200003e8 	.word	0x200003e8
     e34:	40001800 	.word	0x40001800
     e38:	200003ec 	.word	0x200003ec

00000e3c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     e3c:	4a04      	ldr	r2, [pc, #16]	; (e50 <_extint_enable+0x14>)
     e3e:	7813      	ldrb	r3, [r2, #0]
     e40:	2102      	movs	r1, #2
     e42:	430b      	orrs	r3, r1
     e44:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     e46:	7853      	ldrb	r3, [r2, #1]
     e48:	b25b      	sxtb	r3, r3
     e4a:	2b00      	cmp	r3, #0
     e4c:	dbfb      	blt.n	e46 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     e4e:	4770      	bx	lr
     e50:	40001800 	.word	0x40001800

00000e54 <_system_extint_init>:
{
     e54:	b500      	push	{lr}
     e56:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     e58:	4a12      	ldr	r2, [pc, #72]	; (ea4 <_system_extint_init+0x50>)
     e5a:	6993      	ldr	r3, [r2, #24]
     e5c:	2140      	movs	r1, #64	; 0x40
     e5e:	430b      	orrs	r3, r1
     e60:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     e62:	a901      	add	r1, sp, #4
     e64:	2300      	movs	r3, #0
     e66:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     e68:	2005      	movs	r0, #5
     e6a:	4b0f      	ldr	r3, [pc, #60]	; (ea8 <_system_extint_init+0x54>)
     e6c:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     e6e:	2005      	movs	r0, #5
     e70:	4b0e      	ldr	r3, [pc, #56]	; (eac <_system_extint_init+0x58>)
     e72:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     e74:	4a0e      	ldr	r2, [pc, #56]	; (eb0 <_system_extint_init+0x5c>)
     e76:	7813      	ldrb	r3, [r2, #0]
     e78:	2101      	movs	r1, #1
     e7a:	430b      	orrs	r3, r1
     e7c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     e7e:	7853      	ldrb	r3, [r2, #1]
     e80:	b25b      	sxtb	r3, r3
     e82:	2b00      	cmp	r3, #0
     e84:	dbfb      	blt.n	e7e <_system_extint_init+0x2a>
     e86:	4b0b      	ldr	r3, [pc, #44]	; (eb4 <_system_extint_init+0x60>)
     e88:	0019      	movs	r1, r3
     e8a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     e8c:	2200      	movs	r2, #0
     e8e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     e90:	4299      	cmp	r1, r3
     e92:	d1fc      	bne.n	e8e <_system_extint_init+0x3a>
     e94:	2210      	movs	r2, #16
     e96:	4b08      	ldr	r3, [pc, #32]	; (eb8 <_system_extint_init+0x64>)
     e98:	601a      	str	r2, [r3, #0]
	_extint_enable();
     e9a:	4b08      	ldr	r3, [pc, #32]	; (ebc <_system_extint_init+0x68>)
     e9c:	4798      	blx	r3
}
     e9e:	b003      	add	sp, #12
     ea0:	bd00      	pop	{pc}
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	40000400 	.word	0x40000400
     ea8:	000026f1 	.word	0x000026f1
     eac:	00002665 	.word	0x00002665
     eb0:	40001800 	.word	0x40001800
     eb4:	200003ec 	.word	0x200003ec
     eb8:	e000e100 	.word	0xe000e100
     ebc:	00000e3d 	.word	0x00000e3d

00000ec0 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     ec0:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     ec2:	4a1e      	ldr	r2, [pc, #120]	; (f3c <nvm_set_config+0x7c>)
     ec4:	69d3      	ldr	r3, [r2, #28]
     ec6:	2104      	movs	r1, #4
     ec8:	430b      	orrs	r3, r1
     eca:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     ecc:	4b1c      	ldr	r3, [pc, #112]	; (f40 <nvm_set_config+0x80>)
     ece:	2220      	movs	r2, #32
     ed0:	32ff      	adds	r2, #255	; 0xff
     ed2:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     ed4:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     ed6:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     ed8:	07d2      	lsls	r2, r2, #31
     eda:	d401      	bmi.n	ee0 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     edc:	0018      	movs	r0, r3
     ede:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     ee0:	7803      	ldrb	r3, [r0, #0]
     ee2:	021b      	lsls	r3, r3, #8
     ee4:	22c0      	movs	r2, #192	; 0xc0
     ee6:	0092      	lsls	r2, r2, #2
     ee8:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     eea:	7841      	ldrb	r1, [r0, #1]
     eec:	01c9      	lsls	r1, r1, #7
     eee:	22ff      	movs	r2, #255	; 0xff
     ef0:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     ef2:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     ef4:	7881      	ldrb	r1, [r0, #2]
     ef6:	0049      	lsls	r1, r1, #1
     ef8:	221e      	movs	r2, #30
     efa:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     efc:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     efe:	78c2      	ldrb	r2, [r0, #3]
     f00:	0492      	lsls	r2, r2, #18
     f02:	2180      	movs	r1, #128	; 0x80
     f04:	02c9      	lsls	r1, r1, #11
     f06:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     f08:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     f0a:	7902      	ldrb	r2, [r0, #4]
     f0c:	0412      	lsls	r2, r2, #16
     f0e:	21c0      	movs	r1, #192	; 0xc0
     f10:	0289      	lsls	r1, r1, #10
     f12:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     f14:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     f16:	4a0a      	ldr	r2, [pc, #40]	; (f40 <nvm_set_config+0x80>)
     f18:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     f1a:	6893      	ldr	r3, [r2, #8]
     f1c:	035b      	lsls	r3, r3, #13
     f1e:	0f5b      	lsrs	r3, r3, #29
     f20:	4908      	ldr	r1, [pc, #32]	; (f44 <nvm_set_config+0x84>)
     f22:	2408      	movs	r4, #8
     f24:	409c      	lsls	r4, r3
     f26:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     f28:	6893      	ldr	r3, [r2, #8]
     f2a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     f2c:	7843      	ldrb	r3, [r0, #1]
     f2e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     f30:	8b13      	ldrh	r3, [r2, #24]
     f32:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     f34:	0fdb      	lsrs	r3, r3, #31
     f36:	011b      	lsls	r3, r3, #4
     f38:	e7d0      	b.n	edc <nvm_set_config+0x1c>
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	40000400 	.word	0x40000400
     f40:	41004000 	.word	0x41004000
     f44:	20000118 	.word	0x20000118

00000f48 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     f48:	b500      	push	{lr}
     f4a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f4c:	ab01      	add	r3, sp, #4
     f4e:	2280      	movs	r2, #128	; 0x80
     f50:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     f52:	780a      	ldrb	r2, [r1, #0]
     f54:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     f56:	784a      	ldrb	r2, [r1, #1]
     f58:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     f5a:	788a      	ldrb	r2, [r1, #2]
     f5c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     f5e:	0019      	movs	r1, r3
     f60:	4b01      	ldr	r3, [pc, #4]	; (f68 <port_pin_set_config+0x20>)
     f62:	4798      	blx	r3
}
     f64:	b003      	add	sp, #12
     f66:	bd00      	pop	{pc}
     f68:	000027e9 	.word	0x000027e9

00000f6c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     f6c:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     f6e:	4b0f      	ldr	r3, [pc, #60]	; (fac <RTC_Handler+0x40>)
     f70:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     f72:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     f74:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
     f76:	8a13      	ldrh	r3, [r2, #16]
     f78:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     f7a:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     f7c:	79e3      	ldrb	r3, [r4, #7]
     f7e:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     f80:	b258      	sxtb	r0, r3
     f82:	2800      	cmp	r0, #0
     f84:	db06      	blt.n	f94 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     f86:	07db      	lsls	r3, r3, #31
     f88:	d503      	bpl.n	f92 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     f8a:	07cb      	lsls	r3, r1, #31
     f8c:	d40a      	bmi.n	fa4 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     f8e:	2301      	movs	r3, #1
     f90:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     f92:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     f94:	078b      	lsls	r3, r1, #30
     f96:	d402      	bmi.n	f9e <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     f98:	2380      	movs	r3, #128	; 0x80
     f9a:	7223      	strb	r3, [r4, #8]
     f9c:	e7f9      	b.n	f92 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     f9e:	68d3      	ldr	r3, [r2, #12]
     fa0:	4798      	blx	r3
     fa2:	e7f9      	b.n	f98 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     fa4:	6893      	ldr	r3, [r2, #8]
     fa6:	4798      	blx	r3
     fa8:	e7f1      	b.n	f8e <RTC_Handler+0x22>
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	2000042c 	.word	0x2000042c

00000fb0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fb2:	46de      	mov	lr, fp
     fb4:	4657      	mov	r7, sl
     fb6:	464e      	mov	r6, r9
     fb8:	4645      	mov	r5, r8
     fba:	b5e0      	push	{r5, r6, r7, lr}
     fbc:	b087      	sub	sp, #28
     fbe:	4680      	mov	r8, r0
     fc0:	9104      	str	r1, [sp, #16]
     fc2:	0016      	movs	r6, r2
     fc4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     fc6:	2200      	movs	r2, #0
     fc8:	2300      	movs	r3, #0
     fca:	2100      	movs	r1, #0
     fcc:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     fce:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     fd0:	2001      	movs	r0, #1
     fd2:	0021      	movs	r1, r4
     fd4:	9600      	str	r6, [sp, #0]
     fd6:	9701      	str	r7, [sp, #4]
     fd8:	465c      	mov	r4, fp
     fda:	9403      	str	r4, [sp, #12]
     fdc:	4644      	mov	r4, r8
     fde:	9405      	str	r4, [sp, #20]
     fe0:	e013      	b.n	100a <long_division+0x5a>
     fe2:	2420      	movs	r4, #32
     fe4:	1a64      	subs	r4, r4, r1
     fe6:	0005      	movs	r5, r0
     fe8:	40e5      	lsrs	r5, r4
     fea:	46a8      	mov	r8, r5
     fec:	e014      	b.n	1018 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     fee:	9c00      	ldr	r4, [sp, #0]
     ff0:	9d01      	ldr	r5, [sp, #4]
     ff2:	1b12      	subs	r2, r2, r4
     ff4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     ff6:	465c      	mov	r4, fp
     ff8:	464d      	mov	r5, r9
     ffa:	432c      	orrs	r4, r5
     ffc:	46a3      	mov	fp, r4
     ffe:	9c03      	ldr	r4, [sp, #12]
    1000:	4645      	mov	r5, r8
    1002:	432c      	orrs	r4, r5
    1004:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1006:	3901      	subs	r1, #1
    1008:	d325      	bcc.n	1056 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    100a:	2420      	movs	r4, #32
    100c:	4264      	negs	r4, r4
    100e:	190c      	adds	r4, r1, r4
    1010:	d4e7      	bmi.n	fe2 <long_division+0x32>
    1012:	0005      	movs	r5, r0
    1014:	40a5      	lsls	r5, r4
    1016:	46a8      	mov	r8, r5
    1018:	0004      	movs	r4, r0
    101a:	408c      	lsls	r4, r1
    101c:	46a1      	mov	r9, r4
		r = r << 1;
    101e:	1892      	adds	r2, r2, r2
    1020:	415b      	adcs	r3, r3
    1022:	0014      	movs	r4, r2
    1024:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1026:	9e05      	ldr	r6, [sp, #20]
    1028:	464f      	mov	r7, r9
    102a:	403e      	ands	r6, r7
    102c:	46b4      	mov	ip, r6
    102e:	9e04      	ldr	r6, [sp, #16]
    1030:	4647      	mov	r7, r8
    1032:	403e      	ands	r6, r7
    1034:	46b2      	mov	sl, r6
    1036:	4666      	mov	r6, ip
    1038:	4657      	mov	r7, sl
    103a:	433e      	orrs	r6, r7
    103c:	d003      	beq.n	1046 <long_division+0x96>
			r |= 0x01;
    103e:	0006      	movs	r6, r0
    1040:	4326      	orrs	r6, r4
    1042:	0032      	movs	r2, r6
    1044:	002b      	movs	r3, r5
		if (r >= d) {
    1046:	9c00      	ldr	r4, [sp, #0]
    1048:	9d01      	ldr	r5, [sp, #4]
    104a:	429d      	cmp	r5, r3
    104c:	d8db      	bhi.n	1006 <long_division+0x56>
    104e:	d1ce      	bne.n	fee <long_division+0x3e>
    1050:	4294      	cmp	r4, r2
    1052:	d8d8      	bhi.n	1006 <long_division+0x56>
    1054:	e7cb      	b.n	fee <long_division+0x3e>
    1056:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1058:	4658      	mov	r0, fp
    105a:	0019      	movs	r1, r3
    105c:	b007      	add	sp, #28
    105e:	bc3c      	pop	{r2, r3, r4, r5}
    1060:	4690      	mov	r8, r2
    1062:	4699      	mov	r9, r3
    1064:	46a2      	mov	sl, r4
    1066:	46ab      	mov	fp, r5
    1068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000106a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    106a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    106c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    106e:	2340      	movs	r3, #64	; 0x40
    1070:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1072:	4281      	cmp	r1, r0
    1074:	d202      	bcs.n	107c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1076:	0018      	movs	r0, r3
    1078:	bd10      	pop	{r4, pc}
		baud_calculated++;
    107a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    107c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    107e:	1c63      	adds	r3, r4, #1
    1080:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1082:	4288      	cmp	r0, r1
    1084:	d9f9      	bls.n	107a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1086:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1088:	2cff      	cmp	r4, #255	; 0xff
    108a:	d8f4      	bhi.n	1076 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    108c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    108e:	2300      	movs	r3, #0
    1090:	e7f1      	b.n	1076 <_sercom_get_sync_baud_val+0xc>
	...

00001094 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1094:	b5f0      	push	{r4, r5, r6, r7, lr}
    1096:	b083      	sub	sp, #12
    1098:	000f      	movs	r7, r1
    109a:	0016      	movs	r6, r2
    109c:	aa08      	add	r2, sp, #32
    109e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    10a0:	0004      	movs	r4, r0
    10a2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    10a4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    10a6:	42bc      	cmp	r4, r7
    10a8:	d902      	bls.n	10b0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    10aa:	0010      	movs	r0, r2
    10ac:	b003      	add	sp, #12
    10ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    10b0:	2b00      	cmp	r3, #0
    10b2:	d114      	bne.n	10de <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    10b4:	0002      	movs	r2, r0
    10b6:	0008      	movs	r0, r1
    10b8:	2100      	movs	r1, #0
    10ba:	4c19      	ldr	r4, [pc, #100]	; (1120 <_sercom_get_async_baud_val+0x8c>)
    10bc:	47a0      	blx	r4
    10be:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    10c0:	003a      	movs	r2, r7
    10c2:	2300      	movs	r3, #0
    10c4:	2000      	movs	r0, #0
    10c6:	4c17      	ldr	r4, [pc, #92]	; (1124 <_sercom_get_async_baud_val+0x90>)
    10c8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    10ca:	2200      	movs	r2, #0
    10cc:	2301      	movs	r3, #1
    10ce:	1a12      	subs	r2, r2, r0
    10d0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    10d2:	0c12      	lsrs	r2, r2, #16
    10d4:	041b      	lsls	r3, r3, #16
    10d6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    10d8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    10da:	2200      	movs	r2, #0
    10dc:	e7e5      	b.n	10aa <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    10de:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    10e0:	2b01      	cmp	r3, #1
    10e2:	d1f9      	bne.n	10d8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    10e4:	000a      	movs	r2, r1
    10e6:	2300      	movs	r3, #0
    10e8:	2100      	movs	r1, #0
    10ea:	4c0d      	ldr	r4, [pc, #52]	; (1120 <_sercom_get_async_baud_val+0x8c>)
    10ec:	47a0      	blx	r4
    10ee:	0002      	movs	r2, r0
    10f0:	000b      	movs	r3, r1
    10f2:	9200      	str	r2, [sp, #0]
    10f4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    10f6:	0038      	movs	r0, r7
    10f8:	2100      	movs	r1, #0
    10fa:	4c0a      	ldr	r4, [pc, #40]	; (1124 <_sercom_get_async_baud_val+0x90>)
    10fc:	47a0      	blx	r4
    10fe:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1100:	2380      	movs	r3, #128	; 0x80
    1102:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1104:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1106:	4298      	cmp	r0, r3
    1108:	d8cf      	bhi.n	10aa <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    110a:	0f79      	lsrs	r1, r7, #29
    110c:	00f8      	lsls	r0, r7, #3
    110e:	9a00      	ldr	r2, [sp, #0]
    1110:	9b01      	ldr	r3, [sp, #4]
    1112:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1114:	00ea      	lsls	r2, r5, #3
    1116:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1118:	b2d2      	uxtb	r2, r2
    111a:	0352      	lsls	r2, r2, #13
    111c:	432a      	orrs	r2, r5
    111e:	e7db      	b.n	10d8 <_sercom_get_async_baud_val+0x44>
    1120:	00002e39 	.word	0x00002e39
    1124:	00000fb1 	.word	0x00000fb1

00001128 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1128:	b510      	push	{r4, lr}
    112a:	b082      	sub	sp, #8
    112c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    112e:	4b0e      	ldr	r3, [pc, #56]	; (1168 <sercom_set_gclk_generator+0x40>)
    1130:	781b      	ldrb	r3, [r3, #0]
    1132:	2b00      	cmp	r3, #0
    1134:	d007      	beq.n	1146 <sercom_set_gclk_generator+0x1e>
    1136:	2900      	cmp	r1, #0
    1138:	d105      	bne.n	1146 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    113a:	4b0b      	ldr	r3, [pc, #44]	; (1168 <sercom_set_gclk_generator+0x40>)
    113c:	785b      	ldrb	r3, [r3, #1]
    113e:	4283      	cmp	r3, r0
    1140:	d010      	beq.n	1164 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1142:	201d      	movs	r0, #29
    1144:	e00c      	b.n	1160 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1146:	a901      	add	r1, sp, #4
    1148:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    114a:	2013      	movs	r0, #19
    114c:	4b07      	ldr	r3, [pc, #28]	; (116c <sercom_set_gclk_generator+0x44>)
    114e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1150:	2013      	movs	r0, #19
    1152:	4b07      	ldr	r3, [pc, #28]	; (1170 <sercom_set_gclk_generator+0x48>)
    1154:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1156:	4b04      	ldr	r3, [pc, #16]	; (1168 <sercom_set_gclk_generator+0x40>)
    1158:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    115a:	2201      	movs	r2, #1
    115c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    115e:	2000      	movs	r0, #0
}
    1160:	b002      	add	sp, #8
    1162:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1164:	2000      	movs	r0, #0
    1166:	e7fb      	b.n	1160 <sercom_set_gclk_generator+0x38>
    1168:	20000120 	.word	0x20000120
    116c:	000026f1 	.word	0x000026f1
    1170:	00002665 	.word	0x00002665

00001174 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1174:	4b40      	ldr	r3, [pc, #256]	; (1278 <_sercom_get_default_pad+0x104>)
    1176:	4298      	cmp	r0, r3
    1178:	d031      	beq.n	11de <_sercom_get_default_pad+0x6a>
    117a:	d90a      	bls.n	1192 <_sercom_get_default_pad+0x1e>
    117c:	4b3f      	ldr	r3, [pc, #252]	; (127c <_sercom_get_default_pad+0x108>)
    117e:	4298      	cmp	r0, r3
    1180:	d04d      	beq.n	121e <_sercom_get_default_pad+0xaa>
    1182:	4b3f      	ldr	r3, [pc, #252]	; (1280 <_sercom_get_default_pad+0x10c>)
    1184:	4298      	cmp	r0, r3
    1186:	d05a      	beq.n	123e <_sercom_get_default_pad+0xca>
    1188:	4b3e      	ldr	r3, [pc, #248]	; (1284 <_sercom_get_default_pad+0x110>)
    118a:	4298      	cmp	r0, r3
    118c:	d037      	beq.n	11fe <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    118e:	2000      	movs	r0, #0
}
    1190:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1192:	4b3d      	ldr	r3, [pc, #244]	; (1288 <_sercom_get_default_pad+0x114>)
    1194:	4298      	cmp	r0, r3
    1196:	d00c      	beq.n	11b2 <_sercom_get_default_pad+0x3e>
    1198:	4b3c      	ldr	r3, [pc, #240]	; (128c <_sercom_get_default_pad+0x118>)
    119a:	4298      	cmp	r0, r3
    119c:	d1f7      	bne.n	118e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    119e:	2901      	cmp	r1, #1
    11a0:	d017      	beq.n	11d2 <_sercom_get_default_pad+0x5e>
    11a2:	2900      	cmp	r1, #0
    11a4:	d05d      	beq.n	1262 <_sercom_get_default_pad+0xee>
    11a6:	2902      	cmp	r1, #2
    11a8:	d015      	beq.n	11d6 <_sercom_get_default_pad+0x62>
    11aa:	2903      	cmp	r1, #3
    11ac:	d015      	beq.n	11da <_sercom_get_default_pad+0x66>
	return 0;
    11ae:	2000      	movs	r0, #0
    11b0:	e7ee      	b.n	1190 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11b2:	2901      	cmp	r1, #1
    11b4:	d007      	beq.n	11c6 <_sercom_get_default_pad+0x52>
    11b6:	2900      	cmp	r1, #0
    11b8:	d051      	beq.n	125e <_sercom_get_default_pad+0xea>
    11ba:	2902      	cmp	r1, #2
    11bc:	d005      	beq.n	11ca <_sercom_get_default_pad+0x56>
    11be:	2903      	cmp	r1, #3
    11c0:	d005      	beq.n	11ce <_sercom_get_default_pad+0x5a>
	return 0;
    11c2:	2000      	movs	r0, #0
    11c4:	e7e4      	b.n	1190 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11c6:	4832      	ldr	r0, [pc, #200]	; (1290 <_sercom_get_default_pad+0x11c>)
    11c8:	e7e2      	b.n	1190 <_sercom_get_default_pad+0x1c>
    11ca:	4832      	ldr	r0, [pc, #200]	; (1294 <_sercom_get_default_pad+0x120>)
    11cc:	e7e0      	b.n	1190 <_sercom_get_default_pad+0x1c>
    11ce:	4832      	ldr	r0, [pc, #200]	; (1298 <_sercom_get_default_pad+0x124>)
    11d0:	e7de      	b.n	1190 <_sercom_get_default_pad+0x1c>
    11d2:	4832      	ldr	r0, [pc, #200]	; (129c <_sercom_get_default_pad+0x128>)
    11d4:	e7dc      	b.n	1190 <_sercom_get_default_pad+0x1c>
    11d6:	4832      	ldr	r0, [pc, #200]	; (12a0 <_sercom_get_default_pad+0x12c>)
    11d8:	e7da      	b.n	1190 <_sercom_get_default_pad+0x1c>
    11da:	4832      	ldr	r0, [pc, #200]	; (12a4 <_sercom_get_default_pad+0x130>)
    11dc:	e7d8      	b.n	1190 <_sercom_get_default_pad+0x1c>
    11de:	2901      	cmp	r1, #1
    11e0:	d007      	beq.n	11f2 <_sercom_get_default_pad+0x7e>
    11e2:	2900      	cmp	r1, #0
    11e4:	d03f      	beq.n	1266 <_sercom_get_default_pad+0xf2>
    11e6:	2902      	cmp	r1, #2
    11e8:	d005      	beq.n	11f6 <_sercom_get_default_pad+0x82>
    11ea:	2903      	cmp	r1, #3
    11ec:	d005      	beq.n	11fa <_sercom_get_default_pad+0x86>
	return 0;
    11ee:	2000      	movs	r0, #0
    11f0:	e7ce      	b.n	1190 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    11f2:	482d      	ldr	r0, [pc, #180]	; (12a8 <_sercom_get_default_pad+0x134>)
    11f4:	e7cc      	b.n	1190 <_sercom_get_default_pad+0x1c>
    11f6:	482d      	ldr	r0, [pc, #180]	; (12ac <_sercom_get_default_pad+0x138>)
    11f8:	e7ca      	b.n	1190 <_sercom_get_default_pad+0x1c>
    11fa:	482d      	ldr	r0, [pc, #180]	; (12b0 <_sercom_get_default_pad+0x13c>)
    11fc:	e7c8      	b.n	1190 <_sercom_get_default_pad+0x1c>
    11fe:	2901      	cmp	r1, #1
    1200:	d007      	beq.n	1212 <_sercom_get_default_pad+0x9e>
    1202:	2900      	cmp	r1, #0
    1204:	d031      	beq.n	126a <_sercom_get_default_pad+0xf6>
    1206:	2902      	cmp	r1, #2
    1208:	d005      	beq.n	1216 <_sercom_get_default_pad+0xa2>
    120a:	2903      	cmp	r1, #3
    120c:	d005      	beq.n	121a <_sercom_get_default_pad+0xa6>
	return 0;
    120e:	2000      	movs	r0, #0
    1210:	e7be      	b.n	1190 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1212:	4828      	ldr	r0, [pc, #160]	; (12b4 <_sercom_get_default_pad+0x140>)
    1214:	e7bc      	b.n	1190 <_sercom_get_default_pad+0x1c>
    1216:	4828      	ldr	r0, [pc, #160]	; (12b8 <_sercom_get_default_pad+0x144>)
    1218:	e7ba      	b.n	1190 <_sercom_get_default_pad+0x1c>
    121a:	4828      	ldr	r0, [pc, #160]	; (12bc <_sercom_get_default_pad+0x148>)
    121c:	e7b8      	b.n	1190 <_sercom_get_default_pad+0x1c>
    121e:	2901      	cmp	r1, #1
    1220:	d007      	beq.n	1232 <_sercom_get_default_pad+0xbe>
    1222:	2900      	cmp	r1, #0
    1224:	d023      	beq.n	126e <_sercom_get_default_pad+0xfa>
    1226:	2902      	cmp	r1, #2
    1228:	d005      	beq.n	1236 <_sercom_get_default_pad+0xc2>
    122a:	2903      	cmp	r1, #3
    122c:	d005      	beq.n	123a <_sercom_get_default_pad+0xc6>
	return 0;
    122e:	2000      	movs	r0, #0
    1230:	e7ae      	b.n	1190 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1232:	4823      	ldr	r0, [pc, #140]	; (12c0 <_sercom_get_default_pad+0x14c>)
    1234:	e7ac      	b.n	1190 <_sercom_get_default_pad+0x1c>
    1236:	4823      	ldr	r0, [pc, #140]	; (12c4 <_sercom_get_default_pad+0x150>)
    1238:	e7aa      	b.n	1190 <_sercom_get_default_pad+0x1c>
    123a:	4823      	ldr	r0, [pc, #140]	; (12c8 <_sercom_get_default_pad+0x154>)
    123c:	e7a8      	b.n	1190 <_sercom_get_default_pad+0x1c>
    123e:	2901      	cmp	r1, #1
    1240:	d007      	beq.n	1252 <_sercom_get_default_pad+0xde>
    1242:	2900      	cmp	r1, #0
    1244:	d015      	beq.n	1272 <_sercom_get_default_pad+0xfe>
    1246:	2902      	cmp	r1, #2
    1248:	d005      	beq.n	1256 <_sercom_get_default_pad+0xe2>
    124a:	2903      	cmp	r1, #3
    124c:	d005      	beq.n	125a <_sercom_get_default_pad+0xe6>
	return 0;
    124e:	2000      	movs	r0, #0
    1250:	e79e      	b.n	1190 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1252:	481e      	ldr	r0, [pc, #120]	; (12cc <_sercom_get_default_pad+0x158>)
    1254:	e79c      	b.n	1190 <_sercom_get_default_pad+0x1c>
    1256:	481e      	ldr	r0, [pc, #120]	; (12d0 <_sercom_get_default_pad+0x15c>)
    1258:	e79a      	b.n	1190 <_sercom_get_default_pad+0x1c>
    125a:	481e      	ldr	r0, [pc, #120]	; (12d4 <_sercom_get_default_pad+0x160>)
    125c:	e798      	b.n	1190 <_sercom_get_default_pad+0x1c>
    125e:	481e      	ldr	r0, [pc, #120]	; (12d8 <_sercom_get_default_pad+0x164>)
    1260:	e796      	b.n	1190 <_sercom_get_default_pad+0x1c>
    1262:	2003      	movs	r0, #3
    1264:	e794      	b.n	1190 <_sercom_get_default_pad+0x1c>
    1266:	481d      	ldr	r0, [pc, #116]	; (12dc <_sercom_get_default_pad+0x168>)
    1268:	e792      	b.n	1190 <_sercom_get_default_pad+0x1c>
    126a:	481d      	ldr	r0, [pc, #116]	; (12e0 <_sercom_get_default_pad+0x16c>)
    126c:	e790      	b.n	1190 <_sercom_get_default_pad+0x1c>
    126e:	481d      	ldr	r0, [pc, #116]	; (12e4 <_sercom_get_default_pad+0x170>)
    1270:	e78e      	b.n	1190 <_sercom_get_default_pad+0x1c>
    1272:	481d      	ldr	r0, [pc, #116]	; (12e8 <_sercom_get_default_pad+0x174>)
    1274:	e78c      	b.n	1190 <_sercom_get_default_pad+0x1c>
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	42001000 	.word	0x42001000
    127c:	42001800 	.word	0x42001800
    1280:	42001c00 	.word	0x42001c00
    1284:	42001400 	.word	0x42001400
    1288:	42000800 	.word	0x42000800
    128c:	42000c00 	.word	0x42000c00
    1290:	00050003 	.word	0x00050003
    1294:	00060003 	.word	0x00060003
    1298:	00070003 	.word	0x00070003
    129c:	00010003 	.word	0x00010003
    12a0:	001e0003 	.word	0x001e0003
    12a4:	001f0003 	.word	0x001f0003
    12a8:	00090003 	.word	0x00090003
    12ac:	000a0003 	.word	0x000a0003
    12b0:	000b0003 	.word	0x000b0003
    12b4:	00110003 	.word	0x00110003
    12b8:	00120003 	.word	0x00120003
    12bc:	00130003 	.word	0x00130003
    12c0:	000d0003 	.word	0x000d0003
    12c4:	000e0003 	.word	0x000e0003
    12c8:	000f0003 	.word	0x000f0003
    12cc:	00170003 	.word	0x00170003
    12d0:	00180003 	.word	0x00180003
    12d4:	00190003 	.word	0x00190003
    12d8:	00040003 	.word	0x00040003
    12dc:	00080003 	.word	0x00080003
    12e0:	00100003 	.word	0x00100003
    12e4:	000c0003 	.word	0x000c0003
    12e8:	00160003 	.word	0x00160003

000012ec <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    12ec:	b530      	push	{r4, r5, lr}
    12ee:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    12f0:	4b0b      	ldr	r3, [pc, #44]	; (1320 <_sercom_get_sercom_inst_index+0x34>)
    12f2:	466a      	mov	r2, sp
    12f4:	cb32      	ldmia	r3!, {r1, r4, r5}
    12f6:	c232      	stmia	r2!, {r1, r4, r5}
    12f8:	cb32      	ldmia	r3!, {r1, r4, r5}
    12fa:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    12fc:	9b00      	ldr	r3, [sp, #0]
    12fe:	4283      	cmp	r3, r0
    1300:	d00b      	beq.n	131a <_sercom_get_sercom_inst_index+0x2e>
    1302:	2301      	movs	r3, #1
    1304:	009a      	lsls	r2, r3, #2
    1306:	4669      	mov	r1, sp
    1308:	5852      	ldr	r2, [r2, r1]
    130a:	4282      	cmp	r2, r0
    130c:	d006      	beq.n	131c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    130e:	3301      	adds	r3, #1
    1310:	2b06      	cmp	r3, #6
    1312:	d1f7      	bne.n	1304 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1314:	2000      	movs	r0, #0
}
    1316:	b007      	add	sp, #28
    1318:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    131a:	2300      	movs	r3, #0
			return i;
    131c:	b2d8      	uxtb	r0, r3
    131e:	e7fa      	b.n	1316 <_sercom_get_sercom_inst_index+0x2a>
    1320:	00004038 	.word	0x00004038

00001324 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1324:	4770      	bx	lr
	...

00001328 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1328:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    132a:	4b0a      	ldr	r3, [pc, #40]	; (1354 <_sercom_set_handler+0x2c>)
    132c:	781b      	ldrb	r3, [r3, #0]
    132e:	2b00      	cmp	r3, #0
    1330:	d10c      	bne.n	134c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1332:	4f09      	ldr	r7, [pc, #36]	; (1358 <_sercom_set_handler+0x30>)
    1334:	4e09      	ldr	r6, [pc, #36]	; (135c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1336:	4d0a      	ldr	r5, [pc, #40]	; (1360 <_sercom_set_handler+0x38>)
    1338:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    133a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    133c:	195a      	adds	r2, r3, r5
    133e:	6014      	str	r4, [r2, #0]
    1340:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1342:	2b18      	cmp	r3, #24
    1344:	d1f9      	bne.n	133a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1346:	2201      	movs	r2, #1
    1348:	4b02      	ldr	r3, [pc, #8]	; (1354 <_sercom_set_handler+0x2c>)
    134a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    134c:	0080      	lsls	r0, r0, #2
    134e:	4b02      	ldr	r3, [pc, #8]	; (1358 <_sercom_set_handler+0x30>)
    1350:	50c1      	str	r1, [r0, r3]
}
    1352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1354:	20000122 	.word	0x20000122
    1358:	20000124 	.word	0x20000124
    135c:	00001325 	.word	0x00001325
    1360:	20000430 	.word	0x20000430

00001364 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1364:	b500      	push	{lr}
    1366:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1368:	2309      	movs	r3, #9
    136a:	466a      	mov	r2, sp
    136c:	7013      	strb	r3, [r2, #0]
    136e:	3301      	adds	r3, #1
    1370:	7053      	strb	r3, [r2, #1]
    1372:	3301      	adds	r3, #1
    1374:	7093      	strb	r3, [r2, #2]
    1376:	3301      	adds	r3, #1
    1378:	70d3      	strb	r3, [r2, #3]
    137a:	3301      	adds	r3, #1
    137c:	7113      	strb	r3, [r2, #4]
    137e:	3301      	adds	r3, #1
    1380:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1382:	4b03      	ldr	r3, [pc, #12]	; (1390 <_sercom_get_interrupt_vector+0x2c>)
    1384:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1386:	466b      	mov	r3, sp
    1388:	5618      	ldrsb	r0, [r3, r0]
}
    138a:	b003      	add	sp, #12
    138c:	bd00      	pop	{pc}
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	000012ed 	.word	0x000012ed

00001394 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1394:	b510      	push	{r4, lr}
    1396:	4b02      	ldr	r3, [pc, #8]	; (13a0 <SERCOM0_Handler+0xc>)
    1398:	681b      	ldr	r3, [r3, #0]
    139a:	2000      	movs	r0, #0
    139c:	4798      	blx	r3
    139e:	bd10      	pop	{r4, pc}
    13a0:	20000124 	.word	0x20000124

000013a4 <SERCOM1_Handler>:
    13a4:	b510      	push	{r4, lr}
    13a6:	4b02      	ldr	r3, [pc, #8]	; (13b0 <SERCOM1_Handler+0xc>)
    13a8:	685b      	ldr	r3, [r3, #4]
    13aa:	2001      	movs	r0, #1
    13ac:	4798      	blx	r3
    13ae:	bd10      	pop	{r4, pc}
    13b0:	20000124 	.word	0x20000124

000013b4 <SERCOM2_Handler>:
    13b4:	b510      	push	{r4, lr}
    13b6:	4b02      	ldr	r3, [pc, #8]	; (13c0 <SERCOM2_Handler+0xc>)
    13b8:	689b      	ldr	r3, [r3, #8]
    13ba:	2002      	movs	r0, #2
    13bc:	4798      	blx	r3
    13be:	bd10      	pop	{r4, pc}
    13c0:	20000124 	.word	0x20000124

000013c4 <SERCOM3_Handler>:
    13c4:	b510      	push	{r4, lr}
    13c6:	4b02      	ldr	r3, [pc, #8]	; (13d0 <SERCOM3_Handler+0xc>)
    13c8:	68db      	ldr	r3, [r3, #12]
    13ca:	2003      	movs	r0, #3
    13cc:	4798      	blx	r3
    13ce:	bd10      	pop	{r4, pc}
    13d0:	20000124 	.word	0x20000124

000013d4 <SERCOM4_Handler>:
    13d4:	b510      	push	{r4, lr}
    13d6:	4b02      	ldr	r3, [pc, #8]	; (13e0 <SERCOM4_Handler+0xc>)
    13d8:	691b      	ldr	r3, [r3, #16]
    13da:	2004      	movs	r0, #4
    13dc:	4798      	blx	r3
    13de:	bd10      	pop	{r4, pc}
    13e0:	20000124 	.word	0x20000124

000013e4 <SERCOM5_Handler>:
    13e4:	b510      	push	{r4, lr}
    13e6:	4b02      	ldr	r3, [pc, #8]	; (13f0 <SERCOM5_Handler+0xc>)
    13e8:	695b      	ldr	r3, [r3, #20]
    13ea:	2005      	movs	r0, #5
    13ec:	4798      	blx	r3
    13ee:	bd10      	pop	{r4, pc}
    13f0:	20000124 	.word	0x20000124

000013f4 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    13f4:	b570      	push	{r4, r5, r6, lr}
    13f6:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    13f8:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    13fa:	0020      	movs	r0, r4
    13fc:	4b0e      	ldr	r3, [pc, #56]	; (1438 <spi_reset+0x44>)
    13fe:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1400:	231f      	movs	r3, #31
    1402:	4018      	ands	r0, r3
    1404:	3b1e      	subs	r3, #30
    1406:	4083      	lsls	r3, r0
    1408:	2280      	movs	r2, #128	; 0x80
    140a:	490c      	ldr	r1, [pc, #48]	; (143c <spi_reset+0x48>)
    140c:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    140e:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1410:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1412:	2b00      	cmp	r3, #0
    1414:	d1fc      	bne.n	1410 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1416:	338f      	adds	r3, #143	; 0x8f
    1418:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    141a:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    141c:	6823      	ldr	r3, [r4, #0]
    141e:	2202      	movs	r2, #2
    1420:	4393      	bics	r3, r2
    1422:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1424:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1426:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    1428:	2b00      	cmp	r3, #0
    142a:	d1fc      	bne.n	1426 <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    142c:	6823      	ldr	r3, [r4, #0]
    142e:	2201      	movs	r2, #1
    1430:	4313      	orrs	r3, r2
    1432:	6023      	str	r3, [r4, #0]
}
    1434:	bd70      	pop	{r4, r5, r6, pc}
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	00001365 	.word	0x00001365
    143c:	e000e100 	.word	0xe000e100

00001440 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    1440:	b570      	push	{r4, r5, r6, lr}
    1442:	b082      	sub	sp, #8
    1444:	0005      	movs	r5, r0
    1446:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1448:	2200      	movs	r2, #0
    144a:	466b      	mov	r3, sp
    144c:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    144e:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1450:	0030      	movs	r0, r6
    1452:	4b24      	ldr	r3, [pc, #144]	; (14e4 <spi_set_baudrate+0xa4>)
    1454:	4798      	blx	r3
    1456:	231f      	movs	r3, #31
    1458:	4018      	ands	r0, r3
    145a:	3b1e      	subs	r3, #30
    145c:	4083      	lsls	r3, r0
    145e:	2280      	movs	r2, #128	; 0x80
    1460:	4921      	ldr	r1, [pc, #132]	; (14e8 <spi_set_baudrate+0xa8>)
    1462:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1464:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1466:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1468:	2b00      	cmp	r3, #0
    146a:	d1fc      	bne.n	1466 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    146c:	338f      	adds	r3, #143	; 0x8f
    146e:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1470:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1472:	6833      	ldr	r3, [r6, #0]
    1474:	2202      	movs	r2, #2
    1476:	4393      	bics	r3, r2
    1478:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    147a:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    147c:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    147e:	2b00      	cmp	r3, #0
    1480:	d1fc      	bne.n	147c <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1482:	4b1a      	ldr	r3, [pc, #104]	; (14ec <spi_set_baudrate+0xac>)
    1484:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1486:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1488:	b2c0      	uxtb	r0, r0
    148a:	4b19      	ldr	r3, [pc, #100]	; (14f0 <spi_set_baudrate+0xb0>)
    148c:	4798      	blx	r3
    148e:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    1490:	466b      	mov	r3, sp
    1492:	1d9a      	adds	r2, r3, #6
    1494:	0020      	movs	r0, r4
    1496:	4b17      	ldr	r3, [pc, #92]	; (14f4 <spi_set_baudrate+0xb4>)
    1498:	4798      	blx	r3
    149a:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    149c:	d003      	beq.n	14a6 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    149e:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    14a0:	0020      	movs	r0, r4
    14a2:	b002      	add	sp, #8
    14a4:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    14a6:	466b      	mov	r3, sp
    14a8:	3306      	adds	r3, #6
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14ae:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    14b0:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    14b2:	2b00      	cmp	r3, #0
    14b4:	d1fc      	bne.n	14b0 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14b6:	0030      	movs	r0, r6
    14b8:	4b0a      	ldr	r3, [pc, #40]	; (14e4 <spi_set_baudrate+0xa4>)
    14ba:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14bc:	231f      	movs	r3, #31
    14be:	4018      	ands	r0, r3
    14c0:	3b1e      	subs	r3, #30
    14c2:	4083      	lsls	r3, r0
    14c4:	4a08      	ldr	r2, [pc, #32]	; (14e8 <spi_set_baudrate+0xa8>)
    14c6:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14c8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    14ca:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    14cc:	2b00      	cmp	r3, #0
    14ce:	d1fc      	bne.n	14ca <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    14d0:	6833      	ldr	r3, [r6, #0]
    14d2:	2202      	movs	r2, #2
    14d4:	4313      	orrs	r3, r2
    14d6:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14d8:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    14da:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    14dc:	2b00      	cmp	r3, #0
    14de:	d1fc      	bne.n	14da <spi_set_baudrate+0x9a>
    14e0:	e7de      	b.n	14a0 <spi_set_baudrate+0x60>
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	00001365 	.word	0x00001365
    14e8:	e000e100 	.word	0xe000e100
    14ec:	000012ed 	.word	0x000012ed
    14f0:	0000270d 	.word	0x0000270d
    14f4:	0000106b 	.word	0x0000106b

000014f8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    14f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14fa:	b08b      	sub	sp, #44	; 0x2c
    14fc:	0005      	movs	r5, r0
    14fe:	000c      	movs	r4, r1
    1500:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1502:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1504:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1506:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1508:	079b      	lsls	r3, r3, #30
    150a:	d501      	bpl.n	1510 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    150c:	b00b      	add	sp, #44	; 0x2c
    150e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1510:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1512:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1514:	07db      	lsls	r3, r3, #31
    1516:	d4f9      	bmi.n	150c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1518:	0008      	movs	r0, r1
    151a:	4b60      	ldr	r3, [pc, #384]	; (169c <spi_init+0x1a4>)
    151c:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    151e:	4a60      	ldr	r2, [pc, #384]	; (16a0 <spi_init+0x1a8>)
    1520:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1522:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1524:	2301      	movs	r3, #1
    1526:	40bb      	lsls	r3, r7
    1528:	430b      	orrs	r3, r1
    152a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    152c:	a909      	add	r1, sp, #36	; 0x24
    152e:	2724      	movs	r7, #36	; 0x24
    1530:	5df3      	ldrb	r3, [r6, r7]
    1532:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1534:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1536:	b2c3      	uxtb	r3, r0
    1538:	9301      	str	r3, [sp, #4]
    153a:	0018      	movs	r0, r3
    153c:	4b59      	ldr	r3, [pc, #356]	; (16a4 <spi_init+0x1ac>)
    153e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1540:	9801      	ldr	r0, [sp, #4]
    1542:	4b59      	ldr	r3, [pc, #356]	; (16a8 <spi_init+0x1b0>)
    1544:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1546:	5df0      	ldrb	r0, [r6, r7]
    1548:	2100      	movs	r1, #0
    154a:	4b58      	ldr	r3, [pc, #352]	; (16ac <spi_init+0x1b4>)
    154c:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    154e:	7833      	ldrb	r3, [r6, #0]
    1550:	2b01      	cmp	r3, #1
    1552:	d038      	beq.n	15c6 <spi_init+0xce>
    1554:	002b      	movs	r3, r5
    1556:	330c      	adds	r3, #12
    1558:	0029      	movs	r1, r5
    155a:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    155c:	2200      	movs	r2, #0
    155e:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1560:	428b      	cmp	r3, r1
    1562:	d1fc      	bne.n	155e <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    1564:	2300      	movs	r3, #0
    1566:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1568:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    156a:	2400      	movs	r4, #0
    156c:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    156e:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1570:	3336      	adds	r3, #54	; 0x36
    1572:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1574:	3301      	adds	r3, #1
    1576:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1578:	3301      	adds	r3, #1
    157a:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    157c:	3b35      	subs	r3, #53	; 0x35
    157e:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    1580:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1582:	6828      	ldr	r0, [r5, #0]
    1584:	4b45      	ldr	r3, [pc, #276]	; (169c <spi_init+0x1a4>)
    1586:	4798      	blx	r3
    1588:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    158a:	4949      	ldr	r1, [pc, #292]	; (16b0 <spi_init+0x1b8>)
    158c:	4b49      	ldr	r3, [pc, #292]	; (16b4 <spi_init+0x1bc>)
    158e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1590:	00bf      	lsls	r7, r7, #2
    1592:	4b49      	ldr	r3, [pc, #292]	; (16b8 <spi_init+0x1c0>)
    1594:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1596:	682f      	ldr	r7, [r5, #0]
    1598:	ab04      	add	r3, sp, #16
    159a:	2280      	movs	r2, #128	; 0x80
    159c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    159e:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    15a0:	3a7f      	subs	r2, #127	; 0x7f
    15a2:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    15a4:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    15a6:	7833      	ldrb	r3, [r6, #0]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d102      	bne.n	15b2 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    15ac:	2200      	movs	r2, #0
    15ae:	ab04      	add	r3, sp, #16
    15b0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    15b2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    15b4:	9305      	str	r3, [sp, #20]
    15b6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    15b8:	9306      	str	r3, [sp, #24]
    15ba:	6b33      	ldr	r3, [r6, #48]	; 0x30
    15bc:	9307      	str	r3, [sp, #28]
    15be:	6b73      	ldr	r3, [r6, #52]	; 0x34
    15c0:	9308      	str	r3, [sp, #32]
    15c2:	2400      	movs	r4, #0
    15c4:	e00b      	b.n	15de <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    15c6:	6823      	ldr	r3, [r4, #0]
    15c8:	220c      	movs	r2, #12
    15ca:	4313      	orrs	r3, r2
    15cc:	6023      	str	r3, [r4, #0]
    15ce:	e7c1      	b.n	1554 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    15d0:	0038      	movs	r0, r7
    15d2:	4b3a      	ldr	r3, [pc, #232]	; (16bc <spi_init+0x1c4>)
    15d4:	4798      	blx	r3
    15d6:	e00a      	b.n	15ee <spi_init+0xf6>
    15d8:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    15da:	2c04      	cmp	r4, #4
    15dc:	d010      	beq.n	1600 <spi_init+0x108>
    15de:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    15e0:	00a3      	lsls	r3, r4, #2
    15e2:	aa02      	add	r2, sp, #8
    15e4:	200c      	movs	r0, #12
    15e6:	1812      	adds	r2, r2, r0
    15e8:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    15ea:	2800      	cmp	r0, #0
    15ec:	d0f0      	beq.n	15d0 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    15ee:	1c43      	adds	r3, r0, #1
    15f0:	d0f2      	beq.n	15d8 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    15f2:	a904      	add	r1, sp, #16
    15f4:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    15f6:	0c00      	lsrs	r0, r0, #16
    15f8:	b2c0      	uxtb	r0, r0
    15fa:	4b31      	ldr	r3, [pc, #196]	; (16c0 <spi_init+0x1c8>)
    15fc:	4798      	blx	r3
    15fe:	e7eb      	b.n	15d8 <spi_init+0xe0>
	module->mode             = config->mode;
    1600:	7833      	ldrb	r3, [r6, #0]
    1602:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1604:	7c33      	ldrb	r3, [r6, #16]
    1606:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1608:	7cb3      	ldrb	r3, [r6, #18]
    160a:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    160c:	7d33      	ldrb	r3, [r6, #20]
    160e:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    1610:	2200      	movs	r2, #0
    1612:	ab02      	add	r3, sp, #8
    1614:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    1616:	7833      	ldrb	r3, [r6, #0]
    1618:	2b01      	cmp	r3, #1
    161a:	d028      	beq.n	166e <spi_init+0x176>
	ctrla |= config->transfer_mode;
    161c:	6873      	ldr	r3, [r6, #4]
    161e:	68b2      	ldr	r2, [r6, #8]
    1620:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    1622:	68f2      	ldr	r2, [r6, #12]
    1624:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    1626:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    1628:	7c72      	ldrb	r2, [r6, #17]
    162a:	2a00      	cmp	r2, #0
    162c:	d103      	bne.n	1636 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    162e:	4a25      	ldr	r2, [pc, #148]	; (16c4 <spi_init+0x1cc>)
    1630:	7892      	ldrb	r2, [r2, #2]
    1632:	0792      	lsls	r2, r2, #30
    1634:	d501      	bpl.n	163a <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1636:	2280      	movs	r2, #128	; 0x80
    1638:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    163a:	7cb2      	ldrb	r2, [r6, #18]
    163c:	2a00      	cmp	r2, #0
    163e:	d002      	beq.n	1646 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1640:	2280      	movs	r2, #128	; 0x80
    1642:	0292      	lsls	r2, r2, #10
    1644:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    1646:	7cf2      	ldrb	r2, [r6, #19]
    1648:	2a00      	cmp	r2, #0
    164a:	d002      	beq.n	1652 <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    164c:	2280      	movs	r2, #128	; 0x80
    164e:	0092      	lsls	r2, r2, #2
    1650:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    1652:	7d32      	ldrb	r2, [r6, #20]
    1654:	2a00      	cmp	r2, #0
    1656:	d002      	beq.n	165e <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1658:	2280      	movs	r2, #128	; 0x80
    165a:	0192      	lsls	r2, r2, #6
    165c:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    165e:	683a      	ldr	r2, [r7, #0]
    1660:	4313      	orrs	r3, r2
    1662:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	430b      	orrs	r3, r1
    1668:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    166a:	2000      	movs	r0, #0
    166c:	e74e      	b.n	150c <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    166e:	6828      	ldr	r0, [r5, #0]
    1670:	4b0a      	ldr	r3, [pc, #40]	; (169c <spi_init+0x1a4>)
    1672:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1674:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1676:	b2c0      	uxtb	r0, r0
    1678:	4b13      	ldr	r3, [pc, #76]	; (16c8 <spi_init+0x1d0>)
    167a:	4798      	blx	r3
    167c:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    167e:	ab02      	add	r3, sp, #8
    1680:	1d9a      	adds	r2, r3, #6
    1682:	69b0      	ldr	r0, [r6, #24]
    1684:	4b11      	ldr	r3, [pc, #68]	; (16cc <spi_init+0x1d4>)
    1686:	4798      	blx	r3
    1688:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    168a:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    168c:	2b00      	cmp	r3, #0
    168e:	d000      	beq.n	1692 <spi_init+0x19a>
    1690:	e73c      	b.n	150c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    1692:	ab02      	add	r3, sp, #8
    1694:	3306      	adds	r3, #6
    1696:	781b      	ldrb	r3, [r3, #0]
    1698:	733b      	strb	r3, [r7, #12]
    169a:	e7bf      	b.n	161c <spi_init+0x124>
    169c:	000012ed 	.word	0x000012ed
    16a0:	40000400 	.word	0x40000400
    16a4:	000026f1 	.word	0x000026f1
    16a8:	00002665 	.word	0x00002665
    16ac:	00001129 	.word	0x00001129
    16b0:	00001965 	.word	0x00001965
    16b4:	00001329 	.word	0x00001329
    16b8:	20000430 	.word	0x20000430
    16bc:	00001175 	.word	0x00001175
    16c0:	000027e9 	.word	0x000027e9
    16c4:	41002000 	.word	0x41002000
    16c8:	0000270d 	.word	0x0000270d
    16cc:	0000106b 	.word	0x0000106b

000016d0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    16d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d2:	46d6      	mov	lr, sl
    16d4:	4647      	mov	r7, r8
    16d6:	b580      	push	{r7, lr}
    16d8:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    16da:	2438      	movs	r4, #56	; 0x38
    16dc:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    16de:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    16e0:	2d05      	cmp	r5, #5
    16e2:	d002      	beq.n	16ea <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    16e4:	3412      	adds	r4, #18
	if (length == 0) {
    16e6:	2a00      	cmp	r2, #0
    16e8:	d105      	bne.n	16f6 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    16ea:	0020      	movs	r0, r4
    16ec:	b003      	add	sp, #12
    16ee:	bc0c      	pop	{r2, r3}
    16f0:	4690      	mov	r8, r2
    16f2:	469a      	mov	sl, r3
    16f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    16f6:	79c4      	ldrb	r4, [r0, #7]
    16f8:	2c00      	cmp	r4, #0
    16fa:	d144      	bne.n	1786 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    16fc:	341c      	adds	r4, #28
    16fe:	e7f4      	b.n	16ea <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1700:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1702:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    1704:	423c      	tst	r4, r7
    1706:	d0fc      	beq.n	1702 <spi_read_buffer_wait+0x32>
    1708:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    170a:	423c      	tst	r4, r7
    170c:	d01a      	beq.n	1744 <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    170e:	4644      	mov	r4, r8
    1710:	62ac      	str	r4, [r5, #40]	; 0x28
    1712:	e017      	b.n	1744 <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1714:	7984      	ldrb	r4, [r0, #6]
    1716:	2c01      	cmp	r4, #1
    1718:	d026      	beq.n	1768 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    171a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    171c:	b2ec      	uxtb	r4, r5
    171e:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    1720:	9c01      	ldr	r4, [sp, #4]
    1722:	2c00      	cmp	r4, #0
    1724:	d13a      	bne.n	179c <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    1726:	1c75      	adds	r5, r6, #1
    1728:	b2ad      	uxth	r5, r5
    172a:	4664      	mov	r4, ip
    172c:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    172e:	7984      	ldrb	r4, [r0, #6]
    1730:	2c01      	cmp	r4, #1
    1732:	d01e      	beq.n	1772 <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    1734:	002e      	movs	r6, r5
	while (length--) {
    1736:	3a01      	subs	r2, #1
    1738:	b292      	uxth	r2, r2
    173a:	4552      	cmp	r2, sl
    173c:	d01f      	beq.n	177e <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    173e:	7944      	ldrb	r4, [r0, #5]
    1740:	2c01      	cmp	r4, #1
    1742:	d0dd      	beq.n	1700 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1744:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1746:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    1748:	421c      	tst	r4, r3
    174a:	d0fc      	beq.n	1746 <spi_read_buffer_wait+0x76>
    174c:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    174e:	421c      	tst	r4, r3
    1750:	d017      	beq.n	1782 <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1752:	8b6c      	ldrh	r4, [r5, #26]
    1754:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    1756:	2400      	movs	r4, #0
    1758:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    175a:	4664      	mov	r4, ip
    175c:	421c      	tst	r4, r3
    175e:	d0d9      	beq.n	1714 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1760:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    1762:	241e      	movs	r4, #30
    1764:	9401      	str	r4, [sp, #4]
    1766:	e7d5      	b.n	1714 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1768:	6aac      	ldr	r4, [r5, #40]	; 0x28
    176a:	05e4      	lsls	r4, r4, #23
    176c:	0de4      	lsrs	r4, r4, #23
    176e:	46a4      	mov	ip, r4
    1770:	e7d6      	b.n	1720 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    1772:	3602      	adds	r6, #2
    1774:	b2b6      	uxth	r6, r6
    1776:	4664      	mov	r4, ip
    1778:	0a24      	lsrs	r4, r4, #8
    177a:	554c      	strb	r4, [r1, r5]
    177c:	e7db      	b.n	1736 <spi_read_buffer_wait+0x66>
    177e:	9c01      	ldr	r4, [sp, #4]
    1780:	e7b3      	b.n	16ea <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    1782:	2410      	movs	r4, #16
    1784:	e7b1      	b.n	16ea <spi_read_buffer_wait+0x1a>
	while (length--) {
    1786:	3a01      	subs	r2, #1
    1788:	b292      	uxth	r2, r2
    178a:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    178c:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    178e:	05db      	lsls	r3, r3, #23
    1790:	0ddb      	lsrs	r3, r3, #23
    1792:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    1794:	2304      	movs	r3, #4
	while (length--) {
    1796:	4c02      	ldr	r4, [pc, #8]	; (17a0 <spi_read_buffer_wait+0xd0>)
    1798:	46a2      	mov	sl, r4
    179a:	e7d0      	b.n	173e <spi_read_buffer_wait+0x6e>
    179c:	9c01      	ldr	r4, [sp, #4]
    179e:	e7a4      	b.n	16ea <spi_read_buffer_wait+0x1a>
    17a0:	0000ffff 	.word	0x0000ffff

000017a4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    17a4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    17a6:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    17a8:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    17aa:	2c01      	cmp	r4, #1
    17ac:	d001      	beq.n	17b2 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    17ae:	0018      	movs	r0, r3
    17b0:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    17b2:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    17b4:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    17b6:	2c00      	cmp	r4, #0
    17b8:	d1f9      	bne.n	17ae <spi_select_slave+0xa>
		if (select) {
    17ba:	2a00      	cmp	r2, #0
    17bc:	d058      	beq.n	1870 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    17be:	784b      	ldrb	r3, [r1, #1]
    17c0:	2b00      	cmp	r3, #0
    17c2:	d044      	beq.n	184e <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    17c4:	6803      	ldr	r3, [r0, #0]
    17c6:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    17c8:	07db      	lsls	r3, r3, #31
    17ca:	d410      	bmi.n	17ee <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    17cc:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    17ce:	09d1      	lsrs	r1, r2, #7
		return NULL;
    17d0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17d2:	2900      	cmp	r1, #0
    17d4:	d104      	bne.n	17e0 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    17d6:	0953      	lsrs	r3, r2, #5
    17d8:	01db      	lsls	r3, r3, #7
    17da:	492e      	ldr	r1, [pc, #184]	; (1894 <spi_select_slave+0xf0>)
    17dc:	468c      	mov	ip, r1
    17de:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    17e0:	211f      	movs	r1, #31
    17e2:	4011      	ands	r1, r2
    17e4:	2201      	movs	r2, #1
    17e6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    17e8:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    17ea:	2305      	movs	r3, #5
    17ec:	e7df      	b.n	17ae <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    17ee:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    17f0:	09d4      	lsrs	r4, r2, #7
		return NULL;
    17f2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    17f4:	2c00      	cmp	r4, #0
    17f6:	d104      	bne.n	1802 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    17f8:	0953      	lsrs	r3, r2, #5
    17fa:	01db      	lsls	r3, r3, #7
    17fc:	4c25      	ldr	r4, [pc, #148]	; (1894 <spi_select_slave+0xf0>)
    17fe:	46a4      	mov	ip, r4
    1800:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1802:	241f      	movs	r4, #31
    1804:	4014      	ands	r4, r2
    1806:	2201      	movs	r2, #1
    1808:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    180a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    180c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    180e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1810:	07d2      	lsls	r2, r2, #31
    1812:	d501      	bpl.n	1818 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1814:	788a      	ldrb	r2, [r1, #2]
    1816:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    1818:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    181a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    181c:	2a00      	cmp	r2, #0
    181e:	d1c6      	bne.n	17ae <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1820:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    1822:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1824:	7e13      	ldrb	r3, [r2, #24]
    1826:	420b      	tst	r3, r1
    1828:	d0fc      	beq.n	1824 <spi_select_slave+0x80>
    182a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    182c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    182e:	0749      	lsls	r1, r1, #29
    1830:	d5bd      	bpl.n	17ae <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1832:	8b53      	ldrh	r3, [r2, #26]
    1834:	075b      	lsls	r3, r3, #29
    1836:	d501      	bpl.n	183c <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1838:	2304      	movs	r3, #4
    183a:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    183c:	7983      	ldrb	r3, [r0, #6]
    183e:	2b01      	cmp	r3, #1
    1840:	d002      	beq.n	1848 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1842:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1844:	2300      	movs	r3, #0
    1846:	e7b2      	b.n	17ae <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1848:	6a93      	ldr	r3, [r2, #40]	; 0x28
    184a:	2300      	movs	r3, #0
    184c:	e7af      	b.n	17ae <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    184e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1850:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1852:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1854:	2900      	cmp	r1, #0
    1856:	d104      	bne.n	1862 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    1858:	0953      	lsrs	r3, r2, #5
    185a:	01db      	lsls	r3, r3, #7
    185c:	490d      	ldr	r1, [pc, #52]	; (1894 <spi_select_slave+0xf0>)
    185e:	468c      	mov	ip, r1
    1860:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1862:	211f      	movs	r1, #31
    1864:	4011      	ands	r1, r2
    1866:	2201      	movs	r2, #1
    1868:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    186a:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    186c:	2300      	movs	r3, #0
    186e:	e79e      	b.n	17ae <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    1870:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    1872:	09d1      	lsrs	r1, r2, #7
		return NULL;
    1874:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1876:	2900      	cmp	r1, #0
    1878:	d104      	bne.n	1884 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    187a:	0953      	lsrs	r3, r2, #5
    187c:	01db      	lsls	r3, r3, #7
    187e:	4905      	ldr	r1, [pc, #20]	; (1894 <spi_select_slave+0xf0>)
    1880:	468c      	mov	ip, r1
    1882:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1884:	211f      	movs	r1, #31
    1886:	4011      	ands	r1, r2
    1888:	2201      	movs	r2, #1
    188a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    188c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    188e:	2300      	movs	r3, #0
    1890:	e78d      	b.n	17ae <spi_select_slave+0xa>
    1892:	46c0      	nop			; (mov r8, r8)
    1894:	41004400 	.word	0x41004400

00001898 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1898:	b5f0      	push	{r4, r5, r6, r7, lr}
    189a:	46de      	mov	lr, fp
    189c:	4657      	mov	r7, sl
    189e:	464e      	mov	r6, r9
    18a0:	4645      	mov	r5, r8
    18a2:	b5e0      	push	{r5, r6, r7, lr}
    18a4:	b083      	sub	sp, #12
    18a6:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    18a8:	2338      	movs	r3, #56	; 0x38
    18aa:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    18ac:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    18ae:	2c05      	cmp	r4, #5
    18b0:	d002      	beq.n	18b8 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    18b2:	3312      	adds	r3, #18
	if (length == 0) {
    18b4:	2a00      	cmp	r2, #0
    18b6:	d14b      	bne.n	1950 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    18b8:	0018      	movs	r0, r3
    18ba:	b003      	add	sp, #12
    18bc:	bc3c      	pop	{r2, r3, r4, r5}
    18be:	4690      	mov	r8, r2
    18c0:	4699      	mov	r9, r3
    18c2:	46a2      	mov	sl, r4
    18c4:	46ab      	mov	fp, r5
    18c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    18c8:	3702      	adds	r7, #2
    18ca:	b2bf      	uxth	r7, r7
    18cc:	4641      	mov	r1, r8
    18ce:	4653      	mov	r3, sl
    18d0:	5c59      	ldrb	r1, [r3, r1]
    18d2:	0209      	lsls	r1, r1, #8
    18d4:	465b      	mov	r3, fp
    18d6:	430b      	orrs	r3, r1
    18d8:	e018      	b.n	190c <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18da:	7983      	ldrb	r3, [r0, #6]
    18dc:	2b01      	cmp	r3, #1
    18de:	d02a      	beq.n	1936 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    18e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    18e2:	3e01      	subs	r6, #1
    18e4:	b2b6      	uxth	r6, r6
    18e6:	4566      	cmp	r6, ip
    18e8:	d027      	beq.n	193a <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    18ea:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    18ec:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    18ee:	4223      	tst	r3, r4
    18f0:	d0fc      	beq.n	18ec <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    18f2:	1c7b      	adds	r3, r7, #1
    18f4:	b29b      	uxth	r3, r3
    18f6:	4698      	mov	r8, r3
    18f8:	4653      	mov	r3, sl
    18fa:	5ddb      	ldrb	r3, [r3, r7]
    18fc:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    18fe:	7981      	ldrb	r1, [r0, #6]
    1900:	2901      	cmp	r1, #1
    1902:	d0e1      	beq.n	18c8 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    1904:	4669      	mov	r1, sp
    1906:	80cb      	strh	r3, [r1, #6]
    1908:	88cb      	ldrh	r3, [r1, #6]
    190a:	4647      	mov	r7, r8
    190c:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    190e:	4221      	tst	r1, r4
    1910:	d002      	beq.n	1918 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    1912:	05db      	lsls	r3, r3, #23
    1914:	0ddb      	lsrs	r3, r3, #23
    1916:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    1918:	79c3      	ldrb	r3, [r0, #7]
    191a:	2b00      	cmp	r3, #0
    191c:	d0e1      	beq.n	18e2 <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    191e:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1920:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    1922:	422b      	tst	r3, r5
    1924:	d0fc      	beq.n	1920 <spi_write_buffer_wait+0x88>
    1926:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    1928:	422b      	tst	r3, r5
    192a:	d0da      	beq.n	18e2 <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    192c:	8b53      	ldrh	r3, [r2, #26]
    192e:	422b      	tst	r3, r5
    1930:	d0d3      	beq.n	18da <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1932:	8355      	strh	r5, [r2, #26]
    1934:	e7d1      	b.n	18da <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1936:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1938:	e7d3      	b.n	18e2 <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    193a:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    193c:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    193e:	2a01      	cmp	r2, #1
    1940:	d1ba      	bne.n	18b8 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1942:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    1944:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1946:	7e0b      	ldrb	r3, [r1, #24]
    1948:	4213      	tst	r3, r2
    194a:	d0fc      	beq.n	1946 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    194c:	2300      	movs	r3, #0
    194e:	e7b3      	b.n	18b8 <spi_write_buffer_wait+0x20>
	while (length--) {
    1950:	3a01      	subs	r2, #1
    1952:	b296      	uxth	r6, r2
    1954:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    1956:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    1958:	2504      	movs	r5, #4
	while (length--) {
    195a:	4b01      	ldr	r3, [pc, #4]	; (1960 <spi_write_buffer_wait+0xc8>)
    195c:	469c      	mov	ip, r3
    195e:	e7c4      	b.n	18ea <spi_write_buffer_wait+0x52>
    1960:	0000ffff 	.word	0x0000ffff

00001964 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    1966:	0080      	lsls	r0, r0, #2
    1968:	4b70      	ldr	r3, [pc, #448]	; (1b2c <_spi_interrupt_handler+0x1c8>)
    196a:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    196c:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    196e:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    1970:	5ce7      	ldrb	r7, [r4, r3]
    1972:	2236      	movs	r2, #54	; 0x36
    1974:	5ca2      	ldrb	r2, [r4, r2]
    1976:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1978:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    197a:	7db5      	ldrb	r5, [r6, #22]
    197c:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    197e:	07eb      	lsls	r3, r5, #31
    1980:	d502      	bpl.n	1988 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1982:	7963      	ldrb	r3, [r4, #5]
    1984:	2b01      	cmp	r3, #1
    1986:	d01e      	beq.n	19c6 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1988:	076b      	lsls	r3, r5, #29
    198a:	d511      	bpl.n	19b0 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    198c:	8b73      	ldrh	r3, [r6, #26]
    198e:	075b      	lsls	r3, r3, #29
    1990:	d55a      	bpl.n	1a48 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1992:	7a63      	ldrb	r3, [r4, #9]
    1994:	2b01      	cmp	r3, #1
    1996:	d008      	beq.n	19aa <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1998:	221e      	movs	r2, #30
    199a:	2338      	movs	r3, #56	; 0x38
    199c:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    199e:	3b35      	subs	r3, #53	; 0x35
    19a0:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    19a2:	3302      	adds	r3, #2
    19a4:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    19a6:	073b      	lsls	r3, r7, #28
    19a8:	d44a      	bmi.n	1a40 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    19aa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    19ac:	2304      	movs	r3, #4
    19ae:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    19b0:	07ab      	lsls	r3, r5, #30
    19b2:	d503      	bpl.n	19bc <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    19b4:	7963      	ldrb	r3, [r4, #5]
    19b6:	2b01      	cmp	r3, #1
    19b8:	d100      	bne.n	19bc <_spi_interrupt_handler+0x58>
    19ba:	e097      	b.n	1aec <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    19bc:	b26d      	sxtb	r5, r5
    19be:	2d00      	cmp	r5, #0
    19c0:	da00      	bge.n	19c4 <_spi_interrupt_handler+0x60>
    19c2:	e0a9      	b.n	1b18 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    19c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    19c6:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    19c8:	2b00      	cmp	r3, #0
    19ca:	d022      	beq.n	1a12 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    19cc:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    19ce:	2b00      	cmp	r3, #0
    19d0:	d0da      	beq.n	1988 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    19d2:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    19d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    19d6:	7813      	ldrb	r3, [r2, #0]
    19d8:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    19da:	1c50      	adds	r0, r2, #1
    19dc:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    19de:	79a0      	ldrb	r0, [r4, #6]
    19e0:	2801      	cmp	r0, #1
    19e2:	d027      	beq.n	1a34 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    19e4:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    19e6:	05db      	lsls	r3, r3, #23
    19e8:	0ddb      	lsrs	r3, r3, #23
    19ea:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    19ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    19ee:	3b01      	subs	r3, #1
    19f0:	b29b      	uxth	r3, r3
    19f2:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    19f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    19f6:	b29b      	uxth	r3, r3
    19f8:	2b00      	cmp	r3, #0
    19fa:	d1c5      	bne.n	1988 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    19fc:	3301      	adds	r3, #1
    19fe:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    1a00:	7a63      	ldrb	r3, [r4, #9]
    1a02:	2b01      	cmp	r3, #1
    1a04:	d1c0      	bne.n	1988 <_spi_interrupt_handler+0x24>
    1a06:	79e3      	ldrb	r3, [r4, #7]
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d1bd      	bne.n	1988 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1a0c:	3302      	adds	r3, #2
    1a0e:	75b3      	strb	r3, [r6, #22]
    1a10:	e7ba      	b.n	1988 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    1a12:	4b47      	ldr	r3, [pc, #284]	; (1b30 <_spi_interrupt_handler+0x1cc>)
    1a14:	881b      	ldrh	r3, [r3, #0]
    1a16:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1a18:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1a1a:	3b01      	subs	r3, #1
    1a1c:	b29b      	uxth	r3, r3
    1a1e:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    1a20:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1a22:	b29b      	uxth	r3, r3
    1a24:	2b00      	cmp	r3, #0
    1a26:	d101      	bne.n	1a2c <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1a28:	3301      	adds	r3, #1
    1a2a:	7533      	strb	r3, [r6, #20]
		if (0
    1a2c:	7963      	ldrb	r3, [r4, #5]
    1a2e:	2b01      	cmp	r3, #1
    1a30:	d0cc      	beq.n	19cc <_spi_interrupt_handler+0x68>
    1a32:	e7a9      	b.n	1988 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1a34:	7850      	ldrb	r0, [r2, #1]
    1a36:	0200      	lsls	r0, r0, #8
    1a38:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    1a3a:	3202      	adds	r2, #2
    1a3c:	62e2      	str	r2, [r4, #44]	; 0x2c
    1a3e:	e7d2      	b.n	19e6 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1a40:	0020      	movs	r0, r4
    1a42:	69a3      	ldr	r3, [r4, #24]
    1a44:	4798      	blx	r3
    1a46:	e7b0      	b.n	19aa <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    1a48:	7a63      	ldrb	r3, [r4, #9]
    1a4a:	2b01      	cmp	r3, #1
    1a4c:	d028      	beq.n	1aa0 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1a4e:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a52:	05db      	lsls	r3, r3, #23
    1a54:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    1a56:	b2da      	uxtb	r2, r3
    1a58:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1a5a:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    1a5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a5e:	1c51      	adds	r1, r2, #1
    1a60:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1a62:	79a1      	ldrb	r1, [r4, #6]
    1a64:	2901      	cmp	r1, #1
    1a66:	d034      	beq.n	1ad2 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    1a68:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1a6a:	3b01      	subs	r3, #1
    1a6c:	b29b      	uxth	r3, r3
    1a6e:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    1a70:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1a72:	b29b      	uxth	r3, r3
    1a74:	2b00      	cmp	r3, #0
    1a76:	d000      	beq.n	1a7a <_spi_interrupt_handler+0x116>
    1a78:	e79a      	b.n	19b0 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    1a7a:	2200      	movs	r2, #0
    1a7c:	3338      	adds	r3, #56	; 0x38
    1a7e:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1a80:	3b34      	subs	r3, #52	; 0x34
    1a82:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    1a84:	7a63      	ldrb	r3, [r4, #9]
    1a86:	2b02      	cmp	r3, #2
    1a88:	d029      	beq.n	1ade <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    1a8a:	7a63      	ldrb	r3, [r4, #9]
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d000      	beq.n	1a92 <_spi_interrupt_handler+0x12e>
    1a90:	e78e      	b.n	19b0 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    1a92:	07bb      	lsls	r3, r7, #30
    1a94:	d400      	bmi.n	1a98 <_spi_interrupt_handler+0x134>
    1a96:	e78b      	b.n	19b0 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    1a98:	0020      	movs	r0, r4
    1a9a:	6923      	ldr	r3, [r4, #16]
    1a9c:	4798      	blx	r3
    1a9e:	e787      	b.n	19b0 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1aa0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    1aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    1aa4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1aa6:	3b01      	subs	r3, #1
    1aa8:	b29b      	uxth	r3, r3
    1aaa:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    1aac:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1aae:	b29b      	uxth	r3, r3
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d000      	beq.n	1ab6 <_spi_interrupt_handler+0x152>
    1ab4:	e77c      	b.n	19b0 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1ab6:	3304      	adds	r3, #4
    1ab8:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    1aba:	2200      	movs	r2, #0
    1abc:	3334      	adds	r3, #52	; 0x34
    1abe:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    1ac0:	3b35      	subs	r3, #53	; 0x35
    1ac2:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    1ac4:	07fb      	lsls	r3, r7, #31
    1ac6:	d400      	bmi.n	1aca <_spi_interrupt_handler+0x166>
    1ac8:	e772      	b.n	19b0 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    1aca:	0020      	movs	r0, r4
    1acc:	68e3      	ldr	r3, [r4, #12]
    1ace:	4798      	blx	r3
    1ad0:	e76e      	b.n	19b0 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1ad2:	0a1b      	lsrs	r3, r3, #8
    1ad4:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    1ad6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ad8:	3301      	adds	r3, #1
    1ada:	62a3      	str	r3, [r4, #40]	; 0x28
    1adc:	e7c4      	b.n	1a68 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    1ade:	077b      	lsls	r3, r7, #29
    1ae0:	d400      	bmi.n	1ae4 <_spi_interrupt_handler+0x180>
    1ae2:	e765      	b.n	19b0 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    1ae4:	0020      	movs	r0, r4
    1ae6:	6963      	ldr	r3, [r4, #20]
    1ae8:	4798      	blx	r3
    1aea:	e761      	b.n	19b0 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1aec:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    1aee:	2b01      	cmp	r3, #1
    1af0:	d000      	beq.n	1af4 <_spi_interrupt_handler+0x190>
    1af2:	e763      	b.n	19bc <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    1af4:	79e3      	ldrb	r3, [r4, #7]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d000      	beq.n	1afc <_spi_interrupt_handler+0x198>
    1afa:	e75f      	b.n	19bc <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1afc:	3302      	adds	r3, #2
    1afe:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    1b00:	3301      	adds	r3, #1
    1b02:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    1b04:	2200      	movs	r2, #0
    1b06:	3335      	adds	r3, #53	; 0x35
    1b08:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    1b0a:	07fb      	lsls	r3, r7, #31
    1b0c:	d400      	bmi.n	1b10 <_spi_interrupt_handler+0x1ac>
    1b0e:	e755      	b.n	19bc <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    1b10:	0020      	movs	r0, r4
    1b12:	68e3      	ldr	r3, [r4, #12]
    1b14:	4798      	blx	r3
    1b16:	e751      	b.n	19bc <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1b18:	2380      	movs	r3, #128	; 0x80
    1b1a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    1b1c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    1b1e:	067b      	lsls	r3, r7, #25
    1b20:	d400      	bmi.n	1b24 <_spi_interrupt_handler+0x1c0>
    1b22:	e74f      	b.n	19c4 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    1b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1b26:	0020      	movs	r0, r4
    1b28:	4798      	blx	r3
}
    1b2a:	e74b      	b.n	19c4 <_spi_interrupt_handler+0x60>
    1b2c:	20000430 	.word	0x20000430
    1b30:	20000448 	.word	0x20000448

00001b34 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b36:	46de      	mov	lr, fp
    1b38:	4657      	mov	r7, sl
    1b3a:	464e      	mov	r6, r9
    1b3c:	4645      	mov	r5, r8
    1b3e:	b5e0      	push	{r5, r6, r7, lr}
    1b40:	b091      	sub	sp, #68	; 0x44
    1b42:	0005      	movs	r5, r0
    1b44:	000c      	movs	r4, r1
    1b46:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1b48:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1b4a:	0008      	movs	r0, r1
    1b4c:	4bbc      	ldr	r3, [pc, #752]	; (1e40 <usart_init+0x30c>)
    1b4e:	4798      	blx	r3
    1b50:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1b52:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1b54:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1b56:	07db      	lsls	r3, r3, #31
    1b58:	d506      	bpl.n	1b68 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1b5a:	b011      	add	sp, #68	; 0x44
    1b5c:	bc3c      	pop	{r2, r3, r4, r5}
    1b5e:	4690      	mov	r8, r2
    1b60:	4699      	mov	r9, r3
    1b62:	46a2      	mov	sl, r4
    1b64:	46ab      	mov	fp, r5
    1b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1b68:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    1b6a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1b6c:	079b      	lsls	r3, r3, #30
    1b6e:	d4f4      	bmi.n	1b5a <usart_init+0x26>
    1b70:	49b4      	ldr	r1, [pc, #720]	; (1e44 <usart_init+0x310>)
    1b72:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1b74:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1b76:	2301      	movs	r3, #1
    1b78:	40bb      	lsls	r3, r7
    1b7a:	4303      	orrs	r3, r0
    1b7c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1b7e:	a90f      	add	r1, sp, #60	; 0x3c
    1b80:	272d      	movs	r7, #45	; 0x2d
    1b82:	5df3      	ldrb	r3, [r6, r7]
    1b84:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1b86:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1b88:	b2d3      	uxtb	r3, r2
    1b8a:	9302      	str	r3, [sp, #8]
    1b8c:	0018      	movs	r0, r3
    1b8e:	4bae      	ldr	r3, [pc, #696]	; (1e48 <usart_init+0x314>)
    1b90:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1b92:	9802      	ldr	r0, [sp, #8]
    1b94:	4bad      	ldr	r3, [pc, #692]	; (1e4c <usart_init+0x318>)
    1b96:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1b98:	5df0      	ldrb	r0, [r6, r7]
    1b9a:	2100      	movs	r1, #0
    1b9c:	4bac      	ldr	r3, [pc, #688]	; (1e50 <usart_init+0x31c>)
    1b9e:	4798      	blx	r3
	module->character_size = config->character_size;
    1ba0:	7af3      	ldrb	r3, [r6, #11]
    1ba2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1ba4:	2324      	movs	r3, #36	; 0x24
    1ba6:	5cf3      	ldrb	r3, [r6, r3]
    1ba8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1baa:	2325      	movs	r3, #37	; 0x25
    1bac:	5cf3      	ldrb	r3, [r6, r3]
    1bae:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1bb0:	7ef3      	ldrb	r3, [r6, #27]
    1bb2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1bb4:	7f33      	ldrb	r3, [r6, #28]
    1bb6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1bb8:	682b      	ldr	r3, [r5, #0]
    1bba:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1bbc:	0018      	movs	r0, r3
    1bbe:	4ba0      	ldr	r3, [pc, #640]	; (1e40 <usart_init+0x30c>)
    1bc0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1bc2:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1bc4:	2200      	movs	r2, #0
    1bc6:	230e      	movs	r3, #14
    1bc8:	a906      	add	r1, sp, #24
    1bca:	468c      	mov	ip, r1
    1bcc:	4463      	add	r3, ip
    1bce:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1bd0:	8a32      	ldrh	r2, [r6, #16]
    1bd2:	9202      	str	r2, [sp, #8]
    1bd4:	2380      	movs	r3, #128	; 0x80
    1bd6:	01db      	lsls	r3, r3, #7
    1bd8:	429a      	cmp	r2, r3
    1bda:	d100      	bne.n	1bde <usart_init+0xaa>
    1bdc:	e09e      	b.n	1d1c <usart_init+0x1e8>
    1bde:	d90f      	bls.n	1c00 <usart_init+0xcc>
    1be0:	23c0      	movs	r3, #192	; 0xc0
    1be2:	01db      	lsls	r3, r3, #7
    1be4:	9a02      	ldr	r2, [sp, #8]
    1be6:	429a      	cmp	r2, r3
    1be8:	d100      	bne.n	1bec <usart_init+0xb8>
    1bea:	e092      	b.n	1d12 <usart_init+0x1de>
    1bec:	2380      	movs	r3, #128	; 0x80
    1bee:	021b      	lsls	r3, r3, #8
    1bf0:	429a      	cmp	r2, r3
    1bf2:	d000      	beq.n	1bf6 <usart_init+0xc2>
    1bf4:	e11f      	b.n	1e36 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1bf6:	2303      	movs	r3, #3
    1bf8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1bfa:	2300      	movs	r3, #0
    1bfc:	9307      	str	r3, [sp, #28]
    1bfe:	e008      	b.n	1c12 <usart_init+0xde>
	switch (config->sample_rate) {
    1c00:	2380      	movs	r3, #128	; 0x80
    1c02:	019b      	lsls	r3, r3, #6
    1c04:	429a      	cmp	r2, r3
    1c06:	d000      	beq.n	1c0a <usart_init+0xd6>
    1c08:	e115      	b.n	1e36 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1c0a:	2310      	movs	r3, #16
    1c0c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1c0e:	3b0f      	subs	r3, #15
    1c10:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1c12:	6833      	ldr	r3, [r6, #0]
    1c14:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1c16:	68f3      	ldr	r3, [r6, #12]
    1c18:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1c1a:	6973      	ldr	r3, [r6, #20]
    1c1c:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c1e:	7e33      	ldrb	r3, [r6, #24]
    1c20:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c22:	2326      	movs	r3, #38	; 0x26
    1c24:	5cf3      	ldrb	r3, [r6, r3]
    1c26:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1c28:	6873      	ldr	r3, [r6, #4]
    1c2a:	4699      	mov	r9, r3
	switch (transfer_mode)
    1c2c:	2b00      	cmp	r3, #0
    1c2e:	d100      	bne.n	1c32 <usart_init+0xfe>
    1c30:	e0a0      	b.n	1d74 <usart_init+0x240>
    1c32:	2380      	movs	r3, #128	; 0x80
    1c34:	055b      	lsls	r3, r3, #21
    1c36:	4599      	cmp	r9, r3
    1c38:	d100      	bne.n	1c3c <usart_init+0x108>
    1c3a:	e084      	b.n	1d46 <usart_init+0x212>
	if(config->encoding_format_enable) {
    1c3c:	7e73      	ldrb	r3, [r6, #25]
    1c3e:	2b00      	cmp	r3, #0
    1c40:	d002      	beq.n	1c48 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1c42:	7eb3      	ldrb	r3, [r6, #26]
    1c44:	4642      	mov	r2, r8
    1c46:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1c48:	682a      	ldr	r2, [r5, #0]
    1c4a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1c4c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d1fc      	bne.n	1c4c <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    1c52:	330e      	adds	r3, #14
    1c54:	aa06      	add	r2, sp, #24
    1c56:	4694      	mov	ip, r2
    1c58:	4463      	add	r3, ip
    1c5a:	881b      	ldrh	r3, [r3, #0]
    1c5c:	4642      	mov	r2, r8
    1c5e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    1c60:	9b05      	ldr	r3, [sp, #20]
    1c62:	9a03      	ldr	r2, [sp, #12]
    1c64:	4313      	orrs	r3, r2
    1c66:	9a04      	ldr	r2, [sp, #16]
    1c68:	4313      	orrs	r3, r2
    1c6a:	464a      	mov	r2, r9
    1c6c:	4313      	orrs	r3, r2
    1c6e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c70:	465b      	mov	r3, fp
    1c72:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1c74:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c76:	4653      	mov	r3, sl
    1c78:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1c7a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    1c7c:	2327      	movs	r3, #39	; 0x27
    1c7e:	5cf3      	ldrb	r3, [r6, r3]
    1c80:	2b00      	cmp	r3, #0
    1c82:	d101      	bne.n	1c88 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1c84:	3304      	adds	r3, #4
    1c86:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1c88:	7e73      	ldrb	r3, [r6, #25]
    1c8a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1c8c:	7f32      	ldrb	r2, [r6, #28]
    1c8e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1c90:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1c92:	7f72      	ldrb	r2, [r6, #29]
    1c94:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1c96:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1c98:	2224      	movs	r2, #36	; 0x24
    1c9a:	5cb2      	ldrb	r2, [r6, r2]
    1c9c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1c9e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1ca0:	2225      	movs	r2, #37	; 0x25
    1ca2:	5cb2      	ldrb	r2, [r6, r2]
    1ca4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1ca6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    1ca8:	7ab1      	ldrb	r1, [r6, #10]
    1caa:	7af2      	ldrb	r2, [r6, #11]
    1cac:	4311      	orrs	r1, r2
    1cae:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1cb0:	8933      	ldrh	r3, [r6, #8]
    1cb2:	2bff      	cmp	r3, #255	; 0xff
    1cb4:	d100      	bne.n	1cb8 <usart_init+0x184>
    1cb6:	e081      	b.n	1dbc <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1cb8:	2280      	movs	r2, #128	; 0x80
    1cba:	0452      	lsls	r2, r2, #17
    1cbc:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1cbe:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1cc0:	232c      	movs	r3, #44	; 0x2c
    1cc2:	5cf3      	ldrb	r3, [r6, r3]
    1cc4:	2b00      	cmp	r3, #0
    1cc6:	d103      	bne.n	1cd0 <usart_init+0x19c>
    1cc8:	4b62      	ldr	r3, [pc, #392]	; (1e54 <usart_init+0x320>)
    1cca:	789b      	ldrb	r3, [r3, #2]
    1ccc:	079b      	lsls	r3, r3, #30
    1cce:	d501      	bpl.n	1cd4 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1cd0:	2380      	movs	r3, #128	; 0x80
    1cd2:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1cd4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1cd6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1cd8:	2b00      	cmp	r3, #0
    1cda:	d1fc      	bne.n	1cd6 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1cdc:	4643      	mov	r3, r8
    1cde:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ce0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ce2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d1fc      	bne.n	1ce2 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    1ce8:	4643      	mov	r3, r8
    1cea:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1cec:	ab0e      	add	r3, sp, #56	; 0x38
    1cee:	2280      	movs	r2, #128	; 0x80
    1cf0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1cf2:	2200      	movs	r2, #0
    1cf4:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1cf6:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1cf8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1cfa:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1cfc:	930a      	str	r3, [sp, #40]	; 0x28
    1cfe:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1d00:	930b      	str	r3, [sp, #44]	; 0x2c
    1d02:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1d04:	930c      	str	r3, [sp, #48]	; 0x30
    1d06:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1d08:	9302      	str	r3, [sp, #8]
    1d0a:	930d      	str	r3, [sp, #52]	; 0x34
    1d0c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1d0e:	ae0a      	add	r6, sp, #40	; 0x28
    1d10:	e063      	b.n	1dda <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1d12:	2308      	movs	r3, #8
    1d14:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1d16:	3b07      	subs	r3, #7
    1d18:	9307      	str	r3, [sp, #28]
    1d1a:	e77a      	b.n	1c12 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1d1c:	6833      	ldr	r3, [r6, #0]
    1d1e:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1d20:	68f3      	ldr	r3, [r6, #12]
    1d22:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1d24:	6973      	ldr	r3, [r6, #20]
    1d26:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1d28:	7e33      	ldrb	r3, [r6, #24]
    1d2a:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1d2c:	2326      	movs	r3, #38	; 0x26
    1d2e:	5cf3      	ldrb	r3, [r6, r3]
    1d30:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1d32:	6873      	ldr	r3, [r6, #4]
    1d34:	4699      	mov	r9, r3
	switch (transfer_mode)
    1d36:	2b00      	cmp	r3, #0
    1d38:	d018      	beq.n	1d6c <usart_init+0x238>
    1d3a:	2380      	movs	r3, #128	; 0x80
    1d3c:	055b      	lsls	r3, r3, #21
    1d3e:	4599      	cmp	r9, r3
    1d40:	d001      	beq.n	1d46 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1d42:	2000      	movs	r0, #0
    1d44:	e025      	b.n	1d92 <usart_init+0x25e>
			if (!config->use_external_clock) {
    1d46:	2327      	movs	r3, #39	; 0x27
    1d48:	5cf3      	ldrb	r3, [r6, r3]
    1d4a:	2b00      	cmp	r3, #0
    1d4c:	d000      	beq.n	1d50 <usart_init+0x21c>
    1d4e:	e775      	b.n	1c3c <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1d50:	6a33      	ldr	r3, [r6, #32]
    1d52:	001f      	movs	r7, r3
    1d54:	b2c0      	uxtb	r0, r0
    1d56:	4b40      	ldr	r3, [pc, #256]	; (1e58 <usart_init+0x324>)
    1d58:	4798      	blx	r3
    1d5a:	0001      	movs	r1, r0
    1d5c:	220e      	movs	r2, #14
    1d5e:	ab06      	add	r3, sp, #24
    1d60:	469c      	mov	ip, r3
    1d62:	4462      	add	r2, ip
    1d64:	0038      	movs	r0, r7
    1d66:	4b3d      	ldr	r3, [pc, #244]	; (1e5c <usart_init+0x328>)
    1d68:	4798      	blx	r3
    1d6a:	e012      	b.n	1d92 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1d6c:	2308      	movs	r3, #8
    1d6e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d70:	2300      	movs	r3, #0
    1d72:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1d74:	2327      	movs	r3, #39	; 0x27
    1d76:	5cf3      	ldrb	r3, [r6, r3]
    1d78:	2b00      	cmp	r3, #0
    1d7a:	d00e      	beq.n	1d9a <usart_init+0x266>
				status_code =
    1d7c:	9b06      	ldr	r3, [sp, #24]
    1d7e:	9300      	str	r3, [sp, #0]
    1d80:	9b07      	ldr	r3, [sp, #28]
    1d82:	220e      	movs	r2, #14
    1d84:	a906      	add	r1, sp, #24
    1d86:	468c      	mov	ip, r1
    1d88:	4462      	add	r2, ip
    1d8a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    1d8c:	6a30      	ldr	r0, [r6, #32]
    1d8e:	4f34      	ldr	r7, [pc, #208]	; (1e60 <usart_init+0x32c>)
    1d90:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1d92:	2800      	cmp	r0, #0
    1d94:	d000      	beq.n	1d98 <usart_init+0x264>
    1d96:	e6e0      	b.n	1b5a <usart_init+0x26>
    1d98:	e750      	b.n	1c3c <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    1d9a:	6a33      	ldr	r3, [r6, #32]
    1d9c:	001f      	movs	r7, r3
    1d9e:	b2c0      	uxtb	r0, r0
    1da0:	4b2d      	ldr	r3, [pc, #180]	; (1e58 <usart_init+0x324>)
    1da2:	4798      	blx	r3
    1da4:	0001      	movs	r1, r0
				status_code =
    1da6:	9b06      	ldr	r3, [sp, #24]
    1da8:	9300      	str	r3, [sp, #0]
    1daa:	9b07      	ldr	r3, [sp, #28]
    1dac:	220e      	movs	r2, #14
    1dae:	a806      	add	r0, sp, #24
    1db0:	4684      	mov	ip, r0
    1db2:	4462      	add	r2, ip
    1db4:	0038      	movs	r0, r7
    1db6:	4f2a      	ldr	r7, [pc, #168]	; (1e60 <usart_init+0x32c>)
    1db8:	47b8      	blx	r7
    1dba:	e7ea      	b.n	1d92 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1dbc:	7ef3      	ldrb	r3, [r6, #27]
    1dbe:	2b00      	cmp	r3, #0
    1dc0:	d100      	bne.n	1dc4 <usart_init+0x290>
    1dc2:	e77d      	b.n	1cc0 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1dc4:	2380      	movs	r3, #128	; 0x80
    1dc6:	04db      	lsls	r3, r3, #19
    1dc8:	431f      	orrs	r7, r3
    1dca:	e779      	b.n	1cc0 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1dcc:	0020      	movs	r0, r4
    1dce:	4b25      	ldr	r3, [pc, #148]	; (1e64 <usart_init+0x330>)
    1dd0:	4798      	blx	r3
    1dd2:	e007      	b.n	1de4 <usart_init+0x2b0>
    1dd4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1dd6:	2f04      	cmp	r7, #4
    1dd8:	d00d      	beq.n	1df6 <usart_init+0x2c2>
    1dda:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1ddc:	00bb      	lsls	r3, r7, #2
    1dde:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1de0:	2800      	cmp	r0, #0
    1de2:	d0f3      	beq.n	1dcc <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1de4:	1c43      	adds	r3, r0, #1
    1de6:	d0f5      	beq.n	1dd4 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1de8:	a90e      	add	r1, sp, #56	; 0x38
    1dea:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1dec:	0c00      	lsrs	r0, r0, #16
    1dee:	b2c0      	uxtb	r0, r0
    1df0:	4b1d      	ldr	r3, [pc, #116]	; (1e68 <usart_init+0x334>)
    1df2:	4798      	blx	r3
    1df4:	e7ee      	b.n	1dd4 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    1df6:	2300      	movs	r3, #0
    1df8:	60eb      	str	r3, [r5, #12]
    1dfa:	612b      	str	r3, [r5, #16]
    1dfc:	616b      	str	r3, [r5, #20]
    1dfe:	61ab      	str	r3, [r5, #24]
    1e00:	61eb      	str	r3, [r5, #28]
    1e02:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1e04:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1e06:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1e08:	2200      	movs	r2, #0
    1e0a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1e0c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1e0e:	3330      	adds	r3, #48	; 0x30
    1e10:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1e12:	3301      	adds	r3, #1
    1e14:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1e16:	3301      	adds	r3, #1
    1e18:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1e1a:	3301      	adds	r3, #1
    1e1c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1e1e:	6828      	ldr	r0, [r5, #0]
    1e20:	4b07      	ldr	r3, [pc, #28]	; (1e40 <usart_init+0x30c>)
    1e22:	4798      	blx	r3
    1e24:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1e26:	4911      	ldr	r1, [pc, #68]	; (1e6c <usart_init+0x338>)
    1e28:	4b11      	ldr	r3, [pc, #68]	; (1e70 <usart_init+0x33c>)
    1e2a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1e2c:	00a4      	lsls	r4, r4, #2
    1e2e:	4b11      	ldr	r3, [pc, #68]	; (1e74 <usart_init+0x340>)
    1e30:	50e5      	str	r5, [r4, r3]
	return status_code;
    1e32:	2000      	movs	r0, #0
    1e34:	e691      	b.n	1b5a <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1e36:	2310      	movs	r3, #16
    1e38:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1e3a:	2300      	movs	r3, #0
    1e3c:	9307      	str	r3, [sp, #28]
    1e3e:	e6e8      	b.n	1c12 <usart_init+0xde>
    1e40:	000012ed 	.word	0x000012ed
    1e44:	40000400 	.word	0x40000400
    1e48:	000026f1 	.word	0x000026f1
    1e4c:	00002665 	.word	0x00002665
    1e50:	00001129 	.word	0x00001129
    1e54:	41002000 	.word	0x41002000
    1e58:	0000270d 	.word	0x0000270d
    1e5c:	0000106b 	.word	0x0000106b
    1e60:	00001095 	.word	0x00001095
    1e64:	00001175 	.word	0x00001175
    1e68:	000027e9 	.word	0x000027e9
    1e6c:	00001f15 	.word	0x00001f15
    1e70:	00001329 	.word	0x00001329
    1e74:	20000430 	.word	0x20000430

00001e78 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1e78:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1e7a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1e7c:	2a00      	cmp	r2, #0
    1e7e:	d101      	bne.n	1e84 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1e80:	0018      	movs	r0, r3
    1e82:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1e84:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1e86:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1e88:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1e8a:	2a00      	cmp	r2, #0
    1e8c:	d1f8      	bne.n	1e80 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e8e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e90:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1e92:	2a00      	cmp	r2, #0
    1e94:	d1fc      	bne.n	1e90 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1e96:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1e98:	2102      	movs	r1, #2
    1e9a:	7e1a      	ldrb	r2, [r3, #24]
    1e9c:	420a      	tst	r2, r1
    1e9e:	d0fc      	beq.n	1e9a <usart_write_wait+0x22>
	return STATUS_OK;
    1ea0:	2300      	movs	r3, #0
    1ea2:	e7ed      	b.n	1e80 <usart_write_wait+0x8>

00001ea4 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1ea4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1ea6:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1ea8:	2a00      	cmp	r2, #0
    1eaa:	d101      	bne.n	1eb0 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1eac:	0018      	movs	r0, r3
    1eae:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1eb0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1eb2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1eb4:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1eb6:	2a00      	cmp	r2, #0
    1eb8:	d1f8      	bne.n	1eac <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1eba:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1ebc:	7e10      	ldrb	r0, [r2, #24]
    1ebe:	0740      	lsls	r0, r0, #29
    1ec0:	d5f4      	bpl.n	1eac <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1ec2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d1fc      	bne.n	1ec2 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1ec8:	8b53      	ldrh	r3, [r2, #26]
    1eca:	b2db      	uxtb	r3, r3
	if (error_code) {
    1ecc:	0698      	lsls	r0, r3, #26
    1ece:	d01d      	beq.n	1f0c <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1ed0:	0798      	lsls	r0, r3, #30
    1ed2:	d503      	bpl.n	1edc <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1ed4:	2302      	movs	r3, #2
    1ed6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1ed8:	3318      	adds	r3, #24
    1eda:	e7e7      	b.n	1eac <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1edc:	0758      	lsls	r0, r3, #29
    1ede:	d503      	bpl.n	1ee8 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1ee0:	2304      	movs	r3, #4
    1ee2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1ee4:	331a      	adds	r3, #26
    1ee6:	e7e1      	b.n	1eac <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1ee8:	07d8      	lsls	r0, r3, #31
    1eea:	d503      	bpl.n	1ef4 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1eec:	2301      	movs	r3, #1
    1eee:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1ef0:	3312      	adds	r3, #18
    1ef2:	e7db      	b.n	1eac <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1ef4:	06d8      	lsls	r0, r3, #27
    1ef6:	d503      	bpl.n	1f00 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1ef8:	2310      	movs	r3, #16
    1efa:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1efc:	3332      	adds	r3, #50	; 0x32
    1efe:	e7d5      	b.n	1eac <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1f00:	069b      	lsls	r3, r3, #26
    1f02:	d503      	bpl.n	1f0c <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1f04:	2320      	movs	r3, #32
    1f06:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1f08:	3321      	adds	r3, #33	; 0x21
    1f0a:	e7cf      	b.n	1eac <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1f0c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1f0e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1f10:	2300      	movs	r3, #0
    1f12:	e7cb      	b.n	1eac <usart_read_wait+0x8>

00001f14 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1f16:	0080      	lsls	r0, r0, #2
    1f18:	4b62      	ldr	r3, [pc, #392]	; (20a4 <STACK_SIZE+0xa4>)
    1f1a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1f1c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f1e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1f20:	2b00      	cmp	r3, #0
    1f22:	d1fc      	bne.n	1f1e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1f24:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1f26:	7da6      	ldrb	r6, [r4, #22]
    1f28:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1f2a:	2330      	movs	r3, #48	; 0x30
    1f2c:	5ceb      	ldrb	r3, [r5, r3]
    1f2e:	2231      	movs	r2, #49	; 0x31
    1f30:	5caf      	ldrb	r7, [r5, r2]
    1f32:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1f34:	07f3      	lsls	r3, r6, #31
    1f36:	d522      	bpl.n	1f7e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1f38:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1f3a:	b29b      	uxth	r3, r3
    1f3c:	2b00      	cmp	r3, #0
    1f3e:	d01c      	beq.n	1f7a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1f40:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1f42:	7813      	ldrb	r3, [r2, #0]
    1f44:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1f46:	1c51      	adds	r1, r2, #1
    1f48:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1f4a:	7969      	ldrb	r1, [r5, #5]
    1f4c:	2901      	cmp	r1, #1
    1f4e:	d00e      	beq.n	1f6e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1f50:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1f52:	05db      	lsls	r3, r3, #23
    1f54:	0ddb      	lsrs	r3, r3, #23
    1f56:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1f58:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1f5a:	3b01      	subs	r3, #1
    1f5c:	b29b      	uxth	r3, r3
    1f5e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1f60:	2b00      	cmp	r3, #0
    1f62:	d10c      	bne.n	1f7e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1f64:	3301      	adds	r3, #1
    1f66:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1f68:	3301      	adds	r3, #1
    1f6a:	75a3      	strb	r3, [r4, #22]
    1f6c:	e007      	b.n	1f7e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1f6e:	7851      	ldrb	r1, [r2, #1]
    1f70:	0209      	lsls	r1, r1, #8
    1f72:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1f74:	3202      	adds	r2, #2
    1f76:	62aa      	str	r2, [r5, #40]	; 0x28
    1f78:	e7eb      	b.n	1f52 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1f7a:	2301      	movs	r3, #1
    1f7c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1f7e:	07b3      	lsls	r3, r6, #30
    1f80:	d506      	bpl.n	1f90 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1f82:	2302      	movs	r3, #2
    1f84:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1f86:	2200      	movs	r2, #0
    1f88:	3331      	adds	r3, #49	; 0x31
    1f8a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1f8c:	07fb      	lsls	r3, r7, #31
    1f8e:	d41a      	bmi.n	1fc6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1f90:	0773      	lsls	r3, r6, #29
    1f92:	d565      	bpl.n	2060 <STACK_SIZE+0x60>

		if (module->remaining_rx_buffer_length) {
    1f94:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1f96:	b29b      	uxth	r3, r3
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d05f      	beq.n	205c <STACK_SIZE+0x5c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1f9c:	8b63      	ldrh	r3, [r4, #26]
    1f9e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1fa0:	071a      	lsls	r2, r3, #28
    1fa2:	d414      	bmi.n	1fce <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1fa4:	223f      	movs	r2, #63	; 0x3f
    1fa6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d034      	beq.n	2016 <STACK_SIZE+0x16>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1fac:	079a      	lsls	r2, r3, #30
    1fae:	d511      	bpl.n	1fd4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1fb0:	221a      	movs	r2, #26
    1fb2:	2332      	movs	r3, #50	; 0x32
    1fb4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1fb6:	3b30      	subs	r3, #48	; 0x30
    1fb8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1fba:	077b      	lsls	r3, r7, #29
    1fbc:	d550      	bpl.n	2060 <STACK_SIZE+0x60>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1fbe:	0028      	movs	r0, r5
    1fc0:	696b      	ldr	r3, [r5, #20]
    1fc2:	4798      	blx	r3
    1fc4:	e04c      	b.n	2060 <STACK_SIZE+0x60>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1fc6:	0028      	movs	r0, r5
    1fc8:	68eb      	ldr	r3, [r5, #12]
    1fca:	4798      	blx	r3
    1fcc:	e7e0      	b.n	1f90 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1fce:	2237      	movs	r2, #55	; 0x37
    1fd0:	4013      	ands	r3, r2
    1fd2:	e7e9      	b.n	1fa8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1fd4:	075a      	lsls	r2, r3, #29
    1fd6:	d505      	bpl.n	1fe4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1fd8:	221e      	movs	r2, #30
    1fda:	2332      	movs	r3, #50	; 0x32
    1fdc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1fde:	3b2e      	subs	r3, #46	; 0x2e
    1fe0:	8363      	strh	r3, [r4, #26]
    1fe2:	e7ea      	b.n	1fba <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1fe4:	07da      	lsls	r2, r3, #31
    1fe6:	d505      	bpl.n	1ff4 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1fe8:	2213      	movs	r2, #19
    1fea:	2332      	movs	r3, #50	; 0x32
    1fec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1fee:	3b31      	subs	r3, #49	; 0x31
    1ff0:	8363      	strh	r3, [r4, #26]
    1ff2:	e7e2      	b.n	1fba <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1ff4:	06da      	lsls	r2, r3, #27
    1ff6:	d505      	bpl.n	2004 <STACK_SIZE+0x4>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1ff8:	2242      	movs	r2, #66	; 0x42
    1ffa:	2332      	movs	r3, #50	; 0x32
    1ffc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1ffe:	3b22      	subs	r3, #34	; 0x22
    2000:	8363      	strh	r3, [r4, #26]
    2002:	e7da      	b.n	1fba <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2004:	2220      	movs	r2, #32
    2006:	421a      	tst	r2, r3
    2008:	d0d7      	beq.n	1fba <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    200a:	3221      	adds	r2, #33	; 0x21
    200c:	2332      	movs	r3, #50	; 0x32
    200e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2010:	3b12      	subs	r3, #18
    2012:	8363      	strh	r3, [r4, #26]
    2014:	e7d1      	b.n	1fba <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2016:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2018:	05db      	lsls	r3, r3, #23
    201a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    201c:	b2da      	uxtb	r2, r3
    201e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2020:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2022:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2024:	1c51      	adds	r1, r2, #1
    2026:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2028:	7969      	ldrb	r1, [r5, #5]
    202a:	2901      	cmp	r1, #1
    202c:	d010      	beq.n	2050 <STACK_SIZE+0x50>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    202e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2030:	3b01      	subs	r3, #1
    2032:	b29b      	uxth	r3, r3
    2034:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2036:	2b00      	cmp	r3, #0
    2038:	d112      	bne.n	2060 <STACK_SIZE+0x60>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    203a:	3304      	adds	r3, #4
    203c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    203e:	2200      	movs	r2, #0
    2040:	332e      	adds	r3, #46	; 0x2e
    2042:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2044:	07bb      	lsls	r3, r7, #30
    2046:	d50b      	bpl.n	2060 <STACK_SIZE+0x60>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2048:	0028      	movs	r0, r5
    204a:	692b      	ldr	r3, [r5, #16]
    204c:	4798      	blx	r3
    204e:	e007      	b.n	2060 <STACK_SIZE+0x60>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2050:	0a1b      	lsrs	r3, r3, #8
    2052:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2054:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2056:	3301      	adds	r3, #1
    2058:	626b      	str	r3, [r5, #36]	; 0x24
    205a:	e7e8      	b.n	202e <STACK_SIZE+0x2e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    205c:	2304      	movs	r3, #4
    205e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2060:	06f3      	lsls	r3, r6, #27
    2062:	d504      	bpl.n	206e <STACK_SIZE+0x6e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2064:	2310      	movs	r3, #16
    2066:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2068:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    206a:	06fb      	lsls	r3, r7, #27
    206c:	d40e      	bmi.n	208c <STACK_SIZE+0x8c>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    206e:	06b3      	lsls	r3, r6, #26
    2070:	d504      	bpl.n	207c <STACK_SIZE+0x7c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2072:	2320      	movs	r3, #32
    2074:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2076:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2078:	073b      	lsls	r3, r7, #28
    207a:	d40b      	bmi.n	2094 <STACK_SIZE+0x94>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    207c:	0733      	lsls	r3, r6, #28
    207e:	d504      	bpl.n	208a <STACK_SIZE+0x8a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2080:	2308      	movs	r3, #8
    2082:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2084:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2086:	06bb      	lsls	r3, r7, #26
    2088:	d408      	bmi.n	209c <STACK_SIZE+0x9c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    208a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    208c:	0028      	movs	r0, r5
    208e:	69eb      	ldr	r3, [r5, #28]
    2090:	4798      	blx	r3
    2092:	e7ec      	b.n	206e <STACK_SIZE+0x6e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2094:	0028      	movs	r0, r5
    2096:	69ab      	ldr	r3, [r5, #24]
    2098:	4798      	blx	r3
    209a:	e7ef      	b.n	207c <STACK_SIZE+0x7c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    209c:	6a2b      	ldr	r3, [r5, #32]
    209e:	0028      	movs	r0, r5
    20a0:	4798      	blx	r3
}
    20a2:	e7f2      	b.n	208a <STACK_SIZE+0x8a>
    20a4:	20000430 	.word	0x20000430

000020a8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    20a8:	b510      	push	{r4, lr}
	switch (clock_source) {
    20aa:	2808      	cmp	r0, #8
    20ac:	d803      	bhi.n	20b6 <system_clock_source_get_hz+0xe>
    20ae:	0080      	lsls	r0, r0, #2
    20b0:	4b1c      	ldr	r3, [pc, #112]	; (2124 <system_clock_source_get_hz+0x7c>)
    20b2:	581b      	ldr	r3, [r3, r0]
    20b4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    20b6:	2000      	movs	r0, #0
    20b8:	e032      	b.n	2120 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    20ba:	4b1b      	ldr	r3, [pc, #108]	; (2128 <system_clock_source_get_hz+0x80>)
    20bc:	6918      	ldr	r0, [r3, #16]
    20be:	e02f      	b.n	2120 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    20c0:	4b1a      	ldr	r3, [pc, #104]	; (212c <system_clock_source_get_hz+0x84>)
    20c2:	6a1b      	ldr	r3, [r3, #32]
    20c4:	059b      	lsls	r3, r3, #22
    20c6:	0f9b      	lsrs	r3, r3, #30
    20c8:	4819      	ldr	r0, [pc, #100]	; (2130 <system_clock_source_get_hz+0x88>)
    20ca:	40d8      	lsrs	r0, r3
    20cc:	e028      	b.n	2120 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    20ce:	4b16      	ldr	r3, [pc, #88]	; (2128 <system_clock_source_get_hz+0x80>)
    20d0:	6958      	ldr	r0, [r3, #20]
    20d2:	e025      	b.n	2120 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    20d4:	4b14      	ldr	r3, [pc, #80]	; (2128 <system_clock_source_get_hz+0x80>)
    20d6:	681b      	ldr	r3, [r3, #0]
			return 0;
    20d8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    20da:	079b      	lsls	r3, r3, #30
    20dc:	d520      	bpl.n	2120 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    20de:	4913      	ldr	r1, [pc, #76]	; (212c <system_clock_source_get_hz+0x84>)
    20e0:	2210      	movs	r2, #16
    20e2:	68cb      	ldr	r3, [r1, #12]
    20e4:	421a      	tst	r2, r3
    20e6:	d0fc      	beq.n	20e2 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    20e8:	4b0f      	ldr	r3, [pc, #60]	; (2128 <system_clock_source_get_hz+0x80>)
    20ea:	681a      	ldr	r2, [r3, #0]
    20ec:	2324      	movs	r3, #36	; 0x24
    20ee:	4013      	ands	r3, r2
    20f0:	2b04      	cmp	r3, #4
    20f2:	d001      	beq.n	20f8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    20f4:	480f      	ldr	r0, [pc, #60]	; (2134 <system_clock_source_get_hz+0x8c>)
    20f6:	e013      	b.n	2120 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    20f8:	2000      	movs	r0, #0
    20fa:	4b0f      	ldr	r3, [pc, #60]	; (2138 <system_clock_source_get_hz+0x90>)
    20fc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    20fe:	4b0a      	ldr	r3, [pc, #40]	; (2128 <system_clock_source_get_hz+0x80>)
    2100:	689b      	ldr	r3, [r3, #8]
    2102:	041b      	lsls	r3, r3, #16
    2104:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2106:	4358      	muls	r0, r3
    2108:	e00a      	b.n	2120 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    210a:	2350      	movs	r3, #80	; 0x50
    210c:	4a07      	ldr	r2, [pc, #28]	; (212c <system_clock_source_get_hz+0x84>)
    210e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2110:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2112:	075b      	lsls	r3, r3, #29
    2114:	d504      	bpl.n	2120 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2116:	4b04      	ldr	r3, [pc, #16]	; (2128 <system_clock_source_get_hz+0x80>)
    2118:	68d8      	ldr	r0, [r3, #12]
    211a:	e001      	b.n	2120 <system_clock_source_get_hz+0x78>
		return 32768UL;
    211c:	2080      	movs	r0, #128	; 0x80
    211e:	0200      	lsls	r0, r0, #8
	}
}
    2120:	bd10      	pop	{r4, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	00004050 	.word	0x00004050
    2128:	2000013c 	.word	0x2000013c
    212c:	40000800 	.word	0x40000800
    2130:	007a1200 	.word	0x007a1200
    2134:	02dc6c00 	.word	0x02dc6c00
    2138:	0000270d 	.word	0x0000270d

0000213c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    213c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    213e:	490c      	ldr	r1, [pc, #48]	; (2170 <system_clock_source_osc8m_set_config+0x34>)
    2140:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2142:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2144:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2146:	7840      	ldrb	r0, [r0, #1]
    2148:	2201      	movs	r2, #1
    214a:	4010      	ands	r0, r2
    214c:	0180      	lsls	r0, r0, #6
    214e:	2640      	movs	r6, #64	; 0x40
    2150:	43b3      	bics	r3, r6
    2152:	4303      	orrs	r3, r0
    2154:	402a      	ands	r2, r5
    2156:	01d2      	lsls	r2, r2, #7
    2158:	2080      	movs	r0, #128	; 0x80
    215a:	4383      	bics	r3, r0
    215c:	4313      	orrs	r3, r2
    215e:	2203      	movs	r2, #3
    2160:	4022      	ands	r2, r4
    2162:	0212      	lsls	r2, r2, #8
    2164:	4803      	ldr	r0, [pc, #12]	; (2174 <system_clock_source_osc8m_set_config+0x38>)
    2166:	4003      	ands	r3, r0
    2168:	4313      	orrs	r3, r2
    216a:	620b      	str	r3, [r1, #32]
}
    216c:	bd70      	pop	{r4, r5, r6, pc}
    216e:	46c0      	nop			; (mov r8, r8)
    2170:	40000800 	.word	0x40000800
    2174:	fffffcff 	.word	0xfffffcff

00002178 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2178:	b5f0      	push	{r4, r5, r6, r7, lr}
    217a:	46de      	mov	lr, fp
    217c:	4657      	mov	r7, sl
    217e:	464e      	mov	r6, r9
    2180:	4645      	mov	r5, r8
    2182:	b5e0      	push	{r5, r6, r7, lr}
    2184:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2186:	4b26      	ldr	r3, [pc, #152]	; (2220 <system_clock_source_xosc32k_set_config+0xa8>)
    2188:	469b      	mov	fp, r3
    218a:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    218c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    218e:	7800      	ldrb	r0, [r0, #0]
    2190:	4242      	negs	r2, r0
    2192:	4142      	adcs	r2, r0
    2194:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2196:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2198:	78ca      	ldrb	r2, [r1, #3]
    219a:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    219c:	790a      	ldrb	r2, [r1, #4]
    219e:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    21a0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    21a2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    21a4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    21a6:	688a      	ldr	r2, [r1, #8]
    21a8:	491e      	ldr	r1, [pc, #120]	; (2224 <system_clock_source_xosc32k_set_config+0xac>)
    21aa:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    21ac:	2101      	movs	r1, #1
    21ae:	464a      	mov	r2, r9
    21b0:	0092      	lsls	r2, r2, #2
    21b2:	4691      	mov	r9, r2
    21b4:	2204      	movs	r2, #4
    21b6:	4393      	bics	r3, r2
    21b8:	464a      	mov	r2, r9
    21ba:	4313      	orrs	r3, r2
    21bc:	4642      	mov	r2, r8
    21be:	400a      	ands	r2, r1
    21c0:	00d2      	lsls	r2, r2, #3
    21c2:	4690      	mov	r8, r2
    21c4:	2208      	movs	r2, #8
    21c6:	4393      	bics	r3, r2
    21c8:	4642      	mov	r2, r8
    21ca:	4313      	orrs	r3, r2
    21cc:	4662      	mov	r2, ip
    21ce:	400a      	ands	r2, r1
    21d0:	0112      	lsls	r2, r2, #4
    21d2:	4694      	mov	ip, r2
    21d4:	2210      	movs	r2, #16
    21d6:	4393      	bics	r3, r2
    21d8:	4662      	mov	r2, ip
    21da:	4313      	orrs	r3, r2
    21dc:	4008      	ands	r0, r1
    21de:	0140      	lsls	r0, r0, #5
    21e0:	2220      	movs	r2, #32
    21e2:	4393      	bics	r3, r2
    21e4:	4303      	orrs	r3, r0
    21e6:	400f      	ands	r7, r1
    21e8:	01bf      	lsls	r7, r7, #6
    21ea:	2040      	movs	r0, #64	; 0x40
    21ec:	4383      	bics	r3, r0
    21ee:	433b      	orrs	r3, r7
    21f0:	400e      	ands	r6, r1
    21f2:	01f6      	lsls	r6, r6, #7
    21f4:	3040      	adds	r0, #64	; 0x40
    21f6:	4383      	bics	r3, r0
    21f8:	4333      	orrs	r3, r6
    21fa:	3879      	subs	r0, #121	; 0x79
    21fc:	4005      	ands	r5, r0
    21fe:	022d      	lsls	r5, r5, #8
    2200:	4809      	ldr	r0, [pc, #36]	; (2228 <system_clock_source_xosc32k_set_config+0xb0>)
    2202:	4003      	ands	r3, r0
    2204:	432b      	orrs	r3, r5
    2206:	4021      	ands	r1, r4
    2208:	0309      	lsls	r1, r1, #12
    220a:	4808      	ldr	r0, [pc, #32]	; (222c <system_clock_source_xosc32k_set_config+0xb4>)
    220c:	4003      	ands	r3, r0
    220e:	430b      	orrs	r3, r1
    2210:	465a      	mov	r2, fp
    2212:	8293      	strh	r3, [r2, #20]
}
    2214:	bc3c      	pop	{r2, r3, r4, r5}
    2216:	4690      	mov	r8, r2
    2218:	4699      	mov	r9, r3
    221a:	46a2      	mov	sl, r4
    221c:	46ab      	mov	fp, r5
    221e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2220:	40000800 	.word	0x40000800
    2224:	2000013c 	.word	0x2000013c
    2228:	fffff8ff 	.word	0xfffff8ff
    222c:	ffffefff 	.word	0xffffefff

00002230 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2230:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2232:	7a03      	ldrb	r3, [r0, #8]
    2234:	069b      	lsls	r3, r3, #26
    2236:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2238:	8942      	ldrh	r2, [r0, #10]
    223a:	0592      	lsls	r2, r2, #22
    223c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    223e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2240:	4918      	ldr	r1, [pc, #96]	; (22a4 <system_clock_source_dfll_set_config+0x74>)
    2242:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2244:	7983      	ldrb	r3, [r0, #6]
    2246:	79c2      	ldrb	r2, [r0, #7]
    2248:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    224a:	8842      	ldrh	r2, [r0, #2]
    224c:	8884      	ldrh	r4, [r0, #4]
    224e:	4322      	orrs	r2, r4
    2250:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2252:	7842      	ldrb	r2, [r0, #1]
    2254:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2256:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2258:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    225a:	7803      	ldrb	r3, [r0, #0]
    225c:	2b04      	cmp	r3, #4
    225e:	d011      	beq.n	2284 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2260:	2b20      	cmp	r3, #32
    2262:	d10e      	bne.n	2282 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2264:	7b03      	ldrb	r3, [r0, #12]
    2266:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2268:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    226a:	4313      	orrs	r3, r2
    226c:	89c2      	ldrh	r2, [r0, #14]
    226e:	0412      	lsls	r2, r2, #16
    2270:	490d      	ldr	r1, [pc, #52]	; (22a8 <system_clock_source_dfll_set_config+0x78>)
    2272:	400a      	ands	r2, r1
    2274:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2276:	4a0b      	ldr	r2, [pc, #44]	; (22a4 <system_clock_source_dfll_set_config+0x74>)
    2278:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    227a:	6811      	ldr	r1, [r2, #0]
    227c:	4b0b      	ldr	r3, [pc, #44]	; (22ac <system_clock_source_dfll_set_config+0x7c>)
    227e:	430b      	orrs	r3, r1
    2280:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2282:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2284:	7b03      	ldrb	r3, [r0, #12]
    2286:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2288:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    228a:	4313      	orrs	r3, r2
    228c:	89c2      	ldrh	r2, [r0, #14]
    228e:	0412      	lsls	r2, r2, #16
    2290:	4905      	ldr	r1, [pc, #20]	; (22a8 <system_clock_source_dfll_set_config+0x78>)
    2292:	400a      	ands	r2, r1
    2294:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2296:	4a03      	ldr	r2, [pc, #12]	; (22a4 <system_clock_source_dfll_set_config+0x74>)
    2298:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    229a:	6813      	ldr	r3, [r2, #0]
    229c:	2104      	movs	r1, #4
    229e:	430b      	orrs	r3, r1
    22a0:	6013      	str	r3, [r2, #0]
    22a2:	e7ee      	b.n	2282 <system_clock_source_dfll_set_config+0x52>
    22a4:	2000013c 	.word	0x2000013c
    22a8:	03ff0000 	.word	0x03ff0000
    22ac:	00000424 	.word	0x00000424

000022b0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    22b0:	2808      	cmp	r0, #8
    22b2:	d803      	bhi.n	22bc <system_clock_source_enable+0xc>
    22b4:	0080      	lsls	r0, r0, #2
    22b6:	4b25      	ldr	r3, [pc, #148]	; (234c <system_clock_source_enable+0x9c>)
    22b8:	581b      	ldr	r3, [r3, r0]
    22ba:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    22bc:	2017      	movs	r0, #23
    22be:	e044      	b.n	234a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    22c0:	4a23      	ldr	r2, [pc, #140]	; (2350 <system_clock_source_enable+0xa0>)
    22c2:	6a13      	ldr	r3, [r2, #32]
    22c4:	2102      	movs	r1, #2
    22c6:	430b      	orrs	r3, r1
    22c8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    22ca:	2000      	movs	r0, #0
    22cc:	e03d      	b.n	234a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    22ce:	4a20      	ldr	r2, [pc, #128]	; (2350 <system_clock_source_enable+0xa0>)
    22d0:	6993      	ldr	r3, [r2, #24]
    22d2:	2102      	movs	r1, #2
    22d4:	430b      	orrs	r3, r1
    22d6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    22d8:	2000      	movs	r0, #0
		break;
    22da:	e036      	b.n	234a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    22dc:	4a1c      	ldr	r2, [pc, #112]	; (2350 <system_clock_source_enable+0xa0>)
    22de:	8a13      	ldrh	r3, [r2, #16]
    22e0:	2102      	movs	r1, #2
    22e2:	430b      	orrs	r3, r1
    22e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    22e6:	2000      	movs	r0, #0
		break;
    22e8:	e02f      	b.n	234a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    22ea:	4a19      	ldr	r2, [pc, #100]	; (2350 <system_clock_source_enable+0xa0>)
    22ec:	8a93      	ldrh	r3, [r2, #20]
    22ee:	2102      	movs	r1, #2
    22f0:	430b      	orrs	r3, r1
    22f2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    22f4:	2000      	movs	r0, #0
		break;
    22f6:	e028      	b.n	234a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    22f8:	4916      	ldr	r1, [pc, #88]	; (2354 <system_clock_source_enable+0xa4>)
    22fa:	680b      	ldr	r3, [r1, #0]
    22fc:	2202      	movs	r2, #2
    22fe:	4313      	orrs	r3, r2
    2300:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2302:	4b13      	ldr	r3, [pc, #76]	; (2350 <system_clock_source_enable+0xa0>)
    2304:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2306:	0019      	movs	r1, r3
    2308:	320e      	adds	r2, #14
    230a:	68cb      	ldr	r3, [r1, #12]
    230c:	421a      	tst	r2, r3
    230e:	d0fc      	beq.n	230a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2310:	4a10      	ldr	r2, [pc, #64]	; (2354 <system_clock_source_enable+0xa4>)
    2312:	6891      	ldr	r1, [r2, #8]
    2314:	4b0e      	ldr	r3, [pc, #56]	; (2350 <system_clock_source_enable+0xa0>)
    2316:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2318:	6852      	ldr	r2, [r2, #4]
    231a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    231c:	2200      	movs	r2, #0
    231e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2320:	0019      	movs	r1, r3
    2322:	3210      	adds	r2, #16
    2324:	68cb      	ldr	r3, [r1, #12]
    2326:	421a      	tst	r2, r3
    2328:	d0fc      	beq.n	2324 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    232a:	4b0a      	ldr	r3, [pc, #40]	; (2354 <system_clock_source_enable+0xa4>)
    232c:	681b      	ldr	r3, [r3, #0]
    232e:	b29b      	uxth	r3, r3
    2330:	4a07      	ldr	r2, [pc, #28]	; (2350 <system_clock_source_enable+0xa0>)
    2332:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2334:	2000      	movs	r0, #0
    2336:	e008      	b.n	234a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2338:	4905      	ldr	r1, [pc, #20]	; (2350 <system_clock_source_enable+0xa0>)
    233a:	2244      	movs	r2, #68	; 0x44
    233c:	5c8b      	ldrb	r3, [r1, r2]
    233e:	2002      	movs	r0, #2
    2340:	4303      	orrs	r3, r0
    2342:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2344:	2000      	movs	r0, #0
		break;
    2346:	e000      	b.n	234a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2348:	2000      	movs	r0, #0
}
    234a:	4770      	bx	lr
    234c:	00004074 	.word	0x00004074
    2350:	40000800 	.word	0x40000800
    2354:	2000013c 	.word	0x2000013c

00002358 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2358:	b5f0      	push	{r4, r5, r6, r7, lr}
    235a:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    235c:	22c2      	movs	r2, #194	; 0xc2
    235e:	00d2      	lsls	r2, r2, #3
    2360:	4b47      	ldr	r3, [pc, #284]	; (2480 <system_clock_init+0x128>)
    2362:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2364:	4a47      	ldr	r2, [pc, #284]	; (2484 <system_clock_init+0x12c>)
    2366:	6853      	ldr	r3, [r2, #4]
    2368:	211e      	movs	r1, #30
    236a:	438b      	bics	r3, r1
    236c:	391a      	subs	r1, #26
    236e:	430b      	orrs	r3, r1
    2370:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    2372:	2202      	movs	r2, #2
    2374:	ab01      	add	r3, sp, #4
    2376:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2378:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    237a:	4d43      	ldr	r5, [pc, #268]	; (2488 <system_clock_init+0x130>)
    237c:	b2e0      	uxtb	r0, r4
    237e:	a901      	add	r1, sp, #4
    2380:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2382:	3401      	adds	r4, #1
    2384:	2c25      	cmp	r4, #37	; 0x25
    2386:	d1f9      	bne.n	237c <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2388:	a80a      	add	r0, sp, #40	; 0x28
    238a:	2300      	movs	r3, #0
    238c:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    238e:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    2390:	2280      	movs	r2, #128	; 0x80
    2392:	0212      	lsls	r2, r2, #8
    2394:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    2396:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    2398:	2201      	movs	r2, #1
    239a:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    239c:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    239e:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    23a0:	3202      	adds	r2, #2
    23a2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    23a4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    23a6:	4b39      	ldr	r3, [pc, #228]	; (248c <system_clock_init+0x134>)
    23a8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    23aa:	2005      	movs	r0, #5
    23ac:	4b38      	ldr	r3, [pc, #224]	; (2490 <system_clock_init+0x138>)
    23ae:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    23b0:	4933      	ldr	r1, [pc, #204]	; (2480 <system_clock_init+0x128>)
    23b2:	2202      	movs	r2, #2
    23b4:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    23b6:	421a      	tst	r2, r3
    23b8:	d0fc      	beq.n	23b4 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    23ba:	4a31      	ldr	r2, [pc, #196]	; (2480 <system_clock_init+0x128>)
    23bc:	8a93      	ldrh	r3, [r2, #20]
    23be:	2180      	movs	r1, #128	; 0x80
    23c0:	430b      	orrs	r3, r1
    23c2:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    23c4:	ab05      	add	r3, sp, #20
    23c6:	2100      	movs	r1, #0
    23c8:	2200      	movs	r2, #0
    23ca:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    23cc:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    23ce:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    23d0:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    23d2:	313f      	adds	r1, #63	; 0x3f
    23d4:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    23d6:	393b      	subs	r1, #59	; 0x3b
    23d8:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    23da:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    23dc:	4b2d      	ldr	r3, [pc, #180]	; (2494 <system_clock_init+0x13c>)
    23de:	681b      	ldr	r3, [r3, #0]
    23e0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    23e2:	2b3f      	cmp	r3, #63	; 0x3f
    23e4:	d04a      	beq.n	247c <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    23e6:	a805      	add	r0, sp, #20
    23e8:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    23ea:	4b2b      	ldr	r3, [pc, #172]	; (2498 <system_clock_init+0x140>)
    23ec:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    23ee:	2307      	movs	r3, #7
    23f0:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    23f2:	3338      	adds	r3, #56	; 0x38
    23f4:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    23f6:	4b29      	ldr	r3, [pc, #164]	; (249c <system_clock_init+0x144>)
    23f8:	4798      	blx	r3
	config->run_in_standby  = false;
    23fa:	a804      	add	r0, sp, #16
    23fc:	2500      	movs	r5, #0
    23fe:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    2400:	2601      	movs	r6, #1
    2402:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2404:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2406:	4b26      	ldr	r3, [pc, #152]	; (24a0 <system_clock_init+0x148>)
    2408:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    240a:	2006      	movs	r0, #6
    240c:	4f20      	ldr	r7, [pc, #128]	; (2490 <system_clock_init+0x138>)
    240e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2410:	4b24      	ldr	r3, [pc, #144]	; (24a4 <system_clock_init+0x14c>)
    2412:	4798      	blx	r3
	config->division_factor    = 1;
    2414:	ac01      	add	r4, sp, #4
    2416:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2418:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    241a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    241c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    241e:	2305      	movs	r3, #5
    2420:	7023      	strb	r3, [r4, #0]
    2422:	0021      	movs	r1, r4
    2424:	2001      	movs	r0, #1
    2426:	4b20      	ldr	r3, [pc, #128]	; (24a8 <system_clock_init+0x150>)
    2428:	4798      	blx	r3
    242a:	2001      	movs	r0, #1
    242c:	4b1f      	ldr	r3, [pc, #124]	; (24ac <system_clock_init+0x154>)
    242e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    2430:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    2432:	0021      	movs	r1, r4
    2434:	2000      	movs	r0, #0
    2436:	4b14      	ldr	r3, [pc, #80]	; (2488 <system_clock_init+0x130>)
    2438:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    243a:	2000      	movs	r0, #0
    243c:	4b1c      	ldr	r3, [pc, #112]	; (24b0 <system_clock_init+0x158>)
    243e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    2440:	2007      	movs	r0, #7
    2442:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    2444:	490e      	ldr	r1, [pc, #56]	; (2480 <system_clock_init+0x128>)
    2446:	22d0      	movs	r2, #208	; 0xd0
    2448:	68cb      	ldr	r3, [r1, #12]
    244a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    244c:	2bd0      	cmp	r3, #208	; 0xd0
    244e:	d1fb      	bne.n	2448 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    2450:	4a18      	ldr	r2, [pc, #96]	; (24b4 <system_clock_init+0x15c>)
    2452:	2300      	movs	r3, #0
    2454:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2456:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2458:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    245a:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    245c:	a901      	add	r1, sp, #4
    245e:	2201      	movs	r2, #1
    2460:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    2462:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    2464:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    2466:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2468:	3307      	adds	r3, #7
    246a:	700b      	strb	r3, [r1, #0]
    246c:	2000      	movs	r0, #0
    246e:	4b0e      	ldr	r3, [pc, #56]	; (24a8 <system_clock_init+0x150>)
    2470:	4798      	blx	r3
    2472:	2000      	movs	r0, #0
    2474:	4b0d      	ldr	r3, [pc, #52]	; (24ac <system_clock_init+0x154>)
    2476:	4798      	blx	r3
#endif
}
    2478:	b00f      	add	sp, #60	; 0x3c
    247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    247c:	3b20      	subs	r3, #32
    247e:	e7b2      	b.n	23e6 <system_clock_init+0x8e>
    2480:	40000800 	.word	0x40000800
    2484:	41004000 	.word	0x41004000
    2488:	000026f1 	.word	0x000026f1
    248c:	00002179 	.word	0x00002179
    2490:	000022b1 	.word	0x000022b1
    2494:	00806024 	.word	0x00806024
    2498:	000005b9 	.word	0x000005b9
    249c:	00002231 	.word	0x00002231
    24a0:	0000213d 	.word	0x0000213d
    24a4:	000024b9 	.word	0x000024b9
    24a8:	000024dd 	.word	0x000024dd
    24ac:	00002595 	.word	0x00002595
    24b0:	00002665 	.word	0x00002665
    24b4:	40000400 	.word	0x40000400

000024b8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    24b8:	4a06      	ldr	r2, [pc, #24]	; (24d4 <system_gclk_init+0x1c>)
    24ba:	6993      	ldr	r3, [r2, #24]
    24bc:	2108      	movs	r1, #8
    24be:	430b      	orrs	r3, r1
    24c0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    24c2:	2201      	movs	r2, #1
    24c4:	4b04      	ldr	r3, [pc, #16]	; (24d8 <system_gclk_init+0x20>)
    24c6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    24c8:	0019      	movs	r1, r3
    24ca:	780b      	ldrb	r3, [r1, #0]
    24cc:	4213      	tst	r3, r2
    24ce:	d1fc      	bne.n	24ca <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    24d0:	4770      	bx	lr
    24d2:	46c0      	nop			; (mov r8, r8)
    24d4:	40000400 	.word	0x40000400
    24d8:	40000c00 	.word	0x40000c00

000024dc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    24dc:	b570      	push	{r4, r5, r6, lr}
    24de:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    24e0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    24e2:	780d      	ldrb	r5, [r1, #0]
    24e4:	022d      	lsls	r5, r5, #8
    24e6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    24e8:	784b      	ldrb	r3, [r1, #1]
    24ea:	2b00      	cmp	r3, #0
    24ec:	d002      	beq.n	24f4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    24ee:	2380      	movs	r3, #128	; 0x80
    24f0:	02db      	lsls	r3, r3, #11
    24f2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    24f4:	7a4b      	ldrb	r3, [r1, #9]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d002      	beq.n	2500 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    24fa:	2380      	movs	r3, #128	; 0x80
    24fc:	031b      	lsls	r3, r3, #12
    24fe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2500:	6848      	ldr	r0, [r1, #4]
    2502:	2801      	cmp	r0, #1
    2504:	d910      	bls.n	2528 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2506:	1e43      	subs	r3, r0, #1
    2508:	4218      	tst	r0, r3
    250a:	d134      	bne.n	2576 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    250c:	2802      	cmp	r0, #2
    250e:	d930      	bls.n	2572 <system_gclk_gen_set_config+0x96>
    2510:	2302      	movs	r3, #2
    2512:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2514:	3201      	adds	r2, #1
						mask <<= 1) {
    2516:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2518:	4298      	cmp	r0, r3
    251a:	d8fb      	bhi.n	2514 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    251c:	0212      	lsls	r2, r2, #8
    251e:	4332      	orrs	r2, r6
    2520:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2522:	2380      	movs	r3, #128	; 0x80
    2524:	035b      	lsls	r3, r3, #13
    2526:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2528:	7a0b      	ldrb	r3, [r1, #8]
    252a:	2b00      	cmp	r3, #0
    252c:	d002      	beq.n	2534 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    252e:	2380      	movs	r3, #128	; 0x80
    2530:	039b      	lsls	r3, r3, #14
    2532:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2534:	4a13      	ldr	r2, [pc, #76]	; (2584 <system_gclk_gen_set_config+0xa8>)
    2536:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2538:	b25b      	sxtb	r3, r3
    253a:	2b00      	cmp	r3, #0
    253c:	dbfb      	blt.n	2536 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    253e:	4b12      	ldr	r3, [pc, #72]	; (2588 <system_gclk_gen_set_config+0xac>)
    2540:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2542:	4b12      	ldr	r3, [pc, #72]	; (258c <system_gclk_gen_set_config+0xb0>)
    2544:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2546:	4a0f      	ldr	r2, [pc, #60]	; (2584 <system_gclk_gen_set_config+0xa8>)
    2548:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    254a:	b25b      	sxtb	r3, r3
    254c:	2b00      	cmp	r3, #0
    254e:	dbfb      	blt.n	2548 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2550:	4b0c      	ldr	r3, [pc, #48]	; (2584 <system_gclk_gen_set_config+0xa8>)
    2552:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2554:	001a      	movs	r2, r3
    2556:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2558:	b25b      	sxtb	r3, r3
    255a:	2b00      	cmp	r3, #0
    255c:	dbfb      	blt.n	2556 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    255e:	4a09      	ldr	r2, [pc, #36]	; (2584 <system_gclk_gen_set_config+0xa8>)
    2560:	6853      	ldr	r3, [r2, #4]
    2562:	2180      	movs	r1, #128	; 0x80
    2564:	0249      	lsls	r1, r1, #9
    2566:	400b      	ands	r3, r1
    2568:	431d      	orrs	r5, r3
    256a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    256c:	4b08      	ldr	r3, [pc, #32]	; (2590 <system_gclk_gen_set_config+0xb4>)
    256e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2570:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2572:	2200      	movs	r2, #0
    2574:	e7d2      	b.n	251c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2576:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2578:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    257a:	2380      	movs	r3, #128	; 0x80
    257c:	029b      	lsls	r3, r3, #10
    257e:	431d      	orrs	r5, r3
    2580:	e7d2      	b.n	2528 <system_gclk_gen_set_config+0x4c>
    2582:	46c0      	nop			; (mov r8, r8)
    2584:	40000c00 	.word	0x40000c00
    2588:	00000d41 	.word	0x00000d41
    258c:	40000c08 	.word	0x40000c08
    2590:	00000d81 	.word	0x00000d81

00002594 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2594:	b510      	push	{r4, lr}
    2596:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2598:	4a0b      	ldr	r2, [pc, #44]	; (25c8 <system_gclk_gen_enable+0x34>)
    259a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    259c:	b25b      	sxtb	r3, r3
    259e:	2b00      	cmp	r3, #0
    25a0:	dbfb      	blt.n	259a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    25a2:	4b0a      	ldr	r3, [pc, #40]	; (25cc <system_gclk_gen_enable+0x38>)
    25a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    25a6:	4b0a      	ldr	r3, [pc, #40]	; (25d0 <system_gclk_gen_enable+0x3c>)
    25a8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25aa:	4a07      	ldr	r2, [pc, #28]	; (25c8 <system_gclk_gen_enable+0x34>)
    25ac:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25ae:	b25b      	sxtb	r3, r3
    25b0:	2b00      	cmp	r3, #0
    25b2:	dbfb      	blt.n	25ac <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    25b4:	4a04      	ldr	r2, [pc, #16]	; (25c8 <system_gclk_gen_enable+0x34>)
    25b6:	6851      	ldr	r1, [r2, #4]
    25b8:	2380      	movs	r3, #128	; 0x80
    25ba:	025b      	lsls	r3, r3, #9
    25bc:	430b      	orrs	r3, r1
    25be:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    25c0:	4b04      	ldr	r3, [pc, #16]	; (25d4 <system_gclk_gen_enable+0x40>)
    25c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    25c4:	bd10      	pop	{r4, pc}
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	40000c00 	.word	0x40000c00
    25cc:	00000d41 	.word	0x00000d41
    25d0:	40000c04 	.word	0x40000c04
    25d4:	00000d81 	.word	0x00000d81

000025d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    25d8:	b570      	push	{r4, r5, r6, lr}
    25da:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25dc:	4a1a      	ldr	r2, [pc, #104]	; (2648 <system_gclk_gen_get_hz+0x70>)
    25de:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25e0:	b25b      	sxtb	r3, r3
    25e2:	2b00      	cmp	r3, #0
    25e4:	dbfb      	blt.n	25de <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    25e6:	4b19      	ldr	r3, [pc, #100]	; (264c <system_gclk_gen_get_hz+0x74>)
    25e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    25ea:	4b19      	ldr	r3, [pc, #100]	; (2650 <system_gclk_gen_get_hz+0x78>)
    25ec:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    25ee:	4a16      	ldr	r2, [pc, #88]	; (2648 <system_gclk_gen_get_hz+0x70>)
    25f0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    25f2:	b25b      	sxtb	r3, r3
    25f4:	2b00      	cmp	r3, #0
    25f6:	dbfb      	blt.n	25f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    25f8:	4e13      	ldr	r6, [pc, #76]	; (2648 <system_gclk_gen_get_hz+0x70>)
    25fa:	6870      	ldr	r0, [r6, #4]
    25fc:	04c0      	lsls	r0, r0, #19
    25fe:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2600:	4b14      	ldr	r3, [pc, #80]	; (2654 <system_gclk_gen_get_hz+0x7c>)
    2602:	4798      	blx	r3
    2604:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2606:	4b12      	ldr	r3, [pc, #72]	; (2650 <system_gclk_gen_get_hz+0x78>)
    2608:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    260a:	6876      	ldr	r6, [r6, #4]
    260c:	02f6      	lsls	r6, r6, #11
    260e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2610:	4b11      	ldr	r3, [pc, #68]	; (2658 <system_gclk_gen_get_hz+0x80>)
    2612:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2614:	4a0c      	ldr	r2, [pc, #48]	; (2648 <system_gclk_gen_get_hz+0x70>)
    2616:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2618:	b25b      	sxtb	r3, r3
    261a:	2b00      	cmp	r3, #0
    261c:	dbfb      	blt.n	2616 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    261e:	4b0a      	ldr	r3, [pc, #40]	; (2648 <system_gclk_gen_get_hz+0x70>)
    2620:	689c      	ldr	r4, [r3, #8]
    2622:	0224      	lsls	r4, r4, #8
    2624:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2626:	4b0d      	ldr	r3, [pc, #52]	; (265c <system_gclk_gen_get_hz+0x84>)
    2628:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    262a:	2e00      	cmp	r6, #0
    262c:	d107      	bne.n	263e <system_gclk_gen_get_hz+0x66>
    262e:	2c01      	cmp	r4, #1
    2630:	d907      	bls.n	2642 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2632:	0021      	movs	r1, r4
    2634:	0028      	movs	r0, r5
    2636:	4b0a      	ldr	r3, [pc, #40]	; (2660 <system_gclk_gen_get_hz+0x88>)
    2638:	4798      	blx	r3
    263a:	0005      	movs	r5, r0
    263c:	e001      	b.n	2642 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    263e:	3401      	adds	r4, #1
    2640:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2642:	0028      	movs	r0, r5
    2644:	bd70      	pop	{r4, r5, r6, pc}
    2646:	46c0      	nop			; (mov r8, r8)
    2648:	40000c00 	.word	0x40000c00
    264c:	00000d41 	.word	0x00000d41
    2650:	40000c04 	.word	0x40000c04
    2654:	000020a9 	.word	0x000020a9
    2658:	40000c08 	.word	0x40000c08
    265c:	00000d81 	.word	0x00000d81
    2660:	00002d21 	.word	0x00002d21

00002664 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2664:	b510      	push	{r4, lr}
    2666:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2668:	4b06      	ldr	r3, [pc, #24]	; (2684 <system_gclk_chan_enable+0x20>)
    266a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    266c:	4b06      	ldr	r3, [pc, #24]	; (2688 <system_gclk_chan_enable+0x24>)
    266e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2670:	4a06      	ldr	r2, [pc, #24]	; (268c <system_gclk_chan_enable+0x28>)
    2672:	8853      	ldrh	r3, [r2, #2]
    2674:	2180      	movs	r1, #128	; 0x80
    2676:	01c9      	lsls	r1, r1, #7
    2678:	430b      	orrs	r3, r1
    267a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    267c:	4b04      	ldr	r3, [pc, #16]	; (2690 <system_gclk_chan_enable+0x2c>)
    267e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2680:	bd10      	pop	{r4, pc}
    2682:	46c0      	nop			; (mov r8, r8)
    2684:	00000d41 	.word	0x00000d41
    2688:	40000c02 	.word	0x40000c02
    268c:	40000c00 	.word	0x40000c00
    2690:	00000d81 	.word	0x00000d81

00002694 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2694:	b510      	push	{r4, lr}
    2696:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2698:	4b0f      	ldr	r3, [pc, #60]	; (26d8 <system_gclk_chan_disable+0x44>)
    269a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    269c:	4b0f      	ldr	r3, [pc, #60]	; (26dc <system_gclk_chan_disable+0x48>)
    269e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    26a0:	4a0f      	ldr	r2, [pc, #60]	; (26e0 <system_gclk_chan_disable+0x4c>)
    26a2:	8853      	ldrh	r3, [r2, #2]
    26a4:	051b      	lsls	r3, r3, #20
    26a6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    26a8:	8853      	ldrh	r3, [r2, #2]
    26aa:	490e      	ldr	r1, [pc, #56]	; (26e4 <system_gclk_chan_disable+0x50>)
    26ac:	400b      	ands	r3, r1
    26ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    26b0:	8853      	ldrh	r3, [r2, #2]
    26b2:	490d      	ldr	r1, [pc, #52]	; (26e8 <system_gclk_chan_disable+0x54>)
    26b4:	400b      	ands	r3, r1
    26b6:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    26b8:	0011      	movs	r1, r2
    26ba:	2280      	movs	r2, #128	; 0x80
    26bc:	01d2      	lsls	r2, r2, #7
    26be:	884b      	ldrh	r3, [r1, #2]
    26c0:	4213      	tst	r3, r2
    26c2:	d1fc      	bne.n	26be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    26c4:	4906      	ldr	r1, [pc, #24]	; (26e0 <system_gclk_chan_disable+0x4c>)
    26c6:	884a      	ldrh	r2, [r1, #2]
    26c8:	0203      	lsls	r3, r0, #8
    26ca:	4806      	ldr	r0, [pc, #24]	; (26e4 <system_gclk_chan_disable+0x50>)
    26cc:	4002      	ands	r2, r0
    26ce:	4313      	orrs	r3, r2
    26d0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    26d2:	4b06      	ldr	r3, [pc, #24]	; (26ec <system_gclk_chan_disable+0x58>)
    26d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    26d6:	bd10      	pop	{r4, pc}
    26d8:	00000d41 	.word	0x00000d41
    26dc:	40000c02 	.word	0x40000c02
    26e0:	40000c00 	.word	0x40000c00
    26e4:	fffff0ff 	.word	0xfffff0ff
    26e8:	ffffbfff 	.word	0xffffbfff
    26ec:	00000d81 	.word	0x00000d81

000026f0 <system_gclk_chan_set_config>:
{
    26f0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    26f2:	780c      	ldrb	r4, [r1, #0]
    26f4:	0224      	lsls	r4, r4, #8
    26f6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    26f8:	4b02      	ldr	r3, [pc, #8]	; (2704 <system_gclk_chan_set_config+0x14>)
    26fa:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    26fc:	b2a4      	uxth	r4, r4
    26fe:	4b02      	ldr	r3, [pc, #8]	; (2708 <system_gclk_chan_set_config+0x18>)
    2700:	805c      	strh	r4, [r3, #2]
}
    2702:	bd10      	pop	{r4, pc}
    2704:	00002695 	.word	0x00002695
    2708:	40000c00 	.word	0x40000c00

0000270c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    270c:	b510      	push	{r4, lr}
    270e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2710:	4b06      	ldr	r3, [pc, #24]	; (272c <system_gclk_chan_get_hz+0x20>)
    2712:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2714:	4b06      	ldr	r3, [pc, #24]	; (2730 <system_gclk_chan_get_hz+0x24>)
    2716:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2718:	4b06      	ldr	r3, [pc, #24]	; (2734 <system_gclk_chan_get_hz+0x28>)
    271a:	885c      	ldrh	r4, [r3, #2]
    271c:	0524      	lsls	r4, r4, #20
    271e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2720:	4b05      	ldr	r3, [pc, #20]	; (2738 <system_gclk_chan_get_hz+0x2c>)
    2722:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2724:	0020      	movs	r0, r4
    2726:	4b05      	ldr	r3, [pc, #20]	; (273c <system_gclk_chan_get_hz+0x30>)
    2728:	4798      	blx	r3
}
    272a:	bd10      	pop	{r4, pc}
    272c:	00000d41 	.word	0x00000d41
    2730:	40000c02 	.word	0x40000c02
    2734:	40000c00 	.word	0x40000c00
    2738:	00000d81 	.word	0x00000d81
    273c:	000025d9 	.word	0x000025d9

00002740 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2740:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2742:	78d3      	ldrb	r3, [r2, #3]
    2744:	2b00      	cmp	r3, #0
    2746:	d135      	bne.n	27b4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2748:	7813      	ldrb	r3, [r2, #0]
    274a:	2b80      	cmp	r3, #128	; 0x80
    274c:	d029      	beq.n	27a2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    274e:	061b      	lsls	r3, r3, #24
    2750:	2480      	movs	r4, #128	; 0x80
    2752:	0264      	lsls	r4, r4, #9
    2754:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2756:	7854      	ldrb	r4, [r2, #1]
    2758:	2502      	movs	r5, #2
    275a:	43ac      	bics	r4, r5
    275c:	d106      	bne.n	276c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    275e:	7894      	ldrb	r4, [r2, #2]
    2760:	2c00      	cmp	r4, #0
    2762:	d120      	bne.n	27a6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2764:	2480      	movs	r4, #128	; 0x80
    2766:	02a4      	lsls	r4, r4, #10
    2768:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    276a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    276c:	7854      	ldrb	r4, [r2, #1]
    276e:	3c01      	subs	r4, #1
    2770:	2c01      	cmp	r4, #1
    2772:	d91c      	bls.n	27ae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2774:	040d      	lsls	r5, r1, #16
    2776:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2778:	24a0      	movs	r4, #160	; 0xa0
    277a:	05e4      	lsls	r4, r4, #23
    277c:	432c      	orrs	r4, r5
    277e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2780:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2782:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2784:	24d0      	movs	r4, #208	; 0xd0
    2786:	0624      	lsls	r4, r4, #24
    2788:	432c      	orrs	r4, r5
    278a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    278c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    278e:	78d4      	ldrb	r4, [r2, #3]
    2790:	2c00      	cmp	r4, #0
    2792:	d122      	bne.n	27da <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2794:	035b      	lsls	r3, r3, #13
    2796:	d51c      	bpl.n	27d2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2798:	7893      	ldrb	r3, [r2, #2]
    279a:	2b01      	cmp	r3, #1
    279c:	d01e      	beq.n	27dc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    279e:	6141      	str	r1, [r0, #20]
    27a0:	e017      	b.n	27d2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    27a2:	2300      	movs	r3, #0
    27a4:	e7d7      	b.n	2756 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    27a6:	24c0      	movs	r4, #192	; 0xc0
    27a8:	02e4      	lsls	r4, r4, #11
    27aa:	4323      	orrs	r3, r4
    27ac:	e7dd      	b.n	276a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    27ae:	4c0d      	ldr	r4, [pc, #52]	; (27e4 <_system_pinmux_config+0xa4>)
    27b0:	4023      	ands	r3, r4
    27b2:	e7df      	b.n	2774 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    27b4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    27b6:	040c      	lsls	r4, r1, #16
    27b8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    27ba:	23a0      	movs	r3, #160	; 0xa0
    27bc:	05db      	lsls	r3, r3, #23
    27be:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    27c0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    27c2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    27c4:	23d0      	movs	r3, #208	; 0xd0
    27c6:	061b      	lsls	r3, r3, #24
    27c8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    27ca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    27cc:	78d3      	ldrb	r3, [r2, #3]
    27ce:	2b00      	cmp	r3, #0
    27d0:	d103      	bne.n	27da <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    27d2:	7853      	ldrb	r3, [r2, #1]
    27d4:	3b01      	subs	r3, #1
    27d6:	2b01      	cmp	r3, #1
    27d8:	d902      	bls.n	27e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    27da:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    27dc:	6181      	str	r1, [r0, #24]
    27de:	e7f8      	b.n	27d2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    27e0:	6081      	str	r1, [r0, #8]
}
    27e2:	e7fa      	b.n	27da <_system_pinmux_config+0x9a>
    27e4:	fffbffff 	.word	0xfffbffff

000027e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    27e8:	b510      	push	{r4, lr}
    27ea:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    27ec:	09c1      	lsrs	r1, r0, #7
		return NULL;
    27ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    27f0:	2900      	cmp	r1, #0
    27f2:	d104      	bne.n	27fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    27f4:	0943      	lsrs	r3, r0, #5
    27f6:	01db      	lsls	r3, r3, #7
    27f8:	4905      	ldr	r1, [pc, #20]	; (2810 <system_pinmux_pin_set_config+0x28>)
    27fa:	468c      	mov	ip, r1
    27fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    27fe:	241f      	movs	r4, #31
    2800:	4020      	ands	r0, r4
    2802:	2101      	movs	r1, #1
    2804:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2806:	0018      	movs	r0, r3
    2808:	4b02      	ldr	r3, [pc, #8]	; (2814 <system_pinmux_pin_set_config+0x2c>)
    280a:	4798      	blx	r3
}
    280c:	bd10      	pop	{r4, pc}
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	41004400 	.word	0x41004400
    2814:	00002741 	.word	0x00002741

00002818 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2818:	4770      	bx	lr
	...

0000281c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    281c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    281e:	4b05      	ldr	r3, [pc, #20]	; (2834 <system_init+0x18>)
    2820:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    2822:	4b05      	ldr	r3, [pc, #20]	; (2838 <system_init+0x1c>)
    2824:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2826:	4b05      	ldr	r3, [pc, #20]	; (283c <system_init+0x20>)
    2828:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    282a:	4b05      	ldr	r3, [pc, #20]	; (2840 <system_init+0x24>)
    282c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    282e:	4b05      	ldr	r3, [pc, #20]	; (2844 <system_init+0x28>)
    2830:	4798      	blx	r3
}
    2832:	bd10      	pop	{r4, pc}
    2834:	00002359 	.word	0x00002359
    2838:	00000db1 	.word	0x00000db1
    283c:	00002819 	.word	0x00002819
    2840:	00000e55 	.word	0x00000e55
    2844:	00002819 	.word	0x00002819

00002848 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2848:	e7fe      	b.n	2848 <Dummy_Handler>
	...

0000284c <Reset_Handler>:
{
    284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    284e:	4a2a      	ldr	r2, [pc, #168]	; (28f8 <Reset_Handler+0xac>)
    2850:	4b2a      	ldr	r3, [pc, #168]	; (28fc <Reset_Handler+0xb0>)
    2852:	429a      	cmp	r2, r3
    2854:	d011      	beq.n	287a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2856:	001a      	movs	r2, r3
    2858:	4b29      	ldr	r3, [pc, #164]	; (2900 <Reset_Handler+0xb4>)
    285a:	429a      	cmp	r2, r3
    285c:	d20d      	bcs.n	287a <Reset_Handler+0x2e>
    285e:	4a29      	ldr	r2, [pc, #164]	; (2904 <Reset_Handler+0xb8>)
    2860:	3303      	adds	r3, #3
    2862:	1a9b      	subs	r3, r3, r2
    2864:	089b      	lsrs	r3, r3, #2
    2866:	3301      	adds	r3, #1
    2868:	009b      	lsls	r3, r3, #2
    286a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    286c:	4823      	ldr	r0, [pc, #140]	; (28fc <Reset_Handler+0xb0>)
    286e:	4922      	ldr	r1, [pc, #136]	; (28f8 <Reset_Handler+0xac>)
    2870:	588c      	ldr	r4, [r1, r2]
    2872:	5084      	str	r4, [r0, r2]
    2874:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2876:	429a      	cmp	r2, r3
    2878:	d1fa      	bne.n	2870 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    287a:	4a23      	ldr	r2, [pc, #140]	; (2908 <Reset_Handler+0xbc>)
    287c:	4b23      	ldr	r3, [pc, #140]	; (290c <Reset_Handler+0xc0>)
    287e:	429a      	cmp	r2, r3
    2880:	d20a      	bcs.n	2898 <Reset_Handler+0x4c>
    2882:	43d3      	mvns	r3, r2
    2884:	4921      	ldr	r1, [pc, #132]	; (290c <Reset_Handler+0xc0>)
    2886:	185b      	adds	r3, r3, r1
    2888:	2103      	movs	r1, #3
    288a:	438b      	bics	r3, r1
    288c:	3304      	adds	r3, #4
    288e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2890:	2100      	movs	r1, #0
    2892:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2894:	4293      	cmp	r3, r2
    2896:	d1fc      	bne.n	2892 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2898:	4a1d      	ldr	r2, [pc, #116]	; (2910 <Reset_Handler+0xc4>)
    289a:	21ff      	movs	r1, #255	; 0xff
    289c:	4b1d      	ldr	r3, [pc, #116]	; (2914 <Reset_Handler+0xc8>)
    289e:	438b      	bics	r3, r1
    28a0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    28a2:	39fd      	subs	r1, #253	; 0xfd
    28a4:	2390      	movs	r3, #144	; 0x90
    28a6:	005b      	lsls	r3, r3, #1
    28a8:	4a1b      	ldr	r2, [pc, #108]	; (2918 <Reset_Handler+0xcc>)
    28aa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    28ac:	4a1b      	ldr	r2, [pc, #108]	; (291c <Reset_Handler+0xd0>)
    28ae:	78d3      	ldrb	r3, [r2, #3]
    28b0:	2503      	movs	r5, #3
    28b2:	43ab      	bics	r3, r5
    28b4:	2402      	movs	r4, #2
    28b6:	4323      	orrs	r3, r4
    28b8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    28ba:	78d3      	ldrb	r3, [r2, #3]
    28bc:	270c      	movs	r7, #12
    28be:	43bb      	bics	r3, r7
    28c0:	2608      	movs	r6, #8
    28c2:	4333      	orrs	r3, r6
    28c4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    28c6:	4b16      	ldr	r3, [pc, #88]	; (2920 <Reset_Handler+0xd4>)
    28c8:	7b98      	ldrb	r0, [r3, #14]
    28ca:	2230      	movs	r2, #48	; 0x30
    28cc:	4390      	bics	r0, r2
    28ce:	2220      	movs	r2, #32
    28d0:	4310      	orrs	r0, r2
    28d2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    28d4:	7b99      	ldrb	r1, [r3, #14]
    28d6:	43b9      	bics	r1, r7
    28d8:	4331      	orrs	r1, r6
    28da:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    28dc:	7b9a      	ldrb	r2, [r3, #14]
    28de:	43aa      	bics	r2, r5
    28e0:	4322      	orrs	r2, r4
    28e2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    28e4:	4a0f      	ldr	r2, [pc, #60]	; (2924 <Reset_Handler+0xd8>)
    28e6:	6853      	ldr	r3, [r2, #4]
    28e8:	2180      	movs	r1, #128	; 0x80
    28ea:	430b      	orrs	r3, r1
    28ec:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    28ee:	4b0e      	ldr	r3, [pc, #56]	; (2928 <Reset_Handler+0xdc>)
    28f0:	4798      	blx	r3
        main();
    28f2:	4b0e      	ldr	r3, [pc, #56]	; (292c <Reset_Handler+0xe0>)
    28f4:	4798      	blx	r3
    28f6:	e7fe      	b.n	28f6 <Reset_Handler+0xaa>
    28f8:	0000433c 	.word	0x0000433c
    28fc:	20000000 	.word	0x20000000
    2900:	20000074 	.word	0x20000074
    2904:	20000004 	.word	0x20000004
    2908:	20000074 	.word	0x20000074
    290c:	2000050c 	.word	0x2000050c
    2910:	e000ed00 	.word	0xe000ed00
    2914:	00000000 	.word	0x00000000
    2918:	41007000 	.word	0x41007000
    291c:	41005000 	.word	0x41005000
    2920:	41004800 	.word	0x41004800
    2924:	41004000 	.word	0x41004000
    2928:	00002e8d 	.word	0x00002e8d
    292c:	00002b55 	.word	0x00002b55

00002930 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2930:	b5f0      	push	{r4, r5, r6, r7, lr}
    2932:	46c6      	mov	lr, r8
    2934:	b500      	push	{lr}
    2936:	000c      	movs	r4, r1
    2938:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    293a:	2800      	cmp	r0, #0
    293c:	d10f      	bne.n	295e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    293e:	2a00      	cmp	r2, #0
    2940:	dd11      	ble.n	2966 <_read+0x36>
    2942:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2944:	4e09      	ldr	r6, [pc, #36]	; (296c <_read+0x3c>)
    2946:	4d0a      	ldr	r5, [pc, #40]	; (2970 <_read+0x40>)
    2948:	6830      	ldr	r0, [r6, #0]
    294a:	0021      	movs	r1, r4
    294c:	682b      	ldr	r3, [r5, #0]
    294e:	4798      	blx	r3
		ptr++;
    2950:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2952:	42bc      	cmp	r4, r7
    2954:	d1f8      	bne.n	2948 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2956:	4640      	mov	r0, r8
    2958:	bc04      	pop	{r2}
    295a:	4690      	mov	r8, r2
    295c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    295e:	2301      	movs	r3, #1
    2960:	425b      	negs	r3, r3
    2962:	4698      	mov	r8, r3
    2964:	e7f7      	b.n	2956 <_read+0x26>
	for (; len > 0; --len) {
    2966:	4680      	mov	r8, r0
    2968:	e7f5      	b.n	2956 <_read+0x26>
    296a:	46c0      	nop			; (mov r8, r8)
    296c:	20000454 	.word	0x20000454
    2970:	2000044c 	.word	0x2000044c

00002974 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2974:	b5f0      	push	{r4, r5, r6, r7, lr}
    2976:	46c6      	mov	lr, r8
    2978:	b500      	push	{lr}
    297a:	000e      	movs	r6, r1
    297c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    297e:	3801      	subs	r0, #1
    2980:	2802      	cmp	r0, #2
    2982:	d810      	bhi.n	29a6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2984:	2a00      	cmp	r2, #0
    2986:	d011      	beq.n	29ac <_write+0x38>
    2988:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    298a:	4b0c      	ldr	r3, [pc, #48]	; (29bc <_write+0x48>)
    298c:	4698      	mov	r8, r3
    298e:	4f0c      	ldr	r7, [pc, #48]	; (29c0 <_write+0x4c>)
    2990:	4643      	mov	r3, r8
    2992:	6818      	ldr	r0, [r3, #0]
    2994:	5d31      	ldrb	r1, [r6, r4]
    2996:	683b      	ldr	r3, [r7, #0]
    2998:	4798      	blx	r3
    299a:	2800      	cmp	r0, #0
    299c:	db08      	blt.n	29b0 <_write+0x3c>
			return -1;
		}
		++nChars;
    299e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    29a0:	42a5      	cmp	r5, r4
    29a2:	d1f5      	bne.n	2990 <_write+0x1c>
    29a4:	e006      	b.n	29b4 <_write+0x40>
		return -1;
    29a6:	2401      	movs	r4, #1
    29a8:	4264      	negs	r4, r4
    29aa:	e003      	b.n	29b4 <_write+0x40>
	for (; len != 0; --len) {
    29ac:	0014      	movs	r4, r2
    29ae:	e001      	b.n	29b4 <_write+0x40>
			return -1;
    29b0:	2401      	movs	r4, #1
    29b2:	4264      	negs	r4, r4
	}
	return nChars;
}
    29b4:	0020      	movs	r0, r4
    29b6:	bc04      	pop	{r2}
    29b8:	4690      	mov	r8, r2
    29ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29bc:	20000454 	.word	0x20000454
    29c0:	20000450 	.word	0x20000450

000029c4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    29c4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    29c6:	4a06      	ldr	r2, [pc, #24]	; (29e0 <_sbrk+0x1c>)
    29c8:	6812      	ldr	r2, [r2, #0]
    29ca:	2a00      	cmp	r2, #0
    29cc:	d004      	beq.n	29d8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    29ce:	4a04      	ldr	r2, [pc, #16]	; (29e0 <_sbrk+0x1c>)
    29d0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    29d2:	18c3      	adds	r3, r0, r3
    29d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    29d6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    29d8:	4902      	ldr	r1, [pc, #8]	; (29e4 <_sbrk+0x20>)
    29da:	4a01      	ldr	r2, [pc, #4]	; (29e0 <_sbrk+0x1c>)
    29dc:	6011      	str	r1, [r2, #0]
    29de:	e7f6      	b.n	29ce <_sbrk+0xa>
    29e0:	20000154 	.word	0x20000154
    29e4:	20002510 	.word	0x20002510

000029e8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    29e8:	2001      	movs	r0, #1
    29ea:	4240      	negs	r0, r0
    29ec:	4770      	bx	lr

000029ee <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    29ee:	2380      	movs	r3, #128	; 0x80
    29f0:	019b      	lsls	r3, r3, #6
    29f2:	604b      	str	r3, [r1, #4]

	return 0;
}
    29f4:	2000      	movs	r0, #0
    29f6:	4770      	bx	lr

000029f8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    29f8:	2001      	movs	r0, #1
    29fa:	4770      	bx	lr

000029fc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    29fc:	2000      	movs	r0, #0
    29fe:	4770      	bx	lr

00002a00 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    2a00:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    2a02:	2807      	cmp	r0, #7
    2a04:	d901      	bls.n	2a0a <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    2a06:	0018      	movs	r0, r3
    2a08:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    2a0a:	0083      	lsls	r3, r0, #2
    2a0c:	4a07      	ldr	r2, [pc, #28]	; (2a2c <f_mount+0x2c>)
    2a0e:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    2a10:	2b00      	cmp	r3, #0
    2a12:	d001      	beq.n	2a18 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    2a14:	2200      	movs	r2, #0
    2a16:	701a      	strb	r2, [r3, #0]
	if (fs) {
    2a18:	2900      	cmp	r1, #0
    2a1a:	d001      	beq.n	2a20 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    2a1c:	2300      	movs	r3, #0
    2a1e:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    2a20:	0080      	lsls	r0, r0, #2
    2a22:	4b02      	ldr	r3, [pc, #8]	; (2a2c <f_mount+0x2c>)
    2a24:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    2a26:	2300      	movs	r3, #0
    2a28:	e7ed      	b.n	2a06 <f_mount+0x6>
    2a2a:	46c0      	nop			; (mov r8, r8)
    2a2c:	20000158 	.word	0x20000158

00002a30 <SysTick_Handler>:
		}
	}
}

void SysTick_Handler(void){
	MilliTimer++;
    2a30:	4a02      	ldr	r2, [pc, #8]	; (2a3c <SysTick_Handler+0xc>)
    2a32:	6813      	ldr	r3, [r2, #0]
    2a34:	3301      	adds	r3, #1
    2a36:	6013      	str	r3, [r2, #0]
}
    2a38:	4770      	bx	lr
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	20000178 	.word	0x20000178

00002a40 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2a40:	b570      	push	{r4, r5, r6, lr}
    2a42:	b082      	sub	sp, #8
    2a44:	0005      	movs	r5, r0
    2a46:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2a48:	2200      	movs	r2, #0
    2a4a:	466b      	mov	r3, sp
    2a4c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2a4e:	4c06      	ldr	r4, [pc, #24]	; (2a68 <usart_serial_getchar+0x28>)
    2a50:	466b      	mov	r3, sp
    2a52:	1d99      	adds	r1, r3, #6
    2a54:	0028      	movs	r0, r5
    2a56:	47a0      	blx	r4
    2a58:	2800      	cmp	r0, #0
    2a5a:	d1f9      	bne.n	2a50 <usart_serial_getchar+0x10>

	*c = temp;
    2a5c:	466b      	mov	r3, sp
    2a5e:	3306      	adds	r3, #6
    2a60:	881b      	ldrh	r3, [r3, #0]
    2a62:	7033      	strb	r3, [r6, #0]
}
    2a64:	b002      	add	sp, #8
    2a66:	bd70      	pop	{r4, r5, r6, pc}
    2a68:	00001ea5 	.word	0x00001ea5

00002a6c <usart_serial_putchar>:
{
    2a6c:	b570      	push	{r4, r5, r6, lr}
    2a6e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2a70:	b28c      	uxth	r4, r1
    2a72:	4e03      	ldr	r6, [pc, #12]	; (2a80 <usart_serial_putchar+0x14>)
    2a74:	0021      	movs	r1, r4
    2a76:	0028      	movs	r0, r5
    2a78:	47b0      	blx	r6
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d1fa      	bne.n	2a74 <usart_serial_putchar+0x8>
}
    2a7e:	bd70      	pop	{r4, r5, r6, pc}
    2a80:	00001e79 	.word	0x00001e79

00002a84 <configure_nvm>:

/**
* NVM CONFIGURATION
*/
void configure_nvm(void)
{
    2a84:	b510      	push	{r4, lr}
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2a86:	4807      	ldr	r0, [pc, #28]	; (2aa4 <configure_nvm+0x20>)
    2a88:	2200      	movs	r2, #0
    2a8a:	7002      	strb	r2, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2a8c:	4b06      	ldr	r3, [pc, #24]	; (2aa8 <configure_nvm+0x24>)
    2a8e:	685b      	ldr	r3, [r3, #4]
    2a90:	06db      	lsls	r3, r3, #27
    2a92:	0f1b      	lsrs	r3, r3, #28
    2a94:	7083      	strb	r3, [r0, #2]
	config->disable_cache     = false;
    2a96:	70c2      	strb	r2, [r0, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    2a98:	7102      	strb	r2, [r0, #4]
	nvm_get_config_defaults(&nvm_cfg);	
	nvm_cfg.manual_page_write = false;
    2a9a:	7042      	strb	r2, [r0, #1]
	nvm_set_config(&nvm_cfg);
    2a9c:	4b03      	ldr	r3, [pc, #12]	; (2aac <configure_nvm+0x28>)
    2a9e:	4798      	blx	r3
}
    2aa0:	bd10      	pop	{r4, pc}
    2aa2:	46c0      	nop			; (mov r8, r8)
    2aa4:	200004a0 	.word	0x200004a0
    2aa8:	41004000 	.word	0x41004000
    2aac:	00000ec1 	.word	0x00000ec1

00002ab0 <disable_console>:
///////////////////////////////////////////
/**
 * \DISABLE UART console.
 */
void disable_console()
{
    2ab0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2ab2:	4d0a      	ldr	r5, [pc, #40]	; (2adc <disable_console+0x2c>)
    2ab4:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2ab6:	0020      	movs	r0, r4
    2ab8:	4b09      	ldr	r3, [pc, #36]	; (2ae0 <disable_console+0x30>)
    2aba:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2abc:	231f      	movs	r3, #31
    2abe:	4018      	ands	r0, r3
    2ac0:	3b1e      	subs	r3, #30
    2ac2:	4083      	lsls	r3, r0
    2ac4:	2280      	movs	r2, #128	; 0x80
    2ac6:	4907      	ldr	r1, [pc, #28]	; (2ae4 <disable_console+0x34>)
    2ac8:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2aca:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2acc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2ace:	2b00      	cmp	r3, #0
    2ad0:	d1fc      	bne.n	2acc <disable_console+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2ad2:	6823      	ldr	r3, [r4, #0]
    2ad4:	2202      	movs	r2, #2
    2ad6:	4393      	bics	r3, r2
    2ad8:	6023      	str	r3, [r4, #0]
	usart_disable(&cdc_uart_module);
}
    2ada:	bd70      	pop	{r4, r5, r6, pc}
    2adc:	2000017c 	.word	0x2000017c
    2ae0:	00001365 	.word	0x00001365
    2ae4:	e000e100 	.word	0xe000e100

00002ae8 <disable_peripherals>:

/* 
* DEINITIALIZE HARDWARE & PERIPHERALS
*/
void disable_peripherals()
{
    2ae8:	b510      	push	{r4, lr}
 	printf("disable peripherals: Deinitializing peripherals \n\rJumping to app..... \n\r");
    2aea:	4809      	ldr	r0, [pc, #36]	; (2b10 <disable_peripherals+0x28>)
    2aec:	4b09      	ldr	r3, [pc, #36]	; (2b14 <disable_peripherals+0x2c>)
    2aee:	4798      	blx	r3

 	delay_s(2);
    2af0:	20fa      	movs	r0, #250	; 0xfa
    2af2:	00c0      	lsls	r0, r0, #3
    2af4:	4b08      	ldr	r3, [pc, #32]	; (2b18 <disable_peripherals+0x30>)
    2af6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    2af8:	b672      	cpsid	i
    2afa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2afe:	2200      	movs	r2, #0
    2b00:	4b06      	ldr	r3, [pc, #24]	; (2b1c <disable_peripherals+0x34>)
    2b02:	701a      	strb	r2, [r3, #0]

 	system_interrupt_disable_global();
	
 	disable_console();
    2b04:	4b06      	ldr	r3, [pc, #24]	; (2b20 <disable_peripherals+0x38>)
    2b06:	4798      	blx	r3
 	sd_deinit();
    2b08:	4b06      	ldr	r3, [pc, #24]	; (2b24 <disable_peripherals+0x3c>)
    2b0a:	4798      	blx	r3
// 	
// 	extint_unregister_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
// 	extint_chan_disable_callback(BUTTON_0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
// 	disable_extinter();
}
    2b0c:	bd10      	pop	{r4, pc}
    2b0e:	46c0      	nop			; (mov r8, r8)
    2b10:	00004098 	.word	0x00004098
    2b14:	00002ee5 	.word	0x00002ee5
    2b18:	00000d15 	.word	0x00000d15
    2b1c:	2000000c 	.word	0x2000000c
    2b20:	00002ab1 	.word	0x00002ab1
    2b24:	00000851 	.word	0x00000851

00002b28 <jump_to_app>:

/* 
* JUMP TO APPLICATION CODE 
*/ 
static void jump_to_app(void)
{
    2b28:	b580      	push	{r7, lr}
    2b2a:	af00      	add	r7, sp, #0
	disable_peripherals();
    2b2c:	4b06      	ldr	r3, [pc, #24]	; (2b48 <jump_to_app+0x20>)
    2b2e:	4798      	blx	r3
	
	/// Function pointer to application section
	void (*applicationCodeEntry)(void);
	
	/// Rebase stack pointer
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    2b30:	239c      	movs	r3, #156	; 0x9c
    2b32:	021b      	lsls	r3, r3, #8
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    2b34:	681a      	ldr	r2, [r3, #0]
    2b36:	f382 8808 	msr	MSP, r2

	/// Rebase vector table
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    2b3a:	4a04      	ldr	r2, [pc, #16]	; (2b4c <jump_to_app+0x24>)
    2b3c:	6093      	str	r3, [r2, #8]
	
	/// Set pointer to application section
	applicationCodeEntry = (void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    2b3e:	4b04      	ldr	r3, [pc, #16]	; (2b50 <jump_to_app+0x28>)
	
	/// Jump to application
	applicationCodeEntry();
    2b40:	681b      	ldr	r3, [r3, #0]
    2b42:	4798      	blx	r3
}	
    2b44:	46bd      	mov	sp, r7
    2b46:	bd80      	pop	{r7, pc}
    2b48:	00002ae9 	.word	0x00002ae9
    2b4c:	e000ed00 	.word	0xe000ed00
    2b50:	00009c04 	.word	0x00009c04

00002b54 <main>:
/////////////////////////////////////////////////////////////////////////////
///* ...... MAIN ........ *
////////////////////////////////////////////////////////////////////////////

int main(void)
{
    2b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b56:	b091      	sub	sp, #68	; 0x44
	/** INITIALIZATING THE BOARD AND PERIPHERALS */

	system_init();						/* Initialize the board. */	
    2b58:	4b4e      	ldr	r3, [pc, #312]	; (2c94 <main+0x140>)
    2b5a:	4798      	blx	r3
	config->data_order       = USART_DATAORDER_LSB;
    2b5c:	2380      	movs	r3, #128	; 0x80
    2b5e:	05db      	lsls	r3, r3, #23
    2b60:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2b62:	2300      	movs	r3, #0
    2b64:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    2b66:	22ff      	movs	r2, #255	; 0xff
    2b68:	4669      	mov	r1, sp
    2b6a:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    2b6c:	2200      	movs	r2, #0
    2b6e:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2b70:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    2b72:	2401      	movs	r4, #1
    2b74:	2124      	movs	r1, #36	; 0x24
    2b76:	4668      	mov	r0, sp
    2b78:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    2b7a:	3101      	adds	r1, #1
    2b7c:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    2b7e:	3101      	adds	r1, #1
    2b80:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    2b82:	3101      	adds	r1, #1
    2b84:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    2b86:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    2b88:	3105      	adds	r1, #5
    2b8a:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    2b8c:	3101      	adds	r1, #1
    2b8e:	5443      	strb	r3, [r0, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2b90:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2b92:	8203      	strh	r3, [r0, #16]
	config->lin_slave_enable      = false;
    2b94:	76c3      	strb	r3, [r0, #27]
	config->immediate_buffer_overflow_notification  = false;
    2b96:	7602      	strb	r2, [r0, #24]
	config->start_frame_detection_enable            = false;
    2b98:	7702      	strb	r2, [r0, #28]
	config->encoding_format_enable                  = false;
    2b9a:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    2b9c:	2313      	movs	r3, #19
    2b9e:	7683      	strb	r3, [r0, #26]
	config->collision_detection_enable              = false;
    2ba0:	7742      	strb	r2, [r0, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2ba2:	23c4      	movs	r3, #196	; 0xc4
    2ba4:	039b      	lsls	r3, r3, #14
    2ba6:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2ba8:	2301      	movs	r3, #1
    2baa:	425b      	negs	r3, r3
    2bac:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2bae:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2bb0:	4b39      	ldr	r3, [pc, #228]	; (2c98 <main+0x144>)
    2bb2:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2bb4:	4b39      	ldr	r3, [pc, #228]	; (2c9c <main+0x148>)
    2bb6:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    2bb8:	23e1      	movs	r3, #225	; 0xe1
    2bba:	025b      	lsls	r3, r3, #9
    2bbc:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2bbe:	4d38      	ldr	r5, [pc, #224]	; (2ca0 <main+0x14c>)
    2bc0:	4b38      	ldr	r3, [pc, #224]	; (2ca4 <main+0x150>)
    2bc2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2bc4:	4a38      	ldr	r2, [pc, #224]	; (2ca8 <main+0x154>)
    2bc6:	4b39      	ldr	r3, [pc, #228]	; (2cac <main+0x158>)
    2bc8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2bca:	4a39      	ldr	r2, [pc, #228]	; (2cb0 <main+0x15c>)
    2bcc:	4b39      	ldr	r3, [pc, #228]	; (2cb4 <main+0x160>)
    2bce:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    2bd0:	466a      	mov	r2, sp
    2bd2:	4939      	ldr	r1, [pc, #228]	; (2cb8 <main+0x164>)
    2bd4:	0028      	movs	r0, r5
    2bd6:	4b39      	ldr	r3, [pc, #228]	; (2cbc <main+0x168>)
    2bd8:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    2bda:	4f39      	ldr	r7, [pc, #228]	; (2cc0 <main+0x16c>)
    2bdc:	683b      	ldr	r3, [r7, #0]
    2bde:	6898      	ldr	r0, [r3, #8]
    2be0:	2100      	movs	r1, #0
    2be2:	4e38      	ldr	r6, [pc, #224]	; (2cc4 <main+0x170>)
    2be4:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2be6:	683b      	ldr	r3, [r7, #0]
    2be8:	6858      	ldr	r0, [r3, #4]
    2bea:	2100      	movs	r1, #0
    2bec:	47b0      	blx	r6
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bee:	682e      	ldr	r6, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2bf0:	0030      	movs	r0, r6
    2bf2:	4b35      	ldr	r3, [pc, #212]	; (2cc8 <main+0x174>)
    2bf4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2bf6:	231f      	movs	r3, #31
    2bf8:	4018      	ands	r0, r3
    2bfa:	4084      	lsls	r4, r0
    2bfc:	4b33      	ldr	r3, [pc, #204]	; (2ccc <main+0x178>)
    2bfe:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c00:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2c02:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2c04:	2b00      	cmp	r3, #0
    2c06:	d1fc      	bne.n	2c02 <main+0xae>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2c08:	6833      	ldr	r3, [r6, #0]
    2c0a:	2202      	movs	r2, #2
    2c0c:	4313      	orrs	r3, r2
    2c0e:	6033      	str	r3, [r6, #0]
	configure_console();				/* Initialize the UART console. */
	
	printf(STRING_HEADER);
    2c10:	482f      	ldr	r0, [pc, #188]	; (2cd0 <main+0x17c>)
    2c12:	4c30      	ldr	r4, [pc, #192]	; (2cd4 <main+0x180>)
    2c14:	47a0      	blx	r4
	delay_init();
    2c16:	4b30      	ldr	r3, [pc, #192]	; (2cd8 <main+0x184>)
    2c18:	4798      	blx	r3
	
	printf("\r\nmain: Initializing Board and peripherals ...... \r\n\r\n");
    2c1a:	4830      	ldr	r0, [pc, #192]	; (2cdc <main+0x188>)
    2c1c:	47a0      	blx	r4
	sd_mmc_init();
    2c1e:	4b30      	ldr	r3, [pc, #192]	; (2ce0 <main+0x18c>)
    2c20:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");
    2c22:	4830      	ldr	r0, [pc, #192]	; (2ce4 <main+0x190>)
    2c24:	47a0      	blx	r4
			status = sd_mmc_test_unit_ready(0);
    2c26:	4e30      	ldr	r6, [pc, #192]	; (2ce8 <main+0x194>)
				printf("init_storage: SD Card install failed.\r\n");
    2c28:	4c2a      	ldr	r4, [pc, #168]	; (2cd4 <main+0x180>)
    2c2a:	e008      	b.n	2c3e <main+0xea>
    2c2c:	482f      	ldr	r0, [pc, #188]	; (2cec <main+0x198>)
    2c2e:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
    2c30:	482f      	ldr	r0, [pc, #188]	; (2cf0 <main+0x19c>)
    2c32:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    2c34:	4d2f      	ldr	r5, [pc, #188]	; (2cf4 <main+0x1a0>)
    2c36:	2000      	movs	r0, #0
    2c38:	47a8      	blx	r5
    2c3a:	2802      	cmp	r0, #2
    2c3c:	d1fb      	bne.n	2c36 <main+0xe2>
			status = sd_mmc_test_unit_ready(0);
    2c3e:	2000      	movs	r0, #0
    2c40:	47b0      	blx	r6
			if (CTRL_FAIL == status) {
    2c42:	2801      	cmp	r0, #1
    2c44:	d0f2      	beq.n	2c2c <main+0xd8>
		} while (CTRL_GOOD != status);
    2c46:	2800      	cmp	r0, #0
    2c48:	d1f9      	bne.n	2c3e <main+0xea>
		printf("init_storage: mounting SD card...\r\n");
    2c4a:	482b      	ldr	r0, [pc, #172]	; (2cf8 <main+0x1a4>)
    2c4c:	4b21      	ldr	r3, [pc, #132]	; (2cd4 <main+0x180>)
    2c4e:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
    2c50:	4c2a      	ldr	r4, [pc, #168]	; (2cfc <main+0x1a8>)
    2c52:	228c      	movs	r2, #140	; 0x8c
    2c54:	0092      	lsls	r2, r2, #2
    2c56:	2100      	movs	r1, #0
    2c58:	0020      	movs	r0, r4
    2c5a:	4b29      	ldr	r3, [pc, #164]	; (2d00 <main+0x1ac>)
    2c5c:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    2c5e:	0021      	movs	r1, r4
    2c60:	2000      	movs	r0, #0
    2c62:	4b28      	ldr	r3, [pc, #160]	; (2d04 <main+0x1b0>)
    2c64:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    2c66:	280b      	cmp	r0, #11
    2c68:	d00f      	beq.n	2c8a <main+0x136>
		printf("init_storage: SD card mount OK.\r\n");
    2c6a:	4827      	ldr	r0, [pc, #156]	; (2d08 <main+0x1b4>)
    2c6c:	4b19      	ldr	r3, [pc, #100]	; (2cd4 <main+0x180>)
    2c6e:	4798      	blx	r3
	init_storage();							/* Initialize SD/MMC storage. */
	
	//configure_extint_channel();				/*Initialize BUTTON 0 as an external interrupt*/
	//configure_extint_callbacks();

	configure_nvm();						/*Initialize NVM */
    2c70:	4b26      	ldr	r3, [pc, #152]	; (2d0c <main+0x1b8>)
    2c72:	4798      	blx	r3
	cpu_irq_enable();
    2c74:	2201      	movs	r2, #1
    2c76:	4b26      	ldr	r3, [pc, #152]	; (2d10 <main+0x1bc>)
    2c78:	701a      	strb	r2, [r3, #0]
    2c7a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2c7e:	b662      	cpsie	i
	/** INITIALIZATION COMPLETE */	

	
	//////////////////////////////////////////////////////////////////////////////////
	/** ----------------BOOTLAODER CODE---------------------*/
	jump_to_app();
    2c80:	4b24      	ldr	r3, [pc, #144]	; (2d14 <main+0x1c0>)
    2c82:	4798      	blx	r3
// 		// SD card operation
// 		if(sd_card_to_nvm_copy() != 1)		
// 			jump_to_app();
// 	}	
	return 0;	
}
    2c84:	2000      	movs	r0, #0
    2c86:	b011      	add	sp, #68	; 0x44
    2c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
    2c8a:	210b      	movs	r1, #11
    2c8c:	4822      	ldr	r0, [pc, #136]	; (2d18 <main+0x1c4>)
    2c8e:	4b23      	ldr	r3, [pc, #140]	; (2d1c <main+0x1c8>)
    2c90:	4798      	blx	r3
    2c92:	e7ed      	b.n	2c70 <main+0x11c>
    2c94:	0000281d 	.word	0x0000281d
    2c98:	002a0003 	.word	0x002a0003
    2c9c:	002b0003 	.word	0x002b0003
    2ca0:	2000017c 	.word	0x2000017c
    2ca4:	20000454 	.word	0x20000454
    2ca8:	00002a6d 	.word	0x00002a6d
    2cac:	20000450 	.word	0x20000450
    2cb0:	00002a41 	.word	0x00002a41
    2cb4:	2000044c 	.word	0x2000044c
    2cb8:	42001800 	.word	0x42001800
    2cbc:	00001b35 	.word	0x00001b35
    2cc0:	20000010 	.word	0x20000010
    2cc4:	00002fed 	.word	0x00002fed
    2cc8:	00001365 	.word	0x00001365
    2ccc:	e000e100 	.word	0xe000e100
    2cd0:	000040e4 	.word	0x000040e4
    2cd4:	00002fd9 	.word	0x00002fd9
    2cd8:	00000cd5 	.word	0x00000cd5
    2cdc:	00004144 	.word	0x00004144
    2ce0:	00000239 	.word	0x00000239
    2ce4:	0000417c 	.word	0x0000417c
    2ce8:	00000731 	.word	0x00000731
    2cec:	000041b4 	.word	0x000041b4
    2cf0:	000041dc 	.word	0x000041dc
    2cf4:	00000259 	.word	0x00000259
    2cf8:	0000420c 	.word	0x0000420c
    2cfc:	200001b0 	.word	0x200001b0
    2d00:	00002ed5 	.word	0x00002ed5
    2d04:	00002a01 	.word	0x00002a01
    2d08:	00004260 	.word	0x00004260
    2d0c:	00002a85 	.word	0x00002a85
    2d10:	2000000c 	.word	0x2000000c
    2d14:	00002b29 	.word	0x00002b29
    2d18:	00004230 	.word	0x00004230
    2d1c:	00002ee5 	.word	0x00002ee5

00002d20 <__udivsi3>:
    2d20:	2200      	movs	r2, #0
    2d22:	0843      	lsrs	r3, r0, #1
    2d24:	428b      	cmp	r3, r1
    2d26:	d374      	bcc.n	2e12 <__udivsi3+0xf2>
    2d28:	0903      	lsrs	r3, r0, #4
    2d2a:	428b      	cmp	r3, r1
    2d2c:	d35f      	bcc.n	2dee <__udivsi3+0xce>
    2d2e:	0a03      	lsrs	r3, r0, #8
    2d30:	428b      	cmp	r3, r1
    2d32:	d344      	bcc.n	2dbe <__udivsi3+0x9e>
    2d34:	0b03      	lsrs	r3, r0, #12
    2d36:	428b      	cmp	r3, r1
    2d38:	d328      	bcc.n	2d8c <__udivsi3+0x6c>
    2d3a:	0c03      	lsrs	r3, r0, #16
    2d3c:	428b      	cmp	r3, r1
    2d3e:	d30d      	bcc.n	2d5c <__udivsi3+0x3c>
    2d40:	22ff      	movs	r2, #255	; 0xff
    2d42:	0209      	lsls	r1, r1, #8
    2d44:	ba12      	rev	r2, r2
    2d46:	0c03      	lsrs	r3, r0, #16
    2d48:	428b      	cmp	r3, r1
    2d4a:	d302      	bcc.n	2d52 <__udivsi3+0x32>
    2d4c:	1212      	asrs	r2, r2, #8
    2d4e:	0209      	lsls	r1, r1, #8
    2d50:	d065      	beq.n	2e1e <__udivsi3+0xfe>
    2d52:	0b03      	lsrs	r3, r0, #12
    2d54:	428b      	cmp	r3, r1
    2d56:	d319      	bcc.n	2d8c <__udivsi3+0x6c>
    2d58:	e000      	b.n	2d5c <__udivsi3+0x3c>
    2d5a:	0a09      	lsrs	r1, r1, #8
    2d5c:	0bc3      	lsrs	r3, r0, #15
    2d5e:	428b      	cmp	r3, r1
    2d60:	d301      	bcc.n	2d66 <__udivsi3+0x46>
    2d62:	03cb      	lsls	r3, r1, #15
    2d64:	1ac0      	subs	r0, r0, r3
    2d66:	4152      	adcs	r2, r2
    2d68:	0b83      	lsrs	r3, r0, #14
    2d6a:	428b      	cmp	r3, r1
    2d6c:	d301      	bcc.n	2d72 <__udivsi3+0x52>
    2d6e:	038b      	lsls	r3, r1, #14
    2d70:	1ac0      	subs	r0, r0, r3
    2d72:	4152      	adcs	r2, r2
    2d74:	0b43      	lsrs	r3, r0, #13
    2d76:	428b      	cmp	r3, r1
    2d78:	d301      	bcc.n	2d7e <__udivsi3+0x5e>
    2d7a:	034b      	lsls	r3, r1, #13
    2d7c:	1ac0      	subs	r0, r0, r3
    2d7e:	4152      	adcs	r2, r2
    2d80:	0b03      	lsrs	r3, r0, #12
    2d82:	428b      	cmp	r3, r1
    2d84:	d301      	bcc.n	2d8a <__udivsi3+0x6a>
    2d86:	030b      	lsls	r3, r1, #12
    2d88:	1ac0      	subs	r0, r0, r3
    2d8a:	4152      	adcs	r2, r2
    2d8c:	0ac3      	lsrs	r3, r0, #11
    2d8e:	428b      	cmp	r3, r1
    2d90:	d301      	bcc.n	2d96 <__udivsi3+0x76>
    2d92:	02cb      	lsls	r3, r1, #11
    2d94:	1ac0      	subs	r0, r0, r3
    2d96:	4152      	adcs	r2, r2
    2d98:	0a83      	lsrs	r3, r0, #10
    2d9a:	428b      	cmp	r3, r1
    2d9c:	d301      	bcc.n	2da2 <__udivsi3+0x82>
    2d9e:	028b      	lsls	r3, r1, #10
    2da0:	1ac0      	subs	r0, r0, r3
    2da2:	4152      	adcs	r2, r2
    2da4:	0a43      	lsrs	r3, r0, #9
    2da6:	428b      	cmp	r3, r1
    2da8:	d301      	bcc.n	2dae <__udivsi3+0x8e>
    2daa:	024b      	lsls	r3, r1, #9
    2dac:	1ac0      	subs	r0, r0, r3
    2dae:	4152      	adcs	r2, r2
    2db0:	0a03      	lsrs	r3, r0, #8
    2db2:	428b      	cmp	r3, r1
    2db4:	d301      	bcc.n	2dba <__udivsi3+0x9a>
    2db6:	020b      	lsls	r3, r1, #8
    2db8:	1ac0      	subs	r0, r0, r3
    2dba:	4152      	adcs	r2, r2
    2dbc:	d2cd      	bcs.n	2d5a <__udivsi3+0x3a>
    2dbe:	09c3      	lsrs	r3, r0, #7
    2dc0:	428b      	cmp	r3, r1
    2dc2:	d301      	bcc.n	2dc8 <__udivsi3+0xa8>
    2dc4:	01cb      	lsls	r3, r1, #7
    2dc6:	1ac0      	subs	r0, r0, r3
    2dc8:	4152      	adcs	r2, r2
    2dca:	0983      	lsrs	r3, r0, #6
    2dcc:	428b      	cmp	r3, r1
    2dce:	d301      	bcc.n	2dd4 <__udivsi3+0xb4>
    2dd0:	018b      	lsls	r3, r1, #6
    2dd2:	1ac0      	subs	r0, r0, r3
    2dd4:	4152      	adcs	r2, r2
    2dd6:	0943      	lsrs	r3, r0, #5
    2dd8:	428b      	cmp	r3, r1
    2dda:	d301      	bcc.n	2de0 <__udivsi3+0xc0>
    2ddc:	014b      	lsls	r3, r1, #5
    2dde:	1ac0      	subs	r0, r0, r3
    2de0:	4152      	adcs	r2, r2
    2de2:	0903      	lsrs	r3, r0, #4
    2de4:	428b      	cmp	r3, r1
    2de6:	d301      	bcc.n	2dec <__udivsi3+0xcc>
    2de8:	010b      	lsls	r3, r1, #4
    2dea:	1ac0      	subs	r0, r0, r3
    2dec:	4152      	adcs	r2, r2
    2dee:	08c3      	lsrs	r3, r0, #3
    2df0:	428b      	cmp	r3, r1
    2df2:	d301      	bcc.n	2df8 <__udivsi3+0xd8>
    2df4:	00cb      	lsls	r3, r1, #3
    2df6:	1ac0      	subs	r0, r0, r3
    2df8:	4152      	adcs	r2, r2
    2dfa:	0883      	lsrs	r3, r0, #2
    2dfc:	428b      	cmp	r3, r1
    2dfe:	d301      	bcc.n	2e04 <__udivsi3+0xe4>
    2e00:	008b      	lsls	r3, r1, #2
    2e02:	1ac0      	subs	r0, r0, r3
    2e04:	4152      	adcs	r2, r2
    2e06:	0843      	lsrs	r3, r0, #1
    2e08:	428b      	cmp	r3, r1
    2e0a:	d301      	bcc.n	2e10 <__udivsi3+0xf0>
    2e0c:	004b      	lsls	r3, r1, #1
    2e0e:	1ac0      	subs	r0, r0, r3
    2e10:	4152      	adcs	r2, r2
    2e12:	1a41      	subs	r1, r0, r1
    2e14:	d200      	bcs.n	2e18 <__udivsi3+0xf8>
    2e16:	4601      	mov	r1, r0
    2e18:	4152      	adcs	r2, r2
    2e1a:	4610      	mov	r0, r2
    2e1c:	4770      	bx	lr
    2e1e:	e7ff      	b.n	2e20 <__udivsi3+0x100>
    2e20:	b501      	push	{r0, lr}
    2e22:	2000      	movs	r0, #0
    2e24:	f000 f806 	bl	2e34 <__aeabi_idiv0>
    2e28:	bd02      	pop	{r1, pc}
    2e2a:	46c0      	nop			; (mov r8, r8)

00002e2c <__aeabi_uidivmod>:
    2e2c:	2900      	cmp	r1, #0
    2e2e:	d0f7      	beq.n	2e20 <__udivsi3+0x100>
    2e30:	e776      	b.n	2d20 <__udivsi3>
    2e32:	4770      	bx	lr

00002e34 <__aeabi_idiv0>:
    2e34:	4770      	bx	lr
    2e36:	46c0      	nop			; (mov r8, r8)

00002e38 <__aeabi_lmul>:
    2e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e3a:	46ce      	mov	lr, r9
    2e3c:	4647      	mov	r7, r8
    2e3e:	0415      	lsls	r5, r2, #16
    2e40:	0c2d      	lsrs	r5, r5, #16
    2e42:	002e      	movs	r6, r5
    2e44:	b580      	push	{r7, lr}
    2e46:	0407      	lsls	r7, r0, #16
    2e48:	0c14      	lsrs	r4, r2, #16
    2e4a:	0c3f      	lsrs	r7, r7, #16
    2e4c:	4699      	mov	r9, r3
    2e4e:	0c03      	lsrs	r3, r0, #16
    2e50:	437e      	muls	r6, r7
    2e52:	435d      	muls	r5, r3
    2e54:	4367      	muls	r7, r4
    2e56:	4363      	muls	r3, r4
    2e58:	197f      	adds	r7, r7, r5
    2e5a:	0c34      	lsrs	r4, r6, #16
    2e5c:	19e4      	adds	r4, r4, r7
    2e5e:	469c      	mov	ip, r3
    2e60:	42a5      	cmp	r5, r4
    2e62:	d903      	bls.n	2e6c <__aeabi_lmul+0x34>
    2e64:	2380      	movs	r3, #128	; 0x80
    2e66:	025b      	lsls	r3, r3, #9
    2e68:	4698      	mov	r8, r3
    2e6a:	44c4      	add	ip, r8
    2e6c:	464b      	mov	r3, r9
    2e6e:	4351      	muls	r1, r2
    2e70:	4343      	muls	r3, r0
    2e72:	0436      	lsls	r6, r6, #16
    2e74:	0c36      	lsrs	r6, r6, #16
    2e76:	0c25      	lsrs	r5, r4, #16
    2e78:	0424      	lsls	r4, r4, #16
    2e7a:	4465      	add	r5, ip
    2e7c:	19a4      	adds	r4, r4, r6
    2e7e:	1859      	adds	r1, r3, r1
    2e80:	1949      	adds	r1, r1, r5
    2e82:	0020      	movs	r0, r4
    2e84:	bc0c      	pop	{r2, r3}
    2e86:	4690      	mov	r8, r2
    2e88:	4699      	mov	r9, r3
    2e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002e8c <__libc_init_array>:
    2e8c:	b570      	push	{r4, r5, r6, lr}
    2e8e:	2600      	movs	r6, #0
    2e90:	4d0c      	ldr	r5, [pc, #48]	; (2ec4 <__libc_init_array+0x38>)
    2e92:	4c0d      	ldr	r4, [pc, #52]	; (2ec8 <__libc_init_array+0x3c>)
    2e94:	1b64      	subs	r4, r4, r5
    2e96:	10a4      	asrs	r4, r4, #2
    2e98:	42a6      	cmp	r6, r4
    2e9a:	d109      	bne.n	2eb0 <__libc_init_array+0x24>
    2e9c:	2600      	movs	r6, #0
    2e9e:	f001 fa3d 	bl	431c <_init>
    2ea2:	4d0a      	ldr	r5, [pc, #40]	; (2ecc <__libc_init_array+0x40>)
    2ea4:	4c0a      	ldr	r4, [pc, #40]	; (2ed0 <__libc_init_array+0x44>)
    2ea6:	1b64      	subs	r4, r4, r5
    2ea8:	10a4      	asrs	r4, r4, #2
    2eaa:	42a6      	cmp	r6, r4
    2eac:	d105      	bne.n	2eba <__libc_init_array+0x2e>
    2eae:	bd70      	pop	{r4, r5, r6, pc}
    2eb0:	00b3      	lsls	r3, r6, #2
    2eb2:	58eb      	ldr	r3, [r5, r3]
    2eb4:	4798      	blx	r3
    2eb6:	3601      	adds	r6, #1
    2eb8:	e7ee      	b.n	2e98 <__libc_init_array+0xc>
    2eba:	00b3      	lsls	r3, r6, #2
    2ebc:	58eb      	ldr	r3, [r5, r3]
    2ebe:	4798      	blx	r3
    2ec0:	3601      	adds	r6, #1
    2ec2:	e7f2      	b.n	2eaa <__libc_init_array+0x1e>
    2ec4:	00004328 	.word	0x00004328
    2ec8:	00004328 	.word	0x00004328
    2ecc:	00004328 	.word	0x00004328
    2ed0:	0000432c 	.word	0x0000432c

00002ed4 <memset>:
    2ed4:	0003      	movs	r3, r0
    2ed6:	1882      	adds	r2, r0, r2
    2ed8:	4293      	cmp	r3, r2
    2eda:	d100      	bne.n	2ede <memset+0xa>
    2edc:	4770      	bx	lr
    2ede:	7019      	strb	r1, [r3, #0]
    2ee0:	3301      	adds	r3, #1
    2ee2:	e7f9      	b.n	2ed8 <memset+0x4>

00002ee4 <iprintf>:
    2ee4:	b40f      	push	{r0, r1, r2, r3}
    2ee6:	4b0b      	ldr	r3, [pc, #44]	; (2f14 <iprintf+0x30>)
    2ee8:	b513      	push	{r0, r1, r4, lr}
    2eea:	681c      	ldr	r4, [r3, #0]
    2eec:	2c00      	cmp	r4, #0
    2eee:	d005      	beq.n	2efc <iprintf+0x18>
    2ef0:	69a3      	ldr	r3, [r4, #24]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d102      	bne.n	2efc <iprintf+0x18>
    2ef6:	0020      	movs	r0, r4
    2ef8:	f000 faf2 	bl	34e0 <__sinit>
    2efc:	ab05      	add	r3, sp, #20
    2efe:	9a04      	ldr	r2, [sp, #16]
    2f00:	68a1      	ldr	r1, [r4, #8]
    2f02:	0020      	movs	r0, r4
    2f04:	9301      	str	r3, [sp, #4]
    2f06:	f000 fcc7 	bl	3898 <_vfiprintf_r>
    2f0a:	bc16      	pop	{r1, r2, r4}
    2f0c:	bc08      	pop	{r3}
    2f0e:	b004      	add	sp, #16
    2f10:	4718      	bx	r3
    2f12:	46c0      	nop			; (mov r8, r8)
    2f14:	20000010 	.word	0x20000010

00002f18 <_puts_r>:
    2f18:	b570      	push	{r4, r5, r6, lr}
    2f1a:	0005      	movs	r5, r0
    2f1c:	000e      	movs	r6, r1
    2f1e:	2800      	cmp	r0, #0
    2f20:	d004      	beq.n	2f2c <_puts_r+0x14>
    2f22:	6983      	ldr	r3, [r0, #24]
    2f24:	2b00      	cmp	r3, #0
    2f26:	d101      	bne.n	2f2c <_puts_r+0x14>
    2f28:	f000 fada 	bl	34e0 <__sinit>
    2f2c:	69ab      	ldr	r3, [r5, #24]
    2f2e:	68ac      	ldr	r4, [r5, #8]
    2f30:	2b00      	cmp	r3, #0
    2f32:	d102      	bne.n	2f3a <_puts_r+0x22>
    2f34:	0028      	movs	r0, r5
    2f36:	f000 fad3 	bl	34e0 <__sinit>
    2f3a:	4b24      	ldr	r3, [pc, #144]	; (2fcc <_puts_r+0xb4>)
    2f3c:	429c      	cmp	r4, r3
    2f3e:	d10f      	bne.n	2f60 <_puts_r+0x48>
    2f40:	686c      	ldr	r4, [r5, #4]
    2f42:	89a3      	ldrh	r3, [r4, #12]
    2f44:	071b      	lsls	r3, r3, #28
    2f46:	d502      	bpl.n	2f4e <_puts_r+0x36>
    2f48:	6923      	ldr	r3, [r4, #16]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d120      	bne.n	2f90 <_puts_r+0x78>
    2f4e:	0021      	movs	r1, r4
    2f50:	0028      	movs	r0, r5
    2f52:	f000 f957 	bl	3204 <__swsetup_r>
    2f56:	2800      	cmp	r0, #0
    2f58:	d01a      	beq.n	2f90 <_puts_r+0x78>
    2f5a:	2001      	movs	r0, #1
    2f5c:	4240      	negs	r0, r0
    2f5e:	bd70      	pop	{r4, r5, r6, pc}
    2f60:	4b1b      	ldr	r3, [pc, #108]	; (2fd0 <_puts_r+0xb8>)
    2f62:	429c      	cmp	r4, r3
    2f64:	d101      	bne.n	2f6a <_puts_r+0x52>
    2f66:	68ac      	ldr	r4, [r5, #8]
    2f68:	e7eb      	b.n	2f42 <_puts_r+0x2a>
    2f6a:	4b1a      	ldr	r3, [pc, #104]	; (2fd4 <_puts_r+0xbc>)
    2f6c:	429c      	cmp	r4, r3
    2f6e:	d1e8      	bne.n	2f42 <_puts_r+0x2a>
    2f70:	68ec      	ldr	r4, [r5, #12]
    2f72:	e7e6      	b.n	2f42 <_puts_r+0x2a>
    2f74:	3b01      	subs	r3, #1
    2f76:	3601      	adds	r6, #1
    2f78:	60a3      	str	r3, [r4, #8]
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	da04      	bge.n	2f88 <_puts_r+0x70>
    2f7e:	69a2      	ldr	r2, [r4, #24]
    2f80:	4293      	cmp	r3, r2
    2f82:	db16      	blt.n	2fb2 <_puts_r+0x9a>
    2f84:	290a      	cmp	r1, #10
    2f86:	d014      	beq.n	2fb2 <_puts_r+0x9a>
    2f88:	6823      	ldr	r3, [r4, #0]
    2f8a:	1c5a      	adds	r2, r3, #1
    2f8c:	6022      	str	r2, [r4, #0]
    2f8e:	7019      	strb	r1, [r3, #0]
    2f90:	7831      	ldrb	r1, [r6, #0]
    2f92:	68a3      	ldr	r3, [r4, #8]
    2f94:	2900      	cmp	r1, #0
    2f96:	d1ed      	bne.n	2f74 <_puts_r+0x5c>
    2f98:	3b01      	subs	r3, #1
    2f9a:	60a3      	str	r3, [r4, #8]
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	da0f      	bge.n	2fc0 <_puts_r+0xa8>
    2fa0:	0022      	movs	r2, r4
    2fa2:	310a      	adds	r1, #10
    2fa4:	0028      	movs	r0, r5
    2fa6:	f000 f8d7 	bl	3158 <__swbuf_r>
    2faa:	1c43      	adds	r3, r0, #1
    2fac:	d0d5      	beq.n	2f5a <_puts_r+0x42>
    2fae:	200a      	movs	r0, #10
    2fb0:	e7d5      	b.n	2f5e <_puts_r+0x46>
    2fb2:	0022      	movs	r2, r4
    2fb4:	0028      	movs	r0, r5
    2fb6:	f000 f8cf 	bl	3158 <__swbuf_r>
    2fba:	1c43      	adds	r3, r0, #1
    2fbc:	d1e8      	bne.n	2f90 <_puts_r+0x78>
    2fbe:	e7cc      	b.n	2f5a <_puts_r+0x42>
    2fc0:	200a      	movs	r0, #10
    2fc2:	6823      	ldr	r3, [r4, #0]
    2fc4:	1c5a      	adds	r2, r3, #1
    2fc6:	6022      	str	r2, [r4, #0]
    2fc8:	7018      	strb	r0, [r3, #0]
    2fca:	e7c8      	b.n	2f5e <_puts_r+0x46>
    2fcc:	000042a8 	.word	0x000042a8
    2fd0:	000042c8 	.word	0x000042c8
    2fd4:	00004288 	.word	0x00004288

00002fd8 <puts>:
    2fd8:	b510      	push	{r4, lr}
    2fda:	4b03      	ldr	r3, [pc, #12]	; (2fe8 <puts+0x10>)
    2fdc:	0001      	movs	r1, r0
    2fde:	6818      	ldr	r0, [r3, #0]
    2fe0:	f7ff ff9a 	bl	2f18 <_puts_r>
    2fe4:	bd10      	pop	{r4, pc}
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	20000010 	.word	0x20000010

00002fec <setbuf>:
    2fec:	424a      	negs	r2, r1
    2fee:	414a      	adcs	r2, r1
    2ff0:	2380      	movs	r3, #128	; 0x80
    2ff2:	b510      	push	{r4, lr}
    2ff4:	0052      	lsls	r2, r2, #1
    2ff6:	00db      	lsls	r3, r3, #3
    2ff8:	f000 f802 	bl	3000 <setvbuf>
    2ffc:	bd10      	pop	{r4, pc}
	...

00003000 <setvbuf>:
    3000:	b5f0      	push	{r4, r5, r6, r7, lr}
    3002:	001d      	movs	r5, r3
    3004:	4b4f      	ldr	r3, [pc, #316]	; (3144 <setvbuf+0x144>)
    3006:	b085      	sub	sp, #20
    3008:	681e      	ldr	r6, [r3, #0]
    300a:	0004      	movs	r4, r0
    300c:	000f      	movs	r7, r1
    300e:	9200      	str	r2, [sp, #0]
    3010:	2e00      	cmp	r6, #0
    3012:	d005      	beq.n	3020 <setvbuf+0x20>
    3014:	69b3      	ldr	r3, [r6, #24]
    3016:	2b00      	cmp	r3, #0
    3018:	d102      	bne.n	3020 <setvbuf+0x20>
    301a:	0030      	movs	r0, r6
    301c:	f000 fa60 	bl	34e0 <__sinit>
    3020:	4b49      	ldr	r3, [pc, #292]	; (3148 <setvbuf+0x148>)
    3022:	429c      	cmp	r4, r3
    3024:	d150      	bne.n	30c8 <setvbuf+0xc8>
    3026:	6874      	ldr	r4, [r6, #4]
    3028:	9b00      	ldr	r3, [sp, #0]
    302a:	2b02      	cmp	r3, #2
    302c:	d005      	beq.n	303a <setvbuf+0x3a>
    302e:	2b01      	cmp	r3, #1
    3030:	d900      	bls.n	3034 <setvbuf+0x34>
    3032:	e084      	b.n	313e <setvbuf+0x13e>
    3034:	2d00      	cmp	r5, #0
    3036:	da00      	bge.n	303a <setvbuf+0x3a>
    3038:	e081      	b.n	313e <setvbuf+0x13e>
    303a:	0021      	movs	r1, r4
    303c:	0030      	movs	r0, r6
    303e:	f000 f9e1 	bl	3404 <_fflush_r>
    3042:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3044:	2900      	cmp	r1, #0
    3046:	d008      	beq.n	305a <setvbuf+0x5a>
    3048:	0023      	movs	r3, r4
    304a:	3344      	adds	r3, #68	; 0x44
    304c:	4299      	cmp	r1, r3
    304e:	d002      	beq.n	3056 <setvbuf+0x56>
    3050:	0030      	movs	r0, r6
    3052:	f000 fb51 	bl	36f8 <_free_r>
    3056:	2300      	movs	r3, #0
    3058:	6363      	str	r3, [r4, #52]	; 0x34
    305a:	2300      	movs	r3, #0
    305c:	61a3      	str	r3, [r4, #24]
    305e:	6063      	str	r3, [r4, #4]
    3060:	89a3      	ldrh	r3, [r4, #12]
    3062:	061b      	lsls	r3, r3, #24
    3064:	d503      	bpl.n	306e <setvbuf+0x6e>
    3066:	6921      	ldr	r1, [r4, #16]
    3068:	0030      	movs	r0, r6
    306a:	f000 fb45 	bl	36f8 <_free_r>
    306e:	89a3      	ldrh	r3, [r4, #12]
    3070:	4a36      	ldr	r2, [pc, #216]	; (314c <setvbuf+0x14c>)
    3072:	4013      	ands	r3, r2
    3074:	81a3      	strh	r3, [r4, #12]
    3076:	9b00      	ldr	r3, [sp, #0]
    3078:	2b02      	cmp	r3, #2
    307a:	d05a      	beq.n	3132 <setvbuf+0x132>
    307c:	ab03      	add	r3, sp, #12
    307e:	aa02      	add	r2, sp, #8
    3080:	0021      	movs	r1, r4
    3082:	0030      	movs	r0, r6
    3084:	f000 fac2 	bl	360c <__swhatbuf_r>
    3088:	89a3      	ldrh	r3, [r4, #12]
    308a:	4318      	orrs	r0, r3
    308c:	81a0      	strh	r0, [r4, #12]
    308e:	2d00      	cmp	r5, #0
    3090:	d124      	bne.n	30dc <setvbuf+0xdc>
    3092:	9d02      	ldr	r5, [sp, #8]
    3094:	0028      	movs	r0, r5
    3096:	f000 fb25 	bl	36e4 <malloc>
    309a:	9501      	str	r5, [sp, #4]
    309c:	1e07      	subs	r7, r0, #0
    309e:	d142      	bne.n	3126 <setvbuf+0x126>
    30a0:	9b02      	ldr	r3, [sp, #8]
    30a2:	9301      	str	r3, [sp, #4]
    30a4:	42ab      	cmp	r3, r5
    30a6:	d139      	bne.n	311c <setvbuf+0x11c>
    30a8:	2001      	movs	r0, #1
    30aa:	4240      	negs	r0, r0
    30ac:	2302      	movs	r3, #2
    30ae:	89a2      	ldrh	r2, [r4, #12]
    30b0:	4313      	orrs	r3, r2
    30b2:	81a3      	strh	r3, [r4, #12]
    30b4:	2300      	movs	r3, #0
    30b6:	60a3      	str	r3, [r4, #8]
    30b8:	0023      	movs	r3, r4
    30ba:	3347      	adds	r3, #71	; 0x47
    30bc:	6023      	str	r3, [r4, #0]
    30be:	6123      	str	r3, [r4, #16]
    30c0:	2301      	movs	r3, #1
    30c2:	6163      	str	r3, [r4, #20]
    30c4:	b005      	add	sp, #20
    30c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30c8:	4b21      	ldr	r3, [pc, #132]	; (3150 <setvbuf+0x150>)
    30ca:	429c      	cmp	r4, r3
    30cc:	d101      	bne.n	30d2 <setvbuf+0xd2>
    30ce:	68b4      	ldr	r4, [r6, #8]
    30d0:	e7aa      	b.n	3028 <setvbuf+0x28>
    30d2:	4b20      	ldr	r3, [pc, #128]	; (3154 <setvbuf+0x154>)
    30d4:	429c      	cmp	r4, r3
    30d6:	d1a7      	bne.n	3028 <setvbuf+0x28>
    30d8:	68f4      	ldr	r4, [r6, #12]
    30da:	e7a5      	b.n	3028 <setvbuf+0x28>
    30dc:	2f00      	cmp	r7, #0
    30de:	d0d9      	beq.n	3094 <setvbuf+0x94>
    30e0:	69b3      	ldr	r3, [r6, #24]
    30e2:	2b00      	cmp	r3, #0
    30e4:	d102      	bne.n	30ec <setvbuf+0xec>
    30e6:	0030      	movs	r0, r6
    30e8:	f000 f9fa 	bl	34e0 <__sinit>
    30ec:	9b00      	ldr	r3, [sp, #0]
    30ee:	2b01      	cmp	r3, #1
    30f0:	d103      	bne.n	30fa <setvbuf+0xfa>
    30f2:	89a3      	ldrh	r3, [r4, #12]
    30f4:	9a00      	ldr	r2, [sp, #0]
    30f6:	431a      	orrs	r2, r3
    30f8:	81a2      	strh	r2, [r4, #12]
    30fa:	2008      	movs	r0, #8
    30fc:	89a3      	ldrh	r3, [r4, #12]
    30fe:	6027      	str	r7, [r4, #0]
    3100:	6127      	str	r7, [r4, #16]
    3102:	6165      	str	r5, [r4, #20]
    3104:	4018      	ands	r0, r3
    3106:	d018      	beq.n	313a <setvbuf+0x13a>
    3108:	2001      	movs	r0, #1
    310a:	4018      	ands	r0, r3
    310c:	2300      	movs	r3, #0
    310e:	4298      	cmp	r0, r3
    3110:	d011      	beq.n	3136 <setvbuf+0x136>
    3112:	426d      	negs	r5, r5
    3114:	60a3      	str	r3, [r4, #8]
    3116:	61a5      	str	r5, [r4, #24]
    3118:	0018      	movs	r0, r3
    311a:	e7d3      	b.n	30c4 <setvbuf+0xc4>
    311c:	9801      	ldr	r0, [sp, #4]
    311e:	f000 fae1 	bl	36e4 <malloc>
    3122:	1e07      	subs	r7, r0, #0
    3124:	d0c0      	beq.n	30a8 <setvbuf+0xa8>
    3126:	2380      	movs	r3, #128	; 0x80
    3128:	89a2      	ldrh	r2, [r4, #12]
    312a:	9d01      	ldr	r5, [sp, #4]
    312c:	4313      	orrs	r3, r2
    312e:	81a3      	strh	r3, [r4, #12]
    3130:	e7d6      	b.n	30e0 <setvbuf+0xe0>
    3132:	2000      	movs	r0, #0
    3134:	e7ba      	b.n	30ac <setvbuf+0xac>
    3136:	60a5      	str	r5, [r4, #8]
    3138:	e7c4      	b.n	30c4 <setvbuf+0xc4>
    313a:	60a0      	str	r0, [r4, #8]
    313c:	e7c2      	b.n	30c4 <setvbuf+0xc4>
    313e:	2001      	movs	r0, #1
    3140:	4240      	negs	r0, r0
    3142:	e7bf      	b.n	30c4 <setvbuf+0xc4>
    3144:	20000010 	.word	0x20000010
    3148:	000042a8 	.word	0x000042a8
    314c:	fffff35c 	.word	0xfffff35c
    3150:	000042c8 	.word	0x000042c8
    3154:	00004288 	.word	0x00004288

00003158 <__swbuf_r>:
    3158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    315a:	0005      	movs	r5, r0
    315c:	000e      	movs	r6, r1
    315e:	0014      	movs	r4, r2
    3160:	2800      	cmp	r0, #0
    3162:	d004      	beq.n	316e <__swbuf_r+0x16>
    3164:	6983      	ldr	r3, [r0, #24]
    3166:	2b00      	cmp	r3, #0
    3168:	d101      	bne.n	316e <__swbuf_r+0x16>
    316a:	f000 f9b9 	bl	34e0 <__sinit>
    316e:	4b22      	ldr	r3, [pc, #136]	; (31f8 <__swbuf_r+0xa0>)
    3170:	429c      	cmp	r4, r3
    3172:	d12d      	bne.n	31d0 <__swbuf_r+0x78>
    3174:	686c      	ldr	r4, [r5, #4]
    3176:	69a3      	ldr	r3, [r4, #24]
    3178:	60a3      	str	r3, [r4, #8]
    317a:	89a3      	ldrh	r3, [r4, #12]
    317c:	071b      	lsls	r3, r3, #28
    317e:	d531      	bpl.n	31e4 <__swbuf_r+0x8c>
    3180:	6923      	ldr	r3, [r4, #16]
    3182:	2b00      	cmp	r3, #0
    3184:	d02e      	beq.n	31e4 <__swbuf_r+0x8c>
    3186:	6823      	ldr	r3, [r4, #0]
    3188:	6922      	ldr	r2, [r4, #16]
    318a:	b2f7      	uxtb	r7, r6
    318c:	1a98      	subs	r0, r3, r2
    318e:	6963      	ldr	r3, [r4, #20]
    3190:	b2f6      	uxtb	r6, r6
    3192:	4298      	cmp	r0, r3
    3194:	db05      	blt.n	31a2 <__swbuf_r+0x4a>
    3196:	0021      	movs	r1, r4
    3198:	0028      	movs	r0, r5
    319a:	f000 f933 	bl	3404 <_fflush_r>
    319e:	2800      	cmp	r0, #0
    31a0:	d126      	bne.n	31f0 <__swbuf_r+0x98>
    31a2:	68a3      	ldr	r3, [r4, #8]
    31a4:	3001      	adds	r0, #1
    31a6:	3b01      	subs	r3, #1
    31a8:	60a3      	str	r3, [r4, #8]
    31aa:	6823      	ldr	r3, [r4, #0]
    31ac:	1c5a      	adds	r2, r3, #1
    31ae:	6022      	str	r2, [r4, #0]
    31b0:	701f      	strb	r7, [r3, #0]
    31b2:	6963      	ldr	r3, [r4, #20]
    31b4:	4298      	cmp	r0, r3
    31b6:	d004      	beq.n	31c2 <__swbuf_r+0x6a>
    31b8:	89a3      	ldrh	r3, [r4, #12]
    31ba:	07db      	lsls	r3, r3, #31
    31bc:	d51a      	bpl.n	31f4 <__swbuf_r+0x9c>
    31be:	2e0a      	cmp	r6, #10
    31c0:	d118      	bne.n	31f4 <__swbuf_r+0x9c>
    31c2:	0021      	movs	r1, r4
    31c4:	0028      	movs	r0, r5
    31c6:	f000 f91d 	bl	3404 <_fflush_r>
    31ca:	2800      	cmp	r0, #0
    31cc:	d012      	beq.n	31f4 <__swbuf_r+0x9c>
    31ce:	e00f      	b.n	31f0 <__swbuf_r+0x98>
    31d0:	4b0a      	ldr	r3, [pc, #40]	; (31fc <__swbuf_r+0xa4>)
    31d2:	429c      	cmp	r4, r3
    31d4:	d101      	bne.n	31da <__swbuf_r+0x82>
    31d6:	68ac      	ldr	r4, [r5, #8]
    31d8:	e7cd      	b.n	3176 <__swbuf_r+0x1e>
    31da:	4b09      	ldr	r3, [pc, #36]	; (3200 <__swbuf_r+0xa8>)
    31dc:	429c      	cmp	r4, r3
    31de:	d1ca      	bne.n	3176 <__swbuf_r+0x1e>
    31e0:	68ec      	ldr	r4, [r5, #12]
    31e2:	e7c8      	b.n	3176 <__swbuf_r+0x1e>
    31e4:	0021      	movs	r1, r4
    31e6:	0028      	movs	r0, r5
    31e8:	f000 f80c 	bl	3204 <__swsetup_r>
    31ec:	2800      	cmp	r0, #0
    31ee:	d0ca      	beq.n	3186 <__swbuf_r+0x2e>
    31f0:	2601      	movs	r6, #1
    31f2:	4276      	negs	r6, r6
    31f4:	0030      	movs	r0, r6
    31f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31f8:	000042a8 	.word	0x000042a8
    31fc:	000042c8 	.word	0x000042c8
    3200:	00004288 	.word	0x00004288

00003204 <__swsetup_r>:
    3204:	4b36      	ldr	r3, [pc, #216]	; (32e0 <__swsetup_r+0xdc>)
    3206:	b570      	push	{r4, r5, r6, lr}
    3208:	681d      	ldr	r5, [r3, #0]
    320a:	0006      	movs	r6, r0
    320c:	000c      	movs	r4, r1
    320e:	2d00      	cmp	r5, #0
    3210:	d005      	beq.n	321e <__swsetup_r+0x1a>
    3212:	69ab      	ldr	r3, [r5, #24]
    3214:	2b00      	cmp	r3, #0
    3216:	d102      	bne.n	321e <__swsetup_r+0x1a>
    3218:	0028      	movs	r0, r5
    321a:	f000 f961 	bl	34e0 <__sinit>
    321e:	4b31      	ldr	r3, [pc, #196]	; (32e4 <__swsetup_r+0xe0>)
    3220:	429c      	cmp	r4, r3
    3222:	d10f      	bne.n	3244 <__swsetup_r+0x40>
    3224:	686c      	ldr	r4, [r5, #4]
    3226:	230c      	movs	r3, #12
    3228:	5ee2      	ldrsh	r2, [r4, r3]
    322a:	b293      	uxth	r3, r2
    322c:	0719      	lsls	r1, r3, #28
    322e:	d42d      	bmi.n	328c <__swsetup_r+0x88>
    3230:	06d9      	lsls	r1, r3, #27
    3232:	d411      	bmi.n	3258 <__swsetup_r+0x54>
    3234:	2309      	movs	r3, #9
    3236:	2001      	movs	r0, #1
    3238:	6033      	str	r3, [r6, #0]
    323a:	3337      	adds	r3, #55	; 0x37
    323c:	4313      	orrs	r3, r2
    323e:	81a3      	strh	r3, [r4, #12]
    3240:	4240      	negs	r0, r0
    3242:	bd70      	pop	{r4, r5, r6, pc}
    3244:	4b28      	ldr	r3, [pc, #160]	; (32e8 <__swsetup_r+0xe4>)
    3246:	429c      	cmp	r4, r3
    3248:	d101      	bne.n	324e <__swsetup_r+0x4a>
    324a:	68ac      	ldr	r4, [r5, #8]
    324c:	e7eb      	b.n	3226 <__swsetup_r+0x22>
    324e:	4b27      	ldr	r3, [pc, #156]	; (32ec <__swsetup_r+0xe8>)
    3250:	429c      	cmp	r4, r3
    3252:	d1e8      	bne.n	3226 <__swsetup_r+0x22>
    3254:	68ec      	ldr	r4, [r5, #12]
    3256:	e7e6      	b.n	3226 <__swsetup_r+0x22>
    3258:	075b      	lsls	r3, r3, #29
    325a:	d513      	bpl.n	3284 <__swsetup_r+0x80>
    325c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    325e:	2900      	cmp	r1, #0
    3260:	d008      	beq.n	3274 <__swsetup_r+0x70>
    3262:	0023      	movs	r3, r4
    3264:	3344      	adds	r3, #68	; 0x44
    3266:	4299      	cmp	r1, r3
    3268:	d002      	beq.n	3270 <__swsetup_r+0x6c>
    326a:	0030      	movs	r0, r6
    326c:	f000 fa44 	bl	36f8 <_free_r>
    3270:	2300      	movs	r3, #0
    3272:	6363      	str	r3, [r4, #52]	; 0x34
    3274:	2224      	movs	r2, #36	; 0x24
    3276:	89a3      	ldrh	r3, [r4, #12]
    3278:	4393      	bics	r3, r2
    327a:	81a3      	strh	r3, [r4, #12]
    327c:	2300      	movs	r3, #0
    327e:	6063      	str	r3, [r4, #4]
    3280:	6923      	ldr	r3, [r4, #16]
    3282:	6023      	str	r3, [r4, #0]
    3284:	2308      	movs	r3, #8
    3286:	89a2      	ldrh	r2, [r4, #12]
    3288:	4313      	orrs	r3, r2
    328a:	81a3      	strh	r3, [r4, #12]
    328c:	6923      	ldr	r3, [r4, #16]
    328e:	2b00      	cmp	r3, #0
    3290:	d10b      	bne.n	32aa <__swsetup_r+0xa6>
    3292:	21a0      	movs	r1, #160	; 0xa0
    3294:	2280      	movs	r2, #128	; 0x80
    3296:	89a3      	ldrh	r3, [r4, #12]
    3298:	0089      	lsls	r1, r1, #2
    329a:	0092      	lsls	r2, r2, #2
    329c:	400b      	ands	r3, r1
    329e:	4293      	cmp	r3, r2
    32a0:	d003      	beq.n	32aa <__swsetup_r+0xa6>
    32a2:	0021      	movs	r1, r4
    32a4:	0030      	movs	r0, r6
    32a6:	f000 f9d9 	bl	365c <__smakebuf_r>
    32aa:	2301      	movs	r3, #1
    32ac:	89a2      	ldrh	r2, [r4, #12]
    32ae:	4013      	ands	r3, r2
    32b0:	d011      	beq.n	32d6 <__swsetup_r+0xd2>
    32b2:	2300      	movs	r3, #0
    32b4:	60a3      	str	r3, [r4, #8]
    32b6:	6963      	ldr	r3, [r4, #20]
    32b8:	425b      	negs	r3, r3
    32ba:	61a3      	str	r3, [r4, #24]
    32bc:	2000      	movs	r0, #0
    32be:	6923      	ldr	r3, [r4, #16]
    32c0:	4283      	cmp	r3, r0
    32c2:	d1be      	bne.n	3242 <__swsetup_r+0x3e>
    32c4:	230c      	movs	r3, #12
    32c6:	5ee2      	ldrsh	r2, [r4, r3]
    32c8:	0613      	lsls	r3, r2, #24
    32ca:	d5ba      	bpl.n	3242 <__swsetup_r+0x3e>
    32cc:	2340      	movs	r3, #64	; 0x40
    32ce:	4313      	orrs	r3, r2
    32d0:	81a3      	strh	r3, [r4, #12]
    32d2:	3801      	subs	r0, #1
    32d4:	e7b5      	b.n	3242 <__swsetup_r+0x3e>
    32d6:	0792      	lsls	r2, r2, #30
    32d8:	d400      	bmi.n	32dc <__swsetup_r+0xd8>
    32da:	6963      	ldr	r3, [r4, #20]
    32dc:	60a3      	str	r3, [r4, #8]
    32de:	e7ed      	b.n	32bc <__swsetup_r+0xb8>
    32e0:	20000010 	.word	0x20000010
    32e4:	000042a8 	.word	0x000042a8
    32e8:	000042c8 	.word	0x000042c8
    32ec:	00004288 	.word	0x00004288

000032f0 <__sflush_r>:
    32f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    32f2:	898a      	ldrh	r2, [r1, #12]
    32f4:	0005      	movs	r5, r0
    32f6:	000c      	movs	r4, r1
    32f8:	0713      	lsls	r3, r2, #28
    32fa:	d460      	bmi.n	33be <__sflush_r+0xce>
    32fc:	684b      	ldr	r3, [r1, #4]
    32fe:	2b00      	cmp	r3, #0
    3300:	dc04      	bgt.n	330c <__sflush_r+0x1c>
    3302:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3304:	2b00      	cmp	r3, #0
    3306:	dc01      	bgt.n	330c <__sflush_r+0x1c>
    3308:	2000      	movs	r0, #0
    330a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    330c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    330e:	2f00      	cmp	r7, #0
    3310:	d0fa      	beq.n	3308 <__sflush_r+0x18>
    3312:	2300      	movs	r3, #0
    3314:	682e      	ldr	r6, [r5, #0]
    3316:	602b      	str	r3, [r5, #0]
    3318:	2380      	movs	r3, #128	; 0x80
    331a:	015b      	lsls	r3, r3, #5
    331c:	401a      	ands	r2, r3
    331e:	d034      	beq.n	338a <__sflush_r+0x9a>
    3320:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3322:	89a3      	ldrh	r3, [r4, #12]
    3324:	075b      	lsls	r3, r3, #29
    3326:	d506      	bpl.n	3336 <__sflush_r+0x46>
    3328:	6863      	ldr	r3, [r4, #4]
    332a:	1ac0      	subs	r0, r0, r3
    332c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    332e:	2b00      	cmp	r3, #0
    3330:	d001      	beq.n	3336 <__sflush_r+0x46>
    3332:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3334:	1ac0      	subs	r0, r0, r3
    3336:	0002      	movs	r2, r0
    3338:	6a21      	ldr	r1, [r4, #32]
    333a:	2300      	movs	r3, #0
    333c:	0028      	movs	r0, r5
    333e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3340:	47b8      	blx	r7
    3342:	89a1      	ldrh	r1, [r4, #12]
    3344:	1c43      	adds	r3, r0, #1
    3346:	d106      	bne.n	3356 <__sflush_r+0x66>
    3348:	682b      	ldr	r3, [r5, #0]
    334a:	2b1d      	cmp	r3, #29
    334c:	d831      	bhi.n	33b2 <__sflush_r+0xc2>
    334e:	4a2c      	ldr	r2, [pc, #176]	; (3400 <__sflush_r+0x110>)
    3350:	40da      	lsrs	r2, r3
    3352:	07d3      	lsls	r3, r2, #31
    3354:	d52d      	bpl.n	33b2 <__sflush_r+0xc2>
    3356:	2300      	movs	r3, #0
    3358:	6063      	str	r3, [r4, #4]
    335a:	6923      	ldr	r3, [r4, #16]
    335c:	6023      	str	r3, [r4, #0]
    335e:	04cb      	lsls	r3, r1, #19
    3360:	d505      	bpl.n	336e <__sflush_r+0x7e>
    3362:	1c43      	adds	r3, r0, #1
    3364:	d102      	bne.n	336c <__sflush_r+0x7c>
    3366:	682b      	ldr	r3, [r5, #0]
    3368:	2b00      	cmp	r3, #0
    336a:	d100      	bne.n	336e <__sflush_r+0x7e>
    336c:	6560      	str	r0, [r4, #84]	; 0x54
    336e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3370:	602e      	str	r6, [r5, #0]
    3372:	2900      	cmp	r1, #0
    3374:	d0c8      	beq.n	3308 <__sflush_r+0x18>
    3376:	0023      	movs	r3, r4
    3378:	3344      	adds	r3, #68	; 0x44
    337a:	4299      	cmp	r1, r3
    337c:	d002      	beq.n	3384 <__sflush_r+0x94>
    337e:	0028      	movs	r0, r5
    3380:	f000 f9ba 	bl	36f8 <_free_r>
    3384:	2000      	movs	r0, #0
    3386:	6360      	str	r0, [r4, #52]	; 0x34
    3388:	e7bf      	b.n	330a <__sflush_r+0x1a>
    338a:	2301      	movs	r3, #1
    338c:	6a21      	ldr	r1, [r4, #32]
    338e:	0028      	movs	r0, r5
    3390:	47b8      	blx	r7
    3392:	1c43      	adds	r3, r0, #1
    3394:	d1c5      	bne.n	3322 <__sflush_r+0x32>
    3396:	682b      	ldr	r3, [r5, #0]
    3398:	2b00      	cmp	r3, #0
    339a:	d0c2      	beq.n	3322 <__sflush_r+0x32>
    339c:	2b1d      	cmp	r3, #29
    339e:	d001      	beq.n	33a4 <__sflush_r+0xb4>
    33a0:	2b16      	cmp	r3, #22
    33a2:	d101      	bne.n	33a8 <__sflush_r+0xb8>
    33a4:	602e      	str	r6, [r5, #0]
    33a6:	e7af      	b.n	3308 <__sflush_r+0x18>
    33a8:	2340      	movs	r3, #64	; 0x40
    33aa:	89a2      	ldrh	r2, [r4, #12]
    33ac:	4313      	orrs	r3, r2
    33ae:	81a3      	strh	r3, [r4, #12]
    33b0:	e7ab      	b.n	330a <__sflush_r+0x1a>
    33b2:	2340      	movs	r3, #64	; 0x40
    33b4:	430b      	orrs	r3, r1
    33b6:	2001      	movs	r0, #1
    33b8:	81a3      	strh	r3, [r4, #12]
    33ba:	4240      	negs	r0, r0
    33bc:	e7a5      	b.n	330a <__sflush_r+0x1a>
    33be:	690f      	ldr	r7, [r1, #16]
    33c0:	2f00      	cmp	r7, #0
    33c2:	d0a1      	beq.n	3308 <__sflush_r+0x18>
    33c4:	680b      	ldr	r3, [r1, #0]
    33c6:	600f      	str	r7, [r1, #0]
    33c8:	1bdb      	subs	r3, r3, r7
    33ca:	9301      	str	r3, [sp, #4]
    33cc:	2300      	movs	r3, #0
    33ce:	0792      	lsls	r2, r2, #30
    33d0:	d100      	bne.n	33d4 <__sflush_r+0xe4>
    33d2:	694b      	ldr	r3, [r1, #20]
    33d4:	60a3      	str	r3, [r4, #8]
    33d6:	9b01      	ldr	r3, [sp, #4]
    33d8:	2b00      	cmp	r3, #0
    33da:	dc00      	bgt.n	33de <__sflush_r+0xee>
    33dc:	e794      	b.n	3308 <__sflush_r+0x18>
    33de:	9b01      	ldr	r3, [sp, #4]
    33e0:	003a      	movs	r2, r7
    33e2:	6a21      	ldr	r1, [r4, #32]
    33e4:	0028      	movs	r0, r5
    33e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    33e8:	47b0      	blx	r6
    33ea:	2800      	cmp	r0, #0
    33ec:	dc03      	bgt.n	33f6 <__sflush_r+0x106>
    33ee:	2340      	movs	r3, #64	; 0x40
    33f0:	89a2      	ldrh	r2, [r4, #12]
    33f2:	4313      	orrs	r3, r2
    33f4:	e7df      	b.n	33b6 <__sflush_r+0xc6>
    33f6:	9b01      	ldr	r3, [sp, #4]
    33f8:	183f      	adds	r7, r7, r0
    33fa:	1a1b      	subs	r3, r3, r0
    33fc:	9301      	str	r3, [sp, #4]
    33fe:	e7ea      	b.n	33d6 <__sflush_r+0xe6>
    3400:	20400001 	.word	0x20400001

00003404 <_fflush_r>:
    3404:	690b      	ldr	r3, [r1, #16]
    3406:	b570      	push	{r4, r5, r6, lr}
    3408:	0005      	movs	r5, r0
    340a:	000c      	movs	r4, r1
    340c:	2b00      	cmp	r3, #0
    340e:	d101      	bne.n	3414 <_fflush_r+0x10>
    3410:	2000      	movs	r0, #0
    3412:	bd70      	pop	{r4, r5, r6, pc}
    3414:	2800      	cmp	r0, #0
    3416:	d004      	beq.n	3422 <_fflush_r+0x1e>
    3418:	6983      	ldr	r3, [r0, #24]
    341a:	2b00      	cmp	r3, #0
    341c:	d101      	bne.n	3422 <_fflush_r+0x1e>
    341e:	f000 f85f 	bl	34e0 <__sinit>
    3422:	4b0b      	ldr	r3, [pc, #44]	; (3450 <_fflush_r+0x4c>)
    3424:	429c      	cmp	r4, r3
    3426:	d109      	bne.n	343c <_fflush_r+0x38>
    3428:	686c      	ldr	r4, [r5, #4]
    342a:	220c      	movs	r2, #12
    342c:	5ea3      	ldrsh	r3, [r4, r2]
    342e:	2b00      	cmp	r3, #0
    3430:	d0ee      	beq.n	3410 <_fflush_r+0xc>
    3432:	0021      	movs	r1, r4
    3434:	0028      	movs	r0, r5
    3436:	f7ff ff5b 	bl	32f0 <__sflush_r>
    343a:	e7ea      	b.n	3412 <_fflush_r+0xe>
    343c:	4b05      	ldr	r3, [pc, #20]	; (3454 <_fflush_r+0x50>)
    343e:	429c      	cmp	r4, r3
    3440:	d101      	bne.n	3446 <_fflush_r+0x42>
    3442:	68ac      	ldr	r4, [r5, #8]
    3444:	e7f1      	b.n	342a <_fflush_r+0x26>
    3446:	4b04      	ldr	r3, [pc, #16]	; (3458 <_fflush_r+0x54>)
    3448:	429c      	cmp	r4, r3
    344a:	d1ee      	bne.n	342a <_fflush_r+0x26>
    344c:	68ec      	ldr	r4, [r5, #12]
    344e:	e7ec      	b.n	342a <_fflush_r+0x26>
    3450:	000042a8 	.word	0x000042a8
    3454:	000042c8 	.word	0x000042c8
    3458:	00004288 	.word	0x00004288

0000345c <_cleanup_r>:
    345c:	b510      	push	{r4, lr}
    345e:	4902      	ldr	r1, [pc, #8]	; (3468 <_cleanup_r+0xc>)
    3460:	f000 f8b2 	bl	35c8 <_fwalk_reent>
    3464:	bd10      	pop	{r4, pc}
    3466:	46c0      	nop			; (mov r8, r8)
    3468:	00003405 	.word	0x00003405

0000346c <std.isra.0>:
    346c:	2300      	movs	r3, #0
    346e:	b510      	push	{r4, lr}
    3470:	0004      	movs	r4, r0
    3472:	6003      	str	r3, [r0, #0]
    3474:	6043      	str	r3, [r0, #4]
    3476:	6083      	str	r3, [r0, #8]
    3478:	8181      	strh	r1, [r0, #12]
    347a:	6643      	str	r3, [r0, #100]	; 0x64
    347c:	81c2      	strh	r2, [r0, #14]
    347e:	6103      	str	r3, [r0, #16]
    3480:	6143      	str	r3, [r0, #20]
    3482:	6183      	str	r3, [r0, #24]
    3484:	0019      	movs	r1, r3
    3486:	2208      	movs	r2, #8
    3488:	305c      	adds	r0, #92	; 0x5c
    348a:	f7ff fd23 	bl	2ed4 <memset>
    348e:	4b05      	ldr	r3, [pc, #20]	; (34a4 <std.isra.0+0x38>)
    3490:	6224      	str	r4, [r4, #32]
    3492:	6263      	str	r3, [r4, #36]	; 0x24
    3494:	4b04      	ldr	r3, [pc, #16]	; (34a8 <std.isra.0+0x3c>)
    3496:	62a3      	str	r3, [r4, #40]	; 0x28
    3498:	4b04      	ldr	r3, [pc, #16]	; (34ac <std.isra.0+0x40>)
    349a:	62e3      	str	r3, [r4, #44]	; 0x2c
    349c:	4b04      	ldr	r3, [pc, #16]	; (34b0 <std.isra.0+0x44>)
    349e:	6323      	str	r3, [r4, #48]	; 0x30
    34a0:	bd10      	pop	{r4, pc}
    34a2:	46c0      	nop			; (mov r8, r8)
    34a4:	00003e05 	.word	0x00003e05
    34a8:	00003e2d 	.word	0x00003e2d
    34ac:	00003e65 	.word	0x00003e65
    34b0:	00003e91 	.word	0x00003e91

000034b4 <__sfmoreglue>:
    34b4:	b570      	push	{r4, r5, r6, lr}
    34b6:	2568      	movs	r5, #104	; 0x68
    34b8:	1e4a      	subs	r2, r1, #1
    34ba:	4355      	muls	r5, r2
    34bc:	000e      	movs	r6, r1
    34be:	0029      	movs	r1, r5
    34c0:	3174      	adds	r1, #116	; 0x74
    34c2:	f000 f963 	bl	378c <_malloc_r>
    34c6:	1e04      	subs	r4, r0, #0
    34c8:	d008      	beq.n	34dc <__sfmoreglue+0x28>
    34ca:	2100      	movs	r1, #0
    34cc:	002a      	movs	r2, r5
    34ce:	6001      	str	r1, [r0, #0]
    34d0:	6046      	str	r6, [r0, #4]
    34d2:	300c      	adds	r0, #12
    34d4:	60a0      	str	r0, [r4, #8]
    34d6:	3268      	adds	r2, #104	; 0x68
    34d8:	f7ff fcfc 	bl	2ed4 <memset>
    34dc:	0020      	movs	r0, r4
    34de:	bd70      	pop	{r4, r5, r6, pc}

000034e0 <__sinit>:
    34e0:	6983      	ldr	r3, [r0, #24]
    34e2:	b513      	push	{r0, r1, r4, lr}
    34e4:	0004      	movs	r4, r0
    34e6:	2b00      	cmp	r3, #0
    34e8:	d128      	bne.n	353c <__sinit+0x5c>
    34ea:	6483      	str	r3, [r0, #72]	; 0x48
    34ec:	64c3      	str	r3, [r0, #76]	; 0x4c
    34ee:	6503      	str	r3, [r0, #80]	; 0x50
    34f0:	4b13      	ldr	r3, [pc, #76]	; (3540 <__sinit+0x60>)
    34f2:	4a14      	ldr	r2, [pc, #80]	; (3544 <__sinit+0x64>)
    34f4:	681b      	ldr	r3, [r3, #0]
    34f6:	6282      	str	r2, [r0, #40]	; 0x28
    34f8:	9301      	str	r3, [sp, #4]
    34fa:	4298      	cmp	r0, r3
    34fc:	d101      	bne.n	3502 <__sinit+0x22>
    34fe:	2301      	movs	r3, #1
    3500:	6183      	str	r3, [r0, #24]
    3502:	0020      	movs	r0, r4
    3504:	f000 f820 	bl	3548 <__sfp>
    3508:	6060      	str	r0, [r4, #4]
    350a:	0020      	movs	r0, r4
    350c:	f000 f81c 	bl	3548 <__sfp>
    3510:	60a0      	str	r0, [r4, #8]
    3512:	0020      	movs	r0, r4
    3514:	f000 f818 	bl	3548 <__sfp>
    3518:	2200      	movs	r2, #0
    351a:	60e0      	str	r0, [r4, #12]
    351c:	2104      	movs	r1, #4
    351e:	6860      	ldr	r0, [r4, #4]
    3520:	f7ff ffa4 	bl	346c <std.isra.0>
    3524:	2201      	movs	r2, #1
    3526:	2109      	movs	r1, #9
    3528:	68a0      	ldr	r0, [r4, #8]
    352a:	f7ff ff9f 	bl	346c <std.isra.0>
    352e:	2202      	movs	r2, #2
    3530:	2112      	movs	r1, #18
    3532:	68e0      	ldr	r0, [r4, #12]
    3534:	f7ff ff9a 	bl	346c <std.isra.0>
    3538:	2301      	movs	r3, #1
    353a:	61a3      	str	r3, [r4, #24]
    353c:	bd13      	pop	{r0, r1, r4, pc}
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	00004284 	.word	0x00004284
    3544:	0000345d 	.word	0x0000345d

00003548 <__sfp>:
    3548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    354a:	4b1e      	ldr	r3, [pc, #120]	; (35c4 <__sfp+0x7c>)
    354c:	0007      	movs	r7, r0
    354e:	681e      	ldr	r6, [r3, #0]
    3550:	69b3      	ldr	r3, [r6, #24]
    3552:	2b00      	cmp	r3, #0
    3554:	d102      	bne.n	355c <__sfp+0x14>
    3556:	0030      	movs	r0, r6
    3558:	f7ff ffc2 	bl	34e0 <__sinit>
    355c:	3648      	adds	r6, #72	; 0x48
    355e:	68b4      	ldr	r4, [r6, #8]
    3560:	6873      	ldr	r3, [r6, #4]
    3562:	3b01      	subs	r3, #1
    3564:	d504      	bpl.n	3570 <__sfp+0x28>
    3566:	6833      	ldr	r3, [r6, #0]
    3568:	2b00      	cmp	r3, #0
    356a:	d007      	beq.n	357c <__sfp+0x34>
    356c:	6836      	ldr	r6, [r6, #0]
    356e:	e7f6      	b.n	355e <__sfp+0x16>
    3570:	220c      	movs	r2, #12
    3572:	5ea5      	ldrsh	r5, [r4, r2]
    3574:	2d00      	cmp	r5, #0
    3576:	d00d      	beq.n	3594 <__sfp+0x4c>
    3578:	3468      	adds	r4, #104	; 0x68
    357a:	e7f2      	b.n	3562 <__sfp+0x1a>
    357c:	2104      	movs	r1, #4
    357e:	0038      	movs	r0, r7
    3580:	f7ff ff98 	bl	34b4 <__sfmoreglue>
    3584:	6030      	str	r0, [r6, #0]
    3586:	2800      	cmp	r0, #0
    3588:	d1f0      	bne.n	356c <__sfp+0x24>
    358a:	230c      	movs	r3, #12
    358c:	0004      	movs	r4, r0
    358e:	603b      	str	r3, [r7, #0]
    3590:	0020      	movs	r0, r4
    3592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3594:	2301      	movs	r3, #1
    3596:	0020      	movs	r0, r4
    3598:	425b      	negs	r3, r3
    359a:	81e3      	strh	r3, [r4, #14]
    359c:	3302      	adds	r3, #2
    359e:	81a3      	strh	r3, [r4, #12]
    35a0:	6665      	str	r5, [r4, #100]	; 0x64
    35a2:	6025      	str	r5, [r4, #0]
    35a4:	60a5      	str	r5, [r4, #8]
    35a6:	6065      	str	r5, [r4, #4]
    35a8:	6125      	str	r5, [r4, #16]
    35aa:	6165      	str	r5, [r4, #20]
    35ac:	61a5      	str	r5, [r4, #24]
    35ae:	2208      	movs	r2, #8
    35b0:	0029      	movs	r1, r5
    35b2:	305c      	adds	r0, #92	; 0x5c
    35b4:	f7ff fc8e 	bl	2ed4 <memset>
    35b8:	6365      	str	r5, [r4, #52]	; 0x34
    35ba:	63a5      	str	r5, [r4, #56]	; 0x38
    35bc:	64a5      	str	r5, [r4, #72]	; 0x48
    35be:	64e5      	str	r5, [r4, #76]	; 0x4c
    35c0:	e7e6      	b.n	3590 <__sfp+0x48>
    35c2:	46c0      	nop			; (mov r8, r8)
    35c4:	00004284 	.word	0x00004284

000035c8 <_fwalk_reent>:
    35c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    35ca:	0004      	movs	r4, r0
    35cc:	0007      	movs	r7, r0
    35ce:	2600      	movs	r6, #0
    35d0:	9101      	str	r1, [sp, #4]
    35d2:	3448      	adds	r4, #72	; 0x48
    35d4:	2c00      	cmp	r4, #0
    35d6:	d101      	bne.n	35dc <_fwalk_reent+0x14>
    35d8:	0030      	movs	r0, r6
    35da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    35dc:	6863      	ldr	r3, [r4, #4]
    35de:	68a5      	ldr	r5, [r4, #8]
    35e0:	9300      	str	r3, [sp, #0]
    35e2:	9b00      	ldr	r3, [sp, #0]
    35e4:	3b01      	subs	r3, #1
    35e6:	9300      	str	r3, [sp, #0]
    35e8:	d501      	bpl.n	35ee <_fwalk_reent+0x26>
    35ea:	6824      	ldr	r4, [r4, #0]
    35ec:	e7f2      	b.n	35d4 <_fwalk_reent+0xc>
    35ee:	89ab      	ldrh	r3, [r5, #12]
    35f0:	2b01      	cmp	r3, #1
    35f2:	d908      	bls.n	3606 <_fwalk_reent+0x3e>
    35f4:	220e      	movs	r2, #14
    35f6:	5eab      	ldrsh	r3, [r5, r2]
    35f8:	3301      	adds	r3, #1
    35fa:	d004      	beq.n	3606 <_fwalk_reent+0x3e>
    35fc:	0029      	movs	r1, r5
    35fe:	0038      	movs	r0, r7
    3600:	9b01      	ldr	r3, [sp, #4]
    3602:	4798      	blx	r3
    3604:	4306      	orrs	r6, r0
    3606:	3568      	adds	r5, #104	; 0x68
    3608:	e7eb      	b.n	35e2 <_fwalk_reent+0x1a>
	...

0000360c <__swhatbuf_r>:
    360c:	b570      	push	{r4, r5, r6, lr}
    360e:	000e      	movs	r6, r1
    3610:	001d      	movs	r5, r3
    3612:	230e      	movs	r3, #14
    3614:	5ec9      	ldrsh	r1, [r1, r3]
    3616:	b090      	sub	sp, #64	; 0x40
    3618:	0014      	movs	r4, r2
    361a:	2900      	cmp	r1, #0
    361c:	da07      	bge.n	362e <__swhatbuf_r+0x22>
    361e:	2300      	movs	r3, #0
    3620:	602b      	str	r3, [r5, #0]
    3622:	89b3      	ldrh	r3, [r6, #12]
    3624:	061b      	lsls	r3, r3, #24
    3626:	d411      	bmi.n	364c <__swhatbuf_r+0x40>
    3628:	2380      	movs	r3, #128	; 0x80
    362a:	00db      	lsls	r3, r3, #3
    362c:	e00f      	b.n	364e <__swhatbuf_r+0x42>
    362e:	aa01      	add	r2, sp, #4
    3630:	f000 fc5a 	bl	3ee8 <_fstat_r>
    3634:	2800      	cmp	r0, #0
    3636:	dbf2      	blt.n	361e <__swhatbuf_r+0x12>
    3638:	22f0      	movs	r2, #240	; 0xf0
    363a:	9b02      	ldr	r3, [sp, #8]
    363c:	0212      	lsls	r2, r2, #8
    363e:	4013      	ands	r3, r2
    3640:	4a05      	ldr	r2, [pc, #20]	; (3658 <__swhatbuf_r+0x4c>)
    3642:	189b      	adds	r3, r3, r2
    3644:	425a      	negs	r2, r3
    3646:	4153      	adcs	r3, r2
    3648:	602b      	str	r3, [r5, #0]
    364a:	e7ed      	b.n	3628 <__swhatbuf_r+0x1c>
    364c:	2340      	movs	r3, #64	; 0x40
    364e:	2000      	movs	r0, #0
    3650:	6023      	str	r3, [r4, #0]
    3652:	b010      	add	sp, #64	; 0x40
    3654:	bd70      	pop	{r4, r5, r6, pc}
    3656:	46c0      	nop			; (mov r8, r8)
    3658:	ffffe000 	.word	0xffffe000

0000365c <__smakebuf_r>:
    365c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    365e:	2602      	movs	r6, #2
    3660:	898b      	ldrh	r3, [r1, #12]
    3662:	0005      	movs	r5, r0
    3664:	000c      	movs	r4, r1
    3666:	4233      	tst	r3, r6
    3668:	d006      	beq.n	3678 <__smakebuf_r+0x1c>
    366a:	0023      	movs	r3, r4
    366c:	3347      	adds	r3, #71	; 0x47
    366e:	6023      	str	r3, [r4, #0]
    3670:	6123      	str	r3, [r4, #16]
    3672:	2301      	movs	r3, #1
    3674:	6163      	str	r3, [r4, #20]
    3676:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3678:	ab01      	add	r3, sp, #4
    367a:	466a      	mov	r2, sp
    367c:	f7ff ffc6 	bl	360c <__swhatbuf_r>
    3680:	9900      	ldr	r1, [sp, #0]
    3682:	0007      	movs	r7, r0
    3684:	0028      	movs	r0, r5
    3686:	f000 f881 	bl	378c <_malloc_r>
    368a:	2800      	cmp	r0, #0
    368c:	d108      	bne.n	36a0 <__smakebuf_r+0x44>
    368e:	220c      	movs	r2, #12
    3690:	5ea3      	ldrsh	r3, [r4, r2]
    3692:	059a      	lsls	r2, r3, #22
    3694:	d4ef      	bmi.n	3676 <__smakebuf_r+0x1a>
    3696:	2203      	movs	r2, #3
    3698:	4393      	bics	r3, r2
    369a:	431e      	orrs	r6, r3
    369c:	81a6      	strh	r6, [r4, #12]
    369e:	e7e4      	b.n	366a <__smakebuf_r+0xe>
    36a0:	4b0f      	ldr	r3, [pc, #60]	; (36e0 <__smakebuf_r+0x84>)
    36a2:	62ab      	str	r3, [r5, #40]	; 0x28
    36a4:	2380      	movs	r3, #128	; 0x80
    36a6:	89a2      	ldrh	r2, [r4, #12]
    36a8:	6020      	str	r0, [r4, #0]
    36aa:	4313      	orrs	r3, r2
    36ac:	81a3      	strh	r3, [r4, #12]
    36ae:	9b00      	ldr	r3, [sp, #0]
    36b0:	6120      	str	r0, [r4, #16]
    36b2:	6163      	str	r3, [r4, #20]
    36b4:	9b01      	ldr	r3, [sp, #4]
    36b6:	2b00      	cmp	r3, #0
    36b8:	d00d      	beq.n	36d6 <__smakebuf_r+0x7a>
    36ba:	230e      	movs	r3, #14
    36bc:	5ee1      	ldrsh	r1, [r4, r3]
    36be:	0028      	movs	r0, r5
    36c0:	f000 fc24 	bl	3f0c <_isatty_r>
    36c4:	2800      	cmp	r0, #0
    36c6:	d006      	beq.n	36d6 <__smakebuf_r+0x7a>
    36c8:	2203      	movs	r2, #3
    36ca:	89a3      	ldrh	r3, [r4, #12]
    36cc:	4393      	bics	r3, r2
    36ce:	001a      	movs	r2, r3
    36d0:	2301      	movs	r3, #1
    36d2:	4313      	orrs	r3, r2
    36d4:	81a3      	strh	r3, [r4, #12]
    36d6:	89a0      	ldrh	r0, [r4, #12]
    36d8:	4338      	orrs	r0, r7
    36da:	81a0      	strh	r0, [r4, #12]
    36dc:	e7cb      	b.n	3676 <__smakebuf_r+0x1a>
    36de:	46c0      	nop			; (mov r8, r8)
    36e0:	0000345d 	.word	0x0000345d

000036e4 <malloc>:
    36e4:	b510      	push	{r4, lr}
    36e6:	4b03      	ldr	r3, [pc, #12]	; (36f4 <malloc+0x10>)
    36e8:	0001      	movs	r1, r0
    36ea:	6818      	ldr	r0, [r3, #0]
    36ec:	f000 f84e 	bl	378c <_malloc_r>
    36f0:	bd10      	pop	{r4, pc}
    36f2:	46c0      	nop			; (mov r8, r8)
    36f4:	20000010 	.word	0x20000010

000036f8 <_free_r>:
    36f8:	b570      	push	{r4, r5, r6, lr}
    36fa:	0005      	movs	r5, r0
    36fc:	2900      	cmp	r1, #0
    36fe:	d010      	beq.n	3722 <_free_r+0x2a>
    3700:	1f0c      	subs	r4, r1, #4
    3702:	6823      	ldr	r3, [r4, #0]
    3704:	2b00      	cmp	r3, #0
    3706:	da00      	bge.n	370a <_free_r+0x12>
    3708:	18e4      	adds	r4, r4, r3
    370a:	0028      	movs	r0, r5
    370c:	f000 fc2f 	bl	3f6e <__malloc_lock>
    3710:	4a1d      	ldr	r2, [pc, #116]	; (3788 <_free_r+0x90>)
    3712:	6813      	ldr	r3, [r2, #0]
    3714:	2b00      	cmp	r3, #0
    3716:	d105      	bne.n	3724 <_free_r+0x2c>
    3718:	6063      	str	r3, [r4, #4]
    371a:	6014      	str	r4, [r2, #0]
    371c:	0028      	movs	r0, r5
    371e:	f000 fc27 	bl	3f70 <__malloc_unlock>
    3722:	bd70      	pop	{r4, r5, r6, pc}
    3724:	42a3      	cmp	r3, r4
    3726:	d909      	bls.n	373c <_free_r+0x44>
    3728:	6821      	ldr	r1, [r4, #0]
    372a:	1860      	adds	r0, r4, r1
    372c:	4283      	cmp	r3, r0
    372e:	d1f3      	bne.n	3718 <_free_r+0x20>
    3730:	6818      	ldr	r0, [r3, #0]
    3732:	685b      	ldr	r3, [r3, #4]
    3734:	1841      	adds	r1, r0, r1
    3736:	6021      	str	r1, [r4, #0]
    3738:	e7ee      	b.n	3718 <_free_r+0x20>
    373a:	0013      	movs	r3, r2
    373c:	685a      	ldr	r2, [r3, #4]
    373e:	2a00      	cmp	r2, #0
    3740:	d001      	beq.n	3746 <_free_r+0x4e>
    3742:	42a2      	cmp	r2, r4
    3744:	d9f9      	bls.n	373a <_free_r+0x42>
    3746:	6819      	ldr	r1, [r3, #0]
    3748:	1858      	adds	r0, r3, r1
    374a:	42a0      	cmp	r0, r4
    374c:	d10b      	bne.n	3766 <_free_r+0x6e>
    374e:	6820      	ldr	r0, [r4, #0]
    3750:	1809      	adds	r1, r1, r0
    3752:	1858      	adds	r0, r3, r1
    3754:	6019      	str	r1, [r3, #0]
    3756:	4282      	cmp	r2, r0
    3758:	d1e0      	bne.n	371c <_free_r+0x24>
    375a:	6810      	ldr	r0, [r2, #0]
    375c:	6852      	ldr	r2, [r2, #4]
    375e:	1841      	adds	r1, r0, r1
    3760:	6019      	str	r1, [r3, #0]
    3762:	605a      	str	r2, [r3, #4]
    3764:	e7da      	b.n	371c <_free_r+0x24>
    3766:	42a0      	cmp	r0, r4
    3768:	d902      	bls.n	3770 <_free_r+0x78>
    376a:	230c      	movs	r3, #12
    376c:	602b      	str	r3, [r5, #0]
    376e:	e7d5      	b.n	371c <_free_r+0x24>
    3770:	6821      	ldr	r1, [r4, #0]
    3772:	1860      	adds	r0, r4, r1
    3774:	4282      	cmp	r2, r0
    3776:	d103      	bne.n	3780 <_free_r+0x88>
    3778:	6810      	ldr	r0, [r2, #0]
    377a:	6852      	ldr	r2, [r2, #4]
    377c:	1841      	adds	r1, r0, r1
    377e:	6021      	str	r1, [r4, #0]
    3780:	6062      	str	r2, [r4, #4]
    3782:	605c      	str	r4, [r3, #4]
    3784:	e7ca      	b.n	371c <_free_r+0x24>
    3786:	46c0      	nop			; (mov r8, r8)
    3788:	200003e0 	.word	0x200003e0

0000378c <_malloc_r>:
    378c:	2303      	movs	r3, #3
    378e:	b570      	push	{r4, r5, r6, lr}
    3790:	1ccd      	adds	r5, r1, #3
    3792:	439d      	bics	r5, r3
    3794:	3508      	adds	r5, #8
    3796:	0006      	movs	r6, r0
    3798:	2d0c      	cmp	r5, #12
    379a:	d21e      	bcs.n	37da <_malloc_r+0x4e>
    379c:	250c      	movs	r5, #12
    379e:	42a9      	cmp	r1, r5
    37a0:	d81d      	bhi.n	37de <_malloc_r+0x52>
    37a2:	0030      	movs	r0, r6
    37a4:	f000 fbe3 	bl	3f6e <__malloc_lock>
    37a8:	4a25      	ldr	r2, [pc, #148]	; (3840 <_malloc_r+0xb4>)
    37aa:	6814      	ldr	r4, [r2, #0]
    37ac:	0021      	movs	r1, r4
    37ae:	2900      	cmp	r1, #0
    37b0:	d119      	bne.n	37e6 <_malloc_r+0x5a>
    37b2:	4c24      	ldr	r4, [pc, #144]	; (3844 <_malloc_r+0xb8>)
    37b4:	6823      	ldr	r3, [r4, #0]
    37b6:	2b00      	cmp	r3, #0
    37b8:	d103      	bne.n	37c2 <_malloc_r+0x36>
    37ba:	0030      	movs	r0, r6
    37bc:	f000 fb10 	bl	3de0 <_sbrk_r>
    37c0:	6020      	str	r0, [r4, #0]
    37c2:	0029      	movs	r1, r5
    37c4:	0030      	movs	r0, r6
    37c6:	f000 fb0b 	bl	3de0 <_sbrk_r>
    37ca:	1c43      	adds	r3, r0, #1
    37cc:	d12c      	bne.n	3828 <_malloc_r+0x9c>
    37ce:	230c      	movs	r3, #12
    37d0:	0030      	movs	r0, r6
    37d2:	6033      	str	r3, [r6, #0]
    37d4:	f000 fbcc 	bl	3f70 <__malloc_unlock>
    37d8:	e003      	b.n	37e2 <_malloc_r+0x56>
    37da:	2d00      	cmp	r5, #0
    37dc:	dadf      	bge.n	379e <_malloc_r+0x12>
    37de:	230c      	movs	r3, #12
    37e0:	6033      	str	r3, [r6, #0]
    37e2:	2000      	movs	r0, #0
    37e4:	bd70      	pop	{r4, r5, r6, pc}
    37e6:	680b      	ldr	r3, [r1, #0]
    37e8:	1b5b      	subs	r3, r3, r5
    37ea:	d41a      	bmi.n	3822 <_malloc_r+0x96>
    37ec:	2b0b      	cmp	r3, #11
    37ee:	d903      	bls.n	37f8 <_malloc_r+0x6c>
    37f0:	600b      	str	r3, [r1, #0]
    37f2:	18cc      	adds	r4, r1, r3
    37f4:	6025      	str	r5, [r4, #0]
    37f6:	e003      	b.n	3800 <_malloc_r+0x74>
    37f8:	428c      	cmp	r4, r1
    37fa:	d10e      	bne.n	381a <_malloc_r+0x8e>
    37fc:	6863      	ldr	r3, [r4, #4]
    37fe:	6013      	str	r3, [r2, #0]
    3800:	0030      	movs	r0, r6
    3802:	f000 fbb5 	bl	3f70 <__malloc_unlock>
    3806:	0020      	movs	r0, r4
    3808:	2207      	movs	r2, #7
    380a:	300b      	adds	r0, #11
    380c:	1d23      	adds	r3, r4, #4
    380e:	4390      	bics	r0, r2
    3810:	1ac3      	subs	r3, r0, r3
    3812:	d0e7      	beq.n	37e4 <_malloc_r+0x58>
    3814:	425a      	negs	r2, r3
    3816:	50e2      	str	r2, [r4, r3]
    3818:	e7e4      	b.n	37e4 <_malloc_r+0x58>
    381a:	684b      	ldr	r3, [r1, #4]
    381c:	6063      	str	r3, [r4, #4]
    381e:	000c      	movs	r4, r1
    3820:	e7ee      	b.n	3800 <_malloc_r+0x74>
    3822:	000c      	movs	r4, r1
    3824:	6849      	ldr	r1, [r1, #4]
    3826:	e7c2      	b.n	37ae <_malloc_r+0x22>
    3828:	2303      	movs	r3, #3
    382a:	1cc4      	adds	r4, r0, #3
    382c:	439c      	bics	r4, r3
    382e:	42a0      	cmp	r0, r4
    3830:	d0e0      	beq.n	37f4 <_malloc_r+0x68>
    3832:	1a21      	subs	r1, r4, r0
    3834:	0030      	movs	r0, r6
    3836:	f000 fad3 	bl	3de0 <_sbrk_r>
    383a:	1c43      	adds	r3, r0, #1
    383c:	d1da      	bne.n	37f4 <_malloc_r+0x68>
    383e:	e7c6      	b.n	37ce <_malloc_r+0x42>
    3840:	200003e0 	.word	0x200003e0
    3844:	200003e4 	.word	0x200003e4

00003848 <__sfputc_r>:
    3848:	6893      	ldr	r3, [r2, #8]
    384a:	b510      	push	{r4, lr}
    384c:	3b01      	subs	r3, #1
    384e:	6093      	str	r3, [r2, #8]
    3850:	2b00      	cmp	r3, #0
    3852:	da05      	bge.n	3860 <__sfputc_r+0x18>
    3854:	6994      	ldr	r4, [r2, #24]
    3856:	42a3      	cmp	r3, r4
    3858:	db08      	blt.n	386c <__sfputc_r+0x24>
    385a:	b2cb      	uxtb	r3, r1
    385c:	2b0a      	cmp	r3, #10
    385e:	d005      	beq.n	386c <__sfputc_r+0x24>
    3860:	6813      	ldr	r3, [r2, #0]
    3862:	1c58      	adds	r0, r3, #1
    3864:	6010      	str	r0, [r2, #0]
    3866:	7019      	strb	r1, [r3, #0]
    3868:	b2c8      	uxtb	r0, r1
    386a:	bd10      	pop	{r4, pc}
    386c:	f7ff fc74 	bl	3158 <__swbuf_r>
    3870:	e7fb      	b.n	386a <__sfputc_r+0x22>

00003872 <__sfputs_r>:
    3872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3874:	0006      	movs	r6, r0
    3876:	000f      	movs	r7, r1
    3878:	0014      	movs	r4, r2
    387a:	18d5      	adds	r5, r2, r3
    387c:	42ac      	cmp	r4, r5
    387e:	d101      	bne.n	3884 <__sfputs_r+0x12>
    3880:	2000      	movs	r0, #0
    3882:	e007      	b.n	3894 <__sfputs_r+0x22>
    3884:	7821      	ldrb	r1, [r4, #0]
    3886:	003a      	movs	r2, r7
    3888:	0030      	movs	r0, r6
    388a:	f7ff ffdd 	bl	3848 <__sfputc_r>
    388e:	3401      	adds	r4, #1
    3890:	1c43      	adds	r3, r0, #1
    3892:	d1f3      	bne.n	387c <__sfputs_r+0xa>
    3894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003898 <_vfiprintf_r>:
    3898:	b5f0      	push	{r4, r5, r6, r7, lr}
    389a:	b09f      	sub	sp, #124	; 0x7c
    389c:	0006      	movs	r6, r0
    389e:	000f      	movs	r7, r1
    38a0:	0014      	movs	r4, r2
    38a2:	9305      	str	r3, [sp, #20]
    38a4:	2800      	cmp	r0, #0
    38a6:	d004      	beq.n	38b2 <_vfiprintf_r+0x1a>
    38a8:	6983      	ldr	r3, [r0, #24]
    38aa:	2b00      	cmp	r3, #0
    38ac:	d101      	bne.n	38b2 <_vfiprintf_r+0x1a>
    38ae:	f7ff fe17 	bl	34e0 <__sinit>
    38b2:	4b7f      	ldr	r3, [pc, #508]	; (3ab0 <_vfiprintf_r+0x218>)
    38b4:	429f      	cmp	r7, r3
    38b6:	d15c      	bne.n	3972 <_vfiprintf_r+0xda>
    38b8:	6877      	ldr	r7, [r6, #4]
    38ba:	89bb      	ldrh	r3, [r7, #12]
    38bc:	071b      	lsls	r3, r3, #28
    38be:	d562      	bpl.n	3986 <_vfiprintf_r+0xee>
    38c0:	693b      	ldr	r3, [r7, #16]
    38c2:	2b00      	cmp	r3, #0
    38c4:	d05f      	beq.n	3986 <_vfiprintf_r+0xee>
    38c6:	2300      	movs	r3, #0
    38c8:	ad06      	add	r5, sp, #24
    38ca:	616b      	str	r3, [r5, #20]
    38cc:	3320      	adds	r3, #32
    38ce:	766b      	strb	r3, [r5, #25]
    38d0:	3310      	adds	r3, #16
    38d2:	76ab      	strb	r3, [r5, #26]
    38d4:	9402      	str	r4, [sp, #8]
    38d6:	9c02      	ldr	r4, [sp, #8]
    38d8:	7823      	ldrb	r3, [r4, #0]
    38da:	2b00      	cmp	r3, #0
    38dc:	d15d      	bne.n	399a <_vfiprintf_r+0x102>
    38de:	9b02      	ldr	r3, [sp, #8]
    38e0:	1ae3      	subs	r3, r4, r3
    38e2:	9304      	str	r3, [sp, #16]
    38e4:	d00d      	beq.n	3902 <_vfiprintf_r+0x6a>
    38e6:	9b04      	ldr	r3, [sp, #16]
    38e8:	9a02      	ldr	r2, [sp, #8]
    38ea:	0039      	movs	r1, r7
    38ec:	0030      	movs	r0, r6
    38ee:	f7ff ffc0 	bl	3872 <__sfputs_r>
    38f2:	1c43      	adds	r3, r0, #1
    38f4:	d100      	bne.n	38f8 <_vfiprintf_r+0x60>
    38f6:	e0cc      	b.n	3a92 <_vfiprintf_r+0x1fa>
    38f8:	696a      	ldr	r2, [r5, #20]
    38fa:	9b04      	ldr	r3, [sp, #16]
    38fc:	4694      	mov	ip, r2
    38fe:	4463      	add	r3, ip
    3900:	616b      	str	r3, [r5, #20]
    3902:	7823      	ldrb	r3, [r4, #0]
    3904:	2b00      	cmp	r3, #0
    3906:	d100      	bne.n	390a <_vfiprintf_r+0x72>
    3908:	e0c3      	b.n	3a92 <_vfiprintf_r+0x1fa>
    390a:	2201      	movs	r2, #1
    390c:	2300      	movs	r3, #0
    390e:	4252      	negs	r2, r2
    3910:	606a      	str	r2, [r5, #4]
    3912:	a902      	add	r1, sp, #8
    3914:	3254      	adds	r2, #84	; 0x54
    3916:	1852      	adds	r2, r2, r1
    3918:	3401      	adds	r4, #1
    391a:	602b      	str	r3, [r5, #0]
    391c:	60eb      	str	r3, [r5, #12]
    391e:	60ab      	str	r3, [r5, #8]
    3920:	7013      	strb	r3, [r2, #0]
    3922:	65ab      	str	r3, [r5, #88]	; 0x58
    3924:	7821      	ldrb	r1, [r4, #0]
    3926:	2205      	movs	r2, #5
    3928:	4862      	ldr	r0, [pc, #392]	; (3ab4 <_vfiprintf_r+0x21c>)
    392a:	f000 fb15 	bl	3f58 <memchr>
    392e:	1c63      	adds	r3, r4, #1
    3930:	469c      	mov	ip, r3
    3932:	2800      	cmp	r0, #0
    3934:	d135      	bne.n	39a2 <_vfiprintf_r+0x10a>
    3936:	6829      	ldr	r1, [r5, #0]
    3938:	06cb      	lsls	r3, r1, #27
    393a:	d504      	bpl.n	3946 <_vfiprintf_r+0xae>
    393c:	2353      	movs	r3, #83	; 0x53
    393e:	aa02      	add	r2, sp, #8
    3940:	3020      	adds	r0, #32
    3942:	189b      	adds	r3, r3, r2
    3944:	7018      	strb	r0, [r3, #0]
    3946:	070b      	lsls	r3, r1, #28
    3948:	d504      	bpl.n	3954 <_vfiprintf_r+0xbc>
    394a:	2353      	movs	r3, #83	; 0x53
    394c:	202b      	movs	r0, #43	; 0x2b
    394e:	aa02      	add	r2, sp, #8
    3950:	189b      	adds	r3, r3, r2
    3952:	7018      	strb	r0, [r3, #0]
    3954:	7823      	ldrb	r3, [r4, #0]
    3956:	2b2a      	cmp	r3, #42	; 0x2a
    3958:	d02c      	beq.n	39b4 <_vfiprintf_r+0x11c>
    395a:	2000      	movs	r0, #0
    395c:	210a      	movs	r1, #10
    395e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3960:	7822      	ldrb	r2, [r4, #0]
    3962:	3a30      	subs	r2, #48	; 0x30
    3964:	2a09      	cmp	r2, #9
    3966:	d800      	bhi.n	396a <_vfiprintf_r+0xd2>
    3968:	e06b      	b.n	3a42 <_vfiprintf_r+0x1aa>
    396a:	2800      	cmp	r0, #0
    396c:	d02a      	beq.n	39c4 <_vfiprintf_r+0x12c>
    396e:	9309      	str	r3, [sp, #36]	; 0x24
    3970:	e028      	b.n	39c4 <_vfiprintf_r+0x12c>
    3972:	4b51      	ldr	r3, [pc, #324]	; (3ab8 <_vfiprintf_r+0x220>)
    3974:	429f      	cmp	r7, r3
    3976:	d101      	bne.n	397c <_vfiprintf_r+0xe4>
    3978:	68b7      	ldr	r7, [r6, #8]
    397a:	e79e      	b.n	38ba <_vfiprintf_r+0x22>
    397c:	4b4f      	ldr	r3, [pc, #316]	; (3abc <_vfiprintf_r+0x224>)
    397e:	429f      	cmp	r7, r3
    3980:	d19b      	bne.n	38ba <_vfiprintf_r+0x22>
    3982:	68f7      	ldr	r7, [r6, #12]
    3984:	e799      	b.n	38ba <_vfiprintf_r+0x22>
    3986:	0039      	movs	r1, r7
    3988:	0030      	movs	r0, r6
    398a:	f7ff fc3b 	bl	3204 <__swsetup_r>
    398e:	2800      	cmp	r0, #0
    3990:	d099      	beq.n	38c6 <_vfiprintf_r+0x2e>
    3992:	2001      	movs	r0, #1
    3994:	4240      	negs	r0, r0
    3996:	b01f      	add	sp, #124	; 0x7c
    3998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    399a:	2b25      	cmp	r3, #37	; 0x25
    399c:	d09f      	beq.n	38de <_vfiprintf_r+0x46>
    399e:	3401      	adds	r4, #1
    39a0:	e79a      	b.n	38d8 <_vfiprintf_r+0x40>
    39a2:	4b44      	ldr	r3, [pc, #272]	; (3ab4 <_vfiprintf_r+0x21c>)
    39a4:	6829      	ldr	r1, [r5, #0]
    39a6:	1ac0      	subs	r0, r0, r3
    39a8:	2301      	movs	r3, #1
    39aa:	4083      	lsls	r3, r0
    39ac:	430b      	orrs	r3, r1
    39ae:	602b      	str	r3, [r5, #0]
    39b0:	4664      	mov	r4, ip
    39b2:	e7b7      	b.n	3924 <_vfiprintf_r+0x8c>
    39b4:	9b05      	ldr	r3, [sp, #20]
    39b6:	1d18      	adds	r0, r3, #4
    39b8:	681b      	ldr	r3, [r3, #0]
    39ba:	9005      	str	r0, [sp, #20]
    39bc:	2b00      	cmp	r3, #0
    39be:	db3a      	blt.n	3a36 <_vfiprintf_r+0x19e>
    39c0:	9309      	str	r3, [sp, #36]	; 0x24
    39c2:	4664      	mov	r4, ip
    39c4:	7823      	ldrb	r3, [r4, #0]
    39c6:	2b2e      	cmp	r3, #46	; 0x2e
    39c8:	d10b      	bne.n	39e2 <_vfiprintf_r+0x14a>
    39ca:	7863      	ldrb	r3, [r4, #1]
    39cc:	1c62      	adds	r2, r4, #1
    39ce:	2b2a      	cmp	r3, #42	; 0x2a
    39d0:	d13f      	bne.n	3a52 <_vfiprintf_r+0x1ba>
    39d2:	9b05      	ldr	r3, [sp, #20]
    39d4:	3402      	adds	r4, #2
    39d6:	1d1a      	adds	r2, r3, #4
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	9205      	str	r2, [sp, #20]
    39dc:	2b00      	cmp	r3, #0
    39de:	db35      	blt.n	3a4c <_vfiprintf_r+0x1b4>
    39e0:	9307      	str	r3, [sp, #28]
    39e2:	7821      	ldrb	r1, [r4, #0]
    39e4:	2203      	movs	r2, #3
    39e6:	4836      	ldr	r0, [pc, #216]	; (3ac0 <_vfiprintf_r+0x228>)
    39e8:	f000 fab6 	bl	3f58 <memchr>
    39ec:	2800      	cmp	r0, #0
    39ee:	d007      	beq.n	3a00 <_vfiprintf_r+0x168>
    39f0:	4b33      	ldr	r3, [pc, #204]	; (3ac0 <_vfiprintf_r+0x228>)
    39f2:	682a      	ldr	r2, [r5, #0]
    39f4:	1ac0      	subs	r0, r0, r3
    39f6:	2340      	movs	r3, #64	; 0x40
    39f8:	4083      	lsls	r3, r0
    39fa:	4313      	orrs	r3, r2
    39fc:	602b      	str	r3, [r5, #0]
    39fe:	3401      	adds	r4, #1
    3a00:	7821      	ldrb	r1, [r4, #0]
    3a02:	1c63      	adds	r3, r4, #1
    3a04:	2206      	movs	r2, #6
    3a06:	482f      	ldr	r0, [pc, #188]	; (3ac4 <_vfiprintf_r+0x22c>)
    3a08:	9302      	str	r3, [sp, #8]
    3a0a:	7629      	strb	r1, [r5, #24]
    3a0c:	f000 faa4 	bl	3f58 <memchr>
    3a10:	2800      	cmp	r0, #0
    3a12:	d044      	beq.n	3a9e <_vfiprintf_r+0x206>
    3a14:	4b2c      	ldr	r3, [pc, #176]	; (3ac8 <_vfiprintf_r+0x230>)
    3a16:	2b00      	cmp	r3, #0
    3a18:	d12f      	bne.n	3a7a <_vfiprintf_r+0x1e2>
    3a1a:	6829      	ldr	r1, [r5, #0]
    3a1c:	9b05      	ldr	r3, [sp, #20]
    3a1e:	2207      	movs	r2, #7
    3a20:	05c9      	lsls	r1, r1, #23
    3a22:	d528      	bpl.n	3a76 <_vfiprintf_r+0x1de>
    3a24:	189b      	adds	r3, r3, r2
    3a26:	4393      	bics	r3, r2
    3a28:	3308      	adds	r3, #8
    3a2a:	9305      	str	r3, [sp, #20]
    3a2c:	696b      	ldr	r3, [r5, #20]
    3a2e:	9a03      	ldr	r2, [sp, #12]
    3a30:	189b      	adds	r3, r3, r2
    3a32:	616b      	str	r3, [r5, #20]
    3a34:	e74f      	b.n	38d6 <_vfiprintf_r+0x3e>
    3a36:	425b      	negs	r3, r3
    3a38:	60eb      	str	r3, [r5, #12]
    3a3a:	2302      	movs	r3, #2
    3a3c:	430b      	orrs	r3, r1
    3a3e:	602b      	str	r3, [r5, #0]
    3a40:	e7bf      	b.n	39c2 <_vfiprintf_r+0x12a>
    3a42:	434b      	muls	r3, r1
    3a44:	3401      	adds	r4, #1
    3a46:	189b      	adds	r3, r3, r2
    3a48:	2001      	movs	r0, #1
    3a4a:	e789      	b.n	3960 <_vfiprintf_r+0xc8>
    3a4c:	2301      	movs	r3, #1
    3a4e:	425b      	negs	r3, r3
    3a50:	e7c6      	b.n	39e0 <_vfiprintf_r+0x148>
    3a52:	2300      	movs	r3, #0
    3a54:	0014      	movs	r4, r2
    3a56:	200a      	movs	r0, #10
    3a58:	001a      	movs	r2, r3
    3a5a:	606b      	str	r3, [r5, #4]
    3a5c:	7821      	ldrb	r1, [r4, #0]
    3a5e:	3930      	subs	r1, #48	; 0x30
    3a60:	2909      	cmp	r1, #9
    3a62:	d903      	bls.n	3a6c <_vfiprintf_r+0x1d4>
    3a64:	2b00      	cmp	r3, #0
    3a66:	d0bc      	beq.n	39e2 <_vfiprintf_r+0x14a>
    3a68:	9207      	str	r2, [sp, #28]
    3a6a:	e7ba      	b.n	39e2 <_vfiprintf_r+0x14a>
    3a6c:	4342      	muls	r2, r0
    3a6e:	3401      	adds	r4, #1
    3a70:	1852      	adds	r2, r2, r1
    3a72:	2301      	movs	r3, #1
    3a74:	e7f2      	b.n	3a5c <_vfiprintf_r+0x1c4>
    3a76:	3307      	adds	r3, #7
    3a78:	e7d5      	b.n	3a26 <_vfiprintf_r+0x18e>
    3a7a:	ab05      	add	r3, sp, #20
    3a7c:	9300      	str	r3, [sp, #0]
    3a7e:	003a      	movs	r2, r7
    3a80:	4b12      	ldr	r3, [pc, #72]	; (3acc <_vfiprintf_r+0x234>)
    3a82:	0029      	movs	r1, r5
    3a84:	0030      	movs	r0, r6
    3a86:	e000      	b.n	3a8a <_vfiprintf_r+0x1f2>
    3a88:	bf00      	nop
    3a8a:	9003      	str	r0, [sp, #12]
    3a8c:	9b03      	ldr	r3, [sp, #12]
    3a8e:	3301      	adds	r3, #1
    3a90:	d1cc      	bne.n	3a2c <_vfiprintf_r+0x194>
    3a92:	89bb      	ldrh	r3, [r7, #12]
    3a94:	065b      	lsls	r3, r3, #25
    3a96:	d500      	bpl.n	3a9a <_vfiprintf_r+0x202>
    3a98:	e77b      	b.n	3992 <_vfiprintf_r+0xfa>
    3a9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3a9c:	e77b      	b.n	3996 <_vfiprintf_r+0xfe>
    3a9e:	ab05      	add	r3, sp, #20
    3aa0:	9300      	str	r3, [sp, #0]
    3aa2:	003a      	movs	r2, r7
    3aa4:	4b09      	ldr	r3, [pc, #36]	; (3acc <_vfiprintf_r+0x234>)
    3aa6:	0029      	movs	r1, r5
    3aa8:	0030      	movs	r0, r6
    3aaa:	f000 f87f 	bl	3bac <_printf_i>
    3aae:	e7ec      	b.n	3a8a <_vfiprintf_r+0x1f2>
    3ab0:	000042a8 	.word	0x000042a8
    3ab4:	000042e8 	.word	0x000042e8
    3ab8:	000042c8 	.word	0x000042c8
    3abc:	00004288 	.word	0x00004288
    3ac0:	000042ee 	.word	0x000042ee
    3ac4:	000042f2 	.word	0x000042f2
    3ac8:	00000000 	.word	0x00000000
    3acc:	00003873 	.word	0x00003873

00003ad0 <_printf_common>:
    3ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ad2:	0015      	movs	r5, r2
    3ad4:	9301      	str	r3, [sp, #4]
    3ad6:	688a      	ldr	r2, [r1, #8]
    3ad8:	690b      	ldr	r3, [r1, #16]
    3ada:	9000      	str	r0, [sp, #0]
    3adc:	000c      	movs	r4, r1
    3ade:	4293      	cmp	r3, r2
    3ae0:	da00      	bge.n	3ae4 <_printf_common+0x14>
    3ae2:	0013      	movs	r3, r2
    3ae4:	0022      	movs	r2, r4
    3ae6:	602b      	str	r3, [r5, #0]
    3ae8:	3243      	adds	r2, #67	; 0x43
    3aea:	7812      	ldrb	r2, [r2, #0]
    3aec:	2a00      	cmp	r2, #0
    3aee:	d001      	beq.n	3af4 <_printf_common+0x24>
    3af0:	3301      	adds	r3, #1
    3af2:	602b      	str	r3, [r5, #0]
    3af4:	6823      	ldr	r3, [r4, #0]
    3af6:	069b      	lsls	r3, r3, #26
    3af8:	d502      	bpl.n	3b00 <_printf_common+0x30>
    3afa:	682b      	ldr	r3, [r5, #0]
    3afc:	3302      	adds	r3, #2
    3afe:	602b      	str	r3, [r5, #0]
    3b00:	2706      	movs	r7, #6
    3b02:	6823      	ldr	r3, [r4, #0]
    3b04:	401f      	ands	r7, r3
    3b06:	d027      	beq.n	3b58 <_printf_common+0x88>
    3b08:	0023      	movs	r3, r4
    3b0a:	3343      	adds	r3, #67	; 0x43
    3b0c:	781b      	ldrb	r3, [r3, #0]
    3b0e:	1e5a      	subs	r2, r3, #1
    3b10:	4193      	sbcs	r3, r2
    3b12:	6822      	ldr	r2, [r4, #0]
    3b14:	0692      	lsls	r2, r2, #26
    3b16:	d430      	bmi.n	3b7a <_printf_common+0xaa>
    3b18:	0022      	movs	r2, r4
    3b1a:	9901      	ldr	r1, [sp, #4]
    3b1c:	3243      	adds	r2, #67	; 0x43
    3b1e:	9800      	ldr	r0, [sp, #0]
    3b20:	9e08      	ldr	r6, [sp, #32]
    3b22:	47b0      	blx	r6
    3b24:	1c43      	adds	r3, r0, #1
    3b26:	d025      	beq.n	3b74 <_printf_common+0xa4>
    3b28:	2306      	movs	r3, #6
    3b2a:	6820      	ldr	r0, [r4, #0]
    3b2c:	682a      	ldr	r2, [r5, #0]
    3b2e:	68e1      	ldr	r1, [r4, #12]
    3b30:	4003      	ands	r3, r0
    3b32:	2500      	movs	r5, #0
    3b34:	2b04      	cmp	r3, #4
    3b36:	d103      	bne.n	3b40 <_printf_common+0x70>
    3b38:	1a8d      	subs	r5, r1, r2
    3b3a:	43eb      	mvns	r3, r5
    3b3c:	17db      	asrs	r3, r3, #31
    3b3e:	401d      	ands	r5, r3
    3b40:	68a3      	ldr	r3, [r4, #8]
    3b42:	6922      	ldr	r2, [r4, #16]
    3b44:	4293      	cmp	r3, r2
    3b46:	dd01      	ble.n	3b4c <_printf_common+0x7c>
    3b48:	1a9b      	subs	r3, r3, r2
    3b4a:	18ed      	adds	r5, r5, r3
    3b4c:	2700      	movs	r7, #0
    3b4e:	42bd      	cmp	r5, r7
    3b50:	d120      	bne.n	3b94 <_printf_common+0xc4>
    3b52:	2000      	movs	r0, #0
    3b54:	e010      	b.n	3b78 <_printf_common+0xa8>
    3b56:	3701      	adds	r7, #1
    3b58:	68e3      	ldr	r3, [r4, #12]
    3b5a:	682a      	ldr	r2, [r5, #0]
    3b5c:	1a9b      	subs	r3, r3, r2
    3b5e:	429f      	cmp	r7, r3
    3b60:	dad2      	bge.n	3b08 <_printf_common+0x38>
    3b62:	0022      	movs	r2, r4
    3b64:	2301      	movs	r3, #1
    3b66:	3219      	adds	r2, #25
    3b68:	9901      	ldr	r1, [sp, #4]
    3b6a:	9800      	ldr	r0, [sp, #0]
    3b6c:	9e08      	ldr	r6, [sp, #32]
    3b6e:	47b0      	blx	r6
    3b70:	1c43      	adds	r3, r0, #1
    3b72:	d1f0      	bne.n	3b56 <_printf_common+0x86>
    3b74:	2001      	movs	r0, #1
    3b76:	4240      	negs	r0, r0
    3b78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3b7a:	2030      	movs	r0, #48	; 0x30
    3b7c:	18e1      	adds	r1, r4, r3
    3b7e:	3143      	adds	r1, #67	; 0x43
    3b80:	7008      	strb	r0, [r1, #0]
    3b82:	0021      	movs	r1, r4
    3b84:	1c5a      	adds	r2, r3, #1
    3b86:	3145      	adds	r1, #69	; 0x45
    3b88:	7809      	ldrb	r1, [r1, #0]
    3b8a:	18a2      	adds	r2, r4, r2
    3b8c:	3243      	adds	r2, #67	; 0x43
    3b8e:	3302      	adds	r3, #2
    3b90:	7011      	strb	r1, [r2, #0]
    3b92:	e7c1      	b.n	3b18 <_printf_common+0x48>
    3b94:	0022      	movs	r2, r4
    3b96:	2301      	movs	r3, #1
    3b98:	321a      	adds	r2, #26
    3b9a:	9901      	ldr	r1, [sp, #4]
    3b9c:	9800      	ldr	r0, [sp, #0]
    3b9e:	9e08      	ldr	r6, [sp, #32]
    3ba0:	47b0      	blx	r6
    3ba2:	1c43      	adds	r3, r0, #1
    3ba4:	d0e6      	beq.n	3b74 <_printf_common+0xa4>
    3ba6:	3701      	adds	r7, #1
    3ba8:	e7d1      	b.n	3b4e <_printf_common+0x7e>
	...

00003bac <_printf_i>:
    3bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bae:	b08b      	sub	sp, #44	; 0x2c
    3bb0:	9206      	str	r2, [sp, #24]
    3bb2:	000a      	movs	r2, r1
    3bb4:	3243      	adds	r2, #67	; 0x43
    3bb6:	9307      	str	r3, [sp, #28]
    3bb8:	9005      	str	r0, [sp, #20]
    3bba:	9204      	str	r2, [sp, #16]
    3bbc:	7e0a      	ldrb	r2, [r1, #24]
    3bbe:	000c      	movs	r4, r1
    3bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3bc2:	2a6e      	cmp	r2, #110	; 0x6e
    3bc4:	d100      	bne.n	3bc8 <_printf_i+0x1c>
    3bc6:	e08f      	b.n	3ce8 <_printf_i+0x13c>
    3bc8:	d817      	bhi.n	3bfa <_printf_i+0x4e>
    3bca:	2a63      	cmp	r2, #99	; 0x63
    3bcc:	d02c      	beq.n	3c28 <_printf_i+0x7c>
    3bce:	d808      	bhi.n	3be2 <_printf_i+0x36>
    3bd0:	2a00      	cmp	r2, #0
    3bd2:	d100      	bne.n	3bd6 <_printf_i+0x2a>
    3bd4:	e099      	b.n	3d0a <_printf_i+0x15e>
    3bd6:	2a58      	cmp	r2, #88	; 0x58
    3bd8:	d054      	beq.n	3c84 <_printf_i+0xd8>
    3bda:	0026      	movs	r6, r4
    3bdc:	3642      	adds	r6, #66	; 0x42
    3bde:	7032      	strb	r2, [r6, #0]
    3be0:	e029      	b.n	3c36 <_printf_i+0x8a>
    3be2:	2a64      	cmp	r2, #100	; 0x64
    3be4:	d001      	beq.n	3bea <_printf_i+0x3e>
    3be6:	2a69      	cmp	r2, #105	; 0x69
    3be8:	d1f7      	bne.n	3bda <_printf_i+0x2e>
    3bea:	6821      	ldr	r1, [r4, #0]
    3bec:	681a      	ldr	r2, [r3, #0]
    3bee:	0608      	lsls	r0, r1, #24
    3bf0:	d523      	bpl.n	3c3a <_printf_i+0x8e>
    3bf2:	1d11      	adds	r1, r2, #4
    3bf4:	6019      	str	r1, [r3, #0]
    3bf6:	6815      	ldr	r5, [r2, #0]
    3bf8:	e025      	b.n	3c46 <_printf_i+0x9a>
    3bfa:	2a73      	cmp	r2, #115	; 0x73
    3bfc:	d100      	bne.n	3c00 <_printf_i+0x54>
    3bfe:	e088      	b.n	3d12 <_printf_i+0x166>
    3c00:	d808      	bhi.n	3c14 <_printf_i+0x68>
    3c02:	2a6f      	cmp	r2, #111	; 0x6f
    3c04:	d029      	beq.n	3c5a <_printf_i+0xae>
    3c06:	2a70      	cmp	r2, #112	; 0x70
    3c08:	d1e7      	bne.n	3bda <_printf_i+0x2e>
    3c0a:	2220      	movs	r2, #32
    3c0c:	6809      	ldr	r1, [r1, #0]
    3c0e:	430a      	orrs	r2, r1
    3c10:	6022      	str	r2, [r4, #0]
    3c12:	e003      	b.n	3c1c <_printf_i+0x70>
    3c14:	2a75      	cmp	r2, #117	; 0x75
    3c16:	d020      	beq.n	3c5a <_printf_i+0xae>
    3c18:	2a78      	cmp	r2, #120	; 0x78
    3c1a:	d1de      	bne.n	3bda <_printf_i+0x2e>
    3c1c:	0022      	movs	r2, r4
    3c1e:	2178      	movs	r1, #120	; 0x78
    3c20:	3245      	adds	r2, #69	; 0x45
    3c22:	7011      	strb	r1, [r2, #0]
    3c24:	4a6c      	ldr	r2, [pc, #432]	; (3dd8 <_printf_i+0x22c>)
    3c26:	e030      	b.n	3c8a <_printf_i+0xde>
    3c28:	000e      	movs	r6, r1
    3c2a:	681a      	ldr	r2, [r3, #0]
    3c2c:	3642      	adds	r6, #66	; 0x42
    3c2e:	1d11      	adds	r1, r2, #4
    3c30:	6019      	str	r1, [r3, #0]
    3c32:	6813      	ldr	r3, [r2, #0]
    3c34:	7033      	strb	r3, [r6, #0]
    3c36:	2301      	movs	r3, #1
    3c38:	e079      	b.n	3d2e <_printf_i+0x182>
    3c3a:	0649      	lsls	r1, r1, #25
    3c3c:	d5d9      	bpl.n	3bf2 <_printf_i+0x46>
    3c3e:	1d11      	adds	r1, r2, #4
    3c40:	6019      	str	r1, [r3, #0]
    3c42:	2300      	movs	r3, #0
    3c44:	5ed5      	ldrsh	r5, [r2, r3]
    3c46:	2d00      	cmp	r5, #0
    3c48:	da03      	bge.n	3c52 <_printf_i+0xa6>
    3c4a:	232d      	movs	r3, #45	; 0x2d
    3c4c:	9a04      	ldr	r2, [sp, #16]
    3c4e:	426d      	negs	r5, r5
    3c50:	7013      	strb	r3, [r2, #0]
    3c52:	4b62      	ldr	r3, [pc, #392]	; (3ddc <_printf_i+0x230>)
    3c54:	270a      	movs	r7, #10
    3c56:	9303      	str	r3, [sp, #12]
    3c58:	e02f      	b.n	3cba <_printf_i+0x10e>
    3c5a:	6820      	ldr	r0, [r4, #0]
    3c5c:	6819      	ldr	r1, [r3, #0]
    3c5e:	0605      	lsls	r5, r0, #24
    3c60:	d503      	bpl.n	3c6a <_printf_i+0xbe>
    3c62:	1d08      	adds	r0, r1, #4
    3c64:	6018      	str	r0, [r3, #0]
    3c66:	680d      	ldr	r5, [r1, #0]
    3c68:	e005      	b.n	3c76 <_printf_i+0xca>
    3c6a:	0640      	lsls	r0, r0, #25
    3c6c:	d5f9      	bpl.n	3c62 <_printf_i+0xb6>
    3c6e:	680d      	ldr	r5, [r1, #0]
    3c70:	1d08      	adds	r0, r1, #4
    3c72:	6018      	str	r0, [r3, #0]
    3c74:	b2ad      	uxth	r5, r5
    3c76:	4b59      	ldr	r3, [pc, #356]	; (3ddc <_printf_i+0x230>)
    3c78:	2708      	movs	r7, #8
    3c7a:	9303      	str	r3, [sp, #12]
    3c7c:	2a6f      	cmp	r2, #111	; 0x6f
    3c7e:	d018      	beq.n	3cb2 <_printf_i+0x106>
    3c80:	270a      	movs	r7, #10
    3c82:	e016      	b.n	3cb2 <_printf_i+0x106>
    3c84:	3145      	adds	r1, #69	; 0x45
    3c86:	700a      	strb	r2, [r1, #0]
    3c88:	4a54      	ldr	r2, [pc, #336]	; (3ddc <_printf_i+0x230>)
    3c8a:	9203      	str	r2, [sp, #12]
    3c8c:	681a      	ldr	r2, [r3, #0]
    3c8e:	6821      	ldr	r1, [r4, #0]
    3c90:	1d10      	adds	r0, r2, #4
    3c92:	6018      	str	r0, [r3, #0]
    3c94:	6815      	ldr	r5, [r2, #0]
    3c96:	0608      	lsls	r0, r1, #24
    3c98:	d522      	bpl.n	3ce0 <_printf_i+0x134>
    3c9a:	07cb      	lsls	r3, r1, #31
    3c9c:	d502      	bpl.n	3ca4 <_printf_i+0xf8>
    3c9e:	2320      	movs	r3, #32
    3ca0:	4319      	orrs	r1, r3
    3ca2:	6021      	str	r1, [r4, #0]
    3ca4:	2710      	movs	r7, #16
    3ca6:	2d00      	cmp	r5, #0
    3ca8:	d103      	bne.n	3cb2 <_printf_i+0x106>
    3caa:	2320      	movs	r3, #32
    3cac:	6822      	ldr	r2, [r4, #0]
    3cae:	439a      	bics	r2, r3
    3cb0:	6022      	str	r2, [r4, #0]
    3cb2:	0023      	movs	r3, r4
    3cb4:	2200      	movs	r2, #0
    3cb6:	3343      	adds	r3, #67	; 0x43
    3cb8:	701a      	strb	r2, [r3, #0]
    3cba:	6863      	ldr	r3, [r4, #4]
    3cbc:	60a3      	str	r3, [r4, #8]
    3cbe:	2b00      	cmp	r3, #0
    3cc0:	db5c      	blt.n	3d7c <_printf_i+0x1d0>
    3cc2:	2204      	movs	r2, #4
    3cc4:	6821      	ldr	r1, [r4, #0]
    3cc6:	4391      	bics	r1, r2
    3cc8:	6021      	str	r1, [r4, #0]
    3cca:	2d00      	cmp	r5, #0
    3ccc:	d158      	bne.n	3d80 <_printf_i+0x1d4>
    3cce:	9e04      	ldr	r6, [sp, #16]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d064      	beq.n	3d9e <_printf_i+0x1f2>
    3cd4:	0026      	movs	r6, r4
    3cd6:	9b03      	ldr	r3, [sp, #12]
    3cd8:	3642      	adds	r6, #66	; 0x42
    3cda:	781b      	ldrb	r3, [r3, #0]
    3cdc:	7033      	strb	r3, [r6, #0]
    3cde:	e05e      	b.n	3d9e <_printf_i+0x1f2>
    3ce0:	0648      	lsls	r0, r1, #25
    3ce2:	d5da      	bpl.n	3c9a <_printf_i+0xee>
    3ce4:	b2ad      	uxth	r5, r5
    3ce6:	e7d8      	b.n	3c9a <_printf_i+0xee>
    3ce8:	6809      	ldr	r1, [r1, #0]
    3cea:	681a      	ldr	r2, [r3, #0]
    3cec:	0608      	lsls	r0, r1, #24
    3cee:	d505      	bpl.n	3cfc <_printf_i+0x150>
    3cf0:	1d11      	adds	r1, r2, #4
    3cf2:	6019      	str	r1, [r3, #0]
    3cf4:	6813      	ldr	r3, [r2, #0]
    3cf6:	6962      	ldr	r2, [r4, #20]
    3cf8:	601a      	str	r2, [r3, #0]
    3cfa:	e006      	b.n	3d0a <_printf_i+0x15e>
    3cfc:	0649      	lsls	r1, r1, #25
    3cfe:	d5f7      	bpl.n	3cf0 <_printf_i+0x144>
    3d00:	1d11      	adds	r1, r2, #4
    3d02:	6019      	str	r1, [r3, #0]
    3d04:	6813      	ldr	r3, [r2, #0]
    3d06:	8aa2      	ldrh	r2, [r4, #20]
    3d08:	801a      	strh	r2, [r3, #0]
    3d0a:	2300      	movs	r3, #0
    3d0c:	9e04      	ldr	r6, [sp, #16]
    3d0e:	6123      	str	r3, [r4, #16]
    3d10:	e054      	b.n	3dbc <_printf_i+0x210>
    3d12:	681a      	ldr	r2, [r3, #0]
    3d14:	1d11      	adds	r1, r2, #4
    3d16:	6019      	str	r1, [r3, #0]
    3d18:	6816      	ldr	r6, [r2, #0]
    3d1a:	2100      	movs	r1, #0
    3d1c:	6862      	ldr	r2, [r4, #4]
    3d1e:	0030      	movs	r0, r6
    3d20:	f000 f91a 	bl	3f58 <memchr>
    3d24:	2800      	cmp	r0, #0
    3d26:	d001      	beq.n	3d2c <_printf_i+0x180>
    3d28:	1b80      	subs	r0, r0, r6
    3d2a:	6060      	str	r0, [r4, #4]
    3d2c:	6863      	ldr	r3, [r4, #4]
    3d2e:	6123      	str	r3, [r4, #16]
    3d30:	2300      	movs	r3, #0
    3d32:	9a04      	ldr	r2, [sp, #16]
    3d34:	7013      	strb	r3, [r2, #0]
    3d36:	e041      	b.n	3dbc <_printf_i+0x210>
    3d38:	6923      	ldr	r3, [r4, #16]
    3d3a:	0032      	movs	r2, r6
    3d3c:	9906      	ldr	r1, [sp, #24]
    3d3e:	9805      	ldr	r0, [sp, #20]
    3d40:	9d07      	ldr	r5, [sp, #28]
    3d42:	47a8      	blx	r5
    3d44:	1c43      	adds	r3, r0, #1
    3d46:	d043      	beq.n	3dd0 <_printf_i+0x224>
    3d48:	6823      	ldr	r3, [r4, #0]
    3d4a:	2500      	movs	r5, #0
    3d4c:	079b      	lsls	r3, r3, #30
    3d4e:	d40f      	bmi.n	3d70 <_printf_i+0x1c4>
    3d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d52:	68e0      	ldr	r0, [r4, #12]
    3d54:	4298      	cmp	r0, r3
    3d56:	da3d      	bge.n	3dd4 <_printf_i+0x228>
    3d58:	0018      	movs	r0, r3
    3d5a:	e03b      	b.n	3dd4 <_printf_i+0x228>
    3d5c:	0022      	movs	r2, r4
    3d5e:	2301      	movs	r3, #1
    3d60:	3219      	adds	r2, #25
    3d62:	9906      	ldr	r1, [sp, #24]
    3d64:	9805      	ldr	r0, [sp, #20]
    3d66:	9e07      	ldr	r6, [sp, #28]
    3d68:	47b0      	blx	r6
    3d6a:	1c43      	adds	r3, r0, #1
    3d6c:	d030      	beq.n	3dd0 <_printf_i+0x224>
    3d6e:	3501      	adds	r5, #1
    3d70:	68e3      	ldr	r3, [r4, #12]
    3d72:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3d74:	1a9b      	subs	r3, r3, r2
    3d76:	429d      	cmp	r5, r3
    3d78:	dbf0      	blt.n	3d5c <_printf_i+0x1b0>
    3d7a:	e7e9      	b.n	3d50 <_printf_i+0x1a4>
    3d7c:	2d00      	cmp	r5, #0
    3d7e:	d0a9      	beq.n	3cd4 <_printf_i+0x128>
    3d80:	9e04      	ldr	r6, [sp, #16]
    3d82:	0028      	movs	r0, r5
    3d84:	0039      	movs	r1, r7
    3d86:	f7ff f851 	bl	2e2c <__aeabi_uidivmod>
    3d8a:	9b03      	ldr	r3, [sp, #12]
    3d8c:	3e01      	subs	r6, #1
    3d8e:	5c5b      	ldrb	r3, [r3, r1]
    3d90:	0028      	movs	r0, r5
    3d92:	7033      	strb	r3, [r6, #0]
    3d94:	0039      	movs	r1, r7
    3d96:	f7fe ffc3 	bl	2d20 <__udivsi3>
    3d9a:	1e05      	subs	r5, r0, #0
    3d9c:	d1f1      	bne.n	3d82 <_printf_i+0x1d6>
    3d9e:	2f08      	cmp	r7, #8
    3da0:	d109      	bne.n	3db6 <_printf_i+0x20a>
    3da2:	6823      	ldr	r3, [r4, #0]
    3da4:	07db      	lsls	r3, r3, #31
    3da6:	d506      	bpl.n	3db6 <_printf_i+0x20a>
    3da8:	6863      	ldr	r3, [r4, #4]
    3daa:	6922      	ldr	r2, [r4, #16]
    3dac:	4293      	cmp	r3, r2
    3dae:	dc02      	bgt.n	3db6 <_printf_i+0x20a>
    3db0:	2330      	movs	r3, #48	; 0x30
    3db2:	3e01      	subs	r6, #1
    3db4:	7033      	strb	r3, [r6, #0]
    3db6:	9b04      	ldr	r3, [sp, #16]
    3db8:	1b9b      	subs	r3, r3, r6
    3dba:	6123      	str	r3, [r4, #16]
    3dbc:	9b07      	ldr	r3, [sp, #28]
    3dbe:	aa09      	add	r2, sp, #36	; 0x24
    3dc0:	9300      	str	r3, [sp, #0]
    3dc2:	0021      	movs	r1, r4
    3dc4:	9b06      	ldr	r3, [sp, #24]
    3dc6:	9805      	ldr	r0, [sp, #20]
    3dc8:	f7ff fe82 	bl	3ad0 <_printf_common>
    3dcc:	1c43      	adds	r3, r0, #1
    3dce:	d1b3      	bne.n	3d38 <_printf_i+0x18c>
    3dd0:	2001      	movs	r0, #1
    3dd2:	4240      	negs	r0, r0
    3dd4:	b00b      	add	sp, #44	; 0x2c
    3dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dd8:	0000430a 	.word	0x0000430a
    3ddc:	000042f9 	.word	0x000042f9

00003de0 <_sbrk_r>:
    3de0:	2300      	movs	r3, #0
    3de2:	b570      	push	{r4, r5, r6, lr}
    3de4:	4c06      	ldr	r4, [pc, #24]	; (3e00 <_sbrk_r+0x20>)
    3de6:	0005      	movs	r5, r0
    3de8:	0008      	movs	r0, r1
    3dea:	6023      	str	r3, [r4, #0]
    3dec:	f7fe fdea 	bl	29c4 <_sbrk>
    3df0:	1c43      	adds	r3, r0, #1
    3df2:	d103      	bne.n	3dfc <_sbrk_r+0x1c>
    3df4:	6823      	ldr	r3, [r4, #0]
    3df6:	2b00      	cmp	r3, #0
    3df8:	d000      	beq.n	3dfc <_sbrk_r+0x1c>
    3dfa:	602b      	str	r3, [r5, #0]
    3dfc:	bd70      	pop	{r4, r5, r6, pc}
    3dfe:	46c0      	nop			; (mov r8, r8)
    3e00:	20000508 	.word	0x20000508

00003e04 <__sread>:
    3e04:	b570      	push	{r4, r5, r6, lr}
    3e06:	000c      	movs	r4, r1
    3e08:	250e      	movs	r5, #14
    3e0a:	5f49      	ldrsh	r1, [r1, r5]
    3e0c:	f000 f8b2 	bl	3f74 <_read_r>
    3e10:	2800      	cmp	r0, #0
    3e12:	db03      	blt.n	3e1c <__sread+0x18>
    3e14:	6d63      	ldr	r3, [r4, #84]	; 0x54
    3e16:	181b      	adds	r3, r3, r0
    3e18:	6563      	str	r3, [r4, #84]	; 0x54
    3e1a:	bd70      	pop	{r4, r5, r6, pc}
    3e1c:	89a3      	ldrh	r3, [r4, #12]
    3e1e:	4a02      	ldr	r2, [pc, #8]	; (3e28 <__sread+0x24>)
    3e20:	4013      	ands	r3, r2
    3e22:	81a3      	strh	r3, [r4, #12]
    3e24:	e7f9      	b.n	3e1a <__sread+0x16>
    3e26:	46c0      	nop			; (mov r8, r8)
    3e28:	ffffefff 	.word	0xffffefff

00003e2c <__swrite>:
    3e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e2e:	001f      	movs	r7, r3
    3e30:	898b      	ldrh	r3, [r1, #12]
    3e32:	0005      	movs	r5, r0
    3e34:	000c      	movs	r4, r1
    3e36:	0016      	movs	r6, r2
    3e38:	05db      	lsls	r3, r3, #23
    3e3a:	d505      	bpl.n	3e48 <__swrite+0x1c>
    3e3c:	230e      	movs	r3, #14
    3e3e:	5ec9      	ldrsh	r1, [r1, r3]
    3e40:	2200      	movs	r2, #0
    3e42:	2302      	movs	r3, #2
    3e44:	f000 f874 	bl	3f30 <_lseek_r>
    3e48:	89a3      	ldrh	r3, [r4, #12]
    3e4a:	4a05      	ldr	r2, [pc, #20]	; (3e60 <__swrite+0x34>)
    3e4c:	0028      	movs	r0, r5
    3e4e:	4013      	ands	r3, r2
    3e50:	81a3      	strh	r3, [r4, #12]
    3e52:	0032      	movs	r2, r6
    3e54:	230e      	movs	r3, #14
    3e56:	5ee1      	ldrsh	r1, [r4, r3]
    3e58:	003b      	movs	r3, r7
    3e5a:	f000 f81f 	bl	3e9c <_write_r>
    3e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e60:	ffffefff 	.word	0xffffefff

00003e64 <__sseek>:
    3e64:	b570      	push	{r4, r5, r6, lr}
    3e66:	000c      	movs	r4, r1
    3e68:	250e      	movs	r5, #14
    3e6a:	5f49      	ldrsh	r1, [r1, r5]
    3e6c:	f000 f860 	bl	3f30 <_lseek_r>
    3e70:	89a3      	ldrh	r3, [r4, #12]
    3e72:	1c42      	adds	r2, r0, #1
    3e74:	d103      	bne.n	3e7e <__sseek+0x1a>
    3e76:	4a05      	ldr	r2, [pc, #20]	; (3e8c <__sseek+0x28>)
    3e78:	4013      	ands	r3, r2
    3e7a:	81a3      	strh	r3, [r4, #12]
    3e7c:	bd70      	pop	{r4, r5, r6, pc}
    3e7e:	2280      	movs	r2, #128	; 0x80
    3e80:	0152      	lsls	r2, r2, #5
    3e82:	4313      	orrs	r3, r2
    3e84:	81a3      	strh	r3, [r4, #12]
    3e86:	6560      	str	r0, [r4, #84]	; 0x54
    3e88:	e7f8      	b.n	3e7c <__sseek+0x18>
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	ffffefff 	.word	0xffffefff

00003e90 <__sclose>:
    3e90:	b510      	push	{r4, lr}
    3e92:	230e      	movs	r3, #14
    3e94:	5ec9      	ldrsh	r1, [r1, r3]
    3e96:	f000 f815 	bl	3ec4 <_close_r>
    3e9a:	bd10      	pop	{r4, pc}

00003e9c <_write_r>:
    3e9c:	b570      	push	{r4, r5, r6, lr}
    3e9e:	0005      	movs	r5, r0
    3ea0:	0008      	movs	r0, r1
    3ea2:	0011      	movs	r1, r2
    3ea4:	2200      	movs	r2, #0
    3ea6:	4c06      	ldr	r4, [pc, #24]	; (3ec0 <_write_r+0x24>)
    3ea8:	6022      	str	r2, [r4, #0]
    3eaa:	001a      	movs	r2, r3
    3eac:	f7fe fd62 	bl	2974 <_write>
    3eb0:	1c43      	adds	r3, r0, #1
    3eb2:	d103      	bne.n	3ebc <_write_r+0x20>
    3eb4:	6823      	ldr	r3, [r4, #0]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d000      	beq.n	3ebc <_write_r+0x20>
    3eba:	602b      	str	r3, [r5, #0]
    3ebc:	bd70      	pop	{r4, r5, r6, pc}
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	20000508 	.word	0x20000508

00003ec4 <_close_r>:
    3ec4:	2300      	movs	r3, #0
    3ec6:	b570      	push	{r4, r5, r6, lr}
    3ec8:	4c06      	ldr	r4, [pc, #24]	; (3ee4 <_close_r+0x20>)
    3eca:	0005      	movs	r5, r0
    3ecc:	0008      	movs	r0, r1
    3ece:	6023      	str	r3, [r4, #0]
    3ed0:	f7fe fd8a 	bl	29e8 <_close>
    3ed4:	1c43      	adds	r3, r0, #1
    3ed6:	d103      	bne.n	3ee0 <_close_r+0x1c>
    3ed8:	6823      	ldr	r3, [r4, #0]
    3eda:	2b00      	cmp	r3, #0
    3edc:	d000      	beq.n	3ee0 <_close_r+0x1c>
    3ede:	602b      	str	r3, [r5, #0]
    3ee0:	bd70      	pop	{r4, r5, r6, pc}
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	20000508 	.word	0x20000508

00003ee8 <_fstat_r>:
    3ee8:	2300      	movs	r3, #0
    3eea:	b570      	push	{r4, r5, r6, lr}
    3eec:	4c06      	ldr	r4, [pc, #24]	; (3f08 <_fstat_r+0x20>)
    3eee:	0005      	movs	r5, r0
    3ef0:	0008      	movs	r0, r1
    3ef2:	0011      	movs	r1, r2
    3ef4:	6023      	str	r3, [r4, #0]
    3ef6:	f7fe fd7a 	bl	29ee <_fstat>
    3efa:	1c43      	adds	r3, r0, #1
    3efc:	d103      	bne.n	3f06 <_fstat_r+0x1e>
    3efe:	6823      	ldr	r3, [r4, #0]
    3f00:	2b00      	cmp	r3, #0
    3f02:	d000      	beq.n	3f06 <_fstat_r+0x1e>
    3f04:	602b      	str	r3, [r5, #0]
    3f06:	bd70      	pop	{r4, r5, r6, pc}
    3f08:	20000508 	.word	0x20000508

00003f0c <_isatty_r>:
    3f0c:	2300      	movs	r3, #0
    3f0e:	b570      	push	{r4, r5, r6, lr}
    3f10:	4c06      	ldr	r4, [pc, #24]	; (3f2c <_isatty_r+0x20>)
    3f12:	0005      	movs	r5, r0
    3f14:	0008      	movs	r0, r1
    3f16:	6023      	str	r3, [r4, #0]
    3f18:	f7fe fd6e 	bl	29f8 <_isatty>
    3f1c:	1c43      	adds	r3, r0, #1
    3f1e:	d103      	bne.n	3f28 <_isatty_r+0x1c>
    3f20:	6823      	ldr	r3, [r4, #0]
    3f22:	2b00      	cmp	r3, #0
    3f24:	d000      	beq.n	3f28 <_isatty_r+0x1c>
    3f26:	602b      	str	r3, [r5, #0]
    3f28:	bd70      	pop	{r4, r5, r6, pc}
    3f2a:	46c0      	nop			; (mov r8, r8)
    3f2c:	20000508 	.word	0x20000508

00003f30 <_lseek_r>:
    3f30:	b570      	push	{r4, r5, r6, lr}
    3f32:	0005      	movs	r5, r0
    3f34:	0008      	movs	r0, r1
    3f36:	0011      	movs	r1, r2
    3f38:	2200      	movs	r2, #0
    3f3a:	4c06      	ldr	r4, [pc, #24]	; (3f54 <_lseek_r+0x24>)
    3f3c:	6022      	str	r2, [r4, #0]
    3f3e:	001a      	movs	r2, r3
    3f40:	f7fe fd5c 	bl	29fc <_lseek>
    3f44:	1c43      	adds	r3, r0, #1
    3f46:	d103      	bne.n	3f50 <_lseek_r+0x20>
    3f48:	6823      	ldr	r3, [r4, #0]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	d000      	beq.n	3f50 <_lseek_r+0x20>
    3f4e:	602b      	str	r3, [r5, #0]
    3f50:	bd70      	pop	{r4, r5, r6, pc}
    3f52:	46c0      	nop			; (mov r8, r8)
    3f54:	20000508 	.word	0x20000508

00003f58 <memchr>:
    3f58:	b2c9      	uxtb	r1, r1
    3f5a:	1882      	adds	r2, r0, r2
    3f5c:	4290      	cmp	r0, r2
    3f5e:	d101      	bne.n	3f64 <memchr+0xc>
    3f60:	2000      	movs	r0, #0
    3f62:	4770      	bx	lr
    3f64:	7803      	ldrb	r3, [r0, #0]
    3f66:	428b      	cmp	r3, r1
    3f68:	d0fb      	beq.n	3f62 <memchr+0xa>
    3f6a:	3001      	adds	r0, #1
    3f6c:	e7f6      	b.n	3f5c <memchr+0x4>

00003f6e <__malloc_lock>:
    3f6e:	4770      	bx	lr

00003f70 <__malloc_unlock>:
    3f70:	4770      	bx	lr
	...

00003f74 <_read_r>:
    3f74:	b570      	push	{r4, r5, r6, lr}
    3f76:	0005      	movs	r5, r0
    3f78:	0008      	movs	r0, r1
    3f7a:	0011      	movs	r1, r2
    3f7c:	2200      	movs	r2, #0
    3f7e:	4c06      	ldr	r4, [pc, #24]	; (3f98 <_read_r+0x24>)
    3f80:	6022      	str	r2, [r4, #0]
    3f82:	001a      	movs	r2, r3
    3f84:	f7fe fcd4 	bl	2930 <_read>
    3f88:	1c43      	adds	r3, r0, #1
    3f8a:	d103      	bne.n	3f94 <_read_r+0x20>
    3f8c:	6823      	ldr	r3, [r4, #0]
    3f8e:	2b00      	cmp	r3, #0
    3f90:	d000      	beq.n	3f94 <_read_r+0x20>
    3f92:	602b      	str	r3, [r5, #0]
    3f94:	bd70      	pop	{r4, r5, r6, pc}
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	20000508 	.word	0x20000508

00003f9c <mmc_trans_multipliers>:
    3f9c:	00000000 0000000a 0000000c 0000000d     ................
    3fac:	0000000f 00000014 0000001a 0000001e     ................
    3fbc:	00000023 00000028 0000002d 00000034     #...(...-...4...
    3fcc:	00000037 0000003c 00000046 00000050     7...<...F...P...

00003fdc <sd_mmc_trans_units>:
    3fdc:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00003ff8 <sd_trans_multipliers>:
    3ff8:	00000000 0000000a 0000000c 0000000d     ................
    4008:	0000000f 00000014 00000019 0000001e     ................
    4018:	00000023 00000028 0000002d 00000032     #...(...-...2...
    4028:	00000037 0000003c 00000046 00000050     7...<...F...P...
    4038:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    4048:	42001800 42001c00 000020ba 000020b6     ...B...B. ... ..
    4058:	000020b6 0000211c 0000211c 000020ce     . ...!...!... ..
    4068:	000020c0 000020d4 0000210a 000022dc     . ... ...!..."..
    4078:	000022bc 000022bc 00002348 000022ce     ."..."..H#..."..
    4088:	000022ea 000022c0 000022f8 00002338     ."..."..."..8#..
    4098:	61736964 20656c62 69726570 72656870     disable peripher
    40a8:	3a736c61 69654420 6974696e 7a696c61     als: Deinitializ
    40b8:	20676e69 69726570 72656870 20736c61     ing peripherals 
    40c8:	754a0d0a 6e69706d 6f742067 70706120     ..Jumping to app
    40d8:	2e2e2e2e 0d0a202e 00000000 2d2d0a0d     ..... ........--
    40e8:	4f4f4220 414f4c54 20524544 0a0d2d2d      BOOTLOADER --..
    40f8:	44202d2d 534f4c45 434e4920 6e6f202e     -- DELOS INC. on
    4108:	4d415320 47313244 20413831 2055434d      SAMD21G18A MCU 
    4118:	0a0d2d2d 43202d2d 69706d6f 3a64656c     --..-- Compiled:
    4128:	72704120 20323220 39313032 3a393120      Apr 22 2019 19:
    4138:	353a3434 2d2d2032 0000000d 616d0a0d     44:52 --......ma
    4148:	203a6e69 74696e49 696c6169 676e697a     in: Initializing
    4158:	616f4220 61206472 7020646e 70697265      Board and perip
    4168:	61726568 2e20736c 2e2e2e2e 0a0d202e     herals ...... ..
    4178:	0000000d 74696e69 6f74735f 65676172     ....init_storage
    4188:	6c70203a 65736165 756c7020 6e612067     : please plug an
    4198:	2f445320 20434d4d 64726163 206e6920      SD/MMC card in 
    41a8:	746f6c73 0d2e2e2e 00000000 74696e69     slot........init
    41b8:	6f74735f 65676172 4453203a 72614320     _storage: SD Car
    41c8:	6e692064 6c617473 6166206c 64656c69     d install failed
    41d8:	00000d2e 74696e69 6f74735f 65676172     ....init_storage
    41e8:	7274203a 6e752079 67756c70 646e6120     : try unplug and
    41f8:	2d657220 67756c70 65687420 72616320      re-plug the car
    4208:	000d2e64 74696e69 6f74735f 65676172     d...init_storage
    4218:	6f6d203a 69746e75 5320676e 61632044     : mounting SD ca
    4228:	2e2e6472 00000d2e 74696e69 6f74735f     rd......init_sto
    4238:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
    4248:	20746e75 6c696166 20216465 73657228     unt failed! (res
    4258:	29642520 00000a0d 74696e69 6f74735f      %d)....init_sto
    4268:	65676172 4453203a 72616320 6f6d2064     rage: SD card mo
    4278:	20746e75 0d2e4b4f 00000000              unt OK......

00004284 <_global_impure_ptr>:
    4284:	20000014                                ... 

00004288 <__sf_fake_stderr>:
	...

000042a8 <__sf_fake_stdin>:
	...

000042c8 <__sf_fake_stdout>:
	...
    42e8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    42f8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4308:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4318:	00006665                                ef..

0000431c <_init>:
    431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    431e:	46c0      	nop			; (mov r8, r8)
    4320:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4322:	bc08      	pop	{r3}
    4324:	469e      	mov	lr, r3
    4326:	4770      	bx	lr

00004328 <__init_array_start>:
    4328:	000000dd 	.word	0x000000dd

0000432c <_fini>:
    432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4332:	bc08      	pop	{r3}
    4334:	469e      	mov	lr, r3
    4336:	4770      	bx	lr

00004338 <__fini_array_start>:
    4338:	000000b5 	.word	0x000000b5
