
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f36c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002fc  20000000  0000f36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010e4  200002fc  0000f668  000202fc  2**2
                  ALLOC
  3 .stack        00002000  200013e0  0001074c  000202fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
  6 .debug_info   00082657  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000c6b5  00000000  00000000  000a29d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00022bef  00000000  00000000  000af089  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017b0  00000000  00000000  000d1c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000021e8  00000000  00000000  000d3428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002a39c  00000000  00000000  000d5610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002a567  00000000  00000000  000ff9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a13f9  00000000  00000000  00129f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004ec4  00000000  00000000  001cb30c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 33 00 20 a5 66 00 00 a1 66 00 00 a1 66 00 00     .3. .f...f...f..
	...
      2c:	a1 66 00 00 00 00 00 00 00 00 00 00 a1 66 00 00     .f...........f..
      3c:	e5 8c 00 00 a1 66 00 00 a1 66 00 00 a1 66 00 00     .....f...f...f..
      4c:	65 47 00 00 d5 41 00 00 a1 66 00 00 a1 66 00 00     eG...A...f...f..
      5c:	a1 66 00 00 a1 66 00 00 8d 4b 00 00 9d 4b 00 00     .f...f...K...K..
      6c:	ad 4b 00 00 bd 4b 00 00 cd 4b 00 00 dd 4b 00 00     .K...K...K...K..
      7c:	71 66 00 00 81 66 00 00 91 66 00 00 a1 66 00 00     qf...f...f...f..
      8c:	a1 66 00 00 a1 66 00 00 00 00 00 00 00 00 00 00     .f...f..........
      9c:	a1 66 00 00 a1 66 00 00 a1 66 00 00 a1 66 00 00     .f...f...f...f..
      ac:	a1 66 00 00 00 00 00 00                             .f......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002fc 	.word	0x200002fc
      d4:	00000000 	.word	0x00000000
      d8:	0000f36c 	.word	0x0000f36c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000300 	.word	0x20000300
     108:	0000f36c 	.word	0x0000f36c
     10c:	0000f36c 	.word	0x0000f36c
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b06      	ldr	r3, [pc, #24]	; (130 <sd_mmc_configure_slot+0x1c>)
     118:	6819      	ldr	r1, [r3, #0]
     11a:	7f8b      	ldrb	r3, [r1, #30]
     11c:	1e5a      	subs	r2, r3, #1
     11e:	4193      	sbcs	r3, r2
     120:	b2db      	uxtb	r3, r3
     122:	7b4a      	ldrb	r2, [r1, #13]
     124:	6809      	ldr	r1, [r1, #0]
     126:	4803      	ldr	r0, [pc, #12]	; (134 <sd_mmc_configure_slot+0x20>)
     128:	7800      	ldrb	r0, [r0, #0]
     12a:	4c03      	ldr	r4, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     12e:	bd10      	pop	{r4, pc}
     130:	20000318 	.word	0x20000318
     134:	20000340 	.word	0x20000340
     138:	00000dd1 	.word	0x00000dd1

0000013c <sd_mmc_select_slot>:
{
     13c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     13e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     140:	2800      	cmp	r0, #0
     142:	d001      	beq.n	148 <sd_mmc_select_slot+0xc>
}
     144:	0018      	movs	r0, r3
     146:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     148:	4b0e      	ldr	r3, [pc, #56]	; (184 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     14a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     14c:	3b03      	subs	r3, #3
     14e:	2b01      	cmp	r3, #1
     150:	d90d      	bls.n	16e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     152:	2200      	movs	r2, #0
     154:	4b0c      	ldr	r3, [pc, #48]	; (188 <sd_mmc_select_slot+0x4c>)
     156:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     158:	4c0a      	ldr	r4, [pc, #40]	; (184 <sd_mmc_select_slot+0x48>)
     15a:	4b0c      	ldr	r3, [pc, #48]	; (18c <sd_mmc_select_slot+0x50>)
     15c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     15e:	4b0c      	ldr	r3, [pc, #48]	; (190 <sd_mmc_select_slot+0x54>)
     160:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     162:	7aa3      	ldrb	r3, [r4, #10]
     164:	3b02      	subs	r3, #2
     166:	4258      	negs	r0, r3
     168:	4143      	adcs	r3, r0
     16a:	b2db      	uxtb	r3, r3
     16c:	e7ea      	b.n	144 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     16e:	4b05      	ldr	r3, [pc, #20]	; (184 <sd_mmc_select_slot+0x48>)
     170:	2202      	movs	r2, #2
     172:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     174:	4a07      	ldr	r2, [pc, #28]	; (194 <sd_mmc_select_slot+0x58>)
     176:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     178:	2201      	movs	r2, #1
     17a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     17c:	2200      	movs	r2, #0
     17e:	779a      	strb	r2, [r3, #30]
     180:	e7e7      	b.n	152 <sd_mmc_select_slot+0x16>
     182:	46c0      	nop			; (mov r8, r8)
     184:	2000031c 	.word	0x2000031c
     188:	20000340 	.word	0x20000340
     18c:	20000318 	.word	0x20000318
     190:	00000115 	.word	0x00000115
     194:	00061a80 	.word	0x00061a80

00000198 <sd_mmc_cmd13>:
{
     198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     19a:	4d09      	ldr	r5, [pc, #36]	; (1c0 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     19c:	4f09      	ldr	r7, [pc, #36]	; (1c4 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     19e:	4e0a      	ldr	r6, [pc, #40]	; (1c8 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     1a0:	2100      	movs	r1, #0
     1a2:	480a      	ldr	r0, [pc, #40]	; (1cc <sd_mmc_cmd13+0x34>)
     1a4:	47b8      	blx	r7
     1a6:	1e04      	subs	r4, r0, #0
     1a8:	d007      	beq.n	1ba <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     1aa:	47b0      	blx	r6
     1ac:	23ff      	movs	r3, #255	; 0xff
     1ae:	4203      	tst	r3, r0
     1b0:	d003      	beq.n	1ba <sd_mmc_cmd13+0x22>
     1b2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     1b4:	2d00      	cmp	r5, #0
     1b6:	d1f3      	bne.n	1a0 <sd_mmc_cmd13+0x8>
			return false;
     1b8:	2400      	movs	r4, #0
}
     1ba:	0020      	movs	r0, r4
     1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00030d41 	.word	0x00030d41
     1c4:	00001015 	.word	0x00001015
     1c8:	0000102d 	.word	0x0000102d
     1cc:	00001b0d 	.word	0x00001b0d

000001d0 <sd_mmc_cmd9_spi>:
{
     1d0:	b510      	push	{r4, lr}
     1d2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     1d4:	4b0c      	ldr	r3, [pc, #48]	; (208 <sd_mmc_cmd9_spi+0x38>)
     1d6:	681b      	ldr	r3, [r3, #0]
     1d8:	8919      	ldrh	r1, [r3, #8]
     1da:	0409      	lsls	r1, r1, #16
     1dc:	2301      	movs	r3, #1
     1de:	9300      	str	r3, [sp, #0]
     1e0:	2210      	movs	r2, #16
     1e2:	480a      	ldr	r0, [pc, #40]	; (20c <sd_mmc_cmd9_spi+0x3c>)
     1e4:	4c0a      	ldr	r4, [pc, #40]	; (210 <sd_mmc_cmd9_spi+0x40>)
     1e6:	47a0      	blx	r4
     1e8:	2800      	cmp	r0, #0
     1ea:	d101      	bne.n	1f0 <sd_mmc_cmd9_spi+0x20>
}
     1ec:	b002      	add	sp, #8
     1ee:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     1f0:	4b05      	ldr	r3, [pc, #20]	; (208 <sd_mmc_cmd9_spi+0x38>)
     1f2:	6818      	ldr	r0, [r3, #0]
     1f4:	300e      	adds	r0, #14
     1f6:	2101      	movs	r1, #1
     1f8:	4b06      	ldr	r3, [pc, #24]	; (214 <sd_mmc_cmd9_spi+0x44>)
     1fa:	4798      	blx	r3
     1fc:	2800      	cmp	r0, #0
     1fe:	d0f5      	beq.n	1ec <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     200:	4b05      	ldr	r3, [pc, #20]	; (218 <sd_mmc_cmd9_spi+0x48>)
     202:	4798      	blx	r3
     204:	e7f2      	b.n	1ec <sd_mmc_cmd9_spi+0x1c>
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000318 	.word	0x20000318
     20c:	00081109 	.word	0x00081109
     210:	00000e85 	.word	0x00000e85
     214:	000010b1 	.word	0x000010b1
     218:	0000113d 	.word	0x0000113d

0000021c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     21c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     21e:	4b04      	ldr	r3, [pc, #16]	; (230 <sd_mmc_deselect_slot+0x14>)
     220:	781b      	ldrb	r3, [r3, #0]
     222:	2b00      	cmp	r3, #0
     224:	d000      	beq.n	228 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     226:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     228:	2000      	movs	r0, #0
     22a:	4b02      	ldr	r3, [pc, #8]	; (234 <sd_mmc_deselect_slot+0x18>)
     22c:	4798      	blx	r3
}
     22e:	e7fa      	b.n	226 <sd_mmc_deselect_slot+0xa>
     230:	20000340 	.word	0x20000340
     234:	00000e25 	.word	0x00000e25

00000238 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     238:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     23a:	2204      	movs	r2, #4
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <sd_mmc_init+0x14>)
     23e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     240:	32fb      	adds	r2, #251	; 0xfb
     242:	4b03      	ldr	r3, [pc, #12]	; (250 <sd_mmc_init+0x18>)
     244:	701a      	strb	r2, [r3, #0]
	driver_init();
     246:	4b03      	ldr	r3, [pc, #12]	; (254 <sd_mmc_init+0x1c>)
     248:	4798      	blx	r3
}
     24a:	bd10      	pop	{r4, pc}
     24c:	2000031c 	.word	0x2000031c
     250:	20000340 	.word	0x20000340
     254:	00000cd1 	.word	0x00000cd1

00000258 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	46c6      	mov	lr, r8
     25c:	b500      	push	{lr}
     25e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     260:	4bcb      	ldr	r3, [pc, #812]	; (590 <sd_mmc_check+0x338>)
     262:	4798      	blx	r3
     264:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     266:	2801      	cmp	r0, #1
     268:	d006      	beq.n	278 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     26a:	4bca      	ldr	r3, [pc, #808]	; (594 <sd_mmc_check+0x33c>)
     26c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     26e:	0020      	movs	r0, r4
     270:	b008      	add	sp, #32
     272:	bc04      	pop	{r2}
     274:	4690      	mov	r8, r2
     276:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     278:	4bc7      	ldr	r3, [pc, #796]	; (598 <sd_mmc_check+0x340>)
     27a:	681b      	ldr	r3, [r3, #0]
     27c:	2201      	movs	r2, #1
     27e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     280:	2200      	movs	r2, #0
     282:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     284:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     286:	4bc5      	ldr	r3, [pc, #788]	; (59c <sd_mmc_check+0x344>)
     288:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     28a:	2100      	movs	r1, #0
     28c:	2088      	movs	r0, #136	; 0x88
     28e:	0140      	lsls	r0, r0, #5
     290:	4bc3      	ldr	r3, [pc, #780]	; (5a0 <sd_mmc_check+0x348>)
     292:	4798      	blx	r3
     294:	2800      	cmp	r0, #0
     296:	d107      	bne.n	2a8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     298:	4bbf      	ldr	r3, [pc, #764]	; (598 <sd_mmc_check+0x340>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	2203      	movs	r2, #3
     29e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     2a0:	4bbc      	ldr	r3, [pc, #752]	; (594 <sd_mmc_check+0x33c>)
     2a2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     2a4:	2403      	movs	r4, #3
     2a6:	e7e2      	b.n	26e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     2a8:	21d5      	movs	r1, #213	; 0xd5
     2aa:	0049      	lsls	r1, r1, #1
     2ac:	48bd      	ldr	r0, [pc, #756]	; (5a4 <sd_mmc_check+0x34c>)
     2ae:	4bbc      	ldr	r3, [pc, #752]	; (5a0 <sd_mmc_check+0x348>)
     2b0:	4798      	blx	r3
	*v2 = 0;
     2b2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     2b4:	2800      	cmp	r0, #0
     2b6:	d125      	bne.n	304 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     2b8:	4bb7      	ldr	r3, [pc, #732]	; (598 <sd_mmc_check+0x340>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	7adb      	ldrb	r3, [r3, #11]
     2be:	07db      	lsls	r3, r3, #31
     2c0:	d500      	bpl.n	2c4 <sd_mmc_check+0x6c>
     2c2:	e1eb      	b.n	69c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     2c4:	4bb4      	ldr	r3, [pc, #720]	; (598 <sd_mmc_check+0x340>)
     2c6:	681b      	ldr	r3, [r3, #0]
     2c8:	7ada      	ldrb	r2, [r3, #11]
     2ca:	2309      	movs	r3, #9
     2cc:	4013      	ands	r3, r2
     2ce:	2b01      	cmp	r3, #1
     2d0:	d10f      	bne.n	2f2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     2d2:	2180      	movs	r1, #128	; 0x80
     2d4:	0089      	lsls	r1, r1, #2
     2d6:	48b4      	ldr	r0, [pc, #720]	; (5a8 <sd_mmc_check+0x350>)
     2d8:	4bb1      	ldr	r3, [pc, #708]	; (5a0 <sd_mmc_check+0x348>)
     2da:	4798      	blx	r3
     2dc:	2800      	cmp	r0, #0
     2de:	d0db      	beq.n	298 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     2e0:	4bad      	ldr	r3, [pc, #692]	; (598 <sd_mmc_check+0x340>)
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	7adb      	ldrb	r3, [r3, #11]
     2e6:	07db      	lsls	r3, r3, #31
     2e8:	d503      	bpl.n	2f2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     2ea:	4bb0      	ldr	r3, [pc, #704]	; (5ac <sd_mmc_check+0x354>)
     2ec:	4798      	blx	r3
     2ee:	2800      	cmp	r0, #0
     2f0:	d0d2      	beq.n	298 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     2f2:	4baf      	ldr	r3, [pc, #700]	; (5b0 <sd_mmc_check+0x358>)
     2f4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     2f6:	4ba8      	ldr	r3, [pc, #672]	; (598 <sd_mmc_check+0x340>)
     2f8:	681b      	ldr	r3, [r3, #0]
     2fa:	2200      	movs	r2, #0
     2fc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     2fe:	4ba5      	ldr	r3, [pc, #660]	; (594 <sd_mmc_check+0x33c>)
     300:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     302:	e7b4      	b.n	26e <sd_mmc_check+0x16>
	resp = driver_get_response();
     304:	4bab      	ldr	r3, [pc, #684]	; (5b4 <sd_mmc_check+0x35c>)
     306:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     308:	1c43      	adds	r3, r0, #1
     30a:	d100      	bne.n	30e <sd_mmc_check+0xb6>
     30c:	e1c4      	b.n	698 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     30e:	0500      	lsls	r0, r0, #20
     310:	0d00      	lsrs	r0, r0, #20
     312:	23d5      	movs	r3, #213	; 0xd5
     314:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     316:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     318:	4298      	cmp	r0, r3
     31a:	d1bd      	bne.n	298 <sd_mmc_check+0x40>
     31c:	e7cc      	b.n	2b8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     31e:	2100      	movs	r1, #0
     320:	48a5      	ldr	r0, [pc, #660]	; (5b8 <sd_mmc_check+0x360>)
     322:	4b9f      	ldr	r3, [pc, #636]	; (5a0 <sd_mmc_check+0x348>)
     324:	4798      	blx	r3
     326:	2800      	cmp	r0, #0
     328:	d119      	bne.n	35e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     32a:	4b9b      	ldr	r3, [pc, #620]	; (598 <sd_mmc_check+0x340>)
     32c:	681b      	ldr	r3, [r3, #0]
     32e:	2202      	movs	r2, #2
     330:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     332:	2100      	movs	r1, #0
     334:	2088      	movs	r0, #136	; 0x88
     336:	0140      	lsls	r0, r0, #5
     338:	4b99      	ldr	r3, [pc, #612]	; (5a0 <sd_mmc_check+0x348>)
     33a:	4798      	blx	r3
     33c:	2800      	cmp	r0, #0
     33e:	d0ab      	beq.n	298 <sd_mmc_check+0x40>
     340:	4d9e      	ldr	r5, [pc, #632]	; (5bc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     342:	4f97      	ldr	r7, [pc, #604]	; (5a0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     344:	4e9b      	ldr	r6, [pc, #620]	; (5b4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     346:	2100      	movs	r1, #0
     348:	489d      	ldr	r0, [pc, #628]	; (5c0 <sd_mmc_check+0x368>)
     34a:	47b8      	blx	r7
     34c:	2800      	cmp	r0, #0
     34e:	d0a3      	beq.n	298 <sd_mmc_check+0x40>
		resp = driver_get_response();
     350:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     352:	07c3      	lsls	r3, r0, #31
     354:	d57d      	bpl.n	452 <sd_mmc_check+0x1fa>
     356:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     358:	2d00      	cmp	r5, #0
     35a:	d1f4      	bne.n	346 <sd_mmc_check+0xee>
     35c:	e79c      	b.n	298 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     35e:	4b95      	ldr	r3, [pc, #596]	; (5b4 <sd_mmc_check+0x35c>)
     360:	4798      	blx	r3
     362:	0043      	lsls	r3, r0, #1
     364:	d505      	bpl.n	372 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     366:	4b8c      	ldr	r3, [pc, #560]	; (598 <sd_mmc_check+0x340>)
     368:	681a      	ldr	r2, [r3, #0]
     36a:	7ad3      	ldrb	r3, [r2, #11]
     36c:	2108      	movs	r1, #8
     36e:	430b      	orrs	r3, r1
     370:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     372:	2100      	movs	r1, #0
     374:	4893      	ldr	r0, [pc, #588]	; (5c4 <sd_mmc_check+0x36c>)
     376:	4b8a      	ldr	r3, [pc, #552]	; (5a0 <sd_mmc_check+0x348>)
     378:	4798      	blx	r3
     37a:	2800      	cmp	r0, #0
     37c:	d08c      	beq.n	298 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     37e:	4b86      	ldr	r3, [pc, #536]	; (598 <sd_mmc_check+0x340>)
     380:	681b      	ldr	r3, [r3, #0]
     382:	7adb      	ldrb	r3, [r3, #11]
     384:	07da      	lsls	r2, r3, #31
     386:	d400      	bmi.n	38a <sd_mmc_check+0x132>
     388:	e1a4      	b.n	6d4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     38a:	4b8f      	ldr	r3, [pc, #572]	; (5c8 <sd_mmc_check+0x370>)
     38c:	4798      	blx	r3
     38e:	2800      	cmp	r0, #0
     390:	d082      	beq.n	298 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     392:	4b81      	ldr	r3, [pc, #516]	; (598 <sd_mmc_check+0x340>)
     394:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     396:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     398:	2107      	movs	r1, #7
     39a:	4019      	ands	r1, r3
     39c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     39e:	488b      	ldr	r0, [pc, #556]	; (5cc <sd_mmc_check+0x374>)
     3a0:	5808      	ldr	r0, [r1, r0]
     3a2:	21fa      	movs	r1, #250	; 0xfa
     3a4:	0089      	lsls	r1, r1, #2
     3a6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     3a8:	065b      	lsls	r3, r3, #25
     3aa:	0f1b      	lsrs	r3, r3, #28
     3ac:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     3ae:	4888      	ldr	r0, [pc, #544]	; (5d0 <sd_mmc_check+0x378>)
     3b0:	581b      	ldr	r3, [r3, r0]
     3b2:	434b      	muls	r3, r1
     3b4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     3b6:	7b93      	ldrb	r3, [r2, #14]
     3b8:	099b      	lsrs	r3, r3, #6
     3ba:	d000      	beq.n	3be <sd_mmc_check+0x166>
     3bc:	e13c      	b.n	638 <sd_mmc_check+0x3e0>
     3be:	7d91      	ldrb	r1, [r2, #22]
     3c0:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     3c2:	7d53      	ldrb	r3, [r2, #21]
     3c4:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3c6:	7d10      	ldrb	r0, [r2, #20]
     3c8:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3ca:	4303      	orrs	r3, r0
     3cc:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     3ce:	7e10      	ldrb	r0, [r2, #24]
     3d0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     3d2:	7dd1      	ldrb	r1, [r2, #23]
     3d4:	0049      	lsls	r1, r1, #1
     3d6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     3d8:	051b      	lsls	r3, r3, #20
     3da:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     3dc:	3301      	adds	r3, #1
     3de:	2107      	movs	r1, #7
     3e0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     3e2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     3e4:	408b      	lsls	r3, r1
     3e6:	7cd0      	ldrb	r0, [r2, #19]
     3e8:	210f      	movs	r1, #15
     3ea:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     3ec:	408b      	lsls	r3, r1
				/ 1024;
     3ee:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     3f0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     3f2:	8911      	ldrh	r1, [r2, #8]
     3f4:	0409      	lsls	r1, r1, #16
     3f6:	4877      	ldr	r0, [pc, #476]	; (5d4 <sd_mmc_check+0x37c>)
     3f8:	4b69      	ldr	r3, [pc, #420]	; (5a0 <sd_mmc_check+0x348>)
     3fa:	4798      	blx	r3
     3fc:	2800      	cmp	r0, #0
     3fe:	d100      	bne.n	402 <sd_mmc_check+0x1aa>
     400:	e74a      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     402:	2301      	movs	r3, #1
     404:	9300      	str	r3, [sp, #0]
     406:	2208      	movs	r2, #8
     408:	2100      	movs	r1, #0
     40a:	4873      	ldr	r0, [pc, #460]	; (5d8 <sd_mmc_check+0x380>)
     40c:	4d73      	ldr	r5, [pc, #460]	; (5dc <sd_mmc_check+0x384>)
     40e:	47a8      	blx	r5
     410:	2800      	cmp	r0, #0
     412:	d100      	bne.n	416 <sd_mmc_check+0x1be>
     414:	e740      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     416:	2101      	movs	r1, #1
     418:	a806      	add	r0, sp, #24
     41a:	4b71      	ldr	r3, [pc, #452]	; (5e0 <sd_mmc_check+0x388>)
     41c:	4798      	blx	r3
     41e:	2800      	cmp	r0, #0
     420:	d100      	bne.n	424 <sd_mmc_check+0x1cc>
     422:	e739      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     424:	4b6f      	ldr	r3, [pc, #444]	; (5e4 <sd_mmc_check+0x38c>)
     426:	4798      	blx	r3
     428:	2800      	cmp	r0, #0
     42a:	d100      	bne.n	42e <sd_mmc_check+0x1d6>
     42c:	e734      	b.n	298 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     42e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     430:	781b      	ldrb	r3, [r3, #0]
     432:	220f      	movs	r2, #15
     434:	4013      	ands	r3, r2
     436:	2b01      	cmp	r3, #1
     438:	d100      	bne.n	43c <sd_mmc_check+0x1e4>
     43a:	e119      	b.n	670 <sd_mmc_check+0x418>
     43c:	2b00      	cmp	r3, #0
     43e:	d100      	bne.n	442 <sd_mmc_check+0x1ea>
     440:	e109      	b.n	656 <sd_mmc_check+0x3fe>
     442:	2b02      	cmp	r3, #2
     444:	d100      	bne.n	448 <sd_mmc_check+0x1f0>
     446:	e118      	b.n	67a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     448:	4b53      	ldr	r3, [pc, #332]	; (598 <sd_mmc_check+0x340>)
     44a:	681b      	ldr	r3, [r3, #0]
     44c:	2210      	movs	r2, #16
     44e:	731a      	strb	r2, [r3, #12]
     450:	e105      	b.n	65e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     452:	2100      	movs	r1, #0
     454:	4858      	ldr	r0, [pc, #352]	; (5b8 <sd_mmc_check+0x360>)
     456:	4b52      	ldr	r3, [pc, #328]	; (5a0 <sd_mmc_check+0x348>)
     458:	4798      	blx	r3
     45a:	2800      	cmp	r0, #0
     45c:	d100      	bne.n	460 <sd_mmc_check+0x208>
     45e:	e71b      	b.n	298 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     460:	4b54      	ldr	r3, [pc, #336]	; (5b4 <sd_mmc_check+0x35c>)
     462:	4798      	blx	r3
     464:	23c0      	movs	r3, #192	; 0xc0
     466:	05db      	lsls	r3, r3, #23
     468:	4018      	ands	r0, r3
     46a:	2380      	movs	r3, #128	; 0x80
     46c:	05db      	lsls	r3, r3, #23
     46e:	4298      	cmp	r0, r3
     470:	d105      	bne.n	47e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     472:	4b49      	ldr	r3, [pc, #292]	; (598 <sd_mmc_check+0x340>)
     474:	681a      	ldr	r2, [r3, #0]
     476:	7ad1      	ldrb	r1, [r2, #11]
     478:	2308      	movs	r3, #8
     47a:	430b      	orrs	r3, r1
     47c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     47e:	2100      	movs	r1, #0
     480:	4850      	ldr	r0, [pc, #320]	; (5c4 <sd_mmc_check+0x36c>)
     482:	4b47      	ldr	r3, [pc, #284]	; (5a0 <sd_mmc_check+0x348>)
     484:	4798      	blx	r3
     486:	2800      	cmp	r0, #0
     488:	d100      	bne.n	48c <sd_mmc_check+0x234>
     48a:	e705      	b.n	298 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     48c:	4b4e      	ldr	r3, [pc, #312]	; (5c8 <sd_mmc_check+0x370>)
     48e:	4798      	blx	r3
     490:	2800      	cmp	r0, #0
     492:	d100      	bne.n	496 <sd_mmc_check+0x23e>
     494:	e700      	b.n	298 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     496:	4b40      	ldr	r3, [pc, #256]	; (598 <sd_mmc_check+0x340>)
     498:	681a      	ldr	r2, [r3, #0]
     49a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     49c:	069b      	lsls	r3, r3, #26
     49e:	0f1b      	lsrs	r3, r3, #28
     4a0:	2b02      	cmp	r3, #2
     4a2:	d100      	bne.n	4a6 <sd_mmc_check+0x24e>
     4a4:	e0a8      	b.n	5f8 <sd_mmc_check+0x3a0>
     4a6:	d907      	bls.n	4b8 <sd_mmc_check+0x260>
     4a8:	2b03      	cmp	r3, #3
     4aa:	d100      	bne.n	4ae <sd_mmc_check+0x256>
     4ac:	e0a7      	b.n	5fe <sd_mmc_check+0x3a6>
     4ae:	2b04      	cmp	r3, #4
     4b0:	d104      	bne.n	4bc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     4b2:	2340      	movs	r3, #64	; 0x40
     4b4:	7313      	strb	r3, [r2, #12]
     4b6:	e003      	b.n	4c0 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     4b8:	2b01      	cmp	r3, #1
     4ba:	d066      	beq.n	58a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     4bc:	2312      	movs	r3, #18
     4be:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4c0:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     4c2:	0659      	lsls	r1, r3, #25
     4c4:	0f09      	lsrs	r1, r1, #28
     4c6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     4c8:	2007      	movs	r0, #7
     4ca:	4003      	ands	r3, r0
     4cc:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     4ce:	483f      	ldr	r0, [pc, #252]	; (5cc <sd_mmc_check+0x374>)
     4d0:	5818      	ldr	r0, [r3, r0]
     4d2:	23fa      	movs	r3, #250	; 0xfa
     4d4:	009b      	lsls	r3, r3, #2
     4d6:	4343      	muls	r3, r0
     4d8:	4843      	ldr	r0, [pc, #268]	; (5e8 <sd_mmc_check+0x390>)
     4da:	5809      	ldr	r1, [r1, r0]
     4dc:	434b      	muls	r3, r1
     4de:	6013      	str	r3, [r2, #0]
     4e0:	7d91      	ldrb	r1, [r2, #22]
     4e2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4e4:	7d53      	ldrb	r3, [r2, #21]
     4e6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4e8:	7d10      	ldrb	r0, [r2, #20]
     4ea:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4ec:	4303      	orrs	r3, r0
     4ee:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     4f0:	051b      	lsls	r3, r3, #20
     4f2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     4f4:	493d      	ldr	r1, [pc, #244]	; (5ec <sd_mmc_check+0x394>)
     4f6:	428b      	cmp	r3, r1
     4f8:	d00f      	beq.n	51a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4fa:	7e10      	ldrb	r0, [r2, #24]
     4fc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4fe:	7dd1      	ldrb	r1, [r2, #23]
     500:	0049      	lsls	r1, r1, #1
     502:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     504:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     506:	2007      	movs	r0, #7
     508:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     50a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     50c:	408b      	lsls	r3, r1
     50e:	7cd1      	ldrb	r1, [r2, #19]
     510:	3008      	adds	r0, #8
     512:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     514:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     516:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     518:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     51a:	7b13      	ldrb	r3, [r2, #12]
     51c:	2b3f      	cmp	r3, #63	; 0x3f
     51e:	d97b      	bls.n	618 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     520:	2100      	movs	r1, #0
     522:	9100      	str	r1, [sp, #0]
     524:	2301      	movs	r3, #1
     526:	2280      	movs	r2, #128	; 0x80
     528:	0092      	lsls	r2, r2, #2
     52a:	4831      	ldr	r0, [pc, #196]	; (5f0 <sd_mmc_check+0x398>)
     52c:	4d2b      	ldr	r5, [pc, #172]	; (5dc <sd_mmc_check+0x384>)
     52e:	47a8      	blx	r5
     530:	2800      	cmp	r0, #0
     532:	d100      	bne.n	536 <sd_mmc_check+0x2de>
     534:	e6b0      	b.n	298 <sd_mmc_check+0x40>
     536:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     538:	4e2e      	ldr	r6, [pc, #184]	; (5f4 <sd_mmc_check+0x39c>)
     53a:	a805      	add	r0, sp, #20
     53c:	47b0      	blx	r6
     53e:	2800      	cmp	r0, #0
     540:	d100      	bne.n	544 <sd_mmc_check+0x2ec>
     542:	e6a9      	b.n	298 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     544:	3501      	adds	r5, #1
     546:	b2ad      	uxth	r5, r5
     548:	2d32      	cmp	r5, #50	; 0x32
     54a:	d1f6      	bne.n	53a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     54c:	4b12      	ldr	r3, [pc, #72]	; (598 <sd_mmc_check+0x340>)
     54e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     550:	7d8a      	ldrb	r2, [r1, #22]
     552:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     554:	7d4b      	ldrb	r3, [r1, #21]
     556:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     558:	7d09      	ldrb	r1, [r1, #20]
     55a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     55c:	430b      	orrs	r3, r1
     55e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     560:	051b      	lsls	r3, r3, #20
     562:	0d1b      	lsrs	r3, r3, #20
     564:	4a21      	ldr	r2, [pc, #132]	; (5ec <sd_mmc_check+0x394>)
     566:	4293      	cmp	r3, r2
     568:	d154      	bne.n	614 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     56a:	4e22      	ldr	r6, [pc, #136]	; (5f4 <sd_mmc_check+0x39c>)
     56c:	a806      	add	r0, sp, #24
     56e:	47b0      	blx	r6
     570:	2800      	cmp	r0, #0
     572:	d100      	bne.n	576 <sd_mmc_check+0x31e>
     574:	e690      	b.n	298 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     576:	3501      	adds	r5, #1
     578:	b2ad      	uxth	r5, r5
     57a:	2d35      	cmp	r5, #53	; 0x35
     57c:	d9f6      	bls.n	56c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     57e:	4b06      	ldr	r3, [pc, #24]	; (598 <sd_mmc_check+0x340>)
     580:	681a      	ldr	r2, [r3, #0]
     582:	9b06      	ldr	r3, [sp, #24]
     584:	085b      	lsrs	r3, r3, #1
     586:	6053      	str	r3, [r2, #4]
     588:	e044      	b.n	614 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     58a:	2314      	movs	r3, #20
     58c:	7313      	strb	r3, [r2, #12]
     58e:	e797      	b.n	4c0 <sd_mmc_check+0x268>
     590:	0000013d 	.word	0x0000013d
     594:	0000021d 	.word	0x0000021d
     598:	20000318 	.word	0x20000318
     59c:	00000e4d 	.word	0x00000e4d
     5a0:	00001015 	.word	0x00001015
     5a4:	00005508 	.word	0x00005508
     5a8:	00001110 	.word	0x00001110
     5ac:	00000199 	.word	0x00000199
     5b0:	00000115 	.word	0x00000115
     5b4:	0000102d 	.word	0x0000102d
     5b8:	0000053a 	.word	0x0000053a
     5bc:	00001bef 	.word	0x00001bef
     5c0:	00001101 	.word	0x00001101
     5c4:	0000113b 	.word	0x0000113b
     5c8:	000001d1 	.word	0x000001d1
     5cc:	0000cd64 	.word	0x0000cd64
     5d0:	0000cd80 	.word	0x0000cd80
     5d4:	00001137 	.word	0x00001137
     5d8:	00081133 	.word	0x00081133
     5dc:	00000e85 	.word	0x00000e85
     5e0:	000010b1 	.word	0x000010b1
     5e4:	0000113d 	.word	0x0000113d
     5e8:	0000cd24 	.word	0x0000cd24
     5ec:	00000fff 	.word	0x00000fff
     5f0:	00081108 	.word	0x00081108
     5f4:	00001039 	.word	0x00001039
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     5f8:	2322      	movs	r3, #34	; 0x22
     5fa:	7313      	strb	r3, [r2, #12]
     5fc:	e760      	b.n	4c0 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     5fe:	2330      	movs	r3, #48	; 0x30
     600:	7313      	strb	r3, [r2, #12]
     602:	e75d      	b.n	4c0 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     604:	a806      	add	r0, sp, #24
     606:	4b36      	ldr	r3, [pc, #216]	; (6e0 <sd_mmc_check+0x488>)
     608:	4798      	blx	r3
     60a:	2800      	cmp	r0, #0
     60c:	d100      	bne.n	610 <sd_mmc_check+0x3b8>
     60e:	e643      	b.n	298 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     610:	3501      	adds	r5, #1
     612:	b2ad      	uxth	r5, r5
     614:	2d7f      	cmp	r5, #127	; 0x7f
     616:	d9f5      	bls.n	604 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     618:	2180      	movs	r1, #128	; 0x80
     61a:	0089      	lsls	r1, r1, #2
     61c:	4831      	ldr	r0, [pc, #196]	; (6e4 <sd_mmc_check+0x48c>)
     61e:	4b32      	ldr	r3, [pc, #200]	; (6e8 <sd_mmc_check+0x490>)
     620:	4798      	blx	r3
     622:	2800      	cmp	r0, #0
     624:	d100      	bne.n	628 <sd_mmc_check+0x3d0>
     626:	e637      	b.n	298 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     628:	4b30      	ldr	r3, [pc, #192]	; (6ec <sd_mmc_check+0x494>)
     62a:	4798      	blx	r3
     62c:	2800      	cmp	r0, #0
     62e:	d100      	bne.n	632 <sd_mmc_check+0x3da>
     630:	e632      	b.n	298 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     632:	4b2f      	ldr	r3, [pc, #188]	; (6f0 <sd_mmc_check+0x498>)
     634:	4798      	blx	r3
     636:	e65e      	b.n	2f6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     638:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     63a:	7d93      	ldrb	r3, [r2, #22]
     63c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     63e:	7d51      	ldrb	r1, [r2, #21]
     640:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     642:	430b      	orrs	r3, r1
     644:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     646:	029b      	lsls	r3, r3, #10
				* 512;
     648:	085b      	lsrs	r3, r3, #1
     64a:	2180      	movs	r1, #128	; 0x80
     64c:	0089      	lsls	r1, r1, #2
     64e:	468c      	mov	ip, r1
     650:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     652:	6053      	str	r3, [r2, #4]
     654:	e6cd      	b.n	3f2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     656:	4b27      	ldr	r3, [pc, #156]	; (6f4 <sd_mmc_check+0x49c>)
     658:	681b      	ldr	r3, [r3, #0]
     65a:	2210      	movs	r2, #16
     65c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     65e:	4b25      	ldr	r3, [pc, #148]	; (6f4 <sd_mmc_check+0x49c>)
     660:	681b      	ldr	r3, [r3, #0]
     662:	7adb      	ldrb	r3, [r3, #11]
     664:	2209      	movs	r2, #9
     666:	4013      	ands	r3, r2
     668:	2b01      	cmp	r3, #1
     66a:	d000      	beq.n	66e <sd_mmc_check+0x416>
     66c:	e638      	b.n	2e0 <sd_mmc_check+0x88>
     66e:	e630      	b.n	2d2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     670:	4b20      	ldr	r3, [pc, #128]	; (6f4 <sd_mmc_check+0x49c>)
     672:	681b      	ldr	r3, [r3, #0]
     674:	221a      	movs	r2, #26
     676:	731a      	strb	r2, [r3, #12]
     678:	e7f1      	b.n	65e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     67a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     67c:	789b      	ldrb	r3, [r3, #2]
     67e:	09db      	lsrs	r3, r3, #7
     680:	2b01      	cmp	r3, #1
     682:	d104      	bne.n	68e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     684:	4b1b      	ldr	r3, [pc, #108]	; (6f4 <sd_mmc_check+0x49c>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	2230      	movs	r2, #48	; 0x30
     68a:	731a      	strb	r2, [r3, #12]
     68c:	e7e7      	b.n	65e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     68e:	4b19      	ldr	r3, [pc, #100]	; (6f4 <sd_mmc_check+0x49c>)
     690:	681b      	ldr	r3, [r3, #0]
     692:	2220      	movs	r2, #32
     694:	731a      	strb	r2, [r3, #12]
     696:	e7e2      	b.n	65e <sd_mmc_check+0x406>
	*v2 = 0;
     698:	2600      	movs	r6, #0
     69a:	e60d      	b.n	2b8 <sd_mmc_check+0x60>
     69c:	1e73      	subs	r3, r6, #1
     69e:	419e      	sbcs	r6, r3
     6a0:	07b3      	lsls	r3, r6, #30
     6a2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     6a4:	4d14      	ldr	r5, [pc, #80]	; (6f8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     6a6:	4f10      	ldr	r7, [pc, #64]	; (6e8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     6a8:	46b8      	mov	r8, r7
		resp = driver_get_response();
     6aa:	4e14      	ldr	r6, [pc, #80]	; (6fc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     6ac:	2100      	movs	r1, #0
     6ae:	4814      	ldr	r0, [pc, #80]	; (700 <sd_mmc_check+0x4a8>)
     6b0:	47b8      	blx	r7
     6b2:	2800      	cmp	r0, #0
     6b4:	d100      	bne.n	6b8 <sd_mmc_check+0x460>
     6b6:	e638      	b.n	32a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     6b8:	9903      	ldr	r1, [sp, #12]
     6ba:	4812      	ldr	r0, [pc, #72]	; (704 <sd_mmc_check+0x4ac>)
     6bc:	47c0      	blx	r8
     6be:	2800      	cmp	r0, #0
     6c0:	d100      	bne.n	6c4 <sd_mmc_check+0x46c>
     6c2:	e632      	b.n	32a <sd_mmc_check+0xd2>
		resp = driver_get_response();
     6c4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     6c6:	07c3      	lsls	r3, r0, #31
     6c8:	d400      	bmi.n	6cc <sd_mmc_check+0x474>
     6ca:	e628      	b.n	31e <sd_mmc_check+0xc6>
     6cc:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     6ce:	2d00      	cmp	r5, #0
     6d0:	d1ec      	bne.n	6ac <sd_mmc_check+0x454>
     6d2:	e62a      	b.n	32a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     6d4:	2209      	movs	r2, #9
     6d6:	4013      	ands	r3, r2
     6d8:	2b01      	cmp	r3, #1
     6da:	d000      	beq.n	6de <sd_mmc_check+0x486>
     6dc:	e609      	b.n	2f2 <sd_mmc_check+0x9a>
     6de:	e5f8      	b.n	2d2 <sd_mmc_check+0x7a>
     6e0:	00001039 	.word	0x00001039
     6e4:	00001110 	.word	0x00001110
     6e8:	00001015 	.word	0x00001015
     6ec:	00000199 	.word	0x00000199
     6f0:	00000115 	.word	0x00000115
     6f4:	20000318 	.word	0x20000318
     6f8:	00001bef 	.word	0x00001bef
     6fc:	0000102d 	.word	0x0000102d
     700:	00001137 	.word	0x00001137
     704:	00001129 	.word	0x00001129

00000708 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     708:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     70a:	4b06      	ldr	r3, [pc, #24]	; (724 <sd_mmc_get_type+0x1c>)
     70c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     70e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     710:	2800      	cmp	r0, #0
     712:	d001      	beq.n	718 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     714:	0018      	movs	r0, r3
     716:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     718:	4b03      	ldr	r3, [pc, #12]	; (728 <sd_mmc_get_type+0x20>)
     71a:	4798      	blx	r3
	return sd_mmc_card->type;
     71c:	4b03      	ldr	r3, [pc, #12]	; (72c <sd_mmc_get_type+0x24>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	7adb      	ldrb	r3, [r3, #11]
     722:	e7f7      	b.n	714 <sd_mmc_get_type+0xc>
     724:	0000013d 	.word	0x0000013d
     728:	0000021d 	.word	0x0000021d
     72c:	20000318 	.word	0x20000318

00000730 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     730:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     732:	4b06      	ldr	r3, [pc, #24]	; (74c <sd_mmc_get_capacity+0x1c>)
     734:	4798      	blx	r3
		return 0;
     736:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     738:	2800      	cmp	r0, #0
     73a:	d001      	beq.n	740 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     73c:	0018      	movs	r0, r3
     73e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     740:	4b03      	ldr	r3, [pc, #12]	; (750 <sd_mmc_get_capacity+0x20>)
     742:	4798      	blx	r3
	return sd_mmc_card->capacity;
     744:	4b03      	ldr	r3, [pc, #12]	; (754 <sd_mmc_get_capacity+0x24>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	685b      	ldr	r3, [r3, #4]
     74a:	e7f7      	b.n	73c <sd_mmc_get_capacity+0xc>
     74c:	0000013d 	.word	0x0000013d
     750:	0000021d 	.word	0x0000021d
     754:	20000318 	.word	0x20000318

00000758 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     758:	2000      	movs	r0, #0
     75a:	4770      	bx	lr

0000075c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     75c:	b570      	push	{r4, r5, r6, lr}
     75e:	b082      	sub	sp, #8
     760:	000e      	movs	r6, r1
     762:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     764:	4b16      	ldr	r3, [pc, #88]	; (7c0 <sd_mmc_init_read_blocks+0x64>)
     766:	4798      	blx	r3
     768:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     76a:	d002      	beq.n	772 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     76c:	0020      	movs	r0, r4
     76e:	b002      	add	sp, #8
     770:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     772:	4b14      	ldr	r3, [pc, #80]	; (7c4 <sd_mmc_init_read_blocks+0x68>)
     774:	4798      	blx	r3
     776:	2800      	cmp	r0, #0
     778:	d017      	beq.n	7aa <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     77a:	2d01      	cmp	r5, #1
     77c:	d919      	bls.n	7b2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     77e:	4812      	ldr	r0, [pc, #72]	; (7c8 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     780:	4b12      	ldr	r3, [pc, #72]	; (7cc <sd_mmc_init_read_blocks+0x70>)
     782:	681b      	ldr	r3, [r3, #0]
     784:	7adb      	ldrb	r3, [r3, #11]
     786:	071b      	lsls	r3, r3, #28
     788:	d400      	bmi.n	78c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     78a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     78c:	2301      	movs	r3, #1
     78e:	9300      	str	r3, [sp, #0]
     790:	002b      	movs	r3, r5
     792:	2280      	movs	r2, #128	; 0x80
     794:	0092      	lsls	r2, r2, #2
     796:	0031      	movs	r1, r6
     798:	4e0d      	ldr	r6, [pc, #52]	; (7d0 <sd_mmc_init_read_blocks+0x74>)
     79a:	47b0      	blx	r6
     79c:	2800      	cmp	r0, #0
     79e:	d00a      	beq.n	7b6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     7a0:	4b0c      	ldr	r3, [pc, #48]	; (7d4 <sd_mmc_init_read_blocks+0x78>)
     7a2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     7a4:	4b0c      	ldr	r3, [pc, #48]	; (7d8 <sd_mmc_init_read_blocks+0x7c>)
     7a6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     7a8:	e7e0      	b.n	76c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     7aa:	4b0c      	ldr	r3, [pc, #48]	; (7dc <sd_mmc_init_read_blocks+0x80>)
     7ac:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     7ae:	3405      	adds	r4, #5
     7b0:	e7dc      	b.n	76c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     7b2:	480b      	ldr	r0, [pc, #44]	; (7e0 <sd_mmc_init_read_blocks+0x84>)
     7b4:	e7e4      	b.n	780 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     7b6:	4b09      	ldr	r3, [pc, #36]	; (7dc <sd_mmc_init_read_blocks+0x80>)
     7b8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     7ba:	2405      	movs	r4, #5
     7bc:	e7d6      	b.n	76c <sd_mmc_init_read_blocks+0x10>
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	0000013d 	.word	0x0000013d
     7c4:	00000199 	.word	0x00000199
     7c8:	00101112 	.word	0x00101112
     7cc:	20000318 	.word	0x20000318
     7d0:	00000e85 	.word	0x00000e85
     7d4:	2000033c 	.word	0x2000033c
     7d8:	2000033e 	.word	0x2000033e
     7dc:	0000021d 	.word	0x0000021d
     7e0:	00081111 	.word	0x00081111

000007e4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     7e4:	b510      	push	{r4, lr}
     7e6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     7e8:	4b07      	ldr	r3, [pc, #28]	; (808 <sd_mmc_start_read_blocks+0x24>)
     7ea:	4798      	blx	r3
     7ec:	2800      	cmp	r0, #0
     7ee:	d104      	bne.n	7fa <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     7f0:	2200      	movs	r2, #0
     7f2:	4b06      	ldr	r3, [pc, #24]	; (80c <sd_mmc_start_read_blocks+0x28>)
     7f4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     7f6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     7f8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     7fa:	4a04      	ldr	r2, [pc, #16]	; (80c <sd_mmc_start_read_blocks+0x28>)
     7fc:	8813      	ldrh	r3, [r2, #0]
     7fe:	1b1c      	subs	r4, r3, r4
     800:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     802:	2000      	movs	r0, #0
     804:	e7f8      	b.n	7f8 <sd_mmc_start_read_blocks+0x14>
     806:	46c0      	nop			; (mov r8, r8)
     808:	000010b1 	.word	0x000010b1
     80c:	2000033c 	.word	0x2000033c

00000810 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     810:	b510      	push	{r4, lr}
     812:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     814:	4b14      	ldr	r3, [pc, #80]	; (868 <sd_mmc_wait_end_of_read_blocks+0x58>)
     816:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     818:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     81a:	2800      	cmp	r0, #0
     81c:	d101      	bne.n	822 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     81e:	0018      	movs	r0, r3
     820:	bd10      	pop	{r4, pc}
	if (abort) {
     822:	2c00      	cmp	r4, #0
     824:	d010      	beq.n	848 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     826:	2200      	movs	r2, #0
     828:	4b10      	ldr	r3, [pc, #64]	; (86c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     82a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     82c:	4b10      	ldr	r3, [pc, #64]	; (870 <sd_mmc_wait_end_of_read_blocks+0x60>)
     82e:	881b      	ldrh	r3, [r3, #0]
     830:	2b01      	cmp	r3, #1
     832:	d00f      	beq.n	854 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     834:	2100      	movs	r1, #0
     836:	480f      	ldr	r0, [pc, #60]	; (874 <sd_mmc_wait_end_of_read_blocks+0x64>)
     838:	4b0f      	ldr	r3, [pc, #60]	; (878 <sd_mmc_wait_end_of_read_blocks+0x68>)
     83a:	4798      	blx	r3
     83c:	2800      	cmp	r0, #0
     83e:	d00d      	beq.n	85c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     840:	4b0e      	ldr	r3, [pc, #56]	; (87c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     842:	4798      	blx	r3
	return SD_MMC_OK;
     844:	2300      	movs	r3, #0
     846:	e7ea      	b.n	81e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     848:	4b08      	ldr	r3, [pc, #32]	; (86c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     84a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     84c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     84e:	2a00      	cmp	r2, #0
     850:	d0ec      	beq.n	82c <sd_mmc_wait_end_of_read_blocks+0x1c>
     852:	e7e4      	b.n	81e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     854:	4b09      	ldr	r3, [pc, #36]	; (87c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     856:	4798      	blx	r3
		return SD_MMC_OK;
     858:	2300      	movs	r3, #0
     85a:	e7e0      	b.n	81e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     85c:	2100      	movs	r1, #0
     85e:	4805      	ldr	r0, [pc, #20]	; (874 <sd_mmc_wait_end_of_read_blocks+0x64>)
     860:	4b05      	ldr	r3, [pc, #20]	; (878 <sd_mmc_wait_end_of_read_blocks+0x68>)
     862:	4798      	blx	r3
     864:	e7ec      	b.n	840 <sd_mmc_wait_end_of_read_blocks+0x30>
     866:	46c0      	nop			; (mov r8, r8)
     868:	0000113d 	.word	0x0000113d
     86c:	2000033c 	.word	0x2000033c
     870:	2000033e 	.word	0x2000033e
     874:	0000310c 	.word	0x0000310c
     878:	00001015 	.word	0x00001015
     87c:	0000021d 	.word	0x0000021d

00000880 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     880:	b570      	push	{r4, r5, r6, lr}
     882:	b082      	sub	sp, #8
     884:	000e      	movs	r6, r1
     886:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     888:	4b11      	ldr	r3, [pc, #68]	; (8d0 <sd_mmc_init_write_blocks+0x50>)
     88a:	4798      	blx	r3
     88c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     88e:	d116      	bne.n	8be <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     890:	2d01      	cmp	r5, #1
     892:	d917      	bls.n	8c4 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     894:	480f      	ldr	r0, [pc, #60]	; (8d4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     896:	4b10      	ldr	r3, [pc, #64]	; (8d8 <sd_mmc_init_write_blocks+0x58>)
     898:	681b      	ldr	r3, [r3, #0]
     89a:	7adb      	ldrb	r3, [r3, #11]
     89c:	071b      	lsls	r3, r3, #28
     89e:	d400      	bmi.n	8a2 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     8a0:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     8a2:	2301      	movs	r3, #1
     8a4:	9300      	str	r3, [sp, #0]
     8a6:	002b      	movs	r3, r5
     8a8:	2280      	movs	r2, #128	; 0x80
     8aa:	0092      	lsls	r2, r2, #2
     8ac:	0031      	movs	r1, r6
     8ae:	4e0b      	ldr	r6, [pc, #44]	; (8dc <sd_mmc_init_write_blocks+0x5c>)
     8b0:	47b0      	blx	r6
     8b2:	2800      	cmp	r0, #0
     8b4:	d008      	beq.n	8c8 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     8b6:	4b0a      	ldr	r3, [pc, #40]	; (8e0 <sd_mmc_init_write_blocks+0x60>)
     8b8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     8ba:	4b0a      	ldr	r3, [pc, #40]	; (8e4 <sd_mmc_init_write_blocks+0x64>)
     8bc:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     8be:	0020      	movs	r0, r4
     8c0:	b002      	add	sp, #8
     8c2:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     8c4:	4808      	ldr	r0, [pc, #32]	; (8e8 <sd_mmc_init_write_blocks+0x68>)
     8c6:	e7e6      	b.n	896 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     8c8:	4b08      	ldr	r3, [pc, #32]	; (8ec <sd_mmc_init_write_blocks+0x6c>)
     8ca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8cc:	2405      	movs	r4, #5
     8ce:	e7f6      	b.n	8be <sd_mmc_init_write_blocks+0x3e>
     8d0:	0000013d 	.word	0x0000013d
     8d4:	00109119 	.word	0x00109119
     8d8:	20000318 	.word	0x20000318
     8dc:	00000e85 	.word	0x00000e85
     8e0:	2000033c 	.word	0x2000033c
     8e4:	2000033e 	.word	0x2000033e
     8e8:	00089118 	.word	0x00089118
     8ec:	0000021d 	.word	0x0000021d

000008f0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     8f0:	b510      	push	{r4, lr}
     8f2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     8f4:	4b07      	ldr	r3, [pc, #28]	; (914 <sd_mmc_start_write_blocks+0x24>)
     8f6:	4798      	blx	r3
     8f8:	2800      	cmp	r0, #0
     8fa:	d104      	bne.n	906 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     8fc:	2200      	movs	r2, #0
     8fe:	4b06      	ldr	r3, [pc, #24]	; (918 <sd_mmc_start_write_blocks+0x28>)
     900:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     902:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     904:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     906:	4a04      	ldr	r2, [pc, #16]	; (918 <sd_mmc_start_write_blocks+0x28>)
     908:	8813      	ldrh	r3, [r2, #0]
     90a:	1b1c      	subs	r4, r3, r4
     90c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     90e:	2000      	movs	r0, #0
     910:	e7f8      	b.n	904 <sd_mmc_start_write_blocks+0x14>
     912:	46c0      	nop			; (mov r8, r8)
     914:	00001141 	.word	0x00001141
     918:	2000033c 	.word	0x2000033c

0000091c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     91c:	b510      	push	{r4, lr}
     91e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     920:	4b0e      	ldr	r3, [pc, #56]	; (95c <sd_mmc_wait_end_of_write_blocks+0x40>)
     922:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     924:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     926:	2800      	cmp	r0, #0
     928:	d101      	bne.n	92e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     92a:	0018      	movs	r0, r3
     92c:	bd10      	pop	{r4, pc}
	if (abort) {
     92e:	2c00      	cmp	r4, #0
     930:	d00a      	beq.n	948 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     932:	2200      	movs	r2, #0
     934:	4b0a      	ldr	r3, [pc, #40]	; (960 <sd_mmc_wait_end_of_write_blocks+0x44>)
     936:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     938:	4b0a      	ldr	r3, [pc, #40]	; (964 <sd_mmc_wait_end_of_write_blocks+0x48>)
     93a:	881b      	ldrh	r3, [r3, #0]
     93c:	2b01      	cmp	r3, #1
     93e:	d009      	beq.n	954 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     940:	4b09      	ldr	r3, [pc, #36]	; (968 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     942:	4798      	blx	r3
	return SD_MMC_OK;
     944:	2300      	movs	r3, #0
     946:	e7f0      	b.n	92a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     948:	4b05      	ldr	r3, [pc, #20]	; (960 <sd_mmc_wait_end_of_write_blocks+0x44>)
     94a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     94c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     94e:	2a00      	cmp	r2, #0
     950:	d0f2      	beq.n	938 <sd_mmc_wait_end_of_write_blocks+0x1c>
     952:	e7ea      	b.n	92a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     956:	4798      	blx	r3
		return SD_MMC_OK;
     958:	2300      	movs	r3, #0
     95a:	e7e6      	b.n	92a <sd_mmc_wait_end_of_write_blocks+0xe>
     95c:	000011c1 	.word	0x000011c1
     960:	2000033c 	.word	0x2000033c
     964:	2000033e 	.word	0x2000033e
     968:	0000021d 	.word	0x0000021d

0000096c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     96c:	b510      	push	{r4, lr}
     96e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     970:	4b0f      	ldr	r3, [pc, #60]	; (9b0 <sd_mmc_test_unit_ready+0x44>)
     972:	4798      	blx	r3
     974:	2801      	cmp	r0, #1
     976:	d019      	beq.n	9ac <sd_mmc_test_unit_ready+0x40>
     978:	2800      	cmp	r0, #0
     97a:	d003      	beq.n	984 <sd_mmc_test_unit_ready+0x18>
     97c:	2802      	cmp	r0, #2
     97e:	d010      	beq.n	9a2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     980:	2001      	movs	r0, #1
	}
}
     982:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     984:	4b0b      	ldr	r3, [pc, #44]	; (9b4 <sd_mmc_test_unit_ready+0x48>)
     986:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     988:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     98a:	2b00      	cmp	r3, #0
     98c:	d1f9      	bne.n	982 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     98e:	0020      	movs	r0, r4
     990:	4b09      	ldr	r3, [pc, #36]	; (9b8 <sd_mmc_test_unit_ready+0x4c>)
     992:	4798      	blx	r3
     994:	0003      	movs	r3, r0
     996:	2003      	movs	r0, #3
     998:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     99a:	4243      	negs	r3, r0
     99c:	4158      	adcs	r0, r3
     99e:	0040      	lsls	r0, r0, #1
     9a0:	e7ef      	b.n	982 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     9a2:	2200      	movs	r2, #0
     9a4:	4b03      	ldr	r3, [pc, #12]	; (9b4 <sd_mmc_test_unit_ready+0x48>)
     9a6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     9a8:	2002      	movs	r0, #2
     9aa:	e7ea      	b.n	982 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     9ac:	2003      	movs	r0, #3
     9ae:	e7e8      	b.n	982 <sd_mmc_test_unit_ready+0x16>
     9b0:	00000259 	.word	0x00000259
     9b4:	20000344 	.word	0x20000344
     9b8:	00000709 	.word	0x00000709

000009bc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     9bc:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     9be:	2000      	movs	r0, #0
     9c0:	4b01      	ldr	r3, [pc, #4]	; (9c8 <sd_mmc_test_unit_ready_0+0xc>)
     9c2:	4798      	blx	r3
}
     9c4:	bd10      	pop	{r4, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	0000096d 	.word	0x0000096d

000009cc <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     9cc:	b570      	push	{r4, r5, r6, lr}
     9ce:	0004      	movs	r4, r0
     9d0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     9d2:	4b04      	ldr	r3, [pc, #16]	; (9e4 <sd_mmc_read_capacity+0x18>)
     9d4:	4798      	blx	r3
     9d6:	0040      	lsls	r0, r0, #1
     9d8:	3801      	subs	r0, #1
     9da:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     9dc:	0020      	movs	r0, r4
     9de:	4b02      	ldr	r3, [pc, #8]	; (9e8 <sd_mmc_read_capacity+0x1c>)
     9e0:	4798      	blx	r3
}
     9e2:	bd70      	pop	{r4, r5, r6, pc}
     9e4:	00000731 	.word	0x00000731
     9e8:	0000096d 	.word	0x0000096d

000009ec <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     9ec:	b510      	push	{r4, lr}
     9ee:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     9f0:	2000      	movs	r0, #0
     9f2:	4b01      	ldr	r3, [pc, #4]	; (9f8 <sd_mmc_read_capacity_0+0xc>)
     9f4:	4798      	blx	r3
}
     9f6:	bd10      	pop	{r4, pc}
     9f8:	000009cd 	.word	0x000009cd

000009fc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     9fc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     9fe:	2000      	movs	r0, #0
     a00:	4b01      	ldr	r3, [pc, #4]	; (a08 <sd_mmc_wr_protect_0+0xc>)
     a02:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     a04:	bd10      	pop	{r4, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	00000759 	.word	0x00000759

00000a0c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     a0c:	b510      	push	{r4, lr}
     a0e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     a10:	2201      	movs	r2, #1
     a12:	4b0c      	ldr	r3, [pc, #48]	; (a44 <sd_mmc_mem_2_ram+0x38>)
     a14:	4798      	blx	r3
     a16:	2800      	cmp	r0, #0
     a18:	d004      	beq.n	a24 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     a1a:	3802      	subs	r0, #2
     a1c:	4243      	negs	r3, r0
     a1e:	4158      	adcs	r0, r3
     a20:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     a22:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     a24:	2101      	movs	r1, #1
     a26:	0020      	movs	r0, r4
     a28:	4b07      	ldr	r3, [pc, #28]	; (a48 <sd_mmc_mem_2_ram+0x3c>)
     a2a:	4798      	blx	r3
     a2c:	0003      	movs	r3, r0
		return CTRL_FAIL;
     a2e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     a30:	2b00      	cmp	r3, #0
     a32:	d1f6      	bne.n	a22 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     a34:	2000      	movs	r0, #0
     a36:	4b05      	ldr	r3, [pc, #20]	; (a4c <sd_mmc_mem_2_ram+0x40>)
     a38:	4798      	blx	r3
     a3a:	1e43      	subs	r3, r0, #1
     a3c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     a3e:	b2c0      	uxtb	r0, r0
     a40:	e7ef      	b.n	a22 <sd_mmc_mem_2_ram+0x16>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	0000075d 	.word	0x0000075d
     a48:	000007e5 	.word	0x000007e5
     a4c:	00000811 	.word	0x00000811

00000a50 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     a50:	b510      	push	{r4, lr}
     a52:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     a54:	0001      	movs	r1, r0
     a56:	2000      	movs	r0, #0
     a58:	4b01      	ldr	r3, [pc, #4]	; (a60 <sd_mmc_mem_2_ram_0+0x10>)
     a5a:	4798      	blx	r3
}
     a5c:	bd10      	pop	{r4, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	00000a0d 	.word	0x00000a0d

00000a64 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     a64:	b510      	push	{r4, lr}
     a66:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     a68:	2201      	movs	r2, #1
     a6a:	4b0c      	ldr	r3, [pc, #48]	; (a9c <sd_mmc_ram_2_mem+0x38>)
     a6c:	4798      	blx	r3
     a6e:	2800      	cmp	r0, #0
     a70:	d004      	beq.n	a7c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     a72:	3802      	subs	r0, #2
     a74:	4243      	negs	r3, r0
     a76:	4158      	adcs	r0, r3
     a78:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     a7a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     a7c:	2101      	movs	r1, #1
     a7e:	0020      	movs	r0, r4
     a80:	4b07      	ldr	r3, [pc, #28]	; (aa0 <sd_mmc_ram_2_mem+0x3c>)
     a82:	4798      	blx	r3
     a84:	0003      	movs	r3, r0
		return CTRL_FAIL;
     a86:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     a88:	2b00      	cmp	r3, #0
     a8a:	d1f6      	bne.n	a7a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     a8c:	2000      	movs	r0, #0
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <sd_mmc_ram_2_mem+0x40>)
     a90:	4798      	blx	r3
     a92:	1e43      	subs	r3, r0, #1
     a94:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     a96:	b2c0      	uxtb	r0, r0
     a98:	e7ef      	b.n	a7a <sd_mmc_ram_2_mem+0x16>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	00000881 	.word	0x00000881
     aa0:	000008f1 	.word	0x000008f1
     aa4:	0000091d 	.word	0x0000091d

00000aa8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     aa8:	b510      	push	{r4, lr}
     aaa:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     aac:	0001      	movs	r1, r0
     aae:	2000      	movs	r0, #0
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <sd_mmc_ram_2_mem_0+0x10>)
     ab2:	4798      	blx	r3
}
     ab4:	bd10      	pop	{r4, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	00000a65 	.word	0x00000a65

00000abc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     abc:	b500      	push	{lr}
     abe:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     ac0:	466b      	mov	r3, sp
     ac2:	1dd9      	adds	r1, r3, #7
     ac4:	23ff      	movs	r3, #255	; 0xff
     ac6:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     ac8:	2201      	movs	r2, #1
     aca:	480b      	ldr	r0, [pc, #44]	; (af8 <sd_mmc_spi_start_write_block+0x3c>)
     acc:	4b0b      	ldr	r3, [pc, #44]	; (afc <sd_mmc_spi_start_write_block+0x40>)
     ace:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     ad0:	4b0b      	ldr	r3, [pc, #44]	; (b00 <sd_mmc_spi_start_write_block+0x44>)
     ad2:	881b      	ldrh	r3, [r3, #0]
     ad4:	2b01      	cmp	r3, #1
     ad6:	d00a      	beq.n	aee <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     ad8:	22fc      	movs	r2, #252	; 0xfc
     ada:	466b      	mov	r3, sp
     adc:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     ade:	2201      	movs	r2, #1
     ae0:	466b      	mov	r3, sp
     ae2:	1d99      	adds	r1, r3, #6
     ae4:	4804      	ldr	r0, [pc, #16]	; (af8 <sd_mmc_spi_start_write_block+0x3c>)
     ae6:	4b05      	ldr	r3, [pc, #20]	; (afc <sd_mmc_spi_start_write_block+0x40>)
     ae8:	4798      	blx	r3
}
     aea:	b003      	add	sp, #12
     aec:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
     aee:	22fe      	movs	r2, #254	; 0xfe
     af0:	466b      	mov	r3, sp
     af2:	719a      	strb	r2, [r3, #6]
     af4:	e7f3      	b.n	ade <sd_mmc_spi_start_write_block+0x22>
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	20000348 	.word	0x20000348
     afc:	00005091 	.word	0x00005091
     b00:	2000038c 	.word	0x2000038c

00000b04 <sd_mmc_spi_wait_busy>:
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     b08:	466b      	mov	r3, sp
     b0a:	1ddc      	adds	r4, r3, #7
     b0c:	23ff      	movs	r3, #255	; 0xff
     b0e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b10:	4e12      	ldr	r6, [pc, #72]	; (b5c <sd_mmc_spi_wait_busy+0x58>)
     b12:	2201      	movs	r2, #1
     b14:	0021      	movs	r1, r4
     b16:	0030      	movs	r0, r6
     b18:	4d11      	ldr	r5, [pc, #68]	; (b60 <sd_mmc_spi_wait_busy+0x5c>)
     b1a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b1c:	23ff      	movs	r3, #255	; 0xff
     b1e:	2201      	movs	r2, #1
     b20:	0021      	movs	r1, r4
     b22:	0030      	movs	r0, r6
     b24:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b26:	23ff      	movs	r3, #255	; 0xff
     b28:	2201      	movs	r2, #1
     b2a:	0021      	movs	r1, r4
     b2c:	0030      	movs	r0, r6
     b2e:	47a8      	blx	r5
     b30:	4c0c      	ldr	r4, [pc, #48]	; (b64 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     b32:	466b      	mov	r3, sp
     b34:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b36:	4e09      	ldr	r6, [pc, #36]	; (b5c <sd_mmc_spi_wait_busy+0x58>)
     b38:	4f09      	ldr	r7, [pc, #36]	; (b60 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     b3a:	782b      	ldrb	r3, [r5, #0]
     b3c:	2bff      	cmp	r3, #255	; 0xff
     b3e:	d009      	beq.n	b54 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b40:	23ff      	movs	r3, #255	; 0xff
     b42:	2201      	movs	r2, #1
     b44:	0029      	movs	r1, r5
     b46:	0030      	movs	r0, r6
     b48:	47b8      	blx	r7
     b4a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     b4c:	2c00      	cmp	r4, #0
     b4e:	d1f4      	bne.n	b3a <sd_mmc_spi_wait_busy+0x36>
			return false;
     b50:	2000      	movs	r0, #0
     b52:	e000      	b.n	b56 <sd_mmc_spi_wait_busy+0x52>
	return true;
     b54:	2001      	movs	r0, #1
}
     b56:	b003      	add	sp, #12
     b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	20000348 	.word	0x20000348
     b60:	00004ec9 	.word	0x00004ec9
     b64:	00030d40 	.word	0x00030d40

00000b68 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     b6c:	4b14      	ldr	r3, [pc, #80]	; (bc0 <sd_mmc_spi_stop_multiwrite_block+0x58>)
     b6e:	881c      	ldrh	r4, [r3, #0]
     b70:	2c01      	cmp	r4, #1
     b72:	d023      	beq.n	bbc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     b74:	4b13      	ldr	r3, [pc, #76]	; (bc4 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     b76:	8819      	ldrh	r1, [r3, #0]
     b78:	4b13      	ldr	r3, [pc, #76]	; (bc8 <sd_mmc_spi_stop_multiwrite_block+0x60>)
     b7a:	6818      	ldr	r0, [r3, #0]
     b7c:	4b13      	ldr	r3, [pc, #76]	; (bcc <sd_mmc_spi_stop_multiwrite_block+0x64>)
     b7e:	4798      	blx	r3
		return true; // It is not the End of multi write
     b80:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     b82:	4284      	cmp	r4, r0
     b84:	d902      	bls.n	b8c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     b86:	0018      	movs	r0, r3
     b88:	b002      	add	sp, #8
     b8a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     b8c:	466b      	mov	r3, sp
     b8e:	1ddc      	adds	r4, r3, #7
     b90:	23ff      	movs	r3, #255	; 0xff
     b92:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     b94:	4e0e      	ldr	r6, [pc, #56]	; (bd0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
     b96:	2201      	movs	r2, #1
     b98:	0021      	movs	r1, r4
     b9a:	0030      	movs	r0, r6
     b9c:	4d0d      	ldr	r5, [pc, #52]	; (bd4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     b9e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     ba0:	23fd      	movs	r3, #253	; 0xfd
     ba2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     ba4:	2201      	movs	r2, #1
     ba6:	0021      	movs	r1, r4
     ba8:	0030      	movs	r0, r6
     baa:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     bac:	4b0a      	ldr	r3, [pc, #40]	; (bd8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
     bae:	4798      	blx	r3
     bb0:	1e03      	subs	r3, r0, #0
     bb2:	d1e8      	bne.n	b86 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     bb4:	2105      	movs	r1, #5
     bb6:	4a09      	ldr	r2, [pc, #36]	; (bdc <sd_mmc_spi_stop_multiwrite_block+0x74>)
     bb8:	7011      	strb	r1, [r2, #0]
		return false;
     bba:	e7e4      	b.n	b86 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     bbc:	2301      	movs	r3, #1
     bbe:	e7e2      	b.n	b86 <sd_mmc_spi_stop_multiwrite_block+0x1e>
     bc0:	2000038c 	.word	0x2000038c
     bc4:	20000384 	.word	0x20000384
     bc8:	20000394 	.word	0x20000394
     bcc:	0000b225 	.word	0x0000b225
     bd0:	20000348 	.word	0x20000348
     bd4:	00005091 	.word	0x00005091
     bd8:	00000b05 	.word	0x00000b05
     bdc:	2000038b 	.word	0x2000038b

00000be0 <sd_mmc_spi_start_read_block>:
{
     be0:	b5f0      	push	{r4, r5, r6, r7, lr}
     be2:	b083      	sub	sp, #12
	token = 0;
     be4:	2200      	movs	r2, #0
     be6:	466b      	mov	r3, sp
     be8:	71da      	strb	r2, [r3, #7]
     bea:	4c14      	ldr	r4, [pc, #80]	; (c3c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     bec:	466b      	mov	r3, sp
     bee:	1ddd      	adds	r5, r3, #7
     bf0:	4e13      	ldr	r6, [pc, #76]	; (c40 <sd_mmc_spi_start_read_block+0x60>)
     bf2:	4f14      	ldr	r7, [pc, #80]	; (c44 <sd_mmc_spi_start_read_block+0x64>)
     bf4:	23ff      	movs	r3, #255	; 0xff
     bf6:	2201      	movs	r2, #1
     bf8:	0029      	movs	r1, r5
     bfa:	0030      	movs	r0, r6
     bfc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     bfe:	782b      	ldrb	r3, [r5, #0]
     c00:	220f      	movs	r2, #15
     c02:	0019      	movs	r1, r3
     c04:	4391      	bics	r1, r2
     c06:	1e0a      	subs	r2, r1, #0
     c08:	d009      	beq.n	c1e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     c0a:	2bfe      	cmp	r3, #254	; 0xfe
     c0c:	d013      	beq.n	c36 <sd_mmc_spi_start_read_block+0x56>
     c0e:	3c01      	subs	r4, #1
		if (i-- == 0) {
     c10:	2c00      	cmp	r4, #0
     c12:	d1ef      	bne.n	bf4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     c14:	2204      	movs	r2, #4
     c16:	4b0c      	ldr	r3, [pc, #48]	; (c48 <sd_mmc_spi_start_read_block+0x68>)
     c18:	701a      	strb	r2, [r3, #0]
			return false;
     c1a:	2000      	movs	r0, #0
     c1c:	e00c      	b.n	c38 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     c1e:	075b      	lsls	r3, r3, #29
     c20:	d004      	beq.n	c2c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     c22:	3207      	adds	r2, #7
     c24:	4b08      	ldr	r3, [pc, #32]	; (c48 <sd_mmc_spi_start_read_block+0x68>)
     c26:	701a      	strb	r2, [r3, #0]
			return false;
     c28:	2000      	movs	r0, #0
     c2a:	e005      	b.n	c38 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     c2c:	220b      	movs	r2, #11
     c2e:	4b06      	ldr	r3, [pc, #24]	; (c48 <sd_mmc_spi_start_read_block+0x68>)
     c30:	701a      	strb	r2, [r3, #0]
			return false;
     c32:	2000      	movs	r0, #0
     c34:	e000      	b.n	c38 <sd_mmc_spi_start_read_block+0x58>
	return true;
     c36:	2001      	movs	r0, #1
}
     c38:	b003      	add	sp, #12
     c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c3c:	0007a120 	.word	0x0007a120
     c40:	20000348 	.word	0x20000348
     c44:	00004ec9 	.word	0x00004ec9
     c48:	2000038b 	.word	0x2000038b

00000c4c <sd_mmc_spi_stop_write_block>:
{
     c4c:	b530      	push	{r4, r5, lr}
     c4e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
     c50:	a901      	add	r1, sp, #4
     c52:	2301      	movs	r3, #1
     c54:	425b      	negs	r3, r3
     c56:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
     c58:	4d14      	ldr	r5, [pc, #80]	; (cac <sd_mmc_spi_stop_write_block+0x60>)
     c5a:	2202      	movs	r2, #2
     c5c:	0028      	movs	r0, r5
     c5e:	4b14      	ldr	r3, [pc, #80]	; (cb0 <sd_mmc_spi_stop_write_block+0x64>)
     c60:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
     c62:	466b      	mov	r3, sp
     c64:	1ddc      	adds	r4, r3, #7
     c66:	23ff      	movs	r3, #255	; 0xff
     c68:	2201      	movs	r2, #1
     c6a:	0021      	movs	r1, r4
     c6c:	0028      	movs	r0, r5
     c6e:	4d11      	ldr	r5, [pc, #68]	; (cb4 <sd_mmc_spi_stop_write_block+0x68>)
     c70:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
     c72:	7822      	ldrb	r2, [r4, #0]
     c74:	2311      	movs	r3, #17
     c76:	4013      	ands	r3, r2
     c78:	2b01      	cmp	r3, #1
     c7a:	d005      	beq.n	c88 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     c7c:	2201      	movs	r2, #1
     c7e:	4b0e      	ldr	r3, [pc, #56]	; (cb8 <sd_mmc_spi_stop_write_block+0x6c>)
     c80:	701a      	strb	r2, [r3, #0]
		return false;
     c82:	2000      	movs	r0, #0
}
     c84:	b003      	add	sp, #12
     c86:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
     c88:	231e      	movs	r3, #30
     c8a:	401a      	ands	r2, r3
     c8c:	2a04      	cmp	r2, #4
     c8e:	d00b      	beq.n	ca8 <sd_mmc_spi_stop_write_block+0x5c>
     c90:	2a0a      	cmp	r2, #10
     c92:	d104      	bne.n	c9e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
     c94:	3a02      	subs	r2, #2
     c96:	4b08      	ldr	r3, [pc, #32]	; (cb8 <sd_mmc_spi_stop_write_block+0x6c>)
     c98:	701a      	strb	r2, [r3, #0]
		return false;
     c9a:	2000      	movs	r0, #0
     c9c:	e7f2      	b.n	c84 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
     c9e:	220a      	movs	r2, #10
     ca0:	4b05      	ldr	r3, [pc, #20]	; (cb8 <sd_mmc_spi_stop_write_block+0x6c>)
     ca2:	701a      	strb	r2, [r3, #0]
		return false;
     ca4:	2000      	movs	r0, #0
     ca6:	e7ed      	b.n	c84 <sd_mmc_spi_stop_write_block+0x38>
	return true;
     ca8:	2001      	movs	r0, #1
     caa:	e7eb      	b.n	c84 <sd_mmc_spi_stop_write_block+0x38>
     cac:	20000348 	.word	0x20000348
     cb0:	00005091 	.word	0x00005091
     cb4:	00004ec9 	.word	0x00004ec9
     cb8:	2000038b 	.word	0x2000038b

00000cbc <sd_deinit>:
{
     cbc:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
     cbe:	4802      	ldr	r0, [pc, #8]	; (cc8 <sd_deinit+0xc>)
     cc0:	4b02      	ldr	r3, [pc, #8]	; (ccc <sd_deinit+0x10>)
     cc2:	4798      	blx	r3
}
     cc4:	bd10      	pop	{r4, pc}
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	20000348 	.word	0x20000348
     ccc:	00004bed 	.word	0x00004bed

00000cd0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     cd4:	2300      	movs	r3, #0
     cd6:	4a2d      	ldr	r2, [pc, #180]	; (d8c <sd_mmc_spi_init+0xbc>)
     cd8:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     cda:	ac02      	add	r4, sp, #8
     cdc:	2501      	movs	r5, #1
     cde:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     ce0:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     ce2:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     ce4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     ce6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     ce8:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     cea:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     cec:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     cee:	2224      	movs	r2, #36	; 0x24
     cf0:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     cf2:	3a18      	subs	r2, #24
     cf4:	2100      	movs	r1, #0
     cf6:	a808      	add	r0, sp, #32
     cf8:	4b25      	ldr	r3, [pc, #148]	; (d90 <sd_mmc_spi_init+0xc0>)
     cfa:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
     cfc:	2380      	movs	r3, #128	; 0x80
     cfe:	025b      	lsls	r3, r3, #9
     d00:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
     d02:	4b24      	ldr	r3, [pc, #144]	; (d94 <sd_mmc_spi_init+0xc4>)
     d04:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
     d06:	4b24      	ldr	r3, [pc, #144]	; (d98 <sd_mmc_spi_init+0xc8>)
     d08:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
     d0a:	4b24      	ldr	r3, [pc, #144]	; (d9c <sd_mmc_spi_init+0xcc>)
     d0c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
     d0e:	4b24      	ldr	r3, [pc, #144]	; (da0 <sd_mmc_spi_init+0xd0>)
     d10:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
     d12:	4b24      	ldr	r3, [pc, #144]	; (da4 <sd_mmc_spi_init+0xd4>)
     d14:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
     d16:	4e24      	ldr	r6, [pc, #144]	; (da8 <sd_mmc_spi_init+0xd8>)
     d18:	0022      	movs	r2, r4
     d1a:	4924      	ldr	r1, [pc, #144]	; (dac <sd_mmc_spi_init+0xdc>)
     d1c:	0030      	movs	r0, r6
     d1e:	4b24      	ldr	r3, [pc, #144]	; (db0 <sd_mmc_spi_init+0xe0>)
     d20:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d22:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     d24:	0020      	movs	r0, r4
     d26:	4b23      	ldr	r3, [pc, #140]	; (db4 <sd_mmc_spi_init+0xe4>)
     d28:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d2a:	231f      	movs	r3, #31
     d2c:	4018      	ands	r0, r3
     d2e:	4085      	lsls	r5, r0
     d30:	4b21      	ldr	r3, [pc, #132]	; (db8 <sd_mmc_spi_init+0xe8>)
     d32:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     d34:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     d36:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     d38:	2b00      	cmp	r3, #0
     d3a:	d1fc      	bne.n	d36 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     d3c:	6823      	ldr	r3, [r4, #0]
     d3e:	2202      	movs	r2, #2
     d40:	4313      	orrs	r3, r2
     d42:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     d44:	4a1d      	ldr	r2, [pc, #116]	; (dbc <sd_mmc_spi_init+0xec>)
     d46:	2300      	movs	r3, #0
     d48:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
     d4a:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
     d4c:	491c      	ldr	r1, [pc, #112]	; (dc0 <sd_mmc_spi_init+0xf0>)
     d4e:	7808      	ldrb	r0, [r1, #0]
     d50:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
     d52:	4c1c      	ldr	r4, [pc, #112]	; (dc4 <sd_mmc_spi_init+0xf4>)
     d54:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
     d56:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     d58:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     d5a:	a901      	add	r1, sp, #4
     d5c:	2201      	movs	r2, #1
     d5e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     d60:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     d62:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     d64:	4b18      	ldr	r3, [pc, #96]	; (dc8 <sd_mmc_spi_init+0xf8>)
     d66:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     d68:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d6a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d6c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     d6e:	2900      	cmp	r1, #0
     d70:	d104      	bne.n	d7c <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
     d72:	0953      	lsrs	r3, r2, #5
     d74:	01db      	lsls	r3, r3, #7
     d76:	4915      	ldr	r1, [pc, #84]	; (dcc <sd_mmc_spi_init+0xfc>)
     d78:	468c      	mov	ip, r1
     d7a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d7c:	211f      	movs	r1, #31
     d7e:	4011      	ands	r1, r2
     d80:	2201      	movs	r2, #1
     d82:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d84:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
     d86:	b010      	add	sp, #64	; 0x40
     d88:	bd70      	pop	{r4, r5, r6, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	2000038b 	.word	0x2000038b
     d90:	0000b617 	.word	0x0000b617
     d94:	00100002 	.word	0x00100002
     d98:	00110002 	.word	0x00110002
     d9c:	00120002 	.word	0x00120002
     da0:	00130002 	.word	0x00130002
     da4:	00061a80 	.word	0x00061a80
     da8:	20000348 	.word	0x20000348
     dac:	42000c00 	.word	0x42000c00
     db0:	00004cf1 	.word	0x00004cf1
     db4:	00004b5d 	.word	0x00004b5d
     db8:	e000e100 	.word	0xe000e100
     dbc:	20000398 	.word	0x20000398
     dc0:	20000000 	.word	0x20000000
     dc4:	20000388 	.word	0x20000388
     dc8:	00004549 	.word	0x00004549
     dcc:	41004400 	.word	0x41004400

00000dd0 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
     dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dd2:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     dd4:	2200      	movs	r2, #0
     dd6:	4b0d      	ldr	r3, [pc, #52]	; (e0c <sd_mmc_spi_select_device+0x3c>)
     dd8:	701a      	strb	r2, [r3, #0]
     dda:	000c      	movs	r4, r1
     ddc:	4b0c      	ldr	r3, [pc, #48]	; (e10 <sd_mmc_spi_select_device+0x40>)
     dde:	4299      	cmp	r1, r3
     de0:	d900      	bls.n	de4 <sd_mmc_spi_select_device+0x14>
     de2:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     de4:	4d0b      	ldr	r5, [pc, #44]	; (e14 <sd_mmc_spi_select_device+0x44>)
     de6:	4e0c      	ldr	r6, [pc, #48]	; (e18 <sd_mmc_spi_select_device+0x48>)
     de8:	e001      	b.n	dee <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
     dea:	08e3      	lsrs	r3, r4, #3
     dec:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     dee:	0021      	movs	r1, r4
     df0:	0028      	movs	r0, r5
     df2:	47b0      	blx	r6
     df4:	2817      	cmp	r0, #23
     df6:	d0f8      	beq.n	dea <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
     df8:	0079      	lsls	r1, r7, #1
     dfa:	19cf      	adds	r7, r1, r7
     dfc:	4907      	ldr	r1, [pc, #28]	; (e1c <sd_mmc_spi_select_device+0x4c>)
     dfe:	19c9      	adds	r1, r1, r7
     e00:	2201      	movs	r2, #1
     e02:	4804      	ldr	r0, [pc, #16]	; (e14 <sd_mmc_spi_select_device+0x44>)
     e04:	4b06      	ldr	r3, [pc, #24]	; (e20 <sd_mmc_spi_select_device+0x50>)
     e06:	4798      	blx	r3
}
     e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	2000038b 	.word	0x2000038b
     e10:	00989680 	.word	0x00989680
     e14:	20000348 	.word	0x20000348
     e18:	00004c39 	.word	0x00004c39
     e1c:	20000388 	.word	0x20000388
     e20:	00004f9d 	.word	0x00004f9d

00000e24 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
     e24:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e26:	2200      	movs	r2, #0
     e28:	4b04      	ldr	r3, [pc, #16]	; (e3c <sd_mmc_spi_deselect_device+0x18>)
     e2a:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
     e2c:	0041      	lsls	r1, r0, #1
     e2e:	1808      	adds	r0, r1, r0
     e30:	4903      	ldr	r1, [pc, #12]	; (e40 <sd_mmc_spi_deselect_device+0x1c>)
     e32:	1809      	adds	r1, r1, r0
     e34:	4803      	ldr	r0, [pc, #12]	; (e44 <sd_mmc_spi_deselect_device+0x20>)
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <sd_mmc_spi_deselect_device+0x24>)
     e38:	4798      	blx	r3
}
     e3a:	bd10      	pop	{r4, pc}
     e3c:	2000038b 	.word	0x2000038b
     e40:	20000388 	.word	0x20000388
     e44:	20000348 	.word	0x20000348
     e48:	00004f9d 	.word	0x00004f9d

00000e4c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
     e4c:	b570      	push	{r4, r5, r6, lr}
     e4e:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
     e50:	22ff      	movs	r2, #255	; 0xff
     e52:	466b      	mov	r3, sp
     e54:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e56:	2200      	movs	r2, #0
     e58:	4b07      	ldr	r3, [pc, #28]	; (e78 <sd_mmc_spi_send_clock+0x2c>)
     e5a:	701a      	strb	r2, [r3, #0]
     e5c:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
     e5e:	4e07      	ldr	r6, [pc, #28]	; (e7c <sd_mmc_spi_send_clock+0x30>)
     e60:	4d07      	ldr	r5, [pc, #28]	; (e80 <sd_mmc_spi_send_clock+0x34>)
     e62:	2201      	movs	r2, #1
     e64:	466b      	mov	r3, sp
     e66:	1dd9      	adds	r1, r3, #7
     e68:	0030      	movs	r0, r6
     e6a:	47a8      	blx	r5
     e6c:	3c01      	subs	r4, #1
     e6e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
     e70:	2c00      	cmp	r4, #0
     e72:	d1f6      	bne.n	e62 <sd_mmc_spi_send_clock+0x16>
	}
}
     e74:	b002      	add	sp, #8
     e76:	bd70      	pop	{r4, r5, r6, pc}
     e78:	2000038b 	.word	0x2000038b
     e7c:	20000348 	.word	0x20000348
     e80:	00005091 	.word	0x00005091

00000e84 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
     e84:	b5f0      	push	{r4, r5, r6, r7, lr}
     e86:	46c6      	mov	lr, r8
     e88:	b500      	push	{lr}
     e8a:	b086      	sub	sp, #24
     e8c:	4680      	mov	r8, r0
     e8e:	9200      	str	r2, [sp, #0]
     e90:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
     e92:	22ff      	movs	r2, #255	; 0xff
     e94:	230f      	movs	r3, #15
     e96:	a802      	add	r0, sp, #8
     e98:	4684      	mov	ip, r0
     e9a:	4463      	add	r3, ip
     e9c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e9e:	2200      	movs	r2, #0
     ea0:	4b53      	ldr	r3, [pc, #332]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     ea2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
     ea4:	ab04      	add	r3, sp, #16
     ea6:	323f      	adds	r2, #63	; 0x3f
     ea8:	4640      	mov	r0, r8
     eaa:	4002      	ands	r2, r0
     eac:	2040      	movs	r0, #64	; 0x40
     eae:	4302      	orrs	r2, r0
     eb0:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
     eb2:	0e0a      	lsrs	r2, r1, #24
     eb4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
     eb6:	0c0a      	lsrs	r2, r1, #16
     eb8:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
     eba:	0a0a      	lsrs	r2, r1, #8
     ebc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
     ebe:	7119      	strb	r1, [r3, #4]
     ec0:	2700      	movs	r7, #0
	crc = 0;
     ec2:	2300      	movs	r3, #0
		value = *buf++;
     ec4:	a904      	add	r1, sp, #16
     ec6:	2208      	movs	r2, #8
				crc ^= 0x09;
     ec8:	2409      	movs	r4, #9
     eca:	e011      	b.n	ef0 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
     ecc:	0076      	lsls	r6, r6, #1
     ece:	b2f6      	uxtb	r6, r6
     ed0:	3801      	subs	r0, #1
     ed2:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
     ed4:	2800      	cmp	r0, #0
     ed6:	d008      	beq.n	eea <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
     ed8:	005b      	lsls	r3, r3, #1
     eda:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
     edc:	001d      	movs	r5, r3
     ede:	4075      	eors	r5, r6
     ee0:	062d      	lsls	r5, r5, #24
     ee2:	d5f3      	bpl.n	ecc <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
     ee4:	4063      	eors	r3, r4
     ee6:	b2db      	uxtb	r3, r3
     ee8:	e7f0      	b.n	ecc <sd_mmc_spi_adtc_start+0x48>
     eea:	3701      	adds	r7, #1
	while (size--) {
     eec:	2f05      	cmp	r7, #5
     eee:	d002      	beq.n	ef6 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
     ef0:	5c7e      	ldrb	r6, [r7, r1]
     ef2:	0010      	movs	r0, r2
     ef4:	e7f0      	b.n	ed8 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
     ef6:	005b      	lsls	r3, r3, #1
     ef8:	2201      	movs	r2, #1
     efa:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
     efc:	ac04      	add	r4, sp, #16
     efe:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
     f00:	4e3c      	ldr	r6, [pc, #240]	; (ff4 <sd_mmc_spi_adtc_start+0x170>)
     f02:	2201      	movs	r2, #1
     f04:	210f      	movs	r1, #15
     f06:	ab02      	add	r3, sp, #8
     f08:	469c      	mov	ip, r3
     f0a:	4461      	add	r1, ip
     f0c:	0030      	movs	r0, r6
     f0e:	4f3a      	ldr	r7, [pc, #232]	; (ff8 <sd_mmc_spi_adtc_start+0x174>)
     f10:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
     f12:	2206      	movs	r2, #6
     f14:	0021      	movs	r1, r4
     f16:	0030      	movs	r0, r6
     f18:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
     f1a:	ab02      	add	r3, sp, #8
     f1c:	1dd9      	adds	r1, r3, #7
     f1e:	23ff      	movs	r3, #255	; 0xff
     f20:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     f22:	2201      	movs	r2, #1
     f24:	0030      	movs	r0, r6
     f26:	4e35      	ldr	r6, [pc, #212]	; (ffc <sd_mmc_spi_adtc_start+0x178>)
     f28:	47b0      	blx	r6
     f2a:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     f2c:	ab02      	add	r3, sp, #8
     f2e:	1dde      	adds	r6, r3, #7
     f30:	4f30      	ldr	r7, [pc, #192]	; (ff4 <sd_mmc_spi_adtc_start+0x170>)
     f32:	4d32      	ldr	r5, [pc, #200]	; (ffc <sd_mmc_spi_adtc_start+0x178>)
     f34:	23ff      	movs	r3, #255	; 0xff
     f36:	2201      	movs	r2, #1
     f38:	0031      	movs	r1, r6
     f3a:	0038      	movs	r0, r7
     f3c:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
     f3e:	7833      	ldrb	r3, [r6, #0]
     f40:	b25a      	sxtb	r2, r3
     f42:	2a00      	cmp	r2, #0
     f44:	da0b      	bge.n	f5e <sd_mmc_spi_adtc_start+0xda>
     f46:	3c01      	subs	r4, #1
     f48:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
     f4a:	2c00      	cmp	r4, #0
     f4c:	d1f2      	bne.n	f34 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
     f4e:	2202      	movs	r2, #2
     f50:	4b27      	ldr	r3, [pc, #156]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     f52:	701a      	strb	r2, [r3, #0]
			return false;
     f54:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
     f56:	b006      	add	sp, #24
     f58:	bc04      	pop	{r2}
     f5a:	4690      	mov	r8, r2
     f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
     f5e:	4a28      	ldr	r2, [pc, #160]	; (1000 <sd_mmc_spi_adtc_start+0x17c>)
     f60:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
     f62:	071a      	lsls	r2, r3, #28
     f64:	d41a      	bmi.n	f9c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
     f66:	075a      	lsls	r2, r3, #29
     f68:	d41d      	bmi.n	fa6 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
     f6a:	2201      	movs	r2, #1
     f6c:	4393      	bics	r3, r2
     f6e:	d11f      	bne.n	fb0 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
     f70:	4643      	mov	r3, r8
     f72:	049b      	lsls	r3, r3, #18
     f74:	d420      	bmi.n	fb8 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
     f76:	4643      	mov	r3, r8
     f78:	059b      	lsls	r3, r3, #22
     f7a:	d425      	bmi.n	fc8 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
     f7c:	4643      	mov	r3, r8
     f7e:	055b      	lsls	r3, r3, #21
     f80:	d42b      	bmi.n	fda <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
     f82:	4b20      	ldr	r3, [pc, #128]	; (1004 <sd_mmc_spi_adtc_start+0x180>)
     f84:	466a      	mov	r2, sp
     f86:	8812      	ldrh	r2, [r2, #0]
     f88:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
     f8a:	4b1f      	ldr	r3, [pc, #124]	; (1008 <sd_mmc_spi_adtc_start+0x184>)
     f8c:	466a      	mov	r2, sp
     f8e:	8892      	ldrh	r2, [r2, #4]
     f90:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
     f92:	2200      	movs	r2, #0
     f94:	4b1d      	ldr	r3, [pc, #116]	; (100c <sd_mmc_spi_adtc_start+0x188>)
     f96:	601a      	str	r2, [r3, #0]
	return true; // Command complete
     f98:	2001      	movs	r0, #1
     f9a:	e7dc      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
     f9c:	2206      	movs	r2, #6
     f9e:	4b14      	ldr	r3, [pc, #80]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     fa0:	701a      	strb	r2, [r3, #0]
		return false;
     fa2:	2000      	movs	r0, #0
     fa4:	e7d7      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
     fa6:	2209      	movs	r2, #9
     fa8:	4b11      	ldr	r3, [pc, #68]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     faa:	701a      	strb	r2, [r3, #0]
		return false;
     fac:	2000      	movs	r0, #0
     fae:	e7d2      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     fb0:	4b0f      	ldr	r3, [pc, #60]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     fb2:	701a      	strb	r2, [r3, #0]
		return false;
     fb4:	2000      	movs	r0, #0
     fb6:	e7ce      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
     fb8:	4b15      	ldr	r3, [pc, #84]	; (1010 <sd_mmc_spi_adtc_start+0x18c>)
     fba:	4798      	blx	r3
     fbc:	2800      	cmp	r0, #0
     fbe:	d1da      	bne.n	f76 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
     fc0:	2203      	movs	r2, #3
     fc2:	4b0b      	ldr	r3, [pc, #44]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     fc4:	701a      	strb	r2, [r3, #0]
			return false;
     fc6:	e7c6      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
     fc8:	490d      	ldr	r1, [pc, #52]	; (1000 <sd_mmc_spi_adtc_start+0x17c>)
     fca:	2300      	movs	r3, #0
     fcc:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
     fce:	33ff      	adds	r3, #255	; 0xff
     fd0:	2201      	movs	r2, #1
     fd2:	4808      	ldr	r0, [pc, #32]	; (ff4 <sd_mmc_spi_adtc_start+0x170>)
     fd4:	4e09      	ldr	r6, [pc, #36]	; (ffc <sd_mmc_spi_adtc_start+0x178>)
     fd6:	47b0      	blx	r6
     fd8:	e7d0      	b.n	f7c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
     fda:	4e09      	ldr	r6, [pc, #36]	; (1000 <sd_mmc_spi_adtc_start+0x17c>)
     fdc:	23ff      	movs	r3, #255	; 0xff
     fde:	2204      	movs	r2, #4
     fe0:	0031      	movs	r1, r6
     fe2:	4804      	ldr	r0, [pc, #16]	; (ff4 <sd_mmc_spi_adtc_start+0x170>)
     fe4:	4f05      	ldr	r7, [pc, #20]	; (ffc <sd_mmc_spi_adtc_start+0x178>)
     fe6:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
     fe8:	6833      	ldr	r3, [r6, #0]
     fea:	ba1b      	rev	r3, r3
     fec:	6033      	str	r3, [r6, #0]
     fee:	e7c8      	b.n	f82 <sd_mmc_spi_adtc_start+0xfe>
     ff0:	2000038b 	.word	0x2000038b
     ff4:	20000348 	.word	0x20000348
     ff8:	00005091 	.word	0x00005091
     ffc:	00004ec9 	.word	0x00004ec9
    1000:	20000390 	.word	0x20000390
    1004:	20000384 	.word	0x20000384
    1008:	2000038c 	.word	0x2000038c
    100c:	20000394 	.word	0x20000394
    1010:	00000b05 	.word	0x00000b05

00001014 <sd_mmc_spi_send_cmd>:
{
    1014:	b510      	push	{r4, lr}
    1016:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    1018:	2300      	movs	r3, #0
    101a:	9300      	str	r3, [sp, #0]
    101c:	2200      	movs	r2, #0
    101e:	4c02      	ldr	r4, [pc, #8]	; (1028 <sd_mmc_spi_send_cmd+0x14>)
    1020:	47a0      	blx	r4
}
    1022:	b002      	add	sp, #8
    1024:	bd10      	pop	{r4, pc}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	00000e85 	.word	0x00000e85

0000102c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    102c:	4b01      	ldr	r3, [pc, #4]	; (1034 <sd_mmc_spi_get_response+0x8>)
    102e:	6818      	ldr	r0, [r3, #0]
}
    1030:	4770      	bx	lr
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	20000390 	.word	0x20000390

00001038 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    1038:	b510      	push	{r4, lr}
    103a:	b084      	sub	sp, #16
    103c:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    103e:	2200      	movs	r2, #0
    1040:	4b14      	ldr	r3, [pc, #80]	; (1094 <sd_mmc_spi_read_word+0x5c>)
    1042:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1044:	4b14      	ldr	r3, [pc, #80]	; (1098 <sd_mmc_spi_read_word+0x60>)
    1046:	8819      	ldrh	r1, [r3, #0]
    1048:	4b14      	ldr	r3, [pc, #80]	; (109c <sd_mmc_spi_read_word+0x64>)
    104a:	6818      	ldr	r0, [r3, #0]
    104c:	4b14      	ldr	r3, [pc, #80]	; (10a0 <sd_mmc_spi_read_word+0x68>)
    104e:	4798      	blx	r3
    1050:	2900      	cmp	r1, #0
    1052:	d103      	bne.n	105c <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1054:	4b13      	ldr	r3, [pc, #76]	; (10a4 <sd_mmc_spi_read_word+0x6c>)
    1056:	4798      	blx	r3
    1058:	2800      	cmp	r0, #0
    105a:	d010      	beq.n	107e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    105c:	23ff      	movs	r3, #255	; 0xff
    105e:	2204      	movs	r2, #4
    1060:	a901      	add	r1, sp, #4
    1062:	4811      	ldr	r0, [pc, #68]	; (10a8 <sd_mmc_spi_read_word+0x70>)
    1064:	4c11      	ldr	r4, [pc, #68]	; (10ac <sd_mmc_spi_read_word+0x74>)
    1066:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    1068:	4b0c      	ldr	r3, [pc, #48]	; (109c <sd_mmc_spi_read_word+0x64>)
    106a:	681a      	ldr	r2, [r3, #0]
    106c:	1d10      	adds	r0, r2, #4
    106e:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1070:	4b09      	ldr	r3, [pc, #36]	; (1098 <sd_mmc_spi_read_word+0x60>)
    1072:	8819      	ldrh	r1, [r3, #0]
    1074:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <sd_mmc_spi_read_word+0x68>)
    1076:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1078:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    107a:	2900      	cmp	r1, #0
    107c:	d001      	beq.n	1082 <sd_mmc_spi_read_word+0x4a>
}
    107e:	b004      	add	sp, #16
    1080:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1082:	23ff      	movs	r3, #255	; 0xff
    1084:	2202      	movs	r2, #2
    1086:	a903      	add	r1, sp, #12
    1088:	4807      	ldr	r0, [pc, #28]	; (10a8 <sd_mmc_spi_read_word+0x70>)
    108a:	4c08      	ldr	r4, [pc, #32]	; (10ac <sd_mmc_spi_read_word+0x74>)
    108c:	47a0      	blx	r4
	return true;
    108e:	2001      	movs	r0, #1
    1090:	e7f5      	b.n	107e <sd_mmc_spi_read_word+0x46>
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	2000038b 	.word	0x2000038b
    1098:	20000384 	.word	0x20000384
    109c:	20000394 	.word	0x20000394
    10a0:	0000b331 	.word	0x0000b331
    10a4:	00000be1 	.word	0x00000be1
    10a8:	20000348 	.word	0x20000348
    10ac:	00004ec9 	.word	0x00004ec9

000010b0 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    10b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10b2:	46de      	mov	lr, fp
    10b4:	4657      	mov	r7, sl
    10b6:	4646      	mov	r6, r8
    10b8:	b5c0      	push	{r6, r7, lr}
    10ba:	b082      	sub	sp, #8
    10bc:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    10be:	2200      	movs	r2, #0
    10c0:	4b17      	ldr	r3, [pc, #92]	; (1120 <sd_mmc_spi_start_read_blocks+0x70>)
    10c2:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    10c4:	1e4c      	subs	r4, r1, #1
    10c6:	b2a4      	uxth	r4, r4
    10c8:	2900      	cmp	r1, #0
    10ca:	d026      	beq.n	111a <sd_mmc_spi_start_read_blocks+0x6a>
    10cc:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    10ce:	4b15      	ldr	r3, [pc, #84]	; (1124 <sd_mmc_spi_start_read_blocks+0x74>)
    10d0:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    10d2:	4f15      	ldr	r7, [pc, #84]	; (1128 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    10d4:	47d0      	blx	sl
    10d6:	4680      	mov	r8, r0
    10d8:	2800      	cmp	r0, #0
    10da:	d017      	beq.n	110c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    10dc:	883a      	ldrh	r2, [r7, #0]
    10de:	465b      	mov	r3, fp
    10e0:	1999      	adds	r1, r3, r6
    10e2:	23ff      	movs	r3, #255	; 0xff
    10e4:	4811      	ldr	r0, [pc, #68]	; (112c <sd_mmc_spi_start_read_blocks+0x7c>)
    10e6:	4d12      	ldr	r5, [pc, #72]	; (1130 <sd_mmc_spi_start_read_blocks+0x80>)
    10e8:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    10ea:	883b      	ldrh	r3, [r7, #0]
    10ec:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    10ee:	4a11      	ldr	r2, [pc, #68]	; (1134 <sd_mmc_spi_start_read_blocks+0x84>)
    10f0:	6811      	ldr	r1, [r2, #0]
    10f2:	468c      	mov	ip, r1
    10f4:	4463      	add	r3, ip
    10f6:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    10f8:	23ff      	movs	r3, #255	; 0xff
    10fa:	2202      	movs	r2, #2
    10fc:	a901      	add	r1, sp, #4
    10fe:	480b      	ldr	r0, [pc, #44]	; (112c <sd_mmc_spi_start_read_blocks+0x7c>)
    1100:	47a8      	blx	r5
	while (nb_block--) {
    1102:	3c01      	subs	r4, #1
    1104:	b2a4      	uxth	r4, r4
    1106:	4b0c      	ldr	r3, [pc, #48]	; (1138 <sd_mmc_spi_start_read_blocks+0x88>)
    1108:	429c      	cmp	r4, r3
    110a:	d1e3      	bne.n	10d4 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    110c:	4640      	mov	r0, r8
    110e:	b002      	add	sp, #8
    1110:	bc1c      	pop	{r2, r3, r4}
    1112:	4690      	mov	r8, r2
    1114:	469a      	mov	sl, r3
    1116:	46a3      	mov	fp, r4
    1118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    111a:	2301      	movs	r3, #1
    111c:	4698      	mov	r8, r3
    111e:	e7f5      	b.n	110c <sd_mmc_spi_start_read_blocks+0x5c>
    1120:	2000038b 	.word	0x2000038b
    1124:	00000be1 	.word	0x00000be1
    1128:	20000384 	.word	0x20000384
    112c:	20000348 	.word	0x20000348
    1130:	00004ec9 	.word	0x00004ec9
    1134:	20000394 	.word	0x20000394
    1138:	0000ffff 	.word	0x0000ffff

0000113c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    113c:	2001      	movs	r0, #1
    113e:	4770      	bx	lr

00001140 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1140:	b5f0      	push	{r4, r5, r6, r7, lr}
    1142:	46c6      	mov	lr, r8
    1144:	b500      	push	{lr}
    1146:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1148:	2200      	movs	r2, #0
    114a:	4b15      	ldr	r3, [pc, #84]	; (11a0 <sd_mmc_spi_start_write_blocks+0x60>)
    114c:	701a      	strb	r2, [r3, #0]
	pos = 0;
    114e:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1150:	4f14      	ldr	r7, [pc, #80]	; (11a4 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1152:	4e15      	ldr	r6, [pc, #84]	; (11a8 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1154:	e000      	b.n	1158 <sd_mmc_spi_start_write_blocks+0x18>
{
    1156:	0021      	movs	r1, r4
	while (nb_block--) {
    1158:	1e4c      	subs	r4, r1, #1
    115a:	b2a4      	uxth	r4, r4
    115c:	2900      	cmp	r1, #0
    115e:	d01b      	beq.n	1198 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    1160:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1162:	8832      	ldrh	r2, [r6, #0]
    1164:	4643      	mov	r3, r8
    1166:	1959      	adds	r1, r3, r5
    1168:	4810      	ldr	r0, [pc, #64]	; (11ac <sd_mmc_spi_start_write_blocks+0x6c>)
    116a:	4b11      	ldr	r3, [pc, #68]	; (11b0 <sd_mmc_spi_start_write_blocks+0x70>)
    116c:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    116e:	8833      	ldrh	r3, [r6, #0]
    1170:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1172:	4a10      	ldr	r2, [pc, #64]	; (11b4 <sd_mmc_spi_start_write_blocks+0x74>)
    1174:	6811      	ldr	r1, [r2, #0]
    1176:	468c      	mov	ip, r1
    1178:	4463      	add	r3, ip
    117a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    117c:	4b0e      	ldr	r3, [pc, #56]	; (11b8 <sd_mmc_spi_start_write_blocks+0x78>)
    117e:	4798      	blx	r3
    1180:	2800      	cmp	r0, #0
    1182:	d00a      	beq.n	119a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1184:	2c00      	cmp	r4, #0
    1186:	d0e6      	beq.n	1156 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1188:	4b0c      	ldr	r3, [pc, #48]	; (11bc <sd_mmc_spi_start_write_blocks+0x7c>)
    118a:	4798      	blx	r3
    118c:	2800      	cmp	r0, #0
    118e:	d1e2      	bne.n	1156 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1190:	2205      	movs	r2, #5
    1192:	4b03      	ldr	r3, [pc, #12]	; (11a0 <sd_mmc_spi_start_write_blocks+0x60>)
    1194:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1196:	e000      	b.n	119a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1198:	2001      	movs	r0, #1
}
    119a:	bc04      	pop	{r2}
    119c:	4690      	mov	r8, r2
    119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11a0:	2000038b 	.word	0x2000038b
    11a4:	00000abd 	.word	0x00000abd
    11a8:	20000384 	.word	0x20000384
    11ac:	20000348 	.word	0x20000348
    11b0:	00005091 	.word	0x00005091
    11b4:	20000394 	.word	0x20000394
    11b8:	00000c4d 	.word	0x00000c4d
    11bc:	00000b05 	.word	0x00000b05

000011c0 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    11c0:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    11c2:	4b05      	ldr	r3, [pc, #20]	; (11d8 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    11c4:	4798      	blx	r3
    11c6:	2800      	cmp	r0, #0
    11c8:	d103      	bne.n	11d2 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    11ca:	2205      	movs	r2, #5
    11cc:	4b03      	ldr	r3, [pc, #12]	; (11dc <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    11ce:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    11d0:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    11d2:	4b03      	ldr	r3, [pc, #12]	; (11e0 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    11d4:	4798      	blx	r3
    11d6:	e7fb      	b.n	11d0 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    11d8:	00000b05 	.word	0x00000b05
    11dc:	2000038b 	.word	0x2000038b
    11e0:	00000b69 	.word	0x00000b69

000011e4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    11e4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    11e6:	2000      	movs	r0, #0
    11e8:	4b08      	ldr	r3, [pc, #32]	; (120c <delay_init+0x28>)
    11ea:	4798      	blx	r3
    11ec:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    11ee:	4c08      	ldr	r4, [pc, #32]	; (1210 <delay_init+0x2c>)
    11f0:	21fa      	movs	r1, #250	; 0xfa
    11f2:	0089      	lsls	r1, r1, #2
    11f4:	47a0      	blx	r4
    11f6:	4b07      	ldr	r3, [pc, #28]	; (1214 <delay_init+0x30>)
    11f8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    11fa:	4907      	ldr	r1, [pc, #28]	; (1218 <delay_init+0x34>)
    11fc:	0028      	movs	r0, r5
    11fe:	47a0      	blx	r4
    1200:	4b06      	ldr	r3, [pc, #24]	; (121c <delay_init+0x38>)
    1202:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1204:	2205      	movs	r2, #5
    1206:	4b06      	ldr	r3, [pc, #24]	; (1220 <delay_init+0x3c>)
    1208:	601a      	str	r2, [r3, #0]
}
    120a:	bd70      	pop	{r4, r5, r6, pc}
    120c:	00005dd1 	.word	0x00005dd1
    1210:	0000b225 	.word	0x0000b225
    1214:	20000004 	.word	0x20000004
    1218:	000f4240 	.word	0x000f4240
    121c:	20000008 	.word	0x20000008
    1220:	e000e010 	.word	0xe000e010

00001224 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1224:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1226:	4b08      	ldr	r3, [pc, #32]	; (1248 <delay_cycles_ms+0x24>)
    1228:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    122a:	4a08      	ldr	r2, [pc, #32]	; (124c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    122c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    122e:	2180      	movs	r1, #128	; 0x80
    1230:	0249      	lsls	r1, r1, #9
	while (n--) {
    1232:	3801      	subs	r0, #1
    1234:	d307      	bcc.n	1246 <delay_cycles_ms+0x22>
	if (n > 0) {
    1236:	2c00      	cmp	r4, #0
    1238:	d0fb      	beq.n	1232 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    123a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    123c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    123e:	6813      	ldr	r3, [r2, #0]
    1240:	420b      	tst	r3, r1
    1242:	d0fc      	beq.n	123e <delay_cycles_ms+0x1a>
    1244:	e7f5      	b.n	1232 <delay_cycles_ms+0xe>
	}
}
    1246:	bd30      	pop	{r4, r5, pc}
    1248:	20000004 	.word	0x20000004
    124c:	e000e010 	.word	0xe000e010

00001250 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    1250:	b510      	push	{r4, lr}
	if (gpfIsr) {
    1252:	4b03      	ldr	r3, [pc, #12]	; (1260 <chip_isr+0x10>)
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	2b00      	cmp	r3, #0
    1258:	d000      	beq.n	125c <chip_isr+0xc>
		gpfIsr();
    125a:	4798      	blx	r3
	}
}
    125c:	bd10      	pop	{r4, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	2000039c 	.word	0x2000039c

00001264 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    1264:	b570      	push	{r4, r5, r6, lr}
    1266:	b082      	sub	sp, #8
	gpfIsr = NULL;
    1268:	2300      	movs	r3, #0
    126a:	4a15      	ldr	r2, [pc, #84]	; (12c0 <nm_bsp_init+0x5c>)
    126c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    126e:	ac01      	add	r4, sp, #4
    1270:	2501      	movs	r5, #1
    1272:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1274:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1276:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    1278:	0021      	movs	r1, r4
    127a:	201b      	movs	r0, #27
    127c:	4e11      	ldr	r6, [pc, #68]	; (12c4 <nm_bsp_init+0x60>)
    127e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    1280:	0021      	movs	r1, r4
    1282:	201c      	movs	r0, #28
    1284:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    1286:	0021      	movs	r1, r4
    1288:	2028      	movs	r0, #40	; 0x28
    128a:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    128c:	4b0e      	ldr	r3, [pc, #56]	; (12c8 <nm_bsp_init+0x64>)
    128e:	2280      	movs	r2, #128	; 0x80
    1290:	0552      	lsls	r2, r2, #21
    1292:	615a      	str	r2, [r3, #20]
    1294:	2280      	movs	r2, #128	; 0x80
    1296:	0512      	lsls	r2, r2, #20
    1298:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    129a:	4b0c      	ldr	r3, [pc, #48]	; (12cc <nm_bsp_init+0x68>)
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	421d      	tst	r5, r3
    12a0:	d003      	beq.n	12aa <nm_bsp_init+0x46>
    12a2:	4b0a      	ldr	r3, [pc, #40]	; (12cc <nm_bsp_init+0x68>)
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	079b      	lsls	r3, r3, #30
    12a8:	d401      	bmi.n	12ae <nm_bsp_init+0x4a>
	    delay_init();
    12aa:	4b09      	ldr	r3, [pc, #36]	; (12d0 <nm_bsp_init+0x6c>)
    12ac:	4798      	blx	r3
	cpu_irq_enable();
    12ae:	2201      	movs	r2, #1
    12b0:	4b08      	ldr	r3, [pc, #32]	; (12d4 <nm_bsp_init+0x70>)
    12b2:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    12b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    12b8:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    12ba:	2000      	movs	r0, #0
    12bc:	b002      	add	sp, #8
    12be:	bd70      	pop	{r4, r5, r6, pc}
    12c0:	2000039c 	.word	0x2000039c
    12c4:	00004549 	.word	0x00004549
    12c8:	41004400 	.word	0x41004400
    12cc:	e000e010 	.word	0xe000e010
    12d0:	000011e5 	.word	0x000011e5
    12d4:	2000000e 	.word	0x2000000e

000012d8 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    12d8:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    12da:	1e44      	subs	r4, r0, #1
    12dc:	2800      	cmp	r0, #0
    12de:	d004      	beq.n	12ea <nm_bsp_sleep+0x12>
		delay_ms(1);
    12e0:	4d02      	ldr	r5, [pc, #8]	; (12ec <nm_bsp_sleep+0x14>)
    12e2:	2001      	movs	r0, #1
    12e4:	47a8      	blx	r5
	while (u32TimeMsec--) {
    12e6:	3c01      	subs	r4, #1
    12e8:	d2fb      	bcs.n	12e2 <nm_bsp_sleep+0xa>
	}
}
    12ea:	bd70      	pop	{r4, r5, r6, pc}
    12ec:	00001225 	.word	0x00001225

000012f0 <nm_bsp_reset>:
{
    12f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12f2:	4c07      	ldr	r4, [pc, #28]	; (1310 <nm_bsp_reset+0x20>)
    12f4:	2780      	movs	r7, #128	; 0x80
    12f6:	057f      	lsls	r7, r7, #21
    12f8:	6167      	str	r7, [r4, #20]
    12fa:	2580      	movs	r5, #128	; 0x80
    12fc:	052d      	lsls	r5, r5, #20
    12fe:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    1300:	2001      	movs	r0, #1
    1302:	4e04      	ldr	r6, [pc, #16]	; (1314 <nm_bsp_reset+0x24>)
    1304:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1306:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    1308:	200a      	movs	r0, #10
    130a:	47b0      	blx	r6
    130c:	61a5      	str	r5, [r4, #24]
}
    130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1310:	41004400 	.word	0x41004400
    1314:	000012d9 	.word	0x000012d9

00001318 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    1318:	b510      	push	{r4, lr}
    131a:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    131c:	4b0e      	ldr	r3, [pc, #56]	; (1358 <nm_bsp_register_isr+0x40>)
    131e:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    1320:	ac01      	add	r4, sp, #4
    1322:	0020      	movs	r0, r4
    1324:	4b0d      	ldr	r3, [pc, #52]	; (135c <nm_bsp_register_isr+0x44>)
    1326:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    1328:	2329      	movs	r3, #41	; 0x29
    132a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    132c:	2300      	movs	r3, #0
    132e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1330:	3301      	adds	r3, #1
    1332:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    1334:	3301      	adds	r3, #1
    1336:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    1338:	0021      	movs	r1, r4
    133a:	2009      	movs	r0, #9
    133c:	4b08      	ldr	r3, [pc, #32]	; (1360 <nm_bsp_register_isr+0x48>)
    133e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    1340:	2200      	movs	r2, #0
    1342:	2109      	movs	r1, #9
    1344:	4807      	ldr	r0, [pc, #28]	; (1364 <nm_bsp_register_isr+0x4c>)
    1346:	4b08      	ldr	r3, [pc, #32]	; (1368 <nm_bsp_register_isr+0x50>)
    1348:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    134a:	2100      	movs	r1, #0
    134c:	2009      	movs	r0, #9
    134e:	4b07      	ldr	r3, [pc, #28]	; (136c <nm_bsp_register_isr+0x54>)
    1350:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    1352:	b004      	add	sp, #16
    1354:	bd10      	pop	{r4, pc}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	2000039c 	.word	0x2000039c
    135c:	000042ad 	.word	0x000042ad
    1360:	000042c1 	.word	0x000042c1
    1364:	00001251 	.word	0x00001251
    1368:	00004169 	.word	0x00004169
    136c:	00004195 	.word	0x00004195

00001370 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    1370:	b510      	push	{r4, lr}
	if (u8Enable) {
    1372:	2800      	cmp	r0, #0
    1374:	d104      	bne.n	1380 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    1376:	2100      	movs	r1, #0
    1378:	2009      	movs	r0, #9
    137a:	4b04      	ldr	r3, [pc, #16]	; (138c <nm_bsp_interrupt_ctrl+0x1c>)
    137c:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    137e:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1380:	2100      	movs	r1, #0
    1382:	2009      	movs	r0, #9
    1384:	4b02      	ldr	r3, [pc, #8]	; (1390 <nm_bsp_interrupt_ctrl+0x20>)
    1386:	4798      	blx	r3
    1388:	e7f9      	b.n	137e <nm_bsp_interrupt_ctrl+0xe>
    138a:	46c0      	nop			; (mov r8, r8)
    138c:	000041b5 	.word	0x000041b5
    1390:	00004195 	.word	0x00004195

00001394 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    1394:	b530      	push	{r4, r5, lr}
    1396:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    1398:	4c30      	ldr	r4, [pc, #192]	; (145c <nm_bus_init+0xc8>)
    139a:	230e      	movs	r3, #14
    139c:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    139e:	2300      	movs	r3, #0
    13a0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    13a2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    13a4:	a901      	add	r1, sp, #4
    13a6:	2201      	movs	r2, #1
    13a8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    13aa:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    13ac:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    13ae:	200e      	movs	r0, #14
    13b0:	4b2b      	ldr	r3, [pc, #172]	; (1460 <nm_bus_init+0xcc>)
    13b2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    13b4:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    13b6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    13b8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13ba:	2900      	cmp	r1, #0
    13bc:	d104      	bne.n	13c8 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    13be:	0953      	lsrs	r3, r2, #5
    13c0:	01db      	lsls	r3, r3, #7
    13c2:	4928      	ldr	r1, [pc, #160]	; (1464 <nm_bus_init+0xd0>)
    13c4:	468c      	mov	ip, r1
    13c6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13c8:	211f      	movs	r1, #31
    13ca:	4011      	ands	r1, r2
    13cc:	2201      	movs	r2, #1
    13ce:	0010      	movs	r0, r2
    13d0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    13d2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    13d4:	ac02      	add	r4, sp, #8
    13d6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    13d8:	2300      	movs	r3, #0
    13da:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    13dc:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    13de:	21c0      	movs	r1, #192	; 0xc0
    13e0:	0389      	lsls	r1, r1, #14
    13e2:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    13e4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    13e6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    13e8:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    13ea:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    13ec:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    13ee:	3223      	adds	r2, #35	; 0x23
    13f0:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    13f2:	3a18      	subs	r2, #24
    13f4:	2100      	movs	r1, #0
    13f6:	a808      	add	r0, sp, #32
    13f8:	4b1b      	ldr	r3, [pc, #108]	; (1468 <nm_bus_init+0xd4>)
    13fa:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    13fc:	4b1b      	ldr	r3, [pc, #108]	; (146c <nm_bus_init+0xd8>)
    13fe:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    1400:	4b1b      	ldr	r3, [pc, #108]	; (1470 <nm_bus_init+0xdc>)
    1402:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    1404:	2301      	movs	r3, #1
    1406:	425b      	negs	r3, r3
    1408:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    140a:	4b1a      	ldr	r3, [pc, #104]	; (1474 <nm_bus_init+0xe0>)
    140c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    140e:	4b1a      	ldr	r3, [pc, #104]	; (1478 <nm_bus_init+0xe4>)
    1410:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    1412:	0022      	movs	r2, r4
    1414:	4919      	ldr	r1, [pc, #100]	; (147c <nm_bus_init+0xe8>)
    1416:	481a      	ldr	r0, [pc, #104]	; (1480 <nm_bus_init+0xec>)
    1418:	4b1a      	ldr	r3, [pc, #104]	; (1484 <nm_bus_init+0xf0>)
    141a:	4798      	blx	r3
    141c:	2800      	cmp	r0, #0
    141e:	d11a      	bne.n	1456 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1420:	4d17      	ldr	r5, [pc, #92]	; (1480 <nm_bus_init+0xec>)
    1422:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1424:	0020      	movs	r0, r4
    1426:	4b18      	ldr	r3, [pc, #96]	; (1488 <nm_bus_init+0xf4>)
    1428:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    142a:	231f      	movs	r3, #31
    142c:	4018      	ands	r0, r3
    142e:	3b1e      	subs	r3, #30
    1430:	4083      	lsls	r3, r0
    1432:	4a16      	ldr	r2, [pc, #88]	; (148c <nm_bus_init+0xf8>)
    1434:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1436:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1438:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    143a:	2b00      	cmp	r3, #0
    143c:	d1fc      	bne.n	1438 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    143e:	6823      	ldr	r3, [r4, #0]
    1440:	2202      	movs	r2, #2
    1442:	4313      	orrs	r3, r2
    1444:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    1446:	4b12      	ldr	r3, [pc, #72]	; (1490 <nm_bus_init+0xfc>)
    1448:	4798      	blx	r3
	nm_bsp_sleep(1);
    144a:	2001      	movs	r0, #1
    144c:	4b11      	ldr	r3, [pc, #68]	; (1494 <nm_bus_init+0x100>)
    144e:	4798      	blx	r3
#endif
	return result;
    1450:	2000      	movs	r0, #0
}
    1452:	b011      	add	sp, #68	; 0x44
    1454:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    1456:	2006      	movs	r0, #6
    1458:	4240      	negs	r0, r0
    145a:	e7fa      	b.n	1452 <nm_bus_init+0xbe>
    145c:	20000edc 	.word	0x20000edc
    1460:	00004549 	.word	0x00004549
    1464:	41004400 	.word	0x41004400
    1468:	0000b617 	.word	0x0000b617
    146c:	000c0002 	.word	0x000c0002
    1470:	000d0002 	.word	0x000d0002
    1474:	000f0002 	.word	0x000f0002
    1478:	00b71b00 	.word	0x00b71b00
    147c:	42001000 	.word	0x42001000
    1480:	20000ee0 	.word	0x20000ee0
    1484:	00004cf1 	.word	0x00004cf1
    1488:	00004b5d 	.word	0x00004b5d
    148c:	e000e100 	.word	0xe000e100
    1490:	000012f1 	.word	0x000012f1
    1494:	000012d9 	.word	0x000012d9

00001498 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1498:	b5f0      	push	{r4, r5, r6, r7, lr}
    149a:	46de      	mov	lr, fp
    149c:	4657      	mov	r7, sl
    149e:	464e      	mov	r6, r9
    14a0:	4645      	mov	r5, r8
    14a2:	b5e0      	push	{r5, r6, r7, lr}
    14a4:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    14a6:	2803      	cmp	r0, #3
    14a8:	d000      	beq.n	14ac <nm_bus_ioctl+0x14>
    14aa:	e075      	b.n	1598 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    14ac:	680e      	ldr	r6, [r1, #0]
    14ae:	684d      	ldr	r5, [r1, #4]
    14b0:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    14b2:	2200      	movs	r2, #0
    14b4:	466b      	mov	r3, sp
    14b6:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    14b8:	2d00      	cmp	r5, #0
    14ba:	d027      	beq.n	150c <nm_bus_ioctl+0x74>
    14bc:	2c00      	cmp	r4, #0
    14be:	d065      	beq.n	158c <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    14c0:	2e00      	cmp	r6, #0
    14c2:	d100      	bne.n	14c6 <nm_bus_ioctl+0x2e>
    14c4:	e077      	b.n	15b6 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    14c6:	2300      	movs	r3, #0
    14c8:	4698      	mov	r8, r3
    14ca:	2300      	movs	r3, #0
    14cc:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    14ce:	2201      	movs	r2, #1
    14d0:	493b      	ldr	r1, [pc, #236]	; (15c0 <nm_bus_ioctl+0x128>)
    14d2:	483c      	ldr	r0, [pc, #240]	; (15c4 <nm_bus_ioctl+0x12c>)
    14d4:	4b3c      	ldr	r3, [pc, #240]	; (15c8 <nm_bus_ioctl+0x130>)
    14d6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14d8:	4b3a      	ldr	r3, [pc, #232]	; (15c4 <nm_bus_ioctl+0x12c>)
    14da:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    14dc:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    14de:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14e0:	4699      	mov	r9, r3
			pu8Miso++;
    14e2:	4659      	mov	r1, fp
    14e4:	424b      	negs	r3, r1
    14e6:	4159      	adcs	r1, r3
    14e8:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    14ea:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14ec:	4653      	mov	r3, sl
    14ee:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14f0:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    14f2:	4239      	tst	r1, r7
    14f4:	d0fc      	beq.n	14f0 <nm_bus_ioctl+0x58>
    14f6:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    14f8:	4239      	tst	r1, r7
    14fa:	d0fc      	beq.n	14f6 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14fc:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14fe:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    1500:	4211      	tst	r1, r2
    1502:	d0fc      	beq.n	14fe <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1504:	4649      	mov	r1, r9
    1506:	7989      	ldrb	r1, [r1, #6]
    1508:	468c      	mov	ip, r1
    150a:	e011      	b.n	1530 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    150c:	2e00      	cmp	r6, #0
    150e:	d03a      	beq.n	1586 <nm_bus_ioctl+0xee>
    1510:	2c00      	cmp	r4, #0
    1512:	d03e      	beq.n	1592 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1514:	2300      	movs	r3, #0
    1516:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    1518:	3301      	adds	r3, #1
    151a:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    151c:	466b      	mov	r3, sp
    151e:	1ddd      	adds	r5, r3, #7
    1520:	e7d5      	b.n	14ce <nm_bus_ioctl+0x36>
    1522:	4660      	mov	r0, ip
    1524:	2801      	cmp	r0, #1
    1526:	d00d      	beq.n	1544 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1528:	6a98      	ldr	r0, [r3, #40]	; 0x28
    152a:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    152c:	2900      	cmp	r1, #0
    152e:	d00d      	beq.n	154c <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1530:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1532:	4211      	tst	r1, r2
    1534:	d0fc      	beq.n	1530 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1536:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    1538:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    153a:	4210      	tst	r0, r2
    153c:	d0f1      	beq.n	1522 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    153e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1540:	311e      	adds	r1, #30
    1542:	e7ee      	b.n	1522 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1544:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1546:	05c0      	lsls	r0, r0, #23
    1548:	0dc0      	lsrs	r0, r0, #23
    154a:	e7ef      	b.n	152c <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    154c:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    154e:	3c01      	subs	r4, #1
    1550:	b2a4      	uxth	r4, r4
			pu8Miso++;
    1552:	445d      	add	r5, fp
			pu8Mosi++;
    1554:	4643      	mov	r3, r8
    1556:	4259      	negs	r1, r3
    1558:	414b      	adcs	r3, r1
    155a:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    155c:	2c00      	cmp	r4, #0
    155e:	d1c4      	bne.n	14ea <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1560:	4b18      	ldr	r3, [pc, #96]	; (15c4 <nm_bus_ioctl+0x12c>)
    1562:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    1564:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1566:	7e0b      	ldrb	r3, [r1, #24]
    1568:	4213      	tst	r3, r2
    156a:	d0fc      	beq.n	1566 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    156c:	2200      	movs	r2, #0
    156e:	4914      	ldr	r1, [pc, #80]	; (15c0 <nm_bus_ioctl+0x128>)
    1570:	4814      	ldr	r0, [pc, #80]	; (15c4 <nm_bus_ioctl+0x12c>)
    1572:	4b15      	ldr	r3, [pc, #84]	; (15c8 <nm_bus_ioctl+0x130>)
    1574:	4798      	blx	r3
	return M2M_SUCCESS;
    1576:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    1578:	b003      	add	sp, #12
    157a:	bc3c      	pop	{r2, r3, r4, r5}
    157c:	4690      	mov	r8, r2
    157e:	4699      	mov	r9, r3
    1580:	46a2      	mov	sl, r4
    1582:	46ab      	mov	fp, r5
    1584:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    1586:	200f      	movs	r0, #15
    1588:	4240      	negs	r0, r0
    158a:	e7f5      	b.n	1578 <nm_bus_ioctl+0xe0>
    158c:	200f      	movs	r0, #15
    158e:	4240      	negs	r0, r0
    1590:	e7f2      	b.n	1578 <nm_bus_ioctl+0xe0>
    1592:	200f      	movs	r0, #15
    1594:	4240      	negs	r0, r0
		break;
    1596:	e7ef      	b.n	1578 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    1598:	2283      	movs	r2, #131	; 0x83
    159a:	0052      	lsls	r2, r2, #1
    159c:	490b      	ldr	r1, [pc, #44]	; (15cc <nm_bus_ioctl+0x134>)
    159e:	480c      	ldr	r0, [pc, #48]	; (15d0 <nm_bus_ioctl+0x138>)
    15a0:	4b0c      	ldr	r3, [pc, #48]	; (15d4 <nm_bus_ioctl+0x13c>)
    15a2:	4798      	blx	r3
    15a4:	480c      	ldr	r0, [pc, #48]	; (15d8 <nm_bus_ioctl+0x140>)
    15a6:	4b0d      	ldr	r3, [pc, #52]	; (15dc <nm_bus_ioctl+0x144>)
    15a8:	4798      	blx	r3
    15aa:	200d      	movs	r0, #13
    15ac:	4b0c      	ldr	r3, [pc, #48]	; (15e0 <nm_bus_ioctl+0x148>)
    15ae:	4798      	blx	r3
			s8Ret = -1;
    15b0:	2001      	movs	r0, #1
    15b2:	4240      	negs	r0, r0
	return s8Ret;
    15b4:	e7e0      	b.n	1578 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    15b6:	2301      	movs	r3, #1
    15b8:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    15ba:	466b      	mov	r3, sp
    15bc:	1dde      	adds	r6, r3, #7
    15be:	e784      	b.n	14ca <nm_bus_ioctl+0x32>
    15c0:	20000edc 	.word	0x20000edc
    15c4:	20000ee0 	.word	0x20000ee0
    15c8:	00004f9d 	.word	0x00004f9d
    15cc:	0000cdc0 	.word	0x0000cdc0
    15d0:	0000cdd0 	.word	0x0000cdd0
    15d4:	0000b779 	.word	0x0000b779
    15d8:	0000cde4 	.word	0x0000cde4
    15dc:	0000b895 	.word	0x0000b895
    15e0:	0000b7ad 	.word	0x0000b7ad

000015e4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    15e4:	b530      	push	{r4, r5, lr}
    15e6:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    15e8:	ab01      	add	r3, sp, #4
    15ea:	2200      	movs	r2, #0
    15ec:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    15ee:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    15f0:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15f2:	4d13      	ldr	r5, [pc, #76]	; (1640 <nm_bus_deinit+0x5c>)
    15f4:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    15f6:	0020      	movs	r0, r4
    15f8:	4b12      	ldr	r3, [pc, #72]	; (1644 <nm_bus_deinit+0x60>)
    15fa:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    15fc:	231f      	movs	r3, #31
    15fe:	4018      	ands	r0, r3
    1600:	3b1e      	subs	r3, #30
    1602:	4083      	lsls	r3, r0
    1604:	2280      	movs	r2, #128	; 0x80
    1606:	4910      	ldr	r1, [pc, #64]	; (1648 <nm_bus_deinit+0x64>)
    1608:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    160a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    160c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    160e:	2b00      	cmp	r3, #0
    1610:	d1fc      	bne.n	160c <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1612:	338f      	adds	r3, #143	; 0x8f
    1614:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1616:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1618:	6823      	ldr	r3, [r4, #0]
    161a:	2202      	movs	r2, #2
    161c:	4393      	bics	r3, r2
    161e:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    1620:	a901      	add	r1, sp, #4
    1622:	200c      	movs	r0, #12
    1624:	4c09      	ldr	r4, [pc, #36]	; (164c <nm_bus_deinit+0x68>)
    1626:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    1628:	a901      	add	r1, sp, #4
    162a:	200f      	movs	r0, #15
    162c:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    162e:	a901      	add	r1, sp, #4
    1630:	200d      	movs	r0, #13
    1632:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    1634:	a901      	add	r1, sp, #4
    1636:	200e      	movs	r0, #14
    1638:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    163a:	2000      	movs	r0, #0
    163c:	b003      	add	sp, #12
    163e:	bd30      	pop	{r4, r5, pc}
    1640:	20000ee0 	.word	0x20000ee0
    1644:	00004b5d 	.word	0x00004b5d
    1648:	e000e100 	.word	0xe000e100
    164c:	00004549 	.word	0x00004549

00001650 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    1650:	2a00      	cmp	r2, #0
    1652:	d006      	beq.n	1662 <m2m_memcpy+0x12>
    1654:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    1656:	780b      	ldrb	r3, [r1, #0]
    1658:	7003      	strb	r3, [r0, #0]
		pDst++;
    165a:	3001      	adds	r0, #1
		pSrc++;
    165c:	3101      	adds	r1, #1
	}while(--sz);
    165e:	4290      	cmp	r0, r2
    1660:	d1f9      	bne.n	1656 <m2m_memcpy+0x6>
}
    1662:	4770      	bx	lr

00001664 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    1664:	2a00      	cmp	r2, #0
    1666:	d004      	beq.n	1672 <m2m_memset+0xe>
    1668:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    166a:	7001      	strb	r1, [r0, #0]
		pBuf++;
    166c:	3001      	adds	r0, #1
	}while(--sz);
    166e:	4290      	cmp	r0, r2
    1670:	d1fb      	bne.n	166a <m2m_memset+0x6>
}
    1672:	4770      	bx	lr

00001674 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    1674:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    1676:	7802      	ldrb	r2, [r0, #0]
    1678:	2a00      	cmp	r2, #0
    167a:	d007      	beq.n	168c <m2m_strlen+0x18>
    167c:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    167e:	3001      	adds	r0, #1
    1680:	b280      	uxth	r0, r0
		pcStr++;
    1682:	3301      	adds	r3, #1
	while(*pcStr)
    1684:	781a      	ldrb	r2, [r3, #0]
    1686:	2a00      	cmp	r2, #0
    1688:	d1f9      	bne.n	167e <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    168a:	4770      	bx	lr
	uint16	u16StrLen = 0;
    168c:	2000      	movs	r0, #0
    168e:	e7fc      	b.n	168a <m2m_strlen+0x16>

00001690 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    1690:	4a02      	ldr	r2, [pc, #8]	; (169c <isr+0xc>)
    1692:	78d3      	ldrb	r3, [r2, #3]
    1694:	3301      	adds	r3, #1
    1696:	b2db      	uxtb	r3, r3
    1698:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    169a:	4770      	bx	lr
    169c:	20000f1c 	.word	0x20000f1c

000016a0 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    16a0:	4770      	bx	lr
	...

000016a4 <hif_set_rx_done>:
{
    16a4:	b500      	push	{lr}
    16a6:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    16a8:	2200      	movs	r2, #0
    16aa:	4b0a      	ldr	r3, [pc, #40]	; (16d4 <hif_set_rx_done+0x30>)
    16ac:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    16ae:	2001      	movs	r0, #1
    16b0:	4b09      	ldr	r3, [pc, #36]	; (16d8 <hif_set_rx_done+0x34>)
    16b2:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    16b4:	a901      	add	r1, sp, #4
    16b6:	4809      	ldr	r0, [pc, #36]	; (16dc <hif_set_rx_done+0x38>)
    16b8:	4b09      	ldr	r3, [pc, #36]	; (16e0 <hif_set_rx_done+0x3c>)
    16ba:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    16bc:	2800      	cmp	r0, #0
    16be:	d001      	beq.n	16c4 <hif_set_rx_done+0x20>
}
    16c0:	b003      	add	sp, #12
    16c2:	bd00      	pop	{pc}
	reg |= NBIT1;
    16c4:	2102      	movs	r1, #2
    16c6:	9b01      	ldr	r3, [sp, #4]
    16c8:	4319      	orrs	r1, r3
    16ca:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    16cc:	4803      	ldr	r0, [pc, #12]	; (16dc <hif_set_rx_done+0x38>)
    16ce:	4b05      	ldr	r3, [pc, #20]	; (16e4 <hif_set_rx_done+0x40>)
    16d0:	4798      	blx	r3
    16d2:	e7f5      	b.n	16c0 <hif_set_rx_done+0x1c>
    16d4:	20000f1c 	.word	0x20000f1c
    16d8:	00001371 	.word	0x00001371
    16dc:	00001070 	.word	0x00001070
    16e0:	00002ab5 	.word	0x00002ab5
    16e4:	00002ac1 	.word	0x00002ac1

000016e8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    16e8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    16ea:	4b0c      	ldr	r3, [pc, #48]	; (171c <hif_chip_wake+0x34>)
    16ec:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    16ee:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    16f0:	2b00      	cmp	r3, #0
    16f2:	d10d      	bne.n	1710 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    16f4:	4b09      	ldr	r3, [pc, #36]	; (171c <hif_chip_wake+0x34>)
    16f6:	785b      	ldrb	r3, [r3, #1]
    16f8:	2b00      	cmp	r3, #0
    16fa:	d103      	bne.n	1704 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    16fc:	4b07      	ldr	r3, [pc, #28]	; (171c <hif_chip_wake+0x34>)
    16fe:	781b      	ldrb	r3, [r3, #0]
    1700:	2b00      	cmp	r3, #0
    1702:	d106      	bne.n	1712 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    1704:	4a05      	ldr	r2, [pc, #20]	; (171c <hif_chip_wake+0x34>)
    1706:	7853      	ldrb	r3, [r2, #1]
    1708:	3301      	adds	r3, #1
    170a:	b2db      	uxtb	r3, r3
    170c:	7053      	strb	r3, [r2, #1]
    170e:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    1710:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    1712:	4b03      	ldr	r3, [pc, #12]	; (1720 <hif_chip_wake+0x38>)
    1714:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    1716:	2800      	cmp	r0, #0
    1718:	d0f4      	beq.n	1704 <hif_chip_wake+0x1c>
    171a:	e7f9      	b.n	1710 <hif_chip_wake+0x28>
    171c:	20000f1c 	.word	0x20000f1c
    1720:	0000279d 	.word	0x0000279d

00001724 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    1724:	4b05      	ldr	r3, [pc, #20]	; (173c <hif_chip_sleep_sc+0x18>)
    1726:	785b      	ldrb	r3, [r3, #1]
    1728:	2b00      	cmp	r3, #0
    172a:	d004      	beq.n	1736 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    172c:	4a03      	ldr	r2, [pc, #12]	; (173c <hif_chip_sleep_sc+0x18>)
    172e:	7853      	ldrb	r3, [r2, #1]
    1730:	3b01      	subs	r3, #1
    1732:	b2db      	uxtb	r3, r3
    1734:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    1736:	2000      	movs	r0, #0
    1738:	4770      	bx	lr
    173a:	46c0      	nop			; (mov r8, r8)
    173c:	20000f1c 	.word	0x20000f1c

00001740 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1740:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    1742:	4b0b      	ldr	r3, [pc, #44]	; (1770 <hif_chip_sleep+0x30>)
    1744:	785b      	ldrb	r3, [r3, #1]
    1746:	2b00      	cmp	r3, #0
    1748:	d004      	beq.n	1754 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    174a:	4a09      	ldr	r2, [pc, #36]	; (1770 <hif_chip_sleep+0x30>)
    174c:	7853      	ldrb	r3, [r2, #1]
    174e:	3b01      	subs	r3, #1
    1750:	b2db      	uxtb	r3, r3
    1752:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    1754:	4b06      	ldr	r3, [pc, #24]	; (1770 <hif_chip_sleep+0x30>)
    1756:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    1758:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    175a:	2b00      	cmp	r3, #0
    175c:	d103      	bne.n	1766 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    175e:	4b04      	ldr	r3, [pc, #16]	; (1770 <hif_chip_sleep+0x30>)
    1760:	781b      	ldrb	r3, [r3, #0]
    1762:	2b00      	cmp	r3, #0
    1764:	d100      	bne.n	1768 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    1766:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1768:	4b02      	ldr	r3, [pc, #8]	; (1774 <hif_chip_sleep+0x34>)
    176a:	4798      	blx	r3
    176c:	e7fb      	b.n	1766 <hif_chip_sleep+0x26>
    176e:	46c0      	nop			; (mov r8, r8)
    1770:	20000f1c 	.word	0x20000f1c
    1774:	00002735 	.word	0x00002735

00001778 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1778:	b5f0      	push	{r4, r5, r6, r7, lr}
    177a:	46de      	mov	lr, fp
    177c:	4657      	mov	r7, sl
    177e:	b580      	push	{r7, lr}
    1780:	b089      	sub	sp, #36	; 0x24
    1782:	4683      	mov	fp, r0
    1784:	468a      	mov	sl, r1
    1786:	9201      	str	r2, [sp, #4]
    1788:	9300      	str	r3, [sp, #0]
    178a:	ab10      	add	r3, sp, #64	; 0x40
    178c:	cb80      	ldmia	r3!, {r7}
    178e:	881e      	ldrh	r6, [r3, #0]
    1790:	ab12      	add	r3, sp, #72	; 0x48
    1792:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1794:	227f      	movs	r2, #127	; 0x7f
    1796:	400a      	ands	r2, r1
    1798:	ab07      	add	r3, sp, #28
    179a:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    179c:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    179e:	2208      	movs	r2, #8
    17a0:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    17a2:	2f00      	cmp	r7, #0
    17a4:	d03d      	beq.n	1822 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    17a6:	885a      	ldrh	r2, [r3, #2]
    17a8:	1992      	adds	r2, r2, r6
    17aa:	18aa      	adds	r2, r5, r2
    17ac:	b292      	uxth	r2, r2
    17ae:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    17b0:	4b69      	ldr	r3, [pc, #420]	; (1958 <hif_send+0x1e0>)
    17b2:	4798      	blx	r3
    17b4:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    17b6:	d000      	beq.n	17ba <hif_send+0x42>
    17b8:	e0c1      	b.n	193e <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    17ba:	2300      	movs	r3, #0
    17bc:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    17be:	aa02      	add	r2, sp, #8
    17c0:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    17c2:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    17c4:	9b04      	ldr	r3, [sp, #16]
    17c6:	465a      	mov	r2, fp
    17c8:	431a      	orrs	r2, r3
    17ca:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    17cc:	9a04      	ldr	r2, [sp, #16]
    17ce:	4653      	mov	r3, sl
    17d0:	021b      	lsls	r3, r3, #8
    17d2:	4313      	orrs	r3, r2
    17d4:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    17d6:	ab07      	add	r3, sp, #28
    17d8:	885b      	ldrh	r3, [r3, #2]
    17da:	9a04      	ldr	r2, [sp, #16]
    17dc:	041b      	lsls	r3, r3, #16
    17de:	4313      	orrs	r3, r2
    17e0:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    17e2:	9904      	ldr	r1, [sp, #16]
    17e4:	485d      	ldr	r0, [pc, #372]	; (195c <hif_send+0x1e4>)
    17e6:	4b5e      	ldr	r3, [pc, #376]	; (1960 <hif_send+0x1e8>)
    17e8:	4798      	blx	r3
    17ea:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    17ec:	d157      	bne.n	189e <hif_send+0x126>

		reg = 0UL;
    17ee:	2300      	movs	r3, #0
    17f0:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    17f2:	9b04      	ldr	r3, [sp, #16]
    17f4:	2202      	movs	r2, #2
    17f6:	4313      	orrs	r3, r2
    17f8:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    17fa:	9904      	ldr	r1, [sp, #16]
    17fc:	4859      	ldr	r0, [pc, #356]	; (1964 <hif_send+0x1ec>)
    17fe:	4b58      	ldr	r3, [pc, #352]	; (1960 <hif_send+0x1e8>)
    1800:	4798      	blx	r3
    1802:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    1804:	d14b      	bne.n	189e <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    1806:	2200      	movs	r2, #0
    1808:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    180a:	ab02      	add	r3, sp, #8
    180c:	80da      	strh	r2, [r3, #6]
    180e:	3306      	adds	r3, #6
    1810:	881b      	ldrh	r3, [r3, #0]
    1812:	b29b      	uxth	r3, r3
    1814:	4a54      	ldr	r2, [pc, #336]	; (1968 <hif_send+0x1f0>)
    1816:	4293      	cmp	r3, r2
    1818:	d849      	bhi.n	18ae <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    181a:	4c54      	ldr	r4, [pc, #336]	; (196c <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    181c:	4b54      	ldr	r3, [pc, #336]	; (1970 <hif_send+0x1f8>)
    181e:	469a      	mov	sl, r3
    1820:	e017      	b.n	1852 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    1822:	ab07      	add	r3, sp, #28
    1824:	885a      	ldrh	r2, [r3, #2]
    1826:	9900      	ldr	r1, [sp, #0]
    1828:	468c      	mov	ip, r1
    182a:	4462      	add	r2, ip
    182c:	b292      	uxth	r2, r2
    182e:	805a      	strh	r2, [r3, #2]
    1830:	e7be      	b.n	17b0 <hif_send+0x38>
				nm_bsp_sleep(1);
    1832:	2001      	movs	r0, #1
    1834:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    1836:	9b04      	ldr	r3, [sp, #16]
    1838:	079b      	lsls	r3, r3, #30
    183a:	d528      	bpl.n	188e <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    183c:	ab02      	add	r3, sp, #8
    183e:	88da      	ldrh	r2, [r3, #6]
    1840:	3201      	adds	r2, #1
    1842:	b292      	uxth	r2, r2
    1844:	80da      	strh	r2, [r3, #6]
    1846:	3306      	adds	r3, #6
    1848:	881b      	ldrh	r3, [r3, #0]
    184a:	b29b      	uxth	r3, r3
    184c:	4a46      	ldr	r2, [pc, #280]	; (1968 <hif_send+0x1f0>)
    184e:	4293      	cmp	r3, r2
    1850:	d82d      	bhi.n	18ae <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1852:	a904      	add	r1, sp, #16
    1854:	4843      	ldr	r0, [pc, #268]	; (1964 <hif_send+0x1ec>)
    1856:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    1858:	2800      	cmp	r0, #0
    185a:	d128      	bne.n	18ae <hif_send+0x136>
			if(cnt >= 500) {
    185c:	ab02      	add	r3, sp, #8
    185e:	3306      	adds	r3, #6
    1860:	881b      	ldrh	r3, [r3, #0]
    1862:	b29b      	uxth	r3, r3
    1864:	22f4      	movs	r2, #244	; 0xf4
    1866:	32ff      	adds	r2, #255	; 0xff
    1868:	4293      	cmp	r3, r2
    186a:	d9e4      	bls.n	1836 <hif_send+0xbe>
				if(cnt < 501) {
    186c:	ab02      	add	r3, sp, #8
    186e:	3306      	adds	r3, #6
    1870:	881b      	ldrh	r3, [r3, #0]
    1872:	b29b      	uxth	r3, r3
    1874:	3201      	adds	r2, #1
    1876:	4293      	cmp	r3, r2
    1878:	d8db      	bhi.n	1832 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    187a:	483e      	ldr	r0, [pc, #248]	; (1974 <hif_send+0x1fc>)
    187c:	4b3e      	ldr	r3, [pc, #248]	; (1978 <hif_send+0x200>)
    187e:	4798      	blx	r3
    1880:	483e      	ldr	r0, [pc, #248]	; (197c <hif_send+0x204>)
    1882:	4b3f      	ldr	r3, [pc, #252]	; (1980 <hif_send+0x208>)
    1884:	4798      	blx	r3
    1886:	200d      	movs	r0, #13
    1888:	4b3e      	ldr	r3, [pc, #248]	; (1984 <hif_send+0x20c>)
    188a:	4798      	blx	r3
    188c:	e7d1      	b.n	1832 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    188e:	a905      	add	r1, sp, #20
    1890:	483d      	ldr	r0, [pc, #244]	; (1988 <hif_send+0x210>)
    1892:	4b36      	ldr	r3, [pc, #216]	; (196c <hif_send+0x1f4>)
    1894:	4798      	blx	r3
    1896:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    1898:	d009      	beq.n	18ae <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    189a:	2300      	movs	r3, #0
    189c:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    189e:	4b3b      	ldr	r3, [pc, #236]	; (198c <hif_send+0x214>)
    18a0:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    18a2:	0020      	movs	r0, r4
    18a4:	b009      	add	sp, #36	; 0x24
    18a6:	bc0c      	pop	{r2, r3}
    18a8:	4692      	mov	sl, r2
    18aa:	469b      	mov	fp, r3
    18ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    18ae:	9b05      	ldr	r3, [sp, #20]
    18b0:	2b00      	cmp	r3, #0
    18b2:	d03f      	beq.n	1934 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    18b4:	9b05      	ldr	r3, [sp, #20]
    18b6:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    18b8:	a907      	add	r1, sp, #28
    18ba:	884b      	ldrh	r3, [r1, #2]
    18bc:	b29b      	uxth	r3, r3
    18be:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    18c0:	9806      	ldr	r0, [sp, #24]
    18c2:	2208      	movs	r2, #8
    18c4:	4b32      	ldr	r3, [pc, #200]	; (1990 <hif_send+0x218>)
    18c6:	4798      	blx	r3
    18c8:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    18ca:	d1e8      	bne.n	189e <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    18cc:	9b06      	ldr	r3, [sp, #24]
    18ce:	3308      	adds	r3, #8
    18d0:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    18d2:	9b01      	ldr	r3, [sp, #4]
    18d4:	2b00      	cmp	r3, #0
    18d6:	d00b      	beq.n	18f0 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    18d8:	9806      	ldr	r0, [sp, #24]
    18da:	9a00      	ldr	r2, [sp, #0]
    18dc:	0019      	movs	r1, r3
    18de:	4b2c      	ldr	r3, [pc, #176]	; (1990 <hif_send+0x218>)
    18e0:	4798      	blx	r3
    18e2:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    18e4:	d1db      	bne.n	189e <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    18e6:	9b06      	ldr	r3, [sp, #24]
    18e8:	9a00      	ldr	r2, [sp, #0]
    18ea:	4694      	mov	ip, r2
    18ec:	4463      	add	r3, ip
    18ee:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    18f0:	2f00      	cmp	r7, #0
    18f2:	d00e      	beq.n	1912 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    18f4:	9b06      	ldr	r3, [sp, #24]
    18f6:	9a00      	ldr	r2, [sp, #0]
    18f8:	1aad      	subs	r5, r5, r2
    18fa:	18ed      	adds	r5, r5, r3
    18fc:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    18fe:	9806      	ldr	r0, [sp, #24]
    1900:	0032      	movs	r2, r6
    1902:	0039      	movs	r1, r7
    1904:	4b22      	ldr	r3, [pc, #136]	; (1990 <hif_send+0x218>)
    1906:	4798      	blx	r3
    1908:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    190a:	d1c8      	bne.n	189e <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    190c:	9b06      	ldr	r3, [sp, #24]
    190e:	18f3      	adds	r3, r6, r3
    1910:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    1912:	9b05      	ldr	r3, [sp, #20]
    1914:	009b      	lsls	r3, r3, #2
    1916:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    1918:	9b04      	ldr	r3, [sp, #16]
    191a:	2202      	movs	r2, #2
    191c:	4313      	orrs	r3, r2
    191e:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1920:	9904      	ldr	r1, [sp, #16]
    1922:	481c      	ldr	r0, [pc, #112]	; (1994 <hif_send+0x21c>)
    1924:	4b0e      	ldr	r3, [pc, #56]	; (1960 <hif_send+0x1e8>)
    1926:	4798      	blx	r3
    1928:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    192a:	d1b8      	bne.n	189e <hif_send+0x126>
 	ret = hif_chip_sleep();
    192c:	4b1a      	ldr	r3, [pc, #104]	; (1998 <hif_send+0x220>)
    192e:	4798      	blx	r3
    1930:	0004      	movs	r4, r0
	return ret;
    1932:	e7b6      	b.n	18a2 <hif_send+0x12a>
			ret = hif_chip_sleep();
    1934:	4b18      	ldr	r3, [pc, #96]	; (1998 <hif_send+0x220>)
    1936:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    1938:	2403      	movs	r4, #3
    193a:	4264      	negs	r4, r4
			goto ERR2;
    193c:	e7b1      	b.n	18a2 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    193e:	2298      	movs	r2, #152	; 0x98
    1940:	32ff      	adds	r2, #255	; 0xff
    1942:	4916      	ldr	r1, [pc, #88]	; (199c <hif_send+0x224>)
    1944:	4816      	ldr	r0, [pc, #88]	; (19a0 <hif_send+0x228>)
    1946:	4b0c      	ldr	r3, [pc, #48]	; (1978 <hif_send+0x200>)
    1948:	4798      	blx	r3
    194a:	4816      	ldr	r0, [pc, #88]	; (19a4 <hif_send+0x22c>)
    194c:	4b0c      	ldr	r3, [pc, #48]	; (1980 <hif_send+0x208>)
    194e:	4798      	blx	r3
    1950:	200d      	movs	r0, #13
    1952:	4b0c      	ldr	r3, [pc, #48]	; (1984 <hif_send+0x20c>)
    1954:	4798      	blx	r3
		goto ERR2;
    1956:	e7a4      	b.n	18a2 <hif_send+0x12a>
    1958:	000016e9 	.word	0x000016e9
    195c:	0000108c 	.word	0x0000108c
    1960:	00002ac1 	.word	0x00002ac1
    1964:	00001078 	.word	0x00001078
    1968:	000003e7 	.word	0x000003e7
    196c:	00002ab5 	.word	0x00002ab5
    1970:	000012d9 	.word	0x000012d9
    1974:	0000d100 	.word	0x0000d100
    1978:	0000b779 	.word	0x0000b779
    197c:	0000d10c 	.word	0x0000d10c
    1980:	0000b895 	.word	0x0000b895
    1984:	0000b7ad 	.word	0x0000b7ad
    1988:	00150400 	.word	0x00150400
    198c:	00001725 	.word	0x00001725
    1990:	00002b35 	.word	0x00002b35
    1994:	0000106c 	.word	0x0000106c
    1998:	00001741 	.word	0x00001741
    199c:	0000ce18 	.word	0x0000ce18
    19a0:	0000cdd0 	.word	0x0000cdd0
    19a4:	0000d11c 	.word	0x0000d11c

000019a8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    19a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19aa:	46ce      	mov	lr, r9
    19ac:	4647      	mov	r7, r8
    19ae:	b580      	push	{r7, lr}
    19b0:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    19b2:	2200      	movs	r2, #0
    19b4:	4bd1      	ldr	r3, [pc, #836]	; (1cfc <hif_handle_isr+0x354>)
    19b6:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    19b8:	4699      	mov	r9, r3
    19ba:	4698      	mov	r8, r3
    19bc:	e081      	b.n	1ac2 <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    19be:	4bcf      	ldr	r3, [pc, #828]	; (1cfc <hif_handle_isr+0x354>)
    19c0:	9a05      	ldr	r2, [sp, #20]
    19c2:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    19c4:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    19c6:	af04      	add	r7, sp, #16
    19c8:	2204      	movs	r2, #4
    19ca:	0039      	movs	r1, r7
    19cc:	9805      	ldr	r0, [sp, #20]
    19ce:	4bcc      	ldr	r3, [pc, #816]	; (1d00 <hif_handle_isr+0x358>)
    19d0:	4798      	blx	r3
    19d2:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    19d4:	887b      	ldrh	r3, [r7, #2]
    19d6:	b29b      	uxth	r3, r3
    19d8:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    19da:	2800      	cmp	r0, #0
    19dc:	d134      	bne.n	1a48 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    19de:	ab04      	add	r3, sp, #16
    19e0:	885b      	ldrh	r3, [r3, #2]
    19e2:	b29b      	uxth	r3, r3
    19e4:	429e      	cmp	r6, r3
    19e6:	d004      	beq.n	19f2 <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    19e8:	ab04      	add	r3, sp, #16
    19ea:	885b      	ldrh	r3, [r3, #2]
    19ec:	1af3      	subs	r3, r6, r3
    19ee:	2b04      	cmp	r3, #4
    19f0:	dc3a      	bgt.n	1a68 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    19f2:	ab04      	add	r3, sp, #16
    19f4:	781b      	ldrb	r3, [r3, #0]
    19f6:	2b01      	cmp	r3, #1
    19f8:	d04f      	beq.n	1a9a <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    19fa:	ab04      	add	r3, sp, #16
    19fc:	781b      	ldrb	r3, [r3, #0]
    19fe:	2b02      	cmp	r3, #2
    1a00:	d07d      	beq.n	1afe <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1a02:	ab04      	add	r3, sp, #16
    1a04:	781b      	ldrb	r3, [r3, #0]
    1a06:	2b04      	cmp	r3, #4
    1a08:	d100      	bne.n	1a0c <hif_handle_isr+0x64>
    1a0a:	e095      	b.n	1b38 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1a0c:	ab04      	add	r3, sp, #16
    1a0e:	781b      	ldrb	r3, [r3, #0]
    1a10:	2b06      	cmp	r3, #6
    1a12:	d100      	bne.n	1a16 <hif_handle_isr+0x6e>
    1a14:	e0ad      	b.n	1b72 <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1a16:	ab04      	add	r3, sp, #16
    1a18:	781b      	ldrb	r3, [r3, #0]
    1a1a:	2b07      	cmp	r3, #7
    1a1c:	d100      	bne.n	1a20 <hif_handle_isr+0x78>
    1a1e:	e0c5      	b.n	1bac <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1a20:	ab04      	add	r3, sp, #16
    1a22:	781b      	ldrb	r3, [r3, #0]
    1a24:	2b05      	cmp	r3, #5
    1a26:	d100      	bne.n	1a2a <hif_handle_isr+0x82>
    1a28:	e0dc      	b.n	1be4 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    1a2a:	2284      	movs	r2, #132	; 0x84
    1a2c:	0092      	lsls	r2, r2, #2
    1a2e:	49b5      	ldr	r1, [pc, #724]	; (1d04 <hif_handle_isr+0x35c>)
    1a30:	48b5      	ldr	r0, [pc, #724]	; (1d08 <hif_handle_isr+0x360>)
    1a32:	4bb6      	ldr	r3, [pc, #728]	; (1d0c <hif_handle_isr+0x364>)
    1a34:	4798      	blx	r3
    1a36:	48b6      	ldr	r0, [pc, #728]	; (1d10 <hif_handle_isr+0x368>)
    1a38:	4bb6      	ldr	r3, [pc, #728]	; (1d14 <hif_handle_isr+0x36c>)
    1a3a:	4798      	blx	r3
    1a3c:	200d      	movs	r0, #13
    1a3e:	4bb6      	ldr	r3, [pc, #728]	; (1d18 <hif_handle_isr+0x370>)
    1a40:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1a42:	2406      	movs	r4, #6
    1a44:	4264      	negs	r4, r4
    1a46:	e119      	b.n	1c7c <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    1a48:	22e9      	movs	r2, #233	; 0xe9
    1a4a:	0052      	lsls	r2, r2, #1
    1a4c:	49ad      	ldr	r1, [pc, #692]	; (1d04 <hif_handle_isr+0x35c>)
    1a4e:	48ae      	ldr	r0, [pc, #696]	; (1d08 <hif_handle_isr+0x360>)
    1a50:	4bae      	ldr	r3, [pc, #696]	; (1d0c <hif_handle_isr+0x364>)
    1a52:	4798      	blx	r3
    1a54:	48b1      	ldr	r0, [pc, #708]	; (1d1c <hif_handle_isr+0x374>)
    1a56:	4baf      	ldr	r3, [pc, #700]	; (1d14 <hif_handle_isr+0x36c>)
    1a58:	4798      	blx	r3
    1a5a:	200d      	movs	r0, #13
    1a5c:	4bae      	ldr	r3, [pc, #696]	; (1d18 <hif_handle_isr+0x370>)
    1a5e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1a60:	2001      	movs	r0, #1
    1a62:	4baf      	ldr	r3, [pc, #700]	; (1d20 <hif_handle_isr+0x378>)
    1a64:	4798      	blx	r3
    1a66:	e109      	b.n	1c7c <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    1a68:	22dc      	movs	r2, #220	; 0xdc
    1a6a:	32ff      	adds	r2, #255	; 0xff
    1a6c:	49a5      	ldr	r1, [pc, #660]	; (1d04 <hif_handle_isr+0x35c>)
    1a6e:	48a6      	ldr	r0, [pc, #664]	; (1d08 <hif_handle_isr+0x360>)
    1a70:	4ca6      	ldr	r4, [pc, #664]	; (1d0c <hif_handle_isr+0x364>)
    1a72:	47a0      	blx	r4
    1a74:	a904      	add	r1, sp, #16
    1a76:	884a      	ldrh	r2, [r1, #2]
    1a78:	b292      	uxth	r2, r2
    1a7a:	780b      	ldrb	r3, [r1, #0]
    1a7c:	b2db      	uxtb	r3, r3
    1a7e:	7849      	ldrb	r1, [r1, #1]
    1a80:	9100      	str	r1, [sp, #0]
    1a82:	0031      	movs	r1, r6
    1a84:	48a7      	ldr	r0, [pc, #668]	; (1d24 <hif_handle_isr+0x37c>)
    1a86:	47a0      	blx	r4
    1a88:	200d      	movs	r0, #13
    1a8a:	4ba3      	ldr	r3, [pc, #652]	; (1d18 <hif_handle_isr+0x370>)
    1a8c:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1a8e:	2001      	movs	r0, #1
    1a90:	4ba3      	ldr	r3, [pc, #652]	; (1d20 <hif_handle_isr+0x378>)
    1a92:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1a94:	2406      	movs	r4, #6
    1a96:	4264      	negs	r4, r4
    1a98:	e0f0      	b.n	1c7c <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    1a9a:	4b98      	ldr	r3, [pc, #608]	; (1cfc <hif_handle_isr+0x354>)
    1a9c:	691b      	ldr	r3, [r3, #16]
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	d020      	beq.n	1ae4 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1aa2:	4b96      	ldr	r3, [pc, #600]	; (1cfc <hif_handle_isr+0x354>)
    1aa4:	691b      	ldr	r3, [r3, #16]
    1aa6:	aa04      	add	r2, sp, #16
    1aa8:	7850      	ldrb	r0, [r2, #1]
    1aaa:	b2c0      	uxtb	r0, r0
    1aac:	8851      	ldrh	r1, [r2, #2]
    1aae:	9a05      	ldr	r2, [sp, #20]
    1ab0:	3208      	adds	r2, #8
    1ab2:	3908      	subs	r1, #8
    1ab4:	b289      	uxth	r1, r1
    1ab6:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    1ab8:	4b90      	ldr	r3, [pc, #576]	; (1cfc <hif_handle_isr+0x354>)
    1aba:	789b      	ldrb	r3, [r3, #2]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d000      	beq.n	1ac2 <hif_handle_isr+0x11a>
    1ac0:	e0a1      	b.n	1c06 <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    1ac2:	464b      	mov	r3, r9
    1ac4:	78db      	ldrb	r3, [r3, #3]
    1ac6:	2b00      	cmp	r3, #0
    1ac8:	d100      	bne.n	1acc <hif_handle_isr+0x124>
    1aca:	e15b      	b.n	1d84 <hif_handle_isr+0x3dc>
    1acc:	4643      	mov	r3, r8
    1ace:	791b      	ldrb	r3, [r3, #4]
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d000      	beq.n	1ad6 <hif_handle_isr+0x12e>
    1ad4:	e156      	b.n	1d84 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    1ad6:	4a89      	ldr	r2, [pc, #548]	; (1cfc <hif_handle_isr+0x354>)
    1ad8:	78d3      	ldrb	r3, [r2, #3]
    1ada:	3b01      	subs	r3, #1
    1adc:	b2db      	uxtb	r3, r3
    1ade:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1ae0:	4d91      	ldr	r5, [pc, #580]	; (1d28 <hif_handle_isr+0x380>)
    1ae2:	e0d6      	b.n	1c92 <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    1ae4:	22e8      	movs	r2, #232	; 0xe8
    1ae6:	32ff      	adds	r2, #255	; 0xff
    1ae8:	4986      	ldr	r1, [pc, #536]	; (1d04 <hif_handle_isr+0x35c>)
    1aea:	4887      	ldr	r0, [pc, #540]	; (1d08 <hif_handle_isr+0x360>)
    1aec:	4b87      	ldr	r3, [pc, #540]	; (1d0c <hif_handle_isr+0x364>)
    1aee:	4798      	blx	r3
    1af0:	488e      	ldr	r0, [pc, #568]	; (1d2c <hif_handle_isr+0x384>)
    1af2:	4b88      	ldr	r3, [pc, #544]	; (1d14 <hif_handle_isr+0x36c>)
    1af4:	4798      	blx	r3
    1af6:	200d      	movs	r0, #13
    1af8:	4b87      	ldr	r3, [pc, #540]	; (1d18 <hif_handle_isr+0x370>)
    1afa:	4798      	blx	r3
    1afc:	e7dc      	b.n	1ab8 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    1afe:	4b7f      	ldr	r3, [pc, #508]	; (1cfc <hif_handle_isr+0x354>)
    1b00:	695b      	ldr	r3, [r3, #20]
    1b02:	2b00      	cmp	r3, #0
    1b04:	d00b      	beq.n	1b1e <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b06:	4b7d      	ldr	r3, [pc, #500]	; (1cfc <hif_handle_isr+0x354>)
    1b08:	695b      	ldr	r3, [r3, #20]
    1b0a:	aa04      	add	r2, sp, #16
    1b0c:	7850      	ldrb	r0, [r2, #1]
    1b0e:	b2c0      	uxtb	r0, r0
    1b10:	8851      	ldrh	r1, [r2, #2]
    1b12:	9a05      	ldr	r2, [sp, #20]
    1b14:	3208      	adds	r2, #8
    1b16:	3908      	subs	r1, #8
    1b18:	b289      	uxth	r1, r1
    1b1a:	4798      	blx	r3
    1b1c:	e7cc      	b.n	1ab8 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    1b1e:	22f0      	movs	r2, #240	; 0xf0
    1b20:	32ff      	adds	r2, #255	; 0xff
    1b22:	4978      	ldr	r1, [pc, #480]	; (1d04 <hif_handle_isr+0x35c>)
    1b24:	4878      	ldr	r0, [pc, #480]	; (1d08 <hif_handle_isr+0x360>)
    1b26:	4b79      	ldr	r3, [pc, #484]	; (1d0c <hif_handle_isr+0x364>)
    1b28:	4798      	blx	r3
    1b2a:	4881      	ldr	r0, [pc, #516]	; (1d30 <hif_handle_isr+0x388>)
    1b2c:	4b79      	ldr	r3, [pc, #484]	; (1d14 <hif_handle_isr+0x36c>)
    1b2e:	4798      	blx	r3
    1b30:	200d      	movs	r0, #13
    1b32:	4b79      	ldr	r3, [pc, #484]	; (1d18 <hif_handle_isr+0x370>)
    1b34:	4798      	blx	r3
    1b36:	e7bf      	b.n	1ab8 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    1b38:	4b70      	ldr	r3, [pc, #448]	; (1cfc <hif_handle_isr+0x354>)
    1b3a:	699b      	ldr	r3, [r3, #24]
    1b3c:	2b00      	cmp	r3, #0
    1b3e:	d00b      	beq.n	1b58 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b40:	4b6e      	ldr	r3, [pc, #440]	; (1cfc <hif_handle_isr+0x354>)
    1b42:	699b      	ldr	r3, [r3, #24]
    1b44:	aa04      	add	r2, sp, #16
    1b46:	7850      	ldrb	r0, [r2, #1]
    1b48:	b2c0      	uxtb	r0, r0
    1b4a:	8851      	ldrh	r1, [r2, #2]
    1b4c:	9a05      	ldr	r2, [sp, #20]
    1b4e:	3208      	adds	r2, #8
    1b50:	3908      	subs	r1, #8
    1b52:	b289      	uxth	r1, r1
    1b54:	4798      	blx	r3
    1b56:	e7af      	b.n	1ab8 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    1b58:	22f8      	movs	r2, #248	; 0xf8
    1b5a:	32ff      	adds	r2, #255	; 0xff
    1b5c:	4969      	ldr	r1, [pc, #420]	; (1d04 <hif_handle_isr+0x35c>)
    1b5e:	486a      	ldr	r0, [pc, #424]	; (1d08 <hif_handle_isr+0x360>)
    1b60:	4b6a      	ldr	r3, [pc, #424]	; (1d0c <hif_handle_isr+0x364>)
    1b62:	4798      	blx	r3
    1b64:	4873      	ldr	r0, [pc, #460]	; (1d34 <hif_handle_isr+0x38c>)
    1b66:	4b6b      	ldr	r3, [pc, #428]	; (1d14 <hif_handle_isr+0x36c>)
    1b68:	4798      	blx	r3
    1b6a:	200d      	movs	r0, #13
    1b6c:	4b6a      	ldr	r3, [pc, #424]	; (1d18 <hif_handle_isr+0x370>)
    1b6e:	4798      	blx	r3
    1b70:	e7a2      	b.n	1ab8 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    1b72:	4b62      	ldr	r3, [pc, #392]	; (1cfc <hif_handle_isr+0x354>)
    1b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b76:	2b00      	cmp	r3, #0
    1b78:	d00b      	beq.n	1b92 <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b7a:	4b60      	ldr	r3, [pc, #384]	; (1cfc <hif_handle_isr+0x354>)
    1b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b7e:	aa04      	add	r2, sp, #16
    1b80:	7850      	ldrb	r0, [r2, #1]
    1b82:	b2c0      	uxtb	r0, r0
    1b84:	8851      	ldrh	r1, [r2, #2]
    1b86:	9a05      	ldr	r2, [sp, #20]
    1b88:	3208      	adds	r2, #8
    1b8a:	3908      	subs	r1, #8
    1b8c:	b289      	uxth	r1, r1
    1b8e:	4798      	blx	r3
    1b90:	e792      	b.n	1ab8 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    1b92:	2280      	movs	r2, #128	; 0x80
    1b94:	0092      	lsls	r2, r2, #2
    1b96:	495b      	ldr	r1, [pc, #364]	; (1d04 <hif_handle_isr+0x35c>)
    1b98:	485b      	ldr	r0, [pc, #364]	; (1d08 <hif_handle_isr+0x360>)
    1b9a:	4b5c      	ldr	r3, [pc, #368]	; (1d0c <hif_handle_isr+0x364>)
    1b9c:	4798      	blx	r3
    1b9e:	4866      	ldr	r0, [pc, #408]	; (1d38 <hif_handle_isr+0x390>)
    1ba0:	4b5c      	ldr	r3, [pc, #368]	; (1d14 <hif_handle_isr+0x36c>)
    1ba2:	4798      	blx	r3
    1ba4:	200d      	movs	r0, #13
    1ba6:	4b5c      	ldr	r3, [pc, #368]	; (1d18 <hif_handle_isr+0x370>)
    1ba8:	4798      	blx	r3
    1baa:	e785      	b.n	1ab8 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    1bac:	4b53      	ldr	r3, [pc, #332]	; (1cfc <hif_handle_isr+0x354>)
    1bae:	69db      	ldr	r3, [r3, #28]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d00b      	beq.n	1bcc <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1bb4:	4b51      	ldr	r3, [pc, #324]	; (1cfc <hif_handle_isr+0x354>)
    1bb6:	69db      	ldr	r3, [r3, #28]
    1bb8:	aa04      	add	r2, sp, #16
    1bba:	7850      	ldrb	r0, [r2, #1]
    1bbc:	b2c0      	uxtb	r0, r0
    1bbe:	8851      	ldrh	r1, [r2, #2]
    1bc0:	9a05      	ldr	r2, [sp, #20]
    1bc2:	3208      	adds	r2, #8
    1bc4:	3908      	subs	r1, #8
    1bc6:	b289      	uxth	r1, r1
    1bc8:	4798      	blx	r3
    1bca:	e775      	b.n	1ab8 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    1bcc:	4a5b      	ldr	r2, [pc, #364]	; (1d3c <hif_handle_isr+0x394>)
    1bce:	494d      	ldr	r1, [pc, #308]	; (1d04 <hif_handle_isr+0x35c>)
    1bd0:	484d      	ldr	r0, [pc, #308]	; (1d08 <hif_handle_isr+0x360>)
    1bd2:	4b4e      	ldr	r3, [pc, #312]	; (1d0c <hif_handle_isr+0x364>)
    1bd4:	4798      	blx	r3
    1bd6:	485a      	ldr	r0, [pc, #360]	; (1d40 <hif_handle_isr+0x398>)
    1bd8:	4b4e      	ldr	r3, [pc, #312]	; (1d14 <hif_handle_isr+0x36c>)
    1bda:	4798      	blx	r3
    1bdc:	200d      	movs	r0, #13
    1bde:	4b4e      	ldr	r3, [pc, #312]	; (1d18 <hif_handle_isr+0x370>)
    1be0:	4798      	blx	r3
    1be2:	e769      	b.n	1ab8 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    1be4:	4b45      	ldr	r3, [pc, #276]	; (1cfc <hif_handle_isr+0x354>)
    1be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1be8:	2b00      	cmp	r3, #0
    1bea:	d100      	bne.n	1bee <hif_handle_isr+0x246>
    1bec:	e764      	b.n	1ab8 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1bee:	4b43      	ldr	r3, [pc, #268]	; (1cfc <hif_handle_isr+0x354>)
    1bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1bf2:	aa04      	add	r2, sp, #16
    1bf4:	7850      	ldrb	r0, [r2, #1]
    1bf6:	b2c0      	uxtb	r0, r0
    1bf8:	8851      	ldrh	r1, [r2, #2]
    1bfa:	9a05      	ldr	r2, [sp, #20]
    1bfc:	3208      	adds	r2, #8
    1bfe:	3908      	subs	r1, #8
    1c00:	b289      	uxth	r1, r1
    1c02:	4798      	blx	r3
    1c04:	e758      	b.n	1ab8 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1c06:	4a4f      	ldr	r2, [pc, #316]	; (1d44 <hif_handle_isr+0x39c>)
    1c08:	493e      	ldr	r1, [pc, #248]	; (1d04 <hif_handle_isr+0x35c>)
    1c0a:	483f      	ldr	r0, [pc, #252]	; (1d08 <hif_handle_isr+0x360>)
    1c0c:	4c3f      	ldr	r4, [pc, #252]	; (1d0c <hif_handle_isr+0x364>)
    1c0e:	47a0      	blx	r4
    1c10:	ab04      	add	r3, sp, #16
    1c12:	7819      	ldrb	r1, [r3, #0]
    1c14:	b2c9      	uxtb	r1, r1
    1c16:	785a      	ldrb	r2, [r3, #1]
    1c18:	b2d2      	uxtb	r2, r2
    1c1a:	484b      	ldr	r0, [pc, #300]	; (1d48 <hif_handle_isr+0x3a0>)
    1c1c:	47a0      	blx	r4
    1c1e:	200d      	movs	r0, #13
    1c20:	4b3d      	ldr	r3, [pc, #244]	; (1d18 <hif_handle_isr+0x370>)
    1c22:	4798      	blx	r3
					ret = hif_set_rx_done();
    1c24:	4b49      	ldr	r3, [pc, #292]	; (1d4c <hif_handle_isr+0x3a4>)
    1c26:	4798      	blx	r3
    1c28:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1c2a:	d127      	bne.n	1c7c <hif_handle_isr+0x2d4>
    1c2c:	e749      	b.n	1ac2 <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    1c2e:	4a48      	ldr	r2, [pc, #288]	; (1d50 <hif_handle_isr+0x3a8>)
    1c30:	4934      	ldr	r1, [pc, #208]	; (1d04 <hif_handle_isr+0x35c>)
    1c32:	4835      	ldr	r0, [pc, #212]	; (1d08 <hif_handle_isr+0x360>)
    1c34:	4b35      	ldr	r3, [pc, #212]	; (1d0c <hif_handle_isr+0x364>)
    1c36:	4798      	blx	r3
    1c38:	4846      	ldr	r0, [pc, #280]	; (1d54 <hif_handle_isr+0x3ac>)
    1c3a:	4b36      	ldr	r3, [pc, #216]	; (1d14 <hif_handle_isr+0x36c>)
    1c3c:	4798      	blx	r3
    1c3e:	200d      	movs	r0, #13
    1c40:	4b35      	ldr	r3, [pc, #212]	; (1d18 <hif_handle_isr+0x370>)
    1c42:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1c44:	2402      	movs	r4, #2
    1c46:	4264      	negs	r4, r4
    1c48:	e018      	b.n	1c7c <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    1c4a:	4a43      	ldr	r2, [pc, #268]	; (1d58 <hif_handle_isr+0x3b0>)
    1c4c:	492d      	ldr	r1, [pc, #180]	; (1d04 <hif_handle_isr+0x35c>)
    1c4e:	482e      	ldr	r0, [pc, #184]	; (1d08 <hif_handle_isr+0x360>)
    1c50:	4c2e      	ldr	r4, [pc, #184]	; (1d0c <hif_handle_isr+0x364>)
    1c52:	47a0      	blx	r4
    1c54:	9903      	ldr	r1, [sp, #12]
    1c56:	4841      	ldr	r0, [pc, #260]	; (1d5c <hif_handle_isr+0x3b4>)
    1c58:	47a0      	blx	r4
    1c5a:	200d      	movs	r0, #13
    1c5c:	4b2e      	ldr	r3, [pc, #184]	; (1d18 <hif_handle_isr+0x370>)
    1c5e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1c60:	240c      	movs	r4, #12
    1c62:	4264      	negs	r4, r4
    1c64:	e00a      	b.n	1c7c <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1c66:	4a3e      	ldr	r2, [pc, #248]	; (1d60 <hif_handle_isr+0x3b8>)
    1c68:	4926      	ldr	r1, [pc, #152]	; (1d04 <hif_handle_isr+0x35c>)
    1c6a:	4827      	ldr	r0, [pc, #156]	; (1d08 <hif_handle_isr+0x360>)
    1c6c:	4b27      	ldr	r3, [pc, #156]	; (1d0c <hif_handle_isr+0x364>)
    1c6e:	4798      	blx	r3
    1c70:	483c      	ldr	r0, [pc, #240]	; (1d64 <hif_handle_isr+0x3bc>)
    1c72:	4b28      	ldr	r3, [pc, #160]	; (1d14 <hif_handle_isr+0x36c>)
    1c74:	4798      	blx	r3
    1c76:	200d      	movs	r0, #13
    1c78:	4b27      	ldr	r3, [pc, #156]	; (1d18 <hif_handle_isr+0x370>)
    1c7a:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1c7c:	4a3a      	ldr	r2, [pc, #232]	; (1d68 <hif_handle_isr+0x3c0>)
    1c7e:	493b      	ldr	r1, [pc, #236]	; (1d6c <hif_handle_isr+0x3c4>)
    1c80:	4821      	ldr	r0, [pc, #132]	; (1d08 <hif_handle_isr+0x360>)
    1c82:	4f22      	ldr	r7, [pc, #136]	; (1d0c <hif_handle_isr+0x364>)
    1c84:	47b8      	blx	r7
    1c86:	0021      	movs	r1, r4
    1c88:	4839      	ldr	r0, [pc, #228]	; (1d70 <hif_handle_isr+0x3c8>)
    1c8a:	47b8      	blx	r7
    1c8c:	200d      	movs	r0, #13
    1c8e:	4b22      	ldr	r3, [pc, #136]	; (1d18 <hif_handle_isr+0x370>)
    1c90:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1c92:	a903      	add	r1, sp, #12
    1c94:	4837      	ldr	r0, [pc, #220]	; (1d74 <hif_handle_isr+0x3cc>)
    1c96:	47a8      	blx	r5
    1c98:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    1c9a:	d1e4      	bne.n	1c66 <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    1c9c:	9b03      	ldr	r3, [sp, #12]
    1c9e:	07db      	lsls	r3, r3, #31
    1ca0:	d5d3      	bpl.n	1c4a <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    1ca2:	2000      	movs	r0, #0
    1ca4:	4b1e      	ldr	r3, [pc, #120]	; (1d20 <hif_handle_isr+0x378>)
    1ca6:	4798      	blx	r3
			reg &= ~NBIT0;
    1ca8:	2301      	movs	r3, #1
    1caa:	9903      	ldr	r1, [sp, #12]
    1cac:	4399      	bics	r1, r3
    1cae:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1cb0:	4830      	ldr	r0, [pc, #192]	; (1d74 <hif_handle_isr+0x3cc>)
    1cb2:	4b31      	ldr	r3, [pc, #196]	; (1d78 <hif_handle_isr+0x3d0>)
    1cb4:	4798      	blx	r3
    1cb6:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    1cb8:	d1e0      	bne.n	1c7c <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    1cba:	2201      	movs	r2, #1
    1cbc:	4b0f      	ldr	r3, [pc, #60]	; (1cfc <hif_handle_isr+0x354>)
    1cbe:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1cc0:	9b03      	ldr	r3, [sp, #12]
    1cc2:	049e      	lsls	r6, r3, #18
    1cc4:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    1cc6:	d0b2      	beq.n	1c2e <hif_handle_isr+0x286>
				uint32 address = 0;
    1cc8:	2300      	movs	r3, #0
    1cca:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1ccc:	a905      	add	r1, sp, #20
    1cce:	482b      	ldr	r0, [pc, #172]	; (1d7c <hif_handle_isr+0x3d4>)
    1cd0:	4b15      	ldr	r3, [pc, #84]	; (1d28 <hif_handle_isr+0x380>)
    1cd2:	4798      	blx	r3
    1cd4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    1cd6:	d100      	bne.n	1cda <hif_handle_isr+0x332>
    1cd8:	e671      	b.n	19be <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1cda:	22e4      	movs	r2, #228	; 0xe4
    1cdc:	0052      	lsls	r2, r2, #1
    1cde:	4909      	ldr	r1, [pc, #36]	; (1d04 <hif_handle_isr+0x35c>)
    1ce0:	4809      	ldr	r0, [pc, #36]	; (1d08 <hif_handle_isr+0x360>)
    1ce2:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <hif_handle_isr+0x364>)
    1ce4:	4798      	blx	r3
    1ce6:	4826      	ldr	r0, [pc, #152]	; (1d80 <hif_handle_isr+0x3d8>)
    1ce8:	4b0a      	ldr	r3, [pc, #40]	; (1d14 <hif_handle_isr+0x36c>)
    1cea:	4798      	blx	r3
    1cec:	200d      	movs	r0, #13
    1cee:	4b0a      	ldr	r3, [pc, #40]	; (1d18 <hif_handle_isr+0x370>)
    1cf0:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1cf2:	2001      	movs	r0, #1
    1cf4:	4b0a      	ldr	r3, [pc, #40]	; (1d20 <hif_handle_isr+0x378>)
    1cf6:	4798      	blx	r3
    1cf8:	e7c0      	b.n	1c7c <hif_handle_isr+0x2d4>
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	20000f1c 	.word	0x20000f1c
    1d00:	00002acd 	.word	0x00002acd
    1d04:	0000ce24 	.word	0x0000ce24
    1d08:	0000cdd0 	.word	0x0000cdd0
    1d0c:	0000b779 	.word	0x0000b779
    1d10:	0000cf80 	.word	0x0000cf80
    1d14:	0000b895 	.word	0x0000b895
    1d18:	0000b7ad 	.word	0x0000b7ad
    1d1c:	0000ce7c 	.word	0x0000ce7c
    1d20:	00001371 	.word	0x00001371
    1d24:	0000ce94 	.word	0x0000ce94
    1d28:	00002ab5 	.word	0x00002ab5
    1d2c:	0000ced4 	.word	0x0000ced4
    1d30:	0000cef4 	.word	0x0000cef4
    1d34:	0000cf18 	.word	0x0000cf18
    1d38:	0000cf38 	.word	0x0000cf38
    1d3c:	00000207 	.word	0x00000207
    1d40:	0000cf5c 	.word	0x0000cf5c
    1d44:	00000216 	.word	0x00000216
    1d48:	0000cf98 	.word	0x0000cf98
    1d4c:	000016a5 	.word	0x000016a5
    1d50:	0000021d 	.word	0x0000021d
    1d54:	0000cfc4 	.word	0x0000cfc4
    1d58:	00000225 	.word	0x00000225
    1d5c:	0000cfd8 	.word	0x0000cfd8
    1d60:	0000022e 	.word	0x0000022e
    1d64:	0000cff4 	.word	0x0000cff4
    1d68:	00000257 	.word	0x00000257
    1d6c:	0000ce2c 	.word	0x0000ce2c
    1d70:	0000d018 	.word	0x0000d018
    1d74:	00001070 	.word	0x00001070
    1d78:	00002ac1 	.word	0x00002ac1
    1d7c:	00001084 	.word	0x00001084
    1d80:	0000ce58 	.word	0x0000ce58
			}
		}
	}

	return ret;
}
    1d84:	2000      	movs	r0, #0
    1d86:	b007      	add	sp, #28
    1d88:	bc0c      	pop	{r2, r3}
    1d8a:	4690      	mov	r8, r2
    1d8c:	4699      	mov	r9, r3
    1d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d90 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1d90:	b570      	push	{r4, r5, r6, lr}
    1d92:	0014      	movs	r4, r2
    1d94:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1d96:	2800      	cmp	r0, #0
    1d98:	d003      	beq.n	1da2 <hif_receive+0x12>
    1d9a:	2900      	cmp	r1, #0
    1d9c:	d001      	beq.n	1da2 <hif_receive+0x12>
    1d9e:	2a00      	cmp	r2, #0
    1da0:	d113      	bne.n	1dca <hif_receive+0x3a>
	{
		if(isDone)
    1da2:	2d00      	cmp	r5, #0
    1da4:	d002      	beq.n	1dac <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1da6:	4b28      	ldr	r3, [pc, #160]	; (1e48 <hif_receive+0xb8>)
    1da8:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1daa:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1dac:	229e      	movs	r2, #158	; 0x9e
    1dae:	0092      	lsls	r2, r2, #2
    1db0:	4926      	ldr	r1, [pc, #152]	; (1e4c <hif_receive+0xbc>)
    1db2:	4827      	ldr	r0, [pc, #156]	; (1e50 <hif_receive+0xc0>)
    1db4:	4b27      	ldr	r3, [pc, #156]	; (1e54 <hif_receive+0xc4>)
    1db6:	4798      	blx	r3
    1db8:	4827      	ldr	r0, [pc, #156]	; (1e58 <hif_receive+0xc8>)
    1dba:	4b28      	ldr	r3, [pc, #160]	; (1e5c <hif_receive+0xcc>)
    1dbc:	4798      	blx	r3
    1dbe:	200d      	movs	r0, #13
    1dc0:	4b27      	ldr	r3, [pc, #156]	; (1e60 <hif_receive+0xd0>)
    1dc2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1dc4:	200c      	movs	r0, #12
    1dc6:	4240      	negs	r0, r0
    1dc8:	e7ef      	b.n	1daa <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    1dca:	4b26      	ldr	r3, [pc, #152]	; (1e64 <hif_receive+0xd4>)
    1dcc:	68db      	ldr	r3, [r3, #12]
    1dce:	429a      	cmp	r2, r3
    1dd0:	d81a      	bhi.n	1e08 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1dd2:	4b24      	ldr	r3, [pc, #144]	; (1e64 <hif_receive+0xd4>)
    1dd4:	689b      	ldr	r3, [r3, #8]
    1dd6:	4298      	cmp	r0, r3
    1dd8:	d327      	bcc.n	1e2a <hif_receive+0x9a>
    1dda:	1886      	adds	r6, r0, r2
    1ddc:	4a21      	ldr	r2, [pc, #132]	; (1e64 <hif_receive+0xd4>)
    1dde:	6893      	ldr	r3, [r2, #8]
    1de0:	68d2      	ldr	r2, [r2, #12]
    1de2:	189b      	adds	r3, r3, r2
    1de4:	429e      	cmp	r6, r3
    1de6:	d820      	bhi.n	1e2a <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1de8:	0022      	movs	r2, r4
    1dea:	4b1f      	ldr	r3, [pc, #124]	; (1e68 <hif_receive+0xd8>)
    1dec:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1dee:	2800      	cmp	r0, #0
    1df0:	d1db      	bne.n	1daa <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1df2:	4a1c      	ldr	r2, [pc, #112]	; (1e64 <hif_receive+0xd4>)
    1df4:	6893      	ldr	r3, [r2, #8]
    1df6:	68d2      	ldr	r2, [r2, #12]
    1df8:	189b      	adds	r3, r3, r2
    1dfa:	429e      	cmp	r6, r3
    1dfc:	d001      	beq.n	1e02 <hif_receive+0x72>
    1dfe:	2d00      	cmp	r5, #0
    1e00:	d0d3      	beq.n	1daa <hif_receive+0x1a>
		ret = hif_set_rx_done();
    1e02:	4b11      	ldr	r3, [pc, #68]	; (1e48 <hif_receive+0xb8>)
    1e04:	4798      	blx	r3
    1e06:	e7d0      	b.n	1daa <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    1e08:	22a0      	movs	r2, #160	; 0xa0
    1e0a:	0092      	lsls	r2, r2, #2
    1e0c:	490f      	ldr	r1, [pc, #60]	; (1e4c <hif_receive+0xbc>)
    1e0e:	4810      	ldr	r0, [pc, #64]	; (1e50 <hif_receive+0xc0>)
    1e10:	4d10      	ldr	r5, [pc, #64]	; (1e54 <hif_receive+0xc4>)
    1e12:	47a8      	blx	r5
    1e14:	4b13      	ldr	r3, [pc, #76]	; (1e64 <hif_receive+0xd4>)
    1e16:	68da      	ldr	r2, [r3, #12]
    1e18:	0021      	movs	r1, r4
    1e1a:	4814      	ldr	r0, [pc, #80]	; (1e6c <hif_receive+0xdc>)
    1e1c:	47a8      	blx	r5
    1e1e:	200d      	movs	r0, #13
    1e20:	4b0f      	ldr	r3, [pc, #60]	; (1e60 <hif_receive+0xd0>)
    1e22:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1e24:	200c      	movs	r0, #12
    1e26:	4240      	negs	r0, r0
		goto ERR1;
    1e28:	e7bf      	b.n	1daa <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1e2a:	4a11      	ldr	r2, [pc, #68]	; (1e70 <hif_receive+0xe0>)
    1e2c:	4907      	ldr	r1, [pc, #28]	; (1e4c <hif_receive+0xbc>)
    1e2e:	4808      	ldr	r0, [pc, #32]	; (1e50 <hif_receive+0xc0>)
    1e30:	4b08      	ldr	r3, [pc, #32]	; (1e54 <hif_receive+0xc4>)
    1e32:	4798      	blx	r3
    1e34:	480f      	ldr	r0, [pc, #60]	; (1e74 <hif_receive+0xe4>)
    1e36:	4b09      	ldr	r3, [pc, #36]	; (1e5c <hif_receive+0xcc>)
    1e38:	4798      	blx	r3
    1e3a:	200d      	movs	r0, #13
    1e3c:	4b08      	ldr	r3, [pc, #32]	; (1e60 <hif_receive+0xd0>)
    1e3e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1e40:	200c      	movs	r0, #12
    1e42:	4240      	negs	r0, r0
		goto ERR1;
    1e44:	e7b1      	b.n	1daa <hif_receive+0x1a>
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	000016a5 	.word	0x000016a5
    1e4c:	0000ce3c 	.word	0x0000ce3c
    1e50:	0000cdd0 	.word	0x0000cdd0
    1e54:	0000b779 	.word	0x0000b779
    1e58:	0000d048 	.word	0x0000d048
    1e5c:	0000b895 	.word	0x0000b895
    1e60:	0000b7ad 	.word	0x0000b7ad
    1e64:	20000f1c 	.word	0x20000f1c
    1e68:	00002acd 	.word	0x00002acd
    1e6c:	0000d068 	.word	0x0000d068
    1e70:	00000286 	.word	0x00000286
    1e74:	0000d0b0 	.word	0x0000d0b0

00001e78 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1e78:	b570      	push	{r4, r5, r6, lr}
    1e7a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1e7c:	2807      	cmp	r0, #7
    1e7e:	d81f      	bhi.n	1ec0 <hif_register_cb+0x48>
    1e80:	0083      	lsls	r3, r0, #2
    1e82:	4a16      	ldr	r2, [pc, #88]	; (1edc <hif_register_cb+0x64>)
    1e84:	58d3      	ldr	r3, [r2, r3]
    1e86:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1e88:	4b15      	ldr	r3, [pc, #84]	; (1ee0 <hif_register_cb+0x68>)
    1e8a:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1e8c:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1e90:	4b13      	ldr	r3, [pc, #76]	; (1ee0 <hif_register_cb+0x68>)
    1e92:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1e94:	2000      	movs	r0, #0
			break;
    1e96:	e7fa      	b.n	1e8e <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1e98:	4b11      	ldr	r3, [pc, #68]	; (1ee0 <hif_register_cb+0x68>)
    1e9a:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1e9c:	2000      	movs	r0, #0
			break;
    1e9e:	e7f6      	b.n	1e8e <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1ea0:	4b0f      	ldr	r3, [pc, #60]	; (1ee0 <hif_register_cb+0x68>)
    1ea2:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1ea4:	2000      	movs	r0, #0
			break;
    1ea6:	e7f2      	b.n	1e8e <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1ea8:	4b0d      	ldr	r3, [pc, #52]	; (1ee0 <hif_register_cb+0x68>)
    1eaa:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1eac:	2000      	movs	r0, #0
			break;
    1eae:	e7ee      	b.n	1e8e <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    1eb0:	4b0b      	ldr	r3, [pc, #44]	; (1ee0 <hif_register_cb+0x68>)
    1eb2:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    1eb4:	2000      	movs	r0, #0
			break;
    1eb6:	e7ea      	b.n	1e8e <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1eb8:	4b09      	ldr	r3, [pc, #36]	; (1ee0 <hif_register_cb+0x68>)
    1eba:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    1ebc:	2000      	movs	r0, #0
			break;
    1ebe:	e7e6      	b.n	1e8e <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    1ec0:	4a08      	ldr	r2, [pc, #32]	; (1ee4 <hif_register_cb+0x6c>)
    1ec2:	4909      	ldr	r1, [pc, #36]	; (1ee8 <hif_register_cb+0x70>)
    1ec4:	4809      	ldr	r0, [pc, #36]	; (1eec <hif_register_cb+0x74>)
    1ec6:	4d0a      	ldr	r5, [pc, #40]	; (1ef0 <hif_register_cb+0x78>)
    1ec8:	47a8      	blx	r5
    1eca:	0021      	movs	r1, r4
    1ecc:	4809      	ldr	r0, [pc, #36]	; (1ef4 <hif_register_cb+0x7c>)
    1ece:	47a8      	blx	r5
    1ed0:	200d      	movs	r0, #13
    1ed2:	4b09      	ldr	r3, [pc, #36]	; (1ef8 <hif_register_cb+0x80>)
    1ed4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1ed6:	200c      	movs	r0, #12
    1ed8:	4240      	negs	r0, r0
			break;
    1eda:	e7d8      	b.n	1e8e <hif_register_cb+0x16>
    1edc:	0000cdf8 	.word	0x0000cdf8
    1ee0:	20000f1c 	.word	0x20000f1c
    1ee4:	000002be 	.word	0x000002be
    1ee8:	0000ce48 	.word	0x0000ce48
    1eec:	0000cdd0 	.word	0x0000cdd0
    1ef0:	0000b779 	.word	0x0000b779
    1ef4:	0000d0f4 	.word	0x0000d0f4
    1ef8:	0000b7ad 	.word	0x0000b7ad

00001efc <hif_init>:
{
    1efc:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    1efe:	222c      	movs	r2, #44	; 0x2c
    1f00:	2100      	movs	r1, #0
    1f02:	4806      	ldr	r0, [pc, #24]	; (1f1c <hif_init+0x20>)
    1f04:	4b06      	ldr	r3, [pc, #24]	; (1f20 <hif_init+0x24>)
    1f06:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1f08:	4806      	ldr	r0, [pc, #24]	; (1f24 <hif_init+0x28>)
    1f0a:	4b07      	ldr	r3, [pc, #28]	; (1f28 <hif_init+0x2c>)
    1f0c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1f0e:	4907      	ldr	r1, [pc, #28]	; (1f2c <hif_init+0x30>)
    1f10:	2003      	movs	r0, #3
    1f12:	4b07      	ldr	r3, [pc, #28]	; (1f30 <hif_init+0x34>)
    1f14:	4798      	blx	r3
}
    1f16:	2000      	movs	r0, #0
    1f18:	bd10      	pop	{r4, pc}
    1f1a:	46c0      	nop			; (mov r8, r8)
    1f1c:	20000f1c 	.word	0x20000f1c
    1f20:	00001665 	.word	0x00001665
    1f24:	00001691 	.word	0x00001691
    1f28:	00001319 	.word	0x00001319
    1f2c:	000016a1 	.word	0x000016a1
    1f30:	00001e79 	.word	0x00001e79

00001f34 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1f34:	b530      	push	{r4, r5, lr}
    1f36:	b09f      	sub	sp, #124	; 0x7c
    1f38:	0004      	movs	r4, r0
    1f3a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1f3c:	282c      	cmp	r0, #44	; 0x2c
    1f3e:	d02f      	beq.n	1fa0 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1f40:	281b      	cmp	r0, #27
    1f42:	d03d      	beq.n	1fc0 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1f44:	2806      	cmp	r0, #6
    1f46:	d04b      	beq.n	1fe0 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1f48:	280e      	cmp	r0, #14
    1f4a:	d027      	beq.n	1f9c <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1f4c:	2832      	cmp	r0, #50	; 0x32
    1f4e:	d057      	beq.n	2000 <STACK_SIZE>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1f50:	282f      	cmp	r0, #47	; 0x2f
    1f52:	d065      	beq.n	2020 <STACK_SIZE+0x20>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1f54:	2834      	cmp	r0, #52	; 0x34
    1f56:	d100      	bne.n	1f5a <m2m_wifi_cb+0x26>
    1f58:	e077      	b.n	204a <STACK_SIZE+0x4a>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1f5a:	2811      	cmp	r0, #17
    1f5c:	d100      	bne.n	1f60 <m2m_wifi_cb+0x2c>
    1f5e:	e096      	b.n	208e <STACK_SIZE+0x8e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1f60:	2813      	cmp	r0, #19
    1f62:	d100      	bne.n	1f66 <m2m_wifi_cb+0x32>
    1f64:	e0ac      	b.n	20c0 <STACK_SIZE+0xc0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1f66:	2804      	cmp	r0, #4
    1f68:	d100      	bne.n	1f6c <m2m_wifi_cb+0x38>
    1f6a:	e0bb      	b.n	20e4 <STACK_SIZE+0xe4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1f6c:	2865      	cmp	r0, #101	; 0x65
    1f6e:	d100      	bne.n	1f72 <m2m_wifi_cb+0x3e>
    1f70:	e0ca      	b.n	2108 <STACK_SIZE+0x108>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1f72:	2809      	cmp	r0, #9
    1f74:	d100      	bne.n	1f78 <m2m_wifi_cb+0x44>
    1f76:	e0d9      	b.n	212c <STACK_SIZE+0x12c>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1f78:	282a      	cmp	r0, #42	; 0x2a
    1f7a:	d100      	bne.n	1f7e <m2m_wifi_cb+0x4a>
    1f7c:	e0e8      	b.n	2150 <STACK_SIZE+0x150>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1f7e:	2820      	cmp	r0, #32
    1f80:	d100      	bne.n	1f84 <m2m_wifi_cb+0x50>
    1f82:	e0f7      	b.n	2174 <STACK_SIZE+0x174>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1f84:	2224      	movs	r2, #36	; 0x24
    1f86:	32ff      	adds	r2, #255	; 0xff
    1f88:	4989      	ldr	r1, [pc, #548]	; (21b0 <STACK_SIZE+0x1b0>)
    1f8a:	488a      	ldr	r0, [pc, #552]	; (21b4 <STACK_SIZE+0x1b4>)
    1f8c:	4d8a      	ldr	r5, [pc, #552]	; (21b8 <STACK_SIZE+0x1b8>)
    1f8e:	47a8      	blx	r5
    1f90:	0021      	movs	r1, r4
    1f92:	488a      	ldr	r0, [pc, #552]	; (21bc <STACK_SIZE+0x1bc>)
    1f94:	47a8      	blx	r5
    1f96:	200d      	movs	r0, #13
    1f98:	4b89      	ldr	r3, [pc, #548]	; (21c0 <STACK_SIZE+0x1c0>)
    1f9a:	4798      	blx	r3
	}
}
    1f9c:	b01f      	add	sp, #124	; 0x7c
    1f9e:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1fa0:	2300      	movs	r3, #0
    1fa2:	2204      	movs	r2, #4
    1fa4:	a903      	add	r1, sp, #12
    1fa6:	0028      	movs	r0, r5
    1fa8:	4c86      	ldr	r4, [pc, #536]	; (21c4 <STACK_SIZE+0x1c4>)
    1faa:	47a0      	blx	r4
    1fac:	2800      	cmp	r0, #0
    1fae:	d1f5      	bne.n	1f9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fb0:	4b85      	ldr	r3, [pc, #532]	; (21c8 <STACK_SIZE+0x1c8>)
    1fb2:	681b      	ldr	r3, [r3, #0]
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d0f1      	beq.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1fb8:	a903      	add	r1, sp, #12
    1fba:	302c      	adds	r0, #44	; 0x2c
    1fbc:	4798      	blx	r3
    1fbe:	e7ed      	b.n	1f9c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1fc0:	2300      	movs	r3, #0
    1fc2:	2208      	movs	r2, #8
    1fc4:	a903      	add	r1, sp, #12
    1fc6:	0028      	movs	r0, r5
    1fc8:	4c7e      	ldr	r4, [pc, #504]	; (21c4 <STACK_SIZE+0x1c4>)
    1fca:	47a0      	blx	r4
    1fcc:	2800      	cmp	r0, #0
    1fce:	d1e5      	bne.n	1f9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fd0:	4b7d      	ldr	r3, [pc, #500]	; (21c8 <STACK_SIZE+0x1c8>)
    1fd2:	681b      	ldr	r3, [r3, #0]
    1fd4:	2b00      	cmp	r3, #0
    1fd6:	d0e1      	beq.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1fd8:	a903      	add	r1, sp, #12
    1fda:	301b      	adds	r0, #27
    1fdc:	4798      	blx	r3
    1fde:	e7dd      	b.n	1f9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1fe0:	2301      	movs	r3, #1
    1fe2:	2230      	movs	r2, #48	; 0x30
    1fe4:	a903      	add	r1, sp, #12
    1fe6:	0028      	movs	r0, r5
    1fe8:	4c76      	ldr	r4, [pc, #472]	; (21c4 <STACK_SIZE+0x1c4>)
    1fea:	47a0      	blx	r4
    1fec:	2800      	cmp	r0, #0
    1fee:	d1d5      	bne.n	1f9c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1ff0:	4b75      	ldr	r3, [pc, #468]	; (21c8 <STACK_SIZE+0x1c8>)
    1ff2:	681b      	ldr	r3, [r3, #0]
    1ff4:	2b00      	cmp	r3, #0
    1ff6:	d0d1      	beq.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1ff8:	a903      	add	r1, sp, #12
    1ffa:	3006      	adds	r0, #6
    1ffc:	4798      	blx	r3
    1ffe:	e7cd      	b.n	1f9c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    2000:	2300      	movs	r3, #0
    2002:	2218      	movs	r2, #24
    2004:	a903      	add	r1, sp, #12
    2006:	0028      	movs	r0, r5
    2008:	4c6e      	ldr	r4, [pc, #440]	; (21c4 <STACK_SIZE+0x1c4>)
    200a:	47a0      	blx	r4
    200c:	2800      	cmp	r0, #0
    200e:	d1c5      	bne.n	1f9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2010:	4b6d      	ldr	r3, [pc, #436]	; (21c8 <STACK_SIZE+0x1c8>)
    2012:	681b      	ldr	r3, [r3, #0]
    2014:	2b00      	cmp	r3, #0
    2016:	d0c1      	beq.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    2018:	a903      	add	r1, sp, #12
    201a:	3032      	adds	r0, #50	; 0x32
    201c:	4798      	blx	r3
    201e:	e7bd      	b.n	1f9c <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    2020:	2264      	movs	r2, #100	; 0x64
    2022:	2100      	movs	r1, #0
    2024:	a803      	add	r0, sp, #12
    2026:	4b69      	ldr	r3, [pc, #420]	; (21cc <STACK_SIZE+0x1cc>)
    2028:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    202a:	2300      	movs	r3, #0
    202c:	2264      	movs	r2, #100	; 0x64
    202e:	a903      	add	r1, sp, #12
    2030:	0028      	movs	r0, r5
    2032:	4c64      	ldr	r4, [pc, #400]	; (21c4 <STACK_SIZE+0x1c4>)
    2034:	47a0      	blx	r4
    2036:	2800      	cmp	r0, #0
    2038:	d1b0      	bne.n	1f9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    203a:	4b63      	ldr	r3, [pc, #396]	; (21c8 <STACK_SIZE+0x1c8>)
    203c:	681b      	ldr	r3, [r3, #0]
    203e:	2b00      	cmp	r3, #0
    2040:	d0ac      	beq.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    2042:	a903      	add	r1, sp, #12
    2044:	302f      	adds	r0, #47	; 0x2f
    2046:	4798      	blx	r3
    2048:	e7a8      	b.n	1f9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    204a:	2300      	movs	r3, #0
    204c:	2204      	movs	r2, #4
    204e:	a903      	add	r1, sp, #12
    2050:	0028      	movs	r0, r5
    2052:	4c5c      	ldr	r4, [pc, #368]	; (21c4 <STACK_SIZE+0x1c4>)
    2054:	47a0      	blx	r4
    2056:	2800      	cmp	r0, #0
    2058:	d1a0      	bne.n	1f9c <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    205a:	485d      	ldr	r0, [pc, #372]	; (21d0 <STACK_SIZE+0x1d0>)
    205c:	4d56      	ldr	r5, [pc, #344]	; (21b8 <STACK_SIZE+0x1b8>)
    205e:	47a8      	blx	r5
    2060:	9c03      	ldr	r4, [sp, #12]
    2062:	0a23      	lsrs	r3, r4, #8
    2064:	20ff      	movs	r0, #255	; 0xff
    2066:	4003      	ands	r3, r0
    2068:	0c22      	lsrs	r2, r4, #16
    206a:	4002      	ands	r2, r0
    206c:	0e21      	lsrs	r1, r4, #24
    206e:	4020      	ands	r0, r4
    2070:	9000      	str	r0, [sp, #0]
    2072:	4858      	ldr	r0, [pc, #352]	; (21d4 <STACK_SIZE+0x1d4>)
    2074:	47a8      	blx	r5
    2076:	200d      	movs	r0, #13
    2078:	4b51      	ldr	r3, [pc, #324]	; (21c0 <STACK_SIZE+0x1c0>)
    207a:	4798      	blx	r3
			if (gpfAppWifiCb)
    207c:	4b52      	ldr	r3, [pc, #328]	; (21c8 <STACK_SIZE+0x1c8>)
    207e:	681b      	ldr	r3, [r3, #0]
    2080:	2b00      	cmp	r3, #0
    2082:	d100      	bne.n	2086 <STACK_SIZE+0x86>
    2084:	e78a      	b.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    2086:	2100      	movs	r1, #0
    2088:	2034      	movs	r0, #52	; 0x34
    208a:	4798      	blx	r3
    208c:	e786      	b.n	1f9c <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    208e:	2200      	movs	r2, #0
    2090:	4b51      	ldr	r3, [pc, #324]	; (21d8 <STACK_SIZE+0x1d8>)
    2092:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    2094:	2300      	movs	r3, #0
    2096:	3204      	adds	r2, #4
    2098:	a903      	add	r1, sp, #12
    209a:	0028      	movs	r0, r5
    209c:	4c49      	ldr	r4, [pc, #292]	; (21c4 <STACK_SIZE+0x1c4>)
    209e:	47a0      	blx	r4
    20a0:	2800      	cmp	r0, #0
    20a2:	d000      	beq.n	20a6 <STACK_SIZE+0xa6>
    20a4:	e77a      	b.n	1f9c <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    20a6:	ab03      	add	r3, sp, #12
    20a8:	781a      	ldrb	r2, [r3, #0]
    20aa:	4b4c      	ldr	r3, [pc, #304]	; (21dc <STACK_SIZE+0x1dc>)
    20ac:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    20ae:	4b46      	ldr	r3, [pc, #280]	; (21c8 <STACK_SIZE+0x1c8>)
    20b0:	681b      	ldr	r3, [r3, #0]
    20b2:	2b00      	cmp	r3, #0
    20b4:	d100      	bne.n	20b8 <STACK_SIZE+0xb8>
    20b6:	e771      	b.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    20b8:	a903      	add	r1, sp, #12
    20ba:	3011      	adds	r0, #17
    20bc:	4798      	blx	r3
    20be:	e76d      	b.n	1f9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    20c0:	2300      	movs	r3, #0
    20c2:	222c      	movs	r2, #44	; 0x2c
    20c4:	a903      	add	r1, sp, #12
    20c6:	0028      	movs	r0, r5
    20c8:	4c3e      	ldr	r4, [pc, #248]	; (21c4 <STACK_SIZE+0x1c4>)
    20ca:	47a0      	blx	r4
    20cc:	2800      	cmp	r0, #0
    20ce:	d000      	beq.n	20d2 <STACK_SIZE+0xd2>
    20d0:	e764      	b.n	1f9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    20d2:	4b3d      	ldr	r3, [pc, #244]	; (21c8 <STACK_SIZE+0x1c8>)
    20d4:	681b      	ldr	r3, [r3, #0]
    20d6:	2b00      	cmp	r3, #0
    20d8:	d100      	bne.n	20dc <STACK_SIZE+0xdc>
    20da:	e75f      	b.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    20dc:	a903      	add	r1, sp, #12
    20de:	3013      	adds	r0, #19
    20e0:	4798      	blx	r3
    20e2:	e75b      	b.n	1f9c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    20e4:	2300      	movs	r3, #0
    20e6:	2204      	movs	r2, #4
    20e8:	a91c      	add	r1, sp, #112	; 0x70
    20ea:	0028      	movs	r0, r5
    20ec:	4c35      	ldr	r4, [pc, #212]	; (21c4 <STACK_SIZE+0x1c4>)
    20ee:	47a0      	blx	r4
    20f0:	2800      	cmp	r0, #0
    20f2:	d000      	beq.n	20f6 <STACK_SIZE+0xf6>
    20f4:	e752      	b.n	1f9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    20f6:	4b34      	ldr	r3, [pc, #208]	; (21c8 <STACK_SIZE+0x1c8>)
    20f8:	681b      	ldr	r3, [r3, #0]
    20fa:	2b00      	cmp	r3, #0
    20fc:	d100      	bne.n	2100 <STACK_SIZE+0x100>
    20fe:	e74d      	b.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    2100:	a91c      	add	r1, sp, #112	; 0x70
    2102:	3004      	adds	r0, #4
    2104:	4798      	blx	r3
    2106:	e749      	b.n	1f9c <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2108:	2300      	movs	r3, #0
    210a:	2204      	movs	r2, #4
    210c:	a91c      	add	r1, sp, #112	; 0x70
    210e:	0028      	movs	r0, r5
    2110:	4c2c      	ldr	r4, [pc, #176]	; (21c4 <STACK_SIZE+0x1c4>)
    2112:	47a0      	blx	r4
    2114:	2800      	cmp	r0, #0
    2116:	d000      	beq.n	211a <STACK_SIZE+0x11a>
    2118:	e740      	b.n	1f9c <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    211a:	4b2b      	ldr	r3, [pc, #172]	; (21c8 <STACK_SIZE+0x1c8>)
    211c:	681b      	ldr	r3, [r3, #0]
    211e:	2b00      	cmp	r3, #0
    2120:	d100      	bne.n	2124 <STACK_SIZE+0x124>
    2122:	e73b      	b.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    2124:	a91c      	add	r1, sp, #112	; 0x70
    2126:	3065      	adds	r0, #101	; 0x65
    2128:	4798      	blx	r3
    212a:	e737      	b.n	1f9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    212c:	2301      	movs	r3, #1
    212e:	2264      	movs	r2, #100	; 0x64
    2130:	a903      	add	r1, sp, #12
    2132:	0028      	movs	r0, r5
    2134:	4c23      	ldr	r4, [pc, #140]	; (21c4 <STACK_SIZE+0x1c4>)
    2136:	47a0      	blx	r4
    2138:	2800      	cmp	r0, #0
    213a:	d000      	beq.n	213e <STACK_SIZE+0x13e>
    213c:	e72e      	b.n	1f9c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    213e:	4b22      	ldr	r3, [pc, #136]	; (21c8 <STACK_SIZE+0x1c8>)
    2140:	681b      	ldr	r3, [r3, #0]
    2142:	2b00      	cmp	r3, #0
    2144:	d100      	bne.n	2148 <STACK_SIZE+0x148>
    2146:	e729      	b.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    2148:	a903      	add	r1, sp, #12
    214a:	3009      	adds	r0, #9
    214c:	4798      	blx	r3
    214e:	e725      	b.n	1f9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    2150:	2301      	movs	r3, #1
    2152:	2204      	movs	r2, #4
    2154:	a903      	add	r1, sp, #12
    2156:	0028      	movs	r0, r5
    2158:	4c1a      	ldr	r4, [pc, #104]	; (21c4 <STACK_SIZE+0x1c4>)
    215a:	47a0      	blx	r4
    215c:	2800      	cmp	r0, #0
    215e:	d000      	beq.n	2162 <STACK_SIZE+0x162>
    2160:	e71c      	b.n	1f9c <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    2162:	4b19      	ldr	r3, [pc, #100]	; (21c8 <STACK_SIZE+0x1c8>)
    2164:	681b      	ldr	r3, [r3, #0]
    2166:	2b00      	cmp	r3, #0
    2168:	d100      	bne.n	216c <STACK_SIZE+0x16c>
    216a:	e717      	b.n	1f9c <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    216c:	a903      	add	r1, sp, #12
    216e:	302a      	adds	r0, #42	; 0x2a
    2170:	4798      	blx	r3
    2172:	e713      	b.n	1f9c <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    2174:	2300      	movs	r3, #0
    2176:	2208      	movs	r2, #8
    2178:	a903      	add	r1, sp, #12
    217a:	0028      	movs	r0, r5
    217c:	4c11      	ldr	r4, [pc, #68]	; (21c4 <STACK_SIZE+0x1c4>)
    217e:	47a0      	blx	r4
    2180:	2800      	cmp	r0, #0
    2182:	d000      	beq.n	2186 <STACK_SIZE+0x186>
    2184:	e70a      	b.n	1f9c <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    2186:	ab03      	add	r3, sp, #12
    2188:	889a      	ldrh	r2, [r3, #4]
    218a:	0028      	movs	r0, r5
    218c:	3008      	adds	r0, #8
    218e:	2301      	movs	r3, #1
    2190:	9903      	ldr	r1, [sp, #12]
    2192:	4c0c      	ldr	r4, [pc, #48]	; (21c4 <STACK_SIZE+0x1c4>)
    2194:	47a0      	blx	r4
    2196:	2800      	cmp	r0, #0
    2198:	d000      	beq.n	219c <STACK_SIZE+0x19c>
    219a:	e6ff      	b.n	1f9c <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    219c:	4b0a      	ldr	r3, [pc, #40]	; (21c8 <STACK_SIZE+0x1c8>)
    219e:	681b      	ldr	r3, [r3, #0]
    21a0:	2b00      	cmp	r3, #0
    21a2:	d100      	bne.n	21a6 <STACK_SIZE+0x1a6>
    21a4:	e6fa      	b.n	1f9c <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    21a6:	a903      	add	r1, sp, #12
    21a8:	3020      	adds	r0, #32
    21aa:	4798      	blx	r3
    21ac:	e6f6      	b.n	1f9c <m2m_wifi_cb+0x68>
    21ae:	46c0      	nop			; (mov r8, r8)
    21b0:	0000d138 	.word	0x0000d138
    21b4:	0000cdd0 	.word	0x0000cdd0
    21b8:	0000b779 	.word	0x0000b779
    21bc:	0000d188 	.word	0x0000d188
    21c0:	0000b7ad 	.word	0x0000b7ad
    21c4:	00001d91 	.word	0x00001d91
    21c8:	200003a0 	.word	0x200003a0
    21cc:	00001665 	.word	0x00001665
    21d0:	0000d100 	.word	0x0000d100
    21d4:	0000d168 	.word	0x0000d168
    21d8:	200003a5 	.word	0x200003a5
    21dc:	200003a4 	.word	0x200003a4

000021e0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    21e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21e2:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    21e4:	2201      	movs	r2, #1
    21e6:	230f      	movs	r3, #15
    21e8:	446b      	add	r3, sp
    21ea:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    21ec:	2800      	cmp	r0, #0
    21ee:	d061      	beq.n	22b4 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    21f0:	6802      	ldr	r2, [r0, #0]
    21f2:	4b32      	ldr	r3, [pc, #200]	; (22bc <m2m_wifi_init+0xdc>)
    21f4:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    21f6:	2200      	movs	r2, #0
    21f8:	4b31      	ldr	r3, [pc, #196]	; (22c0 <m2m_wifi_init+0xe0>)
    21fa:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    21fc:	200f      	movs	r0, #15
    21fe:	4468      	add	r0, sp
    2200:	4b30      	ldr	r3, [pc, #192]	; (22c4 <m2m_wifi_init+0xe4>)
    2202:	4798      	blx	r3
    2204:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    2206:	d002      	beq.n	220e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    2208:	0020      	movs	r0, r4
    220a:	b00f      	add	sp, #60	; 0x3c
    220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    220e:	2000      	movs	r0, #0
    2210:	4b2d      	ldr	r3, [pc, #180]	; (22c8 <m2m_wifi_init+0xe8>)
    2212:	4798      	blx	r3
    2214:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    2216:	d149      	bne.n	22ac <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    2218:	492c      	ldr	r1, [pc, #176]	; (22cc <m2m_wifi_init+0xec>)
    221a:	2001      	movs	r0, #1
    221c:	4b2c      	ldr	r3, [pc, #176]	; (22d0 <m2m_wifi_init+0xf0>)
    221e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    2220:	ae04      	add	r6, sp, #16
    2222:	0030      	movs	r0, r6
    2224:	4b2b      	ldr	r3, [pc, #172]	; (22d4 <m2m_wifi_init+0xf4>)
    2226:	4798      	blx	r3
    2228:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    222a:	482b      	ldr	r0, [pc, #172]	; (22d8 <m2m_wifi_init+0xf8>)
    222c:	4d2b      	ldr	r5, [pc, #172]	; (22dc <m2m_wifi_init+0xfc>)
    222e:	47a8      	blx	r5
    2230:	79b3      	ldrb	r3, [r6, #6]
    2232:	7972      	ldrb	r2, [r6, #5]
    2234:	7931      	ldrb	r1, [r6, #4]
    2236:	8c30      	ldrh	r0, [r6, #32]
    2238:	9000      	str	r0, [sp, #0]
    223a:	4829      	ldr	r0, [pc, #164]	; (22e0 <m2m_wifi_init+0x100>)
    223c:	47a8      	blx	r5
    223e:	200d      	movs	r0, #13
    2240:	4f28      	ldr	r7, [pc, #160]	; (22e4 <m2m_wifi_init+0x104>)
    2242:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    2244:	4824      	ldr	r0, [pc, #144]	; (22d8 <m2m_wifi_init+0xf8>)
    2246:	47a8      	blx	r5
    2248:	2226      	movs	r2, #38	; 0x26
    224a:	446a      	add	r2, sp
    224c:	211a      	movs	r1, #26
    224e:	4469      	add	r1, sp
    2250:	4825      	ldr	r0, [pc, #148]	; (22e8 <m2m_wifi_init+0x108>)
    2252:	47a8      	blx	r5
    2254:	200d      	movs	r0, #13
    2256:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2258:	481f      	ldr	r0, [pc, #124]	; (22d8 <m2m_wifi_init+0xf8>)
    225a:	47a8      	blx	r5
    225c:	7a73      	ldrb	r3, [r6, #9]
    225e:	7a32      	ldrb	r2, [r6, #8]
    2260:	79f1      	ldrb	r1, [r6, #7]
    2262:	4822      	ldr	r0, [pc, #136]	; (22ec <m2m_wifi_init+0x10c>)
    2264:	47a8      	blx	r5
    2266:	200d      	movs	r0, #13
    2268:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    226a:	481b      	ldr	r0, [pc, #108]	; (22d8 <m2m_wifi_init+0xf8>)
    226c:	47a8      	blx	r5
    226e:	2304      	movs	r3, #4
    2270:	2205      	movs	r2, #5
    2272:	2113      	movs	r1, #19
    2274:	481e      	ldr	r0, [pc, #120]	; (22f0 <m2m_wifi_init+0x110>)
    2276:	47a8      	blx	r5
    2278:	200d      	movs	r0, #13
    227a:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    227c:	4816      	ldr	r0, [pc, #88]	; (22d8 <m2m_wifi_init+0xf8>)
    227e:	47a8      	blx	r5
    2280:	4a1c      	ldr	r2, [pc, #112]	; (22f4 <m2m_wifi_init+0x114>)
    2282:	491d      	ldr	r1, [pc, #116]	; (22f8 <m2m_wifi_init+0x118>)
    2284:	481d      	ldr	r0, [pc, #116]	; (22fc <m2m_wifi_init+0x11c>)
    2286:	47a8      	blx	r5
    2288:	200d      	movs	r0, #13
    228a:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    228c:	0023      	movs	r3, r4
    228e:	330d      	adds	r3, #13
    2290:	d1ba      	bne.n	2208 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    2292:	22e8      	movs	r2, #232	; 0xe8
    2294:	32ff      	adds	r2, #255	; 0xff
    2296:	491a      	ldr	r1, [pc, #104]	; (2300 <m2m_wifi_init+0x120>)
    2298:	481a      	ldr	r0, [pc, #104]	; (2304 <m2m_wifi_init+0x124>)
    229a:	4b10      	ldr	r3, [pc, #64]	; (22dc <m2m_wifi_init+0xfc>)
    229c:	4798      	blx	r3
    229e:	481a      	ldr	r0, [pc, #104]	; (2308 <m2m_wifi_init+0x128>)
    22a0:	4b1a      	ldr	r3, [pc, #104]	; (230c <m2m_wifi_init+0x12c>)
    22a2:	4798      	blx	r3
    22a4:	200d      	movs	r0, #13
    22a6:	4b0f      	ldr	r3, [pc, #60]	; (22e4 <m2m_wifi_init+0x104>)
    22a8:	4798      	blx	r3
    22aa:	e7ad      	b.n	2208 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    22ac:	2000      	movs	r0, #0
    22ae:	4b18      	ldr	r3, [pc, #96]	; (2310 <m2m_wifi_init+0x130>)
    22b0:	4798      	blx	r3
    22b2:	e7a9      	b.n	2208 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    22b4:	240c      	movs	r4, #12
    22b6:	4264      	negs	r4, r4
    22b8:	e7a6      	b.n	2208 <m2m_wifi_init+0x28>
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	200003a0 	.word	0x200003a0
    22c0:	200003a5 	.word	0x200003a5
    22c4:	00002c81 	.word	0x00002c81
    22c8:	00001efd 	.word	0x00001efd
    22cc:	00001f35 	.word	0x00001f35
    22d0:	00001e79 	.word	0x00001e79
    22d4:	00002b9d 	.word	0x00002b9d
    22d8:	0000d100 	.word	0x0000d100
    22dc:	0000b779 	.word	0x0000b779
    22e0:	0000d244 	.word	0x0000d244
    22e4:	0000b7ad 	.word	0x0000b7ad
    22e8:	0000d26c 	.word	0x0000d26c
    22ec:	0000d288 	.word	0x0000d288
    22f0:	0000d2ac 	.word	0x0000d2ac
    22f4:	0000d2c4 	.word	0x0000d2c4
    22f8:	0000d2d0 	.word	0x0000d2d0
    22fc:	0000d2dc 	.word	0x0000d2dc
    2300:	0000d144 	.word	0x0000d144
    2304:	0000cdd0 	.word	0x0000cdd0
    2308:	0000d2f4 	.word	0x0000d2f4
    230c:	0000b895 	.word	0x0000b895
    2310:	00002d55 	.word	0x00002d55

00002314 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    2314:	b510      	push	{r4, lr}
	return hif_handle_isr();
    2316:	4b01      	ldr	r3, [pc, #4]	; (231c <m2m_wifi_handle_events+0x8>)
    2318:	4798      	blx	r3
}
    231a:	bd10      	pop	{r4, pc}
    231c:	000019a9 	.word	0x000019a9

00002320 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    2320:	b5f0      	push	{r4, r5, r6, r7, lr}
    2322:	46ce      	mov	lr, r9
    2324:	4647      	mov	r7, r8
    2326:	b580      	push	{r7, lr}
    2328:	b0a3      	sub	sp, #140	; 0x8c
    232a:	9005      	str	r0, [sp, #20]
    232c:	000c      	movs	r4, r1
    232e:	0015      	movs	r5, r2
    2330:	001f      	movs	r7, r3
    2332:	ab2a      	add	r3, sp, #168	; 0xa8
    2334:	881b      	ldrh	r3, [r3, #0]
    2336:	4699      	mov	r9, r3
    2338:	ab2b      	add	r3, sp, #172	; 0xac
    233a:	781b      	ldrb	r3, [r3, #0]
    233c:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    233e:	2a01      	cmp	r2, #1
    2340:	d003      	beq.n	234a <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    2342:	2f00      	cmp	r7, #0
    2344:	d040      	beq.n	23c8 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2346:	2a02      	cmp	r2, #2
    2348:	d04c      	beq.n	23e4 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    234a:	1e63      	subs	r3, r4, #1
    234c:	2b1f      	cmp	r3, #31
    234e:	d900      	bls.n	2352 <m2m_wifi_connect_sc+0x32>
    2350:	e078      	b.n	2444 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    2352:	464b      	mov	r3, r9
    2354:	3b01      	subs	r3, #1
    2356:	b29b      	uxth	r3, r3
    2358:	2b0d      	cmp	r3, #13
    235a:	d903      	bls.n	2364 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    235c:	464b      	mov	r3, r9
    235e:	2bff      	cmp	r3, #255	; 0xff
    2360:	d000      	beq.n	2364 <m2m_wifi_connect_sc+0x44>
    2362:	e07e      	b.n	2462 <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2364:	ae07      	add	r6, sp, #28
    2366:	0022      	movs	r2, r4
    2368:	9905      	ldr	r1, [sp, #20]
    236a:	205a      	movs	r0, #90	; 0x5a
    236c:	ab02      	add	r3, sp, #8
    236e:	469c      	mov	ip, r3
    2370:	4460      	add	r0, ip
    2372:	4b79      	ldr	r3, [pc, #484]	; (2558 <m2m_wifi_connect_sc+0x238>)
    2374:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2376:	1934      	adds	r4, r6, r4
    2378:	3446      	adds	r4, #70	; 0x46
    237a:	2300      	movs	r3, #0
    237c:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    237e:	3344      	adds	r3, #68	; 0x44
    2380:	464a      	mov	r2, r9
    2382:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2384:	4643      	mov	r3, r8
    2386:	1e5a      	subs	r2, r3, #1
    2388:	4193      	sbcs	r3, r2
    238a:	2267      	movs	r2, #103	; 0x67
    238c:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    238e:	2341      	movs	r3, #65	; 0x41
    2390:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    2392:	2d03      	cmp	r5, #3
    2394:	d100      	bne.n	2398 <m2m_wifi_connect_sc+0x78>
    2396:	e072      	b.n	247e <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2398:	2d02      	cmp	r5, #2
    239a:	d100      	bne.n	239e <m2m_wifi_connect_sc+0x7e>
    239c:	e0ac      	b.n	24f8 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    239e:	2d04      	cmp	r5, #4
    23a0:	d100      	bne.n	23a4 <m2m_wifi_connect_sc+0x84>
    23a2:	e0c4      	b.n	252e <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    23a4:	2d01      	cmp	r5, #1
    23a6:	d000      	beq.n	23aa <m2m_wifi_connect_sc+0x8a>
    23a8:	e0c7      	b.n	253a <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    23aa:	2300      	movs	r3, #0
    23ac:	9302      	str	r3, [sp, #8]
    23ae:	9301      	str	r3, [sp, #4]
    23b0:	9300      	str	r3, [sp, #0]
    23b2:	336c      	adds	r3, #108	; 0x6c
    23b4:	aa07      	add	r2, sp, #28
    23b6:	2128      	movs	r1, #40	; 0x28
    23b8:	2001      	movs	r0, #1
    23ba:	4c68      	ldr	r4, [pc, #416]	; (255c <m2m_wifi_connect_sc+0x23c>)
    23bc:	47a0      	blx	r4

ERR1:
	return ret;
}
    23be:	b023      	add	sp, #140	; 0x8c
    23c0:	bc0c      	pop	{r2, r3}
    23c2:	4690      	mov	r8, r2
    23c4:	4699      	mov	r9, r3
    23c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    23c8:	4a65      	ldr	r2, [pc, #404]	; (2560 <m2m_wifi_connect_sc+0x240>)
    23ca:	4966      	ldr	r1, [pc, #408]	; (2564 <m2m_wifi_connect_sc+0x244>)
    23cc:	4866      	ldr	r0, [pc, #408]	; (2568 <m2m_wifi_connect_sc+0x248>)
    23ce:	4b67      	ldr	r3, [pc, #412]	; (256c <m2m_wifi_connect_sc+0x24c>)
    23d0:	4798      	blx	r3
    23d2:	4867      	ldr	r0, [pc, #412]	; (2570 <m2m_wifi_connect_sc+0x250>)
    23d4:	4b67      	ldr	r3, [pc, #412]	; (2574 <m2m_wifi_connect_sc+0x254>)
    23d6:	4798      	blx	r3
    23d8:	200d      	movs	r0, #13
    23da:	4b67      	ldr	r3, [pc, #412]	; (2578 <m2m_wifi_connect_sc+0x258>)
    23dc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23de:	200c      	movs	r0, #12
    23e0:	4240      	negs	r0, r0
			goto ERR1;
    23e2:	e7ec      	b.n	23be <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    23e4:	0038      	movs	r0, r7
    23e6:	4b65      	ldr	r3, [pc, #404]	; (257c <m2m_wifi_connect_sc+0x25c>)
    23e8:	4798      	blx	r3
    23ea:	2840      	cmp	r0, #64	; 0x40
    23ec:	d1ad      	bne.n	234a <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    23ee:	783b      	ldrb	r3, [r7, #0]
    23f0:	001a      	movs	r2, r3
    23f2:	3a30      	subs	r2, #48	; 0x30
    23f4:	2a36      	cmp	r2, #54	; 0x36
    23f6:	d817      	bhi.n	2428 <m2m_wifi_connect_sc+0x108>
    23f8:	3a0a      	subs	r2, #10
    23fa:	2a06      	cmp	r2, #6
    23fc:	d914      	bls.n	2428 <m2m_wifi_connect_sc+0x108>
    23fe:	3b47      	subs	r3, #71	; 0x47
    2400:	2b19      	cmp	r3, #25
    2402:	d911      	bls.n	2428 <m2m_wifi_connect_sc+0x108>
    2404:	1c7a      	adds	r2, r7, #1
    2406:	0038      	movs	r0, r7
    2408:	3040      	adds	r0, #64	; 0x40
    240a:	7813      	ldrb	r3, [r2, #0]
    240c:	0019      	movs	r1, r3
    240e:	3930      	subs	r1, #48	; 0x30
    2410:	2936      	cmp	r1, #54	; 0x36
    2412:	d809      	bhi.n	2428 <m2m_wifi_connect_sc+0x108>
    2414:	390a      	subs	r1, #10
    2416:	2906      	cmp	r1, #6
    2418:	d906      	bls.n	2428 <m2m_wifi_connect_sc+0x108>
    241a:	3b47      	subs	r3, #71	; 0x47
    241c:	2b19      	cmp	r3, #25
    241e:	d903      	bls.n	2428 <m2m_wifi_connect_sc+0x108>
    2420:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    2422:	4282      	cmp	r2, r0
    2424:	d1f1      	bne.n	240a <m2m_wifi_connect_sc+0xea>
    2426:	e790      	b.n	234a <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    2428:	4a55      	ldr	r2, [pc, #340]	; (2580 <m2m_wifi_connect_sc+0x260>)
    242a:	494e      	ldr	r1, [pc, #312]	; (2564 <m2m_wifi_connect_sc+0x244>)
    242c:	484e      	ldr	r0, [pc, #312]	; (2568 <m2m_wifi_connect_sc+0x248>)
    242e:	4b4f      	ldr	r3, [pc, #316]	; (256c <m2m_wifi_connect_sc+0x24c>)
    2430:	4798      	blx	r3
    2432:	4854      	ldr	r0, [pc, #336]	; (2584 <m2m_wifi_connect_sc+0x264>)
    2434:	4b4f      	ldr	r3, [pc, #316]	; (2574 <m2m_wifi_connect_sc+0x254>)
    2436:	4798      	blx	r3
    2438:	200d      	movs	r0, #13
    243a:	4b4f      	ldr	r3, [pc, #316]	; (2578 <m2m_wifi_connect_sc+0x258>)
    243c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    243e:	200c      	movs	r0, #12
    2440:	4240      	negs	r0, r0
					goto ERR1;
    2442:	e7bc      	b.n	23be <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    2444:	228c      	movs	r2, #140	; 0x8c
    2446:	0092      	lsls	r2, r2, #2
    2448:	4946      	ldr	r1, [pc, #280]	; (2564 <m2m_wifi_connect_sc+0x244>)
    244a:	4847      	ldr	r0, [pc, #284]	; (2568 <m2m_wifi_connect_sc+0x248>)
    244c:	4b47      	ldr	r3, [pc, #284]	; (256c <m2m_wifi_connect_sc+0x24c>)
    244e:	4798      	blx	r3
    2450:	484d      	ldr	r0, [pc, #308]	; (2588 <m2m_wifi_connect_sc+0x268>)
    2452:	4b48      	ldr	r3, [pc, #288]	; (2574 <m2m_wifi_connect_sc+0x254>)
    2454:	4798      	blx	r3
    2456:	200d      	movs	r0, #13
    2458:	4b47      	ldr	r3, [pc, #284]	; (2578 <m2m_wifi_connect_sc+0x258>)
    245a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    245c:	200c      	movs	r0, #12
    245e:	4240      	negs	r0, r0
		goto ERR1;
    2460:	e7ad      	b.n	23be <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    2462:	4a4a      	ldr	r2, [pc, #296]	; (258c <m2m_wifi_connect_sc+0x26c>)
    2464:	493f      	ldr	r1, [pc, #252]	; (2564 <m2m_wifi_connect_sc+0x244>)
    2466:	4840      	ldr	r0, [pc, #256]	; (2568 <m2m_wifi_connect_sc+0x248>)
    2468:	4b40      	ldr	r3, [pc, #256]	; (256c <m2m_wifi_connect_sc+0x24c>)
    246a:	4798      	blx	r3
    246c:	4848      	ldr	r0, [pc, #288]	; (2590 <m2m_wifi_connect_sc+0x270>)
    246e:	4b41      	ldr	r3, [pc, #260]	; (2574 <m2m_wifi_connect_sc+0x254>)
    2470:	4798      	blx	r3
    2472:	200d      	movs	r0, #13
    2474:	4b40      	ldr	r3, [pc, #256]	; (2578 <m2m_wifi_connect_sc+0x258>)
    2476:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2478:	200c      	movs	r0, #12
    247a:	4240      	negs	r0, r0
			goto ERR1;
    247c:	e79f      	b.n	23be <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    247e:	783b      	ldrb	r3, [r7, #0]
    2480:	3b01      	subs	r3, #1
    2482:	b2db      	uxtb	r3, r3
    2484:	aa07      	add	r2, sp, #28
    2486:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2488:	2b03      	cmp	r3, #3
    248a:	d817      	bhi.n	24bc <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    248c:	787a      	ldrb	r2, [r7, #1]
    248e:	1e51      	subs	r1, r2, #1
    2490:	ab07      	add	r3, sp, #28
    2492:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2494:	2310      	movs	r3, #16
    2496:	0011      	movs	r1, r2
    2498:	4399      	bics	r1, r3
    249a:	290b      	cmp	r1, #11
    249c:	d01e      	beq.n	24dc <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    249e:	4a3d      	ldr	r2, [pc, #244]	; (2594 <m2m_wifi_connect_sc+0x274>)
    24a0:	4930      	ldr	r1, [pc, #192]	; (2564 <m2m_wifi_connect_sc+0x244>)
    24a2:	4831      	ldr	r0, [pc, #196]	; (2568 <m2m_wifi_connect_sc+0x248>)
    24a4:	4c31      	ldr	r4, [pc, #196]	; (256c <m2m_wifi_connect_sc+0x24c>)
    24a6:	47a0      	blx	r4
    24a8:	ab07      	add	r3, sp, #28
    24aa:	7859      	ldrb	r1, [r3, #1]
    24ac:	483a      	ldr	r0, [pc, #232]	; (2598 <m2m_wifi_connect_sc+0x278>)
    24ae:	47a0      	blx	r4
    24b0:	200d      	movs	r0, #13
    24b2:	4b31      	ldr	r3, [pc, #196]	; (2578 <m2m_wifi_connect_sc+0x258>)
    24b4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    24b6:	200c      	movs	r0, #12
    24b8:	4240      	negs	r0, r0
			goto ERR1;
    24ba:	e780      	b.n	23be <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    24bc:	2294      	movs	r2, #148	; 0x94
    24be:	0092      	lsls	r2, r2, #2
    24c0:	4928      	ldr	r1, [pc, #160]	; (2564 <m2m_wifi_connect_sc+0x244>)
    24c2:	4829      	ldr	r0, [pc, #164]	; (2568 <m2m_wifi_connect_sc+0x248>)
    24c4:	4c29      	ldr	r4, [pc, #164]	; (256c <m2m_wifi_connect_sc+0x24c>)
    24c6:	47a0      	blx	r4
    24c8:	ab07      	add	r3, sp, #28
    24ca:	7819      	ldrb	r1, [r3, #0]
    24cc:	4833      	ldr	r0, [pc, #204]	; (259c <m2m_wifi_connect_sc+0x27c>)
    24ce:	47a0      	blx	r4
    24d0:	200d      	movs	r0, #13
    24d2:	4b29      	ldr	r3, [pc, #164]	; (2578 <m2m_wifi_connect_sc+0x258>)
    24d4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    24d6:	200c      	movs	r0, #12
    24d8:	4240      	negs	r0, r0
			goto ERR1;
    24da:	e770      	b.n	23be <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    24dc:	1cb9      	adds	r1, r7, #2
    24de:	2016      	movs	r0, #22
    24e0:	ab02      	add	r3, sp, #8
    24e2:	469c      	mov	ip, r3
    24e4:	4460      	add	r0, ip
    24e6:	4b1c      	ldr	r3, [pc, #112]	; (2558 <m2m_wifi_connect_sc+0x238>)
    24e8:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    24ea:	787b      	ldrb	r3, [r7, #1]
    24ec:	aa07      	add	r2, sp, #28
    24ee:	4694      	mov	ip, r2
    24f0:	4463      	add	r3, ip
    24f2:	2200      	movs	r2, #0
    24f4:	709a      	strb	r2, [r3, #2]
    24f6:	e758      	b.n	23aa <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    24f8:	0038      	movs	r0, r7
    24fa:	4b20      	ldr	r3, [pc, #128]	; (257c <m2m_wifi_connect_sc+0x25c>)
    24fc:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    24fe:	1e43      	subs	r3, r0, #1
    2500:	b29b      	uxth	r3, r3
    2502:	2b3f      	cmp	r3, #63	; 0x3f
    2504:	d805      	bhi.n	2512 <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2506:	1c42      	adds	r2, r0, #1
    2508:	0039      	movs	r1, r7
    250a:	a807      	add	r0, sp, #28
    250c:	4b12      	ldr	r3, [pc, #72]	; (2558 <m2m_wifi_connect_sc+0x238>)
    250e:	4798      	blx	r3
    2510:	e74b      	b.n	23aa <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    2512:	4a23      	ldr	r2, [pc, #140]	; (25a0 <m2m_wifi_connect_sc+0x280>)
    2514:	4913      	ldr	r1, [pc, #76]	; (2564 <m2m_wifi_connect_sc+0x244>)
    2516:	4814      	ldr	r0, [pc, #80]	; (2568 <m2m_wifi_connect_sc+0x248>)
    2518:	4b14      	ldr	r3, [pc, #80]	; (256c <m2m_wifi_connect_sc+0x24c>)
    251a:	4798      	blx	r3
    251c:	4821      	ldr	r0, [pc, #132]	; (25a4 <m2m_wifi_connect_sc+0x284>)
    251e:	4b15      	ldr	r3, [pc, #84]	; (2574 <m2m_wifi_connect_sc+0x254>)
    2520:	4798      	blx	r3
    2522:	200d      	movs	r0, #13
    2524:	4b14      	ldr	r3, [pc, #80]	; (2578 <m2m_wifi_connect_sc+0x258>)
    2526:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2528:	200c      	movs	r0, #12
    252a:	4240      	negs	r0, r0
			goto ERR1;
    252c:	e747      	b.n	23be <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    252e:	223e      	movs	r2, #62	; 0x3e
    2530:	0039      	movs	r1, r7
    2532:	a807      	add	r0, sp, #28
    2534:	4b08      	ldr	r3, [pc, #32]	; (2558 <m2m_wifi_connect_sc+0x238>)
    2536:	4798      	blx	r3
    2538:	e737      	b.n	23aa <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    253a:	4a1b      	ldr	r2, [pc, #108]	; (25a8 <m2m_wifi_connect_sc+0x288>)
    253c:	4909      	ldr	r1, [pc, #36]	; (2564 <m2m_wifi_connect_sc+0x244>)
    253e:	480a      	ldr	r0, [pc, #40]	; (2568 <m2m_wifi_connect_sc+0x248>)
    2540:	4b0a      	ldr	r3, [pc, #40]	; (256c <m2m_wifi_connect_sc+0x24c>)
    2542:	4798      	blx	r3
    2544:	4819      	ldr	r0, [pc, #100]	; (25ac <m2m_wifi_connect_sc+0x28c>)
    2546:	4b0b      	ldr	r3, [pc, #44]	; (2574 <m2m_wifi_connect_sc+0x254>)
    2548:	4798      	blx	r3
    254a:	200d      	movs	r0, #13
    254c:	4b0a      	ldr	r3, [pc, #40]	; (2578 <m2m_wifi_connect_sc+0x258>)
    254e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2550:	200c      	movs	r0, #12
    2552:	4240      	negs	r0, r0
		goto ERR1;
    2554:	e733      	b.n	23be <m2m_wifi_connect_sc+0x9e>
    2556:	46c0      	nop			; (mov r8, r8)
    2558:	00001651 	.word	0x00001651
    255c:	00001779 	.word	0x00001779
    2560:	0000021a 	.word	0x0000021a
    2564:	0000d154 	.word	0x0000d154
    2568:	0000cdd0 	.word	0x0000cdd0
    256c:	0000b779 	.word	0x0000b779
    2570:	0000d19c 	.word	0x0000d19c
    2574:	0000b895 	.word	0x0000b895
    2578:	0000b7ad 	.word	0x0000b7ad
    257c:	00001675 	.word	0x00001675
    2580:	00000226 	.word	0x00000226
    2584:	0000d1b0 	.word	0x0000d1b0
    2588:	0000d1bc 	.word	0x0000d1bc
    258c:	00000239 	.word	0x00000239
    2590:	0000d1d0 	.word	0x0000d1d0
    2594:	00000257 	.word	0x00000257
    2598:	0000d1f8 	.word	0x0000d1f8
    259c:	0000d1dc 	.word	0x0000d1dc
    25a0:	00000266 	.word	0x00000266
    25a4:	0000d214 	.word	0x0000d214
    25a8:	00000276 	.word	0x00000276
    25ac:	0000d230 	.word	0x0000d230

000025b0 <m2m_wifi_connect>:
{
    25b0:	b530      	push	{r4, r5, lr}
    25b2:	b083      	sub	sp, #12
    25b4:	ac06      	add	r4, sp, #24
    25b6:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    25b8:	2500      	movs	r5, #0
    25ba:	9501      	str	r5, [sp, #4]
    25bc:	9400      	str	r4, [sp, #0]
    25be:	4c02      	ldr	r4, [pc, #8]	; (25c8 <m2m_wifi_connect+0x18>)
    25c0:	47a0      	blx	r4
}
    25c2:	b003      	add	sp, #12
    25c4:	bd30      	pop	{r4, r5, pc}
    25c6:	46c0      	nop			; (mov r8, r8)
    25c8:	00002321 	.word	0x00002321

000025cc <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    25cc:	2000      	movs	r0, #0
    25ce:	4770      	bx	lr

000025d0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    25d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    25d2:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    25d4:	2580      	movs	r5, #128	; 0x80
    25d6:	006d      	lsls	r5, r5, #1
    25d8:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    25da:	24a5      	movs	r4, #165	; 0xa5
    25dc:	0164      	lsls	r4, r4, #5
    25de:	4f08      	ldr	r7, [pc, #32]	; (2600 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    25e0:	4e08      	ldr	r6, [pc, #32]	; (2604 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    25e2:	0029      	movs	r1, r5
    25e4:	0020      	movs	r0, r4
    25e6:	47b8      	blx	r7
			uint32 reg = 0;
    25e8:	2300      	movs	r3, #0
    25ea:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    25ec:	a901      	add	r1, sp, #4
    25ee:	0020      	movs	r0, r4
    25f0:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    25f2:	2800      	cmp	r0, #0
    25f4:	d1f5      	bne.n	25e2 <chip_apply_conf+0x12>
				if(reg == val32)
    25f6:	9b01      	ldr	r3, [sp, #4]
    25f8:	429d      	cmp	r5, r3
    25fa:	d1f2      	bne.n	25e2 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    25fc:	b003      	add	sp, #12
    25fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2600:	00002ac1 	.word	0x00002ac1
    2604:	00002ab5 	.word	0x00002ab5

00002608 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2608:	b500      	push	{lr}
    260a:	b083      	sub	sp, #12
	uint32 reg = 0;
    260c:	2300      	movs	r3, #0
    260e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2610:	a901      	add	r1, sp, #4
    2612:	4811      	ldr	r0, [pc, #68]	; (2658 <enable_interrupts+0x50>)
    2614:	4b11      	ldr	r3, [pc, #68]	; (265c <enable_interrupts+0x54>)
    2616:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2618:	2800      	cmp	r0, #0
    261a:	d001      	beq.n	2620 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    261c:	b003      	add	sp, #12
    261e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    2620:	2180      	movs	r1, #128	; 0x80
    2622:	0049      	lsls	r1, r1, #1
    2624:	9b01      	ldr	r3, [sp, #4]
    2626:	4319      	orrs	r1, r3
    2628:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    262a:	480b      	ldr	r0, [pc, #44]	; (2658 <enable_interrupts+0x50>)
    262c:	4b0c      	ldr	r3, [pc, #48]	; (2660 <enable_interrupts+0x58>)
    262e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2630:	2800      	cmp	r0, #0
    2632:	d1f3      	bne.n	261c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2634:	a901      	add	r1, sp, #4
    2636:	20d0      	movs	r0, #208	; 0xd0
    2638:	0140      	lsls	r0, r0, #5
    263a:	4b08      	ldr	r3, [pc, #32]	; (265c <enable_interrupts+0x54>)
    263c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    263e:	2800      	cmp	r0, #0
    2640:	d1ec      	bne.n	261c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    2642:	2180      	movs	r1, #128	; 0x80
    2644:	0249      	lsls	r1, r1, #9
    2646:	9b01      	ldr	r3, [sp, #4]
    2648:	4319      	orrs	r1, r3
    264a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    264c:	20d0      	movs	r0, #208	; 0xd0
    264e:	0140      	lsls	r0, r0, #5
    2650:	4b03      	ldr	r3, [pc, #12]	; (2660 <enable_interrupts+0x58>)
    2652:	4798      	blx	r3
    2654:	e7e2      	b.n	261c <enable_interrupts+0x14>
    2656:	46c0      	nop			; (mov r8, r8)
    2658:	00001408 	.word	0x00001408
    265c:	00002ab5 	.word	0x00002ab5
    2660:	00002ac1 	.word	0x00002ac1

00002664 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2664:	b510      	push	{r4, lr}
    2666:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    2668:	4b28      	ldr	r3, [pc, #160]	; (270c <nmi_get_chipid+0xa8>)
    266a:	681c      	ldr	r4, [r3, #0]
    266c:	2c00      	cmp	r4, #0
    266e:	d004      	beq.n	267a <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    2670:	4b26      	ldr	r3, [pc, #152]	; (270c <nmi_get_chipid+0xa8>)
    2672:	681c      	ldr	r4, [r3, #0]
}
    2674:	0020      	movs	r0, r4
    2676:	b002      	add	sp, #8
    2678:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    267a:	0019      	movs	r1, r3
    267c:	2080      	movs	r0, #128	; 0x80
    267e:	0140      	lsls	r0, r0, #5
    2680:	4b23      	ldr	r3, [pc, #140]	; (2710 <nmi_get_chipid+0xac>)
    2682:	4798      	blx	r3
    2684:	2800      	cmp	r0, #0
    2686:	d003      	beq.n	2690 <nmi_get_chipid+0x2c>
			chipid = 0;
    2688:	2200      	movs	r2, #0
    268a:	4b20      	ldr	r3, [pc, #128]	; (270c <nmi_get_chipid+0xa8>)
    268c:	601a      	str	r2, [r3, #0]
			return 0;
    268e:	e7f1      	b.n	2674 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    2690:	a901      	add	r1, sp, #4
    2692:	4820      	ldr	r0, [pc, #128]	; (2714 <nmi_get_chipid+0xb0>)
    2694:	4b1e      	ldr	r3, [pc, #120]	; (2710 <nmi_get_chipid+0xac>)
    2696:	4798      	blx	r3
    2698:	2800      	cmp	r0, #0
    269a:	d003      	beq.n	26a4 <nmi_get_chipid+0x40>
			chipid = 0;
    269c:	2200      	movs	r2, #0
    269e:	4b1b      	ldr	r3, [pc, #108]	; (270c <nmi_get_chipid+0xa8>)
    26a0:	601a      	str	r2, [r3, #0]
			return 0;
    26a2:	e7e7      	b.n	2674 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    26a4:	4b19      	ldr	r3, [pc, #100]	; (270c <nmi_get_chipid+0xa8>)
    26a6:	681b      	ldr	r3, [r3, #0]
    26a8:	4a1b      	ldr	r2, [pc, #108]	; (2718 <nmi_get_chipid+0xb4>)
    26aa:	4293      	cmp	r3, r2
    26ac:	d00e      	beq.n	26cc <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    26ae:	4a1b      	ldr	r2, [pc, #108]	; (271c <nmi_get_chipid+0xb8>)
    26b0:	4293      	cmp	r3, r2
    26b2:	d012      	beq.n	26da <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    26b4:	4a1a      	ldr	r2, [pc, #104]	; (2720 <nmi_get_chipid+0xbc>)
    26b6:	4293      	cmp	r3, r2
    26b8:	d01c      	beq.n	26f4 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    26ba:	4914      	ldr	r1, [pc, #80]	; (270c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    26bc:	4a19      	ldr	r2, [pc, #100]	; (2724 <nmi_get_chipid+0xc0>)
    26be:	680b      	ldr	r3, [r1, #0]
    26c0:	401a      	ands	r2, r3
		chipid |= 0x050000;
    26c2:	23a0      	movs	r3, #160	; 0xa0
    26c4:	02db      	lsls	r3, r3, #11
    26c6:	4313      	orrs	r3, r2
    26c8:	600b      	str	r3, [r1, #0]
    26ca:	e7d1      	b.n	2670 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    26cc:	9b01      	ldr	r3, [sp, #4]
    26ce:	2b01      	cmp	r3, #1
    26d0:	d0f3      	beq.n	26ba <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    26d2:	4a15      	ldr	r2, [pc, #84]	; (2728 <nmi_get_chipid+0xc4>)
    26d4:	4b0d      	ldr	r3, [pc, #52]	; (270c <nmi_get_chipid+0xa8>)
    26d6:	601a      	str	r2, [r3, #0]
    26d8:	e7ef      	b.n	26ba <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    26da:	9b01      	ldr	r3, [sp, #4]
    26dc:	2b03      	cmp	r3, #3
    26de:	d0ec      	beq.n	26ba <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    26e0:	2b04      	cmp	r3, #4
    26e2:	d003      	beq.n	26ec <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    26e4:	4a11      	ldr	r2, [pc, #68]	; (272c <nmi_get_chipid+0xc8>)
    26e6:	4b09      	ldr	r3, [pc, #36]	; (270c <nmi_get_chipid+0xa8>)
    26e8:	601a      	str	r2, [r3, #0]
    26ea:	e7e6      	b.n	26ba <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    26ec:	4a10      	ldr	r2, [pc, #64]	; (2730 <nmi_get_chipid+0xcc>)
    26ee:	4b07      	ldr	r3, [pc, #28]	; (270c <nmi_get_chipid+0xa8>)
    26f0:	601a      	str	r2, [r3, #0]
    26f2:	e7e2      	b.n	26ba <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    26f4:	4905      	ldr	r1, [pc, #20]	; (270c <nmi_get_chipid+0xa8>)
    26f6:	20ec      	movs	r0, #236	; 0xec
    26f8:	0380      	lsls	r0, r0, #14
    26fa:	4b05      	ldr	r3, [pc, #20]	; (2710 <nmi_get_chipid+0xac>)
    26fc:	4798      	blx	r3
    26fe:	2800      	cmp	r0, #0
    2700:	d0db      	beq.n	26ba <nmi_get_chipid+0x56>
			chipid = 0;
    2702:	2200      	movs	r2, #0
    2704:	4b01      	ldr	r3, [pc, #4]	; (270c <nmi_get_chipid+0xa8>)
    2706:	601a      	str	r2, [r3, #0]
			return 0;
    2708:	e7b4      	b.n	2674 <nmi_get_chipid+0x10>
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	200003a8 	.word	0x200003a8
    2710:	00002ab5 	.word	0x00002ab5
    2714:	000013f4 	.word	0x000013f4
    2718:	001002a0 	.word	0x001002a0
    271c:	001002b0 	.word	0x001002b0
    2720:	001000f0 	.word	0x001000f0
    2724:	fff0ffff 	.word	0xfff0ffff
    2728:	001002a1 	.word	0x001002a1
    272c:	001002b2 	.word	0x001002b2
    2730:	001002b1 	.word	0x001002b1

00002734 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2734:	b530      	push	{r4, r5, lr}
    2736:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2738:	4c16      	ldr	r4, [pc, #88]	; (2794 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    273a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    273c:	a901      	add	r1, sp, #4
    273e:	2010      	movs	r0, #16
    2740:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    2742:	2800      	cmp	r0, #0
    2744:	d11c      	bne.n	2780 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    2746:	9b01      	ldr	r3, [sp, #4]
    2748:	422b      	tst	r3, r5
    274a:	d1f7      	bne.n	273c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    274c:	a901      	add	r1, sp, #4
    274e:	3001      	adds	r0, #1
    2750:	4b10      	ldr	r3, [pc, #64]	; (2794 <chip_sleep+0x60>)
    2752:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2754:	2800      	cmp	r0, #0
    2756:	d113      	bne.n	2780 <chip_sleep+0x4c>
	if(reg & NBIT1)
    2758:	9901      	ldr	r1, [sp, #4]
    275a:	078b      	lsls	r3, r1, #30
    275c:	d507      	bpl.n	276e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    275e:	2302      	movs	r3, #2
    2760:	4399      	bics	r1, r3
    2762:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2764:	3001      	adds	r0, #1
    2766:	4b0c      	ldr	r3, [pc, #48]	; (2798 <chip_sleep+0x64>)
    2768:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    276a:	2800      	cmp	r0, #0
    276c:	d108      	bne.n	2780 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    276e:	a901      	add	r1, sp, #4
    2770:	200b      	movs	r0, #11
    2772:	4b08      	ldr	r3, [pc, #32]	; (2794 <chip_sleep+0x60>)
    2774:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2776:	2800      	cmp	r0, #0
    2778:	d102      	bne.n	2780 <chip_sleep+0x4c>
	if(reg & NBIT0)
    277a:	9901      	ldr	r1, [sp, #4]
    277c:	07cb      	lsls	r3, r1, #31
    277e:	d401      	bmi.n	2784 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    2780:	b003      	add	sp, #12
    2782:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    2784:	2301      	movs	r3, #1
    2786:	4399      	bics	r1, r3
    2788:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    278a:	300b      	adds	r0, #11
    278c:	4b02      	ldr	r3, [pc, #8]	; (2798 <chip_sleep+0x64>)
    278e:	4798      	blx	r3
    2790:	e7f6      	b.n	2780 <chip_sleep+0x4c>
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	00002ab5 	.word	0x00002ab5
    2798:	00002ac1 	.word	0x00002ac1

0000279c <chip_wake>:
sint8 chip_wake(void)
{
    279c:	b5f0      	push	{r4, r5, r6, r7, lr}
    279e:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    27a0:	2300      	movs	r3, #0
    27a2:	9301      	str	r3, [sp, #4]
    27a4:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    27a6:	a901      	add	r1, sp, #4
    27a8:	200b      	movs	r0, #11
    27aa:	4b28      	ldr	r3, [pc, #160]	; (284c <chip_wake+0xb0>)
    27ac:	4798      	blx	r3
    27ae:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27b0:	d130      	bne.n	2814 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    27b2:	9901      	ldr	r1, [sp, #4]
    27b4:	07cb      	lsls	r3, r1, #31
    27b6:	d406      	bmi.n	27c6 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    27b8:	2301      	movs	r3, #1
    27ba:	4319      	orrs	r1, r3
    27bc:	200b      	movs	r0, #11
    27be:	4b24      	ldr	r3, [pc, #144]	; (2850 <chip_wake+0xb4>)
    27c0:	4798      	blx	r3
    27c2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27c4:	d126      	bne.n	2814 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    27c6:	a901      	add	r1, sp, #4
    27c8:	2001      	movs	r0, #1
    27ca:	4b20      	ldr	r3, [pc, #128]	; (284c <chip_wake+0xb0>)
    27cc:	4798      	blx	r3
    27ce:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27d0:	d120      	bne.n	2814 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    27d2:	9901      	ldr	r1, [sp, #4]
    27d4:	078b      	lsls	r3, r1, #30
    27d6:	d520      	bpl.n	281a <chip_wake+0x7e>
{
    27d8:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    27da:	4f1c      	ldr	r7, [pc, #112]	; (284c <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    27dc:	4e1d      	ldr	r6, [pc, #116]	; (2854 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    27de:	4669      	mov	r1, sp
    27e0:	200f      	movs	r0, #15
    27e2:	47b8      	blx	r7
    27e4:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    27e6:	d120      	bne.n	282a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    27e8:	9b00      	ldr	r3, [sp, #0]
    27ea:	075b      	lsls	r3, r3, #29
    27ec:	d42b      	bmi.n	2846 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    27ee:	2002      	movs	r0, #2
    27f0:	47b0      	blx	r6
    27f2:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    27f4:	2d00      	cmp	r5, #0
    27f6:	d1f2      	bne.n	27de <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    27f8:	22ad      	movs	r2, #173	; 0xad
    27fa:	0052      	lsls	r2, r2, #1
    27fc:	4916      	ldr	r1, [pc, #88]	; (2858 <chip_wake+0xbc>)
    27fe:	4817      	ldr	r0, [pc, #92]	; (285c <chip_wake+0xc0>)
    2800:	4b17      	ldr	r3, [pc, #92]	; (2860 <chip_wake+0xc4>)
    2802:	4798      	blx	r3
    2804:	4817      	ldr	r0, [pc, #92]	; (2864 <chip_wake+0xc8>)
    2806:	4b18      	ldr	r3, [pc, #96]	; (2868 <chip_wake+0xcc>)
    2808:	4798      	blx	r3
    280a:	200d      	movs	r0, #13
    280c:	4b17      	ldr	r3, [pc, #92]	; (286c <chip_wake+0xd0>)
    280e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2810:	2404      	movs	r4, #4
    2812:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    2814:	0020      	movs	r0, r4
    2816:	b003      	add	sp, #12
    2818:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    281a:	2302      	movs	r3, #2
    281c:	4319      	orrs	r1, r3
    281e:	2001      	movs	r0, #1
    2820:	4b0b      	ldr	r3, [pc, #44]	; (2850 <chip_wake+0xb4>)
    2822:	4798      	blx	r3
    2824:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2826:	d0d7      	beq.n	27d8 <chip_wake+0x3c>
    2828:	e7f4      	b.n	2814 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    282a:	22a8      	movs	r2, #168	; 0xa8
    282c:	0052      	lsls	r2, r2, #1
    282e:	490a      	ldr	r1, [pc, #40]	; (2858 <chip_wake+0xbc>)
    2830:	480a      	ldr	r0, [pc, #40]	; (285c <chip_wake+0xc0>)
    2832:	4d0b      	ldr	r5, [pc, #44]	; (2860 <chip_wake+0xc4>)
    2834:	47a8      	blx	r5
    2836:	9a00      	ldr	r2, [sp, #0]
    2838:	0021      	movs	r1, r4
    283a:	480d      	ldr	r0, [pc, #52]	; (2870 <chip_wake+0xd4>)
    283c:	47a8      	blx	r5
    283e:	200d      	movs	r0, #13
    2840:	4b0a      	ldr	r3, [pc, #40]	; (286c <chip_wake+0xd0>)
    2842:	4798      	blx	r3
			goto _WAKE_EXIT;
    2844:	e7e6      	b.n	2814 <chip_wake+0x78>
	nm_bus_reset();
    2846:	4b0b      	ldr	r3, [pc, #44]	; (2874 <chip_wake+0xd8>)
    2848:	4798      	blx	r3
    284a:	e7e3      	b.n	2814 <chip_wake+0x78>
    284c:	00002ab5 	.word	0x00002ab5
    2850:	00002ac1 	.word	0x00002ac1
    2854:	000012d9 	.word	0x000012d9
    2858:	0000d310 	.word	0x0000d310
    285c:	0000cdd0 	.word	0x0000cdd0
    2860:	0000b779 	.word	0x0000b779
    2864:	0000d358 	.word	0x0000d358
    2868:	0000b895 	.word	0x0000b895
    286c:	0000b7ad 	.word	0x0000b7ad
    2870:	0000d340 	.word	0x0000d340
    2874:	00002a9d 	.word	0x00002a9d

00002878 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    287a:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    287c:	4d2d      	ldr	r5, [pc, #180]	; (2934 <wait_for_bootrom+0xbc>)
    287e:	4c2e      	ldr	r4, [pc, #184]	; (2938 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2880:	4e2e      	ldr	r6, [pc, #184]	; (293c <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2882:	0028      	movs	r0, r5
    2884:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2886:	2800      	cmp	r0, #0
    2888:	db02      	blt.n	2890 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    288a:	2001      	movs	r0, #1
    288c:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    288e:	e7f8      	b.n	2882 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    2890:	482b      	ldr	r0, [pc, #172]	; (2940 <wait_for_bootrom+0xc8>)
    2892:	4b29      	ldr	r3, [pc, #164]	; (2938 <wait_for_bootrom+0xc0>)
    2894:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2896:	07c3      	lsls	r3, r0, #31
    2898:	d409      	bmi.n	28ae <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    289a:	4e28      	ldr	r6, [pc, #160]	; (293c <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    289c:	4c29      	ldr	r4, [pc, #164]	; (2944 <wait_for_bootrom+0xcc>)
    289e:	4d26      	ldr	r5, [pc, #152]	; (2938 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    28a0:	2001      	movs	r0, #1
    28a2:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    28a4:	0020      	movs	r0, r4
    28a6:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    28a8:	4b27      	ldr	r3, [pc, #156]	; (2948 <wait_for_bootrom+0xd0>)
    28aa:	4298      	cmp	r0, r3
    28ac:	d1f8      	bne.n	28a0 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    28ae:	2f02      	cmp	r7, #2
    28b0:	d021      	beq.n	28f6 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    28b2:	2f03      	cmp	r7, #3
    28b4:	d029      	beq.n	290a <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    28b6:	2f04      	cmp	r7, #4
    28b8:	d030      	beq.n	291c <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    28ba:	4924      	ldr	r1, [pc, #144]	; (294c <wait_for_bootrom+0xd4>)
    28bc:	4824      	ldr	r0, [pc, #144]	; (2950 <wait_for_bootrom+0xd8>)
    28be:	4b25      	ldr	r3, [pc, #148]	; (2954 <wait_for_bootrom+0xdc>)
    28c0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    28c2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    28c4:	4b24      	ldr	r3, [pc, #144]	; (2958 <wait_for_bootrom+0xe0>)
    28c6:	4798      	blx	r3
    28c8:	0500      	lsls	r0, r0, #20
    28ca:	0d00      	lsrs	r0, r0, #20
    28cc:	4b23      	ldr	r3, [pc, #140]	; (295c <wait_for_bootrom+0xe4>)
    28ce:	4298      	cmp	r0, r3
    28d0:	d82a      	bhi.n	2928 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    28d2:	0020      	movs	r0, r4
    28d4:	4b22      	ldr	r3, [pc, #136]	; (2960 <wait_for_bootrom+0xe8>)
    28d6:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    28d8:	4822      	ldr	r0, [pc, #136]	; (2964 <wait_for_bootrom+0xec>)
    28da:	4c23      	ldr	r4, [pc, #140]	; (2968 <wait_for_bootrom+0xf0>)
    28dc:	47a0      	blx	r4
    28de:	491b      	ldr	r1, [pc, #108]	; (294c <wait_for_bootrom+0xd4>)
    28e0:	4822      	ldr	r0, [pc, #136]	; (296c <wait_for_bootrom+0xf4>)
    28e2:	47a0      	blx	r4
    28e4:	200d      	movs	r0, #13
    28e6:	4b22      	ldr	r3, [pc, #136]	; (2970 <wait_for_bootrom+0xf8>)
    28e8:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    28ea:	4922      	ldr	r1, [pc, #136]	; (2974 <wait_for_bootrom+0xfc>)
    28ec:	4815      	ldr	r0, [pc, #84]	; (2944 <wait_for_bootrom+0xcc>)
    28ee:	4b19      	ldr	r3, [pc, #100]	; (2954 <wait_for_bootrom+0xdc>)
    28f0:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    28f2:	2000      	movs	r0, #0
    28f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    28f6:	4920      	ldr	r1, [pc, #128]	; (2978 <wait_for_bootrom+0x100>)
    28f8:	4820      	ldr	r0, [pc, #128]	; (297c <wait_for_bootrom+0x104>)
    28fa:	4c16      	ldr	r4, [pc, #88]	; (2954 <wait_for_bootrom+0xdc>)
    28fc:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    28fe:	2180      	movs	r1, #128	; 0x80
    2900:	0349      	lsls	r1, r1, #13
    2902:	4813      	ldr	r0, [pc, #76]	; (2950 <wait_for_bootrom+0xd8>)
    2904:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2906:	2400      	movs	r4, #0
    2908:	e7dc      	b.n	28c4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    290a:	491b      	ldr	r1, [pc, #108]	; (2978 <wait_for_bootrom+0x100>)
    290c:	481b      	ldr	r0, [pc, #108]	; (297c <wait_for_bootrom+0x104>)
    290e:	4c11      	ldr	r4, [pc, #68]	; (2954 <wait_for_bootrom+0xdc>)
    2910:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    2912:	2100      	movs	r1, #0
    2914:	480e      	ldr	r0, [pc, #56]	; (2950 <wait_for_bootrom+0xd8>)
    2916:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2918:	2400      	movs	r4, #0
    291a:	e7d3      	b.n	28c4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    291c:	490b      	ldr	r1, [pc, #44]	; (294c <wait_for_bootrom+0xd4>)
    291e:	480c      	ldr	r0, [pc, #48]	; (2950 <wait_for_bootrom+0xd8>)
    2920:	4b0c      	ldr	r3, [pc, #48]	; (2954 <wait_for_bootrom+0xdc>)
    2922:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2924:	2480      	movs	r4, #128	; 0x80
    2926:	e7cd      	b.n	28c4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2928:	2002      	movs	r0, #2
    292a:	4320      	orrs	r0, r4
    292c:	4b0c      	ldr	r3, [pc, #48]	; (2960 <wait_for_bootrom+0xe8>)
    292e:	4798      	blx	r3
    2930:	e7d2      	b.n	28d8 <wait_for_bootrom+0x60>
    2932:	46c0      	nop			; (mov r8, r8)
    2934:	00001014 	.word	0x00001014
    2938:	00002aa9 	.word	0x00002aa9
    293c:	000012d9 	.word	0x000012d9
    2940:	000207bc 	.word	0x000207bc
    2944:	000c000c 	.word	0x000c000c
    2948:	10add09e 	.word	0x10add09e
    294c:	13301354 	.word	0x13301354
    2950:	0000108c 	.word	0x0000108c
    2954:	00002ac1 	.word	0x00002ac1
    2958:	00002665 	.word	0x00002665
    295c:	0000039f 	.word	0x0000039f
    2960:	000025d1 	.word	0x000025d1
    2964:	0000d100 	.word	0x0000d100
    2968:	0000b779 	.word	0x0000b779
    296c:	0000d374 	.word	0x0000d374
    2970:	0000b7ad 	.word	0x0000b7ad
    2974:	ef522f61 	.word	0xef522f61
    2978:	3c1cd57d 	.word	0x3c1cd57d
    297c:	000207ac 	.word	0x000207ac

00002980 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    2980:	b570      	push	{r4, r5, r6, lr}
    2982:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2984:	4b15      	ldr	r3, [pc, #84]	; (29dc <wait_for_firmware_start+0x5c>)
    2986:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2988:	4b15      	ldr	r3, [pc, #84]	; (29e0 <wait_for_firmware_start+0x60>)
    298a:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    298c:	3802      	subs	r0, #2
    298e:	2801      	cmp	r0, #1
    2990:	d911      	bls.n	29b6 <wait_for_firmware_start+0x36>
{
    2992:	2401      	movs	r4, #1
    2994:	4264      	negs	r4, r4
    2996:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2998:	4e12      	ldr	r6, [pc, #72]	; (29e4 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    299a:	4d13      	ldr	r5, [pc, #76]	; (29e8 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    299c:	9b00      	ldr	r3, [sp, #0]
    299e:	4298      	cmp	r0, r3
    29a0:	d00e      	beq.n	29c0 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    29a2:	2002      	movs	r0, #2
    29a4:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    29a6:	9801      	ldr	r0, [sp, #4]
    29a8:	47a8      	blx	r5
    29aa:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    29ac:	2c00      	cmp	r4, #0
    29ae:	d1f5      	bne.n	299c <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    29b0:	2005      	movs	r0, #5
    29b2:	4240      	negs	r0, r0
    29b4:	e009      	b.n	29ca <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    29b6:	4b0d      	ldr	r3, [pc, #52]	; (29ec <wait_for_firmware_start+0x6c>)
    29b8:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    29ba:	4b0d      	ldr	r3, [pc, #52]	; (29f0 <wait_for_firmware_start+0x70>)
    29bc:	9300      	str	r3, [sp, #0]
    29be:	e7e8      	b.n	2992 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    29c0:	9a00      	ldr	r2, [sp, #0]
    29c2:	4b07      	ldr	r3, [pc, #28]	; (29e0 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    29c4:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    29c6:	429a      	cmp	r2, r3
    29c8:	d001      	beq.n	29ce <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    29ca:	b002      	add	sp, #8
    29cc:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    29ce:	2100      	movs	r1, #0
    29d0:	4802      	ldr	r0, [pc, #8]	; (29dc <wait_for_firmware_start+0x5c>)
    29d2:	4b08      	ldr	r3, [pc, #32]	; (29f4 <wait_for_firmware_start+0x74>)
    29d4:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    29d6:	2000      	movs	r0, #0
    29d8:	e7f7      	b.n	29ca <wait_for_firmware_start+0x4a>
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	0000108c 	.word	0x0000108c
    29e0:	02532636 	.word	0x02532636
    29e4:	000012d9 	.word	0x000012d9
    29e8:	00002aa9 	.word	0x00002aa9
    29ec:	000207ac 	.word	0x000207ac
    29f0:	d75dc1c3 	.word	0xd75dc1c3
    29f4:	00002ac1 	.word	0x00002ac1

000029f8 <chip_deinit>:

sint8 chip_deinit(void)
{
    29f8:	b510      	push	{r4, lr}
    29fa:	b082      	sub	sp, #8
	uint32 reg = 0;
    29fc:	2300      	movs	r3, #0
    29fe:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2a00:	a901      	add	r1, sp, #4
    2a02:	20a0      	movs	r0, #160	; 0xa0
    2a04:	0140      	lsls	r0, r0, #5
    2a06:	4b14      	ldr	r3, [pc, #80]	; (2a58 <chip_deinit+0x60>)
    2a08:	4798      	blx	r3
    2a0a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2a0c:	d115      	bne.n	2a3a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    2a0e:	4913      	ldr	r1, [pc, #76]	; (2a5c <chip_deinit+0x64>)
    2a10:	9b01      	ldr	r3, [sp, #4]
    2a12:	4019      	ands	r1, r3
    2a14:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2a16:	20a0      	movs	r0, #160	; 0xa0
    2a18:	0140      	lsls	r0, r0, #5
    2a1a:	4b11      	ldr	r3, [pc, #68]	; (2a60 <chip_deinit+0x68>)
    2a1c:	4798      	blx	r3
    2a1e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2a20:	d016      	beq.n	2a50 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2a22:	4a10      	ldr	r2, [pc, #64]	; (2a64 <chip_deinit+0x6c>)
    2a24:	4910      	ldr	r1, [pc, #64]	; (2a68 <chip_deinit+0x70>)
    2a26:	4811      	ldr	r0, [pc, #68]	; (2a6c <chip_deinit+0x74>)
    2a28:	4b11      	ldr	r3, [pc, #68]	; (2a70 <chip_deinit+0x78>)
    2a2a:	4798      	blx	r3
    2a2c:	4811      	ldr	r0, [pc, #68]	; (2a74 <chip_deinit+0x7c>)
    2a2e:	4b12      	ldr	r3, [pc, #72]	; (2a78 <chip_deinit+0x80>)
    2a30:	4798      	blx	r3
    2a32:	200d      	movs	r0, #13
    2a34:	4b11      	ldr	r3, [pc, #68]	; (2a7c <chip_deinit+0x84>)
    2a36:	4798      	blx	r3
		goto ERR1;
    2a38:	e00a      	b.n	2a50 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2a3a:	4a11      	ldr	r2, [pc, #68]	; (2a80 <chip_deinit+0x88>)
    2a3c:	490a      	ldr	r1, [pc, #40]	; (2a68 <chip_deinit+0x70>)
    2a3e:	480b      	ldr	r0, [pc, #44]	; (2a6c <chip_deinit+0x74>)
    2a40:	4b0b      	ldr	r3, [pc, #44]	; (2a70 <chip_deinit+0x78>)
    2a42:	4798      	blx	r3
    2a44:	480b      	ldr	r0, [pc, #44]	; (2a74 <chip_deinit+0x7c>)
    2a46:	4b0c      	ldr	r3, [pc, #48]	; (2a78 <chip_deinit+0x80>)
    2a48:	4798      	blx	r3
    2a4a:	200d      	movs	r0, #13
    2a4c:	4b0b      	ldr	r3, [pc, #44]	; (2a7c <chip_deinit+0x84>)
    2a4e:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2a50:	0020      	movs	r0, r4
    2a52:	b002      	add	sp, #8
    2a54:	bd10      	pop	{r4, pc}
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	00002ab5 	.word	0x00002ab5
    2a5c:	fffffbff 	.word	0xfffffbff
    2a60:	00002ac1 	.word	0x00002ac1
    2a64:	00000207 	.word	0x00000207
    2a68:	0000d31c 	.word	0x0000d31c
    2a6c:	0000cdd0 	.word	0x0000cdd0
    2a70:	0000b779 	.word	0x0000b779
    2a74:	0000d328 	.word	0x0000d328
    2a78:	0000b895 	.word	0x0000b895
    2a7c:	0000b7ad 	.word	0x0000b7ad
    2a80:	00000201 	.word	0x00000201

00002a84 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2a84:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2a86:	4b01      	ldr	r3, [pc, #4]	; (2a8c <nm_bus_iface_init+0x8>)
    2a88:	4798      	blx	r3
	return ret;
}
    2a8a:	bd10      	pop	{r4, pc}
    2a8c:	00001395 	.word	0x00001395

00002a90 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2a90:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2a92:	4b01      	ldr	r3, [pc, #4]	; (2a98 <nm_bus_iface_deinit+0x8>)
    2a94:	4798      	blx	r3

	return ret;
}
    2a96:	bd10      	pop	{r4, pc}
    2a98:	000015e5 	.word	0x000015e5

00002a9c <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2a9c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2a9e:	4b01      	ldr	r3, [pc, #4]	; (2aa4 <nm_bus_reset+0x8>)
    2aa0:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2aa2:	bd10      	pop	{r4, pc}
    2aa4:	00003445 	.word	0x00003445

00002aa8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2aa8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2aaa:	4b01      	ldr	r3, [pc, #4]	; (2ab0 <nm_read_reg+0x8>)
    2aac:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2aae:	bd10      	pop	{r4, pc}
    2ab0:	0000347d 	.word	0x0000347d

00002ab4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2ab4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2ab6:	4b01      	ldr	r3, [pc, #4]	; (2abc <nm_read_reg_with_ret+0x8>)
    2ab8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2aba:	bd10      	pop	{r4, pc}
    2abc:	00003491 	.word	0x00003491

00002ac0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2ac0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2ac2:	4b01      	ldr	r3, [pc, #4]	; (2ac8 <nm_write_reg+0x8>)
    2ac4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2ac6:	bd10      	pop	{r4, pc}
    2ac8:	000034a9 	.word	0x000034a9

00002acc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ace:	46d6      	mov	lr, sl
    2ad0:	464f      	mov	r7, r9
    2ad2:	4646      	mov	r6, r8
    2ad4:	b5c0      	push	{r6, r7, lr}
    2ad6:	b082      	sub	sp, #8
    2ad8:	4680      	mov	r8, r0
    2ada:	4689      	mov	r9, r1
    2adc:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2ade:	4b13      	ldr	r3, [pc, #76]	; (2b2c <nm_read_block+0x60>)
    2ae0:	881f      	ldrh	r7, [r3, #0]
    2ae2:	3f08      	subs	r7, #8
    2ae4:	b2bb      	uxth	r3, r7
    2ae6:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2ae8:	001e      	movs	r6, r3
    2aea:	0004      	movs	r4, r0
    2aec:	429a      	cmp	r2, r3
    2aee:	d91a      	bls.n	2b26 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2af0:	4b0f      	ldr	r3, [pc, #60]	; (2b30 <nm_read_block+0x64>)
    2af2:	469a      	mov	sl, r3
    2af4:	1a37      	subs	r7, r6, r0
    2af6:	4643      	mov	r3, r8
    2af8:	1ae1      	subs	r1, r4, r3
    2afa:	4449      	add	r1, r9
    2afc:	9a01      	ldr	r2, [sp, #4]
    2afe:	0020      	movs	r0, r4
    2b00:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2b02:	2800      	cmp	r0, #0
    2b04:	d109      	bne.n	2b1a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2b06:	1bad      	subs	r5, r5, r6
    2b08:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2b0a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2b0c:	42b5      	cmp	r5, r6
    2b0e:	d8f2      	bhi.n	2af6 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2b10:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2b12:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2b14:	0020      	movs	r0, r4
    2b16:	4b06      	ldr	r3, [pc, #24]	; (2b30 <nm_read_block+0x64>)
    2b18:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2b1a:	b002      	add	sp, #8
    2b1c:	bc1c      	pop	{r2, r3, r4}
    2b1e:	4690      	mov	r8, r2
    2b20:	4699      	mov	r9, r3
    2b22:	46a2      	mov	sl, r4
    2b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2b26:	2100      	movs	r1, #0
    2b28:	e7f2      	b.n	2b10 <nm_read_block+0x44>
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	2000000c 	.word	0x2000000c
    2b30:	000035e9 	.word	0x000035e9

00002b34 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b36:	46d6      	mov	lr, sl
    2b38:	464f      	mov	r7, r9
    2b3a:	4646      	mov	r6, r8
    2b3c:	b5c0      	push	{r6, r7, lr}
    2b3e:	b082      	sub	sp, #8
    2b40:	4680      	mov	r8, r0
    2b42:	4689      	mov	r9, r1
    2b44:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2b46:	4b13      	ldr	r3, [pc, #76]	; (2b94 <nm_write_block+0x60>)
    2b48:	881f      	ldrh	r7, [r3, #0]
    2b4a:	3f08      	subs	r7, #8
    2b4c:	b2bb      	uxth	r3, r7
    2b4e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2b50:	001e      	movs	r6, r3
    2b52:	0004      	movs	r4, r0
    2b54:	429a      	cmp	r2, r3
    2b56:	d91a      	bls.n	2b8e <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b58:	4b0f      	ldr	r3, [pc, #60]	; (2b98 <nm_write_block+0x64>)
    2b5a:	469a      	mov	sl, r3
    2b5c:	1a37      	subs	r7, r6, r0
    2b5e:	4643      	mov	r3, r8
    2b60:	1ae1      	subs	r1, r4, r3
    2b62:	4449      	add	r1, r9
    2b64:	9a01      	ldr	r2, [sp, #4]
    2b66:	0020      	movs	r0, r4
    2b68:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2b6a:	2800      	cmp	r0, #0
    2b6c:	d109      	bne.n	2b82 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2b6e:	1bad      	subs	r5, r5, r6
    2b70:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2b72:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2b74:	42b5      	cmp	r5, r6
    2b76:	d8f2      	bhi.n	2b5e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b78:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2b7a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b7c:	0020      	movs	r0, r4
    2b7e:	4b06      	ldr	r3, [pc, #24]	; (2b98 <nm_write_block+0x64>)
    2b80:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2b82:	b002      	add	sp, #8
    2b84:	bc1c      	pop	{r2, r3, r4}
    2b86:	4690      	mov	r8, r2
    2b88:	4699      	mov	r9, r3
    2b8a:	46a2      	mov	sl, r4
    2b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2b8e:	2100      	movs	r1, #0
    2b90:	e7f2      	b.n	2b78 <nm_write_block+0x44>
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	2000000c 	.word	0x2000000c
    2b98:	00003745 	.word	0x00003745

00002b9c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2b9c:	b570      	push	{r4, r5, r6, lr}
    2b9e:	b084      	sub	sp, #16
    2ba0:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2ba2:	2300      	movs	r3, #0
    2ba4:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2ba6:	2208      	movs	r2, #8
    2ba8:	2100      	movs	r1, #0
    2baa:	a801      	add	r0, sp, #4
    2bac:	4b2d      	ldr	r3, [pc, #180]	; (2c64 <nm_get_firmware_full_info+0xc8>)
    2bae:	4798      	blx	r3
	if (pstrRev != NULL)
    2bb0:	2c00      	cmp	r4, #0
    2bb2:	d044      	beq.n	2c3e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2bb4:	2228      	movs	r2, #40	; 0x28
    2bb6:	2100      	movs	r1, #0
    2bb8:	0020      	movs	r0, r4
    2bba:	4b2b      	ldr	r3, [pc, #172]	; (2c68 <nm_get_firmware_full_info+0xcc>)
    2bbc:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2bbe:	a903      	add	r1, sp, #12
    2bc0:	482a      	ldr	r0, [pc, #168]	; (2c6c <nm_get_firmware_full_info+0xd0>)
    2bc2:	4b2b      	ldr	r3, [pc, #172]	; (2c70 <nm_get_firmware_full_info+0xd4>)
    2bc4:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2bc6:	2800      	cmp	r0, #0
    2bc8:	d13a      	bne.n	2c40 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2bca:	9b03      	ldr	r3, [sp, #12]
    2bcc:	2b00      	cmp	r3, #0
    2bce:	d039      	beq.n	2c44 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2bd0:	20c0      	movs	r0, #192	; 0xc0
    2bd2:	0280      	lsls	r0, r0, #10
    2bd4:	4318      	orrs	r0, r3
    2bd6:	2208      	movs	r2, #8
    2bd8:	a901      	add	r1, sp, #4
    2bda:	4b26      	ldr	r3, [pc, #152]	; (2c74 <nm_get_firmware_full_info+0xd8>)
    2bdc:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    2bde:	2800      	cmp	r0, #0
    2be0:	d12e      	bne.n	2c40 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    2be2:	9b02      	ldr	r3, [sp, #8]
    2be4:	0418      	lsls	r0, r3, #16
    2be6:	0c00      	lsrs	r0, r0, #16
    2be8:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2bea:	d02e      	beq.n	2c4a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2bec:	23c0      	movs	r3, #192	; 0xc0
    2bee:	029b      	lsls	r3, r3, #10
    2bf0:	4318      	orrs	r0, r3
    2bf2:	2228      	movs	r2, #40	; 0x28
    2bf4:	0021      	movs	r1, r4
    2bf6:	4b1f      	ldr	r3, [pc, #124]	; (2c74 <nm_get_firmware_full_info+0xd8>)
    2bf8:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2bfa:	2800      	cmp	r0, #0
    2bfc:	d120      	bne.n	2c40 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2bfe:	7921      	ldrb	r1, [r4, #4]
    2c00:	0209      	lsls	r1, r1, #8
    2c02:	79a2      	ldrb	r2, [r4, #6]
    2c04:	230f      	movs	r3, #15
    2c06:	401a      	ands	r2, r3
    2c08:	430a      	orrs	r2, r1
    2c0a:	7961      	ldrb	r1, [r4, #5]
    2c0c:	0109      	lsls	r1, r1, #4
    2c0e:	25ff      	movs	r5, #255	; 0xff
    2c10:	4029      	ands	r1, r5
    2c12:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2c14:	79e1      	ldrb	r1, [r4, #7]
    2c16:	0209      	lsls	r1, r1, #8
    2c18:	7a66      	ldrb	r6, [r4, #9]
    2c1a:	4033      	ands	r3, r6
    2c1c:	430b      	orrs	r3, r1
    2c1e:	7a21      	ldrb	r1, [r4, #8]
    2c20:	0109      	lsls	r1, r1, #4
    2c22:	400d      	ands	r5, r1
    2c24:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2c26:	2a00      	cmp	r2, #0
    2c28:	d012      	beq.n	2c50 <nm_get_firmware_full_info+0xb4>
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	d013      	beq.n	2c56 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2c2e:	4912      	ldr	r1, [pc, #72]	; (2c78 <nm_get_firmware_full_info+0xdc>)
    2c30:	428b      	cmp	r3, r1
    2c32:	d813      	bhi.n	2c5c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2c34:	4b11      	ldr	r3, [pc, #68]	; (2c7c <nm_get_firmware_full_info+0xe0>)
    2c36:	429a      	cmp	r2, r3
    2c38:	d802      	bhi.n	2c40 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2c3a:	380d      	subs	r0, #13
    2c3c:	e000      	b.n	2c40 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    2c3e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2c40:	b004      	add	sp, #16
    2c42:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2c44:	200c      	movs	r0, #12
    2c46:	4240      	negs	r0, r0
    2c48:	e7fa      	b.n	2c40 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    2c4a:	200c      	movs	r0, #12
    2c4c:	4240      	negs	r0, r0
    2c4e:	e7f7      	b.n	2c40 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2c50:	200c      	movs	r0, #12
    2c52:	4240      	negs	r0, r0
    2c54:	e7f4      	b.n	2c40 <nm_get_firmware_full_info+0xa4>
    2c56:	200c      	movs	r0, #12
    2c58:	4240      	negs	r0, r0
    2c5a:	e7f1      	b.n	2c40 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2c5c:	200d      	movs	r0, #13
    2c5e:	4240      	negs	r0, r0
    2c60:	e7ee      	b.n	2c40 <nm_get_firmware_full_info+0xa4>
    2c62:	46c0      	nop			; (mov r8, r8)
    2c64:	0000b617 	.word	0x0000b617
    2c68:	00001665 	.word	0x00001665
    2c6c:	000c0008 	.word	0x000c0008
    2c70:	00002ab5 	.word	0x00002ab5
    2c74:	00002acd 	.word	0x00002acd
    2c78:	00001354 	.word	0x00001354
    2c7c:	00001353 	.word	0x00001353

00002c80 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2c80:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    2c82:	2800      	cmp	r0, #0
    2c84:	d037      	beq.n	2cf6 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2c86:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2c88:	1e6b      	subs	r3, r5, #1
    2c8a:	2b03      	cmp	r3, #3
    2c8c:	d900      	bls.n	2c90 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2c8e:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    2c90:	2000      	movs	r0, #0
    2c92:	4b20      	ldr	r3, [pc, #128]	; (2d14 <nm_drv_init+0x94>)
    2c94:	4798      	blx	r3
    2c96:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c98:	d12f      	bne.n	2cfa <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2c9a:	481f      	ldr	r0, [pc, #124]	; (2d18 <nm_drv_init+0x98>)
    2c9c:	4c1f      	ldr	r4, [pc, #124]	; (2d1c <nm_drv_init+0x9c>)
    2c9e:	47a0      	blx	r4
    2ca0:	4b1f      	ldr	r3, [pc, #124]	; (2d20 <nm_drv_init+0xa0>)
    2ca2:	4798      	blx	r3
    2ca4:	0001      	movs	r1, r0
    2ca6:	481f      	ldr	r0, [pc, #124]	; (2d24 <nm_drv_init+0xa4>)
    2ca8:	47a0      	blx	r4
    2caa:	200d      	movs	r0, #13
    2cac:	4b1e      	ldr	r3, [pc, #120]	; (2d28 <nm_drv_init+0xa8>)
    2cae:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2cb0:	4b1e      	ldr	r3, [pc, #120]	; (2d2c <nm_drv_init+0xac>)
    2cb2:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    2cb4:	0028      	movs	r0, r5
    2cb6:	4b1e      	ldr	r3, [pc, #120]	; (2d30 <nm_drv_init+0xb0>)
    2cb8:	4798      	blx	r3
    2cba:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cbc:	d117      	bne.n	2cee <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2cbe:	0028      	movs	r0, r5
    2cc0:	4b1c      	ldr	r3, [pc, #112]	; (2d34 <nm_drv_init+0xb4>)
    2cc2:	4798      	blx	r3
    2cc4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cc6:	d112      	bne.n	2cee <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2cc8:	3d02      	subs	r5, #2
    2cca:	2d01      	cmp	r5, #1
    2ccc:	d911      	bls.n	2cf2 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2cce:	4b1a      	ldr	r3, [pc, #104]	; (2d38 <nm_drv_init+0xb8>)
    2cd0:	4798      	blx	r3
    2cd2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cd4:	d00d      	beq.n	2cf2 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    2cd6:	22a7      	movs	r2, #167	; 0xa7
    2cd8:	0052      	lsls	r2, r2, #1
    2cda:	4918      	ldr	r1, [pc, #96]	; (2d3c <nm_drv_init+0xbc>)
    2cdc:	4818      	ldr	r0, [pc, #96]	; (2d40 <nm_drv_init+0xc0>)
    2cde:	4b0f      	ldr	r3, [pc, #60]	; (2d1c <nm_drv_init+0x9c>)
    2ce0:	4798      	blx	r3
    2ce2:	4818      	ldr	r0, [pc, #96]	; (2d44 <nm_drv_init+0xc4>)
    2ce4:	4b18      	ldr	r3, [pc, #96]	; (2d48 <nm_drv_init+0xc8>)
    2ce6:	4798      	blx	r3
    2ce8:	200d      	movs	r0, #13
    2cea:	4b0f      	ldr	r3, [pc, #60]	; (2d28 <nm_drv_init+0xa8>)
    2cec:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2cee:	4b17      	ldr	r3, [pc, #92]	; (2d4c <nm_drv_init+0xcc>)
    2cf0:	4798      	blx	r3
ERR1:
	return ret;
}
    2cf2:	0020      	movs	r0, r4
    2cf4:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2cf6:	2501      	movs	r5, #1
    2cf8:	e7ca      	b.n	2c90 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    2cfa:	2290      	movs	r2, #144	; 0x90
    2cfc:	0052      	lsls	r2, r2, #1
    2cfe:	490f      	ldr	r1, [pc, #60]	; (2d3c <nm_drv_init+0xbc>)
    2d00:	480f      	ldr	r0, [pc, #60]	; (2d40 <nm_drv_init+0xc0>)
    2d02:	4b06      	ldr	r3, [pc, #24]	; (2d1c <nm_drv_init+0x9c>)
    2d04:	4798      	blx	r3
    2d06:	4812      	ldr	r0, [pc, #72]	; (2d50 <nm_drv_init+0xd0>)
    2d08:	4b0f      	ldr	r3, [pc, #60]	; (2d48 <nm_drv_init+0xc8>)
    2d0a:	4798      	blx	r3
    2d0c:	200d      	movs	r0, #13
    2d0e:	4b06      	ldr	r3, [pc, #24]	; (2d28 <nm_drv_init+0xa8>)
    2d10:	4798      	blx	r3
		goto ERR1;
    2d12:	e7ee      	b.n	2cf2 <nm_drv_init+0x72>
    2d14:	00002a85 	.word	0x00002a85
    2d18:	0000d100 	.word	0x0000d100
    2d1c:	0000b779 	.word	0x0000b779
    2d20:	00002665 	.word	0x00002665
    2d24:	0000d444 	.word	0x0000d444
    2d28:	0000b7ad 	.word	0x0000b7ad
    2d2c:	000034c1 	.word	0x000034c1
    2d30:	00002879 	.word	0x00002879
    2d34:	00002981 	.word	0x00002981
    2d38:	00002609 	.word	0x00002609
    2d3c:	0000d38c 	.word	0x0000d38c
    2d40:	0000cdd0 	.word	0x0000cdd0
    2d44:	0000d408 	.word	0x0000d408
    2d48:	0000b895 	.word	0x0000b895
    2d4c:	00002a91 	.word	0x00002a91
    2d50:	0000d428 	.word	0x0000d428

00002d54 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2d54:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2d56:	4b1c      	ldr	r3, [pc, #112]	; (2dc8 <nm_drv_deinit+0x74>)
    2d58:	4798      	blx	r3
    2d5a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d5c:	d10b      	bne.n	2d76 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2d5e:	2000      	movs	r0, #0
    2d60:	4b1a      	ldr	r3, [pc, #104]	; (2dcc <nm_drv_deinit+0x78>)
    2d62:	4798      	blx	r3
    2d64:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d66:	d114      	bne.n	2d92 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2d68:	4b19      	ldr	r3, [pc, #100]	; (2dd0 <nm_drv_deinit+0x7c>)
    2d6a:	4798      	blx	r3
    2d6c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d6e:	d11d      	bne.n	2dac <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2d70:	4b18      	ldr	r3, [pc, #96]	; (2dd4 <nm_drv_deinit+0x80>)
    2d72:	4798      	blx	r3
    2d74:	e00b      	b.n	2d8e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2d76:	2266      	movs	r2, #102	; 0x66
    2d78:	32ff      	adds	r2, #255	; 0xff
    2d7a:	4917      	ldr	r1, [pc, #92]	; (2dd8 <nm_drv_deinit+0x84>)
    2d7c:	4817      	ldr	r0, [pc, #92]	; (2ddc <nm_drv_deinit+0x88>)
    2d7e:	4b18      	ldr	r3, [pc, #96]	; (2de0 <nm_drv_deinit+0x8c>)
    2d80:	4798      	blx	r3
    2d82:	4818      	ldr	r0, [pc, #96]	; (2de4 <nm_drv_deinit+0x90>)
    2d84:	4b18      	ldr	r3, [pc, #96]	; (2de8 <nm_drv_deinit+0x94>)
    2d86:	4798      	blx	r3
    2d88:	200d      	movs	r0, #13
    2d8a:	4b18      	ldr	r3, [pc, #96]	; (2dec <nm_drv_deinit+0x98>)
    2d8c:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    2d8e:	0020      	movs	r0, r4
    2d90:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    2d92:	22b6      	movs	r2, #182	; 0xb6
    2d94:	0052      	lsls	r2, r2, #1
    2d96:	4910      	ldr	r1, [pc, #64]	; (2dd8 <nm_drv_deinit+0x84>)
    2d98:	4810      	ldr	r0, [pc, #64]	; (2ddc <nm_drv_deinit+0x88>)
    2d9a:	4b11      	ldr	r3, [pc, #68]	; (2de0 <nm_drv_deinit+0x8c>)
    2d9c:	4798      	blx	r3
    2d9e:	4814      	ldr	r0, [pc, #80]	; (2df0 <nm_drv_deinit+0x9c>)
    2da0:	4b11      	ldr	r3, [pc, #68]	; (2de8 <nm_drv_deinit+0x94>)
    2da2:	4798      	blx	r3
    2da4:	200d      	movs	r0, #13
    2da6:	4b11      	ldr	r3, [pc, #68]	; (2dec <nm_drv_deinit+0x98>)
    2da8:	4798      	blx	r3
		goto ERR1;
    2daa:	e7f0      	b.n	2d8e <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2dac:	22b9      	movs	r2, #185	; 0xb9
    2dae:	0052      	lsls	r2, r2, #1
    2db0:	4909      	ldr	r1, [pc, #36]	; (2dd8 <nm_drv_deinit+0x84>)
    2db2:	480a      	ldr	r0, [pc, #40]	; (2ddc <nm_drv_deinit+0x88>)
    2db4:	4b0a      	ldr	r3, [pc, #40]	; (2de0 <nm_drv_deinit+0x8c>)
    2db6:	4798      	blx	r3
    2db8:	480e      	ldr	r0, [pc, #56]	; (2df4 <nm_drv_deinit+0xa0>)
    2dba:	4b0b      	ldr	r3, [pc, #44]	; (2de8 <nm_drv_deinit+0x94>)
    2dbc:	4798      	blx	r3
    2dbe:	200d      	movs	r0, #13
    2dc0:	4b0a      	ldr	r3, [pc, #40]	; (2dec <nm_drv_deinit+0x98>)
    2dc2:	4798      	blx	r3
		goto ERR1;
    2dc4:	e7e3      	b.n	2d8e <nm_drv_deinit+0x3a>
    2dc6:	46c0      	nop			; (mov r8, r8)
    2dc8:	000029f9 	.word	0x000029f9
    2dcc:	00003e6d 	.word	0x00003e6d
    2dd0:	00002a91 	.word	0x00002a91
    2dd4:	0000346d 	.word	0x0000346d
    2dd8:	0000d398 	.word	0x0000d398
    2ddc:	0000cdd0 	.word	0x0000cdd0
    2de0:	0000b779 	.word	0x0000b779
    2de4:	0000d3a8 	.word	0x0000d3a8
    2de8:	0000b895 	.word	0x0000b895
    2dec:	0000b7ad 	.word	0x0000b7ad
    2df0:	0000d3c8 	.word	0x0000d3c8
    2df4:	0000d3ec 	.word	0x0000d3ec

00002df8 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2df8:	b500      	push	{lr}
    2dfa:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2dfc:	ab01      	add	r3, sp, #4
    2dfe:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2e00:	2200      	movs	r2, #0
    2e02:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2e04:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2e06:	0019      	movs	r1, r3
    2e08:	2003      	movs	r0, #3
    2e0a:	4b02      	ldr	r3, [pc, #8]	; (2e14 <nmi_spi_write+0x1c>)
    2e0c:	4798      	blx	r3
}
    2e0e:	b005      	add	sp, #20
    2e10:	bd00      	pop	{pc}
    2e12:	46c0      	nop			; (mov r8, r8)
    2e14:	00001499 	.word	0x00001499

00002e18 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2e18:	b570      	push	{r4, r5, r6, lr}
    2e1a:	b084      	sub	sp, #16
    2e1c:	ac08      	add	r4, sp, #32
    2e1e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2e20:	ac01      	add	r4, sp, #4
    2e22:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2e24:	303f      	adds	r0, #63	; 0x3f
    2e26:	b2c4      	uxtb	r4, r0
    2e28:	2c0e      	cmp	r4, #14
    2e2a:	d900      	bls.n	2e2e <spi_cmd+0x16>
    2e2c:	e084      	b.n	2f38 <spi_cmd+0x120>
    2e2e:	00a0      	lsls	r0, r4, #2
    2e30:	4c4f      	ldr	r4, [pc, #316]	; (2f70 <spi_cmd+0x158>)
    2e32:	5820      	ldr	r0, [r4, r0]
    2e34:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2e36:	ab01      	add	r3, sp, #4
    2e38:	0c0a      	lsrs	r2, r1, #16
    2e3a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2e3c:	0a0a      	lsrs	r2, r1, #8
    2e3e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2e40:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2e42:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2e44:	4b4b      	ldr	r3, [pc, #300]	; (2f74 <spi_cmd+0x15c>)
    2e46:	781b      	ldrb	r3, [r3, #0]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d077      	beq.n	2f3c <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    2e4c:	3901      	subs	r1, #1
    2e4e:	b2c9      	uxtb	r1, r1
    2e50:	e083      	b.n	2f5a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    2e52:	0a0b      	lsrs	r3, r1, #8
    2e54:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2e56:	2d00      	cmp	r5, #0
    2e58:	d107      	bne.n	2e6a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    2e5a:	aa01      	add	r2, sp, #4
    2e5c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2e5e:	ab01      	add	r3, sp, #4
    2e60:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2e62:	2200      	movs	r2, #0
    2e64:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e66:	2105      	movs	r1, #5
		break;
    2e68:	e7ec      	b.n	2e44 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2e6a:	2280      	movs	r2, #128	; 0x80
    2e6c:	4252      	negs	r2, r2
    2e6e:	4313      	orrs	r3, r2
    2e70:	aa01      	add	r2, sp, #4
    2e72:	7053      	strb	r3, [r2, #1]
    2e74:	e7f3      	b.n	2e5e <spi_cmd+0x46>
		bc[1] = 0x00;
    2e76:	ab01      	add	r3, sp, #4
    2e78:	2200      	movs	r2, #0
    2e7a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2e7c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2e7e:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e80:	2105      	movs	r1, #5
		break;
    2e82:	e7df      	b.n	2e44 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2e84:	ab01      	add	r3, sp, #4
    2e86:	2200      	movs	r2, #0
    2e88:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2e8a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2e8c:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e8e:	2105      	movs	r1, #5
		break;
    2e90:	e7d8      	b.n	2e44 <spi_cmd+0x2c>
		bc[1] = 0xff;
    2e92:	ab01      	add	r3, sp, #4
    2e94:	22ff      	movs	r2, #255	; 0xff
    2e96:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2e98:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2e9a:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e9c:	2105      	movs	r1, #5
		break;
    2e9e:	e7d1      	b.n	2e44 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2ea0:	aa01      	add	r2, sp, #4
    2ea2:	0c08      	lsrs	r0, r1, #16
    2ea4:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2ea6:	0a08      	lsrs	r0, r1, #8
    2ea8:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2eaa:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2eac:	0a19      	lsrs	r1, r3, #8
    2eae:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2eb0:	7153      	strb	r3, [r2, #5]
		len = 7;
    2eb2:	2107      	movs	r1, #7
		break;
    2eb4:	e7c6      	b.n	2e44 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2eb6:	aa01      	add	r2, sp, #4
    2eb8:	0c08      	lsrs	r0, r1, #16
    2eba:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2ebc:	0a08      	lsrs	r0, r1, #8
    2ebe:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2ec0:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2ec2:	0c19      	lsrs	r1, r3, #16
    2ec4:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2ec6:	0a19      	lsrs	r1, r3, #8
    2ec8:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2eca:	7193      	strb	r3, [r2, #6]
		len = 8;
    2ecc:	2108      	movs	r1, #8
		break;
    2ece:	e7b9      	b.n	2e44 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    2ed0:	0a0b      	lsrs	r3, r1, #8
    2ed2:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2ed4:	2d00      	cmp	r5, #0
    2ed6:	d10c      	bne.n	2ef2 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    2ed8:	a801      	add	r0, sp, #4
    2eda:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2edc:	ab01      	add	r3, sp, #4
    2ede:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2ee0:	0e11      	lsrs	r1, r2, #24
    2ee2:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2ee4:	0c11      	lsrs	r1, r2, #16
    2ee6:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2ee8:	0a11      	lsrs	r1, r2, #8
    2eea:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2eec:	719a      	strb	r2, [r3, #6]
		len = 8;
    2eee:	2108      	movs	r1, #8
		break;
    2ef0:	e7a8      	b.n	2e44 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2ef2:	2080      	movs	r0, #128	; 0x80
    2ef4:	4240      	negs	r0, r0
    2ef6:	4303      	orrs	r3, r0
    2ef8:	a801      	add	r0, sp, #4
    2efa:	7043      	strb	r3, [r0, #1]
    2efc:	e7ee      	b.n	2edc <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    2efe:	ab01      	add	r3, sp, #4
    2f00:	0c08      	lsrs	r0, r1, #16
    2f02:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2f04:	0a08      	lsrs	r0, r1, #8
    2f06:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2f08:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2f0a:	0e11      	lsrs	r1, r2, #24
    2f0c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2f0e:	0c11      	lsrs	r1, r2, #16
    2f10:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2f12:	0a11      	lsrs	r1, r2, #8
    2f14:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2f16:	71da      	strb	r2, [r3, #7]
		len = 9;
    2f18:	2109      	movs	r1, #9
		break;
    2f1a:	e793      	b.n	2e44 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2f1c:	2290      	movs	r2, #144	; 0x90
    2f1e:	0052      	lsls	r2, r2, #1
    2f20:	4915      	ldr	r1, [pc, #84]	; (2f78 <spi_cmd+0x160>)
    2f22:	4816      	ldr	r0, [pc, #88]	; (2f7c <spi_cmd+0x164>)
    2f24:	4b16      	ldr	r3, [pc, #88]	; (2f80 <spi_cmd+0x168>)
    2f26:	4798      	blx	r3
    2f28:	4816      	ldr	r0, [pc, #88]	; (2f84 <spi_cmd+0x16c>)
    2f2a:	4b17      	ldr	r3, [pc, #92]	; (2f88 <spi_cmd+0x170>)
    2f2c:	4798      	blx	r3
    2f2e:	200d      	movs	r0, #13
    2f30:	4b16      	ldr	r3, [pc, #88]	; (2f8c <spi_cmd+0x174>)
    2f32:	4798      	blx	r3
			result = N_FAIL;
    2f34:	2300      	movs	r3, #0
    2f36:	e017      	b.n	2f68 <spi_cmd+0x150>
	switch (cmd) {
    2f38:	2300      	movs	r3, #0
    2f3a:	e015      	b.n	2f68 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2f3c:	1e4e      	subs	r6, r1, #1
    2f3e:	aa01      	add	r2, sp, #4
    2f40:	1995      	adds	r5, r2, r6
    2f42:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2f44:	4c12      	ldr	r4, [pc, #72]	; (2f90 <spi_cmd+0x178>)
    2f46:	005b      	lsls	r3, r3, #1
    2f48:	7810      	ldrb	r0, [r2, #0]
    2f4a:	4043      	eors	r3, r0
    2f4c:	5ce3      	ldrb	r3, [r4, r3]
    2f4e:	3201      	adds	r2, #1
	while (len--)
    2f50:	42aa      	cmp	r2, r5
    2f52:	d1f8      	bne.n	2f46 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2f54:	005b      	lsls	r3, r3, #1
    2f56:	aa01      	add	r2, sp, #4
    2f58:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2f5a:	b289      	uxth	r1, r1
    2f5c:	a801      	add	r0, sp, #4
    2f5e:	4b0d      	ldr	r3, [pc, #52]	; (2f94 <spi_cmd+0x17c>)
    2f60:	4798      	blx	r3
    2f62:	2301      	movs	r3, #1
    2f64:	2800      	cmp	r0, #0
    2f66:	d1d9      	bne.n	2f1c <spi_cmd+0x104>
		}
	}

	return result;
}
    2f68:	0018      	movs	r0, r3
    2f6a:	b004      	add	sp, #16
    2f6c:	bd70      	pop	{r4, r5, r6, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	0000d454 	.word	0x0000d454
    2f74:	200003ac 	.word	0x200003ac
    2f78:	0000d494 	.word	0x0000d494
    2f7c:	0000cdd0 	.word	0x0000cdd0
    2f80:	0000b779 	.word	0x0000b779
    2f84:	0000d924 	.word	0x0000d924
    2f88:	0000b895 	.word	0x0000b895
    2f8c:	0000b7ad 	.word	0x0000b7ad
    2f90:	0000d520 	.word	0x0000d520
    2f94:	00002df9 	.word	0x00002df9

00002f98 <nmi_spi_read>:
{
    2f98:	b500      	push	{lr}
    2f9a:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    2f9c:	ab01      	add	r3, sp, #4
    2f9e:	2200      	movs	r2, #0
    2fa0:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2fa2:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2fa4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2fa6:	0019      	movs	r1, r3
    2fa8:	2003      	movs	r0, #3
    2faa:	4b02      	ldr	r3, [pc, #8]	; (2fb4 <nmi_spi_read+0x1c>)
    2fac:	4798      	blx	r3
}
    2fae:	b005      	add	sp, #20
    2fb0:	bd00      	pop	{pc}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	00001499 	.word	0x00001499

00002fb8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fba:	46c6      	mov	lr, r8
    2fbc:	b500      	push	{lr}
    2fbe:	b082      	sub	sp, #8
    2fc0:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2fc2:	28cf      	cmp	r0, #207	; 0xcf
    2fc4:	d02b      	beq.n	301e <spi_cmd_rsp+0x66>
    2fc6:	0003      	movs	r3, r0
    2fc8:	333b      	adds	r3, #59	; 0x3b
    2fca:	b2db      	uxtb	r3, r3
    2fcc:	2b01      	cmp	r3, #1
    2fce:	d926      	bls.n	301e <spi_cmd_rsp+0x66>
{
    2fd0:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2fd2:	466b      	mov	r3, sp
    2fd4:	1dde      	adds	r6, r3, #7
    2fd6:	4b26      	ldr	r3, [pc, #152]	; (3070 <spi_cmd_rsp+0xb8>)
    2fd8:	4698      	mov	r8, r3
    2fda:	2101      	movs	r1, #1
    2fdc:	0030      	movs	r0, r6
    2fde:	47c0      	blx	r8
    2fe0:	1e05      	subs	r5, r0, #0
    2fe2:	d125      	bne.n	3030 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2fe4:	7833      	ldrb	r3, [r6, #0]
    2fe6:	42bb      	cmp	r3, r7
    2fe8:	d030      	beq.n	304c <spi_cmd_rsp+0x94>
    2fea:	3c01      	subs	r4, #1
    2fec:	b2e4      	uxtb	r4, r4
    2fee:	2c00      	cmp	r4, #0
    2ff0:	d1f3      	bne.n	2fda <spi_cmd_rsp+0x22>
    2ff2:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2ff4:	466b      	mov	r3, sp
    2ff6:	1dde      	adds	r6, r3, #7
    2ff8:	4f1d      	ldr	r7, [pc, #116]	; (3070 <spi_cmd_rsp+0xb8>)
    2ffa:	2101      	movs	r1, #1
    2ffc:	0030      	movs	r0, r6
    2ffe:	47b8      	blx	r7
    3000:	2800      	cmp	r0, #0
    3002:	d125      	bne.n	3050 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    3004:	7833      	ldrb	r3, [r6, #0]
    3006:	2b00      	cmp	r3, #0
    3008:	d02f      	beq.n	306a <spi_cmd_rsp+0xb2>
    300a:	3c01      	subs	r4, #1
    300c:	b2e4      	uxtb	r4, r4
    300e:	2c00      	cmp	r4, #0
    3010:	d1f3      	bne.n	2ffa <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    3012:	2501      	movs	r5, #1

_fail_:

	return result;
}
    3014:	0028      	movs	r0, r5
    3016:	b002      	add	sp, #8
    3018:	bc04      	pop	{r2}
    301a:	4690      	mov	r8, r2
    301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    301e:	2101      	movs	r1, #1
    3020:	466b      	mov	r3, sp
    3022:	1dd8      	adds	r0, r3, #7
    3024:	4b12      	ldr	r3, [pc, #72]	; (3070 <spi_cmd_rsp+0xb8>)
    3026:	4798      	blx	r3
			result = N_FAIL;
    3028:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    302a:	2800      	cmp	r0, #0
    302c:	d0d0      	beq.n	2fd0 <spi_cmd_rsp+0x18>
    302e:	e7f1      	b.n	3014 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3030:	225c      	movs	r2, #92	; 0x5c
    3032:	32ff      	adds	r2, #255	; 0xff
    3034:	490f      	ldr	r1, [pc, #60]	; (3074 <spi_cmd_rsp+0xbc>)
    3036:	4810      	ldr	r0, [pc, #64]	; (3078 <spi_cmd_rsp+0xc0>)
    3038:	4b10      	ldr	r3, [pc, #64]	; (307c <spi_cmd_rsp+0xc4>)
    303a:	4798      	blx	r3
    303c:	4810      	ldr	r0, [pc, #64]	; (3080 <spi_cmd_rsp+0xc8>)
    303e:	4b11      	ldr	r3, [pc, #68]	; (3084 <spi_cmd_rsp+0xcc>)
    3040:	4798      	blx	r3
    3042:	200d      	movs	r0, #13
    3044:	4b10      	ldr	r3, [pc, #64]	; (3088 <spi_cmd_rsp+0xd0>)
    3046:	4798      	blx	r3
			result = N_FAIL;
    3048:	2500      	movs	r5, #0
			goto _fail_;
    304a:	e7e3      	b.n	3014 <spi_cmd_rsp+0x5c>
    304c:	240b      	movs	r4, #11
    304e:	e7d1      	b.n	2ff4 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3050:	226a      	movs	r2, #106	; 0x6a
    3052:	32ff      	adds	r2, #255	; 0xff
    3054:	4907      	ldr	r1, [pc, #28]	; (3074 <spi_cmd_rsp+0xbc>)
    3056:	4808      	ldr	r0, [pc, #32]	; (3078 <spi_cmd_rsp+0xc0>)
    3058:	4b08      	ldr	r3, [pc, #32]	; (307c <spi_cmd_rsp+0xc4>)
    305a:	4798      	blx	r3
    305c:	4808      	ldr	r0, [pc, #32]	; (3080 <spi_cmd_rsp+0xc8>)
    305e:	4b09      	ldr	r3, [pc, #36]	; (3084 <spi_cmd_rsp+0xcc>)
    3060:	4798      	blx	r3
    3062:	200d      	movs	r0, #13
    3064:	4b08      	ldr	r3, [pc, #32]	; (3088 <spi_cmd_rsp+0xd0>)
    3066:	4798      	blx	r3
			goto _fail_;
    3068:	e7d4      	b.n	3014 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    306a:	2501      	movs	r5, #1
    306c:	e7d2      	b.n	3014 <spi_cmd_rsp+0x5c>
    306e:	46c0      	nop			; (mov r8, r8)
    3070:	00002f99 	.word	0x00002f99
    3074:	0000d4ac 	.word	0x0000d4ac
    3078:	0000cdd0 	.word	0x0000cdd0
    307c:	0000b779 	.word	0x0000b779
    3080:	0000d950 	.word	0x0000d950
    3084:	0000b895 	.word	0x0000b895
    3088:	0000b7ad 	.word	0x0000b7ad

0000308c <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    308c:	b5f0      	push	{r4, r5, r6, r7, lr}
    308e:	46de      	mov	lr, fp
    3090:	4657      	mov	r7, sl
    3092:	464e      	mov	r6, r9
    3094:	4645      	mov	r5, r8
    3096:	b5e0      	push	{r5, r6, r7, lr}
    3098:	b087      	sub	sp, #28
    309a:	9001      	str	r0, [sp, #4]
    309c:	4689      	mov	r9, r1
    309e:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    30a0:	2300      	movs	r3, #0
    30a2:	469a      	mov	sl, r3
    30a4:	2380      	movs	r3, #128	; 0x80
    30a6:	019b      	lsls	r3, r3, #6
    30a8:	469b      	mov	fp, r3
    30aa:	466a      	mov	r2, sp
    30ac:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    30ae:	4b3c      	ldr	r3, [pc, #240]	; (31a0 <spi_data_read+0x114>)
    30b0:	4698      	mov	r8, r3
    30b2:	e02f      	b.n	3114 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    30b4:	22be      	movs	r2, #190	; 0xbe
    30b6:	0092      	lsls	r2, r2, #2
    30b8:	493a      	ldr	r1, [pc, #232]	; (31a4 <spi_data_read+0x118>)
    30ba:	483b      	ldr	r0, [pc, #236]	; (31a8 <spi_data_read+0x11c>)
    30bc:	4b3b      	ldr	r3, [pc, #236]	; (31ac <spi_data_read+0x120>)
    30be:	4798      	blx	r3
    30c0:	483b      	ldr	r0, [pc, #236]	; (31b0 <spi_data_read+0x124>)
    30c2:	4b3c      	ldr	r3, [pc, #240]	; (31b4 <spi_data_read+0x128>)
    30c4:	4798      	blx	r3
    30c6:	200d      	movs	r0, #13
    30c8:	4b3b      	ldr	r3, [pc, #236]	; (31b8 <spi_data_read+0x12c>)
    30ca:	4798      	blx	r3
    30cc:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    30ce:	0028      	movs	r0, r5
    30d0:	b007      	add	sp, #28
    30d2:	bc3c      	pop	{r2, r3, r4, r5}
    30d4:	4690      	mov	r8, r2
    30d6:	4699      	mov	r9, r3
    30d8:	46a2      	mov	sl, r4
    30da:	46ab      	mov	fp, r5
    30dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    30de:	2c00      	cmp	r4, #0
    30e0:	dd2e      	ble.n	3140 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    30e2:	9b01      	ldr	r3, [sp, #4]
    30e4:	4453      	add	r3, sl
    30e6:	0018      	movs	r0, r3
    30e8:	0039      	movs	r1, r7
    30ea:	4b2d      	ldr	r3, [pc, #180]	; (31a0 <spi_data_read+0x114>)
    30ec:	4798      	blx	r3
    30ee:	1e04      	subs	r4, r0, #0
    30f0:	d134      	bne.n	315c <spi_data_read+0xd0>
		if(!clockless)
    30f2:	9b02      	ldr	r3, [sp, #8]
    30f4:	2b00      	cmp	r3, #0
    30f6:	d103      	bne.n	3100 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    30f8:	4b30      	ldr	r3, [pc, #192]	; (31bc <spi_data_read+0x130>)
    30fa:	781b      	ldrb	r3, [r3, #0]
    30fc:	2b00      	cmp	r3, #0
    30fe:	d039      	beq.n	3174 <spi_data_read+0xe8>
		ix += nbytes;
    3100:	4653      	mov	r3, sl
    3102:	18fb      	adds	r3, r7, r3
    3104:	b21b      	sxth	r3, r3
    3106:	469a      	mov	sl, r3
		sz -= nbytes;
    3108:	464b      	mov	r3, r9
    310a:	1bdf      	subs	r7, r3, r7
    310c:	b2bb      	uxth	r3, r7
    310e:	4699      	mov	r9, r3
	} while (sz);
    3110:	2b00      	cmp	r3, #0
    3112:	d043      	beq.n	319c <spi_data_read+0x110>
    3114:	464f      	mov	r7, r9
    3116:	45d9      	cmp	r9, fp
    3118:	d901      	bls.n	311e <spi_data_read+0x92>
    311a:	466b      	mov	r3, sp
    311c:	89df      	ldrh	r7, [r3, #14]
    311e:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    3120:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3122:	ab04      	add	r3, sp, #16
    3124:	1cde      	adds	r6, r3, #3
    3126:	2101      	movs	r1, #1
    3128:	0030      	movs	r0, r6
    312a:	47c0      	blx	r8
    312c:	1e05      	subs	r5, r0, #0
    312e:	d1c1      	bne.n	30b4 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    3130:	7833      	ldrb	r3, [r6, #0]
    3132:	091b      	lsrs	r3, r3, #4
    3134:	2b0f      	cmp	r3, #15
    3136:	d0d2      	beq.n	30de <spi_data_read+0x52>
    3138:	3c01      	subs	r4, #1
    313a:	b224      	sxth	r4, r4
		} while (retry--);
    313c:	1c63      	adds	r3, r4, #1
    313e:	d1f2      	bne.n	3126 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3140:	22c1      	movs	r2, #193	; 0xc1
    3142:	0092      	lsls	r2, r2, #2
    3144:	4917      	ldr	r1, [pc, #92]	; (31a4 <spi_data_read+0x118>)
    3146:	4818      	ldr	r0, [pc, #96]	; (31a8 <spi_data_read+0x11c>)
    3148:	4c18      	ldr	r4, [pc, #96]	; (31ac <spi_data_read+0x120>)
    314a:	47a0      	blx	r4
    314c:	ab04      	add	r3, sp, #16
    314e:	78d9      	ldrb	r1, [r3, #3]
    3150:	481b      	ldr	r0, [pc, #108]	; (31c0 <spi_data_read+0x134>)
    3152:	47a0      	blx	r4
    3154:	200d      	movs	r0, #13
    3156:	4b18      	ldr	r3, [pc, #96]	; (31b8 <spi_data_read+0x12c>)
    3158:	4798      	blx	r3
			break;
    315a:	e7b8      	b.n	30ce <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    315c:	4a19      	ldr	r2, [pc, #100]	; (31c4 <spi_data_read+0x138>)
    315e:	4911      	ldr	r1, [pc, #68]	; (31a4 <spi_data_read+0x118>)
    3160:	4811      	ldr	r0, [pc, #68]	; (31a8 <spi_data_read+0x11c>)
    3162:	4b12      	ldr	r3, [pc, #72]	; (31ac <spi_data_read+0x120>)
    3164:	4798      	blx	r3
    3166:	4818      	ldr	r0, [pc, #96]	; (31c8 <spi_data_read+0x13c>)
    3168:	4b12      	ldr	r3, [pc, #72]	; (31b4 <spi_data_read+0x128>)
    316a:	4798      	blx	r3
    316c:	200d      	movs	r0, #13
    316e:	4b12      	ldr	r3, [pc, #72]	; (31b8 <spi_data_read+0x12c>)
    3170:	4798      	blx	r3
			break;
    3172:	e7ac      	b.n	30ce <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3174:	2102      	movs	r1, #2
    3176:	a805      	add	r0, sp, #20
    3178:	4b09      	ldr	r3, [pc, #36]	; (31a0 <spi_data_read+0x114>)
    317a:	4798      	blx	r3
    317c:	2800      	cmp	r0, #0
    317e:	d0bf      	beq.n	3100 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    3180:	22c6      	movs	r2, #198	; 0xc6
    3182:	0092      	lsls	r2, r2, #2
    3184:	4907      	ldr	r1, [pc, #28]	; (31a4 <spi_data_read+0x118>)
    3186:	4808      	ldr	r0, [pc, #32]	; (31a8 <spi_data_read+0x11c>)
    3188:	4b08      	ldr	r3, [pc, #32]	; (31ac <spi_data_read+0x120>)
    318a:	4798      	blx	r3
    318c:	480f      	ldr	r0, [pc, #60]	; (31cc <spi_data_read+0x140>)
    318e:	4b09      	ldr	r3, [pc, #36]	; (31b4 <spi_data_read+0x128>)
    3190:	4798      	blx	r3
    3192:	200d      	movs	r0, #13
    3194:	4b08      	ldr	r3, [pc, #32]	; (31b8 <spi_data_read+0x12c>)
    3196:	4798      	blx	r3
					result = N_FAIL;
    3198:	0025      	movs	r5, r4
					break;
    319a:	e798      	b.n	30ce <spi_data_read+0x42>
    319c:	2501      	movs	r5, #1
    319e:	e796      	b.n	30ce <spi_data_read+0x42>
    31a0:	00002f99 	.word	0x00002f99
    31a4:	0000d4b8 	.word	0x0000d4b8
    31a8:	0000cdd0 	.word	0x0000cdd0
    31ac:	0000b779 	.word	0x0000b779
    31b0:	0000d984 	.word	0x0000d984
    31b4:	0000b895 	.word	0x0000b895
    31b8:	0000b7ad 	.word	0x0000b7ad
    31bc:	200003ac 	.word	0x200003ac
    31c0:	0000d9b8 	.word	0x0000d9b8
    31c4:	0000030d 	.word	0x0000030d
    31c8:	0000d9e8 	.word	0x0000d9e8
    31cc:	0000da18 	.word	0x0000da18

000031d0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    31d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31d2:	46d6      	mov	lr, sl
    31d4:	464f      	mov	r7, r9
    31d6:	4646      	mov	r6, r8
    31d8:	b5c0      	push	{r6, r7, lr}
    31da:	b086      	sub	sp, #24
    31dc:	9003      	str	r0, [sp, #12]
    31de:	9104      	str	r1, [sp, #16]
    31e0:	2830      	cmp	r0, #48	; 0x30
    31e2:	d80f      	bhi.n	3204 <spi_write_reg+0x34>
    31e4:	4b30      	ldr	r3, [pc, #192]	; (32a8 <spi_write_reg+0xd8>)
    31e6:	781f      	ldrb	r7, [r3, #0]
    31e8:	b2fb      	uxtb	r3, r7
    31ea:	9305      	str	r3, [sp, #20]
    31ec:	2300      	movs	r3, #0
    31ee:	2230      	movs	r2, #48	; 0x30
    31f0:	9903      	ldr	r1, [sp, #12]
    31f2:	428a      	cmp	r2, r1
    31f4:	415b      	adcs	r3, r3
    31f6:	b2db      	uxtb	r3, r3
    31f8:	469a      	mov	sl, r3
    31fa:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    31fc:	4b2b      	ldr	r3, [pc, #172]	; (32ac <spi_write_reg+0xdc>)
    31fe:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3200:	46d1      	mov	r9, sl
    3202:	e033      	b.n	326c <spi_write_reg+0x9c>
    3204:	4b2a      	ldr	r3, [pc, #168]	; (32b0 <spi_write_reg+0xe0>)
    3206:	781f      	ldrb	r7, [r3, #0]
    3208:	e7ee      	b.n	31e8 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    320a:	9805      	ldr	r0, [sp, #20]
    320c:	4b29      	ldr	r3, [pc, #164]	; (32b4 <spi_write_reg+0xe4>)
    320e:	4798      	blx	r3
    3210:	0004      	movs	r4, r0
	if (result != N_OK) {
    3212:	2801      	cmp	r0, #1
    3214:	d041      	beq.n	329a <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3216:	4a28      	ldr	r2, [pc, #160]	; (32b8 <spi_write_reg+0xe8>)
    3218:	4928      	ldr	r1, [pc, #160]	; (32bc <spi_write_reg+0xec>)
    321a:	4829      	ldr	r0, [pc, #164]	; (32c0 <spi_write_reg+0xf0>)
    321c:	4e29      	ldr	r6, [pc, #164]	; (32c4 <spi_write_reg+0xf4>)
    321e:	47b0      	blx	r6
    3220:	9903      	ldr	r1, [sp, #12]
    3222:	4829      	ldr	r0, [pc, #164]	; (32c8 <spi_write_reg+0xf8>)
    3224:	47b0      	blx	r6
    3226:	200d      	movs	r0, #13
    3228:	4b28      	ldr	r3, [pc, #160]	; (32cc <spi_write_reg+0xfc>)
    322a:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    322c:	2001      	movs	r0, #1
    322e:	4e28      	ldr	r6, [pc, #160]	; (32d0 <spi_write_reg+0x100>)
    3230:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3232:	2300      	movs	r3, #0
    3234:	9300      	str	r3, [sp, #0]
    3236:	2200      	movs	r2, #0
    3238:	2100      	movs	r1, #0
    323a:	20cf      	movs	r0, #207	; 0xcf
    323c:	4f1b      	ldr	r7, [pc, #108]	; (32ac <spi_write_reg+0xdc>)
    323e:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    3240:	20cf      	movs	r0, #207	; 0xcf
    3242:	4b1c      	ldr	r3, [pc, #112]	; (32b4 <spi_write_reg+0xe4>)
    3244:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3246:	22ea      	movs	r2, #234	; 0xea
    3248:	0092      	lsls	r2, r2, #2
    324a:	491c      	ldr	r1, [pc, #112]	; (32bc <spi_write_reg+0xec>)
    324c:	481c      	ldr	r0, [pc, #112]	; (32c0 <spi_write_reg+0xf0>)
    324e:	4f1d      	ldr	r7, [pc, #116]	; (32c4 <spi_write_reg+0xf4>)
    3250:	47b8      	blx	r7
    3252:	9b04      	ldr	r3, [sp, #16]
    3254:	9a03      	ldr	r2, [sp, #12]
    3256:	0029      	movs	r1, r5
    3258:	481e      	ldr	r0, [pc, #120]	; (32d4 <spi_write_reg+0x104>)
    325a:	47b8      	blx	r7
    325c:	200d      	movs	r0, #13
    325e:	4b1b      	ldr	r3, [pc, #108]	; (32cc <spi_write_reg+0xfc>)
    3260:	4798      	blx	r3
		nm_bsp_sleep(1);
    3262:	2001      	movs	r0, #1
    3264:	47b0      	blx	r6
    3266:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    3268:	2d00      	cmp	r5, #0
    326a:	d016      	beq.n	329a <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    326c:	464b      	mov	r3, r9
    326e:	9300      	str	r3, [sp, #0]
    3270:	2304      	movs	r3, #4
    3272:	9a04      	ldr	r2, [sp, #16]
    3274:	9f03      	ldr	r7, [sp, #12]
    3276:	0039      	movs	r1, r7
    3278:	9805      	ldr	r0, [sp, #20]
    327a:	47c0      	blx	r8
    327c:	0004      	movs	r4, r0
	if (result != N_OK) {
    327e:	2801      	cmp	r0, #1
    3280:	d0c3      	beq.n	320a <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    3282:	4a15      	ldr	r2, [pc, #84]	; (32d8 <spi_write_reg+0x108>)
    3284:	490d      	ldr	r1, [pc, #52]	; (32bc <spi_write_reg+0xec>)
    3286:	480e      	ldr	r0, [pc, #56]	; (32c0 <spi_write_reg+0xf0>)
    3288:	4e0e      	ldr	r6, [pc, #56]	; (32c4 <spi_write_reg+0xf4>)
    328a:	47b0      	blx	r6
    328c:	0039      	movs	r1, r7
    328e:	4813      	ldr	r0, [pc, #76]	; (32dc <spi_write_reg+0x10c>)
    3290:	47b0      	blx	r6
    3292:	200d      	movs	r0, #13
    3294:	4b0d      	ldr	r3, [pc, #52]	; (32cc <spi_write_reg+0xfc>)
    3296:	4798      	blx	r3
		goto _FAIL_;
    3298:	e7c8      	b.n	322c <spi_write_reg+0x5c>
	}

	return result;
}
    329a:	0020      	movs	r0, r4
    329c:	b006      	add	sp, #24
    329e:	bc1c      	pop	{r2, r3, r4}
    32a0:	4690      	mov	r8, r2
    32a2:	4699      	mov	r9, r3
    32a4:	46a2      	mov	sl, r4
    32a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32a8:	0000d490 	.word	0x0000d490
    32ac:	00002e19 	.word	0x00002e19
    32b0:	0000d491 	.word	0x0000d491
    32b4:	00002fb9 	.word	0x00002fb9
    32b8:	00000395 	.word	0x00000395
    32bc:	0000d4d8 	.word	0x0000d4d8
    32c0:	0000cdd0 	.word	0x0000cdd0
    32c4:	0000b779 	.word	0x0000b779
    32c8:	0000db10 	.word	0x0000db10
    32cc:	0000b7ad 	.word	0x0000b7ad
    32d0:	000012d9 	.word	0x000012d9
    32d4:	0000db48 	.word	0x0000db48
    32d8:	0000038f 	.word	0x0000038f
    32dc:	0000dae4 	.word	0x0000dae4

000032e0 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    32e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32e2:	46de      	mov	lr, fp
    32e4:	4657      	mov	r7, sl
    32e6:	464e      	mov	r6, r9
    32e8:	4645      	mov	r5, r8
    32ea:	b5e0      	push	{r5, r6, r7, lr}
    32ec:	b087      	sub	sp, #28
    32ee:	9002      	str	r0, [sp, #8]
    32f0:	468b      	mov	fp, r1
    32f2:	28ff      	cmp	r0, #255	; 0xff
    32f4:	d80f      	bhi.n	3316 <spi_read_reg+0x36>
    32f6:	4b41      	ldr	r3, [pc, #260]	; (33fc <spi_read_reg+0x11c>)
    32f8:	781f      	ldrb	r7, [r3, #0]
    32fa:	b2fb      	uxtb	r3, r7
    32fc:	9303      	str	r3, [sp, #12]
    32fe:	2300      	movs	r3, #0
    3300:	22ff      	movs	r2, #255	; 0xff
    3302:	9902      	ldr	r1, [sp, #8]
    3304:	428a      	cmp	r2, r1
    3306:	415b      	adcs	r3, r3
    3308:	b2db      	uxtb	r3, r3
    330a:	469a      	mov	sl, r3
    330c:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    330e:	4b3c      	ldr	r3, [pc, #240]	; (3400 <spi_read_reg+0x120>)
    3310:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    3312:	46d1      	mov	r9, sl
    3314:	e031      	b.n	337a <spi_read_reg+0x9a>
    3316:	4b3b      	ldr	r3, [pc, #236]	; (3404 <spi_read_reg+0x124>)
    3318:	781f      	ldrb	r7, [r3, #0]
    331a:	e7ee      	b.n	32fa <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    331c:	9803      	ldr	r0, [sp, #12]
    331e:	4b3a      	ldr	r3, [pc, #232]	; (3408 <spi_read_reg+0x128>)
    3320:	4798      	blx	r3
    3322:	0004      	movs	r4, r0
	if (result != N_OK) {
    3324:	2801      	cmp	r0, #1
    3326:	d040      	beq.n	33aa <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    3328:	4a38      	ldr	r2, [pc, #224]	; (340c <spi_read_reg+0x12c>)
    332a:	4939      	ldr	r1, [pc, #228]	; (3410 <spi_read_reg+0x130>)
    332c:	4839      	ldr	r0, [pc, #228]	; (3414 <spi_read_reg+0x134>)
    332e:	4e3a      	ldr	r6, [pc, #232]	; (3418 <spi_read_reg+0x138>)
    3330:	47b0      	blx	r6
    3332:	9902      	ldr	r1, [sp, #8]
    3334:	4839      	ldr	r0, [pc, #228]	; (341c <spi_read_reg+0x13c>)
    3336:	47b0      	blx	r6
    3338:	200d      	movs	r0, #13
    333a:	4b39      	ldr	r3, [pc, #228]	; (3420 <spi_read_reg+0x140>)
    333c:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    333e:	2001      	movs	r0, #1
    3340:	4e38      	ldr	r6, [pc, #224]	; (3424 <spi_read_reg+0x144>)
    3342:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3344:	2300      	movs	r3, #0
    3346:	9300      	str	r3, [sp, #0]
    3348:	2200      	movs	r2, #0
    334a:	2100      	movs	r1, #0
    334c:	20cf      	movs	r0, #207	; 0xcf
    334e:	4f2c      	ldr	r7, [pc, #176]	; (3400 <spi_read_reg+0x120>)
    3350:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    3352:	20cf      	movs	r0, #207	; 0xcf
    3354:	4b2c      	ldr	r3, [pc, #176]	; (3408 <spi_read_reg+0x128>)
    3356:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    3358:	4a33      	ldr	r2, [pc, #204]	; (3428 <spi_read_reg+0x148>)
    335a:	492d      	ldr	r1, [pc, #180]	; (3410 <spi_read_reg+0x130>)
    335c:	482d      	ldr	r0, [pc, #180]	; (3414 <spi_read_reg+0x134>)
    335e:	4f2e      	ldr	r7, [pc, #184]	; (3418 <spi_read_reg+0x138>)
    3360:	47b8      	blx	r7
    3362:	9a02      	ldr	r2, [sp, #8]
    3364:	0029      	movs	r1, r5
    3366:	4831      	ldr	r0, [pc, #196]	; (342c <spi_read_reg+0x14c>)
    3368:	47b8      	blx	r7
    336a:	200d      	movs	r0, #13
    336c:	4b2c      	ldr	r3, [pc, #176]	; (3420 <spi_read_reg+0x140>)
    336e:	4798      	blx	r3
		nm_bsp_sleep(1);
    3370:	2001      	movs	r0, #1
    3372:	47b0      	blx	r6
    3374:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    3376:	2d00      	cmp	r5, #0
    3378:	d038      	beq.n	33ec <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    337a:	464b      	mov	r3, r9
    337c:	9300      	str	r3, [sp, #0]
    337e:	2304      	movs	r3, #4
    3380:	2200      	movs	r2, #0
    3382:	9f02      	ldr	r7, [sp, #8]
    3384:	0039      	movs	r1, r7
    3386:	9803      	ldr	r0, [sp, #12]
    3388:	47c0      	blx	r8
    338a:	0004      	movs	r4, r0
	if (result != N_OK) {
    338c:	2801      	cmp	r0, #1
    338e:	d0c5      	beq.n	331c <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    3390:	2282      	movs	r2, #130	; 0x82
    3392:	00d2      	lsls	r2, r2, #3
    3394:	491e      	ldr	r1, [pc, #120]	; (3410 <spi_read_reg+0x130>)
    3396:	481f      	ldr	r0, [pc, #124]	; (3414 <spi_read_reg+0x134>)
    3398:	4e1f      	ldr	r6, [pc, #124]	; (3418 <spi_read_reg+0x138>)
    339a:	47b0      	blx	r6
    339c:	0039      	movs	r1, r7
    339e:	4824      	ldr	r0, [pc, #144]	; (3430 <spi_read_reg+0x150>)
    33a0:	47b0      	blx	r6
    33a2:	200d      	movs	r0, #13
    33a4:	4b1e      	ldr	r3, [pc, #120]	; (3420 <spi_read_reg+0x140>)
    33a6:	4798      	blx	r3
		goto _FAIL_;
    33a8:	e7c9      	b.n	333e <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    33aa:	464a      	mov	r2, r9
    33ac:	2104      	movs	r1, #4
    33ae:	a805      	add	r0, sp, #20
    33b0:	4b20      	ldr	r3, [pc, #128]	; (3434 <spi_read_reg+0x154>)
    33b2:	4798      	blx	r3
    33b4:	0004      	movs	r4, r0
	if (result != N_OK) {
    33b6:	2801      	cmp	r0, #1
    33b8:	d00b      	beq.n	33d2 <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    33ba:	4a1f      	ldr	r2, [pc, #124]	; (3438 <spi_read_reg+0x158>)
    33bc:	4914      	ldr	r1, [pc, #80]	; (3410 <spi_read_reg+0x130>)
    33be:	4815      	ldr	r0, [pc, #84]	; (3414 <spi_read_reg+0x134>)
    33c0:	4b15      	ldr	r3, [pc, #84]	; (3418 <spi_read_reg+0x138>)
    33c2:	4798      	blx	r3
    33c4:	481d      	ldr	r0, [pc, #116]	; (343c <spi_read_reg+0x15c>)
    33c6:	4b1e      	ldr	r3, [pc, #120]	; (3440 <spi_read_reg+0x160>)
    33c8:	4798      	blx	r3
    33ca:	200d      	movs	r0, #13
    33cc:	4b14      	ldr	r3, [pc, #80]	; (3420 <spi_read_reg+0x140>)
    33ce:	4798      	blx	r3
		goto _FAIL_;
    33d0:	e7b5      	b.n	333e <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    33d2:	aa05      	add	r2, sp, #20
    33d4:	7853      	ldrb	r3, [r2, #1]
    33d6:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    33d8:	7891      	ldrb	r1, [r2, #2]
    33da:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    33dc:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    33de:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    33e0:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    33e2:	78d2      	ldrb	r2, [r2, #3]
    33e4:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    33e6:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    33e8:	465a      	mov	r2, fp
    33ea:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    33ec:	0020      	movs	r0, r4
    33ee:	b007      	add	sp, #28
    33f0:	bc3c      	pop	{r2, r3, r4, r5}
    33f2:	4690      	mov	r8, r2
    33f4:	4699      	mov	r9, r3
    33f6:	46a2      	mov	sl, r4
    33f8:	46ab      	mov	fp, r5
    33fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33fc:	0000d492 	.word	0x0000d492
    3400:	00002e19 	.word	0x00002e19
    3404:	0000d493 	.word	0x0000d493
    3408:	00002fb9 	.word	0x00002fb9
    340c:	00000416 	.word	0x00000416
    3410:	0000d4f8 	.word	0x0000d4f8
    3414:	0000cdd0 	.word	0x0000cdd0
    3418:	0000b779 	.word	0x0000b779
    341c:	0000da78 	.word	0x0000da78
    3420:	0000b7ad 	.word	0x0000b7ad
    3424:	000012d9 	.word	0x000012d9
    3428:	00000435 	.word	0x00000435
    342c:	0000dacc 	.word	0x0000dacc
    3430:	0000da4c 	.word	0x0000da4c
    3434:	0000308d 	.word	0x0000308d
    3438:	0000041d 	.word	0x0000041d
    343c:	0000daac 	.word	0x0000daac
    3440:	0000b895 	.word	0x0000b895

00003444 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    3444:	b510      	push	{r4, lr}
    3446:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3448:	2300      	movs	r3, #0
    344a:	9300      	str	r3, [sp, #0]
    344c:	2200      	movs	r2, #0
    344e:	2100      	movs	r1, #0
    3450:	20cf      	movs	r0, #207	; 0xcf
    3452:	4c04      	ldr	r4, [pc, #16]	; (3464 <nm_spi_reset+0x20>)
    3454:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    3456:	20cf      	movs	r0, #207	; 0xcf
    3458:	4b03      	ldr	r3, [pc, #12]	; (3468 <nm_spi_reset+0x24>)
    345a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    345c:	2000      	movs	r0, #0
    345e:	b002      	add	sp, #8
    3460:	bd10      	pop	{r4, pc}
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	00002e19 	.word	0x00002e19
    3468:	00002fb9 	.word	0x00002fb9

0000346c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    346c:	2200      	movs	r2, #0
    346e:	4b02      	ldr	r3, [pc, #8]	; (3478 <nm_spi_deinit+0xc>)
    3470:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    3472:	2000      	movs	r0, #0
    3474:	4770      	bx	lr
    3476:	46c0      	nop			; (mov r8, r8)
    3478:	200003ac 	.word	0x200003ac

0000347c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    347c:	b500      	push	{lr}
    347e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    3480:	a901      	add	r1, sp, #4
    3482:	4b02      	ldr	r3, [pc, #8]	; (348c <nm_spi_read_reg+0x10>)
    3484:	4798      	blx	r3

	return u32Val;
}
    3486:	9801      	ldr	r0, [sp, #4]
    3488:	b003      	add	sp, #12
    348a:	bd00      	pop	{pc}
    348c:	000032e1 	.word	0x000032e1

00003490 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    3490:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    3492:	4b04      	ldr	r3, [pc, #16]	; (34a4 <nm_spi_read_reg_with_ret+0x14>)
    3494:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3496:	2300      	movs	r3, #0
    3498:	2801      	cmp	r0, #1
    349a:	d101      	bne.n	34a0 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    349c:	0018      	movs	r0, r3
    349e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    34a0:	3b06      	subs	r3, #6
    34a2:	e7fb      	b.n	349c <nm_spi_read_reg_with_ret+0xc>
    34a4:	000032e1 	.word	0x000032e1

000034a8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    34a8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    34aa:	4b04      	ldr	r3, [pc, #16]	; (34bc <nm_spi_write_reg+0x14>)
    34ac:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    34ae:	2300      	movs	r3, #0
    34b0:	2801      	cmp	r0, #1
    34b2:	d101      	bne.n	34b8 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    34b4:	0018      	movs	r0, r3
    34b6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    34b8:	3b06      	subs	r3, #6
    34ba:	e7fb      	b.n	34b4 <nm_spi_write_reg+0xc>
    34bc:	000031d1 	.word	0x000031d1

000034c0 <nm_spi_init>:
{
    34c0:	b510      	push	{r4, lr}
    34c2:	b082      	sub	sp, #8
	uint32 reg = 0;
    34c4:	2300      	movs	r3, #0
    34c6:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    34c8:	4a35      	ldr	r2, [pc, #212]	; (35a0 <nm_spi_init+0xe0>)
    34ca:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    34cc:	4669      	mov	r1, sp
    34ce:	4835      	ldr	r0, [pc, #212]	; (35a4 <nm_spi_init+0xe4>)
    34d0:	4b35      	ldr	r3, [pc, #212]	; (35a8 <nm_spi_init+0xe8>)
    34d2:	4798      	blx	r3
    34d4:	2800      	cmp	r0, #0
    34d6:	d028      	beq.n	352a <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    34d8:	4b31      	ldr	r3, [pc, #196]	; (35a0 <nm_spi_init+0xe0>)
    34da:	781b      	ldrb	r3, [r3, #0]
    34dc:	2b00      	cmp	r3, #0
    34de:	d10d      	bne.n	34fc <nm_spi_init+0x3c>
		reg &= ~0x70;
    34e0:	337c      	adds	r3, #124	; 0x7c
    34e2:	9900      	ldr	r1, [sp, #0]
    34e4:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    34e6:	3b2c      	subs	r3, #44	; 0x2c
    34e8:	4319      	orrs	r1, r3
    34ea:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    34ec:	482d      	ldr	r0, [pc, #180]	; (35a4 <nm_spi_init+0xe4>)
    34ee:	4b2f      	ldr	r3, [pc, #188]	; (35ac <nm_spi_init+0xec>)
    34f0:	4798      	blx	r3
    34f2:	1e04      	subs	r4, r0, #0
    34f4:	d03a      	beq.n	356c <nm_spi_init+0xac>
		gu8Crc_off = 1;
    34f6:	2201      	movs	r2, #1
    34f8:	4b29      	ldr	r3, [pc, #164]	; (35a0 <nm_spi_init+0xe0>)
    34fa:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    34fc:	a901      	add	r1, sp, #4
    34fe:	2080      	movs	r0, #128	; 0x80
    3500:	0140      	lsls	r0, r0, #5
    3502:	4b29      	ldr	r3, [pc, #164]	; (35a8 <nm_spi_init+0xe8>)
    3504:	4798      	blx	r3
    3506:	2800      	cmp	r0, #0
    3508:	d03c      	beq.n	3584 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    350a:	4c26      	ldr	r4, [pc, #152]	; (35a4 <nm_spi_init+0xe4>)
    350c:	0020      	movs	r0, r4
    350e:	4b28      	ldr	r3, [pc, #160]	; (35b0 <nm_spi_init+0xf0>)
    3510:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    3512:	2370      	movs	r3, #112	; 0x70
    3514:	0001      	movs	r1, r0
    3516:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    3518:	2050      	movs	r0, #80	; 0x50
    351a:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    351c:	0020      	movs	r0, r4
    351e:	4b25      	ldr	r3, [pc, #148]	; (35b4 <nm_spi_init+0xf4>)
    3520:	4798      	blx	r3
	return M2M_SUCCESS;
    3522:	2400      	movs	r4, #0
}
    3524:	0020      	movs	r0, r4
    3526:	b002      	add	sp, #8
    3528:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    352a:	2201      	movs	r2, #1
    352c:	4b1c      	ldr	r3, [pc, #112]	; (35a0 <nm_spi_init+0xe0>)
    352e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    3530:	2298      	movs	r2, #152	; 0x98
    3532:	00d2      	lsls	r2, r2, #3
    3534:	4920      	ldr	r1, [pc, #128]	; (35b8 <nm_spi_init+0xf8>)
    3536:	4821      	ldr	r0, [pc, #132]	; (35bc <nm_spi_init+0xfc>)
    3538:	4b21      	ldr	r3, [pc, #132]	; (35c0 <nm_spi_init+0x100>)
    353a:	4798      	blx	r3
    353c:	4821      	ldr	r0, [pc, #132]	; (35c4 <nm_spi_init+0x104>)
    353e:	4b22      	ldr	r3, [pc, #136]	; (35c8 <nm_spi_init+0x108>)
    3540:	4798      	blx	r3
    3542:	200d      	movs	r0, #13
    3544:	4b21      	ldr	r3, [pc, #132]	; (35cc <nm_spi_init+0x10c>)
    3546:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    3548:	4669      	mov	r1, sp
    354a:	4816      	ldr	r0, [pc, #88]	; (35a4 <nm_spi_init+0xe4>)
    354c:	4b16      	ldr	r3, [pc, #88]	; (35a8 <nm_spi_init+0xe8>)
    354e:	4798      	blx	r3
    3550:	1e04      	subs	r4, r0, #0
    3552:	d1c1      	bne.n	34d8 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    3554:	4a1e      	ldr	r2, [pc, #120]	; (35d0 <nm_spi_init+0x110>)
    3556:	4918      	ldr	r1, [pc, #96]	; (35b8 <nm_spi_init+0xf8>)
    3558:	4818      	ldr	r0, [pc, #96]	; (35bc <nm_spi_init+0xfc>)
    355a:	4b19      	ldr	r3, [pc, #100]	; (35c0 <nm_spi_init+0x100>)
    355c:	4798      	blx	r3
    355e:	481d      	ldr	r0, [pc, #116]	; (35d4 <nm_spi_init+0x114>)
    3560:	4b19      	ldr	r3, [pc, #100]	; (35c8 <nm_spi_init+0x108>)
    3562:	4798      	blx	r3
    3564:	200d      	movs	r0, #13
    3566:	4b19      	ldr	r3, [pc, #100]	; (35cc <nm_spi_init+0x10c>)
    3568:	4798      	blx	r3
			return 0;
    356a:	e7db      	b.n	3524 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    356c:	4a1a      	ldr	r2, [pc, #104]	; (35d8 <nm_spi_init+0x118>)
    356e:	4912      	ldr	r1, [pc, #72]	; (35b8 <nm_spi_init+0xf8>)
    3570:	4812      	ldr	r0, [pc, #72]	; (35bc <nm_spi_init+0xfc>)
    3572:	4b13      	ldr	r3, [pc, #76]	; (35c0 <nm_spi_init+0x100>)
    3574:	4798      	blx	r3
    3576:	4819      	ldr	r0, [pc, #100]	; (35dc <nm_spi_init+0x11c>)
    3578:	4b13      	ldr	r3, [pc, #76]	; (35c8 <nm_spi_init+0x108>)
    357a:	4798      	blx	r3
    357c:	200d      	movs	r0, #13
    357e:	4b13      	ldr	r3, [pc, #76]	; (35cc <nm_spi_init+0x10c>)
    3580:	4798      	blx	r3
			return 0;
    3582:	e7cf      	b.n	3524 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    3584:	4a16      	ldr	r2, [pc, #88]	; (35e0 <nm_spi_init+0x120>)
    3586:	490c      	ldr	r1, [pc, #48]	; (35b8 <nm_spi_init+0xf8>)
    3588:	480c      	ldr	r0, [pc, #48]	; (35bc <nm_spi_init+0xfc>)
    358a:	4b0d      	ldr	r3, [pc, #52]	; (35c0 <nm_spi_init+0x100>)
    358c:	4798      	blx	r3
    358e:	4815      	ldr	r0, [pc, #84]	; (35e4 <nm_spi_init+0x124>)
    3590:	4b0d      	ldr	r3, [pc, #52]	; (35c8 <nm_spi_init+0x108>)
    3592:	4798      	blx	r3
    3594:	200d      	movs	r0, #13
    3596:	4b0d      	ldr	r3, [pc, #52]	; (35cc <nm_spi_init+0x10c>)
    3598:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    359a:	2406      	movs	r4, #6
    359c:	4264      	negs	r4, r4
    359e:	e7c1      	b.n	3524 <nm_spi_init+0x64>
    35a0:	200003ac 	.word	0x200003ac
    35a4:	0000e824 	.word	0x0000e824
    35a8:	000032e1 	.word	0x000032e1
    35ac:	000031d1 	.word	0x000031d1
    35b0:	0000347d 	.word	0x0000347d
    35b4:	000034a9 	.word	0x000034a9
    35b8:	0000d514 	.word	0x0000d514
    35bc:	0000cdd0 	.word	0x0000cdd0
    35c0:	0000b779 	.word	0x0000b779
    35c4:	0000d620 	.word	0x0000d620
    35c8:	0000b895 	.word	0x0000b895
    35cc:	0000b7ad 	.word	0x0000b7ad
    35d0:	000004c3 	.word	0x000004c3
    35d4:	0000d670 	.word	0x0000d670
    35d8:	000004cd 	.word	0x000004cd
    35dc:	0000d69c 	.word	0x0000d69c
    35e0:	000004d7 	.word	0x000004d7
    35e4:	0000d6d0 	.word	0x0000d6d0

000035e8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    35e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ea:	46de      	mov	lr, fp
    35ec:	4657      	mov	r7, sl
    35ee:	464e      	mov	r6, r9
    35f0:	4645      	mov	r5, r8
    35f2:	b5e0      	push	{r5, r6, r7, lr}
    35f4:	b087      	sub	sp, #28
    35f6:	9002      	str	r0, [sp, #8]
    35f8:	9103      	str	r1, [sp, #12]
    35fa:	0016      	movs	r6, r2
    35fc:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    35fe:	2300      	movs	r3, #0
    3600:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    3602:	2400      	movs	r4, #0
    3604:	4b3e      	ldr	r3, [pc, #248]	; (3700 <nm_spi_read_block+0x118>)
    3606:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    3608:	46a9      	mov	r9, r5
    360a:	e037      	b.n	367c <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    360c:	2301      	movs	r3, #1
    360e:	469b      	mov	fp, r3
		size = 2;
    3610:	3601      	adds	r6, #1
    3612:	e035      	b.n	3680 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    3614:	20c8      	movs	r0, #200	; 0xc8
    3616:	4b3b      	ldr	r3, [pc, #236]	; (3704 <nm_spi_read_block+0x11c>)
    3618:	4798      	blx	r3
	if (result != N_OK) {
    361a:	2801      	cmp	r0, #1
    361c:	d045      	beq.n	36aa <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    361e:	4a3a      	ldr	r2, [pc, #232]	; (3708 <nm_spi_read_block+0x120>)
    3620:	493a      	ldr	r1, [pc, #232]	; (370c <nm_spi_read_block+0x124>)
    3622:	483b      	ldr	r0, [pc, #236]	; (3710 <nm_spi_read_block+0x128>)
    3624:	4f3b      	ldr	r7, [pc, #236]	; (3714 <nm_spi_read_block+0x12c>)
    3626:	47b8      	blx	r7
    3628:	9902      	ldr	r1, [sp, #8]
    362a:	483b      	ldr	r0, [pc, #236]	; (3718 <nm_spi_read_block+0x130>)
    362c:	47b8      	blx	r7
    362e:	200d      	movs	r0, #13
    3630:	4b3a      	ldr	r3, [pc, #232]	; (371c <nm_spi_read_block+0x134>)
    3632:	4798      	blx	r3
		nm_bsp_sleep(1);
    3634:	2001      	movs	r0, #1
    3636:	4f3a      	ldr	r7, [pc, #232]	; (3720 <nm_spi_read_block+0x138>)
    3638:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    363a:	9400      	str	r4, [sp, #0]
    363c:	0023      	movs	r3, r4
    363e:	0022      	movs	r2, r4
    3640:	0021      	movs	r1, r4
    3642:	20cf      	movs	r0, #207	; 0xcf
    3644:	4d2e      	ldr	r5, [pc, #184]	; (3700 <nm_spi_read_block+0x118>)
    3646:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    3648:	20cf      	movs	r0, #207	; 0xcf
    364a:	4b2e      	ldr	r3, [pc, #184]	; (3704 <nm_spi_read_block+0x11c>)
    364c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    364e:	4a35      	ldr	r2, [pc, #212]	; (3724 <nm_spi_read_block+0x13c>)
    3650:	492e      	ldr	r1, [pc, #184]	; (370c <nm_spi_read_block+0x124>)
    3652:	482f      	ldr	r0, [pc, #188]	; (3710 <nm_spi_read_block+0x128>)
    3654:	4b2f      	ldr	r3, [pc, #188]	; (3714 <nm_spi_read_block+0x12c>)
    3656:	469a      	mov	sl, r3
    3658:	4798      	blx	r3
    365a:	0033      	movs	r3, r6
    365c:	9a02      	ldr	r2, [sp, #8]
    365e:	4649      	mov	r1, r9
    3660:	4831      	ldr	r0, [pc, #196]	; (3728 <nm_spi_read_block+0x140>)
    3662:	47d0      	blx	sl
    3664:	200d      	movs	r0, #13
    3666:	4b2d      	ldr	r3, [pc, #180]	; (371c <nm_spi_read_block+0x134>)
    3668:	4798      	blx	r3
		nm_bsp_sleep(1);
    366a:	2001      	movs	r0, #1
    366c:	47b8      	blx	r7
    366e:	2301      	movs	r3, #1
    3670:	425b      	negs	r3, r3
    3672:	469c      	mov	ip, r3
    3674:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    3676:	464b      	mov	r3, r9
    3678:	2b00      	cmp	r3, #0
    367a:	d038      	beq.n	36ee <nm_spi_read_block+0x106>
	if (size == 1)
    367c:	2e01      	cmp	r6, #1
    367e:	d0c5      	beq.n	360c <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    3680:	9400      	str	r4, [sp, #0]
    3682:	0033      	movs	r3, r6
    3684:	0022      	movs	r2, r4
    3686:	9d02      	ldr	r5, [sp, #8]
    3688:	0029      	movs	r1, r5
    368a:	20c8      	movs	r0, #200	; 0xc8
    368c:	47c0      	blx	r8
	if (result != N_OK) {
    368e:	2801      	cmp	r0, #1
    3690:	d0c0      	beq.n	3614 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    3692:	4a26      	ldr	r2, [pc, #152]	; (372c <nm_spi_read_block+0x144>)
    3694:	491d      	ldr	r1, [pc, #116]	; (370c <nm_spi_read_block+0x124>)
    3696:	481e      	ldr	r0, [pc, #120]	; (3710 <nm_spi_read_block+0x128>)
    3698:	4f1e      	ldr	r7, [pc, #120]	; (3714 <nm_spi_read_block+0x12c>)
    369a:	47b8      	blx	r7
    369c:	0029      	movs	r1, r5
    369e:	4824      	ldr	r0, [pc, #144]	; (3730 <nm_spi_read_block+0x148>)
    36a0:	47b8      	blx	r7
    36a2:	200d      	movs	r0, #13
    36a4:	4b1d      	ldr	r3, [pc, #116]	; (371c <nm_spi_read_block+0x134>)
    36a6:	4798      	blx	r3
    36a8:	e7c4      	b.n	3634 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    36aa:	465b      	mov	r3, fp
    36ac:	2b00      	cmp	r3, #0
    36ae:	d016      	beq.n	36de <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    36b0:	af05      	add	r7, sp, #20
    36b2:	0022      	movs	r2, r4
    36b4:	0031      	movs	r1, r6
    36b6:	0038      	movs	r0, r7
    36b8:	4b1e      	ldr	r3, [pc, #120]	; (3734 <nm_spi_read_block+0x14c>)
    36ba:	4798      	blx	r3
		buf[0] = tmp[0];
    36bc:	783b      	ldrb	r3, [r7, #0]
    36be:	9a03      	ldr	r2, [sp, #12]
    36c0:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    36c2:	2801      	cmp	r0, #1
    36c4:	d011      	beq.n	36ea <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    36c6:	4a1c      	ldr	r2, [pc, #112]	; (3738 <nm_spi_read_block+0x150>)
    36c8:	4910      	ldr	r1, [pc, #64]	; (370c <nm_spi_read_block+0x124>)
    36ca:	4811      	ldr	r0, [pc, #68]	; (3710 <nm_spi_read_block+0x128>)
    36cc:	4b11      	ldr	r3, [pc, #68]	; (3714 <nm_spi_read_block+0x12c>)
    36ce:	4798      	blx	r3
    36d0:	481a      	ldr	r0, [pc, #104]	; (373c <nm_spi_read_block+0x154>)
    36d2:	4b1b      	ldr	r3, [pc, #108]	; (3740 <nm_spi_read_block+0x158>)
    36d4:	4798      	blx	r3
    36d6:	200d      	movs	r0, #13
    36d8:	4b10      	ldr	r3, [pc, #64]	; (371c <nm_spi_read_block+0x134>)
    36da:	4798      	blx	r3
    36dc:	e7aa      	b.n	3634 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    36de:	0022      	movs	r2, r4
    36e0:	0031      	movs	r1, r6
    36e2:	9803      	ldr	r0, [sp, #12]
    36e4:	4b13      	ldr	r3, [pc, #76]	; (3734 <nm_spi_read_block+0x14c>)
    36e6:	4798      	blx	r3
    36e8:	e7eb      	b.n	36c2 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    36ea:	2000      	movs	r0, #0
    36ec:	e001      	b.n	36f2 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    36ee:	2006      	movs	r0, #6
    36f0:	4240      	negs	r0, r0

	return s8Ret;
}
    36f2:	b007      	add	sp, #28
    36f4:	bc3c      	pop	{r2, r3, r4, r5}
    36f6:	4690      	mov	r8, r2
    36f8:	4699      	mov	r9, r3
    36fa:	46a2      	mov	sl, r4
    36fc:	46ab      	mov	fp, r5
    36fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3700:	00002e19 	.word	0x00002e19
    3704:	00002fb9 	.word	0x00002fb9
    3708:	0000045c 	.word	0x0000045c
    370c:	0000d508 	.word	0x0000d508
    3710:	0000cdd0 	.word	0x0000cdd0
    3714:	0000b779 	.word	0x0000b779
    3718:	0000d724 	.word	0x0000d724
    371c:	0000b7ad 	.word	0x0000b7ad
    3720:	000012d9 	.word	0x000012d9
    3724:	0000047d 	.word	0x0000047d
    3728:	0000d784 	.word	0x0000d784
    372c:	00000456 	.word	0x00000456
    3730:	0000d6f4 	.word	0x0000d6f4
    3734:	0000308d 	.word	0x0000308d
    3738:	0000046c 	.word	0x0000046c
    373c:	0000d75c 	.word	0x0000d75c
    3740:	0000b895 	.word	0x0000b895

00003744 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3744:	b5f0      	push	{r4, r5, r6, r7, lr}
    3746:	46de      	mov	lr, fp
    3748:	4647      	mov	r7, r8
    374a:	b580      	push	{r7, lr}
    374c:	b089      	sub	sp, #36	; 0x24
    374e:	9004      	str	r0, [sp, #16]
    3750:	468b      	mov	fp, r1
    3752:	9203      	str	r2, [sp, #12]
    3754:	260a      	movs	r6, #10
    3756:	2780      	movs	r7, #128	; 0x80
    3758:	01bf      	lsls	r7, r7, #6
    375a:	466b      	mov	r3, sp
    375c:	82df      	strh	r7, [r3, #22]
    375e:	0035      	movs	r5, r6
    3760:	e02d      	b.n	37be <nm_spi_write_block+0x7a>
		size = 2;
    3762:	3301      	adds	r3, #1
    3764:	9303      	str	r3, [sp, #12]
    3766:	e02d      	b.n	37c4 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3768:	4a82      	ldr	r2, [pc, #520]	; (3974 <nm_spi_write_block+0x230>)
    376a:	4983      	ldr	r1, [pc, #524]	; (3978 <nm_spi_write_block+0x234>)
    376c:	4883      	ldr	r0, [pc, #524]	; (397c <nm_spi_write_block+0x238>)
    376e:	4c84      	ldr	r4, [pc, #528]	; (3980 <nm_spi_write_block+0x23c>)
    3770:	47a0      	blx	r4
    3772:	0031      	movs	r1, r6
    3774:	4883      	ldr	r0, [pc, #524]	; (3984 <nm_spi_write_block+0x240>)
    3776:	47a0      	blx	r4
    3778:	200d      	movs	r0, #13
    377a:	4b83      	ldr	r3, [pc, #524]	; (3988 <nm_spi_write_block+0x244>)
    377c:	4798      	blx	r3
		nm_bsp_sleep(1);
    377e:	2001      	movs	r0, #1
    3780:	4c82      	ldr	r4, [pc, #520]	; (398c <nm_spi_write_block+0x248>)
    3782:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3784:	2300      	movs	r3, #0
    3786:	9300      	str	r3, [sp, #0]
    3788:	2200      	movs	r2, #0
    378a:	2100      	movs	r1, #0
    378c:	20cf      	movs	r0, #207	; 0xcf
    378e:	4e80      	ldr	r6, [pc, #512]	; (3990 <nm_spi_write_block+0x24c>)
    3790:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    3792:	20cf      	movs	r0, #207	; 0xcf
    3794:	4b7f      	ldr	r3, [pc, #508]	; (3994 <nm_spi_write_block+0x250>)
    3796:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    3798:	4a7f      	ldr	r2, [pc, #508]	; (3998 <nm_spi_write_block+0x254>)
    379a:	4977      	ldr	r1, [pc, #476]	; (3978 <nm_spi_write_block+0x234>)
    379c:	4877      	ldr	r0, [pc, #476]	; (397c <nm_spi_write_block+0x238>)
    379e:	4e78      	ldr	r6, [pc, #480]	; (3980 <nm_spi_write_block+0x23c>)
    37a0:	47b0      	blx	r6
    37a2:	9b03      	ldr	r3, [sp, #12]
    37a4:	9a04      	ldr	r2, [sp, #16]
    37a6:	0029      	movs	r1, r5
    37a8:	487c      	ldr	r0, [pc, #496]	; (399c <nm_spi_write_block+0x258>)
    37aa:	47b0      	blx	r6
    37ac:	200d      	movs	r0, #13
    37ae:	4b76      	ldr	r3, [pc, #472]	; (3988 <nm_spi_write_block+0x244>)
    37b0:	4798      	blx	r3
		nm_bsp_sleep(1);
    37b2:	2001      	movs	r0, #1
    37b4:	47a0      	blx	r4
    37b6:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    37b8:	2d00      	cmp	r5, #0
    37ba:	d100      	bne.n	37be <nm_spi_write_block+0x7a>
    37bc:	e0d2      	b.n	3964 <nm_spi_write_block+0x220>
	if (size == 1)
    37be:	9b03      	ldr	r3, [sp, #12]
    37c0:	2b01      	cmp	r3, #1
    37c2:	d0ce      	beq.n	3762 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    37c4:	2300      	movs	r3, #0
    37c6:	9300      	str	r3, [sp, #0]
    37c8:	9b03      	ldr	r3, [sp, #12]
    37ca:	2200      	movs	r2, #0
    37cc:	9e04      	ldr	r6, [sp, #16]
    37ce:	0031      	movs	r1, r6
    37d0:	20c7      	movs	r0, #199	; 0xc7
    37d2:	4c6f      	ldr	r4, [pc, #444]	; (3990 <nm_spi_write_block+0x24c>)
    37d4:	47a0      	blx	r4
	if (result != N_OK) {
    37d6:	2801      	cmp	r0, #1
    37d8:	d1c6      	bne.n	3768 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    37da:	20c7      	movs	r0, #199	; 0xc7
    37dc:	4b6d      	ldr	r3, [pc, #436]	; (3994 <nm_spi_write_block+0x250>)
    37de:	4798      	blx	r3
	if (result != N_OK) {
    37e0:	2801      	cmp	r0, #1
    37e2:	d00b      	beq.n	37fc <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    37e4:	4a6e      	ldr	r2, [pc, #440]	; (39a0 <nm_spi_write_block+0x25c>)
    37e6:	4964      	ldr	r1, [pc, #400]	; (3978 <nm_spi_write_block+0x234>)
    37e8:	4864      	ldr	r0, [pc, #400]	; (397c <nm_spi_write_block+0x238>)
    37ea:	4c65      	ldr	r4, [pc, #404]	; (3980 <nm_spi_write_block+0x23c>)
    37ec:	47a0      	blx	r4
    37ee:	9904      	ldr	r1, [sp, #16]
    37f0:	486c      	ldr	r0, [pc, #432]	; (39a4 <nm_spi_write_block+0x260>)
    37f2:	47a0      	blx	r4
    37f4:	200d      	movs	r0, #13
    37f6:	4b64      	ldr	r3, [pc, #400]	; (3988 <nm_spi_write_block+0x244>)
    37f8:	4798      	blx	r3
    37fa:	e7c0      	b.n	377e <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    37fc:	2200      	movs	r2, #0
    37fe:	ab07      	add	r3, sp, #28
    3800:	801a      	strh	r2, [r3, #0]
    3802:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    3804:	2600      	movs	r6, #0
				order = 0x1;
    3806:	46a8      	mov	r8, r5
    3808:	0035      	movs	r5, r6
    380a:	0026      	movs	r6, r4
    380c:	e021      	b.n	3852 <nm_spi_write_block+0x10e>
				order = 0x2;
    380e:	2300      	movs	r3, #0
    3810:	42b7      	cmp	r7, r6
    3812:	415b      	adcs	r3, r3
    3814:	3302      	adds	r3, #2
		cmd |= order;
    3816:	200b      	movs	r0, #11
    3818:	aa04      	add	r2, sp, #16
    381a:	4694      	mov	ip, r2
    381c:	4460      	add	r0, ip
    381e:	2210      	movs	r2, #16
    3820:	4252      	negs	r2, r2
    3822:	4313      	orrs	r3, r2
    3824:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3826:	2101      	movs	r1, #1
    3828:	4b5f      	ldr	r3, [pc, #380]	; (39a8 <nm_spi_write_block+0x264>)
    382a:	4798      	blx	r3
    382c:	2800      	cmp	r0, #0
    382e:	d11d      	bne.n	386c <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3830:	465b      	mov	r3, fp
    3832:	1958      	adds	r0, r3, r5
    3834:	0021      	movs	r1, r4
    3836:	4b5c      	ldr	r3, [pc, #368]	; (39a8 <nm_spi_write_block+0x264>)
    3838:	4798      	blx	r3
    383a:	2800      	cmp	r0, #0
    383c:	d12e      	bne.n	389c <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    383e:	4b5b      	ldr	r3, [pc, #364]	; (39ac <nm_spi_write_block+0x268>)
    3840:	781b      	ldrb	r3, [r3, #0]
    3842:	2b00      	cmp	r3, #0
    3844:	d037      	beq.n	38b6 <nm_spi_write_block+0x172>
		ix += nbytes;
    3846:	1965      	adds	r5, r4, r5
    3848:	b22d      	sxth	r5, r5
		sz -= nbytes;
    384a:	1b36      	subs	r6, r6, r4
    384c:	b2b6      	uxth	r6, r6
	} while (sz);
    384e:	2e00      	cmp	r6, #0
    3850:	d052      	beq.n	38f8 <nm_spi_write_block+0x1b4>
    3852:	1c34      	adds	r4, r6, #0
    3854:	42be      	cmp	r6, r7
    3856:	d901      	bls.n	385c <nm_spi_write_block+0x118>
    3858:	466b      	mov	r3, sp
    385a:	8adc      	ldrh	r4, [r3, #22]
    385c:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    385e:	2d00      	cmp	r5, #0
    3860:	d1d5      	bne.n	380e <nm_spi_write_block+0xca>
				order = 0x3;
    3862:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3864:	42be      	cmp	r6, r7
    3866:	d9d6      	bls.n	3816 <nm_spi_write_block+0xd2>
				order = 0x1;
    3868:	3b02      	subs	r3, #2
    386a:	e7d4      	b.n	3816 <nm_spi_write_block+0xd2>
    386c:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    386e:	4a50      	ldr	r2, [pc, #320]	; (39b0 <nm_spi_write_block+0x26c>)
    3870:	4950      	ldr	r1, [pc, #320]	; (39b4 <nm_spi_write_block+0x270>)
    3872:	4842      	ldr	r0, [pc, #264]	; (397c <nm_spi_write_block+0x238>)
    3874:	4b42      	ldr	r3, [pc, #264]	; (3980 <nm_spi_write_block+0x23c>)
    3876:	4798      	blx	r3
    3878:	484f      	ldr	r0, [pc, #316]	; (39b8 <nm_spi_write_block+0x274>)
    387a:	4b50      	ldr	r3, [pc, #320]	; (39bc <nm_spi_write_block+0x278>)
    387c:	4798      	blx	r3
    387e:	200d      	movs	r0, #13
    3880:	4b41      	ldr	r3, [pc, #260]	; (3988 <nm_spi_write_block+0x244>)
    3882:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3884:	4a4e      	ldr	r2, [pc, #312]	; (39c0 <nm_spi_write_block+0x27c>)
    3886:	493c      	ldr	r1, [pc, #240]	; (3978 <nm_spi_write_block+0x234>)
    3888:	483c      	ldr	r0, [pc, #240]	; (397c <nm_spi_write_block+0x238>)
    388a:	4b3d      	ldr	r3, [pc, #244]	; (3980 <nm_spi_write_block+0x23c>)
    388c:	4798      	blx	r3
    388e:	484d      	ldr	r0, [pc, #308]	; (39c4 <nm_spi_write_block+0x280>)
    3890:	4b4a      	ldr	r3, [pc, #296]	; (39bc <nm_spi_write_block+0x278>)
    3892:	4798      	blx	r3
    3894:	200d      	movs	r0, #13
    3896:	4b3c      	ldr	r3, [pc, #240]	; (3988 <nm_spi_write_block+0x244>)
    3898:	4798      	blx	r3
    389a:	e770      	b.n	377e <nm_spi_write_block+0x3a>
    389c:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    389e:	4a4a      	ldr	r2, [pc, #296]	; (39c8 <nm_spi_write_block+0x284>)
    38a0:	4944      	ldr	r1, [pc, #272]	; (39b4 <nm_spi_write_block+0x270>)
    38a2:	4836      	ldr	r0, [pc, #216]	; (397c <nm_spi_write_block+0x238>)
    38a4:	4b36      	ldr	r3, [pc, #216]	; (3980 <nm_spi_write_block+0x23c>)
    38a6:	4798      	blx	r3
    38a8:	4848      	ldr	r0, [pc, #288]	; (39cc <nm_spi_write_block+0x288>)
    38aa:	4b44      	ldr	r3, [pc, #272]	; (39bc <nm_spi_write_block+0x278>)
    38ac:	4798      	blx	r3
    38ae:	200d      	movs	r0, #13
    38b0:	4b35      	ldr	r3, [pc, #212]	; (3988 <nm_spi_write_block+0x244>)
    38b2:	4798      	blx	r3
    38b4:	e7e6      	b.n	3884 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    38b6:	2102      	movs	r1, #2
    38b8:	a807      	add	r0, sp, #28
    38ba:	4b3b      	ldr	r3, [pc, #236]	; (39a8 <nm_spi_write_block+0x264>)
    38bc:	4798      	blx	r3
    38be:	2800      	cmp	r0, #0
    38c0:	d0c1      	beq.n	3846 <nm_spi_write_block+0x102>
    38c2:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    38c4:	22d7      	movs	r2, #215	; 0xd7
    38c6:	0092      	lsls	r2, r2, #2
    38c8:	493a      	ldr	r1, [pc, #232]	; (39b4 <nm_spi_write_block+0x270>)
    38ca:	482c      	ldr	r0, [pc, #176]	; (397c <nm_spi_write_block+0x238>)
    38cc:	4b2c      	ldr	r3, [pc, #176]	; (3980 <nm_spi_write_block+0x23c>)
    38ce:	4798      	blx	r3
    38d0:	483f      	ldr	r0, [pc, #252]	; (39d0 <nm_spi_write_block+0x28c>)
    38d2:	4b3a      	ldr	r3, [pc, #232]	; (39bc <nm_spi_write_block+0x278>)
    38d4:	4798      	blx	r3
    38d6:	200d      	movs	r0, #13
    38d8:	4b2b      	ldr	r3, [pc, #172]	; (3988 <nm_spi_write_block+0x244>)
    38da:	4798      	blx	r3
    38dc:	e7d2      	b.n	3884 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    38de:	229a      	movs	r2, #154	; 0x9a
    38e0:	0052      	lsls	r2, r2, #1
    38e2:	493c      	ldr	r1, [pc, #240]	; (39d4 <nm_spi_write_block+0x290>)
    38e4:	4825      	ldr	r0, [pc, #148]	; (397c <nm_spi_write_block+0x238>)
    38e6:	4b26      	ldr	r3, [pc, #152]	; (3980 <nm_spi_write_block+0x23c>)
    38e8:	4798      	blx	r3
    38ea:	483b      	ldr	r0, [pc, #236]	; (39d8 <nm_spi_write_block+0x294>)
    38ec:	4b33      	ldr	r3, [pc, #204]	; (39bc <nm_spi_write_block+0x278>)
    38ee:	4798      	blx	r3
    38f0:	200d      	movs	r0, #13
    38f2:	4b25      	ldr	r3, [pc, #148]	; (3988 <nm_spi_write_block+0x244>)
    38f4:	4798      	blx	r3
    38f6:	e027      	b.n	3948 <nm_spi_write_block+0x204>
    38f8:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    38fa:	4b2c      	ldr	r3, [pc, #176]	; (39ac <nm_spi_write_block+0x268>)
    38fc:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    38fe:	1e63      	subs	r3, r4, #1
    3900:	419c      	sbcs	r4, r3
    3902:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3904:	b2a1      	uxth	r1, r4
    3906:	a807      	add	r0, sp, #28
    3908:	4b34      	ldr	r3, [pc, #208]	; (39dc <nm_spi_write_block+0x298>)
    390a:	4798      	blx	r3
    390c:	2800      	cmp	r0, #0
    390e:	d1e6      	bne.n	38de <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3910:	ab08      	add	r3, sp, #32
    3912:	191b      	adds	r3, r3, r4
    3914:	3b05      	subs	r3, #5
    3916:	781b      	ldrb	r3, [r3, #0]
    3918:	2b00      	cmp	r3, #0
    391a:	d106      	bne.n	392a <nm_spi_write_block+0x1e6>
    391c:	ab08      	add	r3, sp, #32
    391e:	469c      	mov	ip, r3
    3920:	4464      	add	r4, ip
    3922:	3c06      	subs	r4, #6
    3924:	7823      	ldrb	r3, [r4, #0]
    3926:	2bc3      	cmp	r3, #195	; 0xc3
    3928:	d01a      	beq.n	3960 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    392a:	223c      	movs	r2, #60	; 0x3c
    392c:	32ff      	adds	r2, #255	; 0xff
    392e:	4929      	ldr	r1, [pc, #164]	; (39d4 <nm_spi_write_block+0x290>)
    3930:	4812      	ldr	r0, [pc, #72]	; (397c <nm_spi_write_block+0x238>)
    3932:	4c13      	ldr	r4, [pc, #76]	; (3980 <nm_spi_write_block+0x23c>)
    3934:	47a0      	blx	r4
    3936:	a907      	add	r1, sp, #28
    3938:	788b      	ldrb	r3, [r1, #2]
    393a:	784a      	ldrb	r2, [r1, #1]
    393c:	7809      	ldrb	r1, [r1, #0]
    393e:	4828      	ldr	r0, [pc, #160]	; (39e0 <nm_spi_write_block+0x29c>)
    3940:	47a0      	blx	r4
    3942:	200d      	movs	r0, #13
    3944:	4b10      	ldr	r3, [pc, #64]	; (3988 <nm_spi_write_block+0x244>)
    3946:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3948:	4a26      	ldr	r2, [pc, #152]	; (39e4 <nm_spi_write_block+0x2a0>)
    394a:	490b      	ldr	r1, [pc, #44]	; (3978 <nm_spi_write_block+0x234>)
    394c:	480b      	ldr	r0, [pc, #44]	; (397c <nm_spi_write_block+0x238>)
    394e:	4b0c      	ldr	r3, [pc, #48]	; (3980 <nm_spi_write_block+0x23c>)
    3950:	4798      	blx	r3
    3952:	481c      	ldr	r0, [pc, #112]	; (39c4 <nm_spi_write_block+0x280>)
    3954:	4b19      	ldr	r3, [pc, #100]	; (39bc <nm_spi_write_block+0x278>)
    3956:	4798      	blx	r3
    3958:	200d      	movs	r0, #13
    395a:	4b0b      	ldr	r3, [pc, #44]	; (3988 <nm_spi_write_block+0x244>)
    395c:	4798      	blx	r3
    395e:	e70e      	b.n	377e <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3960:	2000      	movs	r0, #0
    3962:	e001      	b.n	3968 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3964:	2006      	movs	r0, #6
    3966:	4240      	negs	r0, r0

	return s8Ret;
}
    3968:	b009      	add	sp, #36	; 0x24
    396a:	bc0c      	pop	{r2, r3}
    396c:	4690      	mov	r8, r2
    396e:	469b      	mov	fp, r3
    3970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3972:	46c0      	nop			; (mov r8, r8)
    3974:	000003c3 	.word	0x000003c3
    3978:	0000d4e8 	.word	0x0000d4e8
    397c:	0000cdd0 	.word	0x0000cdd0
    3980:	0000b779 	.word	0x0000b779
    3984:	0000d7a0 	.word	0x0000d7a0
    3988:	0000b7ad 	.word	0x0000b7ad
    398c:	000012d9 	.word	0x000012d9
    3990:	00002e19 	.word	0x00002e19
    3994:	00002fb9 	.word	0x00002fb9
    3998:	000003eb 	.word	0x000003eb
    399c:	0000d784 	.word	0x0000d784
    39a0:	000003c9 	.word	0x000003c9
    39a4:	0000d7d0 	.word	0x0000d7d0
    39a8:	00002df9 	.word	0x00002df9
    39ac:	200003ac 	.word	0x200003ac
    39b0:	00000349 	.word	0x00000349
    39b4:	0000d4c8 	.word	0x0000d4c8
    39b8:	0000d808 	.word	0x0000d808
    39bc:	0000b895 	.word	0x0000b895
    39c0:	000003d9 	.word	0x000003d9
    39c4:	0000d8fc 	.word	0x0000d8fc
    39c8:	00000352 	.word	0x00000352
    39cc:	0000d840 	.word	0x0000d840
    39d0:	0000d874 	.word	0x0000d874
    39d4:	0000d49c 	.word	0x0000d49c
    39d8:	0000d8ac 	.word	0x0000d8ac
    39dc:	00002f99 	.word	0x00002f99
    39e0:	0000d8cc 	.word	0x0000d8cc
    39e4:	000003e1 	.word	0x000003e1

000039e8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    39e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39ea:	46d6      	mov	lr, sl
    39ec:	4647      	mov	r7, r8
    39ee:	b580      	push	{r7, lr}
    39f0:	b089      	sub	sp, #36	; 0x24
    39f2:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    39f4:	2802      	cmp	r0, #2
    39f6:	d000      	beq.n	39fa <socket+0x12>
    39f8:	e09c      	b.n	3b34 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    39fa:	2901      	cmp	r1, #1
    39fc:	d00a      	beq.n	3a14 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    39fe:	2902      	cmp	r1, #2
    3a00:	d100      	bne.n	3a04 <socket+0x1c>
    3a02:	e070      	b.n	3ae6 <socket+0xfe>
	SOCKET					sock = -1;
    3a04:	2501      	movs	r5, #1
    3a06:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3a08:	0028      	movs	r0, r5
    3a0a:	b009      	add	sp, #36	; 0x24
    3a0c:	bc0c      	pop	{r2, r3}
    3a0e:	4690      	mov	r8, r2
    3a10:	469a      	mov	sl, r3
    3a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    3a14:	4c49      	ldr	r4, [pc, #292]	; (3b3c <socket+0x154>)
    3a16:	7827      	ldrb	r7, [r4, #0]
    3a18:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3a1a:	7826      	ldrb	r6, [r4, #0]
    3a1c:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3a1e:	7820      	ldrb	r0, [r4, #0]
    3a20:	3001      	adds	r0, #1
    3a22:	3106      	adds	r1, #6
    3a24:	4b46      	ldr	r3, [pc, #280]	; (3b40 <socket+0x158>)
    3a26:	4798      	blx	r3
    3a28:	b2c9      	uxtb	r1, r1
    3a2a:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3a2c:	0132      	lsls	r2, r6, #4
    3a2e:	4b45      	ldr	r3, [pc, #276]	; (3b44 <socket+0x15c>)
    3a30:	189b      	adds	r3, r3, r2
    3a32:	7a9b      	ldrb	r3, [r3, #10]
    3a34:	2506      	movs	r5, #6
    3a36:	2b00      	cmp	r3, #0
    3a38:	d018      	beq.n	3a6c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    3a3a:	4e40      	ldr	r6, [pc, #256]	; (3b3c <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3a3c:	4b40      	ldr	r3, [pc, #256]	; (3b40 <socket+0x158>)
    3a3e:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3a40:	4b40      	ldr	r3, [pc, #256]	; (3b44 <socket+0x15c>)
    3a42:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    3a44:	7837      	ldrb	r7, [r6, #0]
    3a46:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3a48:	7834      	ldrb	r4, [r6, #0]
    3a4a:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3a4c:	7830      	ldrb	r0, [r6, #0]
    3a4e:	3001      	adds	r0, #1
    3a50:	2107      	movs	r1, #7
    3a52:	47d0      	blx	sl
    3a54:	b2c9      	uxtb	r1, r1
    3a56:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    3a58:	0123      	lsls	r3, r4, #4
    3a5a:	4443      	add	r3, r8
    3a5c:	7a9b      	ldrb	r3, [r3, #10]
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d007      	beq.n	3a72 <socket+0x8a>
    3a62:	3d01      	subs	r5, #1
    3a64:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    3a66:	2d00      	cmp	r5, #0
    3a68:	d1ec      	bne.n	3a44 <socket+0x5c>
    3a6a:	e7cb      	b.n	3a04 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3a6c:	4b35      	ldr	r3, [pc, #212]	; (3b44 <socket+0x15c>)
    3a6e:	18d4      	adds	r4, r2, r3
    3a70:	e002      	b.n	3a78 <socket+0x90>
    3a72:	0124      	lsls	r4, r4, #4
    3a74:	4b33      	ldr	r3, [pc, #204]	; (3b44 <socket+0x15c>)
    3a76:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3a78:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3a7a:	2d00      	cmp	r5, #0
    3a7c:	dbc4      	blt.n	3a08 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3a7e:	2210      	movs	r2, #16
    3a80:	2100      	movs	r1, #0
    3a82:	0020      	movs	r0, r4
    3a84:	4b30      	ldr	r3, [pc, #192]	; (3b48 <socket+0x160>)
    3a86:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3a88:	2301      	movs	r3, #1
    3a8a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3a8c:	4a2f      	ldr	r2, [pc, #188]	; (3b4c <socket+0x164>)
    3a8e:	8813      	ldrh	r3, [r2, #0]
    3a90:	3301      	adds	r3, #1
    3a92:	b29b      	uxth	r3, r3
    3a94:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    3a96:	8813      	ldrh	r3, [r2, #0]
    3a98:	b29b      	uxth	r3, r3
    3a9a:	2b00      	cmp	r3, #0
    3a9c:	d103      	bne.n	3aa6 <socket+0xbe>
				++gu16SessionID;
    3a9e:	8813      	ldrh	r3, [r2, #0]
    3aa0:	3301      	adds	r3, #1
    3aa2:	b29b      	uxth	r3, r3
    3aa4:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    3aa6:	4e29      	ldr	r6, [pc, #164]	; (3b4c <socket+0x164>)
    3aa8:	8833      	ldrh	r3, [r6, #0]
    3aaa:	b29b      	uxth	r3, r3
    3aac:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    3aae:	4828      	ldr	r0, [pc, #160]	; (3b50 <socket+0x168>)
    3ab0:	4f28      	ldr	r7, [pc, #160]	; (3b54 <socket+0x16c>)
    3ab2:	47b8      	blx	r7
    3ab4:	8832      	ldrh	r2, [r6, #0]
    3ab6:	b292      	uxth	r2, r2
    3ab8:	0029      	movs	r1, r5
    3aba:	4827      	ldr	r0, [pc, #156]	; (3b58 <socket+0x170>)
    3abc:	47b8      	blx	r7
    3abe:	200d      	movs	r0, #13
    3ac0:	4b26      	ldr	r3, [pc, #152]	; (3b5c <socket+0x174>)
    3ac2:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3ac4:	9b05      	ldr	r3, [sp, #20]
    3ac6:	07db      	lsls	r3, r3, #31
    3ac8:	d59e      	bpl.n	3a08 <socket+0x20>
				strSSLCreate.sslSock = sock;
    3aca:	aa07      	add	r2, sp, #28
    3acc:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    3ace:	2321      	movs	r3, #33	; 0x21
    3ad0:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    3ad2:	2300      	movs	r3, #0
    3ad4:	9302      	str	r3, [sp, #8]
    3ad6:	9301      	str	r3, [sp, #4]
    3ad8:	9300      	str	r3, [sp, #0]
    3ada:	3304      	adds	r3, #4
    3adc:	2150      	movs	r1, #80	; 0x50
    3ade:	2002      	movs	r0, #2
    3ae0:	4c1f      	ldr	r4, [pc, #124]	; (3b60 <socket+0x178>)
    3ae2:	47a0      	blx	r4
    3ae4:	e790      	b.n	3a08 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3ae6:	4b1f      	ldr	r3, [pc, #124]	; (3b64 <socket+0x17c>)
    3ae8:	781d      	ldrb	r5, [r3, #0]
    3aea:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3aec:	781c      	ldrb	r4, [r3, #0]
    3aee:	0124      	lsls	r4, r4, #4
    3af0:	4a1d      	ldr	r2, [pc, #116]	; (3b68 <socket+0x180>)
    3af2:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3af4:	7819      	ldrb	r1, [r3, #0]
    3af6:	3101      	adds	r1, #1
    3af8:	2203      	movs	r2, #3
    3afa:	400a      	ands	r2, r1
    3afc:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    3afe:	7aa3      	ldrb	r3, [r4, #10]
    3b00:	2b00      	cmp	r3, #0
    3b02:	d014      	beq.n	3b2e <socket+0x146>
    3b04:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3b06:	4917      	ldr	r1, [pc, #92]	; (3b64 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3b08:	4f17      	ldr	r7, [pc, #92]	; (3b68 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3b0a:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3b0c:	780d      	ldrb	r5, [r1, #0]
    3b0e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3b10:	780c      	ldrb	r4, [r1, #0]
    3b12:	0124      	lsls	r4, r4, #4
    3b14:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3b16:	780b      	ldrb	r3, [r1, #0]
    3b18:	3301      	adds	r3, #1
    3b1a:	4003      	ands	r3, r0
    3b1c:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    3b1e:	7aa3      	ldrb	r3, [r4, #10]
    3b20:	2b00      	cmp	r3, #0
    3b22:	d004      	beq.n	3b2e <socket+0x146>
    3b24:	3a01      	subs	r2, #1
    3b26:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3b28:	2a00      	cmp	r2, #0
    3b2a:	d1ef      	bne.n	3b0c <socket+0x124>
    3b2c:	e76a      	b.n	3a04 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    3b2e:	3507      	adds	r5, #7
    3b30:	b26d      	sxtb	r5, r5
					break;
    3b32:	e7a2      	b.n	3a7a <socket+0x92>
	SOCKET					sock = -1;
    3b34:	2501      	movs	r5, #1
    3b36:	426d      	negs	r5, r5
    3b38:	e766      	b.n	3a08 <socket+0x20>
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	200003b0 	.word	0x200003b0
    3b40:	0000b505 	.word	0x0000b505
    3b44:	20000f4c 	.word	0x20000f4c
    3b48:	00001665 	.word	0x00001665
    3b4c:	200003ae 	.word	0x200003ae
    3b50:	0000d100 	.word	0x0000d100
    3b54:	0000b779 	.word	0x0000b779
    3b58:	0000db90 	.word	0x0000db90
    3b5c:	0000b7ad 	.word	0x0000b7ad
    3b60:	00001779 	.word	0x00001779
    3b64:	200003b1 	.word	0x200003b1
    3b68:	20000fbc 	.word	0x20000fbc

00003b6c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3b6c:	b570      	push	{r4, r5, r6, lr}
    3b6e:	b088      	sub	sp, #32
    3b70:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3b72:	db30      	blt.n	3bd6 <connect+0x6a>
    3b74:	2900      	cmp	r1, #0
    3b76:	d031      	beq.n	3bdc <connect+0x70>
    3b78:	0100      	lsls	r0, r0, #4
    3b7a:	4b1d      	ldr	r3, [pc, #116]	; (3bf0 <connect+0x84>)
    3b7c:	181b      	adds	r3, r3, r0
    3b7e:	7a9b      	ldrb	r3, [r3, #10]
    3b80:	2b01      	cmp	r3, #1
    3b82:	d12e      	bne.n	3be2 <connect+0x76>
    3b84:	2a00      	cmp	r2, #0
    3b86:	d02f      	beq.n	3be8 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3b88:	4b19      	ldr	r3, [pc, #100]	; (3bf0 <connect+0x84>)
    3b8a:	181b      	adds	r3, r3, r0
    3b8c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3b8e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3b90:	07db      	lsls	r3, r3, #31
    3b92:	d505      	bpl.n	3ba0 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3b94:	4b16      	ldr	r3, [pc, #88]	; (3bf0 <connect+0x84>)
    3b96:	181b      	adds	r3, r3, r0
    3b98:	7ada      	ldrb	r2, [r3, #11]
    3b9a:	ab05      	add	r3, sp, #20
    3b9c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3b9e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    3ba0:	ad05      	add	r5, sp, #20
    3ba2:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3ba4:	2208      	movs	r2, #8
    3ba6:	0028      	movs	r0, r5
    3ba8:	4b12      	ldr	r3, [pc, #72]	; (3bf4 <connect+0x88>)
    3baa:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3bac:	0124      	lsls	r4, r4, #4
    3bae:	4b10      	ldr	r3, [pc, #64]	; (3bf0 <connect+0x84>)
    3bb0:	191c      	adds	r4, r3, r4
    3bb2:	88e3      	ldrh	r3, [r4, #6]
    3bb4:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3bb6:	2300      	movs	r3, #0
    3bb8:	9302      	str	r3, [sp, #8]
    3bba:	9301      	str	r3, [sp, #4]
    3bbc:	9300      	str	r3, [sp, #0]
    3bbe:	330c      	adds	r3, #12
    3bc0:	002a      	movs	r2, r5
    3bc2:	0031      	movs	r1, r6
    3bc4:	2002      	movs	r0, #2
    3bc6:	4c0c      	ldr	r4, [pc, #48]	; (3bf8 <connect+0x8c>)
    3bc8:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3bca:	2800      	cmp	r0, #0
    3bcc:	d001      	beq.n	3bd2 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    3bce:	2009      	movs	r0, #9
    3bd0:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    3bd2:	b008      	add	sp, #32
    3bd4:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3bd6:	2006      	movs	r0, #6
    3bd8:	4240      	negs	r0, r0
    3bda:	e7fa      	b.n	3bd2 <connect+0x66>
    3bdc:	2006      	movs	r0, #6
    3bde:	4240      	negs	r0, r0
    3be0:	e7f7      	b.n	3bd2 <connect+0x66>
    3be2:	2006      	movs	r0, #6
    3be4:	4240      	negs	r0, r0
    3be6:	e7f4      	b.n	3bd2 <connect+0x66>
    3be8:	2006      	movs	r0, #6
    3bea:	4240      	negs	r0, r0
    3bec:	e7f1      	b.n	3bd2 <connect+0x66>
    3bee:	46c0      	nop			; (mov r8, r8)
    3bf0:	20000f4c 	.word	0x20000f4c
    3bf4:	00001651 	.word	0x00001651
    3bf8:	00001779 	.word	0x00001779

00003bfc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3bfc:	b530      	push	{r4, r5, lr}
    3bfe:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3c00:	2800      	cmp	r0, #0
    3c02:	db36      	blt.n	3c72 <send+0x76>
    3c04:	2900      	cmp	r1, #0
    3c06:	d037      	beq.n	3c78 <send+0x7c>
    3c08:	23af      	movs	r3, #175	; 0xaf
    3c0a:	00db      	lsls	r3, r3, #3
    3c0c:	429a      	cmp	r2, r3
    3c0e:	d836      	bhi.n	3c7e <send+0x82>
    3c10:	0104      	lsls	r4, r0, #4
    3c12:	4b1e      	ldr	r3, [pc, #120]	; (3c8c <send+0x90>)
    3c14:	191b      	adds	r3, r3, r4
    3c16:	7a9b      	ldrb	r3, [r3, #10]
    3c18:	2b01      	cmp	r3, #1
    3c1a:	d133      	bne.n	3c84 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3c1c:	ab04      	add	r3, sp, #16
    3c1e:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3c20:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3c22:	0025      	movs	r5, r4
    3c24:	4c19      	ldr	r4, [pc, #100]	; (3c8c <send+0x90>)
    3c26:	1964      	adds	r4, r4, r5
    3c28:	88e4      	ldrh	r4, [r4, #6]
    3c2a:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3c2c:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    3c2e:	2806      	cmp	r0, #6
    3c30:	dd00      	ble.n	3c34 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3c32:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c34:	0104      	lsls	r4, r0, #4
    3c36:	4b15      	ldr	r3, [pc, #84]	; (3c8c <send+0x90>)
    3c38:	191b      	adds	r3, r3, r4
    3c3a:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    3c3c:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c3e:	07e4      	lsls	r4, r4, #31
    3c40:	d505      	bpl.n	3c4e <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3c42:	0100      	lsls	r0, r0, #4
    3c44:	4b11      	ldr	r3, [pc, #68]	; (3c8c <send+0x90>)
    3c46:	1818      	adds	r0, r3, r0
    3c48:	8905      	ldrh	r5, [r0, #8]
    3c4a:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3c4c:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3c4e:	2080      	movs	r0, #128	; 0x80
    3c50:	4318      	orrs	r0, r3
    3c52:	9502      	str	r5, [sp, #8]
    3c54:	9201      	str	r2, [sp, #4]
    3c56:	9100      	str	r1, [sp, #0]
    3c58:	2310      	movs	r3, #16
    3c5a:	aa04      	add	r2, sp, #16
    3c5c:	0001      	movs	r1, r0
    3c5e:	2002      	movs	r0, #2
    3c60:	4c0b      	ldr	r4, [pc, #44]	; (3c90 <send+0x94>)
    3c62:	47a0      	blx	r4
    3c64:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3c66:	2800      	cmp	r0, #0
    3c68:	d000      	beq.n	3c6c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3c6a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3c6c:	0018      	movs	r0, r3
    3c6e:	b009      	add	sp, #36	; 0x24
    3c70:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3c72:	2306      	movs	r3, #6
    3c74:	425b      	negs	r3, r3
    3c76:	e7f9      	b.n	3c6c <send+0x70>
    3c78:	2306      	movs	r3, #6
    3c7a:	425b      	negs	r3, r3
    3c7c:	e7f6      	b.n	3c6c <send+0x70>
    3c7e:	2306      	movs	r3, #6
    3c80:	425b      	negs	r3, r3
    3c82:	e7f3      	b.n	3c6c <send+0x70>
    3c84:	2306      	movs	r3, #6
    3c86:	425b      	negs	r3, r3
    3c88:	e7f0      	b.n	3c6c <send+0x70>
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	20000f4c 	.word	0x20000f4c
    3c90:	00001779 	.word	0x00001779

00003c94 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3c94:	b530      	push	{r4, r5, lr}
    3c96:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3c98:	2800      	cmp	r0, #0
    3c9a:	db34      	blt.n	3d06 <recv+0x72>
    3c9c:	2900      	cmp	r1, #0
    3c9e:	d035      	beq.n	3d0c <recv+0x78>
    3ca0:	2a00      	cmp	r2, #0
    3ca2:	d036      	beq.n	3d12 <recv+0x7e>
    3ca4:	0105      	lsls	r5, r0, #4
    3ca6:	4c1e      	ldr	r4, [pc, #120]	; (3d20 <recv+0x8c>)
    3ca8:	1964      	adds	r4, r4, r5
    3caa:	7aa4      	ldrb	r4, [r4, #10]
    3cac:	2c01      	cmp	r4, #1
    3cae:	d133      	bne.n	3d18 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3cb0:	4c1b      	ldr	r4, [pc, #108]	; (3d20 <recv+0x8c>)
    3cb2:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3cb4:	1964      	adds	r4, r4, r5
    3cb6:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3cb8:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3cba:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3cbc:	2900      	cmp	r1, #0
    3cbe:	d11d      	bne.n	3cfc <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3cc0:	2101      	movs	r1, #1
    3cc2:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3cc4:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3cc6:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3cc8:	07d2      	lsls	r2, r2, #31
    3cca:	d500      	bpl.n	3cce <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3ccc:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d117      	bne.n	3d02 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3cd2:	3b01      	subs	r3, #1
    3cd4:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    3cd6:	aa04      	add	r2, sp, #16
    3cd8:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3cda:	0100      	lsls	r0, r0, #4
    3cdc:	4b10      	ldr	r3, [pc, #64]	; (3d20 <recv+0x8c>)
    3cde:	1818      	adds	r0, r3, r0
    3ce0:	88c3      	ldrh	r3, [r0, #6]
    3ce2:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3ce4:	2300      	movs	r3, #0
    3ce6:	9302      	str	r3, [sp, #8]
    3ce8:	9301      	str	r3, [sp, #4]
    3cea:	9300      	str	r3, [sp, #0]
    3cec:	3308      	adds	r3, #8
    3cee:	2002      	movs	r0, #2
    3cf0:	4c0c      	ldr	r4, [pc, #48]	; (3d24 <recv+0x90>)
    3cf2:	47a0      	blx	r4
    3cf4:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3cf6:	2800      	cmp	r0, #0
    3cf8:	d000      	beq.n	3cfc <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3cfa:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    3cfc:	0010      	movs	r0, r2
    3cfe:	b007      	add	sp, #28
    3d00:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3d02:	9304      	str	r3, [sp, #16]
    3d04:	e7e7      	b.n	3cd6 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3d06:	2206      	movs	r2, #6
    3d08:	4252      	negs	r2, r2
    3d0a:	e7f7      	b.n	3cfc <recv+0x68>
    3d0c:	2206      	movs	r2, #6
    3d0e:	4252      	negs	r2, r2
    3d10:	e7f4      	b.n	3cfc <recv+0x68>
    3d12:	2206      	movs	r2, #6
    3d14:	4252      	negs	r2, r2
    3d16:	e7f1      	b.n	3cfc <recv+0x68>
    3d18:	2206      	movs	r2, #6
    3d1a:	4252      	negs	r2, r2
    3d1c:	e7ee      	b.n	3cfc <recv+0x68>
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	20000f4c 	.word	0x20000f4c
    3d24:	00001779 	.word	0x00001779

00003d28 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3d28:	b530      	push	{r4, r5, lr}
    3d2a:	b087      	sub	sp, #28
    3d2c:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    3d2e:	481e      	ldr	r0, [pc, #120]	; (3da8 <close+0x80>)
    3d30:	4d1e      	ldr	r5, [pc, #120]	; (3dac <close+0x84>)
    3d32:	47a8      	blx	r5
    3d34:	0021      	movs	r1, r4
    3d36:	481e      	ldr	r0, [pc, #120]	; (3db0 <close+0x88>)
    3d38:	47a8      	blx	r5
    3d3a:	200d      	movs	r0, #13
    3d3c:	4b1d      	ldr	r3, [pc, #116]	; (3db4 <close+0x8c>)
    3d3e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3d40:	2c00      	cmp	r4, #0
    3d42:	db2a      	blt.n	3d9a <close+0x72>
    3d44:	0122      	lsls	r2, r4, #4
    3d46:	4b1c      	ldr	r3, [pc, #112]	; (3db8 <close+0x90>)
    3d48:	189b      	adds	r3, r3, r2
    3d4a:	7a9b      	ldrb	r3, [r3, #10]
    3d4c:	2b01      	cmp	r3, #1
    3d4e:	d127      	bne.n	3da0 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3d50:	a905      	add	r1, sp, #20
    3d52:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3d54:	4b18      	ldr	r3, [pc, #96]	; (3db8 <close+0x90>)
    3d56:	189b      	adds	r3, r3, r2
    3d58:	88da      	ldrh	r2, [r3, #6]
    3d5a:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3d5c:	2200      	movs	r2, #0
    3d5e:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3d60:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3d62:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3d64:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3d66:	07db      	lsls	r3, r3, #31
    3d68:	d500      	bpl.n	3d6c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3d6a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3d6c:	2300      	movs	r3, #0
    3d6e:	9302      	str	r3, [sp, #8]
    3d70:	9301      	str	r3, [sp, #4]
    3d72:	9300      	str	r3, [sp, #0]
    3d74:	3304      	adds	r3, #4
    3d76:	aa05      	add	r2, sp, #20
    3d78:	2002      	movs	r0, #2
    3d7a:	4d10      	ldr	r5, [pc, #64]	; (3dbc <close+0x94>)
    3d7c:	47a8      	blx	r5
    3d7e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3d80:	d001      	beq.n	3d86 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    3d82:	2509      	movs	r5, #9
    3d84:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3d86:	0124      	lsls	r4, r4, #4
    3d88:	480b      	ldr	r0, [pc, #44]	; (3db8 <close+0x90>)
    3d8a:	1820      	adds	r0, r4, r0
    3d8c:	2210      	movs	r2, #16
    3d8e:	2100      	movs	r1, #0
    3d90:	4b0b      	ldr	r3, [pc, #44]	; (3dc0 <close+0x98>)
    3d92:	4798      	blx	r3
	}
	return s8Ret;
}
    3d94:	0028      	movs	r0, r5
    3d96:	b007      	add	sp, #28
    3d98:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3d9a:	2506      	movs	r5, #6
    3d9c:	426d      	negs	r5, r5
    3d9e:	e7f9      	b.n	3d94 <close+0x6c>
    3da0:	2506      	movs	r5, #6
    3da2:	426d      	negs	r5, r5
    3da4:	e7f6      	b.n	3d94 <close+0x6c>
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	0000d100 	.word	0x0000d100
    3dac:	0000b779 	.word	0x0000b779
    3db0:	0000db78 	.word	0x0000db78
    3db4:	0000b7ad 	.word	0x0000b7ad
    3db8:	20000f4c 	.word	0x20000f4c
    3dbc:	00001779 	.word	0x00001779
    3dc0:	00001665 	.word	0x00001665

00003dc4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    3dc4:	b570      	push	{r4, r5, r6, lr}
    3dc6:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    3dc8:	2300      	movs	r3, #0
    3dca:	9301      	str	r3, [sp, #4]
    3dcc:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    3dce:	2100      	movs	r1, #0
    3dd0:	7802      	ldrb	r2, [r0, #0]
    3dd2:	1c44      	adds	r4, r0, #1
    3dd4:	3005      	adds	r0, #5
    3dd6:	000b      	movs	r3, r1
    3dd8:	e009      	b.n	3dee <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    3dda:	009d      	lsls	r5, r3, #2
    3ddc:	195b      	adds	r3, r3, r5
    3dde:	005b      	lsls	r3, r3, #1
    3de0:	189b      	adds	r3, r3, r2
    3de2:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    3de4:	0022      	movs	r2, r4
    3de6:	3401      	adds	r4, #1
			if(j > 4)
    3de8:	42a0      	cmp	r0, r4
    3dea:	d00a      	beq.n	3e02 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    3dec:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    3dee:	2a2e      	cmp	r2, #46	; 0x2e
    3df0:	d00a      	beq.n	3e08 <nmi_inet_addr+0x44>
    3df2:	2a00      	cmp	r2, #0
    3df4:	d00c      	beq.n	3e10 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    3df6:	3a30      	subs	r2, #48	; 0x30
    3df8:	b2d2      	uxtb	r2, r2
    3dfa:	2a09      	cmp	r2, #9
    3dfc:	d9ed      	bls.n	3dda <nmi_inet_addr+0x16>
				return 0;
    3dfe:	2000      	movs	r0, #0
    3e00:	e000      	b.n	3e04 <nmi_inet_addr+0x40>
				return 0;
    3e02:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    3e04:	b002      	add	sp, #8
    3e06:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    3e08:	466a      	mov	r2, sp
    3e0a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3e0c:	0020      	movs	r0, r4
    3e0e:	e002      	b.n	3e16 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    3e10:	466a      	mov	r2, sp
    3e12:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3e14:	0020      	movs	r0, r4
    3e16:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    3e18:	2e04      	cmp	r6, #4
    3e1a:	d1d9      	bne.n	3dd0 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    3e1c:	2204      	movs	r2, #4
    3e1e:	4669      	mov	r1, sp
    3e20:	a801      	add	r0, sp, #4
    3e22:	4b02      	ldr	r3, [pc, #8]	; (3e2c <nmi_inet_addr+0x68>)
    3e24:	4798      	blx	r3
	return u32IP;
    3e26:	9801      	ldr	r0, [sp, #4]
    3e28:	e7ec      	b.n	3e04 <nmi_inet_addr+0x40>
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	00001651 	.word	0x00001651

00003e30 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    3e30:	b510      	push	{r4, lr}
    3e32:	b084      	sub	sp, #16
    3e34:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    3e36:	4b0b      	ldr	r3, [pc, #44]	; (3e64 <gethostbyname+0x34>)
    3e38:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    3e3a:	b2c3      	uxtb	r3, r0
    3e3c:	2b40      	cmp	r3, #64	; 0x40
    3e3e:	d80d      	bhi.n	3e5c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3e40:	23ff      	movs	r3, #255	; 0xff
    3e42:	4003      	ands	r3, r0
    3e44:	3301      	adds	r3, #1
    3e46:	2200      	movs	r2, #0
    3e48:	9202      	str	r2, [sp, #8]
    3e4a:	9201      	str	r2, [sp, #4]
    3e4c:	9200      	str	r2, [sp, #0]
    3e4e:	0022      	movs	r2, r4
    3e50:	214a      	movs	r1, #74	; 0x4a
    3e52:	2002      	movs	r0, #2
    3e54:	4c04      	ldr	r4, [pc, #16]	; (3e68 <gethostbyname+0x38>)
    3e56:	47a0      	blx	r4
	}
	return s8Err;
}
    3e58:	b004      	add	sp, #16
    3e5a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3e5c:	2006      	movs	r0, #6
    3e5e:	4240      	negs	r0, r0
    3e60:	e7fa      	b.n	3e58 <gethostbyname+0x28>
    3e62:	46c0      	nop			; (mov r8, r8)
    3e64:	00001675 	.word	0x00001675
    3e68:	00001779 	.word	0x00001779

00003e6c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    3e6c:	b570      	push	{r4, r5, r6, lr}
    3e6e:	b082      	sub	sp, #8
    3e70:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3e72:	4b2a      	ldr	r3, [pc, #168]	; (3f1c <spi_flash_enable+0xb0>)
    3e74:	4798      	blx	r3
    3e76:	0500      	lsls	r0, r0, #20
    3e78:	0d00      	lsrs	r0, r0, #20
    3e7a:	4b29      	ldr	r3, [pc, #164]	; (3f20 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    3e7c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3e7e:	4298      	cmp	r0, r3
    3e80:	d802      	bhi.n	3e88 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3e82:	0028      	movs	r0, r5
    3e84:	b002      	add	sp, #8
    3e86:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3e88:	a901      	add	r1, sp, #4
    3e8a:	4826      	ldr	r0, [pc, #152]	; (3f24 <spi_flash_enable+0xb8>)
    3e8c:	4b26      	ldr	r3, [pc, #152]	; (3f28 <spi_flash_enable+0xbc>)
    3e8e:	4798      	blx	r3
    3e90:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3e92:	d1f6      	bne.n	3e82 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    3e94:	4b25      	ldr	r3, [pc, #148]	; (3f2c <spi_flash_enable+0xc0>)
    3e96:	9a01      	ldr	r2, [sp, #4]
    3e98:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    3e9a:	4925      	ldr	r1, [pc, #148]	; (3f30 <spi_flash_enable+0xc4>)
    3e9c:	4319      	orrs	r1, r3
    3e9e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3ea0:	4820      	ldr	r0, [pc, #128]	; (3f24 <spi_flash_enable+0xb8>)
    3ea2:	4b24      	ldr	r3, [pc, #144]	; (3f34 <spi_flash_enable+0xc8>)
    3ea4:	4798      	blx	r3
		if(enable) {
    3ea6:	2c00      	cmp	r4, #0
    3ea8:	d020      	beq.n	3eec <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3eaa:	2100      	movs	r1, #0
    3eac:	4822      	ldr	r0, [pc, #136]	; (3f38 <spi_flash_enable+0xcc>)
    3eae:	4c21      	ldr	r4, [pc, #132]	; (3f34 <spi_flash_enable+0xc8>)
    3eb0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3eb2:	21ab      	movs	r1, #171	; 0xab
    3eb4:	4821      	ldr	r0, [pc, #132]	; (3f3c <spi_flash_enable+0xd0>)
    3eb6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3eb8:	2101      	movs	r1, #1
    3eba:	4821      	ldr	r0, [pc, #132]	; (3f40 <spi_flash_enable+0xd4>)
    3ebc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3ebe:	2100      	movs	r1, #0
    3ec0:	4820      	ldr	r0, [pc, #128]	; (3f44 <spi_flash_enable+0xd8>)
    3ec2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    3ec4:	2181      	movs	r1, #129	; 0x81
    3ec6:	4820      	ldr	r0, [pc, #128]	; (3f48 <spi_flash_enable+0xdc>)
    3ec8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3eca:	4e20      	ldr	r6, [pc, #128]	; (3f4c <spi_flash_enable+0xe0>)
    3ecc:	4c20      	ldr	r4, [pc, #128]	; (3f50 <spi_flash_enable+0xe4>)
    3ece:	0030      	movs	r0, r6
    3ed0:	47a0      	blx	r4
    3ed2:	2801      	cmp	r0, #1
    3ed4:	d1fb      	bne.n	3ece <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    3ed6:	4b15      	ldr	r3, [pc, #84]	; (3f2c <spi_flash_enable+0xc0>)
    3ed8:	9a01      	ldr	r2, [sp, #4]
    3eda:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    3edc:	2180      	movs	r1, #128	; 0x80
    3ede:	0249      	lsls	r1, r1, #9
    3ee0:	4319      	orrs	r1, r3
    3ee2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3ee4:	480f      	ldr	r0, [pc, #60]	; (3f24 <spi_flash_enable+0xb8>)
    3ee6:	4b13      	ldr	r3, [pc, #76]	; (3f34 <spi_flash_enable+0xc8>)
    3ee8:	4798      	blx	r3
    3eea:	e7ca      	b.n	3e82 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3eec:	2100      	movs	r1, #0
    3eee:	4812      	ldr	r0, [pc, #72]	; (3f38 <spi_flash_enable+0xcc>)
    3ef0:	4c10      	ldr	r4, [pc, #64]	; (3f34 <spi_flash_enable+0xc8>)
    3ef2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3ef4:	21b9      	movs	r1, #185	; 0xb9
    3ef6:	4811      	ldr	r0, [pc, #68]	; (3f3c <spi_flash_enable+0xd0>)
    3ef8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3efa:	2101      	movs	r1, #1
    3efc:	4810      	ldr	r0, [pc, #64]	; (3f40 <spi_flash_enable+0xd4>)
    3efe:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3f00:	2100      	movs	r1, #0
    3f02:	4810      	ldr	r0, [pc, #64]	; (3f44 <spi_flash_enable+0xd8>)
    3f04:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3f06:	2181      	movs	r1, #129	; 0x81
    3f08:	480f      	ldr	r0, [pc, #60]	; (3f48 <spi_flash_enable+0xdc>)
    3f0a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3f0c:	4e0f      	ldr	r6, [pc, #60]	; (3f4c <spi_flash_enable+0xe0>)
    3f0e:	4c10      	ldr	r4, [pc, #64]	; (3f50 <spi_flash_enable+0xe4>)
    3f10:	0030      	movs	r0, r6
    3f12:	47a0      	blx	r4
    3f14:	2801      	cmp	r0, #1
    3f16:	d1fb      	bne.n	3f10 <spi_flash_enable+0xa4>
    3f18:	e7dd      	b.n	3ed6 <spi_flash_enable+0x6a>
    3f1a:	46c0      	nop			; (mov r8, r8)
    3f1c:	00002665 	.word	0x00002665
    3f20:	0000039f 	.word	0x0000039f
    3f24:	00001410 	.word	0x00001410
    3f28:	00002ab5 	.word	0x00002ab5
    3f2c:	f8888fff 	.word	0xf8888fff
    3f30:	01111000 	.word	0x01111000
    3f34:	00002ac1 	.word	0x00002ac1
    3f38:	00010208 	.word	0x00010208
    3f3c:	0001020c 	.word	0x0001020c
    3f40:	00010214 	.word	0x00010214
    3f44:	0001021c 	.word	0x0001021c
    3f48:	00010204 	.word	0x00010204
    3f4c:	00010218 	.word	0x00010218
    3f50:	00002aa9 	.word	0x00002aa9

00003f54 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    3f54:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f56:	46c6      	mov	lr, r8
    3f58:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    3f5a:	2303      	movs	r3, #3
    3f5c:	0007      	movs	r7, r0
    3f5e:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    3f60:	6813      	ldr	r3, [r2, #0]
    3f62:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    3f64:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    3f66:	2903      	cmp	r1, #3
    3f68:	d902      	bls.n	3f70 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    3f6a:	4244      	negs	r4, r0
    3f6c:	2003      	movs	r0, #3
    3f6e:	4004      	ands	r4, r0
	}

	if (temp_length) {
    3f70:	2c00      	cmp	r4, #0
    3f72:	d016      	beq.n	3fa2 <crc32_recalculate+0x4e>
		length -= temp_length;
    3f74:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    3f76:	1d3e      	adds	r6, r7, #4
    3f78:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    3f7a:	00e0      	lsls	r0, r4, #3
    3f7c:	4240      	negs	r0, r0
    3f7e:	3020      	adds	r0, #32
    3f80:	40c5      	lsrs	r5, r0
	crc ^= data;
    3f82:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    3f84:	00e0      	lsls	r0, r4, #3
    3f86:	d019      	beq.n	3fbc <crc32_recalculate+0x68>
		if (crc & 1) {
    3f88:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    3f8a:	4d27      	ldr	r5, [pc, #156]	; (4028 <crc32_recalculate+0xd4>)
    3f8c:	e003      	b.n	3f96 <crc32_recalculate+0x42>
			crc >>= 1;
    3f8e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    3f90:	3801      	subs	r0, #1
    3f92:	2800      	cmp	r0, #0
    3f94:	d004      	beq.n	3fa0 <crc32_recalculate+0x4c>
		if (crc & 1) {
    3f96:	421c      	tst	r4, r3
    3f98:	d0f9      	beq.n	3f8e <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    3f9a:	085b      	lsrs	r3, r3, #1
    3f9c:	406b      	eors	r3, r5
    3f9e:	e7f7      	b.n	3f90 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    3fa0:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    3fa2:	2003      	movs	r0, #3
    3fa4:	000c      	movs	r4, r1
    3fa6:	4384      	bics	r4, r0

	if (temp_length) {
    3fa8:	d01e      	beq.n	3fe8 <crc32_recalculate+0x94>
		length -= temp_length;
    3faa:	1b08      	subs	r0, r1, r4
    3fac:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    3fae:	0889      	lsrs	r1, r1, #2
    3fb0:	4688      	mov	r8, r1
    3fb2:	003e      	movs	r6, r7
    3fb4:	000d      	movs	r5, r1
		if (crc & 1) {
    3fb6:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    3fb8:	4c1b      	ldr	r4, [pc, #108]	; (4028 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    3fba:	e00b      	b.n	3fd4 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    3fbc:	0037      	movs	r7, r6
    3fbe:	e7f0      	b.n	3fa2 <crc32_recalculate+0x4e>
			crc >>= 1;
    3fc0:	085b      	lsrs	r3, r3, #1
    3fc2:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    3fc4:	2900      	cmp	r1, #0
    3fc6:	d004      	beq.n	3fd2 <crc32_recalculate+0x7e>
		if (crc & 1) {
    3fc8:	4218      	tst	r0, r3
    3fca:	d0f9      	beq.n	3fc0 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    3fcc:	085b      	lsrs	r3, r3, #1
    3fce:	4063      	eors	r3, r4
    3fd0:	e7f7      	b.n	3fc2 <crc32_recalculate+0x6e>
    3fd2:	3604      	adds	r6, #4
		while (temp_length--) {
    3fd4:	3d01      	subs	r5, #1
    3fd6:	d303      	bcc.n	3fe0 <crc32_recalculate+0x8c>
	crc ^= data;
    3fd8:	6831      	ldr	r1, [r6, #0]
    3fda:	404b      	eors	r3, r1
    3fdc:	2120      	movs	r1, #32
    3fde:	e7f3      	b.n	3fc8 <crc32_recalculate+0x74>
    3fe0:	4641      	mov	r1, r8
    3fe2:	0089      	lsls	r1, r1, #2
    3fe4:	187f      	adds	r7, r7, r1
		length -= temp_length;
    3fe6:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    3fe8:	2900      	cmp	r1, #0
    3fea:	d017      	beq.n	401c <crc32_recalculate+0xc8>
		word = *word_ptr;
    3fec:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    3fee:	00c8      	lsls	r0, r1, #3
    3ff0:	4240      	negs	r0, r0
    3ff2:	3020      	adds	r0, #32
    3ff4:	2501      	movs	r5, #1
    3ff6:	426d      	negs	r5, r5
    3ff8:	40c5      	lsrs	r5, r0
    3ffa:	0028      	movs	r0, r5
    3ffc:	4020      	ands	r0, r4
	crc ^= data;
    3ffe:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    4000:	00c9      	lsls	r1, r1, #3
    4002:	d00b      	beq.n	401c <crc32_recalculate+0xc8>
		if (crc & 1) {
    4004:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    4006:	4c08      	ldr	r4, [pc, #32]	; (4028 <crc32_recalculate+0xd4>)
    4008:	e003      	b.n	4012 <crc32_recalculate+0xbe>
			crc >>= 1;
    400a:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    400c:	3901      	subs	r1, #1
    400e:	2900      	cmp	r1, #0
    4010:	d004      	beq.n	401c <crc32_recalculate+0xc8>
		if (crc & 1) {
    4012:	4218      	tst	r0, r3
    4014:	d0f9      	beq.n	400a <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    4016:	085b      	lsrs	r3, r3, #1
    4018:	4063      	eors	r3, r4
    401a:	e7f7      	b.n	400c <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    401c:	43db      	mvns	r3, r3
    401e:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    4020:	2000      	movs	r0, #0
    4022:	bc04      	pop	{r2}
    4024:	4690      	mov	r8, r2
    4026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4028:	edb88320 	.word	0xedb88320

0000402c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    402c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    402e:	2301      	movs	r3, #1
    4030:	2800      	cmp	r0, #0
    4032:	d001      	beq.n	4038 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    4034:	0018      	movs	r0, r3
    4036:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    4038:	4b01      	ldr	r3, [pc, #4]	; (4040 <mem_test_unit_ready+0x14>)
    403a:	4798      	blx	r3
    403c:	0003      	movs	r3, r0
    403e:	e7f9      	b.n	4034 <mem_test_unit_ready+0x8>
    4040:	000009bd 	.word	0x000009bd

00004044 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    4044:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    4046:	2301      	movs	r3, #1
    4048:	2800      	cmp	r0, #0
    404a:	d001      	beq.n	4050 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    404c:	0018      	movs	r0, r3
    404e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    4050:	0008      	movs	r0, r1
    4052:	4b02      	ldr	r3, [pc, #8]	; (405c <mem_read_capacity+0x18>)
    4054:	4798      	blx	r3
    4056:	0003      	movs	r3, r0
    4058:	e7f8      	b.n	404c <mem_read_capacity+0x8>
    405a:	46c0      	nop			; (mov r8, r8)
    405c:	000009ed 	.word	0x000009ed

00004060 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    4060:	4243      	negs	r3, r0
    4062:	4158      	adcs	r0, r3
    4064:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    4066:	4770      	bx	lr

00004068 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    4068:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    406a:	2301      	movs	r3, #1
    406c:	2800      	cmp	r0, #0
    406e:	d001      	beq.n	4074 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    4070:	0018      	movs	r0, r3
    4072:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    4074:	4b01      	ldr	r3, [pc, #4]	; (407c <mem_wr_protect+0x14>)
    4076:	4798      	blx	r3
    4078:	0003      	movs	r3, r0
    407a:	e7f9      	b.n	4070 <mem_wr_protect+0x8>
    407c:	000009fd 	.word	0x000009fd

00004080 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    4080:	b510      	push	{r4, lr}
    4082:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    4084:	2301      	movs	r3, #1
    4086:	2800      	cmp	r0, #0
    4088:	d001      	beq.n	408e <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    408a:	0018      	movs	r0, r3
    408c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    408e:	0011      	movs	r1, r2
    4090:	0020      	movs	r0, r4
    4092:	4b02      	ldr	r3, [pc, #8]	; (409c <memory_2_ram+0x1c>)
    4094:	4798      	blx	r3
    4096:	0003      	movs	r3, r0
    4098:	e7f7      	b.n	408a <memory_2_ram+0xa>
    409a:	46c0      	nop			; (mov r8, r8)
    409c:	00000a51 	.word	0x00000a51

000040a0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    40a0:	b510      	push	{r4, lr}
    40a2:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    40a4:	2301      	movs	r3, #1
    40a6:	2800      	cmp	r0, #0
    40a8:	d001      	beq.n	40ae <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    40aa:	0018      	movs	r0, r3
    40ac:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    40ae:	0011      	movs	r1, r2
    40b0:	0020      	movs	r0, r4
    40b2:	4b02      	ldr	r3, [pc, #8]	; (40bc <ram_2_memory+0x1c>)
    40b4:	4798      	blx	r3
    40b6:	0003      	movs	r3, r0
    40b8:	e7f7      	b.n	40aa <ram_2_memory+0xa>
    40ba:	46c0      	nop			; (mov r8, r8)
    40bc:	00000aa9 	.word	0x00000aa9

000040c0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    40c0:	4b0c      	ldr	r3, [pc, #48]	; (40f4 <cpu_irq_enter_critical+0x34>)
    40c2:	681b      	ldr	r3, [r3, #0]
    40c4:	2b00      	cmp	r3, #0
    40c6:	d106      	bne.n	40d6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40c8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    40cc:	2b00      	cmp	r3, #0
    40ce:	d007      	beq.n	40e0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    40d0:	2200      	movs	r2, #0
    40d2:	4b09      	ldr	r3, [pc, #36]	; (40f8 <cpu_irq_enter_critical+0x38>)
    40d4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    40d6:	4a07      	ldr	r2, [pc, #28]	; (40f4 <cpu_irq_enter_critical+0x34>)
    40d8:	6813      	ldr	r3, [r2, #0]
    40da:	3301      	adds	r3, #1
    40dc:	6013      	str	r3, [r2, #0]
}
    40de:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    40e0:	b672      	cpsid	i
    40e2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    40e6:	2200      	movs	r2, #0
    40e8:	4b04      	ldr	r3, [pc, #16]	; (40fc <cpu_irq_enter_critical+0x3c>)
    40ea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    40ec:	3201      	adds	r2, #1
    40ee:	4b02      	ldr	r3, [pc, #8]	; (40f8 <cpu_irq_enter_critical+0x38>)
    40f0:	701a      	strb	r2, [r3, #0]
    40f2:	e7f0      	b.n	40d6 <cpu_irq_enter_critical+0x16>
    40f4:	200003b4 	.word	0x200003b4
    40f8:	200003b8 	.word	0x200003b8
    40fc:	2000000e 	.word	0x2000000e

00004100 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4100:	4b08      	ldr	r3, [pc, #32]	; (4124 <cpu_irq_leave_critical+0x24>)
    4102:	681a      	ldr	r2, [r3, #0]
    4104:	3a01      	subs	r2, #1
    4106:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4108:	681b      	ldr	r3, [r3, #0]
    410a:	2b00      	cmp	r3, #0
    410c:	d109      	bne.n	4122 <cpu_irq_leave_critical+0x22>
    410e:	4b06      	ldr	r3, [pc, #24]	; (4128 <cpu_irq_leave_critical+0x28>)
    4110:	781b      	ldrb	r3, [r3, #0]
    4112:	2b00      	cmp	r3, #0
    4114:	d005      	beq.n	4122 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4116:	2201      	movs	r2, #1
    4118:	4b04      	ldr	r3, [pc, #16]	; (412c <cpu_irq_leave_critical+0x2c>)
    411a:	701a      	strb	r2, [r3, #0]
    411c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4120:	b662      	cpsie	i
	}
}
    4122:	4770      	bx	lr
    4124:	200003b4 	.word	0x200003b4
    4128:	200003b8 	.word	0x200003b8
    412c:	2000000e 	.word	0x2000000e

00004130 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4130:	b5f0      	push	{r4, r5, r6, r7, lr}
    4132:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    4134:	ac01      	add	r4, sp, #4
    4136:	2501      	movs	r5, #1
    4138:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    413a:	2700      	movs	r7, #0
    413c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    413e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4140:	0021      	movs	r1, r4
    4142:	2017      	movs	r0, #23
    4144:	4e06      	ldr	r6, [pc, #24]	; (4160 <system_board_init+0x30>)
    4146:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4148:	2280      	movs	r2, #128	; 0x80
    414a:	0412      	lsls	r2, r2, #16
    414c:	4b05      	ldr	r3, [pc, #20]	; (4164 <system_board_init+0x34>)
    414e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4150:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4152:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4154:	0021      	movs	r1, r4
    4156:	2037      	movs	r0, #55	; 0x37
    4158:	47b0      	blx	r6
}
    415a:	b003      	add	sp, #12
    415c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    415e:	46c0      	nop			; (mov r8, r8)
    4160:	00004549 	.word	0x00004549
    4164:	41004400 	.word	0x41004400

00004168 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4168:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    416a:	2a00      	cmp	r2, #0
    416c:	d001      	beq.n	4172 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    416e:	0018      	movs	r0, r3
    4170:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    4172:	008b      	lsls	r3, r1, #2
    4174:	4a06      	ldr	r2, [pc, #24]	; (4190 <extint_register_callback+0x28>)
    4176:	589b      	ldr	r3, [r3, r2]
    4178:	2b00      	cmp	r3, #0
    417a:	d003      	beq.n	4184 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    417c:	4283      	cmp	r3, r0
    417e:	d005      	beq.n	418c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    4180:	231d      	movs	r3, #29
    4182:	e7f4      	b.n	416e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4184:	0089      	lsls	r1, r1, #2
    4186:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4188:	2300      	movs	r3, #0
    418a:	e7f0      	b.n	416e <extint_register_callback+0x6>
		return STATUS_OK;
    418c:	2300      	movs	r3, #0
    418e:	e7ee      	b.n	416e <extint_register_callback+0x6>
    4190:	2000100c 	.word	0x2000100c

00004194 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4194:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4196:	2900      	cmp	r1, #0
    4198:	d001      	beq.n	419e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    419a:	0018      	movs	r0, r3
    419c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    419e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    41a0:	281f      	cmp	r0, #31
    41a2:	d800      	bhi.n	41a6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    41a4:	4a02      	ldr	r2, [pc, #8]	; (41b0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    41a6:	2301      	movs	r3, #1
    41a8:	4083      	lsls	r3, r0
    41aa:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    41ac:	2300      	movs	r3, #0
    41ae:	e7f4      	b.n	419a <extint_chan_enable_callback+0x6>
    41b0:	40001800 	.word	0x40001800

000041b4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    41b4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    41b6:	2900      	cmp	r1, #0
    41b8:	d001      	beq.n	41be <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    41ba:	0018      	movs	r0, r3
    41bc:	4770      	bx	lr
		return NULL;
    41be:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    41c0:	281f      	cmp	r0, #31
    41c2:	d800      	bhi.n	41c6 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    41c4:	4a02      	ldr	r2, [pc, #8]	; (41d0 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    41c6:	2301      	movs	r3, #1
    41c8:	4083      	lsls	r3, r0
    41ca:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    41cc:	2300      	movs	r3, #0
    41ce:	e7f4      	b.n	41ba <extint_chan_disable_callback+0x6>
    41d0:	40001800 	.word	0x40001800

000041d4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    41d4:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    41d6:	2200      	movs	r2, #0
    41d8:	4b10      	ldr	r3, [pc, #64]	; (421c <EIC_Handler+0x48>)
    41da:	701a      	strb	r2, [r3, #0]
    41dc:	2300      	movs	r3, #0
    41de:	4910      	ldr	r1, [pc, #64]	; (4220 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    41e0:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    41e2:	4e10      	ldr	r6, [pc, #64]	; (4224 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    41e4:	4c0d      	ldr	r4, [pc, #52]	; (421c <EIC_Handler+0x48>)
    41e6:	e00a      	b.n	41fe <EIC_Handler+0x2a>
		return eics[eic_index];
    41e8:	490d      	ldr	r1, [pc, #52]	; (4220 <EIC_Handler+0x4c>)
    41ea:	e008      	b.n	41fe <EIC_Handler+0x2a>
    41ec:	7823      	ldrb	r3, [r4, #0]
    41ee:	3301      	adds	r3, #1
    41f0:	b2db      	uxtb	r3, r3
    41f2:	7023      	strb	r3, [r4, #0]
    41f4:	2b0f      	cmp	r3, #15
    41f6:	d810      	bhi.n	421a <EIC_Handler+0x46>
		return NULL;
    41f8:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    41fa:	2b1f      	cmp	r3, #31
    41fc:	d9f4      	bls.n	41e8 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    41fe:	0028      	movs	r0, r5
    4200:	4018      	ands	r0, r3
    4202:	2201      	movs	r2, #1
    4204:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4206:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4208:	4210      	tst	r0, r2
    420a:	d0ef      	beq.n	41ec <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    420c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    420e:	009b      	lsls	r3, r3, #2
    4210:	599b      	ldr	r3, [r3, r6]
    4212:	2b00      	cmp	r3, #0
    4214:	d0ea      	beq.n	41ec <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4216:	4798      	blx	r3
    4218:	e7e8      	b.n	41ec <EIC_Handler+0x18>
			}
		}
	}
}
    421a:	bd70      	pop	{r4, r5, r6, pc}
    421c:	20001008 	.word	0x20001008
    4220:	40001800 	.word	0x40001800
    4224:	2000100c 	.word	0x2000100c

00004228 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4228:	4a04      	ldr	r2, [pc, #16]	; (423c <_extint_enable+0x14>)
    422a:	7813      	ldrb	r3, [r2, #0]
    422c:	2102      	movs	r1, #2
    422e:	430b      	orrs	r3, r1
    4230:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4232:	7853      	ldrb	r3, [r2, #1]
    4234:	b25b      	sxtb	r3, r3
    4236:	2b00      	cmp	r3, #0
    4238:	dbfb      	blt.n	4232 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    423a:	4770      	bx	lr
    423c:	40001800 	.word	0x40001800

00004240 <_system_extint_init>:
{
    4240:	b500      	push	{lr}
    4242:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4244:	4a12      	ldr	r2, [pc, #72]	; (4290 <_system_extint_init+0x50>)
    4246:	6993      	ldr	r3, [r2, #24]
    4248:	2140      	movs	r1, #64	; 0x40
    424a:	430b      	orrs	r3, r1
    424c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    424e:	a901      	add	r1, sp, #4
    4250:	2300      	movs	r3, #0
    4252:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4254:	2005      	movs	r0, #5
    4256:	4b0f      	ldr	r3, [pc, #60]	; (4294 <_system_extint_init+0x54>)
    4258:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    425a:	2005      	movs	r0, #5
    425c:	4b0e      	ldr	r3, [pc, #56]	; (4298 <_system_extint_init+0x58>)
    425e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4260:	4a0e      	ldr	r2, [pc, #56]	; (429c <_system_extint_init+0x5c>)
    4262:	7813      	ldrb	r3, [r2, #0]
    4264:	2101      	movs	r1, #1
    4266:	430b      	orrs	r3, r1
    4268:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    426a:	7853      	ldrb	r3, [r2, #1]
    426c:	b25b      	sxtb	r3, r3
    426e:	2b00      	cmp	r3, #0
    4270:	dbfb      	blt.n	426a <_system_extint_init+0x2a>
    4272:	4b0b      	ldr	r3, [pc, #44]	; (42a0 <_system_extint_init+0x60>)
    4274:	0019      	movs	r1, r3
    4276:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4278:	2200      	movs	r2, #0
    427a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    427c:	4299      	cmp	r1, r3
    427e:	d1fc      	bne.n	427a <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4280:	2210      	movs	r2, #16
    4282:	4b08      	ldr	r3, [pc, #32]	; (42a4 <_system_extint_init+0x64>)
    4284:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4286:	4b08      	ldr	r3, [pc, #32]	; (42a8 <_system_extint_init+0x68>)
    4288:	4798      	blx	r3
}
    428a:	b003      	add	sp, #12
    428c:	bd00      	pop	{pc}
    428e:	46c0      	nop			; (mov r8, r8)
    4290:	40000400 	.word	0x40000400
    4294:	00005ee9 	.word	0x00005ee9
    4298:	00005e5d 	.word	0x00005e5d
    429c:	40001800 	.word	0x40001800
    42a0:	2000100c 	.word	0x2000100c
    42a4:	e000e100 	.word	0xe000e100
    42a8:	00004229 	.word	0x00004229

000042ac <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    42ac:	2300      	movs	r3, #0
    42ae:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    42b0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    42b2:	2201      	movs	r2, #1
    42b4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    42b6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    42b8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    42ba:	3302      	adds	r3, #2
    42bc:	72c3      	strb	r3, [r0, #11]
}
    42be:	4770      	bx	lr

000042c0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    42c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c2:	b083      	sub	sp, #12
    42c4:	0005      	movs	r5, r0
    42c6:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    42c8:	a901      	add	r1, sp, #4
    42ca:	2300      	movs	r3, #0
    42cc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    42ce:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    42d0:	7923      	ldrb	r3, [r4, #4]
    42d2:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    42d4:	7a23      	ldrb	r3, [r4, #8]
    42d6:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    42d8:	7820      	ldrb	r0, [r4, #0]
    42da:	4b15      	ldr	r3, [pc, #84]	; (4330 <extint_chan_set_config+0x70>)
    42dc:	4798      	blx	r3
		return NULL;
    42de:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    42e0:	2d1f      	cmp	r5, #31
    42e2:	d800      	bhi.n	42e6 <extint_chan_set_config+0x26>
		return eics[eic_index];
    42e4:	4813      	ldr	r0, [pc, #76]	; (4334 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    42e6:	2207      	movs	r2, #7
    42e8:	402a      	ands	r2, r5
    42ea:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    42ec:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    42ee:	7aa3      	ldrb	r3, [r4, #10]
    42f0:	2b00      	cmp	r3, #0
    42f2:	d001      	beq.n	42f8 <extint_chan_set_config+0x38>
    42f4:	2308      	movs	r3, #8
    42f6:	431f      	orrs	r7, r3
    42f8:	08eb      	lsrs	r3, r5, #3
    42fa:	009b      	lsls	r3, r3, #2
    42fc:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    42fe:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4300:	260f      	movs	r6, #15
    4302:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4304:	43b1      	bics	r1, r6
			(new_config << config_pos);
    4306:	4097      	lsls	r7, r2
    4308:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    430a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    430c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    430e:	7a63      	ldrb	r3, [r4, #9]
    4310:	2b00      	cmp	r3, #0
    4312:	d106      	bne.n	4322 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4314:	6943      	ldr	r3, [r0, #20]
    4316:	2201      	movs	r2, #1
    4318:	40aa      	lsls	r2, r5
    431a:	4393      	bics	r3, r2
    431c:	6143      	str	r3, [r0, #20]
	}
}
    431e:	b003      	add	sp, #12
    4320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4322:	6942      	ldr	r2, [r0, #20]
    4324:	2301      	movs	r3, #1
    4326:	40ab      	lsls	r3, r5
    4328:	4313      	orrs	r3, r2
    432a:	6143      	str	r3, [r0, #20]
    432c:	e7f7      	b.n	431e <extint_chan_set_config+0x5e>
    432e:	46c0      	nop			; (mov r8, r8)
    4330:	00005fe1 	.word	0x00005fe1
    4334:	40001800 	.word	0x40001800

00004338 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4338:	b530      	push	{r4, r5, lr}
    433a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    433c:	4a22      	ldr	r2, [pc, #136]	; (43c8 <nvm_execute_command+0x90>)
    433e:	8810      	ldrh	r0, [r2, #0]
    4340:	8853      	ldrh	r3, [r2, #2]
    4342:	4343      	muls	r3, r0
    4344:	428b      	cmp	r3, r1
    4346:	d206      	bcs.n	4356 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4348:	2280      	movs	r2, #128	; 0x80
    434a:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    434c:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    434e:	4b1f      	ldr	r3, [pc, #124]	; (43cc <nvm_execute_command+0x94>)
    4350:	18cb      	adds	r3, r1, r3
    4352:	4293      	cmp	r3, r2
    4354:	d80e      	bhi.n	4374 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4356:	4b1e      	ldr	r3, [pc, #120]	; (43d0 <nvm_execute_command+0x98>)
    4358:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    435a:	2280      	movs	r2, #128	; 0x80
    435c:	02d2      	lsls	r2, r2, #11
    435e:	432a      	orrs	r2, r5
    4360:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4362:	2220      	movs	r2, #32
    4364:	32ff      	adds	r2, #255	; 0xff
    4366:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4368:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    436a:	07db      	lsls	r3, r3, #31
    436c:	d403      	bmi.n	4376 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    436e:	4b18      	ldr	r3, [pc, #96]	; (43d0 <nvm_execute_command+0x98>)
    4370:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4372:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4374:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4376:	2c45      	cmp	r4, #69	; 0x45
    4378:	d822      	bhi.n	43c0 <nvm_execute_command+0x88>
    437a:	00a3      	lsls	r3, r4, #2
    437c:	4a15      	ldr	r2, [pc, #84]	; (43d4 <nvm_execute_command+0x9c>)
    437e:	58d3      	ldr	r3, [r2, r3]
    4380:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4382:	4b13      	ldr	r3, [pc, #76]	; (43d0 <nvm_execute_command+0x98>)
    4384:	8b1b      	ldrh	r3, [r3, #24]
    4386:	05db      	lsls	r3, r3, #23
    4388:	d503      	bpl.n	4392 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    438a:	4b11      	ldr	r3, [pc, #68]	; (43d0 <nvm_execute_command+0x98>)
    438c:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    438e:	2010      	movs	r0, #16
    4390:	e7f0      	b.n	4374 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4392:	0889      	lsrs	r1, r1, #2
    4394:	0049      	lsls	r1, r1, #1
    4396:	4b0e      	ldr	r3, [pc, #56]	; (43d0 <nvm_execute_command+0x98>)
    4398:	61d9      	str	r1, [r3, #28]
			break;
    439a:	e003      	b.n	43a4 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    439c:	0889      	lsrs	r1, r1, #2
    439e:	0049      	lsls	r1, r1, #1
    43a0:	4b0b      	ldr	r3, [pc, #44]	; (43d0 <nvm_execute_command+0x98>)
    43a2:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    43a4:	20a5      	movs	r0, #165	; 0xa5
    43a6:	0200      	lsls	r0, r0, #8
    43a8:	4304      	orrs	r4, r0
    43aa:	4b09      	ldr	r3, [pc, #36]	; (43d0 <nvm_execute_command+0x98>)
    43ac:	801c      	strh	r4, [r3, #0]
    43ae:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    43b0:	2201      	movs	r2, #1
    43b2:	7d0b      	ldrb	r3, [r1, #20]
    43b4:	4213      	tst	r3, r2
    43b6:	d0fc      	beq.n	43b2 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    43b8:	4b05      	ldr	r3, [pc, #20]	; (43d0 <nvm_execute_command+0x98>)
    43ba:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    43bc:	2000      	movs	r0, #0
    43be:	e7d9      	b.n	4374 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    43c0:	4b03      	ldr	r3, [pc, #12]	; (43d0 <nvm_execute_command+0x98>)
    43c2:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    43c4:	2017      	movs	r0, #23
    43c6:	e7d5      	b.n	4374 <nvm_execute_command+0x3c>
    43c8:	200003bc 	.word	0x200003bc
    43cc:	ff7fc000 	.word	0xff7fc000
    43d0:	41004000 	.word	0x41004000
    43d4:	0000dbac 	.word	0x0000dbac

000043d8 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    43d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    43da:	4b25      	ldr	r3, [pc, #148]	; (4470 <nvm_write_buffer+0x98>)
    43dc:	881d      	ldrh	r5, [r3, #0]
    43de:	885b      	ldrh	r3, [r3, #2]
    43e0:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    43e2:	2418      	movs	r4, #24
	if (destination_address >
    43e4:	4283      	cmp	r3, r0
    43e6:	d201      	bcs.n	43ec <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    43e8:	0020      	movs	r0, r4
    43ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    43ec:	1e6b      	subs	r3, r5, #1
    43ee:	4218      	tst	r0, r3
    43f0:	d1fa      	bne.n	43e8 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    43f2:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    43f4:	4295      	cmp	r5, r2
    43f6:	d3f7      	bcc.n	43e8 <nvm_write_buffer+0x10>
    43f8:	4b1e      	ldr	r3, [pc, #120]	; (4474 <nvm_write_buffer+0x9c>)
    43fa:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    43fc:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    43fe:	07db      	lsls	r3, r3, #31
    4400:	d5f2      	bpl.n	43e8 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4402:	4c1d      	ldr	r4, [pc, #116]	; (4478 <nvm_write_buffer+0xa0>)
    4404:	4b1b      	ldr	r3, [pc, #108]	; (4474 <nvm_write_buffer+0x9c>)
    4406:	801c      	strh	r4, [r3, #0]
    4408:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    440a:	2401      	movs	r4, #1
    440c:	7d2b      	ldrb	r3, [r5, #20]
    440e:	4223      	tst	r3, r4
    4410:	d0fc      	beq.n	440c <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4412:	2420      	movs	r4, #32
    4414:	34ff      	adds	r4, #255	; 0xff
    4416:	4b17      	ldr	r3, [pc, #92]	; (4474 <nvm_write_buffer+0x9c>)
    4418:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    441a:	2a00      	cmp	r2, #0
    441c:	d022      	beq.n	4464 <nvm_write_buffer+0x8c>
    441e:	2301      	movs	r3, #1
    4420:	0005      	movs	r5, r0
    4422:	439d      	bics	r5, r3
    4424:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4426:	1e57      	subs	r7, r2, #1
    4428:	e009      	b.n	443e <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    442a:	18ce      	adds	r6, r1, r3
    442c:	7876      	ldrb	r6, [r6, #1]
    442e:	0236      	lsls	r6, r6, #8
    4430:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    4432:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4434:	3302      	adds	r3, #2
    4436:	b29b      	uxth	r3, r3
    4438:	3502      	adds	r5, #2
    443a:	429a      	cmp	r2, r3
    443c:	d904      	bls.n	4448 <nvm_write_buffer+0x70>
		data = buffer[i];
    443e:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4440:	42bb      	cmp	r3, r7
    4442:	dbf2      	blt.n	442a <nvm_write_buffer+0x52>
		data = buffer[i];
    4444:	b2a4      	uxth	r4, r4
    4446:	e7f4      	b.n	4432 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4448:	4b09      	ldr	r3, [pc, #36]	; (4470 <nvm_write_buffer+0x98>)
    444a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    444c:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    444e:	2b00      	cmp	r3, #0
    4450:	d1ca      	bne.n	43e8 <nvm_write_buffer+0x10>
    4452:	2a3f      	cmp	r2, #63	; 0x3f
    4454:	d8c8      	bhi.n	43e8 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    4456:	2200      	movs	r2, #0
    4458:	0001      	movs	r1, r0
    445a:	2004      	movs	r0, #4
    445c:	4b07      	ldr	r3, [pc, #28]	; (447c <nvm_write_buffer+0xa4>)
    445e:	4798      	blx	r3
    4460:	0004      	movs	r4, r0
    4462:	e7c1      	b.n	43e8 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4464:	4b02      	ldr	r3, [pc, #8]	; (4470 <nvm_write_buffer+0x98>)
    4466:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4468:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    446a:	2b00      	cmp	r3, #0
    446c:	d0f3      	beq.n	4456 <nvm_write_buffer+0x7e>
    446e:	e7bb      	b.n	43e8 <nvm_write_buffer+0x10>
    4470:	200003bc 	.word	0x200003bc
    4474:	41004000 	.word	0x41004000
    4478:	ffffa544 	.word	0xffffa544
    447c:	00004339 	.word	0x00004339

00004480 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    4480:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4482:	4b18      	ldr	r3, [pc, #96]	; (44e4 <nvm_read_buffer+0x64>)
    4484:	881d      	ldrh	r5, [r3, #0]
    4486:	885b      	ldrh	r3, [r3, #2]
    4488:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    448a:	2418      	movs	r4, #24
	if (source_address >
    448c:	4283      	cmp	r3, r0
    448e:	d201      	bcs.n	4494 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    4490:	0020      	movs	r0, r4
    4492:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    4494:	1e6b      	subs	r3, r5, #1
    4496:	4218      	tst	r0, r3
    4498:	d1fa      	bne.n	4490 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    449a:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    449c:	4295      	cmp	r5, r2
    449e:	d3f7      	bcc.n	4490 <nvm_read_buffer+0x10>
    44a0:	4b11      	ldr	r3, [pc, #68]	; (44e8 <nvm_read_buffer+0x68>)
    44a2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    44a4:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    44a6:	07db      	lsls	r3, r3, #31
    44a8:	d5f2      	bpl.n	4490 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    44aa:	2420      	movs	r4, #32
    44ac:	34ff      	adds	r4, #255	; 0xff
    44ae:	4b0e      	ldr	r3, [pc, #56]	; (44e8 <nvm_read_buffer+0x68>)
    44b0:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    44b2:	2a00      	cmp	r2, #0
    44b4:	d014      	beq.n	44e0 <nvm_read_buffer+0x60>
    44b6:	2301      	movs	r3, #1
    44b8:	4398      	bics	r0, r3
    44ba:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    44bc:	1e56      	subs	r6, r2, #1
    44be:	e004      	b.n	44ca <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    44c0:	3302      	adds	r3, #2
    44c2:	b29b      	uxth	r3, r3
    44c4:	3002      	adds	r0, #2
    44c6:	429a      	cmp	r2, r3
    44c8:	d908      	bls.n	44dc <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    44ca:	8804      	ldrh	r4, [r0, #0]
    44cc:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    44ce:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    44d0:	42b3      	cmp	r3, r6
    44d2:	daf5      	bge.n	44c0 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    44d4:	18cd      	adds	r5, r1, r3
    44d6:	0a24      	lsrs	r4, r4, #8
    44d8:	706c      	strb	r4, [r5, #1]
    44da:	e7f1      	b.n	44c0 <nvm_read_buffer+0x40>
	return STATUS_OK;
    44dc:	2400      	movs	r4, #0
    44de:	e7d7      	b.n	4490 <nvm_read_buffer+0x10>
    44e0:	2400      	movs	r4, #0
    44e2:	e7d5      	b.n	4490 <nvm_read_buffer+0x10>
    44e4:	200003bc 	.word	0x200003bc
    44e8:	41004000 	.word	0x41004000

000044ec <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    44ec:	4b13      	ldr	r3, [pc, #76]	; (453c <nvm_erase_row+0x50>)
    44ee:	881a      	ldrh	r2, [r3, #0]
    44f0:	885b      	ldrh	r3, [r3, #2]
    44f2:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    44f4:	2118      	movs	r1, #24
	if (row_address >
    44f6:	4283      	cmp	r3, r0
    44f8:	d201      	bcs.n	44fe <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    44fa:	0008      	movs	r0, r1
    44fc:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    44fe:	0092      	lsls	r2, r2, #2
    4500:	3a01      	subs	r2, #1
    4502:	4210      	tst	r0, r2
    4504:	d1f9      	bne.n	44fa <nvm_erase_row+0xe>
    4506:	4b0e      	ldr	r3, [pc, #56]	; (4540 <nvm_erase_row+0x54>)
    4508:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    450a:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    450c:	07db      	lsls	r3, r3, #31
    450e:	d5f4      	bpl.n	44fa <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4510:	4b0b      	ldr	r3, [pc, #44]	; (4540 <nvm_erase_row+0x54>)
    4512:	2220      	movs	r2, #32
    4514:	32ff      	adds	r2, #255	; 0xff
    4516:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4518:	0880      	lsrs	r0, r0, #2
    451a:	0040      	lsls	r0, r0, #1
    451c:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    451e:	4a09      	ldr	r2, [pc, #36]	; (4544 <nvm_erase_row+0x58>)
    4520:	801a      	strh	r2, [r3, #0]
    4522:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4524:	2201      	movs	r2, #1
    4526:	7d0b      	ldrb	r3, [r1, #20]
    4528:	4213      	tst	r3, r2
    452a:	d0fc      	beq.n	4526 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    452c:	4b04      	ldr	r3, [pc, #16]	; (4540 <nvm_erase_row+0x54>)
    452e:	8b19      	ldrh	r1, [r3, #24]
    4530:	201c      	movs	r0, #28
    4532:	4001      	ands	r1, r0
	return STATUS_OK;
    4534:	1e48      	subs	r0, r1, #1
    4536:	4181      	sbcs	r1, r0
    4538:	0089      	lsls	r1, r1, #2
    453a:	e7de      	b.n	44fa <nvm_erase_row+0xe>
    453c:	200003bc 	.word	0x200003bc
    4540:	41004000 	.word	0x41004000
    4544:	ffffa502 	.word	0xffffa502

00004548 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4548:	b500      	push	{lr}
    454a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    454c:	ab01      	add	r3, sp, #4
    454e:	2280      	movs	r2, #128	; 0x80
    4550:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4552:	780a      	ldrb	r2, [r1, #0]
    4554:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4556:	784a      	ldrb	r2, [r1, #1]
    4558:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    455a:	788a      	ldrb	r2, [r1, #2]
    455c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    455e:	0019      	movs	r1, r3
    4560:	4b01      	ldr	r3, [pc, #4]	; (4568 <port_pin_set_config+0x20>)
    4562:	4798      	blx	r3
}
    4564:	b003      	add	sp, #12
    4566:	bd00      	pop	{pc}
    4568:	00005fe1 	.word	0x00005fe1

0000456c <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    456c:	6801      	ldr	r1, [r0, #0]
    456e:	2208      	movs	r2, #8
    4570:	4b05      	ldr	r3, [pc, #20]	; (4588 <rtc_calendar_enable+0x1c>)
    4572:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    4574:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4576:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    4578:	b25b      	sxtb	r3, r3
    457a:	2b00      	cmp	r3, #0
    457c:	dbfb      	blt.n	4576 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    457e:	880b      	ldrh	r3, [r1, #0]
    4580:	2202      	movs	r2, #2
    4582:	4313      	orrs	r3, r2
    4584:	800b      	strh	r3, [r1, #0]
}
    4586:	4770      	bx	lr
    4588:	e000e100 	.word	0xe000e100

0000458c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    458c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    458e:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4590:	2408      	movs	r4, #8
    4592:	2380      	movs	r3, #128	; 0x80
    4594:	4907      	ldr	r1, [pc, #28]	; (45b4 <rtc_calendar_disable+0x28>)
    4596:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    4598:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    459a:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    459c:	b25b      	sxtb	r3, r3
    459e:	2b00      	cmp	r3, #0
    45a0:	dbfb      	blt.n	459a <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    45a2:	23c1      	movs	r3, #193	; 0xc1
    45a4:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    45a6:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    45a8:	8813      	ldrh	r3, [r2, #0]
    45aa:	2102      	movs	r1, #2
    45ac:	438b      	bics	r3, r1
    45ae:	8013      	strh	r3, [r2, #0]
}
    45b0:	bd10      	pop	{r4, pc}
    45b2:	46c0      	nop			; (mov r8, r8)
    45b4:	e000e100 	.word	0xe000e100

000045b8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    45b8:	b570      	push	{r4, r5, r6, lr}
    45ba:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    45bc:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    45be:	4b07      	ldr	r3, [pc, #28]	; (45dc <rtc_calendar_reset+0x24>)
    45c0:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    45c2:	2300      	movs	r3, #0
    45c4:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    45c6:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    45c8:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    45ca:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    45cc:	b25b      	sxtb	r3, r3
    45ce:	2b00      	cmp	r3, #0
    45d0:	dbfb      	blt.n	45ca <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    45d2:	882b      	ldrh	r3, [r5, #0]
    45d4:	2201      	movs	r2, #1
    45d6:	4313      	orrs	r3, r2
    45d8:	802b      	strh	r3, [r5, #0]
}
    45da:	bd70      	pop	{r4, r5, r6, pc}
    45dc:	0000458d 	.word	0x0000458d

000045e0 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    45e0:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    45e2:	88cb      	ldrh	r3, [r1, #6]
    45e4:	88c2      	ldrh	r2, [r0, #6]
    45e6:	1a9a      	subs	r2, r3, r2
    45e8:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    45ea:	794b      	ldrb	r3, [r1, #5]
    45ec:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    45ee:	790c      	ldrb	r4, [r1, #4]
    45f0:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    45f2:	4323      	orrs	r3, r4
    45f4:	788c      	ldrb	r4, [r1, #2]
    45f6:	0324      	lsls	r4, r4, #12
    45f8:	4323      	orrs	r3, r4
    45fa:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    45fc:	7902      	ldrb	r2, [r0, #4]
    45fe:	2a00      	cmp	r2, #0
    4600:	d105      	bne.n	460e <rtc_calendar_time_to_register_value+0x2e>
    4602:	78ca      	ldrb	r2, [r1, #3]
    4604:	2a00      	cmp	r2, #0
    4606:	d002      	beq.n	460e <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    4608:	2280      	movs	r2, #128	; 0x80
    460a:	0252      	lsls	r2, r2, #9
    460c:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    460e:	7848      	ldrb	r0, [r1, #1]
    4610:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    4612:	780a      	ldrb	r2, [r1, #0]
    4614:	4310      	orrs	r0, r2
    4616:	4318      	orrs	r0, r3

	return register_value;
}
    4618:	bd10      	pop	{r4, pc}

0000461a <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    461a:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    461c:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    461e:	88c4      	ldrh	r4, [r0, #6]
    4620:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    4622:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    4624:	018b      	lsls	r3, r1, #6
    4626:	0f1b      	lsrs	r3, r3, #28
    4628:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    462a:	028b      	lsls	r3, r1, #10
    462c:	0edb      	lsrs	r3, r3, #27
    462e:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    4630:	7903      	ldrb	r3, [r0, #4]
    4632:	2b00      	cmp	r3, #0
    4634:	d10c      	bne.n	4650 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    4636:	040b      	lsls	r3, r1, #16
    4638:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    463a:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    463c:	03cb      	lsls	r3, r1, #15
    463e:	0fdb      	lsrs	r3, r3, #31
    4640:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    4642:	0988      	lsrs	r0, r1, #6
    4644:	233f      	movs	r3, #63	; 0x3f
    4646:	4018      	ands	r0, r3
    4648:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    464a:	4019      	ands	r1, r3
    464c:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    464e:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    4650:	03cb      	lsls	r3, r1, #15
    4652:	0edb      	lsrs	r3, r3, #27
    4654:	7093      	strb	r3, [r2, #2]
    4656:	e7f4      	b.n	4642 <rtc_calendar_register_value_to_time+0x28>

00004658 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    4658:	b510      	push	{r4, lr}
    465a:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    465c:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    465e:	7941      	ldrb	r1, [r0, #5]
    4660:	2900      	cmp	r1, #0
    4662:	d006      	beq.n	4672 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    4664:	8859      	ldrh	r1, [r3, #2]
    4666:	0449      	lsls	r1, r1, #17
    4668:	d50b      	bpl.n	4682 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    466a:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    466c:	4b0a      	ldr	r3, [pc, #40]	; (4698 <rtc_calendar_get_time+0x40>)
    466e:	4798      	blx	r3
}
    4670:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    4672:	490a      	ldr	r1, [pc, #40]	; (469c <rtc_calendar_get_time+0x44>)
    4674:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    4676:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4678:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    467a:	b249      	sxtb	r1, r1
    467c:	2900      	cmp	r1, #0
    467e:	dbfb      	blt.n	4678 <rtc_calendar_get_time+0x20>
    4680:	e7f3      	b.n	466a <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    4682:	8859      	ldrh	r1, [r3, #2]
    4684:	24c0      	movs	r4, #192	; 0xc0
    4686:	0224      	lsls	r4, r4, #8
    4688:	4321      	orrs	r1, r4
    468a:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    468c:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    468e:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    4690:	b249      	sxtb	r1, r1
    4692:	2900      	cmp	r1, #0
    4694:	dbfb      	blt.n	468e <rtc_calendar_get_time+0x36>
    4696:	e7e8      	b.n	466a <rtc_calendar_get_time+0x12>
    4698:	0000461b 	.word	0x0000461b
    469c:	ffff8000 	.word	0xffff8000

000046a0 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    46a0:	b570      	push	{r4, r5, r6, lr}
    46a2:	000d      	movs	r5, r1
    46a4:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    46a6:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    46a8:	2a01      	cmp	r2, #1
    46aa:	d901      	bls.n	46b0 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    46ac:	0018      	movs	r0, r3
    46ae:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    46b0:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    46b2:	4b06      	ldr	r3, [pc, #24]	; (46cc <rtc_calendar_set_alarm+0x2c>)
    46b4:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    46b6:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    46b8:	b25b      	sxtb	r3, r3
    46ba:	2b00      	cmp	r3, #0
    46bc:	dbfb      	blt.n	46b6 <rtc_calendar_set_alarm+0x16>
    46be:	00e4      	lsls	r4, r4, #3
    46c0:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    46c2:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    46c4:	7a2b      	ldrb	r3, [r5, #8]
    46c6:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    46c8:	2300      	movs	r3, #0
    46ca:	e7ef      	b.n	46ac <rtc_calendar_set_alarm+0xc>
    46cc:	000045e1 	.word	0x000045e1

000046d0 <rtc_calendar_init>:
{
    46d0:	b530      	push	{r4, r5, lr}
    46d2:	b083      	sub	sp, #12
    46d4:	0005      	movs	r5, r0
    46d6:	0014      	movs	r4, r2
	module->hw = hw;
    46d8:	6001      	str	r1, [r0, #0]
    46da:	4a1c      	ldr	r2, [pc, #112]	; (474c <rtc_calendar_init+0x7c>)
    46dc:	6993      	ldr	r3, [r2, #24]
    46de:	2120      	movs	r1, #32
    46e0:	430b      	orrs	r3, r1
    46e2:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    46e4:	a901      	add	r1, sp, #4
    46e6:	2302      	movs	r3, #2
    46e8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    46ea:	2004      	movs	r0, #4
    46ec:	4b18      	ldr	r3, [pc, #96]	; (4750 <rtc_calendar_init+0x80>)
    46ee:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    46f0:	2004      	movs	r0, #4
    46f2:	4b18      	ldr	r3, [pc, #96]	; (4754 <rtc_calendar_init+0x84>)
    46f4:	4798      	blx	r3
	rtc_calendar_reset(module);
    46f6:	0028      	movs	r0, r5
    46f8:	4b17      	ldr	r3, [pc, #92]	; (4758 <rtc_calendar_init+0x88>)
    46fa:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    46fc:	7923      	ldrb	r3, [r4, #4]
    46fe:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    4700:	78e3      	ldrb	r3, [r4, #3]
    4702:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    4704:	88e3      	ldrh	r3, [r4, #6]
    4706:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    4708:	4b14      	ldr	r3, [pc, #80]	; (475c <rtc_calendar_init+0x8c>)
    470a:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    470c:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    470e:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    4710:	7921      	ldrb	r1, [r4, #4]
    4712:	2900      	cmp	r1, #0
    4714:	d017      	beq.n	4746 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    4716:	2108      	movs	r1, #8
    4718:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    471a:	78a1      	ldrb	r1, [r4, #2]
    471c:	2900      	cmp	r1, #0
    471e:	d001      	beq.n	4724 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    4720:	2180      	movs	r1, #128	; 0x80
    4722:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    4724:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    4726:	78e3      	ldrb	r3, [r4, #3]
    4728:	2b00      	cmp	r3, #0
    472a:	d004      	beq.n	4736 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    472c:	8853      	ldrh	r3, [r2, #2]
    472e:	2180      	movs	r1, #128	; 0x80
    4730:	01c9      	lsls	r1, r1, #7
    4732:	430b      	orrs	r3, r1
    4734:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    4736:	0021      	movs	r1, r4
    4738:	3108      	adds	r1, #8
    473a:	2200      	movs	r2, #0
    473c:	0028      	movs	r0, r5
    473e:	4b08      	ldr	r3, [pc, #32]	; (4760 <rtc_calendar_init+0x90>)
    4740:	4798      	blx	r3
}
    4742:	b003      	add	sp, #12
    4744:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    4746:	2148      	movs	r1, #72	; 0x48
    4748:	430b      	orrs	r3, r1
    474a:	e7e6      	b.n	471a <rtc_calendar_init+0x4a>
    474c:	40000400 	.word	0x40000400
    4750:	00005ee9 	.word	0x00005ee9
    4754:	00005e5d 	.word	0x00005e5d
    4758:	000045b9 	.word	0x000045b9
    475c:	2000104c 	.word	0x2000104c
    4760:	000046a1 	.word	0x000046a1

00004764 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4764:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    4766:	4b0f      	ldr	r3, [pc, #60]	; (47a4 <RTC_Handler+0x40>)
    4768:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    476a:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    476c:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    476e:	8a13      	ldrh	r3, [r2, #16]
    4770:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    4772:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    4774:	79e3      	ldrb	r3, [r4, #7]
    4776:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    4778:	b258      	sxtb	r0, r3
    477a:	2800      	cmp	r0, #0
    477c:	db06      	blt.n	478c <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    477e:	07db      	lsls	r3, r3, #31
    4780:	d503      	bpl.n	478a <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    4782:	07cb      	lsls	r3, r1, #31
    4784:	d40a      	bmi.n	479c <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    4786:	2301      	movs	r3, #1
    4788:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    478a:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    478c:	078b      	lsls	r3, r1, #30
    478e:	d402      	bmi.n	4796 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    4790:	2380      	movs	r3, #128	; 0x80
    4792:	7223      	strb	r3, [r4, #8]
    4794:	e7f9      	b.n	478a <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    4796:	68d3      	ldr	r3, [r2, #12]
    4798:	4798      	blx	r3
    479a:	e7f9      	b.n	4790 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    479c:	6893      	ldr	r3, [r2, #8]
    479e:	4798      	blx	r3
    47a0:	e7f1      	b.n	4786 <RTC_Handler+0x22>
    47a2:	46c0      	nop			; (mov r8, r8)
    47a4:	2000104c 	.word	0x2000104c

000047a8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    47a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    47aa:	46de      	mov	lr, fp
    47ac:	4657      	mov	r7, sl
    47ae:	464e      	mov	r6, r9
    47b0:	4645      	mov	r5, r8
    47b2:	b5e0      	push	{r5, r6, r7, lr}
    47b4:	b087      	sub	sp, #28
    47b6:	4680      	mov	r8, r0
    47b8:	9104      	str	r1, [sp, #16]
    47ba:	0016      	movs	r6, r2
    47bc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    47be:	2200      	movs	r2, #0
    47c0:	2300      	movs	r3, #0
    47c2:	2100      	movs	r1, #0
    47c4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    47c6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    47c8:	2001      	movs	r0, #1
    47ca:	0021      	movs	r1, r4
    47cc:	9600      	str	r6, [sp, #0]
    47ce:	9701      	str	r7, [sp, #4]
    47d0:	465c      	mov	r4, fp
    47d2:	9403      	str	r4, [sp, #12]
    47d4:	4644      	mov	r4, r8
    47d6:	9405      	str	r4, [sp, #20]
    47d8:	e013      	b.n	4802 <long_division+0x5a>
    47da:	2420      	movs	r4, #32
    47dc:	1a64      	subs	r4, r4, r1
    47de:	0005      	movs	r5, r0
    47e0:	40e5      	lsrs	r5, r4
    47e2:	46a8      	mov	r8, r5
    47e4:	e014      	b.n	4810 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    47e6:	9c00      	ldr	r4, [sp, #0]
    47e8:	9d01      	ldr	r5, [sp, #4]
    47ea:	1b12      	subs	r2, r2, r4
    47ec:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    47ee:	465c      	mov	r4, fp
    47f0:	464d      	mov	r5, r9
    47f2:	432c      	orrs	r4, r5
    47f4:	46a3      	mov	fp, r4
    47f6:	9c03      	ldr	r4, [sp, #12]
    47f8:	4645      	mov	r5, r8
    47fa:	432c      	orrs	r4, r5
    47fc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    47fe:	3901      	subs	r1, #1
    4800:	d325      	bcc.n	484e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4802:	2420      	movs	r4, #32
    4804:	4264      	negs	r4, r4
    4806:	190c      	adds	r4, r1, r4
    4808:	d4e7      	bmi.n	47da <long_division+0x32>
    480a:	0005      	movs	r5, r0
    480c:	40a5      	lsls	r5, r4
    480e:	46a8      	mov	r8, r5
    4810:	0004      	movs	r4, r0
    4812:	408c      	lsls	r4, r1
    4814:	46a1      	mov	r9, r4
		r = r << 1;
    4816:	1892      	adds	r2, r2, r2
    4818:	415b      	adcs	r3, r3
    481a:	0014      	movs	r4, r2
    481c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    481e:	9e05      	ldr	r6, [sp, #20]
    4820:	464f      	mov	r7, r9
    4822:	403e      	ands	r6, r7
    4824:	46b4      	mov	ip, r6
    4826:	9e04      	ldr	r6, [sp, #16]
    4828:	4647      	mov	r7, r8
    482a:	403e      	ands	r6, r7
    482c:	46b2      	mov	sl, r6
    482e:	4666      	mov	r6, ip
    4830:	4657      	mov	r7, sl
    4832:	433e      	orrs	r6, r7
    4834:	d003      	beq.n	483e <long_division+0x96>
			r |= 0x01;
    4836:	0006      	movs	r6, r0
    4838:	4326      	orrs	r6, r4
    483a:	0032      	movs	r2, r6
    483c:	002b      	movs	r3, r5
		if (r >= d) {
    483e:	9c00      	ldr	r4, [sp, #0]
    4840:	9d01      	ldr	r5, [sp, #4]
    4842:	429d      	cmp	r5, r3
    4844:	d8db      	bhi.n	47fe <long_division+0x56>
    4846:	d1ce      	bne.n	47e6 <long_division+0x3e>
    4848:	4294      	cmp	r4, r2
    484a:	d8d8      	bhi.n	47fe <long_division+0x56>
    484c:	e7cb      	b.n	47e6 <long_division+0x3e>
    484e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4850:	4658      	mov	r0, fp
    4852:	0019      	movs	r1, r3
    4854:	b007      	add	sp, #28
    4856:	bc3c      	pop	{r2, r3, r4, r5}
    4858:	4690      	mov	r8, r2
    485a:	4699      	mov	r9, r3
    485c:	46a2      	mov	sl, r4
    485e:	46ab      	mov	fp, r5
    4860:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004862 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4862:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4864:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4866:	2340      	movs	r3, #64	; 0x40
    4868:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    486a:	4281      	cmp	r1, r0
    486c:	d202      	bcs.n	4874 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    486e:	0018      	movs	r0, r3
    4870:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4872:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4874:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    4876:	1c63      	adds	r3, r4, #1
    4878:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    487a:	4288      	cmp	r0, r1
    487c:	d9f9      	bls.n	4872 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    487e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4880:	2cff      	cmp	r4, #255	; 0xff
    4882:	d8f4      	bhi.n	486e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4884:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    4886:	2300      	movs	r3, #0
    4888:	e7f1      	b.n	486e <_sercom_get_sync_baud_val+0xc>
	...

0000488c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    488c:	b5f0      	push	{r4, r5, r6, r7, lr}
    488e:	b083      	sub	sp, #12
    4890:	000f      	movs	r7, r1
    4892:	0016      	movs	r6, r2
    4894:	aa08      	add	r2, sp, #32
    4896:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    4898:	0004      	movs	r4, r0
    489a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    489c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    489e:	42bc      	cmp	r4, r7
    48a0:	d902      	bls.n	48a8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    48a2:	0010      	movs	r0, r2
    48a4:	b003      	add	sp, #12
    48a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    48a8:	2b00      	cmp	r3, #0
    48aa:	d114      	bne.n	48d6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    48ac:	0002      	movs	r2, r0
    48ae:	0008      	movs	r0, r1
    48b0:	2100      	movs	r1, #0
    48b2:	4c19      	ldr	r4, [pc, #100]	; (4918 <_sercom_get_async_baud_val+0x8c>)
    48b4:	47a0      	blx	r4
    48b6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    48b8:	003a      	movs	r2, r7
    48ba:	2300      	movs	r3, #0
    48bc:	2000      	movs	r0, #0
    48be:	4c17      	ldr	r4, [pc, #92]	; (491c <_sercom_get_async_baud_val+0x90>)
    48c0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    48c2:	2200      	movs	r2, #0
    48c4:	2301      	movs	r3, #1
    48c6:	1a12      	subs	r2, r2, r0
    48c8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    48ca:	0c12      	lsrs	r2, r2, #16
    48cc:	041b      	lsls	r3, r3, #16
    48ce:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    48d0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    48d2:	2200      	movs	r2, #0
    48d4:	e7e5      	b.n	48a2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    48d6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    48d8:	2b01      	cmp	r3, #1
    48da:	d1f9      	bne.n	48d0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    48dc:	000a      	movs	r2, r1
    48de:	2300      	movs	r3, #0
    48e0:	2100      	movs	r1, #0
    48e2:	4c0d      	ldr	r4, [pc, #52]	; (4918 <_sercom_get_async_baud_val+0x8c>)
    48e4:	47a0      	blx	r4
    48e6:	0002      	movs	r2, r0
    48e8:	000b      	movs	r3, r1
    48ea:	9200      	str	r2, [sp, #0]
    48ec:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    48ee:	0038      	movs	r0, r7
    48f0:	2100      	movs	r1, #0
    48f2:	4c0a      	ldr	r4, [pc, #40]	; (491c <_sercom_get_async_baud_val+0x90>)
    48f4:	47a0      	blx	r4
    48f6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    48f8:	2380      	movs	r3, #128	; 0x80
    48fa:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    48fc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    48fe:	4298      	cmp	r0, r3
    4900:	d8cf      	bhi.n	48a2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4902:	0f79      	lsrs	r1, r7, #29
    4904:	00f8      	lsls	r0, r7, #3
    4906:	9a00      	ldr	r2, [sp, #0]
    4908:	9b01      	ldr	r3, [sp, #4]
    490a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    490c:	00ea      	lsls	r2, r5, #3
    490e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4910:	b2d2      	uxtb	r2, r2
    4912:	0352      	lsls	r2, r2, #13
    4914:	432a      	orrs	r2, r5
    4916:	e7db      	b.n	48d0 <_sercom_get_async_baud_val+0x44>
    4918:	0000b511 	.word	0x0000b511
    491c:	000047a9 	.word	0x000047a9

00004920 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4920:	b510      	push	{r4, lr}
    4922:	b082      	sub	sp, #8
    4924:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4926:	4b0e      	ldr	r3, [pc, #56]	; (4960 <sercom_set_gclk_generator+0x40>)
    4928:	781b      	ldrb	r3, [r3, #0]
    492a:	2b00      	cmp	r3, #0
    492c:	d007      	beq.n	493e <sercom_set_gclk_generator+0x1e>
    492e:	2900      	cmp	r1, #0
    4930:	d105      	bne.n	493e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4932:	4b0b      	ldr	r3, [pc, #44]	; (4960 <sercom_set_gclk_generator+0x40>)
    4934:	785b      	ldrb	r3, [r3, #1]
    4936:	4283      	cmp	r3, r0
    4938:	d010      	beq.n	495c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    493a:	201d      	movs	r0, #29
    493c:	e00c      	b.n	4958 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    493e:	a901      	add	r1, sp, #4
    4940:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4942:	2013      	movs	r0, #19
    4944:	4b07      	ldr	r3, [pc, #28]	; (4964 <sercom_set_gclk_generator+0x44>)
    4946:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4948:	2013      	movs	r0, #19
    494a:	4b07      	ldr	r3, [pc, #28]	; (4968 <sercom_set_gclk_generator+0x48>)
    494c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    494e:	4b04      	ldr	r3, [pc, #16]	; (4960 <sercom_set_gclk_generator+0x40>)
    4950:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4952:	2201      	movs	r2, #1
    4954:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4956:	2000      	movs	r0, #0
}
    4958:	b002      	add	sp, #8
    495a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    495c:	2000      	movs	r0, #0
    495e:	e7fb      	b.n	4958 <sercom_set_gclk_generator+0x38>
    4960:	200003c4 	.word	0x200003c4
    4964:	00005ee9 	.word	0x00005ee9
    4968:	00005e5d 	.word	0x00005e5d

0000496c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    496c:	4b40      	ldr	r3, [pc, #256]	; (4a70 <_sercom_get_default_pad+0x104>)
    496e:	4298      	cmp	r0, r3
    4970:	d031      	beq.n	49d6 <_sercom_get_default_pad+0x6a>
    4972:	d90a      	bls.n	498a <_sercom_get_default_pad+0x1e>
    4974:	4b3f      	ldr	r3, [pc, #252]	; (4a74 <_sercom_get_default_pad+0x108>)
    4976:	4298      	cmp	r0, r3
    4978:	d04d      	beq.n	4a16 <_sercom_get_default_pad+0xaa>
    497a:	4b3f      	ldr	r3, [pc, #252]	; (4a78 <_sercom_get_default_pad+0x10c>)
    497c:	4298      	cmp	r0, r3
    497e:	d05a      	beq.n	4a36 <_sercom_get_default_pad+0xca>
    4980:	4b3e      	ldr	r3, [pc, #248]	; (4a7c <_sercom_get_default_pad+0x110>)
    4982:	4298      	cmp	r0, r3
    4984:	d037      	beq.n	49f6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4986:	2000      	movs	r0, #0
}
    4988:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    498a:	4b3d      	ldr	r3, [pc, #244]	; (4a80 <_sercom_get_default_pad+0x114>)
    498c:	4298      	cmp	r0, r3
    498e:	d00c      	beq.n	49aa <_sercom_get_default_pad+0x3e>
    4990:	4b3c      	ldr	r3, [pc, #240]	; (4a84 <_sercom_get_default_pad+0x118>)
    4992:	4298      	cmp	r0, r3
    4994:	d1f7      	bne.n	4986 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4996:	2901      	cmp	r1, #1
    4998:	d017      	beq.n	49ca <_sercom_get_default_pad+0x5e>
    499a:	2900      	cmp	r1, #0
    499c:	d05d      	beq.n	4a5a <_sercom_get_default_pad+0xee>
    499e:	2902      	cmp	r1, #2
    49a0:	d015      	beq.n	49ce <_sercom_get_default_pad+0x62>
    49a2:	2903      	cmp	r1, #3
    49a4:	d015      	beq.n	49d2 <_sercom_get_default_pad+0x66>
	return 0;
    49a6:	2000      	movs	r0, #0
    49a8:	e7ee      	b.n	4988 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    49aa:	2901      	cmp	r1, #1
    49ac:	d007      	beq.n	49be <_sercom_get_default_pad+0x52>
    49ae:	2900      	cmp	r1, #0
    49b0:	d051      	beq.n	4a56 <_sercom_get_default_pad+0xea>
    49b2:	2902      	cmp	r1, #2
    49b4:	d005      	beq.n	49c2 <_sercom_get_default_pad+0x56>
    49b6:	2903      	cmp	r1, #3
    49b8:	d005      	beq.n	49c6 <_sercom_get_default_pad+0x5a>
	return 0;
    49ba:	2000      	movs	r0, #0
    49bc:	e7e4      	b.n	4988 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    49be:	4832      	ldr	r0, [pc, #200]	; (4a88 <_sercom_get_default_pad+0x11c>)
    49c0:	e7e2      	b.n	4988 <_sercom_get_default_pad+0x1c>
    49c2:	4832      	ldr	r0, [pc, #200]	; (4a8c <_sercom_get_default_pad+0x120>)
    49c4:	e7e0      	b.n	4988 <_sercom_get_default_pad+0x1c>
    49c6:	4832      	ldr	r0, [pc, #200]	; (4a90 <_sercom_get_default_pad+0x124>)
    49c8:	e7de      	b.n	4988 <_sercom_get_default_pad+0x1c>
    49ca:	4832      	ldr	r0, [pc, #200]	; (4a94 <_sercom_get_default_pad+0x128>)
    49cc:	e7dc      	b.n	4988 <_sercom_get_default_pad+0x1c>
    49ce:	4832      	ldr	r0, [pc, #200]	; (4a98 <_sercom_get_default_pad+0x12c>)
    49d0:	e7da      	b.n	4988 <_sercom_get_default_pad+0x1c>
    49d2:	4832      	ldr	r0, [pc, #200]	; (4a9c <_sercom_get_default_pad+0x130>)
    49d4:	e7d8      	b.n	4988 <_sercom_get_default_pad+0x1c>
    49d6:	2901      	cmp	r1, #1
    49d8:	d007      	beq.n	49ea <_sercom_get_default_pad+0x7e>
    49da:	2900      	cmp	r1, #0
    49dc:	d03f      	beq.n	4a5e <_sercom_get_default_pad+0xf2>
    49de:	2902      	cmp	r1, #2
    49e0:	d005      	beq.n	49ee <_sercom_get_default_pad+0x82>
    49e2:	2903      	cmp	r1, #3
    49e4:	d005      	beq.n	49f2 <_sercom_get_default_pad+0x86>
	return 0;
    49e6:	2000      	movs	r0, #0
    49e8:	e7ce      	b.n	4988 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    49ea:	482d      	ldr	r0, [pc, #180]	; (4aa0 <_sercom_get_default_pad+0x134>)
    49ec:	e7cc      	b.n	4988 <_sercom_get_default_pad+0x1c>
    49ee:	482d      	ldr	r0, [pc, #180]	; (4aa4 <_sercom_get_default_pad+0x138>)
    49f0:	e7ca      	b.n	4988 <_sercom_get_default_pad+0x1c>
    49f2:	482d      	ldr	r0, [pc, #180]	; (4aa8 <_sercom_get_default_pad+0x13c>)
    49f4:	e7c8      	b.n	4988 <_sercom_get_default_pad+0x1c>
    49f6:	2901      	cmp	r1, #1
    49f8:	d007      	beq.n	4a0a <_sercom_get_default_pad+0x9e>
    49fa:	2900      	cmp	r1, #0
    49fc:	d031      	beq.n	4a62 <_sercom_get_default_pad+0xf6>
    49fe:	2902      	cmp	r1, #2
    4a00:	d005      	beq.n	4a0e <_sercom_get_default_pad+0xa2>
    4a02:	2903      	cmp	r1, #3
    4a04:	d005      	beq.n	4a12 <_sercom_get_default_pad+0xa6>
	return 0;
    4a06:	2000      	movs	r0, #0
    4a08:	e7be      	b.n	4988 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4a0a:	4828      	ldr	r0, [pc, #160]	; (4aac <_sercom_get_default_pad+0x140>)
    4a0c:	e7bc      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a0e:	4828      	ldr	r0, [pc, #160]	; (4ab0 <_sercom_get_default_pad+0x144>)
    4a10:	e7ba      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a12:	4828      	ldr	r0, [pc, #160]	; (4ab4 <_sercom_get_default_pad+0x148>)
    4a14:	e7b8      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a16:	2901      	cmp	r1, #1
    4a18:	d007      	beq.n	4a2a <_sercom_get_default_pad+0xbe>
    4a1a:	2900      	cmp	r1, #0
    4a1c:	d023      	beq.n	4a66 <_sercom_get_default_pad+0xfa>
    4a1e:	2902      	cmp	r1, #2
    4a20:	d005      	beq.n	4a2e <_sercom_get_default_pad+0xc2>
    4a22:	2903      	cmp	r1, #3
    4a24:	d005      	beq.n	4a32 <_sercom_get_default_pad+0xc6>
	return 0;
    4a26:	2000      	movs	r0, #0
    4a28:	e7ae      	b.n	4988 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4a2a:	4823      	ldr	r0, [pc, #140]	; (4ab8 <_sercom_get_default_pad+0x14c>)
    4a2c:	e7ac      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a2e:	4823      	ldr	r0, [pc, #140]	; (4abc <_sercom_get_default_pad+0x150>)
    4a30:	e7aa      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a32:	4823      	ldr	r0, [pc, #140]	; (4ac0 <_sercom_get_default_pad+0x154>)
    4a34:	e7a8      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a36:	2901      	cmp	r1, #1
    4a38:	d007      	beq.n	4a4a <_sercom_get_default_pad+0xde>
    4a3a:	2900      	cmp	r1, #0
    4a3c:	d015      	beq.n	4a6a <_sercom_get_default_pad+0xfe>
    4a3e:	2902      	cmp	r1, #2
    4a40:	d005      	beq.n	4a4e <_sercom_get_default_pad+0xe2>
    4a42:	2903      	cmp	r1, #3
    4a44:	d005      	beq.n	4a52 <_sercom_get_default_pad+0xe6>
	return 0;
    4a46:	2000      	movs	r0, #0
    4a48:	e79e      	b.n	4988 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4a4a:	481e      	ldr	r0, [pc, #120]	; (4ac4 <_sercom_get_default_pad+0x158>)
    4a4c:	e79c      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a4e:	481e      	ldr	r0, [pc, #120]	; (4ac8 <_sercom_get_default_pad+0x15c>)
    4a50:	e79a      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a52:	481e      	ldr	r0, [pc, #120]	; (4acc <_sercom_get_default_pad+0x160>)
    4a54:	e798      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a56:	481e      	ldr	r0, [pc, #120]	; (4ad0 <_sercom_get_default_pad+0x164>)
    4a58:	e796      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a5a:	2003      	movs	r0, #3
    4a5c:	e794      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a5e:	481d      	ldr	r0, [pc, #116]	; (4ad4 <_sercom_get_default_pad+0x168>)
    4a60:	e792      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a62:	481d      	ldr	r0, [pc, #116]	; (4ad8 <_sercom_get_default_pad+0x16c>)
    4a64:	e790      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a66:	481d      	ldr	r0, [pc, #116]	; (4adc <_sercom_get_default_pad+0x170>)
    4a68:	e78e      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a6a:	481d      	ldr	r0, [pc, #116]	; (4ae0 <_sercom_get_default_pad+0x174>)
    4a6c:	e78c      	b.n	4988 <_sercom_get_default_pad+0x1c>
    4a6e:	46c0      	nop			; (mov r8, r8)
    4a70:	42001000 	.word	0x42001000
    4a74:	42001800 	.word	0x42001800
    4a78:	42001c00 	.word	0x42001c00
    4a7c:	42001400 	.word	0x42001400
    4a80:	42000800 	.word	0x42000800
    4a84:	42000c00 	.word	0x42000c00
    4a88:	00050003 	.word	0x00050003
    4a8c:	00060003 	.word	0x00060003
    4a90:	00070003 	.word	0x00070003
    4a94:	00010003 	.word	0x00010003
    4a98:	001e0003 	.word	0x001e0003
    4a9c:	001f0003 	.word	0x001f0003
    4aa0:	00090003 	.word	0x00090003
    4aa4:	000a0003 	.word	0x000a0003
    4aa8:	000b0003 	.word	0x000b0003
    4aac:	00110003 	.word	0x00110003
    4ab0:	00120003 	.word	0x00120003
    4ab4:	00130003 	.word	0x00130003
    4ab8:	000d0003 	.word	0x000d0003
    4abc:	000e0003 	.word	0x000e0003
    4ac0:	000f0003 	.word	0x000f0003
    4ac4:	00170003 	.word	0x00170003
    4ac8:	00180003 	.word	0x00180003
    4acc:	00190003 	.word	0x00190003
    4ad0:	00040003 	.word	0x00040003
    4ad4:	00080003 	.word	0x00080003
    4ad8:	00100003 	.word	0x00100003
    4adc:	000c0003 	.word	0x000c0003
    4ae0:	00160003 	.word	0x00160003

00004ae4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4ae4:	b530      	push	{r4, r5, lr}
    4ae6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4ae8:	4b0b      	ldr	r3, [pc, #44]	; (4b18 <_sercom_get_sercom_inst_index+0x34>)
    4aea:	466a      	mov	r2, sp
    4aec:	cb32      	ldmia	r3!, {r1, r4, r5}
    4aee:	c232      	stmia	r2!, {r1, r4, r5}
    4af0:	cb32      	ldmia	r3!, {r1, r4, r5}
    4af2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4af4:	9b00      	ldr	r3, [sp, #0]
    4af6:	4283      	cmp	r3, r0
    4af8:	d00b      	beq.n	4b12 <_sercom_get_sercom_inst_index+0x2e>
    4afa:	2301      	movs	r3, #1
    4afc:	009a      	lsls	r2, r3, #2
    4afe:	4669      	mov	r1, sp
    4b00:	5852      	ldr	r2, [r2, r1]
    4b02:	4282      	cmp	r2, r0
    4b04:	d006      	beq.n	4b14 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4b06:	3301      	adds	r3, #1
    4b08:	2b06      	cmp	r3, #6
    4b0a:	d1f7      	bne.n	4afc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4b0c:	2000      	movs	r0, #0
}
    4b0e:	b007      	add	sp, #28
    4b10:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4b12:	2300      	movs	r3, #0
			return i;
    4b14:	b2d8      	uxtb	r0, r3
    4b16:	e7fa      	b.n	4b0e <_sercom_get_sercom_inst_index+0x2a>
    4b18:	0000dcc4 	.word	0x0000dcc4

00004b1c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4b1c:	4770      	bx	lr
	...

00004b20 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4b20:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4b22:	4b0a      	ldr	r3, [pc, #40]	; (4b4c <_sercom_set_handler+0x2c>)
    4b24:	781b      	ldrb	r3, [r3, #0]
    4b26:	2b00      	cmp	r3, #0
    4b28:	d10c      	bne.n	4b44 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4b2a:	4f09      	ldr	r7, [pc, #36]	; (4b50 <_sercom_set_handler+0x30>)
    4b2c:	4e09      	ldr	r6, [pc, #36]	; (4b54 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4b2e:	4d0a      	ldr	r5, [pc, #40]	; (4b58 <_sercom_set_handler+0x38>)
    4b30:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4b32:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4b34:	195a      	adds	r2, r3, r5
    4b36:	6014      	str	r4, [r2, #0]
    4b38:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4b3a:	2b18      	cmp	r3, #24
    4b3c:	d1f9      	bne.n	4b32 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4b3e:	2201      	movs	r2, #1
    4b40:	4b02      	ldr	r3, [pc, #8]	; (4b4c <_sercom_set_handler+0x2c>)
    4b42:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4b44:	0080      	lsls	r0, r0, #2
    4b46:	4b02      	ldr	r3, [pc, #8]	; (4b50 <_sercom_set_handler+0x30>)
    4b48:	50c1      	str	r1, [r0, r3]
}
    4b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b4c:	200003c6 	.word	0x200003c6
    4b50:	200003c8 	.word	0x200003c8
    4b54:	00004b1d 	.word	0x00004b1d
    4b58:	20001050 	.word	0x20001050

00004b5c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4b5c:	b500      	push	{lr}
    4b5e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4b60:	2309      	movs	r3, #9
    4b62:	466a      	mov	r2, sp
    4b64:	7013      	strb	r3, [r2, #0]
    4b66:	3301      	adds	r3, #1
    4b68:	7053      	strb	r3, [r2, #1]
    4b6a:	3301      	adds	r3, #1
    4b6c:	7093      	strb	r3, [r2, #2]
    4b6e:	3301      	adds	r3, #1
    4b70:	70d3      	strb	r3, [r2, #3]
    4b72:	3301      	adds	r3, #1
    4b74:	7113      	strb	r3, [r2, #4]
    4b76:	3301      	adds	r3, #1
    4b78:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4b7a:	4b03      	ldr	r3, [pc, #12]	; (4b88 <_sercom_get_interrupt_vector+0x2c>)
    4b7c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4b7e:	466b      	mov	r3, sp
    4b80:	5618      	ldrsb	r0, [r3, r0]
}
    4b82:	b003      	add	sp, #12
    4b84:	bd00      	pop	{pc}
    4b86:	46c0      	nop			; (mov r8, r8)
    4b88:	00004ae5 	.word	0x00004ae5

00004b8c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4b8c:	b510      	push	{r4, lr}
    4b8e:	4b02      	ldr	r3, [pc, #8]	; (4b98 <SERCOM0_Handler+0xc>)
    4b90:	681b      	ldr	r3, [r3, #0]
    4b92:	2000      	movs	r0, #0
    4b94:	4798      	blx	r3
    4b96:	bd10      	pop	{r4, pc}
    4b98:	200003c8 	.word	0x200003c8

00004b9c <SERCOM1_Handler>:
    4b9c:	b510      	push	{r4, lr}
    4b9e:	4b02      	ldr	r3, [pc, #8]	; (4ba8 <SERCOM1_Handler+0xc>)
    4ba0:	685b      	ldr	r3, [r3, #4]
    4ba2:	2001      	movs	r0, #1
    4ba4:	4798      	blx	r3
    4ba6:	bd10      	pop	{r4, pc}
    4ba8:	200003c8 	.word	0x200003c8

00004bac <SERCOM2_Handler>:
    4bac:	b510      	push	{r4, lr}
    4bae:	4b02      	ldr	r3, [pc, #8]	; (4bb8 <SERCOM2_Handler+0xc>)
    4bb0:	689b      	ldr	r3, [r3, #8]
    4bb2:	2002      	movs	r0, #2
    4bb4:	4798      	blx	r3
    4bb6:	bd10      	pop	{r4, pc}
    4bb8:	200003c8 	.word	0x200003c8

00004bbc <SERCOM3_Handler>:
    4bbc:	b510      	push	{r4, lr}
    4bbe:	4b02      	ldr	r3, [pc, #8]	; (4bc8 <SERCOM3_Handler+0xc>)
    4bc0:	68db      	ldr	r3, [r3, #12]
    4bc2:	2003      	movs	r0, #3
    4bc4:	4798      	blx	r3
    4bc6:	bd10      	pop	{r4, pc}
    4bc8:	200003c8 	.word	0x200003c8

00004bcc <SERCOM4_Handler>:
    4bcc:	b510      	push	{r4, lr}
    4bce:	4b02      	ldr	r3, [pc, #8]	; (4bd8 <SERCOM4_Handler+0xc>)
    4bd0:	691b      	ldr	r3, [r3, #16]
    4bd2:	2004      	movs	r0, #4
    4bd4:	4798      	blx	r3
    4bd6:	bd10      	pop	{r4, pc}
    4bd8:	200003c8 	.word	0x200003c8

00004bdc <SERCOM5_Handler>:
    4bdc:	b510      	push	{r4, lr}
    4bde:	4b02      	ldr	r3, [pc, #8]	; (4be8 <SERCOM5_Handler+0xc>)
    4be0:	695b      	ldr	r3, [r3, #20]
    4be2:	2005      	movs	r0, #5
    4be4:	4798      	blx	r3
    4be6:	bd10      	pop	{r4, pc}
    4be8:	200003c8 	.word	0x200003c8

00004bec <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    4bec:	b570      	push	{r4, r5, r6, lr}
    4bee:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4bf0:	6804      	ldr	r4, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4bf2:	0020      	movs	r0, r4
    4bf4:	4b0e      	ldr	r3, [pc, #56]	; (4c30 <spi_reset+0x44>)
    4bf6:	4798      	blx	r3
    4bf8:	231f      	movs	r3, #31
    4bfa:	4018      	ands	r0, r3
    4bfc:	3b1e      	subs	r3, #30
    4bfe:	4083      	lsls	r3, r0
    4c00:	2280      	movs	r2, #128	; 0x80
    4c02:	490c      	ldr	r1, [pc, #48]	; (4c34 <spi_reset+0x48>)
    4c04:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4c06:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4c08:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d1fc      	bne.n	4c08 <spi_reset+0x1c>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4c0e:	338f      	adds	r3, #143	; 0x8f
    4c10:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4c12:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4c14:	6823      	ldr	r3, [r4, #0]
    4c16:	2202      	movs	r2, #2
    4c18:	4393      	bics	r3, r2
    4c1a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4c1c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4c1e:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4c20:	2b00      	cmp	r3, #0
    4c22:	d1fc      	bne.n	4c1e <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    4c24:	6823      	ldr	r3, [r4, #0]
    4c26:	2201      	movs	r2, #1
    4c28:	4313      	orrs	r3, r2
    4c2a:	6023      	str	r3, [r4, #0]
}
    4c2c:	bd70      	pop	{r4, r5, r6, pc}
    4c2e:	46c0      	nop			; (mov r8, r8)
    4c30:	00004b5d 	.word	0x00004b5d
    4c34:	e000e100 	.word	0xe000e100

00004c38 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4c38:	b570      	push	{r4, r5, r6, lr}
    4c3a:	b082      	sub	sp, #8
    4c3c:	0005      	movs	r5, r0
    4c3e:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4c40:	2200      	movs	r2, #0
    4c42:	466b      	mov	r3, sp
    4c44:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4c46:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4c48:	0030      	movs	r0, r6
    4c4a:	4b24      	ldr	r3, [pc, #144]	; (4cdc <spi_set_baudrate+0xa4>)
    4c4c:	4798      	blx	r3
    4c4e:	231f      	movs	r3, #31
    4c50:	4018      	ands	r0, r3
    4c52:	3b1e      	subs	r3, #30
    4c54:	4083      	lsls	r3, r0
    4c56:	2280      	movs	r2, #128	; 0x80
    4c58:	4921      	ldr	r1, [pc, #132]	; (4ce0 <spi_set_baudrate+0xa8>)
    4c5a:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4c5c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4c5e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4c60:	2b00      	cmp	r3, #0
    4c62:	d1fc      	bne.n	4c5e <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4c64:	338f      	adds	r3, #143	; 0x8f
    4c66:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4c68:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4c6a:	6833      	ldr	r3, [r6, #0]
    4c6c:	2202      	movs	r2, #2
    4c6e:	4393      	bics	r3, r2
    4c70:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4c72:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4c74:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4c76:	2b00      	cmp	r3, #0
    4c78:	d1fc      	bne.n	4c74 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4c7a:	4b1a      	ldr	r3, [pc, #104]	; (4ce4 <spi_set_baudrate+0xac>)
    4c7c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4c7e:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4c80:	b2c0      	uxtb	r0, r0
    4c82:	4b19      	ldr	r3, [pc, #100]	; (4ce8 <spi_set_baudrate+0xb0>)
    4c84:	4798      	blx	r3
    4c86:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4c88:	466b      	mov	r3, sp
    4c8a:	1d9a      	adds	r2, r3, #6
    4c8c:	0020      	movs	r0, r4
    4c8e:	4b17      	ldr	r3, [pc, #92]	; (4cec <spi_set_baudrate+0xb4>)
    4c90:	4798      	blx	r3
    4c92:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4c94:	d003      	beq.n	4c9e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4c96:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    4c98:	0020      	movs	r0, r4
    4c9a:	b002      	add	sp, #8
    4c9c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    4c9e:	466b      	mov	r3, sp
    4ca0:	3306      	adds	r3, #6
    4ca2:	781b      	ldrb	r3, [r3, #0]
    4ca4:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4ca6:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4ca8:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    4caa:	2b00      	cmp	r3, #0
    4cac:	d1fc      	bne.n	4ca8 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4cae:	0030      	movs	r0, r6
    4cb0:	4b0a      	ldr	r3, [pc, #40]	; (4cdc <spi_set_baudrate+0xa4>)
    4cb2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4cb4:	231f      	movs	r3, #31
    4cb6:	4018      	ands	r0, r3
    4cb8:	3b1e      	subs	r3, #30
    4cba:	4083      	lsls	r3, r0
    4cbc:	4a08      	ldr	r2, [pc, #32]	; (4ce0 <spi_set_baudrate+0xa8>)
    4cbe:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4cc0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4cc2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4cc4:	2b00      	cmp	r3, #0
    4cc6:	d1fc      	bne.n	4cc2 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4cc8:	6833      	ldr	r3, [r6, #0]
    4cca:	2202      	movs	r2, #2
    4ccc:	4313      	orrs	r3, r2
    4cce:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4cd0:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4cd2:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d1fc      	bne.n	4cd2 <spi_set_baudrate+0x9a>
    4cd8:	e7de      	b.n	4c98 <spi_set_baudrate+0x60>
    4cda:	46c0      	nop			; (mov r8, r8)
    4cdc:	00004b5d 	.word	0x00004b5d
    4ce0:	e000e100 	.word	0xe000e100
    4ce4:	00004ae5 	.word	0x00004ae5
    4ce8:	00005f05 	.word	0x00005f05
    4cec:	00004863 	.word	0x00004863

00004cf0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cf2:	b08b      	sub	sp, #44	; 0x2c
    4cf4:	0005      	movs	r5, r0
    4cf6:	000c      	movs	r4, r1
    4cf8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4cfa:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4cfc:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4cfe:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4d00:	079b      	lsls	r3, r3, #30
    4d02:	d501      	bpl.n	4d08 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4d04:	b00b      	add	sp, #44	; 0x2c
    4d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4d08:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4d0a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4d0c:	07db      	lsls	r3, r3, #31
    4d0e:	d4f9      	bmi.n	4d04 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4d10:	0008      	movs	r0, r1
    4d12:	4b60      	ldr	r3, [pc, #384]	; (4e94 <spi_init+0x1a4>)
    4d14:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4d16:	4a60      	ldr	r2, [pc, #384]	; (4e98 <spi_init+0x1a8>)
    4d18:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4d1a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4d1c:	2301      	movs	r3, #1
    4d1e:	40bb      	lsls	r3, r7
    4d20:	430b      	orrs	r3, r1
    4d22:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4d24:	a909      	add	r1, sp, #36	; 0x24
    4d26:	2724      	movs	r7, #36	; 0x24
    4d28:	5df3      	ldrb	r3, [r6, r7]
    4d2a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4d2c:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4d2e:	b2c3      	uxtb	r3, r0
    4d30:	9301      	str	r3, [sp, #4]
    4d32:	0018      	movs	r0, r3
    4d34:	4b59      	ldr	r3, [pc, #356]	; (4e9c <spi_init+0x1ac>)
    4d36:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4d38:	9801      	ldr	r0, [sp, #4]
    4d3a:	4b59      	ldr	r3, [pc, #356]	; (4ea0 <spi_init+0x1b0>)
    4d3c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4d3e:	5df0      	ldrb	r0, [r6, r7]
    4d40:	2100      	movs	r1, #0
    4d42:	4b58      	ldr	r3, [pc, #352]	; (4ea4 <spi_init+0x1b4>)
    4d44:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4d46:	7833      	ldrb	r3, [r6, #0]
    4d48:	2b01      	cmp	r3, #1
    4d4a:	d038      	beq.n	4dbe <spi_init+0xce>
    4d4c:	002b      	movs	r3, r5
    4d4e:	330c      	adds	r3, #12
    4d50:	0029      	movs	r1, r5
    4d52:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4d54:	2200      	movs	r2, #0
    4d56:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4d58:	428b      	cmp	r3, r1
    4d5a:	d1fc      	bne.n	4d56 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4d5c:	2300      	movs	r3, #0
    4d5e:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4d60:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4d62:	2400      	movs	r4, #0
    4d64:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4d66:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4d68:	3336      	adds	r3, #54	; 0x36
    4d6a:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4d6c:	3301      	adds	r3, #1
    4d6e:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4d70:	3301      	adds	r3, #1
    4d72:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4d74:	3b35      	subs	r3, #53	; 0x35
    4d76:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4d78:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4d7a:	6828      	ldr	r0, [r5, #0]
    4d7c:	4b45      	ldr	r3, [pc, #276]	; (4e94 <spi_init+0x1a4>)
    4d7e:	4798      	blx	r3
    4d80:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4d82:	4949      	ldr	r1, [pc, #292]	; (4ea8 <spi_init+0x1b8>)
    4d84:	4b49      	ldr	r3, [pc, #292]	; (4eac <spi_init+0x1bc>)
    4d86:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4d88:	00bf      	lsls	r7, r7, #2
    4d8a:	4b49      	ldr	r3, [pc, #292]	; (4eb0 <spi_init+0x1c0>)
    4d8c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d8e:	682f      	ldr	r7, [r5, #0]
    4d90:	ab04      	add	r3, sp, #16
    4d92:	2280      	movs	r2, #128	; 0x80
    4d94:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4d96:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4d98:	3a7f      	subs	r2, #127	; 0x7f
    4d9a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4d9c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4d9e:	7833      	ldrb	r3, [r6, #0]
    4da0:	2b00      	cmp	r3, #0
    4da2:	d102      	bne.n	4daa <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4da4:	2200      	movs	r2, #0
    4da6:	ab04      	add	r3, sp, #16
    4da8:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4daa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4dac:	9305      	str	r3, [sp, #20]
    4dae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4db0:	9306      	str	r3, [sp, #24]
    4db2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4db4:	9307      	str	r3, [sp, #28]
    4db6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4db8:	9308      	str	r3, [sp, #32]
    4dba:	2400      	movs	r4, #0
    4dbc:	e00b      	b.n	4dd6 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4dbe:	6823      	ldr	r3, [r4, #0]
    4dc0:	220c      	movs	r2, #12
    4dc2:	4313      	orrs	r3, r2
    4dc4:	6023      	str	r3, [r4, #0]
    4dc6:	e7c1      	b.n	4d4c <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4dc8:	0038      	movs	r0, r7
    4dca:	4b3a      	ldr	r3, [pc, #232]	; (4eb4 <spi_init+0x1c4>)
    4dcc:	4798      	blx	r3
    4dce:	e00a      	b.n	4de6 <spi_init+0xf6>
    4dd0:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4dd2:	2c04      	cmp	r4, #4
    4dd4:	d010      	beq.n	4df8 <spi_init+0x108>
    4dd6:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4dd8:	00a3      	lsls	r3, r4, #2
    4dda:	aa02      	add	r2, sp, #8
    4ddc:	200c      	movs	r0, #12
    4dde:	1812      	adds	r2, r2, r0
    4de0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4de2:	2800      	cmp	r0, #0
    4de4:	d0f0      	beq.n	4dc8 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    4de6:	1c43      	adds	r3, r0, #1
    4de8:	d0f2      	beq.n	4dd0 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4dea:	a904      	add	r1, sp, #16
    4dec:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4dee:	0c00      	lsrs	r0, r0, #16
    4df0:	b2c0      	uxtb	r0, r0
    4df2:	4b31      	ldr	r3, [pc, #196]	; (4eb8 <spi_init+0x1c8>)
    4df4:	4798      	blx	r3
    4df6:	e7eb      	b.n	4dd0 <spi_init+0xe0>
	module->mode             = config->mode;
    4df8:	7833      	ldrb	r3, [r6, #0]
    4dfa:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4dfc:	7c33      	ldrb	r3, [r6, #16]
    4dfe:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4e00:	7cb3      	ldrb	r3, [r6, #18]
    4e02:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4e04:	7d33      	ldrb	r3, [r6, #20]
    4e06:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4e08:	2200      	movs	r2, #0
    4e0a:	ab02      	add	r3, sp, #8
    4e0c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4e0e:	7833      	ldrb	r3, [r6, #0]
    4e10:	2b01      	cmp	r3, #1
    4e12:	d028      	beq.n	4e66 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4e14:	6873      	ldr	r3, [r6, #4]
    4e16:	68b2      	ldr	r2, [r6, #8]
    4e18:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4e1a:	68f2      	ldr	r2, [r6, #12]
    4e1c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4e1e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4e20:	7c72      	ldrb	r2, [r6, #17]
    4e22:	2a00      	cmp	r2, #0
    4e24:	d103      	bne.n	4e2e <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4e26:	4a25      	ldr	r2, [pc, #148]	; (4ebc <spi_init+0x1cc>)
    4e28:	7892      	ldrb	r2, [r2, #2]
    4e2a:	0792      	lsls	r2, r2, #30
    4e2c:	d501      	bpl.n	4e32 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4e2e:	2280      	movs	r2, #128	; 0x80
    4e30:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4e32:	7cb2      	ldrb	r2, [r6, #18]
    4e34:	2a00      	cmp	r2, #0
    4e36:	d002      	beq.n	4e3e <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4e38:	2280      	movs	r2, #128	; 0x80
    4e3a:	0292      	lsls	r2, r2, #10
    4e3c:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4e3e:	7cf2      	ldrb	r2, [r6, #19]
    4e40:	2a00      	cmp	r2, #0
    4e42:	d002      	beq.n	4e4a <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4e44:	2280      	movs	r2, #128	; 0x80
    4e46:	0092      	lsls	r2, r2, #2
    4e48:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4e4a:	7d32      	ldrb	r2, [r6, #20]
    4e4c:	2a00      	cmp	r2, #0
    4e4e:	d002      	beq.n	4e56 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4e50:	2280      	movs	r2, #128	; 0x80
    4e52:	0192      	lsls	r2, r2, #6
    4e54:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4e56:	683a      	ldr	r2, [r7, #0]
    4e58:	4313      	orrs	r3, r2
    4e5a:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4e5c:	687b      	ldr	r3, [r7, #4]
    4e5e:	430b      	orrs	r3, r1
    4e60:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    4e62:	2000      	movs	r0, #0
    4e64:	e74e      	b.n	4d04 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4e66:	6828      	ldr	r0, [r5, #0]
    4e68:	4b0a      	ldr	r3, [pc, #40]	; (4e94 <spi_init+0x1a4>)
    4e6a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e6c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4e6e:	b2c0      	uxtb	r0, r0
    4e70:	4b13      	ldr	r3, [pc, #76]	; (4ec0 <spi_init+0x1d0>)
    4e72:	4798      	blx	r3
    4e74:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4e76:	ab02      	add	r3, sp, #8
    4e78:	1d9a      	adds	r2, r3, #6
    4e7a:	69b0      	ldr	r0, [r6, #24]
    4e7c:	4b11      	ldr	r3, [pc, #68]	; (4ec4 <spi_init+0x1d4>)
    4e7e:	4798      	blx	r3
    4e80:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4e82:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4e84:	2b00      	cmp	r3, #0
    4e86:	d000      	beq.n	4e8a <spi_init+0x19a>
    4e88:	e73c      	b.n	4d04 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4e8a:	ab02      	add	r3, sp, #8
    4e8c:	3306      	adds	r3, #6
    4e8e:	781b      	ldrb	r3, [r3, #0]
    4e90:	733b      	strb	r3, [r7, #12]
    4e92:	e7bf      	b.n	4e14 <spi_init+0x124>
    4e94:	00004ae5 	.word	0x00004ae5
    4e98:	40000400 	.word	0x40000400
    4e9c:	00005ee9 	.word	0x00005ee9
    4ea0:	00005e5d 	.word	0x00005e5d
    4ea4:	00004921 	.word	0x00004921
    4ea8:	0000515d 	.word	0x0000515d
    4eac:	00004b21 	.word	0x00004b21
    4eb0:	20001050 	.word	0x20001050
    4eb4:	0000496d 	.word	0x0000496d
    4eb8:	00005fe1 	.word	0x00005fe1
    4ebc:	41002000 	.word	0x41002000
    4ec0:	00005f05 	.word	0x00005f05
    4ec4:	00004863 	.word	0x00004863

00004ec8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eca:	46d6      	mov	lr, sl
    4ecc:	4647      	mov	r7, r8
    4ece:	b580      	push	{r7, lr}
    4ed0:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4ed2:	2438      	movs	r4, #56	; 0x38
    4ed4:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4ed6:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    4ed8:	2d05      	cmp	r5, #5
    4eda:	d002      	beq.n	4ee2 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4edc:	3412      	adds	r4, #18
	if (length == 0) {
    4ede:	2a00      	cmp	r2, #0
    4ee0:	d105      	bne.n	4eee <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    4ee2:	0020      	movs	r0, r4
    4ee4:	b003      	add	sp, #12
    4ee6:	bc0c      	pop	{r2, r3}
    4ee8:	4690      	mov	r8, r2
    4eea:	469a      	mov	sl, r3
    4eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    4eee:	79c4      	ldrb	r4, [r0, #7]
    4ef0:	2c00      	cmp	r4, #0
    4ef2:	d144      	bne.n	4f7e <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    4ef4:	341c      	adds	r4, #28
    4ef6:	e7f4      	b.n	4ee2 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4ef8:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4efa:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    4efc:	423c      	tst	r4, r7
    4efe:	d0fc      	beq.n	4efa <spi_read_buffer_wait+0x32>
    4f00:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    4f02:	423c      	tst	r4, r7
    4f04:	d01a      	beq.n	4f3c <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4f06:	4644      	mov	r4, r8
    4f08:	62ac      	str	r4, [r5, #40]	; 0x28
    4f0a:	e017      	b.n	4f3c <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f0c:	7984      	ldrb	r4, [r0, #6]
    4f0e:	2c01      	cmp	r4, #1
    4f10:	d026      	beq.n	4f60 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4f12:	6aad      	ldr	r5, [r5, #40]	; 0x28
    4f14:	b2ec      	uxtb	r4, r5
    4f16:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    4f18:	9c01      	ldr	r4, [sp, #4]
    4f1a:	2c00      	cmp	r4, #0
    4f1c:	d13a      	bne.n	4f94 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    4f1e:	1c75      	adds	r5, r6, #1
    4f20:	b2ad      	uxth	r5, r5
    4f22:	4664      	mov	r4, ip
    4f24:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4f26:	7984      	ldrb	r4, [r0, #6]
    4f28:	2c01      	cmp	r4, #1
    4f2a:	d01e      	beq.n	4f6a <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    4f2c:	002e      	movs	r6, r5
	while (length--) {
    4f2e:	3a01      	subs	r2, #1
    4f30:	b292      	uxth	r2, r2
    4f32:	4552      	cmp	r2, sl
    4f34:	d01f      	beq.n	4f76 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    4f36:	7944      	ldrb	r4, [r0, #5]
    4f38:	2c01      	cmp	r4, #1
    4f3a:	d0dd      	beq.n	4ef8 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4f3c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4f3e:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    4f40:	421c      	tst	r4, r3
    4f42:	d0fc      	beq.n	4f3e <spi_read_buffer_wait+0x76>
    4f44:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    4f46:	421c      	tst	r4, r3
    4f48:	d017      	beq.n	4f7a <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f4a:	8b6c      	ldrh	r4, [r5, #26]
    4f4c:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    4f4e:	2400      	movs	r4, #0
    4f50:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4f52:	4664      	mov	r4, ip
    4f54:	421c      	tst	r4, r3
    4f56:	d0d9      	beq.n	4f0c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4f58:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    4f5a:	241e      	movs	r4, #30
    4f5c:	9401      	str	r4, [sp, #4]
    4f5e:	e7d5      	b.n	4f0c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4f60:	6aac      	ldr	r4, [r5, #40]	; 0x28
    4f62:	05e4      	lsls	r4, r4, #23
    4f64:	0de4      	lsrs	r4, r4, #23
    4f66:	46a4      	mov	ip, r4
    4f68:	e7d6      	b.n	4f18 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    4f6a:	3602      	adds	r6, #2
    4f6c:	b2b6      	uxth	r6, r6
    4f6e:	4664      	mov	r4, ip
    4f70:	0a24      	lsrs	r4, r4, #8
    4f72:	554c      	strb	r4, [r1, r5]
    4f74:	e7db      	b.n	4f2e <spi_read_buffer_wait+0x66>
    4f76:	9c01      	ldr	r4, [sp, #4]
    4f78:	e7b3      	b.n	4ee2 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    4f7a:	2410      	movs	r4, #16
    4f7c:	e7b1      	b.n	4ee2 <spi_read_buffer_wait+0x1a>
	while (length--) {
    4f7e:	3a01      	subs	r2, #1
    4f80:	b292      	uxth	r2, r2
    4f82:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    4f84:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4f86:	05db      	lsls	r3, r3, #23
    4f88:	0ddb      	lsrs	r3, r3, #23
    4f8a:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    4f8c:	2304      	movs	r3, #4
	while (length--) {
    4f8e:	4c02      	ldr	r4, [pc, #8]	; (4f98 <spi_read_buffer_wait+0xd0>)
    4f90:	46a2      	mov	sl, r4
    4f92:	e7d0      	b.n	4f36 <spi_read_buffer_wait+0x6e>
    4f94:	9c01      	ldr	r4, [sp, #4]
    4f96:	e7a4      	b.n	4ee2 <spi_read_buffer_wait+0x1a>
    4f98:	0000ffff 	.word	0x0000ffff

00004f9c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4f9c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4f9e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4fa0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    4fa2:	2c01      	cmp	r4, #1
    4fa4:	d001      	beq.n	4faa <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    4fa6:	0018      	movs	r0, r3
    4fa8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    4faa:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    4fac:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    4fae:	2c00      	cmp	r4, #0
    4fb0:	d1f9      	bne.n	4fa6 <spi_select_slave+0xa>
		if (select) {
    4fb2:	2a00      	cmp	r2, #0
    4fb4:	d058      	beq.n	5068 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    4fb6:	784b      	ldrb	r3, [r1, #1]
    4fb8:	2b00      	cmp	r3, #0
    4fba:	d044      	beq.n	5046 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4fbc:	6803      	ldr	r3, [r0, #0]
    4fbe:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4fc0:	07db      	lsls	r3, r3, #31
    4fc2:	d410      	bmi.n	4fe6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4fc4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4fc6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4fc8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4fca:	2900      	cmp	r1, #0
    4fcc:	d104      	bne.n	4fd8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4fce:	0953      	lsrs	r3, r2, #5
    4fd0:	01db      	lsls	r3, r3, #7
    4fd2:	492e      	ldr	r1, [pc, #184]	; (508c <spi_select_slave+0xf0>)
    4fd4:	468c      	mov	ip, r1
    4fd6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4fd8:	211f      	movs	r1, #31
    4fda:	4011      	ands	r1, r2
    4fdc:	2201      	movs	r2, #1
    4fde:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4fe0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4fe2:	2305      	movs	r3, #5
    4fe4:	e7df      	b.n	4fa6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4fe6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4fe8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    4fea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4fec:	2c00      	cmp	r4, #0
    4fee:	d104      	bne.n	4ffa <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4ff0:	0953      	lsrs	r3, r2, #5
    4ff2:	01db      	lsls	r3, r3, #7
    4ff4:	4c25      	ldr	r4, [pc, #148]	; (508c <spi_select_slave+0xf0>)
    4ff6:	46a4      	mov	ip, r4
    4ff8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4ffa:	241f      	movs	r4, #31
    4ffc:	4014      	ands	r4, r2
    4ffe:	2201      	movs	r2, #1
    5000:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    5002:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5004:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5006:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5008:	07d2      	lsls	r2, r2, #31
    500a:	d501      	bpl.n	5010 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    500c:	788a      	ldrb	r2, [r1, #2]
    500e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    5010:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    5012:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    5014:	2a00      	cmp	r2, #0
    5016:	d1c6      	bne.n	4fa6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5018:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    501a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    501c:	7e13      	ldrb	r3, [r2, #24]
    501e:	420b      	tst	r3, r1
    5020:	d0fc      	beq.n	501c <spi_select_slave+0x80>
    5022:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5024:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    5026:	0749      	lsls	r1, r1, #29
    5028:	d5bd      	bpl.n	4fa6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    502a:	8b53      	ldrh	r3, [r2, #26]
    502c:	075b      	lsls	r3, r3, #29
    502e:	d501      	bpl.n	5034 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5030:	2304      	movs	r3, #4
    5032:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5034:	7983      	ldrb	r3, [r0, #6]
    5036:	2b01      	cmp	r3, #1
    5038:	d002      	beq.n	5040 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    503a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    503c:	2300      	movs	r3, #0
    503e:	e7b2      	b.n	4fa6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5040:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5042:	2300      	movs	r3, #0
    5044:	e7af      	b.n	4fa6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    5046:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    5048:	09d1      	lsrs	r1, r2, #7
		return NULL;
    504a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    504c:	2900      	cmp	r1, #0
    504e:	d104      	bne.n	505a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5050:	0953      	lsrs	r3, r2, #5
    5052:	01db      	lsls	r3, r3, #7
    5054:	490d      	ldr	r1, [pc, #52]	; (508c <spi_select_slave+0xf0>)
    5056:	468c      	mov	ip, r1
    5058:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    505a:	211f      	movs	r1, #31
    505c:	4011      	ands	r1, r2
    505e:	2201      	movs	r2, #1
    5060:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5062:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5064:	2300      	movs	r3, #0
    5066:	e79e      	b.n	4fa6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    5068:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    506a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    506c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    506e:	2900      	cmp	r1, #0
    5070:	d104      	bne.n	507c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5072:	0953      	lsrs	r3, r2, #5
    5074:	01db      	lsls	r3, r3, #7
    5076:	4905      	ldr	r1, [pc, #20]	; (508c <spi_select_slave+0xf0>)
    5078:	468c      	mov	ip, r1
    507a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    507c:	211f      	movs	r1, #31
    507e:	4011      	ands	r1, r2
    5080:	2201      	movs	r2, #1
    5082:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5084:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    5086:	2300      	movs	r3, #0
    5088:	e78d      	b.n	4fa6 <spi_select_slave+0xa>
    508a:	46c0      	nop			; (mov r8, r8)
    508c:	41004400 	.word	0x41004400

00005090 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5090:	b5f0      	push	{r4, r5, r6, r7, lr}
    5092:	46de      	mov	lr, fp
    5094:	4657      	mov	r7, sl
    5096:	464e      	mov	r6, r9
    5098:	4645      	mov	r5, r8
    509a:	b5e0      	push	{r5, r6, r7, lr}
    509c:	b083      	sub	sp, #12
    509e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    50a0:	2338      	movs	r3, #56	; 0x38
    50a2:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    50a4:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    50a6:	2c05      	cmp	r4, #5
    50a8:	d002      	beq.n	50b0 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    50aa:	3312      	adds	r3, #18
	if (length == 0) {
    50ac:	2a00      	cmp	r2, #0
    50ae:	d14b      	bne.n	5148 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    50b0:	0018      	movs	r0, r3
    50b2:	b003      	add	sp, #12
    50b4:	bc3c      	pop	{r2, r3, r4, r5}
    50b6:	4690      	mov	r8, r2
    50b8:	4699      	mov	r9, r3
    50ba:	46a2      	mov	sl, r4
    50bc:	46ab      	mov	fp, r5
    50be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    50c0:	3702      	adds	r7, #2
    50c2:	b2bf      	uxth	r7, r7
    50c4:	4641      	mov	r1, r8
    50c6:	4653      	mov	r3, sl
    50c8:	5c59      	ldrb	r1, [r3, r1]
    50ca:	0209      	lsls	r1, r1, #8
    50cc:	465b      	mov	r3, fp
    50ce:	430b      	orrs	r3, r1
    50d0:	e018      	b.n	5104 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    50d2:	7983      	ldrb	r3, [r0, #6]
    50d4:	2b01      	cmp	r3, #1
    50d6:	d02a      	beq.n	512e <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    50d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    50da:	3e01      	subs	r6, #1
    50dc:	b2b6      	uxth	r6, r6
    50de:	4566      	cmp	r6, ip
    50e0:	d027      	beq.n	5132 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    50e2:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    50e4:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    50e6:	4223      	tst	r3, r4
    50e8:	d0fc      	beq.n	50e4 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    50ea:	1c7b      	adds	r3, r7, #1
    50ec:	b29b      	uxth	r3, r3
    50ee:	4698      	mov	r8, r3
    50f0:	4653      	mov	r3, sl
    50f2:	5ddb      	ldrb	r3, [r3, r7]
    50f4:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    50f6:	7981      	ldrb	r1, [r0, #6]
    50f8:	2901      	cmp	r1, #1
    50fa:	d0e1      	beq.n	50c0 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    50fc:	4669      	mov	r1, sp
    50fe:	80cb      	strh	r3, [r1, #6]
    5100:	88cb      	ldrh	r3, [r1, #6]
    5102:	4647      	mov	r7, r8
    5104:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    5106:	4221      	tst	r1, r4
    5108:	d002      	beq.n	5110 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    510a:	05db      	lsls	r3, r3, #23
    510c:	0ddb      	lsrs	r3, r3, #23
    510e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    5110:	79c3      	ldrb	r3, [r0, #7]
    5112:	2b00      	cmp	r3, #0
    5114:	d0e1      	beq.n	50da <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5116:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5118:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    511a:	422b      	tst	r3, r5
    511c:	d0fc      	beq.n	5118 <spi_write_buffer_wait+0x88>
    511e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    5120:	422b      	tst	r3, r5
    5122:	d0da      	beq.n	50da <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5124:	8b53      	ldrh	r3, [r2, #26]
    5126:	422b      	tst	r3, r5
    5128:	d0d3      	beq.n	50d2 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    512a:	8355      	strh	r5, [r2, #26]
    512c:	e7d1      	b.n	50d2 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    512e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5130:	e7d3      	b.n	50da <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    5132:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    5134:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    5136:	2a01      	cmp	r2, #1
    5138:	d1ba      	bne.n	50b0 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    513a:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    513c:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    513e:	7e0b      	ldrb	r3, [r1, #24]
    5140:	4213      	tst	r3, r2
    5142:	d0fc      	beq.n	513e <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    5144:	2300      	movs	r3, #0
    5146:	e7b3      	b.n	50b0 <spi_write_buffer_wait+0x20>
	while (length--) {
    5148:	3a01      	subs	r2, #1
    514a:	b296      	uxth	r6, r2
    514c:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    514e:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    5150:	2504      	movs	r5, #4
	while (length--) {
    5152:	4b01      	ldr	r3, [pc, #4]	; (5158 <spi_write_buffer_wait+0xc8>)
    5154:	469c      	mov	ip, r3
    5156:	e7c4      	b.n	50e2 <spi_write_buffer_wait+0x52>
    5158:	0000ffff 	.word	0x0000ffff

0000515c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    515e:	0080      	lsls	r0, r0, #2
    5160:	4b70      	ldr	r3, [pc, #448]	; (5324 <_spi_interrupt_handler+0x1c8>)
    5162:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5164:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    5166:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    5168:	5ce7      	ldrb	r7, [r4, r3]
    516a:	2236      	movs	r2, #54	; 0x36
    516c:	5ca2      	ldrb	r2, [r4, r2]
    516e:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    5170:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    5172:	7db5      	ldrb	r5, [r6, #22]
    5174:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    5176:	07eb      	lsls	r3, r5, #31
    5178:	d502      	bpl.n	5180 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    517a:	7963      	ldrb	r3, [r4, #5]
    517c:	2b01      	cmp	r3, #1
    517e:	d01e      	beq.n	51be <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    5180:	076b      	lsls	r3, r5, #29
    5182:	d511      	bpl.n	51a8 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5184:	8b73      	ldrh	r3, [r6, #26]
    5186:	075b      	lsls	r3, r3, #29
    5188:	d55a      	bpl.n	5240 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    518a:	7a63      	ldrb	r3, [r4, #9]
    518c:	2b01      	cmp	r3, #1
    518e:	d008      	beq.n	51a2 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5190:	221e      	movs	r2, #30
    5192:	2338      	movs	r3, #56	; 0x38
    5194:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    5196:	3b35      	subs	r3, #53	; 0x35
    5198:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    519a:	3302      	adds	r3, #2
    519c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    519e:	073b      	lsls	r3, r7, #28
    51a0:	d44a      	bmi.n	5238 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    51a2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    51a4:	2304      	movs	r3, #4
    51a6:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    51a8:	07ab      	lsls	r3, r5, #30
    51aa:	d503      	bpl.n	51b4 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    51ac:	7963      	ldrb	r3, [r4, #5]
    51ae:	2b01      	cmp	r3, #1
    51b0:	d100      	bne.n	51b4 <_spi_interrupt_handler+0x58>
    51b2:	e097      	b.n	52e4 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    51b4:	b26d      	sxtb	r5, r5
    51b6:	2d00      	cmp	r5, #0
    51b8:	da00      	bge.n	51bc <_spi_interrupt_handler+0x60>
    51ba:	e0a9      	b.n	5310 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    51bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    51be:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    51c0:	2b00      	cmp	r3, #0
    51c2:	d022      	beq.n	520a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    51c4:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    51c6:	2b00      	cmp	r3, #0
    51c8:	d0da      	beq.n	5180 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    51ca:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    51cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51ce:	7813      	ldrb	r3, [r2, #0]
    51d0:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    51d2:	1c50      	adds	r0, r2, #1
    51d4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51d6:	79a0      	ldrb	r0, [r4, #6]
    51d8:	2801      	cmp	r0, #1
    51da:	d027      	beq.n	522c <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    51dc:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    51de:	05db      	lsls	r3, r3, #23
    51e0:	0ddb      	lsrs	r3, r3, #23
    51e2:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    51e4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    51e6:	3b01      	subs	r3, #1
    51e8:	b29b      	uxth	r3, r3
    51ea:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    51ec:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    51ee:	b29b      	uxth	r3, r3
    51f0:	2b00      	cmp	r3, #0
    51f2:	d1c5      	bne.n	5180 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    51f4:	3301      	adds	r3, #1
    51f6:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    51f8:	7a63      	ldrb	r3, [r4, #9]
    51fa:	2b01      	cmp	r3, #1
    51fc:	d1c0      	bne.n	5180 <_spi_interrupt_handler+0x24>
    51fe:	79e3      	ldrb	r3, [r4, #7]
    5200:	2b00      	cmp	r3, #0
    5202:	d1bd      	bne.n	5180 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5204:	3302      	adds	r3, #2
    5206:	75b3      	strb	r3, [r6, #22]
    5208:	e7ba      	b.n	5180 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    520a:	4b47      	ldr	r3, [pc, #284]	; (5328 <_spi_interrupt_handler+0x1cc>)
    520c:	881b      	ldrh	r3, [r3, #0]
    520e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    5210:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5212:	3b01      	subs	r3, #1
    5214:	b29b      	uxth	r3, r3
    5216:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    5218:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    521a:	b29b      	uxth	r3, r3
    521c:	2b00      	cmp	r3, #0
    521e:	d101      	bne.n	5224 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5220:	3301      	adds	r3, #1
    5222:	7533      	strb	r3, [r6, #20]
		if (0
    5224:	7963      	ldrb	r3, [r4, #5]
    5226:	2b01      	cmp	r3, #1
    5228:	d0cc      	beq.n	51c4 <_spi_interrupt_handler+0x68>
    522a:	e7a9      	b.n	5180 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    522c:	7850      	ldrb	r0, [r2, #1]
    522e:	0200      	lsls	r0, r0, #8
    5230:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    5232:	3202      	adds	r2, #2
    5234:	62e2      	str	r2, [r4, #44]	; 0x2c
    5236:	e7d2      	b.n	51de <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    5238:	0020      	movs	r0, r4
    523a:	69a3      	ldr	r3, [r4, #24]
    523c:	4798      	blx	r3
    523e:	e7b0      	b.n	51a2 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    5240:	7a63      	ldrb	r3, [r4, #9]
    5242:	2b01      	cmp	r3, #1
    5244:	d028      	beq.n	5298 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5246:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    5248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    524a:	05db      	lsls	r3, r3, #23
    524c:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    524e:	b2da      	uxtb	r2, r3
    5250:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5252:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    5254:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5256:	1c51      	adds	r1, r2, #1
    5258:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    525a:	79a1      	ldrb	r1, [r4, #6]
    525c:	2901      	cmp	r1, #1
    525e:	d034      	beq.n	52ca <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    5260:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    5262:	3b01      	subs	r3, #1
    5264:	b29b      	uxth	r3, r3
    5266:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    5268:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    526a:	b29b      	uxth	r3, r3
    526c:	2b00      	cmp	r3, #0
    526e:	d000      	beq.n	5272 <_spi_interrupt_handler+0x116>
    5270:	e79a      	b.n	51a8 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    5272:	2200      	movs	r2, #0
    5274:	3338      	adds	r3, #56	; 0x38
    5276:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5278:	3b34      	subs	r3, #52	; 0x34
    527a:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    527c:	7a63      	ldrb	r3, [r4, #9]
    527e:	2b02      	cmp	r3, #2
    5280:	d029      	beq.n	52d6 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    5282:	7a63      	ldrb	r3, [r4, #9]
    5284:	2b00      	cmp	r3, #0
    5286:	d000      	beq.n	528a <_spi_interrupt_handler+0x12e>
    5288:	e78e      	b.n	51a8 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    528a:	07bb      	lsls	r3, r7, #30
    528c:	d400      	bmi.n	5290 <_spi_interrupt_handler+0x134>
    528e:	e78b      	b.n	51a8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5290:	0020      	movs	r0, r4
    5292:	6923      	ldr	r3, [r4, #16]
    5294:	4798      	blx	r3
    5296:	e787      	b.n	51a8 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5298:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    529c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    529e:	3b01      	subs	r3, #1
    52a0:	b29b      	uxth	r3, r3
    52a2:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    52a4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    52a6:	b29b      	uxth	r3, r3
    52a8:	2b00      	cmp	r3, #0
    52aa:	d000      	beq.n	52ae <_spi_interrupt_handler+0x152>
    52ac:	e77c      	b.n	51a8 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    52ae:	3304      	adds	r3, #4
    52b0:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    52b2:	2200      	movs	r2, #0
    52b4:	3334      	adds	r3, #52	; 0x34
    52b6:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    52b8:	3b35      	subs	r3, #53	; 0x35
    52ba:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    52bc:	07fb      	lsls	r3, r7, #31
    52be:	d400      	bmi.n	52c2 <_spi_interrupt_handler+0x166>
    52c0:	e772      	b.n	51a8 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    52c2:	0020      	movs	r0, r4
    52c4:	68e3      	ldr	r3, [r4, #12]
    52c6:	4798      	blx	r3
    52c8:	e76e      	b.n	51a8 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    52ca:	0a1b      	lsrs	r3, r3, #8
    52cc:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    52ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    52d0:	3301      	adds	r3, #1
    52d2:	62a3      	str	r3, [r4, #40]	; 0x28
    52d4:	e7c4      	b.n	5260 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    52d6:	077b      	lsls	r3, r7, #29
    52d8:	d400      	bmi.n	52dc <_spi_interrupt_handler+0x180>
    52da:	e765      	b.n	51a8 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    52dc:	0020      	movs	r0, r4
    52de:	6963      	ldr	r3, [r4, #20]
    52e0:	4798      	blx	r3
    52e2:	e761      	b.n	51a8 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    52e4:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    52e6:	2b01      	cmp	r3, #1
    52e8:	d000      	beq.n	52ec <_spi_interrupt_handler+0x190>
    52ea:	e763      	b.n	51b4 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    52ec:	79e3      	ldrb	r3, [r4, #7]
    52ee:	2b00      	cmp	r3, #0
    52f0:	d000      	beq.n	52f4 <_spi_interrupt_handler+0x198>
    52f2:	e75f      	b.n	51b4 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    52f4:	3302      	adds	r3, #2
    52f6:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    52f8:	3301      	adds	r3, #1
    52fa:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    52fc:	2200      	movs	r2, #0
    52fe:	3335      	adds	r3, #53	; 0x35
    5300:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    5302:	07fb      	lsls	r3, r7, #31
    5304:	d400      	bmi.n	5308 <_spi_interrupt_handler+0x1ac>
    5306:	e755      	b.n	51b4 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    5308:	0020      	movs	r0, r4
    530a:	68e3      	ldr	r3, [r4, #12]
    530c:	4798      	blx	r3
    530e:	e751      	b.n	51b4 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5310:	2380      	movs	r3, #128	; 0x80
    5312:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5314:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    5316:	067b      	lsls	r3, r7, #25
    5318:	d400      	bmi.n	531c <_spi_interrupt_handler+0x1c0>
    531a:	e74f      	b.n	51bc <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    531c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    531e:	0020      	movs	r0, r4
    5320:	4798      	blx	r3
}
    5322:	e74b      	b.n	51bc <_spi_interrupt_handler+0x60>
    5324:	20001050 	.word	0x20001050
    5328:	20001068 	.word	0x20001068

0000532c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    532c:	b5f0      	push	{r4, r5, r6, r7, lr}
    532e:	46de      	mov	lr, fp
    5330:	4657      	mov	r7, sl
    5332:	464e      	mov	r6, r9
    5334:	4645      	mov	r5, r8
    5336:	b5e0      	push	{r5, r6, r7, lr}
    5338:	b091      	sub	sp, #68	; 0x44
    533a:	0005      	movs	r5, r0
    533c:	000c      	movs	r4, r1
    533e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5340:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5342:	0008      	movs	r0, r1
    5344:	4bbc      	ldr	r3, [pc, #752]	; (5638 <usart_init+0x30c>)
    5346:	4798      	blx	r3
    5348:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    534a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    534c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    534e:	07db      	lsls	r3, r3, #31
    5350:	d506      	bpl.n	5360 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5352:	b011      	add	sp, #68	; 0x44
    5354:	bc3c      	pop	{r2, r3, r4, r5}
    5356:	4690      	mov	r8, r2
    5358:	4699      	mov	r9, r3
    535a:	46a2      	mov	sl, r4
    535c:	46ab      	mov	fp, r5
    535e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5360:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    5362:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5364:	079b      	lsls	r3, r3, #30
    5366:	d4f4      	bmi.n	5352 <usart_init+0x26>
    5368:	49b4      	ldr	r1, [pc, #720]	; (563c <usart_init+0x310>)
    536a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    536c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    536e:	2301      	movs	r3, #1
    5370:	40bb      	lsls	r3, r7
    5372:	4303      	orrs	r3, r0
    5374:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    5376:	a90f      	add	r1, sp, #60	; 0x3c
    5378:	272d      	movs	r7, #45	; 0x2d
    537a:	5df3      	ldrb	r3, [r6, r7]
    537c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    537e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5380:	b2d3      	uxtb	r3, r2
    5382:	9302      	str	r3, [sp, #8]
    5384:	0018      	movs	r0, r3
    5386:	4bae      	ldr	r3, [pc, #696]	; (5640 <usart_init+0x314>)
    5388:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    538a:	9802      	ldr	r0, [sp, #8]
    538c:	4bad      	ldr	r3, [pc, #692]	; (5644 <usart_init+0x318>)
    538e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5390:	5df0      	ldrb	r0, [r6, r7]
    5392:	2100      	movs	r1, #0
    5394:	4bac      	ldr	r3, [pc, #688]	; (5648 <usart_init+0x31c>)
    5396:	4798      	blx	r3
	module->character_size = config->character_size;
    5398:	7af3      	ldrb	r3, [r6, #11]
    539a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    539c:	2324      	movs	r3, #36	; 0x24
    539e:	5cf3      	ldrb	r3, [r6, r3]
    53a0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    53a2:	2325      	movs	r3, #37	; 0x25
    53a4:	5cf3      	ldrb	r3, [r6, r3]
    53a6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    53a8:	7ef3      	ldrb	r3, [r6, #27]
    53aa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    53ac:	7f33      	ldrb	r3, [r6, #28]
    53ae:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    53b0:	682b      	ldr	r3, [r5, #0]
    53b2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    53b4:	0018      	movs	r0, r3
    53b6:	4ba0      	ldr	r3, [pc, #640]	; (5638 <usart_init+0x30c>)
    53b8:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    53ba:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    53bc:	2200      	movs	r2, #0
    53be:	230e      	movs	r3, #14
    53c0:	a906      	add	r1, sp, #24
    53c2:	468c      	mov	ip, r1
    53c4:	4463      	add	r3, ip
    53c6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    53c8:	8a32      	ldrh	r2, [r6, #16]
    53ca:	9202      	str	r2, [sp, #8]
    53cc:	2380      	movs	r3, #128	; 0x80
    53ce:	01db      	lsls	r3, r3, #7
    53d0:	429a      	cmp	r2, r3
    53d2:	d100      	bne.n	53d6 <usart_init+0xaa>
    53d4:	e09e      	b.n	5514 <usart_init+0x1e8>
    53d6:	d90f      	bls.n	53f8 <usart_init+0xcc>
    53d8:	23c0      	movs	r3, #192	; 0xc0
    53da:	01db      	lsls	r3, r3, #7
    53dc:	9a02      	ldr	r2, [sp, #8]
    53de:	429a      	cmp	r2, r3
    53e0:	d100      	bne.n	53e4 <usart_init+0xb8>
    53e2:	e092      	b.n	550a <usart_init+0x1de>
    53e4:	2380      	movs	r3, #128	; 0x80
    53e6:	021b      	lsls	r3, r3, #8
    53e8:	429a      	cmp	r2, r3
    53ea:	d000      	beq.n	53ee <usart_init+0xc2>
    53ec:	e11f      	b.n	562e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    53ee:	2303      	movs	r3, #3
    53f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    53f2:	2300      	movs	r3, #0
    53f4:	9307      	str	r3, [sp, #28]
    53f6:	e008      	b.n	540a <usart_init+0xde>
	switch (config->sample_rate) {
    53f8:	2380      	movs	r3, #128	; 0x80
    53fa:	019b      	lsls	r3, r3, #6
    53fc:	429a      	cmp	r2, r3
    53fe:	d000      	beq.n	5402 <usart_init+0xd6>
    5400:	e115      	b.n	562e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5402:	2310      	movs	r3, #16
    5404:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    5406:	3b0f      	subs	r3, #15
    5408:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    540a:	6833      	ldr	r3, [r6, #0]
    540c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    540e:	68f3      	ldr	r3, [r6, #12]
    5410:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5412:	6973      	ldr	r3, [r6, #20]
    5414:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5416:	7e33      	ldrb	r3, [r6, #24]
    5418:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    541a:	2326      	movs	r3, #38	; 0x26
    541c:	5cf3      	ldrb	r3, [r6, r3]
    541e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5420:	6873      	ldr	r3, [r6, #4]
    5422:	4699      	mov	r9, r3
	switch (transfer_mode)
    5424:	2b00      	cmp	r3, #0
    5426:	d100      	bne.n	542a <usart_init+0xfe>
    5428:	e0a0      	b.n	556c <usart_init+0x240>
    542a:	2380      	movs	r3, #128	; 0x80
    542c:	055b      	lsls	r3, r3, #21
    542e:	4599      	cmp	r9, r3
    5430:	d100      	bne.n	5434 <usart_init+0x108>
    5432:	e084      	b.n	553e <usart_init+0x212>
	if(config->encoding_format_enable) {
    5434:	7e73      	ldrb	r3, [r6, #25]
    5436:	2b00      	cmp	r3, #0
    5438:	d002      	beq.n	5440 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    543a:	7eb3      	ldrb	r3, [r6, #26]
    543c:	4642      	mov	r2, r8
    543e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5440:	682a      	ldr	r2, [r5, #0]
    5442:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5444:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    5446:	2b00      	cmp	r3, #0
    5448:	d1fc      	bne.n	5444 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    544a:	330e      	adds	r3, #14
    544c:	aa06      	add	r2, sp, #24
    544e:	4694      	mov	ip, r2
    5450:	4463      	add	r3, ip
    5452:	881b      	ldrh	r3, [r3, #0]
    5454:	4642      	mov	r2, r8
    5456:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    5458:	9b05      	ldr	r3, [sp, #20]
    545a:	9a03      	ldr	r2, [sp, #12]
    545c:	4313      	orrs	r3, r2
    545e:	9a04      	ldr	r2, [sp, #16]
    5460:	4313      	orrs	r3, r2
    5462:	464a      	mov	r2, r9
    5464:	4313      	orrs	r3, r2
    5466:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5468:	465b      	mov	r3, fp
    546a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    546c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    546e:	4653      	mov	r3, sl
    5470:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5472:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5474:	2327      	movs	r3, #39	; 0x27
    5476:	5cf3      	ldrb	r3, [r6, r3]
    5478:	2b00      	cmp	r3, #0
    547a:	d101      	bne.n	5480 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    547c:	3304      	adds	r3, #4
    547e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5480:	7e73      	ldrb	r3, [r6, #25]
    5482:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5484:	7f32      	ldrb	r2, [r6, #28]
    5486:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5488:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    548a:	7f72      	ldrb	r2, [r6, #29]
    548c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    548e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5490:	2224      	movs	r2, #36	; 0x24
    5492:	5cb2      	ldrb	r2, [r6, r2]
    5494:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    5496:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    5498:	2225      	movs	r2, #37	; 0x25
    549a:	5cb2      	ldrb	r2, [r6, r2]
    549c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    549e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    54a0:	7ab1      	ldrb	r1, [r6, #10]
    54a2:	7af2      	ldrb	r2, [r6, #11]
    54a4:	4311      	orrs	r1, r2
    54a6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    54a8:	8933      	ldrh	r3, [r6, #8]
    54aa:	2bff      	cmp	r3, #255	; 0xff
    54ac:	d100      	bne.n	54b0 <usart_init+0x184>
    54ae:	e081      	b.n	55b4 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    54b0:	2280      	movs	r2, #128	; 0x80
    54b2:	0452      	lsls	r2, r2, #17
    54b4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    54b6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    54b8:	232c      	movs	r3, #44	; 0x2c
    54ba:	5cf3      	ldrb	r3, [r6, r3]
    54bc:	2b00      	cmp	r3, #0
    54be:	d103      	bne.n	54c8 <usart_init+0x19c>
    54c0:	4b62      	ldr	r3, [pc, #392]	; (564c <usart_init+0x320>)
    54c2:	789b      	ldrb	r3, [r3, #2]
    54c4:	079b      	lsls	r3, r3, #30
    54c6:	d501      	bpl.n	54cc <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    54c8:	2380      	movs	r3, #128	; 0x80
    54ca:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    54cc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    54ce:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    54d0:	2b00      	cmp	r3, #0
    54d2:	d1fc      	bne.n	54ce <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    54d4:	4643      	mov	r3, r8
    54d6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    54d8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    54da:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    54dc:	2b00      	cmp	r3, #0
    54de:	d1fc      	bne.n	54da <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    54e0:	4643      	mov	r3, r8
    54e2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    54e4:	ab0e      	add	r3, sp, #56	; 0x38
    54e6:	2280      	movs	r2, #128	; 0x80
    54e8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    54ea:	2200      	movs	r2, #0
    54ec:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    54ee:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    54f0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    54f2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    54f4:	930a      	str	r3, [sp, #40]	; 0x28
    54f6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    54f8:	930b      	str	r3, [sp, #44]	; 0x2c
    54fa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    54fc:	930c      	str	r3, [sp, #48]	; 0x30
    54fe:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    5500:	9302      	str	r3, [sp, #8]
    5502:	930d      	str	r3, [sp, #52]	; 0x34
    5504:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    5506:	ae0a      	add	r6, sp, #40	; 0x28
    5508:	e063      	b.n	55d2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    550a:	2308      	movs	r3, #8
    550c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    550e:	3b07      	subs	r3, #7
    5510:	9307      	str	r3, [sp, #28]
    5512:	e77a      	b.n	540a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    5514:	6833      	ldr	r3, [r6, #0]
    5516:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    5518:	68f3      	ldr	r3, [r6, #12]
    551a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    551c:	6973      	ldr	r3, [r6, #20]
    551e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5520:	7e33      	ldrb	r3, [r6, #24]
    5522:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5524:	2326      	movs	r3, #38	; 0x26
    5526:	5cf3      	ldrb	r3, [r6, r3]
    5528:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    552a:	6873      	ldr	r3, [r6, #4]
    552c:	4699      	mov	r9, r3
	switch (transfer_mode)
    552e:	2b00      	cmp	r3, #0
    5530:	d018      	beq.n	5564 <usart_init+0x238>
    5532:	2380      	movs	r3, #128	; 0x80
    5534:	055b      	lsls	r3, r3, #21
    5536:	4599      	cmp	r9, r3
    5538:	d001      	beq.n	553e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    553a:	2000      	movs	r0, #0
    553c:	e025      	b.n	558a <usart_init+0x25e>
			if (!config->use_external_clock) {
    553e:	2327      	movs	r3, #39	; 0x27
    5540:	5cf3      	ldrb	r3, [r6, r3]
    5542:	2b00      	cmp	r3, #0
    5544:	d000      	beq.n	5548 <usart_init+0x21c>
    5546:	e775      	b.n	5434 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    5548:	6a33      	ldr	r3, [r6, #32]
    554a:	001f      	movs	r7, r3
    554c:	b2c0      	uxtb	r0, r0
    554e:	4b40      	ldr	r3, [pc, #256]	; (5650 <usart_init+0x324>)
    5550:	4798      	blx	r3
    5552:	0001      	movs	r1, r0
    5554:	220e      	movs	r2, #14
    5556:	ab06      	add	r3, sp, #24
    5558:	469c      	mov	ip, r3
    555a:	4462      	add	r2, ip
    555c:	0038      	movs	r0, r7
    555e:	4b3d      	ldr	r3, [pc, #244]	; (5654 <usart_init+0x328>)
    5560:	4798      	blx	r3
    5562:	e012      	b.n	558a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5564:	2308      	movs	r3, #8
    5566:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5568:	2300      	movs	r3, #0
    556a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    556c:	2327      	movs	r3, #39	; 0x27
    556e:	5cf3      	ldrb	r3, [r6, r3]
    5570:	2b00      	cmp	r3, #0
    5572:	d00e      	beq.n	5592 <usart_init+0x266>
				status_code =
    5574:	9b06      	ldr	r3, [sp, #24]
    5576:	9300      	str	r3, [sp, #0]
    5578:	9b07      	ldr	r3, [sp, #28]
    557a:	220e      	movs	r2, #14
    557c:	a906      	add	r1, sp, #24
    557e:	468c      	mov	ip, r1
    5580:	4462      	add	r2, ip
    5582:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5584:	6a30      	ldr	r0, [r6, #32]
    5586:	4f34      	ldr	r7, [pc, #208]	; (5658 <usart_init+0x32c>)
    5588:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    558a:	2800      	cmp	r0, #0
    558c:	d000      	beq.n	5590 <usart_init+0x264>
    558e:	e6e0      	b.n	5352 <usart_init+0x26>
    5590:	e750      	b.n	5434 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    5592:	6a33      	ldr	r3, [r6, #32]
    5594:	001f      	movs	r7, r3
    5596:	b2c0      	uxtb	r0, r0
    5598:	4b2d      	ldr	r3, [pc, #180]	; (5650 <usart_init+0x324>)
    559a:	4798      	blx	r3
    559c:	0001      	movs	r1, r0
				status_code =
    559e:	9b06      	ldr	r3, [sp, #24]
    55a0:	9300      	str	r3, [sp, #0]
    55a2:	9b07      	ldr	r3, [sp, #28]
    55a4:	220e      	movs	r2, #14
    55a6:	a806      	add	r0, sp, #24
    55a8:	4684      	mov	ip, r0
    55aa:	4462      	add	r2, ip
    55ac:	0038      	movs	r0, r7
    55ae:	4f2a      	ldr	r7, [pc, #168]	; (5658 <usart_init+0x32c>)
    55b0:	47b8      	blx	r7
    55b2:	e7ea      	b.n	558a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    55b4:	7ef3      	ldrb	r3, [r6, #27]
    55b6:	2b00      	cmp	r3, #0
    55b8:	d100      	bne.n	55bc <usart_init+0x290>
    55ba:	e77d      	b.n	54b8 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    55bc:	2380      	movs	r3, #128	; 0x80
    55be:	04db      	lsls	r3, r3, #19
    55c0:	431f      	orrs	r7, r3
    55c2:	e779      	b.n	54b8 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    55c4:	0020      	movs	r0, r4
    55c6:	4b25      	ldr	r3, [pc, #148]	; (565c <usart_init+0x330>)
    55c8:	4798      	blx	r3
    55ca:	e007      	b.n	55dc <usart_init+0x2b0>
    55cc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    55ce:	2f04      	cmp	r7, #4
    55d0:	d00d      	beq.n	55ee <usart_init+0x2c2>
    55d2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    55d4:	00bb      	lsls	r3, r7, #2
    55d6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    55d8:	2800      	cmp	r0, #0
    55da:	d0f3      	beq.n	55c4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    55dc:	1c43      	adds	r3, r0, #1
    55de:	d0f5      	beq.n	55cc <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    55e0:	a90e      	add	r1, sp, #56	; 0x38
    55e2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    55e4:	0c00      	lsrs	r0, r0, #16
    55e6:	b2c0      	uxtb	r0, r0
    55e8:	4b1d      	ldr	r3, [pc, #116]	; (5660 <usart_init+0x334>)
    55ea:	4798      	blx	r3
    55ec:	e7ee      	b.n	55cc <usart_init+0x2a0>
		module->callback[i]            = NULL;
    55ee:	2300      	movs	r3, #0
    55f0:	60eb      	str	r3, [r5, #12]
    55f2:	612b      	str	r3, [r5, #16]
    55f4:	616b      	str	r3, [r5, #20]
    55f6:	61ab      	str	r3, [r5, #24]
    55f8:	61eb      	str	r3, [r5, #28]
    55fa:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    55fc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    55fe:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    5600:	2200      	movs	r2, #0
    5602:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5604:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5606:	3330      	adds	r3, #48	; 0x30
    5608:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    560a:	3301      	adds	r3, #1
    560c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    560e:	3301      	adds	r3, #1
    5610:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    5612:	3301      	adds	r3, #1
    5614:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    5616:	6828      	ldr	r0, [r5, #0]
    5618:	4b07      	ldr	r3, [pc, #28]	; (5638 <usart_init+0x30c>)
    561a:	4798      	blx	r3
    561c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    561e:	4911      	ldr	r1, [pc, #68]	; (5664 <usart_init+0x338>)
    5620:	4b11      	ldr	r3, [pc, #68]	; (5668 <usart_init+0x33c>)
    5622:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5624:	00a4      	lsls	r4, r4, #2
    5626:	4b11      	ldr	r3, [pc, #68]	; (566c <usart_init+0x340>)
    5628:	50e5      	str	r5, [r4, r3]
	return status_code;
    562a:	2000      	movs	r0, #0
    562c:	e691      	b.n	5352 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    562e:	2310      	movs	r3, #16
    5630:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5632:	2300      	movs	r3, #0
    5634:	9307      	str	r3, [sp, #28]
    5636:	e6e8      	b.n	540a <usart_init+0xde>
    5638:	00004ae5 	.word	0x00004ae5
    563c:	40000400 	.word	0x40000400
    5640:	00005ee9 	.word	0x00005ee9
    5644:	00005e5d 	.word	0x00005e5d
    5648:	00004921 	.word	0x00004921
    564c:	41002000 	.word	0x41002000
    5650:	00005f05 	.word	0x00005f05
    5654:	00004863 	.word	0x00004863
    5658:	0000488d 	.word	0x0000488d
    565c:	0000496d 	.word	0x0000496d
    5660:	00005fe1 	.word	0x00005fe1
    5664:	0000570d 	.word	0x0000570d
    5668:	00004b21 	.word	0x00004b21
    566c:	20001050 	.word	0x20001050

00005670 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5670:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    5672:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    5674:	2a00      	cmp	r2, #0
    5676:	d101      	bne.n	567c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    5678:	0018      	movs	r0, r3
    567a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    567c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    567e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5680:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    5682:	2a00      	cmp	r2, #0
    5684:	d1f8      	bne.n	5678 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5686:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    5688:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    568a:	2a00      	cmp	r2, #0
    568c:	d1fc      	bne.n	5688 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    568e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5690:	2102      	movs	r1, #2
    5692:	7e1a      	ldrb	r2, [r3, #24]
    5694:	420a      	tst	r2, r1
    5696:	d0fc      	beq.n	5692 <usart_write_wait+0x22>
	return STATUS_OK;
    5698:	2300      	movs	r3, #0
    569a:	e7ed      	b.n	5678 <usart_write_wait+0x8>

0000569c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    569c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    569e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    56a0:	2a00      	cmp	r2, #0
    56a2:	d101      	bne.n	56a8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    56a4:	0018      	movs	r0, r3
    56a6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    56a8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    56aa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    56ac:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    56ae:	2a00      	cmp	r2, #0
    56b0:	d1f8      	bne.n	56a4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    56b2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    56b4:	7e10      	ldrb	r0, [r2, #24]
    56b6:	0740      	lsls	r0, r0, #29
    56b8:	d5f4      	bpl.n	56a4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    56ba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    56bc:	2b00      	cmp	r3, #0
    56be:	d1fc      	bne.n	56ba <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    56c0:	8b53      	ldrh	r3, [r2, #26]
    56c2:	b2db      	uxtb	r3, r3
	if (error_code) {
    56c4:	0698      	lsls	r0, r3, #26
    56c6:	d01d      	beq.n	5704 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    56c8:	0798      	lsls	r0, r3, #30
    56ca:	d503      	bpl.n	56d4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    56cc:	2302      	movs	r3, #2
    56ce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    56d0:	3318      	adds	r3, #24
    56d2:	e7e7      	b.n	56a4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    56d4:	0758      	lsls	r0, r3, #29
    56d6:	d503      	bpl.n	56e0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    56d8:	2304      	movs	r3, #4
    56da:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    56dc:	331a      	adds	r3, #26
    56de:	e7e1      	b.n	56a4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    56e0:	07d8      	lsls	r0, r3, #31
    56e2:	d503      	bpl.n	56ec <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    56e4:	2301      	movs	r3, #1
    56e6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    56e8:	3312      	adds	r3, #18
    56ea:	e7db      	b.n	56a4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    56ec:	06d8      	lsls	r0, r3, #27
    56ee:	d503      	bpl.n	56f8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    56f0:	2310      	movs	r3, #16
    56f2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    56f4:	3332      	adds	r3, #50	; 0x32
    56f6:	e7d5      	b.n	56a4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    56f8:	069b      	lsls	r3, r3, #26
    56fa:	d503      	bpl.n	5704 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    56fc:	2320      	movs	r3, #32
    56fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    5700:	3321      	adds	r3, #33	; 0x21
    5702:	e7cf      	b.n	56a4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    5704:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    5706:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    5708:	2300      	movs	r3, #0
    570a:	e7cb      	b.n	56a4 <usart_read_wait+0x8>

0000570c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    570e:	0080      	lsls	r0, r0, #2
    5710:	4b62      	ldr	r3, [pc, #392]	; (589c <_usart_interrupt_handler+0x190>)
    5712:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5714:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    5716:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    5718:	2b00      	cmp	r3, #0
    571a:	d1fc      	bne.n	5716 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    571c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    571e:	7da6      	ldrb	r6, [r4, #22]
    5720:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    5722:	2330      	movs	r3, #48	; 0x30
    5724:	5ceb      	ldrb	r3, [r5, r3]
    5726:	2231      	movs	r2, #49	; 0x31
    5728:	5caf      	ldrb	r7, [r5, r2]
    572a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    572c:	07f3      	lsls	r3, r6, #31
    572e:	d522      	bpl.n	5776 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    5730:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    5732:	b29b      	uxth	r3, r3
    5734:	2b00      	cmp	r3, #0
    5736:	d01c      	beq.n	5772 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5738:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    573a:	7813      	ldrb	r3, [r2, #0]
    573c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    573e:	1c51      	adds	r1, r2, #1
    5740:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5742:	7969      	ldrb	r1, [r5, #5]
    5744:	2901      	cmp	r1, #1
    5746:	d00e      	beq.n	5766 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5748:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    574a:	05db      	lsls	r3, r3, #23
    574c:	0ddb      	lsrs	r3, r3, #23
    574e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5750:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    5752:	3b01      	subs	r3, #1
    5754:	b29b      	uxth	r3, r3
    5756:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5758:	2b00      	cmp	r3, #0
    575a:	d10c      	bne.n	5776 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    575c:	3301      	adds	r3, #1
    575e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5760:	3301      	adds	r3, #1
    5762:	75a3      	strb	r3, [r4, #22]
    5764:	e007      	b.n	5776 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5766:	7851      	ldrb	r1, [r2, #1]
    5768:	0209      	lsls	r1, r1, #8
    576a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    576c:	3202      	adds	r2, #2
    576e:	62aa      	str	r2, [r5, #40]	; 0x28
    5770:	e7eb      	b.n	574a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5772:	2301      	movs	r3, #1
    5774:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    5776:	07b3      	lsls	r3, r6, #30
    5778:	d506      	bpl.n	5788 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    577a:	2302      	movs	r3, #2
    577c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    577e:	2200      	movs	r2, #0
    5780:	3331      	adds	r3, #49	; 0x31
    5782:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5784:	07fb      	lsls	r3, r7, #31
    5786:	d41a      	bmi.n	57be <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    5788:	0773      	lsls	r3, r6, #29
    578a:	d565      	bpl.n	5858 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    578c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    578e:	b29b      	uxth	r3, r3
    5790:	2b00      	cmp	r3, #0
    5792:	d05f      	beq.n	5854 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5794:	8b63      	ldrh	r3, [r4, #26]
    5796:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5798:	071a      	lsls	r2, r3, #28
    579a:	d414      	bmi.n	57c6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    579c:	223f      	movs	r2, #63	; 0x3f
    579e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    57a0:	2b00      	cmp	r3, #0
    57a2:	d034      	beq.n	580e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    57a4:	079a      	lsls	r2, r3, #30
    57a6:	d511      	bpl.n	57cc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    57a8:	221a      	movs	r2, #26
    57aa:	2332      	movs	r3, #50	; 0x32
    57ac:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    57ae:	3b30      	subs	r3, #48	; 0x30
    57b0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    57b2:	077b      	lsls	r3, r7, #29
    57b4:	d550      	bpl.n	5858 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    57b6:	0028      	movs	r0, r5
    57b8:	696b      	ldr	r3, [r5, #20]
    57ba:	4798      	blx	r3
    57bc:	e04c      	b.n	5858 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    57be:	0028      	movs	r0, r5
    57c0:	68eb      	ldr	r3, [r5, #12]
    57c2:	4798      	blx	r3
    57c4:	e7e0      	b.n	5788 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    57c6:	2237      	movs	r2, #55	; 0x37
    57c8:	4013      	ands	r3, r2
    57ca:	e7e9      	b.n	57a0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    57cc:	075a      	lsls	r2, r3, #29
    57ce:	d505      	bpl.n	57dc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    57d0:	221e      	movs	r2, #30
    57d2:	2332      	movs	r3, #50	; 0x32
    57d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    57d6:	3b2e      	subs	r3, #46	; 0x2e
    57d8:	8363      	strh	r3, [r4, #26]
    57da:	e7ea      	b.n	57b2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    57dc:	07da      	lsls	r2, r3, #31
    57de:	d505      	bpl.n	57ec <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    57e0:	2213      	movs	r2, #19
    57e2:	2332      	movs	r3, #50	; 0x32
    57e4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    57e6:	3b31      	subs	r3, #49	; 0x31
    57e8:	8363      	strh	r3, [r4, #26]
    57ea:	e7e2      	b.n	57b2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    57ec:	06da      	lsls	r2, r3, #27
    57ee:	d505      	bpl.n	57fc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    57f0:	2242      	movs	r2, #66	; 0x42
    57f2:	2332      	movs	r3, #50	; 0x32
    57f4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    57f6:	3b22      	subs	r3, #34	; 0x22
    57f8:	8363      	strh	r3, [r4, #26]
    57fa:	e7da      	b.n	57b2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    57fc:	2220      	movs	r2, #32
    57fe:	421a      	tst	r2, r3
    5800:	d0d7      	beq.n	57b2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5802:	3221      	adds	r2, #33	; 0x21
    5804:	2332      	movs	r3, #50	; 0x32
    5806:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    5808:	3b12      	subs	r3, #18
    580a:	8363      	strh	r3, [r4, #26]
    580c:	e7d1      	b.n	57b2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    580e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    5810:	05db      	lsls	r3, r3, #23
    5812:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5814:	b2da      	uxtb	r2, r3
    5816:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5818:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    581a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    581c:	1c51      	adds	r1, r2, #1
    581e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5820:	7969      	ldrb	r1, [r5, #5]
    5822:	2901      	cmp	r1, #1
    5824:	d010      	beq.n	5848 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5826:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5828:	3b01      	subs	r3, #1
    582a:	b29b      	uxth	r3, r3
    582c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    582e:	2b00      	cmp	r3, #0
    5830:	d112      	bne.n	5858 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5832:	3304      	adds	r3, #4
    5834:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    5836:	2200      	movs	r2, #0
    5838:	332e      	adds	r3, #46	; 0x2e
    583a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    583c:	07bb      	lsls	r3, r7, #30
    583e:	d50b      	bpl.n	5858 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5840:	0028      	movs	r0, r5
    5842:	692b      	ldr	r3, [r5, #16]
    5844:	4798      	blx	r3
    5846:	e007      	b.n	5858 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    5848:	0a1b      	lsrs	r3, r3, #8
    584a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    584c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    584e:	3301      	adds	r3, #1
    5850:	626b      	str	r3, [r5, #36]	; 0x24
    5852:	e7e8      	b.n	5826 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5854:	2304      	movs	r3, #4
    5856:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5858:	06f3      	lsls	r3, r6, #27
    585a:	d504      	bpl.n	5866 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    585c:	2310      	movs	r3, #16
    585e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5860:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5862:	06fb      	lsls	r3, r7, #27
    5864:	d40e      	bmi.n	5884 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    5866:	06b3      	lsls	r3, r6, #26
    5868:	d504      	bpl.n	5874 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    586a:	2320      	movs	r3, #32
    586c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    586e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5870:	073b      	lsls	r3, r7, #28
    5872:	d40b      	bmi.n	588c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5874:	0733      	lsls	r3, r6, #28
    5876:	d504      	bpl.n	5882 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    5878:	2308      	movs	r3, #8
    587a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    587c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    587e:	06bb      	lsls	r3, r7, #26
    5880:	d408      	bmi.n	5894 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    5882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5884:	0028      	movs	r0, r5
    5886:	69eb      	ldr	r3, [r5, #28]
    5888:	4798      	blx	r3
    588a:	e7ec      	b.n	5866 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    588c:	0028      	movs	r0, r5
    588e:	69ab      	ldr	r3, [r5, #24]
    5890:	4798      	blx	r3
    5892:	e7ef      	b.n	5874 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5894:	6a2b      	ldr	r3, [r5, #32]
    5896:	0028      	movs	r0, r5
    5898:	4798      	blx	r3
}
    589a:	e7f2      	b.n	5882 <_usart_interrupt_handler+0x176>
    589c:	20001050 	.word	0x20001050

000058a0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    58a0:	b510      	push	{r4, lr}
	switch (clock_source) {
    58a2:	2808      	cmp	r0, #8
    58a4:	d803      	bhi.n	58ae <system_clock_source_get_hz+0xe>
    58a6:	0080      	lsls	r0, r0, #2
    58a8:	4b1c      	ldr	r3, [pc, #112]	; (591c <system_clock_source_get_hz+0x7c>)
    58aa:	581b      	ldr	r3, [r3, r0]
    58ac:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    58ae:	2000      	movs	r0, #0
    58b0:	e032      	b.n	5918 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    58b2:	4b1b      	ldr	r3, [pc, #108]	; (5920 <system_clock_source_get_hz+0x80>)
    58b4:	6918      	ldr	r0, [r3, #16]
    58b6:	e02f      	b.n	5918 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    58b8:	4b1a      	ldr	r3, [pc, #104]	; (5924 <system_clock_source_get_hz+0x84>)
    58ba:	6a1b      	ldr	r3, [r3, #32]
    58bc:	059b      	lsls	r3, r3, #22
    58be:	0f9b      	lsrs	r3, r3, #30
    58c0:	4819      	ldr	r0, [pc, #100]	; (5928 <system_clock_source_get_hz+0x88>)
    58c2:	40d8      	lsrs	r0, r3
    58c4:	e028      	b.n	5918 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    58c6:	4b16      	ldr	r3, [pc, #88]	; (5920 <system_clock_source_get_hz+0x80>)
    58c8:	6958      	ldr	r0, [r3, #20]
    58ca:	e025      	b.n	5918 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    58cc:	4b14      	ldr	r3, [pc, #80]	; (5920 <system_clock_source_get_hz+0x80>)
    58ce:	681b      	ldr	r3, [r3, #0]
			return 0;
    58d0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    58d2:	079b      	lsls	r3, r3, #30
    58d4:	d520      	bpl.n	5918 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    58d6:	4913      	ldr	r1, [pc, #76]	; (5924 <system_clock_source_get_hz+0x84>)
    58d8:	2210      	movs	r2, #16
    58da:	68cb      	ldr	r3, [r1, #12]
    58dc:	421a      	tst	r2, r3
    58de:	d0fc      	beq.n	58da <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    58e0:	4b0f      	ldr	r3, [pc, #60]	; (5920 <system_clock_source_get_hz+0x80>)
    58e2:	681a      	ldr	r2, [r3, #0]
    58e4:	2324      	movs	r3, #36	; 0x24
    58e6:	4013      	ands	r3, r2
    58e8:	2b04      	cmp	r3, #4
    58ea:	d001      	beq.n	58f0 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    58ec:	480f      	ldr	r0, [pc, #60]	; (592c <system_clock_source_get_hz+0x8c>)
    58ee:	e013      	b.n	5918 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    58f0:	2000      	movs	r0, #0
    58f2:	4b0f      	ldr	r3, [pc, #60]	; (5930 <system_clock_source_get_hz+0x90>)
    58f4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    58f6:	4b0a      	ldr	r3, [pc, #40]	; (5920 <system_clock_source_get_hz+0x80>)
    58f8:	689b      	ldr	r3, [r3, #8]
    58fa:	041b      	lsls	r3, r3, #16
    58fc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    58fe:	4358      	muls	r0, r3
    5900:	e00a      	b.n	5918 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5902:	2350      	movs	r3, #80	; 0x50
    5904:	4a07      	ldr	r2, [pc, #28]	; (5924 <system_clock_source_get_hz+0x84>)
    5906:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    5908:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    590a:	075b      	lsls	r3, r3, #29
    590c:	d504      	bpl.n	5918 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    590e:	4b04      	ldr	r3, [pc, #16]	; (5920 <system_clock_source_get_hz+0x80>)
    5910:	68d8      	ldr	r0, [r3, #12]
    5912:	e001      	b.n	5918 <system_clock_source_get_hz+0x78>
		return 32768UL;
    5914:	2080      	movs	r0, #128	; 0x80
    5916:	0200      	lsls	r0, r0, #8
	}
}
    5918:	bd10      	pop	{r4, pc}
    591a:	46c0      	nop			; (mov r8, r8)
    591c:	0000dcdc 	.word	0x0000dcdc
    5920:	200003e0 	.word	0x200003e0
    5924:	40000800 	.word	0x40000800
    5928:	007a1200 	.word	0x007a1200
    592c:	02dc6c00 	.word	0x02dc6c00
    5930:	00005f05 	.word	0x00005f05

00005934 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5934:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5936:	490c      	ldr	r1, [pc, #48]	; (5968 <system_clock_source_osc8m_set_config+0x34>)
    5938:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    593a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    593c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    593e:	7840      	ldrb	r0, [r0, #1]
    5940:	2201      	movs	r2, #1
    5942:	4010      	ands	r0, r2
    5944:	0180      	lsls	r0, r0, #6
    5946:	2640      	movs	r6, #64	; 0x40
    5948:	43b3      	bics	r3, r6
    594a:	4303      	orrs	r3, r0
    594c:	402a      	ands	r2, r5
    594e:	01d2      	lsls	r2, r2, #7
    5950:	2080      	movs	r0, #128	; 0x80
    5952:	4383      	bics	r3, r0
    5954:	4313      	orrs	r3, r2
    5956:	2203      	movs	r2, #3
    5958:	4022      	ands	r2, r4
    595a:	0212      	lsls	r2, r2, #8
    595c:	4803      	ldr	r0, [pc, #12]	; (596c <system_clock_source_osc8m_set_config+0x38>)
    595e:	4003      	ands	r3, r0
    5960:	4313      	orrs	r3, r2
    5962:	620b      	str	r3, [r1, #32]
}
    5964:	bd70      	pop	{r4, r5, r6, pc}
    5966:	46c0      	nop			; (mov r8, r8)
    5968:	40000800 	.word	0x40000800
    596c:	fffffcff 	.word	0xfffffcff

00005970 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5970:	b5f0      	push	{r4, r5, r6, r7, lr}
    5972:	46de      	mov	lr, fp
    5974:	4657      	mov	r7, sl
    5976:	464e      	mov	r6, r9
    5978:	4645      	mov	r5, r8
    597a:	b5e0      	push	{r5, r6, r7, lr}
    597c:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    597e:	4b26      	ldr	r3, [pc, #152]	; (5a18 <system_clock_source_xosc32k_set_config+0xa8>)
    5980:	469b      	mov	fp, r3
    5982:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    5984:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5986:	7800      	ldrb	r0, [r0, #0]
    5988:	4242      	negs	r2, r0
    598a:	4142      	adcs	r2, r0
    598c:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    598e:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    5990:	78ca      	ldrb	r2, [r1, #3]
    5992:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    5994:	790a      	ldrb	r2, [r1, #4]
    5996:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    5998:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    599a:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    599c:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    599e:	688a      	ldr	r2, [r1, #8]
    59a0:	491e      	ldr	r1, [pc, #120]	; (5a1c <system_clock_source_xosc32k_set_config+0xac>)
    59a2:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    59a4:	2101      	movs	r1, #1
    59a6:	464a      	mov	r2, r9
    59a8:	0092      	lsls	r2, r2, #2
    59aa:	4691      	mov	r9, r2
    59ac:	2204      	movs	r2, #4
    59ae:	4393      	bics	r3, r2
    59b0:	464a      	mov	r2, r9
    59b2:	4313      	orrs	r3, r2
    59b4:	4642      	mov	r2, r8
    59b6:	400a      	ands	r2, r1
    59b8:	00d2      	lsls	r2, r2, #3
    59ba:	4690      	mov	r8, r2
    59bc:	2208      	movs	r2, #8
    59be:	4393      	bics	r3, r2
    59c0:	4642      	mov	r2, r8
    59c2:	4313      	orrs	r3, r2
    59c4:	4662      	mov	r2, ip
    59c6:	400a      	ands	r2, r1
    59c8:	0112      	lsls	r2, r2, #4
    59ca:	4694      	mov	ip, r2
    59cc:	2210      	movs	r2, #16
    59ce:	4393      	bics	r3, r2
    59d0:	4662      	mov	r2, ip
    59d2:	4313      	orrs	r3, r2
    59d4:	4008      	ands	r0, r1
    59d6:	0140      	lsls	r0, r0, #5
    59d8:	2220      	movs	r2, #32
    59da:	4393      	bics	r3, r2
    59dc:	4303      	orrs	r3, r0
    59de:	400f      	ands	r7, r1
    59e0:	01bf      	lsls	r7, r7, #6
    59e2:	2040      	movs	r0, #64	; 0x40
    59e4:	4383      	bics	r3, r0
    59e6:	433b      	orrs	r3, r7
    59e8:	400e      	ands	r6, r1
    59ea:	01f6      	lsls	r6, r6, #7
    59ec:	3040      	adds	r0, #64	; 0x40
    59ee:	4383      	bics	r3, r0
    59f0:	4333      	orrs	r3, r6
    59f2:	3879      	subs	r0, #121	; 0x79
    59f4:	4005      	ands	r5, r0
    59f6:	022d      	lsls	r5, r5, #8
    59f8:	4809      	ldr	r0, [pc, #36]	; (5a20 <system_clock_source_xosc32k_set_config+0xb0>)
    59fa:	4003      	ands	r3, r0
    59fc:	432b      	orrs	r3, r5
    59fe:	4021      	ands	r1, r4
    5a00:	0309      	lsls	r1, r1, #12
    5a02:	4808      	ldr	r0, [pc, #32]	; (5a24 <system_clock_source_xosc32k_set_config+0xb4>)
    5a04:	4003      	ands	r3, r0
    5a06:	430b      	orrs	r3, r1
    5a08:	465a      	mov	r2, fp
    5a0a:	8293      	strh	r3, [r2, #20]
}
    5a0c:	bc3c      	pop	{r2, r3, r4, r5}
    5a0e:	4690      	mov	r8, r2
    5a10:	4699      	mov	r9, r3
    5a12:	46a2      	mov	sl, r4
    5a14:	46ab      	mov	fp, r5
    5a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a18:	40000800 	.word	0x40000800
    5a1c:	200003e0 	.word	0x200003e0
    5a20:	fffff8ff 	.word	0xfffff8ff
    5a24:	ffffefff 	.word	0xffffefff

00005a28 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5a28:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5a2a:	7a03      	ldrb	r3, [r0, #8]
    5a2c:	069b      	lsls	r3, r3, #26
    5a2e:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5a30:	8942      	ldrh	r2, [r0, #10]
    5a32:	0592      	lsls	r2, r2, #22
    5a34:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5a36:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    5a38:	4918      	ldr	r1, [pc, #96]	; (5a9c <system_clock_source_dfll_set_config+0x74>)
    5a3a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5a3c:	7983      	ldrb	r3, [r0, #6]
    5a3e:	79c2      	ldrb	r2, [r0, #7]
    5a40:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5a42:	8842      	ldrh	r2, [r0, #2]
    5a44:	8884      	ldrh	r4, [r0, #4]
    5a46:	4322      	orrs	r2, r4
    5a48:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5a4a:	7842      	ldrb	r2, [r0, #1]
    5a4c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5a4e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5a50:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5a52:	7803      	ldrb	r3, [r0, #0]
    5a54:	2b04      	cmp	r3, #4
    5a56:	d011      	beq.n	5a7c <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5a58:	2b20      	cmp	r3, #32
    5a5a:	d10e      	bne.n	5a7a <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5a5c:	7b03      	ldrb	r3, [r0, #12]
    5a5e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5a60:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5a62:	4313      	orrs	r3, r2
    5a64:	89c2      	ldrh	r2, [r0, #14]
    5a66:	0412      	lsls	r2, r2, #16
    5a68:	490d      	ldr	r1, [pc, #52]	; (5aa0 <system_clock_source_dfll_set_config+0x78>)
    5a6a:	400a      	ands	r2, r1
    5a6c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5a6e:	4a0b      	ldr	r2, [pc, #44]	; (5a9c <system_clock_source_dfll_set_config+0x74>)
    5a70:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5a72:	6811      	ldr	r1, [r2, #0]
    5a74:	4b0b      	ldr	r3, [pc, #44]	; (5aa4 <system_clock_source_dfll_set_config+0x7c>)
    5a76:	430b      	orrs	r3, r1
    5a78:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5a7a:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5a7c:	7b03      	ldrb	r3, [r0, #12]
    5a7e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5a80:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5a82:	4313      	orrs	r3, r2
    5a84:	89c2      	ldrh	r2, [r0, #14]
    5a86:	0412      	lsls	r2, r2, #16
    5a88:	4905      	ldr	r1, [pc, #20]	; (5aa0 <system_clock_source_dfll_set_config+0x78>)
    5a8a:	400a      	ands	r2, r1
    5a8c:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5a8e:	4a03      	ldr	r2, [pc, #12]	; (5a9c <system_clock_source_dfll_set_config+0x74>)
    5a90:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    5a92:	6813      	ldr	r3, [r2, #0]
    5a94:	2104      	movs	r1, #4
    5a96:	430b      	orrs	r3, r1
    5a98:	6013      	str	r3, [r2, #0]
    5a9a:	e7ee      	b.n	5a7a <system_clock_source_dfll_set_config+0x52>
    5a9c:	200003e0 	.word	0x200003e0
    5aa0:	03ff0000 	.word	0x03ff0000
    5aa4:	00000424 	.word	0x00000424

00005aa8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5aa8:	2808      	cmp	r0, #8
    5aaa:	d803      	bhi.n	5ab4 <system_clock_source_enable+0xc>
    5aac:	0080      	lsls	r0, r0, #2
    5aae:	4b25      	ldr	r3, [pc, #148]	; (5b44 <system_clock_source_enable+0x9c>)
    5ab0:	581b      	ldr	r3, [r3, r0]
    5ab2:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5ab4:	2017      	movs	r0, #23
    5ab6:	e044      	b.n	5b42 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5ab8:	4a23      	ldr	r2, [pc, #140]	; (5b48 <system_clock_source_enable+0xa0>)
    5aba:	6a13      	ldr	r3, [r2, #32]
    5abc:	2102      	movs	r1, #2
    5abe:	430b      	orrs	r3, r1
    5ac0:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    5ac2:	2000      	movs	r0, #0
    5ac4:	e03d      	b.n	5b42 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5ac6:	4a20      	ldr	r2, [pc, #128]	; (5b48 <system_clock_source_enable+0xa0>)
    5ac8:	6993      	ldr	r3, [r2, #24]
    5aca:	2102      	movs	r1, #2
    5acc:	430b      	orrs	r3, r1
    5ace:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5ad0:	2000      	movs	r0, #0
		break;
    5ad2:	e036      	b.n	5b42 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5ad4:	4a1c      	ldr	r2, [pc, #112]	; (5b48 <system_clock_source_enable+0xa0>)
    5ad6:	8a13      	ldrh	r3, [r2, #16]
    5ad8:	2102      	movs	r1, #2
    5ada:	430b      	orrs	r3, r1
    5adc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5ade:	2000      	movs	r0, #0
		break;
    5ae0:	e02f      	b.n	5b42 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5ae2:	4a19      	ldr	r2, [pc, #100]	; (5b48 <system_clock_source_enable+0xa0>)
    5ae4:	8a93      	ldrh	r3, [r2, #20]
    5ae6:	2102      	movs	r1, #2
    5ae8:	430b      	orrs	r3, r1
    5aea:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    5aec:	2000      	movs	r0, #0
		break;
    5aee:	e028      	b.n	5b42 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5af0:	4916      	ldr	r1, [pc, #88]	; (5b4c <system_clock_source_enable+0xa4>)
    5af2:	680b      	ldr	r3, [r1, #0]
    5af4:	2202      	movs	r2, #2
    5af6:	4313      	orrs	r3, r2
    5af8:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5afa:	4b13      	ldr	r3, [pc, #76]	; (5b48 <system_clock_source_enable+0xa0>)
    5afc:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5afe:	0019      	movs	r1, r3
    5b00:	320e      	adds	r2, #14
    5b02:	68cb      	ldr	r3, [r1, #12]
    5b04:	421a      	tst	r2, r3
    5b06:	d0fc      	beq.n	5b02 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5b08:	4a10      	ldr	r2, [pc, #64]	; (5b4c <system_clock_source_enable+0xa4>)
    5b0a:	6891      	ldr	r1, [r2, #8]
    5b0c:	4b0e      	ldr	r3, [pc, #56]	; (5b48 <system_clock_source_enable+0xa0>)
    5b0e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5b10:	6852      	ldr	r2, [r2, #4]
    5b12:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    5b14:	2200      	movs	r2, #0
    5b16:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5b18:	0019      	movs	r1, r3
    5b1a:	3210      	adds	r2, #16
    5b1c:	68cb      	ldr	r3, [r1, #12]
    5b1e:	421a      	tst	r2, r3
    5b20:	d0fc      	beq.n	5b1c <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5b22:	4b0a      	ldr	r3, [pc, #40]	; (5b4c <system_clock_source_enable+0xa4>)
    5b24:	681b      	ldr	r3, [r3, #0]
    5b26:	b29b      	uxth	r3, r3
    5b28:	4a07      	ldr	r2, [pc, #28]	; (5b48 <system_clock_source_enable+0xa0>)
    5b2a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    5b2c:	2000      	movs	r0, #0
    5b2e:	e008      	b.n	5b42 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5b30:	4905      	ldr	r1, [pc, #20]	; (5b48 <system_clock_source_enable+0xa0>)
    5b32:	2244      	movs	r2, #68	; 0x44
    5b34:	5c8b      	ldrb	r3, [r1, r2]
    5b36:	2002      	movs	r0, #2
    5b38:	4303      	orrs	r3, r0
    5b3a:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5b3c:	2000      	movs	r0, #0
		break;
    5b3e:	e000      	b.n	5b42 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5b40:	2000      	movs	r0, #0
}
    5b42:	4770      	bx	lr
    5b44:	0000dd00 	.word	0x0000dd00
    5b48:	40000800 	.word	0x40000800
    5b4c:	200003e0 	.word	0x200003e0

00005b50 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b52:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5b54:	22c2      	movs	r2, #194	; 0xc2
    5b56:	00d2      	lsls	r2, r2, #3
    5b58:	4b47      	ldr	r3, [pc, #284]	; (5c78 <system_clock_init+0x128>)
    5b5a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5b5c:	4a47      	ldr	r2, [pc, #284]	; (5c7c <system_clock_init+0x12c>)
    5b5e:	6853      	ldr	r3, [r2, #4]
    5b60:	211e      	movs	r1, #30
    5b62:	438b      	bics	r3, r1
    5b64:	391a      	subs	r1, #26
    5b66:	430b      	orrs	r3, r1
    5b68:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5b6a:	2202      	movs	r2, #2
    5b6c:	ab01      	add	r3, sp, #4
    5b6e:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5b70:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5b72:	4d43      	ldr	r5, [pc, #268]	; (5c80 <system_clock_init+0x130>)
    5b74:	b2e0      	uxtb	r0, r4
    5b76:	a901      	add	r1, sp, #4
    5b78:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5b7a:	3401      	adds	r4, #1
    5b7c:	2c25      	cmp	r4, #37	; 0x25
    5b7e:	d1f9      	bne.n	5b74 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5b80:	a80a      	add	r0, sp, #40	; 0x28
    5b82:	2300      	movs	r3, #0
    5b84:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    5b86:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5b88:	2280      	movs	r2, #128	; 0x80
    5b8a:	0212      	lsls	r2, r2, #8
    5b8c:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    5b8e:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5b90:	2201      	movs	r2, #1
    5b92:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    5b94:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    5b96:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5b98:	3202      	adds	r2, #2
    5b9a:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5b9c:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5b9e:	4b39      	ldr	r3, [pc, #228]	; (5c84 <system_clock_init+0x134>)
    5ba0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5ba2:	2005      	movs	r0, #5
    5ba4:	4b38      	ldr	r3, [pc, #224]	; (5c88 <system_clock_init+0x138>)
    5ba6:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5ba8:	4933      	ldr	r1, [pc, #204]	; (5c78 <system_clock_init+0x128>)
    5baa:	2202      	movs	r2, #2
    5bac:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5bae:	421a      	tst	r2, r3
    5bb0:	d0fc      	beq.n	5bac <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5bb2:	4a31      	ldr	r2, [pc, #196]	; (5c78 <system_clock_init+0x128>)
    5bb4:	8a93      	ldrh	r3, [r2, #20]
    5bb6:	2180      	movs	r1, #128	; 0x80
    5bb8:	430b      	orrs	r3, r1
    5bba:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5bbc:	ab05      	add	r3, sp, #20
    5bbe:	2100      	movs	r1, #0
    5bc0:	2200      	movs	r2, #0
    5bc2:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5bc4:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5bc6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5bc8:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5bca:	313f      	adds	r1, #63	; 0x3f
    5bcc:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5bce:	393b      	subs	r1, #59	; 0x3b
    5bd0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5bd2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5bd4:	4b2d      	ldr	r3, [pc, #180]	; (5c8c <system_clock_init+0x13c>)
    5bd6:	681b      	ldr	r3, [r3, #0]
    5bd8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5bda:	2b3f      	cmp	r3, #63	; 0x3f
    5bdc:	d04a      	beq.n	5c74 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    5bde:	a805      	add	r0, sp, #20
    5be0:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5be2:	4b2b      	ldr	r3, [pc, #172]	; (5c90 <system_clock_init+0x140>)
    5be4:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5be6:	2307      	movs	r3, #7
    5be8:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5bea:	3338      	adds	r3, #56	; 0x38
    5bec:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5bee:	4b29      	ldr	r3, [pc, #164]	; (5c94 <system_clock_init+0x144>)
    5bf0:	4798      	blx	r3
	config->run_in_standby  = false;
    5bf2:	a804      	add	r0, sp, #16
    5bf4:	2500      	movs	r5, #0
    5bf6:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    5bf8:	2601      	movs	r6, #1
    5bfa:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5bfc:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5bfe:	4b26      	ldr	r3, [pc, #152]	; (5c98 <system_clock_init+0x148>)
    5c00:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5c02:	2006      	movs	r0, #6
    5c04:	4f20      	ldr	r7, [pc, #128]	; (5c88 <system_clock_init+0x138>)
    5c06:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5c08:	4b24      	ldr	r3, [pc, #144]	; (5c9c <system_clock_init+0x14c>)
    5c0a:	4798      	blx	r3
	config->division_factor    = 1;
    5c0c:	ac01      	add	r4, sp, #4
    5c0e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5c10:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5c12:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5c14:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5c16:	2305      	movs	r3, #5
    5c18:	7023      	strb	r3, [r4, #0]
    5c1a:	0021      	movs	r1, r4
    5c1c:	2001      	movs	r0, #1
    5c1e:	4b20      	ldr	r3, [pc, #128]	; (5ca0 <system_clock_init+0x150>)
    5c20:	4798      	blx	r3
    5c22:	2001      	movs	r0, #1
    5c24:	4b1f      	ldr	r3, [pc, #124]	; (5ca4 <system_clock_init+0x154>)
    5c26:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5c28:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5c2a:	0021      	movs	r1, r4
    5c2c:	2000      	movs	r0, #0
    5c2e:	4b14      	ldr	r3, [pc, #80]	; (5c80 <system_clock_init+0x130>)
    5c30:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5c32:	2000      	movs	r0, #0
    5c34:	4b1c      	ldr	r3, [pc, #112]	; (5ca8 <system_clock_init+0x158>)
    5c36:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5c38:	2007      	movs	r0, #7
    5c3a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5c3c:	490e      	ldr	r1, [pc, #56]	; (5c78 <system_clock_init+0x128>)
    5c3e:	22d0      	movs	r2, #208	; 0xd0
    5c40:	68cb      	ldr	r3, [r1, #12]
    5c42:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5c44:	2bd0      	cmp	r3, #208	; 0xd0
    5c46:	d1fb      	bne.n	5c40 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    5c48:	4a18      	ldr	r2, [pc, #96]	; (5cac <system_clock_init+0x15c>)
    5c4a:	2300      	movs	r3, #0
    5c4c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5c4e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5c50:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    5c52:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    5c54:	a901      	add	r1, sp, #4
    5c56:	2201      	movs	r2, #1
    5c58:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5c5a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    5c5c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5c5e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5c60:	3307      	adds	r3, #7
    5c62:	700b      	strb	r3, [r1, #0]
    5c64:	2000      	movs	r0, #0
    5c66:	4b0e      	ldr	r3, [pc, #56]	; (5ca0 <system_clock_init+0x150>)
    5c68:	4798      	blx	r3
    5c6a:	2000      	movs	r0, #0
    5c6c:	4b0d      	ldr	r3, [pc, #52]	; (5ca4 <system_clock_init+0x154>)
    5c6e:	4798      	blx	r3
#endif
}
    5c70:	b00f      	add	sp, #60	; 0x3c
    5c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    5c74:	3b20      	subs	r3, #32
    5c76:	e7b2      	b.n	5bde <system_clock_init+0x8e>
    5c78:	40000800 	.word	0x40000800
    5c7c:	41004000 	.word	0x41004000
    5c80:	00005ee9 	.word	0x00005ee9
    5c84:	00005971 	.word	0x00005971
    5c88:	00005aa9 	.word	0x00005aa9
    5c8c:	00806024 	.word	0x00806024
    5c90:	000005b9 	.word	0x000005b9
    5c94:	00005a29 	.word	0x00005a29
    5c98:	00005935 	.word	0x00005935
    5c9c:	00005cb1 	.word	0x00005cb1
    5ca0:	00005cd5 	.word	0x00005cd5
    5ca4:	00005d8d 	.word	0x00005d8d
    5ca8:	00005e5d 	.word	0x00005e5d
    5cac:	40000400 	.word	0x40000400

00005cb0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5cb0:	4a06      	ldr	r2, [pc, #24]	; (5ccc <system_gclk_init+0x1c>)
    5cb2:	6993      	ldr	r3, [r2, #24]
    5cb4:	2108      	movs	r1, #8
    5cb6:	430b      	orrs	r3, r1
    5cb8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5cba:	2201      	movs	r2, #1
    5cbc:	4b04      	ldr	r3, [pc, #16]	; (5cd0 <system_gclk_init+0x20>)
    5cbe:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5cc0:	0019      	movs	r1, r3
    5cc2:	780b      	ldrb	r3, [r1, #0]
    5cc4:	4213      	tst	r3, r2
    5cc6:	d1fc      	bne.n	5cc2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5cc8:	4770      	bx	lr
    5cca:	46c0      	nop			; (mov r8, r8)
    5ccc:	40000400 	.word	0x40000400
    5cd0:	40000c00 	.word	0x40000c00

00005cd4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5cd4:	b570      	push	{r4, r5, r6, lr}
    5cd6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5cd8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5cda:	780d      	ldrb	r5, [r1, #0]
    5cdc:	022d      	lsls	r5, r5, #8
    5cde:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5ce0:	784b      	ldrb	r3, [r1, #1]
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	d002      	beq.n	5cec <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5ce6:	2380      	movs	r3, #128	; 0x80
    5ce8:	02db      	lsls	r3, r3, #11
    5cea:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5cec:	7a4b      	ldrb	r3, [r1, #9]
    5cee:	2b00      	cmp	r3, #0
    5cf0:	d002      	beq.n	5cf8 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5cf2:	2380      	movs	r3, #128	; 0x80
    5cf4:	031b      	lsls	r3, r3, #12
    5cf6:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5cf8:	6848      	ldr	r0, [r1, #4]
    5cfa:	2801      	cmp	r0, #1
    5cfc:	d910      	bls.n	5d20 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5cfe:	1e43      	subs	r3, r0, #1
    5d00:	4218      	tst	r0, r3
    5d02:	d134      	bne.n	5d6e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5d04:	2802      	cmp	r0, #2
    5d06:	d930      	bls.n	5d6a <system_gclk_gen_set_config+0x96>
    5d08:	2302      	movs	r3, #2
    5d0a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5d0c:	3201      	adds	r2, #1
						mask <<= 1) {
    5d0e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5d10:	4298      	cmp	r0, r3
    5d12:	d8fb      	bhi.n	5d0c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5d14:	0212      	lsls	r2, r2, #8
    5d16:	4332      	orrs	r2, r6
    5d18:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5d1a:	2380      	movs	r3, #128	; 0x80
    5d1c:	035b      	lsls	r3, r3, #13
    5d1e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5d20:	7a0b      	ldrb	r3, [r1, #8]
    5d22:	2b00      	cmp	r3, #0
    5d24:	d002      	beq.n	5d2c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5d26:	2380      	movs	r3, #128	; 0x80
    5d28:	039b      	lsls	r3, r3, #14
    5d2a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5d2c:	4a13      	ldr	r2, [pc, #76]	; (5d7c <system_gclk_gen_set_config+0xa8>)
    5d2e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5d30:	b25b      	sxtb	r3, r3
    5d32:	2b00      	cmp	r3, #0
    5d34:	dbfb      	blt.n	5d2e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    5d36:	4b12      	ldr	r3, [pc, #72]	; (5d80 <system_gclk_gen_set_config+0xac>)
    5d38:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5d3a:	4b12      	ldr	r3, [pc, #72]	; (5d84 <system_gclk_gen_set_config+0xb0>)
    5d3c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5d3e:	4a0f      	ldr	r2, [pc, #60]	; (5d7c <system_gclk_gen_set_config+0xa8>)
    5d40:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5d42:	b25b      	sxtb	r3, r3
    5d44:	2b00      	cmp	r3, #0
    5d46:	dbfb      	blt.n	5d40 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5d48:	4b0c      	ldr	r3, [pc, #48]	; (5d7c <system_gclk_gen_set_config+0xa8>)
    5d4a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5d4c:	001a      	movs	r2, r3
    5d4e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5d50:	b25b      	sxtb	r3, r3
    5d52:	2b00      	cmp	r3, #0
    5d54:	dbfb      	blt.n	5d4e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5d56:	4a09      	ldr	r2, [pc, #36]	; (5d7c <system_gclk_gen_set_config+0xa8>)
    5d58:	6853      	ldr	r3, [r2, #4]
    5d5a:	2180      	movs	r1, #128	; 0x80
    5d5c:	0249      	lsls	r1, r1, #9
    5d5e:	400b      	ands	r3, r1
    5d60:	431d      	orrs	r5, r3
    5d62:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5d64:	4b08      	ldr	r3, [pc, #32]	; (5d88 <system_gclk_gen_set_config+0xb4>)
    5d66:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5d68:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5d6a:	2200      	movs	r2, #0
    5d6c:	e7d2      	b.n	5d14 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5d6e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5d70:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5d72:	2380      	movs	r3, #128	; 0x80
    5d74:	029b      	lsls	r3, r3, #10
    5d76:	431d      	orrs	r5, r3
    5d78:	e7d2      	b.n	5d20 <system_gclk_gen_set_config+0x4c>
    5d7a:	46c0      	nop			; (mov r8, r8)
    5d7c:	40000c00 	.word	0x40000c00
    5d80:	000040c1 	.word	0x000040c1
    5d84:	40000c08 	.word	0x40000c08
    5d88:	00004101 	.word	0x00004101

00005d8c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5d8c:	b510      	push	{r4, lr}
    5d8e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5d90:	4a0b      	ldr	r2, [pc, #44]	; (5dc0 <system_gclk_gen_enable+0x34>)
    5d92:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5d94:	b25b      	sxtb	r3, r3
    5d96:	2b00      	cmp	r3, #0
    5d98:	dbfb      	blt.n	5d92 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5d9a:	4b0a      	ldr	r3, [pc, #40]	; (5dc4 <system_gclk_gen_enable+0x38>)
    5d9c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5d9e:	4b0a      	ldr	r3, [pc, #40]	; (5dc8 <system_gclk_gen_enable+0x3c>)
    5da0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5da2:	4a07      	ldr	r2, [pc, #28]	; (5dc0 <system_gclk_gen_enable+0x34>)
    5da4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5da6:	b25b      	sxtb	r3, r3
    5da8:	2b00      	cmp	r3, #0
    5daa:	dbfb      	blt.n	5da4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5dac:	4a04      	ldr	r2, [pc, #16]	; (5dc0 <system_gclk_gen_enable+0x34>)
    5dae:	6851      	ldr	r1, [r2, #4]
    5db0:	2380      	movs	r3, #128	; 0x80
    5db2:	025b      	lsls	r3, r3, #9
    5db4:	430b      	orrs	r3, r1
    5db6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5db8:	4b04      	ldr	r3, [pc, #16]	; (5dcc <system_gclk_gen_enable+0x40>)
    5dba:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5dbc:	bd10      	pop	{r4, pc}
    5dbe:	46c0      	nop			; (mov r8, r8)
    5dc0:	40000c00 	.word	0x40000c00
    5dc4:	000040c1 	.word	0x000040c1
    5dc8:	40000c04 	.word	0x40000c04
    5dcc:	00004101 	.word	0x00004101

00005dd0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5dd0:	b570      	push	{r4, r5, r6, lr}
    5dd2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5dd4:	4a1a      	ldr	r2, [pc, #104]	; (5e40 <system_gclk_gen_get_hz+0x70>)
    5dd6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5dd8:	b25b      	sxtb	r3, r3
    5dda:	2b00      	cmp	r3, #0
    5ddc:	dbfb      	blt.n	5dd6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    5dde:	4b19      	ldr	r3, [pc, #100]	; (5e44 <system_gclk_gen_get_hz+0x74>)
    5de0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5de2:	4b19      	ldr	r3, [pc, #100]	; (5e48 <system_gclk_gen_get_hz+0x78>)
    5de4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5de6:	4a16      	ldr	r2, [pc, #88]	; (5e40 <system_gclk_gen_get_hz+0x70>)
    5de8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5dea:	b25b      	sxtb	r3, r3
    5dec:	2b00      	cmp	r3, #0
    5dee:	dbfb      	blt.n	5de8 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5df0:	4e13      	ldr	r6, [pc, #76]	; (5e40 <system_gclk_gen_get_hz+0x70>)
    5df2:	6870      	ldr	r0, [r6, #4]
    5df4:	04c0      	lsls	r0, r0, #19
    5df6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5df8:	4b14      	ldr	r3, [pc, #80]	; (5e4c <system_gclk_gen_get_hz+0x7c>)
    5dfa:	4798      	blx	r3
    5dfc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5dfe:	4b12      	ldr	r3, [pc, #72]	; (5e48 <system_gclk_gen_get_hz+0x78>)
    5e00:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5e02:	6876      	ldr	r6, [r6, #4]
    5e04:	02f6      	lsls	r6, r6, #11
    5e06:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5e08:	4b11      	ldr	r3, [pc, #68]	; (5e50 <system_gclk_gen_get_hz+0x80>)
    5e0a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e0c:	4a0c      	ldr	r2, [pc, #48]	; (5e40 <system_gclk_gen_get_hz+0x70>)
    5e0e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e10:	b25b      	sxtb	r3, r3
    5e12:	2b00      	cmp	r3, #0
    5e14:	dbfb      	blt.n	5e0e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5e16:	4b0a      	ldr	r3, [pc, #40]	; (5e40 <system_gclk_gen_get_hz+0x70>)
    5e18:	689c      	ldr	r4, [r3, #8]
    5e1a:	0224      	lsls	r4, r4, #8
    5e1c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5e1e:	4b0d      	ldr	r3, [pc, #52]	; (5e54 <system_gclk_gen_get_hz+0x84>)
    5e20:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5e22:	2e00      	cmp	r6, #0
    5e24:	d107      	bne.n	5e36 <system_gclk_gen_get_hz+0x66>
    5e26:	2c01      	cmp	r4, #1
    5e28:	d907      	bls.n	5e3a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5e2a:	0021      	movs	r1, r4
    5e2c:	0028      	movs	r0, r5
    5e2e:	4b0a      	ldr	r3, [pc, #40]	; (5e58 <system_gclk_gen_get_hz+0x88>)
    5e30:	4798      	blx	r3
    5e32:	0005      	movs	r5, r0
    5e34:	e001      	b.n	5e3a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5e36:	3401      	adds	r4, #1
    5e38:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5e3a:	0028      	movs	r0, r5
    5e3c:	bd70      	pop	{r4, r5, r6, pc}
    5e3e:	46c0      	nop			; (mov r8, r8)
    5e40:	40000c00 	.word	0x40000c00
    5e44:	000040c1 	.word	0x000040c1
    5e48:	40000c04 	.word	0x40000c04
    5e4c:	000058a1 	.word	0x000058a1
    5e50:	40000c08 	.word	0x40000c08
    5e54:	00004101 	.word	0x00004101
    5e58:	0000b225 	.word	0x0000b225

00005e5c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5e5c:	b510      	push	{r4, lr}
    5e5e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5e60:	4b06      	ldr	r3, [pc, #24]	; (5e7c <system_gclk_chan_enable+0x20>)
    5e62:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5e64:	4b06      	ldr	r3, [pc, #24]	; (5e80 <system_gclk_chan_enable+0x24>)
    5e66:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5e68:	4a06      	ldr	r2, [pc, #24]	; (5e84 <system_gclk_chan_enable+0x28>)
    5e6a:	8853      	ldrh	r3, [r2, #2]
    5e6c:	2180      	movs	r1, #128	; 0x80
    5e6e:	01c9      	lsls	r1, r1, #7
    5e70:	430b      	orrs	r3, r1
    5e72:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    5e74:	4b04      	ldr	r3, [pc, #16]	; (5e88 <system_gclk_chan_enable+0x2c>)
    5e76:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5e78:	bd10      	pop	{r4, pc}
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	000040c1 	.word	0x000040c1
    5e80:	40000c02 	.word	0x40000c02
    5e84:	40000c00 	.word	0x40000c00
    5e88:	00004101 	.word	0x00004101

00005e8c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5e8c:	b510      	push	{r4, lr}
    5e8e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5e90:	4b0f      	ldr	r3, [pc, #60]	; (5ed0 <system_gclk_chan_disable+0x44>)
    5e92:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5e94:	4b0f      	ldr	r3, [pc, #60]	; (5ed4 <system_gclk_chan_disable+0x48>)
    5e96:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5e98:	4a0f      	ldr	r2, [pc, #60]	; (5ed8 <system_gclk_chan_disable+0x4c>)
    5e9a:	8853      	ldrh	r3, [r2, #2]
    5e9c:	051b      	lsls	r3, r3, #20
    5e9e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5ea0:	8853      	ldrh	r3, [r2, #2]
    5ea2:	490e      	ldr	r1, [pc, #56]	; (5edc <system_gclk_chan_disable+0x50>)
    5ea4:	400b      	ands	r3, r1
    5ea6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5ea8:	8853      	ldrh	r3, [r2, #2]
    5eaa:	490d      	ldr	r1, [pc, #52]	; (5ee0 <system_gclk_chan_disable+0x54>)
    5eac:	400b      	ands	r3, r1
    5eae:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5eb0:	0011      	movs	r1, r2
    5eb2:	2280      	movs	r2, #128	; 0x80
    5eb4:	01d2      	lsls	r2, r2, #7
    5eb6:	884b      	ldrh	r3, [r1, #2]
    5eb8:	4213      	tst	r3, r2
    5eba:	d1fc      	bne.n	5eb6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5ebc:	4906      	ldr	r1, [pc, #24]	; (5ed8 <system_gclk_chan_disable+0x4c>)
    5ebe:	884a      	ldrh	r2, [r1, #2]
    5ec0:	0203      	lsls	r3, r0, #8
    5ec2:	4806      	ldr	r0, [pc, #24]	; (5edc <system_gclk_chan_disable+0x50>)
    5ec4:	4002      	ands	r2, r0
    5ec6:	4313      	orrs	r3, r2
    5ec8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    5eca:	4b06      	ldr	r3, [pc, #24]	; (5ee4 <system_gclk_chan_disable+0x58>)
    5ecc:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5ece:	bd10      	pop	{r4, pc}
    5ed0:	000040c1 	.word	0x000040c1
    5ed4:	40000c02 	.word	0x40000c02
    5ed8:	40000c00 	.word	0x40000c00
    5edc:	fffff0ff 	.word	0xfffff0ff
    5ee0:	ffffbfff 	.word	0xffffbfff
    5ee4:	00004101 	.word	0x00004101

00005ee8 <system_gclk_chan_set_config>:
{
    5ee8:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5eea:	780c      	ldrb	r4, [r1, #0]
    5eec:	0224      	lsls	r4, r4, #8
    5eee:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5ef0:	4b02      	ldr	r3, [pc, #8]	; (5efc <system_gclk_chan_set_config+0x14>)
    5ef2:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5ef4:	b2a4      	uxth	r4, r4
    5ef6:	4b02      	ldr	r3, [pc, #8]	; (5f00 <system_gclk_chan_set_config+0x18>)
    5ef8:	805c      	strh	r4, [r3, #2]
}
    5efa:	bd10      	pop	{r4, pc}
    5efc:	00005e8d 	.word	0x00005e8d
    5f00:	40000c00 	.word	0x40000c00

00005f04 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5f04:	b510      	push	{r4, lr}
    5f06:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5f08:	4b06      	ldr	r3, [pc, #24]	; (5f24 <system_gclk_chan_get_hz+0x20>)
    5f0a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5f0c:	4b06      	ldr	r3, [pc, #24]	; (5f28 <system_gclk_chan_get_hz+0x24>)
    5f0e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5f10:	4b06      	ldr	r3, [pc, #24]	; (5f2c <system_gclk_chan_get_hz+0x28>)
    5f12:	885c      	ldrh	r4, [r3, #2]
    5f14:	0524      	lsls	r4, r4, #20
    5f16:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5f18:	4b05      	ldr	r3, [pc, #20]	; (5f30 <system_gclk_chan_get_hz+0x2c>)
    5f1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5f1c:	0020      	movs	r0, r4
    5f1e:	4b05      	ldr	r3, [pc, #20]	; (5f34 <system_gclk_chan_get_hz+0x30>)
    5f20:	4798      	blx	r3
}
    5f22:	bd10      	pop	{r4, pc}
    5f24:	000040c1 	.word	0x000040c1
    5f28:	40000c02 	.word	0x40000c02
    5f2c:	40000c00 	.word	0x40000c00
    5f30:	00004101 	.word	0x00004101
    5f34:	00005dd1 	.word	0x00005dd1

00005f38 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5f38:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5f3a:	78d3      	ldrb	r3, [r2, #3]
    5f3c:	2b00      	cmp	r3, #0
    5f3e:	d135      	bne.n	5fac <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5f40:	7813      	ldrb	r3, [r2, #0]
    5f42:	2b80      	cmp	r3, #128	; 0x80
    5f44:	d029      	beq.n	5f9a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    5f46:	061b      	lsls	r3, r3, #24
    5f48:	2480      	movs	r4, #128	; 0x80
    5f4a:	0264      	lsls	r4, r4, #9
    5f4c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5f4e:	7854      	ldrb	r4, [r2, #1]
    5f50:	2502      	movs	r5, #2
    5f52:	43ac      	bics	r4, r5
    5f54:	d106      	bne.n	5f64 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5f56:	7894      	ldrb	r4, [r2, #2]
    5f58:	2c00      	cmp	r4, #0
    5f5a:	d120      	bne.n	5f9e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5f5c:	2480      	movs	r4, #128	; 0x80
    5f5e:	02a4      	lsls	r4, r4, #10
    5f60:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5f62:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5f64:	7854      	ldrb	r4, [r2, #1]
    5f66:	3c01      	subs	r4, #1
    5f68:	2c01      	cmp	r4, #1
    5f6a:	d91c      	bls.n	5fa6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5f6c:	040d      	lsls	r5, r1, #16
    5f6e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5f70:	24a0      	movs	r4, #160	; 0xa0
    5f72:	05e4      	lsls	r4, r4, #23
    5f74:	432c      	orrs	r4, r5
    5f76:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5f78:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5f7a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5f7c:	24d0      	movs	r4, #208	; 0xd0
    5f7e:	0624      	lsls	r4, r4, #24
    5f80:	432c      	orrs	r4, r5
    5f82:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5f84:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5f86:	78d4      	ldrb	r4, [r2, #3]
    5f88:	2c00      	cmp	r4, #0
    5f8a:	d122      	bne.n	5fd2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5f8c:	035b      	lsls	r3, r3, #13
    5f8e:	d51c      	bpl.n	5fca <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5f90:	7893      	ldrb	r3, [r2, #2]
    5f92:	2b01      	cmp	r3, #1
    5f94:	d01e      	beq.n	5fd4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5f96:	6141      	str	r1, [r0, #20]
    5f98:	e017      	b.n	5fca <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    5f9a:	2300      	movs	r3, #0
    5f9c:	e7d7      	b.n	5f4e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5f9e:	24c0      	movs	r4, #192	; 0xc0
    5fa0:	02e4      	lsls	r4, r4, #11
    5fa2:	4323      	orrs	r3, r4
    5fa4:	e7dd      	b.n	5f62 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5fa6:	4c0d      	ldr	r4, [pc, #52]	; (5fdc <_system_pinmux_config+0xa4>)
    5fa8:	4023      	ands	r3, r4
    5faa:	e7df      	b.n	5f6c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    5fac:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5fae:	040c      	lsls	r4, r1, #16
    5fb0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5fb2:	23a0      	movs	r3, #160	; 0xa0
    5fb4:	05db      	lsls	r3, r3, #23
    5fb6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5fb8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5fba:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5fbc:	23d0      	movs	r3, #208	; 0xd0
    5fbe:	061b      	lsls	r3, r3, #24
    5fc0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5fc2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5fc4:	78d3      	ldrb	r3, [r2, #3]
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d103      	bne.n	5fd2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5fca:	7853      	ldrb	r3, [r2, #1]
    5fcc:	3b01      	subs	r3, #1
    5fce:	2b01      	cmp	r3, #1
    5fd0:	d902      	bls.n	5fd8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5fd2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5fd4:	6181      	str	r1, [r0, #24]
    5fd6:	e7f8      	b.n	5fca <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    5fd8:	6081      	str	r1, [r0, #8]
}
    5fda:	e7fa      	b.n	5fd2 <_system_pinmux_config+0x9a>
    5fdc:	fffbffff 	.word	0xfffbffff

00005fe0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5fe0:	b510      	push	{r4, lr}
    5fe2:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5fe4:	09c1      	lsrs	r1, r0, #7
		return NULL;
    5fe6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5fe8:	2900      	cmp	r1, #0
    5fea:	d104      	bne.n	5ff6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5fec:	0943      	lsrs	r3, r0, #5
    5fee:	01db      	lsls	r3, r3, #7
    5ff0:	4905      	ldr	r1, [pc, #20]	; (6008 <system_pinmux_pin_set_config+0x28>)
    5ff2:	468c      	mov	ip, r1
    5ff4:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5ff6:	241f      	movs	r4, #31
    5ff8:	4020      	ands	r0, r4
    5ffa:	2101      	movs	r1, #1
    5ffc:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5ffe:	0018      	movs	r0, r3
    6000:	4b02      	ldr	r3, [pc, #8]	; (600c <system_pinmux_pin_set_config+0x2c>)
    6002:	4798      	blx	r3
}
    6004:	bd10      	pop	{r4, pc}
    6006:	46c0      	nop			; (mov r8, r8)
    6008:	41004400 	.word	0x41004400
    600c:	00005f39 	.word	0x00005f39

00006010 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    6010:	4770      	bx	lr
	...

00006014 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6014:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6016:	4b05      	ldr	r3, [pc, #20]	; (602c <system_init+0x18>)
    6018:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    601a:	4b05      	ldr	r3, [pc, #20]	; (6030 <system_init+0x1c>)
    601c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    601e:	4b05      	ldr	r3, [pc, #20]	; (6034 <system_init+0x20>)
    6020:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6022:	4b05      	ldr	r3, [pc, #20]	; (6038 <system_init+0x24>)
    6024:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6026:	4b05      	ldr	r3, [pc, #20]	; (603c <system_init+0x28>)
    6028:	4798      	blx	r3
}
    602a:	bd10      	pop	{r4, pc}
    602c:	00005b51 	.word	0x00005b51
    6030:	00004131 	.word	0x00004131
    6034:	00006011 	.word	0x00006011
    6038:	00004241 	.word	0x00004241
    603c:	00006011 	.word	0x00006011

00006040 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    6040:	4b09      	ldr	r3, [pc, #36]	; (6068 <_tcc_get_inst_index+0x28>)
    6042:	4298      	cmp	r0, r3
    6044:	d00c      	beq.n	6060 <_tcc_get_inst_index+0x20>
    6046:	4b09      	ldr	r3, [pc, #36]	; (606c <_tcc_get_inst_index+0x2c>)
    6048:	4298      	cmp	r0, r3
    604a:	d007      	beq.n	605c <_tcc_get_inst_index+0x1c>
    604c:	4a08      	ldr	r2, [pc, #32]	; (6070 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    604e:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    6050:	4290      	cmp	r0, r2
    6052:	d001      	beq.n	6058 <_tcc_get_inst_index+0x18>
}
    6054:	0018      	movs	r0, r3
    6056:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    6058:	3302      	adds	r3, #2
    605a:	e002      	b.n	6062 <_tcc_get_inst_index+0x22>
    605c:	2301      	movs	r3, #1
    605e:	e000      	b.n	6062 <_tcc_get_inst_index+0x22>
    6060:	2300      	movs	r3, #0
			return i;
    6062:	b2db      	uxtb	r3, r3
    6064:	e7f6      	b.n	6054 <_tcc_get_inst_index+0x14>
    6066:	46c0      	nop			; (mov r8, r8)
    6068:	42002000 	.word	0x42002000
    606c:	42002400 	.word	0x42002400
    6070:	42002800 	.word	0x42002800

00006074 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    6074:	b510      	push	{r4, lr}
    6076:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    6078:	0008      	movs	r0, r1
    607a:	4b4f      	ldr	r3, [pc, #316]	; (61b8 <tcc_get_config_defaults+0x144>)
    607c:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    607e:	2300      	movs	r3, #0
    6080:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    6082:	0080      	lsls	r0, r0, #2
    6084:	4a4d      	ldr	r2, [pc, #308]	; (61bc <tcc_get_config_defaults+0x148>)
    6086:	5882      	ldr	r2, [r0, r2]
    6088:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    608a:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    608c:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    608e:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    6090:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    6092:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6094:	61e3      	str	r3, [r4, #28]
    6096:	6223      	str	r3, [r4, #32]
    6098:	6263      	str	r3, [r4, #36]	; 0x24
    609a:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    609c:	7523      	strb	r3, [r4, #20]
    609e:	7563      	strb	r3, [r4, #21]
    60a0:	75a3      	strb	r3, [r4, #22]
    60a2:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    60a4:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    60a6:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    60a8:	7423      	strb	r3, [r4, #16]
    60aa:	7463      	strb	r3, [r4, #17]
    60ac:	74a3      	strb	r3, [r4, #18]
    60ae:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    60b0:	222c      	movs	r2, #44	; 0x2c
    60b2:	54a3      	strb	r3, [r4, r2]
    60b4:	3201      	adds	r2, #1
    60b6:	54a3      	strb	r3, [r4, r2]
    60b8:	3201      	adds	r2, #1
    60ba:	54a3      	strb	r3, [r4, r2]
    60bc:	3201      	adds	r2, #1
    60be:	54a3      	strb	r3, [r4, r2]
    60c0:	3201      	adds	r2, #1
    60c2:	54a3      	strb	r3, [r4, r2]
    60c4:	3201      	adds	r2, #1
    60c6:	54a3      	strb	r3, [r4, r2]
    60c8:	3201      	adds	r2, #1
    60ca:	54a3      	strb	r3, [r4, r2]
    60cc:	3201      	adds	r2, #1
    60ce:	54a3      	strb	r3, [r4, r2]
    60d0:	3201      	adds	r2, #1
    60d2:	54a3      	strb	r3, [r4, r2]
    60d4:	3201      	adds	r2, #1
    60d6:	54a3      	strb	r3, [r4, r2]
    60d8:	3201      	adds	r2, #1
    60da:	54a3      	strb	r3, [r4, r2]
    60dc:	3201      	adds	r2, #1
    60de:	54a3      	strb	r3, [r4, r2]
    60e0:	3201      	adds	r2, #1
    60e2:	54a3      	strb	r3, [r4, r2]
    60e4:	3201      	adds	r2, #1
    60e6:	54a3      	strb	r3, [r4, r2]
    60e8:	3201      	adds	r2, #1
    60ea:	54a3      	strb	r3, [r4, r2]
    60ec:	3201      	adds	r2, #1
    60ee:	54a3      	strb	r3, [r4, r2]
    60f0:	3201      	adds	r2, #1
    60f2:	54a3      	strb	r3, [r4, r2]
    60f4:	3201      	adds	r2, #1
    60f6:	54a3      	strb	r3, [r4, r2]
    60f8:	3201      	adds	r2, #1
    60fa:	54a3      	strb	r3, [r4, r2]
    60fc:	3201      	adds	r2, #1
    60fe:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    6100:	3201      	adds	r2, #1
    6102:	54a3      	strb	r3, [r4, r2]
    6104:	3201      	adds	r2, #1
    6106:	54a3      	strb	r3, [r4, r2]
    6108:	3201      	adds	r2, #1
    610a:	54a3      	strb	r3, [r4, r2]
    610c:	3201      	adds	r2, #1
    610e:	54a3      	strb	r3, [r4, r2]
    6110:	3201      	adds	r2, #1
    6112:	54a3      	strb	r3, [r4, r2]
    6114:	3201      	adds	r2, #1
    6116:	54a3      	strb	r3, [r4, r2]
    6118:	3201      	adds	r2, #1
    611a:	54a3      	strb	r3, [r4, r2]
    611c:	3201      	adds	r2, #1
    611e:	54a3      	strb	r3, [r4, r2]
    6120:	3201      	adds	r2, #1
    6122:	54a3      	strb	r3, [r4, r2]
    6124:	3201      	adds	r2, #1
    6126:	54a3      	strb	r3, [r4, r2]
    6128:	3201      	adds	r2, #1
    612a:	54a3      	strb	r3, [r4, r2]
    612c:	3201      	adds	r2, #1
    612e:	54a3      	strb	r3, [r4, r2]
    6130:	3201      	adds	r2, #1
    6132:	54a3      	strb	r3, [r4, r2]
    6134:	3201      	adds	r2, #1
    6136:	54a3      	strb	r3, [r4, r2]
    6138:	3201      	adds	r2, #1
    613a:	54a3      	strb	r3, [r4, r2]
    613c:	3201      	adds	r2, #1
    613e:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    6140:	3201      	adds	r2, #1
    6142:	54a3      	strb	r3, [r4, r2]
    6144:	3201      	adds	r2, #1
    6146:	54a3      	strb	r3, [r4, r2]
    6148:	3201      	adds	r2, #1
    614a:	54a3      	strb	r3, [r4, r2]
    614c:	3201      	adds	r2, #1
    614e:	54a3      	strb	r3, [r4, r2]
    6150:	3201      	adds	r2, #1
    6152:	54a3      	strb	r3, [r4, r2]
    6154:	3201      	adds	r2, #1
    6156:	54a3      	strb	r3, [r4, r2]
    6158:	3201      	adds	r2, #1
    615a:	54a3      	strb	r3, [r4, r2]
    615c:	3201      	adds	r2, #1
    615e:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    6160:	3241      	adds	r2, #65	; 0x41
    6162:	54a3      	strb	r3, [r4, r2]
    6164:	65a3      	str	r3, [r4, #88]	; 0x58
    6166:	67a3      	str	r3, [r4, #120]	; 0x78
    6168:	3201      	adds	r2, #1
    616a:	54a3      	strb	r3, [r4, r2]
    616c:	65e3      	str	r3, [r4, #92]	; 0x5c
    616e:	67e3      	str	r3, [r4, #124]	; 0x7c
    6170:	3201      	adds	r2, #1
    6172:	54a3      	strb	r3, [r4, r2]
    6174:	6623      	str	r3, [r4, #96]	; 0x60
    6176:	3a1a      	subs	r2, #26
    6178:	50a3      	str	r3, [r4, r2]
    617a:	321b      	adds	r2, #27
    617c:	54a3      	strb	r3, [r4, r2]
    617e:	6663      	str	r3, [r4, #100]	; 0x64
    6180:	3a17      	subs	r2, #23
    6182:	50a3      	str	r3, [r4, r2]
    6184:	3218      	adds	r2, #24
    6186:	54a3      	strb	r3, [r4, r2]
    6188:	66a3      	str	r3, [r4, #104]	; 0x68
    618a:	3a14      	subs	r2, #20
    618c:	50a3      	str	r3, [r4, r2]
    618e:	3215      	adds	r2, #21
    6190:	54a3      	strb	r3, [r4, r2]
    6192:	66e3      	str	r3, [r4, #108]	; 0x6c
    6194:	3a11      	subs	r2, #17
    6196:	50a3      	str	r3, [r4, r2]
    6198:	3212      	adds	r2, #18
    619a:	54a3      	strb	r3, [r4, r2]
    619c:	6723      	str	r3, [r4, #112]	; 0x70
    619e:	3a0e      	subs	r2, #14
    61a0:	50a3      	str	r3, [r4, r2]
    61a2:	320f      	adds	r2, #15
    61a4:	54a3      	strb	r3, [r4, r2]
    61a6:	6763      	str	r3, [r4, #116]	; 0x74
    61a8:	3a0b      	subs	r2, #11
    61aa:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    61ac:	2101      	movs	r1, #1
    61ae:	320c      	adds	r2, #12
    61b0:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    61b2:	3201      	adds	r2, #1
    61b4:	54a3      	strb	r3, [r4, r2]
}
    61b6:	bd10      	pop	{r4, pc}
    61b8:	00006041 	.word	0x00006041
    61bc:	0000dd38 	.word	0x0000dd38

000061c0 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    61c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61c2:	46de      	mov	lr, fp
    61c4:	4657      	mov	r7, sl
    61c6:	464e      	mov	r6, r9
    61c8:	4645      	mov	r5, r8
    61ca:	b5e0      	push	{r5, r6, r7, lr}
    61cc:	b091      	sub	sp, #68	; 0x44
    61ce:	9001      	str	r0, [sp, #4]
    61d0:	000c      	movs	r4, r1
    61d2:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    61d4:	0008      	movs	r0, r1
    61d6:	4bc3      	ldr	r3, [pc, #780]	; (64e4 <tcc_init+0x324>)
    61d8:	4798      	blx	r3
    61da:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    61dc:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    61de:	48c2      	ldr	r0, [pc, #776]	; (64e8 <tcc_init+0x328>)
    61e0:	6a02      	ldr	r2, [r0, #32]
    61e2:	009e      	lsls	r6, r3, #2
    61e4:	4fc1      	ldr	r7, [pc, #772]	; (64ec <tcc_init+0x32c>)
    61e6:	59f7      	ldr	r7, [r6, r7]
    61e8:	433a      	orrs	r2, r7
    61ea:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    61ec:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    61ee:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    61f0:	0792      	lsls	r2, r2, #30
    61f2:	d506      	bpl.n	6202 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    61f4:	b011      	add	sp, #68	; 0x44
    61f6:	bc3c      	pop	{r2, r3, r4, r5}
    61f8:	4690      	mov	r8, r2
    61fa:	4699      	mov	r9, r3
    61fc:	46a2      	mov	sl, r4
    61fe:	46ab      	mov	fp, r5
    6200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    6202:	6822      	ldr	r2, [r4, #0]
    6204:	2701      	movs	r7, #1
    6206:	4017      	ands	r7, r2
    6208:	d1f4      	bne.n	61f4 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    620a:	48b9      	ldr	r0, [pc, #740]	; (64f0 <tcc_init+0x330>)
    620c:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    620e:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    6210:	682e      	ldr	r6, [r5, #0]
    6212:	42b2      	cmp	r2, r6
    6214:	d3ee      	bcc.n	61f4 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    6216:	686e      	ldr	r6, [r5, #4]
    6218:	42b2      	cmp	r2, r6
    621a:	d3eb      	bcc.n	61f4 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    621c:	69e8      	ldr	r0, [r5, #28]
    621e:	4282      	cmp	r2, r0
    6220:	d200      	bcs.n	6224 <tcc_init+0x64>
    6222:	e1b9      	b.n	6598 <tcc_init+0x3d8>
    6224:	6a28      	ldr	r0, [r5, #32]
    6226:	4282      	cmp	r2, r0
    6228:	d200      	bcs.n	622c <tcc_init+0x6c>
    622a:	e1b7      	b.n	659c <tcc_init+0x3dc>
    622c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    622e:	4282      	cmp	r2, r0
    6230:	d200      	bcs.n	6234 <tcc_init+0x74>
    6232:	e1b5      	b.n	65a0 <tcc_init+0x3e0>
    6234:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6236:	4282      	cmp	r2, r0
    6238:	d200      	bcs.n	623c <tcc_init+0x7c>
    623a:	e1b3      	b.n	65a4 <tcc_init+0x3e4>
    623c:	2298      	movs	r2, #152	; 0x98
    623e:	4694      	mov	ip, r2
    6240:	44ac      	add	ip, r5
    6242:	4662      	mov	r2, ip
    6244:	9208      	str	r2, [sp, #32]
    6246:	2000      	movs	r0, #0
    6248:	e003      	b.n	6252 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    624a:	3001      	adds	r0, #1
    624c:	3201      	adds	r2, #1
    624e:	2808      	cmp	r0, #8
    6250:	d008      	beq.n	6264 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    6252:	7816      	ldrb	r6, [r2, #0]
    6254:	2e00      	cmp	r6, #0
    6256:	d0f8      	beq.n	624a <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    6258:	4ea6      	ldr	r6, [pc, #664]	; (64f4 <tcc_init+0x334>)
    625a:	5c76      	ldrb	r6, [r6, r1]
    625c:	4286      	cmp	r6, r0
    625e:	dcf4      	bgt.n	624a <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    6260:	2017      	movs	r0, #23
    6262:	e7c7      	b.n	61f4 <tcc_init+0x34>
    6264:	2200      	movs	r2, #0
    6266:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    6268:	2080      	movs	r0, #128	; 0x80
    626a:	0440      	lsls	r0, r0, #17
    626c:	4684      	mov	ip, r0
    626e:	e002      	b.n	6276 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    6270:	3201      	adds	r2, #1
    6272:	2a04      	cmp	r2, #4
    6274:	d00e      	beq.n	6294 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    6276:	18a8      	adds	r0, r5, r2
    6278:	7c00      	ldrb	r0, [r0, #16]
    627a:	2801      	cmp	r0, #1
    627c:	d1f8      	bne.n	6270 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    627e:	489e      	ldr	r0, [pc, #632]	; (64f8 <tcc_init+0x338>)
    6280:	5c40      	ldrb	r0, [r0, r1]
    6282:	4290      	cmp	r0, r2
    6284:	da00      	bge.n	6288 <tcc_init+0xc8>
    6286:	e18f      	b.n	65a8 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    6288:	4660      	mov	r0, ip
    628a:	4090      	lsls	r0, r2
    628c:	9e02      	ldr	r6, [sp, #8]
    628e:	4306      	orrs	r6, r0
    6290:	9602      	str	r6, [sp, #8]
    6292:	e7ed      	b.n	6270 <tcc_init+0xb0>
	if (config->run_in_standby) {
    6294:	329d      	adds	r2, #157	; 0x9d
    6296:	5caa      	ldrb	r2, [r5, r2]
    6298:	2a00      	cmp	r2, #0
    629a:	d004      	beq.n	62a6 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    629c:	2280      	movs	r2, #128	; 0x80
    629e:	0112      	lsls	r2, r2, #4
    62a0:	9902      	ldr	r1, [sp, #8]
    62a2:	4311      	orrs	r1, r2
    62a4:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    62a6:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    62a8:	1e51      	subs	r1, r2, #1
    62aa:	418a      	sbcs	r2, r1
    62ac:	0092      	lsls	r2, r2, #2
    62ae:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    62b0:	7a6a      	ldrb	r2, [r5, #9]
    62b2:	2a01      	cmp	r2, #1
    62b4:	d022      	beq.n	62fc <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    62b6:	4a90      	ldr	r2, [pc, #576]	; (64f8 <tcc_init+0x338>)
    62b8:	5cd2      	ldrb	r2, [r2, r3]
    62ba:	0011      	movs	r1, r2
    62bc:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    62be:	2235      	movs	r2, #53	; 0x35
    62c0:	5caa      	ldrb	r2, [r5, r2]
    62c2:	428a      	cmp	r2, r1
    62c4:	d300      	bcc.n	62c8 <tcc_init+0x108>
    62c6:	e179      	b.n	65bc <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    62c8:	212c      	movs	r1, #44	; 0x2c
    62ca:	5c69      	ldrb	r1, [r5, r1]
    62cc:	290f      	cmp	r1, #15
    62ce:	d900      	bls.n	62d2 <tcc_init+0x112>
    62d0:	e174      	b.n	65bc <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    62d2:	7b28      	ldrb	r0, [r5, #12]
    62d4:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    62d6:	7ae8      	ldrb	r0, [r5, #11]
    62d8:	900b      	str	r0, [sp, #44]	; 0x2c
    62da:	202d      	movs	r0, #45	; 0x2d
    62dc:	4682      	mov	sl, r0
    62de:	44aa      	add	sl, r5
    62e0:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    62e2:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    62e4:	ae0e      	add	r6, sp, #56	; 0x38
    62e6:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    62e8:	26c0      	movs	r6, #192	; 0xc0
    62ea:	0136      	lsls	r6, r6, #4
    62ec:	46b1      	mov	r9, r6
    62ee:	4684      	mov	ip, r0
    62f0:	46a0      	mov	r8, r4
    62f2:	0028      	movs	r0, r5
    62f4:	4655      	mov	r5, sl
    62f6:	9309      	str	r3, [sp, #36]	; 0x24
    62f8:	4682      	mov	sl, r0
    62fa:	e035      	b.n	6368 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    62fc:	9906      	ldr	r1, [sp, #24]
    62fe:	4311      	orrs	r1, r2
    6300:	9106      	str	r1, [sp, #24]
    6302:	e7d8      	b.n	62b6 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    6304:	0292      	lsls	r2, r2, #10
    6306:	464f      	mov	r7, r9
    6308:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    630a:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    630c:	7919      	ldrb	r1, [r3, #4]
    630e:	468b      	mov	fp, r1
    6310:	2103      	movs	r1, #3
    6312:	465f      	mov	r7, fp
    6314:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6316:	430a      	orrs	r2, r1
    6318:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    631a:	795a      	ldrb	r2, [r3, #5]
    631c:	0152      	lsls	r2, r2, #5
    631e:	2160      	movs	r1, #96	; 0x60
    6320:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6322:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    6324:	7999      	ldrb	r1, [r3, #6]
    6326:	0209      	lsls	r1, r1, #8
    6328:	26c0      	movs	r6, #192	; 0xc0
    632a:	00b6      	lsls	r6, r6, #2
    632c:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    632e:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    6330:	79da      	ldrb	r2, [r3, #7]
    6332:	0312      	lsls	r2, r2, #12
    6334:	21e0      	movs	r1, #224	; 0xe0
    6336:	01c9      	lsls	r1, r1, #7
    6338:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    633a:	4316      	orrs	r6, r2
    633c:	4334      	orrs	r4, r6
    633e:	9a03      	ldr	r2, [sp, #12]
    6340:	4314      	orrs	r4, r2
    6342:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    6344:	4662      	mov	r2, ip
    6346:	9907      	ldr	r1, [sp, #28]
    6348:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    634a:	2a04      	cmp	r2, #4
    634c:	d02a      	beq.n	63a4 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    634e:	7c9a      	ldrb	r2, [r3, #18]
    6350:	9905      	ldr	r1, [sp, #20]
    6352:	4291      	cmp	r1, r2
    6354:	d800      	bhi.n	6358 <tcc_init+0x198>
    6356:	e131      	b.n	65bc <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    6358:	7a59      	ldrb	r1, [r3, #9]
    635a:	350a      	adds	r5, #10
    635c:	2304      	movs	r3, #4
    635e:	469b      	mov	fp, r3
    6360:	44dc      	add	ip, fp
    6362:	290f      	cmp	r1, #15
    6364:	d900      	bls.n	6368 <tcc_init+0x1a8>
    6366:	e129      	b.n	65bc <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6368:	0609      	lsls	r1, r1, #24
    636a:	23f0      	movs	r3, #240	; 0xf0
    636c:	051b      	lsls	r3, r3, #20
    636e:	4019      	ands	r1, r3
    6370:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    6372:	782e      	ldrb	r6, [r5, #0]
    6374:	0436      	lsls	r6, r6, #16
    6376:	20ff      	movs	r0, #255	; 0xff
    6378:	0400      	lsls	r0, r0, #16
    637a:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    637c:	7868      	ldrb	r0, [r5, #1]
    637e:	2480      	movs	r4, #128	; 0x80
    6380:	2800      	cmp	r0, #0
    6382:	d100      	bne.n	6386 <tcc_init+0x1c6>
    6384:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    6386:	7898      	ldrb	r0, [r3, #2]
    6388:	2708      	movs	r7, #8
    638a:	9703      	str	r7, [sp, #12]
    638c:	2800      	cmp	r0, #0
    638e:	d101      	bne.n	6394 <tcc_init+0x1d4>
    6390:	9804      	ldr	r0, [sp, #16]
    6392:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    6394:	78d8      	ldrb	r0, [r3, #3]
    6396:	4683      	mov	fp, r0
    6398:	2010      	movs	r0, #16
    639a:	465f      	mov	r7, fp
    639c:	2f00      	cmp	r7, #0
    639e:	d1b1      	bne.n	6304 <tcc_init+0x144>
    63a0:	9804      	ldr	r0, [sp, #16]
    63a2:	e7af      	b.n	6304 <tcc_init+0x144>
    63a4:	4644      	mov	r4, r8
    63a6:	4655      	mov	r5, sl
    63a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    63aa:	4a52      	ldr	r2, [pc, #328]	; (64f4 <tcc_init+0x334>)
    63ac:	5cd2      	ldrb	r2, [r2, r3]
    63ae:	4691      	mov	r9, r2
    63b0:	4651      	mov	r1, sl
    63b2:	3150      	adds	r1, #80	; 0x50
    63b4:	4650      	mov	r0, sl
    63b6:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    63b8:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    63ba:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    63bc:	2601      	movs	r6, #1
    63be:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    63c0:	2602      	movs	r6, #2
    63c2:	36ff      	adds	r6, #255	; 0xff
    63c4:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    63c6:	2680      	movs	r6, #128	; 0x80
    63c8:	0276      	lsls	r6, r6, #9
    63ca:	46b0      	mov	r8, r6
    63cc:	46a4      	mov	ip, r4
    63ce:	001c      	movs	r4, r3
    63d0:	464b      	mov	r3, r9
    63d2:	e00f      	b.n	63f4 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    63d4:	7806      	ldrb	r6, [r0, #0]
    63d6:	2e00      	cmp	r6, #0
    63d8:	d007      	beq.n	63ea <tcc_init+0x22a>
			if (i >= ow_num) {
    63da:	4293      	cmp	r3, r2
    63dc:	d800      	bhi.n	63e0 <tcc_init+0x220>
    63de:	e0e7      	b.n	65b0 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    63e0:	2e02      	cmp	r6, #2
    63e2:	d014      	beq.n	640e <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    63e4:	4656      	mov	r6, sl
    63e6:	4096      	lsls	r6, r2
    63e8:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    63ea:	3201      	adds	r2, #1
    63ec:	3101      	adds	r1, #1
    63ee:	3002      	adds	r0, #2
    63f0:	2a08      	cmp	r2, #8
    63f2:	d010      	beq.n	6416 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    63f4:	780e      	ldrb	r6, [r1, #0]
    63f6:	2e00      	cmp	r6, #0
    63f8:	d0ec      	beq.n	63d4 <tcc_init+0x214>
			if (i >= ow_num) {
    63fa:	4293      	cmp	r3, r2
    63fc:	d800      	bhi.n	6400 <tcc_init+0x240>
    63fe:	e0d5      	b.n	65ac <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    6400:	4646      	mov	r6, r8
    6402:	4096      	lsls	r6, r2
    6404:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    6406:	7806      	ldrb	r6, [r0, #0]
    6408:	2e00      	cmp	r6, #0
    640a:	d1e9      	bne.n	63e0 <tcc_init+0x220>
    640c:	e7ed      	b.n	63ea <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    640e:	465e      	mov	r6, fp
    6410:	4096      	lsls	r6, r2
    6412:	4337      	orrs	r7, r6
    6414:	e7e9      	b.n	63ea <tcc_init+0x22a>
    6416:	4699      	mov	r9, r3
    6418:	0023      	movs	r3, r4
    641a:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    641c:	7e6a      	ldrb	r2, [r5, #25]
    641e:	0112      	lsls	r2, r2, #4
    6420:	2130      	movs	r1, #48	; 0x30
    6422:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    6424:	7e28      	ldrb	r0, [r5, #24]
    6426:	2207      	movs	r2, #7
    6428:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    642a:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    642c:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    642e:	2080      	movs	r0, #128	; 0x80
    6430:	0240      	lsls	r0, r0, #9
    6432:	000e      	movs	r6, r1
    6434:	e002      	b.n	643c <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    6436:	3201      	adds	r2, #1
    6438:	2a04      	cmp	r2, #4
    643a:	d00b      	beq.n	6454 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    643c:	18a9      	adds	r1, r5, r2
    643e:	7d09      	ldrb	r1, [r1, #20]
    6440:	2900      	cmp	r1, #0
    6442:	d0f8      	beq.n	6436 <tcc_init+0x276>
			if (n >= cc_num) {
    6444:	9905      	ldr	r1, [sp, #20]
    6446:	4291      	cmp	r1, r2
    6448:	dc00      	bgt.n	644c <tcc_init+0x28c>
    644a:	e0b3      	b.n	65b4 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    644c:	0001      	movs	r1, r0
    644e:	4091      	lsls	r1, r2
    6450:	430e      	orrs	r6, r1
    6452:	e7f0      	b.n	6436 <tcc_init+0x276>
    6454:	46b2      	mov	sl, r6
    6456:	9801      	ldr	r0, [sp, #4]
    6458:	0002      	movs	r2, r0
    645a:	3204      	adds	r2, #4
    645c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    645e:	2100      	movs	r1, #0
    6460:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6462:	4282      	cmp	r2, r0
    6464:	d1fc      	bne.n	6460 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    6466:	2200      	movs	r2, #0
    6468:	9801      	ldr	r0, [sp, #4]
    646a:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    646c:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    646e:	0099      	lsls	r1, r3, #2
    6470:	4a22      	ldr	r2, [pc, #136]	; (64fc <tcc_init+0x33c>)
    6472:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    6474:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    6476:	22a0      	movs	r2, #160	; 0xa0
    6478:	5ca9      	ldrb	r1, [r5, r2]
    647a:	3a64      	subs	r2, #100	; 0x64
    647c:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    647e:	a90d      	add	r1, sp, #52	; 0x34
    6480:	7aaa      	ldrb	r2, [r5, #10]
    6482:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    6484:	4a1e      	ldr	r2, [pc, #120]	; (6500 <tcc_init+0x340>)
    6486:	5cd6      	ldrb	r6, [r2, r3]
    6488:	0030      	movs	r0, r6
    648a:	4b1e      	ldr	r3, [pc, #120]	; (6504 <tcc_init+0x344>)
    648c:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    648e:	0030      	movs	r0, r6
    6490:	4b1d      	ldr	r3, [pc, #116]	; (6508 <tcc_init+0x348>)
    6492:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6494:	464b      	mov	r3, r9
    6496:	2b00      	cmp	r3, #0
    6498:	dd3c      	ble.n	6514 <tcc_init+0x354>
    649a:	002e      	movs	r6, r5
    649c:	3658      	adds	r6, #88	; 0x58
    649e:	3398      	adds	r3, #152	; 0x98
    64a0:	4698      	mov	r8, r3
    64a2:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    64a4:	2301      	movs	r3, #1
    64a6:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    64a8:	46ab      	mov	fp, r5
    64aa:	4645      	mov	r5, r8
    64ac:	46a0      	mov	r8, r4
    64ae:	9c08      	ldr	r4, [sp, #32]
    64b0:	e003      	b.n	64ba <tcc_init+0x2fa>
    64b2:	3401      	adds	r4, #1
    64b4:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    64b6:	42ac      	cmp	r4, r5
    64b8:	d02a      	beq.n	6510 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    64ba:	7823      	ldrb	r3, [r4, #0]
    64bc:	2b00      	cmp	r3, #0
    64be:	d0f8      	beq.n	64b2 <tcc_init+0x2f2>
    64c0:	ab0c      	add	r3, sp, #48	; 0x30
    64c2:	464a      	mov	r2, r9
    64c4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    64c6:	2300      	movs	r3, #0
    64c8:	aa0c      	add	r2, sp, #48	; 0x30
    64ca:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    64cc:	0013      	movs	r3, r2
    64ce:	2220      	movs	r2, #32
    64d0:	18b2      	adds	r2, r6, r2
    64d2:	7812      	ldrb	r2, [r2, #0]
    64d4:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    64d6:	464a      	mov	r2, r9
    64d8:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    64da:	7830      	ldrb	r0, [r6, #0]
    64dc:	0019      	movs	r1, r3
    64de:	4b0b      	ldr	r3, [pc, #44]	; (650c <tcc_init+0x34c>)
    64e0:	4798      	blx	r3
    64e2:	e7e6      	b.n	64b2 <tcc_init+0x2f2>
    64e4:	00006041 	.word	0x00006041
    64e8:	40000400 	.word	0x40000400
    64ec:	0000dd24 	.word	0x0000dd24
    64f0:	0000dd38 	.word	0x0000dd38
    64f4:	0000dd44 	.word	0x0000dd44
    64f8:	0000dd30 	.word	0x0000dd30
    64fc:	2000106c 	.word	0x2000106c
    6500:	0000dd34 	.word	0x0000dd34
    6504:	00005ee9 	.word	0x00005ee9
    6508:	00005e5d 	.word	0x00005e5d
    650c:	00005fe1 	.word	0x00005fe1
    6510:	4644      	mov	r4, r8
    6512:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    6514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6516:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    6518:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    651a:	0212      	lsls	r2, r2, #8
    651c:	4313      	orrs	r3, r2
    651e:	9a02      	ldr	r2, [sp, #8]
    6520:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    6522:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6524:	2204      	movs	r2, #4
    6526:	68a3      	ldr	r3, [r4, #8]
    6528:	421a      	tst	r2, r3
    652a:	d1fc      	bne.n	6526 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    652c:	23ff      	movs	r3, #255	; 0xff
    652e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6530:	2204      	movs	r2, #4
    6532:	68a3      	ldr	r3, [r4, #8]
    6534:	421a      	tst	r2, r3
    6536:	d1fc      	bne.n	6532 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    6538:	466b      	mov	r3, sp
    653a:	7e1b      	ldrb	r3, [r3, #24]
    653c:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    653e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6540:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    6542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6544:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    6546:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    6548:	4a1d      	ldr	r2, [pc, #116]	; (65c0 <tcc_init+0x400>)
    654a:	68a3      	ldr	r3, [r4, #8]
    654c:	4213      	tst	r3, r2
    654e:	d1fc      	bne.n	654a <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    6550:	4653      	mov	r3, sl
    6552:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6554:	2210      	movs	r2, #16
    6556:	68a3      	ldr	r3, [r4, #8]
    6558:	421a      	tst	r2, r3
    655a:	d1fc      	bne.n	6556 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    655c:	682b      	ldr	r3, [r5, #0]
    655e:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6560:	4a18      	ldr	r2, [pc, #96]	; (65c4 <tcc_init+0x404>)
    6562:	68a3      	ldr	r3, [r4, #8]
    6564:	4213      	tst	r3, r2
    6566:	d1fc      	bne.n	6562 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    6568:	686b      	ldr	r3, [r5, #4]
    656a:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    656c:	9805      	ldr	r0, [sp, #20]
    656e:	2800      	cmp	r0, #0
    6570:	dd22      	ble.n	65b8 <tcc_init+0x3f8>
    6572:	351c      	adds	r5, #28
    6574:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    6576:	4e14      	ldr	r6, [pc, #80]	; (65c8 <tcc_init+0x408>)
    6578:	0032      	movs	r2, r6
    657a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    657c:	68a3      	ldr	r3, [r4, #8]
    657e:	421a      	tst	r2, r3
    6580:	d1fc      	bne.n	657c <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    6582:	cd04      	ldmia	r5!, {r2}
    6584:	000b      	movs	r3, r1
    6586:	3310      	adds	r3, #16
    6588:	009b      	lsls	r3, r3, #2
    658a:	18e3      	adds	r3, r4, r3
    658c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    658e:	3101      	adds	r1, #1
    6590:	4288      	cmp	r0, r1
    6592:	dcf1      	bgt.n	6578 <tcc_init+0x3b8>
	return STATUS_OK;
    6594:	2000      	movs	r0, #0
    6596:	e62d      	b.n	61f4 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    6598:	2017      	movs	r0, #23
    659a:	e62b      	b.n	61f4 <tcc_init+0x34>
    659c:	2017      	movs	r0, #23
    659e:	e629      	b.n	61f4 <tcc_init+0x34>
    65a0:	2017      	movs	r0, #23
    65a2:	e627      	b.n	61f4 <tcc_init+0x34>
    65a4:	2017      	movs	r0, #23
    65a6:	e625      	b.n	61f4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    65a8:	2017      	movs	r0, #23
    65aa:	e623      	b.n	61f4 <tcc_init+0x34>
			if (i >= ow_num) {
    65ac:	2017      	movs	r0, #23
    65ae:	e621      	b.n	61f4 <tcc_init+0x34>
			if (i >= ow_num) {
    65b0:	2017      	movs	r0, #23
    65b2:	e61f      	b.n	61f4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    65b4:	2017      	movs	r0, #23
    65b6:	e61d      	b.n	61f4 <tcc_init+0x34>
	return STATUS_OK;
    65b8:	2000      	movs	r0, #0
    65ba:	e61b      	b.n	61f4 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    65bc:	2017      	movs	r0, #23
    65be:	e619      	b.n	61f4 <tcc_init+0x34>
    65c0:	00020040 	.word	0x00020040
    65c4:	00040080 	.word	0x00040080
    65c8:	00080100 	.word	0x00080100

000065cc <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    65cc:	0092      	lsls	r2, r2, #2
    65ce:	1883      	adds	r3, r0, r2
    65d0:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    65d2:	4b03      	ldr	r3, [pc, #12]	; (65e0 <tcc_register_callback+0x14>)
    65d4:	58d3      	ldr	r3, [r2, r3]
    65d6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    65d8:	4313      	orrs	r3, r2
    65da:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    65dc:	2000      	movs	r0, #0
    65de:	4770      	bx	lr
    65e0:	0000dd48 	.word	0x0000dd48

000065e4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    65e4:	b570      	push	{r4, r5, r6, lr}
    65e6:	0004      	movs	r4, r0
    65e8:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    65ea:	6800      	ldr	r0, [r0, #0]
    65ec:	4b09      	ldr	r3, [pc, #36]	; (6614 <tcc_enable_callback+0x30>)
    65ee:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    65f0:	4b09      	ldr	r3, [pc, #36]	; (6618 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    65f2:	5c1b      	ldrb	r3, [r3, r0]
    65f4:	221f      	movs	r2, #31
    65f6:	401a      	ands	r2, r3
    65f8:	2301      	movs	r3, #1
    65fa:	4093      	lsls	r3, r2
    65fc:	4a07      	ldr	r2, [pc, #28]	; (661c <tcc_enable_callback+0x38>)
    65fe:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    6600:	00ad      	lsls	r5, r5, #2
    6602:	4b07      	ldr	r3, [pc, #28]	; (6620 <tcc_enable_callback+0x3c>)
    6604:	58ea      	ldr	r2, [r5, r3]
    6606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6608:	4313      	orrs	r3, r2
    660a:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    660c:	6823      	ldr	r3, [r4, #0]
    660e:	629a      	str	r2, [r3, #40]	; 0x28
}
    6610:	bd70      	pop	{r4, r5, r6, pc}
    6612:	46c0      	nop			; (mov r8, r8)
    6614:	00006041 	.word	0x00006041
    6618:	0000dd78 	.word	0x0000dd78
    661c:	e000e100 	.word	0xe000e100
    6620:	0000dd48 	.word	0x0000dd48

00006624 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6624:	b5f0      	push	{r4, r5, r6, r7, lr}
    6626:	46c6      	mov	lr, r8
    6628:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    662a:	0080      	lsls	r0, r0, #2
    662c:	4b0e      	ldr	r3, [pc, #56]	; (6668 <_tcc_interrupt_handler+0x44>)
    662e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6630:	683b      	ldr	r3, [r7, #0]
    6632:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    6634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    6638:	4013      	ands	r3, r2
    663a:	401e      	ands	r6, r3
    663c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    663e:	4b0b      	ldr	r3, [pc, #44]	; (666c <_tcc_interrupt_handler+0x48>)
    6640:	4698      	mov	r8, r3
    6642:	e002      	b.n	664a <_tcc_interrupt_handler+0x26>
    6644:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6646:	2c30      	cmp	r4, #48	; 0x30
    6648:	d00a      	beq.n	6660 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    664a:	4643      	mov	r3, r8
    664c:	58e5      	ldr	r5, [r4, r3]
    664e:	4235      	tst	r5, r6
    6650:	d0f8      	beq.n	6644 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6652:	193b      	adds	r3, r7, r4
    6654:	685b      	ldr	r3, [r3, #4]
    6656:	0038      	movs	r0, r7
    6658:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    665a:	683b      	ldr	r3, [r7, #0]
    665c:	62dd      	str	r5, [r3, #44]	; 0x2c
    665e:	e7f1      	b.n	6644 <_tcc_interrupt_handler+0x20>
		}
	}
}
    6660:	bc04      	pop	{r2}
    6662:	4690      	mov	r8, r2
    6664:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6666:	46c0      	nop			; (mov r8, r8)
    6668:	2000106c 	.word	0x2000106c
    666c:	0000dd48 	.word	0x0000dd48

00006670 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6670:	b510      	push	{r4, lr}
    6672:	2000      	movs	r0, #0
    6674:	4b01      	ldr	r3, [pc, #4]	; (667c <TCC0_Handler+0xc>)
    6676:	4798      	blx	r3
    6678:	bd10      	pop	{r4, pc}
    667a:	46c0      	nop			; (mov r8, r8)
    667c:	00006625 	.word	0x00006625

00006680 <TCC1_Handler>:
    6680:	b510      	push	{r4, lr}
    6682:	2001      	movs	r0, #1
    6684:	4b01      	ldr	r3, [pc, #4]	; (668c <TCC1_Handler+0xc>)
    6686:	4798      	blx	r3
    6688:	bd10      	pop	{r4, pc}
    668a:	46c0      	nop			; (mov r8, r8)
    668c:	00006625 	.word	0x00006625

00006690 <TCC2_Handler>:
    6690:	b510      	push	{r4, lr}
    6692:	2002      	movs	r0, #2
    6694:	4b01      	ldr	r3, [pc, #4]	; (669c <TCC2_Handler+0xc>)
    6696:	4798      	blx	r3
    6698:	bd10      	pop	{r4, pc}
    669a:	46c0      	nop			; (mov r8, r8)
    669c:	00006625 	.word	0x00006625

000066a0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    66a0:	e7fe      	b.n	66a0 <Dummy_Handler>
	...

000066a4 <Reset_Handler>:
{
    66a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    66a6:	4a2a      	ldr	r2, [pc, #168]	; (6750 <Reset_Handler+0xac>)
    66a8:	4b2a      	ldr	r3, [pc, #168]	; (6754 <Reset_Handler+0xb0>)
    66aa:	429a      	cmp	r2, r3
    66ac:	d011      	beq.n	66d2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    66ae:	001a      	movs	r2, r3
    66b0:	4b29      	ldr	r3, [pc, #164]	; (6758 <Reset_Handler+0xb4>)
    66b2:	429a      	cmp	r2, r3
    66b4:	d20d      	bcs.n	66d2 <Reset_Handler+0x2e>
    66b6:	4a29      	ldr	r2, [pc, #164]	; (675c <Reset_Handler+0xb8>)
    66b8:	3303      	adds	r3, #3
    66ba:	1a9b      	subs	r3, r3, r2
    66bc:	089b      	lsrs	r3, r3, #2
    66be:	3301      	adds	r3, #1
    66c0:	009b      	lsls	r3, r3, #2
    66c2:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    66c4:	4823      	ldr	r0, [pc, #140]	; (6754 <Reset_Handler+0xb0>)
    66c6:	4922      	ldr	r1, [pc, #136]	; (6750 <Reset_Handler+0xac>)
    66c8:	588c      	ldr	r4, [r1, r2]
    66ca:	5084      	str	r4, [r0, r2]
    66cc:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    66ce:	429a      	cmp	r2, r3
    66d0:	d1fa      	bne.n	66c8 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    66d2:	4a23      	ldr	r2, [pc, #140]	; (6760 <Reset_Handler+0xbc>)
    66d4:	4b23      	ldr	r3, [pc, #140]	; (6764 <Reset_Handler+0xc0>)
    66d6:	429a      	cmp	r2, r3
    66d8:	d20a      	bcs.n	66f0 <Reset_Handler+0x4c>
    66da:	43d3      	mvns	r3, r2
    66dc:	4921      	ldr	r1, [pc, #132]	; (6764 <Reset_Handler+0xc0>)
    66de:	185b      	adds	r3, r3, r1
    66e0:	2103      	movs	r1, #3
    66e2:	438b      	bics	r3, r1
    66e4:	3304      	adds	r3, #4
    66e6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    66e8:	2100      	movs	r1, #0
    66ea:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    66ec:	4293      	cmp	r3, r2
    66ee:	d1fc      	bne.n	66ea <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    66f0:	4a1d      	ldr	r2, [pc, #116]	; (6768 <Reset_Handler+0xc4>)
    66f2:	21ff      	movs	r1, #255	; 0xff
    66f4:	4b1d      	ldr	r3, [pc, #116]	; (676c <Reset_Handler+0xc8>)
    66f6:	438b      	bics	r3, r1
    66f8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    66fa:	39fd      	subs	r1, #253	; 0xfd
    66fc:	2390      	movs	r3, #144	; 0x90
    66fe:	005b      	lsls	r3, r3, #1
    6700:	4a1b      	ldr	r2, [pc, #108]	; (6770 <Reset_Handler+0xcc>)
    6702:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6704:	4a1b      	ldr	r2, [pc, #108]	; (6774 <Reset_Handler+0xd0>)
    6706:	78d3      	ldrb	r3, [r2, #3]
    6708:	2503      	movs	r5, #3
    670a:	43ab      	bics	r3, r5
    670c:	2402      	movs	r4, #2
    670e:	4323      	orrs	r3, r4
    6710:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6712:	78d3      	ldrb	r3, [r2, #3]
    6714:	270c      	movs	r7, #12
    6716:	43bb      	bics	r3, r7
    6718:	2608      	movs	r6, #8
    671a:	4333      	orrs	r3, r6
    671c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    671e:	4b16      	ldr	r3, [pc, #88]	; (6778 <Reset_Handler+0xd4>)
    6720:	7b98      	ldrb	r0, [r3, #14]
    6722:	2230      	movs	r2, #48	; 0x30
    6724:	4390      	bics	r0, r2
    6726:	2220      	movs	r2, #32
    6728:	4310      	orrs	r0, r2
    672a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    672c:	7b99      	ldrb	r1, [r3, #14]
    672e:	43b9      	bics	r1, r7
    6730:	4331      	orrs	r1, r6
    6732:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6734:	7b9a      	ldrb	r2, [r3, #14]
    6736:	43aa      	bics	r2, r5
    6738:	4322      	orrs	r2, r4
    673a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    673c:	4a0f      	ldr	r2, [pc, #60]	; (677c <Reset_Handler+0xd8>)
    673e:	6853      	ldr	r3, [r2, #4]
    6740:	2180      	movs	r1, #128	; 0x80
    6742:	430b      	orrs	r3, r1
    6744:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6746:	4b0e      	ldr	r3, [pc, #56]	; (6780 <Reset_Handler+0xdc>)
    6748:	4798      	blx	r3
        main();
    674a:	4b0e      	ldr	r3, [pc, #56]	; (6784 <Reset_Handler+0xe0>)
    674c:	4798      	blx	r3
    674e:	e7fe      	b.n	674e <Reset_Handler+0xaa>
    6750:	0000f36c 	.word	0x0000f36c
    6754:	20000000 	.word	0x20000000
    6758:	200002fc 	.word	0x200002fc
    675c:	20000004 	.word	0x20000004
    6760:	200002fc 	.word	0x200002fc
    6764:	200013e0 	.word	0x200013e0
    6768:	e000ed00 	.word	0xe000ed00
    676c:	00000000 	.word	0x00000000
    6770:	41007000 	.word	0x41007000
    6774:	41005000 	.word	0x41005000
    6778:	41004800 	.word	0x41004800
    677c:	41004000 	.word	0x41004000
    6780:	0000b571 	.word	0x0000b571
    6784:	0000ae65 	.word	0x0000ae65

00006788 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6788:	b5f0      	push	{r4, r5, r6, r7, lr}
    678a:	46c6      	mov	lr, r8
    678c:	b500      	push	{lr}
    678e:	000c      	movs	r4, r1
    6790:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    6792:	2800      	cmp	r0, #0
    6794:	d10f      	bne.n	67b6 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    6796:	2a00      	cmp	r2, #0
    6798:	dd11      	ble.n	67be <_read+0x36>
    679a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    679c:	4e09      	ldr	r6, [pc, #36]	; (67c4 <_read+0x3c>)
    679e:	4d0a      	ldr	r5, [pc, #40]	; (67c8 <_read+0x40>)
    67a0:	6830      	ldr	r0, [r6, #0]
    67a2:	0021      	movs	r1, r4
    67a4:	682b      	ldr	r3, [r5, #0]
    67a6:	4798      	blx	r3
		ptr++;
    67a8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    67aa:	42bc      	cmp	r4, r7
    67ac:	d1f8      	bne.n	67a0 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    67ae:	4640      	mov	r0, r8
    67b0:	bc04      	pop	{r2}
    67b2:	4690      	mov	r8, r2
    67b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    67b6:	2301      	movs	r3, #1
    67b8:	425b      	negs	r3, r3
    67ba:	4698      	mov	r8, r3
    67bc:	e7f7      	b.n	67ae <_read+0x26>
	for (; len > 0; --len) {
    67be:	4680      	mov	r8, r0
    67c0:	e7f5      	b.n	67ae <_read+0x26>
    67c2:	46c0      	nop			; (mov r8, r8)
    67c4:	20001080 	.word	0x20001080
    67c8:	20001078 	.word	0x20001078

000067cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    67cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    67ce:	46c6      	mov	lr, r8
    67d0:	b500      	push	{lr}
    67d2:	000e      	movs	r6, r1
    67d4:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    67d6:	3801      	subs	r0, #1
    67d8:	2802      	cmp	r0, #2
    67da:	d810      	bhi.n	67fe <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    67dc:	2a00      	cmp	r2, #0
    67de:	d011      	beq.n	6804 <_write+0x38>
    67e0:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    67e2:	4b0c      	ldr	r3, [pc, #48]	; (6814 <_write+0x48>)
    67e4:	4698      	mov	r8, r3
    67e6:	4f0c      	ldr	r7, [pc, #48]	; (6818 <_write+0x4c>)
    67e8:	4643      	mov	r3, r8
    67ea:	6818      	ldr	r0, [r3, #0]
    67ec:	5d31      	ldrb	r1, [r6, r4]
    67ee:	683b      	ldr	r3, [r7, #0]
    67f0:	4798      	blx	r3
    67f2:	2800      	cmp	r0, #0
    67f4:	db08      	blt.n	6808 <_write+0x3c>
			return -1;
		}
		++nChars;
    67f6:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    67f8:	42a5      	cmp	r5, r4
    67fa:	d1f5      	bne.n	67e8 <_write+0x1c>
    67fc:	e006      	b.n	680c <_write+0x40>
		return -1;
    67fe:	2401      	movs	r4, #1
    6800:	4264      	negs	r4, r4
    6802:	e003      	b.n	680c <_write+0x40>
	for (; len != 0; --len) {
    6804:	0014      	movs	r4, r2
    6806:	e001      	b.n	680c <_write+0x40>
			return -1;
    6808:	2401      	movs	r4, #1
    680a:	4264      	negs	r4, r4
	}
	return nChars;
}
    680c:	0020      	movs	r0, r4
    680e:	bc04      	pop	{r2}
    6810:	4690      	mov	r8, r2
    6812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6814:	20001080 	.word	0x20001080
    6818:	2000107c 	.word	0x2000107c

0000681c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    681c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    681e:	4a06      	ldr	r2, [pc, #24]	; (6838 <_sbrk+0x1c>)
    6820:	6812      	ldr	r2, [r2, #0]
    6822:	2a00      	cmp	r2, #0
    6824:	d004      	beq.n	6830 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    6826:	4a04      	ldr	r2, [pc, #16]	; (6838 <_sbrk+0x1c>)
    6828:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    682a:	18c3      	adds	r3, r0, r3
    682c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    682e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6830:	4902      	ldr	r1, [pc, #8]	; (683c <_sbrk+0x20>)
    6832:	4a01      	ldr	r2, [pc, #4]	; (6838 <_sbrk+0x1c>)
    6834:	6011      	str	r1, [r2, #0]
    6836:	e7f6      	b.n	6826 <_sbrk+0xa>
    6838:	200003f8 	.word	0x200003f8
    683c:	200033e0 	.word	0x200033e0

00006840 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6840:	2001      	movs	r0, #1
    6842:	4240      	negs	r0, r0
    6844:	4770      	bx	lr

00006846 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    6846:	2380      	movs	r3, #128	; 0x80
    6848:	019b      	lsls	r3, r3, #6
    684a:	604b      	str	r3, [r1, #4]

	return 0;
}
    684c:	2000      	movs	r0, #0
    684e:	4770      	bx	lr

00006850 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6850:	2001      	movs	r0, #1
    6852:	4770      	bx	lr

00006854 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6854:	2000      	movs	r0, #0
    6856:	4770      	bx	lr

00006858 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    6858:	b530      	push	{r4, r5, lr}
    685a:	b087      	sub	sp, #28
    685c:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    685e:	aa01      	add	r2, sp, #4
    6860:	23a0      	movs	r3, #160	; 0xa0
    6862:	011b      	lsls	r3, r3, #4
    6864:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    6866:	2300      	movs	r3, #0
    6868:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    686a:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    686c:	21fa      	movs	r1, #250	; 0xfa
    686e:	00c9      	lsls	r1, r1, #3
    6870:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    6872:	2101      	movs	r1, #1
    6874:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    6876:	2004      	movs	r0, #4
    6878:	7210      	strb	r0, [r2, #8]
    687a:	7253      	strb	r3, [r2, #9]
    687c:	7293      	strb	r3, [r2, #10]
    687e:	72d3      	strb	r3, [r2, #11]
    6880:	7311      	strb	r1, [r2, #12]
    6882:	7351      	strb	r1, [r2, #13]
    6884:	4b14      	ldr	r3, [pc, #80]	; (68d8 <disk_initialize+0x80>)
    6886:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6888:	2306      	movs	r3, #6
    688a:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    688c:	4d13      	ldr	r5, [pc, #76]	; (68dc <disk_initialize+0x84>)
    688e:	4914      	ldr	r1, [pc, #80]	; (68e0 <disk_initialize+0x88>)
    6890:	0028      	movs	r0, r5
    6892:	4b14      	ldr	r3, [pc, #80]	; (68e4 <disk_initialize+0x8c>)
    6894:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    6896:	0028      	movs	r0, r5
    6898:	4b13      	ldr	r3, [pc, #76]	; (68e8 <disk_initialize+0x90>)
    689a:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    689c:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    689e:	2c01      	cmp	r4, #1
    68a0:	d901      	bls.n	68a6 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    68a2:	b007      	add	sp, #28
    68a4:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    68a6:	0020      	movs	r0, r4
    68a8:	4b10      	ldr	r3, [pc, #64]	; (68ec <disk_initialize+0x94>)
    68aa:	4798      	blx	r3
    68ac:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    68ae:	2803      	cmp	r0, #3
    68b0:	d106      	bne.n	68c0 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    68b2:	0020      	movs	r0, r4
    68b4:	4b0d      	ldr	r3, [pc, #52]	; (68ec <disk_initialize+0x94>)
    68b6:	4798      	blx	r3
    68b8:	0003      	movs	r3, r0
		return STA_NOINIT;
    68ba:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    68bc:	2b03      	cmp	r3, #3
    68be:	d0f0      	beq.n	68a2 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    68c0:	2b00      	cmp	r3, #0
    68c2:	d106      	bne.n	68d2 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    68c4:	0020      	movs	r0, r4
    68c6:	4b0a      	ldr	r3, [pc, #40]	; (68f0 <disk_initialize+0x98>)
    68c8:	4798      	blx	r3
	return 0;
    68ca:	1e43      	subs	r3, r0, #1
    68cc:	4198      	sbcs	r0, r3
    68ce:	0080      	lsls	r0, r0, #2
    68d0:	e7e7      	b.n	68a2 <disk_initialize+0x4a>
		return STA_NOINIT;
    68d2:	2001      	movs	r0, #1
    68d4:	e7e5      	b.n	68a2 <disk_initialize+0x4a>
    68d6:	46c0      	nop			; (mov r8, r8)
    68d8:	000007de 	.word	0x000007de
    68dc:	20001084 	.word	0x20001084
    68e0:	40001400 	.word	0x40001400
    68e4:	000046d1 	.word	0x000046d1
    68e8:	0000456d 	.word	0x0000456d
    68ec:	0000402d 	.word	0x0000402d
    68f0:	00004069 	.word	0x00004069

000068f4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    68f4:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    68f6:	4b05      	ldr	r3, [pc, #20]	; (690c <disk_status+0x18>)
    68f8:	4798      	blx	r3
    68fa:	1e03      	subs	r3, r0, #0
    68fc:	d004      	beq.n	6908 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    68fe:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    6900:	2b02      	cmp	r3, #2
    6902:	d000      	beq.n	6906 <disk_status+0x12>
	default:
		return STA_NOINIT;
    6904:	3802      	subs	r0, #2
	}
}
    6906:	bd10      	pop	{r4, pc}
		return 0;
    6908:	2000      	movs	r0, #0
    690a:	e7fc      	b.n	6906 <disk_status+0x12>
    690c:	0000402d 	.word	0x0000402d

00006910 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    6910:	b5f0      	push	{r4, r5, r6, r7, lr}
    6912:	46de      	mov	lr, fp
    6914:	464f      	mov	r7, r9
    6916:	4646      	mov	r6, r8
    6918:	b5c0      	push	{r6, r7, lr}
    691a:	b084      	sub	sp, #16
    691c:	9001      	str	r0, [sp, #4]
    691e:	000d      	movs	r5, r1
    6920:	0014      	movs	r4, r2
    6922:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6924:	4b18      	ldr	r3, [pc, #96]	; (6988 <disk_read+0x78>)
    6926:	4798      	blx	r3
    6928:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    692a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    692c:	2e00      	cmp	r6, #0
    692e:	d105      	bne.n	693c <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    6930:	b004      	add	sp, #16
    6932:	bc1c      	pop	{r2, r3, r4}
    6934:	4690      	mov	r8, r2
    6936:	4699      	mov	r9, r3
    6938:	46a3      	mov	fp, r4
    693a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    693c:	a903      	add	r1, sp, #12
    693e:	9801      	ldr	r0, [sp, #4]
    6940:	4b12      	ldr	r3, [pc, #72]	; (698c <disk_read+0x7c>)
    6942:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6944:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    6946:	0032      	movs	r2, r6
    6948:	437a      	muls	r2, r7
    694a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    694c:	9b03      	ldr	r3, [sp, #12]
    694e:	3301      	adds	r3, #1
    6950:	4373      	muls	r3, r6
		return RES_PARERR;
    6952:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    6954:	429a      	cmp	r2, r3
    6956:	d8eb      	bhi.n	6930 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    6958:	2f00      	cmp	r7, #0
    695a:	d011      	beq.n	6980 <disk_read+0x70>
    695c:	0273      	lsls	r3, r6, #9
    695e:	4698      	mov	r8, r3
    6960:	1c7b      	adds	r3, r7, #1
    6962:	469b      	mov	fp, r3
    6964:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6966:	4e0a      	ldr	r6, [pc, #40]	; (6990 <disk_read+0x80>)
    6968:	002a      	movs	r2, r5
    696a:	0021      	movs	r1, r4
    696c:	9801      	ldr	r0, [sp, #4]
    696e:	47b0      	blx	r6
    6970:	2800      	cmp	r0, #0
    6972:	d107      	bne.n	6984 <disk_read+0x74>
    6974:	3701      	adds	r7, #1
    6976:	444c      	add	r4, r9
    6978:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    697a:	455f      	cmp	r7, fp
    697c:	d1f4      	bne.n	6968 <disk_read+0x58>
    697e:	e7d7      	b.n	6930 <disk_read+0x20>
	return RES_OK;
    6980:	2000      	movs	r0, #0
    6982:	e7d5      	b.n	6930 <disk_read+0x20>
			return RES_ERROR;
    6984:	2001      	movs	r0, #1
    6986:	e7d3      	b.n	6930 <disk_read+0x20>
    6988:	00004061 	.word	0x00004061
    698c:	00004045 	.word	0x00004045
    6990:	00004081 	.word	0x00004081

00006994 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    6994:	b5f0      	push	{r4, r5, r6, r7, lr}
    6996:	46de      	mov	lr, fp
    6998:	464f      	mov	r7, r9
    699a:	4646      	mov	r6, r8
    699c:	b5c0      	push	{r6, r7, lr}
    699e:	b084      	sub	sp, #16
    69a0:	9001      	str	r0, [sp, #4]
    69a2:	000d      	movs	r5, r1
    69a4:	0014      	movs	r4, r2
    69a6:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    69a8:	4b18      	ldr	r3, [pc, #96]	; (6a0c <disk_write+0x78>)
    69aa:	4798      	blx	r3
    69ac:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    69ae:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    69b0:	2e00      	cmp	r6, #0
    69b2:	d105      	bne.n	69c0 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    69b4:	b004      	add	sp, #16
    69b6:	bc1c      	pop	{r2, r3, r4}
    69b8:	4690      	mov	r8, r2
    69ba:	4699      	mov	r9, r3
    69bc:	46a3      	mov	fp, r4
    69be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    69c0:	a903      	add	r1, sp, #12
    69c2:	9801      	ldr	r0, [sp, #4]
    69c4:	4b12      	ldr	r3, [pc, #72]	; (6a10 <disk_write+0x7c>)
    69c6:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    69c8:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    69ca:	0032      	movs	r2, r6
    69cc:	437a      	muls	r2, r7
    69ce:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    69d0:	9b03      	ldr	r3, [sp, #12]
    69d2:	3301      	adds	r3, #1
    69d4:	4373      	muls	r3, r6
		return RES_PARERR;
    69d6:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    69d8:	429a      	cmp	r2, r3
    69da:	d8eb      	bhi.n	69b4 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    69dc:	2f00      	cmp	r7, #0
    69de:	d011      	beq.n	6a04 <disk_write+0x70>
    69e0:	0273      	lsls	r3, r6, #9
    69e2:	4698      	mov	r8, r3
    69e4:	1c7b      	adds	r3, r7, #1
    69e6:	469b      	mov	fp, r3
    69e8:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    69ea:	4e0a      	ldr	r6, [pc, #40]	; (6a14 <disk_write+0x80>)
    69ec:	002a      	movs	r2, r5
    69ee:	0021      	movs	r1, r4
    69f0:	9801      	ldr	r0, [sp, #4]
    69f2:	47b0      	blx	r6
    69f4:	2800      	cmp	r0, #0
    69f6:	d107      	bne.n	6a08 <disk_write+0x74>
    69f8:	3701      	adds	r7, #1
    69fa:	444c      	add	r4, r9
    69fc:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    69fe:	455f      	cmp	r7, fp
    6a00:	d1f4      	bne.n	69ec <disk_write+0x58>
    6a02:	e7d7      	b.n	69b4 <disk_write+0x20>
	return RES_OK;
    6a04:	2000      	movs	r0, #0
    6a06:	e7d5      	b.n	69b4 <disk_write+0x20>
			return RES_ERROR;
    6a08:	2001      	movs	r0, #1
    6a0a:	e7d3      	b.n	69b4 <disk_write+0x20>
    6a0c:	00004061 	.word	0x00004061
    6a10:	00004045 	.word	0x00004045
    6a14:	000040a1 	.word	0x000040a1

00006a18 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    6a18:	b510      	push	{r4, lr}
    6a1a:	b082      	sub	sp, #8
    6a1c:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    6a1e:	2901      	cmp	r1, #1
    6a20:	d00b      	beq.n	6a3a <disk_ioctl+0x22>
    6a22:	2900      	cmp	r1, #0
    6a24:	d020      	beq.n	6a68 <disk_ioctl+0x50>
    6a26:	2902      	cmp	r1, #2
    6a28:	d00f      	beq.n	6a4a <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    6a2a:	2004      	movs	r0, #4
	switch (ctrl) {
    6a2c:	2903      	cmp	r1, #3
    6a2e:	d102      	bne.n	6a36 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    6a30:	2301      	movs	r3, #1
    6a32:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    6a34:	2000      	movs	r0, #0
	}

	return res;
}
    6a36:	b002      	add	sp, #8
    6a38:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    6a3a:	a901      	add	r1, sp, #4
    6a3c:	4b0e      	ldr	r3, [pc, #56]	; (6a78 <disk_ioctl+0x60>)
    6a3e:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    6a40:	9b01      	ldr	r3, [sp, #4]
    6a42:	3301      	adds	r3, #1
    6a44:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    6a46:	2000      	movs	r0, #0
	break;
    6a48:	e7f5      	b.n	6a36 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    6a4a:	4b0c      	ldr	r3, [pc, #48]	; (6a7c <disk_ioctl+0x64>)
    6a4c:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    6a4e:	1e43      	subs	r3, r0, #1
    6a50:	b2db      	uxtb	r3, r3
    6a52:	2b01      	cmp	r3, #1
    6a54:	d904      	bls.n	6a60 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6a56:	1f03      	subs	r3, r0, #4
    6a58:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    6a5a:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6a5c:	4213      	tst	r3, r2
    6a5e:	d1ea      	bne.n	6a36 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    6a60:	2300      	movs	r3, #0
    6a62:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    6a64:	2000      	movs	r0, #0
	break;
    6a66:	e7e6      	b.n	6a36 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    6a68:	4b05      	ldr	r3, [pc, #20]	; (6a80 <disk_ioctl+0x68>)
    6a6a:	4798      	blx	r3
    6a6c:	2800      	cmp	r0, #0
    6a6e:	d001      	beq.n	6a74 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    6a70:	2003      	movs	r0, #3
    6a72:	e7e0      	b.n	6a36 <disk_ioctl+0x1e>
			res = RES_OK;
    6a74:	2000      	movs	r0, #0
    6a76:	e7de      	b.n	6a36 <disk_ioctl+0x1e>
    6a78:	00004045 	.word	0x00004045
    6a7c:	00004061 	.word	0x00004061
    6a80:	0000402d 	.word	0x0000402d

00006a84 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    6a84:	b500      	push	{lr}
    6a86:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    6a88:	4669      	mov	r1, sp
    6a8a:	480f      	ldr	r0, [pc, #60]	; (6ac8 <get_fattime+0x44>)
    6a8c:	4b0f      	ldr	r3, [pc, #60]	; (6acc <get_fattime+0x48>)
    6a8e:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    6a90:	466b      	mov	r3, sp
    6a92:	7958      	ldrb	r0, [r3, #5]
    6a94:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    6a96:	791b      	ldrb	r3, [r3, #4]
    6a98:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    6a9a:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    6a9c:	466b      	mov	r3, sp
    6a9e:	789b      	ldrb	r3, [r3, #2]
    6aa0:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    6aa2:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    6aa4:	466b      	mov	r3, sp
    6aa6:	785b      	ldrb	r3, [r3, #1]
    6aa8:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    6aaa:	4318      	orrs	r0, r3
    6aac:	466b      	mov	r3, sp
    6aae:	781b      	ldrb	r3, [r3, #0]
    6ab0:	085b      	lsrs	r3, r3, #1
    6ab2:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    6ab4:	466b      	mov	r3, sp
    6ab6:	88db      	ldrh	r3, [r3, #6]
    6ab8:	4a05      	ldr	r2, [pc, #20]	; (6ad0 <get_fattime+0x4c>)
    6aba:	4694      	mov	ip, r2
    6abc:	4463      	add	r3, ip
    6abe:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    6ac0:	4318      	orrs	r0, r3

	return ul_time;
}
    6ac2:	b003      	add	sp, #12
    6ac4:	bd00      	pop	{pc}
    6ac6:	46c0      	nop			; (mov r8, r8)
    6ac8:	20001084 	.word	0x20001084
    6acc:	00004659 	.word	0x00004659
    6ad0:	fffff844 	.word	0xfffff844

00006ad4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    6ad4:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    6ad6:	2a00      	cmp	r2, #0
    6ad8:	d005      	beq.n	6ae6 <mem_cpy+0x12>
    6ada:	2300      	movs	r3, #0
		*d++ = *s++;
    6adc:	5ccc      	ldrb	r4, [r1, r3]
    6ade:	54c4      	strb	r4, [r0, r3]
    6ae0:	3301      	adds	r3, #1
	while (cnt--)
    6ae2:	4293      	cmp	r3, r2
    6ae4:	d1fa      	bne.n	6adc <mem_cpy+0x8>
}
    6ae6:	bd10      	pop	{r4, pc}

00006ae8 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    6ae8:	2a00      	cmp	r2, #0
    6aea:	d005      	beq.n	6af8 <mem_set+0x10>
    6aec:	0003      	movs	r3, r0
    6aee:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    6af0:	7019      	strb	r1, [r3, #0]
    6af2:	3301      	adds	r3, #1
	while (cnt--)
    6af4:	4293      	cmp	r3, r2
    6af6:	d1fb      	bne.n	6af0 <mem_set+0x8>
}
    6af8:	4770      	bx	lr

00006afa <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    6afa:	0002      	movs	r2, r0
	clst -= 2;
    6afc:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6afe:	6983      	ldr	r3, [r0, #24]
    6b00:	3b02      	subs	r3, #2
    6b02:	2000      	movs	r0, #0
    6b04:	4299      	cmp	r1, r3
    6b06:	d203      	bcs.n	6b10 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    6b08:	7890      	ldrb	r0, [r2, #2]
    6b0a:	4341      	muls	r1, r0
    6b0c:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6b0e:	1808      	adds	r0, r1, r0
}
    6b10:	4770      	bx	lr

00006b12 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    6b12:	0002      	movs	r2, r0
    6b14:	0001      	movs	r1, r0
    6b16:	310b      	adds	r1, #11
	BYTE sum = 0;
    6b18:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    6b1a:	0843      	lsrs	r3, r0, #1
    6b1c:	01c0      	lsls	r0, r0, #7
    6b1e:	4303      	orrs	r3, r0
    6b20:	7810      	ldrb	r0, [r2, #0]
    6b22:	1818      	adds	r0, r3, r0
    6b24:	b2c0      	uxtb	r0, r0
    6b26:	3201      	adds	r2, #1
    6b28:	428a      	cmp	r2, r1
    6b2a:	d1f6      	bne.n	6b1a <sum_sfn+0x8>
	return sum;
}
    6b2c:	4770      	bx	lr
	...

00006b30 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    6b30:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    6b32:	2800      	cmp	r0, #0
    6b34:	d010      	beq.n	6b58 <validate+0x28>
    6b36:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    6b38:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    6b3a:	2a00      	cmp	r2, #0
    6b3c:	d101      	bne.n	6b42 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    6b3e:	0018      	movs	r0, r3
    6b40:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    6b42:	88c2      	ldrh	r2, [r0, #6]
    6b44:	428a      	cmp	r2, r1
    6b46:	d1fa      	bne.n	6b3e <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    6b48:	7840      	ldrb	r0, [r0, #1]
    6b4a:	4b04      	ldr	r3, [pc, #16]	; (6b5c <validate+0x2c>)
    6b4c:	4798      	blx	r3
		return FR_NOT_READY;
    6b4e:	2303      	movs	r3, #3
	return FR_OK;
    6b50:	07c0      	lsls	r0, r0, #31
    6b52:	17c0      	asrs	r0, r0, #31
    6b54:	4003      	ands	r3, r0
    6b56:	e7f2      	b.n	6b3e <validate+0xe>
		return FR_INVALID_OBJECT;
    6b58:	2309      	movs	r3, #9
    6b5a:	e7f0      	b.n	6b3e <validate+0xe>
    6b5c:	000068f5 	.word	0x000068f5

00006b60 <check_fs>:
{
    6b60:	b570      	push	{r4, r5, r6, lr}
    6b62:	0004      	movs	r4, r0
    6b64:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6b66:	0001      	movs	r1, r0
    6b68:	3130      	adds	r1, #48	; 0x30
    6b6a:	7840      	ldrb	r0, [r0, #1]
    6b6c:	2301      	movs	r3, #1
    6b6e:	4d1f      	ldr	r5, [pc, #124]	; (6bec <check_fs+0x8c>)
    6b70:	47a8      	blx	r5
		return 3;
    6b72:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6b74:	2800      	cmp	r0, #0
    6b76:	d001      	beq.n	6b7c <check_fs+0x1c>
}
    6b78:	0018      	movs	r0, r3
    6b7a:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6b7c:	4b1c      	ldr	r3, [pc, #112]	; (6bf0 <check_fs+0x90>)
    6b7e:	5ce3      	ldrb	r3, [r4, r3]
    6b80:	021b      	lsls	r3, r3, #8
    6b82:	4a1c      	ldr	r2, [pc, #112]	; (6bf4 <check_fs+0x94>)
    6b84:	5ca2      	ldrb	r2, [r4, r2]
    6b86:	431a      	orrs	r2, r3
    6b88:	491b      	ldr	r1, [pc, #108]	; (6bf8 <check_fs+0x98>)
    6b8a:	b212      	sxth	r2, r2
		return 2;
    6b8c:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6b8e:	428a      	cmp	r2, r1
    6b90:	d1f2      	bne.n	6b78 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    6b92:	3367      	adds	r3, #103	; 0x67
    6b94:	5ce3      	ldrb	r3, [r4, r3]
    6b96:	061b      	lsls	r3, r3, #24
    6b98:	2268      	movs	r2, #104	; 0x68
    6b9a:	5ca2      	ldrb	r2, [r4, r2]
    6b9c:	0412      	lsls	r2, r2, #16
    6b9e:	4313      	orrs	r3, r2
    6ba0:	2266      	movs	r2, #102	; 0x66
    6ba2:	5ca2      	ldrb	r2, [r4, r2]
    6ba4:	4313      	orrs	r3, r2
    6ba6:	2267      	movs	r2, #103	; 0x67
    6ba8:	5ca2      	ldrb	r2, [r4, r2]
    6baa:	0212      	lsls	r2, r2, #8
    6bac:	4313      	orrs	r3, r2
    6bae:	021b      	lsls	r3, r3, #8
    6bb0:	0a1b      	lsrs	r3, r3, #8
    6bb2:	4a12      	ldr	r2, [pc, #72]	; (6bfc <check_fs+0x9c>)
    6bb4:	4293      	cmp	r3, r2
    6bb6:	d016      	beq.n	6be6 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    6bb8:	2385      	movs	r3, #133	; 0x85
    6bba:	5ce3      	ldrb	r3, [r4, r3]
    6bbc:	061b      	lsls	r3, r3, #24
    6bbe:	2284      	movs	r2, #132	; 0x84
    6bc0:	5ca2      	ldrb	r2, [r4, r2]
    6bc2:	0412      	lsls	r2, r2, #16
    6bc4:	4313      	orrs	r3, r2
    6bc6:	2282      	movs	r2, #130	; 0x82
    6bc8:	5ca2      	ldrb	r2, [r4, r2]
    6bca:	4313      	orrs	r3, r2
    6bcc:	2283      	movs	r2, #131	; 0x83
    6bce:	5ca2      	ldrb	r2, [r4, r2]
    6bd0:	0212      	lsls	r2, r2, #8
    6bd2:	4313      	orrs	r3, r2
    6bd4:	021b      	lsls	r3, r3, #8
    6bd6:	0a1b      	lsrs	r3, r3, #8
    6bd8:	4a09      	ldr	r2, [pc, #36]	; (6c00 <check_fs+0xa0>)
    6bda:	4694      	mov	ip, r2
    6bdc:	4463      	add	r3, ip
    6bde:	1e58      	subs	r0, r3, #1
    6be0:	4183      	sbcs	r3, r0
		return 3;
    6be2:	b2db      	uxtb	r3, r3
    6be4:	e7c8      	b.n	6b78 <check_fs+0x18>
		return 0;
    6be6:	2300      	movs	r3, #0
    6be8:	e7c6      	b.n	6b78 <check_fs+0x18>
    6bea:	46c0      	nop			; (mov r8, r8)
    6bec:	00006911 	.word	0x00006911
    6bf0:	0000022f 	.word	0x0000022f
    6bf4:	0000022e 	.word	0x0000022e
    6bf8:	ffffaa55 	.word	0xffffaa55
    6bfc:	00544146 	.word	0x00544146
    6c00:	ffabbeba 	.word	0xffabbeba

00006c04 <chk_mounted>:
{
    6c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c06:	46d6      	mov	lr, sl
    6c08:	464f      	mov	r7, r9
    6c0a:	4646      	mov	r6, r8
    6c0c:	b5c0      	push	{r6, r7, lr}
    6c0e:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    6c10:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    6c12:	781c      	ldrb	r4, [r3, #0]
    6c14:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    6c16:	2c09      	cmp	r4, #9
    6c18:	d80e      	bhi.n	6c38 <chk_mounted+0x34>
    6c1a:	785a      	ldrb	r2, [r3, #1]
    6c1c:	2a3a      	cmp	r2, #58	; 0x3a
    6c1e:	d001      	beq.n	6c24 <chk_mounted+0x20>
    6c20:	2400      	movs	r4, #0
    6c22:	e00a      	b.n	6c3a <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    6c24:	3302      	adds	r3, #2
    6c26:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    6c28:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    6c2a:	2c07      	cmp	r4, #7
    6c2c:	d905      	bls.n	6c3a <chk_mounted+0x36>
}
    6c2e:	bc1c      	pop	{r2, r3, r4}
    6c30:	4690      	mov	r8, r2
    6c32:	4699      	mov	r9, r3
    6c34:	46a2      	mov	sl, r4
    6c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c38:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    6c3a:	00a3      	lsls	r3, r4, #2
    6c3c:	4ac5      	ldr	r2, [pc, #788]	; (6f54 <chk_mounted+0x350>)
    6c3e:	589e      	ldr	r6, [r3, r2]
    6c40:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    6c42:	2e00      	cmp	r6, #0
    6c44:	d100      	bne.n	6c48 <chk_mounted+0x44>
    6c46:	e0e8      	b.n	6e1a <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    6c48:	7833      	ldrb	r3, [r6, #0]
    6c4a:	2b00      	cmp	r3, #0
    6c4c:	d00d      	beq.n	6c6a <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    6c4e:	7870      	ldrb	r0, [r6, #1]
    6c50:	4bc1      	ldr	r3, [pc, #772]	; (6f58 <chk_mounted+0x354>)
    6c52:	4798      	blx	r3
    6c54:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    6c56:	07c2      	lsls	r2, r0, #31
    6c58:	d407      	bmi.n	6c6a <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    6c5a:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    6c5c:	2d00      	cmp	r5, #0
    6c5e:	d0e6      	beq.n	6c2e <chk_mounted+0x2a>
    6c60:	075b      	lsls	r3, r3, #29
    6c62:	d400      	bmi.n	6c66 <chk_mounted+0x62>
    6c64:	e0db      	b.n	6e1e <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    6c66:	300a      	adds	r0, #10
    6c68:	e7e1      	b.n	6c2e <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    6c6a:	2300      	movs	r3, #0
    6c6c:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    6c6e:	b2e0      	uxtb	r0, r4
    6c70:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    6c72:	4bba      	ldr	r3, [pc, #744]	; (6f5c <chk_mounted+0x358>)
    6c74:	4798      	blx	r3
    6c76:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    6c78:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    6c7a:	07da      	lsls	r2, r3, #31
    6c7c:	d4d7      	bmi.n	6c2e <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6c7e:	2d00      	cmp	r5, #0
    6c80:	d002      	beq.n	6c88 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    6c82:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6c84:	075b      	lsls	r3, r3, #29
    6c86:	d4d2      	bmi.n	6c2e <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    6c88:	2100      	movs	r1, #0
    6c8a:	0030      	movs	r0, r6
    6c8c:	4bb4      	ldr	r3, [pc, #720]	; (6f60 <chk_mounted+0x35c>)
    6c8e:	4798      	blx	r3
    6c90:	0003      	movs	r3, r0
    6c92:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    6c94:	2801      	cmp	r0, #1
    6c96:	d100      	bne.n	6c9a <chk_mounted+0x96>
    6c98:	e09a      	b.n	6dd0 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    6c9a:	2b03      	cmp	r3, #3
    6c9c:	d100      	bne.n	6ca0 <chk_mounted+0x9c>
    6c9e:	e0c0      	b.n	6e22 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6ca0:	200d      	movs	r0, #13
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	d1c3      	bne.n	6c2e <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    6ca6:	333c      	adds	r3, #60	; 0x3c
    6ca8:	5cf2      	ldrb	r2, [r6, r3]
    6caa:	0212      	lsls	r2, r2, #8
    6cac:	3b01      	subs	r3, #1
    6cae:	5cf3      	ldrb	r3, [r6, r3]
    6cb0:	4313      	orrs	r3, r2
    6cb2:	2280      	movs	r2, #128	; 0x80
    6cb4:	0092      	lsls	r2, r2, #2
    6cb6:	b21b      	sxth	r3, r3
    6cb8:	4293      	cmp	r3, r2
    6cba:	d1b8      	bne.n	6c2e <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    6cbc:	2347      	movs	r3, #71	; 0x47
    6cbe:	5cf3      	ldrb	r3, [r6, r3]
    6cc0:	021b      	lsls	r3, r3, #8
    6cc2:	3abb      	subs	r2, #187	; 0xbb
    6cc4:	3aff      	subs	r2, #255	; 0xff
    6cc6:	5cb5      	ldrb	r5, [r6, r2]
    6cc8:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    6cca:	d10d      	bne.n	6ce8 <chk_mounted+0xe4>
    6ccc:	2357      	movs	r3, #87	; 0x57
    6cce:	5cf5      	ldrb	r5, [r6, r3]
    6cd0:	062d      	lsls	r5, r5, #24
    6cd2:	3b01      	subs	r3, #1
    6cd4:	5cf3      	ldrb	r3, [r6, r3]
    6cd6:	041b      	lsls	r3, r3, #16
    6cd8:	431d      	orrs	r5, r3
    6cda:	2354      	movs	r3, #84	; 0x54
    6cdc:	5cf3      	ldrb	r3, [r6, r3]
    6cde:	431d      	orrs	r5, r3
    6ce0:	2355      	movs	r3, #85	; 0x55
    6ce2:	5cf3      	ldrb	r3, [r6, r3]
    6ce4:	021b      	lsls	r3, r3, #8
    6ce6:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    6ce8:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    6cea:	2340      	movs	r3, #64	; 0x40
    6cec:	5cf2      	ldrb	r2, [r6, r3]
    6cee:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    6cf0:	1e53      	subs	r3, r2, #1
    6cf2:	200d      	movs	r0, #13
    6cf4:	2b01      	cmp	r3, #1
    6cf6:	d89a      	bhi.n	6c2e <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    6cf8:	233d      	movs	r3, #61	; 0x3d
    6cfa:	5cf1      	ldrb	r1, [r6, r3]
    6cfc:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    6cfe:	2900      	cmp	r1, #0
    6d00:	d095      	beq.n	6c2e <chk_mounted+0x2a>
    6d02:	1e4b      	subs	r3, r1, #1
    6d04:	4219      	tst	r1, r3
    6d06:	d192      	bne.n	6c2e <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    6d08:	2342      	movs	r3, #66	; 0x42
    6d0a:	5cf3      	ldrb	r3, [r6, r3]
    6d0c:	021b      	lsls	r3, r3, #8
    6d0e:	3034      	adds	r0, #52	; 0x34
    6d10:	5c30      	ldrb	r0, [r6, r0]
    6d12:	4318      	orrs	r0, r3
    6d14:	4680      	mov	r8, r0
    6d16:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    6d18:	200d      	movs	r0, #13
    6d1a:	4643      	mov	r3, r8
    6d1c:	071b      	lsls	r3, r3, #28
    6d1e:	d000      	beq.n	6d22 <chk_mounted+0x11e>
    6d20:	e785      	b.n	6c2e <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    6d22:	2344      	movs	r3, #68	; 0x44
    6d24:	5cf3      	ldrb	r3, [r6, r3]
    6d26:	021b      	lsls	r3, r3, #8
    6d28:	3036      	adds	r0, #54	; 0x36
    6d2a:	5c30      	ldrb	r0, [r6, r0]
    6d2c:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    6d2e:	d10d      	bne.n	6d4c <chk_mounted+0x148>
    6d30:	3353      	adds	r3, #83	; 0x53
    6d32:	5cf3      	ldrb	r3, [r6, r3]
    6d34:	061b      	lsls	r3, r3, #24
    6d36:	2052      	movs	r0, #82	; 0x52
    6d38:	5c30      	ldrb	r0, [r6, r0]
    6d3a:	0400      	lsls	r0, r0, #16
    6d3c:	4303      	orrs	r3, r0
    6d3e:	2050      	movs	r0, #80	; 0x50
    6d40:	5c30      	ldrb	r0, [r6, r0]
    6d42:	4303      	orrs	r3, r0
    6d44:	2051      	movs	r0, #81	; 0x51
    6d46:	5c30      	ldrb	r0, [r6, r0]
    6d48:	0200      	lsls	r0, r0, #8
    6d4a:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    6d4c:	203f      	movs	r0, #63	; 0x3f
    6d4e:	5c30      	ldrb	r0, [r6, r0]
    6d50:	0200      	lsls	r0, r0, #8
    6d52:	273e      	movs	r7, #62	; 0x3e
    6d54:	5df7      	ldrb	r7, [r6, r7]
    6d56:	4307      	orrs	r7, r0
    6d58:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    6d5a:	200d      	movs	r0, #13
    6d5c:	2f00      	cmp	r7, #0
    6d5e:	d100      	bne.n	6d62 <chk_mounted+0x15e>
    6d60:	e765      	b.n	6c2e <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    6d62:	436a      	muls	r2, r5
    6d64:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    6d66:	4642      	mov	r2, r8
    6d68:	0917      	lsrs	r7, r2, #4
    6d6a:	4457      	add	r7, sl
    6d6c:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    6d6e:	42bb      	cmp	r3, r7
    6d70:	d200      	bcs.n	6d74 <chk_mounted+0x170>
    6d72:	e75c      	b.n	6c2e <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    6d74:	1bd8      	subs	r0, r3, r7
    6d76:	4b7b      	ldr	r3, [pc, #492]	; (6f64 <chk_mounted+0x360>)
    6d78:	4798      	blx	r3
    6d7a:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    6d7c:	200d      	movs	r0, #13
    6d7e:	2b00      	cmp	r3, #0
    6d80:	d100      	bne.n	6d84 <chk_mounted+0x180>
    6d82:	e754      	b.n	6c2e <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    6d84:	4a78      	ldr	r2, [pc, #480]	; (6f68 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    6d86:	429a      	cmp	r2, r3
    6d88:	4192      	sbcs	r2, r2
    6d8a:	4252      	negs	r2, r2
    6d8c:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    6d8e:	4977      	ldr	r1, [pc, #476]	; (6f6c <chk_mounted+0x368>)
    6d90:	428b      	cmp	r3, r1
    6d92:	d848      	bhi.n	6e26 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6d94:	3302      	adds	r3, #2
    6d96:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    6d98:	19e7      	adds	r7, r4, r7
    6d9a:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    6d9c:	4454      	add	r4, sl
    6d9e:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    6da0:	200d      	movs	r0, #13
    6da2:	4641      	mov	r1, r8
    6da4:	2900      	cmp	r1, #0
    6da6:	d100      	bne.n	6daa <chk_mounted+0x1a6>
    6da8:	e741      	b.n	6c2e <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    6daa:	444c      	add	r4, r9
    6dac:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    6dae:	2a02      	cmp	r2, #2
    6db0:	d12c      	bne.n	6e0c <chk_mounted+0x208>
    6db2:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6db4:	496e      	ldr	r1, [pc, #440]	; (6f70 <chk_mounted+0x36c>)
    6db6:	468c      	mov	ip, r1
    6db8:	4463      	add	r3, ip
    6dba:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    6dbc:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6dbe:	429d      	cmp	r5, r3
    6dc0:	d200      	bcs.n	6dc4 <chk_mounted+0x1c0>
    6dc2:	e734      	b.n	6c2e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    6dc4:	2301      	movs	r3, #1
    6dc6:	425b      	negs	r3, r3
    6dc8:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    6dca:	2300      	movs	r3, #0
    6dcc:	60f3      	str	r3, [r6, #12]
    6dce:	e0b6      	b.n	6f3e <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    6dd0:	33f2      	adds	r3, #242	; 0xf2
    6dd2:	33ff      	adds	r3, #255	; 0xff
    6dd4:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6dd6:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    6dd8:	2b00      	cmp	r3, #0
    6dda:	d100      	bne.n	6dde <chk_mounted+0x1da>
    6ddc:	e727      	b.n	6c2e <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    6dde:	23fa      	movs	r3, #250	; 0xfa
    6de0:	33ff      	adds	r3, #255	; 0xff
    6de2:	5cf4      	ldrb	r4, [r6, r3]
    6de4:	0624      	lsls	r4, r4, #24
    6de6:	3b01      	subs	r3, #1
    6de8:	5cf3      	ldrb	r3, [r6, r3]
    6dea:	041b      	lsls	r3, r3, #16
    6dec:	431c      	orrs	r4, r3
    6dee:	23fb      	movs	r3, #251	; 0xfb
    6df0:	005b      	lsls	r3, r3, #1
    6df2:	5cf3      	ldrb	r3, [r6, r3]
    6df4:	431c      	orrs	r4, r3
    6df6:	23f8      	movs	r3, #248	; 0xf8
    6df8:	33ff      	adds	r3, #255	; 0xff
    6dfa:	5cf2      	ldrb	r2, [r6, r3]
    6dfc:	0212      	lsls	r2, r2, #8
    6dfe:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    6e00:	0021      	movs	r1, r4
    6e02:	0030      	movs	r0, r6
    6e04:	4b56      	ldr	r3, [pc, #344]	; (6f60 <chk_mounted+0x35c>)
    6e06:	4798      	blx	r3
    6e08:	0003      	movs	r3, r0
    6e0a:	e746      	b.n	6c9a <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    6e0c:	2103      	movs	r1, #3
    6e0e:	4359      	muls	r1, r3
    6e10:	0849      	lsrs	r1, r1, #1
    6e12:	2001      	movs	r0, #1
    6e14:	4003      	ands	r3, r0
    6e16:	18cb      	adds	r3, r1, r3
    6e18:	e7cc      	b.n	6db4 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    6e1a:	200c      	movs	r0, #12
    6e1c:	e707      	b.n	6c2e <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    6e1e:	2000      	movs	r0, #0
    6e20:	e705      	b.n	6c2e <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    6e22:	2001      	movs	r0, #1
    6e24:	e703      	b.n	6c2e <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6e26:	3302      	adds	r3, #2
    6e28:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    6e2a:	19e7      	adds	r7, r4, r7
    6e2c:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    6e2e:	4652      	mov	r2, sl
    6e30:	18a2      	adds	r2, r4, r2
    6e32:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    6e34:	200d      	movs	r0, #13
    6e36:	4642      	mov	r2, r8
    6e38:	2a00      	cmp	r2, #0
    6e3a:	d000      	beq.n	6e3e <chk_mounted+0x23a>
    6e3c:	e6f7      	b.n	6c2e <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    6e3e:	225f      	movs	r2, #95	; 0x5f
    6e40:	5cb2      	ldrb	r2, [r6, r2]
    6e42:	0612      	lsls	r2, r2, #24
    6e44:	215e      	movs	r1, #94	; 0x5e
    6e46:	5c71      	ldrb	r1, [r6, r1]
    6e48:	0409      	lsls	r1, r1, #16
    6e4a:	430a      	orrs	r2, r1
    6e4c:	215c      	movs	r1, #92	; 0x5c
    6e4e:	5c71      	ldrb	r1, [r6, r1]
    6e50:	430a      	orrs	r2, r1
    6e52:	215d      	movs	r1, #93	; 0x5d
    6e54:	5c71      	ldrb	r1, [r6, r1]
    6e56:	0209      	lsls	r1, r1, #8
    6e58:	430a      	orrs	r2, r1
    6e5a:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    6e5c:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6e5e:	4a44      	ldr	r2, [pc, #272]	; (6f70 <chk_mounted+0x36c>)
    6e60:	4694      	mov	ip, r2
    6e62:	4463      	add	r3, ip
    6e64:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    6e66:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6e68:	429d      	cmp	r5, r3
    6e6a:	d200      	bcs.n	6e6e <chk_mounted+0x26a>
    6e6c:	e6df      	b.n	6c2e <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    6e6e:	2301      	movs	r3, #1
    6e70:	425b      	negs	r3, r3
    6e72:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    6e74:	2300      	movs	r3, #0
    6e76:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    6e78:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    6e7a:	3361      	adds	r3, #97	; 0x61
    6e7c:	5cf3      	ldrb	r3, [r6, r3]
    6e7e:	021b      	lsls	r3, r3, #8
    6e80:	2260      	movs	r2, #96	; 0x60
    6e82:	5cb2      	ldrb	r2, [r6, r2]
    6e84:	431a      	orrs	r2, r3
    6e86:	1912      	adds	r2, r2, r4
    6e88:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    6e8a:	0031      	movs	r1, r6
    6e8c:	3130      	adds	r1, #48	; 0x30
    6e8e:	7870      	ldrb	r0, [r6, #1]
    6e90:	2301      	movs	r3, #1
    6e92:	4c38      	ldr	r4, [pc, #224]	; (6f74 <chk_mounted+0x370>)
    6e94:	47a0      	blx	r4
    6e96:	2203      	movs	r2, #3
    6e98:	2800      	cmp	r0, #0
    6e9a:	d150      	bne.n	6f3e <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    6e9c:	4b36      	ldr	r3, [pc, #216]	; (6f78 <chk_mounted+0x374>)
    6e9e:	5cf2      	ldrb	r2, [r6, r3]
    6ea0:	0212      	lsls	r2, r2, #8
    6ea2:	4b36      	ldr	r3, [pc, #216]	; (6f7c <chk_mounted+0x378>)
    6ea4:	5cf3      	ldrb	r3, [r6, r3]
    6ea6:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    6ea8:	4935      	ldr	r1, [pc, #212]	; (6f80 <chk_mounted+0x37c>)
    6eaa:	b21b      	sxth	r3, r3
    6eac:	2203      	movs	r2, #3
    6eae:	428b      	cmp	r3, r1
    6eb0:	d145      	bne.n	6f3e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    6eb2:	2333      	movs	r3, #51	; 0x33
    6eb4:	5cf3      	ldrb	r3, [r6, r3]
    6eb6:	061b      	lsls	r3, r3, #24
    6eb8:	322f      	adds	r2, #47	; 0x2f
    6eba:	5cb2      	ldrb	r2, [r6, r2]
    6ebc:	0412      	lsls	r2, r2, #16
    6ebe:	4313      	orrs	r3, r2
    6ec0:	2230      	movs	r2, #48	; 0x30
    6ec2:	5cb2      	ldrb	r2, [r6, r2]
    6ec4:	4313      	orrs	r3, r2
    6ec6:	2231      	movs	r2, #49	; 0x31
    6ec8:	5cb2      	ldrb	r2, [r6, r2]
    6eca:	0212      	lsls	r2, r2, #8
    6ecc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    6ece:	492d      	ldr	r1, [pc, #180]	; (6f84 <chk_mounted+0x380>)
    6ed0:	2203      	movs	r2, #3
    6ed2:	428b      	cmp	r3, r1
    6ed4:	d133      	bne.n	6f3e <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    6ed6:	4b2c      	ldr	r3, [pc, #176]	; (6f88 <chk_mounted+0x384>)
    6ed8:	5cf3      	ldrb	r3, [r6, r3]
    6eda:	061b      	lsls	r3, r3, #24
    6edc:	4a2b      	ldr	r2, [pc, #172]	; (6f8c <chk_mounted+0x388>)
    6ede:	5cb2      	ldrb	r2, [r6, r2]
    6ee0:	0412      	lsls	r2, r2, #16
    6ee2:	4313      	orrs	r3, r2
    6ee4:	2285      	movs	r2, #133	; 0x85
    6ee6:	0092      	lsls	r2, r2, #2
    6ee8:	5cb2      	ldrb	r2, [r6, r2]
    6eea:	4313      	orrs	r3, r2
    6eec:	4a28      	ldr	r2, [pc, #160]	; (6f90 <chk_mounted+0x38c>)
    6eee:	5cb2      	ldrb	r2, [r6, r2]
    6ef0:	0212      	lsls	r2, r2, #8
    6ef2:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    6ef4:	4927      	ldr	r1, [pc, #156]	; (6f94 <chk_mounted+0x390>)
    6ef6:	2203      	movs	r2, #3
    6ef8:	428b      	cmp	r3, r1
    6efa:	d120      	bne.n	6f3e <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    6efc:	4b26      	ldr	r3, [pc, #152]	; (6f98 <chk_mounted+0x394>)
    6efe:	5cf3      	ldrb	r3, [r6, r3]
    6f00:	061b      	lsls	r3, r3, #24
    6f02:	4a26      	ldr	r2, [pc, #152]	; (6f9c <chk_mounted+0x398>)
    6f04:	5cb2      	ldrb	r2, [r6, r2]
    6f06:	0412      	lsls	r2, r2, #16
    6f08:	4313      	orrs	r3, r2
    6f0a:	2287      	movs	r2, #135	; 0x87
    6f0c:	0092      	lsls	r2, r2, #2
    6f0e:	5cb2      	ldrb	r2, [r6, r2]
    6f10:	4313      	orrs	r3, r2
    6f12:	4a23      	ldr	r2, [pc, #140]	; (6fa0 <chk_mounted+0x39c>)
    6f14:	5cb2      	ldrb	r2, [r6, r2]
    6f16:	0212      	lsls	r2, r2, #8
    6f18:	4313      	orrs	r3, r2
    6f1a:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    6f1c:	4b21      	ldr	r3, [pc, #132]	; (6fa4 <chk_mounted+0x3a0>)
    6f1e:	5cf3      	ldrb	r3, [r6, r3]
    6f20:	061b      	lsls	r3, r3, #24
    6f22:	4a21      	ldr	r2, [pc, #132]	; (6fa8 <chk_mounted+0x3a4>)
    6f24:	5cb2      	ldrb	r2, [r6, r2]
    6f26:	0412      	lsls	r2, r2, #16
    6f28:	4313      	orrs	r3, r2
    6f2a:	2286      	movs	r2, #134	; 0x86
    6f2c:	0092      	lsls	r2, r2, #2
    6f2e:	5cb2      	ldrb	r2, [r6, r2]
    6f30:	4313      	orrs	r3, r2
    6f32:	4a1e      	ldr	r2, [pc, #120]	; (6fac <chk_mounted+0x3a8>)
    6f34:	5cb2      	ldrb	r2, [r6, r2]
    6f36:	0212      	lsls	r2, r2, #8
    6f38:	4313      	orrs	r3, r2
    6f3a:	6133      	str	r3, [r6, #16]
    6f3c:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    6f3e:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    6f40:	4a1b      	ldr	r2, [pc, #108]	; (6fb0 <chk_mounted+0x3ac>)
    6f42:	8813      	ldrh	r3, [r2, #0]
    6f44:	3301      	adds	r3, #1
    6f46:	b29b      	uxth	r3, r3
    6f48:	8013      	strh	r3, [r2, #0]
    6f4a:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    6f4c:	2000      	movs	r0, #0
    6f4e:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    6f50:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    6f52:	e66c      	b.n	6c2e <chk_mounted+0x2a>
    6f54:	200003fc 	.word	0x200003fc
    6f58:	000068f5 	.word	0x000068f5
    6f5c:	00006859 	.word	0x00006859
    6f60:	00006b61 	.word	0x00006b61
    6f64:	0000b225 	.word	0x0000b225
    6f68:	00000ff5 	.word	0x00000ff5
    6f6c:	0000fff5 	.word	0x0000fff5
    6f70:	000001ff 	.word	0x000001ff
    6f74:	00006911 	.word	0x00006911
    6f78:	0000022f 	.word	0x0000022f
    6f7c:	0000022e 	.word	0x0000022e
    6f80:	ffffaa55 	.word	0xffffaa55
    6f84:	41615252 	.word	0x41615252
    6f88:	00000217 	.word	0x00000217
    6f8c:	00000216 	.word	0x00000216
    6f90:	00000215 	.word	0x00000215
    6f94:	61417272 	.word	0x61417272
    6f98:	0000021f 	.word	0x0000021f
    6f9c:	0000021e 	.word	0x0000021e
    6fa0:	0000021d 	.word	0x0000021d
    6fa4:	0000021b 	.word	0x0000021b
    6fa8:	0000021a 	.word	0x0000021a
    6fac:	00000219 	.word	0x00000219
    6fb0:	2000041c 	.word	0x2000041c

00006fb4 <move_window>:
{
    6fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fb6:	46ce      	mov	lr, r9
    6fb8:	b500      	push	{lr}
    6fba:	b082      	sub	sp, #8
    6fbc:	0004      	movs	r4, r0
    6fbe:	000f      	movs	r7, r1
	wsect = fs->winsect;
    6fc0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    6fc2:	428d      	cmp	r5, r1
    6fc4:	d03f      	beq.n	7046 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    6fc6:	7903      	ldrb	r3, [r0, #4]
    6fc8:	2b00      	cmp	r3, #0
    6fca:	d107      	bne.n	6fdc <move_window+0x28>
	return FR_OK;
    6fcc:	2300      	movs	r3, #0
		if (sector) {
    6fce:	2f00      	cmp	r7, #0
    6fd0:	d12c      	bne.n	702c <move_window+0x78>
}
    6fd2:	0018      	movs	r0, r3
    6fd4:	b002      	add	sp, #8
    6fd6:	bc04      	pop	{r2}
    6fd8:	4691      	mov	r9, r2
    6fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6fdc:	2330      	movs	r3, #48	; 0x30
    6fde:	469c      	mov	ip, r3
    6fe0:	4484      	add	ip, r0
    6fe2:	4663      	mov	r3, ip
    6fe4:	4661      	mov	r1, ip
    6fe6:	9301      	str	r3, [sp, #4]
    6fe8:	7840      	ldrb	r0, [r0, #1]
    6fea:	2301      	movs	r3, #1
    6fec:	002a      	movs	r2, r5
    6fee:	4e17      	ldr	r6, [pc, #92]	; (704c <move_window+0x98>)
    6ff0:	47b0      	blx	r6
				return FR_DISK_ERR;
    6ff2:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    6ff4:	2800      	cmp	r0, #0
    6ff6:	d1ec      	bne.n	6fd2 <move_window+0x1e>
			fs->wflag = 0;
    6ff8:	2300      	movs	r3, #0
    6ffa:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    6ffc:	6a23      	ldr	r3, [r4, #32]
    6ffe:	69e2      	ldr	r2, [r4, #28]
    7000:	4694      	mov	ip, r2
    7002:	4463      	add	r3, ip
    7004:	429d      	cmp	r5, r3
    7006:	d2e1      	bcs.n	6fcc <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7008:	78e6      	ldrb	r6, [r4, #3]
    700a:	2e01      	cmp	r6, #1
    700c:	d9de      	bls.n	6fcc <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    700e:	4b0f      	ldr	r3, [pc, #60]	; (704c <move_window+0x98>)
    7010:	4699      	mov	r9, r3
					wsect += fs->fsize;
    7012:	69e3      	ldr	r3, [r4, #28]
    7014:	469c      	mov	ip, r3
    7016:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    7018:	7860      	ldrb	r0, [r4, #1]
    701a:	2301      	movs	r3, #1
    701c:	002a      	movs	r2, r5
    701e:	9901      	ldr	r1, [sp, #4]
    7020:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7022:	3e01      	subs	r6, #1
    7024:	b2f6      	uxtb	r6, r6
    7026:	2e01      	cmp	r6, #1
    7028:	d1f3      	bne.n	7012 <move_window+0x5e>
    702a:	e7cf      	b.n	6fcc <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    702c:	0021      	movs	r1, r4
    702e:	3130      	adds	r1, #48	; 0x30
    7030:	7860      	ldrb	r0, [r4, #1]
    7032:	3301      	adds	r3, #1
    7034:	003a      	movs	r2, r7
    7036:	4d06      	ldr	r5, [pc, #24]	; (7050 <move_window+0x9c>)
    7038:	47a8      	blx	r5
				return FR_DISK_ERR;
    703a:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    703c:	2800      	cmp	r0, #0
    703e:	d1c8      	bne.n	6fd2 <move_window+0x1e>
			fs->winsect = sector;
    7040:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    7042:	2300      	movs	r3, #0
    7044:	e7c5      	b.n	6fd2 <move_window+0x1e>
    7046:	2300      	movs	r3, #0
    7048:	e7c3      	b.n	6fd2 <move_window+0x1e>
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	00006995 	.word	0x00006995
    7050:	00006911 	.word	0x00006911

00007054 <get_fat>:
{
    7054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7056:	0005      	movs	r5, r0
    7058:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    705a:	2901      	cmp	r1, #1
    705c:	d974      	bls.n	7148 <get_fat+0xf4>
		return 1;
    705e:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    7060:	69ab      	ldr	r3, [r5, #24]
    7062:	4299      	cmp	r1, r3
    7064:	d271      	bcs.n	714a <get_fat+0xf6>
	switch (fs->fs_type) {
    7066:	782b      	ldrb	r3, [r5, #0]
    7068:	2b02      	cmp	r3, #2
    706a:	d034      	beq.n	70d6 <get_fat+0x82>
    706c:	2b03      	cmp	r3, #3
    706e:	d049      	beq.n	7104 <get_fat+0xb0>
    7070:	2b01      	cmp	r3, #1
    7072:	d002      	beq.n	707a <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7074:	2001      	movs	r0, #1
    7076:	4240      	negs	r0, r0
    7078:	e067      	b.n	714a <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    707a:	084e      	lsrs	r6, r1, #1
    707c:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    707e:	0a71      	lsrs	r1, r6, #9
    7080:	6a2b      	ldr	r3, [r5, #32]
    7082:	469c      	mov	ip, r3
    7084:	4461      	add	r1, ip
    7086:	0028      	movs	r0, r5
    7088:	4b30      	ldr	r3, [pc, #192]	; (714c <get_fat+0xf8>)
    708a:	4798      	blx	r3
    708c:	2800      	cmp	r0, #0
    708e:	d002      	beq.n	7096 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7090:	2001      	movs	r0, #1
    7092:	4240      	negs	r0, r0
    7094:	e059      	b.n	714a <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    7096:	05f3      	lsls	r3, r6, #23
    7098:	0ddb      	lsrs	r3, r3, #23
    709a:	18eb      	adds	r3, r5, r3
    709c:	3330      	adds	r3, #48	; 0x30
    709e:	781f      	ldrb	r7, [r3, #0]
    70a0:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    70a2:	0a71      	lsrs	r1, r6, #9
    70a4:	6a2b      	ldr	r3, [r5, #32]
    70a6:	469c      	mov	ip, r3
    70a8:	4461      	add	r1, ip
    70aa:	0028      	movs	r0, r5
    70ac:	4b27      	ldr	r3, [pc, #156]	; (714c <get_fat+0xf8>)
    70ae:	4798      	blx	r3
    70b0:	2800      	cmp	r0, #0
    70b2:	d002      	beq.n	70ba <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    70b4:	2001      	movs	r0, #1
    70b6:	4240      	negs	r0, r0
    70b8:	e047      	b.n	714a <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    70ba:	05f6      	lsls	r6, r6, #23
    70bc:	0df6      	lsrs	r6, r6, #23
    70be:	19ad      	adds	r5, r5, r6
    70c0:	3530      	adds	r5, #48	; 0x30
    70c2:	7828      	ldrb	r0, [r5, #0]
    70c4:	0200      	lsls	r0, r0, #8
    70c6:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    70c8:	07e3      	lsls	r3, r4, #31
    70ca:	d501      	bpl.n	70d0 <get_fat+0x7c>
    70cc:	0900      	lsrs	r0, r0, #4
    70ce:	e03c      	b.n	714a <get_fat+0xf6>
    70d0:	0500      	lsls	r0, r0, #20
    70d2:	0d00      	lsrs	r0, r0, #20
    70d4:	e039      	b.n	714a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    70d6:	0a09      	lsrs	r1, r1, #8
    70d8:	6a2b      	ldr	r3, [r5, #32]
    70da:	469c      	mov	ip, r3
    70dc:	4461      	add	r1, ip
    70de:	0028      	movs	r0, r5
    70e0:	4b1a      	ldr	r3, [pc, #104]	; (714c <get_fat+0xf8>)
    70e2:	4798      	blx	r3
    70e4:	2800      	cmp	r0, #0
    70e6:	d002      	beq.n	70ee <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    70e8:	2001      	movs	r0, #1
    70ea:	4240      	negs	r0, r0
    70ec:	e02d      	b.n	714a <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    70ee:	0064      	lsls	r4, r4, #1
    70f0:	23ff      	movs	r3, #255	; 0xff
    70f2:	005b      	lsls	r3, r3, #1
    70f4:	401c      	ands	r4, r3
		return LD_WORD(p);
    70f6:	192d      	adds	r5, r5, r4
    70f8:	3530      	adds	r5, #48	; 0x30
    70fa:	786b      	ldrb	r3, [r5, #1]
    70fc:	021b      	lsls	r3, r3, #8
    70fe:	7828      	ldrb	r0, [r5, #0]
    7100:	4318      	orrs	r0, r3
    7102:	e022      	b.n	714a <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    7104:	09c9      	lsrs	r1, r1, #7
    7106:	6a2b      	ldr	r3, [r5, #32]
    7108:	469c      	mov	ip, r3
    710a:	4461      	add	r1, ip
    710c:	0028      	movs	r0, r5
    710e:	4b0f      	ldr	r3, [pc, #60]	; (714c <get_fat+0xf8>)
    7110:	4798      	blx	r3
    7112:	2800      	cmp	r0, #0
    7114:	d002      	beq.n	711c <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7116:	2001      	movs	r0, #1
    7118:	4240      	negs	r0, r0
    711a:	e016      	b.n	714a <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    711c:	00a4      	lsls	r4, r4, #2
    711e:	23fe      	movs	r3, #254	; 0xfe
    7120:	005b      	lsls	r3, r3, #1
    7122:	401c      	ands	r4, r3
    7124:	0023      	movs	r3, r4
    7126:	3330      	adds	r3, #48	; 0x30
    7128:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    712a:	78d8      	ldrb	r0, [r3, #3]
    712c:	0600      	lsls	r0, r0, #24
    712e:	789a      	ldrb	r2, [r3, #2]
    7130:	0412      	lsls	r2, r2, #16
    7132:	4310      	orrs	r0, r2
    7134:	192c      	adds	r4, r5, r4
    7136:	3430      	adds	r4, #48	; 0x30
    7138:	7822      	ldrb	r2, [r4, #0]
    713a:	4310      	orrs	r0, r2
    713c:	785b      	ldrb	r3, [r3, #1]
    713e:	021b      	lsls	r3, r3, #8
    7140:	4318      	orrs	r0, r3
    7142:	0100      	lsls	r0, r0, #4
    7144:	0900      	lsrs	r0, r0, #4
    7146:	e000      	b.n	714a <get_fat+0xf6>
		return 1;
    7148:	2001      	movs	r0, #1
}
    714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    714c:	00006fb5 	.word	0x00006fb5

00007150 <dir_sdi>:
{
    7150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7152:	0004      	movs	r4, r0
    7154:	000d      	movs	r5, r1
	dj->index = idx;
    7156:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    7158:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    715a:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    715c:	2901      	cmp	r1, #1
    715e:	d003      	beq.n	7168 <dir_sdi+0x18>
    7160:	6823      	ldr	r3, [r4, #0]
    7162:	699a      	ldr	r2, [r3, #24]
    7164:	4291      	cmp	r1, r2
    7166:	d300      	bcc.n	716a <dir_sdi+0x1a>
}
    7168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    716a:	2900      	cmp	r1, #0
    716c:	d119      	bne.n	71a2 <dir_sdi+0x52>
    716e:	781a      	ldrb	r2, [r3, #0]
    7170:	2a03      	cmp	r2, #3
    7172:	d013      	beq.n	719c <dir_sdi+0x4c>
		dj->clust = clst;
    7174:	2200      	movs	r2, #0
    7176:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7178:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    717a:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    717c:	42aa      	cmp	r2, r5
    717e:	d9f3      	bls.n	7168 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7180:	092a      	lsrs	r2, r5, #4
    7182:	b292      	uxth	r2, r2
    7184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7186:	189b      	adds	r3, r3, r2
    7188:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    718a:	6823      	ldr	r3, [r4, #0]
    718c:	3330      	adds	r3, #48	; 0x30
    718e:	220f      	movs	r2, #15
    7190:	4015      	ands	r5, r2
    7192:	016d      	lsls	r5, r5, #5
    7194:	195d      	adds	r5, r3, r5
    7196:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    7198:	2000      	movs	r0, #0
    719a:	e7e5      	b.n	7168 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    719c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    719e:	2900      	cmp	r1, #0
    71a0:	d0e8      	beq.n	7174 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    71a2:	789e      	ldrb	r6, [r3, #2]
    71a4:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    71a6:	42b5      	cmp	r5, r6
    71a8:	d313      	bcc.n	71d2 <dir_sdi+0x82>
    71aa:	1bad      	subs	r5, r5, r6
    71ac:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    71ae:	4f10      	ldr	r7, [pc, #64]	; (71f0 <dir_sdi+0xa0>)
    71b0:	e000      	b.n	71b4 <dir_sdi+0x64>
    71b2:	001d      	movs	r5, r3
    71b4:	6820      	ldr	r0, [r4, #0]
    71b6:	47b8      	blx	r7
    71b8:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    71ba:	1c43      	adds	r3, r0, #1
    71bc:	d012      	beq.n	71e4 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    71be:	2801      	cmp	r0, #1
    71c0:	d912      	bls.n	71e8 <dir_sdi+0x98>
    71c2:	6823      	ldr	r3, [r4, #0]
    71c4:	699b      	ldr	r3, [r3, #24]
    71c6:	4298      	cmp	r0, r3
    71c8:	d210      	bcs.n	71ec <dir_sdi+0x9c>
    71ca:	1bab      	subs	r3, r5, r6
    71cc:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    71ce:	42b5      	cmp	r5, r6
    71d0:	d2ef      	bcs.n	71b2 <dir_sdi+0x62>
		dj->clust = clst;
    71d2:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    71d4:	6820      	ldr	r0, [r4, #0]
    71d6:	4b07      	ldr	r3, [pc, #28]	; (71f4 <dir_sdi+0xa4>)
    71d8:	4798      	blx	r3
    71da:	092b      	lsrs	r3, r5, #4
    71dc:	b29b      	uxth	r3, r3
    71de:	1818      	adds	r0, r3, r0
    71e0:	6120      	str	r0, [r4, #16]
    71e2:	e7d2      	b.n	718a <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    71e4:	2001      	movs	r0, #1
    71e6:	e7bf      	b.n	7168 <dir_sdi+0x18>
				return FR_INT_ERR;
    71e8:	2002      	movs	r0, #2
    71ea:	e7bd      	b.n	7168 <dir_sdi+0x18>
    71ec:	2002      	movs	r0, #2
    71ee:	e7bb      	b.n	7168 <dir_sdi+0x18>
    71f0:	00007055 	.word	0x00007055
    71f4:	00006afb 	.word	0x00006afb

000071f8 <put_fat>:
{
    71f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71fa:	46c6      	mov	lr, r8
    71fc:	b500      	push	{lr}
    71fe:	0007      	movs	r7, r0
    7200:	000c      	movs	r4, r1
    7202:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    7204:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7206:	2901      	cmp	r1, #1
    7208:	d902      	bls.n	7210 <put_fat+0x18>
    720a:	6983      	ldr	r3, [r0, #24]
    720c:	4299      	cmp	r1, r3
    720e:	d303      	bcc.n	7218 <put_fat+0x20>
}
    7210:	0028      	movs	r0, r5
    7212:	bc04      	pop	{r2}
    7214:	4690      	mov	r8, r2
    7216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    7218:	7803      	ldrb	r3, [r0, #0]
    721a:	2b02      	cmp	r3, #2
    721c:	d053      	beq.n	72c6 <put_fat+0xce>
    721e:	2b03      	cmp	r3, #3
    7220:	d063      	beq.n	72ea <put_fat+0xf2>
			res = FR_INT_ERR;
    7222:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    7224:	2b01      	cmp	r3, #1
    7226:	d002      	beq.n	722e <put_fat+0x36>
		fs->wflag = 1;
    7228:	2301      	movs	r3, #1
    722a:	713b      	strb	r3, [r7, #4]
    722c:	e7f0      	b.n	7210 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    722e:	084b      	lsrs	r3, r1, #1
    7230:	4698      	mov	r8, r3
    7232:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7234:	4643      	mov	r3, r8
    7236:	0a59      	lsrs	r1, r3, #9
    7238:	6a03      	ldr	r3, [r0, #32]
    723a:	469c      	mov	ip, r3
    723c:	4461      	add	r1, ip
    723e:	4b3b      	ldr	r3, [pc, #236]	; (732c <put_fat+0x134>)
    7240:	4798      	blx	r3
    7242:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    7244:	d1f0      	bne.n	7228 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    7246:	4643      	mov	r3, r8
    7248:	05db      	lsls	r3, r3, #23
    724a:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    724c:	07e2      	lsls	r2, r4, #31
    724e:	d51f      	bpl.n	7290 <put_fat+0x98>
    7250:	18fb      	adds	r3, r7, r3
    7252:	3330      	adds	r3, #48	; 0x30
    7254:	7819      	ldrb	r1, [r3, #0]
    7256:	220f      	movs	r2, #15
    7258:	400a      	ands	r2, r1
    725a:	0131      	lsls	r1, r6, #4
    725c:	20ff      	movs	r0, #255	; 0xff
    725e:	0100      	lsls	r0, r0, #4
    7260:	4001      	ands	r1, r0
    7262:	430a      	orrs	r2, r1
    7264:	701a      	strb	r2, [r3, #0]
			bc++;
    7266:	4644      	mov	r4, r8
    7268:	3401      	adds	r4, #1
			fs->wflag = 1;
    726a:	2301      	movs	r3, #1
    726c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    726e:	0a61      	lsrs	r1, r4, #9
    7270:	6a3b      	ldr	r3, [r7, #32]
    7272:	469c      	mov	ip, r3
    7274:	4461      	add	r1, ip
    7276:	0038      	movs	r0, r7
    7278:	4b2c      	ldr	r3, [pc, #176]	; (732c <put_fat+0x134>)
    727a:	4798      	blx	r3
			if (res != FR_OK) break;
    727c:	2800      	cmp	r0, #0
    727e:	d151      	bne.n	7324 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    7280:	05e4      	lsls	r4, r4, #23
    7282:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7284:	0936      	lsrs	r6, r6, #4
    7286:	b2f6      	uxtb	r6, r6
    7288:	193c      	adds	r4, r7, r4
    728a:	3430      	adds	r4, #48	; 0x30
    728c:	7026      	strb	r6, [r4, #0]
			break;
    728e:	e7cb      	b.n	7228 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7290:	18fb      	adds	r3, r7, r3
    7292:	3330      	adds	r3, #48	; 0x30
    7294:	701e      	strb	r6, [r3, #0]
			bc++;
    7296:	4644      	mov	r4, r8
    7298:	3401      	adds	r4, #1
			fs->wflag = 1;
    729a:	2301      	movs	r3, #1
    729c:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    729e:	0a61      	lsrs	r1, r4, #9
    72a0:	6a3b      	ldr	r3, [r7, #32]
    72a2:	469c      	mov	ip, r3
    72a4:	4461      	add	r1, ip
    72a6:	0038      	movs	r0, r7
    72a8:	4b20      	ldr	r3, [pc, #128]	; (732c <put_fat+0x134>)
    72aa:	4798      	blx	r3
			if (res != FR_OK) break;
    72ac:	2800      	cmp	r0, #0
    72ae:	d13b      	bne.n	7328 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    72b0:	05e4      	lsls	r4, r4, #23
    72b2:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    72b4:	193b      	adds	r3, r7, r4
    72b6:	3330      	adds	r3, #48	; 0x30
    72b8:	781b      	ldrb	r3, [r3, #0]
    72ba:	220f      	movs	r2, #15
    72bc:	4393      	bics	r3, r2
    72be:	0536      	lsls	r6, r6, #20
    72c0:	0f36      	lsrs	r6, r6, #28
    72c2:	431e      	orrs	r6, r3
    72c4:	e7e0      	b.n	7288 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    72c6:	0a09      	lsrs	r1, r1, #8
    72c8:	6a03      	ldr	r3, [r0, #32]
    72ca:	469c      	mov	ip, r3
    72cc:	4461      	add	r1, ip
    72ce:	4b17      	ldr	r3, [pc, #92]	; (732c <put_fat+0x134>)
    72d0:	4798      	blx	r3
    72d2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    72d4:	d1a8      	bne.n	7228 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    72d6:	0063      	lsls	r3, r4, #1
    72d8:	24ff      	movs	r4, #255	; 0xff
    72da:	0064      	lsls	r4, r4, #1
    72dc:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    72de:	18fb      	adds	r3, r7, r3
    72e0:	3330      	adds	r3, #48	; 0x30
    72e2:	701e      	strb	r6, [r3, #0]
    72e4:	0a36      	lsrs	r6, r6, #8
    72e6:	705e      	strb	r6, [r3, #1]
			break;
    72e8:	e79e      	b.n	7228 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    72ea:	09c9      	lsrs	r1, r1, #7
    72ec:	6a03      	ldr	r3, [r0, #32]
    72ee:	469c      	mov	ip, r3
    72f0:	4461      	add	r1, ip
    72f2:	4b0e      	ldr	r3, [pc, #56]	; (732c <put_fat+0x134>)
    72f4:	4798      	blx	r3
    72f6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    72f8:	d196      	bne.n	7228 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    72fa:	00a4      	lsls	r4, r4, #2
    72fc:	23fe      	movs	r3, #254	; 0xfe
    72fe:	005b      	lsls	r3, r3, #1
    7300:	401c      	ands	r4, r3
    7302:	0022      	movs	r2, r4
    7304:	3230      	adds	r2, #48	; 0x30
    7306:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    7308:	78d3      	ldrb	r3, [r2, #3]
    730a:	193c      	adds	r4, r7, r4
    730c:	3430      	adds	r4, #48	; 0x30
    730e:	091b      	lsrs	r3, r3, #4
    7310:	071b      	lsls	r3, r3, #28
    7312:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    7314:	7026      	strb	r6, [r4, #0]
    7316:	0a33      	lsrs	r3, r6, #8
    7318:	7053      	strb	r3, [r2, #1]
    731a:	0c33      	lsrs	r3, r6, #16
    731c:	7093      	strb	r3, [r2, #2]
    731e:	0e36      	lsrs	r6, r6, #24
    7320:	70d6      	strb	r6, [r2, #3]
			break;
    7322:	e781      	b.n	7228 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7324:	0005      	movs	r5, r0
    7326:	e77f      	b.n	7228 <put_fat+0x30>
    7328:	0005      	movs	r5, r0
    732a:	e77d      	b.n	7228 <put_fat+0x30>
    732c:	00006fb5 	.word	0x00006fb5

00007330 <create_chain>:
{
    7330:	b5f0      	push	{r4, r5, r6, r7, lr}
    7332:	46c6      	mov	lr, r8
    7334:	b500      	push	{lr}
    7336:	0005      	movs	r5, r0
    7338:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    733a:	2900      	cmp	r1, #0
    733c:	d107      	bne.n	734e <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    733e:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7340:	2e00      	cmp	r6, #0
    7342:	d00d      	beq.n	7360 <create_chain+0x30>
    7344:	6983      	ldr	r3, [r0, #24]
    7346:	429e      	cmp	r6, r3
    7348:	d30b      	bcc.n	7362 <create_chain+0x32>
    734a:	2601      	movs	r6, #1
    734c:	e009      	b.n	7362 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    734e:	4b26      	ldr	r3, [pc, #152]	; (73e8 <create_chain+0xb8>)
    7350:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7352:	2801      	cmp	r0, #1
    7354:	d93d      	bls.n	73d2 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    7356:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    7358:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    735a:	4298      	cmp	r0, r3
    735c:	d201      	bcs.n	7362 <create_chain+0x32>
    735e:	e03d      	b.n	73dc <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7360:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    7362:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7364:	4f20      	ldr	r7, [pc, #128]	; (73e8 <create_chain+0xb8>)
    7366:	e00a      	b.n	737e <create_chain+0x4e>
    7368:	0021      	movs	r1, r4
    736a:	0028      	movs	r0, r5
    736c:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    736e:	2800      	cmp	r0, #0
    7370:	d00d      	beq.n	738e <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7372:	1c43      	adds	r3, r0, #1
    7374:	d032      	beq.n	73dc <create_chain+0xac>
    7376:	2801      	cmp	r0, #1
    7378:	d030      	beq.n	73dc <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    737a:	42b4      	cmp	r4, r6
    737c:	d02d      	beq.n	73da <create_chain+0xaa>
		ncl++;							/* Next cluster */
    737e:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7380:	69ab      	ldr	r3, [r5, #24]
    7382:	429c      	cmp	r4, r3
    7384:	d3f0      	bcc.n	7368 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    7386:	2e01      	cmp	r6, #1
    7388:	d925      	bls.n	73d6 <create_chain+0xa6>
			ncl = 2;
    738a:	2402      	movs	r4, #2
    738c:	e7ec      	b.n	7368 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    738e:	4a17      	ldr	r2, [pc, #92]	; (73ec <create_chain+0xbc>)
    7390:	0021      	movs	r1, r4
    7392:	0028      	movs	r0, r5
    7394:	4b16      	ldr	r3, [pc, #88]	; (73f0 <create_chain+0xc0>)
    7396:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    7398:	2800      	cmp	r0, #0
    739a:	d113      	bne.n	73c4 <create_chain+0x94>
    739c:	4643      	mov	r3, r8
    739e:	2b00      	cmp	r3, #0
    73a0:	d109      	bne.n	73b6 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    73a2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    73a4:	692b      	ldr	r3, [r5, #16]
    73a6:	1c5a      	adds	r2, r3, #1
    73a8:	d01b      	beq.n	73e2 <create_chain+0xb2>
			fs->free_clust--;
    73aa:	3b01      	subs	r3, #1
    73ac:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    73ae:	2301      	movs	r3, #1
    73b0:	716b      	strb	r3, [r5, #5]
    73b2:	0020      	movs	r0, r4
    73b4:	e012      	b.n	73dc <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    73b6:	0022      	movs	r2, r4
    73b8:	4641      	mov	r1, r8
    73ba:	0028      	movs	r0, r5
    73bc:	4b0c      	ldr	r3, [pc, #48]	; (73f0 <create_chain+0xc0>)
    73be:	4798      	blx	r3
	if (res == FR_OK) {
    73c0:	2800      	cmp	r0, #0
    73c2:	d0ee      	beq.n	73a2 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    73c4:	3801      	subs	r0, #1
    73c6:	4242      	negs	r2, r0
    73c8:	4142      	adcs	r2, r0
    73ca:	4250      	negs	r0, r2
    73cc:	2301      	movs	r3, #1
    73ce:	4318      	orrs	r0, r3
    73d0:	e004      	b.n	73dc <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    73d2:	2001      	movs	r0, #1
    73d4:	e002      	b.n	73dc <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    73d6:	2000      	movs	r0, #0
    73d8:	e000      	b.n	73dc <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    73da:	2000      	movs	r0, #0
}
    73dc:	bc04      	pop	{r2}
    73de:	4690      	mov	r8, r2
    73e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    73e2:	0020      	movs	r0, r4
    73e4:	e7fa      	b.n	73dc <create_chain+0xac>
    73e6:	46c0      	nop			; (mov r8, r8)
    73e8:	00007055 	.word	0x00007055
    73ec:	0fffffff 	.word	0x0fffffff
    73f0:	000071f9 	.word	0x000071f9

000073f4 <remove_chain>:
{
    73f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73f6:	46ce      	mov	lr, r9
    73f8:	4647      	mov	r7, r8
    73fa:	b580      	push	{r7, lr}
    73fc:	0004      	movs	r4, r0
    73fe:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    7400:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7402:	2901      	cmp	r1, #1
    7404:	d902      	bls.n	740c <remove_chain+0x18>
    7406:	69a3      	ldr	r3, [r4, #24]
    7408:	4299      	cmp	r1, r3
    740a:	d303      	bcc.n	7414 <remove_chain+0x20>
}
    740c:	bc0c      	pop	{r2, r3}
    740e:	4690      	mov	r8, r2
    7410:	4699      	mov	r9, r3
    7412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7414:	4f13      	ldr	r7, [pc, #76]	; (7464 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    7416:	4b14      	ldr	r3, [pc, #80]	; (7468 <remove_chain+0x74>)
    7418:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    741a:	2301      	movs	r3, #1
    741c:	4699      	mov	r9, r3
    741e:	e003      	b.n	7428 <remove_chain+0x34>
    7420:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7422:	69a3      	ldr	r3, [r4, #24]
    7424:	42b3      	cmp	r3, r6
    7426:	d9f1      	bls.n	740c <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    7428:	0029      	movs	r1, r5
    742a:	0020      	movs	r0, r4
    742c:	47b8      	blx	r7
    742e:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    7430:	d011      	beq.n	7456 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7432:	2801      	cmp	r0, #1
    7434:	d011      	beq.n	745a <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7436:	1c43      	adds	r3, r0, #1
    7438:	d011      	beq.n	745e <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    743a:	2200      	movs	r2, #0
    743c:	0029      	movs	r1, r5
    743e:	0020      	movs	r0, r4
    7440:	47c0      	blx	r8
			if (res != FR_OK) break;
    7442:	2800      	cmp	r0, #0
    7444:	d1e2      	bne.n	740c <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    7446:	6923      	ldr	r3, [r4, #16]
    7448:	1c5a      	adds	r2, r3, #1
    744a:	d0e9      	beq.n	7420 <remove_chain+0x2c>
				fs->free_clust++;
    744c:	3301      	adds	r3, #1
    744e:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    7450:	464b      	mov	r3, r9
    7452:	7163      	strb	r3, [r4, #5]
    7454:	e7e4      	b.n	7420 <remove_chain+0x2c>
    7456:	2000      	movs	r0, #0
    7458:	e7d8      	b.n	740c <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    745a:	2002      	movs	r0, #2
    745c:	e7d6      	b.n	740c <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    745e:	2001      	movs	r0, #1
    7460:	e7d4      	b.n	740c <remove_chain+0x18>
    7462:	46c0      	nop			; (mov r8, r8)
    7464:	00007055 	.word	0x00007055
    7468:	000071f9 	.word	0x000071f9

0000746c <dir_next>:
{
    746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    746e:	46d6      	mov	lr, sl
    7470:	4647      	mov	r7, r8
    7472:	b580      	push	{r7, lr}
    7474:	0006      	movs	r6, r0
    7476:	000d      	movs	r5, r1
	i = dj->index + 1;
    7478:	88c4      	ldrh	r4, [r0, #6]
    747a:	3401      	adds	r4, #1
    747c:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    747e:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7480:	2c00      	cmp	r4, #0
    7482:	d103      	bne.n	748c <dir_next+0x20>
}
    7484:	bc0c      	pop	{r2, r3}
    7486:	4690      	mov	r8, r2
    7488:	469a      	mov	sl, r3
    748a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    748c:	6933      	ldr	r3, [r6, #16]
    748e:	2b00      	cmp	r3, #0
    7490:	d0f8      	beq.n	7484 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7492:	270f      	movs	r7, #15
    7494:	4027      	ands	r7, r4
    7496:	d10f      	bne.n	74b8 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    7498:	3301      	adds	r3, #1
    749a:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    749c:	68f1      	ldr	r1, [r6, #12]
    749e:	2900      	cmp	r1, #0
    74a0:	d104      	bne.n	74ac <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    74a2:	6833      	ldr	r3, [r6, #0]
    74a4:	891b      	ldrh	r3, [r3, #8]
    74a6:	42a3      	cmp	r3, r4
    74a8:	d9ec      	bls.n	7484 <dir_next+0x18>
    74aa:	e005      	b.n	74b8 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    74ac:	6830      	ldr	r0, [r6, #0]
    74ae:	7883      	ldrb	r3, [r0, #2]
    74b0:	3b01      	subs	r3, #1
    74b2:	0922      	lsrs	r2, r4, #4
    74b4:	421a      	tst	r2, r3
    74b6:	d007      	beq.n	74c8 <dir_next+0x5c>
	dj->index = i;
    74b8:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    74ba:	6833      	ldr	r3, [r6, #0]
    74bc:	3330      	adds	r3, #48	; 0x30
    74be:	017f      	lsls	r7, r7, #5
    74c0:	19df      	adds	r7, r3, r7
    74c2:	6177      	str	r7, [r6, #20]
	return FR_OK;
    74c4:	2000      	movs	r0, #0
    74c6:	e7dd      	b.n	7484 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    74c8:	4b2c      	ldr	r3, [pc, #176]	; (757c <dir_next+0x110>)
    74ca:	4798      	blx	r3
    74cc:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    74ce:	2002      	movs	r0, #2
    74d0:	4643      	mov	r3, r8
    74d2:	2b01      	cmp	r3, #1
    74d4:	d9d6      	bls.n	7484 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    74d6:	3301      	adds	r3, #1
    74d8:	d04b      	beq.n	7572 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    74da:	6833      	ldr	r3, [r6, #0]
    74dc:	699a      	ldr	r2, [r3, #24]
    74de:	4590      	cmp	r8, r2
    74e0:	d33f      	bcc.n	7562 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    74e2:	3002      	adds	r0, #2
    74e4:	2d00      	cmp	r5, #0
    74e6:	d0cd      	beq.n	7484 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    74e8:	68f1      	ldr	r1, [r6, #12]
    74ea:	0018      	movs	r0, r3
    74ec:	4b24      	ldr	r3, [pc, #144]	; (7580 <dir_next+0x114>)
    74ee:	4798      	blx	r3
    74f0:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    74f2:	2007      	movs	r0, #7
    74f4:	4643      	mov	r3, r8
    74f6:	2b00      	cmp	r3, #0
    74f8:	d0c4      	beq.n	7484 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    74fa:	3805      	subs	r0, #5
    74fc:	2b01      	cmp	r3, #1
    74fe:	d0c1      	beq.n	7484 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7500:	3801      	subs	r0, #1
    7502:	3301      	adds	r3, #1
    7504:	d0be      	beq.n	7484 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7506:	2100      	movs	r1, #0
    7508:	6830      	ldr	r0, [r6, #0]
    750a:	4b1e      	ldr	r3, [pc, #120]	; (7584 <dir_next+0x118>)
    750c:	4798      	blx	r3
    750e:	0003      	movs	r3, r0
    7510:	2001      	movs	r0, #1
    7512:	2b00      	cmp	r3, #0
    7514:	d1b6      	bne.n	7484 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    7516:	6830      	ldr	r0, [r6, #0]
    7518:	3030      	adds	r0, #48	; 0x30
    751a:	2280      	movs	r2, #128	; 0x80
    751c:	0092      	lsls	r2, r2, #2
    751e:	2100      	movs	r1, #0
    7520:	4b19      	ldr	r3, [pc, #100]	; (7588 <dir_next+0x11c>)
    7522:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7524:	6835      	ldr	r5, [r6, #0]
    7526:	4641      	mov	r1, r8
    7528:	0028      	movs	r0, r5
    752a:	4b18      	ldr	r3, [pc, #96]	; (758c <dir_next+0x120>)
    752c:	4798      	blx	r3
    752e:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7530:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    7532:	2301      	movs	r3, #1
    7534:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7536:	6833      	ldr	r3, [r6, #0]
    7538:	789a      	ldrb	r2, [r3, #2]
    753a:	42aa      	cmp	r2, r5
    753c:	d90e      	bls.n	755c <dir_next+0xf0>
						dj->fs->wflag = 1;
    753e:	4652      	mov	r2, sl
    7540:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7542:	2100      	movs	r1, #0
    7544:	6830      	ldr	r0, [r6, #0]
    7546:	4b0f      	ldr	r3, [pc, #60]	; (7584 <dir_next+0x118>)
    7548:	4798      	blx	r3
    754a:	2800      	cmp	r0, #0
    754c:	d113      	bne.n	7576 <dir_next+0x10a>
						dj->fs->winsect++;
    754e:	6832      	ldr	r2, [r6, #0]
    7550:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7552:	3301      	adds	r3, #1
    7554:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7556:	3501      	adds	r5, #1
    7558:	b2ed      	uxtb	r5, r5
    755a:	e7ec      	b.n	7536 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    755c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    755e:	1b52      	subs	r2, r2, r5
    7560:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    7562:	4643      	mov	r3, r8
    7564:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    7566:	4641      	mov	r1, r8
    7568:	6830      	ldr	r0, [r6, #0]
    756a:	4b08      	ldr	r3, [pc, #32]	; (758c <dir_next+0x120>)
    756c:	4798      	blx	r3
    756e:	6130      	str	r0, [r6, #16]
    7570:	e7a2      	b.n	74b8 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7572:	2001      	movs	r0, #1
    7574:	e786      	b.n	7484 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7576:	2001      	movs	r0, #1
    7578:	e784      	b.n	7484 <dir_next+0x18>
    757a:	46c0      	nop			; (mov r8, r8)
    757c:	00007055 	.word	0x00007055
    7580:	00007331 	.word	0x00007331
    7584:	00006fb5 	.word	0x00006fb5
    7588:	00006ae9 	.word	0x00006ae9
    758c:	00006afb 	.word	0x00006afb

00007590 <dir_find>:
{
    7590:	b5f0      	push	{r4, r5, r6, r7, lr}
    7592:	46de      	mov	lr, fp
    7594:	4657      	mov	r7, sl
    7596:	464e      	mov	r6, r9
    7598:	4645      	mov	r5, r8
    759a:	b5e0      	push	{r5, r6, r7, lr}
    759c:	b083      	sub	sp, #12
    759e:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    75a0:	2100      	movs	r1, #0
    75a2:	4b5a      	ldr	r3, [pc, #360]	; (770c <dir_find+0x17c>)
    75a4:	4798      	blx	r3
    75a6:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    75a8:	d000      	beq.n	75ac <dir_find+0x1c>
    75aa:	e09e      	b.n	76ea <dir_find+0x15a>
    75ac:	23ff      	movs	r3, #255	; 0xff
    75ae:	4699      	mov	r9, r3
    75b0:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    75b2:	4b57      	ldr	r3, [pc, #348]	; (7710 <dir_find+0x180>)
    75b4:	469b      	mov	fp, r3
    75b6:	e01b      	b.n	75f0 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    75b8:	2b0f      	cmp	r3, #15
    75ba:	d030      	beq.n	761e <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    75bc:	4653      	mov	r3, sl
    75be:	2b00      	cmp	r3, #0
    75c0:	d105      	bne.n	75ce <dir_find+0x3e>
    75c2:	0020      	movs	r0, r4
    75c4:	4b53      	ldr	r3, [pc, #332]	; (7714 <dir_find+0x184>)
    75c6:	4798      	blx	r3
    75c8:	4581      	cmp	r9, r0
    75ca:	d100      	bne.n	75ce <dir_find+0x3e>
    75cc:	e08d      	b.n	76ea <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    75ce:	2301      	movs	r3, #1
    75d0:	425b      	negs	r3, r3
    75d2:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    75d4:	69a8      	ldr	r0, [r5, #24]
    75d6:	7ac3      	ldrb	r3, [r0, #11]
    75d8:	07db      	lsls	r3, r3, #31
    75da:	d400      	bmi.n	75de <dir_find+0x4e>
    75dc:	e07d      	b.n	76da <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    75de:	23ff      	movs	r3, #255	; 0xff
    75e0:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    75e2:	2100      	movs	r1, #0
    75e4:	0028      	movs	r0, r5
    75e6:	4b4c      	ldr	r3, [pc, #304]	; (7718 <dir_find+0x188>)
    75e8:	4798      	blx	r3
    75ea:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    75ec:	d000      	beq.n	75f0 <dir_find+0x60>
    75ee:	e07c      	b.n	76ea <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    75f0:	6929      	ldr	r1, [r5, #16]
    75f2:	6828      	ldr	r0, [r5, #0]
    75f4:	47d8      	blx	fp
    75f6:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    75f8:	d177      	bne.n	76ea <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    75fa:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    75fc:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    75fe:	2e00      	cmp	r6, #0
    7600:	d100      	bne.n	7604 <dir_find+0x74>
    7602:	e080      	b.n	7706 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    7604:	7ae2      	ldrb	r2, [r4, #11]
    7606:	233f      	movs	r3, #63	; 0x3f
    7608:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    760a:	2ee5      	cmp	r6, #229	; 0xe5
    760c:	d100      	bne.n	7610 <dir_find+0x80>
    760e:	e077      	b.n	7700 <dir_find+0x170>
    7610:	0712      	lsls	r2, r2, #28
    7612:	d5d1      	bpl.n	75b8 <dir_find+0x28>
    7614:	2b0f      	cmp	r3, #15
    7616:	d002      	beq.n	761e <dir_find+0x8e>
			ord = 0xFF;
    7618:	23ff      	movs	r3, #255	; 0xff
    761a:	469a      	mov	sl, r3
    761c:	e7e1      	b.n	75e2 <dir_find+0x52>
				if (dj->lfn) {
    761e:	69ef      	ldr	r7, [r5, #28]
    7620:	2f00      	cmp	r7, #0
    7622:	d0de      	beq.n	75e2 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    7624:	0673      	lsls	r3, r6, #25
    7626:	d518      	bpl.n	765a <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    7628:	7b63      	ldrb	r3, [r4, #13]
    762a:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    762c:	2340      	movs	r3, #64	; 0x40
    762e:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    7630:	88eb      	ldrh	r3, [r5, #6]
    7632:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7634:	7b63      	ldrb	r3, [r4, #13]
    7636:	9300      	str	r3, [sp, #0]
    7638:	22ff      	movs	r2, #255	; 0xff
    763a:	4692      	mov	sl, r2
    763c:	454b      	cmp	r3, r9
    763e:	d1d0      	bne.n	75e2 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    7640:	7823      	ldrb	r3, [r4, #0]
    7642:	3abf      	subs	r2, #191	; 0xbf
    7644:	4393      	bics	r3, r2
    7646:	3b01      	subs	r3, #1
    7648:	005a      	lsls	r2, r3, #1
    764a:	18d2      	adds	r2, r2, r3
    764c:	0092      	lsls	r2, r2, #2
    764e:	4692      	mov	sl, r2
    7650:	449a      	add	sl, r3
	s = 0; wc = 1;
    7652:	2201      	movs	r2, #1
    7654:	2300      	movs	r3, #0
    7656:	4699      	mov	r9, r3
    7658:	e01d      	b.n	7696 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    765a:	45b2      	cmp	sl, r6
    765c:	d0ea      	beq.n	7634 <dir_find+0xa4>
    765e:	23ff      	movs	r3, #255	; 0xff
    7660:	469a      	mov	sl, r3
    7662:	e7be      	b.n	75e2 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    7664:	4b2d      	ldr	r3, [pc, #180]	; (771c <dir_find+0x18c>)
    7666:	4798      	blx	r3
    7668:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    766a:	4653      	mov	r3, sl
    766c:	2bfe      	cmp	r3, #254	; 0xfe
    766e:	d81f      	bhi.n	76b0 <dir_find+0x120>
    7670:	2301      	movs	r3, #1
    7672:	4453      	add	r3, sl
    7674:	4698      	mov	r8, r3
    7676:	4653      	mov	r3, sl
    7678:	005b      	lsls	r3, r3, #1
    767a:	5bd8      	ldrh	r0, [r3, r7]
    767c:	4b27      	ldr	r3, [pc, #156]	; (771c <dir_find+0x18c>)
    767e:	4798      	blx	r3
    7680:	0002      	movs	r2, r0
    7682:	9b01      	ldr	r3, [sp, #4]
    7684:	4283      	cmp	r3, r0
    7686:	d113      	bne.n	76b0 <dir_find+0x120>
    7688:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    768a:	2301      	movs	r3, #1
    768c:	469c      	mov	ip, r3
    768e:	44e1      	add	r9, ip
    7690:	464b      	mov	r3, r9
    7692:	2b0d      	cmp	r3, #13
    7694:	d011      	beq.n	76ba <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    7696:	4b22      	ldr	r3, [pc, #136]	; (7720 <dir_find+0x190>)
    7698:	4649      	mov	r1, r9
    769a:	5cc9      	ldrb	r1, [r1, r3]
    769c:	1863      	adds	r3, r4, r1
    769e:	785b      	ldrb	r3, [r3, #1]
    76a0:	021b      	lsls	r3, r3, #8
    76a2:	5c60      	ldrb	r0, [r4, r1]
    76a4:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    76a6:	2a00      	cmp	r2, #0
    76a8:	d1dc      	bne.n	7664 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    76aa:	4b1e      	ldr	r3, [pc, #120]	; (7724 <dir_find+0x194>)
    76ac:	4298      	cmp	r0, r3
    76ae:	d0ec      	beq.n	768a <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    76b0:	9b00      	ldr	r3, [sp, #0]
    76b2:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    76b4:	23ff      	movs	r3, #255	; 0xff
    76b6:	469a      	mov	sl, r3
    76b8:	e793      	b.n	75e2 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    76ba:	7823      	ldrb	r3, [r4, #0]
    76bc:	065b      	lsls	r3, r3, #25
    76be:	d506      	bpl.n	76ce <dir_find+0x13e>
    76c0:	2a00      	cmp	r2, #0
    76c2:	d004      	beq.n	76ce <dir_find+0x13e>
    76c4:	4653      	mov	r3, sl
    76c6:	005b      	lsls	r3, r3, #1
    76c8:	5bdb      	ldrh	r3, [r3, r7]
    76ca:	2b00      	cmp	r3, #0
    76cc:	d1f0      	bne.n	76b0 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    76ce:	3e01      	subs	r6, #1
    76d0:	b2f3      	uxtb	r3, r6
    76d2:	469a      	mov	sl, r3
    76d4:	9b00      	ldr	r3, [sp, #0]
    76d6:	4699      	mov	r9, r3
    76d8:	e783      	b.n	75e2 <dir_find+0x52>
    76da:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    76dc:	5ce1      	ldrb	r1, [r4, r3]
    76de:	5cc2      	ldrb	r2, [r0, r3]
    76e0:	4291      	cmp	r1, r2
    76e2:	d10a      	bne.n	76fa <dir_find+0x16a>
    76e4:	3301      	adds	r3, #1
    76e6:	2b0b      	cmp	r3, #11
    76e8:	d1f8      	bne.n	76dc <dir_find+0x14c>
}
    76ea:	0038      	movs	r0, r7
    76ec:	b003      	add	sp, #12
    76ee:	bc3c      	pop	{r2, r3, r4, r5}
    76f0:	4690      	mov	r8, r2
    76f2:	4699      	mov	r9, r3
    76f4:	46a2      	mov	sl, r4
    76f6:	46ab      	mov	fp, r5
    76f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    76fa:	23ff      	movs	r3, #255	; 0xff
    76fc:	469a      	mov	sl, r3
    76fe:	e770      	b.n	75e2 <dir_find+0x52>
			ord = 0xFF;
    7700:	23ff      	movs	r3, #255	; 0xff
    7702:	469a      	mov	sl, r3
    7704:	e76d      	b.n	75e2 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    7706:	2704      	movs	r7, #4
    7708:	e7ef      	b.n	76ea <dir_find+0x15a>
    770a:	46c0      	nop			; (mov r8, r8)
    770c:	00007151 	.word	0x00007151
    7710:	00006fb5 	.word	0x00006fb5
    7714:	00006b13 	.word	0x00006b13
    7718:	0000746d 	.word	0x0000746d
    771c:	00008529 	.word	0x00008529
    7720:	0000dd7c 	.word	0x0000dd7c
    7724:	0000ffff 	.word	0x0000ffff

00007728 <dir_register>:
{
    7728:	b5f0      	push	{r4, r5, r6, r7, lr}
    772a:	46de      	mov	lr, fp
    772c:	4657      	mov	r7, sl
    772e:	464e      	mov	r6, r9
    7730:	4645      	mov	r5, r8
    7732:	b5e0      	push	{r5, r6, r7, lr}
    7734:	b089      	sub	sp, #36	; 0x24
    7736:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    7738:	6987      	ldr	r7, [r0, #24]
    773a:	69c3      	ldr	r3, [r0, #28]
    773c:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    773e:	ad05      	add	r5, sp, #20
    7740:	220c      	movs	r2, #12
    7742:	0039      	movs	r1, r7
    7744:	0028      	movs	r0, r5
    7746:	4ba7      	ldr	r3, [pc, #668]	; (79e4 <dir_register+0x2bc>)
    7748:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    774a:	7aeb      	ldrb	r3, [r5, #11]
    774c:	07db      	lsls	r3, r3, #31
    774e:	d400      	bmi.n	7752 <dir_register+0x2a>
    7750:	e070      	b.n	7834 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    7752:	2300      	movs	r3, #0
    7754:	72fb      	strb	r3, [r7, #11]
    7756:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    7758:	220b      	movs	r2, #11
    775a:	a905      	add	r1, sp, #20
    775c:	0038      	movs	r0, r7
    775e:	4ba1      	ldr	r3, [pc, #644]	; (79e4 <dir_register+0x2bc>)
    7760:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    7762:	2301      	movs	r3, #1
		ns[i--] = c;
    7764:	ad03      	add	r5, sp, #12
    7766:	001e      	movs	r6, r3
    7768:	46a0      	mov	r8, r4
    776a:	e049      	b.n	7800 <dir_register+0xd8>
    776c:	3801      	subs	r0, #1
    776e:	1829      	adds	r1, r5, r0
    7770:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    7772:	091b      	lsrs	r3, r3, #4
    7774:	b29b      	uxth	r3, r3
	} while (seq);
    7776:	2b00      	cmp	r3, #0
    7778:	d007      	beq.n	778a <dir_register+0x62>
		c = (seq % 16) + '0';
    777a:	0021      	movs	r1, r4
    777c:	4019      	ands	r1, r3
    777e:	000a      	movs	r2, r1
    7780:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    7782:	2a39      	cmp	r2, #57	; 0x39
    7784:	d9f2      	bls.n	776c <dir_register+0x44>
    7786:	3207      	adds	r2, #7
    7788:	e7f0      	b.n	776c <dir_register+0x44>
	ns[i] = '~';
    778a:	337e      	adds	r3, #126	; 0x7e
    778c:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    778e:	2800      	cmp	r0, #0
    7790:	d00a      	beq.n	77a8 <dir_register+0x80>
    7792:	783b      	ldrb	r3, [r7, #0]
    7794:	2b20      	cmp	r3, #32
    7796:	d009      	beq.n	77ac <dir_register+0x84>
    7798:	2300      	movs	r3, #0
    779a:	3301      	adds	r3, #1
    779c:	4298      	cmp	r0, r3
    779e:	d007      	beq.n	77b0 <dir_register+0x88>
    77a0:	5cfa      	ldrb	r2, [r7, r3]
    77a2:	2a20      	cmp	r2, #32
    77a4:	d1f9      	bne.n	779a <dir_register+0x72>
    77a6:	e009      	b.n	77bc <dir_register+0x94>
    77a8:	0003      	movs	r3, r0
    77aa:	e007      	b.n	77bc <dir_register+0x94>
    77ac:	2300      	movs	r3, #0
    77ae:	e005      	b.n	77bc <dir_register+0x94>
    77b0:	0003      	movs	r3, r0
    77b2:	e003      	b.n	77bc <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    77b4:	54fa      	strb	r2, [r7, r3]
    77b6:	3301      	adds	r3, #1
	} while (j < 8);
    77b8:	2b07      	cmp	r3, #7
    77ba:	d805      	bhi.n	77c8 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    77bc:	2220      	movs	r2, #32
    77be:	2807      	cmp	r0, #7
    77c0:	d8f8      	bhi.n	77b4 <dir_register+0x8c>
    77c2:	5c2a      	ldrb	r2, [r5, r0]
    77c4:	3001      	adds	r0, #1
    77c6:	e7f5      	b.n	77b4 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    77c8:	4640      	mov	r0, r8
    77ca:	4b87      	ldr	r3, [pc, #540]	; (79e8 <dir_register+0x2c0>)
    77cc:	4798      	blx	r3
			if (res != FR_OK) break;
    77ce:	2800      	cmp	r0, #0
    77d0:	d11c      	bne.n	780c <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    77d2:	3601      	adds	r6, #1
    77d4:	b2b6      	uxth	r6, r6
    77d6:	2e64      	cmp	r6, #100	; 0x64
    77d8:	d015      	beq.n	7806 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    77da:	220b      	movs	r2, #11
    77dc:	a905      	add	r1, sp, #20
    77de:	0038      	movs	r0, r7
    77e0:	4b80      	ldr	r3, [pc, #512]	; (79e4 <dir_register+0x2bc>)
    77e2:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    77e4:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    77e6:	2e05      	cmp	r6, #5
    77e8:	d90a      	bls.n	7800 <dir_register+0xd8>
    77ea:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    77ec:	085a      	lsrs	r2, r3, #1
    77ee:	03db      	lsls	r3, r3, #15
    77f0:	4313      	orrs	r3, r2
    77f2:	880a      	ldrh	r2, [r1, #0]
    77f4:	189b      	adds	r3, r3, r2
    77f6:	b29b      	uxth	r3, r3
    77f8:	3102      	adds	r1, #2
    77fa:	880a      	ldrh	r2, [r1, #0]
    77fc:	2a00      	cmp	r2, #0
    77fe:	d1f5      	bne.n	77ec <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    7800:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    7802:	240f      	movs	r4, #15
    7804:	e7b9      	b.n	777a <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    7806:	2307      	movs	r3, #7
    7808:	4698      	mov	r8, r3
    780a:	e006      	b.n	781a <dir_register+0xf2>
    780c:	4644      	mov	r4, r8
    780e:	4680      	mov	r8, r0
    7810:	2e64      	cmp	r6, #100	; 0x64
    7812:	d100      	bne.n	7816 <dir_register+0xee>
    7814:	e0a5      	b.n	7962 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    7816:	2804      	cmp	r0, #4
    7818:	d007      	beq.n	782a <dir_register+0x102>
}
    781a:	4640      	mov	r0, r8
    781c:	b009      	add	sp, #36	; 0x24
    781e:	bc3c      	pop	{r2, r3, r4, r5}
    7820:	4690      	mov	r8, r2
    7822:	4699      	mov	r9, r3
    7824:	46a2      	mov	sl, r4
    7826:	46ab      	mov	fp, r5
    7828:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    782a:	ab05      	add	r3, sp, #20
    782c:	7adb      	ldrb	r3, [r3, #11]
    782e:	72fb      	strb	r3, [r7, #11]
    7830:	4653      	mov	r3, sl
    7832:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    7834:	ab05      	add	r3, sp, #20
    7836:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    7838:	2201      	movs	r2, #1
    783a:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    783c:	079b      	lsls	r3, r3, #30
    783e:	d511      	bpl.n	7864 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    7840:	4653      	mov	r3, sl
    7842:	881b      	ldrh	r3, [r3, #0]
    7844:	2b00      	cmp	r3, #0
    7846:	d01b      	beq.n	7880 <dir_register+0x158>
    7848:	2000      	movs	r0, #0
    784a:	4652      	mov	r2, sl
    784c:	3001      	adds	r0, #1
    784e:	b280      	uxth	r0, r0
    7850:	0043      	lsls	r3, r0, #1
    7852:	5a9b      	ldrh	r3, [r3, r2]
    7854:	2b00      	cmp	r3, #0
    7856:	d1f9      	bne.n	784c <dir_register+0x124>
		ne = (ne + 25) / 13;
    7858:	3019      	adds	r0, #25
    785a:	210d      	movs	r1, #13
    785c:	4b63      	ldr	r3, [pc, #396]	; (79ec <dir_register+0x2c4>)
    785e:	4798      	blx	r3
    7860:	b283      	uxth	r3, r0
    7862:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    7864:	2100      	movs	r1, #0
    7866:	0020      	movs	r0, r4
    7868:	4b61      	ldr	r3, [pc, #388]	; (79f0 <dir_register+0x2c8>)
    786a:	4798      	blx	r3
    786c:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    786e:	2800      	cmp	r0, #0
    7870:	d1d3      	bne.n	781a <dir_register+0xf2>
    7872:	4682      	mov	sl, r0
    7874:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    7876:	4f5f      	ldr	r7, [pc, #380]	; (79f4 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    7878:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    787a:	4b5f      	ldr	r3, [pc, #380]	; (79f8 <dir_register+0x2d0>)
    787c:	4699      	mov	r9, r3
    787e:	e00b      	b.n	7898 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    7880:	2000      	movs	r0, #0
    7882:	e7e9      	b.n	7858 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    7884:	1c6b      	adds	r3, r5, #1
    7886:	b29b      	uxth	r3, r3
    7888:	459b      	cmp	fp, r3
    788a:	d06d      	beq.n	7968 <dir_register+0x240>
    788c:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    788e:	2101      	movs	r1, #1
    7890:	0020      	movs	r0, r4
    7892:	47c8      	blx	r9
	} while (res == FR_OK);
    7894:	2800      	cmp	r0, #0
    7896:	d112      	bne.n	78be <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    7898:	6921      	ldr	r1, [r4, #16]
    789a:	6820      	ldr	r0, [r4, #0]
    789c:	47b8      	blx	r7
		if (res != FR_OK) break;
    789e:	2800      	cmp	r0, #0
    78a0:	d000      	beq.n	78a4 <dir_register+0x17c>
    78a2:	e098      	b.n	79d6 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    78a4:	6963      	ldr	r3, [r4, #20]
    78a6:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    78a8:	2be5      	cmp	r3, #229	; 0xe5
    78aa:	d001      	beq.n	78b0 <dir_register+0x188>
    78ac:	2b00      	cmp	r3, #0
    78ae:	d104      	bne.n	78ba <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    78b0:	2d00      	cmp	r5, #0
    78b2:	d1e7      	bne.n	7884 <dir_register+0x15c>
    78b4:	88e3      	ldrh	r3, [r4, #6]
    78b6:	469a      	mov	sl, r3
    78b8:	e7e4      	b.n	7884 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    78ba:	0035      	movs	r5, r6
    78bc:	e7e7      	b.n	788e <dir_register+0x166>
    78be:	4680      	mov	r8, r0
    78c0:	e7ab      	b.n	781a <dir_register+0xf2>
		res = dir_sdi(dj, is);
    78c2:	4651      	mov	r1, sl
    78c4:	0020      	movs	r0, r4
    78c6:	4b4a      	ldr	r3, [pc, #296]	; (79f0 <dir_register+0x2c8>)
    78c8:	4798      	blx	r3
    78ca:	4680      	mov	r8, r0
		if (res == FR_OK) {
    78cc:	2800      	cmp	r0, #0
    78ce:	d1a4      	bne.n	781a <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    78d0:	69a0      	ldr	r0, [r4, #24]
    78d2:	4b4a      	ldr	r3, [pc, #296]	; (79fc <dir_register+0x2d4>)
    78d4:	4798      	blx	r3
    78d6:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    78d8:	46a8      	mov	r8, r5
    78da:	e01f      	b.n	791c <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    78dc:	0022      	movs	r2, r4
    78de:	e067      	b.n	79b0 <dir_register+0x288>
    78e0:	465e      	mov	r6, fp
    78e2:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    78e4:	4946      	ldr	r1, [pc, #280]	; (7a00 <dir_register+0x2d8>)
    78e6:	428b      	cmp	r3, r1
    78e8:	d003      	beq.n	78f2 <dir_register+0x1ca>
    78ea:	0052      	lsls	r2, r2, #1
    78ec:	5b93      	ldrh	r3, [r2, r6]
    78ee:	2b00      	cmp	r3, #0
    78f0:	d103      	bne.n	78fa <dir_register+0x1d2>
    78f2:	2340      	movs	r3, #64	; 0x40
    78f4:	464a      	mov	r2, r9
    78f6:	431a      	orrs	r2, r3
    78f8:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    78fa:	464b      	mov	r3, r9
    78fc:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    78fe:	2301      	movs	r3, #1
    7900:	6822      	ldr	r2, [r4, #0]
    7902:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    7904:	2100      	movs	r1, #0
    7906:	0020      	movs	r0, r4
    7908:	4b3b      	ldr	r3, [pc, #236]	; (79f8 <dir_register+0x2d0>)
    790a:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    790c:	2800      	cmp	r0, #0
    790e:	d166      	bne.n	79de <dir_register+0x2b6>
    7910:	4645      	mov	r5, r8
    7912:	3d01      	subs	r5, #1
    7914:	b2ab      	uxth	r3, r5
    7916:	4698      	mov	r8, r3
    7918:	2b00      	cmp	r3, #0
    791a:	d027      	beq.n	796c <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    791c:	6921      	ldr	r1, [r4, #16]
    791e:	6820      	ldr	r0, [r4, #0]
    7920:	4b34      	ldr	r3, [pc, #208]	; (79f4 <dir_register+0x2cc>)
    7922:	4798      	blx	r3
				if (res != FR_OK) break;
    7924:	2800      	cmp	r0, #0
    7926:	d158      	bne.n	79da <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    7928:	69e6      	ldr	r6, [r4, #28]
    792a:	6960      	ldr	r0, [r4, #20]
    792c:	4643      	mov	r3, r8
    792e:	466a      	mov	r2, sp
    7930:	70d3      	strb	r3, [r2, #3]
    7932:	78d3      	ldrb	r3, [r2, #3]
    7934:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    7936:	7913      	ldrb	r3, [r2, #4]
    7938:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    793a:	230f      	movs	r3, #15
    793c:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    793e:	2300      	movs	r3, #0
    7940:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    7942:	7683      	strb	r3, [r0, #26]
    7944:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    7946:	464b      	mov	r3, r9
    7948:	3b01      	subs	r3, #1
    794a:	005a      	lsls	r2, r3, #1
    794c:	18d2      	adds	r2, r2, r3
    794e:	0092      	lsls	r2, r2, #2
    7950:	18d2      	adds	r2, r2, r3
    7952:	492c      	ldr	r1, [pc, #176]	; (7a04 <dir_register+0x2dc>)
    7954:	000d      	movs	r5, r1
    7956:	350d      	adds	r5, #13
	s = wc = 0;
    7958:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    795a:	4f29      	ldr	r7, [pc, #164]	; (7a00 <dir_register+0x2d8>)
    795c:	46b3      	mov	fp, r6
    795e:	46a4      	mov	ip, r4
    7960:	e029      	b.n	79b6 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    7962:	2307      	movs	r3, #7
    7964:	4698      	mov	r8, r3
    7966:	e758      	b.n	781a <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    7968:	2b01      	cmp	r3, #1
    796a:	d8aa      	bhi.n	78c2 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    796c:	6921      	ldr	r1, [r4, #16]
    796e:	6820      	ldr	r0, [r4, #0]
    7970:	4b20      	ldr	r3, [pc, #128]	; (79f4 <dir_register+0x2cc>)
    7972:	4798      	blx	r3
    7974:	4680      	mov	r8, r0
		if (res == FR_OK) {
    7976:	2800      	cmp	r0, #0
    7978:	d000      	beq.n	797c <dir_register+0x254>
    797a:	e74e      	b.n	781a <dir_register+0xf2>
			dir = dj->dir;
    797c:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    797e:	2220      	movs	r2, #32
    7980:	2100      	movs	r1, #0
    7982:	0028      	movs	r0, r5
    7984:	4b20      	ldr	r3, [pc, #128]	; (7a08 <dir_register+0x2e0>)
    7986:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    7988:	220b      	movs	r2, #11
    798a:	69a1      	ldr	r1, [r4, #24]
    798c:	0028      	movs	r0, r5
    798e:	4b15      	ldr	r3, [pc, #84]	; (79e4 <dir_register+0x2bc>)
    7990:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    7992:	69a3      	ldr	r3, [r4, #24]
    7994:	7ada      	ldrb	r2, [r3, #11]
    7996:	2318      	movs	r3, #24
    7998:	4013      	ands	r3, r2
    799a:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    799c:	6823      	ldr	r3, [r4, #0]
    799e:	2201      	movs	r2, #1
    79a0:	711a      	strb	r2, [r3, #4]
    79a2:	e73a      	b.n	781a <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    79a4:	780c      	ldrb	r4, [r1, #0]
    79a6:	26ff      	movs	r6, #255	; 0xff
    79a8:	5506      	strb	r6, [r0, r4]
    79aa:	1904      	adds	r4, r0, r4
    79ac:	26ff      	movs	r6, #255	; 0xff
    79ae:	7066      	strb	r6, [r4, #1]
    79b0:	3101      	adds	r1, #1
	} while (++s < 13);
    79b2:	42a9      	cmp	r1, r5
    79b4:	d094      	beq.n	78e0 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    79b6:	42bb      	cmp	r3, r7
    79b8:	d0f4      	beq.n	79a4 <dir_register+0x27c>
    79ba:	1c54      	adds	r4, r2, #1
    79bc:	0052      	lsls	r2, r2, #1
    79be:	465b      	mov	r3, fp
    79c0:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    79c2:	780a      	ldrb	r2, [r1, #0]
    79c4:	5483      	strb	r3, [r0, r2]
    79c6:	1882      	adds	r2, r0, r2
    79c8:	0a1e      	lsrs	r6, r3, #8
    79ca:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    79cc:	2b00      	cmp	r3, #0
    79ce:	d185      	bne.n	78dc <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    79d0:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    79d2:	003b      	movs	r3, r7
    79d4:	e7ec      	b.n	79b0 <dir_register+0x288>
    79d6:	4680      	mov	r8, r0
    79d8:	e71f      	b.n	781a <dir_register+0xf2>
    79da:	4680      	mov	r8, r0
    79dc:	e71d      	b.n	781a <dir_register+0xf2>
    79de:	4680      	mov	r8, r0
    79e0:	e71b      	b.n	781a <dir_register+0xf2>
    79e2:	46c0      	nop			; (mov r8, r8)
    79e4:	00006ad5 	.word	0x00006ad5
    79e8:	00007591 	.word	0x00007591
    79ec:	0000b339 	.word	0x0000b339
    79f0:	00007151 	.word	0x00007151
    79f4:	00006fb5 	.word	0x00006fb5
    79f8:	0000746d 	.word	0x0000746d
    79fc:	00006b13 	.word	0x00006b13
    7a00:	0000ffff 	.word	0x0000ffff
    7a04:	0000dd7c 	.word	0x0000dd7c
    7a08:	00006ae9 	.word	0x00006ae9

00007a0c <sync>:
{
    7a0c:	b570      	push	{r4, r5, r6, lr}
    7a0e:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    7a10:	2100      	movs	r1, #0
    7a12:	4b2c      	ldr	r3, [pc, #176]	; (7ac4 <sync+0xb8>)
    7a14:	4798      	blx	r3
	if (res == FR_OK) {
    7a16:	2800      	cmp	r0, #0
    7a18:	d10a      	bne.n	7a30 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7a1a:	7823      	ldrb	r3, [r4, #0]
    7a1c:	2b03      	cmp	r3, #3
    7a1e:	d008      	beq.n	7a32 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    7a20:	7860      	ldrb	r0, [r4, #1]
    7a22:	2200      	movs	r2, #0
    7a24:	2100      	movs	r1, #0
    7a26:	4b28      	ldr	r3, [pc, #160]	; (7ac8 <sync+0xbc>)
    7a28:	4798      	blx	r3
    7a2a:	1e43      	subs	r3, r0, #1
    7a2c:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    7a2e:	b2c0      	uxtb	r0, r0
}
    7a30:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7a32:	7963      	ldrb	r3, [r4, #5]
    7a34:	2b00      	cmp	r3, #0
    7a36:	d0f3      	beq.n	7a20 <sync+0x14>
			fs->winsect = 0;
    7a38:	2600      	movs	r6, #0
    7a3a:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    7a3c:	0025      	movs	r5, r4
    7a3e:	3530      	adds	r5, #48	; 0x30
    7a40:	2280      	movs	r2, #128	; 0x80
    7a42:	0092      	lsls	r2, r2, #2
    7a44:	2100      	movs	r1, #0
    7a46:	0028      	movs	r0, r5
    7a48:	4b20      	ldr	r3, [pc, #128]	; (7acc <sync+0xc0>)
    7a4a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    7a4c:	2255      	movs	r2, #85	; 0x55
    7a4e:	4b20      	ldr	r3, [pc, #128]	; (7ad0 <sync+0xc4>)
    7a50:	54e2      	strb	r2, [r4, r3]
    7a52:	3255      	adds	r2, #85	; 0x55
    7a54:	4b1f      	ldr	r3, [pc, #124]	; (7ad4 <sync+0xc8>)
    7a56:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    7a58:	3bde      	subs	r3, #222	; 0xde
    7a5a:	3bff      	subs	r3, #255	; 0xff
    7a5c:	3a7a      	subs	r2, #122	; 0x7a
    7a5e:	54a3      	strb	r3, [r4, r2]
    7a60:	3201      	adds	r2, #1
    7a62:	54a3      	strb	r3, [r4, r2]
    7a64:	330f      	adds	r3, #15
    7a66:	3201      	adds	r2, #1
    7a68:	54a3      	strb	r3, [r4, r2]
    7a6a:	320f      	adds	r2, #15
    7a6c:	2133      	movs	r1, #51	; 0x33
    7a6e:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    7a70:	313f      	adds	r1, #63	; 0x3f
    7a72:	2085      	movs	r0, #133	; 0x85
    7a74:	0080      	lsls	r0, r0, #2
    7a76:	5421      	strb	r1, [r4, r0]
    7a78:	4817      	ldr	r0, [pc, #92]	; (7ad8 <sync+0xcc>)
    7a7a:	5421      	strb	r1, [r4, r0]
    7a7c:	4917      	ldr	r1, [pc, #92]	; (7adc <sync+0xd0>)
    7a7e:	5462      	strb	r2, [r4, r1]
    7a80:	4a17      	ldr	r2, [pc, #92]	; (7ae0 <sync+0xd4>)
    7a82:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    7a84:	6923      	ldr	r3, [r4, #16]
    7a86:	3201      	adds	r2, #1
    7a88:	54a3      	strb	r3, [r4, r2]
    7a8a:	0a19      	lsrs	r1, r3, #8
    7a8c:	4a15      	ldr	r2, [pc, #84]	; (7ae4 <sync+0xd8>)
    7a8e:	54a1      	strb	r1, [r4, r2]
    7a90:	0c19      	lsrs	r1, r3, #16
    7a92:	4a15      	ldr	r2, [pc, #84]	; (7ae8 <sync+0xdc>)
    7a94:	54a1      	strb	r1, [r4, r2]
    7a96:	0e1b      	lsrs	r3, r3, #24
    7a98:	4a14      	ldr	r2, [pc, #80]	; (7aec <sync+0xe0>)
    7a9a:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    7a9c:	68e3      	ldr	r3, [r4, #12]
    7a9e:	3201      	adds	r2, #1
    7aa0:	54a3      	strb	r3, [r4, r2]
    7aa2:	0a19      	lsrs	r1, r3, #8
    7aa4:	4a12      	ldr	r2, [pc, #72]	; (7af0 <sync+0xe4>)
    7aa6:	54a1      	strb	r1, [r4, r2]
    7aa8:	0c19      	lsrs	r1, r3, #16
    7aaa:	4a12      	ldr	r2, [pc, #72]	; (7af4 <sync+0xe8>)
    7aac:	54a1      	strb	r1, [r4, r2]
    7aae:	0e1b      	lsrs	r3, r3, #24
    7ab0:	4a11      	ldr	r2, [pc, #68]	; (7af8 <sync+0xec>)
    7ab2:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    7ab4:	7860      	ldrb	r0, [r4, #1]
    7ab6:	2301      	movs	r3, #1
    7ab8:	6962      	ldr	r2, [r4, #20]
    7aba:	0029      	movs	r1, r5
    7abc:	4d0f      	ldr	r5, [pc, #60]	; (7afc <sync+0xf0>)
    7abe:	47a8      	blx	r5
			fs->fsi_flag = 0;
    7ac0:	7166      	strb	r6, [r4, #5]
    7ac2:	e7ad      	b.n	7a20 <sync+0x14>
    7ac4:	00006fb5 	.word	0x00006fb5
    7ac8:	00006a19 	.word	0x00006a19
    7acc:	00006ae9 	.word	0x00006ae9
    7ad0:	0000022e 	.word	0x0000022e
    7ad4:	0000022f 	.word	0x0000022f
    7ad8:	00000215 	.word	0x00000215
    7adc:	00000216 	.word	0x00000216
    7ae0:	00000217 	.word	0x00000217
    7ae4:	00000219 	.word	0x00000219
    7ae8:	0000021a 	.word	0x0000021a
    7aec:	0000021b 	.word	0x0000021b
    7af0:	0000021d 	.word	0x0000021d
    7af4:	0000021e 	.word	0x0000021e
    7af8:	0000021f 	.word	0x0000021f
    7afc:	00006995 	.word	0x00006995

00007b00 <follow_path>:
{
    7b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b02:	46de      	mov	lr, fp
    7b04:	4657      	mov	r7, sl
    7b06:	464e      	mov	r6, r9
    7b08:	4645      	mov	r5, r8
    7b0a:	b5e0      	push	{r5, r6, r7, lr}
    7b0c:	b083      	sub	sp, #12
    7b0e:	4682      	mov	sl, r0
    7b10:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    7b12:	780b      	ldrb	r3, [r1, #0]
    7b14:	2b2f      	cmp	r3, #47	; 0x2f
    7b16:	d00f      	beq.n	7b38 <follow_path+0x38>
    7b18:	2b5c      	cmp	r3, #92	; 0x5c
    7b1a:	d00d      	beq.n	7b38 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    7b1c:	2300      	movs	r3, #0
    7b1e:	4652      	mov	r2, sl
    7b20:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    7b22:	782b      	ldrb	r3, [r5, #0]
    7b24:	4657      	mov	r7, sl
    7b26:	2b1f      	cmp	r3, #31
    7b28:	d809      	bhi.n	7b3e <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    7b2a:	2100      	movs	r1, #0
    7b2c:	4650      	mov	r0, sl
    7b2e:	4bb2      	ldr	r3, [pc, #712]	; (7df8 <follow_path+0x2f8>)
    7b30:	4798      	blx	r3
		dj->dir = 0;
    7b32:	2300      	movs	r3, #0
    7b34:	617b      	str	r3, [r7, #20]
    7b36:	e13a      	b.n	7dae <follow_path+0x2ae>
		path++;
    7b38:	3501      	adds	r5, #1
    7b3a:	e7ef      	b.n	7b1c <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    7b3c:	3501      	adds	r5, #1
    7b3e:	7828      	ldrb	r0, [r5, #0]
    7b40:	282f      	cmp	r0, #47	; 0x2f
    7b42:	d0fb      	beq.n	7b3c <follow_path+0x3c>
    7b44:	285c      	cmp	r0, #92	; 0x5c
    7b46:	d0f9      	beq.n	7b3c <follow_path+0x3c>
	lfn = dj->lfn;
    7b48:	69fb      	ldr	r3, [r7, #28]
    7b4a:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    7b4c:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    7b4e:	281f      	cmp	r0, #31
    7b50:	d800      	bhi.n	7b54 <follow_path+0x54>
    7b52:	e13b      	b.n	7dcc <follow_path+0x2cc>
    7b54:	282f      	cmp	r0, #47	; 0x2f
    7b56:	d100      	bne.n	7b5a <follow_path+0x5a>
    7b58:	e13b      	b.n	7dd2 <follow_path+0x2d2>
    7b5a:	285c      	cmp	r0, #92	; 0x5c
    7b5c:	d100      	bne.n	7b60 <follow_path+0x60>
    7b5e:	e13b      	b.n	7dd8 <follow_path+0x2d8>
    7b60:	1c6e      	adds	r6, r5, #1
    7b62:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    7b64:	2380      	movs	r3, #128	; 0x80
    7b66:	005b      	lsls	r3, r3, #1
    7b68:	4698      	mov	r8, r3
    7b6a:	46bb      	mov	fp, r7
    7b6c:	002b      	movs	r3, r5
    7b6e:	0025      	movs	r5, r4
    7b70:	0034      	movs	r4, r6
    7b72:	4656      	mov	r6, sl
    7b74:	4699      	mov	r9, r3
    7b76:	e011      	b.n	7b9c <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    7b78:	2b00      	cmp	r3, #0
    7b7a:	d135      	bne.n	7be8 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    7b7c:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    7b7e:	1c6b      	adds	r3, r5, #1
    7b80:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    7b82:	281f      	cmp	r0, #31
    7b84:	d91e      	bls.n	7bc4 <follow_path+0xc4>
    7b86:	282f      	cmp	r0, #47	; 0x2f
    7b88:	d100      	bne.n	7b8c <follow_path+0x8c>
    7b8a:	e128      	b.n	7dde <follow_path+0x2de>
    7b8c:	285c      	cmp	r0, #92	; 0x5c
    7b8e:	d100      	bne.n	7b92 <follow_path+0x92>
    7b90:	e142      	b.n	7e18 <follow_path+0x318>
    7b92:	3602      	adds	r6, #2
    7b94:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    7b96:	4543      	cmp	r3, r8
    7b98:	d026      	beq.n	7be8 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    7b9a:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    7b9c:	2101      	movs	r1, #1
    7b9e:	4b97      	ldr	r3, [pc, #604]	; (7dfc <follow_path+0x2fc>)
    7ba0:	4798      	blx	r3
    7ba2:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    7ba4:	d020      	beq.n	7be8 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    7ba6:	287f      	cmp	r0, #127	; 0x7f
    7ba8:	d8e8      	bhi.n	7b7c <follow_path+0x7c>
	while (*str && *str != chr) str++;
    7baa:	2822      	cmp	r0, #34	; 0x22
    7bac:	d100      	bne.n	7bb0 <follow_path+0xb0>
    7bae:	e0fd      	b.n	7dac <follow_path+0x2ac>
    7bb0:	232a      	movs	r3, #42	; 0x2a
    7bb2:	4a93      	ldr	r2, [pc, #588]	; (7e00 <follow_path+0x300>)
    7bb4:	b29f      	uxth	r7, r3
    7bb6:	428f      	cmp	r7, r1
    7bb8:	d0de      	beq.n	7b78 <follow_path+0x78>
    7bba:	3201      	adds	r2, #1
    7bbc:	7813      	ldrb	r3, [r2, #0]
    7bbe:	2b00      	cmp	r3, #0
    7bc0:	d1f8      	bne.n	7bb4 <follow_path+0xb4>
    7bc2:	e7db      	b.n	7b7c <follow_path+0x7c>
    7bc4:	002c      	movs	r4, r5
    7bc6:	465f      	mov	r7, fp
    7bc8:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    7bca:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    7bcc:	2604      	movs	r6, #4
    7bce:	e10b      	b.n	7de8 <follow_path+0x2e8>
		di--;
    7bd0:	3c01      	subs	r4, #1
    7bd2:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    7bd4:	2c00      	cmp	r4, #0
    7bd6:	d100      	bne.n	7bda <follow_path+0xda>
    7bd8:	e0e8      	b.n	7dac <follow_path+0x2ac>
		w = lfn[di-1];
    7bda:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    7bdc:	2a20      	cmp	r2, #32
    7bde:	d0f7      	beq.n	7bd0 <follow_path+0xd0>
    7be0:	2a2e      	cmp	r2, #46	; 0x2e
    7be2:	d0f5      	beq.n	7bd0 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    7be4:	2c00      	cmp	r4, #0
    7be6:	d101      	bne.n	7bec <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    7be8:	2006      	movs	r0, #6
	return res;
    7bea:	e0e0      	b.n	7dae <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    7bec:	0063      	lsls	r3, r4, #1
    7bee:	4698      	mov	r8, r3
    7bf0:	2300      	movs	r3, #0
    7bf2:	4652      	mov	r2, sl
    7bf4:	4641      	mov	r1, r8
    7bf6:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    7bf8:	220b      	movs	r2, #11
    7bfa:	2120      	movs	r1, #32
    7bfc:	69b8      	ldr	r0, [r7, #24]
    7bfe:	4b81      	ldr	r3, [pc, #516]	; (7e04 <follow_path+0x304>)
    7c00:	4798      	blx	r3
    7c02:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    7c04:	2300      	movs	r3, #0
    7c06:	e001      	b.n	7c0c <follow_path+0x10c>
    7c08:	3301      	adds	r3, #1
    7c0a:	3202      	adds	r2, #2
    7c0c:	8811      	ldrh	r1, [r2, #0]
    7c0e:	2920      	cmp	r1, #32
    7c10:	d0fa      	beq.n	7c08 <follow_path+0x108>
    7c12:	292e      	cmp	r1, #46	; 0x2e
    7c14:	d0f8      	beq.n	7c08 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    7c16:	2b00      	cmp	r3, #0
    7c18:	d001      	beq.n	7c1e <follow_path+0x11e>
    7c1a:	2203      	movs	r2, #3
    7c1c:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    7c1e:	4652      	mov	r2, sl
    7c20:	4442      	add	r2, r8
    7c22:	3a02      	subs	r2, #2
    7c24:	8812      	ldrh	r2, [r2, #0]
    7c26:	2a2e      	cmp	r2, #46	; 0x2e
    7c28:	d009      	beq.n	7c3e <follow_path+0x13e>
    7c2a:	4642      	mov	r2, r8
    7c2c:	3a04      	subs	r2, #4
    7c2e:	4452      	add	r2, sl
    7c30:	3c01      	subs	r4, #1
    7c32:	2c00      	cmp	r4, #0
    7c34:	d003      	beq.n	7c3e <follow_path+0x13e>
    7c36:	3a02      	subs	r2, #2
    7c38:	8851      	ldrh	r1, [r2, #2]
    7c3a:	292e      	cmp	r1, #46	; 0x2e
    7c3c:	d1f8      	bne.n	7c30 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    7c3e:	2208      	movs	r2, #8
    7c40:	9201      	str	r2, [sp, #4]
    7c42:	2200      	movs	r2, #0
    7c44:	4693      	mov	fp, r2
    7c46:	4691      	mov	r9, r2
    7c48:	46a0      	mov	r8, r4
    7c4a:	e006      	b.n	7c5a <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    7c4c:	4544      	cmp	r4, r8
    7c4e:	d100      	bne.n	7c52 <follow_path+0x152>
    7c50:	e0e6      	b.n	7e20 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    7c52:	2303      	movs	r3, #3
    7c54:	431e      	orrs	r6, r3
    7c56:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    7c58:	0023      	movs	r3, r4
    7c5a:	1c5c      	adds	r4, r3, #1
    7c5c:	005b      	lsls	r3, r3, #1
    7c5e:	4652      	mov	r2, sl
    7c60:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    7c62:	2800      	cmp	r0, #0
    7c64:	d02c      	beq.n	7cc0 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    7c66:	2820      	cmp	r0, #32
    7c68:	d0f3      	beq.n	7c52 <follow_path+0x152>
    7c6a:	282e      	cmp	r0, #46	; 0x2e
    7c6c:	d0ee      	beq.n	7c4c <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    7c6e:	9b01      	ldr	r3, [sp, #4]
    7c70:	459b      	cmp	fp, r3
    7c72:	d219      	bcs.n	7ca8 <follow_path+0x1a8>
    7c74:	4544      	cmp	r4, r8
    7c76:	d100      	bne.n	7c7a <follow_path+0x17a>
    7c78:	e0d2      	b.n	7e20 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    7c7a:	287f      	cmp	r0, #127	; 0x7f
    7c7c:	d85e      	bhi.n	7d3c <follow_path+0x23c>
	while (*str && *str != chr) str++;
    7c7e:	282b      	cmp	r0, #43	; 0x2b
    7c80:	d06e      	beq.n	7d60 <follow_path+0x260>
    7c82:	232c      	movs	r3, #44	; 0x2c
    7c84:	4a60      	ldr	r2, [pc, #384]	; (7e08 <follow_path+0x308>)
    7c86:	b299      	uxth	r1, r3
    7c88:	4281      	cmp	r1, r0
    7c8a:	d067      	beq.n	7d5c <follow_path+0x25c>
    7c8c:	3201      	adds	r2, #1
    7c8e:	7813      	ldrb	r3, [r2, #0]
    7c90:	2b00      	cmp	r3, #0
    7c92:	d1f8      	bne.n	7c86 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    7c94:	0003      	movs	r3, r0
    7c96:	3b41      	subs	r3, #65	; 0x41
    7c98:	b29b      	uxth	r3, r3
    7c9a:	2b19      	cmp	r3, #25
    7c9c:	d86c      	bhi.n	7d78 <follow_path+0x278>
					b |= 2;
    7c9e:	2302      	movs	r3, #2
    7ca0:	464a      	mov	r2, r9
    7ca2:	431a      	orrs	r2, r3
    7ca4:	4691      	mov	r9, r2
    7ca6:	e05f      	b.n	7d68 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    7ca8:	9b01      	ldr	r3, [sp, #4]
    7caa:	2b0b      	cmp	r3, #11
    7cac:	d03b      	beq.n	7d26 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    7cae:	4544      	cmp	r4, r8
    7cb0:	d100      	bne.n	7cb4 <follow_path+0x1b4>
    7cb2:	e0b9      	b.n	7e28 <follow_path+0x328>
    7cb4:	2303      	movs	r3, #3
    7cb6:	431e      	orrs	r6, r3
    7cb8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    7cba:	4544      	cmp	r4, r8
    7cbc:	d800      	bhi.n	7cc0 <follow_path+0x1c0>
    7cbe:	e0b3      	b.n	7e28 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    7cc0:	69bb      	ldr	r3, [r7, #24]
    7cc2:	781a      	ldrb	r2, [r3, #0]
    7cc4:	2ae5      	cmp	r2, #229	; 0xe5
    7cc6:	d036      	beq.n	7d36 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    7cc8:	9b01      	ldr	r3, [sp, #4]
    7cca:	2b08      	cmp	r3, #8
    7ccc:	d060      	beq.n	7d90 <follow_path+0x290>
    7cce:	230c      	movs	r3, #12
    7cd0:	464a      	mov	r2, r9
    7cd2:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    7cd4:	2b0c      	cmp	r3, #12
    7cd6:	d060      	beq.n	7d9a <follow_path+0x29a>
    7cd8:	43d2      	mvns	r2, r2
    7cda:	0792      	lsls	r2, r2, #30
    7cdc:	d05d      	beq.n	7d9a <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    7cde:	07b2      	lsls	r2, r6, #30
    7ce0:	d406      	bmi.n	7cf0 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    7ce2:	2203      	movs	r2, #3
    7ce4:	4649      	mov	r1, r9
    7ce6:	400a      	ands	r2, r1
    7ce8:	2a01      	cmp	r2, #1
    7cea:	d059      	beq.n	7da0 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    7cec:	2b04      	cmp	r3, #4
    7cee:	d05a      	beq.n	7da6 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    7cf0:	69bb      	ldr	r3, [r7, #24]
    7cf2:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    7cf4:	0038      	movs	r0, r7
    7cf6:	4b45      	ldr	r3, [pc, #276]	; (7e0c <follow_path+0x30c>)
    7cf8:	4798      	blx	r3
			ns = *(dj->fn+NS);
    7cfa:	69bb      	ldr	r3, [r7, #24]
    7cfc:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    7cfe:	2800      	cmp	r0, #0
    7d00:	d15c      	bne.n	7dbc <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    7d02:	075b      	lsls	r3, r3, #29
    7d04:	d453      	bmi.n	7dae <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    7d06:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    7d08:	7ad3      	ldrb	r3, [r2, #11]
    7d0a:	06db      	lsls	r3, r3, #27
    7d0c:	d55c      	bpl.n	7dc8 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    7d0e:	7d51      	ldrb	r1, [r2, #21]
    7d10:	0209      	lsls	r1, r1, #8
    7d12:	7d13      	ldrb	r3, [r2, #20]
    7d14:	430b      	orrs	r3, r1
    7d16:	041b      	lsls	r3, r3, #16
    7d18:	7ed1      	ldrb	r1, [r2, #27]
    7d1a:	0209      	lsls	r1, r1, #8
    7d1c:	7e92      	ldrb	r2, [r2, #26]
    7d1e:	430a      	orrs	r2, r1
    7d20:	4313      	orrs	r3, r2
    7d22:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    7d24:	e70b      	b.n	7b3e <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    7d26:	2303      	movs	r3, #3
    7d28:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    7d2a:	69bb      	ldr	r3, [r7, #24]
    7d2c:	781a      	ldrb	r2, [r3, #0]
    7d2e:	2ae5      	cmp	r2, #229	; 0xe5
    7d30:	d1cd      	bne.n	7cce <follow_path+0x1ce>
    7d32:	220b      	movs	r2, #11
    7d34:	9201      	str	r2, [sp, #4]
    7d36:	2205      	movs	r2, #5
    7d38:	701a      	strb	r2, [r3, #0]
    7d3a:	e7c5      	b.n	7cc8 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    7d3c:	2100      	movs	r1, #0
    7d3e:	4b2f      	ldr	r3, [pc, #188]	; (7dfc <follow_path+0x2fc>)
    7d40:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    7d42:	2800      	cmp	r0, #0
    7d44:	d100      	bne.n	7d48 <follow_path+0x248>
    7d46:	e079      	b.n	7e3c <follow_path+0x33c>
    7d48:	4b31      	ldr	r3, [pc, #196]	; (7e10 <follow_path+0x310>)
    7d4a:	469c      	mov	ip, r3
    7d4c:	4460      	add	r0, ip
    7d4e:	3880      	subs	r0, #128	; 0x80
    7d50:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    7d52:	2302      	movs	r3, #2
    7d54:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    7d56:	2800      	cmp	r0, #0
    7d58:	d002      	beq.n	7d60 <follow_path+0x260>
    7d5a:	e790      	b.n	7c7e <follow_path+0x17e>
    7d5c:	2b00      	cmp	r3, #0
    7d5e:	d099      	beq.n	7c94 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    7d60:	2303      	movs	r3, #3
    7d62:	431e      	orrs	r6, r3
    7d64:	b2f6      	uxtb	r6, r6
    7d66:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    7d68:	69bb      	ldr	r3, [r7, #24]
    7d6a:	465a      	mov	r2, fp
    7d6c:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    7d6e:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    7d70:	2201      	movs	r2, #1
    7d72:	4694      	mov	ip, r2
    7d74:	44e3      	add	fp, ip
    7d76:	e770      	b.n	7c5a <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    7d78:	0003      	movs	r3, r0
    7d7a:	3b61      	subs	r3, #97	; 0x61
    7d7c:	b29b      	uxth	r3, r3
    7d7e:	2b19      	cmp	r3, #25
    7d80:	d8f2      	bhi.n	7d68 <follow_path+0x268>
						b |= 1; w -= 0x20;
    7d82:	2301      	movs	r3, #1
    7d84:	464a      	mov	r2, r9
    7d86:	431a      	orrs	r2, r3
    7d88:	4691      	mov	r9, r2
    7d8a:	3820      	subs	r0, #32
    7d8c:	b280      	uxth	r0, r0
    7d8e:	e7eb      	b.n	7d68 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    7d90:	464b      	mov	r3, r9
    7d92:	009b      	lsls	r3, r3, #2
    7d94:	b2db      	uxtb	r3, r3
    7d96:	4699      	mov	r9, r3
    7d98:	e799      	b.n	7cce <follow_path+0x1ce>
		cf |= NS_LFN;
    7d9a:	2202      	movs	r2, #2
    7d9c:	4316      	orrs	r6, r2
    7d9e:	e79e      	b.n	7cde <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    7da0:	320f      	adds	r2, #15
    7da2:	4316      	orrs	r6, r2
    7da4:	e7a2      	b.n	7cec <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    7da6:	3304      	adds	r3, #4
    7da8:	431e      	orrs	r6, r3
    7daa:	e7a1      	b.n	7cf0 <follow_path+0x1f0>
    7dac:	2006      	movs	r0, #6
}
    7dae:	b003      	add	sp, #12
    7db0:	bc3c      	pop	{r2, r3, r4, r5}
    7db2:	4690      	mov	r8, r2
    7db4:	4699      	mov	r9, r3
    7db6:	46a2      	mov	sl, r4
    7db8:	46ab      	mov	fp, r5
    7dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    7dbc:	2804      	cmp	r0, #4
    7dbe:	d1f6      	bne.n	7dae <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    7dc0:	075b      	lsls	r3, r3, #29
    7dc2:	d4f4      	bmi.n	7dae <follow_path+0x2ae>
    7dc4:	3001      	adds	r0, #1
    7dc6:	e7f2      	b.n	7dae <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    7dc8:	2005      	movs	r0, #5
    7dca:	e7f0      	b.n	7dae <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    7dcc:	2301      	movs	r3, #1
	si = di = 0;
    7dce:	2400      	movs	r4, #0
    7dd0:	e6fb      	b.n	7bca <follow_path+0xca>
		w = p[si++];					/* Get a character */
    7dd2:	2301      	movs	r3, #1
	si = di = 0;
    7dd4:	2400      	movs	r4, #0
    7dd6:	e005      	b.n	7de4 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    7dd8:	2301      	movs	r3, #1
	si = di = 0;
    7dda:	2400      	movs	r4, #0
    7ddc:	e002      	b.n	7de4 <follow_path+0x2e4>
    7dde:	002c      	movs	r4, r5
    7de0:	465f      	mov	r7, fp
    7de2:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    7de4:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    7de6:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    7de8:	2c00      	cmp	r4, #0
    7dea:	d0df      	beq.n	7dac <follow_path+0x2ac>
    7dec:	4b09      	ldr	r3, [pc, #36]	; (7e14 <follow_path+0x314>)
    7dee:	18e3      	adds	r3, r4, r3
    7df0:	005b      	lsls	r3, r3, #1
    7df2:	4453      	add	r3, sl
    7df4:	e6f1      	b.n	7bda <follow_path+0xda>
    7df6:	46c0      	nop			; (mov r8, r8)
    7df8:	00007151 	.word	0x00007151
    7dfc:	000084e1 	.word	0x000084e1
    7e00:	0000de0d 	.word	0x0000de0d
    7e04:	00006ae9 	.word	0x00006ae9
    7e08:	0000de19 	.word	0x0000de19
    7e0c:	00007591 	.word	0x00007591
    7e10:	0000dd8c 	.word	0x0000dd8c
    7e14:	7fffffff 	.word	0x7fffffff
    7e18:	002c      	movs	r4, r5
    7e1a:	465f      	mov	r7, fp
    7e1c:	464d      	mov	r5, r9
    7e1e:	e7e1      	b.n	7de4 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    7e20:	9b01      	ldr	r3, [sp, #4]
    7e22:	2b0b      	cmp	r3, #11
    7e24:	d100      	bne.n	7e28 <follow_path+0x328>
    7e26:	e77e      	b.n	7d26 <follow_path+0x226>
			b <<= 2; continue;
    7e28:	464b      	mov	r3, r9
    7e2a:	009b      	lsls	r3, r3, #2
    7e2c:	b2db      	uxtb	r3, r3
    7e2e:	4699      	mov	r9, r3
    7e30:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    7e32:	220b      	movs	r2, #11
    7e34:	9201      	str	r2, [sp, #4]
    7e36:	3a03      	subs	r2, #3
    7e38:	4693      	mov	fp, r2
    7e3a:	e70e      	b.n	7c5a <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    7e3c:	2302      	movs	r3, #2
    7e3e:	431e      	orrs	r6, r3
    7e40:	e78e      	b.n	7d60 <follow_path+0x260>
    7e42:	46c0      	nop			; (mov r8, r8)

00007e44 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    7e44:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    7e46:	2807      	cmp	r0, #7
    7e48:	d901      	bls.n	7e4e <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    7e4a:	0018      	movs	r0, r3
    7e4c:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    7e4e:	0083      	lsls	r3, r0, #2
    7e50:	4a07      	ldr	r2, [pc, #28]	; (7e70 <f_mount+0x2c>)
    7e52:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    7e54:	2b00      	cmp	r3, #0
    7e56:	d001      	beq.n	7e5c <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    7e58:	2200      	movs	r2, #0
    7e5a:	701a      	strb	r2, [r3, #0]
	if (fs) {
    7e5c:	2900      	cmp	r1, #0
    7e5e:	d001      	beq.n	7e64 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    7e60:	2300      	movs	r3, #0
    7e62:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    7e64:	0080      	lsls	r0, r0, #2
    7e66:	4b02      	ldr	r3, [pc, #8]	; (7e70 <f_mount+0x2c>)
    7e68:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    7e6a:	2300      	movs	r3, #0
    7e6c:	e7ed      	b.n	7e4a <f_mount+0x6>
    7e6e:	46c0      	nop			; (mov r8, r8)
    7e70:	200003fc 	.word	0x200003fc

00007e74 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    7e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e76:	46c6      	mov	lr, r8
    7e78:	b500      	push	{lr}
    7e7a:	4c59      	ldr	r4, [pc, #356]	; (7fe0 <f_open+0x16c>)
    7e7c:	44a5      	add	sp, r4
    7e7e:	0005      	movs	r5, r0
    7e80:	9101      	str	r1, [sp, #4]
    7e82:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    7e84:	2300      	movs	r3, #0
    7e86:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    7e88:	261f      	movs	r6, #31
    7e8a:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    7e8c:	221e      	movs	r2, #30
    7e8e:	403a      	ands	r2, r7
    7e90:	a985      	add	r1, sp, #532	; 0x214
    7e92:	a801      	add	r0, sp, #4
    7e94:	4b53      	ldr	r3, [pc, #332]	; (7fe4 <f_open+0x170>)
    7e96:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    7e98:	ab82      	add	r3, sp, #520	; 0x208
    7e9a:	938b      	str	r3, [sp, #556]	; 0x22c
    7e9c:	ab02      	add	r3, sp, #8
    7e9e:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    7ea0:	2800      	cmp	r0, #0
    7ea2:	d006      	beq.n	7eb2 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    7ea4:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7ea6:	231c      	movs	r3, #28
    7ea8:	423b      	tst	r3, r7
    7eaa:	d145      	bne.n	7f38 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    7eac:	2800      	cmp	r0, #0
    7eae:	d13d      	bne.n	7f2c <f_open+0xb8>
    7eb0:	e00c      	b.n	7ecc <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    7eb2:	9901      	ldr	r1, [sp, #4]
    7eb4:	a885      	add	r0, sp, #532	; 0x214
    7eb6:	4b4c      	ldr	r3, [pc, #304]	; (7fe8 <f_open+0x174>)
    7eb8:	4798      	blx	r3
	dir = dj.dir;
    7eba:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    7ebc:	2800      	cmp	r0, #0
    7ebe:	d1f2      	bne.n	7ea6 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    7ec0:	2c00      	cmp	r4, #0
    7ec2:	d100      	bne.n	7ec6 <f_open+0x52>
    7ec4:	e086      	b.n	7fd4 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7ec6:	231c      	movs	r3, #28
    7ec8:	423b      	tst	r3, r7
    7eca:	d146      	bne.n	7f5a <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    7ecc:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    7ece:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    7ed0:	06da      	lsls	r2, r3, #27
    7ed2:	d42b      	bmi.n	7f2c <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    7ed4:	07ba      	lsls	r2, r7, #30
    7ed6:	d502      	bpl.n	7ede <f_open+0x6a>
					res = FR_DENIED;
    7ed8:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    7eda:	07db      	lsls	r3, r3, #31
    7edc:	d426      	bmi.n	7f2c <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    7ede:	073b      	lsls	r3, r7, #28
    7ee0:	d501      	bpl.n	7ee6 <f_open+0x72>
			mode |= FA__WRITTEN;
    7ee2:	2320      	movs	r3, #32
    7ee4:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    7ee6:	9b85      	ldr	r3, [sp, #532]	; 0x214
    7ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7eea:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    7eec:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    7eee:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    7ef0:	7d62      	ldrb	r2, [r4, #21]
    7ef2:	0212      	lsls	r2, r2, #8
    7ef4:	7d23      	ldrb	r3, [r4, #20]
    7ef6:	4313      	orrs	r3, r2
    7ef8:	041b      	lsls	r3, r3, #16
    7efa:	7ee1      	ldrb	r1, [r4, #27]
    7efc:	0209      	lsls	r1, r1, #8
    7efe:	7ea2      	ldrb	r2, [r4, #26]
    7f00:	430a      	orrs	r2, r1
    7f02:	4313      	orrs	r3, r2
    7f04:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    7f06:	7fe3      	ldrb	r3, [r4, #31]
    7f08:	061b      	lsls	r3, r3, #24
    7f0a:	7fa2      	ldrb	r2, [r4, #30]
    7f0c:	0412      	lsls	r2, r2, #16
    7f0e:	4313      	orrs	r3, r2
    7f10:	7f22      	ldrb	r2, [r4, #28]
    7f12:	4313      	orrs	r3, r2
    7f14:	7f62      	ldrb	r2, [r4, #29]
    7f16:	0212      	lsls	r2, r2, #8
    7f18:	4313      	orrs	r3, r2
    7f1a:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    7f1c:	2300      	movs	r3, #0
    7f1e:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    7f20:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    7f22:	9b85      	ldr	r3, [sp, #532]	; 0x214
    7f24:	602b      	str	r3, [r5, #0]
    7f26:	88db      	ldrh	r3, [r3, #6]
    7f28:	80ab      	strh	r3, [r5, #4]
    7f2a:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    7f2c:	238e      	movs	r3, #142	; 0x8e
    7f2e:	009b      	lsls	r3, r3, #2
    7f30:	449d      	add	sp, r3
    7f32:	bc04      	pop	{r2}
    7f34:	4690      	mov	r8, r2
    7f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    7f38:	2804      	cmp	r0, #4
    7f3a:	d005      	beq.n	7f48 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    7f3c:	2308      	movs	r3, #8
    7f3e:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    7f40:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    7f42:	2800      	cmp	r0, #0
    7f44:	d0d3      	beq.n	7eee <f_open+0x7a>
    7f46:	e7f1      	b.n	7f2c <f_open+0xb8>
				res = dir_register(&dj);
    7f48:	a885      	add	r0, sp, #532	; 0x214
    7f4a:	4b28      	ldr	r3, [pc, #160]	; (7fec <f_open+0x178>)
    7f4c:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    7f4e:	2308      	movs	r3, #8
    7f50:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    7f52:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    7f54:	2800      	cmp	r0, #0
    7f56:	d008      	beq.n	7f6a <f_open+0xf6>
    7f58:	e7e8      	b.n	7f2c <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    7f5a:	7ae3      	ldrb	r3, [r4, #11]
    7f5c:	2211      	movs	r2, #17
				res = FR_DENIED;
    7f5e:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    7f60:	421a      	tst	r2, r3
    7f62:	d1e3      	bne.n	7f2c <f_open+0xb8>
					res = FR_EXIST;
    7f64:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    7f66:	077b      	lsls	r3, r7, #29
    7f68:	d4e0      	bmi.n	7f2c <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    7f6a:	0733      	lsls	r3, r6, #28
    7f6c:	d5bb      	bpl.n	7ee6 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    7f6e:	4b20      	ldr	r3, [pc, #128]	; (7ff0 <f_open+0x17c>)
    7f70:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    7f72:	73a0      	strb	r0, [r4, #14]
    7f74:	0a03      	lsrs	r3, r0, #8
    7f76:	73e3      	strb	r3, [r4, #15]
    7f78:	0c03      	lsrs	r3, r0, #16
    7f7a:	7423      	strb	r3, [r4, #16]
    7f7c:	0e00      	lsrs	r0, r0, #24
    7f7e:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    7f80:	2300      	movs	r3, #0
    7f82:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    7f84:	7723      	strb	r3, [r4, #28]
    7f86:	7763      	strb	r3, [r4, #29]
    7f88:	77a3      	strb	r3, [r4, #30]
    7f8a:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    7f8c:	7d62      	ldrb	r2, [r4, #21]
    7f8e:	0212      	lsls	r2, r2, #8
    7f90:	7d27      	ldrb	r7, [r4, #20]
    7f92:	4317      	orrs	r7, r2
    7f94:	043f      	lsls	r7, r7, #16
    7f96:	7ee1      	ldrb	r1, [r4, #27]
    7f98:	0209      	lsls	r1, r1, #8
    7f9a:	7ea2      	ldrb	r2, [r4, #26]
    7f9c:	430a      	orrs	r2, r1
    7f9e:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    7fa0:	76a3      	strb	r3, [r4, #26]
    7fa2:	76e3      	strb	r3, [r4, #27]
    7fa4:	7523      	strb	r3, [r4, #20]
    7fa6:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    7fa8:	9885      	ldr	r0, [sp, #532]	; 0x214
    7faa:	3301      	adds	r3, #1
    7fac:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    7fae:	2f00      	cmp	r7, #0
    7fb0:	d097      	beq.n	7ee2 <f_open+0x6e>
				dw = dj.fs->winsect;
    7fb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    7fb4:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    7fb6:	0039      	movs	r1, r7
    7fb8:	4b0e      	ldr	r3, [pc, #56]	; (7ff4 <f_open+0x180>)
    7fba:	4798      	blx	r3
				if (res == FR_OK) {
    7fbc:	2800      	cmp	r0, #0
    7fbe:	d1b5      	bne.n	7f2c <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    7fc0:	9885      	ldr	r0, [sp, #532]	; 0x214
    7fc2:	3f01      	subs	r7, #1
    7fc4:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    7fc6:	4641      	mov	r1, r8
    7fc8:	4b0b      	ldr	r3, [pc, #44]	; (7ff8 <f_open+0x184>)
    7fca:	4798      	blx	r3
	if (res == FR_OK) {
    7fcc:	2800      	cmp	r0, #0
    7fce:	d100      	bne.n	7fd2 <f_open+0x15e>
    7fd0:	e787      	b.n	7ee2 <f_open+0x6e>
    7fd2:	e7ab      	b.n	7f2c <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7fd4:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    7fd6:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7fd8:	423b      	tst	r3, r7
    7fda:	d0b2      	beq.n	7f42 <f_open+0xce>
			res = FR_INVALID_NAME;
    7fdc:	2006      	movs	r0, #6
    7fde:	e7ad      	b.n	7f3c <f_open+0xc8>
    7fe0:	fffffdc8 	.word	0xfffffdc8
    7fe4:	00006c05 	.word	0x00006c05
    7fe8:	00007b01 	.word	0x00007b01
    7fec:	00007729 	.word	0x00007729
    7ff0:	00006a85 	.word	0x00006a85
    7ff4:	000073f5 	.word	0x000073f5
    7ff8:	00006fb5 	.word	0x00006fb5

00007ffc <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    7ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ffe:	46de      	mov	lr, fp
    8000:	4657      	mov	r7, sl
    8002:	464e      	mov	r6, r9
    8004:	4645      	mov	r5, r8
    8006:	b5e0      	push	{r5, r6, r7, lr}
    8008:	b083      	sub	sp, #12
    800a:	0004      	movs	r4, r0
    800c:	000f      	movs	r7, r1
    800e:	0015      	movs	r5, r2
    8010:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    8012:	2300      	movs	r3, #0
    8014:	464a      	mov	r2, r9
    8016:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    8018:	8881      	ldrh	r1, [r0, #4]
    801a:	6800      	ldr	r0, [r0, #0]
    801c:	4b5e      	ldr	r3, [pc, #376]	; (8198 <f_read+0x19c>)
    801e:	4798      	blx	r3
    8020:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    8022:	2800      	cmp	r0, #0
    8024:	d000      	beq.n	8028 <f_read+0x2c>
    8026:	e0af      	b.n	8188 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    8028:	79a3      	ldrb	r3, [r4, #6]
    802a:	b25a      	sxtb	r2, r3
    802c:	2a00      	cmp	r2, #0
    802e:	da00      	bge.n	8032 <f_read+0x36>
    8030:	e0a8      	b.n	8184 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    8032:	07db      	lsls	r3, r3, #31
    8034:	d402      	bmi.n	803c <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    8036:	2307      	movs	r3, #7
    8038:	9300      	str	r3, [sp, #0]
    803a:	e0a5      	b.n	8188 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    803c:	68e3      	ldr	r3, [r4, #12]
    803e:	68a2      	ldr	r2, [r4, #8]
    8040:	1a9e      	subs	r6, r3, r2
    8042:	42ae      	cmp	r6, r5
    8044:	d900      	bls.n	8048 <f_read+0x4c>
    8046:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    8048:	2e00      	cmp	r6, #0
    804a:	d153      	bne.n	80f4 <f_read+0xf8>
    804c:	e09c      	b.n	8188 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    804e:	6961      	ldr	r1, [r4, #20]
    8050:	4b52      	ldr	r3, [pc, #328]	; (819c <f_read+0x1a0>)
    8052:	4798      	blx	r3
    8054:	e05c      	b.n	8110 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    8056:	79a2      	ldrb	r2, [r4, #6]
    8058:	2380      	movs	r3, #128	; 0x80
    805a:	425b      	negs	r3, r3
    805c:	4313      	orrs	r3, r2
    805e:	71a3      	strb	r3, [r4, #6]
    8060:	2302      	movs	r3, #2
    8062:	9300      	str	r3, [sp, #0]
    8064:	e090      	b.n	8188 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8066:	79a2      	ldrb	r2, [r4, #6]
    8068:	2380      	movs	r3, #128	; 0x80
    806a:	425b      	negs	r3, r3
    806c:	4313      	orrs	r3, r2
    806e:	71a3      	strb	r3, [r4, #6]
    8070:	2301      	movs	r3, #1
    8072:	9300      	str	r3, [sp, #0]
    8074:	e088      	b.n	8188 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    8076:	79a2      	ldrb	r2, [r4, #6]
    8078:	2380      	movs	r3, #128	; 0x80
    807a:	425b      	negs	r3, r3
    807c:	4313      	orrs	r3, r2
    807e:	71a3      	strb	r3, [r4, #6]
    8080:	2302      	movs	r3, #2
    8082:	9300      	str	r3, [sp, #0]
    8084:	e080      	b.n	8188 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    8086:	79a2      	ldrb	r2, [r4, #6]
    8088:	2380      	movs	r3, #128	; 0x80
    808a:	425b      	negs	r3, r3
    808c:	4313      	orrs	r3, r2
    808e:	71a3      	strb	r3, [r4, #6]
    8090:	2301      	movs	r3, #1
    8092:	9300      	str	r3, [sp, #0]
    8094:	e078      	b.n	8188 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    8096:	3130      	adds	r1, #48	; 0x30
    8098:	0240      	lsls	r0, r0, #9
    809a:	1838      	adds	r0, r7, r0
    809c:	2280      	movs	r2, #128	; 0x80
    809e:	0092      	lsls	r2, r2, #2
    80a0:	4b3f      	ldr	r3, [pc, #252]	; (81a0 <f_read+0x1a4>)
    80a2:	4798      	blx	r3
    80a4:	e063      	b.n	816e <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    80a6:	4643      	mov	r3, r8
    80a8:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    80aa:	68a3      	ldr	r3, [r4, #8]
    80ac:	05dd      	lsls	r5, r3, #23
    80ae:	0ded      	lsrs	r5, r5, #23
    80b0:	2380      	movs	r3, #128	; 0x80
    80b2:	009b      	lsls	r3, r3, #2
    80b4:	1b5d      	subs	r5, r3, r5
    80b6:	42b5      	cmp	r5, r6
    80b8:	d900      	bls.n	80bc <f_read+0xc0>
    80ba:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    80bc:	69a1      	ldr	r1, [r4, #24]
    80be:	6820      	ldr	r0, [r4, #0]
    80c0:	4b38      	ldr	r3, [pc, #224]	; (81a4 <f_read+0x1a8>)
    80c2:	4798      	blx	r3
    80c4:	2800      	cmp	r0, #0
    80c6:	d155      	bne.n	8174 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    80c8:	68a3      	ldr	r3, [r4, #8]
    80ca:	05d9      	lsls	r1, r3, #23
    80cc:	0dc9      	lsrs	r1, r1, #23
    80ce:	3130      	adds	r1, #48	; 0x30
    80d0:	6823      	ldr	r3, [r4, #0]
    80d2:	469c      	mov	ip, r3
    80d4:	4461      	add	r1, ip
    80d6:	002a      	movs	r2, r5
    80d8:	0038      	movs	r0, r7
    80da:	4b31      	ldr	r3, [pc, #196]	; (81a0 <f_read+0x1a4>)
    80dc:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    80de:	197f      	adds	r7, r7, r5
    80e0:	68a3      	ldr	r3, [r4, #8]
    80e2:	195b      	adds	r3, r3, r5
    80e4:	60a3      	str	r3, [r4, #8]
    80e6:	464b      	mov	r3, r9
    80e8:	681b      	ldr	r3, [r3, #0]
    80ea:	195b      	adds	r3, r3, r5
    80ec:	464a      	mov	r2, r9
    80ee:	6013      	str	r3, [r2, #0]
    80f0:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    80f2:	d049      	beq.n	8188 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    80f4:	68a3      	ldr	r3, [r4, #8]
    80f6:	05da      	lsls	r2, r3, #23
    80f8:	d1d7      	bne.n	80aa <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    80fa:	6820      	ldr	r0, [r4, #0]
    80fc:	7882      	ldrb	r2, [r0, #2]
    80fe:	3a01      	subs	r2, #1
    8100:	0a5d      	lsrs	r5, r3, #9
    8102:	4015      	ands	r5, r2
    8104:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    8106:	2d00      	cmp	r5, #0
    8108:	d107      	bne.n	811a <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    810a:	2b00      	cmp	r3, #0
    810c:	d19f      	bne.n	804e <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    810e:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    8110:	2801      	cmp	r0, #1
    8112:	d9a0      	bls.n	8056 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8114:	1c43      	adds	r3, r0, #1
    8116:	d0a6      	beq.n	8066 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    8118:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    811a:	6823      	ldr	r3, [r4, #0]
    811c:	469a      	mov	sl, r3
    811e:	6961      	ldr	r1, [r4, #20]
    8120:	0018      	movs	r0, r3
    8122:	4b21      	ldr	r3, [pc, #132]	; (81a8 <f_read+0x1ac>)
    8124:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    8126:	2800      	cmp	r0, #0
    8128:	d0a5      	beq.n	8076 <f_read+0x7a>
			sect += csect;
    812a:	4680      	mov	r8, r0
    812c:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    812e:	0a73      	lsrs	r3, r6, #9
    8130:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    8132:	d0b8      	beq.n	80a6 <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    8134:	4653      	mov	r3, sl
    8136:	789b      	ldrb	r3, [r3, #2]
    8138:	465a      	mov	r2, fp
    813a:	18aa      	adds	r2, r5, r2
    813c:	429a      	cmp	r2, r3
    813e:	d901      	bls.n	8144 <f_read+0x148>
					cc = fp->fs->csize - csect;
    8140:	1b5b      	subs	r3, r3, r5
    8142:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    8144:	465b      	mov	r3, fp
    8146:	466a      	mov	r2, sp
    8148:	71d3      	strb	r3, [r2, #7]
    814a:	79d3      	ldrb	r3, [r2, #7]
    814c:	4652      	mov	r2, sl
    814e:	7850      	ldrb	r0, [r2, #1]
    8150:	4642      	mov	r2, r8
    8152:	0039      	movs	r1, r7
    8154:	4d15      	ldr	r5, [pc, #84]	; (81ac <f_read+0x1b0>)
    8156:	47a8      	blx	r5
    8158:	2800      	cmp	r0, #0
    815a:	d194      	bne.n	8086 <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    815c:	6821      	ldr	r1, [r4, #0]
    815e:	790b      	ldrb	r3, [r1, #4]
    8160:	2b00      	cmp	r3, #0
    8162:	d004      	beq.n	816e <f_read+0x172>
    8164:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    8166:	4642      	mov	r2, r8
    8168:	1a98      	subs	r0, r3, r2
    816a:	4583      	cmp	fp, r0
    816c:	d893      	bhi.n	8096 <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    816e:	465b      	mov	r3, fp
    8170:	025d      	lsls	r5, r3, #9
				continue;
    8172:	e7b4      	b.n	80de <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    8174:	79a2      	ldrb	r2, [r4, #6]
    8176:	2380      	movs	r3, #128	; 0x80
    8178:	425b      	negs	r3, r3
    817a:	4313      	orrs	r3, r2
    817c:	71a3      	strb	r3, [r4, #6]
    817e:	2301      	movs	r3, #1
    8180:	9300      	str	r3, [sp, #0]
    8182:	e001      	b.n	8188 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    8184:	2302      	movs	r3, #2
    8186:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    8188:	9800      	ldr	r0, [sp, #0]
    818a:	b003      	add	sp, #12
    818c:	bc3c      	pop	{r2, r3, r4, r5}
    818e:	4690      	mov	r8, r2
    8190:	4699      	mov	r9, r3
    8192:	46a2      	mov	sl, r4
    8194:	46ab      	mov	fp, r5
    8196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8198:	00006b31 	.word	0x00006b31
    819c:	00007055 	.word	0x00007055
    81a0:	00006ad5 	.word	0x00006ad5
    81a4:	00006fb5 	.word	0x00006fb5
    81a8:	00006afb 	.word	0x00006afb
    81ac:	00006911 	.word	0x00006911

000081b0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    81b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    81b2:	46de      	mov	lr, fp
    81b4:	4657      	mov	r7, sl
    81b6:	464e      	mov	r6, r9
    81b8:	4645      	mov	r5, r8
    81ba:	b5e0      	push	{r5, r6, r7, lr}
    81bc:	b083      	sub	sp, #12
    81be:	0004      	movs	r4, r0
    81c0:	000d      	movs	r5, r1
    81c2:	0016      	movs	r6, r2
    81c4:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    81c6:	2300      	movs	r3, #0
    81c8:	464a      	mov	r2, r9
    81ca:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    81cc:	8881      	ldrh	r1, [r0, #4]
    81ce:	6800      	ldr	r0, [r0, #0]
    81d0:	4b7f      	ldr	r3, [pc, #508]	; (83d0 <f_write+0x220>)
    81d2:	4798      	blx	r3
    81d4:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    81d6:	2800      	cmp	r0, #0
    81d8:	d000      	beq.n	81dc <f_write+0x2c>
    81da:	e0f1      	b.n	83c0 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    81dc:	79a3      	ldrb	r3, [r4, #6]
    81de:	b25a      	sxtb	r2, r3
    81e0:	2a00      	cmp	r2, #0
    81e2:	da00      	bge.n	81e6 <f_write+0x36>
    81e4:	e0ea      	b.n	83bc <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    81e6:	079b      	lsls	r3, r3, #30
    81e8:	d402      	bmi.n	81f0 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    81ea:	2307      	movs	r3, #7
    81ec:	9300      	str	r3, [sp, #0]
    81ee:	e0e7      	b.n	83c0 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    81f0:	68e3      	ldr	r3, [r4, #12]
    81f2:	199a      	adds	r2, r3, r6
    81f4:	4293      	cmp	r3, r2
    81f6:	d810      	bhi.n	821a <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    81f8:	2e00      	cmp	r6, #0
    81fa:	d00e      	beq.n	821a <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    81fc:	002f      	movs	r7, r5
    81fe:	e07b      	b.n	82f8 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    8200:	2100      	movs	r1, #0
    8202:	4b74      	ldr	r3, [pc, #464]	; (83d4 <f_write+0x224>)
    8204:	4798      	blx	r3
    8206:	0003      	movs	r3, r0
    8208:	6120      	str	r0, [r4, #16]
    820a:	e003      	b.n	8214 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    820c:	6961      	ldr	r1, [r4, #20]
    820e:	4b71      	ldr	r3, [pc, #452]	; (83d4 <f_write+0x224>)
    8210:	4798      	blx	r3
    8212:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    8214:	2b00      	cmp	r3, #0
    8216:	d000      	beq.n	821a <f_write+0x6a>
    8218:	e080      	b.n	831c <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    821a:	68a3      	ldr	r3, [r4, #8]
    821c:	68e2      	ldr	r2, [r4, #12]
    821e:	4293      	cmp	r3, r2
    8220:	d900      	bls.n	8224 <f_write+0x74>
    8222:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    8224:	79a3      	ldrb	r3, [r4, #6]
    8226:	2220      	movs	r2, #32
    8228:	4313      	orrs	r3, r2
    822a:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    822c:	e0c8      	b.n	83c0 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    822e:	79a2      	ldrb	r2, [r4, #6]
    8230:	3b81      	subs	r3, #129	; 0x81
    8232:	4313      	orrs	r3, r2
    8234:	71a3      	strb	r3, [r4, #6]
    8236:	2302      	movs	r3, #2
    8238:	9300      	str	r3, [sp, #0]
    823a:	e0c1      	b.n	83c0 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    823c:	79a2      	ldrb	r2, [r4, #6]
    823e:	3b7f      	subs	r3, #127	; 0x7f
    8240:	4313      	orrs	r3, r2
    8242:	71a3      	strb	r3, [r4, #6]
    8244:	2301      	movs	r3, #1
    8246:	9300      	str	r3, [sp, #0]
    8248:	e0ba      	b.n	83c0 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    824a:	2100      	movs	r1, #0
    824c:	4b62      	ldr	r3, [pc, #392]	; (83d8 <f_write+0x228>)
    824e:	4798      	blx	r3
    8250:	2800      	cmp	r0, #0
    8252:	d06d      	beq.n	8330 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    8254:	79a2      	ldrb	r2, [r4, #6]
    8256:	2380      	movs	r3, #128	; 0x80
    8258:	425b      	negs	r3, r3
    825a:	4313      	orrs	r3, r2
    825c:	71a3      	strb	r3, [r4, #6]
    825e:	2301      	movs	r3, #1
    8260:	9300      	str	r3, [sp, #0]
    8262:	e0ad      	b.n	83c0 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    8264:	79a2      	ldrb	r2, [r4, #6]
    8266:	2380      	movs	r3, #128	; 0x80
    8268:	425b      	negs	r3, r3
    826a:	4313      	orrs	r3, r2
    826c:	71a3      	strb	r3, [r4, #6]
    826e:	2302      	movs	r3, #2
    8270:	9300      	str	r3, [sp, #0]
    8272:	e0a5      	b.n	83c0 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    8274:	79a2      	ldrb	r2, [r4, #6]
    8276:	2380      	movs	r3, #128	; 0x80
    8278:	425b      	negs	r3, r3
    827a:	4313      	orrs	r3, r2
    827c:	71a3      	strb	r3, [r4, #6]
    827e:	2301      	movs	r3, #1
    8280:	9300      	str	r3, [sp, #0]
    8282:	e09d      	b.n	83c0 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    8284:	0240      	lsls	r0, r0, #9
    8286:	1839      	adds	r1, r7, r0
    8288:	3330      	adds	r3, #48	; 0x30
    828a:	0018      	movs	r0, r3
    828c:	2280      	movs	r2, #128	; 0x80
    828e:	0092      	lsls	r2, r2, #2
    8290:	4b52      	ldr	r3, [pc, #328]	; (83dc <f_write+0x22c>)
    8292:	4798      	blx	r3
					fp->fs->wflag = 0;
    8294:	2300      	movs	r3, #0
    8296:	6822      	ldr	r2, [r4, #0]
    8298:	7113      	strb	r3, [r2, #4]
    829a:	e072      	b.n	8382 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    829c:	68a3      	ldr	r3, [r4, #8]
    829e:	68e2      	ldr	r2, [r4, #12]
    82a0:	4293      	cmp	r3, r2
    82a2:	d271      	bcs.n	8388 <f_write+0x1d8>
			fp->dsect = sect;
    82a4:	4643      	mov	r3, r8
    82a6:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    82a8:	68a3      	ldr	r3, [r4, #8]
    82aa:	05dd      	lsls	r5, r3, #23
    82ac:	0ded      	lsrs	r5, r5, #23
    82ae:	2380      	movs	r3, #128	; 0x80
    82b0:	009b      	lsls	r3, r3, #2
    82b2:	1b5d      	subs	r5, r3, r5
    82b4:	42b5      	cmp	r5, r6
    82b6:	d900      	bls.n	82ba <f_write+0x10a>
    82b8:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    82ba:	69a1      	ldr	r1, [r4, #24]
    82bc:	6820      	ldr	r0, [r4, #0]
    82be:	4b46      	ldr	r3, [pc, #280]	; (83d8 <f_write+0x228>)
    82c0:	4798      	blx	r3
    82c2:	2800      	cmp	r0, #0
    82c4:	d172      	bne.n	83ac <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    82c6:	68a3      	ldr	r3, [r4, #8]
    82c8:	05d8      	lsls	r0, r3, #23
    82ca:	0dc0      	lsrs	r0, r0, #23
    82cc:	3030      	adds	r0, #48	; 0x30
    82ce:	6823      	ldr	r3, [r4, #0]
    82d0:	469c      	mov	ip, r3
    82d2:	4460      	add	r0, ip
    82d4:	002a      	movs	r2, r5
    82d6:	0039      	movs	r1, r7
    82d8:	4b40      	ldr	r3, [pc, #256]	; (83dc <f_write+0x22c>)
    82da:	4798      	blx	r3
		fp->fs->wflag = 1;
    82dc:	2301      	movs	r3, #1
    82de:	6822      	ldr	r2, [r4, #0]
    82e0:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    82e2:	197f      	adds	r7, r7, r5
    82e4:	68a3      	ldr	r3, [r4, #8]
    82e6:	195b      	adds	r3, r3, r5
    82e8:	60a3      	str	r3, [r4, #8]
    82ea:	464b      	mov	r3, r9
    82ec:	681b      	ldr	r3, [r3, #0]
    82ee:	195b      	adds	r3, r3, r5
    82f0:	464a      	mov	r2, r9
    82f2:	6013      	str	r3, [r2, #0]
    82f4:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    82f6:	d090      	beq.n	821a <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    82f8:	68a3      	ldr	r3, [r4, #8]
    82fa:	05da      	lsls	r2, r3, #23
    82fc:	d1d4      	bne.n	82a8 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    82fe:	6820      	ldr	r0, [r4, #0]
    8300:	7882      	ldrb	r2, [r0, #2]
    8302:	3a01      	subs	r2, #1
    8304:	0a5d      	lsrs	r5, r3, #9
    8306:	4015      	ands	r5, r2
    8308:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    830a:	2d00      	cmp	r5, #0
    830c:	d10b      	bne.n	8326 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    830e:	2b00      	cmp	r3, #0
    8310:	d000      	beq.n	8314 <f_write+0x164>
    8312:	e77b      	b.n	820c <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    8314:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    8316:	2b00      	cmp	r3, #0
    8318:	d100      	bne.n	831c <f_write+0x16c>
    831a:	e771      	b.n	8200 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    831c:	2b01      	cmp	r3, #1
    831e:	d086      	beq.n	822e <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8320:	1c5a      	adds	r2, r3, #1
    8322:	d08b      	beq.n	823c <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    8324:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    8326:	6820      	ldr	r0, [r4, #0]
    8328:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    832a:	69a2      	ldr	r2, [r4, #24]
    832c:	4293      	cmp	r3, r2
    832e:	d08c      	beq.n	824a <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    8330:	6823      	ldr	r3, [r4, #0]
    8332:	469a      	mov	sl, r3
    8334:	6961      	ldr	r1, [r4, #20]
    8336:	0018      	movs	r0, r3
    8338:	4b29      	ldr	r3, [pc, #164]	; (83e0 <f_write+0x230>)
    833a:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    833c:	2800      	cmp	r0, #0
    833e:	d091      	beq.n	8264 <f_write+0xb4>
			sect += csect;
    8340:	4680      	mov	r8, r0
    8342:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    8344:	0a73      	lsrs	r3, r6, #9
    8346:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    8348:	d0a8      	beq.n	829c <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    834a:	4653      	mov	r3, sl
    834c:	789b      	ldrb	r3, [r3, #2]
    834e:	465a      	mov	r2, fp
    8350:	18aa      	adds	r2, r5, r2
    8352:	429a      	cmp	r2, r3
    8354:	d901      	bls.n	835a <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    8356:	1b5b      	subs	r3, r3, r5
    8358:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    835a:	465b      	mov	r3, fp
    835c:	466a      	mov	r2, sp
    835e:	71d3      	strb	r3, [r2, #7]
    8360:	79d3      	ldrb	r3, [r2, #7]
    8362:	4652      	mov	r2, sl
    8364:	7850      	ldrb	r0, [r2, #1]
    8366:	4642      	mov	r2, r8
    8368:	0039      	movs	r1, r7
    836a:	4d1e      	ldr	r5, [pc, #120]	; (83e4 <f_write+0x234>)
    836c:	47a8      	blx	r5
    836e:	2800      	cmp	r0, #0
    8370:	d000      	beq.n	8374 <f_write+0x1c4>
    8372:	e77f      	b.n	8274 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    8374:	6823      	ldr	r3, [r4, #0]
    8376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8378:	4641      	mov	r1, r8
    837a:	1a50      	subs	r0, r2, r1
    837c:	4583      	cmp	fp, r0
    837e:	d900      	bls.n	8382 <f_write+0x1d2>
    8380:	e780      	b.n	8284 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    8382:	465b      	mov	r3, fp
    8384:	025d      	lsls	r5, r3, #9
				continue;
    8386:	e7ac      	b.n	82e2 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    8388:	2100      	movs	r1, #0
    838a:	4650      	mov	r0, sl
    838c:	4b12      	ldr	r3, [pc, #72]	; (83d8 <f_write+0x228>)
    838e:	4798      	blx	r3
    8390:	2800      	cmp	r0, #0
    8392:	d103      	bne.n	839c <f_write+0x1ec>
				fp->fs->winsect = sect;
    8394:	6823      	ldr	r3, [r4, #0]
    8396:	4642      	mov	r2, r8
    8398:	62da      	str	r2, [r3, #44]	; 0x2c
    839a:	e783      	b.n	82a4 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    839c:	79a2      	ldrb	r2, [r4, #6]
    839e:	2380      	movs	r3, #128	; 0x80
    83a0:	425b      	negs	r3, r3
    83a2:	4313      	orrs	r3, r2
    83a4:	71a3      	strb	r3, [r4, #6]
    83a6:	2301      	movs	r3, #1
    83a8:	9300      	str	r3, [sp, #0]
    83aa:	e009      	b.n	83c0 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    83ac:	79a2      	ldrb	r2, [r4, #6]
    83ae:	2380      	movs	r3, #128	; 0x80
    83b0:	425b      	negs	r3, r3
    83b2:	4313      	orrs	r3, r2
    83b4:	71a3      	strb	r3, [r4, #6]
    83b6:	2301      	movs	r3, #1
    83b8:	9300      	str	r3, [sp, #0]
    83ba:	e001      	b.n	83c0 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    83bc:	2302      	movs	r3, #2
    83be:	9300      	str	r3, [sp, #0]
}
    83c0:	9800      	ldr	r0, [sp, #0]
    83c2:	b003      	add	sp, #12
    83c4:	bc3c      	pop	{r2, r3, r4, r5}
    83c6:	4690      	mov	r8, r2
    83c8:	4699      	mov	r9, r3
    83ca:	46a2      	mov	sl, r4
    83cc:	46ab      	mov	fp, r5
    83ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    83d0:	00006b31 	.word	0x00006b31
    83d4:	00007331 	.word	0x00007331
    83d8:	00006fb5 	.word	0x00006fb5
    83dc:	00006ad5 	.word	0x00006ad5
    83e0:	00006afb 	.word	0x00006afb
    83e4:	00006995 	.word	0x00006995

000083e8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    83e8:	b570      	push	{r4, r5, r6, lr}
    83ea:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    83ec:	8881      	ldrh	r1, [r0, #4]
    83ee:	6800      	ldr	r0, [r0, #0]
    83f0:	4b1c      	ldr	r3, [pc, #112]	; (8464 <f_sync+0x7c>)
    83f2:	4798      	blx	r3
	if (res == FR_OK) {
    83f4:	2800      	cmp	r0, #0
    83f6:	d102      	bne.n	83fe <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    83f8:	79a3      	ldrb	r3, [r4, #6]
    83fa:	069b      	lsls	r3, r3, #26
    83fc:	d400      	bmi.n	8400 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    83fe:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    8400:	69e1      	ldr	r1, [r4, #28]
    8402:	6820      	ldr	r0, [r4, #0]
    8404:	4b18      	ldr	r3, [pc, #96]	; (8468 <f_sync+0x80>)
    8406:	4798      	blx	r3
			if (res == FR_OK) {
    8408:	2800      	cmp	r0, #0
    840a:	d1f8      	bne.n	83fe <f_sync+0x16>
				dir = fp->dir_ptr;
    840c:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    840e:	7aeb      	ldrb	r3, [r5, #11]
    8410:	2220      	movs	r2, #32
    8412:	4313      	orrs	r3, r2
    8414:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    8416:	7b23      	ldrb	r3, [r4, #12]
    8418:	772b      	strb	r3, [r5, #28]
    841a:	89a3      	ldrh	r3, [r4, #12]
    841c:	0a1b      	lsrs	r3, r3, #8
    841e:	776b      	strb	r3, [r5, #29]
    8420:	89e3      	ldrh	r3, [r4, #14]
    8422:	77ab      	strb	r3, [r5, #30]
    8424:	7be3      	ldrb	r3, [r4, #15]
    8426:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    8428:	7c23      	ldrb	r3, [r4, #16]
    842a:	76ab      	strb	r3, [r5, #26]
    842c:	8a23      	ldrh	r3, [r4, #16]
    842e:	0a1b      	lsrs	r3, r3, #8
    8430:	76eb      	strb	r3, [r5, #27]
    8432:	8a63      	ldrh	r3, [r4, #18]
    8434:	752b      	strb	r3, [r5, #20]
    8436:	8a63      	ldrh	r3, [r4, #18]
    8438:	0a1b      	lsrs	r3, r3, #8
    843a:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    843c:	4b0b      	ldr	r3, [pc, #44]	; (846c <f_sync+0x84>)
    843e:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    8440:	75a8      	strb	r0, [r5, #22]
    8442:	0a03      	lsrs	r3, r0, #8
    8444:	75eb      	strb	r3, [r5, #23]
    8446:	0c03      	lsrs	r3, r0, #16
    8448:	762b      	strb	r3, [r5, #24]
    844a:	0e00      	lsrs	r0, r0, #24
    844c:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    844e:	79a3      	ldrb	r3, [r4, #6]
    8450:	2220      	movs	r2, #32
    8452:	4393      	bics	r3, r2
    8454:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    8456:	2301      	movs	r3, #1
    8458:	6822      	ldr	r2, [r4, #0]
    845a:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    845c:	6820      	ldr	r0, [r4, #0]
    845e:	4b04      	ldr	r3, [pc, #16]	; (8470 <f_sync+0x88>)
    8460:	4798      	blx	r3
    8462:	e7cc      	b.n	83fe <f_sync+0x16>
    8464:	00006b31 	.word	0x00006b31
    8468:	00006fb5 	.word	0x00006fb5
    846c:	00006a85 	.word	0x00006a85
    8470:	00007a0d 	.word	0x00007a0d

00008474 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    8474:	b510      	push	{r4, lr}
    8476:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    8478:	4b03      	ldr	r3, [pc, #12]	; (8488 <f_close+0x14>)
    847a:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    847c:	2800      	cmp	r0, #0
    847e:	d101      	bne.n	8484 <f_close+0x10>
    8480:	2300      	movs	r3, #0
    8482:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    8484:	bd10      	pop	{r4, pc}
    8486:	46c0      	nop			; (mov r8, r8)
    8488:	000083e9 	.word	0x000083e9

0000848c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
    848c:	b5f0      	push	{r4, r5, r6, r7, lr}
    848e:	46c6      	mov	lr, r8
    8490:	b500      	push	{lr}
    8492:	b084      	sub	sp, #16
    8494:	0007      	movs	r7, r0
    8496:	9201      	str	r2, [sp, #4]
	int n = 0;
	TCHAR c, *p = buff;
    8498:	0005      	movs	r5, r0
	int n = 0;
    849a:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    849c:	1e4b      	subs	r3, r1, #1
    849e:	4698      	mov	r8, r3
		f_read(fil, s, 1, &rc);
    84a0:	4e0e      	ldr	r6, [pc, #56]	; (84dc <f_gets+0x50>)
	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    84a2:	4544      	cmp	r4, r8
    84a4:	da0e      	bge.n	84c4 <f_gets+0x38>
		f_read(fil, s, 1, &rc);
    84a6:	ab02      	add	r3, sp, #8
    84a8:	2201      	movs	r2, #1
    84aa:	a903      	add	r1, sp, #12
    84ac:	9801      	ldr	r0, [sp, #4]
    84ae:	47b0      	blx	r6
		if (rc != 1) break;			/* Break on EOF or error */
    84b0:	9b02      	ldr	r3, [sp, #8]
    84b2:	2b01      	cmp	r3, #1
    84b4:	d106      	bne.n	84c4 <f_gets+0x38>
		c = s[0];
    84b6:	ab03      	add	r3, sp, #12
    84b8:	781b      	ldrb	r3, [r3, #0]
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
    84ba:	3501      	adds	r5, #1
    84bc:	553b      	strb	r3, [r7, r4]
		n++;
    84be:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
    84c0:	2b0a      	cmp	r3, #10
    84c2:	d1ee      	bne.n	84a2 <f_gets+0x16>
	}
	*p = 0;
    84c4:	2300      	movs	r3, #0
    84c6:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    84c8:	1e63      	subs	r3, r4, #1
    84ca:	419c      	sbcs	r4, r3
    84cc:	4264      	negs	r4, r4
    84ce:	4027      	ands	r7, r4
}
    84d0:	0038      	movs	r0, r7
    84d2:	b004      	add	sp, #16
    84d4:	bc04      	pop	{r2}
    84d6:	4690      	mov	r8, r2
    84d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84da:	46c0      	nop			; (mov r8, r8)
    84dc:	00007ffd 	.word	0x00007ffd

000084e0 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    84e0:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    84e2:	287f      	cmp	r0, #127	; 0x7f
    84e4:	d911      	bls.n	850a <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    84e6:	2900      	cmp	r1, #0
    84e8:	d111      	bne.n	850e <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    84ea:	28c7      	cmp	r0, #199	; 0xc7
    84ec:	d017      	beq.n	851e <ff_convert+0x3e>
    84ee:	4a0d      	ldr	r2, [pc, #52]	; (8524 <ff_convert+0x44>)
    84f0:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    84f2:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    84f4:	8811      	ldrh	r1, [r2, #0]
    84f6:	4281      	cmp	r1, r0
    84f8:	d004      	beq.n	8504 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    84fa:	3301      	adds	r3, #1
    84fc:	b29b      	uxth	r3, r3
    84fe:	3202      	adds	r2, #2
    8500:	2b80      	cmp	r3, #128	; 0x80
    8502:	d1f7      	bne.n	84f4 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    8504:	3380      	adds	r3, #128	; 0x80
    8506:	20ff      	movs	r0, #255	; 0xff
    8508:	4003      	ands	r3, r0
		}
	}

	return c;
}
    850a:	0018      	movs	r0, r3
    850c:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    850e:	2300      	movs	r3, #0
    8510:	28ff      	cmp	r0, #255	; 0xff
    8512:	d8fa      	bhi.n	850a <ff_convert+0x2a>
    8514:	3880      	subs	r0, #128	; 0x80
    8516:	0040      	lsls	r0, r0, #1
    8518:	4b02      	ldr	r3, [pc, #8]	; (8524 <ff_convert+0x44>)
    851a:	5ac3      	ldrh	r3, [r0, r3]
    851c:	e7f5      	b.n	850a <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    851e:	2300      	movs	r3, #0
    8520:	e7f0      	b.n	8504 <ff_convert+0x24>
    8522:	46c0      	nop			; (mov r8, r8)
    8524:	0000de20 	.word	0x0000de20

00008528 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    8528:	2861      	cmp	r0, #97	; 0x61
    852a:	d014      	beq.n	8556 <ff_wtoupper+0x2e>
    852c:	4b0b      	ldr	r3, [pc, #44]	; (855c <ff_wtoupper+0x34>)
    852e:	3304      	adds	r3, #4
    8530:	2101      	movs	r1, #1
    8532:	2262      	movs	r2, #98	; 0x62
    8534:	4290      	cmp	r0, r2
    8536:	d007      	beq.n	8548 <ff_wtoupper+0x20>
    8538:	3101      	adds	r1, #1
    853a:	3302      	adds	r3, #2
    853c:	1e9a      	subs	r2, r3, #2
    853e:	8812      	ldrh	r2, [r2, #0]
    8540:	2a00      	cmp	r2, #0
    8542:	d1f7      	bne.n	8534 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    8544:	0003      	movs	r3, r0
    8546:	e004      	b.n	8552 <ff_wtoupper+0x2a>
    8548:	1e03      	subs	r3, r0, #0
    854a:	d002      	beq.n	8552 <ff_wtoupper+0x2a>
    854c:	0049      	lsls	r1, r1, #1
    854e:	4b04      	ldr	r3, [pc, #16]	; (8560 <ff_wtoupper+0x38>)
    8550:	5acb      	ldrh	r3, [r1, r3]
}
    8552:	0018      	movs	r0, r3
    8554:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    8556:	2100      	movs	r1, #0
    8558:	e7f8      	b.n	854c <ff_wtoupper+0x24>
    855a:	46c0      	nop			; (mov r8, r8)
    855c:	0000df20 	.word	0x0000df20
    8560:	0000e100 	.word	0x0000e100

00008564 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
    8564:	b5f0      	push	{r4, r5, r6, r7, lr}
    8566:	46de      	mov	lr, fp
    8568:	4657      	mov	r7, sl
    856a:	464e      	mov	r6, r9
    856c:	4645      	mov	r5, r8
    856e:	b5e0      	push	{r5, r6, r7, lr}
    8570:	b083      	sub	sp, #12
    8572:	0007      	movs	r7, r0
    8574:	4688      	mov	r8, r1
    8576:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
    8578:	2400      	movs	r4, #0
    857a:	2900      	cmp	r1, #0
    857c:	dd18      	ble.n	85b0 <sendPacket+0x4c>
    857e:	4b15      	ldr	r3, [pc, #84]	; (85d4 <sendPacket+0x70>)
    8580:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    8582:	4b15      	ldr	r3, [pc, #84]	; (85d8 <sendPacket+0x74>)
    8584:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
    8586:	9801      	ldr	r0, [sp, #4]
    8588:	47d0      	blx	sl
    858a:	2800      	cmp	r0, #0
    858c:	d110      	bne.n	85b0 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    858e:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    8590:	68f3      	ldr	r3, [r6, #12]
    8592:	4699      	mov	r9, r3
    8594:	693b      	ldr	r3, [r7, #16]
    8596:	191d      	adds	r5, r3, r4
    8598:	9801      	ldr	r0, [sp, #4]
    859a:	47d8      	blx	fp
    859c:	0003      	movs	r3, r0
    859e:	4642      	mov	r2, r8
    85a0:	0029      	movs	r1, r5
    85a2:	0030      	movs	r0, r6
    85a4:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
    85a6:	2800      	cmp	r0, #0
    85a8:	db02      	blt.n	85b0 <sendPacket+0x4c>
            break;
        sent += rc;
    85aa:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
    85ac:	45a0      	cmp	r8, r4
    85ae:	dcea      	bgt.n	8586 <sendPacket+0x22>
    }
    if (sent == length)
    85b0:	45a0      	cmp	r8, r4
    85b2:	d10c      	bne.n	85ce <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
    85b4:	69b9      	ldr	r1, [r7, #24]
    85b6:	0038      	movs	r0, r7
    85b8:	3054      	adds	r0, #84	; 0x54
    85ba:	4b08      	ldr	r3, [pc, #32]	; (85dc <sendPacket+0x78>)
    85bc:	4798      	blx	r3
        rc = SUCCESS;
    85be:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
    85c0:	b003      	add	sp, #12
    85c2:	bc3c      	pop	{r2, r3, r4, r5}
    85c4:	4690      	mov	r8, r2
    85c6:	4699      	mov	r9, r3
    85c8:	46a2      	mov	sl, r4
    85ca:	46ab      	mov	fp, r5
    85cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
    85ce:	2001      	movs	r0, #1
    85d0:	4240      	negs	r0, r0
    return rc;
    85d2:	e7f5      	b.n	85c0 <sendPacket+0x5c>
    85d4:	00008cf5 	.word	0x00008cf5
    85d8:	00008d29 	.word	0x00008d29
    85dc:	00008d15 	.word	0x00008d15

000085e0 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
    85e0:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
    85e2:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
    85e4:	2100      	movs	r1, #0
    85e6:	6241      	str	r1, [r0, #36]	; 0x24
    85e8:	62c1      	str	r1, [r0, #44]	; 0x2c
    85ea:	6341      	str	r1, [r0, #52]	; 0x34
    85ec:	63c1      	str	r1, [r0, #60]	; 0x3c
    85ee:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
    85f0:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
    85f2:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
    85f4:	9b02      	ldr	r3, [sp, #8]
    85f6:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
    85f8:	9b03      	ldr	r3, [sp, #12]
    85fa:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
    85fc:	9b04      	ldr	r3, [sp, #16]
    85fe:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
    8600:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
    8602:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
    8604:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
    8606:	2301      	movs	r3, #1
    8608:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
    860a:	3054      	adds	r0, #84	; 0x54
    860c:	4b01      	ldr	r3, [pc, #4]	; (8614 <MQTTClientInit+0x34>)
    860e:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
    8610:	bd10      	pop	{r4, pc}
    8612:	46c0      	nop			; (mov r8, r8)
    8614:	00008d3d 	.word	0x00008d3d

00008618 <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
    8618:	b5f0      	push	{r4, r5, r6, r7, lr}
    861a:	46de      	mov	lr, fp
    861c:	4657      	mov	r7, sl
    861e:	464e      	mov	r6, r9
    8620:	4645      	mov	r5, r8
    8622:	b5e0      	push	{r5, r6, r7, lr}
    8624:	b085      	sub	sp, #20
    8626:	4682      	mov	sl, r0
    8628:	000f      	movs	r7, r1
    862a:	4691      	mov	r9, r2
    862c:	0004      	movs	r4, r0
    862e:	3424      	adds	r4, #36	; 0x24
    8630:	234c      	movs	r3, #76	; 0x4c
    8632:	4453      	add	r3, sl
    8634:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
    8636:	2301      	movs	r3, #1
    8638:	425b      	negs	r3, r3
    863a:	9301      	str	r3, [sp, #4]
    863c:	e056      	b.n	86ec <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
    863e:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
    8640:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
    8642:	687a      	ldr	r2, [r7, #4]
    8644:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
    8646:	780a      	ldrb	r2, [r1, #0]
    8648:	2a00      	cmp	r2, #0
    864a:	d04a      	beq.n	86e2 <deliverMessage+0xca>
    864c:	42b3      	cmp	r3, r6
    864e:	d24a      	bcs.n	86e6 <deliverMessage+0xce>
    8650:	3101      	adds	r1, #1
    8652:	1e70      	subs	r0, r6, #1
    8654:	e008      	b.n	8668 <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
    8656:	2a2f      	cmp	r2, #47	; 0x2f
    8658:	d10f      	bne.n	867a <deliverMessage+0x62>
        curn++;
    865a:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    865c:	780a      	ldrb	r2, [r1, #0]
    865e:	2a00      	cmp	r2, #0
    8660:	d03f      	beq.n	86e2 <deliverMessage+0xca>
    8662:	429e      	cmp	r6, r3
    8664:	d93f      	bls.n	86e6 <deliverMessage+0xce>
    8666:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
    8668:	781d      	ldrb	r5, [r3, #0]
    866a:	2d2f      	cmp	r5, #47	; 0x2f
    866c:	d0f3      	beq.n	8656 <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
    866e:	2a2b      	cmp	r2, #43	; 0x2b
    8670:	d008      	beq.n	8684 <deliverMessage+0x6c>
    8672:	2a23      	cmp	r2, #35	; 0x23
    8674:	d013      	beq.n	869e <deliverMessage+0x86>
    8676:	4295      	cmp	r5, r2
    8678:	d0ef      	beq.n	865a <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
    867a:	429e      	cmp	r6, r3
    867c:	d133      	bne.n	86e6 <deliverMessage+0xce>
    867e:	2a00      	cmp	r2, #0
    8680:	d03d      	beq.n	86fe <deliverMessage+0xe6>
    8682:	e030      	b.n	86e6 <deliverMessage+0xce>
            char* nextpos = curn + 1;
    8684:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    8686:	42ae      	cmp	r6, r5
    8688:	d927      	bls.n	86da <deliverMessage+0xc2>
    868a:	785a      	ldrb	r2, [r3, #1]
    868c:	2a2f      	cmp	r2, #47	; 0x2f
    868e:	d01f      	beq.n	86d0 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
    8690:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    8692:	4283      	cmp	r3, r0
    8694:	d0e1      	beq.n	865a <deliverMessage+0x42>
    8696:	785a      	ldrb	r2, [r3, #1]
    8698:	2a2f      	cmp	r2, #47	; 0x2f
    869a:	d1f9      	bne.n	8690 <deliverMessage+0x78>
    869c:	e7dd      	b.n	865a <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
    869e:	1e73      	subs	r3, r6, #1
    86a0:	e7db      	b.n	865a <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    86a2:	9b01      	ldr	r3, [sp, #4]
    86a4:	3301      	adds	r3, #1
    86a6:	d007      	beq.n	86b8 <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
    86a8:	9801      	ldr	r0, [sp, #4]
    86aa:	b005      	add	sp, #20
    86ac:	bc3c      	pop	{r2, r3, r4, r5}
    86ae:	4690      	mov	r8, r2
    86b0:	4699      	mov	r9, r3
    86b2:	46a2      	mov	sl, r4
    86b4:	46ab      	mov	fp, r5
    86b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    86b8:	4653      	mov	r3, sl
    86ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    86bc:	2b00      	cmp	r3, #0
    86be:	d0f3      	beq.n	86a8 <deliverMessage+0x90>
    md->topicName = aTopicName;
    86c0:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    86c2:	464a      	mov	r2, r9
    86c4:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
    86c6:	a802      	add	r0, sp, #8
    86c8:	4798      	blx	r3
        rc = SUCCESS;
    86ca:	2300      	movs	r3, #0
    86cc:	9301      	str	r3, [sp, #4]
    return rc;
    86ce:	e7eb      	b.n	86a8 <deliverMessage+0x90>
    while (*curf && curn < curn_end)
    86d0:	780a      	ldrb	r2, [r1, #0]
    86d2:	2a00      	cmp	r2, #0
    86d4:	d007      	beq.n	86e6 <deliverMessage+0xce>
        curn++;
    86d6:	002b      	movs	r3, r5
    86d8:	e7c5      	b.n	8666 <deliverMessage+0x4e>
    86da:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    86dc:	780a      	ldrb	r2, [r1, #0]
    86de:	2a00      	cmp	r2, #0
    86e0:	d101      	bne.n	86e6 <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
    86e2:	429e      	cmp	r6, r3
    86e4:	d00b      	beq.n	86fe <deliverMessage+0xe6>
    86e6:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    86e8:	4544      	cmp	r4, r8
    86ea:	d0da      	beq.n	86a2 <deliverMessage+0x8a>
    86ec:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    86ee:	6821      	ldr	r1, [r4, #0]
    86f0:	2900      	cmp	r1, #0
    86f2:	d0f8      	beq.n	86e6 <deliverMessage+0xce>
    86f4:	0038      	movs	r0, r7
    86f6:	4b08      	ldr	r3, [pc, #32]	; (8718 <deliverMessage+0x100>)
    86f8:	4798      	blx	r3
    86fa:	2800      	cmp	r0, #0
    86fc:	d09f      	beq.n	863e <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
    86fe:	465b      	mov	r3, fp
    8700:	685b      	ldr	r3, [r3, #4]
    8702:	2b00      	cmp	r3, #0
    8704:	d0ef      	beq.n	86e6 <deliverMessage+0xce>
    md->topicName = aTopicName;
    8706:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    8708:	464a      	mov	r2, r9
    870a:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
    870c:	a802      	add	r0, sp, #8
    870e:	4798      	blx	r3
                rc = SUCCESS;
    8710:	2300      	movs	r3, #0
    8712:	9301      	str	r3, [sp, #4]
    8714:	e7e7      	b.n	86e6 <deliverMessage+0xce>
    8716:	46c0      	nop			; (mov r8, r8)
    8718:	000095ad 	.word	0x000095ad

0000871c <keepalive>:


int keepalive(MQTTClient* c)
{
    871c:	b510      	push	{r4, lr}
    871e:	b082      	sub	sp, #8
    8720:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
    8722:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
    8724:	69a3      	ldr	r3, [r4, #24]
    8726:	2b00      	cmp	r3, #0
    8728:	d101      	bne.n	872e <keepalive+0x12>
        }
    }

exit:
    return rc;
}
    872a:	b002      	add	sp, #8
    872c:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
    872e:	0020      	movs	r0, r4
    8730:	3054      	adds	r0, #84	; 0x54
    8732:	4b14      	ldr	r3, [pc, #80]	; (8784 <keepalive+0x68>)
    8734:	4798      	blx	r3
    8736:	2800      	cmp	r0, #0
    8738:	d01d      	beq.n	8776 <keepalive+0x5a>
        if (!c->ping_outstanding)
    873a:	7f23      	ldrb	r3, [r4, #28]
    873c:	2b00      	cmp	r3, #0
    873e:	d11d      	bne.n	877c <keepalive+0x60>
            TimerInit(&timer);
    8740:	4668      	mov	r0, sp
    8742:	4b11      	ldr	r3, [pc, #68]	; (8788 <keepalive+0x6c>)
    8744:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
    8746:	21fa      	movs	r1, #250	; 0xfa
    8748:	0089      	lsls	r1, r1, #2
    874a:	4668      	mov	r0, sp
    874c:	4b0f      	ldr	r3, [pc, #60]	; (878c <keepalive+0x70>)
    874e:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
    8750:	68a1      	ldr	r1, [r4, #8]
    8752:	6920      	ldr	r0, [r4, #16]
    8754:	4b0e      	ldr	r3, [pc, #56]	; (8790 <keepalive+0x74>)
    8756:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
    8758:	2800      	cmp	r0, #0
    875a:	dd09      	ble.n	8770 <keepalive+0x54>
    875c:	466a      	mov	r2, sp
    875e:	0001      	movs	r1, r0
    8760:	0020      	movs	r0, r4
    8762:	4b0c      	ldr	r3, [pc, #48]	; (8794 <keepalive+0x78>)
    8764:	4798      	blx	r3
    8766:	2800      	cmp	r0, #0
    8768:	d1df      	bne.n	872a <keepalive+0xe>
                c->ping_outstanding = 1;
    876a:	2301      	movs	r3, #1
    876c:	7723      	strb	r3, [r4, #28]
    876e:	e7dc      	b.n	872a <keepalive+0xe>
    int rc = FAILURE;
    8770:	2001      	movs	r0, #1
    8772:	4240      	negs	r0, r0
    8774:	e7d9      	b.n	872a <keepalive+0xe>
    8776:	2001      	movs	r0, #1
    8778:	4240      	negs	r0, r0
    877a:	e7d6      	b.n	872a <keepalive+0xe>
    877c:	2001      	movs	r0, #1
    877e:	4240      	negs	r0, r0
    return rc;
    8780:	e7d3      	b.n	872a <keepalive+0xe>
    8782:	46c0      	nop			; (mov r8, r8)
    8784:	00008cf5 	.word	0x00008cf5
    8788:	00008d3d 	.word	0x00008d3d
    878c:	00008d05 	.word	0x00008d05
    8790:	00009295 	.word	0x00009295
    8794:	00008565 	.word	0x00008565

00008798 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
    8798:	b5f0      	push	{r4, r5, r6, r7, lr}
    879a:	46de      	mov	lr, fp
    879c:	464f      	mov	r7, r9
    879e:	4646      	mov	r6, r8
    87a0:	b5c0      	push	{r6, r7, lr}
    87a2:	b090      	sub	sp, #64	; 0x40
    87a4:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
    87a6:	6d05      	ldr	r5, [r0, #80]	; 0x50
    87a8:	68ae      	ldr	r6, [r5, #8]
    87aa:	6947      	ldr	r7, [r0, #20]
    87ac:	9107      	str	r1, [sp, #28]
    87ae:	0008      	movs	r0, r1
    87b0:	4b65      	ldr	r3, [pc, #404]	; (8948 <cycle+0x1b0>)
    87b2:	4798      	blx	r3
    87b4:	0003      	movs	r3, r0
    87b6:	2201      	movs	r2, #1
    87b8:	0039      	movs	r1, r7
    87ba:	0028      	movs	r0, r5
    87bc:	47b0      	blx	r6
    87be:	0005      	movs	r5, r0
    87c0:	2801      	cmp	r0, #1
    87c2:	d000      	beq.n	87c6 <cycle+0x2e>
    87c4:	e0bd      	b.n	8942 <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
    87c6:	9807      	ldr	r0, [sp, #28]
    87c8:	4b5f      	ldr	r3, [pc, #380]	; (8948 <cycle+0x1b0>)
    87ca:	4798      	blx	r3
    87cc:	9006      	str	r0, [sp, #24]
    87ce:	2604      	movs	r6, #4
    *value = 0;
    87d0:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
    87d2:	237f      	movs	r3, #127	; 0x7f
    87d4:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
    87d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    87d8:	6883      	ldr	r3, [r0, #8]
    87da:	4698      	mov	r8, r3
    87dc:	9b06      	ldr	r3, [sp, #24]
    87de:	2201      	movs	r2, #1
    87e0:	a90c      	add	r1, sp, #48	; 0x30
    87e2:	47c0      	blx	r8
        if (rc != 1)
    87e4:	2801      	cmp	r0, #1
    87e6:	d10e      	bne.n	8806 <cycle+0x6e>
        *value += (i & 127) * multiplier;
    87e8:	ab02      	add	r3, sp, #8
    87ea:	2228      	movs	r2, #40	; 0x28
    87ec:	189b      	adds	r3, r3, r2
    87ee:	781b      	ldrb	r3, [r3, #0]
    87f0:	465a      	mov	r2, fp
    87f2:	401a      	ands	r2, r3
    87f4:	436a      	muls	r2, r5
    87f6:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
    87f8:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
    87fa:	b25b      	sxtb	r3, r3
    87fc:	2b00      	cmp	r3, #0
    87fe:	da02      	bge.n	8806 <cycle+0x6e>
    8800:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    8802:	2e00      	cmp	r6, #0
    8804:	d1e7      	bne.n	87d6 <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    8806:	6963      	ldr	r3, [r4, #20]
    8808:	1c58      	adds	r0, r3, #1
    880a:	0039      	movs	r1, r7
    880c:	4b4f      	ldr	r3, [pc, #316]	; (894c <cycle+0x1b4>)
    880e:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    8810:	2f00      	cmp	r7, #0
    8812:	dd10      	ble.n	8836 <cycle+0x9e>
    8814:	6d26      	ldr	r6, [r4, #80]	; 0x50
    8816:	68b3      	ldr	r3, [r6, #8]
    8818:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    881a:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    881c:	6963      	ldr	r3, [r4, #20]
    881e:	181d      	adds	r5, r3, r0
    8820:	9807      	ldr	r0, [sp, #28]
    8822:	4b49      	ldr	r3, [pc, #292]	; (8948 <cycle+0x1b0>)
    8824:	4798      	blx	r3
    8826:	0003      	movs	r3, r0
    8828:	003a      	movs	r2, r7
    882a:	0029      	movs	r1, r5
    882c:	0030      	movs	r0, r6
    882e:	47c8      	blx	r9
    8830:	42b8      	cmp	r0, r7
    8832:	d000      	beq.n	8836 <cycle+0x9e>
    8834:	e085      	b.n	8942 <cycle+0x1aa>
    header.byte = c->readbuf[0];
    8836:	6963      	ldr	r3, [r4, #20]
    8838:	781d      	ldrb	r5, [r3, #0]
    883a:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
    883c:	2d05      	cmp	r5, #5
    883e:	d051      	beq.n	88e4 <cycle+0x14c>
    8840:	2d0d      	cmp	r5, #13
    8842:	d06e      	beq.n	8922 <cycle+0x18a>
        rc = SUCCESS;
    8844:	2600      	movs	r6, #0
    switch (packet_type)
    8846:	2d03      	cmp	r5, #3
    8848:	d16e      	bne.n	8928 <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    884a:	68e2      	ldr	r2, [r4, #12]
    884c:	9204      	str	r2, [sp, #16]
    884e:	9303      	str	r3, [sp, #12]
    8850:	ab0f      	add	r3, sp, #60	; 0x3c
    8852:	9302      	str	r3, [sp, #8]
    8854:	ab0e      	add	r3, sp, #56	; 0x38
    8856:	9301      	str	r3, [sp, #4]
    8858:	ab09      	add	r3, sp, #36	; 0x24
    885a:	9300      	str	r3, [sp, #0]
    885c:	ab0d      	add	r3, sp, #52	; 0x34
    885e:	2229      	movs	r2, #41	; 0x29
    8860:	a902      	add	r1, sp, #8
    8862:	468c      	mov	ip, r1
    8864:	4462      	add	r2, ip
    8866:	a908      	add	r1, sp, #32
    8868:	202a      	movs	r0, #42	; 0x2a
    886a:	4460      	add	r0, ip
    886c:	4e38      	ldr	r6, [pc, #224]	; (8950 <cycle+0x1b8>)
    886e:	47b0      	blx	r6
        rc = SUCCESS;
    8870:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    8872:	2801      	cmp	r0, #1
    8874:	d15b      	bne.n	892e <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
    8876:	ae0c      	add	r6, sp, #48	; 0x30
    8878:	ab02      	add	r3, sp, #8
    887a:	7e1b      	ldrb	r3, [r3, #24]
    887c:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
    887e:	0032      	movs	r2, r6
    8880:	a909      	add	r1, sp, #36	; 0x24
    8882:	0020      	movs	r0, r4
    8884:	4b33      	ldr	r3, [pc, #204]	; (8954 <cycle+0x1bc>)
    8886:	4798      	blx	r3
            if (msg.qos != QOS0)
    8888:	7833      	ldrb	r3, [r6, #0]
    888a:	2b00      	cmp	r3, #0
    888c:	d028      	beq.n	88e0 <cycle+0x148>
            {
                if (msg.qos == QOS1)
    888e:	2b01      	cmp	r3, #1
    8890:	d004      	beq.n	889c <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
    8892:	2b02      	cmp	r3, #2
    8894:	d016      	beq.n	88c4 <cycle+0x12c>
    8896:	2601      	movs	r6, #1
    8898:	4276      	negs	r6, r6
    889a:	e048      	b.n	892e <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
    889c:	ab0c      	add	r3, sp, #48	; 0x30
    889e:	889b      	ldrh	r3, [r3, #4]
    88a0:	9300      	str	r3, [sp, #0]
    88a2:	2300      	movs	r3, #0
    88a4:	2204      	movs	r2, #4
    88a6:	68a1      	ldr	r1, [r4, #8]
    88a8:	6920      	ldr	r0, [r4, #16]
    88aa:	4e2b      	ldr	r6, [pc, #172]	; (8958 <cycle+0x1c0>)
    88ac:	47b0      	blx	r6
    88ae:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
    88b0:	2900      	cmp	r1, #0
    88b2:	dd12      	ble.n	88da <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
    88b4:	9a07      	ldr	r2, [sp, #28]
    88b6:	0020      	movs	r0, r4
    88b8:	4b28      	ldr	r3, [pc, #160]	; (895c <cycle+0x1c4>)
    88ba:	4798      	blx	r3
    88bc:	0006      	movs	r6, r0
                if (rc == FAILURE)
    88be:	1c43      	adds	r3, r0, #1
    88c0:	d132      	bne.n	8928 <cycle+0x190>
    88c2:	e034      	b.n	892e <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
    88c4:	ab0c      	add	r3, sp, #48	; 0x30
    88c6:	889b      	ldrh	r3, [r3, #4]
    88c8:	9300      	str	r3, [sp, #0]
    88ca:	2300      	movs	r3, #0
    88cc:	2205      	movs	r2, #5
    88ce:	68a1      	ldr	r1, [r4, #8]
    88d0:	6920      	ldr	r0, [r4, #16]
    88d2:	4e21      	ldr	r6, [pc, #132]	; (8958 <cycle+0x1c0>)
    88d4:	47b0      	blx	r6
    88d6:	0001      	movs	r1, r0
    88d8:	e7ea      	b.n	88b0 <cycle+0x118>
    88da:	2601      	movs	r6, #1
    88dc:	4276      	negs	r6, r6
    88de:	e026      	b.n	892e <cycle+0x196>
        rc = SUCCESS;
    88e0:	2600      	movs	r6, #0
    88e2:	e021      	b.n	8928 <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    88e4:	68e2      	ldr	r2, [r4, #12]
    88e6:	9200      	str	r2, [sp, #0]
    88e8:	aa0c      	add	r2, sp, #48	; 0x30
    88ea:	a908      	add	r1, sp, #32
    88ec:	a809      	add	r0, sp, #36	; 0x24
    88ee:	4e1c      	ldr	r6, [pc, #112]	; (8960 <cycle+0x1c8>)
    88f0:	47b0      	blx	r6
    88f2:	2801      	cmp	r0, #1
    88f4:	d002      	beq.n	88fc <cycle+0x164>
    88f6:	2601      	movs	r6, #1
    88f8:	4276      	negs	r6, r6
    88fa:	e01b      	b.n	8934 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
    88fc:	ab0c      	add	r3, sp, #48	; 0x30
    88fe:	881b      	ldrh	r3, [r3, #0]
    8900:	9300      	str	r3, [sp, #0]
    8902:	2300      	movs	r3, #0
    8904:	2206      	movs	r2, #6
    8906:	68a1      	ldr	r1, [r4, #8]
    8908:	6920      	ldr	r0, [r4, #16]
    890a:	4e13      	ldr	r6, [pc, #76]	; (8958 <cycle+0x1c0>)
    890c:	47b0      	blx	r6
    890e:	2800      	cmp	r0, #0
    8910:	ddf1      	ble.n	88f6 <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
    8912:	9a07      	ldr	r2, [sp, #28]
    8914:	0001      	movs	r1, r0
    8916:	0020      	movs	r0, r4
    8918:	4b10      	ldr	r3, [pc, #64]	; (895c <cycle+0x1c4>)
    891a:	4798      	blx	r3
    891c:	1e06      	subs	r6, r0, #0
    891e:	d1ea      	bne.n	88f6 <cycle+0x15e>
    8920:	e002      	b.n	8928 <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
    8922:	2300      	movs	r3, #0
    8924:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
    8926:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
    8928:	0020      	movs	r0, r4
    892a:	4b0e      	ldr	r3, [pc, #56]	; (8964 <cycle+0x1cc>)
    892c:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
    892e:	2e00      	cmp	r6, #0
    8930:	d100      	bne.n	8934 <cycle+0x19c>
    8932:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
    8934:	0030      	movs	r0, r6
    8936:	b010      	add	sp, #64	; 0x40
    8938:	bc1c      	pop	{r2, r3, r4}
    893a:	4690      	mov	r8, r2
    893c:	4699      	mov	r9, r3
    893e:	46a3      	mov	fp, r4
    8940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8942:	4d09      	ldr	r5, [pc, #36]	; (8968 <cycle+0x1d0>)
        rc = SUCCESS;
    8944:	2600      	movs	r6, #0
    8946:	e7ef      	b.n	8928 <cycle+0x190>
    8948:	00008d29 	.word	0x00008d29
    894c:	000093ad 	.word	0x000093ad
    8950:	000092a5 	.word	0x000092a5
    8954:	00008619 	.word	0x00008619
    8958:	000095f1 	.word	0x000095f1
    895c:	00008565 	.word	0x00008565
    8960:	0000933d 	.word	0x0000933d
    8964:	0000871d 	.word	0x0000871d
    8968:	0000ffff 	.word	0x0000ffff

0000896c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
    896c:	b5f0      	push	{r4, r5, r6, r7, lr}
    896e:	b083      	sub	sp, #12
    8970:	9001      	str	r0, [sp, #4]
    8972:	000e      	movs	r6, r1
    8974:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
    8976:	2401      	movs	r4, #1
    8978:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
    897a:	4f08      	ldr	r7, [pc, #32]	; (899c <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
    897c:	4d08      	ldr	r5, [pc, #32]	; (89a0 <waitfor+0x34>)
        if (TimerIsExpired(timer))
    897e:	9800      	ldr	r0, [sp, #0]
    8980:	47b8      	blx	r7
    8982:	2800      	cmp	r0, #0
    8984:	d106      	bne.n	8994 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
    8986:	9900      	ldr	r1, [sp, #0]
    8988:	9801      	ldr	r0, [sp, #4]
    898a:	47a8      	blx	r5
    898c:	0004      	movs	r4, r0
    898e:	42b0      	cmp	r0, r6
    8990:	d1f5      	bne.n	897e <waitfor+0x12>
    8992:	0034      	movs	r4, r6
    
    return rc;
}
    8994:	0020      	movs	r0, r4
    8996:	b003      	add	sp, #12
    8998:	bdf0      	pop	{r4, r5, r6, r7, pc}
    899a:	46c0      	nop			; (mov r8, r8)
    899c:	00008cf5 	.word	0x00008cf5
    89a0:	00008799 	.word	0x00008799

000089a4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
    89a4:	b530      	push	{r4, r5, lr}
    89a6:	b09b      	sub	sp, #108	; 0x6c
    89a8:	0004      	movs	r4, r0
    89aa:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
    89ac:	2258      	movs	r2, #88	; 0x58
    89ae:	4928      	ldr	r1, [pc, #160]	; (8a50 <MQTTConnect+0xac>)
    89b0:	a802      	add	r0, sp, #8
    89b2:	4b28      	ldr	r3, [pc, #160]	; (8a54 <MQTTConnect+0xb0>)
    89b4:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
    89b6:	6a23      	ldr	r3, [r4, #32]
    89b8:	2b00      	cmp	r3, #0
    89ba:	d13f      	bne.n	8a3c <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
    89bc:	a818      	add	r0, sp, #96	; 0x60
    89be:	4b26      	ldr	r3, [pc, #152]	; (8a58 <MQTTConnect+0xb4>)
    89c0:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
    89c2:	6861      	ldr	r1, [r4, #4]
    89c4:	a818      	add	r0, sp, #96	; 0x60
    89c6:	4b25      	ldr	r3, [pc, #148]	; (8a5c <MQTTConnect+0xb8>)
    89c8:	4798      	blx	r3

    if (options == 0)
    89ca:	2d00      	cmp	r5, #0
    89cc:	d015      	beq.n	89fa <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
    89ce:	8b29      	ldrh	r1, [r5, #24]
    89d0:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
    89d2:	0020      	movs	r0, r4
    89d4:	3054      	adds	r0, #84	; 0x54
    89d6:	4b22      	ldr	r3, [pc, #136]	; (8a60 <MQTTConnect+0xbc>)
    89d8:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
    89da:	002a      	movs	r2, r5
    89dc:	68a1      	ldr	r1, [r4, #8]
    89de:	6920      	ldr	r0, [r4, #16]
    89e0:	4b20      	ldr	r3, [pc, #128]	; (8a64 <MQTTConnect+0xc0>)
    89e2:	4798      	blx	r3
    89e4:	2800      	cmp	r0, #0
    89e6:	dd2c      	ble.n	8a42 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
    89e8:	aa18      	add	r2, sp, #96	; 0x60
    89ea:	0001      	movs	r1, r0
    89ec:	0020      	movs	r0, r4
    89ee:	4b1e      	ldr	r3, [pc, #120]	; (8a68 <MQTTConnect+0xc4>)
    89f0:	4798      	blx	r3
    89f2:	2800      	cmp	r0, #0
    89f4:	d003      	beq.n	89fe <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
    89f6:	b01b      	add	sp, #108	; 0x6c
    89f8:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
    89fa:	ad02      	add	r5, sp, #8
    89fc:	e7e7      	b.n	89ce <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
    89fe:	aa18      	add	r2, sp, #96	; 0x60
    8a00:	2102      	movs	r1, #2
    8a02:	0020      	movs	r0, r4
    8a04:	4b19      	ldr	r3, [pc, #100]	; (8a6c <MQTTConnect+0xc8>)
    8a06:	4798      	blx	r3
    8a08:	2802      	cmp	r0, #2
    8a0a:	d11d      	bne.n	8a48 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
    8a0c:	466b      	mov	r3, sp
    8a0e:	1d99      	adds	r1, r3, #6
    8a10:	23ff      	movs	r3, #255	; 0xff
    8a12:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
    8a14:	466b      	mov	r3, sp
    8a16:	1dd8      	adds	r0, r3, #7
    8a18:	2300      	movs	r3, #0
    8a1a:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
    8a1c:	68e3      	ldr	r3, [r4, #12]
    8a1e:	6962      	ldr	r2, [r4, #20]
    8a20:	4d13      	ldr	r5, [pc, #76]	; (8a70 <MQTTConnect+0xcc>)
    8a22:	47a8      	blx	r5
    8a24:	2801      	cmp	r0, #1
    8a26:	d002      	beq.n	8a2e <MQTTConnect+0x8a>
            rc = FAILURE;
    8a28:	2001      	movs	r0, #1
    8a2a:	4240      	negs	r0, r0
    8a2c:	e7e3      	b.n	89f6 <MQTTConnect+0x52>
            rc = connack_rc;
    8a2e:	466b      	mov	r3, sp
    8a30:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
    8a32:	2800      	cmp	r0, #0
    8a34:	d1df      	bne.n	89f6 <MQTTConnect+0x52>
        c->isconnected = 1;
    8a36:	2301      	movs	r3, #1
    8a38:	6223      	str	r3, [r4, #32]
    return rc;
    8a3a:	e7dc      	b.n	89f6 <MQTTConnect+0x52>
    int rc = FAILURE;
    8a3c:	2001      	movs	r0, #1
    8a3e:	4240      	negs	r0, r0
    8a40:	e7d9      	b.n	89f6 <MQTTConnect+0x52>
    8a42:	2001      	movs	r0, #1
    8a44:	4240      	negs	r0, r0
    8a46:	e7d6      	b.n	89f6 <MQTTConnect+0x52>
        rc = FAILURE;
    8a48:	2001      	movs	r0, #1
    8a4a:	4240      	negs	r0, r0
    8a4c:	e7d3      	b.n	89f6 <MQTTConnect+0x52>
    8a4e:	46c0      	nop			; (mov r8, r8)
    8a50:	0000e2e0 	.word	0x0000e2e0
    8a54:	0000b5e1 	.word	0x0000b5e1
    8a58:	00008d3d 	.word	0x00008d3d
    8a5c:	00008d05 	.word	0x00008d05
    8a60:	00008d15 	.word	0x00008d15
    8a64:	000090b1 	.word	0x000090b1
    8a68:	00008565 	.word	0x00008565
    8a6c:	0000896d 	.word	0x0000896d
    8a70:	000091f9 	.word	0x000091f9

00008a74 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
    8a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a76:	b091      	sub	sp, #68	; 0x44
    8a78:	0004      	movs	r4, r0
    8a7a:	000f      	movs	r7, r1
    8a7c:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
    8a7e:	2300      	movs	r3, #0
    8a80:	930c      	str	r3, [sp, #48]	; 0x30
    8a82:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
    8a84:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
    8a86:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
    8a88:	6a03      	ldr	r3, [r0, #32]
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d05c      	beq.n	8b48 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
    8a8e:	a80e      	add	r0, sp, #56	; 0x38
    8a90:	4b32      	ldr	r3, [pc, #200]	; (8b5c <MQTTSubscribe+0xe8>)
    8a92:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8a94:	6861      	ldr	r1, [r4, #4]
    8a96:	a80e      	add	r0, sp, #56	; 0x38
    8a98:	4b31      	ldr	r3, [pc, #196]	; (8b60 <MQTTSubscribe+0xec>)
    8a9a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
    8a9c:	6920      	ldr	r0, [r4, #16]
    8a9e:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8aa0:	6823      	ldr	r3, [r4, #0]
    8aa2:	4a30      	ldr	r2, [pc, #192]	; (8b64 <MQTTSubscribe+0xf0>)
    8aa4:	4293      	cmp	r3, r2
    8aa6:	d017      	beq.n	8ad8 <MQTTSubscribe+0x64>
    8aa8:	3301      	adds	r3, #1
    8aaa:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
    8aac:	b29b      	uxth	r3, r3
    8aae:	aa0a      	add	r2, sp, #40	; 0x28
    8ab0:	9202      	str	r2, [sp, #8]
    8ab2:	aa0b      	add	r2, sp, #44	; 0x2c
    8ab4:	9201      	str	r2, [sp, #4]
    8ab6:	2201      	movs	r2, #1
    8ab8:	9200      	str	r2, [sp, #0]
    8aba:	2200      	movs	r2, #0
    8abc:	4e2a      	ldr	r6, [pc, #168]	; (8b68 <MQTTSubscribe+0xf4>)
    8abe:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
    8ac0:	2800      	cmp	r0, #0
    8ac2:	dd44      	ble.n	8b4e <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8ac4:	aa0e      	add	r2, sp, #56	; 0x38
    8ac6:	0001      	movs	r1, r0
    8ac8:	0020      	movs	r0, r4
    8aca:	4b28      	ldr	r3, [pc, #160]	; (8b6c <MQTTSubscribe+0xf8>)
    8acc:	4798      	blx	r3
    8ace:	1e06      	subs	r6, r0, #0
    8ad0:	d004      	beq.n	8adc <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8ad2:	0030      	movs	r0, r6
    8ad4:	b011      	add	sp, #68	; 0x44
    8ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8ad8:	2301      	movs	r3, #1
    8ada:	e7e6      	b.n	8aaa <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
    8adc:	aa0e      	add	r2, sp, #56	; 0x38
    8ade:	2109      	movs	r1, #9
    8ae0:	0020      	movs	r0, r4
    8ae2:	4b23      	ldr	r3, [pc, #140]	; (8b70 <MQTTSubscribe+0xfc>)
    8ae4:	4798      	blx	r3
    8ae6:	2809      	cmp	r0, #9
    8ae8:	d134      	bne.n	8b54 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
    8aea:	2300      	movs	r3, #0
    8aec:	9308      	str	r3, [sp, #32]
    8aee:	3b01      	subs	r3, #1
    8af0:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    8af2:	68e3      	ldr	r3, [r4, #12]
    8af4:	9301      	str	r3, [sp, #4]
    8af6:	6963      	ldr	r3, [r4, #20]
    8af8:	9300      	str	r3, [sp, #0]
    8afa:	ab09      	add	r3, sp, #36	; 0x24
    8afc:	aa08      	add	r2, sp, #32
    8afe:	2101      	movs	r1, #1
    8b00:	300d      	adds	r0, #13
    8b02:	ad02      	add	r5, sp, #8
    8b04:	46ac      	mov	ip, r5
    8b06:	4460      	add	r0, ip
    8b08:	4d1a      	ldr	r5, [pc, #104]	; (8b74 <MQTTSubscribe+0x100>)
    8b0a:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8b0c:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    8b0e:	2801      	cmp	r0, #1
    8b10:	d00e      	beq.n	8b30 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
    8b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8b14:	2b00      	cmp	r3, #0
    8b16:	d010      	beq.n	8b3a <MQTTSubscribe+0xc6>
    8b18:	0022      	movs	r2, r4
    8b1a:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    8b1c:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
    8b1e:	6810      	ldr	r0, [r2, #0]
    8b20:	2800      	cmp	r0, #0
    8b22:	d00b      	beq.n	8b3c <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    8b24:	3301      	adds	r3, #1
    8b26:	3208      	adds	r2, #8
    8b28:	2b05      	cmp	r3, #5
    8b2a:	d1f8      	bne.n	8b1e <MQTTSubscribe+0xaa>
    8b2c:	000e      	movs	r6, r1
    8b2e:	e7d0      	b.n	8ad2 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
    8b30:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
    8b32:	2980      	cmp	r1, #128	; 0x80
    8b34:	d1ed      	bne.n	8b12 <MQTTSubscribe+0x9e>
    8b36:	000e      	movs	r6, r1
    8b38:	e7cb      	b.n	8ad2 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
    8b3a:	0033      	movs	r3, r6
    8b3c:	00db      	lsls	r3, r3, #3
    8b3e:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
    8b40:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
    8b42:	9b05      	ldr	r3, [sp, #20]
    8b44:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
    8b46:	e7c4      	b.n	8ad2 <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
    8b48:	2601      	movs	r6, #1
    8b4a:	4276      	negs	r6, r6
    8b4c:	e7c1      	b.n	8ad2 <MQTTSubscribe+0x5e>
    8b4e:	2601      	movs	r6, #1
    8b50:	4276      	negs	r6, r6
    8b52:	e7be      	b.n	8ad2 <MQTTSubscribe+0x5e>
        rc = FAILURE;
    8b54:	2601      	movs	r6, #1
    8b56:	4276      	negs	r6, r6
    return rc;
    8b58:	e7bb      	b.n	8ad2 <MQTTSubscribe+0x5e>
    8b5a:	46c0      	nop			; (mov r8, r8)
    8b5c:	00008d3d 	.word	0x00008d3d
    8b60:	00008d05 	.word	0x00008d05
    8b64:	0000ffff 	.word	0x0000ffff
    8b68:	00009689 	.word	0x00009689
    8b6c:	00008565 	.word	0x00008565
    8b70:	0000896d 	.word	0x0000896d
    8b74:	0000973d 	.word	0x0000973d

00008b78 <MQTTDisconnect>:
    return rc;
}


int MQTTDisconnect(MQTTClient* c)
{  
    8b78:	b510      	push	{r4, lr}
    8b7a:	b082      	sub	sp, #8
    8b7c:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
    8b7e:	4668      	mov	r0, sp
    8b80:	4b0b      	ldr	r3, [pc, #44]	; (8bb0 <MQTTDisconnect+0x38>)
    8b82:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8b84:	6861      	ldr	r1, [r4, #4]
    8b86:	4668      	mov	r0, sp
    8b88:	4b0a      	ldr	r3, [pc, #40]	; (8bb4 <MQTTDisconnect+0x3c>)
    8b8a:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
    8b8c:	68a1      	ldr	r1, [r4, #8]
    8b8e:	6920      	ldr	r0, [r4, #16]
    8b90:	4b09      	ldr	r3, [pc, #36]	; (8bb8 <MQTTDisconnect+0x40>)
    8b92:	4798      	blx	r3
    if (len > 0)
    8b94:	2800      	cmp	r0, #0
    8b96:	dd08      	ble.n	8baa <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
    8b98:	466a      	mov	r2, sp
    8b9a:	0001      	movs	r1, r0
    8b9c:	0020      	movs	r0, r4
    8b9e:	4b07      	ldr	r3, [pc, #28]	; (8bbc <MQTTDisconnect+0x44>)
    8ba0:	4798      	blx	r3
        
    c->isconnected = 0;
    8ba2:	2300      	movs	r3, #0
    8ba4:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8ba6:	b002      	add	sp, #8
    8ba8:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
    8baa:	2001      	movs	r0, #1
    8bac:	4240      	negs	r0, r0
    8bae:	e7f8      	b.n	8ba2 <MQTTDisconnect+0x2a>
    8bb0:	00008d3d 	.word	0x00008d3d
    8bb4:	00008d05 	.word	0x00008d05
    8bb8:	00009285 	.word	0x00009285
    8bbc:	00008565 	.word	0x00008565

00008bc0 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
    8bc0:	b510      	push	{r4, lr}
    8bc2:	0004      	movs	r4, r0
	close(n->socket);
    8bc4:	2000      	movs	r0, #0
    8bc6:	5620      	ldrsb	r0, [r4, r0]
    8bc8:	4b04      	ldr	r3, [pc, #16]	; (8bdc <WINC1500_disconnect+0x1c>)
    8bca:	4798      	blx	r3
	n->socket=-1;
    8bcc:	2301      	movs	r3, #1
    8bce:	425b      	negs	r3, r3
    8bd0:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
    8bd2:	2200      	movs	r2, #0
    8bd4:	4b02      	ldr	r3, [pc, #8]	; (8be0 <WINC1500_disconnect+0x20>)
    8bd6:	701a      	strb	r2, [r3, #0]
}
    8bd8:	bd10      	pop	{r4, pc}
    8bda:	46c0      	nop			; (mov r8, r8)
    8bdc:	00003d29 	.word	0x00003d29
    8be0:	20000424 	.word	0x20000424

00008be4 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
    8be4:	b570      	push	{r4, r5, r6, lr}
    8be6:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
    8be8:	2200      	movs	r2, #0
    8bea:	4b0d      	ldr	r3, [pc, #52]	; (8c20 <WINC1500_write+0x3c>)
    8bec:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
    8bee:	b2b2      	uxth	r2, r6
    8bf0:	7800      	ldrb	r0, [r0, #0]
    8bf2:	b240      	sxtb	r0, r0
    8bf4:	2300      	movs	r3, #0
    8bf6:	4c0b      	ldr	r4, [pc, #44]	; (8c24 <WINC1500_write+0x40>)
    8bf8:	47a0      	blx	r4
    8bfa:	2800      	cmp	r0, #0
    8bfc:	d10c      	bne.n	8c18 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
    8bfe:	4b08      	ldr	r3, [pc, #32]	; (8c20 <WINC1500_write+0x3c>)
    8c00:	781b      	ldrb	r3, [r3, #0]
    8c02:	2b00      	cmp	r3, #0
    8c04:	d106      	bne.n	8c14 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
    8c06:	4d08      	ldr	r5, [pc, #32]	; (8c28 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
    8c08:	4c05      	ldr	r4, [pc, #20]	; (8c20 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
    8c0a:	2000      	movs	r0, #0
    8c0c:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
    8c0e:	7823      	ldrb	r3, [r4, #0]
    8c10:	2b00      	cmp	r3, #0
    8c12:	d0fa      	beq.n	8c0a <WINC1500_write+0x26>
}
    8c14:	0030      	movs	r0, r6
    8c16:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
    8c18:	2601      	movs	r6, #1
    8c1a:	4276      	negs	r6, r6
    8c1c:	e7fa      	b.n	8c14 <WINC1500_write+0x30>
    8c1e:	46c0      	nop			; (mov r8, r8)
    8c20:	20000427 	.word	0x20000427
    8c24:	00003bfd 	.word	0x00003bfd
    8c28:	00002315 	.word	0x00002315

00008c2c <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
    8c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c2e:	b083      	sub	sp, #12
    8c30:	9101      	str	r1, [sp, #4]
    8c32:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
    8c34:	2b00      	cmp	r3, #0
    8c36:	d100      	bne.n	8c3a <WINC1500_read+0xe>
    8c38:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
    8c3a:	4a22      	ldr	r2, [pc, #136]	; (8cc4 <WINC1500_read+0x98>)
    8c3c:	6812      	ldr	r2, [r2, #0]
    8c3e:	2a00      	cmp	r2, #0
    8c40:	d013      	beq.n	8c6a <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
    8c42:	4b20      	ldr	r3, [pc, #128]	; (8cc4 <WINC1500_read+0x98>)
    8c44:	681d      	ldr	r5, [r3, #0]
    8c46:	42a5      	cmp	r5, r4
    8c48:	db39      	blt.n	8cbe <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
    8c4a:	4e1f      	ldr	r6, [pc, #124]	; (8cc8 <WINC1500_read+0x9c>)
    8c4c:	6837      	ldr	r7, [r6, #0]
    8c4e:	491f      	ldr	r1, [pc, #124]	; (8ccc <WINC1500_read+0xa0>)
    8c50:	19c9      	adds	r1, r1, r7
    8c52:	0022      	movs	r2, r4
    8c54:	9801      	ldr	r0, [sp, #4]
    8c56:	4b1e      	ldr	r3, [pc, #120]	; (8cd0 <WINC1500_read+0xa4>)
    8c58:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
    8c5a:	1b2d      	subs	r5, r5, r4
    8c5c:	4b19      	ldr	r3, [pc, #100]	; (8cc4 <WINC1500_read+0x98>)
    8c5e:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
    8c60:	193f      	adds	r7, r7, r4
    8c62:	6037      	str	r7, [r6, #0]
  return len;
    8c64:	0020      	movs	r0, r4
}
    8c66:	b003      	add	sp, #12
    8c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
    8c6a:	2100      	movs	r1, #0
    8c6c:	4a19      	ldr	r2, [pc, #100]	; (8cd4 <WINC1500_read+0xa8>)
    8c6e:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
    8c70:	7800      	ldrb	r0, [r0, #0]
    8c72:	b240      	sxtb	r0, r0
    8c74:	2280      	movs	r2, #128	; 0x80
    8c76:	0052      	lsls	r2, r2, #1
    8c78:	4914      	ldr	r1, [pc, #80]	; (8ccc <WINC1500_read+0xa0>)
    8c7a:	4d17      	ldr	r5, [pc, #92]	; (8cd8 <WINC1500_read+0xac>)
    8c7c:	47a8      	blx	r5
    8c7e:	2800      	cmp	r0, #0
    8c80:	d11a      	bne.n	8cb8 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
    8c82:	4b14      	ldr	r3, [pc, #80]	; (8cd4 <WINC1500_read+0xa8>)
    8c84:	781b      	ldrb	r3, [r3, #0]
    8c86:	2b00      	cmp	r3, #0
    8c88:	d106      	bne.n	8c98 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
    8c8a:	4f14      	ldr	r7, [pc, #80]	; (8cdc <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
    8c8c:	4d11      	ldr	r5, [pc, #68]	; (8cd4 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
    8c8e:	2000      	movs	r0, #0
    8c90:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
    8c92:	782b      	ldrb	r3, [r5, #0]
    8c94:	2b00      	cmp	r3, #0
    8c96:	d0fa      	beq.n	8c8e <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
    8c98:	4b11      	ldr	r3, [pc, #68]	; (8ce0 <WINC1500_read+0xb4>)
    8c9a:	6818      	ldr	r0, [r3, #0]
    8c9c:	2800      	cmp	r0, #0
    8c9e:	dd05      	ble.n	8cac <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
    8ca0:	4b08      	ldr	r3, [pc, #32]	; (8cc4 <WINC1500_read+0x98>)
    8ca2:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
    8ca4:	2200      	movs	r2, #0
    8ca6:	4b08      	ldr	r3, [pc, #32]	; (8cc8 <WINC1500_read+0x9c>)
    8ca8:	601a      	str	r2, [r3, #0]
    8caa:	e7ca      	b.n	8c42 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
    8cac:	2300      	movs	r3, #0
    8cae:	4a05      	ldr	r2, [pc, #20]	; (8cc4 <WINC1500_read+0x98>)
    8cb0:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
    8cb2:	4a05      	ldr	r2, [pc, #20]	; (8cc8 <WINC1500_read+0x9c>)
    8cb4:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
    8cb6:	e7d6      	b.n	8c66 <WINC1500_read+0x3a>
		  return -1;
    8cb8:	2001      	movs	r0, #1
    8cba:	4240      	negs	r0, r0
    8cbc:	e7d3      	b.n	8c66 <WINC1500_read+0x3a>
	  return -1;
    8cbe:	2001      	movs	r0, #1
    8cc0:	4240      	negs	r0, r0
    8cc2:	e7d0      	b.n	8c66 <WINC1500_read+0x3a>
    8cc4:	20000534 	.word	0x20000534
    8cc8:	20000538 	.word	0x20000538
    8ccc:	20000428 	.word	0x20000428
    8cd0:	0000b5e1 	.word	0x0000b5e1
    8cd4:	20000426 	.word	0x20000426
    8cd8:	00003c95 	.word	0x00003c95
    8cdc:	00002315 	.word	0x00002315
    8ce0:	2000052c 	.word	0x2000052c

00008ce4 <SysTick_Handler>:
	MilliTimer++;
    8ce4:	4a02      	ldr	r2, [pc, #8]	; (8cf0 <SysTick_Handler+0xc>)
    8ce6:	6813      	ldr	r3, [r2, #0]
    8ce8:	3301      	adds	r3, #1
    8cea:	6013      	str	r3, [r2, #0]
}
    8cec:	4770      	bx	lr
    8cee:	46c0      	nop			; (mov r8, r8)
    8cf0:	20000420 	.word	0x20000420

00008cf4 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
    8cf4:	6840      	ldr	r0, [r0, #4]
    8cf6:	4b02      	ldr	r3, [pc, #8]	; (8d00 <TimerIsExpired+0xc>)
    8cf8:	681b      	ldr	r3, [r3, #0]
    8cfa:	1ac0      	subs	r0, r0, r3
	return (left < 0);
    8cfc:	0fc0      	lsrs	r0, r0, #31
}
    8cfe:	4770      	bx	lr
    8d00:	20000420 	.word	0x20000420

00008d04 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
    8d04:	4b02      	ldr	r3, [pc, #8]	; (8d10 <TimerCountdownMS+0xc>)
    8d06:	681b      	ldr	r3, [r3, #0]
    8d08:	1859      	adds	r1, r3, r1
    8d0a:	6041      	str	r1, [r0, #4]
}
    8d0c:	4770      	bx	lr
    8d0e:	46c0      	nop			; (mov r8, r8)
    8d10:	20000420 	.word	0x20000420

00008d14 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
    8d14:	23fa      	movs	r3, #250	; 0xfa
    8d16:	009b      	lsls	r3, r3, #2
    8d18:	4359      	muls	r1, r3
    8d1a:	4b02      	ldr	r3, [pc, #8]	; (8d24 <TimerCountdown+0x10>)
    8d1c:	681b      	ldr	r3, [r3, #0]
    8d1e:	18c9      	adds	r1, r1, r3
    8d20:	6041      	str	r1, [r0, #4]
}
    8d22:	4770      	bx	lr
    8d24:	20000420 	.word	0x20000420

00008d28 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
    8d28:	6840      	ldr	r0, [r0, #4]
    8d2a:	4b03      	ldr	r3, [pc, #12]	; (8d38 <TimerLeftMS+0x10>)
    8d2c:	681b      	ldr	r3, [r3, #0]
    8d2e:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
    8d30:	43c3      	mvns	r3, r0
    8d32:	17db      	asrs	r3, r3, #31
    8d34:	4018      	ands	r0, r3
}
    8d36:	4770      	bx	lr
    8d38:	20000420 	.word	0x20000420

00008d3c <TimerInit>:
	timer->end_time = 0;
    8d3c:	2300      	movs	r3, #0
    8d3e:	6043      	str	r3, [r0, #4]
}
    8d40:	4770      	bx	lr
	...

00008d44 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
    8d44:	2301      	movs	r3, #1
    8d46:	425b      	negs	r3, r3
    8d48:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
    8d4a:	4b03      	ldr	r3, [pc, #12]	; (8d58 <NetworkInit+0x14>)
    8d4c:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
    8d4e:	4b03      	ldr	r3, [pc, #12]	; (8d5c <NetworkInit+0x18>)
    8d50:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
    8d52:	4b03      	ldr	r3, [pc, #12]	; (8d60 <NetworkInit+0x1c>)
    8d54:	6103      	str	r3, [r0, #16]
}
    8d56:	4770      	bx	lr
    8d58:	00008c2d 	.word	0x00008c2d
    8d5c:	00008be5 	.word	0x00008be5
    8d60:	00008bc1 	.word	0x00008bc1

00008d64 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
    8d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d66:	b087      	sub	sp, #28
    8d68:	0006      	movs	r6, r0
    8d6a:	0015      	movs	r5, r2
    8d6c:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
    8d6e:	4c25      	ldr	r4, [pc, #148]	; (8e04 <ConnectNetwork+0xa0>)
    8d70:	2300      	movs	r3, #0
    8d72:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
    8d74:	4b24      	ldr	r3, [pc, #144]	; (8e08 <ConnectNetwork+0xa4>)
    8d76:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
    8d78:	0008      	movs	r0, r1
    8d7a:	4b24      	ldr	r3, [pc, #144]	; (8e0c <ConnectNetwork+0xa8>)
    8d7c:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
    8d7e:	7823      	ldrb	r3, [r4, #0]
    8d80:	2b00      	cmp	r3, #0
    8d82:	d106      	bne.n	8d92 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
    8d84:	4f22      	ldr	r7, [pc, #136]	; (8e10 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
    8d86:	4c1f      	ldr	r4, [pc, #124]	; (8e04 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
    8d88:	2000      	movs	r0, #0
    8d8a:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
    8d8c:	7823      	ldrb	r3, [r4, #0]
    8d8e:	2b00      	cmp	r3, #0
    8d90:	d0fa      	beq.n	8d88 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
    8d92:	4b20      	ldr	r3, [pc, #128]	; (8e14 <ConnectNetwork+0xb0>)
    8d94:	681a      	ldr	r2, [r3, #0]
    8d96:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
    8d98:	2302      	movs	r3, #2
    8d9a:	a902      	add	r1, sp, #8
    8d9c:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
    8d9e:	022b      	lsls	r3, r5, #8
    8da0:	491d      	ldr	r1, [pc, #116]	; (8e18 <ConnectNetwork+0xb4>)
    8da2:	400b      	ands	r3, r1
    8da4:	b2ad      	uxth	r5, r5
    8da6:	0a2d      	lsrs	r5, r5, #8
    8da8:	431d      	orrs	r5, r3
    8daa:	ab02      	add	r3, sp, #8
    8dac:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
    8dae:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
    8db0:	6833      	ldr	r3, [r6, #0]
    8db2:	2b00      	cmp	r3, #0
    8db4:	db16      	blt.n	8de4 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
    8db6:	6830      	ldr	r0, [r6, #0]
    8db8:	1c43      	adds	r3, r0, #1
    8dba:	d01b      	beq.n	8df4 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
    8dbc:	b240      	sxtb	r0, r0
    8dbe:	2210      	movs	r2, #16
    8dc0:	a902      	add	r1, sp, #8
    8dc2:	4b16      	ldr	r3, [pc, #88]	; (8e1c <ConnectNetwork+0xb8>)
    8dc4:	4798      	blx	r3
    8dc6:	2800      	cmp	r0, #0
    8dc8:	d119      	bne.n	8dfe <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
    8dca:	2200      	movs	r2, #0
    8dcc:	4b14      	ldr	r3, [pc, #80]	; (8e20 <ConnectNetwork+0xbc>)
    8dce:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
    8dd0:	4d0f      	ldr	r5, [pc, #60]	; (8e10 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
    8dd2:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
    8dd4:	2000      	movs	r0, #0
    8dd6:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
    8dd8:	7823      	ldrb	r3, [r4, #0]
    8dda:	2b00      	cmp	r3, #0
    8ddc:	d0fa      	beq.n	8dd4 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
    8dde:	2000      	movs	r0, #0
    8de0:	b007      	add	sp, #28
    8de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
    8de4:	466b      	mov	r3, sp
    8de6:	791a      	ldrb	r2, [r3, #4]
    8de8:	2101      	movs	r1, #1
    8dea:	2002      	movs	r0, #2
    8dec:	4b0d      	ldr	r3, [pc, #52]	; (8e24 <ConnectNetwork+0xc0>)
    8dee:	4798      	blx	r3
    8df0:	6030      	str	r0, [r6, #0]
    8df2:	e7e0      	b.n	8db6 <ConnectNetwork+0x52>
   close(n->socket);
    8df4:	4b0c      	ldr	r3, [pc, #48]	; (8e28 <ConnectNetwork+0xc4>)
    8df6:	4798      	blx	r3
   return SOCK_ERR_INVALID;
    8df8:	2009      	movs	r0, #9
    8dfa:	4240      	negs	r0, r0
    8dfc:	e7f0      	b.n	8de0 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
    8dfe:	2009      	movs	r0, #9
    8e00:	4240      	negs	r0, r0
    8e02:	e7ed      	b.n	8de0 <ConnectNetwork+0x7c>
    8e04:	20000425 	.word	0x20000425
    8e08:	20000530 	.word	0x20000530
    8e0c:	00003e31 	.word	0x00003e31
    8e10:	00002315 	.word	0x00002315
    8e14:	20000528 	.word	0x20000528
    8e18:	00ffff00 	.word	0x00ffff00
    8e1c:	00003b6d 	.word	0x00003b6d
    8e20:	20000424 	.word	0x20000424
    8e24:	000039e9 	.word	0x000039e9
    8e28:	00003d29 	.word	0x00003d29

00008e2c <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
    8e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e2e:	b085      	sub	sp, #20
    8e30:	0006      	movs	r6, r0
    8e32:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
    8e34:	2800      	cmp	r0, #0
    8e36:	d03d      	beq.n	8eb4 <mqtt_init+0x88>
    8e38:	2900      	cmp	r1, #0
    8e3a:	d03e      	beq.n	8eba <mqtt_init+0x8e>
    8e3c:	690b      	ldr	r3, [r1, #16]
    8e3e:	2b00      	cmp	r3, #0
    8e40:	d03e      	beq.n	8ec0 <mqtt_init+0x94>
    8e42:	688b      	ldr	r3, [r1, #8]
    8e44:	2b00      	cmp	r3, #0
    8e46:	d03e      	beq.n	8ec6 <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
    8e48:	888b      	ldrh	r3, [r1, #4]
    8e4a:	27fa      	movs	r7, #250	; 0xfa
    8e4c:	00bf      	lsls	r7, r7, #2
    8e4e:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
    8e50:	0004      	movs	r4, r0
    8e52:	3420      	adds	r4, #32
    8e54:	0020      	movs	r0, r4
    8e56:	4b1f      	ldr	r3, [pc, #124]	; (8ed4 <mqtt_init+0xa8>)
    8e58:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
    8e5a:	1d30      	adds	r0, r6, #4
    8e5c:	2218      	movs	r2, #24
    8e5e:	0029      	movs	r1, r5
    8e60:	4b1d      	ldr	r3, [pc, #116]	; (8ed8 <mqtt_init+0xac>)
    8e62:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    8e64:	4b1d      	ldr	r3, [pc, #116]	; (8edc <mqtt_init+0xb0>)
    8e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8e68:	2b00      	cmp	r3, #0
    8e6a:	d01a      	beq.n	8ea2 <mqtt_init+0x76>
    8e6c:	4b1b      	ldr	r3, [pc, #108]	; (8edc <mqtt_init+0xb0>)
    8e6e:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    8e70:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    8e72:	6819      	ldr	r1, [r3, #0]
    8e74:	2900      	cmp	r1, #0
    8e76:	d015      	beq.n	8ea4 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    8e78:	3201      	adds	r2, #1
    8e7a:	3360      	adds	r3, #96	; 0x60
    8e7c:	2a07      	cmp	r2, #7
    8e7e:	d1f8      	bne.n	8e72 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
    8e80:	69f0      	ldr	r0, [r6, #28]
    8e82:	2800      	cmp	r0, #0
    8e84:	d022      	beq.n	8ecc <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
    8e86:	692b      	ldr	r3, [r5, #16]
    8e88:	68ea      	ldr	r2, [r5, #12]
    8e8a:	9202      	str	r2, [sp, #8]
    8e8c:	68aa      	ldr	r2, [r5, #8]
    8e8e:	9201      	str	r2, [sp, #4]
    8e90:	696a      	ldr	r2, [r5, #20]
    8e92:	9200      	str	r2, [sp, #0]
    8e94:	003a      	movs	r2, r7
    8e96:	0021      	movs	r1, r4
    8e98:	4c11      	ldr	r4, [pc, #68]	; (8ee0 <mqtt_init+0xb4>)
    8e9a:	47a0      	blx	r4
		return SUCCESS;
    8e9c:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    8e9e:	b005      	add	sp, #20
    8ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    8ea2:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
    8ea4:	480d      	ldr	r0, [pc, #52]	; (8edc <mqtt_init+0xb0>)
    8ea6:	0053      	lsls	r3, r2, #1
    8ea8:	1899      	adds	r1, r3, r2
    8eaa:	0149      	lsls	r1, r1, #5
    8eac:	1841      	adds	r1, r0, r1
    8eae:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
    8eb0:	61f1      	str	r1, [r6, #28]
    8eb2:	e7e5      	b.n	8e80 <mqtt_init+0x54>
		return FAILURE;
    8eb4:	2001      	movs	r0, #1
    8eb6:	4240      	negs	r0, r0
    8eb8:	e7f1      	b.n	8e9e <mqtt_init+0x72>
    8eba:	2001      	movs	r0, #1
    8ebc:	4240      	negs	r0, r0
    8ebe:	e7ee      	b.n	8e9e <mqtt_init+0x72>
    8ec0:	2001      	movs	r0, #1
    8ec2:	4240      	negs	r0, r0
    8ec4:	e7eb      	b.n	8e9e <mqtt_init+0x72>
    8ec6:	2001      	movs	r0, #1
    8ec8:	4240      	negs	r0, r0
    8eca:	e7e8      	b.n	8e9e <mqtt_init+0x72>
		return FAILURE;
    8ecc:	2001      	movs	r0, #1
    8ece:	4240      	negs	r0, r0
    8ed0:	e7e5      	b.n	8e9e <mqtt_init+0x72>
    8ed2:	46c0      	nop			; (mov r8, r8)
    8ed4:	00008d45 	.word	0x00008d45
    8ed8:	0000b5e1 	.word	0x0000b5e1
    8edc:	2000053c 	.word	0x2000053c
    8ee0:	000085e1 	.word	0x000085e1

00008ee4 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
    8ee4:	4b05      	ldr	r3, [pc, #20]	; (8efc <mqtt_get_config_defaults+0x18>)
    8ee6:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    8ee8:	2300      	movs	r3, #0
    8eea:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
    8eec:	223c      	movs	r2, #60	; 0x3c
    8eee:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
    8ef0:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
    8ef2:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
    8ef4:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
    8ef6:	6143      	str	r3, [r0, #20]
}
    8ef8:	4770      	bx	lr
    8efa:	46c0      	nop			; (mov r8, r8)
    8efc:	0000075b 	.word	0x0000075b

00008f00 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
    8f00:	2800      	cmp	r0, #0
    8f02:	d002      	beq.n	8f0a <mqtt_register_callback+0xa>
	{
		module->callback = callback;
    8f04:	6001      	str	r1, [r0, #0]
		return SUCCESS;
    8f06:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    8f08:	4770      	bx	lr
		return FAILURE;
    8f0a:	2001      	movs	r0, #1
    8f0c:	4240      	negs	r0, r0
    8f0e:	e7fb      	b.n	8f08 <mqtt_register_callback+0x8>

00008f10 <mqtt_connect>:
{
	dnsResolveCallback(domain_name, server_ip);
}

int mqtt_connect(struct mqtt_module *module, const char *host)
{
    8f10:	b530      	push	{r4, r5, lr}
    8f12:	b083      	sub	sp, #12
    8f14:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
    8f16:	7983      	ldrb	r3, [r0, #6]
    8f18:	8882      	ldrh	r2, [r0, #4]
    8f1a:	3020      	adds	r0, #32
    8f1c:	4d06      	ldr	r5, [pc, #24]	; (8f38 <mqtt_connect+0x28>)
    8f1e:	47a8      	blx	r5
    8f20:	9001      	str	r0, [sp, #4]
	if(module->callback)
    8f22:	6823      	ldr	r3, [r4, #0]
    8f24:	2b00      	cmp	r3, #0
    8f26:	d003      	beq.n	8f30 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
    8f28:	aa01      	add	r2, sp, #4
    8f2a:	2100      	movs	r1, #0
    8f2c:	0020      	movs	r0, r4
    8f2e:	4798      	blx	r3
	return connResult.sock_connected.result;
}
    8f30:	9801      	ldr	r0, [sp, #4]
    8f32:	b003      	add	sp, #12
    8f34:	bd30      	pop	{r4, r5, pc}
    8f36:	46c0      	nop			; (mov r8, r8)
    8f38:	00008d65 	.word	0x00008d65

00008f3c <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
    8f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f3e:	46de      	mov	lr, fp
    8f40:	4657      	mov	r7, sl
    8f42:	464e      	mov	r6, r9
    8f44:	b5c0      	push	{r6, r7, lr}
    8f46:	b098      	sub	sp, #96	; 0x60
    8f48:	0005      	movs	r5, r0
    8f4a:	4689      	mov	r9, r1
    8f4c:	4693      	mov	fp, r2
    8f4e:	469a      	mov	sl, r3
    8f50:	ab24      	add	r3, sp, #144	; 0x90
    8f52:	781f      	ldrb	r7, [r3, #0]
    8f54:	ab25      	add	r3, sp, #148	; 0x94
    8f56:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
    8f58:	ac01      	add	r4, sp, #4
    8f5a:	2258      	movs	r2, #88	; 0x58
    8f5c:	491a      	ldr	r1, [pc, #104]	; (8fc8 <mqtt_connect_broker+0x8c>)
    8f5e:	0020      	movs	r0, r4
    8f60:	4b1a      	ldr	r3, [pc, #104]	; (8fcc <mqtt_connect_broker+0x90>)
    8f62:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
    8f64:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8f66:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
    8f68:	465b      	mov	r3, fp
    8f6a:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
    8f6c:	4653      	mov	r3, sl
    8f6e:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
    8f70:	464b      	mov	r3, r9
    8f72:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
    8f74:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8f76:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
    8f78:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8f7a:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
    8f7c:	233c      	movs	r3, #60	; 0x3c
    8f7e:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
    8f80:	3301      	adds	r3, #1
    8f82:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
    8f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8f86:	2b00      	cmp	r3, #0
    8f88:	d005      	beq.n	8f96 <mqtt_connect_broker+0x5a>
    8f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	d002      	beq.n	8f96 <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
    8f90:	2201      	movs	r2, #1
    8f92:	ab01      	add	r3, sp, #4
    8f94:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
    8f96:	a901      	add	r1, sp, #4
    8f98:	69e8      	ldr	r0, [r5, #28]
    8f9a:	4b0d      	ldr	r3, [pc, #52]	; (8fd0 <mqtt_connect_broker+0x94>)
    8f9c:	4798      	blx	r3
    8f9e:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
    8fa0:	ab17      	add	r3, sp, #92	; 0x5c
    8fa2:	7018      	strb	r0, [r3, #0]
	if(module->callback)
    8fa4:	682b      	ldr	r3, [r5, #0]
    8fa6:	2b00      	cmp	r3, #0
    8fa8:	d003      	beq.n	8fb2 <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
    8faa:	aa17      	add	r2, sp, #92	; 0x5c
    8fac:	2101      	movs	r1, #1
    8fae:	0028      	movs	r0, r5
    8fb0:	4798      	blx	r3
	
	module->isConnected = true;
    8fb2:	2201      	movs	r2, #1
    8fb4:	2334      	movs	r3, #52	; 0x34
    8fb6:	54ea      	strb	r2, [r5, r3]
	return rc;
}
    8fb8:	0020      	movs	r0, r4
    8fba:	b018      	add	sp, #96	; 0x60
    8fbc:	bc1c      	pop	{r2, r3, r4}
    8fbe:	4691      	mov	r9, r2
    8fc0:	469a      	mov	sl, r3
    8fc2:	46a3      	mov	fp, r4
    8fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fc6:	46c0      	nop			; (mov r8, r8)
    8fc8:	0000e338 	.word	0x0000e338
    8fcc:	0000b5e1 	.word	0x0000b5e1
    8fd0:	000089a5 	.word	0x000089a5

00008fd4 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
    8fd4:	b530      	push	{r4, r5, lr}
    8fd6:	b083      	sub	sp, #12
    8fd8:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
    8fda:	69c0      	ldr	r0, [r0, #28]
    8fdc:	4b08      	ldr	r3, [pc, #32]	; (9000 <mqtt_disconnect+0x2c>)
    8fde:	4798      	blx	r3
    8fe0:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
    8fe2:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
    8fe4:	6823      	ldr	r3, [r4, #0]
    8fe6:	2b00      	cmp	r3, #0
    8fe8:	d003      	beq.n	8ff2 <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
    8fea:	aa01      	add	r2, sp, #4
    8fec:	2105      	movs	r1, #5
    8fee:	0020      	movs	r0, r4
    8ff0:	4798      	blx	r3
	
	module->isConnected = false;
    8ff2:	2200      	movs	r2, #0
    8ff4:	2334      	movs	r3, #52	; 0x34
    8ff6:	54e2      	strb	r2, [r4, r3]
	return rc;
}
    8ff8:	0028      	movs	r0, r5
    8ffa:	b003      	add	sp, #12
    8ffc:	bd30      	pop	{r4, r5, pc}
    8ffe:	46c0      	nop			; (mov r8, r8)
    9000:	00008b79 	.word	0x00008b79

00009004 <mqtt_subscribe>:
	
	return rc;
}

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
    9004:	b570      	push	{r4, r5, r6, lr}
    9006:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
    9008:	69c0      	ldr	r0, [r0, #28]
    900a:	4d06      	ldr	r5, [pc, #24]	; (9024 <mqtt_subscribe+0x20>)
    900c:	47a8      	blx	r5
    900e:	0005      	movs	r5, r0
	
	if(module->callback)
    9010:	6823      	ldr	r3, [r4, #0]
    9012:	2b00      	cmp	r3, #0
    9014:	d003      	beq.n	901e <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
    9016:	2200      	movs	r2, #0
    9018:	2103      	movs	r1, #3
    901a:	0020      	movs	r0, r4
    901c:	4798      	blx	r3
	
	return rc;
}
    901e:	0028      	movs	r0, r5
    9020:	bd70      	pop	{r4, r5, r6, pc}
    9022:	46c0      	nop			; (mov r8, r8)
    9024:	00008a75 	.word	0x00008a75

00009028 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
    9028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    902a:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
    902c:	7a03      	ldrb	r3, [r0, #8]
    902e:	2b03      	cmp	r3, #3
    9030:	d024      	beq.n	907c <MQTTSerialize_connectLength+0x54>
	int len = 0;
    9032:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
    9034:	2b04      	cmp	r3, #4
    9036:	d01f      	beq.n	9078 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
    9038:	68e0      	ldr	r0, [r4, #12]
    903a:	6921      	ldr	r1, [r4, #16]
    903c:	6962      	ldr	r2, [r4, #20]
    903e:	4b1b      	ldr	r3, [pc, #108]	; (90ac <MQTTSerialize_connectLength+0x84>)
    9040:	4798      	blx	r3
    9042:	1c85      	adds	r5, r0, #2
    9044:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
    9046:	7ee3      	ldrb	r3, [r4, #27]
    9048:	2b00      	cmp	r3, #0
    904a:	d119      	bne.n	9080 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
    904c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    904e:	2b00      	cmp	r3, #0
    9050:	d024      	beq.n	909c <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
    9052:	6c20      	ldr	r0, [r4, #64]	; 0x40
    9054:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9056:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9058:	4b14      	ldr	r3, [pc, #80]	; (90ac <MQTTSerialize_connectLength+0x84>)
    905a:	4798      	blx	r3
    905c:	3002      	adds	r0, #2
    905e:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
    9060:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9062:	2b00      	cmp	r3, #0
    9064:	d01e      	beq.n	90a4 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
    9066:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    9068:	6d21      	ldr	r1, [r4, #80]	; 0x50
    906a:	6d62      	ldr	r2, [r4, #84]	; 0x54
    906c:	4b0f      	ldr	r3, [pc, #60]	; (90ac <MQTTSerialize_connectLength+0x84>)
    906e:	4798      	blx	r3
    9070:	3002      	adds	r0, #2
    9072:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
    9074:	0028      	movs	r0, r5
    9076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
    9078:	360a      	adds	r6, #10
    907a:	e7dd      	b.n	9038 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
    907c:	260c      	movs	r6, #12
    907e:	e7db      	b.n	9038 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
    9080:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9082:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9084:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9086:	4f09      	ldr	r7, [pc, #36]	; (90ac <MQTTSerialize_connectLength+0x84>)
    9088:	47b8      	blx	r7
    908a:	0006      	movs	r6, r0
    908c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    908e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9090:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9092:	47b8      	blx	r7
    9094:	1836      	adds	r6, r6, r0
    9096:	3604      	adds	r6, #4
    9098:	19ad      	adds	r5, r5, r6
    909a:	e7d7      	b.n	904c <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
    909c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    909e:	2b00      	cmp	r3, #0
    90a0:	d1d7      	bne.n	9052 <MQTTSerialize_connectLength+0x2a>
    90a2:	e7dd      	b.n	9060 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
    90a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    90a6:	2b00      	cmp	r3, #0
    90a8:	d1dd      	bne.n	9066 <MQTTSerialize_connectLength+0x3e>
    90aa:	e7e3      	b.n	9074 <MQTTSerialize_connectLength+0x4c>
    90ac:	00009591 	.word	0x00009591

000090b0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
    90b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    90b2:	b083      	sub	sp, #12
    90b4:	0006      	movs	r6, r0
    90b6:	000f      	movs	r7, r1
    90b8:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
    90ba:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
    90bc:	0010      	movs	r0, r2
    90be:	4b45      	ldr	r3, [pc, #276]	; (91d4 <MQTTSerialize_connect+0x124>)
    90c0:	4798      	blx	r3
    90c2:	0004      	movs	r4, r0
    90c4:	4b44      	ldr	r3, [pc, #272]	; (91d8 <MQTTSerialize_connect+0x128>)
    90c6:	4798      	blx	r3
    90c8:	42b8      	cmp	r0, r7
    90ca:	dd00      	ble.n	90ce <MQTTSerialize_connect+0x1e>
    90cc:	e07f      	b.n	91ce <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
    90ce:	2110      	movs	r1, #16
    90d0:	a801      	add	r0, sp, #4
    90d2:	4b42      	ldr	r3, [pc, #264]	; (91dc <MQTTSerialize_connect+0x12c>)
    90d4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
    90d6:	0021      	movs	r1, r4
    90d8:	9801      	ldr	r0, [sp, #4]
    90da:	4b41      	ldr	r3, [pc, #260]	; (91e0 <MQTTSerialize_connect+0x130>)
    90dc:	4798      	blx	r3
    90de:	9b01      	ldr	r3, [sp, #4]
    90e0:	469c      	mov	ip, r3
    90e2:	4460      	add	r0, ip
    90e4:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
    90e6:	7a2b      	ldrb	r3, [r5, #8]
    90e8:	2b04      	cmp	r3, #4
    90ea:	d045      	beq.n	9178 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
    90ec:	493d      	ldr	r1, [pc, #244]	; (91e4 <MQTTSerialize_connect+0x134>)
    90ee:	a801      	add	r0, sp, #4
    90f0:	4b3d      	ldr	r3, [pc, #244]	; (91e8 <MQTTSerialize_connect+0x138>)
    90f2:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
    90f4:	2103      	movs	r1, #3
    90f6:	a801      	add	r0, sp, #4
    90f8:	4b38      	ldr	r3, [pc, #224]	; (91dc <MQTTSerialize_connect+0x12c>)
    90fa:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
    90fc:	7ea9      	ldrb	r1, [r5, #26]
    90fe:	2301      	movs	r3, #1
    9100:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
    9102:	7eea      	ldrb	r2, [r5, #27]
    9104:	1e50      	subs	r0, r2, #1
    9106:	4182      	sbcs	r2, r0
    9108:	b2d2      	uxtb	r2, r2
    910a:	4013      	ands	r3, r2
    910c:	009b      	lsls	r3, r3, #2
    910e:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
    9110:	4319      	orrs	r1, r3
    9112:	2b00      	cmp	r3, #0
    9114:	d00b      	beq.n	912e <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
    9116:	233d      	movs	r3, #61	; 0x3d
    9118:	5cea      	ldrb	r2, [r5, r3]
    911a:	3b3a      	subs	r3, #58	; 0x3a
    911c:	4013      	ands	r3, r2
    911e:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
    9120:	223c      	movs	r2, #60	; 0x3c
    9122:	5ca8      	ldrb	r0, [r5, r2]
    9124:	3a3b      	subs	r2, #59	; 0x3b
    9126:	4002      	ands	r2, r0
    9128:	0152      	lsls	r2, r2, #5
    912a:	4319      	orrs	r1, r3
    912c:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
    912e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    9130:	2b00      	cmp	r3, #0
    9132:	d02a      	beq.n	918a <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
    9134:	2380      	movs	r3, #128	; 0x80
    9136:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
    9138:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    913a:	2b00      	cmp	r3, #0
    913c:	d029      	beq.n	9192 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
    913e:	2340      	movs	r3, #64	; 0x40
    9140:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
    9142:	b2cc      	uxtb	r4, r1
    9144:	0021      	movs	r1, r4
    9146:	a801      	add	r0, sp, #4
    9148:	4b24      	ldr	r3, [pc, #144]	; (91dc <MQTTSerialize_connect+0x12c>)
    914a:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
    914c:	8b29      	ldrh	r1, [r5, #24]
    914e:	a801      	add	r0, sp, #4
    9150:	4b26      	ldr	r3, [pc, #152]	; (91ec <MQTTSerialize_connect+0x13c>)
    9152:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
    9154:	68e9      	ldr	r1, [r5, #12]
    9156:	692a      	ldr	r2, [r5, #16]
    9158:	696b      	ldr	r3, [r5, #20]
    915a:	a801      	add	r0, sp, #4
    915c:	4f24      	ldr	r7, [pc, #144]	; (91f0 <MQTTSerialize_connect+0x140>)
    915e:	47b8      	blx	r7
	if (options->willFlag)
    9160:	7eeb      	ldrb	r3, [r5, #27]
    9162:	2b00      	cmp	r3, #0
    9164:	d119      	bne.n	919a <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
    9166:	b263      	sxtb	r3, r4
    9168:	2b00      	cmp	r3, #0
    916a:	db22      	blt.n	91b2 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
    916c:	0663      	lsls	r3, r4, #25
    916e:	d427      	bmi.n	91c0 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
    9170:	9b01      	ldr	r3, [sp, #4]
    9172:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
    9174:	b003      	add	sp, #12
    9176:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
    9178:	491e      	ldr	r1, [pc, #120]	; (91f4 <MQTTSerialize_connect+0x144>)
    917a:	a801      	add	r0, sp, #4
    917c:	4b1a      	ldr	r3, [pc, #104]	; (91e8 <MQTTSerialize_connect+0x138>)
    917e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
    9180:	2104      	movs	r1, #4
    9182:	a801      	add	r0, sp, #4
    9184:	4b15      	ldr	r3, [pc, #84]	; (91dc <MQTTSerialize_connect+0x12c>)
    9186:	4798      	blx	r3
    9188:	e7b8      	b.n	90fc <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
    918a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    918c:	2b00      	cmp	r3, #0
    918e:	d1d1      	bne.n	9134 <MQTTSerialize_connect+0x84>
    9190:	e7d2      	b.n	9138 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
    9192:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    9194:	2b00      	cmp	r3, #0
    9196:	d1d2      	bne.n	913e <MQTTSerialize_connect+0x8e>
    9198:	e7d3      	b.n	9142 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
    919a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    919c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    919e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    91a0:	a801      	add	r0, sp, #4
    91a2:	4f13      	ldr	r7, [pc, #76]	; (91f0 <MQTTSerialize_connect+0x140>)
    91a4:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
    91a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    91a8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    91aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
    91ac:	a801      	add	r0, sp, #4
    91ae:	47b8      	blx	r7
    91b0:	e7d9      	b.n	9166 <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
    91b2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    91b4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    91b6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    91b8:	a801      	add	r0, sp, #4
    91ba:	4f0d      	ldr	r7, [pc, #52]	; (91f0 <MQTTSerialize_connect+0x140>)
    91bc:	47b8      	blx	r7
    91be:	e7d5      	b.n	916c <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
    91c0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    91c2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    91c4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    91c6:	a801      	add	r0, sp, #4
    91c8:	4c09      	ldr	r4, [pc, #36]	; (91f0 <MQTTSerialize_connect+0x140>)
    91ca:	47a0      	blx	r4
    91cc:	e7d0      	b.n	9170 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    91ce:	2002      	movs	r0, #2
    91d0:	4240      	negs	r0, r0
	return rc;
    91d2:	e7cf      	b.n	9174 <MQTTSerialize_connect+0xc4>
    91d4:	00009029 	.word	0x00009029
    91d8:	00009435 	.word	0x00009435
    91dc:	00009497 	.word	0x00009497
    91e0:	000093ad 	.word	0x000093ad
    91e4:	0000e398 	.word	0x0000e398
    91e8:	000094cd 	.word	0x000094cd
    91ec:	000094a3 	.word	0x000094a3
    91f0:	00009505 	.word	0x00009505
    91f4:	0000e390 	.word	0x0000e390

000091f8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
    91f8:	b570      	push	{r4, r5, r6, lr}
    91fa:	b082      	sub	sp, #8
    91fc:	0005      	movs	r5, r0
    91fe:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9200:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9202:	a801      	add	r0, sp, #4
    9204:	4b0e      	ldr	r3, [pc, #56]	; (9240 <MQTTDeserialize_connack+0x48>)
    9206:	4798      	blx	r3
	if (header.bits.type != CONNACK)
    9208:	23f0      	movs	r3, #240	; 0xf0
    920a:	4003      	ands	r3, r0
	int rc = 0;
    920c:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
    920e:	2b20      	cmp	r3, #32
    9210:	d001      	beq.n	9216 <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9212:	b002      	add	sp, #8
    9214:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    9216:	4669      	mov	r1, sp
    9218:	9801      	ldr	r0, [sp, #4]
    921a:	4b0a      	ldr	r3, [pc, #40]	; (9244 <MQTTDeserialize_connack+0x4c>)
    921c:	4798      	blx	r3
    921e:	9b01      	ldr	r3, [sp, #4]
    9220:	181b      	adds	r3, r3, r0
    9222:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
    9224:	9b00      	ldr	r3, [sp, #0]
    9226:	2b01      	cmp	r3, #1
    9228:	ddf3      	ble.n	9212 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
    922a:	a801      	add	r0, sp, #4
    922c:	4e04      	ldr	r6, [pc, #16]	; (9240 <MQTTDeserialize_connack+0x48>)
    922e:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
    9230:	0600      	lsls	r0, r0, #24
    9232:	0fc0      	lsrs	r0, r0, #31
    9234:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
    9236:	a801      	add	r0, sp, #4
    9238:	47b0      	blx	r6
    923a:	7020      	strb	r0, [r4, #0]
	rc = 1;
    923c:	2001      	movs	r0, #1
    923e:	e7e8      	b.n	9212 <MQTTDeserialize_connack+0x1a>
    9240:	0000948b 	.word	0x0000948b
    9244:	0000945d 	.word	0x0000945d

00009248 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    9248:	b510      	push	{r4, lr}
    924a:	b082      	sub	sp, #8
    924c:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    924e:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
    9250:	2901      	cmp	r1, #1
    9252:	dd0f      	ble.n	9274 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    9254:	210f      	movs	r1, #15
    9256:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    9258:	0109      	lsls	r1, r1, #4
    925a:	a801      	add	r0, sp, #4
    925c:	4b07      	ldr	r3, [pc, #28]	; (927c <MQTTSerialize_zero+0x34>)
    925e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    9260:	2100      	movs	r1, #0
    9262:	9801      	ldr	r0, [sp, #4]
    9264:	4b06      	ldr	r3, [pc, #24]	; (9280 <MQTTSerialize_zero+0x38>)
    9266:	4798      	blx	r3
    9268:	9b01      	ldr	r3, [sp, #4]
    926a:	469c      	mov	ip, r3
    926c:	4460      	add	r0, ip
	rc = ptr - buf;
    926e:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9270:	b002      	add	sp, #8
    9272:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    9274:	2002      	movs	r0, #2
    9276:	4240      	negs	r0, r0
	return rc;
    9278:	e7fa      	b.n	9270 <MQTTSerialize_zero+0x28>
    927a:	46c0      	nop			; (mov r8, r8)
    927c:	00009497 	.word	0x00009497
    9280:	000093ad 	.word	0x000093ad

00009284 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
    9284:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    9286:	220e      	movs	r2, #14
    9288:	4b01      	ldr	r3, [pc, #4]	; (9290 <MQTTSerialize_disconnect+0xc>)
    928a:	4798      	blx	r3
}
    928c:	bd10      	pop	{r4, pc}
    928e:	46c0      	nop			; (mov r8, r8)
    9290:	00009249 	.word	0x00009249

00009294 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
    9294:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
    9296:	220c      	movs	r2, #12
    9298:	4b01      	ldr	r3, [pc, #4]	; (92a0 <MQTTSerialize_pingreq+0xc>)
    929a:	4798      	blx	r3
}
    929c:	bd10      	pop	{r4, pc}
    929e:	46c0      	nop			; (mov r8, r8)
    92a0:	00009249 	.word	0x00009249

000092a4 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
    92a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    92a6:	b085      	sub	sp, #20
    92a8:	0005      	movs	r5, r0
    92aa:	000e      	movs	r6, r1
    92ac:	0014      	movs	r4, r2
    92ae:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    92b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    92b2:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
    92b4:	2300      	movs	r3, #0
    92b6:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    92b8:	a803      	add	r0, sp, #12
    92ba:	4b1c      	ldr	r3, [pc, #112]	; (932c <MQTTDeserialize_publish+0x88>)
    92bc:	4798      	blx	r3
    92be:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
    92c0:	22f0      	movs	r2, #240	; 0xf0
    92c2:	4010      	ands	r0, r2
	int rc = 0;
    92c4:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
    92c6:	2830      	cmp	r0, #48	; 0x30
    92c8:	d002      	beq.n	92d0 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    92ca:	0038      	movs	r0, r7
    92cc:	b005      	add	sp, #20
    92ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
    92d0:	071a      	lsls	r2, r3, #28
    92d2:	0fd2      	lsrs	r2, r2, #31
    92d4:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
    92d6:	075a      	lsls	r2, r3, #29
    92d8:	0f92      	lsrs	r2, r2, #30
    92da:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
    92dc:	07db      	lsls	r3, r3, #31
    92de:	0fdb      	lsrs	r3, r3, #31
    92e0:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    92e2:	a902      	add	r1, sp, #8
    92e4:	9803      	ldr	r0, [sp, #12]
    92e6:	4b12      	ldr	r3, [pc, #72]	; (9330 <MQTTDeserialize_publish+0x8c>)
    92e8:	4798      	blx	r3
    92ea:	0007      	movs	r7, r0
    92ec:	9b03      	ldr	r3, [sp, #12]
    92ee:	181c      	adds	r4, r3, r0
    92f0:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
    92f2:	9b02      	ldr	r3, [sp, #8]
    92f4:	469c      	mov	ip, r3
    92f6:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    92f8:	0022      	movs	r2, r4
    92fa:	a903      	add	r1, sp, #12
    92fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    92fe:	4b0d      	ldr	r3, [pc, #52]	; (9334 <MQTTDeserialize_publish+0x90>)
    9300:	4798      	blx	r3
    9302:	2800      	cmp	r0, #0
    9304:	d0e1      	beq.n	92ca <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
    9306:	9b03      	ldr	r3, [sp, #12]
    9308:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    930a:	d4de      	bmi.n	92ca <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
    930c:	6833      	ldr	r3, [r6, #0]
    930e:	2b00      	cmp	r3, #0
    9310:	dd04      	ble.n	931c <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
    9312:	a803      	add	r0, sp, #12
    9314:	4b08      	ldr	r3, [pc, #32]	; (9338 <MQTTDeserialize_publish+0x94>)
    9316:	4798      	blx	r3
    9318:	9b01      	ldr	r3, [sp, #4]
    931a:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
    931c:	9b03      	ldr	r3, [sp, #12]
    931e:	1ae4      	subs	r4, r4, r3
    9320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9322:	6014      	str	r4, [r2, #0]
	*payload = curdata;
    9324:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9326:	6013      	str	r3, [r2, #0]
	rc = 1;
    9328:	2701      	movs	r7, #1
    932a:	e7ce      	b.n	92ca <MQTTDeserialize_publish+0x26>
    932c:	0000948b 	.word	0x0000948b
    9330:	0000945d 	.word	0x0000945d
    9334:	00009551 	.word	0x00009551
    9338:	00009479 	.word	0x00009479

0000933c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
    933c:	b570      	push	{r4, r5, r6, lr}
    933e:	b082      	sub	sp, #8
    9340:	0005      	movs	r5, r0
    9342:	000e      	movs	r6, r1
    9344:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9346:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9348:	a801      	add	r0, sp, #4
    934a:	4b0c      	ldr	r3, [pc, #48]	; (937c <MQTTDeserialize_ack+0x40>)
    934c:	4798      	blx	r3
	*dup = header.bits.dup;
    934e:	0703      	lsls	r3, r0, #28
    9350:	0fdb      	lsrs	r3, r3, #31
    9352:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
    9354:	0600      	lsls	r0, r0, #24
    9356:	0f00      	lsrs	r0, r0, #28
    9358:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    935a:	4669      	mov	r1, sp
    935c:	9801      	ldr	r0, [sp, #4]
    935e:	4b08      	ldr	r3, [pc, #32]	; (9380 <MQTTDeserialize_ack+0x44>)
    9360:	4798      	blx	r3
    9362:	9b01      	ldr	r3, [sp, #4]
    9364:	181b      	adds	r3, r3, r0
    9366:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
    9368:	9b00      	ldr	r3, [sp, #0]
    936a:	2b01      	cmp	r3, #1
    936c:	dd04      	ble.n	9378 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
    936e:	a801      	add	r0, sp, #4
    9370:	4b04      	ldr	r3, [pc, #16]	; (9384 <MQTTDeserialize_ack+0x48>)
    9372:	4798      	blx	r3
    9374:	8020      	strh	r0, [r4, #0]

	rc = 1;
    9376:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9378:	b002      	add	sp, #8
    937a:	bd70      	pop	{r4, r5, r6, pc}
    937c:	0000948b 	.word	0x0000948b
    9380:	0000945d 	.word	0x0000945d
    9384:	00009479 	.word	0x00009479

00009388 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
    9388:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
    938a:	2900      	cmp	r1, #0
    938c:	dd0a      	ble.n	93a4 <bufchar+0x1c>
    938e:	4b06      	ldr	r3, [pc, #24]	; (93a8 <bufchar+0x20>)
    9390:	681b      	ldr	r3, [r3, #0]
    9392:	185d      	adds	r5, r3, r1
    9394:	002c      	movs	r4, r5
		*c = *bufptr++;
    9396:	781a      	ldrb	r2, [r3, #0]
    9398:	7002      	strb	r2, [r0, #0]
    939a:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
    939c:	42a3      	cmp	r3, r4
    939e:	d1fa      	bne.n	9396 <bufchar+0xe>
    93a0:	4b01      	ldr	r3, [pc, #4]	; (93a8 <bufchar+0x20>)
    93a2:	601d      	str	r5, [r3, #0]
	return count;
}
    93a4:	0008      	movs	r0, r1
    93a6:	bd30      	pop	{r4, r5, pc}
    93a8:	200007dc 	.word	0x200007dc

000093ac <MQTTPacket_encode>:
{
    93ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    93ae:	b083      	sub	sp, #12
    93b0:	2500      	movs	r5, #0
		char d = length % 128;
    93b2:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
    93b4:	2780      	movs	r7, #128	; 0x80
    93b6:	427f      	negs	r7, r7
    93b8:	9501      	str	r5, [sp, #4]
		char d = length % 128;
    93ba:	17ca      	asrs	r2, r1, #31
    93bc:	0e54      	lsrs	r4, r2, #25
    93be:	190b      	adds	r3, r1, r4
    93c0:	4033      	ands	r3, r6
    93c2:	1b1b      	subs	r3, r3, r4
    93c4:	b2db      	uxtb	r3, r3
		length /= 128;
    93c6:	4032      	ands	r2, r6
    93c8:	1851      	adds	r1, r2, r1
    93ca:	11c9      	asrs	r1, r1, #7
		if (length > 0)
    93cc:	2900      	cmp	r1, #0
    93ce:	dd03      	ble.n	93d8 <MQTTPacket_encode+0x2c>
			d |= 0x80;
    93d0:	433b      	orrs	r3, r7
		buf[rc++] = d;
    93d2:	5543      	strb	r3, [r0, r5]
    93d4:	3501      	adds	r5, #1
    93d6:	e7ef      	b.n	93b8 <MQTTPacket_encode+0xc>
    93d8:	5543      	strb	r3, [r0, r5]
    93da:	9801      	ldr	r0, [sp, #4]
    93dc:	3001      	adds	r0, #1
}
    93de:	b003      	add	sp, #12
    93e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000093e2 <MQTTPacket_decode>:
{
    93e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    93e4:	46ce      	mov	lr, r9
    93e6:	4647      	mov	r7, r8
    93e8:	b580      	push	{r7, lr}
    93ea:	b083      	sub	sp, #12
    93ec:	4680      	mov	r8, r0
    93ee:	000f      	movs	r7, r1
	*value = 0;
    93f0:	2300      	movs	r3, #0
    93f2:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    93f4:	2401      	movs	r4, #1
	int multiplier = 1;
    93f6:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
    93f8:	466b      	mov	r3, sp
    93fa:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
    93fc:	237f      	movs	r3, #127	; 0x7f
    93fe:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
    9400:	2101      	movs	r1, #1
    9402:	0028      	movs	r0, r5
    9404:	47c0      	blx	r8
		if (rc != 1)
    9406:	2801      	cmp	r0, #1
    9408:	d10e      	bne.n	9428 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
    940a:	782b      	ldrb	r3, [r5, #0]
    940c:	464a      	mov	r2, r9
    940e:	401a      	ands	r2, r3
    9410:	4372      	muls	r2, r6
    9412:	6839      	ldr	r1, [r7, #0]
    9414:	468c      	mov	ip, r1
    9416:	4462      	add	r2, ip
    9418:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
    941a:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
    941c:	b25b      	sxtb	r3, r3
    941e:	2b00      	cmp	r3, #0
    9420:	da02      	bge.n	9428 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    9422:	3401      	adds	r4, #1
    9424:	2c05      	cmp	r4, #5
    9426:	d1eb      	bne.n	9400 <MQTTPacket_decode+0x1e>
}
    9428:	0020      	movs	r0, r4
    942a:	b003      	add	sp, #12
    942c:	bc0c      	pop	{r2, r3}
    942e:	4690      	mov	r8, r2
    9430:	4699      	mov	r9, r3
    9432:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009434 <MQTTPacket_len>:
{
    9434:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
    9436:	1c42      	adds	r2, r0, #1
		rem_len += 1;
    9438:	3002      	adds	r0, #2
	if (rem_len < 128)
    943a:	2a7f      	cmp	r2, #127	; 0x7f
    943c:	dd07      	ble.n	944e <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
    943e:	4905      	ldr	r1, [pc, #20]	; (9454 <MQTTPacket_len+0x20>)
		rem_len += 2;
    9440:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
    9442:	428a      	cmp	r2, r1
    9444:	dd03      	ble.n	944e <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
    9446:	4904      	ldr	r1, [pc, #16]	; (9458 <MQTTPacket_len+0x24>)
		rem_len += 4;
    9448:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
    944a:	428a      	cmp	r2, r1
    944c:	dd00      	ble.n	9450 <MQTTPacket_len+0x1c>
}
    944e:	4770      	bx	lr
		rem_len += 3;
    9450:	1d18      	adds	r0, r3, #4
    9452:	e7fc      	b.n	944e <MQTTPacket_len+0x1a>
    9454:	00003fff 	.word	0x00003fff
    9458:	001ffffe 	.word	0x001ffffe

0000945c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
    945c:	b510      	push	{r4, lr}
	bufptr = buf;
    945e:	4b03      	ldr	r3, [pc, #12]	; (946c <MQTTPacket_decodeBuf+0x10>)
    9460:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
    9462:	4803      	ldr	r0, [pc, #12]	; (9470 <MQTTPacket_decodeBuf+0x14>)
    9464:	4b03      	ldr	r3, [pc, #12]	; (9474 <MQTTPacket_decodeBuf+0x18>)
    9466:	4798      	blx	r3
}
    9468:	bd10      	pop	{r4, pc}
    946a:	46c0      	nop			; (mov r8, r8)
    946c:	200007dc 	.word	0x200007dc
    9470:	00009389 	.word	0x00009389
    9474:	000093e3 	.word	0x000093e3

00009478 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
    9478:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
    947a:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
    947c:	7813      	ldrb	r3, [r2, #0]
    947e:	021b      	lsls	r3, r3, #8
    9480:	7850      	ldrb	r0, [r2, #1]
    9482:	1818      	adds	r0, r3, r0
	*pptr += 2;
    9484:	3202      	adds	r2, #2
    9486:	600a      	str	r2, [r1, #0]
	return len;
}
    9488:	4770      	bx	lr

0000948a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
    948a:	0002      	movs	r2, r0
	char c = **pptr;
    948c:	6803      	ldr	r3, [r0, #0]
    948e:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
    9490:	3301      	adds	r3, #1
    9492:	6013      	str	r3, [r2, #0]
	return c;
}
    9494:	4770      	bx	lr

00009496 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
    9496:	6803      	ldr	r3, [r0, #0]
    9498:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
    949a:	6803      	ldr	r3, [r0, #0]
    949c:	3301      	adds	r3, #1
    949e:	6003      	str	r3, [r0, #0]
}
    94a0:	4770      	bx	lr

000094a2 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
    94a2:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
    94a4:	17ca      	asrs	r2, r1, #31
    94a6:	23ff      	movs	r3, #255	; 0xff
    94a8:	001c      	movs	r4, r3
    94aa:	4014      	ands	r4, r2
    94ac:	1864      	adds	r4, r4, r1
    94ae:	1224      	asrs	r4, r4, #8
    94b0:	6805      	ldr	r5, [r0, #0]
    94b2:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
    94b4:	6804      	ldr	r4, [r0, #0]
    94b6:	1c65      	adds	r5, r4, #1
    94b8:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
    94ba:	0e12      	lsrs	r2, r2, #24
    94bc:	1889      	adds	r1, r1, r2
    94be:	400b      	ands	r3, r1
    94c0:	1a9b      	subs	r3, r3, r2
    94c2:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
    94c4:	6803      	ldr	r3, [r0, #0]
    94c6:	3301      	adds	r3, #1
    94c8:	6003      	str	r3, [r0, #0]
}
    94ca:	bd30      	pop	{r4, r5, pc}

000094cc <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
    94cc:	b570      	push	{r4, r5, r6, lr}
    94ce:	0004      	movs	r4, r0
    94d0:	000e      	movs	r6, r1
	int len = strlen(string);
    94d2:	0008      	movs	r0, r1
    94d4:	4b08      	ldr	r3, [pc, #32]	; (94f8 <writeCString+0x2c>)
    94d6:	4798      	blx	r3
    94d8:	0005      	movs	r5, r0
	writeInt(pptr, len);
    94da:	0001      	movs	r1, r0
    94dc:	0020      	movs	r0, r4
    94de:	4b07      	ldr	r3, [pc, #28]	; (94fc <writeCString+0x30>)
    94e0:	4798      	blx	r3
	memcpy(*pptr, string, len);
    94e2:	002a      	movs	r2, r5
    94e4:	0031      	movs	r1, r6
    94e6:	6820      	ldr	r0, [r4, #0]
    94e8:	4b05      	ldr	r3, [pc, #20]	; (9500 <writeCString+0x34>)
    94ea:	4798      	blx	r3
	*pptr += len;
    94ec:	6823      	ldr	r3, [r4, #0]
    94ee:	469c      	mov	ip, r3
    94f0:	4465      	add	r5, ip
    94f2:	6025      	str	r5, [r4, #0]
}
    94f4:	bd70      	pop	{r4, r5, r6, pc}
    94f6:	46c0      	nop			; (mov r8, r8)
    94f8:	0000bac7 	.word	0x0000bac7
    94fc:	000094a3 	.word	0x000094a3
    9500:	0000b5e1 	.word	0x0000b5e1

00009504 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
    9504:	b530      	push	{r4, r5, lr}
    9506:	b085      	sub	sp, #20
    9508:	0005      	movs	r5, r0
    950a:	9101      	str	r1, [sp, #4]
    950c:	9303      	str	r3, [sp, #12]
    950e:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
    9510:	dc06      	bgt.n	9520 <writeMQTTString+0x1c>
    9512:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
    9514:	2900      	cmp	r1, #0
    9516:	d010      	beq.n	953a <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
    9518:	4b0a      	ldr	r3, [pc, #40]	; (9544 <writeMQTTString+0x40>)
    951a:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
    951c:	b005      	add	sp, #20
    951e:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
    9520:	0011      	movs	r1, r2
    9522:	4b09      	ldr	r3, [pc, #36]	; (9548 <writeMQTTString+0x44>)
    9524:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    9526:	0022      	movs	r2, r4
    9528:	9903      	ldr	r1, [sp, #12]
    952a:	6828      	ldr	r0, [r5, #0]
    952c:	4b07      	ldr	r3, [pc, #28]	; (954c <writeMQTTString+0x48>)
    952e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
    9530:	682b      	ldr	r3, [r5, #0]
    9532:	469c      	mov	ip, r3
    9534:	4464      	add	r4, ip
    9536:	602c      	str	r4, [r5, #0]
    9538:	e7f0      	b.n	951c <writeMQTTString+0x18>
		writeInt(pptr, 0);
    953a:	2100      	movs	r1, #0
    953c:	4b02      	ldr	r3, [pc, #8]	; (9548 <writeMQTTString+0x44>)
    953e:	4798      	blx	r3
}
    9540:	e7ec      	b.n	951c <writeMQTTString+0x18>
    9542:	46c0      	nop			; (mov r8, r8)
    9544:	000094cd 	.word	0x000094cd
    9548:	000094a3 	.word	0x000094a3
    954c:	0000b5e1 	.word	0x0000b5e1

00009550 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
    9550:	b570      	push	{r4, r5, r6, lr}
    9552:	0005      	movs	r5, r0
    9554:	000c      	movs	r4, r1
    9556:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    9558:	680b      	ldr	r3, [r1, #0]
    955a:	1ad3      	subs	r3, r2, r3
    955c:	2b01      	cmp	r3, #1
    955e:	dd12      	ble.n	9586 <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    9560:	0008      	movs	r0, r1
    9562:	4b0a      	ldr	r3, [pc, #40]	; (958c <readMQTTLenString+0x3c>)
    9564:	4798      	blx	r3
    9566:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    9568:	6822      	ldr	r2, [r4, #0]
    956a:	1811      	adds	r1, r2, r0
	int rc = 0;
    956c:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    956e:	428e      	cmp	r6, r1
    9570:	d305      	bcc.n	957e <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
    9572:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
    9574:	6823      	ldr	r3, [r4, #0]
    9576:	469c      	mov	ip, r3
    9578:	4460      	add	r0, ip
    957a:	6020      	str	r0, [r4, #0]
			rc = 1;
    957c:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
    957e:	2200      	movs	r2, #0
    9580:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
    9582:	0018      	movs	r0, r3
    9584:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
    9586:	2300      	movs	r3, #0
    9588:	e7f9      	b.n	957e <readMQTTLenString+0x2e>
    958a:	46c0      	nop			; (mov r8, r8)
    958c:	00009479 	.word	0x00009479

00009590 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    9590:	b500      	push	{lr}
    9592:	b085      	sub	sp, #20
    9594:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
    9596:	2800      	cmp	r0, #0
    9598:	d003      	beq.n	95a2 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
    959a:	4b03      	ldr	r3, [pc, #12]	; (95a8 <MQTTstrlen+0x18>)
    959c:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
    959e:	b005      	add	sp, #20
    95a0:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
    95a2:	9802      	ldr	r0, [sp, #8]
	return rc;
    95a4:	e7fb      	b.n	959e <MQTTstrlen+0xe>
    95a6:	46c0      	nop			; (mov r8, r8)
    95a8:	0000bac7 	.word	0x0000bac7

000095ac <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
    95ac:	b570      	push	{r4, r5, r6, lr}
    95ae:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
    95b0:	6806      	ldr	r6, [r0, #0]
    95b2:	2e00      	cmp	r6, #0
    95b4:	d00b      	beq.n	95ce <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
    95b6:	0030      	movs	r0, r6
    95b8:	4b0b      	ldr	r3, [pc, #44]	; (95e8 <MQTTPacket_equals+0x3c>)
    95ba:	4798      	blx	r3
    95bc:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
    95be:	0028      	movs	r0, r5
    95c0:	4b09      	ldr	r3, [pc, #36]	; (95e8 <MQTTPacket_equals+0x3c>)
    95c2:	4798      	blx	r3
    95c4:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    95c6:	4284      	cmp	r4, r0
    95c8:	d004      	beq.n	95d4 <MQTTPacket_equals+0x28>
}
    95ca:	0018      	movs	r0, r3
    95cc:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
    95ce:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
    95d0:	6844      	ldr	r4, [r0, #4]
    95d2:	e7f4      	b.n	95be <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    95d4:	0022      	movs	r2, r4
    95d6:	0029      	movs	r1, r5
    95d8:	0030      	movs	r0, r6
    95da:	4b04      	ldr	r3, [pc, #16]	; (95ec <MQTTPacket_equals+0x40>)
    95dc:	4798      	blx	r3
    95de:	4243      	negs	r3, r0
    95e0:	4143      	adcs	r3, r0
    95e2:	b2db      	uxtb	r3, r3
    95e4:	e7f1      	b.n	95ca <MQTTPacket_equals+0x1e>
    95e6:	46c0      	nop			; (mov r8, r8)
    95e8:	0000bac7 	.word	0x0000bac7
    95ec:	0000bad5 	.word	0x0000bad5

000095f0 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
    95f0:	b530      	push	{r4, r5, lr}
    95f2:	b083      	sub	sp, #12
    95f4:	0004      	movs	r4, r0
    95f6:	a806      	add	r0, sp, #24
    95f8:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
    95fa:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
    95fc:	2903      	cmp	r1, #3
    95fe:	dd1e      	ble.n	963e <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
    9600:	210f      	movs	r1, #15
    9602:	4011      	ands	r1, r2
	header.bits.dup = dup;
    9604:	2001      	movs	r0, #1
    9606:	4003      	ands	r3, r0
    9608:	00db      	lsls	r3, r3, #3
    960a:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    960c:	3a06      	subs	r2, #6
    960e:	4250      	negs	r0, r2
    9610:	4142      	adcs	r2, r0
    9612:	0052      	lsls	r2, r2, #1
    9614:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
    9616:	4311      	orrs	r1, r2
    9618:	a801      	add	r0, sp, #4
    961a:	4b0a      	ldr	r3, [pc, #40]	; (9644 <MQTTSerialize_ack+0x54>)
    961c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    961e:	2102      	movs	r1, #2
    9620:	9801      	ldr	r0, [sp, #4]
    9622:	4b09      	ldr	r3, [pc, #36]	; (9648 <MQTTSerialize_ack+0x58>)
    9624:	4798      	blx	r3
    9626:	9b01      	ldr	r3, [sp, #4]
    9628:	469c      	mov	ip, r3
    962a:	4460      	add	r0, ip
    962c:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
    962e:	0029      	movs	r1, r5
    9630:	a801      	add	r0, sp, #4
    9632:	4b06      	ldr	r3, [pc, #24]	; (964c <MQTTSerialize_ack+0x5c>)
    9634:	4798      	blx	r3
	rc = ptr - buf;
    9636:	9b01      	ldr	r3, [sp, #4]
    9638:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    963a:	b003      	add	sp, #12
    963c:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    963e:	2002      	movs	r0, #2
    9640:	4240      	negs	r0, r0
	return rc;
    9642:	e7fa      	b.n	963a <MQTTSerialize_ack+0x4a>
    9644:	00009497 	.word	0x00009497
    9648:	000093ad 	.word	0x000093ad
    964c:	000094a3 	.word	0x000094a3

00009650 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
    9650:	b5f0      	push	{r4, r5, r6, r7, lr}
    9652:	46c6      	mov	lr, r8
    9654:	b500      	push	{lr}
    9656:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
    9658:	dd12      	ble.n	9680 <MQTTSerialize_subscribeLength+0x30>
    965a:	000c      	movs	r4, r1
    965c:	2602      	movs	r6, #2
    965e:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    9660:	4b08      	ldr	r3, [pc, #32]	; (9684 <MQTTSerialize_subscribeLength+0x34>)
    9662:	4698      	mov	r8, r3
    9664:	6820      	ldr	r0, [r4, #0]
    9666:	6861      	ldr	r1, [r4, #4]
    9668:	68a2      	ldr	r2, [r4, #8]
    966a:	47c0      	blx	r8
    966c:	3003      	adds	r0, #3
    966e:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
    9670:	3501      	adds	r5, #1
    9672:	340c      	adds	r4, #12
    9674:	42af      	cmp	r7, r5
    9676:	d1f5      	bne.n	9664 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
    9678:	0030      	movs	r0, r6
    967a:	bc04      	pop	{r2}
    967c:	4690      	mov	r8, r2
    967e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
    9680:	2602      	movs	r6, #2
	return len;
    9682:	e7f9      	b.n	9678 <MQTTSerialize_subscribeLength+0x28>
    9684:	00009591 	.word	0x00009591

00009688 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
    9688:	b5f0      	push	{r4, r5, r6, r7, lr}
    968a:	46d6      	mov	lr, sl
    968c:	464f      	mov	r7, r9
    968e:	4646      	mov	r6, r8
    9690:	b5c0      	push	{r6, r7, lr}
    9692:	b084      	sub	sp, #16
    9694:	4682      	mov	sl, r0
    9696:	000e      	movs	r6, r1
    9698:	0015      	movs	r5, r2
    969a:	9301      	str	r3, [sp, #4]
    969c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
    969e:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    96a0:	990d      	ldr	r1, [sp, #52]	; 0x34
    96a2:	0038      	movs	r0, r7
    96a4:	4b1f      	ldr	r3, [pc, #124]	; (9724 <MQTTSerialize_subscribe+0x9c>)
    96a6:	4798      	blx	r3
    96a8:	0004      	movs	r4, r0
    96aa:	4b1f      	ldr	r3, [pc, #124]	; (9728 <MQTTSerialize_subscribe+0xa0>)
    96ac:	4798      	blx	r3
    96ae:	42b0      	cmp	r0, r6
    96b0:	dc34      	bgt.n	971c <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
    96b2:	2101      	movs	r1, #1
    96b4:	4029      	ands	r1, r5
    96b6:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
    96b8:	2180      	movs	r1, #128	; 0x80
    96ba:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    96bc:	2302      	movs	r3, #2
    96be:	4319      	orrs	r1, r3
    96c0:	a803      	add	r0, sp, #12
    96c2:	4b1a      	ldr	r3, [pc, #104]	; (972c <MQTTSerialize_subscribe+0xa4>)
    96c4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    96c6:	0021      	movs	r1, r4
    96c8:	9803      	ldr	r0, [sp, #12]
    96ca:	4b19      	ldr	r3, [pc, #100]	; (9730 <MQTTSerialize_subscribe+0xa8>)
    96cc:	4798      	blx	r3
    96ce:	9a03      	ldr	r2, [sp, #12]
    96d0:	4694      	mov	ip, r2
    96d2:	4460      	add	r0, ip
    96d4:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
    96d6:	9901      	ldr	r1, [sp, #4]
    96d8:	a803      	add	r0, sp, #12
    96da:	4b16      	ldr	r3, [pc, #88]	; (9734 <MQTTSerialize_subscribe+0xac>)
    96dc:	4798      	blx	r3

	for (i = 0; i < count; ++i)
    96de:	2f00      	cmp	r7, #0
    96e0:	dd13      	ble.n	970a <MQTTSerialize_subscribe+0x82>
    96e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    96e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    96e6:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
    96e8:	4b13      	ldr	r3, [pc, #76]	; (9738 <MQTTSerialize_subscribe+0xb0>)
    96ea:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
    96ec:	4b0f      	ldr	r3, [pc, #60]	; (972c <MQTTSerialize_subscribe+0xa4>)
    96ee:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
    96f0:	6821      	ldr	r1, [r4, #0]
    96f2:	6862      	ldr	r2, [r4, #4]
    96f4:	68a3      	ldr	r3, [r4, #8]
    96f6:	a803      	add	r0, sp, #12
    96f8:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
    96fa:	ce02      	ldmia	r6!, {r1}
    96fc:	b2c9      	uxtb	r1, r1
    96fe:	a803      	add	r0, sp, #12
    9700:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
    9702:	3501      	adds	r5, #1
    9704:	340c      	adds	r4, #12
    9706:	42af      	cmp	r7, r5
    9708:	d1f2      	bne.n	96f0 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
    970a:	9b03      	ldr	r3, [sp, #12]
    970c:	4652      	mov	r2, sl
    970e:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9710:	b004      	add	sp, #16
    9712:	bc1c      	pop	{r2, r3, r4}
    9714:	4690      	mov	r8, r2
    9716:	4699      	mov	r9, r3
    9718:	46a2      	mov	sl, r4
    971a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    971c:	2002      	movs	r0, #2
    971e:	4240      	negs	r0, r0
	return rc;
    9720:	e7f6      	b.n	9710 <MQTTSerialize_subscribe+0x88>
    9722:	46c0      	nop			; (mov r8, r8)
    9724:	00009651 	.word	0x00009651
    9728:	00009435 	.word	0x00009435
    972c:	00009497 	.word	0x00009497
    9730:	000093ad 	.word	0x000093ad
    9734:	000094a3 	.word	0x000094a3
    9738:	00009505 	.word	0x00009505

0000973c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
    973c:	b5f0      	push	{r4, r5, r6, r7, lr}
    973e:	46ce      	mov	lr, r9
    9740:	4647      	mov	r7, r8
    9742:	b580      	push	{r7, lr}
    9744:	b083      	sub	sp, #12
    9746:	0004      	movs	r4, r0
    9748:	000e      	movs	r6, r1
    974a:	0015      	movs	r5, r2
    974c:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    974e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9750:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9752:	a801      	add	r0, sp, #4
    9754:	4b1e      	ldr	r3, [pc, #120]	; (97d0 <MQTTDeserialize_suback+0x94>)
    9756:	4798      	blx	r3
	if (header.bits.type != SUBACK)
    9758:	23f0      	movs	r3, #240	; 0xf0
    975a:	4003      	ands	r3, r0
	int rc = 0;
    975c:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
    975e:	2b90      	cmp	r3, #144	; 0x90
    9760:	d004      	beq.n	976c <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9762:	b003      	add	sp, #12
    9764:	bc0c      	pop	{r2, r3}
    9766:	4690      	mov	r8, r2
    9768:	4699      	mov	r9, r3
    976a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    976c:	4669      	mov	r1, sp
    976e:	9801      	ldr	r0, [sp, #4]
    9770:	4b18      	ldr	r3, [pc, #96]	; (97d4 <MQTTDeserialize_suback+0x98>)
    9772:	4798      	blx	r3
    9774:	9b01      	ldr	r3, [sp, #4]
    9776:	181b      	adds	r3, r3, r0
    9778:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
    977a:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
    977c:	2a01      	cmp	r2, #1
    977e:	ddf0      	ble.n	9762 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
    9780:	4698      	mov	r8, r3
    9782:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
    9784:	a801      	add	r0, sp, #4
    9786:	4b14      	ldr	r3, [pc, #80]	; (97d8 <MQTTDeserialize_suback+0x9c>)
    9788:	4798      	blx	r3
    978a:	8020      	strh	r0, [r4, #0]
	*count = 0;
    978c:	2300      	movs	r3, #0
    978e:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
    9790:	9b01      	ldr	r3, [sp, #4]
    9792:	4598      	cmp	r8, r3
    9794:	d916      	bls.n	97c4 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
    9796:	2e00      	cmp	r6, #0
    9798:	db16      	blt.n	97c8 <MQTTDeserialize_suback+0x8c>
    979a:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
    979c:	4a0c      	ldr	r2, [pc, #48]	; (97d0 <MQTTDeserialize_suback+0x94>)
    979e:	4691      	mov	r9, r2
    97a0:	1c5a      	adds	r2, r3, #1
    97a2:	602a      	str	r2, [r5, #0]
    97a4:	009b      	lsls	r3, r3, #2
    97a6:	18fc      	adds	r4, r7, r3
    97a8:	a801      	add	r0, sp, #4
    97aa:	47c8      	blx	r9
    97ac:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
    97ae:	9b01      	ldr	r3, [sp, #4]
    97b0:	4598      	cmp	r8, r3
    97b2:	d905      	bls.n	97c0 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
    97b4:	682b      	ldr	r3, [r5, #0]
    97b6:	42b3      	cmp	r3, r6
    97b8:	ddf2      	ble.n	97a0 <MQTTDeserialize_suback+0x64>
			rc = -1;
    97ba:	2001      	movs	r0, #1
    97bc:	4240      	negs	r0, r0
	return rc;
    97be:	e7d0      	b.n	9762 <MQTTDeserialize_suback+0x26>
	rc = 1;
    97c0:	2001      	movs	r0, #1
    97c2:	e7ce      	b.n	9762 <MQTTDeserialize_suback+0x26>
    97c4:	2001      	movs	r0, #1
    97c6:	e7cc      	b.n	9762 <MQTTDeserialize_suback+0x26>
			rc = -1;
    97c8:	2001      	movs	r0, #1
    97ca:	4240      	negs	r0, r0
    97cc:	e7c9      	b.n	9762 <MQTTDeserialize_suback+0x26>
    97ce:	46c0      	nop			; (mov r8, r8)
    97d0:	0000948b 	.word	0x0000948b
    97d4:	0000945d 	.word	0x0000945d
    97d8:	00009479 	.word	0x00009479

000097dc <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    97dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97de:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    97e0:	2041      	movs	r0, #65	; 0x41
    97e2:	5c23      	ldrb	r3, [r4, r0]
    97e4:	2501      	movs	r5, #1
    97e6:	432b      	orrs	r3, r5
    97e8:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    97ea:	b292      	uxth	r2, r2
    97ec:	2000      	movs	r0, #0
    97ee:	5620      	ldrsb	r0, [r4, r0]
    97f0:	2300      	movs	r3, #0
    97f2:	4d12      	ldr	r5, [pc, #72]	; (983c <_http_client_send_wait+0x60>)
    97f4:	47a8      	blx	r5
    97f6:	2800      	cmp	r0, #0
    97f8:	db16      	blt.n	9828 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    97fa:	2341      	movs	r3, #65	; 0x41
    97fc:	5ce3      	ldrb	r3, [r4, r3]
    97fe:	07db      	lsls	r3, r3, #31
    9800:	d518      	bpl.n	9834 <_http_client_send_wait+0x58>
    9802:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    9804:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9806:	2b02      	cmp	r3, #2
    9808:	d917      	bls.n	983a <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    980a:	4f0d      	ldr	r7, [pc, #52]	; (9840 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    980c:	4e0d      	ldr	r6, [pc, #52]	; (9844 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    980e:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    9810:	2000      	movs	r0, #0
    9812:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    9814:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9816:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9818:	5d63      	ldrb	r3, [r4, r5]
    981a:	07db      	lsls	r3, r3, #31
    981c:	d50c      	bpl.n	9838 <_http_client_send_wait+0x5c>
    981e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9820:	2b02      	cmp	r3, #2
    9822:	d8f5      	bhi.n	9810 <_http_client_send_wait+0x34>
	return 0;
    9824:	2000      	movs	r0, #0
    9826:	e008      	b.n	983a <_http_client_send_wait+0x5e>
		module->sending = 0;
    9828:	2241      	movs	r2, #65	; 0x41
    982a:	5ca3      	ldrb	r3, [r4, r2]
    982c:	2101      	movs	r1, #1
    982e:	438b      	bics	r3, r1
    9830:	54a3      	strb	r3, [r4, r2]
		return result;
    9832:	e002      	b.n	983a <_http_client_send_wait+0x5e>
	return 0;
    9834:	2000      	movs	r0, #0
    9836:	e000      	b.n	983a <_http_client_send_wait+0x5e>
    9838:	2000      	movs	r0, #0
}
    983a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    983c:	00003bfd 	.word	0x00003bfd
    9840:	00002315 	.word	0x00002315
    9844:	0000a269 	.word	0x0000a269

00009848 <http_client_get_config_defaults>:
	config->port = 80;
    9848:	2350      	movs	r3, #80	; 0x50
    984a:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    984c:	2300      	movs	r3, #0
    984e:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    9850:	4a05      	ldr	r2, [pc, #20]	; (9868 <http_client_get_config_defaults+0x20>)
    9852:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    9854:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    9856:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    9858:	3301      	adds	r3, #1
    985a:	33ff      	adds	r3, #255	; 0xff
    985c:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    985e:	3bae      	subs	r3, #174	; 0xae
    9860:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    9862:	4b02      	ldr	r3, [pc, #8]	; (986c <http_client_get_config_defaults+0x24>)
    9864:	6183      	str	r3, [r0, #24]
}
    9866:	4770      	bx	lr
    9868:	00004e20 	.word	0x00004e20
    986c:	0000e488 	.word	0x0000e488

00009870 <http_client_init>:
{
    9870:	b570      	push	{r4, r5, r6, lr}
    9872:	0004      	movs	r4, r0
    9874:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    9876:	2800      	cmp	r0, #0
    9878:	d038      	beq.n	98ec <http_client_init+0x7c>
    987a:	2900      	cmp	r1, #0
    987c:	d039      	beq.n	98f2 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    987e:	690b      	ldr	r3, [r1, #16]
    9880:	2b00      	cmp	r3, #0
    9882:	d039      	beq.n	98f8 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    9884:	684b      	ldr	r3, [r1, #4]
    9886:	2b00      	cmp	r3, #0
    9888:	d039      	beq.n	98fe <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    988a:	694b      	ldr	r3, [r1, #20]
    988c:	2b51      	cmp	r3, #81	; 0x51
    988e:	d939      	bls.n	9904 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    9890:	22e8      	movs	r2, #232	; 0xe8
    9892:	2100      	movs	r1, #0
    9894:	4b1e      	ldr	r3, [pc, #120]	; (9910 <http_client_init+0xa0>)
    9896:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    9898:	0020      	movs	r0, r4
    989a:	3050      	adds	r0, #80	; 0x50
    989c:	221c      	movs	r2, #28
    989e:	0029      	movs	r1, r5
    98a0:	4b1c      	ldr	r3, [pc, #112]	; (9914 <http_client_init+0xa4>)
    98a2:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    98a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    98a6:	2b00      	cmp	r3, #0
    98a8:	d008      	beq.n	98bc <http_client_init+0x4c>
	if (config->timeout > 0) {
    98aa:	892b      	ldrh	r3, [r5, #8]
    98ac:	2b00      	cmp	r3, #0
    98ae:	d111      	bne.n	98d4 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    98b0:	2300      	movs	r3, #0
    98b2:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    98b4:	22d8      	movs	r2, #216	; 0xd8
    98b6:	50a3      	str	r3, [r4, r2]
	return 0;
    98b8:	2000      	movs	r0, #0
}
    98ba:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    98bc:	6928      	ldr	r0, [r5, #16]
    98be:	4b16      	ldr	r3, [pc, #88]	; (9918 <http_client_init+0xa8>)
    98c0:	4798      	blx	r3
    98c2:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    98c4:	2800      	cmp	r0, #0
    98c6:	d020      	beq.n	990a <http_client_init+0x9a>
		module->alloc_buffer = 1;
    98c8:	2241      	movs	r2, #65	; 0x41
    98ca:	5ca3      	ldrb	r3, [r4, r2]
    98cc:	2104      	movs	r1, #4
    98ce:	430b      	orrs	r3, r1
    98d0:	54a3      	strb	r3, [r4, r2]
    98d2:	e7ea      	b.n	98aa <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    98d4:	6868      	ldr	r0, [r5, #4]
    98d6:	2300      	movs	r3, #0
    98d8:	0022      	movs	r2, r4
    98da:	4910      	ldr	r1, [pc, #64]	; (991c <http_client_init+0xac>)
    98dc:	4d10      	ldr	r5, [pc, #64]	; (9920 <http_client_init+0xb0>)
    98de:	47a8      	blx	r5
    98e0:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    98e2:	2800      	cmp	r0, #0
    98e4:	dae4      	bge.n	98b0 <http_client_init+0x40>
			return -ENOSPC;
    98e6:	201c      	movs	r0, #28
    98e8:	4240      	negs	r0, r0
    98ea:	e7e6      	b.n	98ba <http_client_init+0x4a>
		return -EINVAL;
    98ec:	2016      	movs	r0, #22
    98ee:	4240      	negs	r0, r0
    98f0:	e7e3      	b.n	98ba <http_client_init+0x4a>
    98f2:	2016      	movs	r0, #22
    98f4:	4240      	negs	r0, r0
    98f6:	e7e0      	b.n	98ba <http_client_init+0x4a>
		return -EINVAL;
    98f8:	2016      	movs	r0, #22
    98fa:	4240      	negs	r0, r0
    98fc:	e7dd      	b.n	98ba <http_client_init+0x4a>
		return -EINVAL;
    98fe:	2016      	movs	r0, #22
    9900:	4240      	negs	r0, r0
    9902:	e7da      	b.n	98ba <http_client_init+0x4a>
		return -EINVAL;
    9904:	2016      	movs	r0, #22
    9906:	4240      	negs	r0, r0
    9908:	e7d7      	b.n	98ba <http_client_init+0x4a>
			return -ENOMEM;
    990a:	200c      	movs	r0, #12
    990c:	4240      	negs	r0, r0
    990e:	e7d4      	b.n	98ba <http_client_init+0x4a>
    9910:	0000b617 	.word	0x0000b617
    9914:	0000b5e1 	.word	0x0000b5e1
    9918:	0000b5b9 	.word	0x0000b5b9
    991c:	000099bd 	.word	0x000099bd
    9920:	0000a231 	.word	0x0000a231

00009924 <http_client_register_callback>:
	if (module == NULL) {
    9924:	2800      	cmp	r0, #0
    9926:	d002      	beq.n	992e <http_client_register_callback+0xa>
	module->cb = callback;
    9928:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    992a:	2000      	movs	r0, #0
}
    992c:	4770      	bx	lr
		return -EINVAL;
    992e:	2016      	movs	r0, #22
    9930:	4240      	negs	r0, r0
    9932:	e7fb      	b.n	992c <http_client_register_callback+0x8>

00009934 <_http_client_clear_conn>:
{
    9934:	b5f0      	push	{r4, r5, r6, r7, lr}
    9936:	b085      	sub	sp, #20
    9938:	0004      	movs	r4, r0
    993a:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    993c:	23c0      	movs	r3, #192	; 0xc0
    993e:	58c3      	ldr	r3, [r0, r3]
    9940:	2b00      	cmp	r3, #0
    9942:	d002      	beq.n	994a <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    9944:	22c4      	movs	r2, #196	; 0xc4
    9946:	5880      	ldr	r0, [r0, r2]
    9948:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    994a:	0020      	movs	r0, r4
    994c:	30b0      	adds	r0, #176	; 0xb0
    994e:	2218      	movs	r2, #24
    9950:	2100      	movs	r1, #0
    9952:	4b17      	ldr	r3, [pc, #92]	; (99b0 <_http_client_clear_conn+0x7c>)
    9954:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    9956:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9958:	2b00      	cmp	r3, #0
    995a:	d124      	bne.n	99a6 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    995c:	2300      	movs	r3, #0
    995e:	56e3      	ldrsb	r3, [r4, r3]
    9960:	009b      	lsls	r3, r3, #2
    9962:	2500      	movs	r5, #0
    9964:	4a13      	ldr	r2, [pc, #76]	; (99b4 <_http_client_clear_conn+0x80>)
    9966:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    9968:	0020      	movs	r0, r4
    996a:	306c      	adds	r0, #108	; 0x6c
    996c:	226c      	movs	r2, #108	; 0x6c
    996e:	2100      	movs	r1, #0
    9970:	4f0f      	ldr	r7, [pc, #60]	; (99b0 <_http_client_clear_conn+0x7c>)
    9972:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    9974:	0020      	movs	r0, r4
    9976:	30d8      	adds	r0, #216	; 0xd8
    9978:	2210      	movs	r2, #16
    997a:	2100      	movs	r1, #0
    997c:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    997e:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    9980:	23d8      	movs	r3, #216	; 0xd8
    9982:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    9984:	2241      	movs	r2, #65	; 0x41
    9986:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    9988:	2101      	movs	r1, #1
    998a:	438b      	bics	r3, r1
    998c:	3101      	adds	r1, #1
    998e:	438b      	bics	r3, r1
    9990:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    9992:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    9994:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9996:	2b00      	cmp	r3, #0
    9998:	d003      	beq.n	99a2 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    999a:	aa01      	add	r2, sp, #4
    999c:	3102      	adds	r1, #2
    999e:	0020      	movs	r0, r4
    99a0:	4798      	blx	r3
}
    99a2:	b005      	add	sp, #20
    99a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    99a6:	2000      	movs	r0, #0
    99a8:	5620      	ldrsb	r0, [r4, r0]
    99aa:	4b03      	ldr	r3, [pc, #12]	; (99b8 <_http_client_clear_conn+0x84>)
    99ac:	4798      	blx	r3
    99ae:	e7d5      	b.n	995c <_http_client_clear_conn+0x28>
    99b0:	0000b617 	.word	0x0000b617
    99b4:	200007e0 	.word	0x200007e0
    99b8:	00003d29 	.word	0x00003d29

000099bc <http_client_timer_callback>:
{
    99bc:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    99be:	2a00      	cmp	r2, #0
    99c0:	d004      	beq.n	99cc <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    99c2:	213e      	movs	r1, #62	; 0x3e
    99c4:	4249      	negs	r1, r1
    99c6:	0010      	movs	r0, r2
    99c8:	4b01      	ldr	r3, [pc, #4]	; (99d0 <http_client_timer_callback+0x14>)
    99ca:	4798      	blx	r3
}
    99cc:	bd10      	pop	{r4, pc}
    99ce:	46c0      	nop			; (mov r8, r8)
    99d0:	00009935 	.word	0x00009935

000099d4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    99d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99d6:	46de      	mov	lr, fp
    99d8:	4657      	mov	r7, sl
    99da:	b580      	push	{r7, lr}
    99dc:	b095      	sub	sp, #84	; 0x54
    99de:	af02      	add	r7, sp, #8
    99e0:	0004      	movs	r4, r0
    99e2:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    99e4:	2310      	movs	r3, #16
    99e6:	2208      	movs	r2, #8
    99e8:	18ba      	adds	r2, r7, r2
    99ea:	18d2      	adds	r2, r2, r3
    99ec:	4bb1      	ldr	r3, [pc, #708]	; (9cb4 <_http_client_request+0x2e0>)
    99ee:	cb23      	ldmia	r3!, {r0, r1, r5}
    99f0:	c223      	stmia	r2!, {r0, r1, r5}
    99f2:	681b      	ldr	r3, [r3, #0]
    99f4:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    99f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    99f8:	1dd3      	adds	r3, r2, #7
    99fa:	08db      	lsrs	r3, r3, #3
    99fc:	00db      	lsls	r3, r3, #3
    99fe:	4669      	mov	r1, sp
    9a00:	1acb      	subs	r3, r1, r3
    9a02:	469d      	mov	sp, r3
    9a04:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    9a06:	2c00      	cmp	r4, #0
    9a08:	d100      	bne.n	9a0c <_http_client_request+0x38>
    9a0a:	e1f0      	b.n	9dee <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    9a0c:	2341      	movs	r3, #65	; 0x41
    9a0e:	5ce3      	ldrb	r3, [r4, r3]
    9a10:	07db      	lsls	r3, r3, #31
    9a12:	d500      	bpl.n	9a16 <_http_client_request+0x42>
    9a14:	e1eb      	b.n	9dee <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    9a16:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9a18:	2b03      	cmp	r3, #3
    9a1a:	d004      	beq.n	9a26 <_http_client_request+0x52>
    9a1c:	2b04      	cmp	r3, #4
    9a1e:	d100      	bne.n	9a22 <_http_client_request+0x4e>
    9a20:	e120      	b.n	9c64 <_http_client_request+0x290>
    9a22:	46dd      	mov	sp, fp
    9a24:	e1e4      	b.n	9df0 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    9a26:	2300      	movs	r3, #0
    9a28:	21cc      	movs	r1, #204	; 0xcc
    9a2a:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    9a2c:	3104      	adds	r1, #4
    9a2e:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    9a30:	9400      	str	r4, [sp, #0]
    9a32:	4ba1      	ldr	r3, [pc, #644]	; (9cb8 <_http_client_request+0x2e4>)
    9a34:	0031      	movs	r1, r6
    9a36:	202c      	movs	r0, #44	; 0x2c
    9a38:	2508      	movs	r5, #8
    9a3a:	46ac      	mov	ip, r5
    9a3c:	44bc      	add	ip, r7
    9a3e:	4460      	add	r0, ip
    9a40:	4d9e      	ldr	r5, [pc, #632]	; (9cbc <_http_client_request+0x2e8>)
    9a42:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    9a44:	23c8      	movs	r3, #200	; 0xc8
    9a46:	5ce3      	ldrb	r3, [r4, r3]
    9a48:	2b01      	cmp	r3, #1
    9a4a:	d100      	bne.n	9a4e <_http_client_request+0x7a>
    9a4c:	e0a9      	b.n	9ba2 <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    9a4e:	2b02      	cmp	r3, #2
    9a50:	d100      	bne.n	9a54 <_http_client_request+0x80>
    9a52:	e0af      	b.n	9bb4 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    9a54:	2b03      	cmp	r3, #3
    9a56:	d100      	bne.n	9a5a <_http_client_request+0x86>
    9a58:	e0b5      	b.n	9bc6 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    9a5a:	2b04      	cmp	r3, #4
    9a5c:	d100      	bne.n	9a60 <_http_client_request+0x8c>
    9a5e:	e0bb      	b.n	9bd8 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    9a60:	2b05      	cmp	r3, #5
    9a62:	d100      	bne.n	9a66 <_http_client_request+0x92>
    9a64:	e0c1      	b.n	9bea <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    9a66:	2b06      	cmp	r3, #6
    9a68:	d100      	bne.n	9a6c <_http_client_request+0x98>
    9a6a:	e0c7      	b.n	9bfc <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    9a6c:	0025      	movs	r5, r4
    9a6e:	3570      	adds	r5, #112	; 0x70
    9a70:	0028      	movs	r0, r5
    9a72:	4b93      	ldr	r3, [pc, #588]	; (9cc0 <_http_client_request+0x2ec>)
    9a74:	469a      	mov	sl, r3
    9a76:	4798      	blx	r3
    9a78:	0002      	movs	r2, r0
    9a7a:	0029      	movs	r1, r5
    9a7c:	232c      	movs	r3, #44	; 0x2c
    9a7e:	2008      	movs	r0, #8
    9a80:	1838      	adds	r0, r7, r0
    9a82:	18c0      	adds	r0, r0, r3
    9a84:	4d8f      	ldr	r5, [pc, #572]	; (9cc4 <_http_client_request+0x2f0>)
    9a86:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    9a88:	220b      	movs	r2, #11
    9a8a:	498f      	ldr	r1, [pc, #572]	; (9cc8 <_http_client_request+0x2f4>)
    9a8c:	232c      	movs	r3, #44	; 0x2c
    9a8e:	2008      	movs	r0, #8
    9a90:	1838      	adds	r0, r7, r0
    9a92:	18c0      	adds	r0, r0, r3
    9a94:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    9a96:	220c      	movs	r2, #12
    9a98:	498c      	ldr	r1, [pc, #560]	; (9ccc <_http_client_request+0x2f8>)
    9a9a:	232c      	movs	r3, #44	; 0x2c
    9a9c:	2008      	movs	r0, #8
    9a9e:	1838      	adds	r0, r7, r0
    9aa0:	18c0      	adds	r0, r0, r3
    9aa2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    9aa4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    9aa6:	607b      	str	r3, [r7, #4]
    9aa8:	0018      	movs	r0, r3
    9aaa:	47d0      	blx	sl
    9aac:	0002      	movs	r2, r0
    9aae:	6879      	ldr	r1, [r7, #4]
    9ab0:	232c      	movs	r3, #44	; 0x2c
    9ab2:	2008      	movs	r0, #8
    9ab4:	1838      	adds	r0, r7, r0
    9ab6:	18c0      	adds	r0, r0, r3
    9ab8:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9aba:	2202      	movs	r2, #2
    9abc:	4984      	ldr	r1, [pc, #528]	; (9cd0 <_http_client_request+0x2fc>)
    9abe:	232c      	movs	r3, #44	; 0x2c
    9ac0:	2008      	movs	r0, #8
    9ac2:	1838      	adds	r0, r7, r0
    9ac4:	18c0      	adds	r0, r0, r3
    9ac6:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    9ac8:	2206      	movs	r2, #6
    9aca:	4982      	ldr	r1, [pc, #520]	; (9cd4 <_http_client_request+0x300>)
    9acc:	232c      	movs	r3, #44	; 0x2c
    9ace:	2008      	movs	r0, #8
    9ad0:	1838      	adds	r0, r7, r0
    9ad2:	18c0      	adds	r0, r0, r3
    9ad4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    9ad6:	1c63      	adds	r3, r4, #1
    9ad8:	607b      	str	r3, [r7, #4]
    9ada:	0018      	movs	r0, r3
    9adc:	47d0      	blx	sl
    9ade:	0002      	movs	r2, r0
    9ae0:	6879      	ldr	r1, [r7, #4]
    9ae2:	232c      	movs	r3, #44	; 0x2c
    9ae4:	2008      	movs	r0, #8
    9ae6:	1838      	adds	r0, r7, r0
    9ae8:	18c0      	adds	r0, r0, r3
    9aea:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9aec:	2202      	movs	r2, #2
    9aee:	4978      	ldr	r1, [pc, #480]	; (9cd0 <_http_client_request+0x2fc>)
    9af0:	232c      	movs	r3, #44	; 0x2c
    9af2:	2008      	movs	r0, #8
    9af4:	1838      	adds	r0, r7, r0
    9af6:	18c0      	adds	r0, r0, r3
    9af8:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    9afa:	2218      	movs	r2, #24
    9afc:	4976      	ldr	r1, [pc, #472]	; (9cd8 <_http_client_request+0x304>)
    9afe:	232c      	movs	r3, #44	; 0x2c
    9b00:	2008      	movs	r0, #8
    9b02:	1838      	adds	r0, r7, r0
    9b04:	18c0      	adds	r0, r0, r3
    9b06:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    9b08:	2213      	movs	r2, #19
    9b0a:	4974      	ldr	r1, [pc, #464]	; (9cdc <_http_client_request+0x308>)
    9b0c:	232c      	movs	r3, #44	; 0x2c
    9b0e:	2008      	movs	r0, #8
    9b10:	1838      	adds	r0, r7, r0
    9b12:	18c0      	adds	r0, r0, r3
    9b14:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    9b16:	2217      	movs	r2, #23
    9b18:	4971      	ldr	r1, [pc, #452]	; (9ce0 <_http_client_request+0x30c>)
    9b1a:	232c      	movs	r3, #44	; 0x2c
    9b1c:	2008      	movs	r0, #8
    9b1e:	1838      	adds	r0, r7, r0
    9b20:	18c0      	adds	r0, r0, r3
    9b22:	47a8      	blx	r5

		if (entity->read != NULL) {
    9b24:	0023      	movs	r3, r4
    9b26:	33b0      	adds	r3, #176	; 0xb0
    9b28:	68db      	ldr	r3, [r3, #12]
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d07b      	beq.n	9c26 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    9b2e:	23b0      	movs	r3, #176	; 0xb0
    9b30:	5ce3      	ldrb	r3, [r4, r3]
    9b32:	2b00      	cmp	r3, #0
    9b34:	d16b      	bne.n	9c0e <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    9b36:	0023      	movs	r3, r4
    9b38:	33b0      	adds	r3, #176	; 0xb0
    9b3a:	689b      	ldr	r3, [r3, #8]
    9b3c:	2b00      	cmp	r3, #0
    9b3e:	d072      	beq.n	9c26 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    9b40:	0022      	movs	r2, r4
    9b42:	32b0      	adds	r2, #176	; 0xb0
    9b44:	6950      	ldr	r0, [r2, #20]
    9b46:	4798      	blx	r3
    9b48:	23cc      	movs	r3, #204	; 0xcc
    9b4a:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    9b4c:	2800      	cmp	r0, #0
    9b4e:	da00      	bge.n	9b52 <_http_client_request+0x17e>
    9b50:	e0ac      	b.n	9cac <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    9b52:	0002      	movs	r2, r0
    9b54:	4963      	ldr	r1, [pc, #396]	; (9ce4 <_http_client_request+0x310>)
    9b56:	2320      	movs	r3, #32
    9b58:	2008      	movs	r0, #8
    9b5a:	1838      	adds	r0, r7, r0
    9b5c:	18c0      	adds	r0, r0, r3
    9b5e:	4b62      	ldr	r3, [pc, #392]	; (9ce8 <_http_client_request+0x314>)
    9b60:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    9b62:	2210      	movs	r2, #16
    9b64:	4961      	ldr	r1, [pc, #388]	; (9cec <_http_client_request+0x318>)
    9b66:	232c      	movs	r3, #44	; 0x2c
    9b68:	2008      	movs	r0, #8
    9b6a:	1838      	adds	r0, r7, r0
    9b6c:	18c0      	adds	r0, r0, r3
    9b6e:	4d55      	ldr	r5, [pc, #340]	; (9cc4 <_http_client_request+0x2f0>)
    9b70:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    9b72:	2320      	movs	r3, #32
    9b74:	2208      	movs	r2, #8
    9b76:	18ba      	adds	r2, r7, r2
    9b78:	18d0      	adds	r0, r2, r3
    9b7a:	4b51      	ldr	r3, [pc, #324]	; (9cc0 <_http_client_request+0x2ec>)
    9b7c:	4798      	blx	r3
    9b7e:	0002      	movs	r2, r0
    9b80:	2320      	movs	r3, #32
    9b82:	2108      	movs	r1, #8
    9b84:	1879      	adds	r1, r7, r1
    9b86:	18c9      	adds	r1, r1, r3
    9b88:	330c      	adds	r3, #12
    9b8a:	2008      	movs	r0, #8
    9b8c:	1838      	adds	r0, r7, r0
    9b8e:	18c0      	adds	r0, r0, r3
    9b90:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9b92:	2202      	movs	r2, #2
    9b94:	494e      	ldr	r1, [pc, #312]	; (9cd0 <_http_client_request+0x2fc>)
    9b96:	232c      	movs	r3, #44	; 0x2c
    9b98:	2008      	movs	r0, #8
    9b9a:	1838      	adds	r0, r7, r0
    9b9c:	18c0      	adds	r0, r0, r3
    9b9e:	47a8      	blx	r5
    9ba0:	e041      	b.n	9c26 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    9ba2:	2204      	movs	r2, #4
    9ba4:	4952      	ldr	r1, [pc, #328]	; (9cf0 <_http_client_request+0x31c>)
    9ba6:	332b      	adds	r3, #43	; 0x2b
    9ba8:	2008      	movs	r0, #8
    9baa:	1838      	adds	r0, r7, r0
    9bac:	18c0      	adds	r0, r0, r3
    9bae:	4b45      	ldr	r3, [pc, #276]	; (9cc4 <_http_client_request+0x2f0>)
    9bb0:	4798      	blx	r3
    9bb2:	e75b      	b.n	9a6c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    9bb4:	2205      	movs	r2, #5
    9bb6:	494f      	ldr	r1, [pc, #316]	; (9cf4 <_http_client_request+0x320>)
    9bb8:	332a      	adds	r3, #42	; 0x2a
    9bba:	2008      	movs	r0, #8
    9bbc:	1838      	adds	r0, r7, r0
    9bbe:	18c0      	adds	r0, r0, r3
    9bc0:	4b40      	ldr	r3, [pc, #256]	; (9cc4 <_http_client_request+0x2f0>)
    9bc2:	4798      	blx	r3
    9bc4:	e752      	b.n	9a6c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    9bc6:	2207      	movs	r2, #7
    9bc8:	494b      	ldr	r1, [pc, #300]	; (9cf8 <_http_client_request+0x324>)
    9bca:	3329      	adds	r3, #41	; 0x29
    9bcc:	2008      	movs	r0, #8
    9bce:	1838      	adds	r0, r7, r0
    9bd0:	18c0      	adds	r0, r0, r3
    9bd2:	4b3c      	ldr	r3, [pc, #240]	; (9cc4 <_http_client_request+0x2f0>)
    9bd4:	4798      	blx	r3
    9bd6:	e749      	b.n	9a6c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    9bd8:	2204      	movs	r2, #4
    9bda:	4948      	ldr	r1, [pc, #288]	; (9cfc <_http_client_request+0x328>)
    9bdc:	3328      	adds	r3, #40	; 0x28
    9bde:	2008      	movs	r0, #8
    9be0:	1838      	adds	r0, r7, r0
    9be2:	18c0      	adds	r0, r0, r3
    9be4:	4b37      	ldr	r3, [pc, #220]	; (9cc4 <_http_client_request+0x2f0>)
    9be6:	4798      	blx	r3
    9be8:	e740      	b.n	9a6c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    9bea:	2208      	movs	r2, #8
    9bec:	4944      	ldr	r1, [pc, #272]	; (9d00 <_http_client_request+0x32c>)
    9bee:	3327      	adds	r3, #39	; 0x27
    9bf0:	2008      	movs	r0, #8
    9bf2:	1838      	adds	r0, r7, r0
    9bf4:	18c0      	adds	r0, r0, r3
    9bf6:	4b33      	ldr	r3, [pc, #204]	; (9cc4 <_http_client_request+0x2f0>)
    9bf8:	4798      	blx	r3
    9bfa:	e737      	b.n	9a6c <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    9bfc:	2205      	movs	r2, #5
    9bfe:	4941      	ldr	r1, [pc, #260]	; (9d04 <_http_client_request+0x330>)
    9c00:	3326      	adds	r3, #38	; 0x26
    9c02:	2008      	movs	r0, #8
    9c04:	1838      	adds	r0, r7, r0
    9c06:	18c0      	adds	r0, r0, r3
    9c08:	4b2e      	ldr	r3, [pc, #184]	; (9cc4 <_http_client_request+0x2f0>)
    9c0a:	4798      	blx	r3
    9c0c:	e72e      	b.n	9a6c <_http_client_request+0x98>
				module->req.content_length = -1;
    9c0e:	2201      	movs	r2, #1
    9c10:	4252      	negs	r2, r2
    9c12:	23cc      	movs	r3, #204	; 0xcc
    9c14:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    9c16:	321d      	adds	r2, #29
    9c18:	493b      	ldr	r1, [pc, #236]	; (9d08 <_http_client_request+0x334>)
    9c1a:	3ba0      	subs	r3, #160	; 0xa0
    9c1c:	2008      	movs	r0, #8
    9c1e:	1838      	adds	r0, r7, r0
    9c20:	18c0      	adds	r0, r0, r3
    9c22:	4b28      	ldr	r3, [pc, #160]	; (9cc4 <_http_client_request+0x2f0>)
    9c24:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    9c26:	23d4      	movs	r3, #212	; 0xd4
    9c28:	58e5      	ldr	r5, [r4, r3]
    9c2a:	2d00      	cmp	r5, #0
    9c2c:	d00a      	beq.n	9c44 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    9c2e:	0028      	movs	r0, r5
    9c30:	4b23      	ldr	r3, [pc, #140]	; (9cc0 <_http_client_request+0x2ec>)
    9c32:	4798      	blx	r3
    9c34:	0002      	movs	r2, r0
    9c36:	0029      	movs	r1, r5
    9c38:	232c      	movs	r3, #44	; 0x2c
    9c3a:	2008      	movs	r0, #8
    9c3c:	1838      	adds	r0, r7, r0
    9c3e:	18c0      	adds	r0, r0, r3
    9c40:	4b20      	ldr	r3, [pc, #128]	; (9cc4 <_http_client_request+0x2f0>)
    9c42:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9c44:	2202      	movs	r2, #2
    9c46:	4922      	ldr	r1, [pc, #136]	; (9cd0 <_http_client_request+0x2fc>)
    9c48:	232c      	movs	r3, #44	; 0x2c
    9c4a:	2008      	movs	r0, #8
    9c4c:	1838      	adds	r0, r7, r0
    9c4e:	18c0      	adds	r0, r0, r3
    9c50:	4b1c      	ldr	r3, [pc, #112]	; (9cc4 <_http_client_request+0x2f0>)
    9c52:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    9c54:	232c      	movs	r3, #44	; 0x2c
    9c56:	2208      	movs	r2, #8
    9c58:	18ba      	adds	r2, r7, r2
    9c5a:	18d0      	adds	r0, r2, r3
    9c5c:	4b2b      	ldr	r3, [pc, #172]	; (9d0c <_http_client_request+0x338>)
    9c5e:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    9c60:	2304      	movs	r3, #4
    9c62:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    9c64:	23cc      	movs	r3, #204	; 0xcc
    9c66:	58e2      	ldr	r2, [r4, r3]
    9c68:	2a00      	cmp	r2, #0
    9c6a:	db51      	blt.n	9d10 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    9c6c:	dc00      	bgt.n	9c70 <_http_client_request+0x29c>
    9c6e:	e0f0      	b.n	9e52 <_http_client_request+0x47e>
    9c70:	0023      	movs	r3, r4
    9c72:	33b0      	adds	r3, #176	; 0xb0
    9c74:	68dd      	ldr	r5, [r3, #12]
    9c76:	2d00      	cmp	r5, #0
    9c78:	d100      	bne.n	9c7c <_http_client_request+0x2a8>
    9c7a:	e0ea      	b.n	9e52 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    9c7c:	23d0      	movs	r3, #208	; 0xd0
    9c7e:	58e3      	ldr	r3, [r4, r3]
    9c80:	429a      	cmp	r2, r3
    9c82:	dd00      	ble.n	9c86 <_http_client_request+0x2b2>
    9c84:	e0ba      	b.n	9dfc <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    9c86:	23c0      	movs	r3, #192	; 0xc0
    9c88:	58e3      	ldr	r3, [r4, r3]
    9c8a:	2b00      	cmp	r3, #0
    9c8c:	d002      	beq.n	9c94 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    9c8e:	22c4      	movs	r2, #196	; 0xc4
    9c90:	58a0      	ldr	r0, [r4, r2]
    9c92:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    9c94:	2302      	movs	r3, #2
    9c96:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    9c98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9c9a:	2b00      	cmp	r3, #0
    9c9c:	d100      	bne.n	9ca0 <_http_client_request+0x2cc>
    9c9e:	e6c0      	b.n	9a22 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9ca0:	220c      	movs	r2, #12
    9ca2:	18ba      	adds	r2, r7, r2
    9ca4:	2101      	movs	r1, #1
    9ca6:	0020      	movs	r0, r4
    9ca8:	4798      	blx	r3
    9caa:	e6ba      	b.n	9a22 <_http_client_request+0x4e>
					module->req.content_length = 0;
    9cac:	2200      	movs	r2, #0
    9cae:	50e2      	str	r2, [r4, r3]
    9cb0:	e7b9      	b.n	9c26 <_http_client_request+0x252>
    9cb2:	46c0      	nop			; (mov r8, r8)
    9cb4:	0000e3a0 	.word	0x0000e3a0
    9cb8:	000097dd 	.word	0x000097dd
    9cbc:	0000a0dd 	.word	0x0000a0dd
    9cc0:	0000bac7 	.word	0x0000bac7
    9cc4:	0000a131 	.word	0x0000a131
    9cc8:	0000e3e4 	.word	0x0000e3e4
    9ccc:	0000e3f0 	.word	0x0000e3f0
    9cd0:	0000e934 	.word	0x0000e934
    9cd4:	0000e400 	.word	0x0000e400
    9cd8:	0000e408 	.word	0x0000e408
    9cdc:	0000e424 	.word	0x0000e424
    9ce0:	0000e438 	.word	0x0000e438
    9ce4:	0000e470 	.word	0x0000e470
    9ce8:	0000ba39 	.word	0x0000ba39
    9cec:	0000e474 	.word	0x0000e474
    9cf0:	0000e3b0 	.word	0x0000e3b0
    9cf4:	0000e3b8 	.word	0x0000e3b8
    9cf8:	0000e3c0 	.word	0x0000e3c0
    9cfc:	0000e3c8 	.word	0x0000e3c8
    9d00:	0000e3d0 	.word	0x0000e3d0
    9d04:	0000e3dc 	.word	0x0000e3dc
    9d08:	0000e450 	.word	0x0000e450
    9d0c:	0000a0ed 	.word	0x0000a0ed
		if (module->req.content_length < 0 && entity->read) {
    9d10:	0023      	movs	r3, r4
    9d12:	33b0      	adds	r3, #176	; 0xb0
    9d14:	68dd      	ldr	r5, [r3, #12]
    9d16:	2d00      	cmp	r5, #0
    9d18:	d100      	bne.n	9d1c <_http_client_request+0x348>
    9d1a:	e09a      	b.n	9e52 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    9d1c:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    9d1e:	58e3      	ldr	r3, [r4, r3]
    9d20:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9d22:	3a07      	subs	r2, #7
    9d24:	1d71      	adds	r1, r6, #5
    9d26:	0020      	movs	r0, r4
    9d28:	30b0      	adds	r0, #176	; 0xb0
    9d2a:	6940      	ldr	r0, [r0, #20]
    9d2c:	47a8      	blx	r5
    9d2e:	0005      	movs	r5, r0
    9d30:	43c3      	mvns	r3, r0
    9d32:	17db      	asrs	r3, r3, #31
    9d34:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    9d36:	220a      	movs	r2, #10
    9d38:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    9d3a:	210d      	movs	r1, #13
    9d3c:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    9d3e:	1973      	adds	r3, r6, r5
    9d40:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    9d42:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    9d44:	230f      	movs	r3, #15
    9d46:	402b      	ands	r3, r5
    9d48:	3206      	adds	r2, #6
    9d4a:	3905      	subs	r1, #5
    9d4c:	468c      	mov	ip, r1
    9d4e:	44bc      	add	ip, r7
    9d50:	4462      	add	r2, ip
    9d52:	5cd3      	ldrb	r3, [r2, r3]
    9d54:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    9d56:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    9d58:	2d0f      	cmp	r5, #15
    9d5a:	dd0d      	ble.n	9d78 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    9d5c:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    9d5e:	17eb      	asrs	r3, r5, #31
    9d60:	220f      	movs	r2, #15
    9d62:	4013      	ands	r3, r2
    9d64:	195b      	adds	r3, r3, r5
    9d66:	111b      	asrs	r3, r3, #4
    9d68:	4013      	ands	r3, r2
    9d6a:	3201      	adds	r2, #1
    9d6c:	2008      	movs	r0, #8
    9d6e:	4684      	mov	ip, r0
    9d70:	44bc      	add	ip, r7
    9d72:	4462      	add	r2, ip
    9d74:	5cd3      	ldrb	r3, [r2, r3]
    9d76:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    9d78:	2dff      	cmp	r5, #255	; 0xff
    9d7a:	dd0d      	ble.n	9d98 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    9d7c:	17ea      	asrs	r2, r5, #31
    9d7e:	23ff      	movs	r3, #255	; 0xff
    9d80:	4013      	ands	r3, r2
    9d82:	195b      	adds	r3, r3, r5
    9d84:	051b      	lsls	r3, r3, #20
    9d86:	0f1b      	lsrs	r3, r3, #28
    9d88:	2210      	movs	r2, #16
    9d8a:	2108      	movs	r1, #8
    9d8c:	468c      	mov	ip, r1
    9d8e:	44bc      	add	ip, r7
    9d90:	4462      	add	r2, ip
    9d92:	5cd3      	ldrb	r3, [r2, r3]
    9d94:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    9d96:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    9d98:	1cca      	adds	r2, r1, #3
    9d9a:	1b92      	subs	r2, r2, r6
    9d9c:	1d2b      	adds	r3, r5, #4
    9d9e:	18d2      	adds	r2, r2, r3
    9da0:	b292      	uxth	r2, r2
    9da2:	2000      	movs	r0, #0
    9da4:	5620      	ldrsb	r0, [r4, r0]
    9da6:	2300      	movs	r3, #0
    9da8:	4e30      	ldr	r6, [pc, #192]	; (9e6c <_http_client_request+0x498>)
    9daa:	47b0      	blx	r6
    9dac:	2800      	cmp	r0, #0
    9dae:	db19      	blt.n	9de4 <_http_client_request+0x410>
			module->req.sent_length += size;
    9db0:	22d0      	movs	r2, #208	; 0xd0
    9db2:	58a3      	ldr	r3, [r4, r2]
    9db4:	195b      	adds	r3, r3, r5
    9db6:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    9db8:	2d00      	cmp	r5, #0
    9dba:	d000      	beq.n	9dbe <_http_client_request+0x3ea>
    9dbc:	e631      	b.n	9a22 <_http_client_request+0x4e>
				if (module->req.entity.close) {
    9dbe:	23c0      	movs	r3, #192	; 0xc0
    9dc0:	58e3      	ldr	r3, [r4, r3]
    9dc2:	2b00      	cmp	r3, #0
    9dc4:	d002      	beq.n	9dcc <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    9dc6:	3a0c      	subs	r2, #12
    9dc8:	58a0      	ldr	r0, [r4, r2]
    9dca:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    9dcc:	2302      	movs	r3, #2
    9dce:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    9dd0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9dd2:	2b00      	cmp	r3, #0
    9dd4:	d100      	bne.n	9dd8 <_http_client_request+0x404>
    9dd6:	e624      	b.n	9a22 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9dd8:	220c      	movs	r2, #12
    9dda:	18ba      	adds	r2, r7, r2
    9ddc:	2101      	movs	r1, #1
    9dde:	0020      	movs	r0, r4
    9de0:	4798      	blx	r3
    9de2:	e61e      	b.n	9a22 <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    9de4:	2105      	movs	r1, #5
    9de6:	4249      	negs	r1, r1
    9de8:	0020      	movs	r0, r4
    9dea:	4b21      	ldr	r3, [pc, #132]	; (9e70 <_http_client_request+0x49c>)
    9dec:	4798      	blx	r3
    9dee:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    9df0:	46bd      	mov	sp, r7
    9df2:	b013      	add	sp, #76	; 0x4c
    9df4:	bc0c      	pop	{r2, r3}
    9df6:	4692      	mov	sl, r2
    9df8:	469b      	mov	fp, r3
    9dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    9dfc:	0022      	movs	r2, r4
    9dfe:	32b0      	adds	r2, #176	; 0xb0
    9e00:	6950      	ldr	r0, [r2, #20]
    9e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9e04:	0031      	movs	r1, r6
    9e06:	47a8      	blx	r5
			if (size < 0) {
    9e08:	2800      	cmp	r0, #0
    9e0a:	db16      	blt.n	9e3a <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    9e0c:	23cc      	movs	r3, #204	; 0xcc
    9e0e:	58e5      	ldr	r5, [r4, r3]
    9e10:	3304      	adds	r3, #4
    9e12:	58e3      	ldr	r3, [r4, r3]
    9e14:	1aed      	subs	r5, r5, r3
    9e16:	4285      	cmp	r5, r0
    9e18:	dd00      	ble.n	9e1c <_http_client_request+0x448>
    9e1a:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    9e1c:	b2aa      	uxth	r2, r5
    9e1e:	2000      	movs	r0, #0
    9e20:	5620      	ldrsb	r0, [r4, r0]
    9e22:	2300      	movs	r3, #0
    9e24:	0031      	movs	r1, r6
    9e26:	4e11      	ldr	r6, [pc, #68]	; (9e6c <_http_client_request+0x498>)
    9e28:	47b0      	blx	r6
    9e2a:	2800      	cmp	r0, #0
    9e2c:	db0b      	blt.n	9e46 <_http_client_request+0x472>
				module->req.sent_length += size;
    9e2e:	23d0      	movs	r3, #208	; 0xd0
    9e30:	58e2      	ldr	r2, [r4, r3]
    9e32:	4694      	mov	ip, r2
    9e34:	4465      	add	r5, ip
    9e36:	50e5      	str	r5, [r4, r3]
    9e38:	e5f3      	b.n	9a22 <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    9e3a:	2105      	movs	r1, #5
    9e3c:	4249      	negs	r1, r1
    9e3e:	0020      	movs	r0, r4
    9e40:	4b0b      	ldr	r3, [pc, #44]	; (9e70 <_http_client_request+0x49c>)
    9e42:	4798      	blx	r3
    9e44:	e5ed      	b.n	9a22 <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    9e46:	2105      	movs	r1, #5
    9e48:	4249      	negs	r1, r1
    9e4a:	0020      	movs	r0, r4
    9e4c:	4b08      	ldr	r3, [pc, #32]	; (9e70 <_http_client_request+0x49c>)
    9e4e:	4798      	blx	r3
					return;
    9e50:	e7cd      	b.n	9dee <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    9e52:	2302      	movs	r3, #2
    9e54:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    9e56:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9e58:	2b00      	cmp	r3, #0
    9e5a:	d100      	bne.n	9e5e <_http_client_request+0x48a>
    9e5c:	e5e1      	b.n	9a22 <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9e5e:	220c      	movs	r2, #12
    9e60:	18ba      	adds	r2, r7, r2
    9e62:	2101      	movs	r1, #1
    9e64:	0020      	movs	r0, r4
    9e66:	4798      	blx	r3
    9e68:	e5db      	b.n	9a22 <_http_client_request+0x4e>
    9e6a:	46c0      	nop			; (mov r8, r8)
    9e6c:	00003bfd 	.word	0x00003bfd
    9e70:	00009935 	.word	0x00009935

00009e74 <http_client_send_request>:
{
    9e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e76:	46d6      	mov	lr, sl
    9e78:	b500      	push	{lr}
    9e7a:	b088      	sub	sp, #32
    9e7c:	0004      	movs	r4, r0
    9e7e:	000f      	movs	r7, r1
    9e80:	4692      	mov	sl, r2
    9e82:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    9e84:	2800      	cmp	r0, #0
    9e86:	d100      	bne.n	9e8a <http_client_send_request+0x16>
    9e88:	e0d3      	b.n	a032 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    9e8a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    9e8c:	2b02      	cmp	r3, #2
    9e8e:	d900      	bls.n	9e92 <http_client_send_request+0x1e>
    9e90:	e0d3      	b.n	a03a <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    9e92:	2207      	movs	r2, #7
    9e94:	4981      	ldr	r1, [pc, #516]	; (a09c <http_client_send_request+0x228>)
    9e96:	0038      	movs	r0, r7
    9e98:	4b81      	ldr	r3, [pc, #516]	; (a0a0 <http_client_send_request+0x22c>)
    9e9a:	4798      	blx	r3
		i = 7;
    9e9c:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    9e9e:	2800      	cmp	r0, #0
    9ea0:	d007      	beq.n	9eb2 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    9ea2:	2208      	movs	r2, #8
    9ea4:	497f      	ldr	r1, [pc, #508]	; (a0a4 <http_client_send_request+0x230>)
    9ea6:	0038      	movs	r0, r7
    9ea8:	4b7d      	ldr	r3, [pc, #500]	; (a0a0 <http_client_send_request+0x22c>)
    9eaa:	4798      	blx	r3
		i = 8;
    9eac:	4246      	negs	r6, r0
    9eae:	4146      	adcs	r6, r0
    9eb0:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    9eb2:	1c63      	adds	r3, r4, #1
    9eb4:	19bd      	adds	r5, r7, r6
    9eb6:	9302      	str	r3, [sp, #8]
    9eb8:	0018      	movs	r0, r3
    9eba:	4b7b      	ldr	r3, [pc, #492]	; (a0a8 <http_client_send_request+0x234>)
    9ebc:	4798      	blx	r3
    9ebe:	0002      	movs	r2, r0
    9ec0:	0029      	movs	r1, r5
    9ec2:	9802      	ldr	r0, [sp, #8]
    9ec4:	4b76      	ldr	r3, [pc, #472]	; (a0a0 <http_client_send_request+0x22c>)
    9ec6:	4798      	blx	r3
    9ec8:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    9eca:	782b      	ldrb	r3, [r5, #0]
    9ecc:	2b00      	cmp	r3, #0
    9ece:	d052      	beq.n	9f76 <http_client_send_request+0x102>
    9ed0:	2b2f      	cmp	r3, #47	; 0x2f
    9ed2:	d052      	beq.n	9f7a <http_client_send_request+0x106>
    9ed4:	1c71      	adds	r1, r6, #1
    9ed6:	1879      	adds	r1, r7, r1
    9ed8:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    9eda:	3201      	adds	r2, #1
    9edc:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    9ede:	000d      	movs	r5, r1
    9ee0:	780b      	ldrb	r3, [r1, #0]
    9ee2:	2b00      	cmp	r3, #0
    9ee4:	d002      	beq.n	9eec <http_client_send_request+0x78>
    9ee6:	3101      	adds	r1, #1
    9ee8:	2b2f      	cmp	r3, #47	; 0x2f
    9eea:	d1f6      	bne.n	9eda <http_client_send_request+0x66>
	module->host[j] = '\0';
    9eec:	18a2      	adds	r2, r4, r2
    9eee:	2300      	movs	r3, #0
    9ef0:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    9ef2:	7863      	ldrb	r3, [r4, #1]
    9ef4:	2b00      	cmp	r3, #0
    9ef6:	d100      	bne.n	9efa <http_client_send_request+0x86>
    9ef8:	e0a3      	b.n	a042 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    9efa:	0028      	movs	r0, r5
    9efc:	4b6a      	ldr	r3, [pc, #424]	; (a0a8 <http_client_send_request+0x234>)
    9efe:	4798      	blx	r3
    9f00:	283f      	cmp	r0, #63	; 0x3f
    9f02:	d900      	bls.n	9f06 <http_client_send_request+0x92>
    9f04:	e0a1      	b.n	a04a <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    9f06:	23d4      	movs	r3, #212	; 0xd4
    9f08:	58e0      	ldr	r0, [r4, r3]
    9f0a:	2800      	cmp	r0, #0
    9f0c:	d001      	beq.n	9f12 <http_client_send_request+0x9e>
		free(module->req.ext_header);
    9f0e:	4b67      	ldr	r3, [pc, #412]	; (a0ac <http_client_send_request+0x238>)
    9f10:	4798      	blx	r3
	if (ext_header != NULL) {
    9f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9f14:	2b00      	cmp	r3, #0
    9f16:	d032      	beq.n	9f7e <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    9f18:	0018      	movs	r0, r3
    9f1a:	4b65      	ldr	r3, [pc, #404]	; (a0b0 <http_client_send_request+0x23c>)
    9f1c:	4798      	blx	r3
    9f1e:	23d4      	movs	r3, #212	; 0xd4
    9f20:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    9f22:	2800      	cmp	r0, #0
    9f24:	d100      	bne.n	9f28 <http_client_send_request+0xb4>
    9f26:	e094      	b.n	a052 <http_client_send_request+0x1de>
	module->sending = 0;
    9f28:	2241      	movs	r2, #65	; 0x41
    9f2a:	5ca3      	ldrb	r3, [r4, r2]
    9f2c:	2101      	movs	r1, #1
    9f2e:	438b      	bics	r3, r1
    9f30:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    9f32:	2300      	movs	r3, #0
    9f34:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    9f36:	782b      	ldrb	r3, [r5, #0]
    9f38:	2b2f      	cmp	r3, #47	; 0x2f
    9f3a:	d024      	beq.n	9f86 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    9f3c:	222f      	movs	r2, #47	; 0x2f
    9f3e:	2370      	movs	r3, #112	; 0x70
    9f40:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    9f42:	782b      	ldrb	r3, [r5, #0]
    9f44:	2b00      	cmp	r3, #0
    9f46:	d124      	bne.n	9f92 <http_client_send_request+0x11e>
	if (entity != NULL) {
    9f48:	9b03      	ldr	r3, [sp, #12]
    9f4a:	2b00      	cmp	r3, #0
    9f4c:	d027      	beq.n	9f9e <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    9f4e:	0020      	movs	r0, r4
    9f50:	30b0      	adds	r0, #176	; 0xb0
    9f52:	2218      	movs	r2, #24
    9f54:	0019      	movs	r1, r3
    9f56:	4b57      	ldr	r3, [pc, #348]	; (a0b4 <http_client_send_request+0x240>)
    9f58:	4798      	blx	r3
	module->req.method = method;
    9f5a:	23c8      	movs	r3, #200	; 0xc8
    9f5c:	4652      	mov	r2, sl
    9f5e:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    9f60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9f62:	2b01      	cmp	r3, #1
    9f64:	d022      	beq.n	9fac <http_client_send_request+0x138>
    9f66:	2b00      	cmp	r3, #0
    9f68:	d027      	beq.n	9fba <http_client_send_request+0x146>
    9f6a:	2b02      	cmp	r3, #2
    9f6c:	d03a      	beq.n	9fe4 <http_client_send_request+0x170>
		return -EAGAIN;
    9f6e:	230b      	movs	r3, #11
    9f70:	425b      	negs	r3, r3
    9f72:	9301      	str	r3, [sp, #4]
    9f74:	e08d      	b.n	a092 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    9f76:	2200      	movs	r2, #0
    9f78:	e7b8      	b.n	9eec <http_client_send_request+0x78>
    9f7a:	2200      	movs	r2, #0
    9f7c:	e7b6      	b.n	9eec <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    9f7e:	2200      	movs	r2, #0
    9f80:	23d4      	movs	r3, #212	; 0xd4
    9f82:	50e2      	str	r2, [r4, r3]
    9f84:	e7d0      	b.n	9f28 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    9f86:	0020      	movs	r0, r4
    9f88:	3070      	adds	r0, #112	; 0x70
    9f8a:	0029      	movs	r1, r5
    9f8c:	4b4a      	ldr	r3, [pc, #296]	; (a0b8 <http_client_send_request+0x244>)
    9f8e:	4798      	blx	r3
    9f90:	e7da      	b.n	9f48 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    9f92:	0029      	movs	r1, r5
    9f94:	0020      	movs	r0, r4
    9f96:	3071      	adds	r0, #113	; 0x71
    9f98:	4b47      	ldr	r3, [pc, #284]	; (a0b8 <http_client_send_request+0x244>)
    9f9a:	4798      	blx	r3
    9f9c:	e7d4      	b.n	9f48 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    9f9e:	0020      	movs	r0, r4
    9fa0:	30b0      	adds	r0, #176	; 0xb0
    9fa2:	2218      	movs	r2, #24
    9fa4:	2100      	movs	r1, #0
    9fa6:	4b45      	ldr	r3, [pc, #276]	; (a0bc <http_client_send_request+0x248>)
    9fa8:	4798      	blx	r3
    9faa:	e7d6      	b.n	9f5a <http_client_send_request+0xe6>
		if (!reconnect) {
    9fac:	9b01      	ldr	r3, [sp, #4]
    9fae:	2b00      	cmp	r3, #0
    9fb0:	d06f      	beq.n	a092 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    9fb2:	2100      	movs	r1, #0
    9fb4:	0020      	movs	r0, r4
    9fb6:	4b42      	ldr	r3, [pc, #264]	; (a0c0 <http_client_send_request+0x24c>)
    9fb8:	4798      	blx	r3
		if (module->config.tls) {
    9fba:	2352      	movs	r3, #82	; 0x52
    9fbc:	5ce2      	ldrb	r2, [r4, r3]
    9fbe:	1e53      	subs	r3, r2, #1
    9fc0:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    9fc2:	b2d2      	uxtb	r2, r2
    9fc4:	2101      	movs	r1, #1
    9fc6:	2002      	movs	r0, #2
    9fc8:	4b3e      	ldr	r3, [pc, #248]	; (a0c4 <http_client_send_request+0x250>)
    9fca:	4798      	blx	r3
    9fcc:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    9fce:	2800      	cmp	r0, #0
    9fd0:	db43      	blt.n	a05a <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    9fd2:	0080      	lsls	r0, r0, #2
    9fd4:	4b3c      	ldr	r3, [pc, #240]	; (a0c8 <http_client_send_request+0x254>)
    9fd6:	50c4      	str	r4, [r0, r3]
    9fd8:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    9fda:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    9fdc:	2620      	movs	r6, #32
			isv6 = 1;
    9fde:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    9fe0:	2730      	movs	r7, #48	; 0x30
    9fe2:	e00c      	b.n	9ffe <http_client_send_request+0x18a>
		if (!reconnect) {
    9fe4:	9b01      	ldr	r3, [sp, #4]
    9fe6:	2b00      	cmp	r3, #0
    9fe8:	d1e3      	bne.n	9fb2 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    9fea:	3303      	adds	r3, #3
    9fec:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    9fee:	0020      	movs	r0, r4
    9ff0:	4b36      	ldr	r3, [pc, #216]	; (a0cc <http_client_send_request+0x258>)
    9ff2:	4798      	blx	r3
			break;
    9ff4:	e04d      	b.n	a092 <http_client_send_request+0x21e>
			if (isv6) {
    9ff6:	2900      	cmp	r1, #0
    9ff8:	d001      	beq.n	9ffe <http_client_send_request+0x18a>
    9ffa:	e012      	b.n	a022 <http_client_send_request+0x1ae>
			isv6 = 1;
    9ffc:	0001      	movs	r1, r0
	while (*host != '\0') {
    9ffe:	782a      	ldrb	r2, [r5, #0]
    a000:	2a00      	cmp	r2, #0
    a002:	d02e      	beq.n	a062 <http_client_send_request+0x1ee>
		ch = *host++;
    a004:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    a006:	0013      	movs	r3, r2
    a008:	43b3      	bics	r3, r6
    a00a:	3b41      	subs	r3, #65	; 0x41
    a00c:	2b05      	cmp	r3, #5
    a00e:	d9f5      	bls.n	9ffc <http_client_send_request+0x188>
    a010:	2a3a      	cmp	r2, #58	; 0x3a
    a012:	d00a      	beq.n	a02a <http_client_send_request+0x1b6>
    a014:	2a2f      	cmp	r2, #47	; 0x2f
    a016:	d00a      	beq.n	a02e <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    a018:	2a2e      	cmp	r2, #46	; 0x2e
    a01a:	d0ec      	beq.n	9ff6 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    a01c:	403a      	ands	r2, r7
    a01e:	2a30      	cmp	r2, #48	; 0x30
    a020:	d0ed      	beq.n	9ffe <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    a022:	9802      	ldr	r0, [sp, #8]
    a024:	4b2a      	ldr	r3, [pc, #168]	; (a0d0 <http_client_send_request+0x25c>)
    a026:	4798      	blx	r3
    a028:	e02f      	b.n	a08a <http_client_send_request+0x216>
			isv6 = 1;
    a02a:	0001      	movs	r1, r0
    a02c:	e7e7      	b.n	9ffe <http_client_send_request+0x18a>
    a02e:	0001      	movs	r1, r0
    a030:	e7e5      	b.n	9ffe <http_client_send_request+0x18a>
		return -EINVAL;
    a032:	2316      	movs	r3, #22
    a034:	425b      	negs	r3, r3
    a036:	9301      	str	r3, [sp, #4]
    a038:	e02b      	b.n	a092 <http_client_send_request+0x21e>
		return -EBUSY;
    a03a:	2310      	movs	r3, #16
    a03c:	425b      	negs	r3, r3
    a03e:	9301      	str	r3, [sp, #4]
    a040:	e027      	b.n	a092 <http_client_send_request+0x21e>
		return -EINVAL;
    a042:	2316      	movs	r3, #22
    a044:	425b      	negs	r3, r3
    a046:	9301      	str	r3, [sp, #4]
    a048:	e023      	b.n	a092 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    a04a:	235b      	movs	r3, #91	; 0x5b
    a04c:	425b      	negs	r3, r3
    a04e:	9301      	str	r3, [sp, #4]
    a050:	e01f      	b.n	a092 <http_client_send_request+0x21e>
			return -ENOMEM;
    a052:	230c      	movs	r3, #12
    a054:	425b      	negs	r3, r3
    a056:	9301      	str	r3, [sp, #4]
    a058:	e01b      	b.n	a092 <http_client_send_request+0x21e>
			return -ENOSPC;
    a05a:	231c      	movs	r3, #28
    a05c:	425b      	negs	r3, r3
    a05e:	9301      	str	r3, [sp, #4]
    a060:	e017      	b.n	a092 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    a062:	2302      	movs	r3, #2
    a064:	aa04      	add	r2, sp, #16
    a066:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    a068:	334e      	adds	r3, #78	; 0x4e
    a06a:	5ae3      	ldrh	r3, [r4, r3]
    a06c:	021a      	lsls	r2, r3, #8
    a06e:	0a1b      	lsrs	r3, r3, #8
    a070:	4313      	orrs	r3, r2
    a072:	aa04      	add	r2, sp, #16
    a074:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    a076:	9802      	ldr	r0, [sp, #8]
    a078:	4b16      	ldr	r3, [pc, #88]	; (a0d4 <http_client_send_request+0x260>)
    a07a:	4798      	blx	r3
    a07c:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    a07e:	2000      	movs	r0, #0
    a080:	5620      	ldrsb	r0, [r4, r0]
    a082:	2210      	movs	r2, #16
    a084:	a904      	add	r1, sp, #16
    a086:	4b14      	ldr	r3, [pc, #80]	; (a0d8 <http_client_send_request+0x264>)
    a088:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    a08a:	2301      	movs	r3, #1
    a08c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    a08e:	2300      	movs	r3, #0
    a090:	9301      	str	r3, [sp, #4]
}
    a092:	9801      	ldr	r0, [sp, #4]
    a094:	b008      	add	sp, #32
    a096:	bc04      	pop	{r2}
    a098:	4692      	mov	sl, r2
    a09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a09c:	0000e494 	.word	0x0000e494
    a0a0:	0000bad5 	.word	0x0000bad5
    a0a4:	0000e49c 	.word	0x0000e49c
    a0a8:	0000bac7 	.word	0x0000bac7
    a0ac:	0000b5cd 	.word	0x0000b5cd
    a0b0:	0000ba8d 	.word	0x0000ba8d
    a0b4:	0000b5e1 	.word	0x0000b5e1
    a0b8:	0000ba7d 	.word	0x0000ba7d
    a0bc:	0000b617 	.word	0x0000b617
    a0c0:	00009935 	.word	0x00009935
    a0c4:	000039e9 	.word	0x000039e9
    a0c8:	200007e0 	.word	0x200007e0
    a0cc:	000099d5 	.word	0x000099d5
    a0d0:	00003e31 	.word	0x00003e31
    a0d4:	00003dc5 	.word	0x00003dc5
    a0d8:	00003b6d 	.word	0x00003b6d

0000a0dc <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    a0dc:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    a0de:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    a0e0:	2200      	movs	r2, #0
    a0e2:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    a0e4:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    a0e6:	9b00      	ldr	r3, [sp, #0]
    a0e8:	60c3      	str	r3, [r0, #12]
}
    a0ea:	4770      	bx	lr

0000a0ec <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    a0ec:	b510      	push	{r4, lr}
    a0ee:	0004      	movs	r4, r0
	if(writer->written > 0) {
    a0f0:	6842      	ldr	r2, [r0, #4]
    a0f2:	2a00      	cmp	r2, #0
    a0f4:	d100      	bne.n	a0f8 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    a0f6:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    a0f8:	6901      	ldr	r1, [r0, #16]
    a0fa:	68c0      	ldr	r0, [r0, #12]
    a0fc:	68a3      	ldr	r3, [r4, #8]
    a0fe:	4798      	blx	r3
		writer->written = 0;
    a100:	2300      	movs	r3, #0
    a102:	6063      	str	r3, [r4, #4]
}
    a104:	e7f7      	b.n	a0f6 <stream_writer_send_remain+0xa>
	...

0000a108 <stream_writer_send_8>:
{
    a108:	b570      	push	{r4, r5, r6, lr}
    a10a:	0004      	movs	r4, r0
    a10c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    a10e:	6803      	ldr	r3, [r0, #0]
    a110:	6842      	ldr	r2, [r0, #4]
    a112:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    a114:	2b00      	cmp	r3, #0
    a116:	dd05      	ble.n	a124 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    a118:	6922      	ldr	r2, [r4, #16]
    a11a:	6863      	ldr	r3, [r4, #4]
    a11c:	1c59      	adds	r1, r3, #1
    a11e:	6061      	str	r1, [r4, #4]
    a120:	54d5      	strb	r5, [r2, r3]
}
    a122:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    a124:	4b01      	ldr	r3, [pc, #4]	; (a12c <stream_writer_send_8+0x24>)
    a126:	4798      	blx	r3
    a128:	e7f6      	b.n	a118 <stream_writer_send_8+0x10>
    a12a:	46c0      	nop			; (mov r8, r8)
    a12c:	0000a0ed 	.word	0x0000a0ed

0000a130 <stream_writer_send_buffer>:
{
    a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a132:	0006      	movs	r6, r0
    a134:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    a136:	2a00      	cmp	r2, #0
    a138:	d008      	beq.n	a14c <stream_writer_send_buffer+0x1c>
    a13a:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    a13c:	4f04      	ldr	r7, [pc, #16]	; (a150 <stream_writer_send_buffer+0x20>)
    a13e:	2100      	movs	r1, #0
    a140:	5661      	ldrsb	r1, [r4, r1]
    a142:	0030      	movs	r0, r6
    a144:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    a146:	3401      	adds	r4, #1
    a148:	42a5      	cmp	r5, r4
    a14a:	d1f8      	bne.n	a13e <stream_writer_send_buffer+0xe>
}
    a14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a14e:	46c0      	nop			; (mov r8, r8)
    a150:	0000a109 	.word	0x0000a109

0000a154 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    a154:	4a02      	ldr	r2, [pc, #8]	; (a160 <sw_timer_tcc_callback+0xc>)
    a156:	6813      	ldr	r3, [r2, #0]
    a158:	3301      	adds	r3, #1
    a15a:	6013      	str	r3, [r2, #0]
}
    a15c:	4770      	bx	lr
    a15e:	46c0      	nop			; (mov r8, r8)
    a160:	200007fc 	.word	0x200007fc

0000a164 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    a164:	2364      	movs	r3, #100	; 0x64
    a166:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    a168:	2300      	movs	r3, #0
    a16a:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    a16c:	7043      	strb	r3, [r0, #1]
}
    a16e:	4770      	bx	lr

0000a170 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    a170:	b5f0      	push	{r4, r5, r6, r7, lr}
    a172:	46c6      	mov	lr, r8
    a174:	b500      	push	{lr}
    a176:	b0ac      	sub	sp, #176	; 0xb0
    a178:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    a17a:	466e      	mov	r6, sp
    a17c:	4b1d      	ldr	r3, [pc, #116]	; (a1f4 <sw_timer_init+0x84>)
    a17e:	466a      	mov	r2, sp
    a180:	cb92      	ldmia	r3!, {r1, r4, r7}
    a182:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    a184:	886b      	ldrh	r3, [r5, #2]
    a186:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    a188:	3014      	adds	r0, #20
    a18a:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    a18c:	782b      	ldrb	r3, [r5, #0]
    a18e:	009b      	lsls	r3, r3, #2
    a190:	5999      	ldr	r1, [r3, r6]
    a192:	0017      	movs	r7, r2
    a194:	0010      	movs	r0, r2
    a196:	4b18      	ldr	r3, [pc, #96]	; (a1f8 <sw_timer_init+0x88>)
    a198:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    a19a:	2000      	movs	r0, #0
    a19c:	4b17      	ldr	r3, [pc, #92]	; (a1fc <sw_timer_init+0x8c>)
    a19e:	4798      	blx	r3
    a1a0:	4b17      	ldr	r3, [pc, #92]	; (a200 <sw_timer_init+0x90>)
    a1a2:	7a1b      	ldrb	r3, [r3, #8]
    a1a4:	b2db      	uxtb	r3, r3
    a1a6:	40d8      	lsrs	r0, r3
    a1a8:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    a1aa:	8869      	ldrh	r1, [r5, #2]
    a1ac:	20fa      	movs	r0, #250	; 0xfa
    a1ae:	0200      	lsls	r0, r0, #8
    a1b0:	4b14      	ldr	r3, [pc, #80]	; (a204 <sw_timer_init+0x94>)
    a1b2:	4798      	blx	r3
    a1b4:	0001      	movs	r1, r0
    a1b6:	4640      	mov	r0, r8
    a1b8:	4b13      	ldr	r3, [pc, #76]	; (a208 <sw_timer_init+0x98>)
    a1ba:	4798      	blx	r3
    a1bc:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    a1be:	2305      	movs	r3, #5
    a1c0:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    a1c2:	782b      	ldrb	r3, [r5, #0]
    a1c4:	009b      	lsls	r3, r3, #2
    a1c6:	5999      	ldr	r1, [r3, r6]
    a1c8:	003a      	movs	r2, r7
    a1ca:	0020      	movs	r0, r4
    a1cc:	4b0f      	ldr	r3, [pc, #60]	; (a20c <sw_timer_init+0x9c>)
    a1ce:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a1d0:	786a      	ldrb	r2, [r5, #1]
    a1d2:	3208      	adds	r2, #8
    a1d4:	b2d2      	uxtb	r2, r2
    a1d6:	490e      	ldr	r1, [pc, #56]	; (a210 <sw_timer_init+0xa0>)
    a1d8:	0020      	movs	r0, r4
    a1da:	4b0e      	ldr	r3, [pc, #56]	; (a214 <sw_timer_init+0xa4>)
    a1dc:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a1de:	7869      	ldrb	r1, [r5, #1]
    a1e0:	3108      	adds	r1, #8
    a1e2:	b2c9      	uxtb	r1, r1
    a1e4:	0020      	movs	r0, r4
    a1e6:	4b0c      	ldr	r3, [pc, #48]	; (a218 <sw_timer_init+0xa8>)
    a1e8:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    a1ea:	b02c      	add	sp, #176	; 0xb0
    a1ec:	bc04      	pop	{r2}
    a1ee:	4690      	mov	r8, r2
    a1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1f2:	46c0      	nop			; (mov r8, r8)
    a1f4:	0000e4a8 	.word	0x0000e4a8
    a1f8:	00006075 	.word	0x00006075
    a1fc:	00005dd1 	.word	0x00005dd1
    a200:	40000400 	.word	0x40000400
    a204:	0000b339 	.word	0x0000b339
    a208:	0000b225 	.word	0x0000b225
    a20c:	000061c1 	.word	0x000061c1
    a210:	0000a155 	.word	0x0000a155
    a214:	000065cd 	.word	0x000065cd
    a218:	000065e5 	.word	0x000065e5

0000a21c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    a21c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    a21e:	2102      	movs	r1, #2
    a220:	6893      	ldr	r3, [r2, #8]
    a222:	4219      	tst	r1, r3
    a224:	d1fc      	bne.n	a220 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    a226:	6813      	ldr	r3, [r2, #0]
    a228:	2102      	movs	r1, #2
    a22a:	430b      	orrs	r3, r1
    a22c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    a22e:	4770      	bx	lr

0000a230 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    a230:	b570      	push	{r4, r5, r6, lr}
    a232:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    a234:	7805      	ldrb	r5, [r0, #0]
    a236:	07e8      	lsls	r0, r5, #31
    a238:	d502      	bpl.n	a240 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    a23a:	2001      	movs	r0, #1
    a23c:	4240      	negs	r0, r0
}
    a23e:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    a240:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    a242:	0029      	movs	r1, r5
    a244:	2002      	movs	r0, #2
    a246:	4381      	bics	r1, r0
    a248:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    a24a:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    a24c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a24e:	0018      	movs	r0, r3
    a250:	4b04      	ldr	r3, [pc, #16]	; (a264 <sw_timer_register_callback+0x34>)
    a252:	4798      	blx	r3
    a254:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    a256:	7823      	ldrb	r3, [r4, #0]
    a258:	2201      	movs	r2, #1
    a25a:	4313      	orrs	r3, r2
    a25c:	7023      	strb	r3, [r4, #0]
			return index;
    a25e:	2000      	movs	r0, #0
    a260:	e7ed      	b.n	a23e <sw_timer_register_callback+0xe>
    a262:	46c0      	nop			; (mov r8, r8)
    a264:	0000b225 	.word	0x0000b225

0000a268 <sw_timer_task>:

	handler->callback_enable = 0;
}

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    a268:	b570      	push	{r4, r5, r6, lr}
    a26a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    a26c:	7803      	ldrb	r3, [r0, #0]
    a26e:	07db      	lsls	r3, r3, #31
    a270:	d507      	bpl.n	a282 <sw_timer_task+0x1a>
    a272:	7803      	ldrb	r3, [r0, #0]
    a274:	079b      	lsls	r3, r3, #30
    a276:	d504      	bpl.n	a282 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    a278:	4b10      	ldr	r3, [pc, #64]	; (a2bc <sw_timer_task+0x54>)
    a27a:	681a      	ldr	r2, [r3, #0]
    a27c:	6903      	ldr	r3, [r0, #16]
    a27e:	1a9b      	subs	r3, r3, r2
    a280:	d400      	bmi.n	a284 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    a282:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    a284:	7803      	ldrb	r3, [r0, #0]
    a286:	075b      	lsls	r3, r3, #29
    a288:	d4fb      	bmi.n	a282 <sw_timer_task+0x1a>
				handler->busy = 1;
    a28a:	7803      	ldrb	r3, [r0, #0]
    a28c:	2104      	movs	r1, #4
    a28e:	430b      	orrs	r3, r1
    a290:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    a292:	68c3      	ldr	r3, [r0, #12]
    a294:	2b00      	cmp	r3, #0
    a296:	d00b      	beq.n	a2b0 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    a298:	18d2      	adds	r2, r2, r3
    a29a:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    a29c:	68a2      	ldr	r2, [r4, #8]
    a29e:	2100      	movs	r1, #0
    a2a0:	0020      	movs	r0, r4
    a2a2:	6865      	ldr	r5, [r4, #4]
    a2a4:	47a8      	blx	r5
				handler->busy = 0;
    a2a6:	7823      	ldrb	r3, [r4, #0]
    a2a8:	2204      	movs	r2, #4
    a2aa:	4393      	bics	r3, r2
    a2ac:	7023      	strb	r3, [r4, #0]
}
    a2ae:	e7e8      	b.n	a282 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    a2b0:	7802      	ldrb	r2, [r0, #0]
    a2b2:	2102      	movs	r1, #2
    a2b4:	438a      	bics	r2, r1
    a2b6:	7002      	strb	r2, [r0, #0]
    a2b8:	e7f0      	b.n	a29c <sw_timer_task+0x34>
    a2ba:	46c0      	nop			; (mov r8, r8)
    a2bc:	200007fc 	.word	0x200007fc

0000a2c0 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
    a2c0:	4b02      	ldr	r3, [pc, #8]	; (a2cc <add_state+0xc>)
    a2c2:	781a      	ldrb	r2, [r3, #0]
    a2c4:	4310      	orrs	r0, r2
    a2c6:	7018      	strb	r0, [r3, #0]
}
    a2c8:	4770      	bx	lr
    a2ca:	46c0      	nop			; (mov r8, r8)
    a2cc:	20000835 	.word	0x20000835

0000a2d0 <extint_detection_callback>:
{
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	//temperature++;
	//if (temperature > 40) temperature = 1;
	//snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);
	isPressed = true;
    a2d0:	2201      	movs	r2, #1
    a2d2:	4b01      	ldr	r3, [pc, #4]	; (a2d8 <extint_detection_callback+0x8>)
    a2d4:	701a      	strb	r2, [r3, #0]
}
    a2d6:	4770      	bx	lr
    a2d8:	20000a90 	.word	0x20000a90

0000a2dc <SubscribeHandler>:
{
    a2dc:	b570      	push	{r4, r5, r6, lr}
    a2de:	0004      	movs	r4, r0
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
    a2e0:	6843      	ldr	r3, [r0, #4]
    a2e2:	689a      	ldr	r2, [r3, #8]
    a2e4:	6859      	ldr	r1, [r3, #4]
    a2e6:	4816      	ldr	r0, [pc, #88]	; (a340 <SubscribeHandler+0x64>)
    a2e8:	4d16      	ldr	r5, [pc, #88]	; (a344 <SubscribeHandler+0x68>)
    a2ea:	47a8      	blx	r5
	printf(" >> ");
    a2ec:	4816      	ldr	r0, [pc, #88]	; (a348 <SubscribeHandler+0x6c>)
    a2ee:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);	
    a2f0:	6823      	ldr	r3, [r4, #0]
    a2f2:	689a      	ldr	r2, [r3, #8]
    a2f4:	68d9      	ldr	r1, [r3, #12]
    a2f6:	4815      	ldr	r0, [pc, #84]	; (a34c <SubscribeHandler+0x70>)
    a2f8:	47a8      	blx	r5
	if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
    a2fa:	6826      	ldr	r6, [r4, #0]
    a2fc:	68f5      	ldr	r5, [r6, #12]
    a2fe:	6863      	ldr	r3, [r4, #4]
    a300:	6898      	ldr	r0, [r3, #8]
    a302:	002a      	movs	r2, r5
    a304:	4912      	ldr	r1, [pc, #72]	; (a350 <SubscribeHandler+0x74>)
    a306:	4b13      	ldr	r3, [pc, #76]	; (a354 <SubscribeHandler+0x78>)
    a308:	4798      	blx	r3
    a30a:	2800      	cmp	r0, #0
    a30c:	d117      	bne.n	a33e <SubscribeHandler+0x62>
		if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
    a30e:	68b4      	ldr	r4, [r6, #8]
    a310:	002a      	movs	r2, r5
    a312:	4911      	ldr	r1, [pc, #68]	; (a358 <SubscribeHandler+0x7c>)
    a314:	0020      	movs	r0, r4
    a316:	4b0f      	ldr	r3, [pc, #60]	; (a354 <SubscribeHandler+0x78>)
    a318:	4798      	blx	r3
    a31a:	2800      	cmp	r0, #0
    a31c:	d00b      	beq.n	a336 <SubscribeHandler+0x5a>
		else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
    a31e:	002a      	movs	r2, r5
    a320:	490e      	ldr	r1, [pc, #56]	; (a35c <SubscribeHandler+0x80>)
    a322:	0020      	movs	r0, r4
    a324:	4b0b      	ldr	r3, [pc, #44]	; (a354 <SubscribeHandler+0x78>)
    a326:	4798      	blx	r3
    a328:	2800      	cmp	r0, #0
    a32a:	d108      	bne.n	a33e <SubscribeHandler+0x62>
		port_base->OUTCLR.reg = pin_mask;
    a32c:	2280      	movs	r2, #128	; 0x80
    a32e:	0412      	lsls	r2, r2, #16
    a330:	4b0b      	ldr	r3, [pc, #44]	; (a360 <SubscribeHandler+0x84>)
    a332:	615a      	str	r2, [r3, #20]
}
    a334:	e003      	b.n	a33e <SubscribeHandler+0x62>
		port_base->OUTSET.reg = pin_mask;
    a336:	2280      	movs	r2, #128	; 0x80
    a338:	0412      	lsls	r2, r2, #16
    a33a:	4b09      	ldr	r3, [pc, #36]	; (a360 <SubscribeHandler+0x84>)
    a33c:	619a      	str	r2, [r3, #24]
    a33e:	bd70      	pop	{r4, r5, r6, pc}
    a340:	0000e4c8 	.word	0x0000e4c8
    a344:	0000b779 	.word	0x0000b779
    a348:	0000e4d0 	.word	0x0000e4d0
    a34c:	0000e4d8 	.word	0x0000e4d8
    a350:	0000e4e0 	.word	0x0000e4e0
    a354:	0000bad5 	.word	0x0000bad5
    a358:	0000e4e8 	.word	0x0000e4e8
    a35c:	0000e4f0 	.word	0x0000e4f0
    a360:	41004400 	.word	0x41004400

0000a364 <start_download>:
{
    a364:	b510      	push	{r4, lr}
    a366:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    a368:	4b12      	ldr	r3, [pc, #72]	; (a3b4 <start_download+0x50>)
    a36a:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    a36c:	07da      	lsls	r2, r3, #31
    a36e:	d511      	bpl.n	a394 <start_download+0x30>
	if (!is_state_set(WIFI_CONNECTED)) {
    a370:	079a      	lsls	r2, r3, #30
    a372:	d513      	bpl.n	a39c <start_download+0x38>
	if (is_state_set(GET_REQUESTED)) {
    a374:	075a      	lsls	r2, r3, #29
    a376:	d415      	bmi.n	a3a4 <start_download+0x40>
	if (is_state_set(DOWNLOADING)) {
    a378:	071b      	lsls	r3, r3, #28
    a37a:	d417      	bmi.n	a3ac <start_download+0x48>
	printf("start_download: sending HTTP request...\r\n");
    a37c:	480e      	ldr	r0, [pc, #56]	; (a3b8 <start_download+0x54>)
    a37e:	4b0f      	ldr	r3, [pc, #60]	; (a3bc <start_download+0x58>)
    a380:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    a382:	2300      	movs	r3, #0
    a384:	9300      	str	r3, [sp, #0]
    a386:	2201      	movs	r2, #1
    a388:	490d      	ldr	r1, [pc, #52]	; (a3c0 <start_download+0x5c>)
    a38a:	480e      	ldr	r0, [pc, #56]	; (a3c4 <start_download+0x60>)
    a38c:	4c0e      	ldr	r4, [pc, #56]	; (a3c8 <start_download+0x64>)
    a38e:	47a0      	blx	r4
}
    a390:	b002      	add	sp, #8
    a392:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
    a394:	480d      	ldr	r0, [pc, #52]	; (a3cc <start_download+0x68>)
    a396:	4b09      	ldr	r3, [pc, #36]	; (a3bc <start_download+0x58>)
    a398:	4798      	blx	r3
		return;
    a39a:	e7f9      	b.n	a390 <start_download+0x2c>
		printf("start_download: Wi-Fi is not connected.\r\n");
    a39c:	480c      	ldr	r0, [pc, #48]	; (a3d0 <start_download+0x6c>)
    a39e:	4b07      	ldr	r3, [pc, #28]	; (a3bc <start_download+0x58>)
    a3a0:	4798      	blx	r3
		return;
    a3a2:	e7f5      	b.n	a390 <start_download+0x2c>
		printf("start_download: request is sent already.\r\n");
    a3a4:	480b      	ldr	r0, [pc, #44]	; (a3d4 <start_download+0x70>)
    a3a6:	4b05      	ldr	r3, [pc, #20]	; (a3bc <start_download+0x58>)
    a3a8:	4798      	blx	r3
		return;
    a3aa:	e7f1      	b.n	a390 <start_download+0x2c>
		printf("start_download: running download already.\r\n");
    a3ac:	480a      	ldr	r0, [pc, #40]	; (a3d8 <start_download+0x74>)
    a3ae:	4b03      	ldr	r3, [pc, #12]	; (a3bc <start_download+0x58>)
    a3b0:	4798      	blx	r3
		return;
    a3b2:	e7ed      	b.n	a390 <start_download+0x2c>
    a3b4:	20000835 	.word	0x20000835
    a3b8:	0000ef38 	.word	0x0000ef38
    a3bc:	0000b895 	.word	0x0000b895
    a3c0:	0000ef64 	.word	0x0000ef64
    a3c4:	200012f4 	.word	0x200012f4
    a3c8:	00009e75 	.word	0x00009e75
    a3cc:	0000ee8c 	.word	0x0000ee8c
    a3d0:	0000eeb4 	.word	0x0000eeb4
    a3d4:	0000eee0 	.word	0x0000eee0
    a3d8:	0000ef0c 	.word	0x0000ef0c

0000a3dc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    a3dc:	b570      	push	{r4, r5, r6, lr}
    a3de:	b082      	sub	sp, #8
    a3e0:	0005      	movs	r5, r0
    a3e2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    a3e4:	2200      	movs	r2, #0
    a3e6:	466b      	mov	r3, sp
    a3e8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    a3ea:	4c06      	ldr	r4, [pc, #24]	; (a404 <usart_serial_getchar+0x28>)
    a3ec:	466b      	mov	r3, sp
    a3ee:	1d99      	adds	r1, r3, #6
    a3f0:	0028      	movs	r0, r5
    a3f2:	47a0      	blx	r4
    a3f4:	2800      	cmp	r0, #0
    a3f6:	d1f9      	bne.n	a3ec <usart_serial_getchar+0x10>

	*c = temp;
    a3f8:	466b      	mov	r3, sp
    a3fa:	3306      	adds	r3, #6
    a3fc:	881b      	ldrh	r3, [r3, #0]
    a3fe:	7033      	strb	r3, [r6, #0]
}
    a400:	b002      	add	sp, #8
    a402:	bd70      	pop	{r4, r5, r6, pc}
    a404:	0000569d 	.word	0x0000569d

0000a408 <usart_serial_putchar>:
{
    a408:	b570      	push	{r4, r5, r6, lr}
    a40a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    a40c:	b28c      	uxth	r4, r1
    a40e:	4e03      	ldr	r6, [pc, #12]	; (a41c <usart_serial_putchar+0x14>)
    a410:	0021      	movs	r1, r4
    a412:	0028      	movs	r0, r5
    a414:	47b0      	blx	r6
    a416:	2800      	cmp	r0, #0
    a418:	d1fa      	bne.n	a410 <usart_serial_putchar+0x8>
}
    a41a:	bd70      	pop	{r4, r5, r6, pc}
    a41c:	00005671 	.word	0x00005671

0000a420 <mqtt_callback>:
{
    a420:	b570      	push	{r4, r5, r6, lr}
    a422:	b086      	sub	sp, #24
    a424:	0004      	movs	r4, r0
	switch (type) {
    a426:	2901      	cmp	r1, #1
    a428:	d02c      	beq.n	a484 <mqtt_callback+0x64>
    a42a:	2905      	cmp	r1, #5
    a42c:	d040      	beq.n	a4b0 <mqtt_callback+0x90>
    a42e:	2900      	cmp	r1, #0
    a430:	d001      	beq.n	a436 <mqtt_callback+0x16>
}
    a432:	b006      	add	sp, #24
    a434:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
    a436:	6813      	ldr	r3, [r2, #0]
    a438:	2b00      	cmp	r3, #0
    a43a:	db19      	blt.n	a470 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
    a43c:	4821      	ldr	r0, [pc, #132]	; (a4c4 <mqtt_callback+0xa4>)
    a43e:	4b22      	ldr	r3, [pc, #136]	; (a4c8 <mqtt_callback+0xa8>)
    a440:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
    a442:	4a22      	ldr	r2, [pc, #136]	; (a4cc <mqtt_callback+0xac>)
    a444:	2300      	movs	r3, #0
    a446:	9305      	str	r3, [sp, #20]
    a448:	9304      	str	r3, [sp, #16]
    a44a:	9303      	str	r3, [sp, #12]
    a44c:	9302      	str	r3, [sp, #8]
    a44e:	9301      	str	r3, [sp, #4]
    a450:	9200      	str	r2, [sp, #0]
    a452:	4b1f      	ldr	r3, [pc, #124]	; (a4d0 <mqtt_callback+0xb0>)
    a454:	2101      	movs	r1, #1
    a456:	0020      	movs	r0, r4
    a458:	4c1e      	ldr	r4, [pc, #120]	; (a4d4 <mqtt_callback+0xb4>)
    a45a:	47a0      	blx	r4
    a45c:	2800      	cmp	r0, #0
    a45e:	d003      	beq.n	a468 <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
    a460:	481d      	ldr	r0, [pc, #116]	; (a4d8 <mqtt_callback+0xb8>)
    a462:	4b1e      	ldr	r3, [pc, #120]	; (a4dc <mqtt_callback+0xbc>)
    a464:	4798      	blx	r3
    a466:	e7e4      	b.n	a432 <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
    a468:	481d      	ldr	r0, [pc, #116]	; (a4e0 <mqtt_callback+0xc0>)
    a46a:	4b1c      	ldr	r3, [pc, #112]	; (a4dc <mqtt_callback+0xbc>)
    a46c:	4798      	blx	r3
    a46e:	e7e0      	b.n	a432 <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    a470:	4d1c      	ldr	r5, [pc, #112]	; (a4e4 <mqtt_callback+0xc4>)
    a472:	0029      	movs	r1, r5
    a474:	481c      	ldr	r0, [pc, #112]	; (a4e8 <mqtt_callback+0xc8>)
    a476:	4b14      	ldr	r3, [pc, #80]	; (a4c8 <mqtt_callback+0xa8>)
    a478:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    a47a:	0029      	movs	r1, r5
    a47c:	0020      	movs	r0, r4
    a47e:	4b1b      	ldr	r3, [pc, #108]	; (a4ec <mqtt_callback+0xcc>)
    a480:	4798      	blx	r3
    a482:	e7d6      	b.n	a432 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    a484:	7811      	ldrb	r1, [r2, #0]
    a486:	2900      	cmp	r1, #0
    a488:	d10e      	bne.n	a4a8 <mqtt_callback+0x88>
			mqtt_subscribe(module_inst, TEMPERATURE_TOPIC, 2, SubscribeHandler);
    a48a:	4e19      	ldr	r6, [pc, #100]	; (a4f0 <mqtt_callback+0xd0>)
    a48c:	0033      	movs	r3, r6
    a48e:	2202      	movs	r2, #2
    a490:	4918      	ldr	r1, [pc, #96]	; (a4f4 <mqtt_callback+0xd4>)
    a492:	4d19      	ldr	r5, [pc, #100]	; (a4f8 <mqtt_callback+0xd8>)
    a494:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
    a496:	0033      	movs	r3, r6
    a498:	2202      	movs	r2, #2
    a49a:	4918      	ldr	r1, [pc, #96]	; (a4fc <mqtt_callback+0xdc>)
    a49c:	0020      	movs	r0, r4
    a49e:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
    a4a0:	4817      	ldr	r0, [pc, #92]	; (a500 <mqtt_callback+0xe0>)
    a4a2:	4b0e      	ldr	r3, [pc, #56]	; (a4dc <mqtt_callback+0xbc>)
    a4a4:	4798      	blx	r3
    a4a6:	e7c4      	b.n	a432 <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    a4a8:	4816      	ldr	r0, [pc, #88]	; (a504 <mqtt_callback+0xe4>)
    a4aa:	4b07      	ldr	r3, [pc, #28]	; (a4c8 <mqtt_callback+0xa8>)
    a4ac:	4798      	blx	r3
    a4ae:	e7c0      	b.n	a432 <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
    a4b0:	4815      	ldr	r0, [pc, #84]	; (a508 <mqtt_callback+0xe8>)
    a4b2:	4b0a      	ldr	r3, [pc, #40]	; (a4dc <mqtt_callback+0xbc>)
    a4b4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    a4b6:	4915      	ldr	r1, [pc, #84]	; (a50c <mqtt_callback+0xec>)
    a4b8:	2231      	movs	r2, #49	; 0x31
    a4ba:	5c8b      	ldrb	r3, [r1, r2]
    a4bc:	2002      	movs	r0, #2
    a4be:	4383      	bics	r3, r0
    a4c0:	548b      	strb	r3, [r1, r2]
}
    a4c2:	e7b6      	b.n	a432 <mqtt_callback+0x12>
    a4c4:	0000ea78 	.word	0x0000ea78
    a4c8:	0000b779 	.word	0x0000b779
    a4cc:	0000eaa4 	.word	0x0000eaa4
    a4d0:	0000ea94 	.word	0x0000ea94
    a4d4:	00008f3d 	.word	0x00008f3d
    a4d8:	0000eab0 	.word	0x0000eab0
    a4dc:	0000b895 	.word	0x0000b895
    a4e0:	0000ead8 	.word	0x0000ead8
    a4e4:	0000ea64 	.word	0x0000ea64
    a4e8:	0000eaf4 	.word	0x0000eaf4
    a4ec:	00008f11 	.word	0x00008f11
    a4f0:	0000a2dd 	.word	0x0000a2dd
    a4f4:	0000eb2c 	.word	0x0000eb2c
    a4f8:	00009005 	.word	0x00009005
    a4fc:	0000e4e0 	.word	0x0000e4e0
    a500:	0000eb38 	.word	0x0000eb38
    a504:	0000eb48 	.word	0x0000eb48
    a508:	0000eb7c 	.word	0x0000eb7c
    a50c:	20000800 	.word	0x20000800

0000a510 <rename_to_unique>:
{
    a510:	b5f0      	push	{r4, r5, r6, r7, lr}
    a512:	46de      	mov	lr, fp
    a514:	b500      	push	{lr}
    a516:	b0c8      	sub	sp, #288	; 0x120
    a518:	0007      	movs	r7, r0
    a51a:	000e      	movs	r6, r1
    a51c:	9101      	str	r1, [sp, #4]
    a51e:	9203      	str	r2, [sp, #12]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    a520:	22fb      	movs	r2, #251	; 0xfb
    a522:	2100      	movs	r1, #0
    a524:	a809      	add	r0, sp, #36	; 0x24
    a526:	4d52      	ldr	r5, [pc, #328]	; (a670 <rename_to_unique+0x160>)
    a528:	47a8      	blx	r5
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    a52a:	2209      	movs	r2, #9
    a52c:	2100      	movs	r1, #0
    a52e:	a806      	add	r0, sp, #24
    a530:	47a8      	blx	r5
	char numbering[NUMBRING_MAX + 1] = {0};
    a532:	2300      	movs	r3, #0
    a534:	9305      	str	r3, [sp, #20]
	if (file_path_name == NULL) {
    a536:	2e00      	cmp	r6, #0
    a538:	d100      	bne.n	a53c <rename_to_unique+0x2c>
    a53a:	e090      	b.n	a65e <rename_to_unique+0x14e>
	if (fp == NULL || file_path_name == NULL) {
    a53c:	2f00      	cmp	r7, #0
    a53e:	d100      	bne.n	a542 <rename_to_unique+0x32>
    a540:	e08f      	b.n	a662 <rename_to_unique+0x152>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    a542:	4d4c      	ldr	r5, [pc, #304]	; (a674 <rename_to_unique+0x164>)
    a544:	2200      	movs	r2, #0
    a546:	0031      	movs	r1, r6
    a548:	0028      	movs	r0, r5
    a54a:	4b4b      	ldr	r3, [pc, #300]	; (a678 <rename_to_unique+0x168>)
    a54c:	4798      	blx	r3
    a54e:	0007      	movs	r7, r0
	f_close(&file_object);
    a550:	0028      	movs	r0, r5
    a552:	4b4a      	ldr	r3, [pc, #296]	; (a67c <rename_to_unique+0x16c>)
    a554:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
    a556:	2f00      	cmp	r7, #0
    a558:	d000      	beq.n	a55c <rename_to_unique+0x4c>
    a55a:	e084      	b.n	a666 <rename_to_unique+0x156>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    a55c:	0030      	movs	r0, r6
    a55e:	4b48      	ldr	r3, [pc, #288]	; (a680 <rename_to_unique+0x170>)
    a560:	4798      	blx	r3
    a562:	0003      	movs	r3, r0
		return false;
    a564:	2000      	movs	r0, #0
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    a566:	2bfa      	cmp	r3, #250	; 0xfa
    a568:	d87e      	bhi.n	a668 <rename_to_unique+0x158>
	p = strrchr(file_path_name, '.');
    a56a:	212e      	movs	r1, #46	; 0x2e
    a56c:	0030      	movs	r0, r6
    a56e:	4b45      	ldr	r3, [pc, #276]	; (a684 <rename_to_unique+0x174>)
    a570:	4798      	blx	r3
    a572:	1e05      	subs	r5, r0, #0
	if (p != NULL) {
    a574:	d039      	beq.n	a5ea <rename_to_unique+0xda>
		ext_len = strlen(p);
    a576:	4b42      	ldr	r3, [pc, #264]	; (a680 <rename_to_unique+0x170>)
    a578:	4798      	blx	r3
    a57a:	0007      	movs	r7, r0
    a57c:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    a57e:	2c07      	cmp	r4, #7
    a580:	d820      	bhi.n	a5c4 <rename_to_unique+0xb4>
			strcpy(ext, p);
    a582:	0029      	movs	r1, r5
    a584:	a806      	add	r0, sp, #24
    a586:	4b40      	ldr	r3, [pc, #256]	; (a688 <rename_to_unique+0x178>)
    a588:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    a58a:	0030      	movs	r0, r6
    a58c:	4b3c      	ldr	r3, [pc, #240]	; (a680 <rename_to_unique+0x170>)
    a58e:	4798      	blx	r3
    a590:	043f      	lsls	r7, r7, #16
    a592:	0c3f      	lsrs	r7, r7, #16
    a594:	1bc7      	subs	r7, r0, r7
    a596:	2ff6      	cmp	r7, #246	; 0xf6
    a598:	d909      	bls.n	a5ae <rename_to_unique+0x9e>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    a59a:	25f6      	movs	r5, #246	; 0xf6
    a59c:	1b2d      	subs	r5, r5, r4
    a59e:	b2ad      	uxth	r5, r5
				strncpy(name, file_path_name, name_len);
    a5a0:	002a      	movs	r2, r5
    a5a2:	0031      	movs	r1, r6
    a5a4:	a809      	add	r0, sp, #36	; 0x24
    a5a6:	4b39      	ldr	r3, [pc, #228]	; (a68c <rename_to_unique+0x17c>)
    a5a8:	4798      	blx	r3
			valid_ext = true;
    a5aa:	2401      	movs	r4, #1
    a5ac:	e011      	b.n	a5d2 <rename_to_unique+0xc2>
				name_len = (p - file_path_name);
    a5ae:	9b01      	ldr	r3, [sp, #4]
    a5b0:	1aea      	subs	r2, r5, r3
    a5b2:	b295      	uxth	r5, r2
				strncpy(name, file_path_name, name_len);
    a5b4:	0412      	lsls	r2, r2, #16
    a5b6:	0c12      	lsrs	r2, r2, #16
    a5b8:	0019      	movs	r1, r3
    a5ba:	a809      	add	r0, sp, #36	; 0x24
    a5bc:	4b33      	ldr	r3, [pc, #204]	; (a68c <rename_to_unique+0x17c>)
    a5be:	4798      	blx	r3
			valid_ext = true;
    a5c0:	2401      	movs	r4, #1
    a5c2:	e006      	b.n	a5d2 <rename_to_unique+0xc2>
			strncpy(name, file_path_name, name_len);
    a5c4:	22f6      	movs	r2, #246	; 0xf6
    a5c6:	9901      	ldr	r1, [sp, #4]
    a5c8:	a809      	add	r0, sp, #36	; 0x24
    a5ca:	4b30      	ldr	r3, [pc, #192]	; (a68c <rename_to_unique+0x17c>)
    a5cc:	4798      	blx	r3
	bool valid_ext = false;
    a5ce:	2400      	movs	r4, #0
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    a5d0:	25f6      	movs	r5, #246	; 0xf6
	name[name_len++] = '-';
    a5d2:	1c6e      	adds	r6, r5, #1
    a5d4:	b2b6      	uxth	r6, r6
    a5d6:	222d      	movs	r2, #45	; 0x2d
    a5d8:	ab09      	add	r3, sp, #36	; 0x24
    a5da:	555a      	strb	r2, [r3, r5]
    a5dc:	2501      	movs	r5, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    a5de:	1cf3      	adds	r3, r6, #3
    a5e0:	aa09      	add	r2, sp, #36	; 0x24
    a5e2:	4694      	mov	ip, r2
    a5e4:	4463      	add	r3, ip
    a5e6:	9302      	str	r3, [sp, #8]
    a5e8:	e019      	b.n	a61e <rename_to_unique+0x10e>
		strncpy(name, file_path_name, name_len);
    a5ea:	22f6      	movs	r2, #246	; 0xf6
    a5ec:	9901      	ldr	r1, [sp, #4]
    a5ee:	a809      	add	r0, sp, #36	; 0x24
    a5f0:	4b26      	ldr	r3, [pc, #152]	; (a68c <rename_to_unique+0x17c>)
    a5f2:	4798      	blx	r3
	bool valid_ext = false;
    a5f4:	2400      	movs	r4, #0
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    a5f6:	25f6      	movs	r5, #246	; 0xf6
    a5f8:	e7eb      	b.n	a5d2 <rename_to_unique+0xc2>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    a5fa:	4f1e      	ldr	r7, [pc, #120]	; (a674 <rename_to_unique+0x164>)
    a5fc:	2200      	movs	r2, #0
    a5fe:	a909      	add	r1, sp, #36	; 0x24
    a600:	0038      	movs	r0, r7
    a602:	4b1d      	ldr	r3, [pc, #116]	; (a678 <rename_to_unique+0x168>)
    a604:	4798      	blx	r3
    a606:	4683      	mov	fp, r0
	f_close(&file_object);
    a608:	0038      	movs	r0, r7
    a60a:	4b1c      	ldr	r3, [pc, #112]	; (a67c <rename_to_unique+0x16c>)
    a60c:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
    a60e:	465b      	mov	r3, fp
    a610:	2b00      	cmp	r3, #0
    a612:	d116      	bne.n	a642 <rename_to_unique+0x132>
    a614:	3501      	adds	r5, #1
	for (i = 1; i < count; i++) {
    a616:	4b1e      	ldr	r3, [pc, #120]	; (a690 <rename_to_unique+0x180>)
    a618:	b2aa      	uxth	r2, r5
    a61a:	429a      	cmp	r2, r3
    a61c:	d81d      	bhi.n	a65a <rename_to_unique+0x14a>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    a61e:	002a      	movs	r2, r5
    a620:	491c      	ldr	r1, [pc, #112]	; (a694 <rename_to_unique+0x184>)
    a622:	a805      	add	r0, sp, #20
    a624:	4b1c      	ldr	r3, [pc, #112]	; (a698 <rename_to_unique+0x188>)
    a626:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
    a628:	ab09      	add	r3, sp, #36	; 0x24
    a62a:	1998      	adds	r0, r3, r6
    a62c:	2203      	movs	r2, #3
    a62e:	a905      	add	r1, sp, #20
    a630:	4b16      	ldr	r3, [pc, #88]	; (a68c <rename_to_unique+0x17c>)
    a632:	4798      	blx	r3
		if (valid_ext) {
    a634:	2c00      	cmp	r4, #0
    a636:	d0e0      	beq.n	a5fa <rename_to_unique+0xea>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    a638:	a906      	add	r1, sp, #24
    a63a:	9802      	ldr	r0, [sp, #8]
    a63c:	4b12      	ldr	r3, [pc, #72]	; (a688 <rename_to_unique+0x178>)
    a63e:	4798      	blx	r3
    a640:	e7db      	b.n	a5fa <rename_to_unique+0xea>
			memset(file_path_name, 0, max_len);
    a642:	9a03      	ldr	r2, [sp, #12]
    a644:	2100      	movs	r1, #0
    a646:	9c01      	ldr	r4, [sp, #4]
    a648:	0020      	movs	r0, r4
    a64a:	4b09      	ldr	r3, [pc, #36]	; (a670 <rename_to_unique+0x160>)
    a64c:	4798      	blx	r3
			strcpy(file_path_name, name);
    a64e:	a909      	add	r1, sp, #36	; 0x24
    a650:	0020      	movs	r0, r4
    a652:	4b0d      	ldr	r3, [pc, #52]	; (a688 <rename_to_unique+0x178>)
    a654:	4798      	blx	r3
			return true;
    a656:	2001      	movs	r0, #1
    a658:	e006      	b.n	a668 <rename_to_unique+0x158>
	return false;
    a65a:	2000      	movs	r0, #0
    a65c:	e004      	b.n	a668 <rename_to_unique+0x158>
		return false;
    a65e:	2000      	movs	r0, #0
    a660:	e002      	b.n	a668 <rename_to_unique+0x158>
		return true;
    a662:	2001      	movs	r0, #1
    a664:	e000      	b.n	a668 <rename_to_unique+0x158>
    a666:	2001      	movs	r0, #1
}
    a668:	b048      	add	sp, #288	; 0x120
    a66a:	bc04      	pop	{r2}
    a66c:	4693      	mov	fp, r2
    a66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a670:	0000b617 	.word	0x0000b617
    a674:	20000a68 	.word	0x20000a68
    a678:	00007e75 	.word	0x00007e75
    a67c:	00008475 	.word	0x00008475
    a680:	0000bac7 	.word	0x0000bac7
    a684:	0000bb21 	.word	0x0000bb21
    a688:	0000ba7d 	.word	0x0000ba7d
    a68c:	0000baf7 	.word	0x0000baf7
    a690:	000003e7 	.word	0x000003e7
    a694:	0000ebc4 	.word	0x0000ebc4
    a698:	0000ba39 	.word	0x0000ba39

0000a69c <store_file_packet>:
{
    a69c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a69e:	b083      	sub	sp, #12
    a6a0:	0005      	movs	r5, r0
    a6a2:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
    a6a4:	2800      	cmp	r0, #0
    a6a6:	d00c      	beq.n	a6c2 <store_file_packet+0x26>
    a6a8:	2900      	cmp	r1, #0
    a6aa:	d00a      	beq.n	a6c2 <store_file_packet+0x26>
	return ((down_state & mask) != 0);
    a6ac:	4b39      	ldr	r3, [pc, #228]	; (a794 <store_file_packet+0xf8>)
    a6ae:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
    a6b0:	071b      	lsls	r3, r3, #28
    a6b2:	d430      	bmi.n	a716 <store_file_packet+0x7a>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    a6b4:	4b38      	ldr	r3, [pc, #224]	; (a798 <store_file_packet+0xfc>)
    a6b6:	2230      	movs	r2, #48	; 0x30
    a6b8:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
    a6ba:	320a      	adds	r2, #10
    a6bc:	705a      	strb	r2, [r3, #1]
    a6be:	4c37      	ldr	r4, [pc, #220]	; (a79c <store_file_packet+0x100>)
    a6c0:	e005      	b.n	a6ce <store_file_packet+0x32>
		printf("store_file_packet: empty data.\r\n");
    a6c2:	4837      	ldr	r0, [pc, #220]	; (a7a0 <store_file_packet+0x104>)
    a6c4:	4b37      	ldr	r3, [pc, #220]	; (a7a4 <store_file_packet+0x108>)
    a6c6:	4798      	blx	r3
}
    a6c8:	b003      	add	sp, #12
    a6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
    a6cc:	0004      	movs	r4, r0
    a6ce:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
    a6d0:	7803      	ldrb	r3, [r0, #0]
    a6d2:	2b2f      	cmp	r3, #47	; 0x2f
    a6d4:	d1fa      	bne.n	a6cc <store_file_packet+0x30>
		if (strlen(cp) > 1) {
    a6d6:	4b34      	ldr	r3, [pc, #208]	; (a7a8 <store_file_packet+0x10c>)
    a6d8:	4798      	blx	r3
    a6da:	2801      	cmp	r0, #1
    a6dc:	d92f      	bls.n	a73e <store_file_packet+0xa2>
			strcpy(&save_file_name[2], cp);
    a6de:	4f2e      	ldr	r7, [pc, #184]	; (a798 <store_file_packet+0xfc>)
    a6e0:	1cb8      	adds	r0, r7, #2
    a6e2:	0021      	movs	r1, r4
    a6e4:	4b31      	ldr	r3, [pc, #196]	; (a7ac <store_file_packet+0x110>)
    a6e6:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    a6e8:	4c31      	ldr	r4, [pc, #196]	; (a7b0 <store_file_packet+0x114>)
    a6ea:	22fa      	movs	r2, #250	; 0xfa
    a6ec:	0039      	movs	r1, r7
    a6ee:	0020      	movs	r0, r4
    a6f0:	4b30      	ldr	r3, [pc, #192]	; (a7b4 <store_file_packet+0x118>)
    a6f2:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
    a6f4:	0039      	movs	r1, r7
    a6f6:	4830      	ldr	r0, [pc, #192]	; (a7b8 <store_file_packet+0x11c>)
    a6f8:	4b30      	ldr	r3, [pc, #192]	; (a7bc <store_file_packet+0x120>)
    a6fa:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    a6fc:	220a      	movs	r2, #10
    a6fe:	0039      	movs	r1, r7
    a700:	0020      	movs	r0, r4
    a702:	4b2f      	ldr	r3, [pc, #188]	; (a7c0 <store_file_packet+0x124>)
    a704:	4798      	blx	r3
		if (ret != FR_OK) {
    a706:	2800      	cmp	r0, #0
    a708:	d120      	bne.n	a74c <store_file_packet+0xb0>
		received_file_size = 0;
    a70a:	2200      	movs	r2, #0
    a70c:	4b2d      	ldr	r3, [pc, #180]	; (a7c4 <store_file_packet+0x128>)
    a70e:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
    a710:	2008      	movs	r0, #8
    a712:	4b2d      	ldr	r3, [pc, #180]	; (a7c8 <store_file_packet+0x12c>)
    a714:	4798      	blx	r3
		UINT wsize = 0;
    a716:	2300      	movs	r3, #0
    a718:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    a71a:	ab01      	add	r3, sp, #4
    a71c:	0032      	movs	r2, r6
    a71e:	0029      	movs	r1, r5
    a720:	4823      	ldr	r0, [pc, #140]	; (a7b0 <store_file_packet+0x114>)
    a722:	4c2a      	ldr	r4, [pc, #168]	; (a7cc <store_file_packet+0x130>)
    a724:	47a0      	blx	r4
		if (ret != FR_OK) {
    a726:	2800      	cmp	r0, #0
    a728:	d015      	beq.n	a756 <store_file_packet+0xba>
			f_close(&file_object);
    a72a:	4821      	ldr	r0, [pc, #132]	; (a7b0 <store_file_packet+0x114>)
    a72c:	4b28      	ldr	r3, [pc, #160]	; (a7d0 <store_file_packet+0x134>)
    a72e:	4798      	blx	r3
			add_state(CANCELED);
    a730:	2020      	movs	r0, #32
    a732:	4b25      	ldr	r3, [pc, #148]	; (a7c8 <store_file_packet+0x12c>)
    a734:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
    a736:	4827      	ldr	r0, [pc, #156]	; (a7d4 <store_file_packet+0x138>)
    a738:	4b1a      	ldr	r3, [pc, #104]	; (a7a4 <store_file_packet+0x108>)
    a73a:	4798      	blx	r3
			return;
    a73c:	e7c4      	b.n	a6c8 <store_file_packet+0x2c>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
    a73e:	4826      	ldr	r0, [pc, #152]	; (a7d8 <store_file_packet+0x13c>)
    a740:	4b18      	ldr	r3, [pc, #96]	; (a7a4 <store_file_packet+0x108>)
    a742:	4798      	blx	r3
			add_state(CANCELED);
    a744:	2020      	movs	r0, #32
    a746:	4b20      	ldr	r3, [pc, #128]	; (a7c8 <store_file_packet+0x12c>)
    a748:	4798      	blx	r3
			return;
    a74a:	e7bd      	b.n	a6c8 <store_file_packet+0x2c>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
    a74c:	0001      	movs	r1, r0
    a74e:	4823      	ldr	r0, [pc, #140]	; (a7dc <store_file_packet+0x140>)
    a750:	4b1a      	ldr	r3, [pc, #104]	; (a7bc <store_file_packet+0x120>)
    a752:	4798      	blx	r3
			return;
    a754:	e7b8      	b.n	a6c8 <store_file_packet+0x2c>
		received_file_size += wsize;
    a756:	4c1b      	ldr	r4, [pc, #108]	; (a7c4 <store_file_packet+0x128>)
    a758:	6823      	ldr	r3, [r4, #0]
    a75a:	9a01      	ldr	r2, [sp, #4]
    a75c:	4694      	mov	ip, r2
    a75e:	4463      	add	r3, ip
    a760:	0019      	movs	r1, r3
    a762:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    a764:	4d1e      	ldr	r5, [pc, #120]	; (a7e0 <store_file_packet+0x144>)
    a766:	682a      	ldr	r2, [r5, #0]
    a768:	481e      	ldr	r0, [pc, #120]	; (a7e4 <store_file_packet+0x148>)
    a76a:	4b14      	ldr	r3, [pc, #80]	; (a7bc <store_file_packet+0x120>)
    a76c:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
    a76e:	6822      	ldr	r2, [r4, #0]
    a770:	682b      	ldr	r3, [r5, #0]
    a772:	429a      	cmp	r2, r3
    a774:	d3a8      	bcc.n	a6c8 <store_file_packet+0x2c>
			f_close(&file_object);
    a776:	480e      	ldr	r0, [pc, #56]	; (a7b0 <store_file_packet+0x114>)
    a778:	4b15      	ldr	r3, [pc, #84]	; (a7d0 <store_file_packet+0x134>)
    a77a:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
    a77c:	481a      	ldr	r0, [pc, #104]	; (a7e8 <store_file_packet+0x14c>)
    a77e:	4b09      	ldr	r3, [pc, #36]	; (a7a4 <store_file_packet+0x108>)
    a780:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    a782:	2280      	movs	r2, #128	; 0x80
    a784:	0412      	lsls	r2, r2, #16
    a786:	4b19      	ldr	r3, [pc, #100]	; (a7ec <store_file_packet+0x150>)
    a788:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
    a78a:	2010      	movs	r0, #16
    a78c:	4b0e      	ldr	r3, [pc, #56]	; (a7c8 <store_file_packet+0x12c>)
    a78e:	4798      	blx	r3
			return;
    a790:	e79a      	b.n	a6c8 <store_file_packet+0x2c>
    a792:	46c0      	nop			; (mov r8, r8)
    a794:	20000835 	.word	0x20000835
    a798:	20000010 	.word	0x20000010
    a79c:	0000ef95 	.word	0x0000ef95
    a7a0:	0000ef98 	.word	0x0000ef98
    a7a4:	0000b895 	.word	0x0000b895
    a7a8:	0000bac7 	.word	0x0000bac7
    a7ac:	0000ba7d 	.word	0x0000ba7d
    a7b0:	20000a68 	.word	0x20000a68
    a7b4:	0000a511 	.word	0x0000a511
    a7b8:	0000efb8 	.word	0x0000efb8
    a7bc:	0000b779 	.word	0x0000b779
    a7c0:	00007e75 	.word	0x00007e75
    a7c4:	20000ed0 	.word	0x20000ed0
    a7c8:	0000a2c1 	.word	0x0000a2c1
    a7cc:	000081b1 	.word	0x000081b1
    a7d0:	00008475 	.word	0x00008475
    a7d4:	0000f054 	.word	0x0000f054
    a7d8:	0000efe0 	.word	0x0000efe0
    a7dc:	0000f020 	.word	0x0000f020
    a7e0:	20000a8c 	.word	0x20000a8c
    a7e4:	0000f090 	.word	0x0000f090
    a7e8:	0000f0c4 	.word	0x0000f0c4
    a7ec:	41004400 	.word	0x41004400

0000a7f0 <http_client_callback>:
{
    a7f0:	b510      	push	{r4, lr}
    a7f2:	0014      	movs	r4, r2
	switch (type) {
    a7f4:	2904      	cmp	r1, #4
    a7f6:	d806      	bhi.n	a806 <http_client_callback+0x16>
    a7f8:	0089      	lsls	r1, r1, #2
    a7fa:	4b2a      	ldr	r3, [pc, #168]	; (a8a4 <http_client_callback+0xb4>)
    a7fc:	585b      	ldr	r3, [r3, r1]
    a7fe:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    a800:	4829      	ldr	r0, [pc, #164]	; (a8a8 <http_client_callback+0xb8>)
    a802:	4b2a      	ldr	r3, [pc, #168]	; (a8ac <http_client_callback+0xbc>)
    a804:	4798      	blx	r3
}
    a806:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
    a808:	4829      	ldr	r0, [pc, #164]	; (a8b0 <http_client_callback+0xc0>)
    a80a:	4b28      	ldr	r3, [pc, #160]	; (a8ac <http_client_callback+0xbc>)
    a80c:	4798      	blx	r3
		add_state(GET_REQUESTED);
    a80e:	2004      	movs	r0, #4
    a810:	4b28      	ldr	r3, [pc, #160]	; (a8b4 <http_client_callback+0xc4>)
    a812:	4798      	blx	r3
		break;
    a814:	e7f7      	b.n	a806 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    a816:	8811      	ldrh	r1, [r2, #0]
    a818:	6852      	ldr	r2, [r2, #4]
    a81a:	4827      	ldr	r0, [pc, #156]	; (a8b8 <http_client_callback+0xc8>)
    a81c:	4b27      	ldr	r3, [pc, #156]	; (a8bc <http_client_callback+0xcc>)
    a81e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    a820:	8823      	ldrh	r3, [r4, #0]
    a822:	2bc8      	cmp	r3, #200	; 0xc8
    a824:	d10f      	bne.n	a846 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
    a826:	6861      	ldr	r1, [r4, #4]
    a828:	4b25      	ldr	r3, [pc, #148]	; (a8c0 <http_client_callback+0xd0>)
    a82a:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    a82c:	2200      	movs	r2, #0
    a82e:	4b25      	ldr	r3, [pc, #148]	; (a8c4 <http_client_callback+0xd4>)
    a830:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    a832:	4b25      	ldr	r3, [pc, #148]	; (a8c8 <http_client_callback+0xd8>)
    a834:	4299      	cmp	r1, r3
    a836:	d8e6      	bhi.n	a806 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    a838:	68a0      	ldr	r0, [r4, #8]
    a83a:	4b24      	ldr	r3, [pc, #144]	; (a8cc <http_client_callback+0xdc>)
    a83c:	4798      	blx	r3
			add_state(COMPLETED);
    a83e:	2010      	movs	r0, #16
    a840:	4b1c      	ldr	r3, [pc, #112]	; (a8b4 <http_client_callback+0xc4>)
    a842:	4798      	blx	r3
    a844:	e7df      	b.n	a806 <http_client_callback+0x16>
			add_state(CANCELED);
    a846:	2020      	movs	r0, #32
    a848:	4b1a      	ldr	r3, [pc, #104]	; (a8b4 <http_client_callback+0xc4>)
    a84a:	4798      	blx	r3
			return;
    a84c:	e7db      	b.n	a806 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    a84e:	6811      	ldr	r1, [r2, #0]
    a850:	6850      	ldr	r0, [r2, #4]
    a852:	4b1e      	ldr	r3, [pc, #120]	; (a8cc <http_client_callback+0xdc>)
    a854:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    a856:	7a23      	ldrb	r3, [r4, #8]
    a858:	2b00      	cmp	r3, #0
    a85a:	d0d4      	beq.n	a806 <http_client_callback+0x16>
			add_state(COMPLETED);
    a85c:	2010      	movs	r0, #16
    a85e:	4b15      	ldr	r3, [pc, #84]	; (a8b4 <http_client_callback+0xc4>)
    a860:	4798      	blx	r3
    a862:	e7d0      	b.n	a806 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    a864:	6811      	ldr	r1, [r2, #0]
    a866:	481a      	ldr	r0, [pc, #104]	; (a8d0 <http_client_callback+0xe0>)
    a868:	4b14      	ldr	r3, [pc, #80]	; (a8bc <http_client_callback+0xcc>)
    a86a:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    a86c:	6823      	ldr	r3, [r4, #0]
    a86e:	330b      	adds	r3, #11
    a870:	d1c9      	bne.n	a806 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
    a872:	4b18      	ldr	r3, [pc, #96]	; (a8d4 <http_client_callback+0xe4>)
    a874:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    a876:	071b      	lsls	r3, r3, #28
    a878:	d406      	bmi.n	a888 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
    a87a:	4b16      	ldr	r3, [pc, #88]	; (a8d4 <http_client_callback+0xe4>)
    a87c:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    a87e:	075a      	lsls	r2, r3, #29
    a880:	d40b      	bmi.n	a89a <http_client_callback+0xaa>
			start_download();
    a882:	4b15      	ldr	r3, [pc, #84]	; (a8d8 <http_client_callback+0xe8>)
    a884:	4798      	blx	r3
    a886:	e7be      	b.n	a806 <http_client_callback+0x16>
				f_close(&file_object);
    a888:	4814      	ldr	r0, [pc, #80]	; (a8dc <http_client_callback+0xec>)
    a88a:	4b15      	ldr	r3, [pc, #84]	; (a8e0 <http_client_callback+0xf0>)
    a88c:	4798      	blx	r3
	down_state &= ~mask;
    a88e:	4a11      	ldr	r2, [pc, #68]	; (a8d4 <http_client_callback+0xe4>)
    a890:	7813      	ldrb	r3, [r2, #0]
    a892:	2108      	movs	r1, #8
    a894:	438b      	bics	r3, r1
    a896:	7013      	strb	r3, [r2, #0]
    a898:	e7ef      	b.n	a87a <http_client_callback+0x8a>
    a89a:	2204      	movs	r2, #4
    a89c:	4393      	bics	r3, r2
    a89e:	4a0d      	ldr	r2, [pc, #52]	; (a8d4 <http_client_callback+0xe4>)
    a8a0:	7013      	strb	r3, [r2, #0]
    a8a2:	e7ee      	b.n	a882 <http_client_callback+0x92>
    a8a4:	0000e4b4 	.word	0x0000e4b4
    a8a8:	0000e600 	.word	0x0000e600
    a8ac:	0000b895 	.word	0x0000b895
    a8b0:	0000e638 	.word	0x0000e638
    a8b4:	0000a2c1 	.word	0x0000a2c1
    a8b8:	0000e664 	.word	0x0000e664
    a8bc:	0000b779 	.word	0x0000b779
    a8c0:	20000a8c 	.word	0x20000a8c
    a8c4:	20000ed0 	.word	0x20000ed0
    a8c8:	000005a6 	.word	0x000005a6
    a8cc:	0000a69d 	.word	0x0000a69d
    a8d0:	0000e6a0 	.word	0x0000e6a0
    a8d4:	20000835 	.word	0x20000835
    a8d8:	0000a365 	.word	0x0000a365
    a8dc:	20000a68 	.word	0x20000a68
    a8e0:	00008475 	.word	0x00008475

0000a8e4 <wifi_cb>:
{
    a8e4:	b510      	push	{r4, lr}
    a8e6:	b082      	sub	sp, #8
	switch (u8MsgType) {
    a8e8:	282c      	cmp	r0, #44	; 0x2c
    a8ea:	d003      	beq.n	a8f4 <wifi_cb+0x10>
    a8ec:	2832      	cmp	r0, #50	; 0x32
    a8ee:	d035      	beq.n	a95c <wifi_cb+0x78>
}
    a8f0:	b002      	add	sp, #8
    a8f2:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    a8f4:	780b      	ldrb	r3, [r1, #0]
    a8f6:	2b01      	cmp	r3, #1
    a8f8:	d01c      	beq.n	a934 <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    a8fa:	2b00      	cmp	r3, #0
    a8fc:	d1f8      	bne.n	a8f0 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    a8fe:	4826      	ldr	r0, [pc, #152]	; (a998 <wifi_cb+0xb4>)
    a900:	4b26      	ldr	r3, [pc, #152]	; (a99c <wifi_cb+0xb8>)
    a902:	4798      	blx	r3
	down_state &= ~mask;
    a904:	4a26      	ldr	r2, [pc, #152]	; (a9a0 <wifi_cb+0xbc>)
    a906:	7813      	ldrb	r3, [r2, #0]
    a908:	2102      	movs	r1, #2
    a90a:	438b      	bics	r3, r1
    a90c:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
    a90e:	071b      	lsls	r3, r3, #28
    a910:	d416      	bmi.n	a940 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
    a912:	4b23      	ldr	r3, [pc, #140]	; (a9a0 <wifi_cb+0xbc>)
    a914:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    a916:	075a      	lsls	r2, r3, #29
    a918:	d41b      	bmi.n	a952 <wifi_cb+0x6e>
			mqtt_disconnect(&mqtt_inst, 1);
    a91a:	2101      	movs	r1, #1
    a91c:	4821      	ldr	r0, [pc, #132]	; (a9a4 <wifi_cb+0xc0>)
    a91e:	4b22      	ldr	r3, [pc, #136]	; (a9a8 <wifi_cb+0xc4>)
    a920:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    a922:	23ff      	movs	r3, #255	; 0xff
    a924:	9300      	str	r3, [sp, #0]
    a926:	4b21      	ldr	r3, [pc, #132]	; (a9ac <wifi_cb+0xc8>)
    a928:	2202      	movs	r2, #2
    a92a:	2112      	movs	r1, #18
    a92c:	4820      	ldr	r0, [pc, #128]	; (a9b0 <wifi_cb+0xcc>)
    a92e:	4c21      	ldr	r4, [pc, #132]	; (a9b4 <wifi_cb+0xd0>)
    a930:	47a0      	blx	r4
    a932:	e7dd      	b.n	a8f0 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    a934:	4820      	ldr	r0, [pc, #128]	; (a9b8 <wifi_cb+0xd4>)
    a936:	4b19      	ldr	r3, [pc, #100]	; (a99c <wifi_cb+0xb8>)
    a938:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    a93a:	4b20      	ldr	r3, [pc, #128]	; (a9bc <wifi_cb+0xd8>)
    a93c:	4798      	blx	r3
    a93e:	e7d7      	b.n	a8f0 <wifi_cb+0xc>
				f_close(&file_object);
    a940:	481f      	ldr	r0, [pc, #124]	; (a9c0 <wifi_cb+0xdc>)
    a942:	4b20      	ldr	r3, [pc, #128]	; (a9c4 <wifi_cb+0xe0>)
    a944:	4798      	blx	r3
	down_state &= ~mask;
    a946:	4a16      	ldr	r2, [pc, #88]	; (a9a0 <wifi_cb+0xbc>)
    a948:	7813      	ldrb	r3, [r2, #0]
    a94a:	2108      	movs	r1, #8
    a94c:	438b      	bics	r3, r1
    a94e:	7013      	strb	r3, [r2, #0]
    a950:	e7df      	b.n	a912 <wifi_cb+0x2e>
    a952:	2204      	movs	r2, #4
    a954:	4393      	bics	r3, r2
    a956:	4a12      	ldr	r2, [pc, #72]	; (a9a0 <wifi_cb+0xbc>)
    a958:	7013      	strb	r3, [r2, #0]
    a95a:	e7de      	b.n	a91a <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    a95c:	788b      	ldrb	r3, [r1, #2]
    a95e:	784a      	ldrb	r2, [r1, #1]
    a960:	7808      	ldrb	r0, [r1, #0]
    a962:	78c9      	ldrb	r1, [r1, #3]
    a964:	9100      	str	r1, [sp, #0]
    a966:	0001      	movs	r1, r0
    a968:	4817      	ldr	r0, [pc, #92]	; (a9c8 <wifi_cb+0xe4>)
    a96a:	4c18      	ldr	r4, [pc, #96]	; (a9cc <wifi_cb+0xe8>)
    a96c:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    a96e:	2002      	movs	r0, #2
    a970:	4b17      	ldr	r3, [pc, #92]	; (a9d0 <wifi_cb+0xec>)
    a972:	4798      	blx	r3
		if(do_download_flag == 1)
    a974:	4b17      	ldr	r3, [pc, #92]	; (a9d4 <wifi_cb+0xf0>)
    a976:	781b      	ldrb	r3, [r3, #0]
    a978:	2b01      	cmp	r3, #1
    a97a:	d009      	beq.n	a990 <wifi_cb+0xac>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
    a97c:	4916      	ldr	r1, [pc, #88]	; (a9d8 <wifi_cb+0xf4>)
    a97e:	4809      	ldr	r0, [pc, #36]	; (a9a4 <wifi_cb+0xc0>)
    a980:	4b16      	ldr	r3, [pc, #88]	; (a9dc <wifi_cb+0xf8>)
    a982:	4798      	blx	r3
    a984:	2800      	cmp	r0, #0
    a986:	d0b3      	beq.n	a8f0 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
    a988:	4815      	ldr	r0, [pc, #84]	; (a9e0 <wifi_cb+0xfc>)
    a98a:	4b04      	ldr	r3, [pc, #16]	; (a99c <wifi_cb+0xb8>)
    a98c:	4798      	blx	r3
}
    a98e:	e7af      	b.n	a8f0 <wifi_cb+0xc>
			start_download();
    a990:	4b14      	ldr	r3, [pc, #80]	; (a9e4 <wifi_cb+0x100>)
    a992:	4798      	blx	r3
    a994:	e7ac      	b.n	a8f0 <wifi_cb+0xc>
    a996:	46c0      	nop			; (mov r8, r8)
    a998:	0000f118 	.word	0x0000f118
    a99c:	0000b895 	.word	0x0000b895
    a9a0:	20000835 	.word	0x20000835
    a9a4:	20000a94 	.word	0x20000a94
    a9a8:	00008fd5 	.word	0x00008fd5
    a9ac:	0000f138 	.word	0x0000f138
    a9b0:	0000f148 	.word	0x0000f148
    a9b4:	000025b1 	.word	0x000025b1
    a9b8:	0000f0f8 	.word	0x0000f0f8
    a9bc:	000025cd 	.word	0x000025cd
    a9c0:	20000a68 	.word	0x20000a68
    a9c4:	00008475 	.word	0x00008475
    a9c8:	0000f15c 	.word	0x0000f15c
    a9cc:	0000b779 	.word	0x0000b779
    a9d0:	0000a2c1 	.word	0x0000a2c1
    a9d4:	20000834 	.word	0x20000834
    a9d8:	0000ea64 	.word	0x0000ea64
    a9dc:	00008f11 	.word	0x00008f11
    a9e0:	0000f184 	.word	0x0000f184
    a9e4:	0000a365 	.word	0x0000a365

0000a9e8 <disable_console>:
{
    a9e8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    a9ea:	4d0a      	ldr	r5, [pc, #40]	; (aa14 <disable_console+0x2c>)
    a9ec:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    a9ee:	0020      	movs	r0, r4
    a9f0:	4b09      	ldr	r3, [pc, #36]	; (aa18 <disable_console+0x30>)
    a9f2:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a9f4:	231f      	movs	r3, #31
    a9f6:	4018      	ands	r0, r3
    a9f8:	3b1e      	subs	r3, #30
    a9fa:	4083      	lsls	r3, r0
    a9fc:	2280      	movs	r2, #128	; 0x80
    a9fe:	4907      	ldr	r1, [pc, #28]	; (aa1c <disable_console+0x34>)
    aa00:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    aa02:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    aa04:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    aa06:	2b00      	cmp	r3, #0
    aa08:	d1fc      	bne.n	aa04 <disable_console+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    aa0a:	6823      	ldr	r3, [r4, #0]
    aa0c:	2202      	movs	r2, #2
    aa0e:	4393      	bics	r3, r2
    aa10:	6023      	str	r3, [r4, #0]
}
    aa12:	bd70      	pop	{r4, r5, r6, pc}
    aa14:	20000800 	.word	0x20000800
    aa18:	00004b5d 	.word	0x00004b5d
    aa1c:	e000e100 	.word	0xe000e100

0000aa20 <configure_extint_channel>:
{
    aa20:	b510      	push	{r4, lr}
    aa22:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
    aa24:	ac01      	add	r4, sp, #4
    aa26:	0020      	movs	r0, r4
    aa28:	4b07      	ldr	r3, [pc, #28]	; (aa48 <configure_extint_channel+0x28>)
    aa2a:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    aa2c:	2337      	movs	r3, #55	; 0x37
    aa2e:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    aa30:	2300      	movs	r3, #0
    aa32:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    aa34:	3301      	adds	r3, #1
    aa36:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    aa38:	3301      	adds	r3, #1
    aa3a:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    aa3c:	0021      	movs	r1, r4
    aa3e:	2007      	movs	r0, #7
    aa40:	4b02      	ldr	r3, [pc, #8]	; (aa4c <configure_extint_channel+0x2c>)
    aa42:	4798      	blx	r3
}
    aa44:	b004      	add	sp, #16
    aa46:	bd10      	pop	{r4, pc}
    aa48:	000042ad 	.word	0x000042ad
    aa4c:	000042c1 	.word	0x000042c1

0000aa50 <configure_extint_callbacks>:
{
    aa50:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
    aa52:	2200      	movs	r2, #0
    aa54:	2107      	movs	r1, #7
    aa56:	4804      	ldr	r0, [pc, #16]	; (aa68 <configure_extint_callbacks+0x18>)
    aa58:	4b04      	ldr	r3, [pc, #16]	; (aa6c <configure_extint_callbacks+0x1c>)
    aa5a:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    aa5c:	2100      	movs	r1, #0
    aa5e:	2007      	movs	r0, #7
    aa60:	4b03      	ldr	r3, [pc, #12]	; (aa70 <configure_extint_callbacks+0x20>)
    aa62:	4798      	blx	r3
}
    aa64:	bd10      	pop	{r4, pc}
    aa66:	46c0      	nop			; (mov r8, r8)
    aa68:	0000a2d1 	.word	0x0000a2d1
    aa6c:	00004169 	.word	0x00004169
    aa70:	00004195 	.word	0x00004195

0000aa74 <check_boot_mode>:

/* 
* CHECK BOOT MODE 
*/ 
int check_boot_mode()
{
    aa74:	b510      	push	{r4, lr}
	
	printf("boot mode: checking if bootloader or app code is to run ....\n\r");
    aa76:	4818      	ldr	r0, [pc, #96]	; (aad8 <check_boot_mode+0x64>)
    aa78:	4b18      	ldr	r3, [pc, #96]	; (aadc <check_boot_mode+0x68>)
    aa7a:	4798      	blx	r3
	ver_check_address = VERSION_ADDRESS;
	ver_check_address_ptr = (uint16_t *)ver_check_address;
	
	

	if (isPressed == true)						// Button is pressed, run bootloader
    aa7c:	4b18      	ldr	r3, [pc, #96]	; (aae0 <check_boot_mode+0x6c>)
    aa7e:	781b      	ldrb	r3, [r3, #0]
    aa80:	2b00      	cmp	r3, #0
    aa82:	d10f      	bne.n	aaa4 <check_boot_mode+0x30>
		printf("boot mode: >> Bootloader Button pressed \n\r");	
		isPressed = false;
		return 0;
	}

	if (*otafu_check_address_ptr != 0xFF)		// OTAFU requested; run bootloader
    aa84:	4b17      	ldr	r3, [pc, #92]	; (aae4 <check_boot_mode+0x70>)
    aa86:	781b      	ldrb	r3, [r3, #0]
    aa88:	2bff      	cmp	r3, #255	; 0xff
    aa8a:	d113      	bne.n	aab4 <check_boot_mode+0x40>
		printf("boot mode: >> OTAFU \n\r");
		otafu_flag = true;
		return 0;
	}

	if (*app_check_address_ptr == 0xFFFFFFFF) 	// No application; run bootloader
    aa8c:	23f2      	movs	r3, #242	; 0xf2
    aa8e:	021b      	lsls	r3, r3, #8
    aa90:	681b      	ldr	r3, [r3, #0]
    aa92:	3301      	adds	r3, #1
    aa94:	d016      	beq.n	aac4 <check_boot_mode+0x50>
	{
		printf("boot mode: >> NO APP AVAILABLE \n\r");
		return 0;
	}

	if (*ver_check_address_ptr == 0xFF)			// Even if application is present, version flag is empty
    aa96:	23f0      	movs	r3, #240	; 0xf0
    aa98:	021b      	lsls	r3, r3, #8
    aa9a:	881b      	ldrh	r3, [r3, #0]
	{
		printf("boot mode: >> NO VERSION FLAG \n\r");
		return 0;
	}
	return 1;
    aa9c:	2001      	movs	r0, #1
	if (*ver_check_address_ptr == 0xFF)			// Even if application is present, version flag is empty
    aa9e:	2bff      	cmp	r3, #255	; 0xff
    aaa0:	d015      	beq.n	aace <check_boot_mode+0x5a>
}
    aaa2:	bd10      	pop	{r4, pc}
		printf("boot mode: >> Bootloader Button pressed \n\r");	
    aaa4:	4810      	ldr	r0, [pc, #64]	; (aae8 <check_boot_mode+0x74>)
    aaa6:	4b0d      	ldr	r3, [pc, #52]	; (aadc <check_boot_mode+0x68>)
    aaa8:	4798      	blx	r3
		isPressed = false;
    aaaa:	2200      	movs	r2, #0
    aaac:	4b0c      	ldr	r3, [pc, #48]	; (aae0 <check_boot_mode+0x6c>)
    aaae:	701a      	strb	r2, [r3, #0]
		return 0;
    aab0:	2000      	movs	r0, #0
    aab2:	e7f6      	b.n	aaa2 <check_boot_mode+0x2e>
		printf("boot mode: >> OTAFU \n\r");
    aab4:	480d      	ldr	r0, [pc, #52]	; (aaec <check_boot_mode+0x78>)
    aab6:	4b09      	ldr	r3, [pc, #36]	; (aadc <check_boot_mode+0x68>)
    aab8:	4798      	blx	r3
		otafu_flag = true;
    aaba:	2201      	movs	r2, #1
    aabc:	4b0c      	ldr	r3, [pc, #48]	; (aaf0 <check_boot_mode+0x7c>)
    aabe:	701a      	strb	r2, [r3, #0]
		return 0;
    aac0:	2000      	movs	r0, #0
    aac2:	e7ee      	b.n	aaa2 <check_boot_mode+0x2e>
		printf("boot mode: >> NO APP AVAILABLE \n\r");
    aac4:	480b      	ldr	r0, [pc, #44]	; (aaf4 <check_boot_mode+0x80>)
    aac6:	4b05      	ldr	r3, [pc, #20]	; (aadc <check_boot_mode+0x68>)
    aac8:	4798      	blx	r3
		return 0;
    aaca:	2000      	movs	r0, #0
    aacc:	e7e9      	b.n	aaa2 <check_boot_mode+0x2e>
		printf("boot mode: >> NO VERSION FLAG \n\r");
    aace:	480a      	ldr	r0, [pc, #40]	; (aaf8 <check_boot_mode+0x84>)
    aad0:	4b02      	ldr	r3, [pc, #8]	; (aadc <check_boot_mode+0x68>)
    aad2:	4798      	blx	r3
		return 0;
    aad4:	2000      	movs	r0, #0
    aad6:	e7e4      	b.n	aaa2 <check_boot_mode+0x2e>
    aad8:	0000e4f8 	.word	0x0000e4f8
    aadc:	0000b779 	.word	0x0000b779
    aae0:	20000a90 	.word	0x20000a90
    aae4:	0000f002 	.word	0x0000f002
    aae8:	0000e538 	.word	0x0000e538
    aaec:	0000e564 	.word	0x0000e564
    aaf0:	20000ecc 	.word	0x20000ecc
    aaf4:	0000e57c 	.word	0x0000e57c
    aaf8:	0000e5a0 	.word	0x0000e5a0

0000aafc <disable_peripherals>:

/* 
* DEINITIALIZE HARDWARE 
*/
void disable_peripherals()
{
    aafc:	b510      	push	{r4, lr}
	printf("disable peripherals: Deinitializing peripherals ..... \n\r");
    aafe:	4807      	ldr	r0, [pc, #28]	; (ab1c <disable_peripherals+0x20>)
    ab00:	4b07      	ldr	r3, [pc, #28]	; (ab20 <disable_peripherals+0x24>)
    ab02:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    ab04:	b672      	cpsid	i
    ab06:	f3bf 8f5f 	dmb	sy
	
	cpu_irq_disable();
    ab0a:	2200      	movs	r2, #0
    ab0c:	4b05      	ldr	r3, [pc, #20]	; (ab24 <disable_peripherals+0x28>)
    ab0e:	701a      	strb	r2, [r3, #0]
	disable_console();
    ab10:	4b05      	ldr	r3, [pc, #20]	; (ab28 <disable_peripherals+0x2c>)
    ab12:	4798      	blx	r3
	sd_deinit();
    ab14:	4b05      	ldr	r3, [pc, #20]	; (ab2c <disable_peripherals+0x30>)
    ab16:	4798      	blx	r3
}
    ab18:	bd10      	pop	{r4, pc}
    ab1a:	46c0      	nop			; (mov r8, r8)
    ab1c:	0000e5c4 	.word	0x0000e5c4
    ab20:	0000b779 	.word	0x0000b779
    ab24:	2000000e 	.word	0x2000000e
    ab28:	0000a9e9 	.word	0x0000a9e9
    ab2c:	00000cbd 	.word	0x00000cbd

0000ab30 <jump_to_app>:

/* 
* JUMP TO APPLICATION CODE 
*/ 
static void jump_to_app(void)
{
    ab30:	b580      	push	{r7, lr}
    ab32:	af00      	add	r7, sp, #0
	
	printf("jump_to_app: Jumping to Application ..... \n\r");
    ab34:	4808      	ldr	r0, [pc, #32]	; (ab58 <jump_to_app+0x28>)
    ab36:	4b09      	ldr	r3, [pc, #36]	; (ab5c <jump_to_app+0x2c>)
    ab38:	4798      	blx	r3
	
	disable_peripherals();
    ab3a:	4b09      	ldr	r3, [pc, #36]	; (ab60 <jump_to_app+0x30>)
    ab3c:	4798      	blx	r3
	
	/// Function pointer to application section
	void (*applicationCodeEntry)(void);
	/// Rebase stack pointer
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    ab3e:	23f2      	movs	r3, #242	; 0xf2
    ab40:	021b      	lsls	r3, r3, #8
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    ab42:	681a      	ldr	r2, [r3, #0]
    ab44:	f382 8808 	msr	MSP, r2
	/// Rebase vector table
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    ab48:	4a06      	ldr	r2, [pc, #24]	; (ab64 <jump_to_app+0x34>)
    ab4a:	6093      	str	r3, [r2, #8]
	/// Set pointer to application section
	applicationCodeEntry =
	(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    ab4c:	4b06      	ldr	r3, [pc, #24]	; (ab68 <jump_to_app+0x38>)

	/// Jump to application
	applicationCodeEntry();
    ab4e:	681b      	ldr	r3, [r3, #0]
    ab50:	4798      	blx	r3
}
    ab52:	46bd      	mov	sp, r7
    ab54:	bd80      	pop	{r7, pc}
    ab56:	46c0      	nop			; (mov r8, r8)
    ab58:	0000e6d0 	.word	0x0000e6d0
    ab5c:	0000b779 	.word	0x0000b779
    ab60:	0000aafd 	.word	0x0000aafd
    ab64:	e000ed00 	.word	0xe000ed00
    ab68:	0000f204 	.word	0x0000f204

0000ab6c <sd_card_to_nvm_copy>:

/* 
* ALL SD CARD OPERATIONS 
*/ 
int sd_card_to_nvm_copy()
{	
    ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab6e:	46de      	mov	lr, fp
    ab70:	4657      	mov	r7, sl
    ab72:	464e      	mov	r6, r9
    ab74:	4645      	mov	r5, r8
    ab76:	b5e0      	push	{r5, r6, r7, lr}
    ab78:	b0db      	sub	sp, #364	; 0x16c
	printf("sd_card_to_nvm_copy: Reading card ..... \n\r");
    ab7a:	4894      	ldr	r0, [pc, #592]	; (adcc <sd_card_to_nvm_copy+0x260>)
    ab7c:	4b94      	ldr	r3, [pc, #592]	; (add0 <sd_card_to_nvm_copy+0x264>)
    ab7e:	4798      	blx	r3
	///////////////////////////////////////////////////////
	
			
	/************* Check for Firmware version on SD Card ***************/
	
	ver_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ab80:	4994      	ldr	r1, [pc, #592]	; (add4 <sd_card_to_nvm_copy+0x268>)
    ab82:	2330      	movs	r3, #48	; 0x30
    ab84:	700b      	strb	r3, [r1, #0]
	res1 = f_open(&file_object,(char const *)ver_file_name,FA_READ);
    ab86:	4c94      	ldr	r4, [pc, #592]	; (add8 <sd_card_to_nvm_copy+0x26c>)
    ab88:	2201      	movs	r2, #1
    ab8a:	0020      	movs	r0, r4
    ab8c:	4b93      	ldr	r3, [pc, #588]	; (addc <sd_card_to_nvm_copy+0x270>)
    ab8e:	4798      	blx	r3
	f_gets(sd_version_num,&file_object.fsize,&file_object);
    ab90:	0021      	movs	r1, r4
    ab92:	310c      	adds	r1, #12
    ab94:	0022      	movs	r2, r4
    ab96:	a859      	add	r0, sp, #356	; 0x164
    ab98:	4b91      	ldr	r3, [pc, #580]	; (ade0 <sd_card_to_nvm_copy+0x274>)
    ab9a:	4798      	blx	r3
	f_close(&file_object);	
    ab9c:	0020      	movs	r0, r4
    ab9e:	4b91      	ldr	r3, [pc, #580]	; (ade4 <sd_card_to_nvm_copy+0x278>)
    aba0:	4798      	blx	r3
	
	uint8_t sd_version_num1 = atoi(sd_version_num);		
    aba2:	a859      	add	r0, sp, #356	; 0x164
    aba4:	4b90      	ldr	r3, [pc, #576]	; (ade8 <sd_card_to_nvm_copy+0x27c>)
    aba6:	4798      	blx	r3
    aba8:	23d7      	movs	r3, #215	; 0xd7
    abaa:	446b      	add	r3, sp
    abac:	7018      	strb	r0, [r3, #0]
	
	do
	{
		error_code = nvm_read_buffer(VERSION_ADDRESS,&nvm_version_num,1);			
    abae:	25f0      	movs	r5, #240	; 0xf0
    abb0:	022d      	lsls	r5, r5, #8
    abb2:	4c8e      	ldr	r4, [pc, #568]	; (adec <sd_card_to_nvm_copy+0x280>)
    abb4:	2201      	movs	r2, #1
    abb6:	2364      	movs	r3, #100	; 0x64
    abb8:	33ff      	adds	r3, #255	; 0xff
    abba:	446b      	add	r3, sp
    abbc:	0019      	movs	r1, r3
    abbe:	0028      	movs	r0, r5
    abc0:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
    abc2:	2805      	cmp	r0, #5
    abc4:	d0f6      	beq.n	abb4 <sd_card_to_nvm_copy+0x48>
		
	char str11[50];
	char str21[50];
	sprintf(str11, "SD_VER = %u\n\r", (uint8_t)sd_version_num1);
    abc6:	23d7      	movs	r3, #215	; 0xd7
    abc8:	446b      	add	r3, sp
    abca:	781a      	ldrb	r2, [r3, #0]
    abcc:	4988      	ldr	r1, [pc, #544]	; (adf0 <sd_card_to_nvm_copy+0x284>)
    abce:	a829      	add	r0, sp, #164	; 0xa4
    abd0:	4f88      	ldr	r7, [pc, #544]	; (adf4 <sd_card_to_nvm_copy+0x288>)
    abd2:	47b8      	blx	r7
	printf("%s",str11);
    abd4:	4e88      	ldr	r6, [pc, #544]	; (adf8 <sd_card_to_nvm_copy+0x28c>)
    abd6:	a929      	add	r1, sp, #164	; 0xa4
    abd8:	0030      	movs	r0, r6
    abda:	4d7d      	ldr	r5, [pc, #500]	; (add0 <sd_card_to_nvm_copy+0x264>)
    abdc:	47a8      	blx	r5
	//SerialConsoleWriteString(str11);
	sprintf(str21, "NVM_VER = %u\n\r", (uint8_t)nvm_version_num);
    abde:	2464      	movs	r4, #100	; 0x64
    abe0:	34ff      	adds	r4, #255	; 0xff
    abe2:	446c      	add	r4, sp
    abe4:	7822      	ldrb	r2, [r4, #0]
    abe6:	4985      	ldr	r1, [pc, #532]	; (adfc <sd_card_to_nvm_copy+0x290>)
    abe8:	a81c      	add	r0, sp, #112	; 0x70
    abea:	47b8      	blx	r7
	printf("%s",str21);
    abec:	a91c      	add	r1, sp, #112	; 0x70
    abee:	0030      	movs	r0, r6
    abf0:	47a8      	blx	r5
	//SerialConsoleWriteString(str21);
	
	if((((uint8_t) nvm_version_num != 255) && ((uint8_t)sd_version_num[0] > (uint8_t)nvm_version_num)) || ((uint8_t) nvm_version_num == 255))   ///<changed here
    abf2:	7823      	ldrb	r3, [r4, #0]
    abf4:	2bff      	cmp	r3, #255	; 0xff
    abf6:	d003      	beq.n	ac00 <sd_card_to_nvm_copy+0x94>
    abf8:	aa59      	add	r2, sp, #356	; 0x164
    abfa:	7812      	ldrb	r2, [r2, #0]
    abfc:	429a      	cmp	r2, r3
    abfe:	d95c      	bls.n	acba <sd_card_to_nvm_copy+0x14e>
	{
		printf("sd_card_to_nvm_copy: Version Different, Writing new code ..... \n\r");
    ac00:	487f      	ldr	r0, [pc, #508]	; (ae00 <sd_card_to_nvm_copy+0x294>)
    ac02:	4b73      	ldr	r3, [pc, #460]	; (add0 <sd_card_to_nvm_copy+0x264>)
    ac04:	4798      	blx	r3
	
	
	//SD_OPERATION:
	
	/**************** Open Firmware File ******************/
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ac06:	497f      	ldr	r1, [pc, #508]	; (ae04 <sd_card_to_nvm_copy+0x298>)
    ac08:	2330      	movs	r3, #48	; 0x30
    ac0a:	700b      	strb	r3, [r1, #0]
	res1 = f_open(&file_object,(char const*)test_file_name,FA_READ);
    ac0c:	2201      	movs	r2, #1
    ac0e:	4872      	ldr	r0, [pc, #456]	; (add8 <sd_card_to_nvm_copy+0x26c>)
    ac10:	4b72      	ldr	r3, [pc, #456]	; (addc <sd_card_to_nvm_copy+0x270>)
    ac12:	4798      	blx	r3
	if (res1 != FR_OK)
    ac14:	2800      	cmp	r0, #0
    ac16:	d156      	bne.n	acc6 <sd_card_to_nvm_copy+0x15a>
			printf("sd operation: >> Opening a file failed\n\r");
			//goto BOOT_CHECK;
			return 1;
		}
	
	printf("sd operation: >> File open success\n\r");
    ac18:	487b      	ldr	r0, [pc, #492]	; (ae08 <sd_card_to_nvm_copy+0x29c>)
    ac1a:	4c6d      	ldr	r4, [pc, #436]	; (add0 <sd_card_to_nvm_copy+0x264>)
    ac1c:	47a0      	blx	r4
	
	
	/**************** Read one Page at a time, Erase NVM and write to NVM ******************/
	
	printf("sd operation: initiating firmware write to nvm ....... \n\r");
    ac1e:	487b      	ldr	r0, [pc, #492]	; (ae0c <sd_card_to_nvm_copy+0x2a0>)
    ac20:	47a0      	blx	r4

	uint32_t bytes_read = 0;
    ac22:	2300      	movs	r3, #0
    ac24:	931b      	str	r3, [sp, #108]	; 0x6c
	uint32_t num_pages=0;
	uint32_t off_set=0;
	uint32_t fw_size= f_size(&file_object);
    ac26:	4b6c      	ldr	r3, [pc, #432]	; (add8 <sd_card_to_nvm_copy+0x26c>)
    ac28:	68df      	ldr	r7, [r3, #12]
	uint32_t rem = fw_size%NVMCTRL_PAGE_SIZE;
    ac2a:	233f      	movs	r3, #63	; 0x3f
    ac2c:	403b      	ands	r3, r7
    ac2e:	4699      	mov	r9, r3
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
	}
	else
	{
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE);
    ac30:	09bb      	lsrs	r3, r7, #6
    ac32:	4698      	mov	r8, r3
	if(rem!=0)
    ac34:	464b      	mov	r3, r9
    ac36:	2b00      	cmp	r3, #0
    ac38:	d005      	beq.n	ac46 <sd_card_to_nvm_copy+0xda>
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
    ac3a:	4643      	mov	r3, r8
    ac3c:	1c5a      	adds	r2, r3, #1
    ac3e:	4690      	mov	r8, r2
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
    ac40:	019b      	lsls	r3, r3, #6
    ac42:	1afb      	subs	r3, r7, r3
    ac44:	4699      	mov	r9, r3
		off_set = 0;
	}
		
	if (fw_size != 0)
    ac46:	2f00      	cmp	r7, #0
    ac48:	d148      	bne.n	acdc <sd_card_to_nvm_copy+0x170>
					crc32_recalculate(page_buffer1,NVMCTRL_PAGE_SIZE,&crc_mem1);
				}
				
		}
	}
	f_close(&file_object);
    ac4a:	4863      	ldr	r0, [pc, #396]	; (add8 <sd_card_to_nvm_copy+0x26c>)
    ac4c:	4b65      	ldr	r3, [pc, #404]	; (ade4 <sd_card_to_nvm_copy+0x278>)
    ac4e:	4798      	blx	r3
		
	
	/** -------------- CRC Verification ----------------------------- */
	printf("sd operation: verfying crc of sd card firmware and nvm firmware ....... \n\r");
    ac50:	486f      	ldr	r0, [pc, #444]	; (ae10 <sd_card_to_nvm_copy+0x2a4>)
    ac52:	4c5f      	ldr	r4, [pc, #380]	; (add0 <sd_card_to_nvm_copy+0x264>)
    ac54:	47a0      	blx	r4

	char str1[50];
	char str2[50];
	sprintf(str1, "CRC_MEM = %u\n\r", (uint32_t*)crc_mem);
    ac56:	9a57      	ldr	r2, [sp, #348]	; 0x15c
    ac58:	496e      	ldr	r1, [pc, #440]	; (ae14 <sd_card_to_nvm_copy+0x2a8>)
    ac5a:	a80e      	add	r0, sp, #56	; 0x38
    ac5c:	4e65      	ldr	r6, [pc, #404]	; (adf4 <sd_card_to_nvm_copy+0x288>)
    ac5e:	47b0      	blx	r6
	//SerialConsoleWriteString(str1);
	printf("%s",str1);
    ac60:	4d65      	ldr	r5, [pc, #404]	; (adf8 <sd_card_to_nvm_copy+0x28c>)
    ac62:	a90e      	add	r1, sp, #56	; 0x38
    ac64:	0028      	movs	r0, r5
    ac66:	47a0      	blx	r4
	sprintf(str2, "CRC_NVM = %u\n\r", (uint32_t*)crc_mem1);
    ac68:	9a56      	ldr	r2, [sp, #344]	; 0x158
    ac6a:	496b      	ldr	r1, [pc, #428]	; (ae18 <sd_card_to_nvm_copy+0x2ac>)
    ac6c:	a801      	add	r0, sp, #4
    ac6e:	47b0      	blx	r6
	printf("%s",str2);
    ac70:	a901      	add	r1, sp, #4
    ac72:	0028      	movs	r0, r5
    ac74:	47a0      	blx	r4
	//SerialConsoleWriteString(str2);
	
	delay_s(1);
    ac76:	20fa      	movs	r0, #250	; 0xfa
    ac78:	0080      	lsls	r0, r0, #2
    ac7a:	4b68      	ldr	r3, [pc, #416]	; (ae1c <sd_card_to_nvm_copy+0x2b0>)
    ac7c:	4798      	blx	r3
	
	if(crc_mem == crc_mem1)
    ac7e:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    ac80:	9a56      	ldr	r2, [sp, #344]	; 0x158
    ac82:	4293      	cmp	r3, r2
    ac84:	d122      	bne.n	accc <sd_card_to_nvm_copy+0x160>
	{
		do
		{
			error_code = nvm_erase_row(VERSION_ADDRESS);
    ac86:	25f0      	movs	r5, #240	; 0xf0
    ac88:	022d      	lsls	r5, r5, #8
    ac8a:	4c65      	ldr	r4, [pc, #404]	; (ae20 <sd_card_to_nvm_copy+0x2b4>)
    ac8c:	0028      	movs	r0, r5
    ac8e:	47a0      	blx	r4
		} while (error_code == STATUS_BUSY);		
    ac90:	2805      	cmp	r0, #5
    ac92:	d0fb      	beq.n	ac8c <sd_card_to_nvm_copy+0x120>
		
		do
		{
			error_code = nvm_write_buffer(VERSION_ADDRESS,&sd_version_num1,1);
    ac94:	25f0      	movs	r5, #240	; 0xf0
    ac96:	022d      	lsls	r5, r5, #8
    ac98:	4c62      	ldr	r4, [pc, #392]	; (ae24 <sd_card_to_nvm_copy+0x2b8>)
    ac9a:	2201      	movs	r2, #1
    ac9c:	23d7      	movs	r3, #215	; 0xd7
    ac9e:	446b      	add	r3, sp
    aca0:	0019      	movs	r1, r3
    aca2:	0028      	movs	r0, r5
    aca4:	47a0      	blx	r4
		} while (error_code == STATUS_BUSY);
    aca6:	2805      	cmp	r0, #5
    aca8:	d0f7      	beq.n	ac9a <sd_card_to_nvm_copy+0x12e>
		
		printf("sd operation: >> NEW FIRMWARE VERSION UPDATED \n\r");		
    acaa:	485f      	ldr	r0, [pc, #380]	; (ae28 <sd_card_to_nvm_copy+0x2bc>)
    acac:	4c48      	ldr	r4, [pc, #288]	; (add0 <sd_card_to_nvm_copy+0x264>)
    acae:	47a0      	blx	r4
		printf("sd operation: >> NEW FIRMWARE WRITTEN SUCCESSFULLY \n\r");
    acb0:	485e      	ldr	r0, [pc, #376]	; (ae2c <sd_card_to_nvm_copy+0x2c0>)
    acb2:	47a0      	blx	r4

		jump_to_app();
    acb4:	4b5e      	ldr	r3, [pc, #376]	; (ae30 <sd_card_to_nvm_copy+0x2c4>)
    acb6:	4798      	blx	r3
	else
	{
		//goto BOOT_CHECK;
		return 1;
	}
}
    acb8:	e009      	b.n	acce <sd_card_to_nvm_copy+0x162>
		printf("sd_card_to_nvm_copy: >> Version Same \n\r");
    acba:	485e      	ldr	r0, [pc, #376]	; (ae34 <sd_card_to_nvm_copy+0x2c8>)
    acbc:	4b44      	ldr	r3, [pc, #272]	; (add0 <sd_card_to_nvm_copy+0x264>)
    acbe:	4798      	blx	r3
		jump_to_app();
    acc0:	4b5b      	ldr	r3, [pc, #364]	; (ae30 <sd_card_to_nvm_copy+0x2c4>)
    acc2:	4798      	blx	r3
    acc4:	e79f      	b.n	ac06 <sd_card_to_nvm_copy+0x9a>
			printf("sd operation: >> Opening a file failed\n\r");
    acc6:	485c      	ldr	r0, [pc, #368]	; (ae38 <sd_card_to_nvm_copy+0x2cc>)
    acc8:	4b41      	ldr	r3, [pc, #260]	; (add0 <sd_card_to_nvm_copy+0x264>)
    acca:	4798      	blx	r3
    accc:	2001      	movs	r0, #1
}
    acce:	b05b      	add	sp, #364	; 0x16c
    acd0:	bc3c      	pop	{r2, r3, r4, r5}
    acd2:	4690      	mov	r8, r2
    acd4:	4699      	mov	r9, r3
    acd6:	46a2      	mov	sl, r4
    acd8:	46ab      	mov	fp, r5
    acda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t rows_clear = fw_size / NVMCTRL_ROW_SIZE;
    acdc:	0a3f      	lsrs	r7, r7, #8
    acde:	b2bf      	uxth	r7, r7
		printf("sd operation: erasing nvm location ....... \n\r");
    ace0:	4856      	ldr	r0, [pc, #344]	; (ae3c <sd_card_to_nvm_copy+0x2d0>)
    ace2:	4b3b      	ldr	r3, [pc, #236]	; (add0 <sd_card_to_nvm_copy+0x264>)
    ace4:	4798      	blx	r3
		for (i = 0; i <= rows_clear; i++)
    ace6:	2600      	movs	r6, #0
					error_code = nvm_erase_row((APP_START_ADDRESS) + (NVMCTRL_ROW_SIZE * i));
    ace8:	4d4d      	ldr	r5, [pc, #308]	; (ae20 <sd_card_to_nvm_copy+0x2b4>)
    acea:	0234      	lsls	r4, r6, #8
    acec:	23f2      	movs	r3, #242	; 0xf2
    acee:	021b      	lsls	r3, r3, #8
    acf0:	469c      	mov	ip, r3
    acf2:	4464      	add	r4, ip
    acf4:	0020      	movs	r0, r4
    acf6:	47a8      	blx	r5
			} while (error_code == STATUS_BUSY);
    acf8:	2805      	cmp	r0, #5
    acfa:	d0fb      	beq.n	acf4 <sd_card_to_nvm_copy+0x188>
		for (i = 0; i <= rows_clear; i++)
    acfc:	3601      	adds	r6, #1
    acfe:	b2b6      	uxth	r6, r6
    ad00:	42b7      	cmp	r7, r6
    ad02:	d2f2      	bcs.n	acea <sd_card_to_nvm_copy+0x17e>
		printf("sd operation: writing firmware to crc ....... \n\r");
    ad04:	484e      	ldr	r0, [pc, #312]	; (ae40 <sd_card_to_nvm_copy+0x2d4>)
    ad06:	4b32      	ldr	r3, [pc, #200]	; (add0 <sd_card_to_nvm_copy+0x264>)
    ad08:	4798      	blx	r3
		for(uint16_t j=0;j<num_pages;j++)
    ad0a:	4643      	mov	r3, r8
    ad0c:	2b00      	cmp	r3, #0
    ad0e:	d059      	beq.n	adc4 <sd_card_to_nvm_copy+0x258>
    ad10:	2400      	movs	r4, #0
    ad12:	2600      	movs	r6, #0
				f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
    ad14:	4b4b      	ldr	r3, [pc, #300]	; (ae44 <sd_card_to_nvm_copy+0x2d8>)
    ad16:	469b      	mov	fp, r3
    ad18:	e018      	b.n	ad4c <sd_card_to_nvm_copy+0x1e0>
					crc32_recalculate(page_buffer,NVMCTRL_PAGE_SIZE,&crc_mem);
    ad1a:	aa57      	add	r2, sp, #348	; 0x15c
    ad1c:	2140      	movs	r1, #64	; 0x40
    ad1e:	a846      	add	r0, sp, #280	; 0x118
    ad20:	4b49      	ldr	r3, [pc, #292]	; (ae48 <sd_card_to_nvm_copy+0x2dc>)
    ad22:	4798      	blx	r3
					error_code = nvm_write_buffer(APP_START_ADDRESS+(j*NVMCTRL_PAGE_SIZE),page_buffer,bytes_read);
    ad24:	01b4      	lsls	r4, r6, #6
    ad26:	23f2      	movs	r3, #242	; 0xf2
    ad28:	021b      	lsls	r3, r3, #8
    ad2a:	469c      	mov	ip, r3
    ad2c:	4464      	add	r4, ip
    ad2e:	4d3d      	ldr	r5, [pc, #244]	; (ae24 <sd_card_to_nvm_copy+0x2b8>)
    ad30:	466b      	mov	r3, sp
    ad32:	226c      	movs	r2, #108	; 0x6c
    ad34:	189b      	adds	r3, r3, r2
    ad36:	881a      	ldrh	r2, [r3, #0]
    ad38:	a946      	add	r1, sp, #280	; 0x118
    ad3a:	0020      	movs	r0, r4
    ad3c:	47a8      	blx	r5
				} while (error_code == STATUS_BUSY);
    ad3e:	2805      	cmp	r0, #5
    ad40:	d0f6      	beq.n	ad30 <sd_card_to_nvm_copy+0x1c4>
		for(uint16_t j=0;j<num_pages;j++)
    ad42:	3601      	adds	r6, #1
    ad44:	b2b6      	uxth	r6, r6
    ad46:	0034      	movs	r4, r6
    ad48:	45b0      	cmp	r8, r6
    ad4a:	d911      	bls.n	ad70 <sd_card_to_nvm_copy+0x204>
				f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
    ad4c:	ab1b      	add	r3, sp, #108	; 0x6c
    ad4e:	2240      	movs	r2, #64	; 0x40
    ad50:	a946      	add	r1, sp, #280	; 0x118
    ad52:	4821      	ldr	r0, [pc, #132]	; (add8 <sd_card_to_nvm_copy+0x26c>)
    ad54:	47d8      	blx	fp
				if((j==(num_pages-1)) && off_set!=0)
    ad56:	4643      	mov	r3, r8
    ad58:	1e5f      	subs	r7, r3, #1
    ad5a:	42a7      	cmp	r7, r4
    ad5c:	d1dd      	bne.n	ad1a <sd_card_to_nvm_copy+0x1ae>
    ad5e:	464b      	mov	r3, r9
    ad60:	2b00      	cmp	r3, #0
    ad62:	d0da      	beq.n	ad1a <sd_card_to_nvm_copy+0x1ae>
					crc32_recalculate(page_buffer,off_set,&crc_mem);
    ad64:	aa57      	add	r2, sp, #348	; 0x15c
    ad66:	4649      	mov	r1, r9
    ad68:	a846      	add	r0, sp, #280	; 0x118
    ad6a:	4b37      	ldr	r3, [pc, #220]	; (ae48 <sd_card_to_nvm_copy+0x2dc>)
    ad6c:	4798      	blx	r3
    ad6e:	e7d9      	b.n	ad24 <sd_card_to_nvm_copy+0x1b8>
		printf("sd operation: calculating nvm firmware crc ....... \n\r");
    ad70:	4836      	ldr	r0, [pc, #216]	; (ae4c <sd_card_to_nvm_copy+0x2e0>)
    ad72:	4b17      	ldr	r3, [pc, #92]	; (add0 <sd_card_to_nvm_copy+0x264>)
    ad74:	4798      	blx	r3
    ad76:	2300      	movs	r3, #0
    ad78:	469a      	mov	sl, r3
    ad7a:	2600      	movs	r6, #0
					error_code = nvm_read_buffer(APP_START_ADDRESS+(k*NVMCTRL_PAGE_SIZE),page_buffer1,NVMCTRL_PAGE_SIZE);
    ad7c:	4d1b      	ldr	r5, [pc, #108]	; (adec <sd_card_to_nvm_copy+0x280>)
					crc32_recalculate(page_buffer1,NVMCTRL_PAGE_SIZE,&crc_mem1);
    ad7e:	4b32      	ldr	r3, [pc, #200]	; (ae48 <sd_card_to_nvm_copy+0x2dc>)
    ad80:	469b      	mov	fp, r3
    ad82:	e009      	b.n	ad98 <sd_card_to_nvm_copy+0x22c>
    ad84:	aa56      	add	r2, sp, #344	; 0x158
    ad86:	2140      	movs	r1, #64	; 0x40
    ad88:	a836      	add	r0, sp, #216	; 0xd8
    ad8a:	47d8      	blx	fp
		for(uint16_t k=0;k<num_pages;k++)
    ad8c:	3601      	adds	r6, #1
    ad8e:	b2b6      	uxth	r6, r6
    ad90:	46b2      	mov	sl, r6
    ad92:	45b0      	cmp	r8, r6
    ad94:	d800      	bhi.n	ad98 <sd_card_to_nvm_copy+0x22c>
    ad96:	e758      	b.n	ac4a <sd_card_to_nvm_copy+0xde>
					error_code = nvm_read_buffer(APP_START_ADDRESS+(k*NVMCTRL_PAGE_SIZE),page_buffer1,NVMCTRL_PAGE_SIZE);
    ad98:	01b4      	lsls	r4, r6, #6
    ad9a:	23f2      	movs	r3, #242	; 0xf2
    ad9c:	021b      	lsls	r3, r3, #8
    ad9e:	469c      	mov	ip, r3
    ada0:	4464      	add	r4, ip
    ada2:	2240      	movs	r2, #64	; 0x40
    ada4:	a936      	add	r1, sp, #216	; 0xd8
    ada6:	0020      	movs	r0, r4
    ada8:	47a8      	blx	r5
				} while (error_code == STATUS_BUSY);
    adaa:	2805      	cmp	r0, #5
    adac:	d0f9      	beq.n	ada2 <sd_card_to_nvm_copy+0x236>
				if((k==(num_pages-1)) && off_set!=0)
    adae:	4557      	cmp	r7, sl
    adb0:	d1e8      	bne.n	ad84 <sd_card_to_nvm_copy+0x218>
    adb2:	464b      	mov	r3, r9
    adb4:	2b00      	cmp	r3, #0
    adb6:	d0e5      	beq.n	ad84 <sd_card_to_nvm_copy+0x218>
					crc32_recalculate(page_buffer1,off_set,&crc_mem1);
    adb8:	aa56      	add	r2, sp, #344	; 0x158
    adba:	4649      	mov	r1, r9
    adbc:	a836      	add	r0, sp, #216	; 0xd8
    adbe:	4b22      	ldr	r3, [pc, #136]	; (ae48 <sd_card_to_nvm_copy+0x2dc>)
    adc0:	4798      	blx	r3
    adc2:	e7e3      	b.n	ad8c <sd_card_to_nvm_copy+0x220>
		printf("sd operation: calculating nvm firmware crc ....... \n\r");
    adc4:	4821      	ldr	r0, [pc, #132]	; (ae4c <sd_card_to_nvm_copy+0x2e0>)
    adc6:	4b02      	ldr	r3, [pc, #8]	; (add0 <sd_card_to_nvm_copy+0x264>)
    adc8:	4798      	blx	r3
    adca:	e73e      	b.n	ac4a <sd_card_to_nvm_copy+0xde>
    adcc:	0000ebcc 	.word	0x0000ebcc
    add0:	0000b779 	.word	0x0000b779
    add4:	2000011c 	.word	0x2000011c
    add8:	20000a68 	.word	0x20000a68
    addc:	00007e75 	.word	0x00007e75
    ade0:	0000848d 	.word	0x0000848d
    ade4:	00008475 	.word	0x00008475
    ade8:	0000b565 	.word	0x0000b565
    adec:	00004481 	.word	0x00004481
    adf0:	0000ebf8 	.word	0x0000ebf8
    adf4:	0000ba39 	.word	0x0000ba39
    adf8:	0000ec08 	.word	0x0000ec08
    adfc:	0000ec0c 	.word	0x0000ec0c
    ae00:	0000ec1c 	.word	0x0000ec1c
    ae04:	2000010c 	.word	0x2000010c
    ae08:	0000ecb4 	.word	0x0000ecb4
    ae0c:	0000ecdc 	.word	0x0000ecdc
    ae10:	0000edb4 	.word	0x0000edb4
    ae14:	0000ee00 	.word	0x0000ee00
    ae18:	0000ee10 	.word	0x0000ee10
    ae1c:	00001225 	.word	0x00001225
    ae20:	000044ed 	.word	0x000044ed
    ae24:	000043d9 	.word	0x000043d9
    ae28:	0000ee20 	.word	0x0000ee20
    ae2c:	0000ee54 	.word	0x0000ee54
    ae30:	0000ab31 	.word	0x0000ab31
    ae34:	0000ec60 	.word	0x0000ec60
    ae38:	0000ec88 	.word	0x0000ec88
    ae3c:	0000ed18 	.word	0x0000ed18
    ae40:	0000ed48 	.word	0x0000ed48
    ae44:	00007ffd 	.word	0x00007ffd
    ae48:	00003f55 	.word	0x00003f55
    ae4c:	0000ed7c 	.word	0x0000ed7c

0000ae50 <otafu_download>:

/* 
* OTA NEW FIRMWARE AND METADATA DOWNLOAD 
*/
int otafu_download()
{
    ae50:	b510      	push	{r4, lr}
	printf("otafu_download: Downloading update version ..... \n\r");
    ae52:	4802      	ldr	r0, [pc, #8]	; (ae5c <otafu_download+0xc>)
    ae54:	4b02      	ldr	r3, [pc, #8]	; (ae60 <otafu_download+0x10>)
    ae56:	4798      	blx	r3
	///< download version & compare
	///> jump out to check other conditions
	///> download crc and new firmware 
	///> compare crc and confirm
	///> earse otafu nvm 	
}
    ae58:	bd10      	pop	{r4, pc}
    ae5a:	46c0      	nop			; (mov r8, r8)
    ae5c:	0000eb90 	.word	0x0000eb90
    ae60:	0000b779 	.word	0x0000b779

0000ae64 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    ae64:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae66:	b097      	sub	sp, #92	; 0x5c
	down_state = NOT_READY;
    ae68:	2400      	movs	r4, #0
    ae6a:	2600      	movs	r6, #0
    ae6c:	4b9d      	ldr	r3, [pc, #628]	; (b0e4 <main+0x280>)
    ae6e:	701c      	strb	r4, [r3, #0]
	/** INITIALIZATING THE BOARD AND PERIPHERALS */
	tstrWifiInitParam param;
	int8_t ret;
	init_state();
	
	system_init();						/* Initialize the board. */	
    ae70:	4b9d      	ldr	r3, [pc, #628]	; (b0e8 <main+0x284>)
    ae72:	4798      	blx	r3
	config->data_order       = USART_DATAORDER_LSB;
    ae74:	2380      	movs	r3, #128	; 0x80
    ae76:	05db      	lsls	r3, r3, #23
    ae78:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    ae7a:	9401      	str	r4, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    ae7c:	23ff      	movs	r3, #255	; 0xff
    ae7e:	466a      	mov	r2, sp
    ae80:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    ae82:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    ae84:	72d4      	strb	r4, [r2, #11]
	config->receiver_enable  = true;
    ae86:	2501      	movs	r5, #1
    ae88:	2324      	movs	r3, #36	; 0x24
    ae8a:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    ae8c:	3301      	adds	r3, #1
    ae8e:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    ae90:	3301      	adds	r3, #1
    ae92:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    ae94:	3301      	adds	r3, #1
    ae96:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    ae98:	940a      	str	r4, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    ae9a:	3305      	adds	r3, #5
    ae9c:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    ae9e:	3301      	adds	r3, #1
    aea0:	54d4      	strb	r4, [r2, r3]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    aea2:	9405      	str	r4, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    aea4:	8214      	strh	r4, [r2, #16]
	config->lin_slave_enable      = false;
    aea6:	2300      	movs	r3, #0
    aea8:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
    aeaa:	7616      	strb	r6, [r2, #24]
	config->start_frame_detection_enable            = false;
    aeac:	7716      	strb	r6, [r2, #28]
	config->encoding_format_enable                  = false;
    aeae:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    aeb0:	2313      	movs	r3, #19
    aeb2:	7693      	strb	r3, [r2, #26]
	config->collision_detection_enable              = false;
    aeb4:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    aeb6:	23c4      	movs	r3, #196	; 0xc4
    aeb8:	039b      	lsls	r3, r3, #14
    aeba:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    aebc:	2301      	movs	r3, #1
    aebe:	425b      	negs	r3, r3
    aec0:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    aec2:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    aec4:	4b89      	ldr	r3, [pc, #548]	; (b0ec <main+0x288>)
    aec6:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    aec8:	4b89      	ldr	r3, [pc, #548]	; (b0f0 <main+0x28c>)
    aeca:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    aecc:	23e1      	movs	r3, #225	; 0xe1
    aece:	025b      	lsls	r3, r3, #9
    aed0:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    aed2:	4c88      	ldr	r4, [pc, #544]	; (b0f4 <main+0x290>)
    aed4:	4b88      	ldr	r3, [pc, #544]	; (b0f8 <main+0x294>)
    aed6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    aed8:	4a88      	ldr	r2, [pc, #544]	; (b0fc <main+0x298>)
    aeda:	4b89      	ldr	r3, [pc, #548]	; (b100 <main+0x29c>)
    aedc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    aede:	4a89      	ldr	r2, [pc, #548]	; (b104 <main+0x2a0>)
    aee0:	4b89      	ldr	r3, [pc, #548]	; (b108 <main+0x2a4>)
    aee2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    aee4:	466a      	mov	r2, sp
    aee6:	4989      	ldr	r1, [pc, #548]	; (b10c <main+0x2a8>)
    aee8:	0020      	movs	r0, r4
    aeea:	4b89      	ldr	r3, [pc, #548]	; (b110 <main+0x2ac>)
    aeec:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    aeee:	4f89      	ldr	r7, [pc, #548]	; (b114 <main+0x2b0>)
    aef0:	683b      	ldr	r3, [r7, #0]
    aef2:	6898      	ldr	r0, [r3, #8]
    aef4:	2100      	movs	r1, #0
    aef6:	4e88      	ldr	r6, [pc, #544]	; (b118 <main+0x2b4>)
    aef8:	47b0      	blx	r6
	setbuf(stdin, NULL);
    aefa:	683b      	ldr	r3, [r7, #0]
    aefc:	6858      	ldr	r0, [r3, #4]
    aefe:	2100      	movs	r1, #0
    af00:	47b0      	blx	r6
	SercomUsart *const usart_hw = &(module->hw->USART);
    af02:	6826      	ldr	r6, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    af04:	0030      	movs	r0, r6
    af06:	4b85      	ldr	r3, [pc, #532]	; (b11c <main+0x2b8>)
    af08:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    af0a:	231f      	movs	r3, #31
    af0c:	4018      	ands	r0, r3
    af0e:	4085      	lsls	r5, r0
    af10:	4b83      	ldr	r3, [pc, #524]	; (b120 <main+0x2bc>)
    af12:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    af14:	6822      	ldr	r2, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    af16:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    af18:	2b00      	cmp	r3, #0
    af1a:	d1fc      	bne.n	af16 <main+0xb2>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    af1c:	6833      	ldr	r3, [r6, #0]
    af1e:	2202      	movs	r2, #2
    af20:	4313      	orrs	r3, r2
    af22:	6033      	str	r3, [r6, #0]
	configure_console();				/* Initialize the UART console. */
	
	printf(STRING_HEADER);
    af24:	487f      	ldr	r0, [pc, #508]	; (b124 <main+0x2c0>)
    af26:	4c80      	ldr	r4, [pc, #512]	; (b128 <main+0x2c4>)
    af28:	47a0      	blx	r4
	printf("\r\nmain: Initializing Board and peripherals ...... \r\n\r\n");
    af2a:	4880      	ldr	r0, [pc, #512]	; (b12c <main+0x2c8>)
    af2c:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
    af2e:	4668      	mov	r0, sp
    af30:	4b7f      	ldr	r3, [pc, #508]	; (b130 <main+0x2cc>)
    af32:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    af34:	4c7f      	ldr	r4, [pc, #508]	; (b134 <main+0x2d0>)
    af36:	4669      	mov	r1, sp
    af38:	0020      	movs	r0, r4
    af3a:	4b7f      	ldr	r3, [pc, #508]	; (b138 <main+0x2d4>)
    af3c:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    af3e:	0020      	movs	r0, r4
    af40:	4b7e      	ldr	r3, [pc, #504]	; (b13c <main+0x2d8>)
    af42:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
    af44:	4668      	mov	r0, sp
    af46:	4b7e      	ldr	r3, [pc, #504]	; (b140 <main+0x2dc>)
    af48:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    af4a:	4b7e      	ldr	r3, [pc, #504]	; (b144 <main+0x2e0>)
    af4c:	9304      	str	r3, [sp, #16]
	httpc_conf.timer_inst = &swt_module_inst;
    af4e:	9401      	str	r4, [sp, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    af50:	4669      	mov	r1, sp
    af52:	487d      	ldr	r0, [pc, #500]	; (b148 <main+0x2e4>)
    af54:	4b7d      	ldr	r3, [pc, #500]	; (b14c <main+0x2e8>)
    af56:	4798      	blx	r3
    af58:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    af5a:	db1d      	blt.n	af98 <main+0x134>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    af5c:	497c      	ldr	r1, [pc, #496]	; (b150 <main+0x2ec>)
    af5e:	487a      	ldr	r0, [pc, #488]	; (b148 <main+0x2e4>)
    af60:	4b7c      	ldr	r3, [pc, #496]	; (b154 <main+0x2f0>)
    af62:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    af64:	4668      	mov	r0, sp
    af66:	4b7c      	ldr	r3, [pc, #496]	; (b158 <main+0x2f4>)
    af68:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
    af6a:	4b7c      	ldr	r3, [pc, #496]	; (b15c <main+0x2f8>)
    af6c:	9302      	str	r3, [sp, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    af6e:	2380      	movs	r3, #128	; 0x80
    af70:	009b      	lsls	r3, r3, #2
    af72:	9303      	str	r3, [sp, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
    af74:	4a7a      	ldr	r2, [pc, #488]	; (b160 <main+0x2fc>)
    af76:	9204      	str	r2, [sp, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    af78:	9305      	str	r3, [sp, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
    af7a:	4b7a      	ldr	r3, [pc, #488]	; (b164 <main+0x300>)
    af7c:	466a      	mov	r2, sp
    af7e:	8013      	strh	r3, [r2, #0]
	mqtt_conf.keep_alive = 6000;
    af80:	4b79      	ldr	r3, [pc, #484]	; (b168 <main+0x304>)
    af82:	8093      	strh	r3, [r2, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    af84:	4669      	mov	r1, sp
    af86:	4879      	ldr	r0, [pc, #484]	; (b16c <main+0x308>)
    af88:	4b79      	ldr	r3, [pc, #484]	; (b170 <main+0x30c>)
    af8a:	4798      	blx	r3
    af8c:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    af8e:	da07      	bge.n	afa0 <main+0x13c>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    af90:	4878      	ldr	r0, [pc, #480]	; (b174 <main+0x310>)
    af92:	4b79      	ldr	r3, [pc, #484]	; (b178 <main+0x314>)
    af94:	4798      	blx	r3
    af96:	e7fe      	b.n	af96 <main+0x132>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    af98:	4878      	ldr	r0, [pc, #480]	; (b17c <main+0x318>)
    af9a:	4b77      	ldr	r3, [pc, #476]	; (b178 <main+0x314>)
    af9c:	4798      	blx	r3
    af9e:	e7fe      	b.n	af9e <main+0x13a>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    afa0:	4977      	ldr	r1, [pc, #476]	; (b180 <main+0x31c>)
    afa2:	4872      	ldr	r0, [pc, #456]	; (b16c <main+0x308>)
    afa4:	4b77      	ldr	r3, [pc, #476]	; (b184 <main+0x320>)
    afa6:	4798      	blx	r3
    afa8:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    afaa:	db09      	blt.n	afc0 <main+0x15c>
	
	configure_timer();					/* Initialize the Timer. */	
	configure_http_client();			/* Initialize the HTTP client service. */
	configure_mqtt();					/* Initialize the MQTT service. */
	nm_bsp_init();						/* Initialize the BSP. */
    afac:	4b76      	ldr	r3, [pc, #472]	; (b188 <main+0x324>)
    afae:	4798      	blx	r3
	sd_mmc_init();
    afb0:	4b76      	ldr	r3, [pc, #472]	; (b18c <main+0x328>)
    afb2:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");
    afb4:	4876      	ldr	r0, [pc, #472]	; (b190 <main+0x32c>)
    afb6:	4b5c      	ldr	r3, [pc, #368]	; (b128 <main+0x2c4>)
    afb8:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
    afba:	4d76      	ldr	r5, [pc, #472]	; (b194 <main+0x330>)
				printf("init_storage: SD Card install failed.\r\n");
    afbc:	4c5a      	ldr	r4, [pc, #360]	; (b128 <main+0x2c4>)
    afbe:	e00c      	b.n	afda <main+0x176>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    afc0:	4875      	ldr	r0, [pc, #468]	; (b198 <main+0x334>)
    afc2:	4b6d      	ldr	r3, [pc, #436]	; (b178 <main+0x314>)
    afc4:	4798      	blx	r3
    afc6:	e7fe      	b.n	afc6 <main+0x162>
				printf("init_storage: SD Card install failed.\r\n");
    afc8:	4874      	ldr	r0, [pc, #464]	; (b19c <main+0x338>)
    afca:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
    afcc:	4874      	ldr	r0, [pc, #464]	; (b1a0 <main+0x33c>)
    afce:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    afd0:	4e74      	ldr	r6, [pc, #464]	; (b1a4 <main+0x340>)
    afd2:	2000      	movs	r0, #0
    afd4:	47b0      	blx	r6
    afd6:	2802      	cmp	r0, #2
    afd8:	d1fb      	bne.n	afd2 <main+0x16e>
			status = sd_mmc_test_unit_ready(0);
    afda:	2000      	movs	r0, #0
    afdc:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
    afde:	2801      	cmp	r0, #1
    afe0:	d0f2      	beq.n	afc8 <main+0x164>
		} while (CTRL_GOOD != status);
    afe2:	2800      	cmp	r0, #0
    afe4:	d1f9      	bne.n	afda <main+0x176>
		printf("init_storage: mounting SD card...\r\n");
    afe6:	4870      	ldr	r0, [pc, #448]	; (b1a8 <main+0x344>)
    afe8:	4b4f      	ldr	r3, [pc, #316]	; (b128 <main+0x2c4>)
    afea:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
    afec:	4c6f      	ldr	r4, [pc, #444]	; (b1ac <main+0x348>)
    afee:	228c      	movs	r2, #140	; 0x8c
    aff0:	0092      	lsls	r2, r2, #2
    aff2:	2100      	movs	r1, #0
    aff4:	0020      	movs	r0, r4
    aff6:	4b6e      	ldr	r3, [pc, #440]	; (b1b0 <main+0x34c>)
    aff8:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    affa:	0021      	movs	r1, r4
    affc:	2000      	movs	r0, #0
    affe:	4b6d      	ldr	r3, [pc, #436]	; (b1b4 <main+0x350>)
    b000:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    b002:	280b      	cmp	r0, #11
    b004:	d019      	beq.n	b03a <main+0x1d6>
		printf("init_storage: SD card mount OK.\r\n");
    b006:	486c      	ldr	r0, [pc, #432]	; (b1b8 <main+0x354>)
    b008:	4b47      	ldr	r3, [pc, #284]	; (b128 <main+0x2c4>)
    b00a:	4798      	blx	r3
		add_state(STORAGE_READY);
    b00c:	2001      	movs	r0, #1
    b00e:	4b6b      	ldr	r3, [pc, #428]	; (b1bc <main+0x358>)
    b010:	4798      	blx	r3
	init_storage();						/* Initialize SD/MMC storage. */
	
	configure_extint_channel();			/*Initialize BUTTON 0 as an external interrupt*/
    b012:	4b6b      	ldr	r3, [pc, #428]	; (b1c0 <main+0x35c>)
    b014:	4798      	blx	r3
	configure_extint_callbacks();
    b016:	4b6b      	ldr	r3, [pc, #428]	; (b1c4 <main+0x360>)
    b018:	4798      	blx	r3

	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));		/* Initialize Wi-Fi parameters structure. */
    b01a:	2218      	movs	r2, #24
    b01c:	2100      	movs	r1, #0
    b01e:	a810      	add	r0, sp, #64	; 0x40
    b020:	4b63      	ldr	r3, [pc, #396]	; (b1b0 <main+0x34c>)
    b022:	4798      	blx	r3

	param.pfAppWifiCb = wifi_cb;									/* Initialize Wi-Fi driver with data and status callbacks. */
    b024:	4b68      	ldr	r3, [pc, #416]	; (b1c8 <main+0x364>)
    b026:	9310      	str	r3, [sp, #64]	; 0x40
	ret = m2m_wifi_init(&param);
    b028:	a810      	add	r0, sp, #64	; 0x40
    b02a:	4b68      	ldr	r3, [pc, #416]	; (b1cc <main+0x368>)
    b02c:	4798      	blx	r3
    b02e:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) 
    b030:	d008      	beq.n	b044 <main+0x1e0>
	{
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    b032:	4867      	ldr	r0, [pc, #412]	; (b1d0 <main+0x36c>)
    b034:	4b50      	ldr	r3, [pc, #320]	; (b178 <main+0x314>)
    b036:	4798      	blx	r3
    b038:	e7fe      	b.n	b038 <main+0x1d4>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
    b03a:	210b      	movs	r1, #11
    b03c:	4865      	ldr	r0, [pc, #404]	; (b1d4 <main+0x370>)
    b03e:	4b4e      	ldr	r3, [pc, #312]	; (b178 <main+0x314>)
    b040:	4798      	blx	r3
    b042:	e7e6      	b.n	b012 <main+0x1ae>
    b044:	2000      	movs	r0, #0
    b046:	4b64      	ldr	r3, [pc, #400]	; (b1d8 <main+0x374>)
    b048:	4798      	blx	r3
    b04a:	4b64      	ldr	r3, [pc, #400]	; (b1dc <main+0x378>)
    b04c:	7a1b      	ldrb	r3, [r3, #8]
    b04e:	b2db      	uxtb	r3, r3
    b050:	40d8      	lsrs	r0, r3
		while (1);
	}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
    b052:	21fa      	movs	r1, #250	; 0xfa
    b054:	0089      	lsls	r1, r1, #2
    b056:	4b62      	ldr	r3, [pc, #392]	; (b1e0 <main+0x37c>)
    b058:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    b05a:	3801      	subs	r0, #1
    b05c:	4b61      	ldr	r3, [pc, #388]	; (b1e4 <main+0x380>)
    b05e:	4298      	cmp	r0, r3
    b060:	d836      	bhi.n	b0d0 <main+0x26c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    b062:	4a61      	ldr	r2, [pc, #388]	; (b1e8 <main+0x384>)
    b064:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    b066:	4861      	ldr	r0, [pc, #388]	; (b1ec <main+0x388>)
    b068:	6a03      	ldr	r3, [r0, #32]
    b06a:	021b      	lsls	r3, r3, #8
    b06c:	0a1b      	lsrs	r3, r3, #8
    b06e:	21c0      	movs	r1, #192	; 0xc0
    b070:	0609      	lsls	r1, r1, #24
    b072:	430b      	orrs	r3, r1
    b074:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    b076:	2300      	movs	r3, #0
    b078:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    b07a:	3307      	adds	r3, #7
    b07c:	6013      	str	r3, [r2, #0]
	{
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}

	printf("\n\rmain: >> Board and peripherals initialized\n\r");
    b07e:	485c      	ldr	r0, [pc, #368]	; (b1f0 <main+0x38c>)
    b080:	4c3d      	ldr	r4, [pc, #244]	; (b178 <main+0x314>)
    b082:	47a0      	blx	r4
	printf("\n\r");
    b084:	485b      	ldr	r0, [pc, #364]	; (b1f4 <main+0x390>)
    b086:	47a0      	blx	r4
	/** INITIALIZATION COMPLETE */	
	

	/** ----------------BOOTLAODER CODE---------------------*/
	delay_s(1);
    b088:	20fa      	movs	r0, #250	; 0xfa
    b08a:	0080      	lsls	r0, r0, #2
    b08c:	4b5a      	ldr	r3, [pc, #360]	; (b1f8 <main+0x394>)
    b08e:	4798      	blx	r3
	printf("\n\rmain: Booting up ..... \n\r");
    b090:	485a      	ldr	r0, [pc, #360]	; (b1fc <main+0x398>)
    b092:	47a0      	blx	r4

	BOOT_CHECK:
	if (check_boot_mode() == 1)
    b094:	4f5a      	ldr	r7, [pc, #360]	; (b200 <main+0x39c>)
		printf("main: Starting Application ..... \n\r");
		jump_to_app();
	}
	
	// OTAFU request check 
	if (otafu_flag == true)
    b096:	4e5b      	ldr	r6, [pc, #364]	; (b204 <main+0x3a0>)
		printf("main: >> New firmware downloaded\n\r");	
		otafu_flag = false;
	}

	// SD card operation
	if(sd_card_to_nvm_copy() == 1)
    b098:	4d5b      	ldr	r5, [pc, #364]	; (b208 <main+0x3a4>)
    b09a:	e008      	b.n	b0ae <main+0x24a>
		printf("main: Starting Application ..... \n\r");
    b09c:	485b      	ldr	r0, [pc, #364]	; (b20c <main+0x3a8>)
    b09e:	4b36      	ldr	r3, [pc, #216]	; (b178 <main+0x314>)
    b0a0:	4798      	blx	r3
		jump_to_app();
    b0a2:	4b5b      	ldr	r3, [pc, #364]	; (b210 <main+0x3ac>)
    b0a4:	4798      	blx	r3
    b0a6:	e005      	b.n	b0b4 <main+0x250>
	if(sd_card_to_nvm_copy() == 1)
    b0a8:	47a8      	blx	r5
    b0aa:	2801      	cmp	r0, #1
    b0ac:	d114      	bne.n	b0d8 <main+0x274>
	if (check_boot_mode() == 1)
    b0ae:	47b8      	blx	r7
    b0b0:	2801      	cmp	r0, #1
    b0b2:	d0f3      	beq.n	b09c <main+0x238>
	if (otafu_flag == true)
    b0b4:	7833      	ldrb	r3, [r6, #0]
    b0b6:	2b00      	cmp	r3, #0
    b0b8:	d0f6      	beq.n	b0a8 <main+0x244>
		printf("main: Checking OTA updates ..... \n\r");
    b0ba:	4856      	ldr	r0, [pc, #344]	; (b214 <main+0x3b0>)
    b0bc:	4c2e      	ldr	r4, [pc, #184]	; (b178 <main+0x314>)
    b0be:	47a0      	blx	r4
		otafu_download();
    b0c0:	4b55      	ldr	r3, [pc, #340]	; (b218 <main+0x3b4>)
    b0c2:	4798      	blx	r3
		printf("main: >> New firmware downloaded\n\r");	
    b0c4:	4855      	ldr	r0, [pc, #340]	; (b21c <main+0x3b8>)
    b0c6:	47a0      	blx	r4
		otafu_flag = false;
    b0c8:	2200      	movs	r2, #0
    b0ca:	4b4e      	ldr	r3, [pc, #312]	; (b204 <main+0x3a0>)
    b0cc:	701a      	strb	r2, [r3, #0]
    b0ce:	e7eb      	b.n	b0a8 <main+0x244>
		puts("ERR>> Systick configuration error\r\n");
    b0d0:	4853      	ldr	r0, [pc, #332]	; (b220 <main+0x3bc>)
    b0d2:	4b15      	ldr	r3, [pc, #84]	; (b128 <main+0x2c4>)
    b0d4:	4798      	blx	r3
    b0d6:	e7fe      	b.n	b0d6 <main+0x272>
	{
		goto BOOT_CHECK;	
	} 			
	
	jump_to_app();
    b0d8:	4b4d      	ldr	r3, [pc, #308]	; (b210 <main+0x3ac>)
    b0da:	4798      	blx	r3
	*/
	
	
	
	return 0;
}
    b0dc:	2000      	movs	r0, #0
    b0de:	b017      	add	sp, #92	; 0x5c
    b0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0e2:	46c0      	nop			; (mov r8, r8)
    b0e4:	20000835 	.word	0x20000835
    b0e8:	00006015 	.word	0x00006015
    b0ec:	002a0003 	.word	0x002a0003
    b0f0:	002b0003 	.word	0x002b0003
    b0f4:	20000800 	.word	0x20000800
    b0f8:	20001080 	.word	0x20001080
    b0fc:	0000a409 	.word	0x0000a409
    b100:	2000107c 	.word	0x2000107c
    b104:	0000a3dd 	.word	0x0000a3dd
    b108:	20001078 	.word	0x20001078
    b10c:	42001800 	.word	0x42001800
    b110:	0000532d 	.word	0x0000532d
    b114:	2000012c 	.word	0x2000012c
    b118:	0000b8cd 	.word	0x0000b8cd
    b11c:	00004b5d 	.word	0x00004b5d
    b120:	e000e100 	.word	0xe000e100
    b124:	0000e700 	.word	0x0000e700
    b128:	0000b895 	.word	0x0000b895
    b12c:	0000e76c 	.word	0x0000e76c
    b130:	0000a165 	.word	0x0000a165
    b134:	2000129c 	.word	0x2000129c
    b138:	0000a171 	.word	0x0000a171
    b13c:	0000a21d 	.word	0x0000a21d
    b140:	00009849 	.word	0x00009849
    b144:	000005a6 	.word	0x000005a6
    b148:	200012f4 	.word	0x200012f4
    b14c:	00009871 	.word	0x00009871
    b150:	0000a7f1 	.word	0x0000a7f1
    b154:	00009925 	.word	0x00009925
    b158:	00008ee5 	.word	0x00008ee5
    b15c:	20000acc 	.word	0x20000acc
    b160:	20000ccc 	.word	0x20000ccc
    b164:	00002c93 	.word	0x00002c93
    b168:	00001770 	.word	0x00001770
    b16c:	20000a94 	.word	0x20000a94
    b170:	00008e2d 	.word	0x00008e2d
    b174:	0000e7ec 	.word	0x0000e7ec
    b178:	0000b779 	.word	0x0000b779
    b17c:	0000e7a4 	.word	0x0000e7a4
    b180:	0000a421 	.word	0x0000a421
    b184:	00008f01 	.word	0x00008f01
    b188:	00001265 	.word	0x00001265
    b18c:	00000239 	.word	0x00000239
    b190:	0000e854 	.word	0x0000e854
    b194:	0000096d 	.word	0x0000096d
    b198:	0000e820 	.word	0x0000e820
    b19c:	0000e88c 	.word	0x0000e88c
    b1a0:	0000e8b4 	.word	0x0000e8b4
    b1a4:	00000259 	.word	0x00000259
    b1a8:	0000e8e4 	.word	0x0000e8e4
    b1ac:	20000838 	.word	0x20000838
    b1b0:	0000b617 	.word	0x0000b617
    b1b4:	00007e45 	.word	0x00007e45
    b1b8:	0000e938 	.word	0x0000e938
    b1bc:	0000a2c1 	.word	0x0000a2c1
    b1c0:	0000aa21 	.word	0x0000aa21
    b1c4:	0000aa51 	.word	0x0000aa51
    b1c8:	0000a8e5 	.word	0x0000a8e5
    b1cc:	000021e1 	.word	0x000021e1
    b1d0:	0000e95c 	.word	0x0000e95c
    b1d4:	0000e908 	.word	0x0000e908
    b1d8:	00005dd1 	.word	0x00005dd1
    b1dc:	40000400 	.word	0x40000400
    b1e0:	0000b225 	.word	0x0000b225
    b1e4:	00ffffff 	.word	0x00ffffff
    b1e8:	e000e010 	.word	0xe000e010
    b1ec:	e000ed00 	.word	0xe000ed00
    b1f0:	0000e988 	.word	0x0000e988
    b1f4:	0000ebf4 	.word	0x0000ebf4
    b1f8:	00001225 	.word	0x00001225
    b1fc:	0000e9b8 	.word	0x0000e9b8
    b200:	0000aa75 	.word	0x0000aa75
    b204:	20000ecc 	.word	0x20000ecc
    b208:	0000ab6d 	.word	0x0000ab6d
    b20c:	0000e9d4 	.word	0x0000e9d4
    b210:	0000ab31 	.word	0x0000ab31
    b214:	0000e9f8 	.word	0x0000e9f8
    b218:	0000ae51 	.word	0x0000ae51
    b21c:	0000ea1c 	.word	0x0000ea1c
    b220:	0000ea40 	.word	0x0000ea40

0000b224 <__udivsi3>:
    b224:	2200      	movs	r2, #0
    b226:	0843      	lsrs	r3, r0, #1
    b228:	428b      	cmp	r3, r1
    b22a:	d374      	bcc.n	b316 <__udivsi3+0xf2>
    b22c:	0903      	lsrs	r3, r0, #4
    b22e:	428b      	cmp	r3, r1
    b230:	d35f      	bcc.n	b2f2 <__udivsi3+0xce>
    b232:	0a03      	lsrs	r3, r0, #8
    b234:	428b      	cmp	r3, r1
    b236:	d344      	bcc.n	b2c2 <__udivsi3+0x9e>
    b238:	0b03      	lsrs	r3, r0, #12
    b23a:	428b      	cmp	r3, r1
    b23c:	d328      	bcc.n	b290 <__udivsi3+0x6c>
    b23e:	0c03      	lsrs	r3, r0, #16
    b240:	428b      	cmp	r3, r1
    b242:	d30d      	bcc.n	b260 <__udivsi3+0x3c>
    b244:	22ff      	movs	r2, #255	; 0xff
    b246:	0209      	lsls	r1, r1, #8
    b248:	ba12      	rev	r2, r2
    b24a:	0c03      	lsrs	r3, r0, #16
    b24c:	428b      	cmp	r3, r1
    b24e:	d302      	bcc.n	b256 <__udivsi3+0x32>
    b250:	1212      	asrs	r2, r2, #8
    b252:	0209      	lsls	r1, r1, #8
    b254:	d065      	beq.n	b322 <__udivsi3+0xfe>
    b256:	0b03      	lsrs	r3, r0, #12
    b258:	428b      	cmp	r3, r1
    b25a:	d319      	bcc.n	b290 <__udivsi3+0x6c>
    b25c:	e000      	b.n	b260 <__udivsi3+0x3c>
    b25e:	0a09      	lsrs	r1, r1, #8
    b260:	0bc3      	lsrs	r3, r0, #15
    b262:	428b      	cmp	r3, r1
    b264:	d301      	bcc.n	b26a <__udivsi3+0x46>
    b266:	03cb      	lsls	r3, r1, #15
    b268:	1ac0      	subs	r0, r0, r3
    b26a:	4152      	adcs	r2, r2
    b26c:	0b83      	lsrs	r3, r0, #14
    b26e:	428b      	cmp	r3, r1
    b270:	d301      	bcc.n	b276 <__udivsi3+0x52>
    b272:	038b      	lsls	r3, r1, #14
    b274:	1ac0      	subs	r0, r0, r3
    b276:	4152      	adcs	r2, r2
    b278:	0b43      	lsrs	r3, r0, #13
    b27a:	428b      	cmp	r3, r1
    b27c:	d301      	bcc.n	b282 <__udivsi3+0x5e>
    b27e:	034b      	lsls	r3, r1, #13
    b280:	1ac0      	subs	r0, r0, r3
    b282:	4152      	adcs	r2, r2
    b284:	0b03      	lsrs	r3, r0, #12
    b286:	428b      	cmp	r3, r1
    b288:	d301      	bcc.n	b28e <__udivsi3+0x6a>
    b28a:	030b      	lsls	r3, r1, #12
    b28c:	1ac0      	subs	r0, r0, r3
    b28e:	4152      	adcs	r2, r2
    b290:	0ac3      	lsrs	r3, r0, #11
    b292:	428b      	cmp	r3, r1
    b294:	d301      	bcc.n	b29a <__udivsi3+0x76>
    b296:	02cb      	lsls	r3, r1, #11
    b298:	1ac0      	subs	r0, r0, r3
    b29a:	4152      	adcs	r2, r2
    b29c:	0a83      	lsrs	r3, r0, #10
    b29e:	428b      	cmp	r3, r1
    b2a0:	d301      	bcc.n	b2a6 <__udivsi3+0x82>
    b2a2:	028b      	lsls	r3, r1, #10
    b2a4:	1ac0      	subs	r0, r0, r3
    b2a6:	4152      	adcs	r2, r2
    b2a8:	0a43      	lsrs	r3, r0, #9
    b2aa:	428b      	cmp	r3, r1
    b2ac:	d301      	bcc.n	b2b2 <__udivsi3+0x8e>
    b2ae:	024b      	lsls	r3, r1, #9
    b2b0:	1ac0      	subs	r0, r0, r3
    b2b2:	4152      	adcs	r2, r2
    b2b4:	0a03      	lsrs	r3, r0, #8
    b2b6:	428b      	cmp	r3, r1
    b2b8:	d301      	bcc.n	b2be <__udivsi3+0x9a>
    b2ba:	020b      	lsls	r3, r1, #8
    b2bc:	1ac0      	subs	r0, r0, r3
    b2be:	4152      	adcs	r2, r2
    b2c0:	d2cd      	bcs.n	b25e <__udivsi3+0x3a>
    b2c2:	09c3      	lsrs	r3, r0, #7
    b2c4:	428b      	cmp	r3, r1
    b2c6:	d301      	bcc.n	b2cc <__udivsi3+0xa8>
    b2c8:	01cb      	lsls	r3, r1, #7
    b2ca:	1ac0      	subs	r0, r0, r3
    b2cc:	4152      	adcs	r2, r2
    b2ce:	0983      	lsrs	r3, r0, #6
    b2d0:	428b      	cmp	r3, r1
    b2d2:	d301      	bcc.n	b2d8 <__udivsi3+0xb4>
    b2d4:	018b      	lsls	r3, r1, #6
    b2d6:	1ac0      	subs	r0, r0, r3
    b2d8:	4152      	adcs	r2, r2
    b2da:	0943      	lsrs	r3, r0, #5
    b2dc:	428b      	cmp	r3, r1
    b2de:	d301      	bcc.n	b2e4 <__udivsi3+0xc0>
    b2e0:	014b      	lsls	r3, r1, #5
    b2e2:	1ac0      	subs	r0, r0, r3
    b2e4:	4152      	adcs	r2, r2
    b2e6:	0903      	lsrs	r3, r0, #4
    b2e8:	428b      	cmp	r3, r1
    b2ea:	d301      	bcc.n	b2f0 <__udivsi3+0xcc>
    b2ec:	010b      	lsls	r3, r1, #4
    b2ee:	1ac0      	subs	r0, r0, r3
    b2f0:	4152      	adcs	r2, r2
    b2f2:	08c3      	lsrs	r3, r0, #3
    b2f4:	428b      	cmp	r3, r1
    b2f6:	d301      	bcc.n	b2fc <__udivsi3+0xd8>
    b2f8:	00cb      	lsls	r3, r1, #3
    b2fa:	1ac0      	subs	r0, r0, r3
    b2fc:	4152      	adcs	r2, r2
    b2fe:	0883      	lsrs	r3, r0, #2
    b300:	428b      	cmp	r3, r1
    b302:	d301      	bcc.n	b308 <__udivsi3+0xe4>
    b304:	008b      	lsls	r3, r1, #2
    b306:	1ac0      	subs	r0, r0, r3
    b308:	4152      	adcs	r2, r2
    b30a:	0843      	lsrs	r3, r0, #1
    b30c:	428b      	cmp	r3, r1
    b30e:	d301      	bcc.n	b314 <__udivsi3+0xf0>
    b310:	004b      	lsls	r3, r1, #1
    b312:	1ac0      	subs	r0, r0, r3
    b314:	4152      	adcs	r2, r2
    b316:	1a41      	subs	r1, r0, r1
    b318:	d200      	bcs.n	b31c <__udivsi3+0xf8>
    b31a:	4601      	mov	r1, r0
    b31c:	4152      	adcs	r2, r2
    b31e:	4610      	mov	r0, r2
    b320:	4770      	bx	lr
    b322:	e7ff      	b.n	b324 <__udivsi3+0x100>
    b324:	b501      	push	{r0, lr}
    b326:	2000      	movs	r0, #0
    b328:	f000 f8f0 	bl	b50c <__aeabi_idiv0>
    b32c:	bd02      	pop	{r1, pc}
    b32e:	46c0      	nop			; (mov r8, r8)

0000b330 <__aeabi_uidivmod>:
    b330:	2900      	cmp	r1, #0
    b332:	d0f7      	beq.n	b324 <__udivsi3+0x100>
    b334:	e776      	b.n	b224 <__udivsi3>
    b336:	4770      	bx	lr

0000b338 <__divsi3>:
    b338:	4603      	mov	r3, r0
    b33a:	430b      	orrs	r3, r1
    b33c:	d47f      	bmi.n	b43e <__divsi3+0x106>
    b33e:	2200      	movs	r2, #0
    b340:	0843      	lsrs	r3, r0, #1
    b342:	428b      	cmp	r3, r1
    b344:	d374      	bcc.n	b430 <__divsi3+0xf8>
    b346:	0903      	lsrs	r3, r0, #4
    b348:	428b      	cmp	r3, r1
    b34a:	d35f      	bcc.n	b40c <__divsi3+0xd4>
    b34c:	0a03      	lsrs	r3, r0, #8
    b34e:	428b      	cmp	r3, r1
    b350:	d344      	bcc.n	b3dc <__divsi3+0xa4>
    b352:	0b03      	lsrs	r3, r0, #12
    b354:	428b      	cmp	r3, r1
    b356:	d328      	bcc.n	b3aa <__divsi3+0x72>
    b358:	0c03      	lsrs	r3, r0, #16
    b35a:	428b      	cmp	r3, r1
    b35c:	d30d      	bcc.n	b37a <__divsi3+0x42>
    b35e:	22ff      	movs	r2, #255	; 0xff
    b360:	0209      	lsls	r1, r1, #8
    b362:	ba12      	rev	r2, r2
    b364:	0c03      	lsrs	r3, r0, #16
    b366:	428b      	cmp	r3, r1
    b368:	d302      	bcc.n	b370 <__divsi3+0x38>
    b36a:	1212      	asrs	r2, r2, #8
    b36c:	0209      	lsls	r1, r1, #8
    b36e:	d065      	beq.n	b43c <__divsi3+0x104>
    b370:	0b03      	lsrs	r3, r0, #12
    b372:	428b      	cmp	r3, r1
    b374:	d319      	bcc.n	b3aa <__divsi3+0x72>
    b376:	e000      	b.n	b37a <__divsi3+0x42>
    b378:	0a09      	lsrs	r1, r1, #8
    b37a:	0bc3      	lsrs	r3, r0, #15
    b37c:	428b      	cmp	r3, r1
    b37e:	d301      	bcc.n	b384 <__divsi3+0x4c>
    b380:	03cb      	lsls	r3, r1, #15
    b382:	1ac0      	subs	r0, r0, r3
    b384:	4152      	adcs	r2, r2
    b386:	0b83      	lsrs	r3, r0, #14
    b388:	428b      	cmp	r3, r1
    b38a:	d301      	bcc.n	b390 <__divsi3+0x58>
    b38c:	038b      	lsls	r3, r1, #14
    b38e:	1ac0      	subs	r0, r0, r3
    b390:	4152      	adcs	r2, r2
    b392:	0b43      	lsrs	r3, r0, #13
    b394:	428b      	cmp	r3, r1
    b396:	d301      	bcc.n	b39c <__divsi3+0x64>
    b398:	034b      	lsls	r3, r1, #13
    b39a:	1ac0      	subs	r0, r0, r3
    b39c:	4152      	adcs	r2, r2
    b39e:	0b03      	lsrs	r3, r0, #12
    b3a0:	428b      	cmp	r3, r1
    b3a2:	d301      	bcc.n	b3a8 <__divsi3+0x70>
    b3a4:	030b      	lsls	r3, r1, #12
    b3a6:	1ac0      	subs	r0, r0, r3
    b3a8:	4152      	adcs	r2, r2
    b3aa:	0ac3      	lsrs	r3, r0, #11
    b3ac:	428b      	cmp	r3, r1
    b3ae:	d301      	bcc.n	b3b4 <__divsi3+0x7c>
    b3b0:	02cb      	lsls	r3, r1, #11
    b3b2:	1ac0      	subs	r0, r0, r3
    b3b4:	4152      	adcs	r2, r2
    b3b6:	0a83      	lsrs	r3, r0, #10
    b3b8:	428b      	cmp	r3, r1
    b3ba:	d301      	bcc.n	b3c0 <__divsi3+0x88>
    b3bc:	028b      	lsls	r3, r1, #10
    b3be:	1ac0      	subs	r0, r0, r3
    b3c0:	4152      	adcs	r2, r2
    b3c2:	0a43      	lsrs	r3, r0, #9
    b3c4:	428b      	cmp	r3, r1
    b3c6:	d301      	bcc.n	b3cc <__divsi3+0x94>
    b3c8:	024b      	lsls	r3, r1, #9
    b3ca:	1ac0      	subs	r0, r0, r3
    b3cc:	4152      	adcs	r2, r2
    b3ce:	0a03      	lsrs	r3, r0, #8
    b3d0:	428b      	cmp	r3, r1
    b3d2:	d301      	bcc.n	b3d8 <__divsi3+0xa0>
    b3d4:	020b      	lsls	r3, r1, #8
    b3d6:	1ac0      	subs	r0, r0, r3
    b3d8:	4152      	adcs	r2, r2
    b3da:	d2cd      	bcs.n	b378 <__divsi3+0x40>
    b3dc:	09c3      	lsrs	r3, r0, #7
    b3de:	428b      	cmp	r3, r1
    b3e0:	d301      	bcc.n	b3e6 <__divsi3+0xae>
    b3e2:	01cb      	lsls	r3, r1, #7
    b3e4:	1ac0      	subs	r0, r0, r3
    b3e6:	4152      	adcs	r2, r2
    b3e8:	0983      	lsrs	r3, r0, #6
    b3ea:	428b      	cmp	r3, r1
    b3ec:	d301      	bcc.n	b3f2 <__divsi3+0xba>
    b3ee:	018b      	lsls	r3, r1, #6
    b3f0:	1ac0      	subs	r0, r0, r3
    b3f2:	4152      	adcs	r2, r2
    b3f4:	0943      	lsrs	r3, r0, #5
    b3f6:	428b      	cmp	r3, r1
    b3f8:	d301      	bcc.n	b3fe <__divsi3+0xc6>
    b3fa:	014b      	lsls	r3, r1, #5
    b3fc:	1ac0      	subs	r0, r0, r3
    b3fe:	4152      	adcs	r2, r2
    b400:	0903      	lsrs	r3, r0, #4
    b402:	428b      	cmp	r3, r1
    b404:	d301      	bcc.n	b40a <__divsi3+0xd2>
    b406:	010b      	lsls	r3, r1, #4
    b408:	1ac0      	subs	r0, r0, r3
    b40a:	4152      	adcs	r2, r2
    b40c:	08c3      	lsrs	r3, r0, #3
    b40e:	428b      	cmp	r3, r1
    b410:	d301      	bcc.n	b416 <__divsi3+0xde>
    b412:	00cb      	lsls	r3, r1, #3
    b414:	1ac0      	subs	r0, r0, r3
    b416:	4152      	adcs	r2, r2
    b418:	0883      	lsrs	r3, r0, #2
    b41a:	428b      	cmp	r3, r1
    b41c:	d301      	bcc.n	b422 <__divsi3+0xea>
    b41e:	008b      	lsls	r3, r1, #2
    b420:	1ac0      	subs	r0, r0, r3
    b422:	4152      	adcs	r2, r2
    b424:	0843      	lsrs	r3, r0, #1
    b426:	428b      	cmp	r3, r1
    b428:	d301      	bcc.n	b42e <__divsi3+0xf6>
    b42a:	004b      	lsls	r3, r1, #1
    b42c:	1ac0      	subs	r0, r0, r3
    b42e:	4152      	adcs	r2, r2
    b430:	1a41      	subs	r1, r0, r1
    b432:	d200      	bcs.n	b436 <__divsi3+0xfe>
    b434:	4601      	mov	r1, r0
    b436:	4152      	adcs	r2, r2
    b438:	4610      	mov	r0, r2
    b43a:	4770      	bx	lr
    b43c:	e05d      	b.n	b4fa <__divsi3+0x1c2>
    b43e:	0fca      	lsrs	r2, r1, #31
    b440:	d000      	beq.n	b444 <__divsi3+0x10c>
    b442:	4249      	negs	r1, r1
    b444:	1003      	asrs	r3, r0, #32
    b446:	d300      	bcc.n	b44a <__divsi3+0x112>
    b448:	4240      	negs	r0, r0
    b44a:	4053      	eors	r3, r2
    b44c:	2200      	movs	r2, #0
    b44e:	469c      	mov	ip, r3
    b450:	0903      	lsrs	r3, r0, #4
    b452:	428b      	cmp	r3, r1
    b454:	d32d      	bcc.n	b4b2 <__divsi3+0x17a>
    b456:	0a03      	lsrs	r3, r0, #8
    b458:	428b      	cmp	r3, r1
    b45a:	d312      	bcc.n	b482 <__divsi3+0x14a>
    b45c:	22fc      	movs	r2, #252	; 0xfc
    b45e:	0189      	lsls	r1, r1, #6
    b460:	ba12      	rev	r2, r2
    b462:	0a03      	lsrs	r3, r0, #8
    b464:	428b      	cmp	r3, r1
    b466:	d30c      	bcc.n	b482 <__divsi3+0x14a>
    b468:	0189      	lsls	r1, r1, #6
    b46a:	1192      	asrs	r2, r2, #6
    b46c:	428b      	cmp	r3, r1
    b46e:	d308      	bcc.n	b482 <__divsi3+0x14a>
    b470:	0189      	lsls	r1, r1, #6
    b472:	1192      	asrs	r2, r2, #6
    b474:	428b      	cmp	r3, r1
    b476:	d304      	bcc.n	b482 <__divsi3+0x14a>
    b478:	0189      	lsls	r1, r1, #6
    b47a:	d03a      	beq.n	b4f2 <__divsi3+0x1ba>
    b47c:	1192      	asrs	r2, r2, #6
    b47e:	e000      	b.n	b482 <__divsi3+0x14a>
    b480:	0989      	lsrs	r1, r1, #6
    b482:	09c3      	lsrs	r3, r0, #7
    b484:	428b      	cmp	r3, r1
    b486:	d301      	bcc.n	b48c <__divsi3+0x154>
    b488:	01cb      	lsls	r3, r1, #7
    b48a:	1ac0      	subs	r0, r0, r3
    b48c:	4152      	adcs	r2, r2
    b48e:	0983      	lsrs	r3, r0, #6
    b490:	428b      	cmp	r3, r1
    b492:	d301      	bcc.n	b498 <__divsi3+0x160>
    b494:	018b      	lsls	r3, r1, #6
    b496:	1ac0      	subs	r0, r0, r3
    b498:	4152      	adcs	r2, r2
    b49a:	0943      	lsrs	r3, r0, #5
    b49c:	428b      	cmp	r3, r1
    b49e:	d301      	bcc.n	b4a4 <__divsi3+0x16c>
    b4a0:	014b      	lsls	r3, r1, #5
    b4a2:	1ac0      	subs	r0, r0, r3
    b4a4:	4152      	adcs	r2, r2
    b4a6:	0903      	lsrs	r3, r0, #4
    b4a8:	428b      	cmp	r3, r1
    b4aa:	d301      	bcc.n	b4b0 <__divsi3+0x178>
    b4ac:	010b      	lsls	r3, r1, #4
    b4ae:	1ac0      	subs	r0, r0, r3
    b4b0:	4152      	adcs	r2, r2
    b4b2:	08c3      	lsrs	r3, r0, #3
    b4b4:	428b      	cmp	r3, r1
    b4b6:	d301      	bcc.n	b4bc <__divsi3+0x184>
    b4b8:	00cb      	lsls	r3, r1, #3
    b4ba:	1ac0      	subs	r0, r0, r3
    b4bc:	4152      	adcs	r2, r2
    b4be:	0883      	lsrs	r3, r0, #2
    b4c0:	428b      	cmp	r3, r1
    b4c2:	d301      	bcc.n	b4c8 <__divsi3+0x190>
    b4c4:	008b      	lsls	r3, r1, #2
    b4c6:	1ac0      	subs	r0, r0, r3
    b4c8:	4152      	adcs	r2, r2
    b4ca:	d2d9      	bcs.n	b480 <__divsi3+0x148>
    b4cc:	0843      	lsrs	r3, r0, #1
    b4ce:	428b      	cmp	r3, r1
    b4d0:	d301      	bcc.n	b4d6 <__divsi3+0x19e>
    b4d2:	004b      	lsls	r3, r1, #1
    b4d4:	1ac0      	subs	r0, r0, r3
    b4d6:	4152      	adcs	r2, r2
    b4d8:	1a41      	subs	r1, r0, r1
    b4da:	d200      	bcs.n	b4de <__divsi3+0x1a6>
    b4dc:	4601      	mov	r1, r0
    b4de:	4663      	mov	r3, ip
    b4e0:	4152      	adcs	r2, r2
    b4e2:	105b      	asrs	r3, r3, #1
    b4e4:	4610      	mov	r0, r2
    b4e6:	d301      	bcc.n	b4ec <__divsi3+0x1b4>
    b4e8:	4240      	negs	r0, r0
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d500      	bpl.n	b4f0 <__divsi3+0x1b8>
    b4ee:	4249      	negs	r1, r1
    b4f0:	4770      	bx	lr
    b4f2:	4663      	mov	r3, ip
    b4f4:	105b      	asrs	r3, r3, #1
    b4f6:	d300      	bcc.n	b4fa <__divsi3+0x1c2>
    b4f8:	4240      	negs	r0, r0
    b4fa:	b501      	push	{r0, lr}
    b4fc:	2000      	movs	r0, #0
    b4fe:	f000 f805 	bl	b50c <__aeabi_idiv0>
    b502:	bd02      	pop	{r1, pc}

0000b504 <__aeabi_idivmod>:
    b504:	2900      	cmp	r1, #0
    b506:	d0f8      	beq.n	b4fa <__divsi3+0x1c2>
    b508:	e716      	b.n	b338 <__divsi3>
    b50a:	4770      	bx	lr

0000b50c <__aeabi_idiv0>:
    b50c:	4770      	bx	lr
    b50e:	46c0      	nop			; (mov r8, r8)

0000b510 <__aeabi_lmul>:
    b510:	b5f0      	push	{r4, r5, r6, r7, lr}
    b512:	46ce      	mov	lr, r9
    b514:	4647      	mov	r7, r8
    b516:	0415      	lsls	r5, r2, #16
    b518:	0c2d      	lsrs	r5, r5, #16
    b51a:	002e      	movs	r6, r5
    b51c:	b580      	push	{r7, lr}
    b51e:	0407      	lsls	r7, r0, #16
    b520:	0c14      	lsrs	r4, r2, #16
    b522:	0c3f      	lsrs	r7, r7, #16
    b524:	4699      	mov	r9, r3
    b526:	0c03      	lsrs	r3, r0, #16
    b528:	437e      	muls	r6, r7
    b52a:	435d      	muls	r5, r3
    b52c:	4367      	muls	r7, r4
    b52e:	4363      	muls	r3, r4
    b530:	197f      	adds	r7, r7, r5
    b532:	0c34      	lsrs	r4, r6, #16
    b534:	19e4      	adds	r4, r4, r7
    b536:	469c      	mov	ip, r3
    b538:	42a5      	cmp	r5, r4
    b53a:	d903      	bls.n	b544 <__aeabi_lmul+0x34>
    b53c:	2380      	movs	r3, #128	; 0x80
    b53e:	025b      	lsls	r3, r3, #9
    b540:	4698      	mov	r8, r3
    b542:	44c4      	add	ip, r8
    b544:	464b      	mov	r3, r9
    b546:	4351      	muls	r1, r2
    b548:	4343      	muls	r3, r0
    b54a:	0436      	lsls	r6, r6, #16
    b54c:	0c36      	lsrs	r6, r6, #16
    b54e:	0c25      	lsrs	r5, r4, #16
    b550:	0424      	lsls	r4, r4, #16
    b552:	4465      	add	r5, ip
    b554:	19a4      	adds	r4, r4, r6
    b556:	1859      	adds	r1, r3, r1
    b558:	1949      	adds	r1, r1, r5
    b55a:	0020      	movs	r0, r4
    b55c:	bc0c      	pop	{r2, r3}
    b55e:	4690      	mov	r8, r2
    b560:	4699      	mov	r9, r3
    b562:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b564 <atoi>:
    b564:	b510      	push	{r4, lr}
    b566:	220a      	movs	r2, #10
    b568:	2100      	movs	r1, #0
    b56a:	f000 fb71 	bl	bc50 <strtol>
    b56e:	bd10      	pop	{r4, pc}

0000b570 <__libc_init_array>:
    b570:	b570      	push	{r4, r5, r6, lr}
    b572:	2600      	movs	r6, #0
    b574:	4d0c      	ldr	r5, [pc, #48]	; (b5a8 <__libc_init_array+0x38>)
    b576:	4c0d      	ldr	r4, [pc, #52]	; (b5ac <__libc_init_array+0x3c>)
    b578:	1b64      	subs	r4, r4, r5
    b57a:	10a4      	asrs	r4, r4, #2
    b57c:	42a6      	cmp	r6, r4
    b57e:	d109      	bne.n	b594 <__libc_init_array+0x24>
    b580:	2600      	movs	r6, #0
    b582:	f003 fee3 	bl	f34c <_init>
    b586:	4d0a      	ldr	r5, [pc, #40]	; (b5b0 <__libc_init_array+0x40>)
    b588:	4c0a      	ldr	r4, [pc, #40]	; (b5b4 <__libc_init_array+0x44>)
    b58a:	1b64      	subs	r4, r4, r5
    b58c:	10a4      	asrs	r4, r4, #2
    b58e:	42a6      	cmp	r6, r4
    b590:	d105      	bne.n	b59e <__libc_init_array+0x2e>
    b592:	bd70      	pop	{r4, r5, r6, pc}
    b594:	00b3      	lsls	r3, r6, #2
    b596:	58eb      	ldr	r3, [r5, r3]
    b598:	4798      	blx	r3
    b59a:	3601      	adds	r6, #1
    b59c:	e7ee      	b.n	b57c <__libc_init_array+0xc>
    b59e:	00b3      	lsls	r3, r6, #2
    b5a0:	58eb      	ldr	r3, [r5, r3]
    b5a2:	4798      	blx	r3
    b5a4:	3601      	adds	r6, #1
    b5a6:	e7f2      	b.n	b58e <__libc_init_array+0x1e>
    b5a8:	0000f358 	.word	0x0000f358
    b5ac:	0000f358 	.word	0x0000f358
    b5b0:	0000f358 	.word	0x0000f358
    b5b4:	0000f35c 	.word	0x0000f35c

0000b5b8 <malloc>:
    b5b8:	b510      	push	{r4, lr}
    b5ba:	4b03      	ldr	r3, [pc, #12]	; (b5c8 <malloc+0x10>)
    b5bc:	0001      	movs	r1, r0
    b5be:	6818      	ldr	r0, [r3, #0]
    b5c0:	f000 f87c 	bl	b6bc <_malloc_r>
    b5c4:	bd10      	pop	{r4, pc}
    b5c6:	46c0      	nop			; (mov r8, r8)
    b5c8:	2000012c 	.word	0x2000012c

0000b5cc <free>:
    b5cc:	b510      	push	{r4, lr}
    b5ce:	4b03      	ldr	r3, [pc, #12]	; (b5dc <free+0x10>)
    b5d0:	0001      	movs	r1, r0
    b5d2:	6818      	ldr	r0, [r3, #0]
    b5d4:	f000 f828 	bl	b628 <_free_r>
    b5d8:	bd10      	pop	{r4, pc}
    b5da:	46c0      	nop			; (mov r8, r8)
    b5dc:	2000012c 	.word	0x2000012c

0000b5e0 <memcpy>:
    b5e0:	2300      	movs	r3, #0
    b5e2:	b510      	push	{r4, lr}
    b5e4:	429a      	cmp	r2, r3
    b5e6:	d100      	bne.n	b5ea <memcpy+0xa>
    b5e8:	bd10      	pop	{r4, pc}
    b5ea:	5ccc      	ldrb	r4, [r1, r3]
    b5ec:	54c4      	strb	r4, [r0, r3]
    b5ee:	3301      	adds	r3, #1
    b5f0:	e7f8      	b.n	b5e4 <memcpy+0x4>

0000b5f2 <memmove>:
    b5f2:	b510      	push	{r4, lr}
    b5f4:	4288      	cmp	r0, r1
    b5f6:	d902      	bls.n	b5fe <memmove+0xc>
    b5f8:	188b      	adds	r3, r1, r2
    b5fa:	4298      	cmp	r0, r3
    b5fc:	d308      	bcc.n	b610 <memmove+0x1e>
    b5fe:	2300      	movs	r3, #0
    b600:	429a      	cmp	r2, r3
    b602:	d007      	beq.n	b614 <memmove+0x22>
    b604:	5ccc      	ldrb	r4, [r1, r3]
    b606:	54c4      	strb	r4, [r0, r3]
    b608:	3301      	adds	r3, #1
    b60a:	e7f9      	b.n	b600 <memmove+0xe>
    b60c:	5c8b      	ldrb	r3, [r1, r2]
    b60e:	5483      	strb	r3, [r0, r2]
    b610:	3a01      	subs	r2, #1
    b612:	d2fb      	bcs.n	b60c <memmove+0x1a>
    b614:	bd10      	pop	{r4, pc}

0000b616 <memset>:
    b616:	0003      	movs	r3, r0
    b618:	1882      	adds	r2, r0, r2
    b61a:	4293      	cmp	r3, r2
    b61c:	d100      	bne.n	b620 <memset+0xa>
    b61e:	4770      	bx	lr
    b620:	7019      	strb	r1, [r3, #0]
    b622:	3301      	adds	r3, #1
    b624:	e7f9      	b.n	b61a <memset+0x4>
	...

0000b628 <_free_r>:
    b628:	b570      	push	{r4, r5, r6, lr}
    b62a:	0005      	movs	r5, r0
    b62c:	2900      	cmp	r1, #0
    b62e:	d010      	beq.n	b652 <_free_r+0x2a>
    b630:	1f0c      	subs	r4, r1, #4
    b632:	6823      	ldr	r3, [r4, #0]
    b634:	2b00      	cmp	r3, #0
    b636:	da00      	bge.n	b63a <_free_r+0x12>
    b638:	18e4      	adds	r4, r4, r3
    b63a:	0028      	movs	r0, r5
    b63c:	f000 fdf6 	bl	c22c <__malloc_lock>
    b640:	4a1d      	ldr	r2, [pc, #116]	; (b6b8 <_free_r+0x90>)
    b642:	6813      	ldr	r3, [r2, #0]
    b644:	2b00      	cmp	r3, #0
    b646:	d105      	bne.n	b654 <_free_r+0x2c>
    b648:	6063      	str	r3, [r4, #4]
    b64a:	6014      	str	r4, [r2, #0]
    b64c:	0028      	movs	r0, r5
    b64e:	f000 fdee 	bl	c22e <__malloc_unlock>
    b652:	bd70      	pop	{r4, r5, r6, pc}
    b654:	42a3      	cmp	r3, r4
    b656:	d909      	bls.n	b66c <_free_r+0x44>
    b658:	6821      	ldr	r1, [r4, #0]
    b65a:	1860      	adds	r0, r4, r1
    b65c:	4283      	cmp	r3, r0
    b65e:	d1f3      	bne.n	b648 <_free_r+0x20>
    b660:	6818      	ldr	r0, [r3, #0]
    b662:	685b      	ldr	r3, [r3, #4]
    b664:	1841      	adds	r1, r0, r1
    b666:	6021      	str	r1, [r4, #0]
    b668:	e7ee      	b.n	b648 <_free_r+0x20>
    b66a:	0013      	movs	r3, r2
    b66c:	685a      	ldr	r2, [r3, #4]
    b66e:	2a00      	cmp	r2, #0
    b670:	d001      	beq.n	b676 <_free_r+0x4e>
    b672:	42a2      	cmp	r2, r4
    b674:	d9f9      	bls.n	b66a <_free_r+0x42>
    b676:	6819      	ldr	r1, [r3, #0]
    b678:	1858      	adds	r0, r3, r1
    b67a:	42a0      	cmp	r0, r4
    b67c:	d10b      	bne.n	b696 <_free_r+0x6e>
    b67e:	6820      	ldr	r0, [r4, #0]
    b680:	1809      	adds	r1, r1, r0
    b682:	1858      	adds	r0, r3, r1
    b684:	6019      	str	r1, [r3, #0]
    b686:	4282      	cmp	r2, r0
    b688:	d1e0      	bne.n	b64c <_free_r+0x24>
    b68a:	6810      	ldr	r0, [r2, #0]
    b68c:	6852      	ldr	r2, [r2, #4]
    b68e:	1841      	adds	r1, r0, r1
    b690:	6019      	str	r1, [r3, #0]
    b692:	605a      	str	r2, [r3, #4]
    b694:	e7da      	b.n	b64c <_free_r+0x24>
    b696:	42a0      	cmp	r0, r4
    b698:	d902      	bls.n	b6a0 <_free_r+0x78>
    b69a:	230c      	movs	r3, #12
    b69c:	602b      	str	r3, [r5, #0]
    b69e:	e7d5      	b.n	b64c <_free_r+0x24>
    b6a0:	6821      	ldr	r1, [r4, #0]
    b6a2:	1860      	adds	r0, r4, r1
    b6a4:	4282      	cmp	r2, r0
    b6a6:	d103      	bne.n	b6b0 <_free_r+0x88>
    b6a8:	6810      	ldr	r0, [r2, #0]
    b6aa:	6852      	ldr	r2, [r2, #4]
    b6ac:	1841      	adds	r1, r0, r1
    b6ae:	6021      	str	r1, [r4, #0]
    b6b0:	6062      	str	r2, [r4, #4]
    b6b2:	605c      	str	r4, [r3, #4]
    b6b4:	e7ca      	b.n	b64c <_free_r+0x24>
    b6b6:	46c0      	nop			; (mov r8, r8)
    b6b8:	20000ed4 	.word	0x20000ed4

0000b6bc <_malloc_r>:
    b6bc:	2303      	movs	r3, #3
    b6be:	b570      	push	{r4, r5, r6, lr}
    b6c0:	1ccd      	adds	r5, r1, #3
    b6c2:	439d      	bics	r5, r3
    b6c4:	3508      	adds	r5, #8
    b6c6:	0006      	movs	r6, r0
    b6c8:	2d0c      	cmp	r5, #12
    b6ca:	d21e      	bcs.n	b70a <_malloc_r+0x4e>
    b6cc:	250c      	movs	r5, #12
    b6ce:	42a9      	cmp	r1, r5
    b6d0:	d81d      	bhi.n	b70e <_malloc_r+0x52>
    b6d2:	0030      	movs	r0, r6
    b6d4:	f000 fdaa 	bl	c22c <__malloc_lock>
    b6d8:	4a25      	ldr	r2, [pc, #148]	; (b770 <_malloc_r+0xb4>)
    b6da:	6814      	ldr	r4, [r2, #0]
    b6dc:	0021      	movs	r1, r4
    b6de:	2900      	cmp	r1, #0
    b6e0:	d119      	bne.n	b716 <_malloc_r+0x5a>
    b6e2:	4c24      	ldr	r4, [pc, #144]	; (b774 <_malloc_r+0xb8>)
    b6e4:	6823      	ldr	r3, [r4, #0]
    b6e6:	2b00      	cmp	r3, #0
    b6e8:	d103      	bne.n	b6f2 <_malloc_r+0x36>
    b6ea:	0030      	movs	r0, r6
    b6ec:	f000 f8dc 	bl	b8a8 <_sbrk_r>
    b6f0:	6020      	str	r0, [r4, #0]
    b6f2:	0029      	movs	r1, r5
    b6f4:	0030      	movs	r0, r6
    b6f6:	f000 f8d7 	bl	b8a8 <_sbrk_r>
    b6fa:	1c43      	adds	r3, r0, #1
    b6fc:	d12c      	bne.n	b758 <_malloc_r+0x9c>
    b6fe:	230c      	movs	r3, #12
    b700:	0030      	movs	r0, r6
    b702:	6033      	str	r3, [r6, #0]
    b704:	f000 fd93 	bl	c22e <__malloc_unlock>
    b708:	e003      	b.n	b712 <_malloc_r+0x56>
    b70a:	2d00      	cmp	r5, #0
    b70c:	dadf      	bge.n	b6ce <_malloc_r+0x12>
    b70e:	230c      	movs	r3, #12
    b710:	6033      	str	r3, [r6, #0]
    b712:	2000      	movs	r0, #0
    b714:	bd70      	pop	{r4, r5, r6, pc}
    b716:	680b      	ldr	r3, [r1, #0]
    b718:	1b5b      	subs	r3, r3, r5
    b71a:	d41a      	bmi.n	b752 <_malloc_r+0x96>
    b71c:	2b0b      	cmp	r3, #11
    b71e:	d903      	bls.n	b728 <_malloc_r+0x6c>
    b720:	600b      	str	r3, [r1, #0]
    b722:	18cc      	adds	r4, r1, r3
    b724:	6025      	str	r5, [r4, #0]
    b726:	e003      	b.n	b730 <_malloc_r+0x74>
    b728:	428c      	cmp	r4, r1
    b72a:	d10e      	bne.n	b74a <_malloc_r+0x8e>
    b72c:	6863      	ldr	r3, [r4, #4]
    b72e:	6013      	str	r3, [r2, #0]
    b730:	0030      	movs	r0, r6
    b732:	f000 fd7c 	bl	c22e <__malloc_unlock>
    b736:	0020      	movs	r0, r4
    b738:	2207      	movs	r2, #7
    b73a:	300b      	adds	r0, #11
    b73c:	1d23      	adds	r3, r4, #4
    b73e:	4390      	bics	r0, r2
    b740:	1ac3      	subs	r3, r0, r3
    b742:	d0e7      	beq.n	b714 <_malloc_r+0x58>
    b744:	425a      	negs	r2, r3
    b746:	50e2      	str	r2, [r4, r3]
    b748:	e7e4      	b.n	b714 <_malloc_r+0x58>
    b74a:	684b      	ldr	r3, [r1, #4]
    b74c:	6063      	str	r3, [r4, #4]
    b74e:	000c      	movs	r4, r1
    b750:	e7ee      	b.n	b730 <_malloc_r+0x74>
    b752:	000c      	movs	r4, r1
    b754:	6849      	ldr	r1, [r1, #4]
    b756:	e7c2      	b.n	b6de <_malloc_r+0x22>
    b758:	2303      	movs	r3, #3
    b75a:	1cc4      	adds	r4, r0, #3
    b75c:	439c      	bics	r4, r3
    b75e:	42a0      	cmp	r0, r4
    b760:	d0e0      	beq.n	b724 <_malloc_r+0x68>
    b762:	1a21      	subs	r1, r4, r0
    b764:	0030      	movs	r0, r6
    b766:	f000 f89f 	bl	b8a8 <_sbrk_r>
    b76a:	1c43      	adds	r3, r0, #1
    b76c:	d1da      	bne.n	b724 <_malloc_r+0x68>
    b76e:	e7c6      	b.n	b6fe <_malloc_r+0x42>
    b770:	20000ed4 	.word	0x20000ed4
    b774:	20000ed8 	.word	0x20000ed8

0000b778 <iprintf>:
    b778:	b40f      	push	{r0, r1, r2, r3}
    b77a:	4b0b      	ldr	r3, [pc, #44]	; (b7a8 <iprintf+0x30>)
    b77c:	b513      	push	{r0, r1, r4, lr}
    b77e:	681c      	ldr	r4, [r3, #0]
    b780:	2c00      	cmp	r4, #0
    b782:	d005      	beq.n	b790 <iprintf+0x18>
    b784:	69a3      	ldr	r3, [r4, #24]
    b786:	2b00      	cmp	r3, #0
    b788:	d102      	bne.n	b790 <iprintf+0x18>
    b78a:	0020      	movs	r0, r4
    b78c:	f000 fc38 	bl	c000 <__sinit>
    b790:	ab05      	add	r3, sp, #20
    b792:	9a04      	ldr	r2, [sp, #16]
    b794:	68a1      	ldr	r1, [r4, #8]
    b796:	0020      	movs	r0, r4
    b798:	9301      	str	r3, [sp, #4]
    b79a:	f000 fed7 	bl	c54c <_vfiprintf_r>
    b79e:	bc16      	pop	{r1, r2, r4}
    b7a0:	bc08      	pop	{r3}
    b7a2:	b004      	add	sp, #16
    b7a4:	4718      	bx	r3
    b7a6:	46c0      	nop			; (mov r8, r8)
    b7a8:	2000012c 	.word	0x2000012c

0000b7ac <putchar>:
    b7ac:	4b08      	ldr	r3, [pc, #32]	; (b7d0 <putchar+0x24>)
    b7ae:	b570      	push	{r4, r5, r6, lr}
    b7b0:	681c      	ldr	r4, [r3, #0]
    b7b2:	0005      	movs	r5, r0
    b7b4:	2c00      	cmp	r4, #0
    b7b6:	d005      	beq.n	b7c4 <putchar+0x18>
    b7b8:	69a3      	ldr	r3, [r4, #24]
    b7ba:	2b00      	cmp	r3, #0
    b7bc:	d102      	bne.n	b7c4 <putchar+0x18>
    b7be:	0020      	movs	r0, r4
    b7c0:	f000 fc1e 	bl	c000 <__sinit>
    b7c4:	0029      	movs	r1, r5
    b7c6:	68a2      	ldr	r2, [r4, #8]
    b7c8:	0020      	movs	r0, r4
    b7ca:	f001 f963 	bl	ca94 <_putc_r>
    b7ce:	bd70      	pop	{r4, r5, r6, pc}
    b7d0:	2000012c 	.word	0x2000012c

0000b7d4 <_puts_r>:
    b7d4:	b570      	push	{r4, r5, r6, lr}
    b7d6:	0005      	movs	r5, r0
    b7d8:	000e      	movs	r6, r1
    b7da:	2800      	cmp	r0, #0
    b7dc:	d004      	beq.n	b7e8 <_puts_r+0x14>
    b7de:	6983      	ldr	r3, [r0, #24]
    b7e0:	2b00      	cmp	r3, #0
    b7e2:	d101      	bne.n	b7e8 <_puts_r+0x14>
    b7e4:	f000 fc0c 	bl	c000 <__sinit>
    b7e8:	69ab      	ldr	r3, [r5, #24]
    b7ea:	68ac      	ldr	r4, [r5, #8]
    b7ec:	2b00      	cmp	r3, #0
    b7ee:	d102      	bne.n	b7f6 <_puts_r+0x22>
    b7f0:	0028      	movs	r0, r5
    b7f2:	f000 fc05 	bl	c000 <__sinit>
    b7f6:	4b24      	ldr	r3, [pc, #144]	; (b888 <_puts_r+0xb4>)
    b7f8:	429c      	cmp	r4, r3
    b7fa:	d10f      	bne.n	b81c <_puts_r+0x48>
    b7fc:	686c      	ldr	r4, [r5, #4]
    b7fe:	89a3      	ldrh	r3, [r4, #12]
    b800:	071b      	lsls	r3, r3, #28
    b802:	d502      	bpl.n	b80a <_puts_r+0x36>
    b804:	6923      	ldr	r3, [r4, #16]
    b806:	2b00      	cmp	r3, #0
    b808:	d120      	bne.n	b84c <_puts_r+0x78>
    b80a:	0021      	movs	r1, r4
    b80c:	0028      	movs	r0, r5
    b80e:	f000 fa89 	bl	bd24 <__swsetup_r>
    b812:	2800      	cmp	r0, #0
    b814:	d01a      	beq.n	b84c <_puts_r+0x78>
    b816:	2001      	movs	r0, #1
    b818:	4240      	negs	r0, r0
    b81a:	bd70      	pop	{r4, r5, r6, pc}
    b81c:	4b1b      	ldr	r3, [pc, #108]	; (b88c <_puts_r+0xb8>)
    b81e:	429c      	cmp	r4, r3
    b820:	d101      	bne.n	b826 <_puts_r+0x52>
    b822:	68ac      	ldr	r4, [r5, #8]
    b824:	e7eb      	b.n	b7fe <_puts_r+0x2a>
    b826:	4b1a      	ldr	r3, [pc, #104]	; (b890 <_puts_r+0xbc>)
    b828:	429c      	cmp	r4, r3
    b82a:	d1e8      	bne.n	b7fe <_puts_r+0x2a>
    b82c:	68ec      	ldr	r4, [r5, #12]
    b82e:	e7e6      	b.n	b7fe <_puts_r+0x2a>
    b830:	3b01      	subs	r3, #1
    b832:	3601      	adds	r6, #1
    b834:	60a3      	str	r3, [r4, #8]
    b836:	2b00      	cmp	r3, #0
    b838:	da04      	bge.n	b844 <_puts_r+0x70>
    b83a:	69a2      	ldr	r2, [r4, #24]
    b83c:	4293      	cmp	r3, r2
    b83e:	db16      	blt.n	b86e <_puts_r+0x9a>
    b840:	290a      	cmp	r1, #10
    b842:	d014      	beq.n	b86e <_puts_r+0x9a>
    b844:	6823      	ldr	r3, [r4, #0]
    b846:	1c5a      	adds	r2, r3, #1
    b848:	6022      	str	r2, [r4, #0]
    b84a:	7019      	strb	r1, [r3, #0]
    b84c:	7831      	ldrb	r1, [r6, #0]
    b84e:	68a3      	ldr	r3, [r4, #8]
    b850:	2900      	cmp	r1, #0
    b852:	d1ed      	bne.n	b830 <_puts_r+0x5c>
    b854:	3b01      	subs	r3, #1
    b856:	60a3      	str	r3, [r4, #8]
    b858:	2b00      	cmp	r3, #0
    b85a:	da0f      	bge.n	b87c <_puts_r+0xa8>
    b85c:	0022      	movs	r2, r4
    b85e:	310a      	adds	r1, #10
    b860:	0028      	movs	r0, r5
    b862:	f000 fa09 	bl	bc78 <__swbuf_r>
    b866:	1c43      	adds	r3, r0, #1
    b868:	d0d5      	beq.n	b816 <_puts_r+0x42>
    b86a:	200a      	movs	r0, #10
    b86c:	e7d5      	b.n	b81a <_puts_r+0x46>
    b86e:	0022      	movs	r2, r4
    b870:	0028      	movs	r0, r5
    b872:	f000 fa01 	bl	bc78 <__swbuf_r>
    b876:	1c43      	adds	r3, r0, #1
    b878:	d1e8      	bne.n	b84c <_puts_r+0x78>
    b87a:	e7cc      	b.n	b816 <_puts_r+0x42>
    b87c:	200a      	movs	r0, #10
    b87e:	6823      	ldr	r3, [r4, #0]
    b880:	1c5a      	adds	r2, r3, #1
    b882:	6022      	str	r2, [r4, #0]
    b884:	7018      	strb	r0, [r3, #0]
    b886:	e7c8      	b.n	b81a <_puts_r+0x46>
    b888:	0000f1cc 	.word	0x0000f1cc
    b88c:	0000f1ec 	.word	0x0000f1ec
    b890:	0000f1ac 	.word	0x0000f1ac

0000b894 <puts>:
    b894:	b510      	push	{r4, lr}
    b896:	4b03      	ldr	r3, [pc, #12]	; (b8a4 <puts+0x10>)
    b898:	0001      	movs	r1, r0
    b89a:	6818      	ldr	r0, [r3, #0]
    b89c:	f7ff ff9a 	bl	b7d4 <_puts_r>
    b8a0:	bd10      	pop	{r4, pc}
    b8a2:	46c0      	nop			; (mov r8, r8)
    b8a4:	2000012c 	.word	0x2000012c

0000b8a8 <_sbrk_r>:
    b8a8:	2300      	movs	r3, #0
    b8aa:	b570      	push	{r4, r5, r6, lr}
    b8ac:	4c06      	ldr	r4, [pc, #24]	; (b8c8 <_sbrk_r+0x20>)
    b8ae:	0005      	movs	r5, r0
    b8b0:	0008      	movs	r0, r1
    b8b2:	6023      	str	r3, [r4, #0]
    b8b4:	f7fa ffb2 	bl	681c <_sbrk>
    b8b8:	1c43      	adds	r3, r0, #1
    b8ba:	d103      	bne.n	b8c4 <_sbrk_r+0x1c>
    b8bc:	6823      	ldr	r3, [r4, #0]
    b8be:	2b00      	cmp	r3, #0
    b8c0:	d000      	beq.n	b8c4 <_sbrk_r+0x1c>
    b8c2:	602b      	str	r3, [r5, #0]
    b8c4:	bd70      	pop	{r4, r5, r6, pc}
    b8c6:	46c0      	nop			; (mov r8, r8)
    b8c8:	200013dc 	.word	0x200013dc

0000b8cc <setbuf>:
    b8cc:	424a      	negs	r2, r1
    b8ce:	414a      	adcs	r2, r1
    b8d0:	2380      	movs	r3, #128	; 0x80
    b8d2:	b510      	push	{r4, lr}
    b8d4:	0052      	lsls	r2, r2, #1
    b8d6:	00db      	lsls	r3, r3, #3
    b8d8:	f000 f802 	bl	b8e0 <setvbuf>
    b8dc:	bd10      	pop	{r4, pc}
	...

0000b8e0 <setvbuf>:
    b8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8e2:	001d      	movs	r5, r3
    b8e4:	4b4f      	ldr	r3, [pc, #316]	; (ba24 <setvbuf+0x144>)
    b8e6:	b085      	sub	sp, #20
    b8e8:	681e      	ldr	r6, [r3, #0]
    b8ea:	0004      	movs	r4, r0
    b8ec:	000f      	movs	r7, r1
    b8ee:	9200      	str	r2, [sp, #0]
    b8f0:	2e00      	cmp	r6, #0
    b8f2:	d005      	beq.n	b900 <setvbuf+0x20>
    b8f4:	69b3      	ldr	r3, [r6, #24]
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d102      	bne.n	b900 <setvbuf+0x20>
    b8fa:	0030      	movs	r0, r6
    b8fc:	f000 fb80 	bl	c000 <__sinit>
    b900:	4b49      	ldr	r3, [pc, #292]	; (ba28 <setvbuf+0x148>)
    b902:	429c      	cmp	r4, r3
    b904:	d150      	bne.n	b9a8 <setvbuf+0xc8>
    b906:	6874      	ldr	r4, [r6, #4]
    b908:	9b00      	ldr	r3, [sp, #0]
    b90a:	2b02      	cmp	r3, #2
    b90c:	d005      	beq.n	b91a <setvbuf+0x3a>
    b90e:	2b01      	cmp	r3, #1
    b910:	d900      	bls.n	b914 <setvbuf+0x34>
    b912:	e084      	b.n	ba1e <setvbuf+0x13e>
    b914:	2d00      	cmp	r5, #0
    b916:	da00      	bge.n	b91a <setvbuf+0x3a>
    b918:	e081      	b.n	ba1e <setvbuf+0x13e>
    b91a:	0021      	movs	r1, r4
    b91c:	0030      	movs	r0, r6
    b91e:	f000 fb01 	bl	bf24 <_fflush_r>
    b922:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b924:	2900      	cmp	r1, #0
    b926:	d008      	beq.n	b93a <setvbuf+0x5a>
    b928:	0023      	movs	r3, r4
    b92a:	3344      	adds	r3, #68	; 0x44
    b92c:	4299      	cmp	r1, r3
    b92e:	d002      	beq.n	b936 <setvbuf+0x56>
    b930:	0030      	movs	r0, r6
    b932:	f7ff fe79 	bl	b628 <_free_r>
    b936:	2300      	movs	r3, #0
    b938:	6363      	str	r3, [r4, #52]	; 0x34
    b93a:	2300      	movs	r3, #0
    b93c:	61a3      	str	r3, [r4, #24]
    b93e:	6063      	str	r3, [r4, #4]
    b940:	89a3      	ldrh	r3, [r4, #12]
    b942:	061b      	lsls	r3, r3, #24
    b944:	d503      	bpl.n	b94e <setvbuf+0x6e>
    b946:	6921      	ldr	r1, [r4, #16]
    b948:	0030      	movs	r0, r6
    b94a:	f7ff fe6d 	bl	b628 <_free_r>
    b94e:	89a3      	ldrh	r3, [r4, #12]
    b950:	4a36      	ldr	r2, [pc, #216]	; (ba2c <setvbuf+0x14c>)
    b952:	4013      	ands	r3, r2
    b954:	81a3      	strh	r3, [r4, #12]
    b956:	9b00      	ldr	r3, [sp, #0]
    b958:	2b02      	cmp	r3, #2
    b95a:	d05a      	beq.n	ba12 <setvbuf+0x132>
    b95c:	ab03      	add	r3, sp, #12
    b95e:	aa02      	add	r2, sp, #8
    b960:	0021      	movs	r1, r4
    b962:	0030      	movs	r0, r6
    b964:	f000 fbe4 	bl	c130 <__swhatbuf_r>
    b968:	89a3      	ldrh	r3, [r4, #12]
    b96a:	4318      	orrs	r0, r3
    b96c:	81a0      	strh	r0, [r4, #12]
    b96e:	2d00      	cmp	r5, #0
    b970:	d124      	bne.n	b9bc <setvbuf+0xdc>
    b972:	9d02      	ldr	r5, [sp, #8]
    b974:	0028      	movs	r0, r5
    b976:	f7ff fe1f 	bl	b5b8 <malloc>
    b97a:	9501      	str	r5, [sp, #4]
    b97c:	1e07      	subs	r7, r0, #0
    b97e:	d142      	bne.n	ba06 <setvbuf+0x126>
    b980:	9b02      	ldr	r3, [sp, #8]
    b982:	9301      	str	r3, [sp, #4]
    b984:	42ab      	cmp	r3, r5
    b986:	d139      	bne.n	b9fc <setvbuf+0x11c>
    b988:	2001      	movs	r0, #1
    b98a:	4240      	negs	r0, r0
    b98c:	2302      	movs	r3, #2
    b98e:	89a2      	ldrh	r2, [r4, #12]
    b990:	4313      	orrs	r3, r2
    b992:	81a3      	strh	r3, [r4, #12]
    b994:	2300      	movs	r3, #0
    b996:	60a3      	str	r3, [r4, #8]
    b998:	0023      	movs	r3, r4
    b99a:	3347      	adds	r3, #71	; 0x47
    b99c:	6023      	str	r3, [r4, #0]
    b99e:	6123      	str	r3, [r4, #16]
    b9a0:	2301      	movs	r3, #1
    b9a2:	6163      	str	r3, [r4, #20]
    b9a4:	b005      	add	sp, #20
    b9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9a8:	4b21      	ldr	r3, [pc, #132]	; (ba30 <setvbuf+0x150>)
    b9aa:	429c      	cmp	r4, r3
    b9ac:	d101      	bne.n	b9b2 <setvbuf+0xd2>
    b9ae:	68b4      	ldr	r4, [r6, #8]
    b9b0:	e7aa      	b.n	b908 <setvbuf+0x28>
    b9b2:	4b20      	ldr	r3, [pc, #128]	; (ba34 <setvbuf+0x154>)
    b9b4:	429c      	cmp	r4, r3
    b9b6:	d1a7      	bne.n	b908 <setvbuf+0x28>
    b9b8:	68f4      	ldr	r4, [r6, #12]
    b9ba:	e7a5      	b.n	b908 <setvbuf+0x28>
    b9bc:	2f00      	cmp	r7, #0
    b9be:	d0d9      	beq.n	b974 <setvbuf+0x94>
    b9c0:	69b3      	ldr	r3, [r6, #24]
    b9c2:	2b00      	cmp	r3, #0
    b9c4:	d102      	bne.n	b9cc <setvbuf+0xec>
    b9c6:	0030      	movs	r0, r6
    b9c8:	f000 fb1a 	bl	c000 <__sinit>
    b9cc:	9b00      	ldr	r3, [sp, #0]
    b9ce:	2b01      	cmp	r3, #1
    b9d0:	d103      	bne.n	b9da <setvbuf+0xfa>
    b9d2:	89a3      	ldrh	r3, [r4, #12]
    b9d4:	9a00      	ldr	r2, [sp, #0]
    b9d6:	431a      	orrs	r2, r3
    b9d8:	81a2      	strh	r2, [r4, #12]
    b9da:	2008      	movs	r0, #8
    b9dc:	89a3      	ldrh	r3, [r4, #12]
    b9de:	6027      	str	r7, [r4, #0]
    b9e0:	6127      	str	r7, [r4, #16]
    b9e2:	6165      	str	r5, [r4, #20]
    b9e4:	4018      	ands	r0, r3
    b9e6:	d018      	beq.n	ba1a <setvbuf+0x13a>
    b9e8:	2001      	movs	r0, #1
    b9ea:	4018      	ands	r0, r3
    b9ec:	2300      	movs	r3, #0
    b9ee:	4298      	cmp	r0, r3
    b9f0:	d011      	beq.n	ba16 <setvbuf+0x136>
    b9f2:	426d      	negs	r5, r5
    b9f4:	60a3      	str	r3, [r4, #8]
    b9f6:	61a5      	str	r5, [r4, #24]
    b9f8:	0018      	movs	r0, r3
    b9fa:	e7d3      	b.n	b9a4 <setvbuf+0xc4>
    b9fc:	9801      	ldr	r0, [sp, #4]
    b9fe:	f7ff fddb 	bl	b5b8 <malloc>
    ba02:	1e07      	subs	r7, r0, #0
    ba04:	d0c0      	beq.n	b988 <setvbuf+0xa8>
    ba06:	2380      	movs	r3, #128	; 0x80
    ba08:	89a2      	ldrh	r2, [r4, #12]
    ba0a:	9d01      	ldr	r5, [sp, #4]
    ba0c:	4313      	orrs	r3, r2
    ba0e:	81a3      	strh	r3, [r4, #12]
    ba10:	e7d6      	b.n	b9c0 <setvbuf+0xe0>
    ba12:	2000      	movs	r0, #0
    ba14:	e7ba      	b.n	b98c <setvbuf+0xac>
    ba16:	60a5      	str	r5, [r4, #8]
    ba18:	e7c4      	b.n	b9a4 <setvbuf+0xc4>
    ba1a:	60a0      	str	r0, [r4, #8]
    ba1c:	e7c2      	b.n	b9a4 <setvbuf+0xc4>
    ba1e:	2001      	movs	r0, #1
    ba20:	4240      	negs	r0, r0
    ba22:	e7bf      	b.n	b9a4 <setvbuf+0xc4>
    ba24:	2000012c 	.word	0x2000012c
    ba28:	0000f1cc 	.word	0x0000f1cc
    ba2c:	fffff35c 	.word	0xfffff35c
    ba30:	0000f1ec 	.word	0x0000f1ec
    ba34:	0000f1ac 	.word	0x0000f1ac

0000ba38 <siprintf>:
    ba38:	b40e      	push	{r1, r2, r3}
    ba3a:	b510      	push	{r4, lr}
    ba3c:	b09d      	sub	sp, #116	; 0x74
    ba3e:	a902      	add	r1, sp, #8
    ba40:	9002      	str	r0, [sp, #8]
    ba42:	6108      	str	r0, [r1, #16]
    ba44:	480b      	ldr	r0, [pc, #44]	; (ba74 <siprintf+0x3c>)
    ba46:	2482      	movs	r4, #130	; 0x82
    ba48:	6088      	str	r0, [r1, #8]
    ba4a:	6148      	str	r0, [r1, #20]
    ba4c:	2001      	movs	r0, #1
    ba4e:	4240      	negs	r0, r0
    ba50:	ab1f      	add	r3, sp, #124	; 0x7c
    ba52:	81c8      	strh	r0, [r1, #14]
    ba54:	4808      	ldr	r0, [pc, #32]	; (ba78 <siprintf+0x40>)
    ba56:	cb04      	ldmia	r3!, {r2}
    ba58:	00a4      	lsls	r4, r4, #2
    ba5a:	6800      	ldr	r0, [r0, #0]
    ba5c:	9301      	str	r3, [sp, #4]
    ba5e:	818c      	strh	r4, [r1, #12]
    ba60:	f000 fc48 	bl	c2f4 <_svfiprintf_r>
    ba64:	2300      	movs	r3, #0
    ba66:	9a02      	ldr	r2, [sp, #8]
    ba68:	7013      	strb	r3, [r2, #0]
    ba6a:	b01d      	add	sp, #116	; 0x74
    ba6c:	bc10      	pop	{r4}
    ba6e:	bc08      	pop	{r3}
    ba70:	b003      	add	sp, #12
    ba72:	4718      	bx	r3
    ba74:	7fffffff 	.word	0x7fffffff
    ba78:	2000012c 	.word	0x2000012c

0000ba7c <strcpy>:
    ba7c:	1c03      	adds	r3, r0, #0
    ba7e:	780a      	ldrb	r2, [r1, #0]
    ba80:	3101      	adds	r1, #1
    ba82:	701a      	strb	r2, [r3, #0]
    ba84:	3301      	adds	r3, #1
    ba86:	2a00      	cmp	r2, #0
    ba88:	d1f9      	bne.n	ba7e <strcpy+0x2>
    ba8a:	4770      	bx	lr

0000ba8c <strdup>:
    ba8c:	b510      	push	{r4, lr}
    ba8e:	4b03      	ldr	r3, [pc, #12]	; (ba9c <strdup+0x10>)
    ba90:	0001      	movs	r1, r0
    ba92:	6818      	ldr	r0, [r3, #0]
    ba94:	f000 f804 	bl	baa0 <_strdup_r>
    ba98:	bd10      	pop	{r4, pc}
    ba9a:	46c0      	nop			; (mov r8, r8)
    ba9c:	2000012c 	.word	0x2000012c

0000baa0 <_strdup_r>:
    baa0:	b570      	push	{r4, r5, r6, lr}
    baa2:	0005      	movs	r5, r0
    baa4:	0008      	movs	r0, r1
    baa6:	000e      	movs	r6, r1
    baa8:	f000 f80d 	bl	bac6 <strlen>
    baac:	1c44      	adds	r4, r0, #1
    baae:	0021      	movs	r1, r4
    bab0:	0028      	movs	r0, r5
    bab2:	f7ff fe03 	bl	b6bc <_malloc_r>
    bab6:	1e05      	subs	r5, r0, #0
    bab8:	d003      	beq.n	bac2 <_strdup_r+0x22>
    baba:	0022      	movs	r2, r4
    babc:	0031      	movs	r1, r6
    babe:	f7ff fd8f 	bl	b5e0 <memcpy>
    bac2:	0028      	movs	r0, r5
    bac4:	bd70      	pop	{r4, r5, r6, pc}

0000bac6 <strlen>:
    bac6:	2300      	movs	r3, #0
    bac8:	5cc2      	ldrb	r2, [r0, r3]
    baca:	3301      	adds	r3, #1
    bacc:	2a00      	cmp	r2, #0
    bace:	d1fb      	bne.n	bac8 <strlen+0x2>
    bad0:	1e58      	subs	r0, r3, #1
    bad2:	4770      	bx	lr

0000bad4 <strncmp>:
    bad4:	2300      	movs	r3, #0
    bad6:	b530      	push	{r4, r5, lr}
    bad8:	429a      	cmp	r2, r3
    bada:	d00a      	beq.n	baf2 <strncmp+0x1e>
    badc:	3a01      	subs	r2, #1
    bade:	5cc4      	ldrb	r4, [r0, r3]
    bae0:	5ccd      	ldrb	r5, [r1, r3]
    bae2:	42ac      	cmp	r4, r5
    bae4:	d104      	bne.n	baf0 <strncmp+0x1c>
    bae6:	429a      	cmp	r2, r3
    bae8:	d002      	beq.n	baf0 <strncmp+0x1c>
    baea:	3301      	adds	r3, #1
    baec:	2c00      	cmp	r4, #0
    baee:	d1f6      	bne.n	bade <strncmp+0xa>
    baf0:	1b63      	subs	r3, r4, r5
    baf2:	0018      	movs	r0, r3
    baf4:	bd30      	pop	{r4, r5, pc}

0000baf6 <strncpy>:
    baf6:	b570      	push	{r4, r5, r6, lr}
    baf8:	0004      	movs	r4, r0
    bafa:	2a00      	cmp	r2, #0
    bafc:	d100      	bne.n	bb00 <strncpy+0xa>
    bafe:	bd70      	pop	{r4, r5, r6, pc}
    bb00:	780d      	ldrb	r5, [r1, #0]
    bb02:	1e56      	subs	r6, r2, #1
    bb04:	1c63      	adds	r3, r4, #1
    bb06:	7025      	strb	r5, [r4, #0]
    bb08:	3101      	adds	r1, #1
    bb0a:	2d00      	cmp	r5, #0
    bb0c:	d105      	bne.n	bb1a <strncpy+0x24>
    bb0e:	18a4      	adds	r4, r4, r2
    bb10:	429c      	cmp	r4, r3
    bb12:	d0f4      	beq.n	bafe <strncpy+0x8>
    bb14:	701d      	strb	r5, [r3, #0]
    bb16:	3301      	adds	r3, #1
    bb18:	e7fa      	b.n	bb10 <strncpy+0x1a>
    bb1a:	001c      	movs	r4, r3
    bb1c:	0032      	movs	r2, r6
    bb1e:	e7ec      	b.n	bafa <strncpy+0x4>

0000bb20 <strrchr>:
    bb20:	b570      	push	{r4, r5, r6, lr}
    bb22:	000d      	movs	r5, r1
    bb24:	2400      	movs	r4, #0
    bb26:	2900      	cmp	r1, #0
    bb28:	d105      	bne.n	bb36 <strrchr+0x16>
    bb2a:	f001 f835 	bl	cb98 <strchr>
    bb2e:	0004      	movs	r4, r0
    bb30:	e006      	b.n	bb40 <strrchr+0x20>
    bb32:	001c      	movs	r4, r3
    bb34:	1c58      	adds	r0, r3, #1
    bb36:	0029      	movs	r1, r5
    bb38:	f001 f82e 	bl	cb98 <strchr>
    bb3c:	1e03      	subs	r3, r0, #0
    bb3e:	d1f8      	bne.n	bb32 <strrchr+0x12>
    bb40:	0020      	movs	r0, r4
    bb42:	bd70      	pop	{r4, r5, r6, pc}

0000bb44 <_strtol_l.isra.0>:
    bb44:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb46:	001f      	movs	r7, r3
    bb48:	000e      	movs	r6, r1
    bb4a:	b087      	sub	sp, #28
    bb4c:	9005      	str	r0, [sp, #20]
    bb4e:	9103      	str	r1, [sp, #12]
    bb50:	9202      	str	r2, [sp, #8]
    bb52:	980c      	ldr	r0, [sp, #48]	; 0x30
    bb54:	7834      	ldrb	r4, [r6, #0]
    bb56:	f000 fae8 	bl	c12a <__locale_ctype_ptr_l>
    bb5a:	2208      	movs	r2, #8
    bb5c:	1900      	adds	r0, r0, r4
    bb5e:	7843      	ldrb	r3, [r0, #1]
    bb60:	1c75      	adds	r5, r6, #1
    bb62:	4013      	ands	r3, r2
    bb64:	d10c      	bne.n	bb80 <_strtol_l.isra.0+0x3c>
    bb66:	2c2d      	cmp	r4, #45	; 0x2d
    bb68:	d10c      	bne.n	bb84 <_strtol_l.isra.0+0x40>
    bb6a:	3301      	adds	r3, #1
    bb6c:	782c      	ldrb	r4, [r5, #0]
    bb6e:	9301      	str	r3, [sp, #4]
    bb70:	1cb5      	adds	r5, r6, #2
    bb72:	2f00      	cmp	r7, #0
    bb74:	d00c      	beq.n	bb90 <_strtol_l.isra.0+0x4c>
    bb76:	2f10      	cmp	r7, #16
    bb78:	d114      	bne.n	bba4 <_strtol_l.isra.0+0x60>
    bb7a:	2c30      	cmp	r4, #48	; 0x30
    bb7c:	d00a      	beq.n	bb94 <_strtol_l.isra.0+0x50>
    bb7e:	e011      	b.n	bba4 <_strtol_l.isra.0+0x60>
    bb80:	002e      	movs	r6, r5
    bb82:	e7e6      	b.n	bb52 <_strtol_l.isra.0+0xe>
    bb84:	9301      	str	r3, [sp, #4]
    bb86:	2c2b      	cmp	r4, #43	; 0x2b
    bb88:	d1f3      	bne.n	bb72 <_strtol_l.isra.0+0x2e>
    bb8a:	782c      	ldrb	r4, [r5, #0]
    bb8c:	1cb5      	adds	r5, r6, #2
    bb8e:	e7f0      	b.n	bb72 <_strtol_l.isra.0+0x2e>
    bb90:	2c30      	cmp	r4, #48	; 0x30
    bb92:	d12f      	bne.n	bbf4 <_strtol_l.isra.0+0xb0>
    bb94:	2220      	movs	r2, #32
    bb96:	782b      	ldrb	r3, [r5, #0]
    bb98:	4393      	bics	r3, r2
    bb9a:	2b58      	cmp	r3, #88	; 0x58
    bb9c:	d151      	bne.n	bc42 <_strtol_l.isra.0+0xfe>
    bb9e:	2710      	movs	r7, #16
    bba0:	786c      	ldrb	r4, [r5, #1]
    bba2:	3502      	adds	r5, #2
    bba4:	9b01      	ldr	r3, [sp, #4]
    bba6:	4a29      	ldr	r2, [pc, #164]	; (bc4c <_strtol_l.isra.0+0x108>)
    bba8:	0039      	movs	r1, r7
    bbaa:	189e      	adds	r6, r3, r2
    bbac:	0030      	movs	r0, r6
    bbae:	f7ff fbbf 	bl	b330 <__aeabi_uidivmod>
    bbb2:	0030      	movs	r0, r6
    bbb4:	9104      	str	r1, [sp, #16]
    bbb6:	0039      	movs	r1, r7
    bbb8:	f7ff fb34 	bl	b224 <__udivsi3>
    bbbc:	2101      	movs	r1, #1
    bbbe:	2300      	movs	r3, #0
    bbc0:	4249      	negs	r1, r1
    bbc2:	0002      	movs	r2, r0
    bbc4:	468c      	mov	ip, r1
    bbc6:	0018      	movs	r0, r3
    bbc8:	0021      	movs	r1, r4
    bbca:	3930      	subs	r1, #48	; 0x30
    bbcc:	2909      	cmp	r1, #9
    bbce:	d813      	bhi.n	bbf8 <_strtol_l.isra.0+0xb4>
    bbd0:	000c      	movs	r4, r1
    bbd2:	42a7      	cmp	r7, r4
    bbd4:	dd1c      	ble.n	bc10 <_strtol_l.isra.0+0xcc>
    bbd6:	1c59      	adds	r1, r3, #1
    bbd8:	d009      	beq.n	bbee <_strtol_l.isra.0+0xaa>
    bbda:	4663      	mov	r3, ip
    bbdc:	4282      	cmp	r2, r0
    bbde:	d306      	bcc.n	bbee <_strtol_l.isra.0+0xaa>
    bbe0:	d102      	bne.n	bbe8 <_strtol_l.isra.0+0xa4>
    bbe2:	9904      	ldr	r1, [sp, #16]
    bbe4:	42a1      	cmp	r1, r4
    bbe6:	db02      	blt.n	bbee <_strtol_l.isra.0+0xaa>
    bbe8:	2301      	movs	r3, #1
    bbea:	4378      	muls	r0, r7
    bbec:	1820      	adds	r0, r4, r0
    bbee:	782c      	ldrb	r4, [r5, #0]
    bbf0:	3501      	adds	r5, #1
    bbf2:	e7e9      	b.n	bbc8 <_strtol_l.isra.0+0x84>
    bbf4:	270a      	movs	r7, #10
    bbf6:	e7d5      	b.n	bba4 <_strtol_l.isra.0+0x60>
    bbf8:	0021      	movs	r1, r4
    bbfa:	3941      	subs	r1, #65	; 0x41
    bbfc:	2919      	cmp	r1, #25
    bbfe:	d801      	bhi.n	bc04 <_strtol_l.isra.0+0xc0>
    bc00:	3c37      	subs	r4, #55	; 0x37
    bc02:	e7e6      	b.n	bbd2 <_strtol_l.isra.0+0x8e>
    bc04:	0021      	movs	r1, r4
    bc06:	3961      	subs	r1, #97	; 0x61
    bc08:	2919      	cmp	r1, #25
    bc0a:	d801      	bhi.n	bc10 <_strtol_l.isra.0+0xcc>
    bc0c:	3c57      	subs	r4, #87	; 0x57
    bc0e:	e7e0      	b.n	bbd2 <_strtol_l.isra.0+0x8e>
    bc10:	1c5a      	adds	r2, r3, #1
    bc12:	d108      	bne.n	bc26 <_strtol_l.isra.0+0xe2>
    bc14:	9a05      	ldr	r2, [sp, #20]
    bc16:	3323      	adds	r3, #35	; 0x23
    bc18:	6013      	str	r3, [r2, #0]
    bc1a:	9b02      	ldr	r3, [sp, #8]
    bc1c:	0030      	movs	r0, r6
    bc1e:	2b00      	cmp	r3, #0
    bc20:	d10b      	bne.n	bc3a <_strtol_l.isra.0+0xf6>
    bc22:	b007      	add	sp, #28
    bc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc26:	9a01      	ldr	r2, [sp, #4]
    bc28:	2a00      	cmp	r2, #0
    bc2a:	d000      	beq.n	bc2e <_strtol_l.isra.0+0xea>
    bc2c:	4240      	negs	r0, r0
    bc2e:	9a02      	ldr	r2, [sp, #8]
    bc30:	2a00      	cmp	r2, #0
    bc32:	d0f6      	beq.n	bc22 <_strtol_l.isra.0+0xde>
    bc34:	9a03      	ldr	r2, [sp, #12]
    bc36:	2b00      	cmp	r3, #0
    bc38:	d000      	beq.n	bc3c <_strtol_l.isra.0+0xf8>
    bc3a:	1e6a      	subs	r2, r5, #1
    bc3c:	9b02      	ldr	r3, [sp, #8]
    bc3e:	601a      	str	r2, [r3, #0]
    bc40:	e7ef      	b.n	bc22 <_strtol_l.isra.0+0xde>
    bc42:	2430      	movs	r4, #48	; 0x30
    bc44:	2f00      	cmp	r7, #0
    bc46:	d1ad      	bne.n	bba4 <_strtol_l.isra.0+0x60>
    bc48:	3708      	adds	r7, #8
    bc4a:	e7ab      	b.n	bba4 <_strtol_l.isra.0+0x60>
    bc4c:	7fffffff 	.word	0x7fffffff

0000bc50 <strtol>:
    bc50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bc52:	0013      	movs	r3, r2
    bc54:	4a06      	ldr	r2, [pc, #24]	; (bc70 <strtol+0x20>)
    bc56:	0005      	movs	r5, r0
    bc58:	6810      	ldr	r0, [r2, #0]
    bc5a:	6a04      	ldr	r4, [r0, #32]
    bc5c:	2c00      	cmp	r4, #0
    bc5e:	d100      	bne.n	bc62 <strtol+0x12>
    bc60:	4c04      	ldr	r4, [pc, #16]	; (bc74 <strtol+0x24>)
    bc62:	000a      	movs	r2, r1
    bc64:	9400      	str	r4, [sp, #0]
    bc66:	0029      	movs	r1, r5
    bc68:	f7ff ff6c 	bl	bb44 <_strtol_l.isra.0>
    bc6c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    bc6e:	46c0      	nop			; (mov r8, r8)
    bc70:	2000012c 	.word	0x2000012c
    bc74:	20000190 	.word	0x20000190

0000bc78 <__swbuf_r>:
    bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc7a:	0005      	movs	r5, r0
    bc7c:	000e      	movs	r6, r1
    bc7e:	0014      	movs	r4, r2
    bc80:	2800      	cmp	r0, #0
    bc82:	d004      	beq.n	bc8e <__swbuf_r+0x16>
    bc84:	6983      	ldr	r3, [r0, #24]
    bc86:	2b00      	cmp	r3, #0
    bc88:	d101      	bne.n	bc8e <__swbuf_r+0x16>
    bc8a:	f000 f9b9 	bl	c000 <__sinit>
    bc8e:	4b22      	ldr	r3, [pc, #136]	; (bd18 <__swbuf_r+0xa0>)
    bc90:	429c      	cmp	r4, r3
    bc92:	d12d      	bne.n	bcf0 <__swbuf_r+0x78>
    bc94:	686c      	ldr	r4, [r5, #4]
    bc96:	69a3      	ldr	r3, [r4, #24]
    bc98:	60a3      	str	r3, [r4, #8]
    bc9a:	89a3      	ldrh	r3, [r4, #12]
    bc9c:	071b      	lsls	r3, r3, #28
    bc9e:	d531      	bpl.n	bd04 <__swbuf_r+0x8c>
    bca0:	6923      	ldr	r3, [r4, #16]
    bca2:	2b00      	cmp	r3, #0
    bca4:	d02e      	beq.n	bd04 <__swbuf_r+0x8c>
    bca6:	6823      	ldr	r3, [r4, #0]
    bca8:	6922      	ldr	r2, [r4, #16]
    bcaa:	b2f7      	uxtb	r7, r6
    bcac:	1a98      	subs	r0, r3, r2
    bcae:	6963      	ldr	r3, [r4, #20]
    bcb0:	b2f6      	uxtb	r6, r6
    bcb2:	4298      	cmp	r0, r3
    bcb4:	db05      	blt.n	bcc2 <__swbuf_r+0x4a>
    bcb6:	0021      	movs	r1, r4
    bcb8:	0028      	movs	r0, r5
    bcba:	f000 f933 	bl	bf24 <_fflush_r>
    bcbe:	2800      	cmp	r0, #0
    bcc0:	d126      	bne.n	bd10 <__swbuf_r+0x98>
    bcc2:	68a3      	ldr	r3, [r4, #8]
    bcc4:	3001      	adds	r0, #1
    bcc6:	3b01      	subs	r3, #1
    bcc8:	60a3      	str	r3, [r4, #8]
    bcca:	6823      	ldr	r3, [r4, #0]
    bccc:	1c5a      	adds	r2, r3, #1
    bcce:	6022      	str	r2, [r4, #0]
    bcd0:	701f      	strb	r7, [r3, #0]
    bcd2:	6963      	ldr	r3, [r4, #20]
    bcd4:	4298      	cmp	r0, r3
    bcd6:	d004      	beq.n	bce2 <__swbuf_r+0x6a>
    bcd8:	89a3      	ldrh	r3, [r4, #12]
    bcda:	07db      	lsls	r3, r3, #31
    bcdc:	d51a      	bpl.n	bd14 <__swbuf_r+0x9c>
    bcde:	2e0a      	cmp	r6, #10
    bce0:	d118      	bne.n	bd14 <__swbuf_r+0x9c>
    bce2:	0021      	movs	r1, r4
    bce4:	0028      	movs	r0, r5
    bce6:	f000 f91d 	bl	bf24 <_fflush_r>
    bcea:	2800      	cmp	r0, #0
    bcec:	d012      	beq.n	bd14 <__swbuf_r+0x9c>
    bcee:	e00f      	b.n	bd10 <__swbuf_r+0x98>
    bcf0:	4b0a      	ldr	r3, [pc, #40]	; (bd1c <__swbuf_r+0xa4>)
    bcf2:	429c      	cmp	r4, r3
    bcf4:	d101      	bne.n	bcfa <__swbuf_r+0x82>
    bcf6:	68ac      	ldr	r4, [r5, #8]
    bcf8:	e7cd      	b.n	bc96 <__swbuf_r+0x1e>
    bcfa:	4b09      	ldr	r3, [pc, #36]	; (bd20 <__swbuf_r+0xa8>)
    bcfc:	429c      	cmp	r4, r3
    bcfe:	d1ca      	bne.n	bc96 <__swbuf_r+0x1e>
    bd00:	68ec      	ldr	r4, [r5, #12]
    bd02:	e7c8      	b.n	bc96 <__swbuf_r+0x1e>
    bd04:	0021      	movs	r1, r4
    bd06:	0028      	movs	r0, r5
    bd08:	f000 f80c 	bl	bd24 <__swsetup_r>
    bd0c:	2800      	cmp	r0, #0
    bd0e:	d0ca      	beq.n	bca6 <__swbuf_r+0x2e>
    bd10:	2601      	movs	r6, #1
    bd12:	4276      	negs	r6, r6
    bd14:	0030      	movs	r0, r6
    bd16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd18:	0000f1cc 	.word	0x0000f1cc
    bd1c:	0000f1ec 	.word	0x0000f1ec
    bd20:	0000f1ac 	.word	0x0000f1ac

0000bd24 <__swsetup_r>:
    bd24:	4b36      	ldr	r3, [pc, #216]	; (be00 <__swsetup_r+0xdc>)
    bd26:	b570      	push	{r4, r5, r6, lr}
    bd28:	681d      	ldr	r5, [r3, #0]
    bd2a:	0006      	movs	r6, r0
    bd2c:	000c      	movs	r4, r1
    bd2e:	2d00      	cmp	r5, #0
    bd30:	d005      	beq.n	bd3e <__swsetup_r+0x1a>
    bd32:	69ab      	ldr	r3, [r5, #24]
    bd34:	2b00      	cmp	r3, #0
    bd36:	d102      	bne.n	bd3e <__swsetup_r+0x1a>
    bd38:	0028      	movs	r0, r5
    bd3a:	f000 f961 	bl	c000 <__sinit>
    bd3e:	4b31      	ldr	r3, [pc, #196]	; (be04 <__swsetup_r+0xe0>)
    bd40:	429c      	cmp	r4, r3
    bd42:	d10f      	bne.n	bd64 <__swsetup_r+0x40>
    bd44:	686c      	ldr	r4, [r5, #4]
    bd46:	230c      	movs	r3, #12
    bd48:	5ee2      	ldrsh	r2, [r4, r3]
    bd4a:	b293      	uxth	r3, r2
    bd4c:	0719      	lsls	r1, r3, #28
    bd4e:	d42d      	bmi.n	bdac <__swsetup_r+0x88>
    bd50:	06d9      	lsls	r1, r3, #27
    bd52:	d411      	bmi.n	bd78 <__swsetup_r+0x54>
    bd54:	2309      	movs	r3, #9
    bd56:	2001      	movs	r0, #1
    bd58:	6033      	str	r3, [r6, #0]
    bd5a:	3337      	adds	r3, #55	; 0x37
    bd5c:	4313      	orrs	r3, r2
    bd5e:	81a3      	strh	r3, [r4, #12]
    bd60:	4240      	negs	r0, r0
    bd62:	bd70      	pop	{r4, r5, r6, pc}
    bd64:	4b28      	ldr	r3, [pc, #160]	; (be08 <__swsetup_r+0xe4>)
    bd66:	429c      	cmp	r4, r3
    bd68:	d101      	bne.n	bd6e <__swsetup_r+0x4a>
    bd6a:	68ac      	ldr	r4, [r5, #8]
    bd6c:	e7eb      	b.n	bd46 <__swsetup_r+0x22>
    bd6e:	4b27      	ldr	r3, [pc, #156]	; (be0c <__swsetup_r+0xe8>)
    bd70:	429c      	cmp	r4, r3
    bd72:	d1e8      	bne.n	bd46 <__swsetup_r+0x22>
    bd74:	68ec      	ldr	r4, [r5, #12]
    bd76:	e7e6      	b.n	bd46 <__swsetup_r+0x22>
    bd78:	075b      	lsls	r3, r3, #29
    bd7a:	d513      	bpl.n	bda4 <__swsetup_r+0x80>
    bd7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bd7e:	2900      	cmp	r1, #0
    bd80:	d008      	beq.n	bd94 <__swsetup_r+0x70>
    bd82:	0023      	movs	r3, r4
    bd84:	3344      	adds	r3, #68	; 0x44
    bd86:	4299      	cmp	r1, r3
    bd88:	d002      	beq.n	bd90 <__swsetup_r+0x6c>
    bd8a:	0030      	movs	r0, r6
    bd8c:	f7ff fc4c 	bl	b628 <_free_r>
    bd90:	2300      	movs	r3, #0
    bd92:	6363      	str	r3, [r4, #52]	; 0x34
    bd94:	2224      	movs	r2, #36	; 0x24
    bd96:	89a3      	ldrh	r3, [r4, #12]
    bd98:	4393      	bics	r3, r2
    bd9a:	81a3      	strh	r3, [r4, #12]
    bd9c:	2300      	movs	r3, #0
    bd9e:	6063      	str	r3, [r4, #4]
    bda0:	6923      	ldr	r3, [r4, #16]
    bda2:	6023      	str	r3, [r4, #0]
    bda4:	2308      	movs	r3, #8
    bda6:	89a2      	ldrh	r2, [r4, #12]
    bda8:	4313      	orrs	r3, r2
    bdaa:	81a3      	strh	r3, [r4, #12]
    bdac:	6923      	ldr	r3, [r4, #16]
    bdae:	2b00      	cmp	r3, #0
    bdb0:	d10b      	bne.n	bdca <__swsetup_r+0xa6>
    bdb2:	21a0      	movs	r1, #160	; 0xa0
    bdb4:	2280      	movs	r2, #128	; 0x80
    bdb6:	89a3      	ldrh	r3, [r4, #12]
    bdb8:	0089      	lsls	r1, r1, #2
    bdba:	0092      	lsls	r2, r2, #2
    bdbc:	400b      	ands	r3, r1
    bdbe:	4293      	cmp	r3, r2
    bdc0:	d003      	beq.n	bdca <__swsetup_r+0xa6>
    bdc2:	0021      	movs	r1, r4
    bdc4:	0030      	movs	r0, r6
    bdc6:	f000 f9db 	bl	c180 <__smakebuf_r>
    bdca:	2301      	movs	r3, #1
    bdcc:	89a2      	ldrh	r2, [r4, #12]
    bdce:	4013      	ands	r3, r2
    bdd0:	d011      	beq.n	bdf6 <__swsetup_r+0xd2>
    bdd2:	2300      	movs	r3, #0
    bdd4:	60a3      	str	r3, [r4, #8]
    bdd6:	6963      	ldr	r3, [r4, #20]
    bdd8:	425b      	negs	r3, r3
    bdda:	61a3      	str	r3, [r4, #24]
    bddc:	2000      	movs	r0, #0
    bdde:	6923      	ldr	r3, [r4, #16]
    bde0:	4283      	cmp	r3, r0
    bde2:	d1be      	bne.n	bd62 <__swsetup_r+0x3e>
    bde4:	230c      	movs	r3, #12
    bde6:	5ee2      	ldrsh	r2, [r4, r3]
    bde8:	0613      	lsls	r3, r2, #24
    bdea:	d5ba      	bpl.n	bd62 <__swsetup_r+0x3e>
    bdec:	2340      	movs	r3, #64	; 0x40
    bdee:	4313      	orrs	r3, r2
    bdf0:	81a3      	strh	r3, [r4, #12]
    bdf2:	3801      	subs	r0, #1
    bdf4:	e7b5      	b.n	bd62 <__swsetup_r+0x3e>
    bdf6:	0792      	lsls	r2, r2, #30
    bdf8:	d400      	bmi.n	bdfc <__swsetup_r+0xd8>
    bdfa:	6963      	ldr	r3, [r4, #20]
    bdfc:	60a3      	str	r3, [r4, #8]
    bdfe:	e7ed      	b.n	bddc <__swsetup_r+0xb8>
    be00:	2000012c 	.word	0x2000012c
    be04:	0000f1cc 	.word	0x0000f1cc
    be08:	0000f1ec 	.word	0x0000f1ec
    be0c:	0000f1ac 	.word	0x0000f1ac

0000be10 <__sflush_r>:
    be10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    be12:	898a      	ldrh	r2, [r1, #12]
    be14:	0005      	movs	r5, r0
    be16:	000c      	movs	r4, r1
    be18:	0713      	lsls	r3, r2, #28
    be1a:	d460      	bmi.n	bede <__sflush_r+0xce>
    be1c:	684b      	ldr	r3, [r1, #4]
    be1e:	2b00      	cmp	r3, #0
    be20:	dc04      	bgt.n	be2c <__sflush_r+0x1c>
    be22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    be24:	2b00      	cmp	r3, #0
    be26:	dc01      	bgt.n	be2c <__sflush_r+0x1c>
    be28:	2000      	movs	r0, #0
    be2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    be2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    be2e:	2f00      	cmp	r7, #0
    be30:	d0fa      	beq.n	be28 <__sflush_r+0x18>
    be32:	2300      	movs	r3, #0
    be34:	682e      	ldr	r6, [r5, #0]
    be36:	602b      	str	r3, [r5, #0]
    be38:	2380      	movs	r3, #128	; 0x80
    be3a:	015b      	lsls	r3, r3, #5
    be3c:	401a      	ands	r2, r3
    be3e:	d034      	beq.n	beaa <__sflush_r+0x9a>
    be40:	6d60      	ldr	r0, [r4, #84]	; 0x54
    be42:	89a3      	ldrh	r3, [r4, #12]
    be44:	075b      	lsls	r3, r3, #29
    be46:	d506      	bpl.n	be56 <__sflush_r+0x46>
    be48:	6863      	ldr	r3, [r4, #4]
    be4a:	1ac0      	subs	r0, r0, r3
    be4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    be4e:	2b00      	cmp	r3, #0
    be50:	d001      	beq.n	be56 <__sflush_r+0x46>
    be52:	6c23      	ldr	r3, [r4, #64]	; 0x40
    be54:	1ac0      	subs	r0, r0, r3
    be56:	0002      	movs	r2, r0
    be58:	6a21      	ldr	r1, [r4, #32]
    be5a:	2300      	movs	r3, #0
    be5c:	0028      	movs	r0, r5
    be5e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    be60:	47b8      	blx	r7
    be62:	89a1      	ldrh	r1, [r4, #12]
    be64:	1c43      	adds	r3, r0, #1
    be66:	d106      	bne.n	be76 <__sflush_r+0x66>
    be68:	682b      	ldr	r3, [r5, #0]
    be6a:	2b1d      	cmp	r3, #29
    be6c:	d831      	bhi.n	bed2 <__sflush_r+0xc2>
    be6e:	4a2c      	ldr	r2, [pc, #176]	; (bf20 <__sflush_r+0x110>)
    be70:	40da      	lsrs	r2, r3
    be72:	07d3      	lsls	r3, r2, #31
    be74:	d52d      	bpl.n	bed2 <__sflush_r+0xc2>
    be76:	2300      	movs	r3, #0
    be78:	6063      	str	r3, [r4, #4]
    be7a:	6923      	ldr	r3, [r4, #16]
    be7c:	6023      	str	r3, [r4, #0]
    be7e:	04cb      	lsls	r3, r1, #19
    be80:	d505      	bpl.n	be8e <__sflush_r+0x7e>
    be82:	1c43      	adds	r3, r0, #1
    be84:	d102      	bne.n	be8c <__sflush_r+0x7c>
    be86:	682b      	ldr	r3, [r5, #0]
    be88:	2b00      	cmp	r3, #0
    be8a:	d100      	bne.n	be8e <__sflush_r+0x7e>
    be8c:	6560      	str	r0, [r4, #84]	; 0x54
    be8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    be90:	602e      	str	r6, [r5, #0]
    be92:	2900      	cmp	r1, #0
    be94:	d0c8      	beq.n	be28 <__sflush_r+0x18>
    be96:	0023      	movs	r3, r4
    be98:	3344      	adds	r3, #68	; 0x44
    be9a:	4299      	cmp	r1, r3
    be9c:	d002      	beq.n	bea4 <__sflush_r+0x94>
    be9e:	0028      	movs	r0, r5
    bea0:	f7ff fbc2 	bl	b628 <_free_r>
    bea4:	2000      	movs	r0, #0
    bea6:	6360      	str	r0, [r4, #52]	; 0x34
    bea8:	e7bf      	b.n	be2a <__sflush_r+0x1a>
    beaa:	2301      	movs	r3, #1
    beac:	6a21      	ldr	r1, [r4, #32]
    beae:	0028      	movs	r0, r5
    beb0:	47b8      	blx	r7
    beb2:	1c43      	adds	r3, r0, #1
    beb4:	d1c5      	bne.n	be42 <__sflush_r+0x32>
    beb6:	682b      	ldr	r3, [r5, #0]
    beb8:	2b00      	cmp	r3, #0
    beba:	d0c2      	beq.n	be42 <__sflush_r+0x32>
    bebc:	2b1d      	cmp	r3, #29
    bebe:	d001      	beq.n	bec4 <__sflush_r+0xb4>
    bec0:	2b16      	cmp	r3, #22
    bec2:	d101      	bne.n	bec8 <__sflush_r+0xb8>
    bec4:	602e      	str	r6, [r5, #0]
    bec6:	e7af      	b.n	be28 <__sflush_r+0x18>
    bec8:	2340      	movs	r3, #64	; 0x40
    beca:	89a2      	ldrh	r2, [r4, #12]
    becc:	4313      	orrs	r3, r2
    bece:	81a3      	strh	r3, [r4, #12]
    bed0:	e7ab      	b.n	be2a <__sflush_r+0x1a>
    bed2:	2340      	movs	r3, #64	; 0x40
    bed4:	430b      	orrs	r3, r1
    bed6:	2001      	movs	r0, #1
    bed8:	81a3      	strh	r3, [r4, #12]
    beda:	4240      	negs	r0, r0
    bedc:	e7a5      	b.n	be2a <__sflush_r+0x1a>
    bede:	690f      	ldr	r7, [r1, #16]
    bee0:	2f00      	cmp	r7, #0
    bee2:	d0a1      	beq.n	be28 <__sflush_r+0x18>
    bee4:	680b      	ldr	r3, [r1, #0]
    bee6:	600f      	str	r7, [r1, #0]
    bee8:	1bdb      	subs	r3, r3, r7
    beea:	9301      	str	r3, [sp, #4]
    beec:	2300      	movs	r3, #0
    beee:	0792      	lsls	r2, r2, #30
    bef0:	d100      	bne.n	bef4 <__sflush_r+0xe4>
    bef2:	694b      	ldr	r3, [r1, #20]
    bef4:	60a3      	str	r3, [r4, #8]
    bef6:	9b01      	ldr	r3, [sp, #4]
    bef8:	2b00      	cmp	r3, #0
    befa:	dc00      	bgt.n	befe <__sflush_r+0xee>
    befc:	e794      	b.n	be28 <__sflush_r+0x18>
    befe:	9b01      	ldr	r3, [sp, #4]
    bf00:	003a      	movs	r2, r7
    bf02:	6a21      	ldr	r1, [r4, #32]
    bf04:	0028      	movs	r0, r5
    bf06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    bf08:	47b0      	blx	r6
    bf0a:	2800      	cmp	r0, #0
    bf0c:	dc03      	bgt.n	bf16 <__sflush_r+0x106>
    bf0e:	2340      	movs	r3, #64	; 0x40
    bf10:	89a2      	ldrh	r2, [r4, #12]
    bf12:	4313      	orrs	r3, r2
    bf14:	e7df      	b.n	bed6 <__sflush_r+0xc6>
    bf16:	9b01      	ldr	r3, [sp, #4]
    bf18:	183f      	adds	r7, r7, r0
    bf1a:	1a1b      	subs	r3, r3, r0
    bf1c:	9301      	str	r3, [sp, #4]
    bf1e:	e7ea      	b.n	bef6 <__sflush_r+0xe6>
    bf20:	20400001 	.word	0x20400001

0000bf24 <_fflush_r>:
    bf24:	690b      	ldr	r3, [r1, #16]
    bf26:	b570      	push	{r4, r5, r6, lr}
    bf28:	0005      	movs	r5, r0
    bf2a:	000c      	movs	r4, r1
    bf2c:	2b00      	cmp	r3, #0
    bf2e:	d101      	bne.n	bf34 <_fflush_r+0x10>
    bf30:	2000      	movs	r0, #0
    bf32:	bd70      	pop	{r4, r5, r6, pc}
    bf34:	2800      	cmp	r0, #0
    bf36:	d004      	beq.n	bf42 <_fflush_r+0x1e>
    bf38:	6983      	ldr	r3, [r0, #24]
    bf3a:	2b00      	cmp	r3, #0
    bf3c:	d101      	bne.n	bf42 <_fflush_r+0x1e>
    bf3e:	f000 f85f 	bl	c000 <__sinit>
    bf42:	4b0b      	ldr	r3, [pc, #44]	; (bf70 <_fflush_r+0x4c>)
    bf44:	429c      	cmp	r4, r3
    bf46:	d109      	bne.n	bf5c <_fflush_r+0x38>
    bf48:	686c      	ldr	r4, [r5, #4]
    bf4a:	220c      	movs	r2, #12
    bf4c:	5ea3      	ldrsh	r3, [r4, r2]
    bf4e:	2b00      	cmp	r3, #0
    bf50:	d0ee      	beq.n	bf30 <_fflush_r+0xc>
    bf52:	0021      	movs	r1, r4
    bf54:	0028      	movs	r0, r5
    bf56:	f7ff ff5b 	bl	be10 <__sflush_r>
    bf5a:	e7ea      	b.n	bf32 <_fflush_r+0xe>
    bf5c:	4b05      	ldr	r3, [pc, #20]	; (bf74 <_fflush_r+0x50>)
    bf5e:	429c      	cmp	r4, r3
    bf60:	d101      	bne.n	bf66 <_fflush_r+0x42>
    bf62:	68ac      	ldr	r4, [r5, #8]
    bf64:	e7f1      	b.n	bf4a <_fflush_r+0x26>
    bf66:	4b04      	ldr	r3, [pc, #16]	; (bf78 <_fflush_r+0x54>)
    bf68:	429c      	cmp	r4, r3
    bf6a:	d1ee      	bne.n	bf4a <_fflush_r+0x26>
    bf6c:	68ec      	ldr	r4, [r5, #12]
    bf6e:	e7ec      	b.n	bf4a <_fflush_r+0x26>
    bf70:	0000f1cc 	.word	0x0000f1cc
    bf74:	0000f1ec 	.word	0x0000f1ec
    bf78:	0000f1ac 	.word	0x0000f1ac

0000bf7c <_cleanup_r>:
    bf7c:	b510      	push	{r4, lr}
    bf7e:	4902      	ldr	r1, [pc, #8]	; (bf88 <_cleanup_r+0xc>)
    bf80:	f000 f8b2 	bl	c0e8 <_fwalk_reent>
    bf84:	bd10      	pop	{r4, pc}
    bf86:	46c0      	nop			; (mov r8, r8)
    bf88:	0000bf25 	.word	0x0000bf25

0000bf8c <std.isra.0>:
    bf8c:	2300      	movs	r3, #0
    bf8e:	b510      	push	{r4, lr}
    bf90:	0004      	movs	r4, r0
    bf92:	6003      	str	r3, [r0, #0]
    bf94:	6043      	str	r3, [r0, #4]
    bf96:	6083      	str	r3, [r0, #8]
    bf98:	8181      	strh	r1, [r0, #12]
    bf9a:	6643      	str	r3, [r0, #100]	; 0x64
    bf9c:	81c2      	strh	r2, [r0, #14]
    bf9e:	6103      	str	r3, [r0, #16]
    bfa0:	6143      	str	r3, [r0, #20]
    bfa2:	6183      	str	r3, [r0, #24]
    bfa4:	0019      	movs	r1, r3
    bfa6:	2208      	movs	r2, #8
    bfa8:	305c      	adds	r0, #92	; 0x5c
    bfaa:	f7ff fb34 	bl	b616 <memset>
    bfae:	4b05      	ldr	r3, [pc, #20]	; (bfc4 <std.isra.0+0x38>)
    bfb0:	6224      	str	r4, [r4, #32]
    bfb2:	6263      	str	r3, [r4, #36]	; 0x24
    bfb4:	4b04      	ldr	r3, [pc, #16]	; (bfc8 <std.isra.0+0x3c>)
    bfb6:	62a3      	str	r3, [r4, #40]	; 0x28
    bfb8:	4b04      	ldr	r3, [pc, #16]	; (bfcc <std.isra.0+0x40>)
    bfba:	62e3      	str	r3, [r4, #44]	; 0x2c
    bfbc:	4b04      	ldr	r3, [pc, #16]	; (bfd0 <std.isra.0+0x44>)
    bfbe:	6323      	str	r3, [r4, #48]	; 0x30
    bfc0:	bd10      	pop	{r4, pc}
    bfc2:	46c0      	nop			; (mov r8, r8)
    bfc4:	0000cb01 	.word	0x0000cb01
    bfc8:	0000cb29 	.word	0x0000cb29
    bfcc:	0000cb61 	.word	0x0000cb61
    bfd0:	0000cb8d 	.word	0x0000cb8d

0000bfd4 <__sfmoreglue>:
    bfd4:	b570      	push	{r4, r5, r6, lr}
    bfd6:	2568      	movs	r5, #104	; 0x68
    bfd8:	1e4a      	subs	r2, r1, #1
    bfda:	4355      	muls	r5, r2
    bfdc:	000e      	movs	r6, r1
    bfde:	0029      	movs	r1, r5
    bfe0:	3174      	adds	r1, #116	; 0x74
    bfe2:	f7ff fb6b 	bl	b6bc <_malloc_r>
    bfe6:	1e04      	subs	r4, r0, #0
    bfe8:	d008      	beq.n	bffc <__sfmoreglue+0x28>
    bfea:	2100      	movs	r1, #0
    bfec:	002a      	movs	r2, r5
    bfee:	6001      	str	r1, [r0, #0]
    bff0:	6046      	str	r6, [r0, #4]
    bff2:	300c      	adds	r0, #12
    bff4:	60a0      	str	r0, [r4, #8]
    bff6:	3268      	adds	r2, #104	; 0x68
    bff8:	f7ff fb0d 	bl	b616 <memset>
    bffc:	0020      	movs	r0, r4
    bffe:	bd70      	pop	{r4, r5, r6, pc}

0000c000 <__sinit>:
    c000:	6983      	ldr	r3, [r0, #24]
    c002:	b513      	push	{r0, r1, r4, lr}
    c004:	0004      	movs	r4, r0
    c006:	2b00      	cmp	r3, #0
    c008:	d128      	bne.n	c05c <__sinit+0x5c>
    c00a:	6483      	str	r3, [r0, #72]	; 0x48
    c00c:	64c3      	str	r3, [r0, #76]	; 0x4c
    c00e:	6503      	str	r3, [r0, #80]	; 0x50
    c010:	4b13      	ldr	r3, [pc, #76]	; (c060 <__sinit+0x60>)
    c012:	4a14      	ldr	r2, [pc, #80]	; (c064 <__sinit+0x64>)
    c014:	681b      	ldr	r3, [r3, #0]
    c016:	6282      	str	r2, [r0, #40]	; 0x28
    c018:	9301      	str	r3, [sp, #4]
    c01a:	4298      	cmp	r0, r3
    c01c:	d101      	bne.n	c022 <__sinit+0x22>
    c01e:	2301      	movs	r3, #1
    c020:	6183      	str	r3, [r0, #24]
    c022:	0020      	movs	r0, r4
    c024:	f000 f820 	bl	c068 <__sfp>
    c028:	6060      	str	r0, [r4, #4]
    c02a:	0020      	movs	r0, r4
    c02c:	f000 f81c 	bl	c068 <__sfp>
    c030:	60a0      	str	r0, [r4, #8]
    c032:	0020      	movs	r0, r4
    c034:	f000 f818 	bl	c068 <__sfp>
    c038:	2200      	movs	r2, #0
    c03a:	60e0      	str	r0, [r4, #12]
    c03c:	2104      	movs	r1, #4
    c03e:	6860      	ldr	r0, [r4, #4]
    c040:	f7ff ffa4 	bl	bf8c <std.isra.0>
    c044:	2201      	movs	r2, #1
    c046:	2109      	movs	r1, #9
    c048:	68a0      	ldr	r0, [r4, #8]
    c04a:	f7ff ff9f 	bl	bf8c <std.isra.0>
    c04e:	2202      	movs	r2, #2
    c050:	2112      	movs	r1, #18
    c052:	68e0      	ldr	r0, [r4, #12]
    c054:	f7ff ff9a 	bl	bf8c <std.isra.0>
    c058:	2301      	movs	r3, #1
    c05a:	61a3      	str	r3, [r4, #24]
    c05c:	bd13      	pop	{r0, r1, r4, pc}
    c05e:	46c0      	nop			; (mov r8, r8)
    c060:	0000f1a8 	.word	0x0000f1a8
    c064:	0000bf7d 	.word	0x0000bf7d

0000c068 <__sfp>:
    c068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c06a:	4b1e      	ldr	r3, [pc, #120]	; (c0e4 <__sfp+0x7c>)
    c06c:	0007      	movs	r7, r0
    c06e:	681e      	ldr	r6, [r3, #0]
    c070:	69b3      	ldr	r3, [r6, #24]
    c072:	2b00      	cmp	r3, #0
    c074:	d102      	bne.n	c07c <__sfp+0x14>
    c076:	0030      	movs	r0, r6
    c078:	f7ff ffc2 	bl	c000 <__sinit>
    c07c:	3648      	adds	r6, #72	; 0x48
    c07e:	68b4      	ldr	r4, [r6, #8]
    c080:	6873      	ldr	r3, [r6, #4]
    c082:	3b01      	subs	r3, #1
    c084:	d504      	bpl.n	c090 <__sfp+0x28>
    c086:	6833      	ldr	r3, [r6, #0]
    c088:	2b00      	cmp	r3, #0
    c08a:	d007      	beq.n	c09c <__sfp+0x34>
    c08c:	6836      	ldr	r6, [r6, #0]
    c08e:	e7f6      	b.n	c07e <__sfp+0x16>
    c090:	220c      	movs	r2, #12
    c092:	5ea5      	ldrsh	r5, [r4, r2]
    c094:	2d00      	cmp	r5, #0
    c096:	d00d      	beq.n	c0b4 <__sfp+0x4c>
    c098:	3468      	adds	r4, #104	; 0x68
    c09a:	e7f2      	b.n	c082 <__sfp+0x1a>
    c09c:	2104      	movs	r1, #4
    c09e:	0038      	movs	r0, r7
    c0a0:	f7ff ff98 	bl	bfd4 <__sfmoreglue>
    c0a4:	6030      	str	r0, [r6, #0]
    c0a6:	2800      	cmp	r0, #0
    c0a8:	d1f0      	bne.n	c08c <__sfp+0x24>
    c0aa:	230c      	movs	r3, #12
    c0ac:	0004      	movs	r4, r0
    c0ae:	603b      	str	r3, [r7, #0]
    c0b0:	0020      	movs	r0, r4
    c0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0b4:	2301      	movs	r3, #1
    c0b6:	0020      	movs	r0, r4
    c0b8:	425b      	negs	r3, r3
    c0ba:	81e3      	strh	r3, [r4, #14]
    c0bc:	3302      	adds	r3, #2
    c0be:	81a3      	strh	r3, [r4, #12]
    c0c0:	6665      	str	r5, [r4, #100]	; 0x64
    c0c2:	6025      	str	r5, [r4, #0]
    c0c4:	60a5      	str	r5, [r4, #8]
    c0c6:	6065      	str	r5, [r4, #4]
    c0c8:	6125      	str	r5, [r4, #16]
    c0ca:	6165      	str	r5, [r4, #20]
    c0cc:	61a5      	str	r5, [r4, #24]
    c0ce:	2208      	movs	r2, #8
    c0d0:	0029      	movs	r1, r5
    c0d2:	305c      	adds	r0, #92	; 0x5c
    c0d4:	f7ff fa9f 	bl	b616 <memset>
    c0d8:	6365      	str	r5, [r4, #52]	; 0x34
    c0da:	63a5      	str	r5, [r4, #56]	; 0x38
    c0dc:	64a5      	str	r5, [r4, #72]	; 0x48
    c0de:	64e5      	str	r5, [r4, #76]	; 0x4c
    c0e0:	e7e6      	b.n	c0b0 <__sfp+0x48>
    c0e2:	46c0      	nop			; (mov r8, r8)
    c0e4:	0000f1a8 	.word	0x0000f1a8

0000c0e8 <_fwalk_reent>:
    c0e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c0ea:	0004      	movs	r4, r0
    c0ec:	0007      	movs	r7, r0
    c0ee:	2600      	movs	r6, #0
    c0f0:	9101      	str	r1, [sp, #4]
    c0f2:	3448      	adds	r4, #72	; 0x48
    c0f4:	2c00      	cmp	r4, #0
    c0f6:	d101      	bne.n	c0fc <_fwalk_reent+0x14>
    c0f8:	0030      	movs	r0, r6
    c0fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c0fc:	6863      	ldr	r3, [r4, #4]
    c0fe:	68a5      	ldr	r5, [r4, #8]
    c100:	9300      	str	r3, [sp, #0]
    c102:	9b00      	ldr	r3, [sp, #0]
    c104:	3b01      	subs	r3, #1
    c106:	9300      	str	r3, [sp, #0]
    c108:	d501      	bpl.n	c10e <_fwalk_reent+0x26>
    c10a:	6824      	ldr	r4, [r4, #0]
    c10c:	e7f2      	b.n	c0f4 <_fwalk_reent+0xc>
    c10e:	89ab      	ldrh	r3, [r5, #12]
    c110:	2b01      	cmp	r3, #1
    c112:	d908      	bls.n	c126 <_fwalk_reent+0x3e>
    c114:	220e      	movs	r2, #14
    c116:	5eab      	ldrsh	r3, [r5, r2]
    c118:	3301      	adds	r3, #1
    c11a:	d004      	beq.n	c126 <_fwalk_reent+0x3e>
    c11c:	0029      	movs	r1, r5
    c11e:	0038      	movs	r0, r7
    c120:	9b01      	ldr	r3, [sp, #4]
    c122:	4798      	blx	r3
    c124:	4306      	orrs	r6, r0
    c126:	3568      	adds	r5, #104	; 0x68
    c128:	e7eb      	b.n	c102 <_fwalk_reent+0x1a>

0000c12a <__locale_ctype_ptr_l>:
    c12a:	30ec      	adds	r0, #236	; 0xec
    c12c:	6800      	ldr	r0, [r0, #0]
    c12e:	4770      	bx	lr

0000c130 <__swhatbuf_r>:
    c130:	b570      	push	{r4, r5, r6, lr}
    c132:	000e      	movs	r6, r1
    c134:	001d      	movs	r5, r3
    c136:	230e      	movs	r3, #14
    c138:	5ec9      	ldrsh	r1, [r1, r3]
    c13a:	b090      	sub	sp, #64	; 0x40
    c13c:	0014      	movs	r4, r2
    c13e:	2900      	cmp	r1, #0
    c140:	da07      	bge.n	c152 <__swhatbuf_r+0x22>
    c142:	2300      	movs	r3, #0
    c144:	602b      	str	r3, [r5, #0]
    c146:	89b3      	ldrh	r3, [r6, #12]
    c148:	061b      	lsls	r3, r3, #24
    c14a:	d411      	bmi.n	c170 <__swhatbuf_r+0x40>
    c14c:	2380      	movs	r3, #128	; 0x80
    c14e:	00db      	lsls	r3, r3, #3
    c150:	e00f      	b.n	c172 <__swhatbuf_r+0x42>
    c152:	aa01      	add	r2, sp, #4
    c154:	f000 fd60 	bl	cc18 <_fstat_r>
    c158:	2800      	cmp	r0, #0
    c15a:	dbf2      	blt.n	c142 <__swhatbuf_r+0x12>
    c15c:	22f0      	movs	r2, #240	; 0xf0
    c15e:	9b02      	ldr	r3, [sp, #8]
    c160:	0212      	lsls	r2, r2, #8
    c162:	4013      	ands	r3, r2
    c164:	4a05      	ldr	r2, [pc, #20]	; (c17c <__swhatbuf_r+0x4c>)
    c166:	189b      	adds	r3, r3, r2
    c168:	425a      	negs	r2, r3
    c16a:	4153      	adcs	r3, r2
    c16c:	602b      	str	r3, [r5, #0]
    c16e:	e7ed      	b.n	c14c <__swhatbuf_r+0x1c>
    c170:	2340      	movs	r3, #64	; 0x40
    c172:	2000      	movs	r0, #0
    c174:	6023      	str	r3, [r4, #0]
    c176:	b010      	add	sp, #64	; 0x40
    c178:	bd70      	pop	{r4, r5, r6, pc}
    c17a:	46c0      	nop			; (mov r8, r8)
    c17c:	ffffe000 	.word	0xffffe000

0000c180 <__smakebuf_r>:
    c180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c182:	2602      	movs	r6, #2
    c184:	898b      	ldrh	r3, [r1, #12]
    c186:	0005      	movs	r5, r0
    c188:	000c      	movs	r4, r1
    c18a:	4233      	tst	r3, r6
    c18c:	d006      	beq.n	c19c <__smakebuf_r+0x1c>
    c18e:	0023      	movs	r3, r4
    c190:	3347      	adds	r3, #71	; 0x47
    c192:	6023      	str	r3, [r4, #0]
    c194:	6123      	str	r3, [r4, #16]
    c196:	2301      	movs	r3, #1
    c198:	6163      	str	r3, [r4, #20]
    c19a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c19c:	ab01      	add	r3, sp, #4
    c19e:	466a      	mov	r2, sp
    c1a0:	f7ff ffc6 	bl	c130 <__swhatbuf_r>
    c1a4:	9900      	ldr	r1, [sp, #0]
    c1a6:	0007      	movs	r7, r0
    c1a8:	0028      	movs	r0, r5
    c1aa:	f7ff fa87 	bl	b6bc <_malloc_r>
    c1ae:	2800      	cmp	r0, #0
    c1b0:	d108      	bne.n	c1c4 <__smakebuf_r+0x44>
    c1b2:	220c      	movs	r2, #12
    c1b4:	5ea3      	ldrsh	r3, [r4, r2]
    c1b6:	059a      	lsls	r2, r3, #22
    c1b8:	d4ef      	bmi.n	c19a <__smakebuf_r+0x1a>
    c1ba:	2203      	movs	r2, #3
    c1bc:	4393      	bics	r3, r2
    c1be:	431e      	orrs	r6, r3
    c1c0:	81a6      	strh	r6, [r4, #12]
    c1c2:	e7e4      	b.n	c18e <__smakebuf_r+0xe>
    c1c4:	4b0f      	ldr	r3, [pc, #60]	; (c204 <__smakebuf_r+0x84>)
    c1c6:	62ab      	str	r3, [r5, #40]	; 0x28
    c1c8:	2380      	movs	r3, #128	; 0x80
    c1ca:	89a2      	ldrh	r2, [r4, #12]
    c1cc:	6020      	str	r0, [r4, #0]
    c1ce:	4313      	orrs	r3, r2
    c1d0:	81a3      	strh	r3, [r4, #12]
    c1d2:	9b00      	ldr	r3, [sp, #0]
    c1d4:	6120      	str	r0, [r4, #16]
    c1d6:	6163      	str	r3, [r4, #20]
    c1d8:	9b01      	ldr	r3, [sp, #4]
    c1da:	2b00      	cmp	r3, #0
    c1dc:	d00d      	beq.n	c1fa <__smakebuf_r+0x7a>
    c1de:	230e      	movs	r3, #14
    c1e0:	5ee1      	ldrsh	r1, [r4, r3]
    c1e2:	0028      	movs	r0, r5
    c1e4:	f000 fd2a 	bl	cc3c <_isatty_r>
    c1e8:	2800      	cmp	r0, #0
    c1ea:	d006      	beq.n	c1fa <__smakebuf_r+0x7a>
    c1ec:	2203      	movs	r2, #3
    c1ee:	89a3      	ldrh	r3, [r4, #12]
    c1f0:	4393      	bics	r3, r2
    c1f2:	001a      	movs	r2, r3
    c1f4:	2301      	movs	r3, #1
    c1f6:	4313      	orrs	r3, r2
    c1f8:	81a3      	strh	r3, [r4, #12]
    c1fa:	89a0      	ldrh	r0, [r4, #12]
    c1fc:	4338      	orrs	r0, r7
    c1fe:	81a0      	strh	r0, [r4, #12]
    c200:	e7cb      	b.n	c19a <__smakebuf_r+0x1a>
    c202:	46c0      	nop			; (mov r8, r8)
    c204:	0000bf7d 	.word	0x0000bf7d

0000c208 <__ascii_mbtowc>:
    c208:	b082      	sub	sp, #8
    c20a:	2900      	cmp	r1, #0
    c20c:	d100      	bne.n	c210 <__ascii_mbtowc+0x8>
    c20e:	a901      	add	r1, sp, #4
    c210:	1e10      	subs	r0, r2, #0
    c212:	d006      	beq.n	c222 <__ascii_mbtowc+0x1a>
    c214:	2b00      	cmp	r3, #0
    c216:	d006      	beq.n	c226 <__ascii_mbtowc+0x1e>
    c218:	7813      	ldrb	r3, [r2, #0]
    c21a:	600b      	str	r3, [r1, #0]
    c21c:	7810      	ldrb	r0, [r2, #0]
    c21e:	1e43      	subs	r3, r0, #1
    c220:	4198      	sbcs	r0, r3
    c222:	b002      	add	sp, #8
    c224:	4770      	bx	lr
    c226:	2002      	movs	r0, #2
    c228:	4240      	negs	r0, r0
    c22a:	e7fa      	b.n	c222 <__ascii_mbtowc+0x1a>

0000c22c <__malloc_lock>:
    c22c:	4770      	bx	lr

0000c22e <__malloc_unlock>:
    c22e:	4770      	bx	lr

0000c230 <__ssputs_r>:
    c230:	b5f0      	push	{r4, r5, r6, r7, lr}
    c232:	688e      	ldr	r6, [r1, #8]
    c234:	b085      	sub	sp, #20
    c236:	0007      	movs	r7, r0
    c238:	000c      	movs	r4, r1
    c23a:	9203      	str	r2, [sp, #12]
    c23c:	9301      	str	r3, [sp, #4]
    c23e:	429e      	cmp	r6, r3
    c240:	d839      	bhi.n	c2b6 <__ssputs_r+0x86>
    c242:	2390      	movs	r3, #144	; 0x90
    c244:	898a      	ldrh	r2, [r1, #12]
    c246:	00db      	lsls	r3, r3, #3
    c248:	421a      	tst	r2, r3
    c24a:	d034      	beq.n	c2b6 <__ssputs_r+0x86>
    c24c:	2503      	movs	r5, #3
    c24e:	6909      	ldr	r1, [r1, #16]
    c250:	6823      	ldr	r3, [r4, #0]
    c252:	1a5b      	subs	r3, r3, r1
    c254:	9302      	str	r3, [sp, #8]
    c256:	6963      	ldr	r3, [r4, #20]
    c258:	9802      	ldr	r0, [sp, #8]
    c25a:	435d      	muls	r5, r3
    c25c:	0feb      	lsrs	r3, r5, #31
    c25e:	195d      	adds	r5, r3, r5
    c260:	9b01      	ldr	r3, [sp, #4]
    c262:	106d      	asrs	r5, r5, #1
    c264:	3301      	adds	r3, #1
    c266:	181b      	adds	r3, r3, r0
    c268:	42ab      	cmp	r3, r5
    c26a:	d900      	bls.n	c26e <__ssputs_r+0x3e>
    c26c:	001d      	movs	r5, r3
    c26e:	0553      	lsls	r3, r2, #21
    c270:	d532      	bpl.n	c2d8 <__ssputs_r+0xa8>
    c272:	0029      	movs	r1, r5
    c274:	0038      	movs	r0, r7
    c276:	f7ff fa21 	bl	b6bc <_malloc_r>
    c27a:	1e06      	subs	r6, r0, #0
    c27c:	d109      	bne.n	c292 <__ssputs_r+0x62>
    c27e:	230c      	movs	r3, #12
    c280:	603b      	str	r3, [r7, #0]
    c282:	2340      	movs	r3, #64	; 0x40
    c284:	2001      	movs	r0, #1
    c286:	89a2      	ldrh	r2, [r4, #12]
    c288:	4240      	negs	r0, r0
    c28a:	4313      	orrs	r3, r2
    c28c:	81a3      	strh	r3, [r4, #12]
    c28e:	b005      	add	sp, #20
    c290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c292:	9a02      	ldr	r2, [sp, #8]
    c294:	6921      	ldr	r1, [r4, #16]
    c296:	f7ff f9a3 	bl	b5e0 <memcpy>
    c29a:	89a3      	ldrh	r3, [r4, #12]
    c29c:	4a14      	ldr	r2, [pc, #80]	; (c2f0 <__ssputs_r+0xc0>)
    c29e:	401a      	ands	r2, r3
    c2a0:	2380      	movs	r3, #128	; 0x80
    c2a2:	4313      	orrs	r3, r2
    c2a4:	81a3      	strh	r3, [r4, #12]
    c2a6:	9b02      	ldr	r3, [sp, #8]
    c2a8:	6126      	str	r6, [r4, #16]
    c2aa:	18f6      	adds	r6, r6, r3
    c2ac:	6026      	str	r6, [r4, #0]
    c2ae:	6165      	str	r5, [r4, #20]
    c2b0:	9e01      	ldr	r6, [sp, #4]
    c2b2:	1aed      	subs	r5, r5, r3
    c2b4:	60a5      	str	r5, [r4, #8]
    c2b6:	9b01      	ldr	r3, [sp, #4]
    c2b8:	42b3      	cmp	r3, r6
    c2ba:	d200      	bcs.n	c2be <__ssputs_r+0x8e>
    c2bc:	001e      	movs	r6, r3
    c2be:	0032      	movs	r2, r6
    c2c0:	9903      	ldr	r1, [sp, #12]
    c2c2:	6820      	ldr	r0, [r4, #0]
    c2c4:	f7ff f995 	bl	b5f2 <memmove>
    c2c8:	68a3      	ldr	r3, [r4, #8]
    c2ca:	2000      	movs	r0, #0
    c2cc:	1b9b      	subs	r3, r3, r6
    c2ce:	60a3      	str	r3, [r4, #8]
    c2d0:	6823      	ldr	r3, [r4, #0]
    c2d2:	199e      	adds	r6, r3, r6
    c2d4:	6026      	str	r6, [r4, #0]
    c2d6:	e7da      	b.n	c28e <__ssputs_r+0x5e>
    c2d8:	002a      	movs	r2, r5
    c2da:	0038      	movs	r0, r7
    c2dc:	f000 fcdf 	bl	cc9e <_realloc_r>
    c2e0:	1e06      	subs	r6, r0, #0
    c2e2:	d1e0      	bne.n	c2a6 <__ssputs_r+0x76>
    c2e4:	6921      	ldr	r1, [r4, #16]
    c2e6:	0038      	movs	r0, r7
    c2e8:	f7ff f99e 	bl	b628 <_free_r>
    c2ec:	e7c7      	b.n	c27e <__ssputs_r+0x4e>
    c2ee:	46c0      	nop			; (mov r8, r8)
    c2f0:	fffffb7f 	.word	0xfffffb7f

0000c2f4 <_svfiprintf_r>:
    c2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2f6:	b09f      	sub	sp, #124	; 0x7c
    c2f8:	9002      	str	r0, [sp, #8]
    c2fa:	9305      	str	r3, [sp, #20]
    c2fc:	898b      	ldrh	r3, [r1, #12]
    c2fe:	000f      	movs	r7, r1
    c300:	0016      	movs	r6, r2
    c302:	061b      	lsls	r3, r3, #24
    c304:	d511      	bpl.n	c32a <_svfiprintf_r+0x36>
    c306:	690b      	ldr	r3, [r1, #16]
    c308:	2b00      	cmp	r3, #0
    c30a:	d10e      	bne.n	c32a <_svfiprintf_r+0x36>
    c30c:	2140      	movs	r1, #64	; 0x40
    c30e:	f7ff f9d5 	bl	b6bc <_malloc_r>
    c312:	6038      	str	r0, [r7, #0]
    c314:	6138      	str	r0, [r7, #16]
    c316:	2800      	cmp	r0, #0
    c318:	d105      	bne.n	c326 <_svfiprintf_r+0x32>
    c31a:	230c      	movs	r3, #12
    c31c:	9a02      	ldr	r2, [sp, #8]
    c31e:	3801      	subs	r0, #1
    c320:	6013      	str	r3, [r2, #0]
    c322:	b01f      	add	sp, #124	; 0x7c
    c324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c326:	2340      	movs	r3, #64	; 0x40
    c328:	617b      	str	r3, [r7, #20]
    c32a:	2300      	movs	r3, #0
    c32c:	ad06      	add	r5, sp, #24
    c32e:	616b      	str	r3, [r5, #20]
    c330:	3320      	adds	r3, #32
    c332:	766b      	strb	r3, [r5, #25]
    c334:	3310      	adds	r3, #16
    c336:	76ab      	strb	r3, [r5, #26]
    c338:	0034      	movs	r4, r6
    c33a:	7823      	ldrb	r3, [r4, #0]
    c33c:	2b00      	cmp	r3, #0
    c33e:	d147      	bne.n	c3d0 <_svfiprintf_r+0xdc>
    c340:	1ba3      	subs	r3, r4, r6
    c342:	9304      	str	r3, [sp, #16]
    c344:	d00d      	beq.n	c362 <_svfiprintf_r+0x6e>
    c346:	1ba3      	subs	r3, r4, r6
    c348:	0032      	movs	r2, r6
    c34a:	0039      	movs	r1, r7
    c34c:	9802      	ldr	r0, [sp, #8]
    c34e:	f7ff ff6f 	bl	c230 <__ssputs_r>
    c352:	1c43      	adds	r3, r0, #1
    c354:	d100      	bne.n	c358 <_svfiprintf_r+0x64>
    c356:	e0b5      	b.n	c4c4 <_svfiprintf_r+0x1d0>
    c358:	696a      	ldr	r2, [r5, #20]
    c35a:	9b04      	ldr	r3, [sp, #16]
    c35c:	4694      	mov	ip, r2
    c35e:	4463      	add	r3, ip
    c360:	616b      	str	r3, [r5, #20]
    c362:	7823      	ldrb	r3, [r4, #0]
    c364:	2b00      	cmp	r3, #0
    c366:	d100      	bne.n	c36a <_svfiprintf_r+0x76>
    c368:	e0ac      	b.n	c4c4 <_svfiprintf_r+0x1d0>
    c36a:	2201      	movs	r2, #1
    c36c:	2300      	movs	r3, #0
    c36e:	4252      	negs	r2, r2
    c370:	606a      	str	r2, [r5, #4]
    c372:	a902      	add	r1, sp, #8
    c374:	3254      	adds	r2, #84	; 0x54
    c376:	1852      	adds	r2, r2, r1
    c378:	3401      	adds	r4, #1
    c37a:	602b      	str	r3, [r5, #0]
    c37c:	60eb      	str	r3, [r5, #12]
    c37e:	60ab      	str	r3, [r5, #8]
    c380:	7013      	strb	r3, [r2, #0]
    c382:	65ab      	str	r3, [r5, #88]	; 0x58
    c384:	4e58      	ldr	r6, [pc, #352]	; (c4e8 <_svfiprintf_r+0x1f4>)
    c386:	2205      	movs	r2, #5
    c388:	7821      	ldrb	r1, [r4, #0]
    c38a:	0030      	movs	r0, r6
    c38c:	f000 fc7c 	bl	cc88 <memchr>
    c390:	1c62      	adds	r2, r4, #1
    c392:	2800      	cmp	r0, #0
    c394:	d120      	bne.n	c3d8 <_svfiprintf_r+0xe4>
    c396:	6829      	ldr	r1, [r5, #0]
    c398:	06cb      	lsls	r3, r1, #27
    c39a:	d504      	bpl.n	c3a6 <_svfiprintf_r+0xb2>
    c39c:	2353      	movs	r3, #83	; 0x53
    c39e:	ae02      	add	r6, sp, #8
    c3a0:	3020      	adds	r0, #32
    c3a2:	199b      	adds	r3, r3, r6
    c3a4:	7018      	strb	r0, [r3, #0]
    c3a6:	070b      	lsls	r3, r1, #28
    c3a8:	d504      	bpl.n	c3b4 <_svfiprintf_r+0xc0>
    c3aa:	2353      	movs	r3, #83	; 0x53
    c3ac:	202b      	movs	r0, #43	; 0x2b
    c3ae:	ae02      	add	r6, sp, #8
    c3b0:	199b      	adds	r3, r3, r6
    c3b2:	7018      	strb	r0, [r3, #0]
    c3b4:	7823      	ldrb	r3, [r4, #0]
    c3b6:	2b2a      	cmp	r3, #42	; 0x2a
    c3b8:	d016      	beq.n	c3e8 <_svfiprintf_r+0xf4>
    c3ba:	2000      	movs	r0, #0
    c3bc:	210a      	movs	r1, #10
    c3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3c0:	7822      	ldrb	r2, [r4, #0]
    c3c2:	3a30      	subs	r2, #48	; 0x30
    c3c4:	2a09      	cmp	r2, #9
    c3c6:	d955      	bls.n	c474 <_svfiprintf_r+0x180>
    c3c8:	2800      	cmp	r0, #0
    c3ca:	d015      	beq.n	c3f8 <_svfiprintf_r+0x104>
    c3cc:	9309      	str	r3, [sp, #36]	; 0x24
    c3ce:	e013      	b.n	c3f8 <_svfiprintf_r+0x104>
    c3d0:	2b25      	cmp	r3, #37	; 0x25
    c3d2:	d0b5      	beq.n	c340 <_svfiprintf_r+0x4c>
    c3d4:	3401      	adds	r4, #1
    c3d6:	e7b0      	b.n	c33a <_svfiprintf_r+0x46>
    c3d8:	2301      	movs	r3, #1
    c3da:	1b80      	subs	r0, r0, r6
    c3dc:	4083      	lsls	r3, r0
    c3de:	6829      	ldr	r1, [r5, #0]
    c3e0:	0014      	movs	r4, r2
    c3e2:	430b      	orrs	r3, r1
    c3e4:	602b      	str	r3, [r5, #0]
    c3e6:	e7cd      	b.n	c384 <_svfiprintf_r+0x90>
    c3e8:	9b05      	ldr	r3, [sp, #20]
    c3ea:	1d18      	adds	r0, r3, #4
    c3ec:	681b      	ldr	r3, [r3, #0]
    c3ee:	9005      	str	r0, [sp, #20]
    c3f0:	2b00      	cmp	r3, #0
    c3f2:	db39      	blt.n	c468 <_svfiprintf_r+0x174>
    c3f4:	9309      	str	r3, [sp, #36]	; 0x24
    c3f6:	0014      	movs	r4, r2
    c3f8:	7823      	ldrb	r3, [r4, #0]
    c3fa:	2b2e      	cmp	r3, #46	; 0x2e
    c3fc:	d10b      	bne.n	c416 <_svfiprintf_r+0x122>
    c3fe:	7863      	ldrb	r3, [r4, #1]
    c400:	1c62      	adds	r2, r4, #1
    c402:	2b2a      	cmp	r3, #42	; 0x2a
    c404:	d13e      	bne.n	c484 <_svfiprintf_r+0x190>
    c406:	9b05      	ldr	r3, [sp, #20]
    c408:	3402      	adds	r4, #2
    c40a:	1d1a      	adds	r2, r3, #4
    c40c:	681b      	ldr	r3, [r3, #0]
    c40e:	9205      	str	r2, [sp, #20]
    c410:	2b00      	cmp	r3, #0
    c412:	db34      	blt.n	c47e <_svfiprintf_r+0x18a>
    c414:	9307      	str	r3, [sp, #28]
    c416:	4e35      	ldr	r6, [pc, #212]	; (c4ec <_svfiprintf_r+0x1f8>)
    c418:	7821      	ldrb	r1, [r4, #0]
    c41a:	2203      	movs	r2, #3
    c41c:	0030      	movs	r0, r6
    c41e:	f000 fc33 	bl	cc88 <memchr>
    c422:	2800      	cmp	r0, #0
    c424:	d006      	beq.n	c434 <_svfiprintf_r+0x140>
    c426:	2340      	movs	r3, #64	; 0x40
    c428:	1b80      	subs	r0, r0, r6
    c42a:	4083      	lsls	r3, r0
    c42c:	682a      	ldr	r2, [r5, #0]
    c42e:	3401      	adds	r4, #1
    c430:	4313      	orrs	r3, r2
    c432:	602b      	str	r3, [r5, #0]
    c434:	7821      	ldrb	r1, [r4, #0]
    c436:	2206      	movs	r2, #6
    c438:	482d      	ldr	r0, [pc, #180]	; (c4f0 <_svfiprintf_r+0x1fc>)
    c43a:	1c66      	adds	r6, r4, #1
    c43c:	7629      	strb	r1, [r5, #24]
    c43e:	f000 fc23 	bl	cc88 <memchr>
    c442:	2800      	cmp	r0, #0
    c444:	d046      	beq.n	c4d4 <_svfiprintf_r+0x1e0>
    c446:	4b2b      	ldr	r3, [pc, #172]	; (c4f4 <_svfiprintf_r+0x200>)
    c448:	2b00      	cmp	r3, #0
    c44a:	d12f      	bne.n	c4ac <_svfiprintf_r+0x1b8>
    c44c:	6829      	ldr	r1, [r5, #0]
    c44e:	9b05      	ldr	r3, [sp, #20]
    c450:	2207      	movs	r2, #7
    c452:	05c9      	lsls	r1, r1, #23
    c454:	d528      	bpl.n	c4a8 <_svfiprintf_r+0x1b4>
    c456:	189b      	adds	r3, r3, r2
    c458:	4393      	bics	r3, r2
    c45a:	3308      	adds	r3, #8
    c45c:	9305      	str	r3, [sp, #20]
    c45e:	696b      	ldr	r3, [r5, #20]
    c460:	9a03      	ldr	r2, [sp, #12]
    c462:	189b      	adds	r3, r3, r2
    c464:	616b      	str	r3, [r5, #20]
    c466:	e767      	b.n	c338 <_svfiprintf_r+0x44>
    c468:	425b      	negs	r3, r3
    c46a:	60eb      	str	r3, [r5, #12]
    c46c:	2302      	movs	r3, #2
    c46e:	430b      	orrs	r3, r1
    c470:	602b      	str	r3, [r5, #0]
    c472:	e7c0      	b.n	c3f6 <_svfiprintf_r+0x102>
    c474:	434b      	muls	r3, r1
    c476:	3401      	adds	r4, #1
    c478:	189b      	adds	r3, r3, r2
    c47a:	2001      	movs	r0, #1
    c47c:	e7a0      	b.n	c3c0 <_svfiprintf_r+0xcc>
    c47e:	2301      	movs	r3, #1
    c480:	425b      	negs	r3, r3
    c482:	e7c7      	b.n	c414 <_svfiprintf_r+0x120>
    c484:	2300      	movs	r3, #0
    c486:	0014      	movs	r4, r2
    c488:	200a      	movs	r0, #10
    c48a:	001a      	movs	r2, r3
    c48c:	606b      	str	r3, [r5, #4]
    c48e:	7821      	ldrb	r1, [r4, #0]
    c490:	3930      	subs	r1, #48	; 0x30
    c492:	2909      	cmp	r1, #9
    c494:	d903      	bls.n	c49e <_svfiprintf_r+0x1aa>
    c496:	2b00      	cmp	r3, #0
    c498:	d0bd      	beq.n	c416 <_svfiprintf_r+0x122>
    c49a:	9207      	str	r2, [sp, #28]
    c49c:	e7bb      	b.n	c416 <_svfiprintf_r+0x122>
    c49e:	4342      	muls	r2, r0
    c4a0:	3401      	adds	r4, #1
    c4a2:	1852      	adds	r2, r2, r1
    c4a4:	2301      	movs	r3, #1
    c4a6:	e7f2      	b.n	c48e <_svfiprintf_r+0x19a>
    c4a8:	3307      	adds	r3, #7
    c4aa:	e7d5      	b.n	c458 <_svfiprintf_r+0x164>
    c4ac:	ab05      	add	r3, sp, #20
    c4ae:	9300      	str	r3, [sp, #0]
    c4b0:	003a      	movs	r2, r7
    c4b2:	4b11      	ldr	r3, [pc, #68]	; (c4f8 <_svfiprintf_r+0x204>)
    c4b4:	0029      	movs	r1, r5
    c4b6:	9802      	ldr	r0, [sp, #8]
    c4b8:	e000      	b.n	c4bc <_svfiprintf_r+0x1c8>
    c4ba:	bf00      	nop
    c4bc:	9003      	str	r0, [sp, #12]
    c4be:	9b03      	ldr	r3, [sp, #12]
    c4c0:	3301      	adds	r3, #1
    c4c2:	d1cc      	bne.n	c45e <_svfiprintf_r+0x16a>
    c4c4:	89bb      	ldrh	r3, [r7, #12]
    c4c6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c4c8:	065b      	lsls	r3, r3, #25
    c4ca:	d400      	bmi.n	c4ce <_svfiprintf_r+0x1da>
    c4cc:	e729      	b.n	c322 <_svfiprintf_r+0x2e>
    c4ce:	2001      	movs	r0, #1
    c4d0:	4240      	negs	r0, r0
    c4d2:	e726      	b.n	c322 <_svfiprintf_r+0x2e>
    c4d4:	ab05      	add	r3, sp, #20
    c4d6:	9300      	str	r3, [sp, #0]
    c4d8:	003a      	movs	r2, r7
    c4da:	4b07      	ldr	r3, [pc, #28]	; (c4f8 <_svfiprintf_r+0x204>)
    c4dc:	0029      	movs	r1, r5
    c4de:	9802      	ldr	r0, [sp, #8]
    c4e0:	f000 f9be 	bl	c860 <_printf_i>
    c4e4:	e7ea      	b.n	c4bc <_svfiprintf_r+0x1c8>
    c4e6:	46c0      	nop			; (mov r8, r8)
    c4e8:	0000f216 	.word	0x0000f216
    c4ec:	0000f21c 	.word	0x0000f21c
    c4f0:	0000f220 	.word	0x0000f220
    c4f4:	00000000 	.word	0x00000000
    c4f8:	0000c231 	.word	0x0000c231

0000c4fc <__sfputc_r>:
    c4fc:	6893      	ldr	r3, [r2, #8]
    c4fe:	b510      	push	{r4, lr}
    c500:	3b01      	subs	r3, #1
    c502:	6093      	str	r3, [r2, #8]
    c504:	2b00      	cmp	r3, #0
    c506:	da05      	bge.n	c514 <__sfputc_r+0x18>
    c508:	6994      	ldr	r4, [r2, #24]
    c50a:	42a3      	cmp	r3, r4
    c50c:	db08      	blt.n	c520 <__sfputc_r+0x24>
    c50e:	b2cb      	uxtb	r3, r1
    c510:	2b0a      	cmp	r3, #10
    c512:	d005      	beq.n	c520 <__sfputc_r+0x24>
    c514:	6813      	ldr	r3, [r2, #0]
    c516:	1c58      	adds	r0, r3, #1
    c518:	6010      	str	r0, [r2, #0]
    c51a:	7019      	strb	r1, [r3, #0]
    c51c:	b2c8      	uxtb	r0, r1
    c51e:	bd10      	pop	{r4, pc}
    c520:	f7ff fbaa 	bl	bc78 <__swbuf_r>
    c524:	e7fb      	b.n	c51e <__sfputc_r+0x22>

0000c526 <__sfputs_r>:
    c526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c528:	0006      	movs	r6, r0
    c52a:	000f      	movs	r7, r1
    c52c:	0014      	movs	r4, r2
    c52e:	18d5      	adds	r5, r2, r3
    c530:	42ac      	cmp	r4, r5
    c532:	d101      	bne.n	c538 <__sfputs_r+0x12>
    c534:	2000      	movs	r0, #0
    c536:	e007      	b.n	c548 <__sfputs_r+0x22>
    c538:	7821      	ldrb	r1, [r4, #0]
    c53a:	003a      	movs	r2, r7
    c53c:	0030      	movs	r0, r6
    c53e:	f7ff ffdd 	bl	c4fc <__sfputc_r>
    c542:	3401      	adds	r4, #1
    c544:	1c43      	adds	r3, r0, #1
    c546:	d1f3      	bne.n	c530 <__sfputs_r+0xa>
    c548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000c54c <_vfiprintf_r>:
    c54c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c54e:	b09f      	sub	sp, #124	; 0x7c
    c550:	0006      	movs	r6, r0
    c552:	000f      	movs	r7, r1
    c554:	0014      	movs	r4, r2
    c556:	9305      	str	r3, [sp, #20]
    c558:	2800      	cmp	r0, #0
    c55a:	d004      	beq.n	c566 <_vfiprintf_r+0x1a>
    c55c:	6983      	ldr	r3, [r0, #24]
    c55e:	2b00      	cmp	r3, #0
    c560:	d101      	bne.n	c566 <_vfiprintf_r+0x1a>
    c562:	f7ff fd4d 	bl	c000 <__sinit>
    c566:	4b7f      	ldr	r3, [pc, #508]	; (c764 <_vfiprintf_r+0x218>)
    c568:	429f      	cmp	r7, r3
    c56a:	d15c      	bne.n	c626 <_vfiprintf_r+0xda>
    c56c:	6877      	ldr	r7, [r6, #4]
    c56e:	89bb      	ldrh	r3, [r7, #12]
    c570:	071b      	lsls	r3, r3, #28
    c572:	d562      	bpl.n	c63a <_vfiprintf_r+0xee>
    c574:	693b      	ldr	r3, [r7, #16]
    c576:	2b00      	cmp	r3, #0
    c578:	d05f      	beq.n	c63a <_vfiprintf_r+0xee>
    c57a:	2300      	movs	r3, #0
    c57c:	ad06      	add	r5, sp, #24
    c57e:	616b      	str	r3, [r5, #20]
    c580:	3320      	adds	r3, #32
    c582:	766b      	strb	r3, [r5, #25]
    c584:	3310      	adds	r3, #16
    c586:	76ab      	strb	r3, [r5, #26]
    c588:	9402      	str	r4, [sp, #8]
    c58a:	9c02      	ldr	r4, [sp, #8]
    c58c:	7823      	ldrb	r3, [r4, #0]
    c58e:	2b00      	cmp	r3, #0
    c590:	d15d      	bne.n	c64e <_vfiprintf_r+0x102>
    c592:	9b02      	ldr	r3, [sp, #8]
    c594:	1ae3      	subs	r3, r4, r3
    c596:	9304      	str	r3, [sp, #16]
    c598:	d00d      	beq.n	c5b6 <_vfiprintf_r+0x6a>
    c59a:	9b04      	ldr	r3, [sp, #16]
    c59c:	9a02      	ldr	r2, [sp, #8]
    c59e:	0039      	movs	r1, r7
    c5a0:	0030      	movs	r0, r6
    c5a2:	f7ff ffc0 	bl	c526 <__sfputs_r>
    c5a6:	1c43      	adds	r3, r0, #1
    c5a8:	d100      	bne.n	c5ac <_vfiprintf_r+0x60>
    c5aa:	e0cc      	b.n	c746 <_vfiprintf_r+0x1fa>
    c5ac:	696a      	ldr	r2, [r5, #20]
    c5ae:	9b04      	ldr	r3, [sp, #16]
    c5b0:	4694      	mov	ip, r2
    c5b2:	4463      	add	r3, ip
    c5b4:	616b      	str	r3, [r5, #20]
    c5b6:	7823      	ldrb	r3, [r4, #0]
    c5b8:	2b00      	cmp	r3, #0
    c5ba:	d100      	bne.n	c5be <_vfiprintf_r+0x72>
    c5bc:	e0c3      	b.n	c746 <_vfiprintf_r+0x1fa>
    c5be:	2201      	movs	r2, #1
    c5c0:	2300      	movs	r3, #0
    c5c2:	4252      	negs	r2, r2
    c5c4:	606a      	str	r2, [r5, #4]
    c5c6:	a902      	add	r1, sp, #8
    c5c8:	3254      	adds	r2, #84	; 0x54
    c5ca:	1852      	adds	r2, r2, r1
    c5cc:	3401      	adds	r4, #1
    c5ce:	602b      	str	r3, [r5, #0]
    c5d0:	60eb      	str	r3, [r5, #12]
    c5d2:	60ab      	str	r3, [r5, #8]
    c5d4:	7013      	strb	r3, [r2, #0]
    c5d6:	65ab      	str	r3, [r5, #88]	; 0x58
    c5d8:	7821      	ldrb	r1, [r4, #0]
    c5da:	2205      	movs	r2, #5
    c5dc:	4862      	ldr	r0, [pc, #392]	; (c768 <_vfiprintf_r+0x21c>)
    c5de:	f000 fb53 	bl	cc88 <memchr>
    c5e2:	1c63      	adds	r3, r4, #1
    c5e4:	469c      	mov	ip, r3
    c5e6:	2800      	cmp	r0, #0
    c5e8:	d135      	bne.n	c656 <_vfiprintf_r+0x10a>
    c5ea:	6829      	ldr	r1, [r5, #0]
    c5ec:	06cb      	lsls	r3, r1, #27
    c5ee:	d504      	bpl.n	c5fa <_vfiprintf_r+0xae>
    c5f0:	2353      	movs	r3, #83	; 0x53
    c5f2:	aa02      	add	r2, sp, #8
    c5f4:	3020      	adds	r0, #32
    c5f6:	189b      	adds	r3, r3, r2
    c5f8:	7018      	strb	r0, [r3, #0]
    c5fa:	070b      	lsls	r3, r1, #28
    c5fc:	d504      	bpl.n	c608 <_vfiprintf_r+0xbc>
    c5fe:	2353      	movs	r3, #83	; 0x53
    c600:	202b      	movs	r0, #43	; 0x2b
    c602:	aa02      	add	r2, sp, #8
    c604:	189b      	adds	r3, r3, r2
    c606:	7018      	strb	r0, [r3, #0]
    c608:	7823      	ldrb	r3, [r4, #0]
    c60a:	2b2a      	cmp	r3, #42	; 0x2a
    c60c:	d02c      	beq.n	c668 <_vfiprintf_r+0x11c>
    c60e:	2000      	movs	r0, #0
    c610:	210a      	movs	r1, #10
    c612:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c614:	7822      	ldrb	r2, [r4, #0]
    c616:	3a30      	subs	r2, #48	; 0x30
    c618:	2a09      	cmp	r2, #9
    c61a:	d800      	bhi.n	c61e <_vfiprintf_r+0xd2>
    c61c:	e06b      	b.n	c6f6 <_vfiprintf_r+0x1aa>
    c61e:	2800      	cmp	r0, #0
    c620:	d02a      	beq.n	c678 <_vfiprintf_r+0x12c>
    c622:	9309      	str	r3, [sp, #36]	; 0x24
    c624:	e028      	b.n	c678 <_vfiprintf_r+0x12c>
    c626:	4b51      	ldr	r3, [pc, #324]	; (c76c <_vfiprintf_r+0x220>)
    c628:	429f      	cmp	r7, r3
    c62a:	d101      	bne.n	c630 <_vfiprintf_r+0xe4>
    c62c:	68b7      	ldr	r7, [r6, #8]
    c62e:	e79e      	b.n	c56e <_vfiprintf_r+0x22>
    c630:	4b4f      	ldr	r3, [pc, #316]	; (c770 <_vfiprintf_r+0x224>)
    c632:	429f      	cmp	r7, r3
    c634:	d19b      	bne.n	c56e <_vfiprintf_r+0x22>
    c636:	68f7      	ldr	r7, [r6, #12]
    c638:	e799      	b.n	c56e <_vfiprintf_r+0x22>
    c63a:	0039      	movs	r1, r7
    c63c:	0030      	movs	r0, r6
    c63e:	f7ff fb71 	bl	bd24 <__swsetup_r>
    c642:	2800      	cmp	r0, #0
    c644:	d099      	beq.n	c57a <_vfiprintf_r+0x2e>
    c646:	2001      	movs	r0, #1
    c648:	4240      	negs	r0, r0
    c64a:	b01f      	add	sp, #124	; 0x7c
    c64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c64e:	2b25      	cmp	r3, #37	; 0x25
    c650:	d09f      	beq.n	c592 <_vfiprintf_r+0x46>
    c652:	3401      	adds	r4, #1
    c654:	e79a      	b.n	c58c <_vfiprintf_r+0x40>
    c656:	4b44      	ldr	r3, [pc, #272]	; (c768 <_vfiprintf_r+0x21c>)
    c658:	6829      	ldr	r1, [r5, #0]
    c65a:	1ac0      	subs	r0, r0, r3
    c65c:	2301      	movs	r3, #1
    c65e:	4083      	lsls	r3, r0
    c660:	430b      	orrs	r3, r1
    c662:	602b      	str	r3, [r5, #0]
    c664:	4664      	mov	r4, ip
    c666:	e7b7      	b.n	c5d8 <_vfiprintf_r+0x8c>
    c668:	9b05      	ldr	r3, [sp, #20]
    c66a:	1d18      	adds	r0, r3, #4
    c66c:	681b      	ldr	r3, [r3, #0]
    c66e:	9005      	str	r0, [sp, #20]
    c670:	2b00      	cmp	r3, #0
    c672:	db3a      	blt.n	c6ea <_vfiprintf_r+0x19e>
    c674:	9309      	str	r3, [sp, #36]	; 0x24
    c676:	4664      	mov	r4, ip
    c678:	7823      	ldrb	r3, [r4, #0]
    c67a:	2b2e      	cmp	r3, #46	; 0x2e
    c67c:	d10b      	bne.n	c696 <_vfiprintf_r+0x14a>
    c67e:	7863      	ldrb	r3, [r4, #1]
    c680:	1c62      	adds	r2, r4, #1
    c682:	2b2a      	cmp	r3, #42	; 0x2a
    c684:	d13f      	bne.n	c706 <_vfiprintf_r+0x1ba>
    c686:	9b05      	ldr	r3, [sp, #20]
    c688:	3402      	adds	r4, #2
    c68a:	1d1a      	adds	r2, r3, #4
    c68c:	681b      	ldr	r3, [r3, #0]
    c68e:	9205      	str	r2, [sp, #20]
    c690:	2b00      	cmp	r3, #0
    c692:	db35      	blt.n	c700 <_vfiprintf_r+0x1b4>
    c694:	9307      	str	r3, [sp, #28]
    c696:	7821      	ldrb	r1, [r4, #0]
    c698:	2203      	movs	r2, #3
    c69a:	4836      	ldr	r0, [pc, #216]	; (c774 <_vfiprintf_r+0x228>)
    c69c:	f000 faf4 	bl	cc88 <memchr>
    c6a0:	2800      	cmp	r0, #0
    c6a2:	d007      	beq.n	c6b4 <_vfiprintf_r+0x168>
    c6a4:	4b33      	ldr	r3, [pc, #204]	; (c774 <_vfiprintf_r+0x228>)
    c6a6:	682a      	ldr	r2, [r5, #0]
    c6a8:	1ac0      	subs	r0, r0, r3
    c6aa:	2340      	movs	r3, #64	; 0x40
    c6ac:	4083      	lsls	r3, r0
    c6ae:	4313      	orrs	r3, r2
    c6b0:	602b      	str	r3, [r5, #0]
    c6b2:	3401      	adds	r4, #1
    c6b4:	7821      	ldrb	r1, [r4, #0]
    c6b6:	1c63      	adds	r3, r4, #1
    c6b8:	2206      	movs	r2, #6
    c6ba:	482f      	ldr	r0, [pc, #188]	; (c778 <_vfiprintf_r+0x22c>)
    c6bc:	9302      	str	r3, [sp, #8]
    c6be:	7629      	strb	r1, [r5, #24]
    c6c0:	f000 fae2 	bl	cc88 <memchr>
    c6c4:	2800      	cmp	r0, #0
    c6c6:	d044      	beq.n	c752 <_vfiprintf_r+0x206>
    c6c8:	4b2c      	ldr	r3, [pc, #176]	; (c77c <_vfiprintf_r+0x230>)
    c6ca:	2b00      	cmp	r3, #0
    c6cc:	d12f      	bne.n	c72e <_vfiprintf_r+0x1e2>
    c6ce:	6829      	ldr	r1, [r5, #0]
    c6d0:	9b05      	ldr	r3, [sp, #20]
    c6d2:	2207      	movs	r2, #7
    c6d4:	05c9      	lsls	r1, r1, #23
    c6d6:	d528      	bpl.n	c72a <_vfiprintf_r+0x1de>
    c6d8:	189b      	adds	r3, r3, r2
    c6da:	4393      	bics	r3, r2
    c6dc:	3308      	adds	r3, #8
    c6de:	9305      	str	r3, [sp, #20]
    c6e0:	696b      	ldr	r3, [r5, #20]
    c6e2:	9a03      	ldr	r2, [sp, #12]
    c6e4:	189b      	adds	r3, r3, r2
    c6e6:	616b      	str	r3, [r5, #20]
    c6e8:	e74f      	b.n	c58a <_vfiprintf_r+0x3e>
    c6ea:	425b      	negs	r3, r3
    c6ec:	60eb      	str	r3, [r5, #12]
    c6ee:	2302      	movs	r3, #2
    c6f0:	430b      	orrs	r3, r1
    c6f2:	602b      	str	r3, [r5, #0]
    c6f4:	e7bf      	b.n	c676 <_vfiprintf_r+0x12a>
    c6f6:	434b      	muls	r3, r1
    c6f8:	3401      	adds	r4, #1
    c6fa:	189b      	adds	r3, r3, r2
    c6fc:	2001      	movs	r0, #1
    c6fe:	e789      	b.n	c614 <_vfiprintf_r+0xc8>
    c700:	2301      	movs	r3, #1
    c702:	425b      	negs	r3, r3
    c704:	e7c6      	b.n	c694 <_vfiprintf_r+0x148>
    c706:	2300      	movs	r3, #0
    c708:	0014      	movs	r4, r2
    c70a:	200a      	movs	r0, #10
    c70c:	001a      	movs	r2, r3
    c70e:	606b      	str	r3, [r5, #4]
    c710:	7821      	ldrb	r1, [r4, #0]
    c712:	3930      	subs	r1, #48	; 0x30
    c714:	2909      	cmp	r1, #9
    c716:	d903      	bls.n	c720 <_vfiprintf_r+0x1d4>
    c718:	2b00      	cmp	r3, #0
    c71a:	d0bc      	beq.n	c696 <_vfiprintf_r+0x14a>
    c71c:	9207      	str	r2, [sp, #28]
    c71e:	e7ba      	b.n	c696 <_vfiprintf_r+0x14a>
    c720:	4342      	muls	r2, r0
    c722:	3401      	adds	r4, #1
    c724:	1852      	adds	r2, r2, r1
    c726:	2301      	movs	r3, #1
    c728:	e7f2      	b.n	c710 <_vfiprintf_r+0x1c4>
    c72a:	3307      	adds	r3, #7
    c72c:	e7d5      	b.n	c6da <_vfiprintf_r+0x18e>
    c72e:	ab05      	add	r3, sp, #20
    c730:	9300      	str	r3, [sp, #0]
    c732:	003a      	movs	r2, r7
    c734:	4b12      	ldr	r3, [pc, #72]	; (c780 <_vfiprintf_r+0x234>)
    c736:	0029      	movs	r1, r5
    c738:	0030      	movs	r0, r6
    c73a:	e000      	b.n	c73e <_vfiprintf_r+0x1f2>
    c73c:	bf00      	nop
    c73e:	9003      	str	r0, [sp, #12]
    c740:	9b03      	ldr	r3, [sp, #12]
    c742:	3301      	adds	r3, #1
    c744:	d1cc      	bne.n	c6e0 <_vfiprintf_r+0x194>
    c746:	89bb      	ldrh	r3, [r7, #12]
    c748:	065b      	lsls	r3, r3, #25
    c74a:	d500      	bpl.n	c74e <_vfiprintf_r+0x202>
    c74c:	e77b      	b.n	c646 <_vfiprintf_r+0xfa>
    c74e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c750:	e77b      	b.n	c64a <_vfiprintf_r+0xfe>
    c752:	ab05      	add	r3, sp, #20
    c754:	9300      	str	r3, [sp, #0]
    c756:	003a      	movs	r2, r7
    c758:	4b09      	ldr	r3, [pc, #36]	; (c780 <_vfiprintf_r+0x234>)
    c75a:	0029      	movs	r1, r5
    c75c:	0030      	movs	r0, r6
    c75e:	f000 f87f 	bl	c860 <_printf_i>
    c762:	e7ec      	b.n	c73e <_vfiprintf_r+0x1f2>
    c764:	0000f1cc 	.word	0x0000f1cc
    c768:	0000f216 	.word	0x0000f216
    c76c:	0000f1ec 	.word	0x0000f1ec
    c770:	0000f1ac 	.word	0x0000f1ac
    c774:	0000f21c 	.word	0x0000f21c
    c778:	0000f220 	.word	0x0000f220
    c77c:	00000000 	.word	0x00000000
    c780:	0000c527 	.word	0x0000c527

0000c784 <_printf_common>:
    c784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c786:	0015      	movs	r5, r2
    c788:	9301      	str	r3, [sp, #4]
    c78a:	688a      	ldr	r2, [r1, #8]
    c78c:	690b      	ldr	r3, [r1, #16]
    c78e:	9000      	str	r0, [sp, #0]
    c790:	000c      	movs	r4, r1
    c792:	4293      	cmp	r3, r2
    c794:	da00      	bge.n	c798 <_printf_common+0x14>
    c796:	0013      	movs	r3, r2
    c798:	0022      	movs	r2, r4
    c79a:	602b      	str	r3, [r5, #0]
    c79c:	3243      	adds	r2, #67	; 0x43
    c79e:	7812      	ldrb	r2, [r2, #0]
    c7a0:	2a00      	cmp	r2, #0
    c7a2:	d001      	beq.n	c7a8 <_printf_common+0x24>
    c7a4:	3301      	adds	r3, #1
    c7a6:	602b      	str	r3, [r5, #0]
    c7a8:	6823      	ldr	r3, [r4, #0]
    c7aa:	069b      	lsls	r3, r3, #26
    c7ac:	d502      	bpl.n	c7b4 <_printf_common+0x30>
    c7ae:	682b      	ldr	r3, [r5, #0]
    c7b0:	3302      	adds	r3, #2
    c7b2:	602b      	str	r3, [r5, #0]
    c7b4:	2706      	movs	r7, #6
    c7b6:	6823      	ldr	r3, [r4, #0]
    c7b8:	401f      	ands	r7, r3
    c7ba:	d027      	beq.n	c80c <_printf_common+0x88>
    c7bc:	0023      	movs	r3, r4
    c7be:	3343      	adds	r3, #67	; 0x43
    c7c0:	781b      	ldrb	r3, [r3, #0]
    c7c2:	1e5a      	subs	r2, r3, #1
    c7c4:	4193      	sbcs	r3, r2
    c7c6:	6822      	ldr	r2, [r4, #0]
    c7c8:	0692      	lsls	r2, r2, #26
    c7ca:	d430      	bmi.n	c82e <_printf_common+0xaa>
    c7cc:	0022      	movs	r2, r4
    c7ce:	9901      	ldr	r1, [sp, #4]
    c7d0:	3243      	adds	r2, #67	; 0x43
    c7d2:	9800      	ldr	r0, [sp, #0]
    c7d4:	9e08      	ldr	r6, [sp, #32]
    c7d6:	47b0      	blx	r6
    c7d8:	1c43      	adds	r3, r0, #1
    c7da:	d025      	beq.n	c828 <_printf_common+0xa4>
    c7dc:	2306      	movs	r3, #6
    c7de:	6820      	ldr	r0, [r4, #0]
    c7e0:	682a      	ldr	r2, [r5, #0]
    c7e2:	68e1      	ldr	r1, [r4, #12]
    c7e4:	4003      	ands	r3, r0
    c7e6:	2500      	movs	r5, #0
    c7e8:	2b04      	cmp	r3, #4
    c7ea:	d103      	bne.n	c7f4 <_printf_common+0x70>
    c7ec:	1a8d      	subs	r5, r1, r2
    c7ee:	43eb      	mvns	r3, r5
    c7f0:	17db      	asrs	r3, r3, #31
    c7f2:	401d      	ands	r5, r3
    c7f4:	68a3      	ldr	r3, [r4, #8]
    c7f6:	6922      	ldr	r2, [r4, #16]
    c7f8:	4293      	cmp	r3, r2
    c7fa:	dd01      	ble.n	c800 <_printf_common+0x7c>
    c7fc:	1a9b      	subs	r3, r3, r2
    c7fe:	18ed      	adds	r5, r5, r3
    c800:	2700      	movs	r7, #0
    c802:	42bd      	cmp	r5, r7
    c804:	d120      	bne.n	c848 <_printf_common+0xc4>
    c806:	2000      	movs	r0, #0
    c808:	e010      	b.n	c82c <_printf_common+0xa8>
    c80a:	3701      	adds	r7, #1
    c80c:	68e3      	ldr	r3, [r4, #12]
    c80e:	682a      	ldr	r2, [r5, #0]
    c810:	1a9b      	subs	r3, r3, r2
    c812:	429f      	cmp	r7, r3
    c814:	dad2      	bge.n	c7bc <_printf_common+0x38>
    c816:	0022      	movs	r2, r4
    c818:	2301      	movs	r3, #1
    c81a:	3219      	adds	r2, #25
    c81c:	9901      	ldr	r1, [sp, #4]
    c81e:	9800      	ldr	r0, [sp, #0]
    c820:	9e08      	ldr	r6, [sp, #32]
    c822:	47b0      	blx	r6
    c824:	1c43      	adds	r3, r0, #1
    c826:	d1f0      	bne.n	c80a <_printf_common+0x86>
    c828:	2001      	movs	r0, #1
    c82a:	4240      	negs	r0, r0
    c82c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c82e:	2030      	movs	r0, #48	; 0x30
    c830:	18e1      	adds	r1, r4, r3
    c832:	3143      	adds	r1, #67	; 0x43
    c834:	7008      	strb	r0, [r1, #0]
    c836:	0021      	movs	r1, r4
    c838:	1c5a      	adds	r2, r3, #1
    c83a:	3145      	adds	r1, #69	; 0x45
    c83c:	7809      	ldrb	r1, [r1, #0]
    c83e:	18a2      	adds	r2, r4, r2
    c840:	3243      	adds	r2, #67	; 0x43
    c842:	3302      	adds	r3, #2
    c844:	7011      	strb	r1, [r2, #0]
    c846:	e7c1      	b.n	c7cc <_printf_common+0x48>
    c848:	0022      	movs	r2, r4
    c84a:	2301      	movs	r3, #1
    c84c:	321a      	adds	r2, #26
    c84e:	9901      	ldr	r1, [sp, #4]
    c850:	9800      	ldr	r0, [sp, #0]
    c852:	9e08      	ldr	r6, [sp, #32]
    c854:	47b0      	blx	r6
    c856:	1c43      	adds	r3, r0, #1
    c858:	d0e6      	beq.n	c828 <_printf_common+0xa4>
    c85a:	3701      	adds	r7, #1
    c85c:	e7d1      	b.n	c802 <_printf_common+0x7e>
	...

0000c860 <_printf_i>:
    c860:	b5f0      	push	{r4, r5, r6, r7, lr}
    c862:	b08b      	sub	sp, #44	; 0x2c
    c864:	9206      	str	r2, [sp, #24]
    c866:	000a      	movs	r2, r1
    c868:	3243      	adds	r2, #67	; 0x43
    c86a:	9307      	str	r3, [sp, #28]
    c86c:	9005      	str	r0, [sp, #20]
    c86e:	9204      	str	r2, [sp, #16]
    c870:	7e0a      	ldrb	r2, [r1, #24]
    c872:	000c      	movs	r4, r1
    c874:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c876:	2a6e      	cmp	r2, #110	; 0x6e
    c878:	d100      	bne.n	c87c <_printf_i+0x1c>
    c87a:	e08f      	b.n	c99c <_printf_i+0x13c>
    c87c:	d817      	bhi.n	c8ae <_printf_i+0x4e>
    c87e:	2a63      	cmp	r2, #99	; 0x63
    c880:	d02c      	beq.n	c8dc <_printf_i+0x7c>
    c882:	d808      	bhi.n	c896 <_printf_i+0x36>
    c884:	2a00      	cmp	r2, #0
    c886:	d100      	bne.n	c88a <_printf_i+0x2a>
    c888:	e099      	b.n	c9be <_printf_i+0x15e>
    c88a:	2a58      	cmp	r2, #88	; 0x58
    c88c:	d054      	beq.n	c938 <_printf_i+0xd8>
    c88e:	0026      	movs	r6, r4
    c890:	3642      	adds	r6, #66	; 0x42
    c892:	7032      	strb	r2, [r6, #0]
    c894:	e029      	b.n	c8ea <_printf_i+0x8a>
    c896:	2a64      	cmp	r2, #100	; 0x64
    c898:	d001      	beq.n	c89e <_printf_i+0x3e>
    c89a:	2a69      	cmp	r2, #105	; 0x69
    c89c:	d1f7      	bne.n	c88e <_printf_i+0x2e>
    c89e:	6821      	ldr	r1, [r4, #0]
    c8a0:	681a      	ldr	r2, [r3, #0]
    c8a2:	0608      	lsls	r0, r1, #24
    c8a4:	d523      	bpl.n	c8ee <_printf_i+0x8e>
    c8a6:	1d11      	adds	r1, r2, #4
    c8a8:	6019      	str	r1, [r3, #0]
    c8aa:	6815      	ldr	r5, [r2, #0]
    c8ac:	e025      	b.n	c8fa <_printf_i+0x9a>
    c8ae:	2a73      	cmp	r2, #115	; 0x73
    c8b0:	d100      	bne.n	c8b4 <_printf_i+0x54>
    c8b2:	e088      	b.n	c9c6 <_printf_i+0x166>
    c8b4:	d808      	bhi.n	c8c8 <_printf_i+0x68>
    c8b6:	2a6f      	cmp	r2, #111	; 0x6f
    c8b8:	d029      	beq.n	c90e <_printf_i+0xae>
    c8ba:	2a70      	cmp	r2, #112	; 0x70
    c8bc:	d1e7      	bne.n	c88e <_printf_i+0x2e>
    c8be:	2220      	movs	r2, #32
    c8c0:	6809      	ldr	r1, [r1, #0]
    c8c2:	430a      	orrs	r2, r1
    c8c4:	6022      	str	r2, [r4, #0]
    c8c6:	e003      	b.n	c8d0 <_printf_i+0x70>
    c8c8:	2a75      	cmp	r2, #117	; 0x75
    c8ca:	d020      	beq.n	c90e <_printf_i+0xae>
    c8cc:	2a78      	cmp	r2, #120	; 0x78
    c8ce:	d1de      	bne.n	c88e <_printf_i+0x2e>
    c8d0:	0022      	movs	r2, r4
    c8d2:	2178      	movs	r1, #120	; 0x78
    c8d4:	3245      	adds	r2, #69	; 0x45
    c8d6:	7011      	strb	r1, [r2, #0]
    c8d8:	4a6c      	ldr	r2, [pc, #432]	; (ca8c <_printf_i+0x22c>)
    c8da:	e030      	b.n	c93e <_printf_i+0xde>
    c8dc:	000e      	movs	r6, r1
    c8de:	681a      	ldr	r2, [r3, #0]
    c8e0:	3642      	adds	r6, #66	; 0x42
    c8e2:	1d11      	adds	r1, r2, #4
    c8e4:	6019      	str	r1, [r3, #0]
    c8e6:	6813      	ldr	r3, [r2, #0]
    c8e8:	7033      	strb	r3, [r6, #0]
    c8ea:	2301      	movs	r3, #1
    c8ec:	e079      	b.n	c9e2 <_printf_i+0x182>
    c8ee:	0649      	lsls	r1, r1, #25
    c8f0:	d5d9      	bpl.n	c8a6 <_printf_i+0x46>
    c8f2:	1d11      	adds	r1, r2, #4
    c8f4:	6019      	str	r1, [r3, #0]
    c8f6:	2300      	movs	r3, #0
    c8f8:	5ed5      	ldrsh	r5, [r2, r3]
    c8fa:	2d00      	cmp	r5, #0
    c8fc:	da03      	bge.n	c906 <_printf_i+0xa6>
    c8fe:	232d      	movs	r3, #45	; 0x2d
    c900:	9a04      	ldr	r2, [sp, #16]
    c902:	426d      	negs	r5, r5
    c904:	7013      	strb	r3, [r2, #0]
    c906:	4b62      	ldr	r3, [pc, #392]	; (ca90 <_printf_i+0x230>)
    c908:	270a      	movs	r7, #10
    c90a:	9303      	str	r3, [sp, #12]
    c90c:	e02f      	b.n	c96e <_printf_i+0x10e>
    c90e:	6820      	ldr	r0, [r4, #0]
    c910:	6819      	ldr	r1, [r3, #0]
    c912:	0605      	lsls	r5, r0, #24
    c914:	d503      	bpl.n	c91e <_printf_i+0xbe>
    c916:	1d08      	adds	r0, r1, #4
    c918:	6018      	str	r0, [r3, #0]
    c91a:	680d      	ldr	r5, [r1, #0]
    c91c:	e005      	b.n	c92a <_printf_i+0xca>
    c91e:	0640      	lsls	r0, r0, #25
    c920:	d5f9      	bpl.n	c916 <_printf_i+0xb6>
    c922:	680d      	ldr	r5, [r1, #0]
    c924:	1d08      	adds	r0, r1, #4
    c926:	6018      	str	r0, [r3, #0]
    c928:	b2ad      	uxth	r5, r5
    c92a:	4b59      	ldr	r3, [pc, #356]	; (ca90 <_printf_i+0x230>)
    c92c:	2708      	movs	r7, #8
    c92e:	9303      	str	r3, [sp, #12]
    c930:	2a6f      	cmp	r2, #111	; 0x6f
    c932:	d018      	beq.n	c966 <_printf_i+0x106>
    c934:	270a      	movs	r7, #10
    c936:	e016      	b.n	c966 <_printf_i+0x106>
    c938:	3145      	adds	r1, #69	; 0x45
    c93a:	700a      	strb	r2, [r1, #0]
    c93c:	4a54      	ldr	r2, [pc, #336]	; (ca90 <_printf_i+0x230>)
    c93e:	9203      	str	r2, [sp, #12]
    c940:	681a      	ldr	r2, [r3, #0]
    c942:	6821      	ldr	r1, [r4, #0]
    c944:	1d10      	adds	r0, r2, #4
    c946:	6018      	str	r0, [r3, #0]
    c948:	6815      	ldr	r5, [r2, #0]
    c94a:	0608      	lsls	r0, r1, #24
    c94c:	d522      	bpl.n	c994 <_printf_i+0x134>
    c94e:	07cb      	lsls	r3, r1, #31
    c950:	d502      	bpl.n	c958 <_printf_i+0xf8>
    c952:	2320      	movs	r3, #32
    c954:	4319      	orrs	r1, r3
    c956:	6021      	str	r1, [r4, #0]
    c958:	2710      	movs	r7, #16
    c95a:	2d00      	cmp	r5, #0
    c95c:	d103      	bne.n	c966 <_printf_i+0x106>
    c95e:	2320      	movs	r3, #32
    c960:	6822      	ldr	r2, [r4, #0]
    c962:	439a      	bics	r2, r3
    c964:	6022      	str	r2, [r4, #0]
    c966:	0023      	movs	r3, r4
    c968:	2200      	movs	r2, #0
    c96a:	3343      	adds	r3, #67	; 0x43
    c96c:	701a      	strb	r2, [r3, #0]
    c96e:	6863      	ldr	r3, [r4, #4]
    c970:	60a3      	str	r3, [r4, #8]
    c972:	2b00      	cmp	r3, #0
    c974:	db5c      	blt.n	ca30 <_printf_i+0x1d0>
    c976:	2204      	movs	r2, #4
    c978:	6821      	ldr	r1, [r4, #0]
    c97a:	4391      	bics	r1, r2
    c97c:	6021      	str	r1, [r4, #0]
    c97e:	2d00      	cmp	r5, #0
    c980:	d158      	bne.n	ca34 <_printf_i+0x1d4>
    c982:	9e04      	ldr	r6, [sp, #16]
    c984:	2b00      	cmp	r3, #0
    c986:	d064      	beq.n	ca52 <_printf_i+0x1f2>
    c988:	0026      	movs	r6, r4
    c98a:	9b03      	ldr	r3, [sp, #12]
    c98c:	3642      	adds	r6, #66	; 0x42
    c98e:	781b      	ldrb	r3, [r3, #0]
    c990:	7033      	strb	r3, [r6, #0]
    c992:	e05e      	b.n	ca52 <_printf_i+0x1f2>
    c994:	0648      	lsls	r0, r1, #25
    c996:	d5da      	bpl.n	c94e <_printf_i+0xee>
    c998:	b2ad      	uxth	r5, r5
    c99a:	e7d8      	b.n	c94e <_printf_i+0xee>
    c99c:	6809      	ldr	r1, [r1, #0]
    c99e:	681a      	ldr	r2, [r3, #0]
    c9a0:	0608      	lsls	r0, r1, #24
    c9a2:	d505      	bpl.n	c9b0 <_printf_i+0x150>
    c9a4:	1d11      	adds	r1, r2, #4
    c9a6:	6019      	str	r1, [r3, #0]
    c9a8:	6813      	ldr	r3, [r2, #0]
    c9aa:	6962      	ldr	r2, [r4, #20]
    c9ac:	601a      	str	r2, [r3, #0]
    c9ae:	e006      	b.n	c9be <_printf_i+0x15e>
    c9b0:	0649      	lsls	r1, r1, #25
    c9b2:	d5f7      	bpl.n	c9a4 <_printf_i+0x144>
    c9b4:	1d11      	adds	r1, r2, #4
    c9b6:	6019      	str	r1, [r3, #0]
    c9b8:	6813      	ldr	r3, [r2, #0]
    c9ba:	8aa2      	ldrh	r2, [r4, #20]
    c9bc:	801a      	strh	r2, [r3, #0]
    c9be:	2300      	movs	r3, #0
    c9c0:	9e04      	ldr	r6, [sp, #16]
    c9c2:	6123      	str	r3, [r4, #16]
    c9c4:	e054      	b.n	ca70 <_printf_i+0x210>
    c9c6:	681a      	ldr	r2, [r3, #0]
    c9c8:	1d11      	adds	r1, r2, #4
    c9ca:	6019      	str	r1, [r3, #0]
    c9cc:	6816      	ldr	r6, [r2, #0]
    c9ce:	2100      	movs	r1, #0
    c9d0:	6862      	ldr	r2, [r4, #4]
    c9d2:	0030      	movs	r0, r6
    c9d4:	f000 f958 	bl	cc88 <memchr>
    c9d8:	2800      	cmp	r0, #0
    c9da:	d001      	beq.n	c9e0 <_printf_i+0x180>
    c9dc:	1b80      	subs	r0, r0, r6
    c9de:	6060      	str	r0, [r4, #4]
    c9e0:	6863      	ldr	r3, [r4, #4]
    c9e2:	6123      	str	r3, [r4, #16]
    c9e4:	2300      	movs	r3, #0
    c9e6:	9a04      	ldr	r2, [sp, #16]
    c9e8:	7013      	strb	r3, [r2, #0]
    c9ea:	e041      	b.n	ca70 <_printf_i+0x210>
    c9ec:	6923      	ldr	r3, [r4, #16]
    c9ee:	0032      	movs	r2, r6
    c9f0:	9906      	ldr	r1, [sp, #24]
    c9f2:	9805      	ldr	r0, [sp, #20]
    c9f4:	9d07      	ldr	r5, [sp, #28]
    c9f6:	47a8      	blx	r5
    c9f8:	1c43      	adds	r3, r0, #1
    c9fa:	d043      	beq.n	ca84 <_printf_i+0x224>
    c9fc:	6823      	ldr	r3, [r4, #0]
    c9fe:	2500      	movs	r5, #0
    ca00:	079b      	lsls	r3, r3, #30
    ca02:	d40f      	bmi.n	ca24 <_printf_i+0x1c4>
    ca04:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ca06:	68e0      	ldr	r0, [r4, #12]
    ca08:	4298      	cmp	r0, r3
    ca0a:	da3d      	bge.n	ca88 <_printf_i+0x228>
    ca0c:	0018      	movs	r0, r3
    ca0e:	e03b      	b.n	ca88 <_printf_i+0x228>
    ca10:	0022      	movs	r2, r4
    ca12:	2301      	movs	r3, #1
    ca14:	3219      	adds	r2, #25
    ca16:	9906      	ldr	r1, [sp, #24]
    ca18:	9805      	ldr	r0, [sp, #20]
    ca1a:	9e07      	ldr	r6, [sp, #28]
    ca1c:	47b0      	blx	r6
    ca1e:	1c43      	adds	r3, r0, #1
    ca20:	d030      	beq.n	ca84 <_printf_i+0x224>
    ca22:	3501      	adds	r5, #1
    ca24:	68e3      	ldr	r3, [r4, #12]
    ca26:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca28:	1a9b      	subs	r3, r3, r2
    ca2a:	429d      	cmp	r5, r3
    ca2c:	dbf0      	blt.n	ca10 <_printf_i+0x1b0>
    ca2e:	e7e9      	b.n	ca04 <_printf_i+0x1a4>
    ca30:	2d00      	cmp	r5, #0
    ca32:	d0a9      	beq.n	c988 <_printf_i+0x128>
    ca34:	9e04      	ldr	r6, [sp, #16]
    ca36:	0028      	movs	r0, r5
    ca38:	0039      	movs	r1, r7
    ca3a:	f7fe fc79 	bl	b330 <__aeabi_uidivmod>
    ca3e:	9b03      	ldr	r3, [sp, #12]
    ca40:	3e01      	subs	r6, #1
    ca42:	5c5b      	ldrb	r3, [r3, r1]
    ca44:	0028      	movs	r0, r5
    ca46:	7033      	strb	r3, [r6, #0]
    ca48:	0039      	movs	r1, r7
    ca4a:	f7fe fbeb 	bl	b224 <__udivsi3>
    ca4e:	1e05      	subs	r5, r0, #0
    ca50:	d1f1      	bne.n	ca36 <_printf_i+0x1d6>
    ca52:	2f08      	cmp	r7, #8
    ca54:	d109      	bne.n	ca6a <_printf_i+0x20a>
    ca56:	6823      	ldr	r3, [r4, #0]
    ca58:	07db      	lsls	r3, r3, #31
    ca5a:	d506      	bpl.n	ca6a <_printf_i+0x20a>
    ca5c:	6863      	ldr	r3, [r4, #4]
    ca5e:	6922      	ldr	r2, [r4, #16]
    ca60:	4293      	cmp	r3, r2
    ca62:	dc02      	bgt.n	ca6a <_printf_i+0x20a>
    ca64:	2330      	movs	r3, #48	; 0x30
    ca66:	3e01      	subs	r6, #1
    ca68:	7033      	strb	r3, [r6, #0]
    ca6a:	9b04      	ldr	r3, [sp, #16]
    ca6c:	1b9b      	subs	r3, r3, r6
    ca6e:	6123      	str	r3, [r4, #16]
    ca70:	9b07      	ldr	r3, [sp, #28]
    ca72:	aa09      	add	r2, sp, #36	; 0x24
    ca74:	9300      	str	r3, [sp, #0]
    ca76:	0021      	movs	r1, r4
    ca78:	9b06      	ldr	r3, [sp, #24]
    ca7a:	9805      	ldr	r0, [sp, #20]
    ca7c:	f7ff fe82 	bl	c784 <_printf_common>
    ca80:	1c43      	adds	r3, r0, #1
    ca82:	d1b3      	bne.n	c9ec <_printf_i+0x18c>
    ca84:	2001      	movs	r0, #1
    ca86:	4240      	negs	r0, r0
    ca88:	b00b      	add	sp, #44	; 0x2c
    ca8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca8c:	0000f238 	.word	0x0000f238
    ca90:	0000f227 	.word	0x0000f227

0000ca94 <_putc_r>:
    ca94:	b570      	push	{r4, r5, r6, lr}
    ca96:	0006      	movs	r6, r0
    ca98:	000d      	movs	r5, r1
    ca9a:	0014      	movs	r4, r2
    ca9c:	2800      	cmp	r0, #0
    ca9e:	d004      	beq.n	caaa <_putc_r+0x16>
    caa0:	6983      	ldr	r3, [r0, #24]
    caa2:	2b00      	cmp	r3, #0
    caa4:	d101      	bne.n	caaa <_putc_r+0x16>
    caa6:	f7ff faab 	bl	c000 <__sinit>
    caaa:	4b12      	ldr	r3, [pc, #72]	; (caf4 <_putc_r+0x60>)
    caac:	429c      	cmp	r4, r3
    caae:	d111      	bne.n	cad4 <_putc_r+0x40>
    cab0:	6874      	ldr	r4, [r6, #4]
    cab2:	68a3      	ldr	r3, [r4, #8]
    cab4:	3b01      	subs	r3, #1
    cab6:	60a3      	str	r3, [r4, #8]
    cab8:	2b00      	cmp	r3, #0
    caba:	da05      	bge.n	cac8 <_putc_r+0x34>
    cabc:	69a2      	ldr	r2, [r4, #24]
    cabe:	4293      	cmp	r3, r2
    cac0:	db12      	blt.n	cae8 <_putc_r+0x54>
    cac2:	b2eb      	uxtb	r3, r5
    cac4:	2b0a      	cmp	r3, #10
    cac6:	d00f      	beq.n	cae8 <_putc_r+0x54>
    cac8:	6823      	ldr	r3, [r4, #0]
    caca:	b2e8      	uxtb	r0, r5
    cacc:	1c5a      	adds	r2, r3, #1
    cace:	6022      	str	r2, [r4, #0]
    cad0:	701d      	strb	r5, [r3, #0]
    cad2:	bd70      	pop	{r4, r5, r6, pc}
    cad4:	4b08      	ldr	r3, [pc, #32]	; (caf8 <_putc_r+0x64>)
    cad6:	429c      	cmp	r4, r3
    cad8:	d101      	bne.n	cade <_putc_r+0x4a>
    cada:	68b4      	ldr	r4, [r6, #8]
    cadc:	e7e9      	b.n	cab2 <_putc_r+0x1e>
    cade:	4b07      	ldr	r3, [pc, #28]	; (cafc <_putc_r+0x68>)
    cae0:	429c      	cmp	r4, r3
    cae2:	d1e6      	bne.n	cab2 <_putc_r+0x1e>
    cae4:	68f4      	ldr	r4, [r6, #12]
    cae6:	e7e4      	b.n	cab2 <_putc_r+0x1e>
    cae8:	0022      	movs	r2, r4
    caea:	0029      	movs	r1, r5
    caec:	0030      	movs	r0, r6
    caee:	f7ff f8c3 	bl	bc78 <__swbuf_r>
    caf2:	e7ee      	b.n	cad2 <_putc_r+0x3e>
    caf4:	0000f1cc 	.word	0x0000f1cc
    caf8:	0000f1ec 	.word	0x0000f1ec
    cafc:	0000f1ac 	.word	0x0000f1ac

0000cb00 <__sread>:
    cb00:	b570      	push	{r4, r5, r6, lr}
    cb02:	000c      	movs	r4, r1
    cb04:	250e      	movs	r5, #14
    cb06:	5f49      	ldrsh	r1, [r1, r5]
    cb08:	f000 f8f0 	bl	ccec <_read_r>
    cb0c:	2800      	cmp	r0, #0
    cb0e:	db03      	blt.n	cb18 <__sread+0x18>
    cb10:	6d63      	ldr	r3, [r4, #84]	; 0x54
    cb12:	181b      	adds	r3, r3, r0
    cb14:	6563      	str	r3, [r4, #84]	; 0x54
    cb16:	bd70      	pop	{r4, r5, r6, pc}
    cb18:	89a3      	ldrh	r3, [r4, #12]
    cb1a:	4a02      	ldr	r2, [pc, #8]	; (cb24 <__sread+0x24>)
    cb1c:	4013      	ands	r3, r2
    cb1e:	81a3      	strh	r3, [r4, #12]
    cb20:	e7f9      	b.n	cb16 <__sread+0x16>
    cb22:	46c0      	nop			; (mov r8, r8)
    cb24:	ffffefff 	.word	0xffffefff

0000cb28 <__swrite>:
    cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb2a:	001f      	movs	r7, r3
    cb2c:	898b      	ldrh	r3, [r1, #12]
    cb2e:	0005      	movs	r5, r0
    cb30:	000c      	movs	r4, r1
    cb32:	0016      	movs	r6, r2
    cb34:	05db      	lsls	r3, r3, #23
    cb36:	d505      	bpl.n	cb44 <__swrite+0x1c>
    cb38:	230e      	movs	r3, #14
    cb3a:	5ec9      	ldrsh	r1, [r1, r3]
    cb3c:	2200      	movs	r2, #0
    cb3e:	2302      	movs	r3, #2
    cb40:	f000 f88e 	bl	cc60 <_lseek_r>
    cb44:	89a3      	ldrh	r3, [r4, #12]
    cb46:	4a05      	ldr	r2, [pc, #20]	; (cb5c <__swrite+0x34>)
    cb48:	0028      	movs	r0, r5
    cb4a:	4013      	ands	r3, r2
    cb4c:	81a3      	strh	r3, [r4, #12]
    cb4e:	0032      	movs	r2, r6
    cb50:	230e      	movs	r3, #14
    cb52:	5ee1      	ldrsh	r1, [r4, r3]
    cb54:	003b      	movs	r3, r7
    cb56:	f000 f839 	bl	cbcc <_write_r>
    cb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb5c:	ffffefff 	.word	0xffffefff

0000cb60 <__sseek>:
    cb60:	b570      	push	{r4, r5, r6, lr}
    cb62:	000c      	movs	r4, r1
    cb64:	250e      	movs	r5, #14
    cb66:	5f49      	ldrsh	r1, [r1, r5]
    cb68:	f000 f87a 	bl	cc60 <_lseek_r>
    cb6c:	89a3      	ldrh	r3, [r4, #12]
    cb6e:	1c42      	adds	r2, r0, #1
    cb70:	d103      	bne.n	cb7a <__sseek+0x1a>
    cb72:	4a05      	ldr	r2, [pc, #20]	; (cb88 <__sseek+0x28>)
    cb74:	4013      	ands	r3, r2
    cb76:	81a3      	strh	r3, [r4, #12]
    cb78:	bd70      	pop	{r4, r5, r6, pc}
    cb7a:	2280      	movs	r2, #128	; 0x80
    cb7c:	0152      	lsls	r2, r2, #5
    cb7e:	4313      	orrs	r3, r2
    cb80:	81a3      	strh	r3, [r4, #12]
    cb82:	6560      	str	r0, [r4, #84]	; 0x54
    cb84:	e7f8      	b.n	cb78 <__sseek+0x18>
    cb86:	46c0      	nop			; (mov r8, r8)
    cb88:	ffffefff 	.word	0xffffefff

0000cb8c <__sclose>:
    cb8c:	b510      	push	{r4, lr}
    cb8e:	230e      	movs	r3, #14
    cb90:	5ec9      	ldrsh	r1, [r1, r3]
    cb92:	f000 f82f 	bl	cbf4 <_close_r>
    cb96:	bd10      	pop	{r4, pc}

0000cb98 <strchr>:
    cb98:	b2c9      	uxtb	r1, r1
    cb9a:	7803      	ldrb	r3, [r0, #0]
    cb9c:	2b00      	cmp	r3, #0
    cb9e:	d004      	beq.n	cbaa <strchr+0x12>
    cba0:	4299      	cmp	r1, r3
    cba2:	d100      	bne.n	cba6 <strchr+0xe>
    cba4:	4770      	bx	lr
    cba6:	3001      	adds	r0, #1
    cba8:	e7f7      	b.n	cb9a <strchr+0x2>
    cbaa:	424b      	negs	r3, r1
    cbac:	4159      	adcs	r1, r3
    cbae:	4249      	negs	r1, r1
    cbb0:	4008      	ands	r0, r1
    cbb2:	e7f7      	b.n	cba4 <strchr+0xc>

0000cbb4 <__ascii_wctomb>:
    cbb4:	1e0b      	subs	r3, r1, #0
    cbb6:	d004      	beq.n	cbc2 <__ascii_wctomb+0xe>
    cbb8:	2aff      	cmp	r2, #255	; 0xff
    cbba:	d904      	bls.n	cbc6 <__ascii_wctomb+0x12>
    cbbc:	238a      	movs	r3, #138	; 0x8a
    cbbe:	6003      	str	r3, [r0, #0]
    cbc0:	3b8b      	subs	r3, #139	; 0x8b
    cbc2:	0018      	movs	r0, r3
    cbc4:	4770      	bx	lr
    cbc6:	700a      	strb	r2, [r1, #0]
    cbc8:	2301      	movs	r3, #1
    cbca:	e7fa      	b.n	cbc2 <__ascii_wctomb+0xe>

0000cbcc <_write_r>:
    cbcc:	b570      	push	{r4, r5, r6, lr}
    cbce:	0005      	movs	r5, r0
    cbd0:	0008      	movs	r0, r1
    cbd2:	0011      	movs	r1, r2
    cbd4:	2200      	movs	r2, #0
    cbd6:	4c06      	ldr	r4, [pc, #24]	; (cbf0 <_write_r+0x24>)
    cbd8:	6022      	str	r2, [r4, #0]
    cbda:	001a      	movs	r2, r3
    cbdc:	f7f9 fdf6 	bl	67cc <_write>
    cbe0:	1c43      	adds	r3, r0, #1
    cbe2:	d103      	bne.n	cbec <_write_r+0x20>
    cbe4:	6823      	ldr	r3, [r4, #0]
    cbe6:	2b00      	cmp	r3, #0
    cbe8:	d000      	beq.n	cbec <_write_r+0x20>
    cbea:	602b      	str	r3, [r5, #0]
    cbec:	bd70      	pop	{r4, r5, r6, pc}
    cbee:	46c0      	nop			; (mov r8, r8)
    cbf0:	200013dc 	.word	0x200013dc

0000cbf4 <_close_r>:
    cbf4:	2300      	movs	r3, #0
    cbf6:	b570      	push	{r4, r5, r6, lr}
    cbf8:	4c06      	ldr	r4, [pc, #24]	; (cc14 <_close_r+0x20>)
    cbfa:	0005      	movs	r5, r0
    cbfc:	0008      	movs	r0, r1
    cbfe:	6023      	str	r3, [r4, #0]
    cc00:	f7f9 fe1e 	bl	6840 <_close>
    cc04:	1c43      	adds	r3, r0, #1
    cc06:	d103      	bne.n	cc10 <_close_r+0x1c>
    cc08:	6823      	ldr	r3, [r4, #0]
    cc0a:	2b00      	cmp	r3, #0
    cc0c:	d000      	beq.n	cc10 <_close_r+0x1c>
    cc0e:	602b      	str	r3, [r5, #0]
    cc10:	bd70      	pop	{r4, r5, r6, pc}
    cc12:	46c0      	nop			; (mov r8, r8)
    cc14:	200013dc 	.word	0x200013dc

0000cc18 <_fstat_r>:
    cc18:	2300      	movs	r3, #0
    cc1a:	b570      	push	{r4, r5, r6, lr}
    cc1c:	4c06      	ldr	r4, [pc, #24]	; (cc38 <_fstat_r+0x20>)
    cc1e:	0005      	movs	r5, r0
    cc20:	0008      	movs	r0, r1
    cc22:	0011      	movs	r1, r2
    cc24:	6023      	str	r3, [r4, #0]
    cc26:	f7f9 fe0e 	bl	6846 <_fstat>
    cc2a:	1c43      	adds	r3, r0, #1
    cc2c:	d103      	bne.n	cc36 <_fstat_r+0x1e>
    cc2e:	6823      	ldr	r3, [r4, #0]
    cc30:	2b00      	cmp	r3, #0
    cc32:	d000      	beq.n	cc36 <_fstat_r+0x1e>
    cc34:	602b      	str	r3, [r5, #0]
    cc36:	bd70      	pop	{r4, r5, r6, pc}
    cc38:	200013dc 	.word	0x200013dc

0000cc3c <_isatty_r>:
    cc3c:	2300      	movs	r3, #0
    cc3e:	b570      	push	{r4, r5, r6, lr}
    cc40:	4c06      	ldr	r4, [pc, #24]	; (cc5c <_isatty_r+0x20>)
    cc42:	0005      	movs	r5, r0
    cc44:	0008      	movs	r0, r1
    cc46:	6023      	str	r3, [r4, #0]
    cc48:	f7f9 fe02 	bl	6850 <_isatty>
    cc4c:	1c43      	adds	r3, r0, #1
    cc4e:	d103      	bne.n	cc58 <_isatty_r+0x1c>
    cc50:	6823      	ldr	r3, [r4, #0]
    cc52:	2b00      	cmp	r3, #0
    cc54:	d000      	beq.n	cc58 <_isatty_r+0x1c>
    cc56:	602b      	str	r3, [r5, #0]
    cc58:	bd70      	pop	{r4, r5, r6, pc}
    cc5a:	46c0      	nop			; (mov r8, r8)
    cc5c:	200013dc 	.word	0x200013dc

0000cc60 <_lseek_r>:
    cc60:	b570      	push	{r4, r5, r6, lr}
    cc62:	0005      	movs	r5, r0
    cc64:	0008      	movs	r0, r1
    cc66:	0011      	movs	r1, r2
    cc68:	2200      	movs	r2, #0
    cc6a:	4c06      	ldr	r4, [pc, #24]	; (cc84 <_lseek_r+0x24>)
    cc6c:	6022      	str	r2, [r4, #0]
    cc6e:	001a      	movs	r2, r3
    cc70:	f7f9 fdf0 	bl	6854 <_lseek>
    cc74:	1c43      	adds	r3, r0, #1
    cc76:	d103      	bne.n	cc80 <_lseek_r+0x20>
    cc78:	6823      	ldr	r3, [r4, #0]
    cc7a:	2b00      	cmp	r3, #0
    cc7c:	d000      	beq.n	cc80 <_lseek_r+0x20>
    cc7e:	602b      	str	r3, [r5, #0]
    cc80:	bd70      	pop	{r4, r5, r6, pc}
    cc82:	46c0      	nop			; (mov r8, r8)
    cc84:	200013dc 	.word	0x200013dc

0000cc88 <memchr>:
    cc88:	b2c9      	uxtb	r1, r1
    cc8a:	1882      	adds	r2, r0, r2
    cc8c:	4290      	cmp	r0, r2
    cc8e:	d101      	bne.n	cc94 <memchr+0xc>
    cc90:	2000      	movs	r0, #0
    cc92:	4770      	bx	lr
    cc94:	7803      	ldrb	r3, [r0, #0]
    cc96:	428b      	cmp	r3, r1
    cc98:	d0fb      	beq.n	cc92 <memchr+0xa>
    cc9a:	3001      	adds	r0, #1
    cc9c:	e7f6      	b.n	cc8c <memchr+0x4>

0000cc9e <_realloc_r>:
    cc9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cca0:	0007      	movs	r7, r0
    cca2:	000d      	movs	r5, r1
    cca4:	0016      	movs	r6, r2
    cca6:	2900      	cmp	r1, #0
    cca8:	d105      	bne.n	ccb6 <_realloc_r+0x18>
    ccaa:	0011      	movs	r1, r2
    ccac:	f7fe fd06 	bl	b6bc <_malloc_r>
    ccb0:	0004      	movs	r4, r0
    ccb2:	0020      	movs	r0, r4
    ccb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ccb6:	2a00      	cmp	r2, #0
    ccb8:	d103      	bne.n	ccc2 <_realloc_r+0x24>
    ccba:	f7fe fcb5 	bl	b628 <_free_r>
    ccbe:	0034      	movs	r4, r6
    ccc0:	e7f7      	b.n	ccb2 <_realloc_r+0x14>
    ccc2:	f000 f827 	bl	cd14 <_malloc_usable_size_r>
    ccc6:	002c      	movs	r4, r5
    ccc8:	4286      	cmp	r6, r0
    ccca:	d9f2      	bls.n	ccb2 <_realloc_r+0x14>
    cccc:	0031      	movs	r1, r6
    ccce:	0038      	movs	r0, r7
    ccd0:	f7fe fcf4 	bl	b6bc <_malloc_r>
    ccd4:	1e04      	subs	r4, r0, #0
    ccd6:	d0ec      	beq.n	ccb2 <_realloc_r+0x14>
    ccd8:	0029      	movs	r1, r5
    ccda:	0032      	movs	r2, r6
    ccdc:	f7fe fc80 	bl	b5e0 <memcpy>
    cce0:	0029      	movs	r1, r5
    cce2:	0038      	movs	r0, r7
    cce4:	f7fe fca0 	bl	b628 <_free_r>
    cce8:	e7e3      	b.n	ccb2 <_realloc_r+0x14>
	...

0000ccec <_read_r>:
    ccec:	b570      	push	{r4, r5, r6, lr}
    ccee:	0005      	movs	r5, r0
    ccf0:	0008      	movs	r0, r1
    ccf2:	0011      	movs	r1, r2
    ccf4:	2200      	movs	r2, #0
    ccf6:	4c06      	ldr	r4, [pc, #24]	; (cd10 <_read_r+0x24>)
    ccf8:	6022      	str	r2, [r4, #0]
    ccfa:	001a      	movs	r2, r3
    ccfc:	f7f9 fd44 	bl	6788 <_read>
    cd00:	1c43      	adds	r3, r0, #1
    cd02:	d103      	bne.n	cd0c <_read_r+0x20>
    cd04:	6823      	ldr	r3, [r4, #0]
    cd06:	2b00      	cmp	r3, #0
    cd08:	d000      	beq.n	cd0c <_read_r+0x20>
    cd0a:	602b      	str	r3, [r5, #0]
    cd0c:	bd70      	pop	{r4, r5, r6, pc}
    cd0e:	46c0      	nop			; (mov r8, r8)
    cd10:	200013dc 	.word	0x200013dc

0000cd14 <_malloc_usable_size_r>:
    cd14:	1f0b      	subs	r3, r1, #4
    cd16:	681b      	ldr	r3, [r3, #0]
    cd18:	1f18      	subs	r0, r3, #4
    cd1a:	2b00      	cmp	r3, #0
    cd1c:	da01      	bge.n	cd22 <_malloc_usable_size_r+0xe>
    cd1e:	580b      	ldr	r3, [r1, r0]
    cd20:	18c0      	adds	r0, r0, r3
    cd22:	4770      	bx	lr

0000cd24 <mmc_trans_multipliers>:
    cd24:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    cd34:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    cd44:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    cd54:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000cd64 <sd_mmc_trans_units>:
    cd64:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0000cd80 <sd_trans_multipliers>:
    cd80:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    cd90:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    cda0:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    cdb0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000cdc0 <__FUNCTION__.14666>:
    cdc0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
    cdd0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
    cde0:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
    cdf0:	746c 6320 646d 0000 1ec0 0000 1e90 0000     lt cmd..........
    ce00:	1e88 0000 1ea0 0000 1e98 0000 1eb8 0000     ................
    ce10:	1ea8 0000 1eb0 0000                         ........

0000ce18 <__FUNCTION__.13113>:
    ce18:	6968 5f66 6573 646e 0000 0000               hif_send....

0000ce24 <__FUNCTION__.13123>:
    ce24:	6968 5f66 7369 0072                         hif_isr.

0000ce2c <__FUNCTION__.13132>:
    ce2c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0000ce3c <__FUNCTION__.13144>:
    ce3c:	6968 5f66 6572 6563 7669 0065               hif_receive.

0000ce48 <__FUNCTION__.13160>:
    ce48:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
    ce58:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
    ce68:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
    ce78:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
    ce88:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
    ce98:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
    cea8:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
    ceb8:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
    cec8:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
    ced8:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
    cee8:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
    cef8:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
    cf08:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
    cf18:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
    cf28:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
    cf38:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
    cf48:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
    cf58:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
    cf68:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
    cf78:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
    cf88:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
    cf98:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
    cfa8:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
    cfb8:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
    cfc8:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
    cfd8:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
    cfe8:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
    cff8:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
    d008:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
    d018:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
    d028:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
    d038:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
    d048:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
    d058:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
    d068:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
    d078:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
    d088:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
    d098:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
    d0a8:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
    d0b8:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
    d0c8:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
    d0d8:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
    d0e8:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
    d0f8:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
    d108:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
    d118:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
    d128:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

0000d138 <__FUNCTION__.13095>:
    d138:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0000d144 <__FUNCTION__.13124>:
    d144:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0000d154 <__FUNCTION__.13155>:
    d154:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
    d164:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
    d174:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
    d184:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
    d194:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
    d1a4:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
    d1b4:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
    d1c4:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
    d1d4:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
    d1e4:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
    d1f4:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
    d204:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
    d214:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
    d224:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
    d234:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
    d244:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
    d254:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
    d264:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
    d274:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
    d284:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
    d294:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
    d2a4:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
    d2b4:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
    d2c4:	3731 313a 3a31 3035 0000 0000 7041 2072     17:11:50....Apr 
    d2d4:	3731 3220 3130 0039 7244 7669 7265 6220     17 2019.Driver b
    d2e4:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
    d2f4:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
    d304:	2065 6556 7372 6f69 006e 0000               e Version...

0000d310 <__FUNCTION__.12952>:
    d310:	6863 7069 775f 6b61 0065 0000               chip_wake...

0000d31c <__FUNCTION__.13001>:
    d31c:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
    d32c:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
    d33c:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
    d34c:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
    d35c:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
    d36c:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
    d37c:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

0000d38c <__FUNCTION__.12999>:
    d38c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0000d398 <__FUNCTION__.13006>:
    d398:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
    d3a8:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
    d3b8:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
    d3c8:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
    d3d8:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
    d3e8:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
    d3f8:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
    d408:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
    d418:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
    d428:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
    d438:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
    d448:	4920 2044 6c25 0a78 0000 0000 2ea0 0000      ID %lx.........
    d458:	2ea0 0000 2ed0 0000 2e52 0000 2e76 0000     ........R...v...
    d468:	2e84 0000 2eb6 0000 2eb6 0000 2efe 0000     ................
    d478:	2e36 0000 2f38 0000 2f38 0000 2f38 0000     6...8/..8/..8/..
    d488:	2f38 0000 2e92 0000 c9c3 cac4               8/..........

0000d494 <__FUNCTION__.12268>:
    d494:	7073 5f69 6d63 0064                         spi_cmd.

0000d49c <__FUNCTION__.12275>:
    d49c:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0000d4ac <__FUNCTION__.12284>:
    d4ac:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0000d4b8 <__FUNCTION__.12300>:
    d4b8:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0000d4c8 <__FUNCTION__.12315>:
    d4c8:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0000d4d8 <__FUNCTION__.12327>:
    d4d8:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0000d4e8 <__FUNCTION__.12338>:
    d4e8:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0000d4f8 <__FUNCTION__.12350>:
    d4f8:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0000d508 <__FUNCTION__.12363>:
    d508:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0000d514 <__FUNCTION__.12384>:
    d514:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0000d520 <crc7_syndrome_table>:
    d520:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    d530:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    d540:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    d550:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    d560:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    d570:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    d580:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    d590:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    d5a0:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    d5b0:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    d5c0:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    d5d0:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    d5e0:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    d5f0:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    d600:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    d610:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    d620:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    d630:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    d640:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
    d650:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
    d660:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
    d670:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    d680:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    d690:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
    d6a0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
    d6b0:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
    d6c0:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
    d6d0:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
    d6e0:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
    d6f0:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    d700:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
    d710:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
    d720:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    d730:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
    d740:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
    d750:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
    d760:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    d770:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
    d780:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
    d790:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
    d7a0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    d7b0:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
    d7c0:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
    d7d0:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
    d7e0:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
    d7f0:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
    d800:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
    d810:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    d820:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
    d830:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
    d840:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    d850:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
    d860:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
    d870:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    d880:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
    d890:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
    d8a0:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
    d8b0:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
    d8c0:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
    d8d0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    d8e0:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
    d8f0:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
    d900:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    d910:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
    d920:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    d930:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
    d940:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
    d950:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    d960:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
    d970:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
    d980:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    d990:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
    d9a0:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
    d9b0:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
    d9c0:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
    d9d0:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
    d9e0:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
    d9f0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    da00:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
    da10:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
    da20:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    da30:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
    da40:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
    da50:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
    da60:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
    da70:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
    da80:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
    da90:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
    daa0:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
    dab0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    dac0:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
    dad0:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
    dae0:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
    daf0:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
    db00:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
    db10:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    db20:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
    db30:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
    db40:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
    db50:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
    db60:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
    db70:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
    db80:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
    db90:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
    dba0:	206e 4449 3d20 2520 0d64 000a 43c0 0000     n ID = %d....C..
    dbb0:	43c0 0000 439c 0000 43c0 0000 439c 0000     .C...C...C...C..
    dbc0:	4382 0000 4382 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dbd0:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dbe0:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dbf0:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc00:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc10:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc20:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc30:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc40:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc50:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc60:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc70:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc80:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dc90:	43c0 0000 43c0 0000 43c0 0000 43c0 0000     .C...C...C...C..
    dca0:	43c0 0000 43c0 0000 43c0 0000 439c 0000     .C...C...C...C..
    dcb0:	439c 0000 43a4 0000 43a4 0000 43a4 0000     .C...C...C...C..
    dcc0:	43a4 0000 0800 4200 0c00 4200 1000 4200     .C.....B...B...B
    dcd0:	1400 4200 1800 4200 1c00 4200 58b2 0000     ...B...B...B.X..
    dce0:	58ae 0000 58ae 0000 5914 0000 5914 0000     .X...X...Y...Y..
    dcf0:	58c6 0000 58b8 0000 58cc 0000 5902 0000     .X...X...X...Y..
    dd00:	5ad4 0000 5ab4 0000 5ab4 0000 5b40 0000     .Z...Z...Z..@[..
    dd10:	5ac6 0000 5ae2 0000 5ab8 0000 5af0 0000     .Z...Z...Z...Z..
    dd20:	5b30 0000                                   0[..

0000dd24 <_tcc_apbcmasks>:
    dd24:	0100 0000 0200 0000 0400 0000               ............

0000dd30 <_tcc_cc_nums>:
    dd30:	0204 0002                                   ....

0000dd34 <_tcc_gclk_ids>:
    dd34:	1a1a 001b                                   ....

0000dd38 <_tcc_maxs>:
    dd38:	ffff 00ff ffff 00ff ffff 0000               ............

0000dd44 <_tcc_ow_nums>:
    dd44:	0408 0002                                   ....

0000dd48 <_tcc_intflag>:
    dd48:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    dd58:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    dd68:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0000dd78 <tcc_interrupt_vectors.12458>:
    dd78:	100f 0011                                   ....

0000dd7c <LfnOfs>:
    dd7c:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0000dd8c <excvt.4558>:
    dd8c:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    dd9c:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    ddac:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    ddbc:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    ddcc:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    dddc:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    ddec:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    ddfc:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
    de0c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    de1c:	5d5b 0000                                   []..

0000de20 <Tbl>:
    de20:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    de30:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    de40:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    de50:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    de60:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    de70:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    de80:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    de90:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    dea0:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    deb0:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    dec0:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    ded0:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    dee0:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    def0:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    df00:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    df10:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0000df20 <tbl_lower.4308>:
    df20:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    df30:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    df40:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    df50:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    df60:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    df70:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    df80:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    df90:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    dfa0:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    dfb0:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    dfc0:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    dfd0:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    dfe0:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    dff0:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    e000:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    e010:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    e020:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    e030:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    e040:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    e050:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    e060:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    e070:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    e080:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    e090:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    e0a0:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    e0b0:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    e0c0:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    e0d0:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    e0e0:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    e0f0:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0000e100 <tbl_upper.4309>:
    e100:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    e110:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    e120:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    e130:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    e140:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    e150:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    e160:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    e170:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    e180:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    e190:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    e1a0:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    e1b0:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    e1c0:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    e1d0:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    e1e0:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    e1f0:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    e200:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    e210:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    e220:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    e230:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    e240:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    e250:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    e260:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    e270:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    e280:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    e290:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    e2a0:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    e2b0:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    e2c0:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    e2d0:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
    e2e0:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
    e2f8:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
    e338:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
    e350:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
    e390:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
    e3a0:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
    e3b0:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
    e3c0:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
    e3d0:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
    e3e0:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
    e3f0:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
    e400:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
    e410:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
    e420:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
    e430:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
    e440:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
    e450:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
    e460:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
    e470:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
    e480:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
    e490:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
    e4a0:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
    e4b0:	2800 4200 a800 0000 a808 0000 a816 0000     .(.B............
    e4c0:	a84e 0000 a864 0000 0a0d 2520 2a2e 0073     N...d..... %.*s.
    e4d0:	3e20 203e 0000 0000 2e25 732a 0000 0000      >> ....%.*s....
    e4e0:	654c 4464 7461 0061 6166 736c 0065 0000     LedData.false...
    e4f0:	7274 6575 0000 0000 6f62 746f 6d20 646f     true....boot mod
    e500:	3a65 6320 6568 6b63 6e69 2067 6669 6220     e: checking if b
    e510:	6f6f 6c74 616f 6564 2072 726f 6120 7070     ootloader or app
    e520:	6320 646f 2065 7369 7420 206f 7572 206e      code is to run 
    e530:	2e2e 2e2e 0d0a 0000 6f62 746f 6d20 646f     ........boot mod
    e540:	3a65 3e20 203e 6f42 746f 6f6c 6461 7265     e: >> Bootloader
    e550:	4220 7475 6f74 206e 7270 7365 6573 2064      Button pressed 
    e560:	0d0a 0000 6f62 746f 6d20 646f 3a65 3e20     ....boot mode: >
    e570:	203e 544f 4641 2055 0d0a 0000 6f62 746f     > OTAFU ....boot
    e580:	6d20 646f 3a65 3e20 203e 4f4e 4120 5050      mode: >> NO APP
    e590:	4120 4156 4c49 4241 454c 0a20 000d 0000      AVAILABLE .....
    e5a0:	6f62 746f 6d20 646f 3a65 3e20 203e 4f4e     boot mode: >> NO
    e5b0:	5620 5245 4953 4e4f 4620 414c 2047 0d0a      VERSION FLAG ..
    e5c0:	0000 0000 6964 6173 6c62 2065 6570 6972     ....disable peri
    e5d0:	6870 7265 6c61 3a73 4420 6965 696e 6974     pherals: Deiniti
    e5e0:	6c61 7a69 6e69 2067 6570 6972 6870 7265     alizing peripher
    e5f0:	6c61 2073 2e2e 2e2e 202e 0d0a 0000 0000     als ..... ......
    e600:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
    e610:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
    e620:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
    e630:	6465 0d2e 0000 0000 7468 7074 635f 696c     ed......http_cli
    e640:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
    e650:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
    e660:	000d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
    e670:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
    e680:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
    e690:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
    e6a0:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
    e6b0:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
    e6c0:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
    e6d0:	756a 706d 745f 5f6f 7061 3a70 4a20 6d75     jump_to_app: Jum
    e6e0:	6970 676e 7420 206f 7041 6c70 6369 7461     ping to Applicat
    e6f0:	6f69 206e 2e2e 2e2e 202e 0d0a 0000 0000     ion ..... ......
    e700:	0a0d 2d2d 4220 6f6f 6974 676e 7520 2070     ..-- Booting up 
    e710:	6874 2065 6564 6976 6563 2d20 0d2d 2d0a     the device --..-
    e720:	202d 4544 4f4c 2053 4e49 2e43 6f20 206e     - DELOS INC. on 
    e730:	4153 444d 3132 3147 4138 4d20 5543 2d20     SAMD21G18A MCU -
    e740:	0d2d 2d0a 202d 6f43 706d 6c69 6465 203a     -..-- Compiled: 
    e750:	7041 2072 3731 3220 3130 2039 3731 333a     Apr 17 2019 17:3
    e760:	3a30 3532 2d20 0d2d 0000 0000 0a0d 616d     0:25 --.......ma
    e770:	6e69 203a 6e49 7469 6169 696c 697a 676e     in: Initializing
    e780:	4220 616f 6472 6120 646e 7020 7265 7069      Board and perip
    e790:	6568 6172 736c 2e20 2e2e 2e2e 202e 0a0d     herals ...... ..
    e7a0:	000d 0000 6f63 666e 6769 7275 5f65 7468     ....configure_ht
    e7b0:	7074 635f 696c 6e65 3a74 4820 5454 2050     tp_client: HTTP 
    e7c0:	6c63 6569 746e 6920 696e 6974 6c61 7a69     client initializ
    e7d0:	7461 6f69 206e 6166 6c69 6465 2021 7228     ation failed! (r
    e7e0:	7365 2520 2964 0a0d 0000 0000 514d 5454     es %d)......MQTT
    e7f0:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
    e800:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
    e810:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
    e820:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
    e830:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
    e840:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
    e850:	0d29 000a 6e69 7469 735f 6f74 6172 6567     )...init_storage
    e860:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
    e870:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
    e880:	6c73 746f 2e2e 0d2e 0000 0000 6e69 7469     slot........init
    e890:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
    e8a0:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
    e8b0:	0d2e 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
    e8c0:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
    e8d0:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
    e8e0:	2e64 000d 6e69 7469 735f 6f74 6172 6567     d...init_storage
    e8f0:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
    e900:	6472 2e2e 0d2e 0000 6e69 7469 735f 6f74     rd......init_sto
    e910:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
    e920:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
    e930:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
    e940:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
    e950:	6e75 2074 4b4f 0d2e 0000 0000 616d 6e69     unt OK......main
    e960:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
    e970:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
    e980:	2520 2964 0a0d 0000 0d0a 616d 6e69 203a      %d)......main: 
    e990:	3e3e 4220 616f 6472 6120 646e 7020 7265     >> Board and per
    e9a0:	7069 6568 6172 736c 6920 696e 6974 6c61     ipherals initial
    e9b0:	7a69 6465 0d0a 0000 0d0a 616d 6e69 203a     ized......main: 
    e9c0:	6f42 746f 6e69 2067 7075 2e20 2e2e 2e2e     Booting up .....
    e9d0:	0a20 000d 616d 6e69 203a 7453 7261 6974      ...main: Starti
    e9e0:	676e 4120 7070 696c 6163 6974 6e6f 2e20     ng Application .
    e9f0:	2e2e 2e2e 0a20 000d 616d 6e69 203a 6843     .... ...main: Ch
    ea00:	6365 696b 676e 4f20 4154 7520 6470 7461     ecking OTA updat
    ea10:	7365 2e20 2e2e 2e2e 0a20 000d 616d 6e69     es ..... ...main
    ea20:	203a 3e3e 4e20 7765 6620 7269 776d 7261     : >> New firmwar
    ea30:	2065 6f64 6e77 6f6c 6461 6465 0d0a 0000     e downloaded....
    ea40:	5245 3e52 203e 7953 7473 6369 206b 6f63     ERR>> Systick co
    ea50:	666e 6769 7275 7461 6f69 206e 7265 6f72     nfiguration erro
    ea60:	0d72 000a                                   r...

0000ea64 <main_mqtt_broker>:
    ea64:	316d 2e36 6c63 756f 6d64 7471 2e74 6f63     m16.cloudmqtt.co
    ea74:	006d 0000 0a0d 6f43 6e6e 6365 6974 676e     m.....Connecting
    ea84:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
    ea94:	336b 7255 666f 4454 674c 4b44 0000 0000     k3UrofTDLgDK....
    eaa4:	7767 6e76 6e76 6663 0000 0000 514d 5454     gwvnvncf....MQTT
    eab4:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
    eac4:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
    ead4:	0d72 0000 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
    eae4:	6465 7420 206f 7262 6b6f 7265 000d 0000     ed to broker....
    eaf4:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
    eb04:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
    eb14:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
    eb24:	796c 0d2e 000a 0000 6554 706d 6144 6174     ly......TempData
    eb34:	0000 0000 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
    eb44:	6465 000d 514d 5454 6220 6f72 656b 2072     ed..MQTT broker 
    eb54:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
    eb64:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
    eb74:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
    eb84:	6f63 6e6e 6365 6574 0d64 0000 746f 6661     connected...otaf
    eb94:	5f75 6f64 6e77 6f6c 6461 203a 6f44 6e77     u_download: Down
    eba4:	6f6c 6461 6e69 2067 7075 6164 6574 7620     loading update v
    ebb4:	7265 6973 6e6f 2e20 2e2e 2e2e 0a20 000d     ersion ..... ...
    ebc4:	3025 6433 0000 0000 6473 635f 7261 5f64     %03d....sd_card_
    ebd4:	6f74 6e5f 6d76 635f 706f 3a79 5220 6165     to_nvm_copy: Rea
    ebe4:	6964 676e 6320 7261 2064 2e2e 2e2e 202e     ding card ..... 
    ebf4:	0d0a 0000 4453 565f 5245 3d20 2520 0a75     ....SD_VER = %u.
    ec04:	000d 0000 7325 0000 564e 5f4d 4556 2052     ....%s..NVM_VER 
    ec14:	203d 7525 0d0a 0000 6473 635f 7261 5f64     = %u....sd_card_
    ec24:	6f74 6e5f 6d76 635f 706f 3a79 5620 7265     to_nvm_copy: Ver
    ec34:	6973 6e6f 4420 6669 6566 6572 746e 202c     sion Different, 
    ec44:	7257 7469 6e69 2067 656e 2077 6f63 6564     Writing new code
    ec54:	2e20 2e2e 2e2e 0a20 000d 0000 6473 635f      ..... .....sd_c
    ec64:	7261 5f64 6f74 6e5f 6d76 635f 706f 3a79     ard_to_nvm_copy:
    ec74:	3e20 203e 6556 7372 6f69 206e 6153 656d      >> Version Same
    ec84:	0a20 000d 6473 6f20 6570 6172 6974 6e6f      ...sd operation
    ec94:	203a 3e3e 4f20 6570 696e 676e 6120 6620     : >> Opening a f
    eca4:	6c69 2065 6166 6c69 6465 0d0a 0000 0000     ile failed......
    ecb4:	6473 6f20 6570 6172 6974 6e6f 203a 3e3e     sd operation: >>
    ecc4:	4620 6c69 2065 706f 6e65 7320 6375 6563      File open succe
    ecd4:	7373 0d0a 0000 0000 6473 6f20 6570 6172     ss......sd opera
    ece4:	6974 6e6f 203a 6e69 7469 6169 6974 676e     tion: initiating
    ecf4:	6620 7269 776d 7261 2065 7277 7469 2065      firmware write 
    ed04:	6f74 6e20 6d76 2e20 2e2e 2e2e 2e2e 0a20     to nvm ....... .
    ed14:	000d 0000 6473 6f20 6570 6172 6974 6e6f     ....sd operation
    ed24:	203a 7265 7361 6e69 2067 766e 206d 6f6c     : erasing nvm lo
    ed34:	6163 6974 6e6f 2e20 2e2e 2e2e 2e2e 0a20     cation ....... .
    ed44:	000d 0000 6473 6f20 6570 6172 6974 6e6f     ....sd operation
    ed54:	203a 7277 7469 6e69 2067 6966 6d72 6177     : writing firmwa
    ed64:	6572 7420 206f 7263 2063 2e2e 2e2e 2e2e     re to crc ......
    ed74:	202e 0d0a 0000 0000 6473 6f20 6570 6172     . ......sd opera
    ed84:	6974 6e6f 203a 6163 636c 6c75 7461 6e69     tion: calculatin
    ed94:	2067 766e 206d 6966 6d72 6177 6572 6320     g nvm firmware c
    eda4:	6372 2e20 2e2e 2e2e 2e2e 0a20 000d 0000     rc ....... .....
    edb4:	6473 6f20 6570 6172 6974 6e6f 203a 6576     sd operation: ve
    edc4:	6672 6979 676e 6320 6372 6f20 2066 6473     rfying crc of sd
    edd4:	6320 7261 2064 6966 6d72 6177 6572 6120      card firmware a
    ede4:	646e 6e20 6d76 6620 7269 776d 7261 2065     nd nvm firmware 
    edf4:	2e2e 2e2e 2e2e 202e 0d0a 0000 5243 5f43     ....... ....CRC_
    ee04:	454d 204d 203d 7525 0d0a 0000 5243 5f43     MEM = %u....CRC_
    ee14:	564e 204d 203d 7525 0d0a 0000 6473 6f20     NVM = %u....sd o
    ee24:	6570 6172 6974 6e6f 203a 3e3e 4e20 5745     peration: >> NEW
    ee34:	4620 5249 574d 5241 2045 4556 5352 4f49      FIRMWARE VERSIO
    ee44:	204e 5055 4144 4554 2044 0d0a 0000 0000     N UPDATED ......
    ee54:	6473 6f20 6570 6172 6974 6e6f 203a 3e3e     sd operation: >>
    ee64:	4e20 5745 4620 5249 574d 5241 2045 5257      NEW FIRMWARE WR
    ee74:	5449 4554 204e 5553 4343 5345 4653 4c55     ITTEN SUCCESSFUL
    ee84:	594c 0a20 000d 0000 7473 7261 5f74 6f64     LY .....start_do
    ee94:	6e77 6f6c 6461 203a 4d4d 2043 7473 726f     wnload: MMC stor
    eea4:	6761 2065 6f6e 2074 6572 6461 2e79 000d     age not ready...
    eeb4:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
    eec4:	6957 462d 2069 7369 6e20 746f 6320 6e6f     Wi-Fi is not con
    eed4:	656e 7463 6465 0d2e 0000 0000 7473 7261     nected......star
    eee4:	5f74 6f64 6e77 6f6c 6461 203a 6572 7571     t_download: requ
    eef4:	7365 2074 7369 7320 6e65 2074 6c61 6572     est is sent alre
    ef04:	6461 2e79 000d 0000 7473 7261 5f74 6f64     ady.....start_do
    ef14:	6e77 6f6c 6461 203a 7572 6e6e 6e69 2067     wnload: running 
    ef24:	6f64 6e77 6f6c 6461 6120 726c 6165 7964     download already
    ef34:	0d2e 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
    ef44:	6461 203a 6573 646e 6e69 2067 5448 5054     ad: sending HTTP
    ef54:	7220 7165 6575 7473 2e2e 0d2e 0000 0000      request........
    ef64:	7468 7074 3a73 2f2f 7777 2e77 6573 7361     https://www.seas
    ef74:	752e 6570 6e6e 652e 7564 7e2f 6774 6568     .upenn.edu/~tghe
    ef84:	6164 6f6f 462f 7269 776d 7261 2e65 6962     daoo/Firmware.bi
    ef94:	006e 0000 7473 726f 5f65 6966 656c 705f     n...store_file_p
    efa4:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
    efb4:	2e61 000d 7473 726f 5f65 6966 656c 705f     a...store_file_p
    efc4:	6361 656b 3a74 6320 6572 7461 6e69 2067     acket: creating 
    efd4:	6966 656c 5b20 7325 0d5d 000a 7473 726f     file [%s]...stor
    efe4:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
    eff4:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
    f004:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
    f014:	636e 6c65 6465 0d2e 0000 0000 7473 726f     nceled......stor
    f024:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
    f034:	6c69 2065 7263 6165 6974 6e6f 6520 7272     ile creation err
    f044:	726f 2021 6572 3a74 6425 0a0d 0000 0000     or! ret:%d......
    f054:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
    f064:	3a74 6620 6c69 2065 7277 7469 2065 7265     t: file write er
    f074:	6f72 2c72 6420 776f 6c6e 616f 2064 6163     ror, download ca
    f084:	636e 6c65 6465 0d2e 0000 0000 7473 726f     nceled......stor
    f094:	5f65 6966 656c 705f 6361 656b 3a74 7220     e_file_packet: r
    f0a4:	6365 6965 6576 5b64 6c25 5d75 202c 6966     eceived[%lu], fi
    f0b4:	656c 7320 7a69 5b65 6c25 5d75 0a0d 0000     le size[%lu]....
    f0c4:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
    f0d4:	3a74 6620 6c69 2065 6f64 6e77 6f6c 6461     t: file download
    f0e4:	6465 7320 6375 6563 7373 7566 6c6c 2e79     ed successfully.
    f0f4:	000d 0000 6977 6966 635f 3a62 4d20 4d32     ....wifi_cb: M2M
    f104:	575f 4649 5f49 4f43 4e4e 4345 4554 0d44     _WIFI_CONNECTED.
    f114:	0000 0000 6977 6966 635f 3a62 4d20 4d32     ....wifi_cb: M2M
    f124:	575f 4649 5f49 4944 4353 4e4f 454e 5443     _WIFI_DISCONNECT
    f134:	4445 000d 6570 6e6e 3731 3034 6977 6966     ED..penn1740wifi
    f144:	0000 0000 6941 5072 6e65 4e6e 7465 442d     ....AirPennNet-D
    f154:	7665 6369 0065 0000 6977 6966 635f 3a62     evice...wifi_cb:
    f164:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
    f174:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
    f184:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
    f194:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
    f1a4:	000d 0000                                   ....

0000f1a8 <_global_impure_ptr>:
    f1a8:	0130 2000                                   0.. 

0000f1ac <__sf_fake_stderr>:
	...

0000f1cc <__sf_fake_stdin>:
	...

0000f1ec <__sf_fake_stdout>:
	...
    f20c:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
    f21c:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
    f22c:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
    f23c:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0000f249 <_ctype_>:
    f249:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    f259:	2020 2020 2020 2020 2020 2020 2020 2020                     
    f269:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    f279:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    f289:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    f299:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    f2a9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    f2b9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    f2c9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000f34c <_init>:
    f34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f34e:	46c0      	nop			; (mov r8, r8)
    f350:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f352:	bc08      	pop	{r3}
    f354:	469e      	mov	lr, r3
    f356:	4770      	bx	lr

0000f358 <__init_array_start>:
    f358:	000000dd 	.word	0x000000dd

0000f35c <_fini>:
    f35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f35e:	46c0      	nop			; (mov r8, r8)
    f360:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f362:	bc08      	pop	{r3}
    f364:	469e      	mov	lr, r3
    f366:	4770      	bx	lr

0000f368 <__fini_array_start>:
    f368:	000000b5 	.word	0x000000b5
