
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f688  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000320  20000000  0000f688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000010d8  20000320  0000f9a8  00020320  2**2
                  ALLOC
  3 .stack        00002000  200013f8  00010a80  00020320  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020348  2**0
                  CONTENTS, READONLY
  6 .debug_info   0007ed1c  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000bef1  00000000  00000000  0009f0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000214d6  00000000  00000000  000aafae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001710  00000000  00000000  000cc484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002090  00000000  00000000  000cdb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00029812  00000000  00000000  000cfc24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00028ae7  00000000  00000000  000f9436  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a0504  00000000  00000000  00121f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004da8  00000000  00000000  001c2424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 33 00 20 11 68 00 00 0d 68 00 00 0d 68 00 00     .3. .h...h...h..
	...
      2c:	0d 68 00 00 00 00 00 00 00 00 00 00 0d 68 00 00     .h...........h..
      3c:	35 8e 00 00 0d 68 00 00 0d 68 00 00 0d 68 00 00     5....h...h...h..
      4c:	1d 49 00 00 9d 45 00 00 0d 68 00 00 0d 68 00 00     .I...E...h...h..
      5c:	0d 68 00 00 0d 68 00 00 45 4d 00 00 55 4d 00 00     .h...h..EM..UM..
      6c:	65 4d 00 00 75 4d 00 00 85 4d 00 00 95 4d 00 00     eM..uM...M...M..
      7c:	dd 67 00 00 ed 67 00 00 fd 67 00 00 0d 68 00 00     .g...g...g...h..
      8c:	0d 68 00 00 0d 68 00 00 00 00 00 00 00 00 00 00     .h...h..........
      9c:	0d 68 00 00 0d 68 00 00 0d 68 00 00 0d 68 00 00     .h...h...h...h..
      ac:	0d 68 00 00 00 00 00 00                             .h......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000320 	.word	0x20000320
      d4:	00000000 	.word	0x00000000
      d8:	0000f688 	.word	0x0000f688

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000324 	.word	0x20000324
     108:	0000f688 	.word	0x0000f688
     10c:	0000f688 	.word	0x0000f688
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b06      	ldr	r3, [pc, #24]	; (130 <sd_mmc_configure_slot+0x1c>)
     118:	6819      	ldr	r1, [r3, #0]
     11a:	7f8b      	ldrb	r3, [r1, #30]
     11c:	1e5a      	subs	r2, r3, #1
     11e:	4193      	sbcs	r3, r2
     120:	b2db      	uxtb	r3, r3
     122:	7b4a      	ldrb	r2, [r1, #13]
     124:	6809      	ldr	r1, [r1, #0]
     126:	4803      	ldr	r0, [pc, #12]	; (134 <sd_mmc_configure_slot+0x20>)
     128:	7800      	ldrb	r0, [r0, #0]
     12a:	4c03      	ldr	r4, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     12e:	bd10      	pop	{r4, pc}
     130:	2000033c 	.word	0x2000033c
     134:	20000364 	.word	0x20000364
     138:	00000dbd 	.word	0x00000dbd

0000013c <sd_mmc_select_slot>:
{
     13c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     13e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     140:	2800      	cmp	r0, #0
     142:	d001      	beq.n	148 <sd_mmc_select_slot+0xc>
}
     144:	0018      	movs	r0, r3
     146:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     148:	4b0e      	ldr	r3, [pc, #56]	; (184 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     14a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     14c:	3b03      	subs	r3, #3
     14e:	2b01      	cmp	r3, #1
     150:	d90d      	bls.n	16e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     152:	2200      	movs	r2, #0
     154:	4b0c      	ldr	r3, [pc, #48]	; (188 <sd_mmc_select_slot+0x4c>)
     156:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     158:	4c0a      	ldr	r4, [pc, #40]	; (184 <sd_mmc_select_slot+0x48>)
     15a:	4b0c      	ldr	r3, [pc, #48]	; (18c <sd_mmc_select_slot+0x50>)
     15c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     15e:	4b0c      	ldr	r3, [pc, #48]	; (190 <sd_mmc_select_slot+0x54>)
     160:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     162:	7aa3      	ldrb	r3, [r4, #10]
     164:	3b02      	subs	r3, #2
     166:	4258      	negs	r0, r3
     168:	4143      	adcs	r3, r0
     16a:	b2db      	uxtb	r3, r3
     16c:	e7ea      	b.n	144 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     16e:	4b05      	ldr	r3, [pc, #20]	; (184 <sd_mmc_select_slot+0x48>)
     170:	2202      	movs	r2, #2
     172:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     174:	4a07      	ldr	r2, [pc, #28]	; (194 <sd_mmc_select_slot+0x58>)
     176:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     178:	2201      	movs	r2, #1
     17a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     17c:	2200      	movs	r2, #0
     17e:	779a      	strb	r2, [r3, #30]
     180:	e7e7      	b.n	152 <sd_mmc_select_slot+0x16>
     182:	46c0      	nop			; (mov r8, r8)
     184:	20000340 	.word	0x20000340
     188:	20000364 	.word	0x20000364
     18c:	2000033c 	.word	0x2000033c
     190:	00000115 	.word	0x00000115
     194:	00061a80 	.word	0x00061a80

00000198 <sd_mmc_cmd13>:
{
     198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     19a:	4d09      	ldr	r5, [pc, #36]	; (1c0 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     19c:	4f09      	ldr	r7, [pc, #36]	; (1c4 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     19e:	4e0a      	ldr	r6, [pc, #40]	; (1c8 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     1a0:	2100      	movs	r1, #0
     1a2:	480a      	ldr	r0, [pc, #40]	; (1cc <sd_mmc_cmd13+0x34>)
     1a4:	47b8      	blx	r7
     1a6:	1e04      	subs	r4, r0, #0
     1a8:	d007      	beq.n	1ba <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     1aa:	47b0      	blx	r6
     1ac:	23ff      	movs	r3, #255	; 0xff
     1ae:	4203      	tst	r3, r0
     1b0:	d003      	beq.n	1ba <sd_mmc_cmd13+0x22>
     1b2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     1b4:	2d00      	cmp	r5, #0
     1b6:	d1f3      	bne.n	1a0 <sd_mmc_cmd13+0x8>
			return false;
     1b8:	2400      	movs	r4, #0
}
     1ba:	0020      	movs	r0, r4
     1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00030d41 	.word	0x00030d41
     1c4:	00001001 	.word	0x00001001
     1c8:	00001019 	.word	0x00001019
     1cc:	00001b0d 	.word	0x00001b0d

000001d0 <sd_mmc_cmd9_spi>:
{
     1d0:	b510      	push	{r4, lr}
     1d2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     1d4:	4b0c      	ldr	r3, [pc, #48]	; (208 <sd_mmc_cmd9_spi+0x38>)
     1d6:	681b      	ldr	r3, [r3, #0]
     1d8:	8919      	ldrh	r1, [r3, #8]
     1da:	0409      	lsls	r1, r1, #16
     1dc:	2301      	movs	r3, #1
     1de:	9300      	str	r3, [sp, #0]
     1e0:	2210      	movs	r2, #16
     1e2:	480a      	ldr	r0, [pc, #40]	; (20c <sd_mmc_cmd9_spi+0x3c>)
     1e4:	4c0a      	ldr	r4, [pc, #40]	; (210 <sd_mmc_cmd9_spi+0x40>)
     1e6:	47a0      	blx	r4
     1e8:	2800      	cmp	r0, #0
     1ea:	d101      	bne.n	1f0 <sd_mmc_cmd9_spi+0x20>
}
     1ec:	b002      	add	sp, #8
     1ee:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     1f0:	4b05      	ldr	r3, [pc, #20]	; (208 <sd_mmc_cmd9_spi+0x38>)
     1f2:	6818      	ldr	r0, [r3, #0]
     1f4:	300e      	adds	r0, #14
     1f6:	2101      	movs	r1, #1
     1f8:	4b06      	ldr	r3, [pc, #24]	; (214 <sd_mmc_cmd9_spi+0x44>)
     1fa:	4798      	blx	r3
     1fc:	2800      	cmp	r0, #0
     1fe:	d0f5      	beq.n	1ec <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     200:	4b05      	ldr	r3, [pc, #20]	; (218 <sd_mmc_cmd9_spi+0x48>)
     202:	4798      	blx	r3
     204:	e7f2      	b.n	1ec <sd_mmc_cmd9_spi+0x1c>
     206:	46c0      	nop			; (mov r8, r8)
     208:	2000033c 	.word	0x2000033c
     20c:	00081109 	.word	0x00081109
     210:	00000e71 	.word	0x00000e71
     214:	0000109d 	.word	0x0000109d
     218:	00001129 	.word	0x00001129

0000021c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     21c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     21e:	4b04      	ldr	r3, [pc, #16]	; (230 <sd_mmc_deselect_slot+0x14>)
     220:	781b      	ldrb	r3, [r3, #0]
     222:	2b00      	cmp	r3, #0
     224:	d000      	beq.n	228 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     226:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     228:	2000      	movs	r0, #0
     22a:	4b02      	ldr	r3, [pc, #8]	; (234 <sd_mmc_deselect_slot+0x18>)
     22c:	4798      	blx	r3
}
     22e:	e7fa      	b.n	226 <sd_mmc_deselect_slot+0xa>
     230:	20000364 	.word	0x20000364
     234:	00000e11 	.word	0x00000e11

00000238 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     238:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     23a:	2204      	movs	r2, #4
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <sd_mmc_init+0x14>)
     23e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     240:	32fb      	adds	r2, #251	; 0xfb
     242:	4b03      	ldr	r3, [pc, #12]	; (250 <sd_mmc_init+0x18>)
     244:	701a      	strb	r2, [r3, #0]
	driver_init();
     246:	4b03      	ldr	r3, [pc, #12]	; (254 <sd_mmc_init+0x1c>)
     248:	4798      	blx	r3
}
     24a:	bd10      	pop	{r4, pc}
     24c:	20000340 	.word	0x20000340
     250:	20000364 	.word	0x20000364
     254:	00000cbd 	.word	0x00000cbd

00000258 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	46c6      	mov	lr, r8
     25c:	b500      	push	{lr}
     25e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     260:	4bcb      	ldr	r3, [pc, #812]	; (590 <sd_mmc_check+0x338>)
     262:	4798      	blx	r3
     264:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     266:	2801      	cmp	r0, #1
     268:	d006      	beq.n	278 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     26a:	4bca      	ldr	r3, [pc, #808]	; (594 <sd_mmc_check+0x33c>)
     26c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     26e:	0020      	movs	r0, r4
     270:	b008      	add	sp, #32
     272:	bc04      	pop	{r2}
     274:	4690      	mov	r8, r2
     276:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     278:	4bc7      	ldr	r3, [pc, #796]	; (598 <sd_mmc_check+0x340>)
     27a:	681b      	ldr	r3, [r3, #0]
     27c:	2201      	movs	r2, #1
     27e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     280:	2200      	movs	r2, #0
     282:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     284:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     286:	4bc5      	ldr	r3, [pc, #788]	; (59c <sd_mmc_check+0x344>)
     288:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     28a:	2100      	movs	r1, #0
     28c:	2088      	movs	r0, #136	; 0x88
     28e:	0140      	lsls	r0, r0, #5
     290:	4bc3      	ldr	r3, [pc, #780]	; (5a0 <sd_mmc_check+0x348>)
     292:	4798      	blx	r3
     294:	2800      	cmp	r0, #0
     296:	d107      	bne.n	2a8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     298:	4bbf      	ldr	r3, [pc, #764]	; (598 <sd_mmc_check+0x340>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	2203      	movs	r2, #3
     29e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     2a0:	4bbc      	ldr	r3, [pc, #752]	; (594 <sd_mmc_check+0x33c>)
     2a2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     2a4:	2403      	movs	r4, #3
     2a6:	e7e2      	b.n	26e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     2a8:	21d5      	movs	r1, #213	; 0xd5
     2aa:	0049      	lsls	r1, r1, #1
     2ac:	48bd      	ldr	r0, [pc, #756]	; (5a4 <sd_mmc_check+0x34c>)
     2ae:	4bbc      	ldr	r3, [pc, #752]	; (5a0 <sd_mmc_check+0x348>)
     2b0:	4798      	blx	r3
	*v2 = 0;
     2b2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     2b4:	2800      	cmp	r0, #0
     2b6:	d125      	bne.n	304 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     2b8:	4bb7      	ldr	r3, [pc, #732]	; (598 <sd_mmc_check+0x340>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	7adb      	ldrb	r3, [r3, #11]
     2be:	07db      	lsls	r3, r3, #31
     2c0:	d500      	bpl.n	2c4 <sd_mmc_check+0x6c>
     2c2:	e1eb      	b.n	69c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     2c4:	4bb4      	ldr	r3, [pc, #720]	; (598 <sd_mmc_check+0x340>)
     2c6:	681b      	ldr	r3, [r3, #0]
     2c8:	7ada      	ldrb	r2, [r3, #11]
     2ca:	2309      	movs	r3, #9
     2cc:	4013      	ands	r3, r2
     2ce:	2b01      	cmp	r3, #1
     2d0:	d10f      	bne.n	2f2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     2d2:	2180      	movs	r1, #128	; 0x80
     2d4:	0089      	lsls	r1, r1, #2
     2d6:	48b4      	ldr	r0, [pc, #720]	; (5a8 <sd_mmc_check+0x350>)
     2d8:	4bb1      	ldr	r3, [pc, #708]	; (5a0 <sd_mmc_check+0x348>)
     2da:	4798      	blx	r3
     2dc:	2800      	cmp	r0, #0
     2de:	d0db      	beq.n	298 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     2e0:	4bad      	ldr	r3, [pc, #692]	; (598 <sd_mmc_check+0x340>)
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	7adb      	ldrb	r3, [r3, #11]
     2e6:	07db      	lsls	r3, r3, #31
     2e8:	d503      	bpl.n	2f2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     2ea:	4bb0      	ldr	r3, [pc, #704]	; (5ac <sd_mmc_check+0x354>)
     2ec:	4798      	blx	r3
     2ee:	2800      	cmp	r0, #0
     2f0:	d0d2      	beq.n	298 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     2f2:	4baf      	ldr	r3, [pc, #700]	; (5b0 <sd_mmc_check+0x358>)
     2f4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     2f6:	4ba8      	ldr	r3, [pc, #672]	; (598 <sd_mmc_check+0x340>)
     2f8:	681b      	ldr	r3, [r3, #0]
     2fa:	2200      	movs	r2, #0
     2fc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     2fe:	4ba5      	ldr	r3, [pc, #660]	; (594 <sd_mmc_check+0x33c>)
     300:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     302:	e7b4      	b.n	26e <sd_mmc_check+0x16>
	resp = driver_get_response();
     304:	4bab      	ldr	r3, [pc, #684]	; (5b4 <sd_mmc_check+0x35c>)
     306:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     308:	1c43      	adds	r3, r0, #1
     30a:	d100      	bne.n	30e <sd_mmc_check+0xb6>
     30c:	e1c4      	b.n	698 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     30e:	0500      	lsls	r0, r0, #20
     310:	0d00      	lsrs	r0, r0, #20
     312:	23d5      	movs	r3, #213	; 0xd5
     314:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     316:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     318:	4298      	cmp	r0, r3
     31a:	d1bd      	bne.n	298 <sd_mmc_check+0x40>
     31c:	e7cc      	b.n	2b8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     31e:	2100      	movs	r1, #0
     320:	48a5      	ldr	r0, [pc, #660]	; (5b8 <sd_mmc_check+0x360>)
     322:	4b9f      	ldr	r3, [pc, #636]	; (5a0 <sd_mmc_check+0x348>)
     324:	4798      	blx	r3
     326:	2800      	cmp	r0, #0
     328:	d119      	bne.n	35e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     32a:	4b9b      	ldr	r3, [pc, #620]	; (598 <sd_mmc_check+0x340>)
     32c:	681b      	ldr	r3, [r3, #0]
     32e:	2202      	movs	r2, #2
     330:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     332:	2100      	movs	r1, #0
     334:	2088      	movs	r0, #136	; 0x88
     336:	0140      	lsls	r0, r0, #5
     338:	4b99      	ldr	r3, [pc, #612]	; (5a0 <sd_mmc_check+0x348>)
     33a:	4798      	blx	r3
     33c:	2800      	cmp	r0, #0
     33e:	d0ab      	beq.n	298 <sd_mmc_check+0x40>
     340:	4d9e      	ldr	r5, [pc, #632]	; (5bc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     342:	4f97      	ldr	r7, [pc, #604]	; (5a0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     344:	4e9b      	ldr	r6, [pc, #620]	; (5b4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     346:	2100      	movs	r1, #0
     348:	489d      	ldr	r0, [pc, #628]	; (5c0 <sd_mmc_check+0x368>)
     34a:	47b8      	blx	r7
     34c:	2800      	cmp	r0, #0
     34e:	d0a3      	beq.n	298 <sd_mmc_check+0x40>
		resp = driver_get_response();
     350:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     352:	07c3      	lsls	r3, r0, #31
     354:	d57d      	bpl.n	452 <sd_mmc_check+0x1fa>
     356:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     358:	2d00      	cmp	r5, #0
     35a:	d1f4      	bne.n	346 <sd_mmc_check+0xee>
     35c:	e79c      	b.n	298 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     35e:	4b95      	ldr	r3, [pc, #596]	; (5b4 <sd_mmc_check+0x35c>)
     360:	4798      	blx	r3
     362:	0043      	lsls	r3, r0, #1
     364:	d505      	bpl.n	372 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     366:	4b8c      	ldr	r3, [pc, #560]	; (598 <sd_mmc_check+0x340>)
     368:	681a      	ldr	r2, [r3, #0]
     36a:	7ad3      	ldrb	r3, [r2, #11]
     36c:	2108      	movs	r1, #8
     36e:	430b      	orrs	r3, r1
     370:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     372:	2100      	movs	r1, #0
     374:	4893      	ldr	r0, [pc, #588]	; (5c4 <sd_mmc_check+0x36c>)
     376:	4b8a      	ldr	r3, [pc, #552]	; (5a0 <sd_mmc_check+0x348>)
     378:	4798      	blx	r3
     37a:	2800      	cmp	r0, #0
     37c:	d08c      	beq.n	298 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     37e:	4b86      	ldr	r3, [pc, #536]	; (598 <sd_mmc_check+0x340>)
     380:	681b      	ldr	r3, [r3, #0]
     382:	7adb      	ldrb	r3, [r3, #11]
     384:	07da      	lsls	r2, r3, #31
     386:	d400      	bmi.n	38a <sd_mmc_check+0x132>
     388:	e1a4      	b.n	6d4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     38a:	4b8f      	ldr	r3, [pc, #572]	; (5c8 <sd_mmc_check+0x370>)
     38c:	4798      	blx	r3
     38e:	2800      	cmp	r0, #0
     390:	d082      	beq.n	298 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     392:	4b81      	ldr	r3, [pc, #516]	; (598 <sd_mmc_check+0x340>)
     394:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     396:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     398:	2107      	movs	r1, #7
     39a:	4019      	ands	r1, r3
     39c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     39e:	488b      	ldr	r0, [pc, #556]	; (5cc <sd_mmc_check+0x374>)
     3a0:	5808      	ldr	r0, [r1, r0]
     3a2:	21fa      	movs	r1, #250	; 0xfa
     3a4:	0089      	lsls	r1, r1, #2
     3a6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     3a8:	065b      	lsls	r3, r3, #25
     3aa:	0f1b      	lsrs	r3, r3, #28
     3ac:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     3ae:	4888      	ldr	r0, [pc, #544]	; (5d0 <sd_mmc_check+0x378>)
     3b0:	581b      	ldr	r3, [r3, r0]
     3b2:	434b      	muls	r3, r1
     3b4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     3b6:	7b93      	ldrb	r3, [r2, #14]
     3b8:	099b      	lsrs	r3, r3, #6
     3ba:	d000      	beq.n	3be <sd_mmc_check+0x166>
     3bc:	e13c      	b.n	638 <sd_mmc_check+0x3e0>
     3be:	7d91      	ldrb	r1, [r2, #22]
     3c0:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     3c2:	7d53      	ldrb	r3, [r2, #21]
     3c4:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3c6:	7d10      	ldrb	r0, [r2, #20]
     3c8:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3ca:	4303      	orrs	r3, r0
     3cc:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     3ce:	7e10      	ldrb	r0, [r2, #24]
     3d0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     3d2:	7dd1      	ldrb	r1, [r2, #23]
     3d4:	0049      	lsls	r1, r1, #1
     3d6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     3d8:	051b      	lsls	r3, r3, #20
     3da:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     3dc:	3301      	adds	r3, #1
     3de:	2107      	movs	r1, #7
     3e0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     3e2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     3e4:	408b      	lsls	r3, r1
     3e6:	7cd0      	ldrb	r0, [r2, #19]
     3e8:	210f      	movs	r1, #15
     3ea:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     3ec:	408b      	lsls	r3, r1
				/ 1024;
     3ee:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     3f0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     3f2:	8911      	ldrh	r1, [r2, #8]
     3f4:	0409      	lsls	r1, r1, #16
     3f6:	4877      	ldr	r0, [pc, #476]	; (5d4 <sd_mmc_check+0x37c>)
     3f8:	4b69      	ldr	r3, [pc, #420]	; (5a0 <sd_mmc_check+0x348>)
     3fa:	4798      	blx	r3
     3fc:	2800      	cmp	r0, #0
     3fe:	d100      	bne.n	402 <sd_mmc_check+0x1aa>
     400:	e74a      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     402:	2301      	movs	r3, #1
     404:	9300      	str	r3, [sp, #0]
     406:	2208      	movs	r2, #8
     408:	2100      	movs	r1, #0
     40a:	4873      	ldr	r0, [pc, #460]	; (5d8 <sd_mmc_check+0x380>)
     40c:	4d73      	ldr	r5, [pc, #460]	; (5dc <sd_mmc_check+0x384>)
     40e:	47a8      	blx	r5
     410:	2800      	cmp	r0, #0
     412:	d100      	bne.n	416 <sd_mmc_check+0x1be>
     414:	e740      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     416:	2101      	movs	r1, #1
     418:	a806      	add	r0, sp, #24
     41a:	4b71      	ldr	r3, [pc, #452]	; (5e0 <sd_mmc_check+0x388>)
     41c:	4798      	blx	r3
     41e:	2800      	cmp	r0, #0
     420:	d100      	bne.n	424 <sd_mmc_check+0x1cc>
     422:	e739      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     424:	4b6f      	ldr	r3, [pc, #444]	; (5e4 <sd_mmc_check+0x38c>)
     426:	4798      	blx	r3
     428:	2800      	cmp	r0, #0
     42a:	d100      	bne.n	42e <sd_mmc_check+0x1d6>
     42c:	e734      	b.n	298 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     42e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     430:	781b      	ldrb	r3, [r3, #0]
     432:	220f      	movs	r2, #15
     434:	4013      	ands	r3, r2
     436:	2b01      	cmp	r3, #1
     438:	d100      	bne.n	43c <sd_mmc_check+0x1e4>
     43a:	e119      	b.n	670 <sd_mmc_check+0x418>
     43c:	2b00      	cmp	r3, #0
     43e:	d100      	bne.n	442 <sd_mmc_check+0x1ea>
     440:	e109      	b.n	656 <sd_mmc_check+0x3fe>
     442:	2b02      	cmp	r3, #2
     444:	d100      	bne.n	448 <sd_mmc_check+0x1f0>
     446:	e118      	b.n	67a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     448:	4b53      	ldr	r3, [pc, #332]	; (598 <sd_mmc_check+0x340>)
     44a:	681b      	ldr	r3, [r3, #0]
     44c:	2210      	movs	r2, #16
     44e:	731a      	strb	r2, [r3, #12]
     450:	e105      	b.n	65e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     452:	2100      	movs	r1, #0
     454:	4858      	ldr	r0, [pc, #352]	; (5b8 <sd_mmc_check+0x360>)
     456:	4b52      	ldr	r3, [pc, #328]	; (5a0 <sd_mmc_check+0x348>)
     458:	4798      	blx	r3
     45a:	2800      	cmp	r0, #0
     45c:	d100      	bne.n	460 <sd_mmc_check+0x208>
     45e:	e71b      	b.n	298 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     460:	4b54      	ldr	r3, [pc, #336]	; (5b4 <sd_mmc_check+0x35c>)
     462:	4798      	blx	r3
     464:	23c0      	movs	r3, #192	; 0xc0
     466:	05db      	lsls	r3, r3, #23
     468:	4018      	ands	r0, r3
     46a:	2380      	movs	r3, #128	; 0x80
     46c:	05db      	lsls	r3, r3, #23
     46e:	4298      	cmp	r0, r3
     470:	d105      	bne.n	47e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     472:	4b49      	ldr	r3, [pc, #292]	; (598 <sd_mmc_check+0x340>)
     474:	681a      	ldr	r2, [r3, #0]
     476:	7ad1      	ldrb	r1, [r2, #11]
     478:	2308      	movs	r3, #8
     47a:	430b      	orrs	r3, r1
     47c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     47e:	2100      	movs	r1, #0
     480:	4850      	ldr	r0, [pc, #320]	; (5c4 <sd_mmc_check+0x36c>)
     482:	4b47      	ldr	r3, [pc, #284]	; (5a0 <sd_mmc_check+0x348>)
     484:	4798      	blx	r3
     486:	2800      	cmp	r0, #0
     488:	d100      	bne.n	48c <sd_mmc_check+0x234>
     48a:	e705      	b.n	298 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     48c:	4b4e      	ldr	r3, [pc, #312]	; (5c8 <sd_mmc_check+0x370>)
     48e:	4798      	blx	r3
     490:	2800      	cmp	r0, #0
     492:	d100      	bne.n	496 <sd_mmc_check+0x23e>
     494:	e700      	b.n	298 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     496:	4b40      	ldr	r3, [pc, #256]	; (598 <sd_mmc_check+0x340>)
     498:	681a      	ldr	r2, [r3, #0]
     49a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     49c:	069b      	lsls	r3, r3, #26
     49e:	0f1b      	lsrs	r3, r3, #28
     4a0:	2b02      	cmp	r3, #2
     4a2:	d100      	bne.n	4a6 <sd_mmc_check+0x24e>
     4a4:	e0a8      	b.n	5f8 <sd_mmc_check+0x3a0>
     4a6:	d907      	bls.n	4b8 <sd_mmc_check+0x260>
     4a8:	2b03      	cmp	r3, #3
     4aa:	d100      	bne.n	4ae <sd_mmc_check+0x256>
     4ac:	e0a7      	b.n	5fe <sd_mmc_check+0x3a6>
     4ae:	2b04      	cmp	r3, #4
     4b0:	d104      	bne.n	4bc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     4b2:	2340      	movs	r3, #64	; 0x40
     4b4:	7313      	strb	r3, [r2, #12]
     4b6:	e003      	b.n	4c0 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     4b8:	2b01      	cmp	r3, #1
     4ba:	d066      	beq.n	58a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     4bc:	2312      	movs	r3, #18
     4be:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4c0:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     4c2:	0659      	lsls	r1, r3, #25
     4c4:	0f09      	lsrs	r1, r1, #28
     4c6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     4c8:	2007      	movs	r0, #7
     4ca:	4003      	ands	r3, r0
     4cc:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     4ce:	483f      	ldr	r0, [pc, #252]	; (5cc <sd_mmc_check+0x374>)
     4d0:	5818      	ldr	r0, [r3, r0]
     4d2:	23fa      	movs	r3, #250	; 0xfa
     4d4:	009b      	lsls	r3, r3, #2
     4d6:	4343      	muls	r3, r0
     4d8:	4843      	ldr	r0, [pc, #268]	; (5e8 <sd_mmc_check+0x390>)
     4da:	5809      	ldr	r1, [r1, r0]
     4dc:	434b      	muls	r3, r1
     4de:	6013      	str	r3, [r2, #0]
     4e0:	7d91      	ldrb	r1, [r2, #22]
     4e2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4e4:	7d53      	ldrb	r3, [r2, #21]
     4e6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4e8:	7d10      	ldrb	r0, [r2, #20]
     4ea:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4ec:	4303      	orrs	r3, r0
     4ee:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     4f0:	051b      	lsls	r3, r3, #20
     4f2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     4f4:	493d      	ldr	r1, [pc, #244]	; (5ec <sd_mmc_check+0x394>)
     4f6:	428b      	cmp	r3, r1
     4f8:	d00f      	beq.n	51a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4fa:	7e10      	ldrb	r0, [r2, #24]
     4fc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4fe:	7dd1      	ldrb	r1, [r2, #23]
     500:	0049      	lsls	r1, r1, #1
     502:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     504:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     506:	2007      	movs	r0, #7
     508:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     50a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     50c:	408b      	lsls	r3, r1
     50e:	7cd1      	ldrb	r1, [r2, #19]
     510:	3008      	adds	r0, #8
     512:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     514:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     516:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     518:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     51a:	7b13      	ldrb	r3, [r2, #12]
     51c:	2b3f      	cmp	r3, #63	; 0x3f
     51e:	d97b      	bls.n	618 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     520:	2100      	movs	r1, #0
     522:	9100      	str	r1, [sp, #0]
     524:	2301      	movs	r3, #1
     526:	2280      	movs	r2, #128	; 0x80
     528:	0092      	lsls	r2, r2, #2
     52a:	4831      	ldr	r0, [pc, #196]	; (5f0 <sd_mmc_check+0x398>)
     52c:	4d2b      	ldr	r5, [pc, #172]	; (5dc <sd_mmc_check+0x384>)
     52e:	47a8      	blx	r5
     530:	2800      	cmp	r0, #0
     532:	d100      	bne.n	536 <sd_mmc_check+0x2de>
     534:	e6b0      	b.n	298 <sd_mmc_check+0x40>
     536:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     538:	4e2e      	ldr	r6, [pc, #184]	; (5f4 <sd_mmc_check+0x39c>)
     53a:	a805      	add	r0, sp, #20
     53c:	47b0      	blx	r6
     53e:	2800      	cmp	r0, #0
     540:	d100      	bne.n	544 <sd_mmc_check+0x2ec>
     542:	e6a9      	b.n	298 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     544:	3501      	adds	r5, #1
     546:	b2ad      	uxth	r5, r5
     548:	2d32      	cmp	r5, #50	; 0x32
     54a:	d1f6      	bne.n	53a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     54c:	4b12      	ldr	r3, [pc, #72]	; (598 <sd_mmc_check+0x340>)
     54e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     550:	7d8a      	ldrb	r2, [r1, #22]
     552:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     554:	7d4b      	ldrb	r3, [r1, #21]
     556:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     558:	7d09      	ldrb	r1, [r1, #20]
     55a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     55c:	430b      	orrs	r3, r1
     55e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     560:	051b      	lsls	r3, r3, #20
     562:	0d1b      	lsrs	r3, r3, #20
     564:	4a21      	ldr	r2, [pc, #132]	; (5ec <sd_mmc_check+0x394>)
     566:	4293      	cmp	r3, r2
     568:	d154      	bne.n	614 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     56a:	4e22      	ldr	r6, [pc, #136]	; (5f4 <sd_mmc_check+0x39c>)
     56c:	a806      	add	r0, sp, #24
     56e:	47b0      	blx	r6
     570:	2800      	cmp	r0, #0
     572:	d100      	bne.n	576 <sd_mmc_check+0x31e>
     574:	e690      	b.n	298 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     576:	3501      	adds	r5, #1
     578:	b2ad      	uxth	r5, r5
     57a:	2d35      	cmp	r5, #53	; 0x35
     57c:	d9f6      	bls.n	56c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     57e:	4b06      	ldr	r3, [pc, #24]	; (598 <sd_mmc_check+0x340>)
     580:	681a      	ldr	r2, [r3, #0]
     582:	9b06      	ldr	r3, [sp, #24]
     584:	085b      	lsrs	r3, r3, #1
     586:	6053      	str	r3, [r2, #4]
     588:	e044      	b.n	614 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     58a:	2314      	movs	r3, #20
     58c:	7313      	strb	r3, [r2, #12]
     58e:	e797      	b.n	4c0 <sd_mmc_check+0x268>
     590:	0000013d 	.word	0x0000013d
     594:	0000021d 	.word	0x0000021d
     598:	2000033c 	.word	0x2000033c
     59c:	00000e39 	.word	0x00000e39
     5a0:	00001001 	.word	0x00001001
     5a4:	00005508 	.word	0x00005508
     5a8:	00001110 	.word	0x00001110
     5ac:	00000199 	.word	0x00000199
     5b0:	00000115 	.word	0x00000115
     5b4:	00001019 	.word	0x00001019
     5b8:	0000053a 	.word	0x0000053a
     5bc:	00001bef 	.word	0x00001bef
     5c0:	00001101 	.word	0x00001101
     5c4:	0000113b 	.word	0x0000113b
     5c8:	000001d1 	.word	0x000001d1
     5cc:	0000d4e4 	.word	0x0000d4e4
     5d0:	0000d500 	.word	0x0000d500
     5d4:	00001137 	.word	0x00001137
     5d8:	00081133 	.word	0x00081133
     5dc:	00000e71 	.word	0x00000e71
     5e0:	0000109d 	.word	0x0000109d
     5e4:	00001129 	.word	0x00001129
     5e8:	0000d4a4 	.word	0x0000d4a4
     5ec:	00000fff 	.word	0x00000fff
     5f0:	00081108 	.word	0x00081108
     5f4:	00001025 	.word	0x00001025
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     5f8:	2322      	movs	r3, #34	; 0x22
     5fa:	7313      	strb	r3, [r2, #12]
     5fc:	e760      	b.n	4c0 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     5fe:	2330      	movs	r3, #48	; 0x30
     600:	7313      	strb	r3, [r2, #12]
     602:	e75d      	b.n	4c0 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     604:	a806      	add	r0, sp, #24
     606:	4b36      	ldr	r3, [pc, #216]	; (6e0 <sd_mmc_check+0x488>)
     608:	4798      	blx	r3
     60a:	2800      	cmp	r0, #0
     60c:	d100      	bne.n	610 <sd_mmc_check+0x3b8>
     60e:	e643      	b.n	298 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     610:	3501      	adds	r5, #1
     612:	b2ad      	uxth	r5, r5
     614:	2d7f      	cmp	r5, #127	; 0x7f
     616:	d9f5      	bls.n	604 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     618:	2180      	movs	r1, #128	; 0x80
     61a:	0089      	lsls	r1, r1, #2
     61c:	4831      	ldr	r0, [pc, #196]	; (6e4 <sd_mmc_check+0x48c>)
     61e:	4b32      	ldr	r3, [pc, #200]	; (6e8 <sd_mmc_check+0x490>)
     620:	4798      	blx	r3
     622:	2800      	cmp	r0, #0
     624:	d100      	bne.n	628 <sd_mmc_check+0x3d0>
     626:	e637      	b.n	298 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     628:	4b30      	ldr	r3, [pc, #192]	; (6ec <sd_mmc_check+0x494>)
     62a:	4798      	blx	r3
     62c:	2800      	cmp	r0, #0
     62e:	d100      	bne.n	632 <sd_mmc_check+0x3da>
     630:	e632      	b.n	298 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     632:	4b2f      	ldr	r3, [pc, #188]	; (6f0 <sd_mmc_check+0x498>)
     634:	4798      	blx	r3
     636:	e65e      	b.n	2f6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     638:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     63a:	7d93      	ldrb	r3, [r2, #22]
     63c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     63e:	7d51      	ldrb	r1, [r2, #21]
     640:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     642:	430b      	orrs	r3, r1
     644:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     646:	029b      	lsls	r3, r3, #10
				* 512;
     648:	085b      	lsrs	r3, r3, #1
     64a:	2180      	movs	r1, #128	; 0x80
     64c:	0089      	lsls	r1, r1, #2
     64e:	468c      	mov	ip, r1
     650:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     652:	6053      	str	r3, [r2, #4]
     654:	e6cd      	b.n	3f2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     656:	4b27      	ldr	r3, [pc, #156]	; (6f4 <sd_mmc_check+0x49c>)
     658:	681b      	ldr	r3, [r3, #0]
     65a:	2210      	movs	r2, #16
     65c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     65e:	4b25      	ldr	r3, [pc, #148]	; (6f4 <sd_mmc_check+0x49c>)
     660:	681b      	ldr	r3, [r3, #0]
     662:	7adb      	ldrb	r3, [r3, #11]
     664:	2209      	movs	r2, #9
     666:	4013      	ands	r3, r2
     668:	2b01      	cmp	r3, #1
     66a:	d000      	beq.n	66e <sd_mmc_check+0x416>
     66c:	e638      	b.n	2e0 <sd_mmc_check+0x88>
     66e:	e630      	b.n	2d2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     670:	4b20      	ldr	r3, [pc, #128]	; (6f4 <sd_mmc_check+0x49c>)
     672:	681b      	ldr	r3, [r3, #0]
     674:	221a      	movs	r2, #26
     676:	731a      	strb	r2, [r3, #12]
     678:	e7f1      	b.n	65e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     67a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     67c:	789b      	ldrb	r3, [r3, #2]
     67e:	09db      	lsrs	r3, r3, #7
     680:	2b01      	cmp	r3, #1
     682:	d104      	bne.n	68e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     684:	4b1b      	ldr	r3, [pc, #108]	; (6f4 <sd_mmc_check+0x49c>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	2230      	movs	r2, #48	; 0x30
     68a:	731a      	strb	r2, [r3, #12]
     68c:	e7e7      	b.n	65e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     68e:	4b19      	ldr	r3, [pc, #100]	; (6f4 <sd_mmc_check+0x49c>)
     690:	681b      	ldr	r3, [r3, #0]
     692:	2220      	movs	r2, #32
     694:	731a      	strb	r2, [r3, #12]
     696:	e7e2      	b.n	65e <sd_mmc_check+0x406>
	*v2 = 0;
     698:	2600      	movs	r6, #0
     69a:	e60d      	b.n	2b8 <sd_mmc_check+0x60>
     69c:	1e73      	subs	r3, r6, #1
     69e:	419e      	sbcs	r6, r3
     6a0:	07b3      	lsls	r3, r6, #30
     6a2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     6a4:	4d14      	ldr	r5, [pc, #80]	; (6f8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     6a6:	4f10      	ldr	r7, [pc, #64]	; (6e8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     6a8:	46b8      	mov	r8, r7
		resp = driver_get_response();
     6aa:	4e14      	ldr	r6, [pc, #80]	; (6fc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     6ac:	2100      	movs	r1, #0
     6ae:	4814      	ldr	r0, [pc, #80]	; (700 <sd_mmc_check+0x4a8>)
     6b0:	47b8      	blx	r7
     6b2:	2800      	cmp	r0, #0
     6b4:	d100      	bne.n	6b8 <sd_mmc_check+0x460>
     6b6:	e638      	b.n	32a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     6b8:	9903      	ldr	r1, [sp, #12]
     6ba:	4812      	ldr	r0, [pc, #72]	; (704 <sd_mmc_check+0x4ac>)
     6bc:	47c0      	blx	r8
     6be:	2800      	cmp	r0, #0
     6c0:	d100      	bne.n	6c4 <sd_mmc_check+0x46c>
     6c2:	e632      	b.n	32a <sd_mmc_check+0xd2>
		resp = driver_get_response();
     6c4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     6c6:	07c3      	lsls	r3, r0, #31
     6c8:	d400      	bmi.n	6cc <sd_mmc_check+0x474>
     6ca:	e628      	b.n	31e <sd_mmc_check+0xc6>
     6cc:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     6ce:	2d00      	cmp	r5, #0
     6d0:	d1ec      	bne.n	6ac <sd_mmc_check+0x454>
     6d2:	e62a      	b.n	32a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     6d4:	2209      	movs	r2, #9
     6d6:	4013      	ands	r3, r2
     6d8:	2b01      	cmp	r3, #1
     6da:	d000      	beq.n	6de <sd_mmc_check+0x486>
     6dc:	e609      	b.n	2f2 <sd_mmc_check+0x9a>
     6de:	e5f8      	b.n	2d2 <sd_mmc_check+0x7a>
     6e0:	00001025 	.word	0x00001025
     6e4:	00001110 	.word	0x00001110
     6e8:	00001001 	.word	0x00001001
     6ec:	00000199 	.word	0x00000199
     6f0:	00000115 	.word	0x00000115
     6f4:	2000033c 	.word	0x2000033c
     6f8:	00001bef 	.word	0x00001bef
     6fc:	00001019 	.word	0x00001019
     700:	00001137 	.word	0x00001137
     704:	00001129 	.word	0x00001129

00000708 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     708:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     70a:	4b06      	ldr	r3, [pc, #24]	; (724 <sd_mmc_get_type+0x1c>)
     70c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     70e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     710:	2800      	cmp	r0, #0
     712:	d001      	beq.n	718 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     714:	0018      	movs	r0, r3
     716:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     718:	4b03      	ldr	r3, [pc, #12]	; (728 <sd_mmc_get_type+0x20>)
     71a:	4798      	blx	r3
	return sd_mmc_card->type;
     71c:	4b03      	ldr	r3, [pc, #12]	; (72c <sd_mmc_get_type+0x24>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	7adb      	ldrb	r3, [r3, #11]
     722:	e7f7      	b.n	714 <sd_mmc_get_type+0xc>
     724:	0000013d 	.word	0x0000013d
     728:	0000021d 	.word	0x0000021d
     72c:	2000033c 	.word	0x2000033c

00000730 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     730:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     732:	4b06      	ldr	r3, [pc, #24]	; (74c <sd_mmc_get_capacity+0x1c>)
     734:	4798      	blx	r3
		return 0;
     736:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     738:	2800      	cmp	r0, #0
     73a:	d001      	beq.n	740 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     73c:	0018      	movs	r0, r3
     73e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     740:	4b03      	ldr	r3, [pc, #12]	; (750 <sd_mmc_get_capacity+0x20>)
     742:	4798      	blx	r3
	return sd_mmc_card->capacity;
     744:	4b03      	ldr	r3, [pc, #12]	; (754 <sd_mmc_get_capacity+0x24>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	685b      	ldr	r3, [r3, #4]
     74a:	e7f7      	b.n	73c <sd_mmc_get_capacity+0xc>
     74c:	0000013d 	.word	0x0000013d
     750:	0000021d 	.word	0x0000021d
     754:	2000033c 	.word	0x2000033c

00000758 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     758:	2000      	movs	r0, #0
     75a:	4770      	bx	lr

0000075c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     75c:	b570      	push	{r4, r5, r6, lr}
     75e:	b082      	sub	sp, #8
     760:	000e      	movs	r6, r1
     762:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     764:	4b16      	ldr	r3, [pc, #88]	; (7c0 <sd_mmc_init_read_blocks+0x64>)
     766:	4798      	blx	r3
     768:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     76a:	d002      	beq.n	772 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     76c:	0020      	movs	r0, r4
     76e:	b002      	add	sp, #8
     770:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     772:	4b14      	ldr	r3, [pc, #80]	; (7c4 <sd_mmc_init_read_blocks+0x68>)
     774:	4798      	blx	r3
     776:	2800      	cmp	r0, #0
     778:	d017      	beq.n	7aa <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     77a:	2d01      	cmp	r5, #1
     77c:	d919      	bls.n	7b2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     77e:	4812      	ldr	r0, [pc, #72]	; (7c8 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     780:	4b12      	ldr	r3, [pc, #72]	; (7cc <sd_mmc_init_read_blocks+0x70>)
     782:	681b      	ldr	r3, [r3, #0]
     784:	7adb      	ldrb	r3, [r3, #11]
     786:	071b      	lsls	r3, r3, #28
     788:	d400      	bmi.n	78c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     78a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     78c:	2301      	movs	r3, #1
     78e:	9300      	str	r3, [sp, #0]
     790:	002b      	movs	r3, r5
     792:	2280      	movs	r2, #128	; 0x80
     794:	0092      	lsls	r2, r2, #2
     796:	0031      	movs	r1, r6
     798:	4e0d      	ldr	r6, [pc, #52]	; (7d0 <sd_mmc_init_read_blocks+0x74>)
     79a:	47b0      	blx	r6
     79c:	2800      	cmp	r0, #0
     79e:	d00a      	beq.n	7b6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     7a0:	4b0c      	ldr	r3, [pc, #48]	; (7d4 <sd_mmc_init_read_blocks+0x78>)
     7a2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     7a4:	4b0c      	ldr	r3, [pc, #48]	; (7d8 <sd_mmc_init_read_blocks+0x7c>)
     7a6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     7a8:	e7e0      	b.n	76c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     7aa:	4b0c      	ldr	r3, [pc, #48]	; (7dc <sd_mmc_init_read_blocks+0x80>)
     7ac:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     7ae:	3405      	adds	r4, #5
     7b0:	e7dc      	b.n	76c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     7b2:	480b      	ldr	r0, [pc, #44]	; (7e0 <sd_mmc_init_read_blocks+0x84>)
     7b4:	e7e4      	b.n	780 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     7b6:	4b09      	ldr	r3, [pc, #36]	; (7dc <sd_mmc_init_read_blocks+0x80>)
     7b8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     7ba:	2405      	movs	r4, #5
     7bc:	e7d6      	b.n	76c <sd_mmc_init_read_blocks+0x10>
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	0000013d 	.word	0x0000013d
     7c4:	00000199 	.word	0x00000199
     7c8:	00101112 	.word	0x00101112
     7cc:	2000033c 	.word	0x2000033c
     7d0:	00000e71 	.word	0x00000e71
     7d4:	20000360 	.word	0x20000360
     7d8:	20000362 	.word	0x20000362
     7dc:	0000021d 	.word	0x0000021d
     7e0:	00081111 	.word	0x00081111

000007e4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     7e4:	b510      	push	{r4, lr}
     7e6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     7e8:	4b07      	ldr	r3, [pc, #28]	; (808 <sd_mmc_start_read_blocks+0x24>)
     7ea:	4798      	blx	r3
     7ec:	2800      	cmp	r0, #0
     7ee:	d104      	bne.n	7fa <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     7f0:	2200      	movs	r2, #0
     7f2:	4b06      	ldr	r3, [pc, #24]	; (80c <sd_mmc_start_read_blocks+0x28>)
     7f4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     7f6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     7f8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     7fa:	4a04      	ldr	r2, [pc, #16]	; (80c <sd_mmc_start_read_blocks+0x28>)
     7fc:	8813      	ldrh	r3, [r2, #0]
     7fe:	1b1c      	subs	r4, r3, r4
     800:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     802:	2000      	movs	r0, #0
     804:	e7f8      	b.n	7f8 <sd_mmc_start_read_blocks+0x14>
     806:	46c0      	nop			; (mov r8, r8)
     808:	0000109d 	.word	0x0000109d
     80c:	20000360 	.word	0x20000360

00000810 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     810:	b510      	push	{r4, lr}
     812:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     814:	4b14      	ldr	r3, [pc, #80]	; (868 <sd_mmc_wait_end_of_read_blocks+0x58>)
     816:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     818:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     81a:	2800      	cmp	r0, #0
     81c:	d101      	bne.n	822 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     81e:	0018      	movs	r0, r3
     820:	bd10      	pop	{r4, pc}
	if (abort) {
     822:	2c00      	cmp	r4, #0
     824:	d010      	beq.n	848 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     826:	2200      	movs	r2, #0
     828:	4b10      	ldr	r3, [pc, #64]	; (86c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     82a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     82c:	4b10      	ldr	r3, [pc, #64]	; (870 <sd_mmc_wait_end_of_read_blocks+0x60>)
     82e:	881b      	ldrh	r3, [r3, #0]
     830:	2b01      	cmp	r3, #1
     832:	d00f      	beq.n	854 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     834:	2100      	movs	r1, #0
     836:	480f      	ldr	r0, [pc, #60]	; (874 <sd_mmc_wait_end_of_read_blocks+0x64>)
     838:	4b0f      	ldr	r3, [pc, #60]	; (878 <sd_mmc_wait_end_of_read_blocks+0x68>)
     83a:	4798      	blx	r3
     83c:	2800      	cmp	r0, #0
     83e:	d00d      	beq.n	85c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     840:	4b0e      	ldr	r3, [pc, #56]	; (87c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     842:	4798      	blx	r3
	return SD_MMC_OK;
     844:	2300      	movs	r3, #0
     846:	e7ea      	b.n	81e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     848:	4b08      	ldr	r3, [pc, #32]	; (86c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     84a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     84c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     84e:	2a00      	cmp	r2, #0
     850:	d0ec      	beq.n	82c <sd_mmc_wait_end_of_read_blocks+0x1c>
     852:	e7e4      	b.n	81e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     854:	4b09      	ldr	r3, [pc, #36]	; (87c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     856:	4798      	blx	r3
		return SD_MMC_OK;
     858:	2300      	movs	r3, #0
     85a:	e7e0      	b.n	81e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     85c:	2100      	movs	r1, #0
     85e:	4805      	ldr	r0, [pc, #20]	; (874 <sd_mmc_wait_end_of_read_blocks+0x64>)
     860:	4b05      	ldr	r3, [pc, #20]	; (878 <sd_mmc_wait_end_of_read_blocks+0x68>)
     862:	4798      	blx	r3
     864:	e7ec      	b.n	840 <sd_mmc_wait_end_of_read_blocks+0x30>
     866:	46c0      	nop			; (mov r8, r8)
     868:	00001129 	.word	0x00001129
     86c:	20000360 	.word	0x20000360
     870:	20000362 	.word	0x20000362
     874:	0000310c 	.word	0x0000310c
     878:	00001001 	.word	0x00001001
     87c:	0000021d 	.word	0x0000021d

00000880 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     880:	b570      	push	{r4, r5, r6, lr}
     882:	b082      	sub	sp, #8
     884:	000e      	movs	r6, r1
     886:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     888:	4b11      	ldr	r3, [pc, #68]	; (8d0 <sd_mmc_init_write_blocks+0x50>)
     88a:	4798      	blx	r3
     88c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     88e:	d116      	bne.n	8be <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     890:	2d01      	cmp	r5, #1
     892:	d917      	bls.n	8c4 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     894:	480f      	ldr	r0, [pc, #60]	; (8d4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     896:	4b10      	ldr	r3, [pc, #64]	; (8d8 <sd_mmc_init_write_blocks+0x58>)
     898:	681b      	ldr	r3, [r3, #0]
     89a:	7adb      	ldrb	r3, [r3, #11]
     89c:	071b      	lsls	r3, r3, #28
     89e:	d400      	bmi.n	8a2 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     8a0:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     8a2:	2301      	movs	r3, #1
     8a4:	9300      	str	r3, [sp, #0]
     8a6:	002b      	movs	r3, r5
     8a8:	2280      	movs	r2, #128	; 0x80
     8aa:	0092      	lsls	r2, r2, #2
     8ac:	0031      	movs	r1, r6
     8ae:	4e0b      	ldr	r6, [pc, #44]	; (8dc <sd_mmc_init_write_blocks+0x5c>)
     8b0:	47b0      	blx	r6
     8b2:	2800      	cmp	r0, #0
     8b4:	d008      	beq.n	8c8 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     8b6:	4b0a      	ldr	r3, [pc, #40]	; (8e0 <sd_mmc_init_write_blocks+0x60>)
     8b8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     8ba:	4b0a      	ldr	r3, [pc, #40]	; (8e4 <sd_mmc_init_write_blocks+0x64>)
     8bc:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     8be:	0020      	movs	r0, r4
     8c0:	b002      	add	sp, #8
     8c2:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     8c4:	4808      	ldr	r0, [pc, #32]	; (8e8 <sd_mmc_init_write_blocks+0x68>)
     8c6:	e7e6      	b.n	896 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     8c8:	4b08      	ldr	r3, [pc, #32]	; (8ec <sd_mmc_init_write_blocks+0x6c>)
     8ca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8cc:	2405      	movs	r4, #5
     8ce:	e7f6      	b.n	8be <sd_mmc_init_write_blocks+0x3e>
     8d0:	0000013d 	.word	0x0000013d
     8d4:	00109119 	.word	0x00109119
     8d8:	2000033c 	.word	0x2000033c
     8dc:	00000e71 	.word	0x00000e71
     8e0:	20000360 	.word	0x20000360
     8e4:	20000362 	.word	0x20000362
     8e8:	00089118 	.word	0x00089118
     8ec:	0000021d 	.word	0x0000021d

000008f0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     8f0:	b510      	push	{r4, lr}
     8f2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     8f4:	4b07      	ldr	r3, [pc, #28]	; (914 <sd_mmc_start_write_blocks+0x24>)
     8f6:	4798      	blx	r3
     8f8:	2800      	cmp	r0, #0
     8fa:	d104      	bne.n	906 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     8fc:	2200      	movs	r2, #0
     8fe:	4b06      	ldr	r3, [pc, #24]	; (918 <sd_mmc_start_write_blocks+0x28>)
     900:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     902:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     904:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     906:	4a04      	ldr	r2, [pc, #16]	; (918 <sd_mmc_start_write_blocks+0x28>)
     908:	8813      	ldrh	r3, [r2, #0]
     90a:	1b1c      	subs	r4, r3, r4
     90c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     90e:	2000      	movs	r0, #0
     910:	e7f8      	b.n	904 <sd_mmc_start_write_blocks+0x14>
     912:	46c0      	nop			; (mov r8, r8)
     914:	0000112d 	.word	0x0000112d
     918:	20000360 	.word	0x20000360

0000091c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     91c:	b510      	push	{r4, lr}
     91e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     920:	4b0e      	ldr	r3, [pc, #56]	; (95c <sd_mmc_wait_end_of_write_blocks+0x40>)
     922:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     924:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     926:	2800      	cmp	r0, #0
     928:	d101      	bne.n	92e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     92a:	0018      	movs	r0, r3
     92c:	bd10      	pop	{r4, pc}
	if (abort) {
     92e:	2c00      	cmp	r4, #0
     930:	d00a      	beq.n	948 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     932:	2200      	movs	r2, #0
     934:	4b0a      	ldr	r3, [pc, #40]	; (960 <sd_mmc_wait_end_of_write_blocks+0x44>)
     936:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     938:	4b0a      	ldr	r3, [pc, #40]	; (964 <sd_mmc_wait_end_of_write_blocks+0x48>)
     93a:	881b      	ldrh	r3, [r3, #0]
     93c:	2b01      	cmp	r3, #1
     93e:	d009      	beq.n	954 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     940:	4b09      	ldr	r3, [pc, #36]	; (968 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     942:	4798      	blx	r3
	return SD_MMC_OK;
     944:	2300      	movs	r3, #0
     946:	e7f0      	b.n	92a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     948:	4b05      	ldr	r3, [pc, #20]	; (960 <sd_mmc_wait_end_of_write_blocks+0x44>)
     94a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     94c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     94e:	2a00      	cmp	r2, #0
     950:	d0f2      	beq.n	938 <sd_mmc_wait_end_of_write_blocks+0x1c>
     952:	e7ea      	b.n	92a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     956:	4798      	blx	r3
		return SD_MMC_OK;
     958:	2300      	movs	r3, #0
     95a:	e7e6      	b.n	92a <sd_mmc_wait_end_of_write_blocks+0xe>
     95c:	000011ad 	.word	0x000011ad
     960:	20000360 	.word	0x20000360
     964:	20000362 	.word	0x20000362
     968:	0000021d 	.word	0x0000021d

0000096c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     96c:	b510      	push	{r4, lr}
     96e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     970:	4b0f      	ldr	r3, [pc, #60]	; (9b0 <sd_mmc_test_unit_ready+0x44>)
     972:	4798      	blx	r3
     974:	2801      	cmp	r0, #1
     976:	d019      	beq.n	9ac <sd_mmc_test_unit_ready+0x40>
     978:	2800      	cmp	r0, #0
     97a:	d003      	beq.n	984 <sd_mmc_test_unit_ready+0x18>
     97c:	2802      	cmp	r0, #2
     97e:	d010      	beq.n	9a2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     980:	2001      	movs	r0, #1
	}
}
     982:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     984:	4b0b      	ldr	r3, [pc, #44]	; (9b4 <sd_mmc_test_unit_ready+0x48>)
     986:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     988:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     98a:	2b00      	cmp	r3, #0
     98c:	d1f9      	bne.n	982 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     98e:	0020      	movs	r0, r4
     990:	4b09      	ldr	r3, [pc, #36]	; (9b8 <sd_mmc_test_unit_ready+0x4c>)
     992:	4798      	blx	r3
     994:	0003      	movs	r3, r0
     996:	2003      	movs	r0, #3
     998:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     99a:	4243      	negs	r3, r0
     99c:	4158      	adcs	r0, r3
     99e:	0040      	lsls	r0, r0, #1
     9a0:	e7ef      	b.n	982 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     9a2:	2200      	movs	r2, #0
     9a4:	4b03      	ldr	r3, [pc, #12]	; (9b4 <sd_mmc_test_unit_ready+0x48>)
     9a6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     9a8:	2002      	movs	r0, #2
     9aa:	e7ea      	b.n	982 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     9ac:	2003      	movs	r0, #3
     9ae:	e7e8      	b.n	982 <sd_mmc_test_unit_ready+0x16>
     9b0:	00000259 	.word	0x00000259
     9b4:	20000368 	.word	0x20000368
     9b8:	00000709 	.word	0x00000709

000009bc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     9bc:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     9be:	2000      	movs	r0, #0
     9c0:	4b01      	ldr	r3, [pc, #4]	; (9c8 <sd_mmc_test_unit_ready_0+0xc>)
     9c2:	4798      	blx	r3
}
     9c4:	bd10      	pop	{r4, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	0000096d 	.word	0x0000096d

000009cc <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     9cc:	b570      	push	{r4, r5, r6, lr}
     9ce:	0004      	movs	r4, r0
     9d0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     9d2:	4b04      	ldr	r3, [pc, #16]	; (9e4 <sd_mmc_read_capacity+0x18>)
     9d4:	4798      	blx	r3
     9d6:	0040      	lsls	r0, r0, #1
     9d8:	3801      	subs	r0, #1
     9da:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     9dc:	0020      	movs	r0, r4
     9de:	4b02      	ldr	r3, [pc, #8]	; (9e8 <sd_mmc_read_capacity+0x1c>)
     9e0:	4798      	blx	r3
}
     9e2:	bd70      	pop	{r4, r5, r6, pc}
     9e4:	00000731 	.word	0x00000731
     9e8:	0000096d 	.word	0x0000096d

000009ec <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     9ec:	b510      	push	{r4, lr}
     9ee:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     9f0:	2000      	movs	r0, #0
     9f2:	4b01      	ldr	r3, [pc, #4]	; (9f8 <sd_mmc_read_capacity_0+0xc>)
     9f4:	4798      	blx	r3
}
     9f6:	bd10      	pop	{r4, pc}
     9f8:	000009cd 	.word	0x000009cd

000009fc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     9fc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     9fe:	2000      	movs	r0, #0
     a00:	4b01      	ldr	r3, [pc, #4]	; (a08 <sd_mmc_wr_protect_0+0xc>)
     a02:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     a04:	bd10      	pop	{r4, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	00000759 	.word	0x00000759

00000a0c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     a0c:	b510      	push	{r4, lr}
     a0e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     a10:	2201      	movs	r2, #1
     a12:	4b0c      	ldr	r3, [pc, #48]	; (a44 <sd_mmc_mem_2_ram+0x38>)
     a14:	4798      	blx	r3
     a16:	2800      	cmp	r0, #0
     a18:	d004      	beq.n	a24 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     a1a:	3802      	subs	r0, #2
     a1c:	4243      	negs	r3, r0
     a1e:	4158      	adcs	r0, r3
     a20:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     a22:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     a24:	2101      	movs	r1, #1
     a26:	0020      	movs	r0, r4
     a28:	4b07      	ldr	r3, [pc, #28]	; (a48 <sd_mmc_mem_2_ram+0x3c>)
     a2a:	4798      	blx	r3
     a2c:	0003      	movs	r3, r0
		return CTRL_FAIL;
     a2e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     a30:	2b00      	cmp	r3, #0
     a32:	d1f6      	bne.n	a22 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     a34:	2000      	movs	r0, #0
     a36:	4b05      	ldr	r3, [pc, #20]	; (a4c <sd_mmc_mem_2_ram+0x40>)
     a38:	4798      	blx	r3
     a3a:	1e43      	subs	r3, r0, #1
     a3c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     a3e:	b2c0      	uxtb	r0, r0
     a40:	e7ef      	b.n	a22 <sd_mmc_mem_2_ram+0x16>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	0000075d 	.word	0x0000075d
     a48:	000007e5 	.word	0x000007e5
     a4c:	00000811 	.word	0x00000811

00000a50 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     a50:	b510      	push	{r4, lr}
     a52:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     a54:	0001      	movs	r1, r0
     a56:	2000      	movs	r0, #0
     a58:	4b01      	ldr	r3, [pc, #4]	; (a60 <sd_mmc_mem_2_ram_0+0x10>)
     a5a:	4798      	blx	r3
}
     a5c:	bd10      	pop	{r4, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	00000a0d 	.word	0x00000a0d

00000a64 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     a64:	b510      	push	{r4, lr}
     a66:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     a68:	2201      	movs	r2, #1
     a6a:	4b0c      	ldr	r3, [pc, #48]	; (a9c <sd_mmc_ram_2_mem+0x38>)
     a6c:	4798      	blx	r3
     a6e:	2800      	cmp	r0, #0
     a70:	d004      	beq.n	a7c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     a72:	3802      	subs	r0, #2
     a74:	4243      	negs	r3, r0
     a76:	4158      	adcs	r0, r3
     a78:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     a7a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     a7c:	2101      	movs	r1, #1
     a7e:	0020      	movs	r0, r4
     a80:	4b07      	ldr	r3, [pc, #28]	; (aa0 <sd_mmc_ram_2_mem+0x3c>)
     a82:	4798      	blx	r3
     a84:	0003      	movs	r3, r0
		return CTRL_FAIL;
     a86:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     a88:	2b00      	cmp	r3, #0
     a8a:	d1f6      	bne.n	a7a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     a8c:	2000      	movs	r0, #0
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <sd_mmc_ram_2_mem+0x40>)
     a90:	4798      	blx	r3
     a92:	1e43      	subs	r3, r0, #1
     a94:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     a96:	b2c0      	uxtb	r0, r0
     a98:	e7ef      	b.n	a7a <sd_mmc_ram_2_mem+0x16>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	00000881 	.word	0x00000881
     aa0:	000008f1 	.word	0x000008f1
     aa4:	0000091d 	.word	0x0000091d

00000aa8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     aa8:	b510      	push	{r4, lr}
     aaa:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     aac:	0001      	movs	r1, r0
     aae:	2000      	movs	r0, #0
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <sd_mmc_ram_2_mem_0+0x10>)
     ab2:	4798      	blx	r3
}
     ab4:	bd10      	pop	{r4, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	00000a65 	.word	0x00000a65

00000abc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     abc:	b500      	push	{lr}
     abe:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     ac0:	466b      	mov	r3, sp
     ac2:	1dd9      	adds	r1, r3, #7
     ac4:	23ff      	movs	r3, #255	; 0xff
     ac6:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     ac8:	2201      	movs	r2, #1
     aca:	480b      	ldr	r0, [pc, #44]	; (af8 <sd_mmc_spi_start_write_block+0x3c>)
     acc:	4b0b      	ldr	r3, [pc, #44]	; (afc <sd_mmc_spi_start_write_block+0x40>)
     ace:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     ad0:	4b0b      	ldr	r3, [pc, #44]	; (b00 <sd_mmc_spi_start_write_block+0x44>)
     ad2:	881b      	ldrh	r3, [r3, #0]
     ad4:	2b01      	cmp	r3, #1
     ad6:	d00a      	beq.n	aee <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     ad8:	22fc      	movs	r2, #252	; 0xfc
     ada:	466b      	mov	r3, sp
     adc:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     ade:	2201      	movs	r2, #1
     ae0:	466b      	mov	r3, sp
     ae2:	1d99      	adds	r1, r3, #6
     ae4:	4804      	ldr	r0, [pc, #16]	; (af8 <sd_mmc_spi_start_write_block+0x3c>)
     ae6:	4b05      	ldr	r3, [pc, #20]	; (afc <sd_mmc_spi_start_write_block+0x40>)
     ae8:	4798      	blx	r3
}
     aea:	b003      	add	sp, #12
     aec:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
     aee:	22fe      	movs	r2, #254	; 0xfe
     af0:	466b      	mov	r3, sp
     af2:	719a      	strb	r2, [r3, #6]
     af4:	e7f3      	b.n	ade <sd_mmc_spi_start_write_block+0x22>
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	2000036c 	.word	0x2000036c
     afc:	000051fd 	.word	0x000051fd
     b00:	200003b0 	.word	0x200003b0

00000b04 <sd_mmc_spi_wait_busy>:
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     b08:	466b      	mov	r3, sp
     b0a:	1ddc      	adds	r4, r3, #7
     b0c:	23ff      	movs	r3, #255	; 0xff
     b0e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b10:	4e12      	ldr	r6, [pc, #72]	; (b5c <sd_mmc_spi_wait_busy+0x58>)
     b12:	2201      	movs	r2, #1
     b14:	0021      	movs	r1, r4
     b16:	0030      	movs	r0, r6
     b18:	4d11      	ldr	r5, [pc, #68]	; (b60 <sd_mmc_spi_wait_busy+0x5c>)
     b1a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b1c:	23ff      	movs	r3, #255	; 0xff
     b1e:	2201      	movs	r2, #1
     b20:	0021      	movs	r1, r4
     b22:	0030      	movs	r0, r6
     b24:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b26:	23ff      	movs	r3, #255	; 0xff
     b28:	2201      	movs	r2, #1
     b2a:	0021      	movs	r1, r4
     b2c:	0030      	movs	r0, r6
     b2e:	47a8      	blx	r5
     b30:	4c0c      	ldr	r4, [pc, #48]	; (b64 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     b32:	466b      	mov	r3, sp
     b34:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b36:	4e09      	ldr	r6, [pc, #36]	; (b5c <sd_mmc_spi_wait_busy+0x58>)
     b38:	4f09      	ldr	r7, [pc, #36]	; (b60 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     b3a:	782b      	ldrb	r3, [r5, #0]
     b3c:	2bff      	cmp	r3, #255	; 0xff
     b3e:	d009      	beq.n	b54 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b40:	23ff      	movs	r3, #255	; 0xff
     b42:	2201      	movs	r2, #1
     b44:	0029      	movs	r1, r5
     b46:	0030      	movs	r0, r6
     b48:	47b8      	blx	r7
     b4a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     b4c:	2c00      	cmp	r4, #0
     b4e:	d1f4      	bne.n	b3a <sd_mmc_spi_wait_busy+0x36>
			return false;
     b50:	2000      	movs	r0, #0
     b52:	e000      	b.n	b56 <sd_mmc_spi_wait_busy+0x52>
	return true;
     b54:	2001      	movs	r0, #1
}
     b56:	b003      	add	sp, #12
     b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	2000036c 	.word	0x2000036c
     b60:	00005035 	.word	0x00005035
     b64:	00030d40 	.word	0x00030d40

00000b68 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     b6c:	4b14      	ldr	r3, [pc, #80]	; (bc0 <sd_mmc_spi_stop_multiwrite_block+0x58>)
     b6e:	881c      	ldrh	r4, [r3, #0]
     b70:	2c01      	cmp	r4, #1
     b72:	d023      	beq.n	bbc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     b74:	4b13      	ldr	r3, [pc, #76]	; (bc4 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     b76:	8819      	ldrh	r1, [r3, #0]
     b78:	4b13      	ldr	r3, [pc, #76]	; (bc8 <sd_mmc_spi_stop_multiwrite_block+0x60>)
     b7a:	6818      	ldr	r0, [r3, #0]
     b7c:	4b13      	ldr	r3, [pc, #76]	; (bcc <sd_mmc_spi_stop_multiwrite_block+0x64>)
     b7e:	4798      	blx	r3
		return true; // It is not the End of multi write
     b80:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     b82:	4284      	cmp	r4, r0
     b84:	d902      	bls.n	b8c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     b86:	0018      	movs	r0, r3
     b88:	b002      	add	sp, #8
     b8a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     b8c:	466b      	mov	r3, sp
     b8e:	1ddc      	adds	r4, r3, #7
     b90:	23ff      	movs	r3, #255	; 0xff
     b92:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     b94:	4e0e      	ldr	r6, [pc, #56]	; (bd0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
     b96:	2201      	movs	r2, #1
     b98:	0021      	movs	r1, r4
     b9a:	0030      	movs	r0, r6
     b9c:	4d0d      	ldr	r5, [pc, #52]	; (bd4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     b9e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     ba0:	23fd      	movs	r3, #253	; 0xfd
     ba2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     ba4:	2201      	movs	r2, #1
     ba6:	0021      	movs	r1, r4
     ba8:	0030      	movs	r0, r6
     baa:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     bac:	4b0a      	ldr	r3, [pc, #40]	; (bd8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
     bae:	4798      	blx	r3
     bb0:	1e03      	subs	r3, r0, #0
     bb2:	d1e8      	bne.n	b86 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     bb4:	2105      	movs	r1, #5
     bb6:	4a09      	ldr	r2, [pc, #36]	; (bdc <sd_mmc_spi_stop_multiwrite_block+0x74>)
     bb8:	7011      	strb	r1, [r2, #0]
		return false;
     bba:	e7e4      	b.n	b86 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     bbc:	2301      	movs	r3, #1
     bbe:	e7e2      	b.n	b86 <sd_mmc_spi_stop_multiwrite_block+0x1e>
     bc0:	200003b0 	.word	0x200003b0
     bc4:	200003a8 	.word	0x200003a8
     bc8:	200003b8 	.word	0x200003b8
     bcc:	0000b8fd 	.word	0x0000b8fd
     bd0:	2000036c 	.word	0x2000036c
     bd4:	000051fd 	.word	0x000051fd
     bd8:	00000b05 	.word	0x00000b05
     bdc:	200003af 	.word	0x200003af

00000be0 <sd_mmc_spi_start_read_block>:
{
     be0:	b5f0      	push	{r4, r5, r6, r7, lr}
     be2:	b083      	sub	sp, #12
	token = 0;
     be4:	2200      	movs	r2, #0
     be6:	466b      	mov	r3, sp
     be8:	71da      	strb	r2, [r3, #7]
     bea:	4c14      	ldr	r4, [pc, #80]	; (c3c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     bec:	466b      	mov	r3, sp
     bee:	1ddd      	adds	r5, r3, #7
     bf0:	4e13      	ldr	r6, [pc, #76]	; (c40 <sd_mmc_spi_start_read_block+0x60>)
     bf2:	4f14      	ldr	r7, [pc, #80]	; (c44 <sd_mmc_spi_start_read_block+0x64>)
     bf4:	23ff      	movs	r3, #255	; 0xff
     bf6:	2201      	movs	r2, #1
     bf8:	0029      	movs	r1, r5
     bfa:	0030      	movs	r0, r6
     bfc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     bfe:	782b      	ldrb	r3, [r5, #0]
     c00:	220f      	movs	r2, #15
     c02:	0019      	movs	r1, r3
     c04:	4391      	bics	r1, r2
     c06:	1e0a      	subs	r2, r1, #0
     c08:	d009      	beq.n	c1e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     c0a:	2bfe      	cmp	r3, #254	; 0xfe
     c0c:	d013      	beq.n	c36 <sd_mmc_spi_start_read_block+0x56>
     c0e:	3c01      	subs	r4, #1
		if (i-- == 0) {
     c10:	2c00      	cmp	r4, #0
     c12:	d1ef      	bne.n	bf4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     c14:	2204      	movs	r2, #4
     c16:	4b0c      	ldr	r3, [pc, #48]	; (c48 <sd_mmc_spi_start_read_block+0x68>)
     c18:	701a      	strb	r2, [r3, #0]
			return false;
     c1a:	2000      	movs	r0, #0
     c1c:	e00c      	b.n	c38 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     c1e:	075b      	lsls	r3, r3, #29
     c20:	d004      	beq.n	c2c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     c22:	3207      	adds	r2, #7
     c24:	4b08      	ldr	r3, [pc, #32]	; (c48 <sd_mmc_spi_start_read_block+0x68>)
     c26:	701a      	strb	r2, [r3, #0]
			return false;
     c28:	2000      	movs	r0, #0
     c2a:	e005      	b.n	c38 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     c2c:	220b      	movs	r2, #11
     c2e:	4b06      	ldr	r3, [pc, #24]	; (c48 <sd_mmc_spi_start_read_block+0x68>)
     c30:	701a      	strb	r2, [r3, #0]
			return false;
     c32:	2000      	movs	r0, #0
     c34:	e000      	b.n	c38 <sd_mmc_spi_start_read_block+0x58>
	return true;
     c36:	2001      	movs	r0, #1
}
     c38:	b003      	add	sp, #12
     c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c3c:	0007a120 	.word	0x0007a120
     c40:	2000036c 	.word	0x2000036c
     c44:	00005035 	.word	0x00005035
     c48:	200003af 	.word	0x200003af

00000c4c <sd_mmc_spi_stop_write_block>:
{
     c4c:	b530      	push	{r4, r5, lr}
     c4e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
     c50:	a901      	add	r1, sp, #4
     c52:	2301      	movs	r3, #1
     c54:	425b      	negs	r3, r3
     c56:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
     c58:	4d14      	ldr	r5, [pc, #80]	; (cac <sd_mmc_spi_stop_write_block+0x60>)
     c5a:	2202      	movs	r2, #2
     c5c:	0028      	movs	r0, r5
     c5e:	4b14      	ldr	r3, [pc, #80]	; (cb0 <sd_mmc_spi_stop_write_block+0x64>)
     c60:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
     c62:	466b      	mov	r3, sp
     c64:	1ddc      	adds	r4, r3, #7
     c66:	23ff      	movs	r3, #255	; 0xff
     c68:	2201      	movs	r2, #1
     c6a:	0021      	movs	r1, r4
     c6c:	0028      	movs	r0, r5
     c6e:	4d11      	ldr	r5, [pc, #68]	; (cb4 <sd_mmc_spi_stop_write_block+0x68>)
     c70:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
     c72:	7822      	ldrb	r2, [r4, #0]
     c74:	2311      	movs	r3, #17
     c76:	4013      	ands	r3, r2
     c78:	2b01      	cmp	r3, #1
     c7a:	d005      	beq.n	c88 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     c7c:	2201      	movs	r2, #1
     c7e:	4b0e      	ldr	r3, [pc, #56]	; (cb8 <sd_mmc_spi_stop_write_block+0x6c>)
     c80:	701a      	strb	r2, [r3, #0]
		return false;
     c82:	2000      	movs	r0, #0
}
     c84:	b003      	add	sp, #12
     c86:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
     c88:	231e      	movs	r3, #30
     c8a:	401a      	ands	r2, r3
     c8c:	2a04      	cmp	r2, #4
     c8e:	d00b      	beq.n	ca8 <sd_mmc_spi_stop_write_block+0x5c>
     c90:	2a0a      	cmp	r2, #10
     c92:	d104      	bne.n	c9e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
     c94:	3a02      	subs	r2, #2
     c96:	4b08      	ldr	r3, [pc, #32]	; (cb8 <sd_mmc_spi_stop_write_block+0x6c>)
     c98:	701a      	strb	r2, [r3, #0]
		return false;
     c9a:	2000      	movs	r0, #0
     c9c:	e7f2      	b.n	c84 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
     c9e:	220a      	movs	r2, #10
     ca0:	4b05      	ldr	r3, [pc, #20]	; (cb8 <sd_mmc_spi_stop_write_block+0x6c>)
     ca2:	701a      	strb	r2, [r3, #0]
		return false;
     ca4:	2000      	movs	r0, #0
     ca6:	e7ed      	b.n	c84 <sd_mmc_spi_stop_write_block+0x38>
	return true;
     ca8:	2001      	movs	r0, #1
     caa:	e7eb      	b.n	c84 <sd_mmc_spi_stop_write_block+0x38>
     cac:	2000036c 	.word	0x2000036c
     cb0:	000051fd 	.word	0x000051fd
     cb4:	00005035 	.word	0x00005035
     cb8:	200003af 	.word	0x200003af

00000cbc <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
     cbc:	b570      	push	{r4, r5, r6, lr}
     cbe:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     cc0:	2300      	movs	r3, #0
     cc2:	4a2d      	ldr	r2, [pc, #180]	; (d78 <sd_mmc_spi_init+0xbc>)
     cc4:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     cc6:	ac02      	add	r4, sp, #8
     cc8:	2501      	movs	r5, #1
     cca:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     ccc:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     cce:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     cd0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     cd2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     cd4:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     cd6:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     cd8:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     cda:	2224      	movs	r2, #36	; 0x24
     cdc:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     cde:	3a18      	subs	r2, #24
     ce0:	2100      	movs	r1, #0
     ce2:	a808      	add	r0, sp, #32
     ce4:	4b25      	ldr	r3, [pc, #148]	; (d7c <sd_mmc_spi_init+0xc0>)
     ce6:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
     ce8:	2380      	movs	r3, #128	; 0x80
     cea:	025b      	lsls	r3, r3, #9
     cec:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
     cee:	4b24      	ldr	r3, [pc, #144]	; (d80 <sd_mmc_spi_init+0xc4>)
     cf0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
     cf2:	4b24      	ldr	r3, [pc, #144]	; (d84 <sd_mmc_spi_init+0xc8>)
     cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
     cf6:	4b24      	ldr	r3, [pc, #144]	; (d88 <sd_mmc_spi_init+0xcc>)
     cf8:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
     cfa:	4b24      	ldr	r3, [pc, #144]	; (d8c <sd_mmc_spi_init+0xd0>)
     cfc:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
     cfe:	4b24      	ldr	r3, [pc, #144]	; (d90 <sd_mmc_spi_init+0xd4>)
     d00:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
     d02:	4e24      	ldr	r6, [pc, #144]	; (d94 <sd_mmc_spi_init+0xd8>)
     d04:	0022      	movs	r2, r4
     d06:	4924      	ldr	r1, [pc, #144]	; (d98 <sd_mmc_spi_init+0xdc>)
     d08:	0030      	movs	r0, r6
     d0a:	4b24      	ldr	r3, [pc, #144]	; (d9c <sd_mmc_spi_init+0xe0>)
     d0c:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d0e:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     d10:	0020      	movs	r0, r4
     d12:	4b23      	ldr	r3, [pc, #140]	; (da0 <sd_mmc_spi_init+0xe4>)
     d14:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d16:	231f      	movs	r3, #31
     d18:	4018      	ands	r0, r3
     d1a:	4085      	lsls	r5, r0
     d1c:	4b21      	ldr	r3, [pc, #132]	; (da4 <sd_mmc_spi_init+0xe8>)
     d1e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     d20:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     d22:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     d24:	2b00      	cmp	r3, #0
     d26:	d1fc      	bne.n	d22 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     d28:	6823      	ldr	r3, [r4, #0]
     d2a:	2202      	movs	r2, #2
     d2c:	4313      	orrs	r3, r2
     d2e:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     d30:	4a1d      	ldr	r2, [pc, #116]	; (da8 <sd_mmc_spi_init+0xec>)
     d32:	2300      	movs	r3, #0
     d34:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
     d36:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
     d38:	491c      	ldr	r1, [pc, #112]	; (dac <sd_mmc_spi_init+0xf0>)
     d3a:	7808      	ldrb	r0, [r1, #0]
     d3c:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
     d3e:	4c1c      	ldr	r4, [pc, #112]	; (db0 <sd_mmc_spi_init+0xf4>)
     d40:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
     d42:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     d44:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     d46:	a901      	add	r1, sp, #4
     d48:	2201      	movs	r2, #1
     d4a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     d4c:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     d4e:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     d50:	4b18      	ldr	r3, [pc, #96]	; (db4 <sd_mmc_spi_init+0xf8>)
     d52:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     d54:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d56:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d58:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     d5a:	2900      	cmp	r1, #0
     d5c:	d104      	bne.n	d68 <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
     d5e:	0953      	lsrs	r3, r2, #5
     d60:	01db      	lsls	r3, r3, #7
     d62:	4915      	ldr	r1, [pc, #84]	; (db8 <sd_mmc_spi_init+0xfc>)
     d64:	468c      	mov	ip, r1
     d66:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d68:	211f      	movs	r1, #31
     d6a:	4011      	ands	r1, r2
     d6c:	2201      	movs	r2, #1
     d6e:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d70:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
     d72:	b010      	add	sp, #64	; 0x40
     d74:	bd70      	pop	{r4, r5, r6, pc}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	200003af 	.word	0x200003af
     d7c:	0000bcef 	.word	0x0000bcef
     d80:	00100002 	.word	0x00100002
     d84:	00110002 	.word	0x00110002
     d88:	00120002 	.word	0x00120002
     d8c:	00130002 	.word	0x00130002
     d90:	00061a80 	.word	0x00061a80
     d94:	2000036c 	.word	0x2000036c
     d98:	42000c00 	.word	0x42000c00
     d9c:	00004e5d 	.word	0x00004e5d
     da0:	00004d15 	.word	0x00004d15
     da4:	e000e100 	.word	0xe000e100
     da8:	200003bc 	.word	0x200003bc
     dac:	20000000 	.word	0x20000000
     db0:	200003ac 	.word	0x200003ac
     db4:	00004701 	.word	0x00004701
     db8:	41004400 	.word	0x41004400

00000dbc <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
     dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dbe:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     dc0:	2200      	movs	r2, #0
     dc2:	4b0d      	ldr	r3, [pc, #52]	; (df8 <sd_mmc_spi_select_device+0x3c>)
     dc4:	701a      	strb	r2, [r3, #0]
     dc6:	000c      	movs	r4, r1
     dc8:	4b0c      	ldr	r3, [pc, #48]	; (dfc <sd_mmc_spi_select_device+0x40>)
     dca:	4299      	cmp	r1, r3
     dcc:	d900      	bls.n	dd0 <sd_mmc_spi_select_device+0x14>
     dce:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     dd0:	4d0b      	ldr	r5, [pc, #44]	; (e00 <sd_mmc_spi_select_device+0x44>)
     dd2:	4e0c      	ldr	r6, [pc, #48]	; (e04 <sd_mmc_spi_select_device+0x48>)
     dd4:	e001      	b.n	dda <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
     dd6:	08e3      	lsrs	r3, r4, #3
     dd8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     dda:	0021      	movs	r1, r4
     ddc:	0028      	movs	r0, r5
     dde:	47b0      	blx	r6
     de0:	2817      	cmp	r0, #23
     de2:	d0f8      	beq.n	dd6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
     de4:	0079      	lsls	r1, r7, #1
     de6:	19cf      	adds	r7, r1, r7
     de8:	4907      	ldr	r1, [pc, #28]	; (e08 <sd_mmc_spi_select_device+0x4c>)
     dea:	19c9      	adds	r1, r1, r7
     dec:	2201      	movs	r2, #1
     dee:	4804      	ldr	r0, [pc, #16]	; (e00 <sd_mmc_spi_select_device+0x44>)
     df0:	4b06      	ldr	r3, [pc, #24]	; (e0c <sd_mmc_spi_select_device+0x50>)
     df2:	4798      	blx	r3
}
     df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     df6:	46c0      	nop			; (mov r8, r8)
     df8:	200003af 	.word	0x200003af
     dfc:	00989680 	.word	0x00989680
     e00:	2000036c 	.word	0x2000036c
     e04:	00004da5 	.word	0x00004da5
     e08:	200003ac 	.word	0x200003ac
     e0c:	00005109 	.word	0x00005109

00000e10 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
     e10:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e12:	2200      	movs	r2, #0
     e14:	4b04      	ldr	r3, [pc, #16]	; (e28 <sd_mmc_spi_deselect_device+0x18>)
     e16:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
     e18:	0041      	lsls	r1, r0, #1
     e1a:	1808      	adds	r0, r1, r0
     e1c:	4903      	ldr	r1, [pc, #12]	; (e2c <sd_mmc_spi_deselect_device+0x1c>)
     e1e:	1809      	adds	r1, r1, r0
     e20:	4803      	ldr	r0, [pc, #12]	; (e30 <sd_mmc_spi_deselect_device+0x20>)
     e22:	4b04      	ldr	r3, [pc, #16]	; (e34 <sd_mmc_spi_deselect_device+0x24>)
     e24:	4798      	blx	r3
}
     e26:	bd10      	pop	{r4, pc}
     e28:	200003af 	.word	0x200003af
     e2c:	200003ac 	.word	0x200003ac
     e30:	2000036c 	.word	0x2000036c
     e34:	00005109 	.word	0x00005109

00000e38 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
     e38:	b570      	push	{r4, r5, r6, lr}
     e3a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
     e3c:	22ff      	movs	r2, #255	; 0xff
     e3e:	466b      	mov	r3, sp
     e40:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e42:	2200      	movs	r2, #0
     e44:	4b07      	ldr	r3, [pc, #28]	; (e64 <sd_mmc_spi_send_clock+0x2c>)
     e46:	701a      	strb	r2, [r3, #0]
     e48:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
     e4a:	4e07      	ldr	r6, [pc, #28]	; (e68 <sd_mmc_spi_send_clock+0x30>)
     e4c:	4d07      	ldr	r5, [pc, #28]	; (e6c <sd_mmc_spi_send_clock+0x34>)
     e4e:	2201      	movs	r2, #1
     e50:	466b      	mov	r3, sp
     e52:	1dd9      	adds	r1, r3, #7
     e54:	0030      	movs	r0, r6
     e56:	47a8      	blx	r5
     e58:	3c01      	subs	r4, #1
     e5a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
     e5c:	2c00      	cmp	r4, #0
     e5e:	d1f6      	bne.n	e4e <sd_mmc_spi_send_clock+0x16>
	}
}
     e60:	b002      	add	sp, #8
     e62:	bd70      	pop	{r4, r5, r6, pc}
     e64:	200003af 	.word	0x200003af
     e68:	2000036c 	.word	0x2000036c
     e6c:	000051fd 	.word	0x000051fd

00000e70 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
     e70:	b5f0      	push	{r4, r5, r6, r7, lr}
     e72:	46c6      	mov	lr, r8
     e74:	b500      	push	{lr}
     e76:	b086      	sub	sp, #24
     e78:	4680      	mov	r8, r0
     e7a:	9200      	str	r2, [sp, #0]
     e7c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
     e7e:	22ff      	movs	r2, #255	; 0xff
     e80:	230f      	movs	r3, #15
     e82:	a802      	add	r0, sp, #8
     e84:	4684      	mov	ip, r0
     e86:	4463      	add	r3, ip
     e88:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e8a:	2200      	movs	r2, #0
     e8c:	4b53      	ldr	r3, [pc, #332]	; (fdc <sd_mmc_spi_adtc_start+0x16c>)
     e8e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
     e90:	ab04      	add	r3, sp, #16
     e92:	323f      	adds	r2, #63	; 0x3f
     e94:	4640      	mov	r0, r8
     e96:	4002      	ands	r2, r0
     e98:	2040      	movs	r0, #64	; 0x40
     e9a:	4302      	orrs	r2, r0
     e9c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
     e9e:	0e0a      	lsrs	r2, r1, #24
     ea0:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
     ea2:	0c0a      	lsrs	r2, r1, #16
     ea4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
     ea6:	0a0a      	lsrs	r2, r1, #8
     ea8:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
     eaa:	7119      	strb	r1, [r3, #4]
     eac:	2700      	movs	r7, #0
	crc = 0;
     eae:	2300      	movs	r3, #0
		value = *buf++;
     eb0:	a904      	add	r1, sp, #16
     eb2:	2208      	movs	r2, #8
				crc ^= 0x09;
     eb4:	2409      	movs	r4, #9
     eb6:	e011      	b.n	edc <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
     eb8:	0076      	lsls	r6, r6, #1
     eba:	b2f6      	uxtb	r6, r6
     ebc:	3801      	subs	r0, #1
     ebe:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
     ec0:	2800      	cmp	r0, #0
     ec2:	d008      	beq.n	ed6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
     ec4:	005b      	lsls	r3, r3, #1
     ec6:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
     ec8:	001d      	movs	r5, r3
     eca:	4075      	eors	r5, r6
     ecc:	062d      	lsls	r5, r5, #24
     ece:	d5f3      	bpl.n	eb8 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
     ed0:	4063      	eors	r3, r4
     ed2:	b2db      	uxtb	r3, r3
     ed4:	e7f0      	b.n	eb8 <sd_mmc_spi_adtc_start+0x48>
     ed6:	3701      	adds	r7, #1
	while (size--) {
     ed8:	2f05      	cmp	r7, #5
     eda:	d002      	beq.n	ee2 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
     edc:	5c7e      	ldrb	r6, [r7, r1]
     ede:	0010      	movs	r0, r2
     ee0:	e7f0      	b.n	ec4 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
     ee2:	005b      	lsls	r3, r3, #1
     ee4:	2201      	movs	r2, #1
     ee6:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
     ee8:	ac04      	add	r4, sp, #16
     eea:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
     eec:	4e3c      	ldr	r6, [pc, #240]	; (fe0 <sd_mmc_spi_adtc_start+0x170>)
     eee:	2201      	movs	r2, #1
     ef0:	210f      	movs	r1, #15
     ef2:	ab02      	add	r3, sp, #8
     ef4:	469c      	mov	ip, r3
     ef6:	4461      	add	r1, ip
     ef8:	0030      	movs	r0, r6
     efa:	4f3a      	ldr	r7, [pc, #232]	; (fe4 <sd_mmc_spi_adtc_start+0x174>)
     efc:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
     efe:	2206      	movs	r2, #6
     f00:	0021      	movs	r1, r4
     f02:	0030      	movs	r0, r6
     f04:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
     f06:	ab02      	add	r3, sp, #8
     f08:	1dd9      	adds	r1, r3, #7
     f0a:	23ff      	movs	r3, #255	; 0xff
     f0c:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     f0e:	2201      	movs	r2, #1
     f10:	0030      	movs	r0, r6
     f12:	4e35      	ldr	r6, [pc, #212]	; (fe8 <sd_mmc_spi_adtc_start+0x178>)
     f14:	47b0      	blx	r6
     f16:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     f18:	ab02      	add	r3, sp, #8
     f1a:	1dde      	adds	r6, r3, #7
     f1c:	4f30      	ldr	r7, [pc, #192]	; (fe0 <sd_mmc_spi_adtc_start+0x170>)
     f1e:	4d32      	ldr	r5, [pc, #200]	; (fe8 <sd_mmc_spi_adtc_start+0x178>)
     f20:	23ff      	movs	r3, #255	; 0xff
     f22:	2201      	movs	r2, #1
     f24:	0031      	movs	r1, r6
     f26:	0038      	movs	r0, r7
     f28:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
     f2a:	7833      	ldrb	r3, [r6, #0]
     f2c:	b25a      	sxtb	r2, r3
     f2e:	2a00      	cmp	r2, #0
     f30:	da0b      	bge.n	f4a <sd_mmc_spi_adtc_start+0xda>
     f32:	3c01      	subs	r4, #1
     f34:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
     f36:	2c00      	cmp	r4, #0
     f38:	d1f2      	bne.n	f20 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
     f3a:	2202      	movs	r2, #2
     f3c:	4b27      	ldr	r3, [pc, #156]	; (fdc <sd_mmc_spi_adtc_start+0x16c>)
     f3e:	701a      	strb	r2, [r3, #0]
			return false;
     f40:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
     f42:	b006      	add	sp, #24
     f44:	bc04      	pop	{r2}
     f46:	4690      	mov	r8, r2
     f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
     f4a:	4a28      	ldr	r2, [pc, #160]	; (fec <sd_mmc_spi_adtc_start+0x17c>)
     f4c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
     f4e:	071a      	lsls	r2, r3, #28
     f50:	d41a      	bmi.n	f88 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
     f52:	075a      	lsls	r2, r3, #29
     f54:	d41d      	bmi.n	f92 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
     f56:	2201      	movs	r2, #1
     f58:	4393      	bics	r3, r2
     f5a:	d11f      	bne.n	f9c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
     f5c:	4643      	mov	r3, r8
     f5e:	049b      	lsls	r3, r3, #18
     f60:	d420      	bmi.n	fa4 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
     f62:	4643      	mov	r3, r8
     f64:	059b      	lsls	r3, r3, #22
     f66:	d425      	bmi.n	fb4 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
     f68:	4643      	mov	r3, r8
     f6a:	055b      	lsls	r3, r3, #21
     f6c:	d42b      	bmi.n	fc6 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
     f6e:	4b20      	ldr	r3, [pc, #128]	; (ff0 <sd_mmc_spi_adtc_start+0x180>)
     f70:	466a      	mov	r2, sp
     f72:	8812      	ldrh	r2, [r2, #0]
     f74:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
     f76:	4b1f      	ldr	r3, [pc, #124]	; (ff4 <sd_mmc_spi_adtc_start+0x184>)
     f78:	466a      	mov	r2, sp
     f7a:	8892      	ldrh	r2, [r2, #4]
     f7c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
     f7e:	2200      	movs	r2, #0
     f80:	4b1d      	ldr	r3, [pc, #116]	; (ff8 <sd_mmc_spi_adtc_start+0x188>)
     f82:	601a      	str	r2, [r3, #0]
	return true; // Command complete
     f84:	2001      	movs	r0, #1
     f86:	e7dc      	b.n	f42 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
     f88:	2206      	movs	r2, #6
     f8a:	4b14      	ldr	r3, [pc, #80]	; (fdc <sd_mmc_spi_adtc_start+0x16c>)
     f8c:	701a      	strb	r2, [r3, #0]
		return false;
     f8e:	2000      	movs	r0, #0
     f90:	e7d7      	b.n	f42 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
     f92:	2209      	movs	r2, #9
     f94:	4b11      	ldr	r3, [pc, #68]	; (fdc <sd_mmc_spi_adtc_start+0x16c>)
     f96:	701a      	strb	r2, [r3, #0]
		return false;
     f98:	2000      	movs	r0, #0
     f9a:	e7d2      	b.n	f42 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     f9c:	4b0f      	ldr	r3, [pc, #60]	; (fdc <sd_mmc_spi_adtc_start+0x16c>)
     f9e:	701a      	strb	r2, [r3, #0]
		return false;
     fa0:	2000      	movs	r0, #0
     fa2:	e7ce      	b.n	f42 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
     fa4:	4b15      	ldr	r3, [pc, #84]	; (ffc <sd_mmc_spi_adtc_start+0x18c>)
     fa6:	4798      	blx	r3
     fa8:	2800      	cmp	r0, #0
     faa:	d1da      	bne.n	f62 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
     fac:	2203      	movs	r2, #3
     fae:	4b0b      	ldr	r3, [pc, #44]	; (fdc <sd_mmc_spi_adtc_start+0x16c>)
     fb0:	701a      	strb	r2, [r3, #0]
			return false;
     fb2:	e7c6      	b.n	f42 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
     fb4:	490d      	ldr	r1, [pc, #52]	; (fec <sd_mmc_spi_adtc_start+0x17c>)
     fb6:	2300      	movs	r3, #0
     fb8:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
     fba:	33ff      	adds	r3, #255	; 0xff
     fbc:	2201      	movs	r2, #1
     fbe:	4808      	ldr	r0, [pc, #32]	; (fe0 <sd_mmc_spi_adtc_start+0x170>)
     fc0:	4e09      	ldr	r6, [pc, #36]	; (fe8 <sd_mmc_spi_adtc_start+0x178>)
     fc2:	47b0      	blx	r6
     fc4:	e7d0      	b.n	f68 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
     fc6:	4e09      	ldr	r6, [pc, #36]	; (fec <sd_mmc_spi_adtc_start+0x17c>)
     fc8:	23ff      	movs	r3, #255	; 0xff
     fca:	2204      	movs	r2, #4
     fcc:	0031      	movs	r1, r6
     fce:	4804      	ldr	r0, [pc, #16]	; (fe0 <sd_mmc_spi_adtc_start+0x170>)
     fd0:	4f05      	ldr	r7, [pc, #20]	; (fe8 <sd_mmc_spi_adtc_start+0x178>)
     fd2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
     fd4:	6833      	ldr	r3, [r6, #0]
     fd6:	ba1b      	rev	r3, r3
     fd8:	6033      	str	r3, [r6, #0]
     fda:	e7c8      	b.n	f6e <sd_mmc_spi_adtc_start+0xfe>
     fdc:	200003af 	.word	0x200003af
     fe0:	2000036c 	.word	0x2000036c
     fe4:	000051fd 	.word	0x000051fd
     fe8:	00005035 	.word	0x00005035
     fec:	200003b4 	.word	0x200003b4
     ff0:	200003a8 	.word	0x200003a8
     ff4:	200003b0 	.word	0x200003b0
     ff8:	200003b8 	.word	0x200003b8
     ffc:	00000b05 	.word	0x00000b05

00001000 <sd_mmc_spi_send_cmd>:
{
    1000:	b510      	push	{r4, lr}
    1002:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    1004:	2300      	movs	r3, #0
    1006:	9300      	str	r3, [sp, #0]
    1008:	2200      	movs	r2, #0
    100a:	4c02      	ldr	r4, [pc, #8]	; (1014 <sd_mmc_spi_send_cmd+0x14>)
    100c:	47a0      	blx	r4
}
    100e:	b002      	add	sp, #8
    1010:	bd10      	pop	{r4, pc}
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	00000e71 	.word	0x00000e71

00001018 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    1018:	4b01      	ldr	r3, [pc, #4]	; (1020 <sd_mmc_spi_get_response+0x8>)
    101a:	6818      	ldr	r0, [r3, #0]
}
    101c:	4770      	bx	lr
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	200003b4 	.word	0x200003b4

00001024 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    1024:	b510      	push	{r4, lr}
    1026:	b084      	sub	sp, #16
    1028:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    102a:	2200      	movs	r2, #0
    102c:	4b14      	ldr	r3, [pc, #80]	; (1080 <sd_mmc_spi_read_word+0x5c>)
    102e:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1030:	4b14      	ldr	r3, [pc, #80]	; (1084 <sd_mmc_spi_read_word+0x60>)
    1032:	8819      	ldrh	r1, [r3, #0]
    1034:	4b14      	ldr	r3, [pc, #80]	; (1088 <sd_mmc_spi_read_word+0x64>)
    1036:	6818      	ldr	r0, [r3, #0]
    1038:	4b14      	ldr	r3, [pc, #80]	; (108c <sd_mmc_spi_read_word+0x68>)
    103a:	4798      	blx	r3
    103c:	2900      	cmp	r1, #0
    103e:	d103      	bne.n	1048 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1040:	4b13      	ldr	r3, [pc, #76]	; (1090 <sd_mmc_spi_read_word+0x6c>)
    1042:	4798      	blx	r3
    1044:	2800      	cmp	r0, #0
    1046:	d010      	beq.n	106a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    1048:	23ff      	movs	r3, #255	; 0xff
    104a:	2204      	movs	r2, #4
    104c:	a901      	add	r1, sp, #4
    104e:	4811      	ldr	r0, [pc, #68]	; (1094 <sd_mmc_spi_read_word+0x70>)
    1050:	4c11      	ldr	r4, [pc, #68]	; (1098 <sd_mmc_spi_read_word+0x74>)
    1052:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    1054:	4b0c      	ldr	r3, [pc, #48]	; (1088 <sd_mmc_spi_read_word+0x64>)
    1056:	681a      	ldr	r2, [r3, #0]
    1058:	1d10      	adds	r0, r2, #4
    105a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    105c:	4b09      	ldr	r3, [pc, #36]	; (1084 <sd_mmc_spi_read_word+0x60>)
    105e:	8819      	ldrh	r1, [r3, #0]
    1060:	4b0a      	ldr	r3, [pc, #40]	; (108c <sd_mmc_spi_read_word+0x68>)
    1062:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1064:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1066:	2900      	cmp	r1, #0
    1068:	d001      	beq.n	106e <sd_mmc_spi_read_word+0x4a>
}
    106a:	b004      	add	sp, #16
    106c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    106e:	23ff      	movs	r3, #255	; 0xff
    1070:	2202      	movs	r2, #2
    1072:	a903      	add	r1, sp, #12
    1074:	4807      	ldr	r0, [pc, #28]	; (1094 <sd_mmc_spi_read_word+0x70>)
    1076:	4c08      	ldr	r4, [pc, #32]	; (1098 <sd_mmc_spi_read_word+0x74>)
    1078:	47a0      	blx	r4
	return true;
    107a:	2001      	movs	r0, #1
    107c:	e7f5      	b.n	106a <sd_mmc_spi_read_word+0x46>
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	200003af 	.word	0x200003af
    1084:	200003a8 	.word	0x200003a8
    1088:	200003b8 	.word	0x200003b8
    108c:	0000ba09 	.word	0x0000ba09
    1090:	00000be1 	.word	0x00000be1
    1094:	2000036c 	.word	0x2000036c
    1098:	00005035 	.word	0x00005035

0000109c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    109c:	b5f0      	push	{r4, r5, r6, r7, lr}
    109e:	46de      	mov	lr, fp
    10a0:	4657      	mov	r7, sl
    10a2:	4646      	mov	r6, r8
    10a4:	b5c0      	push	{r6, r7, lr}
    10a6:	b082      	sub	sp, #8
    10a8:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    10aa:	2200      	movs	r2, #0
    10ac:	4b17      	ldr	r3, [pc, #92]	; (110c <sd_mmc_spi_start_read_blocks+0x70>)
    10ae:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    10b0:	1e4c      	subs	r4, r1, #1
    10b2:	b2a4      	uxth	r4, r4
    10b4:	2900      	cmp	r1, #0
    10b6:	d026      	beq.n	1106 <sd_mmc_spi_start_read_blocks+0x6a>
    10b8:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    10ba:	4b15      	ldr	r3, [pc, #84]	; (1110 <sd_mmc_spi_start_read_blocks+0x74>)
    10bc:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    10be:	4f15      	ldr	r7, [pc, #84]	; (1114 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    10c0:	47d0      	blx	sl
    10c2:	4680      	mov	r8, r0
    10c4:	2800      	cmp	r0, #0
    10c6:	d017      	beq.n	10f8 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    10c8:	883a      	ldrh	r2, [r7, #0]
    10ca:	465b      	mov	r3, fp
    10cc:	1999      	adds	r1, r3, r6
    10ce:	23ff      	movs	r3, #255	; 0xff
    10d0:	4811      	ldr	r0, [pc, #68]	; (1118 <sd_mmc_spi_start_read_blocks+0x7c>)
    10d2:	4d12      	ldr	r5, [pc, #72]	; (111c <sd_mmc_spi_start_read_blocks+0x80>)
    10d4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    10d6:	883b      	ldrh	r3, [r7, #0]
    10d8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    10da:	4a11      	ldr	r2, [pc, #68]	; (1120 <sd_mmc_spi_start_read_blocks+0x84>)
    10dc:	6811      	ldr	r1, [r2, #0]
    10de:	468c      	mov	ip, r1
    10e0:	4463      	add	r3, ip
    10e2:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    10e4:	23ff      	movs	r3, #255	; 0xff
    10e6:	2202      	movs	r2, #2
    10e8:	a901      	add	r1, sp, #4
    10ea:	480b      	ldr	r0, [pc, #44]	; (1118 <sd_mmc_spi_start_read_blocks+0x7c>)
    10ec:	47a8      	blx	r5
	while (nb_block--) {
    10ee:	3c01      	subs	r4, #1
    10f0:	b2a4      	uxth	r4, r4
    10f2:	4b0c      	ldr	r3, [pc, #48]	; (1124 <sd_mmc_spi_start_read_blocks+0x88>)
    10f4:	429c      	cmp	r4, r3
    10f6:	d1e3      	bne.n	10c0 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    10f8:	4640      	mov	r0, r8
    10fa:	b002      	add	sp, #8
    10fc:	bc1c      	pop	{r2, r3, r4}
    10fe:	4690      	mov	r8, r2
    1100:	469a      	mov	sl, r3
    1102:	46a3      	mov	fp, r4
    1104:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    1106:	2301      	movs	r3, #1
    1108:	4698      	mov	r8, r3
    110a:	e7f5      	b.n	10f8 <sd_mmc_spi_start_read_blocks+0x5c>
    110c:	200003af 	.word	0x200003af
    1110:	00000be1 	.word	0x00000be1
    1114:	200003a8 	.word	0x200003a8
    1118:	2000036c 	.word	0x2000036c
    111c:	00005035 	.word	0x00005035
    1120:	200003b8 	.word	0x200003b8
    1124:	0000ffff 	.word	0x0000ffff

00001128 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    1128:	2001      	movs	r0, #1
    112a:	4770      	bx	lr

0000112c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    112c:	b5f0      	push	{r4, r5, r6, r7, lr}
    112e:	46c6      	mov	lr, r8
    1130:	b500      	push	{lr}
    1132:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1134:	2200      	movs	r2, #0
    1136:	4b15      	ldr	r3, [pc, #84]	; (118c <sd_mmc_spi_start_write_blocks+0x60>)
    1138:	701a      	strb	r2, [r3, #0]
	pos = 0;
    113a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    113c:	4f14      	ldr	r7, [pc, #80]	; (1190 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    113e:	4e15      	ldr	r6, [pc, #84]	; (1194 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1140:	e000      	b.n	1144 <sd_mmc_spi_start_write_blocks+0x18>
{
    1142:	0021      	movs	r1, r4
	while (nb_block--) {
    1144:	1e4c      	subs	r4, r1, #1
    1146:	b2a4      	uxth	r4, r4
    1148:	2900      	cmp	r1, #0
    114a:	d01b      	beq.n	1184 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    114c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    114e:	8832      	ldrh	r2, [r6, #0]
    1150:	4643      	mov	r3, r8
    1152:	1959      	adds	r1, r3, r5
    1154:	4810      	ldr	r0, [pc, #64]	; (1198 <sd_mmc_spi_start_write_blocks+0x6c>)
    1156:	4b11      	ldr	r3, [pc, #68]	; (119c <sd_mmc_spi_start_write_blocks+0x70>)
    1158:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    115a:	8833      	ldrh	r3, [r6, #0]
    115c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    115e:	4a10      	ldr	r2, [pc, #64]	; (11a0 <sd_mmc_spi_start_write_blocks+0x74>)
    1160:	6811      	ldr	r1, [r2, #0]
    1162:	468c      	mov	ip, r1
    1164:	4463      	add	r3, ip
    1166:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    1168:	4b0e      	ldr	r3, [pc, #56]	; (11a4 <sd_mmc_spi_start_write_blocks+0x78>)
    116a:	4798      	blx	r3
    116c:	2800      	cmp	r0, #0
    116e:	d00a      	beq.n	1186 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1170:	2c00      	cmp	r4, #0
    1172:	d0e6      	beq.n	1142 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1174:	4b0c      	ldr	r3, [pc, #48]	; (11a8 <sd_mmc_spi_start_write_blocks+0x7c>)
    1176:	4798      	blx	r3
    1178:	2800      	cmp	r0, #0
    117a:	d1e2      	bne.n	1142 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    117c:	2205      	movs	r2, #5
    117e:	4b03      	ldr	r3, [pc, #12]	; (118c <sd_mmc_spi_start_write_blocks+0x60>)
    1180:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1182:	e000      	b.n	1186 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1184:	2001      	movs	r0, #1
}
    1186:	bc04      	pop	{r2}
    1188:	4690      	mov	r8, r2
    118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    118c:	200003af 	.word	0x200003af
    1190:	00000abd 	.word	0x00000abd
    1194:	200003a8 	.word	0x200003a8
    1198:	2000036c 	.word	0x2000036c
    119c:	000051fd 	.word	0x000051fd
    11a0:	200003b8 	.word	0x200003b8
    11a4:	00000c4d 	.word	0x00000c4d
    11a8:	00000b05 	.word	0x00000b05

000011ac <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    11ac:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    11ae:	4b05      	ldr	r3, [pc, #20]	; (11c4 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    11b0:	4798      	blx	r3
    11b2:	2800      	cmp	r0, #0
    11b4:	d103      	bne.n	11be <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    11b6:	2205      	movs	r2, #5
    11b8:	4b03      	ldr	r3, [pc, #12]	; (11c8 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    11ba:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    11bc:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    11be:	4b03      	ldr	r3, [pc, #12]	; (11cc <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    11c0:	4798      	blx	r3
    11c2:	e7fb      	b.n	11bc <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    11c4:	00000b05 	.word	0x00000b05
    11c8:	200003af 	.word	0x200003af
    11cc:	00000b69 	.word	0x00000b69

000011d0 <delay_init>:
    11d0:	b570      	push	{r4, r5, r6, lr}
    11d2:	2000      	movs	r0, #0
    11d4:	4b08      	ldr	r3, [pc, #32]	; (11f8 <delay_init+0x28>)
    11d6:	4798      	blx	r3
    11d8:	0005      	movs	r5, r0
    11da:	4c08      	ldr	r4, [pc, #32]	; (11fc <delay_init+0x2c>)
    11dc:	21fa      	movs	r1, #250	; 0xfa
    11de:	0089      	lsls	r1, r1, #2
    11e0:	47a0      	blx	r4
    11e2:	4b07      	ldr	r3, [pc, #28]	; (1200 <delay_init+0x30>)
    11e4:	6018      	str	r0, [r3, #0]
    11e6:	4907      	ldr	r1, [pc, #28]	; (1204 <delay_init+0x34>)
    11e8:	0028      	movs	r0, r5
    11ea:	47a0      	blx	r4
    11ec:	4b06      	ldr	r3, [pc, #24]	; (1208 <delay_init+0x38>)
    11ee:	6018      	str	r0, [r3, #0]
    11f0:	2205      	movs	r2, #5
    11f2:	4b06      	ldr	r3, [pc, #24]	; (120c <delay_init+0x3c>)
    11f4:	601a      	str	r2, [r3, #0]
    11f6:	bd70      	pop	{r4, r5, r6, pc}
    11f8:	00005f3d 	.word	0x00005f3d
    11fc:	0000b8fd 	.word	0x0000b8fd
    1200:	20000004 	.word	0x20000004
    1204:	000f4240 	.word	0x000f4240
    1208:	20000008 	.word	0x20000008
    120c:	e000e010 	.word	0xe000e010

00001210 <delay_cycles_ms>:
    1210:	b530      	push	{r4, r5, lr}
    1212:	4b08      	ldr	r3, [pc, #32]	; (1234 <delay_cycles_ms+0x24>)
    1214:	681c      	ldr	r4, [r3, #0]
    1216:	4a08      	ldr	r2, [pc, #32]	; (1238 <delay_cycles_ms+0x28>)
    1218:	2500      	movs	r5, #0
    121a:	2180      	movs	r1, #128	; 0x80
    121c:	0249      	lsls	r1, r1, #9
    121e:	3801      	subs	r0, #1
    1220:	d307      	bcc.n	1232 <delay_cycles_ms+0x22>
    1222:	2c00      	cmp	r4, #0
    1224:	d0fb      	beq.n	121e <delay_cycles_ms+0xe>
    1226:	6054      	str	r4, [r2, #4]
    1228:	6095      	str	r5, [r2, #8]
    122a:	6813      	ldr	r3, [r2, #0]
    122c:	420b      	tst	r3, r1
    122e:	d0fc      	beq.n	122a <delay_cycles_ms+0x1a>
    1230:	e7f5      	b.n	121e <delay_cycles_ms+0xe>
    1232:	bd30      	pop	{r4, r5, pc}
    1234:	20000004 	.word	0x20000004
    1238:	e000e010 	.word	0xe000e010

0000123c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    123c:	b510      	push	{r4, lr}
	if (gpfIsr) {
    123e:	4b03      	ldr	r3, [pc, #12]	; (124c <chip_isr+0x10>)
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	2b00      	cmp	r3, #0
    1244:	d000      	beq.n	1248 <chip_isr+0xc>
		gpfIsr();
    1246:	4798      	blx	r3
	}
}
    1248:	bd10      	pop	{r4, pc}
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	200003c0 	.word	0x200003c0

00001250 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	b082      	sub	sp, #8
	gpfIsr = NULL;
    1254:	2300      	movs	r3, #0
    1256:	4a15      	ldr	r2, [pc, #84]	; (12ac <nm_bsp_init+0x5c>)
    1258:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    125a:	ac01      	add	r4, sp, #4
    125c:	2501      	movs	r5, #1
    125e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1260:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1262:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    1264:	0021      	movs	r1, r4
    1266:	201b      	movs	r0, #27
    1268:	4e11      	ldr	r6, [pc, #68]	; (12b0 <nm_bsp_init+0x60>)
    126a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    126c:	0021      	movs	r1, r4
    126e:	201c      	movs	r0, #28
    1270:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    1272:	0021      	movs	r1, r4
    1274:	2028      	movs	r0, #40	; 0x28
    1276:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1278:	4b0e      	ldr	r3, [pc, #56]	; (12b4 <nm_bsp_init+0x64>)
    127a:	2280      	movs	r2, #128	; 0x80
    127c:	0552      	lsls	r2, r2, #21
    127e:	615a      	str	r2, [r3, #20]
    1280:	2280      	movs	r2, #128	; 0x80
    1282:	0512      	lsls	r2, r2, #20
    1284:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    1286:	4b0c      	ldr	r3, [pc, #48]	; (12b8 <nm_bsp_init+0x68>)
    1288:	681b      	ldr	r3, [r3, #0]
    128a:	421d      	tst	r5, r3
    128c:	d003      	beq.n	1296 <nm_bsp_init+0x46>
    128e:	4b0a      	ldr	r3, [pc, #40]	; (12b8 <nm_bsp_init+0x68>)
    1290:	681b      	ldr	r3, [r3, #0]
    1292:	079b      	lsls	r3, r3, #30
    1294:	d401      	bmi.n	129a <nm_bsp_init+0x4a>
	    delay_init();
    1296:	4b09      	ldr	r3, [pc, #36]	; (12bc <nm_bsp_init+0x6c>)
    1298:	4798      	blx	r3
	cpu_irq_enable();
    129a:	2201      	movs	r2, #1
    129c:	4b08      	ldr	r3, [pc, #32]	; (12c0 <nm_bsp_init+0x70>)
    129e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    12a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    12a4:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    12a6:	2000      	movs	r0, #0
    12a8:	b002      	add	sp, #8
    12aa:	bd70      	pop	{r4, r5, r6, pc}
    12ac:	200003c0 	.word	0x200003c0
    12b0:	00004701 	.word	0x00004701
    12b4:	41004400 	.word	0x41004400
    12b8:	e000e010 	.word	0xe000e010
    12bc:	000011d1 	.word	0x000011d1
    12c0:	2000000e 	.word	0x2000000e

000012c4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    12c4:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    12c6:	1e44      	subs	r4, r0, #1
    12c8:	2800      	cmp	r0, #0
    12ca:	d004      	beq.n	12d6 <nm_bsp_sleep+0x12>
		delay_ms(1);
    12cc:	4d02      	ldr	r5, [pc, #8]	; (12d8 <nm_bsp_sleep+0x14>)
    12ce:	2001      	movs	r0, #1
    12d0:	47a8      	blx	r5
	while (u32TimeMsec--) {
    12d2:	3c01      	subs	r4, #1
    12d4:	d2fb      	bcs.n	12ce <nm_bsp_sleep+0xa>
	}
}
    12d6:	bd70      	pop	{r4, r5, r6, pc}
    12d8:	00001211 	.word	0x00001211

000012dc <nm_bsp_reset>:
{
    12dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12de:	4c07      	ldr	r4, [pc, #28]	; (12fc <nm_bsp_reset+0x20>)
    12e0:	2780      	movs	r7, #128	; 0x80
    12e2:	057f      	lsls	r7, r7, #21
    12e4:	6167      	str	r7, [r4, #20]
    12e6:	2580      	movs	r5, #128	; 0x80
    12e8:	052d      	lsls	r5, r5, #20
    12ea:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    12ec:	2001      	movs	r0, #1
    12ee:	4e04      	ldr	r6, [pc, #16]	; (1300 <nm_bsp_reset+0x24>)
    12f0:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    12f2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    12f4:	200a      	movs	r0, #10
    12f6:	47b0      	blx	r6
    12f8:	61a5      	str	r5, [r4, #24]
}
    12fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12fc:	41004400 	.word	0x41004400
    1300:	000012c5 	.word	0x000012c5

00001304 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    1304:	b510      	push	{r4, lr}
    1306:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    1308:	4b0e      	ldr	r3, [pc, #56]	; (1344 <nm_bsp_register_isr+0x40>)
    130a:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    130c:	ac01      	add	r4, sp, #4
    130e:	0020      	movs	r0, r4
    1310:	4b0d      	ldr	r3, [pc, #52]	; (1348 <nm_bsp_register_isr+0x44>)
    1312:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    1314:	2329      	movs	r3, #41	; 0x29
    1316:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    1318:	2300      	movs	r3, #0
    131a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    131c:	3301      	adds	r3, #1
    131e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    1320:	3301      	adds	r3, #1
    1322:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    1324:	0021      	movs	r1, r4
    1326:	2009      	movs	r0, #9
    1328:	4b08      	ldr	r3, [pc, #32]	; (134c <nm_bsp_register_isr+0x48>)
    132a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    132c:	2200      	movs	r2, #0
    132e:	2109      	movs	r1, #9
    1330:	4807      	ldr	r0, [pc, #28]	; (1350 <nm_bsp_register_isr+0x4c>)
    1332:	4b08      	ldr	r3, [pc, #32]	; (1354 <nm_bsp_register_isr+0x50>)
    1334:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1336:	2100      	movs	r1, #0
    1338:	2009      	movs	r0, #9
    133a:	4b07      	ldr	r3, [pc, #28]	; (1358 <nm_bsp_register_isr+0x54>)
    133c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    133e:	b004      	add	sp, #16
    1340:	bd10      	pop	{r4, pc}
    1342:	46c0      	nop			; (mov r8, r8)
    1344:	200003c0 	.word	0x200003c0
    1348:	00004675 	.word	0x00004675
    134c:	00004689 	.word	0x00004689
    1350:	0000123d 	.word	0x0000123d
    1354:	00004531 	.word	0x00004531
    1358:	0000455d 	.word	0x0000455d

0000135c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    135c:	b510      	push	{r4, lr}
	if (u8Enable) {
    135e:	2800      	cmp	r0, #0
    1360:	d104      	bne.n	136c <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    1362:	2100      	movs	r1, #0
    1364:	2009      	movs	r0, #9
    1366:	4b04      	ldr	r3, [pc, #16]	; (1378 <nm_bsp_interrupt_ctrl+0x1c>)
    1368:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    136a:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    136c:	2100      	movs	r1, #0
    136e:	2009      	movs	r0, #9
    1370:	4b02      	ldr	r3, [pc, #8]	; (137c <nm_bsp_interrupt_ctrl+0x20>)
    1372:	4798      	blx	r3
    1374:	e7f9      	b.n	136a <nm_bsp_interrupt_ctrl+0xe>
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	0000457d 	.word	0x0000457d
    137c:	0000455d 	.word	0x0000455d

00001380 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    1380:	b530      	push	{r4, r5, lr}
    1382:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    1384:	4c30      	ldr	r4, [pc, #192]	; (1448 <nm_bus_init+0xc8>)
    1386:	230e      	movs	r3, #14
    1388:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    138a:	2300      	movs	r3, #0
    138c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    138e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    1390:	a901      	add	r1, sp, #4
    1392:	2201      	movs	r2, #1
    1394:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    1396:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1398:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    139a:	200e      	movs	r0, #14
    139c:	4b2b      	ldr	r3, [pc, #172]	; (144c <nm_bus_init+0xcc>)
    139e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    13a0:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    13a2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    13a4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13a6:	2900      	cmp	r1, #0
    13a8:	d104      	bne.n	13b4 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    13aa:	0953      	lsrs	r3, r2, #5
    13ac:	01db      	lsls	r3, r3, #7
    13ae:	4928      	ldr	r1, [pc, #160]	; (1450 <nm_bus_init+0xd0>)
    13b0:	468c      	mov	ip, r1
    13b2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13b4:	211f      	movs	r1, #31
    13b6:	4011      	ands	r1, r2
    13b8:	2201      	movs	r2, #1
    13ba:	0010      	movs	r0, r2
    13bc:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    13be:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    13c0:	ac02      	add	r4, sp, #8
    13c2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    13c4:	2300      	movs	r3, #0
    13c6:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    13c8:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    13ca:	21c0      	movs	r1, #192	; 0xc0
    13cc:	0389      	lsls	r1, r1, #14
    13ce:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    13d0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    13d2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    13d4:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    13d6:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    13d8:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    13da:	3223      	adds	r2, #35	; 0x23
    13dc:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    13de:	3a18      	subs	r2, #24
    13e0:	2100      	movs	r1, #0
    13e2:	a808      	add	r0, sp, #32
    13e4:	4b1b      	ldr	r3, [pc, #108]	; (1454 <nm_bus_init+0xd4>)
    13e6:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    13e8:	4b1b      	ldr	r3, [pc, #108]	; (1458 <nm_bus_init+0xd8>)
    13ea:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    13ec:	4b1b      	ldr	r3, [pc, #108]	; (145c <nm_bus_init+0xdc>)
    13ee:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    13f0:	2301      	movs	r3, #1
    13f2:	425b      	negs	r3, r3
    13f4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    13f6:	4b1a      	ldr	r3, [pc, #104]	; (1460 <nm_bus_init+0xe0>)
    13f8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    13fa:	4b1a      	ldr	r3, [pc, #104]	; (1464 <nm_bus_init+0xe4>)
    13fc:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    13fe:	0022      	movs	r2, r4
    1400:	4919      	ldr	r1, [pc, #100]	; (1468 <nm_bus_init+0xe8>)
    1402:	481a      	ldr	r0, [pc, #104]	; (146c <nm_bus_init+0xec>)
    1404:	4b1a      	ldr	r3, [pc, #104]	; (1470 <nm_bus_init+0xf0>)
    1406:	4798      	blx	r3
    1408:	2800      	cmp	r0, #0
    140a:	d11a      	bne.n	1442 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    140c:	4d17      	ldr	r5, [pc, #92]	; (146c <nm_bus_init+0xec>)
    140e:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1410:	0020      	movs	r0, r4
    1412:	4b18      	ldr	r3, [pc, #96]	; (1474 <nm_bus_init+0xf4>)
    1414:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1416:	231f      	movs	r3, #31
    1418:	4018      	ands	r0, r3
    141a:	3b1e      	subs	r3, #30
    141c:	4083      	lsls	r3, r0
    141e:	4a16      	ldr	r2, [pc, #88]	; (1478 <nm_bus_init+0xf8>)
    1420:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1422:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1424:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    1426:	2b00      	cmp	r3, #0
    1428:	d1fc      	bne.n	1424 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    142a:	6823      	ldr	r3, [r4, #0]
    142c:	2202      	movs	r2, #2
    142e:	4313      	orrs	r3, r2
    1430:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    1432:	4b12      	ldr	r3, [pc, #72]	; (147c <nm_bus_init+0xfc>)
    1434:	4798      	blx	r3
	nm_bsp_sleep(1);
    1436:	2001      	movs	r0, #1
    1438:	4b11      	ldr	r3, [pc, #68]	; (1480 <nm_bus_init+0x100>)
    143a:	4798      	blx	r3
#endif
	return result;
    143c:	2000      	movs	r0, #0
}
    143e:	b011      	add	sp, #68	; 0x44
    1440:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    1442:	2006      	movs	r0, #6
    1444:	4240      	negs	r0, r0
    1446:	e7fa      	b.n	143e <nm_bus_init+0xbe>
    1448:	20000ef4 	.word	0x20000ef4
    144c:	00004701 	.word	0x00004701
    1450:	41004400 	.word	0x41004400
    1454:	0000bcef 	.word	0x0000bcef
    1458:	000c0002 	.word	0x000c0002
    145c:	000d0002 	.word	0x000d0002
    1460:	000f0002 	.word	0x000f0002
    1464:	00b71b00 	.word	0x00b71b00
    1468:	42001000 	.word	0x42001000
    146c:	20000ef8 	.word	0x20000ef8
    1470:	00004e5d 	.word	0x00004e5d
    1474:	00004d15 	.word	0x00004d15
    1478:	e000e100 	.word	0xe000e100
    147c:	000012dd 	.word	0x000012dd
    1480:	000012c5 	.word	0x000012c5

00001484 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    1484:	b5f0      	push	{r4, r5, r6, r7, lr}
    1486:	46de      	mov	lr, fp
    1488:	4657      	mov	r7, sl
    148a:	464e      	mov	r6, r9
    148c:	4645      	mov	r5, r8
    148e:	b5e0      	push	{r5, r6, r7, lr}
    1490:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    1492:	2803      	cmp	r0, #3
    1494:	d000      	beq.n	1498 <nm_bus_ioctl+0x14>
    1496:	e075      	b.n	1584 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    1498:	680e      	ldr	r6, [r1, #0]
    149a:	684d      	ldr	r5, [r1, #4]
    149c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    149e:	2200      	movs	r2, #0
    14a0:	466b      	mov	r3, sp
    14a2:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    14a4:	2d00      	cmp	r5, #0
    14a6:	d027      	beq.n	14f8 <nm_bus_ioctl+0x74>
    14a8:	2c00      	cmp	r4, #0
    14aa:	d065      	beq.n	1578 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    14ac:	2e00      	cmp	r6, #0
    14ae:	d100      	bne.n	14b2 <nm_bus_ioctl+0x2e>
    14b0:	e077      	b.n	15a2 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    14b2:	2300      	movs	r3, #0
    14b4:	4698      	mov	r8, r3
    14b6:	2300      	movs	r3, #0
    14b8:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    14ba:	2201      	movs	r2, #1
    14bc:	493b      	ldr	r1, [pc, #236]	; (15ac <nm_bus_ioctl+0x128>)
    14be:	483c      	ldr	r0, [pc, #240]	; (15b0 <nm_bus_ioctl+0x12c>)
    14c0:	4b3c      	ldr	r3, [pc, #240]	; (15b4 <nm_bus_ioctl+0x130>)
    14c2:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    14c4:	4b3a      	ldr	r3, [pc, #232]	; (15b0 <nm_bus_ioctl+0x12c>)
    14c6:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    14c8:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    14ca:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14cc:	4699      	mov	r9, r3
			pu8Miso++;
    14ce:	4659      	mov	r1, fp
    14d0:	424b      	negs	r3, r1
    14d2:	4159      	adcs	r1, r3
    14d4:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    14d6:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    14d8:	4653      	mov	r3, sl
    14da:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    14dc:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    14de:	4239      	tst	r1, r7
    14e0:	d0fc      	beq.n	14dc <nm_bus_ioctl+0x58>
    14e2:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    14e4:	4239      	tst	r1, r7
    14e6:	d0fc      	beq.n	14e2 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    14e8:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    14ea:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    14ec:	4211      	tst	r1, r2
    14ee:	d0fc      	beq.n	14ea <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    14f0:	4649      	mov	r1, r9
    14f2:	7989      	ldrb	r1, [r1, #6]
    14f4:	468c      	mov	ip, r1
    14f6:	e011      	b.n	151c <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    14f8:	2e00      	cmp	r6, #0
    14fa:	d03a      	beq.n	1572 <nm_bus_ioctl+0xee>
    14fc:	2c00      	cmp	r4, #0
    14fe:	d03e      	beq.n	157e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1500:	2300      	movs	r3, #0
    1502:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    1504:	3301      	adds	r3, #1
    1506:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    1508:	466b      	mov	r3, sp
    150a:	1ddd      	adds	r5, r3, #7
    150c:	e7d5      	b.n	14ba <nm_bus_ioctl+0x36>
    150e:	4660      	mov	r0, ip
    1510:	2801      	cmp	r0, #1
    1512:	d00d      	beq.n	1530 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1514:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1516:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    1518:	2900      	cmp	r1, #0
    151a:	d00d      	beq.n	1538 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    151c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    151e:	4211      	tst	r1, r2
    1520:	d0fc      	beq.n	151c <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1522:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    1524:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1526:	4210      	tst	r0, r2
    1528:	d0f1      	beq.n	150e <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    152a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    152c:	311e      	adds	r1, #30
    152e:	e7ee      	b.n	150e <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1530:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1532:	05c0      	lsls	r0, r0, #23
    1534:	0dc0      	lsrs	r0, r0, #23
    1536:	e7ef      	b.n	1518 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    1538:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    153a:	3c01      	subs	r4, #1
    153c:	b2a4      	uxth	r4, r4
			pu8Miso++;
    153e:	445d      	add	r5, fp
			pu8Mosi++;
    1540:	4643      	mov	r3, r8
    1542:	4259      	negs	r1, r3
    1544:	414b      	adcs	r3, r1
    1546:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    1548:	2c00      	cmp	r4, #0
    154a:	d1c4      	bne.n	14d6 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    154c:	4b18      	ldr	r3, [pc, #96]	; (15b0 <nm_bus_ioctl+0x12c>)
    154e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    1550:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1552:	7e0b      	ldrb	r3, [r1, #24]
    1554:	4213      	tst	r3, r2
    1556:	d0fc      	beq.n	1552 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    1558:	2200      	movs	r2, #0
    155a:	4914      	ldr	r1, [pc, #80]	; (15ac <nm_bus_ioctl+0x128>)
    155c:	4814      	ldr	r0, [pc, #80]	; (15b0 <nm_bus_ioctl+0x12c>)
    155e:	4b15      	ldr	r3, [pc, #84]	; (15b4 <nm_bus_ioctl+0x130>)
    1560:	4798      	blx	r3
	return M2M_SUCCESS;
    1562:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    1564:	b003      	add	sp, #12
    1566:	bc3c      	pop	{r2, r3, r4, r5}
    1568:	4690      	mov	r8, r2
    156a:	4699      	mov	r9, r3
    156c:	46a2      	mov	sl, r4
    156e:	46ab      	mov	fp, r5
    1570:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    1572:	200f      	movs	r0, #15
    1574:	4240      	negs	r0, r0
    1576:	e7f5      	b.n	1564 <nm_bus_ioctl+0xe0>
    1578:	200f      	movs	r0, #15
    157a:	4240      	negs	r0, r0
    157c:	e7f2      	b.n	1564 <nm_bus_ioctl+0xe0>
    157e:	200f      	movs	r0, #15
    1580:	4240      	negs	r0, r0
		break;
    1582:	e7ef      	b.n	1564 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    1584:	2283      	movs	r2, #131	; 0x83
    1586:	0052      	lsls	r2, r2, #1
    1588:	490b      	ldr	r1, [pc, #44]	; (15b8 <nm_bus_ioctl+0x134>)
    158a:	480c      	ldr	r0, [pc, #48]	; (15bc <nm_bus_ioctl+0x138>)
    158c:	4b0c      	ldr	r3, [pc, #48]	; (15c0 <nm_bus_ioctl+0x13c>)
    158e:	4798      	blx	r3
    1590:	480c      	ldr	r0, [pc, #48]	; (15c4 <nm_bus_ioctl+0x140>)
    1592:	4b0d      	ldr	r3, [pc, #52]	; (15c8 <nm_bus_ioctl+0x144>)
    1594:	4798      	blx	r3
    1596:	200d      	movs	r0, #13
    1598:	4b0c      	ldr	r3, [pc, #48]	; (15cc <nm_bus_ioctl+0x148>)
    159a:	4798      	blx	r3
			s8Ret = -1;
    159c:	2001      	movs	r0, #1
    159e:	4240      	negs	r0, r0
	return s8Ret;
    15a0:	e7e0      	b.n	1564 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    15a2:	2301      	movs	r3, #1
    15a4:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    15a6:	466b      	mov	r3, sp
    15a8:	1dde      	adds	r6, r3, #7
    15aa:	e784      	b.n	14b6 <nm_bus_ioctl+0x32>
    15ac:	20000ef4 	.word	0x20000ef4
    15b0:	20000ef8 	.word	0x20000ef8
    15b4:	00005109 	.word	0x00005109
    15b8:	0000d540 	.word	0x0000d540
    15bc:	0000d550 	.word	0x0000d550
    15c0:	0000be51 	.word	0x0000be51
    15c4:	0000d564 	.word	0x0000d564
    15c8:	0000bf6d 	.word	0x0000bf6d
    15cc:	0000be85 	.word	0x0000be85

000015d0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    15d0:	b530      	push	{r4, r5, lr}
    15d2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    15d4:	ab01      	add	r3, sp, #4
    15d6:	2200      	movs	r2, #0
    15d8:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    15da:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    15dc:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15de:	4d13      	ldr	r5, [pc, #76]	; (162c <nm_bus_deinit+0x5c>)
    15e0:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    15e2:	0020      	movs	r0, r4
    15e4:	4b12      	ldr	r3, [pc, #72]	; (1630 <nm_bus_deinit+0x60>)
    15e6:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    15e8:	231f      	movs	r3, #31
    15ea:	4018      	ands	r0, r3
    15ec:	3b1e      	subs	r3, #30
    15ee:	4083      	lsls	r3, r0
    15f0:	2280      	movs	r2, #128	; 0x80
    15f2:	4910      	ldr	r1, [pc, #64]	; (1634 <nm_bus_deinit+0x64>)
    15f4:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    15f6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    15f8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    15fa:	2b00      	cmp	r3, #0
    15fc:	d1fc      	bne.n	15f8 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    15fe:	338f      	adds	r3, #143	; 0x8f
    1600:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1602:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1604:	6823      	ldr	r3, [r4, #0]
    1606:	2202      	movs	r2, #2
    1608:	4393      	bics	r3, r2
    160a:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    160c:	a901      	add	r1, sp, #4
    160e:	200c      	movs	r0, #12
    1610:	4c09      	ldr	r4, [pc, #36]	; (1638 <nm_bus_deinit+0x68>)
    1612:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    1614:	a901      	add	r1, sp, #4
    1616:	200f      	movs	r0, #15
    1618:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    161a:	a901      	add	r1, sp, #4
    161c:	200d      	movs	r0, #13
    161e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    1620:	a901      	add	r1, sp, #4
    1622:	200e      	movs	r0, #14
    1624:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    1626:	2000      	movs	r0, #0
    1628:	b003      	add	sp, #12
    162a:	bd30      	pop	{r4, r5, pc}
    162c:	20000ef8 	.word	0x20000ef8
    1630:	00004d15 	.word	0x00004d15
    1634:	e000e100 	.word	0xe000e100
    1638:	00004701 	.word	0x00004701

0000163c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    163c:	2a00      	cmp	r2, #0
    163e:	d006      	beq.n	164e <m2m_memcpy+0x12>
    1640:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    1642:	780b      	ldrb	r3, [r1, #0]
    1644:	7003      	strb	r3, [r0, #0]
		pDst++;
    1646:	3001      	adds	r0, #1
		pSrc++;
    1648:	3101      	adds	r1, #1
	}while(--sz);
    164a:	4290      	cmp	r0, r2
    164c:	d1f9      	bne.n	1642 <m2m_memcpy+0x6>
}
    164e:	4770      	bx	lr

00001650 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    1650:	2a00      	cmp	r2, #0
    1652:	d004      	beq.n	165e <m2m_memset+0xe>
    1654:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    1656:	7001      	strb	r1, [r0, #0]
		pBuf++;
    1658:	3001      	adds	r0, #1
	}while(--sz);
    165a:	4290      	cmp	r0, r2
    165c:	d1fb      	bne.n	1656 <m2m_memset+0x6>
}
    165e:	4770      	bx	lr

00001660 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    1660:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    1662:	7802      	ldrb	r2, [r0, #0]
    1664:	2a00      	cmp	r2, #0
    1666:	d007      	beq.n	1678 <m2m_strlen+0x18>
    1668:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    166a:	3001      	adds	r0, #1
    166c:	b280      	uxth	r0, r0
		pcStr++;
    166e:	3301      	adds	r3, #1
	while(*pcStr)
    1670:	781a      	ldrb	r2, [r3, #0]
    1672:	2a00      	cmp	r2, #0
    1674:	d1f9      	bne.n	166a <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    1676:	4770      	bx	lr
	uint16	u16StrLen = 0;
    1678:	2000      	movs	r0, #0
    167a:	e7fc      	b.n	1676 <m2m_strlen+0x16>

0000167c <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    167c:	4a02      	ldr	r2, [pc, #8]	; (1688 <isr+0xc>)
    167e:	78d3      	ldrb	r3, [r2, #3]
    1680:	3301      	adds	r3, #1
    1682:	b2db      	uxtb	r3, r3
    1684:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    1686:	4770      	bx	lr
    1688:	20000f34 	.word	0x20000f34

0000168c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    168c:	4770      	bx	lr
	...

00001690 <hif_set_rx_done>:
{
    1690:	b500      	push	{lr}
    1692:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    1694:	2200      	movs	r2, #0
    1696:	4b0a      	ldr	r3, [pc, #40]	; (16c0 <hif_set_rx_done+0x30>)
    1698:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    169a:	2001      	movs	r0, #1
    169c:	4b09      	ldr	r3, [pc, #36]	; (16c4 <hif_set_rx_done+0x34>)
    169e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    16a0:	a901      	add	r1, sp, #4
    16a2:	4809      	ldr	r0, [pc, #36]	; (16c8 <hif_set_rx_done+0x38>)
    16a4:	4b09      	ldr	r3, [pc, #36]	; (16cc <hif_set_rx_done+0x3c>)
    16a6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    16a8:	2800      	cmp	r0, #0
    16aa:	d001      	beq.n	16b0 <hif_set_rx_done+0x20>
}
    16ac:	b003      	add	sp, #12
    16ae:	bd00      	pop	{pc}
	reg |= NBIT1;
    16b0:	2102      	movs	r1, #2
    16b2:	9b01      	ldr	r3, [sp, #4]
    16b4:	4319      	orrs	r1, r3
    16b6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    16b8:	4803      	ldr	r0, [pc, #12]	; (16c8 <hif_set_rx_done+0x38>)
    16ba:	4b05      	ldr	r3, [pc, #20]	; (16d0 <hif_set_rx_done+0x40>)
    16bc:	4798      	blx	r3
    16be:	e7f5      	b.n	16ac <hif_set_rx_done+0x1c>
    16c0:	20000f34 	.word	0x20000f34
    16c4:	0000135d 	.word	0x0000135d
    16c8:	00001070 	.word	0x00001070
    16cc:	00002aa1 	.word	0x00002aa1
    16d0:	00002aad 	.word	0x00002aad

000016d4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    16d4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    16d6:	4b0c      	ldr	r3, [pc, #48]	; (1708 <hif_chip_wake+0x34>)
    16d8:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    16da:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    16dc:	2b00      	cmp	r3, #0
    16de:	d10d      	bne.n	16fc <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    16e0:	4b09      	ldr	r3, [pc, #36]	; (1708 <hif_chip_wake+0x34>)
    16e2:	785b      	ldrb	r3, [r3, #1]
    16e4:	2b00      	cmp	r3, #0
    16e6:	d103      	bne.n	16f0 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    16e8:	4b07      	ldr	r3, [pc, #28]	; (1708 <hif_chip_wake+0x34>)
    16ea:	781b      	ldrb	r3, [r3, #0]
    16ec:	2b00      	cmp	r3, #0
    16ee:	d106      	bne.n	16fe <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    16f0:	4a05      	ldr	r2, [pc, #20]	; (1708 <hif_chip_wake+0x34>)
    16f2:	7853      	ldrb	r3, [r2, #1]
    16f4:	3301      	adds	r3, #1
    16f6:	b2db      	uxtb	r3, r3
    16f8:	7053      	strb	r3, [r2, #1]
    16fa:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    16fc:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    16fe:	4b03      	ldr	r3, [pc, #12]	; (170c <hif_chip_wake+0x38>)
    1700:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    1702:	2800      	cmp	r0, #0
    1704:	d0f4      	beq.n	16f0 <hif_chip_wake+0x1c>
    1706:	e7f9      	b.n	16fc <hif_chip_wake+0x28>
    1708:	20000f34 	.word	0x20000f34
    170c:	00002789 	.word	0x00002789

00001710 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    1710:	4b05      	ldr	r3, [pc, #20]	; (1728 <hif_chip_sleep_sc+0x18>)
    1712:	785b      	ldrb	r3, [r3, #1]
    1714:	2b00      	cmp	r3, #0
    1716:	d004      	beq.n	1722 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    1718:	4a03      	ldr	r2, [pc, #12]	; (1728 <hif_chip_sleep_sc+0x18>)
    171a:	7853      	ldrb	r3, [r2, #1]
    171c:	3b01      	subs	r3, #1
    171e:	b2db      	uxtb	r3, r3
    1720:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    1722:	2000      	movs	r0, #0
    1724:	4770      	bx	lr
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	20000f34 	.word	0x20000f34

0000172c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    172c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    172e:	4b0b      	ldr	r3, [pc, #44]	; (175c <hif_chip_sleep+0x30>)
    1730:	785b      	ldrb	r3, [r3, #1]
    1732:	2b00      	cmp	r3, #0
    1734:	d004      	beq.n	1740 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    1736:	4a09      	ldr	r2, [pc, #36]	; (175c <hif_chip_sleep+0x30>)
    1738:	7853      	ldrb	r3, [r2, #1]
    173a:	3b01      	subs	r3, #1
    173c:	b2db      	uxtb	r3, r3
    173e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    1740:	4b06      	ldr	r3, [pc, #24]	; (175c <hif_chip_sleep+0x30>)
    1742:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    1744:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    1746:	2b00      	cmp	r3, #0
    1748:	d103      	bne.n	1752 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    174a:	4b04      	ldr	r3, [pc, #16]	; (175c <hif_chip_sleep+0x30>)
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	2b00      	cmp	r3, #0
    1750:	d100      	bne.n	1754 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    1752:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1754:	4b02      	ldr	r3, [pc, #8]	; (1760 <hif_chip_sleep+0x34>)
    1756:	4798      	blx	r3
    1758:	e7fb      	b.n	1752 <hif_chip_sleep+0x26>
    175a:	46c0      	nop			; (mov r8, r8)
    175c:	20000f34 	.word	0x20000f34
    1760:	00002721 	.word	0x00002721

00001764 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    1764:	b5f0      	push	{r4, r5, r6, r7, lr}
    1766:	46de      	mov	lr, fp
    1768:	4657      	mov	r7, sl
    176a:	b580      	push	{r7, lr}
    176c:	b089      	sub	sp, #36	; 0x24
    176e:	4683      	mov	fp, r0
    1770:	468a      	mov	sl, r1
    1772:	9201      	str	r2, [sp, #4]
    1774:	9300      	str	r3, [sp, #0]
    1776:	ab10      	add	r3, sp, #64	; 0x40
    1778:	cb80      	ldmia	r3!, {r7}
    177a:	881e      	ldrh	r6, [r3, #0]
    177c:	ab12      	add	r3, sp, #72	; 0x48
    177e:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    1780:	227f      	movs	r2, #127	; 0x7f
    1782:	400a      	ands	r2, r1
    1784:	ab07      	add	r3, sp, #28
    1786:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    1788:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    178a:	2208      	movs	r2, #8
    178c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    178e:	2f00      	cmp	r7, #0
    1790:	d03d      	beq.n	180e <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    1792:	885a      	ldrh	r2, [r3, #2]
    1794:	1992      	adds	r2, r2, r6
    1796:	18aa      	adds	r2, r5, r2
    1798:	b292      	uxth	r2, r2
    179a:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    179c:	4b69      	ldr	r3, [pc, #420]	; (1944 <hif_send+0x1e0>)
    179e:	4798      	blx	r3
    17a0:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    17a2:	d000      	beq.n	17a6 <hif_send+0x42>
    17a4:	e0c1      	b.n	192a <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    17a6:	2300      	movs	r3, #0
    17a8:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    17aa:	aa02      	add	r2, sp, #8
    17ac:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    17ae:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    17b0:	9b04      	ldr	r3, [sp, #16]
    17b2:	465a      	mov	r2, fp
    17b4:	431a      	orrs	r2, r3
    17b6:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    17b8:	9a04      	ldr	r2, [sp, #16]
    17ba:	4653      	mov	r3, sl
    17bc:	021b      	lsls	r3, r3, #8
    17be:	4313      	orrs	r3, r2
    17c0:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    17c2:	ab07      	add	r3, sp, #28
    17c4:	885b      	ldrh	r3, [r3, #2]
    17c6:	9a04      	ldr	r2, [sp, #16]
    17c8:	041b      	lsls	r3, r3, #16
    17ca:	4313      	orrs	r3, r2
    17cc:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    17ce:	9904      	ldr	r1, [sp, #16]
    17d0:	485d      	ldr	r0, [pc, #372]	; (1948 <hif_send+0x1e4>)
    17d2:	4b5e      	ldr	r3, [pc, #376]	; (194c <hif_send+0x1e8>)
    17d4:	4798      	blx	r3
    17d6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    17d8:	d157      	bne.n	188a <hif_send+0x126>

		reg = 0UL;
    17da:	2300      	movs	r3, #0
    17dc:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    17de:	9b04      	ldr	r3, [sp, #16]
    17e0:	2202      	movs	r2, #2
    17e2:	4313      	orrs	r3, r2
    17e4:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    17e6:	9904      	ldr	r1, [sp, #16]
    17e8:	4859      	ldr	r0, [pc, #356]	; (1950 <hif_send+0x1ec>)
    17ea:	4b58      	ldr	r3, [pc, #352]	; (194c <hif_send+0x1e8>)
    17ec:	4798      	blx	r3
    17ee:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    17f0:	d14b      	bne.n	188a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    17f2:	2200      	movs	r2, #0
    17f4:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    17f6:	ab02      	add	r3, sp, #8
    17f8:	80da      	strh	r2, [r3, #6]
    17fa:	3306      	adds	r3, #6
    17fc:	881b      	ldrh	r3, [r3, #0]
    17fe:	b29b      	uxth	r3, r3
    1800:	4a54      	ldr	r2, [pc, #336]	; (1954 <hif_send+0x1f0>)
    1802:	4293      	cmp	r3, r2
    1804:	d849      	bhi.n	189a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1806:	4c54      	ldr	r4, [pc, #336]	; (1958 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    1808:	4b54      	ldr	r3, [pc, #336]	; (195c <hif_send+0x1f8>)
    180a:	469a      	mov	sl, r3
    180c:	e017      	b.n	183e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    180e:	ab07      	add	r3, sp, #28
    1810:	885a      	ldrh	r2, [r3, #2]
    1812:	9900      	ldr	r1, [sp, #0]
    1814:	468c      	mov	ip, r1
    1816:	4462      	add	r2, ip
    1818:	b292      	uxth	r2, r2
    181a:	805a      	strh	r2, [r3, #2]
    181c:	e7be      	b.n	179c <hif_send+0x38>
				nm_bsp_sleep(1);
    181e:	2001      	movs	r0, #1
    1820:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    1822:	9b04      	ldr	r3, [sp, #16]
    1824:	079b      	lsls	r3, r3, #30
    1826:	d528      	bpl.n	187a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    1828:	ab02      	add	r3, sp, #8
    182a:	88da      	ldrh	r2, [r3, #6]
    182c:	3201      	adds	r2, #1
    182e:	b292      	uxth	r2, r2
    1830:	80da      	strh	r2, [r3, #6]
    1832:	3306      	adds	r3, #6
    1834:	881b      	ldrh	r3, [r3, #0]
    1836:	b29b      	uxth	r3, r3
    1838:	4a46      	ldr	r2, [pc, #280]	; (1954 <hif_send+0x1f0>)
    183a:	4293      	cmp	r3, r2
    183c:	d82d      	bhi.n	189a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    183e:	a904      	add	r1, sp, #16
    1840:	4843      	ldr	r0, [pc, #268]	; (1950 <hif_send+0x1ec>)
    1842:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    1844:	2800      	cmp	r0, #0
    1846:	d128      	bne.n	189a <hif_send+0x136>
			if(cnt >= 500) {
    1848:	ab02      	add	r3, sp, #8
    184a:	3306      	adds	r3, #6
    184c:	881b      	ldrh	r3, [r3, #0]
    184e:	b29b      	uxth	r3, r3
    1850:	22f4      	movs	r2, #244	; 0xf4
    1852:	32ff      	adds	r2, #255	; 0xff
    1854:	4293      	cmp	r3, r2
    1856:	d9e4      	bls.n	1822 <hif_send+0xbe>
				if(cnt < 501) {
    1858:	ab02      	add	r3, sp, #8
    185a:	3306      	adds	r3, #6
    185c:	881b      	ldrh	r3, [r3, #0]
    185e:	b29b      	uxth	r3, r3
    1860:	3201      	adds	r2, #1
    1862:	4293      	cmp	r3, r2
    1864:	d8db      	bhi.n	181e <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    1866:	483e      	ldr	r0, [pc, #248]	; (1960 <hif_send+0x1fc>)
    1868:	4b3e      	ldr	r3, [pc, #248]	; (1964 <hif_send+0x200>)
    186a:	4798      	blx	r3
    186c:	483e      	ldr	r0, [pc, #248]	; (1968 <hif_send+0x204>)
    186e:	4b3f      	ldr	r3, [pc, #252]	; (196c <hif_send+0x208>)
    1870:	4798      	blx	r3
    1872:	200d      	movs	r0, #13
    1874:	4b3e      	ldr	r3, [pc, #248]	; (1970 <hif_send+0x20c>)
    1876:	4798      	blx	r3
    1878:	e7d1      	b.n	181e <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    187a:	a905      	add	r1, sp, #20
    187c:	483d      	ldr	r0, [pc, #244]	; (1974 <hif_send+0x210>)
    187e:	4b36      	ldr	r3, [pc, #216]	; (1958 <hif_send+0x1f4>)
    1880:	4798      	blx	r3
    1882:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    1884:	d009      	beq.n	189a <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    1886:	2300      	movs	r3, #0
    1888:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    188a:	4b3b      	ldr	r3, [pc, #236]	; (1978 <hif_send+0x214>)
    188c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    188e:	0020      	movs	r0, r4
    1890:	b009      	add	sp, #36	; 0x24
    1892:	bc0c      	pop	{r2, r3}
    1894:	4692      	mov	sl, r2
    1896:	469b      	mov	fp, r3
    1898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    189a:	9b05      	ldr	r3, [sp, #20]
    189c:	2b00      	cmp	r3, #0
    189e:	d03f      	beq.n	1920 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    18a0:	9b05      	ldr	r3, [sp, #20]
    18a2:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    18a4:	a907      	add	r1, sp, #28
    18a6:	884b      	ldrh	r3, [r1, #2]
    18a8:	b29b      	uxth	r3, r3
    18aa:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    18ac:	9806      	ldr	r0, [sp, #24]
    18ae:	2208      	movs	r2, #8
    18b0:	4b32      	ldr	r3, [pc, #200]	; (197c <hif_send+0x218>)
    18b2:	4798      	blx	r3
    18b4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    18b6:	d1e8      	bne.n	188a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    18b8:	9b06      	ldr	r3, [sp, #24]
    18ba:	3308      	adds	r3, #8
    18bc:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    18be:	9b01      	ldr	r3, [sp, #4]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d00b      	beq.n	18dc <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    18c4:	9806      	ldr	r0, [sp, #24]
    18c6:	9a00      	ldr	r2, [sp, #0]
    18c8:	0019      	movs	r1, r3
    18ca:	4b2c      	ldr	r3, [pc, #176]	; (197c <hif_send+0x218>)
    18cc:	4798      	blx	r3
    18ce:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    18d0:	d1db      	bne.n	188a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    18d2:	9b06      	ldr	r3, [sp, #24]
    18d4:	9a00      	ldr	r2, [sp, #0]
    18d6:	4694      	mov	ip, r2
    18d8:	4463      	add	r3, ip
    18da:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    18dc:	2f00      	cmp	r7, #0
    18de:	d00e      	beq.n	18fe <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    18e0:	9b06      	ldr	r3, [sp, #24]
    18e2:	9a00      	ldr	r2, [sp, #0]
    18e4:	1aad      	subs	r5, r5, r2
    18e6:	18ed      	adds	r5, r5, r3
    18e8:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    18ea:	9806      	ldr	r0, [sp, #24]
    18ec:	0032      	movs	r2, r6
    18ee:	0039      	movs	r1, r7
    18f0:	4b22      	ldr	r3, [pc, #136]	; (197c <hif_send+0x218>)
    18f2:	4798      	blx	r3
    18f4:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    18f6:	d1c8      	bne.n	188a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    18f8:	9b06      	ldr	r3, [sp, #24]
    18fa:	18f3      	adds	r3, r6, r3
    18fc:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    18fe:	9b05      	ldr	r3, [sp, #20]
    1900:	009b      	lsls	r3, r3, #2
    1902:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    1904:	9b04      	ldr	r3, [sp, #16]
    1906:	2202      	movs	r2, #2
    1908:	4313      	orrs	r3, r2
    190a:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    190c:	9904      	ldr	r1, [sp, #16]
    190e:	481c      	ldr	r0, [pc, #112]	; (1980 <hif_send+0x21c>)
    1910:	4b0e      	ldr	r3, [pc, #56]	; (194c <hif_send+0x1e8>)
    1912:	4798      	blx	r3
    1914:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    1916:	d1b8      	bne.n	188a <hif_send+0x126>
 	ret = hif_chip_sleep();
    1918:	4b1a      	ldr	r3, [pc, #104]	; (1984 <hif_send+0x220>)
    191a:	4798      	blx	r3
    191c:	0004      	movs	r4, r0
	return ret;
    191e:	e7b6      	b.n	188e <hif_send+0x12a>
			ret = hif_chip_sleep();
    1920:	4b18      	ldr	r3, [pc, #96]	; (1984 <hif_send+0x220>)
    1922:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    1924:	2403      	movs	r4, #3
    1926:	4264      	negs	r4, r4
			goto ERR2;
    1928:	e7b1      	b.n	188e <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    192a:	2298      	movs	r2, #152	; 0x98
    192c:	32ff      	adds	r2, #255	; 0xff
    192e:	4916      	ldr	r1, [pc, #88]	; (1988 <hif_send+0x224>)
    1930:	4816      	ldr	r0, [pc, #88]	; (198c <hif_send+0x228>)
    1932:	4b0c      	ldr	r3, [pc, #48]	; (1964 <hif_send+0x200>)
    1934:	4798      	blx	r3
    1936:	4816      	ldr	r0, [pc, #88]	; (1990 <hif_send+0x22c>)
    1938:	4b0c      	ldr	r3, [pc, #48]	; (196c <hif_send+0x208>)
    193a:	4798      	blx	r3
    193c:	200d      	movs	r0, #13
    193e:	4b0c      	ldr	r3, [pc, #48]	; (1970 <hif_send+0x20c>)
    1940:	4798      	blx	r3
		goto ERR2;
    1942:	e7a4      	b.n	188e <hif_send+0x12a>
    1944:	000016d5 	.word	0x000016d5
    1948:	0000108c 	.word	0x0000108c
    194c:	00002aad 	.word	0x00002aad
    1950:	00001078 	.word	0x00001078
    1954:	000003e7 	.word	0x000003e7
    1958:	00002aa1 	.word	0x00002aa1
    195c:	000012c5 	.word	0x000012c5
    1960:	0000d880 	.word	0x0000d880
    1964:	0000be51 	.word	0x0000be51
    1968:	0000d88c 	.word	0x0000d88c
    196c:	0000bf6d 	.word	0x0000bf6d
    1970:	0000be85 	.word	0x0000be85
    1974:	00150400 	.word	0x00150400
    1978:	00001711 	.word	0x00001711
    197c:	00002b21 	.word	0x00002b21
    1980:	0000106c 	.word	0x0000106c
    1984:	0000172d 	.word	0x0000172d
    1988:	0000d598 	.word	0x0000d598
    198c:	0000d550 	.word	0x0000d550
    1990:	0000d89c 	.word	0x0000d89c

00001994 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    1994:	b5f0      	push	{r4, r5, r6, r7, lr}
    1996:	46ce      	mov	lr, r9
    1998:	4647      	mov	r7, r8
    199a:	b580      	push	{r7, lr}
    199c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    199e:	2200      	movs	r2, #0
    19a0:	4bd1      	ldr	r3, [pc, #836]	; (1ce8 <hif_handle_isr+0x354>)
    19a2:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    19a4:	4699      	mov	r9, r3
    19a6:	4698      	mov	r8, r3
    19a8:	e081      	b.n	1aae <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    19aa:	4bcf      	ldr	r3, [pc, #828]	; (1ce8 <hif_handle_isr+0x354>)
    19ac:	9a05      	ldr	r2, [sp, #20]
    19ae:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    19b0:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    19b2:	af04      	add	r7, sp, #16
    19b4:	2204      	movs	r2, #4
    19b6:	0039      	movs	r1, r7
    19b8:	9805      	ldr	r0, [sp, #20]
    19ba:	4bcc      	ldr	r3, [pc, #816]	; (1cec <hif_handle_isr+0x358>)
    19bc:	4798      	blx	r3
    19be:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    19c0:	887b      	ldrh	r3, [r7, #2]
    19c2:	b29b      	uxth	r3, r3
    19c4:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    19c6:	2800      	cmp	r0, #0
    19c8:	d134      	bne.n	1a34 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    19ca:	ab04      	add	r3, sp, #16
    19cc:	885b      	ldrh	r3, [r3, #2]
    19ce:	b29b      	uxth	r3, r3
    19d0:	429e      	cmp	r6, r3
    19d2:	d004      	beq.n	19de <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    19d4:	ab04      	add	r3, sp, #16
    19d6:	885b      	ldrh	r3, [r3, #2]
    19d8:	1af3      	subs	r3, r6, r3
    19da:	2b04      	cmp	r3, #4
    19dc:	dc3a      	bgt.n	1a54 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    19de:	ab04      	add	r3, sp, #16
    19e0:	781b      	ldrb	r3, [r3, #0]
    19e2:	2b01      	cmp	r3, #1
    19e4:	d04f      	beq.n	1a86 <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    19e6:	ab04      	add	r3, sp, #16
    19e8:	781b      	ldrb	r3, [r3, #0]
    19ea:	2b02      	cmp	r3, #2
    19ec:	d07d      	beq.n	1aea <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    19ee:	ab04      	add	r3, sp, #16
    19f0:	781b      	ldrb	r3, [r3, #0]
    19f2:	2b04      	cmp	r3, #4
    19f4:	d100      	bne.n	19f8 <hif_handle_isr+0x64>
    19f6:	e095      	b.n	1b24 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    19f8:	ab04      	add	r3, sp, #16
    19fa:	781b      	ldrb	r3, [r3, #0]
    19fc:	2b06      	cmp	r3, #6
    19fe:	d100      	bne.n	1a02 <hif_handle_isr+0x6e>
    1a00:	e0ad      	b.n	1b5e <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1a02:	ab04      	add	r3, sp, #16
    1a04:	781b      	ldrb	r3, [r3, #0]
    1a06:	2b07      	cmp	r3, #7
    1a08:	d100      	bne.n	1a0c <hif_handle_isr+0x78>
    1a0a:	e0c5      	b.n	1b98 <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1a0c:	ab04      	add	r3, sp, #16
    1a0e:	781b      	ldrb	r3, [r3, #0]
    1a10:	2b05      	cmp	r3, #5
    1a12:	d100      	bne.n	1a16 <hif_handle_isr+0x82>
    1a14:	e0dc      	b.n	1bd0 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    1a16:	2284      	movs	r2, #132	; 0x84
    1a18:	0092      	lsls	r2, r2, #2
    1a1a:	49b5      	ldr	r1, [pc, #724]	; (1cf0 <hif_handle_isr+0x35c>)
    1a1c:	48b5      	ldr	r0, [pc, #724]	; (1cf4 <hif_handle_isr+0x360>)
    1a1e:	4bb6      	ldr	r3, [pc, #728]	; (1cf8 <hif_handle_isr+0x364>)
    1a20:	4798      	blx	r3
    1a22:	48b6      	ldr	r0, [pc, #728]	; (1cfc <hif_handle_isr+0x368>)
    1a24:	4bb6      	ldr	r3, [pc, #728]	; (1d00 <hif_handle_isr+0x36c>)
    1a26:	4798      	blx	r3
    1a28:	200d      	movs	r0, #13
    1a2a:	4bb6      	ldr	r3, [pc, #728]	; (1d04 <hif_handle_isr+0x370>)
    1a2c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1a2e:	2406      	movs	r4, #6
    1a30:	4264      	negs	r4, r4
    1a32:	e119      	b.n	1c68 <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    1a34:	22e9      	movs	r2, #233	; 0xe9
    1a36:	0052      	lsls	r2, r2, #1
    1a38:	49ad      	ldr	r1, [pc, #692]	; (1cf0 <hif_handle_isr+0x35c>)
    1a3a:	48ae      	ldr	r0, [pc, #696]	; (1cf4 <hif_handle_isr+0x360>)
    1a3c:	4bae      	ldr	r3, [pc, #696]	; (1cf8 <hif_handle_isr+0x364>)
    1a3e:	4798      	blx	r3
    1a40:	48b1      	ldr	r0, [pc, #708]	; (1d08 <hif_handle_isr+0x374>)
    1a42:	4baf      	ldr	r3, [pc, #700]	; (1d00 <hif_handle_isr+0x36c>)
    1a44:	4798      	blx	r3
    1a46:	200d      	movs	r0, #13
    1a48:	4bae      	ldr	r3, [pc, #696]	; (1d04 <hif_handle_isr+0x370>)
    1a4a:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1a4c:	2001      	movs	r0, #1
    1a4e:	4baf      	ldr	r3, [pc, #700]	; (1d0c <hif_handle_isr+0x378>)
    1a50:	4798      	blx	r3
    1a52:	e109      	b.n	1c68 <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    1a54:	22dc      	movs	r2, #220	; 0xdc
    1a56:	32ff      	adds	r2, #255	; 0xff
    1a58:	49a5      	ldr	r1, [pc, #660]	; (1cf0 <hif_handle_isr+0x35c>)
    1a5a:	48a6      	ldr	r0, [pc, #664]	; (1cf4 <hif_handle_isr+0x360>)
    1a5c:	4ca6      	ldr	r4, [pc, #664]	; (1cf8 <hif_handle_isr+0x364>)
    1a5e:	47a0      	blx	r4
    1a60:	a904      	add	r1, sp, #16
    1a62:	884a      	ldrh	r2, [r1, #2]
    1a64:	b292      	uxth	r2, r2
    1a66:	780b      	ldrb	r3, [r1, #0]
    1a68:	b2db      	uxtb	r3, r3
    1a6a:	7849      	ldrb	r1, [r1, #1]
    1a6c:	9100      	str	r1, [sp, #0]
    1a6e:	0031      	movs	r1, r6
    1a70:	48a7      	ldr	r0, [pc, #668]	; (1d10 <hif_handle_isr+0x37c>)
    1a72:	47a0      	blx	r4
    1a74:	200d      	movs	r0, #13
    1a76:	4ba3      	ldr	r3, [pc, #652]	; (1d04 <hif_handle_isr+0x370>)
    1a78:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1a7a:	2001      	movs	r0, #1
    1a7c:	4ba3      	ldr	r3, [pc, #652]	; (1d0c <hif_handle_isr+0x378>)
    1a7e:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1a80:	2406      	movs	r4, #6
    1a82:	4264      	negs	r4, r4
    1a84:	e0f0      	b.n	1c68 <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    1a86:	4b98      	ldr	r3, [pc, #608]	; (1ce8 <hif_handle_isr+0x354>)
    1a88:	691b      	ldr	r3, [r3, #16]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d020      	beq.n	1ad0 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1a8e:	4b96      	ldr	r3, [pc, #600]	; (1ce8 <hif_handle_isr+0x354>)
    1a90:	691b      	ldr	r3, [r3, #16]
    1a92:	aa04      	add	r2, sp, #16
    1a94:	7850      	ldrb	r0, [r2, #1]
    1a96:	b2c0      	uxtb	r0, r0
    1a98:	8851      	ldrh	r1, [r2, #2]
    1a9a:	9a05      	ldr	r2, [sp, #20]
    1a9c:	3208      	adds	r2, #8
    1a9e:	3908      	subs	r1, #8
    1aa0:	b289      	uxth	r1, r1
    1aa2:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    1aa4:	4b90      	ldr	r3, [pc, #576]	; (1ce8 <hif_handle_isr+0x354>)
    1aa6:	789b      	ldrb	r3, [r3, #2]
    1aa8:	2b00      	cmp	r3, #0
    1aaa:	d000      	beq.n	1aae <hif_handle_isr+0x11a>
    1aac:	e0a1      	b.n	1bf2 <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    1aae:	464b      	mov	r3, r9
    1ab0:	78db      	ldrb	r3, [r3, #3]
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d100      	bne.n	1ab8 <hif_handle_isr+0x124>
    1ab6:	e15b      	b.n	1d70 <hif_handle_isr+0x3dc>
    1ab8:	4643      	mov	r3, r8
    1aba:	791b      	ldrb	r3, [r3, #4]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d000      	beq.n	1ac2 <hif_handle_isr+0x12e>
    1ac0:	e156      	b.n	1d70 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    1ac2:	4a89      	ldr	r2, [pc, #548]	; (1ce8 <hif_handle_isr+0x354>)
    1ac4:	78d3      	ldrb	r3, [r2, #3]
    1ac6:	3b01      	subs	r3, #1
    1ac8:	b2db      	uxtb	r3, r3
    1aca:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1acc:	4d91      	ldr	r5, [pc, #580]	; (1d14 <hif_handle_isr+0x380>)
    1ace:	e0d6      	b.n	1c7e <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    1ad0:	22e8      	movs	r2, #232	; 0xe8
    1ad2:	32ff      	adds	r2, #255	; 0xff
    1ad4:	4986      	ldr	r1, [pc, #536]	; (1cf0 <hif_handle_isr+0x35c>)
    1ad6:	4887      	ldr	r0, [pc, #540]	; (1cf4 <hif_handle_isr+0x360>)
    1ad8:	4b87      	ldr	r3, [pc, #540]	; (1cf8 <hif_handle_isr+0x364>)
    1ada:	4798      	blx	r3
    1adc:	488e      	ldr	r0, [pc, #568]	; (1d18 <hif_handle_isr+0x384>)
    1ade:	4b88      	ldr	r3, [pc, #544]	; (1d00 <hif_handle_isr+0x36c>)
    1ae0:	4798      	blx	r3
    1ae2:	200d      	movs	r0, #13
    1ae4:	4b87      	ldr	r3, [pc, #540]	; (1d04 <hif_handle_isr+0x370>)
    1ae6:	4798      	blx	r3
    1ae8:	e7dc      	b.n	1aa4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    1aea:	4b7f      	ldr	r3, [pc, #508]	; (1ce8 <hif_handle_isr+0x354>)
    1aec:	695b      	ldr	r3, [r3, #20]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d00b      	beq.n	1b0a <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1af2:	4b7d      	ldr	r3, [pc, #500]	; (1ce8 <hif_handle_isr+0x354>)
    1af4:	695b      	ldr	r3, [r3, #20]
    1af6:	aa04      	add	r2, sp, #16
    1af8:	7850      	ldrb	r0, [r2, #1]
    1afa:	b2c0      	uxtb	r0, r0
    1afc:	8851      	ldrh	r1, [r2, #2]
    1afe:	9a05      	ldr	r2, [sp, #20]
    1b00:	3208      	adds	r2, #8
    1b02:	3908      	subs	r1, #8
    1b04:	b289      	uxth	r1, r1
    1b06:	4798      	blx	r3
    1b08:	e7cc      	b.n	1aa4 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    1b0a:	22f0      	movs	r2, #240	; 0xf0
    1b0c:	32ff      	adds	r2, #255	; 0xff
    1b0e:	4978      	ldr	r1, [pc, #480]	; (1cf0 <hif_handle_isr+0x35c>)
    1b10:	4878      	ldr	r0, [pc, #480]	; (1cf4 <hif_handle_isr+0x360>)
    1b12:	4b79      	ldr	r3, [pc, #484]	; (1cf8 <hif_handle_isr+0x364>)
    1b14:	4798      	blx	r3
    1b16:	4881      	ldr	r0, [pc, #516]	; (1d1c <hif_handle_isr+0x388>)
    1b18:	4b79      	ldr	r3, [pc, #484]	; (1d00 <hif_handle_isr+0x36c>)
    1b1a:	4798      	blx	r3
    1b1c:	200d      	movs	r0, #13
    1b1e:	4b79      	ldr	r3, [pc, #484]	; (1d04 <hif_handle_isr+0x370>)
    1b20:	4798      	blx	r3
    1b22:	e7bf      	b.n	1aa4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    1b24:	4b70      	ldr	r3, [pc, #448]	; (1ce8 <hif_handle_isr+0x354>)
    1b26:	699b      	ldr	r3, [r3, #24]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d00b      	beq.n	1b44 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b2c:	4b6e      	ldr	r3, [pc, #440]	; (1ce8 <hif_handle_isr+0x354>)
    1b2e:	699b      	ldr	r3, [r3, #24]
    1b30:	aa04      	add	r2, sp, #16
    1b32:	7850      	ldrb	r0, [r2, #1]
    1b34:	b2c0      	uxtb	r0, r0
    1b36:	8851      	ldrh	r1, [r2, #2]
    1b38:	9a05      	ldr	r2, [sp, #20]
    1b3a:	3208      	adds	r2, #8
    1b3c:	3908      	subs	r1, #8
    1b3e:	b289      	uxth	r1, r1
    1b40:	4798      	blx	r3
    1b42:	e7af      	b.n	1aa4 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    1b44:	22f8      	movs	r2, #248	; 0xf8
    1b46:	32ff      	adds	r2, #255	; 0xff
    1b48:	4969      	ldr	r1, [pc, #420]	; (1cf0 <hif_handle_isr+0x35c>)
    1b4a:	486a      	ldr	r0, [pc, #424]	; (1cf4 <hif_handle_isr+0x360>)
    1b4c:	4b6a      	ldr	r3, [pc, #424]	; (1cf8 <hif_handle_isr+0x364>)
    1b4e:	4798      	blx	r3
    1b50:	4873      	ldr	r0, [pc, #460]	; (1d20 <hif_handle_isr+0x38c>)
    1b52:	4b6b      	ldr	r3, [pc, #428]	; (1d00 <hif_handle_isr+0x36c>)
    1b54:	4798      	blx	r3
    1b56:	200d      	movs	r0, #13
    1b58:	4b6a      	ldr	r3, [pc, #424]	; (1d04 <hif_handle_isr+0x370>)
    1b5a:	4798      	blx	r3
    1b5c:	e7a2      	b.n	1aa4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    1b5e:	4b62      	ldr	r3, [pc, #392]	; (1ce8 <hif_handle_isr+0x354>)
    1b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b62:	2b00      	cmp	r3, #0
    1b64:	d00b      	beq.n	1b7e <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b66:	4b60      	ldr	r3, [pc, #384]	; (1ce8 <hif_handle_isr+0x354>)
    1b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b6a:	aa04      	add	r2, sp, #16
    1b6c:	7850      	ldrb	r0, [r2, #1]
    1b6e:	b2c0      	uxtb	r0, r0
    1b70:	8851      	ldrh	r1, [r2, #2]
    1b72:	9a05      	ldr	r2, [sp, #20]
    1b74:	3208      	adds	r2, #8
    1b76:	3908      	subs	r1, #8
    1b78:	b289      	uxth	r1, r1
    1b7a:	4798      	blx	r3
    1b7c:	e792      	b.n	1aa4 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    1b7e:	2280      	movs	r2, #128	; 0x80
    1b80:	0092      	lsls	r2, r2, #2
    1b82:	495b      	ldr	r1, [pc, #364]	; (1cf0 <hif_handle_isr+0x35c>)
    1b84:	485b      	ldr	r0, [pc, #364]	; (1cf4 <hif_handle_isr+0x360>)
    1b86:	4b5c      	ldr	r3, [pc, #368]	; (1cf8 <hif_handle_isr+0x364>)
    1b88:	4798      	blx	r3
    1b8a:	4866      	ldr	r0, [pc, #408]	; (1d24 <hif_handle_isr+0x390>)
    1b8c:	4b5c      	ldr	r3, [pc, #368]	; (1d00 <hif_handle_isr+0x36c>)
    1b8e:	4798      	blx	r3
    1b90:	200d      	movs	r0, #13
    1b92:	4b5c      	ldr	r3, [pc, #368]	; (1d04 <hif_handle_isr+0x370>)
    1b94:	4798      	blx	r3
    1b96:	e785      	b.n	1aa4 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    1b98:	4b53      	ldr	r3, [pc, #332]	; (1ce8 <hif_handle_isr+0x354>)
    1b9a:	69db      	ldr	r3, [r3, #28]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d00b      	beq.n	1bb8 <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1ba0:	4b51      	ldr	r3, [pc, #324]	; (1ce8 <hif_handle_isr+0x354>)
    1ba2:	69db      	ldr	r3, [r3, #28]
    1ba4:	aa04      	add	r2, sp, #16
    1ba6:	7850      	ldrb	r0, [r2, #1]
    1ba8:	b2c0      	uxtb	r0, r0
    1baa:	8851      	ldrh	r1, [r2, #2]
    1bac:	9a05      	ldr	r2, [sp, #20]
    1bae:	3208      	adds	r2, #8
    1bb0:	3908      	subs	r1, #8
    1bb2:	b289      	uxth	r1, r1
    1bb4:	4798      	blx	r3
    1bb6:	e775      	b.n	1aa4 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    1bb8:	4a5b      	ldr	r2, [pc, #364]	; (1d28 <hif_handle_isr+0x394>)
    1bba:	494d      	ldr	r1, [pc, #308]	; (1cf0 <hif_handle_isr+0x35c>)
    1bbc:	484d      	ldr	r0, [pc, #308]	; (1cf4 <hif_handle_isr+0x360>)
    1bbe:	4b4e      	ldr	r3, [pc, #312]	; (1cf8 <hif_handle_isr+0x364>)
    1bc0:	4798      	blx	r3
    1bc2:	485a      	ldr	r0, [pc, #360]	; (1d2c <hif_handle_isr+0x398>)
    1bc4:	4b4e      	ldr	r3, [pc, #312]	; (1d00 <hif_handle_isr+0x36c>)
    1bc6:	4798      	blx	r3
    1bc8:	200d      	movs	r0, #13
    1bca:	4b4e      	ldr	r3, [pc, #312]	; (1d04 <hif_handle_isr+0x370>)
    1bcc:	4798      	blx	r3
    1bce:	e769      	b.n	1aa4 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    1bd0:	4b45      	ldr	r3, [pc, #276]	; (1ce8 <hif_handle_isr+0x354>)
    1bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d100      	bne.n	1bda <hif_handle_isr+0x246>
    1bd8:	e764      	b.n	1aa4 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1bda:	4b43      	ldr	r3, [pc, #268]	; (1ce8 <hif_handle_isr+0x354>)
    1bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1bde:	aa04      	add	r2, sp, #16
    1be0:	7850      	ldrb	r0, [r2, #1]
    1be2:	b2c0      	uxtb	r0, r0
    1be4:	8851      	ldrh	r1, [r2, #2]
    1be6:	9a05      	ldr	r2, [sp, #20]
    1be8:	3208      	adds	r2, #8
    1bea:	3908      	subs	r1, #8
    1bec:	b289      	uxth	r1, r1
    1bee:	4798      	blx	r3
    1bf0:	e758      	b.n	1aa4 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1bf2:	4a4f      	ldr	r2, [pc, #316]	; (1d30 <hif_handle_isr+0x39c>)
    1bf4:	493e      	ldr	r1, [pc, #248]	; (1cf0 <hif_handle_isr+0x35c>)
    1bf6:	483f      	ldr	r0, [pc, #252]	; (1cf4 <hif_handle_isr+0x360>)
    1bf8:	4c3f      	ldr	r4, [pc, #252]	; (1cf8 <hif_handle_isr+0x364>)
    1bfa:	47a0      	blx	r4
    1bfc:	ab04      	add	r3, sp, #16
    1bfe:	7819      	ldrb	r1, [r3, #0]
    1c00:	b2c9      	uxtb	r1, r1
    1c02:	785a      	ldrb	r2, [r3, #1]
    1c04:	b2d2      	uxtb	r2, r2
    1c06:	484b      	ldr	r0, [pc, #300]	; (1d34 <hif_handle_isr+0x3a0>)
    1c08:	47a0      	blx	r4
    1c0a:	200d      	movs	r0, #13
    1c0c:	4b3d      	ldr	r3, [pc, #244]	; (1d04 <hif_handle_isr+0x370>)
    1c0e:	4798      	blx	r3
					ret = hif_set_rx_done();
    1c10:	4b49      	ldr	r3, [pc, #292]	; (1d38 <hif_handle_isr+0x3a4>)
    1c12:	4798      	blx	r3
    1c14:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1c16:	d127      	bne.n	1c68 <hif_handle_isr+0x2d4>
    1c18:	e749      	b.n	1aae <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    1c1a:	4a48      	ldr	r2, [pc, #288]	; (1d3c <hif_handle_isr+0x3a8>)
    1c1c:	4934      	ldr	r1, [pc, #208]	; (1cf0 <hif_handle_isr+0x35c>)
    1c1e:	4835      	ldr	r0, [pc, #212]	; (1cf4 <hif_handle_isr+0x360>)
    1c20:	4b35      	ldr	r3, [pc, #212]	; (1cf8 <hif_handle_isr+0x364>)
    1c22:	4798      	blx	r3
    1c24:	4846      	ldr	r0, [pc, #280]	; (1d40 <hif_handle_isr+0x3ac>)
    1c26:	4b36      	ldr	r3, [pc, #216]	; (1d00 <hif_handle_isr+0x36c>)
    1c28:	4798      	blx	r3
    1c2a:	200d      	movs	r0, #13
    1c2c:	4b35      	ldr	r3, [pc, #212]	; (1d04 <hif_handle_isr+0x370>)
    1c2e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1c30:	2402      	movs	r4, #2
    1c32:	4264      	negs	r4, r4
    1c34:	e018      	b.n	1c68 <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    1c36:	4a43      	ldr	r2, [pc, #268]	; (1d44 <hif_handle_isr+0x3b0>)
    1c38:	492d      	ldr	r1, [pc, #180]	; (1cf0 <hif_handle_isr+0x35c>)
    1c3a:	482e      	ldr	r0, [pc, #184]	; (1cf4 <hif_handle_isr+0x360>)
    1c3c:	4c2e      	ldr	r4, [pc, #184]	; (1cf8 <hif_handle_isr+0x364>)
    1c3e:	47a0      	blx	r4
    1c40:	9903      	ldr	r1, [sp, #12]
    1c42:	4841      	ldr	r0, [pc, #260]	; (1d48 <hif_handle_isr+0x3b4>)
    1c44:	47a0      	blx	r4
    1c46:	200d      	movs	r0, #13
    1c48:	4b2e      	ldr	r3, [pc, #184]	; (1d04 <hif_handle_isr+0x370>)
    1c4a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1c4c:	240c      	movs	r4, #12
    1c4e:	4264      	negs	r4, r4
    1c50:	e00a      	b.n	1c68 <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1c52:	4a3e      	ldr	r2, [pc, #248]	; (1d4c <hif_handle_isr+0x3b8>)
    1c54:	4926      	ldr	r1, [pc, #152]	; (1cf0 <hif_handle_isr+0x35c>)
    1c56:	4827      	ldr	r0, [pc, #156]	; (1cf4 <hif_handle_isr+0x360>)
    1c58:	4b27      	ldr	r3, [pc, #156]	; (1cf8 <hif_handle_isr+0x364>)
    1c5a:	4798      	blx	r3
    1c5c:	483c      	ldr	r0, [pc, #240]	; (1d50 <hif_handle_isr+0x3bc>)
    1c5e:	4b28      	ldr	r3, [pc, #160]	; (1d00 <hif_handle_isr+0x36c>)
    1c60:	4798      	blx	r3
    1c62:	200d      	movs	r0, #13
    1c64:	4b27      	ldr	r3, [pc, #156]	; (1d04 <hif_handle_isr+0x370>)
    1c66:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1c68:	4a3a      	ldr	r2, [pc, #232]	; (1d54 <hif_handle_isr+0x3c0>)
    1c6a:	493b      	ldr	r1, [pc, #236]	; (1d58 <hif_handle_isr+0x3c4>)
    1c6c:	4821      	ldr	r0, [pc, #132]	; (1cf4 <hif_handle_isr+0x360>)
    1c6e:	4f22      	ldr	r7, [pc, #136]	; (1cf8 <hif_handle_isr+0x364>)
    1c70:	47b8      	blx	r7
    1c72:	0021      	movs	r1, r4
    1c74:	4839      	ldr	r0, [pc, #228]	; (1d5c <hif_handle_isr+0x3c8>)
    1c76:	47b8      	blx	r7
    1c78:	200d      	movs	r0, #13
    1c7a:	4b22      	ldr	r3, [pc, #136]	; (1d04 <hif_handle_isr+0x370>)
    1c7c:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1c7e:	a903      	add	r1, sp, #12
    1c80:	4837      	ldr	r0, [pc, #220]	; (1d60 <hif_handle_isr+0x3cc>)
    1c82:	47a8      	blx	r5
    1c84:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    1c86:	d1e4      	bne.n	1c52 <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    1c88:	9b03      	ldr	r3, [sp, #12]
    1c8a:	07db      	lsls	r3, r3, #31
    1c8c:	d5d3      	bpl.n	1c36 <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    1c8e:	2000      	movs	r0, #0
    1c90:	4b1e      	ldr	r3, [pc, #120]	; (1d0c <hif_handle_isr+0x378>)
    1c92:	4798      	blx	r3
			reg &= ~NBIT0;
    1c94:	2301      	movs	r3, #1
    1c96:	9903      	ldr	r1, [sp, #12]
    1c98:	4399      	bics	r1, r3
    1c9a:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1c9c:	4830      	ldr	r0, [pc, #192]	; (1d60 <hif_handle_isr+0x3cc>)
    1c9e:	4b31      	ldr	r3, [pc, #196]	; (1d64 <hif_handle_isr+0x3d0>)
    1ca0:	4798      	blx	r3
    1ca2:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    1ca4:	d1e0      	bne.n	1c68 <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    1ca6:	2201      	movs	r2, #1
    1ca8:	4b0f      	ldr	r3, [pc, #60]	; (1ce8 <hif_handle_isr+0x354>)
    1caa:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1cac:	9b03      	ldr	r3, [sp, #12]
    1cae:	049e      	lsls	r6, r3, #18
    1cb0:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    1cb2:	d0b2      	beq.n	1c1a <hif_handle_isr+0x286>
				uint32 address = 0;
    1cb4:	2300      	movs	r3, #0
    1cb6:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1cb8:	a905      	add	r1, sp, #20
    1cba:	482b      	ldr	r0, [pc, #172]	; (1d68 <hif_handle_isr+0x3d4>)
    1cbc:	4b15      	ldr	r3, [pc, #84]	; (1d14 <hif_handle_isr+0x380>)
    1cbe:	4798      	blx	r3
    1cc0:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    1cc2:	d100      	bne.n	1cc6 <hif_handle_isr+0x332>
    1cc4:	e671      	b.n	19aa <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1cc6:	22e4      	movs	r2, #228	; 0xe4
    1cc8:	0052      	lsls	r2, r2, #1
    1cca:	4909      	ldr	r1, [pc, #36]	; (1cf0 <hif_handle_isr+0x35c>)
    1ccc:	4809      	ldr	r0, [pc, #36]	; (1cf4 <hif_handle_isr+0x360>)
    1cce:	4b0a      	ldr	r3, [pc, #40]	; (1cf8 <hif_handle_isr+0x364>)
    1cd0:	4798      	blx	r3
    1cd2:	4826      	ldr	r0, [pc, #152]	; (1d6c <hif_handle_isr+0x3d8>)
    1cd4:	4b0a      	ldr	r3, [pc, #40]	; (1d00 <hif_handle_isr+0x36c>)
    1cd6:	4798      	blx	r3
    1cd8:	200d      	movs	r0, #13
    1cda:	4b0a      	ldr	r3, [pc, #40]	; (1d04 <hif_handle_isr+0x370>)
    1cdc:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1cde:	2001      	movs	r0, #1
    1ce0:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <hif_handle_isr+0x378>)
    1ce2:	4798      	blx	r3
    1ce4:	e7c0      	b.n	1c68 <hif_handle_isr+0x2d4>
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	20000f34 	.word	0x20000f34
    1cec:	00002ab9 	.word	0x00002ab9
    1cf0:	0000d5a4 	.word	0x0000d5a4
    1cf4:	0000d550 	.word	0x0000d550
    1cf8:	0000be51 	.word	0x0000be51
    1cfc:	0000d700 	.word	0x0000d700
    1d00:	0000bf6d 	.word	0x0000bf6d
    1d04:	0000be85 	.word	0x0000be85
    1d08:	0000d5fc 	.word	0x0000d5fc
    1d0c:	0000135d 	.word	0x0000135d
    1d10:	0000d614 	.word	0x0000d614
    1d14:	00002aa1 	.word	0x00002aa1
    1d18:	0000d654 	.word	0x0000d654
    1d1c:	0000d674 	.word	0x0000d674
    1d20:	0000d698 	.word	0x0000d698
    1d24:	0000d6b8 	.word	0x0000d6b8
    1d28:	00000207 	.word	0x00000207
    1d2c:	0000d6dc 	.word	0x0000d6dc
    1d30:	00000216 	.word	0x00000216
    1d34:	0000d718 	.word	0x0000d718
    1d38:	00001691 	.word	0x00001691
    1d3c:	0000021d 	.word	0x0000021d
    1d40:	0000d744 	.word	0x0000d744
    1d44:	00000225 	.word	0x00000225
    1d48:	0000d758 	.word	0x0000d758
    1d4c:	0000022e 	.word	0x0000022e
    1d50:	0000d774 	.word	0x0000d774
    1d54:	00000257 	.word	0x00000257
    1d58:	0000d5ac 	.word	0x0000d5ac
    1d5c:	0000d798 	.word	0x0000d798
    1d60:	00001070 	.word	0x00001070
    1d64:	00002aad 	.word	0x00002aad
    1d68:	00001084 	.word	0x00001084
    1d6c:	0000d5d8 	.word	0x0000d5d8
			}
		}
	}

	return ret;
}
    1d70:	2000      	movs	r0, #0
    1d72:	b007      	add	sp, #28
    1d74:	bc0c      	pop	{r2, r3}
    1d76:	4690      	mov	r8, r2
    1d78:	4699      	mov	r9, r3
    1d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d7c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1d7c:	b570      	push	{r4, r5, r6, lr}
    1d7e:	0014      	movs	r4, r2
    1d80:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1d82:	2800      	cmp	r0, #0
    1d84:	d003      	beq.n	1d8e <hif_receive+0x12>
    1d86:	2900      	cmp	r1, #0
    1d88:	d001      	beq.n	1d8e <hif_receive+0x12>
    1d8a:	2a00      	cmp	r2, #0
    1d8c:	d113      	bne.n	1db6 <hif_receive+0x3a>
	{
		if(isDone)
    1d8e:	2d00      	cmp	r5, #0
    1d90:	d002      	beq.n	1d98 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1d92:	4b28      	ldr	r3, [pc, #160]	; (1e34 <hif_receive+0xb8>)
    1d94:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1d96:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1d98:	229e      	movs	r2, #158	; 0x9e
    1d9a:	0092      	lsls	r2, r2, #2
    1d9c:	4926      	ldr	r1, [pc, #152]	; (1e38 <hif_receive+0xbc>)
    1d9e:	4827      	ldr	r0, [pc, #156]	; (1e3c <hif_receive+0xc0>)
    1da0:	4b27      	ldr	r3, [pc, #156]	; (1e40 <hif_receive+0xc4>)
    1da2:	4798      	blx	r3
    1da4:	4827      	ldr	r0, [pc, #156]	; (1e44 <hif_receive+0xc8>)
    1da6:	4b28      	ldr	r3, [pc, #160]	; (1e48 <hif_receive+0xcc>)
    1da8:	4798      	blx	r3
    1daa:	200d      	movs	r0, #13
    1dac:	4b27      	ldr	r3, [pc, #156]	; (1e4c <hif_receive+0xd0>)
    1dae:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1db0:	200c      	movs	r0, #12
    1db2:	4240      	negs	r0, r0
    1db4:	e7ef      	b.n	1d96 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    1db6:	4b26      	ldr	r3, [pc, #152]	; (1e50 <hif_receive+0xd4>)
    1db8:	68db      	ldr	r3, [r3, #12]
    1dba:	429a      	cmp	r2, r3
    1dbc:	d81a      	bhi.n	1df4 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1dbe:	4b24      	ldr	r3, [pc, #144]	; (1e50 <hif_receive+0xd4>)
    1dc0:	689b      	ldr	r3, [r3, #8]
    1dc2:	4298      	cmp	r0, r3
    1dc4:	d327      	bcc.n	1e16 <hif_receive+0x9a>
    1dc6:	1886      	adds	r6, r0, r2
    1dc8:	4a21      	ldr	r2, [pc, #132]	; (1e50 <hif_receive+0xd4>)
    1dca:	6893      	ldr	r3, [r2, #8]
    1dcc:	68d2      	ldr	r2, [r2, #12]
    1dce:	189b      	adds	r3, r3, r2
    1dd0:	429e      	cmp	r6, r3
    1dd2:	d820      	bhi.n	1e16 <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1dd4:	0022      	movs	r2, r4
    1dd6:	4b1f      	ldr	r3, [pc, #124]	; (1e54 <hif_receive+0xd8>)
    1dd8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1dda:	2800      	cmp	r0, #0
    1ddc:	d1db      	bne.n	1d96 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1dde:	4a1c      	ldr	r2, [pc, #112]	; (1e50 <hif_receive+0xd4>)
    1de0:	6893      	ldr	r3, [r2, #8]
    1de2:	68d2      	ldr	r2, [r2, #12]
    1de4:	189b      	adds	r3, r3, r2
    1de6:	429e      	cmp	r6, r3
    1de8:	d001      	beq.n	1dee <hif_receive+0x72>
    1dea:	2d00      	cmp	r5, #0
    1dec:	d0d3      	beq.n	1d96 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    1dee:	4b11      	ldr	r3, [pc, #68]	; (1e34 <hif_receive+0xb8>)
    1df0:	4798      	blx	r3
    1df2:	e7d0      	b.n	1d96 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    1df4:	22a0      	movs	r2, #160	; 0xa0
    1df6:	0092      	lsls	r2, r2, #2
    1df8:	490f      	ldr	r1, [pc, #60]	; (1e38 <hif_receive+0xbc>)
    1dfa:	4810      	ldr	r0, [pc, #64]	; (1e3c <hif_receive+0xc0>)
    1dfc:	4d10      	ldr	r5, [pc, #64]	; (1e40 <hif_receive+0xc4>)
    1dfe:	47a8      	blx	r5
    1e00:	4b13      	ldr	r3, [pc, #76]	; (1e50 <hif_receive+0xd4>)
    1e02:	68da      	ldr	r2, [r3, #12]
    1e04:	0021      	movs	r1, r4
    1e06:	4814      	ldr	r0, [pc, #80]	; (1e58 <hif_receive+0xdc>)
    1e08:	47a8      	blx	r5
    1e0a:	200d      	movs	r0, #13
    1e0c:	4b0f      	ldr	r3, [pc, #60]	; (1e4c <hif_receive+0xd0>)
    1e0e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1e10:	200c      	movs	r0, #12
    1e12:	4240      	negs	r0, r0
		goto ERR1;
    1e14:	e7bf      	b.n	1d96 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1e16:	4a11      	ldr	r2, [pc, #68]	; (1e5c <hif_receive+0xe0>)
    1e18:	4907      	ldr	r1, [pc, #28]	; (1e38 <hif_receive+0xbc>)
    1e1a:	4808      	ldr	r0, [pc, #32]	; (1e3c <hif_receive+0xc0>)
    1e1c:	4b08      	ldr	r3, [pc, #32]	; (1e40 <hif_receive+0xc4>)
    1e1e:	4798      	blx	r3
    1e20:	480f      	ldr	r0, [pc, #60]	; (1e60 <hif_receive+0xe4>)
    1e22:	4b09      	ldr	r3, [pc, #36]	; (1e48 <hif_receive+0xcc>)
    1e24:	4798      	blx	r3
    1e26:	200d      	movs	r0, #13
    1e28:	4b08      	ldr	r3, [pc, #32]	; (1e4c <hif_receive+0xd0>)
    1e2a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1e2c:	200c      	movs	r0, #12
    1e2e:	4240      	negs	r0, r0
		goto ERR1;
    1e30:	e7b1      	b.n	1d96 <hif_receive+0x1a>
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	00001691 	.word	0x00001691
    1e38:	0000d5bc 	.word	0x0000d5bc
    1e3c:	0000d550 	.word	0x0000d550
    1e40:	0000be51 	.word	0x0000be51
    1e44:	0000d7c8 	.word	0x0000d7c8
    1e48:	0000bf6d 	.word	0x0000bf6d
    1e4c:	0000be85 	.word	0x0000be85
    1e50:	20000f34 	.word	0x20000f34
    1e54:	00002ab9 	.word	0x00002ab9
    1e58:	0000d7e8 	.word	0x0000d7e8
    1e5c:	00000286 	.word	0x00000286
    1e60:	0000d830 	.word	0x0000d830

00001e64 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1e64:	b570      	push	{r4, r5, r6, lr}
    1e66:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1e68:	2807      	cmp	r0, #7
    1e6a:	d81f      	bhi.n	1eac <hif_register_cb+0x48>
    1e6c:	0083      	lsls	r3, r0, #2
    1e6e:	4a16      	ldr	r2, [pc, #88]	; (1ec8 <hif_register_cb+0x64>)
    1e70:	58d3      	ldr	r3, [r2, r3]
    1e72:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1e74:	4b15      	ldr	r3, [pc, #84]	; (1ecc <hif_register_cb+0x68>)
    1e76:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1e78:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1e7a:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1e7c:	4b13      	ldr	r3, [pc, #76]	; (1ecc <hif_register_cb+0x68>)
    1e7e:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1e80:	2000      	movs	r0, #0
			break;
    1e82:	e7fa      	b.n	1e7a <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1e84:	4b11      	ldr	r3, [pc, #68]	; (1ecc <hif_register_cb+0x68>)
    1e86:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1e88:	2000      	movs	r0, #0
			break;
    1e8a:	e7f6      	b.n	1e7a <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1e8c:	4b0f      	ldr	r3, [pc, #60]	; (1ecc <hif_register_cb+0x68>)
    1e8e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1e90:	2000      	movs	r0, #0
			break;
    1e92:	e7f2      	b.n	1e7a <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1e94:	4b0d      	ldr	r3, [pc, #52]	; (1ecc <hif_register_cb+0x68>)
    1e96:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1e98:	2000      	movs	r0, #0
			break;
    1e9a:	e7ee      	b.n	1e7a <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    1e9c:	4b0b      	ldr	r3, [pc, #44]	; (1ecc <hif_register_cb+0x68>)
    1e9e:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    1ea0:	2000      	movs	r0, #0
			break;
    1ea2:	e7ea      	b.n	1e7a <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1ea4:	4b09      	ldr	r3, [pc, #36]	; (1ecc <hif_register_cb+0x68>)
    1ea6:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    1ea8:	2000      	movs	r0, #0
			break;
    1eaa:	e7e6      	b.n	1e7a <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    1eac:	4a08      	ldr	r2, [pc, #32]	; (1ed0 <hif_register_cb+0x6c>)
    1eae:	4909      	ldr	r1, [pc, #36]	; (1ed4 <hif_register_cb+0x70>)
    1eb0:	4809      	ldr	r0, [pc, #36]	; (1ed8 <hif_register_cb+0x74>)
    1eb2:	4d0a      	ldr	r5, [pc, #40]	; (1edc <hif_register_cb+0x78>)
    1eb4:	47a8      	blx	r5
    1eb6:	0021      	movs	r1, r4
    1eb8:	4809      	ldr	r0, [pc, #36]	; (1ee0 <hif_register_cb+0x7c>)
    1eba:	47a8      	blx	r5
    1ebc:	200d      	movs	r0, #13
    1ebe:	4b09      	ldr	r3, [pc, #36]	; (1ee4 <hif_register_cb+0x80>)
    1ec0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1ec2:	200c      	movs	r0, #12
    1ec4:	4240      	negs	r0, r0
			break;
    1ec6:	e7d8      	b.n	1e7a <hif_register_cb+0x16>
    1ec8:	0000d578 	.word	0x0000d578
    1ecc:	20000f34 	.word	0x20000f34
    1ed0:	000002be 	.word	0x000002be
    1ed4:	0000d5c8 	.word	0x0000d5c8
    1ed8:	0000d550 	.word	0x0000d550
    1edc:	0000be51 	.word	0x0000be51
    1ee0:	0000d874 	.word	0x0000d874
    1ee4:	0000be85 	.word	0x0000be85

00001ee8 <hif_init>:
{
    1ee8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    1eea:	222c      	movs	r2, #44	; 0x2c
    1eec:	2100      	movs	r1, #0
    1eee:	4806      	ldr	r0, [pc, #24]	; (1f08 <hif_init+0x20>)
    1ef0:	4b06      	ldr	r3, [pc, #24]	; (1f0c <hif_init+0x24>)
    1ef2:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1ef4:	4806      	ldr	r0, [pc, #24]	; (1f10 <hif_init+0x28>)
    1ef6:	4b07      	ldr	r3, [pc, #28]	; (1f14 <hif_init+0x2c>)
    1ef8:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1efa:	4907      	ldr	r1, [pc, #28]	; (1f18 <hif_init+0x30>)
    1efc:	2003      	movs	r0, #3
    1efe:	4b07      	ldr	r3, [pc, #28]	; (1f1c <hif_init+0x34>)
    1f00:	4798      	blx	r3
}
    1f02:	2000      	movs	r0, #0
    1f04:	bd10      	pop	{r4, pc}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	20000f34 	.word	0x20000f34
    1f0c:	00001651 	.word	0x00001651
    1f10:	0000167d 	.word	0x0000167d
    1f14:	00001305 	.word	0x00001305
    1f18:	0000168d 	.word	0x0000168d
    1f1c:	00001e65 	.word	0x00001e65

00001f20 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1f20:	b530      	push	{r4, r5, lr}
    1f22:	b09f      	sub	sp, #124	; 0x7c
    1f24:	0004      	movs	r4, r0
    1f26:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1f28:	282c      	cmp	r0, #44	; 0x2c
    1f2a:	d02f      	beq.n	1f8c <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1f2c:	281b      	cmp	r0, #27
    1f2e:	d03d      	beq.n	1fac <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1f30:	2806      	cmp	r0, #6
    1f32:	d04b      	beq.n	1fcc <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1f34:	280e      	cmp	r0, #14
    1f36:	d027      	beq.n	1f88 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1f38:	2832      	cmp	r0, #50	; 0x32
    1f3a:	d057      	beq.n	1fec <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1f3c:	282f      	cmp	r0, #47	; 0x2f
    1f3e:	d065      	beq.n	200c <STACK_SIZE+0xc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1f40:	2834      	cmp	r0, #52	; 0x34
    1f42:	d100      	bne.n	1f46 <m2m_wifi_cb+0x26>
    1f44:	e077      	b.n	2036 <STACK_SIZE+0x36>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1f46:	2811      	cmp	r0, #17
    1f48:	d100      	bne.n	1f4c <m2m_wifi_cb+0x2c>
    1f4a:	e096      	b.n	207a <STACK_SIZE+0x7a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1f4c:	2813      	cmp	r0, #19
    1f4e:	d100      	bne.n	1f52 <m2m_wifi_cb+0x32>
    1f50:	e0ac      	b.n	20ac <STACK_SIZE+0xac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1f52:	2804      	cmp	r0, #4
    1f54:	d100      	bne.n	1f58 <m2m_wifi_cb+0x38>
    1f56:	e0bb      	b.n	20d0 <STACK_SIZE+0xd0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1f58:	2865      	cmp	r0, #101	; 0x65
    1f5a:	d100      	bne.n	1f5e <m2m_wifi_cb+0x3e>
    1f5c:	e0ca      	b.n	20f4 <STACK_SIZE+0xf4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1f5e:	2809      	cmp	r0, #9
    1f60:	d100      	bne.n	1f64 <m2m_wifi_cb+0x44>
    1f62:	e0d9      	b.n	2118 <STACK_SIZE+0x118>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1f64:	282a      	cmp	r0, #42	; 0x2a
    1f66:	d100      	bne.n	1f6a <m2m_wifi_cb+0x4a>
    1f68:	e0e8      	b.n	213c <STACK_SIZE+0x13c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1f6a:	2820      	cmp	r0, #32
    1f6c:	d100      	bne.n	1f70 <m2m_wifi_cb+0x50>
    1f6e:	e0f7      	b.n	2160 <STACK_SIZE+0x160>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1f70:	2224      	movs	r2, #36	; 0x24
    1f72:	32ff      	adds	r2, #255	; 0xff
    1f74:	4989      	ldr	r1, [pc, #548]	; (219c <STACK_SIZE+0x19c>)
    1f76:	488a      	ldr	r0, [pc, #552]	; (21a0 <STACK_SIZE+0x1a0>)
    1f78:	4d8a      	ldr	r5, [pc, #552]	; (21a4 <STACK_SIZE+0x1a4>)
    1f7a:	47a8      	blx	r5
    1f7c:	0021      	movs	r1, r4
    1f7e:	488a      	ldr	r0, [pc, #552]	; (21a8 <STACK_SIZE+0x1a8>)
    1f80:	47a8      	blx	r5
    1f82:	200d      	movs	r0, #13
    1f84:	4b89      	ldr	r3, [pc, #548]	; (21ac <STACK_SIZE+0x1ac>)
    1f86:	4798      	blx	r3
	}
}
    1f88:	b01f      	add	sp, #124	; 0x7c
    1f8a:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1f8c:	2300      	movs	r3, #0
    1f8e:	2204      	movs	r2, #4
    1f90:	a903      	add	r1, sp, #12
    1f92:	0028      	movs	r0, r5
    1f94:	4c86      	ldr	r4, [pc, #536]	; (21b0 <STACK_SIZE+0x1b0>)
    1f96:	47a0      	blx	r4
    1f98:	2800      	cmp	r0, #0
    1f9a:	d1f5      	bne.n	1f88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1f9c:	4b85      	ldr	r3, [pc, #532]	; (21b4 <STACK_SIZE+0x1b4>)
    1f9e:	681b      	ldr	r3, [r3, #0]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d0f1      	beq.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1fa4:	a903      	add	r1, sp, #12
    1fa6:	302c      	adds	r0, #44	; 0x2c
    1fa8:	4798      	blx	r3
    1faa:	e7ed      	b.n	1f88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1fac:	2300      	movs	r3, #0
    1fae:	2208      	movs	r2, #8
    1fb0:	a903      	add	r1, sp, #12
    1fb2:	0028      	movs	r0, r5
    1fb4:	4c7e      	ldr	r4, [pc, #504]	; (21b0 <STACK_SIZE+0x1b0>)
    1fb6:	47a0      	blx	r4
    1fb8:	2800      	cmp	r0, #0
    1fba:	d1e5      	bne.n	1f88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fbc:	4b7d      	ldr	r3, [pc, #500]	; (21b4 <STACK_SIZE+0x1b4>)
    1fbe:	681b      	ldr	r3, [r3, #0]
    1fc0:	2b00      	cmp	r3, #0
    1fc2:	d0e1      	beq.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    1fc4:	a903      	add	r1, sp, #12
    1fc6:	301b      	adds	r0, #27
    1fc8:	4798      	blx	r3
    1fca:	e7dd      	b.n	1f88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    1fcc:	2301      	movs	r3, #1
    1fce:	2230      	movs	r2, #48	; 0x30
    1fd0:	a903      	add	r1, sp, #12
    1fd2:	0028      	movs	r0, r5
    1fd4:	4c76      	ldr	r4, [pc, #472]	; (21b0 <STACK_SIZE+0x1b0>)
    1fd6:	47a0      	blx	r4
    1fd8:	2800      	cmp	r0, #0
    1fda:	d1d5      	bne.n	1f88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1fdc:	4b75      	ldr	r3, [pc, #468]	; (21b4 <STACK_SIZE+0x1b4>)
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	2b00      	cmp	r3, #0
    1fe2:	d0d1      	beq.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    1fe4:	a903      	add	r1, sp, #12
    1fe6:	3006      	adds	r0, #6
    1fe8:	4798      	blx	r3
    1fea:	e7cd      	b.n	1f88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    1fec:	2300      	movs	r3, #0
    1fee:	2218      	movs	r2, #24
    1ff0:	a903      	add	r1, sp, #12
    1ff2:	0028      	movs	r0, r5
    1ff4:	4c6e      	ldr	r4, [pc, #440]	; (21b0 <STACK_SIZE+0x1b0>)
    1ff6:	47a0      	blx	r4
    1ff8:	2800      	cmp	r0, #0
    1ffa:	d1c5      	bne.n	1f88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1ffc:	4b6d      	ldr	r3, [pc, #436]	; (21b4 <STACK_SIZE+0x1b4>)
    1ffe:	681b      	ldr	r3, [r3, #0]
    2000:	2b00      	cmp	r3, #0
    2002:	d0c1      	beq.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    2004:	a903      	add	r1, sp, #12
    2006:	3032      	adds	r0, #50	; 0x32
    2008:	4798      	blx	r3
    200a:	e7bd      	b.n	1f88 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    200c:	2264      	movs	r2, #100	; 0x64
    200e:	2100      	movs	r1, #0
    2010:	a803      	add	r0, sp, #12
    2012:	4b69      	ldr	r3, [pc, #420]	; (21b8 <STACK_SIZE+0x1b8>)
    2014:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    2016:	2300      	movs	r3, #0
    2018:	2264      	movs	r2, #100	; 0x64
    201a:	a903      	add	r1, sp, #12
    201c:	0028      	movs	r0, r5
    201e:	4c64      	ldr	r4, [pc, #400]	; (21b0 <STACK_SIZE+0x1b0>)
    2020:	47a0      	blx	r4
    2022:	2800      	cmp	r0, #0
    2024:	d1b0      	bne.n	1f88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2026:	4b63      	ldr	r3, [pc, #396]	; (21b4 <STACK_SIZE+0x1b4>)
    2028:	681b      	ldr	r3, [r3, #0]
    202a:	2b00      	cmp	r3, #0
    202c:	d0ac      	beq.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    202e:	a903      	add	r1, sp, #12
    2030:	302f      	adds	r0, #47	; 0x2f
    2032:	4798      	blx	r3
    2034:	e7a8      	b.n	1f88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    2036:	2300      	movs	r3, #0
    2038:	2204      	movs	r2, #4
    203a:	a903      	add	r1, sp, #12
    203c:	0028      	movs	r0, r5
    203e:	4c5c      	ldr	r4, [pc, #368]	; (21b0 <STACK_SIZE+0x1b0>)
    2040:	47a0      	blx	r4
    2042:	2800      	cmp	r0, #0
    2044:	d1a0      	bne.n	1f88 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    2046:	485d      	ldr	r0, [pc, #372]	; (21bc <STACK_SIZE+0x1bc>)
    2048:	4d56      	ldr	r5, [pc, #344]	; (21a4 <STACK_SIZE+0x1a4>)
    204a:	47a8      	blx	r5
    204c:	9c03      	ldr	r4, [sp, #12]
    204e:	0a23      	lsrs	r3, r4, #8
    2050:	20ff      	movs	r0, #255	; 0xff
    2052:	4003      	ands	r3, r0
    2054:	0c22      	lsrs	r2, r4, #16
    2056:	4002      	ands	r2, r0
    2058:	0e21      	lsrs	r1, r4, #24
    205a:	4020      	ands	r0, r4
    205c:	9000      	str	r0, [sp, #0]
    205e:	4858      	ldr	r0, [pc, #352]	; (21c0 <STACK_SIZE+0x1c0>)
    2060:	47a8      	blx	r5
    2062:	200d      	movs	r0, #13
    2064:	4b51      	ldr	r3, [pc, #324]	; (21ac <STACK_SIZE+0x1ac>)
    2066:	4798      	blx	r3
			if (gpfAppWifiCb)
    2068:	4b52      	ldr	r3, [pc, #328]	; (21b4 <STACK_SIZE+0x1b4>)
    206a:	681b      	ldr	r3, [r3, #0]
    206c:	2b00      	cmp	r3, #0
    206e:	d100      	bne.n	2072 <STACK_SIZE+0x72>
    2070:	e78a      	b.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    2072:	2100      	movs	r1, #0
    2074:	2034      	movs	r0, #52	; 0x34
    2076:	4798      	blx	r3
    2078:	e786      	b.n	1f88 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    207a:	2200      	movs	r2, #0
    207c:	4b51      	ldr	r3, [pc, #324]	; (21c4 <STACK_SIZE+0x1c4>)
    207e:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    2080:	2300      	movs	r3, #0
    2082:	3204      	adds	r2, #4
    2084:	a903      	add	r1, sp, #12
    2086:	0028      	movs	r0, r5
    2088:	4c49      	ldr	r4, [pc, #292]	; (21b0 <STACK_SIZE+0x1b0>)
    208a:	47a0      	blx	r4
    208c:	2800      	cmp	r0, #0
    208e:	d000      	beq.n	2092 <STACK_SIZE+0x92>
    2090:	e77a      	b.n	1f88 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    2092:	ab03      	add	r3, sp, #12
    2094:	781a      	ldrb	r2, [r3, #0]
    2096:	4b4c      	ldr	r3, [pc, #304]	; (21c8 <STACK_SIZE+0x1c8>)
    2098:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    209a:	4b46      	ldr	r3, [pc, #280]	; (21b4 <STACK_SIZE+0x1b4>)
    209c:	681b      	ldr	r3, [r3, #0]
    209e:	2b00      	cmp	r3, #0
    20a0:	d100      	bne.n	20a4 <STACK_SIZE+0xa4>
    20a2:	e771      	b.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    20a4:	a903      	add	r1, sp, #12
    20a6:	3011      	adds	r0, #17
    20a8:	4798      	blx	r3
    20aa:	e76d      	b.n	1f88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    20ac:	2300      	movs	r3, #0
    20ae:	222c      	movs	r2, #44	; 0x2c
    20b0:	a903      	add	r1, sp, #12
    20b2:	0028      	movs	r0, r5
    20b4:	4c3e      	ldr	r4, [pc, #248]	; (21b0 <STACK_SIZE+0x1b0>)
    20b6:	47a0      	blx	r4
    20b8:	2800      	cmp	r0, #0
    20ba:	d000      	beq.n	20be <STACK_SIZE+0xbe>
    20bc:	e764      	b.n	1f88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    20be:	4b3d      	ldr	r3, [pc, #244]	; (21b4 <STACK_SIZE+0x1b4>)
    20c0:	681b      	ldr	r3, [r3, #0]
    20c2:	2b00      	cmp	r3, #0
    20c4:	d100      	bne.n	20c8 <STACK_SIZE+0xc8>
    20c6:	e75f      	b.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    20c8:	a903      	add	r1, sp, #12
    20ca:	3013      	adds	r0, #19
    20cc:	4798      	blx	r3
    20ce:	e75b      	b.n	1f88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    20d0:	2300      	movs	r3, #0
    20d2:	2204      	movs	r2, #4
    20d4:	a91c      	add	r1, sp, #112	; 0x70
    20d6:	0028      	movs	r0, r5
    20d8:	4c35      	ldr	r4, [pc, #212]	; (21b0 <STACK_SIZE+0x1b0>)
    20da:	47a0      	blx	r4
    20dc:	2800      	cmp	r0, #0
    20de:	d000      	beq.n	20e2 <STACK_SIZE+0xe2>
    20e0:	e752      	b.n	1f88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    20e2:	4b34      	ldr	r3, [pc, #208]	; (21b4 <STACK_SIZE+0x1b4>)
    20e4:	681b      	ldr	r3, [r3, #0]
    20e6:	2b00      	cmp	r3, #0
    20e8:	d100      	bne.n	20ec <STACK_SIZE+0xec>
    20ea:	e74d      	b.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    20ec:	a91c      	add	r1, sp, #112	; 0x70
    20ee:	3004      	adds	r0, #4
    20f0:	4798      	blx	r3
    20f2:	e749      	b.n	1f88 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    20f4:	2300      	movs	r3, #0
    20f6:	2204      	movs	r2, #4
    20f8:	a91c      	add	r1, sp, #112	; 0x70
    20fa:	0028      	movs	r0, r5
    20fc:	4c2c      	ldr	r4, [pc, #176]	; (21b0 <STACK_SIZE+0x1b0>)
    20fe:	47a0      	blx	r4
    2100:	2800      	cmp	r0, #0
    2102:	d000      	beq.n	2106 <STACK_SIZE+0x106>
    2104:	e740      	b.n	1f88 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2106:	4b2b      	ldr	r3, [pc, #172]	; (21b4 <STACK_SIZE+0x1b4>)
    2108:	681b      	ldr	r3, [r3, #0]
    210a:	2b00      	cmp	r3, #0
    210c:	d100      	bne.n	2110 <STACK_SIZE+0x110>
    210e:	e73b      	b.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    2110:	a91c      	add	r1, sp, #112	; 0x70
    2112:	3065      	adds	r0, #101	; 0x65
    2114:	4798      	blx	r3
    2116:	e737      	b.n	1f88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    2118:	2301      	movs	r3, #1
    211a:	2264      	movs	r2, #100	; 0x64
    211c:	a903      	add	r1, sp, #12
    211e:	0028      	movs	r0, r5
    2120:	4c23      	ldr	r4, [pc, #140]	; (21b0 <STACK_SIZE+0x1b0>)
    2122:	47a0      	blx	r4
    2124:	2800      	cmp	r0, #0
    2126:	d000      	beq.n	212a <STACK_SIZE+0x12a>
    2128:	e72e      	b.n	1f88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    212a:	4b22      	ldr	r3, [pc, #136]	; (21b4 <STACK_SIZE+0x1b4>)
    212c:	681b      	ldr	r3, [r3, #0]
    212e:	2b00      	cmp	r3, #0
    2130:	d100      	bne.n	2134 <STACK_SIZE+0x134>
    2132:	e729      	b.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    2134:	a903      	add	r1, sp, #12
    2136:	3009      	adds	r0, #9
    2138:	4798      	blx	r3
    213a:	e725      	b.n	1f88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    213c:	2301      	movs	r3, #1
    213e:	2204      	movs	r2, #4
    2140:	a903      	add	r1, sp, #12
    2142:	0028      	movs	r0, r5
    2144:	4c1a      	ldr	r4, [pc, #104]	; (21b0 <STACK_SIZE+0x1b0>)
    2146:	47a0      	blx	r4
    2148:	2800      	cmp	r0, #0
    214a:	d000      	beq.n	214e <STACK_SIZE+0x14e>
    214c:	e71c      	b.n	1f88 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    214e:	4b19      	ldr	r3, [pc, #100]	; (21b4 <STACK_SIZE+0x1b4>)
    2150:	681b      	ldr	r3, [r3, #0]
    2152:	2b00      	cmp	r3, #0
    2154:	d100      	bne.n	2158 <STACK_SIZE+0x158>
    2156:	e717      	b.n	1f88 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    2158:	a903      	add	r1, sp, #12
    215a:	302a      	adds	r0, #42	; 0x2a
    215c:	4798      	blx	r3
    215e:	e713      	b.n	1f88 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    2160:	2300      	movs	r3, #0
    2162:	2208      	movs	r2, #8
    2164:	a903      	add	r1, sp, #12
    2166:	0028      	movs	r0, r5
    2168:	4c11      	ldr	r4, [pc, #68]	; (21b0 <STACK_SIZE+0x1b0>)
    216a:	47a0      	blx	r4
    216c:	2800      	cmp	r0, #0
    216e:	d000      	beq.n	2172 <STACK_SIZE+0x172>
    2170:	e70a      	b.n	1f88 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    2172:	ab03      	add	r3, sp, #12
    2174:	889a      	ldrh	r2, [r3, #4]
    2176:	0028      	movs	r0, r5
    2178:	3008      	adds	r0, #8
    217a:	2301      	movs	r3, #1
    217c:	9903      	ldr	r1, [sp, #12]
    217e:	4c0c      	ldr	r4, [pc, #48]	; (21b0 <STACK_SIZE+0x1b0>)
    2180:	47a0      	blx	r4
    2182:	2800      	cmp	r0, #0
    2184:	d000      	beq.n	2188 <STACK_SIZE+0x188>
    2186:	e6ff      	b.n	1f88 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    2188:	4b0a      	ldr	r3, [pc, #40]	; (21b4 <STACK_SIZE+0x1b4>)
    218a:	681b      	ldr	r3, [r3, #0]
    218c:	2b00      	cmp	r3, #0
    218e:	d100      	bne.n	2192 <STACK_SIZE+0x192>
    2190:	e6fa      	b.n	1f88 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    2192:	a903      	add	r1, sp, #12
    2194:	3020      	adds	r0, #32
    2196:	4798      	blx	r3
    2198:	e6f6      	b.n	1f88 <m2m_wifi_cb+0x68>
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	0000d8b8 	.word	0x0000d8b8
    21a0:	0000d550 	.word	0x0000d550
    21a4:	0000be51 	.word	0x0000be51
    21a8:	0000d908 	.word	0x0000d908
    21ac:	0000be85 	.word	0x0000be85
    21b0:	00001d7d 	.word	0x00001d7d
    21b4:	200003c4 	.word	0x200003c4
    21b8:	00001651 	.word	0x00001651
    21bc:	0000d880 	.word	0x0000d880
    21c0:	0000d8e8 	.word	0x0000d8e8
    21c4:	200003c9 	.word	0x200003c9
    21c8:	200003c8 	.word	0x200003c8

000021cc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    21cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ce:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    21d0:	2201      	movs	r2, #1
    21d2:	230f      	movs	r3, #15
    21d4:	446b      	add	r3, sp
    21d6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    21d8:	2800      	cmp	r0, #0
    21da:	d061      	beq.n	22a0 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    21dc:	6802      	ldr	r2, [r0, #0]
    21de:	4b32      	ldr	r3, [pc, #200]	; (22a8 <m2m_wifi_init+0xdc>)
    21e0:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    21e2:	2200      	movs	r2, #0
    21e4:	4b31      	ldr	r3, [pc, #196]	; (22ac <m2m_wifi_init+0xe0>)
    21e6:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    21e8:	200f      	movs	r0, #15
    21ea:	4468      	add	r0, sp
    21ec:	4b30      	ldr	r3, [pc, #192]	; (22b0 <m2m_wifi_init+0xe4>)
    21ee:	4798      	blx	r3
    21f0:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    21f2:	d002      	beq.n	21fa <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    21f4:	0020      	movs	r0, r4
    21f6:	b00f      	add	sp, #60	; 0x3c
    21f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    21fa:	2000      	movs	r0, #0
    21fc:	4b2d      	ldr	r3, [pc, #180]	; (22b4 <m2m_wifi_init+0xe8>)
    21fe:	4798      	blx	r3
    2200:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    2202:	d149      	bne.n	2298 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    2204:	492c      	ldr	r1, [pc, #176]	; (22b8 <m2m_wifi_init+0xec>)
    2206:	2001      	movs	r0, #1
    2208:	4b2c      	ldr	r3, [pc, #176]	; (22bc <m2m_wifi_init+0xf0>)
    220a:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    220c:	ae04      	add	r6, sp, #16
    220e:	0030      	movs	r0, r6
    2210:	4b2b      	ldr	r3, [pc, #172]	; (22c0 <m2m_wifi_init+0xf4>)
    2212:	4798      	blx	r3
    2214:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    2216:	482b      	ldr	r0, [pc, #172]	; (22c4 <m2m_wifi_init+0xf8>)
    2218:	4d2b      	ldr	r5, [pc, #172]	; (22c8 <m2m_wifi_init+0xfc>)
    221a:	47a8      	blx	r5
    221c:	79b3      	ldrb	r3, [r6, #6]
    221e:	7972      	ldrb	r2, [r6, #5]
    2220:	7931      	ldrb	r1, [r6, #4]
    2222:	8c30      	ldrh	r0, [r6, #32]
    2224:	9000      	str	r0, [sp, #0]
    2226:	4829      	ldr	r0, [pc, #164]	; (22cc <m2m_wifi_init+0x100>)
    2228:	47a8      	blx	r5
    222a:	200d      	movs	r0, #13
    222c:	4f28      	ldr	r7, [pc, #160]	; (22d0 <m2m_wifi_init+0x104>)
    222e:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    2230:	4824      	ldr	r0, [pc, #144]	; (22c4 <m2m_wifi_init+0xf8>)
    2232:	47a8      	blx	r5
    2234:	2226      	movs	r2, #38	; 0x26
    2236:	446a      	add	r2, sp
    2238:	211a      	movs	r1, #26
    223a:	4469      	add	r1, sp
    223c:	4825      	ldr	r0, [pc, #148]	; (22d4 <m2m_wifi_init+0x108>)
    223e:	47a8      	blx	r5
    2240:	200d      	movs	r0, #13
    2242:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2244:	481f      	ldr	r0, [pc, #124]	; (22c4 <m2m_wifi_init+0xf8>)
    2246:	47a8      	blx	r5
    2248:	7a73      	ldrb	r3, [r6, #9]
    224a:	7a32      	ldrb	r2, [r6, #8]
    224c:	79f1      	ldrb	r1, [r6, #7]
    224e:	4822      	ldr	r0, [pc, #136]	; (22d8 <m2m_wifi_init+0x10c>)
    2250:	47a8      	blx	r5
    2252:	200d      	movs	r0, #13
    2254:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    2256:	481b      	ldr	r0, [pc, #108]	; (22c4 <m2m_wifi_init+0xf8>)
    2258:	47a8      	blx	r5
    225a:	2304      	movs	r3, #4
    225c:	2205      	movs	r2, #5
    225e:	2113      	movs	r1, #19
    2260:	481e      	ldr	r0, [pc, #120]	; (22dc <m2m_wifi_init+0x110>)
    2262:	47a8      	blx	r5
    2264:	200d      	movs	r0, #13
    2266:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    2268:	4816      	ldr	r0, [pc, #88]	; (22c4 <m2m_wifi_init+0xf8>)
    226a:	47a8      	blx	r5
    226c:	4a1c      	ldr	r2, [pc, #112]	; (22e0 <m2m_wifi_init+0x114>)
    226e:	491d      	ldr	r1, [pc, #116]	; (22e4 <m2m_wifi_init+0x118>)
    2270:	481d      	ldr	r0, [pc, #116]	; (22e8 <m2m_wifi_init+0x11c>)
    2272:	47a8      	blx	r5
    2274:	200d      	movs	r0, #13
    2276:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    2278:	0023      	movs	r3, r4
    227a:	330d      	adds	r3, #13
    227c:	d1ba      	bne.n	21f4 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    227e:	22e8      	movs	r2, #232	; 0xe8
    2280:	32ff      	adds	r2, #255	; 0xff
    2282:	491a      	ldr	r1, [pc, #104]	; (22ec <m2m_wifi_init+0x120>)
    2284:	481a      	ldr	r0, [pc, #104]	; (22f0 <m2m_wifi_init+0x124>)
    2286:	4b10      	ldr	r3, [pc, #64]	; (22c8 <m2m_wifi_init+0xfc>)
    2288:	4798      	blx	r3
    228a:	481a      	ldr	r0, [pc, #104]	; (22f4 <m2m_wifi_init+0x128>)
    228c:	4b1a      	ldr	r3, [pc, #104]	; (22f8 <m2m_wifi_init+0x12c>)
    228e:	4798      	blx	r3
    2290:	200d      	movs	r0, #13
    2292:	4b0f      	ldr	r3, [pc, #60]	; (22d0 <m2m_wifi_init+0x104>)
    2294:	4798      	blx	r3
    2296:	e7ad      	b.n	21f4 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    2298:	2000      	movs	r0, #0
    229a:	4b18      	ldr	r3, [pc, #96]	; (22fc <m2m_wifi_init+0x130>)
    229c:	4798      	blx	r3
    229e:	e7a9      	b.n	21f4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    22a0:	240c      	movs	r4, #12
    22a2:	4264      	negs	r4, r4
    22a4:	e7a6      	b.n	21f4 <m2m_wifi_init+0x28>
    22a6:	46c0      	nop			; (mov r8, r8)
    22a8:	200003c4 	.word	0x200003c4
    22ac:	200003c9 	.word	0x200003c9
    22b0:	00002c6d 	.word	0x00002c6d
    22b4:	00001ee9 	.word	0x00001ee9
    22b8:	00001f21 	.word	0x00001f21
    22bc:	00001e65 	.word	0x00001e65
    22c0:	00002b89 	.word	0x00002b89
    22c4:	0000d880 	.word	0x0000d880
    22c8:	0000be51 	.word	0x0000be51
    22cc:	0000d9c4 	.word	0x0000d9c4
    22d0:	0000be85 	.word	0x0000be85
    22d4:	0000d9ec 	.word	0x0000d9ec
    22d8:	0000da08 	.word	0x0000da08
    22dc:	0000da2c 	.word	0x0000da2c
    22e0:	0000da44 	.word	0x0000da44
    22e4:	0000da50 	.word	0x0000da50
    22e8:	0000da5c 	.word	0x0000da5c
    22ec:	0000d8c4 	.word	0x0000d8c4
    22f0:	0000d550 	.word	0x0000d550
    22f4:	0000da74 	.word	0x0000da74
    22f8:	0000bf6d 	.word	0x0000bf6d
    22fc:	00002d41 	.word	0x00002d41

00002300 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    2300:	b510      	push	{r4, lr}
	return hif_handle_isr();
    2302:	4b01      	ldr	r3, [pc, #4]	; (2308 <m2m_wifi_handle_events+0x8>)
    2304:	4798      	blx	r3
}
    2306:	bd10      	pop	{r4, pc}
    2308:	00001995 	.word	0x00001995

0000230c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    230c:	b5f0      	push	{r4, r5, r6, r7, lr}
    230e:	46ce      	mov	lr, r9
    2310:	4647      	mov	r7, r8
    2312:	b580      	push	{r7, lr}
    2314:	b0a3      	sub	sp, #140	; 0x8c
    2316:	9005      	str	r0, [sp, #20]
    2318:	000c      	movs	r4, r1
    231a:	0015      	movs	r5, r2
    231c:	001f      	movs	r7, r3
    231e:	ab2a      	add	r3, sp, #168	; 0xa8
    2320:	881b      	ldrh	r3, [r3, #0]
    2322:	4699      	mov	r9, r3
    2324:	ab2b      	add	r3, sp, #172	; 0xac
    2326:	781b      	ldrb	r3, [r3, #0]
    2328:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    232a:	2a01      	cmp	r2, #1
    232c:	d003      	beq.n	2336 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    232e:	2f00      	cmp	r7, #0
    2330:	d040      	beq.n	23b4 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2332:	2a02      	cmp	r2, #2
    2334:	d04c      	beq.n	23d0 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    2336:	1e63      	subs	r3, r4, #1
    2338:	2b1f      	cmp	r3, #31
    233a:	d900      	bls.n	233e <m2m_wifi_connect_sc+0x32>
    233c:	e078      	b.n	2430 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    233e:	464b      	mov	r3, r9
    2340:	3b01      	subs	r3, #1
    2342:	b29b      	uxth	r3, r3
    2344:	2b0d      	cmp	r3, #13
    2346:	d903      	bls.n	2350 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    2348:	464b      	mov	r3, r9
    234a:	2bff      	cmp	r3, #255	; 0xff
    234c:	d000      	beq.n	2350 <m2m_wifi_connect_sc+0x44>
    234e:	e07e      	b.n	244e <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2350:	ae07      	add	r6, sp, #28
    2352:	0022      	movs	r2, r4
    2354:	9905      	ldr	r1, [sp, #20]
    2356:	205a      	movs	r0, #90	; 0x5a
    2358:	ab02      	add	r3, sp, #8
    235a:	469c      	mov	ip, r3
    235c:	4460      	add	r0, ip
    235e:	4b79      	ldr	r3, [pc, #484]	; (2544 <m2m_wifi_connect_sc+0x238>)
    2360:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    2362:	1934      	adds	r4, r6, r4
    2364:	3446      	adds	r4, #70	; 0x46
    2366:	2300      	movs	r3, #0
    2368:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    236a:	3344      	adds	r3, #68	; 0x44
    236c:	464a      	mov	r2, r9
    236e:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    2370:	4643      	mov	r3, r8
    2372:	1e5a      	subs	r2, r3, #1
    2374:	4193      	sbcs	r3, r2
    2376:	2267      	movs	r2, #103	; 0x67
    2378:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    237a:	2341      	movs	r3, #65	; 0x41
    237c:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    237e:	2d03      	cmp	r5, #3
    2380:	d100      	bne.n	2384 <m2m_wifi_connect_sc+0x78>
    2382:	e072      	b.n	246a <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    2384:	2d02      	cmp	r5, #2
    2386:	d100      	bne.n	238a <m2m_wifi_connect_sc+0x7e>
    2388:	e0ac      	b.n	24e4 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    238a:	2d04      	cmp	r5, #4
    238c:	d100      	bne.n	2390 <m2m_wifi_connect_sc+0x84>
    238e:	e0c4      	b.n	251a <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    2390:	2d01      	cmp	r5, #1
    2392:	d000      	beq.n	2396 <m2m_wifi_connect_sc+0x8a>
    2394:	e0c7      	b.n	2526 <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    2396:	2300      	movs	r3, #0
    2398:	9302      	str	r3, [sp, #8]
    239a:	9301      	str	r3, [sp, #4]
    239c:	9300      	str	r3, [sp, #0]
    239e:	336c      	adds	r3, #108	; 0x6c
    23a0:	aa07      	add	r2, sp, #28
    23a2:	2128      	movs	r1, #40	; 0x28
    23a4:	2001      	movs	r0, #1
    23a6:	4c68      	ldr	r4, [pc, #416]	; (2548 <m2m_wifi_connect_sc+0x23c>)
    23a8:	47a0      	blx	r4

ERR1:
	return ret;
}
    23aa:	b023      	add	sp, #140	; 0x8c
    23ac:	bc0c      	pop	{r2, r3}
    23ae:	4690      	mov	r8, r2
    23b0:	4699      	mov	r9, r3
    23b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    23b4:	4a65      	ldr	r2, [pc, #404]	; (254c <m2m_wifi_connect_sc+0x240>)
    23b6:	4966      	ldr	r1, [pc, #408]	; (2550 <m2m_wifi_connect_sc+0x244>)
    23b8:	4866      	ldr	r0, [pc, #408]	; (2554 <m2m_wifi_connect_sc+0x248>)
    23ba:	4b67      	ldr	r3, [pc, #412]	; (2558 <m2m_wifi_connect_sc+0x24c>)
    23bc:	4798      	blx	r3
    23be:	4867      	ldr	r0, [pc, #412]	; (255c <m2m_wifi_connect_sc+0x250>)
    23c0:	4b67      	ldr	r3, [pc, #412]	; (2560 <m2m_wifi_connect_sc+0x254>)
    23c2:	4798      	blx	r3
    23c4:	200d      	movs	r0, #13
    23c6:	4b67      	ldr	r3, [pc, #412]	; (2564 <m2m_wifi_connect_sc+0x258>)
    23c8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    23ca:	200c      	movs	r0, #12
    23cc:	4240      	negs	r0, r0
			goto ERR1;
    23ce:	e7ec      	b.n	23aa <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    23d0:	0038      	movs	r0, r7
    23d2:	4b65      	ldr	r3, [pc, #404]	; (2568 <m2m_wifi_connect_sc+0x25c>)
    23d4:	4798      	blx	r3
    23d6:	2840      	cmp	r0, #64	; 0x40
    23d8:	d1ad      	bne.n	2336 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    23da:	783b      	ldrb	r3, [r7, #0]
    23dc:	001a      	movs	r2, r3
    23de:	3a30      	subs	r2, #48	; 0x30
    23e0:	2a36      	cmp	r2, #54	; 0x36
    23e2:	d817      	bhi.n	2414 <m2m_wifi_connect_sc+0x108>
    23e4:	3a0a      	subs	r2, #10
    23e6:	2a06      	cmp	r2, #6
    23e8:	d914      	bls.n	2414 <m2m_wifi_connect_sc+0x108>
    23ea:	3b47      	subs	r3, #71	; 0x47
    23ec:	2b19      	cmp	r3, #25
    23ee:	d911      	bls.n	2414 <m2m_wifi_connect_sc+0x108>
    23f0:	1c7a      	adds	r2, r7, #1
    23f2:	0038      	movs	r0, r7
    23f4:	3040      	adds	r0, #64	; 0x40
    23f6:	7813      	ldrb	r3, [r2, #0]
    23f8:	0019      	movs	r1, r3
    23fa:	3930      	subs	r1, #48	; 0x30
    23fc:	2936      	cmp	r1, #54	; 0x36
    23fe:	d809      	bhi.n	2414 <m2m_wifi_connect_sc+0x108>
    2400:	390a      	subs	r1, #10
    2402:	2906      	cmp	r1, #6
    2404:	d906      	bls.n	2414 <m2m_wifi_connect_sc+0x108>
    2406:	3b47      	subs	r3, #71	; 0x47
    2408:	2b19      	cmp	r3, #25
    240a:	d903      	bls.n	2414 <m2m_wifi_connect_sc+0x108>
    240c:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    240e:	4282      	cmp	r2, r0
    2410:	d1f1      	bne.n	23f6 <m2m_wifi_connect_sc+0xea>
    2412:	e790      	b.n	2336 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    2414:	4a55      	ldr	r2, [pc, #340]	; (256c <m2m_wifi_connect_sc+0x260>)
    2416:	494e      	ldr	r1, [pc, #312]	; (2550 <m2m_wifi_connect_sc+0x244>)
    2418:	484e      	ldr	r0, [pc, #312]	; (2554 <m2m_wifi_connect_sc+0x248>)
    241a:	4b4f      	ldr	r3, [pc, #316]	; (2558 <m2m_wifi_connect_sc+0x24c>)
    241c:	4798      	blx	r3
    241e:	4854      	ldr	r0, [pc, #336]	; (2570 <m2m_wifi_connect_sc+0x264>)
    2420:	4b4f      	ldr	r3, [pc, #316]	; (2560 <m2m_wifi_connect_sc+0x254>)
    2422:	4798      	blx	r3
    2424:	200d      	movs	r0, #13
    2426:	4b4f      	ldr	r3, [pc, #316]	; (2564 <m2m_wifi_connect_sc+0x258>)
    2428:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    242a:	200c      	movs	r0, #12
    242c:	4240      	negs	r0, r0
					goto ERR1;
    242e:	e7bc      	b.n	23aa <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    2430:	228c      	movs	r2, #140	; 0x8c
    2432:	0092      	lsls	r2, r2, #2
    2434:	4946      	ldr	r1, [pc, #280]	; (2550 <m2m_wifi_connect_sc+0x244>)
    2436:	4847      	ldr	r0, [pc, #284]	; (2554 <m2m_wifi_connect_sc+0x248>)
    2438:	4b47      	ldr	r3, [pc, #284]	; (2558 <m2m_wifi_connect_sc+0x24c>)
    243a:	4798      	blx	r3
    243c:	484d      	ldr	r0, [pc, #308]	; (2574 <m2m_wifi_connect_sc+0x268>)
    243e:	4b48      	ldr	r3, [pc, #288]	; (2560 <m2m_wifi_connect_sc+0x254>)
    2440:	4798      	blx	r3
    2442:	200d      	movs	r0, #13
    2444:	4b47      	ldr	r3, [pc, #284]	; (2564 <m2m_wifi_connect_sc+0x258>)
    2446:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2448:	200c      	movs	r0, #12
    244a:	4240      	negs	r0, r0
		goto ERR1;
    244c:	e7ad      	b.n	23aa <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    244e:	4a4a      	ldr	r2, [pc, #296]	; (2578 <m2m_wifi_connect_sc+0x26c>)
    2450:	493f      	ldr	r1, [pc, #252]	; (2550 <m2m_wifi_connect_sc+0x244>)
    2452:	4840      	ldr	r0, [pc, #256]	; (2554 <m2m_wifi_connect_sc+0x248>)
    2454:	4b40      	ldr	r3, [pc, #256]	; (2558 <m2m_wifi_connect_sc+0x24c>)
    2456:	4798      	blx	r3
    2458:	4848      	ldr	r0, [pc, #288]	; (257c <m2m_wifi_connect_sc+0x270>)
    245a:	4b41      	ldr	r3, [pc, #260]	; (2560 <m2m_wifi_connect_sc+0x254>)
    245c:	4798      	blx	r3
    245e:	200d      	movs	r0, #13
    2460:	4b40      	ldr	r3, [pc, #256]	; (2564 <m2m_wifi_connect_sc+0x258>)
    2462:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2464:	200c      	movs	r0, #12
    2466:	4240      	negs	r0, r0
			goto ERR1;
    2468:	e79f      	b.n	23aa <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    246a:	783b      	ldrb	r3, [r7, #0]
    246c:	3b01      	subs	r3, #1
    246e:	b2db      	uxtb	r3, r3
    2470:	aa07      	add	r2, sp, #28
    2472:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    2474:	2b03      	cmp	r3, #3
    2476:	d817      	bhi.n	24a8 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    2478:	787a      	ldrb	r2, [r7, #1]
    247a:	1e51      	subs	r1, r2, #1
    247c:	ab07      	add	r3, sp, #28
    247e:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    2480:	2310      	movs	r3, #16
    2482:	0011      	movs	r1, r2
    2484:	4399      	bics	r1, r3
    2486:	290b      	cmp	r1, #11
    2488:	d01e      	beq.n	24c8 <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    248a:	4a3d      	ldr	r2, [pc, #244]	; (2580 <m2m_wifi_connect_sc+0x274>)
    248c:	4930      	ldr	r1, [pc, #192]	; (2550 <m2m_wifi_connect_sc+0x244>)
    248e:	4831      	ldr	r0, [pc, #196]	; (2554 <m2m_wifi_connect_sc+0x248>)
    2490:	4c31      	ldr	r4, [pc, #196]	; (2558 <m2m_wifi_connect_sc+0x24c>)
    2492:	47a0      	blx	r4
    2494:	ab07      	add	r3, sp, #28
    2496:	7859      	ldrb	r1, [r3, #1]
    2498:	483a      	ldr	r0, [pc, #232]	; (2584 <m2m_wifi_connect_sc+0x278>)
    249a:	47a0      	blx	r4
    249c:	200d      	movs	r0, #13
    249e:	4b31      	ldr	r3, [pc, #196]	; (2564 <m2m_wifi_connect_sc+0x258>)
    24a0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    24a2:	200c      	movs	r0, #12
    24a4:	4240      	negs	r0, r0
			goto ERR1;
    24a6:	e780      	b.n	23aa <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    24a8:	2294      	movs	r2, #148	; 0x94
    24aa:	0092      	lsls	r2, r2, #2
    24ac:	4928      	ldr	r1, [pc, #160]	; (2550 <m2m_wifi_connect_sc+0x244>)
    24ae:	4829      	ldr	r0, [pc, #164]	; (2554 <m2m_wifi_connect_sc+0x248>)
    24b0:	4c29      	ldr	r4, [pc, #164]	; (2558 <m2m_wifi_connect_sc+0x24c>)
    24b2:	47a0      	blx	r4
    24b4:	ab07      	add	r3, sp, #28
    24b6:	7819      	ldrb	r1, [r3, #0]
    24b8:	4833      	ldr	r0, [pc, #204]	; (2588 <m2m_wifi_connect_sc+0x27c>)
    24ba:	47a0      	blx	r4
    24bc:	200d      	movs	r0, #13
    24be:	4b29      	ldr	r3, [pc, #164]	; (2564 <m2m_wifi_connect_sc+0x258>)
    24c0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    24c2:	200c      	movs	r0, #12
    24c4:	4240      	negs	r0, r0
			goto ERR1;
    24c6:	e770      	b.n	23aa <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    24c8:	1cb9      	adds	r1, r7, #2
    24ca:	2016      	movs	r0, #22
    24cc:	ab02      	add	r3, sp, #8
    24ce:	469c      	mov	ip, r3
    24d0:	4460      	add	r0, ip
    24d2:	4b1c      	ldr	r3, [pc, #112]	; (2544 <m2m_wifi_connect_sc+0x238>)
    24d4:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    24d6:	787b      	ldrb	r3, [r7, #1]
    24d8:	aa07      	add	r2, sp, #28
    24da:	4694      	mov	ip, r2
    24dc:	4463      	add	r3, ip
    24de:	2200      	movs	r2, #0
    24e0:	709a      	strb	r2, [r3, #2]
    24e2:	e758      	b.n	2396 <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    24e4:	0038      	movs	r0, r7
    24e6:	4b20      	ldr	r3, [pc, #128]	; (2568 <m2m_wifi_connect_sc+0x25c>)
    24e8:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    24ea:	1e43      	subs	r3, r0, #1
    24ec:	b29b      	uxth	r3, r3
    24ee:	2b3f      	cmp	r3, #63	; 0x3f
    24f0:	d805      	bhi.n	24fe <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    24f2:	1c42      	adds	r2, r0, #1
    24f4:	0039      	movs	r1, r7
    24f6:	a807      	add	r0, sp, #28
    24f8:	4b12      	ldr	r3, [pc, #72]	; (2544 <m2m_wifi_connect_sc+0x238>)
    24fa:	4798      	blx	r3
    24fc:	e74b      	b.n	2396 <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    24fe:	4a23      	ldr	r2, [pc, #140]	; (258c <m2m_wifi_connect_sc+0x280>)
    2500:	4913      	ldr	r1, [pc, #76]	; (2550 <m2m_wifi_connect_sc+0x244>)
    2502:	4814      	ldr	r0, [pc, #80]	; (2554 <m2m_wifi_connect_sc+0x248>)
    2504:	4b14      	ldr	r3, [pc, #80]	; (2558 <m2m_wifi_connect_sc+0x24c>)
    2506:	4798      	blx	r3
    2508:	4821      	ldr	r0, [pc, #132]	; (2590 <m2m_wifi_connect_sc+0x284>)
    250a:	4b15      	ldr	r3, [pc, #84]	; (2560 <m2m_wifi_connect_sc+0x254>)
    250c:	4798      	blx	r3
    250e:	200d      	movs	r0, #13
    2510:	4b14      	ldr	r3, [pc, #80]	; (2564 <m2m_wifi_connect_sc+0x258>)
    2512:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2514:	200c      	movs	r0, #12
    2516:	4240      	negs	r0, r0
			goto ERR1;
    2518:	e747      	b.n	23aa <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    251a:	223e      	movs	r2, #62	; 0x3e
    251c:	0039      	movs	r1, r7
    251e:	a807      	add	r0, sp, #28
    2520:	4b08      	ldr	r3, [pc, #32]	; (2544 <m2m_wifi_connect_sc+0x238>)
    2522:	4798      	blx	r3
    2524:	e737      	b.n	2396 <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    2526:	4a1b      	ldr	r2, [pc, #108]	; (2594 <m2m_wifi_connect_sc+0x288>)
    2528:	4909      	ldr	r1, [pc, #36]	; (2550 <m2m_wifi_connect_sc+0x244>)
    252a:	480a      	ldr	r0, [pc, #40]	; (2554 <m2m_wifi_connect_sc+0x248>)
    252c:	4b0a      	ldr	r3, [pc, #40]	; (2558 <m2m_wifi_connect_sc+0x24c>)
    252e:	4798      	blx	r3
    2530:	4819      	ldr	r0, [pc, #100]	; (2598 <m2m_wifi_connect_sc+0x28c>)
    2532:	4b0b      	ldr	r3, [pc, #44]	; (2560 <m2m_wifi_connect_sc+0x254>)
    2534:	4798      	blx	r3
    2536:	200d      	movs	r0, #13
    2538:	4b0a      	ldr	r3, [pc, #40]	; (2564 <m2m_wifi_connect_sc+0x258>)
    253a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    253c:	200c      	movs	r0, #12
    253e:	4240      	negs	r0, r0
		goto ERR1;
    2540:	e733      	b.n	23aa <m2m_wifi_connect_sc+0x9e>
    2542:	46c0      	nop			; (mov r8, r8)
    2544:	0000163d 	.word	0x0000163d
    2548:	00001765 	.word	0x00001765
    254c:	0000021a 	.word	0x0000021a
    2550:	0000d8d4 	.word	0x0000d8d4
    2554:	0000d550 	.word	0x0000d550
    2558:	0000be51 	.word	0x0000be51
    255c:	0000d91c 	.word	0x0000d91c
    2560:	0000bf6d 	.word	0x0000bf6d
    2564:	0000be85 	.word	0x0000be85
    2568:	00001661 	.word	0x00001661
    256c:	00000226 	.word	0x00000226
    2570:	0000d930 	.word	0x0000d930
    2574:	0000d93c 	.word	0x0000d93c
    2578:	00000239 	.word	0x00000239
    257c:	0000d950 	.word	0x0000d950
    2580:	00000257 	.word	0x00000257
    2584:	0000d978 	.word	0x0000d978
    2588:	0000d95c 	.word	0x0000d95c
    258c:	00000266 	.word	0x00000266
    2590:	0000d994 	.word	0x0000d994
    2594:	00000276 	.word	0x00000276
    2598:	0000d9b0 	.word	0x0000d9b0

0000259c <m2m_wifi_connect>:
{
    259c:	b530      	push	{r4, r5, lr}
    259e:	b083      	sub	sp, #12
    25a0:	ac06      	add	r4, sp, #24
    25a2:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    25a4:	2500      	movs	r5, #0
    25a6:	9501      	str	r5, [sp, #4]
    25a8:	9400      	str	r4, [sp, #0]
    25aa:	4c02      	ldr	r4, [pc, #8]	; (25b4 <m2m_wifi_connect+0x18>)
    25ac:	47a0      	blx	r4
}
    25ae:	b003      	add	sp, #12
    25b0:	bd30      	pop	{r4, r5, pc}
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	0000230d 	.word	0x0000230d

000025b8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    25b8:	2000      	movs	r0, #0
    25ba:	4770      	bx	lr

000025bc <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    25bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25be:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    25c0:	2580      	movs	r5, #128	; 0x80
    25c2:	006d      	lsls	r5, r5, #1
    25c4:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    25c6:	24a5      	movs	r4, #165	; 0xa5
    25c8:	0164      	lsls	r4, r4, #5
    25ca:	4f08      	ldr	r7, [pc, #32]	; (25ec <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    25cc:	4e08      	ldr	r6, [pc, #32]	; (25f0 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    25ce:	0029      	movs	r1, r5
    25d0:	0020      	movs	r0, r4
    25d2:	47b8      	blx	r7
			uint32 reg = 0;
    25d4:	2300      	movs	r3, #0
    25d6:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    25d8:	a901      	add	r1, sp, #4
    25da:	0020      	movs	r0, r4
    25dc:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    25de:	2800      	cmp	r0, #0
    25e0:	d1f5      	bne.n	25ce <chip_apply_conf+0x12>
				if(reg == val32)
    25e2:	9b01      	ldr	r3, [sp, #4]
    25e4:	429d      	cmp	r5, r3
    25e6:	d1f2      	bne.n	25ce <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    25e8:	b003      	add	sp, #12
    25ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ec:	00002aad 	.word	0x00002aad
    25f0:	00002aa1 	.word	0x00002aa1

000025f4 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    25f4:	b500      	push	{lr}
    25f6:	b083      	sub	sp, #12
	uint32 reg = 0;
    25f8:	2300      	movs	r3, #0
    25fa:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    25fc:	a901      	add	r1, sp, #4
    25fe:	4811      	ldr	r0, [pc, #68]	; (2644 <enable_interrupts+0x50>)
    2600:	4b11      	ldr	r3, [pc, #68]	; (2648 <enable_interrupts+0x54>)
    2602:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2604:	2800      	cmp	r0, #0
    2606:	d001      	beq.n	260c <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    2608:	b003      	add	sp, #12
    260a:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    260c:	2180      	movs	r1, #128	; 0x80
    260e:	0049      	lsls	r1, r1, #1
    2610:	9b01      	ldr	r3, [sp, #4]
    2612:	4319      	orrs	r1, r3
    2614:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    2616:	480b      	ldr	r0, [pc, #44]	; (2644 <enable_interrupts+0x50>)
    2618:	4b0c      	ldr	r3, [pc, #48]	; (264c <enable_interrupts+0x58>)
    261a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    261c:	2800      	cmp	r0, #0
    261e:	d1f3      	bne.n	2608 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2620:	a901      	add	r1, sp, #4
    2622:	20d0      	movs	r0, #208	; 0xd0
    2624:	0140      	lsls	r0, r0, #5
    2626:	4b08      	ldr	r3, [pc, #32]	; (2648 <enable_interrupts+0x54>)
    2628:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    262a:	2800      	cmp	r0, #0
    262c:	d1ec      	bne.n	2608 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    262e:	2180      	movs	r1, #128	; 0x80
    2630:	0249      	lsls	r1, r1, #9
    2632:	9b01      	ldr	r3, [sp, #4]
    2634:	4319      	orrs	r1, r3
    2636:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    2638:	20d0      	movs	r0, #208	; 0xd0
    263a:	0140      	lsls	r0, r0, #5
    263c:	4b03      	ldr	r3, [pc, #12]	; (264c <enable_interrupts+0x58>)
    263e:	4798      	blx	r3
    2640:	e7e2      	b.n	2608 <enable_interrupts+0x14>
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	00001408 	.word	0x00001408
    2648:	00002aa1 	.word	0x00002aa1
    264c:	00002aad 	.word	0x00002aad

00002650 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2650:	b510      	push	{r4, lr}
    2652:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    2654:	4b28      	ldr	r3, [pc, #160]	; (26f8 <nmi_get_chipid+0xa8>)
    2656:	681c      	ldr	r4, [r3, #0]
    2658:	2c00      	cmp	r4, #0
    265a:	d004      	beq.n	2666 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    265c:	4b26      	ldr	r3, [pc, #152]	; (26f8 <nmi_get_chipid+0xa8>)
    265e:	681c      	ldr	r4, [r3, #0]
}
    2660:	0020      	movs	r0, r4
    2662:	b002      	add	sp, #8
    2664:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    2666:	0019      	movs	r1, r3
    2668:	2080      	movs	r0, #128	; 0x80
    266a:	0140      	lsls	r0, r0, #5
    266c:	4b23      	ldr	r3, [pc, #140]	; (26fc <nmi_get_chipid+0xac>)
    266e:	4798      	blx	r3
    2670:	2800      	cmp	r0, #0
    2672:	d003      	beq.n	267c <nmi_get_chipid+0x2c>
			chipid = 0;
    2674:	2200      	movs	r2, #0
    2676:	4b20      	ldr	r3, [pc, #128]	; (26f8 <nmi_get_chipid+0xa8>)
    2678:	601a      	str	r2, [r3, #0]
			return 0;
    267a:	e7f1      	b.n	2660 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    267c:	a901      	add	r1, sp, #4
    267e:	4820      	ldr	r0, [pc, #128]	; (2700 <nmi_get_chipid+0xb0>)
    2680:	4b1e      	ldr	r3, [pc, #120]	; (26fc <nmi_get_chipid+0xac>)
    2682:	4798      	blx	r3
    2684:	2800      	cmp	r0, #0
    2686:	d003      	beq.n	2690 <nmi_get_chipid+0x40>
			chipid = 0;
    2688:	2200      	movs	r2, #0
    268a:	4b1b      	ldr	r3, [pc, #108]	; (26f8 <nmi_get_chipid+0xa8>)
    268c:	601a      	str	r2, [r3, #0]
			return 0;
    268e:	e7e7      	b.n	2660 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    2690:	4b19      	ldr	r3, [pc, #100]	; (26f8 <nmi_get_chipid+0xa8>)
    2692:	681b      	ldr	r3, [r3, #0]
    2694:	4a1b      	ldr	r2, [pc, #108]	; (2704 <nmi_get_chipid+0xb4>)
    2696:	4293      	cmp	r3, r2
    2698:	d00e      	beq.n	26b8 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    269a:	4a1b      	ldr	r2, [pc, #108]	; (2708 <nmi_get_chipid+0xb8>)
    269c:	4293      	cmp	r3, r2
    269e:	d012      	beq.n	26c6 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    26a0:	4a1a      	ldr	r2, [pc, #104]	; (270c <nmi_get_chipid+0xbc>)
    26a2:	4293      	cmp	r3, r2
    26a4:	d01c      	beq.n	26e0 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    26a6:	4914      	ldr	r1, [pc, #80]	; (26f8 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    26a8:	4a19      	ldr	r2, [pc, #100]	; (2710 <nmi_get_chipid+0xc0>)
    26aa:	680b      	ldr	r3, [r1, #0]
    26ac:	401a      	ands	r2, r3
		chipid |= 0x050000;
    26ae:	23a0      	movs	r3, #160	; 0xa0
    26b0:	02db      	lsls	r3, r3, #11
    26b2:	4313      	orrs	r3, r2
    26b4:	600b      	str	r3, [r1, #0]
    26b6:	e7d1      	b.n	265c <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    26b8:	9b01      	ldr	r3, [sp, #4]
    26ba:	2b01      	cmp	r3, #1
    26bc:	d0f3      	beq.n	26a6 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    26be:	4a15      	ldr	r2, [pc, #84]	; (2714 <nmi_get_chipid+0xc4>)
    26c0:	4b0d      	ldr	r3, [pc, #52]	; (26f8 <nmi_get_chipid+0xa8>)
    26c2:	601a      	str	r2, [r3, #0]
    26c4:	e7ef      	b.n	26a6 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    26c6:	9b01      	ldr	r3, [sp, #4]
    26c8:	2b03      	cmp	r3, #3
    26ca:	d0ec      	beq.n	26a6 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    26cc:	2b04      	cmp	r3, #4
    26ce:	d003      	beq.n	26d8 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    26d0:	4a11      	ldr	r2, [pc, #68]	; (2718 <nmi_get_chipid+0xc8>)
    26d2:	4b09      	ldr	r3, [pc, #36]	; (26f8 <nmi_get_chipid+0xa8>)
    26d4:	601a      	str	r2, [r3, #0]
    26d6:	e7e6      	b.n	26a6 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    26d8:	4a10      	ldr	r2, [pc, #64]	; (271c <nmi_get_chipid+0xcc>)
    26da:	4b07      	ldr	r3, [pc, #28]	; (26f8 <nmi_get_chipid+0xa8>)
    26dc:	601a      	str	r2, [r3, #0]
    26de:	e7e2      	b.n	26a6 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    26e0:	4905      	ldr	r1, [pc, #20]	; (26f8 <nmi_get_chipid+0xa8>)
    26e2:	20ec      	movs	r0, #236	; 0xec
    26e4:	0380      	lsls	r0, r0, #14
    26e6:	4b05      	ldr	r3, [pc, #20]	; (26fc <nmi_get_chipid+0xac>)
    26e8:	4798      	blx	r3
    26ea:	2800      	cmp	r0, #0
    26ec:	d0db      	beq.n	26a6 <nmi_get_chipid+0x56>
			chipid = 0;
    26ee:	2200      	movs	r2, #0
    26f0:	4b01      	ldr	r3, [pc, #4]	; (26f8 <nmi_get_chipid+0xa8>)
    26f2:	601a      	str	r2, [r3, #0]
			return 0;
    26f4:	e7b4      	b.n	2660 <nmi_get_chipid+0x10>
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	200003cc 	.word	0x200003cc
    26fc:	00002aa1 	.word	0x00002aa1
    2700:	000013f4 	.word	0x000013f4
    2704:	001002a0 	.word	0x001002a0
    2708:	001002b0 	.word	0x001002b0
    270c:	001000f0 	.word	0x001000f0
    2710:	fff0ffff 	.word	0xfff0ffff
    2714:	001002a1 	.word	0x001002a1
    2718:	001002b2 	.word	0x001002b2
    271c:	001002b1 	.word	0x001002b1

00002720 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2720:	b530      	push	{r4, r5, lr}
    2722:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2724:	4c16      	ldr	r4, [pc, #88]	; (2780 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    2726:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2728:	a901      	add	r1, sp, #4
    272a:	2010      	movs	r0, #16
    272c:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    272e:	2800      	cmp	r0, #0
    2730:	d11c      	bne.n	276c <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    2732:	9b01      	ldr	r3, [sp, #4]
    2734:	422b      	tst	r3, r5
    2736:	d1f7      	bne.n	2728 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    2738:	a901      	add	r1, sp, #4
    273a:	3001      	adds	r0, #1
    273c:	4b10      	ldr	r3, [pc, #64]	; (2780 <chip_sleep+0x60>)
    273e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2740:	2800      	cmp	r0, #0
    2742:	d113      	bne.n	276c <chip_sleep+0x4c>
	if(reg & NBIT1)
    2744:	9901      	ldr	r1, [sp, #4]
    2746:	078b      	lsls	r3, r1, #30
    2748:	d507      	bpl.n	275a <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    274a:	2302      	movs	r3, #2
    274c:	4399      	bics	r1, r3
    274e:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2750:	3001      	adds	r0, #1
    2752:	4b0c      	ldr	r3, [pc, #48]	; (2784 <chip_sleep+0x64>)
    2754:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    2756:	2800      	cmp	r0, #0
    2758:	d108      	bne.n	276c <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    275a:	a901      	add	r1, sp, #4
    275c:	200b      	movs	r0, #11
    275e:	4b08      	ldr	r3, [pc, #32]	; (2780 <chip_sleep+0x60>)
    2760:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2762:	2800      	cmp	r0, #0
    2764:	d102      	bne.n	276c <chip_sleep+0x4c>
	if(reg & NBIT0)
    2766:	9901      	ldr	r1, [sp, #4]
    2768:	07cb      	lsls	r3, r1, #31
    276a:	d401      	bmi.n	2770 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    276c:	b003      	add	sp, #12
    276e:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    2770:	2301      	movs	r3, #1
    2772:	4399      	bics	r1, r3
    2774:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    2776:	300b      	adds	r0, #11
    2778:	4b02      	ldr	r3, [pc, #8]	; (2784 <chip_sleep+0x64>)
    277a:	4798      	blx	r3
    277c:	e7f6      	b.n	276c <chip_sleep+0x4c>
    277e:	46c0      	nop			; (mov r8, r8)
    2780:	00002aa1 	.word	0x00002aa1
    2784:	00002aad 	.word	0x00002aad

00002788 <chip_wake>:
sint8 chip_wake(void)
{
    2788:	b5f0      	push	{r4, r5, r6, r7, lr}
    278a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    278c:	2300      	movs	r3, #0
    278e:	9301      	str	r3, [sp, #4]
    2790:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    2792:	a901      	add	r1, sp, #4
    2794:	200b      	movs	r0, #11
    2796:	4b28      	ldr	r3, [pc, #160]	; (2838 <chip_wake+0xb0>)
    2798:	4798      	blx	r3
    279a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    279c:	d130      	bne.n	2800 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    279e:	9901      	ldr	r1, [sp, #4]
    27a0:	07cb      	lsls	r3, r1, #31
    27a2:	d406      	bmi.n	27b2 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    27a4:	2301      	movs	r3, #1
    27a6:	4319      	orrs	r1, r3
    27a8:	200b      	movs	r0, #11
    27aa:	4b24      	ldr	r3, [pc, #144]	; (283c <chip_wake+0xb4>)
    27ac:	4798      	blx	r3
    27ae:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27b0:	d126      	bne.n	2800 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    27b2:	a901      	add	r1, sp, #4
    27b4:	2001      	movs	r0, #1
    27b6:	4b20      	ldr	r3, [pc, #128]	; (2838 <chip_wake+0xb0>)
    27b8:	4798      	blx	r3
    27ba:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27bc:	d120      	bne.n	2800 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    27be:	9901      	ldr	r1, [sp, #4]
    27c0:	078b      	lsls	r3, r1, #30
    27c2:	d520      	bpl.n	2806 <chip_wake+0x7e>
{
    27c4:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    27c6:	4f1c      	ldr	r7, [pc, #112]	; (2838 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    27c8:	4e1d      	ldr	r6, [pc, #116]	; (2840 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    27ca:	4669      	mov	r1, sp
    27cc:	200f      	movs	r0, #15
    27ce:	47b8      	blx	r7
    27d0:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    27d2:	d120      	bne.n	2816 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    27d4:	9b00      	ldr	r3, [sp, #0]
    27d6:	075b      	lsls	r3, r3, #29
    27d8:	d42b      	bmi.n	2832 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    27da:	2002      	movs	r0, #2
    27dc:	47b0      	blx	r6
    27de:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    27e0:	2d00      	cmp	r5, #0
    27e2:	d1f2      	bne.n	27ca <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    27e4:	22ad      	movs	r2, #173	; 0xad
    27e6:	0052      	lsls	r2, r2, #1
    27e8:	4916      	ldr	r1, [pc, #88]	; (2844 <chip_wake+0xbc>)
    27ea:	4817      	ldr	r0, [pc, #92]	; (2848 <chip_wake+0xc0>)
    27ec:	4b17      	ldr	r3, [pc, #92]	; (284c <chip_wake+0xc4>)
    27ee:	4798      	blx	r3
    27f0:	4817      	ldr	r0, [pc, #92]	; (2850 <chip_wake+0xc8>)
    27f2:	4b18      	ldr	r3, [pc, #96]	; (2854 <chip_wake+0xcc>)
    27f4:	4798      	blx	r3
    27f6:	200d      	movs	r0, #13
    27f8:	4b17      	ldr	r3, [pc, #92]	; (2858 <chip_wake+0xd0>)
    27fa:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    27fc:	2404      	movs	r4, #4
    27fe:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    2800:	0020      	movs	r0, r4
    2802:	b003      	add	sp, #12
    2804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    2806:	2302      	movs	r3, #2
    2808:	4319      	orrs	r1, r3
    280a:	2001      	movs	r0, #1
    280c:	4b0b      	ldr	r3, [pc, #44]	; (283c <chip_wake+0xb4>)
    280e:	4798      	blx	r3
    2810:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2812:	d0d7      	beq.n	27c4 <chip_wake+0x3c>
    2814:	e7f4      	b.n	2800 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    2816:	22a8      	movs	r2, #168	; 0xa8
    2818:	0052      	lsls	r2, r2, #1
    281a:	490a      	ldr	r1, [pc, #40]	; (2844 <chip_wake+0xbc>)
    281c:	480a      	ldr	r0, [pc, #40]	; (2848 <chip_wake+0xc0>)
    281e:	4d0b      	ldr	r5, [pc, #44]	; (284c <chip_wake+0xc4>)
    2820:	47a8      	blx	r5
    2822:	9a00      	ldr	r2, [sp, #0]
    2824:	0021      	movs	r1, r4
    2826:	480d      	ldr	r0, [pc, #52]	; (285c <chip_wake+0xd4>)
    2828:	47a8      	blx	r5
    282a:	200d      	movs	r0, #13
    282c:	4b0a      	ldr	r3, [pc, #40]	; (2858 <chip_wake+0xd0>)
    282e:	4798      	blx	r3
			goto _WAKE_EXIT;
    2830:	e7e6      	b.n	2800 <chip_wake+0x78>
	nm_bus_reset();
    2832:	4b0b      	ldr	r3, [pc, #44]	; (2860 <chip_wake+0xd8>)
    2834:	4798      	blx	r3
    2836:	e7e3      	b.n	2800 <chip_wake+0x78>
    2838:	00002aa1 	.word	0x00002aa1
    283c:	00002aad 	.word	0x00002aad
    2840:	000012c5 	.word	0x000012c5
    2844:	0000da90 	.word	0x0000da90
    2848:	0000d550 	.word	0x0000d550
    284c:	0000be51 	.word	0x0000be51
    2850:	0000dad8 	.word	0x0000dad8
    2854:	0000bf6d 	.word	0x0000bf6d
    2858:	0000be85 	.word	0x0000be85
    285c:	0000dac0 	.word	0x0000dac0
    2860:	00002a89 	.word	0x00002a89

00002864 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    2864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2866:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    2868:	4d2d      	ldr	r5, [pc, #180]	; (2920 <wait_for_bootrom+0xbc>)
    286a:	4c2e      	ldr	r4, [pc, #184]	; (2924 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    286c:	4e2e      	ldr	r6, [pc, #184]	; (2928 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    286e:	0028      	movs	r0, r5
    2870:	47a0      	blx	r4
		if (reg & 0x80000000) {
    2872:	2800      	cmp	r0, #0
    2874:	db02      	blt.n	287c <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    2876:	2001      	movs	r0, #1
    2878:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    287a:	e7f8      	b.n	286e <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    287c:	482b      	ldr	r0, [pc, #172]	; (292c <wait_for_bootrom+0xc8>)
    287e:	4b29      	ldr	r3, [pc, #164]	; (2924 <wait_for_bootrom+0xc0>)
    2880:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    2882:	07c3      	lsls	r3, r0, #31
    2884:	d409      	bmi.n	289a <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    2886:	4e28      	ldr	r6, [pc, #160]	; (2928 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    2888:	4c29      	ldr	r4, [pc, #164]	; (2930 <wait_for_bootrom+0xcc>)
    288a:	4d26      	ldr	r5, [pc, #152]	; (2924 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    288c:	2001      	movs	r0, #1
    288e:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    2890:	0020      	movs	r0, r4
    2892:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    2894:	4b27      	ldr	r3, [pc, #156]	; (2934 <wait_for_bootrom+0xd0>)
    2896:	4298      	cmp	r0, r3
    2898:	d1f8      	bne.n	288c <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    289a:	2f02      	cmp	r7, #2
    289c:	d021      	beq.n	28e2 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    289e:	2f03      	cmp	r7, #3
    28a0:	d029      	beq.n	28f6 <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    28a2:	2f04      	cmp	r7, #4
    28a4:	d030      	beq.n	2908 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    28a6:	4924      	ldr	r1, [pc, #144]	; (2938 <wait_for_bootrom+0xd4>)
    28a8:	4824      	ldr	r0, [pc, #144]	; (293c <wait_for_bootrom+0xd8>)
    28aa:	4b25      	ldr	r3, [pc, #148]	; (2940 <wait_for_bootrom+0xdc>)
    28ac:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    28ae:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    28b0:	4b24      	ldr	r3, [pc, #144]	; (2944 <wait_for_bootrom+0xe0>)
    28b2:	4798      	blx	r3
    28b4:	0500      	lsls	r0, r0, #20
    28b6:	0d00      	lsrs	r0, r0, #20
    28b8:	4b23      	ldr	r3, [pc, #140]	; (2948 <wait_for_bootrom+0xe4>)
    28ba:	4298      	cmp	r0, r3
    28bc:	d82a      	bhi.n	2914 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    28be:	0020      	movs	r0, r4
    28c0:	4b22      	ldr	r3, [pc, #136]	; (294c <wait_for_bootrom+0xe8>)
    28c2:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    28c4:	4822      	ldr	r0, [pc, #136]	; (2950 <wait_for_bootrom+0xec>)
    28c6:	4c23      	ldr	r4, [pc, #140]	; (2954 <wait_for_bootrom+0xf0>)
    28c8:	47a0      	blx	r4
    28ca:	491b      	ldr	r1, [pc, #108]	; (2938 <wait_for_bootrom+0xd4>)
    28cc:	4822      	ldr	r0, [pc, #136]	; (2958 <wait_for_bootrom+0xf4>)
    28ce:	47a0      	blx	r4
    28d0:	200d      	movs	r0, #13
    28d2:	4b22      	ldr	r3, [pc, #136]	; (295c <wait_for_bootrom+0xf8>)
    28d4:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    28d6:	4922      	ldr	r1, [pc, #136]	; (2960 <wait_for_bootrom+0xfc>)
    28d8:	4815      	ldr	r0, [pc, #84]	; (2930 <wait_for_bootrom+0xcc>)
    28da:	4b19      	ldr	r3, [pc, #100]	; (2940 <wait_for_bootrom+0xdc>)
    28dc:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    28de:	2000      	movs	r0, #0
    28e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    28e2:	4920      	ldr	r1, [pc, #128]	; (2964 <wait_for_bootrom+0x100>)
    28e4:	4820      	ldr	r0, [pc, #128]	; (2968 <wait_for_bootrom+0x104>)
    28e6:	4c16      	ldr	r4, [pc, #88]	; (2940 <wait_for_bootrom+0xdc>)
    28e8:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    28ea:	2180      	movs	r1, #128	; 0x80
    28ec:	0349      	lsls	r1, r1, #13
    28ee:	4813      	ldr	r0, [pc, #76]	; (293c <wait_for_bootrom+0xd8>)
    28f0:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    28f2:	2400      	movs	r4, #0
    28f4:	e7dc      	b.n	28b0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    28f6:	491b      	ldr	r1, [pc, #108]	; (2964 <wait_for_bootrom+0x100>)
    28f8:	481b      	ldr	r0, [pc, #108]	; (2968 <wait_for_bootrom+0x104>)
    28fa:	4c11      	ldr	r4, [pc, #68]	; (2940 <wait_for_bootrom+0xdc>)
    28fc:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    28fe:	2100      	movs	r1, #0
    2900:	480e      	ldr	r0, [pc, #56]	; (293c <wait_for_bootrom+0xd8>)
    2902:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2904:	2400      	movs	r4, #0
    2906:	e7d3      	b.n	28b0 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    2908:	490b      	ldr	r1, [pc, #44]	; (2938 <wait_for_bootrom+0xd4>)
    290a:	480c      	ldr	r0, [pc, #48]	; (293c <wait_for_bootrom+0xd8>)
    290c:	4b0c      	ldr	r3, [pc, #48]	; (2940 <wait_for_bootrom+0xdc>)
    290e:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2910:	2480      	movs	r4, #128	; 0x80
    2912:	e7cd      	b.n	28b0 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2914:	2002      	movs	r0, #2
    2916:	4320      	orrs	r0, r4
    2918:	4b0c      	ldr	r3, [pc, #48]	; (294c <wait_for_bootrom+0xe8>)
    291a:	4798      	blx	r3
    291c:	e7d2      	b.n	28c4 <wait_for_bootrom+0x60>
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	00001014 	.word	0x00001014
    2924:	00002a95 	.word	0x00002a95
    2928:	000012c5 	.word	0x000012c5
    292c:	000207bc 	.word	0x000207bc
    2930:	000c000c 	.word	0x000c000c
    2934:	10add09e 	.word	0x10add09e
    2938:	13301354 	.word	0x13301354
    293c:	0000108c 	.word	0x0000108c
    2940:	00002aad 	.word	0x00002aad
    2944:	00002651 	.word	0x00002651
    2948:	0000039f 	.word	0x0000039f
    294c:	000025bd 	.word	0x000025bd
    2950:	0000d880 	.word	0x0000d880
    2954:	0000be51 	.word	0x0000be51
    2958:	0000daf4 	.word	0x0000daf4
    295c:	0000be85 	.word	0x0000be85
    2960:	ef522f61 	.word	0xef522f61
    2964:	3c1cd57d 	.word	0x3c1cd57d
    2968:	000207ac 	.word	0x000207ac

0000296c <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    296c:	b570      	push	{r4, r5, r6, lr}
    296e:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    2970:	4b15      	ldr	r3, [pc, #84]	; (29c8 <wait_for_firmware_start+0x5c>)
    2972:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    2974:	4b15      	ldr	r3, [pc, #84]	; (29cc <wait_for_firmware_start+0x60>)
    2976:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    2978:	3802      	subs	r0, #2
    297a:	2801      	cmp	r0, #1
    297c:	d911      	bls.n	29a2 <wait_for_firmware_start+0x36>
{
    297e:	2401      	movs	r4, #1
    2980:	4264      	negs	r4, r4
    2982:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    2984:	4e12      	ldr	r6, [pc, #72]	; (29d0 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    2986:	4d13      	ldr	r5, [pc, #76]	; (29d4 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    2988:	9b00      	ldr	r3, [sp, #0]
    298a:	4298      	cmp	r0, r3
    298c:	d00e      	beq.n	29ac <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    298e:	2002      	movs	r0, #2
    2990:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    2992:	9801      	ldr	r0, [sp, #4]
    2994:	47a8      	blx	r5
    2996:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    2998:	2c00      	cmp	r4, #0
    299a:	d1f5      	bne.n	2988 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    299c:	2005      	movs	r0, #5
    299e:	4240      	negs	r0, r0
    29a0:	e009      	b.n	29b6 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    29a2:	4b0d      	ldr	r3, [pc, #52]	; (29d8 <wait_for_firmware_start+0x6c>)
    29a4:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    29a6:	4b0d      	ldr	r3, [pc, #52]	; (29dc <wait_for_firmware_start+0x70>)
    29a8:	9300      	str	r3, [sp, #0]
    29aa:	e7e8      	b.n	297e <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    29ac:	9a00      	ldr	r2, [sp, #0]
    29ae:	4b07      	ldr	r3, [pc, #28]	; (29cc <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    29b0:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    29b2:	429a      	cmp	r2, r3
    29b4:	d001      	beq.n	29ba <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    29b6:	b002      	add	sp, #8
    29b8:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    29ba:	2100      	movs	r1, #0
    29bc:	4802      	ldr	r0, [pc, #8]	; (29c8 <wait_for_firmware_start+0x5c>)
    29be:	4b08      	ldr	r3, [pc, #32]	; (29e0 <wait_for_firmware_start+0x74>)
    29c0:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    29c2:	2000      	movs	r0, #0
    29c4:	e7f7      	b.n	29b6 <wait_for_firmware_start+0x4a>
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	0000108c 	.word	0x0000108c
    29cc:	02532636 	.word	0x02532636
    29d0:	000012c5 	.word	0x000012c5
    29d4:	00002a95 	.word	0x00002a95
    29d8:	000207ac 	.word	0x000207ac
    29dc:	d75dc1c3 	.word	0xd75dc1c3
    29e0:	00002aad 	.word	0x00002aad

000029e4 <chip_deinit>:

sint8 chip_deinit(void)
{
    29e4:	b510      	push	{r4, lr}
    29e6:	b082      	sub	sp, #8
	uint32 reg = 0;
    29e8:	2300      	movs	r3, #0
    29ea:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    29ec:	a901      	add	r1, sp, #4
    29ee:	20a0      	movs	r0, #160	; 0xa0
    29f0:	0140      	lsls	r0, r0, #5
    29f2:	4b14      	ldr	r3, [pc, #80]	; (2a44 <chip_deinit+0x60>)
    29f4:	4798      	blx	r3
    29f6:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    29f8:	d115      	bne.n	2a26 <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    29fa:	4913      	ldr	r1, [pc, #76]	; (2a48 <chip_deinit+0x64>)
    29fc:	9b01      	ldr	r3, [sp, #4]
    29fe:	4019      	ands	r1, r3
    2a00:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2a02:	20a0      	movs	r0, #160	; 0xa0
    2a04:	0140      	lsls	r0, r0, #5
    2a06:	4b11      	ldr	r3, [pc, #68]	; (2a4c <chip_deinit+0x68>)
    2a08:	4798      	blx	r3
    2a0a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2a0c:	d016      	beq.n	2a3c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2a0e:	4a10      	ldr	r2, [pc, #64]	; (2a50 <chip_deinit+0x6c>)
    2a10:	4910      	ldr	r1, [pc, #64]	; (2a54 <chip_deinit+0x70>)
    2a12:	4811      	ldr	r0, [pc, #68]	; (2a58 <chip_deinit+0x74>)
    2a14:	4b11      	ldr	r3, [pc, #68]	; (2a5c <chip_deinit+0x78>)
    2a16:	4798      	blx	r3
    2a18:	4811      	ldr	r0, [pc, #68]	; (2a60 <chip_deinit+0x7c>)
    2a1a:	4b12      	ldr	r3, [pc, #72]	; (2a64 <chip_deinit+0x80>)
    2a1c:	4798      	blx	r3
    2a1e:	200d      	movs	r0, #13
    2a20:	4b11      	ldr	r3, [pc, #68]	; (2a68 <chip_deinit+0x84>)
    2a22:	4798      	blx	r3
		goto ERR1;
    2a24:	e00a      	b.n	2a3c <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2a26:	4a11      	ldr	r2, [pc, #68]	; (2a6c <chip_deinit+0x88>)
    2a28:	490a      	ldr	r1, [pc, #40]	; (2a54 <chip_deinit+0x70>)
    2a2a:	480b      	ldr	r0, [pc, #44]	; (2a58 <chip_deinit+0x74>)
    2a2c:	4b0b      	ldr	r3, [pc, #44]	; (2a5c <chip_deinit+0x78>)
    2a2e:	4798      	blx	r3
    2a30:	480b      	ldr	r0, [pc, #44]	; (2a60 <chip_deinit+0x7c>)
    2a32:	4b0c      	ldr	r3, [pc, #48]	; (2a64 <chip_deinit+0x80>)
    2a34:	4798      	blx	r3
    2a36:	200d      	movs	r0, #13
    2a38:	4b0b      	ldr	r3, [pc, #44]	; (2a68 <chip_deinit+0x84>)
    2a3a:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2a3c:	0020      	movs	r0, r4
    2a3e:	b002      	add	sp, #8
    2a40:	bd10      	pop	{r4, pc}
    2a42:	46c0      	nop			; (mov r8, r8)
    2a44:	00002aa1 	.word	0x00002aa1
    2a48:	fffffbff 	.word	0xfffffbff
    2a4c:	00002aad 	.word	0x00002aad
    2a50:	00000207 	.word	0x00000207
    2a54:	0000da9c 	.word	0x0000da9c
    2a58:	0000d550 	.word	0x0000d550
    2a5c:	0000be51 	.word	0x0000be51
    2a60:	0000daa8 	.word	0x0000daa8
    2a64:	0000bf6d 	.word	0x0000bf6d
    2a68:	0000be85 	.word	0x0000be85
    2a6c:	00000201 	.word	0x00000201

00002a70 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2a70:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2a72:	4b01      	ldr	r3, [pc, #4]	; (2a78 <nm_bus_iface_init+0x8>)
    2a74:	4798      	blx	r3
	return ret;
}
    2a76:	bd10      	pop	{r4, pc}
    2a78:	00001381 	.word	0x00001381

00002a7c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2a7c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2a7e:	4b01      	ldr	r3, [pc, #4]	; (2a84 <nm_bus_iface_deinit+0x8>)
    2a80:	4798      	blx	r3

	return ret;
}
    2a82:	bd10      	pop	{r4, pc}
    2a84:	000015d1 	.word	0x000015d1

00002a88 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2a88:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2a8a:	4b01      	ldr	r3, [pc, #4]	; (2a90 <nm_bus_reset+0x8>)
    2a8c:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2a8e:	bd10      	pop	{r4, pc}
    2a90:	00003431 	.word	0x00003431

00002a94 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2a94:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2a96:	4b01      	ldr	r3, [pc, #4]	; (2a9c <nm_read_reg+0x8>)
    2a98:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2a9a:	bd10      	pop	{r4, pc}
    2a9c:	00003469 	.word	0x00003469

00002aa0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2aa0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2aa2:	4b01      	ldr	r3, [pc, #4]	; (2aa8 <nm_read_reg_with_ret+0x8>)
    2aa4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2aa6:	bd10      	pop	{r4, pc}
    2aa8:	0000347d 	.word	0x0000347d

00002aac <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2aac:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2aae:	4b01      	ldr	r3, [pc, #4]	; (2ab4 <nm_write_reg+0x8>)
    2ab0:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2ab2:	bd10      	pop	{r4, pc}
    2ab4:	00003495 	.word	0x00003495

00002ab8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aba:	46d6      	mov	lr, sl
    2abc:	464f      	mov	r7, r9
    2abe:	4646      	mov	r6, r8
    2ac0:	b5c0      	push	{r6, r7, lr}
    2ac2:	b082      	sub	sp, #8
    2ac4:	4680      	mov	r8, r0
    2ac6:	4689      	mov	r9, r1
    2ac8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2aca:	4b13      	ldr	r3, [pc, #76]	; (2b18 <nm_read_block+0x60>)
    2acc:	881f      	ldrh	r7, [r3, #0]
    2ace:	3f08      	subs	r7, #8
    2ad0:	b2bb      	uxth	r3, r7
    2ad2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2ad4:	001e      	movs	r6, r3
    2ad6:	0004      	movs	r4, r0
    2ad8:	429a      	cmp	r2, r3
    2ada:	d91a      	bls.n	2b12 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2adc:	4b0f      	ldr	r3, [pc, #60]	; (2b1c <nm_read_block+0x64>)
    2ade:	469a      	mov	sl, r3
    2ae0:	1a37      	subs	r7, r6, r0
    2ae2:	4643      	mov	r3, r8
    2ae4:	1ae1      	subs	r1, r4, r3
    2ae6:	4449      	add	r1, r9
    2ae8:	9a01      	ldr	r2, [sp, #4]
    2aea:	0020      	movs	r0, r4
    2aec:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2aee:	2800      	cmp	r0, #0
    2af0:	d109      	bne.n	2b06 <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2af2:	1bad      	subs	r5, r5, r6
    2af4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2af6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2af8:	42b5      	cmp	r5, r6
    2afa:	d8f2      	bhi.n	2ae2 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2afc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2afe:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2b00:	0020      	movs	r0, r4
    2b02:	4b06      	ldr	r3, [pc, #24]	; (2b1c <nm_read_block+0x64>)
    2b04:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2b06:	b002      	add	sp, #8
    2b08:	bc1c      	pop	{r2, r3, r4}
    2b0a:	4690      	mov	r8, r2
    2b0c:	4699      	mov	r9, r3
    2b0e:	46a2      	mov	sl, r4
    2b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2b12:	2100      	movs	r1, #0
    2b14:	e7f2      	b.n	2afc <nm_read_block+0x44>
    2b16:	46c0      	nop			; (mov r8, r8)
    2b18:	2000000c 	.word	0x2000000c
    2b1c:	000035d5 	.word	0x000035d5

00002b20 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b22:	46d6      	mov	lr, sl
    2b24:	464f      	mov	r7, r9
    2b26:	4646      	mov	r6, r8
    2b28:	b5c0      	push	{r6, r7, lr}
    2b2a:	b082      	sub	sp, #8
    2b2c:	4680      	mov	r8, r0
    2b2e:	4689      	mov	r9, r1
    2b30:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2b32:	4b13      	ldr	r3, [pc, #76]	; (2b80 <nm_write_block+0x60>)
    2b34:	881f      	ldrh	r7, [r3, #0]
    2b36:	3f08      	subs	r7, #8
    2b38:	b2bb      	uxth	r3, r7
    2b3a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2b3c:	001e      	movs	r6, r3
    2b3e:	0004      	movs	r4, r0
    2b40:	429a      	cmp	r2, r3
    2b42:	d91a      	bls.n	2b7a <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b44:	4b0f      	ldr	r3, [pc, #60]	; (2b84 <nm_write_block+0x64>)
    2b46:	469a      	mov	sl, r3
    2b48:	1a37      	subs	r7, r6, r0
    2b4a:	4643      	mov	r3, r8
    2b4c:	1ae1      	subs	r1, r4, r3
    2b4e:	4449      	add	r1, r9
    2b50:	9a01      	ldr	r2, [sp, #4]
    2b52:	0020      	movs	r0, r4
    2b54:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2b56:	2800      	cmp	r0, #0
    2b58:	d109      	bne.n	2b6e <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2b5a:	1bad      	subs	r5, r5, r6
    2b5c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2b5e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2b60:	42b5      	cmp	r5, r6
    2b62:	d8f2      	bhi.n	2b4a <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b64:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2b66:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b68:	0020      	movs	r0, r4
    2b6a:	4b06      	ldr	r3, [pc, #24]	; (2b84 <nm_write_block+0x64>)
    2b6c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2b6e:	b002      	add	sp, #8
    2b70:	bc1c      	pop	{r2, r3, r4}
    2b72:	4690      	mov	r8, r2
    2b74:	4699      	mov	r9, r3
    2b76:	46a2      	mov	sl, r4
    2b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2b7a:	2100      	movs	r1, #0
    2b7c:	e7f2      	b.n	2b64 <nm_write_block+0x44>
    2b7e:	46c0      	nop			; (mov r8, r8)
    2b80:	2000000c 	.word	0x2000000c
    2b84:	00003731 	.word	0x00003731

00002b88 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2b88:	b570      	push	{r4, r5, r6, lr}
    2b8a:	b084      	sub	sp, #16
    2b8c:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2b8e:	2300      	movs	r3, #0
    2b90:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2b92:	2208      	movs	r2, #8
    2b94:	2100      	movs	r1, #0
    2b96:	a801      	add	r0, sp, #4
    2b98:	4b2d      	ldr	r3, [pc, #180]	; (2c50 <nm_get_firmware_full_info+0xc8>)
    2b9a:	4798      	blx	r3
	if (pstrRev != NULL)
    2b9c:	2c00      	cmp	r4, #0
    2b9e:	d044      	beq.n	2c2a <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2ba0:	2228      	movs	r2, #40	; 0x28
    2ba2:	2100      	movs	r1, #0
    2ba4:	0020      	movs	r0, r4
    2ba6:	4b2b      	ldr	r3, [pc, #172]	; (2c54 <nm_get_firmware_full_info+0xcc>)
    2ba8:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2baa:	a903      	add	r1, sp, #12
    2bac:	482a      	ldr	r0, [pc, #168]	; (2c58 <nm_get_firmware_full_info+0xd0>)
    2bae:	4b2b      	ldr	r3, [pc, #172]	; (2c5c <nm_get_firmware_full_info+0xd4>)
    2bb0:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2bb2:	2800      	cmp	r0, #0
    2bb4:	d13a      	bne.n	2c2c <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2bb6:	9b03      	ldr	r3, [sp, #12]
    2bb8:	2b00      	cmp	r3, #0
    2bba:	d039      	beq.n	2c30 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2bbc:	20c0      	movs	r0, #192	; 0xc0
    2bbe:	0280      	lsls	r0, r0, #10
    2bc0:	4318      	orrs	r0, r3
    2bc2:	2208      	movs	r2, #8
    2bc4:	a901      	add	r1, sp, #4
    2bc6:	4b26      	ldr	r3, [pc, #152]	; (2c60 <nm_get_firmware_full_info+0xd8>)
    2bc8:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    2bca:	2800      	cmp	r0, #0
    2bcc:	d12e      	bne.n	2c2c <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    2bce:	9b02      	ldr	r3, [sp, #8]
    2bd0:	0418      	lsls	r0, r3, #16
    2bd2:	0c00      	lsrs	r0, r0, #16
    2bd4:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2bd6:	d02e      	beq.n	2c36 <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2bd8:	23c0      	movs	r3, #192	; 0xc0
    2bda:	029b      	lsls	r3, r3, #10
    2bdc:	4318      	orrs	r0, r3
    2bde:	2228      	movs	r2, #40	; 0x28
    2be0:	0021      	movs	r1, r4
    2be2:	4b1f      	ldr	r3, [pc, #124]	; (2c60 <nm_get_firmware_full_info+0xd8>)
    2be4:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2be6:	2800      	cmp	r0, #0
    2be8:	d120      	bne.n	2c2c <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2bea:	7921      	ldrb	r1, [r4, #4]
    2bec:	0209      	lsls	r1, r1, #8
    2bee:	79a2      	ldrb	r2, [r4, #6]
    2bf0:	230f      	movs	r3, #15
    2bf2:	401a      	ands	r2, r3
    2bf4:	430a      	orrs	r2, r1
    2bf6:	7961      	ldrb	r1, [r4, #5]
    2bf8:	0109      	lsls	r1, r1, #4
    2bfa:	25ff      	movs	r5, #255	; 0xff
    2bfc:	4029      	ands	r1, r5
    2bfe:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2c00:	79e1      	ldrb	r1, [r4, #7]
    2c02:	0209      	lsls	r1, r1, #8
    2c04:	7a66      	ldrb	r6, [r4, #9]
    2c06:	4033      	ands	r3, r6
    2c08:	430b      	orrs	r3, r1
    2c0a:	7a21      	ldrb	r1, [r4, #8]
    2c0c:	0109      	lsls	r1, r1, #4
    2c0e:	400d      	ands	r5, r1
    2c10:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2c12:	2a00      	cmp	r2, #0
    2c14:	d012      	beq.n	2c3c <nm_get_firmware_full_info+0xb4>
    2c16:	2b00      	cmp	r3, #0
    2c18:	d013      	beq.n	2c42 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2c1a:	4912      	ldr	r1, [pc, #72]	; (2c64 <nm_get_firmware_full_info+0xdc>)
    2c1c:	428b      	cmp	r3, r1
    2c1e:	d813      	bhi.n	2c48 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2c20:	4b11      	ldr	r3, [pc, #68]	; (2c68 <nm_get_firmware_full_info+0xe0>)
    2c22:	429a      	cmp	r2, r3
    2c24:	d802      	bhi.n	2c2c <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2c26:	380d      	subs	r0, #13
    2c28:	e000      	b.n	2c2c <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    2c2a:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2c2c:	b004      	add	sp, #16
    2c2e:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2c30:	200c      	movs	r0, #12
    2c32:	4240      	negs	r0, r0
    2c34:	e7fa      	b.n	2c2c <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    2c36:	200c      	movs	r0, #12
    2c38:	4240      	negs	r0, r0
    2c3a:	e7f7      	b.n	2c2c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2c3c:	200c      	movs	r0, #12
    2c3e:	4240      	negs	r0, r0
    2c40:	e7f4      	b.n	2c2c <nm_get_firmware_full_info+0xa4>
    2c42:	200c      	movs	r0, #12
    2c44:	4240      	negs	r0, r0
    2c46:	e7f1      	b.n	2c2c <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2c48:	200d      	movs	r0, #13
    2c4a:	4240      	negs	r0, r0
    2c4c:	e7ee      	b.n	2c2c <nm_get_firmware_full_info+0xa4>
    2c4e:	46c0      	nop			; (mov r8, r8)
    2c50:	0000bcef 	.word	0x0000bcef
    2c54:	00001651 	.word	0x00001651
    2c58:	000c0008 	.word	0x000c0008
    2c5c:	00002aa1 	.word	0x00002aa1
    2c60:	00002ab9 	.word	0x00002ab9
    2c64:	00001354 	.word	0x00001354
    2c68:	00001353 	.word	0x00001353

00002c6c <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2c6c:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    2c6e:	2800      	cmp	r0, #0
    2c70:	d037      	beq.n	2ce2 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2c72:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2c74:	1e6b      	subs	r3, r5, #1
    2c76:	2b03      	cmp	r3, #3
    2c78:	d900      	bls.n	2c7c <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2c7a:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    2c7c:	2000      	movs	r0, #0
    2c7e:	4b20      	ldr	r3, [pc, #128]	; (2d00 <nm_drv_init+0x94>)
    2c80:	4798      	blx	r3
    2c82:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2c84:	d12f      	bne.n	2ce6 <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2c86:	481f      	ldr	r0, [pc, #124]	; (2d04 <nm_drv_init+0x98>)
    2c88:	4c1f      	ldr	r4, [pc, #124]	; (2d08 <nm_drv_init+0x9c>)
    2c8a:	47a0      	blx	r4
    2c8c:	4b1f      	ldr	r3, [pc, #124]	; (2d0c <nm_drv_init+0xa0>)
    2c8e:	4798      	blx	r3
    2c90:	0001      	movs	r1, r0
    2c92:	481f      	ldr	r0, [pc, #124]	; (2d10 <nm_drv_init+0xa4>)
    2c94:	47a0      	blx	r4
    2c96:	200d      	movs	r0, #13
    2c98:	4b1e      	ldr	r3, [pc, #120]	; (2d14 <nm_drv_init+0xa8>)
    2c9a:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2c9c:	4b1e      	ldr	r3, [pc, #120]	; (2d18 <nm_drv_init+0xac>)
    2c9e:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    2ca0:	0028      	movs	r0, r5
    2ca2:	4b1e      	ldr	r3, [pc, #120]	; (2d1c <nm_drv_init+0xb0>)
    2ca4:	4798      	blx	r3
    2ca6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2ca8:	d117      	bne.n	2cda <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2caa:	0028      	movs	r0, r5
    2cac:	4b1c      	ldr	r3, [pc, #112]	; (2d20 <nm_drv_init+0xb4>)
    2cae:	4798      	blx	r3
    2cb0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cb2:	d112      	bne.n	2cda <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2cb4:	3d02      	subs	r5, #2
    2cb6:	2d01      	cmp	r5, #1
    2cb8:	d911      	bls.n	2cde <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2cba:	4b1a      	ldr	r3, [pc, #104]	; (2d24 <nm_drv_init+0xb8>)
    2cbc:	4798      	blx	r3
    2cbe:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cc0:	d00d      	beq.n	2cde <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    2cc2:	22a7      	movs	r2, #167	; 0xa7
    2cc4:	0052      	lsls	r2, r2, #1
    2cc6:	4918      	ldr	r1, [pc, #96]	; (2d28 <nm_drv_init+0xbc>)
    2cc8:	4818      	ldr	r0, [pc, #96]	; (2d2c <nm_drv_init+0xc0>)
    2cca:	4b0f      	ldr	r3, [pc, #60]	; (2d08 <nm_drv_init+0x9c>)
    2ccc:	4798      	blx	r3
    2cce:	4818      	ldr	r0, [pc, #96]	; (2d30 <nm_drv_init+0xc4>)
    2cd0:	4b18      	ldr	r3, [pc, #96]	; (2d34 <nm_drv_init+0xc8>)
    2cd2:	4798      	blx	r3
    2cd4:	200d      	movs	r0, #13
    2cd6:	4b0f      	ldr	r3, [pc, #60]	; (2d14 <nm_drv_init+0xa8>)
    2cd8:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2cda:	4b17      	ldr	r3, [pc, #92]	; (2d38 <nm_drv_init+0xcc>)
    2cdc:	4798      	blx	r3
ERR1:
	return ret;
}
    2cde:	0020      	movs	r0, r4
    2ce0:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2ce2:	2501      	movs	r5, #1
    2ce4:	e7ca      	b.n	2c7c <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    2ce6:	2290      	movs	r2, #144	; 0x90
    2ce8:	0052      	lsls	r2, r2, #1
    2cea:	490f      	ldr	r1, [pc, #60]	; (2d28 <nm_drv_init+0xbc>)
    2cec:	480f      	ldr	r0, [pc, #60]	; (2d2c <nm_drv_init+0xc0>)
    2cee:	4b06      	ldr	r3, [pc, #24]	; (2d08 <nm_drv_init+0x9c>)
    2cf0:	4798      	blx	r3
    2cf2:	4812      	ldr	r0, [pc, #72]	; (2d3c <nm_drv_init+0xd0>)
    2cf4:	4b0f      	ldr	r3, [pc, #60]	; (2d34 <nm_drv_init+0xc8>)
    2cf6:	4798      	blx	r3
    2cf8:	200d      	movs	r0, #13
    2cfa:	4b06      	ldr	r3, [pc, #24]	; (2d14 <nm_drv_init+0xa8>)
    2cfc:	4798      	blx	r3
		goto ERR1;
    2cfe:	e7ee      	b.n	2cde <nm_drv_init+0x72>
    2d00:	00002a71 	.word	0x00002a71
    2d04:	0000d880 	.word	0x0000d880
    2d08:	0000be51 	.word	0x0000be51
    2d0c:	00002651 	.word	0x00002651
    2d10:	0000dbc4 	.word	0x0000dbc4
    2d14:	0000be85 	.word	0x0000be85
    2d18:	000034ad 	.word	0x000034ad
    2d1c:	00002865 	.word	0x00002865
    2d20:	0000296d 	.word	0x0000296d
    2d24:	000025f5 	.word	0x000025f5
    2d28:	0000db0c 	.word	0x0000db0c
    2d2c:	0000d550 	.word	0x0000d550
    2d30:	0000db88 	.word	0x0000db88
    2d34:	0000bf6d 	.word	0x0000bf6d
    2d38:	00002a7d 	.word	0x00002a7d
    2d3c:	0000dba8 	.word	0x0000dba8

00002d40 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2d40:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2d42:	4b1c      	ldr	r3, [pc, #112]	; (2db4 <nm_drv_deinit+0x74>)
    2d44:	4798      	blx	r3
    2d46:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d48:	d10b      	bne.n	2d62 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2d4a:	2000      	movs	r0, #0
    2d4c:	4b1a      	ldr	r3, [pc, #104]	; (2db8 <nm_drv_deinit+0x78>)
    2d4e:	4798      	blx	r3
    2d50:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d52:	d114      	bne.n	2d7e <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2d54:	4b19      	ldr	r3, [pc, #100]	; (2dbc <nm_drv_deinit+0x7c>)
    2d56:	4798      	blx	r3
    2d58:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d5a:	d11d      	bne.n	2d98 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2d5c:	4b18      	ldr	r3, [pc, #96]	; (2dc0 <nm_drv_deinit+0x80>)
    2d5e:	4798      	blx	r3
    2d60:	e00b      	b.n	2d7a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2d62:	2266      	movs	r2, #102	; 0x66
    2d64:	32ff      	adds	r2, #255	; 0xff
    2d66:	4917      	ldr	r1, [pc, #92]	; (2dc4 <nm_drv_deinit+0x84>)
    2d68:	4817      	ldr	r0, [pc, #92]	; (2dc8 <nm_drv_deinit+0x88>)
    2d6a:	4b18      	ldr	r3, [pc, #96]	; (2dcc <nm_drv_deinit+0x8c>)
    2d6c:	4798      	blx	r3
    2d6e:	4818      	ldr	r0, [pc, #96]	; (2dd0 <nm_drv_deinit+0x90>)
    2d70:	4b18      	ldr	r3, [pc, #96]	; (2dd4 <nm_drv_deinit+0x94>)
    2d72:	4798      	blx	r3
    2d74:	200d      	movs	r0, #13
    2d76:	4b18      	ldr	r3, [pc, #96]	; (2dd8 <nm_drv_deinit+0x98>)
    2d78:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    2d7a:	0020      	movs	r0, r4
    2d7c:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    2d7e:	22b6      	movs	r2, #182	; 0xb6
    2d80:	0052      	lsls	r2, r2, #1
    2d82:	4910      	ldr	r1, [pc, #64]	; (2dc4 <nm_drv_deinit+0x84>)
    2d84:	4810      	ldr	r0, [pc, #64]	; (2dc8 <nm_drv_deinit+0x88>)
    2d86:	4b11      	ldr	r3, [pc, #68]	; (2dcc <nm_drv_deinit+0x8c>)
    2d88:	4798      	blx	r3
    2d8a:	4814      	ldr	r0, [pc, #80]	; (2ddc <nm_drv_deinit+0x9c>)
    2d8c:	4b11      	ldr	r3, [pc, #68]	; (2dd4 <nm_drv_deinit+0x94>)
    2d8e:	4798      	blx	r3
    2d90:	200d      	movs	r0, #13
    2d92:	4b11      	ldr	r3, [pc, #68]	; (2dd8 <nm_drv_deinit+0x98>)
    2d94:	4798      	blx	r3
		goto ERR1;
    2d96:	e7f0      	b.n	2d7a <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2d98:	22b9      	movs	r2, #185	; 0xb9
    2d9a:	0052      	lsls	r2, r2, #1
    2d9c:	4909      	ldr	r1, [pc, #36]	; (2dc4 <nm_drv_deinit+0x84>)
    2d9e:	480a      	ldr	r0, [pc, #40]	; (2dc8 <nm_drv_deinit+0x88>)
    2da0:	4b0a      	ldr	r3, [pc, #40]	; (2dcc <nm_drv_deinit+0x8c>)
    2da2:	4798      	blx	r3
    2da4:	480e      	ldr	r0, [pc, #56]	; (2de0 <nm_drv_deinit+0xa0>)
    2da6:	4b0b      	ldr	r3, [pc, #44]	; (2dd4 <nm_drv_deinit+0x94>)
    2da8:	4798      	blx	r3
    2daa:	200d      	movs	r0, #13
    2dac:	4b0a      	ldr	r3, [pc, #40]	; (2dd8 <nm_drv_deinit+0x98>)
    2dae:	4798      	blx	r3
		goto ERR1;
    2db0:	e7e3      	b.n	2d7a <nm_drv_deinit+0x3a>
    2db2:	46c0      	nop			; (mov r8, r8)
    2db4:	000029e5 	.word	0x000029e5
    2db8:	0000430d 	.word	0x0000430d
    2dbc:	00002a7d 	.word	0x00002a7d
    2dc0:	00003459 	.word	0x00003459
    2dc4:	0000db18 	.word	0x0000db18
    2dc8:	0000d550 	.word	0x0000d550
    2dcc:	0000be51 	.word	0x0000be51
    2dd0:	0000db28 	.word	0x0000db28
    2dd4:	0000bf6d 	.word	0x0000bf6d
    2dd8:	0000be85 	.word	0x0000be85
    2ddc:	0000db48 	.word	0x0000db48
    2de0:	0000db6c 	.word	0x0000db6c

00002de4 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2de4:	b500      	push	{lr}
    2de6:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2de8:	ab01      	add	r3, sp, #4
    2dea:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2dec:	2200      	movs	r2, #0
    2dee:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2df0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2df2:	0019      	movs	r1, r3
    2df4:	2003      	movs	r0, #3
    2df6:	4b02      	ldr	r3, [pc, #8]	; (2e00 <nmi_spi_write+0x1c>)
    2df8:	4798      	blx	r3
}
    2dfa:	b005      	add	sp, #20
    2dfc:	bd00      	pop	{pc}
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	00001485 	.word	0x00001485

00002e04 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2e04:	b570      	push	{r4, r5, r6, lr}
    2e06:	b084      	sub	sp, #16
    2e08:	ac08      	add	r4, sp, #32
    2e0a:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2e0c:	ac01      	add	r4, sp, #4
    2e0e:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2e10:	303f      	adds	r0, #63	; 0x3f
    2e12:	b2c4      	uxtb	r4, r0
    2e14:	2c0e      	cmp	r4, #14
    2e16:	d900      	bls.n	2e1a <spi_cmd+0x16>
    2e18:	e084      	b.n	2f24 <spi_cmd+0x120>
    2e1a:	00a0      	lsls	r0, r4, #2
    2e1c:	4c4f      	ldr	r4, [pc, #316]	; (2f5c <spi_cmd+0x158>)
    2e1e:	5820      	ldr	r0, [r4, r0]
    2e20:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2e22:	ab01      	add	r3, sp, #4
    2e24:	0c0a      	lsrs	r2, r1, #16
    2e26:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2e28:	0a0a      	lsrs	r2, r1, #8
    2e2a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2e2c:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2e2e:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2e30:	4b4b      	ldr	r3, [pc, #300]	; (2f60 <spi_cmd+0x15c>)
    2e32:	781b      	ldrb	r3, [r3, #0]
    2e34:	2b00      	cmp	r3, #0
    2e36:	d077      	beq.n	2f28 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    2e38:	3901      	subs	r1, #1
    2e3a:	b2c9      	uxtb	r1, r1
    2e3c:	e083      	b.n	2f46 <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    2e3e:	0a0b      	lsrs	r3, r1, #8
    2e40:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2e42:	2d00      	cmp	r5, #0
    2e44:	d107      	bne.n	2e56 <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    2e46:	aa01      	add	r2, sp, #4
    2e48:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2e4a:	ab01      	add	r3, sp, #4
    2e4c:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2e4e:	2200      	movs	r2, #0
    2e50:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e52:	2105      	movs	r1, #5
		break;
    2e54:	e7ec      	b.n	2e30 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2e56:	2280      	movs	r2, #128	; 0x80
    2e58:	4252      	negs	r2, r2
    2e5a:	4313      	orrs	r3, r2
    2e5c:	aa01      	add	r2, sp, #4
    2e5e:	7053      	strb	r3, [r2, #1]
    2e60:	e7f3      	b.n	2e4a <spi_cmd+0x46>
		bc[1] = 0x00;
    2e62:	ab01      	add	r3, sp, #4
    2e64:	2200      	movs	r2, #0
    2e66:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2e68:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2e6a:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e6c:	2105      	movs	r1, #5
		break;
    2e6e:	e7df      	b.n	2e30 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2e70:	ab01      	add	r3, sp, #4
    2e72:	2200      	movs	r2, #0
    2e74:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2e76:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2e78:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e7a:	2105      	movs	r1, #5
		break;
    2e7c:	e7d8      	b.n	2e30 <spi_cmd+0x2c>
		bc[1] = 0xff;
    2e7e:	ab01      	add	r3, sp, #4
    2e80:	22ff      	movs	r2, #255	; 0xff
    2e82:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2e84:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2e86:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e88:	2105      	movs	r1, #5
		break;
    2e8a:	e7d1      	b.n	2e30 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2e8c:	aa01      	add	r2, sp, #4
    2e8e:	0c08      	lsrs	r0, r1, #16
    2e90:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2e92:	0a08      	lsrs	r0, r1, #8
    2e94:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2e96:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2e98:	0a19      	lsrs	r1, r3, #8
    2e9a:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2e9c:	7153      	strb	r3, [r2, #5]
		len = 7;
    2e9e:	2107      	movs	r1, #7
		break;
    2ea0:	e7c6      	b.n	2e30 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2ea2:	aa01      	add	r2, sp, #4
    2ea4:	0c08      	lsrs	r0, r1, #16
    2ea6:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2ea8:	0a08      	lsrs	r0, r1, #8
    2eaa:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2eac:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2eae:	0c19      	lsrs	r1, r3, #16
    2eb0:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2eb2:	0a19      	lsrs	r1, r3, #8
    2eb4:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2eb6:	7193      	strb	r3, [r2, #6]
		len = 8;
    2eb8:	2108      	movs	r1, #8
		break;
    2eba:	e7b9      	b.n	2e30 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    2ebc:	0a0b      	lsrs	r3, r1, #8
    2ebe:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2ec0:	2d00      	cmp	r5, #0
    2ec2:	d10c      	bne.n	2ede <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    2ec4:	a801      	add	r0, sp, #4
    2ec6:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2ec8:	ab01      	add	r3, sp, #4
    2eca:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2ecc:	0e11      	lsrs	r1, r2, #24
    2ece:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2ed0:	0c11      	lsrs	r1, r2, #16
    2ed2:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2ed4:	0a11      	lsrs	r1, r2, #8
    2ed6:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2ed8:	719a      	strb	r2, [r3, #6]
		len = 8;
    2eda:	2108      	movs	r1, #8
		break;
    2edc:	e7a8      	b.n	2e30 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2ede:	2080      	movs	r0, #128	; 0x80
    2ee0:	4240      	negs	r0, r0
    2ee2:	4303      	orrs	r3, r0
    2ee4:	a801      	add	r0, sp, #4
    2ee6:	7043      	strb	r3, [r0, #1]
    2ee8:	e7ee      	b.n	2ec8 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    2eea:	ab01      	add	r3, sp, #4
    2eec:	0c08      	lsrs	r0, r1, #16
    2eee:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2ef0:	0a08      	lsrs	r0, r1, #8
    2ef2:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2ef4:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2ef6:	0e11      	lsrs	r1, r2, #24
    2ef8:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2efa:	0c11      	lsrs	r1, r2, #16
    2efc:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2efe:	0a11      	lsrs	r1, r2, #8
    2f00:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2f02:	71da      	strb	r2, [r3, #7]
		len = 9;
    2f04:	2109      	movs	r1, #9
		break;
    2f06:	e793      	b.n	2e30 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2f08:	2290      	movs	r2, #144	; 0x90
    2f0a:	0052      	lsls	r2, r2, #1
    2f0c:	4915      	ldr	r1, [pc, #84]	; (2f64 <spi_cmd+0x160>)
    2f0e:	4816      	ldr	r0, [pc, #88]	; (2f68 <spi_cmd+0x164>)
    2f10:	4b16      	ldr	r3, [pc, #88]	; (2f6c <spi_cmd+0x168>)
    2f12:	4798      	blx	r3
    2f14:	4816      	ldr	r0, [pc, #88]	; (2f70 <spi_cmd+0x16c>)
    2f16:	4b17      	ldr	r3, [pc, #92]	; (2f74 <spi_cmd+0x170>)
    2f18:	4798      	blx	r3
    2f1a:	200d      	movs	r0, #13
    2f1c:	4b16      	ldr	r3, [pc, #88]	; (2f78 <spi_cmd+0x174>)
    2f1e:	4798      	blx	r3
			result = N_FAIL;
    2f20:	2300      	movs	r3, #0
    2f22:	e017      	b.n	2f54 <spi_cmd+0x150>
	switch (cmd) {
    2f24:	2300      	movs	r3, #0
    2f26:	e015      	b.n	2f54 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2f28:	1e4e      	subs	r6, r1, #1
    2f2a:	aa01      	add	r2, sp, #4
    2f2c:	1995      	adds	r5, r2, r6
    2f2e:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2f30:	4c12      	ldr	r4, [pc, #72]	; (2f7c <spi_cmd+0x178>)
    2f32:	005b      	lsls	r3, r3, #1
    2f34:	7810      	ldrb	r0, [r2, #0]
    2f36:	4043      	eors	r3, r0
    2f38:	5ce3      	ldrb	r3, [r4, r3]
    2f3a:	3201      	adds	r2, #1
	while (len--)
    2f3c:	42aa      	cmp	r2, r5
    2f3e:	d1f8      	bne.n	2f32 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2f40:	005b      	lsls	r3, r3, #1
    2f42:	aa01      	add	r2, sp, #4
    2f44:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2f46:	b289      	uxth	r1, r1
    2f48:	a801      	add	r0, sp, #4
    2f4a:	4b0d      	ldr	r3, [pc, #52]	; (2f80 <spi_cmd+0x17c>)
    2f4c:	4798      	blx	r3
    2f4e:	2301      	movs	r3, #1
    2f50:	2800      	cmp	r0, #0
    2f52:	d1d9      	bne.n	2f08 <spi_cmd+0x104>
		}
	}

	return result;
}
    2f54:	0018      	movs	r0, r3
    2f56:	b004      	add	sp, #16
    2f58:	bd70      	pop	{r4, r5, r6, pc}
    2f5a:	46c0      	nop			; (mov r8, r8)
    2f5c:	0000dbd4 	.word	0x0000dbd4
    2f60:	200003d0 	.word	0x200003d0
    2f64:	0000dc14 	.word	0x0000dc14
    2f68:	0000d550 	.word	0x0000d550
    2f6c:	0000be51 	.word	0x0000be51
    2f70:	0000e0a4 	.word	0x0000e0a4
    2f74:	0000bf6d 	.word	0x0000bf6d
    2f78:	0000be85 	.word	0x0000be85
    2f7c:	0000dca0 	.word	0x0000dca0
    2f80:	00002de5 	.word	0x00002de5

00002f84 <nmi_spi_read>:
{
    2f84:	b500      	push	{lr}
    2f86:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    2f88:	ab01      	add	r3, sp, #4
    2f8a:	2200      	movs	r2, #0
    2f8c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2f8e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2f90:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2f92:	0019      	movs	r1, r3
    2f94:	2003      	movs	r0, #3
    2f96:	4b02      	ldr	r3, [pc, #8]	; (2fa0 <nmi_spi_read+0x1c>)
    2f98:	4798      	blx	r3
}
    2f9a:	b005      	add	sp, #20
    2f9c:	bd00      	pop	{pc}
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	00001485 	.word	0x00001485

00002fa4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fa6:	46c6      	mov	lr, r8
    2fa8:	b500      	push	{lr}
    2faa:	b082      	sub	sp, #8
    2fac:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2fae:	28cf      	cmp	r0, #207	; 0xcf
    2fb0:	d02b      	beq.n	300a <spi_cmd_rsp+0x66>
    2fb2:	0003      	movs	r3, r0
    2fb4:	333b      	adds	r3, #59	; 0x3b
    2fb6:	b2db      	uxtb	r3, r3
    2fb8:	2b01      	cmp	r3, #1
    2fba:	d926      	bls.n	300a <spi_cmd_rsp+0x66>
{
    2fbc:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2fbe:	466b      	mov	r3, sp
    2fc0:	1dde      	adds	r6, r3, #7
    2fc2:	4b26      	ldr	r3, [pc, #152]	; (305c <spi_cmd_rsp+0xb8>)
    2fc4:	4698      	mov	r8, r3
    2fc6:	2101      	movs	r1, #1
    2fc8:	0030      	movs	r0, r6
    2fca:	47c0      	blx	r8
    2fcc:	1e05      	subs	r5, r0, #0
    2fce:	d125      	bne.n	301c <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    2fd0:	7833      	ldrb	r3, [r6, #0]
    2fd2:	42bb      	cmp	r3, r7
    2fd4:	d030      	beq.n	3038 <spi_cmd_rsp+0x94>
    2fd6:	3c01      	subs	r4, #1
    2fd8:	b2e4      	uxtb	r4, r4
    2fda:	2c00      	cmp	r4, #0
    2fdc:	d1f3      	bne.n	2fc6 <spi_cmd_rsp+0x22>
    2fde:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2fe0:	466b      	mov	r3, sp
    2fe2:	1dde      	adds	r6, r3, #7
    2fe4:	4f1d      	ldr	r7, [pc, #116]	; (305c <spi_cmd_rsp+0xb8>)
    2fe6:	2101      	movs	r1, #1
    2fe8:	0030      	movs	r0, r6
    2fea:	47b8      	blx	r7
    2fec:	2800      	cmp	r0, #0
    2fee:	d125      	bne.n	303c <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2ff0:	7833      	ldrb	r3, [r6, #0]
    2ff2:	2b00      	cmp	r3, #0
    2ff4:	d02f      	beq.n	3056 <spi_cmd_rsp+0xb2>
    2ff6:	3c01      	subs	r4, #1
    2ff8:	b2e4      	uxtb	r4, r4
    2ffa:	2c00      	cmp	r4, #0
    2ffc:	d1f3      	bne.n	2fe6 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    2ffe:	2501      	movs	r5, #1

_fail_:

	return result;
}
    3000:	0028      	movs	r0, r5
    3002:	b002      	add	sp, #8
    3004:	bc04      	pop	{r2}
    3006:	4690      	mov	r8, r2
    3008:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    300a:	2101      	movs	r1, #1
    300c:	466b      	mov	r3, sp
    300e:	1dd8      	adds	r0, r3, #7
    3010:	4b12      	ldr	r3, [pc, #72]	; (305c <spi_cmd_rsp+0xb8>)
    3012:	4798      	blx	r3
			result = N_FAIL;
    3014:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3016:	2800      	cmp	r0, #0
    3018:	d0d0      	beq.n	2fbc <spi_cmd_rsp+0x18>
    301a:	e7f1      	b.n	3000 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    301c:	225c      	movs	r2, #92	; 0x5c
    301e:	32ff      	adds	r2, #255	; 0xff
    3020:	490f      	ldr	r1, [pc, #60]	; (3060 <spi_cmd_rsp+0xbc>)
    3022:	4810      	ldr	r0, [pc, #64]	; (3064 <spi_cmd_rsp+0xc0>)
    3024:	4b10      	ldr	r3, [pc, #64]	; (3068 <spi_cmd_rsp+0xc4>)
    3026:	4798      	blx	r3
    3028:	4810      	ldr	r0, [pc, #64]	; (306c <spi_cmd_rsp+0xc8>)
    302a:	4b11      	ldr	r3, [pc, #68]	; (3070 <spi_cmd_rsp+0xcc>)
    302c:	4798      	blx	r3
    302e:	200d      	movs	r0, #13
    3030:	4b10      	ldr	r3, [pc, #64]	; (3074 <spi_cmd_rsp+0xd0>)
    3032:	4798      	blx	r3
			result = N_FAIL;
    3034:	2500      	movs	r5, #0
			goto _fail_;
    3036:	e7e3      	b.n	3000 <spi_cmd_rsp+0x5c>
    3038:	240b      	movs	r4, #11
    303a:	e7d1      	b.n	2fe0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    303c:	226a      	movs	r2, #106	; 0x6a
    303e:	32ff      	adds	r2, #255	; 0xff
    3040:	4907      	ldr	r1, [pc, #28]	; (3060 <spi_cmd_rsp+0xbc>)
    3042:	4808      	ldr	r0, [pc, #32]	; (3064 <spi_cmd_rsp+0xc0>)
    3044:	4b08      	ldr	r3, [pc, #32]	; (3068 <spi_cmd_rsp+0xc4>)
    3046:	4798      	blx	r3
    3048:	4808      	ldr	r0, [pc, #32]	; (306c <spi_cmd_rsp+0xc8>)
    304a:	4b09      	ldr	r3, [pc, #36]	; (3070 <spi_cmd_rsp+0xcc>)
    304c:	4798      	blx	r3
    304e:	200d      	movs	r0, #13
    3050:	4b08      	ldr	r3, [pc, #32]	; (3074 <spi_cmd_rsp+0xd0>)
    3052:	4798      	blx	r3
			goto _fail_;
    3054:	e7d4      	b.n	3000 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    3056:	2501      	movs	r5, #1
    3058:	e7d2      	b.n	3000 <spi_cmd_rsp+0x5c>
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	00002f85 	.word	0x00002f85
    3060:	0000dc2c 	.word	0x0000dc2c
    3064:	0000d550 	.word	0x0000d550
    3068:	0000be51 	.word	0x0000be51
    306c:	0000e0d0 	.word	0x0000e0d0
    3070:	0000bf6d 	.word	0x0000bf6d
    3074:	0000be85 	.word	0x0000be85

00003078 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    3078:	b5f0      	push	{r4, r5, r6, r7, lr}
    307a:	46de      	mov	lr, fp
    307c:	4657      	mov	r7, sl
    307e:	464e      	mov	r6, r9
    3080:	4645      	mov	r5, r8
    3082:	b5e0      	push	{r5, r6, r7, lr}
    3084:	b087      	sub	sp, #28
    3086:	9001      	str	r0, [sp, #4]
    3088:	4689      	mov	r9, r1
    308a:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    308c:	2300      	movs	r3, #0
    308e:	469a      	mov	sl, r3
    3090:	2380      	movs	r3, #128	; 0x80
    3092:	019b      	lsls	r3, r3, #6
    3094:	469b      	mov	fp, r3
    3096:	466a      	mov	r2, sp
    3098:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    309a:	4b3c      	ldr	r3, [pc, #240]	; (318c <spi_data_read+0x114>)
    309c:	4698      	mov	r8, r3
    309e:	e02f      	b.n	3100 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    30a0:	22be      	movs	r2, #190	; 0xbe
    30a2:	0092      	lsls	r2, r2, #2
    30a4:	493a      	ldr	r1, [pc, #232]	; (3190 <spi_data_read+0x118>)
    30a6:	483b      	ldr	r0, [pc, #236]	; (3194 <spi_data_read+0x11c>)
    30a8:	4b3b      	ldr	r3, [pc, #236]	; (3198 <spi_data_read+0x120>)
    30aa:	4798      	blx	r3
    30ac:	483b      	ldr	r0, [pc, #236]	; (319c <spi_data_read+0x124>)
    30ae:	4b3c      	ldr	r3, [pc, #240]	; (31a0 <spi_data_read+0x128>)
    30b0:	4798      	blx	r3
    30b2:	200d      	movs	r0, #13
    30b4:	4b3b      	ldr	r3, [pc, #236]	; (31a4 <spi_data_read+0x12c>)
    30b6:	4798      	blx	r3
    30b8:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    30ba:	0028      	movs	r0, r5
    30bc:	b007      	add	sp, #28
    30be:	bc3c      	pop	{r2, r3, r4, r5}
    30c0:	4690      	mov	r8, r2
    30c2:	4699      	mov	r9, r3
    30c4:	46a2      	mov	sl, r4
    30c6:	46ab      	mov	fp, r5
    30c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    30ca:	2c00      	cmp	r4, #0
    30cc:	dd2e      	ble.n	312c <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    30ce:	9b01      	ldr	r3, [sp, #4]
    30d0:	4453      	add	r3, sl
    30d2:	0018      	movs	r0, r3
    30d4:	0039      	movs	r1, r7
    30d6:	4b2d      	ldr	r3, [pc, #180]	; (318c <spi_data_read+0x114>)
    30d8:	4798      	blx	r3
    30da:	1e04      	subs	r4, r0, #0
    30dc:	d134      	bne.n	3148 <spi_data_read+0xd0>
		if(!clockless)
    30de:	9b02      	ldr	r3, [sp, #8]
    30e0:	2b00      	cmp	r3, #0
    30e2:	d103      	bne.n	30ec <spi_data_read+0x74>
			if (!gu8Crc_off) {
    30e4:	4b30      	ldr	r3, [pc, #192]	; (31a8 <spi_data_read+0x130>)
    30e6:	781b      	ldrb	r3, [r3, #0]
    30e8:	2b00      	cmp	r3, #0
    30ea:	d039      	beq.n	3160 <spi_data_read+0xe8>
		ix += nbytes;
    30ec:	4653      	mov	r3, sl
    30ee:	18fb      	adds	r3, r7, r3
    30f0:	b21b      	sxth	r3, r3
    30f2:	469a      	mov	sl, r3
		sz -= nbytes;
    30f4:	464b      	mov	r3, r9
    30f6:	1bdf      	subs	r7, r3, r7
    30f8:	b2bb      	uxth	r3, r7
    30fa:	4699      	mov	r9, r3
	} while (sz);
    30fc:	2b00      	cmp	r3, #0
    30fe:	d043      	beq.n	3188 <spi_data_read+0x110>
    3100:	464f      	mov	r7, r9
    3102:	45d9      	cmp	r9, fp
    3104:	d901      	bls.n	310a <spi_data_read+0x92>
    3106:	466b      	mov	r3, sp
    3108:	89df      	ldrh	r7, [r3, #14]
    310a:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    310c:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    310e:	ab04      	add	r3, sp, #16
    3110:	1cde      	adds	r6, r3, #3
    3112:	2101      	movs	r1, #1
    3114:	0030      	movs	r0, r6
    3116:	47c0      	blx	r8
    3118:	1e05      	subs	r5, r0, #0
    311a:	d1c1      	bne.n	30a0 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    311c:	7833      	ldrb	r3, [r6, #0]
    311e:	091b      	lsrs	r3, r3, #4
    3120:	2b0f      	cmp	r3, #15
    3122:	d0d2      	beq.n	30ca <spi_data_read+0x52>
    3124:	3c01      	subs	r4, #1
    3126:	b224      	sxth	r4, r4
		} while (retry--);
    3128:	1c63      	adds	r3, r4, #1
    312a:	d1f2      	bne.n	3112 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    312c:	22c1      	movs	r2, #193	; 0xc1
    312e:	0092      	lsls	r2, r2, #2
    3130:	4917      	ldr	r1, [pc, #92]	; (3190 <spi_data_read+0x118>)
    3132:	4818      	ldr	r0, [pc, #96]	; (3194 <spi_data_read+0x11c>)
    3134:	4c18      	ldr	r4, [pc, #96]	; (3198 <spi_data_read+0x120>)
    3136:	47a0      	blx	r4
    3138:	ab04      	add	r3, sp, #16
    313a:	78d9      	ldrb	r1, [r3, #3]
    313c:	481b      	ldr	r0, [pc, #108]	; (31ac <spi_data_read+0x134>)
    313e:	47a0      	blx	r4
    3140:	200d      	movs	r0, #13
    3142:	4b18      	ldr	r3, [pc, #96]	; (31a4 <spi_data_read+0x12c>)
    3144:	4798      	blx	r3
			break;
    3146:	e7b8      	b.n	30ba <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    3148:	4a19      	ldr	r2, [pc, #100]	; (31b0 <spi_data_read+0x138>)
    314a:	4911      	ldr	r1, [pc, #68]	; (3190 <spi_data_read+0x118>)
    314c:	4811      	ldr	r0, [pc, #68]	; (3194 <spi_data_read+0x11c>)
    314e:	4b12      	ldr	r3, [pc, #72]	; (3198 <spi_data_read+0x120>)
    3150:	4798      	blx	r3
    3152:	4818      	ldr	r0, [pc, #96]	; (31b4 <spi_data_read+0x13c>)
    3154:	4b12      	ldr	r3, [pc, #72]	; (31a0 <spi_data_read+0x128>)
    3156:	4798      	blx	r3
    3158:	200d      	movs	r0, #13
    315a:	4b12      	ldr	r3, [pc, #72]	; (31a4 <spi_data_read+0x12c>)
    315c:	4798      	blx	r3
			break;
    315e:	e7ac      	b.n	30ba <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    3160:	2102      	movs	r1, #2
    3162:	a805      	add	r0, sp, #20
    3164:	4b09      	ldr	r3, [pc, #36]	; (318c <spi_data_read+0x114>)
    3166:	4798      	blx	r3
    3168:	2800      	cmp	r0, #0
    316a:	d0bf      	beq.n	30ec <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    316c:	22c6      	movs	r2, #198	; 0xc6
    316e:	0092      	lsls	r2, r2, #2
    3170:	4907      	ldr	r1, [pc, #28]	; (3190 <spi_data_read+0x118>)
    3172:	4808      	ldr	r0, [pc, #32]	; (3194 <spi_data_read+0x11c>)
    3174:	4b08      	ldr	r3, [pc, #32]	; (3198 <spi_data_read+0x120>)
    3176:	4798      	blx	r3
    3178:	480f      	ldr	r0, [pc, #60]	; (31b8 <spi_data_read+0x140>)
    317a:	4b09      	ldr	r3, [pc, #36]	; (31a0 <spi_data_read+0x128>)
    317c:	4798      	blx	r3
    317e:	200d      	movs	r0, #13
    3180:	4b08      	ldr	r3, [pc, #32]	; (31a4 <spi_data_read+0x12c>)
    3182:	4798      	blx	r3
					result = N_FAIL;
    3184:	0025      	movs	r5, r4
					break;
    3186:	e798      	b.n	30ba <spi_data_read+0x42>
    3188:	2501      	movs	r5, #1
    318a:	e796      	b.n	30ba <spi_data_read+0x42>
    318c:	00002f85 	.word	0x00002f85
    3190:	0000dc38 	.word	0x0000dc38
    3194:	0000d550 	.word	0x0000d550
    3198:	0000be51 	.word	0x0000be51
    319c:	0000e104 	.word	0x0000e104
    31a0:	0000bf6d 	.word	0x0000bf6d
    31a4:	0000be85 	.word	0x0000be85
    31a8:	200003d0 	.word	0x200003d0
    31ac:	0000e138 	.word	0x0000e138
    31b0:	0000030d 	.word	0x0000030d
    31b4:	0000e168 	.word	0x0000e168
    31b8:	0000e198 	.word	0x0000e198

000031bc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    31bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31be:	46d6      	mov	lr, sl
    31c0:	464f      	mov	r7, r9
    31c2:	4646      	mov	r6, r8
    31c4:	b5c0      	push	{r6, r7, lr}
    31c6:	b086      	sub	sp, #24
    31c8:	9003      	str	r0, [sp, #12]
    31ca:	9104      	str	r1, [sp, #16]
    31cc:	2830      	cmp	r0, #48	; 0x30
    31ce:	d80f      	bhi.n	31f0 <spi_write_reg+0x34>
    31d0:	4b30      	ldr	r3, [pc, #192]	; (3294 <spi_write_reg+0xd8>)
    31d2:	781f      	ldrb	r7, [r3, #0]
    31d4:	b2fb      	uxtb	r3, r7
    31d6:	9305      	str	r3, [sp, #20]
    31d8:	2300      	movs	r3, #0
    31da:	2230      	movs	r2, #48	; 0x30
    31dc:	9903      	ldr	r1, [sp, #12]
    31de:	428a      	cmp	r2, r1
    31e0:	415b      	adcs	r3, r3
    31e2:	b2db      	uxtb	r3, r3
    31e4:	469a      	mov	sl, r3
    31e6:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    31e8:	4b2b      	ldr	r3, [pc, #172]	; (3298 <spi_write_reg+0xdc>)
    31ea:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    31ec:	46d1      	mov	r9, sl
    31ee:	e033      	b.n	3258 <spi_write_reg+0x9c>
    31f0:	4b2a      	ldr	r3, [pc, #168]	; (329c <spi_write_reg+0xe0>)
    31f2:	781f      	ldrb	r7, [r3, #0]
    31f4:	e7ee      	b.n	31d4 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    31f6:	9805      	ldr	r0, [sp, #20]
    31f8:	4b29      	ldr	r3, [pc, #164]	; (32a0 <spi_write_reg+0xe4>)
    31fa:	4798      	blx	r3
    31fc:	0004      	movs	r4, r0
	if (result != N_OK) {
    31fe:	2801      	cmp	r0, #1
    3200:	d041      	beq.n	3286 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3202:	4a28      	ldr	r2, [pc, #160]	; (32a4 <spi_write_reg+0xe8>)
    3204:	4928      	ldr	r1, [pc, #160]	; (32a8 <spi_write_reg+0xec>)
    3206:	4829      	ldr	r0, [pc, #164]	; (32ac <spi_write_reg+0xf0>)
    3208:	4e29      	ldr	r6, [pc, #164]	; (32b0 <spi_write_reg+0xf4>)
    320a:	47b0      	blx	r6
    320c:	9903      	ldr	r1, [sp, #12]
    320e:	4829      	ldr	r0, [pc, #164]	; (32b4 <spi_write_reg+0xf8>)
    3210:	47b0      	blx	r6
    3212:	200d      	movs	r0, #13
    3214:	4b28      	ldr	r3, [pc, #160]	; (32b8 <spi_write_reg+0xfc>)
    3216:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    3218:	2001      	movs	r0, #1
    321a:	4e28      	ldr	r6, [pc, #160]	; (32bc <spi_write_reg+0x100>)
    321c:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    321e:	2300      	movs	r3, #0
    3220:	9300      	str	r3, [sp, #0]
    3222:	2200      	movs	r2, #0
    3224:	2100      	movs	r1, #0
    3226:	20cf      	movs	r0, #207	; 0xcf
    3228:	4f1b      	ldr	r7, [pc, #108]	; (3298 <spi_write_reg+0xdc>)
    322a:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    322c:	20cf      	movs	r0, #207	; 0xcf
    322e:	4b1c      	ldr	r3, [pc, #112]	; (32a0 <spi_write_reg+0xe4>)
    3230:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3232:	22ea      	movs	r2, #234	; 0xea
    3234:	0092      	lsls	r2, r2, #2
    3236:	491c      	ldr	r1, [pc, #112]	; (32a8 <spi_write_reg+0xec>)
    3238:	481c      	ldr	r0, [pc, #112]	; (32ac <spi_write_reg+0xf0>)
    323a:	4f1d      	ldr	r7, [pc, #116]	; (32b0 <spi_write_reg+0xf4>)
    323c:	47b8      	blx	r7
    323e:	9b04      	ldr	r3, [sp, #16]
    3240:	9a03      	ldr	r2, [sp, #12]
    3242:	0029      	movs	r1, r5
    3244:	481e      	ldr	r0, [pc, #120]	; (32c0 <spi_write_reg+0x104>)
    3246:	47b8      	blx	r7
    3248:	200d      	movs	r0, #13
    324a:	4b1b      	ldr	r3, [pc, #108]	; (32b8 <spi_write_reg+0xfc>)
    324c:	4798      	blx	r3
		nm_bsp_sleep(1);
    324e:	2001      	movs	r0, #1
    3250:	47b0      	blx	r6
    3252:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    3254:	2d00      	cmp	r5, #0
    3256:	d016      	beq.n	3286 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    3258:	464b      	mov	r3, r9
    325a:	9300      	str	r3, [sp, #0]
    325c:	2304      	movs	r3, #4
    325e:	9a04      	ldr	r2, [sp, #16]
    3260:	9f03      	ldr	r7, [sp, #12]
    3262:	0039      	movs	r1, r7
    3264:	9805      	ldr	r0, [sp, #20]
    3266:	47c0      	blx	r8
    3268:	0004      	movs	r4, r0
	if (result != N_OK) {
    326a:	2801      	cmp	r0, #1
    326c:	d0c3      	beq.n	31f6 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    326e:	4a15      	ldr	r2, [pc, #84]	; (32c4 <spi_write_reg+0x108>)
    3270:	490d      	ldr	r1, [pc, #52]	; (32a8 <spi_write_reg+0xec>)
    3272:	480e      	ldr	r0, [pc, #56]	; (32ac <spi_write_reg+0xf0>)
    3274:	4e0e      	ldr	r6, [pc, #56]	; (32b0 <spi_write_reg+0xf4>)
    3276:	47b0      	blx	r6
    3278:	0039      	movs	r1, r7
    327a:	4813      	ldr	r0, [pc, #76]	; (32c8 <spi_write_reg+0x10c>)
    327c:	47b0      	blx	r6
    327e:	200d      	movs	r0, #13
    3280:	4b0d      	ldr	r3, [pc, #52]	; (32b8 <spi_write_reg+0xfc>)
    3282:	4798      	blx	r3
		goto _FAIL_;
    3284:	e7c8      	b.n	3218 <spi_write_reg+0x5c>
	}

	return result;
}
    3286:	0020      	movs	r0, r4
    3288:	b006      	add	sp, #24
    328a:	bc1c      	pop	{r2, r3, r4}
    328c:	4690      	mov	r8, r2
    328e:	4699      	mov	r9, r3
    3290:	46a2      	mov	sl, r4
    3292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3294:	0000dc10 	.word	0x0000dc10
    3298:	00002e05 	.word	0x00002e05
    329c:	0000dc11 	.word	0x0000dc11
    32a0:	00002fa5 	.word	0x00002fa5
    32a4:	00000395 	.word	0x00000395
    32a8:	0000dc58 	.word	0x0000dc58
    32ac:	0000d550 	.word	0x0000d550
    32b0:	0000be51 	.word	0x0000be51
    32b4:	0000e290 	.word	0x0000e290
    32b8:	0000be85 	.word	0x0000be85
    32bc:	000012c5 	.word	0x000012c5
    32c0:	0000e2c8 	.word	0x0000e2c8
    32c4:	0000038f 	.word	0x0000038f
    32c8:	0000e264 	.word	0x0000e264

000032cc <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    32cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ce:	46de      	mov	lr, fp
    32d0:	4657      	mov	r7, sl
    32d2:	464e      	mov	r6, r9
    32d4:	4645      	mov	r5, r8
    32d6:	b5e0      	push	{r5, r6, r7, lr}
    32d8:	b087      	sub	sp, #28
    32da:	9002      	str	r0, [sp, #8]
    32dc:	468b      	mov	fp, r1
    32de:	28ff      	cmp	r0, #255	; 0xff
    32e0:	d80f      	bhi.n	3302 <spi_read_reg+0x36>
    32e2:	4b41      	ldr	r3, [pc, #260]	; (33e8 <spi_read_reg+0x11c>)
    32e4:	781f      	ldrb	r7, [r3, #0]
    32e6:	b2fb      	uxtb	r3, r7
    32e8:	9303      	str	r3, [sp, #12]
    32ea:	2300      	movs	r3, #0
    32ec:	22ff      	movs	r2, #255	; 0xff
    32ee:	9902      	ldr	r1, [sp, #8]
    32f0:	428a      	cmp	r2, r1
    32f2:	415b      	adcs	r3, r3
    32f4:	b2db      	uxtb	r3, r3
    32f6:	469a      	mov	sl, r3
    32f8:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    32fa:	4b3c      	ldr	r3, [pc, #240]	; (33ec <spi_read_reg+0x120>)
    32fc:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    32fe:	46d1      	mov	r9, sl
    3300:	e031      	b.n	3366 <spi_read_reg+0x9a>
    3302:	4b3b      	ldr	r3, [pc, #236]	; (33f0 <spi_read_reg+0x124>)
    3304:	781f      	ldrb	r7, [r3, #0]
    3306:	e7ee      	b.n	32e6 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    3308:	9803      	ldr	r0, [sp, #12]
    330a:	4b3a      	ldr	r3, [pc, #232]	; (33f4 <spi_read_reg+0x128>)
    330c:	4798      	blx	r3
    330e:	0004      	movs	r4, r0
	if (result != N_OK) {
    3310:	2801      	cmp	r0, #1
    3312:	d040      	beq.n	3396 <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    3314:	4a38      	ldr	r2, [pc, #224]	; (33f8 <spi_read_reg+0x12c>)
    3316:	4939      	ldr	r1, [pc, #228]	; (33fc <spi_read_reg+0x130>)
    3318:	4839      	ldr	r0, [pc, #228]	; (3400 <spi_read_reg+0x134>)
    331a:	4e3a      	ldr	r6, [pc, #232]	; (3404 <spi_read_reg+0x138>)
    331c:	47b0      	blx	r6
    331e:	9902      	ldr	r1, [sp, #8]
    3320:	4839      	ldr	r0, [pc, #228]	; (3408 <spi_read_reg+0x13c>)
    3322:	47b0      	blx	r6
    3324:	200d      	movs	r0, #13
    3326:	4b39      	ldr	r3, [pc, #228]	; (340c <spi_read_reg+0x140>)
    3328:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    332a:	2001      	movs	r0, #1
    332c:	4e38      	ldr	r6, [pc, #224]	; (3410 <spi_read_reg+0x144>)
    332e:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3330:	2300      	movs	r3, #0
    3332:	9300      	str	r3, [sp, #0]
    3334:	2200      	movs	r2, #0
    3336:	2100      	movs	r1, #0
    3338:	20cf      	movs	r0, #207	; 0xcf
    333a:	4f2c      	ldr	r7, [pc, #176]	; (33ec <spi_read_reg+0x120>)
    333c:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    333e:	20cf      	movs	r0, #207	; 0xcf
    3340:	4b2c      	ldr	r3, [pc, #176]	; (33f4 <spi_read_reg+0x128>)
    3342:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    3344:	4a33      	ldr	r2, [pc, #204]	; (3414 <spi_read_reg+0x148>)
    3346:	492d      	ldr	r1, [pc, #180]	; (33fc <spi_read_reg+0x130>)
    3348:	482d      	ldr	r0, [pc, #180]	; (3400 <spi_read_reg+0x134>)
    334a:	4f2e      	ldr	r7, [pc, #184]	; (3404 <spi_read_reg+0x138>)
    334c:	47b8      	blx	r7
    334e:	9a02      	ldr	r2, [sp, #8]
    3350:	0029      	movs	r1, r5
    3352:	4831      	ldr	r0, [pc, #196]	; (3418 <spi_read_reg+0x14c>)
    3354:	47b8      	blx	r7
    3356:	200d      	movs	r0, #13
    3358:	4b2c      	ldr	r3, [pc, #176]	; (340c <spi_read_reg+0x140>)
    335a:	4798      	blx	r3
		nm_bsp_sleep(1);
    335c:	2001      	movs	r0, #1
    335e:	47b0      	blx	r6
    3360:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    3362:	2d00      	cmp	r5, #0
    3364:	d038      	beq.n	33d8 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    3366:	464b      	mov	r3, r9
    3368:	9300      	str	r3, [sp, #0]
    336a:	2304      	movs	r3, #4
    336c:	2200      	movs	r2, #0
    336e:	9f02      	ldr	r7, [sp, #8]
    3370:	0039      	movs	r1, r7
    3372:	9803      	ldr	r0, [sp, #12]
    3374:	47c0      	blx	r8
    3376:	0004      	movs	r4, r0
	if (result != N_OK) {
    3378:	2801      	cmp	r0, #1
    337a:	d0c5      	beq.n	3308 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    337c:	2282      	movs	r2, #130	; 0x82
    337e:	00d2      	lsls	r2, r2, #3
    3380:	491e      	ldr	r1, [pc, #120]	; (33fc <spi_read_reg+0x130>)
    3382:	481f      	ldr	r0, [pc, #124]	; (3400 <spi_read_reg+0x134>)
    3384:	4e1f      	ldr	r6, [pc, #124]	; (3404 <spi_read_reg+0x138>)
    3386:	47b0      	blx	r6
    3388:	0039      	movs	r1, r7
    338a:	4824      	ldr	r0, [pc, #144]	; (341c <spi_read_reg+0x150>)
    338c:	47b0      	blx	r6
    338e:	200d      	movs	r0, #13
    3390:	4b1e      	ldr	r3, [pc, #120]	; (340c <spi_read_reg+0x140>)
    3392:	4798      	blx	r3
		goto _FAIL_;
    3394:	e7c9      	b.n	332a <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    3396:	464a      	mov	r2, r9
    3398:	2104      	movs	r1, #4
    339a:	a805      	add	r0, sp, #20
    339c:	4b20      	ldr	r3, [pc, #128]	; (3420 <spi_read_reg+0x154>)
    339e:	4798      	blx	r3
    33a0:	0004      	movs	r4, r0
	if (result != N_OK) {
    33a2:	2801      	cmp	r0, #1
    33a4:	d00b      	beq.n	33be <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    33a6:	4a1f      	ldr	r2, [pc, #124]	; (3424 <spi_read_reg+0x158>)
    33a8:	4914      	ldr	r1, [pc, #80]	; (33fc <spi_read_reg+0x130>)
    33aa:	4815      	ldr	r0, [pc, #84]	; (3400 <spi_read_reg+0x134>)
    33ac:	4b15      	ldr	r3, [pc, #84]	; (3404 <spi_read_reg+0x138>)
    33ae:	4798      	blx	r3
    33b0:	481d      	ldr	r0, [pc, #116]	; (3428 <spi_read_reg+0x15c>)
    33b2:	4b1e      	ldr	r3, [pc, #120]	; (342c <spi_read_reg+0x160>)
    33b4:	4798      	blx	r3
    33b6:	200d      	movs	r0, #13
    33b8:	4b14      	ldr	r3, [pc, #80]	; (340c <spi_read_reg+0x140>)
    33ba:	4798      	blx	r3
		goto _FAIL_;
    33bc:	e7b5      	b.n	332a <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    33be:	aa05      	add	r2, sp, #20
    33c0:	7853      	ldrb	r3, [r2, #1]
    33c2:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    33c4:	7891      	ldrb	r1, [r2, #2]
    33c6:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    33c8:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    33ca:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    33cc:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    33ce:	78d2      	ldrb	r2, [r2, #3]
    33d0:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    33d2:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    33d4:	465a      	mov	r2, fp
    33d6:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    33d8:	0020      	movs	r0, r4
    33da:	b007      	add	sp, #28
    33dc:	bc3c      	pop	{r2, r3, r4, r5}
    33de:	4690      	mov	r8, r2
    33e0:	4699      	mov	r9, r3
    33e2:	46a2      	mov	sl, r4
    33e4:	46ab      	mov	fp, r5
    33e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33e8:	0000dc12 	.word	0x0000dc12
    33ec:	00002e05 	.word	0x00002e05
    33f0:	0000dc13 	.word	0x0000dc13
    33f4:	00002fa5 	.word	0x00002fa5
    33f8:	00000416 	.word	0x00000416
    33fc:	0000dc78 	.word	0x0000dc78
    3400:	0000d550 	.word	0x0000d550
    3404:	0000be51 	.word	0x0000be51
    3408:	0000e1f8 	.word	0x0000e1f8
    340c:	0000be85 	.word	0x0000be85
    3410:	000012c5 	.word	0x000012c5
    3414:	00000435 	.word	0x00000435
    3418:	0000e24c 	.word	0x0000e24c
    341c:	0000e1cc 	.word	0x0000e1cc
    3420:	00003079 	.word	0x00003079
    3424:	0000041d 	.word	0x0000041d
    3428:	0000e22c 	.word	0x0000e22c
    342c:	0000bf6d 	.word	0x0000bf6d

00003430 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    3430:	b510      	push	{r4, lr}
    3432:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3434:	2300      	movs	r3, #0
    3436:	9300      	str	r3, [sp, #0]
    3438:	2200      	movs	r2, #0
    343a:	2100      	movs	r1, #0
    343c:	20cf      	movs	r0, #207	; 0xcf
    343e:	4c04      	ldr	r4, [pc, #16]	; (3450 <nm_spi_reset+0x20>)
    3440:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    3442:	20cf      	movs	r0, #207	; 0xcf
    3444:	4b03      	ldr	r3, [pc, #12]	; (3454 <nm_spi_reset+0x24>)
    3446:	4798      	blx	r3
	return M2M_SUCCESS;
}
    3448:	2000      	movs	r0, #0
    344a:	b002      	add	sp, #8
    344c:	bd10      	pop	{r4, pc}
    344e:	46c0      	nop			; (mov r8, r8)
    3450:	00002e05 	.word	0x00002e05
    3454:	00002fa5 	.word	0x00002fa5

00003458 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    3458:	2200      	movs	r2, #0
    345a:	4b02      	ldr	r3, [pc, #8]	; (3464 <nm_spi_deinit+0xc>)
    345c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    345e:	2000      	movs	r0, #0
    3460:	4770      	bx	lr
    3462:	46c0      	nop			; (mov r8, r8)
    3464:	200003d0 	.word	0x200003d0

00003468 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    3468:	b500      	push	{lr}
    346a:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    346c:	a901      	add	r1, sp, #4
    346e:	4b02      	ldr	r3, [pc, #8]	; (3478 <nm_spi_read_reg+0x10>)
    3470:	4798      	blx	r3

	return u32Val;
}
    3472:	9801      	ldr	r0, [sp, #4]
    3474:	b003      	add	sp, #12
    3476:	bd00      	pop	{pc}
    3478:	000032cd 	.word	0x000032cd

0000347c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    347c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    347e:	4b04      	ldr	r3, [pc, #16]	; (3490 <nm_spi_read_reg_with_ret+0x14>)
    3480:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3482:	2300      	movs	r3, #0
    3484:	2801      	cmp	r0, #1
    3486:	d101      	bne.n	348c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    3488:	0018      	movs	r0, r3
    348a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    348c:	3b06      	subs	r3, #6
    348e:	e7fb      	b.n	3488 <nm_spi_read_reg_with_ret+0xc>
    3490:	000032cd 	.word	0x000032cd

00003494 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    3494:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    3496:	4b04      	ldr	r3, [pc, #16]	; (34a8 <nm_spi_write_reg+0x14>)
    3498:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    349a:	2300      	movs	r3, #0
    349c:	2801      	cmp	r0, #1
    349e:	d101      	bne.n	34a4 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    34a0:	0018      	movs	r0, r3
    34a2:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    34a4:	3b06      	subs	r3, #6
    34a6:	e7fb      	b.n	34a0 <nm_spi_write_reg+0xc>
    34a8:	000031bd 	.word	0x000031bd

000034ac <nm_spi_init>:
{
    34ac:	b510      	push	{r4, lr}
    34ae:	b082      	sub	sp, #8
	uint32 reg = 0;
    34b0:	2300      	movs	r3, #0
    34b2:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    34b4:	4a35      	ldr	r2, [pc, #212]	; (358c <nm_spi_init+0xe0>)
    34b6:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    34b8:	4669      	mov	r1, sp
    34ba:	4835      	ldr	r0, [pc, #212]	; (3590 <nm_spi_init+0xe4>)
    34bc:	4b35      	ldr	r3, [pc, #212]	; (3594 <nm_spi_init+0xe8>)
    34be:	4798      	blx	r3
    34c0:	2800      	cmp	r0, #0
    34c2:	d028      	beq.n	3516 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    34c4:	4b31      	ldr	r3, [pc, #196]	; (358c <nm_spi_init+0xe0>)
    34c6:	781b      	ldrb	r3, [r3, #0]
    34c8:	2b00      	cmp	r3, #0
    34ca:	d10d      	bne.n	34e8 <nm_spi_init+0x3c>
		reg &= ~0x70;
    34cc:	337c      	adds	r3, #124	; 0x7c
    34ce:	9900      	ldr	r1, [sp, #0]
    34d0:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    34d2:	3b2c      	subs	r3, #44	; 0x2c
    34d4:	4319      	orrs	r1, r3
    34d6:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    34d8:	482d      	ldr	r0, [pc, #180]	; (3590 <nm_spi_init+0xe4>)
    34da:	4b2f      	ldr	r3, [pc, #188]	; (3598 <nm_spi_init+0xec>)
    34dc:	4798      	blx	r3
    34de:	1e04      	subs	r4, r0, #0
    34e0:	d03a      	beq.n	3558 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    34e2:	2201      	movs	r2, #1
    34e4:	4b29      	ldr	r3, [pc, #164]	; (358c <nm_spi_init+0xe0>)
    34e6:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    34e8:	a901      	add	r1, sp, #4
    34ea:	2080      	movs	r0, #128	; 0x80
    34ec:	0140      	lsls	r0, r0, #5
    34ee:	4b29      	ldr	r3, [pc, #164]	; (3594 <nm_spi_init+0xe8>)
    34f0:	4798      	blx	r3
    34f2:	2800      	cmp	r0, #0
    34f4:	d03c      	beq.n	3570 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    34f6:	4c26      	ldr	r4, [pc, #152]	; (3590 <nm_spi_init+0xe4>)
    34f8:	0020      	movs	r0, r4
    34fa:	4b28      	ldr	r3, [pc, #160]	; (359c <nm_spi_init+0xf0>)
    34fc:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    34fe:	2370      	movs	r3, #112	; 0x70
    3500:	0001      	movs	r1, r0
    3502:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    3504:	2050      	movs	r0, #80	; 0x50
    3506:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    3508:	0020      	movs	r0, r4
    350a:	4b25      	ldr	r3, [pc, #148]	; (35a0 <nm_spi_init+0xf4>)
    350c:	4798      	blx	r3
	return M2M_SUCCESS;
    350e:	2400      	movs	r4, #0
}
    3510:	0020      	movs	r0, r4
    3512:	b002      	add	sp, #8
    3514:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    3516:	2201      	movs	r2, #1
    3518:	4b1c      	ldr	r3, [pc, #112]	; (358c <nm_spi_init+0xe0>)
    351a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    351c:	2298      	movs	r2, #152	; 0x98
    351e:	00d2      	lsls	r2, r2, #3
    3520:	4920      	ldr	r1, [pc, #128]	; (35a4 <nm_spi_init+0xf8>)
    3522:	4821      	ldr	r0, [pc, #132]	; (35a8 <nm_spi_init+0xfc>)
    3524:	4b21      	ldr	r3, [pc, #132]	; (35ac <nm_spi_init+0x100>)
    3526:	4798      	blx	r3
    3528:	4821      	ldr	r0, [pc, #132]	; (35b0 <nm_spi_init+0x104>)
    352a:	4b22      	ldr	r3, [pc, #136]	; (35b4 <nm_spi_init+0x108>)
    352c:	4798      	blx	r3
    352e:	200d      	movs	r0, #13
    3530:	4b21      	ldr	r3, [pc, #132]	; (35b8 <nm_spi_init+0x10c>)
    3532:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    3534:	4669      	mov	r1, sp
    3536:	4816      	ldr	r0, [pc, #88]	; (3590 <nm_spi_init+0xe4>)
    3538:	4b16      	ldr	r3, [pc, #88]	; (3594 <nm_spi_init+0xe8>)
    353a:	4798      	blx	r3
    353c:	1e04      	subs	r4, r0, #0
    353e:	d1c1      	bne.n	34c4 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    3540:	4a1e      	ldr	r2, [pc, #120]	; (35bc <nm_spi_init+0x110>)
    3542:	4918      	ldr	r1, [pc, #96]	; (35a4 <nm_spi_init+0xf8>)
    3544:	4818      	ldr	r0, [pc, #96]	; (35a8 <nm_spi_init+0xfc>)
    3546:	4b19      	ldr	r3, [pc, #100]	; (35ac <nm_spi_init+0x100>)
    3548:	4798      	blx	r3
    354a:	481d      	ldr	r0, [pc, #116]	; (35c0 <nm_spi_init+0x114>)
    354c:	4b19      	ldr	r3, [pc, #100]	; (35b4 <nm_spi_init+0x108>)
    354e:	4798      	blx	r3
    3550:	200d      	movs	r0, #13
    3552:	4b19      	ldr	r3, [pc, #100]	; (35b8 <nm_spi_init+0x10c>)
    3554:	4798      	blx	r3
			return 0;
    3556:	e7db      	b.n	3510 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    3558:	4a1a      	ldr	r2, [pc, #104]	; (35c4 <nm_spi_init+0x118>)
    355a:	4912      	ldr	r1, [pc, #72]	; (35a4 <nm_spi_init+0xf8>)
    355c:	4812      	ldr	r0, [pc, #72]	; (35a8 <nm_spi_init+0xfc>)
    355e:	4b13      	ldr	r3, [pc, #76]	; (35ac <nm_spi_init+0x100>)
    3560:	4798      	blx	r3
    3562:	4819      	ldr	r0, [pc, #100]	; (35c8 <nm_spi_init+0x11c>)
    3564:	4b13      	ldr	r3, [pc, #76]	; (35b4 <nm_spi_init+0x108>)
    3566:	4798      	blx	r3
    3568:	200d      	movs	r0, #13
    356a:	4b13      	ldr	r3, [pc, #76]	; (35b8 <nm_spi_init+0x10c>)
    356c:	4798      	blx	r3
			return 0;
    356e:	e7cf      	b.n	3510 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    3570:	4a16      	ldr	r2, [pc, #88]	; (35cc <nm_spi_init+0x120>)
    3572:	490c      	ldr	r1, [pc, #48]	; (35a4 <nm_spi_init+0xf8>)
    3574:	480c      	ldr	r0, [pc, #48]	; (35a8 <nm_spi_init+0xfc>)
    3576:	4b0d      	ldr	r3, [pc, #52]	; (35ac <nm_spi_init+0x100>)
    3578:	4798      	blx	r3
    357a:	4815      	ldr	r0, [pc, #84]	; (35d0 <nm_spi_init+0x124>)
    357c:	4b0d      	ldr	r3, [pc, #52]	; (35b4 <nm_spi_init+0x108>)
    357e:	4798      	blx	r3
    3580:	200d      	movs	r0, #13
    3582:	4b0d      	ldr	r3, [pc, #52]	; (35b8 <nm_spi_init+0x10c>)
    3584:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    3586:	2406      	movs	r4, #6
    3588:	4264      	negs	r4, r4
    358a:	e7c1      	b.n	3510 <nm_spi_init+0x64>
    358c:	200003d0 	.word	0x200003d0
    3590:	0000e824 	.word	0x0000e824
    3594:	000032cd 	.word	0x000032cd
    3598:	000031bd 	.word	0x000031bd
    359c:	00003469 	.word	0x00003469
    35a0:	00003495 	.word	0x00003495
    35a4:	0000dc94 	.word	0x0000dc94
    35a8:	0000d550 	.word	0x0000d550
    35ac:	0000be51 	.word	0x0000be51
    35b0:	0000dda0 	.word	0x0000dda0
    35b4:	0000bf6d 	.word	0x0000bf6d
    35b8:	0000be85 	.word	0x0000be85
    35bc:	000004c3 	.word	0x000004c3
    35c0:	0000ddf0 	.word	0x0000ddf0
    35c4:	000004cd 	.word	0x000004cd
    35c8:	0000de1c 	.word	0x0000de1c
    35cc:	000004d7 	.word	0x000004d7
    35d0:	0000de50 	.word	0x0000de50

000035d4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    35d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    35d6:	46de      	mov	lr, fp
    35d8:	4657      	mov	r7, sl
    35da:	464e      	mov	r6, r9
    35dc:	4645      	mov	r5, r8
    35de:	b5e0      	push	{r5, r6, r7, lr}
    35e0:	b087      	sub	sp, #28
    35e2:	9002      	str	r0, [sp, #8]
    35e4:	9103      	str	r1, [sp, #12]
    35e6:	0016      	movs	r6, r2
    35e8:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    35ea:	2300      	movs	r3, #0
    35ec:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    35ee:	2400      	movs	r4, #0
    35f0:	4b3e      	ldr	r3, [pc, #248]	; (36ec <nm_spi_read_block+0x118>)
    35f2:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    35f4:	46a9      	mov	r9, r5
    35f6:	e037      	b.n	3668 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    35f8:	2301      	movs	r3, #1
    35fa:	469b      	mov	fp, r3
		size = 2;
    35fc:	3601      	adds	r6, #1
    35fe:	e035      	b.n	366c <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    3600:	20c8      	movs	r0, #200	; 0xc8
    3602:	4b3b      	ldr	r3, [pc, #236]	; (36f0 <nm_spi_read_block+0x11c>)
    3604:	4798      	blx	r3
	if (result != N_OK) {
    3606:	2801      	cmp	r0, #1
    3608:	d045      	beq.n	3696 <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    360a:	4a3a      	ldr	r2, [pc, #232]	; (36f4 <nm_spi_read_block+0x120>)
    360c:	493a      	ldr	r1, [pc, #232]	; (36f8 <nm_spi_read_block+0x124>)
    360e:	483b      	ldr	r0, [pc, #236]	; (36fc <nm_spi_read_block+0x128>)
    3610:	4f3b      	ldr	r7, [pc, #236]	; (3700 <nm_spi_read_block+0x12c>)
    3612:	47b8      	blx	r7
    3614:	9902      	ldr	r1, [sp, #8]
    3616:	483b      	ldr	r0, [pc, #236]	; (3704 <nm_spi_read_block+0x130>)
    3618:	47b8      	blx	r7
    361a:	200d      	movs	r0, #13
    361c:	4b3a      	ldr	r3, [pc, #232]	; (3708 <nm_spi_read_block+0x134>)
    361e:	4798      	blx	r3
		nm_bsp_sleep(1);
    3620:	2001      	movs	r0, #1
    3622:	4f3a      	ldr	r7, [pc, #232]	; (370c <nm_spi_read_block+0x138>)
    3624:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3626:	9400      	str	r4, [sp, #0]
    3628:	0023      	movs	r3, r4
    362a:	0022      	movs	r2, r4
    362c:	0021      	movs	r1, r4
    362e:	20cf      	movs	r0, #207	; 0xcf
    3630:	4d2e      	ldr	r5, [pc, #184]	; (36ec <nm_spi_read_block+0x118>)
    3632:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    3634:	20cf      	movs	r0, #207	; 0xcf
    3636:	4b2e      	ldr	r3, [pc, #184]	; (36f0 <nm_spi_read_block+0x11c>)
    3638:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    363a:	4a35      	ldr	r2, [pc, #212]	; (3710 <nm_spi_read_block+0x13c>)
    363c:	492e      	ldr	r1, [pc, #184]	; (36f8 <nm_spi_read_block+0x124>)
    363e:	482f      	ldr	r0, [pc, #188]	; (36fc <nm_spi_read_block+0x128>)
    3640:	4b2f      	ldr	r3, [pc, #188]	; (3700 <nm_spi_read_block+0x12c>)
    3642:	469a      	mov	sl, r3
    3644:	4798      	blx	r3
    3646:	0033      	movs	r3, r6
    3648:	9a02      	ldr	r2, [sp, #8]
    364a:	4649      	mov	r1, r9
    364c:	4831      	ldr	r0, [pc, #196]	; (3714 <nm_spi_read_block+0x140>)
    364e:	47d0      	blx	sl
    3650:	200d      	movs	r0, #13
    3652:	4b2d      	ldr	r3, [pc, #180]	; (3708 <nm_spi_read_block+0x134>)
    3654:	4798      	blx	r3
		nm_bsp_sleep(1);
    3656:	2001      	movs	r0, #1
    3658:	47b8      	blx	r7
    365a:	2301      	movs	r3, #1
    365c:	425b      	negs	r3, r3
    365e:	469c      	mov	ip, r3
    3660:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    3662:	464b      	mov	r3, r9
    3664:	2b00      	cmp	r3, #0
    3666:	d038      	beq.n	36da <nm_spi_read_block+0x106>
	if (size == 1)
    3668:	2e01      	cmp	r6, #1
    366a:	d0c5      	beq.n	35f8 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    366c:	9400      	str	r4, [sp, #0]
    366e:	0033      	movs	r3, r6
    3670:	0022      	movs	r2, r4
    3672:	9d02      	ldr	r5, [sp, #8]
    3674:	0029      	movs	r1, r5
    3676:	20c8      	movs	r0, #200	; 0xc8
    3678:	47c0      	blx	r8
	if (result != N_OK) {
    367a:	2801      	cmp	r0, #1
    367c:	d0c0      	beq.n	3600 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    367e:	4a26      	ldr	r2, [pc, #152]	; (3718 <nm_spi_read_block+0x144>)
    3680:	491d      	ldr	r1, [pc, #116]	; (36f8 <nm_spi_read_block+0x124>)
    3682:	481e      	ldr	r0, [pc, #120]	; (36fc <nm_spi_read_block+0x128>)
    3684:	4f1e      	ldr	r7, [pc, #120]	; (3700 <nm_spi_read_block+0x12c>)
    3686:	47b8      	blx	r7
    3688:	0029      	movs	r1, r5
    368a:	4824      	ldr	r0, [pc, #144]	; (371c <nm_spi_read_block+0x148>)
    368c:	47b8      	blx	r7
    368e:	200d      	movs	r0, #13
    3690:	4b1d      	ldr	r3, [pc, #116]	; (3708 <nm_spi_read_block+0x134>)
    3692:	4798      	blx	r3
    3694:	e7c4      	b.n	3620 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    3696:	465b      	mov	r3, fp
    3698:	2b00      	cmp	r3, #0
    369a:	d016      	beq.n	36ca <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    369c:	af05      	add	r7, sp, #20
    369e:	0022      	movs	r2, r4
    36a0:	0031      	movs	r1, r6
    36a2:	0038      	movs	r0, r7
    36a4:	4b1e      	ldr	r3, [pc, #120]	; (3720 <nm_spi_read_block+0x14c>)
    36a6:	4798      	blx	r3
		buf[0] = tmp[0];
    36a8:	783b      	ldrb	r3, [r7, #0]
    36aa:	9a03      	ldr	r2, [sp, #12]
    36ac:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    36ae:	2801      	cmp	r0, #1
    36b0:	d011      	beq.n	36d6 <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    36b2:	4a1c      	ldr	r2, [pc, #112]	; (3724 <nm_spi_read_block+0x150>)
    36b4:	4910      	ldr	r1, [pc, #64]	; (36f8 <nm_spi_read_block+0x124>)
    36b6:	4811      	ldr	r0, [pc, #68]	; (36fc <nm_spi_read_block+0x128>)
    36b8:	4b11      	ldr	r3, [pc, #68]	; (3700 <nm_spi_read_block+0x12c>)
    36ba:	4798      	blx	r3
    36bc:	481a      	ldr	r0, [pc, #104]	; (3728 <nm_spi_read_block+0x154>)
    36be:	4b1b      	ldr	r3, [pc, #108]	; (372c <nm_spi_read_block+0x158>)
    36c0:	4798      	blx	r3
    36c2:	200d      	movs	r0, #13
    36c4:	4b10      	ldr	r3, [pc, #64]	; (3708 <nm_spi_read_block+0x134>)
    36c6:	4798      	blx	r3
    36c8:	e7aa      	b.n	3620 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    36ca:	0022      	movs	r2, r4
    36cc:	0031      	movs	r1, r6
    36ce:	9803      	ldr	r0, [sp, #12]
    36d0:	4b13      	ldr	r3, [pc, #76]	; (3720 <nm_spi_read_block+0x14c>)
    36d2:	4798      	blx	r3
    36d4:	e7eb      	b.n	36ae <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    36d6:	2000      	movs	r0, #0
    36d8:	e001      	b.n	36de <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    36da:	2006      	movs	r0, #6
    36dc:	4240      	negs	r0, r0

	return s8Ret;
}
    36de:	b007      	add	sp, #28
    36e0:	bc3c      	pop	{r2, r3, r4, r5}
    36e2:	4690      	mov	r8, r2
    36e4:	4699      	mov	r9, r3
    36e6:	46a2      	mov	sl, r4
    36e8:	46ab      	mov	fp, r5
    36ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36ec:	00002e05 	.word	0x00002e05
    36f0:	00002fa5 	.word	0x00002fa5
    36f4:	0000045c 	.word	0x0000045c
    36f8:	0000dc88 	.word	0x0000dc88
    36fc:	0000d550 	.word	0x0000d550
    3700:	0000be51 	.word	0x0000be51
    3704:	0000dea4 	.word	0x0000dea4
    3708:	0000be85 	.word	0x0000be85
    370c:	000012c5 	.word	0x000012c5
    3710:	0000047d 	.word	0x0000047d
    3714:	0000df04 	.word	0x0000df04
    3718:	00000456 	.word	0x00000456
    371c:	0000de74 	.word	0x0000de74
    3720:	00003079 	.word	0x00003079
    3724:	0000046c 	.word	0x0000046c
    3728:	0000dedc 	.word	0x0000dedc
    372c:	0000bf6d 	.word	0x0000bf6d

00003730 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3730:	b5f0      	push	{r4, r5, r6, r7, lr}
    3732:	46de      	mov	lr, fp
    3734:	4647      	mov	r7, r8
    3736:	b580      	push	{r7, lr}
    3738:	b089      	sub	sp, #36	; 0x24
    373a:	9004      	str	r0, [sp, #16]
    373c:	468b      	mov	fp, r1
    373e:	9203      	str	r2, [sp, #12]
    3740:	260a      	movs	r6, #10
    3742:	2780      	movs	r7, #128	; 0x80
    3744:	01bf      	lsls	r7, r7, #6
    3746:	466b      	mov	r3, sp
    3748:	82df      	strh	r7, [r3, #22]
    374a:	0035      	movs	r5, r6
    374c:	e02d      	b.n	37aa <nm_spi_write_block+0x7a>
		size = 2;
    374e:	3301      	adds	r3, #1
    3750:	9303      	str	r3, [sp, #12]
    3752:	e02d      	b.n	37b0 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3754:	4a82      	ldr	r2, [pc, #520]	; (3960 <nm_spi_write_block+0x230>)
    3756:	4983      	ldr	r1, [pc, #524]	; (3964 <nm_spi_write_block+0x234>)
    3758:	4883      	ldr	r0, [pc, #524]	; (3968 <nm_spi_write_block+0x238>)
    375a:	4c84      	ldr	r4, [pc, #528]	; (396c <nm_spi_write_block+0x23c>)
    375c:	47a0      	blx	r4
    375e:	0031      	movs	r1, r6
    3760:	4883      	ldr	r0, [pc, #524]	; (3970 <nm_spi_write_block+0x240>)
    3762:	47a0      	blx	r4
    3764:	200d      	movs	r0, #13
    3766:	4b83      	ldr	r3, [pc, #524]	; (3974 <nm_spi_write_block+0x244>)
    3768:	4798      	blx	r3
		nm_bsp_sleep(1);
    376a:	2001      	movs	r0, #1
    376c:	4c82      	ldr	r4, [pc, #520]	; (3978 <nm_spi_write_block+0x248>)
    376e:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3770:	2300      	movs	r3, #0
    3772:	9300      	str	r3, [sp, #0]
    3774:	2200      	movs	r2, #0
    3776:	2100      	movs	r1, #0
    3778:	20cf      	movs	r0, #207	; 0xcf
    377a:	4e80      	ldr	r6, [pc, #512]	; (397c <nm_spi_write_block+0x24c>)
    377c:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    377e:	20cf      	movs	r0, #207	; 0xcf
    3780:	4b7f      	ldr	r3, [pc, #508]	; (3980 <nm_spi_write_block+0x250>)
    3782:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    3784:	4a7f      	ldr	r2, [pc, #508]	; (3984 <nm_spi_write_block+0x254>)
    3786:	4977      	ldr	r1, [pc, #476]	; (3964 <nm_spi_write_block+0x234>)
    3788:	4877      	ldr	r0, [pc, #476]	; (3968 <nm_spi_write_block+0x238>)
    378a:	4e78      	ldr	r6, [pc, #480]	; (396c <nm_spi_write_block+0x23c>)
    378c:	47b0      	blx	r6
    378e:	9b03      	ldr	r3, [sp, #12]
    3790:	9a04      	ldr	r2, [sp, #16]
    3792:	0029      	movs	r1, r5
    3794:	487c      	ldr	r0, [pc, #496]	; (3988 <nm_spi_write_block+0x258>)
    3796:	47b0      	blx	r6
    3798:	200d      	movs	r0, #13
    379a:	4b76      	ldr	r3, [pc, #472]	; (3974 <nm_spi_write_block+0x244>)
    379c:	4798      	blx	r3
		nm_bsp_sleep(1);
    379e:	2001      	movs	r0, #1
    37a0:	47a0      	blx	r4
    37a2:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    37a4:	2d00      	cmp	r5, #0
    37a6:	d100      	bne.n	37aa <nm_spi_write_block+0x7a>
    37a8:	e0d2      	b.n	3950 <nm_spi_write_block+0x220>
	if (size == 1)
    37aa:	9b03      	ldr	r3, [sp, #12]
    37ac:	2b01      	cmp	r3, #1
    37ae:	d0ce      	beq.n	374e <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    37b0:	2300      	movs	r3, #0
    37b2:	9300      	str	r3, [sp, #0]
    37b4:	9b03      	ldr	r3, [sp, #12]
    37b6:	2200      	movs	r2, #0
    37b8:	9e04      	ldr	r6, [sp, #16]
    37ba:	0031      	movs	r1, r6
    37bc:	20c7      	movs	r0, #199	; 0xc7
    37be:	4c6f      	ldr	r4, [pc, #444]	; (397c <nm_spi_write_block+0x24c>)
    37c0:	47a0      	blx	r4
	if (result != N_OK) {
    37c2:	2801      	cmp	r0, #1
    37c4:	d1c6      	bne.n	3754 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    37c6:	20c7      	movs	r0, #199	; 0xc7
    37c8:	4b6d      	ldr	r3, [pc, #436]	; (3980 <nm_spi_write_block+0x250>)
    37ca:	4798      	blx	r3
	if (result != N_OK) {
    37cc:	2801      	cmp	r0, #1
    37ce:	d00b      	beq.n	37e8 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    37d0:	4a6e      	ldr	r2, [pc, #440]	; (398c <nm_spi_write_block+0x25c>)
    37d2:	4964      	ldr	r1, [pc, #400]	; (3964 <nm_spi_write_block+0x234>)
    37d4:	4864      	ldr	r0, [pc, #400]	; (3968 <nm_spi_write_block+0x238>)
    37d6:	4c65      	ldr	r4, [pc, #404]	; (396c <nm_spi_write_block+0x23c>)
    37d8:	47a0      	blx	r4
    37da:	9904      	ldr	r1, [sp, #16]
    37dc:	486c      	ldr	r0, [pc, #432]	; (3990 <nm_spi_write_block+0x260>)
    37de:	47a0      	blx	r4
    37e0:	200d      	movs	r0, #13
    37e2:	4b64      	ldr	r3, [pc, #400]	; (3974 <nm_spi_write_block+0x244>)
    37e4:	4798      	blx	r3
    37e6:	e7c0      	b.n	376a <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    37e8:	2200      	movs	r2, #0
    37ea:	ab07      	add	r3, sp, #28
    37ec:	801a      	strh	r2, [r3, #0]
    37ee:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    37f0:	2600      	movs	r6, #0
				order = 0x1;
    37f2:	46a8      	mov	r8, r5
    37f4:	0035      	movs	r5, r6
    37f6:	0026      	movs	r6, r4
    37f8:	e021      	b.n	383e <nm_spi_write_block+0x10e>
				order = 0x2;
    37fa:	2300      	movs	r3, #0
    37fc:	42b7      	cmp	r7, r6
    37fe:	415b      	adcs	r3, r3
    3800:	3302      	adds	r3, #2
		cmd |= order;
    3802:	200b      	movs	r0, #11
    3804:	aa04      	add	r2, sp, #16
    3806:	4694      	mov	ip, r2
    3808:	4460      	add	r0, ip
    380a:	2210      	movs	r2, #16
    380c:	4252      	negs	r2, r2
    380e:	4313      	orrs	r3, r2
    3810:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3812:	2101      	movs	r1, #1
    3814:	4b5f      	ldr	r3, [pc, #380]	; (3994 <nm_spi_write_block+0x264>)
    3816:	4798      	blx	r3
    3818:	2800      	cmp	r0, #0
    381a:	d11d      	bne.n	3858 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    381c:	465b      	mov	r3, fp
    381e:	1958      	adds	r0, r3, r5
    3820:	0021      	movs	r1, r4
    3822:	4b5c      	ldr	r3, [pc, #368]	; (3994 <nm_spi_write_block+0x264>)
    3824:	4798      	blx	r3
    3826:	2800      	cmp	r0, #0
    3828:	d12e      	bne.n	3888 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    382a:	4b5b      	ldr	r3, [pc, #364]	; (3998 <nm_spi_write_block+0x268>)
    382c:	781b      	ldrb	r3, [r3, #0]
    382e:	2b00      	cmp	r3, #0
    3830:	d037      	beq.n	38a2 <nm_spi_write_block+0x172>
		ix += nbytes;
    3832:	1965      	adds	r5, r4, r5
    3834:	b22d      	sxth	r5, r5
		sz -= nbytes;
    3836:	1b36      	subs	r6, r6, r4
    3838:	b2b6      	uxth	r6, r6
	} while (sz);
    383a:	2e00      	cmp	r6, #0
    383c:	d052      	beq.n	38e4 <nm_spi_write_block+0x1b4>
    383e:	1c34      	adds	r4, r6, #0
    3840:	42be      	cmp	r6, r7
    3842:	d901      	bls.n	3848 <nm_spi_write_block+0x118>
    3844:	466b      	mov	r3, sp
    3846:	8adc      	ldrh	r4, [r3, #22]
    3848:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    384a:	2d00      	cmp	r5, #0
    384c:	d1d5      	bne.n	37fa <nm_spi_write_block+0xca>
				order = 0x3;
    384e:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3850:	42be      	cmp	r6, r7
    3852:	d9d6      	bls.n	3802 <nm_spi_write_block+0xd2>
				order = 0x1;
    3854:	3b02      	subs	r3, #2
    3856:	e7d4      	b.n	3802 <nm_spi_write_block+0xd2>
    3858:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    385a:	4a50      	ldr	r2, [pc, #320]	; (399c <nm_spi_write_block+0x26c>)
    385c:	4950      	ldr	r1, [pc, #320]	; (39a0 <nm_spi_write_block+0x270>)
    385e:	4842      	ldr	r0, [pc, #264]	; (3968 <nm_spi_write_block+0x238>)
    3860:	4b42      	ldr	r3, [pc, #264]	; (396c <nm_spi_write_block+0x23c>)
    3862:	4798      	blx	r3
    3864:	484f      	ldr	r0, [pc, #316]	; (39a4 <nm_spi_write_block+0x274>)
    3866:	4b50      	ldr	r3, [pc, #320]	; (39a8 <nm_spi_write_block+0x278>)
    3868:	4798      	blx	r3
    386a:	200d      	movs	r0, #13
    386c:	4b41      	ldr	r3, [pc, #260]	; (3974 <nm_spi_write_block+0x244>)
    386e:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3870:	4a4e      	ldr	r2, [pc, #312]	; (39ac <nm_spi_write_block+0x27c>)
    3872:	493c      	ldr	r1, [pc, #240]	; (3964 <nm_spi_write_block+0x234>)
    3874:	483c      	ldr	r0, [pc, #240]	; (3968 <nm_spi_write_block+0x238>)
    3876:	4b3d      	ldr	r3, [pc, #244]	; (396c <nm_spi_write_block+0x23c>)
    3878:	4798      	blx	r3
    387a:	484d      	ldr	r0, [pc, #308]	; (39b0 <nm_spi_write_block+0x280>)
    387c:	4b4a      	ldr	r3, [pc, #296]	; (39a8 <nm_spi_write_block+0x278>)
    387e:	4798      	blx	r3
    3880:	200d      	movs	r0, #13
    3882:	4b3c      	ldr	r3, [pc, #240]	; (3974 <nm_spi_write_block+0x244>)
    3884:	4798      	blx	r3
    3886:	e770      	b.n	376a <nm_spi_write_block+0x3a>
    3888:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    388a:	4a4a      	ldr	r2, [pc, #296]	; (39b4 <nm_spi_write_block+0x284>)
    388c:	4944      	ldr	r1, [pc, #272]	; (39a0 <nm_spi_write_block+0x270>)
    388e:	4836      	ldr	r0, [pc, #216]	; (3968 <nm_spi_write_block+0x238>)
    3890:	4b36      	ldr	r3, [pc, #216]	; (396c <nm_spi_write_block+0x23c>)
    3892:	4798      	blx	r3
    3894:	4848      	ldr	r0, [pc, #288]	; (39b8 <nm_spi_write_block+0x288>)
    3896:	4b44      	ldr	r3, [pc, #272]	; (39a8 <nm_spi_write_block+0x278>)
    3898:	4798      	blx	r3
    389a:	200d      	movs	r0, #13
    389c:	4b35      	ldr	r3, [pc, #212]	; (3974 <nm_spi_write_block+0x244>)
    389e:	4798      	blx	r3
    38a0:	e7e6      	b.n	3870 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    38a2:	2102      	movs	r1, #2
    38a4:	a807      	add	r0, sp, #28
    38a6:	4b3b      	ldr	r3, [pc, #236]	; (3994 <nm_spi_write_block+0x264>)
    38a8:	4798      	blx	r3
    38aa:	2800      	cmp	r0, #0
    38ac:	d0c1      	beq.n	3832 <nm_spi_write_block+0x102>
    38ae:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    38b0:	22d7      	movs	r2, #215	; 0xd7
    38b2:	0092      	lsls	r2, r2, #2
    38b4:	493a      	ldr	r1, [pc, #232]	; (39a0 <nm_spi_write_block+0x270>)
    38b6:	482c      	ldr	r0, [pc, #176]	; (3968 <nm_spi_write_block+0x238>)
    38b8:	4b2c      	ldr	r3, [pc, #176]	; (396c <nm_spi_write_block+0x23c>)
    38ba:	4798      	blx	r3
    38bc:	483f      	ldr	r0, [pc, #252]	; (39bc <nm_spi_write_block+0x28c>)
    38be:	4b3a      	ldr	r3, [pc, #232]	; (39a8 <nm_spi_write_block+0x278>)
    38c0:	4798      	blx	r3
    38c2:	200d      	movs	r0, #13
    38c4:	4b2b      	ldr	r3, [pc, #172]	; (3974 <nm_spi_write_block+0x244>)
    38c6:	4798      	blx	r3
    38c8:	e7d2      	b.n	3870 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    38ca:	229a      	movs	r2, #154	; 0x9a
    38cc:	0052      	lsls	r2, r2, #1
    38ce:	493c      	ldr	r1, [pc, #240]	; (39c0 <nm_spi_write_block+0x290>)
    38d0:	4825      	ldr	r0, [pc, #148]	; (3968 <nm_spi_write_block+0x238>)
    38d2:	4b26      	ldr	r3, [pc, #152]	; (396c <nm_spi_write_block+0x23c>)
    38d4:	4798      	blx	r3
    38d6:	483b      	ldr	r0, [pc, #236]	; (39c4 <nm_spi_write_block+0x294>)
    38d8:	4b33      	ldr	r3, [pc, #204]	; (39a8 <nm_spi_write_block+0x278>)
    38da:	4798      	blx	r3
    38dc:	200d      	movs	r0, #13
    38de:	4b25      	ldr	r3, [pc, #148]	; (3974 <nm_spi_write_block+0x244>)
    38e0:	4798      	blx	r3
    38e2:	e027      	b.n	3934 <nm_spi_write_block+0x204>
    38e4:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    38e6:	4b2c      	ldr	r3, [pc, #176]	; (3998 <nm_spi_write_block+0x268>)
    38e8:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    38ea:	1e63      	subs	r3, r4, #1
    38ec:	419c      	sbcs	r4, r3
    38ee:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    38f0:	b2a1      	uxth	r1, r4
    38f2:	a807      	add	r0, sp, #28
    38f4:	4b34      	ldr	r3, [pc, #208]	; (39c8 <nm_spi_write_block+0x298>)
    38f6:	4798      	blx	r3
    38f8:	2800      	cmp	r0, #0
    38fa:	d1e6      	bne.n	38ca <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    38fc:	ab08      	add	r3, sp, #32
    38fe:	191b      	adds	r3, r3, r4
    3900:	3b05      	subs	r3, #5
    3902:	781b      	ldrb	r3, [r3, #0]
    3904:	2b00      	cmp	r3, #0
    3906:	d106      	bne.n	3916 <nm_spi_write_block+0x1e6>
    3908:	ab08      	add	r3, sp, #32
    390a:	469c      	mov	ip, r3
    390c:	4464      	add	r4, ip
    390e:	3c06      	subs	r4, #6
    3910:	7823      	ldrb	r3, [r4, #0]
    3912:	2bc3      	cmp	r3, #195	; 0xc3
    3914:	d01a      	beq.n	394c <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    3916:	223c      	movs	r2, #60	; 0x3c
    3918:	32ff      	adds	r2, #255	; 0xff
    391a:	4929      	ldr	r1, [pc, #164]	; (39c0 <nm_spi_write_block+0x290>)
    391c:	4812      	ldr	r0, [pc, #72]	; (3968 <nm_spi_write_block+0x238>)
    391e:	4c13      	ldr	r4, [pc, #76]	; (396c <nm_spi_write_block+0x23c>)
    3920:	47a0      	blx	r4
    3922:	a907      	add	r1, sp, #28
    3924:	788b      	ldrb	r3, [r1, #2]
    3926:	784a      	ldrb	r2, [r1, #1]
    3928:	7809      	ldrb	r1, [r1, #0]
    392a:	4828      	ldr	r0, [pc, #160]	; (39cc <nm_spi_write_block+0x29c>)
    392c:	47a0      	blx	r4
    392e:	200d      	movs	r0, #13
    3930:	4b10      	ldr	r3, [pc, #64]	; (3974 <nm_spi_write_block+0x244>)
    3932:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3934:	4a26      	ldr	r2, [pc, #152]	; (39d0 <nm_spi_write_block+0x2a0>)
    3936:	490b      	ldr	r1, [pc, #44]	; (3964 <nm_spi_write_block+0x234>)
    3938:	480b      	ldr	r0, [pc, #44]	; (3968 <nm_spi_write_block+0x238>)
    393a:	4b0c      	ldr	r3, [pc, #48]	; (396c <nm_spi_write_block+0x23c>)
    393c:	4798      	blx	r3
    393e:	481c      	ldr	r0, [pc, #112]	; (39b0 <nm_spi_write_block+0x280>)
    3940:	4b19      	ldr	r3, [pc, #100]	; (39a8 <nm_spi_write_block+0x278>)
    3942:	4798      	blx	r3
    3944:	200d      	movs	r0, #13
    3946:	4b0b      	ldr	r3, [pc, #44]	; (3974 <nm_spi_write_block+0x244>)
    3948:	4798      	blx	r3
    394a:	e70e      	b.n	376a <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    394c:	2000      	movs	r0, #0
    394e:	e001      	b.n	3954 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3950:	2006      	movs	r0, #6
    3952:	4240      	negs	r0, r0

	return s8Ret;
}
    3954:	b009      	add	sp, #36	; 0x24
    3956:	bc0c      	pop	{r2, r3}
    3958:	4690      	mov	r8, r2
    395a:	469b      	mov	fp, r3
    395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	000003c3 	.word	0x000003c3
    3964:	0000dc68 	.word	0x0000dc68
    3968:	0000d550 	.word	0x0000d550
    396c:	0000be51 	.word	0x0000be51
    3970:	0000df20 	.word	0x0000df20
    3974:	0000be85 	.word	0x0000be85
    3978:	000012c5 	.word	0x000012c5
    397c:	00002e05 	.word	0x00002e05
    3980:	00002fa5 	.word	0x00002fa5
    3984:	000003eb 	.word	0x000003eb
    3988:	0000df04 	.word	0x0000df04
    398c:	000003c9 	.word	0x000003c9
    3990:	0000df50 	.word	0x0000df50
    3994:	00002de5 	.word	0x00002de5
    3998:	200003d0 	.word	0x200003d0
    399c:	00000349 	.word	0x00000349
    39a0:	0000dc48 	.word	0x0000dc48
    39a4:	0000df88 	.word	0x0000df88
    39a8:	0000bf6d 	.word	0x0000bf6d
    39ac:	000003d9 	.word	0x000003d9
    39b0:	0000e07c 	.word	0x0000e07c
    39b4:	00000352 	.word	0x00000352
    39b8:	0000dfc0 	.word	0x0000dfc0
    39bc:	0000dff4 	.word	0x0000dff4
    39c0:	0000dc1c 	.word	0x0000dc1c
    39c4:	0000e02c 	.word	0x0000e02c
    39c8:	00002f85 	.word	0x00002f85
    39cc:	0000e04c 	.word	0x0000e04c
    39d0:	000003e1 	.word	0x000003e1

000039d4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    39d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39d6:	46de      	mov	lr, fp
    39d8:	4657      	mov	r7, sl
    39da:	464e      	mov	r6, r9
    39dc:	4645      	mov	r5, r8
    39de:	b5e0      	push	{r5, r6, r7, lr}
    39e0:	b085      	sub	sp, #20
    39e2:	9001      	str	r0, [sp, #4]
    39e4:	000e      	movs	r6, r1
    39e6:	9202      	str	r2, [sp, #8]
    39e8:	001d      	movs	r5, r3
    39ea:	ab0e      	add	r3, sp, #56	; 0x38
    39ec:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    39ee:	2c00      	cmp	r4, #0
    39f0:	d064      	beq.n	3abc <Socket_ReadSocketData+0xe8>
    39f2:	0103      	lsls	r3, r0, #4
    39f4:	4935      	ldr	r1, [pc, #212]	; (3acc <Socket_ReadSocketData+0xf8>)
    39f6:	585b      	ldr	r3, [r3, r1]
    39f8:	2b00      	cmp	r3, #0
    39fa:	d05f      	beq.n	3abc <Socket_ReadSocketData+0xe8>
    39fc:	0101      	lsls	r1, r0, #4
    39fe:	4b33      	ldr	r3, [pc, #204]	; (3acc <Socket_ReadSocketData+0xf8>)
    3a00:	185b      	adds	r3, r3, r1
    3a02:	889b      	ldrh	r3, [r3, #4]
    3a04:	b29b      	uxth	r3, r3
    3a06:	2b00      	cmp	r3, #0
    3a08:	d058      	beq.n	3abc <Socket_ReadSocketData+0xe8>
    3a0a:	4b30      	ldr	r3, [pc, #192]	; (3acc <Socket_ReadSocketData+0xf8>)
    3a0c:	185b      	adds	r3, r3, r1
    3a0e:	7a9b      	ldrb	r3, [r3, #10]
    3a10:	2b01      	cmp	r3, #1
    3a12:	d153      	bne.n	3abc <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    3a14:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3a16:	4b2d      	ldr	r3, [pc, #180]	; (3acc <Socket_ReadSocketData+0xf8>)
    3a18:	469b      	mov	fp, r3
    3a1a:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3a1c:	465b      	mov	r3, fp
    3a1e:	220a      	movs	r2, #10
    3a20:	4690      	mov	r8, r2
    3a22:	44d8      	add	r8, fp
    3a24:	468a      	mov	sl, r1
    3a26:	9500      	str	r5, [sp, #0]
    3a28:	9303      	str	r3, [sp, #12]
    3a2a:	e015      	b.n	3a58 <Socket_ReadSocketData+0x84>
    3a2c:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    3a2e:	2301      	movs	r3, #1
    3a30:	e01c      	b.n	3a6c <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3a32:	3301      	adds	r3, #1
    3a34:	2200      	movs	r2, #0
    3a36:	2100      	movs	r1, #0
    3a38:	2000      	movs	r0, #0
    3a3a:	4c25      	ldr	r4, [pc, #148]	; (3ad0 <Socket_ReadSocketData+0xfc>)
    3a3c:	47a0      	blx	r4
    3a3e:	e03d      	b.n	3abc <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    3a40:	4824      	ldr	r0, [pc, #144]	; (3ad4 <Socket_ReadSocketData+0x100>)
    3a42:	4d25      	ldr	r5, [pc, #148]	; (3ad8 <Socket_ReadSocketData+0x104>)
    3a44:	47a8      	blx	r5
    3a46:	0021      	movs	r1, r4
    3a48:	4824      	ldr	r0, [pc, #144]	; (3adc <Socket_ReadSocketData+0x108>)
    3a4a:	47a8      	blx	r5
    3a4c:	200d      	movs	r0, #13
    3a4e:	4b24      	ldr	r3, [pc, #144]	; (3ae0 <Socket_ReadSocketData+0x10c>)
    3a50:	4798      	blx	r3
				break;
    3a52:	e033      	b.n	3abc <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    3a54:	2c00      	cmp	r4, #0
    3a56:	d031      	beq.n	3abc <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    3a58:	465b      	mov	r3, fp
    3a5a:	889b      	ldrh	r3, [r3, #4]
    3a5c:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    3a5e:	b21b      	sxth	r3, r3
    3a60:	2b00      	cmp	r3, #0
    3a62:	dde3      	ble.n	3a2c <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    3a64:	9b03      	ldr	r3, [sp, #12]
    3a66:	889d      	ldrh	r5, [r3, #4]
    3a68:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    3a6a:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    3a6c:	4a17      	ldr	r2, [pc, #92]	; (3acc <Socket_ReadSocketData+0xf8>)
    3a6e:	4651      	mov	r1, sl
    3a70:	5889      	ldr	r1, [r1, r2]
    3a72:	002a      	movs	r2, r5
    3a74:	9800      	ldr	r0, [sp, #0]
    3a76:	4f16      	ldr	r7, [pc, #88]	; (3ad0 <Socket_ReadSocketData+0xfc>)
    3a78:	47b8      	blx	r7
    3a7a:	2800      	cmp	r0, #0
    3a7c:	d1e0      	bne.n	3a40 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    3a7e:	4b13      	ldr	r3, [pc, #76]	; (3acc <Socket_ReadSocketData+0xf8>)
    3a80:	4652      	mov	r2, sl
    3a82:	58d3      	ldr	r3, [r2, r3]
    3a84:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    3a86:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    3a88:	88f3      	ldrh	r3, [r6, #6]
    3a8a:	1b5b      	subs	r3, r3, r5
    3a8c:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    3a8e:	4b15      	ldr	r3, [pc, #84]	; (3ae4 <Socket_ReadSocketData+0x110>)
    3a90:	681b      	ldr	r3, [r3, #0]
    3a92:	2b00      	cmp	r3, #0
    3a94:	d005      	beq.n	3aa2 <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    3a96:	4b13      	ldr	r3, [pc, #76]	; (3ae4 <Socket_ReadSocketData+0x110>)
    3a98:	681b      	ldr	r3, [r3, #0]
    3a9a:	0032      	movs	r2, r6
    3a9c:	9902      	ldr	r1, [sp, #8]
    3a9e:	9801      	ldr	r0, [sp, #4]
    3aa0:	4798      	blx	r3
				u16ReadCount -= u16Read;
    3aa2:	1b64      	subs	r4, r4, r5
    3aa4:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    3aa6:	9b00      	ldr	r3, [sp, #0]
    3aa8:	469c      	mov	ip, r3
    3aaa:	44ac      	add	ip, r5
    3aac:	4663      	mov	r3, ip
    3aae:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    3ab0:	4643      	mov	r3, r8
    3ab2:	781b      	ldrb	r3, [r3, #0]
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d1cd      	bne.n	3a54 <Socket_ReadSocketData+0x80>
    3ab8:	2c00      	cmp	r4, #0
    3aba:	d1ba      	bne.n	3a32 <Socket_ReadSocketData+0x5e>
	}
}
    3abc:	b005      	add	sp, #20
    3abe:	bc3c      	pop	{r2, r3, r4, r5}
    3ac0:	4690      	mov	r8, r2
    3ac2:	4699      	mov	r9, r3
    3ac4:	46a2      	mov	sl, r4
    3ac6:	46ab      	mov	fp, r5
    3ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3aca:	46c0      	nop			; (mov r8, r8)
    3acc:	20000f64 	.word	0x20000f64
    3ad0:	00001d7d 	.word	0x00001d7d
    3ad4:	0000d880 	.word	0x0000d880
    3ad8:	0000be51 	.word	0x0000be51
    3adc:	0000e2e4 	.word	0x0000e2e4
    3ae0:	0000be85 	.word	0x0000be85
    3ae4:	20001014 	.word	0x20001014

00003ae8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    3ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aea:	46d6      	mov	lr, sl
    3aec:	464f      	mov	r7, r9
    3aee:	4646      	mov	r6, r8
    3af0:	b5c0      	push	{r6, r7, lr}
    3af2:	b09a      	sub	sp, #104	; 0x68
    3af4:	000d      	movs	r5, r1
    3af6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    3af8:	2841      	cmp	r0, #65	; 0x41
    3afa:	d039      	beq.n	3b70 <m2m_ip_cb+0x88>
    3afc:	2854      	cmp	r0, #84	; 0x54
    3afe:	d037      	beq.n	3b70 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    3b00:	2842      	cmp	r0, #66	; 0x42
    3b02:	d053      	beq.n	3bac <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    3b04:	2843      	cmp	r0, #67	; 0x43
    3b06:	d06a      	beq.n	3bde <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    3b08:	2844      	cmp	r0, #68	; 0x44
    3b0a:	d100      	bne.n	3b0e <m2m_ip_cb+0x26>
    3b0c:	e0af      	b.n	3c6e <m2m_ip_cb+0x186>
    3b0e:	284b      	cmp	r0, #75	; 0x4b
    3b10:	d100      	bne.n	3b14 <m2m_ip_cb+0x2c>
    3b12:	e0ac      	b.n	3c6e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    3b14:	284a      	cmp	r0, #74	; 0x4a
    3b16:	d100      	bne.n	3b1a <m2m_ip_cb+0x32>
    3b18:	e0cf      	b.n	3cba <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    3b1a:	2846      	cmp	r0, #70	; 0x46
    3b1c:	d100      	bne.n	3b20 <m2m_ip_cb+0x38>
    3b1e:	e0e5      	b.n	3cec <m2m_ip_cb+0x204>
    3b20:	2848      	cmp	r0, #72	; 0x48
    3b22:	d100      	bne.n	3b26 <m2m_ip_cb+0x3e>
    3b24:	e10e      	b.n	3d44 <m2m_ip_cb+0x25c>
    3b26:	284d      	cmp	r0, #77	; 0x4d
    3b28:	d100      	bne.n	3b2c <m2m_ip_cb+0x44>
    3b2a:	e0dc      	b.n	3ce6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3b2c:	2845      	cmp	r0, #69	; 0x45
    3b2e:	d100      	bne.n	3b32 <m2m_ip_cb+0x4a>
    3b30:	e12c      	b.n	3d8c <m2m_ip_cb+0x2a4>
    3b32:	2847      	cmp	r0, #71	; 0x47
    3b34:	d100      	bne.n	3b38 <m2m_ip_cb+0x50>
    3b36:	e14d      	b.n	3dd4 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3b38:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    3b3a:	284c      	cmp	r0, #76	; 0x4c
    3b3c:	d100      	bne.n	3b40 <m2m_ip_cb+0x58>
    3b3e:	e126      	b.n	3d8e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    3b40:	2852      	cmp	r0, #82	; 0x52
    3b42:	d12d      	bne.n	3ba0 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    3b44:	2301      	movs	r3, #1
    3b46:	2214      	movs	r2, #20
    3b48:	a909      	add	r1, sp, #36	; 0x24
    3b4a:	0020      	movs	r0, r4
    3b4c:	4ca2      	ldr	r4, [pc, #648]	; (3dd8 <m2m_ip_cb+0x2f0>)
    3b4e:	47a0      	blx	r4
    3b50:	2800      	cmp	r0, #0
    3b52:	d125      	bne.n	3ba0 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    3b54:	4ba1      	ldr	r3, [pc, #644]	; (3ddc <m2m_ip_cb+0x2f4>)
    3b56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b58:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    3b5a:	681b      	ldr	r3, [r3, #0]
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	d01f      	beq.n	3ba0 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    3b60:	4b9e      	ldr	r3, [pc, #632]	; (3ddc <m2m_ip_cb+0x2f4>)
    3b62:	681c      	ldr	r4, [r3, #0]
    3b64:	ab09      	add	r3, sp, #36	; 0x24
    3b66:	7c1a      	ldrb	r2, [r3, #16]
    3b68:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b6c:	47a0      	blx	r4
			}
		}
	}
}
    3b6e:	e017      	b.n	3ba0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    3b70:	2300      	movs	r3, #0
    3b72:	2204      	movs	r2, #4
    3b74:	a909      	add	r1, sp, #36	; 0x24
    3b76:	0020      	movs	r0, r4
    3b78:	4c97      	ldr	r4, [pc, #604]	; (3dd8 <m2m_ip_cb+0x2f0>)
    3b7a:	47a0      	blx	r4
    3b7c:	2800      	cmp	r0, #0
    3b7e:	d10f      	bne.n	3ba0 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    3b80:	ab09      	add	r3, sp, #36	; 0x24
    3b82:	785a      	ldrb	r2, [r3, #1]
    3b84:	ab05      	add	r3, sp, #20
    3b86:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3b88:	4b95      	ldr	r3, [pc, #596]	; (3de0 <m2m_ip_cb+0x2f8>)
    3b8a:	681b      	ldr	r3, [r3, #0]
    3b8c:	2b00      	cmp	r3, #0
    3b8e:	d007      	beq.n	3ba0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    3b90:	4b93      	ldr	r3, [pc, #588]	; (3de0 <m2m_ip_cb+0x2f8>)
    3b92:	681b      	ldr	r3, [r3, #0]
    3b94:	aa09      	add	r2, sp, #36	; 0x24
    3b96:	2000      	movs	r0, #0
    3b98:	5610      	ldrsb	r0, [r2, r0]
    3b9a:	aa05      	add	r2, sp, #20
    3b9c:	2101      	movs	r1, #1
    3b9e:	4798      	blx	r3
}
    3ba0:	b01a      	add	sp, #104	; 0x68
    3ba2:	bc1c      	pop	{r2, r3, r4}
    3ba4:	4690      	mov	r8, r2
    3ba6:	4699      	mov	r9, r3
    3ba8:	46a2      	mov	sl, r4
    3baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    3bac:	2300      	movs	r3, #0
    3bae:	2204      	movs	r2, #4
    3bb0:	a909      	add	r1, sp, #36	; 0x24
    3bb2:	0020      	movs	r0, r4
    3bb4:	4c88      	ldr	r4, [pc, #544]	; (3dd8 <m2m_ip_cb+0x2f0>)
    3bb6:	47a0      	blx	r4
    3bb8:	2800      	cmp	r0, #0
    3bba:	d1f1      	bne.n	3ba0 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    3bbc:	ab09      	add	r3, sp, #36	; 0x24
    3bbe:	785a      	ldrb	r2, [r3, #1]
    3bc0:	ab05      	add	r3, sp, #20
    3bc2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    3bc4:	4b86      	ldr	r3, [pc, #536]	; (3de0 <m2m_ip_cb+0x2f8>)
    3bc6:	681b      	ldr	r3, [r3, #0]
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d0e9      	beq.n	3ba0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    3bcc:	4b84      	ldr	r3, [pc, #528]	; (3de0 <m2m_ip_cb+0x2f8>)
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	aa09      	add	r2, sp, #36	; 0x24
    3bd2:	2000      	movs	r0, #0
    3bd4:	5610      	ldrsb	r0, [r2, r0]
    3bd6:	aa05      	add	r2, sp, #20
    3bd8:	2102      	movs	r1, #2
    3bda:	4798      	blx	r3
    3bdc:	e7e0      	b.n	3ba0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    3bde:	2300      	movs	r3, #0
    3be0:	220c      	movs	r2, #12
    3be2:	a905      	add	r1, sp, #20
    3be4:	0020      	movs	r0, r4
    3be6:	4c7c      	ldr	r4, [pc, #496]	; (3dd8 <m2m_ip_cb+0x2f0>)
    3be8:	47a0      	blx	r4
    3bea:	2800      	cmp	r0, #0
    3bec:	d1d8      	bne.n	3ba0 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    3bee:	ab05      	add	r3, sp, #20
    3bf0:	2209      	movs	r2, #9
    3bf2:	569a      	ldrsb	r2, [r3, r2]
    3bf4:	2a00      	cmp	r2, #0
    3bf6:	db24      	blt.n	3c42 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    3bf8:	0018      	movs	r0, r3
    3bfa:	2108      	movs	r1, #8
    3bfc:	5659      	ldrsb	r1, [r3, r1]
    3bfe:	4b79      	ldr	r3, [pc, #484]	; (3de4 <m2m_ip_cb+0x2fc>)
    3c00:	0109      	lsls	r1, r1, #4
    3c02:	1859      	adds	r1, r3, r1
    3c04:	7ac9      	ldrb	r1, [r1, #11]
    3c06:	b2c9      	uxtb	r1, r1
    3c08:	0114      	lsls	r4, r2, #4
    3c0a:	191b      	adds	r3, r3, r4
    3c0c:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    3c0e:	2101      	movs	r1, #1
    3c10:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3c12:	8941      	ldrh	r1, [r0, #10]
    3c14:	3908      	subs	r1, #8
    3c16:	b289      	uxth	r1, r1
    3c18:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    3c1a:	4973      	ldr	r1, [pc, #460]	; (3de8 <m2m_ip_cb+0x300>)
    3c1c:	880b      	ldrh	r3, [r1, #0]
    3c1e:	3301      	adds	r3, #1
    3c20:	b29b      	uxth	r3, r3
    3c22:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    3c24:	880b      	ldrh	r3, [r1, #0]
    3c26:	b29b      	uxth	r3, r3
    3c28:	2b00      	cmp	r3, #0
    3c2a:	d103      	bne.n	3c34 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    3c2c:	880b      	ldrh	r3, [r1, #0]
    3c2e:	3301      	adds	r3, #1
    3c30:	b29b      	uxth	r3, r3
    3c32:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    3c34:	4b6c      	ldr	r3, [pc, #432]	; (3de8 <m2m_ip_cb+0x300>)
    3c36:	8819      	ldrh	r1, [r3, #0]
    3c38:	b289      	uxth	r1, r1
    3c3a:	0110      	lsls	r0, r2, #4
    3c3c:	4b69      	ldr	r3, [pc, #420]	; (3de4 <m2m_ip_cb+0x2fc>)
    3c3e:	181b      	adds	r3, r3, r0
    3c40:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    3c42:	ab09      	add	r3, sp, #36	; 0x24
    3c44:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    3c46:	2202      	movs	r2, #2
    3c48:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    3c4a:	aa05      	add	r2, sp, #20
    3c4c:	8851      	ldrh	r1, [r2, #2]
    3c4e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    3c50:	9a06      	ldr	r2, [sp, #24]
    3c52:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    3c54:	4b62      	ldr	r3, [pc, #392]	; (3de0 <m2m_ip_cb+0x2f8>)
    3c56:	681b      	ldr	r3, [r3, #0]
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d0a1      	beq.n	3ba0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    3c5c:	4b60      	ldr	r3, [pc, #384]	; (3de0 <m2m_ip_cb+0x2f8>)
    3c5e:	681b      	ldr	r3, [r3, #0]
    3c60:	aa05      	add	r2, sp, #20
    3c62:	2008      	movs	r0, #8
    3c64:	5610      	ldrsb	r0, [r2, r0]
    3c66:	aa09      	add	r2, sp, #36	; 0x24
    3c68:	2104      	movs	r1, #4
    3c6a:	4798      	blx	r3
    3c6c:	e798      	b.n	3ba0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    3c6e:	2300      	movs	r3, #0
    3c70:	2204      	movs	r2, #4
    3c72:	a909      	add	r1, sp, #36	; 0x24
    3c74:	0020      	movs	r0, r4
    3c76:	4c58      	ldr	r4, [pc, #352]	; (3dd8 <m2m_ip_cb+0x2f0>)
    3c78:	47a0      	blx	r4
    3c7a:	2800      	cmp	r0, #0
    3c7c:	d000      	beq.n	3c80 <m2m_ip_cb+0x198>
    3c7e:	e78f      	b.n	3ba0 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    3c80:	ab09      	add	r3, sp, #36	; 0x24
    3c82:	2000      	movs	r0, #0
    3c84:	5618      	ldrsb	r0, [r3, r0]
    3c86:	aa05      	add	r2, sp, #20
    3c88:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    3c8a:	785b      	ldrb	r3, [r3, #1]
    3c8c:	b25b      	sxtb	r3, r3
    3c8e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    3c90:	2b00      	cmp	r3, #0
    3c92:	d107      	bne.n	3ca4 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    3c94:	ab09      	add	r3, sp, #36	; 0x24
    3c96:	885b      	ldrh	r3, [r3, #2]
    3c98:	3b08      	subs	r3, #8
    3c9a:	b29b      	uxth	r3, r3
    3c9c:	0101      	lsls	r1, r0, #4
    3c9e:	4a51      	ldr	r2, [pc, #324]	; (3de4 <m2m_ip_cb+0x2fc>)
    3ca0:	1852      	adds	r2, r2, r1
    3ca2:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    3ca4:	4b4e      	ldr	r3, [pc, #312]	; (3de0 <m2m_ip_cb+0x2f8>)
    3ca6:	681b      	ldr	r3, [r3, #0]
    3ca8:	2b00      	cmp	r3, #0
    3caa:	d100      	bne.n	3cae <m2m_ip_cb+0x1c6>
    3cac:	e778      	b.n	3ba0 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    3cae:	4b4c      	ldr	r3, [pc, #304]	; (3de0 <m2m_ip_cb+0x2f8>)
    3cb0:	681b      	ldr	r3, [r3, #0]
    3cb2:	aa05      	add	r2, sp, #20
    3cb4:	2105      	movs	r1, #5
    3cb6:	4798      	blx	r3
	{
    3cb8:	e772      	b.n	3ba0 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    3cba:	2300      	movs	r3, #0
    3cbc:	2244      	movs	r2, #68	; 0x44
    3cbe:	a909      	add	r1, sp, #36	; 0x24
    3cc0:	0020      	movs	r0, r4
    3cc2:	4c45      	ldr	r4, [pc, #276]	; (3dd8 <m2m_ip_cb+0x2f0>)
    3cc4:	47a0      	blx	r4
    3cc6:	2800      	cmp	r0, #0
    3cc8:	d000      	beq.n	3ccc <m2m_ip_cb+0x1e4>
    3cca:	e769      	b.n	3ba0 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    3ccc:	4b47      	ldr	r3, [pc, #284]	; (3dec <m2m_ip_cb+0x304>)
    3cce:	681b      	ldr	r3, [r3, #0]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d100      	bne.n	3cd6 <m2m_ip_cb+0x1ee>
    3cd4:	e764      	b.n	3ba0 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    3cd6:	4b45      	ldr	r3, [pc, #276]	; (3dec <m2m_ip_cb+0x304>)
    3cd8:	681b      	ldr	r3, [r3, #0]
    3cda:	9a19      	ldr	r2, [sp, #100]	; 0x64
    3cdc:	9203      	str	r2, [sp, #12]
    3cde:	0011      	movs	r1, r2
    3ce0:	a809      	add	r0, sp, #36	; 0x24
    3ce2:	4798      	blx	r3
    3ce4:	e75c      	b.n	3ba0 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    3ce6:	2306      	movs	r3, #6
    3ce8:	469a      	mov	sl, r3
    3cea:	e001      	b.n	3cf0 <m2m_ip_cb+0x208>
    3cec:	2306      	movs	r3, #6
    3cee:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    3cf0:	2300      	movs	r3, #0
    3cf2:	2210      	movs	r2, #16
    3cf4:	a905      	add	r1, sp, #20
    3cf6:	0020      	movs	r0, r4
    3cf8:	4f37      	ldr	r7, [pc, #220]	; (3dd8 <m2m_ip_cb+0x2f0>)
    3cfa:	47b8      	blx	r7
    3cfc:	2800      	cmp	r0, #0
    3cfe:	d000      	beq.n	3d02 <m2m_ip_cb+0x21a>
    3d00:	e74e      	b.n	3ba0 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    3d02:	aa05      	add	r2, sp, #20
    3d04:	200c      	movs	r0, #12
    3d06:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    3d08:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    3d0a:	0107      	lsls	r7, r0, #4
    3d0c:	4935      	ldr	r1, [pc, #212]	; (3de4 <m2m_ip_cb+0x2fc>)
    3d0e:	19c9      	adds	r1, r1, r7
    3d10:	2700      	movs	r7, #0
    3d12:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    3d14:	2608      	movs	r6, #8
    3d16:	5f97      	ldrsh	r7, [r2, r6]
    3d18:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    3d1a:	8957      	ldrh	r7, [r2, #10]
    3d1c:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    3d1e:	af09      	add	r7, sp, #36	; 0x24
    3d20:	8856      	ldrh	r6, [r2, #2]
    3d22:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    3d24:	9a06      	ldr	r2, [sp, #24]
    3d26:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3d28:	88ca      	ldrh	r2, [r1, #6]
    3d2a:	b292      	uxth	r2, r2
    3d2c:	4293      	cmp	r3, r2
    3d2e:	d00c      	beq.n	3d4a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    3d30:	2d10      	cmp	r5, #16
    3d32:	d800      	bhi.n	3d36 <m2m_ip_cb+0x24e>
    3d34:	e734      	b.n	3ba0 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    3d36:	2301      	movs	r3, #1
    3d38:	2200      	movs	r2, #0
    3d3a:	2100      	movs	r1, #0
    3d3c:	2000      	movs	r0, #0
    3d3e:	4c26      	ldr	r4, [pc, #152]	; (3dd8 <m2m_ip_cb+0x2f0>)
    3d40:	47a0      	blx	r4
	{
    3d42:	e72d      	b.n	3ba0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    3d44:	2309      	movs	r3, #9
    3d46:	469a      	mov	sl, r3
    3d48:	e7d2      	b.n	3cf0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    3d4a:	4643      	mov	r3, r8
    3d4c:	2b00      	cmp	r3, #0
    3d4e:	dd01      	ble.n	3d54 <m2m_ip_cb+0x26c>
    3d50:	45a8      	cmp	r8, r5
    3d52:	db0f      	blt.n	3d74 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    3d54:	ab09      	add	r3, sp, #36	; 0x24
    3d56:	4642      	mov	r2, r8
    3d58:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    3d5a:	2300      	movs	r3, #0
    3d5c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    3d5e:	4b20      	ldr	r3, [pc, #128]	; (3de0 <m2m_ip_cb+0x2f8>)
    3d60:	681b      	ldr	r3, [r3, #0]
    3d62:	2b00      	cmp	r3, #0
    3d64:	d100      	bne.n	3d68 <m2m_ip_cb+0x280>
    3d66:	e71b      	b.n	3ba0 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    3d68:	4b1d      	ldr	r3, [pc, #116]	; (3de0 <m2m_ip_cb+0x2f8>)
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	aa09      	add	r2, sp, #36	; 0x24
    3d6e:	4651      	mov	r1, sl
    3d70:	4798      	blx	r3
    3d72:	e715      	b.n	3ba0 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    3d74:	0023      	movs	r3, r4
    3d76:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    3d78:	4642      	mov	r2, r8
    3d7a:	4669      	mov	r1, sp
    3d7c:	818a      	strh	r2, [r1, #12]
    3d7e:	898a      	ldrh	r2, [r1, #12]
    3d80:	9200      	str	r2, [sp, #0]
    3d82:	4652      	mov	r2, sl
    3d84:	0039      	movs	r1, r7
    3d86:	4c1a      	ldr	r4, [pc, #104]	; (3df0 <m2m_ip_cb+0x308>)
    3d88:	47a0      	blx	r4
    3d8a:	e709      	b.n	3ba0 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    3d8c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    3d8e:	2300      	movs	r3, #0
    3d90:	2208      	movs	r2, #8
    3d92:	a909      	add	r1, sp, #36	; 0x24
    3d94:	0020      	movs	r0, r4
    3d96:	4c10      	ldr	r4, [pc, #64]	; (3dd8 <m2m_ip_cb+0x2f0>)
    3d98:	47a0      	blx	r4
    3d9a:	2800      	cmp	r0, #0
    3d9c:	d000      	beq.n	3da0 <m2m_ip_cb+0x2b8>
    3d9e:	e6ff      	b.n	3ba0 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    3da0:	ab09      	add	r3, sp, #36	; 0x24
    3da2:	2000      	movs	r0, #0
    3da4:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    3da6:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    3da8:	8859      	ldrh	r1, [r3, #2]
    3daa:	ab05      	add	r3, sp, #20
    3dac:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    3dae:	0101      	lsls	r1, r0, #4
    3db0:	4b0c      	ldr	r3, [pc, #48]	; (3de4 <m2m_ip_cb+0x2fc>)
    3db2:	185b      	adds	r3, r3, r1
    3db4:	88db      	ldrh	r3, [r3, #6]
    3db6:	b29b      	uxth	r3, r3
    3db8:	429a      	cmp	r2, r3
    3dba:	d000      	beq.n	3dbe <m2m_ip_cb+0x2d6>
    3dbc:	e6f0      	b.n	3ba0 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    3dbe:	4b08      	ldr	r3, [pc, #32]	; (3de0 <m2m_ip_cb+0x2f8>)
    3dc0:	681b      	ldr	r3, [r3, #0]
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d100      	bne.n	3dc8 <m2m_ip_cb+0x2e0>
    3dc6:	e6eb      	b.n	3ba0 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    3dc8:	4b05      	ldr	r3, [pc, #20]	; (3de0 <m2m_ip_cb+0x2f8>)
    3dca:	681b      	ldr	r3, [r3, #0]
    3dcc:	aa05      	add	r2, sp, #20
    3dce:	0029      	movs	r1, r5
    3dd0:	4798      	blx	r3
	{
    3dd2:	e6e5      	b.n	3ba0 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    3dd4:	2508      	movs	r5, #8
    3dd6:	e7da      	b.n	3d8e <m2m_ip_cb+0x2a6>
    3dd8:	00001d7d 	.word	0x00001d7d
    3ddc:	20001018 	.word	0x20001018
    3de0:	20001014 	.word	0x20001014
    3de4:	20000f64 	.word	0x20000f64
    3de8:	200003d2 	.word	0x200003d2
    3dec:	2000101c 	.word	0x2000101c
    3df0:	000039d5 	.word	0x000039d5

00003df4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    3df4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    3df6:	4b0a      	ldr	r3, [pc, #40]	; (3e20 <socketInit+0x2c>)
    3df8:	781b      	ldrb	r3, [r3, #0]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d000      	beq.n	3e00 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    3dfe:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3e00:	22b0      	movs	r2, #176	; 0xb0
    3e02:	2100      	movs	r1, #0
    3e04:	4807      	ldr	r0, [pc, #28]	; (3e24 <socketInit+0x30>)
    3e06:	4b08      	ldr	r3, [pc, #32]	; (3e28 <socketInit+0x34>)
    3e08:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    3e0a:	4908      	ldr	r1, [pc, #32]	; (3e2c <socketInit+0x38>)
    3e0c:	2002      	movs	r0, #2
    3e0e:	4b08      	ldr	r3, [pc, #32]	; (3e30 <socketInit+0x3c>)
    3e10:	4798      	blx	r3
		gbSocketInit	= 1;
    3e12:	2201      	movs	r2, #1
    3e14:	4b02      	ldr	r3, [pc, #8]	; (3e20 <socketInit+0x2c>)
    3e16:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    3e18:	2200      	movs	r2, #0
    3e1a:	4b06      	ldr	r3, [pc, #24]	; (3e34 <socketInit+0x40>)
    3e1c:	801a      	strh	r2, [r3, #0]
}
    3e1e:	e7ee      	b.n	3dfe <socketInit+0xa>
    3e20:	200003d1 	.word	0x200003d1
    3e24:	20000f64 	.word	0x20000f64
    3e28:	00001651 	.word	0x00001651
    3e2c:	00003ae9 	.word	0x00003ae9
    3e30:	00001e65 	.word	0x00001e65
    3e34:	200003d2 	.word	0x200003d2

00003e38 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    3e38:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    3e3a:	22b0      	movs	r2, #176	; 0xb0
    3e3c:	2100      	movs	r1, #0
    3e3e:	4807      	ldr	r0, [pc, #28]	; (3e5c <socketDeinit+0x24>)
    3e40:	4b07      	ldr	r3, [pc, #28]	; (3e60 <socketDeinit+0x28>)
    3e42:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    3e44:	2100      	movs	r1, #0
    3e46:	2002      	movs	r0, #2
    3e48:	4b06      	ldr	r3, [pc, #24]	; (3e64 <socketDeinit+0x2c>)
    3e4a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    3e4c:	2300      	movs	r3, #0
    3e4e:	4a06      	ldr	r2, [pc, #24]	; (3e68 <socketDeinit+0x30>)
    3e50:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    3e52:	4a06      	ldr	r2, [pc, #24]	; (3e6c <socketDeinit+0x34>)
    3e54:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    3e56:	4a06      	ldr	r2, [pc, #24]	; (3e70 <socketDeinit+0x38>)
    3e58:	7013      	strb	r3, [r2, #0]
}
    3e5a:	bd10      	pop	{r4, pc}
    3e5c:	20000f64 	.word	0x20000f64
    3e60:	00001651 	.word	0x00001651
    3e64:	00001e65 	.word	0x00001e65
    3e68:	20001014 	.word	0x20001014
    3e6c:	2000101c 	.word	0x2000101c
    3e70:	200003d1 	.word	0x200003d1

00003e74 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    3e74:	4b02      	ldr	r3, [pc, #8]	; (3e80 <registerSocketCallback+0xc>)
    3e76:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    3e78:	4b02      	ldr	r3, [pc, #8]	; (3e84 <registerSocketCallback+0x10>)
    3e7a:	6019      	str	r1, [r3, #0]
}
    3e7c:	4770      	bx	lr
    3e7e:	46c0      	nop			; (mov r8, r8)
    3e80:	20001014 	.word	0x20001014
    3e84:	2000101c 	.word	0x2000101c

00003e88 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e8a:	46d6      	mov	lr, sl
    3e8c:	4647      	mov	r7, r8
    3e8e:	b580      	push	{r7, lr}
    3e90:	b089      	sub	sp, #36	; 0x24
    3e92:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3e94:	2802      	cmp	r0, #2
    3e96:	d000      	beq.n	3e9a <socket+0x12>
    3e98:	e09c      	b.n	3fd4 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    3e9a:	2901      	cmp	r1, #1
    3e9c:	d00a      	beq.n	3eb4 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    3e9e:	2902      	cmp	r1, #2
    3ea0:	d100      	bne.n	3ea4 <socket+0x1c>
    3ea2:	e070      	b.n	3f86 <socket+0xfe>
	SOCKET					sock = -1;
    3ea4:	2501      	movs	r5, #1
    3ea6:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3ea8:	0028      	movs	r0, r5
    3eaa:	b009      	add	sp, #36	; 0x24
    3eac:	bc0c      	pop	{r2, r3}
    3eae:	4690      	mov	r8, r2
    3eb0:	469a      	mov	sl, r3
    3eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    3eb4:	4c49      	ldr	r4, [pc, #292]	; (3fdc <socket+0x154>)
    3eb6:	7827      	ldrb	r7, [r4, #0]
    3eb8:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3eba:	7826      	ldrb	r6, [r4, #0]
    3ebc:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3ebe:	7820      	ldrb	r0, [r4, #0]
    3ec0:	3001      	adds	r0, #1
    3ec2:	3106      	adds	r1, #6
    3ec4:	4b46      	ldr	r3, [pc, #280]	; (3fe0 <socket+0x158>)
    3ec6:	4798      	blx	r3
    3ec8:	b2c9      	uxtb	r1, r1
    3eca:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3ecc:	0132      	lsls	r2, r6, #4
    3ece:	4b45      	ldr	r3, [pc, #276]	; (3fe4 <socket+0x15c>)
    3ed0:	189b      	adds	r3, r3, r2
    3ed2:	7a9b      	ldrb	r3, [r3, #10]
    3ed4:	2506      	movs	r5, #6
    3ed6:	2b00      	cmp	r3, #0
    3ed8:	d018      	beq.n	3f0c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    3eda:	4e40      	ldr	r6, [pc, #256]	; (3fdc <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3edc:	4b40      	ldr	r3, [pc, #256]	; (3fe0 <socket+0x158>)
    3ede:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3ee0:	4b40      	ldr	r3, [pc, #256]	; (3fe4 <socket+0x15c>)
    3ee2:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    3ee4:	7837      	ldrb	r7, [r6, #0]
    3ee6:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3ee8:	7834      	ldrb	r4, [r6, #0]
    3eea:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3eec:	7830      	ldrb	r0, [r6, #0]
    3eee:	3001      	adds	r0, #1
    3ef0:	2107      	movs	r1, #7
    3ef2:	47d0      	blx	sl
    3ef4:	b2c9      	uxtb	r1, r1
    3ef6:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    3ef8:	0123      	lsls	r3, r4, #4
    3efa:	4443      	add	r3, r8
    3efc:	7a9b      	ldrb	r3, [r3, #10]
    3efe:	2b00      	cmp	r3, #0
    3f00:	d007      	beq.n	3f12 <socket+0x8a>
    3f02:	3d01      	subs	r5, #1
    3f04:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    3f06:	2d00      	cmp	r5, #0
    3f08:	d1ec      	bne.n	3ee4 <socket+0x5c>
    3f0a:	e7cb      	b.n	3ea4 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3f0c:	4b35      	ldr	r3, [pc, #212]	; (3fe4 <socket+0x15c>)
    3f0e:	18d4      	adds	r4, r2, r3
    3f10:	e002      	b.n	3f18 <socket+0x90>
    3f12:	0124      	lsls	r4, r4, #4
    3f14:	4b33      	ldr	r3, [pc, #204]	; (3fe4 <socket+0x15c>)
    3f16:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3f18:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3f1a:	2d00      	cmp	r5, #0
    3f1c:	dbc4      	blt.n	3ea8 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3f1e:	2210      	movs	r2, #16
    3f20:	2100      	movs	r1, #0
    3f22:	0020      	movs	r0, r4
    3f24:	4b30      	ldr	r3, [pc, #192]	; (3fe8 <socket+0x160>)
    3f26:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3f28:	2301      	movs	r3, #1
    3f2a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3f2c:	4a2f      	ldr	r2, [pc, #188]	; (3fec <socket+0x164>)
    3f2e:	8813      	ldrh	r3, [r2, #0]
    3f30:	3301      	adds	r3, #1
    3f32:	b29b      	uxth	r3, r3
    3f34:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    3f36:	8813      	ldrh	r3, [r2, #0]
    3f38:	b29b      	uxth	r3, r3
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d103      	bne.n	3f46 <socket+0xbe>
				++gu16SessionID;
    3f3e:	8813      	ldrh	r3, [r2, #0]
    3f40:	3301      	adds	r3, #1
    3f42:	b29b      	uxth	r3, r3
    3f44:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    3f46:	4e29      	ldr	r6, [pc, #164]	; (3fec <socket+0x164>)
    3f48:	8833      	ldrh	r3, [r6, #0]
    3f4a:	b29b      	uxth	r3, r3
    3f4c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    3f4e:	4828      	ldr	r0, [pc, #160]	; (3ff0 <socket+0x168>)
    3f50:	4f28      	ldr	r7, [pc, #160]	; (3ff4 <socket+0x16c>)
    3f52:	47b8      	blx	r7
    3f54:	8832      	ldrh	r2, [r6, #0]
    3f56:	b292      	uxth	r2, r2
    3f58:	0029      	movs	r1, r5
    3f5a:	4827      	ldr	r0, [pc, #156]	; (3ff8 <socket+0x170>)
    3f5c:	47b8      	blx	r7
    3f5e:	200d      	movs	r0, #13
    3f60:	4b26      	ldr	r3, [pc, #152]	; (3ffc <socket+0x174>)
    3f62:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3f64:	9b05      	ldr	r3, [sp, #20]
    3f66:	07db      	lsls	r3, r3, #31
    3f68:	d59e      	bpl.n	3ea8 <socket+0x20>
				strSSLCreate.sslSock = sock;
    3f6a:	aa07      	add	r2, sp, #28
    3f6c:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    3f6e:	2321      	movs	r3, #33	; 0x21
    3f70:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    3f72:	2300      	movs	r3, #0
    3f74:	9302      	str	r3, [sp, #8]
    3f76:	9301      	str	r3, [sp, #4]
    3f78:	9300      	str	r3, [sp, #0]
    3f7a:	3304      	adds	r3, #4
    3f7c:	2150      	movs	r1, #80	; 0x50
    3f7e:	2002      	movs	r0, #2
    3f80:	4c1f      	ldr	r4, [pc, #124]	; (4000 <socket+0x178>)
    3f82:	47a0      	blx	r4
    3f84:	e790      	b.n	3ea8 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3f86:	4b1f      	ldr	r3, [pc, #124]	; (4004 <socket+0x17c>)
    3f88:	781d      	ldrb	r5, [r3, #0]
    3f8a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3f8c:	781c      	ldrb	r4, [r3, #0]
    3f8e:	0124      	lsls	r4, r4, #4
    3f90:	4a1d      	ldr	r2, [pc, #116]	; (4008 <socket+0x180>)
    3f92:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3f94:	7819      	ldrb	r1, [r3, #0]
    3f96:	3101      	adds	r1, #1
    3f98:	2203      	movs	r2, #3
    3f9a:	400a      	ands	r2, r1
    3f9c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    3f9e:	7aa3      	ldrb	r3, [r4, #10]
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d014      	beq.n	3fce <socket+0x146>
    3fa4:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3fa6:	4917      	ldr	r1, [pc, #92]	; (4004 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3fa8:	4f17      	ldr	r7, [pc, #92]	; (4008 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3faa:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3fac:	780d      	ldrb	r5, [r1, #0]
    3fae:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3fb0:	780c      	ldrb	r4, [r1, #0]
    3fb2:	0124      	lsls	r4, r4, #4
    3fb4:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3fb6:	780b      	ldrb	r3, [r1, #0]
    3fb8:	3301      	adds	r3, #1
    3fba:	4003      	ands	r3, r0
    3fbc:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    3fbe:	7aa3      	ldrb	r3, [r4, #10]
    3fc0:	2b00      	cmp	r3, #0
    3fc2:	d004      	beq.n	3fce <socket+0x146>
    3fc4:	3a01      	subs	r2, #1
    3fc6:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3fc8:	2a00      	cmp	r2, #0
    3fca:	d1ef      	bne.n	3fac <socket+0x124>
    3fcc:	e76a      	b.n	3ea4 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    3fce:	3507      	adds	r5, #7
    3fd0:	b26d      	sxtb	r5, r5
					break;
    3fd2:	e7a2      	b.n	3f1a <socket+0x92>
	SOCKET					sock = -1;
    3fd4:	2501      	movs	r5, #1
    3fd6:	426d      	negs	r5, r5
    3fd8:	e766      	b.n	3ea8 <socket+0x20>
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	200003d4 	.word	0x200003d4
    3fe0:	0000bbdd 	.word	0x0000bbdd
    3fe4:	20000f64 	.word	0x20000f64
    3fe8:	00001651 	.word	0x00001651
    3fec:	200003d2 	.word	0x200003d2
    3ff0:	0000d880 	.word	0x0000d880
    3ff4:	0000be51 	.word	0x0000be51
    3ff8:	0000e310 	.word	0x0000e310
    3ffc:	0000be85 	.word	0x0000be85
    4000:	00001765 	.word	0x00001765
    4004:	200003d5 	.word	0x200003d5
    4008:	20000fd4 	.word	0x20000fd4

0000400c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    400c:	b570      	push	{r4, r5, r6, lr}
    400e:	b088      	sub	sp, #32
    4010:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    4012:	db30      	blt.n	4076 <connect+0x6a>
    4014:	2900      	cmp	r1, #0
    4016:	d031      	beq.n	407c <connect+0x70>
    4018:	0100      	lsls	r0, r0, #4
    401a:	4b1d      	ldr	r3, [pc, #116]	; (4090 <connect+0x84>)
    401c:	181b      	adds	r3, r3, r0
    401e:	7a9b      	ldrb	r3, [r3, #10]
    4020:	2b01      	cmp	r3, #1
    4022:	d12e      	bne.n	4082 <connect+0x76>
    4024:	2a00      	cmp	r2, #0
    4026:	d02f      	beq.n	4088 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    4028:	4b19      	ldr	r3, [pc, #100]	; (4090 <connect+0x84>)
    402a:	181b      	adds	r3, r3, r0
    402c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    402e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    4030:	07db      	lsls	r3, r3, #31
    4032:	d505      	bpl.n	4040 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    4034:	4b16      	ldr	r3, [pc, #88]	; (4090 <connect+0x84>)
    4036:	181b      	adds	r3, r3, r0
    4038:	7ada      	ldrb	r2, [r3, #11]
    403a:	ab05      	add	r3, sp, #20
    403c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    403e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    4040:	ad05      	add	r5, sp, #20
    4042:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    4044:	2208      	movs	r2, #8
    4046:	0028      	movs	r0, r5
    4048:	4b12      	ldr	r3, [pc, #72]	; (4094 <connect+0x88>)
    404a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    404c:	0124      	lsls	r4, r4, #4
    404e:	4b10      	ldr	r3, [pc, #64]	; (4090 <connect+0x84>)
    4050:	191c      	adds	r4, r3, r4
    4052:	88e3      	ldrh	r3, [r4, #6]
    4054:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    4056:	2300      	movs	r3, #0
    4058:	9302      	str	r3, [sp, #8]
    405a:	9301      	str	r3, [sp, #4]
    405c:	9300      	str	r3, [sp, #0]
    405e:	330c      	adds	r3, #12
    4060:	002a      	movs	r2, r5
    4062:	0031      	movs	r1, r6
    4064:	2002      	movs	r0, #2
    4066:	4c0c      	ldr	r4, [pc, #48]	; (4098 <connect+0x8c>)
    4068:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    406a:	2800      	cmp	r0, #0
    406c:	d001      	beq.n	4072 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    406e:	2009      	movs	r0, #9
    4070:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    4072:	b008      	add	sp, #32
    4074:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    4076:	2006      	movs	r0, #6
    4078:	4240      	negs	r0, r0
    407a:	e7fa      	b.n	4072 <connect+0x66>
    407c:	2006      	movs	r0, #6
    407e:	4240      	negs	r0, r0
    4080:	e7f7      	b.n	4072 <connect+0x66>
    4082:	2006      	movs	r0, #6
    4084:	4240      	negs	r0, r0
    4086:	e7f4      	b.n	4072 <connect+0x66>
    4088:	2006      	movs	r0, #6
    408a:	4240      	negs	r0, r0
    408c:	e7f1      	b.n	4072 <connect+0x66>
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	20000f64 	.word	0x20000f64
    4094:	0000163d 	.word	0x0000163d
    4098:	00001765 	.word	0x00001765

0000409c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    409c:	b530      	push	{r4, r5, lr}
    409e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    40a0:	2800      	cmp	r0, #0
    40a2:	db36      	blt.n	4112 <send+0x76>
    40a4:	2900      	cmp	r1, #0
    40a6:	d037      	beq.n	4118 <send+0x7c>
    40a8:	23af      	movs	r3, #175	; 0xaf
    40aa:	00db      	lsls	r3, r3, #3
    40ac:	429a      	cmp	r2, r3
    40ae:	d836      	bhi.n	411e <send+0x82>
    40b0:	0104      	lsls	r4, r0, #4
    40b2:	4b1e      	ldr	r3, [pc, #120]	; (412c <send+0x90>)
    40b4:	191b      	adds	r3, r3, r4
    40b6:	7a9b      	ldrb	r3, [r3, #10]
    40b8:	2b01      	cmp	r3, #1
    40ba:	d133      	bne.n	4124 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    40bc:	ab04      	add	r3, sp, #16
    40be:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    40c0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    40c2:	0025      	movs	r5, r4
    40c4:	4c19      	ldr	r4, [pc, #100]	; (412c <send+0x90>)
    40c6:	1964      	adds	r4, r4, r5
    40c8:	88e4      	ldrh	r4, [r4, #6]
    40ca:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    40cc:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    40ce:	2806      	cmp	r0, #6
    40d0:	dd00      	ble.n	40d4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    40d2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    40d4:	0104      	lsls	r4, r0, #4
    40d6:	4b15      	ldr	r3, [pc, #84]	; (412c <send+0x90>)
    40d8:	191b      	adds	r3, r3, r4
    40da:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    40dc:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    40de:	07e4      	lsls	r4, r4, #31
    40e0:	d505      	bpl.n	40ee <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    40e2:	0100      	lsls	r0, r0, #4
    40e4:	4b11      	ldr	r3, [pc, #68]	; (412c <send+0x90>)
    40e6:	1818      	adds	r0, r3, r0
    40e8:	8905      	ldrh	r5, [r0, #8]
    40ea:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    40ec:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    40ee:	2080      	movs	r0, #128	; 0x80
    40f0:	4318      	orrs	r0, r3
    40f2:	9502      	str	r5, [sp, #8]
    40f4:	9201      	str	r2, [sp, #4]
    40f6:	9100      	str	r1, [sp, #0]
    40f8:	2310      	movs	r3, #16
    40fa:	aa04      	add	r2, sp, #16
    40fc:	0001      	movs	r1, r0
    40fe:	2002      	movs	r0, #2
    4100:	4c0b      	ldr	r4, [pc, #44]	; (4130 <send+0x94>)
    4102:	47a0      	blx	r4
    4104:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    4106:	2800      	cmp	r0, #0
    4108:	d000      	beq.n	410c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    410a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    410c:	0018      	movs	r0, r3
    410e:	b009      	add	sp, #36	; 0x24
    4110:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    4112:	2306      	movs	r3, #6
    4114:	425b      	negs	r3, r3
    4116:	e7f9      	b.n	410c <send+0x70>
    4118:	2306      	movs	r3, #6
    411a:	425b      	negs	r3, r3
    411c:	e7f6      	b.n	410c <send+0x70>
    411e:	2306      	movs	r3, #6
    4120:	425b      	negs	r3, r3
    4122:	e7f3      	b.n	410c <send+0x70>
    4124:	2306      	movs	r3, #6
    4126:	425b      	negs	r3, r3
    4128:	e7f0      	b.n	410c <send+0x70>
    412a:	46c0      	nop			; (mov r8, r8)
    412c:	20000f64 	.word	0x20000f64
    4130:	00001765 	.word	0x00001765

00004134 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    4134:	b530      	push	{r4, r5, lr}
    4136:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    4138:	2800      	cmp	r0, #0
    413a:	db34      	blt.n	41a6 <recv+0x72>
    413c:	2900      	cmp	r1, #0
    413e:	d035      	beq.n	41ac <recv+0x78>
    4140:	2a00      	cmp	r2, #0
    4142:	d036      	beq.n	41b2 <recv+0x7e>
    4144:	0105      	lsls	r5, r0, #4
    4146:	4c1e      	ldr	r4, [pc, #120]	; (41c0 <recv+0x8c>)
    4148:	1964      	adds	r4, r4, r5
    414a:	7aa4      	ldrb	r4, [r4, #10]
    414c:	2c01      	cmp	r4, #1
    414e:	d133      	bne.n	41b8 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    4150:	4c1b      	ldr	r4, [pc, #108]	; (41c0 <recv+0x8c>)
    4152:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    4154:	1964      	adds	r4, r4, r5
    4156:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    4158:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    415a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    415c:	2900      	cmp	r1, #0
    415e:	d11d      	bne.n	419c <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    4160:	2101      	movs	r1, #1
    4162:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4164:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    4166:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4168:	07d2      	lsls	r2, r2, #31
    416a:	d500      	bpl.n	416e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    416c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    416e:	2b00      	cmp	r3, #0
    4170:	d117      	bne.n	41a2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    4172:	3b01      	subs	r3, #1
    4174:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    4176:	aa04      	add	r2, sp, #16
    4178:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    417a:	0100      	lsls	r0, r0, #4
    417c:	4b10      	ldr	r3, [pc, #64]	; (41c0 <recv+0x8c>)
    417e:	1818      	adds	r0, r3, r0
    4180:	88c3      	ldrh	r3, [r0, #6]
    4182:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    4184:	2300      	movs	r3, #0
    4186:	9302      	str	r3, [sp, #8]
    4188:	9301      	str	r3, [sp, #4]
    418a:	9300      	str	r3, [sp, #0]
    418c:	3308      	adds	r3, #8
    418e:	2002      	movs	r0, #2
    4190:	4c0c      	ldr	r4, [pc, #48]	; (41c4 <recv+0x90>)
    4192:	47a0      	blx	r4
    4194:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    4196:	2800      	cmp	r0, #0
    4198:	d000      	beq.n	419c <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    419a:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    419c:	0010      	movs	r0, r2
    419e:	b007      	add	sp, #28
    41a0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    41a2:	9304      	str	r3, [sp, #16]
    41a4:	e7e7      	b.n	4176 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    41a6:	2206      	movs	r2, #6
    41a8:	4252      	negs	r2, r2
    41aa:	e7f7      	b.n	419c <recv+0x68>
    41ac:	2206      	movs	r2, #6
    41ae:	4252      	negs	r2, r2
    41b0:	e7f4      	b.n	419c <recv+0x68>
    41b2:	2206      	movs	r2, #6
    41b4:	4252      	negs	r2, r2
    41b6:	e7f1      	b.n	419c <recv+0x68>
    41b8:	2206      	movs	r2, #6
    41ba:	4252      	negs	r2, r2
    41bc:	e7ee      	b.n	419c <recv+0x68>
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	20000f64 	.word	0x20000f64
    41c4:	00001765 	.word	0x00001765

000041c8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    41c8:	b530      	push	{r4, r5, lr}
    41ca:	b087      	sub	sp, #28
    41cc:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    41ce:	481e      	ldr	r0, [pc, #120]	; (4248 <close+0x80>)
    41d0:	4d1e      	ldr	r5, [pc, #120]	; (424c <close+0x84>)
    41d2:	47a8      	blx	r5
    41d4:	0021      	movs	r1, r4
    41d6:	481e      	ldr	r0, [pc, #120]	; (4250 <close+0x88>)
    41d8:	47a8      	blx	r5
    41da:	200d      	movs	r0, #13
    41dc:	4b1d      	ldr	r3, [pc, #116]	; (4254 <close+0x8c>)
    41de:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    41e0:	2c00      	cmp	r4, #0
    41e2:	db2a      	blt.n	423a <close+0x72>
    41e4:	0122      	lsls	r2, r4, #4
    41e6:	4b1c      	ldr	r3, [pc, #112]	; (4258 <close+0x90>)
    41e8:	189b      	adds	r3, r3, r2
    41ea:	7a9b      	ldrb	r3, [r3, #10]
    41ec:	2b01      	cmp	r3, #1
    41ee:	d127      	bne.n	4240 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    41f0:	a905      	add	r1, sp, #20
    41f2:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    41f4:	4b18      	ldr	r3, [pc, #96]	; (4258 <close+0x90>)
    41f6:	189b      	adds	r3, r3, r2
    41f8:	88da      	ldrh	r2, [r3, #6]
    41fa:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    41fc:	2200      	movs	r2, #0
    41fe:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    4200:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4202:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    4204:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    4206:	07db      	lsls	r3, r3, #31
    4208:	d500      	bpl.n	420c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    420a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    420c:	2300      	movs	r3, #0
    420e:	9302      	str	r3, [sp, #8]
    4210:	9301      	str	r3, [sp, #4]
    4212:	9300      	str	r3, [sp, #0]
    4214:	3304      	adds	r3, #4
    4216:	aa05      	add	r2, sp, #20
    4218:	2002      	movs	r0, #2
    421a:	4d10      	ldr	r5, [pc, #64]	; (425c <close+0x94>)
    421c:	47a8      	blx	r5
    421e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    4220:	d001      	beq.n	4226 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    4222:	2509      	movs	r5, #9
    4224:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    4226:	0124      	lsls	r4, r4, #4
    4228:	480b      	ldr	r0, [pc, #44]	; (4258 <close+0x90>)
    422a:	1820      	adds	r0, r4, r0
    422c:	2210      	movs	r2, #16
    422e:	2100      	movs	r1, #0
    4230:	4b0b      	ldr	r3, [pc, #44]	; (4260 <close+0x98>)
    4232:	4798      	blx	r3
	}
	return s8Ret;
}
    4234:	0028      	movs	r0, r5
    4236:	b007      	add	sp, #28
    4238:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    423a:	2506      	movs	r5, #6
    423c:	426d      	negs	r5, r5
    423e:	e7f9      	b.n	4234 <close+0x6c>
    4240:	2506      	movs	r5, #6
    4242:	426d      	negs	r5, r5
    4244:	e7f6      	b.n	4234 <close+0x6c>
    4246:	46c0      	nop			; (mov r8, r8)
    4248:	0000d880 	.word	0x0000d880
    424c:	0000be51 	.word	0x0000be51
    4250:	0000e2f8 	.word	0x0000e2f8
    4254:	0000be85 	.word	0x0000be85
    4258:	20000f64 	.word	0x20000f64
    425c:	00001765 	.word	0x00001765
    4260:	00001651 	.word	0x00001651

00004264 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    4264:	b570      	push	{r4, r5, r6, lr}
    4266:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    4268:	2300      	movs	r3, #0
    426a:	9301      	str	r3, [sp, #4]
    426c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    426e:	2100      	movs	r1, #0
    4270:	7802      	ldrb	r2, [r0, #0]
    4272:	1c44      	adds	r4, r0, #1
    4274:	3005      	adds	r0, #5
    4276:	000b      	movs	r3, r1
    4278:	e009      	b.n	428e <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    427a:	009d      	lsls	r5, r3, #2
    427c:	195b      	adds	r3, r3, r5
    427e:	005b      	lsls	r3, r3, #1
    4280:	189b      	adds	r3, r3, r2
    4282:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    4284:	0022      	movs	r2, r4
    4286:	3401      	adds	r4, #1
			if(j > 4)
    4288:	42a0      	cmp	r0, r4
    428a:	d00a      	beq.n	42a2 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    428c:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    428e:	2a2e      	cmp	r2, #46	; 0x2e
    4290:	d00a      	beq.n	42a8 <nmi_inet_addr+0x44>
    4292:	2a00      	cmp	r2, #0
    4294:	d00c      	beq.n	42b0 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    4296:	3a30      	subs	r2, #48	; 0x30
    4298:	b2d2      	uxtb	r2, r2
    429a:	2a09      	cmp	r2, #9
    429c:	d9ed      	bls.n	427a <nmi_inet_addr+0x16>
				return 0;
    429e:	2000      	movs	r0, #0
    42a0:	e000      	b.n	42a4 <nmi_inet_addr+0x40>
				return 0;
    42a2:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    42a4:	b002      	add	sp, #8
    42a6:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    42a8:	466a      	mov	r2, sp
    42aa:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    42ac:	0020      	movs	r0, r4
    42ae:	e002      	b.n	42b6 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    42b0:	466a      	mov	r2, sp
    42b2:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    42b4:	0020      	movs	r0, r4
    42b6:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    42b8:	2e04      	cmp	r6, #4
    42ba:	d1d9      	bne.n	4270 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    42bc:	2204      	movs	r2, #4
    42be:	4669      	mov	r1, sp
    42c0:	a801      	add	r0, sp, #4
    42c2:	4b02      	ldr	r3, [pc, #8]	; (42cc <nmi_inet_addr+0x68>)
    42c4:	4798      	blx	r3
	return u32IP;
    42c6:	9801      	ldr	r0, [sp, #4]
    42c8:	e7ec      	b.n	42a4 <nmi_inet_addr+0x40>
    42ca:	46c0      	nop			; (mov r8, r8)
    42cc:	0000163d 	.word	0x0000163d

000042d0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    42d0:	b510      	push	{r4, lr}
    42d2:	b084      	sub	sp, #16
    42d4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    42d6:	4b0b      	ldr	r3, [pc, #44]	; (4304 <gethostbyname+0x34>)
    42d8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    42da:	b2c3      	uxtb	r3, r0
    42dc:	2b40      	cmp	r3, #64	; 0x40
    42de:	d80d      	bhi.n	42fc <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    42e0:	23ff      	movs	r3, #255	; 0xff
    42e2:	4003      	ands	r3, r0
    42e4:	3301      	adds	r3, #1
    42e6:	2200      	movs	r2, #0
    42e8:	9202      	str	r2, [sp, #8]
    42ea:	9201      	str	r2, [sp, #4]
    42ec:	9200      	str	r2, [sp, #0]
    42ee:	0022      	movs	r2, r4
    42f0:	214a      	movs	r1, #74	; 0x4a
    42f2:	2002      	movs	r0, #2
    42f4:	4c04      	ldr	r4, [pc, #16]	; (4308 <gethostbyname+0x38>)
    42f6:	47a0      	blx	r4
	}
	return s8Err;
}
    42f8:	b004      	add	sp, #16
    42fa:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    42fc:	2006      	movs	r0, #6
    42fe:	4240      	negs	r0, r0
    4300:	e7fa      	b.n	42f8 <gethostbyname+0x28>
    4302:	46c0      	nop			; (mov r8, r8)
    4304:	00001661 	.word	0x00001661
    4308:	00001765 	.word	0x00001765

0000430c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    430c:	b570      	push	{r4, r5, r6, lr}
    430e:	b082      	sub	sp, #8
    4310:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    4312:	4b2a      	ldr	r3, [pc, #168]	; (43bc <spi_flash_enable+0xb0>)
    4314:	4798      	blx	r3
    4316:	0500      	lsls	r0, r0, #20
    4318:	0d00      	lsrs	r0, r0, #20
    431a:	4b29      	ldr	r3, [pc, #164]	; (43c0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    431c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    431e:	4298      	cmp	r0, r3
    4320:	d802      	bhi.n	4328 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    4322:	0028      	movs	r0, r5
    4324:	b002      	add	sp, #8
    4326:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    4328:	a901      	add	r1, sp, #4
    432a:	4826      	ldr	r0, [pc, #152]	; (43c4 <spi_flash_enable+0xb8>)
    432c:	4b26      	ldr	r3, [pc, #152]	; (43c8 <spi_flash_enable+0xbc>)
    432e:	4798      	blx	r3
    4330:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    4332:	d1f6      	bne.n	4322 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    4334:	4b25      	ldr	r3, [pc, #148]	; (43cc <spi_flash_enable+0xc0>)
    4336:	9a01      	ldr	r2, [sp, #4]
    4338:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    433a:	4925      	ldr	r1, [pc, #148]	; (43d0 <spi_flash_enable+0xc4>)
    433c:	4319      	orrs	r1, r3
    433e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    4340:	4820      	ldr	r0, [pc, #128]	; (43c4 <spi_flash_enable+0xb8>)
    4342:	4b24      	ldr	r3, [pc, #144]	; (43d4 <spi_flash_enable+0xc8>)
    4344:	4798      	blx	r3
		if(enable) {
    4346:	2c00      	cmp	r4, #0
    4348:	d020      	beq.n	438c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    434a:	2100      	movs	r1, #0
    434c:	4822      	ldr	r0, [pc, #136]	; (43d8 <spi_flash_enable+0xcc>)
    434e:	4c21      	ldr	r4, [pc, #132]	; (43d4 <spi_flash_enable+0xc8>)
    4350:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    4352:	21ab      	movs	r1, #171	; 0xab
    4354:	4821      	ldr	r0, [pc, #132]	; (43dc <spi_flash_enable+0xd0>)
    4356:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    4358:	2101      	movs	r1, #1
    435a:	4821      	ldr	r0, [pc, #132]	; (43e0 <spi_flash_enable+0xd4>)
    435c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    435e:	2100      	movs	r1, #0
    4360:	4820      	ldr	r0, [pc, #128]	; (43e4 <spi_flash_enable+0xd8>)
    4362:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    4364:	2181      	movs	r1, #129	; 0x81
    4366:	4820      	ldr	r0, [pc, #128]	; (43e8 <spi_flash_enable+0xdc>)
    4368:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    436a:	4e20      	ldr	r6, [pc, #128]	; (43ec <spi_flash_enable+0xe0>)
    436c:	4c20      	ldr	r4, [pc, #128]	; (43f0 <spi_flash_enable+0xe4>)
    436e:	0030      	movs	r0, r6
    4370:	47a0      	blx	r4
    4372:	2801      	cmp	r0, #1
    4374:	d1fb      	bne.n	436e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    4376:	4b15      	ldr	r3, [pc, #84]	; (43cc <spi_flash_enable+0xc0>)
    4378:	9a01      	ldr	r2, [sp, #4]
    437a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    437c:	2180      	movs	r1, #128	; 0x80
    437e:	0249      	lsls	r1, r1, #9
    4380:	4319      	orrs	r1, r3
    4382:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    4384:	480f      	ldr	r0, [pc, #60]	; (43c4 <spi_flash_enable+0xb8>)
    4386:	4b13      	ldr	r3, [pc, #76]	; (43d4 <spi_flash_enable+0xc8>)
    4388:	4798      	blx	r3
    438a:	e7ca      	b.n	4322 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    438c:	2100      	movs	r1, #0
    438e:	4812      	ldr	r0, [pc, #72]	; (43d8 <spi_flash_enable+0xcc>)
    4390:	4c10      	ldr	r4, [pc, #64]	; (43d4 <spi_flash_enable+0xc8>)
    4392:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    4394:	21b9      	movs	r1, #185	; 0xb9
    4396:	4811      	ldr	r0, [pc, #68]	; (43dc <spi_flash_enable+0xd0>)
    4398:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    439a:	2101      	movs	r1, #1
    439c:	4810      	ldr	r0, [pc, #64]	; (43e0 <spi_flash_enable+0xd4>)
    439e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    43a0:	2100      	movs	r1, #0
    43a2:	4810      	ldr	r0, [pc, #64]	; (43e4 <spi_flash_enable+0xd8>)
    43a4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    43a6:	2181      	movs	r1, #129	; 0x81
    43a8:	480f      	ldr	r0, [pc, #60]	; (43e8 <spi_flash_enable+0xdc>)
    43aa:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    43ac:	4e0f      	ldr	r6, [pc, #60]	; (43ec <spi_flash_enable+0xe0>)
    43ae:	4c10      	ldr	r4, [pc, #64]	; (43f0 <spi_flash_enable+0xe4>)
    43b0:	0030      	movs	r0, r6
    43b2:	47a0      	blx	r4
    43b4:	2801      	cmp	r0, #1
    43b6:	d1fb      	bne.n	43b0 <spi_flash_enable+0xa4>
    43b8:	e7dd      	b.n	4376 <spi_flash_enable+0x6a>
    43ba:	46c0      	nop			; (mov r8, r8)
    43bc:	00002651 	.word	0x00002651
    43c0:	0000039f 	.word	0x0000039f
    43c4:	00001410 	.word	0x00001410
    43c8:	00002aa1 	.word	0x00002aa1
    43cc:	f8888fff 	.word	0xf8888fff
    43d0:	01111000 	.word	0x01111000
    43d4:	00002aad 	.word	0x00002aad
    43d8:	00010208 	.word	0x00010208
    43dc:	0001020c 	.word	0x0001020c
    43e0:	00010214 	.word	0x00010214
    43e4:	0001021c 	.word	0x0001021c
    43e8:	00010204 	.word	0x00010204
    43ec:	00010218 	.word	0x00010218
    43f0:	00002a95 	.word	0x00002a95

000043f4 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    43f4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    43f6:	2301      	movs	r3, #1
    43f8:	2800      	cmp	r0, #0
    43fa:	d001      	beq.n	4400 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    43fc:	0018      	movs	r0, r3
    43fe:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    4400:	4b01      	ldr	r3, [pc, #4]	; (4408 <mem_test_unit_ready+0x14>)
    4402:	4798      	blx	r3
    4404:	0003      	movs	r3, r0
    4406:	e7f9      	b.n	43fc <mem_test_unit_ready+0x8>
    4408:	000009bd 	.word	0x000009bd

0000440c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    440c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    440e:	2301      	movs	r3, #1
    4410:	2800      	cmp	r0, #0
    4412:	d001      	beq.n	4418 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    4414:	0018      	movs	r0, r3
    4416:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    4418:	0008      	movs	r0, r1
    441a:	4b02      	ldr	r3, [pc, #8]	; (4424 <mem_read_capacity+0x18>)
    441c:	4798      	blx	r3
    441e:	0003      	movs	r3, r0
    4420:	e7f8      	b.n	4414 <mem_read_capacity+0x8>
    4422:	46c0      	nop			; (mov r8, r8)
    4424:	000009ed 	.word	0x000009ed

00004428 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    4428:	4243      	negs	r3, r0
    442a:	4158      	adcs	r0, r3
    442c:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    442e:	4770      	bx	lr

00004430 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    4430:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    4432:	2301      	movs	r3, #1
    4434:	2800      	cmp	r0, #0
    4436:	d001      	beq.n	443c <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    4438:	0018      	movs	r0, r3
    443a:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    443c:	4b01      	ldr	r3, [pc, #4]	; (4444 <mem_wr_protect+0x14>)
    443e:	4798      	blx	r3
    4440:	0003      	movs	r3, r0
    4442:	e7f9      	b.n	4438 <mem_wr_protect+0x8>
    4444:	000009fd 	.word	0x000009fd

00004448 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    4448:	b510      	push	{r4, lr}
    444a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    444c:	2301      	movs	r3, #1
    444e:	2800      	cmp	r0, #0
    4450:	d001      	beq.n	4456 <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    4452:	0018      	movs	r0, r3
    4454:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    4456:	0011      	movs	r1, r2
    4458:	0020      	movs	r0, r4
    445a:	4b02      	ldr	r3, [pc, #8]	; (4464 <memory_2_ram+0x1c>)
    445c:	4798      	blx	r3
    445e:	0003      	movs	r3, r0
    4460:	e7f7      	b.n	4452 <memory_2_ram+0xa>
    4462:	46c0      	nop			; (mov r8, r8)
    4464:	00000a51 	.word	0x00000a51

00004468 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    4468:	b510      	push	{r4, lr}
    446a:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    446c:	2301      	movs	r3, #1
    446e:	2800      	cmp	r0, #0
    4470:	d001      	beq.n	4476 <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    4472:	0018      	movs	r0, r3
    4474:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    4476:	0011      	movs	r1, r2
    4478:	0020      	movs	r0, r4
    447a:	4b02      	ldr	r3, [pc, #8]	; (4484 <ram_2_memory+0x1c>)
    447c:	4798      	blx	r3
    447e:	0003      	movs	r3, r0
    4480:	e7f7      	b.n	4472 <ram_2_memory+0xa>
    4482:	46c0      	nop			; (mov r8, r8)
    4484:	00000aa9 	.word	0x00000aa9

00004488 <cpu_irq_enter_critical>:
    4488:	4b0c      	ldr	r3, [pc, #48]	; (44bc <cpu_irq_enter_critical+0x34>)
    448a:	681b      	ldr	r3, [r3, #0]
    448c:	2b00      	cmp	r3, #0
    448e:	d106      	bne.n	449e <cpu_irq_enter_critical+0x16>
    4490:	f3ef 8310 	mrs	r3, PRIMASK
    4494:	2b00      	cmp	r3, #0
    4496:	d007      	beq.n	44a8 <cpu_irq_enter_critical+0x20>
    4498:	2200      	movs	r2, #0
    449a:	4b09      	ldr	r3, [pc, #36]	; (44c0 <cpu_irq_enter_critical+0x38>)
    449c:	701a      	strb	r2, [r3, #0]
    449e:	4a07      	ldr	r2, [pc, #28]	; (44bc <cpu_irq_enter_critical+0x34>)
    44a0:	6813      	ldr	r3, [r2, #0]
    44a2:	3301      	adds	r3, #1
    44a4:	6013      	str	r3, [r2, #0]
    44a6:	4770      	bx	lr
    44a8:	b672      	cpsid	i
    44aa:	f3bf 8f5f 	dmb	sy
    44ae:	2200      	movs	r2, #0
    44b0:	4b04      	ldr	r3, [pc, #16]	; (44c4 <cpu_irq_enter_critical+0x3c>)
    44b2:	701a      	strb	r2, [r3, #0]
    44b4:	3201      	adds	r2, #1
    44b6:	4b02      	ldr	r3, [pc, #8]	; (44c0 <cpu_irq_enter_critical+0x38>)
    44b8:	701a      	strb	r2, [r3, #0]
    44ba:	e7f0      	b.n	449e <cpu_irq_enter_critical+0x16>
    44bc:	200003d8 	.word	0x200003d8
    44c0:	200003dc 	.word	0x200003dc
    44c4:	2000000e 	.word	0x2000000e

000044c8 <cpu_irq_leave_critical>:
    44c8:	4b08      	ldr	r3, [pc, #32]	; (44ec <cpu_irq_leave_critical+0x24>)
    44ca:	681a      	ldr	r2, [r3, #0]
    44cc:	3a01      	subs	r2, #1
    44ce:	601a      	str	r2, [r3, #0]
    44d0:	681b      	ldr	r3, [r3, #0]
    44d2:	2b00      	cmp	r3, #0
    44d4:	d109      	bne.n	44ea <cpu_irq_leave_critical+0x22>
    44d6:	4b06      	ldr	r3, [pc, #24]	; (44f0 <cpu_irq_leave_critical+0x28>)
    44d8:	781b      	ldrb	r3, [r3, #0]
    44da:	2b00      	cmp	r3, #0
    44dc:	d005      	beq.n	44ea <cpu_irq_leave_critical+0x22>
    44de:	2201      	movs	r2, #1
    44e0:	4b04      	ldr	r3, [pc, #16]	; (44f4 <cpu_irq_leave_critical+0x2c>)
    44e2:	701a      	strb	r2, [r3, #0]
    44e4:	f3bf 8f5f 	dmb	sy
    44e8:	b662      	cpsie	i
    44ea:	4770      	bx	lr
    44ec:	200003d8 	.word	0x200003d8
    44f0:	200003dc 	.word	0x200003dc
    44f4:	2000000e 	.word	0x2000000e

000044f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    44f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    44fa:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    44fc:	ac01      	add	r4, sp, #4
    44fe:	2501      	movs	r5, #1
    4500:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    4502:	2700      	movs	r7, #0
    4504:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4506:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4508:	0021      	movs	r1, r4
    450a:	2017      	movs	r0, #23
    450c:	4e06      	ldr	r6, [pc, #24]	; (4528 <system_board_init+0x30>)
    450e:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4510:	2280      	movs	r2, #128	; 0x80
    4512:	0412      	lsls	r2, r2, #16
    4514:	4b05      	ldr	r3, [pc, #20]	; (452c <system_board_init+0x34>)
    4516:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4518:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    451a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    451c:	0021      	movs	r1, r4
    451e:	2037      	movs	r0, #55	; 0x37
    4520:	47b0      	blx	r6
}
    4522:	b003      	add	sp, #12
    4524:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	00004701 	.word	0x00004701
    452c:	41004400 	.word	0x41004400

00004530 <extint_register_callback>:
    4530:	2317      	movs	r3, #23
    4532:	2a00      	cmp	r2, #0
    4534:	d001      	beq.n	453a <extint_register_callback+0xa>
    4536:	0018      	movs	r0, r3
    4538:	4770      	bx	lr
    453a:	008b      	lsls	r3, r1, #2
    453c:	4a06      	ldr	r2, [pc, #24]	; (4558 <extint_register_callback+0x28>)
    453e:	589b      	ldr	r3, [r3, r2]
    4540:	2b00      	cmp	r3, #0
    4542:	d003      	beq.n	454c <extint_register_callback+0x1c>
    4544:	4283      	cmp	r3, r0
    4546:	d005      	beq.n	4554 <extint_register_callback+0x24>
    4548:	231d      	movs	r3, #29
    454a:	e7f4      	b.n	4536 <extint_register_callback+0x6>
    454c:	0089      	lsls	r1, r1, #2
    454e:	5088      	str	r0, [r1, r2]
    4550:	2300      	movs	r3, #0
    4552:	e7f0      	b.n	4536 <extint_register_callback+0x6>
    4554:	2300      	movs	r3, #0
    4556:	e7ee      	b.n	4536 <extint_register_callback+0x6>
    4558:	20001024 	.word	0x20001024

0000455c <extint_chan_enable_callback>:
    455c:	2317      	movs	r3, #23
    455e:	2900      	cmp	r1, #0
    4560:	d001      	beq.n	4566 <extint_chan_enable_callback+0xa>
    4562:	0018      	movs	r0, r3
    4564:	4770      	bx	lr
    4566:	2200      	movs	r2, #0
    4568:	281f      	cmp	r0, #31
    456a:	d800      	bhi.n	456e <extint_chan_enable_callback+0x12>
    456c:	4a02      	ldr	r2, [pc, #8]	; (4578 <extint_chan_enable_callback+0x1c>)
    456e:	2301      	movs	r3, #1
    4570:	4083      	lsls	r3, r0
    4572:	60d3      	str	r3, [r2, #12]
    4574:	2300      	movs	r3, #0
    4576:	e7f4      	b.n	4562 <extint_chan_enable_callback+0x6>
    4578:	40001800 	.word	0x40001800

0000457c <extint_chan_disable_callback>:
    457c:	2317      	movs	r3, #23
    457e:	2900      	cmp	r1, #0
    4580:	d001      	beq.n	4586 <extint_chan_disable_callback+0xa>
    4582:	0018      	movs	r0, r3
    4584:	4770      	bx	lr
    4586:	2200      	movs	r2, #0
    4588:	281f      	cmp	r0, #31
    458a:	d800      	bhi.n	458e <extint_chan_disable_callback+0x12>
    458c:	4a02      	ldr	r2, [pc, #8]	; (4598 <extint_chan_disable_callback+0x1c>)
    458e:	2301      	movs	r3, #1
    4590:	4083      	lsls	r3, r0
    4592:	6093      	str	r3, [r2, #8]
    4594:	2300      	movs	r3, #0
    4596:	e7f4      	b.n	4582 <extint_chan_disable_callback+0x6>
    4598:	40001800 	.word	0x40001800

0000459c <EIC_Handler>:
    459c:	b570      	push	{r4, r5, r6, lr}
    459e:	2200      	movs	r2, #0
    45a0:	4b10      	ldr	r3, [pc, #64]	; (45e4 <EIC_Handler+0x48>)
    45a2:	701a      	strb	r2, [r3, #0]
    45a4:	2300      	movs	r3, #0
    45a6:	4910      	ldr	r1, [pc, #64]	; (45e8 <EIC_Handler+0x4c>)
    45a8:	251f      	movs	r5, #31
    45aa:	4e10      	ldr	r6, [pc, #64]	; (45ec <EIC_Handler+0x50>)
    45ac:	4c0d      	ldr	r4, [pc, #52]	; (45e4 <EIC_Handler+0x48>)
    45ae:	e00a      	b.n	45c6 <EIC_Handler+0x2a>
    45b0:	490d      	ldr	r1, [pc, #52]	; (45e8 <EIC_Handler+0x4c>)
    45b2:	e008      	b.n	45c6 <EIC_Handler+0x2a>
    45b4:	7823      	ldrb	r3, [r4, #0]
    45b6:	3301      	adds	r3, #1
    45b8:	b2db      	uxtb	r3, r3
    45ba:	7023      	strb	r3, [r4, #0]
    45bc:	2b0f      	cmp	r3, #15
    45be:	d810      	bhi.n	45e2 <EIC_Handler+0x46>
    45c0:	2100      	movs	r1, #0
    45c2:	2b1f      	cmp	r3, #31
    45c4:	d9f4      	bls.n	45b0 <EIC_Handler+0x14>
    45c6:	0028      	movs	r0, r5
    45c8:	4018      	ands	r0, r3
    45ca:	2201      	movs	r2, #1
    45cc:	4082      	lsls	r2, r0
    45ce:	6908      	ldr	r0, [r1, #16]
    45d0:	4210      	tst	r0, r2
    45d2:	d0ef      	beq.n	45b4 <EIC_Handler+0x18>
    45d4:	610a      	str	r2, [r1, #16]
    45d6:	009b      	lsls	r3, r3, #2
    45d8:	599b      	ldr	r3, [r3, r6]
    45da:	2b00      	cmp	r3, #0
    45dc:	d0ea      	beq.n	45b4 <EIC_Handler+0x18>
    45de:	4798      	blx	r3
    45e0:	e7e8      	b.n	45b4 <EIC_Handler+0x18>
    45e2:	bd70      	pop	{r4, r5, r6, pc}
    45e4:	20001020 	.word	0x20001020
    45e8:	40001800 	.word	0x40001800
    45ec:	20001024 	.word	0x20001024

000045f0 <_extint_enable>:
    45f0:	4a04      	ldr	r2, [pc, #16]	; (4604 <_extint_enable+0x14>)
    45f2:	7813      	ldrb	r3, [r2, #0]
    45f4:	2102      	movs	r1, #2
    45f6:	430b      	orrs	r3, r1
    45f8:	7013      	strb	r3, [r2, #0]
    45fa:	7853      	ldrb	r3, [r2, #1]
    45fc:	b25b      	sxtb	r3, r3
    45fe:	2b00      	cmp	r3, #0
    4600:	dbfb      	blt.n	45fa <_extint_enable+0xa>
    4602:	4770      	bx	lr
    4604:	40001800 	.word	0x40001800

00004608 <_system_extint_init>:
    4608:	b500      	push	{lr}
    460a:	b083      	sub	sp, #12
    460c:	4a12      	ldr	r2, [pc, #72]	; (4658 <_system_extint_init+0x50>)
    460e:	6993      	ldr	r3, [r2, #24]
    4610:	2140      	movs	r1, #64	; 0x40
    4612:	430b      	orrs	r3, r1
    4614:	6193      	str	r3, [r2, #24]
    4616:	a901      	add	r1, sp, #4
    4618:	2300      	movs	r3, #0
    461a:	700b      	strb	r3, [r1, #0]
    461c:	2005      	movs	r0, #5
    461e:	4b0f      	ldr	r3, [pc, #60]	; (465c <_system_extint_init+0x54>)
    4620:	4798      	blx	r3
    4622:	2005      	movs	r0, #5
    4624:	4b0e      	ldr	r3, [pc, #56]	; (4660 <_system_extint_init+0x58>)
    4626:	4798      	blx	r3
    4628:	4a0e      	ldr	r2, [pc, #56]	; (4664 <_system_extint_init+0x5c>)
    462a:	7813      	ldrb	r3, [r2, #0]
    462c:	2101      	movs	r1, #1
    462e:	430b      	orrs	r3, r1
    4630:	7013      	strb	r3, [r2, #0]
    4632:	7853      	ldrb	r3, [r2, #1]
    4634:	b25b      	sxtb	r3, r3
    4636:	2b00      	cmp	r3, #0
    4638:	dbfb      	blt.n	4632 <_system_extint_init+0x2a>
    463a:	4b0b      	ldr	r3, [pc, #44]	; (4668 <_system_extint_init+0x60>)
    463c:	0019      	movs	r1, r3
    463e:	3140      	adds	r1, #64	; 0x40
    4640:	2200      	movs	r2, #0
    4642:	c304      	stmia	r3!, {r2}
    4644:	4299      	cmp	r1, r3
    4646:	d1fc      	bne.n	4642 <_system_extint_init+0x3a>
    4648:	2210      	movs	r2, #16
    464a:	4b08      	ldr	r3, [pc, #32]	; (466c <_system_extint_init+0x64>)
    464c:	601a      	str	r2, [r3, #0]
    464e:	4b08      	ldr	r3, [pc, #32]	; (4670 <_system_extint_init+0x68>)
    4650:	4798      	blx	r3
    4652:	b003      	add	sp, #12
    4654:	bd00      	pop	{pc}
    4656:	46c0      	nop			; (mov r8, r8)
    4658:	40000400 	.word	0x40000400
    465c:	00006055 	.word	0x00006055
    4660:	00005fc9 	.word	0x00005fc9
    4664:	40001800 	.word	0x40001800
    4668:	20001024 	.word	0x20001024
    466c:	e000e100 	.word	0xe000e100
    4670:	000045f1 	.word	0x000045f1

00004674 <extint_chan_get_config_defaults>:
    4674:	2300      	movs	r3, #0
    4676:	6003      	str	r3, [r0, #0]
    4678:	6043      	str	r3, [r0, #4]
    467a:	2201      	movs	r2, #1
    467c:	7202      	strb	r2, [r0, #8]
    467e:	7242      	strb	r2, [r0, #9]
    4680:	7283      	strb	r3, [r0, #10]
    4682:	3302      	adds	r3, #2
    4684:	72c3      	strb	r3, [r0, #11]
    4686:	4770      	bx	lr

00004688 <extint_chan_set_config>:
    4688:	b5f0      	push	{r4, r5, r6, r7, lr}
    468a:	b083      	sub	sp, #12
    468c:	0005      	movs	r5, r0
    468e:	000c      	movs	r4, r1
    4690:	a901      	add	r1, sp, #4
    4692:	2300      	movs	r3, #0
    4694:	704b      	strb	r3, [r1, #1]
    4696:	70cb      	strb	r3, [r1, #3]
    4698:	7923      	ldrb	r3, [r4, #4]
    469a:	700b      	strb	r3, [r1, #0]
    469c:	7a23      	ldrb	r3, [r4, #8]
    469e:	708b      	strb	r3, [r1, #2]
    46a0:	7820      	ldrb	r0, [r4, #0]
    46a2:	4b15      	ldr	r3, [pc, #84]	; (46f8 <extint_chan_set_config+0x70>)
    46a4:	4798      	blx	r3
    46a6:	2000      	movs	r0, #0
    46a8:	2d1f      	cmp	r5, #31
    46aa:	d800      	bhi.n	46ae <extint_chan_set_config+0x26>
    46ac:	4813      	ldr	r0, [pc, #76]	; (46fc <extint_chan_set_config+0x74>)
    46ae:	2207      	movs	r2, #7
    46b0:	402a      	ands	r2, r5
    46b2:	0092      	lsls	r2, r2, #2
    46b4:	7ae7      	ldrb	r7, [r4, #11]
    46b6:	7aa3      	ldrb	r3, [r4, #10]
    46b8:	2b00      	cmp	r3, #0
    46ba:	d001      	beq.n	46c0 <extint_chan_set_config+0x38>
    46bc:	2308      	movs	r3, #8
    46be:	431f      	orrs	r7, r3
    46c0:	08eb      	lsrs	r3, r5, #3
    46c2:	009b      	lsls	r3, r3, #2
    46c4:	18c3      	adds	r3, r0, r3
    46c6:	6999      	ldr	r1, [r3, #24]
    46c8:	260f      	movs	r6, #15
    46ca:	4096      	lsls	r6, r2
    46cc:	43b1      	bics	r1, r6
    46ce:	4097      	lsls	r7, r2
    46d0:	003a      	movs	r2, r7
    46d2:	430a      	orrs	r2, r1
    46d4:	619a      	str	r2, [r3, #24]
    46d6:	7a63      	ldrb	r3, [r4, #9]
    46d8:	2b00      	cmp	r3, #0
    46da:	d106      	bne.n	46ea <extint_chan_set_config+0x62>
    46dc:	6943      	ldr	r3, [r0, #20]
    46de:	2201      	movs	r2, #1
    46e0:	40aa      	lsls	r2, r5
    46e2:	4393      	bics	r3, r2
    46e4:	6143      	str	r3, [r0, #20]
    46e6:	b003      	add	sp, #12
    46e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46ea:	6942      	ldr	r2, [r0, #20]
    46ec:	2301      	movs	r3, #1
    46ee:	40ab      	lsls	r3, r5
    46f0:	4313      	orrs	r3, r2
    46f2:	6143      	str	r3, [r0, #20]
    46f4:	e7f7      	b.n	46e6 <extint_chan_set_config+0x5e>
    46f6:	46c0      	nop			; (mov r8, r8)
    46f8:	0000614d 	.word	0x0000614d
    46fc:	40001800 	.word	0x40001800

00004700 <port_pin_set_config>:
    4700:	b500      	push	{lr}
    4702:	b083      	sub	sp, #12
    4704:	ab01      	add	r3, sp, #4
    4706:	2280      	movs	r2, #128	; 0x80
    4708:	701a      	strb	r2, [r3, #0]
    470a:	780a      	ldrb	r2, [r1, #0]
    470c:	705a      	strb	r2, [r3, #1]
    470e:	784a      	ldrb	r2, [r1, #1]
    4710:	709a      	strb	r2, [r3, #2]
    4712:	788a      	ldrb	r2, [r1, #2]
    4714:	70da      	strb	r2, [r3, #3]
    4716:	0019      	movs	r1, r3
    4718:	4b01      	ldr	r3, [pc, #4]	; (4720 <port_pin_set_config+0x20>)
    471a:	4798      	blx	r3
    471c:	b003      	add	sp, #12
    471e:	bd00      	pop	{pc}
    4720:	0000614d 	.word	0x0000614d

00004724 <rtc_calendar_enable>:
    4724:	6801      	ldr	r1, [r0, #0]
    4726:	2208      	movs	r2, #8
    4728:	4b05      	ldr	r3, [pc, #20]	; (4740 <rtc_calendar_enable+0x1c>)
    472a:	601a      	str	r2, [r3, #0]
    472c:	6802      	ldr	r2, [r0, #0]
    472e:	7a93      	ldrb	r3, [r2, #10]
    4730:	b25b      	sxtb	r3, r3
    4732:	2b00      	cmp	r3, #0
    4734:	dbfb      	blt.n	472e <rtc_calendar_enable+0xa>
    4736:	880b      	ldrh	r3, [r1, #0]
    4738:	2202      	movs	r2, #2
    473a:	4313      	orrs	r3, r2
    473c:	800b      	strh	r3, [r1, #0]
    473e:	4770      	bx	lr
    4740:	e000e100 	.word	0xe000e100

00004744 <rtc_calendar_disable>:
    4744:	b510      	push	{r4, lr}
    4746:	6802      	ldr	r2, [r0, #0]
    4748:	2408      	movs	r4, #8
    474a:	2380      	movs	r3, #128	; 0x80
    474c:	4907      	ldr	r1, [pc, #28]	; (476c <rtc_calendar_disable+0x28>)
    474e:	50cc      	str	r4, [r1, r3]
    4750:	6801      	ldr	r1, [r0, #0]
    4752:	7a8b      	ldrb	r3, [r1, #10]
    4754:	b25b      	sxtb	r3, r3
    4756:	2b00      	cmp	r3, #0
    4758:	dbfb      	blt.n	4752 <rtc_calendar_disable+0xe>
    475a:	23c1      	movs	r3, #193	; 0xc1
    475c:	7193      	strb	r3, [r2, #6]
    475e:	7213      	strb	r3, [r2, #8]
    4760:	8813      	ldrh	r3, [r2, #0]
    4762:	2102      	movs	r1, #2
    4764:	438b      	bics	r3, r1
    4766:	8013      	strh	r3, [r2, #0]
    4768:	bd10      	pop	{r4, pc}
    476a:	46c0      	nop			; (mov r8, r8)
    476c:	e000e100 	.word	0xe000e100

00004770 <rtc_calendar_reset>:
    4770:	b570      	push	{r4, r5, r6, lr}
    4772:	0004      	movs	r4, r0
    4774:	6805      	ldr	r5, [r0, #0]
    4776:	4b07      	ldr	r3, [pc, #28]	; (4794 <rtc_calendar_reset+0x24>)
    4778:	4798      	blx	r3
    477a:	2300      	movs	r3, #0
    477c:	8223      	strh	r3, [r4, #16]
    477e:	8263      	strh	r3, [r4, #18]
    4780:	6822      	ldr	r2, [r4, #0]
    4782:	7a93      	ldrb	r3, [r2, #10]
    4784:	b25b      	sxtb	r3, r3
    4786:	2b00      	cmp	r3, #0
    4788:	dbfb      	blt.n	4782 <rtc_calendar_reset+0x12>
    478a:	882b      	ldrh	r3, [r5, #0]
    478c:	2201      	movs	r2, #1
    478e:	4313      	orrs	r3, r2
    4790:	802b      	strh	r3, [r5, #0]
    4792:	bd70      	pop	{r4, r5, r6, pc}
    4794:	00004745 	.word	0x00004745

00004798 <rtc_calendar_time_to_register_value>:
    4798:	b510      	push	{r4, lr}
    479a:	88cb      	ldrh	r3, [r1, #6]
    479c:	88c2      	ldrh	r2, [r0, #6]
    479e:	1a9a      	subs	r2, r3, r2
    47a0:	0692      	lsls	r2, r2, #26
    47a2:	794b      	ldrb	r3, [r1, #5]
    47a4:	059b      	lsls	r3, r3, #22
    47a6:	790c      	ldrb	r4, [r1, #4]
    47a8:	0464      	lsls	r4, r4, #17
    47aa:	4323      	orrs	r3, r4
    47ac:	788c      	ldrb	r4, [r1, #2]
    47ae:	0324      	lsls	r4, r4, #12
    47b0:	4323      	orrs	r3, r4
    47b2:	4313      	orrs	r3, r2
    47b4:	7902      	ldrb	r2, [r0, #4]
    47b6:	2a00      	cmp	r2, #0
    47b8:	d105      	bne.n	47c6 <rtc_calendar_time_to_register_value+0x2e>
    47ba:	78ca      	ldrb	r2, [r1, #3]
    47bc:	2a00      	cmp	r2, #0
    47be:	d002      	beq.n	47c6 <rtc_calendar_time_to_register_value+0x2e>
    47c0:	2280      	movs	r2, #128	; 0x80
    47c2:	0252      	lsls	r2, r2, #9
    47c4:	4313      	orrs	r3, r2
    47c6:	7848      	ldrb	r0, [r1, #1]
    47c8:	0180      	lsls	r0, r0, #6
    47ca:	780a      	ldrb	r2, [r1, #0]
    47cc:	4310      	orrs	r0, r2
    47ce:	4318      	orrs	r0, r3
    47d0:	bd10      	pop	{r4, pc}

000047d2 <rtc_calendar_register_value_to_time>:
    47d2:	b510      	push	{r4, lr}
    47d4:	0e8b      	lsrs	r3, r1, #26
    47d6:	88c4      	ldrh	r4, [r0, #6]
    47d8:	191b      	adds	r3, r3, r4
    47da:	80d3      	strh	r3, [r2, #6]
    47dc:	018b      	lsls	r3, r1, #6
    47de:	0f1b      	lsrs	r3, r3, #28
    47e0:	7153      	strb	r3, [r2, #5]
    47e2:	028b      	lsls	r3, r1, #10
    47e4:	0edb      	lsrs	r3, r3, #27
    47e6:	7113      	strb	r3, [r2, #4]
    47e8:	7903      	ldrb	r3, [r0, #4]
    47ea:	2b00      	cmp	r3, #0
    47ec:	d10c      	bne.n	4808 <rtc_calendar_register_value_to_time+0x36>
    47ee:	040b      	lsls	r3, r1, #16
    47f0:	0f1b      	lsrs	r3, r3, #28
    47f2:	7093      	strb	r3, [r2, #2]
    47f4:	03cb      	lsls	r3, r1, #15
    47f6:	0fdb      	lsrs	r3, r3, #31
    47f8:	70d3      	strb	r3, [r2, #3]
    47fa:	0988      	lsrs	r0, r1, #6
    47fc:	233f      	movs	r3, #63	; 0x3f
    47fe:	4018      	ands	r0, r3
    4800:	7050      	strb	r0, [r2, #1]
    4802:	4019      	ands	r1, r3
    4804:	7011      	strb	r1, [r2, #0]
    4806:	bd10      	pop	{r4, pc}
    4808:	03cb      	lsls	r3, r1, #15
    480a:	0edb      	lsrs	r3, r3, #27
    480c:	7093      	strb	r3, [r2, #2]
    480e:	e7f4      	b.n	47fa <rtc_calendar_register_value_to_time+0x28>

00004810 <rtc_calendar_get_time>:
    4810:	b510      	push	{r4, lr}
    4812:	000a      	movs	r2, r1
    4814:	6803      	ldr	r3, [r0, #0]
    4816:	7941      	ldrb	r1, [r0, #5]
    4818:	2900      	cmp	r1, #0
    481a:	d006      	beq.n	482a <rtc_calendar_get_time+0x1a>
    481c:	8859      	ldrh	r1, [r3, #2]
    481e:	0449      	lsls	r1, r1, #17
    4820:	d50b      	bpl.n	483a <rtc_calendar_get_time+0x2a>
    4822:	6919      	ldr	r1, [r3, #16]
    4824:	4b0a      	ldr	r3, [pc, #40]	; (4850 <rtc_calendar_get_time+0x40>)
    4826:	4798      	blx	r3
    4828:	bd10      	pop	{r4, pc}
    482a:	490a      	ldr	r1, [pc, #40]	; (4854 <rtc_calendar_get_time+0x44>)
    482c:	8059      	strh	r1, [r3, #2]
    482e:	6804      	ldr	r4, [r0, #0]
    4830:	7aa1      	ldrb	r1, [r4, #10]
    4832:	b249      	sxtb	r1, r1
    4834:	2900      	cmp	r1, #0
    4836:	dbfb      	blt.n	4830 <rtc_calendar_get_time+0x20>
    4838:	e7f3      	b.n	4822 <rtc_calendar_get_time+0x12>
    483a:	8859      	ldrh	r1, [r3, #2]
    483c:	24c0      	movs	r4, #192	; 0xc0
    483e:	0224      	lsls	r4, r4, #8
    4840:	4321      	orrs	r1, r4
    4842:	8059      	strh	r1, [r3, #2]
    4844:	6804      	ldr	r4, [r0, #0]
    4846:	7aa1      	ldrb	r1, [r4, #10]
    4848:	b249      	sxtb	r1, r1
    484a:	2900      	cmp	r1, #0
    484c:	dbfb      	blt.n	4846 <rtc_calendar_get_time+0x36>
    484e:	e7e8      	b.n	4822 <rtc_calendar_get_time+0x12>
    4850:	000047d3 	.word	0x000047d3
    4854:	ffff8000 	.word	0xffff8000

00004858 <rtc_calendar_set_alarm>:
    4858:	b570      	push	{r4, r5, r6, lr}
    485a:	000d      	movs	r5, r1
    485c:	0014      	movs	r4, r2
    485e:	2317      	movs	r3, #23
    4860:	2a01      	cmp	r2, #1
    4862:	d901      	bls.n	4868 <rtc_calendar_set_alarm+0x10>
    4864:	0018      	movs	r0, r3
    4866:	bd70      	pop	{r4, r5, r6, pc}
    4868:	6806      	ldr	r6, [r0, #0]
    486a:	4b06      	ldr	r3, [pc, #24]	; (4884 <rtc_calendar_set_alarm+0x2c>)
    486c:	4798      	blx	r3
    486e:	7ab3      	ldrb	r3, [r6, #10]
    4870:	b25b      	sxtb	r3, r3
    4872:	2b00      	cmp	r3, #0
    4874:	dbfb      	blt.n	486e <rtc_calendar_set_alarm+0x16>
    4876:	00e4      	lsls	r4, r4, #3
    4878:	1934      	adds	r4, r6, r4
    487a:	61a0      	str	r0, [r4, #24]
    487c:	7a2b      	ldrb	r3, [r5, #8]
    487e:	7723      	strb	r3, [r4, #28]
    4880:	2300      	movs	r3, #0
    4882:	e7ef      	b.n	4864 <rtc_calendar_set_alarm+0xc>
    4884:	00004799 	.word	0x00004799

00004888 <rtc_calendar_init>:
    4888:	b530      	push	{r4, r5, lr}
    488a:	b083      	sub	sp, #12
    488c:	0005      	movs	r5, r0
    488e:	0014      	movs	r4, r2
    4890:	6001      	str	r1, [r0, #0]
    4892:	4a1c      	ldr	r2, [pc, #112]	; (4904 <rtc_calendar_init+0x7c>)
    4894:	6993      	ldr	r3, [r2, #24]
    4896:	2120      	movs	r1, #32
    4898:	430b      	orrs	r3, r1
    489a:	6193      	str	r3, [r2, #24]
    489c:	a901      	add	r1, sp, #4
    489e:	2302      	movs	r3, #2
    48a0:	700b      	strb	r3, [r1, #0]
    48a2:	2004      	movs	r0, #4
    48a4:	4b18      	ldr	r3, [pc, #96]	; (4908 <rtc_calendar_init+0x80>)
    48a6:	4798      	blx	r3
    48a8:	2004      	movs	r0, #4
    48aa:	4b18      	ldr	r3, [pc, #96]	; (490c <rtc_calendar_init+0x84>)
    48ac:	4798      	blx	r3
    48ae:	0028      	movs	r0, r5
    48b0:	4b17      	ldr	r3, [pc, #92]	; (4910 <rtc_calendar_init+0x88>)
    48b2:	4798      	blx	r3
    48b4:	7923      	ldrb	r3, [r4, #4]
    48b6:	712b      	strb	r3, [r5, #4]
    48b8:	78e3      	ldrb	r3, [r4, #3]
    48ba:	716b      	strb	r3, [r5, #5]
    48bc:	88e3      	ldrh	r3, [r4, #6]
    48be:	80eb      	strh	r3, [r5, #6]
    48c0:	4b14      	ldr	r3, [pc, #80]	; (4914 <rtc_calendar_init+0x8c>)
    48c2:	601d      	str	r5, [r3, #0]
    48c4:	682a      	ldr	r2, [r5, #0]
    48c6:	8823      	ldrh	r3, [r4, #0]
    48c8:	7921      	ldrb	r1, [r4, #4]
    48ca:	2900      	cmp	r1, #0
    48cc:	d017      	beq.n	48fe <rtc_calendar_init+0x76>
    48ce:	2108      	movs	r1, #8
    48d0:	430b      	orrs	r3, r1
    48d2:	78a1      	ldrb	r1, [r4, #2]
    48d4:	2900      	cmp	r1, #0
    48d6:	d001      	beq.n	48dc <rtc_calendar_init+0x54>
    48d8:	2180      	movs	r1, #128	; 0x80
    48da:	430b      	orrs	r3, r1
    48dc:	8013      	strh	r3, [r2, #0]
    48de:	78e3      	ldrb	r3, [r4, #3]
    48e0:	2b00      	cmp	r3, #0
    48e2:	d004      	beq.n	48ee <rtc_calendar_init+0x66>
    48e4:	8853      	ldrh	r3, [r2, #2]
    48e6:	2180      	movs	r1, #128	; 0x80
    48e8:	01c9      	lsls	r1, r1, #7
    48ea:	430b      	orrs	r3, r1
    48ec:	8053      	strh	r3, [r2, #2]
    48ee:	0021      	movs	r1, r4
    48f0:	3108      	adds	r1, #8
    48f2:	2200      	movs	r2, #0
    48f4:	0028      	movs	r0, r5
    48f6:	4b08      	ldr	r3, [pc, #32]	; (4918 <rtc_calendar_init+0x90>)
    48f8:	4798      	blx	r3
    48fa:	b003      	add	sp, #12
    48fc:	bd30      	pop	{r4, r5, pc}
    48fe:	2148      	movs	r1, #72	; 0x48
    4900:	430b      	orrs	r3, r1
    4902:	e7e6      	b.n	48d2 <rtc_calendar_init+0x4a>
    4904:	40000400 	.word	0x40000400
    4908:	00006055 	.word	0x00006055
    490c:	00005fc9 	.word	0x00005fc9
    4910:	00004771 	.word	0x00004771
    4914:	20001064 	.word	0x20001064
    4918:	00004859 	.word	0x00004859

0000491c <RTC_Handler>:
    491c:	b510      	push	{r4, lr}
    491e:	4b0f      	ldr	r3, [pc, #60]	; (495c <RTC_Handler+0x40>)
    4920:	681a      	ldr	r2, [r3, #0]
    4922:	6814      	ldr	r4, [r2, #0]
    4924:	8a51      	ldrh	r1, [r2, #18]
    4926:	8a13      	ldrh	r3, [r2, #16]
    4928:	4019      	ands	r1, r3
    492a:	7a20      	ldrb	r0, [r4, #8]
    492c:	79e3      	ldrb	r3, [r4, #7]
    492e:	4003      	ands	r3, r0
    4930:	b258      	sxtb	r0, r3
    4932:	2800      	cmp	r0, #0
    4934:	db06      	blt.n	4944 <RTC_Handler+0x28>
    4936:	07db      	lsls	r3, r3, #31
    4938:	d503      	bpl.n	4942 <RTC_Handler+0x26>
    493a:	07cb      	lsls	r3, r1, #31
    493c:	d40a      	bmi.n	4954 <RTC_Handler+0x38>
    493e:	2301      	movs	r3, #1
    4940:	7223      	strb	r3, [r4, #8]
    4942:	bd10      	pop	{r4, pc}
    4944:	078b      	lsls	r3, r1, #30
    4946:	d402      	bmi.n	494e <RTC_Handler+0x32>
    4948:	2380      	movs	r3, #128	; 0x80
    494a:	7223      	strb	r3, [r4, #8]
    494c:	e7f9      	b.n	4942 <RTC_Handler+0x26>
    494e:	68d3      	ldr	r3, [r2, #12]
    4950:	4798      	blx	r3
    4952:	e7f9      	b.n	4948 <RTC_Handler+0x2c>
    4954:	6893      	ldr	r3, [r2, #8]
    4956:	4798      	blx	r3
    4958:	e7f1      	b.n	493e <RTC_Handler+0x22>
    495a:	46c0      	nop			; (mov r8, r8)
    495c:	20001064 	.word	0x20001064

00004960 <long_division>:
    4960:	b5f0      	push	{r4, r5, r6, r7, lr}
    4962:	46de      	mov	lr, fp
    4964:	4657      	mov	r7, sl
    4966:	464e      	mov	r6, r9
    4968:	4645      	mov	r5, r8
    496a:	b5e0      	push	{r5, r6, r7, lr}
    496c:	b087      	sub	sp, #28
    496e:	4680      	mov	r8, r0
    4970:	9104      	str	r1, [sp, #16]
    4972:	0016      	movs	r6, r2
    4974:	001f      	movs	r7, r3
    4976:	2200      	movs	r2, #0
    4978:	2300      	movs	r3, #0
    497a:	2100      	movs	r1, #0
    497c:	468b      	mov	fp, r1
    497e:	243f      	movs	r4, #63	; 0x3f
    4980:	2001      	movs	r0, #1
    4982:	0021      	movs	r1, r4
    4984:	9600      	str	r6, [sp, #0]
    4986:	9701      	str	r7, [sp, #4]
    4988:	465c      	mov	r4, fp
    498a:	9403      	str	r4, [sp, #12]
    498c:	4644      	mov	r4, r8
    498e:	9405      	str	r4, [sp, #20]
    4990:	e013      	b.n	49ba <long_division+0x5a>
    4992:	2420      	movs	r4, #32
    4994:	1a64      	subs	r4, r4, r1
    4996:	0005      	movs	r5, r0
    4998:	40e5      	lsrs	r5, r4
    499a:	46a8      	mov	r8, r5
    499c:	e014      	b.n	49c8 <long_division+0x68>
    499e:	9c00      	ldr	r4, [sp, #0]
    49a0:	9d01      	ldr	r5, [sp, #4]
    49a2:	1b12      	subs	r2, r2, r4
    49a4:	41ab      	sbcs	r3, r5
    49a6:	465c      	mov	r4, fp
    49a8:	464d      	mov	r5, r9
    49aa:	432c      	orrs	r4, r5
    49ac:	46a3      	mov	fp, r4
    49ae:	9c03      	ldr	r4, [sp, #12]
    49b0:	4645      	mov	r5, r8
    49b2:	432c      	orrs	r4, r5
    49b4:	9403      	str	r4, [sp, #12]
    49b6:	3901      	subs	r1, #1
    49b8:	d325      	bcc.n	4a06 <long_division+0xa6>
    49ba:	2420      	movs	r4, #32
    49bc:	4264      	negs	r4, r4
    49be:	190c      	adds	r4, r1, r4
    49c0:	d4e7      	bmi.n	4992 <long_division+0x32>
    49c2:	0005      	movs	r5, r0
    49c4:	40a5      	lsls	r5, r4
    49c6:	46a8      	mov	r8, r5
    49c8:	0004      	movs	r4, r0
    49ca:	408c      	lsls	r4, r1
    49cc:	46a1      	mov	r9, r4
    49ce:	1892      	adds	r2, r2, r2
    49d0:	415b      	adcs	r3, r3
    49d2:	0014      	movs	r4, r2
    49d4:	001d      	movs	r5, r3
    49d6:	9e05      	ldr	r6, [sp, #20]
    49d8:	464f      	mov	r7, r9
    49da:	403e      	ands	r6, r7
    49dc:	46b4      	mov	ip, r6
    49de:	9e04      	ldr	r6, [sp, #16]
    49e0:	4647      	mov	r7, r8
    49e2:	403e      	ands	r6, r7
    49e4:	46b2      	mov	sl, r6
    49e6:	4666      	mov	r6, ip
    49e8:	4657      	mov	r7, sl
    49ea:	433e      	orrs	r6, r7
    49ec:	d003      	beq.n	49f6 <long_division+0x96>
    49ee:	0006      	movs	r6, r0
    49f0:	4326      	orrs	r6, r4
    49f2:	0032      	movs	r2, r6
    49f4:	002b      	movs	r3, r5
    49f6:	9c00      	ldr	r4, [sp, #0]
    49f8:	9d01      	ldr	r5, [sp, #4]
    49fa:	429d      	cmp	r5, r3
    49fc:	d8db      	bhi.n	49b6 <long_division+0x56>
    49fe:	d1ce      	bne.n	499e <long_division+0x3e>
    4a00:	4294      	cmp	r4, r2
    4a02:	d8d8      	bhi.n	49b6 <long_division+0x56>
    4a04:	e7cb      	b.n	499e <long_division+0x3e>
    4a06:	9b03      	ldr	r3, [sp, #12]
    4a08:	4658      	mov	r0, fp
    4a0a:	0019      	movs	r1, r3
    4a0c:	b007      	add	sp, #28
    4a0e:	bc3c      	pop	{r2, r3, r4, r5}
    4a10:	4690      	mov	r8, r2
    4a12:	4699      	mov	r9, r3
    4a14:	46a2      	mov	sl, r4
    4a16:	46ab      	mov	fp, r5
    4a18:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a1a <_sercom_get_sync_baud_val>:
    4a1a:	b510      	push	{r4, lr}
    4a1c:	0849      	lsrs	r1, r1, #1
    4a1e:	2340      	movs	r3, #64	; 0x40
    4a20:	2400      	movs	r4, #0
    4a22:	4281      	cmp	r1, r0
    4a24:	d202      	bcs.n	4a2c <_sercom_get_sync_baud_val+0x12>
    4a26:	0018      	movs	r0, r3
    4a28:	bd10      	pop	{r4, pc}
    4a2a:	001c      	movs	r4, r3
    4a2c:	1a09      	subs	r1, r1, r0
    4a2e:	1c63      	adds	r3, r4, #1
    4a30:	b29b      	uxth	r3, r3
    4a32:	4288      	cmp	r0, r1
    4a34:	d9f9      	bls.n	4a2a <_sercom_get_sync_baud_val+0x10>
    4a36:	2340      	movs	r3, #64	; 0x40
    4a38:	2cff      	cmp	r4, #255	; 0xff
    4a3a:	d8f4      	bhi.n	4a26 <_sercom_get_sync_baud_val+0xc>
    4a3c:	8014      	strh	r4, [r2, #0]
    4a3e:	2300      	movs	r3, #0
    4a40:	e7f1      	b.n	4a26 <_sercom_get_sync_baud_val+0xc>
	...

00004a44 <_sercom_get_async_baud_val>:
    4a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a46:	b083      	sub	sp, #12
    4a48:	000f      	movs	r7, r1
    4a4a:	0016      	movs	r6, r2
    4a4c:	aa08      	add	r2, sp, #32
    4a4e:	7811      	ldrb	r1, [r2, #0]
    4a50:	0004      	movs	r4, r0
    4a52:	434c      	muls	r4, r1
    4a54:	2240      	movs	r2, #64	; 0x40
    4a56:	42bc      	cmp	r4, r7
    4a58:	d902      	bls.n	4a60 <_sercom_get_async_baud_val+0x1c>
    4a5a:	0010      	movs	r0, r2
    4a5c:	b003      	add	sp, #12
    4a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a60:	2b00      	cmp	r3, #0
    4a62:	d114      	bne.n	4a8e <_sercom_get_async_baud_val+0x4a>
    4a64:	0002      	movs	r2, r0
    4a66:	0008      	movs	r0, r1
    4a68:	2100      	movs	r1, #0
    4a6a:	4c19      	ldr	r4, [pc, #100]	; (4ad0 <_sercom_get_async_baud_val+0x8c>)
    4a6c:	47a0      	blx	r4
    4a6e:	0001      	movs	r1, r0
    4a70:	003a      	movs	r2, r7
    4a72:	2300      	movs	r3, #0
    4a74:	2000      	movs	r0, #0
    4a76:	4c17      	ldr	r4, [pc, #92]	; (4ad4 <_sercom_get_async_baud_val+0x90>)
    4a78:	47a0      	blx	r4
    4a7a:	2200      	movs	r2, #0
    4a7c:	2301      	movs	r3, #1
    4a7e:	1a12      	subs	r2, r2, r0
    4a80:	418b      	sbcs	r3, r1
    4a82:	0c12      	lsrs	r2, r2, #16
    4a84:	041b      	lsls	r3, r3, #16
    4a86:	431a      	orrs	r2, r3
    4a88:	8032      	strh	r2, [r6, #0]
    4a8a:	2200      	movs	r2, #0
    4a8c:	e7e5      	b.n	4a5a <_sercom_get_async_baud_val+0x16>
    4a8e:	2200      	movs	r2, #0
    4a90:	2b01      	cmp	r3, #1
    4a92:	d1f9      	bne.n	4a88 <_sercom_get_async_baud_val+0x44>
    4a94:	000a      	movs	r2, r1
    4a96:	2300      	movs	r3, #0
    4a98:	2100      	movs	r1, #0
    4a9a:	4c0d      	ldr	r4, [pc, #52]	; (4ad0 <_sercom_get_async_baud_val+0x8c>)
    4a9c:	47a0      	blx	r4
    4a9e:	0002      	movs	r2, r0
    4aa0:	000b      	movs	r3, r1
    4aa2:	9200      	str	r2, [sp, #0]
    4aa4:	9301      	str	r3, [sp, #4]
    4aa6:	0038      	movs	r0, r7
    4aa8:	2100      	movs	r1, #0
    4aaa:	4c0a      	ldr	r4, [pc, #40]	; (4ad4 <_sercom_get_async_baud_val+0x90>)
    4aac:	47a0      	blx	r4
    4aae:	0005      	movs	r5, r0
    4ab0:	2380      	movs	r3, #128	; 0x80
    4ab2:	019b      	lsls	r3, r3, #6
    4ab4:	2240      	movs	r2, #64	; 0x40
    4ab6:	4298      	cmp	r0, r3
    4ab8:	d8cf      	bhi.n	4a5a <_sercom_get_async_baud_val+0x16>
    4aba:	0f79      	lsrs	r1, r7, #29
    4abc:	00f8      	lsls	r0, r7, #3
    4abe:	9a00      	ldr	r2, [sp, #0]
    4ac0:	9b01      	ldr	r3, [sp, #4]
    4ac2:	47a0      	blx	r4
    4ac4:	00ea      	lsls	r2, r5, #3
    4ac6:	1a82      	subs	r2, r0, r2
    4ac8:	b2d2      	uxtb	r2, r2
    4aca:	0352      	lsls	r2, r2, #13
    4acc:	432a      	orrs	r2, r5
    4ace:	e7db      	b.n	4a88 <_sercom_get_async_baud_val+0x44>
    4ad0:	0000bbe9 	.word	0x0000bbe9
    4ad4:	00004961 	.word	0x00004961

00004ad8 <sercom_set_gclk_generator>:
    4ad8:	b510      	push	{r4, lr}
    4ada:	b082      	sub	sp, #8
    4adc:	0004      	movs	r4, r0
    4ade:	4b0e      	ldr	r3, [pc, #56]	; (4b18 <sercom_set_gclk_generator+0x40>)
    4ae0:	781b      	ldrb	r3, [r3, #0]
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d007      	beq.n	4af6 <sercom_set_gclk_generator+0x1e>
    4ae6:	2900      	cmp	r1, #0
    4ae8:	d105      	bne.n	4af6 <sercom_set_gclk_generator+0x1e>
    4aea:	4b0b      	ldr	r3, [pc, #44]	; (4b18 <sercom_set_gclk_generator+0x40>)
    4aec:	785b      	ldrb	r3, [r3, #1]
    4aee:	4283      	cmp	r3, r0
    4af0:	d010      	beq.n	4b14 <sercom_set_gclk_generator+0x3c>
    4af2:	201d      	movs	r0, #29
    4af4:	e00c      	b.n	4b10 <sercom_set_gclk_generator+0x38>
    4af6:	a901      	add	r1, sp, #4
    4af8:	700c      	strb	r4, [r1, #0]
    4afa:	2013      	movs	r0, #19
    4afc:	4b07      	ldr	r3, [pc, #28]	; (4b1c <sercom_set_gclk_generator+0x44>)
    4afe:	4798      	blx	r3
    4b00:	2013      	movs	r0, #19
    4b02:	4b07      	ldr	r3, [pc, #28]	; (4b20 <sercom_set_gclk_generator+0x48>)
    4b04:	4798      	blx	r3
    4b06:	4b04      	ldr	r3, [pc, #16]	; (4b18 <sercom_set_gclk_generator+0x40>)
    4b08:	705c      	strb	r4, [r3, #1]
    4b0a:	2201      	movs	r2, #1
    4b0c:	701a      	strb	r2, [r3, #0]
    4b0e:	2000      	movs	r0, #0
    4b10:	b002      	add	sp, #8
    4b12:	bd10      	pop	{r4, pc}
    4b14:	2000      	movs	r0, #0
    4b16:	e7fb      	b.n	4b10 <sercom_set_gclk_generator+0x38>
    4b18:	200003e0 	.word	0x200003e0
    4b1c:	00006055 	.word	0x00006055
    4b20:	00005fc9 	.word	0x00005fc9

00004b24 <_sercom_get_default_pad>:
    4b24:	4b40      	ldr	r3, [pc, #256]	; (4c28 <_sercom_get_default_pad+0x104>)
    4b26:	4298      	cmp	r0, r3
    4b28:	d031      	beq.n	4b8e <_sercom_get_default_pad+0x6a>
    4b2a:	d90a      	bls.n	4b42 <_sercom_get_default_pad+0x1e>
    4b2c:	4b3f      	ldr	r3, [pc, #252]	; (4c2c <_sercom_get_default_pad+0x108>)
    4b2e:	4298      	cmp	r0, r3
    4b30:	d04d      	beq.n	4bce <_sercom_get_default_pad+0xaa>
    4b32:	4b3f      	ldr	r3, [pc, #252]	; (4c30 <_sercom_get_default_pad+0x10c>)
    4b34:	4298      	cmp	r0, r3
    4b36:	d05a      	beq.n	4bee <_sercom_get_default_pad+0xca>
    4b38:	4b3e      	ldr	r3, [pc, #248]	; (4c34 <_sercom_get_default_pad+0x110>)
    4b3a:	4298      	cmp	r0, r3
    4b3c:	d037      	beq.n	4bae <_sercom_get_default_pad+0x8a>
    4b3e:	2000      	movs	r0, #0
    4b40:	4770      	bx	lr
    4b42:	4b3d      	ldr	r3, [pc, #244]	; (4c38 <_sercom_get_default_pad+0x114>)
    4b44:	4298      	cmp	r0, r3
    4b46:	d00c      	beq.n	4b62 <_sercom_get_default_pad+0x3e>
    4b48:	4b3c      	ldr	r3, [pc, #240]	; (4c3c <_sercom_get_default_pad+0x118>)
    4b4a:	4298      	cmp	r0, r3
    4b4c:	d1f7      	bne.n	4b3e <_sercom_get_default_pad+0x1a>
    4b4e:	2901      	cmp	r1, #1
    4b50:	d017      	beq.n	4b82 <_sercom_get_default_pad+0x5e>
    4b52:	2900      	cmp	r1, #0
    4b54:	d05d      	beq.n	4c12 <_sercom_get_default_pad+0xee>
    4b56:	2902      	cmp	r1, #2
    4b58:	d015      	beq.n	4b86 <_sercom_get_default_pad+0x62>
    4b5a:	2903      	cmp	r1, #3
    4b5c:	d015      	beq.n	4b8a <_sercom_get_default_pad+0x66>
    4b5e:	2000      	movs	r0, #0
    4b60:	e7ee      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4b62:	2901      	cmp	r1, #1
    4b64:	d007      	beq.n	4b76 <_sercom_get_default_pad+0x52>
    4b66:	2900      	cmp	r1, #0
    4b68:	d051      	beq.n	4c0e <_sercom_get_default_pad+0xea>
    4b6a:	2902      	cmp	r1, #2
    4b6c:	d005      	beq.n	4b7a <_sercom_get_default_pad+0x56>
    4b6e:	2903      	cmp	r1, #3
    4b70:	d005      	beq.n	4b7e <_sercom_get_default_pad+0x5a>
    4b72:	2000      	movs	r0, #0
    4b74:	e7e4      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4b76:	4832      	ldr	r0, [pc, #200]	; (4c40 <_sercom_get_default_pad+0x11c>)
    4b78:	e7e2      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4b7a:	4832      	ldr	r0, [pc, #200]	; (4c44 <_sercom_get_default_pad+0x120>)
    4b7c:	e7e0      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4b7e:	4832      	ldr	r0, [pc, #200]	; (4c48 <_sercom_get_default_pad+0x124>)
    4b80:	e7de      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4b82:	4832      	ldr	r0, [pc, #200]	; (4c4c <_sercom_get_default_pad+0x128>)
    4b84:	e7dc      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4b86:	4832      	ldr	r0, [pc, #200]	; (4c50 <_sercom_get_default_pad+0x12c>)
    4b88:	e7da      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4b8a:	4832      	ldr	r0, [pc, #200]	; (4c54 <_sercom_get_default_pad+0x130>)
    4b8c:	e7d8      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4b8e:	2901      	cmp	r1, #1
    4b90:	d007      	beq.n	4ba2 <_sercom_get_default_pad+0x7e>
    4b92:	2900      	cmp	r1, #0
    4b94:	d03f      	beq.n	4c16 <_sercom_get_default_pad+0xf2>
    4b96:	2902      	cmp	r1, #2
    4b98:	d005      	beq.n	4ba6 <_sercom_get_default_pad+0x82>
    4b9a:	2903      	cmp	r1, #3
    4b9c:	d005      	beq.n	4baa <_sercom_get_default_pad+0x86>
    4b9e:	2000      	movs	r0, #0
    4ba0:	e7ce      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4ba2:	482d      	ldr	r0, [pc, #180]	; (4c58 <_sercom_get_default_pad+0x134>)
    4ba4:	e7cc      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4ba6:	482d      	ldr	r0, [pc, #180]	; (4c5c <_sercom_get_default_pad+0x138>)
    4ba8:	e7ca      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4baa:	482d      	ldr	r0, [pc, #180]	; (4c60 <_sercom_get_default_pad+0x13c>)
    4bac:	e7c8      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4bae:	2901      	cmp	r1, #1
    4bb0:	d007      	beq.n	4bc2 <_sercom_get_default_pad+0x9e>
    4bb2:	2900      	cmp	r1, #0
    4bb4:	d031      	beq.n	4c1a <_sercom_get_default_pad+0xf6>
    4bb6:	2902      	cmp	r1, #2
    4bb8:	d005      	beq.n	4bc6 <_sercom_get_default_pad+0xa2>
    4bba:	2903      	cmp	r1, #3
    4bbc:	d005      	beq.n	4bca <_sercom_get_default_pad+0xa6>
    4bbe:	2000      	movs	r0, #0
    4bc0:	e7be      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4bc2:	4828      	ldr	r0, [pc, #160]	; (4c64 <_sercom_get_default_pad+0x140>)
    4bc4:	e7bc      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4bc6:	4828      	ldr	r0, [pc, #160]	; (4c68 <_sercom_get_default_pad+0x144>)
    4bc8:	e7ba      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4bca:	4828      	ldr	r0, [pc, #160]	; (4c6c <_sercom_get_default_pad+0x148>)
    4bcc:	e7b8      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4bce:	2901      	cmp	r1, #1
    4bd0:	d007      	beq.n	4be2 <_sercom_get_default_pad+0xbe>
    4bd2:	2900      	cmp	r1, #0
    4bd4:	d023      	beq.n	4c1e <_sercom_get_default_pad+0xfa>
    4bd6:	2902      	cmp	r1, #2
    4bd8:	d005      	beq.n	4be6 <_sercom_get_default_pad+0xc2>
    4bda:	2903      	cmp	r1, #3
    4bdc:	d005      	beq.n	4bea <_sercom_get_default_pad+0xc6>
    4bde:	2000      	movs	r0, #0
    4be0:	e7ae      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4be2:	4823      	ldr	r0, [pc, #140]	; (4c70 <_sercom_get_default_pad+0x14c>)
    4be4:	e7ac      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4be6:	4823      	ldr	r0, [pc, #140]	; (4c74 <_sercom_get_default_pad+0x150>)
    4be8:	e7aa      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4bea:	4823      	ldr	r0, [pc, #140]	; (4c78 <_sercom_get_default_pad+0x154>)
    4bec:	e7a8      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4bee:	2901      	cmp	r1, #1
    4bf0:	d007      	beq.n	4c02 <_sercom_get_default_pad+0xde>
    4bf2:	2900      	cmp	r1, #0
    4bf4:	d015      	beq.n	4c22 <_sercom_get_default_pad+0xfe>
    4bf6:	2902      	cmp	r1, #2
    4bf8:	d005      	beq.n	4c06 <_sercom_get_default_pad+0xe2>
    4bfa:	2903      	cmp	r1, #3
    4bfc:	d005      	beq.n	4c0a <_sercom_get_default_pad+0xe6>
    4bfe:	2000      	movs	r0, #0
    4c00:	e79e      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c02:	481e      	ldr	r0, [pc, #120]	; (4c7c <_sercom_get_default_pad+0x158>)
    4c04:	e79c      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c06:	481e      	ldr	r0, [pc, #120]	; (4c80 <_sercom_get_default_pad+0x15c>)
    4c08:	e79a      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c0a:	481e      	ldr	r0, [pc, #120]	; (4c84 <_sercom_get_default_pad+0x160>)
    4c0c:	e798      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c0e:	481e      	ldr	r0, [pc, #120]	; (4c88 <_sercom_get_default_pad+0x164>)
    4c10:	e796      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c12:	2003      	movs	r0, #3
    4c14:	e794      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c16:	481d      	ldr	r0, [pc, #116]	; (4c8c <_sercom_get_default_pad+0x168>)
    4c18:	e792      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c1a:	481d      	ldr	r0, [pc, #116]	; (4c90 <_sercom_get_default_pad+0x16c>)
    4c1c:	e790      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c1e:	481d      	ldr	r0, [pc, #116]	; (4c94 <_sercom_get_default_pad+0x170>)
    4c20:	e78e      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c22:	481d      	ldr	r0, [pc, #116]	; (4c98 <_sercom_get_default_pad+0x174>)
    4c24:	e78c      	b.n	4b40 <_sercom_get_default_pad+0x1c>
    4c26:	46c0      	nop			; (mov r8, r8)
    4c28:	42001000 	.word	0x42001000
    4c2c:	42001800 	.word	0x42001800
    4c30:	42001c00 	.word	0x42001c00
    4c34:	42001400 	.word	0x42001400
    4c38:	42000800 	.word	0x42000800
    4c3c:	42000c00 	.word	0x42000c00
    4c40:	00050003 	.word	0x00050003
    4c44:	00060003 	.word	0x00060003
    4c48:	00070003 	.word	0x00070003
    4c4c:	00010003 	.word	0x00010003
    4c50:	001e0003 	.word	0x001e0003
    4c54:	001f0003 	.word	0x001f0003
    4c58:	00090003 	.word	0x00090003
    4c5c:	000a0003 	.word	0x000a0003
    4c60:	000b0003 	.word	0x000b0003
    4c64:	00110003 	.word	0x00110003
    4c68:	00120003 	.word	0x00120003
    4c6c:	00130003 	.word	0x00130003
    4c70:	000d0003 	.word	0x000d0003
    4c74:	000e0003 	.word	0x000e0003
    4c78:	000f0003 	.word	0x000f0003
    4c7c:	00170003 	.word	0x00170003
    4c80:	00180003 	.word	0x00180003
    4c84:	00190003 	.word	0x00190003
    4c88:	00040003 	.word	0x00040003
    4c8c:	00080003 	.word	0x00080003
    4c90:	00100003 	.word	0x00100003
    4c94:	000c0003 	.word	0x000c0003
    4c98:	00160003 	.word	0x00160003

00004c9c <_sercom_get_sercom_inst_index>:
    4c9c:	b530      	push	{r4, r5, lr}
    4c9e:	b087      	sub	sp, #28
    4ca0:	4b0b      	ldr	r3, [pc, #44]	; (4cd0 <_sercom_get_sercom_inst_index+0x34>)
    4ca2:	466a      	mov	r2, sp
    4ca4:	cb32      	ldmia	r3!, {r1, r4, r5}
    4ca6:	c232      	stmia	r2!, {r1, r4, r5}
    4ca8:	cb32      	ldmia	r3!, {r1, r4, r5}
    4caa:	c232      	stmia	r2!, {r1, r4, r5}
    4cac:	9b00      	ldr	r3, [sp, #0]
    4cae:	4283      	cmp	r3, r0
    4cb0:	d00b      	beq.n	4cca <_sercom_get_sercom_inst_index+0x2e>
    4cb2:	2301      	movs	r3, #1
    4cb4:	009a      	lsls	r2, r3, #2
    4cb6:	4669      	mov	r1, sp
    4cb8:	5852      	ldr	r2, [r2, r1]
    4cba:	4282      	cmp	r2, r0
    4cbc:	d006      	beq.n	4ccc <_sercom_get_sercom_inst_index+0x30>
    4cbe:	3301      	adds	r3, #1
    4cc0:	2b06      	cmp	r3, #6
    4cc2:	d1f7      	bne.n	4cb4 <_sercom_get_sercom_inst_index+0x18>
    4cc4:	2000      	movs	r0, #0
    4cc6:	b007      	add	sp, #28
    4cc8:	bd30      	pop	{r4, r5, pc}
    4cca:	2300      	movs	r3, #0
    4ccc:	b2d8      	uxtb	r0, r3
    4cce:	e7fa      	b.n	4cc6 <_sercom_get_sercom_inst_index+0x2a>
    4cd0:	0000e32c 	.word	0x0000e32c

00004cd4 <_sercom_default_handler>:
    4cd4:	4770      	bx	lr
	...

00004cd8 <_sercom_set_handler>:
    4cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cda:	4b0a      	ldr	r3, [pc, #40]	; (4d04 <_sercom_set_handler+0x2c>)
    4cdc:	781b      	ldrb	r3, [r3, #0]
    4cde:	2b00      	cmp	r3, #0
    4ce0:	d10c      	bne.n	4cfc <_sercom_set_handler+0x24>
    4ce2:	4f09      	ldr	r7, [pc, #36]	; (4d08 <_sercom_set_handler+0x30>)
    4ce4:	4e09      	ldr	r6, [pc, #36]	; (4d0c <_sercom_set_handler+0x34>)
    4ce6:	4d0a      	ldr	r5, [pc, #40]	; (4d10 <_sercom_set_handler+0x38>)
    4ce8:	2400      	movs	r4, #0
    4cea:	51de      	str	r6, [r3, r7]
    4cec:	195a      	adds	r2, r3, r5
    4cee:	6014      	str	r4, [r2, #0]
    4cf0:	3304      	adds	r3, #4
    4cf2:	2b18      	cmp	r3, #24
    4cf4:	d1f9      	bne.n	4cea <_sercom_set_handler+0x12>
    4cf6:	2201      	movs	r2, #1
    4cf8:	4b02      	ldr	r3, [pc, #8]	; (4d04 <_sercom_set_handler+0x2c>)
    4cfa:	701a      	strb	r2, [r3, #0]
    4cfc:	0080      	lsls	r0, r0, #2
    4cfe:	4b02      	ldr	r3, [pc, #8]	; (4d08 <_sercom_set_handler+0x30>)
    4d00:	50c1      	str	r1, [r0, r3]
    4d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d04:	200003e2 	.word	0x200003e2
    4d08:	200003e4 	.word	0x200003e4
    4d0c:	00004cd5 	.word	0x00004cd5
    4d10:	20001068 	.word	0x20001068

00004d14 <_sercom_get_interrupt_vector>:
    4d14:	b500      	push	{lr}
    4d16:	b083      	sub	sp, #12
    4d18:	2309      	movs	r3, #9
    4d1a:	466a      	mov	r2, sp
    4d1c:	7013      	strb	r3, [r2, #0]
    4d1e:	3301      	adds	r3, #1
    4d20:	7053      	strb	r3, [r2, #1]
    4d22:	3301      	adds	r3, #1
    4d24:	7093      	strb	r3, [r2, #2]
    4d26:	3301      	adds	r3, #1
    4d28:	70d3      	strb	r3, [r2, #3]
    4d2a:	3301      	adds	r3, #1
    4d2c:	7113      	strb	r3, [r2, #4]
    4d2e:	3301      	adds	r3, #1
    4d30:	7153      	strb	r3, [r2, #5]
    4d32:	4b03      	ldr	r3, [pc, #12]	; (4d40 <_sercom_get_interrupt_vector+0x2c>)
    4d34:	4798      	blx	r3
    4d36:	466b      	mov	r3, sp
    4d38:	5618      	ldrsb	r0, [r3, r0]
    4d3a:	b003      	add	sp, #12
    4d3c:	bd00      	pop	{pc}
    4d3e:	46c0      	nop			; (mov r8, r8)
    4d40:	00004c9d 	.word	0x00004c9d

00004d44 <SERCOM0_Handler>:
    4d44:	b510      	push	{r4, lr}
    4d46:	4b02      	ldr	r3, [pc, #8]	; (4d50 <SERCOM0_Handler+0xc>)
    4d48:	681b      	ldr	r3, [r3, #0]
    4d4a:	2000      	movs	r0, #0
    4d4c:	4798      	blx	r3
    4d4e:	bd10      	pop	{r4, pc}
    4d50:	200003e4 	.word	0x200003e4

00004d54 <SERCOM1_Handler>:
    4d54:	b510      	push	{r4, lr}
    4d56:	4b02      	ldr	r3, [pc, #8]	; (4d60 <SERCOM1_Handler+0xc>)
    4d58:	685b      	ldr	r3, [r3, #4]
    4d5a:	2001      	movs	r0, #1
    4d5c:	4798      	blx	r3
    4d5e:	bd10      	pop	{r4, pc}
    4d60:	200003e4 	.word	0x200003e4

00004d64 <SERCOM2_Handler>:
    4d64:	b510      	push	{r4, lr}
    4d66:	4b02      	ldr	r3, [pc, #8]	; (4d70 <SERCOM2_Handler+0xc>)
    4d68:	689b      	ldr	r3, [r3, #8]
    4d6a:	2002      	movs	r0, #2
    4d6c:	4798      	blx	r3
    4d6e:	bd10      	pop	{r4, pc}
    4d70:	200003e4 	.word	0x200003e4

00004d74 <SERCOM3_Handler>:
    4d74:	b510      	push	{r4, lr}
    4d76:	4b02      	ldr	r3, [pc, #8]	; (4d80 <SERCOM3_Handler+0xc>)
    4d78:	68db      	ldr	r3, [r3, #12]
    4d7a:	2003      	movs	r0, #3
    4d7c:	4798      	blx	r3
    4d7e:	bd10      	pop	{r4, pc}
    4d80:	200003e4 	.word	0x200003e4

00004d84 <SERCOM4_Handler>:
    4d84:	b510      	push	{r4, lr}
    4d86:	4b02      	ldr	r3, [pc, #8]	; (4d90 <SERCOM4_Handler+0xc>)
    4d88:	691b      	ldr	r3, [r3, #16]
    4d8a:	2004      	movs	r0, #4
    4d8c:	4798      	blx	r3
    4d8e:	bd10      	pop	{r4, pc}
    4d90:	200003e4 	.word	0x200003e4

00004d94 <SERCOM5_Handler>:
    4d94:	b510      	push	{r4, lr}
    4d96:	4b02      	ldr	r3, [pc, #8]	; (4da0 <SERCOM5_Handler+0xc>)
    4d98:	695b      	ldr	r3, [r3, #20]
    4d9a:	2005      	movs	r0, #5
    4d9c:	4798      	blx	r3
    4d9e:	bd10      	pop	{r4, pc}
    4da0:	200003e4 	.word	0x200003e4

00004da4 <spi_set_baudrate>:
    4da4:	b570      	push	{r4, r5, r6, lr}
    4da6:	b082      	sub	sp, #8
    4da8:	0005      	movs	r5, r0
    4daa:	000c      	movs	r4, r1
    4dac:	2200      	movs	r2, #0
    4dae:	466b      	mov	r3, sp
    4db0:	80da      	strh	r2, [r3, #6]
    4db2:	6806      	ldr	r6, [r0, #0]
    4db4:	0030      	movs	r0, r6
    4db6:	4b24      	ldr	r3, [pc, #144]	; (4e48 <spi_set_baudrate+0xa4>)
    4db8:	4798      	blx	r3
    4dba:	231f      	movs	r3, #31
    4dbc:	4018      	ands	r0, r3
    4dbe:	3b1e      	subs	r3, #30
    4dc0:	4083      	lsls	r3, r0
    4dc2:	2280      	movs	r2, #128	; 0x80
    4dc4:	4921      	ldr	r1, [pc, #132]	; (4e4c <spi_set_baudrate+0xa8>)
    4dc6:	508b      	str	r3, [r1, r2]
    4dc8:	682a      	ldr	r2, [r5, #0]
    4dca:	69d3      	ldr	r3, [r2, #28]
    4dcc:	2b00      	cmp	r3, #0
    4dce:	d1fc      	bne.n	4dca <spi_set_baudrate+0x26>
    4dd0:	338f      	adds	r3, #143	; 0x8f
    4dd2:	7533      	strb	r3, [r6, #20]
    4dd4:	7633      	strb	r3, [r6, #24]
    4dd6:	6833      	ldr	r3, [r6, #0]
    4dd8:	2202      	movs	r2, #2
    4dda:	4393      	bics	r3, r2
    4ddc:	6033      	str	r3, [r6, #0]
    4dde:	6828      	ldr	r0, [r5, #0]
    4de0:	69c3      	ldr	r3, [r0, #28]
    4de2:	2b00      	cmp	r3, #0
    4de4:	d1fc      	bne.n	4de0 <spi_set_baudrate+0x3c>
    4de6:	4b1a      	ldr	r3, [pc, #104]	; (4e50 <spi_set_baudrate+0xac>)
    4de8:	4798      	blx	r3
    4dea:	3014      	adds	r0, #20
    4dec:	b2c0      	uxtb	r0, r0
    4dee:	4b19      	ldr	r3, [pc, #100]	; (4e54 <spi_set_baudrate+0xb0>)
    4df0:	4798      	blx	r3
    4df2:	0001      	movs	r1, r0
    4df4:	466b      	mov	r3, sp
    4df6:	1d9a      	adds	r2, r3, #6
    4df8:	0020      	movs	r0, r4
    4dfa:	4b17      	ldr	r3, [pc, #92]	; (4e58 <spi_set_baudrate+0xb4>)
    4dfc:	4798      	blx	r3
    4dfe:	1e04      	subs	r4, r0, #0
    4e00:	d003      	beq.n	4e0a <spi_set_baudrate+0x66>
    4e02:	2417      	movs	r4, #23
    4e04:	0020      	movs	r0, r4
    4e06:	b002      	add	sp, #8
    4e08:	bd70      	pop	{r4, r5, r6, pc}
    4e0a:	466b      	mov	r3, sp
    4e0c:	3306      	adds	r3, #6
    4e0e:	781b      	ldrb	r3, [r3, #0]
    4e10:	7333      	strb	r3, [r6, #12]
    4e12:	682e      	ldr	r6, [r5, #0]
    4e14:	69f3      	ldr	r3, [r6, #28]
    4e16:	2b00      	cmp	r3, #0
    4e18:	d1fc      	bne.n	4e14 <spi_set_baudrate+0x70>
    4e1a:	0030      	movs	r0, r6
    4e1c:	4b0a      	ldr	r3, [pc, #40]	; (4e48 <spi_set_baudrate+0xa4>)
    4e1e:	4798      	blx	r3
    4e20:	231f      	movs	r3, #31
    4e22:	4018      	ands	r0, r3
    4e24:	3b1e      	subs	r3, #30
    4e26:	4083      	lsls	r3, r0
    4e28:	4a08      	ldr	r2, [pc, #32]	; (4e4c <spi_set_baudrate+0xa8>)
    4e2a:	6013      	str	r3, [r2, #0]
    4e2c:	682a      	ldr	r2, [r5, #0]
    4e2e:	69d3      	ldr	r3, [r2, #28]
    4e30:	2b00      	cmp	r3, #0
    4e32:	d1fc      	bne.n	4e2e <spi_set_baudrate+0x8a>
    4e34:	6833      	ldr	r3, [r6, #0]
    4e36:	2202      	movs	r2, #2
    4e38:	4313      	orrs	r3, r2
    4e3a:	6033      	str	r3, [r6, #0]
    4e3c:	682a      	ldr	r2, [r5, #0]
    4e3e:	69d3      	ldr	r3, [r2, #28]
    4e40:	2b00      	cmp	r3, #0
    4e42:	d1fc      	bne.n	4e3e <spi_set_baudrate+0x9a>
    4e44:	e7de      	b.n	4e04 <spi_set_baudrate+0x60>
    4e46:	46c0      	nop			; (mov r8, r8)
    4e48:	00004d15 	.word	0x00004d15
    4e4c:	e000e100 	.word	0xe000e100
    4e50:	00004c9d 	.word	0x00004c9d
    4e54:	00006071 	.word	0x00006071
    4e58:	00004a1b 	.word	0x00004a1b

00004e5c <spi_init>:
    4e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e5e:	b08b      	sub	sp, #44	; 0x2c
    4e60:	0005      	movs	r5, r0
    4e62:	000c      	movs	r4, r1
    4e64:	0016      	movs	r6, r2
    4e66:	6029      	str	r1, [r5, #0]
    4e68:	680b      	ldr	r3, [r1, #0]
    4e6a:	201c      	movs	r0, #28
    4e6c:	079b      	lsls	r3, r3, #30
    4e6e:	d501      	bpl.n	4e74 <spi_init+0x18>
    4e70:	b00b      	add	sp, #44	; 0x2c
    4e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e74:	680b      	ldr	r3, [r1, #0]
    4e76:	3817      	subs	r0, #23
    4e78:	07db      	lsls	r3, r3, #31
    4e7a:	d4f9      	bmi.n	4e70 <spi_init+0x14>
    4e7c:	0008      	movs	r0, r1
    4e7e:	4b60      	ldr	r3, [pc, #384]	; (5000 <spi_init+0x1a4>)
    4e80:	4798      	blx	r3
    4e82:	4a60      	ldr	r2, [pc, #384]	; (5004 <spi_init+0x1a8>)
    4e84:	6a11      	ldr	r1, [r2, #32]
    4e86:	1c87      	adds	r7, r0, #2
    4e88:	2301      	movs	r3, #1
    4e8a:	40bb      	lsls	r3, r7
    4e8c:	430b      	orrs	r3, r1
    4e8e:	6213      	str	r3, [r2, #32]
    4e90:	a909      	add	r1, sp, #36	; 0x24
    4e92:	2724      	movs	r7, #36	; 0x24
    4e94:	5df3      	ldrb	r3, [r6, r7]
    4e96:	700b      	strb	r3, [r1, #0]
    4e98:	3014      	adds	r0, #20
    4e9a:	b2c3      	uxtb	r3, r0
    4e9c:	9301      	str	r3, [sp, #4]
    4e9e:	0018      	movs	r0, r3
    4ea0:	4b59      	ldr	r3, [pc, #356]	; (5008 <spi_init+0x1ac>)
    4ea2:	4798      	blx	r3
    4ea4:	9801      	ldr	r0, [sp, #4]
    4ea6:	4b59      	ldr	r3, [pc, #356]	; (500c <spi_init+0x1b0>)
    4ea8:	4798      	blx	r3
    4eaa:	5df0      	ldrb	r0, [r6, r7]
    4eac:	2100      	movs	r1, #0
    4eae:	4b58      	ldr	r3, [pc, #352]	; (5010 <spi_init+0x1b4>)
    4eb0:	4798      	blx	r3
    4eb2:	7833      	ldrb	r3, [r6, #0]
    4eb4:	2b01      	cmp	r3, #1
    4eb6:	d038      	beq.n	4f2a <spi_init+0xce>
    4eb8:	002b      	movs	r3, r5
    4eba:	330c      	adds	r3, #12
    4ebc:	0029      	movs	r1, r5
    4ebe:	3128      	adds	r1, #40	; 0x28
    4ec0:	2200      	movs	r2, #0
    4ec2:	c304      	stmia	r3!, {r2}
    4ec4:	428b      	cmp	r3, r1
    4ec6:	d1fc      	bne.n	4ec2 <spi_init+0x66>
    4ec8:	2300      	movs	r3, #0
    4eca:	62eb      	str	r3, [r5, #44]	; 0x2c
    4ecc:	62ab      	str	r3, [r5, #40]	; 0x28
    4ece:	2400      	movs	r4, #0
    4ed0:	86ab      	strh	r3, [r5, #52]	; 0x34
    4ed2:	862b      	strh	r3, [r5, #48]	; 0x30
    4ed4:	3336      	adds	r3, #54	; 0x36
    4ed6:	54ec      	strb	r4, [r5, r3]
    4ed8:	3301      	adds	r3, #1
    4eda:	54ec      	strb	r4, [r5, r3]
    4edc:	3301      	adds	r3, #1
    4ede:	54ec      	strb	r4, [r5, r3]
    4ee0:	3b35      	subs	r3, #53	; 0x35
    4ee2:	726b      	strb	r3, [r5, #9]
    4ee4:	712c      	strb	r4, [r5, #4]
    4ee6:	6828      	ldr	r0, [r5, #0]
    4ee8:	4b45      	ldr	r3, [pc, #276]	; (5000 <spi_init+0x1a4>)
    4eea:	4798      	blx	r3
    4eec:	0007      	movs	r7, r0
    4eee:	4949      	ldr	r1, [pc, #292]	; (5014 <spi_init+0x1b8>)
    4ef0:	4b49      	ldr	r3, [pc, #292]	; (5018 <spi_init+0x1bc>)
    4ef2:	4798      	blx	r3
    4ef4:	00bf      	lsls	r7, r7, #2
    4ef6:	4b49      	ldr	r3, [pc, #292]	; (501c <spi_init+0x1c0>)
    4ef8:	50fd      	str	r5, [r7, r3]
    4efa:	682f      	ldr	r7, [r5, #0]
    4efc:	ab04      	add	r3, sp, #16
    4efe:	2280      	movs	r2, #128	; 0x80
    4f00:	701a      	strb	r2, [r3, #0]
    4f02:	705c      	strb	r4, [r3, #1]
    4f04:	3a7f      	subs	r2, #127	; 0x7f
    4f06:	709a      	strb	r2, [r3, #2]
    4f08:	70dc      	strb	r4, [r3, #3]
    4f0a:	7833      	ldrb	r3, [r6, #0]
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	d102      	bne.n	4f16 <spi_init+0xba>
    4f10:	2200      	movs	r2, #0
    4f12:	ab04      	add	r3, sp, #16
    4f14:	709a      	strb	r2, [r3, #2]
    4f16:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4f18:	9305      	str	r3, [sp, #20]
    4f1a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4f1c:	9306      	str	r3, [sp, #24]
    4f1e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4f20:	9307      	str	r3, [sp, #28]
    4f22:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4f24:	9308      	str	r3, [sp, #32]
    4f26:	2400      	movs	r4, #0
    4f28:	e00b      	b.n	4f42 <spi_init+0xe6>
    4f2a:	6823      	ldr	r3, [r4, #0]
    4f2c:	220c      	movs	r2, #12
    4f2e:	4313      	orrs	r3, r2
    4f30:	6023      	str	r3, [r4, #0]
    4f32:	e7c1      	b.n	4eb8 <spi_init+0x5c>
    4f34:	0038      	movs	r0, r7
    4f36:	4b3a      	ldr	r3, [pc, #232]	; (5020 <spi_init+0x1c4>)
    4f38:	4798      	blx	r3
    4f3a:	e00a      	b.n	4f52 <spi_init+0xf6>
    4f3c:	3401      	adds	r4, #1
    4f3e:	2c04      	cmp	r4, #4
    4f40:	d010      	beq.n	4f64 <spi_init+0x108>
    4f42:	b2e1      	uxtb	r1, r4
    4f44:	00a3      	lsls	r3, r4, #2
    4f46:	aa02      	add	r2, sp, #8
    4f48:	200c      	movs	r0, #12
    4f4a:	1812      	adds	r2, r2, r0
    4f4c:	58d0      	ldr	r0, [r2, r3]
    4f4e:	2800      	cmp	r0, #0
    4f50:	d0f0      	beq.n	4f34 <spi_init+0xd8>
    4f52:	1c43      	adds	r3, r0, #1
    4f54:	d0f2      	beq.n	4f3c <spi_init+0xe0>
    4f56:	a904      	add	r1, sp, #16
    4f58:	7008      	strb	r0, [r1, #0]
    4f5a:	0c00      	lsrs	r0, r0, #16
    4f5c:	b2c0      	uxtb	r0, r0
    4f5e:	4b31      	ldr	r3, [pc, #196]	; (5024 <spi_init+0x1c8>)
    4f60:	4798      	blx	r3
    4f62:	e7eb      	b.n	4f3c <spi_init+0xe0>
    4f64:	7833      	ldrb	r3, [r6, #0]
    4f66:	716b      	strb	r3, [r5, #5]
    4f68:	7c33      	ldrb	r3, [r6, #16]
    4f6a:	71ab      	strb	r3, [r5, #6]
    4f6c:	7cb3      	ldrb	r3, [r6, #18]
    4f6e:	71eb      	strb	r3, [r5, #7]
    4f70:	7d33      	ldrb	r3, [r6, #20]
    4f72:	722b      	strb	r3, [r5, #8]
    4f74:	2200      	movs	r2, #0
    4f76:	ab02      	add	r3, sp, #8
    4f78:	80da      	strh	r2, [r3, #6]
    4f7a:	7833      	ldrb	r3, [r6, #0]
    4f7c:	2b01      	cmp	r3, #1
    4f7e:	d028      	beq.n	4fd2 <spi_init+0x176>
    4f80:	6873      	ldr	r3, [r6, #4]
    4f82:	68b2      	ldr	r2, [r6, #8]
    4f84:	4313      	orrs	r3, r2
    4f86:	68f2      	ldr	r2, [r6, #12]
    4f88:	4313      	orrs	r3, r2
    4f8a:	7c31      	ldrb	r1, [r6, #16]
    4f8c:	7c72      	ldrb	r2, [r6, #17]
    4f8e:	2a00      	cmp	r2, #0
    4f90:	d103      	bne.n	4f9a <spi_init+0x13e>
    4f92:	4a25      	ldr	r2, [pc, #148]	; (5028 <spi_init+0x1cc>)
    4f94:	7892      	ldrb	r2, [r2, #2]
    4f96:	0792      	lsls	r2, r2, #30
    4f98:	d501      	bpl.n	4f9e <spi_init+0x142>
    4f9a:	2280      	movs	r2, #128	; 0x80
    4f9c:	4313      	orrs	r3, r2
    4f9e:	7cb2      	ldrb	r2, [r6, #18]
    4fa0:	2a00      	cmp	r2, #0
    4fa2:	d002      	beq.n	4faa <spi_init+0x14e>
    4fa4:	2280      	movs	r2, #128	; 0x80
    4fa6:	0292      	lsls	r2, r2, #10
    4fa8:	4311      	orrs	r1, r2
    4faa:	7cf2      	ldrb	r2, [r6, #19]
    4fac:	2a00      	cmp	r2, #0
    4fae:	d002      	beq.n	4fb6 <spi_init+0x15a>
    4fb0:	2280      	movs	r2, #128	; 0x80
    4fb2:	0092      	lsls	r2, r2, #2
    4fb4:	4311      	orrs	r1, r2
    4fb6:	7d32      	ldrb	r2, [r6, #20]
    4fb8:	2a00      	cmp	r2, #0
    4fba:	d002      	beq.n	4fc2 <spi_init+0x166>
    4fbc:	2280      	movs	r2, #128	; 0x80
    4fbe:	0192      	lsls	r2, r2, #6
    4fc0:	4311      	orrs	r1, r2
    4fc2:	683a      	ldr	r2, [r7, #0]
    4fc4:	4313      	orrs	r3, r2
    4fc6:	603b      	str	r3, [r7, #0]
    4fc8:	687b      	ldr	r3, [r7, #4]
    4fca:	430b      	orrs	r3, r1
    4fcc:	607b      	str	r3, [r7, #4]
    4fce:	2000      	movs	r0, #0
    4fd0:	e74e      	b.n	4e70 <spi_init+0x14>
    4fd2:	6828      	ldr	r0, [r5, #0]
    4fd4:	4b0a      	ldr	r3, [pc, #40]	; (5000 <spi_init+0x1a4>)
    4fd6:	4798      	blx	r3
    4fd8:	3014      	adds	r0, #20
    4fda:	b2c0      	uxtb	r0, r0
    4fdc:	4b13      	ldr	r3, [pc, #76]	; (502c <spi_init+0x1d0>)
    4fde:	4798      	blx	r3
    4fe0:	0001      	movs	r1, r0
    4fe2:	ab02      	add	r3, sp, #8
    4fe4:	1d9a      	adds	r2, r3, #6
    4fe6:	69b0      	ldr	r0, [r6, #24]
    4fe8:	4b11      	ldr	r3, [pc, #68]	; (5030 <spi_init+0x1d4>)
    4fea:	4798      	blx	r3
    4fec:	0003      	movs	r3, r0
    4fee:	2017      	movs	r0, #23
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d000      	beq.n	4ff6 <spi_init+0x19a>
    4ff4:	e73c      	b.n	4e70 <spi_init+0x14>
    4ff6:	ab02      	add	r3, sp, #8
    4ff8:	3306      	adds	r3, #6
    4ffa:	781b      	ldrb	r3, [r3, #0]
    4ffc:	733b      	strb	r3, [r7, #12]
    4ffe:	e7bf      	b.n	4f80 <spi_init+0x124>
    5000:	00004c9d 	.word	0x00004c9d
    5004:	40000400 	.word	0x40000400
    5008:	00006055 	.word	0x00006055
    500c:	00005fc9 	.word	0x00005fc9
    5010:	00004ad9 	.word	0x00004ad9
    5014:	000052c9 	.word	0x000052c9
    5018:	00004cd9 	.word	0x00004cd9
    501c:	20001068 	.word	0x20001068
    5020:	00004b25 	.word	0x00004b25
    5024:	0000614d 	.word	0x0000614d
    5028:	41002000 	.word	0x41002000
    502c:	00006071 	.word	0x00006071
    5030:	00004a1b 	.word	0x00004a1b

00005034 <spi_read_buffer_wait>:
    5034:	b5f0      	push	{r4, r5, r6, r7, lr}
    5036:	46d6      	mov	lr, sl
    5038:	4647      	mov	r7, r8
    503a:	b580      	push	{r7, lr}
    503c:	b083      	sub	sp, #12
    503e:	2438      	movs	r4, #56	; 0x38
    5040:	5d05      	ldrb	r5, [r0, r4]
    5042:	3c33      	subs	r4, #51	; 0x33
    5044:	2d05      	cmp	r5, #5
    5046:	d002      	beq.n	504e <spi_read_buffer_wait+0x1a>
    5048:	3412      	adds	r4, #18
    504a:	2a00      	cmp	r2, #0
    504c:	d105      	bne.n	505a <spi_read_buffer_wait+0x26>
    504e:	0020      	movs	r0, r4
    5050:	b003      	add	sp, #12
    5052:	bc0c      	pop	{r2, r3}
    5054:	4690      	mov	r8, r2
    5056:	469a      	mov	sl, r3
    5058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    505a:	79c4      	ldrb	r4, [r0, #7]
    505c:	2c00      	cmp	r4, #0
    505e:	d144      	bne.n	50ea <spi_read_buffer_wait+0xb6>
    5060:	341c      	adds	r4, #28
    5062:	e7f4      	b.n	504e <spi_read_buffer_wait+0x1a>
    5064:	6805      	ldr	r5, [r0, #0]
    5066:	7e2c      	ldrb	r4, [r5, #24]
    5068:	423c      	tst	r4, r7
    506a:	d0fc      	beq.n	5066 <spi_read_buffer_wait+0x32>
    506c:	7e2c      	ldrb	r4, [r5, #24]
    506e:	423c      	tst	r4, r7
    5070:	d01a      	beq.n	50a8 <spi_read_buffer_wait+0x74>
    5072:	4644      	mov	r4, r8
    5074:	62ac      	str	r4, [r5, #40]	; 0x28
    5076:	e017      	b.n	50a8 <spi_read_buffer_wait+0x74>
    5078:	7984      	ldrb	r4, [r0, #6]
    507a:	2c01      	cmp	r4, #1
    507c:	d026      	beq.n	50cc <spi_read_buffer_wait+0x98>
    507e:	6aad      	ldr	r5, [r5, #40]	; 0x28
    5080:	b2ec      	uxtb	r4, r5
    5082:	46a4      	mov	ip, r4
    5084:	9c01      	ldr	r4, [sp, #4]
    5086:	2c00      	cmp	r4, #0
    5088:	d13a      	bne.n	5100 <spi_read_buffer_wait+0xcc>
    508a:	1c75      	adds	r5, r6, #1
    508c:	b2ad      	uxth	r5, r5
    508e:	4664      	mov	r4, ip
    5090:	558c      	strb	r4, [r1, r6]
    5092:	7984      	ldrb	r4, [r0, #6]
    5094:	2c01      	cmp	r4, #1
    5096:	d01e      	beq.n	50d6 <spi_read_buffer_wait+0xa2>
    5098:	002e      	movs	r6, r5
    509a:	3a01      	subs	r2, #1
    509c:	b292      	uxth	r2, r2
    509e:	4552      	cmp	r2, sl
    50a0:	d01f      	beq.n	50e2 <spi_read_buffer_wait+0xae>
    50a2:	7944      	ldrb	r4, [r0, #5]
    50a4:	2c01      	cmp	r4, #1
    50a6:	d0dd      	beq.n	5064 <spi_read_buffer_wait+0x30>
    50a8:	6805      	ldr	r5, [r0, #0]
    50aa:	7e2c      	ldrb	r4, [r5, #24]
    50ac:	421c      	tst	r4, r3
    50ae:	d0fc      	beq.n	50aa <spi_read_buffer_wait+0x76>
    50b0:	7e2c      	ldrb	r4, [r5, #24]
    50b2:	421c      	tst	r4, r3
    50b4:	d017      	beq.n	50e6 <spi_read_buffer_wait+0xb2>
    50b6:	8b6c      	ldrh	r4, [r5, #26]
    50b8:	46a4      	mov	ip, r4
    50ba:	2400      	movs	r4, #0
    50bc:	9401      	str	r4, [sp, #4]
    50be:	4664      	mov	r4, ip
    50c0:	421c      	tst	r4, r3
    50c2:	d0d9      	beq.n	5078 <spi_read_buffer_wait+0x44>
    50c4:	836b      	strh	r3, [r5, #26]
    50c6:	241e      	movs	r4, #30
    50c8:	9401      	str	r4, [sp, #4]
    50ca:	e7d5      	b.n	5078 <spi_read_buffer_wait+0x44>
    50cc:	6aac      	ldr	r4, [r5, #40]	; 0x28
    50ce:	05e4      	lsls	r4, r4, #23
    50d0:	0de4      	lsrs	r4, r4, #23
    50d2:	46a4      	mov	ip, r4
    50d4:	e7d6      	b.n	5084 <spi_read_buffer_wait+0x50>
    50d6:	3602      	adds	r6, #2
    50d8:	b2b6      	uxth	r6, r6
    50da:	4664      	mov	r4, ip
    50dc:	0a24      	lsrs	r4, r4, #8
    50de:	554c      	strb	r4, [r1, r5]
    50e0:	e7db      	b.n	509a <spi_read_buffer_wait+0x66>
    50e2:	9c01      	ldr	r4, [sp, #4]
    50e4:	e7b3      	b.n	504e <spi_read_buffer_wait+0x1a>
    50e6:	2410      	movs	r4, #16
    50e8:	e7b1      	b.n	504e <spi_read_buffer_wait+0x1a>
    50ea:	3a01      	subs	r2, #1
    50ec:	b292      	uxth	r2, r2
    50ee:	2600      	movs	r6, #0
    50f0:	2701      	movs	r7, #1
    50f2:	05db      	lsls	r3, r3, #23
    50f4:	0ddb      	lsrs	r3, r3, #23
    50f6:	4698      	mov	r8, r3
    50f8:	2304      	movs	r3, #4
    50fa:	4c02      	ldr	r4, [pc, #8]	; (5104 <spi_read_buffer_wait+0xd0>)
    50fc:	46a2      	mov	sl, r4
    50fe:	e7d0      	b.n	50a2 <spi_read_buffer_wait+0x6e>
    5100:	9c01      	ldr	r4, [sp, #4]
    5102:	e7a4      	b.n	504e <spi_read_buffer_wait+0x1a>
    5104:	0000ffff 	.word	0x0000ffff

00005108 <spi_select_slave>:
    5108:	b510      	push	{r4, lr}
    510a:	7944      	ldrb	r4, [r0, #5]
    510c:	2315      	movs	r3, #21
    510e:	2c01      	cmp	r4, #1
    5110:	d001      	beq.n	5116 <spi_select_slave+0xe>
    5112:	0018      	movs	r0, r3
    5114:	bd10      	pop	{r4, pc}
    5116:	7a04      	ldrb	r4, [r0, #8]
    5118:	2300      	movs	r3, #0
    511a:	2c00      	cmp	r4, #0
    511c:	d1f9      	bne.n	5112 <spi_select_slave+0xa>
    511e:	2a00      	cmp	r2, #0
    5120:	d058      	beq.n	51d4 <spi_select_slave+0xcc>
    5122:	784b      	ldrb	r3, [r1, #1]
    5124:	2b00      	cmp	r3, #0
    5126:	d044      	beq.n	51b2 <spi_select_slave+0xaa>
    5128:	6803      	ldr	r3, [r0, #0]
    512a:	7e1b      	ldrb	r3, [r3, #24]
    512c:	07db      	lsls	r3, r3, #31
    512e:	d410      	bmi.n	5152 <spi_select_slave+0x4a>
    5130:	780a      	ldrb	r2, [r1, #0]
    5132:	09d1      	lsrs	r1, r2, #7
    5134:	2300      	movs	r3, #0
    5136:	2900      	cmp	r1, #0
    5138:	d104      	bne.n	5144 <spi_select_slave+0x3c>
    513a:	0953      	lsrs	r3, r2, #5
    513c:	01db      	lsls	r3, r3, #7
    513e:	492e      	ldr	r1, [pc, #184]	; (51f8 <spi_select_slave+0xf0>)
    5140:	468c      	mov	ip, r1
    5142:	4463      	add	r3, ip
    5144:	211f      	movs	r1, #31
    5146:	4011      	ands	r1, r2
    5148:	2201      	movs	r2, #1
    514a:	408a      	lsls	r2, r1
    514c:	619a      	str	r2, [r3, #24]
    514e:	2305      	movs	r3, #5
    5150:	e7df      	b.n	5112 <spi_select_slave+0xa>
    5152:	780a      	ldrb	r2, [r1, #0]
    5154:	09d4      	lsrs	r4, r2, #7
    5156:	2300      	movs	r3, #0
    5158:	2c00      	cmp	r4, #0
    515a:	d104      	bne.n	5166 <spi_select_slave+0x5e>
    515c:	0953      	lsrs	r3, r2, #5
    515e:	01db      	lsls	r3, r3, #7
    5160:	4c25      	ldr	r4, [pc, #148]	; (51f8 <spi_select_slave+0xf0>)
    5162:	46a4      	mov	ip, r4
    5164:	4463      	add	r3, ip
    5166:	241f      	movs	r4, #31
    5168:	4014      	ands	r4, r2
    516a:	2201      	movs	r2, #1
    516c:	40a2      	lsls	r2, r4
    516e:	615a      	str	r2, [r3, #20]
    5170:	6803      	ldr	r3, [r0, #0]
    5172:	7e1a      	ldrb	r2, [r3, #24]
    5174:	07d2      	lsls	r2, r2, #31
    5176:	d501      	bpl.n	517c <spi_select_slave+0x74>
    5178:	788a      	ldrb	r2, [r1, #2]
    517a:	629a      	str	r2, [r3, #40]	; 0x28
    517c:	79c2      	ldrb	r2, [r0, #7]
    517e:	2300      	movs	r3, #0
    5180:	2a00      	cmp	r2, #0
    5182:	d1c6      	bne.n	5112 <spi_select_slave+0xa>
    5184:	6802      	ldr	r2, [r0, #0]
    5186:	2104      	movs	r1, #4
    5188:	7e13      	ldrb	r3, [r2, #24]
    518a:	420b      	tst	r3, r1
    518c:	d0fc      	beq.n	5188 <spi_select_slave+0x80>
    518e:	7e11      	ldrb	r1, [r2, #24]
    5190:	2300      	movs	r3, #0
    5192:	0749      	lsls	r1, r1, #29
    5194:	d5bd      	bpl.n	5112 <spi_select_slave+0xa>
    5196:	8b53      	ldrh	r3, [r2, #26]
    5198:	075b      	lsls	r3, r3, #29
    519a:	d501      	bpl.n	51a0 <spi_select_slave+0x98>
    519c:	2304      	movs	r3, #4
    519e:	8353      	strh	r3, [r2, #26]
    51a0:	7983      	ldrb	r3, [r0, #6]
    51a2:	2b01      	cmp	r3, #1
    51a4:	d002      	beq.n	51ac <spi_select_slave+0xa4>
    51a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    51a8:	2300      	movs	r3, #0
    51aa:	e7b2      	b.n	5112 <spi_select_slave+0xa>
    51ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    51ae:	2300      	movs	r3, #0
    51b0:	e7af      	b.n	5112 <spi_select_slave+0xa>
    51b2:	780a      	ldrb	r2, [r1, #0]
    51b4:	09d1      	lsrs	r1, r2, #7
    51b6:	2300      	movs	r3, #0
    51b8:	2900      	cmp	r1, #0
    51ba:	d104      	bne.n	51c6 <spi_select_slave+0xbe>
    51bc:	0953      	lsrs	r3, r2, #5
    51be:	01db      	lsls	r3, r3, #7
    51c0:	490d      	ldr	r1, [pc, #52]	; (51f8 <spi_select_slave+0xf0>)
    51c2:	468c      	mov	ip, r1
    51c4:	4463      	add	r3, ip
    51c6:	211f      	movs	r1, #31
    51c8:	4011      	ands	r1, r2
    51ca:	2201      	movs	r2, #1
    51cc:	408a      	lsls	r2, r1
    51ce:	615a      	str	r2, [r3, #20]
    51d0:	2300      	movs	r3, #0
    51d2:	e79e      	b.n	5112 <spi_select_slave+0xa>
    51d4:	780a      	ldrb	r2, [r1, #0]
    51d6:	09d1      	lsrs	r1, r2, #7
    51d8:	2300      	movs	r3, #0
    51da:	2900      	cmp	r1, #0
    51dc:	d104      	bne.n	51e8 <spi_select_slave+0xe0>
    51de:	0953      	lsrs	r3, r2, #5
    51e0:	01db      	lsls	r3, r3, #7
    51e2:	4905      	ldr	r1, [pc, #20]	; (51f8 <spi_select_slave+0xf0>)
    51e4:	468c      	mov	ip, r1
    51e6:	4463      	add	r3, ip
    51e8:	211f      	movs	r1, #31
    51ea:	4011      	ands	r1, r2
    51ec:	2201      	movs	r2, #1
    51ee:	408a      	lsls	r2, r1
    51f0:	619a      	str	r2, [r3, #24]
    51f2:	2300      	movs	r3, #0
    51f4:	e78d      	b.n	5112 <spi_select_slave+0xa>
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	41004400 	.word	0x41004400

000051fc <spi_write_buffer_wait>:
    51fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    51fe:	46de      	mov	lr, fp
    5200:	4657      	mov	r7, sl
    5202:	464e      	mov	r6, r9
    5204:	4645      	mov	r5, r8
    5206:	b5e0      	push	{r5, r6, r7, lr}
    5208:	b083      	sub	sp, #12
    520a:	468a      	mov	sl, r1
    520c:	2338      	movs	r3, #56	; 0x38
    520e:	5cc4      	ldrb	r4, [r0, r3]
    5210:	3b33      	subs	r3, #51	; 0x33
    5212:	2c05      	cmp	r4, #5
    5214:	d002      	beq.n	521c <spi_write_buffer_wait+0x20>
    5216:	3312      	adds	r3, #18
    5218:	2a00      	cmp	r2, #0
    521a:	d14b      	bne.n	52b4 <spi_write_buffer_wait+0xb8>
    521c:	0018      	movs	r0, r3
    521e:	b003      	add	sp, #12
    5220:	bc3c      	pop	{r2, r3, r4, r5}
    5222:	4690      	mov	r8, r2
    5224:	4699      	mov	r9, r3
    5226:	46a2      	mov	sl, r4
    5228:	46ab      	mov	fp, r5
    522a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    522c:	3702      	adds	r7, #2
    522e:	b2bf      	uxth	r7, r7
    5230:	4641      	mov	r1, r8
    5232:	4653      	mov	r3, sl
    5234:	5c59      	ldrb	r1, [r3, r1]
    5236:	0209      	lsls	r1, r1, #8
    5238:	465b      	mov	r3, fp
    523a:	430b      	orrs	r3, r1
    523c:	e018      	b.n	5270 <spi_write_buffer_wait+0x74>
    523e:	7983      	ldrb	r3, [r0, #6]
    5240:	2b01      	cmp	r3, #1
    5242:	d02a      	beq.n	529a <spi_write_buffer_wait+0x9e>
    5244:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5246:	3e01      	subs	r6, #1
    5248:	b2b6      	uxth	r6, r6
    524a:	4566      	cmp	r6, ip
    524c:	d027      	beq.n	529e <spi_write_buffer_wait+0xa2>
    524e:	6802      	ldr	r2, [r0, #0]
    5250:	7e13      	ldrb	r3, [r2, #24]
    5252:	4223      	tst	r3, r4
    5254:	d0fc      	beq.n	5250 <spi_write_buffer_wait+0x54>
    5256:	1c7b      	adds	r3, r7, #1
    5258:	b29b      	uxth	r3, r3
    525a:	4698      	mov	r8, r3
    525c:	4653      	mov	r3, sl
    525e:	5ddb      	ldrb	r3, [r3, r7]
    5260:	469b      	mov	fp, r3
    5262:	7981      	ldrb	r1, [r0, #6]
    5264:	2901      	cmp	r1, #1
    5266:	d0e1      	beq.n	522c <spi_write_buffer_wait+0x30>
    5268:	4669      	mov	r1, sp
    526a:	80cb      	strh	r3, [r1, #6]
    526c:	88cb      	ldrh	r3, [r1, #6]
    526e:	4647      	mov	r7, r8
    5270:	7e11      	ldrb	r1, [r2, #24]
    5272:	4221      	tst	r1, r4
    5274:	d002      	beq.n	527c <spi_write_buffer_wait+0x80>
    5276:	05db      	lsls	r3, r3, #23
    5278:	0ddb      	lsrs	r3, r3, #23
    527a:	6293      	str	r3, [r2, #40]	; 0x28
    527c:	79c3      	ldrb	r3, [r0, #7]
    527e:	2b00      	cmp	r3, #0
    5280:	d0e1      	beq.n	5246 <spi_write_buffer_wait+0x4a>
    5282:	6802      	ldr	r2, [r0, #0]
    5284:	7e13      	ldrb	r3, [r2, #24]
    5286:	422b      	tst	r3, r5
    5288:	d0fc      	beq.n	5284 <spi_write_buffer_wait+0x88>
    528a:	7e13      	ldrb	r3, [r2, #24]
    528c:	422b      	tst	r3, r5
    528e:	d0da      	beq.n	5246 <spi_write_buffer_wait+0x4a>
    5290:	8b53      	ldrh	r3, [r2, #26]
    5292:	422b      	tst	r3, r5
    5294:	d0d3      	beq.n	523e <spi_write_buffer_wait+0x42>
    5296:	8355      	strh	r5, [r2, #26]
    5298:	e7d1      	b.n	523e <spi_write_buffer_wait+0x42>
    529a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    529c:	e7d3      	b.n	5246 <spi_write_buffer_wait+0x4a>
    529e:	7942      	ldrb	r2, [r0, #5]
    52a0:	2300      	movs	r3, #0
    52a2:	2a01      	cmp	r2, #1
    52a4:	d1ba      	bne.n	521c <spi_write_buffer_wait+0x20>
    52a6:	6801      	ldr	r1, [r0, #0]
    52a8:	3201      	adds	r2, #1
    52aa:	7e0b      	ldrb	r3, [r1, #24]
    52ac:	4213      	tst	r3, r2
    52ae:	d0fc      	beq.n	52aa <spi_write_buffer_wait+0xae>
    52b0:	2300      	movs	r3, #0
    52b2:	e7b3      	b.n	521c <spi_write_buffer_wait+0x20>
    52b4:	3a01      	subs	r2, #1
    52b6:	b296      	uxth	r6, r2
    52b8:	2700      	movs	r7, #0
    52ba:	2401      	movs	r4, #1
    52bc:	2504      	movs	r5, #4
    52be:	4b01      	ldr	r3, [pc, #4]	; (52c4 <spi_write_buffer_wait+0xc8>)
    52c0:	469c      	mov	ip, r3
    52c2:	e7c4      	b.n	524e <spi_write_buffer_wait+0x52>
    52c4:	0000ffff 	.word	0x0000ffff

000052c8 <_spi_interrupt_handler>:
    52c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52ca:	0080      	lsls	r0, r0, #2
    52cc:	4b70      	ldr	r3, [pc, #448]	; (5490 <_spi_interrupt_handler+0x1c8>)
    52ce:	58c4      	ldr	r4, [r0, r3]
    52d0:	6826      	ldr	r6, [r4, #0]
    52d2:	2337      	movs	r3, #55	; 0x37
    52d4:	5ce7      	ldrb	r7, [r4, r3]
    52d6:	2236      	movs	r2, #54	; 0x36
    52d8:	5ca2      	ldrb	r2, [r4, r2]
    52da:	4017      	ands	r7, r2
    52dc:	7e33      	ldrb	r3, [r6, #24]
    52de:	7db5      	ldrb	r5, [r6, #22]
    52e0:	401d      	ands	r5, r3
    52e2:	07eb      	lsls	r3, r5, #31
    52e4:	d502      	bpl.n	52ec <_spi_interrupt_handler+0x24>
    52e6:	7963      	ldrb	r3, [r4, #5]
    52e8:	2b01      	cmp	r3, #1
    52ea:	d01e      	beq.n	532a <_spi_interrupt_handler+0x62>
    52ec:	076b      	lsls	r3, r5, #29
    52ee:	d511      	bpl.n	5314 <_spi_interrupt_handler+0x4c>
    52f0:	8b73      	ldrh	r3, [r6, #26]
    52f2:	075b      	lsls	r3, r3, #29
    52f4:	d55a      	bpl.n	53ac <_spi_interrupt_handler+0xe4>
    52f6:	7a63      	ldrb	r3, [r4, #9]
    52f8:	2b01      	cmp	r3, #1
    52fa:	d008      	beq.n	530e <_spi_interrupt_handler+0x46>
    52fc:	221e      	movs	r2, #30
    52fe:	2338      	movs	r3, #56	; 0x38
    5300:	54e2      	strb	r2, [r4, r3]
    5302:	3b35      	subs	r3, #53	; 0x35
    5304:	7263      	strb	r3, [r4, #9]
    5306:	3302      	adds	r3, #2
    5308:	7533      	strb	r3, [r6, #20]
    530a:	073b      	lsls	r3, r7, #28
    530c:	d44a      	bmi.n	53a4 <_spi_interrupt_handler+0xdc>
    530e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5310:	2304      	movs	r3, #4
    5312:	8373      	strh	r3, [r6, #26]
    5314:	07ab      	lsls	r3, r5, #30
    5316:	d503      	bpl.n	5320 <_spi_interrupt_handler+0x58>
    5318:	7963      	ldrb	r3, [r4, #5]
    531a:	2b01      	cmp	r3, #1
    531c:	d100      	bne.n	5320 <_spi_interrupt_handler+0x58>
    531e:	e097      	b.n	5450 <_spi_interrupt_handler+0x188>
    5320:	b26d      	sxtb	r5, r5
    5322:	2d00      	cmp	r5, #0
    5324:	da00      	bge.n	5328 <_spi_interrupt_handler+0x60>
    5326:	e0a9      	b.n	547c <_spi_interrupt_handler+0x1b4>
    5328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    532a:	7a63      	ldrb	r3, [r4, #9]
    532c:	2b00      	cmp	r3, #0
    532e:	d022      	beq.n	5376 <_spi_interrupt_handler+0xae>
    5330:	7a63      	ldrb	r3, [r4, #9]
    5332:	2b00      	cmp	r3, #0
    5334:	d0da      	beq.n	52ec <_spi_interrupt_handler+0x24>
    5336:	6821      	ldr	r1, [r4, #0]
    5338:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    533a:	7813      	ldrb	r3, [r2, #0]
    533c:	b2db      	uxtb	r3, r3
    533e:	1c50      	adds	r0, r2, #1
    5340:	62e0      	str	r0, [r4, #44]	; 0x2c
    5342:	79a0      	ldrb	r0, [r4, #6]
    5344:	2801      	cmp	r0, #1
    5346:	d027      	beq.n	5398 <_spi_interrupt_handler+0xd0>
    5348:	b29b      	uxth	r3, r3
    534a:	05db      	lsls	r3, r3, #23
    534c:	0ddb      	lsrs	r3, r3, #23
    534e:	628b      	str	r3, [r1, #40]	; 0x28
    5350:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    5352:	3b01      	subs	r3, #1
    5354:	b29b      	uxth	r3, r3
    5356:	86a3      	strh	r3, [r4, #52]	; 0x34
    5358:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    535a:	b29b      	uxth	r3, r3
    535c:	2b00      	cmp	r3, #0
    535e:	d1c5      	bne.n	52ec <_spi_interrupt_handler+0x24>
    5360:	3301      	adds	r3, #1
    5362:	7533      	strb	r3, [r6, #20]
    5364:	7a63      	ldrb	r3, [r4, #9]
    5366:	2b01      	cmp	r3, #1
    5368:	d1c0      	bne.n	52ec <_spi_interrupt_handler+0x24>
    536a:	79e3      	ldrb	r3, [r4, #7]
    536c:	2b00      	cmp	r3, #0
    536e:	d1bd      	bne.n	52ec <_spi_interrupt_handler+0x24>
    5370:	3302      	adds	r3, #2
    5372:	75b3      	strb	r3, [r6, #22]
    5374:	e7ba      	b.n	52ec <_spi_interrupt_handler+0x24>
    5376:	4b47      	ldr	r3, [pc, #284]	; (5494 <_spi_interrupt_handler+0x1cc>)
    5378:	881b      	ldrh	r3, [r3, #0]
    537a:	62b3      	str	r3, [r6, #40]	; 0x28
    537c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    537e:	3b01      	subs	r3, #1
    5380:	b29b      	uxth	r3, r3
    5382:	8663      	strh	r3, [r4, #50]	; 0x32
    5384:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5386:	b29b      	uxth	r3, r3
    5388:	2b00      	cmp	r3, #0
    538a:	d101      	bne.n	5390 <_spi_interrupt_handler+0xc8>
    538c:	3301      	adds	r3, #1
    538e:	7533      	strb	r3, [r6, #20]
    5390:	7963      	ldrb	r3, [r4, #5]
    5392:	2b01      	cmp	r3, #1
    5394:	d0cc      	beq.n	5330 <_spi_interrupt_handler+0x68>
    5396:	e7a9      	b.n	52ec <_spi_interrupt_handler+0x24>
    5398:	7850      	ldrb	r0, [r2, #1]
    539a:	0200      	lsls	r0, r0, #8
    539c:	4303      	orrs	r3, r0
    539e:	3202      	adds	r2, #2
    53a0:	62e2      	str	r2, [r4, #44]	; 0x2c
    53a2:	e7d2      	b.n	534a <_spi_interrupt_handler+0x82>
    53a4:	0020      	movs	r0, r4
    53a6:	69a3      	ldr	r3, [r4, #24]
    53a8:	4798      	blx	r3
    53aa:	e7b0      	b.n	530e <_spi_interrupt_handler+0x46>
    53ac:	7a63      	ldrb	r3, [r4, #9]
    53ae:	2b01      	cmp	r3, #1
    53b0:	d028      	beq.n	5404 <_spi_interrupt_handler+0x13c>
    53b2:	6823      	ldr	r3, [r4, #0]
    53b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53b6:	05db      	lsls	r3, r3, #23
    53b8:	0ddb      	lsrs	r3, r3, #23
    53ba:	b2da      	uxtb	r2, r3
    53bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    53be:	700a      	strb	r2, [r1, #0]
    53c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    53c2:	1c51      	adds	r1, r2, #1
    53c4:	62a1      	str	r1, [r4, #40]	; 0x28
    53c6:	79a1      	ldrb	r1, [r4, #6]
    53c8:	2901      	cmp	r1, #1
    53ca:	d034      	beq.n	5436 <_spi_interrupt_handler+0x16e>
    53cc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    53ce:	3b01      	subs	r3, #1
    53d0:	b29b      	uxth	r3, r3
    53d2:	8623      	strh	r3, [r4, #48]	; 0x30
    53d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    53d6:	b29b      	uxth	r3, r3
    53d8:	2b00      	cmp	r3, #0
    53da:	d000      	beq.n	53de <_spi_interrupt_handler+0x116>
    53dc:	e79a      	b.n	5314 <_spi_interrupt_handler+0x4c>
    53de:	2200      	movs	r2, #0
    53e0:	3338      	adds	r3, #56	; 0x38
    53e2:	54e2      	strb	r2, [r4, r3]
    53e4:	3b34      	subs	r3, #52	; 0x34
    53e6:	7533      	strb	r3, [r6, #20]
    53e8:	7a63      	ldrb	r3, [r4, #9]
    53ea:	2b02      	cmp	r3, #2
    53ec:	d029      	beq.n	5442 <_spi_interrupt_handler+0x17a>
    53ee:	7a63      	ldrb	r3, [r4, #9]
    53f0:	2b00      	cmp	r3, #0
    53f2:	d000      	beq.n	53f6 <_spi_interrupt_handler+0x12e>
    53f4:	e78e      	b.n	5314 <_spi_interrupt_handler+0x4c>
    53f6:	07bb      	lsls	r3, r7, #30
    53f8:	d400      	bmi.n	53fc <_spi_interrupt_handler+0x134>
    53fa:	e78b      	b.n	5314 <_spi_interrupt_handler+0x4c>
    53fc:	0020      	movs	r0, r4
    53fe:	6923      	ldr	r3, [r4, #16]
    5400:	4798      	blx	r3
    5402:	e787      	b.n	5314 <_spi_interrupt_handler+0x4c>
    5404:	6823      	ldr	r3, [r4, #0]
    5406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5408:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    540a:	3b01      	subs	r3, #1
    540c:	b29b      	uxth	r3, r3
    540e:	8663      	strh	r3, [r4, #50]	; 0x32
    5410:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5412:	b29b      	uxth	r3, r3
    5414:	2b00      	cmp	r3, #0
    5416:	d000      	beq.n	541a <_spi_interrupt_handler+0x152>
    5418:	e77c      	b.n	5314 <_spi_interrupt_handler+0x4c>
    541a:	3304      	adds	r3, #4
    541c:	7533      	strb	r3, [r6, #20]
    541e:	2200      	movs	r2, #0
    5420:	3334      	adds	r3, #52	; 0x34
    5422:	54e2      	strb	r2, [r4, r3]
    5424:	3b35      	subs	r3, #53	; 0x35
    5426:	7263      	strb	r3, [r4, #9]
    5428:	07fb      	lsls	r3, r7, #31
    542a:	d400      	bmi.n	542e <_spi_interrupt_handler+0x166>
    542c:	e772      	b.n	5314 <_spi_interrupt_handler+0x4c>
    542e:	0020      	movs	r0, r4
    5430:	68e3      	ldr	r3, [r4, #12]
    5432:	4798      	blx	r3
    5434:	e76e      	b.n	5314 <_spi_interrupt_handler+0x4c>
    5436:	0a1b      	lsrs	r3, r3, #8
    5438:	7053      	strb	r3, [r2, #1]
    543a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    543c:	3301      	adds	r3, #1
    543e:	62a3      	str	r3, [r4, #40]	; 0x28
    5440:	e7c4      	b.n	53cc <_spi_interrupt_handler+0x104>
    5442:	077b      	lsls	r3, r7, #29
    5444:	d400      	bmi.n	5448 <_spi_interrupt_handler+0x180>
    5446:	e765      	b.n	5314 <_spi_interrupt_handler+0x4c>
    5448:	0020      	movs	r0, r4
    544a:	6963      	ldr	r3, [r4, #20]
    544c:	4798      	blx	r3
    544e:	e761      	b.n	5314 <_spi_interrupt_handler+0x4c>
    5450:	7a63      	ldrb	r3, [r4, #9]
    5452:	2b01      	cmp	r3, #1
    5454:	d000      	beq.n	5458 <_spi_interrupt_handler+0x190>
    5456:	e763      	b.n	5320 <_spi_interrupt_handler+0x58>
    5458:	79e3      	ldrb	r3, [r4, #7]
    545a:	2b00      	cmp	r3, #0
    545c:	d000      	beq.n	5460 <_spi_interrupt_handler+0x198>
    545e:	e75f      	b.n	5320 <_spi_interrupt_handler+0x58>
    5460:	3302      	adds	r3, #2
    5462:	7533      	strb	r3, [r6, #20]
    5464:	3301      	adds	r3, #1
    5466:	7263      	strb	r3, [r4, #9]
    5468:	2200      	movs	r2, #0
    546a:	3335      	adds	r3, #53	; 0x35
    546c:	54e2      	strb	r2, [r4, r3]
    546e:	07fb      	lsls	r3, r7, #31
    5470:	d400      	bmi.n	5474 <_spi_interrupt_handler+0x1ac>
    5472:	e755      	b.n	5320 <_spi_interrupt_handler+0x58>
    5474:	0020      	movs	r0, r4
    5476:	68e3      	ldr	r3, [r4, #12]
    5478:	4798      	blx	r3
    547a:	e751      	b.n	5320 <_spi_interrupt_handler+0x58>
    547c:	2380      	movs	r3, #128	; 0x80
    547e:	7533      	strb	r3, [r6, #20]
    5480:	7633      	strb	r3, [r6, #24]
    5482:	067b      	lsls	r3, r7, #25
    5484:	d400      	bmi.n	5488 <_spi_interrupt_handler+0x1c0>
    5486:	e74f      	b.n	5328 <_spi_interrupt_handler+0x60>
    5488:	6a63      	ldr	r3, [r4, #36]	; 0x24
    548a:	0020      	movs	r0, r4
    548c:	4798      	blx	r3
    548e:	e74b      	b.n	5328 <_spi_interrupt_handler+0x60>
    5490:	20001068 	.word	0x20001068
    5494:	20001080 	.word	0x20001080

00005498 <usart_init>:
    5498:	b5f0      	push	{r4, r5, r6, r7, lr}
    549a:	46de      	mov	lr, fp
    549c:	4657      	mov	r7, sl
    549e:	464e      	mov	r6, r9
    54a0:	4645      	mov	r5, r8
    54a2:	b5e0      	push	{r5, r6, r7, lr}
    54a4:	b091      	sub	sp, #68	; 0x44
    54a6:	0005      	movs	r5, r0
    54a8:	000c      	movs	r4, r1
    54aa:	0016      	movs	r6, r2
    54ac:	6029      	str	r1, [r5, #0]
    54ae:	0008      	movs	r0, r1
    54b0:	4bbc      	ldr	r3, [pc, #752]	; (57a4 <usart_init+0x30c>)
    54b2:	4798      	blx	r3
    54b4:	0002      	movs	r2, r0
    54b6:	6823      	ldr	r3, [r4, #0]
    54b8:	2005      	movs	r0, #5
    54ba:	07db      	lsls	r3, r3, #31
    54bc:	d506      	bpl.n	54cc <usart_init+0x34>
    54be:	b011      	add	sp, #68	; 0x44
    54c0:	bc3c      	pop	{r2, r3, r4, r5}
    54c2:	4690      	mov	r8, r2
    54c4:	4699      	mov	r9, r3
    54c6:	46a2      	mov	sl, r4
    54c8:	46ab      	mov	fp, r5
    54ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54cc:	6823      	ldr	r3, [r4, #0]
    54ce:	3017      	adds	r0, #23
    54d0:	079b      	lsls	r3, r3, #30
    54d2:	d4f4      	bmi.n	54be <usart_init+0x26>
    54d4:	49b4      	ldr	r1, [pc, #720]	; (57a8 <usart_init+0x310>)
    54d6:	6a08      	ldr	r0, [r1, #32]
    54d8:	1c97      	adds	r7, r2, #2
    54da:	2301      	movs	r3, #1
    54dc:	40bb      	lsls	r3, r7
    54de:	4303      	orrs	r3, r0
    54e0:	620b      	str	r3, [r1, #32]
    54e2:	a90f      	add	r1, sp, #60	; 0x3c
    54e4:	272d      	movs	r7, #45	; 0x2d
    54e6:	5df3      	ldrb	r3, [r6, r7]
    54e8:	700b      	strb	r3, [r1, #0]
    54ea:	3214      	adds	r2, #20
    54ec:	b2d3      	uxtb	r3, r2
    54ee:	9302      	str	r3, [sp, #8]
    54f0:	0018      	movs	r0, r3
    54f2:	4bae      	ldr	r3, [pc, #696]	; (57ac <usart_init+0x314>)
    54f4:	4798      	blx	r3
    54f6:	9802      	ldr	r0, [sp, #8]
    54f8:	4bad      	ldr	r3, [pc, #692]	; (57b0 <usart_init+0x318>)
    54fa:	4798      	blx	r3
    54fc:	5df0      	ldrb	r0, [r6, r7]
    54fe:	2100      	movs	r1, #0
    5500:	4bac      	ldr	r3, [pc, #688]	; (57b4 <usart_init+0x31c>)
    5502:	4798      	blx	r3
    5504:	7af3      	ldrb	r3, [r6, #11]
    5506:	716b      	strb	r3, [r5, #5]
    5508:	2324      	movs	r3, #36	; 0x24
    550a:	5cf3      	ldrb	r3, [r6, r3]
    550c:	71ab      	strb	r3, [r5, #6]
    550e:	2325      	movs	r3, #37	; 0x25
    5510:	5cf3      	ldrb	r3, [r6, r3]
    5512:	71eb      	strb	r3, [r5, #7]
    5514:	7ef3      	ldrb	r3, [r6, #27]
    5516:	722b      	strb	r3, [r5, #8]
    5518:	7f33      	ldrb	r3, [r6, #28]
    551a:	726b      	strb	r3, [r5, #9]
    551c:	682b      	ldr	r3, [r5, #0]
    551e:	4698      	mov	r8, r3
    5520:	0018      	movs	r0, r3
    5522:	4ba0      	ldr	r3, [pc, #640]	; (57a4 <usart_init+0x30c>)
    5524:	4798      	blx	r3
    5526:	3014      	adds	r0, #20
    5528:	2200      	movs	r2, #0
    552a:	230e      	movs	r3, #14
    552c:	a906      	add	r1, sp, #24
    552e:	468c      	mov	ip, r1
    5530:	4463      	add	r3, ip
    5532:	801a      	strh	r2, [r3, #0]
    5534:	8a32      	ldrh	r2, [r6, #16]
    5536:	9202      	str	r2, [sp, #8]
    5538:	2380      	movs	r3, #128	; 0x80
    553a:	01db      	lsls	r3, r3, #7
    553c:	429a      	cmp	r2, r3
    553e:	d100      	bne.n	5542 <usart_init+0xaa>
    5540:	e09e      	b.n	5680 <usart_init+0x1e8>
    5542:	d90f      	bls.n	5564 <usart_init+0xcc>
    5544:	23c0      	movs	r3, #192	; 0xc0
    5546:	01db      	lsls	r3, r3, #7
    5548:	9a02      	ldr	r2, [sp, #8]
    554a:	429a      	cmp	r2, r3
    554c:	d100      	bne.n	5550 <usart_init+0xb8>
    554e:	e092      	b.n	5676 <usart_init+0x1de>
    5550:	2380      	movs	r3, #128	; 0x80
    5552:	021b      	lsls	r3, r3, #8
    5554:	429a      	cmp	r2, r3
    5556:	d000      	beq.n	555a <usart_init+0xc2>
    5558:	e11f      	b.n	579a <usart_init+0x302>
    555a:	2303      	movs	r3, #3
    555c:	9306      	str	r3, [sp, #24]
    555e:	2300      	movs	r3, #0
    5560:	9307      	str	r3, [sp, #28]
    5562:	e008      	b.n	5576 <usart_init+0xde>
    5564:	2380      	movs	r3, #128	; 0x80
    5566:	019b      	lsls	r3, r3, #6
    5568:	429a      	cmp	r2, r3
    556a:	d000      	beq.n	556e <usart_init+0xd6>
    556c:	e115      	b.n	579a <usart_init+0x302>
    556e:	2310      	movs	r3, #16
    5570:	9306      	str	r3, [sp, #24]
    5572:	3b0f      	subs	r3, #15
    5574:	9307      	str	r3, [sp, #28]
    5576:	6833      	ldr	r3, [r6, #0]
    5578:	9305      	str	r3, [sp, #20]
    557a:	68f3      	ldr	r3, [r6, #12]
    557c:	9303      	str	r3, [sp, #12]
    557e:	6973      	ldr	r3, [r6, #20]
    5580:	9304      	str	r3, [sp, #16]
    5582:	7e33      	ldrb	r3, [r6, #24]
    5584:	469b      	mov	fp, r3
    5586:	2326      	movs	r3, #38	; 0x26
    5588:	5cf3      	ldrb	r3, [r6, r3]
    558a:	469a      	mov	sl, r3
    558c:	6873      	ldr	r3, [r6, #4]
    558e:	4699      	mov	r9, r3
    5590:	2b00      	cmp	r3, #0
    5592:	d100      	bne.n	5596 <usart_init+0xfe>
    5594:	e0a0      	b.n	56d8 <usart_init+0x240>
    5596:	2380      	movs	r3, #128	; 0x80
    5598:	055b      	lsls	r3, r3, #21
    559a:	4599      	cmp	r9, r3
    559c:	d100      	bne.n	55a0 <usart_init+0x108>
    559e:	e084      	b.n	56aa <usart_init+0x212>
    55a0:	7e73      	ldrb	r3, [r6, #25]
    55a2:	2b00      	cmp	r3, #0
    55a4:	d002      	beq.n	55ac <usart_init+0x114>
    55a6:	7eb3      	ldrb	r3, [r6, #26]
    55a8:	4642      	mov	r2, r8
    55aa:	7393      	strb	r3, [r2, #14]
    55ac:	682a      	ldr	r2, [r5, #0]
    55ae:	9f02      	ldr	r7, [sp, #8]
    55b0:	69d3      	ldr	r3, [r2, #28]
    55b2:	2b00      	cmp	r3, #0
    55b4:	d1fc      	bne.n	55b0 <usart_init+0x118>
    55b6:	330e      	adds	r3, #14
    55b8:	aa06      	add	r2, sp, #24
    55ba:	4694      	mov	ip, r2
    55bc:	4463      	add	r3, ip
    55be:	881b      	ldrh	r3, [r3, #0]
    55c0:	4642      	mov	r2, r8
    55c2:	8193      	strh	r3, [r2, #12]
    55c4:	9b05      	ldr	r3, [sp, #20]
    55c6:	9a03      	ldr	r2, [sp, #12]
    55c8:	4313      	orrs	r3, r2
    55ca:	9a04      	ldr	r2, [sp, #16]
    55cc:	4313      	orrs	r3, r2
    55ce:	464a      	mov	r2, r9
    55d0:	4313      	orrs	r3, r2
    55d2:	431f      	orrs	r7, r3
    55d4:	465b      	mov	r3, fp
    55d6:	021b      	lsls	r3, r3, #8
    55d8:	431f      	orrs	r7, r3
    55da:	4653      	mov	r3, sl
    55dc:	075b      	lsls	r3, r3, #29
    55de:	431f      	orrs	r7, r3
    55e0:	2327      	movs	r3, #39	; 0x27
    55e2:	5cf3      	ldrb	r3, [r6, r3]
    55e4:	2b00      	cmp	r3, #0
    55e6:	d101      	bne.n	55ec <usart_init+0x154>
    55e8:	3304      	adds	r3, #4
    55ea:	431f      	orrs	r7, r3
    55ec:	7e73      	ldrb	r3, [r6, #25]
    55ee:	029b      	lsls	r3, r3, #10
    55f0:	7f32      	ldrb	r2, [r6, #28]
    55f2:	0252      	lsls	r2, r2, #9
    55f4:	4313      	orrs	r3, r2
    55f6:	7f72      	ldrb	r2, [r6, #29]
    55f8:	0212      	lsls	r2, r2, #8
    55fa:	4313      	orrs	r3, r2
    55fc:	2224      	movs	r2, #36	; 0x24
    55fe:	5cb2      	ldrb	r2, [r6, r2]
    5600:	0452      	lsls	r2, r2, #17
    5602:	4313      	orrs	r3, r2
    5604:	2225      	movs	r2, #37	; 0x25
    5606:	5cb2      	ldrb	r2, [r6, r2]
    5608:	0412      	lsls	r2, r2, #16
    560a:	4313      	orrs	r3, r2
    560c:	7ab1      	ldrb	r1, [r6, #10]
    560e:	7af2      	ldrb	r2, [r6, #11]
    5610:	4311      	orrs	r1, r2
    5612:	4319      	orrs	r1, r3
    5614:	8933      	ldrh	r3, [r6, #8]
    5616:	2bff      	cmp	r3, #255	; 0xff
    5618:	d100      	bne.n	561c <usart_init+0x184>
    561a:	e081      	b.n	5720 <usart_init+0x288>
    561c:	2280      	movs	r2, #128	; 0x80
    561e:	0452      	lsls	r2, r2, #17
    5620:	4317      	orrs	r7, r2
    5622:	4319      	orrs	r1, r3
    5624:	232c      	movs	r3, #44	; 0x2c
    5626:	5cf3      	ldrb	r3, [r6, r3]
    5628:	2b00      	cmp	r3, #0
    562a:	d103      	bne.n	5634 <usart_init+0x19c>
    562c:	4b62      	ldr	r3, [pc, #392]	; (57b8 <usart_init+0x320>)
    562e:	789b      	ldrb	r3, [r3, #2]
    5630:	079b      	lsls	r3, r3, #30
    5632:	d501      	bpl.n	5638 <usart_init+0x1a0>
    5634:	2380      	movs	r3, #128	; 0x80
    5636:	431f      	orrs	r7, r3
    5638:	682a      	ldr	r2, [r5, #0]
    563a:	69d3      	ldr	r3, [r2, #28]
    563c:	2b00      	cmp	r3, #0
    563e:	d1fc      	bne.n	563a <usart_init+0x1a2>
    5640:	4643      	mov	r3, r8
    5642:	6059      	str	r1, [r3, #4]
    5644:	682a      	ldr	r2, [r5, #0]
    5646:	69d3      	ldr	r3, [r2, #28]
    5648:	2b00      	cmp	r3, #0
    564a:	d1fc      	bne.n	5646 <usart_init+0x1ae>
    564c:	4643      	mov	r3, r8
    564e:	601f      	str	r7, [r3, #0]
    5650:	ab0e      	add	r3, sp, #56	; 0x38
    5652:	2280      	movs	r2, #128	; 0x80
    5654:	701a      	strb	r2, [r3, #0]
    5656:	2200      	movs	r2, #0
    5658:	705a      	strb	r2, [r3, #1]
    565a:	70da      	strb	r2, [r3, #3]
    565c:	709a      	strb	r2, [r3, #2]
    565e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5660:	930a      	str	r3, [sp, #40]	; 0x28
    5662:	6b73      	ldr	r3, [r6, #52]	; 0x34
    5664:	930b      	str	r3, [sp, #44]	; 0x2c
    5666:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    5668:	930c      	str	r3, [sp, #48]	; 0x30
    566a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    566c:	9302      	str	r3, [sp, #8]
    566e:	930d      	str	r3, [sp, #52]	; 0x34
    5670:	2700      	movs	r7, #0
    5672:	ae0a      	add	r6, sp, #40	; 0x28
    5674:	e063      	b.n	573e <usart_init+0x2a6>
    5676:	2308      	movs	r3, #8
    5678:	9306      	str	r3, [sp, #24]
    567a:	3b07      	subs	r3, #7
    567c:	9307      	str	r3, [sp, #28]
    567e:	e77a      	b.n	5576 <usart_init+0xde>
    5680:	6833      	ldr	r3, [r6, #0]
    5682:	9305      	str	r3, [sp, #20]
    5684:	68f3      	ldr	r3, [r6, #12]
    5686:	9303      	str	r3, [sp, #12]
    5688:	6973      	ldr	r3, [r6, #20]
    568a:	9304      	str	r3, [sp, #16]
    568c:	7e33      	ldrb	r3, [r6, #24]
    568e:	469b      	mov	fp, r3
    5690:	2326      	movs	r3, #38	; 0x26
    5692:	5cf3      	ldrb	r3, [r6, r3]
    5694:	469a      	mov	sl, r3
    5696:	6873      	ldr	r3, [r6, #4]
    5698:	4699      	mov	r9, r3
    569a:	2b00      	cmp	r3, #0
    569c:	d018      	beq.n	56d0 <usart_init+0x238>
    569e:	2380      	movs	r3, #128	; 0x80
    56a0:	055b      	lsls	r3, r3, #21
    56a2:	4599      	cmp	r9, r3
    56a4:	d001      	beq.n	56aa <usart_init+0x212>
    56a6:	2000      	movs	r0, #0
    56a8:	e025      	b.n	56f6 <usart_init+0x25e>
    56aa:	2327      	movs	r3, #39	; 0x27
    56ac:	5cf3      	ldrb	r3, [r6, r3]
    56ae:	2b00      	cmp	r3, #0
    56b0:	d000      	beq.n	56b4 <usart_init+0x21c>
    56b2:	e775      	b.n	55a0 <usart_init+0x108>
    56b4:	6a33      	ldr	r3, [r6, #32]
    56b6:	001f      	movs	r7, r3
    56b8:	b2c0      	uxtb	r0, r0
    56ba:	4b40      	ldr	r3, [pc, #256]	; (57bc <usart_init+0x324>)
    56bc:	4798      	blx	r3
    56be:	0001      	movs	r1, r0
    56c0:	220e      	movs	r2, #14
    56c2:	ab06      	add	r3, sp, #24
    56c4:	469c      	mov	ip, r3
    56c6:	4462      	add	r2, ip
    56c8:	0038      	movs	r0, r7
    56ca:	4b3d      	ldr	r3, [pc, #244]	; (57c0 <usart_init+0x328>)
    56cc:	4798      	blx	r3
    56ce:	e012      	b.n	56f6 <usart_init+0x25e>
    56d0:	2308      	movs	r3, #8
    56d2:	9306      	str	r3, [sp, #24]
    56d4:	2300      	movs	r3, #0
    56d6:	9307      	str	r3, [sp, #28]
    56d8:	2327      	movs	r3, #39	; 0x27
    56da:	5cf3      	ldrb	r3, [r6, r3]
    56dc:	2b00      	cmp	r3, #0
    56de:	d00e      	beq.n	56fe <usart_init+0x266>
    56e0:	9b06      	ldr	r3, [sp, #24]
    56e2:	9300      	str	r3, [sp, #0]
    56e4:	9b07      	ldr	r3, [sp, #28]
    56e6:	220e      	movs	r2, #14
    56e8:	a906      	add	r1, sp, #24
    56ea:	468c      	mov	ip, r1
    56ec:	4462      	add	r2, ip
    56ee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    56f0:	6a30      	ldr	r0, [r6, #32]
    56f2:	4f34      	ldr	r7, [pc, #208]	; (57c4 <usart_init+0x32c>)
    56f4:	47b8      	blx	r7
    56f6:	2800      	cmp	r0, #0
    56f8:	d000      	beq.n	56fc <usart_init+0x264>
    56fa:	e6e0      	b.n	54be <usart_init+0x26>
    56fc:	e750      	b.n	55a0 <usart_init+0x108>
    56fe:	6a33      	ldr	r3, [r6, #32]
    5700:	001f      	movs	r7, r3
    5702:	b2c0      	uxtb	r0, r0
    5704:	4b2d      	ldr	r3, [pc, #180]	; (57bc <usart_init+0x324>)
    5706:	4798      	blx	r3
    5708:	0001      	movs	r1, r0
    570a:	9b06      	ldr	r3, [sp, #24]
    570c:	9300      	str	r3, [sp, #0]
    570e:	9b07      	ldr	r3, [sp, #28]
    5710:	220e      	movs	r2, #14
    5712:	a806      	add	r0, sp, #24
    5714:	4684      	mov	ip, r0
    5716:	4462      	add	r2, ip
    5718:	0038      	movs	r0, r7
    571a:	4f2a      	ldr	r7, [pc, #168]	; (57c4 <usart_init+0x32c>)
    571c:	47b8      	blx	r7
    571e:	e7ea      	b.n	56f6 <usart_init+0x25e>
    5720:	7ef3      	ldrb	r3, [r6, #27]
    5722:	2b00      	cmp	r3, #0
    5724:	d100      	bne.n	5728 <usart_init+0x290>
    5726:	e77d      	b.n	5624 <usart_init+0x18c>
    5728:	2380      	movs	r3, #128	; 0x80
    572a:	04db      	lsls	r3, r3, #19
    572c:	431f      	orrs	r7, r3
    572e:	e779      	b.n	5624 <usart_init+0x18c>
    5730:	0020      	movs	r0, r4
    5732:	4b25      	ldr	r3, [pc, #148]	; (57c8 <usart_init+0x330>)
    5734:	4798      	blx	r3
    5736:	e007      	b.n	5748 <usart_init+0x2b0>
    5738:	3701      	adds	r7, #1
    573a:	2f04      	cmp	r7, #4
    573c:	d00d      	beq.n	575a <usart_init+0x2c2>
    573e:	b2f9      	uxtb	r1, r7
    5740:	00bb      	lsls	r3, r7, #2
    5742:	5998      	ldr	r0, [r3, r6]
    5744:	2800      	cmp	r0, #0
    5746:	d0f3      	beq.n	5730 <usart_init+0x298>
    5748:	1c43      	adds	r3, r0, #1
    574a:	d0f5      	beq.n	5738 <usart_init+0x2a0>
    574c:	a90e      	add	r1, sp, #56	; 0x38
    574e:	7008      	strb	r0, [r1, #0]
    5750:	0c00      	lsrs	r0, r0, #16
    5752:	b2c0      	uxtb	r0, r0
    5754:	4b1d      	ldr	r3, [pc, #116]	; (57cc <usart_init+0x334>)
    5756:	4798      	blx	r3
    5758:	e7ee      	b.n	5738 <usart_init+0x2a0>
    575a:	2300      	movs	r3, #0
    575c:	60eb      	str	r3, [r5, #12]
    575e:	612b      	str	r3, [r5, #16]
    5760:	616b      	str	r3, [r5, #20]
    5762:	61ab      	str	r3, [r5, #24]
    5764:	61eb      	str	r3, [r5, #28]
    5766:	622b      	str	r3, [r5, #32]
    5768:	62ab      	str	r3, [r5, #40]	; 0x28
    576a:	626b      	str	r3, [r5, #36]	; 0x24
    576c:	2200      	movs	r2, #0
    576e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    5770:	85ab      	strh	r3, [r5, #44]	; 0x2c
    5772:	3330      	adds	r3, #48	; 0x30
    5774:	54ea      	strb	r2, [r5, r3]
    5776:	3301      	adds	r3, #1
    5778:	54ea      	strb	r2, [r5, r3]
    577a:	3301      	adds	r3, #1
    577c:	54ea      	strb	r2, [r5, r3]
    577e:	3301      	adds	r3, #1
    5780:	54ea      	strb	r2, [r5, r3]
    5782:	6828      	ldr	r0, [r5, #0]
    5784:	4b07      	ldr	r3, [pc, #28]	; (57a4 <usart_init+0x30c>)
    5786:	4798      	blx	r3
    5788:	0004      	movs	r4, r0
    578a:	4911      	ldr	r1, [pc, #68]	; (57d0 <usart_init+0x338>)
    578c:	4b11      	ldr	r3, [pc, #68]	; (57d4 <usart_init+0x33c>)
    578e:	4798      	blx	r3
    5790:	00a4      	lsls	r4, r4, #2
    5792:	4b11      	ldr	r3, [pc, #68]	; (57d8 <usart_init+0x340>)
    5794:	50e5      	str	r5, [r4, r3]
    5796:	2000      	movs	r0, #0
    5798:	e691      	b.n	54be <usart_init+0x26>
    579a:	2310      	movs	r3, #16
    579c:	9306      	str	r3, [sp, #24]
    579e:	2300      	movs	r3, #0
    57a0:	9307      	str	r3, [sp, #28]
    57a2:	e6e8      	b.n	5576 <usart_init+0xde>
    57a4:	00004c9d 	.word	0x00004c9d
    57a8:	40000400 	.word	0x40000400
    57ac:	00006055 	.word	0x00006055
    57b0:	00005fc9 	.word	0x00005fc9
    57b4:	00004ad9 	.word	0x00004ad9
    57b8:	41002000 	.word	0x41002000
    57bc:	00006071 	.word	0x00006071
    57c0:	00004a1b 	.word	0x00004a1b
    57c4:	00004a45 	.word	0x00004a45
    57c8:	00004b25 	.word	0x00004b25
    57cc:	0000614d 	.word	0x0000614d
    57d0:	00005879 	.word	0x00005879
    57d4:	00004cd9 	.word	0x00004cd9
    57d8:	20001068 	.word	0x20001068

000057dc <usart_write_wait>:
    57dc:	79c2      	ldrb	r2, [r0, #7]
    57de:	231c      	movs	r3, #28
    57e0:	2a00      	cmp	r2, #0
    57e2:	d101      	bne.n	57e8 <usart_write_wait+0xc>
    57e4:	0018      	movs	r0, r3
    57e6:	4770      	bx	lr
    57e8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    57ea:	b292      	uxth	r2, r2
    57ec:	3b17      	subs	r3, #23
    57ee:	2a00      	cmp	r2, #0
    57f0:	d1f8      	bne.n	57e4 <usart_write_wait+0x8>
    57f2:	6803      	ldr	r3, [r0, #0]
    57f4:	69da      	ldr	r2, [r3, #28]
    57f6:	2a00      	cmp	r2, #0
    57f8:	d1fc      	bne.n	57f4 <usart_write_wait+0x18>
    57fa:	8519      	strh	r1, [r3, #40]	; 0x28
    57fc:	2102      	movs	r1, #2
    57fe:	7e1a      	ldrb	r2, [r3, #24]
    5800:	420a      	tst	r2, r1
    5802:	d0fc      	beq.n	57fe <usart_write_wait+0x22>
    5804:	2300      	movs	r3, #0
    5806:	e7ed      	b.n	57e4 <usart_write_wait+0x8>

00005808 <usart_read_wait>:
    5808:	7982      	ldrb	r2, [r0, #6]
    580a:	231c      	movs	r3, #28
    580c:	2a00      	cmp	r2, #0
    580e:	d101      	bne.n	5814 <usart_read_wait+0xc>
    5810:	0018      	movs	r0, r3
    5812:	4770      	bx	lr
    5814:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    5816:	b292      	uxth	r2, r2
    5818:	3b17      	subs	r3, #23
    581a:	2a00      	cmp	r2, #0
    581c:	d1f8      	bne.n	5810 <usart_read_wait+0x8>
    581e:	6802      	ldr	r2, [r0, #0]
    5820:	7e10      	ldrb	r0, [r2, #24]
    5822:	0740      	lsls	r0, r0, #29
    5824:	d5f4      	bpl.n	5810 <usart_read_wait+0x8>
    5826:	69d3      	ldr	r3, [r2, #28]
    5828:	2b00      	cmp	r3, #0
    582a:	d1fc      	bne.n	5826 <usart_read_wait+0x1e>
    582c:	8b53      	ldrh	r3, [r2, #26]
    582e:	b2db      	uxtb	r3, r3
    5830:	0698      	lsls	r0, r3, #26
    5832:	d01d      	beq.n	5870 <usart_read_wait+0x68>
    5834:	0798      	lsls	r0, r3, #30
    5836:	d503      	bpl.n	5840 <usart_read_wait+0x38>
    5838:	2302      	movs	r3, #2
    583a:	8353      	strh	r3, [r2, #26]
    583c:	3318      	adds	r3, #24
    583e:	e7e7      	b.n	5810 <usart_read_wait+0x8>
    5840:	0758      	lsls	r0, r3, #29
    5842:	d503      	bpl.n	584c <usart_read_wait+0x44>
    5844:	2304      	movs	r3, #4
    5846:	8353      	strh	r3, [r2, #26]
    5848:	331a      	adds	r3, #26
    584a:	e7e1      	b.n	5810 <usart_read_wait+0x8>
    584c:	07d8      	lsls	r0, r3, #31
    584e:	d503      	bpl.n	5858 <usart_read_wait+0x50>
    5850:	2301      	movs	r3, #1
    5852:	8353      	strh	r3, [r2, #26]
    5854:	3312      	adds	r3, #18
    5856:	e7db      	b.n	5810 <usart_read_wait+0x8>
    5858:	06d8      	lsls	r0, r3, #27
    585a:	d503      	bpl.n	5864 <usart_read_wait+0x5c>
    585c:	2310      	movs	r3, #16
    585e:	8353      	strh	r3, [r2, #26]
    5860:	3332      	adds	r3, #50	; 0x32
    5862:	e7d5      	b.n	5810 <usart_read_wait+0x8>
    5864:	069b      	lsls	r3, r3, #26
    5866:	d503      	bpl.n	5870 <usart_read_wait+0x68>
    5868:	2320      	movs	r3, #32
    586a:	8353      	strh	r3, [r2, #26]
    586c:	3321      	adds	r3, #33	; 0x21
    586e:	e7cf      	b.n	5810 <usart_read_wait+0x8>
    5870:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    5872:	800b      	strh	r3, [r1, #0]
    5874:	2300      	movs	r3, #0
    5876:	e7cb      	b.n	5810 <usart_read_wait+0x8>

00005878 <_usart_interrupt_handler>:
    5878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    587a:	0080      	lsls	r0, r0, #2
    587c:	4b62      	ldr	r3, [pc, #392]	; (5a08 <_usart_interrupt_handler+0x190>)
    587e:	58c5      	ldr	r5, [r0, r3]
    5880:	682c      	ldr	r4, [r5, #0]
    5882:	69e3      	ldr	r3, [r4, #28]
    5884:	2b00      	cmp	r3, #0
    5886:	d1fc      	bne.n	5882 <_usart_interrupt_handler+0xa>
    5888:	7e23      	ldrb	r3, [r4, #24]
    588a:	7da6      	ldrb	r6, [r4, #22]
    588c:	401e      	ands	r6, r3
    588e:	2330      	movs	r3, #48	; 0x30
    5890:	5ceb      	ldrb	r3, [r5, r3]
    5892:	2231      	movs	r2, #49	; 0x31
    5894:	5caf      	ldrb	r7, [r5, r2]
    5896:	401f      	ands	r7, r3
    5898:	07f3      	lsls	r3, r6, #31
    589a:	d522      	bpl.n	58e2 <_usart_interrupt_handler+0x6a>
    589c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    589e:	b29b      	uxth	r3, r3
    58a0:	2b00      	cmp	r3, #0
    58a2:	d01c      	beq.n	58de <_usart_interrupt_handler+0x66>
    58a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    58a6:	7813      	ldrb	r3, [r2, #0]
    58a8:	b2db      	uxtb	r3, r3
    58aa:	1c51      	adds	r1, r2, #1
    58ac:	62a9      	str	r1, [r5, #40]	; 0x28
    58ae:	7969      	ldrb	r1, [r5, #5]
    58b0:	2901      	cmp	r1, #1
    58b2:	d00e      	beq.n	58d2 <_usart_interrupt_handler+0x5a>
    58b4:	b29b      	uxth	r3, r3
    58b6:	05db      	lsls	r3, r3, #23
    58b8:	0ddb      	lsrs	r3, r3, #23
    58ba:	8523      	strh	r3, [r4, #40]	; 0x28
    58bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    58be:	3b01      	subs	r3, #1
    58c0:	b29b      	uxth	r3, r3
    58c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    58c4:	2b00      	cmp	r3, #0
    58c6:	d10c      	bne.n	58e2 <_usart_interrupt_handler+0x6a>
    58c8:	3301      	adds	r3, #1
    58ca:	7523      	strb	r3, [r4, #20]
    58cc:	3301      	adds	r3, #1
    58ce:	75a3      	strb	r3, [r4, #22]
    58d0:	e007      	b.n	58e2 <_usart_interrupt_handler+0x6a>
    58d2:	7851      	ldrb	r1, [r2, #1]
    58d4:	0209      	lsls	r1, r1, #8
    58d6:	430b      	orrs	r3, r1
    58d8:	3202      	adds	r2, #2
    58da:	62aa      	str	r2, [r5, #40]	; 0x28
    58dc:	e7eb      	b.n	58b6 <_usart_interrupt_handler+0x3e>
    58de:	2301      	movs	r3, #1
    58e0:	7523      	strb	r3, [r4, #20]
    58e2:	07b3      	lsls	r3, r6, #30
    58e4:	d506      	bpl.n	58f4 <_usart_interrupt_handler+0x7c>
    58e6:	2302      	movs	r3, #2
    58e8:	7523      	strb	r3, [r4, #20]
    58ea:	2200      	movs	r2, #0
    58ec:	3331      	adds	r3, #49	; 0x31
    58ee:	54ea      	strb	r2, [r5, r3]
    58f0:	07fb      	lsls	r3, r7, #31
    58f2:	d41a      	bmi.n	592a <_usart_interrupt_handler+0xb2>
    58f4:	0773      	lsls	r3, r6, #29
    58f6:	d565      	bpl.n	59c4 <_usart_interrupt_handler+0x14c>
    58f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    58fa:	b29b      	uxth	r3, r3
    58fc:	2b00      	cmp	r3, #0
    58fe:	d05f      	beq.n	59c0 <_usart_interrupt_handler+0x148>
    5900:	8b63      	ldrh	r3, [r4, #26]
    5902:	b2db      	uxtb	r3, r3
    5904:	071a      	lsls	r2, r3, #28
    5906:	d414      	bmi.n	5932 <_usart_interrupt_handler+0xba>
    5908:	223f      	movs	r2, #63	; 0x3f
    590a:	4013      	ands	r3, r2
    590c:	2b00      	cmp	r3, #0
    590e:	d034      	beq.n	597a <_usart_interrupt_handler+0x102>
    5910:	079a      	lsls	r2, r3, #30
    5912:	d511      	bpl.n	5938 <_usart_interrupt_handler+0xc0>
    5914:	221a      	movs	r2, #26
    5916:	2332      	movs	r3, #50	; 0x32
    5918:	54ea      	strb	r2, [r5, r3]
    591a:	3b30      	subs	r3, #48	; 0x30
    591c:	8363      	strh	r3, [r4, #26]
    591e:	077b      	lsls	r3, r7, #29
    5920:	d550      	bpl.n	59c4 <_usart_interrupt_handler+0x14c>
    5922:	0028      	movs	r0, r5
    5924:	696b      	ldr	r3, [r5, #20]
    5926:	4798      	blx	r3
    5928:	e04c      	b.n	59c4 <_usart_interrupt_handler+0x14c>
    592a:	0028      	movs	r0, r5
    592c:	68eb      	ldr	r3, [r5, #12]
    592e:	4798      	blx	r3
    5930:	e7e0      	b.n	58f4 <_usart_interrupt_handler+0x7c>
    5932:	2237      	movs	r2, #55	; 0x37
    5934:	4013      	ands	r3, r2
    5936:	e7e9      	b.n	590c <_usart_interrupt_handler+0x94>
    5938:	075a      	lsls	r2, r3, #29
    593a:	d505      	bpl.n	5948 <_usart_interrupt_handler+0xd0>
    593c:	221e      	movs	r2, #30
    593e:	2332      	movs	r3, #50	; 0x32
    5940:	54ea      	strb	r2, [r5, r3]
    5942:	3b2e      	subs	r3, #46	; 0x2e
    5944:	8363      	strh	r3, [r4, #26]
    5946:	e7ea      	b.n	591e <_usart_interrupt_handler+0xa6>
    5948:	07da      	lsls	r2, r3, #31
    594a:	d505      	bpl.n	5958 <_usart_interrupt_handler+0xe0>
    594c:	2213      	movs	r2, #19
    594e:	2332      	movs	r3, #50	; 0x32
    5950:	54ea      	strb	r2, [r5, r3]
    5952:	3b31      	subs	r3, #49	; 0x31
    5954:	8363      	strh	r3, [r4, #26]
    5956:	e7e2      	b.n	591e <_usart_interrupt_handler+0xa6>
    5958:	06da      	lsls	r2, r3, #27
    595a:	d505      	bpl.n	5968 <_usart_interrupt_handler+0xf0>
    595c:	2242      	movs	r2, #66	; 0x42
    595e:	2332      	movs	r3, #50	; 0x32
    5960:	54ea      	strb	r2, [r5, r3]
    5962:	3b22      	subs	r3, #34	; 0x22
    5964:	8363      	strh	r3, [r4, #26]
    5966:	e7da      	b.n	591e <_usart_interrupt_handler+0xa6>
    5968:	2220      	movs	r2, #32
    596a:	421a      	tst	r2, r3
    596c:	d0d7      	beq.n	591e <_usart_interrupt_handler+0xa6>
    596e:	3221      	adds	r2, #33	; 0x21
    5970:	2332      	movs	r3, #50	; 0x32
    5972:	54ea      	strb	r2, [r5, r3]
    5974:	3b12      	subs	r3, #18
    5976:	8363      	strh	r3, [r4, #26]
    5978:	e7d1      	b.n	591e <_usart_interrupt_handler+0xa6>
    597a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    597c:	05db      	lsls	r3, r3, #23
    597e:	0ddb      	lsrs	r3, r3, #23
    5980:	b2da      	uxtb	r2, r3
    5982:	6a69      	ldr	r1, [r5, #36]	; 0x24
    5984:	700a      	strb	r2, [r1, #0]
    5986:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5988:	1c51      	adds	r1, r2, #1
    598a:	6269      	str	r1, [r5, #36]	; 0x24
    598c:	7969      	ldrb	r1, [r5, #5]
    598e:	2901      	cmp	r1, #1
    5990:	d010      	beq.n	59b4 <_usart_interrupt_handler+0x13c>
    5992:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5994:	3b01      	subs	r3, #1
    5996:	b29b      	uxth	r3, r3
    5998:	85ab      	strh	r3, [r5, #44]	; 0x2c
    599a:	2b00      	cmp	r3, #0
    599c:	d112      	bne.n	59c4 <_usart_interrupt_handler+0x14c>
    599e:	3304      	adds	r3, #4
    59a0:	7523      	strb	r3, [r4, #20]
    59a2:	2200      	movs	r2, #0
    59a4:	332e      	adds	r3, #46	; 0x2e
    59a6:	54ea      	strb	r2, [r5, r3]
    59a8:	07bb      	lsls	r3, r7, #30
    59aa:	d50b      	bpl.n	59c4 <_usart_interrupt_handler+0x14c>
    59ac:	0028      	movs	r0, r5
    59ae:	692b      	ldr	r3, [r5, #16]
    59b0:	4798      	blx	r3
    59b2:	e007      	b.n	59c4 <_usart_interrupt_handler+0x14c>
    59b4:	0a1b      	lsrs	r3, r3, #8
    59b6:	7053      	strb	r3, [r2, #1]
    59b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    59ba:	3301      	adds	r3, #1
    59bc:	626b      	str	r3, [r5, #36]	; 0x24
    59be:	e7e8      	b.n	5992 <_usart_interrupt_handler+0x11a>
    59c0:	2304      	movs	r3, #4
    59c2:	7523      	strb	r3, [r4, #20]
    59c4:	06f3      	lsls	r3, r6, #27
    59c6:	d504      	bpl.n	59d2 <_usart_interrupt_handler+0x15a>
    59c8:	2310      	movs	r3, #16
    59ca:	7523      	strb	r3, [r4, #20]
    59cc:	7623      	strb	r3, [r4, #24]
    59ce:	06fb      	lsls	r3, r7, #27
    59d0:	d40e      	bmi.n	59f0 <_usart_interrupt_handler+0x178>
    59d2:	06b3      	lsls	r3, r6, #26
    59d4:	d504      	bpl.n	59e0 <_usart_interrupt_handler+0x168>
    59d6:	2320      	movs	r3, #32
    59d8:	7523      	strb	r3, [r4, #20]
    59da:	7623      	strb	r3, [r4, #24]
    59dc:	073b      	lsls	r3, r7, #28
    59de:	d40b      	bmi.n	59f8 <_usart_interrupt_handler+0x180>
    59e0:	0733      	lsls	r3, r6, #28
    59e2:	d504      	bpl.n	59ee <_usart_interrupt_handler+0x176>
    59e4:	2308      	movs	r3, #8
    59e6:	7523      	strb	r3, [r4, #20]
    59e8:	7623      	strb	r3, [r4, #24]
    59ea:	06bb      	lsls	r3, r7, #26
    59ec:	d408      	bmi.n	5a00 <_usart_interrupt_handler+0x188>
    59ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59f0:	0028      	movs	r0, r5
    59f2:	69eb      	ldr	r3, [r5, #28]
    59f4:	4798      	blx	r3
    59f6:	e7ec      	b.n	59d2 <_usart_interrupt_handler+0x15a>
    59f8:	0028      	movs	r0, r5
    59fa:	69ab      	ldr	r3, [r5, #24]
    59fc:	4798      	blx	r3
    59fe:	e7ef      	b.n	59e0 <_usart_interrupt_handler+0x168>
    5a00:	6a2b      	ldr	r3, [r5, #32]
    5a02:	0028      	movs	r0, r5
    5a04:	4798      	blx	r3
    5a06:	e7f2      	b.n	59ee <_usart_interrupt_handler+0x176>
    5a08:	20001068 	.word	0x20001068

00005a0c <system_clock_source_get_hz>:
    5a0c:	b510      	push	{r4, lr}
    5a0e:	2808      	cmp	r0, #8
    5a10:	d803      	bhi.n	5a1a <system_clock_source_get_hz+0xe>
    5a12:	0080      	lsls	r0, r0, #2
    5a14:	4b1c      	ldr	r3, [pc, #112]	; (5a88 <system_clock_source_get_hz+0x7c>)
    5a16:	581b      	ldr	r3, [r3, r0]
    5a18:	469f      	mov	pc, r3
    5a1a:	2000      	movs	r0, #0
    5a1c:	e032      	b.n	5a84 <system_clock_source_get_hz+0x78>
    5a1e:	4b1b      	ldr	r3, [pc, #108]	; (5a8c <system_clock_source_get_hz+0x80>)
    5a20:	6918      	ldr	r0, [r3, #16]
    5a22:	e02f      	b.n	5a84 <system_clock_source_get_hz+0x78>
    5a24:	4b1a      	ldr	r3, [pc, #104]	; (5a90 <system_clock_source_get_hz+0x84>)
    5a26:	6a1b      	ldr	r3, [r3, #32]
    5a28:	059b      	lsls	r3, r3, #22
    5a2a:	0f9b      	lsrs	r3, r3, #30
    5a2c:	4819      	ldr	r0, [pc, #100]	; (5a94 <system_clock_source_get_hz+0x88>)
    5a2e:	40d8      	lsrs	r0, r3
    5a30:	e028      	b.n	5a84 <system_clock_source_get_hz+0x78>
    5a32:	4b16      	ldr	r3, [pc, #88]	; (5a8c <system_clock_source_get_hz+0x80>)
    5a34:	6958      	ldr	r0, [r3, #20]
    5a36:	e025      	b.n	5a84 <system_clock_source_get_hz+0x78>
    5a38:	4b14      	ldr	r3, [pc, #80]	; (5a8c <system_clock_source_get_hz+0x80>)
    5a3a:	681b      	ldr	r3, [r3, #0]
    5a3c:	2000      	movs	r0, #0
    5a3e:	079b      	lsls	r3, r3, #30
    5a40:	d520      	bpl.n	5a84 <system_clock_source_get_hz+0x78>
    5a42:	4913      	ldr	r1, [pc, #76]	; (5a90 <system_clock_source_get_hz+0x84>)
    5a44:	2210      	movs	r2, #16
    5a46:	68cb      	ldr	r3, [r1, #12]
    5a48:	421a      	tst	r2, r3
    5a4a:	d0fc      	beq.n	5a46 <system_clock_source_get_hz+0x3a>
    5a4c:	4b0f      	ldr	r3, [pc, #60]	; (5a8c <system_clock_source_get_hz+0x80>)
    5a4e:	681a      	ldr	r2, [r3, #0]
    5a50:	2324      	movs	r3, #36	; 0x24
    5a52:	4013      	ands	r3, r2
    5a54:	2b04      	cmp	r3, #4
    5a56:	d001      	beq.n	5a5c <system_clock_source_get_hz+0x50>
    5a58:	480f      	ldr	r0, [pc, #60]	; (5a98 <system_clock_source_get_hz+0x8c>)
    5a5a:	e013      	b.n	5a84 <system_clock_source_get_hz+0x78>
    5a5c:	2000      	movs	r0, #0
    5a5e:	4b0f      	ldr	r3, [pc, #60]	; (5a9c <system_clock_source_get_hz+0x90>)
    5a60:	4798      	blx	r3
    5a62:	4b0a      	ldr	r3, [pc, #40]	; (5a8c <system_clock_source_get_hz+0x80>)
    5a64:	689b      	ldr	r3, [r3, #8]
    5a66:	041b      	lsls	r3, r3, #16
    5a68:	0c1b      	lsrs	r3, r3, #16
    5a6a:	4358      	muls	r0, r3
    5a6c:	e00a      	b.n	5a84 <system_clock_source_get_hz+0x78>
    5a6e:	2350      	movs	r3, #80	; 0x50
    5a70:	4a07      	ldr	r2, [pc, #28]	; (5a90 <system_clock_source_get_hz+0x84>)
    5a72:	5cd3      	ldrb	r3, [r2, r3]
    5a74:	2000      	movs	r0, #0
    5a76:	075b      	lsls	r3, r3, #29
    5a78:	d504      	bpl.n	5a84 <system_clock_source_get_hz+0x78>
    5a7a:	4b04      	ldr	r3, [pc, #16]	; (5a8c <system_clock_source_get_hz+0x80>)
    5a7c:	68d8      	ldr	r0, [r3, #12]
    5a7e:	e001      	b.n	5a84 <system_clock_source_get_hz+0x78>
    5a80:	2080      	movs	r0, #128	; 0x80
    5a82:	0200      	lsls	r0, r0, #8
    5a84:	bd10      	pop	{r4, pc}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	0000e344 	.word	0x0000e344
    5a8c:	200003fc 	.word	0x200003fc
    5a90:	40000800 	.word	0x40000800
    5a94:	007a1200 	.word	0x007a1200
    5a98:	02dc6c00 	.word	0x02dc6c00
    5a9c:	00006071 	.word	0x00006071

00005aa0 <system_clock_source_osc8m_set_config>:
    5aa0:	b570      	push	{r4, r5, r6, lr}
    5aa2:	490c      	ldr	r1, [pc, #48]	; (5ad4 <system_clock_source_osc8m_set_config+0x34>)
    5aa4:	6a0b      	ldr	r3, [r1, #32]
    5aa6:	7804      	ldrb	r4, [r0, #0]
    5aa8:	7885      	ldrb	r5, [r0, #2]
    5aaa:	7840      	ldrb	r0, [r0, #1]
    5aac:	2201      	movs	r2, #1
    5aae:	4010      	ands	r0, r2
    5ab0:	0180      	lsls	r0, r0, #6
    5ab2:	2640      	movs	r6, #64	; 0x40
    5ab4:	43b3      	bics	r3, r6
    5ab6:	4303      	orrs	r3, r0
    5ab8:	402a      	ands	r2, r5
    5aba:	01d2      	lsls	r2, r2, #7
    5abc:	2080      	movs	r0, #128	; 0x80
    5abe:	4383      	bics	r3, r0
    5ac0:	4313      	orrs	r3, r2
    5ac2:	2203      	movs	r2, #3
    5ac4:	4022      	ands	r2, r4
    5ac6:	0212      	lsls	r2, r2, #8
    5ac8:	4803      	ldr	r0, [pc, #12]	; (5ad8 <system_clock_source_osc8m_set_config+0x38>)
    5aca:	4003      	ands	r3, r0
    5acc:	4313      	orrs	r3, r2
    5ace:	620b      	str	r3, [r1, #32]
    5ad0:	bd70      	pop	{r4, r5, r6, pc}
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	40000800 	.word	0x40000800
    5ad8:	fffffcff 	.word	0xfffffcff

00005adc <system_clock_source_xosc32k_set_config>:
    5adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ade:	46de      	mov	lr, fp
    5ae0:	4657      	mov	r7, sl
    5ae2:	464e      	mov	r6, r9
    5ae4:	4645      	mov	r5, r8
    5ae6:	b5e0      	push	{r5, r6, r7, lr}
    5ae8:	0001      	movs	r1, r0
    5aea:	4b26      	ldr	r3, [pc, #152]	; (5b84 <system_clock_source_xosc32k_set_config+0xa8>)
    5aec:	469b      	mov	fp, r3
    5aee:	8a9b      	ldrh	r3, [r3, #20]
    5af0:	7845      	ldrb	r5, [r0, #1]
    5af2:	7800      	ldrb	r0, [r0, #0]
    5af4:	4242      	negs	r2, r0
    5af6:	4142      	adcs	r2, r0
    5af8:	4691      	mov	r9, r2
    5afa:	7888      	ldrb	r0, [r1, #2]
    5afc:	78ca      	ldrb	r2, [r1, #3]
    5afe:	4694      	mov	ip, r2
    5b00:	790a      	ldrb	r2, [r1, #4]
    5b02:	4690      	mov	r8, r2
    5b04:	7b4e      	ldrb	r6, [r1, #13]
    5b06:	7b0f      	ldrb	r7, [r1, #12]
    5b08:	7b8c      	ldrb	r4, [r1, #14]
    5b0a:	688a      	ldr	r2, [r1, #8]
    5b0c:	491e      	ldr	r1, [pc, #120]	; (5b88 <system_clock_source_xosc32k_set_config+0xac>)
    5b0e:	614a      	str	r2, [r1, #20]
    5b10:	2101      	movs	r1, #1
    5b12:	464a      	mov	r2, r9
    5b14:	0092      	lsls	r2, r2, #2
    5b16:	4691      	mov	r9, r2
    5b18:	2204      	movs	r2, #4
    5b1a:	4393      	bics	r3, r2
    5b1c:	464a      	mov	r2, r9
    5b1e:	4313      	orrs	r3, r2
    5b20:	4642      	mov	r2, r8
    5b22:	400a      	ands	r2, r1
    5b24:	00d2      	lsls	r2, r2, #3
    5b26:	4690      	mov	r8, r2
    5b28:	2208      	movs	r2, #8
    5b2a:	4393      	bics	r3, r2
    5b2c:	4642      	mov	r2, r8
    5b2e:	4313      	orrs	r3, r2
    5b30:	4662      	mov	r2, ip
    5b32:	400a      	ands	r2, r1
    5b34:	0112      	lsls	r2, r2, #4
    5b36:	4694      	mov	ip, r2
    5b38:	2210      	movs	r2, #16
    5b3a:	4393      	bics	r3, r2
    5b3c:	4662      	mov	r2, ip
    5b3e:	4313      	orrs	r3, r2
    5b40:	4008      	ands	r0, r1
    5b42:	0140      	lsls	r0, r0, #5
    5b44:	2220      	movs	r2, #32
    5b46:	4393      	bics	r3, r2
    5b48:	4303      	orrs	r3, r0
    5b4a:	400f      	ands	r7, r1
    5b4c:	01bf      	lsls	r7, r7, #6
    5b4e:	2040      	movs	r0, #64	; 0x40
    5b50:	4383      	bics	r3, r0
    5b52:	433b      	orrs	r3, r7
    5b54:	400e      	ands	r6, r1
    5b56:	01f6      	lsls	r6, r6, #7
    5b58:	3040      	adds	r0, #64	; 0x40
    5b5a:	4383      	bics	r3, r0
    5b5c:	4333      	orrs	r3, r6
    5b5e:	3879      	subs	r0, #121	; 0x79
    5b60:	4005      	ands	r5, r0
    5b62:	022d      	lsls	r5, r5, #8
    5b64:	4809      	ldr	r0, [pc, #36]	; (5b8c <system_clock_source_xosc32k_set_config+0xb0>)
    5b66:	4003      	ands	r3, r0
    5b68:	432b      	orrs	r3, r5
    5b6a:	4021      	ands	r1, r4
    5b6c:	0309      	lsls	r1, r1, #12
    5b6e:	4808      	ldr	r0, [pc, #32]	; (5b90 <system_clock_source_xosc32k_set_config+0xb4>)
    5b70:	4003      	ands	r3, r0
    5b72:	430b      	orrs	r3, r1
    5b74:	465a      	mov	r2, fp
    5b76:	8293      	strh	r3, [r2, #20]
    5b78:	bc3c      	pop	{r2, r3, r4, r5}
    5b7a:	4690      	mov	r8, r2
    5b7c:	4699      	mov	r9, r3
    5b7e:	46a2      	mov	sl, r4
    5b80:	46ab      	mov	fp, r5
    5b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b84:	40000800 	.word	0x40000800
    5b88:	200003fc 	.word	0x200003fc
    5b8c:	fffff8ff 	.word	0xfffff8ff
    5b90:	ffffefff 	.word	0xffffefff

00005b94 <system_clock_source_dfll_set_config>:
    5b94:	b510      	push	{r4, lr}
    5b96:	7a03      	ldrb	r3, [r0, #8]
    5b98:	069b      	lsls	r3, r3, #26
    5b9a:	0c1b      	lsrs	r3, r3, #16
    5b9c:	8942      	ldrh	r2, [r0, #10]
    5b9e:	0592      	lsls	r2, r2, #22
    5ba0:	0d92      	lsrs	r2, r2, #22
    5ba2:	4313      	orrs	r3, r2
    5ba4:	4918      	ldr	r1, [pc, #96]	; (5c08 <system_clock_source_dfll_set_config+0x74>)
    5ba6:	604b      	str	r3, [r1, #4]
    5ba8:	7983      	ldrb	r3, [r0, #6]
    5baa:	79c2      	ldrb	r2, [r0, #7]
    5bac:	4313      	orrs	r3, r2
    5bae:	8842      	ldrh	r2, [r0, #2]
    5bb0:	8884      	ldrh	r4, [r0, #4]
    5bb2:	4322      	orrs	r2, r4
    5bb4:	4313      	orrs	r3, r2
    5bb6:	7842      	ldrb	r2, [r0, #1]
    5bb8:	01d2      	lsls	r2, r2, #7
    5bba:	4313      	orrs	r3, r2
    5bbc:	600b      	str	r3, [r1, #0]
    5bbe:	7803      	ldrb	r3, [r0, #0]
    5bc0:	2b04      	cmp	r3, #4
    5bc2:	d011      	beq.n	5be8 <system_clock_source_dfll_set_config+0x54>
    5bc4:	2b20      	cmp	r3, #32
    5bc6:	d10e      	bne.n	5be6 <system_clock_source_dfll_set_config+0x52>
    5bc8:	7b03      	ldrb	r3, [r0, #12]
    5bca:	069b      	lsls	r3, r3, #26
    5bcc:	8a02      	ldrh	r2, [r0, #16]
    5bce:	4313      	orrs	r3, r2
    5bd0:	89c2      	ldrh	r2, [r0, #14]
    5bd2:	0412      	lsls	r2, r2, #16
    5bd4:	490d      	ldr	r1, [pc, #52]	; (5c0c <system_clock_source_dfll_set_config+0x78>)
    5bd6:	400a      	ands	r2, r1
    5bd8:	4313      	orrs	r3, r2
    5bda:	4a0b      	ldr	r2, [pc, #44]	; (5c08 <system_clock_source_dfll_set_config+0x74>)
    5bdc:	6093      	str	r3, [r2, #8]
    5bde:	6811      	ldr	r1, [r2, #0]
    5be0:	4b0b      	ldr	r3, [pc, #44]	; (5c10 <system_clock_source_dfll_set_config+0x7c>)
    5be2:	430b      	orrs	r3, r1
    5be4:	6013      	str	r3, [r2, #0]
    5be6:	bd10      	pop	{r4, pc}
    5be8:	7b03      	ldrb	r3, [r0, #12]
    5bea:	069b      	lsls	r3, r3, #26
    5bec:	8a02      	ldrh	r2, [r0, #16]
    5bee:	4313      	orrs	r3, r2
    5bf0:	89c2      	ldrh	r2, [r0, #14]
    5bf2:	0412      	lsls	r2, r2, #16
    5bf4:	4905      	ldr	r1, [pc, #20]	; (5c0c <system_clock_source_dfll_set_config+0x78>)
    5bf6:	400a      	ands	r2, r1
    5bf8:	4313      	orrs	r3, r2
    5bfa:	4a03      	ldr	r2, [pc, #12]	; (5c08 <system_clock_source_dfll_set_config+0x74>)
    5bfc:	6093      	str	r3, [r2, #8]
    5bfe:	6813      	ldr	r3, [r2, #0]
    5c00:	2104      	movs	r1, #4
    5c02:	430b      	orrs	r3, r1
    5c04:	6013      	str	r3, [r2, #0]
    5c06:	e7ee      	b.n	5be6 <system_clock_source_dfll_set_config+0x52>
    5c08:	200003fc 	.word	0x200003fc
    5c0c:	03ff0000 	.word	0x03ff0000
    5c10:	00000424 	.word	0x00000424

00005c14 <system_clock_source_enable>:
    5c14:	2808      	cmp	r0, #8
    5c16:	d803      	bhi.n	5c20 <system_clock_source_enable+0xc>
    5c18:	0080      	lsls	r0, r0, #2
    5c1a:	4b25      	ldr	r3, [pc, #148]	; (5cb0 <system_clock_source_enable+0x9c>)
    5c1c:	581b      	ldr	r3, [r3, r0]
    5c1e:	469f      	mov	pc, r3
    5c20:	2017      	movs	r0, #23
    5c22:	e044      	b.n	5cae <system_clock_source_enable+0x9a>
    5c24:	4a23      	ldr	r2, [pc, #140]	; (5cb4 <system_clock_source_enable+0xa0>)
    5c26:	6a13      	ldr	r3, [r2, #32]
    5c28:	2102      	movs	r1, #2
    5c2a:	430b      	orrs	r3, r1
    5c2c:	6213      	str	r3, [r2, #32]
    5c2e:	2000      	movs	r0, #0
    5c30:	e03d      	b.n	5cae <system_clock_source_enable+0x9a>
    5c32:	4a20      	ldr	r2, [pc, #128]	; (5cb4 <system_clock_source_enable+0xa0>)
    5c34:	6993      	ldr	r3, [r2, #24]
    5c36:	2102      	movs	r1, #2
    5c38:	430b      	orrs	r3, r1
    5c3a:	6193      	str	r3, [r2, #24]
    5c3c:	2000      	movs	r0, #0
    5c3e:	e036      	b.n	5cae <system_clock_source_enable+0x9a>
    5c40:	4a1c      	ldr	r2, [pc, #112]	; (5cb4 <system_clock_source_enable+0xa0>)
    5c42:	8a13      	ldrh	r3, [r2, #16]
    5c44:	2102      	movs	r1, #2
    5c46:	430b      	orrs	r3, r1
    5c48:	8213      	strh	r3, [r2, #16]
    5c4a:	2000      	movs	r0, #0
    5c4c:	e02f      	b.n	5cae <system_clock_source_enable+0x9a>
    5c4e:	4a19      	ldr	r2, [pc, #100]	; (5cb4 <system_clock_source_enable+0xa0>)
    5c50:	8a93      	ldrh	r3, [r2, #20]
    5c52:	2102      	movs	r1, #2
    5c54:	430b      	orrs	r3, r1
    5c56:	8293      	strh	r3, [r2, #20]
    5c58:	2000      	movs	r0, #0
    5c5a:	e028      	b.n	5cae <system_clock_source_enable+0x9a>
    5c5c:	4916      	ldr	r1, [pc, #88]	; (5cb8 <system_clock_source_enable+0xa4>)
    5c5e:	680b      	ldr	r3, [r1, #0]
    5c60:	2202      	movs	r2, #2
    5c62:	4313      	orrs	r3, r2
    5c64:	600b      	str	r3, [r1, #0]
    5c66:	4b13      	ldr	r3, [pc, #76]	; (5cb4 <system_clock_source_enable+0xa0>)
    5c68:	849a      	strh	r2, [r3, #36]	; 0x24
    5c6a:	0019      	movs	r1, r3
    5c6c:	320e      	adds	r2, #14
    5c6e:	68cb      	ldr	r3, [r1, #12]
    5c70:	421a      	tst	r2, r3
    5c72:	d0fc      	beq.n	5c6e <system_clock_source_enable+0x5a>
    5c74:	4a10      	ldr	r2, [pc, #64]	; (5cb8 <system_clock_source_enable+0xa4>)
    5c76:	6891      	ldr	r1, [r2, #8]
    5c78:	4b0e      	ldr	r3, [pc, #56]	; (5cb4 <system_clock_source_enable+0xa0>)
    5c7a:	62d9      	str	r1, [r3, #44]	; 0x2c
    5c7c:	6852      	ldr	r2, [r2, #4]
    5c7e:	629a      	str	r2, [r3, #40]	; 0x28
    5c80:	2200      	movs	r2, #0
    5c82:	849a      	strh	r2, [r3, #36]	; 0x24
    5c84:	0019      	movs	r1, r3
    5c86:	3210      	adds	r2, #16
    5c88:	68cb      	ldr	r3, [r1, #12]
    5c8a:	421a      	tst	r2, r3
    5c8c:	d0fc      	beq.n	5c88 <system_clock_source_enable+0x74>
    5c8e:	4b0a      	ldr	r3, [pc, #40]	; (5cb8 <system_clock_source_enable+0xa4>)
    5c90:	681b      	ldr	r3, [r3, #0]
    5c92:	b29b      	uxth	r3, r3
    5c94:	4a07      	ldr	r2, [pc, #28]	; (5cb4 <system_clock_source_enable+0xa0>)
    5c96:	8493      	strh	r3, [r2, #36]	; 0x24
    5c98:	2000      	movs	r0, #0
    5c9a:	e008      	b.n	5cae <system_clock_source_enable+0x9a>
    5c9c:	4905      	ldr	r1, [pc, #20]	; (5cb4 <system_clock_source_enable+0xa0>)
    5c9e:	2244      	movs	r2, #68	; 0x44
    5ca0:	5c8b      	ldrb	r3, [r1, r2]
    5ca2:	2002      	movs	r0, #2
    5ca4:	4303      	orrs	r3, r0
    5ca6:	548b      	strb	r3, [r1, r2]
    5ca8:	2000      	movs	r0, #0
    5caa:	e000      	b.n	5cae <system_clock_source_enable+0x9a>
    5cac:	2000      	movs	r0, #0
    5cae:	4770      	bx	lr
    5cb0:	0000e368 	.word	0x0000e368
    5cb4:	40000800 	.word	0x40000800
    5cb8:	200003fc 	.word	0x200003fc

00005cbc <system_clock_init>:
    5cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cbe:	b08f      	sub	sp, #60	; 0x3c
    5cc0:	22c2      	movs	r2, #194	; 0xc2
    5cc2:	00d2      	lsls	r2, r2, #3
    5cc4:	4b47      	ldr	r3, [pc, #284]	; (5de4 <system_clock_init+0x128>)
    5cc6:	609a      	str	r2, [r3, #8]
    5cc8:	4a47      	ldr	r2, [pc, #284]	; (5de8 <system_clock_init+0x12c>)
    5cca:	6853      	ldr	r3, [r2, #4]
    5ccc:	211e      	movs	r1, #30
    5cce:	438b      	bics	r3, r1
    5cd0:	391a      	subs	r1, #26
    5cd2:	430b      	orrs	r3, r1
    5cd4:	6053      	str	r3, [r2, #4]
    5cd6:	2202      	movs	r2, #2
    5cd8:	ab01      	add	r3, sp, #4
    5cda:	701a      	strb	r2, [r3, #0]
    5cdc:	2400      	movs	r4, #0
    5cde:	4d43      	ldr	r5, [pc, #268]	; (5dec <system_clock_init+0x130>)
    5ce0:	b2e0      	uxtb	r0, r4
    5ce2:	a901      	add	r1, sp, #4
    5ce4:	47a8      	blx	r5
    5ce6:	3401      	adds	r4, #1
    5ce8:	2c25      	cmp	r4, #37	; 0x25
    5cea:	d1f9      	bne.n	5ce0 <system_clock_init+0x24>
    5cec:	a80a      	add	r0, sp, #40	; 0x28
    5cee:	2300      	movs	r3, #0
    5cf0:	7003      	strb	r3, [r0, #0]
    5cf2:	7083      	strb	r3, [r0, #2]
    5cf4:	2280      	movs	r2, #128	; 0x80
    5cf6:	0212      	lsls	r2, r2, #8
    5cf8:	6082      	str	r2, [r0, #8]
    5cfa:	70c3      	strb	r3, [r0, #3]
    5cfc:	2201      	movs	r2, #1
    5cfe:	7102      	strb	r2, [r0, #4]
    5d00:	7303      	strb	r3, [r0, #12]
    5d02:	7383      	strb	r3, [r0, #14]
    5d04:	3202      	adds	r2, #2
    5d06:	7042      	strb	r2, [r0, #1]
    5d08:	7343      	strb	r3, [r0, #13]
    5d0a:	4b39      	ldr	r3, [pc, #228]	; (5df0 <system_clock_init+0x134>)
    5d0c:	4798      	blx	r3
    5d0e:	2005      	movs	r0, #5
    5d10:	4b38      	ldr	r3, [pc, #224]	; (5df4 <system_clock_init+0x138>)
    5d12:	4798      	blx	r3
    5d14:	4933      	ldr	r1, [pc, #204]	; (5de4 <system_clock_init+0x128>)
    5d16:	2202      	movs	r2, #2
    5d18:	68cb      	ldr	r3, [r1, #12]
    5d1a:	421a      	tst	r2, r3
    5d1c:	d0fc      	beq.n	5d18 <system_clock_init+0x5c>
    5d1e:	4a31      	ldr	r2, [pc, #196]	; (5de4 <system_clock_init+0x128>)
    5d20:	8a93      	ldrh	r3, [r2, #20]
    5d22:	2180      	movs	r1, #128	; 0x80
    5d24:	430b      	orrs	r3, r1
    5d26:	8293      	strh	r3, [r2, #20]
    5d28:	ab05      	add	r3, sp, #20
    5d2a:	2100      	movs	r1, #0
    5d2c:	2200      	movs	r2, #0
    5d2e:	8059      	strh	r1, [r3, #2]
    5d30:	8099      	strh	r1, [r3, #4]
    5d32:	719a      	strb	r2, [r3, #6]
    5d34:	71da      	strb	r2, [r3, #7]
    5d36:	313f      	adds	r1, #63	; 0x3f
    5d38:	8159      	strh	r1, [r3, #10]
    5d3a:	393b      	subs	r1, #59	; 0x3b
    5d3c:	7019      	strb	r1, [r3, #0]
    5d3e:	705a      	strb	r2, [r3, #1]
    5d40:	4b2d      	ldr	r3, [pc, #180]	; (5df8 <system_clock_init+0x13c>)
    5d42:	681b      	ldr	r3, [r3, #0]
    5d44:	0e9b      	lsrs	r3, r3, #26
    5d46:	2b3f      	cmp	r3, #63	; 0x3f
    5d48:	d04a      	beq.n	5de0 <system_clock_init+0x124>
    5d4a:	a805      	add	r0, sp, #20
    5d4c:	7203      	strb	r3, [r0, #8]
    5d4e:	4b2b      	ldr	r3, [pc, #172]	; (5dfc <system_clock_init+0x140>)
    5d50:	8203      	strh	r3, [r0, #16]
    5d52:	2307      	movs	r3, #7
    5d54:	7303      	strb	r3, [r0, #12]
    5d56:	3338      	adds	r3, #56	; 0x38
    5d58:	81c3      	strh	r3, [r0, #14]
    5d5a:	4b29      	ldr	r3, [pc, #164]	; (5e00 <system_clock_init+0x144>)
    5d5c:	4798      	blx	r3
    5d5e:	a804      	add	r0, sp, #16
    5d60:	2500      	movs	r5, #0
    5d62:	7045      	strb	r5, [r0, #1]
    5d64:	2601      	movs	r6, #1
    5d66:	7086      	strb	r6, [r0, #2]
    5d68:	7005      	strb	r5, [r0, #0]
    5d6a:	4b26      	ldr	r3, [pc, #152]	; (5e04 <system_clock_init+0x148>)
    5d6c:	4798      	blx	r3
    5d6e:	2006      	movs	r0, #6
    5d70:	4f20      	ldr	r7, [pc, #128]	; (5df4 <system_clock_init+0x138>)
    5d72:	47b8      	blx	r7
    5d74:	4b24      	ldr	r3, [pc, #144]	; (5e08 <system_clock_init+0x14c>)
    5d76:	4798      	blx	r3
    5d78:	ac01      	add	r4, sp, #4
    5d7a:	9602      	str	r6, [sp, #8]
    5d7c:	7065      	strb	r5, [r4, #1]
    5d7e:	7225      	strb	r5, [r4, #8]
    5d80:	7265      	strb	r5, [r4, #9]
    5d82:	2305      	movs	r3, #5
    5d84:	7023      	strb	r3, [r4, #0]
    5d86:	0021      	movs	r1, r4
    5d88:	2001      	movs	r0, #1
    5d8a:	4b20      	ldr	r3, [pc, #128]	; (5e0c <system_clock_init+0x150>)
    5d8c:	4798      	blx	r3
    5d8e:	2001      	movs	r0, #1
    5d90:	4b1f      	ldr	r3, [pc, #124]	; (5e10 <system_clock_init+0x154>)
    5d92:	4798      	blx	r3
    5d94:	7026      	strb	r6, [r4, #0]
    5d96:	0021      	movs	r1, r4
    5d98:	2000      	movs	r0, #0
    5d9a:	4b14      	ldr	r3, [pc, #80]	; (5dec <system_clock_init+0x130>)
    5d9c:	4798      	blx	r3
    5d9e:	2000      	movs	r0, #0
    5da0:	4b1c      	ldr	r3, [pc, #112]	; (5e14 <system_clock_init+0x158>)
    5da2:	4798      	blx	r3
    5da4:	2007      	movs	r0, #7
    5da6:	47b8      	blx	r7
    5da8:	490e      	ldr	r1, [pc, #56]	; (5de4 <system_clock_init+0x128>)
    5daa:	22d0      	movs	r2, #208	; 0xd0
    5dac:	68cb      	ldr	r3, [r1, #12]
    5dae:	4013      	ands	r3, r2
    5db0:	2bd0      	cmp	r3, #208	; 0xd0
    5db2:	d1fb      	bne.n	5dac <system_clock_init+0xf0>
    5db4:	4a18      	ldr	r2, [pc, #96]	; (5e18 <system_clock_init+0x15c>)
    5db6:	2300      	movs	r3, #0
    5db8:	7213      	strb	r3, [r2, #8]
    5dba:	7253      	strb	r3, [r2, #9]
    5dbc:	7293      	strb	r3, [r2, #10]
    5dbe:	72d3      	strb	r3, [r2, #11]
    5dc0:	a901      	add	r1, sp, #4
    5dc2:	2201      	movs	r2, #1
    5dc4:	604a      	str	r2, [r1, #4]
    5dc6:	704b      	strb	r3, [r1, #1]
    5dc8:	720b      	strb	r3, [r1, #8]
    5dca:	724b      	strb	r3, [r1, #9]
    5dcc:	3307      	adds	r3, #7
    5dce:	700b      	strb	r3, [r1, #0]
    5dd0:	2000      	movs	r0, #0
    5dd2:	4b0e      	ldr	r3, [pc, #56]	; (5e0c <system_clock_init+0x150>)
    5dd4:	4798      	blx	r3
    5dd6:	2000      	movs	r0, #0
    5dd8:	4b0d      	ldr	r3, [pc, #52]	; (5e10 <system_clock_init+0x154>)
    5dda:	4798      	blx	r3
    5ddc:	b00f      	add	sp, #60	; 0x3c
    5dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5de0:	3b20      	subs	r3, #32
    5de2:	e7b2      	b.n	5d4a <system_clock_init+0x8e>
    5de4:	40000800 	.word	0x40000800
    5de8:	41004000 	.word	0x41004000
    5dec:	00006055 	.word	0x00006055
    5df0:	00005add 	.word	0x00005add
    5df4:	00005c15 	.word	0x00005c15
    5df8:	00806024 	.word	0x00806024
    5dfc:	000005b9 	.word	0x000005b9
    5e00:	00005b95 	.word	0x00005b95
    5e04:	00005aa1 	.word	0x00005aa1
    5e08:	00005e1d 	.word	0x00005e1d
    5e0c:	00005e41 	.word	0x00005e41
    5e10:	00005ef9 	.word	0x00005ef9
    5e14:	00005fc9 	.word	0x00005fc9
    5e18:	40000400 	.word	0x40000400

00005e1c <system_gclk_init>:
    5e1c:	4a06      	ldr	r2, [pc, #24]	; (5e38 <system_gclk_init+0x1c>)
    5e1e:	6993      	ldr	r3, [r2, #24]
    5e20:	2108      	movs	r1, #8
    5e22:	430b      	orrs	r3, r1
    5e24:	6193      	str	r3, [r2, #24]
    5e26:	2201      	movs	r2, #1
    5e28:	4b04      	ldr	r3, [pc, #16]	; (5e3c <system_gclk_init+0x20>)
    5e2a:	701a      	strb	r2, [r3, #0]
    5e2c:	0019      	movs	r1, r3
    5e2e:	780b      	ldrb	r3, [r1, #0]
    5e30:	4213      	tst	r3, r2
    5e32:	d1fc      	bne.n	5e2e <system_gclk_init+0x12>
    5e34:	4770      	bx	lr
    5e36:	46c0      	nop			; (mov r8, r8)
    5e38:	40000400 	.word	0x40000400
    5e3c:	40000c00 	.word	0x40000c00

00005e40 <system_gclk_gen_set_config>:
    5e40:	b570      	push	{r4, r5, r6, lr}
    5e42:	0006      	movs	r6, r0
    5e44:	0004      	movs	r4, r0
    5e46:	780d      	ldrb	r5, [r1, #0]
    5e48:	022d      	lsls	r5, r5, #8
    5e4a:	4305      	orrs	r5, r0
    5e4c:	784b      	ldrb	r3, [r1, #1]
    5e4e:	2b00      	cmp	r3, #0
    5e50:	d002      	beq.n	5e58 <system_gclk_gen_set_config+0x18>
    5e52:	2380      	movs	r3, #128	; 0x80
    5e54:	02db      	lsls	r3, r3, #11
    5e56:	431d      	orrs	r5, r3
    5e58:	7a4b      	ldrb	r3, [r1, #9]
    5e5a:	2b00      	cmp	r3, #0
    5e5c:	d002      	beq.n	5e64 <system_gclk_gen_set_config+0x24>
    5e5e:	2380      	movs	r3, #128	; 0x80
    5e60:	031b      	lsls	r3, r3, #12
    5e62:	431d      	orrs	r5, r3
    5e64:	6848      	ldr	r0, [r1, #4]
    5e66:	2801      	cmp	r0, #1
    5e68:	d910      	bls.n	5e8c <system_gclk_gen_set_config+0x4c>
    5e6a:	1e43      	subs	r3, r0, #1
    5e6c:	4218      	tst	r0, r3
    5e6e:	d134      	bne.n	5eda <system_gclk_gen_set_config+0x9a>
    5e70:	2802      	cmp	r0, #2
    5e72:	d930      	bls.n	5ed6 <system_gclk_gen_set_config+0x96>
    5e74:	2302      	movs	r3, #2
    5e76:	2200      	movs	r2, #0
    5e78:	3201      	adds	r2, #1
    5e7a:	005b      	lsls	r3, r3, #1
    5e7c:	4298      	cmp	r0, r3
    5e7e:	d8fb      	bhi.n	5e78 <system_gclk_gen_set_config+0x38>
    5e80:	0212      	lsls	r2, r2, #8
    5e82:	4332      	orrs	r2, r6
    5e84:	0014      	movs	r4, r2
    5e86:	2380      	movs	r3, #128	; 0x80
    5e88:	035b      	lsls	r3, r3, #13
    5e8a:	431d      	orrs	r5, r3
    5e8c:	7a0b      	ldrb	r3, [r1, #8]
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d002      	beq.n	5e98 <system_gclk_gen_set_config+0x58>
    5e92:	2380      	movs	r3, #128	; 0x80
    5e94:	039b      	lsls	r3, r3, #14
    5e96:	431d      	orrs	r5, r3
    5e98:	4a13      	ldr	r2, [pc, #76]	; (5ee8 <system_gclk_gen_set_config+0xa8>)
    5e9a:	7853      	ldrb	r3, [r2, #1]
    5e9c:	b25b      	sxtb	r3, r3
    5e9e:	2b00      	cmp	r3, #0
    5ea0:	dbfb      	blt.n	5e9a <system_gclk_gen_set_config+0x5a>
    5ea2:	4b12      	ldr	r3, [pc, #72]	; (5eec <system_gclk_gen_set_config+0xac>)
    5ea4:	4798      	blx	r3
    5ea6:	4b12      	ldr	r3, [pc, #72]	; (5ef0 <system_gclk_gen_set_config+0xb0>)
    5ea8:	701e      	strb	r6, [r3, #0]
    5eaa:	4a0f      	ldr	r2, [pc, #60]	; (5ee8 <system_gclk_gen_set_config+0xa8>)
    5eac:	7853      	ldrb	r3, [r2, #1]
    5eae:	b25b      	sxtb	r3, r3
    5eb0:	2b00      	cmp	r3, #0
    5eb2:	dbfb      	blt.n	5eac <system_gclk_gen_set_config+0x6c>
    5eb4:	4b0c      	ldr	r3, [pc, #48]	; (5ee8 <system_gclk_gen_set_config+0xa8>)
    5eb6:	609c      	str	r4, [r3, #8]
    5eb8:	001a      	movs	r2, r3
    5eba:	7853      	ldrb	r3, [r2, #1]
    5ebc:	b25b      	sxtb	r3, r3
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	dbfb      	blt.n	5eba <system_gclk_gen_set_config+0x7a>
    5ec2:	4a09      	ldr	r2, [pc, #36]	; (5ee8 <system_gclk_gen_set_config+0xa8>)
    5ec4:	6853      	ldr	r3, [r2, #4]
    5ec6:	2180      	movs	r1, #128	; 0x80
    5ec8:	0249      	lsls	r1, r1, #9
    5eca:	400b      	ands	r3, r1
    5ecc:	431d      	orrs	r5, r3
    5ece:	6055      	str	r5, [r2, #4]
    5ed0:	4b08      	ldr	r3, [pc, #32]	; (5ef4 <system_gclk_gen_set_config+0xb4>)
    5ed2:	4798      	blx	r3
    5ed4:	bd70      	pop	{r4, r5, r6, pc}
    5ed6:	2200      	movs	r2, #0
    5ed8:	e7d2      	b.n	5e80 <system_gclk_gen_set_config+0x40>
    5eda:	0204      	lsls	r4, r0, #8
    5edc:	4334      	orrs	r4, r6
    5ede:	2380      	movs	r3, #128	; 0x80
    5ee0:	029b      	lsls	r3, r3, #10
    5ee2:	431d      	orrs	r5, r3
    5ee4:	e7d2      	b.n	5e8c <system_gclk_gen_set_config+0x4c>
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	40000c00 	.word	0x40000c00
    5eec:	00004489 	.word	0x00004489
    5ef0:	40000c08 	.word	0x40000c08
    5ef4:	000044c9 	.word	0x000044c9

00005ef8 <system_gclk_gen_enable>:
    5ef8:	b510      	push	{r4, lr}
    5efa:	0004      	movs	r4, r0
    5efc:	4a0b      	ldr	r2, [pc, #44]	; (5f2c <system_gclk_gen_enable+0x34>)
    5efe:	7853      	ldrb	r3, [r2, #1]
    5f00:	b25b      	sxtb	r3, r3
    5f02:	2b00      	cmp	r3, #0
    5f04:	dbfb      	blt.n	5efe <system_gclk_gen_enable+0x6>
    5f06:	4b0a      	ldr	r3, [pc, #40]	; (5f30 <system_gclk_gen_enable+0x38>)
    5f08:	4798      	blx	r3
    5f0a:	4b0a      	ldr	r3, [pc, #40]	; (5f34 <system_gclk_gen_enable+0x3c>)
    5f0c:	701c      	strb	r4, [r3, #0]
    5f0e:	4a07      	ldr	r2, [pc, #28]	; (5f2c <system_gclk_gen_enable+0x34>)
    5f10:	7853      	ldrb	r3, [r2, #1]
    5f12:	b25b      	sxtb	r3, r3
    5f14:	2b00      	cmp	r3, #0
    5f16:	dbfb      	blt.n	5f10 <system_gclk_gen_enable+0x18>
    5f18:	4a04      	ldr	r2, [pc, #16]	; (5f2c <system_gclk_gen_enable+0x34>)
    5f1a:	6851      	ldr	r1, [r2, #4]
    5f1c:	2380      	movs	r3, #128	; 0x80
    5f1e:	025b      	lsls	r3, r3, #9
    5f20:	430b      	orrs	r3, r1
    5f22:	6053      	str	r3, [r2, #4]
    5f24:	4b04      	ldr	r3, [pc, #16]	; (5f38 <system_gclk_gen_enable+0x40>)
    5f26:	4798      	blx	r3
    5f28:	bd10      	pop	{r4, pc}
    5f2a:	46c0      	nop			; (mov r8, r8)
    5f2c:	40000c00 	.word	0x40000c00
    5f30:	00004489 	.word	0x00004489
    5f34:	40000c04 	.word	0x40000c04
    5f38:	000044c9 	.word	0x000044c9

00005f3c <system_gclk_gen_get_hz>:
    5f3c:	b570      	push	{r4, r5, r6, lr}
    5f3e:	0004      	movs	r4, r0
    5f40:	4a1a      	ldr	r2, [pc, #104]	; (5fac <system_gclk_gen_get_hz+0x70>)
    5f42:	7853      	ldrb	r3, [r2, #1]
    5f44:	b25b      	sxtb	r3, r3
    5f46:	2b00      	cmp	r3, #0
    5f48:	dbfb      	blt.n	5f42 <system_gclk_gen_get_hz+0x6>
    5f4a:	4b19      	ldr	r3, [pc, #100]	; (5fb0 <system_gclk_gen_get_hz+0x74>)
    5f4c:	4798      	blx	r3
    5f4e:	4b19      	ldr	r3, [pc, #100]	; (5fb4 <system_gclk_gen_get_hz+0x78>)
    5f50:	701c      	strb	r4, [r3, #0]
    5f52:	4a16      	ldr	r2, [pc, #88]	; (5fac <system_gclk_gen_get_hz+0x70>)
    5f54:	7853      	ldrb	r3, [r2, #1]
    5f56:	b25b      	sxtb	r3, r3
    5f58:	2b00      	cmp	r3, #0
    5f5a:	dbfb      	blt.n	5f54 <system_gclk_gen_get_hz+0x18>
    5f5c:	4e13      	ldr	r6, [pc, #76]	; (5fac <system_gclk_gen_get_hz+0x70>)
    5f5e:	6870      	ldr	r0, [r6, #4]
    5f60:	04c0      	lsls	r0, r0, #19
    5f62:	0ec0      	lsrs	r0, r0, #27
    5f64:	4b14      	ldr	r3, [pc, #80]	; (5fb8 <system_gclk_gen_get_hz+0x7c>)
    5f66:	4798      	blx	r3
    5f68:	0005      	movs	r5, r0
    5f6a:	4b12      	ldr	r3, [pc, #72]	; (5fb4 <system_gclk_gen_get_hz+0x78>)
    5f6c:	701c      	strb	r4, [r3, #0]
    5f6e:	6876      	ldr	r6, [r6, #4]
    5f70:	02f6      	lsls	r6, r6, #11
    5f72:	0ff6      	lsrs	r6, r6, #31
    5f74:	4b11      	ldr	r3, [pc, #68]	; (5fbc <system_gclk_gen_get_hz+0x80>)
    5f76:	701c      	strb	r4, [r3, #0]
    5f78:	4a0c      	ldr	r2, [pc, #48]	; (5fac <system_gclk_gen_get_hz+0x70>)
    5f7a:	7853      	ldrb	r3, [r2, #1]
    5f7c:	b25b      	sxtb	r3, r3
    5f7e:	2b00      	cmp	r3, #0
    5f80:	dbfb      	blt.n	5f7a <system_gclk_gen_get_hz+0x3e>
    5f82:	4b0a      	ldr	r3, [pc, #40]	; (5fac <system_gclk_gen_get_hz+0x70>)
    5f84:	689c      	ldr	r4, [r3, #8]
    5f86:	0224      	lsls	r4, r4, #8
    5f88:	0c24      	lsrs	r4, r4, #16
    5f8a:	4b0d      	ldr	r3, [pc, #52]	; (5fc0 <system_gclk_gen_get_hz+0x84>)
    5f8c:	4798      	blx	r3
    5f8e:	2e00      	cmp	r6, #0
    5f90:	d107      	bne.n	5fa2 <system_gclk_gen_get_hz+0x66>
    5f92:	2c01      	cmp	r4, #1
    5f94:	d907      	bls.n	5fa6 <system_gclk_gen_get_hz+0x6a>
    5f96:	0021      	movs	r1, r4
    5f98:	0028      	movs	r0, r5
    5f9a:	4b0a      	ldr	r3, [pc, #40]	; (5fc4 <system_gclk_gen_get_hz+0x88>)
    5f9c:	4798      	blx	r3
    5f9e:	0005      	movs	r5, r0
    5fa0:	e001      	b.n	5fa6 <system_gclk_gen_get_hz+0x6a>
    5fa2:	3401      	adds	r4, #1
    5fa4:	40e5      	lsrs	r5, r4
    5fa6:	0028      	movs	r0, r5
    5fa8:	bd70      	pop	{r4, r5, r6, pc}
    5faa:	46c0      	nop			; (mov r8, r8)
    5fac:	40000c00 	.word	0x40000c00
    5fb0:	00004489 	.word	0x00004489
    5fb4:	40000c04 	.word	0x40000c04
    5fb8:	00005a0d 	.word	0x00005a0d
    5fbc:	40000c08 	.word	0x40000c08
    5fc0:	000044c9 	.word	0x000044c9
    5fc4:	0000b8fd 	.word	0x0000b8fd

00005fc8 <system_gclk_chan_enable>:
    5fc8:	b510      	push	{r4, lr}
    5fca:	0004      	movs	r4, r0
    5fcc:	4b06      	ldr	r3, [pc, #24]	; (5fe8 <system_gclk_chan_enable+0x20>)
    5fce:	4798      	blx	r3
    5fd0:	4b06      	ldr	r3, [pc, #24]	; (5fec <system_gclk_chan_enable+0x24>)
    5fd2:	701c      	strb	r4, [r3, #0]
    5fd4:	4a06      	ldr	r2, [pc, #24]	; (5ff0 <system_gclk_chan_enable+0x28>)
    5fd6:	8853      	ldrh	r3, [r2, #2]
    5fd8:	2180      	movs	r1, #128	; 0x80
    5fda:	01c9      	lsls	r1, r1, #7
    5fdc:	430b      	orrs	r3, r1
    5fde:	8053      	strh	r3, [r2, #2]
    5fe0:	4b04      	ldr	r3, [pc, #16]	; (5ff4 <system_gclk_chan_enable+0x2c>)
    5fe2:	4798      	blx	r3
    5fe4:	bd10      	pop	{r4, pc}
    5fe6:	46c0      	nop			; (mov r8, r8)
    5fe8:	00004489 	.word	0x00004489
    5fec:	40000c02 	.word	0x40000c02
    5ff0:	40000c00 	.word	0x40000c00
    5ff4:	000044c9 	.word	0x000044c9

00005ff8 <system_gclk_chan_disable>:
    5ff8:	b510      	push	{r4, lr}
    5ffa:	0004      	movs	r4, r0
    5ffc:	4b0f      	ldr	r3, [pc, #60]	; (603c <system_gclk_chan_disable+0x44>)
    5ffe:	4798      	blx	r3
    6000:	4b0f      	ldr	r3, [pc, #60]	; (6040 <system_gclk_chan_disable+0x48>)
    6002:	701c      	strb	r4, [r3, #0]
    6004:	4a0f      	ldr	r2, [pc, #60]	; (6044 <system_gclk_chan_disable+0x4c>)
    6006:	8853      	ldrh	r3, [r2, #2]
    6008:	051b      	lsls	r3, r3, #20
    600a:	0f18      	lsrs	r0, r3, #28
    600c:	8853      	ldrh	r3, [r2, #2]
    600e:	490e      	ldr	r1, [pc, #56]	; (6048 <system_gclk_chan_disable+0x50>)
    6010:	400b      	ands	r3, r1
    6012:	8053      	strh	r3, [r2, #2]
    6014:	8853      	ldrh	r3, [r2, #2]
    6016:	490d      	ldr	r1, [pc, #52]	; (604c <system_gclk_chan_disable+0x54>)
    6018:	400b      	ands	r3, r1
    601a:	8053      	strh	r3, [r2, #2]
    601c:	0011      	movs	r1, r2
    601e:	2280      	movs	r2, #128	; 0x80
    6020:	01d2      	lsls	r2, r2, #7
    6022:	884b      	ldrh	r3, [r1, #2]
    6024:	4213      	tst	r3, r2
    6026:	d1fc      	bne.n	6022 <system_gclk_chan_disable+0x2a>
    6028:	4906      	ldr	r1, [pc, #24]	; (6044 <system_gclk_chan_disable+0x4c>)
    602a:	884a      	ldrh	r2, [r1, #2]
    602c:	0203      	lsls	r3, r0, #8
    602e:	4806      	ldr	r0, [pc, #24]	; (6048 <system_gclk_chan_disable+0x50>)
    6030:	4002      	ands	r2, r0
    6032:	4313      	orrs	r3, r2
    6034:	804b      	strh	r3, [r1, #2]
    6036:	4b06      	ldr	r3, [pc, #24]	; (6050 <system_gclk_chan_disable+0x58>)
    6038:	4798      	blx	r3
    603a:	bd10      	pop	{r4, pc}
    603c:	00004489 	.word	0x00004489
    6040:	40000c02 	.word	0x40000c02
    6044:	40000c00 	.word	0x40000c00
    6048:	fffff0ff 	.word	0xfffff0ff
    604c:	ffffbfff 	.word	0xffffbfff
    6050:	000044c9 	.word	0x000044c9

00006054 <system_gclk_chan_set_config>:
    6054:	b510      	push	{r4, lr}
    6056:	780c      	ldrb	r4, [r1, #0]
    6058:	0224      	lsls	r4, r4, #8
    605a:	4304      	orrs	r4, r0
    605c:	4b02      	ldr	r3, [pc, #8]	; (6068 <system_gclk_chan_set_config+0x14>)
    605e:	4798      	blx	r3
    6060:	b2a4      	uxth	r4, r4
    6062:	4b02      	ldr	r3, [pc, #8]	; (606c <system_gclk_chan_set_config+0x18>)
    6064:	805c      	strh	r4, [r3, #2]
    6066:	bd10      	pop	{r4, pc}
    6068:	00005ff9 	.word	0x00005ff9
    606c:	40000c00 	.word	0x40000c00

00006070 <system_gclk_chan_get_hz>:
    6070:	b510      	push	{r4, lr}
    6072:	0004      	movs	r4, r0
    6074:	4b06      	ldr	r3, [pc, #24]	; (6090 <system_gclk_chan_get_hz+0x20>)
    6076:	4798      	blx	r3
    6078:	4b06      	ldr	r3, [pc, #24]	; (6094 <system_gclk_chan_get_hz+0x24>)
    607a:	701c      	strb	r4, [r3, #0]
    607c:	4b06      	ldr	r3, [pc, #24]	; (6098 <system_gclk_chan_get_hz+0x28>)
    607e:	885c      	ldrh	r4, [r3, #2]
    6080:	0524      	lsls	r4, r4, #20
    6082:	0f24      	lsrs	r4, r4, #28
    6084:	4b05      	ldr	r3, [pc, #20]	; (609c <system_gclk_chan_get_hz+0x2c>)
    6086:	4798      	blx	r3
    6088:	0020      	movs	r0, r4
    608a:	4b05      	ldr	r3, [pc, #20]	; (60a0 <system_gclk_chan_get_hz+0x30>)
    608c:	4798      	blx	r3
    608e:	bd10      	pop	{r4, pc}
    6090:	00004489 	.word	0x00004489
    6094:	40000c02 	.word	0x40000c02
    6098:	40000c00 	.word	0x40000c00
    609c:	000044c9 	.word	0x000044c9
    60a0:	00005f3d 	.word	0x00005f3d

000060a4 <_system_pinmux_config>:
    60a4:	b530      	push	{r4, r5, lr}
    60a6:	78d3      	ldrb	r3, [r2, #3]
    60a8:	2b00      	cmp	r3, #0
    60aa:	d135      	bne.n	6118 <_system_pinmux_config+0x74>
    60ac:	7813      	ldrb	r3, [r2, #0]
    60ae:	2b80      	cmp	r3, #128	; 0x80
    60b0:	d029      	beq.n	6106 <_system_pinmux_config+0x62>
    60b2:	061b      	lsls	r3, r3, #24
    60b4:	2480      	movs	r4, #128	; 0x80
    60b6:	0264      	lsls	r4, r4, #9
    60b8:	4323      	orrs	r3, r4
    60ba:	7854      	ldrb	r4, [r2, #1]
    60bc:	2502      	movs	r5, #2
    60be:	43ac      	bics	r4, r5
    60c0:	d106      	bne.n	60d0 <_system_pinmux_config+0x2c>
    60c2:	7894      	ldrb	r4, [r2, #2]
    60c4:	2c00      	cmp	r4, #0
    60c6:	d120      	bne.n	610a <_system_pinmux_config+0x66>
    60c8:	2480      	movs	r4, #128	; 0x80
    60ca:	02a4      	lsls	r4, r4, #10
    60cc:	4323      	orrs	r3, r4
    60ce:	6041      	str	r1, [r0, #4]
    60d0:	7854      	ldrb	r4, [r2, #1]
    60d2:	3c01      	subs	r4, #1
    60d4:	2c01      	cmp	r4, #1
    60d6:	d91c      	bls.n	6112 <_system_pinmux_config+0x6e>
    60d8:	040d      	lsls	r5, r1, #16
    60da:	0c2d      	lsrs	r5, r5, #16
    60dc:	24a0      	movs	r4, #160	; 0xa0
    60de:	05e4      	lsls	r4, r4, #23
    60e0:	432c      	orrs	r4, r5
    60e2:	431c      	orrs	r4, r3
    60e4:	6284      	str	r4, [r0, #40]	; 0x28
    60e6:	0c0d      	lsrs	r5, r1, #16
    60e8:	24d0      	movs	r4, #208	; 0xd0
    60ea:	0624      	lsls	r4, r4, #24
    60ec:	432c      	orrs	r4, r5
    60ee:	431c      	orrs	r4, r3
    60f0:	6284      	str	r4, [r0, #40]	; 0x28
    60f2:	78d4      	ldrb	r4, [r2, #3]
    60f4:	2c00      	cmp	r4, #0
    60f6:	d122      	bne.n	613e <_system_pinmux_config+0x9a>
    60f8:	035b      	lsls	r3, r3, #13
    60fa:	d51c      	bpl.n	6136 <_system_pinmux_config+0x92>
    60fc:	7893      	ldrb	r3, [r2, #2]
    60fe:	2b01      	cmp	r3, #1
    6100:	d01e      	beq.n	6140 <_system_pinmux_config+0x9c>
    6102:	6141      	str	r1, [r0, #20]
    6104:	e017      	b.n	6136 <_system_pinmux_config+0x92>
    6106:	2300      	movs	r3, #0
    6108:	e7d7      	b.n	60ba <_system_pinmux_config+0x16>
    610a:	24c0      	movs	r4, #192	; 0xc0
    610c:	02e4      	lsls	r4, r4, #11
    610e:	4323      	orrs	r3, r4
    6110:	e7dd      	b.n	60ce <_system_pinmux_config+0x2a>
    6112:	4c0d      	ldr	r4, [pc, #52]	; (6148 <_system_pinmux_config+0xa4>)
    6114:	4023      	ands	r3, r4
    6116:	e7df      	b.n	60d8 <_system_pinmux_config+0x34>
    6118:	6041      	str	r1, [r0, #4]
    611a:	040c      	lsls	r4, r1, #16
    611c:	0c24      	lsrs	r4, r4, #16
    611e:	23a0      	movs	r3, #160	; 0xa0
    6120:	05db      	lsls	r3, r3, #23
    6122:	4323      	orrs	r3, r4
    6124:	6283      	str	r3, [r0, #40]	; 0x28
    6126:	0c0c      	lsrs	r4, r1, #16
    6128:	23d0      	movs	r3, #208	; 0xd0
    612a:	061b      	lsls	r3, r3, #24
    612c:	4323      	orrs	r3, r4
    612e:	6283      	str	r3, [r0, #40]	; 0x28
    6130:	78d3      	ldrb	r3, [r2, #3]
    6132:	2b00      	cmp	r3, #0
    6134:	d103      	bne.n	613e <_system_pinmux_config+0x9a>
    6136:	7853      	ldrb	r3, [r2, #1]
    6138:	3b01      	subs	r3, #1
    613a:	2b01      	cmp	r3, #1
    613c:	d902      	bls.n	6144 <_system_pinmux_config+0xa0>
    613e:	bd30      	pop	{r4, r5, pc}
    6140:	6181      	str	r1, [r0, #24]
    6142:	e7f8      	b.n	6136 <_system_pinmux_config+0x92>
    6144:	6081      	str	r1, [r0, #8]
    6146:	e7fa      	b.n	613e <_system_pinmux_config+0x9a>
    6148:	fffbffff 	.word	0xfffbffff

0000614c <system_pinmux_pin_set_config>:
    614c:	b510      	push	{r4, lr}
    614e:	000a      	movs	r2, r1
    6150:	09c1      	lsrs	r1, r0, #7
    6152:	2300      	movs	r3, #0
    6154:	2900      	cmp	r1, #0
    6156:	d104      	bne.n	6162 <system_pinmux_pin_set_config+0x16>
    6158:	0943      	lsrs	r3, r0, #5
    615a:	01db      	lsls	r3, r3, #7
    615c:	4905      	ldr	r1, [pc, #20]	; (6174 <system_pinmux_pin_set_config+0x28>)
    615e:	468c      	mov	ip, r1
    6160:	4463      	add	r3, ip
    6162:	241f      	movs	r4, #31
    6164:	4020      	ands	r0, r4
    6166:	2101      	movs	r1, #1
    6168:	4081      	lsls	r1, r0
    616a:	0018      	movs	r0, r3
    616c:	4b02      	ldr	r3, [pc, #8]	; (6178 <system_pinmux_pin_set_config+0x2c>)
    616e:	4798      	blx	r3
    6170:	bd10      	pop	{r4, pc}
    6172:	46c0      	nop			; (mov r8, r8)
    6174:	41004400 	.word	0x41004400
    6178:	000060a5 	.word	0x000060a5

0000617c <_system_dummy_init>:
    617c:	4770      	bx	lr
	...

00006180 <system_init>:
    6180:	b510      	push	{r4, lr}
    6182:	4b05      	ldr	r3, [pc, #20]	; (6198 <system_init+0x18>)
    6184:	4798      	blx	r3
    6186:	4b05      	ldr	r3, [pc, #20]	; (619c <system_init+0x1c>)
    6188:	4798      	blx	r3
    618a:	4b05      	ldr	r3, [pc, #20]	; (61a0 <system_init+0x20>)
    618c:	4798      	blx	r3
    618e:	4b05      	ldr	r3, [pc, #20]	; (61a4 <system_init+0x24>)
    6190:	4798      	blx	r3
    6192:	4b05      	ldr	r3, [pc, #20]	; (61a8 <system_init+0x28>)
    6194:	4798      	blx	r3
    6196:	bd10      	pop	{r4, pc}
    6198:	00005cbd 	.word	0x00005cbd
    619c:	000044f9 	.word	0x000044f9
    61a0:	0000617d 	.word	0x0000617d
    61a4:	00004609 	.word	0x00004609
    61a8:	0000617d 	.word	0x0000617d

000061ac <_tcc_get_inst_index>:
    61ac:	4b09      	ldr	r3, [pc, #36]	; (61d4 <_tcc_get_inst_index+0x28>)
    61ae:	4298      	cmp	r0, r3
    61b0:	d00c      	beq.n	61cc <_tcc_get_inst_index+0x20>
    61b2:	4b09      	ldr	r3, [pc, #36]	; (61d8 <_tcc_get_inst_index+0x2c>)
    61b4:	4298      	cmp	r0, r3
    61b6:	d007      	beq.n	61c8 <_tcc_get_inst_index+0x1c>
    61b8:	4a08      	ldr	r2, [pc, #32]	; (61dc <_tcc_get_inst_index+0x30>)
    61ba:	2300      	movs	r3, #0
    61bc:	4290      	cmp	r0, r2
    61be:	d001      	beq.n	61c4 <_tcc_get_inst_index+0x18>
    61c0:	0018      	movs	r0, r3
    61c2:	4770      	bx	lr
    61c4:	3302      	adds	r3, #2
    61c6:	e002      	b.n	61ce <_tcc_get_inst_index+0x22>
    61c8:	2301      	movs	r3, #1
    61ca:	e000      	b.n	61ce <_tcc_get_inst_index+0x22>
    61cc:	2300      	movs	r3, #0
    61ce:	b2db      	uxtb	r3, r3
    61d0:	e7f6      	b.n	61c0 <_tcc_get_inst_index+0x14>
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	42002000 	.word	0x42002000
    61d8:	42002400 	.word	0x42002400
    61dc:	42002800 	.word	0x42002800

000061e0 <tcc_get_config_defaults>:
    61e0:	b510      	push	{r4, lr}
    61e2:	0004      	movs	r4, r0
    61e4:	0008      	movs	r0, r1
    61e6:	4b4f      	ldr	r3, [pc, #316]	; (6324 <tcc_get_config_defaults+0x144>)
    61e8:	4798      	blx	r3
    61ea:	2300      	movs	r3, #0
    61ec:	6023      	str	r3, [r4, #0]
    61ee:	0080      	lsls	r0, r0, #2
    61f0:	4a4d      	ldr	r2, [pc, #308]	; (6328 <tcc_get_config_defaults+0x148>)
    61f2:	5882      	ldr	r2, [r0, r2]
    61f4:	6062      	str	r2, [r4, #4]
    61f6:	72a3      	strb	r3, [r4, #10]
    61f8:	72e3      	strb	r3, [r4, #11]
    61fa:	7323      	strb	r3, [r4, #12]
    61fc:	7263      	strb	r3, [r4, #9]
    61fe:	7223      	strb	r3, [r4, #8]
    6200:	61e3      	str	r3, [r4, #28]
    6202:	6223      	str	r3, [r4, #32]
    6204:	6263      	str	r3, [r4, #36]	; 0x24
    6206:	62a3      	str	r3, [r4, #40]	; 0x28
    6208:	7523      	strb	r3, [r4, #20]
    620a:	7563      	strb	r3, [r4, #21]
    620c:	75a3      	strb	r3, [r4, #22]
    620e:	75e3      	strb	r3, [r4, #23]
    6210:	7623      	strb	r3, [r4, #24]
    6212:	7663      	strb	r3, [r4, #25]
    6214:	7423      	strb	r3, [r4, #16]
    6216:	7463      	strb	r3, [r4, #17]
    6218:	74a3      	strb	r3, [r4, #18]
    621a:	74e3      	strb	r3, [r4, #19]
    621c:	222c      	movs	r2, #44	; 0x2c
    621e:	54a3      	strb	r3, [r4, r2]
    6220:	3201      	adds	r2, #1
    6222:	54a3      	strb	r3, [r4, r2]
    6224:	3201      	adds	r2, #1
    6226:	54a3      	strb	r3, [r4, r2]
    6228:	3201      	adds	r2, #1
    622a:	54a3      	strb	r3, [r4, r2]
    622c:	3201      	adds	r2, #1
    622e:	54a3      	strb	r3, [r4, r2]
    6230:	3201      	adds	r2, #1
    6232:	54a3      	strb	r3, [r4, r2]
    6234:	3201      	adds	r2, #1
    6236:	54a3      	strb	r3, [r4, r2]
    6238:	3201      	adds	r2, #1
    623a:	54a3      	strb	r3, [r4, r2]
    623c:	3201      	adds	r2, #1
    623e:	54a3      	strb	r3, [r4, r2]
    6240:	3201      	adds	r2, #1
    6242:	54a3      	strb	r3, [r4, r2]
    6244:	3201      	adds	r2, #1
    6246:	54a3      	strb	r3, [r4, r2]
    6248:	3201      	adds	r2, #1
    624a:	54a3      	strb	r3, [r4, r2]
    624c:	3201      	adds	r2, #1
    624e:	54a3      	strb	r3, [r4, r2]
    6250:	3201      	adds	r2, #1
    6252:	54a3      	strb	r3, [r4, r2]
    6254:	3201      	adds	r2, #1
    6256:	54a3      	strb	r3, [r4, r2]
    6258:	3201      	adds	r2, #1
    625a:	54a3      	strb	r3, [r4, r2]
    625c:	3201      	adds	r2, #1
    625e:	54a3      	strb	r3, [r4, r2]
    6260:	3201      	adds	r2, #1
    6262:	54a3      	strb	r3, [r4, r2]
    6264:	3201      	adds	r2, #1
    6266:	54a3      	strb	r3, [r4, r2]
    6268:	3201      	adds	r2, #1
    626a:	54a3      	strb	r3, [r4, r2]
    626c:	3201      	adds	r2, #1
    626e:	54a3      	strb	r3, [r4, r2]
    6270:	3201      	adds	r2, #1
    6272:	54a3      	strb	r3, [r4, r2]
    6274:	3201      	adds	r2, #1
    6276:	54a3      	strb	r3, [r4, r2]
    6278:	3201      	adds	r2, #1
    627a:	54a3      	strb	r3, [r4, r2]
    627c:	3201      	adds	r2, #1
    627e:	54a3      	strb	r3, [r4, r2]
    6280:	3201      	adds	r2, #1
    6282:	54a3      	strb	r3, [r4, r2]
    6284:	3201      	adds	r2, #1
    6286:	54a3      	strb	r3, [r4, r2]
    6288:	3201      	adds	r2, #1
    628a:	54a3      	strb	r3, [r4, r2]
    628c:	3201      	adds	r2, #1
    628e:	54a3      	strb	r3, [r4, r2]
    6290:	3201      	adds	r2, #1
    6292:	54a3      	strb	r3, [r4, r2]
    6294:	3201      	adds	r2, #1
    6296:	54a3      	strb	r3, [r4, r2]
    6298:	3201      	adds	r2, #1
    629a:	54a3      	strb	r3, [r4, r2]
    629c:	3201      	adds	r2, #1
    629e:	54a3      	strb	r3, [r4, r2]
    62a0:	3201      	adds	r2, #1
    62a2:	54a3      	strb	r3, [r4, r2]
    62a4:	3201      	adds	r2, #1
    62a6:	54a3      	strb	r3, [r4, r2]
    62a8:	3201      	adds	r2, #1
    62aa:	54a3      	strb	r3, [r4, r2]
    62ac:	3201      	adds	r2, #1
    62ae:	54a3      	strb	r3, [r4, r2]
    62b0:	3201      	adds	r2, #1
    62b2:	54a3      	strb	r3, [r4, r2]
    62b4:	3201      	adds	r2, #1
    62b6:	54a3      	strb	r3, [r4, r2]
    62b8:	3201      	adds	r2, #1
    62ba:	54a3      	strb	r3, [r4, r2]
    62bc:	3201      	adds	r2, #1
    62be:	54a3      	strb	r3, [r4, r2]
    62c0:	3201      	adds	r2, #1
    62c2:	54a3      	strb	r3, [r4, r2]
    62c4:	3201      	adds	r2, #1
    62c6:	54a3      	strb	r3, [r4, r2]
    62c8:	3201      	adds	r2, #1
    62ca:	54a3      	strb	r3, [r4, r2]
    62cc:	3241      	adds	r2, #65	; 0x41
    62ce:	54a3      	strb	r3, [r4, r2]
    62d0:	65a3      	str	r3, [r4, #88]	; 0x58
    62d2:	67a3      	str	r3, [r4, #120]	; 0x78
    62d4:	3201      	adds	r2, #1
    62d6:	54a3      	strb	r3, [r4, r2]
    62d8:	65e3      	str	r3, [r4, #92]	; 0x5c
    62da:	67e3      	str	r3, [r4, #124]	; 0x7c
    62dc:	3201      	adds	r2, #1
    62de:	54a3      	strb	r3, [r4, r2]
    62e0:	6623      	str	r3, [r4, #96]	; 0x60
    62e2:	3a1a      	subs	r2, #26
    62e4:	50a3      	str	r3, [r4, r2]
    62e6:	321b      	adds	r2, #27
    62e8:	54a3      	strb	r3, [r4, r2]
    62ea:	6663      	str	r3, [r4, #100]	; 0x64
    62ec:	3a17      	subs	r2, #23
    62ee:	50a3      	str	r3, [r4, r2]
    62f0:	3218      	adds	r2, #24
    62f2:	54a3      	strb	r3, [r4, r2]
    62f4:	66a3      	str	r3, [r4, #104]	; 0x68
    62f6:	3a14      	subs	r2, #20
    62f8:	50a3      	str	r3, [r4, r2]
    62fa:	3215      	adds	r2, #21
    62fc:	54a3      	strb	r3, [r4, r2]
    62fe:	66e3      	str	r3, [r4, #108]	; 0x6c
    6300:	3a11      	subs	r2, #17
    6302:	50a3      	str	r3, [r4, r2]
    6304:	3212      	adds	r2, #18
    6306:	54a3      	strb	r3, [r4, r2]
    6308:	6723      	str	r3, [r4, #112]	; 0x70
    630a:	3a0e      	subs	r2, #14
    630c:	50a3      	str	r3, [r4, r2]
    630e:	320f      	adds	r2, #15
    6310:	54a3      	strb	r3, [r4, r2]
    6312:	6763      	str	r3, [r4, #116]	; 0x74
    6314:	3a0b      	subs	r2, #11
    6316:	50a3      	str	r3, [r4, r2]
    6318:	2101      	movs	r1, #1
    631a:	320c      	adds	r2, #12
    631c:	54a1      	strb	r1, [r4, r2]
    631e:	3201      	adds	r2, #1
    6320:	54a3      	strb	r3, [r4, r2]
    6322:	bd10      	pop	{r4, pc}
    6324:	000061ad 	.word	0x000061ad
    6328:	0000e3a0 	.word	0x0000e3a0

0000632c <tcc_init>:
    632c:	b5f0      	push	{r4, r5, r6, r7, lr}
    632e:	46de      	mov	lr, fp
    6330:	4657      	mov	r7, sl
    6332:	464e      	mov	r6, r9
    6334:	4645      	mov	r5, r8
    6336:	b5e0      	push	{r5, r6, r7, lr}
    6338:	b091      	sub	sp, #68	; 0x44
    633a:	9001      	str	r0, [sp, #4]
    633c:	000c      	movs	r4, r1
    633e:	0015      	movs	r5, r2
    6340:	0008      	movs	r0, r1
    6342:	4bc3      	ldr	r3, [pc, #780]	; (6650 <tcc_init+0x324>)
    6344:	4798      	blx	r3
    6346:	0003      	movs	r3, r0
    6348:	0001      	movs	r1, r0
    634a:	48c2      	ldr	r0, [pc, #776]	; (6654 <tcc_init+0x328>)
    634c:	6a02      	ldr	r2, [r0, #32]
    634e:	009e      	lsls	r6, r3, #2
    6350:	4fc1      	ldr	r7, [pc, #772]	; (6658 <tcc_init+0x32c>)
    6352:	59f7      	ldr	r7, [r6, r7]
    6354:	433a      	orrs	r2, r7
    6356:	6202      	str	r2, [r0, #32]
    6358:	6822      	ldr	r2, [r4, #0]
    635a:	201c      	movs	r0, #28
    635c:	0792      	lsls	r2, r2, #30
    635e:	d506      	bpl.n	636e <tcc_init+0x42>
    6360:	b011      	add	sp, #68	; 0x44
    6362:	bc3c      	pop	{r2, r3, r4, r5}
    6364:	4690      	mov	r8, r2
    6366:	4699      	mov	r9, r3
    6368:	46a2      	mov	sl, r4
    636a:	46ab      	mov	fp, r5
    636c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    636e:	6822      	ldr	r2, [r4, #0]
    6370:	2701      	movs	r7, #1
    6372:	4017      	ands	r7, r2
    6374:	d1f4      	bne.n	6360 <tcc_init+0x34>
    6376:	48b9      	ldr	r0, [pc, #740]	; (665c <tcc_init+0x330>)
    6378:	5832      	ldr	r2, [r6, r0]
    637a:	2017      	movs	r0, #23
    637c:	682e      	ldr	r6, [r5, #0]
    637e:	42b2      	cmp	r2, r6
    6380:	d3ee      	bcc.n	6360 <tcc_init+0x34>
    6382:	686e      	ldr	r6, [r5, #4]
    6384:	42b2      	cmp	r2, r6
    6386:	d3eb      	bcc.n	6360 <tcc_init+0x34>
    6388:	69e8      	ldr	r0, [r5, #28]
    638a:	4282      	cmp	r2, r0
    638c:	d200      	bcs.n	6390 <tcc_init+0x64>
    638e:	e1b9      	b.n	6704 <tcc_init+0x3d8>
    6390:	6a28      	ldr	r0, [r5, #32]
    6392:	4282      	cmp	r2, r0
    6394:	d200      	bcs.n	6398 <tcc_init+0x6c>
    6396:	e1b7      	b.n	6708 <tcc_init+0x3dc>
    6398:	6a68      	ldr	r0, [r5, #36]	; 0x24
    639a:	4282      	cmp	r2, r0
    639c:	d200      	bcs.n	63a0 <tcc_init+0x74>
    639e:	e1b5      	b.n	670c <tcc_init+0x3e0>
    63a0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    63a2:	4282      	cmp	r2, r0
    63a4:	d200      	bcs.n	63a8 <tcc_init+0x7c>
    63a6:	e1b3      	b.n	6710 <tcc_init+0x3e4>
    63a8:	2298      	movs	r2, #152	; 0x98
    63aa:	4694      	mov	ip, r2
    63ac:	44ac      	add	ip, r5
    63ae:	4662      	mov	r2, ip
    63b0:	9208      	str	r2, [sp, #32]
    63b2:	2000      	movs	r0, #0
    63b4:	e003      	b.n	63be <tcc_init+0x92>
    63b6:	3001      	adds	r0, #1
    63b8:	3201      	adds	r2, #1
    63ba:	2808      	cmp	r0, #8
    63bc:	d008      	beq.n	63d0 <tcc_init+0xa4>
    63be:	7816      	ldrb	r6, [r2, #0]
    63c0:	2e00      	cmp	r6, #0
    63c2:	d0f8      	beq.n	63b6 <tcc_init+0x8a>
    63c4:	4ea6      	ldr	r6, [pc, #664]	; (6660 <tcc_init+0x334>)
    63c6:	5c76      	ldrb	r6, [r6, r1]
    63c8:	4286      	cmp	r6, r0
    63ca:	dcf4      	bgt.n	63b6 <tcc_init+0x8a>
    63cc:	2017      	movs	r0, #23
    63ce:	e7c7      	b.n	6360 <tcc_init+0x34>
    63d0:	2200      	movs	r2, #0
    63d2:	9202      	str	r2, [sp, #8]
    63d4:	2080      	movs	r0, #128	; 0x80
    63d6:	0440      	lsls	r0, r0, #17
    63d8:	4684      	mov	ip, r0
    63da:	e002      	b.n	63e2 <tcc_init+0xb6>
    63dc:	3201      	adds	r2, #1
    63de:	2a04      	cmp	r2, #4
    63e0:	d00e      	beq.n	6400 <tcc_init+0xd4>
    63e2:	18a8      	adds	r0, r5, r2
    63e4:	7c00      	ldrb	r0, [r0, #16]
    63e6:	2801      	cmp	r0, #1
    63e8:	d1f8      	bne.n	63dc <tcc_init+0xb0>
    63ea:	489e      	ldr	r0, [pc, #632]	; (6664 <tcc_init+0x338>)
    63ec:	5c40      	ldrb	r0, [r0, r1]
    63ee:	4290      	cmp	r0, r2
    63f0:	da00      	bge.n	63f4 <tcc_init+0xc8>
    63f2:	e18f      	b.n	6714 <tcc_init+0x3e8>
    63f4:	4660      	mov	r0, ip
    63f6:	4090      	lsls	r0, r2
    63f8:	9e02      	ldr	r6, [sp, #8]
    63fa:	4306      	orrs	r6, r0
    63fc:	9602      	str	r6, [sp, #8]
    63fe:	e7ed      	b.n	63dc <tcc_init+0xb0>
    6400:	329d      	adds	r2, #157	; 0x9d
    6402:	5caa      	ldrb	r2, [r5, r2]
    6404:	2a00      	cmp	r2, #0
    6406:	d004      	beq.n	6412 <tcc_init+0xe6>
    6408:	2280      	movs	r2, #128	; 0x80
    640a:	0112      	lsls	r2, r2, #4
    640c:	9902      	ldr	r1, [sp, #8]
    640e:	4311      	orrs	r1, r2
    6410:	9102      	str	r1, [sp, #8]
    6412:	7a2a      	ldrb	r2, [r5, #8]
    6414:	1e51      	subs	r1, r2, #1
    6416:	418a      	sbcs	r2, r1
    6418:	0092      	lsls	r2, r2, #2
    641a:	9206      	str	r2, [sp, #24]
    641c:	7a6a      	ldrb	r2, [r5, #9]
    641e:	2a01      	cmp	r2, #1
    6420:	d022      	beq.n	6468 <tcc_init+0x13c>
    6422:	4a90      	ldr	r2, [pc, #576]	; (6664 <tcc_init+0x338>)
    6424:	5cd2      	ldrb	r2, [r2, r3]
    6426:	0011      	movs	r1, r2
    6428:	9205      	str	r2, [sp, #20]
    642a:	2235      	movs	r2, #53	; 0x35
    642c:	5caa      	ldrb	r2, [r5, r2]
    642e:	428a      	cmp	r2, r1
    6430:	d300      	bcc.n	6434 <tcc_init+0x108>
    6432:	e179      	b.n	6728 <tcc_init+0x3fc>
    6434:	212c      	movs	r1, #44	; 0x2c
    6436:	5c69      	ldrb	r1, [r5, r1]
    6438:	290f      	cmp	r1, #15
    643a:	d900      	bls.n	643e <tcc_init+0x112>
    643c:	e174      	b.n	6728 <tcc_init+0x3fc>
    643e:	7b28      	ldrb	r0, [r5, #12]
    6440:	900a      	str	r0, [sp, #40]	; 0x28
    6442:	7ae8      	ldrb	r0, [r5, #11]
    6444:	900b      	str	r0, [sp, #44]	; 0x2c
    6446:	202d      	movs	r0, #45	; 0x2d
    6448:	4682      	mov	sl, r0
    644a:	44aa      	add	sl, r5
    644c:	2000      	movs	r0, #0
    644e:	9704      	str	r7, [sp, #16]
    6450:	ae0e      	add	r6, sp, #56	; 0x38
    6452:	9607      	str	r6, [sp, #28]
    6454:	26c0      	movs	r6, #192	; 0xc0
    6456:	0136      	lsls	r6, r6, #4
    6458:	46b1      	mov	r9, r6
    645a:	4684      	mov	ip, r0
    645c:	46a0      	mov	r8, r4
    645e:	0028      	movs	r0, r5
    6460:	4655      	mov	r5, sl
    6462:	9309      	str	r3, [sp, #36]	; 0x24
    6464:	4682      	mov	sl, r0
    6466:	e035      	b.n	64d4 <tcc_init+0x1a8>
    6468:	9906      	ldr	r1, [sp, #24]
    646a:	4311      	orrs	r1, r2
    646c:	9106      	str	r1, [sp, #24]
    646e:	e7d8      	b.n	6422 <tcc_init+0xf6>
    6470:	0292      	lsls	r2, r2, #10
    6472:	464f      	mov	r7, r9
    6474:	403a      	ands	r2, r7
    6476:	430a      	orrs	r2, r1
    6478:	7919      	ldrb	r1, [r3, #4]
    647a:	468b      	mov	fp, r1
    647c:	2103      	movs	r1, #3
    647e:	465f      	mov	r7, fp
    6480:	4039      	ands	r1, r7
    6482:	430a      	orrs	r2, r1
    6484:	4316      	orrs	r6, r2
    6486:	795a      	ldrb	r2, [r3, #5]
    6488:	0152      	lsls	r2, r2, #5
    648a:	2160      	movs	r1, #96	; 0x60
    648c:	400a      	ands	r2, r1
    648e:	4332      	orrs	r2, r6
    6490:	7999      	ldrb	r1, [r3, #6]
    6492:	0209      	lsls	r1, r1, #8
    6494:	26c0      	movs	r6, #192	; 0xc0
    6496:	00b6      	lsls	r6, r6, #2
    6498:	400e      	ands	r6, r1
    649a:	4316      	orrs	r6, r2
    649c:	79da      	ldrb	r2, [r3, #7]
    649e:	0312      	lsls	r2, r2, #12
    64a0:	21e0      	movs	r1, #224	; 0xe0
    64a2:	01c9      	lsls	r1, r1, #7
    64a4:	400a      	ands	r2, r1
    64a6:	4316      	orrs	r6, r2
    64a8:	4334      	orrs	r4, r6
    64aa:	9a03      	ldr	r2, [sp, #12]
    64ac:	4314      	orrs	r4, r2
    64ae:	4320      	orrs	r0, r4
    64b0:	4662      	mov	r2, ip
    64b2:	9907      	ldr	r1, [sp, #28]
    64b4:	5050      	str	r0, [r2, r1]
    64b6:	2a04      	cmp	r2, #4
    64b8:	d02a      	beq.n	6510 <tcc_init+0x1e4>
    64ba:	7c9a      	ldrb	r2, [r3, #18]
    64bc:	9905      	ldr	r1, [sp, #20]
    64be:	4291      	cmp	r1, r2
    64c0:	d800      	bhi.n	64c4 <tcc_init+0x198>
    64c2:	e131      	b.n	6728 <tcc_init+0x3fc>
    64c4:	7a59      	ldrb	r1, [r3, #9]
    64c6:	350a      	adds	r5, #10
    64c8:	2304      	movs	r3, #4
    64ca:	469b      	mov	fp, r3
    64cc:	44dc      	add	ip, fp
    64ce:	290f      	cmp	r1, #15
    64d0:	d900      	bls.n	64d4 <tcc_init+0x1a8>
    64d2:	e129      	b.n	6728 <tcc_init+0x3fc>
    64d4:	0609      	lsls	r1, r1, #24
    64d6:	23f0      	movs	r3, #240	; 0xf0
    64d8:	051b      	lsls	r3, r3, #20
    64da:	4019      	ands	r1, r3
    64dc:	002b      	movs	r3, r5
    64de:	782e      	ldrb	r6, [r5, #0]
    64e0:	0436      	lsls	r6, r6, #16
    64e2:	20ff      	movs	r0, #255	; 0xff
    64e4:	0400      	lsls	r0, r0, #16
    64e6:	4006      	ands	r6, r0
    64e8:	7868      	ldrb	r0, [r5, #1]
    64ea:	2480      	movs	r4, #128	; 0x80
    64ec:	2800      	cmp	r0, #0
    64ee:	d100      	bne.n	64f2 <tcc_init+0x1c6>
    64f0:	9c04      	ldr	r4, [sp, #16]
    64f2:	7898      	ldrb	r0, [r3, #2]
    64f4:	2708      	movs	r7, #8
    64f6:	9703      	str	r7, [sp, #12]
    64f8:	2800      	cmp	r0, #0
    64fa:	d101      	bne.n	6500 <tcc_init+0x1d4>
    64fc:	9804      	ldr	r0, [sp, #16]
    64fe:	9003      	str	r0, [sp, #12]
    6500:	78d8      	ldrb	r0, [r3, #3]
    6502:	4683      	mov	fp, r0
    6504:	2010      	movs	r0, #16
    6506:	465f      	mov	r7, fp
    6508:	2f00      	cmp	r7, #0
    650a:	d1b1      	bne.n	6470 <tcc_init+0x144>
    650c:	9804      	ldr	r0, [sp, #16]
    650e:	e7af      	b.n	6470 <tcc_init+0x144>
    6510:	4644      	mov	r4, r8
    6512:	4655      	mov	r5, sl
    6514:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6516:	4a52      	ldr	r2, [pc, #328]	; (6660 <tcc_init+0x334>)
    6518:	5cd2      	ldrb	r2, [r2, r3]
    651a:	4691      	mov	r9, r2
    651c:	4651      	mov	r1, sl
    651e:	3150      	adds	r1, #80	; 0x50
    6520:	4650      	mov	r0, sl
    6522:	3041      	adds	r0, #65	; 0x41
    6524:	2700      	movs	r7, #0
    6526:	2200      	movs	r2, #0
    6528:	2601      	movs	r6, #1
    652a:	46b2      	mov	sl, r6
    652c:	2602      	movs	r6, #2
    652e:	36ff      	adds	r6, #255	; 0xff
    6530:	46b3      	mov	fp, r6
    6532:	2680      	movs	r6, #128	; 0x80
    6534:	0276      	lsls	r6, r6, #9
    6536:	46b0      	mov	r8, r6
    6538:	46a4      	mov	ip, r4
    653a:	001c      	movs	r4, r3
    653c:	464b      	mov	r3, r9
    653e:	e00f      	b.n	6560 <tcc_init+0x234>
    6540:	7806      	ldrb	r6, [r0, #0]
    6542:	2e00      	cmp	r6, #0
    6544:	d007      	beq.n	6556 <tcc_init+0x22a>
    6546:	4293      	cmp	r3, r2
    6548:	d800      	bhi.n	654c <tcc_init+0x220>
    654a:	e0e7      	b.n	671c <tcc_init+0x3f0>
    654c:	2e02      	cmp	r6, #2
    654e:	d014      	beq.n	657a <tcc_init+0x24e>
    6550:	4656      	mov	r6, sl
    6552:	4096      	lsls	r6, r2
    6554:	4337      	orrs	r7, r6
    6556:	3201      	adds	r2, #1
    6558:	3101      	adds	r1, #1
    655a:	3002      	adds	r0, #2
    655c:	2a08      	cmp	r2, #8
    655e:	d010      	beq.n	6582 <tcc_init+0x256>
    6560:	780e      	ldrb	r6, [r1, #0]
    6562:	2e00      	cmp	r6, #0
    6564:	d0ec      	beq.n	6540 <tcc_init+0x214>
    6566:	4293      	cmp	r3, r2
    6568:	d800      	bhi.n	656c <tcc_init+0x240>
    656a:	e0d5      	b.n	6718 <tcc_init+0x3ec>
    656c:	4646      	mov	r6, r8
    656e:	4096      	lsls	r6, r2
    6570:	4337      	orrs	r7, r6
    6572:	7806      	ldrb	r6, [r0, #0]
    6574:	2e00      	cmp	r6, #0
    6576:	d1e9      	bne.n	654c <tcc_init+0x220>
    6578:	e7ed      	b.n	6556 <tcc_init+0x22a>
    657a:	465e      	mov	r6, fp
    657c:	4096      	lsls	r6, r2
    657e:	4337      	orrs	r7, r6
    6580:	e7e9      	b.n	6556 <tcc_init+0x22a>
    6582:	4699      	mov	r9, r3
    6584:	0023      	movs	r3, r4
    6586:	4664      	mov	r4, ip
    6588:	7e6a      	ldrb	r2, [r5, #25]
    658a:	0112      	lsls	r2, r2, #4
    658c:	2130      	movs	r1, #48	; 0x30
    658e:	4011      	ands	r1, r2
    6590:	7e28      	ldrb	r0, [r5, #24]
    6592:	2207      	movs	r2, #7
    6594:	4002      	ands	r2, r0
    6596:	4311      	orrs	r1, r2
    6598:	2200      	movs	r2, #0
    659a:	2080      	movs	r0, #128	; 0x80
    659c:	0240      	lsls	r0, r0, #9
    659e:	000e      	movs	r6, r1
    65a0:	e002      	b.n	65a8 <tcc_init+0x27c>
    65a2:	3201      	adds	r2, #1
    65a4:	2a04      	cmp	r2, #4
    65a6:	d00b      	beq.n	65c0 <tcc_init+0x294>
    65a8:	18a9      	adds	r1, r5, r2
    65aa:	7d09      	ldrb	r1, [r1, #20]
    65ac:	2900      	cmp	r1, #0
    65ae:	d0f8      	beq.n	65a2 <tcc_init+0x276>
    65b0:	9905      	ldr	r1, [sp, #20]
    65b2:	4291      	cmp	r1, r2
    65b4:	dc00      	bgt.n	65b8 <tcc_init+0x28c>
    65b6:	e0b3      	b.n	6720 <tcc_init+0x3f4>
    65b8:	0001      	movs	r1, r0
    65ba:	4091      	lsls	r1, r2
    65bc:	430e      	orrs	r6, r1
    65be:	e7f0      	b.n	65a2 <tcc_init+0x276>
    65c0:	46b2      	mov	sl, r6
    65c2:	9801      	ldr	r0, [sp, #4]
    65c4:	0002      	movs	r2, r0
    65c6:	3204      	adds	r2, #4
    65c8:	3034      	adds	r0, #52	; 0x34
    65ca:	2100      	movs	r1, #0
    65cc:	c202      	stmia	r2!, {r1}
    65ce:	4282      	cmp	r2, r0
    65d0:	d1fc      	bne.n	65cc <tcc_init+0x2a0>
    65d2:	2200      	movs	r2, #0
    65d4:	9801      	ldr	r0, [sp, #4]
    65d6:	6342      	str	r2, [r0, #52]	; 0x34
    65d8:	6382      	str	r2, [r0, #56]	; 0x38
    65da:	0099      	lsls	r1, r3, #2
    65dc:	4a22      	ldr	r2, [pc, #136]	; (6668 <tcc_init+0x33c>)
    65de:	5088      	str	r0, [r1, r2]
    65e0:	6004      	str	r4, [r0, #0]
    65e2:	22a0      	movs	r2, #160	; 0xa0
    65e4:	5ca9      	ldrb	r1, [r5, r2]
    65e6:	3a64      	subs	r2, #100	; 0x64
    65e8:	5481      	strb	r1, [r0, r2]
    65ea:	a90d      	add	r1, sp, #52	; 0x34
    65ec:	7aaa      	ldrb	r2, [r5, #10]
    65ee:	700a      	strb	r2, [r1, #0]
    65f0:	4a1e      	ldr	r2, [pc, #120]	; (666c <tcc_init+0x340>)
    65f2:	5cd6      	ldrb	r6, [r2, r3]
    65f4:	0030      	movs	r0, r6
    65f6:	4b1e      	ldr	r3, [pc, #120]	; (6670 <tcc_init+0x344>)
    65f8:	4798      	blx	r3
    65fa:	0030      	movs	r0, r6
    65fc:	4b1d      	ldr	r3, [pc, #116]	; (6674 <tcc_init+0x348>)
    65fe:	4798      	blx	r3
    6600:	464b      	mov	r3, r9
    6602:	2b00      	cmp	r3, #0
    6604:	dd3c      	ble.n	6680 <tcc_init+0x354>
    6606:	002e      	movs	r6, r5
    6608:	3658      	adds	r6, #88	; 0x58
    660a:	3398      	adds	r3, #152	; 0x98
    660c:	4698      	mov	r8, r3
    660e:	44a8      	add	r8, r5
    6610:	2301      	movs	r3, #1
    6612:	4699      	mov	r9, r3
    6614:	46ab      	mov	fp, r5
    6616:	4645      	mov	r5, r8
    6618:	46a0      	mov	r8, r4
    661a:	9c08      	ldr	r4, [sp, #32]
    661c:	e003      	b.n	6626 <tcc_init+0x2fa>
    661e:	3401      	adds	r4, #1
    6620:	3604      	adds	r6, #4
    6622:	42ac      	cmp	r4, r5
    6624:	d02a      	beq.n	667c <tcc_init+0x350>
    6626:	7823      	ldrb	r3, [r4, #0]
    6628:	2b00      	cmp	r3, #0
    662a:	d0f8      	beq.n	661e <tcc_init+0x2f2>
    662c:	ab0c      	add	r3, sp, #48	; 0x30
    662e:	464a      	mov	r2, r9
    6630:	709a      	strb	r2, [r3, #2]
    6632:	2300      	movs	r3, #0
    6634:	aa0c      	add	r2, sp, #48	; 0x30
    6636:	70d3      	strb	r3, [r2, #3]
    6638:	0013      	movs	r3, r2
    663a:	2220      	movs	r2, #32
    663c:	18b2      	adds	r2, r6, r2
    663e:	7812      	ldrb	r2, [r2, #0]
    6640:	701a      	strb	r2, [r3, #0]
    6642:	464a      	mov	r2, r9
    6644:	705a      	strb	r2, [r3, #1]
    6646:	7830      	ldrb	r0, [r6, #0]
    6648:	0019      	movs	r1, r3
    664a:	4b0b      	ldr	r3, [pc, #44]	; (6678 <tcc_init+0x34c>)
    664c:	4798      	blx	r3
    664e:	e7e6      	b.n	661e <tcc_init+0x2f2>
    6650:	000061ad 	.word	0x000061ad
    6654:	40000400 	.word	0x40000400
    6658:	0000e38c 	.word	0x0000e38c
    665c:	0000e3a0 	.word	0x0000e3a0
    6660:	0000e3ac 	.word	0x0000e3ac
    6664:	0000e398 	.word	0x0000e398
    6668:	20001084 	.word	0x20001084
    666c:	0000e39c 	.word	0x0000e39c
    6670:	00006055 	.word	0x00006055
    6674:	00005fc9 	.word	0x00005fc9
    6678:	0000614d 	.word	0x0000614d
    667c:	4644      	mov	r4, r8
    667e:	465d      	mov	r5, fp
    6680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6682:	031b      	lsls	r3, r3, #12
    6684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6686:	0212      	lsls	r2, r2, #8
    6688:	4313      	orrs	r3, r2
    668a:	9a02      	ldr	r2, [sp, #8]
    668c:	4313      	orrs	r3, r2
    668e:	6023      	str	r3, [r4, #0]
    6690:	2204      	movs	r2, #4
    6692:	68a3      	ldr	r3, [r4, #8]
    6694:	421a      	tst	r2, r3
    6696:	d1fc      	bne.n	6692 <tcc_init+0x366>
    6698:	23ff      	movs	r3, #255	; 0xff
    669a:	7123      	strb	r3, [r4, #4]
    669c:	2204      	movs	r2, #4
    669e:	68a3      	ldr	r3, [r4, #8]
    66a0:	421a      	tst	r2, r3
    66a2:	d1fc      	bne.n	669e <tcc_init+0x372>
    66a4:	466b      	mov	r3, sp
    66a6:	7e1b      	ldrb	r3, [r3, #24]
    66a8:	7163      	strb	r3, [r4, #5]
    66aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    66ac:	60e3      	str	r3, [r4, #12]
    66ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    66b0:	6123      	str	r3, [r4, #16]
    66b2:	61a7      	str	r7, [r4, #24]
    66b4:	4a1d      	ldr	r2, [pc, #116]	; (672c <tcc_init+0x400>)
    66b6:	68a3      	ldr	r3, [r4, #8]
    66b8:	4213      	tst	r3, r2
    66ba:	d1fc      	bne.n	66b6 <tcc_init+0x38a>
    66bc:	4653      	mov	r3, sl
    66be:	63e3      	str	r3, [r4, #60]	; 0x3c
    66c0:	2210      	movs	r2, #16
    66c2:	68a3      	ldr	r3, [r4, #8]
    66c4:	421a      	tst	r2, r3
    66c6:	d1fc      	bne.n	66c2 <tcc_init+0x396>
    66c8:	682b      	ldr	r3, [r5, #0]
    66ca:	6363      	str	r3, [r4, #52]	; 0x34
    66cc:	4a18      	ldr	r2, [pc, #96]	; (6730 <tcc_init+0x404>)
    66ce:	68a3      	ldr	r3, [r4, #8]
    66d0:	4213      	tst	r3, r2
    66d2:	d1fc      	bne.n	66ce <tcc_init+0x3a2>
    66d4:	686b      	ldr	r3, [r5, #4]
    66d6:	6423      	str	r3, [r4, #64]	; 0x40
    66d8:	9805      	ldr	r0, [sp, #20]
    66da:	2800      	cmp	r0, #0
    66dc:	dd22      	ble.n	6724 <tcc_init+0x3f8>
    66de:	351c      	adds	r5, #28
    66e0:	2100      	movs	r1, #0
    66e2:	4e14      	ldr	r6, [pc, #80]	; (6734 <tcc_init+0x408>)
    66e4:	0032      	movs	r2, r6
    66e6:	408a      	lsls	r2, r1
    66e8:	68a3      	ldr	r3, [r4, #8]
    66ea:	421a      	tst	r2, r3
    66ec:	d1fc      	bne.n	66e8 <tcc_init+0x3bc>
    66ee:	cd04      	ldmia	r5!, {r2}
    66f0:	000b      	movs	r3, r1
    66f2:	3310      	adds	r3, #16
    66f4:	009b      	lsls	r3, r3, #2
    66f6:	18e3      	adds	r3, r4, r3
    66f8:	605a      	str	r2, [r3, #4]
    66fa:	3101      	adds	r1, #1
    66fc:	4288      	cmp	r0, r1
    66fe:	dcf1      	bgt.n	66e4 <tcc_init+0x3b8>
    6700:	2000      	movs	r0, #0
    6702:	e62d      	b.n	6360 <tcc_init+0x34>
    6704:	2017      	movs	r0, #23
    6706:	e62b      	b.n	6360 <tcc_init+0x34>
    6708:	2017      	movs	r0, #23
    670a:	e629      	b.n	6360 <tcc_init+0x34>
    670c:	2017      	movs	r0, #23
    670e:	e627      	b.n	6360 <tcc_init+0x34>
    6710:	2017      	movs	r0, #23
    6712:	e625      	b.n	6360 <tcc_init+0x34>
    6714:	2017      	movs	r0, #23
    6716:	e623      	b.n	6360 <tcc_init+0x34>
    6718:	2017      	movs	r0, #23
    671a:	e621      	b.n	6360 <tcc_init+0x34>
    671c:	2017      	movs	r0, #23
    671e:	e61f      	b.n	6360 <tcc_init+0x34>
    6720:	2017      	movs	r0, #23
    6722:	e61d      	b.n	6360 <tcc_init+0x34>
    6724:	2000      	movs	r0, #0
    6726:	e61b      	b.n	6360 <tcc_init+0x34>
    6728:	2017      	movs	r0, #23
    672a:	e619      	b.n	6360 <tcc_init+0x34>
    672c:	00020040 	.word	0x00020040
    6730:	00040080 	.word	0x00040080
    6734:	00080100 	.word	0x00080100

00006738 <tcc_register_callback>:
    6738:	0092      	lsls	r2, r2, #2
    673a:	1883      	adds	r3, r0, r2
    673c:	6059      	str	r1, [r3, #4]
    673e:	4b03      	ldr	r3, [pc, #12]	; (674c <tcc_register_callback+0x14>)
    6740:	58d3      	ldr	r3, [r2, r3]
    6742:	6b42      	ldr	r2, [r0, #52]	; 0x34
    6744:	4313      	orrs	r3, r2
    6746:	6343      	str	r3, [r0, #52]	; 0x34
    6748:	2000      	movs	r0, #0
    674a:	4770      	bx	lr
    674c:	0000e3b0 	.word	0x0000e3b0

00006750 <tcc_enable_callback>:
    6750:	b570      	push	{r4, r5, r6, lr}
    6752:	0004      	movs	r4, r0
    6754:	000d      	movs	r5, r1
    6756:	6800      	ldr	r0, [r0, #0]
    6758:	4b09      	ldr	r3, [pc, #36]	; (6780 <tcc_enable_callback+0x30>)
    675a:	4798      	blx	r3
    675c:	4b09      	ldr	r3, [pc, #36]	; (6784 <tcc_enable_callback+0x34>)
    675e:	5c1b      	ldrb	r3, [r3, r0]
    6760:	221f      	movs	r2, #31
    6762:	401a      	ands	r2, r3
    6764:	2301      	movs	r3, #1
    6766:	4093      	lsls	r3, r2
    6768:	4a07      	ldr	r2, [pc, #28]	; (6788 <tcc_enable_callback+0x38>)
    676a:	6013      	str	r3, [r2, #0]
    676c:	00ad      	lsls	r5, r5, #2
    676e:	4b07      	ldr	r3, [pc, #28]	; (678c <tcc_enable_callback+0x3c>)
    6770:	58ea      	ldr	r2, [r5, r3]
    6772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6774:	4313      	orrs	r3, r2
    6776:	63a3      	str	r3, [r4, #56]	; 0x38
    6778:	6823      	ldr	r3, [r4, #0]
    677a:	629a      	str	r2, [r3, #40]	; 0x28
    677c:	bd70      	pop	{r4, r5, r6, pc}
    677e:	46c0      	nop			; (mov r8, r8)
    6780:	000061ad 	.word	0x000061ad
    6784:	0000e3e0 	.word	0x0000e3e0
    6788:	e000e100 	.word	0xe000e100
    678c:	0000e3b0 	.word	0x0000e3b0

00006790 <_tcc_interrupt_handler>:
    6790:	b5f0      	push	{r4, r5, r6, r7, lr}
    6792:	46c6      	mov	lr, r8
    6794:	b500      	push	{lr}
    6796:	0080      	lsls	r0, r0, #2
    6798:	4b0e      	ldr	r3, [pc, #56]	; (67d4 <_tcc_interrupt_handler+0x44>)
    679a:	58c7      	ldr	r7, [r0, r3]
    679c:	683b      	ldr	r3, [r7, #0]
    679e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    67a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    67a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    67a4:	4013      	ands	r3, r2
    67a6:	401e      	ands	r6, r3
    67a8:	2400      	movs	r4, #0
    67aa:	4b0b      	ldr	r3, [pc, #44]	; (67d8 <_tcc_interrupt_handler+0x48>)
    67ac:	4698      	mov	r8, r3
    67ae:	e002      	b.n	67b6 <_tcc_interrupt_handler+0x26>
    67b0:	3404      	adds	r4, #4
    67b2:	2c30      	cmp	r4, #48	; 0x30
    67b4:	d00a      	beq.n	67cc <_tcc_interrupt_handler+0x3c>
    67b6:	4643      	mov	r3, r8
    67b8:	58e5      	ldr	r5, [r4, r3]
    67ba:	4235      	tst	r5, r6
    67bc:	d0f8      	beq.n	67b0 <_tcc_interrupt_handler+0x20>
    67be:	193b      	adds	r3, r7, r4
    67c0:	685b      	ldr	r3, [r3, #4]
    67c2:	0038      	movs	r0, r7
    67c4:	4798      	blx	r3
    67c6:	683b      	ldr	r3, [r7, #0]
    67c8:	62dd      	str	r5, [r3, #44]	; 0x2c
    67ca:	e7f1      	b.n	67b0 <_tcc_interrupt_handler+0x20>
    67cc:	bc04      	pop	{r2}
    67ce:	4690      	mov	r8, r2
    67d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67d2:	46c0      	nop			; (mov r8, r8)
    67d4:	20001084 	.word	0x20001084
    67d8:	0000e3b0 	.word	0x0000e3b0

000067dc <TCC0_Handler>:
    67dc:	b510      	push	{r4, lr}
    67de:	2000      	movs	r0, #0
    67e0:	4b01      	ldr	r3, [pc, #4]	; (67e8 <TCC0_Handler+0xc>)
    67e2:	4798      	blx	r3
    67e4:	bd10      	pop	{r4, pc}
    67e6:	46c0      	nop			; (mov r8, r8)
    67e8:	00006791 	.word	0x00006791

000067ec <TCC1_Handler>:
    67ec:	b510      	push	{r4, lr}
    67ee:	2001      	movs	r0, #1
    67f0:	4b01      	ldr	r3, [pc, #4]	; (67f8 <TCC1_Handler+0xc>)
    67f2:	4798      	blx	r3
    67f4:	bd10      	pop	{r4, pc}
    67f6:	46c0      	nop			; (mov r8, r8)
    67f8:	00006791 	.word	0x00006791

000067fc <TCC2_Handler>:
    67fc:	b510      	push	{r4, lr}
    67fe:	2002      	movs	r0, #2
    6800:	4b01      	ldr	r3, [pc, #4]	; (6808 <TCC2_Handler+0xc>)
    6802:	4798      	blx	r3
    6804:	bd10      	pop	{r4, pc}
    6806:	46c0      	nop			; (mov r8, r8)
    6808:	00006791 	.word	0x00006791

0000680c <Dummy_Handler>:
    680c:	e7fe      	b.n	680c <Dummy_Handler>
	...

00006810 <Reset_Handler>:
    6810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6812:	4a2a      	ldr	r2, [pc, #168]	; (68bc <Reset_Handler+0xac>)
    6814:	4b2a      	ldr	r3, [pc, #168]	; (68c0 <Reset_Handler+0xb0>)
    6816:	429a      	cmp	r2, r3
    6818:	d011      	beq.n	683e <Reset_Handler+0x2e>
    681a:	001a      	movs	r2, r3
    681c:	4b29      	ldr	r3, [pc, #164]	; (68c4 <Reset_Handler+0xb4>)
    681e:	429a      	cmp	r2, r3
    6820:	d20d      	bcs.n	683e <Reset_Handler+0x2e>
    6822:	4a29      	ldr	r2, [pc, #164]	; (68c8 <Reset_Handler+0xb8>)
    6824:	3303      	adds	r3, #3
    6826:	1a9b      	subs	r3, r3, r2
    6828:	089b      	lsrs	r3, r3, #2
    682a:	3301      	adds	r3, #1
    682c:	009b      	lsls	r3, r3, #2
    682e:	2200      	movs	r2, #0
    6830:	4823      	ldr	r0, [pc, #140]	; (68c0 <Reset_Handler+0xb0>)
    6832:	4922      	ldr	r1, [pc, #136]	; (68bc <Reset_Handler+0xac>)
    6834:	588c      	ldr	r4, [r1, r2]
    6836:	5084      	str	r4, [r0, r2]
    6838:	3204      	adds	r2, #4
    683a:	429a      	cmp	r2, r3
    683c:	d1fa      	bne.n	6834 <Reset_Handler+0x24>
    683e:	4a23      	ldr	r2, [pc, #140]	; (68cc <Reset_Handler+0xbc>)
    6840:	4b23      	ldr	r3, [pc, #140]	; (68d0 <Reset_Handler+0xc0>)
    6842:	429a      	cmp	r2, r3
    6844:	d20a      	bcs.n	685c <Reset_Handler+0x4c>
    6846:	43d3      	mvns	r3, r2
    6848:	4921      	ldr	r1, [pc, #132]	; (68d0 <Reset_Handler+0xc0>)
    684a:	185b      	adds	r3, r3, r1
    684c:	2103      	movs	r1, #3
    684e:	438b      	bics	r3, r1
    6850:	3304      	adds	r3, #4
    6852:	189b      	adds	r3, r3, r2
    6854:	2100      	movs	r1, #0
    6856:	c202      	stmia	r2!, {r1}
    6858:	4293      	cmp	r3, r2
    685a:	d1fc      	bne.n	6856 <Reset_Handler+0x46>
    685c:	4a1d      	ldr	r2, [pc, #116]	; (68d4 <Reset_Handler+0xc4>)
    685e:	21ff      	movs	r1, #255	; 0xff
    6860:	4b1d      	ldr	r3, [pc, #116]	; (68d8 <Reset_Handler+0xc8>)
    6862:	438b      	bics	r3, r1
    6864:	6093      	str	r3, [r2, #8]
    6866:	39fd      	subs	r1, #253	; 0xfd
    6868:	2390      	movs	r3, #144	; 0x90
    686a:	005b      	lsls	r3, r3, #1
    686c:	4a1b      	ldr	r2, [pc, #108]	; (68dc <Reset_Handler+0xcc>)
    686e:	50d1      	str	r1, [r2, r3]
    6870:	4a1b      	ldr	r2, [pc, #108]	; (68e0 <Reset_Handler+0xd0>)
    6872:	78d3      	ldrb	r3, [r2, #3]
    6874:	2503      	movs	r5, #3
    6876:	43ab      	bics	r3, r5
    6878:	2402      	movs	r4, #2
    687a:	4323      	orrs	r3, r4
    687c:	70d3      	strb	r3, [r2, #3]
    687e:	78d3      	ldrb	r3, [r2, #3]
    6880:	270c      	movs	r7, #12
    6882:	43bb      	bics	r3, r7
    6884:	2608      	movs	r6, #8
    6886:	4333      	orrs	r3, r6
    6888:	70d3      	strb	r3, [r2, #3]
    688a:	4b16      	ldr	r3, [pc, #88]	; (68e4 <Reset_Handler+0xd4>)
    688c:	7b98      	ldrb	r0, [r3, #14]
    688e:	2230      	movs	r2, #48	; 0x30
    6890:	4390      	bics	r0, r2
    6892:	2220      	movs	r2, #32
    6894:	4310      	orrs	r0, r2
    6896:	7398      	strb	r0, [r3, #14]
    6898:	7b99      	ldrb	r1, [r3, #14]
    689a:	43b9      	bics	r1, r7
    689c:	4331      	orrs	r1, r6
    689e:	7399      	strb	r1, [r3, #14]
    68a0:	7b9a      	ldrb	r2, [r3, #14]
    68a2:	43aa      	bics	r2, r5
    68a4:	4322      	orrs	r2, r4
    68a6:	739a      	strb	r2, [r3, #14]
    68a8:	4a0f      	ldr	r2, [pc, #60]	; (68e8 <Reset_Handler+0xd8>)
    68aa:	6853      	ldr	r3, [r2, #4]
    68ac:	2180      	movs	r1, #128	; 0x80
    68ae:	430b      	orrs	r3, r1
    68b0:	6053      	str	r3, [r2, #4]
    68b2:	4b0e      	ldr	r3, [pc, #56]	; (68ec <Reset_Handler+0xdc>)
    68b4:	4798      	blx	r3
    68b6:	4b0e      	ldr	r3, [pc, #56]	; (68f0 <Reset_Handler+0xe0>)
    68b8:	4798      	blx	r3
    68ba:	e7fe      	b.n	68ba <Reset_Handler+0xaa>
    68bc:	0000f688 	.word	0x0000f688
    68c0:	20000000 	.word	0x20000000
    68c4:	20000320 	.word	0x20000320
    68c8:	20000004 	.word	0x20000004
    68cc:	20000320 	.word	0x20000320
    68d0:	200013f8 	.word	0x200013f8
    68d4:	e000ed00 	.word	0xe000ed00
    68d8:	00000000 	.word	0x00000000
    68dc:	41007000 	.word	0x41007000
    68e0:	41005000 	.word	0x41005000
    68e4:	41004800 	.word	0x41004800
    68e8:	41004000 	.word	0x41004000
    68ec:	0000bc49 	.word	0x0000bc49
    68f0:	0000b47d 	.word	0x0000b47d

000068f4 <_read>:
    68f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    68f6:	46c6      	mov	lr, r8
    68f8:	b500      	push	{lr}
    68fa:	000c      	movs	r4, r1
    68fc:	4690      	mov	r8, r2
    68fe:	2800      	cmp	r0, #0
    6900:	d10f      	bne.n	6922 <_read+0x2e>
    6902:	2a00      	cmp	r2, #0
    6904:	dd11      	ble.n	692a <_read+0x36>
    6906:	188f      	adds	r7, r1, r2
    6908:	4e09      	ldr	r6, [pc, #36]	; (6930 <_read+0x3c>)
    690a:	4d0a      	ldr	r5, [pc, #40]	; (6934 <_read+0x40>)
    690c:	6830      	ldr	r0, [r6, #0]
    690e:	0021      	movs	r1, r4
    6910:	682b      	ldr	r3, [r5, #0]
    6912:	4798      	blx	r3
    6914:	3401      	adds	r4, #1
    6916:	42bc      	cmp	r4, r7
    6918:	d1f8      	bne.n	690c <_read+0x18>
    691a:	4640      	mov	r0, r8
    691c:	bc04      	pop	{r2}
    691e:	4690      	mov	r8, r2
    6920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6922:	2301      	movs	r3, #1
    6924:	425b      	negs	r3, r3
    6926:	4698      	mov	r8, r3
    6928:	e7f7      	b.n	691a <_read+0x26>
    692a:	4680      	mov	r8, r0
    692c:	e7f5      	b.n	691a <_read+0x26>
    692e:	46c0      	nop			; (mov r8, r8)
    6930:	20001098 	.word	0x20001098
    6934:	20001090 	.word	0x20001090

00006938 <_write>:
    6938:	b5f0      	push	{r4, r5, r6, r7, lr}
    693a:	46c6      	mov	lr, r8
    693c:	b500      	push	{lr}
    693e:	000e      	movs	r6, r1
    6940:	0015      	movs	r5, r2
    6942:	3801      	subs	r0, #1
    6944:	2802      	cmp	r0, #2
    6946:	d810      	bhi.n	696a <_write+0x32>
    6948:	2a00      	cmp	r2, #0
    694a:	d011      	beq.n	6970 <_write+0x38>
    694c:	2400      	movs	r4, #0
    694e:	4b0c      	ldr	r3, [pc, #48]	; (6980 <_write+0x48>)
    6950:	4698      	mov	r8, r3
    6952:	4f0c      	ldr	r7, [pc, #48]	; (6984 <_write+0x4c>)
    6954:	4643      	mov	r3, r8
    6956:	6818      	ldr	r0, [r3, #0]
    6958:	5d31      	ldrb	r1, [r6, r4]
    695a:	683b      	ldr	r3, [r7, #0]
    695c:	4798      	blx	r3
    695e:	2800      	cmp	r0, #0
    6960:	db08      	blt.n	6974 <_write+0x3c>
    6962:	3401      	adds	r4, #1
    6964:	42a5      	cmp	r5, r4
    6966:	d1f5      	bne.n	6954 <_write+0x1c>
    6968:	e006      	b.n	6978 <_write+0x40>
    696a:	2401      	movs	r4, #1
    696c:	4264      	negs	r4, r4
    696e:	e003      	b.n	6978 <_write+0x40>
    6970:	0014      	movs	r4, r2
    6972:	e001      	b.n	6978 <_write+0x40>
    6974:	2401      	movs	r4, #1
    6976:	4264      	negs	r4, r4
    6978:	0020      	movs	r0, r4
    697a:	bc04      	pop	{r2}
    697c:	4690      	mov	r8, r2
    697e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6980:	20001098 	.word	0x20001098
    6984:	20001094 	.word	0x20001094

00006988 <_sbrk>:
    6988:	0003      	movs	r3, r0
    698a:	4a06      	ldr	r2, [pc, #24]	; (69a4 <_sbrk+0x1c>)
    698c:	6812      	ldr	r2, [r2, #0]
    698e:	2a00      	cmp	r2, #0
    6990:	d004      	beq.n	699c <_sbrk+0x14>
    6992:	4a04      	ldr	r2, [pc, #16]	; (69a4 <_sbrk+0x1c>)
    6994:	6810      	ldr	r0, [r2, #0]
    6996:	18c3      	adds	r3, r0, r3
    6998:	6013      	str	r3, [r2, #0]
    699a:	4770      	bx	lr
    699c:	4902      	ldr	r1, [pc, #8]	; (69a8 <_sbrk+0x20>)
    699e:	4a01      	ldr	r2, [pc, #4]	; (69a4 <_sbrk+0x1c>)
    69a0:	6011      	str	r1, [r2, #0]
    69a2:	e7f6      	b.n	6992 <_sbrk+0xa>
    69a4:	20000414 	.word	0x20000414
    69a8:	200033f8 	.word	0x200033f8

000069ac <_close>:
    69ac:	2001      	movs	r0, #1
    69ae:	4240      	negs	r0, r0
    69b0:	4770      	bx	lr

000069b2 <_fstat>:
    69b2:	2380      	movs	r3, #128	; 0x80
    69b4:	019b      	lsls	r3, r3, #6
    69b6:	604b      	str	r3, [r1, #4]
    69b8:	2000      	movs	r0, #0
    69ba:	4770      	bx	lr

000069bc <_isatty>:
    69bc:	2001      	movs	r0, #1
    69be:	4770      	bx	lr

000069c0 <_lseek>:
    69c0:	2000      	movs	r0, #0
    69c2:	4770      	bx	lr

000069c4 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    69c4:	b530      	push	{r4, r5, lr}
    69c6:	b087      	sub	sp, #28
    69c8:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    69ca:	aa01      	add	r2, sp, #4
    69cc:	23a0      	movs	r3, #160	; 0xa0
    69ce:	011b      	lsls	r3, r3, #4
    69d0:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    69d2:	2300      	movs	r3, #0
    69d4:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    69d6:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    69d8:	21fa      	movs	r1, #250	; 0xfa
    69da:	00c9      	lsls	r1, r1, #3
    69dc:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    69de:	2101      	movs	r1, #1
    69e0:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    69e2:	2004      	movs	r0, #4
    69e4:	7210      	strb	r0, [r2, #8]
    69e6:	7253      	strb	r3, [r2, #9]
    69e8:	7293      	strb	r3, [r2, #10]
    69ea:	72d3      	strb	r3, [r2, #11]
    69ec:	7311      	strb	r1, [r2, #12]
    69ee:	7351      	strb	r1, [r2, #13]
    69f0:	4b14      	ldr	r3, [pc, #80]	; (6a44 <disk_initialize+0x80>)
    69f2:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    69f4:	2306      	movs	r3, #6
    69f6:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    69f8:	4d13      	ldr	r5, [pc, #76]	; (6a48 <disk_initialize+0x84>)
    69fa:	4914      	ldr	r1, [pc, #80]	; (6a4c <disk_initialize+0x88>)
    69fc:	0028      	movs	r0, r5
    69fe:	4b14      	ldr	r3, [pc, #80]	; (6a50 <disk_initialize+0x8c>)
    6a00:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    6a02:	0028      	movs	r0, r5
    6a04:	4b13      	ldr	r3, [pc, #76]	; (6a54 <disk_initialize+0x90>)
    6a06:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    6a08:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    6a0a:	2c01      	cmp	r4, #1
    6a0c:	d901      	bls.n	6a12 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    6a0e:	b007      	add	sp, #28
    6a10:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    6a12:	0020      	movs	r0, r4
    6a14:	4b10      	ldr	r3, [pc, #64]	; (6a58 <disk_initialize+0x94>)
    6a16:	4798      	blx	r3
    6a18:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    6a1a:	2803      	cmp	r0, #3
    6a1c:	d106      	bne.n	6a2c <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    6a1e:	0020      	movs	r0, r4
    6a20:	4b0d      	ldr	r3, [pc, #52]	; (6a58 <disk_initialize+0x94>)
    6a22:	4798      	blx	r3
    6a24:	0003      	movs	r3, r0
		return STA_NOINIT;
    6a26:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    6a28:	2b03      	cmp	r3, #3
    6a2a:	d0f0      	beq.n	6a0e <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    6a2c:	2b00      	cmp	r3, #0
    6a2e:	d106      	bne.n	6a3e <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    6a30:	0020      	movs	r0, r4
    6a32:	4b0a      	ldr	r3, [pc, #40]	; (6a5c <disk_initialize+0x98>)
    6a34:	4798      	blx	r3
	return 0;
    6a36:	1e43      	subs	r3, r0, #1
    6a38:	4198      	sbcs	r0, r3
    6a3a:	0080      	lsls	r0, r0, #2
    6a3c:	e7e7      	b.n	6a0e <disk_initialize+0x4a>
		return STA_NOINIT;
    6a3e:	2001      	movs	r0, #1
    6a40:	e7e5      	b.n	6a0e <disk_initialize+0x4a>
    6a42:	46c0      	nop			; (mov r8, r8)
    6a44:	000007de 	.word	0x000007de
    6a48:	2000109c 	.word	0x2000109c
    6a4c:	40001400 	.word	0x40001400
    6a50:	00004889 	.word	0x00004889
    6a54:	00004725 	.word	0x00004725
    6a58:	000043f5 	.word	0x000043f5
    6a5c:	00004431 	.word	0x00004431

00006a60 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    6a60:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    6a62:	4b05      	ldr	r3, [pc, #20]	; (6a78 <disk_status+0x18>)
    6a64:	4798      	blx	r3
    6a66:	1e03      	subs	r3, r0, #0
    6a68:	d004      	beq.n	6a74 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    6a6a:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    6a6c:	2b02      	cmp	r3, #2
    6a6e:	d000      	beq.n	6a72 <disk_status+0x12>
	default:
		return STA_NOINIT;
    6a70:	3802      	subs	r0, #2
	}
}
    6a72:	bd10      	pop	{r4, pc}
		return 0;
    6a74:	2000      	movs	r0, #0
    6a76:	e7fc      	b.n	6a72 <disk_status+0x12>
    6a78:	000043f5 	.word	0x000043f5

00006a7c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    6a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a7e:	46de      	mov	lr, fp
    6a80:	464f      	mov	r7, r9
    6a82:	4646      	mov	r6, r8
    6a84:	b5c0      	push	{r6, r7, lr}
    6a86:	b084      	sub	sp, #16
    6a88:	9001      	str	r0, [sp, #4]
    6a8a:	000d      	movs	r5, r1
    6a8c:	0014      	movs	r4, r2
    6a8e:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6a90:	4b18      	ldr	r3, [pc, #96]	; (6af4 <disk_read+0x78>)
    6a92:	4798      	blx	r3
    6a94:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    6a96:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    6a98:	2e00      	cmp	r6, #0
    6a9a:	d105      	bne.n	6aa8 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    6a9c:	b004      	add	sp, #16
    6a9e:	bc1c      	pop	{r2, r3, r4}
    6aa0:	4690      	mov	r8, r2
    6aa2:	4699      	mov	r9, r3
    6aa4:	46a3      	mov	fp, r4
    6aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    6aa8:	a903      	add	r1, sp, #12
    6aaa:	9801      	ldr	r0, [sp, #4]
    6aac:	4b12      	ldr	r3, [pc, #72]	; (6af8 <disk_read+0x7c>)
    6aae:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6ab0:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    6ab2:	0032      	movs	r2, r6
    6ab4:	437a      	muls	r2, r7
    6ab6:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    6ab8:	9b03      	ldr	r3, [sp, #12]
    6aba:	3301      	adds	r3, #1
    6abc:	4373      	muls	r3, r6
		return RES_PARERR;
    6abe:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    6ac0:	429a      	cmp	r2, r3
    6ac2:	d8eb      	bhi.n	6a9c <disk_read+0x20>
	for (i = 0; i < count; i++) {
    6ac4:	2f00      	cmp	r7, #0
    6ac6:	d011      	beq.n	6aec <disk_read+0x70>
    6ac8:	0273      	lsls	r3, r6, #9
    6aca:	4698      	mov	r8, r3
    6acc:	1c7b      	adds	r3, r7, #1
    6ace:	469b      	mov	fp, r3
    6ad0:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6ad2:	4e0a      	ldr	r6, [pc, #40]	; (6afc <disk_read+0x80>)
    6ad4:	002a      	movs	r2, r5
    6ad6:	0021      	movs	r1, r4
    6ad8:	9801      	ldr	r0, [sp, #4]
    6ada:	47b0      	blx	r6
    6adc:	2800      	cmp	r0, #0
    6ade:	d107      	bne.n	6af0 <disk_read+0x74>
    6ae0:	3701      	adds	r7, #1
    6ae2:	444c      	add	r4, r9
    6ae4:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    6ae6:	455f      	cmp	r7, fp
    6ae8:	d1f4      	bne.n	6ad4 <disk_read+0x58>
    6aea:	e7d7      	b.n	6a9c <disk_read+0x20>
	return RES_OK;
    6aec:	2000      	movs	r0, #0
    6aee:	e7d5      	b.n	6a9c <disk_read+0x20>
			return RES_ERROR;
    6af0:	2001      	movs	r0, #1
    6af2:	e7d3      	b.n	6a9c <disk_read+0x20>
    6af4:	00004429 	.word	0x00004429
    6af8:	0000440d 	.word	0x0000440d
    6afc:	00004449 	.word	0x00004449

00006b00 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    6b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b02:	46de      	mov	lr, fp
    6b04:	464f      	mov	r7, r9
    6b06:	4646      	mov	r6, r8
    6b08:	b5c0      	push	{r6, r7, lr}
    6b0a:	b084      	sub	sp, #16
    6b0c:	9001      	str	r0, [sp, #4]
    6b0e:	000d      	movs	r5, r1
    6b10:	0014      	movs	r4, r2
    6b12:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6b14:	4b18      	ldr	r3, [pc, #96]	; (6b78 <disk_write+0x78>)
    6b16:	4798      	blx	r3
    6b18:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    6b1a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    6b1c:	2e00      	cmp	r6, #0
    6b1e:	d105      	bne.n	6b2c <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    6b20:	b004      	add	sp, #16
    6b22:	bc1c      	pop	{r2, r3, r4}
    6b24:	4690      	mov	r8, r2
    6b26:	4699      	mov	r9, r3
    6b28:	46a3      	mov	fp, r4
    6b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    6b2c:	a903      	add	r1, sp, #12
    6b2e:	9801      	ldr	r0, [sp, #4]
    6b30:	4b12      	ldr	r3, [pc, #72]	; (6b7c <disk_write+0x7c>)
    6b32:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6b34:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    6b36:	0032      	movs	r2, r6
    6b38:	437a      	muls	r2, r7
    6b3a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    6b3c:	9b03      	ldr	r3, [sp, #12]
    6b3e:	3301      	adds	r3, #1
    6b40:	4373      	muls	r3, r6
		return RES_PARERR;
    6b42:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    6b44:	429a      	cmp	r2, r3
    6b46:	d8eb      	bhi.n	6b20 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    6b48:	2f00      	cmp	r7, #0
    6b4a:	d011      	beq.n	6b70 <disk_write+0x70>
    6b4c:	0273      	lsls	r3, r6, #9
    6b4e:	4698      	mov	r8, r3
    6b50:	1c7b      	adds	r3, r7, #1
    6b52:	469b      	mov	fp, r3
    6b54:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6b56:	4e0a      	ldr	r6, [pc, #40]	; (6b80 <disk_write+0x80>)
    6b58:	002a      	movs	r2, r5
    6b5a:	0021      	movs	r1, r4
    6b5c:	9801      	ldr	r0, [sp, #4]
    6b5e:	47b0      	blx	r6
    6b60:	2800      	cmp	r0, #0
    6b62:	d107      	bne.n	6b74 <disk_write+0x74>
    6b64:	3701      	adds	r7, #1
    6b66:	444c      	add	r4, r9
    6b68:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    6b6a:	455f      	cmp	r7, fp
    6b6c:	d1f4      	bne.n	6b58 <disk_write+0x58>
    6b6e:	e7d7      	b.n	6b20 <disk_write+0x20>
	return RES_OK;
    6b70:	2000      	movs	r0, #0
    6b72:	e7d5      	b.n	6b20 <disk_write+0x20>
			return RES_ERROR;
    6b74:	2001      	movs	r0, #1
    6b76:	e7d3      	b.n	6b20 <disk_write+0x20>
    6b78:	00004429 	.word	0x00004429
    6b7c:	0000440d 	.word	0x0000440d
    6b80:	00004469 	.word	0x00004469

00006b84 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    6b84:	b510      	push	{r4, lr}
    6b86:	b082      	sub	sp, #8
    6b88:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    6b8a:	2901      	cmp	r1, #1
    6b8c:	d00b      	beq.n	6ba6 <disk_ioctl+0x22>
    6b8e:	2900      	cmp	r1, #0
    6b90:	d020      	beq.n	6bd4 <disk_ioctl+0x50>
    6b92:	2902      	cmp	r1, #2
    6b94:	d00f      	beq.n	6bb6 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    6b96:	2004      	movs	r0, #4
	switch (ctrl) {
    6b98:	2903      	cmp	r1, #3
    6b9a:	d102      	bne.n	6ba2 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    6b9c:	2301      	movs	r3, #1
    6b9e:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    6ba0:	2000      	movs	r0, #0
	}

	return res;
}
    6ba2:	b002      	add	sp, #8
    6ba4:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    6ba6:	a901      	add	r1, sp, #4
    6ba8:	4b0e      	ldr	r3, [pc, #56]	; (6be4 <disk_ioctl+0x60>)
    6baa:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    6bac:	9b01      	ldr	r3, [sp, #4]
    6bae:	3301      	adds	r3, #1
    6bb0:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    6bb2:	2000      	movs	r0, #0
	break;
    6bb4:	e7f5      	b.n	6ba2 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    6bb6:	4b0c      	ldr	r3, [pc, #48]	; (6be8 <disk_ioctl+0x64>)
    6bb8:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    6bba:	1e43      	subs	r3, r0, #1
    6bbc:	b2db      	uxtb	r3, r3
    6bbe:	2b01      	cmp	r3, #1
    6bc0:	d904      	bls.n	6bcc <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6bc2:	1f03      	subs	r3, r0, #4
    6bc4:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    6bc6:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6bc8:	4213      	tst	r3, r2
    6bca:	d1ea      	bne.n	6ba2 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    6bcc:	2300      	movs	r3, #0
    6bce:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    6bd0:	2000      	movs	r0, #0
	break;
    6bd2:	e7e6      	b.n	6ba2 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    6bd4:	4b05      	ldr	r3, [pc, #20]	; (6bec <disk_ioctl+0x68>)
    6bd6:	4798      	blx	r3
    6bd8:	2800      	cmp	r0, #0
    6bda:	d001      	beq.n	6be0 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    6bdc:	2003      	movs	r0, #3
    6bde:	e7e0      	b.n	6ba2 <disk_ioctl+0x1e>
			res = RES_OK;
    6be0:	2000      	movs	r0, #0
    6be2:	e7de      	b.n	6ba2 <disk_ioctl+0x1e>
    6be4:	0000440d 	.word	0x0000440d
    6be8:	00004429 	.word	0x00004429
    6bec:	000043f5 	.word	0x000043f5

00006bf0 <get_fattime>:
    6bf0:	b500      	push	{lr}
    6bf2:	b083      	sub	sp, #12
    6bf4:	4669      	mov	r1, sp
    6bf6:	480f      	ldr	r0, [pc, #60]	; (6c34 <get_fattime+0x44>)
    6bf8:	4b0f      	ldr	r3, [pc, #60]	; (6c38 <get_fattime+0x48>)
    6bfa:	4798      	blx	r3
    6bfc:	466b      	mov	r3, sp
    6bfe:	7958      	ldrb	r0, [r3, #5]
    6c00:	0540      	lsls	r0, r0, #21
    6c02:	791b      	ldrb	r3, [r3, #4]
    6c04:	041b      	lsls	r3, r3, #16
    6c06:	4318      	orrs	r0, r3
    6c08:	466b      	mov	r3, sp
    6c0a:	789b      	ldrb	r3, [r3, #2]
    6c0c:	02db      	lsls	r3, r3, #11
    6c0e:	4318      	orrs	r0, r3
    6c10:	466b      	mov	r3, sp
    6c12:	785b      	ldrb	r3, [r3, #1]
    6c14:	015b      	lsls	r3, r3, #5
    6c16:	4318      	orrs	r0, r3
    6c18:	466b      	mov	r3, sp
    6c1a:	781b      	ldrb	r3, [r3, #0]
    6c1c:	085b      	lsrs	r3, r3, #1
    6c1e:	4318      	orrs	r0, r3
    6c20:	466b      	mov	r3, sp
    6c22:	88db      	ldrh	r3, [r3, #6]
    6c24:	4a05      	ldr	r2, [pc, #20]	; (6c3c <get_fattime+0x4c>)
    6c26:	4694      	mov	ip, r2
    6c28:	4463      	add	r3, ip
    6c2a:	065b      	lsls	r3, r3, #25
    6c2c:	4318      	orrs	r0, r3
    6c2e:	b003      	add	sp, #12
    6c30:	bd00      	pop	{pc}
    6c32:	46c0      	nop			; (mov r8, r8)
    6c34:	2000109c 	.word	0x2000109c
    6c38:	00004811 	.word	0x00004811
    6c3c:	fffff844 	.word	0xfffff844

00006c40 <mem_cpy>:
    6c40:	b510      	push	{r4, lr}
    6c42:	2a00      	cmp	r2, #0
    6c44:	d005      	beq.n	6c52 <mem_cpy+0x12>
    6c46:	2300      	movs	r3, #0
    6c48:	5ccc      	ldrb	r4, [r1, r3]
    6c4a:	54c4      	strb	r4, [r0, r3]
    6c4c:	3301      	adds	r3, #1
    6c4e:	4293      	cmp	r3, r2
    6c50:	d1fa      	bne.n	6c48 <mem_cpy+0x8>
    6c52:	bd10      	pop	{r4, pc}

00006c54 <mem_set>:
    6c54:	2a00      	cmp	r2, #0
    6c56:	d005      	beq.n	6c64 <mem_set+0x10>
    6c58:	0003      	movs	r3, r0
    6c5a:	1882      	adds	r2, r0, r2
    6c5c:	7019      	strb	r1, [r3, #0]
    6c5e:	3301      	adds	r3, #1
    6c60:	4293      	cmp	r3, r2
    6c62:	d1fb      	bne.n	6c5c <mem_set+0x8>
    6c64:	4770      	bx	lr

00006c66 <clust2sect>:
    6c66:	0002      	movs	r2, r0
    6c68:	3902      	subs	r1, #2
    6c6a:	6983      	ldr	r3, [r0, #24]
    6c6c:	3b02      	subs	r3, #2
    6c6e:	2000      	movs	r0, #0
    6c70:	4299      	cmp	r1, r3
    6c72:	d203      	bcs.n	6c7c <clust2sect+0x16>
    6c74:	7890      	ldrb	r0, [r2, #2]
    6c76:	4341      	muls	r1, r0
    6c78:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6c7a:	1808      	adds	r0, r1, r0
    6c7c:	4770      	bx	lr

00006c7e <sum_sfn>:
    6c7e:	0002      	movs	r2, r0
    6c80:	0001      	movs	r1, r0
    6c82:	310b      	adds	r1, #11
    6c84:	2000      	movs	r0, #0
    6c86:	0843      	lsrs	r3, r0, #1
    6c88:	01c0      	lsls	r0, r0, #7
    6c8a:	4303      	orrs	r3, r0
    6c8c:	7810      	ldrb	r0, [r2, #0]
    6c8e:	1818      	adds	r0, r3, r0
    6c90:	b2c0      	uxtb	r0, r0
    6c92:	3201      	adds	r2, #1
    6c94:	428a      	cmp	r2, r1
    6c96:	d1f6      	bne.n	6c86 <sum_sfn+0x8>
    6c98:	4770      	bx	lr
	...

00006c9c <validate>:
    6c9c:	b510      	push	{r4, lr}
    6c9e:	2800      	cmp	r0, #0
    6ca0:	d010      	beq.n	6cc4 <validate+0x28>
    6ca2:	7802      	ldrb	r2, [r0, #0]
    6ca4:	2309      	movs	r3, #9
    6ca6:	2a00      	cmp	r2, #0
    6ca8:	d101      	bne.n	6cae <validate+0x12>
    6caa:	0018      	movs	r0, r3
    6cac:	bd10      	pop	{r4, pc}
    6cae:	88c2      	ldrh	r2, [r0, #6]
    6cb0:	428a      	cmp	r2, r1
    6cb2:	d1fa      	bne.n	6caa <validate+0xe>
    6cb4:	7840      	ldrb	r0, [r0, #1]
    6cb6:	4b04      	ldr	r3, [pc, #16]	; (6cc8 <validate+0x2c>)
    6cb8:	4798      	blx	r3
    6cba:	2303      	movs	r3, #3
    6cbc:	07c0      	lsls	r0, r0, #31
    6cbe:	17c0      	asrs	r0, r0, #31
    6cc0:	4003      	ands	r3, r0
    6cc2:	e7f2      	b.n	6caa <validate+0xe>
    6cc4:	2309      	movs	r3, #9
    6cc6:	e7f0      	b.n	6caa <validate+0xe>
    6cc8:	00006a61 	.word	0x00006a61

00006ccc <check_fs>:
    6ccc:	b570      	push	{r4, r5, r6, lr}
    6cce:	0004      	movs	r4, r0
    6cd0:	000a      	movs	r2, r1
    6cd2:	0001      	movs	r1, r0
    6cd4:	3130      	adds	r1, #48	; 0x30
    6cd6:	7840      	ldrb	r0, [r0, #1]
    6cd8:	2301      	movs	r3, #1
    6cda:	4d1f      	ldr	r5, [pc, #124]	; (6d58 <check_fs+0x8c>)
    6cdc:	47a8      	blx	r5
    6cde:	2303      	movs	r3, #3
    6ce0:	2800      	cmp	r0, #0
    6ce2:	d001      	beq.n	6ce8 <check_fs+0x1c>
    6ce4:	0018      	movs	r0, r3
    6ce6:	bd70      	pop	{r4, r5, r6, pc}
    6ce8:	4b1c      	ldr	r3, [pc, #112]	; (6d5c <check_fs+0x90>)
    6cea:	5ce3      	ldrb	r3, [r4, r3]
    6cec:	021b      	lsls	r3, r3, #8
    6cee:	4a1c      	ldr	r2, [pc, #112]	; (6d60 <check_fs+0x94>)
    6cf0:	5ca2      	ldrb	r2, [r4, r2]
    6cf2:	431a      	orrs	r2, r3
    6cf4:	491b      	ldr	r1, [pc, #108]	; (6d64 <check_fs+0x98>)
    6cf6:	b212      	sxth	r2, r2
    6cf8:	2302      	movs	r3, #2
    6cfa:	428a      	cmp	r2, r1
    6cfc:	d1f2      	bne.n	6ce4 <check_fs+0x18>
    6cfe:	3367      	adds	r3, #103	; 0x67
    6d00:	5ce3      	ldrb	r3, [r4, r3]
    6d02:	061b      	lsls	r3, r3, #24
    6d04:	2268      	movs	r2, #104	; 0x68
    6d06:	5ca2      	ldrb	r2, [r4, r2]
    6d08:	0412      	lsls	r2, r2, #16
    6d0a:	4313      	orrs	r3, r2
    6d0c:	2266      	movs	r2, #102	; 0x66
    6d0e:	5ca2      	ldrb	r2, [r4, r2]
    6d10:	4313      	orrs	r3, r2
    6d12:	2267      	movs	r2, #103	; 0x67
    6d14:	5ca2      	ldrb	r2, [r4, r2]
    6d16:	0212      	lsls	r2, r2, #8
    6d18:	4313      	orrs	r3, r2
    6d1a:	021b      	lsls	r3, r3, #8
    6d1c:	0a1b      	lsrs	r3, r3, #8
    6d1e:	4a12      	ldr	r2, [pc, #72]	; (6d68 <check_fs+0x9c>)
    6d20:	4293      	cmp	r3, r2
    6d22:	d016      	beq.n	6d52 <check_fs+0x86>
    6d24:	2385      	movs	r3, #133	; 0x85
    6d26:	5ce3      	ldrb	r3, [r4, r3]
    6d28:	061b      	lsls	r3, r3, #24
    6d2a:	2284      	movs	r2, #132	; 0x84
    6d2c:	5ca2      	ldrb	r2, [r4, r2]
    6d2e:	0412      	lsls	r2, r2, #16
    6d30:	4313      	orrs	r3, r2
    6d32:	2282      	movs	r2, #130	; 0x82
    6d34:	5ca2      	ldrb	r2, [r4, r2]
    6d36:	4313      	orrs	r3, r2
    6d38:	2283      	movs	r2, #131	; 0x83
    6d3a:	5ca2      	ldrb	r2, [r4, r2]
    6d3c:	0212      	lsls	r2, r2, #8
    6d3e:	4313      	orrs	r3, r2
    6d40:	021b      	lsls	r3, r3, #8
    6d42:	0a1b      	lsrs	r3, r3, #8
    6d44:	4a09      	ldr	r2, [pc, #36]	; (6d6c <check_fs+0xa0>)
    6d46:	4694      	mov	ip, r2
    6d48:	4463      	add	r3, ip
    6d4a:	1e58      	subs	r0, r3, #1
    6d4c:	4183      	sbcs	r3, r0
    6d4e:	b2db      	uxtb	r3, r3
    6d50:	e7c8      	b.n	6ce4 <check_fs+0x18>
    6d52:	2300      	movs	r3, #0
    6d54:	e7c6      	b.n	6ce4 <check_fs+0x18>
    6d56:	46c0      	nop			; (mov r8, r8)
    6d58:	00006a7d 	.word	0x00006a7d
    6d5c:	0000022f 	.word	0x0000022f
    6d60:	0000022e 	.word	0x0000022e
    6d64:	ffffaa55 	.word	0xffffaa55
    6d68:	00544146 	.word	0x00544146
    6d6c:	ffabbeba 	.word	0xffabbeba

00006d70 <chk_mounted>:
    6d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d72:	46d6      	mov	lr, sl
    6d74:	464f      	mov	r7, r9
    6d76:	4646      	mov	r6, r8
    6d78:	b5c0      	push	{r6, r7, lr}
    6d7a:	0015      	movs	r5, r2
    6d7c:	6803      	ldr	r3, [r0, #0]
    6d7e:	781c      	ldrb	r4, [r3, #0]
    6d80:	3c30      	subs	r4, #48	; 0x30
    6d82:	2c09      	cmp	r4, #9
    6d84:	d80e      	bhi.n	6da4 <chk_mounted+0x34>
    6d86:	785a      	ldrb	r2, [r3, #1]
    6d88:	2a3a      	cmp	r2, #58	; 0x3a
    6d8a:	d001      	beq.n	6d90 <chk_mounted+0x20>
    6d8c:	2400      	movs	r4, #0
    6d8e:	e00a      	b.n	6da6 <chk_mounted+0x36>
    6d90:	3302      	adds	r3, #2
    6d92:	6003      	str	r3, [r0, #0]
    6d94:	200b      	movs	r0, #11
    6d96:	2c07      	cmp	r4, #7
    6d98:	d905      	bls.n	6da6 <chk_mounted+0x36>
    6d9a:	bc1c      	pop	{r2, r3, r4}
    6d9c:	4690      	mov	r8, r2
    6d9e:	4699      	mov	r9, r3
    6da0:	46a2      	mov	sl, r4
    6da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6da4:	2400      	movs	r4, #0
    6da6:	00a3      	lsls	r3, r4, #2
    6da8:	4ac5      	ldr	r2, [pc, #788]	; (70c0 <chk_mounted+0x350>)
    6daa:	589e      	ldr	r6, [r3, r2]
    6dac:	600e      	str	r6, [r1, #0]
    6dae:	2e00      	cmp	r6, #0
    6db0:	d100      	bne.n	6db4 <chk_mounted+0x44>
    6db2:	e0e8      	b.n	6f86 <chk_mounted+0x216>
    6db4:	7833      	ldrb	r3, [r6, #0]
    6db6:	2b00      	cmp	r3, #0
    6db8:	d00d      	beq.n	6dd6 <chk_mounted+0x66>
    6dba:	7870      	ldrb	r0, [r6, #1]
    6dbc:	4bc1      	ldr	r3, [pc, #772]	; (70c4 <chk_mounted+0x354>)
    6dbe:	4798      	blx	r3
    6dc0:	0003      	movs	r3, r0
    6dc2:	07c2      	lsls	r2, r0, #31
    6dc4:	d407      	bmi.n	6dd6 <chk_mounted+0x66>
    6dc6:	2000      	movs	r0, #0
    6dc8:	2d00      	cmp	r5, #0
    6dca:	d0e6      	beq.n	6d9a <chk_mounted+0x2a>
    6dcc:	075b      	lsls	r3, r3, #29
    6dce:	d400      	bmi.n	6dd2 <chk_mounted+0x62>
    6dd0:	e0db      	b.n	6f8a <chk_mounted+0x21a>
    6dd2:	300a      	adds	r0, #10
    6dd4:	e7e1      	b.n	6d9a <chk_mounted+0x2a>
    6dd6:	2300      	movs	r3, #0
    6dd8:	7033      	strb	r3, [r6, #0]
    6dda:	b2e0      	uxtb	r0, r4
    6ddc:	7070      	strb	r0, [r6, #1]
    6dde:	4bba      	ldr	r3, [pc, #744]	; (70c8 <chk_mounted+0x358>)
    6de0:	4798      	blx	r3
    6de2:	0003      	movs	r3, r0
    6de4:	2003      	movs	r0, #3
    6de6:	07da      	lsls	r2, r3, #31
    6de8:	d4d7      	bmi.n	6d9a <chk_mounted+0x2a>
    6dea:	2d00      	cmp	r5, #0
    6dec:	d002      	beq.n	6df4 <chk_mounted+0x84>
    6dee:	3007      	adds	r0, #7
    6df0:	075b      	lsls	r3, r3, #29
    6df2:	d4d2      	bmi.n	6d9a <chk_mounted+0x2a>
    6df4:	2100      	movs	r1, #0
    6df6:	0030      	movs	r0, r6
    6df8:	4bb4      	ldr	r3, [pc, #720]	; (70cc <chk_mounted+0x35c>)
    6dfa:	4798      	blx	r3
    6dfc:	0003      	movs	r3, r0
    6dfe:	2400      	movs	r4, #0
    6e00:	2801      	cmp	r0, #1
    6e02:	d100      	bne.n	6e06 <chk_mounted+0x96>
    6e04:	e09a      	b.n	6f3c <chk_mounted+0x1cc>
    6e06:	2b03      	cmp	r3, #3
    6e08:	d100      	bne.n	6e0c <chk_mounted+0x9c>
    6e0a:	e0c0      	b.n	6f8e <chk_mounted+0x21e>
    6e0c:	200d      	movs	r0, #13
    6e0e:	2b00      	cmp	r3, #0
    6e10:	d1c3      	bne.n	6d9a <chk_mounted+0x2a>
    6e12:	333c      	adds	r3, #60	; 0x3c
    6e14:	5cf2      	ldrb	r2, [r6, r3]
    6e16:	0212      	lsls	r2, r2, #8
    6e18:	3b01      	subs	r3, #1
    6e1a:	5cf3      	ldrb	r3, [r6, r3]
    6e1c:	4313      	orrs	r3, r2
    6e1e:	2280      	movs	r2, #128	; 0x80
    6e20:	0092      	lsls	r2, r2, #2
    6e22:	b21b      	sxth	r3, r3
    6e24:	4293      	cmp	r3, r2
    6e26:	d1b8      	bne.n	6d9a <chk_mounted+0x2a>
    6e28:	2347      	movs	r3, #71	; 0x47
    6e2a:	5cf3      	ldrb	r3, [r6, r3]
    6e2c:	021b      	lsls	r3, r3, #8
    6e2e:	3abb      	subs	r2, #187	; 0xbb
    6e30:	3aff      	subs	r2, #255	; 0xff
    6e32:	5cb5      	ldrb	r5, [r6, r2]
    6e34:	431d      	orrs	r5, r3
    6e36:	d10d      	bne.n	6e54 <chk_mounted+0xe4>
    6e38:	2357      	movs	r3, #87	; 0x57
    6e3a:	5cf5      	ldrb	r5, [r6, r3]
    6e3c:	062d      	lsls	r5, r5, #24
    6e3e:	3b01      	subs	r3, #1
    6e40:	5cf3      	ldrb	r3, [r6, r3]
    6e42:	041b      	lsls	r3, r3, #16
    6e44:	431d      	orrs	r5, r3
    6e46:	2354      	movs	r3, #84	; 0x54
    6e48:	5cf3      	ldrb	r3, [r6, r3]
    6e4a:	431d      	orrs	r5, r3
    6e4c:	2355      	movs	r3, #85	; 0x55
    6e4e:	5cf3      	ldrb	r3, [r6, r3]
    6e50:	021b      	lsls	r3, r3, #8
    6e52:	431d      	orrs	r5, r3
    6e54:	61f5      	str	r5, [r6, #28]
    6e56:	2340      	movs	r3, #64	; 0x40
    6e58:	5cf2      	ldrb	r2, [r6, r3]
    6e5a:	70f2      	strb	r2, [r6, #3]
    6e5c:	1e53      	subs	r3, r2, #1
    6e5e:	200d      	movs	r0, #13
    6e60:	2b01      	cmp	r3, #1
    6e62:	d89a      	bhi.n	6d9a <chk_mounted+0x2a>
    6e64:	233d      	movs	r3, #61	; 0x3d
    6e66:	5cf1      	ldrb	r1, [r6, r3]
    6e68:	70b1      	strb	r1, [r6, #2]
    6e6a:	2900      	cmp	r1, #0
    6e6c:	d095      	beq.n	6d9a <chk_mounted+0x2a>
    6e6e:	1e4b      	subs	r3, r1, #1
    6e70:	4219      	tst	r1, r3
    6e72:	d192      	bne.n	6d9a <chk_mounted+0x2a>
    6e74:	2342      	movs	r3, #66	; 0x42
    6e76:	5cf3      	ldrb	r3, [r6, r3]
    6e78:	021b      	lsls	r3, r3, #8
    6e7a:	3034      	adds	r0, #52	; 0x34
    6e7c:	5c30      	ldrb	r0, [r6, r0]
    6e7e:	4318      	orrs	r0, r3
    6e80:	4680      	mov	r8, r0
    6e82:	8130      	strh	r0, [r6, #8]
    6e84:	200d      	movs	r0, #13
    6e86:	4643      	mov	r3, r8
    6e88:	071b      	lsls	r3, r3, #28
    6e8a:	d000      	beq.n	6e8e <chk_mounted+0x11e>
    6e8c:	e785      	b.n	6d9a <chk_mounted+0x2a>
    6e8e:	2344      	movs	r3, #68	; 0x44
    6e90:	5cf3      	ldrb	r3, [r6, r3]
    6e92:	021b      	lsls	r3, r3, #8
    6e94:	3036      	adds	r0, #54	; 0x36
    6e96:	5c30      	ldrb	r0, [r6, r0]
    6e98:	4303      	orrs	r3, r0
    6e9a:	d10d      	bne.n	6eb8 <chk_mounted+0x148>
    6e9c:	3353      	adds	r3, #83	; 0x53
    6e9e:	5cf3      	ldrb	r3, [r6, r3]
    6ea0:	061b      	lsls	r3, r3, #24
    6ea2:	2052      	movs	r0, #82	; 0x52
    6ea4:	5c30      	ldrb	r0, [r6, r0]
    6ea6:	0400      	lsls	r0, r0, #16
    6ea8:	4303      	orrs	r3, r0
    6eaa:	2050      	movs	r0, #80	; 0x50
    6eac:	5c30      	ldrb	r0, [r6, r0]
    6eae:	4303      	orrs	r3, r0
    6eb0:	2051      	movs	r0, #81	; 0x51
    6eb2:	5c30      	ldrb	r0, [r6, r0]
    6eb4:	0200      	lsls	r0, r0, #8
    6eb6:	4303      	orrs	r3, r0
    6eb8:	203f      	movs	r0, #63	; 0x3f
    6eba:	5c30      	ldrb	r0, [r6, r0]
    6ebc:	0200      	lsls	r0, r0, #8
    6ebe:	273e      	movs	r7, #62	; 0x3e
    6ec0:	5df7      	ldrb	r7, [r6, r7]
    6ec2:	4307      	orrs	r7, r0
    6ec4:	46ba      	mov	sl, r7
    6ec6:	200d      	movs	r0, #13
    6ec8:	2f00      	cmp	r7, #0
    6eca:	d100      	bne.n	6ece <chk_mounted+0x15e>
    6ecc:	e765      	b.n	6d9a <chk_mounted+0x2a>
    6ece:	436a      	muls	r2, r5
    6ed0:	4691      	mov	r9, r2
    6ed2:	4642      	mov	r2, r8
    6ed4:	0917      	lsrs	r7, r2, #4
    6ed6:	4457      	add	r7, sl
    6ed8:	444f      	add	r7, r9
    6eda:	42bb      	cmp	r3, r7
    6edc:	d200      	bcs.n	6ee0 <chk_mounted+0x170>
    6ede:	e75c      	b.n	6d9a <chk_mounted+0x2a>
    6ee0:	1bd8      	subs	r0, r3, r7
    6ee2:	4b7b      	ldr	r3, [pc, #492]	; (70d0 <chk_mounted+0x360>)
    6ee4:	4798      	blx	r3
    6ee6:	0003      	movs	r3, r0
    6ee8:	200d      	movs	r0, #13
    6eea:	2b00      	cmp	r3, #0
    6eec:	d100      	bne.n	6ef0 <chk_mounted+0x180>
    6eee:	e754      	b.n	6d9a <chk_mounted+0x2a>
    6ef0:	4a78      	ldr	r2, [pc, #480]	; (70d4 <chk_mounted+0x364>)
    6ef2:	429a      	cmp	r2, r3
    6ef4:	4192      	sbcs	r2, r2
    6ef6:	4252      	negs	r2, r2
    6ef8:	3201      	adds	r2, #1
    6efa:	4977      	ldr	r1, [pc, #476]	; (70d8 <chk_mounted+0x368>)
    6efc:	428b      	cmp	r3, r1
    6efe:	d848      	bhi.n	6f92 <chk_mounted+0x222>
    6f00:	3302      	adds	r3, #2
    6f02:	61b3      	str	r3, [r6, #24]
    6f04:	19e7      	adds	r7, r4, r7
    6f06:	62b7      	str	r7, [r6, #40]	; 0x28
    6f08:	4454      	add	r4, sl
    6f0a:	6234      	str	r4, [r6, #32]
    6f0c:	200d      	movs	r0, #13
    6f0e:	4641      	mov	r1, r8
    6f10:	2900      	cmp	r1, #0
    6f12:	d100      	bne.n	6f16 <chk_mounted+0x1a6>
    6f14:	e741      	b.n	6d9a <chk_mounted+0x2a>
    6f16:	444c      	add	r4, r9
    6f18:	6274      	str	r4, [r6, #36]	; 0x24
    6f1a:	2a02      	cmp	r2, #2
    6f1c:	d12c      	bne.n	6f78 <chk_mounted+0x208>
    6f1e:	005b      	lsls	r3, r3, #1
    6f20:	496e      	ldr	r1, [pc, #440]	; (70dc <chk_mounted+0x36c>)
    6f22:	468c      	mov	ip, r1
    6f24:	4463      	add	r3, ip
    6f26:	0a5b      	lsrs	r3, r3, #9
    6f28:	200d      	movs	r0, #13
    6f2a:	429d      	cmp	r5, r3
    6f2c:	d200      	bcs.n	6f30 <chk_mounted+0x1c0>
    6f2e:	e734      	b.n	6d9a <chk_mounted+0x2a>
    6f30:	2301      	movs	r3, #1
    6f32:	425b      	negs	r3, r3
    6f34:	6133      	str	r3, [r6, #16]
    6f36:	2300      	movs	r3, #0
    6f38:	60f3      	str	r3, [r6, #12]
    6f3a:	e0b6      	b.n	70aa <chk_mounted+0x33a>
    6f3c:	33f2      	adds	r3, #242	; 0xf2
    6f3e:	33ff      	adds	r3, #255	; 0xff
    6f40:	5cf3      	ldrb	r3, [r6, r3]
    6f42:	200d      	movs	r0, #13
    6f44:	2b00      	cmp	r3, #0
    6f46:	d100      	bne.n	6f4a <chk_mounted+0x1da>
    6f48:	e727      	b.n	6d9a <chk_mounted+0x2a>
    6f4a:	23fa      	movs	r3, #250	; 0xfa
    6f4c:	33ff      	adds	r3, #255	; 0xff
    6f4e:	5cf4      	ldrb	r4, [r6, r3]
    6f50:	0624      	lsls	r4, r4, #24
    6f52:	3b01      	subs	r3, #1
    6f54:	5cf3      	ldrb	r3, [r6, r3]
    6f56:	041b      	lsls	r3, r3, #16
    6f58:	431c      	orrs	r4, r3
    6f5a:	23fb      	movs	r3, #251	; 0xfb
    6f5c:	005b      	lsls	r3, r3, #1
    6f5e:	5cf3      	ldrb	r3, [r6, r3]
    6f60:	431c      	orrs	r4, r3
    6f62:	23f8      	movs	r3, #248	; 0xf8
    6f64:	33ff      	adds	r3, #255	; 0xff
    6f66:	5cf2      	ldrb	r2, [r6, r3]
    6f68:	0212      	lsls	r2, r2, #8
    6f6a:	4314      	orrs	r4, r2
    6f6c:	0021      	movs	r1, r4
    6f6e:	0030      	movs	r0, r6
    6f70:	4b56      	ldr	r3, [pc, #344]	; (70cc <chk_mounted+0x35c>)
    6f72:	4798      	blx	r3
    6f74:	0003      	movs	r3, r0
    6f76:	e746      	b.n	6e06 <chk_mounted+0x96>
    6f78:	2103      	movs	r1, #3
    6f7a:	4359      	muls	r1, r3
    6f7c:	0849      	lsrs	r1, r1, #1
    6f7e:	2001      	movs	r0, #1
    6f80:	4003      	ands	r3, r0
    6f82:	18cb      	adds	r3, r1, r3
    6f84:	e7cc      	b.n	6f20 <chk_mounted+0x1b0>
    6f86:	200c      	movs	r0, #12
    6f88:	e707      	b.n	6d9a <chk_mounted+0x2a>
    6f8a:	2000      	movs	r0, #0
    6f8c:	e705      	b.n	6d9a <chk_mounted+0x2a>
    6f8e:	2001      	movs	r0, #1
    6f90:	e703      	b.n	6d9a <chk_mounted+0x2a>
    6f92:	3302      	adds	r3, #2
    6f94:	61b3      	str	r3, [r6, #24]
    6f96:	19e7      	adds	r7, r4, r7
    6f98:	62b7      	str	r7, [r6, #40]	; 0x28
    6f9a:	4652      	mov	r2, sl
    6f9c:	18a2      	adds	r2, r4, r2
    6f9e:	6232      	str	r2, [r6, #32]
    6fa0:	200d      	movs	r0, #13
    6fa2:	4642      	mov	r2, r8
    6fa4:	2a00      	cmp	r2, #0
    6fa6:	d000      	beq.n	6faa <chk_mounted+0x23a>
    6fa8:	e6f7      	b.n	6d9a <chk_mounted+0x2a>
    6faa:	225f      	movs	r2, #95	; 0x5f
    6fac:	5cb2      	ldrb	r2, [r6, r2]
    6fae:	0612      	lsls	r2, r2, #24
    6fb0:	215e      	movs	r1, #94	; 0x5e
    6fb2:	5c71      	ldrb	r1, [r6, r1]
    6fb4:	0409      	lsls	r1, r1, #16
    6fb6:	430a      	orrs	r2, r1
    6fb8:	215c      	movs	r1, #92	; 0x5c
    6fba:	5c71      	ldrb	r1, [r6, r1]
    6fbc:	430a      	orrs	r2, r1
    6fbe:	215d      	movs	r1, #93	; 0x5d
    6fc0:	5c71      	ldrb	r1, [r6, r1]
    6fc2:	0209      	lsls	r1, r1, #8
    6fc4:	430a      	orrs	r2, r1
    6fc6:	6272      	str	r2, [r6, #36]	; 0x24
    6fc8:	009b      	lsls	r3, r3, #2
    6fca:	4a44      	ldr	r2, [pc, #272]	; (70dc <chk_mounted+0x36c>)
    6fcc:	4694      	mov	ip, r2
    6fce:	4463      	add	r3, ip
    6fd0:	0a5b      	lsrs	r3, r3, #9
    6fd2:	200d      	movs	r0, #13
    6fd4:	429d      	cmp	r5, r3
    6fd6:	d200      	bcs.n	6fda <chk_mounted+0x26a>
    6fd8:	e6df      	b.n	6d9a <chk_mounted+0x2a>
    6fda:	2301      	movs	r3, #1
    6fdc:	425b      	negs	r3, r3
    6fde:	6133      	str	r3, [r6, #16]
    6fe0:	2300      	movs	r3, #0
    6fe2:	60f3      	str	r3, [r6, #12]
    6fe4:	7173      	strb	r3, [r6, #5]
    6fe6:	3361      	adds	r3, #97	; 0x61
    6fe8:	5cf3      	ldrb	r3, [r6, r3]
    6fea:	021b      	lsls	r3, r3, #8
    6fec:	2260      	movs	r2, #96	; 0x60
    6fee:	5cb2      	ldrb	r2, [r6, r2]
    6ff0:	431a      	orrs	r2, r3
    6ff2:	1912      	adds	r2, r2, r4
    6ff4:	6172      	str	r2, [r6, #20]
    6ff6:	0031      	movs	r1, r6
    6ff8:	3130      	adds	r1, #48	; 0x30
    6ffa:	7870      	ldrb	r0, [r6, #1]
    6ffc:	2301      	movs	r3, #1
    6ffe:	4c38      	ldr	r4, [pc, #224]	; (70e0 <chk_mounted+0x370>)
    7000:	47a0      	blx	r4
    7002:	2203      	movs	r2, #3
    7004:	2800      	cmp	r0, #0
    7006:	d150      	bne.n	70aa <chk_mounted+0x33a>
    7008:	4b36      	ldr	r3, [pc, #216]	; (70e4 <chk_mounted+0x374>)
    700a:	5cf2      	ldrb	r2, [r6, r3]
    700c:	0212      	lsls	r2, r2, #8
    700e:	4b36      	ldr	r3, [pc, #216]	; (70e8 <chk_mounted+0x378>)
    7010:	5cf3      	ldrb	r3, [r6, r3]
    7012:	4313      	orrs	r3, r2
    7014:	4935      	ldr	r1, [pc, #212]	; (70ec <chk_mounted+0x37c>)
    7016:	b21b      	sxth	r3, r3
    7018:	2203      	movs	r2, #3
    701a:	428b      	cmp	r3, r1
    701c:	d145      	bne.n	70aa <chk_mounted+0x33a>
    701e:	2333      	movs	r3, #51	; 0x33
    7020:	5cf3      	ldrb	r3, [r6, r3]
    7022:	061b      	lsls	r3, r3, #24
    7024:	322f      	adds	r2, #47	; 0x2f
    7026:	5cb2      	ldrb	r2, [r6, r2]
    7028:	0412      	lsls	r2, r2, #16
    702a:	4313      	orrs	r3, r2
    702c:	2230      	movs	r2, #48	; 0x30
    702e:	5cb2      	ldrb	r2, [r6, r2]
    7030:	4313      	orrs	r3, r2
    7032:	2231      	movs	r2, #49	; 0x31
    7034:	5cb2      	ldrb	r2, [r6, r2]
    7036:	0212      	lsls	r2, r2, #8
    7038:	4313      	orrs	r3, r2
    703a:	492d      	ldr	r1, [pc, #180]	; (70f0 <chk_mounted+0x380>)
    703c:	2203      	movs	r2, #3
    703e:	428b      	cmp	r3, r1
    7040:	d133      	bne.n	70aa <chk_mounted+0x33a>
    7042:	4b2c      	ldr	r3, [pc, #176]	; (70f4 <chk_mounted+0x384>)
    7044:	5cf3      	ldrb	r3, [r6, r3]
    7046:	061b      	lsls	r3, r3, #24
    7048:	4a2b      	ldr	r2, [pc, #172]	; (70f8 <chk_mounted+0x388>)
    704a:	5cb2      	ldrb	r2, [r6, r2]
    704c:	0412      	lsls	r2, r2, #16
    704e:	4313      	orrs	r3, r2
    7050:	2285      	movs	r2, #133	; 0x85
    7052:	0092      	lsls	r2, r2, #2
    7054:	5cb2      	ldrb	r2, [r6, r2]
    7056:	4313      	orrs	r3, r2
    7058:	4a28      	ldr	r2, [pc, #160]	; (70fc <chk_mounted+0x38c>)
    705a:	5cb2      	ldrb	r2, [r6, r2]
    705c:	0212      	lsls	r2, r2, #8
    705e:	4313      	orrs	r3, r2
    7060:	4927      	ldr	r1, [pc, #156]	; (7100 <chk_mounted+0x390>)
    7062:	2203      	movs	r2, #3
    7064:	428b      	cmp	r3, r1
    7066:	d120      	bne.n	70aa <chk_mounted+0x33a>
    7068:	4b26      	ldr	r3, [pc, #152]	; (7104 <chk_mounted+0x394>)
    706a:	5cf3      	ldrb	r3, [r6, r3]
    706c:	061b      	lsls	r3, r3, #24
    706e:	4a26      	ldr	r2, [pc, #152]	; (7108 <chk_mounted+0x398>)
    7070:	5cb2      	ldrb	r2, [r6, r2]
    7072:	0412      	lsls	r2, r2, #16
    7074:	4313      	orrs	r3, r2
    7076:	2287      	movs	r2, #135	; 0x87
    7078:	0092      	lsls	r2, r2, #2
    707a:	5cb2      	ldrb	r2, [r6, r2]
    707c:	4313      	orrs	r3, r2
    707e:	4a23      	ldr	r2, [pc, #140]	; (710c <chk_mounted+0x39c>)
    7080:	5cb2      	ldrb	r2, [r6, r2]
    7082:	0212      	lsls	r2, r2, #8
    7084:	4313      	orrs	r3, r2
    7086:	60f3      	str	r3, [r6, #12]
    7088:	4b21      	ldr	r3, [pc, #132]	; (7110 <chk_mounted+0x3a0>)
    708a:	5cf3      	ldrb	r3, [r6, r3]
    708c:	061b      	lsls	r3, r3, #24
    708e:	4a21      	ldr	r2, [pc, #132]	; (7114 <chk_mounted+0x3a4>)
    7090:	5cb2      	ldrb	r2, [r6, r2]
    7092:	0412      	lsls	r2, r2, #16
    7094:	4313      	orrs	r3, r2
    7096:	2286      	movs	r2, #134	; 0x86
    7098:	0092      	lsls	r2, r2, #2
    709a:	5cb2      	ldrb	r2, [r6, r2]
    709c:	4313      	orrs	r3, r2
    709e:	4a1e      	ldr	r2, [pc, #120]	; (7118 <chk_mounted+0x3a8>)
    70a0:	5cb2      	ldrb	r2, [r6, r2]
    70a2:	0212      	lsls	r2, r2, #8
    70a4:	4313      	orrs	r3, r2
    70a6:	6133      	str	r3, [r6, #16]
    70a8:	2203      	movs	r2, #3
    70aa:	7032      	strb	r2, [r6, #0]
    70ac:	4a1b      	ldr	r2, [pc, #108]	; (711c <chk_mounted+0x3ac>)
    70ae:	8813      	ldrh	r3, [r2, #0]
    70b0:	3301      	adds	r3, #1
    70b2:	b29b      	uxth	r3, r3
    70b4:	8013      	strh	r3, [r2, #0]
    70b6:	80f3      	strh	r3, [r6, #6]
    70b8:	2000      	movs	r0, #0
    70ba:	62f0      	str	r0, [r6, #44]	; 0x2c
    70bc:	7130      	strb	r0, [r6, #4]
    70be:	e66c      	b.n	6d9a <chk_mounted+0x2a>
    70c0:	20000418 	.word	0x20000418
    70c4:	00006a61 	.word	0x00006a61
    70c8:	000069c5 	.word	0x000069c5
    70cc:	00006ccd 	.word	0x00006ccd
    70d0:	0000b8fd 	.word	0x0000b8fd
    70d4:	00000ff5 	.word	0x00000ff5
    70d8:	0000fff5 	.word	0x0000fff5
    70dc:	000001ff 	.word	0x000001ff
    70e0:	00006a7d 	.word	0x00006a7d
    70e4:	0000022f 	.word	0x0000022f
    70e8:	0000022e 	.word	0x0000022e
    70ec:	ffffaa55 	.word	0xffffaa55
    70f0:	41615252 	.word	0x41615252
    70f4:	00000217 	.word	0x00000217
    70f8:	00000216 	.word	0x00000216
    70fc:	00000215 	.word	0x00000215
    7100:	61417272 	.word	0x61417272
    7104:	0000021f 	.word	0x0000021f
    7108:	0000021e 	.word	0x0000021e
    710c:	0000021d 	.word	0x0000021d
    7110:	0000021b 	.word	0x0000021b
    7114:	0000021a 	.word	0x0000021a
    7118:	00000219 	.word	0x00000219
    711c:	20000438 	.word	0x20000438

00007120 <move_window>:
    7120:	b5f0      	push	{r4, r5, r6, r7, lr}
    7122:	46ce      	mov	lr, r9
    7124:	b500      	push	{lr}
    7126:	b082      	sub	sp, #8
    7128:	0004      	movs	r4, r0
    712a:	000f      	movs	r7, r1
    712c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    712e:	428d      	cmp	r5, r1
    7130:	d03f      	beq.n	71b2 <move_window+0x92>
    7132:	7903      	ldrb	r3, [r0, #4]
    7134:	2b00      	cmp	r3, #0
    7136:	d107      	bne.n	7148 <move_window+0x28>
    7138:	2300      	movs	r3, #0
    713a:	2f00      	cmp	r7, #0
    713c:	d12c      	bne.n	7198 <move_window+0x78>
    713e:	0018      	movs	r0, r3
    7140:	b002      	add	sp, #8
    7142:	bc04      	pop	{r2}
    7144:	4691      	mov	r9, r2
    7146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7148:	2330      	movs	r3, #48	; 0x30
    714a:	469c      	mov	ip, r3
    714c:	4484      	add	ip, r0
    714e:	4663      	mov	r3, ip
    7150:	4661      	mov	r1, ip
    7152:	9301      	str	r3, [sp, #4]
    7154:	7840      	ldrb	r0, [r0, #1]
    7156:	2301      	movs	r3, #1
    7158:	002a      	movs	r2, r5
    715a:	4e17      	ldr	r6, [pc, #92]	; (71b8 <move_window+0x98>)
    715c:	47b0      	blx	r6
    715e:	2301      	movs	r3, #1
    7160:	2800      	cmp	r0, #0
    7162:	d1ec      	bne.n	713e <move_window+0x1e>
    7164:	2300      	movs	r3, #0
    7166:	7123      	strb	r3, [r4, #4]
    7168:	6a23      	ldr	r3, [r4, #32]
    716a:	69e2      	ldr	r2, [r4, #28]
    716c:	4694      	mov	ip, r2
    716e:	4463      	add	r3, ip
    7170:	429d      	cmp	r5, r3
    7172:	d2e1      	bcs.n	7138 <move_window+0x18>
    7174:	78e6      	ldrb	r6, [r4, #3]
    7176:	2e01      	cmp	r6, #1
    7178:	d9de      	bls.n	7138 <move_window+0x18>
    717a:	4b0f      	ldr	r3, [pc, #60]	; (71b8 <move_window+0x98>)
    717c:	4699      	mov	r9, r3
    717e:	69e3      	ldr	r3, [r4, #28]
    7180:	469c      	mov	ip, r3
    7182:	4465      	add	r5, ip
    7184:	7860      	ldrb	r0, [r4, #1]
    7186:	2301      	movs	r3, #1
    7188:	002a      	movs	r2, r5
    718a:	9901      	ldr	r1, [sp, #4]
    718c:	47c8      	blx	r9
    718e:	3e01      	subs	r6, #1
    7190:	b2f6      	uxtb	r6, r6
    7192:	2e01      	cmp	r6, #1
    7194:	d1f3      	bne.n	717e <move_window+0x5e>
    7196:	e7cf      	b.n	7138 <move_window+0x18>
    7198:	0021      	movs	r1, r4
    719a:	3130      	adds	r1, #48	; 0x30
    719c:	7860      	ldrb	r0, [r4, #1]
    719e:	3301      	adds	r3, #1
    71a0:	003a      	movs	r2, r7
    71a2:	4d06      	ldr	r5, [pc, #24]	; (71bc <move_window+0x9c>)
    71a4:	47a8      	blx	r5
    71a6:	2301      	movs	r3, #1
    71a8:	2800      	cmp	r0, #0
    71aa:	d1c8      	bne.n	713e <move_window+0x1e>
    71ac:	62e7      	str	r7, [r4, #44]	; 0x2c
    71ae:	2300      	movs	r3, #0
    71b0:	e7c5      	b.n	713e <move_window+0x1e>
    71b2:	2300      	movs	r3, #0
    71b4:	e7c3      	b.n	713e <move_window+0x1e>
    71b6:	46c0      	nop			; (mov r8, r8)
    71b8:	00006b01 	.word	0x00006b01
    71bc:	00006a7d 	.word	0x00006a7d

000071c0 <get_fat>:
    71c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71c2:	0005      	movs	r5, r0
    71c4:	000c      	movs	r4, r1
    71c6:	2901      	cmp	r1, #1
    71c8:	d974      	bls.n	72b4 <get_fat+0xf4>
    71ca:	2001      	movs	r0, #1
    71cc:	69ab      	ldr	r3, [r5, #24]
    71ce:	4299      	cmp	r1, r3
    71d0:	d271      	bcs.n	72b6 <get_fat+0xf6>
    71d2:	782b      	ldrb	r3, [r5, #0]
    71d4:	2b02      	cmp	r3, #2
    71d6:	d034      	beq.n	7242 <get_fat+0x82>
    71d8:	2b03      	cmp	r3, #3
    71da:	d049      	beq.n	7270 <get_fat+0xb0>
    71dc:	2b01      	cmp	r3, #1
    71de:	d002      	beq.n	71e6 <get_fat+0x26>
    71e0:	2001      	movs	r0, #1
    71e2:	4240      	negs	r0, r0
    71e4:	e067      	b.n	72b6 <get_fat+0xf6>
    71e6:	084e      	lsrs	r6, r1, #1
    71e8:	1876      	adds	r6, r6, r1
    71ea:	0a71      	lsrs	r1, r6, #9
    71ec:	6a2b      	ldr	r3, [r5, #32]
    71ee:	469c      	mov	ip, r3
    71f0:	4461      	add	r1, ip
    71f2:	0028      	movs	r0, r5
    71f4:	4b30      	ldr	r3, [pc, #192]	; (72b8 <get_fat+0xf8>)
    71f6:	4798      	blx	r3
    71f8:	2800      	cmp	r0, #0
    71fa:	d002      	beq.n	7202 <get_fat+0x42>
    71fc:	2001      	movs	r0, #1
    71fe:	4240      	negs	r0, r0
    7200:	e059      	b.n	72b6 <get_fat+0xf6>
    7202:	05f3      	lsls	r3, r6, #23
    7204:	0ddb      	lsrs	r3, r3, #23
    7206:	18eb      	adds	r3, r5, r3
    7208:	3330      	adds	r3, #48	; 0x30
    720a:	781f      	ldrb	r7, [r3, #0]
    720c:	3601      	adds	r6, #1
    720e:	0a71      	lsrs	r1, r6, #9
    7210:	6a2b      	ldr	r3, [r5, #32]
    7212:	469c      	mov	ip, r3
    7214:	4461      	add	r1, ip
    7216:	0028      	movs	r0, r5
    7218:	4b27      	ldr	r3, [pc, #156]	; (72b8 <get_fat+0xf8>)
    721a:	4798      	blx	r3
    721c:	2800      	cmp	r0, #0
    721e:	d002      	beq.n	7226 <get_fat+0x66>
    7220:	2001      	movs	r0, #1
    7222:	4240      	negs	r0, r0
    7224:	e047      	b.n	72b6 <get_fat+0xf6>
    7226:	05f6      	lsls	r6, r6, #23
    7228:	0df6      	lsrs	r6, r6, #23
    722a:	19ad      	adds	r5, r5, r6
    722c:	3530      	adds	r5, #48	; 0x30
    722e:	7828      	ldrb	r0, [r5, #0]
    7230:	0200      	lsls	r0, r0, #8
    7232:	4338      	orrs	r0, r7
    7234:	07e3      	lsls	r3, r4, #31
    7236:	d501      	bpl.n	723c <get_fat+0x7c>
    7238:	0900      	lsrs	r0, r0, #4
    723a:	e03c      	b.n	72b6 <get_fat+0xf6>
    723c:	0500      	lsls	r0, r0, #20
    723e:	0d00      	lsrs	r0, r0, #20
    7240:	e039      	b.n	72b6 <get_fat+0xf6>
    7242:	0a09      	lsrs	r1, r1, #8
    7244:	6a2b      	ldr	r3, [r5, #32]
    7246:	469c      	mov	ip, r3
    7248:	4461      	add	r1, ip
    724a:	0028      	movs	r0, r5
    724c:	4b1a      	ldr	r3, [pc, #104]	; (72b8 <get_fat+0xf8>)
    724e:	4798      	blx	r3
    7250:	2800      	cmp	r0, #0
    7252:	d002      	beq.n	725a <get_fat+0x9a>
    7254:	2001      	movs	r0, #1
    7256:	4240      	negs	r0, r0
    7258:	e02d      	b.n	72b6 <get_fat+0xf6>
    725a:	0064      	lsls	r4, r4, #1
    725c:	23ff      	movs	r3, #255	; 0xff
    725e:	005b      	lsls	r3, r3, #1
    7260:	401c      	ands	r4, r3
    7262:	192d      	adds	r5, r5, r4
    7264:	3530      	adds	r5, #48	; 0x30
    7266:	786b      	ldrb	r3, [r5, #1]
    7268:	021b      	lsls	r3, r3, #8
    726a:	7828      	ldrb	r0, [r5, #0]
    726c:	4318      	orrs	r0, r3
    726e:	e022      	b.n	72b6 <get_fat+0xf6>
    7270:	09c9      	lsrs	r1, r1, #7
    7272:	6a2b      	ldr	r3, [r5, #32]
    7274:	469c      	mov	ip, r3
    7276:	4461      	add	r1, ip
    7278:	0028      	movs	r0, r5
    727a:	4b0f      	ldr	r3, [pc, #60]	; (72b8 <get_fat+0xf8>)
    727c:	4798      	blx	r3
    727e:	2800      	cmp	r0, #0
    7280:	d002      	beq.n	7288 <get_fat+0xc8>
    7282:	2001      	movs	r0, #1
    7284:	4240      	negs	r0, r0
    7286:	e016      	b.n	72b6 <get_fat+0xf6>
    7288:	00a4      	lsls	r4, r4, #2
    728a:	23fe      	movs	r3, #254	; 0xfe
    728c:	005b      	lsls	r3, r3, #1
    728e:	401c      	ands	r4, r3
    7290:	0023      	movs	r3, r4
    7292:	3330      	adds	r3, #48	; 0x30
    7294:	18eb      	adds	r3, r5, r3
    7296:	78d8      	ldrb	r0, [r3, #3]
    7298:	0600      	lsls	r0, r0, #24
    729a:	789a      	ldrb	r2, [r3, #2]
    729c:	0412      	lsls	r2, r2, #16
    729e:	4310      	orrs	r0, r2
    72a0:	192c      	adds	r4, r5, r4
    72a2:	3430      	adds	r4, #48	; 0x30
    72a4:	7822      	ldrb	r2, [r4, #0]
    72a6:	4310      	orrs	r0, r2
    72a8:	785b      	ldrb	r3, [r3, #1]
    72aa:	021b      	lsls	r3, r3, #8
    72ac:	4318      	orrs	r0, r3
    72ae:	0100      	lsls	r0, r0, #4
    72b0:	0900      	lsrs	r0, r0, #4
    72b2:	e000      	b.n	72b6 <get_fat+0xf6>
    72b4:	2001      	movs	r0, #1
    72b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72b8:	00007121 	.word	0x00007121

000072bc <dir_sdi>:
    72bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72be:	0004      	movs	r4, r0
    72c0:	000d      	movs	r5, r1
    72c2:	80e1      	strh	r1, [r4, #6]
    72c4:	6881      	ldr	r1, [r0, #8]
    72c6:	2002      	movs	r0, #2
    72c8:	2901      	cmp	r1, #1
    72ca:	d003      	beq.n	72d4 <dir_sdi+0x18>
    72cc:	6823      	ldr	r3, [r4, #0]
    72ce:	699a      	ldr	r2, [r3, #24]
    72d0:	4291      	cmp	r1, r2
    72d2:	d300      	bcc.n	72d6 <dir_sdi+0x1a>
    72d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72d6:	2900      	cmp	r1, #0
    72d8:	d119      	bne.n	730e <dir_sdi+0x52>
    72da:	781a      	ldrb	r2, [r3, #0]
    72dc:	2a03      	cmp	r2, #3
    72de:	d013      	beq.n	7308 <dir_sdi+0x4c>
    72e0:	2200      	movs	r2, #0
    72e2:	60e2      	str	r2, [r4, #12]
    72e4:	891a      	ldrh	r2, [r3, #8]
    72e6:	2002      	movs	r0, #2
    72e8:	42aa      	cmp	r2, r5
    72ea:	d9f3      	bls.n	72d4 <dir_sdi+0x18>
    72ec:	092a      	lsrs	r2, r5, #4
    72ee:	b292      	uxth	r2, r2
    72f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    72f2:	189b      	adds	r3, r3, r2
    72f4:	6123      	str	r3, [r4, #16]
    72f6:	6823      	ldr	r3, [r4, #0]
    72f8:	3330      	adds	r3, #48	; 0x30
    72fa:	220f      	movs	r2, #15
    72fc:	4015      	ands	r5, r2
    72fe:	016d      	lsls	r5, r5, #5
    7300:	195d      	adds	r5, r3, r5
    7302:	6165      	str	r5, [r4, #20]
    7304:	2000      	movs	r0, #0
    7306:	e7e5      	b.n	72d4 <dir_sdi+0x18>
    7308:	6a59      	ldr	r1, [r3, #36]	; 0x24
    730a:	2900      	cmp	r1, #0
    730c:	d0e8      	beq.n	72e0 <dir_sdi+0x24>
    730e:	789e      	ldrb	r6, [r3, #2]
    7310:	0136      	lsls	r6, r6, #4
    7312:	42b5      	cmp	r5, r6
    7314:	d313      	bcc.n	733e <dir_sdi+0x82>
    7316:	1bad      	subs	r5, r5, r6
    7318:	b2ad      	uxth	r5, r5
    731a:	4f10      	ldr	r7, [pc, #64]	; (735c <dir_sdi+0xa0>)
    731c:	e000      	b.n	7320 <dir_sdi+0x64>
    731e:	001d      	movs	r5, r3
    7320:	6820      	ldr	r0, [r4, #0]
    7322:	47b8      	blx	r7
    7324:	0001      	movs	r1, r0
    7326:	1c43      	adds	r3, r0, #1
    7328:	d012      	beq.n	7350 <dir_sdi+0x94>
    732a:	2801      	cmp	r0, #1
    732c:	d912      	bls.n	7354 <dir_sdi+0x98>
    732e:	6823      	ldr	r3, [r4, #0]
    7330:	699b      	ldr	r3, [r3, #24]
    7332:	4298      	cmp	r0, r3
    7334:	d210      	bcs.n	7358 <dir_sdi+0x9c>
    7336:	1bab      	subs	r3, r5, r6
    7338:	b29b      	uxth	r3, r3
    733a:	42b5      	cmp	r5, r6
    733c:	d2ef      	bcs.n	731e <dir_sdi+0x62>
    733e:	60e1      	str	r1, [r4, #12]
    7340:	6820      	ldr	r0, [r4, #0]
    7342:	4b07      	ldr	r3, [pc, #28]	; (7360 <dir_sdi+0xa4>)
    7344:	4798      	blx	r3
    7346:	092b      	lsrs	r3, r5, #4
    7348:	b29b      	uxth	r3, r3
    734a:	1818      	adds	r0, r3, r0
    734c:	6120      	str	r0, [r4, #16]
    734e:	e7d2      	b.n	72f6 <dir_sdi+0x3a>
    7350:	2001      	movs	r0, #1
    7352:	e7bf      	b.n	72d4 <dir_sdi+0x18>
    7354:	2002      	movs	r0, #2
    7356:	e7bd      	b.n	72d4 <dir_sdi+0x18>
    7358:	2002      	movs	r0, #2
    735a:	e7bb      	b.n	72d4 <dir_sdi+0x18>
    735c:	000071c1 	.word	0x000071c1
    7360:	00006c67 	.word	0x00006c67

00007364 <put_fat>:
    7364:	b5f0      	push	{r4, r5, r6, r7, lr}
    7366:	46c6      	mov	lr, r8
    7368:	b500      	push	{lr}
    736a:	0007      	movs	r7, r0
    736c:	000c      	movs	r4, r1
    736e:	0016      	movs	r6, r2
    7370:	2502      	movs	r5, #2
    7372:	2901      	cmp	r1, #1
    7374:	d902      	bls.n	737c <put_fat+0x18>
    7376:	6983      	ldr	r3, [r0, #24]
    7378:	4299      	cmp	r1, r3
    737a:	d303      	bcc.n	7384 <put_fat+0x20>
    737c:	0028      	movs	r0, r5
    737e:	bc04      	pop	{r2}
    7380:	4690      	mov	r8, r2
    7382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7384:	7803      	ldrb	r3, [r0, #0]
    7386:	2b02      	cmp	r3, #2
    7388:	d053      	beq.n	7432 <put_fat+0xce>
    738a:	2b03      	cmp	r3, #3
    738c:	d063      	beq.n	7456 <put_fat+0xf2>
    738e:	2502      	movs	r5, #2
    7390:	2b01      	cmp	r3, #1
    7392:	d002      	beq.n	739a <put_fat+0x36>
    7394:	2301      	movs	r3, #1
    7396:	713b      	strb	r3, [r7, #4]
    7398:	e7f0      	b.n	737c <put_fat+0x18>
    739a:	084b      	lsrs	r3, r1, #1
    739c:	4698      	mov	r8, r3
    739e:	4488      	add	r8, r1
    73a0:	4643      	mov	r3, r8
    73a2:	0a59      	lsrs	r1, r3, #9
    73a4:	6a03      	ldr	r3, [r0, #32]
    73a6:	469c      	mov	ip, r3
    73a8:	4461      	add	r1, ip
    73aa:	4b3b      	ldr	r3, [pc, #236]	; (7498 <put_fat+0x134>)
    73ac:	4798      	blx	r3
    73ae:	1e05      	subs	r5, r0, #0
    73b0:	d1f0      	bne.n	7394 <put_fat+0x30>
    73b2:	4643      	mov	r3, r8
    73b4:	05db      	lsls	r3, r3, #23
    73b6:	0ddb      	lsrs	r3, r3, #23
    73b8:	07e2      	lsls	r2, r4, #31
    73ba:	d51f      	bpl.n	73fc <put_fat+0x98>
    73bc:	18fb      	adds	r3, r7, r3
    73be:	3330      	adds	r3, #48	; 0x30
    73c0:	7819      	ldrb	r1, [r3, #0]
    73c2:	220f      	movs	r2, #15
    73c4:	400a      	ands	r2, r1
    73c6:	0131      	lsls	r1, r6, #4
    73c8:	20ff      	movs	r0, #255	; 0xff
    73ca:	0100      	lsls	r0, r0, #4
    73cc:	4001      	ands	r1, r0
    73ce:	430a      	orrs	r2, r1
    73d0:	701a      	strb	r2, [r3, #0]
    73d2:	4644      	mov	r4, r8
    73d4:	3401      	adds	r4, #1
    73d6:	2301      	movs	r3, #1
    73d8:	713b      	strb	r3, [r7, #4]
    73da:	0a61      	lsrs	r1, r4, #9
    73dc:	6a3b      	ldr	r3, [r7, #32]
    73de:	469c      	mov	ip, r3
    73e0:	4461      	add	r1, ip
    73e2:	0038      	movs	r0, r7
    73e4:	4b2c      	ldr	r3, [pc, #176]	; (7498 <put_fat+0x134>)
    73e6:	4798      	blx	r3
    73e8:	2800      	cmp	r0, #0
    73ea:	d151      	bne.n	7490 <put_fat+0x12c>
    73ec:	05e4      	lsls	r4, r4, #23
    73ee:	0de4      	lsrs	r4, r4, #23
    73f0:	0936      	lsrs	r6, r6, #4
    73f2:	b2f6      	uxtb	r6, r6
    73f4:	193c      	adds	r4, r7, r4
    73f6:	3430      	adds	r4, #48	; 0x30
    73f8:	7026      	strb	r6, [r4, #0]
    73fa:	e7cb      	b.n	7394 <put_fat+0x30>
    73fc:	18fb      	adds	r3, r7, r3
    73fe:	3330      	adds	r3, #48	; 0x30
    7400:	701e      	strb	r6, [r3, #0]
    7402:	4644      	mov	r4, r8
    7404:	3401      	adds	r4, #1
    7406:	2301      	movs	r3, #1
    7408:	713b      	strb	r3, [r7, #4]
    740a:	0a61      	lsrs	r1, r4, #9
    740c:	6a3b      	ldr	r3, [r7, #32]
    740e:	469c      	mov	ip, r3
    7410:	4461      	add	r1, ip
    7412:	0038      	movs	r0, r7
    7414:	4b20      	ldr	r3, [pc, #128]	; (7498 <put_fat+0x134>)
    7416:	4798      	blx	r3
    7418:	2800      	cmp	r0, #0
    741a:	d13b      	bne.n	7494 <put_fat+0x130>
    741c:	05e4      	lsls	r4, r4, #23
    741e:	0de4      	lsrs	r4, r4, #23
    7420:	193b      	adds	r3, r7, r4
    7422:	3330      	adds	r3, #48	; 0x30
    7424:	781b      	ldrb	r3, [r3, #0]
    7426:	220f      	movs	r2, #15
    7428:	4393      	bics	r3, r2
    742a:	0536      	lsls	r6, r6, #20
    742c:	0f36      	lsrs	r6, r6, #28
    742e:	431e      	orrs	r6, r3
    7430:	e7e0      	b.n	73f4 <put_fat+0x90>
    7432:	0a09      	lsrs	r1, r1, #8
    7434:	6a03      	ldr	r3, [r0, #32]
    7436:	469c      	mov	ip, r3
    7438:	4461      	add	r1, ip
    743a:	4b17      	ldr	r3, [pc, #92]	; (7498 <put_fat+0x134>)
    743c:	4798      	blx	r3
    743e:	1e05      	subs	r5, r0, #0
    7440:	d1a8      	bne.n	7394 <put_fat+0x30>
    7442:	0063      	lsls	r3, r4, #1
    7444:	24ff      	movs	r4, #255	; 0xff
    7446:	0064      	lsls	r4, r4, #1
    7448:	4023      	ands	r3, r4
    744a:	18fb      	adds	r3, r7, r3
    744c:	3330      	adds	r3, #48	; 0x30
    744e:	701e      	strb	r6, [r3, #0]
    7450:	0a36      	lsrs	r6, r6, #8
    7452:	705e      	strb	r6, [r3, #1]
    7454:	e79e      	b.n	7394 <put_fat+0x30>
    7456:	09c9      	lsrs	r1, r1, #7
    7458:	6a03      	ldr	r3, [r0, #32]
    745a:	469c      	mov	ip, r3
    745c:	4461      	add	r1, ip
    745e:	4b0e      	ldr	r3, [pc, #56]	; (7498 <put_fat+0x134>)
    7460:	4798      	blx	r3
    7462:	1e05      	subs	r5, r0, #0
    7464:	d196      	bne.n	7394 <put_fat+0x30>
    7466:	00a4      	lsls	r4, r4, #2
    7468:	23fe      	movs	r3, #254	; 0xfe
    746a:	005b      	lsls	r3, r3, #1
    746c:	401c      	ands	r4, r3
    746e:	0022      	movs	r2, r4
    7470:	3230      	adds	r2, #48	; 0x30
    7472:	18ba      	adds	r2, r7, r2
    7474:	78d3      	ldrb	r3, [r2, #3]
    7476:	193c      	adds	r4, r7, r4
    7478:	3430      	adds	r4, #48	; 0x30
    747a:	091b      	lsrs	r3, r3, #4
    747c:	071b      	lsls	r3, r3, #28
    747e:	431e      	orrs	r6, r3
    7480:	7026      	strb	r6, [r4, #0]
    7482:	0a33      	lsrs	r3, r6, #8
    7484:	7053      	strb	r3, [r2, #1]
    7486:	0c33      	lsrs	r3, r6, #16
    7488:	7093      	strb	r3, [r2, #2]
    748a:	0e36      	lsrs	r6, r6, #24
    748c:	70d6      	strb	r6, [r2, #3]
    748e:	e781      	b.n	7394 <put_fat+0x30>
    7490:	0005      	movs	r5, r0
    7492:	e77f      	b.n	7394 <put_fat+0x30>
    7494:	0005      	movs	r5, r0
    7496:	e77d      	b.n	7394 <put_fat+0x30>
    7498:	00007121 	.word	0x00007121

0000749c <create_chain>:
    749c:	b5f0      	push	{r4, r5, r6, r7, lr}
    749e:	46c6      	mov	lr, r8
    74a0:	b500      	push	{lr}
    74a2:	0005      	movs	r5, r0
    74a4:	4688      	mov	r8, r1
    74a6:	2900      	cmp	r1, #0
    74a8:	d107      	bne.n	74ba <create_chain+0x1e>
    74aa:	68c6      	ldr	r6, [r0, #12]
    74ac:	2e00      	cmp	r6, #0
    74ae:	d00d      	beq.n	74cc <create_chain+0x30>
    74b0:	6983      	ldr	r3, [r0, #24]
    74b2:	429e      	cmp	r6, r3
    74b4:	d30b      	bcc.n	74ce <create_chain+0x32>
    74b6:	2601      	movs	r6, #1
    74b8:	e009      	b.n	74ce <create_chain+0x32>
    74ba:	4b26      	ldr	r3, [pc, #152]	; (7554 <create_chain+0xb8>)
    74bc:	4798      	blx	r3
    74be:	2801      	cmp	r0, #1
    74c0:	d93d      	bls.n	753e <create_chain+0xa2>
    74c2:	69ab      	ldr	r3, [r5, #24]
    74c4:	4646      	mov	r6, r8
    74c6:	4298      	cmp	r0, r3
    74c8:	d201      	bcs.n	74ce <create_chain+0x32>
    74ca:	e03d      	b.n	7548 <create_chain+0xac>
    74cc:	2601      	movs	r6, #1
    74ce:	0034      	movs	r4, r6
    74d0:	4f20      	ldr	r7, [pc, #128]	; (7554 <create_chain+0xb8>)
    74d2:	e00a      	b.n	74ea <create_chain+0x4e>
    74d4:	0021      	movs	r1, r4
    74d6:	0028      	movs	r0, r5
    74d8:	47b8      	blx	r7
    74da:	2800      	cmp	r0, #0
    74dc:	d00d      	beq.n	74fa <create_chain+0x5e>
    74de:	1c43      	adds	r3, r0, #1
    74e0:	d032      	beq.n	7548 <create_chain+0xac>
    74e2:	2801      	cmp	r0, #1
    74e4:	d030      	beq.n	7548 <create_chain+0xac>
    74e6:	42b4      	cmp	r4, r6
    74e8:	d02d      	beq.n	7546 <create_chain+0xaa>
    74ea:	3401      	adds	r4, #1
    74ec:	69ab      	ldr	r3, [r5, #24]
    74ee:	429c      	cmp	r4, r3
    74f0:	d3f0      	bcc.n	74d4 <create_chain+0x38>
    74f2:	2e01      	cmp	r6, #1
    74f4:	d925      	bls.n	7542 <create_chain+0xa6>
    74f6:	2402      	movs	r4, #2
    74f8:	e7ec      	b.n	74d4 <create_chain+0x38>
    74fa:	4a17      	ldr	r2, [pc, #92]	; (7558 <create_chain+0xbc>)
    74fc:	0021      	movs	r1, r4
    74fe:	0028      	movs	r0, r5
    7500:	4b16      	ldr	r3, [pc, #88]	; (755c <create_chain+0xc0>)
    7502:	4798      	blx	r3
    7504:	2800      	cmp	r0, #0
    7506:	d113      	bne.n	7530 <create_chain+0x94>
    7508:	4643      	mov	r3, r8
    750a:	2b00      	cmp	r3, #0
    750c:	d109      	bne.n	7522 <create_chain+0x86>
    750e:	60ec      	str	r4, [r5, #12]
    7510:	692b      	ldr	r3, [r5, #16]
    7512:	1c5a      	adds	r2, r3, #1
    7514:	d01b      	beq.n	754e <create_chain+0xb2>
    7516:	3b01      	subs	r3, #1
    7518:	612b      	str	r3, [r5, #16]
    751a:	2301      	movs	r3, #1
    751c:	716b      	strb	r3, [r5, #5]
    751e:	0020      	movs	r0, r4
    7520:	e012      	b.n	7548 <create_chain+0xac>
    7522:	0022      	movs	r2, r4
    7524:	4641      	mov	r1, r8
    7526:	0028      	movs	r0, r5
    7528:	4b0c      	ldr	r3, [pc, #48]	; (755c <create_chain+0xc0>)
    752a:	4798      	blx	r3
    752c:	2800      	cmp	r0, #0
    752e:	d0ee      	beq.n	750e <create_chain+0x72>
    7530:	3801      	subs	r0, #1
    7532:	4242      	negs	r2, r0
    7534:	4142      	adcs	r2, r0
    7536:	4250      	negs	r0, r2
    7538:	2301      	movs	r3, #1
    753a:	4318      	orrs	r0, r3
    753c:	e004      	b.n	7548 <create_chain+0xac>
    753e:	2001      	movs	r0, #1
    7540:	e002      	b.n	7548 <create_chain+0xac>
    7542:	2000      	movs	r0, #0
    7544:	e000      	b.n	7548 <create_chain+0xac>
    7546:	2000      	movs	r0, #0
    7548:	bc04      	pop	{r2}
    754a:	4690      	mov	r8, r2
    754c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    754e:	0020      	movs	r0, r4
    7550:	e7fa      	b.n	7548 <create_chain+0xac>
    7552:	46c0      	nop			; (mov r8, r8)
    7554:	000071c1 	.word	0x000071c1
    7558:	0fffffff 	.word	0x0fffffff
    755c:	00007365 	.word	0x00007365

00007560 <remove_chain>:
    7560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7562:	46ce      	mov	lr, r9
    7564:	4647      	mov	r7, r8
    7566:	b580      	push	{r7, lr}
    7568:	0004      	movs	r4, r0
    756a:	000d      	movs	r5, r1
    756c:	2002      	movs	r0, #2
    756e:	2901      	cmp	r1, #1
    7570:	d902      	bls.n	7578 <remove_chain+0x18>
    7572:	69a3      	ldr	r3, [r4, #24]
    7574:	4299      	cmp	r1, r3
    7576:	d303      	bcc.n	7580 <remove_chain+0x20>
    7578:	bc0c      	pop	{r2, r3}
    757a:	4690      	mov	r8, r2
    757c:	4699      	mov	r9, r3
    757e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7580:	4f13      	ldr	r7, [pc, #76]	; (75d0 <remove_chain+0x70>)
    7582:	4b14      	ldr	r3, [pc, #80]	; (75d4 <remove_chain+0x74>)
    7584:	4698      	mov	r8, r3
    7586:	2301      	movs	r3, #1
    7588:	4699      	mov	r9, r3
    758a:	e003      	b.n	7594 <remove_chain+0x34>
    758c:	0035      	movs	r5, r6
    758e:	69a3      	ldr	r3, [r4, #24]
    7590:	42b3      	cmp	r3, r6
    7592:	d9f1      	bls.n	7578 <remove_chain+0x18>
    7594:	0029      	movs	r1, r5
    7596:	0020      	movs	r0, r4
    7598:	47b8      	blx	r7
    759a:	1e06      	subs	r6, r0, #0
    759c:	d011      	beq.n	75c2 <remove_chain+0x62>
    759e:	2801      	cmp	r0, #1
    75a0:	d011      	beq.n	75c6 <remove_chain+0x66>
    75a2:	1c43      	adds	r3, r0, #1
    75a4:	d011      	beq.n	75ca <remove_chain+0x6a>
    75a6:	2200      	movs	r2, #0
    75a8:	0029      	movs	r1, r5
    75aa:	0020      	movs	r0, r4
    75ac:	47c0      	blx	r8
    75ae:	2800      	cmp	r0, #0
    75b0:	d1e2      	bne.n	7578 <remove_chain+0x18>
    75b2:	6923      	ldr	r3, [r4, #16]
    75b4:	1c5a      	adds	r2, r3, #1
    75b6:	d0e9      	beq.n	758c <remove_chain+0x2c>
    75b8:	3301      	adds	r3, #1
    75ba:	6123      	str	r3, [r4, #16]
    75bc:	464b      	mov	r3, r9
    75be:	7163      	strb	r3, [r4, #5]
    75c0:	e7e4      	b.n	758c <remove_chain+0x2c>
    75c2:	2000      	movs	r0, #0
    75c4:	e7d8      	b.n	7578 <remove_chain+0x18>
    75c6:	2002      	movs	r0, #2
    75c8:	e7d6      	b.n	7578 <remove_chain+0x18>
    75ca:	2001      	movs	r0, #1
    75cc:	e7d4      	b.n	7578 <remove_chain+0x18>
    75ce:	46c0      	nop			; (mov r8, r8)
    75d0:	000071c1 	.word	0x000071c1
    75d4:	00007365 	.word	0x00007365

000075d8 <dir_next>:
    75d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75da:	46d6      	mov	lr, sl
    75dc:	4647      	mov	r7, r8
    75de:	b580      	push	{r7, lr}
    75e0:	0006      	movs	r6, r0
    75e2:	000d      	movs	r5, r1
    75e4:	88c4      	ldrh	r4, [r0, #6]
    75e6:	3401      	adds	r4, #1
    75e8:	b2a4      	uxth	r4, r4
    75ea:	2004      	movs	r0, #4
    75ec:	2c00      	cmp	r4, #0
    75ee:	d103      	bne.n	75f8 <dir_next+0x20>
    75f0:	bc0c      	pop	{r2, r3}
    75f2:	4690      	mov	r8, r2
    75f4:	469a      	mov	sl, r3
    75f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75f8:	6933      	ldr	r3, [r6, #16]
    75fa:	2b00      	cmp	r3, #0
    75fc:	d0f8      	beq.n	75f0 <dir_next+0x18>
    75fe:	270f      	movs	r7, #15
    7600:	4027      	ands	r7, r4
    7602:	d10f      	bne.n	7624 <dir_next+0x4c>
    7604:	3301      	adds	r3, #1
    7606:	6133      	str	r3, [r6, #16]
    7608:	68f1      	ldr	r1, [r6, #12]
    760a:	2900      	cmp	r1, #0
    760c:	d104      	bne.n	7618 <dir_next+0x40>
    760e:	6833      	ldr	r3, [r6, #0]
    7610:	891b      	ldrh	r3, [r3, #8]
    7612:	42a3      	cmp	r3, r4
    7614:	d9ec      	bls.n	75f0 <dir_next+0x18>
    7616:	e005      	b.n	7624 <dir_next+0x4c>
    7618:	6830      	ldr	r0, [r6, #0]
    761a:	7883      	ldrb	r3, [r0, #2]
    761c:	3b01      	subs	r3, #1
    761e:	0922      	lsrs	r2, r4, #4
    7620:	421a      	tst	r2, r3
    7622:	d007      	beq.n	7634 <dir_next+0x5c>
    7624:	80f4      	strh	r4, [r6, #6]
    7626:	6833      	ldr	r3, [r6, #0]
    7628:	3330      	adds	r3, #48	; 0x30
    762a:	017f      	lsls	r7, r7, #5
    762c:	19df      	adds	r7, r3, r7
    762e:	6177      	str	r7, [r6, #20]
    7630:	2000      	movs	r0, #0
    7632:	e7dd      	b.n	75f0 <dir_next+0x18>
    7634:	4b2c      	ldr	r3, [pc, #176]	; (76e8 <dir_next+0x110>)
    7636:	4798      	blx	r3
    7638:	4680      	mov	r8, r0
    763a:	2002      	movs	r0, #2
    763c:	4643      	mov	r3, r8
    763e:	2b01      	cmp	r3, #1
    7640:	d9d6      	bls.n	75f0 <dir_next+0x18>
    7642:	3301      	adds	r3, #1
    7644:	d04b      	beq.n	76de <dir_next+0x106>
    7646:	6833      	ldr	r3, [r6, #0]
    7648:	699a      	ldr	r2, [r3, #24]
    764a:	4590      	cmp	r8, r2
    764c:	d33f      	bcc.n	76ce <dir_next+0xf6>
    764e:	3002      	adds	r0, #2
    7650:	2d00      	cmp	r5, #0
    7652:	d0cd      	beq.n	75f0 <dir_next+0x18>
    7654:	68f1      	ldr	r1, [r6, #12]
    7656:	0018      	movs	r0, r3
    7658:	4b24      	ldr	r3, [pc, #144]	; (76ec <dir_next+0x114>)
    765a:	4798      	blx	r3
    765c:	4680      	mov	r8, r0
    765e:	2007      	movs	r0, #7
    7660:	4643      	mov	r3, r8
    7662:	2b00      	cmp	r3, #0
    7664:	d0c4      	beq.n	75f0 <dir_next+0x18>
    7666:	3805      	subs	r0, #5
    7668:	2b01      	cmp	r3, #1
    766a:	d0c1      	beq.n	75f0 <dir_next+0x18>
    766c:	3801      	subs	r0, #1
    766e:	3301      	adds	r3, #1
    7670:	d0be      	beq.n	75f0 <dir_next+0x18>
    7672:	2100      	movs	r1, #0
    7674:	6830      	ldr	r0, [r6, #0]
    7676:	4b1e      	ldr	r3, [pc, #120]	; (76f0 <dir_next+0x118>)
    7678:	4798      	blx	r3
    767a:	0003      	movs	r3, r0
    767c:	2001      	movs	r0, #1
    767e:	2b00      	cmp	r3, #0
    7680:	d1b6      	bne.n	75f0 <dir_next+0x18>
    7682:	6830      	ldr	r0, [r6, #0]
    7684:	3030      	adds	r0, #48	; 0x30
    7686:	2280      	movs	r2, #128	; 0x80
    7688:	0092      	lsls	r2, r2, #2
    768a:	2100      	movs	r1, #0
    768c:	4b19      	ldr	r3, [pc, #100]	; (76f4 <dir_next+0x11c>)
    768e:	4798      	blx	r3
    7690:	6835      	ldr	r5, [r6, #0]
    7692:	4641      	mov	r1, r8
    7694:	0028      	movs	r0, r5
    7696:	4b18      	ldr	r3, [pc, #96]	; (76f8 <dir_next+0x120>)
    7698:	4798      	blx	r3
    769a:	62e8      	str	r0, [r5, #44]	; 0x2c
    769c:	2500      	movs	r5, #0
    769e:	2301      	movs	r3, #1
    76a0:	469a      	mov	sl, r3
    76a2:	6833      	ldr	r3, [r6, #0]
    76a4:	789a      	ldrb	r2, [r3, #2]
    76a6:	42aa      	cmp	r2, r5
    76a8:	d90e      	bls.n	76c8 <dir_next+0xf0>
    76aa:	4652      	mov	r2, sl
    76ac:	711a      	strb	r2, [r3, #4]
    76ae:	2100      	movs	r1, #0
    76b0:	6830      	ldr	r0, [r6, #0]
    76b2:	4b0f      	ldr	r3, [pc, #60]	; (76f0 <dir_next+0x118>)
    76b4:	4798      	blx	r3
    76b6:	2800      	cmp	r0, #0
    76b8:	d113      	bne.n	76e2 <dir_next+0x10a>
    76ba:	6832      	ldr	r2, [r6, #0]
    76bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    76be:	3301      	adds	r3, #1
    76c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    76c2:	3501      	adds	r5, #1
    76c4:	b2ed      	uxtb	r5, r5
    76c6:	e7ec      	b.n	76a2 <dir_next+0xca>
    76c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    76ca:	1b52      	subs	r2, r2, r5
    76cc:	62da      	str	r2, [r3, #44]	; 0x2c
    76ce:	4643      	mov	r3, r8
    76d0:	60f3      	str	r3, [r6, #12]
    76d2:	4641      	mov	r1, r8
    76d4:	6830      	ldr	r0, [r6, #0]
    76d6:	4b08      	ldr	r3, [pc, #32]	; (76f8 <dir_next+0x120>)
    76d8:	4798      	blx	r3
    76da:	6130      	str	r0, [r6, #16]
    76dc:	e7a2      	b.n	7624 <dir_next+0x4c>
    76de:	2001      	movs	r0, #1
    76e0:	e786      	b.n	75f0 <dir_next+0x18>
    76e2:	2001      	movs	r0, #1
    76e4:	e784      	b.n	75f0 <dir_next+0x18>
    76e6:	46c0      	nop			; (mov r8, r8)
    76e8:	000071c1 	.word	0x000071c1
    76ec:	0000749d 	.word	0x0000749d
    76f0:	00007121 	.word	0x00007121
    76f4:	00006c55 	.word	0x00006c55
    76f8:	00006c67 	.word	0x00006c67

000076fc <dir_find>:
    76fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    76fe:	46de      	mov	lr, fp
    7700:	4657      	mov	r7, sl
    7702:	464e      	mov	r6, r9
    7704:	4645      	mov	r5, r8
    7706:	b5e0      	push	{r5, r6, r7, lr}
    7708:	b083      	sub	sp, #12
    770a:	0005      	movs	r5, r0
    770c:	2100      	movs	r1, #0
    770e:	4b5a      	ldr	r3, [pc, #360]	; (7878 <dir_find+0x17c>)
    7710:	4798      	blx	r3
    7712:	1e07      	subs	r7, r0, #0
    7714:	d000      	beq.n	7718 <dir_find+0x1c>
    7716:	e09e      	b.n	7856 <dir_find+0x15a>
    7718:	23ff      	movs	r3, #255	; 0xff
    771a:	4699      	mov	r9, r3
    771c:	469a      	mov	sl, r3
    771e:	4b57      	ldr	r3, [pc, #348]	; (787c <dir_find+0x180>)
    7720:	469b      	mov	fp, r3
    7722:	e01b      	b.n	775c <dir_find+0x60>
    7724:	2b0f      	cmp	r3, #15
    7726:	d030      	beq.n	778a <dir_find+0x8e>
    7728:	4653      	mov	r3, sl
    772a:	2b00      	cmp	r3, #0
    772c:	d105      	bne.n	773a <dir_find+0x3e>
    772e:	0020      	movs	r0, r4
    7730:	4b53      	ldr	r3, [pc, #332]	; (7880 <dir_find+0x184>)
    7732:	4798      	blx	r3
    7734:	4581      	cmp	r9, r0
    7736:	d100      	bne.n	773a <dir_find+0x3e>
    7738:	e08d      	b.n	7856 <dir_find+0x15a>
    773a:	2301      	movs	r3, #1
    773c:	425b      	negs	r3, r3
    773e:	842b      	strh	r3, [r5, #32]
    7740:	69a8      	ldr	r0, [r5, #24]
    7742:	7ac3      	ldrb	r3, [r0, #11]
    7744:	07db      	lsls	r3, r3, #31
    7746:	d400      	bmi.n	774a <dir_find+0x4e>
    7748:	e07d      	b.n	7846 <dir_find+0x14a>
    774a:	23ff      	movs	r3, #255	; 0xff
    774c:	469a      	mov	sl, r3
    774e:	2100      	movs	r1, #0
    7750:	0028      	movs	r0, r5
    7752:	4b4c      	ldr	r3, [pc, #304]	; (7884 <dir_find+0x188>)
    7754:	4798      	blx	r3
    7756:	1e07      	subs	r7, r0, #0
    7758:	d000      	beq.n	775c <dir_find+0x60>
    775a:	e07c      	b.n	7856 <dir_find+0x15a>
    775c:	6929      	ldr	r1, [r5, #16]
    775e:	6828      	ldr	r0, [r5, #0]
    7760:	47d8      	blx	fp
    7762:	1e07      	subs	r7, r0, #0
    7764:	d177      	bne.n	7856 <dir_find+0x15a>
    7766:	696c      	ldr	r4, [r5, #20]
    7768:	7826      	ldrb	r6, [r4, #0]
    776a:	2e00      	cmp	r6, #0
    776c:	d100      	bne.n	7770 <dir_find+0x74>
    776e:	e080      	b.n	7872 <dir_find+0x176>
    7770:	7ae2      	ldrb	r2, [r4, #11]
    7772:	233f      	movs	r3, #63	; 0x3f
    7774:	4013      	ands	r3, r2
    7776:	2ee5      	cmp	r6, #229	; 0xe5
    7778:	d100      	bne.n	777c <dir_find+0x80>
    777a:	e077      	b.n	786c <dir_find+0x170>
    777c:	0712      	lsls	r2, r2, #28
    777e:	d5d1      	bpl.n	7724 <dir_find+0x28>
    7780:	2b0f      	cmp	r3, #15
    7782:	d002      	beq.n	778a <dir_find+0x8e>
    7784:	23ff      	movs	r3, #255	; 0xff
    7786:	469a      	mov	sl, r3
    7788:	e7e1      	b.n	774e <dir_find+0x52>
    778a:	69ef      	ldr	r7, [r5, #28]
    778c:	2f00      	cmp	r7, #0
    778e:	d0de      	beq.n	774e <dir_find+0x52>
    7790:	0673      	lsls	r3, r6, #25
    7792:	d518      	bpl.n	77c6 <dir_find+0xca>
    7794:	7b63      	ldrb	r3, [r4, #13]
    7796:	4699      	mov	r9, r3
    7798:	2340      	movs	r3, #64	; 0x40
    779a:	439e      	bics	r6, r3
    779c:	88eb      	ldrh	r3, [r5, #6]
    779e:	842b      	strh	r3, [r5, #32]
    77a0:	7b63      	ldrb	r3, [r4, #13]
    77a2:	9300      	str	r3, [sp, #0]
    77a4:	22ff      	movs	r2, #255	; 0xff
    77a6:	4692      	mov	sl, r2
    77a8:	454b      	cmp	r3, r9
    77aa:	d1d0      	bne.n	774e <dir_find+0x52>
    77ac:	7823      	ldrb	r3, [r4, #0]
    77ae:	3abf      	subs	r2, #191	; 0xbf
    77b0:	4393      	bics	r3, r2
    77b2:	3b01      	subs	r3, #1
    77b4:	005a      	lsls	r2, r3, #1
    77b6:	18d2      	adds	r2, r2, r3
    77b8:	0092      	lsls	r2, r2, #2
    77ba:	4692      	mov	sl, r2
    77bc:	449a      	add	sl, r3
    77be:	2201      	movs	r2, #1
    77c0:	2300      	movs	r3, #0
    77c2:	4699      	mov	r9, r3
    77c4:	e01d      	b.n	7802 <dir_find+0x106>
    77c6:	45b2      	cmp	sl, r6
    77c8:	d0ea      	beq.n	77a0 <dir_find+0xa4>
    77ca:	23ff      	movs	r3, #255	; 0xff
    77cc:	469a      	mov	sl, r3
    77ce:	e7be      	b.n	774e <dir_find+0x52>
    77d0:	4b2d      	ldr	r3, [pc, #180]	; (7888 <dir_find+0x18c>)
    77d2:	4798      	blx	r3
    77d4:	9001      	str	r0, [sp, #4]
    77d6:	4653      	mov	r3, sl
    77d8:	2bfe      	cmp	r3, #254	; 0xfe
    77da:	d81f      	bhi.n	781c <dir_find+0x120>
    77dc:	2301      	movs	r3, #1
    77de:	4453      	add	r3, sl
    77e0:	4698      	mov	r8, r3
    77e2:	4653      	mov	r3, sl
    77e4:	005b      	lsls	r3, r3, #1
    77e6:	5bd8      	ldrh	r0, [r3, r7]
    77e8:	4b27      	ldr	r3, [pc, #156]	; (7888 <dir_find+0x18c>)
    77ea:	4798      	blx	r3
    77ec:	0002      	movs	r2, r0
    77ee:	9b01      	ldr	r3, [sp, #4]
    77f0:	4283      	cmp	r3, r0
    77f2:	d113      	bne.n	781c <dir_find+0x120>
    77f4:	46c2      	mov	sl, r8
    77f6:	2301      	movs	r3, #1
    77f8:	469c      	mov	ip, r3
    77fa:	44e1      	add	r9, ip
    77fc:	464b      	mov	r3, r9
    77fe:	2b0d      	cmp	r3, #13
    7800:	d011      	beq.n	7826 <dir_find+0x12a>
    7802:	4b22      	ldr	r3, [pc, #136]	; (788c <dir_find+0x190>)
    7804:	4649      	mov	r1, r9
    7806:	5cc9      	ldrb	r1, [r1, r3]
    7808:	1863      	adds	r3, r4, r1
    780a:	785b      	ldrb	r3, [r3, #1]
    780c:	021b      	lsls	r3, r3, #8
    780e:	5c60      	ldrb	r0, [r4, r1]
    7810:	4318      	orrs	r0, r3
    7812:	2a00      	cmp	r2, #0
    7814:	d1dc      	bne.n	77d0 <dir_find+0xd4>
    7816:	4b1e      	ldr	r3, [pc, #120]	; (7890 <dir_find+0x194>)
    7818:	4298      	cmp	r0, r3
    781a:	d0ec      	beq.n	77f6 <dir_find+0xfa>
    781c:	9b00      	ldr	r3, [sp, #0]
    781e:	4699      	mov	r9, r3
    7820:	23ff      	movs	r3, #255	; 0xff
    7822:	469a      	mov	sl, r3
    7824:	e793      	b.n	774e <dir_find+0x52>
    7826:	7823      	ldrb	r3, [r4, #0]
    7828:	065b      	lsls	r3, r3, #25
    782a:	d506      	bpl.n	783a <dir_find+0x13e>
    782c:	2a00      	cmp	r2, #0
    782e:	d004      	beq.n	783a <dir_find+0x13e>
    7830:	4653      	mov	r3, sl
    7832:	005b      	lsls	r3, r3, #1
    7834:	5bdb      	ldrh	r3, [r3, r7]
    7836:	2b00      	cmp	r3, #0
    7838:	d1f0      	bne.n	781c <dir_find+0x120>
    783a:	3e01      	subs	r6, #1
    783c:	b2f3      	uxtb	r3, r6
    783e:	469a      	mov	sl, r3
    7840:	9b00      	ldr	r3, [sp, #0]
    7842:	4699      	mov	r9, r3
    7844:	e783      	b.n	774e <dir_find+0x52>
    7846:	2300      	movs	r3, #0
    7848:	5ce1      	ldrb	r1, [r4, r3]
    784a:	5cc2      	ldrb	r2, [r0, r3]
    784c:	4291      	cmp	r1, r2
    784e:	d10a      	bne.n	7866 <dir_find+0x16a>
    7850:	3301      	adds	r3, #1
    7852:	2b0b      	cmp	r3, #11
    7854:	d1f8      	bne.n	7848 <dir_find+0x14c>
    7856:	0038      	movs	r0, r7
    7858:	b003      	add	sp, #12
    785a:	bc3c      	pop	{r2, r3, r4, r5}
    785c:	4690      	mov	r8, r2
    785e:	4699      	mov	r9, r3
    7860:	46a2      	mov	sl, r4
    7862:	46ab      	mov	fp, r5
    7864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7866:	23ff      	movs	r3, #255	; 0xff
    7868:	469a      	mov	sl, r3
    786a:	e770      	b.n	774e <dir_find+0x52>
    786c:	23ff      	movs	r3, #255	; 0xff
    786e:	469a      	mov	sl, r3
    7870:	e76d      	b.n	774e <dir_find+0x52>
    7872:	2704      	movs	r7, #4
    7874:	e7ef      	b.n	7856 <dir_find+0x15a>
    7876:	46c0      	nop			; (mov r8, r8)
    7878:	000072bd 	.word	0x000072bd
    787c:	00007121 	.word	0x00007121
    7880:	00006c7f 	.word	0x00006c7f
    7884:	000075d9 	.word	0x000075d9
    7888:	0000848d 	.word	0x0000848d
    788c:	0000e3e4 	.word	0x0000e3e4
    7890:	0000ffff 	.word	0x0000ffff

00007894 <dir_register>:
    7894:	b5f0      	push	{r4, r5, r6, r7, lr}
    7896:	46de      	mov	lr, fp
    7898:	4657      	mov	r7, sl
    789a:	464e      	mov	r6, r9
    789c:	4645      	mov	r5, r8
    789e:	b5e0      	push	{r5, r6, r7, lr}
    78a0:	b089      	sub	sp, #36	; 0x24
    78a2:	0004      	movs	r4, r0
    78a4:	6987      	ldr	r7, [r0, #24]
    78a6:	69c3      	ldr	r3, [r0, #28]
    78a8:	469a      	mov	sl, r3
    78aa:	ad05      	add	r5, sp, #20
    78ac:	220c      	movs	r2, #12
    78ae:	0039      	movs	r1, r7
    78b0:	0028      	movs	r0, r5
    78b2:	4ba7      	ldr	r3, [pc, #668]	; (7b50 <dir_register+0x2bc>)
    78b4:	4798      	blx	r3
    78b6:	7aeb      	ldrb	r3, [r5, #11]
    78b8:	07db      	lsls	r3, r3, #31
    78ba:	d400      	bmi.n	78be <dir_register+0x2a>
    78bc:	e070      	b.n	79a0 <dir_register+0x10c>
    78be:	2300      	movs	r3, #0
    78c0:	72fb      	strb	r3, [r7, #11]
    78c2:	61e3      	str	r3, [r4, #28]
    78c4:	220b      	movs	r2, #11
    78c6:	a905      	add	r1, sp, #20
    78c8:	0038      	movs	r0, r7
    78ca:	4ba1      	ldr	r3, [pc, #644]	; (7b50 <dir_register+0x2bc>)
    78cc:	4798      	blx	r3
    78ce:	2301      	movs	r3, #1
    78d0:	ad03      	add	r5, sp, #12
    78d2:	001e      	movs	r6, r3
    78d4:	46a0      	mov	r8, r4
    78d6:	e049      	b.n	796c <dir_register+0xd8>
    78d8:	3801      	subs	r0, #1
    78da:	1829      	adds	r1, r5, r0
    78dc:	704a      	strb	r2, [r1, #1]
    78de:	091b      	lsrs	r3, r3, #4
    78e0:	b29b      	uxth	r3, r3
    78e2:	2b00      	cmp	r3, #0
    78e4:	d007      	beq.n	78f6 <dir_register+0x62>
    78e6:	0021      	movs	r1, r4
    78e8:	4019      	ands	r1, r3
    78ea:	000a      	movs	r2, r1
    78ec:	3230      	adds	r2, #48	; 0x30
    78ee:	2a39      	cmp	r2, #57	; 0x39
    78f0:	d9f2      	bls.n	78d8 <dir_register+0x44>
    78f2:	3207      	adds	r2, #7
    78f4:	e7f0      	b.n	78d8 <dir_register+0x44>
    78f6:	337e      	adds	r3, #126	; 0x7e
    78f8:	542b      	strb	r3, [r5, r0]
    78fa:	2800      	cmp	r0, #0
    78fc:	d00a      	beq.n	7914 <dir_register+0x80>
    78fe:	783b      	ldrb	r3, [r7, #0]
    7900:	2b20      	cmp	r3, #32
    7902:	d009      	beq.n	7918 <dir_register+0x84>
    7904:	2300      	movs	r3, #0
    7906:	3301      	adds	r3, #1
    7908:	4298      	cmp	r0, r3
    790a:	d007      	beq.n	791c <dir_register+0x88>
    790c:	5cfa      	ldrb	r2, [r7, r3]
    790e:	2a20      	cmp	r2, #32
    7910:	d1f9      	bne.n	7906 <dir_register+0x72>
    7912:	e009      	b.n	7928 <dir_register+0x94>
    7914:	0003      	movs	r3, r0
    7916:	e007      	b.n	7928 <dir_register+0x94>
    7918:	2300      	movs	r3, #0
    791a:	e005      	b.n	7928 <dir_register+0x94>
    791c:	0003      	movs	r3, r0
    791e:	e003      	b.n	7928 <dir_register+0x94>
    7920:	54fa      	strb	r2, [r7, r3]
    7922:	3301      	adds	r3, #1
    7924:	2b07      	cmp	r3, #7
    7926:	d805      	bhi.n	7934 <dir_register+0xa0>
    7928:	2220      	movs	r2, #32
    792a:	2807      	cmp	r0, #7
    792c:	d8f8      	bhi.n	7920 <dir_register+0x8c>
    792e:	5c2a      	ldrb	r2, [r5, r0]
    7930:	3001      	adds	r0, #1
    7932:	e7f5      	b.n	7920 <dir_register+0x8c>
    7934:	4640      	mov	r0, r8
    7936:	4b87      	ldr	r3, [pc, #540]	; (7b54 <dir_register+0x2c0>)
    7938:	4798      	blx	r3
    793a:	2800      	cmp	r0, #0
    793c:	d11c      	bne.n	7978 <dir_register+0xe4>
    793e:	3601      	adds	r6, #1
    7940:	b2b6      	uxth	r6, r6
    7942:	2e64      	cmp	r6, #100	; 0x64
    7944:	d015      	beq.n	7972 <dir_register+0xde>
    7946:	220b      	movs	r2, #11
    7948:	a905      	add	r1, sp, #20
    794a:	0038      	movs	r0, r7
    794c:	4b80      	ldr	r3, [pc, #512]	; (7b50 <dir_register+0x2bc>)
    794e:	4798      	blx	r3
    7950:	0033      	movs	r3, r6
    7952:	2e05      	cmp	r6, #5
    7954:	d90a      	bls.n	796c <dir_register+0xd8>
    7956:	4651      	mov	r1, sl
    7958:	085a      	lsrs	r2, r3, #1
    795a:	03db      	lsls	r3, r3, #15
    795c:	4313      	orrs	r3, r2
    795e:	880a      	ldrh	r2, [r1, #0]
    7960:	189b      	adds	r3, r3, r2
    7962:	b29b      	uxth	r3, r3
    7964:	3102      	adds	r1, #2
    7966:	880a      	ldrh	r2, [r1, #0]
    7968:	2a00      	cmp	r2, #0
    796a:	d1f5      	bne.n	7958 <dir_register+0xc4>
    796c:	2007      	movs	r0, #7
    796e:	240f      	movs	r4, #15
    7970:	e7b9      	b.n	78e6 <dir_register+0x52>
    7972:	2307      	movs	r3, #7
    7974:	4698      	mov	r8, r3
    7976:	e006      	b.n	7986 <dir_register+0xf2>
    7978:	4644      	mov	r4, r8
    797a:	4680      	mov	r8, r0
    797c:	2e64      	cmp	r6, #100	; 0x64
    797e:	d100      	bne.n	7982 <dir_register+0xee>
    7980:	e0a5      	b.n	7ace <dir_register+0x23a>
    7982:	2804      	cmp	r0, #4
    7984:	d007      	beq.n	7996 <dir_register+0x102>
    7986:	4640      	mov	r0, r8
    7988:	b009      	add	sp, #36	; 0x24
    798a:	bc3c      	pop	{r2, r3, r4, r5}
    798c:	4690      	mov	r8, r2
    798e:	4699      	mov	r9, r3
    7990:	46a2      	mov	sl, r4
    7992:	46ab      	mov	fp, r5
    7994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7996:	ab05      	add	r3, sp, #20
    7998:	7adb      	ldrb	r3, [r3, #11]
    799a:	72fb      	strb	r3, [r7, #11]
    799c:	4653      	mov	r3, sl
    799e:	61e3      	str	r3, [r4, #28]
    79a0:	ab05      	add	r3, sp, #20
    79a2:	7adb      	ldrb	r3, [r3, #11]
    79a4:	2201      	movs	r2, #1
    79a6:	4693      	mov	fp, r2
    79a8:	079b      	lsls	r3, r3, #30
    79aa:	d511      	bpl.n	79d0 <dir_register+0x13c>
    79ac:	4653      	mov	r3, sl
    79ae:	881b      	ldrh	r3, [r3, #0]
    79b0:	2b00      	cmp	r3, #0
    79b2:	d01b      	beq.n	79ec <dir_register+0x158>
    79b4:	2000      	movs	r0, #0
    79b6:	4652      	mov	r2, sl
    79b8:	3001      	adds	r0, #1
    79ba:	b280      	uxth	r0, r0
    79bc:	0043      	lsls	r3, r0, #1
    79be:	5a9b      	ldrh	r3, [r3, r2]
    79c0:	2b00      	cmp	r3, #0
    79c2:	d1f9      	bne.n	79b8 <dir_register+0x124>
    79c4:	3019      	adds	r0, #25
    79c6:	210d      	movs	r1, #13
    79c8:	4b63      	ldr	r3, [pc, #396]	; (7b58 <dir_register+0x2c4>)
    79ca:	4798      	blx	r3
    79cc:	b283      	uxth	r3, r0
    79ce:	469b      	mov	fp, r3
    79d0:	2100      	movs	r1, #0
    79d2:	0020      	movs	r0, r4
    79d4:	4b61      	ldr	r3, [pc, #388]	; (7b5c <dir_register+0x2c8>)
    79d6:	4798      	blx	r3
    79d8:	4680      	mov	r8, r0
    79da:	2800      	cmp	r0, #0
    79dc:	d1d3      	bne.n	7986 <dir_register+0xf2>
    79de:	4682      	mov	sl, r0
    79e0:	2500      	movs	r5, #0
    79e2:	4f5f      	ldr	r7, [pc, #380]	; (7b60 <dir_register+0x2cc>)
    79e4:	2600      	movs	r6, #0
    79e6:	4b5f      	ldr	r3, [pc, #380]	; (7b64 <dir_register+0x2d0>)
    79e8:	4699      	mov	r9, r3
    79ea:	e00b      	b.n	7a04 <dir_register+0x170>
    79ec:	2000      	movs	r0, #0
    79ee:	e7e9      	b.n	79c4 <dir_register+0x130>
    79f0:	1c6b      	adds	r3, r5, #1
    79f2:	b29b      	uxth	r3, r3
    79f4:	459b      	cmp	fp, r3
    79f6:	d06d      	beq.n	7ad4 <dir_register+0x240>
    79f8:	001d      	movs	r5, r3
    79fa:	2101      	movs	r1, #1
    79fc:	0020      	movs	r0, r4
    79fe:	47c8      	blx	r9
    7a00:	2800      	cmp	r0, #0
    7a02:	d112      	bne.n	7a2a <dir_register+0x196>
    7a04:	6921      	ldr	r1, [r4, #16]
    7a06:	6820      	ldr	r0, [r4, #0]
    7a08:	47b8      	blx	r7
    7a0a:	2800      	cmp	r0, #0
    7a0c:	d000      	beq.n	7a10 <dir_register+0x17c>
    7a0e:	e098      	b.n	7b42 <dir_register+0x2ae>
    7a10:	6963      	ldr	r3, [r4, #20]
    7a12:	781b      	ldrb	r3, [r3, #0]
    7a14:	2be5      	cmp	r3, #229	; 0xe5
    7a16:	d001      	beq.n	7a1c <dir_register+0x188>
    7a18:	2b00      	cmp	r3, #0
    7a1a:	d104      	bne.n	7a26 <dir_register+0x192>
    7a1c:	2d00      	cmp	r5, #0
    7a1e:	d1e7      	bne.n	79f0 <dir_register+0x15c>
    7a20:	88e3      	ldrh	r3, [r4, #6]
    7a22:	469a      	mov	sl, r3
    7a24:	e7e4      	b.n	79f0 <dir_register+0x15c>
    7a26:	0035      	movs	r5, r6
    7a28:	e7e7      	b.n	79fa <dir_register+0x166>
    7a2a:	4680      	mov	r8, r0
    7a2c:	e7ab      	b.n	7986 <dir_register+0xf2>
    7a2e:	4651      	mov	r1, sl
    7a30:	0020      	movs	r0, r4
    7a32:	4b4a      	ldr	r3, [pc, #296]	; (7b5c <dir_register+0x2c8>)
    7a34:	4798      	blx	r3
    7a36:	4680      	mov	r8, r0
    7a38:	2800      	cmp	r0, #0
    7a3a:	d1a4      	bne.n	7986 <dir_register+0xf2>
    7a3c:	69a0      	ldr	r0, [r4, #24]
    7a3e:	4b4a      	ldr	r3, [pc, #296]	; (7b68 <dir_register+0x2d4>)
    7a40:	4798      	blx	r3
    7a42:	9001      	str	r0, [sp, #4]
    7a44:	46a8      	mov	r8, r5
    7a46:	e01f      	b.n	7a88 <dir_register+0x1f4>
    7a48:	0022      	movs	r2, r4
    7a4a:	e067      	b.n	7b1c <dir_register+0x288>
    7a4c:	465e      	mov	r6, fp
    7a4e:	4664      	mov	r4, ip
    7a50:	4946      	ldr	r1, [pc, #280]	; (7b6c <dir_register+0x2d8>)
    7a52:	428b      	cmp	r3, r1
    7a54:	d003      	beq.n	7a5e <dir_register+0x1ca>
    7a56:	0052      	lsls	r2, r2, #1
    7a58:	5b93      	ldrh	r3, [r2, r6]
    7a5a:	2b00      	cmp	r3, #0
    7a5c:	d103      	bne.n	7a66 <dir_register+0x1d2>
    7a5e:	2340      	movs	r3, #64	; 0x40
    7a60:	464a      	mov	r2, r9
    7a62:	431a      	orrs	r2, r3
    7a64:	4691      	mov	r9, r2
    7a66:	464b      	mov	r3, r9
    7a68:	7003      	strb	r3, [r0, #0]
    7a6a:	2301      	movs	r3, #1
    7a6c:	6822      	ldr	r2, [r4, #0]
    7a6e:	7113      	strb	r3, [r2, #4]
    7a70:	2100      	movs	r1, #0
    7a72:	0020      	movs	r0, r4
    7a74:	4b3b      	ldr	r3, [pc, #236]	; (7b64 <dir_register+0x2d0>)
    7a76:	4798      	blx	r3
    7a78:	2800      	cmp	r0, #0
    7a7a:	d166      	bne.n	7b4a <dir_register+0x2b6>
    7a7c:	4645      	mov	r5, r8
    7a7e:	3d01      	subs	r5, #1
    7a80:	b2ab      	uxth	r3, r5
    7a82:	4698      	mov	r8, r3
    7a84:	2b00      	cmp	r3, #0
    7a86:	d027      	beq.n	7ad8 <dir_register+0x244>
    7a88:	6921      	ldr	r1, [r4, #16]
    7a8a:	6820      	ldr	r0, [r4, #0]
    7a8c:	4b34      	ldr	r3, [pc, #208]	; (7b60 <dir_register+0x2cc>)
    7a8e:	4798      	blx	r3
    7a90:	2800      	cmp	r0, #0
    7a92:	d158      	bne.n	7b46 <dir_register+0x2b2>
    7a94:	69e6      	ldr	r6, [r4, #28]
    7a96:	6960      	ldr	r0, [r4, #20]
    7a98:	4643      	mov	r3, r8
    7a9a:	466a      	mov	r2, sp
    7a9c:	70d3      	strb	r3, [r2, #3]
    7a9e:	78d3      	ldrb	r3, [r2, #3]
    7aa0:	4699      	mov	r9, r3
    7aa2:	7913      	ldrb	r3, [r2, #4]
    7aa4:	7343      	strb	r3, [r0, #13]
    7aa6:	230f      	movs	r3, #15
    7aa8:	72c3      	strb	r3, [r0, #11]
    7aaa:	2300      	movs	r3, #0
    7aac:	7303      	strb	r3, [r0, #12]
    7aae:	7683      	strb	r3, [r0, #26]
    7ab0:	76c3      	strb	r3, [r0, #27]
    7ab2:	464b      	mov	r3, r9
    7ab4:	3b01      	subs	r3, #1
    7ab6:	005a      	lsls	r2, r3, #1
    7ab8:	18d2      	adds	r2, r2, r3
    7aba:	0092      	lsls	r2, r2, #2
    7abc:	18d2      	adds	r2, r2, r3
    7abe:	492c      	ldr	r1, [pc, #176]	; (7b70 <dir_register+0x2dc>)
    7ac0:	000d      	movs	r5, r1
    7ac2:	350d      	adds	r5, #13
    7ac4:	2300      	movs	r3, #0
    7ac6:	4f29      	ldr	r7, [pc, #164]	; (7b6c <dir_register+0x2d8>)
    7ac8:	46b3      	mov	fp, r6
    7aca:	46a4      	mov	ip, r4
    7acc:	e029      	b.n	7b22 <dir_register+0x28e>
    7ace:	2307      	movs	r3, #7
    7ad0:	4698      	mov	r8, r3
    7ad2:	e758      	b.n	7986 <dir_register+0xf2>
    7ad4:	2b01      	cmp	r3, #1
    7ad6:	d8aa      	bhi.n	7a2e <dir_register+0x19a>
    7ad8:	6921      	ldr	r1, [r4, #16]
    7ada:	6820      	ldr	r0, [r4, #0]
    7adc:	4b20      	ldr	r3, [pc, #128]	; (7b60 <dir_register+0x2cc>)
    7ade:	4798      	blx	r3
    7ae0:	4680      	mov	r8, r0
    7ae2:	2800      	cmp	r0, #0
    7ae4:	d000      	beq.n	7ae8 <dir_register+0x254>
    7ae6:	e74e      	b.n	7986 <dir_register+0xf2>
    7ae8:	6965      	ldr	r5, [r4, #20]
    7aea:	2220      	movs	r2, #32
    7aec:	2100      	movs	r1, #0
    7aee:	0028      	movs	r0, r5
    7af0:	4b20      	ldr	r3, [pc, #128]	; (7b74 <dir_register+0x2e0>)
    7af2:	4798      	blx	r3
    7af4:	220b      	movs	r2, #11
    7af6:	69a1      	ldr	r1, [r4, #24]
    7af8:	0028      	movs	r0, r5
    7afa:	4b15      	ldr	r3, [pc, #84]	; (7b50 <dir_register+0x2bc>)
    7afc:	4798      	blx	r3
    7afe:	69a3      	ldr	r3, [r4, #24]
    7b00:	7ada      	ldrb	r2, [r3, #11]
    7b02:	2318      	movs	r3, #24
    7b04:	4013      	ands	r3, r2
    7b06:	732b      	strb	r3, [r5, #12]
    7b08:	6823      	ldr	r3, [r4, #0]
    7b0a:	2201      	movs	r2, #1
    7b0c:	711a      	strb	r2, [r3, #4]
    7b0e:	e73a      	b.n	7986 <dir_register+0xf2>
    7b10:	780c      	ldrb	r4, [r1, #0]
    7b12:	26ff      	movs	r6, #255	; 0xff
    7b14:	5506      	strb	r6, [r0, r4]
    7b16:	1904      	adds	r4, r0, r4
    7b18:	26ff      	movs	r6, #255	; 0xff
    7b1a:	7066      	strb	r6, [r4, #1]
    7b1c:	3101      	adds	r1, #1
    7b1e:	42a9      	cmp	r1, r5
    7b20:	d094      	beq.n	7a4c <dir_register+0x1b8>
    7b22:	42bb      	cmp	r3, r7
    7b24:	d0f4      	beq.n	7b10 <dir_register+0x27c>
    7b26:	1c54      	adds	r4, r2, #1
    7b28:	0052      	lsls	r2, r2, #1
    7b2a:	465b      	mov	r3, fp
    7b2c:	5ad3      	ldrh	r3, [r2, r3]
    7b2e:	780a      	ldrb	r2, [r1, #0]
    7b30:	5483      	strb	r3, [r0, r2]
    7b32:	1882      	adds	r2, r0, r2
    7b34:	0a1e      	lsrs	r6, r3, #8
    7b36:	7056      	strb	r6, [r2, #1]
    7b38:	2b00      	cmp	r3, #0
    7b3a:	d185      	bne.n	7a48 <dir_register+0x1b4>
    7b3c:	0022      	movs	r2, r4
    7b3e:	003b      	movs	r3, r7
    7b40:	e7ec      	b.n	7b1c <dir_register+0x288>
    7b42:	4680      	mov	r8, r0
    7b44:	e71f      	b.n	7986 <dir_register+0xf2>
    7b46:	4680      	mov	r8, r0
    7b48:	e71d      	b.n	7986 <dir_register+0xf2>
    7b4a:	4680      	mov	r8, r0
    7b4c:	e71b      	b.n	7986 <dir_register+0xf2>
    7b4e:	46c0      	nop			; (mov r8, r8)
    7b50:	00006c41 	.word	0x00006c41
    7b54:	000076fd 	.word	0x000076fd
    7b58:	0000ba11 	.word	0x0000ba11
    7b5c:	000072bd 	.word	0x000072bd
    7b60:	00007121 	.word	0x00007121
    7b64:	000075d9 	.word	0x000075d9
    7b68:	00006c7f 	.word	0x00006c7f
    7b6c:	0000ffff 	.word	0x0000ffff
    7b70:	0000e3e4 	.word	0x0000e3e4
    7b74:	00006c55 	.word	0x00006c55

00007b78 <sync>:
    7b78:	b570      	push	{r4, r5, r6, lr}
    7b7a:	0004      	movs	r4, r0
    7b7c:	2100      	movs	r1, #0
    7b7e:	4b2c      	ldr	r3, [pc, #176]	; (7c30 <sync+0xb8>)
    7b80:	4798      	blx	r3
    7b82:	2800      	cmp	r0, #0
    7b84:	d10a      	bne.n	7b9c <sync+0x24>
    7b86:	7823      	ldrb	r3, [r4, #0]
    7b88:	2b03      	cmp	r3, #3
    7b8a:	d008      	beq.n	7b9e <sync+0x26>
    7b8c:	7860      	ldrb	r0, [r4, #1]
    7b8e:	2200      	movs	r2, #0
    7b90:	2100      	movs	r1, #0
    7b92:	4b28      	ldr	r3, [pc, #160]	; (7c34 <sync+0xbc>)
    7b94:	4798      	blx	r3
    7b96:	1e43      	subs	r3, r0, #1
    7b98:	4198      	sbcs	r0, r3
    7b9a:	b2c0      	uxtb	r0, r0
    7b9c:	bd70      	pop	{r4, r5, r6, pc}
    7b9e:	7963      	ldrb	r3, [r4, #5]
    7ba0:	2b00      	cmp	r3, #0
    7ba2:	d0f3      	beq.n	7b8c <sync+0x14>
    7ba4:	2600      	movs	r6, #0
    7ba6:	62e6      	str	r6, [r4, #44]	; 0x2c
    7ba8:	0025      	movs	r5, r4
    7baa:	3530      	adds	r5, #48	; 0x30
    7bac:	2280      	movs	r2, #128	; 0x80
    7bae:	0092      	lsls	r2, r2, #2
    7bb0:	2100      	movs	r1, #0
    7bb2:	0028      	movs	r0, r5
    7bb4:	4b20      	ldr	r3, [pc, #128]	; (7c38 <sync+0xc0>)
    7bb6:	4798      	blx	r3
    7bb8:	2255      	movs	r2, #85	; 0x55
    7bba:	4b20      	ldr	r3, [pc, #128]	; (7c3c <sync+0xc4>)
    7bbc:	54e2      	strb	r2, [r4, r3]
    7bbe:	3255      	adds	r2, #85	; 0x55
    7bc0:	4b1f      	ldr	r3, [pc, #124]	; (7c40 <sync+0xc8>)
    7bc2:	54e2      	strb	r2, [r4, r3]
    7bc4:	3bde      	subs	r3, #222	; 0xde
    7bc6:	3bff      	subs	r3, #255	; 0xff
    7bc8:	3a7a      	subs	r2, #122	; 0x7a
    7bca:	54a3      	strb	r3, [r4, r2]
    7bcc:	3201      	adds	r2, #1
    7bce:	54a3      	strb	r3, [r4, r2]
    7bd0:	330f      	adds	r3, #15
    7bd2:	3201      	adds	r2, #1
    7bd4:	54a3      	strb	r3, [r4, r2]
    7bd6:	320f      	adds	r2, #15
    7bd8:	2133      	movs	r1, #51	; 0x33
    7bda:	5462      	strb	r2, [r4, r1]
    7bdc:	313f      	adds	r1, #63	; 0x3f
    7bde:	2085      	movs	r0, #133	; 0x85
    7be0:	0080      	lsls	r0, r0, #2
    7be2:	5421      	strb	r1, [r4, r0]
    7be4:	4817      	ldr	r0, [pc, #92]	; (7c44 <sync+0xcc>)
    7be6:	5421      	strb	r1, [r4, r0]
    7be8:	4917      	ldr	r1, [pc, #92]	; (7c48 <sync+0xd0>)
    7bea:	5462      	strb	r2, [r4, r1]
    7bec:	4a17      	ldr	r2, [pc, #92]	; (7c4c <sync+0xd4>)
    7bee:	54a3      	strb	r3, [r4, r2]
    7bf0:	6923      	ldr	r3, [r4, #16]
    7bf2:	3201      	adds	r2, #1
    7bf4:	54a3      	strb	r3, [r4, r2]
    7bf6:	0a19      	lsrs	r1, r3, #8
    7bf8:	4a15      	ldr	r2, [pc, #84]	; (7c50 <sync+0xd8>)
    7bfa:	54a1      	strb	r1, [r4, r2]
    7bfc:	0c19      	lsrs	r1, r3, #16
    7bfe:	4a15      	ldr	r2, [pc, #84]	; (7c54 <sync+0xdc>)
    7c00:	54a1      	strb	r1, [r4, r2]
    7c02:	0e1b      	lsrs	r3, r3, #24
    7c04:	4a14      	ldr	r2, [pc, #80]	; (7c58 <sync+0xe0>)
    7c06:	54a3      	strb	r3, [r4, r2]
    7c08:	68e3      	ldr	r3, [r4, #12]
    7c0a:	3201      	adds	r2, #1
    7c0c:	54a3      	strb	r3, [r4, r2]
    7c0e:	0a19      	lsrs	r1, r3, #8
    7c10:	4a12      	ldr	r2, [pc, #72]	; (7c5c <sync+0xe4>)
    7c12:	54a1      	strb	r1, [r4, r2]
    7c14:	0c19      	lsrs	r1, r3, #16
    7c16:	4a12      	ldr	r2, [pc, #72]	; (7c60 <sync+0xe8>)
    7c18:	54a1      	strb	r1, [r4, r2]
    7c1a:	0e1b      	lsrs	r3, r3, #24
    7c1c:	4a11      	ldr	r2, [pc, #68]	; (7c64 <sync+0xec>)
    7c1e:	54a3      	strb	r3, [r4, r2]
    7c20:	7860      	ldrb	r0, [r4, #1]
    7c22:	2301      	movs	r3, #1
    7c24:	6962      	ldr	r2, [r4, #20]
    7c26:	0029      	movs	r1, r5
    7c28:	4d0f      	ldr	r5, [pc, #60]	; (7c68 <sync+0xf0>)
    7c2a:	47a8      	blx	r5
    7c2c:	7166      	strb	r6, [r4, #5]
    7c2e:	e7ad      	b.n	7b8c <sync+0x14>
    7c30:	00007121 	.word	0x00007121
    7c34:	00006b85 	.word	0x00006b85
    7c38:	00006c55 	.word	0x00006c55
    7c3c:	0000022e 	.word	0x0000022e
    7c40:	0000022f 	.word	0x0000022f
    7c44:	00000215 	.word	0x00000215
    7c48:	00000216 	.word	0x00000216
    7c4c:	00000217 	.word	0x00000217
    7c50:	00000219 	.word	0x00000219
    7c54:	0000021a 	.word	0x0000021a
    7c58:	0000021b 	.word	0x0000021b
    7c5c:	0000021d 	.word	0x0000021d
    7c60:	0000021e 	.word	0x0000021e
    7c64:	0000021f 	.word	0x0000021f
    7c68:	00006b01 	.word	0x00006b01

00007c6c <follow_path>:
    7c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c6e:	46de      	mov	lr, fp
    7c70:	4657      	mov	r7, sl
    7c72:	464e      	mov	r6, r9
    7c74:	4645      	mov	r5, r8
    7c76:	b5e0      	push	{r5, r6, r7, lr}
    7c78:	b083      	sub	sp, #12
    7c7a:	4682      	mov	sl, r0
    7c7c:	000d      	movs	r5, r1
    7c7e:	780b      	ldrb	r3, [r1, #0]
    7c80:	2b2f      	cmp	r3, #47	; 0x2f
    7c82:	d00f      	beq.n	7ca4 <follow_path+0x38>
    7c84:	2b5c      	cmp	r3, #92	; 0x5c
    7c86:	d00d      	beq.n	7ca4 <follow_path+0x38>
    7c88:	2300      	movs	r3, #0
    7c8a:	4652      	mov	r2, sl
    7c8c:	6093      	str	r3, [r2, #8]
    7c8e:	782b      	ldrb	r3, [r5, #0]
    7c90:	4657      	mov	r7, sl
    7c92:	2b1f      	cmp	r3, #31
    7c94:	d809      	bhi.n	7caa <follow_path+0x3e>
    7c96:	2100      	movs	r1, #0
    7c98:	4650      	mov	r0, sl
    7c9a:	4bb2      	ldr	r3, [pc, #712]	; (7f64 <follow_path+0x2f8>)
    7c9c:	4798      	blx	r3
    7c9e:	2300      	movs	r3, #0
    7ca0:	617b      	str	r3, [r7, #20]
    7ca2:	e13a      	b.n	7f1a <follow_path+0x2ae>
    7ca4:	3501      	adds	r5, #1
    7ca6:	e7ef      	b.n	7c88 <follow_path+0x1c>
    7ca8:	3501      	adds	r5, #1
    7caa:	7828      	ldrb	r0, [r5, #0]
    7cac:	282f      	cmp	r0, #47	; 0x2f
    7cae:	d0fb      	beq.n	7ca8 <follow_path+0x3c>
    7cb0:	285c      	cmp	r0, #92	; 0x5c
    7cb2:	d0f9      	beq.n	7ca8 <follow_path+0x3c>
    7cb4:	69fb      	ldr	r3, [r7, #28]
    7cb6:	469a      	mov	sl, r3
    7cb8:	b280      	uxth	r0, r0
    7cba:	281f      	cmp	r0, #31
    7cbc:	d800      	bhi.n	7cc0 <follow_path+0x54>
    7cbe:	e13b      	b.n	7f38 <follow_path+0x2cc>
    7cc0:	282f      	cmp	r0, #47	; 0x2f
    7cc2:	d100      	bne.n	7cc6 <follow_path+0x5a>
    7cc4:	e13b      	b.n	7f3e <follow_path+0x2d2>
    7cc6:	285c      	cmp	r0, #92	; 0x5c
    7cc8:	d100      	bne.n	7ccc <follow_path+0x60>
    7cca:	e13b      	b.n	7f44 <follow_path+0x2d8>
    7ccc:	1c6e      	adds	r6, r5, #1
    7cce:	2401      	movs	r4, #1
    7cd0:	2380      	movs	r3, #128	; 0x80
    7cd2:	005b      	lsls	r3, r3, #1
    7cd4:	4698      	mov	r8, r3
    7cd6:	46bb      	mov	fp, r7
    7cd8:	002b      	movs	r3, r5
    7cda:	0025      	movs	r5, r4
    7cdc:	0034      	movs	r4, r6
    7cde:	4656      	mov	r6, sl
    7ce0:	4699      	mov	r9, r3
    7ce2:	e011      	b.n	7d08 <follow_path+0x9c>
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	d135      	bne.n	7d54 <follow_path+0xe8>
    7ce8:	8030      	strh	r0, [r6, #0]
    7cea:	1c6b      	adds	r3, r5, #1
    7cec:	7820      	ldrb	r0, [r4, #0]
    7cee:	281f      	cmp	r0, #31
    7cf0:	d91e      	bls.n	7d30 <follow_path+0xc4>
    7cf2:	282f      	cmp	r0, #47	; 0x2f
    7cf4:	d100      	bne.n	7cf8 <follow_path+0x8c>
    7cf6:	e128      	b.n	7f4a <follow_path+0x2de>
    7cf8:	285c      	cmp	r0, #92	; 0x5c
    7cfa:	d100      	bne.n	7cfe <follow_path+0x92>
    7cfc:	e142      	b.n	7f84 <follow_path+0x318>
    7cfe:	3602      	adds	r6, #2
    7d00:	3401      	adds	r4, #1
    7d02:	4543      	cmp	r3, r8
    7d04:	d026      	beq.n	7d54 <follow_path+0xe8>
    7d06:	001d      	movs	r5, r3
    7d08:	2101      	movs	r1, #1
    7d0a:	4b97      	ldr	r3, [pc, #604]	; (7f68 <follow_path+0x2fc>)
    7d0c:	4798      	blx	r3
    7d0e:	1e01      	subs	r1, r0, #0
    7d10:	d020      	beq.n	7d54 <follow_path+0xe8>
    7d12:	287f      	cmp	r0, #127	; 0x7f
    7d14:	d8e8      	bhi.n	7ce8 <follow_path+0x7c>
    7d16:	2822      	cmp	r0, #34	; 0x22
    7d18:	d100      	bne.n	7d1c <follow_path+0xb0>
    7d1a:	e0fd      	b.n	7f18 <follow_path+0x2ac>
    7d1c:	232a      	movs	r3, #42	; 0x2a
    7d1e:	4a93      	ldr	r2, [pc, #588]	; (7f6c <follow_path+0x300>)
    7d20:	b29f      	uxth	r7, r3
    7d22:	428f      	cmp	r7, r1
    7d24:	d0de      	beq.n	7ce4 <follow_path+0x78>
    7d26:	3201      	adds	r2, #1
    7d28:	7813      	ldrb	r3, [r2, #0]
    7d2a:	2b00      	cmp	r3, #0
    7d2c:	d1f8      	bne.n	7d20 <follow_path+0xb4>
    7d2e:	e7db      	b.n	7ce8 <follow_path+0x7c>
    7d30:	002c      	movs	r4, r5
    7d32:	465f      	mov	r7, fp
    7d34:	464d      	mov	r5, r9
    7d36:	18ed      	adds	r5, r5, r3
    7d38:	2604      	movs	r6, #4
    7d3a:	e10b      	b.n	7f54 <follow_path+0x2e8>
    7d3c:	3c01      	subs	r4, #1
    7d3e:	3b02      	subs	r3, #2
    7d40:	2c00      	cmp	r4, #0
    7d42:	d100      	bne.n	7d46 <follow_path+0xda>
    7d44:	e0e8      	b.n	7f18 <follow_path+0x2ac>
    7d46:	881a      	ldrh	r2, [r3, #0]
    7d48:	2a20      	cmp	r2, #32
    7d4a:	d0f7      	beq.n	7d3c <follow_path+0xd0>
    7d4c:	2a2e      	cmp	r2, #46	; 0x2e
    7d4e:	d0f5      	beq.n	7d3c <follow_path+0xd0>
    7d50:	2c00      	cmp	r4, #0
    7d52:	d101      	bne.n	7d58 <follow_path+0xec>
    7d54:	2006      	movs	r0, #6
    7d56:	e0e0      	b.n	7f1a <follow_path+0x2ae>
    7d58:	0063      	lsls	r3, r4, #1
    7d5a:	4698      	mov	r8, r3
    7d5c:	2300      	movs	r3, #0
    7d5e:	4652      	mov	r2, sl
    7d60:	4641      	mov	r1, r8
    7d62:	5253      	strh	r3, [r2, r1]
    7d64:	220b      	movs	r2, #11
    7d66:	2120      	movs	r1, #32
    7d68:	69b8      	ldr	r0, [r7, #24]
    7d6a:	4b81      	ldr	r3, [pc, #516]	; (7f70 <follow_path+0x304>)
    7d6c:	4798      	blx	r3
    7d6e:	4652      	mov	r2, sl
    7d70:	2300      	movs	r3, #0
    7d72:	e001      	b.n	7d78 <follow_path+0x10c>
    7d74:	3301      	adds	r3, #1
    7d76:	3202      	adds	r2, #2
    7d78:	8811      	ldrh	r1, [r2, #0]
    7d7a:	2920      	cmp	r1, #32
    7d7c:	d0fa      	beq.n	7d74 <follow_path+0x108>
    7d7e:	292e      	cmp	r1, #46	; 0x2e
    7d80:	d0f8      	beq.n	7d74 <follow_path+0x108>
    7d82:	2b00      	cmp	r3, #0
    7d84:	d001      	beq.n	7d8a <follow_path+0x11e>
    7d86:	2203      	movs	r2, #3
    7d88:	4316      	orrs	r6, r2
    7d8a:	4652      	mov	r2, sl
    7d8c:	4442      	add	r2, r8
    7d8e:	3a02      	subs	r2, #2
    7d90:	8812      	ldrh	r2, [r2, #0]
    7d92:	2a2e      	cmp	r2, #46	; 0x2e
    7d94:	d009      	beq.n	7daa <follow_path+0x13e>
    7d96:	4642      	mov	r2, r8
    7d98:	3a04      	subs	r2, #4
    7d9a:	4452      	add	r2, sl
    7d9c:	3c01      	subs	r4, #1
    7d9e:	2c00      	cmp	r4, #0
    7da0:	d003      	beq.n	7daa <follow_path+0x13e>
    7da2:	3a02      	subs	r2, #2
    7da4:	8851      	ldrh	r1, [r2, #2]
    7da6:	292e      	cmp	r1, #46	; 0x2e
    7da8:	d1f8      	bne.n	7d9c <follow_path+0x130>
    7daa:	2208      	movs	r2, #8
    7dac:	9201      	str	r2, [sp, #4]
    7dae:	2200      	movs	r2, #0
    7db0:	4693      	mov	fp, r2
    7db2:	4691      	mov	r9, r2
    7db4:	46a0      	mov	r8, r4
    7db6:	e006      	b.n	7dc6 <follow_path+0x15a>
    7db8:	4544      	cmp	r4, r8
    7dba:	d100      	bne.n	7dbe <follow_path+0x152>
    7dbc:	e0e6      	b.n	7f8c <follow_path+0x320>
    7dbe:	2303      	movs	r3, #3
    7dc0:	431e      	orrs	r6, r3
    7dc2:	b2f6      	uxtb	r6, r6
    7dc4:	0023      	movs	r3, r4
    7dc6:	1c5c      	adds	r4, r3, #1
    7dc8:	005b      	lsls	r3, r3, #1
    7dca:	4652      	mov	r2, sl
    7dcc:	5a98      	ldrh	r0, [r3, r2]
    7dce:	2800      	cmp	r0, #0
    7dd0:	d02c      	beq.n	7e2c <follow_path+0x1c0>
    7dd2:	2820      	cmp	r0, #32
    7dd4:	d0f3      	beq.n	7dbe <follow_path+0x152>
    7dd6:	282e      	cmp	r0, #46	; 0x2e
    7dd8:	d0ee      	beq.n	7db8 <follow_path+0x14c>
    7dda:	9b01      	ldr	r3, [sp, #4]
    7ddc:	459b      	cmp	fp, r3
    7dde:	d219      	bcs.n	7e14 <follow_path+0x1a8>
    7de0:	4544      	cmp	r4, r8
    7de2:	d100      	bne.n	7de6 <follow_path+0x17a>
    7de4:	e0d2      	b.n	7f8c <follow_path+0x320>
    7de6:	287f      	cmp	r0, #127	; 0x7f
    7de8:	d85e      	bhi.n	7ea8 <follow_path+0x23c>
    7dea:	282b      	cmp	r0, #43	; 0x2b
    7dec:	d06e      	beq.n	7ecc <follow_path+0x260>
    7dee:	232c      	movs	r3, #44	; 0x2c
    7df0:	4a60      	ldr	r2, [pc, #384]	; (7f74 <follow_path+0x308>)
    7df2:	b299      	uxth	r1, r3
    7df4:	4281      	cmp	r1, r0
    7df6:	d067      	beq.n	7ec8 <follow_path+0x25c>
    7df8:	3201      	adds	r2, #1
    7dfa:	7813      	ldrb	r3, [r2, #0]
    7dfc:	2b00      	cmp	r3, #0
    7dfe:	d1f8      	bne.n	7df2 <follow_path+0x186>
    7e00:	0003      	movs	r3, r0
    7e02:	3b41      	subs	r3, #65	; 0x41
    7e04:	b29b      	uxth	r3, r3
    7e06:	2b19      	cmp	r3, #25
    7e08:	d86c      	bhi.n	7ee4 <follow_path+0x278>
    7e0a:	2302      	movs	r3, #2
    7e0c:	464a      	mov	r2, r9
    7e0e:	431a      	orrs	r2, r3
    7e10:	4691      	mov	r9, r2
    7e12:	e05f      	b.n	7ed4 <follow_path+0x268>
    7e14:	9b01      	ldr	r3, [sp, #4]
    7e16:	2b0b      	cmp	r3, #11
    7e18:	d03b      	beq.n	7e92 <follow_path+0x226>
    7e1a:	4544      	cmp	r4, r8
    7e1c:	d100      	bne.n	7e20 <follow_path+0x1b4>
    7e1e:	e0b9      	b.n	7f94 <follow_path+0x328>
    7e20:	2303      	movs	r3, #3
    7e22:	431e      	orrs	r6, r3
    7e24:	b2f6      	uxtb	r6, r6
    7e26:	4544      	cmp	r4, r8
    7e28:	d800      	bhi.n	7e2c <follow_path+0x1c0>
    7e2a:	e0b3      	b.n	7f94 <follow_path+0x328>
    7e2c:	69bb      	ldr	r3, [r7, #24]
    7e2e:	781a      	ldrb	r2, [r3, #0]
    7e30:	2ae5      	cmp	r2, #229	; 0xe5
    7e32:	d036      	beq.n	7ea2 <follow_path+0x236>
    7e34:	9b01      	ldr	r3, [sp, #4]
    7e36:	2b08      	cmp	r3, #8
    7e38:	d060      	beq.n	7efc <follow_path+0x290>
    7e3a:	230c      	movs	r3, #12
    7e3c:	464a      	mov	r2, r9
    7e3e:	4013      	ands	r3, r2
    7e40:	2b0c      	cmp	r3, #12
    7e42:	d060      	beq.n	7f06 <follow_path+0x29a>
    7e44:	43d2      	mvns	r2, r2
    7e46:	0792      	lsls	r2, r2, #30
    7e48:	d05d      	beq.n	7f06 <follow_path+0x29a>
    7e4a:	07b2      	lsls	r2, r6, #30
    7e4c:	d406      	bmi.n	7e5c <follow_path+0x1f0>
    7e4e:	2203      	movs	r2, #3
    7e50:	4649      	mov	r1, r9
    7e52:	400a      	ands	r2, r1
    7e54:	2a01      	cmp	r2, #1
    7e56:	d059      	beq.n	7f0c <follow_path+0x2a0>
    7e58:	2b04      	cmp	r3, #4
    7e5a:	d05a      	beq.n	7f12 <follow_path+0x2a6>
    7e5c:	69bb      	ldr	r3, [r7, #24]
    7e5e:	72de      	strb	r6, [r3, #11]
    7e60:	0038      	movs	r0, r7
    7e62:	4b45      	ldr	r3, [pc, #276]	; (7f78 <follow_path+0x30c>)
    7e64:	4798      	blx	r3
    7e66:	69bb      	ldr	r3, [r7, #24]
    7e68:	7adb      	ldrb	r3, [r3, #11]
    7e6a:	2800      	cmp	r0, #0
    7e6c:	d15c      	bne.n	7f28 <follow_path+0x2bc>
    7e6e:	075b      	lsls	r3, r3, #29
    7e70:	d453      	bmi.n	7f1a <follow_path+0x2ae>
    7e72:	697a      	ldr	r2, [r7, #20]
    7e74:	7ad3      	ldrb	r3, [r2, #11]
    7e76:	06db      	lsls	r3, r3, #27
    7e78:	d55c      	bpl.n	7f34 <follow_path+0x2c8>
    7e7a:	7d51      	ldrb	r1, [r2, #21]
    7e7c:	0209      	lsls	r1, r1, #8
    7e7e:	7d13      	ldrb	r3, [r2, #20]
    7e80:	430b      	orrs	r3, r1
    7e82:	041b      	lsls	r3, r3, #16
    7e84:	7ed1      	ldrb	r1, [r2, #27]
    7e86:	0209      	lsls	r1, r1, #8
    7e88:	7e92      	ldrb	r2, [r2, #26]
    7e8a:	430a      	orrs	r2, r1
    7e8c:	4313      	orrs	r3, r2
    7e8e:	60bb      	str	r3, [r7, #8]
    7e90:	e70b      	b.n	7caa <follow_path+0x3e>
    7e92:	2303      	movs	r3, #3
    7e94:	431e      	orrs	r6, r3
    7e96:	69bb      	ldr	r3, [r7, #24]
    7e98:	781a      	ldrb	r2, [r3, #0]
    7e9a:	2ae5      	cmp	r2, #229	; 0xe5
    7e9c:	d1cd      	bne.n	7e3a <follow_path+0x1ce>
    7e9e:	220b      	movs	r2, #11
    7ea0:	9201      	str	r2, [sp, #4]
    7ea2:	2205      	movs	r2, #5
    7ea4:	701a      	strb	r2, [r3, #0]
    7ea6:	e7c5      	b.n	7e34 <follow_path+0x1c8>
    7ea8:	2100      	movs	r1, #0
    7eaa:	4b2f      	ldr	r3, [pc, #188]	; (7f68 <follow_path+0x2fc>)
    7eac:	4798      	blx	r3
    7eae:	2800      	cmp	r0, #0
    7eb0:	d100      	bne.n	7eb4 <follow_path+0x248>
    7eb2:	e079      	b.n	7fa8 <follow_path+0x33c>
    7eb4:	4b31      	ldr	r3, [pc, #196]	; (7f7c <follow_path+0x310>)
    7eb6:	469c      	mov	ip, r3
    7eb8:	4460      	add	r0, ip
    7eba:	3880      	subs	r0, #128	; 0x80
    7ebc:	7800      	ldrb	r0, [r0, #0]
    7ebe:	2302      	movs	r3, #2
    7ec0:	431e      	orrs	r6, r3
    7ec2:	2800      	cmp	r0, #0
    7ec4:	d002      	beq.n	7ecc <follow_path+0x260>
    7ec6:	e790      	b.n	7dea <follow_path+0x17e>
    7ec8:	2b00      	cmp	r3, #0
    7eca:	d099      	beq.n	7e00 <follow_path+0x194>
    7ecc:	2303      	movs	r3, #3
    7ece:	431e      	orrs	r6, r3
    7ed0:	b2f6      	uxtb	r6, r6
    7ed2:	205f      	movs	r0, #95	; 0x5f
    7ed4:	69bb      	ldr	r3, [r7, #24]
    7ed6:	465a      	mov	r2, fp
    7ed8:	5498      	strb	r0, [r3, r2]
    7eda:	0023      	movs	r3, r4
    7edc:	2201      	movs	r2, #1
    7ede:	4694      	mov	ip, r2
    7ee0:	44e3      	add	fp, ip
    7ee2:	e770      	b.n	7dc6 <follow_path+0x15a>
    7ee4:	0003      	movs	r3, r0
    7ee6:	3b61      	subs	r3, #97	; 0x61
    7ee8:	b29b      	uxth	r3, r3
    7eea:	2b19      	cmp	r3, #25
    7eec:	d8f2      	bhi.n	7ed4 <follow_path+0x268>
    7eee:	2301      	movs	r3, #1
    7ef0:	464a      	mov	r2, r9
    7ef2:	431a      	orrs	r2, r3
    7ef4:	4691      	mov	r9, r2
    7ef6:	3820      	subs	r0, #32
    7ef8:	b280      	uxth	r0, r0
    7efa:	e7eb      	b.n	7ed4 <follow_path+0x268>
    7efc:	464b      	mov	r3, r9
    7efe:	009b      	lsls	r3, r3, #2
    7f00:	b2db      	uxtb	r3, r3
    7f02:	4699      	mov	r9, r3
    7f04:	e799      	b.n	7e3a <follow_path+0x1ce>
    7f06:	2202      	movs	r2, #2
    7f08:	4316      	orrs	r6, r2
    7f0a:	e79e      	b.n	7e4a <follow_path+0x1de>
    7f0c:	320f      	adds	r2, #15
    7f0e:	4316      	orrs	r6, r2
    7f10:	e7a2      	b.n	7e58 <follow_path+0x1ec>
    7f12:	3304      	adds	r3, #4
    7f14:	431e      	orrs	r6, r3
    7f16:	e7a1      	b.n	7e5c <follow_path+0x1f0>
    7f18:	2006      	movs	r0, #6
    7f1a:	b003      	add	sp, #12
    7f1c:	bc3c      	pop	{r2, r3, r4, r5}
    7f1e:	4690      	mov	r8, r2
    7f20:	4699      	mov	r9, r3
    7f22:	46a2      	mov	sl, r4
    7f24:	46ab      	mov	fp, r5
    7f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f28:	2804      	cmp	r0, #4
    7f2a:	d1f6      	bne.n	7f1a <follow_path+0x2ae>
    7f2c:	075b      	lsls	r3, r3, #29
    7f2e:	d4f4      	bmi.n	7f1a <follow_path+0x2ae>
    7f30:	3001      	adds	r0, #1
    7f32:	e7f2      	b.n	7f1a <follow_path+0x2ae>
    7f34:	2005      	movs	r0, #5
    7f36:	e7f0      	b.n	7f1a <follow_path+0x2ae>
    7f38:	2301      	movs	r3, #1
    7f3a:	2400      	movs	r4, #0
    7f3c:	e6fb      	b.n	7d36 <follow_path+0xca>
    7f3e:	2301      	movs	r3, #1
    7f40:	2400      	movs	r4, #0
    7f42:	e005      	b.n	7f50 <follow_path+0x2e4>
    7f44:	2301      	movs	r3, #1
    7f46:	2400      	movs	r4, #0
    7f48:	e002      	b.n	7f50 <follow_path+0x2e4>
    7f4a:	002c      	movs	r4, r5
    7f4c:	465f      	mov	r7, fp
    7f4e:	464d      	mov	r5, r9
    7f50:	18ed      	adds	r5, r5, r3
    7f52:	2600      	movs	r6, #0
    7f54:	2c00      	cmp	r4, #0
    7f56:	d0df      	beq.n	7f18 <follow_path+0x2ac>
    7f58:	4b09      	ldr	r3, [pc, #36]	; (7f80 <follow_path+0x314>)
    7f5a:	18e3      	adds	r3, r4, r3
    7f5c:	005b      	lsls	r3, r3, #1
    7f5e:	4453      	add	r3, sl
    7f60:	e6f1      	b.n	7d46 <follow_path+0xda>
    7f62:	46c0      	nop			; (mov r8, r8)
    7f64:	000072bd 	.word	0x000072bd
    7f68:	00008445 	.word	0x00008445
    7f6c:	0000e475 	.word	0x0000e475
    7f70:	00006c55 	.word	0x00006c55
    7f74:	0000e481 	.word	0x0000e481
    7f78:	000076fd 	.word	0x000076fd
    7f7c:	0000e3f4 	.word	0x0000e3f4
    7f80:	7fffffff 	.word	0x7fffffff
    7f84:	002c      	movs	r4, r5
    7f86:	465f      	mov	r7, fp
    7f88:	464d      	mov	r5, r9
    7f8a:	e7e1      	b.n	7f50 <follow_path+0x2e4>
    7f8c:	9b01      	ldr	r3, [sp, #4]
    7f8e:	2b0b      	cmp	r3, #11
    7f90:	d100      	bne.n	7f94 <follow_path+0x328>
    7f92:	e77e      	b.n	7e92 <follow_path+0x226>
    7f94:	464b      	mov	r3, r9
    7f96:	009b      	lsls	r3, r3, #2
    7f98:	b2db      	uxtb	r3, r3
    7f9a:	4699      	mov	r9, r3
    7f9c:	4643      	mov	r3, r8
    7f9e:	220b      	movs	r2, #11
    7fa0:	9201      	str	r2, [sp, #4]
    7fa2:	3a03      	subs	r2, #3
    7fa4:	4693      	mov	fp, r2
    7fa6:	e70e      	b.n	7dc6 <follow_path+0x15a>
    7fa8:	2302      	movs	r3, #2
    7faa:	431e      	orrs	r6, r3
    7fac:	e78e      	b.n	7ecc <follow_path+0x260>
    7fae:	46c0      	nop			; (mov r8, r8)

00007fb0 <f_mount>:
    7fb0:	230b      	movs	r3, #11
    7fb2:	2807      	cmp	r0, #7
    7fb4:	d901      	bls.n	7fba <f_mount+0xa>
    7fb6:	0018      	movs	r0, r3
    7fb8:	4770      	bx	lr
    7fba:	0083      	lsls	r3, r0, #2
    7fbc:	4a07      	ldr	r2, [pc, #28]	; (7fdc <f_mount+0x2c>)
    7fbe:	589b      	ldr	r3, [r3, r2]
    7fc0:	2b00      	cmp	r3, #0
    7fc2:	d001      	beq.n	7fc8 <f_mount+0x18>
    7fc4:	2200      	movs	r2, #0
    7fc6:	701a      	strb	r2, [r3, #0]
    7fc8:	2900      	cmp	r1, #0
    7fca:	d001      	beq.n	7fd0 <f_mount+0x20>
    7fcc:	2300      	movs	r3, #0
    7fce:	700b      	strb	r3, [r1, #0]
    7fd0:	0080      	lsls	r0, r0, #2
    7fd2:	4b02      	ldr	r3, [pc, #8]	; (7fdc <f_mount+0x2c>)
    7fd4:	50c1      	str	r1, [r0, r3]
    7fd6:	2300      	movs	r3, #0
    7fd8:	e7ed      	b.n	7fb6 <f_mount+0x6>
    7fda:	46c0      	nop			; (mov r8, r8)
    7fdc:	20000418 	.word	0x20000418

00007fe0 <f_open>:
    7fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7fe2:	46c6      	mov	lr, r8
    7fe4:	b500      	push	{lr}
    7fe6:	4c59      	ldr	r4, [pc, #356]	; (814c <f_open+0x16c>)
    7fe8:	44a5      	add	sp, r4
    7fea:	0005      	movs	r5, r0
    7fec:	9101      	str	r1, [sp, #4]
    7fee:	0017      	movs	r7, r2
    7ff0:	2300      	movs	r3, #0
    7ff2:	6003      	str	r3, [r0, #0]
    7ff4:	261f      	movs	r6, #31
    7ff6:	4016      	ands	r6, r2
    7ff8:	221e      	movs	r2, #30
    7ffa:	403a      	ands	r2, r7
    7ffc:	a985      	add	r1, sp, #532	; 0x214
    7ffe:	a801      	add	r0, sp, #4
    8000:	4b53      	ldr	r3, [pc, #332]	; (8150 <f_open+0x170>)
    8002:	4798      	blx	r3
    8004:	ab82      	add	r3, sp, #520	; 0x208
    8006:	938b      	str	r3, [sp, #556]	; 0x22c
    8008:	ab02      	add	r3, sp, #8
    800a:	938c      	str	r3, [sp, #560]	; 0x230
    800c:	2800      	cmp	r0, #0
    800e:	d006      	beq.n	801e <f_open+0x3e>
    8010:	9c8a      	ldr	r4, [sp, #552]	; 0x228
    8012:	231c      	movs	r3, #28
    8014:	423b      	tst	r3, r7
    8016:	d145      	bne.n	80a4 <f_open+0xc4>
    8018:	2800      	cmp	r0, #0
    801a:	d13d      	bne.n	8098 <f_open+0xb8>
    801c:	e00c      	b.n	8038 <f_open+0x58>
    801e:	9901      	ldr	r1, [sp, #4]
    8020:	a885      	add	r0, sp, #532	; 0x214
    8022:	4b4c      	ldr	r3, [pc, #304]	; (8154 <f_open+0x174>)
    8024:	4798      	blx	r3
    8026:	9c8a      	ldr	r4, [sp, #552]	; 0x228
    8028:	2800      	cmp	r0, #0
    802a:	d1f2      	bne.n	8012 <f_open+0x32>
    802c:	2c00      	cmp	r4, #0
    802e:	d100      	bne.n	8032 <f_open+0x52>
    8030:	e086      	b.n	8140 <f_open+0x160>
    8032:	231c      	movs	r3, #28
    8034:	423b      	tst	r3, r7
    8036:	d146      	bne.n	80c6 <f_open+0xe6>
    8038:	7ae3      	ldrb	r3, [r4, #11]
    803a:	2004      	movs	r0, #4
    803c:	06da      	lsls	r2, r3, #27
    803e:	d42b      	bmi.n	8098 <f_open+0xb8>
    8040:	07ba      	lsls	r2, r7, #30
    8042:	d502      	bpl.n	804a <f_open+0x6a>
    8044:	3003      	adds	r0, #3
    8046:	07db      	lsls	r3, r3, #31
    8048:	d426      	bmi.n	8098 <f_open+0xb8>
    804a:	073b      	lsls	r3, r7, #28
    804c:	d501      	bpl.n	8052 <f_open+0x72>
    804e:	2320      	movs	r3, #32
    8050:	431e      	orrs	r6, r3
    8052:	9b85      	ldr	r3, [sp, #532]	; 0x214
    8054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8056:	61eb      	str	r3, [r5, #28]
    8058:	622c      	str	r4, [r5, #32]
    805a:	71ae      	strb	r6, [r5, #6]
    805c:	7d62      	ldrb	r2, [r4, #21]
    805e:	0212      	lsls	r2, r2, #8
    8060:	7d23      	ldrb	r3, [r4, #20]
    8062:	4313      	orrs	r3, r2
    8064:	041b      	lsls	r3, r3, #16
    8066:	7ee1      	ldrb	r1, [r4, #27]
    8068:	0209      	lsls	r1, r1, #8
    806a:	7ea2      	ldrb	r2, [r4, #26]
    806c:	430a      	orrs	r2, r1
    806e:	4313      	orrs	r3, r2
    8070:	612b      	str	r3, [r5, #16]
    8072:	7fe3      	ldrb	r3, [r4, #31]
    8074:	061b      	lsls	r3, r3, #24
    8076:	7fa2      	ldrb	r2, [r4, #30]
    8078:	0412      	lsls	r2, r2, #16
    807a:	4313      	orrs	r3, r2
    807c:	7f22      	ldrb	r2, [r4, #28]
    807e:	4313      	orrs	r3, r2
    8080:	7f62      	ldrb	r2, [r4, #29]
    8082:	0212      	lsls	r2, r2, #8
    8084:	4313      	orrs	r3, r2
    8086:	60eb      	str	r3, [r5, #12]
    8088:	2300      	movs	r3, #0
    808a:	60ab      	str	r3, [r5, #8]
    808c:	61ab      	str	r3, [r5, #24]
    808e:	9b85      	ldr	r3, [sp, #532]	; 0x214
    8090:	602b      	str	r3, [r5, #0]
    8092:	88db      	ldrh	r3, [r3, #6]
    8094:	80ab      	strh	r3, [r5, #4]
    8096:	2000      	movs	r0, #0
    8098:	238e      	movs	r3, #142	; 0x8e
    809a:	009b      	lsls	r3, r3, #2
    809c:	449d      	add	sp, r3
    809e:	bc04      	pop	{r2}
    80a0:	4690      	mov	r8, r2
    80a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80a4:	2804      	cmp	r0, #4
    80a6:	d005      	beq.n	80b4 <f_open+0xd4>
    80a8:	2308      	movs	r3, #8
    80aa:	431e      	orrs	r6, r3
    80ac:	9c8a      	ldr	r4, [sp, #552]	; 0x228
    80ae:	2800      	cmp	r0, #0
    80b0:	d0d3      	beq.n	805a <f_open+0x7a>
    80b2:	e7f1      	b.n	8098 <f_open+0xb8>
    80b4:	a885      	add	r0, sp, #532	; 0x214
    80b6:	4b28      	ldr	r3, [pc, #160]	; (8158 <f_open+0x178>)
    80b8:	4798      	blx	r3
    80ba:	2308      	movs	r3, #8
    80bc:	431e      	orrs	r6, r3
    80be:	9c8a      	ldr	r4, [sp, #552]	; 0x228
    80c0:	2800      	cmp	r0, #0
    80c2:	d008      	beq.n	80d6 <f_open+0xf6>
    80c4:	e7e8      	b.n	8098 <f_open+0xb8>
    80c6:	7ae3      	ldrb	r3, [r4, #11]
    80c8:	2211      	movs	r2, #17
    80ca:	2007      	movs	r0, #7
    80cc:	421a      	tst	r2, r3
    80ce:	d1e3      	bne.n	8098 <f_open+0xb8>
    80d0:	3001      	adds	r0, #1
    80d2:	077b      	lsls	r3, r7, #29
    80d4:	d4e0      	bmi.n	8098 <f_open+0xb8>
    80d6:	0733      	lsls	r3, r6, #28
    80d8:	d5bb      	bpl.n	8052 <f_open+0x72>
    80da:	4b20      	ldr	r3, [pc, #128]	; (815c <f_open+0x17c>)
    80dc:	4798      	blx	r3
    80de:	73a0      	strb	r0, [r4, #14]
    80e0:	0a03      	lsrs	r3, r0, #8
    80e2:	73e3      	strb	r3, [r4, #15]
    80e4:	0c03      	lsrs	r3, r0, #16
    80e6:	7423      	strb	r3, [r4, #16]
    80e8:	0e00      	lsrs	r0, r0, #24
    80ea:	7460      	strb	r0, [r4, #17]
    80ec:	2300      	movs	r3, #0
    80ee:	72e3      	strb	r3, [r4, #11]
    80f0:	7723      	strb	r3, [r4, #28]
    80f2:	7763      	strb	r3, [r4, #29]
    80f4:	77a3      	strb	r3, [r4, #30]
    80f6:	77e3      	strb	r3, [r4, #31]
    80f8:	7d62      	ldrb	r2, [r4, #21]
    80fa:	0212      	lsls	r2, r2, #8
    80fc:	7d27      	ldrb	r7, [r4, #20]
    80fe:	4317      	orrs	r7, r2
    8100:	043f      	lsls	r7, r7, #16
    8102:	7ee1      	ldrb	r1, [r4, #27]
    8104:	0209      	lsls	r1, r1, #8
    8106:	7ea2      	ldrb	r2, [r4, #26]
    8108:	430a      	orrs	r2, r1
    810a:	4317      	orrs	r7, r2
    810c:	76a3      	strb	r3, [r4, #26]
    810e:	76e3      	strb	r3, [r4, #27]
    8110:	7523      	strb	r3, [r4, #20]
    8112:	7563      	strb	r3, [r4, #21]
    8114:	9885      	ldr	r0, [sp, #532]	; 0x214
    8116:	3301      	adds	r3, #1
    8118:	7103      	strb	r3, [r0, #4]
    811a:	2f00      	cmp	r7, #0
    811c:	d097      	beq.n	804e <f_open+0x6e>
    811e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    8120:	4698      	mov	r8, r3
    8122:	0039      	movs	r1, r7
    8124:	4b0e      	ldr	r3, [pc, #56]	; (8160 <f_open+0x180>)
    8126:	4798      	blx	r3
    8128:	2800      	cmp	r0, #0
    812a:	d1b5      	bne.n	8098 <f_open+0xb8>
    812c:	9885      	ldr	r0, [sp, #532]	; 0x214
    812e:	3f01      	subs	r7, #1
    8130:	60c7      	str	r7, [r0, #12]
    8132:	4641      	mov	r1, r8
    8134:	4b0b      	ldr	r3, [pc, #44]	; (8164 <f_open+0x184>)
    8136:	4798      	blx	r3
    8138:	2800      	cmp	r0, #0
    813a:	d100      	bne.n	813e <f_open+0x15e>
    813c:	e787      	b.n	804e <f_open+0x6e>
    813e:	e7ab      	b.n	8098 <f_open+0xb8>
    8140:	231c      	movs	r3, #28
    8142:	2006      	movs	r0, #6
    8144:	423b      	tst	r3, r7
    8146:	d0b2      	beq.n	80ae <f_open+0xce>
    8148:	2006      	movs	r0, #6
    814a:	e7ad      	b.n	80a8 <f_open+0xc8>
    814c:	fffffdc8 	.word	0xfffffdc8
    8150:	00006d71 	.word	0x00006d71
    8154:	00007c6d 	.word	0x00007c6d
    8158:	00007895 	.word	0x00007895
    815c:	00006bf1 	.word	0x00006bf1
    8160:	00007561 	.word	0x00007561
    8164:	00007121 	.word	0x00007121

00008168 <f_write>:
    8168:	b5f0      	push	{r4, r5, r6, r7, lr}
    816a:	46de      	mov	lr, fp
    816c:	4657      	mov	r7, sl
    816e:	464e      	mov	r6, r9
    8170:	4645      	mov	r5, r8
    8172:	b5e0      	push	{r5, r6, r7, lr}
    8174:	b083      	sub	sp, #12
    8176:	0004      	movs	r4, r0
    8178:	000d      	movs	r5, r1
    817a:	0016      	movs	r6, r2
    817c:	4699      	mov	r9, r3
    817e:	2300      	movs	r3, #0
    8180:	464a      	mov	r2, r9
    8182:	6013      	str	r3, [r2, #0]
    8184:	8881      	ldrh	r1, [r0, #4]
    8186:	6800      	ldr	r0, [r0, #0]
    8188:	4b7f      	ldr	r3, [pc, #508]	; (8388 <f_write+0x220>)
    818a:	4798      	blx	r3
    818c:	9000      	str	r0, [sp, #0]
    818e:	2800      	cmp	r0, #0
    8190:	d000      	beq.n	8194 <f_write+0x2c>
    8192:	e0f1      	b.n	8378 <f_write+0x210>
    8194:	79a3      	ldrb	r3, [r4, #6]
    8196:	b25a      	sxtb	r2, r3
    8198:	2a00      	cmp	r2, #0
    819a:	da00      	bge.n	819e <f_write+0x36>
    819c:	e0ea      	b.n	8374 <f_write+0x20c>
    819e:	079b      	lsls	r3, r3, #30
    81a0:	d402      	bmi.n	81a8 <f_write+0x40>
    81a2:	2307      	movs	r3, #7
    81a4:	9300      	str	r3, [sp, #0]
    81a6:	e0e7      	b.n	8378 <f_write+0x210>
    81a8:	68e3      	ldr	r3, [r4, #12]
    81aa:	199a      	adds	r2, r3, r6
    81ac:	4293      	cmp	r3, r2
    81ae:	d810      	bhi.n	81d2 <f_write+0x6a>
    81b0:	2e00      	cmp	r6, #0
    81b2:	d00e      	beq.n	81d2 <f_write+0x6a>
    81b4:	002f      	movs	r7, r5
    81b6:	e07b      	b.n	82b0 <f_write+0x148>
    81b8:	2100      	movs	r1, #0
    81ba:	4b74      	ldr	r3, [pc, #464]	; (838c <f_write+0x224>)
    81bc:	4798      	blx	r3
    81be:	0003      	movs	r3, r0
    81c0:	6120      	str	r0, [r4, #16]
    81c2:	e003      	b.n	81cc <f_write+0x64>
    81c4:	6961      	ldr	r1, [r4, #20]
    81c6:	4b71      	ldr	r3, [pc, #452]	; (838c <f_write+0x224>)
    81c8:	4798      	blx	r3
    81ca:	0003      	movs	r3, r0
    81cc:	2b00      	cmp	r3, #0
    81ce:	d000      	beq.n	81d2 <f_write+0x6a>
    81d0:	e080      	b.n	82d4 <f_write+0x16c>
    81d2:	68a3      	ldr	r3, [r4, #8]
    81d4:	68e2      	ldr	r2, [r4, #12]
    81d6:	4293      	cmp	r3, r2
    81d8:	d900      	bls.n	81dc <f_write+0x74>
    81da:	60e3      	str	r3, [r4, #12]
    81dc:	79a3      	ldrb	r3, [r4, #6]
    81de:	2220      	movs	r2, #32
    81e0:	4313      	orrs	r3, r2
    81e2:	71a3      	strb	r3, [r4, #6]
    81e4:	e0c8      	b.n	8378 <f_write+0x210>
    81e6:	79a2      	ldrb	r2, [r4, #6]
    81e8:	3b81      	subs	r3, #129	; 0x81
    81ea:	4313      	orrs	r3, r2
    81ec:	71a3      	strb	r3, [r4, #6]
    81ee:	2302      	movs	r3, #2
    81f0:	9300      	str	r3, [sp, #0]
    81f2:	e0c1      	b.n	8378 <f_write+0x210>
    81f4:	79a2      	ldrb	r2, [r4, #6]
    81f6:	3b7f      	subs	r3, #127	; 0x7f
    81f8:	4313      	orrs	r3, r2
    81fa:	71a3      	strb	r3, [r4, #6]
    81fc:	2301      	movs	r3, #1
    81fe:	9300      	str	r3, [sp, #0]
    8200:	e0ba      	b.n	8378 <f_write+0x210>
    8202:	2100      	movs	r1, #0
    8204:	4b62      	ldr	r3, [pc, #392]	; (8390 <f_write+0x228>)
    8206:	4798      	blx	r3
    8208:	2800      	cmp	r0, #0
    820a:	d06d      	beq.n	82e8 <f_write+0x180>
    820c:	79a2      	ldrb	r2, [r4, #6]
    820e:	2380      	movs	r3, #128	; 0x80
    8210:	425b      	negs	r3, r3
    8212:	4313      	orrs	r3, r2
    8214:	71a3      	strb	r3, [r4, #6]
    8216:	2301      	movs	r3, #1
    8218:	9300      	str	r3, [sp, #0]
    821a:	e0ad      	b.n	8378 <f_write+0x210>
    821c:	79a2      	ldrb	r2, [r4, #6]
    821e:	2380      	movs	r3, #128	; 0x80
    8220:	425b      	negs	r3, r3
    8222:	4313      	orrs	r3, r2
    8224:	71a3      	strb	r3, [r4, #6]
    8226:	2302      	movs	r3, #2
    8228:	9300      	str	r3, [sp, #0]
    822a:	e0a5      	b.n	8378 <f_write+0x210>
    822c:	79a2      	ldrb	r2, [r4, #6]
    822e:	2380      	movs	r3, #128	; 0x80
    8230:	425b      	negs	r3, r3
    8232:	4313      	orrs	r3, r2
    8234:	71a3      	strb	r3, [r4, #6]
    8236:	2301      	movs	r3, #1
    8238:	9300      	str	r3, [sp, #0]
    823a:	e09d      	b.n	8378 <f_write+0x210>
    823c:	0240      	lsls	r0, r0, #9
    823e:	1839      	adds	r1, r7, r0
    8240:	3330      	adds	r3, #48	; 0x30
    8242:	0018      	movs	r0, r3
    8244:	2280      	movs	r2, #128	; 0x80
    8246:	0092      	lsls	r2, r2, #2
    8248:	4b52      	ldr	r3, [pc, #328]	; (8394 <f_write+0x22c>)
    824a:	4798      	blx	r3
    824c:	2300      	movs	r3, #0
    824e:	6822      	ldr	r2, [r4, #0]
    8250:	7113      	strb	r3, [r2, #4]
    8252:	e072      	b.n	833a <f_write+0x1d2>
    8254:	68a3      	ldr	r3, [r4, #8]
    8256:	68e2      	ldr	r2, [r4, #12]
    8258:	4293      	cmp	r3, r2
    825a:	d271      	bcs.n	8340 <f_write+0x1d8>
    825c:	4643      	mov	r3, r8
    825e:	61a3      	str	r3, [r4, #24]
    8260:	68a3      	ldr	r3, [r4, #8]
    8262:	05dd      	lsls	r5, r3, #23
    8264:	0ded      	lsrs	r5, r5, #23
    8266:	2380      	movs	r3, #128	; 0x80
    8268:	009b      	lsls	r3, r3, #2
    826a:	1b5d      	subs	r5, r3, r5
    826c:	42b5      	cmp	r5, r6
    826e:	d900      	bls.n	8272 <f_write+0x10a>
    8270:	0035      	movs	r5, r6
    8272:	69a1      	ldr	r1, [r4, #24]
    8274:	6820      	ldr	r0, [r4, #0]
    8276:	4b46      	ldr	r3, [pc, #280]	; (8390 <f_write+0x228>)
    8278:	4798      	blx	r3
    827a:	2800      	cmp	r0, #0
    827c:	d172      	bne.n	8364 <f_write+0x1fc>
    827e:	68a3      	ldr	r3, [r4, #8]
    8280:	05d8      	lsls	r0, r3, #23
    8282:	0dc0      	lsrs	r0, r0, #23
    8284:	3030      	adds	r0, #48	; 0x30
    8286:	6823      	ldr	r3, [r4, #0]
    8288:	469c      	mov	ip, r3
    828a:	4460      	add	r0, ip
    828c:	002a      	movs	r2, r5
    828e:	0039      	movs	r1, r7
    8290:	4b40      	ldr	r3, [pc, #256]	; (8394 <f_write+0x22c>)
    8292:	4798      	blx	r3
    8294:	2301      	movs	r3, #1
    8296:	6822      	ldr	r2, [r4, #0]
    8298:	7113      	strb	r3, [r2, #4]
    829a:	197f      	adds	r7, r7, r5
    829c:	68a3      	ldr	r3, [r4, #8]
    829e:	195b      	adds	r3, r3, r5
    82a0:	60a3      	str	r3, [r4, #8]
    82a2:	464b      	mov	r3, r9
    82a4:	681b      	ldr	r3, [r3, #0]
    82a6:	195b      	adds	r3, r3, r5
    82a8:	464a      	mov	r2, r9
    82aa:	6013      	str	r3, [r2, #0]
    82ac:	1b76      	subs	r6, r6, r5
    82ae:	d090      	beq.n	81d2 <f_write+0x6a>
    82b0:	68a3      	ldr	r3, [r4, #8]
    82b2:	05da      	lsls	r2, r3, #23
    82b4:	d1d4      	bne.n	8260 <f_write+0xf8>
    82b6:	6820      	ldr	r0, [r4, #0]
    82b8:	7882      	ldrb	r2, [r0, #2]
    82ba:	3a01      	subs	r2, #1
    82bc:	0a5d      	lsrs	r5, r3, #9
    82be:	4015      	ands	r5, r2
    82c0:	b2ed      	uxtb	r5, r5
    82c2:	2d00      	cmp	r5, #0
    82c4:	d10b      	bne.n	82de <f_write+0x176>
    82c6:	2b00      	cmp	r3, #0
    82c8:	d000      	beq.n	82cc <f_write+0x164>
    82ca:	e77b      	b.n	81c4 <f_write+0x5c>
    82cc:	6923      	ldr	r3, [r4, #16]
    82ce:	2b00      	cmp	r3, #0
    82d0:	d100      	bne.n	82d4 <f_write+0x16c>
    82d2:	e771      	b.n	81b8 <f_write+0x50>
    82d4:	2b01      	cmp	r3, #1
    82d6:	d086      	beq.n	81e6 <f_write+0x7e>
    82d8:	1c5a      	adds	r2, r3, #1
    82da:	d08b      	beq.n	81f4 <f_write+0x8c>
    82dc:	6163      	str	r3, [r4, #20]
    82de:	6820      	ldr	r0, [r4, #0]
    82e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    82e2:	69a2      	ldr	r2, [r4, #24]
    82e4:	4293      	cmp	r3, r2
    82e6:	d08c      	beq.n	8202 <f_write+0x9a>
    82e8:	6823      	ldr	r3, [r4, #0]
    82ea:	469a      	mov	sl, r3
    82ec:	6961      	ldr	r1, [r4, #20]
    82ee:	0018      	movs	r0, r3
    82f0:	4b29      	ldr	r3, [pc, #164]	; (8398 <f_write+0x230>)
    82f2:	4798      	blx	r3
    82f4:	2800      	cmp	r0, #0
    82f6:	d091      	beq.n	821c <f_write+0xb4>
    82f8:	4680      	mov	r8, r0
    82fa:	44a8      	add	r8, r5
    82fc:	0a73      	lsrs	r3, r6, #9
    82fe:	469b      	mov	fp, r3
    8300:	d0a8      	beq.n	8254 <f_write+0xec>
    8302:	4653      	mov	r3, sl
    8304:	789b      	ldrb	r3, [r3, #2]
    8306:	465a      	mov	r2, fp
    8308:	18aa      	adds	r2, r5, r2
    830a:	429a      	cmp	r2, r3
    830c:	d901      	bls.n	8312 <f_write+0x1aa>
    830e:	1b5b      	subs	r3, r3, r5
    8310:	469b      	mov	fp, r3
    8312:	465b      	mov	r3, fp
    8314:	466a      	mov	r2, sp
    8316:	71d3      	strb	r3, [r2, #7]
    8318:	79d3      	ldrb	r3, [r2, #7]
    831a:	4652      	mov	r2, sl
    831c:	7850      	ldrb	r0, [r2, #1]
    831e:	4642      	mov	r2, r8
    8320:	0039      	movs	r1, r7
    8322:	4d1e      	ldr	r5, [pc, #120]	; (839c <f_write+0x234>)
    8324:	47a8      	blx	r5
    8326:	2800      	cmp	r0, #0
    8328:	d000      	beq.n	832c <f_write+0x1c4>
    832a:	e77f      	b.n	822c <f_write+0xc4>
    832c:	6823      	ldr	r3, [r4, #0]
    832e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8330:	4641      	mov	r1, r8
    8332:	1a50      	subs	r0, r2, r1
    8334:	4583      	cmp	fp, r0
    8336:	d900      	bls.n	833a <f_write+0x1d2>
    8338:	e780      	b.n	823c <f_write+0xd4>
    833a:	465b      	mov	r3, fp
    833c:	025d      	lsls	r5, r3, #9
    833e:	e7ac      	b.n	829a <f_write+0x132>
    8340:	2100      	movs	r1, #0
    8342:	4650      	mov	r0, sl
    8344:	4b12      	ldr	r3, [pc, #72]	; (8390 <f_write+0x228>)
    8346:	4798      	blx	r3
    8348:	2800      	cmp	r0, #0
    834a:	d103      	bne.n	8354 <f_write+0x1ec>
    834c:	6823      	ldr	r3, [r4, #0]
    834e:	4642      	mov	r2, r8
    8350:	62da      	str	r2, [r3, #44]	; 0x2c
    8352:	e783      	b.n	825c <f_write+0xf4>
    8354:	79a2      	ldrb	r2, [r4, #6]
    8356:	2380      	movs	r3, #128	; 0x80
    8358:	425b      	negs	r3, r3
    835a:	4313      	orrs	r3, r2
    835c:	71a3      	strb	r3, [r4, #6]
    835e:	2301      	movs	r3, #1
    8360:	9300      	str	r3, [sp, #0]
    8362:	e009      	b.n	8378 <f_write+0x210>
    8364:	79a2      	ldrb	r2, [r4, #6]
    8366:	2380      	movs	r3, #128	; 0x80
    8368:	425b      	negs	r3, r3
    836a:	4313      	orrs	r3, r2
    836c:	71a3      	strb	r3, [r4, #6]
    836e:	2301      	movs	r3, #1
    8370:	9300      	str	r3, [sp, #0]
    8372:	e001      	b.n	8378 <f_write+0x210>
    8374:	2302      	movs	r3, #2
    8376:	9300      	str	r3, [sp, #0]
    8378:	9800      	ldr	r0, [sp, #0]
    837a:	b003      	add	sp, #12
    837c:	bc3c      	pop	{r2, r3, r4, r5}
    837e:	4690      	mov	r8, r2
    8380:	4699      	mov	r9, r3
    8382:	46a2      	mov	sl, r4
    8384:	46ab      	mov	fp, r5
    8386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8388:	00006c9d 	.word	0x00006c9d
    838c:	0000749d 	.word	0x0000749d
    8390:	00007121 	.word	0x00007121
    8394:	00006c41 	.word	0x00006c41
    8398:	00006c67 	.word	0x00006c67
    839c:	00006b01 	.word	0x00006b01

000083a0 <f_sync>:
    83a0:	b570      	push	{r4, r5, r6, lr}
    83a2:	0004      	movs	r4, r0
    83a4:	8881      	ldrh	r1, [r0, #4]
    83a6:	6800      	ldr	r0, [r0, #0]
    83a8:	4b1c      	ldr	r3, [pc, #112]	; (841c <f_sync+0x7c>)
    83aa:	4798      	blx	r3
    83ac:	2800      	cmp	r0, #0
    83ae:	d102      	bne.n	83b6 <f_sync+0x16>
    83b0:	79a3      	ldrb	r3, [r4, #6]
    83b2:	069b      	lsls	r3, r3, #26
    83b4:	d400      	bmi.n	83b8 <f_sync+0x18>
    83b6:	bd70      	pop	{r4, r5, r6, pc}
    83b8:	69e1      	ldr	r1, [r4, #28]
    83ba:	6820      	ldr	r0, [r4, #0]
    83bc:	4b18      	ldr	r3, [pc, #96]	; (8420 <f_sync+0x80>)
    83be:	4798      	blx	r3
    83c0:	2800      	cmp	r0, #0
    83c2:	d1f8      	bne.n	83b6 <f_sync+0x16>
    83c4:	6a25      	ldr	r5, [r4, #32]
    83c6:	7aeb      	ldrb	r3, [r5, #11]
    83c8:	2220      	movs	r2, #32
    83ca:	4313      	orrs	r3, r2
    83cc:	72eb      	strb	r3, [r5, #11]
    83ce:	7b23      	ldrb	r3, [r4, #12]
    83d0:	772b      	strb	r3, [r5, #28]
    83d2:	89a3      	ldrh	r3, [r4, #12]
    83d4:	0a1b      	lsrs	r3, r3, #8
    83d6:	776b      	strb	r3, [r5, #29]
    83d8:	89e3      	ldrh	r3, [r4, #14]
    83da:	77ab      	strb	r3, [r5, #30]
    83dc:	7be3      	ldrb	r3, [r4, #15]
    83de:	77eb      	strb	r3, [r5, #31]
    83e0:	7c23      	ldrb	r3, [r4, #16]
    83e2:	76ab      	strb	r3, [r5, #26]
    83e4:	8a23      	ldrh	r3, [r4, #16]
    83e6:	0a1b      	lsrs	r3, r3, #8
    83e8:	76eb      	strb	r3, [r5, #27]
    83ea:	8a63      	ldrh	r3, [r4, #18]
    83ec:	752b      	strb	r3, [r5, #20]
    83ee:	8a63      	ldrh	r3, [r4, #18]
    83f0:	0a1b      	lsrs	r3, r3, #8
    83f2:	756b      	strb	r3, [r5, #21]
    83f4:	4b0b      	ldr	r3, [pc, #44]	; (8424 <f_sync+0x84>)
    83f6:	4798      	blx	r3
    83f8:	75a8      	strb	r0, [r5, #22]
    83fa:	0a03      	lsrs	r3, r0, #8
    83fc:	75eb      	strb	r3, [r5, #23]
    83fe:	0c03      	lsrs	r3, r0, #16
    8400:	762b      	strb	r3, [r5, #24]
    8402:	0e00      	lsrs	r0, r0, #24
    8404:	7668      	strb	r0, [r5, #25]
    8406:	79a3      	ldrb	r3, [r4, #6]
    8408:	2220      	movs	r2, #32
    840a:	4393      	bics	r3, r2
    840c:	71a3      	strb	r3, [r4, #6]
    840e:	2301      	movs	r3, #1
    8410:	6822      	ldr	r2, [r4, #0]
    8412:	7113      	strb	r3, [r2, #4]
    8414:	6820      	ldr	r0, [r4, #0]
    8416:	4b04      	ldr	r3, [pc, #16]	; (8428 <f_sync+0x88>)
    8418:	4798      	blx	r3
    841a:	e7cc      	b.n	83b6 <f_sync+0x16>
    841c:	00006c9d 	.word	0x00006c9d
    8420:	00007121 	.word	0x00007121
    8424:	00006bf1 	.word	0x00006bf1
    8428:	00007b79 	.word	0x00007b79

0000842c <f_close>:
    842c:	b510      	push	{r4, lr}
    842e:	0004      	movs	r4, r0
    8430:	4b03      	ldr	r3, [pc, #12]	; (8440 <f_close+0x14>)
    8432:	4798      	blx	r3
    8434:	2800      	cmp	r0, #0
    8436:	d101      	bne.n	843c <f_close+0x10>
    8438:	2300      	movs	r3, #0
    843a:	6023      	str	r3, [r4, #0]
    843c:	bd10      	pop	{r4, pc}
    843e:	46c0      	nop			; (mov r8, r8)
    8440:	000083a1 	.word	0x000083a1

00008444 <ff_convert>:
    8444:	0003      	movs	r3, r0
    8446:	287f      	cmp	r0, #127	; 0x7f
    8448:	d911      	bls.n	846e <ff_convert+0x2a>
    844a:	2900      	cmp	r1, #0
    844c:	d111      	bne.n	8472 <ff_convert+0x2e>
    844e:	28c7      	cmp	r0, #199	; 0xc7
    8450:	d017      	beq.n	8482 <ff_convert+0x3e>
    8452:	4a0d      	ldr	r2, [pc, #52]	; (8488 <ff_convert+0x44>)
    8454:	3202      	adds	r2, #2
    8456:	2301      	movs	r3, #1
    8458:	8811      	ldrh	r1, [r2, #0]
    845a:	4281      	cmp	r1, r0
    845c:	d004      	beq.n	8468 <ff_convert+0x24>
    845e:	3301      	adds	r3, #1
    8460:	b29b      	uxth	r3, r3
    8462:	3202      	adds	r2, #2
    8464:	2b80      	cmp	r3, #128	; 0x80
    8466:	d1f7      	bne.n	8458 <ff_convert+0x14>
    8468:	3380      	adds	r3, #128	; 0x80
    846a:	20ff      	movs	r0, #255	; 0xff
    846c:	4003      	ands	r3, r0
    846e:	0018      	movs	r0, r3
    8470:	4770      	bx	lr
    8472:	2300      	movs	r3, #0
    8474:	28ff      	cmp	r0, #255	; 0xff
    8476:	d8fa      	bhi.n	846e <ff_convert+0x2a>
    8478:	3880      	subs	r0, #128	; 0x80
    847a:	0040      	lsls	r0, r0, #1
    847c:	4b02      	ldr	r3, [pc, #8]	; (8488 <ff_convert+0x44>)
    847e:	5ac3      	ldrh	r3, [r0, r3]
    8480:	e7f5      	b.n	846e <ff_convert+0x2a>
    8482:	2300      	movs	r3, #0
    8484:	e7f0      	b.n	8468 <ff_convert+0x24>
    8486:	46c0      	nop			; (mov r8, r8)
    8488:	0000e488 	.word	0x0000e488

0000848c <ff_wtoupper>:
    848c:	2861      	cmp	r0, #97	; 0x61
    848e:	d014      	beq.n	84ba <ff_wtoupper+0x2e>
    8490:	4b0b      	ldr	r3, [pc, #44]	; (84c0 <ff_wtoupper+0x34>)
    8492:	3304      	adds	r3, #4
    8494:	2101      	movs	r1, #1
    8496:	2262      	movs	r2, #98	; 0x62
    8498:	4290      	cmp	r0, r2
    849a:	d007      	beq.n	84ac <ff_wtoupper+0x20>
    849c:	3101      	adds	r1, #1
    849e:	3302      	adds	r3, #2
    84a0:	1e9a      	subs	r2, r3, #2
    84a2:	8812      	ldrh	r2, [r2, #0]
    84a4:	2a00      	cmp	r2, #0
    84a6:	d1f7      	bne.n	8498 <ff_wtoupper+0xc>
    84a8:	0003      	movs	r3, r0
    84aa:	e004      	b.n	84b6 <ff_wtoupper+0x2a>
    84ac:	1e03      	subs	r3, r0, #0
    84ae:	d002      	beq.n	84b6 <ff_wtoupper+0x2a>
    84b0:	0049      	lsls	r1, r1, #1
    84b2:	4b04      	ldr	r3, [pc, #16]	; (84c4 <ff_wtoupper+0x38>)
    84b4:	5acb      	ldrh	r3, [r1, r3]
    84b6:	0018      	movs	r0, r3
    84b8:	4770      	bx	lr
    84ba:	2100      	movs	r1, #0
    84bc:	e7f8      	b.n	84b0 <ff_wtoupper+0x24>
    84be:	46c0      	nop			; (mov r8, r8)
    84c0:	0000e588 	.word	0x0000e588
    84c4:	0000e768 	.word	0x0000e768

000084c8 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
    84c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    84ca:	46de      	mov	lr, fp
    84cc:	4657      	mov	r7, sl
    84ce:	464e      	mov	r6, r9
    84d0:	4645      	mov	r5, r8
    84d2:	b5e0      	push	{r5, r6, r7, lr}
    84d4:	b083      	sub	sp, #12
    84d6:	0007      	movs	r7, r0
    84d8:	4688      	mov	r8, r1
    84da:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
    84dc:	2400      	movs	r4, #0
    84de:	2900      	cmp	r1, #0
    84e0:	dd18      	ble.n	8514 <sendPacket+0x4c>
    84e2:	4b15      	ldr	r3, [pc, #84]	; (8538 <sendPacket+0x70>)
    84e4:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    84e6:	4b15      	ldr	r3, [pc, #84]	; (853c <sendPacket+0x74>)
    84e8:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
    84ea:	9801      	ldr	r0, [sp, #4]
    84ec:	47d0      	blx	sl
    84ee:	2800      	cmp	r0, #0
    84f0:	d110      	bne.n	8514 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    84f2:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    84f4:	68f3      	ldr	r3, [r6, #12]
    84f6:	4699      	mov	r9, r3
    84f8:	693b      	ldr	r3, [r7, #16]
    84fa:	191d      	adds	r5, r3, r4
    84fc:	9801      	ldr	r0, [sp, #4]
    84fe:	47d8      	blx	fp
    8500:	0003      	movs	r3, r0
    8502:	4642      	mov	r2, r8
    8504:	0029      	movs	r1, r5
    8506:	0030      	movs	r0, r6
    8508:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
    850a:	2800      	cmp	r0, #0
    850c:	db02      	blt.n	8514 <sendPacket+0x4c>
            break;
        sent += rc;
    850e:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
    8510:	45a0      	cmp	r8, r4
    8512:	dcea      	bgt.n	84ea <sendPacket+0x22>
    }
    if (sent == length)
    8514:	45a0      	cmp	r8, r4
    8516:	d10c      	bne.n	8532 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
    8518:	69b9      	ldr	r1, [r7, #24]
    851a:	0038      	movs	r0, r7
    851c:	3054      	adds	r0, #84	; 0x54
    851e:	4b08      	ldr	r3, [pc, #32]	; (8540 <sendPacket+0x78>)
    8520:	4798      	blx	r3
        rc = SUCCESS;
    8522:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
    8524:	b003      	add	sp, #12
    8526:	bc3c      	pop	{r2, r3, r4, r5}
    8528:	4690      	mov	r8, r2
    852a:	4699      	mov	r9, r3
    852c:	46a2      	mov	sl, r4
    852e:	46ab      	mov	fp, r5
    8530:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
    8532:	2001      	movs	r0, #1
    8534:	4240      	negs	r0, r0
    return rc;
    8536:	e7f5      	b.n	8524 <sendPacket+0x5c>
    8538:	00008e45 	.word	0x00008e45
    853c:	00008e79 	.word	0x00008e79
    8540:	00008e65 	.word	0x00008e65

00008544 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
    8544:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
    8546:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
    8548:	2100      	movs	r1, #0
    854a:	6241      	str	r1, [r0, #36]	; 0x24
    854c:	62c1      	str	r1, [r0, #44]	; 0x2c
    854e:	6341      	str	r1, [r0, #52]	; 0x34
    8550:	63c1      	str	r1, [r0, #60]	; 0x3c
    8552:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
    8554:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
    8556:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
    8558:	9b02      	ldr	r3, [sp, #8]
    855a:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
    855c:	9b03      	ldr	r3, [sp, #12]
    855e:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
    8560:	9b04      	ldr	r3, [sp, #16]
    8562:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
    8564:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
    8566:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
    8568:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
    856a:	2301      	movs	r3, #1
    856c:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
    856e:	3054      	adds	r0, #84	; 0x54
    8570:	4b01      	ldr	r3, [pc, #4]	; (8578 <MQTTClientInit+0x34>)
    8572:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
    8574:	bd10      	pop	{r4, pc}
    8576:	46c0      	nop			; (mov r8, r8)
    8578:	00008e8d 	.word	0x00008e8d

0000857c <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
    857c:	b5f0      	push	{r4, r5, r6, r7, lr}
    857e:	46de      	mov	lr, fp
    8580:	4657      	mov	r7, sl
    8582:	464e      	mov	r6, r9
    8584:	4645      	mov	r5, r8
    8586:	b5e0      	push	{r5, r6, r7, lr}
    8588:	b085      	sub	sp, #20
    858a:	4682      	mov	sl, r0
    858c:	000f      	movs	r7, r1
    858e:	4691      	mov	r9, r2
    8590:	0004      	movs	r4, r0
    8592:	3424      	adds	r4, #36	; 0x24
    8594:	234c      	movs	r3, #76	; 0x4c
    8596:	4453      	add	r3, sl
    8598:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
    859a:	2301      	movs	r3, #1
    859c:	425b      	negs	r3, r3
    859e:	9301      	str	r3, [sp, #4]
    85a0:	e056      	b.n	8650 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
    85a2:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
    85a4:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
    85a6:	687a      	ldr	r2, [r7, #4]
    85a8:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
    85aa:	780a      	ldrb	r2, [r1, #0]
    85ac:	2a00      	cmp	r2, #0
    85ae:	d04a      	beq.n	8646 <deliverMessage+0xca>
    85b0:	42b3      	cmp	r3, r6
    85b2:	d24a      	bcs.n	864a <deliverMessage+0xce>
    85b4:	3101      	adds	r1, #1
    85b6:	1e70      	subs	r0, r6, #1
    85b8:	e008      	b.n	85cc <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
    85ba:	2a2f      	cmp	r2, #47	; 0x2f
    85bc:	d10f      	bne.n	85de <deliverMessage+0x62>
        curn++;
    85be:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    85c0:	780a      	ldrb	r2, [r1, #0]
    85c2:	2a00      	cmp	r2, #0
    85c4:	d03f      	beq.n	8646 <deliverMessage+0xca>
    85c6:	429e      	cmp	r6, r3
    85c8:	d93f      	bls.n	864a <deliverMessage+0xce>
    85ca:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
    85cc:	781d      	ldrb	r5, [r3, #0]
    85ce:	2d2f      	cmp	r5, #47	; 0x2f
    85d0:	d0f3      	beq.n	85ba <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
    85d2:	2a2b      	cmp	r2, #43	; 0x2b
    85d4:	d008      	beq.n	85e8 <deliverMessage+0x6c>
    85d6:	2a23      	cmp	r2, #35	; 0x23
    85d8:	d013      	beq.n	8602 <deliverMessage+0x86>
    85da:	4295      	cmp	r5, r2
    85dc:	d0ef      	beq.n	85be <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
    85de:	429e      	cmp	r6, r3
    85e0:	d133      	bne.n	864a <deliverMessage+0xce>
    85e2:	2a00      	cmp	r2, #0
    85e4:	d03d      	beq.n	8662 <deliverMessage+0xe6>
    85e6:	e030      	b.n	864a <deliverMessage+0xce>
            char* nextpos = curn + 1;
    85e8:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    85ea:	42ae      	cmp	r6, r5
    85ec:	d927      	bls.n	863e <deliverMessage+0xc2>
    85ee:	785a      	ldrb	r2, [r3, #1]
    85f0:	2a2f      	cmp	r2, #47	; 0x2f
    85f2:	d01f      	beq.n	8634 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
    85f4:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    85f6:	4283      	cmp	r3, r0
    85f8:	d0e1      	beq.n	85be <deliverMessage+0x42>
    85fa:	785a      	ldrb	r2, [r3, #1]
    85fc:	2a2f      	cmp	r2, #47	; 0x2f
    85fe:	d1f9      	bne.n	85f4 <deliverMessage+0x78>
    8600:	e7dd      	b.n	85be <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
    8602:	1e73      	subs	r3, r6, #1
    8604:	e7db      	b.n	85be <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    8606:	9b01      	ldr	r3, [sp, #4]
    8608:	3301      	adds	r3, #1
    860a:	d007      	beq.n	861c <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
    860c:	9801      	ldr	r0, [sp, #4]
    860e:	b005      	add	sp, #20
    8610:	bc3c      	pop	{r2, r3, r4, r5}
    8612:	4690      	mov	r8, r2
    8614:	4699      	mov	r9, r3
    8616:	46a2      	mov	sl, r4
    8618:	46ab      	mov	fp, r5
    861a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    861c:	4653      	mov	r3, sl
    861e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8620:	2b00      	cmp	r3, #0
    8622:	d0f3      	beq.n	860c <deliverMessage+0x90>
    md->topicName = aTopicName;
    8624:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    8626:	464a      	mov	r2, r9
    8628:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
    862a:	a802      	add	r0, sp, #8
    862c:	4798      	blx	r3
        rc = SUCCESS;
    862e:	2300      	movs	r3, #0
    8630:	9301      	str	r3, [sp, #4]
    return rc;
    8632:	e7eb      	b.n	860c <deliverMessage+0x90>
    while (*curf && curn < curn_end)
    8634:	780a      	ldrb	r2, [r1, #0]
    8636:	2a00      	cmp	r2, #0
    8638:	d007      	beq.n	864a <deliverMessage+0xce>
        curn++;
    863a:	002b      	movs	r3, r5
    863c:	e7c5      	b.n	85ca <deliverMessage+0x4e>
    863e:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    8640:	780a      	ldrb	r2, [r1, #0]
    8642:	2a00      	cmp	r2, #0
    8644:	d101      	bne.n	864a <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
    8646:	429e      	cmp	r6, r3
    8648:	d00b      	beq.n	8662 <deliverMessage+0xe6>
    864a:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    864c:	4544      	cmp	r4, r8
    864e:	d0da      	beq.n	8606 <deliverMessage+0x8a>
    8650:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    8652:	6821      	ldr	r1, [r4, #0]
    8654:	2900      	cmp	r1, #0
    8656:	d0f8      	beq.n	864a <deliverMessage+0xce>
    8658:	0038      	movs	r0, r7
    865a:	4b08      	ldr	r3, [pc, #32]	; (867c <deliverMessage+0x100>)
    865c:	4798      	blx	r3
    865e:	2800      	cmp	r0, #0
    8660:	d09f      	beq.n	85a2 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
    8662:	465b      	mov	r3, fp
    8664:	685b      	ldr	r3, [r3, #4]
    8666:	2b00      	cmp	r3, #0
    8668:	d0ef      	beq.n	864a <deliverMessage+0xce>
    md->topicName = aTopicName;
    866a:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    866c:	464a      	mov	r2, r9
    866e:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
    8670:	a802      	add	r0, sp, #8
    8672:	4798      	blx	r3
                rc = SUCCESS;
    8674:	2300      	movs	r3, #0
    8676:	9301      	str	r3, [sp, #4]
    8678:	e7e7      	b.n	864a <deliverMessage+0xce>
    867a:	46c0      	nop			; (mov r8, r8)
    867c:	00009761 	.word	0x00009761

00008680 <keepalive>:


int keepalive(MQTTClient* c)
{
    8680:	b510      	push	{r4, lr}
    8682:	b082      	sub	sp, #8
    8684:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
    8686:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
    8688:	69a3      	ldr	r3, [r4, #24]
    868a:	2b00      	cmp	r3, #0
    868c:	d101      	bne.n	8692 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
    868e:	b002      	add	sp, #8
    8690:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
    8692:	0020      	movs	r0, r4
    8694:	3054      	adds	r0, #84	; 0x54
    8696:	4b14      	ldr	r3, [pc, #80]	; (86e8 <keepalive+0x68>)
    8698:	4798      	blx	r3
    869a:	2800      	cmp	r0, #0
    869c:	d01d      	beq.n	86da <keepalive+0x5a>
        if (!c->ping_outstanding)
    869e:	7f23      	ldrb	r3, [r4, #28]
    86a0:	2b00      	cmp	r3, #0
    86a2:	d11d      	bne.n	86e0 <keepalive+0x60>
            TimerInit(&timer);
    86a4:	4668      	mov	r0, sp
    86a6:	4b11      	ldr	r3, [pc, #68]	; (86ec <keepalive+0x6c>)
    86a8:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
    86aa:	21fa      	movs	r1, #250	; 0xfa
    86ac:	0089      	lsls	r1, r1, #2
    86ae:	4668      	mov	r0, sp
    86b0:	4b0f      	ldr	r3, [pc, #60]	; (86f0 <keepalive+0x70>)
    86b2:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
    86b4:	68a1      	ldr	r1, [r4, #8]
    86b6:	6920      	ldr	r0, [r4, #16]
    86b8:	4b0e      	ldr	r3, [pc, #56]	; (86f4 <keepalive+0x74>)
    86ba:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
    86bc:	2800      	cmp	r0, #0
    86be:	dd09      	ble.n	86d4 <keepalive+0x54>
    86c0:	466a      	mov	r2, sp
    86c2:	0001      	movs	r1, r0
    86c4:	0020      	movs	r0, r4
    86c6:	4b0c      	ldr	r3, [pc, #48]	; (86f8 <keepalive+0x78>)
    86c8:	4798      	blx	r3
    86ca:	2800      	cmp	r0, #0
    86cc:	d1df      	bne.n	868e <keepalive+0xe>
                c->ping_outstanding = 1;
    86ce:	2301      	movs	r3, #1
    86d0:	7723      	strb	r3, [r4, #28]
    86d2:	e7dc      	b.n	868e <keepalive+0xe>
    int rc = FAILURE;
    86d4:	2001      	movs	r0, #1
    86d6:	4240      	negs	r0, r0
    86d8:	e7d9      	b.n	868e <keepalive+0xe>
    86da:	2001      	movs	r0, #1
    86dc:	4240      	negs	r0, r0
    86de:	e7d6      	b.n	868e <keepalive+0xe>
    86e0:	2001      	movs	r0, #1
    86e2:	4240      	negs	r0, r0
    return rc;
    86e4:	e7d3      	b.n	868e <keepalive+0xe>
    86e6:	46c0      	nop			; (mov r8, r8)
    86e8:	00008e45 	.word	0x00008e45
    86ec:	00008e8d 	.word	0x00008e8d
    86f0:	00008e55 	.word	0x00008e55
    86f4:	00009449 	.word	0x00009449
    86f8:	000084c9 	.word	0x000084c9

000086fc <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
    86fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    86fe:	46de      	mov	lr, fp
    8700:	464f      	mov	r7, r9
    8702:	4646      	mov	r6, r8
    8704:	b5c0      	push	{r6, r7, lr}
    8706:	b090      	sub	sp, #64	; 0x40
    8708:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
    870a:	6d05      	ldr	r5, [r0, #80]	; 0x50
    870c:	68ae      	ldr	r6, [r5, #8]
    870e:	6947      	ldr	r7, [r0, #20]
    8710:	9107      	str	r1, [sp, #28]
    8712:	0008      	movs	r0, r1
    8714:	4b65      	ldr	r3, [pc, #404]	; (88ac <cycle+0x1b0>)
    8716:	4798      	blx	r3
    8718:	0003      	movs	r3, r0
    871a:	2201      	movs	r2, #1
    871c:	0039      	movs	r1, r7
    871e:	0028      	movs	r0, r5
    8720:	47b0      	blx	r6
    8722:	0005      	movs	r5, r0
    8724:	2801      	cmp	r0, #1
    8726:	d000      	beq.n	872a <cycle+0x2e>
    8728:	e0bd      	b.n	88a6 <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
    872a:	9807      	ldr	r0, [sp, #28]
    872c:	4b5f      	ldr	r3, [pc, #380]	; (88ac <cycle+0x1b0>)
    872e:	4798      	blx	r3
    8730:	9006      	str	r0, [sp, #24]
    8732:	2604      	movs	r6, #4
    *value = 0;
    8734:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
    8736:	237f      	movs	r3, #127	; 0x7f
    8738:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
    873a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    873c:	6883      	ldr	r3, [r0, #8]
    873e:	4698      	mov	r8, r3
    8740:	9b06      	ldr	r3, [sp, #24]
    8742:	2201      	movs	r2, #1
    8744:	a90c      	add	r1, sp, #48	; 0x30
    8746:	47c0      	blx	r8
        if (rc != 1)
    8748:	2801      	cmp	r0, #1
    874a:	d10e      	bne.n	876a <cycle+0x6e>
        *value += (i & 127) * multiplier;
    874c:	ab02      	add	r3, sp, #8
    874e:	2228      	movs	r2, #40	; 0x28
    8750:	189b      	adds	r3, r3, r2
    8752:	781b      	ldrb	r3, [r3, #0]
    8754:	465a      	mov	r2, fp
    8756:	401a      	ands	r2, r3
    8758:	436a      	muls	r2, r5
    875a:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
    875c:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
    875e:	b25b      	sxtb	r3, r3
    8760:	2b00      	cmp	r3, #0
    8762:	da02      	bge.n	876a <cycle+0x6e>
    8764:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    8766:	2e00      	cmp	r6, #0
    8768:	d1e7      	bne.n	873a <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    876a:	6963      	ldr	r3, [r4, #20]
    876c:	1c58      	adds	r0, r3, #1
    876e:	0039      	movs	r1, r7
    8770:	4b4f      	ldr	r3, [pc, #316]	; (88b0 <cycle+0x1b4>)
    8772:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    8774:	2f00      	cmp	r7, #0
    8776:	dd10      	ble.n	879a <cycle+0x9e>
    8778:	6d26      	ldr	r6, [r4, #80]	; 0x50
    877a:	68b3      	ldr	r3, [r6, #8]
    877c:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    877e:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    8780:	6963      	ldr	r3, [r4, #20]
    8782:	181d      	adds	r5, r3, r0
    8784:	9807      	ldr	r0, [sp, #28]
    8786:	4b49      	ldr	r3, [pc, #292]	; (88ac <cycle+0x1b0>)
    8788:	4798      	blx	r3
    878a:	0003      	movs	r3, r0
    878c:	003a      	movs	r2, r7
    878e:	0029      	movs	r1, r5
    8790:	0030      	movs	r0, r6
    8792:	47c8      	blx	r9
    8794:	42b8      	cmp	r0, r7
    8796:	d000      	beq.n	879a <cycle+0x9e>
    8798:	e085      	b.n	88a6 <cycle+0x1aa>
    header.byte = c->readbuf[0];
    879a:	6963      	ldr	r3, [r4, #20]
    879c:	781d      	ldrb	r5, [r3, #0]
    879e:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
    87a0:	2d05      	cmp	r5, #5
    87a2:	d051      	beq.n	8848 <cycle+0x14c>
    87a4:	2d0d      	cmp	r5, #13
    87a6:	d06e      	beq.n	8886 <cycle+0x18a>
        rc = SUCCESS;
    87a8:	2600      	movs	r6, #0
    switch (packet_type)
    87aa:	2d03      	cmp	r5, #3
    87ac:	d16e      	bne.n	888c <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    87ae:	68e2      	ldr	r2, [r4, #12]
    87b0:	9204      	str	r2, [sp, #16]
    87b2:	9303      	str	r3, [sp, #12]
    87b4:	ab0f      	add	r3, sp, #60	; 0x3c
    87b6:	9302      	str	r3, [sp, #8]
    87b8:	ab0e      	add	r3, sp, #56	; 0x38
    87ba:	9301      	str	r3, [sp, #4]
    87bc:	ab09      	add	r3, sp, #36	; 0x24
    87be:	9300      	str	r3, [sp, #0]
    87c0:	ab0d      	add	r3, sp, #52	; 0x34
    87c2:	2229      	movs	r2, #41	; 0x29
    87c4:	a902      	add	r1, sp, #8
    87c6:	468c      	mov	ip, r1
    87c8:	4462      	add	r2, ip
    87ca:	a908      	add	r1, sp, #32
    87cc:	202a      	movs	r0, #42	; 0x2a
    87ce:	4460      	add	r0, ip
    87d0:	4e38      	ldr	r6, [pc, #224]	; (88b4 <cycle+0x1b8>)
    87d2:	47b0      	blx	r6
        rc = SUCCESS;
    87d4:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    87d6:	2801      	cmp	r0, #1
    87d8:	d15b      	bne.n	8892 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
    87da:	ae0c      	add	r6, sp, #48	; 0x30
    87dc:	ab02      	add	r3, sp, #8
    87de:	7e1b      	ldrb	r3, [r3, #24]
    87e0:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
    87e2:	0032      	movs	r2, r6
    87e4:	a909      	add	r1, sp, #36	; 0x24
    87e6:	0020      	movs	r0, r4
    87e8:	4b33      	ldr	r3, [pc, #204]	; (88b8 <cycle+0x1bc>)
    87ea:	4798      	blx	r3
            if (msg.qos != QOS0)
    87ec:	7833      	ldrb	r3, [r6, #0]
    87ee:	2b00      	cmp	r3, #0
    87f0:	d028      	beq.n	8844 <cycle+0x148>
            {
                if (msg.qos == QOS1)
    87f2:	2b01      	cmp	r3, #1
    87f4:	d004      	beq.n	8800 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
    87f6:	2b02      	cmp	r3, #2
    87f8:	d016      	beq.n	8828 <cycle+0x12c>
    87fa:	2601      	movs	r6, #1
    87fc:	4276      	negs	r6, r6
    87fe:	e048      	b.n	8892 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
    8800:	ab0c      	add	r3, sp, #48	; 0x30
    8802:	889b      	ldrh	r3, [r3, #4]
    8804:	9300      	str	r3, [sp, #0]
    8806:	2300      	movs	r3, #0
    8808:	2204      	movs	r2, #4
    880a:	68a1      	ldr	r1, [r4, #8]
    880c:	6920      	ldr	r0, [r4, #16]
    880e:	4e2b      	ldr	r6, [pc, #172]	; (88bc <cycle+0x1c0>)
    8810:	47b0      	blx	r6
    8812:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
    8814:	2900      	cmp	r1, #0
    8816:	dd12      	ble.n	883e <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
    8818:	9a07      	ldr	r2, [sp, #28]
    881a:	0020      	movs	r0, r4
    881c:	4b28      	ldr	r3, [pc, #160]	; (88c0 <cycle+0x1c4>)
    881e:	4798      	blx	r3
    8820:	0006      	movs	r6, r0
                if (rc == FAILURE)
    8822:	1c43      	adds	r3, r0, #1
    8824:	d132      	bne.n	888c <cycle+0x190>
    8826:	e034      	b.n	8892 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
    8828:	ab0c      	add	r3, sp, #48	; 0x30
    882a:	889b      	ldrh	r3, [r3, #4]
    882c:	9300      	str	r3, [sp, #0]
    882e:	2300      	movs	r3, #0
    8830:	2205      	movs	r2, #5
    8832:	68a1      	ldr	r1, [r4, #8]
    8834:	6920      	ldr	r0, [r4, #16]
    8836:	4e21      	ldr	r6, [pc, #132]	; (88bc <cycle+0x1c0>)
    8838:	47b0      	blx	r6
    883a:	0001      	movs	r1, r0
    883c:	e7ea      	b.n	8814 <cycle+0x118>
    883e:	2601      	movs	r6, #1
    8840:	4276      	negs	r6, r6
    8842:	e026      	b.n	8892 <cycle+0x196>
        rc = SUCCESS;
    8844:	2600      	movs	r6, #0
    8846:	e021      	b.n	888c <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    8848:	68e2      	ldr	r2, [r4, #12]
    884a:	9200      	str	r2, [sp, #0]
    884c:	aa0c      	add	r2, sp, #48	; 0x30
    884e:	a908      	add	r1, sp, #32
    8850:	a809      	add	r0, sp, #36	; 0x24
    8852:	4e1c      	ldr	r6, [pc, #112]	; (88c4 <cycle+0x1c8>)
    8854:	47b0      	blx	r6
    8856:	2801      	cmp	r0, #1
    8858:	d002      	beq.n	8860 <cycle+0x164>
    885a:	2601      	movs	r6, #1
    885c:	4276      	negs	r6, r6
    885e:	e01b      	b.n	8898 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
    8860:	ab0c      	add	r3, sp, #48	; 0x30
    8862:	881b      	ldrh	r3, [r3, #0]
    8864:	9300      	str	r3, [sp, #0]
    8866:	2300      	movs	r3, #0
    8868:	2206      	movs	r2, #6
    886a:	68a1      	ldr	r1, [r4, #8]
    886c:	6920      	ldr	r0, [r4, #16]
    886e:	4e13      	ldr	r6, [pc, #76]	; (88bc <cycle+0x1c0>)
    8870:	47b0      	blx	r6
    8872:	2800      	cmp	r0, #0
    8874:	ddf1      	ble.n	885a <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
    8876:	9a07      	ldr	r2, [sp, #28]
    8878:	0001      	movs	r1, r0
    887a:	0020      	movs	r0, r4
    887c:	4b10      	ldr	r3, [pc, #64]	; (88c0 <cycle+0x1c4>)
    887e:	4798      	blx	r3
    8880:	1e06      	subs	r6, r0, #0
    8882:	d1ea      	bne.n	885a <cycle+0x15e>
    8884:	e002      	b.n	888c <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
    8886:	2300      	movs	r3, #0
    8888:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
    888a:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
    888c:	0020      	movs	r0, r4
    888e:	4b0e      	ldr	r3, [pc, #56]	; (88c8 <cycle+0x1cc>)
    8890:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
    8892:	2e00      	cmp	r6, #0
    8894:	d100      	bne.n	8898 <cycle+0x19c>
    8896:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
    8898:	0030      	movs	r0, r6
    889a:	b010      	add	sp, #64	; 0x40
    889c:	bc1c      	pop	{r2, r3, r4}
    889e:	4690      	mov	r8, r2
    88a0:	4699      	mov	r9, r3
    88a2:	46a3      	mov	fp, r4
    88a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88a6:	4d09      	ldr	r5, [pc, #36]	; (88cc <cycle+0x1d0>)
        rc = SUCCESS;
    88a8:	2600      	movs	r6, #0
    88aa:	e7ef      	b.n	888c <cycle+0x190>
    88ac:	00008e79 	.word	0x00008e79
    88b0:	00009561 	.word	0x00009561
    88b4:	00009459 	.word	0x00009459
    88b8:	0000857d 	.word	0x0000857d
    88bc:	00009895 	.word	0x00009895
    88c0:	000084c9 	.word	0x000084c9
    88c4:	000094f1 	.word	0x000094f1
    88c8:	00008681 	.word	0x00008681
    88cc:	0000ffff 	.word	0x0000ffff

000088d0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
    88d0:	b570      	push	{r4, r5, r6, lr}
    88d2:	b082      	sub	sp, #8
    88d4:	0005      	movs	r5, r0
    88d6:	000c      	movs	r4, r1
    int rc = SUCCESS;
    Timer timer;

    TimerInit(&timer);
    88d8:	4668      	mov	r0, sp
    88da:	4b0a      	ldr	r3, [pc, #40]	; (8904 <MQTTYield+0x34>)
    88dc:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
    88de:	0021      	movs	r1, r4
    88e0:	4668      	mov	r0, sp
    88e2:	4b09      	ldr	r3, [pc, #36]	; (8908 <MQTTYield+0x38>)
    88e4:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
    88e6:	4c09      	ldr	r4, [pc, #36]	; (890c <MQTTYield+0x3c>)
        {
            rc = FAILURE;
            break;
        }
	} while (!TimerIsExpired(&timer));
    88e8:	4e09      	ldr	r6, [pc, #36]	; (8910 <MQTTYield+0x40>)
        if (cycle(c, &timer) == FAILURE)
    88ea:	4669      	mov	r1, sp
    88ec:	0028      	movs	r0, r5
    88ee:	47a0      	blx	r4
    88f0:	1c43      	adds	r3, r0, #1
    88f2:	d004      	beq.n	88fe <MQTTYield+0x2e>
	} while (!TimerIsExpired(&timer));
    88f4:	4668      	mov	r0, sp
    88f6:	47b0      	blx	r6
    88f8:	2800      	cmp	r0, #0
    88fa:	d0f6      	beq.n	88ea <MQTTYield+0x1a>
    int rc = SUCCESS;
    88fc:	2000      	movs	r0, #0
        
    return rc;
}
    88fe:	b002      	add	sp, #8
    8900:	bd70      	pop	{r4, r5, r6, pc}
    8902:	46c0      	nop			; (mov r8, r8)
    8904:	00008e8d 	.word	0x00008e8d
    8908:	00008e55 	.word	0x00008e55
    890c:	000086fd 	.word	0x000086fd
    8910:	00008e45 	.word	0x00008e45

00008914 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
    8914:	b5f0      	push	{r4, r5, r6, r7, lr}
    8916:	b083      	sub	sp, #12
    8918:	9001      	str	r0, [sp, #4]
    891a:	000e      	movs	r6, r1
    891c:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
    891e:	2401      	movs	r4, #1
    8920:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
    8922:	4f08      	ldr	r7, [pc, #32]	; (8944 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
    8924:	4d08      	ldr	r5, [pc, #32]	; (8948 <waitfor+0x34>)
        if (TimerIsExpired(timer))
    8926:	9800      	ldr	r0, [sp, #0]
    8928:	47b8      	blx	r7
    892a:	2800      	cmp	r0, #0
    892c:	d106      	bne.n	893c <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
    892e:	9900      	ldr	r1, [sp, #0]
    8930:	9801      	ldr	r0, [sp, #4]
    8932:	47a8      	blx	r5
    8934:	0004      	movs	r4, r0
    8936:	42b0      	cmp	r0, r6
    8938:	d1f5      	bne.n	8926 <waitfor+0x12>
    893a:	0034      	movs	r4, r6
    
    return rc;
}
    893c:	0020      	movs	r0, r4
    893e:	b003      	add	sp, #12
    8940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8942:	46c0      	nop			; (mov r8, r8)
    8944:	00008e45 	.word	0x00008e45
    8948:	000086fd 	.word	0x000086fd

0000894c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
    894c:	b530      	push	{r4, r5, lr}
    894e:	b09b      	sub	sp, #108	; 0x6c
    8950:	0004      	movs	r4, r0
    8952:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
    8954:	2258      	movs	r2, #88	; 0x58
    8956:	4928      	ldr	r1, [pc, #160]	; (89f8 <MQTTConnect+0xac>)
    8958:	a802      	add	r0, sp, #8
    895a:	4b28      	ldr	r3, [pc, #160]	; (89fc <MQTTConnect+0xb0>)
    895c:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
    895e:	6a23      	ldr	r3, [r4, #32]
    8960:	2b00      	cmp	r3, #0
    8962:	d13f      	bne.n	89e4 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
    8964:	a818      	add	r0, sp, #96	; 0x60
    8966:	4b26      	ldr	r3, [pc, #152]	; (8a00 <MQTTConnect+0xb4>)
    8968:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
    896a:	6861      	ldr	r1, [r4, #4]
    896c:	a818      	add	r0, sp, #96	; 0x60
    896e:	4b25      	ldr	r3, [pc, #148]	; (8a04 <MQTTConnect+0xb8>)
    8970:	4798      	blx	r3

    if (options == 0)
    8972:	2d00      	cmp	r5, #0
    8974:	d015      	beq.n	89a2 <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
    8976:	8b29      	ldrh	r1, [r5, #24]
    8978:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
    897a:	0020      	movs	r0, r4
    897c:	3054      	adds	r0, #84	; 0x54
    897e:	4b22      	ldr	r3, [pc, #136]	; (8a08 <MQTTConnect+0xbc>)
    8980:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
    8982:	002a      	movs	r2, r5
    8984:	68a1      	ldr	r1, [r4, #8]
    8986:	6920      	ldr	r0, [r4, #16]
    8988:	4b20      	ldr	r3, [pc, #128]	; (8a0c <MQTTConnect+0xc0>)
    898a:	4798      	blx	r3
    898c:	2800      	cmp	r0, #0
    898e:	dd2c      	ble.n	89ea <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
    8990:	aa18      	add	r2, sp, #96	; 0x60
    8992:	0001      	movs	r1, r0
    8994:	0020      	movs	r0, r4
    8996:	4b1e      	ldr	r3, [pc, #120]	; (8a10 <MQTTConnect+0xc4>)
    8998:	4798      	blx	r3
    899a:	2800      	cmp	r0, #0
    899c:	d003      	beq.n	89a6 <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
    899e:	b01b      	add	sp, #108	; 0x6c
    89a0:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
    89a2:	ad02      	add	r5, sp, #8
    89a4:	e7e7      	b.n	8976 <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
    89a6:	aa18      	add	r2, sp, #96	; 0x60
    89a8:	2102      	movs	r1, #2
    89aa:	0020      	movs	r0, r4
    89ac:	4b19      	ldr	r3, [pc, #100]	; (8a14 <MQTTConnect+0xc8>)
    89ae:	4798      	blx	r3
    89b0:	2802      	cmp	r0, #2
    89b2:	d11d      	bne.n	89f0 <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
    89b4:	466b      	mov	r3, sp
    89b6:	1d99      	adds	r1, r3, #6
    89b8:	23ff      	movs	r3, #255	; 0xff
    89ba:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
    89bc:	466b      	mov	r3, sp
    89be:	1dd8      	adds	r0, r3, #7
    89c0:	2300      	movs	r3, #0
    89c2:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
    89c4:	68e3      	ldr	r3, [r4, #12]
    89c6:	6962      	ldr	r2, [r4, #20]
    89c8:	4d13      	ldr	r5, [pc, #76]	; (8a18 <MQTTConnect+0xcc>)
    89ca:	47a8      	blx	r5
    89cc:	2801      	cmp	r0, #1
    89ce:	d002      	beq.n	89d6 <MQTTConnect+0x8a>
            rc = FAILURE;
    89d0:	2001      	movs	r0, #1
    89d2:	4240      	negs	r0, r0
    89d4:	e7e3      	b.n	899e <MQTTConnect+0x52>
            rc = connack_rc;
    89d6:	466b      	mov	r3, sp
    89d8:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
    89da:	2800      	cmp	r0, #0
    89dc:	d1df      	bne.n	899e <MQTTConnect+0x52>
        c->isconnected = 1;
    89de:	2301      	movs	r3, #1
    89e0:	6223      	str	r3, [r4, #32]
    return rc;
    89e2:	e7dc      	b.n	899e <MQTTConnect+0x52>
    int rc = FAILURE;
    89e4:	2001      	movs	r0, #1
    89e6:	4240      	negs	r0, r0
    89e8:	e7d9      	b.n	899e <MQTTConnect+0x52>
    89ea:	2001      	movs	r0, #1
    89ec:	4240      	negs	r0, r0
    89ee:	e7d6      	b.n	899e <MQTTConnect+0x52>
        rc = FAILURE;
    89f0:	2001      	movs	r0, #1
    89f2:	4240      	negs	r0, r0
    89f4:	e7d3      	b.n	899e <MQTTConnect+0x52>
    89f6:	46c0      	nop			; (mov r8, r8)
    89f8:	0000e948 	.word	0x0000e948
    89fc:	0000bcb9 	.word	0x0000bcb9
    8a00:	00008e8d 	.word	0x00008e8d
    8a04:	00008e55 	.word	0x00008e55
    8a08:	00008e65 	.word	0x00008e65
    8a0c:	00009265 	.word	0x00009265
    8a10:	000084c9 	.word	0x000084c9
    8a14:	00008915 	.word	0x00008915
    8a18:	000093ad 	.word	0x000093ad

00008a1c <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
    8a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a1e:	b091      	sub	sp, #68	; 0x44
    8a20:	0004      	movs	r4, r0
    8a22:	000f      	movs	r7, r1
    8a24:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
    8a26:	2300      	movs	r3, #0
    8a28:	930c      	str	r3, [sp, #48]	; 0x30
    8a2a:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
    8a2c:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
    8a2e:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
    8a30:	6a03      	ldr	r3, [r0, #32]
    8a32:	2b00      	cmp	r3, #0
    8a34:	d05c      	beq.n	8af0 <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
    8a36:	a80e      	add	r0, sp, #56	; 0x38
    8a38:	4b32      	ldr	r3, [pc, #200]	; (8b04 <MQTTSubscribe+0xe8>)
    8a3a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8a3c:	6861      	ldr	r1, [r4, #4]
    8a3e:	a80e      	add	r0, sp, #56	; 0x38
    8a40:	4b31      	ldr	r3, [pc, #196]	; (8b08 <MQTTSubscribe+0xec>)
    8a42:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
    8a44:	6920      	ldr	r0, [r4, #16]
    8a46:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8a48:	6823      	ldr	r3, [r4, #0]
    8a4a:	4a30      	ldr	r2, [pc, #192]	; (8b0c <MQTTSubscribe+0xf0>)
    8a4c:	4293      	cmp	r3, r2
    8a4e:	d017      	beq.n	8a80 <MQTTSubscribe+0x64>
    8a50:	3301      	adds	r3, #1
    8a52:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
    8a54:	b29b      	uxth	r3, r3
    8a56:	aa0a      	add	r2, sp, #40	; 0x28
    8a58:	9202      	str	r2, [sp, #8]
    8a5a:	aa0b      	add	r2, sp, #44	; 0x2c
    8a5c:	9201      	str	r2, [sp, #4]
    8a5e:	2201      	movs	r2, #1
    8a60:	9200      	str	r2, [sp, #0]
    8a62:	2200      	movs	r2, #0
    8a64:	4e2a      	ldr	r6, [pc, #168]	; (8b10 <MQTTSubscribe+0xf4>)
    8a66:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
    8a68:	2800      	cmp	r0, #0
    8a6a:	dd44      	ble.n	8af6 <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8a6c:	aa0e      	add	r2, sp, #56	; 0x38
    8a6e:	0001      	movs	r1, r0
    8a70:	0020      	movs	r0, r4
    8a72:	4b28      	ldr	r3, [pc, #160]	; (8b14 <MQTTSubscribe+0xf8>)
    8a74:	4798      	blx	r3
    8a76:	1e06      	subs	r6, r0, #0
    8a78:	d004      	beq.n	8a84 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8a7a:	0030      	movs	r0, r6
    8a7c:	b011      	add	sp, #68	; 0x44
    8a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8a80:	2301      	movs	r3, #1
    8a82:	e7e6      	b.n	8a52 <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
    8a84:	aa0e      	add	r2, sp, #56	; 0x38
    8a86:	2109      	movs	r1, #9
    8a88:	0020      	movs	r0, r4
    8a8a:	4b23      	ldr	r3, [pc, #140]	; (8b18 <MQTTSubscribe+0xfc>)
    8a8c:	4798      	blx	r3
    8a8e:	2809      	cmp	r0, #9
    8a90:	d134      	bne.n	8afc <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
    8a92:	2300      	movs	r3, #0
    8a94:	9308      	str	r3, [sp, #32]
    8a96:	3b01      	subs	r3, #1
    8a98:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    8a9a:	68e3      	ldr	r3, [r4, #12]
    8a9c:	9301      	str	r3, [sp, #4]
    8a9e:	6963      	ldr	r3, [r4, #20]
    8aa0:	9300      	str	r3, [sp, #0]
    8aa2:	ab09      	add	r3, sp, #36	; 0x24
    8aa4:	aa08      	add	r2, sp, #32
    8aa6:	2101      	movs	r1, #1
    8aa8:	300d      	adds	r0, #13
    8aaa:	ad02      	add	r5, sp, #8
    8aac:	46ac      	mov	ip, r5
    8aae:	4460      	add	r0, ip
    8ab0:	4d1a      	ldr	r5, [pc, #104]	; (8b1c <MQTTSubscribe+0x100>)
    8ab2:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8ab4:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    8ab6:	2801      	cmp	r0, #1
    8ab8:	d00e      	beq.n	8ad8 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
    8aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8abc:	2b00      	cmp	r3, #0
    8abe:	d010      	beq.n	8ae2 <MQTTSubscribe+0xc6>
    8ac0:	0022      	movs	r2, r4
    8ac2:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    8ac4:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
    8ac6:	6810      	ldr	r0, [r2, #0]
    8ac8:	2800      	cmp	r0, #0
    8aca:	d00b      	beq.n	8ae4 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    8acc:	3301      	adds	r3, #1
    8ace:	3208      	adds	r2, #8
    8ad0:	2b05      	cmp	r3, #5
    8ad2:	d1f8      	bne.n	8ac6 <MQTTSubscribe+0xaa>
    8ad4:	000e      	movs	r6, r1
    8ad6:	e7d0      	b.n	8a7a <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
    8ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
    8ada:	2980      	cmp	r1, #128	; 0x80
    8adc:	d1ed      	bne.n	8aba <MQTTSubscribe+0x9e>
    8ade:	000e      	movs	r6, r1
    8ae0:	e7cb      	b.n	8a7a <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
    8ae2:	0033      	movs	r3, r6
    8ae4:	00db      	lsls	r3, r3, #3
    8ae6:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
    8ae8:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
    8aea:	9b05      	ldr	r3, [sp, #20]
    8aec:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
    8aee:	e7c4      	b.n	8a7a <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
    8af0:	2601      	movs	r6, #1
    8af2:	4276      	negs	r6, r6
    8af4:	e7c1      	b.n	8a7a <MQTTSubscribe+0x5e>
    8af6:	2601      	movs	r6, #1
    8af8:	4276      	negs	r6, r6
    8afa:	e7be      	b.n	8a7a <MQTTSubscribe+0x5e>
        rc = FAILURE;
    8afc:	2601      	movs	r6, #1
    8afe:	4276      	negs	r6, r6
    return rc;
    8b00:	e7bb      	b.n	8a7a <MQTTSubscribe+0x5e>
    8b02:	46c0      	nop			; (mov r8, r8)
    8b04:	00008e8d 	.word	0x00008e8d
    8b08:	00008e55 	.word	0x00008e55
    8b0c:	0000ffff 	.word	0x0000ffff
    8b10:	0000992d 	.word	0x0000992d
    8b14:	000084c9 	.word	0x000084c9
    8b18:	00008915 	.word	0x00008915
    8b1c:	000099e1 	.word	0x000099e1

00008b20 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
    8b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b22:	b08f      	sub	sp, #60	; 0x3c
    8b24:	0005      	movs	r5, r0
    8b26:	0014      	movs	r4, r2
    int rc = FAILURE;
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
    8b28:	2300      	movs	r3, #0
    8b2a:	930a      	str	r3, [sp, #40]	; 0x28
    8b2c:	930b      	str	r3, [sp, #44]	; 0x2c
    topic.cstring = (char *)topicName;
    8b2e:	9109      	str	r1, [sp, #36]	; 0x24
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
    8b30:	6a03      	ldr	r3, [r0, #32]
    8b32:	2b00      	cmp	r3, #0
    8b34:	d062      	beq.n	8bfc <MQTTPublish+0xdc>
		goto exit;

    TimerInit(&timer);
    8b36:	a80c      	add	r0, sp, #48	; 0x30
    8b38:	4b36      	ldr	r3, [pc, #216]	; (8c14 <MQTTPublish+0xf4>)
    8b3a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8b3c:	6869      	ldr	r1, [r5, #4]
    8b3e:	a80c      	add	r0, sp, #48	; 0x30
    8b40:	4b35      	ldr	r3, [pc, #212]	; (8c18 <MQTTPublish+0xf8>)
    8b42:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
    8b44:	7823      	ldrb	r3, [r4, #0]
    8b46:	3b01      	subs	r3, #1
    8b48:	2b01      	cmp	r3, #1
    8b4a:	d921      	bls.n	8b90 <MQTTPublish+0x70>
        message->id = getNextPacketId(c);
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
    8b4c:	7823      	ldrb	r3, [r4, #0]
    8b4e:	68e2      	ldr	r2, [r4, #12]
    8b50:	9206      	str	r2, [sp, #24]
    8b52:	68a2      	ldr	r2, [r4, #8]
    8b54:	9205      	str	r2, [sp, #20]
    8b56:	aa09      	add	r2, sp, #36	; 0x24
    8b58:	a902      	add	r1, sp, #8
    8b5a:	cac1      	ldmia	r2!, {r0, r6, r7}
    8b5c:	c1c1      	stmia	r1!, {r0, r6, r7}
    8b5e:	88a2      	ldrh	r2, [r4, #4]
    8b60:	9201      	str	r2, [sp, #4]
    8b62:	7862      	ldrb	r2, [r4, #1]
    8b64:	9200      	str	r2, [sp, #0]
    8b66:	2200      	movs	r2, #0
    8b68:	68a9      	ldr	r1, [r5, #8]
    8b6a:	6928      	ldr	r0, [r5, #16]
    8b6c:	4e2b      	ldr	r6, [pc, #172]	; (8c1c <MQTTPublish+0xfc>)
    8b6e:	47b0      	blx	r6
              topic, (unsigned char*)message->payload, message->payloadlen);
    if (len <= 0)
    8b70:	2800      	cmp	r0, #0
    8b72:	dd46      	ble.n	8c02 <MQTTPublish+0xe2>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8b74:	aa0c      	add	r2, sp, #48	; 0x30
    8b76:	0001      	movs	r1, r0
    8b78:	0028      	movs	r0, r5
    8b7a:	4b29      	ldr	r3, [pc, #164]	; (8c20 <MQTTPublish+0x100>)
    8b7c:	4798      	blx	r3
    8b7e:	2800      	cmp	r0, #0
    8b80:	d104      	bne.n	8b8c <MQTTPublish+0x6c>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
    8b82:	7823      	ldrb	r3, [r4, #0]
    8b84:	2b01      	cmp	r3, #1
    8b86:	d00d      	beq.n	8ba4 <MQTTPublish+0x84>
                rc = FAILURE;
        }
        else
            rc = FAILURE;
    }
    else if (message->qos == QOS2)
    8b88:	2b02      	cmp	r3, #2
    8b8a:	d021      	beq.n	8bd0 <MQTTPublish+0xb0>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8b8c:	b00f      	add	sp, #60	; 0x3c
    8b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8b90:	682b      	ldr	r3, [r5, #0]
    8b92:	4a24      	ldr	r2, [pc, #144]	; (8c24 <MQTTPublish+0x104>)
    8b94:	4293      	cmp	r3, r2
    8b96:	d003      	beq.n	8ba0 <MQTTPublish+0x80>
    8b98:	3301      	adds	r3, #1
    8b9a:	602b      	str	r3, [r5, #0]
        message->id = getNextPacketId(c);
    8b9c:	80a3      	strh	r3, [r4, #4]
    8b9e:	e7d5      	b.n	8b4c <MQTTPublish+0x2c>
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8ba0:	2301      	movs	r3, #1
    8ba2:	e7fa      	b.n	8b9a <MQTTPublish+0x7a>
        if (waitfor(c, PUBACK, &timer) == PUBACK)
    8ba4:	aa0c      	add	r2, sp, #48	; 0x30
    8ba6:	2104      	movs	r1, #4
    8ba8:	0028      	movs	r0, r5
    8baa:	4b1f      	ldr	r3, [pc, #124]	; (8c28 <MQTTPublish+0x108>)
    8bac:	4798      	blx	r3
    8bae:	2804      	cmp	r0, #4
    8bb0:	d12a      	bne.n	8c08 <MQTTPublish+0xe8>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    8bb2:	696b      	ldr	r3, [r5, #20]
    8bb4:	68ea      	ldr	r2, [r5, #12]
    8bb6:	9200      	str	r2, [sp, #0]
    8bb8:	2222      	movs	r2, #34	; 0x22
    8bba:	446a      	add	r2, sp
    8bbc:	a908      	add	r1, sp, #32
    8bbe:	301d      	adds	r0, #29
    8bc0:	4468      	add	r0, sp
    8bc2:	4c1a      	ldr	r4, [pc, #104]	; (8c2c <MQTTPublish+0x10c>)
    8bc4:	47a0      	blx	r4
    8bc6:	3801      	subs	r0, #1
    8bc8:	1e43      	subs	r3, r0, #1
    8bca:	4198      	sbcs	r0, r3
    8bcc:	4240      	negs	r0, r0
    8bce:	e7dd      	b.n	8b8c <MQTTPublish+0x6c>
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
    8bd0:	aa0c      	add	r2, sp, #48	; 0x30
    8bd2:	2107      	movs	r1, #7
    8bd4:	0028      	movs	r0, r5
    8bd6:	4b14      	ldr	r3, [pc, #80]	; (8c28 <MQTTPublish+0x108>)
    8bd8:	4798      	blx	r3
    8bda:	2807      	cmp	r0, #7
    8bdc:	d117      	bne.n	8c0e <MQTTPublish+0xee>
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    8bde:	696b      	ldr	r3, [r5, #20]
    8be0:	68ea      	ldr	r2, [r5, #12]
    8be2:	9200      	str	r2, [sp, #0]
    8be4:	2222      	movs	r2, #34	; 0x22
    8be6:	446a      	add	r2, sp
    8be8:	a908      	add	r1, sp, #32
    8bea:	301a      	adds	r0, #26
    8bec:	4468      	add	r0, sp
    8bee:	4c0f      	ldr	r4, [pc, #60]	; (8c2c <MQTTPublish+0x10c>)
    8bf0:	47a0      	blx	r4
    8bf2:	3801      	subs	r0, #1
    8bf4:	1e43      	subs	r3, r0, #1
    8bf6:	4198      	sbcs	r0, r3
    8bf8:	4240      	negs	r0, r0
    8bfa:	e7c7      	b.n	8b8c <MQTTPublish+0x6c>
    int rc = FAILURE;
    8bfc:	2001      	movs	r0, #1
    8bfe:	4240      	negs	r0, r0
    8c00:	e7c4      	b.n	8b8c <MQTTPublish+0x6c>
    8c02:	2001      	movs	r0, #1
    8c04:	4240      	negs	r0, r0
    8c06:	e7c1      	b.n	8b8c <MQTTPublish+0x6c>
            rc = FAILURE;
    8c08:	2001      	movs	r0, #1
    8c0a:	4240      	negs	r0, r0
    8c0c:	e7be      	b.n	8b8c <MQTTPublish+0x6c>
            rc = FAILURE;
    8c0e:	2001      	movs	r0, #1
    8c10:	4240      	negs	r0, r0
    return rc;
    8c12:	e7bb      	b.n	8b8c <MQTTPublish+0x6c>
    8c14:	00008e8d 	.word	0x00008e8d
    8c18:	00008e55 	.word	0x00008e55
    8c1c:	000097cd 	.word	0x000097cd
    8c20:	000084c9 	.word	0x000084c9
    8c24:	0000ffff 	.word	0x0000ffff
    8c28:	00008915 	.word	0x00008915
    8c2c:	000094f1 	.word	0x000094f1

00008c30 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
    8c30:	b510      	push	{r4, lr}
    8c32:	b082      	sub	sp, #8
    8c34:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
    8c36:	4668      	mov	r0, sp
    8c38:	4b0b      	ldr	r3, [pc, #44]	; (8c68 <MQTTDisconnect+0x38>)
    8c3a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8c3c:	6861      	ldr	r1, [r4, #4]
    8c3e:	4668      	mov	r0, sp
    8c40:	4b0a      	ldr	r3, [pc, #40]	; (8c6c <MQTTDisconnect+0x3c>)
    8c42:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
    8c44:	68a1      	ldr	r1, [r4, #8]
    8c46:	6920      	ldr	r0, [r4, #16]
    8c48:	4b09      	ldr	r3, [pc, #36]	; (8c70 <MQTTDisconnect+0x40>)
    8c4a:	4798      	blx	r3
    if (len > 0)
    8c4c:	2800      	cmp	r0, #0
    8c4e:	dd08      	ble.n	8c62 <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
    8c50:	466a      	mov	r2, sp
    8c52:	0001      	movs	r1, r0
    8c54:	0020      	movs	r0, r4
    8c56:	4b07      	ldr	r3, [pc, #28]	; (8c74 <MQTTDisconnect+0x44>)
    8c58:	4798      	blx	r3
        
    c->isconnected = 0;
    8c5a:	2300      	movs	r3, #0
    8c5c:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8c5e:	b002      	add	sp, #8
    8c60:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
    8c62:	2001      	movs	r0, #1
    8c64:	4240      	negs	r0, r0
    8c66:	e7f8      	b.n	8c5a <MQTTDisconnect+0x2a>
    8c68:	00008e8d 	.word	0x00008e8d
    8c6c:	00008e55 	.word	0x00008e55
    8c70:	00009439 	.word	0x00009439
    8c74:	000084c9 	.word	0x000084c9

00008c78 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
    8c78:	b510      	push	{r4, lr}
    8c7a:	0004      	movs	r4, r0
	close(n->socket);
    8c7c:	2000      	movs	r0, #0
    8c7e:	5620      	ldrsb	r0, [r4, r0]
    8c80:	4b04      	ldr	r3, [pc, #16]	; (8c94 <WINC1500_disconnect+0x1c>)
    8c82:	4798      	blx	r3
	n->socket=-1;
    8c84:	2301      	movs	r3, #1
    8c86:	425b      	negs	r3, r3
    8c88:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
    8c8a:	2200      	movs	r2, #0
    8c8c:	4b02      	ldr	r3, [pc, #8]	; (8c98 <WINC1500_disconnect+0x20>)
    8c8e:	701a      	strb	r2, [r3, #0]
}
    8c90:	bd10      	pop	{r4, pc}
    8c92:	46c0      	nop			; (mov r8, r8)
    8c94:	000041c9 	.word	0x000041c9
    8c98:	20000440 	.word	0x20000440

00008c9c <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
    8c9c:	b570      	push	{r4, r5, r6, lr}
    8c9e:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
    8ca0:	2200      	movs	r2, #0
    8ca2:	4b0d      	ldr	r3, [pc, #52]	; (8cd8 <WINC1500_write+0x3c>)
    8ca4:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
    8ca6:	b2b2      	uxth	r2, r6
    8ca8:	7800      	ldrb	r0, [r0, #0]
    8caa:	b240      	sxtb	r0, r0
    8cac:	2300      	movs	r3, #0
    8cae:	4c0b      	ldr	r4, [pc, #44]	; (8cdc <WINC1500_write+0x40>)
    8cb0:	47a0      	blx	r4
    8cb2:	2800      	cmp	r0, #0
    8cb4:	d10c      	bne.n	8cd0 <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
    8cb6:	4b08      	ldr	r3, [pc, #32]	; (8cd8 <WINC1500_write+0x3c>)
    8cb8:	781b      	ldrb	r3, [r3, #0]
    8cba:	2b00      	cmp	r3, #0
    8cbc:	d106      	bne.n	8ccc <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
    8cbe:	4d08      	ldr	r5, [pc, #32]	; (8ce0 <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
    8cc0:	4c05      	ldr	r4, [pc, #20]	; (8cd8 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
    8cc2:	2000      	movs	r0, #0
    8cc4:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
    8cc6:	7823      	ldrb	r3, [r4, #0]
    8cc8:	2b00      	cmp	r3, #0
    8cca:	d0fa      	beq.n	8cc2 <WINC1500_write+0x26>
}
    8ccc:	0030      	movs	r0, r6
    8cce:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
    8cd0:	2601      	movs	r6, #1
    8cd2:	4276      	negs	r6, r6
    8cd4:	e7fa      	b.n	8ccc <WINC1500_write+0x30>
    8cd6:	46c0      	nop			; (mov r8, r8)
    8cd8:	20000443 	.word	0x20000443
    8cdc:	0000409d 	.word	0x0000409d
    8ce0:	00002301 	.word	0x00002301

00008ce4 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
    8ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ce6:	b083      	sub	sp, #12
    8ce8:	9101      	str	r1, [sp, #4]
    8cea:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
    8cec:	2b00      	cmp	r3, #0
    8cee:	d100      	bne.n	8cf2 <WINC1500_read+0xe>
    8cf0:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
    8cf2:	4a22      	ldr	r2, [pc, #136]	; (8d7c <WINC1500_read+0x98>)
    8cf4:	6812      	ldr	r2, [r2, #0]
    8cf6:	2a00      	cmp	r2, #0
    8cf8:	d013      	beq.n	8d22 <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
    8cfa:	4b20      	ldr	r3, [pc, #128]	; (8d7c <WINC1500_read+0x98>)
    8cfc:	681d      	ldr	r5, [r3, #0]
    8cfe:	42a5      	cmp	r5, r4
    8d00:	db39      	blt.n	8d76 <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
    8d02:	4e1f      	ldr	r6, [pc, #124]	; (8d80 <WINC1500_read+0x9c>)
    8d04:	6837      	ldr	r7, [r6, #0]
    8d06:	491f      	ldr	r1, [pc, #124]	; (8d84 <WINC1500_read+0xa0>)
    8d08:	19c9      	adds	r1, r1, r7
    8d0a:	0022      	movs	r2, r4
    8d0c:	9801      	ldr	r0, [sp, #4]
    8d0e:	4b1e      	ldr	r3, [pc, #120]	; (8d88 <WINC1500_read+0xa4>)
    8d10:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
    8d12:	1b2d      	subs	r5, r5, r4
    8d14:	4b19      	ldr	r3, [pc, #100]	; (8d7c <WINC1500_read+0x98>)
    8d16:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
    8d18:	193f      	adds	r7, r7, r4
    8d1a:	6037      	str	r7, [r6, #0]
  return len;
    8d1c:	0020      	movs	r0, r4
}
    8d1e:	b003      	add	sp, #12
    8d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
    8d22:	2100      	movs	r1, #0
    8d24:	4a19      	ldr	r2, [pc, #100]	; (8d8c <WINC1500_read+0xa8>)
    8d26:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
    8d28:	7800      	ldrb	r0, [r0, #0]
    8d2a:	b240      	sxtb	r0, r0
    8d2c:	2280      	movs	r2, #128	; 0x80
    8d2e:	0052      	lsls	r2, r2, #1
    8d30:	4914      	ldr	r1, [pc, #80]	; (8d84 <WINC1500_read+0xa0>)
    8d32:	4d17      	ldr	r5, [pc, #92]	; (8d90 <WINC1500_read+0xac>)
    8d34:	47a8      	blx	r5
    8d36:	2800      	cmp	r0, #0
    8d38:	d11a      	bne.n	8d70 <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
    8d3a:	4b14      	ldr	r3, [pc, #80]	; (8d8c <WINC1500_read+0xa8>)
    8d3c:	781b      	ldrb	r3, [r3, #0]
    8d3e:	2b00      	cmp	r3, #0
    8d40:	d106      	bne.n	8d50 <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
    8d42:	4f14      	ldr	r7, [pc, #80]	; (8d94 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
    8d44:	4d11      	ldr	r5, [pc, #68]	; (8d8c <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
    8d46:	2000      	movs	r0, #0
    8d48:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
    8d4a:	782b      	ldrb	r3, [r5, #0]
    8d4c:	2b00      	cmp	r3, #0
    8d4e:	d0fa      	beq.n	8d46 <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
    8d50:	4b11      	ldr	r3, [pc, #68]	; (8d98 <WINC1500_read+0xb4>)
    8d52:	6818      	ldr	r0, [r3, #0]
    8d54:	2800      	cmp	r0, #0
    8d56:	dd05      	ble.n	8d64 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
    8d58:	4b08      	ldr	r3, [pc, #32]	; (8d7c <WINC1500_read+0x98>)
    8d5a:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
    8d5c:	2200      	movs	r2, #0
    8d5e:	4b08      	ldr	r3, [pc, #32]	; (8d80 <WINC1500_read+0x9c>)
    8d60:	601a      	str	r2, [r3, #0]
    8d62:	e7ca      	b.n	8cfa <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
    8d64:	2300      	movs	r3, #0
    8d66:	4a05      	ldr	r2, [pc, #20]	; (8d7c <WINC1500_read+0x98>)
    8d68:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
    8d6a:	4a05      	ldr	r2, [pc, #20]	; (8d80 <WINC1500_read+0x9c>)
    8d6c:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
    8d6e:	e7d6      	b.n	8d1e <WINC1500_read+0x3a>
		  return -1;
    8d70:	2001      	movs	r0, #1
    8d72:	4240      	negs	r0, r0
    8d74:	e7d3      	b.n	8d1e <WINC1500_read+0x3a>
	  return -1;
    8d76:	2001      	movs	r0, #1
    8d78:	4240      	negs	r0, r0
    8d7a:	e7d0      	b.n	8d1e <WINC1500_read+0x3a>
    8d7c:	20000550 	.word	0x20000550
    8d80:	20000554 	.word	0x20000554
    8d84:	20000444 	.word	0x20000444
    8d88:	0000bcb9 	.word	0x0000bcb9
    8d8c:	20000442 	.word	0x20000442
    8d90:	00004135 	.word	0x00004135
    8d94:	00002301 	.word	0x00002301
    8d98:	20000548 	.word	0x20000548

00008d9c <dnsResolveCallback>:
{
    8d9c:	b510      	push	{r4, lr}
    8d9e:	0002      	movs	r2, r0
    8da0:	000c      	movs	r4, r1
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
    8da2:	4b08      	ldr	r3, [pc, #32]	; (8dc4 <dnsResolveCallback+0x28>)
    8da4:	781b      	ldrb	r3, [r3, #0]
    8da6:	2b00      	cmp	r3, #0
    8da8:	d10b      	bne.n	8dc2 <dnsResolveCallback+0x26>
    8daa:	4b07      	ldr	r3, [pc, #28]	; (8dc8 <dnsResolveCallback+0x2c>)
    8dac:	6818      	ldr	r0, [r3, #0]
    8dae:	0011      	movs	r1, r2
    8db0:	4b06      	ldr	r3, [pc, #24]	; (8dcc <dnsResolveCallback+0x30>)
    8db2:	4798      	blx	r3
    8db4:	2800      	cmp	r0, #0
    8db6:	d104      	bne.n	8dc2 <dnsResolveCallback+0x26>
		gi32MQTTBrokerIp = hostIp;
    8db8:	4b05      	ldr	r3, [pc, #20]	; (8dd0 <dnsResolveCallback+0x34>)
    8dba:	601c      	str	r4, [r3, #0]
		gbMQTTBrokerIpresolved = true;
    8dbc:	2201      	movs	r2, #1
    8dbe:	4b01      	ldr	r3, [pc, #4]	; (8dc4 <dnsResolveCallback+0x28>)
    8dc0:	701a      	strb	r2, [r3, #0]
}
    8dc2:	bd10      	pop	{r4, pc}
    8dc4:	20000441 	.word	0x20000441
    8dc8:	2000054c 	.word	0x2000054c
    8dcc:	0000c1b9 	.word	0x0000c1b9
    8dd0:	20000544 	.word	0x20000544

00008dd4 <tcpClientSocketEventHandler>:
{
    8dd4:	b530      	push	{r4, r5, lr}
    8dd6:	4b12      	ldr	r3, [pc, #72]	; (8e20 <tcpClientSocketEventHandler+0x4c>)
    8dd8:	24a8      	movs	r4, #168	; 0xa8
    8dda:	00a4      	lsls	r4, r4, #2
    8ddc:	191d      	adds	r5, r3, r4
    8dde:	e002      	b.n	8de6 <tcpClientSocketEventHandler+0x12>
    8de0:	3360      	adds	r3, #96	; 0x60
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    8de2:	42ab      	cmp	r3, r5
    8de4:	d00b      	beq.n	8dfe <tcpClientSocketEventHandler+0x2a>
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
    8de6:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    8de8:	2c00      	cmp	r4, #0
    8dea:	d0f9      	beq.n	8de0 <tcpClientSocketEventHandler+0xc>
			if(mqttInstance->network.socket == sock)
    8dec:	6a24      	ldr	r4, [r4, #32]
    8dee:	4284      	cmp	r4, r0
    8df0:	d1f6      	bne.n	8de0 <tcpClientSocketEventHandler+0xc>
		switch (u8Msg) {
    8df2:	2906      	cmp	r1, #6
    8df4:	d00c      	beq.n	8e10 <tcpClientSocketEventHandler+0x3c>
    8df6:	2907      	cmp	r1, #7
    8df8:	d006      	beq.n	8e08 <tcpClientSocketEventHandler+0x34>
    8dfa:	2905      	cmp	r1, #5
    8dfc:	d000      	beq.n	8e00 <tcpClientSocketEventHandler+0x2c>
}
    8dfe:	bd30      	pop	{r4, r5, pc}
				gbMQTTBrokerConnected=true;
    8e00:	2201      	movs	r2, #1
    8e02:	4b08      	ldr	r3, [pc, #32]	; (8e24 <tcpClientSocketEventHandler+0x50>)
    8e04:	701a      	strb	r2, [r3, #0]
			break;
    8e06:	e7fa      	b.n	8dfe <tcpClientSocketEventHandler+0x2a>
				gbMQTTBrokerSendDone=true;
    8e08:	2201      	movs	r2, #1
    8e0a:	4b07      	ldr	r3, [pc, #28]	; (8e28 <tcpClientSocketEventHandler+0x54>)
    8e0c:	701a      	strb	r2, [r3, #0]
			break;
    8e0e:	e7f6      	b.n	8dfe <tcpClientSocketEventHandler+0x2a>
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
    8e10:	2304      	movs	r3, #4
    8e12:	5ed2      	ldrsh	r2, [r2, r3]
    8e14:	4b05      	ldr	r3, [pc, #20]	; (8e2c <tcpClientSocketEventHandler+0x58>)
    8e16:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
    8e18:	2201      	movs	r2, #1
    8e1a:	4b05      	ldr	r3, [pc, #20]	; (8e30 <tcpClientSocketEventHandler+0x5c>)
    8e1c:	701a      	strb	r2, [r3, #0]
}
    8e1e:	e7ee      	b.n	8dfe <tcpClientSocketEventHandler+0x2a>
    8e20:	20000558 	.word	0x20000558
    8e24:	20000440 	.word	0x20000440
    8e28:	20000443 	.word	0x20000443
    8e2c:	20000548 	.word	0x20000548
    8e30:	20000442 	.word	0x20000442

00008e34 <SysTick_Handler>:
	MilliTimer++;
    8e34:	4a02      	ldr	r2, [pc, #8]	; (8e40 <SysTick_Handler+0xc>)
    8e36:	6813      	ldr	r3, [r2, #0]
    8e38:	3301      	adds	r3, #1
    8e3a:	6013      	str	r3, [r2, #0]
}
    8e3c:	4770      	bx	lr
    8e3e:	46c0      	nop			; (mov r8, r8)
    8e40:	2000043c 	.word	0x2000043c

00008e44 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
    8e44:	6840      	ldr	r0, [r0, #4]
    8e46:	4b02      	ldr	r3, [pc, #8]	; (8e50 <TimerIsExpired+0xc>)
    8e48:	681b      	ldr	r3, [r3, #0]
    8e4a:	1ac0      	subs	r0, r0, r3
	return (left < 0);
    8e4c:	0fc0      	lsrs	r0, r0, #31
}
    8e4e:	4770      	bx	lr
    8e50:	2000043c 	.word	0x2000043c

00008e54 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
    8e54:	4b02      	ldr	r3, [pc, #8]	; (8e60 <TimerCountdownMS+0xc>)
    8e56:	681b      	ldr	r3, [r3, #0]
    8e58:	1859      	adds	r1, r3, r1
    8e5a:	6041      	str	r1, [r0, #4]
}
    8e5c:	4770      	bx	lr
    8e5e:	46c0      	nop			; (mov r8, r8)
    8e60:	2000043c 	.word	0x2000043c

00008e64 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
    8e64:	23fa      	movs	r3, #250	; 0xfa
    8e66:	009b      	lsls	r3, r3, #2
    8e68:	4359      	muls	r1, r3
    8e6a:	4b02      	ldr	r3, [pc, #8]	; (8e74 <TimerCountdown+0x10>)
    8e6c:	681b      	ldr	r3, [r3, #0]
    8e6e:	18c9      	adds	r1, r1, r3
    8e70:	6041      	str	r1, [r0, #4]
}
    8e72:	4770      	bx	lr
    8e74:	2000043c 	.word	0x2000043c

00008e78 <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
    8e78:	6840      	ldr	r0, [r0, #4]
    8e7a:	4b03      	ldr	r3, [pc, #12]	; (8e88 <TimerLeftMS+0x10>)
    8e7c:	681b      	ldr	r3, [r3, #0]
    8e7e:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
    8e80:	43c3      	mvns	r3, r0
    8e82:	17db      	asrs	r3, r3, #31
    8e84:	4018      	ands	r0, r3
}
    8e86:	4770      	bx	lr
    8e88:	2000043c 	.word	0x2000043c

00008e8c <TimerInit>:
	timer->end_time = 0;
    8e8c:	2300      	movs	r3, #0
    8e8e:	6043      	str	r3, [r0, #4]
}
    8e90:	4770      	bx	lr
	...

00008e94 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
    8e94:	2301      	movs	r3, #1
    8e96:	425b      	negs	r3, r3
    8e98:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
    8e9a:	4b03      	ldr	r3, [pc, #12]	; (8ea8 <NetworkInit+0x14>)
    8e9c:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
    8e9e:	4b03      	ldr	r3, [pc, #12]	; (8eac <NetworkInit+0x18>)
    8ea0:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
    8ea2:	4b03      	ldr	r3, [pc, #12]	; (8eb0 <NetworkInit+0x1c>)
    8ea4:	6103      	str	r3, [r0, #16]
}
    8ea6:	4770      	bx	lr
    8ea8:	00008ce5 	.word	0x00008ce5
    8eac:	00008c9d 	.word	0x00008c9d
    8eb0:	00008c79 	.word	0x00008c79

00008eb4 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
    8eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8eb6:	b087      	sub	sp, #28
    8eb8:	0006      	movs	r6, r0
    8eba:	0015      	movs	r5, r2
    8ebc:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
    8ebe:	4c25      	ldr	r4, [pc, #148]	; (8f54 <ConnectNetwork+0xa0>)
    8ec0:	2300      	movs	r3, #0
    8ec2:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
    8ec4:	4b24      	ldr	r3, [pc, #144]	; (8f58 <ConnectNetwork+0xa4>)
    8ec6:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
    8ec8:	0008      	movs	r0, r1
    8eca:	4b24      	ldr	r3, [pc, #144]	; (8f5c <ConnectNetwork+0xa8>)
    8ecc:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
    8ece:	7823      	ldrb	r3, [r4, #0]
    8ed0:	2b00      	cmp	r3, #0
    8ed2:	d106      	bne.n	8ee2 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
    8ed4:	4f22      	ldr	r7, [pc, #136]	; (8f60 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
    8ed6:	4c1f      	ldr	r4, [pc, #124]	; (8f54 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
    8ed8:	2000      	movs	r0, #0
    8eda:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
    8edc:	7823      	ldrb	r3, [r4, #0]
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d0fa      	beq.n	8ed8 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
    8ee2:	4b20      	ldr	r3, [pc, #128]	; (8f64 <ConnectNetwork+0xb0>)
    8ee4:	681a      	ldr	r2, [r3, #0]
    8ee6:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
    8ee8:	2302      	movs	r3, #2
    8eea:	a902      	add	r1, sp, #8
    8eec:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
    8eee:	022b      	lsls	r3, r5, #8
    8ef0:	491d      	ldr	r1, [pc, #116]	; (8f68 <ConnectNetwork+0xb4>)
    8ef2:	400b      	ands	r3, r1
    8ef4:	b2ad      	uxth	r5, r5
    8ef6:	0a2d      	lsrs	r5, r5, #8
    8ef8:	431d      	orrs	r5, r3
    8efa:	ab02      	add	r3, sp, #8
    8efc:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
    8efe:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
    8f00:	6833      	ldr	r3, [r6, #0]
    8f02:	2b00      	cmp	r3, #0
    8f04:	db16      	blt.n	8f34 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
    8f06:	6830      	ldr	r0, [r6, #0]
    8f08:	1c43      	adds	r3, r0, #1
    8f0a:	d01b      	beq.n	8f44 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
    8f0c:	b240      	sxtb	r0, r0
    8f0e:	2210      	movs	r2, #16
    8f10:	a902      	add	r1, sp, #8
    8f12:	4b16      	ldr	r3, [pc, #88]	; (8f6c <ConnectNetwork+0xb8>)
    8f14:	4798      	blx	r3
    8f16:	2800      	cmp	r0, #0
    8f18:	d119      	bne.n	8f4e <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
    8f1a:	2200      	movs	r2, #0
    8f1c:	4b14      	ldr	r3, [pc, #80]	; (8f70 <ConnectNetwork+0xbc>)
    8f1e:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
    8f20:	4d0f      	ldr	r5, [pc, #60]	; (8f60 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
    8f22:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
    8f24:	2000      	movs	r0, #0
    8f26:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
    8f28:	7823      	ldrb	r3, [r4, #0]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d0fa      	beq.n	8f24 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
    8f2e:	2000      	movs	r0, #0
    8f30:	b007      	add	sp, #28
    8f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
    8f34:	466b      	mov	r3, sp
    8f36:	791a      	ldrb	r2, [r3, #4]
    8f38:	2101      	movs	r1, #1
    8f3a:	2002      	movs	r0, #2
    8f3c:	4b0d      	ldr	r3, [pc, #52]	; (8f74 <ConnectNetwork+0xc0>)
    8f3e:	4798      	blx	r3
    8f40:	6030      	str	r0, [r6, #0]
    8f42:	e7e0      	b.n	8f06 <ConnectNetwork+0x52>
   close(n->socket);
    8f44:	4b0c      	ldr	r3, [pc, #48]	; (8f78 <ConnectNetwork+0xc4>)
    8f46:	4798      	blx	r3
   return SOCK_ERR_INVALID;
    8f48:	2009      	movs	r0, #9
    8f4a:	4240      	negs	r0, r0
    8f4c:	e7f0      	b.n	8f30 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
    8f4e:	2009      	movs	r0, #9
    8f50:	4240      	negs	r0, r0
    8f52:	e7ed      	b.n	8f30 <ConnectNetwork+0x7c>
    8f54:	20000441 	.word	0x20000441
    8f58:	2000054c 	.word	0x2000054c
    8f5c:	000042d1 	.word	0x000042d1
    8f60:	00002301 	.word	0x00002301
    8f64:	20000544 	.word	0x20000544
    8f68:	00ffff00 	.word	0x00ffff00
    8f6c:	0000400d 	.word	0x0000400d
    8f70:	20000440 	.word	0x20000440
    8f74:	00003e89 	.word	0x00003e89
    8f78:	000041c9 	.word	0x000041c9

00008f7c <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
    8f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f7e:	b085      	sub	sp, #20
    8f80:	0006      	movs	r6, r0
    8f82:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
    8f84:	2800      	cmp	r0, #0
    8f86:	d03d      	beq.n	9004 <mqtt_init+0x88>
    8f88:	2900      	cmp	r1, #0
    8f8a:	d03e      	beq.n	900a <mqtt_init+0x8e>
    8f8c:	690b      	ldr	r3, [r1, #16]
    8f8e:	2b00      	cmp	r3, #0
    8f90:	d03e      	beq.n	9010 <mqtt_init+0x94>
    8f92:	688b      	ldr	r3, [r1, #8]
    8f94:	2b00      	cmp	r3, #0
    8f96:	d03e      	beq.n	9016 <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
    8f98:	888b      	ldrh	r3, [r1, #4]
    8f9a:	27fa      	movs	r7, #250	; 0xfa
    8f9c:	00bf      	lsls	r7, r7, #2
    8f9e:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
    8fa0:	0004      	movs	r4, r0
    8fa2:	3420      	adds	r4, #32
    8fa4:	0020      	movs	r0, r4
    8fa6:	4b1f      	ldr	r3, [pc, #124]	; (9024 <mqtt_init+0xa8>)
    8fa8:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
    8faa:	1d30      	adds	r0, r6, #4
    8fac:	2218      	movs	r2, #24
    8fae:	0029      	movs	r1, r5
    8fb0:	4b1d      	ldr	r3, [pc, #116]	; (9028 <mqtt_init+0xac>)
    8fb2:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    8fb4:	4b1d      	ldr	r3, [pc, #116]	; (902c <mqtt_init+0xb0>)
    8fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8fb8:	2b00      	cmp	r3, #0
    8fba:	d01a      	beq.n	8ff2 <mqtt_init+0x76>
    8fbc:	4b1b      	ldr	r3, [pc, #108]	; (902c <mqtt_init+0xb0>)
    8fbe:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    8fc0:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    8fc2:	6819      	ldr	r1, [r3, #0]
    8fc4:	2900      	cmp	r1, #0
    8fc6:	d015      	beq.n	8ff4 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    8fc8:	3201      	adds	r2, #1
    8fca:	3360      	adds	r3, #96	; 0x60
    8fcc:	2a07      	cmp	r2, #7
    8fce:	d1f8      	bne.n	8fc2 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
    8fd0:	69f0      	ldr	r0, [r6, #28]
    8fd2:	2800      	cmp	r0, #0
    8fd4:	d022      	beq.n	901c <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
    8fd6:	692b      	ldr	r3, [r5, #16]
    8fd8:	68ea      	ldr	r2, [r5, #12]
    8fda:	9202      	str	r2, [sp, #8]
    8fdc:	68aa      	ldr	r2, [r5, #8]
    8fde:	9201      	str	r2, [sp, #4]
    8fe0:	696a      	ldr	r2, [r5, #20]
    8fe2:	9200      	str	r2, [sp, #0]
    8fe4:	003a      	movs	r2, r7
    8fe6:	0021      	movs	r1, r4
    8fe8:	4c11      	ldr	r4, [pc, #68]	; (9030 <mqtt_init+0xb4>)
    8fea:	47a0      	blx	r4
		return SUCCESS;
    8fec:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    8fee:	b005      	add	sp, #20
    8ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    8ff2:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
    8ff4:	480d      	ldr	r0, [pc, #52]	; (902c <mqtt_init+0xb0>)
    8ff6:	0053      	lsls	r3, r2, #1
    8ff8:	1899      	adds	r1, r3, r2
    8ffa:	0149      	lsls	r1, r1, #5
    8ffc:	1841      	adds	r1, r0, r1
    8ffe:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
    9000:	61f1      	str	r1, [r6, #28]
    9002:	e7e5      	b.n	8fd0 <mqtt_init+0x54>
		return FAILURE;
    9004:	2001      	movs	r0, #1
    9006:	4240      	negs	r0, r0
    9008:	e7f1      	b.n	8fee <mqtt_init+0x72>
    900a:	2001      	movs	r0, #1
    900c:	4240      	negs	r0, r0
    900e:	e7ee      	b.n	8fee <mqtt_init+0x72>
    9010:	2001      	movs	r0, #1
    9012:	4240      	negs	r0, r0
    9014:	e7eb      	b.n	8fee <mqtt_init+0x72>
    9016:	2001      	movs	r0, #1
    9018:	4240      	negs	r0, r0
    901a:	e7e8      	b.n	8fee <mqtt_init+0x72>
		return FAILURE;
    901c:	2001      	movs	r0, #1
    901e:	4240      	negs	r0, r0
    9020:	e7e5      	b.n	8fee <mqtt_init+0x72>
    9022:	46c0      	nop			; (mov r8, r8)
    9024:	00008e95 	.word	0x00008e95
    9028:	0000bcb9 	.word	0x0000bcb9
    902c:	20000558 	.word	0x20000558
    9030:	00008545 	.word	0x00008545

00009034 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
    9034:	4b05      	ldr	r3, [pc, #20]	; (904c <mqtt_get_config_defaults+0x18>)
    9036:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    9038:	2300      	movs	r3, #0
    903a:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
    903c:	223c      	movs	r2, #60	; 0x3c
    903e:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
    9040:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
    9042:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
    9044:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
    9046:	6143      	str	r3, [r0, #20]
}
    9048:	4770      	bx	lr
    904a:	46c0      	nop			; (mov r8, r8)
    904c:	0000075b 	.word	0x0000075b

00009050 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
    9050:	2800      	cmp	r0, #0
    9052:	d002      	beq.n	905a <mqtt_register_callback+0xa>
	{
		module->callback = callback;
    9054:	6001      	str	r1, [r0, #0]
		return SUCCESS;
    9056:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    9058:	4770      	bx	lr
		return FAILURE;
    905a:	2001      	movs	r0, #1
    905c:	4240      	negs	r0, r0
    905e:	e7fb      	b.n	9058 <mqtt_register_callback+0x8>

00009060 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
    9060:	b510      	push	{r4, lr}
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
    9062:	4b01      	ldr	r3, [pc, #4]	; (9068 <mqtt_socket_event_handler+0x8>)
    9064:	4798      	blx	r3
}
    9066:	bd10      	pop	{r4, pc}
    9068:	00008dd5 	.word	0x00008dd5

0000906c <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
    906c:	b510      	push	{r4, lr}
	dnsResolveCallback(domain_name, server_ip);
    906e:	4b01      	ldr	r3, [pc, #4]	; (9074 <mqtt_socket_resolve_handler+0x8>)
    9070:	4798      	blx	r3
}
    9072:	bd10      	pop	{r4, pc}
    9074:	00008d9d 	.word	0x00008d9d

00009078 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
    9078:	b530      	push	{r4, r5, lr}
    907a:	b083      	sub	sp, #12
    907c:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
    907e:	7983      	ldrb	r3, [r0, #6]
    9080:	8882      	ldrh	r2, [r0, #4]
    9082:	3020      	adds	r0, #32
    9084:	4d06      	ldr	r5, [pc, #24]	; (90a0 <mqtt_connect+0x28>)
    9086:	47a8      	blx	r5
    9088:	9001      	str	r0, [sp, #4]
	if(module->callback)
    908a:	6823      	ldr	r3, [r4, #0]
    908c:	2b00      	cmp	r3, #0
    908e:	d003      	beq.n	9098 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
    9090:	aa01      	add	r2, sp, #4
    9092:	2100      	movs	r1, #0
    9094:	0020      	movs	r0, r4
    9096:	4798      	blx	r3
	return connResult.sock_connected.result;
}
    9098:	9801      	ldr	r0, [sp, #4]
    909a:	b003      	add	sp, #12
    909c:	bd30      	pop	{r4, r5, pc}
    909e:	46c0      	nop			; (mov r8, r8)
    90a0:	00008eb5 	.word	0x00008eb5

000090a4 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
    90a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    90a6:	46de      	mov	lr, fp
    90a8:	4657      	mov	r7, sl
    90aa:	464e      	mov	r6, r9
    90ac:	b5c0      	push	{r6, r7, lr}
    90ae:	b098      	sub	sp, #96	; 0x60
    90b0:	0005      	movs	r5, r0
    90b2:	4689      	mov	r9, r1
    90b4:	4693      	mov	fp, r2
    90b6:	469a      	mov	sl, r3
    90b8:	ab24      	add	r3, sp, #144	; 0x90
    90ba:	781f      	ldrb	r7, [r3, #0]
    90bc:	ab25      	add	r3, sp, #148	; 0x94
    90be:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
    90c0:	ac01      	add	r4, sp, #4
    90c2:	2258      	movs	r2, #88	; 0x58
    90c4:	491a      	ldr	r1, [pc, #104]	; (9130 <mqtt_connect_broker+0x8c>)
    90c6:	0020      	movs	r0, r4
    90c8:	4b1a      	ldr	r3, [pc, #104]	; (9134 <mqtt_connect_broker+0x90>)
    90ca:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
    90cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    90ce:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
    90d0:	465b      	mov	r3, fp
    90d2:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
    90d4:	4653      	mov	r3, sl
    90d6:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
    90d8:	464b      	mov	r3, r9
    90da:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
    90dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    90de:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
    90e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    90e2:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
    90e4:	233c      	movs	r3, #60	; 0x3c
    90e6:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
    90e8:	3301      	adds	r3, #1
    90ea:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
    90ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
    90ee:	2b00      	cmp	r3, #0
    90f0:	d005      	beq.n	90fe <mqtt_connect_broker+0x5a>
    90f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    90f4:	2b00      	cmp	r3, #0
    90f6:	d002      	beq.n	90fe <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
    90f8:	2201      	movs	r2, #1
    90fa:	ab01      	add	r3, sp, #4
    90fc:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
    90fe:	a901      	add	r1, sp, #4
    9100:	69e8      	ldr	r0, [r5, #28]
    9102:	4b0d      	ldr	r3, [pc, #52]	; (9138 <mqtt_connect_broker+0x94>)
    9104:	4798      	blx	r3
    9106:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
    9108:	ab17      	add	r3, sp, #92	; 0x5c
    910a:	7018      	strb	r0, [r3, #0]
	if(module->callback)
    910c:	682b      	ldr	r3, [r5, #0]
    910e:	2b00      	cmp	r3, #0
    9110:	d003      	beq.n	911a <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
    9112:	aa17      	add	r2, sp, #92	; 0x5c
    9114:	2101      	movs	r1, #1
    9116:	0028      	movs	r0, r5
    9118:	4798      	blx	r3
	
	module->isConnected = true;
    911a:	2201      	movs	r2, #1
    911c:	2334      	movs	r3, #52	; 0x34
    911e:	54ea      	strb	r2, [r5, r3]
	return rc;
}
    9120:	0020      	movs	r0, r4
    9122:	b018      	add	sp, #96	; 0x60
    9124:	bc1c      	pop	{r2, r3, r4}
    9126:	4691      	mov	r9, r2
    9128:	469a      	mov	sl, r3
    912a:	46a3      	mov	fp, r4
    912c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    912e:	46c0      	nop			; (mov r8, r8)
    9130:	0000e9a0 	.word	0x0000e9a0
    9134:	0000bcb9 	.word	0x0000bcb9
    9138:	0000894d 	.word	0x0000894d

0000913c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
    913c:	b530      	push	{r4, r5, lr}
    913e:	b083      	sub	sp, #12
    9140:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
    9142:	69c0      	ldr	r0, [r0, #28]
    9144:	4b08      	ldr	r3, [pc, #32]	; (9168 <mqtt_disconnect+0x2c>)
    9146:	4798      	blx	r3
    9148:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
    914a:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
    914c:	6823      	ldr	r3, [r4, #0]
    914e:	2b00      	cmp	r3, #0
    9150:	d003      	beq.n	915a <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
    9152:	aa01      	add	r2, sp, #4
    9154:	2105      	movs	r1, #5
    9156:	0020      	movs	r0, r4
    9158:	4798      	blx	r3
	
	module->isConnected = false;
    915a:	2200      	movs	r2, #0
    915c:	2334      	movs	r3, #52	; 0x34
    915e:	54e2      	strb	r2, [r4, r3]
	return rc;
}
    9160:	0028      	movs	r0, r5
    9162:	b003      	add	sp, #12
    9164:	bd30      	pop	{r4, r5, pc}
    9166:	46c0      	nop			; (mov r8, r8)
    9168:	00008c31 	.word	0x00008c31

0000916c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
    916c:	b570      	push	{r4, r5, r6, lr}
    916e:	b084      	sub	sp, #16
    9170:	0004      	movs	r4, r0
    9172:	a808      	add	r0, sp, #32
    9174:	7805      	ldrb	r5, [r0, #0]
    9176:	a809      	add	r0, sp, #36	; 0x24
    9178:	7800      	ldrb	r0, [r0, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
    917a:	466e      	mov	r6, sp
    917c:	7035      	strb	r5, [r6, #0]
	mqttMsg.payload = (char *)msg;
    917e:	9202      	str	r2, [sp, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
    9180:	9303      	str	r3, [sp, #12]
	mqttMsg.retained = retain;
    9182:	7070      	strb	r0, [r6, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
    9184:	466a      	mov	r2, sp
    9186:	69e0      	ldr	r0, [r4, #28]
    9188:	4b06      	ldr	r3, [pc, #24]	; (91a4 <mqtt_publish+0x38>)
    918a:	4798      	blx	r3
    918c:	0005      	movs	r5, r0
	
	if(module->callback)
    918e:	6823      	ldr	r3, [r4, #0]
    9190:	2b00      	cmp	r3, #0
    9192:	d003      	beq.n	919c <mqtt_publish+0x30>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
    9194:	2200      	movs	r2, #0
    9196:	2102      	movs	r1, #2
    9198:	0020      	movs	r0, r4
    919a:	4798      	blx	r3
	
	return rc;
}
    919c:	0028      	movs	r0, r5
    919e:	b004      	add	sp, #16
    91a0:	bd70      	pop	{r4, r5, r6, pc}
    91a2:	46c0      	nop			; (mov r8, r8)
    91a4:	00008b21 	.word	0x00008b21

000091a8 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
    91a8:	b570      	push	{r4, r5, r6, lr}
    91aa:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
    91ac:	69c0      	ldr	r0, [r0, #28]
    91ae:	4d06      	ldr	r5, [pc, #24]	; (91c8 <mqtt_subscribe+0x20>)
    91b0:	47a8      	blx	r5
    91b2:	0005      	movs	r5, r0
	
	if(module->callback)
    91b4:	6823      	ldr	r3, [r4, #0]
    91b6:	2b00      	cmp	r3, #0
    91b8:	d003      	beq.n	91c2 <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
    91ba:	2200      	movs	r2, #0
    91bc:	2103      	movs	r1, #3
    91be:	0020      	movs	r0, r4
    91c0:	4798      	blx	r3
	
	return rc;
}
    91c2:	0028      	movs	r0, r5
    91c4:	bd70      	pop	{r4, r5, r6, pc}
    91c6:	46c0      	nop			; (mov r8, r8)
    91c8:	00008a1d 	.word	0x00008a1d

000091cc <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
    91cc:	b510      	push	{r4, lr}
	return MQTTYield(module->client, timeout_ms);
    91ce:	69c0      	ldr	r0, [r0, #28]
    91d0:	4b01      	ldr	r3, [pc, #4]	; (91d8 <mqtt_yield+0xc>)
    91d2:	4798      	blx	r3
    91d4:	bd10      	pop	{r4, pc}
    91d6:	46c0      	nop			; (mov r8, r8)
    91d8:	000088d1 	.word	0x000088d1

000091dc <MQTTSerialize_connectLength>:
    91dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91de:	0004      	movs	r4, r0
    91e0:	7a03      	ldrb	r3, [r0, #8]
    91e2:	2b03      	cmp	r3, #3
    91e4:	d024      	beq.n	9230 <MQTTSerialize_connectLength+0x54>
    91e6:	2600      	movs	r6, #0
    91e8:	2b04      	cmp	r3, #4
    91ea:	d01f      	beq.n	922c <MQTTSerialize_connectLength+0x50>
    91ec:	68e0      	ldr	r0, [r4, #12]
    91ee:	6921      	ldr	r1, [r4, #16]
    91f0:	6962      	ldr	r2, [r4, #20]
    91f2:	4b1b      	ldr	r3, [pc, #108]	; (9260 <MQTTSerialize_connectLength+0x84>)
    91f4:	4798      	blx	r3
    91f6:	1c85      	adds	r5, r0, #2
    91f8:	19ad      	adds	r5, r5, r6
    91fa:	7ee3      	ldrb	r3, [r4, #27]
    91fc:	2b00      	cmp	r3, #0
    91fe:	d119      	bne.n	9234 <MQTTSerialize_connectLength+0x58>
    9200:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9202:	2b00      	cmp	r3, #0
    9204:	d024      	beq.n	9250 <MQTTSerialize_connectLength+0x74>
    9206:	6c20      	ldr	r0, [r4, #64]	; 0x40
    9208:	6c61      	ldr	r1, [r4, #68]	; 0x44
    920a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    920c:	4b14      	ldr	r3, [pc, #80]	; (9260 <MQTTSerialize_connectLength+0x84>)
    920e:	4798      	blx	r3
    9210:	3002      	adds	r0, #2
    9212:	182d      	adds	r5, r5, r0
    9214:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9216:	2b00      	cmp	r3, #0
    9218:	d01e      	beq.n	9258 <MQTTSerialize_connectLength+0x7c>
    921a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    921c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    921e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    9220:	4b0f      	ldr	r3, [pc, #60]	; (9260 <MQTTSerialize_connectLength+0x84>)
    9222:	4798      	blx	r3
    9224:	3002      	adds	r0, #2
    9226:	182d      	adds	r5, r5, r0
    9228:	0028      	movs	r0, r5
    922a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    922c:	360a      	adds	r6, #10
    922e:	e7dd      	b.n	91ec <MQTTSerialize_connectLength+0x10>
    9230:	260c      	movs	r6, #12
    9232:	e7db      	b.n	91ec <MQTTSerialize_connectLength+0x10>
    9234:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9236:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9238:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    923a:	4f09      	ldr	r7, [pc, #36]	; (9260 <MQTTSerialize_connectLength+0x84>)
    923c:	47b8      	blx	r7
    923e:	0006      	movs	r6, r0
    9240:	6b20      	ldr	r0, [r4, #48]	; 0x30
    9242:	6b61      	ldr	r1, [r4, #52]	; 0x34
    9244:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9246:	47b8      	blx	r7
    9248:	1836      	adds	r6, r6, r0
    924a:	3604      	adds	r6, #4
    924c:	19ad      	adds	r5, r5, r6
    924e:	e7d7      	b.n	9200 <MQTTSerialize_connectLength+0x24>
    9250:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9252:	2b00      	cmp	r3, #0
    9254:	d1d7      	bne.n	9206 <MQTTSerialize_connectLength+0x2a>
    9256:	e7dd      	b.n	9214 <MQTTSerialize_connectLength+0x38>
    9258:	6d63      	ldr	r3, [r4, #84]	; 0x54
    925a:	2b00      	cmp	r3, #0
    925c:	d1dd      	bne.n	921a <MQTTSerialize_connectLength+0x3e>
    925e:	e7e3      	b.n	9228 <MQTTSerialize_connectLength+0x4c>
    9260:	00009745 	.word	0x00009745

00009264 <MQTTSerialize_connect>:
    9264:	b5f0      	push	{r4, r5, r6, r7, lr}
    9266:	b083      	sub	sp, #12
    9268:	0006      	movs	r6, r0
    926a:	000f      	movs	r7, r1
    926c:	0015      	movs	r5, r2
    926e:	9001      	str	r0, [sp, #4]
    9270:	0010      	movs	r0, r2
    9272:	4b45      	ldr	r3, [pc, #276]	; (9388 <MQTTSerialize_connect+0x124>)
    9274:	4798      	blx	r3
    9276:	0004      	movs	r4, r0
    9278:	4b44      	ldr	r3, [pc, #272]	; (938c <MQTTSerialize_connect+0x128>)
    927a:	4798      	blx	r3
    927c:	42b8      	cmp	r0, r7
    927e:	dd00      	ble.n	9282 <MQTTSerialize_connect+0x1e>
    9280:	e07f      	b.n	9382 <MQTTSerialize_connect+0x11e>
    9282:	2110      	movs	r1, #16
    9284:	a801      	add	r0, sp, #4
    9286:	4b42      	ldr	r3, [pc, #264]	; (9390 <MQTTSerialize_connect+0x12c>)
    9288:	4798      	blx	r3
    928a:	0021      	movs	r1, r4
    928c:	9801      	ldr	r0, [sp, #4]
    928e:	4b41      	ldr	r3, [pc, #260]	; (9394 <MQTTSerialize_connect+0x130>)
    9290:	4798      	blx	r3
    9292:	9b01      	ldr	r3, [sp, #4]
    9294:	469c      	mov	ip, r3
    9296:	4460      	add	r0, ip
    9298:	9001      	str	r0, [sp, #4]
    929a:	7a2b      	ldrb	r3, [r5, #8]
    929c:	2b04      	cmp	r3, #4
    929e:	d045      	beq.n	932c <MQTTSerialize_connect+0xc8>
    92a0:	493d      	ldr	r1, [pc, #244]	; (9398 <MQTTSerialize_connect+0x134>)
    92a2:	a801      	add	r0, sp, #4
    92a4:	4b3d      	ldr	r3, [pc, #244]	; (939c <MQTTSerialize_connect+0x138>)
    92a6:	4798      	blx	r3
    92a8:	2103      	movs	r1, #3
    92aa:	a801      	add	r0, sp, #4
    92ac:	4b38      	ldr	r3, [pc, #224]	; (9390 <MQTTSerialize_connect+0x12c>)
    92ae:	4798      	blx	r3
    92b0:	7ea9      	ldrb	r1, [r5, #26]
    92b2:	2301      	movs	r3, #1
    92b4:	4019      	ands	r1, r3
    92b6:	7eea      	ldrb	r2, [r5, #27]
    92b8:	1e50      	subs	r0, r2, #1
    92ba:	4182      	sbcs	r2, r0
    92bc:	b2d2      	uxtb	r2, r2
    92be:	4013      	ands	r3, r2
    92c0:	009b      	lsls	r3, r3, #2
    92c2:	0049      	lsls	r1, r1, #1
    92c4:	4319      	orrs	r1, r3
    92c6:	2b00      	cmp	r3, #0
    92c8:	d00b      	beq.n	92e2 <MQTTSerialize_connect+0x7e>
    92ca:	233d      	movs	r3, #61	; 0x3d
    92cc:	5cea      	ldrb	r2, [r5, r3]
    92ce:	3b3a      	subs	r3, #58	; 0x3a
    92d0:	4013      	ands	r3, r2
    92d2:	00db      	lsls	r3, r3, #3
    92d4:	223c      	movs	r2, #60	; 0x3c
    92d6:	5ca8      	ldrb	r0, [r5, r2]
    92d8:	3a3b      	subs	r2, #59	; 0x3b
    92da:	4002      	ands	r2, r0
    92dc:	0152      	lsls	r2, r2, #5
    92de:	4319      	orrs	r1, r3
    92e0:	4311      	orrs	r1, r2
    92e2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    92e4:	2b00      	cmp	r3, #0
    92e6:	d02a      	beq.n	933e <MQTTSerialize_connect+0xda>
    92e8:	2380      	movs	r3, #128	; 0x80
    92ea:	4319      	orrs	r1, r3
    92ec:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    92ee:	2b00      	cmp	r3, #0
    92f0:	d029      	beq.n	9346 <MQTTSerialize_connect+0xe2>
    92f2:	2340      	movs	r3, #64	; 0x40
    92f4:	4319      	orrs	r1, r3
    92f6:	b2cc      	uxtb	r4, r1
    92f8:	0021      	movs	r1, r4
    92fa:	a801      	add	r0, sp, #4
    92fc:	4b24      	ldr	r3, [pc, #144]	; (9390 <MQTTSerialize_connect+0x12c>)
    92fe:	4798      	blx	r3
    9300:	8b29      	ldrh	r1, [r5, #24]
    9302:	a801      	add	r0, sp, #4
    9304:	4b26      	ldr	r3, [pc, #152]	; (93a0 <MQTTSerialize_connect+0x13c>)
    9306:	4798      	blx	r3
    9308:	68e9      	ldr	r1, [r5, #12]
    930a:	692a      	ldr	r2, [r5, #16]
    930c:	696b      	ldr	r3, [r5, #20]
    930e:	a801      	add	r0, sp, #4
    9310:	4f24      	ldr	r7, [pc, #144]	; (93a4 <MQTTSerialize_connect+0x140>)
    9312:	47b8      	blx	r7
    9314:	7eeb      	ldrb	r3, [r5, #27]
    9316:	2b00      	cmp	r3, #0
    9318:	d119      	bne.n	934e <MQTTSerialize_connect+0xea>
    931a:	b263      	sxtb	r3, r4
    931c:	2b00      	cmp	r3, #0
    931e:	db22      	blt.n	9366 <MQTTSerialize_connect+0x102>
    9320:	0663      	lsls	r3, r4, #25
    9322:	d427      	bmi.n	9374 <MQTTSerialize_connect+0x110>
    9324:	9b01      	ldr	r3, [sp, #4]
    9326:	1b98      	subs	r0, r3, r6
    9328:	b003      	add	sp, #12
    932a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    932c:	491e      	ldr	r1, [pc, #120]	; (93a8 <MQTTSerialize_connect+0x144>)
    932e:	a801      	add	r0, sp, #4
    9330:	4b1a      	ldr	r3, [pc, #104]	; (939c <MQTTSerialize_connect+0x138>)
    9332:	4798      	blx	r3
    9334:	2104      	movs	r1, #4
    9336:	a801      	add	r0, sp, #4
    9338:	4b15      	ldr	r3, [pc, #84]	; (9390 <MQTTSerialize_connect+0x12c>)
    933a:	4798      	blx	r3
    933c:	e7b8      	b.n	92b0 <MQTTSerialize_connect+0x4c>
    933e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    9340:	2b00      	cmp	r3, #0
    9342:	d1d1      	bne.n	92e8 <MQTTSerialize_connect+0x84>
    9344:	e7d2      	b.n	92ec <MQTTSerialize_connect+0x88>
    9346:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    9348:	2b00      	cmp	r3, #0
    934a:	d1d2      	bne.n	92f2 <MQTTSerialize_connect+0x8e>
    934c:	e7d3      	b.n	92f6 <MQTTSerialize_connect+0x92>
    934e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    9350:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    9352:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    9354:	a801      	add	r0, sp, #4
    9356:	4f13      	ldr	r7, [pc, #76]	; (93a4 <MQTTSerialize_connect+0x140>)
    9358:	47b8      	blx	r7
    935a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    935c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    935e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    9360:	a801      	add	r0, sp, #4
    9362:	47b8      	blx	r7
    9364:	e7d9      	b.n	931a <MQTTSerialize_connect+0xb6>
    9366:	6c29      	ldr	r1, [r5, #64]	; 0x40
    9368:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    936a:	6cab      	ldr	r3, [r5, #72]	; 0x48
    936c:	a801      	add	r0, sp, #4
    936e:	4f0d      	ldr	r7, [pc, #52]	; (93a4 <MQTTSerialize_connect+0x140>)
    9370:	47b8      	blx	r7
    9372:	e7d5      	b.n	9320 <MQTTSerialize_connect+0xbc>
    9374:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    9376:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    9378:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    937a:	a801      	add	r0, sp, #4
    937c:	4c09      	ldr	r4, [pc, #36]	; (93a4 <MQTTSerialize_connect+0x140>)
    937e:	47a0      	blx	r4
    9380:	e7d0      	b.n	9324 <MQTTSerialize_connect+0xc0>
    9382:	2002      	movs	r0, #2
    9384:	4240      	negs	r0, r0
    9386:	e7cf      	b.n	9328 <MQTTSerialize_connect+0xc4>
    9388:	000091dd 	.word	0x000091dd
    938c:	000095e9 	.word	0x000095e9
    9390:	0000964b 	.word	0x0000964b
    9394:	00009561 	.word	0x00009561
    9398:	0000ea00 	.word	0x0000ea00
    939c:	00009681 	.word	0x00009681
    93a0:	00009657 	.word	0x00009657
    93a4:	000096b9 	.word	0x000096b9
    93a8:	0000e9f8 	.word	0x0000e9f8

000093ac <MQTTDeserialize_connack>:
    93ac:	b570      	push	{r4, r5, r6, lr}
    93ae:	b082      	sub	sp, #8
    93b0:	0005      	movs	r5, r0
    93b2:	000c      	movs	r4, r1
    93b4:	9201      	str	r2, [sp, #4]
    93b6:	a801      	add	r0, sp, #4
    93b8:	4b0e      	ldr	r3, [pc, #56]	; (93f4 <MQTTDeserialize_connack+0x48>)
    93ba:	4798      	blx	r3
    93bc:	23f0      	movs	r3, #240	; 0xf0
    93be:	4003      	ands	r3, r0
    93c0:	2000      	movs	r0, #0
    93c2:	2b20      	cmp	r3, #32
    93c4:	d001      	beq.n	93ca <MQTTDeserialize_connack+0x1e>
    93c6:	b002      	add	sp, #8
    93c8:	bd70      	pop	{r4, r5, r6, pc}
    93ca:	4669      	mov	r1, sp
    93cc:	9801      	ldr	r0, [sp, #4]
    93ce:	4b0a      	ldr	r3, [pc, #40]	; (93f8 <MQTTDeserialize_connack+0x4c>)
    93d0:	4798      	blx	r3
    93d2:	9b01      	ldr	r3, [sp, #4]
    93d4:	181b      	adds	r3, r3, r0
    93d6:	9301      	str	r3, [sp, #4]
    93d8:	9b00      	ldr	r3, [sp, #0]
    93da:	2b01      	cmp	r3, #1
    93dc:	ddf3      	ble.n	93c6 <MQTTDeserialize_connack+0x1a>
    93de:	a801      	add	r0, sp, #4
    93e0:	4e04      	ldr	r6, [pc, #16]	; (93f4 <MQTTDeserialize_connack+0x48>)
    93e2:	47b0      	blx	r6
    93e4:	0600      	lsls	r0, r0, #24
    93e6:	0fc0      	lsrs	r0, r0, #31
    93e8:	7028      	strb	r0, [r5, #0]
    93ea:	a801      	add	r0, sp, #4
    93ec:	47b0      	blx	r6
    93ee:	7020      	strb	r0, [r4, #0]
    93f0:	2001      	movs	r0, #1
    93f2:	e7e8      	b.n	93c6 <MQTTDeserialize_connack+0x1a>
    93f4:	0000963f 	.word	0x0000963f
    93f8:	00009611 	.word	0x00009611

000093fc <MQTTSerialize_zero>:
    93fc:	b510      	push	{r4, lr}
    93fe:	b082      	sub	sp, #8
    9400:	0004      	movs	r4, r0
    9402:	9001      	str	r0, [sp, #4]
    9404:	2901      	cmp	r1, #1
    9406:	dd0f      	ble.n	9428 <MQTTSerialize_zero+0x2c>
    9408:	210f      	movs	r1, #15
    940a:	4011      	ands	r1, r2
    940c:	0109      	lsls	r1, r1, #4
    940e:	a801      	add	r0, sp, #4
    9410:	4b07      	ldr	r3, [pc, #28]	; (9430 <MQTTSerialize_zero+0x34>)
    9412:	4798      	blx	r3
    9414:	2100      	movs	r1, #0
    9416:	9801      	ldr	r0, [sp, #4]
    9418:	4b06      	ldr	r3, [pc, #24]	; (9434 <MQTTSerialize_zero+0x38>)
    941a:	4798      	blx	r3
    941c:	9b01      	ldr	r3, [sp, #4]
    941e:	469c      	mov	ip, r3
    9420:	4460      	add	r0, ip
    9422:	1b00      	subs	r0, r0, r4
    9424:	b002      	add	sp, #8
    9426:	bd10      	pop	{r4, pc}
    9428:	2002      	movs	r0, #2
    942a:	4240      	negs	r0, r0
    942c:	e7fa      	b.n	9424 <MQTTSerialize_zero+0x28>
    942e:	46c0      	nop			; (mov r8, r8)
    9430:	0000964b 	.word	0x0000964b
    9434:	00009561 	.word	0x00009561

00009438 <MQTTSerialize_disconnect>:
    9438:	b510      	push	{r4, lr}
    943a:	220e      	movs	r2, #14
    943c:	4b01      	ldr	r3, [pc, #4]	; (9444 <MQTTSerialize_disconnect+0xc>)
    943e:	4798      	blx	r3
    9440:	bd10      	pop	{r4, pc}
    9442:	46c0      	nop			; (mov r8, r8)
    9444:	000093fd 	.word	0x000093fd

00009448 <MQTTSerialize_pingreq>:
    9448:	b510      	push	{r4, lr}
    944a:	220c      	movs	r2, #12
    944c:	4b01      	ldr	r3, [pc, #4]	; (9454 <MQTTSerialize_pingreq+0xc>)
    944e:	4798      	blx	r3
    9450:	bd10      	pop	{r4, pc}
    9452:	46c0      	nop			; (mov r8, r8)
    9454:	000093fd 	.word	0x000093fd

00009458 <MQTTDeserialize_publish>:
    9458:	b5f0      	push	{r4, r5, r6, r7, lr}
    945a:	b085      	sub	sp, #20
    945c:	0005      	movs	r5, r0
    945e:	000e      	movs	r6, r1
    9460:	0014      	movs	r4, r2
    9462:	9301      	str	r3, [sp, #4]
    9464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9466:	9303      	str	r3, [sp, #12]
    9468:	2300      	movs	r3, #0
    946a:	9302      	str	r3, [sp, #8]
    946c:	a803      	add	r0, sp, #12
    946e:	4b1c      	ldr	r3, [pc, #112]	; (94e0 <MQTTDeserialize_publish+0x88>)
    9470:	4798      	blx	r3
    9472:	0003      	movs	r3, r0
    9474:	22f0      	movs	r2, #240	; 0xf0
    9476:	4010      	ands	r0, r2
    9478:	2700      	movs	r7, #0
    947a:	2830      	cmp	r0, #48	; 0x30
    947c:	d002      	beq.n	9484 <MQTTDeserialize_publish+0x2c>
    947e:	0038      	movs	r0, r7
    9480:	b005      	add	sp, #20
    9482:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9484:	071a      	lsls	r2, r3, #28
    9486:	0fd2      	lsrs	r2, r2, #31
    9488:	702a      	strb	r2, [r5, #0]
    948a:	075a      	lsls	r2, r3, #29
    948c:	0f92      	lsrs	r2, r2, #30
    948e:	6032      	str	r2, [r6, #0]
    9490:	07db      	lsls	r3, r3, #31
    9492:	0fdb      	lsrs	r3, r3, #31
    9494:	7023      	strb	r3, [r4, #0]
    9496:	a902      	add	r1, sp, #8
    9498:	9803      	ldr	r0, [sp, #12]
    949a:	4b12      	ldr	r3, [pc, #72]	; (94e4 <MQTTDeserialize_publish+0x8c>)
    949c:	4798      	blx	r3
    949e:	0007      	movs	r7, r0
    94a0:	9b03      	ldr	r3, [sp, #12]
    94a2:	181c      	adds	r4, r3, r0
    94a4:	9403      	str	r4, [sp, #12]
    94a6:	9b02      	ldr	r3, [sp, #8]
    94a8:	469c      	mov	ip, r3
    94aa:	4464      	add	r4, ip
    94ac:	0022      	movs	r2, r4
    94ae:	a903      	add	r1, sp, #12
    94b0:	980a      	ldr	r0, [sp, #40]	; 0x28
    94b2:	4b0d      	ldr	r3, [pc, #52]	; (94e8 <MQTTDeserialize_publish+0x90>)
    94b4:	4798      	blx	r3
    94b6:	2800      	cmp	r0, #0
    94b8:	d0e1      	beq.n	947e <MQTTDeserialize_publish+0x26>
    94ba:	9b03      	ldr	r3, [sp, #12]
    94bc:	1ae3      	subs	r3, r4, r3
    94be:	d4de      	bmi.n	947e <MQTTDeserialize_publish+0x26>
    94c0:	6833      	ldr	r3, [r6, #0]
    94c2:	2b00      	cmp	r3, #0
    94c4:	dd04      	ble.n	94d0 <MQTTDeserialize_publish+0x78>
    94c6:	a803      	add	r0, sp, #12
    94c8:	4b08      	ldr	r3, [pc, #32]	; (94ec <MQTTDeserialize_publish+0x94>)
    94ca:	4798      	blx	r3
    94cc:	9b01      	ldr	r3, [sp, #4]
    94ce:	8018      	strh	r0, [r3, #0]
    94d0:	9b03      	ldr	r3, [sp, #12]
    94d2:	1ae4      	subs	r4, r4, r3
    94d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    94d6:	6014      	str	r4, [r2, #0]
    94d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    94da:	6013      	str	r3, [r2, #0]
    94dc:	2701      	movs	r7, #1
    94de:	e7ce      	b.n	947e <MQTTDeserialize_publish+0x26>
    94e0:	0000963f 	.word	0x0000963f
    94e4:	00009611 	.word	0x00009611
    94e8:	00009705 	.word	0x00009705
    94ec:	0000962d 	.word	0x0000962d

000094f0 <MQTTDeserialize_ack>:
    94f0:	b570      	push	{r4, r5, r6, lr}
    94f2:	b082      	sub	sp, #8
    94f4:	0005      	movs	r5, r0
    94f6:	000e      	movs	r6, r1
    94f8:	0014      	movs	r4, r2
    94fa:	9301      	str	r3, [sp, #4]
    94fc:	a801      	add	r0, sp, #4
    94fe:	4b0c      	ldr	r3, [pc, #48]	; (9530 <MQTTDeserialize_ack+0x40>)
    9500:	4798      	blx	r3
    9502:	0703      	lsls	r3, r0, #28
    9504:	0fdb      	lsrs	r3, r3, #31
    9506:	7033      	strb	r3, [r6, #0]
    9508:	0600      	lsls	r0, r0, #24
    950a:	0f00      	lsrs	r0, r0, #28
    950c:	7028      	strb	r0, [r5, #0]
    950e:	4669      	mov	r1, sp
    9510:	9801      	ldr	r0, [sp, #4]
    9512:	4b08      	ldr	r3, [pc, #32]	; (9534 <MQTTDeserialize_ack+0x44>)
    9514:	4798      	blx	r3
    9516:	9b01      	ldr	r3, [sp, #4]
    9518:	181b      	adds	r3, r3, r0
    951a:	9301      	str	r3, [sp, #4]
    951c:	9b00      	ldr	r3, [sp, #0]
    951e:	2b01      	cmp	r3, #1
    9520:	dd04      	ble.n	952c <MQTTDeserialize_ack+0x3c>
    9522:	a801      	add	r0, sp, #4
    9524:	4b04      	ldr	r3, [pc, #16]	; (9538 <MQTTDeserialize_ack+0x48>)
    9526:	4798      	blx	r3
    9528:	8020      	strh	r0, [r4, #0]
    952a:	2001      	movs	r0, #1
    952c:	b002      	add	sp, #8
    952e:	bd70      	pop	{r4, r5, r6, pc}
    9530:	0000963f 	.word	0x0000963f
    9534:	00009611 	.word	0x00009611
    9538:	0000962d 	.word	0x0000962d

0000953c <bufchar>:
    953c:	b530      	push	{r4, r5, lr}
    953e:	2900      	cmp	r1, #0
    9540:	dd0a      	ble.n	9558 <bufchar+0x1c>
    9542:	4b06      	ldr	r3, [pc, #24]	; (955c <bufchar+0x20>)
    9544:	681b      	ldr	r3, [r3, #0]
    9546:	185d      	adds	r5, r3, r1
    9548:	002c      	movs	r4, r5
    954a:	781a      	ldrb	r2, [r3, #0]
    954c:	7002      	strb	r2, [r0, #0]
    954e:	3301      	adds	r3, #1
    9550:	42a3      	cmp	r3, r4
    9552:	d1fa      	bne.n	954a <bufchar+0xe>
    9554:	4b01      	ldr	r3, [pc, #4]	; (955c <bufchar+0x20>)
    9556:	601d      	str	r5, [r3, #0]
    9558:	0008      	movs	r0, r1
    955a:	bd30      	pop	{r4, r5, pc}
    955c:	200007f8 	.word	0x200007f8

00009560 <MQTTPacket_encode>:
    9560:	b5f0      	push	{r4, r5, r6, r7, lr}
    9562:	b083      	sub	sp, #12
    9564:	2500      	movs	r5, #0
    9566:	267f      	movs	r6, #127	; 0x7f
    9568:	2780      	movs	r7, #128	; 0x80
    956a:	427f      	negs	r7, r7
    956c:	9501      	str	r5, [sp, #4]
    956e:	17ca      	asrs	r2, r1, #31
    9570:	0e54      	lsrs	r4, r2, #25
    9572:	190b      	adds	r3, r1, r4
    9574:	4033      	ands	r3, r6
    9576:	1b1b      	subs	r3, r3, r4
    9578:	b2db      	uxtb	r3, r3
    957a:	4032      	ands	r2, r6
    957c:	1851      	adds	r1, r2, r1
    957e:	11c9      	asrs	r1, r1, #7
    9580:	2900      	cmp	r1, #0
    9582:	dd03      	ble.n	958c <MQTTPacket_encode+0x2c>
    9584:	433b      	orrs	r3, r7
    9586:	5543      	strb	r3, [r0, r5]
    9588:	3501      	adds	r5, #1
    958a:	e7ef      	b.n	956c <MQTTPacket_encode+0xc>
    958c:	5543      	strb	r3, [r0, r5]
    958e:	9801      	ldr	r0, [sp, #4]
    9590:	3001      	adds	r0, #1
    9592:	b003      	add	sp, #12
    9594:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009596 <MQTTPacket_decode>:
    9596:	b5f0      	push	{r4, r5, r6, r7, lr}
    9598:	46ce      	mov	lr, r9
    959a:	4647      	mov	r7, r8
    959c:	b580      	push	{r7, lr}
    959e:	b083      	sub	sp, #12
    95a0:	4680      	mov	r8, r0
    95a2:	000f      	movs	r7, r1
    95a4:	2300      	movs	r3, #0
    95a6:	600b      	str	r3, [r1, #0]
    95a8:	2401      	movs	r4, #1
    95aa:	2601      	movs	r6, #1
    95ac:	466b      	mov	r3, sp
    95ae:	1ddd      	adds	r5, r3, #7
    95b0:	237f      	movs	r3, #127	; 0x7f
    95b2:	4699      	mov	r9, r3
    95b4:	2101      	movs	r1, #1
    95b6:	0028      	movs	r0, r5
    95b8:	47c0      	blx	r8
    95ba:	2801      	cmp	r0, #1
    95bc:	d10e      	bne.n	95dc <MQTTPacket_decode+0x46>
    95be:	782b      	ldrb	r3, [r5, #0]
    95c0:	464a      	mov	r2, r9
    95c2:	401a      	ands	r2, r3
    95c4:	4372      	muls	r2, r6
    95c6:	6839      	ldr	r1, [r7, #0]
    95c8:	468c      	mov	ip, r1
    95ca:	4462      	add	r2, ip
    95cc:	603a      	str	r2, [r7, #0]
    95ce:	01f6      	lsls	r6, r6, #7
    95d0:	b25b      	sxtb	r3, r3
    95d2:	2b00      	cmp	r3, #0
    95d4:	da02      	bge.n	95dc <MQTTPacket_decode+0x46>
    95d6:	3401      	adds	r4, #1
    95d8:	2c05      	cmp	r4, #5
    95da:	d1eb      	bne.n	95b4 <MQTTPacket_decode+0x1e>
    95dc:	0020      	movs	r0, r4
    95de:	b003      	add	sp, #12
    95e0:	bc0c      	pop	{r2, r3}
    95e2:	4690      	mov	r8, r2
    95e4:	4699      	mov	r9, r3
    95e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000095e8 <MQTTPacket_len>:
    95e8:	0003      	movs	r3, r0
    95ea:	1c42      	adds	r2, r0, #1
    95ec:	3002      	adds	r0, #2
    95ee:	2a7f      	cmp	r2, #127	; 0x7f
    95f0:	dd07      	ble.n	9602 <MQTTPacket_len+0x1a>
    95f2:	4905      	ldr	r1, [pc, #20]	; (9608 <MQTTPacket_len+0x20>)
    95f4:	1cd8      	adds	r0, r3, #3
    95f6:	428a      	cmp	r2, r1
    95f8:	dd03      	ble.n	9602 <MQTTPacket_len+0x1a>
    95fa:	4904      	ldr	r1, [pc, #16]	; (960c <MQTTPacket_len+0x24>)
    95fc:	1d58      	adds	r0, r3, #5
    95fe:	428a      	cmp	r2, r1
    9600:	dd00      	ble.n	9604 <MQTTPacket_len+0x1c>
    9602:	4770      	bx	lr
    9604:	1d18      	adds	r0, r3, #4
    9606:	e7fc      	b.n	9602 <MQTTPacket_len+0x1a>
    9608:	00003fff 	.word	0x00003fff
    960c:	001ffffe 	.word	0x001ffffe

00009610 <MQTTPacket_decodeBuf>:
    9610:	b510      	push	{r4, lr}
    9612:	4b03      	ldr	r3, [pc, #12]	; (9620 <MQTTPacket_decodeBuf+0x10>)
    9614:	6018      	str	r0, [r3, #0]
    9616:	4803      	ldr	r0, [pc, #12]	; (9624 <MQTTPacket_decodeBuf+0x14>)
    9618:	4b03      	ldr	r3, [pc, #12]	; (9628 <MQTTPacket_decodeBuf+0x18>)
    961a:	4798      	blx	r3
    961c:	bd10      	pop	{r4, pc}
    961e:	46c0      	nop			; (mov r8, r8)
    9620:	200007f8 	.word	0x200007f8
    9624:	0000953d 	.word	0x0000953d
    9628:	00009597 	.word	0x00009597

0000962c <readInt>:
    962c:	0001      	movs	r1, r0
    962e:	6802      	ldr	r2, [r0, #0]
    9630:	7813      	ldrb	r3, [r2, #0]
    9632:	021b      	lsls	r3, r3, #8
    9634:	7850      	ldrb	r0, [r2, #1]
    9636:	1818      	adds	r0, r3, r0
    9638:	3202      	adds	r2, #2
    963a:	600a      	str	r2, [r1, #0]
    963c:	4770      	bx	lr

0000963e <readChar>:
    963e:	0002      	movs	r2, r0
    9640:	6803      	ldr	r3, [r0, #0]
    9642:	7818      	ldrb	r0, [r3, #0]
    9644:	3301      	adds	r3, #1
    9646:	6013      	str	r3, [r2, #0]
    9648:	4770      	bx	lr

0000964a <writeChar>:
    964a:	6803      	ldr	r3, [r0, #0]
    964c:	7019      	strb	r1, [r3, #0]
    964e:	6803      	ldr	r3, [r0, #0]
    9650:	3301      	adds	r3, #1
    9652:	6003      	str	r3, [r0, #0]
    9654:	4770      	bx	lr

00009656 <writeInt>:
    9656:	b530      	push	{r4, r5, lr}
    9658:	17ca      	asrs	r2, r1, #31
    965a:	23ff      	movs	r3, #255	; 0xff
    965c:	001c      	movs	r4, r3
    965e:	4014      	ands	r4, r2
    9660:	1864      	adds	r4, r4, r1
    9662:	1224      	asrs	r4, r4, #8
    9664:	6805      	ldr	r5, [r0, #0]
    9666:	702c      	strb	r4, [r5, #0]
    9668:	6804      	ldr	r4, [r0, #0]
    966a:	1c65      	adds	r5, r4, #1
    966c:	6005      	str	r5, [r0, #0]
    966e:	0e12      	lsrs	r2, r2, #24
    9670:	1889      	adds	r1, r1, r2
    9672:	400b      	ands	r3, r1
    9674:	1a9b      	subs	r3, r3, r2
    9676:	7063      	strb	r3, [r4, #1]
    9678:	6803      	ldr	r3, [r0, #0]
    967a:	3301      	adds	r3, #1
    967c:	6003      	str	r3, [r0, #0]
    967e:	bd30      	pop	{r4, r5, pc}

00009680 <writeCString>:
    9680:	b570      	push	{r4, r5, r6, lr}
    9682:	0004      	movs	r4, r0
    9684:	000e      	movs	r6, r1
    9686:	0008      	movs	r0, r1
    9688:	4b08      	ldr	r3, [pc, #32]	; (96ac <writeCString+0x2c>)
    968a:	4798      	blx	r3
    968c:	0005      	movs	r5, r0
    968e:	0001      	movs	r1, r0
    9690:	0020      	movs	r0, r4
    9692:	4b07      	ldr	r3, [pc, #28]	; (96b0 <writeCString+0x30>)
    9694:	4798      	blx	r3
    9696:	002a      	movs	r2, r5
    9698:	0031      	movs	r1, r6
    969a:	6820      	ldr	r0, [r4, #0]
    969c:	4b05      	ldr	r3, [pc, #20]	; (96b4 <writeCString+0x34>)
    969e:	4798      	blx	r3
    96a0:	6823      	ldr	r3, [r4, #0]
    96a2:	469c      	mov	ip, r3
    96a4:	4465      	add	r5, ip
    96a6:	6025      	str	r5, [r4, #0]
    96a8:	bd70      	pop	{r4, r5, r6, pc}
    96aa:	46c0      	nop			; (mov r8, r8)
    96ac:	0000c217 	.word	0x0000c217
    96b0:	00009657 	.word	0x00009657
    96b4:	0000bcb9 	.word	0x0000bcb9

000096b8 <writeMQTTString>:
    96b8:	b530      	push	{r4, r5, lr}
    96ba:	b085      	sub	sp, #20
    96bc:	0005      	movs	r5, r0
    96be:	9101      	str	r1, [sp, #4]
    96c0:	9303      	str	r3, [sp, #12]
    96c2:	1e14      	subs	r4, r2, #0
    96c4:	dc06      	bgt.n	96d4 <writeMQTTString+0x1c>
    96c6:	9901      	ldr	r1, [sp, #4]
    96c8:	2900      	cmp	r1, #0
    96ca:	d010      	beq.n	96ee <writeMQTTString+0x36>
    96cc:	4b0a      	ldr	r3, [pc, #40]	; (96f8 <writeMQTTString+0x40>)
    96ce:	4798      	blx	r3
    96d0:	b005      	add	sp, #20
    96d2:	bd30      	pop	{r4, r5, pc}
    96d4:	0011      	movs	r1, r2
    96d6:	4b09      	ldr	r3, [pc, #36]	; (96fc <writeMQTTString+0x44>)
    96d8:	4798      	blx	r3
    96da:	0022      	movs	r2, r4
    96dc:	9903      	ldr	r1, [sp, #12]
    96de:	6828      	ldr	r0, [r5, #0]
    96e0:	4b07      	ldr	r3, [pc, #28]	; (9700 <writeMQTTString+0x48>)
    96e2:	4798      	blx	r3
    96e4:	682b      	ldr	r3, [r5, #0]
    96e6:	469c      	mov	ip, r3
    96e8:	4464      	add	r4, ip
    96ea:	602c      	str	r4, [r5, #0]
    96ec:	e7f0      	b.n	96d0 <writeMQTTString+0x18>
    96ee:	2100      	movs	r1, #0
    96f0:	4b02      	ldr	r3, [pc, #8]	; (96fc <writeMQTTString+0x44>)
    96f2:	4798      	blx	r3
    96f4:	e7ec      	b.n	96d0 <writeMQTTString+0x18>
    96f6:	46c0      	nop			; (mov r8, r8)
    96f8:	00009681 	.word	0x00009681
    96fc:	00009657 	.word	0x00009657
    9700:	0000bcb9 	.word	0x0000bcb9

00009704 <readMQTTLenString>:
    9704:	b570      	push	{r4, r5, r6, lr}
    9706:	0005      	movs	r5, r0
    9708:	000c      	movs	r4, r1
    970a:	0016      	movs	r6, r2
    970c:	680b      	ldr	r3, [r1, #0]
    970e:	1ad3      	subs	r3, r2, r3
    9710:	2b01      	cmp	r3, #1
    9712:	dd12      	ble.n	973a <readMQTTLenString+0x36>
    9714:	0008      	movs	r0, r1
    9716:	4b0a      	ldr	r3, [pc, #40]	; (9740 <readMQTTLenString+0x3c>)
    9718:	4798      	blx	r3
    971a:	6068      	str	r0, [r5, #4]
    971c:	6822      	ldr	r2, [r4, #0]
    971e:	1811      	adds	r1, r2, r0
    9720:	2300      	movs	r3, #0
    9722:	428e      	cmp	r6, r1
    9724:	d305      	bcc.n	9732 <readMQTTLenString+0x2e>
    9726:	60aa      	str	r2, [r5, #8]
    9728:	6823      	ldr	r3, [r4, #0]
    972a:	469c      	mov	ip, r3
    972c:	4460      	add	r0, ip
    972e:	6020      	str	r0, [r4, #0]
    9730:	2301      	movs	r3, #1
    9732:	2200      	movs	r2, #0
    9734:	602a      	str	r2, [r5, #0]
    9736:	0018      	movs	r0, r3
    9738:	bd70      	pop	{r4, r5, r6, pc}
    973a:	2300      	movs	r3, #0
    973c:	e7f9      	b.n	9732 <readMQTTLenString+0x2e>
    973e:	46c0      	nop			; (mov r8, r8)
    9740:	0000962d 	.word	0x0000962d

00009744 <MQTTstrlen>:
    9744:	b500      	push	{lr}
    9746:	b085      	sub	sp, #20
    9748:	9102      	str	r1, [sp, #8]
    974a:	2800      	cmp	r0, #0
    974c:	d003      	beq.n	9756 <MQTTstrlen+0x12>
    974e:	4b03      	ldr	r3, [pc, #12]	; (975c <MQTTstrlen+0x18>)
    9750:	4798      	blx	r3
    9752:	b005      	add	sp, #20
    9754:	bd00      	pop	{pc}
    9756:	9802      	ldr	r0, [sp, #8]
    9758:	e7fb      	b.n	9752 <MQTTstrlen+0xe>
    975a:	46c0      	nop			; (mov r8, r8)
    975c:	0000c217 	.word	0x0000c217

00009760 <MQTTPacket_equals>:
    9760:	b570      	push	{r4, r5, r6, lr}
    9762:	000d      	movs	r5, r1
    9764:	6806      	ldr	r6, [r0, #0]
    9766:	2e00      	cmp	r6, #0
    9768:	d00b      	beq.n	9782 <MQTTPacket_equals+0x22>
    976a:	0030      	movs	r0, r6
    976c:	4b0b      	ldr	r3, [pc, #44]	; (979c <MQTTPacket_equals+0x3c>)
    976e:	4798      	blx	r3
    9770:	0004      	movs	r4, r0
    9772:	0028      	movs	r0, r5
    9774:	4b09      	ldr	r3, [pc, #36]	; (979c <MQTTPacket_equals+0x3c>)
    9776:	4798      	blx	r3
    9778:	2300      	movs	r3, #0
    977a:	4284      	cmp	r4, r0
    977c:	d004      	beq.n	9788 <MQTTPacket_equals+0x28>
    977e:	0018      	movs	r0, r3
    9780:	bd70      	pop	{r4, r5, r6, pc}
    9782:	6886      	ldr	r6, [r0, #8]
    9784:	6844      	ldr	r4, [r0, #4]
    9786:	e7f4      	b.n	9772 <MQTTPacket_equals+0x12>
    9788:	0022      	movs	r2, r4
    978a:	0029      	movs	r1, r5
    978c:	0030      	movs	r0, r6
    978e:	4b04      	ldr	r3, [pc, #16]	; (97a0 <MQTTPacket_equals+0x40>)
    9790:	4798      	blx	r3
    9792:	4243      	negs	r3, r0
    9794:	4143      	adcs	r3, r0
    9796:	b2db      	uxtb	r3, r3
    9798:	e7f1      	b.n	977e <MQTTPacket_equals+0x1e>
    979a:	46c0      	nop			; (mov r8, r8)
    979c:	0000c217 	.word	0x0000c217
    97a0:	0000c225 	.word	0x0000c225

000097a4 <MQTTSerialize_publishLength>:
    97a4:	b510      	push	{r4, lr}
    97a6:	b084      	sub	sp, #16
    97a8:	0004      	movs	r4, r0
    97aa:	0008      	movs	r0, r1
    97ac:	0011      	movs	r1, r2
    97ae:	001a      	movs	r2, r3
    97b0:	4b05      	ldr	r3, [pc, #20]	; (97c8 <MQTTSerialize_publishLength+0x24>)
    97b2:	4798      	blx	r3
    97b4:	3002      	adds	r0, #2
    97b6:	9b06      	ldr	r3, [sp, #24]
    97b8:	469c      	mov	ip, r3
    97ba:	4460      	add	r0, ip
    97bc:	2c00      	cmp	r4, #0
    97be:	dd00      	ble.n	97c2 <MQTTSerialize_publishLength+0x1e>
    97c0:	3002      	adds	r0, #2
    97c2:	b004      	add	sp, #16
    97c4:	bd10      	pop	{r4, pc}
    97c6:	46c0      	nop			; (mov r8, r8)
    97c8:	00009745 	.word	0x00009745

000097cc <MQTTSerialize_publish>:
    97cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    97ce:	46de      	mov	lr, fp
    97d0:	4657      	mov	r7, sl
    97d2:	464e      	mov	r6, r9
    97d4:	b5c0      	push	{r6, r7, lr}
    97d6:	b084      	sub	sp, #16
    97d8:	0007      	movs	r7, r0
    97da:	468b      	mov	fp, r1
    97dc:	4692      	mov	sl, r2
    97de:	001e      	movs	r6, r3
    97e0:	ab0c      	add	r3, sp, #48	; 0x30
    97e2:	781b      	ldrb	r3, [r3, #0]
    97e4:	4699      	mov	r9, r3
    97e6:	ab0d      	add	r3, sp, #52	; 0x34
    97e8:	881c      	ldrh	r4, [r3, #0]
    97ea:	9003      	str	r0, [sp, #12]
    97ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    97ee:	9300      	str	r3, [sp, #0]
    97f0:	990e      	ldr	r1, [sp, #56]	; 0x38
    97f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    97f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    97f6:	0030      	movs	r0, r6
    97f8:	4d1f      	ldr	r5, [pc, #124]	; (9878 <MQTTSerialize_publish+0xac>)
    97fa:	47a8      	blx	r5
    97fc:	0005      	movs	r5, r0
    97fe:	4b1f      	ldr	r3, [pc, #124]	; (987c <MQTTSerialize_publish+0xb0>)
    9800:	4798      	blx	r3
    9802:	4558      	cmp	r0, fp
    9804:	dc34      	bgt.n	9870 <MQTTSerialize_publish+0xa4>
    9806:	2201      	movs	r2, #1
    9808:	4653      	mov	r3, sl
    980a:	4013      	ands	r3, r2
    980c:	00db      	lsls	r3, r3, #3
    980e:	2103      	movs	r1, #3
    9810:	4031      	ands	r1, r6
    9812:	0048      	lsls	r0, r1, #1
    9814:	2130      	movs	r1, #48	; 0x30
    9816:	4319      	orrs	r1, r3
    9818:	4301      	orrs	r1, r0
    981a:	464b      	mov	r3, r9
    981c:	4013      	ands	r3, r2
    981e:	4391      	bics	r1, r2
    9820:	4319      	orrs	r1, r3
    9822:	a803      	add	r0, sp, #12
    9824:	4b16      	ldr	r3, [pc, #88]	; (9880 <MQTTSerialize_publish+0xb4>)
    9826:	4798      	blx	r3
    9828:	0029      	movs	r1, r5
    982a:	9803      	ldr	r0, [sp, #12]
    982c:	4b15      	ldr	r3, [pc, #84]	; (9884 <MQTTSerialize_publish+0xb8>)
    982e:	4798      	blx	r3
    9830:	9b03      	ldr	r3, [sp, #12]
    9832:	469c      	mov	ip, r3
    9834:	4460      	add	r0, ip
    9836:	9003      	str	r0, [sp, #12]
    9838:	990e      	ldr	r1, [sp, #56]	; 0x38
    983a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    983c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    983e:	a803      	add	r0, sp, #12
    9840:	4d11      	ldr	r5, [pc, #68]	; (9888 <MQTTSerialize_publish+0xbc>)
    9842:	47a8      	blx	r5
    9844:	2e00      	cmp	r6, #0
    9846:	dd03      	ble.n	9850 <MQTTSerialize_publish+0x84>
    9848:	0021      	movs	r1, r4
    984a:	a803      	add	r0, sp, #12
    984c:	4b0f      	ldr	r3, [pc, #60]	; (988c <MQTTSerialize_publish+0xc0>)
    984e:	4798      	blx	r3
    9850:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9852:	9911      	ldr	r1, [sp, #68]	; 0x44
    9854:	9803      	ldr	r0, [sp, #12]
    9856:	4b0e      	ldr	r3, [pc, #56]	; (9890 <MQTTSerialize_publish+0xc4>)
    9858:	4798      	blx	r3
    985a:	9b03      	ldr	r3, [sp, #12]
    985c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    985e:	4694      	mov	ip, r2
    9860:	4463      	add	r3, ip
    9862:	1bd8      	subs	r0, r3, r7
    9864:	b004      	add	sp, #16
    9866:	bc1c      	pop	{r2, r3, r4}
    9868:	4691      	mov	r9, r2
    986a:	469a      	mov	sl, r3
    986c:	46a3      	mov	fp, r4
    986e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9870:	2002      	movs	r0, #2
    9872:	4240      	negs	r0, r0
    9874:	e7f6      	b.n	9864 <MQTTSerialize_publish+0x98>
    9876:	46c0      	nop			; (mov r8, r8)
    9878:	000097a5 	.word	0x000097a5
    987c:	000095e9 	.word	0x000095e9
    9880:	0000964b 	.word	0x0000964b
    9884:	00009561 	.word	0x00009561
    9888:	000096b9 	.word	0x000096b9
    988c:	00009657 	.word	0x00009657
    9890:	0000bcb9 	.word	0x0000bcb9

00009894 <MQTTSerialize_ack>:
    9894:	b530      	push	{r4, r5, lr}
    9896:	b083      	sub	sp, #12
    9898:	0004      	movs	r4, r0
    989a:	a806      	add	r0, sp, #24
    989c:	8805      	ldrh	r5, [r0, #0]
    989e:	9401      	str	r4, [sp, #4]
    98a0:	2903      	cmp	r1, #3
    98a2:	dd1e      	ble.n	98e2 <MQTTSerialize_ack+0x4e>
    98a4:	210f      	movs	r1, #15
    98a6:	4011      	ands	r1, r2
    98a8:	2001      	movs	r0, #1
    98aa:	4003      	ands	r3, r0
    98ac:	00db      	lsls	r3, r3, #3
    98ae:	0109      	lsls	r1, r1, #4
    98b0:	3a06      	subs	r2, #6
    98b2:	4250      	negs	r0, r2
    98b4:	4142      	adcs	r2, r0
    98b6:	0052      	lsls	r2, r2, #1
    98b8:	4319      	orrs	r1, r3
    98ba:	4311      	orrs	r1, r2
    98bc:	a801      	add	r0, sp, #4
    98be:	4b0a      	ldr	r3, [pc, #40]	; (98e8 <MQTTSerialize_ack+0x54>)
    98c0:	4798      	blx	r3
    98c2:	2102      	movs	r1, #2
    98c4:	9801      	ldr	r0, [sp, #4]
    98c6:	4b09      	ldr	r3, [pc, #36]	; (98ec <MQTTSerialize_ack+0x58>)
    98c8:	4798      	blx	r3
    98ca:	9b01      	ldr	r3, [sp, #4]
    98cc:	469c      	mov	ip, r3
    98ce:	4460      	add	r0, ip
    98d0:	9001      	str	r0, [sp, #4]
    98d2:	0029      	movs	r1, r5
    98d4:	a801      	add	r0, sp, #4
    98d6:	4b06      	ldr	r3, [pc, #24]	; (98f0 <MQTTSerialize_ack+0x5c>)
    98d8:	4798      	blx	r3
    98da:	9b01      	ldr	r3, [sp, #4]
    98dc:	1b18      	subs	r0, r3, r4
    98de:	b003      	add	sp, #12
    98e0:	bd30      	pop	{r4, r5, pc}
    98e2:	2002      	movs	r0, #2
    98e4:	4240      	negs	r0, r0
    98e6:	e7fa      	b.n	98de <MQTTSerialize_ack+0x4a>
    98e8:	0000964b 	.word	0x0000964b
    98ec:	00009561 	.word	0x00009561
    98f0:	00009657 	.word	0x00009657

000098f4 <MQTTSerialize_subscribeLength>:
    98f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    98f6:	46c6      	mov	lr, r8
    98f8:	b500      	push	{lr}
    98fa:	1e07      	subs	r7, r0, #0
    98fc:	dd12      	ble.n	9924 <MQTTSerialize_subscribeLength+0x30>
    98fe:	000c      	movs	r4, r1
    9900:	2602      	movs	r6, #2
    9902:	2500      	movs	r5, #0
    9904:	4b08      	ldr	r3, [pc, #32]	; (9928 <MQTTSerialize_subscribeLength+0x34>)
    9906:	4698      	mov	r8, r3
    9908:	6820      	ldr	r0, [r4, #0]
    990a:	6861      	ldr	r1, [r4, #4]
    990c:	68a2      	ldr	r2, [r4, #8]
    990e:	47c0      	blx	r8
    9910:	3003      	adds	r0, #3
    9912:	1836      	adds	r6, r6, r0
    9914:	3501      	adds	r5, #1
    9916:	340c      	adds	r4, #12
    9918:	42af      	cmp	r7, r5
    991a:	d1f5      	bne.n	9908 <MQTTSerialize_subscribeLength+0x14>
    991c:	0030      	movs	r0, r6
    991e:	bc04      	pop	{r2}
    9920:	4690      	mov	r8, r2
    9922:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9924:	2602      	movs	r6, #2
    9926:	e7f9      	b.n	991c <MQTTSerialize_subscribeLength+0x28>
    9928:	00009745 	.word	0x00009745

0000992c <MQTTSerialize_subscribe>:
    992c:	b5f0      	push	{r4, r5, r6, r7, lr}
    992e:	46d6      	mov	lr, sl
    9930:	464f      	mov	r7, r9
    9932:	4646      	mov	r6, r8
    9934:	b5c0      	push	{r6, r7, lr}
    9936:	b084      	sub	sp, #16
    9938:	4682      	mov	sl, r0
    993a:	000e      	movs	r6, r1
    993c:	0015      	movs	r5, r2
    993e:	9301      	str	r3, [sp, #4]
    9940:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    9942:	9003      	str	r0, [sp, #12]
    9944:	990d      	ldr	r1, [sp, #52]	; 0x34
    9946:	0038      	movs	r0, r7
    9948:	4b1f      	ldr	r3, [pc, #124]	; (99c8 <MQTTSerialize_subscribe+0x9c>)
    994a:	4798      	blx	r3
    994c:	0004      	movs	r4, r0
    994e:	4b1f      	ldr	r3, [pc, #124]	; (99cc <MQTTSerialize_subscribe+0xa0>)
    9950:	4798      	blx	r3
    9952:	42b0      	cmp	r0, r6
    9954:	dc34      	bgt.n	99c0 <MQTTSerialize_subscribe+0x94>
    9956:	2101      	movs	r1, #1
    9958:	4029      	ands	r1, r5
    995a:	00ca      	lsls	r2, r1, #3
    995c:	2180      	movs	r1, #128	; 0x80
    995e:	4311      	orrs	r1, r2
    9960:	2302      	movs	r3, #2
    9962:	4319      	orrs	r1, r3
    9964:	a803      	add	r0, sp, #12
    9966:	4b1a      	ldr	r3, [pc, #104]	; (99d0 <MQTTSerialize_subscribe+0xa4>)
    9968:	4798      	blx	r3
    996a:	0021      	movs	r1, r4
    996c:	9803      	ldr	r0, [sp, #12]
    996e:	4b19      	ldr	r3, [pc, #100]	; (99d4 <MQTTSerialize_subscribe+0xa8>)
    9970:	4798      	blx	r3
    9972:	9a03      	ldr	r2, [sp, #12]
    9974:	4694      	mov	ip, r2
    9976:	4460      	add	r0, ip
    9978:	9003      	str	r0, [sp, #12]
    997a:	9901      	ldr	r1, [sp, #4]
    997c:	a803      	add	r0, sp, #12
    997e:	4b16      	ldr	r3, [pc, #88]	; (99d8 <MQTTSerialize_subscribe+0xac>)
    9980:	4798      	blx	r3
    9982:	2f00      	cmp	r7, #0
    9984:	dd13      	ble.n	99ae <MQTTSerialize_subscribe+0x82>
    9986:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    9988:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    998a:	2500      	movs	r5, #0
    998c:	4b13      	ldr	r3, [pc, #76]	; (99dc <MQTTSerialize_subscribe+0xb0>)
    998e:	4699      	mov	r9, r3
    9990:	4b0f      	ldr	r3, [pc, #60]	; (99d0 <MQTTSerialize_subscribe+0xa4>)
    9992:	4698      	mov	r8, r3
    9994:	6821      	ldr	r1, [r4, #0]
    9996:	6862      	ldr	r2, [r4, #4]
    9998:	68a3      	ldr	r3, [r4, #8]
    999a:	a803      	add	r0, sp, #12
    999c:	47c8      	blx	r9
    999e:	ce02      	ldmia	r6!, {r1}
    99a0:	b2c9      	uxtb	r1, r1
    99a2:	a803      	add	r0, sp, #12
    99a4:	47c0      	blx	r8
    99a6:	3501      	adds	r5, #1
    99a8:	340c      	adds	r4, #12
    99aa:	42af      	cmp	r7, r5
    99ac:	d1f2      	bne.n	9994 <MQTTSerialize_subscribe+0x68>
    99ae:	9b03      	ldr	r3, [sp, #12]
    99b0:	4652      	mov	r2, sl
    99b2:	1a98      	subs	r0, r3, r2
    99b4:	b004      	add	sp, #16
    99b6:	bc1c      	pop	{r2, r3, r4}
    99b8:	4690      	mov	r8, r2
    99ba:	4699      	mov	r9, r3
    99bc:	46a2      	mov	sl, r4
    99be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    99c0:	2002      	movs	r0, #2
    99c2:	4240      	negs	r0, r0
    99c4:	e7f6      	b.n	99b4 <MQTTSerialize_subscribe+0x88>
    99c6:	46c0      	nop			; (mov r8, r8)
    99c8:	000098f5 	.word	0x000098f5
    99cc:	000095e9 	.word	0x000095e9
    99d0:	0000964b 	.word	0x0000964b
    99d4:	00009561 	.word	0x00009561
    99d8:	00009657 	.word	0x00009657
    99dc:	000096b9 	.word	0x000096b9

000099e0 <MQTTDeserialize_suback>:
    99e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    99e2:	46ce      	mov	lr, r9
    99e4:	4647      	mov	r7, r8
    99e6:	b580      	push	{r7, lr}
    99e8:	b083      	sub	sp, #12
    99ea:	0004      	movs	r4, r0
    99ec:	000e      	movs	r6, r1
    99ee:	0015      	movs	r5, r2
    99f0:	001f      	movs	r7, r3
    99f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99f4:	9301      	str	r3, [sp, #4]
    99f6:	a801      	add	r0, sp, #4
    99f8:	4b1e      	ldr	r3, [pc, #120]	; (9a74 <MQTTDeserialize_suback+0x94>)
    99fa:	4798      	blx	r3
    99fc:	23f0      	movs	r3, #240	; 0xf0
    99fe:	4003      	ands	r3, r0
    9a00:	2000      	movs	r0, #0
    9a02:	2b90      	cmp	r3, #144	; 0x90
    9a04:	d004      	beq.n	9a10 <MQTTDeserialize_suback+0x30>
    9a06:	b003      	add	sp, #12
    9a08:	bc0c      	pop	{r2, r3}
    9a0a:	4690      	mov	r8, r2
    9a0c:	4699      	mov	r9, r3
    9a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a10:	4669      	mov	r1, sp
    9a12:	9801      	ldr	r0, [sp, #4]
    9a14:	4b18      	ldr	r3, [pc, #96]	; (9a78 <MQTTDeserialize_suback+0x98>)
    9a16:	4798      	blx	r3
    9a18:	9b01      	ldr	r3, [sp, #4]
    9a1a:	181b      	adds	r3, r3, r0
    9a1c:	9301      	str	r3, [sp, #4]
    9a1e:	9a00      	ldr	r2, [sp, #0]
    9a20:	2a01      	cmp	r2, #1
    9a22:	ddf0      	ble.n	9a06 <MQTTDeserialize_suback+0x26>
    9a24:	4698      	mov	r8, r3
    9a26:	4490      	add	r8, r2
    9a28:	a801      	add	r0, sp, #4
    9a2a:	4b14      	ldr	r3, [pc, #80]	; (9a7c <MQTTDeserialize_suback+0x9c>)
    9a2c:	4798      	blx	r3
    9a2e:	8020      	strh	r0, [r4, #0]
    9a30:	2300      	movs	r3, #0
    9a32:	602b      	str	r3, [r5, #0]
    9a34:	9b01      	ldr	r3, [sp, #4]
    9a36:	4598      	cmp	r8, r3
    9a38:	d916      	bls.n	9a68 <MQTTDeserialize_suback+0x88>
    9a3a:	2e00      	cmp	r6, #0
    9a3c:	db16      	blt.n	9a6c <MQTTDeserialize_suback+0x8c>
    9a3e:	2300      	movs	r3, #0
    9a40:	4a0c      	ldr	r2, [pc, #48]	; (9a74 <MQTTDeserialize_suback+0x94>)
    9a42:	4691      	mov	r9, r2
    9a44:	1c5a      	adds	r2, r3, #1
    9a46:	602a      	str	r2, [r5, #0]
    9a48:	009b      	lsls	r3, r3, #2
    9a4a:	18fc      	adds	r4, r7, r3
    9a4c:	a801      	add	r0, sp, #4
    9a4e:	47c8      	blx	r9
    9a50:	6020      	str	r0, [r4, #0]
    9a52:	9b01      	ldr	r3, [sp, #4]
    9a54:	4598      	cmp	r8, r3
    9a56:	d905      	bls.n	9a64 <MQTTDeserialize_suback+0x84>
    9a58:	682b      	ldr	r3, [r5, #0]
    9a5a:	42b3      	cmp	r3, r6
    9a5c:	ddf2      	ble.n	9a44 <MQTTDeserialize_suback+0x64>
    9a5e:	2001      	movs	r0, #1
    9a60:	4240      	negs	r0, r0
    9a62:	e7d0      	b.n	9a06 <MQTTDeserialize_suback+0x26>
    9a64:	2001      	movs	r0, #1
    9a66:	e7ce      	b.n	9a06 <MQTTDeserialize_suback+0x26>
    9a68:	2001      	movs	r0, #1
    9a6a:	e7cc      	b.n	9a06 <MQTTDeserialize_suback+0x26>
    9a6c:	2001      	movs	r0, #1
    9a6e:	4240      	negs	r0, r0
    9a70:	e7c9      	b.n	9a06 <MQTTDeserialize_suback+0x26>
    9a72:	46c0      	nop			; (mov r8, r8)
    9a74:	0000963f 	.word	0x0000963f
    9a78:	00009611 	.word	0x00009611
    9a7c:	0000962d 	.word	0x0000962d

00009a80 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    9a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9a82:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    9a84:	2041      	movs	r0, #65	; 0x41
    9a86:	5c23      	ldrb	r3, [r4, r0]
    9a88:	2501      	movs	r5, #1
    9a8a:	432b      	orrs	r3, r5
    9a8c:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    9a8e:	b292      	uxth	r2, r2
    9a90:	2000      	movs	r0, #0
    9a92:	5620      	ldrsb	r0, [r4, r0]
    9a94:	2300      	movs	r3, #0
    9a96:	4d12      	ldr	r5, [pc, #72]	; (9ae0 <_http_client_send_wait+0x60>)
    9a98:	47a8      	blx	r5
    9a9a:	2800      	cmp	r0, #0
    9a9c:	db16      	blt.n	9acc <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9a9e:	2341      	movs	r3, #65	; 0x41
    9aa0:	5ce3      	ldrb	r3, [r4, r3]
    9aa2:	07db      	lsls	r3, r3, #31
    9aa4:	d518      	bpl.n	9ad8 <_http_client_send_wait+0x58>
    9aa6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    9aa8:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9aaa:	2b02      	cmp	r3, #2
    9aac:	d917      	bls.n	9ade <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    9aae:	4f0d      	ldr	r7, [pc, #52]	; (9ae4 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    9ab0:	4e0d      	ldr	r6, [pc, #52]	; (9ae8 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9ab2:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    9ab4:	2000      	movs	r0, #0
    9ab6:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    9ab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9aba:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9abc:	5d63      	ldrb	r3, [r4, r5]
    9abe:	07db      	lsls	r3, r3, #31
    9ac0:	d50c      	bpl.n	9adc <_http_client_send_wait+0x5c>
    9ac2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9ac4:	2b02      	cmp	r3, #2
    9ac6:	d8f5      	bhi.n	9ab4 <_http_client_send_wait+0x34>
	return 0;
    9ac8:	2000      	movs	r0, #0
    9aca:	e008      	b.n	9ade <_http_client_send_wait+0x5e>
		module->sending = 0;
    9acc:	2241      	movs	r2, #65	; 0x41
    9ace:	5ca3      	ldrb	r3, [r4, r2]
    9ad0:	2101      	movs	r1, #1
    9ad2:	438b      	bics	r3, r1
    9ad4:	54a3      	strb	r3, [r4, r2]
		return result;
    9ad6:	e002      	b.n	9ade <_http_client_send_wait+0x5e>
	return 0;
    9ad8:	2000      	movs	r0, #0
    9ada:	e000      	b.n	9ade <_http_client_send_wait+0x5e>
    9adc:	2000      	movs	r0, #0
}
    9ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ae0:	0000409d 	.word	0x0000409d
    9ae4:	00002301 	.word	0x00002301
    9ae8:	0000ac15 	.word	0x0000ac15

00009aec <http_client_get_config_defaults>:
	config->port = 80;
    9aec:	2350      	movs	r3, #80	; 0x50
    9aee:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    9af0:	2300      	movs	r3, #0
    9af2:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    9af4:	4a05      	ldr	r2, [pc, #20]	; (9b0c <http_client_get_config_defaults+0x20>)
    9af6:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    9af8:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    9afa:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    9afc:	3301      	adds	r3, #1
    9afe:	33ff      	adds	r3, #255	; 0xff
    9b00:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    9b02:	3bae      	subs	r3, #174	; 0xae
    9b04:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    9b06:	4b02      	ldr	r3, [pc, #8]	; (9b10 <http_client_get_config_defaults+0x24>)
    9b08:	6183      	str	r3, [r0, #24]
}
    9b0a:	4770      	bx	lr
    9b0c:	00004e20 	.word	0x00004e20
    9b10:	0000ebd0 	.word	0x0000ebd0

00009b14 <http_client_init>:
{
    9b14:	b570      	push	{r4, r5, r6, lr}
    9b16:	0004      	movs	r4, r0
    9b18:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    9b1a:	2800      	cmp	r0, #0
    9b1c:	d038      	beq.n	9b90 <http_client_init+0x7c>
    9b1e:	2900      	cmp	r1, #0
    9b20:	d039      	beq.n	9b96 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    9b22:	690b      	ldr	r3, [r1, #16]
    9b24:	2b00      	cmp	r3, #0
    9b26:	d039      	beq.n	9b9c <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    9b28:	684b      	ldr	r3, [r1, #4]
    9b2a:	2b00      	cmp	r3, #0
    9b2c:	d039      	beq.n	9ba2 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    9b2e:	694b      	ldr	r3, [r1, #20]
    9b30:	2b51      	cmp	r3, #81	; 0x51
    9b32:	d939      	bls.n	9ba8 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    9b34:	22e8      	movs	r2, #232	; 0xe8
    9b36:	2100      	movs	r1, #0
    9b38:	4b1e      	ldr	r3, [pc, #120]	; (9bb4 <http_client_init+0xa0>)
    9b3a:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    9b3c:	0020      	movs	r0, r4
    9b3e:	3050      	adds	r0, #80	; 0x50
    9b40:	221c      	movs	r2, #28
    9b42:	0029      	movs	r1, r5
    9b44:	4b1c      	ldr	r3, [pc, #112]	; (9bb8 <http_client_init+0xa4>)
    9b46:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    9b48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d008      	beq.n	9b60 <http_client_init+0x4c>
	if (config->timeout > 0) {
    9b4e:	892b      	ldrh	r3, [r5, #8]
    9b50:	2b00      	cmp	r3, #0
    9b52:	d111      	bne.n	9b78 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    9b54:	2300      	movs	r3, #0
    9b56:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    9b58:	22d8      	movs	r2, #216	; 0xd8
    9b5a:	50a3      	str	r3, [r4, r2]
	return 0;
    9b5c:	2000      	movs	r0, #0
}
    9b5e:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    9b60:	6928      	ldr	r0, [r5, #16]
    9b62:	4b16      	ldr	r3, [pc, #88]	; (9bbc <http_client_init+0xa8>)
    9b64:	4798      	blx	r3
    9b66:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    9b68:	2800      	cmp	r0, #0
    9b6a:	d020      	beq.n	9bae <http_client_init+0x9a>
		module->alloc_buffer = 1;
    9b6c:	2241      	movs	r2, #65	; 0x41
    9b6e:	5ca3      	ldrb	r3, [r4, r2]
    9b70:	2104      	movs	r1, #4
    9b72:	430b      	orrs	r3, r1
    9b74:	54a3      	strb	r3, [r4, r2]
    9b76:	e7ea      	b.n	9b4e <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    9b78:	6868      	ldr	r0, [r5, #4]
    9b7a:	2300      	movs	r3, #0
    9b7c:	0022      	movs	r2, r4
    9b7e:	4910      	ldr	r1, [pc, #64]	; (9bc0 <http_client_init+0xac>)
    9b80:	4d10      	ldr	r5, [pc, #64]	; (9bc4 <http_client_init+0xb0>)
    9b82:	47a8      	blx	r5
    9b84:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    9b86:	2800      	cmp	r0, #0
    9b88:	dae4      	bge.n	9b54 <http_client_init+0x40>
			return -ENOSPC;
    9b8a:	201c      	movs	r0, #28
    9b8c:	4240      	negs	r0, r0
    9b8e:	e7e6      	b.n	9b5e <http_client_init+0x4a>
		return -EINVAL;
    9b90:	2016      	movs	r0, #22
    9b92:	4240      	negs	r0, r0
    9b94:	e7e3      	b.n	9b5e <http_client_init+0x4a>
    9b96:	2016      	movs	r0, #22
    9b98:	4240      	negs	r0, r0
    9b9a:	e7e0      	b.n	9b5e <http_client_init+0x4a>
		return -EINVAL;
    9b9c:	2016      	movs	r0, #22
    9b9e:	4240      	negs	r0, r0
    9ba0:	e7dd      	b.n	9b5e <http_client_init+0x4a>
		return -EINVAL;
    9ba2:	2016      	movs	r0, #22
    9ba4:	4240      	negs	r0, r0
    9ba6:	e7da      	b.n	9b5e <http_client_init+0x4a>
		return -EINVAL;
    9ba8:	2016      	movs	r0, #22
    9baa:	4240      	negs	r0, r0
    9bac:	e7d7      	b.n	9b5e <http_client_init+0x4a>
			return -ENOMEM;
    9bae:	200c      	movs	r0, #12
    9bb0:	4240      	negs	r0, r0
    9bb2:	e7d4      	b.n	9b5e <http_client_init+0x4a>
    9bb4:	0000bcef 	.word	0x0000bcef
    9bb8:	0000bcb9 	.word	0x0000bcb9
    9bbc:	0000bc91 	.word	0x0000bc91
    9bc0:	00009cd9 	.word	0x00009cd9
    9bc4:	0000aba1 	.word	0x0000aba1

00009bc8 <http_client_register_callback>:
	if (module == NULL) {
    9bc8:	2800      	cmp	r0, #0
    9bca:	d002      	beq.n	9bd2 <http_client_register_callback+0xa>
	module->cb = callback;
    9bcc:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    9bce:	2000      	movs	r0, #0
}
    9bd0:	4770      	bx	lr
		return -EINVAL;
    9bd2:	2016      	movs	r0, #22
    9bd4:	4240      	negs	r0, r0
    9bd6:	e7fb      	b.n	9bd0 <http_client_register_callback+0x8>

00009bd8 <_http_client_clear_conn>:
{
    9bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bda:	b085      	sub	sp, #20
    9bdc:	0004      	movs	r4, r0
    9bde:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    9be0:	23c0      	movs	r3, #192	; 0xc0
    9be2:	58c3      	ldr	r3, [r0, r3]
    9be4:	2b00      	cmp	r3, #0
    9be6:	d002      	beq.n	9bee <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    9be8:	22c4      	movs	r2, #196	; 0xc4
    9bea:	5880      	ldr	r0, [r0, r2]
    9bec:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    9bee:	0020      	movs	r0, r4
    9bf0:	30b0      	adds	r0, #176	; 0xb0
    9bf2:	2218      	movs	r2, #24
    9bf4:	2100      	movs	r1, #0
    9bf6:	4b17      	ldr	r3, [pc, #92]	; (9c54 <_http_client_clear_conn+0x7c>)
    9bf8:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    9bfa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9bfc:	2b00      	cmp	r3, #0
    9bfe:	d124      	bne.n	9c4a <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    9c00:	2300      	movs	r3, #0
    9c02:	56e3      	ldrsb	r3, [r4, r3]
    9c04:	009b      	lsls	r3, r3, #2
    9c06:	2500      	movs	r5, #0
    9c08:	4a13      	ldr	r2, [pc, #76]	; (9c58 <_http_client_clear_conn+0x80>)
    9c0a:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    9c0c:	0020      	movs	r0, r4
    9c0e:	306c      	adds	r0, #108	; 0x6c
    9c10:	226c      	movs	r2, #108	; 0x6c
    9c12:	2100      	movs	r1, #0
    9c14:	4f0f      	ldr	r7, [pc, #60]	; (9c54 <_http_client_clear_conn+0x7c>)
    9c16:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    9c18:	0020      	movs	r0, r4
    9c1a:	30d8      	adds	r0, #216	; 0xd8
    9c1c:	2210      	movs	r2, #16
    9c1e:	2100      	movs	r1, #0
    9c20:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    9c22:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    9c24:	23d8      	movs	r3, #216	; 0xd8
    9c26:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    9c28:	2241      	movs	r2, #65	; 0x41
    9c2a:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    9c2c:	2101      	movs	r1, #1
    9c2e:	438b      	bics	r3, r1
    9c30:	3101      	adds	r1, #1
    9c32:	438b      	bics	r3, r1
    9c34:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    9c36:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    9c38:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9c3a:	2b00      	cmp	r3, #0
    9c3c:	d003      	beq.n	9c46 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    9c3e:	aa01      	add	r2, sp, #4
    9c40:	3102      	adds	r1, #2
    9c42:	0020      	movs	r0, r4
    9c44:	4798      	blx	r3
}
    9c46:	b005      	add	sp, #20
    9c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    9c4a:	2000      	movs	r0, #0
    9c4c:	5620      	ldrsb	r0, [r4, r0]
    9c4e:	4b03      	ldr	r3, [pc, #12]	; (9c5c <_http_client_clear_conn+0x84>)
    9c50:	4798      	blx	r3
    9c52:	e7d5      	b.n	9c00 <_http_client_clear_conn+0x28>
    9c54:	0000bcef 	.word	0x0000bcef
    9c58:	200007fc 	.word	0x200007fc
    9c5c:	000041c9 	.word	0x000041c9

00009c60 <http_client_socket_resolve_handler>:
{
    9c60:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c62:	b087      	sub	sp, #28
    9c64:	9000      	str	r0, [sp, #0]
    9c66:	9101      	str	r1, [sp, #4]
    9c68:	4c17      	ldr	r4, [pc, #92]	; (9cc8 <http_client_socket_resolve_handler+0x68>)
    9c6a:	0026      	movs	r6, r4
    9c6c:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    9c6e:	4f17      	ldr	r7, [pc, #92]	; (9ccc <http_client_socket_resolve_handler+0x6c>)
    9c70:	e015      	b.n	9c9e <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    9c72:	2302      	movs	r3, #2
    9c74:	aa02      	add	r2, sp, #8
    9c76:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    9c78:	334e      	adds	r3, #78	; 0x4e
    9c7a:	5aeb      	ldrh	r3, [r5, r3]
    9c7c:	021a      	lsls	r2, r3, #8
    9c7e:	0a1b      	lsrs	r3, r3, #8
    9c80:	4313      	orrs	r3, r2
    9c82:	aa02      	add	r2, sp, #8
    9c84:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    9c86:	9b01      	ldr	r3, [sp, #4]
    9c88:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    9c8a:	2000      	movs	r0, #0
    9c8c:	5628      	ldrsb	r0, [r5, r0]
    9c8e:	2210      	movs	r2, #16
    9c90:	a902      	add	r1, sp, #8
    9c92:	4b0f      	ldr	r3, [pc, #60]	; (9cd0 <http_client_socket_resolve_handler+0x70>)
    9c94:	4798      	blx	r3
				return;
    9c96:	e015      	b.n	9cc4 <http_client_socket_resolve_handler+0x64>
    9c98:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    9c9a:	42b4      	cmp	r4, r6
    9c9c:	d012      	beq.n	9cc4 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    9c9e:	6825      	ldr	r5, [r4, #0]
    9ca0:	2d00      	cmp	r5, #0
    9ca2:	d0f9      	beq.n	9c98 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    9ca4:	1c69      	adds	r1, r5, #1
    9ca6:	9800      	ldr	r0, [sp, #0]
    9ca8:	47b8      	blx	r7
    9caa:	2800      	cmp	r0, #0
    9cac:	d1f4      	bne.n	9c98 <http_client_socket_resolve_handler+0x38>
    9cae:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    9cb0:	2b01      	cmp	r3, #1
    9cb2:	d1f1      	bne.n	9c98 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    9cb4:	9b01      	ldr	r3, [sp, #4]
    9cb6:	2b00      	cmp	r3, #0
    9cb8:	d1db      	bne.n	9c72 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    9cba:	2176      	movs	r1, #118	; 0x76
    9cbc:	4249      	negs	r1, r1
    9cbe:	0028      	movs	r0, r5
    9cc0:	4b04      	ldr	r3, [pc, #16]	; (9cd4 <http_client_socket_resolve_handler+0x74>)
    9cc2:	4798      	blx	r3
}
    9cc4:	b007      	add	sp, #28
    9cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cc8:	200007fc 	.word	0x200007fc
    9ccc:	0000c1b9 	.word	0x0000c1b9
    9cd0:	0000400d 	.word	0x0000400d
    9cd4:	00009bd9 	.word	0x00009bd9

00009cd8 <http_client_timer_callback>:
{
    9cd8:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    9cda:	2a00      	cmp	r2, #0
    9cdc:	d004      	beq.n	9ce8 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    9cde:	213e      	movs	r1, #62	; 0x3e
    9ce0:	4249      	negs	r1, r1
    9ce2:	0010      	movs	r0, r2
    9ce4:	4b01      	ldr	r3, [pc, #4]	; (9cec <http_client_timer_callback+0x14>)
    9ce6:	4798      	blx	r3
}
    9ce8:	bd10      	pop	{r4, pc}
    9cea:	46c0      	nop			; (mov r8, r8)
    9cec:	00009bd9 	.word	0x00009bd9

00009cf0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    9cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cf2:	46de      	mov	lr, fp
    9cf4:	4657      	mov	r7, sl
    9cf6:	b580      	push	{r7, lr}
    9cf8:	b095      	sub	sp, #84	; 0x54
    9cfa:	af02      	add	r7, sp, #8
    9cfc:	0004      	movs	r4, r0
    9cfe:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    9d00:	2310      	movs	r3, #16
    9d02:	2208      	movs	r2, #8
    9d04:	18ba      	adds	r2, r7, r2
    9d06:	18d2      	adds	r2, r2, r3
    9d08:	4bb1      	ldr	r3, [pc, #708]	; (9fd0 <_http_client_request+0x2e0>)
    9d0a:	cb23      	ldmia	r3!, {r0, r1, r5}
    9d0c:	c223      	stmia	r2!, {r0, r1, r5}
    9d0e:	681b      	ldr	r3, [r3, #0]
    9d10:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    9d12:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9d14:	1dd3      	adds	r3, r2, #7
    9d16:	08db      	lsrs	r3, r3, #3
    9d18:	00db      	lsls	r3, r3, #3
    9d1a:	4669      	mov	r1, sp
    9d1c:	1acb      	subs	r3, r1, r3
    9d1e:	469d      	mov	sp, r3
    9d20:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    9d22:	2c00      	cmp	r4, #0
    9d24:	d100      	bne.n	9d28 <_http_client_request+0x38>
    9d26:	e1f0      	b.n	a10a <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    9d28:	2341      	movs	r3, #65	; 0x41
    9d2a:	5ce3      	ldrb	r3, [r4, r3]
    9d2c:	07db      	lsls	r3, r3, #31
    9d2e:	d500      	bpl.n	9d32 <_http_client_request+0x42>
    9d30:	e1eb      	b.n	a10a <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    9d32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9d34:	2b03      	cmp	r3, #3
    9d36:	d004      	beq.n	9d42 <_http_client_request+0x52>
    9d38:	2b04      	cmp	r3, #4
    9d3a:	d100      	bne.n	9d3e <_http_client_request+0x4e>
    9d3c:	e120      	b.n	9f80 <_http_client_request+0x290>
    9d3e:	46dd      	mov	sp, fp
    9d40:	e1e4      	b.n	a10c <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    9d42:	2300      	movs	r3, #0
    9d44:	21cc      	movs	r1, #204	; 0xcc
    9d46:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    9d48:	3104      	adds	r1, #4
    9d4a:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    9d4c:	9400      	str	r4, [sp, #0]
    9d4e:	4ba1      	ldr	r3, [pc, #644]	; (9fd4 <_http_client_request+0x2e4>)
    9d50:	0031      	movs	r1, r6
    9d52:	202c      	movs	r0, #44	; 0x2c
    9d54:	2508      	movs	r5, #8
    9d56:	46ac      	mov	ip, r5
    9d58:	44bc      	add	ip, r7
    9d5a:	4460      	add	r0, ip
    9d5c:	4d9e      	ldr	r5, [pc, #632]	; (9fd8 <_http_client_request+0x2e8>)
    9d5e:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    9d60:	23c8      	movs	r3, #200	; 0xc8
    9d62:	5ce3      	ldrb	r3, [r4, r3]
    9d64:	2b01      	cmp	r3, #1
    9d66:	d100      	bne.n	9d6a <_http_client_request+0x7a>
    9d68:	e0a9      	b.n	9ebe <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    9d6a:	2b02      	cmp	r3, #2
    9d6c:	d100      	bne.n	9d70 <_http_client_request+0x80>
    9d6e:	e0af      	b.n	9ed0 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    9d70:	2b03      	cmp	r3, #3
    9d72:	d100      	bne.n	9d76 <_http_client_request+0x86>
    9d74:	e0b5      	b.n	9ee2 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    9d76:	2b04      	cmp	r3, #4
    9d78:	d100      	bne.n	9d7c <_http_client_request+0x8c>
    9d7a:	e0bb      	b.n	9ef4 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    9d7c:	2b05      	cmp	r3, #5
    9d7e:	d100      	bne.n	9d82 <_http_client_request+0x92>
    9d80:	e0c1      	b.n	9f06 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    9d82:	2b06      	cmp	r3, #6
    9d84:	d100      	bne.n	9d88 <_http_client_request+0x98>
    9d86:	e0c7      	b.n	9f18 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    9d88:	0025      	movs	r5, r4
    9d8a:	3570      	adds	r5, #112	; 0x70
    9d8c:	0028      	movs	r0, r5
    9d8e:	4b93      	ldr	r3, [pc, #588]	; (9fdc <_http_client_request+0x2ec>)
    9d90:	469a      	mov	sl, r3
    9d92:	4798      	blx	r3
    9d94:	0002      	movs	r2, r0
    9d96:	0029      	movs	r1, r5
    9d98:	232c      	movs	r3, #44	; 0x2c
    9d9a:	2008      	movs	r0, #8
    9d9c:	1838      	adds	r0, r7, r0
    9d9e:	18c0      	adds	r0, r0, r3
    9da0:	4d8f      	ldr	r5, [pc, #572]	; (9fe0 <_http_client_request+0x2f0>)
    9da2:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    9da4:	220b      	movs	r2, #11
    9da6:	498f      	ldr	r1, [pc, #572]	; (9fe4 <_http_client_request+0x2f4>)
    9da8:	232c      	movs	r3, #44	; 0x2c
    9daa:	2008      	movs	r0, #8
    9dac:	1838      	adds	r0, r7, r0
    9dae:	18c0      	adds	r0, r0, r3
    9db0:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    9db2:	220c      	movs	r2, #12
    9db4:	498c      	ldr	r1, [pc, #560]	; (9fe8 <_http_client_request+0x2f8>)
    9db6:	232c      	movs	r3, #44	; 0x2c
    9db8:	2008      	movs	r0, #8
    9dba:	1838      	adds	r0, r7, r0
    9dbc:	18c0      	adds	r0, r0, r3
    9dbe:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    9dc0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    9dc2:	607b      	str	r3, [r7, #4]
    9dc4:	0018      	movs	r0, r3
    9dc6:	47d0      	blx	sl
    9dc8:	0002      	movs	r2, r0
    9dca:	6879      	ldr	r1, [r7, #4]
    9dcc:	232c      	movs	r3, #44	; 0x2c
    9dce:	2008      	movs	r0, #8
    9dd0:	1838      	adds	r0, r7, r0
    9dd2:	18c0      	adds	r0, r0, r3
    9dd4:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9dd6:	2202      	movs	r2, #2
    9dd8:	4984      	ldr	r1, [pc, #528]	; (9fec <_http_client_request+0x2fc>)
    9dda:	232c      	movs	r3, #44	; 0x2c
    9ddc:	2008      	movs	r0, #8
    9dde:	1838      	adds	r0, r7, r0
    9de0:	18c0      	adds	r0, r0, r3
    9de2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    9de4:	2206      	movs	r2, #6
    9de6:	4982      	ldr	r1, [pc, #520]	; (9ff0 <_http_client_request+0x300>)
    9de8:	232c      	movs	r3, #44	; 0x2c
    9dea:	2008      	movs	r0, #8
    9dec:	1838      	adds	r0, r7, r0
    9dee:	18c0      	adds	r0, r0, r3
    9df0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    9df2:	1c63      	adds	r3, r4, #1
    9df4:	607b      	str	r3, [r7, #4]
    9df6:	0018      	movs	r0, r3
    9df8:	47d0      	blx	sl
    9dfa:	0002      	movs	r2, r0
    9dfc:	6879      	ldr	r1, [r7, #4]
    9dfe:	232c      	movs	r3, #44	; 0x2c
    9e00:	2008      	movs	r0, #8
    9e02:	1838      	adds	r0, r7, r0
    9e04:	18c0      	adds	r0, r0, r3
    9e06:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9e08:	2202      	movs	r2, #2
    9e0a:	4978      	ldr	r1, [pc, #480]	; (9fec <_http_client_request+0x2fc>)
    9e0c:	232c      	movs	r3, #44	; 0x2c
    9e0e:	2008      	movs	r0, #8
    9e10:	1838      	adds	r0, r7, r0
    9e12:	18c0      	adds	r0, r0, r3
    9e14:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    9e16:	2218      	movs	r2, #24
    9e18:	4976      	ldr	r1, [pc, #472]	; (9ff4 <_http_client_request+0x304>)
    9e1a:	232c      	movs	r3, #44	; 0x2c
    9e1c:	2008      	movs	r0, #8
    9e1e:	1838      	adds	r0, r7, r0
    9e20:	18c0      	adds	r0, r0, r3
    9e22:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    9e24:	2213      	movs	r2, #19
    9e26:	4974      	ldr	r1, [pc, #464]	; (9ff8 <_http_client_request+0x308>)
    9e28:	232c      	movs	r3, #44	; 0x2c
    9e2a:	2008      	movs	r0, #8
    9e2c:	1838      	adds	r0, r7, r0
    9e2e:	18c0      	adds	r0, r0, r3
    9e30:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    9e32:	2217      	movs	r2, #23
    9e34:	4971      	ldr	r1, [pc, #452]	; (9ffc <_http_client_request+0x30c>)
    9e36:	232c      	movs	r3, #44	; 0x2c
    9e38:	2008      	movs	r0, #8
    9e3a:	1838      	adds	r0, r7, r0
    9e3c:	18c0      	adds	r0, r0, r3
    9e3e:	47a8      	blx	r5

		if (entity->read != NULL) {
    9e40:	0023      	movs	r3, r4
    9e42:	33b0      	adds	r3, #176	; 0xb0
    9e44:	68db      	ldr	r3, [r3, #12]
    9e46:	2b00      	cmp	r3, #0
    9e48:	d07b      	beq.n	9f42 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    9e4a:	23b0      	movs	r3, #176	; 0xb0
    9e4c:	5ce3      	ldrb	r3, [r4, r3]
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d16b      	bne.n	9f2a <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    9e52:	0023      	movs	r3, r4
    9e54:	33b0      	adds	r3, #176	; 0xb0
    9e56:	689b      	ldr	r3, [r3, #8]
    9e58:	2b00      	cmp	r3, #0
    9e5a:	d072      	beq.n	9f42 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    9e5c:	0022      	movs	r2, r4
    9e5e:	32b0      	adds	r2, #176	; 0xb0
    9e60:	6950      	ldr	r0, [r2, #20]
    9e62:	4798      	blx	r3
    9e64:	23cc      	movs	r3, #204	; 0xcc
    9e66:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    9e68:	2800      	cmp	r0, #0
    9e6a:	da00      	bge.n	9e6e <_http_client_request+0x17e>
    9e6c:	e0ac      	b.n	9fc8 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    9e6e:	0002      	movs	r2, r0
    9e70:	4963      	ldr	r1, [pc, #396]	; (a000 <_http_client_request+0x310>)
    9e72:	2320      	movs	r3, #32
    9e74:	2008      	movs	r0, #8
    9e76:	1838      	adds	r0, r7, r0
    9e78:	18c0      	adds	r0, r0, r3
    9e7a:	4b62      	ldr	r3, [pc, #392]	; (a004 <_http_client_request+0x314>)
    9e7c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    9e7e:	2210      	movs	r2, #16
    9e80:	4961      	ldr	r1, [pc, #388]	; (a008 <_http_client_request+0x318>)
    9e82:	232c      	movs	r3, #44	; 0x2c
    9e84:	2008      	movs	r0, #8
    9e86:	1838      	adds	r0, r7, r0
    9e88:	18c0      	adds	r0, r0, r3
    9e8a:	4d55      	ldr	r5, [pc, #340]	; (9fe0 <_http_client_request+0x2f0>)
    9e8c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    9e8e:	2320      	movs	r3, #32
    9e90:	2208      	movs	r2, #8
    9e92:	18ba      	adds	r2, r7, r2
    9e94:	18d0      	adds	r0, r2, r3
    9e96:	4b51      	ldr	r3, [pc, #324]	; (9fdc <_http_client_request+0x2ec>)
    9e98:	4798      	blx	r3
    9e9a:	0002      	movs	r2, r0
    9e9c:	2320      	movs	r3, #32
    9e9e:	2108      	movs	r1, #8
    9ea0:	1879      	adds	r1, r7, r1
    9ea2:	18c9      	adds	r1, r1, r3
    9ea4:	330c      	adds	r3, #12
    9ea6:	2008      	movs	r0, #8
    9ea8:	1838      	adds	r0, r7, r0
    9eaa:	18c0      	adds	r0, r0, r3
    9eac:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9eae:	2202      	movs	r2, #2
    9eb0:	494e      	ldr	r1, [pc, #312]	; (9fec <_http_client_request+0x2fc>)
    9eb2:	232c      	movs	r3, #44	; 0x2c
    9eb4:	2008      	movs	r0, #8
    9eb6:	1838      	adds	r0, r7, r0
    9eb8:	18c0      	adds	r0, r0, r3
    9eba:	47a8      	blx	r5
    9ebc:	e041      	b.n	9f42 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    9ebe:	2204      	movs	r2, #4
    9ec0:	4952      	ldr	r1, [pc, #328]	; (a00c <_http_client_request+0x31c>)
    9ec2:	332b      	adds	r3, #43	; 0x2b
    9ec4:	2008      	movs	r0, #8
    9ec6:	1838      	adds	r0, r7, r0
    9ec8:	18c0      	adds	r0, r0, r3
    9eca:	4b45      	ldr	r3, [pc, #276]	; (9fe0 <_http_client_request+0x2f0>)
    9ecc:	4798      	blx	r3
    9ece:	e75b      	b.n	9d88 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    9ed0:	2205      	movs	r2, #5
    9ed2:	494f      	ldr	r1, [pc, #316]	; (a010 <_http_client_request+0x320>)
    9ed4:	332a      	adds	r3, #42	; 0x2a
    9ed6:	2008      	movs	r0, #8
    9ed8:	1838      	adds	r0, r7, r0
    9eda:	18c0      	adds	r0, r0, r3
    9edc:	4b40      	ldr	r3, [pc, #256]	; (9fe0 <_http_client_request+0x2f0>)
    9ede:	4798      	blx	r3
    9ee0:	e752      	b.n	9d88 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    9ee2:	2207      	movs	r2, #7
    9ee4:	494b      	ldr	r1, [pc, #300]	; (a014 <_http_client_request+0x324>)
    9ee6:	3329      	adds	r3, #41	; 0x29
    9ee8:	2008      	movs	r0, #8
    9eea:	1838      	adds	r0, r7, r0
    9eec:	18c0      	adds	r0, r0, r3
    9eee:	4b3c      	ldr	r3, [pc, #240]	; (9fe0 <_http_client_request+0x2f0>)
    9ef0:	4798      	blx	r3
    9ef2:	e749      	b.n	9d88 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    9ef4:	2204      	movs	r2, #4
    9ef6:	4948      	ldr	r1, [pc, #288]	; (a018 <_http_client_request+0x328>)
    9ef8:	3328      	adds	r3, #40	; 0x28
    9efa:	2008      	movs	r0, #8
    9efc:	1838      	adds	r0, r7, r0
    9efe:	18c0      	adds	r0, r0, r3
    9f00:	4b37      	ldr	r3, [pc, #220]	; (9fe0 <_http_client_request+0x2f0>)
    9f02:	4798      	blx	r3
    9f04:	e740      	b.n	9d88 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    9f06:	2208      	movs	r2, #8
    9f08:	4944      	ldr	r1, [pc, #272]	; (a01c <_http_client_request+0x32c>)
    9f0a:	3327      	adds	r3, #39	; 0x27
    9f0c:	2008      	movs	r0, #8
    9f0e:	1838      	adds	r0, r7, r0
    9f10:	18c0      	adds	r0, r0, r3
    9f12:	4b33      	ldr	r3, [pc, #204]	; (9fe0 <_http_client_request+0x2f0>)
    9f14:	4798      	blx	r3
    9f16:	e737      	b.n	9d88 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    9f18:	2205      	movs	r2, #5
    9f1a:	4941      	ldr	r1, [pc, #260]	; (a020 <_http_client_request+0x330>)
    9f1c:	3326      	adds	r3, #38	; 0x26
    9f1e:	2008      	movs	r0, #8
    9f20:	1838      	adds	r0, r7, r0
    9f22:	18c0      	adds	r0, r0, r3
    9f24:	4b2e      	ldr	r3, [pc, #184]	; (9fe0 <_http_client_request+0x2f0>)
    9f26:	4798      	blx	r3
    9f28:	e72e      	b.n	9d88 <_http_client_request+0x98>
				module->req.content_length = -1;
    9f2a:	2201      	movs	r2, #1
    9f2c:	4252      	negs	r2, r2
    9f2e:	23cc      	movs	r3, #204	; 0xcc
    9f30:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    9f32:	321d      	adds	r2, #29
    9f34:	493b      	ldr	r1, [pc, #236]	; (a024 <_http_client_request+0x334>)
    9f36:	3ba0      	subs	r3, #160	; 0xa0
    9f38:	2008      	movs	r0, #8
    9f3a:	1838      	adds	r0, r7, r0
    9f3c:	18c0      	adds	r0, r0, r3
    9f3e:	4b28      	ldr	r3, [pc, #160]	; (9fe0 <_http_client_request+0x2f0>)
    9f40:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    9f42:	23d4      	movs	r3, #212	; 0xd4
    9f44:	58e5      	ldr	r5, [r4, r3]
    9f46:	2d00      	cmp	r5, #0
    9f48:	d00a      	beq.n	9f60 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    9f4a:	0028      	movs	r0, r5
    9f4c:	4b23      	ldr	r3, [pc, #140]	; (9fdc <_http_client_request+0x2ec>)
    9f4e:	4798      	blx	r3
    9f50:	0002      	movs	r2, r0
    9f52:	0029      	movs	r1, r5
    9f54:	232c      	movs	r3, #44	; 0x2c
    9f56:	2008      	movs	r0, #8
    9f58:	1838      	adds	r0, r7, r0
    9f5a:	18c0      	adds	r0, r0, r3
    9f5c:	4b20      	ldr	r3, [pc, #128]	; (9fe0 <_http_client_request+0x2f0>)
    9f5e:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9f60:	2202      	movs	r2, #2
    9f62:	4922      	ldr	r1, [pc, #136]	; (9fec <_http_client_request+0x2fc>)
    9f64:	232c      	movs	r3, #44	; 0x2c
    9f66:	2008      	movs	r0, #8
    9f68:	1838      	adds	r0, r7, r0
    9f6a:	18c0      	adds	r0, r0, r3
    9f6c:	4b1c      	ldr	r3, [pc, #112]	; (9fe0 <_http_client_request+0x2f0>)
    9f6e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    9f70:	232c      	movs	r3, #44	; 0x2c
    9f72:	2208      	movs	r2, #8
    9f74:	18ba      	adds	r2, r7, r2
    9f76:	18d0      	adds	r0, r2, r3
    9f78:	4b2b      	ldr	r3, [pc, #172]	; (a028 <_http_client_request+0x338>)
    9f7a:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    9f7c:	2304      	movs	r3, #4
    9f7e:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    9f80:	23cc      	movs	r3, #204	; 0xcc
    9f82:	58e2      	ldr	r2, [r4, r3]
    9f84:	2a00      	cmp	r2, #0
    9f86:	db51      	blt.n	a02c <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    9f88:	dc00      	bgt.n	9f8c <_http_client_request+0x29c>
    9f8a:	e0f0      	b.n	a16e <_http_client_request+0x47e>
    9f8c:	0023      	movs	r3, r4
    9f8e:	33b0      	adds	r3, #176	; 0xb0
    9f90:	68dd      	ldr	r5, [r3, #12]
    9f92:	2d00      	cmp	r5, #0
    9f94:	d100      	bne.n	9f98 <_http_client_request+0x2a8>
    9f96:	e0ea      	b.n	a16e <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    9f98:	23d0      	movs	r3, #208	; 0xd0
    9f9a:	58e3      	ldr	r3, [r4, r3]
    9f9c:	429a      	cmp	r2, r3
    9f9e:	dd00      	ble.n	9fa2 <_http_client_request+0x2b2>
    9fa0:	e0ba      	b.n	a118 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    9fa2:	23c0      	movs	r3, #192	; 0xc0
    9fa4:	58e3      	ldr	r3, [r4, r3]
    9fa6:	2b00      	cmp	r3, #0
    9fa8:	d002      	beq.n	9fb0 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    9faa:	22c4      	movs	r2, #196	; 0xc4
    9fac:	58a0      	ldr	r0, [r4, r2]
    9fae:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    9fb0:	2302      	movs	r3, #2
    9fb2:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    9fb4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9fb6:	2b00      	cmp	r3, #0
    9fb8:	d100      	bne.n	9fbc <_http_client_request+0x2cc>
    9fba:	e6c0      	b.n	9d3e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9fbc:	220c      	movs	r2, #12
    9fbe:	18ba      	adds	r2, r7, r2
    9fc0:	2101      	movs	r1, #1
    9fc2:	0020      	movs	r0, r4
    9fc4:	4798      	blx	r3
    9fc6:	e6ba      	b.n	9d3e <_http_client_request+0x4e>
					module->req.content_length = 0;
    9fc8:	2200      	movs	r2, #0
    9fca:	50e2      	str	r2, [r4, r3]
    9fcc:	e7b9      	b.n	9f42 <_http_client_request+0x252>
    9fce:	46c0      	nop			; (mov r8, r8)
    9fd0:	0000eab8 	.word	0x0000eab8
    9fd4:	00009a81 	.word	0x00009a81
    9fd8:	0000aa4d 	.word	0x0000aa4d
    9fdc:	0000c217 	.word	0x0000c217
    9fe0:	0000aaa1 	.word	0x0000aaa1
    9fe4:	0000eb2c 	.word	0x0000eb2c
    9fe8:	0000eb38 	.word	0x0000eb38
    9fec:	0000ef40 	.word	0x0000ef40
    9ff0:	0000eb48 	.word	0x0000eb48
    9ff4:	0000eb50 	.word	0x0000eb50
    9ff8:	0000eb6c 	.word	0x0000eb6c
    9ffc:	0000eb80 	.word	0x0000eb80
    a000:	0000ebb8 	.word	0x0000ebb8
    a004:	0000c175 	.word	0x0000c175
    a008:	0000ebbc 	.word	0x0000ebbc
    a00c:	0000eaf8 	.word	0x0000eaf8
    a010:	0000eb00 	.word	0x0000eb00
    a014:	0000eb08 	.word	0x0000eb08
    a018:	0000eb10 	.word	0x0000eb10
    a01c:	0000eb18 	.word	0x0000eb18
    a020:	0000eb24 	.word	0x0000eb24
    a024:	0000eb98 	.word	0x0000eb98
    a028:	0000aa5d 	.word	0x0000aa5d
		if (module->req.content_length < 0 && entity->read) {
    a02c:	0023      	movs	r3, r4
    a02e:	33b0      	adds	r3, #176	; 0xb0
    a030:	68dd      	ldr	r5, [r3, #12]
    a032:	2d00      	cmp	r5, #0
    a034:	d100      	bne.n	a038 <_http_client_request+0x348>
    a036:	e09a      	b.n	a16e <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    a038:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    a03a:	58e3      	ldr	r3, [r4, r3]
    a03c:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a03e:	3a07      	subs	r2, #7
    a040:	1d71      	adds	r1, r6, #5
    a042:	0020      	movs	r0, r4
    a044:	30b0      	adds	r0, #176	; 0xb0
    a046:	6940      	ldr	r0, [r0, #20]
    a048:	47a8      	blx	r5
    a04a:	0005      	movs	r5, r0
    a04c:	43c3      	mvns	r3, r0
    a04e:	17db      	asrs	r3, r3, #31
    a050:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    a052:	220a      	movs	r2, #10
    a054:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    a056:	210d      	movs	r1, #13
    a058:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    a05a:	1973      	adds	r3, r6, r5
    a05c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    a05e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    a060:	230f      	movs	r3, #15
    a062:	402b      	ands	r3, r5
    a064:	3206      	adds	r2, #6
    a066:	3905      	subs	r1, #5
    a068:	468c      	mov	ip, r1
    a06a:	44bc      	add	ip, r7
    a06c:	4462      	add	r2, ip
    a06e:	5cd3      	ldrb	r3, [r2, r3]
    a070:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    a072:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    a074:	2d0f      	cmp	r5, #15
    a076:	dd0d      	ble.n	a094 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    a078:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    a07a:	17eb      	asrs	r3, r5, #31
    a07c:	220f      	movs	r2, #15
    a07e:	4013      	ands	r3, r2
    a080:	195b      	adds	r3, r3, r5
    a082:	111b      	asrs	r3, r3, #4
    a084:	4013      	ands	r3, r2
    a086:	3201      	adds	r2, #1
    a088:	2008      	movs	r0, #8
    a08a:	4684      	mov	ip, r0
    a08c:	44bc      	add	ip, r7
    a08e:	4462      	add	r2, ip
    a090:	5cd3      	ldrb	r3, [r2, r3]
    a092:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    a094:	2dff      	cmp	r5, #255	; 0xff
    a096:	dd0d      	ble.n	a0b4 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    a098:	17ea      	asrs	r2, r5, #31
    a09a:	23ff      	movs	r3, #255	; 0xff
    a09c:	4013      	ands	r3, r2
    a09e:	195b      	adds	r3, r3, r5
    a0a0:	051b      	lsls	r3, r3, #20
    a0a2:	0f1b      	lsrs	r3, r3, #28
    a0a4:	2210      	movs	r2, #16
    a0a6:	2108      	movs	r1, #8
    a0a8:	468c      	mov	ip, r1
    a0aa:	44bc      	add	ip, r7
    a0ac:	4462      	add	r2, ip
    a0ae:	5cd3      	ldrb	r3, [r2, r3]
    a0b0:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    a0b2:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    a0b4:	1cca      	adds	r2, r1, #3
    a0b6:	1b92      	subs	r2, r2, r6
    a0b8:	1d2b      	adds	r3, r5, #4
    a0ba:	18d2      	adds	r2, r2, r3
    a0bc:	b292      	uxth	r2, r2
    a0be:	2000      	movs	r0, #0
    a0c0:	5620      	ldrsb	r0, [r4, r0]
    a0c2:	2300      	movs	r3, #0
    a0c4:	4e30      	ldr	r6, [pc, #192]	; (a188 <_http_client_request+0x498>)
    a0c6:	47b0      	blx	r6
    a0c8:	2800      	cmp	r0, #0
    a0ca:	db19      	blt.n	a100 <_http_client_request+0x410>
			module->req.sent_length += size;
    a0cc:	22d0      	movs	r2, #208	; 0xd0
    a0ce:	58a3      	ldr	r3, [r4, r2]
    a0d0:	195b      	adds	r3, r3, r5
    a0d2:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    a0d4:	2d00      	cmp	r5, #0
    a0d6:	d000      	beq.n	a0da <_http_client_request+0x3ea>
    a0d8:	e631      	b.n	9d3e <_http_client_request+0x4e>
				if (module->req.entity.close) {
    a0da:	23c0      	movs	r3, #192	; 0xc0
    a0dc:	58e3      	ldr	r3, [r4, r3]
    a0de:	2b00      	cmp	r3, #0
    a0e0:	d002      	beq.n	a0e8 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    a0e2:	3a0c      	subs	r2, #12
    a0e4:	58a0      	ldr	r0, [r4, r2]
    a0e6:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    a0e8:	2302      	movs	r3, #2
    a0ea:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    a0ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a0ee:	2b00      	cmp	r3, #0
    a0f0:	d100      	bne.n	a0f4 <_http_client_request+0x404>
    a0f2:	e624      	b.n	9d3e <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    a0f4:	220c      	movs	r2, #12
    a0f6:	18ba      	adds	r2, r7, r2
    a0f8:	2101      	movs	r1, #1
    a0fa:	0020      	movs	r0, r4
    a0fc:	4798      	blx	r3
    a0fe:	e61e      	b.n	9d3e <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    a100:	2105      	movs	r1, #5
    a102:	4249      	negs	r1, r1
    a104:	0020      	movs	r0, r4
    a106:	4b21      	ldr	r3, [pc, #132]	; (a18c <_http_client_request+0x49c>)
    a108:	4798      	blx	r3
    a10a:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    a10c:	46bd      	mov	sp, r7
    a10e:	b013      	add	sp, #76	; 0x4c
    a110:	bc0c      	pop	{r2, r3}
    a112:	4692      	mov	sl, r2
    a114:	469b      	mov	fp, r3
    a116:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    a118:	0022      	movs	r2, r4
    a11a:	32b0      	adds	r2, #176	; 0xb0
    a11c:	6950      	ldr	r0, [r2, #20]
    a11e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    a120:	0031      	movs	r1, r6
    a122:	47a8      	blx	r5
			if (size < 0) {
    a124:	2800      	cmp	r0, #0
    a126:	db16      	blt.n	a156 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    a128:	23cc      	movs	r3, #204	; 0xcc
    a12a:	58e5      	ldr	r5, [r4, r3]
    a12c:	3304      	adds	r3, #4
    a12e:	58e3      	ldr	r3, [r4, r3]
    a130:	1aed      	subs	r5, r5, r3
    a132:	4285      	cmp	r5, r0
    a134:	dd00      	ble.n	a138 <_http_client_request+0x448>
    a136:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    a138:	b2aa      	uxth	r2, r5
    a13a:	2000      	movs	r0, #0
    a13c:	5620      	ldrsb	r0, [r4, r0]
    a13e:	2300      	movs	r3, #0
    a140:	0031      	movs	r1, r6
    a142:	4e11      	ldr	r6, [pc, #68]	; (a188 <_http_client_request+0x498>)
    a144:	47b0      	blx	r6
    a146:	2800      	cmp	r0, #0
    a148:	db0b      	blt.n	a162 <_http_client_request+0x472>
				module->req.sent_length += size;
    a14a:	23d0      	movs	r3, #208	; 0xd0
    a14c:	58e2      	ldr	r2, [r4, r3]
    a14e:	4694      	mov	ip, r2
    a150:	4465      	add	r5, ip
    a152:	50e5      	str	r5, [r4, r3]
    a154:	e5f3      	b.n	9d3e <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    a156:	2105      	movs	r1, #5
    a158:	4249      	negs	r1, r1
    a15a:	0020      	movs	r0, r4
    a15c:	4b0b      	ldr	r3, [pc, #44]	; (a18c <_http_client_request+0x49c>)
    a15e:	4798      	blx	r3
    a160:	e5ed      	b.n	9d3e <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    a162:	2105      	movs	r1, #5
    a164:	4249      	negs	r1, r1
    a166:	0020      	movs	r0, r4
    a168:	4b08      	ldr	r3, [pc, #32]	; (a18c <_http_client_request+0x49c>)
    a16a:	4798      	blx	r3
					return;
    a16c:	e7cd      	b.n	a10a <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    a16e:	2302      	movs	r3, #2
    a170:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    a172:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a174:	2b00      	cmp	r3, #0
    a176:	d100      	bne.n	a17a <_http_client_request+0x48a>
    a178:	e5e1      	b.n	9d3e <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    a17a:	220c      	movs	r2, #12
    a17c:	18ba      	adds	r2, r7, r2
    a17e:	2101      	movs	r1, #1
    a180:	0020      	movs	r0, r4
    a182:	4798      	blx	r3
    a184:	e5db      	b.n	9d3e <_http_client_request+0x4e>
    a186:	46c0      	nop			; (mov r8, r8)
    a188:	0000409d 	.word	0x0000409d
    a18c:	00009bd9 	.word	0x00009bd9

0000a190 <http_client_send_request>:
{
    a190:	b5f0      	push	{r4, r5, r6, r7, lr}
    a192:	46d6      	mov	lr, sl
    a194:	b500      	push	{lr}
    a196:	b088      	sub	sp, #32
    a198:	0004      	movs	r4, r0
    a19a:	000f      	movs	r7, r1
    a19c:	4692      	mov	sl, r2
    a19e:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    a1a0:	2800      	cmp	r0, #0
    a1a2:	d100      	bne.n	a1a6 <http_client_send_request+0x16>
    a1a4:	e0d3      	b.n	a34e <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    a1a6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a1a8:	2b02      	cmp	r3, #2
    a1aa:	d900      	bls.n	a1ae <http_client_send_request+0x1e>
    a1ac:	e0d3      	b.n	a356 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    a1ae:	2207      	movs	r2, #7
    a1b0:	4981      	ldr	r1, [pc, #516]	; (a3b8 <http_client_send_request+0x228>)
    a1b2:	0038      	movs	r0, r7
    a1b4:	4b81      	ldr	r3, [pc, #516]	; (a3bc <http_client_send_request+0x22c>)
    a1b6:	4798      	blx	r3
		i = 7;
    a1b8:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    a1ba:	2800      	cmp	r0, #0
    a1bc:	d007      	beq.n	a1ce <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    a1be:	2208      	movs	r2, #8
    a1c0:	497f      	ldr	r1, [pc, #508]	; (a3c0 <http_client_send_request+0x230>)
    a1c2:	0038      	movs	r0, r7
    a1c4:	4b7d      	ldr	r3, [pc, #500]	; (a3bc <http_client_send_request+0x22c>)
    a1c6:	4798      	blx	r3
		i = 8;
    a1c8:	4246      	negs	r6, r0
    a1ca:	4146      	adcs	r6, r0
    a1cc:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    a1ce:	1c63      	adds	r3, r4, #1
    a1d0:	19bd      	adds	r5, r7, r6
    a1d2:	9302      	str	r3, [sp, #8]
    a1d4:	0018      	movs	r0, r3
    a1d6:	4b7b      	ldr	r3, [pc, #492]	; (a3c4 <http_client_send_request+0x234>)
    a1d8:	4798      	blx	r3
    a1da:	0002      	movs	r2, r0
    a1dc:	0029      	movs	r1, r5
    a1de:	9802      	ldr	r0, [sp, #8]
    a1e0:	4b76      	ldr	r3, [pc, #472]	; (a3bc <http_client_send_request+0x22c>)
    a1e2:	4798      	blx	r3
    a1e4:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    a1e6:	782b      	ldrb	r3, [r5, #0]
    a1e8:	2b00      	cmp	r3, #0
    a1ea:	d052      	beq.n	a292 <http_client_send_request+0x102>
    a1ec:	2b2f      	cmp	r3, #47	; 0x2f
    a1ee:	d052      	beq.n	a296 <http_client_send_request+0x106>
    a1f0:	1c71      	adds	r1, r6, #1
    a1f2:	1879      	adds	r1, r7, r1
    a1f4:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    a1f6:	3201      	adds	r2, #1
    a1f8:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    a1fa:	000d      	movs	r5, r1
    a1fc:	780b      	ldrb	r3, [r1, #0]
    a1fe:	2b00      	cmp	r3, #0
    a200:	d002      	beq.n	a208 <http_client_send_request+0x78>
    a202:	3101      	adds	r1, #1
    a204:	2b2f      	cmp	r3, #47	; 0x2f
    a206:	d1f6      	bne.n	a1f6 <http_client_send_request+0x66>
	module->host[j] = '\0';
    a208:	18a2      	adds	r2, r4, r2
    a20a:	2300      	movs	r3, #0
    a20c:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    a20e:	7863      	ldrb	r3, [r4, #1]
    a210:	2b00      	cmp	r3, #0
    a212:	d100      	bne.n	a216 <http_client_send_request+0x86>
    a214:	e0a3      	b.n	a35e <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    a216:	0028      	movs	r0, r5
    a218:	4b6a      	ldr	r3, [pc, #424]	; (a3c4 <http_client_send_request+0x234>)
    a21a:	4798      	blx	r3
    a21c:	283f      	cmp	r0, #63	; 0x3f
    a21e:	d900      	bls.n	a222 <http_client_send_request+0x92>
    a220:	e0a1      	b.n	a366 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    a222:	23d4      	movs	r3, #212	; 0xd4
    a224:	58e0      	ldr	r0, [r4, r3]
    a226:	2800      	cmp	r0, #0
    a228:	d001      	beq.n	a22e <http_client_send_request+0x9e>
		free(module->req.ext_header);
    a22a:	4b67      	ldr	r3, [pc, #412]	; (a3c8 <http_client_send_request+0x238>)
    a22c:	4798      	blx	r3
	if (ext_header != NULL) {
    a22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a230:	2b00      	cmp	r3, #0
    a232:	d032      	beq.n	a29a <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    a234:	0018      	movs	r0, r3
    a236:	4b65      	ldr	r3, [pc, #404]	; (a3cc <http_client_send_request+0x23c>)
    a238:	4798      	blx	r3
    a23a:	23d4      	movs	r3, #212	; 0xd4
    a23c:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    a23e:	2800      	cmp	r0, #0
    a240:	d100      	bne.n	a244 <http_client_send_request+0xb4>
    a242:	e094      	b.n	a36e <http_client_send_request+0x1de>
	module->sending = 0;
    a244:	2241      	movs	r2, #65	; 0x41
    a246:	5ca3      	ldrb	r3, [r4, r2]
    a248:	2101      	movs	r1, #1
    a24a:	438b      	bics	r3, r1
    a24c:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    a24e:	2300      	movs	r3, #0
    a250:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    a252:	782b      	ldrb	r3, [r5, #0]
    a254:	2b2f      	cmp	r3, #47	; 0x2f
    a256:	d024      	beq.n	a2a2 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    a258:	222f      	movs	r2, #47	; 0x2f
    a25a:	2370      	movs	r3, #112	; 0x70
    a25c:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    a25e:	782b      	ldrb	r3, [r5, #0]
    a260:	2b00      	cmp	r3, #0
    a262:	d124      	bne.n	a2ae <http_client_send_request+0x11e>
	if (entity != NULL) {
    a264:	9b03      	ldr	r3, [sp, #12]
    a266:	2b00      	cmp	r3, #0
    a268:	d027      	beq.n	a2ba <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    a26a:	0020      	movs	r0, r4
    a26c:	30b0      	adds	r0, #176	; 0xb0
    a26e:	2218      	movs	r2, #24
    a270:	0019      	movs	r1, r3
    a272:	4b57      	ldr	r3, [pc, #348]	; (a3d0 <http_client_send_request+0x240>)
    a274:	4798      	blx	r3
	module->req.method = method;
    a276:	23c8      	movs	r3, #200	; 0xc8
    a278:	4652      	mov	r2, sl
    a27a:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    a27c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    a27e:	2b01      	cmp	r3, #1
    a280:	d022      	beq.n	a2c8 <http_client_send_request+0x138>
    a282:	2b00      	cmp	r3, #0
    a284:	d027      	beq.n	a2d6 <http_client_send_request+0x146>
    a286:	2b02      	cmp	r3, #2
    a288:	d03a      	beq.n	a300 <http_client_send_request+0x170>
		return -EAGAIN;
    a28a:	230b      	movs	r3, #11
    a28c:	425b      	negs	r3, r3
    a28e:	9301      	str	r3, [sp, #4]
    a290:	e08d      	b.n	a3ae <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    a292:	2200      	movs	r2, #0
    a294:	e7b8      	b.n	a208 <http_client_send_request+0x78>
    a296:	2200      	movs	r2, #0
    a298:	e7b6      	b.n	a208 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    a29a:	2200      	movs	r2, #0
    a29c:	23d4      	movs	r3, #212	; 0xd4
    a29e:	50e2      	str	r2, [r4, r3]
    a2a0:	e7d0      	b.n	a244 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    a2a2:	0020      	movs	r0, r4
    a2a4:	3070      	adds	r0, #112	; 0x70
    a2a6:	0029      	movs	r1, r5
    a2a8:	4b4a      	ldr	r3, [pc, #296]	; (a3d4 <http_client_send_request+0x244>)
    a2aa:	4798      	blx	r3
    a2ac:	e7da      	b.n	a264 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    a2ae:	0029      	movs	r1, r5
    a2b0:	0020      	movs	r0, r4
    a2b2:	3071      	adds	r0, #113	; 0x71
    a2b4:	4b47      	ldr	r3, [pc, #284]	; (a3d4 <http_client_send_request+0x244>)
    a2b6:	4798      	blx	r3
    a2b8:	e7d4      	b.n	a264 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    a2ba:	0020      	movs	r0, r4
    a2bc:	30b0      	adds	r0, #176	; 0xb0
    a2be:	2218      	movs	r2, #24
    a2c0:	2100      	movs	r1, #0
    a2c2:	4b45      	ldr	r3, [pc, #276]	; (a3d8 <http_client_send_request+0x248>)
    a2c4:	4798      	blx	r3
    a2c6:	e7d6      	b.n	a276 <http_client_send_request+0xe6>
		if (!reconnect) {
    a2c8:	9b01      	ldr	r3, [sp, #4]
    a2ca:	2b00      	cmp	r3, #0
    a2cc:	d06f      	beq.n	a3ae <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    a2ce:	2100      	movs	r1, #0
    a2d0:	0020      	movs	r0, r4
    a2d2:	4b42      	ldr	r3, [pc, #264]	; (a3dc <http_client_send_request+0x24c>)
    a2d4:	4798      	blx	r3
		if (module->config.tls) {
    a2d6:	2352      	movs	r3, #82	; 0x52
    a2d8:	5ce2      	ldrb	r2, [r4, r3]
    a2da:	1e53      	subs	r3, r2, #1
    a2dc:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    a2de:	b2d2      	uxtb	r2, r2
    a2e0:	2101      	movs	r1, #1
    a2e2:	2002      	movs	r0, #2
    a2e4:	4b3e      	ldr	r3, [pc, #248]	; (a3e0 <http_client_send_request+0x250>)
    a2e6:	4798      	blx	r3
    a2e8:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    a2ea:	2800      	cmp	r0, #0
    a2ec:	db43      	blt.n	a376 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    a2ee:	0080      	lsls	r0, r0, #2
    a2f0:	4b3c      	ldr	r3, [pc, #240]	; (a3e4 <http_client_send_request+0x254>)
    a2f2:	50c4      	str	r4, [r0, r3]
    a2f4:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    a2f6:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    a2f8:	2620      	movs	r6, #32
			isv6 = 1;
    a2fa:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    a2fc:	2730      	movs	r7, #48	; 0x30
    a2fe:	e00c      	b.n	a31a <http_client_send_request+0x18a>
		if (!reconnect) {
    a300:	9b01      	ldr	r3, [sp, #4]
    a302:	2b00      	cmp	r3, #0
    a304:	d1e3      	bne.n	a2ce <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    a306:	3303      	adds	r3, #3
    a308:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    a30a:	0020      	movs	r0, r4
    a30c:	4b36      	ldr	r3, [pc, #216]	; (a3e8 <http_client_send_request+0x258>)
    a30e:	4798      	blx	r3
			break;
    a310:	e04d      	b.n	a3ae <http_client_send_request+0x21e>
			if (isv6) {
    a312:	2900      	cmp	r1, #0
    a314:	d001      	beq.n	a31a <http_client_send_request+0x18a>
    a316:	e012      	b.n	a33e <http_client_send_request+0x1ae>
			isv6 = 1;
    a318:	0001      	movs	r1, r0
	while (*host != '\0') {
    a31a:	782a      	ldrb	r2, [r5, #0]
    a31c:	2a00      	cmp	r2, #0
    a31e:	d02e      	beq.n	a37e <http_client_send_request+0x1ee>
		ch = *host++;
    a320:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    a322:	0013      	movs	r3, r2
    a324:	43b3      	bics	r3, r6
    a326:	3b41      	subs	r3, #65	; 0x41
    a328:	2b05      	cmp	r3, #5
    a32a:	d9f5      	bls.n	a318 <http_client_send_request+0x188>
    a32c:	2a3a      	cmp	r2, #58	; 0x3a
    a32e:	d00a      	beq.n	a346 <http_client_send_request+0x1b6>
    a330:	2a2f      	cmp	r2, #47	; 0x2f
    a332:	d00a      	beq.n	a34a <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    a334:	2a2e      	cmp	r2, #46	; 0x2e
    a336:	d0ec      	beq.n	a312 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    a338:	403a      	ands	r2, r7
    a33a:	2a30      	cmp	r2, #48	; 0x30
    a33c:	d0ed      	beq.n	a31a <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    a33e:	9802      	ldr	r0, [sp, #8]
    a340:	4b2a      	ldr	r3, [pc, #168]	; (a3ec <http_client_send_request+0x25c>)
    a342:	4798      	blx	r3
    a344:	e02f      	b.n	a3a6 <http_client_send_request+0x216>
			isv6 = 1;
    a346:	0001      	movs	r1, r0
    a348:	e7e7      	b.n	a31a <http_client_send_request+0x18a>
    a34a:	0001      	movs	r1, r0
    a34c:	e7e5      	b.n	a31a <http_client_send_request+0x18a>
		return -EINVAL;
    a34e:	2316      	movs	r3, #22
    a350:	425b      	negs	r3, r3
    a352:	9301      	str	r3, [sp, #4]
    a354:	e02b      	b.n	a3ae <http_client_send_request+0x21e>
		return -EBUSY;
    a356:	2310      	movs	r3, #16
    a358:	425b      	negs	r3, r3
    a35a:	9301      	str	r3, [sp, #4]
    a35c:	e027      	b.n	a3ae <http_client_send_request+0x21e>
		return -EINVAL;
    a35e:	2316      	movs	r3, #22
    a360:	425b      	negs	r3, r3
    a362:	9301      	str	r3, [sp, #4]
    a364:	e023      	b.n	a3ae <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    a366:	235b      	movs	r3, #91	; 0x5b
    a368:	425b      	negs	r3, r3
    a36a:	9301      	str	r3, [sp, #4]
    a36c:	e01f      	b.n	a3ae <http_client_send_request+0x21e>
			return -ENOMEM;
    a36e:	230c      	movs	r3, #12
    a370:	425b      	negs	r3, r3
    a372:	9301      	str	r3, [sp, #4]
    a374:	e01b      	b.n	a3ae <http_client_send_request+0x21e>
			return -ENOSPC;
    a376:	231c      	movs	r3, #28
    a378:	425b      	negs	r3, r3
    a37a:	9301      	str	r3, [sp, #4]
    a37c:	e017      	b.n	a3ae <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    a37e:	2302      	movs	r3, #2
    a380:	aa04      	add	r2, sp, #16
    a382:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    a384:	334e      	adds	r3, #78	; 0x4e
    a386:	5ae3      	ldrh	r3, [r4, r3]
    a388:	021a      	lsls	r2, r3, #8
    a38a:	0a1b      	lsrs	r3, r3, #8
    a38c:	4313      	orrs	r3, r2
    a38e:	aa04      	add	r2, sp, #16
    a390:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    a392:	9802      	ldr	r0, [sp, #8]
    a394:	4b16      	ldr	r3, [pc, #88]	; (a3f0 <http_client_send_request+0x260>)
    a396:	4798      	blx	r3
    a398:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    a39a:	2000      	movs	r0, #0
    a39c:	5620      	ldrsb	r0, [r4, r0]
    a39e:	2210      	movs	r2, #16
    a3a0:	a904      	add	r1, sp, #16
    a3a2:	4b14      	ldr	r3, [pc, #80]	; (a3f4 <http_client_send_request+0x264>)
    a3a4:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    a3a6:	2301      	movs	r3, #1
    a3a8:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    a3aa:	2300      	movs	r3, #0
    a3ac:	9301      	str	r3, [sp, #4]
}
    a3ae:	9801      	ldr	r0, [sp, #4]
    a3b0:	b008      	add	sp, #32
    a3b2:	bc04      	pop	{r2}
    a3b4:	4692      	mov	sl, r2
    a3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a3b8:	0000ebdc 	.word	0x0000ebdc
    a3bc:	0000c225 	.word	0x0000c225
    a3c0:	0000ebe4 	.word	0x0000ebe4
    a3c4:	0000c217 	.word	0x0000c217
    a3c8:	0000bca5 	.word	0x0000bca5
    a3cc:	0000c1dd 	.word	0x0000c1dd
    a3d0:	0000bcb9 	.word	0x0000bcb9
    a3d4:	0000c1cd 	.word	0x0000c1cd
    a3d8:	0000bcef 	.word	0x0000bcef
    a3dc:	00009bd9 	.word	0x00009bd9
    a3e0:	00003e89 	.word	0x00003e89
    a3e4:	200007fc 	.word	0x200007fc
    a3e8:	00009cf1 	.word	0x00009cf1
    a3ec:	000042d1 	.word	0x000042d1
    a3f0:	00004265 	.word	0x00004265
    a3f4:	0000400d 	.word	0x0000400d

0000a3f8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    a3f8:	b510      	push	{r4, lr}
	if (module == NULL) {
    a3fa:	2800      	cmp	r0, #0
    a3fc:	d00d      	beq.n	a41a <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    a3fe:	6c41      	ldr	r1, [r0, #68]	; 0x44
    a400:	6e02      	ldr	r2, [r0, #96]	; 0x60
    a402:	4291      	cmp	r1, r2
    a404:	d20a      	bcs.n	a41c <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    a406:	1a52      	subs	r2, r2, r1
    a408:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    a40a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    a40c:	469c      	mov	ip, r3
    a40e:	4461      	add	r1, ip
	recv(module->sock,
    a410:	7800      	ldrb	r0, [r0, #0]
    a412:	b240      	sxtb	r0, r0
    a414:	2300      	movs	r3, #0
    a416:	4c04      	ldr	r4, [pc, #16]	; (a428 <_http_client_recv_packet+0x30>)
    a418:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    a41a:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    a41c:	218b      	movs	r1, #139	; 0x8b
    a41e:	4249      	negs	r1, r1
    a420:	4b02      	ldr	r3, [pc, #8]	; (a42c <_http_client_recv_packet+0x34>)
    a422:	4798      	blx	r3
		return;
    a424:	e7f9      	b.n	a41a <_http_client_recv_packet+0x22>
    a426:	46c0      	nop			; (mov r8, r8)
    a428:	00004135 	.word	0x00004135
    a42c:	00009bd9 	.word	0x00009bd9

0000a430 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    a430:	b570      	push	{r4, r5, r6, lr}
    a432:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    a434:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    a436:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    a438:	1a5c      	subs	r4, r3, r1
    a43a:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    a43c:	2c00      	cmp	r4, #0
    a43e:	dc02      	bgt.n	a446 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    a440:	2300      	movs	r3, #0
    a442:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    a444:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    a446:	0022      	movs	r2, r4
    a448:	4b01      	ldr	r3, [pc, #4]	; (a450 <_http_client_move_buffer+0x20>)
    a44a:	4798      	blx	r3
		module->recved_size = remain;
    a44c:	646c      	str	r4, [r5, #68]	; 0x44
    a44e:	e7f9      	b.n	a444 <_http_client_move_buffer+0x14>
    a450:	0000bccb 	.word	0x0000bccb

0000a454 <_http_client_handle_header>:
{
    a454:	b5f0      	push	{r4, r5, r6, r7, lr}
    a456:	46ce      	mov	lr, r9
    a458:	b500      	push	{lr}
    a45a:	b084      	sub	sp, #16
    a45c:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    a45e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    a460:	4b62      	ldr	r3, [pc, #392]	; (a5ec <_http_client_handle_header+0x198>)
    a462:	4699      	mov	r9, r3
    a464:	e049      	b.n	a4fa <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    a466:	0021      	movs	r1, r4
    a468:	0038      	movs	r0, r7
    a46a:	4b61      	ldr	r3, [pc, #388]	; (a5f0 <_http_client_handle_header+0x19c>)
    a46c:	4798      	blx	r3
			return 0;
    a46e:	2600      	movs	r6, #0
}
    a470:	0030      	movs	r0, r6
    a472:	b004      	add	sp, #16
    a474:	bc04      	pop	{r2}
    a476:	4691      	mov	r9, r2
    a478:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    a47a:	1ca1      	adds	r1, r4, #2
    a47c:	0038      	movs	r0, r7
    a47e:	4b5c      	ldr	r3, [pc, #368]	; (a5f0 <_http_client_handle_header+0x19c>)
    a480:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    a482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a484:	2b00      	cmp	r3, #0
    a486:	d00a      	beq.n	a49e <_http_client_handle_header+0x4a>
    a488:	22e4      	movs	r2, #228	; 0xe4
    a48a:	5ab9      	ldrh	r1, [r7, r2]
    a48c:	2900      	cmp	r1, #0
    a48e:	d006      	beq.n	a49e <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    a490:	3a08      	subs	r2, #8
    a492:	58b8      	ldr	r0, [r7, r2]
    a494:	2800      	cmp	r0, #0
    a496:	db07      	blt.n	a4a8 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    a498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    a49a:	4290      	cmp	r0, r2
    a49c:	dc10      	bgt.n	a4c0 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    a49e:	2201      	movs	r2, #1
    a4a0:	23d8      	movs	r3, #216	; 0xd8
    a4a2:	50fa      	str	r2, [r7, r3]
			return 1;
    a4a4:	2601      	movs	r6, #1
    a4a6:	e7e3      	b.n	a470 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    a4a8:	aa01      	add	r2, sp, #4
    a4aa:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    a4ac:	2101      	movs	r1, #1
    a4ae:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    a4b0:	2100      	movs	r1, #0
    a4b2:	20e0      	movs	r0, #224	; 0xe0
    a4b4:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    a4b6:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    a4b8:	3102      	adds	r1, #2
    a4ba:	0038      	movs	r0, r7
    a4bc:	4798      	blx	r3
    a4be:	e7ee      	b.n	a49e <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    a4c0:	aa01      	add	r2, sp, #4
    a4c2:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    a4c4:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    a4c6:	2100      	movs	r1, #0
    a4c8:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    a4ca:	20e0      	movs	r0, #224	; 0xe0
    a4cc:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    a4ce:	3102      	adds	r1, #2
    a4d0:	0038      	movs	r0, r7
    a4d2:	4798      	blx	r3
    a4d4:	e7e3      	b.n	a49e <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    a4d6:	0020      	movs	r0, r4
    a4d8:	3010      	adds	r0, #16
    a4da:	4b46      	ldr	r3, [pc, #280]	; (a5f4 <_http_client_handle_header+0x1a0>)
    a4dc:	4798      	blx	r3
    a4de:	23dc      	movs	r3, #220	; 0xdc
    a4e0:	50f8      	str	r0, [r7, r3]
    a4e2:	e009      	b.n	a4f8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a4e4:	3201      	adds	r2, #1
    a4e6:	4295      	cmp	r5, r2
    a4e8:	d006      	beq.n	a4f8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a4ea:	7813      	ldrb	r3, [r2, #0]
    a4ec:	2b20      	cmp	r3, #32
    a4ee:	d12b      	bne.n	a548 <_http_client_handle_header+0xf4>
    a4f0:	e7f8      	b.n	a4e4 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    a4f2:	3a21      	subs	r2, #33	; 0x21
    a4f4:	3389      	adds	r3, #137	; 0x89
    a4f6:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    a4f8:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    a4fa:	493f      	ldr	r1, [pc, #252]	; (a5f8 <_http_client_handle_header+0x1a4>)
    a4fc:	0020      	movs	r0, r4
    a4fe:	47c8      	blx	r9
    a500:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    a502:	d0b0      	beq.n	a466 <_http_client_handle_header+0x12>
    a504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    a506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    a508:	4694      	mov	ip, r2
    a50a:	4463      	add	r3, ip
    a50c:	4298      	cmp	r0, r3
    a50e:	d2aa      	bcs.n	a466 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    a510:	2202      	movs	r2, #2
    a512:	4939      	ldr	r1, [pc, #228]	; (a5f8 <_http_client_handle_header+0x1a4>)
    a514:	0020      	movs	r0, r4
    a516:	4b39      	ldr	r3, [pc, #228]	; (a5fc <_http_client_handle_header+0x1a8>)
    a518:	4798      	blx	r3
    a51a:	2800      	cmp	r0, #0
    a51c:	d0ad      	beq.n	a47a <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    a51e:	2210      	movs	r2, #16
    a520:	4937      	ldr	r1, [pc, #220]	; (a600 <_http_client_handle_header+0x1ac>)
    a522:	0020      	movs	r0, r4
    a524:	4b35      	ldr	r3, [pc, #212]	; (a5fc <_http_client_handle_header+0x1a8>)
    a526:	4798      	blx	r3
    a528:	2800      	cmp	r0, #0
    a52a:	d0d4      	beq.n	a4d6 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    a52c:	2213      	movs	r2, #19
    a52e:	4935      	ldr	r1, [pc, #212]	; (a604 <_http_client_handle_header+0x1b0>)
    a530:	0020      	movs	r0, r4
    a532:	4b32      	ldr	r3, [pc, #200]	; (a5fc <_http_client_handle_header+0x1a8>)
    a534:	4798      	blx	r3
    a536:	1e06      	subs	r6, r0, #0
    a538:	d110      	bne.n	a55c <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    a53a:	0022      	movs	r2, r4
    a53c:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a53e:	4295      	cmp	r5, r2
    a540:	d9da      	bls.n	a4f8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a542:	7ce3      	ldrb	r3, [r4, #19]
    a544:	2b20      	cmp	r3, #32
    a546:	d0cd      	beq.n	a4e4 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    a548:	2220      	movs	r2, #32
    a54a:	4393      	bics	r3, r2
    a54c:	2b43      	cmp	r3, #67	; 0x43
    a54e:	d0d0      	beq.n	a4f2 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    a550:	2186      	movs	r1, #134	; 0x86
    a552:	4249      	negs	r1, r1
    a554:	0038      	movs	r0, r7
    a556:	4b2c      	ldr	r3, [pc, #176]	; (a608 <_http_client_handle_header+0x1b4>)
    a558:	4798      	blx	r3
					return 0;
    a55a:	e789      	b.n	a470 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    a55c:	220c      	movs	r2, #12
    a55e:	492b      	ldr	r1, [pc, #172]	; (a60c <_http_client_handle_header+0x1b8>)
    a560:	0020      	movs	r0, r4
    a562:	4b26      	ldr	r3, [pc, #152]	; (a5fc <_http_client_handle_header+0x1a8>)
    a564:	4798      	blx	r3
    a566:	2800      	cmp	r0, #0
    a568:	d11d      	bne.n	a5a6 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    a56a:	0022      	movs	r2, r4
    a56c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a56e:	4295      	cmp	r5, r2
    a570:	d9c2      	bls.n	a4f8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a572:	7b23      	ldrb	r3, [r4, #12]
    a574:	2b20      	cmp	r3, #32
    a576:	d009      	beq.n	a58c <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    a578:	2220      	movs	r2, #32
    a57a:	4393      	bics	r3, r2
    a57c:	2b4b      	cmp	r3, #75	; 0x4b
    a57e:	d00c      	beq.n	a59a <_http_client_handle_header+0x146>
					module->permanent = 0;
    a580:	2241      	movs	r2, #65	; 0x41
    a582:	5cbb      	ldrb	r3, [r7, r2]
    a584:	2102      	movs	r1, #2
    a586:	438b      	bics	r3, r1
    a588:	54bb      	strb	r3, [r7, r2]
    a58a:	e7b5      	b.n	a4f8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    a58c:	3201      	adds	r2, #1
    a58e:	4295      	cmp	r5, r2
    a590:	d0b2      	beq.n	a4f8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    a592:	7813      	ldrb	r3, [r2, #0]
    a594:	2b20      	cmp	r3, #32
    a596:	d1ef      	bne.n	a578 <_http_client_handle_header+0x124>
    a598:	e7f8      	b.n	a58c <_http_client_handle_header+0x138>
					module->permanent = 1;
    a59a:	3221      	adds	r2, #33	; 0x21
    a59c:	5cbb      	ldrb	r3, [r7, r2]
    a59e:	2102      	movs	r1, #2
    a5a0:	430b      	orrs	r3, r1
    a5a2:	54bb      	strb	r3, [r7, r2]
    a5a4:	e7a8      	b.n	a4f8 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    a5a6:	2205      	movs	r2, #5
    a5a8:	4919      	ldr	r1, [pc, #100]	; (a610 <_http_client_handle_header+0x1bc>)
    a5aa:	0020      	movs	r0, r4
    a5ac:	4b13      	ldr	r3, [pc, #76]	; (a5fc <_http_client_handle_header+0x1a8>)
    a5ae:	4798      	blx	r3
    a5b0:	2800      	cmp	r0, #0
    a5b2:	d1a1      	bne.n	a4f8 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    a5b4:	0020      	movs	r0, r4
    a5b6:	3009      	adds	r0, #9
    a5b8:	4b0e      	ldr	r3, [pc, #56]	; (a5f4 <_http_client_handle_header+0x1a0>)
    a5ba:	4798      	blx	r3
    a5bc:	23e4      	movs	r3, #228	; 0xe4
    a5be:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    a5c0:	2200      	movs	r2, #0
    a5c2:	3b08      	subs	r3, #8
    a5c4:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    a5c6:	7963      	ldrb	r3, [r4, #5]
    a5c8:	2b31      	cmp	r3, #49	; 0x31
    a5ca:	d802      	bhi.n	a5d2 <_http_client_handle_header+0x17e>
    a5cc:	79e3      	ldrb	r3, [r4, #7]
    a5ce:	2b30      	cmp	r3, #48	; 0x30
    a5d0:	d905      	bls.n	a5de <_http_client_handle_header+0x18a>
				module->permanent = 1;
    a5d2:	2241      	movs	r2, #65	; 0x41
    a5d4:	5cbb      	ldrb	r3, [r7, r2]
    a5d6:	2102      	movs	r1, #2
    a5d8:	430b      	orrs	r3, r1
    a5da:	54bb      	strb	r3, [r7, r2]
    a5dc:	e78c      	b.n	a4f8 <_http_client_handle_header+0xa4>
				module->permanent = 0;
    a5de:	2241      	movs	r2, #65	; 0x41
    a5e0:	5cbb      	ldrb	r3, [r7, r2]
    a5e2:	2102      	movs	r1, #2
    a5e4:	438b      	bics	r3, r1
    a5e6:	54bb      	strb	r3, [r7, r2]
    a5e8:	e786      	b.n	a4f8 <_http_client_handle_header+0xa4>
    a5ea:	46c0      	nop			; (mov r8, r8)
    a5ec:	0000c295 	.word	0x0000c295
    a5f0:	0000a431 	.word	0x0000a431
    a5f4:	0000bc3d 	.word	0x0000bc3d
    a5f8:	0000ef40 	.word	0x0000ef40
    a5fc:	0000c225 	.word	0x0000c225
    a600:	0000ebbc 	.word	0x0000ebbc
    a604:	0000eacc 	.word	0x0000eacc
    a608:	00009bd9 	.word	0x00009bd9
    a60c:	0000eae0 	.word	0x0000eae0
    a610:	0000eaf0 	.word	0x0000eaf0

0000a614 <_http_client_handle_entity>:
{
    a614:	b5f0      	push	{r4, r5, r6, r7, lr}
    a616:	46ce      	mov	lr, r9
    a618:	b500      	push	{lr}
    a61a:	b086      	sub	sp, #24
    a61c:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    a61e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    a620:	23dc      	movs	r3, #220	; 0xdc
    a622:	58c3      	ldr	r3, [r0, r3]
    a624:	2b00      	cmp	r3, #0
    a626:	db69      	blt.n	a6fc <_http_client_handle_entity+0xe8>
    a628:	6e02      	ldr	r2, [r0, #96]	; 0x60
    a62a:	4293      	cmp	r3, r2
    a62c:	dc2b      	bgt.n	a686 <_http_client_handle_entity+0x72>
	return 0;
    a62e:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    a630:	6c62      	ldr	r2, [r4, #68]	; 0x44
    a632:	4293      	cmp	r3, r2
    a634:	dc4e      	bgt.n	a6d4 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    a636:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    a638:	2e00      	cmp	r6, #0
    a63a:	d003      	beq.n	a644 <_http_client_handle_entity+0x30>
    a63c:	22e4      	movs	r2, #228	; 0xe4
    a63e:	5aa1      	ldrh	r1, [r4, r2]
    a640:	2900      	cmp	r1, #0
    a642:	d10e      	bne.n	a662 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    a644:	2300      	movs	r3, #0
    a646:	22d8      	movs	r2, #216	; 0xd8
    a648:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    a64a:	320c      	adds	r2, #12
    a64c:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    a64e:	3341      	adds	r3, #65	; 0x41
    a650:	5ce3      	ldrb	r3, [r4, r3]
    a652:	079b      	lsls	r3, r3, #30
    a654:	d40f      	bmi.n	a676 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    a656:	2100      	movs	r1, #0
    a658:	0020      	movs	r0, r4
    a65a:	4b71      	ldr	r3, [pc, #452]	; (a820 <_http_client_handle_entity+0x20c>)
    a65c:	4798      	blx	r3
	return 0;
    a65e:	2000      	movs	r0, #0
    a660:	e038      	b.n	a6d4 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    a662:	aa03      	add	r2, sp, #12
    a664:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    a666:	2100      	movs	r1, #0
    a668:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    a66a:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    a66c:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    a66e:	3102      	adds	r1, #2
    a670:	0020      	movs	r0, r4
    a672:	47b0      	blx	r6
    a674:	e7e6      	b.n	a644 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    a676:	23dc      	movs	r3, #220	; 0xdc
    a678:	58e1      	ldr	r1, [r4, r3]
    a67a:	1869      	adds	r1, r5, r1
    a67c:	0020      	movs	r0, r4
    a67e:	4b69      	ldr	r3, [pc, #420]	; (a824 <_http_client_handle_entity+0x210>)
    a680:	4798      	blx	r3
				return module->recved_size;
    a682:	6c60      	ldr	r0, [r4, #68]	; 0x44
    a684:	e026      	b.n	a6d4 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    a686:	6c42      	ldr	r2, [r0, #68]	; 0x44
    a688:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    a68a:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    a68c:	21e0      	movs	r1, #224	; 0xe0
    a68e:	5840      	ldr	r0, [r0, r1]
    a690:	4684      	mov	ip, r0
    a692:	4462      	add	r2, ip
    a694:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    a696:	4293      	cmp	r3, r2
    a698:	dc20      	bgt.n	a6dc <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    a69a:	2300      	movs	r3, #0
    a69c:	22d8      	movs	r2, #216	; 0xd8
    a69e:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    a6a0:	320c      	adds	r2, #12
    a6a2:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    a6a4:	3ae3      	subs	r2, #227	; 0xe3
    a6a6:	ab03      	add	r3, sp, #12
    a6a8:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    a6aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a6ac:	2b00      	cmp	r3, #0
    a6ae:	d007      	beq.n	a6c0 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    a6b0:	ae03      	add	r6, sp, #12
    a6b2:	0032      	movs	r2, r6
    a6b4:	2103      	movs	r1, #3
    a6b6:	0020      	movs	r0, r4
    a6b8:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    a6ba:	7a33      	ldrb	r3, [r6, #8]
    a6bc:	2b01      	cmp	r3, #1
    a6be:	d103      	bne.n	a6c8 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    a6c0:	2341      	movs	r3, #65	; 0x41
    a6c2:	5ce3      	ldrb	r3, [r4, r3]
    a6c4:	079b      	lsls	r3, r3, #30
    a6c6:	d510      	bpl.n	a6ea <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    a6c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a6ca:	18e9      	adds	r1, r5, r3
    a6cc:	0020      	movs	r0, r4
    a6ce:	4b55      	ldr	r3, [pc, #340]	; (a824 <_http_client_handle_entity+0x210>)
    a6d0:	4798      	blx	r3
	return 0;
    a6d2:	2000      	movs	r0, #0
}
    a6d4:	b006      	add	sp, #24
    a6d6:	bc04      	pop	{r2}
    a6d8:	4691      	mov	r9, r2
    a6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    a6dc:	2200      	movs	r2, #0
    a6de:	ab03      	add	r3, sp, #12
    a6e0:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    a6e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a6e4:	2b00      	cmp	r3, #0
    a6e6:	d0ef      	beq.n	a6c8 <_http_client_handle_entity+0xb4>
    a6e8:	e7e2      	b.n	a6b0 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    a6ea:	484f      	ldr	r0, [pc, #316]	; (a828 <_http_client_handle_entity+0x214>)
    a6ec:	4b4f      	ldr	r3, [pc, #316]	; (a82c <_http_client_handle_entity+0x218>)
    a6ee:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    a6f0:	2100      	movs	r1, #0
    a6f2:	0020      	movs	r0, r4
    a6f4:	4b4a      	ldr	r3, [pc, #296]	; (a820 <_http_client_handle_entity+0x20c>)
    a6f6:	4798      	blx	r3
					return 0;
    a6f8:	2000      	movs	r0, #0
    a6fa:	e7eb      	b.n	a6d4 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    a6fc:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    a6fe:	2300      	movs	r3, #0
    a700:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    a702:	26e0      	movs	r6, #224	; 0xe0
    a704:	e00a      	b.n	a71c <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    a706:	2341      	movs	r3, #65	; 0x41
    a708:	5ce3      	ldrb	r3, [r4, r3]
    a70a:	079b      	lsls	r3, r3, #30
    a70c:	d51b      	bpl.n	a746 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    a70e:	1ca9      	adds	r1, r5, #2
    a710:	0020      	movs	r0, r4
    a712:	4b44      	ldr	r3, [pc, #272]	; (a824 <_http_client_handle_entity+0x210>)
    a714:	4798      	blx	r3
	} while(module->recved_size > 0);
    a716:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a718:	2b00      	cmp	r3, #0
    a71a:	d073      	beq.n	a804 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    a71c:	59a3      	ldr	r3, [r4, r6]
    a71e:	2b00      	cmp	r3, #0
    a720:	db30      	blt.n	a784 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    a722:	d116      	bne.n	a752 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    a724:	22d8      	movs	r2, #216	; 0xd8
    a726:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    a728:	320c      	adds	r2, #12
    a72a:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    a72c:	3ae3      	subs	r2, #227	; 0xe3
    a72e:	4669      	mov	r1, sp
    a730:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    a732:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    a734:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    a736:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a738:	2b00      	cmp	r3, #0
    a73a:	d0e4      	beq.n	a706 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    a73c:	466a      	mov	r2, sp
    a73e:	2103      	movs	r1, #3
    a740:	0020      	movs	r0, r4
    a742:	4798      	blx	r3
    a744:	e7df      	b.n	a706 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    a746:	2100      	movs	r1, #0
    a748:	0020      	movs	r0, r4
    a74a:	4b35      	ldr	r3, [pc, #212]	; (a820 <_http_client_handle_entity+0x20c>)
    a74c:	4798      	blx	r3
	return 0;
    a74e:	2000      	movs	r0, #0
    a750:	e7c0      	b.n	a6d4 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    a752:	42bb      	cmp	r3, r7
    a754:	dcdf      	bgt.n	a716 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    a756:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    a758:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    a75a:	2300      	movs	r3, #0
    a75c:	466a      	mov	r2, sp
    a75e:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    a760:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a762:	2b00      	cmp	r3, #0
    a764:	d002      	beq.n	a76c <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    a766:	2103      	movs	r1, #3
    a768:	0020      	movs	r0, r4
    a76a:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    a76c:	59a3      	ldr	r3, [r4, r6]
    a76e:	1c99      	adds	r1, r3, #2
    a770:	1869      	adds	r1, r5, r1
    a772:	0020      	movs	r0, r4
    a774:	4b2b      	ldr	r3, [pc, #172]	; (a824 <_http_client_handle_entity+0x210>)
    a776:	4798      	blx	r3
				length = (int)module->recved_size;
    a778:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    a77a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    a77c:	2301      	movs	r3, #1
    a77e:	425b      	negs	r3, r3
    a780:	51a3      	str	r3, [r4, r6]
    a782:	e7c8      	b.n	a716 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    a784:	2300      	movs	r3, #0
    a786:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    a788:	2f00      	cmp	r7, #0
    a78a:	dd04      	ble.n	a796 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    a78c:	782b      	ldrb	r3, [r5, #0]
    a78e:	2b0a      	cmp	r3, #10
    a790:	d11c      	bne.n	a7cc <_http_client_handle_entity+0x1b8>
					buffer++;
    a792:	3501      	adds	r5, #1
					length--;
    a794:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    a796:	59a3      	ldr	r3, [r4, r6]
    a798:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a79a:	4293      	cmp	r3, r2
    a79c:	dc39      	bgt.n	a812 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    a79e:	2f00      	cmp	r7, #0
    a7a0:	d1b9      	bne.n	a716 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    a7a2:	2201      	movs	r2, #1
    a7a4:	4252      	negs	r2, r2
    a7a6:	23e0      	movs	r3, #224	; 0xe0
    a7a8:	50e2      	str	r2, [r4, r3]
    a7aa:	e7d0      	b.n	a74e <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    a7ac:	001a      	movs	r2, r3
    a7ae:	3a61      	subs	r2, #97	; 0x61
    a7b0:	2a05      	cmp	r2, #5
    a7b2:	d818      	bhi.n	a7e6 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    a7b4:	59a2      	ldr	r2, [r4, r6]
    a7b6:	0112      	lsls	r2, r2, #4
    a7b8:	18d3      	adds	r3, r2, r3
    a7ba:	3b61      	subs	r3, #97	; 0x61
    a7bc:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    a7be:	3501      	adds	r5, #1
    a7c0:	3f01      	subs	r7, #1
    a7c2:	2f00      	cmp	r7, #0
    a7c4:	d020      	beq.n	a808 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    a7c6:	782b      	ldrb	r3, [r5, #0]
    a7c8:	2b0a      	cmp	r3, #10
    a7ca:	d0e2      	beq.n	a792 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    a7cc:	464a      	mov	r2, r9
    a7ce:	2a00      	cmp	r2, #0
    a7d0:	d1f5      	bne.n	a7be <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    a7d2:	001a      	movs	r2, r3
    a7d4:	3a30      	subs	r2, #48	; 0x30
    a7d6:	2a09      	cmp	r2, #9
    a7d8:	d8e8      	bhi.n	a7ac <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    a7da:	59a2      	ldr	r2, [r4, r6]
    a7dc:	0112      	lsls	r2, r2, #4
    a7de:	18d3      	adds	r3, r2, r3
    a7e0:	3b30      	subs	r3, #48	; 0x30
    a7e2:	51a3      	str	r3, [r4, r6]
    a7e4:	e7eb      	b.n	a7be <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    a7e6:	001a      	movs	r2, r3
    a7e8:	3a41      	subs	r2, #65	; 0x41
    a7ea:	2a05      	cmp	r2, #5
    a7ec:	d805      	bhi.n	a7fa <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    a7ee:	59a2      	ldr	r2, [r4, r6]
    a7f0:	0112      	lsls	r2, r2, #4
    a7f2:	18d3      	adds	r3, r2, r3
    a7f4:	3b41      	subs	r3, #65	; 0x41
    a7f6:	51a3      	str	r3, [r4, r6]
    a7f8:	e7e1      	b.n	a7be <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    a7fa:	3b3b      	subs	r3, #59	; 0x3b
    a7fc:	425a      	negs	r2, r3
    a7fe:	415a      	adcs	r2, r3
    a800:	4691      	mov	r9, r2
    a802:	e7dc      	b.n	a7be <_http_client_handle_entity+0x1aa>
	return 0;
    a804:	2000      	movs	r0, #0
    a806:	e765      	b.n	a6d4 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    a808:	23e0      	movs	r3, #224	; 0xe0
    a80a:	58e3      	ldr	r3, [r4, r3]
    a80c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a80e:	4293      	cmp	r3, r2
    a810:	ddc7      	ble.n	a7a2 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    a812:	218b      	movs	r1, #139	; 0x8b
    a814:	4249      	negs	r1, r1
    a816:	0020      	movs	r0, r4
    a818:	4b01      	ldr	r3, [pc, #4]	; (a820 <_http_client_handle_entity+0x20c>)
    a81a:	4798      	blx	r3
    a81c:	e797      	b.n	a74e <_http_client_handle_entity+0x13a>
    a81e:	46c0      	nop			; (mov r8, r8)
    a820:	00009bd9 	.word	0x00009bd9
    a824:	0000a431 	.word	0x0000a431
    a828:	0000eac8 	.word	0x0000eac8
    a82c:	0000bf6d 	.word	0x0000bf6d

0000a830 <_http_client_handle_response>:
{
    a830:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    a832:	23d8      	movs	r3, #216	; 0xd8
    a834:	58c3      	ldr	r3, [r0, r3]
    a836:	2b00      	cmp	r3, #0
    a838:	d003      	beq.n	a842 <_http_client_handle_response+0x12>
    a83a:	2b01      	cmp	r3, #1
    a83c:	d004      	beq.n	a848 <_http_client_handle_response+0x18>
	return 0;
    a83e:	2000      	movs	r0, #0
    a840:	e001      	b.n	a846 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    a842:	4b03      	ldr	r3, [pc, #12]	; (a850 <_http_client_handle_response+0x20>)
    a844:	4798      	blx	r3
}
    a846:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    a848:	4b02      	ldr	r3, [pc, #8]	; (a854 <_http_client_handle_response+0x24>)
    a84a:	4798      	blx	r3
    a84c:	e7fb      	b.n	a846 <_http_client_handle_response+0x16>
    a84e:	46c0      	nop			; (mov r8, r8)
    a850:	0000a455 	.word	0x0000a455
    a854:	0000a615 	.word	0x0000a615

0000a858 <_http_client_recved_packet>:
{
    a858:	b570      	push	{r4, r5, r6, lr}
    a85a:	0004      	movs	r4, r0
	module->recved_size += read_len;
    a85c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    a85e:	469c      	mov	ip, r3
    a860:	4461      	add	r1, ip
    a862:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    a864:	2358      	movs	r3, #88	; 0x58
    a866:	5ac3      	ldrh	r3, [r0, r3]
    a868:	2b00      	cmp	r3, #0
    a86a:	d105      	bne.n	a878 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    a86c:	4d05      	ldr	r5, [pc, #20]	; (a884 <_http_client_recved_packet+0x2c>)
    a86e:	0020      	movs	r0, r4
    a870:	47a8      	blx	r5
    a872:	2800      	cmp	r0, #0
    a874:	d1fb      	bne.n	a86e <_http_client_recved_packet+0x16>
}
    a876:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    a878:	6c81      	ldr	r1, [r0, #72]	; 0x48
    a87a:	6d40      	ldr	r0, [r0, #84]	; 0x54
    a87c:	4b02      	ldr	r3, [pc, #8]	; (a888 <_http_client_recved_packet+0x30>)
    a87e:	4798      	blx	r3
    a880:	e7f4      	b.n	a86c <_http_client_recved_packet+0x14>
    a882:	46c0      	nop			; (mov r8, r8)
    a884:	0000a831 	.word	0x0000a831
    a888:	0000ac05 	.word	0x0000ac05

0000a88c <http_client_socket_event_handler>:
{
    a88c:	b510      	push	{r4, lr}
    a88e:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    a890:	0080      	lsls	r0, r0, #2
    a892:	4b65      	ldr	r3, [pc, #404]	; (aa28 <http_client_socket_event_handler+0x19c>)
    a894:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    a896:	2c00      	cmp	r4, #0
    a898:	d006      	beq.n	a8a8 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    a89a:	2906      	cmp	r1, #6
    a89c:	d051      	beq.n	a942 <http_client_socket_event_handler+0xb6>
    a89e:	2907      	cmp	r1, #7
    a8a0:	d100      	bne.n	a8a4 <http_client_socket_event_handler+0x18>
    a8a2:	e08a      	b.n	a9ba <http_client_socket_event_handler+0x12e>
    a8a4:	2905      	cmp	r1, #5
    a8a6:	d001      	beq.n	a8ac <http_client_socket_event_handler+0x20>
}
    a8a8:	b004      	add	sp, #16
    a8aa:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    a8ac:	2301      	movs	r3, #1
    a8ae:	56d3      	ldrsb	r3, [r2, r3]
    a8b0:	1e1a      	subs	r2, r3, #0
    a8b2:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    a8b4:	db15      	blt.n	a8e2 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    a8b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    a8b8:	2b00      	cmp	r3, #0
    a8ba:	d003      	beq.n	a8c4 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    a8bc:	aa01      	add	r2, sp, #4
    a8be:	2100      	movs	r1, #0
    a8c0:	0020      	movs	r0, r4
    a8c2:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    a8c4:	2303      	movs	r3, #3
    a8c6:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    a8c8:	3355      	adds	r3, #85	; 0x55
    a8ca:	5ae2      	ldrh	r2, [r4, r3]
    a8cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    a8ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a8d0:	4b56      	ldr	r3, [pc, #344]	; (aa2c <http_client_socket_event_handler+0x1a0>)
    a8d2:	4798      	blx	r3
    		_http_client_recv_packet(module);
    a8d4:	0020      	movs	r0, r4
    a8d6:	4b56      	ldr	r3, [pc, #344]	; (aa30 <http_client_socket_event_handler+0x1a4>)
    a8d8:	4798      	blx	r3
			_http_client_request(module);
    a8da:	0020      	movs	r0, r4
    a8dc:	4b55      	ldr	r3, [pc, #340]	; (aa34 <http_client_socket_event_handler+0x1a8>)
    a8de:	4798      	blx	r3
    a8e0:	e7e2      	b.n	a8a8 <http_client_socket_event_handler+0x1c>
	switch (err) {
    a8e2:	330e      	adds	r3, #14
    a8e4:	b2d9      	uxtb	r1, r3
    a8e6:	290e      	cmp	r1, #14
    a8e8:	d81e      	bhi.n	a928 <http_client_socket_event_handler+0x9c>
    a8ea:	008b      	lsls	r3, r1, #2
    a8ec:	4952      	ldr	r1, [pc, #328]	; (aa38 <http_client_socket_event_handler+0x1ac>)
    a8ee:	58cb      	ldr	r3, [r1, r3]
    a8f0:	469f      	mov	pc, r3
			return -ENOENT;
    a8f2:	2102      	movs	r1, #2
    a8f4:	4249      	negs	r1, r1
    a8f6:	e01d      	b.n	a934 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    a8f8:	2170      	movs	r1, #112	; 0x70
    a8fa:	4249      	negs	r1, r1
    a8fc:	e01a      	b.n	a934 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    a8fe:	210c      	movs	r1, #12
    a900:	4249      	negs	r1, r1
    a902:	e017      	b.n	a934 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    a904:	2116      	movs	r1, #22
    a906:	4249      	negs	r1, r1
    a908:	e014      	b.n	a934 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    a90a:	210c      	movs	r1, #12
    a90c:	4249      	negs	r1, r1
    a90e:	e011      	b.n	a934 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    a910:	2179      	movs	r1, #121	; 0x79
    a912:	4249      	negs	r1, r1
    a914:	e00e      	b.n	a934 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    a916:	2168      	movs	r1, #104	; 0x68
    a918:	4249      	negs	r1, r1
    a91a:	e00b      	b.n	a934 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    a91c:	210b      	movs	r1, #11
    a91e:	4249      	negs	r1, r1
    a920:	e008      	b.n	a934 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    a922:	2110      	movs	r1, #16
    a924:	4249      	negs	r1, r1
    a926:	e005      	b.n	a934 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    a928:	2a00      	cmp	r2, #0
    a92a:	db07      	blt.n	a93c <http_client_socket_event_handler+0xb0>
			return 0;
    a92c:	2100      	movs	r1, #0
    a92e:	e001      	b.n	a934 <http_client_socket_event_handler+0xa8>
			return -EIO;
    a930:	2105      	movs	r1, #5
    a932:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    a934:	0020      	movs	r0, r4
    a936:	4b41      	ldr	r3, [pc, #260]	; (aa3c <http_client_socket_event_handler+0x1b0>)
    a938:	4798      	blx	r3
    a93a:	e7b5      	b.n	a8a8 <http_client_socket_event_handler+0x1c>
				return -EIO;
    a93c:	2105      	movs	r1, #5
    a93e:	4249      	negs	r1, r1
    a940:	e7f8      	b.n	a934 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    a942:	2304      	movs	r3, #4
    a944:	5ed1      	ldrsh	r1, [r2, r3]
    a946:	2900      	cmp	r1, #0
    a948:	dd06      	ble.n	a958 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    a94a:	0020      	movs	r0, r4
    a94c:	4b3c      	ldr	r3, [pc, #240]	; (aa40 <http_client_socket_event_handler+0x1b4>)
    a94e:	4798      	blx	r3
		_http_client_recv_packet(module);
    a950:	0020      	movs	r0, r4
    a952:	4b37      	ldr	r3, [pc, #220]	; (aa30 <http_client_socket_event_handler+0x1a4>)
    a954:	4798      	blx	r3
		break;
    a956:	e7a7      	b.n	a8a8 <http_client_socket_event_handler+0x1c>
	switch (err) {
    a958:	000b      	movs	r3, r1
    a95a:	330e      	adds	r3, #14
    a95c:	b29a      	uxth	r2, r3
    a95e:	2a0e      	cmp	r2, #14
    a960:	d81e      	bhi.n	a9a0 <http_client_socket_event_handler+0x114>
    a962:	0093      	lsls	r3, r2, #2
    a964:	4a37      	ldr	r2, [pc, #220]	; (aa44 <http_client_socket_event_handler+0x1b8>)
    a966:	58d3      	ldr	r3, [r2, r3]
    a968:	469f      	mov	pc, r3
			return -ENOENT;
    a96a:	2102      	movs	r1, #2
    a96c:	4249      	negs	r1, r1
    a96e:	e01d      	b.n	a9ac <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    a970:	2170      	movs	r1, #112	; 0x70
    a972:	4249      	negs	r1, r1
    a974:	e01a      	b.n	a9ac <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    a976:	210c      	movs	r1, #12
    a978:	4249      	negs	r1, r1
    a97a:	e017      	b.n	a9ac <http_client_socket_event_handler+0x120>
			return -EINVAL;
    a97c:	2116      	movs	r1, #22
    a97e:	4249      	negs	r1, r1
    a980:	e014      	b.n	a9ac <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    a982:	210c      	movs	r1, #12
    a984:	4249      	negs	r1, r1
    a986:	e011      	b.n	a9ac <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    a988:	2179      	movs	r1, #121	; 0x79
    a98a:	4249      	negs	r1, r1
    a98c:	e00e      	b.n	a9ac <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    a98e:	2168      	movs	r1, #104	; 0x68
    a990:	4249      	negs	r1, r1
    a992:	e00b      	b.n	a9ac <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    a994:	210b      	movs	r1, #11
    a996:	4249      	negs	r1, r1
    a998:	e008      	b.n	a9ac <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    a99a:	2110      	movs	r1, #16
    a99c:	4249      	negs	r1, r1
    a99e:	e005      	b.n	a9ac <http_client_socket_event_handler+0x120>
			if (err < 0) {
    a9a0:	2900      	cmp	r1, #0
    a9a2:	db07      	blt.n	a9b4 <http_client_socket_event_handler+0x128>
			return 0;
    a9a4:	2100      	movs	r1, #0
    a9a6:	e001      	b.n	a9ac <http_client_socket_event_handler+0x120>
			return -EIO;
    a9a8:	2105      	movs	r1, #5
    a9aa:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    a9ac:	0020      	movs	r0, r4
    a9ae:	4b23      	ldr	r3, [pc, #140]	; (aa3c <http_client_socket_event_handler+0x1b0>)
    a9b0:	4798      	blx	r3
    a9b2:	e7cd      	b.n	a950 <http_client_socket_event_handler+0xc4>
				return -EIO;
    a9b4:	2105      	movs	r1, #5
    a9b6:	4249      	negs	r1, r1
    a9b8:	e7f8      	b.n	a9ac <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    a9ba:	2300      	movs	r3, #0
    a9bc:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    a9be:	2b00      	cmp	r3, #0
    a9c0:	db08      	blt.n	a9d4 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    a9c2:	0020      	movs	r0, r4
    a9c4:	4b1b      	ldr	r3, [pc, #108]	; (aa34 <http_client_socket_event_handler+0x1a8>)
    a9c6:	4798      	blx	r3
		module->sending = 0;
    a9c8:	2241      	movs	r2, #65	; 0x41
    a9ca:	5ca3      	ldrb	r3, [r4, r2]
    a9cc:	2101      	movs	r1, #1
    a9ce:	438b      	bics	r3, r1
    a9d0:	54a3      	strb	r3, [r4, r2]
    	break;
    a9d2:	e769      	b.n	a8a8 <http_client_socket_event_handler+0x1c>
	switch (err) {
    a9d4:	330e      	adds	r3, #14
    a9d6:	b29a      	uxth	r2, r3
    a9d8:	2a0d      	cmp	r2, #13
    a9da:	d81e      	bhi.n	aa1a <http_client_socket_event_handler+0x18e>
    a9dc:	0093      	lsls	r3, r2, #2
    a9de:	4a1a      	ldr	r2, [pc, #104]	; (aa48 <http_client_socket_event_handler+0x1bc>)
    a9e0:	58d3      	ldr	r3, [r2, r3]
    a9e2:	469f      	mov	pc, r3
			return -ENOENT;
    a9e4:	2102      	movs	r1, #2
    a9e6:	4249      	negs	r1, r1
    a9e8:	e019      	b.n	aa1e <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    a9ea:	2170      	movs	r1, #112	; 0x70
    a9ec:	4249      	negs	r1, r1
    a9ee:	e016      	b.n	aa1e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    a9f0:	210c      	movs	r1, #12
    a9f2:	4249      	negs	r1, r1
    a9f4:	e013      	b.n	aa1e <http_client_socket_event_handler+0x192>
			return -EINVAL;
    a9f6:	2116      	movs	r1, #22
    a9f8:	4249      	negs	r1, r1
    a9fa:	e010      	b.n	aa1e <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    a9fc:	210c      	movs	r1, #12
    a9fe:	4249      	negs	r1, r1
    aa00:	e00d      	b.n	aa1e <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    aa02:	2179      	movs	r1, #121	; 0x79
    aa04:	4249      	negs	r1, r1
    aa06:	e00a      	b.n	aa1e <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    aa08:	2168      	movs	r1, #104	; 0x68
    aa0a:	4249      	negs	r1, r1
    aa0c:	e007      	b.n	aa1e <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    aa0e:	210b      	movs	r1, #11
    aa10:	4249      	negs	r1, r1
    aa12:	e004      	b.n	aa1e <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    aa14:	2110      	movs	r1, #16
    aa16:	4249      	negs	r1, r1
    aa18:	e001      	b.n	aa1e <http_client_socket_event_handler+0x192>
			return -EIO;
    aa1a:	2105      	movs	r1, #5
    aa1c:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    aa1e:	0020      	movs	r0, r4
    aa20:	4b06      	ldr	r3, [pc, #24]	; (aa3c <http_client_socket_event_handler+0x1b0>)
    aa22:	4798      	blx	r3
    aa24:	e7d0      	b.n	a9c8 <http_client_socket_event_handler+0x13c>
    aa26:	46c0      	nop			; (mov r8, r8)
    aa28:	200007fc 	.word	0x200007fc
    aa2c:	0000abd9 	.word	0x0000abd9
    aa30:	0000a3f9 	.word	0x0000a3f9
    aa34:	00009cf1 	.word	0x00009cf1
    aa38:	0000ea08 	.word	0x0000ea08
    aa3c:	00009bd9 	.word	0x00009bd9
    aa40:	0000a859 	.word	0x0000a859
    aa44:	0000ea44 	.word	0x0000ea44
    aa48:	0000ea80 	.word	0x0000ea80

0000aa4c <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    aa4c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    aa4e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    aa50:	2200      	movs	r2, #0
    aa52:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    aa54:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    aa56:	9b00      	ldr	r3, [sp, #0]
    aa58:	60c3      	str	r3, [r0, #12]
}
    aa5a:	4770      	bx	lr

0000aa5c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    aa5c:	b510      	push	{r4, lr}
    aa5e:	0004      	movs	r4, r0
	if(writer->written > 0) {
    aa60:	6842      	ldr	r2, [r0, #4]
    aa62:	2a00      	cmp	r2, #0
    aa64:	d100      	bne.n	aa68 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    aa66:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    aa68:	6901      	ldr	r1, [r0, #16]
    aa6a:	68c0      	ldr	r0, [r0, #12]
    aa6c:	68a3      	ldr	r3, [r4, #8]
    aa6e:	4798      	blx	r3
		writer->written = 0;
    aa70:	2300      	movs	r3, #0
    aa72:	6063      	str	r3, [r4, #4]
}
    aa74:	e7f7      	b.n	aa66 <stream_writer_send_remain+0xa>
	...

0000aa78 <stream_writer_send_8>:
{
    aa78:	b570      	push	{r4, r5, r6, lr}
    aa7a:	0004      	movs	r4, r0
    aa7c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    aa7e:	6803      	ldr	r3, [r0, #0]
    aa80:	6842      	ldr	r2, [r0, #4]
    aa82:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    aa84:	2b00      	cmp	r3, #0
    aa86:	dd05      	ble.n	aa94 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    aa88:	6922      	ldr	r2, [r4, #16]
    aa8a:	6863      	ldr	r3, [r4, #4]
    aa8c:	1c59      	adds	r1, r3, #1
    aa8e:	6061      	str	r1, [r4, #4]
    aa90:	54d5      	strb	r5, [r2, r3]
}
    aa92:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    aa94:	4b01      	ldr	r3, [pc, #4]	; (aa9c <stream_writer_send_8+0x24>)
    aa96:	4798      	blx	r3
    aa98:	e7f6      	b.n	aa88 <stream_writer_send_8+0x10>
    aa9a:	46c0      	nop			; (mov r8, r8)
    aa9c:	0000aa5d 	.word	0x0000aa5d

0000aaa0 <stream_writer_send_buffer>:
{
    aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aaa2:	0006      	movs	r6, r0
    aaa4:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    aaa6:	2a00      	cmp	r2, #0
    aaa8:	d008      	beq.n	aabc <stream_writer_send_buffer+0x1c>
    aaaa:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    aaac:	4f04      	ldr	r7, [pc, #16]	; (aac0 <stream_writer_send_buffer+0x20>)
    aaae:	2100      	movs	r1, #0
    aab0:	5661      	ldrsb	r1, [r4, r1]
    aab2:	0030      	movs	r0, r6
    aab4:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    aab6:	3401      	adds	r4, #1
    aab8:	42a5      	cmp	r5, r4
    aaba:	d1f8      	bne.n	aaae <stream_writer_send_buffer+0xe>
}
    aabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aabe:	46c0      	nop			; (mov r8, r8)
    aac0:	0000aa79 	.word	0x0000aa79

0000aac4 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    aac4:	4a02      	ldr	r2, [pc, #8]	; (aad0 <sw_timer_tcc_callback+0xc>)
    aac6:	6813      	ldr	r3, [r2, #0]
    aac8:	3301      	adds	r3, #1
    aaca:	6013      	str	r3, [r2, #0]
}
    aacc:	4770      	bx	lr
    aace:	46c0      	nop			; (mov r8, r8)
    aad0:	20000818 	.word	0x20000818

0000aad4 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    aad4:	2364      	movs	r3, #100	; 0x64
    aad6:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    aad8:	2300      	movs	r3, #0
    aada:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    aadc:	7043      	strb	r3, [r0, #1]
}
    aade:	4770      	bx	lr

0000aae0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    aae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aae2:	46c6      	mov	lr, r8
    aae4:	b500      	push	{lr}
    aae6:	b0ac      	sub	sp, #176	; 0xb0
    aae8:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    aaea:	466e      	mov	r6, sp
    aaec:	4b1d      	ldr	r3, [pc, #116]	; (ab64 <sw_timer_init+0x84>)
    aaee:	466a      	mov	r2, sp
    aaf0:	cb92      	ldmia	r3!, {r1, r4, r7}
    aaf2:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    aaf4:	886b      	ldrh	r3, [r5, #2]
    aaf6:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    aaf8:	3014      	adds	r0, #20
    aafa:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    aafc:	782b      	ldrb	r3, [r5, #0]
    aafe:	009b      	lsls	r3, r3, #2
    ab00:	5999      	ldr	r1, [r3, r6]
    ab02:	0017      	movs	r7, r2
    ab04:	0010      	movs	r0, r2
    ab06:	4b18      	ldr	r3, [pc, #96]	; (ab68 <sw_timer_init+0x88>)
    ab08:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    ab0a:	2000      	movs	r0, #0
    ab0c:	4b17      	ldr	r3, [pc, #92]	; (ab6c <sw_timer_init+0x8c>)
    ab0e:	4798      	blx	r3
    ab10:	4b17      	ldr	r3, [pc, #92]	; (ab70 <sw_timer_init+0x90>)
    ab12:	7a1b      	ldrb	r3, [r3, #8]
    ab14:	b2db      	uxtb	r3, r3
    ab16:	40d8      	lsrs	r0, r3
    ab18:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    ab1a:	8869      	ldrh	r1, [r5, #2]
    ab1c:	20fa      	movs	r0, #250	; 0xfa
    ab1e:	0200      	lsls	r0, r0, #8
    ab20:	4b14      	ldr	r3, [pc, #80]	; (ab74 <sw_timer_init+0x94>)
    ab22:	4798      	blx	r3
    ab24:	0001      	movs	r1, r0
    ab26:	4640      	mov	r0, r8
    ab28:	4b13      	ldr	r3, [pc, #76]	; (ab78 <sw_timer_init+0x98>)
    ab2a:	4798      	blx	r3
    ab2c:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    ab2e:	2305      	movs	r3, #5
    ab30:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    ab32:	782b      	ldrb	r3, [r5, #0]
    ab34:	009b      	lsls	r3, r3, #2
    ab36:	5999      	ldr	r1, [r3, r6]
    ab38:	003a      	movs	r2, r7
    ab3a:	0020      	movs	r0, r4
    ab3c:	4b0f      	ldr	r3, [pc, #60]	; (ab7c <sw_timer_init+0x9c>)
    ab3e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    ab40:	786a      	ldrb	r2, [r5, #1]
    ab42:	3208      	adds	r2, #8
    ab44:	b2d2      	uxtb	r2, r2
    ab46:	490e      	ldr	r1, [pc, #56]	; (ab80 <sw_timer_init+0xa0>)
    ab48:	0020      	movs	r0, r4
    ab4a:	4b0e      	ldr	r3, [pc, #56]	; (ab84 <sw_timer_init+0xa4>)
    ab4c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    ab4e:	7869      	ldrb	r1, [r5, #1]
    ab50:	3108      	adds	r1, #8
    ab52:	b2c9      	uxtb	r1, r1
    ab54:	0020      	movs	r0, r4
    ab56:	4b0c      	ldr	r3, [pc, #48]	; (ab88 <sw_timer_init+0xa8>)
    ab58:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    ab5a:	b02c      	add	sp, #176	; 0xb0
    ab5c:	bc04      	pop	{r2}
    ab5e:	4690      	mov	r8, r2
    ab60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab62:	46c0      	nop			; (mov r8, r8)
    ab64:	0000ebf0 	.word	0x0000ebf0
    ab68:	000061e1 	.word	0x000061e1
    ab6c:	00005f3d 	.word	0x00005f3d
    ab70:	40000400 	.word	0x40000400
    ab74:	0000ba11 	.word	0x0000ba11
    ab78:	0000b8fd 	.word	0x0000b8fd
    ab7c:	0000632d 	.word	0x0000632d
    ab80:	0000aac5 	.word	0x0000aac5
    ab84:	00006739 	.word	0x00006739
    ab88:	00006751 	.word	0x00006751

0000ab8c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    ab8c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    ab8e:	2102      	movs	r1, #2
    ab90:	6893      	ldr	r3, [r2, #8]
    ab92:	4219      	tst	r1, r3
    ab94:	d1fc      	bne.n	ab90 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    ab96:	6813      	ldr	r3, [r2, #0]
    ab98:	2102      	movs	r1, #2
    ab9a:	430b      	orrs	r3, r1
    ab9c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    ab9e:	4770      	bx	lr

0000aba0 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    aba0:	b570      	push	{r4, r5, r6, lr}
    aba2:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    aba4:	7805      	ldrb	r5, [r0, #0]
    aba6:	07e8      	lsls	r0, r5, #31
    aba8:	d502      	bpl.n	abb0 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    abaa:	2001      	movs	r0, #1
    abac:	4240      	negs	r0, r0
}
    abae:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    abb0:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    abb2:	0029      	movs	r1, r5
    abb4:	2002      	movs	r0, #2
    abb6:	4381      	bics	r1, r0
    abb8:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    abba:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    abbc:	6d61      	ldr	r1, [r4, #84]	; 0x54
    abbe:	0018      	movs	r0, r3
    abc0:	4b04      	ldr	r3, [pc, #16]	; (abd4 <sw_timer_register_callback+0x34>)
    abc2:	4798      	blx	r3
    abc4:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    abc6:	7823      	ldrb	r3, [r4, #0]
    abc8:	2201      	movs	r2, #1
    abca:	4313      	orrs	r3, r2
    abcc:	7023      	strb	r3, [r4, #0]
			return index;
    abce:	2000      	movs	r0, #0
    abd0:	e7ed      	b.n	abae <sw_timer_register_callback+0xe>
    abd2:	46c0      	nop			; (mov r8, r8)
    abd4:	0000b8fd 	.word	0x0000b8fd

0000abd8 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    abd8:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    abda:	008b      	lsls	r3, r1, #2
    abdc:	185d      	adds	r5, r3, r1
    abde:	00ad      	lsls	r5, r5, #2
    abe0:	5c29      	ldrb	r1, [r5, r0]
    abe2:	2602      	movs	r6, #2
    abe4:	4331      	orrs	r1, r6
    abe6:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    abe8:	1944      	adds	r4, r0, r5
    abea:	6d41      	ldr	r1, [r0, #84]	; 0x54
    abec:	0010      	movs	r0, r2
    abee:	4b03      	ldr	r3, [pc, #12]	; (abfc <sw_timer_enable_callback+0x24>)
    abf0:	4798      	blx	r3
    abf2:	4b03      	ldr	r3, [pc, #12]	; (ac00 <sw_timer_enable_callback+0x28>)
    abf4:	681b      	ldr	r3, [r3, #0]
    abf6:	18c0      	adds	r0, r0, r3
    abf8:	6120      	str	r0, [r4, #16]
}
    abfa:	bd70      	pop	{r4, r5, r6, pc}
    abfc:	0000b8fd 	.word	0x0000b8fd
    ac00:	20000818 	.word	0x20000818

0000ac04 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    ac04:	008b      	lsls	r3, r1, #2
    ac06:	1859      	adds	r1, r3, r1
    ac08:	0089      	lsls	r1, r1, #2
    ac0a:	5c0b      	ldrb	r3, [r1, r0]
    ac0c:	2202      	movs	r2, #2
    ac0e:	4393      	bics	r3, r2
    ac10:	540b      	strb	r3, [r1, r0]
}
    ac12:	4770      	bx	lr

0000ac14 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    ac14:	b570      	push	{r4, r5, r6, lr}
    ac16:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    ac18:	7803      	ldrb	r3, [r0, #0]
    ac1a:	07db      	lsls	r3, r3, #31
    ac1c:	d507      	bpl.n	ac2e <sw_timer_task+0x1a>
    ac1e:	7803      	ldrb	r3, [r0, #0]
    ac20:	079b      	lsls	r3, r3, #30
    ac22:	d504      	bpl.n	ac2e <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    ac24:	4b10      	ldr	r3, [pc, #64]	; (ac68 <sw_timer_task+0x54>)
    ac26:	681a      	ldr	r2, [r3, #0]
    ac28:	6903      	ldr	r3, [r0, #16]
    ac2a:	1a9b      	subs	r3, r3, r2
    ac2c:	d400      	bmi.n	ac30 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    ac2e:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    ac30:	7803      	ldrb	r3, [r0, #0]
    ac32:	075b      	lsls	r3, r3, #29
    ac34:	d4fb      	bmi.n	ac2e <sw_timer_task+0x1a>
				handler->busy = 1;
    ac36:	7803      	ldrb	r3, [r0, #0]
    ac38:	2104      	movs	r1, #4
    ac3a:	430b      	orrs	r3, r1
    ac3c:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    ac3e:	68c3      	ldr	r3, [r0, #12]
    ac40:	2b00      	cmp	r3, #0
    ac42:	d00b      	beq.n	ac5c <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    ac44:	18d2      	adds	r2, r2, r3
    ac46:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    ac48:	68a2      	ldr	r2, [r4, #8]
    ac4a:	2100      	movs	r1, #0
    ac4c:	0020      	movs	r0, r4
    ac4e:	6865      	ldr	r5, [r4, #4]
    ac50:	47a8      	blx	r5
				handler->busy = 0;
    ac52:	7823      	ldrb	r3, [r4, #0]
    ac54:	2204      	movs	r2, #4
    ac56:	4393      	bics	r3, r2
    ac58:	7023      	strb	r3, [r4, #0]
}
    ac5a:	e7e8      	b.n	ac2e <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    ac5c:	7802      	ldrb	r2, [r0, #0]
    ac5e:	2102      	movs	r1, #2
    ac60:	438a      	bics	r2, r1
    ac62:	7002      	strb	r2, [r0, #0]
    ac64:	e7f0      	b.n	ac48 <sw_timer_task+0x34>
    ac66:	46c0      	nop			; (mov r8, r8)
    ac68:	20000818 	.word	0x20000818

0000ac6c <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
    ac6c:	4b02      	ldr	r3, [pc, #8]	; (ac78 <add_state+0xc>)
    ac6e:	781a      	ldrb	r2, [r3, #0]
    ac70:	4310      	orrs	r0, r2
    ac72:	7018      	strb	r0, [r3, #0]
}
    ac74:	4770      	bx	lr
    ac76:	46c0      	nop			; (mov r8, r8)
    ac78:	20000851 	.word	0x20000851

0000ac7c <SubscribeHandler>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandler(MessageData *msgData)
{
    ac7c:	b570      	push	{r4, r5, r6, lr}
    ac7e:	0004      	movs	r4, r0
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
    ac80:	6843      	ldr	r3, [r0, #4]
    ac82:	689a      	ldr	r2, [r3, #8]
    ac84:	6859      	ldr	r1, [r3, #4]
    ac86:	4816      	ldr	r0, [pc, #88]	; (ace0 <SubscribeHandler+0x64>)
    ac88:	4d16      	ldr	r5, [pc, #88]	; (ace4 <SubscribeHandler+0x68>)
    ac8a:	47a8      	blx	r5
	printf(" >> ");
    ac8c:	4816      	ldr	r0, [pc, #88]	; (ace8 <SubscribeHandler+0x6c>)
    ac8e:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);	
    ac90:	6823      	ldr	r3, [r4, #0]
    ac92:	689a      	ldr	r2, [r3, #8]
    ac94:	68d9      	ldr	r1, [r3, #12]
    ac96:	4815      	ldr	r0, [pc, #84]	; (acec <SubscribeHandler+0x70>)
    ac98:	47a8      	blx	r5

	//Handle LedData message
	if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
    ac9a:	6826      	ldr	r6, [r4, #0]
    ac9c:	68f5      	ldr	r5, [r6, #12]
    ac9e:	6863      	ldr	r3, [r4, #4]
    aca0:	6898      	ldr	r0, [r3, #8]
    aca2:	002a      	movs	r2, r5
    aca4:	4912      	ldr	r1, [pc, #72]	; (acf0 <SubscribeHandler+0x74>)
    aca6:	4b13      	ldr	r3, [pc, #76]	; (acf4 <SubscribeHandler+0x78>)
    aca8:	4798      	blx	r3
    acaa:	2800      	cmp	r0, #0
    acac:	d117      	bne.n	acde <SubscribeHandler+0x62>
	{
		if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
    acae:	68b4      	ldr	r4, [r6, #8]
    acb0:	002a      	movs	r2, r5
    acb2:	4911      	ldr	r1, [pc, #68]	; (acf8 <SubscribeHandler+0x7c>)
    acb4:	0020      	movs	r0, r4
    acb6:	4b0f      	ldr	r3, [pc, #60]	; (acf4 <SubscribeHandler+0x78>)
    acb8:	4798      	blx	r3
    acba:	2800      	cmp	r0, #0
    acbc:	d00b      	beq.n	acd6 <SubscribeHandler+0x5a>
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
		} 
		else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
    acbe:	002a      	movs	r2, r5
    acc0:	490e      	ldr	r1, [pc, #56]	; (acfc <SubscribeHandler+0x80>)
    acc2:	0020      	movs	r0, r4
    acc4:	4b0b      	ldr	r3, [pc, #44]	; (acf4 <SubscribeHandler+0x78>)
    acc6:	4798      	blx	r3
    acc8:	2800      	cmp	r0, #0
    acca:	d108      	bne.n	acde <SubscribeHandler+0x62>
		port_base->OUTCLR.reg = pin_mask;
    accc:	2280      	movs	r2, #128	; 0x80
    acce:	0412      	lsls	r2, r2, #16
    acd0:	4b0b      	ldr	r3, [pc, #44]	; (ad00 <SubscribeHandler+0x84>)
    acd2:	615a      	str	r2, [r3, #20]
		{
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
		}
	}
}
    acd4:	e003      	b.n	acde <SubscribeHandler+0x62>
		port_base->OUTSET.reg = pin_mask;
    acd6:	2280      	movs	r2, #128	; 0x80
    acd8:	0412      	lsls	r2, r2, #16
    acda:	4b09      	ldr	r3, [pc, #36]	; (ad00 <SubscribeHandler+0x84>)
    acdc:	619a      	str	r2, [r3, #24]
    acde:	bd70      	pop	{r4, r5, r6, pc}
    ace0:	0000ec10 	.word	0x0000ec10
    ace4:	0000be51 	.word	0x0000be51
    ace8:	0000ec18 	.word	0x0000ec18
    acec:	0000ec20 	.word	0x0000ec20
    acf0:	0000ec28 	.word	0x0000ec28
    acf4:	0000c225 	.word	0x0000c225
    acf8:	0000ec30 	.word	0x0000ec30
    acfc:	0000ec38 	.word	0x0000ec38
    ad00:	41004400 	.word	0x41004400

0000ad04 <extint_detection_callback>:
}


volatile bool isPressed = false;
void extint_detection_callback(void)
{
    ad04:	b510      	push	{r4, lr}
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	temperature++;
    ad06:	4b0a      	ldr	r3, [pc, #40]	; (ad30 <extint_detection_callback+0x2c>)
    ad08:	681a      	ldr	r2, [r3, #0]
    ad0a:	3201      	adds	r2, #1
    ad0c:	601a      	str	r2, [r3, #0]
	if (temperature > 40) temperature = 1;
    ad0e:	681b      	ldr	r3, [r3, #0]
    ad10:	2b28      	cmp	r3, #40	; 0x28
    ad12:	d902      	bls.n	ad1a <extint_detection_callback+0x16>
    ad14:	2201      	movs	r2, #1
    ad16:	4b06      	ldr	r3, [pc, #24]	; (ad30 <extint_detection_callback+0x2c>)
    ad18:	601a      	str	r2, [r3, #0]
	snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);
    ad1a:	4b05      	ldr	r3, [pc, #20]	; (ad30 <extint_detection_callback+0x2c>)
    ad1c:	681b      	ldr	r3, [r3, #0]
    ad1e:	4a05      	ldr	r2, [pc, #20]	; (ad34 <extint_detection_callback+0x30>)
    ad20:	213f      	movs	r1, #63	; 0x3f
    ad22:	4805      	ldr	r0, [pc, #20]	; (ad38 <extint_detection_callback+0x34>)
    ad24:	4c05      	ldr	r4, [pc, #20]	; (ad3c <extint_detection_callback+0x38>)
    ad26:	47a0      	blx	r4
	isPressed = true;
    ad28:	2201      	movs	r2, #1
    ad2a:	4b05      	ldr	r3, [pc, #20]	; (ad40 <extint_detection_callback+0x3c>)
    ad2c:	701a      	strb	r2, [r3, #0]
	
}
    ad2e:	bd10      	pop	{r4, pc}
    ad30:	2000014c 	.word	0x2000014c
    ad34:	0000ec40 	.word	0x0000ec40
    ad38:	20000010 	.word	0x20000010
    ad3c:	0000c111 	.word	0x0000c111
    ad40:	20000aac 	.word	0x20000aac

0000ad44 <socket_resolve_handler>:
{
    ad44:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    ad46:	4b01      	ldr	r3, [pc, #4]	; (ad4c <socket_resolve_handler+0x8>)
    ad48:	4798      	blx	r3
}
    ad4a:	bd10      	pop	{r4, pc}
    ad4c:	0000906d 	.word	0x0000906d

0000ad50 <socket_event_handler>:
{
    ad50:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    ad52:	4b01      	ldr	r3, [pc, #4]	; (ad58 <socket_event_handler+0x8>)
    ad54:	4798      	blx	r3
}
    ad56:	bd10      	pop	{r4, pc}
    ad58:	00009061 	.word	0x00009061

0000ad5c <resolve_cb>:
{
    ad5c:	b570      	push	{r4, r5, r6, lr}
    ad5e:	b082      	sub	sp, #8
    ad60:	0005      	movs	r5, r0
    ad62:	000c      	movs	r4, r1
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    ad64:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    ad66:	21ff      	movs	r1, #255	; 0xff
    ad68:	400b      	ands	r3, r1
    ad6a:	000a      	movs	r2, r1
    ad6c:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    ad6e:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    ad70:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    ad72:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    ad74:	4001      	ands	r1, r0
    ad76:	9100      	str	r1, [sp, #0]
    ad78:	0029      	movs	r1, r5
    ad7a:	4804      	ldr	r0, [pc, #16]	; (ad8c <resolve_cb+0x30>)
    ad7c:	4e04      	ldr	r6, [pc, #16]	; (ad90 <resolve_cb+0x34>)
    ad7e:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    ad80:	0021      	movs	r1, r4
    ad82:	0028      	movs	r0, r5
    ad84:	4b03      	ldr	r3, [pc, #12]	; (ad94 <resolve_cb+0x38>)
    ad86:	4798      	blx	r3
}
    ad88:	b002      	add	sp, #8
    ad8a:	bd70      	pop	{r4, r5, r6, pc}
    ad8c:	0000f178 	.word	0x0000f178
    ad90:	0000be51 	.word	0x0000be51
    ad94:	00009c61 	.word	0x00009c61

0000ad98 <socket_cb>:
{
    ad98:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    ad9a:	4b01      	ldr	r3, [pc, #4]	; (ada0 <socket_cb+0x8>)
    ad9c:	4798      	blx	r3
}
    ad9e:	bd10      	pop	{r4, pc}
    ada0:	0000a88d 	.word	0x0000a88d

0000ada4 <start_download>:
{
    ada4:	b510      	push	{r4, lr}
    ada6:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    ada8:	4b12      	ldr	r3, [pc, #72]	; (adf4 <start_download+0x50>)
    adaa:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    adac:	07da      	lsls	r2, r3, #31
    adae:	d511      	bpl.n	add4 <start_download+0x30>
	if (!is_state_set(WIFI_CONNECTED)) {
    adb0:	079a      	lsls	r2, r3, #30
    adb2:	d513      	bpl.n	addc <start_download+0x38>
	if (is_state_set(GET_REQUESTED)) {
    adb4:	075a      	lsls	r2, r3, #29
    adb6:	d415      	bmi.n	ade4 <start_download+0x40>
	if (is_state_set(DOWNLOADING)) {
    adb8:	071b      	lsls	r3, r3, #28
    adba:	d417      	bmi.n	adec <start_download+0x48>
	printf("start_download: sending HTTP request...\r\n");
    adbc:	480e      	ldr	r0, [pc, #56]	; (adf8 <start_download+0x54>)
    adbe:	4b0f      	ldr	r3, [pc, #60]	; (adfc <start_download+0x58>)
    adc0:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    adc2:	2300      	movs	r3, #0
    adc4:	9300      	str	r3, [sp, #0]
    adc6:	2201      	movs	r2, #1
    adc8:	490d      	ldr	r1, [pc, #52]	; (ae00 <start_download+0x5c>)
    adca:	480e      	ldr	r0, [pc, #56]	; (ae04 <start_download+0x60>)
    adcc:	4c0e      	ldr	r4, [pc, #56]	; (ae08 <start_download+0x64>)
    adce:	47a0      	blx	r4
}
    add0:	b002      	add	sp, #8
    add2:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
    add4:	480d      	ldr	r0, [pc, #52]	; (ae0c <start_download+0x68>)
    add6:	4b09      	ldr	r3, [pc, #36]	; (adfc <start_download+0x58>)
    add8:	4798      	blx	r3
		return;
    adda:	e7f9      	b.n	add0 <start_download+0x2c>
		printf("start_download: Wi-Fi is not connected.\r\n");
    addc:	480c      	ldr	r0, [pc, #48]	; (ae10 <start_download+0x6c>)
    adde:	4b07      	ldr	r3, [pc, #28]	; (adfc <start_download+0x58>)
    ade0:	4798      	blx	r3
		return;
    ade2:	e7f5      	b.n	add0 <start_download+0x2c>
		printf("start_download: request is sent already.\r\n");
    ade4:	480b      	ldr	r0, [pc, #44]	; (ae14 <start_download+0x70>)
    ade6:	4b05      	ldr	r3, [pc, #20]	; (adfc <start_download+0x58>)
    ade8:	4798      	blx	r3
		return;
    adea:	e7f1      	b.n	add0 <start_download+0x2c>
		printf("start_download: running download already.\r\n");
    adec:	480a      	ldr	r0, [pc, #40]	; (ae18 <start_download+0x74>)
    adee:	4b03      	ldr	r3, [pc, #12]	; (adfc <start_download+0x58>)
    adf0:	4798      	blx	r3
		return;
    adf2:	e7ed      	b.n	add0 <start_download+0x2c>
    adf4:	20000851 	.word	0x20000851
    adf8:	0000f254 	.word	0x0000f254
    adfc:	0000bf6d 	.word	0x0000bf6d
    ae00:	0000f280 	.word	0x0000f280
    ae04:	2000130c 	.word	0x2000130c
    ae08:	0000a191 	.word	0x0000a191
    ae0c:	0000f1a8 	.word	0x0000f1a8
    ae10:	0000f1d0 	.word	0x0000f1d0
    ae14:	0000f1fc 	.word	0x0000f1fc
    ae18:	0000f228 	.word	0x0000f228

0000ae1c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    ae1c:	b570      	push	{r4, r5, r6, lr}
    ae1e:	b082      	sub	sp, #8
    ae20:	0005      	movs	r5, r0
    ae22:	000e      	movs	r6, r1
	uint16_t temp = 0;
    ae24:	2200      	movs	r2, #0
    ae26:	466b      	mov	r3, sp
    ae28:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    ae2a:	4c06      	ldr	r4, [pc, #24]	; (ae44 <usart_serial_getchar+0x28>)
    ae2c:	466b      	mov	r3, sp
    ae2e:	1d99      	adds	r1, r3, #6
    ae30:	0028      	movs	r0, r5
    ae32:	47a0      	blx	r4
    ae34:	2800      	cmp	r0, #0
    ae36:	d1f9      	bne.n	ae2c <usart_serial_getchar+0x10>

	*c = temp;
    ae38:	466b      	mov	r3, sp
    ae3a:	3306      	adds	r3, #6
    ae3c:	881b      	ldrh	r3, [r3, #0]
    ae3e:	7033      	strb	r3, [r6, #0]
}
    ae40:	b002      	add	sp, #8
    ae42:	bd70      	pop	{r4, r5, r6, pc}
    ae44:	00005809 	.word	0x00005809

0000ae48 <usart_serial_putchar>:
{
    ae48:	b570      	push	{r4, r5, r6, lr}
    ae4a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    ae4c:	b28c      	uxth	r4, r1
    ae4e:	4e03      	ldr	r6, [pc, #12]	; (ae5c <usart_serial_putchar+0x14>)
    ae50:	0021      	movs	r1, r4
    ae52:	0028      	movs	r0, r5
    ae54:	47b0      	blx	r6
    ae56:	2800      	cmp	r0, #0
    ae58:	d1fa      	bne.n	ae50 <usart_serial_putchar+0x8>
}
    ae5a:	bd70      	pop	{r4, r5, r6, pc}
    ae5c:	000057dd 	.word	0x000057dd

0000ae60 <mqtt_callback>:
{
    ae60:	b570      	push	{r4, r5, r6, lr}
    ae62:	b086      	sub	sp, #24
    ae64:	0004      	movs	r4, r0
	switch (type) {
    ae66:	2901      	cmp	r1, #1
    ae68:	d02c      	beq.n	aec4 <mqtt_callback+0x64>
    ae6a:	2905      	cmp	r1, #5
    ae6c:	d040      	beq.n	aef0 <mqtt_callback+0x90>
    ae6e:	2900      	cmp	r1, #0
    ae70:	d001      	beq.n	ae76 <mqtt_callback+0x16>
}
    ae72:	b006      	add	sp, #24
    ae74:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
    ae76:	6813      	ldr	r3, [r2, #0]
    ae78:	2b00      	cmp	r3, #0
    ae7a:	db19      	blt.n	aeb0 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
    ae7c:	4821      	ldr	r0, [pc, #132]	; (af04 <mqtt_callback+0xa4>)
    ae7e:	4b22      	ldr	r3, [pc, #136]	; (af08 <mqtt_callback+0xa8>)
    ae80:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
    ae82:	4a22      	ldr	r2, [pc, #136]	; (af0c <mqtt_callback+0xac>)
    ae84:	2300      	movs	r3, #0
    ae86:	9305      	str	r3, [sp, #20]
    ae88:	9304      	str	r3, [sp, #16]
    ae8a:	9303      	str	r3, [sp, #12]
    ae8c:	9302      	str	r3, [sp, #8]
    ae8e:	9301      	str	r3, [sp, #4]
    ae90:	9200      	str	r2, [sp, #0]
    ae92:	4b1f      	ldr	r3, [pc, #124]	; (af10 <mqtt_callback+0xb0>)
    ae94:	2101      	movs	r1, #1
    ae96:	0020      	movs	r0, r4
    ae98:	4c1e      	ldr	r4, [pc, #120]	; (af14 <mqtt_callback+0xb4>)
    ae9a:	47a0      	blx	r4
    ae9c:	2800      	cmp	r0, #0
    ae9e:	d003      	beq.n	aea8 <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
    aea0:	481d      	ldr	r0, [pc, #116]	; (af18 <mqtt_callback+0xb8>)
    aea2:	4b1e      	ldr	r3, [pc, #120]	; (af1c <mqtt_callback+0xbc>)
    aea4:	4798      	blx	r3
    aea6:	e7e4      	b.n	ae72 <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
    aea8:	481d      	ldr	r0, [pc, #116]	; (af20 <mqtt_callback+0xc0>)
    aeaa:	4b1c      	ldr	r3, [pc, #112]	; (af1c <mqtt_callback+0xbc>)
    aeac:	4798      	blx	r3
    aeae:	e7e0      	b.n	ae72 <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    aeb0:	4d1c      	ldr	r5, [pc, #112]	; (af24 <mqtt_callback+0xc4>)
    aeb2:	0029      	movs	r1, r5
    aeb4:	481c      	ldr	r0, [pc, #112]	; (af28 <mqtt_callback+0xc8>)
    aeb6:	4b14      	ldr	r3, [pc, #80]	; (af08 <mqtt_callback+0xa8>)
    aeb8:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    aeba:	0029      	movs	r1, r5
    aebc:	0020      	movs	r0, r4
    aebe:	4b1b      	ldr	r3, [pc, #108]	; (af2c <mqtt_callback+0xcc>)
    aec0:	4798      	blx	r3
    aec2:	e7d6      	b.n	ae72 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    aec4:	7811      	ldrb	r1, [r2, #0]
    aec6:	2900      	cmp	r1, #0
    aec8:	d10e      	bne.n	aee8 <mqtt_callback+0x88>
			mqtt_subscribe(module_inst, TEMPERATURE_TOPIC, 2, SubscribeHandler);
    aeca:	4e19      	ldr	r6, [pc, #100]	; (af30 <mqtt_callback+0xd0>)
    aecc:	0033      	movs	r3, r6
    aece:	2202      	movs	r2, #2
    aed0:	4918      	ldr	r1, [pc, #96]	; (af34 <mqtt_callback+0xd4>)
    aed2:	4d19      	ldr	r5, [pc, #100]	; (af38 <mqtt_callback+0xd8>)
    aed4:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
    aed6:	0033      	movs	r3, r6
    aed8:	2202      	movs	r2, #2
    aeda:	4918      	ldr	r1, [pc, #96]	; (af3c <mqtt_callback+0xdc>)
    aedc:	0020      	movs	r0, r4
    aede:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
    aee0:	4817      	ldr	r0, [pc, #92]	; (af40 <mqtt_callback+0xe0>)
    aee2:	4b0e      	ldr	r3, [pc, #56]	; (af1c <mqtt_callback+0xbc>)
    aee4:	4798      	blx	r3
    aee6:	e7c4      	b.n	ae72 <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    aee8:	4816      	ldr	r0, [pc, #88]	; (af44 <mqtt_callback+0xe4>)
    aeea:	4b07      	ldr	r3, [pc, #28]	; (af08 <mqtt_callback+0xa8>)
    aeec:	4798      	blx	r3
    aeee:	e7c0      	b.n	ae72 <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
    aef0:	4815      	ldr	r0, [pc, #84]	; (af48 <mqtt_callback+0xe8>)
    aef2:	4b0a      	ldr	r3, [pc, #40]	; (af1c <mqtt_callback+0xbc>)
    aef4:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    aef6:	4915      	ldr	r1, [pc, #84]	; (af4c <mqtt_callback+0xec>)
    aef8:	2231      	movs	r2, #49	; 0x31
    aefa:	5c8b      	ldrb	r3, [r1, r2]
    aefc:	2002      	movs	r0, #2
    aefe:	4383      	bics	r3, r0
    af00:	548b      	strb	r3, [r1, r2]
}
    af02:	e7b6      	b.n	ae72 <mqtt_callback+0x12>
    af04:	0000f058 	.word	0x0000f058
    af08:	0000be51 	.word	0x0000be51
    af0c:	0000f084 	.word	0x0000f084
    af10:	0000f074 	.word	0x0000f074
    af14:	000090a5 	.word	0x000090a5
    af18:	0000f090 	.word	0x0000f090
    af1c:	0000bf6d 	.word	0x0000bf6d
    af20:	0000f0b8 	.word	0x0000f0b8
    af24:	0000f044 	.word	0x0000f044
    af28:	0000f0d4 	.word	0x0000f0d4
    af2c:	00009079 	.word	0x00009079
    af30:	0000ac7d 	.word	0x0000ac7d
    af34:	0000f10c 	.word	0x0000f10c
    af38:	000091a9 	.word	0x000091a9
    af3c:	0000ec28 	.word	0x0000ec28
    af40:	0000f118 	.word	0x0000f118
    af44:	0000f128 	.word	0x0000f128
    af48:	0000f15c 	.word	0x0000f15c
    af4c:	2000081c 	.word	0x2000081c

0000af50 <rename_to_unique>:
{
    af50:	b5f0      	push	{r4, r5, r6, r7, lr}
    af52:	46de      	mov	lr, fp
    af54:	b500      	push	{lr}
    af56:	b0c8      	sub	sp, #288	; 0x120
    af58:	0007      	movs	r7, r0
    af5a:	000e      	movs	r6, r1
    af5c:	9101      	str	r1, [sp, #4]
    af5e:	9203      	str	r2, [sp, #12]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    af60:	22fb      	movs	r2, #251	; 0xfb
    af62:	2100      	movs	r1, #0
    af64:	a809      	add	r0, sp, #36	; 0x24
    af66:	4d52      	ldr	r5, [pc, #328]	; (b0b0 <rename_to_unique+0x160>)
    af68:	47a8      	blx	r5
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    af6a:	2209      	movs	r2, #9
    af6c:	2100      	movs	r1, #0
    af6e:	a806      	add	r0, sp, #24
    af70:	47a8      	blx	r5
	char numbering[NUMBRING_MAX + 1] = {0};
    af72:	2300      	movs	r3, #0
    af74:	9305      	str	r3, [sp, #20]
	if (file_path_name == NULL) {
    af76:	2e00      	cmp	r6, #0
    af78:	d100      	bne.n	af7c <rename_to_unique+0x2c>
    af7a:	e090      	b.n	b09e <rename_to_unique+0x14e>
	if (fp == NULL || file_path_name == NULL) {
    af7c:	2f00      	cmp	r7, #0
    af7e:	d100      	bne.n	af82 <rename_to_unique+0x32>
    af80:	e08f      	b.n	b0a2 <rename_to_unique+0x152>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    af82:	4d4c      	ldr	r5, [pc, #304]	; (b0b4 <rename_to_unique+0x164>)
    af84:	2200      	movs	r2, #0
    af86:	0031      	movs	r1, r6
    af88:	0028      	movs	r0, r5
    af8a:	4b4b      	ldr	r3, [pc, #300]	; (b0b8 <rename_to_unique+0x168>)
    af8c:	4798      	blx	r3
    af8e:	0007      	movs	r7, r0
	f_close(&file_object);
    af90:	0028      	movs	r0, r5
    af92:	4b4a      	ldr	r3, [pc, #296]	; (b0bc <rename_to_unique+0x16c>)
    af94:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
    af96:	2f00      	cmp	r7, #0
    af98:	d000      	beq.n	af9c <rename_to_unique+0x4c>
    af9a:	e084      	b.n	b0a6 <rename_to_unique+0x156>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    af9c:	0030      	movs	r0, r6
    af9e:	4b48      	ldr	r3, [pc, #288]	; (b0c0 <rename_to_unique+0x170>)
    afa0:	4798      	blx	r3
    afa2:	0003      	movs	r3, r0
		return false;
    afa4:	2000      	movs	r0, #0
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    afa6:	2bfa      	cmp	r3, #250	; 0xfa
    afa8:	d87e      	bhi.n	b0a8 <rename_to_unique+0x158>
	p = strrchr(file_path_name, '.');
    afaa:	212e      	movs	r1, #46	; 0x2e
    afac:	0030      	movs	r0, r6
    afae:	4b45      	ldr	r3, [pc, #276]	; (b0c4 <rename_to_unique+0x174>)
    afb0:	4798      	blx	r3
    afb2:	1e05      	subs	r5, r0, #0
	if (p != NULL) {
    afb4:	d039      	beq.n	b02a <rename_to_unique+0xda>
		ext_len = strlen(p);
    afb6:	4b42      	ldr	r3, [pc, #264]	; (b0c0 <rename_to_unique+0x170>)
    afb8:	4798      	blx	r3
    afba:	0007      	movs	r7, r0
    afbc:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    afbe:	2c07      	cmp	r4, #7
    afc0:	d820      	bhi.n	b004 <rename_to_unique+0xb4>
			strcpy(ext, p);
    afc2:	0029      	movs	r1, r5
    afc4:	a806      	add	r0, sp, #24
    afc6:	4b40      	ldr	r3, [pc, #256]	; (b0c8 <rename_to_unique+0x178>)
    afc8:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    afca:	0030      	movs	r0, r6
    afcc:	4b3c      	ldr	r3, [pc, #240]	; (b0c0 <rename_to_unique+0x170>)
    afce:	4798      	blx	r3
    afd0:	043f      	lsls	r7, r7, #16
    afd2:	0c3f      	lsrs	r7, r7, #16
    afd4:	1bc7      	subs	r7, r0, r7
    afd6:	2ff6      	cmp	r7, #246	; 0xf6
    afd8:	d909      	bls.n	afee <rename_to_unique+0x9e>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    afda:	25f6      	movs	r5, #246	; 0xf6
    afdc:	1b2d      	subs	r5, r5, r4
    afde:	b2ad      	uxth	r5, r5
				strncpy(name, file_path_name, name_len);
    afe0:	002a      	movs	r2, r5
    afe2:	0031      	movs	r1, r6
    afe4:	a809      	add	r0, sp, #36	; 0x24
    afe6:	4b39      	ldr	r3, [pc, #228]	; (b0cc <rename_to_unique+0x17c>)
    afe8:	4798      	blx	r3
			valid_ext = true;
    afea:	2401      	movs	r4, #1
    afec:	e011      	b.n	b012 <rename_to_unique+0xc2>
				name_len = (p - file_path_name);
    afee:	9b01      	ldr	r3, [sp, #4]
    aff0:	1aea      	subs	r2, r5, r3
    aff2:	b295      	uxth	r5, r2
				strncpy(name, file_path_name, name_len);
    aff4:	0412      	lsls	r2, r2, #16
    aff6:	0c12      	lsrs	r2, r2, #16
    aff8:	0019      	movs	r1, r3
    affa:	a809      	add	r0, sp, #36	; 0x24
    affc:	4b33      	ldr	r3, [pc, #204]	; (b0cc <rename_to_unique+0x17c>)
    affe:	4798      	blx	r3
			valid_ext = true;
    b000:	2401      	movs	r4, #1
    b002:	e006      	b.n	b012 <rename_to_unique+0xc2>
			strncpy(name, file_path_name, name_len);
    b004:	22f6      	movs	r2, #246	; 0xf6
    b006:	9901      	ldr	r1, [sp, #4]
    b008:	a809      	add	r0, sp, #36	; 0x24
    b00a:	4b30      	ldr	r3, [pc, #192]	; (b0cc <rename_to_unique+0x17c>)
    b00c:	4798      	blx	r3
	bool valid_ext = false;
    b00e:	2400      	movs	r4, #0
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    b010:	25f6      	movs	r5, #246	; 0xf6
	name[name_len++] = '-';
    b012:	1c6e      	adds	r6, r5, #1
    b014:	b2b6      	uxth	r6, r6
    b016:	222d      	movs	r2, #45	; 0x2d
    b018:	ab09      	add	r3, sp, #36	; 0x24
    b01a:	555a      	strb	r2, [r3, r5]
    b01c:	2501      	movs	r5, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    b01e:	1cf3      	adds	r3, r6, #3
    b020:	aa09      	add	r2, sp, #36	; 0x24
    b022:	4694      	mov	ip, r2
    b024:	4463      	add	r3, ip
    b026:	9302      	str	r3, [sp, #8]
    b028:	e019      	b.n	b05e <rename_to_unique+0x10e>
		strncpy(name, file_path_name, name_len);
    b02a:	22f6      	movs	r2, #246	; 0xf6
    b02c:	9901      	ldr	r1, [sp, #4]
    b02e:	a809      	add	r0, sp, #36	; 0x24
    b030:	4b26      	ldr	r3, [pc, #152]	; (b0cc <rename_to_unique+0x17c>)
    b032:	4798      	blx	r3
	bool valid_ext = false;
    b034:	2400      	movs	r4, #0
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    b036:	25f6      	movs	r5, #246	; 0xf6
    b038:	e7eb      	b.n	b012 <rename_to_unique+0xc2>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    b03a:	4f1e      	ldr	r7, [pc, #120]	; (b0b4 <rename_to_unique+0x164>)
    b03c:	2200      	movs	r2, #0
    b03e:	a909      	add	r1, sp, #36	; 0x24
    b040:	0038      	movs	r0, r7
    b042:	4b1d      	ldr	r3, [pc, #116]	; (b0b8 <rename_to_unique+0x168>)
    b044:	4798      	blx	r3
    b046:	4683      	mov	fp, r0
	f_close(&file_object);
    b048:	0038      	movs	r0, r7
    b04a:	4b1c      	ldr	r3, [pc, #112]	; (b0bc <rename_to_unique+0x16c>)
    b04c:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
    b04e:	465b      	mov	r3, fp
    b050:	2b00      	cmp	r3, #0
    b052:	d116      	bne.n	b082 <rename_to_unique+0x132>
    b054:	3501      	adds	r5, #1
	for (i = 1; i < count; i++) {
    b056:	4b1e      	ldr	r3, [pc, #120]	; (b0d0 <rename_to_unique+0x180>)
    b058:	b2aa      	uxth	r2, r5
    b05a:	429a      	cmp	r2, r3
    b05c:	d81d      	bhi.n	b09a <rename_to_unique+0x14a>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    b05e:	002a      	movs	r2, r5
    b060:	491c      	ldr	r1, [pc, #112]	; (b0d4 <rename_to_unique+0x184>)
    b062:	a805      	add	r0, sp, #20
    b064:	4b1c      	ldr	r3, [pc, #112]	; (b0d8 <rename_to_unique+0x188>)
    b066:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
    b068:	ab09      	add	r3, sp, #36	; 0x24
    b06a:	1998      	adds	r0, r3, r6
    b06c:	2203      	movs	r2, #3
    b06e:	a905      	add	r1, sp, #20
    b070:	4b16      	ldr	r3, [pc, #88]	; (b0cc <rename_to_unique+0x17c>)
    b072:	4798      	blx	r3
		if (valid_ext) {
    b074:	2c00      	cmp	r4, #0
    b076:	d0e0      	beq.n	b03a <rename_to_unique+0xea>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    b078:	a906      	add	r1, sp, #24
    b07a:	9802      	ldr	r0, [sp, #8]
    b07c:	4b12      	ldr	r3, [pc, #72]	; (b0c8 <rename_to_unique+0x178>)
    b07e:	4798      	blx	r3
    b080:	e7db      	b.n	b03a <rename_to_unique+0xea>
			memset(file_path_name, 0, max_len);
    b082:	9a03      	ldr	r2, [sp, #12]
    b084:	2100      	movs	r1, #0
    b086:	9c01      	ldr	r4, [sp, #4]
    b088:	0020      	movs	r0, r4
    b08a:	4b09      	ldr	r3, [pc, #36]	; (b0b0 <rename_to_unique+0x160>)
    b08c:	4798      	blx	r3
			strcpy(file_path_name, name);
    b08e:	a909      	add	r1, sp, #36	; 0x24
    b090:	0020      	movs	r0, r4
    b092:	4b0d      	ldr	r3, [pc, #52]	; (b0c8 <rename_to_unique+0x178>)
    b094:	4798      	blx	r3
			return true;
    b096:	2001      	movs	r0, #1
    b098:	e006      	b.n	b0a8 <rename_to_unique+0x158>
	return false;
    b09a:	2000      	movs	r0, #0
    b09c:	e004      	b.n	b0a8 <rename_to_unique+0x158>
		return false;
    b09e:	2000      	movs	r0, #0
    b0a0:	e002      	b.n	b0a8 <rename_to_unique+0x158>
		return true;
    b0a2:	2001      	movs	r0, #1
    b0a4:	e000      	b.n	b0a8 <rename_to_unique+0x158>
    b0a6:	2001      	movs	r0, #1
}
    b0a8:	b048      	add	sp, #288	; 0x120
    b0aa:	bc04      	pop	{r2}
    b0ac:	4693      	mov	fp, r2
    b0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0b0:	0000bcef 	.word	0x0000bcef
    b0b4:	20000a84 	.word	0x20000a84
    b0b8:	00007fe1 	.word	0x00007fe1
    b0bc:	0000842d 	.word	0x0000842d
    b0c0:	0000c217 	.word	0x0000c217
    b0c4:	0000c271 	.word	0x0000c271
    b0c8:	0000c1cd 	.word	0x0000c1cd
    b0cc:	0000c247 	.word	0x0000c247
    b0d0:	000003e7 	.word	0x000003e7
    b0d4:	0000f170 	.word	0x0000f170
    b0d8:	0000c175 	.word	0x0000c175

0000b0dc <store_file_packet>:
{
    b0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b0de:	b083      	sub	sp, #12
    b0e0:	0005      	movs	r5, r0
    b0e2:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
    b0e4:	2800      	cmp	r0, #0
    b0e6:	d00c      	beq.n	b102 <store_file_packet+0x26>
    b0e8:	2900      	cmp	r1, #0
    b0ea:	d00a      	beq.n	b102 <store_file_packet+0x26>
	return ((down_state & mask) != 0);
    b0ec:	4b39      	ldr	r3, [pc, #228]	; (b1d4 <store_file_packet+0xf8>)
    b0ee:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
    b0f0:	071b      	lsls	r3, r3, #28
    b0f2:	d430      	bmi.n	b156 <store_file_packet+0x7a>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    b0f4:	4b38      	ldr	r3, [pc, #224]	; (b1d8 <store_file_packet+0xfc>)
    b0f6:	2230      	movs	r2, #48	; 0x30
    b0f8:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
    b0fa:	320a      	adds	r2, #10
    b0fc:	705a      	strb	r2, [r3, #1]
    b0fe:	4c37      	ldr	r4, [pc, #220]	; (b1dc <store_file_packet+0x100>)
    b100:	e005      	b.n	b10e <store_file_packet+0x32>
		printf("store_file_packet: empty data.\r\n");
    b102:	4837      	ldr	r0, [pc, #220]	; (b1e0 <store_file_packet+0x104>)
    b104:	4b37      	ldr	r3, [pc, #220]	; (b1e4 <store_file_packet+0x108>)
    b106:	4798      	blx	r3
}
    b108:	b003      	add	sp, #12
    b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
    b10c:	0004      	movs	r4, r0
    b10e:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
    b110:	7803      	ldrb	r3, [r0, #0]
    b112:	2b2f      	cmp	r3, #47	; 0x2f
    b114:	d1fa      	bne.n	b10c <store_file_packet+0x30>
		if (strlen(cp) > 1) {
    b116:	4b34      	ldr	r3, [pc, #208]	; (b1e8 <store_file_packet+0x10c>)
    b118:	4798      	blx	r3
    b11a:	2801      	cmp	r0, #1
    b11c:	d92f      	bls.n	b17e <store_file_packet+0xa2>
			strcpy(&save_file_name[2], cp);
    b11e:	4f2e      	ldr	r7, [pc, #184]	; (b1d8 <store_file_packet+0xfc>)
    b120:	1cb8      	adds	r0, r7, #2
    b122:	0021      	movs	r1, r4
    b124:	4b31      	ldr	r3, [pc, #196]	; (b1ec <store_file_packet+0x110>)
    b126:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    b128:	4c31      	ldr	r4, [pc, #196]	; (b1f0 <store_file_packet+0x114>)
    b12a:	22fa      	movs	r2, #250	; 0xfa
    b12c:	0039      	movs	r1, r7
    b12e:	0020      	movs	r0, r4
    b130:	4b30      	ldr	r3, [pc, #192]	; (b1f4 <store_file_packet+0x118>)
    b132:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
    b134:	0039      	movs	r1, r7
    b136:	4830      	ldr	r0, [pc, #192]	; (b1f8 <store_file_packet+0x11c>)
    b138:	4b30      	ldr	r3, [pc, #192]	; (b1fc <store_file_packet+0x120>)
    b13a:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    b13c:	220a      	movs	r2, #10
    b13e:	0039      	movs	r1, r7
    b140:	0020      	movs	r0, r4
    b142:	4b2f      	ldr	r3, [pc, #188]	; (b200 <store_file_packet+0x124>)
    b144:	4798      	blx	r3
		if (ret != FR_OK) {
    b146:	2800      	cmp	r0, #0
    b148:	d120      	bne.n	b18c <store_file_packet+0xb0>
		received_file_size = 0;
    b14a:	2200      	movs	r2, #0
    b14c:	4b2d      	ldr	r3, [pc, #180]	; (b204 <store_file_packet+0x128>)
    b14e:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
    b150:	2008      	movs	r0, #8
    b152:	4b2d      	ldr	r3, [pc, #180]	; (b208 <store_file_packet+0x12c>)
    b154:	4798      	blx	r3
		UINT wsize = 0;
    b156:	2300      	movs	r3, #0
    b158:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    b15a:	ab01      	add	r3, sp, #4
    b15c:	0032      	movs	r2, r6
    b15e:	0029      	movs	r1, r5
    b160:	4823      	ldr	r0, [pc, #140]	; (b1f0 <store_file_packet+0x114>)
    b162:	4c2a      	ldr	r4, [pc, #168]	; (b20c <store_file_packet+0x130>)
    b164:	47a0      	blx	r4
		if (ret != FR_OK) {
    b166:	2800      	cmp	r0, #0
    b168:	d015      	beq.n	b196 <store_file_packet+0xba>
			f_close(&file_object);
    b16a:	4821      	ldr	r0, [pc, #132]	; (b1f0 <store_file_packet+0x114>)
    b16c:	4b28      	ldr	r3, [pc, #160]	; (b210 <store_file_packet+0x134>)
    b16e:	4798      	blx	r3
			add_state(CANCELED);
    b170:	2020      	movs	r0, #32
    b172:	4b25      	ldr	r3, [pc, #148]	; (b208 <store_file_packet+0x12c>)
    b174:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
    b176:	4827      	ldr	r0, [pc, #156]	; (b214 <store_file_packet+0x138>)
    b178:	4b1a      	ldr	r3, [pc, #104]	; (b1e4 <store_file_packet+0x108>)
    b17a:	4798      	blx	r3
			return;
    b17c:	e7c4      	b.n	b108 <store_file_packet+0x2c>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
    b17e:	4826      	ldr	r0, [pc, #152]	; (b218 <store_file_packet+0x13c>)
    b180:	4b18      	ldr	r3, [pc, #96]	; (b1e4 <store_file_packet+0x108>)
    b182:	4798      	blx	r3
			add_state(CANCELED);
    b184:	2020      	movs	r0, #32
    b186:	4b20      	ldr	r3, [pc, #128]	; (b208 <store_file_packet+0x12c>)
    b188:	4798      	blx	r3
			return;
    b18a:	e7bd      	b.n	b108 <store_file_packet+0x2c>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
    b18c:	0001      	movs	r1, r0
    b18e:	4823      	ldr	r0, [pc, #140]	; (b21c <store_file_packet+0x140>)
    b190:	4b1a      	ldr	r3, [pc, #104]	; (b1fc <store_file_packet+0x120>)
    b192:	4798      	blx	r3
			return;
    b194:	e7b8      	b.n	b108 <store_file_packet+0x2c>
		received_file_size += wsize;
    b196:	4c1b      	ldr	r4, [pc, #108]	; (b204 <store_file_packet+0x128>)
    b198:	6823      	ldr	r3, [r4, #0]
    b19a:	9a01      	ldr	r2, [sp, #4]
    b19c:	4694      	mov	ip, r2
    b19e:	4463      	add	r3, ip
    b1a0:	0019      	movs	r1, r3
    b1a2:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    b1a4:	4d1e      	ldr	r5, [pc, #120]	; (b220 <store_file_packet+0x144>)
    b1a6:	682a      	ldr	r2, [r5, #0]
    b1a8:	481e      	ldr	r0, [pc, #120]	; (b224 <store_file_packet+0x148>)
    b1aa:	4b14      	ldr	r3, [pc, #80]	; (b1fc <store_file_packet+0x120>)
    b1ac:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
    b1ae:	6822      	ldr	r2, [r4, #0]
    b1b0:	682b      	ldr	r3, [r5, #0]
    b1b2:	429a      	cmp	r2, r3
    b1b4:	d3a8      	bcc.n	b108 <store_file_packet+0x2c>
			f_close(&file_object);
    b1b6:	480e      	ldr	r0, [pc, #56]	; (b1f0 <store_file_packet+0x114>)
    b1b8:	4b15      	ldr	r3, [pc, #84]	; (b210 <store_file_packet+0x134>)
    b1ba:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
    b1bc:	481a      	ldr	r0, [pc, #104]	; (b228 <store_file_packet+0x14c>)
    b1be:	4b09      	ldr	r3, [pc, #36]	; (b1e4 <store_file_packet+0x108>)
    b1c0:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    b1c2:	2280      	movs	r2, #128	; 0x80
    b1c4:	0412      	lsls	r2, r2, #16
    b1c6:	4b19      	ldr	r3, [pc, #100]	; (b22c <store_file_packet+0x150>)
    b1c8:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
    b1ca:	2010      	movs	r0, #16
    b1cc:	4b0e      	ldr	r3, [pc, #56]	; (b208 <store_file_packet+0x12c>)
    b1ce:	4798      	blx	r3
			return;
    b1d0:	e79a      	b.n	b108 <store_file_packet+0x2c>
    b1d2:	46c0      	nop			; (mov r8, r8)
    b1d4:	20000851 	.word	0x20000851
    b1d8:	20000050 	.word	0x20000050
    b1dc:	0000f2b0 	.word	0x0000f2b0
    b1e0:	0000f2b4 	.word	0x0000f2b4
    b1e4:	0000bf6d 	.word	0x0000bf6d
    b1e8:	0000c217 	.word	0x0000c217
    b1ec:	0000c1cd 	.word	0x0000c1cd
    b1f0:	20000a84 	.word	0x20000a84
    b1f4:	0000af51 	.word	0x0000af51
    b1f8:	0000f2d4 	.word	0x0000f2d4
    b1fc:	0000be51 	.word	0x0000be51
    b200:	00007fe1 	.word	0x00007fe1
    b204:	20000ee8 	.word	0x20000ee8
    b208:	0000ac6d 	.word	0x0000ac6d
    b20c:	00008169 	.word	0x00008169
    b210:	0000842d 	.word	0x0000842d
    b214:	0000f370 	.word	0x0000f370
    b218:	0000f2fc 	.word	0x0000f2fc
    b21c:	0000f33c 	.word	0x0000f33c
    b220:	20000aa8 	.word	0x20000aa8
    b224:	0000f3ac 	.word	0x0000f3ac
    b228:	0000f3e0 	.word	0x0000f3e0
    b22c:	41004400 	.word	0x41004400

0000b230 <http_client_callback>:
{
    b230:	b510      	push	{r4, lr}
    b232:	0014      	movs	r4, r2
	switch (type) {
    b234:	2904      	cmp	r1, #4
    b236:	d806      	bhi.n	b246 <http_client_callback+0x16>
    b238:	0089      	lsls	r1, r1, #2
    b23a:	4b2a      	ldr	r3, [pc, #168]	; (b2e4 <http_client_callback+0xb4>)
    b23c:	585b      	ldr	r3, [r3, r1]
    b23e:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    b240:	4829      	ldr	r0, [pc, #164]	; (b2e8 <http_client_callback+0xb8>)
    b242:	4b2a      	ldr	r3, [pc, #168]	; (b2ec <http_client_callback+0xbc>)
    b244:	4798      	blx	r3
}
    b246:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
    b248:	4829      	ldr	r0, [pc, #164]	; (b2f0 <http_client_callback+0xc0>)
    b24a:	4b28      	ldr	r3, [pc, #160]	; (b2ec <http_client_callback+0xbc>)
    b24c:	4798      	blx	r3
		add_state(GET_REQUESTED);
    b24e:	2004      	movs	r0, #4
    b250:	4b28      	ldr	r3, [pc, #160]	; (b2f4 <http_client_callback+0xc4>)
    b252:	4798      	blx	r3
		break;
    b254:	e7f7      	b.n	b246 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    b256:	8811      	ldrh	r1, [r2, #0]
    b258:	6852      	ldr	r2, [r2, #4]
    b25a:	4827      	ldr	r0, [pc, #156]	; (b2f8 <http_client_callback+0xc8>)
    b25c:	4b27      	ldr	r3, [pc, #156]	; (b2fc <http_client_callback+0xcc>)
    b25e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    b260:	8823      	ldrh	r3, [r4, #0]
    b262:	2bc8      	cmp	r3, #200	; 0xc8
    b264:	d10f      	bne.n	b286 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
    b266:	6861      	ldr	r1, [r4, #4]
    b268:	4b25      	ldr	r3, [pc, #148]	; (b300 <http_client_callback+0xd0>)
    b26a:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    b26c:	2200      	movs	r2, #0
    b26e:	4b25      	ldr	r3, [pc, #148]	; (b304 <http_client_callback+0xd4>)
    b270:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    b272:	4b25      	ldr	r3, [pc, #148]	; (b308 <http_client_callback+0xd8>)
    b274:	4299      	cmp	r1, r3
    b276:	d8e6      	bhi.n	b246 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    b278:	68a0      	ldr	r0, [r4, #8]
    b27a:	4b24      	ldr	r3, [pc, #144]	; (b30c <http_client_callback+0xdc>)
    b27c:	4798      	blx	r3
			add_state(COMPLETED);
    b27e:	2010      	movs	r0, #16
    b280:	4b1c      	ldr	r3, [pc, #112]	; (b2f4 <http_client_callback+0xc4>)
    b282:	4798      	blx	r3
    b284:	e7df      	b.n	b246 <http_client_callback+0x16>
			add_state(CANCELED);
    b286:	2020      	movs	r0, #32
    b288:	4b1a      	ldr	r3, [pc, #104]	; (b2f4 <http_client_callback+0xc4>)
    b28a:	4798      	blx	r3
			return;
    b28c:	e7db      	b.n	b246 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    b28e:	6811      	ldr	r1, [r2, #0]
    b290:	6850      	ldr	r0, [r2, #4]
    b292:	4b1e      	ldr	r3, [pc, #120]	; (b30c <http_client_callback+0xdc>)
    b294:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    b296:	7a23      	ldrb	r3, [r4, #8]
    b298:	2b00      	cmp	r3, #0
    b29a:	d0d4      	beq.n	b246 <http_client_callback+0x16>
			add_state(COMPLETED);
    b29c:	2010      	movs	r0, #16
    b29e:	4b15      	ldr	r3, [pc, #84]	; (b2f4 <http_client_callback+0xc4>)
    b2a0:	4798      	blx	r3
    b2a2:	e7d0      	b.n	b246 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    b2a4:	6811      	ldr	r1, [r2, #0]
    b2a6:	481a      	ldr	r0, [pc, #104]	; (b310 <http_client_callback+0xe0>)
    b2a8:	4b14      	ldr	r3, [pc, #80]	; (b2fc <http_client_callback+0xcc>)
    b2aa:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    b2ac:	6823      	ldr	r3, [r4, #0]
    b2ae:	330b      	adds	r3, #11
    b2b0:	d1c9      	bne.n	b246 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
    b2b2:	4b18      	ldr	r3, [pc, #96]	; (b314 <http_client_callback+0xe4>)
    b2b4:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    b2b6:	071b      	lsls	r3, r3, #28
    b2b8:	d406      	bmi.n	b2c8 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
    b2ba:	4b16      	ldr	r3, [pc, #88]	; (b314 <http_client_callback+0xe4>)
    b2bc:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    b2be:	075a      	lsls	r2, r3, #29
    b2c0:	d40b      	bmi.n	b2da <http_client_callback+0xaa>
			start_download();
    b2c2:	4b15      	ldr	r3, [pc, #84]	; (b318 <http_client_callback+0xe8>)
    b2c4:	4798      	blx	r3
    b2c6:	e7be      	b.n	b246 <http_client_callback+0x16>
				f_close(&file_object);
    b2c8:	4814      	ldr	r0, [pc, #80]	; (b31c <http_client_callback+0xec>)
    b2ca:	4b15      	ldr	r3, [pc, #84]	; (b320 <http_client_callback+0xf0>)
    b2cc:	4798      	blx	r3
	down_state &= ~mask;
    b2ce:	4a11      	ldr	r2, [pc, #68]	; (b314 <http_client_callback+0xe4>)
    b2d0:	7813      	ldrb	r3, [r2, #0]
    b2d2:	2108      	movs	r1, #8
    b2d4:	438b      	bics	r3, r1
    b2d6:	7013      	strb	r3, [r2, #0]
    b2d8:	e7ef      	b.n	b2ba <http_client_callback+0x8a>
    b2da:	2204      	movs	r2, #4
    b2dc:	4393      	bics	r3, r2
    b2de:	4a0d      	ldr	r2, [pc, #52]	; (b314 <http_client_callback+0xe4>)
    b2e0:	7013      	strb	r3, [r2, #0]
    b2e2:	e7ee      	b.n	b2c2 <http_client_callback+0x92>
    b2e4:	0000ebfc 	.word	0x0000ebfc
    b2e8:	0000ec54 	.word	0x0000ec54
    b2ec:	0000bf6d 	.word	0x0000bf6d
    b2f0:	0000ec8c 	.word	0x0000ec8c
    b2f4:	0000ac6d 	.word	0x0000ac6d
    b2f8:	0000ecb8 	.word	0x0000ecb8
    b2fc:	0000be51 	.word	0x0000be51
    b300:	20000aa8 	.word	0x20000aa8
    b304:	20000ee8 	.word	0x20000ee8
    b308:	000005a6 	.word	0x000005a6
    b30c:	0000b0dd 	.word	0x0000b0dd
    b310:	0000ecf4 	.word	0x0000ecf4
    b314:	20000851 	.word	0x20000851
    b318:	0000ada5 	.word	0x0000ada5
    b31c:	20000a84 	.word	0x20000a84
    b320:	0000842d 	.word	0x0000842d

0000b324 <wifi_cb>:
{
    b324:	b510      	push	{r4, lr}
    b326:	b082      	sub	sp, #8
	switch (u8MsgType) {
    b328:	282c      	cmp	r0, #44	; 0x2c
    b32a:	d003      	beq.n	b334 <wifi_cb+0x10>
    b32c:	2832      	cmp	r0, #50	; 0x32
    b32e:	d035      	beq.n	b39c <wifi_cb+0x78>
}
    b330:	b002      	add	sp, #8
    b332:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    b334:	780b      	ldrb	r3, [r1, #0]
    b336:	2b01      	cmp	r3, #1
    b338:	d01c      	beq.n	b374 <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    b33a:	2b00      	cmp	r3, #0
    b33c:	d1f8      	bne.n	b330 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    b33e:	4826      	ldr	r0, [pc, #152]	; (b3d8 <wifi_cb+0xb4>)
    b340:	4b26      	ldr	r3, [pc, #152]	; (b3dc <wifi_cb+0xb8>)
    b342:	4798      	blx	r3
	down_state &= ~mask;
    b344:	4a26      	ldr	r2, [pc, #152]	; (b3e0 <wifi_cb+0xbc>)
    b346:	7813      	ldrb	r3, [r2, #0]
    b348:	2102      	movs	r1, #2
    b34a:	438b      	bics	r3, r1
    b34c:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
    b34e:	071b      	lsls	r3, r3, #28
    b350:	d416      	bmi.n	b380 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
    b352:	4b23      	ldr	r3, [pc, #140]	; (b3e0 <wifi_cb+0xbc>)
    b354:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    b356:	075a      	lsls	r2, r3, #29
    b358:	d41b      	bmi.n	b392 <wifi_cb+0x6e>
			mqtt_disconnect(&mqtt_inst, 1);
    b35a:	2101      	movs	r1, #1
    b35c:	4821      	ldr	r0, [pc, #132]	; (b3e4 <wifi_cb+0xc0>)
    b35e:	4b22      	ldr	r3, [pc, #136]	; (b3e8 <wifi_cb+0xc4>)
    b360:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    b362:	23ff      	movs	r3, #255	; 0xff
    b364:	9300      	str	r3, [sp, #0]
    b366:	4b21      	ldr	r3, [pc, #132]	; (b3ec <wifi_cb+0xc8>)
    b368:	2202      	movs	r2, #2
    b36a:	2112      	movs	r1, #18
    b36c:	4820      	ldr	r0, [pc, #128]	; (b3f0 <wifi_cb+0xcc>)
    b36e:	4c21      	ldr	r4, [pc, #132]	; (b3f4 <wifi_cb+0xd0>)
    b370:	47a0      	blx	r4
    b372:	e7dd      	b.n	b330 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    b374:	4820      	ldr	r0, [pc, #128]	; (b3f8 <wifi_cb+0xd4>)
    b376:	4b19      	ldr	r3, [pc, #100]	; (b3dc <wifi_cb+0xb8>)
    b378:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    b37a:	4b20      	ldr	r3, [pc, #128]	; (b3fc <wifi_cb+0xd8>)
    b37c:	4798      	blx	r3
    b37e:	e7d7      	b.n	b330 <wifi_cb+0xc>
				f_close(&file_object);
    b380:	481f      	ldr	r0, [pc, #124]	; (b400 <wifi_cb+0xdc>)
    b382:	4b20      	ldr	r3, [pc, #128]	; (b404 <wifi_cb+0xe0>)
    b384:	4798      	blx	r3
	down_state &= ~mask;
    b386:	4a16      	ldr	r2, [pc, #88]	; (b3e0 <wifi_cb+0xbc>)
    b388:	7813      	ldrb	r3, [r2, #0]
    b38a:	2108      	movs	r1, #8
    b38c:	438b      	bics	r3, r1
    b38e:	7013      	strb	r3, [r2, #0]
    b390:	e7df      	b.n	b352 <wifi_cb+0x2e>
    b392:	2204      	movs	r2, #4
    b394:	4393      	bics	r3, r2
    b396:	4a12      	ldr	r2, [pc, #72]	; (b3e0 <wifi_cb+0xbc>)
    b398:	7013      	strb	r3, [r2, #0]
    b39a:	e7de      	b.n	b35a <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    b39c:	788b      	ldrb	r3, [r1, #2]
    b39e:	784a      	ldrb	r2, [r1, #1]
    b3a0:	7808      	ldrb	r0, [r1, #0]
    b3a2:	78c9      	ldrb	r1, [r1, #3]
    b3a4:	9100      	str	r1, [sp, #0]
    b3a6:	0001      	movs	r1, r0
    b3a8:	4817      	ldr	r0, [pc, #92]	; (b408 <wifi_cb+0xe4>)
    b3aa:	4c18      	ldr	r4, [pc, #96]	; (b40c <wifi_cb+0xe8>)
    b3ac:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    b3ae:	2002      	movs	r0, #2
    b3b0:	4b17      	ldr	r3, [pc, #92]	; (b410 <wifi_cb+0xec>)
    b3b2:	4798      	blx	r3
		if(do_download_flag == 1)
    b3b4:	4b17      	ldr	r3, [pc, #92]	; (b414 <wifi_cb+0xf0>)
    b3b6:	781b      	ldrb	r3, [r3, #0]
    b3b8:	2b01      	cmp	r3, #1
    b3ba:	d009      	beq.n	b3d0 <wifi_cb+0xac>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
    b3bc:	4916      	ldr	r1, [pc, #88]	; (b418 <wifi_cb+0xf4>)
    b3be:	4809      	ldr	r0, [pc, #36]	; (b3e4 <wifi_cb+0xc0>)
    b3c0:	4b16      	ldr	r3, [pc, #88]	; (b41c <wifi_cb+0xf8>)
    b3c2:	4798      	blx	r3
    b3c4:	2800      	cmp	r0, #0
    b3c6:	d0b3      	beq.n	b330 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
    b3c8:	4815      	ldr	r0, [pc, #84]	; (b420 <wifi_cb+0xfc>)
    b3ca:	4b04      	ldr	r3, [pc, #16]	; (b3dc <wifi_cb+0xb8>)
    b3cc:	4798      	blx	r3
}
    b3ce:	e7af      	b.n	b330 <wifi_cb+0xc>
			start_download();
    b3d0:	4b14      	ldr	r3, [pc, #80]	; (b424 <wifi_cb+0x100>)
    b3d2:	4798      	blx	r3
    b3d4:	e7ac      	b.n	b330 <wifi_cb+0xc>
    b3d6:	46c0      	nop			; (mov r8, r8)
    b3d8:	0000f434 	.word	0x0000f434
    b3dc:	0000bf6d 	.word	0x0000bf6d
    b3e0:	20000851 	.word	0x20000851
    b3e4:	20000ab0 	.word	0x20000ab0
    b3e8:	0000913d 	.word	0x0000913d
    b3ec:	0000f454 	.word	0x0000f454
    b3f0:	0000f464 	.word	0x0000f464
    b3f4:	0000259d 	.word	0x0000259d
    b3f8:	0000f414 	.word	0x0000f414
    b3fc:	000025b9 	.word	0x000025b9
    b400:	20000a84 	.word	0x20000a84
    b404:	0000842d 	.word	0x0000842d
    b408:	0000f478 	.word	0x0000f478
    b40c:	0000be51 	.word	0x0000be51
    b410:	0000ac6d 	.word	0x0000ac6d
    b414:	20000850 	.word	0x20000850
    b418:	0000f044 	.word	0x0000f044
    b41c:	00009079 	.word	0x00009079
    b420:	0000f4a0 	.word	0x0000f4a0
    b424:	0000ada5 	.word	0x0000ada5

0000b428 <configure_extint_channel>:
{
    b428:	b510      	push	{r4, lr}
    b42a:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
    b42c:	ac01      	add	r4, sp, #4
    b42e:	0020      	movs	r0, r4
    b430:	4b07      	ldr	r3, [pc, #28]	; (b450 <configure_extint_channel+0x28>)
    b432:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    b434:	2337      	movs	r3, #55	; 0x37
    b436:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    b438:	2300      	movs	r3, #0
    b43a:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    b43c:	3301      	adds	r3, #1
    b43e:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    b440:	3301      	adds	r3, #1
    b442:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    b444:	0021      	movs	r1, r4
    b446:	2007      	movs	r0, #7
    b448:	4b02      	ldr	r3, [pc, #8]	; (b454 <configure_extint_channel+0x2c>)
    b44a:	4798      	blx	r3
}
    b44c:	b004      	add	sp, #16
    b44e:	bd10      	pop	{r4, pc}
    b450:	00004675 	.word	0x00004675
    b454:	00004689 	.word	0x00004689

0000b458 <configure_extint_callbacks>:
{
    b458:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
    b45a:	2200      	movs	r2, #0
    b45c:	2107      	movs	r1, #7
    b45e:	4804      	ldr	r0, [pc, #16]	; (b470 <configure_extint_callbacks+0x18>)
    b460:	4b04      	ldr	r3, [pc, #16]	; (b474 <configure_extint_callbacks+0x1c>)
    b462:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    b464:	2100      	movs	r1, #0
    b466:	2007      	movs	r0, #7
    b468:	4b03      	ldr	r3, [pc, #12]	; (b478 <configure_extint_callbacks+0x20>)
    b46a:	4798      	blx	r3
}
    b46c:	bd10      	pop	{r4, pc}
    b46e:	46c0      	nop			; (mov r8, r8)
    b470:	0000ad05 	.word	0x0000ad05
    b474:	00004531 	.word	0x00004531
    b478:	0000455d 	.word	0x0000455d

0000b47c <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    b47c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b47e:	b099      	sub	sp, #100	; 0x64
	down_state = NOT_READY;
    b480:	2400      	movs	r4, #0
    b482:	2600      	movs	r6, #0
    b484:	4bbd      	ldr	r3, [pc, #756]	; (b77c <main+0x300>)
    b486:	701c      	strb	r4, [r3, #0]
	/** INITIALIZATING THE BOARD AND PERIPHERALS */
	tstrWifiInitParam param;
	int8_t ret;
	init_state();
	
	system_init();						/* Initialize the board. */	
    b488:	4bbd      	ldr	r3, [pc, #756]	; (b780 <main+0x304>)
    b48a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    b48c:	aa02      	add	r2, sp, #8
    b48e:	2380      	movs	r3, #128	; 0x80
    b490:	05db      	lsls	r3, r3, #23
    b492:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b494:	6054      	str	r4, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    b496:	23ff      	movs	r3, #255	; 0xff
    b498:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    b49a:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b49c:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    b49e:	2501      	movs	r5, #1
    b4a0:	3bdb      	subs	r3, #219	; 0xdb
    b4a2:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    b4a4:	3301      	adds	r3, #1
    b4a6:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    b4a8:	3301      	adds	r3, #1
    b4aa:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    b4ac:	3301      	adds	r3, #1
    b4ae:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    b4b0:	6294      	str	r4, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    b4b2:	3305      	adds	r3, #5
    b4b4:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    b4b6:	3301      	adds	r3, #1
    b4b8:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b4ba:	6154      	str	r4, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b4bc:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    b4be:	2300      	movs	r3, #0
    b4c0:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    b4c2:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    b4c4:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    b4c6:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    b4c8:	2313      	movs	r3, #19
    b4ca:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    b4cc:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b4ce:	23c4      	movs	r3, #196	; 0xc4
    b4d0:	039b      	lsls	r3, r3, #14
    b4d2:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b4d4:	2301      	movs	r3, #1
    b4d6:	425b      	negs	r3, r3
    b4d8:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b4da:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    b4dc:	4ba9      	ldr	r3, [pc, #676]	; (b784 <main+0x308>)
    b4de:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    b4e0:	4ba9      	ldr	r3, [pc, #676]	; (b788 <main+0x30c>)
    b4e2:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    b4e4:	23e1      	movs	r3, #225	; 0xe1
    b4e6:	025b      	lsls	r3, r3, #9
    b4e8:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    b4ea:	4ca8      	ldr	r4, [pc, #672]	; (b78c <main+0x310>)
    b4ec:	4ba8      	ldr	r3, [pc, #672]	; (b790 <main+0x314>)
    b4ee:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    b4f0:	49a8      	ldr	r1, [pc, #672]	; (b794 <main+0x318>)
    b4f2:	4ba9      	ldr	r3, [pc, #676]	; (b798 <main+0x31c>)
    b4f4:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    b4f6:	49a9      	ldr	r1, [pc, #676]	; (b79c <main+0x320>)
    b4f8:	4ba9      	ldr	r3, [pc, #676]	; (b7a0 <main+0x324>)
    b4fa:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    b4fc:	49a9      	ldr	r1, [pc, #676]	; (b7a4 <main+0x328>)
    b4fe:	0020      	movs	r0, r4
    b500:	4ba9      	ldr	r3, [pc, #676]	; (b7a8 <main+0x32c>)
    b502:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    b504:	4fa9      	ldr	r7, [pc, #676]	; (b7ac <main+0x330>)
    b506:	683b      	ldr	r3, [r7, #0]
    b508:	6898      	ldr	r0, [r3, #8]
    b50a:	2100      	movs	r1, #0
    b50c:	4ea8      	ldr	r6, [pc, #672]	; (b7b0 <main+0x334>)
    b50e:	47b0      	blx	r6
	setbuf(stdin, NULL);
    b510:	683b      	ldr	r3, [r7, #0]
    b512:	6858      	ldr	r0, [r3, #4]
    b514:	2100      	movs	r1, #0
    b516:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    b518:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b51a:	0030      	movs	r0, r6
    b51c:	4ba5      	ldr	r3, [pc, #660]	; (b7b4 <main+0x338>)
    b51e:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b520:	231f      	movs	r3, #31
    b522:	4018      	ands	r0, r3
    b524:	4085      	lsls	r5, r0
    b526:	4ba4      	ldr	r3, [pc, #656]	; (b7b8 <main+0x33c>)
    b528:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b52a:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    b52c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    b52e:	2a00      	cmp	r2, #0
    b530:	d1fc      	bne.n	b52c <main+0xb0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b532:	6833      	ldr	r3, [r6, #0]
    b534:	3202      	adds	r2, #2
    b536:	4313      	orrs	r3, r2
    b538:	6033      	str	r3, [r6, #0]
	configure_console();				/* Initialize the UART console. */
	
	printf(STRING_HEADER);
    b53a:	48a0      	ldr	r0, [pc, #640]	; (b7bc <main+0x340>)
    b53c:	4ca0      	ldr	r4, [pc, #640]	; (b7c0 <main+0x344>)
    b53e:	47a0      	blx	r4
	printf("\r\nInitializing Board ...... \r\n\r\n");
    b540:	48a0      	ldr	r0, [pc, #640]	; (b7c4 <main+0x348>)
    b542:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
    b544:	a802      	add	r0, sp, #8
    b546:	4ba0      	ldr	r3, [pc, #640]	; (b7c8 <main+0x34c>)
    b548:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    b54a:	4ca0      	ldr	r4, [pc, #640]	; (b7cc <main+0x350>)
    b54c:	a902      	add	r1, sp, #8
    b54e:	0020      	movs	r0, r4
    b550:	4b9f      	ldr	r3, [pc, #636]	; (b7d0 <main+0x354>)
    b552:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    b554:	0020      	movs	r0, r4
    b556:	4b9f      	ldr	r3, [pc, #636]	; (b7d4 <main+0x358>)
    b558:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
    b55a:	a802      	add	r0, sp, #8
    b55c:	4b9e      	ldr	r3, [pc, #632]	; (b7d8 <main+0x35c>)
    b55e:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    b560:	4b9e      	ldr	r3, [pc, #632]	; (b7dc <main+0x360>)
    b562:	9306      	str	r3, [sp, #24]
	httpc_conf.timer_inst = &swt_module_inst;
    b564:	9403      	str	r4, [sp, #12]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    b566:	a902      	add	r1, sp, #8
    b568:	489d      	ldr	r0, [pc, #628]	; (b7e0 <main+0x364>)
    b56a:	4b9e      	ldr	r3, [pc, #632]	; (b7e4 <main+0x368>)
    b56c:	4798      	blx	r3
    b56e:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    b570:	db23      	blt.n	b5ba <main+0x13e>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    b572:	499d      	ldr	r1, [pc, #628]	; (b7e8 <main+0x36c>)
    b574:	489a      	ldr	r0, [pc, #616]	; (b7e0 <main+0x364>)
    b576:	4b9d      	ldr	r3, [pc, #628]	; (b7ec <main+0x370>)
    b578:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    b57a:	ac02      	add	r4, sp, #8
    b57c:	0020      	movs	r0, r4
    b57e:	4b9c      	ldr	r3, [pc, #624]	; (b7f0 <main+0x374>)
    b580:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
    b582:	4b9c      	ldr	r3, [pc, #624]	; (b7f4 <main+0x378>)
    b584:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    b586:	2380      	movs	r3, #128	; 0x80
    b588:	009b      	lsls	r3, r3, #2
    b58a:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
    b58c:	4a9a      	ldr	r2, [pc, #616]	; (b7f8 <main+0x37c>)
    b58e:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    b590:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
    b592:	4b9a      	ldr	r3, [pc, #616]	; (b7fc <main+0x380>)
    b594:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
    b596:	4b9a      	ldr	r3, [pc, #616]	; (b800 <main+0x384>)
    b598:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    b59a:	0021      	movs	r1, r4
    b59c:	4899      	ldr	r0, [pc, #612]	; (b804 <main+0x388>)
    b59e:	4b9a      	ldr	r3, [pc, #616]	; (b808 <main+0x38c>)
    b5a0:	4798      	blx	r3
    b5a2:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    b5a4:	db0d      	blt.n	b5c2 <main+0x146>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    b5a6:	4999      	ldr	r1, [pc, #612]	; (b80c <main+0x390>)
    b5a8:	4896      	ldr	r0, [pc, #600]	; (b804 <main+0x388>)
    b5aa:	4b99      	ldr	r3, [pc, #612]	; (b810 <main+0x394>)
    b5ac:	4798      	blx	r3
    b5ae:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    b5b0:	da0b      	bge.n	b5ca <main+0x14e>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    b5b2:	4898      	ldr	r0, [pc, #608]	; (b814 <main+0x398>)
    b5b4:	4b98      	ldr	r3, [pc, #608]	; (b818 <main+0x39c>)
    b5b6:	4798      	blx	r3
    b5b8:	e7fe      	b.n	b5b8 <main+0x13c>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    b5ba:	4898      	ldr	r0, [pc, #608]	; (b81c <main+0x3a0>)
    b5bc:	4b96      	ldr	r3, [pc, #600]	; (b818 <main+0x39c>)
    b5be:	4798      	blx	r3
    b5c0:	e7fe      	b.n	b5c0 <main+0x144>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    b5c2:	4897      	ldr	r0, [pc, #604]	; (b820 <main+0x3a4>)
    b5c4:	4b94      	ldr	r3, [pc, #592]	; (b818 <main+0x39c>)
    b5c6:	4798      	blx	r3
    b5c8:	e7fe      	b.n	b5c8 <main+0x14c>
	
	configure_timer();					/* Initialize the Timer. */	
	configure_http_client();			/* Initialize the HTTP client service. */
	configure_mqtt();					/* Initialize the MQTT service. */
	nm_bsp_init();						/* Initialize the BSP. */
    b5ca:	4b96      	ldr	r3, [pc, #600]	; (b824 <main+0x3a8>)
    b5cc:	4798      	blx	r3
	sd_mmc_init();
    b5ce:	4b96      	ldr	r3, [pc, #600]	; (b828 <main+0x3ac>)
    b5d0:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");
    b5d2:	4896      	ldr	r0, [pc, #600]	; (b82c <main+0x3b0>)
    b5d4:	4b7a      	ldr	r3, [pc, #488]	; (b7c0 <main+0x344>)
    b5d6:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
    b5d8:	4d95      	ldr	r5, [pc, #596]	; (b830 <main+0x3b4>)
				printf("init_storage: SD Card install failed.\r\n");
    b5da:	4c79      	ldr	r4, [pc, #484]	; (b7c0 <main+0x344>)
    b5dc:	e008      	b.n	b5f0 <main+0x174>
    b5de:	4895      	ldr	r0, [pc, #596]	; (b834 <main+0x3b8>)
    b5e0:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
    b5e2:	4895      	ldr	r0, [pc, #596]	; (b838 <main+0x3bc>)
    b5e4:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    b5e6:	4e95      	ldr	r6, [pc, #596]	; (b83c <main+0x3c0>)
    b5e8:	2000      	movs	r0, #0
    b5ea:	47b0      	blx	r6
    b5ec:	2802      	cmp	r0, #2
    b5ee:	d1fb      	bne.n	b5e8 <main+0x16c>
			status = sd_mmc_test_unit_ready(0);
    b5f0:	2000      	movs	r0, #0
    b5f2:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
    b5f4:	2801      	cmp	r0, #1
    b5f6:	d0f2      	beq.n	b5de <main+0x162>
		} while (CTRL_GOOD != status);
    b5f8:	2800      	cmp	r0, #0
    b5fa:	d1f9      	bne.n	b5f0 <main+0x174>
		printf("init_storage: mounting SD card...\r\n");
    b5fc:	4890      	ldr	r0, [pc, #576]	; (b840 <main+0x3c4>)
    b5fe:	4b70      	ldr	r3, [pc, #448]	; (b7c0 <main+0x344>)
    b600:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
    b602:	4c90      	ldr	r4, [pc, #576]	; (b844 <main+0x3c8>)
    b604:	228c      	movs	r2, #140	; 0x8c
    b606:	0092      	lsls	r2, r2, #2
    b608:	2100      	movs	r1, #0
    b60a:	0020      	movs	r0, r4
    b60c:	4b8e      	ldr	r3, [pc, #568]	; (b848 <main+0x3cc>)
    b60e:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    b610:	0021      	movs	r1, r4
    b612:	2000      	movs	r0, #0
    b614:	4b8d      	ldr	r3, [pc, #564]	; (b84c <main+0x3d0>)
    b616:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    b618:	280b      	cmp	r0, #11
    b61a:	d117      	bne.n	b64c <main+0x1d0>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
    b61c:	210b      	movs	r1, #11
    b61e:	488c      	ldr	r0, [pc, #560]	; (b850 <main+0x3d4>)
    b620:	4b7d      	ldr	r3, [pc, #500]	; (b818 <main+0x39c>)
    b622:	4798      	blx	r3
	init_storage();						/* Initialize SD/MMC storage. */
	
	configure_extint_channel();			/*Initialize BUTTON 0 as an external interrupt*/
    b624:	4b8b      	ldr	r3, [pc, #556]	; (b854 <main+0x3d8>)
    b626:	4798      	blx	r3
	configure_extint_callbacks();
    b628:	4b8b      	ldr	r3, [pc, #556]	; (b858 <main+0x3dc>)
    b62a:	4798      	blx	r3

	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));		/* Initialize Wi-Fi parameters structure. */
    b62c:	2218      	movs	r2, #24
    b62e:	2100      	movs	r1, #0
    b630:	a812      	add	r0, sp, #72	; 0x48
    b632:	4b85      	ldr	r3, [pc, #532]	; (b848 <main+0x3cc>)
    b634:	4798      	blx	r3

	param.pfAppWifiCb = wifi_cb;									/* Initialize Wi-Fi driver with data and status callbacks. */
    b636:	4b89      	ldr	r3, [pc, #548]	; (b85c <main+0x3e0>)
    b638:	9312      	str	r3, [sp, #72]	; 0x48
	ret = m2m_wifi_init(&param);
    b63a:	a812      	add	r0, sp, #72	; 0x48
    b63c:	4b88      	ldr	r3, [pc, #544]	; (b860 <main+0x3e4>)
    b63e:	4798      	blx	r3
    b640:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) 
    b642:	d00a      	beq.n	b65a <main+0x1de>
	{
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    b644:	4887      	ldr	r0, [pc, #540]	; (b864 <main+0x3e8>)
    b646:	4b74      	ldr	r3, [pc, #464]	; (b818 <main+0x39c>)
    b648:	4798      	blx	r3
    b64a:	e7fe      	b.n	b64a <main+0x1ce>
		printf("init_storage: SD card mount OK.\r\n");
    b64c:	4886      	ldr	r0, [pc, #536]	; (b868 <main+0x3ec>)
    b64e:	4b5c      	ldr	r3, [pc, #368]	; (b7c0 <main+0x344>)
    b650:	4798      	blx	r3
		add_state(STORAGE_READY);
    b652:	2001      	movs	r0, #1
    b654:	4b85      	ldr	r3, [pc, #532]	; (b86c <main+0x3f0>)
    b656:	4798      	blx	r3
    b658:	e7e4      	b.n	b624 <main+0x1a8>
    b65a:	2000      	movs	r0, #0
    b65c:	4b84      	ldr	r3, [pc, #528]	; (b870 <main+0x3f4>)
    b65e:	4798      	blx	r3
    b660:	4b84      	ldr	r3, [pc, #528]	; (b874 <main+0x3f8>)
    b662:	7a1b      	ldrb	r3, [r3, #8]
    b664:	b2db      	uxtb	r3, r3
    b666:	40d8      	lsrs	r0, r3
		while (1);
	}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
    b668:	21fa      	movs	r1, #250	; 0xfa
    b66a:	0089      	lsls	r1, r1, #2
    b66c:	4b82      	ldr	r3, [pc, #520]	; (b878 <main+0x3fc>)
    b66e:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    b670:	3801      	subs	r0, #1
    b672:	4b82      	ldr	r3, [pc, #520]	; (b87c <main+0x400>)
    b674:	4298      	cmp	r0, r3
    b676:	d87c      	bhi.n	b772 <main+0x2f6>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    b678:	4a81      	ldr	r2, [pc, #516]	; (b880 <main+0x404>)
    b67a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    b67c:	4881      	ldr	r0, [pc, #516]	; (b884 <main+0x408>)
    b67e:	6a03      	ldr	r3, [r0, #32]
    b680:	021b      	lsls	r3, r3, #8
    b682:	0a1b      	lsrs	r3, r3, #8
    b684:	21c0      	movs	r1, #192	; 0xc0
    b686:	0609      	lsls	r1, r1, #24
    b688:	430b      	orrs	r3, r1
    b68a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    b68c:	2300      	movs	r3, #0
    b68e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    b690:	3307      	adds	r3, #7
    b692:	6013      	str	r3, [r2, #0]
	{
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}

	printf("\n\r >> Board and peripherals initialized\n\r");
    b694:	487c      	ldr	r0, [pc, #496]	; (b888 <main+0x40c>)
    b696:	4c60      	ldr	r4, [pc, #384]	; (b818 <main+0x39c>)
    b698:	47a0      	blx	r4
	printf("\n\r");
    b69a:	487c      	ldr	r0, [pc, #496]	; (b88c <main+0x410>)
    b69c:	47a0      	blx	r4
	/** INITIALIZATION COMPLETE */	
	
	
	
	//DOWNLOAD A FILE
	do_download_flag = true;
    b69e:	2201      	movs	r2, #1
    b6a0:	4b7b      	ldr	r3, [pc, #492]	; (b890 <main+0x414>)
    b6a2:	701a      	strb	r2, [r3, #0]

	/* Initialize socket module. */
	socketInit();
    b6a4:	4b7b      	ldr	r3, [pc, #492]	; (b894 <main+0x418>)
    b6a6:	4798      	blx	r3
	/* Register socket callback function. */
	registerSocketCallback(socket_cb, resolve_cb);
    b6a8:	497b      	ldr	r1, [pc, #492]	; (b898 <main+0x41c>)
    b6aa:	487c      	ldr	r0, [pc, #496]	; (b89c <main+0x420>)
    b6ac:	4b7c      	ldr	r3, [pc, #496]	; (b8a0 <main+0x424>)
    b6ae:	4798      	blx	r3

	/* Connect to router. */
	printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    b6b0:	4d7c      	ldr	r5, [pc, #496]	; (b8a4 <main+0x428>)
    b6b2:	0029      	movs	r1, r5
    b6b4:	487c      	ldr	r0, [pc, #496]	; (b8a8 <main+0x42c>)
    b6b6:	47a0      	blx	r4
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    b6b8:	23ff      	movs	r3, #255	; 0xff
    b6ba:	9300      	str	r3, [sp, #0]
    b6bc:	4b7b      	ldr	r3, [pc, #492]	; (b8ac <main+0x430>)
    b6be:	2202      	movs	r2, #2
    b6c0:	2112      	movs	r1, #18
    b6c2:	0028      	movs	r0, r5
    b6c4:	4c7a      	ldr	r4, [pc, #488]	; (b8b0 <main+0x434>)
    b6c6:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    b6c8:	4b2c      	ldr	r3, [pc, #176]	; (b77c <main+0x300>)

	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    b6ca:	781b      	ldrb	r3, [r3, #0]
    b6cc:	2230      	movs	r2, #48	; 0x30
    b6ce:	421a      	tst	r2, r3
    b6d0:	d01f      	beq.n	b712 <main+0x296>
		/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
		/* Checks the timer timeout. */
		sw_timer_task(&swt_module_inst);
	}
	printf("main: please unplug the SD/MMC card.\r\n");
    b6d2:	4878      	ldr	r0, [pc, #480]	; (b8b4 <main+0x438>)
    b6d4:	4c3a      	ldr	r4, [pc, #232]	; (b7c0 <main+0x344>)
    b6d6:	47a0      	blx	r4
	printf("main: done.\r\n");
    b6d8:	4877      	ldr	r0, [pc, #476]	; (b8b8 <main+0x43c>)
    b6da:	47a0      	blx	r4

	//Disable socket for HTTP Transfer
	socketDeinit();
    b6dc:	4b77      	ldr	r3, [pc, #476]	; (b8bc <main+0x440>)
    b6de:	4798      	blx	r3
	delay_s(1);
    b6e0:	20fa      	movs	r0, #250	; 0xfa
    b6e2:	0080      	lsls	r0, r0, #2
    b6e4:	4b76      	ldr	r3, [pc, #472]	; (b8c0 <main+0x444>)
    b6e6:	4798      	blx	r3
	


	//CONNECT TO MQTT BROKER

	do_download_flag = false;    /** Flag false indicating that mqtt broker to be contacted */
    b6e8:	2200      	movs	r2, #0
    b6ea:	4b69      	ldr	r3, [pc, #420]	; (b890 <main+0x414>)
    b6ec:	701a      	strb	r2, [r3, #0]
	
	//Re-enable socket for MQTT Transfer
	socketInit();
    b6ee:	4b69      	ldr	r3, [pc, #420]	; (b894 <main+0x418>)
    b6f0:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    b6f2:	4974      	ldr	r1, [pc, #464]	; (b8c4 <main+0x448>)
    b6f4:	4874      	ldr	r0, [pc, #464]	; (b8c8 <main+0x44c>)
    b6f6:	4b6a      	ldr	r3, [pc, #424]	; (b8a0 <main+0x424>)
    b6f8:	4798      	blx	r3

		/* Connect to router. */
	
	if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
    b6fa:	4974      	ldr	r1, [pc, #464]	; (b8cc <main+0x450>)
    b6fc:	4841      	ldr	r0, [pc, #260]	; (b804 <main+0x388>)
    b6fe:	4b74      	ldr	r3, [pc, #464]	; (b8d0 <main+0x454>)
    b700:	4798      	blx	r3
    b702:	2800      	cmp	r0, #0
    b704:	d002      	beq.n	b70c <main+0x290>
	{
		printf("Error connecting to MQTT Broker!\r\n");
    b706:	4873      	ldr	r0, [pc, #460]	; (b8d4 <main+0x458>)
    b708:	4b2d      	ldr	r3, [pc, #180]	; (b7c0 <main+0x344>)
    b70a:	4798      	blx	r3
	}
	
	while (1) {

	/* Handle pending events from network controller. */
		m2m_wifi_handle_events(NULL);
    b70c:	4e72      	ldr	r6, [pc, #456]	; (b8d8 <main+0x45c>)
		sw_timer_task(&swt_module_inst);
    b70e:	4d73      	ldr	r5, [pc, #460]	; (b8dc <main+0x460>)
    b710:	e011      	b.n	b736 <main+0x2ba>
		m2m_wifi_handle_events(NULL);
    b712:	4e71      	ldr	r6, [pc, #452]	; (b8d8 <main+0x45c>)
		sw_timer_task(&swt_module_inst);
    b714:	4d2d      	ldr	r5, [pc, #180]	; (b7cc <main+0x350>)
    b716:	4c71      	ldr	r4, [pc, #452]	; (b8dc <main+0x460>)
		m2m_wifi_handle_events(NULL);
    b718:	2000      	movs	r0, #0
    b71a:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    b71c:	0028      	movs	r0, r5
    b71e:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    b720:	4b16      	ldr	r3, [pc, #88]	; (b77c <main+0x300>)
	while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    b722:	781b      	ldrb	r3, [r3, #0]
    b724:	2230      	movs	r2, #48	; 0x30
    b726:	421a      	tst	r2, r3
    b728:	d0f6      	beq.n	b718 <main+0x29c>
    b72a:	e7d2      	b.n	b6d2 <main+0x256>
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
			isPressed = false;
		}

		//Handle MQTT messages
			if(mqtt_inst.isConnected)
    b72c:	2334      	movs	r3, #52	; 0x34
    b72e:	4a35      	ldr	r2, [pc, #212]	; (b804 <main+0x388>)
    b730:	5cd3      	ldrb	r3, [r2, r3]
    b732:	2b00      	cmp	r3, #0
    b734:	d118      	bne.n	b768 <main+0x2ec>
		m2m_wifi_handle_events(NULL);
    b736:	2000      	movs	r0, #0
    b738:	47b0      	blx	r6
		sw_timer_task(&swt_module_inst);
    b73a:	4824      	ldr	r0, [pc, #144]	; (b7cc <main+0x350>)
    b73c:	47a8      	blx	r5
		if(isPressed)
    b73e:	4b68      	ldr	r3, [pc, #416]	; (b8e0 <main+0x464>)
    b740:	781b      	ldrb	r3, [r3, #0]
    b742:	2b00      	cmp	r3, #0
    b744:	d0f2      	beq.n	b72c <main+0x2b0>
			mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg, strlen(mqtt_msg), 2, 0);
    b746:	4f67      	ldr	r7, [pc, #412]	; (b8e4 <main+0x468>)
    b748:	0038      	movs	r0, r7
    b74a:	4b67      	ldr	r3, [pc, #412]	; (b8e8 <main+0x46c>)
    b74c:	4798      	blx	r3
    b74e:	0003      	movs	r3, r0
    b750:	2400      	movs	r4, #0
    b752:	9401      	str	r4, [sp, #4]
    b754:	2202      	movs	r2, #2
    b756:	9200      	str	r2, [sp, #0]
    b758:	003a      	movs	r2, r7
    b75a:	4964      	ldr	r1, [pc, #400]	; (b8ec <main+0x470>)
    b75c:	4829      	ldr	r0, [pc, #164]	; (b804 <main+0x388>)
    b75e:	4f64      	ldr	r7, [pc, #400]	; (b8f0 <main+0x474>)
    b760:	47b8      	blx	r7
			isPressed = false;
    b762:	4b5f      	ldr	r3, [pc, #380]	; (b8e0 <main+0x464>)
    b764:	701c      	strb	r4, [r3, #0]
    b766:	e7e1      	b.n	b72c <main+0x2b0>
			mqtt_yield(&mqtt_inst, 100);
    b768:	2164      	movs	r1, #100	; 0x64
    b76a:	0010      	movs	r0, r2
    b76c:	4b61      	ldr	r3, [pc, #388]	; (b8f4 <main+0x478>)
    b76e:	4798      	blx	r3
    b770:	e7e1      	b.n	b736 <main+0x2ba>
		puts("ERR>> Systick configuration error\r\n");
    b772:	4861      	ldr	r0, [pc, #388]	; (b8f8 <main+0x47c>)
    b774:	4b12      	ldr	r3, [pc, #72]	; (b7c0 <main+0x344>)
    b776:	4798      	blx	r3
    b778:	e7fe      	b.n	b778 <main+0x2fc>
    b77a:	46c0      	nop			; (mov r8, r8)
    b77c:	20000851 	.word	0x20000851
    b780:	00006181 	.word	0x00006181
    b784:	002a0003 	.word	0x002a0003
    b788:	002b0003 	.word	0x002b0003
    b78c:	2000081c 	.word	0x2000081c
    b790:	20001098 	.word	0x20001098
    b794:	0000ae49 	.word	0x0000ae49
    b798:	20001094 	.word	0x20001094
    b79c:	0000ae1d 	.word	0x0000ae1d
    b7a0:	20001090 	.word	0x20001090
    b7a4:	42001800 	.word	0x42001800
    b7a8:	00005499 	.word	0x00005499
    b7ac:	20000150 	.word	0x20000150
    b7b0:	0000bfa5 	.word	0x0000bfa5
    b7b4:	00004d15 	.word	0x00004d15
    b7b8:	e000e100 	.word	0xe000e100
    b7bc:	0000ed24 	.word	0x0000ed24
    b7c0:	0000bf6d 	.word	0x0000bf6d
    b7c4:	0000ed90 	.word	0x0000ed90
    b7c8:	0000aad5 	.word	0x0000aad5
    b7cc:	200012b4 	.word	0x200012b4
    b7d0:	0000aae1 	.word	0x0000aae1
    b7d4:	0000ab8d 	.word	0x0000ab8d
    b7d8:	00009aed 	.word	0x00009aed
    b7dc:	000005a6 	.word	0x000005a6
    b7e0:	2000130c 	.word	0x2000130c
    b7e4:	00009b15 	.word	0x00009b15
    b7e8:	0000b231 	.word	0x0000b231
    b7ec:	00009bc9 	.word	0x00009bc9
    b7f0:	00009035 	.word	0x00009035
    b7f4:	20000ae8 	.word	0x20000ae8
    b7f8:	20000ce8 	.word	0x20000ce8
    b7fc:	00002c93 	.word	0x00002c93
    b800:	00001770 	.word	0x00001770
    b804:	20000ab0 	.word	0x20000ab0
    b808:	00008f7d 	.word	0x00008f7d
    b80c:	0000ae61 	.word	0x0000ae61
    b810:	00009051 	.word	0x00009051
    b814:	0000ee2c 	.word	0x0000ee2c
    b818:	0000be51 	.word	0x0000be51
    b81c:	0000edb0 	.word	0x0000edb0
    b820:	0000edf8 	.word	0x0000edf8
    b824:	00001251 	.word	0x00001251
    b828:	00000239 	.word	0x00000239
    b82c:	0000ee60 	.word	0x0000ee60
    b830:	0000096d 	.word	0x0000096d
    b834:	0000ee98 	.word	0x0000ee98
    b838:	0000eec0 	.word	0x0000eec0
    b83c:	00000259 	.word	0x00000259
    b840:	0000eef0 	.word	0x0000eef0
    b844:	20000854 	.word	0x20000854
    b848:	0000bcef 	.word	0x0000bcef
    b84c:	00007fb1 	.word	0x00007fb1
    b850:	0000ef14 	.word	0x0000ef14
    b854:	0000b429 	.word	0x0000b429
    b858:	0000b459 	.word	0x0000b459
    b85c:	0000b325 	.word	0x0000b325
    b860:	000021cd 	.word	0x000021cd
    b864:	0000ef68 	.word	0x0000ef68
    b868:	0000ef44 	.word	0x0000ef44
    b86c:	0000ac6d 	.word	0x0000ac6d
    b870:	00005f3d 	.word	0x00005f3d
    b874:	40000400 	.word	0x40000400
    b878:	0000b8fd 	.word	0x0000b8fd
    b87c:	00ffffff 	.word	0x00ffffff
    b880:	e000e010 	.word	0xe000e010
    b884:	e000ed00 	.word	0xe000ed00
    b888:	0000ef94 	.word	0x0000ef94
    b88c:	0000efc0 	.word	0x0000efc0
    b890:	20000850 	.word	0x20000850
    b894:	00003df5 	.word	0x00003df5
    b898:	0000ad5d 	.word	0x0000ad5d
    b89c:	0000ad99 	.word	0x0000ad99
    b8a0:	00003e75 	.word	0x00003e75
    b8a4:	0000f464 	.word	0x0000f464
    b8a8:	0000efc4 	.word	0x0000efc4
    b8ac:	0000f454 	.word	0x0000f454
    b8b0:	0000259d 	.word	0x0000259d
    b8b4:	0000efe8 	.word	0x0000efe8
    b8b8:	0000f010 	.word	0x0000f010
    b8bc:	00003e39 	.word	0x00003e39
    b8c0:	00001211 	.word	0x00001211
    b8c4:	0000ad45 	.word	0x0000ad45
    b8c8:	0000ad51 	.word	0x0000ad51
    b8cc:	0000f044 	.word	0x0000f044
    b8d0:	00009079 	.word	0x00009079
    b8d4:	0000f4a0 	.word	0x0000f4a0
    b8d8:	00002301 	.word	0x00002301
    b8dc:	0000ac15 	.word	0x0000ac15
    b8e0:	20000aac 	.word	0x20000aac
    b8e4:	20000010 	.word	0x20000010
    b8e8:	0000c217 	.word	0x0000c217
    b8ec:	0000f10c 	.word	0x0000f10c
    b8f0:	0000916d 	.word	0x0000916d
    b8f4:	000091cd 	.word	0x000091cd
    b8f8:	0000f020 	.word	0x0000f020

0000b8fc <__udivsi3>:
    b8fc:	2200      	movs	r2, #0
    b8fe:	0843      	lsrs	r3, r0, #1
    b900:	428b      	cmp	r3, r1
    b902:	d374      	bcc.n	b9ee <__udivsi3+0xf2>
    b904:	0903      	lsrs	r3, r0, #4
    b906:	428b      	cmp	r3, r1
    b908:	d35f      	bcc.n	b9ca <__udivsi3+0xce>
    b90a:	0a03      	lsrs	r3, r0, #8
    b90c:	428b      	cmp	r3, r1
    b90e:	d344      	bcc.n	b99a <__udivsi3+0x9e>
    b910:	0b03      	lsrs	r3, r0, #12
    b912:	428b      	cmp	r3, r1
    b914:	d328      	bcc.n	b968 <__udivsi3+0x6c>
    b916:	0c03      	lsrs	r3, r0, #16
    b918:	428b      	cmp	r3, r1
    b91a:	d30d      	bcc.n	b938 <__udivsi3+0x3c>
    b91c:	22ff      	movs	r2, #255	; 0xff
    b91e:	0209      	lsls	r1, r1, #8
    b920:	ba12      	rev	r2, r2
    b922:	0c03      	lsrs	r3, r0, #16
    b924:	428b      	cmp	r3, r1
    b926:	d302      	bcc.n	b92e <__udivsi3+0x32>
    b928:	1212      	asrs	r2, r2, #8
    b92a:	0209      	lsls	r1, r1, #8
    b92c:	d065      	beq.n	b9fa <__udivsi3+0xfe>
    b92e:	0b03      	lsrs	r3, r0, #12
    b930:	428b      	cmp	r3, r1
    b932:	d319      	bcc.n	b968 <__udivsi3+0x6c>
    b934:	e000      	b.n	b938 <__udivsi3+0x3c>
    b936:	0a09      	lsrs	r1, r1, #8
    b938:	0bc3      	lsrs	r3, r0, #15
    b93a:	428b      	cmp	r3, r1
    b93c:	d301      	bcc.n	b942 <__udivsi3+0x46>
    b93e:	03cb      	lsls	r3, r1, #15
    b940:	1ac0      	subs	r0, r0, r3
    b942:	4152      	adcs	r2, r2
    b944:	0b83      	lsrs	r3, r0, #14
    b946:	428b      	cmp	r3, r1
    b948:	d301      	bcc.n	b94e <__udivsi3+0x52>
    b94a:	038b      	lsls	r3, r1, #14
    b94c:	1ac0      	subs	r0, r0, r3
    b94e:	4152      	adcs	r2, r2
    b950:	0b43      	lsrs	r3, r0, #13
    b952:	428b      	cmp	r3, r1
    b954:	d301      	bcc.n	b95a <__udivsi3+0x5e>
    b956:	034b      	lsls	r3, r1, #13
    b958:	1ac0      	subs	r0, r0, r3
    b95a:	4152      	adcs	r2, r2
    b95c:	0b03      	lsrs	r3, r0, #12
    b95e:	428b      	cmp	r3, r1
    b960:	d301      	bcc.n	b966 <__udivsi3+0x6a>
    b962:	030b      	lsls	r3, r1, #12
    b964:	1ac0      	subs	r0, r0, r3
    b966:	4152      	adcs	r2, r2
    b968:	0ac3      	lsrs	r3, r0, #11
    b96a:	428b      	cmp	r3, r1
    b96c:	d301      	bcc.n	b972 <__udivsi3+0x76>
    b96e:	02cb      	lsls	r3, r1, #11
    b970:	1ac0      	subs	r0, r0, r3
    b972:	4152      	adcs	r2, r2
    b974:	0a83      	lsrs	r3, r0, #10
    b976:	428b      	cmp	r3, r1
    b978:	d301      	bcc.n	b97e <__udivsi3+0x82>
    b97a:	028b      	lsls	r3, r1, #10
    b97c:	1ac0      	subs	r0, r0, r3
    b97e:	4152      	adcs	r2, r2
    b980:	0a43      	lsrs	r3, r0, #9
    b982:	428b      	cmp	r3, r1
    b984:	d301      	bcc.n	b98a <__udivsi3+0x8e>
    b986:	024b      	lsls	r3, r1, #9
    b988:	1ac0      	subs	r0, r0, r3
    b98a:	4152      	adcs	r2, r2
    b98c:	0a03      	lsrs	r3, r0, #8
    b98e:	428b      	cmp	r3, r1
    b990:	d301      	bcc.n	b996 <__udivsi3+0x9a>
    b992:	020b      	lsls	r3, r1, #8
    b994:	1ac0      	subs	r0, r0, r3
    b996:	4152      	adcs	r2, r2
    b998:	d2cd      	bcs.n	b936 <__udivsi3+0x3a>
    b99a:	09c3      	lsrs	r3, r0, #7
    b99c:	428b      	cmp	r3, r1
    b99e:	d301      	bcc.n	b9a4 <__udivsi3+0xa8>
    b9a0:	01cb      	lsls	r3, r1, #7
    b9a2:	1ac0      	subs	r0, r0, r3
    b9a4:	4152      	adcs	r2, r2
    b9a6:	0983      	lsrs	r3, r0, #6
    b9a8:	428b      	cmp	r3, r1
    b9aa:	d301      	bcc.n	b9b0 <__udivsi3+0xb4>
    b9ac:	018b      	lsls	r3, r1, #6
    b9ae:	1ac0      	subs	r0, r0, r3
    b9b0:	4152      	adcs	r2, r2
    b9b2:	0943      	lsrs	r3, r0, #5
    b9b4:	428b      	cmp	r3, r1
    b9b6:	d301      	bcc.n	b9bc <__udivsi3+0xc0>
    b9b8:	014b      	lsls	r3, r1, #5
    b9ba:	1ac0      	subs	r0, r0, r3
    b9bc:	4152      	adcs	r2, r2
    b9be:	0903      	lsrs	r3, r0, #4
    b9c0:	428b      	cmp	r3, r1
    b9c2:	d301      	bcc.n	b9c8 <__udivsi3+0xcc>
    b9c4:	010b      	lsls	r3, r1, #4
    b9c6:	1ac0      	subs	r0, r0, r3
    b9c8:	4152      	adcs	r2, r2
    b9ca:	08c3      	lsrs	r3, r0, #3
    b9cc:	428b      	cmp	r3, r1
    b9ce:	d301      	bcc.n	b9d4 <__udivsi3+0xd8>
    b9d0:	00cb      	lsls	r3, r1, #3
    b9d2:	1ac0      	subs	r0, r0, r3
    b9d4:	4152      	adcs	r2, r2
    b9d6:	0883      	lsrs	r3, r0, #2
    b9d8:	428b      	cmp	r3, r1
    b9da:	d301      	bcc.n	b9e0 <__udivsi3+0xe4>
    b9dc:	008b      	lsls	r3, r1, #2
    b9de:	1ac0      	subs	r0, r0, r3
    b9e0:	4152      	adcs	r2, r2
    b9e2:	0843      	lsrs	r3, r0, #1
    b9e4:	428b      	cmp	r3, r1
    b9e6:	d301      	bcc.n	b9ec <__udivsi3+0xf0>
    b9e8:	004b      	lsls	r3, r1, #1
    b9ea:	1ac0      	subs	r0, r0, r3
    b9ec:	4152      	adcs	r2, r2
    b9ee:	1a41      	subs	r1, r0, r1
    b9f0:	d200      	bcs.n	b9f4 <__udivsi3+0xf8>
    b9f2:	4601      	mov	r1, r0
    b9f4:	4152      	adcs	r2, r2
    b9f6:	4610      	mov	r0, r2
    b9f8:	4770      	bx	lr
    b9fa:	e7ff      	b.n	b9fc <__udivsi3+0x100>
    b9fc:	b501      	push	{r0, lr}
    b9fe:	2000      	movs	r0, #0
    ba00:	f000 f8f0 	bl	bbe4 <__aeabi_idiv0>
    ba04:	bd02      	pop	{r1, pc}
    ba06:	46c0      	nop			; (mov r8, r8)

0000ba08 <__aeabi_uidivmod>:
    ba08:	2900      	cmp	r1, #0
    ba0a:	d0f7      	beq.n	b9fc <__udivsi3+0x100>
    ba0c:	e776      	b.n	b8fc <__udivsi3>
    ba0e:	4770      	bx	lr

0000ba10 <__divsi3>:
    ba10:	4603      	mov	r3, r0
    ba12:	430b      	orrs	r3, r1
    ba14:	d47f      	bmi.n	bb16 <__divsi3+0x106>
    ba16:	2200      	movs	r2, #0
    ba18:	0843      	lsrs	r3, r0, #1
    ba1a:	428b      	cmp	r3, r1
    ba1c:	d374      	bcc.n	bb08 <__divsi3+0xf8>
    ba1e:	0903      	lsrs	r3, r0, #4
    ba20:	428b      	cmp	r3, r1
    ba22:	d35f      	bcc.n	bae4 <__divsi3+0xd4>
    ba24:	0a03      	lsrs	r3, r0, #8
    ba26:	428b      	cmp	r3, r1
    ba28:	d344      	bcc.n	bab4 <__divsi3+0xa4>
    ba2a:	0b03      	lsrs	r3, r0, #12
    ba2c:	428b      	cmp	r3, r1
    ba2e:	d328      	bcc.n	ba82 <__divsi3+0x72>
    ba30:	0c03      	lsrs	r3, r0, #16
    ba32:	428b      	cmp	r3, r1
    ba34:	d30d      	bcc.n	ba52 <__divsi3+0x42>
    ba36:	22ff      	movs	r2, #255	; 0xff
    ba38:	0209      	lsls	r1, r1, #8
    ba3a:	ba12      	rev	r2, r2
    ba3c:	0c03      	lsrs	r3, r0, #16
    ba3e:	428b      	cmp	r3, r1
    ba40:	d302      	bcc.n	ba48 <__divsi3+0x38>
    ba42:	1212      	asrs	r2, r2, #8
    ba44:	0209      	lsls	r1, r1, #8
    ba46:	d065      	beq.n	bb14 <__divsi3+0x104>
    ba48:	0b03      	lsrs	r3, r0, #12
    ba4a:	428b      	cmp	r3, r1
    ba4c:	d319      	bcc.n	ba82 <__divsi3+0x72>
    ba4e:	e000      	b.n	ba52 <__divsi3+0x42>
    ba50:	0a09      	lsrs	r1, r1, #8
    ba52:	0bc3      	lsrs	r3, r0, #15
    ba54:	428b      	cmp	r3, r1
    ba56:	d301      	bcc.n	ba5c <__divsi3+0x4c>
    ba58:	03cb      	lsls	r3, r1, #15
    ba5a:	1ac0      	subs	r0, r0, r3
    ba5c:	4152      	adcs	r2, r2
    ba5e:	0b83      	lsrs	r3, r0, #14
    ba60:	428b      	cmp	r3, r1
    ba62:	d301      	bcc.n	ba68 <__divsi3+0x58>
    ba64:	038b      	lsls	r3, r1, #14
    ba66:	1ac0      	subs	r0, r0, r3
    ba68:	4152      	adcs	r2, r2
    ba6a:	0b43      	lsrs	r3, r0, #13
    ba6c:	428b      	cmp	r3, r1
    ba6e:	d301      	bcc.n	ba74 <__divsi3+0x64>
    ba70:	034b      	lsls	r3, r1, #13
    ba72:	1ac0      	subs	r0, r0, r3
    ba74:	4152      	adcs	r2, r2
    ba76:	0b03      	lsrs	r3, r0, #12
    ba78:	428b      	cmp	r3, r1
    ba7a:	d301      	bcc.n	ba80 <__divsi3+0x70>
    ba7c:	030b      	lsls	r3, r1, #12
    ba7e:	1ac0      	subs	r0, r0, r3
    ba80:	4152      	adcs	r2, r2
    ba82:	0ac3      	lsrs	r3, r0, #11
    ba84:	428b      	cmp	r3, r1
    ba86:	d301      	bcc.n	ba8c <__divsi3+0x7c>
    ba88:	02cb      	lsls	r3, r1, #11
    ba8a:	1ac0      	subs	r0, r0, r3
    ba8c:	4152      	adcs	r2, r2
    ba8e:	0a83      	lsrs	r3, r0, #10
    ba90:	428b      	cmp	r3, r1
    ba92:	d301      	bcc.n	ba98 <__divsi3+0x88>
    ba94:	028b      	lsls	r3, r1, #10
    ba96:	1ac0      	subs	r0, r0, r3
    ba98:	4152      	adcs	r2, r2
    ba9a:	0a43      	lsrs	r3, r0, #9
    ba9c:	428b      	cmp	r3, r1
    ba9e:	d301      	bcc.n	baa4 <__divsi3+0x94>
    baa0:	024b      	lsls	r3, r1, #9
    baa2:	1ac0      	subs	r0, r0, r3
    baa4:	4152      	adcs	r2, r2
    baa6:	0a03      	lsrs	r3, r0, #8
    baa8:	428b      	cmp	r3, r1
    baaa:	d301      	bcc.n	bab0 <__divsi3+0xa0>
    baac:	020b      	lsls	r3, r1, #8
    baae:	1ac0      	subs	r0, r0, r3
    bab0:	4152      	adcs	r2, r2
    bab2:	d2cd      	bcs.n	ba50 <__divsi3+0x40>
    bab4:	09c3      	lsrs	r3, r0, #7
    bab6:	428b      	cmp	r3, r1
    bab8:	d301      	bcc.n	babe <__divsi3+0xae>
    baba:	01cb      	lsls	r3, r1, #7
    babc:	1ac0      	subs	r0, r0, r3
    babe:	4152      	adcs	r2, r2
    bac0:	0983      	lsrs	r3, r0, #6
    bac2:	428b      	cmp	r3, r1
    bac4:	d301      	bcc.n	baca <__divsi3+0xba>
    bac6:	018b      	lsls	r3, r1, #6
    bac8:	1ac0      	subs	r0, r0, r3
    baca:	4152      	adcs	r2, r2
    bacc:	0943      	lsrs	r3, r0, #5
    bace:	428b      	cmp	r3, r1
    bad0:	d301      	bcc.n	bad6 <__divsi3+0xc6>
    bad2:	014b      	lsls	r3, r1, #5
    bad4:	1ac0      	subs	r0, r0, r3
    bad6:	4152      	adcs	r2, r2
    bad8:	0903      	lsrs	r3, r0, #4
    bada:	428b      	cmp	r3, r1
    badc:	d301      	bcc.n	bae2 <__divsi3+0xd2>
    bade:	010b      	lsls	r3, r1, #4
    bae0:	1ac0      	subs	r0, r0, r3
    bae2:	4152      	adcs	r2, r2
    bae4:	08c3      	lsrs	r3, r0, #3
    bae6:	428b      	cmp	r3, r1
    bae8:	d301      	bcc.n	baee <__divsi3+0xde>
    baea:	00cb      	lsls	r3, r1, #3
    baec:	1ac0      	subs	r0, r0, r3
    baee:	4152      	adcs	r2, r2
    baf0:	0883      	lsrs	r3, r0, #2
    baf2:	428b      	cmp	r3, r1
    baf4:	d301      	bcc.n	bafa <__divsi3+0xea>
    baf6:	008b      	lsls	r3, r1, #2
    baf8:	1ac0      	subs	r0, r0, r3
    bafa:	4152      	adcs	r2, r2
    bafc:	0843      	lsrs	r3, r0, #1
    bafe:	428b      	cmp	r3, r1
    bb00:	d301      	bcc.n	bb06 <__divsi3+0xf6>
    bb02:	004b      	lsls	r3, r1, #1
    bb04:	1ac0      	subs	r0, r0, r3
    bb06:	4152      	adcs	r2, r2
    bb08:	1a41      	subs	r1, r0, r1
    bb0a:	d200      	bcs.n	bb0e <__divsi3+0xfe>
    bb0c:	4601      	mov	r1, r0
    bb0e:	4152      	adcs	r2, r2
    bb10:	4610      	mov	r0, r2
    bb12:	4770      	bx	lr
    bb14:	e05d      	b.n	bbd2 <__divsi3+0x1c2>
    bb16:	0fca      	lsrs	r2, r1, #31
    bb18:	d000      	beq.n	bb1c <__divsi3+0x10c>
    bb1a:	4249      	negs	r1, r1
    bb1c:	1003      	asrs	r3, r0, #32
    bb1e:	d300      	bcc.n	bb22 <__divsi3+0x112>
    bb20:	4240      	negs	r0, r0
    bb22:	4053      	eors	r3, r2
    bb24:	2200      	movs	r2, #0
    bb26:	469c      	mov	ip, r3
    bb28:	0903      	lsrs	r3, r0, #4
    bb2a:	428b      	cmp	r3, r1
    bb2c:	d32d      	bcc.n	bb8a <__divsi3+0x17a>
    bb2e:	0a03      	lsrs	r3, r0, #8
    bb30:	428b      	cmp	r3, r1
    bb32:	d312      	bcc.n	bb5a <__divsi3+0x14a>
    bb34:	22fc      	movs	r2, #252	; 0xfc
    bb36:	0189      	lsls	r1, r1, #6
    bb38:	ba12      	rev	r2, r2
    bb3a:	0a03      	lsrs	r3, r0, #8
    bb3c:	428b      	cmp	r3, r1
    bb3e:	d30c      	bcc.n	bb5a <__divsi3+0x14a>
    bb40:	0189      	lsls	r1, r1, #6
    bb42:	1192      	asrs	r2, r2, #6
    bb44:	428b      	cmp	r3, r1
    bb46:	d308      	bcc.n	bb5a <__divsi3+0x14a>
    bb48:	0189      	lsls	r1, r1, #6
    bb4a:	1192      	asrs	r2, r2, #6
    bb4c:	428b      	cmp	r3, r1
    bb4e:	d304      	bcc.n	bb5a <__divsi3+0x14a>
    bb50:	0189      	lsls	r1, r1, #6
    bb52:	d03a      	beq.n	bbca <__divsi3+0x1ba>
    bb54:	1192      	asrs	r2, r2, #6
    bb56:	e000      	b.n	bb5a <__divsi3+0x14a>
    bb58:	0989      	lsrs	r1, r1, #6
    bb5a:	09c3      	lsrs	r3, r0, #7
    bb5c:	428b      	cmp	r3, r1
    bb5e:	d301      	bcc.n	bb64 <__divsi3+0x154>
    bb60:	01cb      	lsls	r3, r1, #7
    bb62:	1ac0      	subs	r0, r0, r3
    bb64:	4152      	adcs	r2, r2
    bb66:	0983      	lsrs	r3, r0, #6
    bb68:	428b      	cmp	r3, r1
    bb6a:	d301      	bcc.n	bb70 <__divsi3+0x160>
    bb6c:	018b      	lsls	r3, r1, #6
    bb6e:	1ac0      	subs	r0, r0, r3
    bb70:	4152      	adcs	r2, r2
    bb72:	0943      	lsrs	r3, r0, #5
    bb74:	428b      	cmp	r3, r1
    bb76:	d301      	bcc.n	bb7c <__divsi3+0x16c>
    bb78:	014b      	lsls	r3, r1, #5
    bb7a:	1ac0      	subs	r0, r0, r3
    bb7c:	4152      	adcs	r2, r2
    bb7e:	0903      	lsrs	r3, r0, #4
    bb80:	428b      	cmp	r3, r1
    bb82:	d301      	bcc.n	bb88 <__divsi3+0x178>
    bb84:	010b      	lsls	r3, r1, #4
    bb86:	1ac0      	subs	r0, r0, r3
    bb88:	4152      	adcs	r2, r2
    bb8a:	08c3      	lsrs	r3, r0, #3
    bb8c:	428b      	cmp	r3, r1
    bb8e:	d301      	bcc.n	bb94 <__divsi3+0x184>
    bb90:	00cb      	lsls	r3, r1, #3
    bb92:	1ac0      	subs	r0, r0, r3
    bb94:	4152      	adcs	r2, r2
    bb96:	0883      	lsrs	r3, r0, #2
    bb98:	428b      	cmp	r3, r1
    bb9a:	d301      	bcc.n	bba0 <__divsi3+0x190>
    bb9c:	008b      	lsls	r3, r1, #2
    bb9e:	1ac0      	subs	r0, r0, r3
    bba0:	4152      	adcs	r2, r2
    bba2:	d2d9      	bcs.n	bb58 <__divsi3+0x148>
    bba4:	0843      	lsrs	r3, r0, #1
    bba6:	428b      	cmp	r3, r1
    bba8:	d301      	bcc.n	bbae <__divsi3+0x19e>
    bbaa:	004b      	lsls	r3, r1, #1
    bbac:	1ac0      	subs	r0, r0, r3
    bbae:	4152      	adcs	r2, r2
    bbb0:	1a41      	subs	r1, r0, r1
    bbb2:	d200      	bcs.n	bbb6 <__divsi3+0x1a6>
    bbb4:	4601      	mov	r1, r0
    bbb6:	4663      	mov	r3, ip
    bbb8:	4152      	adcs	r2, r2
    bbba:	105b      	asrs	r3, r3, #1
    bbbc:	4610      	mov	r0, r2
    bbbe:	d301      	bcc.n	bbc4 <__divsi3+0x1b4>
    bbc0:	4240      	negs	r0, r0
    bbc2:	2b00      	cmp	r3, #0
    bbc4:	d500      	bpl.n	bbc8 <__divsi3+0x1b8>
    bbc6:	4249      	negs	r1, r1
    bbc8:	4770      	bx	lr
    bbca:	4663      	mov	r3, ip
    bbcc:	105b      	asrs	r3, r3, #1
    bbce:	d300      	bcc.n	bbd2 <__divsi3+0x1c2>
    bbd0:	4240      	negs	r0, r0
    bbd2:	b501      	push	{r0, lr}
    bbd4:	2000      	movs	r0, #0
    bbd6:	f000 f805 	bl	bbe4 <__aeabi_idiv0>
    bbda:	bd02      	pop	{r1, pc}

0000bbdc <__aeabi_idivmod>:
    bbdc:	2900      	cmp	r1, #0
    bbde:	d0f8      	beq.n	bbd2 <__divsi3+0x1c2>
    bbe0:	e716      	b.n	ba10 <__divsi3>
    bbe2:	4770      	bx	lr

0000bbe4 <__aeabi_idiv0>:
    bbe4:	4770      	bx	lr
    bbe6:	46c0      	nop			; (mov r8, r8)

0000bbe8 <__aeabi_lmul>:
    bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbea:	46ce      	mov	lr, r9
    bbec:	4647      	mov	r7, r8
    bbee:	0415      	lsls	r5, r2, #16
    bbf0:	0c2d      	lsrs	r5, r5, #16
    bbf2:	002e      	movs	r6, r5
    bbf4:	b580      	push	{r7, lr}
    bbf6:	0407      	lsls	r7, r0, #16
    bbf8:	0c14      	lsrs	r4, r2, #16
    bbfa:	0c3f      	lsrs	r7, r7, #16
    bbfc:	4699      	mov	r9, r3
    bbfe:	0c03      	lsrs	r3, r0, #16
    bc00:	437e      	muls	r6, r7
    bc02:	435d      	muls	r5, r3
    bc04:	4367      	muls	r7, r4
    bc06:	4363      	muls	r3, r4
    bc08:	197f      	adds	r7, r7, r5
    bc0a:	0c34      	lsrs	r4, r6, #16
    bc0c:	19e4      	adds	r4, r4, r7
    bc0e:	469c      	mov	ip, r3
    bc10:	42a5      	cmp	r5, r4
    bc12:	d903      	bls.n	bc1c <__aeabi_lmul+0x34>
    bc14:	2380      	movs	r3, #128	; 0x80
    bc16:	025b      	lsls	r3, r3, #9
    bc18:	4698      	mov	r8, r3
    bc1a:	44c4      	add	ip, r8
    bc1c:	464b      	mov	r3, r9
    bc1e:	4351      	muls	r1, r2
    bc20:	4343      	muls	r3, r0
    bc22:	0436      	lsls	r6, r6, #16
    bc24:	0c36      	lsrs	r6, r6, #16
    bc26:	0c25      	lsrs	r5, r4, #16
    bc28:	0424      	lsls	r4, r4, #16
    bc2a:	4465      	add	r5, ip
    bc2c:	19a4      	adds	r4, r4, r6
    bc2e:	1859      	adds	r1, r3, r1
    bc30:	1949      	adds	r1, r1, r5
    bc32:	0020      	movs	r0, r4
    bc34:	bc0c      	pop	{r2, r3}
    bc36:	4690      	mov	r8, r2
    bc38:	4699      	mov	r9, r3
    bc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000bc3c <atoi>:
    bc3c:	b510      	push	{r4, lr}
    bc3e:	220a      	movs	r2, #10
    bc40:	2100      	movs	r1, #0
    bc42:	f000 fbc5 	bl	c3d0 <strtol>
    bc46:	bd10      	pop	{r4, pc}

0000bc48 <__libc_init_array>:
    bc48:	b570      	push	{r4, r5, r6, lr}
    bc4a:	2600      	movs	r6, #0
    bc4c:	4d0c      	ldr	r5, [pc, #48]	; (bc80 <__libc_init_array+0x38>)
    bc4e:	4c0d      	ldr	r4, [pc, #52]	; (bc84 <__libc_init_array+0x3c>)
    bc50:	1b64      	subs	r4, r4, r5
    bc52:	10a4      	asrs	r4, r4, #2
    bc54:	42a6      	cmp	r6, r4
    bc56:	d109      	bne.n	bc6c <__libc_init_array+0x24>
    bc58:	2600      	movs	r6, #0
    bc5a:	f003 fd05 	bl	f668 <_init>
    bc5e:	4d0a      	ldr	r5, [pc, #40]	; (bc88 <__libc_init_array+0x40>)
    bc60:	4c0a      	ldr	r4, [pc, #40]	; (bc8c <__libc_init_array+0x44>)
    bc62:	1b64      	subs	r4, r4, r5
    bc64:	10a4      	asrs	r4, r4, #2
    bc66:	42a6      	cmp	r6, r4
    bc68:	d105      	bne.n	bc76 <__libc_init_array+0x2e>
    bc6a:	bd70      	pop	{r4, r5, r6, pc}
    bc6c:	00b3      	lsls	r3, r6, #2
    bc6e:	58eb      	ldr	r3, [r5, r3]
    bc70:	4798      	blx	r3
    bc72:	3601      	adds	r6, #1
    bc74:	e7ee      	b.n	bc54 <__libc_init_array+0xc>
    bc76:	00b3      	lsls	r3, r6, #2
    bc78:	58eb      	ldr	r3, [r5, r3]
    bc7a:	4798      	blx	r3
    bc7c:	3601      	adds	r6, #1
    bc7e:	e7f2      	b.n	bc66 <__libc_init_array+0x1e>
    bc80:	0000f674 	.word	0x0000f674
    bc84:	0000f674 	.word	0x0000f674
    bc88:	0000f674 	.word	0x0000f674
    bc8c:	0000f678 	.word	0x0000f678

0000bc90 <malloc>:
    bc90:	b510      	push	{r4, lr}
    bc92:	4b03      	ldr	r3, [pc, #12]	; (bca0 <malloc+0x10>)
    bc94:	0001      	movs	r1, r0
    bc96:	6818      	ldr	r0, [r3, #0]
    bc98:	f000 f87c 	bl	bd94 <_malloc_r>
    bc9c:	bd10      	pop	{r4, pc}
    bc9e:	46c0      	nop			; (mov r8, r8)
    bca0:	20000150 	.word	0x20000150

0000bca4 <free>:
    bca4:	b510      	push	{r4, lr}
    bca6:	4b03      	ldr	r3, [pc, #12]	; (bcb4 <free+0x10>)
    bca8:	0001      	movs	r1, r0
    bcaa:	6818      	ldr	r0, [r3, #0]
    bcac:	f000 f828 	bl	bd00 <_free_r>
    bcb0:	bd10      	pop	{r4, pc}
    bcb2:	46c0      	nop			; (mov r8, r8)
    bcb4:	20000150 	.word	0x20000150

0000bcb8 <memcpy>:
    bcb8:	2300      	movs	r3, #0
    bcba:	b510      	push	{r4, lr}
    bcbc:	429a      	cmp	r2, r3
    bcbe:	d100      	bne.n	bcc2 <memcpy+0xa>
    bcc0:	bd10      	pop	{r4, pc}
    bcc2:	5ccc      	ldrb	r4, [r1, r3]
    bcc4:	54c4      	strb	r4, [r0, r3]
    bcc6:	3301      	adds	r3, #1
    bcc8:	e7f8      	b.n	bcbc <memcpy+0x4>

0000bcca <memmove>:
    bcca:	b510      	push	{r4, lr}
    bccc:	4288      	cmp	r0, r1
    bcce:	d902      	bls.n	bcd6 <memmove+0xc>
    bcd0:	188b      	adds	r3, r1, r2
    bcd2:	4298      	cmp	r0, r3
    bcd4:	d308      	bcc.n	bce8 <memmove+0x1e>
    bcd6:	2300      	movs	r3, #0
    bcd8:	429a      	cmp	r2, r3
    bcda:	d007      	beq.n	bcec <memmove+0x22>
    bcdc:	5ccc      	ldrb	r4, [r1, r3]
    bcde:	54c4      	strb	r4, [r0, r3]
    bce0:	3301      	adds	r3, #1
    bce2:	e7f9      	b.n	bcd8 <memmove+0xe>
    bce4:	5c8b      	ldrb	r3, [r1, r2]
    bce6:	5483      	strb	r3, [r0, r2]
    bce8:	3a01      	subs	r2, #1
    bcea:	d2fb      	bcs.n	bce4 <memmove+0x1a>
    bcec:	bd10      	pop	{r4, pc}

0000bcee <memset>:
    bcee:	0003      	movs	r3, r0
    bcf0:	1882      	adds	r2, r0, r2
    bcf2:	4293      	cmp	r3, r2
    bcf4:	d100      	bne.n	bcf8 <memset+0xa>
    bcf6:	4770      	bx	lr
    bcf8:	7019      	strb	r1, [r3, #0]
    bcfa:	3301      	adds	r3, #1
    bcfc:	e7f9      	b.n	bcf2 <memset+0x4>
	...

0000bd00 <_free_r>:
    bd00:	b570      	push	{r4, r5, r6, lr}
    bd02:	0005      	movs	r5, r0
    bd04:	2900      	cmp	r1, #0
    bd06:	d010      	beq.n	bd2a <_free_r+0x2a>
    bd08:	1f0c      	subs	r4, r1, #4
    bd0a:	6823      	ldr	r3, [r4, #0]
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	da00      	bge.n	bd12 <_free_r+0x12>
    bd10:	18e4      	adds	r4, r4, r3
    bd12:	0028      	movs	r0, r5
    bd14:	f000 fe4a 	bl	c9ac <__malloc_lock>
    bd18:	4a1d      	ldr	r2, [pc, #116]	; (bd90 <_free_r+0x90>)
    bd1a:	6813      	ldr	r3, [r2, #0]
    bd1c:	2b00      	cmp	r3, #0
    bd1e:	d105      	bne.n	bd2c <_free_r+0x2c>
    bd20:	6063      	str	r3, [r4, #4]
    bd22:	6014      	str	r4, [r2, #0]
    bd24:	0028      	movs	r0, r5
    bd26:	f000 fe42 	bl	c9ae <__malloc_unlock>
    bd2a:	bd70      	pop	{r4, r5, r6, pc}
    bd2c:	42a3      	cmp	r3, r4
    bd2e:	d909      	bls.n	bd44 <_free_r+0x44>
    bd30:	6821      	ldr	r1, [r4, #0]
    bd32:	1860      	adds	r0, r4, r1
    bd34:	4283      	cmp	r3, r0
    bd36:	d1f3      	bne.n	bd20 <_free_r+0x20>
    bd38:	6818      	ldr	r0, [r3, #0]
    bd3a:	685b      	ldr	r3, [r3, #4]
    bd3c:	1841      	adds	r1, r0, r1
    bd3e:	6021      	str	r1, [r4, #0]
    bd40:	e7ee      	b.n	bd20 <_free_r+0x20>
    bd42:	0013      	movs	r3, r2
    bd44:	685a      	ldr	r2, [r3, #4]
    bd46:	2a00      	cmp	r2, #0
    bd48:	d001      	beq.n	bd4e <_free_r+0x4e>
    bd4a:	42a2      	cmp	r2, r4
    bd4c:	d9f9      	bls.n	bd42 <_free_r+0x42>
    bd4e:	6819      	ldr	r1, [r3, #0]
    bd50:	1858      	adds	r0, r3, r1
    bd52:	42a0      	cmp	r0, r4
    bd54:	d10b      	bne.n	bd6e <_free_r+0x6e>
    bd56:	6820      	ldr	r0, [r4, #0]
    bd58:	1809      	adds	r1, r1, r0
    bd5a:	1858      	adds	r0, r3, r1
    bd5c:	6019      	str	r1, [r3, #0]
    bd5e:	4282      	cmp	r2, r0
    bd60:	d1e0      	bne.n	bd24 <_free_r+0x24>
    bd62:	6810      	ldr	r0, [r2, #0]
    bd64:	6852      	ldr	r2, [r2, #4]
    bd66:	1841      	adds	r1, r0, r1
    bd68:	6019      	str	r1, [r3, #0]
    bd6a:	605a      	str	r2, [r3, #4]
    bd6c:	e7da      	b.n	bd24 <_free_r+0x24>
    bd6e:	42a0      	cmp	r0, r4
    bd70:	d902      	bls.n	bd78 <_free_r+0x78>
    bd72:	230c      	movs	r3, #12
    bd74:	602b      	str	r3, [r5, #0]
    bd76:	e7d5      	b.n	bd24 <_free_r+0x24>
    bd78:	6821      	ldr	r1, [r4, #0]
    bd7a:	1860      	adds	r0, r4, r1
    bd7c:	4282      	cmp	r2, r0
    bd7e:	d103      	bne.n	bd88 <_free_r+0x88>
    bd80:	6810      	ldr	r0, [r2, #0]
    bd82:	6852      	ldr	r2, [r2, #4]
    bd84:	1841      	adds	r1, r0, r1
    bd86:	6021      	str	r1, [r4, #0]
    bd88:	6062      	str	r2, [r4, #4]
    bd8a:	605c      	str	r4, [r3, #4]
    bd8c:	e7ca      	b.n	bd24 <_free_r+0x24>
    bd8e:	46c0      	nop			; (mov r8, r8)
    bd90:	20000eec 	.word	0x20000eec

0000bd94 <_malloc_r>:
    bd94:	2303      	movs	r3, #3
    bd96:	b570      	push	{r4, r5, r6, lr}
    bd98:	1ccd      	adds	r5, r1, #3
    bd9a:	439d      	bics	r5, r3
    bd9c:	3508      	adds	r5, #8
    bd9e:	0006      	movs	r6, r0
    bda0:	2d0c      	cmp	r5, #12
    bda2:	d21e      	bcs.n	bde2 <_malloc_r+0x4e>
    bda4:	250c      	movs	r5, #12
    bda6:	42a9      	cmp	r1, r5
    bda8:	d81d      	bhi.n	bde6 <_malloc_r+0x52>
    bdaa:	0030      	movs	r0, r6
    bdac:	f000 fdfe 	bl	c9ac <__malloc_lock>
    bdb0:	4a25      	ldr	r2, [pc, #148]	; (be48 <_malloc_r+0xb4>)
    bdb2:	6814      	ldr	r4, [r2, #0]
    bdb4:	0021      	movs	r1, r4
    bdb6:	2900      	cmp	r1, #0
    bdb8:	d119      	bne.n	bdee <_malloc_r+0x5a>
    bdba:	4c24      	ldr	r4, [pc, #144]	; (be4c <_malloc_r+0xb8>)
    bdbc:	6823      	ldr	r3, [r4, #0]
    bdbe:	2b00      	cmp	r3, #0
    bdc0:	d103      	bne.n	bdca <_malloc_r+0x36>
    bdc2:	0030      	movs	r0, r6
    bdc4:	f000 f8dc 	bl	bf80 <_sbrk_r>
    bdc8:	6020      	str	r0, [r4, #0]
    bdca:	0029      	movs	r1, r5
    bdcc:	0030      	movs	r0, r6
    bdce:	f000 f8d7 	bl	bf80 <_sbrk_r>
    bdd2:	1c43      	adds	r3, r0, #1
    bdd4:	d12c      	bne.n	be30 <_malloc_r+0x9c>
    bdd6:	230c      	movs	r3, #12
    bdd8:	0030      	movs	r0, r6
    bdda:	6033      	str	r3, [r6, #0]
    bddc:	f000 fde7 	bl	c9ae <__malloc_unlock>
    bde0:	e003      	b.n	bdea <_malloc_r+0x56>
    bde2:	2d00      	cmp	r5, #0
    bde4:	dadf      	bge.n	bda6 <_malloc_r+0x12>
    bde6:	230c      	movs	r3, #12
    bde8:	6033      	str	r3, [r6, #0]
    bdea:	2000      	movs	r0, #0
    bdec:	bd70      	pop	{r4, r5, r6, pc}
    bdee:	680b      	ldr	r3, [r1, #0]
    bdf0:	1b5b      	subs	r3, r3, r5
    bdf2:	d41a      	bmi.n	be2a <_malloc_r+0x96>
    bdf4:	2b0b      	cmp	r3, #11
    bdf6:	d903      	bls.n	be00 <_malloc_r+0x6c>
    bdf8:	600b      	str	r3, [r1, #0]
    bdfa:	18cc      	adds	r4, r1, r3
    bdfc:	6025      	str	r5, [r4, #0]
    bdfe:	e003      	b.n	be08 <_malloc_r+0x74>
    be00:	428c      	cmp	r4, r1
    be02:	d10e      	bne.n	be22 <_malloc_r+0x8e>
    be04:	6863      	ldr	r3, [r4, #4]
    be06:	6013      	str	r3, [r2, #0]
    be08:	0030      	movs	r0, r6
    be0a:	f000 fdd0 	bl	c9ae <__malloc_unlock>
    be0e:	0020      	movs	r0, r4
    be10:	2207      	movs	r2, #7
    be12:	300b      	adds	r0, #11
    be14:	1d23      	adds	r3, r4, #4
    be16:	4390      	bics	r0, r2
    be18:	1ac3      	subs	r3, r0, r3
    be1a:	d0e7      	beq.n	bdec <_malloc_r+0x58>
    be1c:	425a      	negs	r2, r3
    be1e:	50e2      	str	r2, [r4, r3]
    be20:	e7e4      	b.n	bdec <_malloc_r+0x58>
    be22:	684b      	ldr	r3, [r1, #4]
    be24:	6063      	str	r3, [r4, #4]
    be26:	000c      	movs	r4, r1
    be28:	e7ee      	b.n	be08 <_malloc_r+0x74>
    be2a:	000c      	movs	r4, r1
    be2c:	6849      	ldr	r1, [r1, #4]
    be2e:	e7c2      	b.n	bdb6 <_malloc_r+0x22>
    be30:	2303      	movs	r3, #3
    be32:	1cc4      	adds	r4, r0, #3
    be34:	439c      	bics	r4, r3
    be36:	42a0      	cmp	r0, r4
    be38:	d0e0      	beq.n	bdfc <_malloc_r+0x68>
    be3a:	1a21      	subs	r1, r4, r0
    be3c:	0030      	movs	r0, r6
    be3e:	f000 f89f 	bl	bf80 <_sbrk_r>
    be42:	1c43      	adds	r3, r0, #1
    be44:	d1da      	bne.n	bdfc <_malloc_r+0x68>
    be46:	e7c6      	b.n	bdd6 <_malloc_r+0x42>
    be48:	20000eec 	.word	0x20000eec
    be4c:	20000ef0 	.word	0x20000ef0

0000be50 <iprintf>:
    be50:	b40f      	push	{r0, r1, r2, r3}
    be52:	4b0b      	ldr	r3, [pc, #44]	; (be80 <iprintf+0x30>)
    be54:	b513      	push	{r0, r1, r4, lr}
    be56:	681c      	ldr	r4, [r3, #0]
    be58:	2c00      	cmp	r4, #0
    be5a:	d005      	beq.n	be68 <iprintf+0x18>
    be5c:	69a3      	ldr	r3, [r4, #24]
    be5e:	2b00      	cmp	r3, #0
    be60:	d102      	bne.n	be68 <iprintf+0x18>
    be62:	0020      	movs	r0, r4
    be64:	f000 fc8c 	bl	c780 <__sinit>
    be68:	ab05      	add	r3, sp, #20
    be6a:	9a04      	ldr	r2, [sp, #16]
    be6c:	68a1      	ldr	r1, [r4, #8]
    be6e:	0020      	movs	r0, r4
    be70:	9301      	str	r3, [sp, #4]
    be72:	f000 ff2b 	bl	cccc <_vfiprintf_r>
    be76:	bc16      	pop	{r1, r2, r4}
    be78:	bc08      	pop	{r3}
    be7a:	b004      	add	sp, #16
    be7c:	4718      	bx	r3
    be7e:	46c0      	nop			; (mov r8, r8)
    be80:	20000150 	.word	0x20000150

0000be84 <putchar>:
    be84:	4b08      	ldr	r3, [pc, #32]	; (bea8 <putchar+0x24>)
    be86:	b570      	push	{r4, r5, r6, lr}
    be88:	681c      	ldr	r4, [r3, #0]
    be8a:	0005      	movs	r5, r0
    be8c:	2c00      	cmp	r4, #0
    be8e:	d005      	beq.n	be9c <putchar+0x18>
    be90:	69a3      	ldr	r3, [r4, #24]
    be92:	2b00      	cmp	r3, #0
    be94:	d102      	bne.n	be9c <putchar+0x18>
    be96:	0020      	movs	r0, r4
    be98:	f000 fc72 	bl	c780 <__sinit>
    be9c:	0029      	movs	r1, r5
    be9e:	68a2      	ldr	r2, [r4, #8]
    bea0:	0020      	movs	r0, r4
    bea2:	f001 f9b7 	bl	d214 <_putc_r>
    bea6:	bd70      	pop	{r4, r5, r6, pc}
    bea8:	20000150 	.word	0x20000150

0000beac <_puts_r>:
    beac:	b570      	push	{r4, r5, r6, lr}
    beae:	0005      	movs	r5, r0
    beb0:	000e      	movs	r6, r1
    beb2:	2800      	cmp	r0, #0
    beb4:	d004      	beq.n	bec0 <_puts_r+0x14>
    beb6:	6983      	ldr	r3, [r0, #24]
    beb8:	2b00      	cmp	r3, #0
    beba:	d101      	bne.n	bec0 <_puts_r+0x14>
    bebc:	f000 fc60 	bl	c780 <__sinit>
    bec0:	69ab      	ldr	r3, [r5, #24]
    bec2:	68ac      	ldr	r4, [r5, #8]
    bec4:	2b00      	cmp	r3, #0
    bec6:	d102      	bne.n	bece <_puts_r+0x22>
    bec8:	0028      	movs	r0, r5
    beca:	f000 fc59 	bl	c780 <__sinit>
    bece:	4b24      	ldr	r3, [pc, #144]	; (bf60 <_puts_r+0xb4>)
    bed0:	429c      	cmp	r4, r3
    bed2:	d10f      	bne.n	bef4 <_puts_r+0x48>
    bed4:	686c      	ldr	r4, [r5, #4]
    bed6:	89a3      	ldrh	r3, [r4, #12]
    bed8:	071b      	lsls	r3, r3, #28
    beda:	d502      	bpl.n	bee2 <_puts_r+0x36>
    bedc:	6923      	ldr	r3, [r4, #16]
    bede:	2b00      	cmp	r3, #0
    bee0:	d120      	bne.n	bf24 <_puts_r+0x78>
    bee2:	0021      	movs	r1, r4
    bee4:	0028      	movs	r0, r5
    bee6:	f000 fadd 	bl	c4a4 <__swsetup_r>
    beea:	2800      	cmp	r0, #0
    beec:	d01a      	beq.n	bf24 <_puts_r+0x78>
    beee:	2001      	movs	r0, #1
    bef0:	4240      	negs	r0, r0
    bef2:	bd70      	pop	{r4, r5, r6, pc}
    bef4:	4b1b      	ldr	r3, [pc, #108]	; (bf64 <_puts_r+0xb8>)
    bef6:	429c      	cmp	r4, r3
    bef8:	d101      	bne.n	befe <_puts_r+0x52>
    befa:	68ac      	ldr	r4, [r5, #8]
    befc:	e7eb      	b.n	bed6 <_puts_r+0x2a>
    befe:	4b1a      	ldr	r3, [pc, #104]	; (bf68 <_puts_r+0xbc>)
    bf00:	429c      	cmp	r4, r3
    bf02:	d1e8      	bne.n	bed6 <_puts_r+0x2a>
    bf04:	68ec      	ldr	r4, [r5, #12]
    bf06:	e7e6      	b.n	bed6 <_puts_r+0x2a>
    bf08:	3b01      	subs	r3, #1
    bf0a:	3601      	adds	r6, #1
    bf0c:	60a3      	str	r3, [r4, #8]
    bf0e:	2b00      	cmp	r3, #0
    bf10:	da04      	bge.n	bf1c <_puts_r+0x70>
    bf12:	69a2      	ldr	r2, [r4, #24]
    bf14:	4293      	cmp	r3, r2
    bf16:	db16      	blt.n	bf46 <_puts_r+0x9a>
    bf18:	290a      	cmp	r1, #10
    bf1a:	d014      	beq.n	bf46 <_puts_r+0x9a>
    bf1c:	6823      	ldr	r3, [r4, #0]
    bf1e:	1c5a      	adds	r2, r3, #1
    bf20:	6022      	str	r2, [r4, #0]
    bf22:	7019      	strb	r1, [r3, #0]
    bf24:	7831      	ldrb	r1, [r6, #0]
    bf26:	68a3      	ldr	r3, [r4, #8]
    bf28:	2900      	cmp	r1, #0
    bf2a:	d1ed      	bne.n	bf08 <_puts_r+0x5c>
    bf2c:	3b01      	subs	r3, #1
    bf2e:	60a3      	str	r3, [r4, #8]
    bf30:	2b00      	cmp	r3, #0
    bf32:	da0f      	bge.n	bf54 <_puts_r+0xa8>
    bf34:	0022      	movs	r2, r4
    bf36:	310a      	adds	r1, #10
    bf38:	0028      	movs	r0, r5
    bf3a:	f000 fa5d 	bl	c3f8 <__swbuf_r>
    bf3e:	1c43      	adds	r3, r0, #1
    bf40:	d0d5      	beq.n	beee <_puts_r+0x42>
    bf42:	200a      	movs	r0, #10
    bf44:	e7d5      	b.n	bef2 <_puts_r+0x46>
    bf46:	0022      	movs	r2, r4
    bf48:	0028      	movs	r0, r5
    bf4a:	f000 fa55 	bl	c3f8 <__swbuf_r>
    bf4e:	1c43      	adds	r3, r0, #1
    bf50:	d1e8      	bne.n	bf24 <_puts_r+0x78>
    bf52:	e7cc      	b.n	beee <_puts_r+0x42>
    bf54:	200a      	movs	r0, #10
    bf56:	6823      	ldr	r3, [r4, #0]
    bf58:	1c5a      	adds	r2, r3, #1
    bf5a:	6022      	str	r2, [r4, #0]
    bf5c:	7018      	strb	r0, [r3, #0]
    bf5e:	e7c8      	b.n	bef2 <_puts_r+0x46>
    bf60:	0000f4e8 	.word	0x0000f4e8
    bf64:	0000f508 	.word	0x0000f508
    bf68:	0000f4c8 	.word	0x0000f4c8

0000bf6c <puts>:
    bf6c:	b510      	push	{r4, lr}
    bf6e:	4b03      	ldr	r3, [pc, #12]	; (bf7c <puts+0x10>)
    bf70:	0001      	movs	r1, r0
    bf72:	6818      	ldr	r0, [r3, #0]
    bf74:	f7ff ff9a 	bl	beac <_puts_r>
    bf78:	bd10      	pop	{r4, pc}
    bf7a:	46c0      	nop			; (mov r8, r8)
    bf7c:	20000150 	.word	0x20000150

0000bf80 <_sbrk_r>:
    bf80:	2300      	movs	r3, #0
    bf82:	b570      	push	{r4, r5, r6, lr}
    bf84:	4c06      	ldr	r4, [pc, #24]	; (bfa0 <_sbrk_r+0x20>)
    bf86:	0005      	movs	r5, r0
    bf88:	0008      	movs	r0, r1
    bf8a:	6023      	str	r3, [r4, #0]
    bf8c:	f7fa fcfc 	bl	6988 <_sbrk>
    bf90:	1c43      	adds	r3, r0, #1
    bf92:	d103      	bne.n	bf9c <_sbrk_r+0x1c>
    bf94:	6823      	ldr	r3, [r4, #0]
    bf96:	2b00      	cmp	r3, #0
    bf98:	d000      	beq.n	bf9c <_sbrk_r+0x1c>
    bf9a:	602b      	str	r3, [r5, #0]
    bf9c:	bd70      	pop	{r4, r5, r6, pc}
    bf9e:	46c0      	nop			; (mov r8, r8)
    bfa0:	200013f4 	.word	0x200013f4

0000bfa4 <setbuf>:
    bfa4:	424a      	negs	r2, r1
    bfa6:	414a      	adcs	r2, r1
    bfa8:	2380      	movs	r3, #128	; 0x80
    bfaa:	b510      	push	{r4, lr}
    bfac:	0052      	lsls	r2, r2, #1
    bfae:	00db      	lsls	r3, r3, #3
    bfb0:	f000 f802 	bl	bfb8 <setvbuf>
    bfb4:	bd10      	pop	{r4, pc}
	...

0000bfb8 <setvbuf>:
    bfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfba:	001d      	movs	r5, r3
    bfbc:	4b4f      	ldr	r3, [pc, #316]	; (c0fc <setvbuf+0x144>)
    bfbe:	b085      	sub	sp, #20
    bfc0:	681e      	ldr	r6, [r3, #0]
    bfc2:	0004      	movs	r4, r0
    bfc4:	000f      	movs	r7, r1
    bfc6:	9200      	str	r2, [sp, #0]
    bfc8:	2e00      	cmp	r6, #0
    bfca:	d005      	beq.n	bfd8 <setvbuf+0x20>
    bfcc:	69b3      	ldr	r3, [r6, #24]
    bfce:	2b00      	cmp	r3, #0
    bfd0:	d102      	bne.n	bfd8 <setvbuf+0x20>
    bfd2:	0030      	movs	r0, r6
    bfd4:	f000 fbd4 	bl	c780 <__sinit>
    bfd8:	4b49      	ldr	r3, [pc, #292]	; (c100 <setvbuf+0x148>)
    bfda:	429c      	cmp	r4, r3
    bfdc:	d150      	bne.n	c080 <setvbuf+0xc8>
    bfde:	6874      	ldr	r4, [r6, #4]
    bfe0:	9b00      	ldr	r3, [sp, #0]
    bfe2:	2b02      	cmp	r3, #2
    bfe4:	d005      	beq.n	bff2 <setvbuf+0x3a>
    bfe6:	2b01      	cmp	r3, #1
    bfe8:	d900      	bls.n	bfec <setvbuf+0x34>
    bfea:	e084      	b.n	c0f6 <setvbuf+0x13e>
    bfec:	2d00      	cmp	r5, #0
    bfee:	da00      	bge.n	bff2 <setvbuf+0x3a>
    bff0:	e081      	b.n	c0f6 <setvbuf+0x13e>
    bff2:	0021      	movs	r1, r4
    bff4:	0030      	movs	r0, r6
    bff6:	f000 fb55 	bl	c6a4 <_fflush_r>
    bffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bffc:	2900      	cmp	r1, #0
    bffe:	d008      	beq.n	c012 <setvbuf+0x5a>
    c000:	0023      	movs	r3, r4
    c002:	3344      	adds	r3, #68	; 0x44
    c004:	4299      	cmp	r1, r3
    c006:	d002      	beq.n	c00e <setvbuf+0x56>
    c008:	0030      	movs	r0, r6
    c00a:	f7ff fe79 	bl	bd00 <_free_r>
    c00e:	2300      	movs	r3, #0
    c010:	6363      	str	r3, [r4, #52]	; 0x34
    c012:	2300      	movs	r3, #0
    c014:	61a3      	str	r3, [r4, #24]
    c016:	6063      	str	r3, [r4, #4]
    c018:	89a3      	ldrh	r3, [r4, #12]
    c01a:	061b      	lsls	r3, r3, #24
    c01c:	d503      	bpl.n	c026 <setvbuf+0x6e>
    c01e:	6921      	ldr	r1, [r4, #16]
    c020:	0030      	movs	r0, r6
    c022:	f7ff fe6d 	bl	bd00 <_free_r>
    c026:	89a3      	ldrh	r3, [r4, #12]
    c028:	4a36      	ldr	r2, [pc, #216]	; (c104 <setvbuf+0x14c>)
    c02a:	4013      	ands	r3, r2
    c02c:	81a3      	strh	r3, [r4, #12]
    c02e:	9b00      	ldr	r3, [sp, #0]
    c030:	2b02      	cmp	r3, #2
    c032:	d05a      	beq.n	c0ea <setvbuf+0x132>
    c034:	ab03      	add	r3, sp, #12
    c036:	aa02      	add	r2, sp, #8
    c038:	0021      	movs	r1, r4
    c03a:	0030      	movs	r0, r6
    c03c:	f000 fc38 	bl	c8b0 <__swhatbuf_r>
    c040:	89a3      	ldrh	r3, [r4, #12]
    c042:	4318      	orrs	r0, r3
    c044:	81a0      	strh	r0, [r4, #12]
    c046:	2d00      	cmp	r5, #0
    c048:	d124      	bne.n	c094 <setvbuf+0xdc>
    c04a:	9d02      	ldr	r5, [sp, #8]
    c04c:	0028      	movs	r0, r5
    c04e:	f7ff fe1f 	bl	bc90 <malloc>
    c052:	9501      	str	r5, [sp, #4]
    c054:	1e07      	subs	r7, r0, #0
    c056:	d142      	bne.n	c0de <setvbuf+0x126>
    c058:	9b02      	ldr	r3, [sp, #8]
    c05a:	9301      	str	r3, [sp, #4]
    c05c:	42ab      	cmp	r3, r5
    c05e:	d139      	bne.n	c0d4 <setvbuf+0x11c>
    c060:	2001      	movs	r0, #1
    c062:	4240      	negs	r0, r0
    c064:	2302      	movs	r3, #2
    c066:	89a2      	ldrh	r2, [r4, #12]
    c068:	4313      	orrs	r3, r2
    c06a:	81a3      	strh	r3, [r4, #12]
    c06c:	2300      	movs	r3, #0
    c06e:	60a3      	str	r3, [r4, #8]
    c070:	0023      	movs	r3, r4
    c072:	3347      	adds	r3, #71	; 0x47
    c074:	6023      	str	r3, [r4, #0]
    c076:	6123      	str	r3, [r4, #16]
    c078:	2301      	movs	r3, #1
    c07a:	6163      	str	r3, [r4, #20]
    c07c:	b005      	add	sp, #20
    c07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c080:	4b21      	ldr	r3, [pc, #132]	; (c108 <setvbuf+0x150>)
    c082:	429c      	cmp	r4, r3
    c084:	d101      	bne.n	c08a <setvbuf+0xd2>
    c086:	68b4      	ldr	r4, [r6, #8]
    c088:	e7aa      	b.n	bfe0 <setvbuf+0x28>
    c08a:	4b20      	ldr	r3, [pc, #128]	; (c10c <setvbuf+0x154>)
    c08c:	429c      	cmp	r4, r3
    c08e:	d1a7      	bne.n	bfe0 <setvbuf+0x28>
    c090:	68f4      	ldr	r4, [r6, #12]
    c092:	e7a5      	b.n	bfe0 <setvbuf+0x28>
    c094:	2f00      	cmp	r7, #0
    c096:	d0d9      	beq.n	c04c <setvbuf+0x94>
    c098:	69b3      	ldr	r3, [r6, #24]
    c09a:	2b00      	cmp	r3, #0
    c09c:	d102      	bne.n	c0a4 <setvbuf+0xec>
    c09e:	0030      	movs	r0, r6
    c0a0:	f000 fb6e 	bl	c780 <__sinit>
    c0a4:	9b00      	ldr	r3, [sp, #0]
    c0a6:	2b01      	cmp	r3, #1
    c0a8:	d103      	bne.n	c0b2 <setvbuf+0xfa>
    c0aa:	89a3      	ldrh	r3, [r4, #12]
    c0ac:	9a00      	ldr	r2, [sp, #0]
    c0ae:	431a      	orrs	r2, r3
    c0b0:	81a2      	strh	r2, [r4, #12]
    c0b2:	2008      	movs	r0, #8
    c0b4:	89a3      	ldrh	r3, [r4, #12]
    c0b6:	6027      	str	r7, [r4, #0]
    c0b8:	6127      	str	r7, [r4, #16]
    c0ba:	6165      	str	r5, [r4, #20]
    c0bc:	4018      	ands	r0, r3
    c0be:	d018      	beq.n	c0f2 <setvbuf+0x13a>
    c0c0:	2001      	movs	r0, #1
    c0c2:	4018      	ands	r0, r3
    c0c4:	2300      	movs	r3, #0
    c0c6:	4298      	cmp	r0, r3
    c0c8:	d011      	beq.n	c0ee <setvbuf+0x136>
    c0ca:	426d      	negs	r5, r5
    c0cc:	60a3      	str	r3, [r4, #8]
    c0ce:	61a5      	str	r5, [r4, #24]
    c0d0:	0018      	movs	r0, r3
    c0d2:	e7d3      	b.n	c07c <setvbuf+0xc4>
    c0d4:	9801      	ldr	r0, [sp, #4]
    c0d6:	f7ff fddb 	bl	bc90 <malloc>
    c0da:	1e07      	subs	r7, r0, #0
    c0dc:	d0c0      	beq.n	c060 <setvbuf+0xa8>
    c0de:	2380      	movs	r3, #128	; 0x80
    c0e0:	89a2      	ldrh	r2, [r4, #12]
    c0e2:	9d01      	ldr	r5, [sp, #4]
    c0e4:	4313      	orrs	r3, r2
    c0e6:	81a3      	strh	r3, [r4, #12]
    c0e8:	e7d6      	b.n	c098 <setvbuf+0xe0>
    c0ea:	2000      	movs	r0, #0
    c0ec:	e7ba      	b.n	c064 <setvbuf+0xac>
    c0ee:	60a5      	str	r5, [r4, #8]
    c0f0:	e7c4      	b.n	c07c <setvbuf+0xc4>
    c0f2:	60a0      	str	r0, [r4, #8]
    c0f4:	e7c2      	b.n	c07c <setvbuf+0xc4>
    c0f6:	2001      	movs	r0, #1
    c0f8:	4240      	negs	r0, r0
    c0fa:	e7bf      	b.n	c07c <setvbuf+0xc4>
    c0fc:	20000150 	.word	0x20000150
    c100:	0000f4e8 	.word	0x0000f4e8
    c104:	fffff35c 	.word	0xfffff35c
    c108:	0000f508 	.word	0x0000f508
    c10c:	0000f4c8 	.word	0x0000f4c8

0000c110 <sniprintf>:
    c110:	b40c      	push	{r2, r3}
    c112:	b530      	push	{r4, r5, lr}
    c114:	4b16      	ldr	r3, [pc, #88]	; (c170 <sniprintf+0x60>)
    c116:	b09d      	sub	sp, #116	; 0x74
    c118:	1e0c      	subs	r4, r1, #0
    c11a:	681d      	ldr	r5, [r3, #0]
    c11c:	da08      	bge.n	c130 <sniprintf+0x20>
    c11e:	238b      	movs	r3, #139	; 0x8b
    c120:	2001      	movs	r0, #1
    c122:	602b      	str	r3, [r5, #0]
    c124:	4240      	negs	r0, r0
    c126:	b01d      	add	sp, #116	; 0x74
    c128:	bc30      	pop	{r4, r5}
    c12a:	bc08      	pop	{r3}
    c12c:	b002      	add	sp, #8
    c12e:	4718      	bx	r3
    c130:	2382      	movs	r3, #130	; 0x82
    c132:	a902      	add	r1, sp, #8
    c134:	009b      	lsls	r3, r3, #2
    c136:	818b      	strh	r3, [r1, #12]
    c138:	2300      	movs	r3, #0
    c13a:	9002      	str	r0, [sp, #8]
    c13c:	6108      	str	r0, [r1, #16]
    c13e:	429c      	cmp	r4, r3
    c140:	d000      	beq.n	c144 <sniprintf+0x34>
    c142:	1e63      	subs	r3, r4, #1
    c144:	608b      	str	r3, [r1, #8]
    c146:	614b      	str	r3, [r1, #20]
    c148:	2301      	movs	r3, #1
    c14a:	425b      	negs	r3, r3
    c14c:	81cb      	strh	r3, [r1, #14]
    c14e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    c150:	ab21      	add	r3, sp, #132	; 0x84
    c152:	0028      	movs	r0, r5
    c154:	9301      	str	r3, [sp, #4]
    c156:	f000 fc8d 	bl	ca74 <_svfiprintf_r>
    c15a:	1c43      	adds	r3, r0, #1
    c15c:	da01      	bge.n	c162 <sniprintf+0x52>
    c15e:	238b      	movs	r3, #139	; 0x8b
    c160:	602b      	str	r3, [r5, #0]
    c162:	2c00      	cmp	r4, #0
    c164:	d0df      	beq.n	c126 <sniprintf+0x16>
    c166:	2300      	movs	r3, #0
    c168:	9a02      	ldr	r2, [sp, #8]
    c16a:	7013      	strb	r3, [r2, #0]
    c16c:	e7db      	b.n	c126 <sniprintf+0x16>
    c16e:	46c0      	nop			; (mov r8, r8)
    c170:	20000150 	.word	0x20000150

0000c174 <siprintf>:
    c174:	b40e      	push	{r1, r2, r3}
    c176:	b510      	push	{r4, lr}
    c178:	b09d      	sub	sp, #116	; 0x74
    c17a:	a902      	add	r1, sp, #8
    c17c:	9002      	str	r0, [sp, #8]
    c17e:	6108      	str	r0, [r1, #16]
    c180:	480b      	ldr	r0, [pc, #44]	; (c1b0 <siprintf+0x3c>)
    c182:	2482      	movs	r4, #130	; 0x82
    c184:	6088      	str	r0, [r1, #8]
    c186:	6148      	str	r0, [r1, #20]
    c188:	2001      	movs	r0, #1
    c18a:	4240      	negs	r0, r0
    c18c:	ab1f      	add	r3, sp, #124	; 0x7c
    c18e:	81c8      	strh	r0, [r1, #14]
    c190:	4808      	ldr	r0, [pc, #32]	; (c1b4 <siprintf+0x40>)
    c192:	cb04      	ldmia	r3!, {r2}
    c194:	00a4      	lsls	r4, r4, #2
    c196:	6800      	ldr	r0, [r0, #0]
    c198:	9301      	str	r3, [sp, #4]
    c19a:	818c      	strh	r4, [r1, #12]
    c19c:	f000 fc6a 	bl	ca74 <_svfiprintf_r>
    c1a0:	2300      	movs	r3, #0
    c1a2:	9a02      	ldr	r2, [sp, #8]
    c1a4:	7013      	strb	r3, [r2, #0]
    c1a6:	b01d      	add	sp, #116	; 0x74
    c1a8:	bc10      	pop	{r4}
    c1aa:	bc08      	pop	{r3}
    c1ac:	b003      	add	sp, #12
    c1ae:	4718      	bx	r3
    c1b0:	7fffffff 	.word	0x7fffffff
    c1b4:	20000150 	.word	0x20000150

0000c1b8 <strcmp>:
    c1b8:	7802      	ldrb	r2, [r0, #0]
    c1ba:	780b      	ldrb	r3, [r1, #0]
    c1bc:	2a00      	cmp	r2, #0
    c1be:	d003      	beq.n	c1c8 <strcmp+0x10>
    c1c0:	3001      	adds	r0, #1
    c1c2:	3101      	adds	r1, #1
    c1c4:	429a      	cmp	r2, r3
    c1c6:	d0f7      	beq.n	c1b8 <strcmp>
    c1c8:	1ad0      	subs	r0, r2, r3
    c1ca:	4770      	bx	lr

0000c1cc <strcpy>:
    c1cc:	1c03      	adds	r3, r0, #0
    c1ce:	780a      	ldrb	r2, [r1, #0]
    c1d0:	3101      	adds	r1, #1
    c1d2:	701a      	strb	r2, [r3, #0]
    c1d4:	3301      	adds	r3, #1
    c1d6:	2a00      	cmp	r2, #0
    c1d8:	d1f9      	bne.n	c1ce <strcpy+0x2>
    c1da:	4770      	bx	lr

0000c1dc <strdup>:
    c1dc:	b510      	push	{r4, lr}
    c1de:	4b03      	ldr	r3, [pc, #12]	; (c1ec <strdup+0x10>)
    c1e0:	0001      	movs	r1, r0
    c1e2:	6818      	ldr	r0, [r3, #0]
    c1e4:	f000 f804 	bl	c1f0 <_strdup_r>
    c1e8:	bd10      	pop	{r4, pc}
    c1ea:	46c0      	nop			; (mov r8, r8)
    c1ec:	20000150 	.word	0x20000150

0000c1f0 <_strdup_r>:
    c1f0:	b570      	push	{r4, r5, r6, lr}
    c1f2:	0005      	movs	r5, r0
    c1f4:	0008      	movs	r0, r1
    c1f6:	000e      	movs	r6, r1
    c1f8:	f000 f80d 	bl	c216 <strlen>
    c1fc:	1c44      	adds	r4, r0, #1
    c1fe:	0021      	movs	r1, r4
    c200:	0028      	movs	r0, r5
    c202:	f7ff fdc7 	bl	bd94 <_malloc_r>
    c206:	1e05      	subs	r5, r0, #0
    c208:	d003      	beq.n	c212 <_strdup_r+0x22>
    c20a:	0022      	movs	r2, r4
    c20c:	0031      	movs	r1, r6
    c20e:	f7ff fd53 	bl	bcb8 <memcpy>
    c212:	0028      	movs	r0, r5
    c214:	bd70      	pop	{r4, r5, r6, pc}

0000c216 <strlen>:
    c216:	2300      	movs	r3, #0
    c218:	5cc2      	ldrb	r2, [r0, r3]
    c21a:	3301      	adds	r3, #1
    c21c:	2a00      	cmp	r2, #0
    c21e:	d1fb      	bne.n	c218 <strlen+0x2>
    c220:	1e58      	subs	r0, r3, #1
    c222:	4770      	bx	lr

0000c224 <strncmp>:
    c224:	2300      	movs	r3, #0
    c226:	b530      	push	{r4, r5, lr}
    c228:	429a      	cmp	r2, r3
    c22a:	d00a      	beq.n	c242 <strncmp+0x1e>
    c22c:	3a01      	subs	r2, #1
    c22e:	5cc4      	ldrb	r4, [r0, r3]
    c230:	5ccd      	ldrb	r5, [r1, r3]
    c232:	42ac      	cmp	r4, r5
    c234:	d104      	bne.n	c240 <strncmp+0x1c>
    c236:	429a      	cmp	r2, r3
    c238:	d002      	beq.n	c240 <strncmp+0x1c>
    c23a:	3301      	adds	r3, #1
    c23c:	2c00      	cmp	r4, #0
    c23e:	d1f6      	bne.n	c22e <strncmp+0xa>
    c240:	1b63      	subs	r3, r4, r5
    c242:	0018      	movs	r0, r3
    c244:	bd30      	pop	{r4, r5, pc}

0000c246 <strncpy>:
    c246:	b570      	push	{r4, r5, r6, lr}
    c248:	0004      	movs	r4, r0
    c24a:	2a00      	cmp	r2, #0
    c24c:	d100      	bne.n	c250 <strncpy+0xa>
    c24e:	bd70      	pop	{r4, r5, r6, pc}
    c250:	780d      	ldrb	r5, [r1, #0]
    c252:	1e56      	subs	r6, r2, #1
    c254:	1c63      	adds	r3, r4, #1
    c256:	7025      	strb	r5, [r4, #0]
    c258:	3101      	adds	r1, #1
    c25a:	2d00      	cmp	r5, #0
    c25c:	d105      	bne.n	c26a <strncpy+0x24>
    c25e:	18a4      	adds	r4, r4, r2
    c260:	429c      	cmp	r4, r3
    c262:	d0f4      	beq.n	c24e <strncpy+0x8>
    c264:	701d      	strb	r5, [r3, #0]
    c266:	3301      	adds	r3, #1
    c268:	e7fa      	b.n	c260 <strncpy+0x1a>
    c26a:	001c      	movs	r4, r3
    c26c:	0032      	movs	r2, r6
    c26e:	e7ec      	b.n	c24a <strncpy+0x4>

0000c270 <strrchr>:
    c270:	b570      	push	{r4, r5, r6, lr}
    c272:	000d      	movs	r5, r1
    c274:	2400      	movs	r4, #0
    c276:	2900      	cmp	r1, #0
    c278:	d105      	bne.n	c286 <strrchr+0x16>
    c27a:	f001 f84d 	bl	d318 <strchr>
    c27e:	0004      	movs	r4, r0
    c280:	e006      	b.n	c290 <strrchr+0x20>
    c282:	001c      	movs	r4, r3
    c284:	1c58      	adds	r0, r3, #1
    c286:	0029      	movs	r1, r5
    c288:	f001 f846 	bl	d318 <strchr>
    c28c:	1e03      	subs	r3, r0, #0
    c28e:	d1f8      	bne.n	c282 <strrchr+0x12>
    c290:	0020      	movs	r0, r4
    c292:	bd70      	pop	{r4, r5, r6, pc}

0000c294 <strstr>:
    c294:	b510      	push	{r4, lr}
    c296:	0002      	movs	r2, r0
    c298:	7800      	ldrb	r0, [r0, #0]
    c29a:	2800      	cmp	r0, #0
    c29c:	d104      	bne.n	c2a8 <strstr+0x14>
    c29e:	7809      	ldrb	r1, [r1, #0]
    c2a0:	2900      	cmp	r1, #0
    c2a2:	d00d      	beq.n	c2c0 <strstr+0x2c>
    c2a4:	bd10      	pop	{r4, pc}
    c2a6:	3201      	adds	r2, #1
    c2a8:	7810      	ldrb	r0, [r2, #0]
    c2aa:	2800      	cmp	r0, #0
    c2ac:	d0fa      	beq.n	c2a4 <strstr+0x10>
    c2ae:	2300      	movs	r3, #0
    c2b0:	5cc8      	ldrb	r0, [r1, r3]
    c2b2:	2800      	cmp	r0, #0
    c2b4:	d004      	beq.n	c2c0 <strstr+0x2c>
    c2b6:	5cd4      	ldrb	r4, [r2, r3]
    c2b8:	4284      	cmp	r4, r0
    c2ba:	d1f4      	bne.n	c2a6 <strstr+0x12>
    c2bc:	3301      	adds	r3, #1
    c2be:	e7f7      	b.n	c2b0 <strstr+0x1c>
    c2c0:	0010      	movs	r0, r2
    c2c2:	e7ef      	b.n	c2a4 <strstr+0x10>

0000c2c4 <_strtol_l.isra.0>:
    c2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c2c6:	001f      	movs	r7, r3
    c2c8:	000e      	movs	r6, r1
    c2ca:	b087      	sub	sp, #28
    c2cc:	9005      	str	r0, [sp, #20]
    c2ce:	9103      	str	r1, [sp, #12]
    c2d0:	9202      	str	r2, [sp, #8]
    c2d2:	980c      	ldr	r0, [sp, #48]	; 0x30
    c2d4:	7834      	ldrb	r4, [r6, #0]
    c2d6:	f000 fae8 	bl	c8aa <__locale_ctype_ptr_l>
    c2da:	2208      	movs	r2, #8
    c2dc:	1900      	adds	r0, r0, r4
    c2de:	7843      	ldrb	r3, [r0, #1]
    c2e0:	1c75      	adds	r5, r6, #1
    c2e2:	4013      	ands	r3, r2
    c2e4:	d10c      	bne.n	c300 <_strtol_l.isra.0+0x3c>
    c2e6:	2c2d      	cmp	r4, #45	; 0x2d
    c2e8:	d10c      	bne.n	c304 <_strtol_l.isra.0+0x40>
    c2ea:	3301      	adds	r3, #1
    c2ec:	782c      	ldrb	r4, [r5, #0]
    c2ee:	9301      	str	r3, [sp, #4]
    c2f0:	1cb5      	adds	r5, r6, #2
    c2f2:	2f00      	cmp	r7, #0
    c2f4:	d00c      	beq.n	c310 <_strtol_l.isra.0+0x4c>
    c2f6:	2f10      	cmp	r7, #16
    c2f8:	d114      	bne.n	c324 <_strtol_l.isra.0+0x60>
    c2fa:	2c30      	cmp	r4, #48	; 0x30
    c2fc:	d00a      	beq.n	c314 <_strtol_l.isra.0+0x50>
    c2fe:	e011      	b.n	c324 <_strtol_l.isra.0+0x60>
    c300:	002e      	movs	r6, r5
    c302:	e7e6      	b.n	c2d2 <_strtol_l.isra.0+0xe>
    c304:	9301      	str	r3, [sp, #4]
    c306:	2c2b      	cmp	r4, #43	; 0x2b
    c308:	d1f3      	bne.n	c2f2 <_strtol_l.isra.0+0x2e>
    c30a:	782c      	ldrb	r4, [r5, #0]
    c30c:	1cb5      	adds	r5, r6, #2
    c30e:	e7f0      	b.n	c2f2 <_strtol_l.isra.0+0x2e>
    c310:	2c30      	cmp	r4, #48	; 0x30
    c312:	d12f      	bne.n	c374 <_strtol_l.isra.0+0xb0>
    c314:	2220      	movs	r2, #32
    c316:	782b      	ldrb	r3, [r5, #0]
    c318:	4393      	bics	r3, r2
    c31a:	2b58      	cmp	r3, #88	; 0x58
    c31c:	d151      	bne.n	c3c2 <_strtol_l.isra.0+0xfe>
    c31e:	2710      	movs	r7, #16
    c320:	786c      	ldrb	r4, [r5, #1]
    c322:	3502      	adds	r5, #2
    c324:	9b01      	ldr	r3, [sp, #4]
    c326:	4a29      	ldr	r2, [pc, #164]	; (c3cc <_strtol_l.isra.0+0x108>)
    c328:	0039      	movs	r1, r7
    c32a:	189e      	adds	r6, r3, r2
    c32c:	0030      	movs	r0, r6
    c32e:	f7ff fb6b 	bl	ba08 <__aeabi_uidivmod>
    c332:	0030      	movs	r0, r6
    c334:	9104      	str	r1, [sp, #16]
    c336:	0039      	movs	r1, r7
    c338:	f7ff fae0 	bl	b8fc <__udivsi3>
    c33c:	2101      	movs	r1, #1
    c33e:	2300      	movs	r3, #0
    c340:	4249      	negs	r1, r1
    c342:	0002      	movs	r2, r0
    c344:	468c      	mov	ip, r1
    c346:	0018      	movs	r0, r3
    c348:	0021      	movs	r1, r4
    c34a:	3930      	subs	r1, #48	; 0x30
    c34c:	2909      	cmp	r1, #9
    c34e:	d813      	bhi.n	c378 <_strtol_l.isra.0+0xb4>
    c350:	000c      	movs	r4, r1
    c352:	42a7      	cmp	r7, r4
    c354:	dd1c      	ble.n	c390 <_strtol_l.isra.0+0xcc>
    c356:	1c59      	adds	r1, r3, #1
    c358:	d009      	beq.n	c36e <_strtol_l.isra.0+0xaa>
    c35a:	4663      	mov	r3, ip
    c35c:	4282      	cmp	r2, r0
    c35e:	d306      	bcc.n	c36e <_strtol_l.isra.0+0xaa>
    c360:	d102      	bne.n	c368 <_strtol_l.isra.0+0xa4>
    c362:	9904      	ldr	r1, [sp, #16]
    c364:	42a1      	cmp	r1, r4
    c366:	db02      	blt.n	c36e <_strtol_l.isra.0+0xaa>
    c368:	2301      	movs	r3, #1
    c36a:	4378      	muls	r0, r7
    c36c:	1820      	adds	r0, r4, r0
    c36e:	782c      	ldrb	r4, [r5, #0]
    c370:	3501      	adds	r5, #1
    c372:	e7e9      	b.n	c348 <_strtol_l.isra.0+0x84>
    c374:	270a      	movs	r7, #10
    c376:	e7d5      	b.n	c324 <_strtol_l.isra.0+0x60>
    c378:	0021      	movs	r1, r4
    c37a:	3941      	subs	r1, #65	; 0x41
    c37c:	2919      	cmp	r1, #25
    c37e:	d801      	bhi.n	c384 <_strtol_l.isra.0+0xc0>
    c380:	3c37      	subs	r4, #55	; 0x37
    c382:	e7e6      	b.n	c352 <_strtol_l.isra.0+0x8e>
    c384:	0021      	movs	r1, r4
    c386:	3961      	subs	r1, #97	; 0x61
    c388:	2919      	cmp	r1, #25
    c38a:	d801      	bhi.n	c390 <_strtol_l.isra.0+0xcc>
    c38c:	3c57      	subs	r4, #87	; 0x57
    c38e:	e7e0      	b.n	c352 <_strtol_l.isra.0+0x8e>
    c390:	1c5a      	adds	r2, r3, #1
    c392:	d108      	bne.n	c3a6 <_strtol_l.isra.0+0xe2>
    c394:	9a05      	ldr	r2, [sp, #20]
    c396:	3323      	adds	r3, #35	; 0x23
    c398:	6013      	str	r3, [r2, #0]
    c39a:	9b02      	ldr	r3, [sp, #8]
    c39c:	0030      	movs	r0, r6
    c39e:	2b00      	cmp	r3, #0
    c3a0:	d10b      	bne.n	c3ba <_strtol_l.isra.0+0xf6>
    c3a2:	b007      	add	sp, #28
    c3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3a6:	9a01      	ldr	r2, [sp, #4]
    c3a8:	2a00      	cmp	r2, #0
    c3aa:	d000      	beq.n	c3ae <_strtol_l.isra.0+0xea>
    c3ac:	4240      	negs	r0, r0
    c3ae:	9a02      	ldr	r2, [sp, #8]
    c3b0:	2a00      	cmp	r2, #0
    c3b2:	d0f6      	beq.n	c3a2 <_strtol_l.isra.0+0xde>
    c3b4:	9a03      	ldr	r2, [sp, #12]
    c3b6:	2b00      	cmp	r3, #0
    c3b8:	d000      	beq.n	c3bc <_strtol_l.isra.0+0xf8>
    c3ba:	1e6a      	subs	r2, r5, #1
    c3bc:	9b02      	ldr	r3, [sp, #8]
    c3be:	601a      	str	r2, [r3, #0]
    c3c0:	e7ef      	b.n	c3a2 <_strtol_l.isra.0+0xde>
    c3c2:	2430      	movs	r4, #48	; 0x30
    c3c4:	2f00      	cmp	r7, #0
    c3c6:	d1ad      	bne.n	c324 <_strtol_l.isra.0+0x60>
    c3c8:	3708      	adds	r7, #8
    c3ca:	e7ab      	b.n	c324 <_strtol_l.isra.0+0x60>
    c3cc:	7fffffff 	.word	0x7fffffff

0000c3d0 <strtol>:
    c3d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c3d2:	0013      	movs	r3, r2
    c3d4:	4a06      	ldr	r2, [pc, #24]	; (c3f0 <strtol+0x20>)
    c3d6:	0005      	movs	r5, r0
    c3d8:	6810      	ldr	r0, [r2, #0]
    c3da:	6a04      	ldr	r4, [r0, #32]
    c3dc:	2c00      	cmp	r4, #0
    c3de:	d100      	bne.n	c3e2 <strtol+0x12>
    c3e0:	4c04      	ldr	r4, [pc, #16]	; (c3f4 <strtol+0x24>)
    c3e2:	000a      	movs	r2, r1
    c3e4:	9400      	str	r4, [sp, #0]
    c3e6:	0029      	movs	r1, r5
    c3e8:	f7ff ff6c 	bl	c2c4 <_strtol_l.isra.0>
    c3ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c3ee:	46c0      	nop			; (mov r8, r8)
    c3f0:	20000150 	.word	0x20000150
    c3f4:	200001b4 	.word	0x200001b4

0000c3f8 <__swbuf_r>:
    c3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3fa:	0005      	movs	r5, r0
    c3fc:	000e      	movs	r6, r1
    c3fe:	0014      	movs	r4, r2
    c400:	2800      	cmp	r0, #0
    c402:	d004      	beq.n	c40e <__swbuf_r+0x16>
    c404:	6983      	ldr	r3, [r0, #24]
    c406:	2b00      	cmp	r3, #0
    c408:	d101      	bne.n	c40e <__swbuf_r+0x16>
    c40a:	f000 f9b9 	bl	c780 <__sinit>
    c40e:	4b22      	ldr	r3, [pc, #136]	; (c498 <__swbuf_r+0xa0>)
    c410:	429c      	cmp	r4, r3
    c412:	d12d      	bne.n	c470 <__swbuf_r+0x78>
    c414:	686c      	ldr	r4, [r5, #4]
    c416:	69a3      	ldr	r3, [r4, #24]
    c418:	60a3      	str	r3, [r4, #8]
    c41a:	89a3      	ldrh	r3, [r4, #12]
    c41c:	071b      	lsls	r3, r3, #28
    c41e:	d531      	bpl.n	c484 <__swbuf_r+0x8c>
    c420:	6923      	ldr	r3, [r4, #16]
    c422:	2b00      	cmp	r3, #0
    c424:	d02e      	beq.n	c484 <__swbuf_r+0x8c>
    c426:	6823      	ldr	r3, [r4, #0]
    c428:	6922      	ldr	r2, [r4, #16]
    c42a:	b2f7      	uxtb	r7, r6
    c42c:	1a98      	subs	r0, r3, r2
    c42e:	6963      	ldr	r3, [r4, #20]
    c430:	b2f6      	uxtb	r6, r6
    c432:	4298      	cmp	r0, r3
    c434:	db05      	blt.n	c442 <__swbuf_r+0x4a>
    c436:	0021      	movs	r1, r4
    c438:	0028      	movs	r0, r5
    c43a:	f000 f933 	bl	c6a4 <_fflush_r>
    c43e:	2800      	cmp	r0, #0
    c440:	d126      	bne.n	c490 <__swbuf_r+0x98>
    c442:	68a3      	ldr	r3, [r4, #8]
    c444:	3001      	adds	r0, #1
    c446:	3b01      	subs	r3, #1
    c448:	60a3      	str	r3, [r4, #8]
    c44a:	6823      	ldr	r3, [r4, #0]
    c44c:	1c5a      	adds	r2, r3, #1
    c44e:	6022      	str	r2, [r4, #0]
    c450:	701f      	strb	r7, [r3, #0]
    c452:	6963      	ldr	r3, [r4, #20]
    c454:	4298      	cmp	r0, r3
    c456:	d004      	beq.n	c462 <__swbuf_r+0x6a>
    c458:	89a3      	ldrh	r3, [r4, #12]
    c45a:	07db      	lsls	r3, r3, #31
    c45c:	d51a      	bpl.n	c494 <__swbuf_r+0x9c>
    c45e:	2e0a      	cmp	r6, #10
    c460:	d118      	bne.n	c494 <__swbuf_r+0x9c>
    c462:	0021      	movs	r1, r4
    c464:	0028      	movs	r0, r5
    c466:	f000 f91d 	bl	c6a4 <_fflush_r>
    c46a:	2800      	cmp	r0, #0
    c46c:	d012      	beq.n	c494 <__swbuf_r+0x9c>
    c46e:	e00f      	b.n	c490 <__swbuf_r+0x98>
    c470:	4b0a      	ldr	r3, [pc, #40]	; (c49c <__swbuf_r+0xa4>)
    c472:	429c      	cmp	r4, r3
    c474:	d101      	bne.n	c47a <__swbuf_r+0x82>
    c476:	68ac      	ldr	r4, [r5, #8]
    c478:	e7cd      	b.n	c416 <__swbuf_r+0x1e>
    c47a:	4b09      	ldr	r3, [pc, #36]	; (c4a0 <__swbuf_r+0xa8>)
    c47c:	429c      	cmp	r4, r3
    c47e:	d1ca      	bne.n	c416 <__swbuf_r+0x1e>
    c480:	68ec      	ldr	r4, [r5, #12]
    c482:	e7c8      	b.n	c416 <__swbuf_r+0x1e>
    c484:	0021      	movs	r1, r4
    c486:	0028      	movs	r0, r5
    c488:	f000 f80c 	bl	c4a4 <__swsetup_r>
    c48c:	2800      	cmp	r0, #0
    c48e:	d0ca      	beq.n	c426 <__swbuf_r+0x2e>
    c490:	2601      	movs	r6, #1
    c492:	4276      	negs	r6, r6
    c494:	0030      	movs	r0, r6
    c496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c498:	0000f4e8 	.word	0x0000f4e8
    c49c:	0000f508 	.word	0x0000f508
    c4a0:	0000f4c8 	.word	0x0000f4c8

0000c4a4 <__swsetup_r>:
    c4a4:	4b36      	ldr	r3, [pc, #216]	; (c580 <__swsetup_r+0xdc>)
    c4a6:	b570      	push	{r4, r5, r6, lr}
    c4a8:	681d      	ldr	r5, [r3, #0]
    c4aa:	0006      	movs	r6, r0
    c4ac:	000c      	movs	r4, r1
    c4ae:	2d00      	cmp	r5, #0
    c4b0:	d005      	beq.n	c4be <__swsetup_r+0x1a>
    c4b2:	69ab      	ldr	r3, [r5, #24]
    c4b4:	2b00      	cmp	r3, #0
    c4b6:	d102      	bne.n	c4be <__swsetup_r+0x1a>
    c4b8:	0028      	movs	r0, r5
    c4ba:	f000 f961 	bl	c780 <__sinit>
    c4be:	4b31      	ldr	r3, [pc, #196]	; (c584 <__swsetup_r+0xe0>)
    c4c0:	429c      	cmp	r4, r3
    c4c2:	d10f      	bne.n	c4e4 <__swsetup_r+0x40>
    c4c4:	686c      	ldr	r4, [r5, #4]
    c4c6:	230c      	movs	r3, #12
    c4c8:	5ee2      	ldrsh	r2, [r4, r3]
    c4ca:	b293      	uxth	r3, r2
    c4cc:	0719      	lsls	r1, r3, #28
    c4ce:	d42d      	bmi.n	c52c <__swsetup_r+0x88>
    c4d0:	06d9      	lsls	r1, r3, #27
    c4d2:	d411      	bmi.n	c4f8 <__swsetup_r+0x54>
    c4d4:	2309      	movs	r3, #9
    c4d6:	2001      	movs	r0, #1
    c4d8:	6033      	str	r3, [r6, #0]
    c4da:	3337      	adds	r3, #55	; 0x37
    c4dc:	4313      	orrs	r3, r2
    c4de:	81a3      	strh	r3, [r4, #12]
    c4e0:	4240      	negs	r0, r0
    c4e2:	bd70      	pop	{r4, r5, r6, pc}
    c4e4:	4b28      	ldr	r3, [pc, #160]	; (c588 <__swsetup_r+0xe4>)
    c4e6:	429c      	cmp	r4, r3
    c4e8:	d101      	bne.n	c4ee <__swsetup_r+0x4a>
    c4ea:	68ac      	ldr	r4, [r5, #8]
    c4ec:	e7eb      	b.n	c4c6 <__swsetup_r+0x22>
    c4ee:	4b27      	ldr	r3, [pc, #156]	; (c58c <__swsetup_r+0xe8>)
    c4f0:	429c      	cmp	r4, r3
    c4f2:	d1e8      	bne.n	c4c6 <__swsetup_r+0x22>
    c4f4:	68ec      	ldr	r4, [r5, #12]
    c4f6:	e7e6      	b.n	c4c6 <__swsetup_r+0x22>
    c4f8:	075b      	lsls	r3, r3, #29
    c4fa:	d513      	bpl.n	c524 <__swsetup_r+0x80>
    c4fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c4fe:	2900      	cmp	r1, #0
    c500:	d008      	beq.n	c514 <__swsetup_r+0x70>
    c502:	0023      	movs	r3, r4
    c504:	3344      	adds	r3, #68	; 0x44
    c506:	4299      	cmp	r1, r3
    c508:	d002      	beq.n	c510 <__swsetup_r+0x6c>
    c50a:	0030      	movs	r0, r6
    c50c:	f7ff fbf8 	bl	bd00 <_free_r>
    c510:	2300      	movs	r3, #0
    c512:	6363      	str	r3, [r4, #52]	; 0x34
    c514:	2224      	movs	r2, #36	; 0x24
    c516:	89a3      	ldrh	r3, [r4, #12]
    c518:	4393      	bics	r3, r2
    c51a:	81a3      	strh	r3, [r4, #12]
    c51c:	2300      	movs	r3, #0
    c51e:	6063      	str	r3, [r4, #4]
    c520:	6923      	ldr	r3, [r4, #16]
    c522:	6023      	str	r3, [r4, #0]
    c524:	2308      	movs	r3, #8
    c526:	89a2      	ldrh	r2, [r4, #12]
    c528:	4313      	orrs	r3, r2
    c52a:	81a3      	strh	r3, [r4, #12]
    c52c:	6923      	ldr	r3, [r4, #16]
    c52e:	2b00      	cmp	r3, #0
    c530:	d10b      	bne.n	c54a <__swsetup_r+0xa6>
    c532:	21a0      	movs	r1, #160	; 0xa0
    c534:	2280      	movs	r2, #128	; 0x80
    c536:	89a3      	ldrh	r3, [r4, #12]
    c538:	0089      	lsls	r1, r1, #2
    c53a:	0092      	lsls	r2, r2, #2
    c53c:	400b      	ands	r3, r1
    c53e:	4293      	cmp	r3, r2
    c540:	d003      	beq.n	c54a <__swsetup_r+0xa6>
    c542:	0021      	movs	r1, r4
    c544:	0030      	movs	r0, r6
    c546:	f000 f9db 	bl	c900 <__smakebuf_r>
    c54a:	2301      	movs	r3, #1
    c54c:	89a2      	ldrh	r2, [r4, #12]
    c54e:	4013      	ands	r3, r2
    c550:	d011      	beq.n	c576 <__swsetup_r+0xd2>
    c552:	2300      	movs	r3, #0
    c554:	60a3      	str	r3, [r4, #8]
    c556:	6963      	ldr	r3, [r4, #20]
    c558:	425b      	negs	r3, r3
    c55a:	61a3      	str	r3, [r4, #24]
    c55c:	2000      	movs	r0, #0
    c55e:	6923      	ldr	r3, [r4, #16]
    c560:	4283      	cmp	r3, r0
    c562:	d1be      	bne.n	c4e2 <__swsetup_r+0x3e>
    c564:	230c      	movs	r3, #12
    c566:	5ee2      	ldrsh	r2, [r4, r3]
    c568:	0613      	lsls	r3, r2, #24
    c56a:	d5ba      	bpl.n	c4e2 <__swsetup_r+0x3e>
    c56c:	2340      	movs	r3, #64	; 0x40
    c56e:	4313      	orrs	r3, r2
    c570:	81a3      	strh	r3, [r4, #12]
    c572:	3801      	subs	r0, #1
    c574:	e7b5      	b.n	c4e2 <__swsetup_r+0x3e>
    c576:	0792      	lsls	r2, r2, #30
    c578:	d400      	bmi.n	c57c <__swsetup_r+0xd8>
    c57a:	6963      	ldr	r3, [r4, #20]
    c57c:	60a3      	str	r3, [r4, #8]
    c57e:	e7ed      	b.n	c55c <__swsetup_r+0xb8>
    c580:	20000150 	.word	0x20000150
    c584:	0000f4e8 	.word	0x0000f4e8
    c588:	0000f508 	.word	0x0000f508
    c58c:	0000f4c8 	.word	0x0000f4c8

0000c590 <__sflush_r>:
    c590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c592:	898a      	ldrh	r2, [r1, #12]
    c594:	0005      	movs	r5, r0
    c596:	000c      	movs	r4, r1
    c598:	0713      	lsls	r3, r2, #28
    c59a:	d460      	bmi.n	c65e <__sflush_r+0xce>
    c59c:	684b      	ldr	r3, [r1, #4]
    c59e:	2b00      	cmp	r3, #0
    c5a0:	dc04      	bgt.n	c5ac <__sflush_r+0x1c>
    c5a2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	dc01      	bgt.n	c5ac <__sflush_r+0x1c>
    c5a8:	2000      	movs	r0, #0
    c5aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c5ac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c5ae:	2f00      	cmp	r7, #0
    c5b0:	d0fa      	beq.n	c5a8 <__sflush_r+0x18>
    c5b2:	2300      	movs	r3, #0
    c5b4:	682e      	ldr	r6, [r5, #0]
    c5b6:	602b      	str	r3, [r5, #0]
    c5b8:	2380      	movs	r3, #128	; 0x80
    c5ba:	015b      	lsls	r3, r3, #5
    c5bc:	401a      	ands	r2, r3
    c5be:	d034      	beq.n	c62a <__sflush_r+0x9a>
    c5c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c5c2:	89a3      	ldrh	r3, [r4, #12]
    c5c4:	075b      	lsls	r3, r3, #29
    c5c6:	d506      	bpl.n	c5d6 <__sflush_r+0x46>
    c5c8:	6863      	ldr	r3, [r4, #4]
    c5ca:	1ac0      	subs	r0, r0, r3
    c5cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c5ce:	2b00      	cmp	r3, #0
    c5d0:	d001      	beq.n	c5d6 <__sflush_r+0x46>
    c5d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c5d4:	1ac0      	subs	r0, r0, r3
    c5d6:	0002      	movs	r2, r0
    c5d8:	6a21      	ldr	r1, [r4, #32]
    c5da:	2300      	movs	r3, #0
    c5dc:	0028      	movs	r0, r5
    c5de:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c5e0:	47b8      	blx	r7
    c5e2:	89a1      	ldrh	r1, [r4, #12]
    c5e4:	1c43      	adds	r3, r0, #1
    c5e6:	d106      	bne.n	c5f6 <__sflush_r+0x66>
    c5e8:	682b      	ldr	r3, [r5, #0]
    c5ea:	2b1d      	cmp	r3, #29
    c5ec:	d831      	bhi.n	c652 <__sflush_r+0xc2>
    c5ee:	4a2c      	ldr	r2, [pc, #176]	; (c6a0 <__sflush_r+0x110>)
    c5f0:	40da      	lsrs	r2, r3
    c5f2:	07d3      	lsls	r3, r2, #31
    c5f4:	d52d      	bpl.n	c652 <__sflush_r+0xc2>
    c5f6:	2300      	movs	r3, #0
    c5f8:	6063      	str	r3, [r4, #4]
    c5fa:	6923      	ldr	r3, [r4, #16]
    c5fc:	6023      	str	r3, [r4, #0]
    c5fe:	04cb      	lsls	r3, r1, #19
    c600:	d505      	bpl.n	c60e <__sflush_r+0x7e>
    c602:	1c43      	adds	r3, r0, #1
    c604:	d102      	bne.n	c60c <__sflush_r+0x7c>
    c606:	682b      	ldr	r3, [r5, #0]
    c608:	2b00      	cmp	r3, #0
    c60a:	d100      	bne.n	c60e <__sflush_r+0x7e>
    c60c:	6560      	str	r0, [r4, #84]	; 0x54
    c60e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c610:	602e      	str	r6, [r5, #0]
    c612:	2900      	cmp	r1, #0
    c614:	d0c8      	beq.n	c5a8 <__sflush_r+0x18>
    c616:	0023      	movs	r3, r4
    c618:	3344      	adds	r3, #68	; 0x44
    c61a:	4299      	cmp	r1, r3
    c61c:	d002      	beq.n	c624 <__sflush_r+0x94>
    c61e:	0028      	movs	r0, r5
    c620:	f7ff fb6e 	bl	bd00 <_free_r>
    c624:	2000      	movs	r0, #0
    c626:	6360      	str	r0, [r4, #52]	; 0x34
    c628:	e7bf      	b.n	c5aa <__sflush_r+0x1a>
    c62a:	2301      	movs	r3, #1
    c62c:	6a21      	ldr	r1, [r4, #32]
    c62e:	0028      	movs	r0, r5
    c630:	47b8      	blx	r7
    c632:	1c43      	adds	r3, r0, #1
    c634:	d1c5      	bne.n	c5c2 <__sflush_r+0x32>
    c636:	682b      	ldr	r3, [r5, #0]
    c638:	2b00      	cmp	r3, #0
    c63a:	d0c2      	beq.n	c5c2 <__sflush_r+0x32>
    c63c:	2b1d      	cmp	r3, #29
    c63e:	d001      	beq.n	c644 <__sflush_r+0xb4>
    c640:	2b16      	cmp	r3, #22
    c642:	d101      	bne.n	c648 <__sflush_r+0xb8>
    c644:	602e      	str	r6, [r5, #0]
    c646:	e7af      	b.n	c5a8 <__sflush_r+0x18>
    c648:	2340      	movs	r3, #64	; 0x40
    c64a:	89a2      	ldrh	r2, [r4, #12]
    c64c:	4313      	orrs	r3, r2
    c64e:	81a3      	strh	r3, [r4, #12]
    c650:	e7ab      	b.n	c5aa <__sflush_r+0x1a>
    c652:	2340      	movs	r3, #64	; 0x40
    c654:	430b      	orrs	r3, r1
    c656:	2001      	movs	r0, #1
    c658:	81a3      	strh	r3, [r4, #12]
    c65a:	4240      	negs	r0, r0
    c65c:	e7a5      	b.n	c5aa <__sflush_r+0x1a>
    c65e:	690f      	ldr	r7, [r1, #16]
    c660:	2f00      	cmp	r7, #0
    c662:	d0a1      	beq.n	c5a8 <__sflush_r+0x18>
    c664:	680b      	ldr	r3, [r1, #0]
    c666:	600f      	str	r7, [r1, #0]
    c668:	1bdb      	subs	r3, r3, r7
    c66a:	9301      	str	r3, [sp, #4]
    c66c:	2300      	movs	r3, #0
    c66e:	0792      	lsls	r2, r2, #30
    c670:	d100      	bne.n	c674 <__sflush_r+0xe4>
    c672:	694b      	ldr	r3, [r1, #20]
    c674:	60a3      	str	r3, [r4, #8]
    c676:	9b01      	ldr	r3, [sp, #4]
    c678:	2b00      	cmp	r3, #0
    c67a:	dc00      	bgt.n	c67e <__sflush_r+0xee>
    c67c:	e794      	b.n	c5a8 <__sflush_r+0x18>
    c67e:	9b01      	ldr	r3, [sp, #4]
    c680:	003a      	movs	r2, r7
    c682:	6a21      	ldr	r1, [r4, #32]
    c684:	0028      	movs	r0, r5
    c686:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c688:	47b0      	blx	r6
    c68a:	2800      	cmp	r0, #0
    c68c:	dc03      	bgt.n	c696 <__sflush_r+0x106>
    c68e:	2340      	movs	r3, #64	; 0x40
    c690:	89a2      	ldrh	r2, [r4, #12]
    c692:	4313      	orrs	r3, r2
    c694:	e7df      	b.n	c656 <__sflush_r+0xc6>
    c696:	9b01      	ldr	r3, [sp, #4]
    c698:	183f      	adds	r7, r7, r0
    c69a:	1a1b      	subs	r3, r3, r0
    c69c:	9301      	str	r3, [sp, #4]
    c69e:	e7ea      	b.n	c676 <__sflush_r+0xe6>
    c6a0:	20400001 	.word	0x20400001

0000c6a4 <_fflush_r>:
    c6a4:	690b      	ldr	r3, [r1, #16]
    c6a6:	b570      	push	{r4, r5, r6, lr}
    c6a8:	0005      	movs	r5, r0
    c6aa:	000c      	movs	r4, r1
    c6ac:	2b00      	cmp	r3, #0
    c6ae:	d101      	bne.n	c6b4 <_fflush_r+0x10>
    c6b0:	2000      	movs	r0, #0
    c6b2:	bd70      	pop	{r4, r5, r6, pc}
    c6b4:	2800      	cmp	r0, #0
    c6b6:	d004      	beq.n	c6c2 <_fflush_r+0x1e>
    c6b8:	6983      	ldr	r3, [r0, #24]
    c6ba:	2b00      	cmp	r3, #0
    c6bc:	d101      	bne.n	c6c2 <_fflush_r+0x1e>
    c6be:	f000 f85f 	bl	c780 <__sinit>
    c6c2:	4b0b      	ldr	r3, [pc, #44]	; (c6f0 <_fflush_r+0x4c>)
    c6c4:	429c      	cmp	r4, r3
    c6c6:	d109      	bne.n	c6dc <_fflush_r+0x38>
    c6c8:	686c      	ldr	r4, [r5, #4]
    c6ca:	220c      	movs	r2, #12
    c6cc:	5ea3      	ldrsh	r3, [r4, r2]
    c6ce:	2b00      	cmp	r3, #0
    c6d0:	d0ee      	beq.n	c6b0 <_fflush_r+0xc>
    c6d2:	0021      	movs	r1, r4
    c6d4:	0028      	movs	r0, r5
    c6d6:	f7ff ff5b 	bl	c590 <__sflush_r>
    c6da:	e7ea      	b.n	c6b2 <_fflush_r+0xe>
    c6dc:	4b05      	ldr	r3, [pc, #20]	; (c6f4 <_fflush_r+0x50>)
    c6de:	429c      	cmp	r4, r3
    c6e0:	d101      	bne.n	c6e6 <_fflush_r+0x42>
    c6e2:	68ac      	ldr	r4, [r5, #8]
    c6e4:	e7f1      	b.n	c6ca <_fflush_r+0x26>
    c6e6:	4b04      	ldr	r3, [pc, #16]	; (c6f8 <_fflush_r+0x54>)
    c6e8:	429c      	cmp	r4, r3
    c6ea:	d1ee      	bne.n	c6ca <_fflush_r+0x26>
    c6ec:	68ec      	ldr	r4, [r5, #12]
    c6ee:	e7ec      	b.n	c6ca <_fflush_r+0x26>
    c6f0:	0000f4e8 	.word	0x0000f4e8
    c6f4:	0000f508 	.word	0x0000f508
    c6f8:	0000f4c8 	.word	0x0000f4c8

0000c6fc <_cleanup_r>:
    c6fc:	b510      	push	{r4, lr}
    c6fe:	4902      	ldr	r1, [pc, #8]	; (c708 <_cleanup_r+0xc>)
    c700:	f000 f8b2 	bl	c868 <_fwalk_reent>
    c704:	bd10      	pop	{r4, pc}
    c706:	46c0      	nop			; (mov r8, r8)
    c708:	0000c6a5 	.word	0x0000c6a5

0000c70c <std.isra.0>:
    c70c:	2300      	movs	r3, #0
    c70e:	b510      	push	{r4, lr}
    c710:	0004      	movs	r4, r0
    c712:	6003      	str	r3, [r0, #0]
    c714:	6043      	str	r3, [r0, #4]
    c716:	6083      	str	r3, [r0, #8]
    c718:	8181      	strh	r1, [r0, #12]
    c71a:	6643      	str	r3, [r0, #100]	; 0x64
    c71c:	81c2      	strh	r2, [r0, #14]
    c71e:	6103      	str	r3, [r0, #16]
    c720:	6143      	str	r3, [r0, #20]
    c722:	6183      	str	r3, [r0, #24]
    c724:	0019      	movs	r1, r3
    c726:	2208      	movs	r2, #8
    c728:	305c      	adds	r0, #92	; 0x5c
    c72a:	f7ff fae0 	bl	bcee <memset>
    c72e:	4b05      	ldr	r3, [pc, #20]	; (c744 <std.isra.0+0x38>)
    c730:	6224      	str	r4, [r4, #32]
    c732:	6263      	str	r3, [r4, #36]	; 0x24
    c734:	4b04      	ldr	r3, [pc, #16]	; (c748 <std.isra.0+0x3c>)
    c736:	62a3      	str	r3, [r4, #40]	; 0x28
    c738:	4b04      	ldr	r3, [pc, #16]	; (c74c <std.isra.0+0x40>)
    c73a:	62e3      	str	r3, [r4, #44]	; 0x2c
    c73c:	4b04      	ldr	r3, [pc, #16]	; (c750 <std.isra.0+0x44>)
    c73e:	6323      	str	r3, [r4, #48]	; 0x30
    c740:	bd10      	pop	{r4, pc}
    c742:	46c0      	nop			; (mov r8, r8)
    c744:	0000d281 	.word	0x0000d281
    c748:	0000d2a9 	.word	0x0000d2a9
    c74c:	0000d2e1 	.word	0x0000d2e1
    c750:	0000d30d 	.word	0x0000d30d

0000c754 <__sfmoreglue>:
    c754:	b570      	push	{r4, r5, r6, lr}
    c756:	2568      	movs	r5, #104	; 0x68
    c758:	1e4a      	subs	r2, r1, #1
    c75a:	4355      	muls	r5, r2
    c75c:	000e      	movs	r6, r1
    c75e:	0029      	movs	r1, r5
    c760:	3174      	adds	r1, #116	; 0x74
    c762:	f7ff fb17 	bl	bd94 <_malloc_r>
    c766:	1e04      	subs	r4, r0, #0
    c768:	d008      	beq.n	c77c <__sfmoreglue+0x28>
    c76a:	2100      	movs	r1, #0
    c76c:	002a      	movs	r2, r5
    c76e:	6001      	str	r1, [r0, #0]
    c770:	6046      	str	r6, [r0, #4]
    c772:	300c      	adds	r0, #12
    c774:	60a0      	str	r0, [r4, #8]
    c776:	3268      	adds	r2, #104	; 0x68
    c778:	f7ff fab9 	bl	bcee <memset>
    c77c:	0020      	movs	r0, r4
    c77e:	bd70      	pop	{r4, r5, r6, pc}

0000c780 <__sinit>:
    c780:	6983      	ldr	r3, [r0, #24]
    c782:	b513      	push	{r0, r1, r4, lr}
    c784:	0004      	movs	r4, r0
    c786:	2b00      	cmp	r3, #0
    c788:	d128      	bne.n	c7dc <__sinit+0x5c>
    c78a:	6483      	str	r3, [r0, #72]	; 0x48
    c78c:	64c3      	str	r3, [r0, #76]	; 0x4c
    c78e:	6503      	str	r3, [r0, #80]	; 0x50
    c790:	4b13      	ldr	r3, [pc, #76]	; (c7e0 <__sinit+0x60>)
    c792:	4a14      	ldr	r2, [pc, #80]	; (c7e4 <__sinit+0x64>)
    c794:	681b      	ldr	r3, [r3, #0]
    c796:	6282      	str	r2, [r0, #40]	; 0x28
    c798:	9301      	str	r3, [sp, #4]
    c79a:	4298      	cmp	r0, r3
    c79c:	d101      	bne.n	c7a2 <__sinit+0x22>
    c79e:	2301      	movs	r3, #1
    c7a0:	6183      	str	r3, [r0, #24]
    c7a2:	0020      	movs	r0, r4
    c7a4:	f000 f820 	bl	c7e8 <__sfp>
    c7a8:	6060      	str	r0, [r4, #4]
    c7aa:	0020      	movs	r0, r4
    c7ac:	f000 f81c 	bl	c7e8 <__sfp>
    c7b0:	60a0      	str	r0, [r4, #8]
    c7b2:	0020      	movs	r0, r4
    c7b4:	f000 f818 	bl	c7e8 <__sfp>
    c7b8:	2200      	movs	r2, #0
    c7ba:	60e0      	str	r0, [r4, #12]
    c7bc:	2104      	movs	r1, #4
    c7be:	6860      	ldr	r0, [r4, #4]
    c7c0:	f7ff ffa4 	bl	c70c <std.isra.0>
    c7c4:	2201      	movs	r2, #1
    c7c6:	2109      	movs	r1, #9
    c7c8:	68a0      	ldr	r0, [r4, #8]
    c7ca:	f7ff ff9f 	bl	c70c <std.isra.0>
    c7ce:	2202      	movs	r2, #2
    c7d0:	2112      	movs	r1, #18
    c7d2:	68e0      	ldr	r0, [r4, #12]
    c7d4:	f7ff ff9a 	bl	c70c <std.isra.0>
    c7d8:	2301      	movs	r3, #1
    c7da:	61a3      	str	r3, [r4, #24]
    c7dc:	bd13      	pop	{r0, r1, r4, pc}
    c7de:	46c0      	nop			; (mov r8, r8)
    c7e0:	0000f4c4 	.word	0x0000f4c4
    c7e4:	0000c6fd 	.word	0x0000c6fd

0000c7e8 <__sfp>:
    c7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7ea:	4b1e      	ldr	r3, [pc, #120]	; (c864 <__sfp+0x7c>)
    c7ec:	0007      	movs	r7, r0
    c7ee:	681e      	ldr	r6, [r3, #0]
    c7f0:	69b3      	ldr	r3, [r6, #24]
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	d102      	bne.n	c7fc <__sfp+0x14>
    c7f6:	0030      	movs	r0, r6
    c7f8:	f7ff ffc2 	bl	c780 <__sinit>
    c7fc:	3648      	adds	r6, #72	; 0x48
    c7fe:	68b4      	ldr	r4, [r6, #8]
    c800:	6873      	ldr	r3, [r6, #4]
    c802:	3b01      	subs	r3, #1
    c804:	d504      	bpl.n	c810 <__sfp+0x28>
    c806:	6833      	ldr	r3, [r6, #0]
    c808:	2b00      	cmp	r3, #0
    c80a:	d007      	beq.n	c81c <__sfp+0x34>
    c80c:	6836      	ldr	r6, [r6, #0]
    c80e:	e7f6      	b.n	c7fe <__sfp+0x16>
    c810:	220c      	movs	r2, #12
    c812:	5ea5      	ldrsh	r5, [r4, r2]
    c814:	2d00      	cmp	r5, #0
    c816:	d00d      	beq.n	c834 <__sfp+0x4c>
    c818:	3468      	adds	r4, #104	; 0x68
    c81a:	e7f2      	b.n	c802 <__sfp+0x1a>
    c81c:	2104      	movs	r1, #4
    c81e:	0038      	movs	r0, r7
    c820:	f7ff ff98 	bl	c754 <__sfmoreglue>
    c824:	6030      	str	r0, [r6, #0]
    c826:	2800      	cmp	r0, #0
    c828:	d1f0      	bne.n	c80c <__sfp+0x24>
    c82a:	230c      	movs	r3, #12
    c82c:	0004      	movs	r4, r0
    c82e:	603b      	str	r3, [r7, #0]
    c830:	0020      	movs	r0, r4
    c832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c834:	2301      	movs	r3, #1
    c836:	0020      	movs	r0, r4
    c838:	425b      	negs	r3, r3
    c83a:	81e3      	strh	r3, [r4, #14]
    c83c:	3302      	adds	r3, #2
    c83e:	81a3      	strh	r3, [r4, #12]
    c840:	6665      	str	r5, [r4, #100]	; 0x64
    c842:	6025      	str	r5, [r4, #0]
    c844:	60a5      	str	r5, [r4, #8]
    c846:	6065      	str	r5, [r4, #4]
    c848:	6125      	str	r5, [r4, #16]
    c84a:	6165      	str	r5, [r4, #20]
    c84c:	61a5      	str	r5, [r4, #24]
    c84e:	2208      	movs	r2, #8
    c850:	0029      	movs	r1, r5
    c852:	305c      	adds	r0, #92	; 0x5c
    c854:	f7ff fa4b 	bl	bcee <memset>
    c858:	6365      	str	r5, [r4, #52]	; 0x34
    c85a:	63a5      	str	r5, [r4, #56]	; 0x38
    c85c:	64a5      	str	r5, [r4, #72]	; 0x48
    c85e:	64e5      	str	r5, [r4, #76]	; 0x4c
    c860:	e7e6      	b.n	c830 <__sfp+0x48>
    c862:	46c0      	nop			; (mov r8, r8)
    c864:	0000f4c4 	.word	0x0000f4c4

0000c868 <_fwalk_reent>:
    c868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c86a:	0004      	movs	r4, r0
    c86c:	0007      	movs	r7, r0
    c86e:	2600      	movs	r6, #0
    c870:	9101      	str	r1, [sp, #4]
    c872:	3448      	adds	r4, #72	; 0x48
    c874:	2c00      	cmp	r4, #0
    c876:	d101      	bne.n	c87c <_fwalk_reent+0x14>
    c878:	0030      	movs	r0, r6
    c87a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c87c:	6863      	ldr	r3, [r4, #4]
    c87e:	68a5      	ldr	r5, [r4, #8]
    c880:	9300      	str	r3, [sp, #0]
    c882:	9b00      	ldr	r3, [sp, #0]
    c884:	3b01      	subs	r3, #1
    c886:	9300      	str	r3, [sp, #0]
    c888:	d501      	bpl.n	c88e <_fwalk_reent+0x26>
    c88a:	6824      	ldr	r4, [r4, #0]
    c88c:	e7f2      	b.n	c874 <_fwalk_reent+0xc>
    c88e:	89ab      	ldrh	r3, [r5, #12]
    c890:	2b01      	cmp	r3, #1
    c892:	d908      	bls.n	c8a6 <_fwalk_reent+0x3e>
    c894:	220e      	movs	r2, #14
    c896:	5eab      	ldrsh	r3, [r5, r2]
    c898:	3301      	adds	r3, #1
    c89a:	d004      	beq.n	c8a6 <_fwalk_reent+0x3e>
    c89c:	0029      	movs	r1, r5
    c89e:	0038      	movs	r0, r7
    c8a0:	9b01      	ldr	r3, [sp, #4]
    c8a2:	4798      	blx	r3
    c8a4:	4306      	orrs	r6, r0
    c8a6:	3568      	adds	r5, #104	; 0x68
    c8a8:	e7eb      	b.n	c882 <_fwalk_reent+0x1a>

0000c8aa <__locale_ctype_ptr_l>:
    c8aa:	30ec      	adds	r0, #236	; 0xec
    c8ac:	6800      	ldr	r0, [r0, #0]
    c8ae:	4770      	bx	lr

0000c8b0 <__swhatbuf_r>:
    c8b0:	b570      	push	{r4, r5, r6, lr}
    c8b2:	000e      	movs	r6, r1
    c8b4:	001d      	movs	r5, r3
    c8b6:	230e      	movs	r3, #14
    c8b8:	5ec9      	ldrsh	r1, [r1, r3]
    c8ba:	b090      	sub	sp, #64	; 0x40
    c8bc:	0014      	movs	r4, r2
    c8be:	2900      	cmp	r1, #0
    c8c0:	da07      	bge.n	c8d2 <__swhatbuf_r+0x22>
    c8c2:	2300      	movs	r3, #0
    c8c4:	602b      	str	r3, [r5, #0]
    c8c6:	89b3      	ldrh	r3, [r6, #12]
    c8c8:	061b      	lsls	r3, r3, #24
    c8ca:	d411      	bmi.n	c8f0 <__swhatbuf_r+0x40>
    c8cc:	2380      	movs	r3, #128	; 0x80
    c8ce:	00db      	lsls	r3, r3, #3
    c8d0:	e00f      	b.n	c8f2 <__swhatbuf_r+0x42>
    c8d2:	aa01      	add	r2, sp, #4
    c8d4:	f000 fd60 	bl	d398 <_fstat_r>
    c8d8:	2800      	cmp	r0, #0
    c8da:	dbf2      	blt.n	c8c2 <__swhatbuf_r+0x12>
    c8dc:	22f0      	movs	r2, #240	; 0xf0
    c8de:	9b02      	ldr	r3, [sp, #8]
    c8e0:	0212      	lsls	r2, r2, #8
    c8e2:	4013      	ands	r3, r2
    c8e4:	4a05      	ldr	r2, [pc, #20]	; (c8fc <__swhatbuf_r+0x4c>)
    c8e6:	189b      	adds	r3, r3, r2
    c8e8:	425a      	negs	r2, r3
    c8ea:	4153      	adcs	r3, r2
    c8ec:	602b      	str	r3, [r5, #0]
    c8ee:	e7ed      	b.n	c8cc <__swhatbuf_r+0x1c>
    c8f0:	2340      	movs	r3, #64	; 0x40
    c8f2:	2000      	movs	r0, #0
    c8f4:	6023      	str	r3, [r4, #0]
    c8f6:	b010      	add	sp, #64	; 0x40
    c8f8:	bd70      	pop	{r4, r5, r6, pc}
    c8fa:	46c0      	nop			; (mov r8, r8)
    c8fc:	ffffe000 	.word	0xffffe000

0000c900 <__smakebuf_r>:
    c900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c902:	2602      	movs	r6, #2
    c904:	898b      	ldrh	r3, [r1, #12]
    c906:	0005      	movs	r5, r0
    c908:	000c      	movs	r4, r1
    c90a:	4233      	tst	r3, r6
    c90c:	d006      	beq.n	c91c <__smakebuf_r+0x1c>
    c90e:	0023      	movs	r3, r4
    c910:	3347      	adds	r3, #71	; 0x47
    c912:	6023      	str	r3, [r4, #0]
    c914:	6123      	str	r3, [r4, #16]
    c916:	2301      	movs	r3, #1
    c918:	6163      	str	r3, [r4, #20]
    c91a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c91c:	ab01      	add	r3, sp, #4
    c91e:	466a      	mov	r2, sp
    c920:	f7ff ffc6 	bl	c8b0 <__swhatbuf_r>
    c924:	9900      	ldr	r1, [sp, #0]
    c926:	0007      	movs	r7, r0
    c928:	0028      	movs	r0, r5
    c92a:	f7ff fa33 	bl	bd94 <_malloc_r>
    c92e:	2800      	cmp	r0, #0
    c930:	d108      	bne.n	c944 <__smakebuf_r+0x44>
    c932:	220c      	movs	r2, #12
    c934:	5ea3      	ldrsh	r3, [r4, r2]
    c936:	059a      	lsls	r2, r3, #22
    c938:	d4ef      	bmi.n	c91a <__smakebuf_r+0x1a>
    c93a:	2203      	movs	r2, #3
    c93c:	4393      	bics	r3, r2
    c93e:	431e      	orrs	r6, r3
    c940:	81a6      	strh	r6, [r4, #12]
    c942:	e7e4      	b.n	c90e <__smakebuf_r+0xe>
    c944:	4b0f      	ldr	r3, [pc, #60]	; (c984 <__smakebuf_r+0x84>)
    c946:	62ab      	str	r3, [r5, #40]	; 0x28
    c948:	2380      	movs	r3, #128	; 0x80
    c94a:	89a2      	ldrh	r2, [r4, #12]
    c94c:	6020      	str	r0, [r4, #0]
    c94e:	4313      	orrs	r3, r2
    c950:	81a3      	strh	r3, [r4, #12]
    c952:	9b00      	ldr	r3, [sp, #0]
    c954:	6120      	str	r0, [r4, #16]
    c956:	6163      	str	r3, [r4, #20]
    c958:	9b01      	ldr	r3, [sp, #4]
    c95a:	2b00      	cmp	r3, #0
    c95c:	d00d      	beq.n	c97a <__smakebuf_r+0x7a>
    c95e:	230e      	movs	r3, #14
    c960:	5ee1      	ldrsh	r1, [r4, r3]
    c962:	0028      	movs	r0, r5
    c964:	f000 fd2a 	bl	d3bc <_isatty_r>
    c968:	2800      	cmp	r0, #0
    c96a:	d006      	beq.n	c97a <__smakebuf_r+0x7a>
    c96c:	2203      	movs	r2, #3
    c96e:	89a3      	ldrh	r3, [r4, #12]
    c970:	4393      	bics	r3, r2
    c972:	001a      	movs	r2, r3
    c974:	2301      	movs	r3, #1
    c976:	4313      	orrs	r3, r2
    c978:	81a3      	strh	r3, [r4, #12]
    c97a:	89a0      	ldrh	r0, [r4, #12]
    c97c:	4338      	orrs	r0, r7
    c97e:	81a0      	strh	r0, [r4, #12]
    c980:	e7cb      	b.n	c91a <__smakebuf_r+0x1a>
    c982:	46c0      	nop			; (mov r8, r8)
    c984:	0000c6fd 	.word	0x0000c6fd

0000c988 <__ascii_mbtowc>:
    c988:	b082      	sub	sp, #8
    c98a:	2900      	cmp	r1, #0
    c98c:	d100      	bne.n	c990 <__ascii_mbtowc+0x8>
    c98e:	a901      	add	r1, sp, #4
    c990:	1e10      	subs	r0, r2, #0
    c992:	d006      	beq.n	c9a2 <__ascii_mbtowc+0x1a>
    c994:	2b00      	cmp	r3, #0
    c996:	d006      	beq.n	c9a6 <__ascii_mbtowc+0x1e>
    c998:	7813      	ldrb	r3, [r2, #0]
    c99a:	600b      	str	r3, [r1, #0]
    c99c:	7810      	ldrb	r0, [r2, #0]
    c99e:	1e43      	subs	r3, r0, #1
    c9a0:	4198      	sbcs	r0, r3
    c9a2:	b002      	add	sp, #8
    c9a4:	4770      	bx	lr
    c9a6:	2002      	movs	r0, #2
    c9a8:	4240      	negs	r0, r0
    c9aa:	e7fa      	b.n	c9a2 <__ascii_mbtowc+0x1a>

0000c9ac <__malloc_lock>:
    c9ac:	4770      	bx	lr

0000c9ae <__malloc_unlock>:
    c9ae:	4770      	bx	lr

0000c9b0 <__ssputs_r>:
    c9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9b2:	688e      	ldr	r6, [r1, #8]
    c9b4:	b085      	sub	sp, #20
    c9b6:	0007      	movs	r7, r0
    c9b8:	000c      	movs	r4, r1
    c9ba:	9203      	str	r2, [sp, #12]
    c9bc:	9301      	str	r3, [sp, #4]
    c9be:	429e      	cmp	r6, r3
    c9c0:	d839      	bhi.n	ca36 <__ssputs_r+0x86>
    c9c2:	2390      	movs	r3, #144	; 0x90
    c9c4:	898a      	ldrh	r2, [r1, #12]
    c9c6:	00db      	lsls	r3, r3, #3
    c9c8:	421a      	tst	r2, r3
    c9ca:	d034      	beq.n	ca36 <__ssputs_r+0x86>
    c9cc:	2503      	movs	r5, #3
    c9ce:	6909      	ldr	r1, [r1, #16]
    c9d0:	6823      	ldr	r3, [r4, #0]
    c9d2:	1a5b      	subs	r3, r3, r1
    c9d4:	9302      	str	r3, [sp, #8]
    c9d6:	6963      	ldr	r3, [r4, #20]
    c9d8:	9802      	ldr	r0, [sp, #8]
    c9da:	435d      	muls	r5, r3
    c9dc:	0feb      	lsrs	r3, r5, #31
    c9de:	195d      	adds	r5, r3, r5
    c9e0:	9b01      	ldr	r3, [sp, #4]
    c9e2:	106d      	asrs	r5, r5, #1
    c9e4:	3301      	adds	r3, #1
    c9e6:	181b      	adds	r3, r3, r0
    c9e8:	42ab      	cmp	r3, r5
    c9ea:	d900      	bls.n	c9ee <__ssputs_r+0x3e>
    c9ec:	001d      	movs	r5, r3
    c9ee:	0553      	lsls	r3, r2, #21
    c9f0:	d532      	bpl.n	ca58 <__ssputs_r+0xa8>
    c9f2:	0029      	movs	r1, r5
    c9f4:	0038      	movs	r0, r7
    c9f6:	f7ff f9cd 	bl	bd94 <_malloc_r>
    c9fa:	1e06      	subs	r6, r0, #0
    c9fc:	d109      	bne.n	ca12 <__ssputs_r+0x62>
    c9fe:	230c      	movs	r3, #12
    ca00:	603b      	str	r3, [r7, #0]
    ca02:	2340      	movs	r3, #64	; 0x40
    ca04:	2001      	movs	r0, #1
    ca06:	89a2      	ldrh	r2, [r4, #12]
    ca08:	4240      	negs	r0, r0
    ca0a:	4313      	orrs	r3, r2
    ca0c:	81a3      	strh	r3, [r4, #12]
    ca0e:	b005      	add	sp, #20
    ca10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca12:	9a02      	ldr	r2, [sp, #8]
    ca14:	6921      	ldr	r1, [r4, #16]
    ca16:	f7ff f94f 	bl	bcb8 <memcpy>
    ca1a:	89a3      	ldrh	r3, [r4, #12]
    ca1c:	4a14      	ldr	r2, [pc, #80]	; (ca70 <__ssputs_r+0xc0>)
    ca1e:	401a      	ands	r2, r3
    ca20:	2380      	movs	r3, #128	; 0x80
    ca22:	4313      	orrs	r3, r2
    ca24:	81a3      	strh	r3, [r4, #12]
    ca26:	9b02      	ldr	r3, [sp, #8]
    ca28:	6126      	str	r6, [r4, #16]
    ca2a:	18f6      	adds	r6, r6, r3
    ca2c:	6026      	str	r6, [r4, #0]
    ca2e:	6165      	str	r5, [r4, #20]
    ca30:	9e01      	ldr	r6, [sp, #4]
    ca32:	1aed      	subs	r5, r5, r3
    ca34:	60a5      	str	r5, [r4, #8]
    ca36:	9b01      	ldr	r3, [sp, #4]
    ca38:	42b3      	cmp	r3, r6
    ca3a:	d200      	bcs.n	ca3e <__ssputs_r+0x8e>
    ca3c:	001e      	movs	r6, r3
    ca3e:	0032      	movs	r2, r6
    ca40:	9903      	ldr	r1, [sp, #12]
    ca42:	6820      	ldr	r0, [r4, #0]
    ca44:	f7ff f941 	bl	bcca <memmove>
    ca48:	68a3      	ldr	r3, [r4, #8]
    ca4a:	2000      	movs	r0, #0
    ca4c:	1b9b      	subs	r3, r3, r6
    ca4e:	60a3      	str	r3, [r4, #8]
    ca50:	6823      	ldr	r3, [r4, #0]
    ca52:	199e      	adds	r6, r3, r6
    ca54:	6026      	str	r6, [r4, #0]
    ca56:	e7da      	b.n	ca0e <__ssputs_r+0x5e>
    ca58:	002a      	movs	r2, r5
    ca5a:	0038      	movs	r0, r7
    ca5c:	f000 fcdf 	bl	d41e <_realloc_r>
    ca60:	1e06      	subs	r6, r0, #0
    ca62:	d1e0      	bne.n	ca26 <__ssputs_r+0x76>
    ca64:	6921      	ldr	r1, [r4, #16]
    ca66:	0038      	movs	r0, r7
    ca68:	f7ff f94a 	bl	bd00 <_free_r>
    ca6c:	e7c7      	b.n	c9fe <__ssputs_r+0x4e>
    ca6e:	46c0      	nop			; (mov r8, r8)
    ca70:	fffffb7f 	.word	0xfffffb7f

0000ca74 <_svfiprintf_r>:
    ca74:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca76:	b09f      	sub	sp, #124	; 0x7c
    ca78:	9002      	str	r0, [sp, #8]
    ca7a:	9305      	str	r3, [sp, #20]
    ca7c:	898b      	ldrh	r3, [r1, #12]
    ca7e:	000f      	movs	r7, r1
    ca80:	0016      	movs	r6, r2
    ca82:	061b      	lsls	r3, r3, #24
    ca84:	d511      	bpl.n	caaa <_svfiprintf_r+0x36>
    ca86:	690b      	ldr	r3, [r1, #16]
    ca88:	2b00      	cmp	r3, #0
    ca8a:	d10e      	bne.n	caaa <_svfiprintf_r+0x36>
    ca8c:	2140      	movs	r1, #64	; 0x40
    ca8e:	f7ff f981 	bl	bd94 <_malloc_r>
    ca92:	6038      	str	r0, [r7, #0]
    ca94:	6138      	str	r0, [r7, #16]
    ca96:	2800      	cmp	r0, #0
    ca98:	d105      	bne.n	caa6 <_svfiprintf_r+0x32>
    ca9a:	230c      	movs	r3, #12
    ca9c:	9a02      	ldr	r2, [sp, #8]
    ca9e:	3801      	subs	r0, #1
    caa0:	6013      	str	r3, [r2, #0]
    caa2:	b01f      	add	sp, #124	; 0x7c
    caa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    caa6:	2340      	movs	r3, #64	; 0x40
    caa8:	617b      	str	r3, [r7, #20]
    caaa:	2300      	movs	r3, #0
    caac:	ad06      	add	r5, sp, #24
    caae:	616b      	str	r3, [r5, #20]
    cab0:	3320      	adds	r3, #32
    cab2:	766b      	strb	r3, [r5, #25]
    cab4:	3310      	adds	r3, #16
    cab6:	76ab      	strb	r3, [r5, #26]
    cab8:	0034      	movs	r4, r6
    caba:	7823      	ldrb	r3, [r4, #0]
    cabc:	2b00      	cmp	r3, #0
    cabe:	d147      	bne.n	cb50 <_svfiprintf_r+0xdc>
    cac0:	1ba3      	subs	r3, r4, r6
    cac2:	9304      	str	r3, [sp, #16]
    cac4:	d00d      	beq.n	cae2 <_svfiprintf_r+0x6e>
    cac6:	1ba3      	subs	r3, r4, r6
    cac8:	0032      	movs	r2, r6
    caca:	0039      	movs	r1, r7
    cacc:	9802      	ldr	r0, [sp, #8]
    cace:	f7ff ff6f 	bl	c9b0 <__ssputs_r>
    cad2:	1c43      	adds	r3, r0, #1
    cad4:	d100      	bne.n	cad8 <_svfiprintf_r+0x64>
    cad6:	e0b5      	b.n	cc44 <_svfiprintf_r+0x1d0>
    cad8:	696a      	ldr	r2, [r5, #20]
    cada:	9b04      	ldr	r3, [sp, #16]
    cadc:	4694      	mov	ip, r2
    cade:	4463      	add	r3, ip
    cae0:	616b      	str	r3, [r5, #20]
    cae2:	7823      	ldrb	r3, [r4, #0]
    cae4:	2b00      	cmp	r3, #0
    cae6:	d100      	bne.n	caea <_svfiprintf_r+0x76>
    cae8:	e0ac      	b.n	cc44 <_svfiprintf_r+0x1d0>
    caea:	2201      	movs	r2, #1
    caec:	2300      	movs	r3, #0
    caee:	4252      	negs	r2, r2
    caf0:	606a      	str	r2, [r5, #4]
    caf2:	a902      	add	r1, sp, #8
    caf4:	3254      	adds	r2, #84	; 0x54
    caf6:	1852      	adds	r2, r2, r1
    caf8:	3401      	adds	r4, #1
    cafa:	602b      	str	r3, [r5, #0]
    cafc:	60eb      	str	r3, [r5, #12]
    cafe:	60ab      	str	r3, [r5, #8]
    cb00:	7013      	strb	r3, [r2, #0]
    cb02:	65ab      	str	r3, [r5, #88]	; 0x58
    cb04:	4e58      	ldr	r6, [pc, #352]	; (cc68 <_svfiprintf_r+0x1f4>)
    cb06:	2205      	movs	r2, #5
    cb08:	7821      	ldrb	r1, [r4, #0]
    cb0a:	0030      	movs	r0, r6
    cb0c:	f000 fc7c 	bl	d408 <memchr>
    cb10:	1c62      	adds	r2, r4, #1
    cb12:	2800      	cmp	r0, #0
    cb14:	d120      	bne.n	cb58 <_svfiprintf_r+0xe4>
    cb16:	6829      	ldr	r1, [r5, #0]
    cb18:	06cb      	lsls	r3, r1, #27
    cb1a:	d504      	bpl.n	cb26 <_svfiprintf_r+0xb2>
    cb1c:	2353      	movs	r3, #83	; 0x53
    cb1e:	ae02      	add	r6, sp, #8
    cb20:	3020      	adds	r0, #32
    cb22:	199b      	adds	r3, r3, r6
    cb24:	7018      	strb	r0, [r3, #0]
    cb26:	070b      	lsls	r3, r1, #28
    cb28:	d504      	bpl.n	cb34 <_svfiprintf_r+0xc0>
    cb2a:	2353      	movs	r3, #83	; 0x53
    cb2c:	202b      	movs	r0, #43	; 0x2b
    cb2e:	ae02      	add	r6, sp, #8
    cb30:	199b      	adds	r3, r3, r6
    cb32:	7018      	strb	r0, [r3, #0]
    cb34:	7823      	ldrb	r3, [r4, #0]
    cb36:	2b2a      	cmp	r3, #42	; 0x2a
    cb38:	d016      	beq.n	cb68 <_svfiprintf_r+0xf4>
    cb3a:	2000      	movs	r0, #0
    cb3c:	210a      	movs	r1, #10
    cb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb40:	7822      	ldrb	r2, [r4, #0]
    cb42:	3a30      	subs	r2, #48	; 0x30
    cb44:	2a09      	cmp	r2, #9
    cb46:	d955      	bls.n	cbf4 <_svfiprintf_r+0x180>
    cb48:	2800      	cmp	r0, #0
    cb4a:	d015      	beq.n	cb78 <_svfiprintf_r+0x104>
    cb4c:	9309      	str	r3, [sp, #36]	; 0x24
    cb4e:	e013      	b.n	cb78 <_svfiprintf_r+0x104>
    cb50:	2b25      	cmp	r3, #37	; 0x25
    cb52:	d0b5      	beq.n	cac0 <_svfiprintf_r+0x4c>
    cb54:	3401      	adds	r4, #1
    cb56:	e7b0      	b.n	caba <_svfiprintf_r+0x46>
    cb58:	2301      	movs	r3, #1
    cb5a:	1b80      	subs	r0, r0, r6
    cb5c:	4083      	lsls	r3, r0
    cb5e:	6829      	ldr	r1, [r5, #0]
    cb60:	0014      	movs	r4, r2
    cb62:	430b      	orrs	r3, r1
    cb64:	602b      	str	r3, [r5, #0]
    cb66:	e7cd      	b.n	cb04 <_svfiprintf_r+0x90>
    cb68:	9b05      	ldr	r3, [sp, #20]
    cb6a:	1d18      	adds	r0, r3, #4
    cb6c:	681b      	ldr	r3, [r3, #0]
    cb6e:	9005      	str	r0, [sp, #20]
    cb70:	2b00      	cmp	r3, #0
    cb72:	db39      	blt.n	cbe8 <_svfiprintf_r+0x174>
    cb74:	9309      	str	r3, [sp, #36]	; 0x24
    cb76:	0014      	movs	r4, r2
    cb78:	7823      	ldrb	r3, [r4, #0]
    cb7a:	2b2e      	cmp	r3, #46	; 0x2e
    cb7c:	d10b      	bne.n	cb96 <_svfiprintf_r+0x122>
    cb7e:	7863      	ldrb	r3, [r4, #1]
    cb80:	1c62      	adds	r2, r4, #1
    cb82:	2b2a      	cmp	r3, #42	; 0x2a
    cb84:	d13e      	bne.n	cc04 <_svfiprintf_r+0x190>
    cb86:	9b05      	ldr	r3, [sp, #20]
    cb88:	3402      	adds	r4, #2
    cb8a:	1d1a      	adds	r2, r3, #4
    cb8c:	681b      	ldr	r3, [r3, #0]
    cb8e:	9205      	str	r2, [sp, #20]
    cb90:	2b00      	cmp	r3, #0
    cb92:	db34      	blt.n	cbfe <_svfiprintf_r+0x18a>
    cb94:	9307      	str	r3, [sp, #28]
    cb96:	4e35      	ldr	r6, [pc, #212]	; (cc6c <_svfiprintf_r+0x1f8>)
    cb98:	7821      	ldrb	r1, [r4, #0]
    cb9a:	2203      	movs	r2, #3
    cb9c:	0030      	movs	r0, r6
    cb9e:	f000 fc33 	bl	d408 <memchr>
    cba2:	2800      	cmp	r0, #0
    cba4:	d006      	beq.n	cbb4 <_svfiprintf_r+0x140>
    cba6:	2340      	movs	r3, #64	; 0x40
    cba8:	1b80      	subs	r0, r0, r6
    cbaa:	4083      	lsls	r3, r0
    cbac:	682a      	ldr	r2, [r5, #0]
    cbae:	3401      	adds	r4, #1
    cbb0:	4313      	orrs	r3, r2
    cbb2:	602b      	str	r3, [r5, #0]
    cbb4:	7821      	ldrb	r1, [r4, #0]
    cbb6:	2206      	movs	r2, #6
    cbb8:	482d      	ldr	r0, [pc, #180]	; (cc70 <_svfiprintf_r+0x1fc>)
    cbba:	1c66      	adds	r6, r4, #1
    cbbc:	7629      	strb	r1, [r5, #24]
    cbbe:	f000 fc23 	bl	d408 <memchr>
    cbc2:	2800      	cmp	r0, #0
    cbc4:	d046      	beq.n	cc54 <_svfiprintf_r+0x1e0>
    cbc6:	4b2b      	ldr	r3, [pc, #172]	; (cc74 <_svfiprintf_r+0x200>)
    cbc8:	2b00      	cmp	r3, #0
    cbca:	d12f      	bne.n	cc2c <_svfiprintf_r+0x1b8>
    cbcc:	6829      	ldr	r1, [r5, #0]
    cbce:	9b05      	ldr	r3, [sp, #20]
    cbd0:	2207      	movs	r2, #7
    cbd2:	05c9      	lsls	r1, r1, #23
    cbd4:	d528      	bpl.n	cc28 <_svfiprintf_r+0x1b4>
    cbd6:	189b      	adds	r3, r3, r2
    cbd8:	4393      	bics	r3, r2
    cbda:	3308      	adds	r3, #8
    cbdc:	9305      	str	r3, [sp, #20]
    cbde:	696b      	ldr	r3, [r5, #20]
    cbe0:	9a03      	ldr	r2, [sp, #12]
    cbe2:	189b      	adds	r3, r3, r2
    cbe4:	616b      	str	r3, [r5, #20]
    cbe6:	e767      	b.n	cab8 <_svfiprintf_r+0x44>
    cbe8:	425b      	negs	r3, r3
    cbea:	60eb      	str	r3, [r5, #12]
    cbec:	2302      	movs	r3, #2
    cbee:	430b      	orrs	r3, r1
    cbf0:	602b      	str	r3, [r5, #0]
    cbf2:	e7c0      	b.n	cb76 <_svfiprintf_r+0x102>
    cbf4:	434b      	muls	r3, r1
    cbf6:	3401      	adds	r4, #1
    cbf8:	189b      	adds	r3, r3, r2
    cbfa:	2001      	movs	r0, #1
    cbfc:	e7a0      	b.n	cb40 <_svfiprintf_r+0xcc>
    cbfe:	2301      	movs	r3, #1
    cc00:	425b      	negs	r3, r3
    cc02:	e7c7      	b.n	cb94 <_svfiprintf_r+0x120>
    cc04:	2300      	movs	r3, #0
    cc06:	0014      	movs	r4, r2
    cc08:	200a      	movs	r0, #10
    cc0a:	001a      	movs	r2, r3
    cc0c:	606b      	str	r3, [r5, #4]
    cc0e:	7821      	ldrb	r1, [r4, #0]
    cc10:	3930      	subs	r1, #48	; 0x30
    cc12:	2909      	cmp	r1, #9
    cc14:	d903      	bls.n	cc1e <_svfiprintf_r+0x1aa>
    cc16:	2b00      	cmp	r3, #0
    cc18:	d0bd      	beq.n	cb96 <_svfiprintf_r+0x122>
    cc1a:	9207      	str	r2, [sp, #28]
    cc1c:	e7bb      	b.n	cb96 <_svfiprintf_r+0x122>
    cc1e:	4342      	muls	r2, r0
    cc20:	3401      	adds	r4, #1
    cc22:	1852      	adds	r2, r2, r1
    cc24:	2301      	movs	r3, #1
    cc26:	e7f2      	b.n	cc0e <_svfiprintf_r+0x19a>
    cc28:	3307      	adds	r3, #7
    cc2a:	e7d5      	b.n	cbd8 <_svfiprintf_r+0x164>
    cc2c:	ab05      	add	r3, sp, #20
    cc2e:	9300      	str	r3, [sp, #0]
    cc30:	003a      	movs	r2, r7
    cc32:	4b11      	ldr	r3, [pc, #68]	; (cc78 <_svfiprintf_r+0x204>)
    cc34:	0029      	movs	r1, r5
    cc36:	9802      	ldr	r0, [sp, #8]
    cc38:	e000      	b.n	cc3c <_svfiprintf_r+0x1c8>
    cc3a:	bf00      	nop
    cc3c:	9003      	str	r0, [sp, #12]
    cc3e:	9b03      	ldr	r3, [sp, #12]
    cc40:	3301      	adds	r3, #1
    cc42:	d1cc      	bne.n	cbde <_svfiprintf_r+0x16a>
    cc44:	89bb      	ldrh	r3, [r7, #12]
    cc46:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cc48:	065b      	lsls	r3, r3, #25
    cc4a:	d400      	bmi.n	cc4e <_svfiprintf_r+0x1da>
    cc4c:	e729      	b.n	caa2 <_svfiprintf_r+0x2e>
    cc4e:	2001      	movs	r0, #1
    cc50:	4240      	negs	r0, r0
    cc52:	e726      	b.n	caa2 <_svfiprintf_r+0x2e>
    cc54:	ab05      	add	r3, sp, #20
    cc56:	9300      	str	r3, [sp, #0]
    cc58:	003a      	movs	r2, r7
    cc5a:	4b07      	ldr	r3, [pc, #28]	; (cc78 <_svfiprintf_r+0x204>)
    cc5c:	0029      	movs	r1, r5
    cc5e:	9802      	ldr	r0, [sp, #8]
    cc60:	f000 f9be 	bl	cfe0 <_printf_i>
    cc64:	e7ea      	b.n	cc3c <_svfiprintf_r+0x1c8>
    cc66:	46c0      	nop			; (mov r8, r8)
    cc68:	0000f532 	.word	0x0000f532
    cc6c:	0000f538 	.word	0x0000f538
    cc70:	0000f53c 	.word	0x0000f53c
    cc74:	00000000 	.word	0x00000000
    cc78:	0000c9b1 	.word	0x0000c9b1

0000cc7c <__sfputc_r>:
    cc7c:	6893      	ldr	r3, [r2, #8]
    cc7e:	b510      	push	{r4, lr}
    cc80:	3b01      	subs	r3, #1
    cc82:	6093      	str	r3, [r2, #8]
    cc84:	2b00      	cmp	r3, #0
    cc86:	da05      	bge.n	cc94 <__sfputc_r+0x18>
    cc88:	6994      	ldr	r4, [r2, #24]
    cc8a:	42a3      	cmp	r3, r4
    cc8c:	db08      	blt.n	cca0 <__sfputc_r+0x24>
    cc8e:	b2cb      	uxtb	r3, r1
    cc90:	2b0a      	cmp	r3, #10
    cc92:	d005      	beq.n	cca0 <__sfputc_r+0x24>
    cc94:	6813      	ldr	r3, [r2, #0]
    cc96:	1c58      	adds	r0, r3, #1
    cc98:	6010      	str	r0, [r2, #0]
    cc9a:	7019      	strb	r1, [r3, #0]
    cc9c:	b2c8      	uxtb	r0, r1
    cc9e:	bd10      	pop	{r4, pc}
    cca0:	f7ff fbaa 	bl	c3f8 <__swbuf_r>
    cca4:	e7fb      	b.n	cc9e <__sfputc_r+0x22>

0000cca6 <__sfputs_r>:
    cca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cca8:	0006      	movs	r6, r0
    ccaa:	000f      	movs	r7, r1
    ccac:	0014      	movs	r4, r2
    ccae:	18d5      	adds	r5, r2, r3
    ccb0:	42ac      	cmp	r4, r5
    ccb2:	d101      	bne.n	ccb8 <__sfputs_r+0x12>
    ccb4:	2000      	movs	r0, #0
    ccb6:	e007      	b.n	ccc8 <__sfputs_r+0x22>
    ccb8:	7821      	ldrb	r1, [r4, #0]
    ccba:	003a      	movs	r2, r7
    ccbc:	0030      	movs	r0, r6
    ccbe:	f7ff ffdd 	bl	cc7c <__sfputc_r>
    ccc2:	3401      	adds	r4, #1
    ccc4:	1c43      	adds	r3, r0, #1
    ccc6:	d1f3      	bne.n	ccb0 <__sfputs_r+0xa>
    ccc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000cccc <_vfiprintf_r>:
    cccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ccce:	b09f      	sub	sp, #124	; 0x7c
    ccd0:	0006      	movs	r6, r0
    ccd2:	000f      	movs	r7, r1
    ccd4:	0014      	movs	r4, r2
    ccd6:	9305      	str	r3, [sp, #20]
    ccd8:	2800      	cmp	r0, #0
    ccda:	d004      	beq.n	cce6 <_vfiprintf_r+0x1a>
    ccdc:	6983      	ldr	r3, [r0, #24]
    ccde:	2b00      	cmp	r3, #0
    cce0:	d101      	bne.n	cce6 <_vfiprintf_r+0x1a>
    cce2:	f7ff fd4d 	bl	c780 <__sinit>
    cce6:	4b7f      	ldr	r3, [pc, #508]	; (cee4 <_vfiprintf_r+0x218>)
    cce8:	429f      	cmp	r7, r3
    ccea:	d15c      	bne.n	cda6 <_vfiprintf_r+0xda>
    ccec:	6877      	ldr	r7, [r6, #4]
    ccee:	89bb      	ldrh	r3, [r7, #12]
    ccf0:	071b      	lsls	r3, r3, #28
    ccf2:	d562      	bpl.n	cdba <_vfiprintf_r+0xee>
    ccf4:	693b      	ldr	r3, [r7, #16]
    ccf6:	2b00      	cmp	r3, #0
    ccf8:	d05f      	beq.n	cdba <_vfiprintf_r+0xee>
    ccfa:	2300      	movs	r3, #0
    ccfc:	ad06      	add	r5, sp, #24
    ccfe:	616b      	str	r3, [r5, #20]
    cd00:	3320      	adds	r3, #32
    cd02:	766b      	strb	r3, [r5, #25]
    cd04:	3310      	adds	r3, #16
    cd06:	76ab      	strb	r3, [r5, #26]
    cd08:	9402      	str	r4, [sp, #8]
    cd0a:	9c02      	ldr	r4, [sp, #8]
    cd0c:	7823      	ldrb	r3, [r4, #0]
    cd0e:	2b00      	cmp	r3, #0
    cd10:	d15d      	bne.n	cdce <_vfiprintf_r+0x102>
    cd12:	9b02      	ldr	r3, [sp, #8]
    cd14:	1ae3      	subs	r3, r4, r3
    cd16:	9304      	str	r3, [sp, #16]
    cd18:	d00d      	beq.n	cd36 <_vfiprintf_r+0x6a>
    cd1a:	9b04      	ldr	r3, [sp, #16]
    cd1c:	9a02      	ldr	r2, [sp, #8]
    cd1e:	0039      	movs	r1, r7
    cd20:	0030      	movs	r0, r6
    cd22:	f7ff ffc0 	bl	cca6 <__sfputs_r>
    cd26:	1c43      	adds	r3, r0, #1
    cd28:	d100      	bne.n	cd2c <_vfiprintf_r+0x60>
    cd2a:	e0cc      	b.n	cec6 <_vfiprintf_r+0x1fa>
    cd2c:	696a      	ldr	r2, [r5, #20]
    cd2e:	9b04      	ldr	r3, [sp, #16]
    cd30:	4694      	mov	ip, r2
    cd32:	4463      	add	r3, ip
    cd34:	616b      	str	r3, [r5, #20]
    cd36:	7823      	ldrb	r3, [r4, #0]
    cd38:	2b00      	cmp	r3, #0
    cd3a:	d100      	bne.n	cd3e <_vfiprintf_r+0x72>
    cd3c:	e0c3      	b.n	cec6 <_vfiprintf_r+0x1fa>
    cd3e:	2201      	movs	r2, #1
    cd40:	2300      	movs	r3, #0
    cd42:	4252      	negs	r2, r2
    cd44:	606a      	str	r2, [r5, #4]
    cd46:	a902      	add	r1, sp, #8
    cd48:	3254      	adds	r2, #84	; 0x54
    cd4a:	1852      	adds	r2, r2, r1
    cd4c:	3401      	adds	r4, #1
    cd4e:	602b      	str	r3, [r5, #0]
    cd50:	60eb      	str	r3, [r5, #12]
    cd52:	60ab      	str	r3, [r5, #8]
    cd54:	7013      	strb	r3, [r2, #0]
    cd56:	65ab      	str	r3, [r5, #88]	; 0x58
    cd58:	7821      	ldrb	r1, [r4, #0]
    cd5a:	2205      	movs	r2, #5
    cd5c:	4862      	ldr	r0, [pc, #392]	; (cee8 <_vfiprintf_r+0x21c>)
    cd5e:	f000 fb53 	bl	d408 <memchr>
    cd62:	1c63      	adds	r3, r4, #1
    cd64:	469c      	mov	ip, r3
    cd66:	2800      	cmp	r0, #0
    cd68:	d135      	bne.n	cdd6 <_vfiprintf_r+0x10a>
    cd6a:	6829      	ldr	r1, [r5, #0]
    cd6c:	06cb      	lsls	r3, r1, #27
    cd6e:	d504      	bpl.n	cd7a <_vfiprintf_r+0xae>
    cd70:	2353      	movs	r3, #83	; 0x53
    cd72:	aa02      	add	r2, sp, #8
    cd74:	3020      	adds	r0, #32
    cd76:	189b      	adds	r3, r3, r2
    cd78:	7018      	strb	r0, [r3, #0]
    cd7a:	070b      	lsls	r3, r1, #28
    cd7c:	d504      	bpl.n	cd88 <_vfiprintf_r+0xbc>
    cd7e:	2353      	movs	r3, #83	; 0x53
    cd80:	202b      	movs	r0, #43	; 0x2b
    cd82:	aa02      	add	r2, sp, #8
    cd84:	189b      	adds	r3, r3, r2
    cd86:	7018      	strb	r0, [r3, #0]
    cd88:	7823      	ldrb	r3, [r4, #0]
    cd8a:	2b2a      	cmp	r3, #42	; 0x2a
    cd8c:	d02c      	beq.n	cde8 <_vfiprintf_r+0x11c>
    cd8e:	2000      	movs	r0, #0
    cd90:	210a      	movs	r1, #10
    cd92:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cd94:	7822      	ldrb	r2, [r4, #0]
    cd96:	3a30      	subs	r2, #48	; 0x30
    cd98:	2a09      	cmp	r2, #9
    cd9a:	d800      	bhi.n	cd9e <_vfiprintf_r+0xd2>
    cd9c:	e06b      	b.n	ce76 <_vfiprintf_r+0x1aa>
    cd9e:	2800      	cmp	r0, #0
    cda0:	d02a      	beq.n	cdf8 <_vfiprintf_r+0x12c>
    cda2:	9309      	str	r3, [sp, #36]	; 0x24
    cda4:	e028      	b.n	cdf8 <_vfiprintf_r+0x12c>
    cda6:	4b51      	ldr	r3, [pc, #324]	; (ceec <_vfiprintf_r+0x220>)
    cda8:	429f      	cmp	r7, r3
    cdaa:	d101      	bne.n	cdb0 <_vfiprintf_r+0xe4>
    cdac:	68b7      	ldr	r7, [r6, #8]
    cdae:	e79e      	b.n	ccee <_vfiprintf_r+0x22>
    cdb0:	4b4f      	ldr	r3, [pc, #316]	; (cef0 <_vfiprintf_r+0x224>)
    cdb2:	429f      	cmp	r7, r3
    cdb4:	d19b      	bne.n	ccee <_vfiprintf_r+0x22>
    cdb6:	68f7      	ldr	r7, [r6, #12]
    cdb8:	e799      	b.n	ccee <_vfiprintf_r+0x22>
    cdba:	0039      	movs	r1, r7
    cdbc:	0030      	movs	r0, r6
    cdbe:	f7ff fb71 	bl	c4a4 <__swsetup_r>
    cdc2:	2800      	cmp	r0, #0
    cdc4:	d099      	beq.n	ccfa <_vfiprintf_r+0x2e>
    cdc6:	2001      	movs	r0, #1
    cdc8:	4240      	negs	r0, r0
    cdca:	b01f      	add	sp, #124	; 0x7c
    cdcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cdce:	2b25      	cmp	r3, #37	; 0x25
    cdd0:	d09f      	beq.n	cd12 <_vfiprintf_r+0x46>
    cdd2:	3401      	adds	r4, #1
    cdd4:	e79a      	b.n	cd0c <_vfiprintf_r+0x40>
    cdd6:	4b44      	ldr	r3, [pc, #272]	; (cee8 <_vfiprintf_r+0x21c>)
    cdd8:	6829      	ldr	r1, [r5, #0]
    cdda:	1ac0      	subs	r0, r0, r3
    cddc:	2301      	movs	r3, #1
    cdde:	4083      	lsls	r3, r0
    cde0:	430b      	orrs	r3, r1
    cde2:	602b      	str	r3, [r5, #0]
    cde4:	4664      	mov	r4, ip
    cde6:	e7b7      	b.n	cd58 <_vfiprintf_r+0x8c>
    cde8:	9b05      	ldr	r3, [sp, #20]
    cdea:	1d18      	adds	r0, r3, #4
    cdec:	681b      	ldr	r3, [r3, #0]
    cdee:	9005      	str	r0, [sp, #20]
    cdf0:	2b00      	cmp	r3, #0
    cdf2:	db3a      	blt.n	ce6a <_vfiprintf_r+0x19e>
    cdf4:	9309      	str	r3, [sp, #36]	; 0x24
    cdf6:	4664      	mov	r4, ip
    cdf8:	7823      	ldrb	r3, [r4, #0]
    cdfa:	2b2e      	cmp	r3, #46	; 0x2e
    cdfc:	d10b      	bne.n	ce16 <_vfiprintf_r+0x14a>
    cdfe:	7863      	ldrb	r3, [r4, #1]
    ce00:	1c62      	adds	r2, r4, #1
    ce02:	2b2a      	cmp	r3, #42	; 0x2a
    ce04:	d13f      	bne.n	ce86 <_vfiprintf_r+0x1ba>
    ce06:	9b05      	ldr	r3, [sp, #20]
    ce08:	3402      	adds	r4, #2
    ce0a:	1d1a      	adds	r2, r3, #4
    ce0c:	681b      	ldr	r3, [r3, #0]
    ce0e:	9205      	str	r2, [sp, #20]
    ce10:	2b00      	cmp	r3, #0
    ce12:	db35      	blt.n	ce80 <_vfiprintf_r+0x1b4>
    ce14:	9307      	str	r3, [sp, #28]
    ce16:	7821      	ldrb	r1, [r4, #0]
    ce18:	2203      	movs	r2, #3
    ce1a:	4836      	ldr	r0, [pc, #216]	; (cef4 <_vfiprintf_r+0x228>)
    ce1c:	f000 faf4 	bl	d408 <memchr>
    ce20:	2800      	cmp	r0, #0
    ce22:	d007      	beq.n	ce34 <_vfiprintf_r+0x168>
    ce24:	4b33      	ldr	r3, [pc, #204]	; (cef4 <_vfiprintf_r+0x228>)
    ce26:	682a      	ldr	r2, [r5, #0]
    ce28:	1ac0      	subs	r0, r0, r3
    ce2a:	2340      	movs	r3, #64	; 0x40
    ce2c:	4083      	lsls	r3, r0
    ce2e:	4313      	orrs	r3, r2
    ce30:	602b      	str	r3, [r5, #0]
    ce32:	3401      	adds	r4, #1
    ce34:	7821      	ldrb	r1, [r4, #0]
    ce36:	1c63      	adds	r3, r4, #1
    ce38:	2206      	movs	r2, #6
    ce3a:	482f      	ldr	r0, [pc, #188]	; (cef8 <_vfiprintf_r+0x22c>)
    ce3c:	9302      	str	r3, [sp, #8]
    ce3e:	7629      	strb	r1, [r5, #24]
    ce40:	f000 fae2 	bl	d408 <memchr>
    ce44:	2800      	cmp	r0, #0
    ce46:	d044      	beq.n	ced2 <_vfiprintf_r+0x206>
    ce48:	4b2c      	ldr	r3, [pc, #176]	; (cefc <_vfiprintf_r+0x230>)
    ce4a:	2b00      	cmp	r3, #0
    ce4c:	d12f      	bne.n	ceae <_vfiprintf_r+0x1e2>
    ce4e:	6829      	ldr	r1, [r5, #0]
    ce50:	9b05      	ldr	r3, [sp, #20]
    ce52:	2207      	movs	r2, #7
    ce54:	05c9      	lsls	r1, r1, #23
    ce56:	d528      	bpl.n	ceaa <_vfiprintf_r+0x1de>
    ce58:	189b      	adds	r3, r3, r2
    ce5a:	4393      	bics	r3, r2
    ce5c:	3308      	adds	r3, #8
    ce5e:	9305      	str	r3, [sp, #20]
    ce60:	696b      	ldr	r3, [r5, #20]
    ce62:	9a03      	ldr	r2, [sp, #12]
    ce64:	189b      	adds	r3, r3, r2
    ce66:	616b      	str	r3, [r5, #20]
    ce68:	e74f      	b.n	cd0a <_vfiprintf_r+0x3e>
    ce6a:	425b      	negs	r3, r3
    ce6c:	60eb      	str	r3, [r5, #12]
    ce6e:	2302      	movs	r3, #2
    ce70:	430b      	orrs	r3, r1
    ce72:	602b      	str	r3, [r5, #0]
    ce74:	e7bf      	b.n	cdf6 <_vfiprintf_r+0x12a>
    ce76:	434b      	muls	r3, r1
    ce78:	3401      	adds	r4, #1
    ce7a:	189b      	adds	r3, r3, r2
    ce7c:	2001      	movs	r0, #1
    ce7e:	e789      	b.n	cd94 <_vfiprintf_r+0xc8>
    ce80:	2301      	movs	r3, #1
    ce82:	425b      	negs	r3, r3
    ce84:	e7c6      	b.n	ce14 <_vfiprintf_r+0x148>
    ce86:	2300      	movs	r3, #0
    ce88:	0014      	movs	r4, r2
    ce8a:	200a      	movs	r0, #10
    ce8c:	001a      	movs	r2, r3
    ce8e:	606b      	str	r3, [r5, #4]
    ce90:	7821      	ldrb	r1, [r4, #0]
    ce92:	3930      	subs	r1, #48	; 0x30
    ce94:	2909      	cmp	r1, #9
    ce96:	d903      	bls.n	cea0 <_vfiprintf_r+0x1d4>
    ce98:	2b00      	cmp	r3, #0
    ce9a:	d0bc      	beq.n	ce16 <_vfiprintf_r+0x14a>
    ce9c:	9207      	str	r2, [sp, #28]
    ce9e:	e7ba      	b.n	ce16 <_vfiprintf_r+0x14a>
    cea0:	4342      	muls	r2, r0
    cea2:	3401      	adds	r4, #1
    cea4:	1852      	adds	r2, r2, r1
    cea6:	2301      	movs	r3, #1
    cea8:	e7f2      	b.n	ce90 <_vfiprintf_r+0x1c4>
    ceaa:	3307      	adds	r3, #7
    ceac:	e7d5      	b.n	ce5a <_vfiprintf_r+0x18e>
    ceae:	ab05      	add	r3, sp, #20
    ceb0:	9300      	str	r3, [sp, #0]
    ceb2:	003a      	movs	r2, r7
    ceb4:	4b12      	ldr	r3, [pc, #72]	; (cf00 <_vfiprintf_r+0x234>)
    ceb6:	0029      	movs	r1, r5
    ceb8:	0030      	movs	r0, r6
    ceba:	e000      	b.n	cebe <_vfiprintf_r+0x1f2>
    cebc:	bf00      	nop
    cebe:	9003      	str	r0, [sp, #12]
    cec0:	9b03      	ldr	r3, [sp, #12]
    cec2:	3301      	adds	r3, #1
    cec4:	d1cc      	bne.n	ce60 <_vfiprintf_r+0x194>
    cec6:	89bb      	ldrh	r3, [r7, #12]
    cec8:	065b      	lsls	r3, r3, #25
    ceca:	d500      	bpl.n	cece <_vfiprintf_r+0x202>
    cecc:	e77b      	b.n	cdc6 <_vfiprintf_r+0xfa>
    cece:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ced0:	e77b      	b.n	cdca <_vfiprintf_r+0xfe>
    ced2:	ab05      	add	r3, sp, #20
    ced4:	9300      	str	r3, [sp, #0]
    ced6:	003a      	movs	r2, r7
    ced8:	4b09      	ldr	r3, [pc, #36]	; (cf00 <_vfiprintf_r+0x234>)
    ceda:	0029      	movs	r1, r5
    cedc:	0030      	movs	r0, r6
    cede:	f000 f87f 	bl	cfe0 <_printf_i>
    cee2:	e7ec      	b.n	cebe <_vfiprintf_r+0x1f2>
    cee4:	0000f4e8 	.word	0x0000f4e8
    cee8:	0000f532 	.word	0x0000f532
    ceec:	0000f508 	.word	0x0000f508
    cef0:	0000f4c8 	.word	0x0000f4c8
    cef4:	0000f538 	.word	0x0000f538
    cef8:	0000f53c 	.word	0x0000f53c
    cefc:	00000000 	.word	0x00000000
    cf00:	0000cca7 	.word	0x0000cca7

0000cf04 <_printf_common>:
    cf04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cf06:	0015      	movs	r5, r2
    cf08:	9301      	str	r3, [sp, #4]
    cf0a:	688a      	ldr	r2, [r1, #8]
    cf0c:	690b      	ldr	r3, [r1, #16]
    cf0e:	9000      	str	r0, [sp, #0]
    cf10:	000c      	movs	r4, r1
    cf12:	4293      	cmp	r3, r2
    cf14:	da00      	bge.n	cf18 <_printf_common+0x14>
    cf16:	0013      	movs	r3, r2
    cf18:	0022      	movs	r2, r4
    cf1a:	602b      	str	r3, [r5, #0]
    cf1c:	3243      	adds	r2, #67	; 0x43
    cf1e:	7812      	ldrb	r2, [r2, #0]
    cf20:	2a00      	cmp	r2, #0
    cf22:	d001      	beq.n	cf28 <_printf_common+0x24>
    cf24:	3301      	adds	r3, #1
    cf26:	602b      	str	r3, [r5, #0]
    cf28:	6823      	ldr	r3, [r4, #0]
    cf2a:	069b      	lsls	r3, r3, #26
    cf2c:	d502      	bpl.n	cf34 <_printf_common+0x30>
    cf2e:	682b      	ldr	r3, [r5, #0]
    cf30:	3302      	adds	r3, #2
    cf32:	602b      	str	r3, [r5, #0]
    cf34:	2706      	movs	r7, #6
    cf36:	6823      	ldr	r3, [r4, #0]
    cf38:	401f      	ands	r7, r3
    cf3a:	d027      	beq.n	cf8c <_printf_common+0x88>
    cf3c:	0023      	movs	r3, r4
    cf3e:	3343      	adds	r3, #67	; 0x43
    cf40:	781b      	ldrb	r3, [r3, #0]
    cf42:	1e5a      	subs	r2, r3, #1
    cf44:	4193      	sbcs	r3, r2
    cf46:	6822      	ldr	r2, [r4, #0]
    cf48:	0692      	lsls	r2, r2, #26
    cf4a:	d430      	bmi.n	cfae <_printf_common+0xaa>
    cf4c:	0022      	movs	r2, r4
    cf4e:	9901      	ldr	r1, [sp, #4]
    cf50:	3243      	adds	r2, #67	; 0x43
    cf52:	9800      	ldr	r0, [sp, #0]
    cf54:	9e08      	ldr	r6, [sp, #32]
    cf56:	47b0      	blx	r6
    cf58:	1c43      	adds	r3, r0, #1
    cf5a:	d025      	beq.n	cfa8 <_printf_common+0xa4>
    cf5c:	2306      	movs	r3, #6
    cf5e:	6820      	ldr	r0, [r4, #0]
    cf60:	682a      	ldr	r2, [r5, #0]
    cf62:	68e1      	ldr	r1, [r4, #12]
    cf64:	4003      	ands	r3, r0
    cf66:	2500      	movs	r5, #0
    cf68:	2b04      	cmp	r3, #4
    cf6a:	d103      	bne.n	cf74 <_printf_common+0x70>
    cf6c:	1a8d      	subs	r5, r1, r2
    cf6e:	43eb      	mvns	r3, r5
    cf70:	17db      	asrs	r3, r3, #31
    cf72:	401d      	ands	r5, r3
    cf74:	68a3      	ldr	r3, [r4, #8]
    cf76:	6922      	ldr	r2, [r4, #16]
    cf78:	4293      	cmp	r3, r2
    cf7a:	dd01      	ble.n	cf80 <_printf_common+0x7c>
    cf7c:	1a9b      	subs	r3, r3, r2
    cf7e:	18ed      	adds	r5, r5, r3
    cf80:	2700      	movs	r7, #0
    cf82:	42bd      	cmp	r5, r7
    cf84:	d120      	bne.n	cfc8 <_printf_common+0xc4>
    cf86:	2000      	movs	r0, #0
    cf88:	e010      	b.n	cfac <_printf_common+0xa8>
    cf8a:	3701      	adds	r7, #1
    cf8c:	68e3      	ldr	r3, [r4, #12]
    cf8e:	682a      	ldr	r2, [r5, #0]
    cf90:	1a9b      	subs	r3, r3, r2
    cf92:	429f      	cmp	r7, r3
    cf94:	dad2      	bge.n	cf3c <_printf_common+0x38>
    cf96:	0022      	movs	r2, r4
    cf98:	2301      	movs	r3, #1
    cf9a:	3219      	adds	r2, #25
    cf9c:	9901      	ldr	r1, [sp, #4]
    cf9e:	9800      	ldr	r0, [sp, #0]
    cfa0:	9e08      	ldr	r6, [sp, #32]
    cfa2:	47b0      	blx	r6
    cfa4:	1c43      	adds	r3, r0, #1
    cfa6:	d1f0      	bne.n	cf8a <_printf_common+0x86>
    cfa8:	2001      	movs	r0, #1
    cfaa:	4240      	negs	r0, r0
    cfac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    cfae:	2030      	movs	r0, #48	; 0x30
    cfb0:	18e1      	adds	r1, r4, r3
    cfb2:	3143      	adds	r1, #67	; 0x43
    cfb4:	7008      	strb	r0, [r1, #0]
    cfb6:	0021      	movs	r1, r4
    cfb8:	1c5a      	adds	r2, r3, #1
    cfba:	3145      	adds	r1, #69	; 0x45
    cfbc:	7809      	ldrb	r1, [r1, #0]
    cfbe:	18a2      	adds	r2, r4, r2
    cfc0:	3243      	adds	r2, #67	; 0x43
    cfc2:	3302      	adds	r3, #2
    cfc4:	7011      	strb	r1, [r2, #0]
    cfc6:	e7c1      	b.n	cf4c <_printf_common+0x48>
    cfc8:	0022      	movs	r2, r4
    cfca:	2301      	movs	r3, #1
    cfcc:	321a      	adds	r2, #26
    cfce:	9901      	ldr	r1, [sp, #4]
    cfd0:	9800      	ldr	r0, [sp, #0]
    cfd2:	9e08      	ldr	r6, [sp, #32]
    cfd4:	47b0      	blx	r6
    cfd6:	1c43      	adds	r3, r0, #1
    cfd8:	d0e6      	beq.n	cfa8 <_printf_common+0xa4>
    cfda:	3701      	adds	r7, #1
    cfdc:	e7d1      	b.n	cf82 <_printf_common+0x7e>
	...

0000cfe0 <_printf_i>:
    cfe0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfe2:	b08b      	sub	sp, #44	; 0x2c
    cfe4:	9206      	str	r2, [sp, #24]
    cfe6:	000a      	movs	r2, r1
    cfe8:	3243      	adds	r2, #67	; 0x43
    cfea:	9307      	str	r3, [sp, #28]
    cfec:	9005      	str	r0, [sp, #20]
    cfee:	9204      	str	r2, [sp, #16]
    cff0:	7e0a      	ldrb	r2, [r1, #24]
    cff2:	000c      	movs	r4, r1
    cff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cff6:	2a6e      	cmp	r2, #110	; 0x6e
    cff8:	d100      	bne.n	cffc <_printf_i+0x1c>
    cffa:	e08f      	b.n	d11c <_printf_i+0x13c>
    cffc:	d817      	bhi.n	d02e <_printf_i+0x4e>
    cffe:	2a63      	cmp	r2, #99	; 0x63
    d000:	d02c      	beq.n	d05c <_printf_i+0x7c>
    d002:	d808      	bhi.n	d016 <_printf_i+0x36>
    d004:	2a00      	cmp	r2, #0
    d006:	d100      	bne.n	d00a <_printf_i+0x2a>
    d008:	e099      	b.n	d13e <_printf_i+0x15e>
    d00a:	2a58      	cmp	r2, #88	; 0x58
    d00c:	d054      	beq.n	d0b8 <_printf_i+0xd8>
    d00e:	0026      	movs	r6, r4
    d010:	3642      	adds	r6, #66	; 0x42
    d012:	7032      	strb	r2, [r6, #0]
    d014:	e029      	b.n	d06a <_printf_i+0x8a>
    d016:	2a64      	cmp	r2, #100	; 0x64
    d018:	d001      	beq.n	d01e <_printf_i+0x3e>
    d01a:	2a69      	cmp	r2, #105	; 0x69
    d01c:	d1f7      	bne.n	d00e <_printf_i+0x2e>
    d01e:	6821      	ldr	r1, [r4, #0]
    d020:	681a      	ldr	r2, [r3, #0]
    d022:	0608      	lsls	r0, r1, #24
    d024:	d523      	bpl.n	d06e <_printf_i+0x8e>
    d026:	1d11      	adds	r1, r2, #4
    d028:	6019      	str	r1, [r3, #0]
    d02a:	6815      	ldr	r5, [r2, #0]
    d02c:	e025      	b.n	d07a <_printf_i+0x9a>
    d02e:	2a73      	cmp	r2, #115	; 0x73
    d030:	d100      	bne.n	d034 <_printf_i+0x54>
    d032:	e088      	b.n	d146 <_printf_i+0x166>
    d034:	d808      	bhi.n	d048 <_printf_i+0x68>
    d036:	2a6f      	cmp	r2, #111	; 0x6f
    d038:	d029      	beq.n	d08e <_printf_i+0xae>
    d03a:	2a70      	cmp	r2, #112	; 0x70
    d03c:	d1e7      	bne.n	d00e <_printf_i+0x2e>
    d03e:	2220      	movs	r2, #32
    d040:	6809      	ldr	r1, [r1, #0]
    d042:	430a      	orrs	r2, r1
    d044:	6022      	str	r2, [r4, #0]
    d046:	e003      	b.n	d050 <_printf_i+0x70>
    d048:	2a75      	cmp	r2, #117	; 0x75
    d04a:	d020      	beq.n	d08e <_printf_i+0xae>
    d04c:	2a78      	cmp	r2, #120	; 0x78
    d04e:	d1de      	bne.n	d00e <_printf_i+0x2e>
    d050:	0022      	movs	r2, r4
    d052:	2178      	movs	r1, #120	; 0x78
    d054:	3245      	adds	r2, #69	; 0x45
    d056:	7011      	strb	r1, [r2, #0]
    d058:	4a6c      	ldr	r2, [pc, #432]	; (d20c <_printf_i+0x22c>)
    d05a:	e030      	b.n	d0be <_printf_i+0xde>
    d05c:	000e      	movs	r6, r1
    d05e:	681a      	ldr	r2, [r3, #0]
    d060:	3642      	adds	r6, #66	; 0x42
    d062:	1d11      	adds	r1, r2, #4
    d064:	6019      	str	r1, [r3, #0]
    d066:	6813      	ldr	r3, [r2, #0]
    d068:	7033      	strb	r3, [r6, #0]
    d06a:	2301      	movs	r3, #1
    d06c:	e079      	b.n	d162 <_printf_i+0x182>
    d06e:	0649      	lsls	r1, r1, #25
    d070:	d5d9      	bpl.n	d026 <_printf_i+0x46>
    d072:	1d11      	adds	r1, r2, #4
    d074:	6019      	str	r1, [r3, #0]
    d076:	2300      	movs	r3, #0
    d078:	5ed5      	ldrsh	r5, [r2, r3]
    d07a:	2d00      	cmp	r5, #0
    d07c:	da03      	bge.n	d086 <_printf_i+0xa6>
    d07e:	232d      	movs	r3, #45	; 0x2d
    d080:	9a04      	ldr	r2, [sp, #16]
    d082:	426d      	negs	r5, r5
    d084:	7013      	strb	r3, [r2, #0]
    d086:	4b62      	ldr	r3, [pc, #392]	; (d210 <_printf_i+0x230>)
    d088:	270a      	movs	r7, #10
    d08a:	9303      	str	r3, [sp, #12]
    d08c:	e02f      	b.n	d0ee <_printf_i+0x10e>
    d08e:	6820      	ldr	r0, [r4, #0]
    d090:	6819      	ldr	r1, [r3, #0]
    d092:	0605      	lsls	r5, r0, #24
    d094:	d503      	bpl.n	d09e <_printf_i+0xbe>
    d096:	1d08      	adds	r0, r1, #4
    d098:	6018      	str	r0, [r3, #0]
    d09a:	680d      	ldr	r5, [r1, #0]
    d09c:	e005      	b.n	d0aa <_printf_i+0xca>
    d09e:	0640      	lsls	r0, r0, #25
    d0a0:	d5f9      	bpl.n	d096 <_printf_i+0xb6>
    d0a2:	680d      	ldr	r5, [r1, #0]
    d0a4:	1d08      	adds	r0, r1, #4
    d0a6:	6018      	str	r0, [r3, #0]
    d0a8:	b2ad      	uxth	r5, r5
    d0aa:	4b59      	ldr	r3, [pc, #356]	; (d210 <_printf_i+0x230>)
    d0ac:	2708      	movs	r7, #8
    d0ae:	9303      	str	r3, [sp, #12]
    d0b0:	2a6f      	cmp	r2, #111	; 0x6f
    d0b2:	d018      	beq.n	d0e6 <_printf_i+0x106>
    d0b4:	270a      	movs	r7, #10
    d0b6:	e016      	b.n	d0e6 <_printf_i+0x106>
    d0b8:	3145      	adds	r1, #69	; 0x45
    d0ba:	700a      	strb	r2, [r1, #0]
    d0bc:	4a54      	ldr	r2, [pc, #336]	; (d210 <_printf_i+0x230>)
    d0be:	9203      	str	r2, [sp, #12]
    d0c0:	681a      	ldr	r2, [r3, #0]
    d0c2:	6821      	ldr	r1, [r4, #0]
    d0c4:	1d10      	adds	r0, r2, #4
    d0c6:	6018      	str	r0, [r3, #0]
    d0c8:	6815      	ldr	r5, [r2, #0]
    d0ca:	0608      	lsls	r0, r1, #24
    d0cc:	d522      	bpl.n	d114 <_printf_i+0x134>
    d0ce:	07cb      	lsls	r3, r1, #31
    d0d0:	d502      	bpl.n	d0d8 <_printf_i+0xf8>
    d0d2:	2320      	movs	r3, #32
    d0d4:	4319      	orrs	r1, r3
    d0d6:	6021      	str	r1, [r4, #0]
    d0d8:	2710      	movs	r7, #16
    d0da:	2d00      	cmp	r5, #0
    d0dc:	d103      	bne.n	d0e6 <_printf_i+0x106>
    d0de:	2320      	movs	r3, #32
    d0e0:	6822      	ldr	r2, [r4, #0]
    d0e2:	439a      	bics	r2, r3
    d0e4:	6022      	str	r2, [r4, #0]
    d0e6:	0023      	movs	r3, r4
    d0e8:	2200      	movs	r2, #0
    d0ea:	3343      	adds	r3, #67	; 0x43
    d0ec:	701a      	strb	r2, [r3, #0]
    d0ee:	6863      	ldr	r3, [r4, #4]
    d0f0:	60a3      	str	r3, [r4, #8]
    d0f2:	2b00      	cmp	r3, #0
    d0f4:	db5c      	blt.n	d1b0 <_printf_i+0x1d0>
    d0f6:	2204      	movs	r2, #4
    d0f8:	6821      	ldr	r1, [r4, #0]
    d0fa:	4391      	bics	r1, r2
    d0fc:	6021      	str	r1, [r4, #0]
    d0fe:	2d00      	cmp	r5, #0
    d100:	d158      	bne.n	d1b4 <_printf_i+0x1d4>
    d102:	9e04      	ldr	r6, [sp, #16]
    d104:	2b00      	cmp	r3, #0
    d106:	d064      	beq.n	d1d2 <_printf_i+0x1f2>
    d108:	0026      	movs	r6, r4
    d10a:	9b03      	ldr	r3, [sp, #12]
    d10c:	3642      	adds	r6, #66	; 0x42
    d10e:	781b      	ldrb	r3, [r3, #0]
    d110:	7033      	strb	r3, [r6, #0]
    d112:	e05e      	b.n	d1d2 <_printf_i+0x1f2>
    d114:	0648      	lsls	r0, r1, #25
    d116:	d5da      	bpl.n	d0ce <_printf_i+0xee>
    d118:	b2ad      	uxth	r5, r5
    d11a:	e7d8      	b.n	d0ce <_printf_i+0xee>
    d11c:	6809      	ldr	r1, [r1, #0]
    d11e:	681a      	ldr	r2, [r3, #0]
    d120:	0608      	lsls	r0, r1, #24
    d122:	d505      	bpl.n	d130 <_printf_i+0x150>
    d124:	1d11      	adds	r1, r2, #4
    d126:	6019      	str	r1, [r3, #0]
    d128:	6813      	ldr	r3, [r2, #0]
    d12a:	6962      	ldr	r2, [r4, #20]
    d12c:	601a      	str	r2, [r3, #0]
    d12e:	e006      	b.n	d13e <_printf_i+0x15e>
    d130:	0649      	lsls	r1, r1, #25
    d132:	d5f7      	bpl.n	d124 <_printf_i+0x144>
    d134:	1d11      	adds	r1, r2, #4
    d136:	6019      	str	r1, [r3, #0]
    d138:	6813      	ldr	r3, [r2, #0]
    d13a:	8aa2      	ldrh	r2, [r4, #20]
    d13c:	801a      	strh	r2, [r3, #0]
    d13e:	2300      	movs	r3, #0
    d140:	9e04      	ldr	r6, [sp, #16]
    d142:	6123      	str	r3, [r4, #16]
    d144:	e054      	b.n	d1f0 <_printf_i+0x210>
    d146:	681a      	ldr	r2, [r3, #0]
    d148:	1d11      	adds	r1, r2, #4
    d14a:	6019      	str	r1, [r3, #0]
    d14c:	6816      	ldr	r6, [r2, #0]
    d14e:	2100      	movs	r1, #0
    d150:	6862      	ldr	r2, [r4, #4]
    d152:	0030      	movs	r0, r6
    d154:	f000 f958 	bl	d408 <memchr>
    d158:	2800      	cmp	r0, #0
    d15a:	d001      	beq.n	d160 <_printf_i+0x180>
    d15c:	1b80      	subs	r0, r0, r6
    d15e:	6060      	str	r0, [r4, #4]
    d160:	6863      	ldr	r3, [r4, #4]
    d162:	6123      	str	r3, [r4, #16]
    d164:	2300      	movs	r3, #0
    d166:	9a04      	ldr	r2, [sp, #16]
    d168:	7013      	strb	r3, [r2, #0]
    d16a:	e041      	b.n	d1f0 <_printf_i+0x210>
    d16c:	6923      	ldr	r3, [r4, #16]
    d16e:	0032      	movs	r2, r6
    d170:	9906      	ldr	r1, [sp, #24]
    d172:	9805      	ldr	r0, [sp, #20]
    d174:	9d07      	ldr	r5, [sp, #28]
    d176:	47a8      	blx	r5
    d178:	1c43      	adds	r3, r0, #1
    d17a:	d043      	beq.n	d204 <_printf_i+0x224>
    d17c:	6823      	ldr	r3, [r4, #0]
    d17e:	2500      	movs	r5, #0
    d180:	079b      	lsls	r3, r3, #30
    d182:	d40f      	bmi.n	d1a4 <_printf_i+0x1c4>
    d184:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d186:	68e0      	ldr	r0, [r4, #12]
    d188:	4298      	cmp	r0, r3
    d18a:	da3d      	bge.n	d208 <_printf_i+0x228>
    d18c:	0018      	movs	r0, r3
    d18e:	e03b      	b.n	d208 <_printf_i+0x228>
    d190:	0022      	movs	r2, r4
    d192:	2301      	movs	r3, #1
    d194:	3219      	adds	r2, #25
    d196:	9906      	ldr	r1, [sp, #24]
    d198:	9805      	ldr	r0, [sp, #20]
    d19a:	9e07      	ldr	r6, [sp, #28]
    d19c:	47b0      	blx	r6
    d19e:	1c43      	adds	r3, r0, #1
    d1a0:	d030      	beq.n	d204 <_printf_i+0x224>
    d1a2:	3501      	adds	r5, #1
    d1a4:	68e3      	ldr	r3, [r4, #12]
    d1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d1a8:	1a9b      	subs	r3, r3, r2
    d1aa:	429d      	cmp	r5, r3
    d1ac:	dbf0      	blt.n	d190 <_printf_i+0x1b0>
    d1ae:	e7e9      	b.n	d184 <_printf_i+0x1a4>
    d1b0:	2d00      	cmp	r5, #0
    d1b2:	d0a9      	beq.n	d108 <_printf_i+0x128>
    d1b4:	9e04      	ldr	r6, [sp, #16]
    d1b6:	0028      	movs	r0, r5
    d1b8:	0039      	movs	r1, r7
    d1ba:	f7fe fc25 	bl	ba08 <__aeabi_uidivmod>
    d1be:	9b03      	ldr	r3, [sp, #12]
    d1c0:	3e01      	subs	r6, #1
    d1c2:	5c5b      	ldrb	r3, [r3, r1]
    d1c4:	0028      	movs	r0, r5
    d1c6:	7033      	strb	r3, [r6, #0]
    d1c8:	0039      	movs	r1, r7
    d1ca:	f7fe fb97 	bl	b8fc <__udivsi3>
    d1ce:	1e05      	subs	r5, r0, #0
    d1d0:	d1f1      	bne.n	d1b6 <_printf_i+0x1d6>
    d1d2:	2f08      	cmp	r7, #8
    d1d4:	d109      	bne.n	d1ea <_printf_i+0x20a>
    d1d6:	6823      	ldr	r3, [r4, #0]
    d1d8:	07db      	lsls	r3, r3, #31
    d1da:	d506      	bpl.n	d1ea <_printf_i+0x20a>
    d1dc:	6863      	ldr	r3, [r4, #4]
    d1de:	6922      	ldr	r2, [r4, #16]
    d1e0:	4293      	cmp	r3, r2
    d1e2:	dc02      	bgt.n	d1ea <_printf_i+0x20a>
    d1e4:	2330      	movs	r3, #48	; 0x30
    d1e6:	3e01      	subs	r6, #1
    d1e8:	7033      	strb	r3, [r6, #0]
    d1ea:	9b04      	ldr	r3, [sp, #16]
    d1ec:	1b9b      	subs	r3, r3, r6
    d1ee:	6123      	str	r3, [r4, #16]
    d1f0:	9b07      	ldr	r3, [sp, #28]
    d1f2:	aa09      	add	r2, sp, #36	; 0x24
    d1f4:	9300      	str	r3, [sp, #0]
    d1f6:	0021      	movs	r1, r4
    d1f8:	9b06      	ldr	r3, [sp, #24]
    d1fa:	9805      	ldr	r0, [sp, #20]
    d1fc:	f7ff fe82 	bl	cf04 <_printf_common>
    d200:	1c43      	adds	r3, r0, #1
    d202:	d1b3      	bne.n	d16c <_printf_i+0x18c>
    d204:	2001      	movs	r0, #1
    d206:	4240      	negs	r0, r0
    d208:	b00b      	add	sp, #44	; 0x2c
    d20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d20c:	0000f554 	.word	0x0000f554
    d210:	0000f543 	.word	0x0000f543

0000d214 <_putc_r>:
    d214:	b570      	push	{r4, r5, r6, lr}
    d216:	0006      	movs	r6, r0
    d218:	000d      	movs	r5, r1
    d21a:	0014      	movs	r4, r2
    d21c:	2800      	cmp	r0, #0
    d21e:	d004      	beq.n	d22a <_putc_r+0x16>
    d220:	6983      	ldr	r3, [r0, #24]
    d222:	2b00      	cmp	r3, #0
    d224:	d101      	bne.n	d22a <_putc_r+0x16>
    d226:	f7ff faab 	bl	c780 <__sinit>
    d22a:	4b12      	ldr	r3, [pc, #72]	; (d274 <_putc_r+0x60>)
    d22c:	429c      	cmp	r4, r3
    d22e:	d111      	bne.n	d254 <_putc_r+0x40>
    d230:	6874      	ldr	r4, [r6, #4]
    d232:	68a3      	ldr	r3, [r4, #8]
    d234:	3b01      	subs	r3, #1
    d236:	60a3      	str	r3, [r4, #8]
    d238:	2b00      	cmp	r3, #0
    d23a:	da05      	bge.n	d248 <_putc_r+0x34>
    d23c:	69a2      	ldr	r2, [r4, #24]
    d23e:	4293      	cmp	r3, r2
    d240:	db12      	blt.n	d268 <_putc_r+0x54>
    d242:	b2eb      	uxtb	r3, r5
    d244:	2b0a      	cmp	r3, #10
    d246:	d00f      	beq.n	d268 <_putc_r+0x54>
    d248:	6823      	ldr	r3, [r4, #0]
    d24a:	b2e8      	uxtb	r0, r5
    d24c:	1c5a      	adds	r2, r3, #1
    d24e:	6022      	str	r2, [r4, #0]
    d250:	701d      	strb	r5, [r3, #0]
    d252:	bd70      	pop	{r4, r5, r6, pc}
    d254:	4b08      	ldr	r3, [pc, #32]	; (d278 <_putc_r+0x64>)
    d256:	429c      	cmp	r4, r3
    d258:	d101      	bne.n	d25e <_putc_r+0x4a>
    d25a:	68b4      	ldr	r4, [r6, #8]
    d25c:	e7e9      	b.n	d232 <_putc_r+0x1e>
    d25e:	4b07      	ldr	r3, [pc, #28]	; (d27c <_putc_r+0x68>)
    d260:	429c      	cmp	r4, r3
    d262:	d1e6      	bne.n	d232 <_putc_r+0x1e>
    d264:	68f4      	ldr	r4, [r6, #12]
    d266:	e7e4      	b.n	d232 <_putc_r+0x1e>
    d268:	0022      	movs	r2, r4
    d26a:	0029      	movs	r1, r5
    d26c:	0030      	movs	r0, r6
    d26e:	f7ff f8c3 	bl	c3f8 <__swbuf_r>
    d272:	e7ee      	b.n	d252 <_putc_r+0x3e>
    d274:	0000f4e8 	.word	0x0000f4e8
    d278:	0000f508 	.word	0x0000f508
    d27c:	0000f4c8 	.word	0x0000f4c8

0000d280 <__sread>:
    d280:	b570      	push	{r4, r5, r6, lr}
    d282:	000c      	movs	r4, r1
    d284:	250e      	movs	r5, #14
    d286:	5f49      	ldrsh	r1, [r1, r5]
    d288:	f000 f8f0 	bl	d46c <_read_r>
    d28c:	2800      	cmp	r0, #0
    d28e:	db03      	blt.n	d298 <__sread+0x18>
    d290:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d292:	181b      	adds	r3, r3, r0
    d294:	6563      	str	r3, [r4, #84]	; 0x54
    d296:	bd70      	pop	{r4, r5, r6, pc}
    d298:	89a3      	ldrh	r3, [r4, #12]
    d29a:	4a02      	ldr	r2, [pc, #8]	; (d2a4 <__sread+0x24>)
    d29c:	4013      	ands	r3, r2
    d29e:	81a3      	strh	r3, [r4, #12]
    d2a0:	e7f9      	b.n	d296 <__sread+0x16>
    d2a2:	46c0      	nop			; (mov r8, r8)
    d2a4:	ffffefff 	.word	0xffffefff

0000d2a8 <__swrite>:
    d2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d2aa:	001f      	movs	r7, r3
    d2ac:	898b      	ldrh	r3, [r1, #12]
    d2ae:	0005      	movs	r5, r0
    d2b0:	000c      	movs	r4, r1
    d2b2:	0016      	movs	r6, r2
    d2b4:	05db      	lsls	r3, r3, #23
    d2b6:	d505      	bpl.n	d2c4 <__swrite+0x1c>
    d2b8:	230e      	movs	r3, #14
    d2ba:	5ec9      	ldrsh	r1, [r1, r3]
    d2bc:	2200      	movs	r2, #0
    d2be:	2302      	movs	r3, #2
    d2c0:	f000 f88e 	bl	d3e0 <_lseek_r>
    d2c4:	89a3      	ldrh	r3, [r4, #12]
    d2c6:	4a05      	ldr	r2, [pc, #20]	; (d2dc <__swrite+0x34>)
    d2c8:	0028      	movs	r0, r5
    d2ca:	4013      	ands	r3, r2
    d2cc:	81a3      	strh	r3, [r4, #12]
    d2ce:	0032      	movs	r2, r6
    d2d0:	230e      	movs	r3, #14
    d2d2:	5ee1      	ldrsh	r1, [r4, r3]
    d2d4:	003b      	movs	r3, r7
    d2d6:	f000 f839 	bl	d34c <_write_r>
    d2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2dc:	ffffefff 	.word	0xffffefff

0000d2e0 <__sseek>:
    d2e0:	b570      	push	{r4, r5, r6, lr}
    d2e2:	000c      	movs	r4, r1
    d2e4:	250e      	movs	r5, #14
    d2e6:	5f49      	ldrsh	r1, [r1, r5]
    d2e8:	f000 f87a 	bl	d3e0 <_lseek_r>
    d2ec:	89a3      	ldrh	r3, [r4, #12]
    d2ee:	1c42      	adds	r2, r0, #1
    d2f0:	d103      	bne.n	d2fa <__sseek+0x1a>
    d2f2:	4a05      	ldr	r2, [pc, #20]	; (d308 <__sseek+0x28>)
    d2f4:	4013      	ands	r3, r2
    d2f6:	81a3      	strh	r3, [r4, #12]
    d2f8:	bd70      	pop	{r4, r5, r6, pc}
    d2fa:	2280      	movs	r2, #128	; 0x80
    d2fc:	0152      	lsls	r2, r2, #5
    d2fe:	4313      	orrs	r3, r2
    d300:	81a3      	strh	r3, [r4, #12]
    d302:	6560      	str	r0, [r4, #84]	; 0x54
    d304:	e7f8      	b.n	d2f8 <__sseek+0x18>
    d306:	46c0      	nop			; (mov r8, r8)
    d308:	ffffefff 	.word	0xffffefff

0000d30c <__sclose>:
    d30c:	b510      	push	{r4, lr}
    d30e:	230e      	movs	r3, #14
    d310:	5ec9      	ldrsh	r1, [r1, r3]
    d312:	f000 f82f 	bl	d374 <_close_r>
    d316:	bd10      	pop	{r4, pc}

0000d318 <strchr>:
    d318:	b2c9      	uxtb	r1, r1
    d31a:	7803      	ldrb	r3, [r0, #0]
    d31c:	2b00      	cmp	r3, #0
    d31e:	d004      	beq.n	d32a <strchr+0x12>
    d320:	4299      	cmp	r1, r3
    d322:	d100      	bne.n	d326 <strchr+0xe>
    d324:	4770      	bx	lr
    d326:	3001      	adds	r0, #1
    d328:	e7f7      	b.n	d31a <strchr+0x2>
    d32a:	424b      	negs	r3, r1
    d32c:	4159      	adcs	r1, r3
    d32e:	4249      	negs	r1, r1
    d330:	4008      	ands	r0, r1
    d332:	e7f7      	b.n	d324 <strchr+0xc>

0000d334 <__ascii_wctomb>:
    d334:	1e0b      	subs	r3, r1, #0
    d336:	d004      	beq.n	d342 <__ascii_wctomb+0xe>
    d338:	2aff      	cmp	r2, #255	; 0xff
    d33a:	d904      	bls.n	d346 <__ascii_wctomb+0x12>
    d33c:	238a      	movs	r3, #138	; 0x8a
    d33e:	6003      	str	r3, [r0, #0]
    d340:	3b8b      	subs	r3, #139	; 0x8b
    d342:	0018      	movs	r0, r3
    d344:	4770      	bx	lr
    d346:	700a      	strb	r2, [r1, #0]
    d348:	2301      	movs	r3, #1
    d34a:	e7fa      	b.n	d342 <__ascii_wctomb+0xe>

0000d34c <_write_r>:
    d34c:	b570      	push	{r4, r5, r6, lr}
    d34e:	0005      	movs	r5, r0
    d350:	0008      	movs	r0, r1
    d352:	0011      	movs	r1, r2
    d354:	2200      	movs	r2, #0
    d356:	4c06      	ldr	r4, [pc, #24]	; (d370 <_write_r+0x24>)
    d358:	6022      	str	r2, [r4, #0]
    d35a:	001a      	movs	r2, r3
    d35c:	f7f9 faec 	bl	6938 <_write>
    d360:	1c43      	adds	r3, r0, #1
    d362:	d103      	bne.n	d36c <_write_r+0x20>
    d364:	6823      	ldr	r3, [r4, #0]
    d366:	2b00      	cmp	r3, #0
    d368:	d000      	beq.n	d36c <_write_r+0x20>
    d36a:	602b      	str	r3, [r5, #0]
    d36c:	bd70      	pop	{r4, r5, r6, pc}
    d36e:	46c0      	nop			; (mov r8, r8)
    d370:	200013f4 	.word	0x200013f4

0000d374 <_close_r>:
    d374:	2300      	movs	r3, #0
    d376:	b570      	push	{r4, r5, r6, lr}
    d378:	4c06      	ldr	r4, [pc, #24]	; (d394 <_close_r+0x20>)
    d37a:	0005      	movs	r5, r0
    d37c:	0008      	movs	r0, r1
    d37e:	6023      	str	r3, [r4, #0]
    d380:	f7f9 fb14 	bl	69ac <_close>
    d384:	1c43      	adds	r3, r0, #1
    d386:	d103      	bne.n	d390 <_close_r+0x1c>
    d388:	6823      	ldr	r3, [r4, #0]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d000      	beq.n	d390 <_close_r+0x1c>
    d38e:	602b      	str	r3, [r5, #0]
    d390:	bd70      	pop	{r4, r5, r6, pc}
    d392:	46c0      	nop			; (mov r8, r8)
    d394:	200013f4 	.word	0x200013f4

0000d398 <_fstat_r>:
    d398:	2300      	movs	r3, #0
    d39a:	b570      	push	{r4, r5, r6, lr}
    d39c:	4c06      	ldr	r4, [pc, #24]	; (d3b8 <_fstat_r+0x20>)
    d39e:	0005      	movs	r5, r0
    d3a0:	0008      	movs	r0, r1
    d3a2:	0011      	movs	r1, r2
    d3a4:	6023      	str	r3, [r4, #0]
    d3a6:	f7f9 fb04 	bl	69b2 <_fstat>
    d3aa:	1c43      	adds	r3, r0, #1
    d3ac:	d103      	bne.n	d3b6 <_fstat_r+0x1e>
    d3ae:	6823      	ldr	r3, [r4, #0]
    d3b0:	2b00      	cmp	r3, #0
    d3b2:	d000      	beq.n	d3b6 <_fstat_r+0x1e>
    d3b4:	602b      	str	r3, [r5, #0]
    d3b6:	bd70      	pop	{r4, r5, r6, pc}
    d3b8:	200013f4 	.word	0x200013f4

0000d3bc <_isatty_r>:
    d3bc:	2300      	movs	r3, #0
    d3be:	b570      	push	{r4, r5, r6, lr}
    d3c0:	4c06      	ldr	r4, [pc, #24]	; (d3dc <_isatty_r+0x20>)
    d3c2:	0005      	movs	r5, r0
    d3c4:	0008      	movs	r0, r1
    d3c6:	6023      	str	r3, [r4, #0]
    d3c8:	f7f9 faf8 	bl	69bc <_isatty>
    d3cc:	1c43      	adds	r3, r0, #1
    d3ce:	d103      	bne.n	d3d8 <_isatty_r+0x1c>
    d3d0:	6823      	ldr	r3, [r4, #0]
    d3d2:	2b00      	cmp	r3, #0
    d3d4:	d000      	beq.n	d3d8 <_isatty_r+0x1c>
    d3d6:	602b      	str	r3, [r5, #0]
    d3d8:	bd70      	pop	{r4, r5, r6, pc}
    d3da:	46c0      	nop			; (mov r8, r8)
    d3dc:	200013f4 	.word	0x200013f4

0000d3e0 <_lseek_r>:
    d3e0:	b570      	push	{r4, r5, r6, lr}
    d3e2:	0005      	movs	r5, r0
    d3e4:	0008      	movs	r0, r1
    d3e6:	0011      	movs	r1, r2
    d3e8:	2200      	movs	r2, #0
    d3ea:	4c06      	ldr	r4, [pc, #24]	; (d404 <_lseek_r+0x24>)
    d3ec:	6022      	str	r2, [r4, #0]
    d3ee:	001a      	movs	r2, r3
    d3f0:	f7f9 fae6 	bl	69c0 <_lseek>
    d3f4:	1c43      	adds	r3, r0, #1
    d3f6:	d103      	bne.n	d400 <_lseek_r+0x20>
    d3f8:	6823      	ldr	r3, [r4, #0]
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d000      	beq.n	d400 <_lseek_r+0x20>
    d3fe:	602b      	str	r3, [r5, #0]
    d400:	bd70      	pop	{r4, r5, r6, pc}
    d402:	46c0      	nop			; (mov r8, r8)
    d404:	200013f4 	.word	0x200013f4

0000d408 <memchr>:
    d408:	b2c9      	uxtb	r1, r1
    d40a:	1882      	adds	r2, r0, r2
    d40c:	4290      	cmp	r0, r2
    d40e:	d101      	bne.n	d414 <memchr+0xc>
    d410:	2000      	movs	r0, #0
    d412:	4770      	bx	lr
    d414:	7803      	ldrb	r3, [r0, #0]
    d416:	428b      	cmp	r3, r1
    d418:	d0fb      	beq.n	d412 <memchr+0xa>
    d41a:	3001      	adds	r0, #1
    d41c:	e7f6      	b.n	d40c <memchr+0x4>

0000d41e <_realloc_r>:
    d41e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d420:	0007      	movs	r7, r0
    d422:	000d      	movs	r5, r1
    d424:	0016      	movs	r6, r2
    d426:	2900      	cmp	r1, #0
    d428:	d105      	bne.n	d436 <_realloc_r+0x18>
    d42a:	0011      	movs	r1, r2
    d42c:	f7fe fcb2 	bl	bd94 <_malloc_r>
    d430:	0004      	movs	r4, r0
    d432:	0020      	movs	r0, r4
    d434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d436:	2a00      	cmp	r2, #0
    d438:	d103      	bne.n	d442 <_realloc_r+0x24>
    d43a:	f7fe fc61 	bl	bd00 <_free_r>
    d43e:	0034      	movs	r4, r6
    d440:	e7f7      	b.n	d432 <_realloc_r+0x14>
    d442:	f000 f827 	bl	d494 <_malloc_usable_size_r>
    d446:	002c      	movs	r4, r5
    d448:	4286      	cmp	r6, r0
    d44a:	d9f2      	bls.n	d432 <_realloc_r+0x14>
    d44c:	0031      	movs	r1, r6
    d44e:	0038      	movs	r0, r7
    d450:	f7fe fca0 	bl	bd94 <_malloc_r>
    d454:	1e04      	subs	r4, r0, #0
    d456:	d0ec      	beq.n	d432 <_realloc_r+0x14>
    d458:	0029      	movs	r1, r5
    d45a:	0032      	movs	r2, r6
    d45c:	f7fe fc2c 	bl	bcb8 <memcpy>
    d460:	0029      	movs	r1, r5
    d462:	0038      	movs	r0, r7
    d464:	f7fe fc4c 	bl	bd00 <_free_r>
    d468:	e7e3      	b.n	d432 <_realloc_r+0x14>
	...

0000d46c <_read_r>:
    d46c:	b570      	push	{r4, r5, r6, lr}
    d46e:	0005      	movs	r5, r0
    d470:	0008      	movs	r0, r1
    d472:	0011      	movs	r1, r2
    d474:	2200      	movs	r2, #0
    d476:	4c06      	ldr	r4, [pc, #24]	; (d490 <_read_r+0x24>)
    d478:	6022      	str	r2, [r4, #0]
    d47a:	001a      	movs	r2, r3
    d47c:	f7f9 fa3a 	bl	68f4 <_read>
    d480:	1c43      	adds	r3, r0, #1
    d482:	d103      	bne.n	d48c <_read_r+0x20>
    d484:	6823      	ldr	r3, [r4, #0]
    d486:	2b00      	cmp	r3, #0
    d488:	d000      	beq.n	d48c <_read_r+0x20>
    d48a:	602b      	str	r3, [r5, #0]
    d48c:	bd70      	pop	{r4, r5, r6, pc}
    d48e:	46c0      	nop			; (mov r8, r8)
    d490:	200013f4 	.word	0x200013f4

0000d494 <_malloc_usable_size_r>:
    d494:	1f0b      	subs	r3, r1, #4
    d496:	681b      	ldr	r3, [r3, #0]
    d498:	1f18      	subs	r0, r3, #4
    d49a:	2b00      	cmp	r3, #0
    d49c:	da01      	bge.n	d4a2 <_malloc_usable_size_r+0xe>
    d49e:	580b      	ldr	r3, [r1, r0]
    d4a0:	18c0      	adds	r0, r0, r3
    d4a2:	4770      	bx	lr

0000d4a4 <mmc_trans_multipliers>:
    d4a4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    d4b4:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    d4c4:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    d4d4:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000d4e4 <sd_mmc_trans_units>:
    d4e4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0000d500 <sd_trans_multipliers>:
    d500:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    d510:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    d520:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    d530:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000d540 <__FUNCTION__.14519>:
    d540:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
    d550:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
    d560:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
    d570:	746c 6320 646d 0000 1eac 0000 1e7c 0000     lt cmd......|...
    d580:	1e74 0000 1e8c 0000 1e84 0000 1ea4 0000     t...............
    d590:	1e94 0000 1e9c 0000                         ........

0000d598 <__FUNCTION__.13113>:
    d598:	6968 5f66 6573 646e 0000 0000               hif_send....

0000d5a4 <__FUNCTION__.13123>:
    d5a4:	6968 5f66 7369 0072                         hif_isr.

0000d5ac <__FUNCTION__.13132>:
    d5ac:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0000d5bc <__FUNCTION__.13144>:
    d5bc:	6968 5f66 6572 6563 7669 0065               hif_receive.

0000d5c8 <__FUNCTION__.13160>:
    d5c8:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
    d5d8:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
    d5e8:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
    d5f8:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
    d608:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
    d618:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
    d628:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
    d638:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
    d648:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
    d658:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
    d668:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
    d678:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
    d688:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
    d698:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
    d6a8:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
    d6b8:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
    d6c8:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
    d6d8:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
    d6e8:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
    d6f8:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
    d708:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
    d718:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
    d728:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
    d738:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
    d748:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
    d758:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
    d768:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
    d778:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
    d788:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
    d798:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
    d7a8:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
    d7b8:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
    d7c8:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
    d7d8:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
    d7e8:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
    d7f8:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
    d808:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
    d818:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
    d828:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
    d838:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
    d848:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
    d858:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
    d868:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
    d878:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
    d888:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
    d898:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
    d8a8:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

0000d8b8 <__FUNCTION__.13095>:
    d8b8:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0000d8c4 <__FUNCTION__.13124>:
    d8c4:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0000d8d4 <__FUNCTION__.13155>:
    d8d4:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
    d8e4:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
    d8f4:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
    d904:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
    d914:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
    d924:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
    d934:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
    d944:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
    d954:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
    d964:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
    d974:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
    d984:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
    d994:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
    d9a4:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
    d9b4:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
    d9c4:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
    d9d4:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
    d9e4:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
    d9f4:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
    da04:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
    da14:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
    da24:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
    da34:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
    da44:	3431 333a 3a37 3433 0000 0000 7041 2072     14:37:34....Apr 
    da54:	3631 3220 3130 0039 7244 7669 7265 6220     16 2019.Driver b
    da64:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
    da74:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
    da84:	2065 6556 7372 6f69 006e 0000               e Version...

0000da90 <__FUNCTION__.12952>:
    da90:	6863 7069 775f 6b61 0065 0000               chip_wake...

0000da9c <__FUNCTION__.13001>:
    da9c:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
    daac:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
    dabc:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
    dacc:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
    dadc:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
    daec:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
    dafc:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

0000db0c <__FUNCTION__.12999>:
    db0c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0000db18 <__FUNCTION__.13006>:
    db18:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
    db28:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
    db38:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
    db48:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
    db58:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
    db68:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
    db78:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
    db88:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
    db98:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
    dba8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
    dbb8:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
    dbc8:	4920 2044 6c25 0a78 0000 0000 2e8c 0000      ID %lx.........
    dbd8:	2e8c 0000 2ebc 0000 2e3e 0000 2e62 0000     ........>...b...
    dbe8:	2e70 0000 2ea2 0000 2ea2 0000 2eea 0000     p...............
    dbf8:	2e22 0000 2f24 0000 2f24 0000 2f24 0000     "...$/..$/..$/..
    dc08:	2f24 0000 2e7e 0000 c9c3 cac4               $/..~.......

0000dc14 <__FUNCTION__.12268>:
    dc14:	7073 5f69 6d63 0064                         spi_cmd.

0000dc1c <__FUNCTION__.12275>:
    dc1c:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0000dc2c <__FUNCTION__.12284>:
    dc2c:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0000dc38 <__FUNCTION__.12300>:
    dc38:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0000dc48 <__FUNCTION__.12315>:
    dc48:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0000dc58 <__FUNCTION__.12327>:
    dc58:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0000dc68 <__FUNCTION__.12338>:
    dc68:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0000dc78 <__FUNCTION__.12350>:
    dc78:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0000dc88 <__FUNCTION__.12363>:
    dc88:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0000dc94 <__FUNCTION__.12384>:
    dc94:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0000dca0 <crc7_syndrome_table>:
    dca0:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    dcb0:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    dcc0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    dcd0:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    dce0:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    dcf0:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    dd00:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    dd10:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    dd20:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    dd30:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    dd40:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    dd50:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    dd60:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    dd70:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    dd80:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    dd90:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    dda0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    ddb0:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    ddc0:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
    ddd0:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
    dde0:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
    ddf0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    de00:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    de10:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
    de20:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
    de30:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
    de40:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
    de50:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
    de60:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
    de70:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    de80:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
    de90:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
    dea0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    deb0:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
    dec0:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
    ded0:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
    dee0:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    def0:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
    df00:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
    df10:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
    df20:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    df30:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
    df40:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
    df50:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
    df60:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
    df70:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
    df80:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
    df90:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    dfa0:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
    dfb0:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
    dfc0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    dfd0:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
    dfe0:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
    dff0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    e000:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
    e010:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
    e020:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
    e030:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
    e040:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
    e050:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    e060:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
    e070:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
    e080:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    e090:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
    e0a0:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    e0b0:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
    e0c0:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
    e0d0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    e0e0:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
    e0f0:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
    e100:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    e110:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
    e120:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
    e130:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
    e140:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
    e150:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
    e160:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
    e170:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    e180:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
    e190:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
    e1a0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    e1b0:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
    e1c0:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
    e1d0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
    e1e0:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
    e1f0:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
    e200:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
    e210:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
    e220:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
    e230:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    e240:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
    e250:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
    e260:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
    e270:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
    e280:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
    e290:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    e2a0:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
    e2b0:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
    e2c0:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
    e2d0:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
    e2e0:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
    e2f0:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
    e300:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
    e310:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
    e320:	206e 4449 3d20 2520 0d64 000a 0800 4200     n ID = %d......B
    e330:	0c00 4200 1000 4200 1400 4200 1800 4200     ...B...B...B...B
    e340:	1c00 4200 5a1e 0000 5a1a 0000 5a1a 0000     ...B.Z...Z...Z..
    e350:	5a80 0000 5a80 0000 5a32 0000 5a24 0000     .Z...Z..2Z..$Z..
    e360:	5a38 0000 5a6e 0000 5c40 0000 5c20 0000     8Z..nZ..@\.. \..
    e370:	5c20 0000 5cac 0000 5c32 0000 5c4e 0000      \...\..2\..N\..
    e380:	5c24 0000 5c5c 0000 5c9c 0000               $\..\\...\..

0000e38c <_tcc_apbcmasks>:
    e38c:	0100 0000 0200 0000 0400 0000               ............

0000e398 <_tcc_cc_nums>:
    e398:	0204 0002                                   ....

0000e39c <_tcc_gclk_ids>:
    e39c:	1a1a 001b                                   ....

0000e3a0 <_tcc_maxs>:
    e3a0:	ffff 00ff ffff 00ff ffff 0000               ............

0000e3ac <_tcc_ow_nums>:
    e3ac:	0408 0002                                   ....

0000e3b0 <_tcc_intflag>:
    e3b0:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    e3c0:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    e3d0:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0000e3e0 <tcc_interrupt_vectors.12458>:
    e3e0:	100f 0011                                   ....

0000e3e4 <LfnOfs>:
    e3e4:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0000e3f4 <excvt.4558>:
    e3f4:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    e404:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    e414:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    e424:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    e434:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    e444:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    e454:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    e464:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
    e474:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    e484:	5d5b 0000                                   []..

0000e488 <Tbl>:
    e488:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    e498:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    e4a8:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    e4b8:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    e4c8:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    e4d8:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    e4e8:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    e4f8:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    e508:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    e518:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    e528:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    e538:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    e548:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    e558:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    e568:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    e578:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0000e588 <tbl_lower.4308>:
    e588:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    e598:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    e5a8:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    e5b8:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    e5c8:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    e5d8:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    e5e8:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    e5f8:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    e608:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    e618:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    e628:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    e638:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    e648:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    e658:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    e668:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    e678:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    e688:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    e698:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    e6a8:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    e6b8:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    e6c8:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    e6d8:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    e6e8:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    e6f8:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    e708:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    e718:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    e728:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    e738:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    e748:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    e758:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0000e768 <tbl_upper.4309>:
    e768:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    e778:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    e788:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    e798:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    e7a8:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    e7b8:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    e7c8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    e7d8:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    e7e8:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    e7f8:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    e808:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    e818:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    e828:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    e838:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    e848:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    e858:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    e868:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    e878:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    e888:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    e898:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    e8a8:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    e8b8:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    e8c8:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    e8d8:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    e8e8:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    e8f8:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    e908:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    e918:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    e928:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    e938:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
    e948:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
    e960:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
    e9a0:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
    e9b8:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
    e9f8:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
    ea08:	a922 0000 a91c 0000 a916 0000 a910 0000     "...............
    ea18:	a928 0000 a930 0000 a928 0000 a90a 0000     (...0...(.......
    ea28:	a904 0000 a928 0000 a8fe 0000 a8fe 0000     ....(...........
    ea38:	a8f8 0000 a8f2 0000 a930 0000 a99a 0000     ........0.......
    ea48:	a994 0000 a98e 0000 a988 0000 a9a0 0000     ................
    ea58:	a9a8 0000 a9a0 0000 a982 0000 a97c 0000     ............|...
    ea68:	a9a0 0000 a976 0000 a976 0000 a970 0000     ....v...v...p...
    ea78:	a96a 0000 a9a8 0000 aa14 0000 aa0e 0000     j...............
    ea88:	aa08 0000 aa02 0000 aa1a 0000 aa1a 0000     ................
    ea98:	aa1a 0000 a9fc 0000 a9f6 0000 aa1a 0000     ................
    eaa8:	a9f0 0000 a9f0 0000 a9ea 0000 a9e4 0000     ................
    eab8:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
    eac8:	0d31 0000 7254 6e61 6673 7265 452d 636e     1...Transfer-Enc
    ead8:	646f 6e69 3a67 0020 6f43 6e6e 6365 6974     oding: .Connecti
    eae8:	6e6f 203a 0000 0000 5448 5054 002f 0000     on: ....HTTP/...
    eaf8:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
    eb08:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
    eb18:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
    eb28:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
    eb38:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
    eb48:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
    eb58:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
    eb68:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
    eb78:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
    eb88:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
    eb98:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
    eba8:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
    ebb8:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
    ebc8:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
    ebd8:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
    ebe8:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
    ebf8:	2800 4200 b240 0000 b248 0000 b256 0000     .(.B@...H...V...
    ec08:	b28e 0000 b2a4 0000 0a0d 2520 2a2e 0073     .......... %.*s.
    ec18:	3e20 203e 0000 0000 2e25 732a 0000 0000      >> ....%.*s....
    ec28:	654c 4464 7461 0061 6166 736c 0065 0000     LedData.false...
    ec38:	7274 6575 0000 0000 227b 2264 7b3a 7422     true....{"d":{"t
    ec48:	6d65 2270 253a 7d64 007d 0000 7468 7074     emp":%d}}...http
    ec58:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
    ec68:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
    ec78:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
    ec88:	0000 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
    ec98:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
    eca8:	2074 6f63 706d 656c 6574 2e64 000d 0000     t completed.....
    ecb8:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
    ecc8:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
    ecd8:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
    ece8:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
    ecf8:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
    ed08:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
    ed18:	6572 7361 6e6f 253a 0d64 000a 0a0d 2d2d     reason:%d.....--
    ed28:	4220 6f6f 6974 676e 7520 2070 6874 2065      Booting up the 
    ed38:	6564 6976 6563 2d20 0d2d 2d0a 202d 4544     device --..-- DE
    ed48:	4f4c 2053 4e49 2e43 6f20 206e 4153 444d     LOS INC. on SAMD
    ed58:	3132 3147 4138 4d20 5543 2d20 0d2d 2d0a     21G18A MCU --..-
    ed68:	202d 6f43 706d 6c69 6465 203a 7041 2072     - Compiled: Apr 
    ed78:	3631 3220 3130 2039 3931 343a 3a39 3633     16 2019 19:49:36
    ed88:	2d20 0d2d 0000 0000 0a0d 6e49 7469 6169      --.......Initia
    ed98:	696c 697a 676e 4220 616f 6472 2e20 2e2e     lizing Board ...
    eda8:	2e2e 202e 0a0d 000d 6f63 666e 6769 7275     ... ....configur
    edb8:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
    edc8:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
    edd8:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
    ede8:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
    edf8:	514d 5454 6920 696e 6974 6c61 7a69 7461     MQTT initializat
    ee08:	6f69 206e 6166 6c69 6465 202e 7245 6f72     ion failed. Erro
    ee18:	2072 6f63 6564 6920 2073 2528 2964 0a0d     r code is (%d)..
    ee28:	0000 0000 514d 5454 7220 6765 7369 6574     ....MQTT registe
    ee38:	2072 6163 6c6c 6162 6b63 6620 6961 656c     r callback faile
    ee48:	2e64 4520 7272 726f 6320 646f 2065 7369     d. Error code is
    ee58:	2820 6425 0d29 000a 6e69 7469 735f 6f74      (%d)...init_sto
    ee68:	6172 6567 203a 6c70 6165 6573 7020 756c     rage: please plu
    ee78:	2067 6e61 5320 2f44 4d4d 2043 6163 6472     g an SD/MMC card
    ee88:	6920 206e 6c73 746f 2e2e 0d2e 0000 0000      in slot........
    ee98:	6e69 7469 735f 6f74 6172 6567 203a 4453     init_storage: SD
    eea8:	4320 7261 2064 6e69 7473 6c61 206c 6166      Card install fa
    eeb8:	6c69 6465 0d2e 0000 6e69 7469 735f 6f74     iled....init_sto
    eec8:	6172 6567 203a 7274 2079 6e75 6c70 6775     rage: try unplug
    eed8:	6120 646e 7220 2d65 6c70 6775 7420 6568      and re-plug the
    eee8:	6320 7261 2e64 000d 6e69 7469 735f 6f74      card...init_sto
    eef8:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
    ef08:	2044 6163 6472 2e2e 0d2e 0000 6e69 7469     D card......init
    ef18:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
    ef28:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
    ef38:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
    ef48:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
    ef58:	2064 6f6d 6e75 2074 4b4f 0d2e 0000 0000     d mount OK......
    ef68:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
    ef78:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
    ef88:	7228 7365 2520 2964 0a0d 0000 0d0a 3e20     (res %d)...... >
    ef98:	203e 6f42 7261 2064 6e61 2064 6570 6972     > Board and peri
    efa8:	6870 7265 6c61 2073 6e69 7469 6169 696c     pherals initiali
    efb8:	657a 0a64 000d 0000 0d0a 0000 616d 6e69     zed.........main
    efc8:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
    efd8:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
    efe8:	616d 6e69 203a 6c70 6165 6573 7520 706e     main: please unp
    eff8:	756c 2067 6874 2065 4453 4d2f 434d 6320     lug the SD/MMC c
    f008:	7261 2e64 000d 0000 616d 6e69 203a 6f64     ard.....main: do
    f018:	656e 0d2e 0000 0000 5245 3e52 203e 7953     ne......ERR>> Sy
    f028:	7473 6369 206b 6f63 666e 6769 7275 7461     stick configurat
    f038:	6f69 206e 7265 6f72 0d72 000a               ion error...

0000f044 <main_mqtt_broker>:
    f044:	316d 2e36 6c63 756f 6d64 7471 2e74 6f63     m16.cloudmqtt.co
    f054:	006d 0000 0a0d 6f43 6e6e 6365 6974 676e     m.....Connecting
    f064:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
    f074:	336b 7255 666f 4454 674c 4b44 0000 0000     k3UrofTDLgDK....
    f084:	7767 6e76 6e76 6663 0000 0000 514d 5454     gwvnvncf....MQTT
    f094:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
    f0a4:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
    f0b4:	0d72 0000 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
    f0c4:	6465 7420 206f 7262 6b6f 7265 000d 0000     ed to broker....
    f0d4:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
    f0e4:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
    f0f4:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
    f104:	796c 0d2e 000a 0000 6554 706d 6144 6174     ly......TempData
    f114:	0000 0000 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
    f124:	6465 000d 514d 5454 6220 6f72 656b 2072     ed..MQTT broker 
    f134:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
    f144:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
    f154:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
    f164:	6f63 6e6e 6365 6574 0d64 0000 3025 6433     connected...%03d
    f174:	0000 0000 6572 6f73 766c 5f65 6263 203a     ....resolve_cb: 
    f184:	7325 4920 2050 6461 7264 7365 2073 7369     %s IP address is
    f194:	2520 2e64 6425 252e 2e64 6425 0a0d 0a0d      %d.%d.%d.%d....
    f1a4:	0000 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
    f1b4:	6461 203a 4d4d 2043 7473 726f 6761 2065     ad: MMC storage 
    f1c4:	6f6e 2074 6572 6461 2e79 000d 7473 7261     not ready...star
    f1d4:	5f74 6f64 6e77 6f6c 6461 203a 6957 462d     t_download: Wi-F
    f1e4:	2069 7369 6e20 746f 6320 6e6f 656e 7463     i is not connect
    f1f4:	6465 0d2e 0000 0000 7473 7261 5f74 6f64     ed......start_do
    f204:	6e77 6f6c 6461 203a 6572 7571 7365 2074     wnload: request 
    f214:	7369 7320 6e65 2074 6c61 6572 6461 2e79     is sent already.
    f224:	000d 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
    f234:	6461 203a 7572 6e6e 6e69 2067 6f64 6e77     ad: running down
    f244:	6f6c 6461 6120 726c 6165 7964 0d2e 0000     load already....
    f254:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
    f264:	6573 646e 6e69 2067 5448 5054 7220 7165     sending HTTP req
    f274:	6575 7473 2e2e 0d2e 0000 0000 7468 7074     uest........http
    f284:	2f3a 772f 7777 732e 6165 2e73 7075 6e65     ://www.seas.upen
    f294:	2e6e 6465 2f75 747e 6867 6465 6f61 2f6f     n.edu/~tghedaoo/
    f2a4:	6946 6d72 6177 6572 622e 6e69 0000 0000     Firmware.bin....
    f2b4:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
    f2c4:	3a74 6520 706d 7974 6420 7461 2e61 000d     t: empty data...
    f2d4:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
    f2e4:	3a74 6320 6572 7461 6e69 2067 6966 656c     t: creating file
    f2f4:	5b20 7325 0d5d 000a 7473 726f 5f65 6966      [%s]...store_fi
    f304:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
    f314:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
    f324:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
    f334:	6465 0d2e 0000 0000 7473 726f 5f65 6966     ed......store_fi
    f344:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
    f354:	7263 6165 6974 6e6f 6520 7272 726f 2021     creation error! 
    f364:	6572 3a74 6425 0a0d 0000 0000 7473 726f     ret:%d......stor
    f374:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
    f384:	6c69 2065 7277 7469 2065 7265 6f72 2c72     ile write error,
    f394:	6420 776f 6c6e 616f 2064 6163 636e 6c65      download cancel
    f3a4:	6465 0d2e 0000 0000 7473 726f 5f65 6966     ed......store_fi
    f3b4:	656c 705f 6361 656b 3a74 7220 6365 6965     le_packet: recei
    f3c4:	6576 5b64 6c25 5d75 202c 6966 656c 7320     ved[%lu], file s
    f3d4:	7a69 5b65 6c25 5d75 0a0d 0000 7473 726f     ize[%lu]....stor
    f3e4:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
    f3f4:	6c69 2065 6f64 6e77 6f6c 6461 6465 7320     ile downloaded s
    f404:	6375 6563 7373 7566 6c6c 2e79 000d 0000     uccessfully.....
    f414:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
    f424:	5f49 4f43 4e4e 4345 4554 0d44 0000 0000     I_CONNECTED.....
    f434:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
    f444:	5f49 4944 4353 4e4f 454e 5443 4445 000d     I_DISCONNECTED..
    f454:	6570 6e6e 3731 3034 6977 6966 0000 0000     penn1740wifi....
    f464:	6941 5072 6e65 4e6e 7465 442d 7665 6369     AirPennNet-Devic
    f474:	0065 0000 6977 6966 635f 3a62 4920 2050     e...wifi_cb: IP 
    f484:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
    f494:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
    f4a4:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
    f4b4:	514d 5454 4220 6f72 656b 2172 000d 0000     MQTT Broker!....

0000f4c4 <_global_impure_ptr>:
    f4c4:	0154 2000                                   T.. 

0000f4c8 <__sf_fake_stderr>:
	...

0000f4e8 <__sf_fake_stdin>:
	...

0000f508 <__sf_fake_stdout>:
	...
    f528:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
    f538:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
    f548:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
    f558:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0000f565 <_ctype_>:
    f565:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    f575:	2020 2020 2020 2020 2020 2020 2020 2020                     
    f585:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    f595:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    f5a5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    f5b5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    f5c5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    f5d5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    f5e5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000f668 <_init>:
    f668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f66a:	46c0      	nop			; (mov r8, r8)
    f66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f66e:	bc08      	pop	{r3}
    f670:	469e      	mov	lr, r3
    f672:	4770      	bx	lr

0000f674 <__init_array_start>:
    f674:	000000dd 	.word	0x000000dd

0000f678 <_fini>:
    f678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f67a:	46c0      	nop			; (mov r8, r8)
    f67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f67e:	bc08      	pop	{r3}
    f680:	469e      	mov	lr, r3
    f682:	4770      	bx	lr

0000f684 <__fini_array_start>:
    f684:	000000b5 	.word	0x000000b5
