
SAMW25_HTTP_AND_MQTT_STARTER_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f5d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002fc  20000000  0000f5d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000fc0  200002fc  0000f8d4  000202fc  2**2
                  ALLOC
  3 .stack        00002004  200012bc  00010894  000202fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
  6 .debug_info   00082cf0  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000c699  00000000  00000000  000a306d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00022be2  00000000  00000000  000af706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000017b8  00000000  00000000  000d22e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000021f8  00000000  00000000  000d3aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002a3cd  00000000  00000000  000d5c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002a569  00000000  00000000  00100065  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a13ac  00000000  00000000  0012a5ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00004ed8  00000000  00000000  001cb97c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 32 00 20 89 67 00 00 85 67 00 00 85 67 00 00     .2. .g...g...g..
	...
      2c:	85 67 00 00 00 00 00 00 00 00 00 00 85 67 00 00     .g...........g..
      3c:	c9 8d 00 00 85 67 00 00 85 67 00 00 85 67 00 00     .....g...g...g..
      4c:	49 48 00 00 05 42 00 00 85 67 00 00 85 67 00 00     IH...B...g...g..
      5c:	85 67 00 00 85 67 00 00 71 4c 00 00 81 4c 00 00     .g...g..qL...L..
      6c:	91 4c 00 00 a1 4c 00 00 b1 4c 00 00 c1 4c 00 00     .L...L...L...L..
      7c:	55 67 00 00 65 67 00 00 75 67 00 00 85 67 00 00     Ug..eg..ug...g..
      8c:	85 67 00 00 85 67 00 00 00 00 00 00 00 00 00 00     .g...g..........
      9c:	85 67 00 00 85 67 00 00 85 67 00 00 85 67 00 00     .g...g...g...g..
      ac:	85 67 00 00 00 00 00 00                             .g......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002fc 	.word	0x200002fc
      d4:	00000000 	.word	0x00000000
      d8:	0000f5d8 	.word	0x0000f5d8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000300 	.word	0x20000300
     108:	0000f5d8 	.word	0x0000f5d8
     10c:	0000f5d8 	.word	0x0000f5d8
     110:	00000000 	.word	0x00000000

00000114 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     114:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     116:	4b06      	ldr	r3, [pc, #24]	; (130 <sd_mmc_configure_slot+0x1c>)
     118:	6819      	ldr	r1, [r3, #0]
     11a:	7f8b      	ldrb	r3, [r1, #30]
     11c:	1e5a      	subs	r2, r3, #1
     11e:	4193      	sbcs	r3, r2
     120:	b2db      	uxtb	r3, r3
     122:	7b4a      	ldrb	r2, [r1, #13]
     124:	6809      	ldr	r1, [r1, #0]
     126:	4803      	ldr	r0, [pc, #12]	; (134 <sd_mmc_configure_slot+0x20>)
     128:	7800      	ldrb	r0, [r0, #0]
     12a:	4c03      	ldr	r4, [pc, #12]	; (138 <sd_mmc_configure_slot+0x24>)
     12c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     12e:	bd10      	pop	{r4, pc}
     130:	20000318 	.word	0x20000318
     134:	20000340 	.word	0x20000340
     138:	00000dd1 	.word	0x00000dd1

0000013c <sd_mmc_select_slot>:
{
     13c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     13e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     140:	2800      	cmp	r0, #0
     142:	d001      	beq.n	148 <sd_mmc_select_slot+0xc>
}
     144:	0018      	movs	r0, r3
     146:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     148:	4b0e      	ldr	r3, [pc, #56]	; (184 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     14a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     14c:	3b03      	subs	r3, #3
     14e:	2b01      	cmp	r3, #1
     150:	d90d      	bls.n	16e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     152:	2200      	movs	r2, #0
     154:	4b0c      	ldr	r3, [pc, #48]	; (188 <sd_mmc_select_slot+0x4c>)
     156:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     158:	4c0a      	ldr	r4, [pc, #40]	; (184 <sd_mmc_select_slot+0x48>)
     15a:	4b0c      	ldr	r3, [pc, #48]	; (18c <sd_mmc_select_slot+0x50>)
     15c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     15e:	4b0c      	ldr	r3, [pc, #48]	; (190 <sd_mmc_select_slot+0x54>)
     160:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     162:	7aa3      	ldrb	r3, [r4, #10]
     164:	3b02      	subs	r3, #2
     166:	4258      	negs	r0, r3
     168:	4143      	adcs	r3, r0
     16a:	b2db      	uxtb	r3, r3
     16c:	e7ea      	b.n	144 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     16e:	4b05      	ldr	r3, [pc, #20]	; (184 <sd_mmc_select_slot+0x48>)
     170:	2202      	movs	r2, #2
     172:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     174:	4a07      	ldr	r2, [pc, #28]	; (194 <sd_mmc_select_slot+0x58>)
     176:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     178:	2201      	movs	r2, #1
     17a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     17c:	2200      	movs	r2, #0
     17e:	779a      	strb	r2, [r3, #30]
     180:	e7e7      	b.n	152 <sd_mmc_select_slot+0x16>
     182:	46c0      	nop			; (mov r8, r8)
     184:	2000031c 	.word	0x2000031c
     188:	20000340 	.word	0x20000340
     18c:	20000318 	.word	0x20000318
     190:	00000115 	.word	0x00000115
     194:	00061a80 	.word	0x00061a80

00000198 <sd_mmc_cmd13>:
{
     198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     19a:	4d09      	ldr	r5, [pc, #36]	; (1c0 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     19c:	4f09      	ldr	r7, [pc, #36]	; (1c4 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     19e:	4e0a      	ldr	r6, [pc, #40]	; (1c8 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     1a0:	2100      	movs	r1, #0
     1a2:	480a      	ldr	r0, [pc, #40]	; (1cc <sd_mmc_cmd13+0x34>)
     1a4:	47b8      	blx	r7
     1a6:	1e04      	subs	r4, r0, #0
     1a8:	d007      	beq.n	1ba <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     1aa:	47b0      	blx	r6
     1ac:	23ff      	movs	r3, #255	; 0xff
     1ae:	4203      	tst	r3, r0
     1b0:	d003      	beq.n	1ba <sd_mmc_cmd13+0x22>
     1b2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     1b4:	2d00      	cmp	r5, #0
     1b6:	d1f3      	bne.n	1a0 <sd_mmc_cmd13+0x8>
			return false;
     1b8:	2400      	movs	r4, #0
}
     1ba:	0020      	movs	r0, r4
     1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00030d41 	.word	0x00030d41
     1c4:	00001015 	.word	0x00001015
     1c8:	0000102d 	.word	0x0000102d
     1cc:	00001b0d 	.word	0x00001b0d

000001d0 <sd_mmc_cmd9_spi>:
{
     1d0:	b510      	push	{r4, lr}
     1d2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     1d4:	4b0c      	ldr	r3, [pc, #48]	; (208 <sd_mmc_cmd9_spi+0x38>)
     1d6:	681b      	ldr	r3, [r3, #0]
     1d8:	8919      	ldrh	r1, [r3, #8]
     1da:	0409      	lsls	r1, r1, #16
     1dc:	2301      	movs	r3, #1
     1de:	9300      	str	r3, [sp, #0]
     1e0:	2210      	movs	r2, #16
     1e2:	480a      	ldr	r0, [pc, #40]	; (20c <sd_mmc_cmd9_spi+0x3c>)
     1e4:	4c0a      	ldr	r4, [pc, #40]	; (210 <sd_mmc_cmd9_spi+0x40>)
     1e6:	47a0      	blx	r4
     1e8:	2800      	cmp	r0, #0
     1ea:	d101      	bne.n	1f0 <sd_mmc_cmd9_spi+0x20>
}
     1ec:	b002      	add	sp, #8
     1ee:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     1f0:	4b05      	ldr	r3, [pc, #20]	; (208 <sd_mmc_cmd9_spi+0x38>)
     1f2:	6818      	ldr	r0, [r3, #0]
     1f4:	300e      	adds	r0, #14
     1f6:	2101      	movs	r1, #1
     1f8:	4b06      	ldr	r3, [pc, #24]	; (214 <sd_mmc_cmd9_spi+0x44>)
     1fa:	4798      	blx	r3
     1fc:	2800      	cmp	r0, #0
     1fe:	d0f5      	beq.n	1ec <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     200:	4b05      	ldr	r3, [pc, #20]	; (218 <sd_mmc_cmd9_spi+0x48>)
     202:	4798      	blx	r3
     204:	e7f2      	b.n	1ec <sd_mmc_cmd9_spi+0x1c>
     206:	46c0      	nop			; (mov r8, r8)
     208:	20000318 	.word	0x20000318
     20c:	00081109 	.word	0x00081109
     210:	00000e85 	.word	0x00000e85
     214:	000010b1 	.word	0x000010b1
     218:	0000113d 	.word	0x0000113d

0000021c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     21c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     21e:	4b04      	ldr	r3, [pc, #16]	; (230 <sd_mmc_deselect_slot+0x14>)
     220:	781b      	ldrb	r3, [r3, #0]
     222:	2b00      	cmp	r3, #0
     224:	d000      	beq.n	228 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     226:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     228:	2000      	movs	r0, #0
     22a:	4b02      	ldr	r3, [pc, #8]	; (234 <sd_mmc_deselect_slot+0x18>)
     22c:	4798      	blx	r3
}
     22e:	e7fa      	b.n	226 <sd_mmc_deselect_slot+0xa>
     230:	20000340 	.word	0x20000340
     234:	00000e25 	.word	0x00000e25

00000238 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     238:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     23a:	2204      	movs	r2, #4
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <sd_mmc_init+0x14>)
     23e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     240:	32fb      	adds	r2, #251	; 0xfb
     242:	4b03      	ldr	r3, [pc, #12]	; (250 <sd_mmc_init+0x18>)
     244:	701a      	strb	r2, [r3, #0]
	driver_init();
     246:	4b03      	ldr	r3, [pc, #12]	; (254 <sd_mmc_init+0x1c>)
     248:	4798      	blx	r3
}
     24a:	bd10      	pop	{r4, pc}
     24c:	2000031c 	.word	0x2000031c
     250:	20000340 	.word	0x20000340
     254:	00000cd1 	.word	0x00000cd1

00000258 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     258:	b5f0      	push	{r4, r5, r6, r7, lr}
     25a:	46c6      	mov	lr, r8
     25c:	b500      	push	{lr}
     25e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     260:	4bcb      	ldr	r3, [pc, #812]	; (590 <sd_mmc_check+0x338>)
     262:	4798      	blx	r3
     264:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     266:	2801      	cmp	r0, #1
     268:	d006      	beq.n	278 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     26a:	4bca      	ldr	r3, [pc, #808]	; (594 <sd_mmc_check+0x33c>)
     26c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     26e:	0020      	movs	r0, r4
     270:	b008      	add	sp, #32
     272:	bc04      	pop	{r2}
     274:	4690      	mov	r8, r2
     276:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     278:	4bc7      	ldr	r3, [pc, #796]	; (598 <sd_mmc_check+0x340>)
     27a:	681b      	ldr	r3, [r3, #0]
     27c:	2201      	movs	r2, #1
     27e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     280:	2200      	movs	r2, #0
     282:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     284:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     286:	4bc5      	ldr	r3, [pc, #788]	; (59c <sd_mmc_check+0x344>)
     288:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     28a:	2100      	movs	r1, #0
     28c:	2088      	movs	r0, #136	; 0x88
     28e:	0140      	lsls	r0, r0, #5
     290:	4bc3      	ldr	r3, [pc, #780]	; (5a0 <sd_mmc_check+0x348>)
     292:	4798      	blx	r3
     294:	2800      	cmp	r0, #0
     296:	d107      	bne.n	2a8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     298:	4bbf      	ldr	r3, [pc, #764]	; (598 <sd_mmc_check+0x340>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	2203      	movs	r2, #3
     29e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     2a0:	4bbc      	ldr	r3, [pc, #752]	; (594 <sd_mmc_check+0x33c>)
     2a2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     2a4:	2403      	movs	r4, #3
     2a6:	e7e2      	b.n	26e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     2a8:	21d5      	movs	r1, #213	; 0xd5
     2aa:	0049      	lsls	r1, r1, #1
     2ac:	48bd      	ldr	r0, [pc, #756]	; (5a4 <sd_mmc_check+0x34c>)
     2ae:	4bbc      	ldr	r3, [pc, #752]	; (5a0 <sd_mmc_check+0x348>)
     2b0:	4798      	blx	r3
	*v2 = 0;
     2b2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     2b4:	2800      	cmp	r0, #0
     2b6:	d125      	bne.n	304 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     2b8:	4bb7      	ldr	r3, [pc, #732]	; (598 <sd_mmc_check+0x340>)
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	7adb      	ldrb	r3, [r3, #11]
     2be:	07db      	lsls	r3, r3, #31
     2c0:	d500      	bpl.n	2c4 <sd_mmc_check+0x6c>
     2c2:	e1eb      	b.n	69c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     2c4:	4bb4      	ldr	r3, [pc, #720]	; (598 <sd_mmc_check+0x340>)
     2c6:	681b      	ldr	r3, [r3, #0]
     2c8:	7ada      	ldrb	r2, [r3, #11]
     2ca:	2309      	movs	r3, #9
     2cc:	4013      	ands	r3, r2
     2ce:	2b01      	cmp	r3, #1
     2d0:	d10f      	bne.n	2f2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     2d2:	2180      	movs	r1, #128	; 0x80
     2d4:	0089      	lsls	r1, r1, #2
     2d6:	48b4      	ldr	r0, [pc, #720]	; (5a8 <sd_mmc_check+0x350>)
     2d8:	4bb1      	ldr	r3, [pc, #708]	; (5a0 <sd_mmc_check+0x348>)
     2da:	4798      	blx	r3
     2dc:	2800      	cmp	r0, #0
     2de:	d0db      	beq.n	298 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     2e0:	4bad      	ldr	r3, [pc, #692]	; (598 <sd_mmc_check+0x340>)
     2e2:	681b      	ldr	r3, [r3, #0]
     2e4:	7adb      	ldrb	r3, [r3, #11]
     2e6:	07db      	lsls	r3, r3, #31
     2e8:	d503      	bpl.n	2f2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     2ea:	4bb0      	ldr	r3, [pc, #704]	; (5ac <sd_mmc_check+0x354>)
     2ec:	4798      	blx	r3
     2ee:	2800      	cmp	r0, #0
     2f0:	d0d2      	beq.n	298 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     2f2:	4baf      	ldr	r3, [pc, #700]	; (5b0 <sd_mmc_check+0x358>)
     2f4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     2f6:	4ba8      	ldr	r3, [pc, #672]	; (598 <sd_mmc_check+0x340>)
     2f8:	681b      	ldr	r3, [r3, #0]
     2fa:	2200      	movs	r2, #0
     2fc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     2fe:	4ba5      	ldr	r3, [pc, #660]	; (594 <sd_mmc_check+0x33c>)
     300:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     302:	e7b4      	b.n	26e <sd_mmc_check+0x16>
	resp = driver_get_response();
     304:	4bab      	ldr	r3, [pc, #684]	; (5b4 <sd_mmc_check+0x35c>)
     306:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     308:	1c43      	adds	r3, r0, #1
     30a:	d100      	bne.n	30e <sd_mmc_check+0xb6>
     30c:	e1c4      	b.n	698 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     30e:	0500      	lsls	r0, r0, #20
     310:	0d00      	lsrs	r0, r0, #20
     312:	23d5      	movs	r3, #213	; 0xd5
     314:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     316:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     318:	4298      	cmp	r0, r3
     31a:	d1bd      	bne.n	298 <sd_mmc_check+0x40>
     31c:	e7cc      	b.n	2b8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     31e:	2100      	movs	r1, #0
     320:	48a5      	ldr	r0, [pc, #660]	; (5b8 <sd_mmc_check+0x360>)
     322:	4b9f      	ldr	r3, [pc, #636]	; (5a0 <sd_mmc_check+0x348>)
     324:	4798      	blx	r3
     326:	2800      	cmp	r0, #0
     328:	d119      	bne.n	35e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     32a:	4b9b      	ldr	r3, [pc, #620]	; (598 <sd_mmc_check+0x340>)
     32c:	681b      	ldr	r3, [r3, #0]
     32e:	2202      	movs	r2, #2
     330:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     332:	2100      	movs	r1, #0
     334:	2088      	movs	r0, #136	; 0x88
     336:	0140      	lsls	r0, r0, #5
     338:	4b99      	ldr	r3, [pc, #612]	; (5a0 <sd_mmc_check+0x348>)
     33a:	4798      	blx	r3
     33c:	2800      	cmp	r0, #0
     33e:	d0ab      	beq.n	298 <sd_mmc_check+0x40>
     340:	4d9e      	ldr	r5, [pc, #632]	; (5bc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     342:	4f97      	ldr	r7, [pc, #604]	; (5a0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     344:	4e9b      	ldr	r6, [pc, #620]	; (5b4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     346:	2100      	movs	r1, #0
     348:	489d      	ldr	r0, [pc, #628]	; (5c0 <sd_mmc_check+0x368>)
     34a:	47b8      	blx	r7
     34c:	2800      	cmp	r0, #0
     34e:	d0a3      	beq.n	298 <sd_mmc_check+0x40>
		resp = driver_get_response();
     350:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     352:	07c3      	lsls	r3, r0, #31
     354:	d57d      	bpl.n	452 <sd_mmc_check+0x1fa>
     356:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     358:	2d00      	cmp	r5, #0
     35a:	d1f4      	bne.n	346 <sd_mmc_check+0xee>
     35c:	e79c      	b.n	298 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     35e:	4b95      	ldr	r3, [pc, #596]	; (5b4 <sd_mmc_check+0x35c>)
     360:	4798      	blx	r3
     362:	0043      	lsls	r3, r0, #1
     364:	d505      	bpl.n	372 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     366:	4b8c      	ldr	r3, [pc, #560]	; (598 <sd_mmc_check+0x340>)
     368:	681a      	ldr	r2, [r3, #0]
     36a:	7ad3      	ldrb	r3, [r2, #11]
     36c:	2108      	movs	r1, #8
     36e:	430b      	orrs	r3, r1
     370:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     372:	2100      	movs	r1, #0
     374:	4893      	ldr	r0, [pc, #588]	; (5c4 <sd_mmc_check+0x36c>)
     376:	4b8a      	ldr	r3, [pc, #552]	; (5a0 <sd_mmc_check+0x348>)
     378:	4798      	blx	r3
     37a:	2800      	cmp	r0, #0
     37c:	d08c      	beq.n	298 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     37e:	4b86      	ldr	r3, [pc, #536]	; (598 <sd_mmc_check+0x340>)
     380:	681b      	ldr	r3, [r3, #0]
     382:	7adb      	ldrb	r3, [r3, #11]
     384:	07da      	lsls	r2, r3, #31
     386:	d400      	bmi.n	38a <sd_mmc_check+0x132>
     388:	e1a4      	b.n	6d4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     38a:	4b8f      	ldr	r3, [pc, #572]	; (5c8 <sd_mmc_check+0x370>)
     38c:	4798      	blx	r3
     38e:	2800      	cmp	r0, #0
     390:	d082      	beq.n	298 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     392:	4b81      	ldr	r3, [pc, #516]	; (598 <sd_mmc_check+0x340>)
     394:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     396:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     398:	2107      	movs	r1, #7
     39a:	4019      	ands	r1, r3
     39c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     39e:	488b      	ldr	r0, [pc, #556]	; (5cc <sd_mmc_check+0x374>)
     3a0:	5808      	ldr	r0, [r1, r0]
     3a2:	21fa      	movs	r1, #250	; 0xfa
     3a4:	0089      	lsls	r1, r1, #2
     3a6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     3a8:	065b      	lsls	r3, r3, #25
     3aa:	0f1b      	lsrs	r3, r3, #28
     3ac:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     3ae:	4888      	ldr	r0, [pc, #544]	; (5d0 <sd_mmc_check+0x378>)
     3b0:	581b      	ldr	r3, [r3, r0]
     3b2:	434b      	muls	r3, r1
     3b4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     3b6:	7b93      	ldrb	r3, [r2, #14]
     3b8:	099b      	lsrs	r3, r3, #6
     3ba:	d000      	beq.n	3be <sd_mmc_check+0x166>
     3bc:	e13c      	b.n	638 <sd_mmc_check+0x3e0>
     3be:	7d91      	ldrb	r1, [r2, #22]
     3c0:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     3c2:	7d53      	ldrb	r3, [r2, #21]
     3c4:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3c6:	7d10      	ldrb	r0, [r2, #20]
     3c8:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     3ca:	4303      	orrs	r3, r0
     3cc:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     3ce:	7e10      	ldrb	r0, [r2, #24]
     3d0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     3d2:	7dd1      	ldrb	r1, [r2, #23]
     3d4:	0049      	lsls	r1, r1, #1
     3d6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     3d8:	051b      	lsls	r3, r3, #20
     3da:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     3dc:	3301      	adds	r3, #1
     3de:	2107      	movs	r1, #7
     3e0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     3e2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     3e4:	408b      	lsls	r3, r1
     3e6:	7cd0      	ldrb	r0, [r2, #19]
     3e8:	210f      	movs	r1, #15
     3ea:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     3ec:	408b      	lsls	r3, r1
				/ 1024;
     3ee:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     3f0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     3f2:	8911      	ldrh	r1, [r2, #8]
     3f4:	0409      	lsls	r1, r1, #16
     3f6:	4877      	ldr	r0, [pc, #476]	; (5d4 <sd_mmc_check+0x37c>)
     3f8:	4b69      	ldr	r3, [pc, #420]	; (5a0 <sd_mmc_check+0x348>)
     3fa:	4798      	blx	r3
     3fc:	2800      	cmp	r0, #0
     3fe:	d100      	bne.n	402 <sd_mmc_check+0x1aa>
     400:	e74a      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     402:	2301      	movs	r3, #1
     404:	9300      	str	r3, [sp, #0]
     406:	2208      	movs	r2, #8
     408:	2100      	movs	r1, #0
     40a:	4873      	ldr	r0, [pc, #460]	; (5d8 <sd_mmc_check+0x380>)
     40c:	4d73      	ldr	r5, [pc, #460]	; (5dc <sd_mmc_check+0x384>)
     40e:	47a8      	blx	r5
     410:	2800      	cmp	r0, #0
     412:	d100      	bne.n	416 <sd_mmc_check+0x1be>
     414:	e740      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     416:	2101      	movs	r1, #1
     418:	a806      	add	r0, sp, #24
     41a:	4b71      	ldr	r3, [pc, #452]	; (5e0 <sd_mmc_check+0x388>)
     41c:	4798      	blx	r3
     41e:	2800      	cmp	r0, #0
     420:	d100      	bne.n	424 <sd_mmc_check+0x1cc>
     422:	e739      	b.n	298 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     424:	4b6f      	ldr	r3, [pc, #444]	; (5e4 <sd_mmc_check+0x38c>)
     426:	4798      	blx	r3
     428:	2800      	cmp	r0, #0
     42a:	d100      	bne.n	42e <sd_mmc_check+0x1d6>
     42c:	e734      	b.n	298 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     42e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     430:	781b      	ldrb	r3, [r3, #0]
     432:	220f      	movs	r2, #15
     434:	4013      	ands	r3, r2
     436:	2b01      	cmp	r3, #1
     438:	d100      	bne.n	43c <sd_mmc_check+0x1e4>
     43a:	e119      	b.n	670 <sd_mmc_check+0x418>
     43c:	2b00      	cmp	r3, #0
     43e:	d100      	bne.n	442 <sd_mmc_check+0x1ea>
     440:	e109      	b.n	656 <sd_mmc_check+0x3fe>
     442:	2b02      	cmp	r3, #2
     444:	d100      	bne.n	448 <sd_mmc_check+0x1f0>
     446:	e118      	b.n	67a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     448:	4b53      	ldr	r3, [pc, #332]	; (598 <sd_mmc_check+0x340>)
     44a:	681b      	ldr	r3, [r3, #0]
     44c:	2210      	movs	r2, #16
     44e:	731a      	strb	r2, [r3, #12]
     450:	e105      	b.n	65e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     452:	2100      	movs	r1, #0
     454:	4858      	ldr	r0, [pc, #352]	; (5b8 <sd_mmc_check+0x360>)
     456:	4b52      	ldr	r3, [pc, #328]	; (5a0 <sd_mmc_check+0x348>)
     458:	4798      	blx	r3
     45a:	2800      	cmp	r0, #0
     45c:	d100      	bne.n	460 <sd_mmc_check+0x208>
     45e:	e71b      	b.n	298 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     460:	4b54      	ldr	r3, [pc, #336]	; (5b4 <sd_mmc_check+0x35c>)
     462:	4798      	blx	r3
     464:	23c0      	movs	r3, #192	; 0xc0
     466:	05db      	lsls	r3, r3, #23
     468:	4018      	ands	r0, r3
     46a:	2380      	movs	r3, #128	; 0x80
     46c:	05db      	lsls	r3, r3, #23
     46e:	4298      	cmp	r0, r3
     470:	d105      	bne.n	47e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     472:	4b49      	ldr	r3, [pc, #292]	; (598 <sd_mmc_check+0x340>)
     474:	681a      	ldr	r2, [r3, #0]
     476:	7ad1      	ldrb	r1, [r2, #11]
     478:	2308      	movs	r3, #8
     47a:	430b      	orrs	r3, r1
     47c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     47e:	2100      	movs	r1, #0
     480:	4850      	ldr	r0, [pc, #320]	; (5c4 <sd_mmc_check+0x36c>)
     482:	4b47      	ldr	r3, [pc, #284]	; (5a0 <sd_mmc_check+0x348>)
     484:	4798      	blx	r3
     486:	2800      	cmp	r0, #0
     488:	d100      	bne.n	48c <sd_mmc_check+0x234>
     48a:	e705      	b.n	298 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     48c:	4b4e      	ldr	r3, [pc, #312]	; (5c8 <sd_mmc_check+0x370>)
     48e:	4798      	blx	r3
     490:	2800      	cmp	r0, #0
     492:	d100      	bne.n	496 <sd_mmc_check+0x23e>
     494:	e700      	b.n	298 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     496:	4b40      	ldr	r3, [pc, #256]	; (598 <sd_mmc_check+0x340>)
     498:	681a      	ldr	r2, [r3, #0]
     49a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     49c:	069b      	lsls	r3, r3, #26
     49e:	0f1b      	lsrs	r3, r3, #28
     4a0:	2b02      	cmp	r3, #2
     4a2:	d100      	bne.n	4a6 <sd_mmc_check+0x24e>
     4a4:	e0a8      	b.n	5f8 <sd_mmc_check+0x3a0>
     4a6:	d907      	bls.n	4b8 <sd_mmc_check+0x260>
     4a8:	2b03      	cmp	r3, #3
     4aa:	d100      	bne.n	4ae <sd_mmc_check+0x256>
     4ac:	e0a7      	b.n	5fe <sd_mmc_check+0x3a6>
     4ae:	2b04      	cmp	r3, #4
     4b0:	d104      	bne.n	4bc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     4b2:	2340      	movs	r3, #64	; 0x40
     4b4:	7313      	strb	r3, [r2, #12]
     4b6:	e003      	b.n	4c0 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     4b8:	2b01      	cmp	r3, #1
     4ba:	d066      	beq.n	58a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     4bc:	2312      	movs	r3, #18
     4be:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4c0:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     4c2:	0659      	lsls	r1, r3, #25
     4c4:	0f09      	lsrs	r1, r1, #28
     4c6:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     4c8:	2007      	movs	r0, #7
     4ca:	4003      	ands	r3, r0
     4cc:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     4ce:	483f      	ldr	r0, [pc, #252]	; (5cc <sd_mmc_check+0x374>)
     4d0:	5818      	ldr	r0, [r3, r0]
     4d2:	23fa      	movs	r3, #250	; 0xfa
     4d4:	009b      	lsls	r3, r3, #2
     4d6:	4343      	muls	r3, r0
     4d8:	4843      	ldr	r0, [pc, #268]	; (5e8 <sd_mmc_check+0x390>)
     4da:	5809      	ldr	r1, [r1, r0]
     4dc:	434b      	muls	r3, r1
     4de:	6013      	str	r3, [r2, #0]
     4e0:	7d91      	ldrb	r1, [r2, #22]
     4e2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4e4:	7d53      	ldrb	r3, [r2, #21]
     4e6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4e8:	7d10      	ldrb	r0, [r2, #20]
     4ea:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     4ec:	4303      	orrs	r3, r0
     4ee:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     4f0:	051b      	lsls	r3, r3, #20
     4f2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     4f4:	493d      	ldr	r1, [pc, #244]	; (5ec <sd_mmc_check+0x394>)
     4f6:	428b      	cmp	r3, r1
     4f8:	d00f      	beq.n	51a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     4fa:	7e10      	ldrb	r0, [r2, #24]
     4fc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     4fe:	7dd1      	ldrb	r1, [r2, #23]
     500:	0049      	lsls	r1, r1, #1
     502:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     504:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     506:	2007      	movs	r0, #7
     508:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     50a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     50c:	408b      	lsls	r3, r1
     50e:	7cd1      	ldrb	r1, [r2, #19]
     510:	3008      	adds	r0, #8
     512:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     514:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     516:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     518:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     51a:	7b13      	ldrb	r3, [r2, #12]
     51c:	2b3f      	cmp	r3, #63	; 0x3f
     51e:	d97b      	bls.n	618 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     520:	2100      	movs	r1, #0
     522:	9100      	str	r1, [sp, #0]
     524:	2301      	movs	r3, #1
     526:	2280      	movs	r2, #128	; 0x80
     528:	0092      	lsls	r2, r2, #2
     52a:	4831      	ldr	r0, [pc, #196]	; (5f0 <sd_mmc_check+0x398>)
     52c:	4d2b      	ldr	r5, [pc, #172]	; (5dc <sd_mmc_check+0x384>)
     52e:	47a8      	blx	r5
     530:	2800      	cmp	r0, #0
     532:	d100      	bne.n	536 <sd_mmc_check+0x2de>
     534:	e6b0      	b.n	298 <sd_mmc_check+0x40>
     536:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     538:	4e2e      	ldr	r6, [pc, #184]	; (5f4 <sd_mmc_check+0x39c>)
     53a:	a805      	add	r0, sp, #20
     53c:	47b0      	blx	r6
     53e:	2800      	cmp	r0, #0
     540:	d100      	bne.n	544 <sd_mmc_check+0x2ec>
     542:	e6a9      	b.n	298 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     544:	3501      	adds	r5, #1
     546:	b2ad      	uxth	r5, r5
     548:	2d32      	cmp	r5, #50	; 0x32
     54a:	d1f6      	bne.n	53a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     54c:	4b12      	ldr	r3, [pc, #72]	; (598 <sd_mmc_check+0x340>)
     54e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     550:	7d8a      	ldrb	r2, [r1, #22]
     552:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     554:	7d4b      	ldrb	r3, [r1, #21]
     556:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     558:	7d09      	ldrb	r1, [r1, #20]
     55a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     55c:	430b      	orrs	r3, r1
     55e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     560:	051b      	lsls	r3, r3, #20
     562:	0d1b      	lsrs	r3, r3, #20
     564:	4a21      	ldr	r2, [pc, #132]	; (5ec <sd_mmc_check+0x394>)
     566:	4293      	cmp	r3, r2
     568:	d154      	bne.n	614 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     56a:	4e22      	ldr	r6, [pc, #136]	; (5f4 <sd_mmc_check+0x39c>)
     56c:	a806      	add	r0, sp, #24
     56e:	47b0      	blx	r6
     570:	2800      	cmp	r0, #0
     572:	d100      	bne.n	576 <sd_mmc_check+0x31e>
     574:	e690      	b.n	298 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     576:	3501      	adds	r5, #1
     578:	b2ad      	uxth	r5, r5
     57a:	2d35      	cmp	r5, #53	; 0x35
     57c:	d9f6      	bls.n	56c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     57e:	4b06      	ldr	r3, [pc, #24]	; (598 <sd_mmc_check+0x340>)
     580:	681a      	ldr	r2, [r3, #0]
     582:	9b06      	ldr	r3, [sp, #24]
     584:	085b      	lsrs	r3, r3, #1
     586:	6053      	str	r3, [r2, #4]
     588:	e044      	b.n	614 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     58a:	2314      	movs	r3, #20
     58c:	7313      	strb	r3, [r2, #12]
     58e:	e797      	b.n	4c0 <sd_mmc_check+0x268>
     590:	0000013d 	.word	0x0000013d
     594:	0000021d 	.word	0x0000021d
     598:	20000318 	.word	0x20000318
     59c:	00000e4d 	.word	0x00000e4d
     5a0:	00001015 	.word	0x00001015
     5a4:	00005508 	.word	0x00005508
     5a8:	00001110 	.word	0x00001110
     5ac:	00000199 	.word	0x00000199
     5b0:	00000115 	.word	0x00000115
     5b4:	0000102d 	.word	0x0000102d
     5b8:	0000053a 	.word	0x0000053a
     5bc:	00001bef 	.word	0x00001bef
     5c0:	00001101 	.word	0x00001101
     5c4:	0000113b 	.word	0x0000113b
     5c8:	000001d1 	.word	0x000001d1
     5cc:	0000cfa0 	.word	0x0000cfa0
     5d0:	0000cfbc 	.word	0x0000cfbc
     5d4:	00001137 	.word	0x00001137
     5d8:	00081133 	.word	0x00081133
     5dc:	00000e85 	.word	0x00000e85
     5e0:	000010b1 	.word	0x000010b1
     5e4:	0000113d 	.word	0x0000113d
     5e8:	0000cf60 	.word	0x0000cf60
     5ec:	00000fff 	.word	0x00000fff
     5f0:	00081108 	.word	0x00081108
     5f4:	00001039 	.word	0x00001039
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     5f8:	2322      	movs	r3, #34	; 0x22
     5fa:	7313      	strb	r3, [r2, #12]
     5fc:	e760      	b.n	4c0 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     5fe:	2330      	movs	r3, #48	; 0x30
     600:	7313      	strb	r3, [r2, #12]
     602:	e75d      	b.n	4c0 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     604:	a806      	add	r0, sp, #24
     606:	4b36      	ldr	r3, [pc, #216]	; (6e0 <sd_mmc_check+0x488>)
     608:	4798      	blx	r3
     60a:	2800      	cmp	r0, #0
     60c:	d100      	bne.n	610 <sd_mmc_check+0x3b8>
     60e:	e643      	b.n	298 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     610:	3501      	adds	r5, #1
     612:	b2ad      	uxth	r5, r5
     614:	2d7f      	cmp	r5, #127	; 0x7f
     616:	d9f5      	bls.n	604 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     618:	2180      	movs	r1, #128	; 0x80
     61a:	0089      	lsls	r1, r1, #2
     61c:	4831      	ldr	r0, [pc, #196]	; (6e4 <sd_mmc_check+0x48c>)
     61e:	4b32      	ldr	r3, [pc, #200]	; (6e8 <sd_mmc_check+0x490>)
     620:	4798      	blx	r3
     622:	2800      	cmp	r0, #0
     624:	d100      	bne.n	628 <sd_mmc_check+0x3d0>
     626:	e637      	b.n	298 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     628:	4b30      	ldr	r3, [pc, #192]	; (6ec <sd_mmc_check+0x494>)
     62a:	4798      	blx	r3
     62c:	2800      	cmp	r0, #0
     62e:	d100      	bne.n	632 <sd_mmc_check+0x3da>
     630:	e632      	b.n	298 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     632:	4b2f      	ldr	r3, [pc, #188]	; (6f0 <sd_mmc_check+0x498>)
     634:	4798      	blx	r3
     636:	e65e      	b.n	2f6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     638:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     63a:	7d93      	ldrb	r3, [r2, #22]
     63c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     63e:	7d51      	ldrb	r1, [r2, #21]
     640:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     642:	430b      	orrs	r3, r1
     644:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     646:	029b      	lsls	r3, r3, #10
				* 512;
     648:	085b      	lsrs	r3, r3, #1
     64a:	2180      	movs	r1, #128	; 0x80
     64c:	0089      	lsls	r1, r1, #2
     64e:	468c      	mov	ip, r1
     650:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     652:	6053      	str	r3, [r2, #4]
     654:	e6cd      	b.n	3f2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     656:	4b27      	ldr	r3, [pc, #156]	; (6f4 <sd_mmc_check+0x49c>)
     658:	681b      	ldr	r3, [r3, #0]
     65a:	2210      	movs	r2, #16
     65c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     65e:	4b25      	ldr	r3, [pc, #148]	; (6f4 <sd_mmc_check+0x49c>)
     660:	681b      	ldr	r3, [r3, #0]
     662:	7adb      	ldrb	r3, [r3, #11]
     664:	2209      	movs	r2, #9
     666:	4013      	ands	r3, r2
     668:	2b01      	cmp	r3, #1
     66a:	d000      	beq.n	66e <sd_mmc_check+0x416>
     66c:	e638      	b.n	2e0 <sd_mmc_check+0x88>
     66e:	e630      	b.n	2d2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     670:	4b20      	ldr	r3, [pc, #128]	; (6f4 <sd_mmc_check+0x49c>)
     672:	681b      	ldr	r3, [r3, #0]
     674:	221a      	movs	r2, #26
     676:	731a      	strb	r2, [r3, #12]
     678:	e7f1      	b.n	65e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     67a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     67c:	789b      	ldrb	r3, [r3, #2]
     67e:	09db      	lsrs	r3, r3, #7
     680:	2b01      	cmp	r3, #1
     682:	d104      	bne.n	68e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     684:	4b1b      	ldr	r3, [pc, #108]	; (6f4 <sd_mmc_check+0x49c>)
     686:	681b      	ldr	r3, [r3, #0]
     688:	2230      	movs	r2, #48	; 0x30
     68a:	731a      	strb	r2, [r3, #12]
     68c:	e7e7      	b.n	65e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     68e:	4b19      	ldr	r3, [pc, #100]	; (6f4 <sd_mmc_check+0x49c>)
     690:	681b      	ldr	r3, [r3, #0]
     692:	2220      	movs	r2, #32
     694:	731a      	strb	r2, [r3, #12]
     696:	e7e2      	b.n	65e <sd_mmc_check+0x406>
	*v2 = 0;
     698:	2600      	movs	r6, #0
     69a:	e60d      	b.n	2b8 <sd_mmc_check+0x60>
     69c:	1e73      	subs	r3, r6, #1
     69e:	419e      	sbcs	r6, r3
     6a0:	07b3      	lsls	r3, r6, #30
     6a2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     6a4:	4d14      	ldr	r5, [pc, #80]	; (6f8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     6a6:	4f10      	ldr	r7, [pc, #64]	; (6e8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     6a8:	46b8      	mov	r8, r7
		resp = driver_get_response();
     6aa:	4e14      	ldr	r6, [pc, #80]	; (6fc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     6ac:	2100      	movs	r1, #0
     6ae:	4814      	ldr	r0, [pc, #80]	; (700 <sd_mmc_check+0x4a8>)
     6b0:	47b8      	blx	r7
     6b2:	2800      	cmp	r0, #0
     6b4:	d100      	bne.n	6b8 <sd_mmc_check+0x460>
     6b6:	e638      	b.n	32a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     6b8:	9903      	ldr	r1, [sp, #12]
     6ba:	4812      	ldr	r0, [pc, #72]	; (704 <sd_mmc_check+0x4ac>)
     6bc:	47c0      	blx	r8
     6be:	2800      	cmp	r0, #0
     6c0:	d100      	bne.n	6c4 <sd_mmc_check+0x46c>
     6c2:	e632      	b.n	32a <sd_mmc_check+0xd2>
		resp = driver_get_response();
     6c4:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     6c6:	07c3      	lsls	r3, r0, #31
     6c8:	d400      	bmi.n	6cc <sd_mmc_check+0x474>
     6ca:	e628      	b.n	31e <sd_mmc_check+0xc6>
     6cc:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     6ce:	2d00      	cmp	r5, #0
     6d0:	d1ec      	bne.n	6ac <sd_mmc_check+0x454>
     6d2:	e62a      	b.n	32a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     6d4:	2209      	movs	r2, #9
     6d6:	4013      	ands	r3, r2
     6d8:	2b01      	cmp	r3, #1
     6da:	d000      	beq.n	6de <sd_mmc_check+0x486>
     6dc:	e609      	b.n	2f2 <sd_mmc_check+0x9a>
     6de:	e5f8      	b.n	2d2 <sd_mmc_check+0x7a>
     6e0:	00001039 	.word	0x00001039
     6e4:	00001110 	.word	0x00001110
     6e8:	00001015 	.word	0x00001015
     6ec:	00000199 	.word	0x00000199
     6f0:	00000115 	.word	0x00000115
     6f4:	20000318 	.word	0x20000318
     6f8:	00001bef 	.word	0x00001bef
     6fc:	0000102d 	.word	0x0000102d
     700:	00001137 	.word	0x00001137
     704:	00001129 	.word	0x00001129

00000708 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     708:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     70a:	4b06      	ldr	r3, [pc, #24]	; (724 <sd_mmc_get_type+0x1c>)
     70c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     70e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     710:	2800      	cmp	r0, #0
     712:	d001      	beq.n	718 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     714:	0018      	movs	r0, r3
     716:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     718:	4b03      	ldr	r3, [pc, #12]	; (728 <sd_mmc_get_type+0x20>)
     71a:	4798      	blx	r3
	return sd_mmc_card->type;
     71c:	4b03      	ldr	r3, [pc, #12]	; (72c <sd_mmc_get_type+0x24>)
     71e:	681b      	ldr	r3, [r3, #0]
     720:	7adb      	ldrb	r3, [r3, #11]
     722:	e7f7      	b.n	714 <sd_mmc_get_type+0xc>
     724:	0000013d 	.word	0x0000013d
     728:	0000021d 	.word	0x0000021d
     72c:	20000318 	.word	0x20000318

00000730 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     730:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     732:	4b06      	ldr	r3, [pc, #24]	; (74c <sd_mmc_get_capacity+0x1c>)
     734:	4798      	blx	r3
		return 0;
     736:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     738:	2800      	cmp	r0, #0
     73a:	d001      	beq.n	740 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     73c:	0018      	movs	r0, r3
     73e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     740:	4b03      	ldr	r3, [pc, #12]	; (750 <sd_mmc_get_capacity+0x20>)
     742:	4798      	blx	r3
	return sd_mmc_card->capacity;
     744:	4b03      	ldr	r3, [pc, #12]	; (754 <sd_mmc_get_capacity+0x24>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	685b      	ldr	r3, [r3, #4]
     74a:	e7f7      	b.n	73c <sd_mmc_get_capacity+0xc>
     74c:	0000013d 	.word	0x0000013d
     750:	0000021d 	.word	0x0000021d
     754:	20000318 	.word	0x20000318

00000758 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     758:	2000      	movs	r0, #0
     75a:	4770      	bx	lr

0000075c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     75c:	b570      	push	{r4, r5, r6, lr}
     75e:	b082      	sub	sp, #8
     760:	000e      	movs	r6, r1
     762:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     764:	4b16      	ldr	r3, [pc, #88]	; (7c0 <sd_mmc_init_read_blocks+0x64>)
     766:	4798      	blx	r3
     768:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     76a:	d002      	beq.n	772 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     76c:	0020      	movs	r0, r4
     76e:	b002      	add	sp, #8
     770:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     772:	4b14      	ldr	r3, [pc, #80]	; (7c4 <sd_mmc_init_read_blocks+0x68>)
     774:	4798      	blx	r3
     776:	2800      	cmp	r0, #0
     778:	d017      	beq.n	7aa <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     77a:	2d01      	cmp	r5, #1
     77c:	d919      	bls.n	7b2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     77e:	4812      	ldr	r0, [pc, #72]	; (7c8 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     780:	4b12      	ldr	r3, [pc, #72]	; (7cc <sd_mmc_init_read_blocks+0x70>)
     782:	681b      	ldr	r3, [r3, #0]
     784:	7adb      	ldrb	r3, [r3, #11]
     786:	071b      	lsls	r3, r3, #28
     788:	d400      	bmi.n	78c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     78a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     78c:	2301      	movs	r3, #1
     78e:	9300      	str	r3, [sp, #0]
     790:	002b      	movs	r3, r5
     792:	2280      	movs	r2, #128	; 0x80
     794:	0092      	lsls	r2, r2, #2
     796:	0031      	movs	r1, r6
     798:	4e0d      	ldr	r6, [pc, #52]	; (7d0 <sd_mmc_init_read_blocks+0x74>)
     79a:	47b0      	blx	r6
     79c:	2800      	cmp	r0, #0
     79e:	d00a      	beq.n	7b6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     7a0:	4b0c      	ldr	r3, [pc, #48]	; (7d4 <sd_mmc_init_read_blocks+0x78>)
     7a2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     7a4:	4b0c      	ldr	r3, [pc, #48]	; (7d8 <sd_mmc_init_read_blocks+0x7c>)
     7a6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     7a8:	e7e0      	b.n	76c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     7aa:	4b0c      	ldr	r3, [pc, #48]	; (7dc <sd_mmc_init_read_blocks+0x80>)
     7ac:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     7ae:	3405      	adds	r4, #5
     7b0:	e7dc      	b.n	76c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     7b2:	480b      	ldr	r0, [pc, #44]	; (7e0 <sd_mmc_init_read_blocks+0x84>)
     7b4:	e7e4      	b.n	780 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     7b6:	4b09      	ldr	r3, [pc, #36]	; (7dc <sd_mmc_init_read_blocks+0x80>)
     7b8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     7ba:	2405      	movs	r4, #5
     7bc:	e7d6      	b.n	76c <sd_mmc_init_read_blocks+0x10>
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	0000013d 	.word	0x0000013d
     7c4:	00000199 	.word	0x00000199
     7c8:	00101112 	.word	0x00101112
     7cc:	20000318 	.word	0x20000318
     7d0:	00000e85 	.word	0x00000e85
     7d4:	2000033c 	.word	0x2000033c
     7d8:	2000033e 	.word	0x2000033e
     7dc:	0000021d 	.word	0x0000021d
     7e0:	00081111 	.word	0x00081111

000007e4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     7e4:	b510      	push	{r4, lr}
     7e6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     7e8:	4b07      	ldr	r3, [pc, #28]	; (808 <sd_mmc_start_read_blocks+0x24>)
     7ea:	4798      	blx	r3
     7ec:	2800      	cmp	r0, #0
     7ee:	d104      	bne.n	7fa <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     7f0:	2200      	movs	r2, #0
     7f2:	4b06      	ldr	r3, [pc, #24]	; (80c <sd_mmc_start_read_blocks+0x28>)
     7f4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     7f6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     7f8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     7fa:	4a04      	ldr	r2, [pc, #16]	; (80c <sd_mmc_start_read_blocks+0x28>)
     7fc:	8813      	ldrh	r3, [r2, #0]
     7fe:	1b1c      	subs	r4, r3, r4
     800:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     802:	2000      	movs	r0, #0
     804:	e7f8      	b.n	7f8 <sd_mmc_start_read_blocks+0x14>
     806:	46c0      	nop			; (mov r8, r8)
     808:	000010b1 	.word	0x000010b1
     80c:	2000033c 	.word	0x2000033c

00000810 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     810:	b510      	push	{r4, lr}
     812:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     814:	4b14      	ldr	r3, [pc, #80]	; (868 <sd_mmc_wait_end_of_read_blocks+0x58>)
     816:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     818:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     81a:	2800      	cmp	r0, #0
     81c:	d101      	bne.n	822 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     81e:	0018      	movs	r0, r3
     820:	bd10      	pop	{r4, pc}
	if (abort) {
     822:	2c00      	cmp	r4, #0
     824:	d010      	beq.n	848 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     826:	2200      	movs	r2, #0
     828:	4b10      	ldr	r3, [pc, #64]	; (86c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     82a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     82c:	4b10      	ldr	r3, [pc, #64]	; (870 <sd_mmc_wait_end_of_read_blocks+0x60>)
     82e:	881b      	ldrh	r3, [r3, #0]
     830:	2b01      	cmp	r3, #1
     832:	d00f      	beq.n	854 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     834:	2100      	movs	r1, #0
     836:	480f      	ldr	r0, [pc, #60]	; (874 <sd_mmc_wait_end_of_read_blocks+0x64>)
     838:	4b0f      	ldr	r3, [pc, #60]	; (878 <sd_mmc_wait_end_of_read_blocks+0x68>)
     83a:	4798      	blx	r3
     83c:	2800      	cmp	r0, #0
     83e:	d00d      	beq.n	85c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     840:	4b0e      	ldr	r3, [pc, #56]	; (87c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     842:	4798      	blx	r3
	return SD_MMC_OK;
     844:	2300      	movs	r3, #0
     846:	e7ea      	b.n	81e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     848:	4b08      	ldr	r3, [pc, #32]	; (86c <sd_mmc_wait_end_of_read_blocks+0x5c>)
     84a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     84c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     84e:	2a00      	cmp	r2, #0
     850:	d0ec      	beq.n	82c <sd_mmc_wait_end_of_read_blocks+0x1c>
     852:	e7e4      	b.n	81e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     854:	4b09      	ldr	r3, [pc, #36]	; (87c <sd_mmc_wait_end_of_read_blocks+0x6c>)
     856:	4798      	blx	r3
		return SD_MMC_OK;
     858:	2300      	movs	r3, #0
     85a:	e7e0      	b.n	81e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     85c:	2100      	movs	r1, #0
     85e:	4805      	ldr	r0, [pc, #20]	; (874 <sd_mmc_wait_end_of_read_blocks+0x64>)
     860:	4b05      	ldr	r3, [pc, #20]	; (878 <sd_mmc_wait_end_of_read_blocks+0x68>)
     862:	4798      	blx	r3
     864:	e7ec      	b.n	840 <sd_mmc_wait_end_of_read_blocks+0x30>
     866:	46c0      	nop			; (mov r8, r8)
     868:	0000113d 	.word	0x0000113d
     86c:	2000033c 	.word	0x2000033c
     870:	2000033e 	.word	0x2000033e
     874:	0000310c 	.word	0x0000310c
     878:	00001015 	.word	0x00001015
     87c:	0000021d 	.word	0x0000021d

00000880 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     880:	b570      	push	{r4, r5, r6, lr}
     882:	b082      	sub	sp, #8
     884:	000e      	movs	r6, r1
     886:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     888:	4b11      	ldr	r3, [pc, #68]	; (8d0 <sd_mmc_init_write_blocks+0x50>)
     88a:	4798      	blx	r3
     88c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     88e:	d116      	bne.n	8be <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     890:	2d01      	cmp	r5, #1
     892:	d917      	bls.n	8c4 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     894:	480f      	ldr	r0, [pc, #60]	; (8d4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     896:	4b10      	ldr	r3, [pc, #64]	; (8d8 <sd_mmc_init_write_blocks+0x58>)
     898:	681b      	ldr	r3, [r3, #0]
     89a:	7adb      	ldrb	r3, [r3, #11]
     89c:	071b      	lsls	r3, r3, #28
     89e:	d400      	bmi.n	8a2 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     8a0:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     8a2:	2301      	movs	r3, #1
     8a4:	9300      	str	r3, [sp, #0]
     8a6:	002b      	movs	r3, r5
     8a8:	2280      	movs	r2, #128	; 0x80
     8aa:	0092      	lsls	r2, r2, #2
     8ac:	0031      	movs	r1, r6
     8ae:	4e0b      	ldr	r6, [pc, #44]	; (8dc <sd_mmc_init_write_blocks+0x5c>)
     8b0:	47b0      	blx	r6
     8b2:	2800      	cmp	r0, #0
     8b4:	d008      	beq.n	8c8 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     8b6:	4b0a      	ldr	r3, [pc, #40]	; (8e0 <sd_mmc_init_write_blocks+0x60>)
     8b8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     8ba:	4b0a      	ldr	r3, [pc, #40]	; (8e4 <sd_mmc_init_write_blocks+0x64>)
     8bc:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     8be:	0020      	movs	r0, r4
     8c0:	b002      	add	sp, #8
     8c2:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     8c4:	4808      	ldr	r0, [pc, #32]	; (8e8 <sd_mmc_init_write_blocks+0x68>)
     8c6:	e7e6      	b.n	896 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
     8c8:	4b08      	ldr	r3, [pc, #32]	; (8ec <sd_mmc_init_write_blocks+0x6c>)
     8ca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     8cc:	2405      	movs	r4, #5
     8ce:	e7f6      	b.n	8be <sd_mmc_init_write_blocks+0x3e>
     8d0:	0000013d 	.word	0x0000013d
     8d4:	00109119 	.word	0x00109119
     8d8:	20000318 	.word	0x20000318
     8dc:	00000e85 	.word	0x00000e85
     8e0:	2000033c 	.word	0x2000033c
     8e4:	2000033e 	.word	0x2000033e
     8e8:	00089118 	.word	0x00089118
     8ec:	0000021d 	.word	0x0000021d

000008f0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     8f0:	b510      	push	{r4, lr}
     8f2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     8f4:	4b07      	ldr	r3, [pc, #28]	; (914 <sd_mmc_start_write_blocks+0x24>)
     8f6:	4798      	blx	r3
     8f8:	2800      	cmp	r0, #0
     8fa:	d104      	bne.n	906 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     8fc:	2200      	movs	r2, #0
     8fe:	4b06      	ldr	r3, [pc, #24]	; (918 <sd_mmc_start_write_blocks+0x28>)
     900:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     902:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     904:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     906:	4a04      	ldr	r2, [pc, #16]	; (918 <sd_mmc_start_write_blocks+0x28>)
     908:	8813      	ldrh	r3, [r2, #0]
     90a:	1b1c      	subs	r4, r3, r4
     90c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     90e:	2000      	movs	r0, #0
     910:	e7f8      	b.n	904 <sd_mmc_start_write_blocks+0x14>
     912:	46c0      	nop			; (mov r8, r8)
     914:	00001141 	.word	0x00001141
     918:	2000033c 	.word	0x2000033c

0000091c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     91c:	b510      	push	{r4, lr}
     91e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     920:	4b0e      	ldr	r3, [pc, #56]	; (95c <sd_mmc_wait_end_of_write_blocks+0x40>)
     922:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     924:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     926:	2800      	cmp	r0, #0
     928:	d101      	bne.n	92e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     92a:	0018      	movs	r0, r3
     92c:	bd10      	pop	{r4, pc}
	if (abort) {
     92e:	2c00      	cmp	r4, #0
     930:	d00a      	beq.n	948 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
     932:	2200      	movs	r2, #0
     934:	4b0a      	ldr	r3, [pc, #40]	; (960 <sd_mmc_wait_end_of_write_blocks+0x44>)
     936:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     938:	4b0a      	ldr	r3, [pc, #40]	; (964 <sd_mmc_wait_end_of_write_blocks+0x48>)
     93a:	881b      	ldrh	r3, [r3, #0]
     93c:	2b01      	cmp	r3, #1
     93e:	d009      	beq.n	954 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
     940:	4b09      	ldr	r3, [pc, #36]	; (968 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     942:	4798      	blx	r3
	return SD_MMC_OK;
     944:	2300      	movs	r3, #0
     946:	e7f0      	b.n	92a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     948:	4b05      	ldr	r3, [pc, #20]	; (960 <sd_mmc_wait_end_of_write_blocks+0x44>)
     94a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     94c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     94e:	2a00      	cmp	r2, #0
     950:	d0f2      	beq.n	938 <sd_mmc_wait_end_of_write_blocks+0x1c>
     952:	e7ea      	b.n	92a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <sd_mmc_wait_end_of_write_blocks+0x4c>)
     956:	4798      	blx	r3
		return SD_MMC_OK;
     958:	2300      	movs	r3, #0
     95a:	e7e6      	b.n	92a <sd_mmc_wait_end_of_write_blocks+0xe>
     95c:	000011c1 	.word	0x000011c1
     960:	2000033c 	.word	0x2000033c
     964:	2000033e 	.word	0x2000033e
     968:	0000021d 	.word	0x0000021d

0000096c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     96c:	b510      	push	{r4, lr}
     96e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
     970:	4b0f      	ldr	r3, [pc, #60]	; (9b0 <sd_mmc_test_unit_ready+0x44>)
     972:	4798      	blx	r3
     974:	2801      	cmp	r0, #1
     976:	d019      	beq.n	9ac <sd_mmc_test_unit_ready+0x40>
     978:	2800      	cmp	r0, #0
     97a:	d003      	beq.n	984 <sd_mmc_test_unit_ready+0x18>
     97c:	2802      	cmp	r0, #2
     97e:	d010      	beq.n	9a2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     980:	2001      	movs	r0, #1
	}
}
     982:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
     984:	4b0b      	ldr	r3, [pc, #44]	; (9b4 <sd_mmc_test_unit_ready+0x48>)
     986:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
     988:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
     98a:	2b00      	cmp	r3, #0
     98c:	d1f9      	bne.n	982 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     98e:	0020      	movs	r0, r4
     990:	4b09      	ldr	r3, [pc, #36]	; (9b8 <sd_mmc_test_unit_ready+0x4c>)
     992:	4798      	blx	r3
     994:	0003      	movs	r3, r0
     996:	2003      	movs	r0, #3
     998:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
     99a:	4243      	negs	r3, r0
     99c:	4158      	adcs	r0, r3
     99e:	0040      	lsls	r0, r0, #1
     9a0:	e7ef      	b.n	982 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
     9a2:	2200      	movs	r2, #0
     9a4:	4b03      	ldr	r3, [pc, #12]	; (9b4 <sd_mmc_test_unit_ready+0x48>)
     9a6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
     9a8:	2002      	movs	r0, #2
     9aa:	e7ea      	b.n	982 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
     9ac:	2003      	movs	r0, #3
     9ae:	e7e8      	b.n	982 <sd_mmc_test_unit_ready+0x16>
     9b0:	00000259 	.word	0x00000259
     9b4:	20000344 	.word	0x20000344
     9b8:	00000709 	.word	0x00000709

000009bc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     9bc:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     9be:	2000      	movs	r0, #0
     9c0:	4b01      	ldr	r3, [pc, #4]	; (9c8 <sd_mmc_test_unit_ready_0+0xc>)
     9c2:	4798      	blx	r3
}
     9c4:	bd10      	pop	{r4, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	0000096d 	.word	0x0000096d

000009cc <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     9cc:	b570      	push	{r4, r5, r6, lr}
     9ce:	0004      	movs	r4, r0
     9d0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     9d2:	4b04      	ldr	r3, [pc, #16]	; (9e4 <sd_mmc_read_capacity+0x18>)
     9d4:	4798      	blx	r3
     9d6:	0040      	lsls	r0, r0, #1
     9d8:	3801      	subs	r0, #1
     9da:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     9dc:	0020      	movs	r0, r4
     9de:	4b02      	ldr	r3, [pc, #8]	; (9e8 <sd_mmc_read_capacity+0x1c>)
     9e0:	4798      	blx	r3
}
     9e2:	bd70      	pop	{r4, r5, r6, pc}
     9e4:	00000731 	.word	0x00000731
     9e8:	0000096d 	.word	0x0000096d

000009ec <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     9ec:	b510      	push	{r4, lr}
     9ee:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     9f0:	2000      	movs	r0, #0
     9f2:	4b01      	ldr	r3, [pc, #4]	; (9f8 <sd_mmc_read_capacity_0+0xc>)
     9f4:	4798      	blx	r3
}
     9f6:	bd10      	pop	{r4, pc}
     9f8:	000009cd 	.word	0x000009cd

000009fc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     9fc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     9fe:	2000      	movs	r0, #0
     a00:	4b01      	ldr	r3, [pc, #4]	; (a08 <sd_mmc_wr_protect_0+0xc>)
     a02:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     a04:	bd10      	pop	{r4, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	00000759 	.word	0x00000759

00000a0c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     a0c:	b510      	push	{r4, lr}
     a0e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     a10:	2201      	movs	r2, #1
     a12:	4b0c      	ldr	r3, [pc, #48]	; (a44 <sd_mmc_mem_2_ram+0x38>)
     a14:	4798      	blx	r3
     a16:	2800      	cmp	r0, #0
     a18:	d004      	beq.n	a24 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     a1a:	3802      	subs	r0, #2
     a1c:	4243      	negs	r3, r0
     a1e:	4158      	adcs	r0, r3
     a20:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     a22:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     a24:	2101      	movs	r1, #1
     a26:	0020      	movs	r0, r4
     a28:	4b07      	ldr	r3, [pc, #28]	; (a48 <sd_mmc_mem_2_ram+0x3c>)
     a2a:	4798      	blx	r3
     a2c:	0003      	movs	r3, r0
		return CTRL_FAIL;
     a2e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     a30:	2b00      	cmp	r3, #0
     a32:	d1f6      	bne.n	a22 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     a34:	2000      	movs	r0, #0
     a36:	4b05      	ldr	r3, [pc, #20]	; (a4c <sd_mmc_mem_2_ram+0x40>)
     a38:	4798      	blx	r3
     a3a:	1e43      	subs	r3, r0, #1
     a3c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     a3e:	b2c0      	uxtb	r0, r0
     a40:	e7ef      	b.n	a22 <sd_mmc_mem_2_ram+0x16>
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	0000075d 	.word	0x0000075d
     a48:	000007e5 	.word	0x000007e5
     a4c:	00000811 	.word	0x00000811

00000a50 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     a50:	b510      	push	{r4, lr}
     a52:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     a54:	0001      	movs	r1, r0
     a56:	2000      	movs	r0, #0
     a58:	4b01      	ldr	r3, [pc, #4]	; (a60 <sd_mmc_mem_2_ram_0+0x10>)
     a5a:	4798      	blx	r3
}
     a5c:	bd10      	pop	{r4, pc}
     a5e:	46c0      	nop			; (mov r8, r8)
     a60:	00000a0d 	.word	0x00000a0d

00000a64 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     a64:	b510      	push	{r4, lr}
     a66:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     a68:	2201      	movs	r2, #1
     a6a:	4b0c      	ldr	r3, [pc, #48]	; (a9c <sd_mmc_ram_2_mem+0x38>)
     a6c:	4798      	blx	r3
     a6e:	2800      	cmp	r0, #0
     a70:	d004      	beq.n	a7c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     a72:	3802      	subs	r0, #2
     a74:	4243      	negs	r3, r0
     a76:	4158      	adcs	r0, r3
     a78:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     a7a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     a7c:	2101      	movs	r1, #1
     a7e:	0020      	movs	r0, r4
     a80:	4b07      	ldr	r3, [pc, #28]	; (aa0 <sd_mmc_ram_2_mem+0x3c>)
     a82:	4798      	blx	r3
     a84:	0003      	movs	r3, r0
		return CTRL_FAIL;
     a86:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     a88:	2b00      	cmp	r3, #0
     a8a:	d1f6      	bne.n	a7a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     a8c:	2000      	movs	r0, #0
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <sd_mmc_ram_2_mem+0x40>)
     a90:	4798      	blx	r3
     a92:	1e43      	subs	r3, r0, #1
     a94:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     a96:	b2c0      	uxtb	r0, r0
     a98:	e7ef      	b.n	a7a <sd_mmc_ram_2_mem+0x16>
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	00000881 	.word	0x00000881
     aa0:	000008f1 	.word	0x000008f1
     aa4:	0000091d 	.word	0x0000091d

00000aa8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     aa8:	b510      	push	{r4, lr}
     aaa:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     aac:	0001      	movs	r1, r0
     aae:	2000      	movs	r0, #0
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <sd_mmc_ram_2_mem_0+0x10>)
     ab2:	4798      	blx	r3
}
     ab4:	bd10      	pop	{r4, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	00000a65 	.word	0x00000a65

00000abc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
     abc:	b500      	push	{lr}
     abe:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
     ac0:	466b      	mov	r3, sp
     ac2:	1dd9      	adds	r1, r3, #7
     ac4:	23ff      	movs	r3, #255	; 0xff
     ac6:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
     ac8:	2201      	movs	r2, #1
     aca:	480b      	ldr	r0, [pc, #44]	; (af8 <sd_mmc_spi_start_write_block+0x3c>)
     acc:	4b0b      	ldr	r3, [pc, #44]	; (afc <sd_mmc_spi_start_write_block+0x40>)
     ace:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
     ad0:	4b0b      	ldr	r3, [pc, #44]	; (b00 <sd_mmc_spi_start_write_block+0x44>)
     ad2:	881b      	ldrh	r3, [r3, #0]
     ad4:	2b01      	cmp	r3, #1
     ad6:	d00a      	beq.n	aee <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
     ad8:	22fc      	movs	r2, #252	; 0xfc
     ada:	466b      	mov	r3, sp
     adc:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
     ade:	2201      	movs	r2, #1
     ae0:	466b      	mov	r3, sp
     ae2:	1d99      	adds	r1, r3, #6
     ae4:	4804      	ldr	r0, [pc, #16]	; (af8 <sd_mmc_spi_start_write_block+0x3c>)
     ae6:	4b05      	ldr	r3, [pc, #20]	; (afc <sd_mmc_spi_start_write_block+0x40>)
     ae8:	4798      	blx	r3
}
     aea:	b003      	add	sp, #12
     aec:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
     aee:	22fe      	movs	r2, #254	; 0xfe
     af0:	466b      	mov	r3, sp
     af2:	719a      	strb	r2, [r3, #6]
     af4:	e7f3      	b.n	ade <sd_mmc_spi_start_write_block+0x22>
     af6:	46c0      	nop			; (mov r8, r8)
     af8:	20000348 	.word	0x20000348
     afc:	00005175 	.word	0x00005175
     b00:	2000038c 	.word	0x2000038c

00000b04 <sd_mmc_spi_wait_busy>:
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
     b08:	466b      	mov	r3, sp
     b0a:	1ddc      	adds	r4, r3, #7
     b0c:	23ff      	movs	r3, #255	; 0xff
     b0e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b10:	4e12      	ldr	r6, [pc, #72]	; (b5c <sd_mmc_spi_wait_busy+0x58>)
     b12:	2201      	movs	r2, #1
     b14:	0021      	movs	r1, r4
     b16:	0030      	movs	r0, r6
     b18:	4d11      	ldr	r5, [pc, #68]	; (b60 <sd_mmc_spi_wait_busy+0x5c>)
     b1a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b1c:	23ff      	movs	r3, #255	; 0xff
     b1e:	2201      	movs	r2, #1
     b20:	0021      	movs	r1, r4
     b22:	0030      	movs	r0, r6
     b24:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b26:	23ff      	movs	r3, #255	; 0xff
     b28:	2201      	movs	r2, #1
     b2a:	0021      	movs	r1, r4
     b2c:	0030      	movs	r0, r6
     b2e:	47a8      	blx	r5
     b30:	4c0c      	ldr	r4, [pc, #48]	; (b64 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
     b32:	466b      	mov	r3, sp
     b34:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b36:	4e09      	ldr	r6, [pc, #36]	; (b5c <sd_mmc_spi_wait_busy+0x58>)
     b38:	4f09      	ldr	r7, [pc, #36]	; (b60 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
     b3a:	782b      	ldrb	r3, [r5, #0]
     b3c:	2bff      	cmp	r3, #255	; 0xff
     b3e:	d009      	beq.n	b54 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
     b40:	23ff      	movs	r3, #255	; 0xff
     b42:	2201      	movs	r2, #1
     b44:	0029      	movs	r1, r5
     b46:	0030      	movs	r0, r6
     b48:	47b8      	blx	r7
     b4a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
     b4c:	2c00      	cmp	r4, #0
     b4e:	d1f4      	bne.n	b3a <sd_mmc_spi_wait_busy+0x36>
			return false;
     b50:	2000      	movs	r0, #0
     b52:	e000      	b.n	b56 <sd_mmc_spi_wait_busy+0x52>
	return true;
     b54:	2001      	movs	r0, #1
}
     b56:	b003      	add	sp, #12
     b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b5a:	46c0      	nop			; (mov r8, r8)
     b5c:	20000348 	.word	0x20000348
     b60:	00004fad 	.word	0x00004fad
     b64:	00030d40 	.word	0x00030d40

00000b68 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
     b6c:	4b14      	ldr	r3, [pc, #80]	; (bc0 <sd_mmc_spi_stop_multiwrite_block+0x58>)
     b6e:	881c      	ldrh	r4, [r3, #0]
     b70:	2c01      	cmp	r4, #1
     b72:	d023      	beq.n	bbc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
     b74:	4b13      	ldr	r3, [pc, #76]	; (bc4 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
     b76:	8819      	ldrh	r1, [r3, #0]
     b78:	4b13      	ldr	r3, [pc, #76]	; (bc8 <sd_mmc_spi_stop_multiwrite_block+0x60>)
     b7a:	6818      	ldr	r0, [r3, #0]
     b7c:	4b13      	ldr	r3, [pc, #76]	; (bcc <sd_mmc_spi_stop_multiwrite_block+0x64>)
     b7e:	4798      	blx	r3
		return true; // It is not the End of multi write
     b80:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
     b82:	4284      	cmp	r4, r0
     b84:	d902      	bls.n	b8c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
     b86:	0018      	movs	r0, r3
     b88:	b002      	add	sp, #8
     b8a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
     b8c:	466b      	mov	r3, sp
     b8e:	1ddc      	adds	r4, r3, #7
     b90:	23ff      	movs	r3, #255	; 0xff
     b92:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     b94:	4e0e      	ldr	r6, [pc, #56]	; (bd0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
     b96:	2201      	movs	r2, #1
     b98:	0021      	movs	r1, r4
     b9a:	0030      	movs	r0, r6
     b9c:	4d0d      	ldr	r5, [pc, #52]	; (bd4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
     b9e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
     ba0:	23fd      	movs	r3, #253	; 0xfd
     ba2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
     ba4:	2201      	movs	r2, #1
     ba6:	0021      	movs	r1, r4
     ba8:	0030      	movs	r0, r6
     baa:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
     bac:	4b0a      	ldr	r3, [pc, #40]	; (bd8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
     bae:	4798      	blx	r3
     bb0:	1e03      	subs	r3, r0, #0
     bb2:	d1e8      	bne.n	b86 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
     bb4:	2105      	movs	r1, #5
     bb6:	4a09      	ldr	r2, [pc, #36]	; (bdc <sd_mmc_spi_stop_multiwrite_block+0x74>)
     bb8:	7011      	strb	r1, [r2, #0]
		return false;
     bba:	e7e4      	b.n	b86 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
     bbc:	2301      	movs	r3, #1
     bbe:	e7e2      	b.n	b86 <sd_mmc_spi_stop_multiwrite_block+0x1e>
     bc0:	2000038c 	.word	0x2000038c
     bc4:	20000384 	.word	0x20000384
     bc8:	20000394 	.word	0x20000394
     bcc:	0000b461 	.word	0x0000b461
     bd0:	20000348 	.word	0x20000348
     bd4:	00005175 	.word	0x00005175
     bd8:	00000b05 	.word	0x00000b05
     bdc:	2000038b 	.word	0x2000038b

00000be0 <sd_mmc_spi_start_read_block>:
{
     be0:	b5f0      	push	{r4, r5, r6, r7, lr}
     be2:	b083      	sub	sp, #12
	token = 0;
     be4:	2200      	movs	r2, #0
     be6:	466b      	mov	r3, sp
     be8:	71da      	strb	r2, [r3, #7]
     bea:	4c14      	ldr	r4, [pc, #80]	; (c3c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
     bec:	466b      	mov	r3, sp
     bee:	1ddd      	adds	r5, r3, #7
     bf0:	4e13      	ldr	r6, [pc, #76]	; (c40 <sd_mmc_spi_start_read_block+0x60>)
     bf2:	4f14      	ldr	r7, [pc, #80]	; (c44 <sd_mmc_spi_start_read_block+0x64>)
     bf4:	23ff      	movs	r3, #255	; 0xff
     bf6:	2201      	movs	r2, #1
     bf8:	0029      	movs	r1, r5
     bfa:	0030      	movs	r0, r6
     bfc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
     bfe:	782b      	ldrb	r3, [r5, #0]
     c00:	220f      	movs	r2, #15
     c02:	0019      	movs	r1, r3
     c04:	4391      	bics	r1, r2
     c06:	1e0a      	subs	r2, r1, #0
     c08:	d009      	beq.n	c1e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
     c0a:	2bfe      	cmp	r3, #254	; 0xfe
     c0c:	d013      	beq.n	c36 <sd_mmc_spi_start_read_block+0x56>
     c0e:	3c01      	subs	r4, #1
		if (i-- == 0) {
     c10:	2c00      	cmp	r4, #0
     c12:	d1ef      	bne.n	bf4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
     c14:	2204      	movs	r2, #4
     c16:	4b0c      	ldr	r3, [pc, #48]	; (c48 <sd_mmc_spi_start_read_block+0x68>)
     c18:	701a      	strb	r2, [r3, #0]
			return false;
     c1a:	2000      	movs	r0, #0
     c1c:	e00c      	b.n	c38 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
     c1e:	075b      	lsls	r3, r3, #29
     c20:	d004      	beq.n	c2c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
     c22:	3207      	adds	r2, #7
     c24:	4b08      	ldr	r3, [pc, #32]	; (c48 <sd_mmc_spi_start_read_block+0x68>)
     c26:	701a      	strb	r2, [r3, #0]
			return false;
     c28:	2000      	movs	r0, #0
     c2a:	e005      	b.n	c38 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
     c2c:	220b      	movs	r2, #11
     c2e:	4b06      	ldr	r3, [pc, #24]	; (c48 <sd_mmc_spi_start_read_block+0x68>)
     c30:	701a      	strb	r2, [r3, #0]
			return false;
     c32:	2000      	movs	r0, #0
     c34:	e000      	b.n	c38 <sd_mmc_spi_start_read_block+0x58>
	return true;
     c36:	2001      	movs	r0, #1
}
     c38:	b003      	add	sp, #12
     c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c3c:	0007a120 	.word	0x0007a120
     c40:	20000348 	.word	0x20000348
     c44:	00004fad 	.word	0x00004fad
     c48:	2000038b 	.word	0x2000038b

00000c4c <sd_mmc_spi_stop_write_block>:
{
     c4c:	b530      	push	{r4, r5, lr}
     c4e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
     c50:	a901      	add	r1, sp, #4
     c52:	2301      	movs	r3, #1
     c54:	425b      	negs	r3, r3
     c56:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
     c58:	4d14      	ldr	r5, [pc, #80]	; (cac <sd_mmc_spi_stop_write_block+0x60>)
     c5a:	2202      	movs	r2, #2
     c5c:	0028      	movs	r0, r5
     c5e:	4b14      	ldr	r3, [pc, #80]	; (cb0 <sd_mmc_spi_stop_write_block+0x64>)
     c60:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
     c62:	466b      	mov	r3, sp
     c64:	1ddc      	adds	r4, r3, #7
     c66:	23ff      	movs	r3, #255	; 0xff
     c68:	2201      	movs	r2, #1
     c6a:	0021      	movs	r1, r4
     c6c:	0028      	movs	r0, r5
     c6e:	4d11      	ldr	r5, [pc, #68]	; (cb4 <sd_mmc_spi_stop_write_block+0x68>)
     c70:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
     c72:	7822      	ldrb	r2, [r4, #0]
     c74:	2311      	movs	r3, #17
     c76:	4013      	ands	r3, r2
     c78:	2b01      	cmp	r3, #1
     c7a:	d005      	beq.n	c88 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     c7c:	2201      	movs	r2, #1
     c7e:	4b0e      	ldr	r3, [pc, #56]	; (cb8 <sd_mmc_spi_stop_write_block+0x6c>)
     c80:	701a      	strb	r2, [r3, #0]
		return false;
     c82:	2000      	movs	r0, #0
}
     c84:	b003      	add	sp, #12
     c86:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
     c88:	231e      	movs	r3, #30
     c8a:	401a      	ands	r2, r3
     c8c:	2a04      	cmp	r2, #4
     c8e:	d00b      	beq.n	ca8 <sd_mmc_spi_stop_write_block+0x5c>
     c90:	2a0a      	cmp	r2, #10
     c92:	d104      	bne.n	c9e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
     c94:	3a02      	subs	r2, #2
     c96:	4b08      	ldr	r3, [pc, #32]	; (cb8 <sd_mmc_spi_stop_write_block+0x6c>)
     c98:	701a      	strb	r2, [r3, #0]
		return false;
     c9a:	2000      	movs	r0, #0
     c9c:	e7f2      	b.n	c84 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
     c9e:	220a      	movs	r2, #10
     ca0:	4b05      	ldr	r3, [pc, #20]	; (cb8 <sd_mmc_spi_stop_write_block+0x6c>)
     ca2:	701a      	strb	r2, [r3, #0]
		return false;
     ca4:	2000      	movs	r0, #0
     ca6:	e7ed      	b.n	c84 <sd_mmc_spi_stop_write_block+0x38>
	return true;
     ca8:	2001      	movs	r0, #1
     caa:	e7eb      	b.n	c84 <sd_mmc_spi_stop_write_block+0x38>
     cac:	20000348 	.word	0x20000348
     cb0:	00005175 	.word	0x00005175
     cb4:	00004fad 	.word	0x00004fad
     cb8:	2000038b 	.word	0x2000038b

00000cbc <sd_deinit>:
{
     cbc:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
     cbe:	4802      	ldr	r0, [pc, #8]	; (cc8 <sd_deinit+0xc>)
     cc0:	4b02      	ldr	r3, [pc, #8]	; (ccc <sd_deinit+0x10>)
     cc2:	4798      	blx	r3
}
     cc4:	bd10      	pop	{r4, pc}
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	20000348 	.word	0x20000348
     ccc:	00004cd1 	.word	0x00004cd1

00000cd0 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     cd4:	2300      	movs	r3, #0
     cd6:	4a2d      	ldr	r2, [pc, #180]	; (d8c <sd_mmc_spi_init+0xbc>)
     cd8:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     cda:	ac02      	add	r4, sp, #8
     cdc:	2501      	movs	r5, #1
     cde:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     ce0:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     ce2:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     ce4:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     ce6:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     ce8:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     cea:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     cec:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     cee:	2224      	movs	r2, #36	; 0x24
     cf0:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     cf2:	3a18      	subs	r2, #24
     cf4:	2100      	movs	r1, #0
     cf6:	a808      	add	r0, sp, #32
     cf8:	4b25      	ldr	r3, [pc, #148]	; (d90 <sd_mmc_spi_init+0xc0>)
     cfa:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
     cfc:	2380      	movs	r3, #128	; 0x80
     cfe:	025b      	lsls	r3, r3, #9
     d00:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
     d02:	4b24      	ldr	r3, [pc, #144]	; (d94 <sd_mmc_spi_init+0xc4>)
     d04:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
     d06:	4b24      	ldr	r3, [pc, #144]	; (d98 <sd_mmc_spi_init+0xc8>)
     d08:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
     d0a:	4b24      	ldr	r3, [pc, #144]	; (d9c <sd_mmc_spi_init+0xcc>)
     d0c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
     d0e:	4b24      	ldr	r3, [pc, #144]	; (da0 <sd_mmc_spi_init+0xd0>)
     d10:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
     d12:	4b24      	ldr	r3, [pc, #144]	; (da4 <sd_mmc_spi_init+0xd4>)
     d14:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
     d16:	4e24      	ldr	r6, [pc, #144]	; (da8 <sd_mmc_spi_init+0xd8>)
     d18:	0022      	movs	r2, r4
     d1a:	4924      	ldr	r1, [pc, #144]	; (dac <sd_mmc_spi_init+0xdc>)
     d1c:	0030      	movs	r0, r6
     d1e:	4b24      	ldr	r3, [pc, #144]	; (db0 <sd_mmc_spi_init+0xe0>)
     d20:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d22:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     d24:	0020      	movs	r0, r4
     d26:	4b23      	ldr	r3, [pc, #140]	; (db4 <sd_mmc_spi_init+0xe4>)
     d28:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d2a:	231f      	movs	r3, #31
     d2c:	4018      	ands	r0, r3
     d2e:	4085      	lsls	r5, r0
     d30:	4b21      	ldr	r3, [pc, #132]	; (db8 <sd_mmc_spi_init+0xe8>)
     d32:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     d34:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
     d36:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     d38:	2b00      	cmp	r3, #0
     d3a:	d1fc      	bne.n	d36 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     d3c:	6823      	ldr	r3, [r4, #0]
     d3e:	2202      	movs	r2, #2
     d40:	4313      	orrs	r3, r2
     d42:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
     d44:	4a1d      	ldr	r2, [pc, #116]	; (dbc <sd_mmc_spi_init+0xec>)
     d46:	2300      	movs	r3, #0
     d48:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
     d4a:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
     d4c:	491c      	ldr	r1, [pc, #112]	; (dc0 <sd_mmc_spi_init+0xf0>)
     d4e:	7808      	ldrb	r0, [r1, #0]
     d50:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
     d52:	4c1c      	ldr	r4, [pc, #112]	; (dc4 <sd_mmc_spi_init+0xf4>)
     d54:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
     d56:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     d58:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     d5a:	a901      	add	r1, sp, #4
     d5c:	2201      	movs	r2, #1
     d5e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     d60:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     d62:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     d64:	4b18      	ldr	r3, [pc, #96]	; (dc8 <sd_mmc_spi_init+0xf8>)
     d66:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     d68:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     d6a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     d6c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     d6e:	2900      	cmp	r1, #0
     d70:	d104      	bne.n	d7c <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
     d72:	0953      	lsrs	r3, r2, #5
     d74:	01db      	lsls	r3, r3, #7
     d76:	4915      	ldr	r1, [pc, #84]	; (dcc <sd_mmc_spi_init+0xfc>)
     d78:	468c      	mov	ip, r1
     d7a:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     d7c:	211f      	movs	r1, #31
     d7e:	4011      	ands	r1, r2
     d80:	2201      	movs	r2, #1
     d82:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     d84:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
     d86:	b010      	add	sp, #64	; 0x40
     d88:	bd70      	pop	{r4, r5, r6, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	2000038b 	.word	0x2000038b
     d90:	0000b853 	.word	0x0000b853
     d94:	00100002 	.word	0x00100002
     d98:	00110002 	.word	0x00110002
     d9c:	00120002 	.word	0x00120002
     da0:	00130002 	.word	0x00130002
     da4:	00061a80 	.word	0x00061a80
     da8:	20000348 	.word	0x20000348
     dac:	42000c00 	.word	0x42000c00
     db0:	00004dd5 	.word	0x00004dd5
     db4:	00004c41 	.word	0x00004c41
     db8:	e000e100 	.word	0xe000e100
     dbc:	20000398 	.word	0x20000398
     dc0:	20000000 	.word	0x20000000
     dc4:	20000388 	.word	0x20000388
     dc8:	0000462d 	.word	0x0000462d
     dcc:	41004400 	.word	0x41004400

00000dd0 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
     dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dd2:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     dd4:	2200      	movs	r2, #0
     dd6:	4b0d      	ldr	r3, [pc, #52]	; (e0c <sd_mmc_spi_select_device+0x3c>)
     dd8:	701a      	strb	r2, [r3, #0]
     dda:	000c      	movs	r4, r1
     ddc:	4b0c      	ldr	r3, [pc, #48]	; (e10 <sd_mmc_spi_select_device+0x40>)
     dde:	4299      	cmp	r1, r3
     de0:	d900      	bls.n	de4 <sd_mmc_spi_select_device+0x14>
     de2:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     de4:	4d0b      	ldr	r5, [pc, #44]	; (e14 <sd_mmc_spi_select_device+0x44>)
     de6:	4e0c      	ldr	r6, [pc, #48]	; (e18 <sd_mmc_spi_select_device+0x48>)
     de8:	e001      	b.n	dee <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
     dea:	08e3      	lsrs	r3, r4, #3
     dec:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
     dee:	0021      	movs	r1, r4
     df0:	0028      	movs	r0, r5
     df2:	47b0      	blx	r6
     df4:	2817      	cmp	r0, #23
     df6:	d0f8      	beq.n	dea <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
     df8:	0079      	lsls	r1, r7, #1
     dfa:	19cf      	adds	r7, r1, r7
     dfc:	4907      	ldr	r1, [pc, #28]	; (e1c <sd_mmc_spi_select_device+0x4c>)
     dfe:	19c9      	adds	r1, r1, r7
     e00:	2201      	movs	r2, #1
     e02:	4804      	ldr	r0, [pc, #16]	; (e14 <sd_mmc_spi_select_device+0x44>)
     e04:	4b06      	ldr	r3, [pc, #24]	; (e20 <sd_mmc_spi_select_device+0x50>)
     e06:	4798      	blx	r3
}
     e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	2000038b 	.word	0x2000038b
     e10:	00989680 	.word	0x00989680
     e14:	20000348 	.word	0x20000348
     e18:	00004d1d 	.word	0x00004d1d
     e1c:	20000388 	.word	0x20000388
     e20:	00005081 	.word	0x00005081

00000e24 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
     e24:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e26:	2200      	movs	r2, #0
     e28:	4b04      	ldr	r3, [pc, #16]	; (e3c <sd_mmc_spi_deselect_device+0x18>)
     e2a:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
     e2c:	0041      	lsls	r1, r0, #1
     e2e:	1808      	adds	r0, r1, r0
     e30:	4903      	ldr	r1, [pc, #12]	; (e40 <sd_mmc_spi_deselect_device+0x1c>)
     e32:	1809      	adds	r1, r1, r0
     e34:	4803      	ldr	r0, [pc, #12]	; (e44 <sd_mmc_spi_deselect_device+0x20>)
     e36:	4b04      	ldr	r3, [pc, #16]	; (e48 <sd_mmc_spi_deselect_device+0x24>)
     e38:	4798      	blx	r3
}
     e3a:	bd10      	pop	{r4, pc}
     e3c:	2000038b 	.word	0x2000038b
     e40:	20000388 	.word	0x20000388
     e44:	20000348 	.word	0x20000348
     e48:	00005081 	.word	0x00005081

00000e4c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
     e4c:	b570      	push	{r4, r5, r6, lr}
     e4e:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
     e50:	22ff      	movs	r2, #255	; 0xff
     e52:	466b      	mov	r3, sp
     e54:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e56:	2200      	movs	r2, #0
     e58:	4b07      	ldr	r3, [pc, #28]	; (e78 <sd_mmc_spi_send_clock+0x2c>)
     e5a:	701a      	strb	r2, [r3, #0]
     e5c:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
     e5e:	4e07      	ldr	r6, [pc, #28]	; (e7c <sd_mmc_spi_send_clock+0x30>)
     e60:	4d07      	ldr	r5, [pc, #28]	; (e80 <sd_mmc_spi_send_clock+0x34>)
     e62:	2201      	movs	r2, #1
     e64:	466b      	mov	r3, sp
     e66:	1dd9      	adds	r1, r3, #7
     e68:	0030      	movs	r0, r6
     e6a:	47a8      	blx	r5
     e6c:	3c01      	subs	r4, #1
     e6e:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
     e70:	2c00      	cmp	r4, #0
     e72:	d1f6      	bne.n	e62 <sd_mmc_spi_send_clock+0x16>
	}
}
     e74:	b002      	add	sp, #8
     e76:	bd70      	pop	{r4, r5, r6, pc}
     e78:	2000038b 	.word	0x2000038b
     e7c:	20000348 	.word	0x20000348
     e80:	00005175 	.word	0x00005175

00000e84 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
     e84:	b5f0      	push	{r4, r5, r6, r7, lr}
     e86:	46c6      	mov	lr, r8
     e88:	b500      	push	{lr}
     e8a:	b086      	sub	sp, #24
     e8c:	4680      	mov	r8, r0
     e8e:	9200      	str	r2, [sp, #0]
     e90:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
     e92:	22ff      	movs	r2, #255	; 0xff
     e94:	230f      	movs	r3, #15
     e96:	a802      	add	r0, sp, #8
     e98:	4684      	mov	ip, r0
     e9a:	4463      	add	r3, ip
     e9c:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     e9e:	2200      	movs	r2, #0
     ea0:	4b53      	ldr	r3, [pc, #332]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     ea2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
     ea4:	ab04      	add	r3, sp, #16
     ea6:	323f      	adds	r2, #63	; 0x3f
     ea8:	4640      	mov	r0, r8
     eaa:	4002      	ands	r2, r0
     eac:	2040      	movs	r0, #64	; 0x40
     eae:	4302      	orrs	r2, r0
     eb0:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
     eb2:	0e0a      	lsrs	r2, r1, #24
     eb4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
     eb6:	0c0a      	lsrs	r2, r1, #16
     eb8:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
     eba:	0a0a      	lsrs	r2, r1, #8
     ebc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
     ebe:	7119      	strb	r1, [r3, #4]
     ec0:	2700      	movs	r7, #0
	crc = 0;
     ec2:	2300      	movs	r3, #0
		value = *buf++;
     ec4:	a904      	add	r1, sp, #16
     ec6:	2208      	movs	r2, #8
				crc ^= 0x09;
     ec8:	2409      	movs	r4, #9
     eca:	e011      	b.n	ef0 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
     ecc:	0076      	lsls	r6, r6, #1
     ece:	b2f6      	uxtb	r6, r6
     ed0:	3801      	subs	r0, #1
     ed2:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
     ed4:	2800      	cmp	r0, #0
     ed6:	d008      	beq.n	eea <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
     ed8:	005b      	lsls	r3, r3, #1
     eda:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
     edc:	001d      	movs	r5, r3
     ede:	4075      	eors	r5, r6
     ee0:	062d      	lsls	r5, r5, #24
     ee2:	d5f3      	bpl.n	ecc <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
     ee4:	4063      	eors	r3, r4
     ee6:	b2db      	uxtb	r3, r3
     ee8:	e7f0      	b.n	ecc <sd_mmc_spi_adtc_start+0x48>
     eea:	3701      	adds	r7, #1
	while (size--) {
     eec:	2f05      	cmp	r7, #5
     eee:	d002      	beq.n	ef6 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
     ef0:	5c7e      	ldrb	r6, [r7, r1]
     ef2:	0010      	movs	r0, r2
     ef4:	e7f0      	b.n	ed8 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
     ef6:	005b      	lsls	r3, r3, #1
     ef8:	2201      	movs	r2, #1
     efa:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
     efc:	ac04      	add	r4, sp, #16
     efe:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
     f00:	4e3c      	ldr	r6, [pc, #240]	; (ff4 <sd_mmc_spi_adtc_start+0x170>)
     f02:	2201      	movs	r2, #1
     f04:	210f      	movs	r1, #15
     f06:	ab02      	add	r3, sp, #8
     f08:	469c      	mov	ip, r3
     f0a:	4461      	add	r1, ip
     f0c:	0030      	movs	r0, r6
     f0e:	4f3a      	ldr	r7, [pc, #232]	; (ff8 <sd_mmc_spi_adtc_start+0x174>)
     f10:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
     f12:	2206      	movs	r2, #6
     f14:	0021      	movs	r1, r4
     f16:	0030      	movs	r0, r6
     f18:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
     f1a:	ab02      	add	r3, sp, #8
     f1c:	1dd9      	adds	r1, r3, #7
     f1e:	23ff      	movs	r3, #255	; 0xff
     f20:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     f22:	2201      	movs	r2, #1
     f24:	0030      	movs	r0, r6
     f26:	4e35      	ldr	r6, [pc, #212]	; (ffc <sd_mmc_spi_adtc_start+0x178>)
     f28:	47b0      	blx	r6
     f2a:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
     f2c:	ab02      	add	r3, sp, #8
     f2e:	1dde      	adds	r6, r3, #7
     f30:	4f30      	ldr	r7, [pc, #192]	; (ff4 <sd_mmc_spi_adtc_start+0x170>)
     f32:	4d32      	ldr	r5, [pc, #200]	; (ffc <sd_mmc_spi_adtc_start+0x178>)
     f34:	23ff      	movs	r3, #255	; 0xff
     f36:	2201      	movs	r2, #1
     f38:	0031      	movs	r1, r6
     f3a:	0038      	movs	r0, r7
     f3c:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
     f3e:	7833      	ldrb	r3, [r6, #0]
     f40:	b25a      	sxtb	r2, r3
     f42:	2a00      	cmp	r2, #0
     f44:	da0b      	bge.n	f5e <sd_mmc_spi_adtc_start+0xda>
     f46:	3c01      	subs	r4, #1
     f48:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
     f4a:	2c00      	cmp	r4, #0
     f4c:	d1f2      	bne.n	f34 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
     f4e:	2202      	movs	r2, #2
     f50:	4b27      	ldr	r3, [pc, #156]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     f52:	701a      	strb	r2, [r3, #0]
			return false;
     f54:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
     f56:	b006      	add	sp, #24
     f58:	bc04      	pop	{r2}
     f5a:	4690      	mov	r8, r2
     f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
     f5e:	4a28      	ldr	r2, [pc, #160]	; (1000 <sd_mmc_spi_adtc_start+0x17c>)
     f60:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
     f62:	071a      	lsls	r2, r3, #28
     f64:	d41a      	bmi.n	f9c <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
     f66:	075a      	lsls	r2, r3, #29
     f68:	d41d      	bmi.n	fa6 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
     f6a:	2201      	movs	r2, #1
     f6c:	4393      	bics	r3, r2
     f6e:	d11f      	bne.n	fb0 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
     f70:	4643      	mov	r3, r8
     f72:	049b      	lsls	r3, r3, #18
     f74:	d420      	bmi.n	fb8 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
     f76:	4643      	mov	r3, r8
     f78:	059b      	lsls	r3, r3, #22
     f7a:	d425      	bmi.n	fc8 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
     f7c:	4643      	mov	r3, r8
     f7e:	055b      	lsls	r3, r3, #21
     f80:	d42b      	bmi.n	fda <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
     f82:	4b20      	ldr	r3, [pc, #128]	; (1004 <sd_mmc_spi_adtc_start+0x180>)
     f84:	466a      	mov	r2, sp
     f86:	8812      	ldrh	r2, [r2, #0]
     f88:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
     f8a:	4b1f      	ldr	r3, [pc, #124]	; (1008 <sd_mmc_spi_adtc_start+0x184>)
     f8c:	466a      	mov	r2, sp
     f8e:	8892      	ldrh	r2, [r2, #4]
     f90:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
     f92:	2200      	movs	r2, #0
     f94:	4b1d      	ldr	r3, [pc, #116]	; (100c <sd_mmc_spi_adtc_start+0x188>)
     f96:	601a      	str	r2, [r3, #0]
	return true; // Command complete
     f98:	2001      	movs	r0, #1
     f9a:	e7dc      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
     f9c:	2206      	movs	r2, #6
     f9e:	4b14      	ldr	r3, [pc, #80]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     fa0:	701a      	strb	r2, [r3, #0]
		return false;
     fa2:	2000      	movs	r0, #0
     fa4:	e7d7      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
     fa6:	2209      	movs	r2, #9
     fa8:	4b11      	ldr	r3, [pc, #68]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     faa:	701a      	strb	r2, [r3, #0]
		return false;
     fac:	2000      	movs	r0, #0
     fae:	e7d2      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
     fb0:	4b0f      	ldr	r3, [pc, #60]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     fb2:	701a      	strb	r2, [r3, #0]
		return false;
     fb4:	2000      	movs	r0, #0
     fb6:	e7ce      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
     fb8:	4b15      	ldr	r3, [pc, #84]	; (1010 <sd_mmc_spi_adtc_start+0x18c>)
     fba:	4798      	blx	r3
     fbc:	2800      	cmp	r0, #0
     fbe:	d1da      	bne.n	f76 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
     fc0:	2203      	movs	r2, #3
     fc2:	4b0b      	ldr	r3, [pc, #44]	; (ff0 <sd_mmc_spi_adtc_start+0x16c>)
     fc4:	701a      	strb	r2, [r3, #0]
			return false;
     fc6:	e7c6      	b.n	f56 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
     fc8:	490d      	ldr	r1, [pc, #52]	; (1000 <sd_mmc_spi_adtc_start+0x17c>)
     fca:	2300      	movs	r3, #0
     fcc:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
     fce:	33ff      	adds	r3, #255	; 0xff
     fd0:	2201      	movs	r2, #1
     fd2:	4808      	ldr	r0, [pc, #32]	; (ff4 <sd_mmc_spi_adtc_start+0x170>)
     fd4:	4e09      	ldr	r6, [pc, #36]	; (ffc <sd_mmc_spi_adtc_start+0x178>)
     fd6:	47b0      	blx	r6
     fd8:	e7d0      	b.n	f7c <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
     fda:	4e09      	ldr	r6, [pc, #36]	; (1000 <sd_mmc_spi_adtc_start+0x17c>)
     fdc:	23ff      	movs	r3, #255	; 0xff
     fde:	2204      	movs	r2, #4
     fe0:	0031      	movs	r1, r6
     fe2:	4804      	ldr	r0, [pc, #16]	; (ff4 <sd_mmc_spi_adtc_start+0x170>)
     fe4:	4f05      	ldr	r7, [pc, #20]	; (ffc <sd_mmc_spi_adtc_start+0x178>)
     fe6:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
     fe8:	6833      	ldr	r3, [r6, #0]
     fea:	ba1b      	rev	r3, r3
     fec:	6033      	str	r3, [r6, #0]
     fee:	e7c8      	b.n	f82 <sd_mmc_spi_adtc_start+0xfe>
     ff0:	2000038b 	.word	0x2000038b
     ff4:	20000348 	.word	0x20000348
     ff8:	00005175 	.word	0x00005175
     ffc:	00004fad 	.word	0x00004fad
    1000:	20000390 	.word	0x20000390
    1004:	20000384 	.word	0x20000384
    1008:	2000038c 	.word	0x2000038c
    100c:	20000394 	.word	0x20000394
    1010:	00000b05 	.word	0x00000b05

00001014 <sd_mmc_spi_send_cmd>:
{
    1014:	b510      	push	{r4, lr}
    1016:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    1018:	2300      	movs	r3, #0
    101a:	9300      	str	r3, [sp, #0]
    101c:	2200      	movs	r2, #0
    101e:	4c02      	ldr	r4, [pc, #8]	; (1028 <sd_mmc_spi_send_cmd+0x14>)
    1020:	47a0      	blx	r4
}
    1022:	b002      	add	sp, #8
    1024:	bd10      	pop	{r4, pc}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	00000e85 	.word	0x00000e85

0000102c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    102c:	4b01      	ldr	r3, [pc, #4]	; (1034 <sd_mmc_spi_get_response+0x8>)
    102e:	6818      	ldr	r0, [r3, #0]
}
    1030:	4770      	bx	lr
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	20000390 	.word	0x20000390

00001038 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    1038:	b510      	push	{r4, lr}
    103a:	b084      	sub	sp, #16
    103c:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    103e:	2200      	movs	r2, #0
    1040:	4b14      	ldr	r3, [pc, #80]	; (1094 <sd_mmc_spi_read_word+0x5c>)
    1042:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1044:	4b14      	ldr	r3, [pc, #80]	; (1098 <sd_mmc_spi_read_word+0x60>)
    1046:	8819      	ldrh	r1, [r3, #0]
    1048:	4b14      	ldr	r3, [pc, #80]	; (109c <sd_mmc_spi_read_word+0x64>)
    104a:	6818      	ldr	r0, [r3, #0]
    104c:	4b14      	ldr	r3, [pc, #80]	; (10a0 <sd_mmc_spi_read_word+0x68>)
    104e:	4798      	blx	r3
    1050:	2900      	cmp	r1, #0
    1052:	d103      	bne.n	105c <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1054:	4b13      	ldr	r3, [pc, #76]	; (10a4 <sd_mmc_spi_read_word+0x6c>)
    1056:	4798      	blx	r3
    1058:	2800      	cmp	r0, #0
    105a:	d010      	beq.n	107e <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    105c:	23ff      	movs	r3, #255	; 0xff
    105e:	2204      	movs	r2, #4
    1060:	a901      	add	r1, sp, #4
    1062:	4811      	ldr	r0, [pc, #68]	; (10a8 <sd_mmc_spi_read_word+0x70>)
    1064:	4c11      	ldr	r4, [pc, #68]	; (10ac <sd_mmc_spi_read_word+0x74>)
    1066:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    1068:	4b0c      	ldr	r3, [pc, #48]	; (109c <sd_mmc_spi_read_word+0x64>)
    106a:	681a      	ldr	r2, [r3, #0]
    106c:	1d10      	adds	r0, r2, #4
    106e:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1070:	4b09      	ldr	r3, [pc, #36]	; (1098 <sd_mmc_spi_read_word+0x60>)
    1072:	8819      	ldrh	r1, [r3, #0]
    1074:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <sd_mmc_spi_read_word+0x68>)
    1076:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    1078:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    107a:	2900      	cmp	r1, #0
    107c:	d001      	beq.n	1082 <sd_mmc_spi_read_word+0x4a>
}
    107e:	b004      	add	sp, #16
    1080:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1082:	23ff      	movs	r3, #255	; 0xff
    1084:	2202      	movs	r2, #2
    1086:	a903      	add	r1, sp, #12
    1088:	4807      	ldr	r0, [pc, #28]	; (10a8 <sd_mmc_spi_read_word+0x70>)
    108a:	4c08      	ldr	r4, [pc, #32]	; (10ac <sd_mmc_spi_read_word+0x74>)
    108c:	47a0      	blx	r4
	return true;
    108e:	2001      	movs	r0, #1
    1090:	e7f5      	b.n	107e <sd_mmc_spi_read_word+0x46>
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	2000038b 	.word	0x2000038b
    1098:	20000384 	.word	0x20000384
    109c:	20000394 	.word	0x20000394
    10a0:	0000b56d 	.word	0x0000b56d
    10a4:	00000be1 	.word	0x00000be1
    10a8:	20000348 	.word	0x20000348
    10ac:	00004fad 	.word	0x00004fad

000010b0 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    10b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    10b2:	46de      	mov	lr, fp
    10b4:	4657      	mov	r7, sl
    10b6:	4646      	mov	r6, r8
    10b8:	b5c0      	push	{r6, r7, lr}
    10ba:	b082      	sub	sp, #8
    10bc:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    10be:	2200      	movs	r2, #0
    10c0:	4b17      	ldr	r3, [pc, #92]	; (1120 <sd_mmc_spi_start_read_blocks+0x70>)
    10c2:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    10c4:	1e4c      	subs	r4, r1, #1
    10c6:	b2a4      	uxth	r4, r4
    10c8:	2900      	cmp	r1, #0
    10ca:	d026      	beq.n	111a <sd_mmc_spi_start_read_blocks+0x6a>
    10cc:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    10ce:	4b15      	ldr	r3, [pc, #84]	; (1124 <sd_mmc_spi_start_read_blocks+0x74>)
    10d0:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    10d2:	4f15      	ldr	r7, [pc, #84]	; (1128 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    10d4:	47d0      	blx	sl
    10d6:	4680      	mov	r8, r0
    10d8:	2800      	cmp	r0, #0
    10da:	d017      	beq.n	110c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    10dc:	883a      	ldrh	r2, [r7, #0]
    10de:	465b      	mov	r3, fp
    10e0:	1999      	adds	r1, r3, r6
    10e2:	23ff      	movs	r3, #255	; 0xff
    10e4:	4811      	ldr	r0, [pc, #68]	; (112c <sd_mmc_spi_start_read_blocks+0x7c>)
    10e6:	4d12      	ldr	r5, [pc, #72]	; (1130 <sd_mmc_spi_start_read_blocks+0x80>)
    10e8:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    10ea:	883b      	ldrh	r3, [r7, #0]
    10ec:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    10ee:	4a11      	ldr	r2, [pc, #68]	; (1134 <sd_mmc_spi_start_read_blocks+0x84>)
    10f0:	6811      	ldr	r1, [r2, #0]
    10f2:	468c      	mov	ip, r1
    10f4:	4463      	add	r3, ip
    10f6:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    10f8:	23ff      	movs	r3, #255	; 0xff
    10fa:	2202      	movs	r2, #2
    10fc:	a901      	add	r1, sp, #4
    10fe:	480b      	ldr	r0, [pc, #44]	; (112c <sd_mmc_spi_start_read_blocks+0x7c>)
    1100:	47a8      	blx	r5
	while (nb_block--) {
    1102:	3c01      	subs	r4, #1
    1104:	b2a4      	uxth	r4, r4
    1106:	4b0c      	ldr	r3, [pc, #48]	; (1138 <sd_mmc_spi_start_read_blocks+0x88>)
    1108:	429c      	cmp	r4, r3
    110a:	d1e3      	bne.n	10d4 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    110c:	4640      	mov	r0, r8
    110e:	b002      	add	sp, #8
    1110:	bc1c      	pop	{r2, r3, r4}
    1112:	4690      	mov	r8, r2
    1114:	469a      	mov	sl, r3
    1116:	46a3      	mov	fp, r4
    1118:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    111a:	2301      	movs	r3, #1
    111c:	4698      	mov	r8, r3
    111e:	e7f5      	b.n	110c <sd_mmc_spi_start_read_blocks+0x5c>
    1120:	2000038b 	.word	0x2000038b
    1124:	00000be1 	.word	0x00000be1
    1128:	20000384 	.word	0x20000384
    112c:	20000348 	.word	0x20000348
    1130:	00004fad 	.word	0x00004fad
    1134:	20000394 	.word	0x20000394
    1138:	0000ffff 	.word	0x0000ffff

0000113c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    113c:	2001      	movs	r0, #1
    113e:	4770      	bx	lr

00001140 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1140:	b5f0      	push	{r4, r5, r6, r7, lr}
    1142:	46c6      	mov	lr, r8
    1144:	b500      	push	{lr}
    1146:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1148:	2200      	movs	r2, #0
    114a:	4b15      	ldr	r3, [pc, #84]	; (11a0 <sd_mmc_spi_start_write_blocks+0x60>)
    114c:	701a      	strb	r2, [r3, #0]
	pos = 0;
    114e:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1150:	4f14      	ldr	r7, [pc, #80]	; (11a4 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1152:	4e15      	ldr	r6, [pc, #84]	; (11a8 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1154:	e000      	b.n	1158 <sd_mmc_spi_start_write_blocks+0x18>
{
    1156:	0021      	movs	r1, r4
	while (nb_block--) {
    1158:	1e4c      	subs	r4, r1, #1
    115a:	b2a4      	uxth	r4, r4
    115c:	2900      	cmp	r1, #0
    115e:	d01b      	beq.n	1198 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    1160:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1162:	8832      	ldrh	r2, [r6, #0]
    1164:	4643      	mov	r3, r8
    1166:	1959      	adds	r1, r3, r5
    1168:	4810      	ldr	r0, [pc, #64]	; (11ac <sd_mmc_spi_start_write_blocks+0x6c>)
    116a:	4b11      	ldr	r3, [pc, #68]	; (11b0 <sd_mmc_spi_start_write_blocks+0x70>)
    116c:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    116e:	8833      	ldrh	r3, [r6, #0]
    1170:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    1172:	4a10      	ldr	r2, [pc, #64]	; (11b4 <sd_mmc_spi_start_write_blocks+0x74>)
    1174:	6811      	ldr	r1, [r2, #0]
    1176:	468c      	mov	ip, r1
    1178:	4463      	add	r3, ip
    117a:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    117c:	4b0e      	ldr	r3, [pc, #56]	; (11b8 <sd_mmc_spi_start_write_blocks+0x78>)
    117e:	4798      	blx	r3
    1180:	2800      	cmp	r0, #0
    1182:	d00a      	beq.n	119a <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    1184:	2c00      	cmp	r4, #0
    1186:	d0e6      	beq.n	1156 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    1188:	4b0c      	ldr	r3, [pc, #48]	; (11bc <sd_mmc_spi_start_write_blocks+0x7c>)
    118a:	4798      	blx	r3
    118c:	2800      	cmp	r0, #0
    118e:	d1e2      	bne.n	1156 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    1190:	2205      	movs	r2, #5
    1192:	4b03      	ldr	r3, [pc, #12]	; (11a0 <sd_mmc_spi_start_write_blocks+0x60>)
    1194:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    1196:	e000      	b.n	119a <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    1198:	2001      	movs	r0, #1
}
    119a:	bc04      	pop	{r2}
    119c:	4690      	mov	r8, r2
    119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11a0:	2000038b 	.word	0x2000038b
    11a4:	00000abd 	.word	0x00000abd
    11a8:	20000384 	.word	0x20000384
    11ac:	20000348 	.word	0x20000348
    11b0:	00005175 	.word	0x00005175
    11b4:	20000394 	.word	0x20000394
    11b8:	00000c4d 	.word	0x00000c4d
    11bc:	00000b05 	.word	0x00000b05

000011c0 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    11c0:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    11c2:	4b05      	ldr	r3, [pc, #20]	; (11d8 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    11c4:	4798      	blx	r3
    11c6:	2800      	cmp	r0, #0
    11c8:	d103      	bne.n	11d2 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    11ca:	2205      	movs	r2, #5
    11cc:	4b03      	ldr	r3, [pc, #12]	; (11dc <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    11ce:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    11d0:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    11d2:	4b03      	ldr	r3, [pc, #12]	; (11e0 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    11d4:	4798      	blx	r3
    11d6:	e7fb      	b.n	11d0 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    11d8:	00000b05 	.word	0x00000b05
    11dc:	2000038b 	.word	0x2000038b
    11e0:	00000b69 	.word	0x00000b69

000011e4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    11e4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    11e6:	2000      	movs	r0, #0
    11e8:	4b08      	ldr	r3, [pc, #32]	; (120c <delay_init+0x28>)
    11ea:	4798      	blx	r3
    11ec:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    11ee:	4c08      	ldr	r4, [pc, #32]	; (1210 <delay_init+0x2c>)
    11f0:	21fa      	movs	r1, #250	; 0xfa
    11f2:	0089      	lsls	r1, r1, #2
    11f4:	47a0      	blx	r4
    11f6:	4b07      	ldr	r3, [pc, #28]	; (1214 <delay_init+0x30>)
    11f8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    11fa:	4907      	ldr	r1, [pc, #28]	; (1218 <delay_init+0x34>)
    11fc:	0028      	movs	r0, r5
    11fe:	47a0      	blx	r4
    1200:	4b06      	ldr	r3, [pc, #24]	; (121c <delay_init+0x38>)
    1202:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1204:	2205      	movs	r2, #5
    1206:	4b06      	ldr	r3, [pc, #24]	; (1220 <delay_init+0x3c>)
    1208:	601a      	str	r2, [r3, #0]
}
    120a:	bd70      	pop	{r4, r5, r6, pc}
    120c:	00005eb5 	.word	0x00005eb5
    1210:	0000b461 	.word	0x0000b461
    1214:	20000004 	.word	0x20000004
    1218:	000f4240 	.word	0x000f4240
    121c:	20000008 	.word	0x20000008
    1220:	e000e010 	.word	0xe000e010

00001224 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1224:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    1226:	4b08      	ldr	r3, [pc, #32]	; (1248 <delay_cycles_ms+0x24>)
    1228:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    122a:	4a08      	ldr	r2, [pc, #32]	; (124c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    122c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    122e:	2180      	movs	r1, #128	; 0x80
    1230:	0249      	lsls	r1, r1, #9
	while (n--) {
    1232:	3801      	subs	r0, #1
    1234:	d307      	bcc.n	1246 <delay_cycles_ms+0x22>
	if (n > 0) {
    1236:	2c00      	cmp	r4, #0
    1238:	d0fb      	beq.n	1232 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    123a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    123c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    123e:	6813      	ldr	r3, [r2, #0]
    1240:	420b      	tst	r3, r1
    1242:	d0fc      	beq.n	123e <delay_cycles_ms+0x1a>
    1244:	e7f5      	b.n	1232 <delay_cycles_ms+0xe>
	}
}
    1246:	bd30      	pop	{r4, r5, pc}
    1248:	20000004 	.word	0x20000004
    124c:	e000e010 	.word	0xe000e010

00001250 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    1250:	b510      	push	{r4, lr}
	if (gpfIsr) {
    1252:	4b03      	ldr	r3, [pc, #12]	; (1260 <chip_isr+0x10>)
    1254:	681b      	ldr	r3, [r3, #0]
    1256:	2b00      	cmp	r3, #0
    1258:	d000      	beq.n	125c <chip_isr+0xc>
		gpfIsr();
    125a:	4798      	blx	r3
	}
}
    125c:	bd10      	pop	{r4, pc}
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	2000039c 	.word	0x2000039c

00001264 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    1264:	b570      	push	{r4, r5, r6, lr}
    1266:	b082      	sub	sp, #8
	gpfIsr = NULL;
    1268:	2300      	movs	r3, #0
    126a:	4a15      	ldr	r2, [pc, #84]	; (12c0 <nm_bsp_init+0x5c>)
    126c:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    126e:	ac01      	add	r4, sp, #4
    1270:	2501      	movs	r5, #1
    1272:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1274:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1276:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    1278:	0021      	movs	r1, r4
    127a:	201b      	movs	r0, #27
    127c:	4e11      	ldr	r6, [pc, #68]	; (12c4 <nm_bsp_init+0x60>)
    127e:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    1280:	0021      	movs	r1, r4
    1282:	201c      	movs	r0, #28
    1284:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    1286:	0021      	movs	r1, r4
    1288:	2028      	movs	r0, #40	; 0x28
    128a:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
    128c:	4b0e      	ldr	r3, [pc, #56]	; (12c8 <nm_bsp_init+0x64>)
    128e:	2280      	movs	r2, #128	; 0x80
    1290:	0552      	lsls	r2, r2, #21
    1292:	615a      	str	r2, [r3, #20]
    1294:	2280      	movs	r2, #128	; 0x80
    1296:	0512      	lsls	r2, r2, #20
    1298:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    129a:	4b0c      	ldr	r3, [pc, #48]	; (12cc <nm_bsp_init+0x68>)
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	421d      	tst	r5, r3
    12a0:	d003      	beq.n	12aa <nm_bsp_init+0x46>
    12a2:	4b0a      	ldr	r3, [pc, #40]	; (12cc <nm_bsp_init+0x68>)
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	079b      	lsls	r3, r3, #30
    12a8:	d401      	bmi.n	12ae <nm_bsp_init+0x4a>
	    delay_init();
    12aa:	4b09      	ldr	r3, [pc, #36]	; (12d0 <nm_bsp_init+0x6c>)
    12ac:	4798      	blx	r3
	cpu_irq_enable();
    12ae:	2201      	movs	r2, #1
    12b0:	4b08      	ldr	r3, [pc, #32]	; (12d4 <nm_bsp_init+0x70>)
    12b2:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    12b4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    12b8:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    12ba:	2000      	movs	r0, #0
    12bc:	b002      	add	sp, #8
    12be:	bd70      	pop	{r4, r5, r6, pc}
    12c0:	2000039c 	.word	0x2000039c
    12c4:	0000462d 	.word	0x0000462d
    12c8:	41004400 	.word	0x41004400
    12cc:	e000e010 	.word	0xe000e010
    12d0:	000011e5 	.word	0x000011e5
    12d4:	2000000e 	.word	0x2000000e

000012d8 <nm_bsp_deinit>:
 *	@fn		nm_bsp_deinit
 *	@brief	De-iInitialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_deinit(void)
{
    12d8:	b500      	push	{lr}
    12da:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    12dc:	a901      	add	r1, sp, #4
    12de:	2300      	movs	r3, #0
    12e0:	700b      	strb	r3, [r1, #0]
	config->powersave  = false;
    12e2:	708b      	strb	r3, [r1, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    12e4:	704b      	strb	r3, [r1, #1]
		port_base->OUTCLR.reg = pin_mask;
    12e6:	4b06      	ldr	r3, [pc, #24]	; (1300 <nm_bsp_deinit+0x28>)
    12e8:	2280      	movs	r2, #128	; 0x80
    12ea:	0552      	lsls	r2, r2, #21
    12ec:	615a      	str	r2, [r3, #20]
    12ee:	2280      	movs	r2, #128	; 0x80
    12f0:	0512      	lsls	r2, r2, #20
    12f2:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	port_pin_set_config(CONF_WINC_SPI_INT_PIN, &pin_conf);
    12f4:	2029      	movs	r0, #41	; 0x29
    12f6:	4b03      	ldr	r3, [pc, #12]	; (1304 <nm_bsp_deinit+0x2c>)
    12f8:	4798      	blx	r3
	return M2M_SUCCESS;
}
    12fa:	2000      	movs	r0, #0
    12fc:	b003      	add	sp, #12
    12fe:	bd00      	pop	{pc}
    1300:	41004400 	.word	0x41004400
    1304:	0000462d 	.word	0x0000462d

00001308 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1308:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    130a:	1e44      	subs	r4, r0, #1
    130c:	2800      	cmp	r0, #0
    130e:	d004      	beq.n	131a <nm_bsp_sleep+0x12>
		delay_ms(1);
    1310:	4d02      	ldr	r5, [pc, #8]	; (131c <nm_bsp_sleep+0x14>)
    1312:	2001      	movs	r0, #1
    1314:	47a8      	blx	r5
	while (u32TimeMsec--) {
    1316:	3c01      	subs	r4, #1
    1318:	d2fb      	bcs.n	1312 <nm_bsp_sleep+0xa>
	}
}
    131a:	bd70      	pop	{r4, r5, r6, pc}
    131c:	00001225 	.word	0x00001225

00001320 <nm_bsp_reset>:
{
    1320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1322:	4c07      	ldr	r4, [pc, #28]	; (1340 <nm_bsp_reset+0x20>)
    1324:	2780      	movs	r7, #128	; 0x80
    1326:	057f      	lsls	r7, r7, #21
    1328:	6167      	str	r7, [r4, #20]
    132a:	2580      	movs	r5, #128	; 0x80
    132c:	052d      	lsls	r5, r5, #20
    132e:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    1330:	2001      	movs	r0, #1
    1332:	4e04      	ldr	r6, [pc, #16]	; (1344 <nm_bsp_reset+0x24>)
    1334:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1336:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    1338:	200a      	movs	r0, #10
    133a:	47b0      	blx	r6
    133c:	61a5      	str	r5, [r4, #24]
}
    133e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1340:	41004400 	.word	0x41004400
    1344:	00001309 	.word	0x00001309

00001348 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    1348:	b510      	push	{r4, lr}
    134a:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    134c:	4b0e      	ldr	r3, [pc, #56]	; (1388 <nm_bsp_register_isr+0x40>)
    134e:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    1350:	ac01      	add	r4, sp, #4
    1352:	0020      	movs	r0, r4
    1354:	4b0d      	ldr	r3, [pc, #52]	; (138c <nm_bsp_register_isr+0x44>)
    1356:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    1358:	2329      	movs	r3, #41	; 0x29
    135a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    135c:	2300      	movs	r3, #0
    135e:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1360:	3301      	adds	r3, #1
    1362:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    1364:	3301      	adds	r3, #1
    1366:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    1368:	0021      	movs	r1, r4
    136a:	2009      	movs	r0, #9
    136c:	4b08      	ldr	r3, [pc, #32]	; (1390 <nm_bsp_register_isr+0x48>)
    136e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    1370:	2200      	movs	r2, #0
    1372:	2109      	movs	r1, #9
    1374:	4807      	ldr	r0, [pc, #28]	; (1394 <nm_bsp_register_isr+0x4c>)
    1376:	4b08      	ldr	r3, [pc, #32]	; (1398 <nm_bsp_register_isr+0x50>)
    1378:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    137a:	2100      	movs	r1, #0
    137c:	2009      	movs	r0, #9
    137e:	4b07      	ldr	r3, [pc, #28]	; (139c <nm_bsp_register_isr+0x54>)
    1380:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    1382:	b004      	add	sp, #16
    1384:	bd10      	pop	{r4, pc}
    1386:	46c0      	nop			; (mov r8, r8)
    1388:	2000039c 	.word	0x2000039c
    138c:	000042dd 	.word	0x000042dd
    1390:	000042f1 	.word	0x000042f1
    1394:	00001251 	.word	0x00001251
    1398:	00004199 	.word	0x00004199
    139c:	000041c5 	.word	0x000041c5

000013a0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    13a0:	b510      	push	{r4, lr}
	if (u8Enable) {
    13a2:	2800      	cmp	r0, #0
    13a4:	d104      	bne.n	13b0 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    13a6:	2100      	movs	r1, #0
    13a8:	2009      	movs	r0, #9
    13aa:	4b04      	ldr	r3, [pc, #16]	; (13bc <nm_bsp_interrupt_ctrl+0x1c>)
    13ac:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    13ae:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    13b0:	2100      	movs	r1, #0
    13b2:	2009      	movs	r0, #9
    13b4:	4b02      	ldr	r3, [pc, #8]	; (13c0 <nm_bsp_interrupt_ctrl+0x20>)
    13b6:	4798      	blx	r3
    13b8:	e7f9      	b.n	13ae <nm_bsp_interrupt_ctrl+0xe>
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	000041e5 	.word	0x000041e5
    13c0:	000041c5 	.word	0x000041c5

000013c4 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    13c4:	b530      	push	{r4, r5, lr}
    13c6:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
    13c8:	4c30      	ldr	r4, [pc, #192]	; (148c <nm_bus_init+0xc8>)
    13ca:	230e      	movs	r3, #14
    13cc:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    13ce:	2300      	movs	r3, #0
    13d0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    13d2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    13d4:	a901      	add	r1, sp, #4
    13d6:	2201      	movs	r2, #1
    13d8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    13da:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    13dc:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    13de:	200e      	movs	r0, #14
    13e0:	4b2b      	ldr	r3, [pc, #172]	; (1490 <nm_bus_init+0xcc>)
    13e2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    13e4:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    13e6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    13e8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13ea:	2900      	cmp	r1, #0
    13ec:	d104      	bne.n	13f8 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    13ee:	0953      	lsrs	r3, r2, #5
    13f0:	01db      	lsls	r3, r3, #7
    13f2:	4928      	ldr	r1, [pc, #160]	; (1494 <nm_bus_init+0xd0>)
    13f4:	468c      	mov	ip, r1
    13f6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13f8:	211f      	movs	r1, #31
    13fa:	4011      	ands	r1, r2
    13fc:	2201      	movs	r2, #1
    13fe:	0010      	movs	r0, r2
    1400:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    1402:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    1404:	ac02      	add	r4, sp, #8
    1406:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1408:	2300      	movs	r3, #0
    140a:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    140c:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    140e:	21c0      	movs	r1, #192	; 0xc0
    1410:	0389      	lsls	r1, r1, #14
    1412:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1414:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1416:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1418:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    141a:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    141c:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    141e:	3223      	adds	r2, #35	; 0x23
    1420:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1422:	3a18      	subs	r2, #24
    1424:	2100      	movs	r1, #0
    1426:	a808      	add	r0, sp, #32
    1428:	4b1b      	ldr	r3, [pc, #108]	; (1498 <nm_bus_init+0xd4>)
    142a:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    142c:	4b1b      	ldr	r3, [pc, #108]	; (149c <nm_bus_init+0xd8>)
    142e:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    1430:	4b1b      	ldr	r3, [pc, #108]	; (14a0 <nm_bus_init+0xdc>)
    1432:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    1434:	2301      	movs	r3, #1
    1436:	425b      	negs	r3, r3
    1438:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    143a:	4b1a      	ldr	r3, [pc, #104]	; (14a4 <nm_bus_init+0xe0>)
    143c:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    143e:	4b1a      	ldr	r3, [pc, #104]	; (14a8 <nm_bus_init+0xe4>)
    1440:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    1442:	0022      	movs	r2, r4
    1444:	4919      	ldr	r1, [pc, #100]	; (14ac <nm_bus_init+0xe8>)
    1446:	481a      	ldr	r0, [pc, #104]	; (14b0 <nm_bus_init+0xec>)
    1448:	4b1a      	ldr	r3, [pc, #104]	; (14b4 <nm_bus_init+0xf0>)
    144a:	4798      	blx	r3
    144c:	2800      	cmp	r0, #0
    144e:	d11a      	bne.n	1486 <nm_bus_init+0xc2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1450:	4d17      	ldr	r5, [pc, #92]	; (14b0 <nm_bus_init+0xec>)
    1452:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1454:	0020      	movs	r0, r4
    1456:	4b18      	ldr	r3, [pc, #96]	; (14b8 <nm_bus_init+0xf4>)
    1458:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    145a:	231f      	movs	r3, #31
    145c:	4018      	ands	r0, r3
    145e:	3b1e      	subs	r3, #30
    1460:	4083      	lsls	r3, r0
    1462:	4a16      	ldr	r2, [pc, #88]	; (14bc <nm_bus_init+0xf8>)
    1464:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1466:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    1468:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    146a:	2b00      	cmp	r3, #0
    146c:	d1fc      	bne.n	1468 <nm_bus_init+0xa4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    146e:	6823      	ldr	r3, [r4, #0]
    1470:	2202      	movs	r2, #2
    1472:	4313      	orrs	r3, r2
    1474:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    1476:	4b12      	ldr	r3, [pc, #72]	; (14c0 <nm_bus_init+0xfc>)
    1478:	4798      	blx	r3
	nm_bsp_sleep(1);
    147a:	2001      	movs	r0, #1
    147c:	4b11      	ldr	r3, [pc, #68]	; (14c4 <nm_bus_init+0x100>)
    147e:	4798      	blx	r3
#endif
	return result;
    1480:	2000      	movs	r0, #0
}
    1482:	b011      	add	sp, #68	; 0x44
    1484:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    1486:	2006      	movs	r0, #6
    1488:	4240      	negs	r0, r0
    148a:	e7fa      	b.n	1482 <nm_bus_init+0xbe>
    148c:	20000edc 	.word	0x20000edc
    1490:	0000462d 	.word	0x0000462d
    1494:	41004400 	.word	0x41004400
    1498:	0000b853 	.word	0x0000b853
    149c:	000c0002 	.word	0x000c0002
    14a0:	000d0002 	.word	0x000d0002
    14a4:	000f0002 	.word	0x000f0002
    14a8:	00b71b00 	.word	0x00b71b00
    14ac:	42001000 	.word	0x42001000
    14b0:	20000ee0 	.word	0x20000ee0
    14b4:	00004dd5 	.word	0x00004dd5
    14b8:	00004c41 	.word	0x00004c41
    14bc:	e000e100 	.word	0xe000e100
    14c0:	00001321 	.word	0x00001321
    14c4:	00001309 	.word	0x00001309

000014c8 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    14c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ca:	46de      	mov	lr, fp
    14cc:	4657      	mov	r7, sl
    14ce:	464e      	mov	r6, r9
    14d0:	4645      	mov	r5, r8
    14d2:	b5e0      	push	{r5, r6, r7, lr}
    14d4:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    14d6:	2803      	cmp	r0, #3
    14d8:	d000      	beq.n	14dc <nm_bus_ioctl+0x14>
    14da:	e075      	b.n	15c8 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    14dc:	680e      	ldr	r6, [r1, #0]
    14de:	684d      	ldr	r5, [r1, #4]
    14e0:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    14e2:	2200      	movs	r2, #0
    14e4:	466b      	mov	r3, sp
    14e6:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    14e8:	2d00      	cmp	r5, #0
    14ea:	d027      	beq.n	153c <nm_bus_ioctl+0x74>
    14ec:	2c00      	cmp	r4, #0
    14ee:	d065      	beq.n	15bc <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    14f0:	2e00      	cmp	r6, #0
    14f2:	d100      	bne.n	14f6 <nm_bus_ioctl+0x2e>
    14f4:	e077      	b.n	15e6 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    14f6:	2300      	movs	r3, #0
    14f8:	4698      	mov	r8, r3
    14fa:	2300      	movs	r3, #0
    14fc:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    14fe:	2201      	movs	r2, #1
    1500:	493b      	ldr	r1, [pc, #236]	; (15f0 <nm_bus_ioctl+0x128>)
    1502:	483c      	ldr	r0, [pc, #240]	; (15f4 <nm_bus_ioctl+0x12c>)
    1504:	4b3c      	ldr	r3, [pc, #240]	; (15f8 <nm_bus_ioctl+0x130>)
    1506:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1508:	4b3a      	ldr	r3, [pc, #232]	; (15f4 <nm_bus_ioctl+0x12c>)
    150a:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    150c:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    150e:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1510:	4699      	mov	r9, r3
			pu8Miso++;
    1512:	4659      	mov	r1, fp
    1514:	424b      	negs	r3, r1
    1516:	4159      	adcs	r1, r3
    1518:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    151a:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    151c:	4653      	mov	r3, sl
    151e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1520:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    1522:	4239      	tst	r1, r7
    1524:	d0fc      	beq.n	1520 <nm_bus_ioctl+0x58>
    1526:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    1528:	4239      	tst	r1, r7
    152a:	d0fc      	beq.n	1526 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    152c:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    152e:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    1530:	4211      	tst	r1, r2
    1532:	d0fc      	beq.n	152e <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1534:	4649      	mov	r1, r9
    1536:	7989      	ldrb	r1, [r1, #6]
    1538:	468c      	mov	ip, r1
    153a:	e011      	b.n	1560 <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    153c:	2e00      	cmp	r6, #0
    153e:	d03a      	beq.n	15b6 <nm_bus_ioctl+0xee>
    1540:	2c00      	cmp	r4, #0
    1542:	d03e      	beq.n	15c2 <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    1544:	2300      	movs	r3, #0
    1546:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    1548:	3301      	adds	r3, #1
    154a:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    154c:	466b      	mov	r3, sp
    154e:	1ddd      	adds	r5, r3, #7
    1550:	e7d5      	b.n	14fe <nm_bus_ioctl+0x36>
    1552:	4660      	mov	r0, ip
    1554:	2801      	cmp	r0, #1
    1556:	d00d      	beq.n	1574 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    1558:	6a98      	ldr	r0, [r3, #40]	; 0x28
    155a:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    155c:	2900      	cmp	r1, #0
    155e:	d00d      	beq.n	157c <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1560:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    1562:	4211      	tst	r1, r2
    1564:	d0fc      	beq.n	1560 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1566:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    1568:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    156a:	4210      	tst	r0, r2
    156c:	d0f1      	beq.n	1552 <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    156e:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    1570:	311e      	adds	r1, #30
    1572:	e7ee      	b.n	1552 <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    1574:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1576:	05c0      	lsls	r0, r0, #23
    1578:	0dc0      	lsrs	r0, r0, #23
    157a:	e7ef      	b.n	155c <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    157c:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    157e:	3c01      	subs	r4, #1
    1580:	b2a4      	uxth	r4, r4
			pu8Miso++;
    1582:	445d      	add	r5, fp
			pu8Mosi++;
    1584:	4643      	mov	r3, r8
    1586:	4259      	negs	r1, r3
    1588:	414b      	adcs	r3, r1
    158a:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    158c:	2c00      	cmp	r4, #0
    158e:	d1c4      	bne.n	151a <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    1590:	4b18      	ldr	r3, [pc, #96]	; (15f4 <nm_bus_ioctl+0x12c>)
    1592:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    1594:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1596:	7e0b      	ldrb	r3, [r1, #24]
    1598:	4213      	tst	r3, r2
    159a:	d0fc      	beq.n	1596 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    159c:	2200      	movs	r2, #0
    159e:	4914      	ldr	r1, [pc, #80]	; (15f0 <nm_bus_ioctl+0x128>)
    15a0:	4814      	ldr	r0, [pc, #80]	; (15f4 <nm_bus_ioctl+0x12c>)
    15a2:	4b15      	ldr	r3, [pc, #84]	; (15f8 <nm_bus_ioctl+0x130>)
    15a4:	4798      	blx	r3
	return M2M_SUCCESS;
    15a6:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    15a8:	b003      	add	sp, #12
    15aa:	bc3c      	pop	{r2, r3, r4, r5}
    15ac:	4690      	mov	r8, r2
    15ae:	4699      	mov	r9, r3
    15b0:	46a2      	mov	sl, r4
    15b2:	46ab      	mov	fp, r5
    15b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    15b6:	200f      	movs	r0, #15
    15b8:	4240      	negs	r0, r0
    15ba:	e7f5      	b.n	15a8 <nm_bus_ioctl+0xe0>
    15bc:	200f      	movs	r0, #15
    15be:	4240      	negs	r0, r0
    15c0:	e7f2      	b.n	15a8 <nm_bus_ioctl+0xe0>
    15c2:	200f      	movs	r0, #15
    15c4:	4240      	negs	r0, r0
		break;
    15c6:	e7ef      	b.n	15a8 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    15c8:	2283      	movs	r2, #131	; 0x83
    15ca:	0052      	lsls	r2, r2, #1
    15cc:	490b      	ldr	r1, [pc, #44]	; (15fc <nm_bus_ioctl+0x134>)
    15ce:	480c      	ldr	r0, [pc, #48]	; (1600 <nm_bus_ioctl+0x138>)
    15d0:	4b0c      	ldr	r3, [pc, #48]	; (1604 <nm_bus_ioctl+0x13c>)
    15d2:	4798      	blx	r3
    15d4:	480c      	ldr	r0, [pc, #48]	; (1608 <nm_bus_ioctl+0x140>)
    15d6:	4b0d      	ldr	r3, [pc, #52]	; (160c <nm_bus_ioctl+0x144>)
    15d8:	4798      	blx	r3
    15da:	200d      	movs	r0, #13
    15dc:	4b0c      	ldr	r3, [pc, #48]	; (1610 <nm_bus_ioctl+0x148>)
    15de:	4798      	blx	r3
			s8Ret = -1;
    15e0:	2001      	movs	r0, #1
    15e2:	4240      	negs	r0, r0
	return s8Ret;
    15e4:	e7e0      	b.n	15a8 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    15e6:	2301      	movs	r3, #1
    15e8:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    15ea:	466b      	mov	r3, sp
    15ec:	1dde      	adds	r6, r3, #7
    15ee:	e784      	b.n	14fa <nm_bus_ioctl+0x32>
    15f0:	20000edc 	.word	0x20000edc
    15f4:	20000ee0 	.word	0x20000ee0
    15f8:	00005081 	.word	0x00005081
    15fc:	0000cffc 	.word	0x0000cffc
    1600:	0000d00c 	.word	0x0000d00c
    1604:	0000b9b5 	.word	0x0000b9b5
    1608:	0000d020 	.word	0x0000d020
    160c:	0000bad1 	.word	0x0000bad1
    1610:	0000b9e9 	.word	0x0000b9e9

00001614 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    1614:	b530      	push	{r4, r5, lr}
    1616:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    1618:	ab01      	add	r3, sp, #4
    161a:	2200      	movs	r2, #0
    161c:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    161e:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    1620:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1622:	4d13      	ldr	r5, [pc, #76]	; (1670 <nm_bus_deinit+0x5c>)
    1624:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1626:	0020      	movs	r0, r4
    1628:	4b12      	ldr	r3, [pc, #72]	; (1674 <nm_bus_deinit+0x60>)
    162a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    162c:	231f      	movs	r3, #31
    162e:	4018      	ands	r0, r3
    1630:	3b1e      	subs	r3, #30
    1632:	4083      	lsls	r3, r0
    1634:	2280      	movs	r2, #128	; 0x80
    1636:	4910      	ldr	r1, [pc, #64]	; (1678 <nm_bus_deinit+0x64>)
    1638:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    163a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    163c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    163e:	2b00      	cmp	r3, #0
    1640:	d1fc      	bne.n	163c <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1642:	338f      	adds	r3, #143	; 0x8f
    1644:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1646:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1648:	6823      	ldr	r3, [r4, #0]
    164a:	2202      	movs	r2, #2
    164c:	4393      	bics	r3, r2
    164e:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    1650:	a901      	add	r1, sp, #4
    1652:	200c      	movs	r0, #12
    1654:	4c09      	ldr	r4, [pc, #36]	; (167c <nm_bus_deinit+0x68>)
    1656:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    1658:	a901      	add	r1, sp, #4
    165a:	200f      	movs	r0, #15
    165c:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    165e:	a901      	add	r1, sp, #4
    1660:	200d      	movs	r0, #13
    1662:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    1664:	a901      	add	r1, sp, #4
    1666:	200e      	movs	r0, #14
    1668:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    166a:	2000      	movs	r0, #0
    166c:	b003      	add	sp, #12
    166e:	bd30      	pop	{r4, r5, pc}
    1670:	20000ee0 	.word	0x20000ee0
    1674:	00004c41 	.word	0x00004c41
    1678:	e000e100 	.word	0xe000e100
    167c:	0000462d 	.word	0x0000462d

00001680 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    1680:	2a00      	cmp	r2, #0
    1682:	d006      	beq.n	1692 <m2m_memcpy+0x12>
    1684:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    1686:	780b      	ldrb	r3, [r1, #0]
    1688:	7003      	strb	r3, [r0, #0]
		pDst++;
    168a:	3001      	adds	r0, #1
		pSrc++;
    168c:	3101      	adds	r1, #1
	}while(--sz);
    168e:	4290      	cmp	r0, r2
    1690:	d1f9      	bne.n	1686 <m2m_memcpy+0x6>
}
    1692:	4770      	bx	lr

00001694 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    1694:	2a00      	cmp	r2, #0
    1696:	d004      	beq.n	16a2 <m2m_memset+0xe>
    1698:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    169a:	7001      	strb	r1, [r0, #0]
		pBuf++;
    169c:	3001      	adds	r0, #1
	}while(--sz);
    169e:	4290      	cmp	r0, r2
    16a0:	d1fb      	bne.n	169a <m2m_memset+0x6>
}
    16a2:	4770      	bx	lr

000016a4 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    16a4:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    16a6:	7802      	ldrb	r2, [r0, #0]
    16a8:	2a00      	cmp	r2, #0
    16aa:	d007      	beq.n	16bc <m2m_strlen+0x18>
    16ac:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    16ae:	3001      	adds	r0, #1
    16b0:	b280      	uxth	r0, r0
		pcStr++;
    16b2:	3301      	adds	r3, #1
	while(*pcStr)
    16b4:	781a      	ldrb	r2, [r3, #0]
    16b6:	2a00      	cmp	r2, #0
    16b8:	d1f9      	bne.n	16ae <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    16ba:	4770      	bx	lr
	uint16	u16StrLen = 0;
    16bc:	2000      	movs	r0, #0
    16be:	e7fc      	b.n	16ba <m2m_strlen+0x16>

000016c0 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    16c0:	4a02      	ldr	r2, [pc, #8]	; (16cc <isr+0xc>)
    16c2:	78d3      	ldrb	r3, [r2, #3]
    16c4:	3301      	adds	r3, #1
    16c6:	b2db      	uxtb	r3, r3
    16c8:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    16ca:	4770      	bx	lr
    16cc:	20000f1c 	.word	0x20000f1c

000016d0 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    16d0:	4770      	bx	lr
	...

000016d4 <hif_set_rx_done>:
{
    16d4:	b500      	push	{lr}
    16d6:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    16d8:	2200      	movs	r2, #0
    16da:	4b0a      	ldr	r3, [pc, #40]	; (1704 <hif_set_rx_done+0x30>)
    16dc:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    16de:	2001      	movs	r0, #1
    16e0:	4b09      	ldr	r3, [pc, #36]	; (1708 <hif_set_rx_done+0x34>)
    16e2:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    16e4:	a901      	add	r1, sp, #4
    16e6:	4809      	ldr	r0, [pc, #36]	; (170c <hif_set_rx_done+0x38>)
    16e8:	4b09      	ldr	r3, [pc, #36]	; (1710 <hif_set_rx_done+0x3c>)
    16ea:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    16ec:	2800      	cmp	r0, #0
    16ee:	d001      	beq.n	16f4 <hif_set_rx_done+0x20>
}
    16f0:	b003      	add	sp, #12
    16f2:	bd00      	pop	{pc}
	reg |= NBIT1;
    16f4:	2102      	movs	r1, #2
    16f6:	9b01      	ldr	r3, [sp, #4]
    16f8:	4319      	orrs	r1, r3
    16fa:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    16fc:	4803      	ldr	r0, [pc, #12]	; (170c <hif_set_rx_done+0x38>)
    16fe:	4b05      	ldr	r3, [pc, #20]	; (1714 <hif_set_rx_done+0x40>)
    1700:	4798      	blx	r3
    1702:	e7f5      	b.n	16f0 <hif_set_rx_done+0x1c>
    1704:	20000f1c 	.word	0x20000f1c
    1708:	000013a1 	.word	0x000013a1
    170c:	00001070 	.word	0x00001070
    1710:	00002ae5 	.word	0x00002ae5
    1714:	00002af1 	.word	0x00002af1

00001718 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    1718:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    171a:	4b0c      	ldr	r3, [pc, #48]	; (174c <hif_chip_wake+0x34>)
    171c:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    171e:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    1720:	2b00      	cmp	r3, #0
    1722:	d10d      	bne.n	1740 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    1724:	4b09      	ldr	r3, [pc, #36]	; (174c <hif_chip_wake+0x34>)
    1726:	785b      	ldrb	r3, [r3, #1]
    1728:	2b00      	cmp	r3, #0
    172a:	d103      	bne.n	1734 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    172c:	4b07      	ldr	r3, [pc, #28]	; (174c <hif_chip_wake+0x34>)
    172e:	781b      	ldrb	r3, [r3, #0]
    1730:	2b00      	cmp	r3, #0
    1732:	d106      	bne.n	1742 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    1734:	4a05      	ldr	r2, [pc, #20]	; (174c <hif_chip_wake+0x34>)
    1736:	7853      	ldrb	r3, [r2, #1]
    1738:	3301      	adds	r3, #1
    173a:	b2db      	uxtb	r3, r3
    173c:	7053      	strb	r3, [r2, #1]
    173e:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    1740:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    1742:	4b03      	ldr	r3, [pc, #12]	; (1750 <hif_chip_wake+0x38>)
    1744:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    1746:	2800      	cmp	r0, #0
    1748:	d0f4      	beq.n	1734 <hif_chip_wake+0x1c>
    174a:	e7f9      	b.n	1740 <hif_chip_wake+0x28>
    174c:	20000f1c 	.word	0x20000f1c
    1750:	000027cd 	.word	0x000027cd

00001754 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    1754:	4b05      	ldr	r3, [pc, #20]	; (176c <hif_chip_sleep_sc+0x18>)
    1756:	785b      	ldrb	r3, [r3, #1]
    1758:	2b00      	cmp	r3, #0
    175a:	d004      	beq.n	1766 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    175c:	4a03      	ldr	r2, [pc, #12]	; (176c <hif_chip_sleep_sc+0x18>)
    175e:	7853      	ldrb	r3, [r2, #1]
    1760:	3b01      	subs	r3, #1
    1762:	b2db      	uxtb	r3, r3
    1764:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    1766:	2000      	movs	r0, #0
    1768:	4770      	bx	lr
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	20000f1c 	.word	0x20000f1c

00001770 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    1770:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    1772:	4b0b      	ldr	r3, [pc, #44]	; (17a0 <hif_chip_sleep+0x30>)
    1774:	785b      	ldrb	r3, [r3, #1]
    1776:	2b00      	cmp	r3, #0
    1778:	d004      	beq.n	1784 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    177a:	4a09      	ldr	r2, [pc, #36]	; (17a0 <hif_chip_sleep+0x30>)
    177c:	7853      	ldrb	r3, [r2, #1]
    177e:	3b01      	subs	r3, #1
    1780:	b2db      	uxtb	r3, r3
    1782:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    1784:	4b06      	ldr	r3, [pc, #24]	; (17a0 <hif_chip_sleep+0x30>)
    1786:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    1788:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    178a:	2b00      	cmp	r3, #0
    178c:	d103      	bne.n	1796 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    178e:	4b04      	ldr	r3, [pc, #16]	; (17a0 <hif_chip_sleep+0x30>)
    1790:	781b      	ldrb	r3, [r3, #0]
    1792:	2b00      	cmp	r3, #0
    1794:	d100      	bne.n	1798 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    1796:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    1798:	4b02      	ldr	r3, [pc, #8]	; (17a4 <hif_chip_sleep+0x34>)
    179a:	4798      	blx	r3
    179c:	e7fb      	b.n	1796 <hif_chip_sleep+0x26>
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	20000f1c 	.word	0x20000f1c
    17a4:	00002765 	.word	0x00002765

000017a8 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    17a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17aa:	46de      	mov	lr, fp
    17ac:	4657      	mov	r7, sl
    17ae:	b580      	push	{r7, lr}
    17b0:	b089      	sub	sp, #36	; 0x24
    17b2:	4683      	mov	fp, r0
    17b4:	468a      	mov	sl, r1
    17b6:	9201      	str	r2, [sp, #4]
    17b8:	9300      	str	r3, [sp, #0]
    17ba:	ab10      	add	r3, sp, #64	; 0x40
    17bc:	cb80      	ldmia	r3!, {r7}
    17be:	881e      	ldrh	r6, [r3, #0]
    17c0:	ab12      	add	r3, sp, #72	; 0x48
    17c2:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    17c4:	227f      	movs	r2, #127	; 0x7f
    17c6:	400a      	ands	r2, r1
    17c8:	ab07      	add	r3, sp, #28
    17ca:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    17cc:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    17ce:	2208      	movs	r2, #8
    17d0:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    17d2:	2f00      	cmp	r7, #0
    17d4:	d03d      	beq.n	1852 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    17d6:	885a      	ldrh	r2, [r3, #2]
    17d8:	1992      	adds	r2, r2, r6
    17da:	18aa      	adds	r2, r5, r2
    17dc:	b292      	uxth	r2, r2
    17de:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    17e0:	4b69      	ldr	r3, [pc, #420]	; (1988 <hif_send+0x1e0>)
    17e2:	4798      	blx	r3
    17e4:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    17e6:	d000      	beq.n	17ea <hif_send+0x42>
    17e8:	e0c1      	b.n	196e <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    17ea:	2300      	movs	r3, #0
    17ec:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    17ee:	aa02      	add	r2, sp, #8
    17f0:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    17f2:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    17f4:	9b04      	ldr	r3, [sp, #16]
    17f6:	465a      	mov	r2, fp
    17f8:	431a      	orrs	r2, r3
    17fa:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    17fc:	9a04      	ldr	r2, [sp, #16]
    17fe:	4653      	mov	r3, sl
    1800:	021b      	lsls	r3, r3, #8
    1802:	4313      	orrs	r3, r2
    1804:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    1806:	ab07      	add	r3, sp, #28
    1808:	885b      	ldrh	r3, [r3, #2]
    180a:	9a04      	ldr	r2, [sp, #16]
    180c:	041b      	lsls	r3, r3, #16
    180e:	4313      	orrs	r3, r2
    1810:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    1812:	9904      	ldr	r1, [sp, #16]
    1814:	485d      	ldr	r0, [pc, #372]	; (198c <hif_send+0x1e4>)
    1816:	4b5e      	ldr	r3, [pc, #376]	; (1990 <hif_send+0x1e8>)
    1818:	4798      	blx	r3
    181a:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    181c:	d157      	bne.n	18ce <hif_send+0x126>

		reg = 0UL;
    181e:	2300      	movs	r3, #0
    1820:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    1822:	9b04      	ldr	r3, [sp, #16]
    1824:	2202      	movs	r2, #2
    1826:	4313      	orrs	r3, r2
    1828:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    182a:	9904      	ldr	r1, [sp, #16]
    182c:	4859      	ldr	r0, [pc, #356]	; (1994 <hif_send+0x1ec>)
    182e:	4b58      	ldr	r3, [pc, #352]	; (1990 <hif_send+0x1e8>)
    1830:	4798      	blx	r3
    1832:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    1834:	d14b      	bne.n	18ce <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    1836:	2200      	movs	r2, #0
    1838:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    183a:	ab02      	add	r3, sp, #8
    183c:	80da      	strh	r2, [r3, #6]
    183e:	3306      	adds	r3, #6
    1840:	881b      	ldrh	r3, [r3, #0]
    1842:	b29b      	uxth	r3, r3
    1844:	4a54      	ldr	r2, [pc, #336]	; (1998 <hif_send+0x1f0>)
    1846:	4293      	cmp	r3, r2
    1848:	d849      	bhi.n	18de <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    184a:	4c54      	ldr	r4, [pc, #336]	; (199c <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    184c:	4b54      	ldr	r3, [pc, #336]	; (19a0 <hif_send+0x1f8>)
    184e:	469a      	mov	sl, r3
    1850:	e017      	b.n	1882 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    1852:	ab07      	add	r3, sp, #28
    1854:	885a      	ldrh	r2, [r3, #2]
    1856:	9900      	ldr	r1, [sp, #0]
    1858:	468c      	mov	ip, r1
    185a:	4462      	add	r2, ip
    185c:	b292      	uxth	r2, r2
    185e:	805a      	strh	r2, [r3, #2]
    1860:	e7be      	b.n	17e0 <hif_send+0x38>
				nm_bsp_sleep(1);
    1862:	2001      	movs	r0, #1
    1864:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    1866:	9b04      	ldr	r3, [sp, #16]
    1868:	079b      	lsls	r3, r3, #30
    186a:	d528      	bpl.n	18be <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    186c:	ab02      	add	r3, sp, #8
    186e:	88da      	ldrh	r2, [r3, #6]
    1870:	3201      	adds	r2, #1
    1872:	b292      	uxth	r2, r2
    1874:	80da      	strh	r2, [r3, #6]
    1876:	3306      	adds	r3, #6
    1878:	881b      	ldrh	r3, [r3, #0]
    187a:	b29b      	uxth	r3, r3
    187c:	4a46      	ldr	r2, [pc, #280]	; (1998 <hif_send+0x1f0>)
    187e:	4293      	cmp	r3, r2
    1880:	d82d      	bhi.n	18de <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    1882:	a904      	add	r1, sp, #16
    1884:	4843      	ldr	r0, [pc, #268]	; (1994 <hif_send+0x1ec>)
    1886:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    1888:	2800      	cmp	r0, #0
    188a:	d128      	bne.n	18de <hif_send+0x136>
			if(cnt >= 500) {
    188c:	ab02      	add	r3, sp, #8
    188e:	3306      	adds	r3, #6
    1890:	881b      	ldrh	r3, [r3, #0]
    1892:	b29b      	uxth	r3, r3
    1894:	22f4      	movs	r2, #244	; 0xf4
    1896:	32ff      	adds	r2, #255	; 0xff
    1898:	4293      	cmp	r3, r2
    189a:	d9e4      	bls.n	1866 <hif_send+0xbe>
				if(cnt < 501) {
    189c:	ab02      	add	r3, sp, #8
    189e:	3306      	adds	r3, #6
    18a0:	881b      	ldrh	r3, [r3, #0]
    18a2:	b29b      	uxth	r3, r3
    18a4:	3201      	adds	r2, #1
    18a6:	4293      	cmp	r3, r2
    18a8:	d8db      	bhi.n	1862 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    18aa:	483e      	ldr	r0, [pc, #248]	; (19a4 <hif_send+0x1fc>)
    18ac:	4b3e      	ldr	r3, [pc, #248]	; (19a8 <hif_send+0x200>)
    18ae:	4798      	blx	r3
    18b0:	483e      	ldr	r0, [pc, #248]	; (19ac <hif_send+0x204>)
    18b2:	4b3f      	ldr	r3, [pc, #252]	; (19b0 <hif_send+0x208>)
    18b4:	4798      	blx	r3
    18b6:	200d      	movs	r0, #13
    18b8:	4b3e      	ldr	r3, [pc, #248]	; (19b4 <hif_send+0x20c>)
    18ba:	4798      	blx	r3
    18bc:	e7d1      	b.n	1862 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    18be:	a905      	add	r1, sp, #20
    18c0:	483d      	ldr	r0, [pc, #244]	; (19b8 <hif_send+0x210>)
    18c2:	4b36      	ldr	r3, [pc, #216]	; (199c <hif_send+0x1f4>)
    18c4:	4798      	blx	r3
    18c6:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    18c8:	d009      	beq.n	18de <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    18ca:	2300      	movs	r3, #0
    18cc:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    18ce:	4b3b      	ldr	r3, [pc, #236]	; (19bc <hif_send+0x214>)
    18d0:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    18d2:	0020      	movs	r0, r4
    18d4:	b009      	add	sp, #36	; 0x24
    18d6:	bc0c      	pop	{r2, r3}
    18d8:	4692      	mov	sl, r2
    18da:	469b      	mov	fp, r3
    18dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    18de:	9b05      	ldr	r3, [sp, #20]
    18e0:	2b00      	cmp	r3, #0
    18e2:	d03f      	beq.n	1964 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    18e4:	9b05      	ldr	r3, [sp, #20]
    18e6:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    18e8:	a907      	add	r1, sp, #28
    18ea:	884b      	ldrh	r3, [r1, #2]
    18ec:	b29b      	uxth	r3, r3
    18ee:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    18f0:	9806      	ldr	r0, [sp, #24]
    18f2:	2208      	movs	r2, #8
    18f4:	4b32      	ldr	r3, [pc, #200]	; (19c0 <hif_send+0x218>)
    18f6:	4798      	blx	r3
    18f8:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    18fa:	d1e8      	bne.n	18ce <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    18fc:	9b06      	ldr	r3, [sp, #24]
    18fe:	3308      	adds	r3, #8
    1900:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    1902:	9b01      	ldr	r3, [sp, #4]
    1904:	2b00      	cmp	r3, #0
    1906:	d00b      	beq.n	1920 <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    1908:	9806      	ldr	r0, [sp, #24]
    190a:	9a00      	ldr	r2, [sp, #0]
    190c:	0019      	movs	r1, r3
    190e:	4b2c      	ldr	r3, [pc, #176]	; (19c0 <hif_send+0x218>)
    1910:	4798      	blx	r3
    1912:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    1914:	d1db      	bne.n	18ce <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    1916:	9b06      	ldr	r3, [sp, #24]
    1918:	9a00      	ldr	r2, [sp, #0]
    191a:	4694      	mov	ip, r2
    191c:	4463      	add	r3, ip
    191e:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    1920:	2f00      	cmp	r7, #0
    1922:	d00e      	beq.n	1942 <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    1924:	9b06      	ldr	r3, [sp, #24]
    1926:	9a00      	ldr	r2, [sp, #0]
    1928:	1aad      	subs	r5, r5, r2
    192a:	18ed      	adds	r5, r5, r3
    192c:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    192e:	9806      	ldr	r0, [sp, #24]
    1930:	0032      	movs	r2, r6
    1932:	0039      	movs	r1, r7
    1934:	4b22      	ldr	r3, [pc, #136]	; (19c0 <hif_send+0x218>)
    1936:	4798      	blx	r3
    1938:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    193a:	d1c8      	bne.n	18ce <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    193c:	9b06      	ldr	r3, [sp, #24]
    193e:	18f3      	adds	r3, r6, r3
    1940:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    1942:	9b05      	ldr	r3, [sp, #20]
    1944:	009b      	lsls	r3, r3, #2
    1946:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    1948:	9b04      	ldr	r3, [sp, #16]
    194a:	2202      	movs	r2, #2
    194c:	4313      	orrs	r3, r2
    194e:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    1950:	9904      	ldr	r1, [sp, #16]
    1952:	481c      	ldr	r0, [pc, #112]	; (19c4 <hif_send+0x21c>)
    1954:	4b0e      	ldr	r3, [pc, #56]	; (1990 <hif_send+0x1e8>)
    1956:	4798      	blx	r3
    1958:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    195a:	d1b8      	bne.n	18ce <hif_send+0x126>
 	ret = hif_chip_sleep();
    195c:	4b1a      	ldr	r3, [pc, #104]	; (19c8 <hif_send+0x220>)
    195e:	4798      	blx	r3
    1960:	0004      	movs	r4, r0
	return ret;
    1962:	e7b6      	b.n	18d2 <hif_send+0x12a>
			ret = hif_chip_sleep();
    1964:	4b18      	ldr	r3, [pc, #96]	; (19c8 <hif_send+0x220>)
    1966:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    1968:	2403      	movs	r4, #3
    196a:	4264      	negs	r4, r4
			goto ERR2;
    196c:	e7b1      	b.n	18d2 <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    196e:	2298      	movs	r2, #152	; 0x98
    1970:	32ff      	adds	r2, #255	; 0xff
    1972:	4916      	ldr	r1, [pc, #88]	; (19cc <hif_send+0x224>)
    1974:	4816      	ldr	r0, [pc, #88]	; (19d0 <hif_send+0x228>)
    1976:	4b0c      	ldr	r3, [pc, #48]	; (19a8 <hif_send+0x200>)
    1978:	4798      	blx	r3
    197a:	4816      	ldr	r0, [pc, #88]	; (19d4 <hif_send+0x22c>)
    197c:	4b0c      	ldr	r3, [pc, #48]	; (19b0 <hif_send+0x208>)
    197e:	4798      	blx	r3
    1980:	200d      	movs	r0, #13
    1982:	4b0c      	ldr	r3, [pc, #48]	; (19b4 <hif_send+0x20c>)
    1984:	4798      	blx	r3
		goto ERR2;
    1986:	e7a4      	b.n	18d2 <hif_send+0x12a>
    1988:	00001719 	.word	0x00001719
    198c:	0000108c 	.word	0x0000108c
    1990:	00002af1 	.word	0x00002af1
    1994:	00001078 	.word	0x00001078
    1998:	000003e7 	.word	0x000003e7
    199c:	00002ae5 	.word	0x00002ae5
    19a0:	00001309 	.word	0x00001309
    19a4:	0000d33c 	.word	0x0000d33c
    19a8:	0000b9b5 	.word	0x0000b9b5
    19ac:	0000d348 	.word	0x0000d348
    19b0:	0000bad1 	.word	0x0000bad1
    19b4:	0000b9e9 	.word	0x0000b9e9
    19b8:	00150400 	.word	0x00150400
    19bc:	00001755 	.word	0x00001755
    19c0:	00002b65 	.word	0x00002b65
    19c4:	0000106c 	.word	0x0000106c
    19c8:	00001771 	.word	0x00001771
    19cc:	0000d054 	.word	0x0000d054
    19d0:	0000d00c 	.word	0x0000d00c
    19d4:	0000d358 	.word	0x0000d358

000019d8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    19d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19da:	46ce      	mov	lr, r9
    19dc:	4647      	mov	r7, r8
    19de:	b580      	push	{r7, lr}
    19e0:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    19e2:	2200      	movs	r2, #0
    19e4:	4bd1      	ldr	r3, [pc, #836]	; (1d2c <hif_handle_isr+0x354>)
    19e6:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    19e8:	4699      	mov	r9, r3
    19ea:	4698      	mov	r8, r3
    19ec:	e081      	b.n	1af2 <hif_handle_isr+0x11a>
				gstrHifCxt.u32RxAddr = address;
    19ee:	4bcf      	ldr	r3, [pc, #828]	; (1d2c <hif_handle_isr+0x354>)
    19f0:	9a05      	ldr	r2, [sp, #20]
    19f2:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    19f4:	60de      	str	r6, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    19f6:	af04      	add	r7, sp, #16
    19f8:	2204      	movs	r2, #4
    19fa:	0039      	movs	r1, r7
    19fc:	9805      	ldr	r0, [sp, #20]
    19fe:	4bcc      	ldr	r3, [pc, #816]	; (1d30 <hif_handle_isr+0x358>)
    1a00:	4798      	blx	r3
    1a02:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    1a04:	887b      	ldrh	r3, [r7, #2]
    1a06:	b29b      	uxth	r3, r3
    1a08:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    1a0a:	2800      	cmp	r0, #0
    1a0c:	d134      	bne.n	1a78 <hif_handle_isr+0xa0>
				if(strHif.u16Length != size)
    1a0e:	ab04      	add	r3, sp, #16
    1a10:	885b      	ldrh	r3, [r3, #2]
    1a12:	b29b      	uxth	r3, r3
    1a14:	429e      	cmp	r6, r3
    1a16:	d004      	beq.n	1a22 <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    1a18:	ab04      	add	r3, sp, #16
    1a1a:	885b      	ldrh	r3, [r3, #2]
    1a1c:	1af3      	subs	r3, r6, r3
    1a1e:	2b04      	cmp	r3, #4
    1a20:	dc3a      	bgt.n	1a98 <hif_handle_isr+0xc0>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1a22:	ab04      	add	r3, sp, #16
    1a24:	781b      	ldrb	r3, [r3, #0]
    1a26:	2b01      	cmp	r3, #1
    1a28:	d04f      	beq.n	1aca <hif_handle_isr+0xf2>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1a2a:	ab04      	add	r3, sp, #16
    1a2c:	781b      	ldrb	r3, [r3, #0]
    1a2e:	2b02      	cmp	r3, #2
    1a30:	d07d      	beq.n	1b2e <hif_handle_isr+0x156>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    1a32:	ab04      	add	r3, sp, #16
    1a34:	781b      	ldrb	r3, [r3, #0]
    1a36:	2b04      	cmp	r3, #4
    1a38:	d100      	bne.n	1a3c <hif_handle_isr+0x64>
    1a3a:	e095      	b.n	1b68 <hif_handle_isr+0x190>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    1a3c:	ab04      	add	r3, sp, #16
    1a3e:	781b      	ldrb	r3, [r3, #0]
    1a40:	2b06      	cmp	r3, #6
    1a42:	d100      	bne.n	1a46 <hif_handle_isr+0x6e>
    1a44:	e0ad      	b.n	1ba2 <hif_handle_isr+0x1ca>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1a46:	ab04      	add	r3, sp, #16
    1a48:	781b      	ldrb	r3, [r3, #0]
    1a4a:	2b07      	cmp	r3, #7
    1a4c:	d100      	bne.n	1a50 <hif_handle_isr+0x78>
    1a4e:	e0c5      	b.n	1bdc <hif_handle_isr+0x204>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    1a50:	ab04      	add	r3, sp, #16
    1a52:	781b      	ldrb	r3, [r3, #0]
    1a54:	2b05      	cmp	r3, #5
    1a56:	d100      	bne.n	1a5a <hif_handle_isr+0x82>
    1a58:	e0dc      	b.n	1c14 <hif_handle_isr+0x23c>
					M2M_ERR("(hif) invalid group ID\n");
    1a5a:	2284      	movs	r2, #132	; 0x84
    1a5c:	0092      	lsls	r2, r2, #2
    1a5e:	49b5      	ldr	r1, [pc, #724]	; (1d34 <hif_handle_isr+0x35c>)
    1a60:	48b5      	ldr	r0, [pc, #724]	; (1d38 <hif_handle_isr+0x360>)
    1a62:	4bb6      	ldr	r3, [pc, #728]	; (1d3c <hif_handle_isr+0x364>)
    1a64:	4798      	blx	r3
    1a66:	48b6      	ldr	r0, [pc, #728]	; (1d40 <hif_handle_isr+0x368>)
    1a68:	4bb6      	ldr	r3, [pc, #728]	; (1d44 <hif_handle_isr+0x36c>)
    1a6a:	4798      	blx	r3
    1a6c:	200d      	movs	r0, #13
    1a6e:	4bb6      	ldr	r3, [pc, #728]	; (1d48 <hif_handle_isr+0x370>)
    1a70:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    1a72:	2406      	movs	r4, #6
    1a74:	4264      	negs	r4, r4
    1a76:	e119      	b.n	1cac <hif_handle_isr+0x2d4>
					M2M_ERR("(hif) address bus fail\n");
    1a78:	22e9      	movs	r2, #233	; 0xe9
    1a7a:	0052      	lsls	r2, r2, #1
    1a7c:	49ad      	ldr	r1, [pc, #692]	; (1d34 <hif_handle_isr+0x35c>)
    1a7e:	48ae      	ldr	r0, [pc, #696]	; (1d38 <hif_handle_isr+0x360>)
    1a80:	4bae      	ldr	r3, [pc, #696]	; (1d3c <hif_handle_isr+0x364>)
    1a82:	4798      	blx	r3
    1a84:	48b1      	ldr	r0, [pc, #708]	; (1d4c <hif_handle_isr+0x374>)
    1a86:	4baf      	ldr	r3, [pc, #700]	; (1d44 <hif_handle_isr+0x36c>)
    1a88:	4798      	blx	r3
    1a8a:	200d      	movs	r0, #13
    1a8c:	4bae      	ldr	r3, [pc, #696]	; (1d48 <hif_handle_isr+0x370>)
    1a8e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1a90:	2001      	movs	r0, #1
    1a92:	4baf      	ldr	r3, [pc, #700]	; (1d50 <hif_handle_isr+0x378>)
    1a94:	4798      	blx	r3
    1a96:	e109      	b.n	1cac <hif_handle_isr+0x2d4>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    1a98:	22dc      	movs	r2, #220	; 0xdc
    1a9a:	32ff      	adds	r2, #255	; 0xff
    1a9c:	49a5      	ldr	r1, [pc, #660]	; (1d34 <hif_handle_isr+0x35c>)
    1a9e:	48a6      	ldr	r0, [pc, #664]	; (1d38 <hif_handle_isr+0x360>)
    1aa0:	4ca6      	ldr	r4, [pc, #664]	; (1d3c <hif_handle_isr+0x364>)
    1aa2:	47a0      	blx	r4
    1aa4:	a904      	add	r1, sp, #16
    1aa6:	884a      	ldrh	r2, [r1, #2]
    1aa8:	b292      	uxth	r2, r2
    1aaa:	780b      	ldrb	r3, [r1, #0]
    1aac:	b2db      	uxtb	r3, r3
    1aae:	7849      	ldrb	r1, [r1, #1]
    1ab0:	9100      	str	r1, [sp, #0]
    1ab2:	0031      	movs	r1, r6
    1ab4:	48a7      	ldr	r0, [pc, #668]	; (1d54 <hif_handle_isr+0x37c>)
    1ab6:	47a0      	blx	r4
    1ab8:	200d      	movs	r0, #13
    1aba:	4ba3      	ldr	r3, [pc, #652]	; (1d48 <hif_handle_isr+0x370>)
    1abc:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1abe:	2001      	movs	r0, #1
    1ac0:	4ba3      	ldr	r3, [pc, #652]	; (1d50 <hif_handle_isr+0x378>)
    1ac2:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    1ac4:	2406      	movs	r4, #6
    1ac6:	4264      	negs	r4, r4
    1ac8:	e0f0      	b.n	1cac <hif_handle_isr+0x2d4>
					if(gstrHifCxt.pfWifiCb)
    1aca:	4b98      	ldr	r3, [pc, #608]	; (1d2c <hif_handle_isr+0x354>)
    1acc:	691b      	ldr	r3, [r3, #16]
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d020      	beq.n	1b14 <hif_handle_isr+0x13c>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1ad2:	4b96      	ldr	r3, [pc, #600]	; (1d2c <hif_handle_isr+0x354>)
    1ad4:	691b      	ldr	r3, [r3, #16]
    1ad6:	aa04      	add	r2, sp, #16
    1ad8:	7850      	ldrb	r0, [r2, #1]
    1ada:	b2c0      	uxtb	r0, r0
    1adc:	8851      	ldrh	r1, [r2, #2]
    1ade:	9a05      	ldr	r2, [sp, #20]
    1ae0:	3208      	adds	r2, #8
    1ae2:	3908      	subs	r1, #8
    1ae4:	b289      	uxth	r1, r1
    1ae6:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    1ae8:	4b90      	ldr	r3, [pc, #576]	; (1d2c <hif_handle_isr+0x354>)
    1aea:	789b      	ldrb	r3, [r3, #2]
    1aec:	2b00      	cmp	r3, #0
    1aee:	d000      	beq.n	1af2 <hif_handle_isr+0x11a>
    1af0:	e0a1      	b.n	1c36 <hif_handle_isr+0x25e>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    1af2:	464b      	mov	r3, r9
    1af4:	78db      	ldrb	r3, [r3, #3]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d100      	bne.n	1afc <hif_handle_isr+0x124>
    1afa:	e15b      	b.n	1db4 <hif_handle_isr+0x3dc>
    1afc:	4643      	mov	r3, r8
    1afe:	791b      	ldrb	r3, [r3, #4]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d000      	beq.n	1b06 <hif_handle_isr+0x12e>
    1b04:	e156      	b.n	1db4 <hif_handle_isr+0x3dc>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    1b06:	4a89      	ldr	r2, [pc, #548]	; (1d2c <hif_handle_isr+0x354>)
    1b08:	78d3      	ldrb	r3, [r2, #3]
    1b0a:	3b01      	subs	r3, #1
    1b0c:	b2db      	uxtb	r3, r3
    1b0e:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1b10:	4d91      	ldr	r5, [pc, #580]	; (1d58 <hif_handle_isr+0x380>)
    1b12:	e0d6      	b.n	1cc2 <hif_handle_isr+0x2ea>
						M2M_ERR("WIFI callback is not registered\n");
    1b14:	22e8      	movs	r2, #232	; 0xe8
    1b16:	32ff      	adds	r2, #255	; 0xff
    1b18:	4986      	ldr	r1, [pc, #536]	; (1d34 <hif_handle_isr+0x35c>)
    1b1a:	4887      	ldr	r0, [pc, #540]	; (1d38 <hif_handle_isr+0x360>)
    1b1c:	4b87      	ldr	r3, [pc, #540]	; (1d3c <hif_handle_isr+0x364>)
    1b1e:	4798      	blx	r3
    1b20:	488e      	ldr	r0, [pc, #568]	; (1d5c <hif_handle_isr+0x384>)
    1b22:	4b88      	ldr	r3, [pc, #544]	; (1d44 <hif_handle_isr+0x36c>)
    1b24:	4798      	blx	r3
    1b26:	200d      	movs	r0, #13
    1b28:	4b87      	ldr	r3, [pc, #540]	; (1d48 <hif_handle_isr+0x370>)
    1b2a:	4798      	blx	r3
    1b2c:	e7dc      	b.n	1ae8 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfIpCb)
    1b2e:	4b7f      	ldr	r3, [pc, #508]	; (1d2c <hif_handle_isr+0x354>)
    1b30:	695b      	ldr	r3, [r3, #20]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d00b      	beq.n	1b4e <hif_handle_isr+0x176>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b36:	4b7d      	ldr	r3, [pc, #500]	; (1d2c <hif_handle_isr+0x354>)
    1b38:	695b      	ldr	r3, [r3, #20]
    1b3a:	aa04      	add	r2, sp, #16
    1b3c:	7850      	ldrb	r0, [r2, #1]
    1b3e:	b2c0      	uxtb	r0, r0
    1b40:	8851      	ldrh	r1, [r2, #2]
    1b42:	9a05      	ldr	r2, [sp, #20]
    1b44:	3208      	adds	r2, #8
    1b46:	3908      	subs	r1, #8
    1b48:	b289      	uxth	r1, r1
    1b4a:	4798      	blx	r3
    1b4c:	e7cc      	b.n	1ae8 <hif_handle_isr+0x110>
						M2M_ERR("Scoket callback is not registered\n");
    1b4e:	22f0      	movs	r2, #240	; 0xf0
    1b50:	32ff      	adds	r2, #255	; 0xff
    1b52:	4978      	ldr	r1, [pc, #480]	; (1d34 <hif_handle_isr+0x35c>)
    1b54:	4878      	ldr	r0, [pc, #480]	; (1d38 <hif_handle_isr+0x360>)
    1b56:	4b79      	ldr	r3, [pc, #484]	; (1d3c <hif_handle_isr+0x364>)
    1b58:	4798      	blx	r3
    1b5a:	4881      	ldr	r0, [pc, #516]	; (1d60 <hif_handle_isr+0x388>)
    1b5c:	4b79      	ldr	r3, [pc, #484]	; (1d44 <hif_handle_isr+0x36c>)
    1b5e:	4798      	blx	r3
    1b60:	200d      	movs	r0, #13
    1b62:	4b79      	ldr	r3, [pc, #484]	; (1d48 <hif_handle_isr+0x370>)
    1b64:	4798      	blx	r3
    1b66:	e7bf      	b.n	1ae8 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfOtaCb)
    1b68:	4b70      	ldr	r3, [pc, #448]	; (1d2c <hif_handle_isr+0x354>)
    1b6a:	699b      	ldr	r3, [r3, #24]
    1b6c:	2b00      	cmp	r3, #0
    1b6e:	d00b      	beq.n	1b88 <hif_handle_isr+0x1b0>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1b70:	4b6e      	ldr	r3, [pc, #440]	; (1d2c <hif_handle_isr+0x354>)
    1b72:	699b      	ldr	r3, [r3, #24]
    1b74:	aa04      	add	r2, sp, #16
    1b76:	7850      	ldrb	r0, [r2, #1]
    1b78:	b2c0      	uxtb	r0, r0
    1b7a:	8851      	ldrh	r1, [r2, #2]
    1b7c:	9a05      	ldr	r2, [sp, #20]
    1b7e:	3208      	adds	r2, #8
    1b80:	3908      	subs	r1, #8
    1b82:	b289      	uxth	r1, r1
    1b84:	4798      	blx	r3
    1b86:	e7af      	b.n	1ae8 <hif_handle_isr+0x110>
						M2M_ERR("Ota callback is not registered\n");
    1b88:	22f8      	movs	r2, #248	; 0xf8
    1b8a:	32ff      	adds	r2, #255	; 0xff
    1b8c:	4969      	ldr	r1, [pc, #420]	; (1d34 <hif_handle_isr+0x35c>)
    1b8e:	486a      	ldr	r0, [pc, #424]	; (1d38 <hif_handle_isr+0x360>)
    1b90:	4b6a      	ldr	r3, [pc, #424]	; (1d3c <hif_handle_isr+0x364>)
    1b92:	4798      	blx	r3
    1b94:	4873      	ldr	r0, [pc, #460]	; (1d64 <hif_handle_isr+0x38c>)
    1b96:	4b6b      	ldr	r3, [pc, #428]	; (1d44 <hif_handle_isr+0x36c>)
    1b98:	4798      	blx	r3
    1b9a:	200d      	movs	r0, #13
    1b9c:	4b6a      	ldr	r3, [pc, #424]	; (1d48 <hif_handle_isr+0x370>)
    1b9e:	4798      	blx	r3
    1ba0:	e7a2      	b.n	1ae8 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfCryptoCb)
    1ba2:	4b62      	ldr	r3, [pc, #392]	; (1d2c <hif_handle_isr+0x354>)
    1ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d00b      	beq.n	1bc2 <hif_handle_isr+0x1ea>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1baa:	4b60      	ldr	r3, [pc, #384]	; (1d2c <hif_handle_isr+0x354>)
    1bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1bae:	aa04      	add	r2, sp, #16
    1bb0:	7850      	ldrb	r0, [r2, #1]
    1bb2:	b2c0      	uxtb	r0, r0
    1bb4:	8851      	ldrh	r1, [r2, #2]
    1bb6:	9a05      	ldr	r2, [sp, #20]
    1bb8:	3208      	adds	r2, #8
    1bba:	3908      	subs	r1, #8
    1bbc:	b289      	uxth	r1, r1
    1bbe:	4798      	blx	r3
    1bc0:	e792      	b.n	1ae8 <hif_handle_isr+0x110>
						M2M_ERR("Crypto callback is not registered\n");
    1bc2:	2280      	movs	r2, #128	; 0x80
    1bc4:	0092      	lsls	r2, r2, #2
    1bc6:	495b      	ldr	r1, [pc, #364]	; (1d34 <hif_handle_isr+0x35c>)
    1bc8:	485b      	ldr	r0, [pc, #364]	; (1d38 <hif_handle_isr+0x360>)
    1bca:	4b5c      	ldr	r3, [pc, #368]	; (1d3c <hif_handle_isr+0x364>)
    1bcc:	4798      	blx	r3
    1bce:	4866      	ldr	r0, [pc, #408]	; (1d68 <hif_handle_isr+0x390>)
    1bd0:	4b5c      	ldr	r3, [pc, #368]	; (1d44 <hif_handle_isr+0x36c>)
    1bd2:	4798      	blx	r3
    1bd4:	200d      	movs	r0, #13
    1bd6:	4b5c      	ldr	r3, [pc, #368]	; (1d48 <hif_handle_isr+0x370>)
    1bd8:	4798      	blx	r3
    1bda:	e785      	b.n	1ae8 <hif_handle_isr+0x110>
					if(gstrHifCxt.pfSigmaCb)
    1bdc:	4b53      	ldr	r3, [pc, #332]	; (1d2c <hif_handle_isr+0x354>)
    1bde:	69db      	ldr	r3, [r3, #28]
    1be0:	2b00      	cmp	r3, #0
    1be2:	d00b      	beq.n	1bfc <hif_handle_isr+0x224>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1be4:	4b51      	ldr	r3, [pc, #324]	; (1d2c <hif_handle_isr+0x354>)
    1be6:	69db      	ldr	r3, [r3, #28]
    1be8:	aa04      	add	r2, sp, #16
    1bea:	7850      	ldrb	r0, [r2, #1]
    1bec:	b2c0      	uxtb	r0, r0
    1bee:	8851      	ldrh	r1, [r2, #2]
    1bf0:	9a05      	ldr	r2, [sp, #20]
    1bf2:	3208      	adds	r2, #8
    1bf4:	3908      	subs	r1, #8
    1bf6:	b289      	uxth	r1, r1
    1bf8:	4798      	blx	r3
    1bfa:	e775      	b.n	1ae8 <hif_handle_isr+0x110>
						M2M_ERR("Sigma callback is not registered\n");
    1bfc:	4a5b      	ldr	r2, [pc, #364]	; (1d6c <hif_handle_isr+0x394>)
    1bfe:	494d      	ldr	r1, [pc, #308]	; (1d34 <hif_handle_isr+0x35c>)
    1c00:	484d      	ldr	r0, [pc, #308]	; (1d38 <hif_handle_isr+0x360>)
    1c02:	4b4e      	ldr	r3, [pc, #312]	; (1d3c <hif_handle_isr+0x364>)
    1c04:	4798      	blx	r3
    1c06:	485a      	ldr	r0, [pc, #360]	; (1d70 <hif_handle_isr+0x398>)
    1c08:	4b4e      	ldr	r3, [pc, #312]	; (1d44 <hif_handle_isr+0x36c>)
    1c0a:	4798      	blx	r3
    1c0c:	200d      	movs	r0, #13
    1c0e:	4b4e      	ldr	r3, [pc, #312]	; (1d48 <hif_handle_isr+0x370>)
    1c10:	4798      	blx	r3
    1c12:	e769      	b.n	1ae8 <hif_handle_isr+0x110>
				    if(gstrHifCxt.pfSslCb)
    1c14:	4b45      	ldr	r3, [pc, #276]	; (1d2c <hif_handle_isr+0x354>)
    1c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c18:	2b00      	cmp	r3, #0
    1c1a:	d100      	bne.n	1c1e <hif_handle_isr+0x246>
    1c1c:	e764      	b.n	1ae8 <hif_handle_isr+0x110>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1c1e:	4b43      	ldr	r3, [pc, #268]	; (1d2c <hif_handle_isr+0x354>)
    1c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c22:	aa04      	add	r2, sp, #16
    1c24:	7850      	ldrb	r0, [r2, #1]
    1c26:	b2c0      	uxtb	r0, r0
    1c28:	8851      	ldrh	r1, [r2, #2]
    1c2a:	9a05      	ldr	r2, [sp, #20]
    1c2c:	3208      	adds	r2, #8
    1c2e:	3908      	subs	r1, #8
    1c30:	b289      	uxth	r1, r1
    1c32:	4798      	blx	r3
    1c34:	e758      	b.n	1ae8 <hif_handle_isr+0x110>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    1c36:	4a4f      	ldr	r2, [pc, #316]	; (1d74 <hif_handle_isr+0x39c>)
    1c38:	493e      	ldr	r1, [pc, #248]	; (1d34 <hif_handle_isr+0x35c>)
    1c3a:	483f      	ldr	r0, [pc, #252]	; (1d38 <hif_handle_isr+0x360>)
    1c3c:	4c3f      	ldr	r4, [pc, #252]	; (1d3c <hif_handle_isr+0x364>)
    1c3e:	47a0      	blx	r4
    1c40:	ab04      	add	r3, sp, #16
    1c42:	7819      	ldrb	r1, [r3, #0]
    1c44:	b2c9      	uxtb	r1, r1
    1c46:	785a      	ldrb	r2, [r3, #1]
    1c48:	b2d2      	uxtb	r2, r2
    1c4a:	484b      	ldr	r0, [pc, #300]	; (1d78 <hif_handle_isr+0x3a0>)
    1c4c:	47a0      	blx	r4
    1c4e:	200d      	movs	r0, #13
    1c50:	4b3d      	ldr	r3, [pc, #244]	; (1d48 <hif_handle_isr+0x370>)
    1c52:	4798      	blx	r3
					ret = hif_set_rx_done();
    1c54:	4b49      	ldr	r3, [pc, #292]	; (1d7c <hif_handle_isr+0x3a4>)
    1c56:	4798      	blx	r3
    1c58:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    1c5a:	d127      	bne.n	1cac <hif_handle_isr+0x2d4>
    1c5c:	e749      	b.n	1af2 <hif_handle_isr+0x11a>
				M2M_ERR("(hif) Wrong Size\n");
    1c5e:	4a48      	ldr	r2, [pc, #288]	; (1d80 <hif_handle_isr+0x3a8>)
    1c60:	4934      	ldr	r1, [pc, #208]	; (1d34 <hif_handle_isr+0x35c>)
    1c62:	4835      	ldr	r0, [pc, #212]	; (1d38 <hif_handle_isr+0x360>)
    1c64:	4b35      	ldr	r3, [pc, #212]	; (1d3c <hif_handle_isr+0x364>)
    1c66:	4798      	blx	r3
    1c68:	4846      	ldr	r0, [pc, #280]	; (1d84 <hif_handle_isr+0x3ac>)
    1c6a:	4b36      	ldr	r3, [pc, #216]	; (1d44 <hif_handle_isr+0x36c>)
    1c6c:	4798      	blx	r3
    1c6e:	200d      	movs	r0, #13
    1c70:	4b35      	ldr	r3, [pc, #212]	; (1d48 <hif_handle_isr+0x370>)
    1c72:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    1c74:	2402      	movs	r4, #2
    1c76:	4264      	negs	r4, r4
    1c78:	e018      	b.n	1cac <hif_handle_isr+0x2d4>
			M2M_ERR("(hif) False interrupt %lx",reg);
    1c7a:	4a43      	ldr	r2, [pc, #268]	; (1d88 <hif_handle_isr+0x3b0>)
    1c7c:	492d      	ldr	r1, [pc, #180]	; (1d34 <hif_handle_isr+0x35c>)
    1c7e:	482e      	ldr	r0, [pc, #184]	; (1d38 <hif_handle_isr+0x360>)
    1c80:	4c2e      	ldr	r4, [pc, #184]	; (1d3c <hif_handle_isr+0x364>)
    1c82:	47a0      	blx	r4
    1c84:	9903      	ldr	r1, [sp, #12]
    1c86:	4841      	ldr	r0, [pc, #260]	; (1d8c <hif_handle_isr+0x3b4>)
    1c88:	47a0      	blx	r4
    1c8a:	200d      	movs	r0, #13
    1c8c:	4b2e      	ldr	r3, [pc, #184]	; (1d48 <hif_handle_isr+0x370>)
    1c8e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1c90:	240c      	movs	r4, #12
    1c92:	4264      	negs	r4, r4
    1c94:	e00a      	b.n	1cac <hif_handle_isr+0x2d4>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    1c96:	4a3e      	ldr	r2, [pc, #248]	; (1d90 <hif_handle_isr+0x3b8>)
    1c98:	4926      	ldr	r1, [pc, #152]	; (1d34 <hif_handle_isr+0x35c>)
    1c9a:	4827      	ldr	r0, [pc, #156]	; (1d38 <hif_handle_isr+0x360>)
    1c9c:	4b27      	ldr	r3, [pc, #156]	; (1d3c <hif_handle_isr+0x364>)
    1c9e:	4798      	blx	r3
    1ca0:	483c      	ldr	r0, [pc, #240]	; (1d94 <hif_handle_isr+0x3bc>)
    1ca2:	4b28      	ldr	r3, [pc, #160]	; (1d44 <hif_handle_isr+0x36c>)
    1ca4:	4798      	blx	r3
    1ca6:	200d      	movs	r0, #13
    1ca8:	4b27      	ldr	r3, [pc, #156]	; (1d48 <hif_handle_isr+0x370>)
    1caa:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    1cac:	4a3a      	ldr	r2, [pc, #232]	; (1d98 <hif_handle_isr+0x3c0>)
    1cae:	493b      	ldr	r1, [pc, #236]	; (1d9c <hif_handle_isr+0x3c4>)
    1cb0:	4821      	ldr	r0, [pc, #132]	; (1d38 <hif_handle_isr+0x360>)
    1cb2:	4f22      	ldr	r7, [pc, #136]	; (1d3c <hif_handle_isr+0x364>)
    1cb4:	47b8      	blx	r7
    1cb6:	0021      	movs	r1, r4
    1cb8:	4839      	ldr	r0, [pc, #228]	; (1da0 <hif_handle_isr+0x3c8>)
    1cba:	47b8      	blx	r7
    1cbc:	200d      	movs	r0, #13
    1cbe:	4b22      	ldr	r3, [pc, #136]	; (1d48 <hif_handle_isr+0x370>)
    1cc0:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    1cc2:	a903      	add	r1, sp, #12
    1cc4:	4837      	ldr	r0, [pc, #220]	; (1da4 <hif_handle_isr+0x3cc>)
    1cc6:	47a8      	blx	r5
    1cc8:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    1cca:	d1e4      	bne.n	1c96 <hif_handle_isr+0x2be>
		if(reg & 0x1)	/* New interrupt has been received */
    1ccc:	9b03      	ldr	r3, [sp, #12]
    1cce:	07db      	lsls	r3, r3, #31
    1cd0:	d5d3      	bpl.n	1c7a <hif_handle_isr+0x2a2>
			nm_bsp_interrupt_ctrl(0);
    1cd2:	2000      	movs	r0, #0
    1cd4:	4b1e      	ldr	r3, [pc, #120]	; (1d50 <hif_handle_isr+0x378>)
    1cd6:	4798      	blx	r3
			reg &= ~NBIT0;
    1cd8:	2301      	movs	r3, #1
    1cda:	9903      	ldr	r1, [sp, #12]
    1cdc:	4399      	bics	r1, r3
    1cde:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1ce0:	4830      	ldr	r0, [pc, #192]	; (1da4 <hif_handle_isr+0x3cc>)
    1ce2:	4b31      	ldr	r3, [pc, #196]	; (1da8 <hif_handle_isr+0x3d0>)
    1ce4:	4798      	blx	r3
    1ce6:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    1ce8:	d1e0      	bne.n	1cac <hif_handle_isr+0x2d4>
			gstrHifCxt.u8HifRXDone = 1;
    1cea:	2201      	movs	r2, #1
    1cec:	4b0f      	ldr	r3, [pc, #60]	; (1d2c <hif_handle_isr+0x354>)
    1cee:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    1cf0:	9b03      	ldr	r3, [sp, #12]
    1cf2:	049e      	lsls	r6, r3, #18
    1cf4:	0d36      	lsrs	r6, r6, #20
			if (size > 0) {
    1cf6:	d0b2      	beq.n	1c5e <hif_handle_isr+0x286>
				uint32 address = 0;
    1cf8:	2300      	movs	r3, #0
    1cfa:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1cfc:	a905      	add	r1, sp, #20
    1cfe:	482b      	ldr	r0, [pc, #172]	; (1dac <hif_handle_isr+0x3d4>)
    1d00:	4b15      	ldr	r3, [pc, #84]	; (1d58 <hif_handle_isr+0x380>)
    1d02:	4798      	blx	r3
    1d04:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    1d06:	d100      	bne.n	1d0a <hif_handle_isr+0x332>
    1d08:	e671      	b.n	19ee <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1d0a:	22e4      	movs	r2, #228	; 0xe4
    1d0c:	0052      	lsls	r2, r2, #1
    1d0e:	4909      	ldr	r1, [pc, #36]	; (1d34 <hif_handle_isr+0x35c>)
    1d10:	4809      	ldr	r0, [pc, #36]	; (1d38 <hif_handle_isr+0x360>)
    1d12:	4b0a      	ldr	r3, [pc, #40]	; (1d3c <hif_handle_isr+0x364>)
    1d14:	4798      	blx	r3
    1d16:	4826      	ldr	r0, [pc, #152]	; (1db0 <hif_handle_isr+0x3d8>)
    1d18:	4b0a      	ldr	r3, [pc, #40]	; (1d44 <hif_handle_isr+0x36c>)
    1d1a:	4798      	blx	r3
    1d1c:	200d      	movs	r0, #13
    1d1e:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <hif_handle_isr+0x370>)
    1d20:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    1d22:	2001      	movs	r0, #1
    1d24:	4b0a      	ldr	r3, [pc, #40]	; (1d50 <hif_handle_isr+0x378>)
    1d26:	4798      	blx	r3
    1d28:	e7c0      	b.n	1cac <hif_handle_isr+0x2d4>
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	20000f1c 	.word	0x20000f1c
    1d30:	00002afd 	.word	0x00002afd
    1d34:	0000d060 	.word	0x0000d060
    1d38:	0000d00c 	.word	0x0000d00c
    1d3c:	0000b9b5 	.word	0x0000b9b5
    1d40:	0000d1bc 	.word	0x0000d1bc
    1d44:	0000bad1 	.word	0x0000bad1
    1d48:	0000b9e9 	.word	0x0000b9e9
    1d4c:	0000d0b8 	.word	0x0000d0b8
    1d50:	000013a1 	.word	0x000013a1
    1d54:	0000d0d0 	.word	0x0000d0d0
    1d58:	00002ae5 	.word	0x00002ae5
    1d5c:	0000d110 	.word	0x0000d110
    1d60:	0000d130 	.word	0x0000d130
    1d64:	0000d154 	.word	0x0000d154
    1d68:	0000d174 	.word	0x0000d174
    1d6c:	00000207 	.word	0x00000207
    1d70:	0000d198 	.word	0x0000d198
    1d74:	00000216 	.word	0x00000216
    1d78:	0000d1d4 	.word	0x0000d1d4
    1d7c:	000016d5 	.word	0x000016d5
    1d80:	0000021d 	.word	0x0000021d
    1d84:	0000d200 	.word	0x0000d200
    1d88:	00000225 	.word	0x00000225
    1d8c:	0000d214 	.word	0x0000d214
    1d90:	0000022e 	.word	0x0000022e
    1d94:	0000d230 	.word	0x0000d230
    1d98:	00000257 	.word	0x00000257
    1d9c:	0000d068 	.word	0x0000d068
    1da0:	0000d254 	.word	0x0000d254
    1da4:	00001070 	.word	0x00001070
    1da8:	00002af1 	.word	0x00002af1
    1dac:	00001084 	.word	0x00001084
    1db0:	0000d094 	.word	0x0000d094
			}
		}
	}

	return ret;
}
    1db4:	2000      	movs	r0, #0
    1db6:	b007      	add	sp, #28
    1db8:	bc0c      	pop	{r2, r3}
    1dba:	4690      	mov	r8, r2
    1dbc:	4699      	mov	r9, r3
    1dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001dc0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    1dc0:	b570      	push	{r4, r5, r6, lr}
    1dc2:	0014      	movs	r4, r2
    1dc4:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    1dc6:	2800      	cmp	r0, #0
    1dc8:	d003      	beq.n	1dd2 <hif_receive+0x12>
    1dca:	2900      	cmp	r1, #0
    1dcc:	d001      	beq.n	1dd2 <hif_receive+0x12>
    1dce:	2a00      	cmp	r2, #0
    1dd0:	d113      	bne.n	1dfa <hif_receive+0x3a>
	{
		if(isDone)
    1dd2:	2d00      	cmp	r5, #0
    1dd4:	d002      	beq.n	1ddc <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    1dd6:	4b28      	ldr	r3, [pc, #160]	; (1e78 <hif_receive+0xb8>)
    1dd8:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    1dda:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    1ddc:	229e      	movs	r2, #158	; 0x9e
    1dde:	0092      	lsls	r2, r2, #2
    1de0:	4926      	ldr	r1, [pc, #152]	; (1e7c <hif_receive+0xbc>)
    1de2:	4827      	ldr	r0, [pc, #156]	; (1e80 <hif_receive+0xc0>)
    1de4:	4b27      	ldr	r3, [pc, #156]	; (1e84 <hif_receive+0xc4>)
    1de6:	4798      	blx	r3
    1de8:	4827      	ldr	r0, [pc, #156]	; (1e88 <hif_receive+0xc8>)
    1dea:	4b28      	ldr	r3, [pc, #160]	; (1e8c <hif_receive+0xcc>)
    1dec:	4798      	blx	r3
    1dee:	200d      	movs	r0, #13
    1df0:	4b27      	ldr	r3, [pc, #156]	; (1e90 <hif_receive+0xd0>)
    1df2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1df4:	200c      	movs	r0, #12
    1df6:	4240      	negs	r0, r0
    1df8:	e7ef      	b.n	1dda <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    1dfa:	4b26      	ldr	r3, [pc, #152]	; (1e94 <hif_receive+0xd4>)
    1dfc:	68db      	ldr	r3, [r3, #12]
    1dfe:	429a      	cmp	r2, r3
    1e00:	d81a      	bhi.n	1e38 <hif_receive+0x78>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    1e02:	4b24      	ldr	r3, [pc, #144]	; (1e94 <hif_receive+0xd4>)
    1e04:	689b      	ldr	r3, [r3, #8]
    1e06:	4298      	cmp	r0, r3
    1e08:	d327      	bcc.n	1e5a <hif_receive+0x9a>
    1e0a:	1886      	adds	r6, r0, r2
    1e0c:	4a21      	ldr	r2, [pc, #132]	; (1e94 <hif_receive+0xd4>)
    1e0e:	6893      	ldr	r3, [r2, #8]
    1e10:	68d2      	ldr	r2, [r2, #12]
    1e12:	189b      	adds	r3, r3, r2
    1e14:	429e      	cmp	r6, r3
    1e16:	d820      	bhi.n	1e5a <hif_receive+0x9a>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    1e18:	0022      	movs	r2, r4
    1e1a:	4b1f      	ldr	r3, [pc, #124]	; (1e98 <hif_receive+0xd8>)
    1e1c:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1e1e:	2800      	cmp	r0, #0
    1e20:	d1db      	bne.n	1dda <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    1e22:	4a1c      	ldr	r2, [pc, #112]	; (1e94 <hif_receive+0xd4>)
    1e24:	6893      	ldr	r3, [r2, #8]
    1e26:	68d2      	ldr	r2, [r2, #12]
    1e28:	189b      	adds	r3, r3, r2
    1e2a:	429e      	cmp	r6, r3
    1e2c:	d001      	beq.n	1e32 <hif_receive+0x72>
    1e2e:	2d00      	cmp	r5, #0
    1e30:	d0d3      	beq.n	1dda <hif_receive+0x1a>
		ret = hif_set_rx_done();
    1e32:	4b11      	ldr	r3, [pc, #68]	; (1e78 <hif_receive+0xb8>)
    1e34:	4798      	blx	r3
    1e36:	e7d0      	b.n	1dda <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    1e38:	22a0      	movs	r2, #160	; 0xa0
    1e3a:	0092      	lsls	r2, r2, #2
    1e3c:	490f      	ldr	r1, [pc, #60]	; (1e7c <hif_receive+0xbc>)
    1e3e:	4810      	ldr	r0, [pc, #64]	; (1e80 <hif_receive+0xc0>)
    1e40:	4d10      	ldr	r5, [pc, #64]	; (1e84 <hif_receive+0xc4>)
    1e42:	47a8      	blx	r5
    1e44:	4b13      	ldr	r3, [pc, #76]	; (1e94 <hif_receive+0xd4>)
    1e46:	68da      	ldr	r2, [r3, #12]
    1e48:	0021      	movs	r1, r4
    1e4a:	4814      	ldr	r0, [pc, #80]	; (1e9c <hif_receive+0xdc>)
    1e4c:	47a8      	blx	r5
    1e4e:	200d      	movs	r0, #13
    1e50:	4b0f      	ldr	r3, [pc, #60]	; (1e90 <hif_receive+0xd0>)
    1e52:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1e54:	200c      	movs	r0, #12
    1e56:	4240      	negs	r0, r0
		goto ERR1;
    1e58:	e7bf      	b.n	1dda <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    1e5a:	4a11      	ldr	r2, [pc, #68]	; (1ea0 <hif_receive+0xe0>)
    1e5c:	4907      	ldr	r1, [pc, #28]	; (1e7c <hif_receive+0xbc>)
    1e5e:	4808      	ldr	r0, [pc, #32]	; (1e80 <hif_receive+0xc0>)
    1e60:	4b08      	ldr	r3, [pc, #32]	; (1e84 <hif_receive+0xc4>)
    1e62:	4798      	blx	r3
    1e64:	480f      	ldr	r0, [pc, #60]	; (1ea4 <hif_receive+0xe4>)
    1e66:	4b09      	ldr	r3, [pc, #36]	; (1e8c <hif_receive+0xcc>)
    1e68:	4798      	blx	r3
    1e6a:	200d      	movs	r0, #13
    1e6c:	4b08      	ldr	r3, [pc, #32]	; (1e90 <hif_receive+0xd0>)
    1e6e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1e70:	200c      	movs	r0, #12
    1e72:	4240      	negs	r0, r0
		goto ERR1;
    1e74:	e7b1      	b.n	1dda <hif_receive+0x1a>
    1e76:	46c0      	nop			; (mov r8, r8)
    1e78:	000016d5 	.word	0x000016d5
    1e7c:	0000d078 	.word	0x0000d078
    1e80:	0000d00c 	.word	0x0000d00c
    1e84:	0000b9b5 	.word	0x0000b9b5
    1e88:	0000d284 	.word	0x0000d284
    1e8c:	0000bad1 	.word	0x0000bad1
    1e90:	0000b9e9 	.word	0x0000b9e9
    1e94:	20000f1c 	.word	0x20000f1c
    1e98:	00002afd 	.word	0x00002afd
    1e9c:	0000d2a4 	.word	0x0000d2a4
    1ea0:	00000286 	.word	0x00000286
    1ea4:	0000d2ec 	.word	0x0000d2ec

00001ea8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    1ea8:	b570      	push	{r4, r5, r6, lr}
    1eaa:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    1eac:	2807      	cmp	r0, #7
    1eae:	d81f      	bhi.n	1ef0 <hif_register_cb+0x48>
    1eb0:	0083      	lsls	r3, r0, #2
    1eb2:	4a16      	ldr	r2, [pc, #88]	; (1f0c <hif_register_cb+0x64>)
    1eb4:	58d3      	ldr	r3, [r2, r3]
    1eb6:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    1eb8:	4b15      	ldr	r3, [pc, #84]	; (1f10 <hif_register_cb+0x68>)
    1eba:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    1ebc:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    1ebe:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    1ec0:	4b13      	ldr	r3, [pc, #76]	; (1f10 <hif_register_cb+0x68>)
    1ec2:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    1ec4:	2000      	movs	r0, #0
			break;
    1ec6:	e7fa      	b.n	1ebe <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    1ec8:	4b11      	ldr	r3, [pc, #68]	; (1f10 <hif_register_cb+0x68>)
    1eca:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    1ecc:	2000      	movs	r0, #0
			break;
    1ece:	e7f6      	b.n	1ebe <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    1ed0:	4b0f      	ldr	r3, [pc, #60]	; (1f10 <hif_register_cb+0x68>)
    1ed2:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    1ed4:	2000      	movs	r0, #0
			break;
    1ed6:	e7f2      	b.n	1ebe <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    1ed8:	4b0d      	ldr	r3, [pc, #52]	; (1f10 <hif_register_cb+0x68>)
    1eda:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    1edc:	2000      	movs	r0, #0
			break;
    1ede:	e7ee      	b.n	1ebe <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    1ee0:	4b0b      	ldr	r3, [pc, #44]	; (1f10 <hif_register_cb+0x68>)
    1ee2:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    1ee4:	2000      	movs	r0, #0
			break;
    1ee6:	e7ea      	b.n	1ebe <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    1ee8:	4b09      	ldr	r3, [pc, #36]	; (1f10 <hif_register_cb+0x68>)
    1eea:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    1eec:	2000      	movs	r0, #0
			break;
    1eee:	e7e6      	b.n	1ebe <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    1ef0:	4a08      	ldr	r2, [pc, #32]	; (1f14 <hif_register_cb+0x6c>)
    1ef2:	4909      	ldr	r1, [pc, #36]	; (1f18 <hif_register_cb+0x70>)
    1ef4:	4809      	ldr	r0, [pc, #36]	; (1f1c <hif_register_cb+0x74>)
    1ef6:	4d0a      	ldr	r5, [pc, #40]	; (1f20 <hif_register_cb+0x78>)
    1ef8:	47a8      	blx	r5
    1efa:	0021      	movs	r1, r4
    1efc:	4809      	ldr	r0, [pc, #36]	; (1f24 <hif_register_cb+0x7c>)
    1efe:	47a8      	blx	r5
    1f00:	200d      	movs	r0, #13
    1f02:	4b09      	ldr	r3, [pc, #36]	; (1f28 <hif_register_cb+0x80>)
    1f04:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1f06:	200c      	movs	r0, #12
    1f08:	4240      	negs	r0, r0
			break;
    1f0a:	e7d8      	b.n	1ebe <hif_register_cb+0x16>
    1f0c:	0000d034 	.word	0x0000d034
    1f10:	20000f1c 	.word	0x20000f1c
    1f14:	000002be 	.word	0x000002be
    1f18:	0000d084 	.word	0x0000d084
    1f1c:	0000d00c 	.word	0x0000d00c
    1f20:	0000b9b5 	.word	0x0000b9b5
    1f24:	0000d330 	.word	0x0000d330
    1f28:	0000b9e9 	.word	0x0000b9e9

00001f2c <hif_init>:
{
    1f2c:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    1f2e:	222c      	movs	r2, #44	; 0x2c
    1f30:	2100      	movs	r1, #0
    1f32:	4806      	ldr	r0, [pc, #24]	; (1f4c <hif_init+0x20>)
    1f34:	4b06      	ldr	r3, [pc, #24]	; (1f50 <hif_init+0x24>)
    1f36:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    1f38:	4806      	ldr	r0, [pc, #24]	; (1f54 <hif_init+0x28>)
    1f3a:	4b07      	ldr	r3, [pc, #28]	; (1f58 <hif_init+0x2c>)
    1f3c:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    1f3e:	4907      	ldr	r1, [pc, #28]	; (1f5c <hif_init+0x30>)
    1f40:	2003      	movs	r0, #3
    1f42:	4b07      	ldr	r3, [pc, #28]	; (1f60 <hif_init+0x34>)
    1f44:	4798      	blx	r3
}
    1f46:	2000      	movs	r0, #0
    1f48:	bd10      	pop	{r4, pc}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	20000f1c 	.word	0x20000f1c
    1f50:	00001695 	.word	0x00001695
    1f54:	000016c1 	.word	0x000016c1
    1f58:	00001349 	.word	0x00001349
    1f5c:	000016d1 	.word	0x000016d1
    1f60:	00001ea9 	.word	0x00001ea9

00001f64 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    1f64:	b530      	push	{r4, r5, lr}
    1f66:	b09f      	sub	sp, #124	; 0x7c
    1f68:	0004      	movs	r4, r0
    1f6a:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    1f6c:	282c      	cmp	r0, #44	; 0x2c
    1f6e:	d02f      	beq.n	1fd0 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    1f70:	281b      	cmp	r0, #27
    1f72:	d03d      	beq.n	1ff0 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    1f74:	2806      	cmp	r0, #6
    1f76:	d04b      	beq.n	2010 <STACK_SIZE+0x10>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    1f78:	280e      	cmp	r0, #14
    1f7a:	d027      	beq.n	1fcc <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    1f7c:	2832      	cmp	r0, #50	; 0x32
    1f7e:	d057      	beq.n	2030 <STACK_SIZE+0x30>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    1f80:	282f      	cmp	r0, #47	; 0x2f
    1f82:	d065      	beq.n	2050 <STACK_SIZE+0x50>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    1f84:	2834      	cmp	r0, #52	; 0x34
    1f86:	d100      	bne.n	1f8a <m2m_wifi_cb+0x26>
    1f88:	e077      	b.n	207a <STACK_SIZE+0x7a>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    1f8a:	2811      	cmp	r0, #17
    1f8c:	d100      	bne.n	1f90 <m2m_wifi_cb+0x2c>
    1f8e:	e096      	b.n	20be <STACK_SIZE+0xbe>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    1f90:	2813      	cmp	r0, #19
    1f92:	d100      	bne.n	1f96 <m2m_wifi_cb+0x32>
    1f94:	e0ac      	b.n	20f0 <STACK_SIZE+0xf0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    1f96:	2804      	cmp	r0, #4
    1f98:	d100      	bne.n	1f9c <m2m_wifi_cb+0x38>
    1f9a:	e0bb      	b.n	2114 <STACK_SIZE+0x114>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    1f9c:	2865      	cmp	r0, #101	; 0x65
    1f9e:	d100      	bne.n	1fa2 <m2m_wifi_cb+0x3e>
    1fa0:	e0ca      	b.n	2138 <STACK_SIZE+0x138>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    1fa2:	2809      	cmp	r0, #9
    1fa4:	d100      	bne.n	1fa8 <m2m_wifi_cb+0x44>
    1fa6:	e0d9      	b.n	215c <STACK_SIZE+0x15c>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    1fa8:	282a      	cmp	r0, #42	; 0x2a
    1faa:	d100      	bne.n	1fae <m2m_wifi_cb+0x4a>
    1fac:	e0e8      	b.n	2180 <STACK_SIZE+0x180>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    1fae:	2820      	cmp	r0, #32
    1fb0:	d100      	bne.n	1fb4 <m2m_wifi_cb+0x50>
    1fb2:	e0f7      	b.n	21a4 <STACK_SIZE+0x1a4>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    1fb4:	2224      	movs	r2, #36	; 0x24
    1fb6:	32ff      	adds	r2, #255	; 0xff
    1fb8:	4989      	ldr	r1, [pc, #548]	; (21e0 <STACK_SIZE+0x1e0>)
    1fba:	488a      	ldr	r0, [pc, #552]	; (21e4 <STACK_SIZE+0x1e4>)
    1fbc:	4d8a      	ldr	r5, [pc, #552]	; (21e8 <STACK_SIZE+0x1e8>)
    1fbe:	47a8      	blx	r5
    1fc0:	0021      	movs	r1, r4
    1fc2:	488a      	ldr	r0, [pc, #552]	; (21ec <STACK_SIZE+0x1ec>)
    1fc4:	47a8      	blx	r5
    1fc6:	200d      	movs	r0, #13
    1fc8:	4b89      	ldr	r3, [pc, #548]	; (21f0 <STACK_SIZE+0x1f0>)
    1fca:	4798      	blx	r3
	}
}
    1fcc:	b01f      	add	sp, #124	; 0x7c
    1fce:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    1fd0:	2300      	movs	r3, #0
    1fd2:	2204      	movs	r2, #4
    1fd4:	a903      	add	r1, sp, #12
    1fd6:	0028      	movs	r0, r5
    1fd8:	4c86      	ldr	r4, [pc, #536]	; (21f4 <STACK_SIZE+0x1f4>)
    1fda:	47a0      	blx	r4
    1fdc:	2800      	cmp	r0, #0
    1fde:	d1f5      	bne.n	1fcc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1fe0:	4b85      	ldr	r3, [pc, #532]	; (21f8 <STACK_SIZE+0x1f8>)
    1fe2:	681b      	ldr	r3, [r3, #0]
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d0f1      	beq.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    1fe8:	a903      	add	r1, sp, #12
    1fea:	302c      	adds	r0, #44	; 0x2c
    1fec:	4798      	blx	r3
    1fee:	e7ed      	b.n	1fcc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    1ff0:	2300      	movs	r3, #0
    1ff2:	2208      	movs	r2, #8
    1ff4:	a903      	add	r1, sp, #12
    1ff6:	0028      	movs	r0, r5
    1ff8:	4c7e      	ldr	r4, [pc, #504]	; (21f4 <STACK_SIZE+0x1f4>)
    1ffa:	47a0      	blx	r4
    1ffc:	2800      	cmp	r0, #0
    1ffe:	d1e5      	bne.n	1fcc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2000:	4b7d      	ldr	r3, [pc, #500]	; (21f8 <STACK_SIZE+0x1f8>)
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	2b00      	cmp	r3, #0
    2006:	d0e1      	beq.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    2008:	a903      	add	r1, sp, #12
    200a:	301b      	adds	r0, #27
    200c:	4798      	blx	r3
    200e:	e7dd      	b.n	1fcc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    2010:	2301      	movs	r3, #1
    2012:	2230      	movs	r2, #48	; 0x30
    2014:	a903      	add	r1, sp, #12
    2016:	0028      	movs	r0, r5
    2018:	4c76      	ldr	r4, [pc, #472]	; (21f4 <STACK_SIZE+0x1f4>)
    201a:	47a0      	blx	r4
    201c:	2800      	cmp	r0, #0
    201e:	d1d5      	bne.n	1fcc <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    2020:	4b75      	ldr	r3, [pc, #468]	; (21f8 <STACK_SIZE+0x1f8>)
    2022:	681b      	ldr	r3, [r3, #0]
    2024:	2b00      	cmp	r3, #0
    2026:	d0d1      	beq.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    2028:	a903      	add	r1, sp, #12
    202a:	3006      	adds	r0, #6
    202c:	4798      	blx	r3
    202e:	e7cd      	b.n	1fcc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    2030:	2300      	movs	r3, #0
    2032:	2218      	movs	r2, #24
    2034:	a903      	add	r1, sp, #12
    2036:	0028      	movs	r0, r5
    2038:	4c6e      	ldr	r4, [pc, #440]	; (21f4 <STACK_SIZE+0x1f4>)
    203a:	47a0      	blx	r4
    203c:	2800      	cmp	r0, #0
    203e:	d1c5      	bne.n	1fcc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2040:	4b6d      	ldr	r3, [pc, #436]	; (21f8 <STACK_SIZE+0x1f8>)
    2042:	681b      	ldr	r3, [r3, #0]
    2044:	2b00      	cmp	r3, #0
    2046:	d0c1      	beq.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    2048:	a903      	add	r1, sp, #12
    204a:	3032      	adds	r0, #50	; 0x32
    204c:	4798      	blx	r3
    204e:	e7bd      	b.n	1fcc <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    2050:	2264      	movs	r2, #100	; 0x64
    2052:	2100      	movs	r1, #0
    2054:	a803      	add	r0, sp, #12
    2056:	4b69      	ldr	r3, [pc, #420]	; (21fc <STACK_SIZE+0x1fc>)
    2058:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    205a:	2300      	movs	r3, #0
    205c:	2264      	movs	r2, #100	; 0x64
    205e:	a903      	add	r1, sp, #12
    2060:	0028      	movs	r0, r5
    2062:	4c64      	ldr	r4, [pc, #400]	; (21f4 <STACK_SIZE+0x1f4>)
    2064:	47a0      	blx	r4
    2066:	2800      	cmp	r0, #0
    2068:	d1b0      	bne.n	1fcc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    206a:	4b63      	ldr	r3, [pc, #396]	; (21f8 <STACK_SIZE+0x1f8>)
    206c:	681b      	ldr	r3, [r3, #0]
    206e:	2b00      	cmp	r3, #0
    2070:	d0ac      	beq.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    2072:	a903      	add	r1, sp, #12
    2074:	302f      	adds	r0, #47	; 0x2f
    2076:	4798      	blx	r3
    2078:	e7a8      	b.n	1fcc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    207a:	2300      	movs	r3, #0
    207c:	2204      	movs	r2, #4
    207e:	a903      	add	r1, sp, #12
    2080:	0028      	movs	r0, r5
    2082:	4c5c      	ldr	r4, [pc, #368]	; (21f4 <STACK_SIZE+0x1f4>)
    2084:	47a0      	blx	r4
    2086:	2800      	cmp	r0, #0
    2088:	d1a0      	bne.n	1fcc <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    208a:	485d      	ldr	r0, [pc, #372]	; (2200 <STACK_SIZE+0x200>)
    208c:	4d56      	ldr	r5, [pc, #344]	; (21e8 <STACK_SIZE+0x1e8>)
    208e:	47a8      	blx	r5
    2090:	9c03      	ldr	r4, [sp, #12]
    2092:	0a23      	lsrs	r3, r4, #8
    2094:	20ff      	movs	r0, #255	; 0xff
    2096:	4003      	ands	r3, r0
    2098:	0c22      	lsrs	r2, r4, #16
    209a:	4002      	ands	r2, r0
    209c:	0e21      	lsrs	r1, r4, #24
    209e:	4020      	ands	r0, r4
    20a0:	9000      	str	r0, [sp, #0]
    20a2:	4858      	ldr	r0, [pc, #352]	; (2204 <STACK_SIZE+0x204>)
    20a4:	47a8      	blx	r5
    20a6:	200d      	movs	r0, #13
    20a8:	4b51      	ldr	r3, [pc, #324]	; (21f0 <STACK_SIZE+0x1f0>)
    20aa:	4798      	blx	r3
			if (gpfAppWifiCb)
    20ac:	4b52      	ldr	r3, [pc, #328]	; (21f8 <STACK_SIZE+0x1f8>)
    20ae:	681b      	ldr	r3, [r3, #0]
    20b0:	2b00      	cmp	r3, #0
    20b2:	d100      	bne.n	20b6 <STACK_SIZE+0xb6>
    20b4:	e78a      	b.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    20b6:	2100      	movs	r1, #0
    20b8:	2034      	movs	r0, #52	; 0x34
    20ba:	4798      	blx	r3
    20bc:	e786      	b.n	1fcc <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    20be:	2200      	movs	r2, #0
    20c0:	4b51      	ldr	r3, [pc, #324]	; (2208 <STACK_SIZE+0x208>)
    20c2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    20c4:	2300      	movs	r3, #0
    20c6:	3204      	adds	r2, #4
    20c8:	a903      	add	r1, sp, #12
    20ca:	0028      	movs	r0, r5
    20cc:	4c49      	ldr	r4, [pc, #292]	; (21f4 <STACK_SIZE+0x1f4>)
    20ce:	47a0      	blx	r4
    20d0:	2800      	cmp	r0, #0
    20d2:	d000      	beq.n	20d6 <STACK_SIZE+0xd6>
    20d4:	e77a      	b.n	1fcc <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    20d6:	ab03      	add	r3, sp, #12
    20d8:	781a      	ldrb	r2, [r3, #0]
    20da:	4b4c      	ldr	r3, [pc, #304]	; (220c <STACK_SIZE+0x20c>)
    20dc:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    20de:	4b46      	ldr	r3, [pc, #280]	; (21f8 <STACK_SIZE+0x1f8>)
    20e0:	681b      	ldr	r3, [r3, #0]
    20e2:	2b00      	cmp	r3, #0
    20e4:	d100      	bne.n	20e8 <STACK_SIZE+0xe8>
    20e6:	e771      	b.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    20e8:	a903      	add	r1, sp, #12
    20ea:	3011      	adds	r0, #17
    20ec:	4798      	blx	r3
    20ee:	e76d      	b.n	1fcc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    20f0:	2300      	movs	r3, #0
    20f2:	222c      	movs	r2, #44	; 0x2c
    20f4:	a903      	add	r1, sp, #12
    20f6:	0028      	movs	r0, r5
    20f8:	4c3e      	ldr	r4, [pc, #248]	; (21f4 <STACK_SIZE+0x1f4>)
    20fa:	47a0      	blx	r4
    20fc:	2800      	cmp	r0, #0
    20fe:	d000      	beq.n	2102 <STACK_SIZE+0x102>
    2100:	e764      	b.n	1fcc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2102:	4b3d      	ldr	r3, [pc, #244]	; (21f8 <STACK_SIZE+0x1f8>)
    2104:	681b      	ldr	r3, [r3, #0]
    2106:	2b00      	cmp	r3, #0
    2108:	d100      	bne.n	210c <STACK_SIZE+0x10c>
    210a:	e75f      	b.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    210c:	a903      	add	r1, sp, #12
    210e:	3013      	adds	r0, #19
    2110:	4798      	blx	r3
    2112:	e75b      	b.n	1fcc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2114:	2300      	movs	r3, #0
    2116:	2204      	movs	r2, #4
    2118:	a91c      	add	r1, sp, #112	; 0x70
    211a:	0028      	movs	r0, r5
    211c:	4c35      	ldr	r4, [pc, #212]	; (21f4 <STACK_SIZE+0x1f4>)
    211e:	47a0      	blx	r4
    2120:	2800      	cmp	r0, #0
    2122:	d000      	beq.n	2126 <STACK_SIZE+0x126>
    2124:	e752      	b.n	1fcc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    2126:	4b34      	ldr	r3, [pc, #208]	; (21f8 <STACK_SIZE+0x1f8>)
    2128:	681b      	ldr	r3, [r3, #0]
    212a:	2b00      	cmp	r3, #0
    212c:	d100      	bne.n	2130 <STACK_SIZE+0x130>
    212e:	e74d      	b.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    2130:	a91c      	add	r1, sp, #112	; 0x70
    2132:	3004      	adds	r0, #4
    2134:	4798      	blx	r3
    2136:	e749      	b.n	1fcc <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    2138:	2300      	movs	r3, #0
    213a:	2204      	movs	r2, #4
    213c:	a91c      	add	r1, sp, #112	; 0x70
    213e:	0028      	movs	r0, r5
    2140:	4c2c      	ldr	r4, [pc, #176]	; (21f4 <STACK_SIZE+0x1f4>)
    2142:	47a0      	blx	r4
    2144:	2800      	cmp	r0, #0
    2146:	d000      	beq.n	214a <STACK_SIZE+0x14a>
    2148:	e740      	b.n	1fcc <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    214a:	4b2b      	ldr	r3, [pc, #172]	; (21f8 <STACK_SIZE+0x1f8>)
    214c:	681b      	ldr	r3, [r3, #0]
    214e:	2b00      	cmp	r3, #0
    2150:	d100      	bne.n	2154 <STACK_SIZE+0x154>
    2152:	e73b      	b.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    2154:	a91c      	add	r1, sp, #112	; 0x70
    2156:	3065      	adds	r0, #101	; 0x65
    2158:	4798      	blx	r3
    215a:	e737      	b.n	1fcc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    215c:	2301      	movs	r3, #1
    215e:	2264      	movs	r2, #100	; 0x64
    2160:	a903      	add	r1, sp, #12
    2162:	0028      	movs	r0, r5
    2164:	4c23      	ldr	r4, [pc, #140]	; (21f4 <STACK_SIZE+0x1f4>)
    2166:	47a0      	blx	r4
    2168:	2800      	cmp	r0, #0
    216a:	d000      	beq.n	216e <STACK_SIZE+0x16e>
    216c:	e72e      	b.n	1fcc <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    216e:	4b22      	ldr	r3, [pc, #136]	; (21f8 <STACK_SIZE+0x1f8>)
    2170:	681b      	ldr	r3, [r3, #0]
    2172:	2b00      	cmp	r3, #0
    2174:	d100      	bne.n	2178 <STACK_SIZE+0x178>
    2176:	e729      	b.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    2178:	a903      	add	r1, sp, #12
    217a:	3009      	adds	r0, #9
    217c:	4798      	blx	r3
    217e:	e725      	b.n	1fcc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    2180:	2301      	movs	r3, #1
    2182:	2204      	movs	r2, #4
    2184:	a903      	add	r1, sp, #12
    2186:	0028      	movs	r0, r5
    2188:	4c1a      	ldr	r4, [pc, #104]	; (21f4 <STACK_SIZE+0x1f4>)
    218a:	47a0      	blx	r4
    218c:	2800      	cmp	r0, #0
    218e:	d000      	beq.n	2192 <STACK_SIZE+0x192>
    2190:	e71c      	b.n	1fcc <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    2192:	4b19      	ldr	r3, [pc, #100]	; (21f8 <STACK_SIZE+0x1f8>)
    2194:	681b      	ldr	r3, [r3, #0]
    2196:	2b00      	cmp	r3, #0
    2198:	d100      	bne.n	219c <STACK_SIZE+0x19c>
    219a:	e717      	b.n	1fcc <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    219c:	a903      	add	r1, sp, #12
    219e:	302a      	adds	r0, #42	; 0x2a
    21a0:	4798      	blx	r3
    21a2:	e713      	b.n	1fcc <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    21a4:	2300      	movs	r3, #0
    21a6:	2208      	movs	r2, #8
    21a8:	a903      	add	r1, sp, #12
    21aa:	0028      	movs	r0, r5
    21ac:	4c11      	ldr	r4, [pc, #68]	; (21f4 <STACK_SIZE+0x1f4>)
    21ae:	47a0      	blx	r4
    21b0:	2800      	cmp	r0, #0
    21b2:	d000      	beq.n	21b6 <STACK_SIZE+0x1b6>
    21b4:	e70a      	b.n	1fcc <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    21b6:	ab03      	add	r3, sp, #12
    21b8:	889a      	ldrh	r2, [r3, #4]
    21ba:	0028      	movs	r0, r5
    21bc:	3008      	adds	r0, #8
    21be:	2301      	movs	r3, #1
    21c0:	9903      	ldr	r1, [sp, #12]
    21c2:	4c0c      	ldr	r4, [pc, #48]	; (21f4 <STACK_SIZE+0x1f4>)
    21c4:	47a0      	blx	r4
    21c6:	2800      	cmp	r0, #0
    21c8:	d000      	beq.n	21cc <STACK_SIZE+0x1cc>
    21ca:	e6ff      	b.n	1fcc <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    21cc:	4b0a      	ldr	r3, [pc, #40]	; (21f8 <STACK_SIZE+0x1f8>)
    21ce:	681b      	ldr	r3, [r3, #0]
    21d0:	2b00      	cmp	r3, #0
    21d2:	d100      	bne.n	21d6 <STACK_SIZE+0x1d6>
    21d4:	e6fa      	b.n	1fcc <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    21d6:	a903      	add	r1, sp, #12
    21d8:	3020      	adds	r0, #32
    21da:	4798      	blx	r3
    21dc:	e6f6      	b.n	1fcc <m2m_wifi_cb+0x68>
    21de:	46c0      	nop			; (mov r8, r8)
    21e0:	0000d374 	.word	0x0000d374
    21e4:	0000d00c 	.word	0x0000d00c
    21e8:	0000b9b5 	.word	0x0000b9b5
    21ec:	0000d3c4 	.word	0x0000d3c4
    21f0:	0000b9e9 	.word	0x0000b9e9
    21f4:	00001dc1 	.word	0x00001dc1
    21f8:	200003a0 	.word	0x200003a0
    21fc:	00001695 	.word	0x00001695
    2200:	0000d33c 	.word	0x0000d33c
    2204:	0000d3a4 	.word	0x0000d3a4
    2208:	200003a5 	.word	0x200003a5
    220c:	200003a4 	.word	0x200003a4

00002210 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    2210:	b5f0      	push	{r4, r5, r6, r7, lr}
    2212:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    2214:	2201      	movs	r2, #1
    2216:	230f      	movs	r3, #15
    2218:	446b      	add	r3, sp
    221a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    221c:	2800      	cmp	r0, #0
    221e:	d061      	beq.n	22e4 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    2220:	6802      	ldr	r2, [r0, #0]
    2222:	4b32      	ldr	r3, [pc, #200]	; (22ec <m2m_wifi_init+0xdc>)
    2224:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    2226:	2200      	movs	r2, #0
    2228:	4b31      	ldr	r3, [pc, #196]	; (22f0 <m2m_wifi_init+0xe0>)
    222a:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    222c:	200f      	movs	r0, #15
    222e:	4468      	add	r0, sp
    2230:	4b30      	ldr	r3, [pc, #192]	; (22f4 <m2m_wifi_init+0xe4>)
    2232:	4798      	blx	r3
    2234:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    2236:	d002      	beq.n	223e <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    2238:	0020      	movs	r0, r4
    223a:	b00f      	add	sp, #60	; 0x3c
    223c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    223e:	2000      	movs	r0, #0
    2240:	4b2d      	ldr	r3, [pc, #180]	; (22f8 <m2m_wifi_init+0xe8>)
    2242:	4798      	blx	r3
    2244:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    2246:	d149      	bne.n	22dc <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    2248:	492c      	ldr	r1, [pc, #176]	; (22fc <m2m_wifi_init+0xec>)
    224a:	2001      	movs	r0, #1
    224c:	4b2c      	ldr	r3, [pc, #176]	; (2300 <m2m_wifi_init+0xf0>)
    224e:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    2250:	ae04      	add	r6, sp, #16
    2252:	0030      	movs	r0, r6
    2254:	4b2b      	ldr	r3, [pc, #172]	; (2304 <m2m_wifi_init+0xf4>)
    2256:	4798      	blx	r3
    2258:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    225a:	482b      	ldr	r0, [pc, #172]	; (2308 <m2m_wifi_init+0xf8>)
    225c:	4d2b      	ldr	r5, [pc, #172]	; (230c <m2m_wifi_init+0xfc>)
    225e:	47a8      	blx	r5
    2260:	79b3      	ldrb	r3, [r6, #6]
    2262:	7972      	ldrb	r2, [r6, #5]
    2264:	7931      	ldrb	r1, [r6, #4]
    2266:	8c30      	ldrh	r0, [r6, #32]
    2268:	9000      	str	r0, [sp, #0]
    226a:	4829      	ldr	r0, [pc, #164]	; (2310 <m2m_wifi_init+0x100>)
    226c:	47a8      	blx	r5
    226e:	200d      	movs	r0, #13
    2270:	4f28      	ldr	r7, [pc, #160]	; (2314 <m2m_wifi_init+0x104>)
    2272:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    2274:	4824      	ldr	r0, [pc, #144]	; (2308 <m2m_wifi_init+0xf8>)
    2276:	47a8      	blx	r5
    2278:	2226      	movs	r2, #38	; 0x26
    227a:	446a      	add	r2, sp
    227c:	211a      	movs	r1, #26
    227e:	4469      	add	r1, sp
    2280:	4825      	ldr	r0, [pc, #148]	; (2318 <m2m_wifi_init+0x108>)
    2282:	47a8      	blx	r5
    2284:	200d      	movs	r0, #13
    2286:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    2288:	481f      	ldr	r0, [pc, #124]	; (2308 <m2m_wifi_init+0xf8>)
    228a:	47a8      	blx	r5
    228c:	7a73      	ldrb	r3, [r6, #9]
    228e:	7a32      	ldrb	r2, [r6, #8]
    2290:	79f1      	ldrb	r1, [r6, #7]
    2292:	4822      	ldr	r0, [pc, #136]	; (231c <m2m_wifi_init+0x10c>)
    2294:	47a8      	blx	r5
    2296:	200d      	movs	r0, #13
    2298:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    229a:	481b      	ldr	r0, [pc, #108]	; (2308 <m2m_wifi_init+0xf8>)
    229c:	47a8      	blx	r5
    229e:	2304      	movs	r3, #4
    22a0:	2205      	movs	r2, #5
    22a2:	2113      	movs	r1, #19
    22a4:	481e      	ldr	r0, [pc, #120]	; (2320 <m2m_wifi_init+0x110>)
    22a6:	47a8      	blx	r5
    22a8:	200d      	movs	r0, #13
    22aa:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    22ac:	4816      	ldr	r0, [pc, #88]	; (2308 <m2m_wifi_init+0xf8>)
    22ae:	47a8      	blx	r5
    22b0:	4a1c      	ldr	r2, [pc, #112]	; (2324 <m2m_wifi_init+0x114>)
    22b2:	491d      	ldr	r1, [pc, #116]	; (2328 <m2m_wifi_init+0x118>)
    22b4:	481d      	ldr	r0, [pc, #116]	; (232c <m2m_wifi_init+0x11c>)
    22b6:	47a8      	blx	r5
    22b8:	200d      	movs	r0, #13
    22ba:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    22bc:	0023      	movs	r3, r4
    22be:	330d      	adds	r3, #13
    22c0:	d1ba      	bne.n	2238 <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    22c2:	22e8      	movs	r2, #232	; 0xe8
    22c4:	32ff      	adds	r2, #255	; 0xff
    22c6:	491a      	ldr	r1, [pc, #104]	; (2330 <m2m_wifi_init+0x120>)
    22c8:	481a      	ldr	r0, [pc, #104]	; (2334 <m2m_wifi_init+0x124>)
    22ca:	4b10      	ldr	r3, [pc, #64]	; (230c <m2m_wifi_init+0xfc>)
    22cc:	4798      	blx	r3
    22ce:	481a      	ldr	r0, [pc, #104]	; (2338 <m2m_wifi_init+0x128>)
    22d0:	4b1a      	ldr	r3, [pc, #104]	; (233c <m2m_wifi_init+0x12c>)
    22d2:	4798      	blx	r3
    22d4:	200d      	movs	r0, #13
    22d6:	4b0f      	ldr	r3, [pc, #60]	; (2314 <m2m_wifi_init+0x104>)
    22d8:	4798      	blx	r3
    22da:	e7ad      	b.n	2238 <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    22dc:	2000      	movs	r0, #0
    22de:	4b18      	ldr	r3, [pc, #96]	; (2340 <m2m_wifi_init+0x130>)
    22e0:	4798      	blx	r3
    22e2:	e7a9      	b.n	2238 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    22e4:	240c      	movs	r4, #12
    22e6:	4264      	negs	r4, r4
    22e8:	e7a6      	b.n	2238 <m2m_wifi_init+0x28>
    22ea:	46c0      	nop			; (mov r8, r8)
    22ec:	200003a0 	.word	0x200003a0
    22f0:	200003a5 	.word	0x200003a5
    22f4:	00002cb1 	.word	0x00002cb1
    22f8:	00001f2d 	.word	0x00001f2d
    22fc:	00001f65 	.word	0x00001f65
    2300:	00001ea9 	.word	0x00001ea9
    2304:	00002bcd 	.word	0x00002bcd
    2308:	0000d33c 	.word	0x0000d33c
    230c:	0000b9b5 	.word	0x0000b9b5
    2310:	0000d480 	.word	0x0000d480
    2314:	0000b9e9 	.word	0x0000b9e9
    2318:	0000d4a8 	.word	0x0000d4a8
    231c:	0000d4c4 	.word	0x0000d4c4
    2320:	0000d4e8 	.word	0x0000d4e8
    2324:	0000d500 	.word	0x0000d500
    2328:	0000d50c 	.word	0x0000d50c
    232c:	0000d518 	.word	0x0000d518
    2330:	0000d380 	.word	0x0000d380
    2334:	0000d00c 	.word	0x0000d00c
    2338:	0000d530 	.word	0x0000d530
    233c:	0000bad1 	.word	0x0000bad1
    2340:	00002d85 	.word	0x00002d85

00002344 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    2344:	b510      	push	{r4, lr}
	return hif_handle_isr();
    2346:	4b01      	ldr	r3, [pc, #4]	; (234c <m2m_wifi_handle_events+0x8>)
    2348:	4798      	blx	r3
}
    234a:	bd10      	pop	{r4, pc}
    234c:	000019d9 	.word	0x000019d9

00002350 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    2350:	b5f0      	push	{r4, r5, r6, r7, lr}
    2352:	46ce      	mov	lr, r9
    2354:	4647      	mov	r7, r8
    2356:	b580      	push	{r7, lr}
    2358:	b0a3      	sub	sp, #140	; 0x8c
    235a:	9005      	str	r0, [sp, #20]
    235c:	000c      	movs	r4, r1
    235e:	0015      	movs	r5, r2
    2360:	001f      	movs	r7, r3
    2362:	ab2a      	add	r3, sp, #168	; 0xa8
    2364:	881b      	ldrh	r3, [r3, #0]
    2366:	4699      	mov	r9, r3
    2368:	ab2b      	add	r3, sp, #172	; 0xac
    236a:	781b      	ldrb	r3, [r3, #0]
    236c:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    236e:	2a01      	cmp	r2, #1
    2370:	d003      	beq.n	237a <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    2372:	2f00      	cmp	r7, #0
    2374:	d040      	beq.n	23f8 <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2376:	2a02      	cmp	r2, #2
    2378:	d04c      	beq.n	2414 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    237a:	1e63      	subs	r3, r4, #1
    237c:	2b1f      	cmp	r3, #31
    237e:	d900      	bls.n	2382 <m2m_wifi_connect_sc+0x32>
    2380:	e078      	b.n	2474 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    2382:	464b      	mov	r3, r9
    2384:	3b01      	subs	r3, #1
    2386:	b29b      	uxth	r3, r3
    2388:	2b0d      	cmp	r3, #13
    238a:	d903      	bls.n	2394 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    238c:	464b      	mov	r3, r9
    238e:	2bff      	cmp	r3, #255	; 0xff
    2390:	d000      	beq.n	2394 <m2m_wifi_connect_sc+0x44>
    2392:	e07e      	b.n	2492 <m2m_wifi_connect_sc+0x142>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    2394:	ae07      	add	r6, sp, #28
    2396:	0022      	movs	r2, r4
    2398:	9905      	ldr	r1, [sp, #20]
    239a:	205a      	movs	r0, #90	; 0x5a
    239c:	ab02      	add	r3, sp, #8
    239e:	469c      	mov	ip, r3
    23a0:	4460      	add	r0, ip
    23a2:	4b79      	ldr	r3, [pc, #484]	; (2588 <m2m_wifi_connect_sc+0x238>)
    23a4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    23a6:	1934      	adds	r4, r6, r4
    23a8:	3446      	adds	r4, #70	; 0x46
    23aa:	2300      	movs	r3, #0
    23ac:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    23ae:	3344      	adds	r3, #68	; 0x44
    23b0:	464a      	mov	r2, r9
    23b2:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    23b4:	4643      	mov	r3, r8
    23b6:	1e5a      	subs	r2, r3, #1
    23b8:	4193      	sbcs	r3, r2
    23ba:	2267      	movs	r2, #103	; 0x67
    23bc:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    23be:	2341      	movs	r3, #65	; 0x41
    23c0:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    23c2:	2d03      	cmp	r5, #3
    23c4:	d100      	bne.n	23c8 <m2m_wifi_connect_sc+0x78>
    23c6:	e072      	b.n	24ae <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    23c8:	2d02      	cmp	r5, #2
    23ca:	d100      	bne.n	23ce <m2m_wifi_connect_sc+0x7e>
    23cc:	e0ac      	b.n	2528 <m2m_wifi_connect_sc+0x1d8>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    23ce:	2d04      	cmp	r5, #4
    23d0:	d100      	bne.n	23d4 <m2m_wifi_connect_sc+0x84>
    23d2:	e0c4      	b.n	255e <m2m_wifi_connect_sc+0x20e>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    23d4:	2d01      	cmp	r5, #1
    23d6:	d000      	beq.n	23da <m2m_wifi_connect_sc+0x8a>
    23d8:	e0c7      	b.n	256a <m2m_wifi_connect_sc+0x21a>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    23da:	2300      	movs	r3, #0
    23dc:	9302      	str	r3, [sp, #8]
    23de:	9301      	str	r3, [sp, #4]
    23e0:	9300      	str	r3, [sp, #0]
    23e2:	336c      	adds	r3, #108	; 0x6c
    23e4:	aa07      	add	r2, sp, #28
    23e6:	2128      	movs	r1, #40	; 0x28
    23e8:	2001      	movs	r0, #1
    23ea:	4c68      	ldr	r4, [pc, #416]	; (258c <m2m_wifi_connect_sc+0x23c>)
    23ec:	47a0      	blx	r4

ERR1:
	return ret;
}
    23ee:	b023      	add	sp, #140	; 0x8c
    23f0:	bc0c      	pop	{r2, r3}
    23f2:	4690      	mov	r8, r2
    23f4:	4699      	mov	r9, r3
    23f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    23f8:	4a65      	ldr	r2, [pc, #404]	; (2590 <m2m_wifi_connect_sc+0x240>)
    23fa:	4966      	ldr	r1, [pc, #408]	; (2594 <m2m_wifi_connect_sc+0x244>)
    23fc:	4866      	ldr	r0, [pc, #408]	; (2598 <m2m_wifi_connect_sc+0x248>)
    23fe:	4b67      	ldr	r3, [pc, #412]	; (259c <m2m_wifi_connect_sc+0x24c>)
    2400:	4798      	blx	r3
    2402:	4867      	ldr	r0, [pc, #412]	; (25a0 <m2m_wifi_connect_sc+0x250>)
    2404:	4b67      	ldr	r3, [pc, #412]	; (25a4 <m2m_wifi_connect_sc+0x254>)
    2406:	4798      	blx	r3
    2408:	200d      	movs	r0, #13
    240a:	4b67      	ldr	r3, [pc, #412]	; (25a8 <m2m_wifi_connect_sc+0x258>)
    240c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    240e:	200c      	movs	r0, #12
    2410:	4240      	negs	r0, r0
			goto ERR1;
    2412:	e7ec      	b.n	23ee <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    2414:	0038      	movs	r0, r7
    2416:	4b65      	ldr	r3, [pc, #404]	; (25ac <m2m_wifi_connect_sc+0x25c>)
    2418:	4798      	blx	r3
    241a:	2840      	cmp	r0, #64	; 0x40
    241c:	d1ad      	bne.n	237a <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    241e:	783b      	ldrb	r3, [r7, #0]
    2420:	001a      	movs	r2, r3
    2422:	3a30      	subs	r2, #48	; 0x30
    2424:	2a36      	cmp	r2, #54	; 0x36
    2426:	d817      	bhi.n	2458 <m2m_wifi_connect_sc+0x108>
    2428:	3a0a      	subs	r2, #10
    242a:	2a06      	cmp	r2, #6
    242c:	d914      	bls.n	2458 <m2m_wifi_connect_sc+0x108>
    242e:	3b47      	subs	r3, #71	; 0x47
    2430:	2b19      	cmp	r3, #25
    2432:	d911      	bls.n	2458 <m2m_wifi_connect_sc+0x108>
    2434:	1c7a      	adds	r2, r7, #1
    2436:	0038      	movs	r0, r7
    2438:	3040      	adds	r0, #64	; 0x40
    243a:	7813      	ldrb	r3, [r2, #0]
    243c:	0019      	movs	r1, r3
    243e:	3930      	subs	r1, #48	; 0x30
    2440:	2936      	cmp	r1, #54	; 0x36
    2442:	d809      	bhi.n	2458 <m2m_wifi_connect_sc+0x108>
    2444:	390a      	subs	r1, #10
    2446:	2906      	cmp	r1, #6
    2448:	d906      	bls.n	2458 <m2m_wifi_connect_sc+0x108>
    244a:	3b47      	subs	r3, #71	; 0x47
    244c:	2b19      	cmp	r3, #25
    244e:	d903      	bls.n	2458 <m2m_wifi_connect_sc+0x108>
    2450:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    2452:	4282      	cmp	r2, r0
    2454:	d1f1      	bne.n	243a <m2m_wifi_connect_sc+0xea>
    2456:	e790      	b.n	237a <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    2458:	4a55      	ldr	r2, [pc, #340]	; (25b0 <m2m_wifi_connect_sc+0x260>)
    245a:	494e      	ldr	r1, [pc, #312]	; (2594 <m2m_wifi_connect_sc+0x244>)
    245c:	484e      	ldr	r0, [pc, #312]	; (2598 <m2m_wifi_connect_sc+0x248>)
    245e:	4b4f      	ldr	r3, [pc, #316]	; (259c <m2m_wifi_connect_sc+0x24c>)
    2460:	4798      	blx	r3
    2462:	4854      	ldr	r0, [pc, #336]	; (25b4 <m2m_wifi_connect_sc+0x264>)
    2464:	4b4f      	ldr	r3, [pc, #316]	; (25a4 <m2m_wifi_connect_sc+0x254>)
    2466:	4798      	blx	r3
    2468:	200d      	movs	r0, #13
    246a:	4b4f      	ldr	r3, [pc, #316]	; (25a8 <m2m_wifi_connect_sc+0x258>)
    246c:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    246e:	200c      	movs	r0, #12
    2470:	4240      	negs	r0, r0
					goto ERR1;
    2472:	e7bc      	b.n	23ee <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    2474:	228c      	movs	r2, #140	; 0x8c
    2476:	0092      	lsls	r2, r2, #2
    2478:	4946      	ldr	r1, [pc, #280]	; (2594 <m2m_wifi_connect_sc+0x244>)
    247a:	4847      	ldr	r0, [pc, #284]	; (2598 <m2m_wifi_connect_sc+0x248>)
    247c:	4b47      	ldr	r3, [pc, #284]	; (259c <m2m_wifi_connect_sc+0x24c>)
    247e:	4798      	blx	r3
    2480:	484d      	ldr	r0, [pc, #308]	; (25b8 <m2m_wifi_connect_sc+0x268>)
    2482:	4b48      	ldr	r3, [pc, #288]	; (25a4 <m2m_wifi_connect_sc+0x254>)
    2484:	4798      	blx	r3
    2486:	200d      	movs	r0, #13
    2488:	4b47      	ldr	r3, [pc, #284]	; (25a8 <m2m_wifi_connect_sc+0x258>)
    248a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    248c:	200c      	movs	r0, #12
    248e:	4240      	negs	r0, r0
		goto ERR1;
    2490:	e7ad      	b.n	23ee <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    2492:	4a4a      	ldr	r2, [pc, #296]	; (25bc <m2m_wifi_connect_sc+0x26c>)
    2494:	493f      	ldr	r1, [pc, #252]	; (2594 <m2m_wifi_connect_sc+0x244>)
    2496:	4840      	ldr	r0, [pc, #256]	; (2598 <m2m_wifi_connect_sc+0x248>)
    2498:	4b40      	ldr	r3, [pc, #256]	; (259c <m2m_wifi_connect_sc+0x24c>)
    249a:	4798      	blx	r3
    249c:	4848      	ldr	r0, [pc, #288]	; (25c0 <m2m_wifi_connect_sc+0x270>)
    249e:	4b41      	ldr	r3, [pc, #260]	; (25a4 <m2m_wifi_connect_sc+0x254>)
    24a0:	4798      	blx	r3
    24a2:	200d      	movs	r0, #13
    24a4:	4b40      	ldr	r3, [pc, #256]	; (25a8 <m2m_wifi_connect_sc+0x258>)
    24a6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    24a8:	200c      	movs	r0, #12
    24aa:	4240      	negs	r0, r0
			goto ERR1;
    24ac:	e79f      	b.n	23ee <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    24ae:	783b      	ldrb	r3, [r7, #0]
    24b0:	3b01      	subs	r3, #1
    24b2:	b2db      	uxtb	r3, r3
    24b4:	aa07      	add	r2, sp, #28
    24b6:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    24b8:	2b03      	cmp	r3, #3
    24ba:	d817      	bhi.n	24ec <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    24bc:	787a      	ldrb	r2, [r7, #1]
    24be:	1e51      	subs	r1, r2, #1
    24c0:	ab07      	add	r3, sp, #28
    24c2:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    24c4:	2310      	movs	r3, #16
    24c6:	0011      	movs	r1, r2
    24c8:	4399      	bics	r1, r3
    24ca:	290b      	cmp	r1, #11
    24cc:	d01e      	beq.n	250c <m2m_wifi_connect_sc+0x1bc>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    24ce:	4a3d      	ldr	r2, [pc, #244]	; (25c4 <m2m_wifi_connect_sc+0x274>)
    24d0:	4930      	ldr	r1, [pc, #192]	; (2594 <m2m_wifi_connect_sc+0x244>)
    24d2:	4831      	ldr	r0, [pc, #196]	; (2598 <m2m_wifi_connect_sc+0x248>)
    24d4:	4c31      	ldr	r4, [pc, #196]	; (259c <m2m_wifi_connect_sc+0x24c>)
    24d6:	47a0      	blx	r4
    24d8:	ab07      	add	r3, sp, #28
    24da:	7859      	ldrb	r1, [r3, #1]
    24dc:	483a      	ldr	r0, [pc, #232]	; (25c8 <m2m_wifi_connect_sc+0x278>)
    24de:	47a0      	blx	r4
    24e0:	200d      	movs	r0, #13
    24e2:	4b31      	ldr	r3, [pc, #196]	; (25a8 <m2m_wifi_connect_sc+0x258>)
    24e4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    24e6:	200c      	movs	r0, #12
    24e8:	4240      	negs	r0, r0
			goto ERR1;
    24ea:	e780      	b.n	23ee <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    24ec:	2294      	movs	r2, #148	; 0x94
    24ee:	0092      	lsls	r2, r2, #2
    24f0:	4928      	ldr	r1, [pc, #160]	; (2594 <m2m_wifi_connect_sc+0x244>)
    24f2:	4829      	ldr	r0, [pc, #164]	; (2598 <m2m_wifi_connect_sc+0x248>)
    24f4:	4c29      	ldr	r4, [pc, #164]	; (259c <m2m_wifi_connect_sc+0x24c>)
    24f6:	47a0      	blx	r4
    24f8:	ab07      	add	r3, sp, #28
    24fa:	7819      	ldrb	r1, [r3, #0]
    24fc:	4833      	ldr	r0, [pc, #204]	; (25cc <m2m_wifi_connect_sc+0x27c>)
    24fe:	47a0      	blx	r4
    2500:	200d      	movs	r0, #13
    2502:	4b29      	ldr	r3, [pc, #164]	; (25a8 <m2m_wifi_connect_sc+0x258>)
    2504:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2506:	200c      	movs	r0, #12
    2508:	4240      	negs	r0, r0
			goto ERR1;
    250a:	e770      	b.n	23ee <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    250c:	1cb9      	adds	r1, r7, #2
    250e:	2016      	movs	r0, #22
    2510:	ab02      	add	r3, sp, #8
    2512:	469c      	mov	ip, r3
    2514:	4460      	add	r0, ip
    2516:	4b1c      	ldr	r3, [pc, #112]	; (2588 <m2m_wifi_connect_sc+0x238>)
    2518:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    251a:	787b      	ldrb	r3, [r7, #1]
    251c:	aa07      	add	r2, sp, #28
    251e:	4694      	mov	ip, r2
    2520:	4463      	add	r3, ip
    2522:	2200      	movs	r2, #0
    2524:	709a      	strb	r2, [r3, #2]
    2526:	e758      	b.n	23da <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    2528:	0038      	movs	r0, r7
    252a:	4b20      	ldr	r3, [pc, #128]	; (25ac <m2m_wifi_connect_sc+0x25c>)
    252c:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    252e:	1e43      	subs	r3, r0, #1
    2530:	b29b      	uxth	r3, r3
    2532:	2b3f      	cmp	r3, #63	; 0x3f
    2534:	d805      	bhi.n	2542 <m2m_wifi_connect_sc+0x1f2>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    2536:	1c42      	adds	r2, r0, #1
    2538:	0039      	movs	r1, r7
    253a:	a807      	add	r0, sp, #28
    253c:	4b12      	ldr	r3, [pc, #72]	; (2588 <m2m_wifi_connect_sc+0x238>)
    253e:	4798      	blx	r3
    2540:	e74b      	b.n	23da <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    2542:	4a23      	ldr	r2, [pc, #140]	; (25d0 <m2m_wifi_connect_sc+0x280>)
    2544:	4913      	ldr	r1, [pc, #76]	; (2594 <m2m_wifi_connect_sc+0x244>)
    2546:	4814      	ldr	r0, [pc, #80]	; (2598 <m2m_wifi_connect_sc+0x248>)
    2548:	4b14      	ldr	r3, [pc, #80]	; (259c <m2m_wifi_connect_sc+0x24c>)
    254a:	4798      	blx	r3
    254c:	4821      	ldr	r0, [pc, #132]	; (25d4 <m2m_wifi_connect_sc+0x284>)
    254e:	4b15      	ldr	r3, [pc, #84]	; (25a4 <m2m_wifi_connect_sc+0x254>)
    2550:	4798      	blx	r3
    2552:	200d      	movs	r0, #13
    2554:	4b14      	ldr	r3, [pc, #80]	; (25a8 <m2m_wifi_connect_sc+0x258>)
    2556:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    2558:	200c      	movs	r0, #12
    255a:	4240      	negs	r0, r0
			goto ERR1;
    255c:	e747      	b.n	23ee <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    255e:	223e      	movs	r2, #62	; 0x3e
    2560:	0039      	movs	r1, r7
    2562:	a807      	add	r0, sp, #28
    2564:	4b08      	ldr	r3, [pc, #32]	; (2588 <m2m_wifi_connect_sc+0x238>)
    2566:	4798      	blx	r3
    2568:	e737      	b.n	23da <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    256a:	4a1b      	ldr	r2, [pc, #108]	; (25d8 <m2m_wifi_connect_sc+0x288>)
    256c:	4909      	ldr	r1, [pc, #36]	; (2594 <m2m_wifi_connect_sc+0x244>)
    256e:	480a      	ldr	r0, [pc, #40]	; (2598 <m2m_wifi_connect_sc+0x248>)
    2570:	4b0a      	ldr	r3, [pc, #40]	; (259c <m2m_wifi_connect_sc+0x24c>)
    2572:	4798      	blx	r3
    2574:	4819      	ldr	r0, [pc, #100]	; (25dc <m2m_wifi_connect_sc+0x28c>)
    2576:	4b0b      	ldr	r3, [pc, #44]	; (25a4 <m2m_wifi_connect_sc+0x254>)
    2578:	4798      	blx	r3
    257a:	200d      	movs	r0, #13
    257c:	4b0a      	ldr	r3, [pc, #40]	; (25a8 <m2m_wifi_connect_sc+0x258>)
    257e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    2580:	200c      	movs	r0, #12
    2582:	4240      	negs	r0, r0
		goto ERR1;
    2584:	e733      	b.n	23ee <m2m_wifi_connect_sc+0x9e>
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	00001681 	.word	0x00001681
    258c:	000017a9 	.word	0x000017a9
    2590:	0000021a 	.word	0x0000021a
    2594:	0000d390 	.word	0x0000d390
    2598:	0000d00c 	.word	0x0000d00c
    259c:	0000b9b5 	.word	0x0000b9b5
    25a0:	0000d3d8 	.word	0x0000d3d8
    25a4:	0000bad1 	.word	0x0000bad1
    25a8:	0000b9e9 	.word	0x0000b9e9
    25ac:	000016a5 	.word	0x000016a5
    25b0:	00000226 	.word	0x00000226
    25b4:	0000d3ec 	.word	0x0000d3ec
    25b8:	0000d3f8 	.word	0x0000d3f8
    25bc:	00000239 	.word	0x00000239
    25c0:	0000d40c 	.word	0x0000d40c
    25c4:	00000257 	.word	0x00000257
    25c8:	0000d434 	.word	0x0000d434
    25cc:	0000d418 	.word	0x0000d418
    25d0:	00000266 	.word	0x00000266
    25d4:	0000d450 	.word	0x0000d450
    25d8:	00000276 	.word	0x00000276
    25dc:	0000d46c 	.word	0x0000d46c

000025e0 <m2m_wifi_connect>:
{
    25e0:	b530      	push	{r4, r5, lr}
    25e2:	b083      	sub	sp, #12
    25e4:	ac06      	add	r4, sp, #24
    25e6:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    25e8:	2500      	movs	r5, #0
    25ea:	9501      	str	r5, [sp, #4]
    25ec:	9400      	str	r4, [sp, #0]
    25ee:	4c02      	ldr	r4, [pc, #8]	; (25f8 <m2m_wifi_connect+0x18>)
    25f0:	47a0      	blx	r4
}
    25f2:	b003      	add	sp, #12
    25f4:	bd30      	pop	{r4, r5, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	00002351 	.word	0x00002351

000025fc <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    25fc:	2000      	movs	r0, #0
    25fe:	4770      	bx	lr

00002600 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    2600:	b5f0      	push	{r4, r5, r6, r7, lr}
    2602:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    2604:	2580      	movs	r5, #128	; 0x80
    2606:	006d      	lsls	r5, r5, #1
    2608:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    260a:	24a5      	movs	r4, #165	; 0xa5
    260c:	0164      	lsls	r4, r4, #5
    260e:	4f08      	ldr	r7, [pc, #32]	; (2630 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    2610:	4e08      	ldr	r6, [pc, #32]	; (2634 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    2612:	0029      	movs	r1, r5
    2614:	0020      	movs	r0, r4
    2616:	47b8      	blx	r7
			uint32 reg = 0;
    2618:	2300      	movs	r3, #0
    261a:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    261c:	a901      	add	r1, sp, #4
    261e:	0020      	movs	r0, r4
    2620:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    2622:	2800      	cmp	r0, #0
    2624:	d1f5      	bne.n	2612 <chip_apply_conf+0x12>
				if(reg == val32)
    2626:	9b01      	ldr	r3, [sp, #4]
    2628:	429d      	cmp	r5, r3
    262a:	d1f2      	bne.n	2612 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    262c:	b003      	add	sp, #12
    262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2630:	00002af1 	.word	0x00002af1
    2634:	00002ae5 	.word	0x00002ae5

00002638 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    2638:	b500      	push	{lr}
    263a:	b083      	sub	sp, #12
	uint32 reg = 0;
    263c:	2300      	movs	r3, #0
    263e:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    2640:	a901      	add	r1, sp, #4
    2642:	4811      	ldr	r0, [pc, #68]	; (2688 <enable_interrupts+0x50>)
    2644:	4b11      	ldr	r3, [pc, #68]	; (268c <enable_interrupts+0x54>)
    2646:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2648:	2800      	cmp	r0, #0
    264a:	d001      	beq.n	2650 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    264c:	b003      	add	sp, #12
    264e:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    2650:	2180      	movs	r1, #128	; 0x80
    2652:	0049      	lsls	r1, r1, #1
    2654:	9b01      	ldr	r3, [sp, #4]
    2656:	4319      	orrs	r1, r3
    2658:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    265a:	480b      	ldr	r0, [pc, #44]	; (2688 <enable_interrupts+0x50>)
    265c:	4b0c      	ldr	r3, [pc, #48]	; (2690 <enable_interrupts+0x58>)
    265e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    2660:	2800      	cmp	r0, #0
    2662:	d1f3      	bne.n	264c <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    2664:	a901      	add	r1, sp, #4
    2666:	20d0      	movs	r0, #208	; 0xd0
    2668:	0140      	lsls	r0, r0, #5
    266a:	4b08      	ldr	r3, [pc, #32]	; (268c <enable_interrupts+0x54>)
    266c:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    266e:	2800      	cmp	r0, #0
    2670:	d1ec      	bne.n	264c <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    2672:	2180      	movs	r1, #128	; 0x80
    2674:	0249      	lsls	r1, r1, #9
    2676:	9b01      	ldr	r3, [sp, #4]
    2678:	4319      	orrs	r1, r3
    267a:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    267c:	20d0      	movs	r0, #208	; 0xd0
    267e:	0140      	lsls	r0, r0, #5
    2680:	4b03      	ldr	r3, [pc, #12]	; (2690 <enable_interrupts+0x58>)
    2682:	4798      	blx	r3
    2684:	e7e2      	b.n	264c <enable_interrupts+0x14>
    2686:	46c0      	nop			; (mov r8, r8)
    2688:	00001408 	.word	0x00001408
    268c:	00002ae5 	.word	0x00002ae5
    2690:	00002af1 	.word	0x00002af1

00002694 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    2694:	b510      	push	{r4, lr}
    2696:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    2698:	4b28      	ldr	r3, [pc, #160]	; (273c <nmi_get_chipid+0xa8>)
    269a:	681c      	ldr	r4, [r3, #0]
    269c:	2c00      	cmp	r4, #0
    269e:	d004      	beq.n	26aa <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    26a0:	4b26      	ldr	r3, [pc, #152]	; (273c <nmi_get_chipid+0xa8>)
    26a2:	681c      	ldr	r4, [r3, #0]
}
    26a4:	0020      	movs	r0, r4
    26a6:	b002      	add	sp, #8
    26a8:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    26aa:	0019      	movs	r1, r3
    26ac:	2080      	movs	r0, #128	; 0x80
    26ae:	0140      	lsls	r0, r0, #5
    26b0:	4b23      	ldr	r3, [pc, #140]	; (2740 <nmi_get_chipid+0xac>)
    26b2:	4798      	blx	r3
    26b4:	2800      	cmp	r0, #0
    26b6:	d003      	beq.n	26c0 <nmi_get_chipid+0x2c>
			chipid = 0;
    26b8:	2200      	movs	r2, #0
    26ba:	4b20      	ldr	r3, [pc, #128]	; (273c <nmi_get_chipid+0xa8>)
    26bc:	601a      	str	r2, [r3, #0]
			return 0;
    26be:	e7f1      	b.n	26a4 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    26c0:	a901      	add	r1, sp, #4
    26c2:	4820      	ldr	r0, [pc, #128]	; (2744 <nmi_get_chipid+0xb0>)
    26c4:	4b1e      	ldr	r3, [pc, #120]	; (2740 <nmi_get_chipid+0xac>)
    26c6:	4798      	blx	r3
    26c8:	2800      	cmp	r0, #0
    26ca:	d003      	beq.n	26d4 <nmi_get_chipid+0x40>
			chipid = 0;
    26cc:	2200      	movs	r2, #0
    26ce:	4b1b      	ldr	r3, [pc, #108]	; (273c <nmi_get_chipid+0xa8>)
    26d0:	601a      	str	r2, [r3, #0]
			return 0;
    26d2:	e7e7      	b.n	26a4 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    26d4:	4b19      	ldr	r3, [pc, #100]	; (273c <nmi_get_chipid+0xa8>)
    26d6:	681b      	ldr	r3, [r3, #0]
    26d8:	4a1b      	ldr	r2, [pc, #108]	; (2748 <nmi_get_chipid+0xb4>)
    26da:	4293      	cmp	r3, r2
    26dc:	d00e      	beq.n	26fc <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    26de:	4a1b      	ldr	r2, [pc, #108]	; (274c <nmi_get_chipid+0xb8>)
    26e0:	4293      	cmp	r3, r2
    26e2:	d012      	beq.n	270a <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    26e4:	4a1a      	ldr	r2, [pc, #104]	; (2750 <nmi_get_chipid+0xbc>)
    26e6:	4293      	cmp	r3, r2
    26e8:	d01c      	beq.n	2724 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    26ea:	4914      	ldr	r1, [pc, #80]	; (273c <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    26ec:	4a19      	ldr	r2, [pc, #100]	; (2754 <nmi_get_chipid+0xc0>)
    26ee:	680b      	ldr	r3, [r1, #0]
    26f0:	401a      	ands	r2, r3
		chipid |= 0x050000;
    26f2:	23a0      	movs	r3, #160	; 0xa0
    26f4:	02db      	lsls	r3, r3, #11
    26f6:	4313      	orrs	r3, r2
    26f8:	600b      	str	r3, [r1, #0]
    26fa:	e7d1      	b.n	26a0 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    26fc:	9b01      	ldr	r3, [sp, #4]
    26fe:	2b01      	cmp	r3, #1
    2700:	d0f3      	beq.n	26ea <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    2702:	4a15      	ldr	r2, [pc, #84]	; (2758 <nmi_get_chipid+0xc4>)
    2704:	4b0d      	ldr	r3, [pc, #52]	; (273c <nmi_get_chipid+0xa8>)
    2706:	601a      	str	r2, [r3, #0]
    2708:	e7ef      	b.n	26ea <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    270a:	9b01      	ldr	r3, [sp, #4]
    270c:	2b03      	cmp	r3, #3
    270e:	d0ec      	beq.n	26ea <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    2710:	2b04      	cmp	r3, #4
    2712:	d003      	beq.n	271c <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    2714:	4a11      	ldr	r2, [pc, #68]	; (275c <nmi_get_chipid+0xc8>)
    2716:	4b09      	ldr	r3, [pc, #36]	; (273c <nmi_get_chipid+0xa8>)
    2718:	601a      	str	r2, [r3, #0]
    271a:	e7e6      	b.n	26ea <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    271c:	4a10      	ldr	r2, [pc, #64]	; (2760 <nmi_get_chipid+0xcc>)
    271e:	4b07      	ldr	r3, [pc, #28]	; (273c <nmi_get_chipid+0xa8>)
    2720:	601a      	str	r2, [r3, #0]
    2722:	e7e2      	b.n	26ea <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    2724:	4905      	ldr	r1, [pc, #20]	; (273c <nmi_get_chipid+0xa8>)
    2726:	20ec      	movs	r0, #236	; 0xec
    2728:	0380      	lsls	r0, r0, #14
    272a:	4b05      	ldr	r3, [pc, #20]	; (2740 <nmi_get_chipid+0xac>)
    272c:	4798      	blx	r3
    272e:	2800      	cmp	r0, #0
    2730:	d0db      	beq.n	26ea <nmi_get_chipid+0x56>
			chipid = 0;
    2732:	2200      	movs	r2, #0
    2734:	4b01      	ldr	r3, [pc, #4]	; (273c <nmi_get_chipid+0xa8>)
    2736:	601a      	str	r2, [r3, #0]
			return 0;
    2738:	e7b4      	b.n	26a4 <nmi_get_chipid+0x10>
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	200003a8 	.word	0x200003a8
    2740:	00002ae5 	.word	0x00002ae5
    2744:	000013f4 	.word	0x000013f4
    2748:	001002a0 	.word	0x001002a0
    274c:	001002b0 	.word	0x001002b0
    2750:	001000f0 	.word	0x001000f0
    2754:	fff0ffff 	.word	0xfff0ffff
    2758:	001002a1 	.word	0x001002a1
    275c:	001002b2 	.word	0x001002b2
    2760:	001002b1 	.word	0x001002b1

00002764 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    2764:	b530      	push	{r4, r5, lr}
    2766:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    2768:	4c16      	ldr	r4, [pc, #88]	; (27c4 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    276a:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    276c:	a901      	add	r1, sp, #4
    276e:	2010      	movs	r0, #16
    2770:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    2772:	2800      	cmp	r0, #0
    2774:	d11c      	bne.n	27b0 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    2776:	9b01      	ldr	r3, [sp, #4]
    2778:	422b      	tst	r3, r5
    277a:	d1f7      	bne.n	276c <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    277c:	a901      	add	r1, sp, #4
    277e:	3001      	adds	r0, #1
    2780:	4b10      	ldr	r3, [pc, #64]	; (27c4 <chip_sleep+0x60>)
    2782:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    2784:	2800      	cmp	r0, #0
    2786:	d113      	bne.n	27b0 <chip_sleep+0x4c>
	if(reg & NBIT1)
    2788:	9901      	ldr	r1, [sp, #4]
    278a:	078b      	lsls	r3, r1, #30
    278c:	d507      	bpl.n	279e <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    278e:	2302      	movs	r3, #2
    2790:	4399      	bics	r1, r3
    2792:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    2794:	3001      	adds	r0, #1
    2796:	4b0c      	ldr	r3, [pc, #48]	; (27c8 <chip_sleep+0x64>)
    2798:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    279a:	2800      	cmp	r0, #0
    279c:	d108      	bne.n	27b0 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    279e:	a901      	add	r1, sp, #4
    27a0:	200b      	movs	r0, #11
    27a2:	4b08      	ldr	r3, [pc, #32]	; (27c4 <chip_sleep+0x60>)
    27a4:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    27a6:	2800      	cmp	r0, #0
    27a8:	d102      	bne.n	27b0 <chip_sleep+0x4c>
	if(reg & NBIT0)
    27aa:	9901      	ldr	r1, [sp, #4]
    27ac:	07cb      	lsls	r3, r1, #31
    27ae:	d401      	bmi.n	27b4 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    27b0:	b003      	add	sp, #12
    27b2:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    27b4:	2301      	movs	r3, #1
    27b6:	4399      	bics	r1, r3
    27b8:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    27ba:	300b      	adds	r0, #11
    27bc:	4b02      	ldr	r3, [pc, #8]	; (27c8 <chip_sleep+0x64>)
    27be:	4798      	blx	r3
    27c0:	e7f6      	b.n	27b0 <chip_sleep+0x4c>
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	00002ae5 	.word	0x00002ae5
    27c8:	00002af1 	.word	0x00002af1

000027cc <chip_wake>:
sint8 chip_wake(void)
{
    27cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ce:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    27d0:	2300      	movs	r3, #0
    27d2:	9301      	str	r3, [sp, #4]
    27d4:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    27d6:	a901      	add	r1, sp, #4
    27d8:	200b      	movs	r0, #11
    27da:	4b28      	ldr	r3, [pc, #160]	; (287c <chip_wake+0xb0>)
    27dc:	4798      	blx	r3
    27de:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27e0:	d130      	bne.n	2844 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    27e2:	9901      	ldr	r1, [sp, #4]
    27e4:	07cb      	lsls	r3, r1, #31
    27e6:	d406      	bmi.n	27f6 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    27e8:	2301      	movs	r3, #1
    27ea:	4319      	orrs	r1, r3
    27ec:	200b      	movs	r0, #11
    27ee:	4b24      	ldr	r3, [pc, #144]	; (2880 <chip_wake+0xb4>)
    27f0:	4798      	blx	r3
    27f2:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    27f4:	d126      	bne.n	2844 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    27f6:	a901      	add	r1, sp, #4
    27f8:	2001      	movs	r0, #1
    27fa:	4b20      	ldr	r3, [pc, #128]	; (287c <chip_wake+0xb0>)
    27fc:	4798      	blx	r3
    27fe:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    2800:	d120      	bne.n	2844 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    2802:	9901      	ldr	r1, [sp, #4]
    2804:	078b      	lsls	r3, r1, #30
    2806:	d520      	bpl.n	284a <chip_wake+0x7e>
{
    2808:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    280a:	4f1c      	ldr	r7, [pc, #112]	; (287c <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    280c:	4e1d      	ldr	r6, [pc, #116]	; (2884 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    280e:	4669      	mov	r1, sp
    2810:	200f      	movs	r0, #15
    2812:	47b8      	blx	r7
    2814:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    2816:	d120      	bne.n	285a <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    2818:	9b00      	ldr	r3, [sp, #0]
    281a:	075b      	lsls	r3, r3, #29
    281c:	d42b      	bmi.n	2876 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    281e:	2002      	movs	r0, #2
    2820:	47b0      	blx	r6
    2822:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    2824:	2d00      	cmp	r5, #0
    2826:	d1f2      	bne.n	280e <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    2828:	22ad      	movs	r2, #173	; 0xad
    282a:	0052      	lsls	r2, r2, #1
    282c:	4916      	ldr	r1, [pc, #88]	; (2888 <chip_wake+0xbc>)
    282e:	4817      	ldr	r0, [pc, #92]	; (288c <chip_wake+0xc0>)
    2830:	4b17      	ldr	r3, [pc, #92]	; (2890 <chip_wake+0xc4>)
    2832:	4798      	blx	r3
    2834:	4817      	ldr	r0, [pc, #92]	; (2894 <chip_wake+0xc8>)
    2836:	4b18      	ldr	r3, [pc, #96]	; (2898 <chip_wake+0xcc>)
    2838:	4798      	blx	r3
    283a:	200d      	movs	r0, #13
    283c:	4b17      	ldr	r3, [pc, #92]	; (289c <chip_wake+0xd0>)
    283e:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    2840:	2404      	movs	r4, #4
    2842:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    2844:	0020      	movs	r0, r4
    2846:	b003      	add	sp, #12
    2848:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    284a:	2302      	movs	r3, #2
    284c:	4319      	orrs	r1, r3
    284e:	2001      	movs	r0, #1
    2850:	4b0b      	ldr	r3, [pc, #44]	; (2880 <chip_wake+0xb4>)
    2852:	4798      	blx	r3
    2854:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    2856:	d0d7      	beq.n	2808 <chip_wake+0x3c>
    2858:	e7f4      	b.n	2844 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    285a:	22a8      	movs	r2, #168	; 0xa8
    285c:	0052      	lsls	r2, r2, #1
    285e:	490a      	ldr	r1, [pc, #40]	; (2888 <chip_wake+0xbc>)
    2860:	480a      	ldr	r0, [pc, #40]	; (288c <chip_wake+0xc0>)
    2862:	4d0b      	ldr	r5, [pc, #44]	; (2890 <chip_wake+0xc4>)
    2864:	47a8      	blx	r5
    2866:	9a00      	ldr	r2, [sp, #0]
    2868:	0021      	movs	r1, r4
    286a:	480d      	ldr	r0, [pc, #52]	; (28a0 <chip_wake+0xd4>)
    286c:	47a8      	blx	r5
    286e:	200d      	movs	r0, #13
    2870:	4b0a      	ldr	r3, [pc, #40]	; (289c <chip_wake+0xd0>)
    2872:	4798      	blx	r3
			goto _WAKE_EXIT;
    2874:	e7e6      	b.n	2844 <chip_wake+0x78>
	nm_bus_reset();
    2876:	4b0b      	ldr	r3, [pc, #44]	; (28a4 <chip_wake+0xd8>)
    2878:	4798      	blx	r3
    287a:	e7e3      	b.n	2844 <chip_wake+0x78>
    287c:	00002ae5 	.word	0x00002ae5
    2880:	00002af1 	.word	0x00002af1
    2884:	00001309 	.word	0x00001309
    2888:	0000d54c 	.word	0x0000d54c
    288c:	0000d00c 	.word	0x0000d00c
    2890:	0000b9b5 	.word	0x0000b9b5
    2894:	0000d594 	.word	0x0000d594
    2898:	0000bad1 	.word	0x0000bad1
    289c:	0000b9e9 	.word	0x0000b9e9
    28a0:	0000d57c 	.word	0x0000d57c
    28a4:	00002acd 	.word	0x00002acd

000028a8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    28a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28aa:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    28ac:	4d2d      	ldr	r5, [pc, #180]	; (2964 <wait_for_bootrom+0xbc>)
    28ae:	4c2e      	ldr	r4, [pc, #184]	; (2968 <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    28b0:	4e2e      	ldr	r6, [pc, #184]	; (296c <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    28b2:	0028      	movs	r0, r5
    28b4:	47a0      	blx	r4
		if (reg & 0x80000000) {
    28b6:	2800      	cmp	r0, #0
    28b8:	db02      	blt.n	28c0 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    28ba:	2001      	movs	r0, #1
    28bc:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    28be:	e7f8      	b.n	28b2 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    28c0:	482b      	ldr	r0, [pc, #172]	; (2970 <wait_for_bootrom+0xc8>)
    28c2:	4b29      	ldr	r3, [pc, #164]	; (2968 <wait_for_bootrom+0xc0>)
    28c4:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    28c6:	07c3      	lsls	r3, r0, #31
    28c8:	d409      	bmi.n	28de <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    28ca:	4e28      	ldr	r6, [pc, #160]	; (296c <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    28cc:	4c29      	ldr	r4, [pc, #164]	; (2974 <wait_for_bootrom+0xcc>)
    28ce:	4d26      	ldr	r5, [pc, #152]	; (2968 <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    28d0:	2001      	movs	r0, #1
    28d2:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    28d4:	0020      	movs	r0, r4
    28d6:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    28d8:	4b27      	ldr	r3, [pc, #156]	; (2978 <wait_for_bootrom+0xd0>)
    28da:	4298      	cmp	r0, r3
    28dc:	d1f8      	bne.n	28d0 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    28de:	2f02      	cmp	r7, #2
    28e0:	d021      	beq.n	2926 <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    28e2:	2f03      	cmp	r7, #3
    28e4:	d029      	beq.n	293a <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    28e6:	2f04      	cmp	r7, #4
    28e8:	d030      	beq.n	294c <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    28ea:	4924      	ldr	r1, [pc, #144]	; (297c <wait_for_bootrom+0xd4>)
    28ec:	4824      	ldr	r0, [pc, #144]	; (2980 <wait_for_bootrom+0xd8>)
    28ee:	4b25      	ldr	r3, [pc, #148]	; (2984 <wait_for_bootrom+0xdc>)
    28f0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    28f2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    28f4:	4b24      	ldr	r3, [pc, #144]	; (2988 <wait_for_bootrom+0xe0>)
    28f6:	4798      	blx	r3
    28f8:	0500      	lsls	r0, r0, #20
    28fa:	0d00      	lsrs	r0, r0, #20
    28fc:	4b23      	ldr	r3, [pc, #140]	; (298c <wait_for_bootrom+0xe4>)
    28fe:	4298      	cmp	r0, r3
    2900:	d82a      	bhi.n	2958 <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    2902:	0020      	movs	r0, r4
    2904:	4b22      	ldr	r3, [pc, #136]	; (2990 <wait_for_bootrom+0xe8>)
    2906:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    2908:	4822      	ldr	r0, [pc, #136]	; (2994 <wait_for_bootrom+0xec>)
    290a:	4c23      	ldr	r4, [pc, #140]	; (2998 <wait_for_bootrom+0xf0>)
    290c:	47a0      	blx	r4
    290e:	491b      	ldr	r1, [pc, #108]	; (297c <wait_for_bootrom+0xd4>)
    2910:	4822      	ldr	r0, [pc, #136]	; (299c <wait_for_bootrom+0xf4>)
    2912:	47a0      	blx	r4
    2914:	200d      	movs	r0, #13
    2916:	4b22      	ldr	r3, [pc, #136]	; (29a0 <wait_for_bootrom+0xf8>)
    2918:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    291a:	4922      	ldr	r1, [pc, #136]	; (29a4 <wait_for_bootrom+0xfc>)
    291c:	4815      	ldr	r0, [pc, #84]	; (2974 <wait_for_bootrom+0xcc>)
    291e:	4b19      	ldr	r3, [pc, #100]	; (2984 <wait_for_bootrom+0xdc>)
    2920:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    2922:	2000      	movs	r0, #0
    2924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    2926:	4920      	ldr	r1, [pc, #128]	; (29a8 <wait_for_bootrom+0x100>)
    2928:	4820      	ldr	r0, [pc, #128]	; (29ac <wait_for_bootrom+0x104>)
    292a:	4c16      	ldr	r4, [pc, #88]	; (2984 <wait_for_bootrom+0xdc>)
    292c:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    292e:	2180      	movs	r1, #128	; 0x80
    2930:	0349      	lsls	r1, r1, #13
    2932:	4813      	ldr	r0, [pc, #76]	; (2980 <wait_for_bootrom+0xd8>)
    2934:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2936:	2400      	movs	r4, #0
    2938:	e7dc      	b.n	28f4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    293a:	491b      	ldr	r1, [pc, #108]	; (29a8 <wait_for_bootrom+0x100>)
    293c:	481b      	ldr	r0, [pc, #108]	; (29ac <wait_for_bootrom+0x104>)
    293e:	4c11      	ldr	r4, [pc, #68]	; (2984 <wait_for_bootrom+0xdc>)
    2940:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    2942:	2100      	movs	r1, #0
    2944:	480e      	ldr	r0, [pc, #56]	; (2980 <wait_for_bootrom+0xd8>)
    2946:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    2948:	2400      	movs	r4, #0
    294a:	e7d3      	b.n	28f4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    294c:	490b      	ldr	r1, [pc, #44]	; (297c <wait_for_bootrom+0xd4>)
    294e:	480c      	ldr	r0, [pc, #48]	; (2980 <wait_for_bootrom+0xd8>)
    2950:	4b0c      	ldr	r3, [pc, #48]	; (2984 <wait_for_bootrom+0xdc>)
    2952:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    2954:	2480      	movs	r4, #128	; 0x80
    2956:	e7cd      	b.n	28f4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    2958:	2002      	movs	r0, #2
    295a:	4320      	orrs	r0, r4
    295c:	4b0c      	ldr	r3, [pc, #48]	; (2990 <wait_for_bootrom+0xe8>)
    295e:	4798      	blx	r3
    2960:	e7d2      	b.n	2908 <wait_for_bootrom+0x60>
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	00001014 	.word	0x00001014
    2968:	00002ad9 	.word	0x00002ad9
    296c:	00001309 	.word	0x00001309
    2970:	000207bc 	.word	0x000207bc
    2974:	000c000c 	.word	0x000c000c
    2978:	10add09e 	.word	0x10add09e
    297c:	13301354 	.word	0x13301354
    2980:	0000108c 	.word	0x0000108c
    2984:	00002af1 	.word	0x00002af1
    2988:	00002695 	.word	0x00002695
    298c:	0000039f 	.word	0x0000039f
    2990:	00002601 	.word	0x00002601
    2994:	0000d33c 	.word	0x0000d33c
    2998:	0000b9b5 	.word	0x0000b9b5
    299c:	0000d5b0 	.word	0x0000d5b0
    29a0:	0000b9e9 	.word	0x0000b9e9
    29a4:	ef522f61 	.word	0xef522f61
    29a8:	3c1cd57d 	.word	0x3c1cd57d
    29ac:	000207ac 	.word	0x000207ac

000029b0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    29b0:	b570      	push	{r4, r5, r6, lr}
    29b2:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    29b4:	4b15      	ldr	r3, [pc, #84]	; (2a0c <wait_for_firmware_start+0x5c>)
    29b6:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    29b8:	4b15      	ldr	r3, [pc, #84]	; (2a10 <wait_for_firmware_start+0x60>)
    29ba:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    29bc:	3802      	subs	r0, #2
    29be:	2801      	cmp	r0, #1
    29c0:	d911      	bls.n	29e6 <wait_for_firmware_start+0x36>
{
    29c2:	2401      	movs	r4, #1
    29c4:	4264      	negs	r4, r4
    29c6:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    29c8:	4e12      	ldr	r6, [pc, #72]	; (2a14 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    29ca:	4d13      	ldr	r5, [pc, #76]	; (2a18 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    29cc:	9b00      	ldr	r3, [sp, #0]
    29ce:	4298      	cmp	r0, r3
    29d0:	d00e      	beq.n	29f0 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    29d2:	2002      	movs	r0, #2
    29d4:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    29d6:	9801      	ldr	r0, [sp, #4]
    29d8:	47a8      	blx	r5
    29da:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    29dc:	2c00      	cmp	r4, #0
    29de:	d1f5      	bne.n	29cc <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    29e0:	2005      	movs	r0, #5
    29e2:	4240      	negs	r0, r0
    29e4:	e009      	b.n	29fa <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    29e6:	4b0d      	ldr	r3, [pc, #52]	; (2a1c <wait_for_firmware_start+0x6c>)
    29e8:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    29ea:	4b0d      	ldr	r3, [pc, #52]	; (2a20 <wait_for_firmware_start+0x70>)
    29ec:	9300      	str	r3, [sp, #0]
    29ee:	e7e8      	b.n	29c2 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    29f0:	9a00      	ldr	r2, [sp, #0]
    29f2:	4b07      	ldr	r3, [pc, #28]	; (2a10 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    29f4:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    29f6:	429a      	cmp	r2, r3
    29f8:	d001      	beq.n	29fe <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    29fa:	b002      	add	sp, #8
    29fc:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    29fe:	2100      	movs	r1, #0
    2a00:	4802      	ldr	r0, [pc, #8]	; (2a0c <wait_for_firmware_start+0x5c>)
    2a02:	4b08      	ldr	r3, [pc, #32]	; (2a24 <wait_for_firmware_start+0x74>)
    2a04:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    2a06:	2000      	movs	r0, #0
    2a08:	e7f7      	b.n	29fa <wait_for_firmware_start+0x4a>
    2a0a:	46c0      	nop			; (mov r8, r8)
    2a0c:	0000108c 	.word	0x0000108c
    2a10:	02532636 	.word	0x02532636
    2a14:	00001309 	.word	0x00001309
    2a18:	00002ad9 	.word	0x00002ad9
    2a1c:	000207ac 	.word	0x000207ac
    2a20:	d75dc1c3 	.word	0xd75dc1c3
    2a24:	00002af1 	.word	0x00002af1

00002a28 <chip_deinit>:

sint8 chip_deinit(void)
{
    2a28:	b510      	push	{r4, lr}
    2a2a:	b082      	sub	sp, #8
	uint32 reg = 0;
    2a2c:	2300      	movs	r3, #0
    2a2e:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    2a30:	a901      	add	r1, sp, #4
    2a32:	20a0      	movs	r0, #160	; 0xa0
    2a34:	0140      	lsls	r0, r0, #5
    2a36:	4b14      	ldr	r3, [pc, #80]	; (2a88 <chip_deinit+0x60>)
    2a38:	4798      	blx	r3
    2a3a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2a3c:	d115      	bne.n	2a6a <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    2a3e:	4913      	ldr	r1, [pc, #76]	; (2a8c <chip_deinit+0x64>)
    2a40:	9b01      	ldr	r3, [sp, #4]
    2a42:	4019      	ands	r1, r3
    2a44:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    2a46:	20a0      	movs	r0, #160	; 0xa0
    2a48:	0140      	lsls	r0, r0, #5
    2a4a:	4b11      	ldr	r3, [pc, #68]	; (2a90 <chip_deinit+0x68>)
    2a4c:	4798      	blx	r3
    2a4e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    2a50:	d016      	beq.n	2a80 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2a52:	4a10      	ldr	r2, [pc, #64]	; (2a94 <chip_deinit+0x6c>)
    2a54:	4910      	ldr	r1, [pc, #64]	; (2a98 <chip_deinit+0x70>)
    2a56:	4811      	ldr	r0, [pc, #68]	; (2a9c <chip_deinit+0x74>)
    2a58:	4b11      	ldr	r3, [pc, #68]	; (2aa0 <chip_deinit+0x78>)
    2a5a:	4798      	blx	r3
    2a5c:	4811      	ldr	r0, [pc, #68]	; (2aa4 <chip_deinit+0x7c>)
    2a5e:	4b12      	ldr	r3, [pc, #72]	; (2aa8 <chip_deinit+0x80>)
    2a60:	4798      	blx	r3
    2a62:	200d      	movs	r0, #13
    2a64:	4b11      	ldr	r3, [pc, #68]	; (2aac <chip_deinit+0x84>)
    2a66:	4798      	blx	r3
		goto ERR1;
    2a68:	e00a      	b.n	2a80 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    2a6a:	4a11      	ldr	r2, [pc, #68]	; (2ab0 <chip_deinit+0x88>)
    2a6c:	490a      	ldr	r1, [pc, #40]	; (2a98 <chip_deinit+0x70>)
    2a6e:	480b      	ldr	r0, [pc, #44]	; (2a9c <chip_deinit+0x74>)
    2a70:	4b0b      	ldr	r3, [pc, #44]	; (2aa0 <chip_deinit+0x78>)
    2a72:	4798      	blx	r3
    2a74:	480b      	ldr	r0, [pc, #44]	; (2aa4 <chip_deinit+0x7c>)
    2a76:	4b0c      	ldr	r3, [pc, #48]	; (2aa8 <chip_deinit+0x80>)
    2a78:	4798      	blx	r3
    2a7a:	200d      	movs	r0, #13
    2a7c:	4b0b      	ldr	r3, [pc, #44]	; (2aac <chip_deinit+0x84>)
    2a7e:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    2a80:	0020      	movs	r0, r4
    2a82:	b002      	add	sp, #8
    2a84:	bd10      	pop	{r4, pc}
    2a86:	46c0      	nop			; (mov r8, r8)
    2a88:	00002ae5 	.word	0x00002ae5
    2a8c:	fffffbff 	.word	0xfffffbff
    2a90:	00002af1 	.word	0x00002af1
    2a94:	00000207 	.word	0x00000207
    2a98:	0000d558 	.word	0x0000d558
    2a9c:	0000d00c 	.word	0x0000d00c
    2aa0:	0000b9b5 	.word	0x0000b9b5
    2aa4:	0000d564 	.word	0x0000d564
    2aa8:	0000bad1 	.word	0x0000bad1
    2aac:	0000b9e9 	.word	0x0000b9e9
    2ab0:	00000201 	.word	0x00000201

00002ab4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    2ab4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    2ab6:	4b01      	ldr	r3, [pc, #4]	; (2abc <nm_bus_iface_init+0x8>)
    2ab8:	4798      	blx	r3
	return ret;
}
    2aba:	bd10      	pop	{r4, pc}
    2abc:	000013c5 	.word	0x000013c5

00002ac0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    2ac0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    2ac2:	4b01      	ldr	r3, [pc, #4]	; (2ac8 <nm_bus_iface_deinit+0x8>)
    2ac4:	4798      	blx	r3

	return ret;
}
    2ac6:	bd10      	pop	{r4, pc}
    2ac8:	00001615 	.word	0x00001615

00002acc <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    2acc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    2ace:	4b01      	ldr	r3, [pc, #4]	; (2ad4 <nm_bus_reset+0x8>)
    2ad0:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    2ad2:	bd10      	pop	{r4, pc}
    2ad4:	00003475 	.word	0x00003475

00002ad8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    2ad8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    2ada:	4b01      	ldr	r3, [pc, #4]	; (2ae0 <nm_read_reg+0x8>)
    2adc:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    2ade:	bd10      	pop	{r4, pc}
    2ae0:	000034ad 	.word	0x000034ad

00002ae4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2ae4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    2ae6:	4b01      	ldr	r3, [pc, #4]	; (2aec <nm_read_reg_with_ret+0x8>)
    2ae8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    2aea:	bd10      	pop	{r4, pc}
    2aec:	000034c1 	.word	0x000034c1

00002af0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2af0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    2af2:	4b01      	ldr	r3, [pc, #4]	; (2af8 <nm_write_reg+0x8>)
    2af4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    2af6:	bd10      	pop	{r4, pc}
    2af8:	000034d9 	.word	0x000034d9

00002afc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2afe:	46d6      	mov	lr, sl
    2b00:	464f      	mov	r7, r9
    2b02:	4646      	mov	r6, r8
    2b04:	b5c0      	push	{r6, r7, lr}
    2b06:	b082      	sub	sp, #8
    2b08:	4680      	mov	r8, r0
    2b0a:	4689      	mov	r9, r1
    2b0c:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2b0e:	4b13      	ldr	r3, [pc, #76]	; (2b5c <nm_read_block+0x60>)
    2b10:	881f      	ldrh	r7, [r3, #0]
    2b12:	3f08      	subs	r7, #8
    2b14:	b2bb      	uxth	r3, r7
    2b16:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2b18:	001e      	movs	r6, r3
    2b1a:	0004      	movs	r4, r0
    2b1c:	429a      	cmp	r2, r3
    2b1e:	d91a      	bls.n	2b56 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2b20:	4b0f      	ldr	r3, [pc, #60]	; (2b60 <nm_read_block+0x64>)
    2b22:	469a      	mov	sl, r3
    2b24:	1a37      	subs	r7, r6, r0
    2b26:	4643      	mov	r3, r8
    2b28:	1ae1      	subs	r1, r4, r3
    2b2a:	4449      	add	r1, r9
    2b2c:	9a01      	ldr	r2, [sp, #4]
    2b2e:	0020      	movs	r0, r4
    2b30:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2b32:	2800      	cmp	r0, #0
    2b34:	d109      	bne.n	2b4a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2b36:	1bad      	subs	r5, r5, r6
    2b38:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2b3a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2b3c:	42b5      	cmp	r5, r6
    2b3e:	d8f2      	bhi.n	2b26 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2b40:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2b42:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    2b44:	0020      	movs	r0, r4
    2b46:	4b06      	ldr	r3, [pc, #24]	; (2b60 <nm_read_block+0x64>)
    2b48:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2b4a:	b002      	add	sp, #8
    2b4c:	bc1c      	pop	{r2, r3, r4}
    2b4e:	4690      	mov	r8, r2
    2b50:	4699      	mov	r9, r3
    2b52:	46a2      	mov	sl, r4
    2b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2b56:	2100      	movs	r1, #0
    2b58:	e7f2      	b.n	2b40 <nm_read_block+0x44>
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	2000000c 	.word	0x2000000c
    2b60:	00003619 	.word	0x00003619

00002b64 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    2b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b66:	46d6      	mov	lr, sl
    2b68:	464f      	mov	r7, r9
    2b6a:	4646      	mov	r6, r8
    2b6c:	b5c0      	push	{r6, r7, lr}
    2b6e:	b082      	sub	sp, #8
    2b70:	4680      	mov	r8, r0
    2b72:	4689      	mov	r9, r1
    2b74:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    2b76:	4b13      	ldr	r3, [pc, #76]	; (2bc4 <nm_write_block+0x60>)
    2b78:	881f      	ldrh	r7, [r3, #0]
    2b7a:	3f08      	subs	r7, #8
    2b7c:	b2bb      	uxth	r3, r7
    2b7e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    2b80:	001e      	movs	r6, r3
    2b82:	0004      	movs	r4, r0
    2b84:	429a      	cmp	r2, r3
    2b86:	d91a      	bls.n	2bbe <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2b88:	4b0f      	ldr	r3, [pc, #60]	; (2bc8 <nm_write_block+0x64>)
    2b8a:	469a      	mov	sl, r3
    2b8c:	1a37      	subs	r7, r6, r0
    2b8e:	4643      	mov	r3, r8
    2b90:	1ae1      	subs	r1, r4, r3
    2b92:	4449      	add	r1, r9
    2b94:	9a01      	ldr	r2, [sp, #4]
    2b96:	0020      	movs	r0, r4
    2b98:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    2b9a:	2800      	cmp	r0, #0
    2b9c:	d109      	bne.n	2bb2 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    2b9e:	1bad      	subs	r5, r5, r6
    2ba0:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    2ba2:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    2ba4:	42b5      	cmp	r5, r6
    2ba6:	d8f2      	bhi.n	2b8e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2ba8:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    2baa:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    2bac:	0020      	movs	r0, r4
    2bae:	4b06      	ldr	r3, [pc, #24]	; (2bc8 <nm_write_block+0x64>)
    2bb0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    2bb2:	b002      	add	sp, #8
    2bb4:	bc1c      	pop	{r2, r3, r4}
    2bb6:	4690      	mov	r8, r2
    2bb8:	4699      	mov	r9, r3
    2bba:	46a2      	mov	sl, r4
    2bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    2bbe:	2100      	movs	r1, #0
    2bc0:	e7f2      	b.n	2ba8 <nm_write_block+0x44>
    2bc2:	46c0      	nop			; (mov r8, r8)
    2bc4:	2000000c 	.word	0x2000000c
    2bc8:	00003775 	.word	0x00003775

00002bcc <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    2bcc:	b570      	push	{r4, r5, r6, lr}
    2bce:	b084      	sub	sp, #16
    2bd0:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    2bd2:	2300      	movs	r3, #0
    2bd4:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    2bd6:	2208      	movs	r2, #8
    2bd8:	2100      	movs	r1, #0
    2bda:	a801      	add	r0, sp, #4
    2bdc:	4b2d      	ldr	r3, [pc, #180]	; (2c94 <nm_get_firmware_full_info+0xc8>)
    2bde:	4798      	blx	r3
	if (pstrRev != NULL)
    2be0:	2c00      	cmp	r4, #0
    2be2:	d044      	beq.n	2c6e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    2be4:	2228      	movs	r2, #40	; 0x28
    2be6:	2100      	movs	r1, #0
    2be8:	0020      	movs	r0, r4
    2bea:	4b2b      	ldr	r3, [pc, #172]	; (2c98 <nm_get_firmware_full_info+0xcc>)
    2bec:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    2bee:	a903      	add	r1, sp, #12
    2bf0:	482a      	ldr	r0, [pc, #168]	; (2c9c <nm_get_firmware_full_info+0xd0>)
    2bf2:	4b2b      	ldr	r3, [pc, #172]	; (2ca0 <nm_get_firmware_full_info+0xd4>)
    2bf4:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    2bf6:	2800      	cmp	r0, #0
    2bf8:	d13a      	bne.n	2c70 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    2bfa:	9b03      	ldr	r3, [sp, #12]
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d039      	beq.n	2c74 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    2c00:	20c0      	movs	r0, #192	; 0xc0
    2c02:	0280      	lsls	r0, r0, #10
    2c04:	4318      	orrs	r0, r3
    2c06:	2208      	movs	r2, #8
    2c08:	a901      	add	r1, sp, #4
    2c0a:	4b26      	ldr	r3, [pc, #152]	; (2ca4 <nm_get_firmware_full_info+0xd8>)
    2c0c:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    2c0e:	2800      	cmp	r0, #0
    2c10:	d12e      	bne.n	2c70 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    2c12:	9b02      	ldr	r3, [sp, #8]
    2c14:	0418      	lsls	r0, r3, #16
    2c16:	0c00      	lsrs	r0, r0, #16
    2c18:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    2c1a:	d02e      	beq.n	2c7a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    2c1c:	23c0      	movs	r3, #192	; 0xc0
    2c1e:	029b      	lsls	r3, r3, #10
    2c20:	4318      	orrs	r0, r3
    2c22:	2228      	movs	r2, #40	; 0x28
    2c24:	0021      	movs	r1, r4
    2c26:	4b1f      	ldr	r3, [pc, #124]	; (2ca4 <nm_get_firmware_full_info+0xd8>)
    2c28:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    2c2a:	2800      	cmp	r0, #0
    2c2c:	d120      	bne.n	2c70 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    2c2e:	7921      	ldrb	r1, [r4, #4]
    2c30:	0209      	lsls	r1, r1, #8
    2c32:	79a2      	ldrb	r2, [r4, #6]
    2c34:	230f      	movs	r3, #15
    2c36:	401a      	ands	r2, r3
    2c38:	430a      	orrs	r2, r1
    2c3a:	7961      	ldrb	r1, [r4, #5]
    2c3c:	0109      	lsls	r1, r1, #4
    2c3e:	25ff      	movs	r5, #255	; 0xff
    2c40:	4029      	ands	r1, r5
    2c42:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    2c44:	79e1      	ldrb	r1, [r4, #7]
    2c46:	0209      	lsls	r1, r1, #8
    2c48:	7a66      	ldrb	r6, [r4, #9]
    2c4a:	4033      	ands	r3, r6
    2c4c:	430b      	orrs	r3, r1
    2c4e:	7a21      	ldrb	r1, [r4, #8]
    2c50:	0109      	lsls	r1, r1, #4
    2c52:	400d      	ands	r5, r1
    2c54:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    2c56:	2a00      	cmp	r2, #0
    2c58:	d012      	beq.n	2c80 <nm_get_firmware_full_info+0xb4>
    2c5a:	2b00      	cmp	r3, #0
    2c5c:	d013      	beq.n	2c86 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    2c5e:	4912      	ldr	r1, [pc, #72]	; (2ca8 <nm_get_firmware_full_info+0xdc>)
    2c60:	428b      	cmp	r3, r1
    2c62:	d813      	bhi.n	2c8c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    2c64:	4b11      	ldr	r3, [pc, #68]	; (2cac <nm_get_firmware_full_info+0xe0>)
    2c66:	429a      	cmp	r2, r3
    2c68:	d802      	bhi.n	2c70 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    2c6a:	380d      	subs	r0, #13
    2c6c:	e000      	b.n	2c70 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    2c6e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    2c70:	b004      	add	sp, #16
    2c72:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    2c74:	200c      	movs	r0, #12
    2c76:	4240      	negs	r0, r0
    2c78:	e7fa      	b.n	2c70 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    2c7a:	200c      	movs	r0, #12
    2c7c:	4240      	negs	r0, r0
    2c7e:	e7f7      	b.n	2c70 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    2c80:	200c      	movs	r0, #12
    2c82:	4240      	negs	r0, r0
    2c84:	e7f4      	b.n	2c70 <nm_get_firmware_full_info+0xa4>
    2c86:	200c      	movs	r0, #12
    2c88:	4240      	negs	r0, r0
    2c8a:	e7f1      	b.n	2c70 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    2c8c:	200d      	movs	r0, #13
    2c8e:	4240      	negs	r0, r0
    2c90:	e7ee      	b.n	2c70 <nm_get_firmware_full_info+0xa4>
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	0000b853 	.word	0x0000b853
    2c98:	00001695 	.word	0x00001695
    2c9c:	000c0008 	.word	0x000c0008
    2ca0:	00002ae5 	.word	0x00002ae5
    2ca4:	00002afd 	.word	0x00002afd
    2ca8:	00001354 	.word	0x00001354
    2cac:	00001353 	.word	0x00001353

00002cb0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    2cb0:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    2cb2:	2800      	cmp	r0, #0
    2cb4:	d037      	beq.n	2d26 <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    2cb6:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    2cb8:	1e6b      	subs	r3, r5, #1
    2cba:	2b03      	cmp	r3, #3
    2cbc:	d900      	bls.n	2cc0 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    2cbe:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    2cc0:	2000      	movs	r0, #0
    2cc2:	4b20      	ldr	r3, [pc, #128]	; (2d44 <nm_drv_init+0x94>)
    2cc4:	4798      	blx	r3
    2cc6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cc8:	d12f      	bne.n	2d2a <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    2cca:	481f      	ldr	r0, [pc, #124]	; (2d48 <nm_drv_init+0x98>)
    2ccc:	4c1f      	ldr	r4, [pc, #124]	; (2d4c <nm_drv_init+0x9c>)
    2cce:	47a0      	blx	r4
    2cd0:	4b1f      	ldr	r3, [pc, #124]	; (2d50 <nm_drv_init+0xa0>)
    2cd2:	4798      	blx	r3
    2cd4:	0001      	movs	r1, r0
    2cd6:	481f      	ldr	r0, [pc, #124]	; (2d54 <nm_drv_init+0xa4>)
    2cd8:	47a0      	blx	r4
    2cda:	200d      	movs	r0, #13
    2cdc:	4b1e      	ldr	r3, [pc, #120]	; (2d58 <nm_drv_init+0xa8>)
    2cde:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    2ce0:	4b1e      	ldr	r3, [pc, #120]	; (2d5c <nm_drv_init+0xac>)
    2ce2:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    2ce4:	0028      	movs	r0, r5
    2ce6:	4b1e      	ldr	r3, [pc, #120]	; (2d60 <nm_drv_init+0xb0>)
    2ce8:	4798      	blx	r3
    2cea:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cec:	d117      	bne.n	2d1e <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    2cee:	0028      	movs	r0, r5
    2cf0:	4b1c      	ldr	r3, [pc, #112]	; (2d64 <nm_drv_init+0xb4>)
    2cf2:	4798      	blx	r3
    2cf4:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2cf6:	d112      	bne.n	2d1e <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    2cf8:	3d02      	subs	r5, #2
    2cfa:	2d01      	cmp	r5, #1
    2cfc:	d911      	bls.n	2d22 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    2cfe:	4b1a      	ldr	r3, [pc, #104]	; (2d68 <nm_drv_init+0xb8>)
    2d00:	4798      	blx	r3
    2d02:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d04:	d00d      	beq.n	2d22 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    2d06:	22a7      	movs	r2, #167	; 0xa7
    2d08:	0052      	lsls	r2, r2, #1
    2d0a:	4918      	ldr	r1, [pc, #96]	; (2d6c <nm_drv_init+0xbc>)
    2d0c:	4818      	ldr	r0, [pc, #96]	; (2d70 <nm_drv_init+0xc0>)
    2d0e:	4b0f      	ldr	r3, [pc, #60]	; (2d4c <nm_drv_init+0x9c>)
    2d10:	4798      	blx	r3
    2d12:	4818      	ldr	r0, [pc, #96]	; (2d74 <nm_drv_init+0xc4>)
    2d14:	4b18      	ldr	r3, [pc, #96]	; (2d78 <nm_drv_init+0xc8>)
    2d16:	4798      	blx	r3
    2d18:	200d      	movs	r0, #13
    2d1a:	4b0f      	ldr	r3, [pc, #60]	; (2d58 <nm_drv_init+0xa8>)
    2d1c:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    2d1e:	4b17      	ldr	r3, [pc, #92]	; (2d7c <nm_drv_init+0xcc>)
    2d20:	4798      	blx	r3
ERR1:
	return ret;
}
    2d22:	0020      	movs	r0, r4
    2d24:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    2d26:	2501      	movs	r5, #1
    2d28:	e7ca      	b.n	2cc0 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    2d2a:	2290      	movs	r2, #144	; 0x90
    2d2c:	0052      	lsls	r2, r2, #1
    2d2e:	490f      	ldr	r1, [pc, #60]	; (2d6c <nm_drv_init+0xbc>)
    2d30:	480f      	ldr	r0, [pc, #60]	; (2d70 <nm_drv_init+0xc0>)
    2d32:	4b06      	ldr	r3, [pc, #24]	; (2d4c <nm_drv_init+0x9c>)
    2d34:	4798      	blx	r3
    2d36:	4812      	ldr	r0, [pc, #72]	; (2d80 <nm_drv_init+0xd0>)
    2d38:	4b0f      	ldr	r3, [pc, #60]	; (2d78 <nm_drv_init+0xc8>)
    2d3a:	4798      	blx	r3
    2d3c:	200d      	movs	r0, #13
    2d3e:	4b06      	ldr	r3, [pc, #24]	; (2d58 <nm_drv_init+0xa8>)
    2d40:	4798      	blx	r3
		goto ERR1;
    2d42:	e7ee      	b.n	2d22 <nm_drv_init+0x72>
    2d44:	00002ab5 	.word	0x00002ab5
    2d48:	0000d33c 	.word	0x0000d33c
    2d4c:	0000b9b5 	.word	0x0000b9b5
    2d50:	00002695 	.word	0x00002695
    2d54:	0000d680 	.word	0x0000d680
    2d58:	0000b9e9 	.word	0x0000b9e9
    2d5c:	000034f1 	.word	0x000034f1
    2d60:	000028a9 	.word	0x000028a9
    2d64:	000029b1 	.word	0x000029b1
    2d68:	00002639 	.word	0x00002639
    2d6c:	0000d5c8 	.word	0x0000d5c8
    2d70:	0000d00c 	.word	0x0000d00c
    2d74:	0000d644 	.word	0x0000d644
    2d78:	0000bad1 	.word	0x0000bad1
    2d7c:	00002ac1 	.word	0x00002ac1
    2d80:	0000d664 	.word	0x0000d664

00002d84 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    2d84:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    2d86:	4b1c      	ldr	r3, [pc, #112]	; (2df8 <nm_drv_deinit+0x74>)
    2d88:	4798      	blx	r3
    2d8a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d8c:	d10b      	bne.n	2da6 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    2d8e:	2000      	movs	r0, #0
    2d90:	4b1a      	ldr	r3, [pc, #104]	; (2dfc <nm_drv_deinit+0x78>)
    2d92:	4798      	blx	r3
    2d94:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d96:	d114      	bne.n	2dc2 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    2d98:	4b19      	ldr	r3, [pc, #100]	; (2e00 <nm_drv_deinit+0x7c>)
    2d9a:	4798      	blx	r3
    2d9c:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    2d9e:	d11d      	bne.n	2ddc <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    2da0:	4b18      	ldr	r3, [pc, #96]	; (2e04 <nm_drv_deinit+0x80>)
    2da2:	4798      	blx	r3
    2da4:	e00b      	b.n	2dbe <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    2da6:	2266      	movs	r2, #102	; 0x66
    2da8:	32ff      	adds	r2, #255	; 0xff
    2daa:	4917      	ldr	r1, [pc, #92]	; (2e08 <nm_drv_deinit+0x84>)
    2dac:	4817      	ldr	r0, [pc, #92]	; (2e0c <nm_drv_deinit+0x88>)
    2dae:	4b18      	ldr	r3, [pc, #96]	; (2e10 <nm_drv_deinit+0x8c>)
    2db0:	4798      	blx	r3
    2db2:	4818      	ldr	r0, [pc, #96]	; (2e14 <nm_drv_deinit+0x90>)
    2db4:	4b18      	ldr	r3, [pc, #96]	; (2e18 <nm_drv_deinit+0x94>)
    2db6:	4798      	blx	r3
    2db8:	200d      	movs	r0, #13
    2dba:	4b18      	ldr	r3, [pc, #96]	; (2e1c <nm_drv_deinit+0x98>)
    2dbc:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    2dbe:	0020      	movs	r0, r4
    2dc0:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    2dc2:	22b6      	movs	r2, #182	; 0xb6
    2dc4:	0052      	lsls	r2, r2, #1
    2dc6:	4910      	ldr	r1, [pc, #64]	; (2e08 <nm_drv_deinit+0x84>)
    2dc8:	4810      	ldr	r0, [pc, #64]	; (2e0c <nm_drv_deinit+0x88>)
    2dca:	4b11      	ldr	r3, [pc, #68]	; (2e10 <nm_drv_deinit+0x8c>)
    2dcc:	4798      	blx	r3
    2dce:	4814      	ldr	r0, [pc, #80]	; (2e20 <nm_drv_deinit+0x9c>)
    2dd0:	4b11      	ldr	r3, [pc, #68]	; (2e18 <nm_drv_deinit+0x94>)
    2dd2:	4798      	blx	r3
    2dd4:	200d      	movs	r0, #13
    2dd6:	4b11      	ldr	r3, [pc, #68]	; (2e1c <nm_drv_deinit+0x98>)
    2dd8:	4798      	blx	r3
		goto ERR1;
    2dda:	e7f0      	b.n	2dbe <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    2ddc:	22b9      	movs	r2, #185	; 0xb9
    2dde:	0052      	lsls	r2, r2, #1
    2de0:	4909      	ldr	r1, [pc, #36]	; (2e08 <nm_drv_deinit+0x84>)
    2de2:	480a      	ldr	r0, [pc, #40]	; (2e0c <nm_drv_deinit+0x88>)
    2de4:	4b0a      	ldr	r3, [pc, #40]	; (2e10 <nm_drv_deinit+0x8c>)
    2de6:	4798      	blx	r3
    2de8:	480e      	ldr	r0, [pc, #56]	; (2e24 <nm_drv_deinit+0xa0>)
    2dea:	4b0b      	ldr	r3, [pc, #44]	; (2e18 <nm_drv_deinit+0x94>)
    2dec:	4798      	blx	r3
    2dee:	200d      	movs	r0, #13
    2df0:	4b0a      	ldr	r3, [pc, #40]	; (2e1c <nm_drv_deinit+0x98>)
    2df2:	4798      	blx	r3
		goto ERR1;
    2df4:	e7e3      	b.n	2dbe <nm_drv_deinit+0x3a>
    2df6:	46c0      	nop			; (mov r8, r8)
    2df8:	00002a29 	.word	0x00002a29
    2dfc:	00003e9d 	.word	0x00003e9d
    2e00:	00002ac1 	.word	0x00002ac1
    2e04:	0000349d 	.word	0x0000349d
    2e08:	0000d5d4 	.word	0x0000d5d4
    2e0c:	0000d00c 	.word	0x0000d00c
    2e10:	0000b9b5 	.word	0x0000b9b5
    2e14:	0000d5e4 	.word	0x0000d5e4
    2e18:	0000bad1 	.word	0x0000bad1
    2e1c:	0000b9e9 	.word	0x0000b9e9
    2e20:	0000d604 	.word	0x0000d604
    2e24:	0000d628 	.word	0x0000d628

00002e28 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    2e28:	b500      	push	{lr}
    2e2a:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    2e2c:	ab01      	add	r3, sp, #4
    2e2e:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    2e30:	2200      	movs	r2, #0
    2e32:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    2e34:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2e36:	0019      	movs	r1, r3
    2e38:	2003      	movs	r0, #3
    2e3a:	4b02      	ldr	r3, [pc, #8]	; (2e44 <nmi_spi_write+0x1c>)
    2e3c:	4798      	blx	r3
}
    2e3e:	b005      	add	sp, #20
    2e40:	bd00      	pop	{pc}
    2e42:	46c0      	nop			; (mov r8, r8)
    2e44:	000014c9 	.word	0x000014c9

00002e48 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    2e48:	b570      	push	{r4, r5, r6, lr}
    2e4a:	b084      	sub	sp, #16
    2e4c:	ac08      	add	r4, sp, #32
    2e4e:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    2e50:	ac01      	add	r4, sp, #4
    2e52:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    2e54:	303f      	adds	r0, #63	; 0x3f
    2e56:	b2c4      	uxtb	r4, r0
    2e58:	2c0e      	cmp	r4, #14
    2e5a:	d900      	bls.n	2e5e <spi_cmd+0x16>
    2e5c:	e084      	b.n	2f68 <spi_cmd+0x120>
    2e5e:	00a0      	lsls	r0, r4, #2
    2e60:	4c4f      	ldr	r4, [pc, #316]	; (2fa0 <spi_cmd+0x158>)
    2e62:	5820      	ldr	r0, [r4, r0]
    2e64:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    2e66:	ab01      	add	r3, sp, #4
    2e68:	0c0a      	lsrs	r2, r1, #16
    2e6a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2e6c:	0a0a      	lsrs	r2, r1, #8
    2e6e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    2e70:	70d9      	strb	r1, [r3, #3]
		len = 5;
    2e72:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2e74:	4b4b      	ldr	r3, [pc, #300]	; (2fa4 <spi_cmd+0x15c>)
    2e76:	781b      	ldrb	r3, [r3, #0]
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d077      	beq.n	2f6c <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    2e7c:	3901      	subs	r1, #1
    2e7e:	b2c9      	uxtb	r1, r1
    2e80:	e083      	b.n	2f8a <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    2e82:	0a0b      	lsrs	r3, r1, #8
    2e84:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2e86:	2d00      	cmp	r5, #0
    2e88:	d107      	bne.n	2e9a <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    2e8a:	aa01      	add	r2, sp, #4
    2e8c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    2e8e:	ab01      	add	r3, sp, #4
    2e90:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    2e92:	2200      	movs	r2, #0
    2e94:	70da      	strb	r2, [r3, #3]
		len = 5;
    2e96:	2105      	movs	r1, #5
		break;
    2e98:	e7ec      	b.n	2e74 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2e9a:	2280      	movs	r2, #128	; 0x80
    2e9c:	4252      	negs	r2, r2
    2e9e:	4313      	orrs	r3, r2
    2ea0:	aa01      	add	r2, sp, #4
    2ea2:	7053      	strb	r3, [r2, #1]
    2ea4:	e7f3      	b.n	2e8e <spi_cmd+0x46>
		bc[1] = 0x00;
    2ea6:	ab01      	add	r3, sp, #4
    2ea8:	2200      	movs	r2, #0
    2eaa:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2eac:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2eae:	70da      	strb	r2, [r3, #3]
		len = 5;
    2eb0:	2105      	movs	r1, #5
		break;
    2eb2:	e7df      	b.n	2e74 <spi_cmd+0x2c>
		bc[1] = 0x00;
    2eb4:	ab01      	add	r3, sp, #4
    2eb6:	2200      	movs	r2, #0
    2eb8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2eba:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2ebc:	70da      	strb	r2, [r3, #3]
		len = 5;
    2ebe:	2105      	movs	r1, #5
		break;
    2ec0:	e7d8      	b.n	2e74 <spi_cmd+0x2c>
		bc[1] = 0xff;
    2ec2:	ab01      	add	r3, sp, #4
    2ec4:	22ff      	movs	r2, #255	; 0xff
    2ec6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    2ec8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2eca:	70da      	strb	r2, [r3, #3]
		len = 5;
    2ecc:	2105      	movs	r1, #5
		break;
    2ece:	e7d1      	b.n	2e74 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2ed0:	aa01      	add	r2, sp, #4
    2ed2:	0c08      	lsrs	r0, r1, #16
    2ed4:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2ed6:	0a08      	lsrs	r0, r1, #8
    2ed8:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2eda:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    2edc:	0a19      	lsrs	r1, r3, #8
    2ede:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    2ee0:	7153      	strb	r3, [r2, #5]
		len = 7;
    2ee2:	2107      	movs	r1, #7
		break;
    2ee4:	e7c6      	b.n	2e74 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    2ee6:	aa01      	add	r2, sp, #4
    2ee8:	0c08      	lsrs	r0, r1, #16
    2eea:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    2eec:	0a08      	lsrs	r0, r1, #8
    2eee:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    2ef0:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    2ef2:	0c19      	lsrs	r1, r3, #16
    2ef4:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    2ef6:	0a19      	lsrs	r1, r3, #8
    2ef8:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    2efa:	7193      	strb	r3, [r2, #6]
		len = 8;
    2efc:	2108      	movs	r1, #8
		break;
    2efe:	e7b9      	b.n	2e74 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    2f00:	0a0b      	lsrs	r3, r1, #8
    2f02:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    2f04:	2d00      	cmp	r5, #0
    2f06:	d10c      	bne.n	2f22 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    2f08:	a801      	add	r0, sp, #4
    2f0a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    2f0c:	ab01      	add	r3, sp, #4
    2f0e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2f10:	0e11      	lsrs	r1, r2, #24
    2f12:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2f14:	0c11      	lsrs	r1, r2, #16
    2f16:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2f18:	0a11      	lsrs	r1, r2, #8
    2f1a:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    2f1c:	719a      	strb	r2, [r3, #6]
		len = 8;
    2f1e:	2108      	movs	r1, #8
		break;
    2f20:	e7a8      	b.n	2e74 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    2f22:	2080      	movs	r0, #128	; 0x80
    2f24:	4240      	negs	r0, r0
    2f26:	4303      	orrs	r3, r0
    2f28:	a801      	add	r0, sp, #4
    2f2a:	7043      	strb	r3, [r0, #1]
    2f2c:	e7ee      	b.n	2f0c <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    2f2e:	ab01      	add	r3, sp, #4
    2f30:	0c08      	lsrs	r0, r1, #16
    2f32:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2f34:	0a08      	lsrs	r0, r1, #8
    2f36:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    2f38:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2f3a:	0e11      	lsrs	r1, r2, #24
    2f3c:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    2f3e:	0c11      	lsrs	r1, r2, #16
    2f40:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    2f42:	0a11      	lsrs	r1, r2, #8
    2f44:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    2f46:	71da      	strb	r2, [r3, #7]
		len = 9;
    2f48:	2109      	movs	r1, #9
		break;
    2f4a:	e793      	b.n	2e74 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    2f4c:	2290      	movs	r2, #144	; 0x90
    2f4e:	0052      	lsls	r2, r2, #1
    2f50:	4915      	ldr	r1, [pc, #84]	; (2fa8 <spi_cmd+0x160>)
    2f52:	4816      	ldr	r0, [pc, #88]	; (2fac <spi_cmd+0x164>)
    2f54:	4b16      	ldr	r3, [pc, #88]	; (2fb0 <spi_cmd+0x168>)
    2f56:	4798      	blx	r3
    2f58:	4816      	ldr	r0, [pc, #88]	; (2fb4 <spi_cmd+0x16c>)
    2f5a:	4b17      	ldr	r3, [pc, #92]	; (2fb8 <spi_cmd+0x170>)
    2f5c:	4798      	blx	r3
    2f5e:	200d      	movs	r0, #13
    2f60:	4b16      	ldr	r3, [pc, #88]	; (2fbc <spi_cmd+0x174>)
    2f62:	4798      	blx	r3
			result = N_FAIL;
    2f64:	2300      	movs	r3, #0
    2f66:	e017      	b.n	2f98 <spi_cmd+0x150>
	switch (cmd) {
    2f68:	2300      	movs	r3, #0
    2f6a:	e015      	b.n	2f98 <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2f6c:	1e4e      	subs	r6, r1, #1
    2f6e:	aa01      	add	r2, sp, #4
    2f70:	1995      	adds	r5, r2, r6
    2f72:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    2f74:	4c12      	ldr	r4, [pc, #72]	; (2fc0 <spi_cmd+0x178>)
    2f76:	005b      	lsls	r3, r3, #1
    2f78:	7810      	ldrb	r0, [r2, #0]
    2f7a:	4043      	eors	r3, r0
    2f7c:	5ce3      	ldrb	r3, [r4, r3]
    2f7e:	3201      	adds	r2, #1
	while (len--)
    2f80:	42aa      	cmp	r2, r5
    2f82:	d1f8      	bne.n	2f76 <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2f84:	005b      	lsls	r3, r3, #1
    2f86:	aa01      	add	r2, sp, #4
    2f88:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2f8a:	b289      	uxth	r1, r1
    2f8c:	a801      	add	r0, sp, #4
    2f8e:	4b0d      	ldr	r3, [pc, #52]	; (2fc4 <spi_cmd+0x17c>)
    2f90:	4798      	blx	r3
    2f92:	2301      	movs	r3, #1
    2f94:	2800      	cmp	r0, #0
    2f96:	d1d9      	bne.n	2f4c <spi_cmd+0x104>
		}
	}

	return result;
}
    2f98:	0018      	movs	r0, r3
    2f9a:	b004      	add	sp, #16
    2f9c:	bd70      	pop	{r4, r5, r6, pc}
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	0000d690 	.word	0x0000d690
    2fa4:	200003ac 	.word	0x200003ac
    2fa8:	0000d6d0 	.word	0x0000d6d0
    2fac:	0000d00c 	.word	0x0000d00c
    2fb0:	0000b9b5 	.word	0x0000b9b5
    2fb4:	0000db60 	.word	0x0000db60
    2fb8:	0000bad1 	.word	0x0000bad1
    2fbc:	0000b9e9 	.word	0x0000b9e9
    2fc0:	0000d75c 	.word	0x0000d75c
    2fc4:	00002e29 	.word	0x00002e29

00002fc8 <nmi_spi_read>:
{
    2fc8:	b500      	push	{lr}
    2fca:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    2fcc:	ab01      	add	r3, sp, #4
    2fce:	2200      	movs	r2, #0
    2fd0:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    2fd2:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    2fd4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    2fd6:	0019      	movs	r1, r3
    2fd8:	2003      	movs	r0, #3
    2fda:	4b02      	ldr	r3, [pc, #8]	; (2fe4 <nmi_spi_read+0x1c>)
    2fdc:	4798      	blx	r3
}
    2fde:	b005      	add	sp, #20
    2fe0:	bd00      	pop	{pc}
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	000014c9 	.word	0x000014c9

00002fe8 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fea:	46c6      	mov	lr, r8
    2fec:	b500      	push	{lr}
    2fee:	b082      	sub	sp, #8
    2ff0:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    2ff2:	28cf      	cmp	r0, #207	; 0xcf
    2ff4:	d02b      	beq.n	304e <spi_cmd_rsp+0x66>
    2ff6:	0003      	movs	r3, r0
    2ff8:	333b      	adds	r3, #59	; 0x3b
    2ffa:	b2db      	uxtb	r3, r3
    2ffc:	2b01      	cmp	r3, #1
    2ffe:	d926      	bls.n	304e <spi_cmd_rsp+0x66>
{
    3000:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3002:	466b      	mov	r3, sp
    3004:	1dde      	adds	r6, r3, #7
    3006:	4b26      	ldr	r3, [pc, #152]	; (30a0 <spi_cmd_rsp+0xb8>)
    3008:	4698      	mov	r8, r3
    300a:	2101      	movs	r1, #1
    300c:	0030      	movs	r0, r6
    300e:	47c0      	blx	r8
    3010:	1e05      	subs	r5, r0, #0
    3012:	d125      	bne.n	3060 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    3014:	7833      	ldrb	r3, [r6, #0]
    3016:	42bb      	cmp	r3, r7
    3018:	d030      	beq.n	307c <spi_cmd_rsp+0x94>
    301a:	3c01      	subs	r4, #1
    301c:	b2e4      	uxtb	r4, r4
    301e:	2c00      	cmp	r4, #0
    3020:	d1f3      	bne.n	300a <spi_cmd_rsp+0x22>
    3022:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3024:	466b      	mov	r3, sp
    3026:	1dde      	adds	r6, r3, #7
    3028:	4f1d      	ldr	r7, [pc, #116]	; (30a0 <spi_cmd_rsp+0xb8>)
    302a:	2101      	movs	r1, #1
    302c:	0030      	movs	r0, r6
    302e:	47b8      	blx	r7
    3030:	2800      	cmp	r0, #0
    3032:	d125      	bne.n	3080 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    3034:	7833      	ldrb	r3, [r6, #0]
    3036:	2b00      	cmp	r3, #0
    3038:	d02f      	beq.n	309a <spi_cmd_rsp+0xb2>
    303a:	3c01      	subs	r4, #1
    303c:	b2e4      	uxtb	r4, r4
    303e:	2c00      	cmp	r4, #0
    3040:	d1f3      	bne.n	302a <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    3042:	2501      	movs	r5, #1

_fail_:

	return result;
}
    3044:	0028      	movs	r0, r5
    3046:	b002      	add	sp, #8
    3048:	bc04      	pop	{r2}
    304a:	4690      	mov	r8, r2
    304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    304e:	2101      	movs	r1, #1
    3050:	466b      	mov	r3, sp
    3052:	1dd8      	adds	r0, r3, #7
    3054:	4b12      	ldr	r3, [pc, #72]	; (30a0 <spi_cmd_rsp+0xb8>)
    3056:	4798      	blx	r3
			result = N_FAIL;
    3058:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    305a:	2800      	cmp	r0, #0
    305c:	d0d0      	beq.n	3000 <spi_cmd_rsp+0x18>
    305e:	e7f1      	b.n	3044 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3060:	225c      	movs	r2, #92	; 0x5c
    3062:	32ff      	adds	r2, #255	; 0xff
    3064:	490f      	ldr	r1, [pc, #60]	; (30a4 <spi_cmd_rsp+0xbc>)
    3066:	4810      	ldr	r0, [pc, #64]	; (30a8 <spi_cmd_rsp+0xc0>)
    3068:	4b10      	ldr	r3, [pc, #64]	; (30ac <spi_cmd_rsp+0xc4>)
    306a:	4798      	blx	r3
    306c:	4810      	ldr	r0, [pc, #64]	; (30b0 <spi_cmd_rsp+0xc8>)
    306e:	4b11      	ldr	r3, [pc, #68]	; (30b4 <spi_cmd_rsp+0xcc>)
    3070:	4798      	blx	r3
    3072:	200d      	movs	r0, #13
    3074:	4b10      	ldr	r3, [pc, #64]	; (30b8 <spi_cmd_rsp+0xd0>)
    3076:	4798      	blx	r3
			result = N_FAIL;
    3078:	2500      	movs	r5, #0
			goto _fail_;
    307a:	e7e3      	b.n	3044 <spi_cmd_rsp+0x5c>
    307c:	240b      	movs	r4, #11
    307e:	e7d1      	b.n	3024 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    3080:	226a      	movs	r2, #106	; 0x6a
    3082:	32ff      	adds	r2, #255	; 0xff
    3084:	4907      	ldr	r1, [pc, #28]	; (30a4 <spi_cmd_rsp+0xbc>)
    3086:	4808      	ldr	r0, [pc, #32]	; (30a8 <spi_cmd_rsp+0xc0>)
    3088:	4b08      	ldr	r3, [pc, #32]	; (30ac <spi_cmd_rsp+0xc4>)
    308a:	4798      	blx	r3
    308c:	4808      	ldr	r0, [pc, #32]	; (30b0 <spi_cmd_rsp+0xc8>)
    308e:	4b09      	ldr	r3, [pc, #36]	; (30b4 <spi_cmd_rsp+0xcc>)
    3090:	4798      	blx	r3
    3092:	200d      	movs	r0, #13
    3094:	4b08      	ldr	r3, [pc, #32]	; (30b8 <spi_cmd_rsp+0xd0>)
    3096:	4798      	blx	r3
			goto _fail_;
    3098:	e7d4      	b.n	3044 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    309a:	2501      	movs	r5, #1
    309c:	e7d2      	b.n	3044 <spi_cmd_rsp+0x5c>
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	00002fc9 	.word	0x00002fc9
    30a4:	0000d6e8 	.word	0x0000d6e8
    30a8:	0000d00c 	.word	0x0000d00c
    30ac:	0000b9b5 	.word	0x0000b9b5
    30b0:	0000db8c 	.word	0x0000db8c
    30b4:	0000bad1 	.word	0x0000bad1
    30b8:	0000b9e9 	.word	0x0000b9e9

000030bc <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    30bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    30be:	46de      	mov	lr, fp
    30c0:	4657      	mov	r7, sl
    30c2:	464e      	mov	r6, r9
    30c4:	4645      	mov	r5, r8
    30c6:	b5e0      	push	{r5, r6, r7, lr}
    30c8:	b087      	sub	sp, #28
    30ca:	9001      	str	r0, [sp, #4]
    30cc:	4689      	mov	r9, r1
    30ce:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    30d0:	2300      	movs	r3, #0
    30d2:	469a      	mov	sl, r3
    30d4:	2380      	movs	r3, #128	; 0x80
    30d6:	019b      	lsls	r3, r3, #6
    30d8:	469b      	mov	fp, r3
    30da:	466a      	mov	r2, sp
    30dc:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    30de:	4b3c      	ldr	r3, [pc, #240]	; (31d0 <spi_data_read+0x114>)
    30e0:	4698      	mov	r8, r3
    30e2:	e02f      	b.n	3144 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    30e4:	22be      	movs	r2, #190	; 0xbe
    30e6:	0092      	lsls	r2, r2, #2
    30e8:	493a      	ldr	r1, [pc, #232]	; (31d4 <spi_data_read+0x118>)
    30ea:	483b      	ldr	r0, [pc, #236]	; (31d8 <spi_data_read+0x11c>)
    30ec:	4b3b      	ldr	r3, [pc, #236]	; (31dc <spi_data_read+0x120>)
    30ee:	4798      	blx	r3
    30f0:	483b      	ldr	r0, [pc, #236]	; (31e0 <spi_data_read+0x124>)
    30f2:	4b3c      	ldr	r3, [pc, #240]	; (31e4 <spi_data_read+0x128>)
    30f4:	4798      	blx	r3
    30f6:	200d      	movs	r0, #13
    30f8:	4b3b      	ldr	r3, [pc, #236]	; (31e8 <spi_data_read+0x12c>)
    30fa:	4798      	blx	r3
    30fc:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    30fe:	0028      	movs	r0, r5
    3100:	b007      	add	sp, #28
    3102:	bc3c      	pop	{r2, r3, r4, r5}
    3104:	4690      	mov	r8, r2
    3106:	4699      	mov	r9, r3
    3108:	46a2      	mov	sl, r4
    310a:	46ab      	mov	fp, r5
    310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    310e:	2c00      	cmp	r4, #0
    3110:	dd2e      	ble.n	3170 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    3112:	9b01      	ldr	r3, [sp, #4]
    3114:	4453      	add	r3, sl
    3116:	0018      	movs	r0, r3
    3118:	0039      	movs	r1, r7
    311a:	4b2d      	ldr	r3, [pc, #180]	; (31d0 <spi_data_read+0x114>)
    311c:	4798      	blx	r3
    311e:	1e04      	subs	r4, r0, #0
    3120:	d134      	bne.n	318c <spi_data_read+0xd0>
		if(!clockless)
    3122:	9b02      	ldr	r3, [sp, #8]
    3124:	2b00      	cmp	r3, #0
    3126:	d103      	bne.n	3130 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    3128:	4b30      	ldr	r3, [pc, #192]	; (31ec <spi_data_read+0x130>)
    312a:	781b      	ldrb	r3, [r3, #0]
    312c:	2b00      	cmp	r3, #0
    312e:	d039      	beq.n	31a4 <spi_data_read+0xe8>
		ix += nbytes;
    3130:	4653      	mov	r3, sl
    3132:	18fb      	adds	r3, r7, r3
    3134:	b21b      	sxth	r3, r3
    3136:	469a      	mov	sl, r3
		sz -= nbytes;
    3138:	464b      	mov	r3, r9
    313a:	1bdf      	subs	r7, r3, r7
    313c:	b2bb      	uxth	r3, r7
    313e:	4699      	mov	r9, r3
	} while (sz);
    3140:	2b00      	cmp	r3, #0
    3142:	d043      	beq.n	31cc <spi_data_read+0x110>
    3144:	464f      	mov	r7, r9
    3146:	45d9      	cmp	r9, fp
    3148:	d901      	bls.n	314e <spi_data_read+0x92>
    314a:	466b      	mov	r3, sp
    314c:	89df      	ldrh	r7, [r3, #14]
    314e:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    3150:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    3152:	ab04      	add	r3, sp, #16
    3154:	1cde      	adds	r6, r3, #3
    3156:	2101      	movs	r1, #1
    3158:	0030      	movs	r0, r6
    315a:	47c0      	blx	r8
    315c:	1e05      	subs	r5, r0, #0
    315e:	d1c1      	bne.n	30e4 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    3160:	7833      	ldrb	r3, [r6, #0]
    3162:	091b      	lsrs	r3, r3, #4
    3164:	2b0f      	cmp	r3, #15
    3166:	d0d2      	beq.n	310e <spi_data_read+0x52>
    3168:	3c01      	subs	r4, #1
    316a:	b224      	sxth	r4, r4
		} while (retry--);
    316c:	1c63      	adds	r3, r4, #1
    316e:	d1f2      	bne.n	3156 <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    3170:	22c1      	movs	r2, #193	; 0xc1
    3172:	0092      	lsls	r2, r2, #2
    3174:	4917      	ldr	r1, [pc, #92]	; (31d4 <spi_data_read+0x118>)
    3176:	4818      	ldr	r0, [pc, #96]	; (31d8 <spi_data_read+0x11c>)
    3178:	4c18      	ldr	r4, [pc, #96]	; (31dc <spi_data_read+0x120>)
    317a:	47a0      	blx	r4
    317c:	ab04      	add	r3, sp, #16
    317e:	78d9      	ldrb	r1, [r3, #3]
    3180:	481b      	ldr	r0, [pc, #108]	; (31f0 <spi_data_read+0x134>)
    3182:	47a0      	blx	r4
    3184:	200d      	movs	r0, #13
    3186:	4b18      	ldr	r3, [pc, #96]	; (31e8 <spi_data_read+0x12c>)
    3188:	4798      	blx	r3
			break;
    318a:	e7b8      	b.n	30fe <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    318c:	4a19      	ldr	r2, [pc, #100]	; (31f4 <spi_data_read+0x138>)
    318e:	4911      	ldr	r1, [pc, #68]	; (31d4 <spi_data_read+0x118>)
    3190:	4811      	ldr	r0, [pc, #68]	; (31d8 <spi_data_read+0x11c>)
    3192:	4b12      	ldr	r3, [pc, #72]	; (31dc <spi_data_read+0x120>)
    3194:	4798      	blx	r3
    3196:	4818      	ldr	r0, [pc, #96]	; (31f8 <spi_data_read+0x13c>)
    3198:	4b12      	ldr	r3, [pc, #72]	; (31e4 <spi_data_read+0x128>)
    319a:	4798      	blx	r3
    319c:	200d      	movs	r0, #13
    319e:	4b12      	ldr	r3, [pc, #72]	; (31e8 <spi_data_read+0x12c>)
    31a0:	4798      	blx	r3
			break;
    31a2:	e7ac      	b.n	30fe <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    31a4:	2102      	movs	r1, #2
    31a6:	a805      	add	r0, sp, #20
    31a8:	4b09      	ldr	r3, [pc, #36]	; (31d0 <spi_data_read+0x114>)
    31aa:	4798      	blx	r3
    31ac:	2800      	cmp	r0, #0
    31ae:	d0bf      	beq.n	3130 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    31b0:	22c6      	movs	r2, #198	; 0xc6
    31b2:	0092      	lsls	r2, r2, #2
    31b4:	4907      	ldr	r1, [pc, #28]	; (31d4 <spi_data_read+0x118>)
    31b6:	4808      	ldr	r0, [pc, #32]	; (31d8 <spi_data_read+0x11c>)
    31b8:	4b08      	ldr	r3, [pc, #32]	; (31dc <spi_data_read+0x120>)
    31ba:	4798      	blx	r3
    31bc:	480f      	ldr	r0, [pc, #60]	; (31fc <spi_data_read+0x140>)
    31be:	4b09      	ldr	r3, [pc, #36]	; (31e4 <spi_data_read+0x128>)
    31c0:	4798      	blx	r3
    31c2:	200d      	movs	r0, #13
    31c4:	4b08      	ldr	r3, [pc, #32]	; (31e8 <spi_data_read+0x12c>)
    31c6:	4798      	blx	r3
					result = N_FAIL;
    31c8:	0025      	movs	r5, r4
					break;
    31ca:	e798      	b.n	30fe <spi_data_read+0x42>
    31cc:	2501      	movs	r5, #1
    31ce:	e796      	b.n	30fe <spi_data_read+0x42>
    31d0:	00002fc9 	.word	0x00002fc9
    31d4:	0000d6f4 	.word	0x0000d6f4
    31d8:	0000d00c 	.word	0x0000d00c
    31dc:	0000b9b5 	.word	0x0000b9b5
    31e0:	0000dbc0 	.word	0x0000dbc0
    31e4:	0000bad1 	.word	0x0000bad1
    31e8:	0000b9e9 	.word	0x0000b9e9
    31ec:	200003ac 	.word	0x200003ac
    31f0:	0000dbf4 	.word	0x0000dbf4
    31f4:	0000030d 	.word	0x0000030d
    31f8:	0000dc24 	.word	0x0000dc24
    31fc:	0000dc54 	.word	0x0000dc54

00003200 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    3200:	b5f0      	push	{r4, r5, r6, r7, lr}
    3202:	46d6      	mov	lr, sl
    3204:	464f      	mov	r7, r9
    3206:	4646      	mov	r6, r8
    3208:	b5c0      	push	{r6, r7, lr}
    320a:	b086      	sub	sp, #24
    320c:	9003      	str	r0, [sp, #12]
    320e:	9104      	str	r1, [sp, #16]
    3210:	2830      	cmp	r0, #48	; 0x30
    3212:	d80f      	bhi.n	3234 <spi_write_reg+0x34>
    3214:	4b30      	ldr	r3, [pc, #192]	; (32d8 <spi_write_reg+0xd8>)
    3216:	781f      	ldrb	r7, [r3, #0]
    3218:	b2fb      	uxtb	r3, r7
    321a:	9305      	str	r3, [sp, #20]
    321c:	2300      	movs	r3, #0
    321e:	2230      	movs	r2, #48	; 0x30
    3220:	9903      	ldr	r1, [sp, #12]
    3222:	428a      	cmp	r2, r1
    3224:	415b      	adcs	r3, r3
    3226:	b2db      	uxtb	r3, r3
    3228:	469a      	mov	sl, r3
    322a:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    322c:	4b2b      	ldr	r3, [pc, #172]	; (32dc <spi_write_reg+0xdc>)
    322e:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3230:	46d1      	mov	r9, sl
    3232:	e033      	b.n	329c <spi_write_reg+0x9c>
    3234:	4b2a      	ldr	r3, [pc, #168]	; (32e0 <spi_write_reg+0xe0>)
    3236:	781f      	ldrb	r7, [r3, #0]
    3238:	e7ee      	b.n	3218 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    323a:	9805      	ldr	r0, [sp, #20]
    323c:	4b29      	ldr	r3, [pc, #164]	; (32e4 <spi_write_reg+0xe4>)
    323e:	4798      	blx	r3
    3240:	0004      	movs	r4, r0
	if (result != N_OK) {
    3242:	2801      	cmp	r0, #1
    3244:	d041      	beq.n	32ca <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    3246:	4a28      	ldr	r2, [pc, #160]	; (32e8 <spi_write_reg+0xe8>)
    3248:	4928      	ldr	r1, [pc, #160]	; (32ec <spi_write_reg+0xec>)
    324a:	4829      	ldr	r0, [pc, #164]	; (32f0 <spi_write_reg+0xf0>)
    324c:	4e29      	ldr	r6, [pc, #164]	; (32f4 <spi_write_reg+0xf4>)
    324e:	47b0      	blx	r6
    3250:	9903      	ldr	r1, [sp, #12]
    3252:	4829      	ldr	r0, [pc, #164]	; (32f8 <spi_write_reg+0xf8>)
    3254:	47b0      	blx	r6
    3256:	200d      	movs	r0, #13
    3258:	4b28      	ldr	r3, [pc, #160]	; (32fc <spi_write_reg+0xfc>)
    325a:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    325c:	2001      	movs	r0, #1
    325e:	4e28      	ldr	r6, [pc, #160]	; (3300 <spi_write_reg+0x100>)
    3260:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3262:	2300      	movs	r3, #0
    3264:	9300      	str	r3, [sp, #0]
    3266:	2200      	movs	r2, #0
    3268:	2100      	movs	r1, #0
    326a:	20cf      	movs	r0, #207	; 0xcf
    326c:	4f1b      	ldr	r7, [pc, #108]	; (32dc <spi_write_reg+0xdc>)
    326e:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    3270:	20cf      	movs	r0, #207	; 0xcf
    3272:	4b1c      	ldr	r3, [pc, #112]	; (32e4 <spi_write_reg+0xe4>)
    3274:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    3276:	22ea      	movs	r2, #234	; 0xea
    3278:	0092      	lsls	r2, r2, #2
    327a:	491c      	ldr	r1, [pc, #112]	; (32ec <spi_write_reg+0xec>)
    327c:	481c      	ldr	r0, [pc, #112]	; (32f0 <spi_write_reg+0xf0>)
    327e:	4f1d      	ldr	r7, [pc, #116]	; (32f4 <spi_write_reg+0xf4>)
    3280:	47b8      	blx	r7
    3282:	9b04      	ldr	r3, [sp, #16]
    3284:	9a03      	ldr	r2, [sp, #12]
    3286:	0029      	movs	r1, r5
    3288:	481e      	ldr	r0, [pc, #120]	; (3304 <spi_write_reg+0x104>)
    328a:	47b8      	blx	r7
    328c:	200d      	movs	r0, #13
    328e:	4b1b      	ldr	r3, [pc, #108]	; (32fc <spi_write_reg+0xfc>)
    3290:	4798      	blx	r3
		nm_bsp_sleep(1);
    3292:	2001      	movs	r0, #1
    3294:	47b0      	blx	r6
    3296:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    3298:	2d00      	cmp	r5, #0
    329a:	d016      	beq.n	32ca <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    329c:	464b      	mov	r3, r9
    329e:	9300      	str	r3, [sp, #0]
    32a0:	2304      	movs	r3, #4
    32a2:	9a04      	ldr	r2, [sp, #16]
    32a4:	9f03      	ldr	r7, [sp, #12]
    32a6:	0039      	movs	r1, r7
    32a8:	9805      	ldr	r0, [sp, #20]
    32aa:	47c0      	blx	r8
    32ac:	0004      	movs	r4, r0
	if (result != N_OK) {
    32ae:	2801      	cmp	r0, #1
    32b0:	d0c3      	beq.n	323a <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    32b2:	4a15      	ldr	r2, [pc, #84]	; (3308 <spi_write_reg+0x108>)
    32b4:	490d      	ldr	r1, [pc, #52]	; (32ec <spi_write_reg+0xec>)
    32b6:	480e      	ldr	r0, [pc, #56]	; (32f0 <spi_write_reg+0xf0>)
    32b8:	4e0e      	ldr	r6, [pc, #56]	; (32f4 <spi_write_reg+0xf4>)
    32ba:	47b0      	blx	r6
    32bc:	0039      	movs	r1, r7
    32be:	4813      	ldr	r0, [pc, #76]	; (330c <spi_write_reg+0x10c>)
    32c0:	47b0      	blx	r6
    32c2:	200d      	movs	r0, #13
    32c4:	4b0d      	ldr	r3, [pc, #52]	; (32fc <spi_write_reg+0xfc>)
    32c6:	4798      	blx	r3
		goto _FAIL_;
    32c8:	e7c8      	b.n	325c <spi_write_reg+0x5c>
	}

	return result;
}
    32ca:	0020      	movs	r0, r4
    32cc:	b006      	add	sp, #24
    32ce:	bc1c      	pop	{r2, r3, r4}
    32d0:	4690      	mov	r8, r2
    32d2:	4699      	mov	r9, r3
    32d4:	46a2      	mov	sl, r4
    32d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32d8:	0000d6cc 	.word	0x0000d6cc
    32dc:	00002e49 	.word	0x00002e49
    32e0:	0000d6cd 	.word	0x0000d6cd
    32e4:	00002fe9 	.word	0x00002fe9
    32e8:	00000395 	.word	0x00000395
    32ec:	0000d714 	.word	0x0000d714
    32f0:	0000d00c 	.word	0x0000d00c
    32f4:	0000b9b5 	.word	0x0000b9b5
    32f8:	0000dd4c 	.word	0x0000dd4c
    32fc:	0000b9e9 	.word	0x0000b9e9
    3300:	00001309 	.word	0x00001309
    3304:	0000dd84 	.word	0x0000dd84
    3308:	0000038f 	.word	0x0000038f
    330c:	0000dd20 	.word	0x0000dd20

00003310 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    3310:	b5f0      	push	{r4, r5, r6, r7, lr}
    3312:	46de      	mov	lr, fp
    3314:	4657      	mov	r7, sl
    3316:	464e      	mov	r6, r9
    3318:	4645      	mov	r5, r8
    331a:	b5e0      	push	{r5, r6, r7, lr}
    331c:	b087      	sub	sp, #28
    331e:	9002      	str	r0, [sp, #8]
    3320:	468b      	mov	fp, r1
    3322:	28ff      	cmp	r0, #255	; 0xff
    3324:	d80f      	bhi.n	3346 <spi_read_reg+0x36>
    3326:	4b41      	ldr	r3, [pc, #260]	; (342c <spi_read_reg+0x11c>)
    3328:	781f      	ldrb	r7, [r3, #0]
    332a:	b2fb      	uxtb	r3, r7
    332c:	9303      	str	r3, [sp, #12]
    332e:	2300      	movs	r3, #0
    3330:	22ff      	movs	r2, #255	; 0xff
    3332:	9902      	ldr	r1, [sp, #8]
    3334:	428a      	cmp	r2, r1
    3336:	415b      	adcs	r3, r3
    3338:	b2db      	uxtb	r3, r3
    333a:	469a      	mov	sl, r3
    333c:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    333e:	4b3c      	ldr	r3, [pc, #240]	; (3430 <spi_read_reg+0x120>)
    3340:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    3342:	46d1      	mov	r9, sl
    3344:	e031      	b.n	33aa <spi_read_reg+0x9a>
    3346:	4b3b      	ldr	r3, [pc, #236]	; (3434 <spi_read_reg+0x124>)
    3348:	781f      	ldrb	r7, [r3, #0]
    334a:	e7ee      	b.n	332a <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    334c:	9803      	ldr	r0, [sp, #12]
    334e:	4b3a      	ldr	r3, [pc, #232]	; (3438 <spi_read_reg+0x128>)
    3350:	4798      	blx	r3
    3352:	0004      	movs	r4, r0
	if (result != N_OK) {
    3354:	2801      	cmp	r0, #1
    3356:	d040      	beq.n	33da <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    3358:	4a38      	ldr	r2, [pc, #224]	; (343c <spi_read_reg+0x12c>)
    335a:	4939      	ldr	r1, [pc, #228]	; (3440 <spi_read_reg+0x130>)
    335c:	4839      	ldr	r0, [pc, #228]	; (3444 <spi_read_reg+0x134>)
    335e:	4e3a      	ldr	r6, [pc, #232]	; (3448 <spi_read_reg+0x138>)
    3360:	47b0      	blx	r6
    3362:	9902      	ldr	r1, [sp, #8]
    3364:	4839      	ldr	r0, [pc, #228]	; (344c <spi_read_reg+0x13c>)
    3366:	47b0      	blx	r6
    3368:	200d      	movs	r0, #13
    336a:	4b39      	ldr	r3, [pc, #228]	; (3450 <spi_read_reg+0x140>)
    336c:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    336e:	2001      	movs	r0, #1
    3370:	4e38      	ldr	r6, [pc, #224]	; (3454 <spi_read_reg+0x144>)
    3372:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3374:	2300      	movs	r3, #0
    3376:	9300      	str	r3, [sp, #0]
    3378:	2200      	movs	r2, #0
    337a:	2100      	movs	r1, #0
    337c:	20cf      	movs	r0, #207	; 0xcf
    337e:	4f2c      	ldr	r7, [pc, #176]	; (3430 <spi_read_reg+0x120>)
    3380:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    3382:	20cf      	movs	r0, #207	; 0xcf
    3384:	4b2c      	ldr	r3, [pc, #176]	; (3438 <spi_read_reg+0x128>)
    3386:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    3388:	4a33      	ldr	r2, [pc, #204]	; (3458 <spi_read_reg+0x148>)
    338a:	492d      	ldr	r1, [pc, #180]	; (3440 <spi_read_reg+0x130>)
    338c:	482d      	ldr	r0, [pc, #180]	; (3444 <spi_read_reg+0x134>)
    338e:	4f2e      	ldr	r7, [pc, #184]	; (3448 <spi_read_reg+0x138>)
    3390:	47b8      	blx	r7
    3392:	9a02      	ldr	r2, [sp, #8]
    3394:	0029      	movs	r1, r5
    3396:	4831      	ldr	r0, [pc, #196]	; (345c <spi_read_reg+0x14c>)
    3398:	47b8      	blx	r7
    339a:	200d      	movs	r0, #13
    339c:	4b2c      	ldr	r3, [pc, #176]	; (3450 <spi_read_reg+0x140>)
    339e:	4798      	blx	r3
		nm_bsp_sleep(1);
    33a0:	2001      	movs	r0, #1
    33a2:	47b0      	blx	r6
    33a4:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    33a6:	2d00      	cmp	r5, #0
    33a8:	d038      	beq.n	341c <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    33aa:	464b      	mov	r3, r9
    33ac:	9300      	str	r3, [sp, #0]
    33ae:	2304      	movs	r3, #4
    33b0:	2200      	movs	r2, #0
    33b2:	9f02      	ldr	r7, [sp, #8]
    33b4:	0039      	movs	r1, r7
    33b6:	9803      	ldr	r0, [sp, #12]
    33b8:	47c0      	blx	r8
    33ba:	0004      	movs	r4, r0
	if (result != N_OK) {
    33bc:	2801      	cmp	r0, #1
    33be:	d0c5      	beq.n	334c <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    33c0:	2282      	movs	r2, #130	; 0x82
    33c2:	00d2      	lsls	r2, r2, #3
    33c4:	491e      	ldr	r1, [pc, #120]	; (3440 <spi_read_reg+0x130>)
    33c6:	481f      	ldr	r0, [pc, #124]	; (3444 <spi_read_reg+0x134>)
    33c8:	4e1f      	ldr	r6, [pc, #124]	; (3448 <spi_read_reg+0x138>)
    33ca:	47b0      	blx	r6
    33cc:	0039      	movs	r1, r7
    33ce:	4824      	ldr	r0, [pc, #144]	; (3460 <spi_read_reg+0x150>)
    33d0:	47b0      	blx	r6
    33d2:	200d      	movs	r0, #13
    33d4:	4b1e      	ldr	r3, [pc, #120]	; (3450 <spi_read_reg+0x140>)
    33d6:	4798      	blx	r3
		goto _FAIL_;
    33d8:	e7c9      	b.n	336e <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    33da:	464a      	mov	r2, r9
    33dc:	2104      	movs	r1, #4
    33de:	a805      	add	r0, sp, #20
    33e0:	4b20      	ldr	r3, [pc, #128]	; (3464 <spi_read_reg+0x154>)
    33e2:	4798      	blx	r3
    33e4:	0004      	movs	r4, r0
	if (result != N_OK) {
    33e6:	2801      	cmp	r0, #1
    33e8:	d00b      	beq.n	3402 <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    33ea:	4a1f      	ldr	r2, [pc, #124]	; (3468 <spi_read_reg+0x158>)
    33ec:	4914      	ldr	r1, [pc, #80]	; (3440 <spi_read_reg+0x130>)
    33ee:	4815      	ldr	r0, [pc, #84]	; (3444 <spi_read_reg+0x134>)
    33f0:	4b15      	ldr	r3, [pc, #84]	; (3448 <spi_read_reg+0x138>)
    33f2:	4798      	blx	r3
    33f4:	481d      	ldr	r0, [pc, #116]	; (346c <spi_read_reg+0x15c>)
    33f6:	4b1e      	ldr	r3, [pc, #120]	; (3470 <spi_read_reg+0x160>)
    33f8:	4798      	blx	r3
    33fa:	200d      	movs	r0, #13
    33fc:	4b14      	ldr	r3, [pc, #80]	; (3450 <spi_read_reg+0x140>)
    33fe:	4798      	blx	r3
		goto _FAIL_;
    3400:	e7b5      	b.n	336e <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    3402:	aa05      	add	r2, sp, #20
    3404:	7853      	ldrb	r3, [r2, #1]
    3406:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    3408:	7891      	ldrb	r1, [r2, #2]
    340a:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    340c:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    340e:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    3410:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    3412:	78d2      	ldrb	r2, [r2, #3]
    3414:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    3416:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    3418:	465a      	mov	r2, fp
    341a:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    341c:	0020      	movs	r0, r4
    341e:	b007      	add	sp, #28
    3420:	bc3c      	pop	{r2, r3, r4, r5}
    3422:	4690      	mov	r8, r2
    3424:	4699      	mov	r9, r3
    3426:	46a2      	mov	sl, r4
    3428:	46ab      	mov	fp, r5
    342a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    342c:	0000d6ce 	.word	0x0000d6ce
    3430:	00002e49 	.word	0x00002e49
    3434:	0000d6cf 	.word	0x0000d6cf
    3438:	00002fe9 	.word	0x00002fe9
    343c:	00000416 	.word	0x00000416
    3440:	0000d734 	.word	0x0000d734
    3444:	0000d00c 	.word	0x0000d00c
    3448:	0000b9b5 	.word	0x0000b9b5
    344c:	0000dcb4 	.word	0x0000dcb4
    3450:	0000b9e9 	.word	0x0000b9e9
    3454:	00001309 	.word	0x00001309
    3458:	00000435 	.word	0x00000435
    345c:	0000dd08 	.word	0x0000dd08
    3460:	0000dc88 	.word	0x0000dc88
    3464:	000030bd 	.word	0x000030bd
    3468:	0000041d 	.word	0x0000041d
    346c:	0000dce8 	.word	0x0000dce8
    3470:	0000bad1 	.word	0x0000bad1

00003474 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    3474:	b510      	push	{r4, lr}
    3476:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    3478:	2300      	movs	r3, #0
    347a:	9300      	str	r3, [sp, #0]
    347c:	2200      	movs	r2, #0
    347e:	2100      	movs	r1, #0
    3480:	20cf      	movs	r0, #207	; 0xcf
    3482:	4c04      	ldr	r4, [pc, #16]	; (3494 <nm_spi_reset+0x20>)
    3484:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    3486:	20cf      	movs	r0, #207	; 0xcf
    3488:	4b03      	ldr	r3, [pc, #12]	; (3498 <nm_spi_reset+0x24>)
    348a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    348c:	2000      	movs	r0, #0
    348e:	b002      	add	sp, #8
    3490:	bd10      	pop	{r4, pc}
    3492:	46c0      	nop			; (mov r8, r8)
    3494:	00002e49 	.word	0x00002e49
    3498:	00002fe9 	.word	0x00002fe9

0000349c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    349c:	2200      	movs	r2, #0
    349e:	4b02      	ldr	r3, [pc, #8]	; (34a8 <nm_spi_deinit+0xc>)
    34a0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    34a2:	2000      	movs	r0, #0
    34a4:	4770      	bx	lr
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	200003ac 	.word	0x200003ac

000034ac <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    34ac:	b500      	push	{lr}
    34ae:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    34b0:	a901      	add	r1, sp, #4
    34b2:	4b02      	ldr	r3, [pc, #8]	; (34bc <nm_spi_read_reg+0x10>)
    34b4:	4798      	blx	r3

	return u32Val;
}
    34b6:	9801      	ldr	r0, [sp, #4]
    34b8:	b003      	add	sp, #12
    34ba:	bd00      	pop	{pc}
    34bc:	00003311 	.word	0x00003311

000034c0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    34c0:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    34c2:	4b04      	ldr	r3, [pc, #16]	; (34d4 <nm_spi_read_reg_with_ret+0x14>)
    34c4:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    34c6:	2300      	movs	r3, #0
    34c8:	2801      	cmp	r0, #1
    34ca:	d101      	bne.n	34d0 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    34cc:	0018      	movs	r0, r3
    34ce:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    34d0:	3b06      	subs	r3, #6
    34d2:	e7fb      	b.n	34cc <nm_spi_read_reg_with_ret+0xc>
    34d4:	00003311 	.word	0x00003311

000034d8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    34d8:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    34da:	4b04      	ldr	r3, [pc, #16]	; (34ec <nm_spi_write_reg+0x14>)
    34dc:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    34de:	2300      	movs	r3, #0
    34e0:	2801      	cmp	r0, #1
    34e2:	d101      	bne.n	34e8 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    34e4:	0018      	movs	r0, r3
    34e6:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    34e8:	3b06      	subs	r3, #6
    34ea:	e7fb      	b.n	34e4 <nm_spi_write_reg+0xc>
    34ec:	00003201 	.word	0x00003201

000034f0 <nm_spi_init>:
{
    34f0:	b510      	push	{r4, lr}
    34f2:	b082      	sub	sp, #8
	uint32 reg = 0;
    34f4:	2300      	movs	r3, #0
    34f6:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    34f8:	4a35      	ldr	r2, [pc, #212]	; (35d0 <nm_spi_init+0xe0>)
    34fa:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    34fc:	4669      	mov	r1, sp
    34fe:	4835      	ldr	r0, [pc, #212]	; (35d4 <nm_spi_init+0xe4>)
    3500:	4b35      	ldr	r3, [pc, #212]	; (35d8 <nm_spi_init+0xe8>)
    3502:	4798      	blx	r3
    3504:	2800      	cmp	r0, #0
    3506:	d028      	beq.n	355a <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    3508:	4b31      	ldr	r3, [pc, #196]	; (35d0 <nm_spi_init+0xe0>)
    350a:	781b      	ldrb	r3, [r3, #0]
    350c:	2b00      	cmp	r3, #0
    350e:	d10d      	bne.n	352c <nm_spi_init+0x3c>
		reg &= ~0x70;
    3510:	337c      	adds	r3, #124	; 0x7c
    3512:	9900      	ldr	r1, [sp, #0]
    3514:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    3516:	3b2c      	subs	r3, #44	; 0x2c
    3518:	4319      	orrs	r1, r3
    351a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    351c:	482d      	ldr	r0, [pc, #180]	; (35d4 <nm_spi_init+0xe4>)
    351e:	4b2f      	ldr	r3, [pc, #188]	; (35dc <nm_spi_init+0xec>)
    3520:	4798      	blx	r3
    3522:	1e04      	subs	r4, r0, #0
    3524:	d03a      	beq.n	359c <nm_spi_init+0xac>
		gu8Crc_off = 1;
    3526:	2201      	movs	r2, #1
    3528:	4b29      	ldr	r3, [pc, #164]	; (35d0 <nm_spi_init+0xe0>)
    352a:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    352c:	a901      	add	r1, sp, #4
    352e:	2080      	movs	r0, #128	; 0x80
    3530:	0140      	lsls	r0, r0, #5
    3532:	4b29      	ldr	r3, [pc, #164]	; (35d8 <nm_spi_init+0xe8>)
    3534:	4798      	blx	r3
    3536:	2800      	cmp	r0, #0
    3538:	d03c      	beq.n	35b4 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    353a:	4c26      	ldr	r4, [pc, #152]	; (35d4 <nm_spi_init+0xe4>)
    353c:	0020      	movs	r0, r4
    353e:	4b28      	ldr	r3, [pc, #160]	; (35e0 <nm_spi_init+0xf0>)
    3540:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    3542:	2370      	movs	r3, #112	; 0x70
    3544:	0001      	movs	r1, r0
    3546:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    3548:	2050      	movs	r0, #80	; 0x50
    354a:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    354c:	0020      	movs	r0, r4
    354e:	4b25      	ldr	r3, [pc, #148]	; (35e4 <nm_spi_init+0xf4>)
    3550:	4798      	blx	r3
	return M2M_SUCCESS;
    3552:	2400      	movs	r4, #0
}
    3554:	0020      	movs	r0, r4
    3556:	b002      	add	sp, #8
    3558:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    355a:	2201      	movs	r2, #1
    355c:	4b1c      	ldr	r3, [pc, #112]	; (35d0 <nm_spi_init+0xe0>)
    355e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    3560:	2298      	movs	r2, #152	; 0x98
    3562:	00d2      	lsls	r2, r2, #3
    3564:	4920      	ldr	r1, [pc, #128]	; (35e8 <nm_spi_init+0xf8>)
    3566:	4821      	ldr	r0, [pc, #132]	; (35ec <nm_spi_init+0xfc>)
    3568:	4b21      	ldr	r3, [pc, #132]	; (35f0 <nm_spi_init+0x100>)
    356a:	4798      	blx	r3
    356c:	4821      	ldr	r0, [pc, #132]	; (35f4 <nm_spi_init+0x104>)
    356e:	4b22      	ldr	r3, [pc, #136]	; (35f8 <nm_spi_init+0x108>)
    3570:	4798      	blx	r3
    3572:	200d      	movs	r0, #13
    3574:	4b21      	ldr	r3, [pc, #132]	; (35fc <nm_spi_init+0x10c>)
    3576:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    3578:	4669      	mov	r1, sp
    357a:	4816      	ldr	r0, [pc, #88]	; (35d4 <nm_spi_init+0xe4>)
    357c:	4b16      	ldr	r3, [pc, #88]	; (35d8 <nm_spi_init+0xe8>)
    357e:	4798      	blx	r3
    3580:	1e04      	subs	r4, r0, #0
    3582:	d1c1      	bne.n	3508 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    3584:	4a1e      	ldr	r2, [pc, #120]	; (3600 <nm_spi_init+0x110>)
    3586:	4918      	ldr	r1, [pc, #96]	; (35e8 <nm_spi_init+0xf8>)
    3588:	4818      	ldr	r0, [pc, #96]	; (35ec <nm_spi_init+0xfc>)
    358a:	4b19      	ldr	r3, [pc, #100]	; (35f0 <nm_spi_init+0x100>)
    358c:	4798      	blx	r3
    358e:	481d      	ldr	r0, [pc, #116]	; (3604 <nm_spi_init+0x114>)
    3590:	4b19      	ldr	r3, [pc, #100]	; (35f8 <nm_spi_init+0x108>)
    3592:	4798      	blx	r3
    3594:	200d      	movs	r0, #13
    3596:	4b19      	ldr	r3, [pc, #100]	; (35fc <nm_spi_init+0x10c>)
    3598:	4798      	blx	r3
			return 0;
    359a:	e7db      	b.n	3554 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    359c:	4a1a      	ldr	r2, [pc, #104]	; (3608 <nm_spi_init+0x118>)
    359e:	4912      	ldr	r1, [pc, #72]	; (35e8 <nm_spi_init+0xf8>)
    35a0:	4812      	ldr	r0, [pc, #72]	; (35ec <nm_spi_init+0xfc>)
    35a2:	4b13      	ldr	r3, [pc, #76]	; (35f0 <nm_spi_init+0x100>)
    35a4:	4798      	blx	r3
    35a6:	4819      	ldr	r0, [pc, #100]	; (360c <nm_spi_init+0x11c>)
    35a8:	4b13      	ldr	r3, [pc, #76]	; (35f8 <nm_spi_init+0x108>)
    35aa:	4798      	blx	r3
    35ac:	200d      	movs	r0, #13
    35ae:	4b13      	ldr	r3, [pc, #76]	; (35fc <nm_spi_init+0x10c>)
    35b0:	4798      	blx	r3
			return 0;
    35b2:	e7cf      	b.n	3554 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    35b4:	4a16      	ldr	r2, [pc, #88]	; (3610 <nm_spi_init+0x120>)
    35b6:	490c      	ldr	r1, [pc, #48]	; (35e8 <nm_spi_init+0xf8>)
    35b8:	480c      	ldr	r0, [pc, #48]	; (35ec <nm_spi_init+0xfc>)
    35ba:	4b0d      	ldr	r3, [pc, #52]	; (35f0 <nm_spi_init+0x100>)
    35bc:	4798      	blx	r3
    35be:	4815      	ldr	r0, [pc, #84]	; (3614 <nm_spi_init+0x124>)
    35c0:	4b0d      	ldr	r3, [pc, #52]	; (35f8 <nm_spi_init+0x108>)
    35c2:	4798      	blx	r3
    35c4:	200d      	movs	r0, #13
    35c6:	4b0d      	ldr	r3, [pc, #52]	; (35fc <nm_spi_init+0x10c>)
    35c8:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    35ca:	2406      	movs	r4, #6
    35cc:	4264      	negs	r4, r4
    35ce:	e7c1      	b.n	3554 <nm_spi_init+0x64>
    35d0:	200003ac 	.word	0x200003ac
    35d4:	0000e824 	.word	0x0000e824
    35d8:	00003311 	.word	0x00003311
    35dc:	00003201 	.word	0x00003201
    35e0:	000034ad 	.word	0x000034ad
    35e4:	000034d9 	.word	0x000034d9
    35e8:	0000d750 	.word	0x0000d750
    35ec:	0000d00c 	.word	0x0000d00c
    35f0:	0000b9b5 	.word	0x0000b9b5
    35f4:	0000d85c 	.word	0x0000d85c
    35f8:	0000bad1 	.word	0x0000bad1
    35fc:	0000b9e9 	.word	0x0000b9e9
    3600:	000004c3 	.word	0x000004c3
    3604:	0000d8ac 	.word	0x0000d8ac
    3608:	000004cd 	.word	0x000004cd
    360c:	0000d8d8 	.word	0x0000d8d8
    3610:	000004d7 	.word	0x000004d7
    3614:	0000d90c 	.word	0x0000d90c

00003618 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3618:	b5f0      	push	{r4, r5, r6, r7, lr}
    361a:	46de      	mov	lr, fp
    361c:	4657      	mov	r7, sl
    361e:	464e      	mov	r6, r9
    3620:	4645      	mov	r5, r8
    3622:	b5e0      	push	{r5, r6, r7, lr}
    3624:	b087      	sub	sp, #28
    3626:	9002      	str	r0, [sp, #8]
    3628:	9103      	str	r1, [sp, #12]
    362a:	0016      	movs	r6, r2
    362c:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    362e:	2300      	movs	r3, #0
    3630:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    3632:	2400      	movs	r4, #0
    3634:	4b3e      	ldr	r3, [pc, #248]	; (3730 <nm_spi_read_block+0x118>)
    3636:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    3638:	46a9      	mov	r9, r5
    363a:	e037      	b.n	36ac <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    363c:	2301      	movs	r3, #1
    363e:	469b      	mov	fp, r3
		size = 2;
    3640:	3601      	adds	r6, #1
    3642:	e035      	b.n	36b0 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    3644:	20c8      	movs	r0, #200	; 0xc8
    3646:	4b3b      	ldr	r3, [pc, #236]	; (3734 <nm_spi_read_block+0x11c>)
    3648:	4798      	blx	r3
	if (result != N_OK) {
    364a:	2801      	cmp	r0, #1
    364c:	d045      	beq.n	36da <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    364e:	4a3a      	ldr	r2, [pc, #232]	; (3738 <nm_spi_read_block+0x120>)
    3650:	493a      	ldr	r1, [pc, #232]	; (373c <nm_spi_read_block+0x124>)
    3652:	483b      	ldr	r0, [pc, #236]	; (3740 <nm_spi_read_block+0x128>)
    3654:	4f3b      	ldr	r7, [pc, #236]	; (3744 <nm_spi_read_block+0x12c>)
    3656:	47b8      	blx	r7
    3658:	9902      	ldr	r1, [sp, #8]
    365a:	483b      	ldr	r0, [pc, #236]	; (3748 <nm_spi_read_block+0x130>)
    365c:	47b8      	blx	r7
    365e:	200d      	movs	r0, #13
    3660:	4b3a      	ldr	r3, [pc, #232]	; (374c <nm_spi_read_block+0x134>)
    3662:	4798      	blx	r3
		nm_bsp_sleep(1);
    3664:	2001      	movs	r0, #1
    3666:	4f3a      	ldr	r7, [pc, #232]	; (3750 <nm_spi_read_block+0x138>)
    3668:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    366a:	9400      	str	r4, [sp, #0]
    366c:	0023      	movs	r3, r4
    366e:	0022      	movs	r2, r4
    3670:	0021      	movs	r1, r4
    3672:	20cf      	movs	r0, #207	; 0xcf
    3674:	4d2e      	ldr	r5, [pc, #184]	; (3730 <nm_spi_read_block+0x118>)
    3676:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    3678:	20cf      	movs	r0, #207	; 0xcf
    367a:	4b2e      	ldr	r3, [pc, #184]	; (3734 <nm_spi_read_block+0x11c>)
    367c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    367e:	4a35      	ldr	r2, [pc, #212]	; (3754 <nm_spi_read_block+0x13c>)
    3680:	492e      	ldr	r1, [pc, #184]	; (373c <nm_spi_read_block+0x124>)
    3682:	482f      	ldr	r0, [pc, #188]	; (3740 <nm_spi_read_block+0x128>)
    3684:	4b2f      	ldr	r3, [pc, #188]	; (3744 <nm_spi_read_block+0x12c>)
    3686:	469a      	mov	sl, r3
    3688:	4798      	blx	r3
    368a:	0033      	movs	r3, r6
    368c:	9a02      	ldr	r2, [sp, #8]
    368e:	4649      	mov	r1, r9
    3690:	4831      	ldr	r0, [pc, #196]	; (3758 <nm_spi_read_block+0x140>)
    3692:	47d0      	blx	sl
    3694:	200d      	movs	r0, #13
    3696:	4b2d      	ldr	r3, [pc, #180]	; (374c <nm_spi_read_block+0x134>)
    3698:	4798      	blx	r3
		nm_bsp_sleep(1);
    369a:	2001      	movs	r0, #1
    369c:	47b8      	blx	r7
    369e:	2301      	movs	r3, #1
    36a0:	425b      	negs	r3, r3
    36a2:	469c      	mov	ip, r3
    36a4:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    36a6:	464b      	mov	r3, r9
    36a8:	2b00      	cmp	r3, #0
    36aa:	d038      	beq.n	371e <nm_spi_read_block+0x106>
	if (size == 1)
    36ac:	2e01      	cmp	r6, #1
    36ae:	d0c5      	beq.n	363c <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    36b0:	9400      	str	r4, [sp, #0]
    36b2:	0033      	movs	r3, r6
    36b4:	0022      	movs	r2, r4
    36b6:	9d02      	ldr	r5, [sp, #8]
    36b8:	0029      	movs	r1, r5
    36ba:	20c8      	movs	r0, #200	; 0xc8
    36bc:	47c0      	blx	r8
	if (result != N_OK) {
    36be:	2801      	cmp	r0, #1
    36c0:	d0c0      	beq.n	3644 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    36c2:	4a26      	ldr	r2, [pc, #152]	; (375c <nm_spi_read_block+0x144>)
    36c4:	491d      	ldr	r1, [pc, #116]	; (373c <nm_spi_read_block+0x124>)
    36c6:	481e      	ldr	r0, [pc, #120]	; (3740 <nm_spi_read_block+0x128>)
    36c8:	4f1e      	ldr	r7, [pc, #120]	; (3744 <nm_spi_read_block+0x12c>)
    36ca:	47b8      	blx	r7
    36cc:	0029      	movs	r1, r5
    36ce:	4824      	ldr	r0, [pc, #144]	; (3760 <nm_spi_read_block+0x148>)
    36d0:	47b8      	blx	r7
    36d2:	200d      	movs	r0, #13
    36d4:	4b1d      	ldr	r3, [pc, #116]	; (374c <nm_spi_read_block+0x134>)
    36d6:	4798      	blx	r3
    36d8:	e7c4      	b.n	3664 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    36da:	465b      	mov	r3, fp
    36dc:	2b00      	cmp	r3, #0
    36de:	d016      	beq.n	370e <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    36e0:	af05      	add	r7, sp, #20
    36e2:	0022      	movs	r2, r4
    36e4:	0031      	movs	r1, r6
    36e6:	0038      	movs	r0, r7
    36e8:	4b1e      	ldr	r3, [pc, #120]	; (3764 <nm_spi_read_block+0x14c>)
    36ea:	4798      	blx	r3
		buf[0] = tmp[0];
    36ec:	783b      	ldrb	r3, [r7, #0]
    36ee:	9a03      	ldr	r2, [sp, #12]
    36f0:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    36f2:	2801      	cmp	r0, #1
    36f4:	d011      	beq.n	371a <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    36f6:	4a1c      	ldr	r2, [pc, #112]	; (3768 <nm_spi_read_block+0x150>)
    36f8:	4910      	ldr	r1, [pc, #64]	; (373c <nm_spi_read_block+0x124>)
    36fa:	4811      	ldr	r0, [pc, #68]	; (3740 <nm_spi_read_block+0x128>)
    36fc:	4b11      	ldr	r3, [pc, #68]	; (3744 <nm_spi_read_block+0x12c>)
    36fe:	4798      	blx	r3
    3700:	481a      	ldr	r0, [pc, #104]	; (376c <nm_spi_read_block+0x154>)
    3702:	4b1b      	ldr	r3, [pc, #108]	; (3770 <nm_spi_read_block+0x158>)
    3704:	4798      	blx	r3
    3706:	200d      	movs	r0, #13
    3708:	4b10      	ldr	r3, [pc, #64]	; (374c <nm_spi_read_block+0x134>)
    370a:	4798      	blx	r3
    370c:	e7aa      	b.n	3664 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    370e:	0022      	movs	r2, r4
    3710:	0031      	movs	r1, r6
    3712:	9803      	ldr	r0, [sp, #12]
    3714:	4b13      	ldr	r3, [pc, #76]	; (3764 <nm_spi_read_block+0x14c>)
    3716:	4798      	blx	r3
    3718:	e7eb      	b.n	36f2 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    371a:	2000      	movs	r0, #0
    371c:	e001      	b.n	3722 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    371e:	2006      	movs	r0, #6
    3720:	4240      	negs	r0, r0

	return s8Ret;
}
    3722:	b007      	add	sp, #28
    3724:	bc3c      	pop	{r2, r3, r4, r5}
    3726:	4690      	mov	r8, r2
    3728:	4699      	mov	r9, r3
    372a:	46a2      	mov	sl, r4
    372c:	46ab      	mov	fp, r5
    372e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3730:	00002e49 	.word	0x00002e49
    3734:	00002fe9 	.word	0x00002fe9
    3738:	0000045c 	.word	0x0000045c
    373c:	0000d744 	.word	0x0000d744
    3740:	0000d00c 	.word	0x0000d00c
    3744:	0000b9b5 	.word	0x0000b9b5
    3748:	0000d960 	.word	0x0000d960
    374c:	0000b9e9 	.word	0x0000b9e9
    3750:	00001309 	.word	0x00001309
    3754:	0000047d 	.word	0x0000047d
    3758:	0000d9c0 	.word	0x0000d9c0
    375c:	00000456 	.word	0x00000456
    3760:	0000d930 	.word	0x0000d930
    3764:	000030bd 	.word	0x000030bd
    3768:	0000046c 	.word	0x0000046c
    376c:	0000d998 	.word	0x0000d998
    3770:	0000bad1 	.word	0x0000bad1

00003774 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    3774:	b5f0      	push	{r4, r5, r6, r7, lr}
    3776:	46de      	mov	lr, fp
    3778:	4647      	mov	r7, r8
    377a:	b580      	push	{r7, lr}
    377c:	b089      	sub	sp, #36	; 0x24
    377e:	9004      	str	r0, [sp, #16]
    3780:	468b      	mov	fp, r1
    3782:	9203      	str	r2, [sp, #12]
    3784:	260a      	movs	r6, #10
    3786:	2780      	movs	r7, #128	; 0x80
    3788:	01bf      	lsls	r7, r7, #6
    378a:	466b      	mov	r3, sp
    378c:	82df      	strh	r7, [r3, #22]
    378e:	0035      	movs	r5, r6
    3790:	e02d      	b.n	37ee <nm_spi_write_block+0x7a>
		size = 2;
    3792:	3301      	adds	r3, #1
    3794:	9303      	str	r3, [sp, #12]
    3796:	e02d      	b.n	37f4 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    3798:	4a82      	ldr	r2, [pc, #520]	; (39a4 <nm_spi_write_block+0x230>)
    379a:	4983      	ldr	r1, [pc, #524]	; (39a8 <nm_spi_write_block+0x234>)
    379c:	4883      	ldr	r0, [pc, #524]	; (39ac <nm_spi_write_block+0x238>)
    379e:	4c84      	ldr	r4, [pc, #528]	; (39b0 <nm_spi_write_block+0x23c>)
    37a0:	47a0      	blx	r4
    37a2:	0031      	movs	r1, r6
    37a4:	4883      	ldr	r0, [pc, #524]	; (39b4 <nm_spi_write_block+0x240>)
    37a6:	47a0      	blx	r4
    37a8:	200d      	movs	r0, #13
    37aa:	4b83      	ldr	r3, [pc, #524]	; (39b8 <nm_spi_write_block+0x244>)
    37ac:	4798      	blx	r3
		nm_bsp_sleep(1);
    37ae:	2001      	movs	r0, #1
    37b0:	4c82      	ldr	r4, [pc, #520]	; (39bc <nm_spi_write_block+0x248>)
    37b2:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    37b4:	2300      	movs	r3, #0
    37b6:	9300      	str	r3, [sp, #0]
    37b8:	2200      	movs	r2, #0
    37ba:	2100      	movs	r1, #0
    37bc:	20cf      	movs	r0, #207	; 0xcf
    37be:	4e80      	ldr	r6, [pc, #512]	; (39c0 <nm_spi_write_block+0x24c>)
    37c0:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    37c2:	20cf      	movs	r0, #207	; 0xcf
    37c4:	4b7f      	ldr	r3, [pc, #508]	; (39c4 <nm_spi_write_block+0x250>)
    37c6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    37c8:	4a7f      	ldr	r2, [pc, #508]	; (39c8 <nm_spi_write_block+0x254>)
    37ca:	4977      	ldr	r1, [pc, #476]	; (39a8 <nm_spi_write_block+0x234>)
    37cc:	4877      	ldr	r0, [pc, #476]	; (39ac <nm_spi_write_block+0x238>)
    37ce:	4e78      	ldr	r6, [pc, #480]	; (39b0 <nm_spi_write_block+0x23c>)
    37d0:	47b0      	blx	r6
    37d2:	9b03      	ldr	r3, [sp, #12]
    37d4:	9a04      	ldr	r2, [sp, #16]
    37d6:	0029      	movs	r1, r5
    37d8:	487c      	ldr	r0, [pc, #496]	; (39cc <nm_spi_write_block+0x258>)
    37da:	47b0      	blx	r6
    37dc:	200d      	movs	r0, #13
    37de:	4b76      	ldr	r3, [pc, #472]	; (39b8 <nm_spi_write_block+0x244>)
    37e0:	4798      	blx	r3
		nm_bsp_sleep(1);
    37e2:	2001      	movs	r0, #1
    37e4:	47a0      	blx	r4
    37e6:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    37e8:	2d00      	cmp	r5, #0
    37ea:	d100      	bne.n	37ee <nm_spi_write_block+0x7a>
    37ec:	e0d2      	b.n	3994 <nm_spi_write_block+0x220>
	if (size == 1)
    37ee:	9b03      	ldr	r3, [sp, #12]
    37f0:	2b01      	cmp	r3, #1
    37f2:	d0ce      	beq.n	3792 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    37f4:	2300      	movs	r3, #0
    37f6:	9300      	str	r3, [sp, #0]
    37f8:	9b03      	ldr	r3, [sp, #12]
    37fa:	2200      	movs	r2, #0
    37fc:	9e04      	ldr	r6, [sp, #16]
    37fe:	0031      	movs	r1, r6
    3800:	20c7      	movs	r0, #199	; 0xc7
    3802:	4c6f      	ldr	r4, [pc, #444]	; (39c0 <nm_spi_write_block+0x24c>)
    3804:	47a0      	blx	r4
	if (result != N_OK) {
    3806:	2801      	cmp	r0, #1
    3808:	d1c6      	bne.n	3798 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    380a:	20c7      	movs	r0, #199	; 0xc7
    380c:	4b6d      	ldr	r3, [pc, #436]	; (39c4 <nm_spi_write_block+0x250>)
    380e:	4798      	blx	r3
	if (result != N_OK) {
    3810:	2801      	cmp	r0, #1
    3812:	d00b      	beq.n	382c <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    3814:	4a6e      	ldr	r2, [pc, #440]	; (39d0 <nm_spi_write_block+0x25c>)
    3816:	4964      	ldr	r1, [pc, #400]	; (39a8 <nm_spi_write_block+0x234>)
    3818:	4864      	ldr	r0, [pc, #400]	; (39ac <nm_spi_write_block+0x238>)
    381a:	4c65      	ldr	r4, [pc, #404]	; (39b0 <nm_spi_write_block+0x23c>)
    381c:	47a0      	blx	r4
    381e:	9904      	ldr	r1, [sp, #16]
    3820:	486c      	ldr	r0, [pc, #432]	; (39d4 <nm_spi_write_block+0x260>)
    3822:	47a0      	blx	r4
    3824:	200d      	movs	r0, #13
    3826:	4b64      	ldr	r3, [pc, #400]	; (39b8 <nm_spi_write_block+0x244>)
    3828:	4798      	blx	r3
    382a:	e7c0      	b.n	37ae <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    382c:	2200      	movs	r2, #0
    382e:	ab07      	add	r3, sp, #28
    3830:	801a      	strh	r2, [r3, #0]
    3832:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    3834:	2600      	movs	r6, #0
				order = 0x1;
    3836:	46a8      	mov	r8, r5
    3838:	0035      	movs	r5, r6
    383a:	0026      	movs	r6, r4
    383c:	e021      	b.n	3882 <nm_spi_write_block+0x10e>
				order = 0x2;
    383e:	2300      	movs	r3, #0
    3840:	42b7      	cmp	r7, r6
    3842:	415b      	adcs	r3, r3
    3844:	3302      	adds	r3, #2
		cmd |= order;
    3846:	200b      	movs	r0, #11
    3848:	aa04      	add	r2, sp, #16
    384a:	4694      	mov	ip, r2
    384c:	4460      	add	r0, ip
    384e:	2210      	movs	r2, #16
    3850:	4252      	negs	r2, r2
    3852:	4313      	orrs	r3, r2
    3854:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    3856:	2101      	movs	r1, #1
    3858:	4b5f      	ldr	r3, [pc, #380]	; (39d8 <nm_spi_write_block+0x264>)
    385a:	4798      	blx	r3
    385c:	2800      	cmp	r0, #0
    385e:	d11d      	bne.n	389c <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    3860:	465b      	mov	r3, fp
    3862:	1958      	adds	r0, r3, r5
    3864:	0021      	movs	r1, r4
    3866:	4b5c      	ldr	r3, [pc, #368]	; (39d8 <nm_spi_write_block+0x264>)
    3868:	4798      	blx	r3
    386a:	2800      	cmp	r0, #0
    386c:	d12e      	bne.n	38cc <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    386e:	4b5b      	ldr	r3, [pc, #364]	; (39dc <nm_spi_write_block+0x268>)
    3870:	781b      	ldrb	r3, [r3, #0]
    3872:	2b00      	cmp	r3, #0
    3874:	d037      	beq.n	38e6 <nm_spi_write_block+0x172>
		ix += nbytes;
    3876:	1965      	adds	r5, r4, r5
    3878:	b22d      	sxth	r5, r5
		sz -= nbytes;
    387a:	1b36      	subs	r6, r6, r4
    387c:	b2b6      	uxth	r6, r6
	} while (sz);
    387e:	2e00      	cmp	r6, #0
    3880:	d052      	beq.n	3928 <nm_spi_write_block+0x1b4>
    3882:	1c34      	adds	r4, r6, #0
    3884:	42be      	cmp	r6, r7
    3886:	d901      	bls.n	388c <nm_spi_write_block+0x118>
    3888:	466b      	mov	r3, sp
    388a:	8adc      	ldrh	r4, [r3, #22]
    388c:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    388e:	2d00      	cmp	r5, #0
    3890:	d1d5      	bne.n	383e <nm_spi_write_block+0xca>
				order = 0x3;
    3892:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    3894:	42be      	cmp	r6, r7
    3896:	d9d6      	bls.n	3846 <nm_spi_write_block+0xd2>
				order = 0x1;
    3898:	3b02      	subs	r3, #2
    389a:	e7d4      	b.n	3846 <nm_spi_write_block+0xd2>
    389c:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    389e:	4a50      	ldr	r2, [pc, #320]	; (39e0 <nm_spi_write_block+0x26c>)
    38a0:	4950      	ldr	r1, [pc, #320]	; (39e4 <nm_spi_write_block+0x270>)
    38a2:	4842      	ldr	r0, [pc, #264]	; (39ac <nm_spi_write_block+0x238>)
    38a4:	4b42      	ldr	r3, [pc, #264]	; (39b0 <nm_spi_write_block+0x23c>)
    38a6:	4798      	blx	r3
    38a8:	484f      	ldr	r0, [pc, #316]	; (39e8 <nm_spi_write_block+0x274>)
    38aa:	4b50      	ldr	r3, [pc, #320]	; (39ec <nm_spi_write_block+0x278>)
    38ac:	4798      	blx	r3
    38ae:	200d      	movs	r0, #13
    38b0:	4b41      	ldr	r3, [pc, #260]	; (39b8 <nm_spi_write_block+0x244>)
    38b2:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    38b4:	4a4e      	ldr	r2, [pc, #312]	; (39f0 <nm_spi_write_block+0x27c>)
    38b6:	493c      	ldr	r1, [pc, #240]	; (39a8 <nm_spi_write_block+0x234>)
    38b8:	483c      	ldr	r0, [pc, #240]	; (39ac <nm_spi_write_block+0x238>)
    38ba:	4b3d      	ldr	r3, [pc, #244]	; (39b0 <nm_spi_write_block+0x23c>)
    38bc:	4798      	blx	r3
    38be:	484d      	ldr	r0, [pc, #308]	; (39f4 <nm_spi_write_block+0x280>)
    38c0:	4b4a      	ldr	r3, [pc, #296]	; (39ec <nm_spi_write_block+0x278>)
    38c2:	4798      	blx	r3
    38c4:	200d      	movs	r0, #13
    38c6:	4b3c      	ldr	r3, [pc, #240]	; (39b8 <nm_spi_write_block+0x244>)
    38c8:	4798      	blx	r3
    38ca:	e770      	b.n	37ae <nm_spi_write_block+0x3a>
    38cc:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    38ce:	4a4a      	ldr	r2, [pc, #296]	; (39f8 <nm_spi_write_block+0x284>)
    38d0:	4944      	ldr	r1, [pc, #272]	; (39e4 <nm_spi_write_block+0x270>)
    38d2:	4836      	ldr	r0, [pc, #216]	; (39ac <nm_spi_write_block+0x238>)
    38d4:	4b36      	ldr	r3, [pc, #216]	; (39b0 <nm_spi_write_block+0x23c>)
    38d6:	4798      	blx	r3
    38d8:	4848      	ldr	r0, [pc, #288]	; (39fc <nm_spi_write_block+0x288>)
    38da:	4b44      	ldr	r3, [pc, #272]	; (39ec <nm_spi_write_block+0x278>)
    38dc:	4798      	blx	r3
    38de:	200d      	movs	r0, #13
    38e0:	4b35      	ldr	r3, [pc, #212]	; (39b8 <nm_spi_write_block+0x244>)
    38e2:	4798      	blx	r3
    38e4:	e7e6      	b.n	38b4 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    38e6:	2102      	movs	r1, #2
    38e8:	a807      	add	r0, sp, #28
    38ea:	4b3b      	ldr	r3, [pc, #236]	; (39d8 <nm_spi_write_block+0x264>)
    38ec:	4798      	blx	r3
    38ee:	2800      	cmp	r0, #0
    38f0:	d0c1      	beq.n	3876 <nm_spi_write_block+0x102>
    38f2:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    38f4:	22d7      	movs	r2, #215	; 0xd7
    38f6:	0092      	lsls	r2, r2, #2
    38f8:	493a      	ldr	r1, [pc, #232]	; (39e4 <nm_spi_write_block+0x270>)
    38fa:	482c      	ldr	r0, [pc, #176]	; (39ac <nm_spi_write_block+0x238>)
    38fc:	4b2c      	ldr	r3, [pc, #176]	; (39b0 <nm_spi_write_block+0x23c>)
    38fe:	4798      	blx	r3
    3900:	483f      	ldr	r0, [pc, #252]	; (3a00 <nm_spi_write_block+0x28c>)
    3902:	4b3a      	ldr	r3, [pc, #232]	; (39ec <nm_spi_write_block+0x278>)
    3904:	4798      	blx	r3
    3906:	200d      	movs	r0, #13
    3908:	4b2b      	ldr	r3, [pc, #172]	; (39b8 <nm_spi_write_block+0x244>)
    390a:	4798      	blx	r3
    390c:	e7d2      	b.n	38b4 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    390e:	229a      	movs	r2, #154	; 0x9a
    3910:	0052      	lsls	r2, r2, #1
    3912:	493c      	ldr	r1, [pc, #240]	; (3a04 <nm_spi_write_block+0x290>)
    3914:	4825      	ldr	r0, [pc, #148]	; (39ac <nm_spi_write_block+0x238>)
    3916:	4b26      	ldr	r3, [pc, #152]	; (39b0 <nm_spi_write_block+0x23c>)
    3918:	4798      	blx	r3
    391a:	483b      	ldr	r0, [pc, #236]	; (3a08 <nm_spi_write_block+0x294>)
    391c:	4b33      	ldr	r3, [pc, #204]	; (39ec <nm_spi_write_block+0x278>)
    391e:	4798      	blx	r3
    3920:	200d      	movs	r0, #13
    3922:	4b25      	ldr	r3, [pc, #148]	; (39b8 <nm_spi_write_block+0x244>)
    3924:	4798      	blx	r3
    3926:	e027      	b.n	3978 <nm_spi_write_block+0x204>
    3928:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    392a:	4b2c      	ldr	r3, [pc, #176]	; (39dc <nm_spi_write_block+0x268>)
    392c:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    392e:	1e63      	subs	r3, r4, #1
    3930:	419c      	sbcs	r4, r3
    3932:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    3934:	b2a1      	uxth	r1, r4
    3936:	a807      	add	r0, sp, #28
    3938:	4b34      	ldr	r3, [pc, #208]	; (3a0c <nm_spi_write_block+0x298>)
    393a:	4798      	blx	r3
    393c:	2800      	cmp	r0, #0
    393e:	d1e6      	bne.n	390e <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    3940:	ab08      	add	r3, sp, #32
    3942:	191b      	adds	r3, r3, r4
    3944:	3b05      	subs	r3, #5
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	2b00      	cmp	r3, #0
    394a:	d106      	bne.n	395a <nm_spi_write_block+0x1e6>
    394c:	ab08      	add	r3, sp, #32
    394e:	469c      	mov	ip, r3
    3950:	4464      	add	r4, ip
    3952:	3c06      	subs	r4, #6
    3954:	7823      	ldrb	r3, [r4, #0]
    3956:	2bc3      	cmp	r3, #195	; 0xc3
    3958:	d01a      	beq.n	3990 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    395a:	223c      	movs	r2, #60	; 0x3c
    395c:	32ff      	adds	r2, #255	; 0xff
    395e:	4929      	ldr	r1, [pc, #164]	; (3a04 <nm_spi_write_block+0x290>)
    3960:	4812      	ldr	r0, [pc, #72]	; (39ac <nm_spi_write_block+0x238>)
    3962:	4c13      	ldr	r4, [pc, #76]	; (39b0 <nm_spi_write_block+0x23c>)
    3964:	47a0      	blx	r4
    3966:	a907      	add	r1, sp, #28
    3968:	788b      	ldrb	r3, [r1, #2]
    396a:	784a      	ldrb	r2, [r1, #1]
    396c:	7809      	ldrb	r1, [r1, #0]
    396e:	4828      	ldr	r0, [pc, #160]	; (3a10 <nm_spi_write_block+0x29c>)
    3970:	47a0      	blx	r4
    3972:	200d      	movs	r0, #13
    3974:	4b10      	ldr	r3, [pc, #64]	; (39b8 <nm_spi_write_block+0x244>)
    3976:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    3978:	4a26      	ldr	r2, [pc, #152]	; (3a14 <nm_spi_write_block+0x2a0>)
    397a:	490b      	ldr	r1, [pc, #44]	; (39a8 <nm_spi_write_block+0x234>)
    397c:	480b      	ldr	r0, [pc, #44]	; (39ac <nm_spi_write_block+0x238>)
    397e:	4b0c      	ldr	r3, [pc, #48]	; (39b0 <nm_spi_write_block+0x23c>)
    3980:	4798      	blx	r3
    3982:	481c      	ldr	r0, [pc, #112]	; (39f4 <nm_spi_write_block+0x280>)
    3984:	4b19      	ldr	r3, [pc, #100]	; (39ec <nm_spi_write_block+0x278>)
    3986:	4798      	blx	r3
    3988:	200d      	movs	r0, #13
    398a:	4b0b      	ldr	r3, [pc, #44]	; (39b8 <nm_spi_write_block+0x244>)
    398c:	4798      	blx	r3
    398e:	e70e      	b.n	37ae <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    3990:	2000      	movs	r0, #0
    3992:	e001      	b.n	3998 <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    3994:	2006      	movs	r0, #6
    3996:	4240      	negs	r0, r0

	return s8Ret;
}
    3998:	b009      	add	sp, #36	; 0x24
    399a:	bc0c      	pop	{r2, r3}
    399c:	4690      	mov	r8, r2
    399e:	469b      	mov	fp, r3
    39a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39a2:	46c0      	nop			; (mov r8, r8)
    39a4:	000003c3 	.word	0x000003c3
    39a8:	0000d724 	.word	0x0000d724
    39ac:	0000d00c 	.word	0x0000d00c
    39b0:	0000b9b5 	.word	0x0000b9b5
    39b4:	0000d9dc 	.word	0x0000d9dc
    39b8:	0000b9e9 	.word	0x0000b9e9
    39bc:	00001309 	.word	0x00001309
    39c0:	00002e49 	.word	0x00002e49
    39c4:	00002fe9 	.word	0x00002fe9
    39c8:	000003eb 	.word	0x000003eb
    39cc:	0000d9c0 	.word	0x0000d9c0
    39d0:	000003c9 	.word	0x000003c9
    39d4:	0000da0c 	.word	0x0000da0c
    39d8:	00002e29 	.word	0x00002e29
    39dc:	200003ac 	.word	0x200003ac
    39e0:	00000349 	.word	0x00000349
    39e4:	0000d704 	.word	0x0000d704
    39e8:	0000da44 	.word	0x0000da44
    39ec:	0000bad1 	.word	0x0000bad1
    39f0:	000003d9 	.word	0x000003d9
    39f4:	0000db38 	.word	0x0000db38
    39f8:	00000352 	.word	0x00000352
    39fc:	0000da7c 	.word	0x0000da7c
    3a00:	0000dab0 	.word	0x0000dab0
    3a04:	0000d6d8 	.word	0x0000d6d8
    3a08:	0000dae8 	.word	0x0000dae8
    3a0c:	00002fc9 	.word	0x00002fc9
    3a10:	0000db08 	.word	0x0000db08
    3a14:	000003e1 	.word	0x000003e1

00003a18 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    3a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a1a:	46d6      	mov	lr, sl
    3a1c:	4647      	mov	r7, r8
    3a1e:	b580      	push	{r7, lr}
    3a20:	b089      	sub	sp, #36	; 0x24
    3a22:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    3a24:	2802      	cmp	r0, #2
    3a26:	d000      	beq.n	3a2a <socket+0x12>
    3a28:	e09c      	b.n	3b64 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    3a2a:	2901      	cmp	r1, #1
    3a2c:	d00a      	beq.n	3a44 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    3a2e:	2902      	cmp	r1, #2
    3a30:	d100      	bne.n	3a34 <socket+0x1c>
    3a32:	e070      	b.n	3b16 <socket+0xfe>
	SOCKET					sock = -1;
    3a34:	2501      	movs	r5, #1
    3a36:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    3a38:	0028      	movs	r0, r5
    3a3a:	b009      	add	sp, #36	; 0x24
    3a3c:	bc0c      	pop	{r2, r3}
    3a3e:	4690      	mov	r8, r2
    3a40:	469a      	mov	sl, r3
    3a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    3a44:	4c49      	ldr	r4, [pc, #292]	; (3b6c <socket+0x154>)
    3a46:	7827      	ldrb	r7, [r4, #0]
    3a48:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3a4a:	7826      	ldrb	r6, [r4, #0]
    3a4c:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3a4e:	7820      	ldrb	r0, [r4, #0]
    3a50:	3001      	adds	r0, #1
    3a52:	3106      	adds	r1, #6
    3a54:	4b46      	ldr	r3, [pc, #280]	; (3b70 <socket+0x158>)
    3a56:	4798      	blx	r3
    3a58:	b2c9      	uxtb	r1, r1
    3a5a:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    3a5c:	0132      	lsls	r2, r6, #4
    3a5e:	4b45      	ldr	r3, [pc, #276]	; (3b74 <socket+0x15c>)
    3a60:	189b      	adds	r3, r3, r2
    3a62:	7a9b      	ldrb	r3, [r3, #10]
    3a64:	2506      	movs	r5, #6
    3a66:	2b00      	cmp	r3, #0
    3a68:	d018      	beq.n	3a9c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    3a6a:	4e40      	ldr	r6, [pc, #256]	; (3b6c <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3a6c:	4b40      	ldr	r3, [pc, #256]	; (3b70 <socket+0x158>)
    3a6e:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    3a70:	4b40      	ldr	r3, [pc, #256]	; (3b74 <socket+0x15c>)
    3a72:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    3a74:	7837      	ldrb	r7, [r6, #0]
    3a76:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3a78:	7834      	ldrb	r4, [r6, #0]
    3a7a:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    3a7c:	7830      	ldrb	r0, [r6, #0]
    3a7e:	3001      	adds	r0, #1
    3a80:	2107      	movs	r1, #7
    3a82:	47d0      	blx	sl
    3a84:	b2c9      	uxtb	r1, r1
    3a86:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    3a88:	0123      	lsls	r3, r4, #4
    3a8a:	4443      	add	r3, r8
    3a8c:	7a9b      	ldrb	r3, [r3, #10]
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d007      	beq.n	3aa2 <socket+0x8a>
    3a92:	3d01      	subs	r5, #1
    3a94:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    3a96:	2d00      	cmp	r5, #0
    3a98:	d1ec      	bne.n	3a74 <socket+0x5c>
    3a9a:	e7cb      	b.n	3a34 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    3a9c:	4b35      	ldr	r3, [pc, #212]	; (3b74 <socket+0x15c>)
    3a9e:	18d4      	adds	r4, r2, r3
    3aa0:	e002      	b.n	3aa8 <socket+0x90>
    3aa2:	0124      	lsls	r4, r4, #4
    3aa4:	4b33      	ldr	r3, [pc, #204]	; (3b74 <socket+0x15c>)
    3aa6:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    3aa8:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    3aaa:	2d00      	cmp	r5, #0
    3aac:	dbc4      	blt.n	3a38 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    3aae:	2210      	movs	r2, #16
    3ab0:	2100      	movs	r1, #0
    3ab2:	0020      	movs	r0, r4
    3ab4:	4b30      	ldr	r3, [pc, #192]	; (3b78 <socket+0x160>)
    3ab6:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    3ab8:	2301      	movs	r3, #1
    3aba:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    3abc:	4a2f      	ldr	r2, [pc, #188]	; (3b7c <socket+0x164>)
    3abe:	8813      	ldrh	r3, [r2, #0]
    3ac0:	3301      	adds	r3, #1
    3ac2:	b29b      	uxth	r3, r3
    3ac4:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    3ac6:	8813      	ldrh	r3, [r2, #0]
    3ac8:	b29b      	uxth	r3, r3
    3aca:	2b00      	cmp	r3, #0
    3acc:	d103      	bne.n	3ad6 <socket+0xbe>
				++gu16SessionID;
    3ace:	8813      	ldrh	r3, [r2, #0]
    3ad0:	3301      	adds	r3, #1
    3ad2:	b29b      	uxth	r3, r3
    3ad4:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    3ad6:	4e29      	ldr	r6, [pc, #164]	; (3b7c <socket+0x164>)
    3ad8:	8833      	ldrh	r3, [r6, #0]
    3ada:	b29b      	uxth	r3, r3
    3adc:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    3ade:	4828      	ldr	r0, [pc, #160]	; (3b80 <socket+0x168>)
    3ae0:	4f28      	ldr	r7, [pc, #160]	; (3b84 <socket+0x16c>)
    3ae2:	47b8      	blx	r7
    3ae4:	8832      	ldrh	r2, [r6, #0]
    3ae6:	b292      	uxth	r2, r2
    3ae8:	0029      	movs	r1, r5
    3aea:	4827      	ldr	r0, [pc, #156]	; (3b88 <socket+0x170>)
    3aec:	47b8      	blx	r7
    3aee:	200d      	movs	r0, #13
    3af0:	4b26      	ldr	r3, [pc, #152]	; (3b8c <socket+0x174>)
    3af2:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    3af4:	9b05      	ldr	r3, [sp, #20]
    3af6:	07db      	lsls	r3, r3, #31
    3af8:	d59e      	bpl.n	3a38 <socket+0x20>
				strSSLCreate.sslSock = sock;
    3afa:	aa07      	add	r2, sp, #28
    3afc:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    3afe:	2321      	movs	r3, #33	; 0x21
    3b00:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    3b02:	2300      	movs	r3, #0
    3b04:	9302      	str	r3, [sp, #8]
    3b06:	9301      	str	r3, [sp, #4]
    3b08:	9300      	str	r3, [sp, #0]
    3b0a:	3304      	adds	r3, #4
    3b0c:	2150      	movs	r1, #80	; 0x50
    3b0e:	2002      	movs	r0, #2
    3b10:	4c1f      	ldr	r4, [pc, #124]	; (3b90 <socket+0x178>)
    3b12:	47a0      	blx	r4
    3b14:	e790      	b.n	3a38 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    3b16:	4b1f      	ldr	r3, [pc, #124]	; (3b94 <socket+0x17c>)
    3b18:	781d      	ldrb	r5, [r3, #0]
    3b1a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3b1c:	781c      	ldrb	r4, [r3, #0]
    3b1e:	0124      	lsls	r4, r4, #4
    3b20:	4a1d      	ldr	r2, [pc, #116]	; (3b98 <socket+0x180>)
    3b22:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3b24:	7819      	ldrb	r1, [r3, #0]
    3b26:	3101      	adds	r1, #1
    3b28:	2203      	movs	r2, #3
    3b2a:	400a      	ands	r2, r1
    3b2c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    3b2e:	7aa3      	ldrb	r3, [r4, #10]
    3b30:	2b00      	cmp	r3, #0
    3b32:	d014      	beq.n	3b5e <socket+0x146>
    3b34:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    3b36:	4917      	ldr	r1, [pc, #92]	; (3b94 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3b38:	4f17      	ldr	r7, [pc, #92]	; (3b98 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3b3a:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    3b3c:	780d      	ldrb	r5, [r1, #0]
    3b3e:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    3b40:	780c      	ldrb	r4, [r1, #0]
    3b42:	0124      	lsls	r4, r4, #4
    3b44:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    3b46:	780b      	ldrb	r3, [r1, #0]
    3b48:	3301      	adds	r3, #1
    3b4a:	4003      	ands	r3, r0
    3b4c:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    3b4e:	7aa3      	ldrb	r3, [r4, #10]
    3b50:	2b00      	cmp	r3, #0
    3b52:	d004      	beq.n	3b5e <socket+0x146>
    3b54:	3a01      	subs	r2, #1
    3b56:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    3b58:	2a00      	cmp	r2, #0
    3b5a:	d1ef      	bne.n	3b3c <socket+0x124>
    3b5c:	e76a      	b.n	3a34 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    3b5e:	3507      	adds	r5, #7
    3b60:	b26d      	sxtb	r5, r5
					break;
    3b62:	e7a2      	b.n	3aaa <socket+0x92>
	SOCKET					sock = -1;
    3b64:	2501      	movs	r5, #1
    3b66:	426d      	negs	r5, r5
    3b68:	e766      	b.n	3a38 <socket+0x20>
    3b6a:	46c0      	nop			; (mov r8, r8)
    3b6c:	200003b0 	.word	0x200003b0
    3b70:	0000b741 	.word	0x0000b741
    3b74:	20000f4c 	.word	0x20000f4c
    3b78:	00001695 	.word	0x00001695
    3b7c:	200003ae 	.word	0x200003ae
    3b80:	0000d33c 	.word	0x0000d33c
    3b84:	0000b9b5 	.word	0x0000b9b5
    3b88:	0000ddcc 	.word	0x0000ddcc
    3b8c:	0000b9e9 	.word	0x0000b9e9
    3b90:	000017a9 	.word	0x000017a9
    3b94:	200003b1 	.word	0x200003b1
    3b98:	20000fbc 	.word	0x20000fbc

00003b9c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    3b9c:	b570      	push	{r4, r5, r6, lr}
    3b9e:	b088      	sub	sp, #32
    3ba0:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    3ba2:	db30      	blt.n	3c06 <connect+0x6a>
    3ba4:	2900      	cmp	r1, #0
    3ba6:	d031      	beq.n	3c0c <connect+0x70>
    3ba8:	0100      	lsls	r0, r0, #4
    3baa:	4b1d      	ldr	r3, [pc, #116]	; (3c20 <connect+0x84>)
    3bac:	181b      	adds	r3, r3, r0
    3bae:	7a9b      	ldrb	r3, [r3, #10]
    3bb0:	2b01      	cmp	r3, #1
    3bb2:	d12e      	bne.n	3c12 <connect+0x76>
    3bb4:	2a00      	cmp	r2, #0
    3bb6:	d02f      	beq.n	3c18 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3bb8:	4b19      	ldr	r3, [pc, #100]	; (3c20 <connect+0x84>)
    3bba:	181b      	adds	r3, r3, r0
    3bbc:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    3bbe:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    3bc0:	07db      	lsls	r3, r3, #31
    3bc2:	d505      	bpl.n	3bd0 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3bc4:	4b16      	ldr	r3, [pc, #88]	; (3c20 <connect+0x84>)
    3bc6:	181b      	adds	r3, r3, r0
    3bc8:	7ada      	ldrb	r2, [r3, #11]
    3bca:	ab05      	add	r3, sp, #20
    3bcc:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3bce:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    3bd0:	ad05      	add	r5, sp, #20
    3bd2:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    3bd4:	2208      	movs	r2, #8
    3bd6:	0028      	movs	r0, r5
    3bd8:	4b12      	ldr	r3, [pc, #72]	; (3c24 <connect+0x88>)
    3bda:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3bdc:	0124      	lsls	r4, r4, #4
    3bde:	4b10      	ldr	r3, [pc, #64]	; (3c20 <connect+0x84>)
    3be0:	191c      	adds	r4, r3, r4
    3be2:	88e3      	ldrh	r3, [r4, #6]
    3be4:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3be6:	2300      	movs	r3, #0
    3be8:	9302      	str	r3, [sp, #8]
    3bea:	9301      	str	r3, [sp, #4]
    3bec:	9300      	str	r3, [sp, #0]
    3bee:	330c      	adds	r3, #12
    3bf0:	002a      	movs	r2, r5
    3bf2:	0031      	movs	r1, r6
    3bf4:	2002      	movs	r0, #2
    3bf6:	4c0c      	ldr	r4, [pc, #48]	; (3c28 <connect+0x8c>)
    3bf8:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3bfa:	2800      	cmp	r0, #0
    3bfc:	d001      	beq.n	3c02 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    3bfe:	2009      	movs	r0, #9
    3c00:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    3c02:	b008      	add	sp, #32
    3c04:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3c06:	2006      	movs	r0, #6
    3c08:	4240      	negs	r0, r0
    3c0a:	e7fa      	b.n	3c02 <connect+0x66>
    3c0c:	2006      	movs	r0, #6
    3c0e:	4240      	negs	r0, r0
    3c10:	e7f7      	b.n	3c02 <connect+0x66>
    3c12:	2006      	movs	r0, #6
    3c14:	4240      	negs	r0, r0
    3c16:	e7f4      	b.n	3c02 <connect+0x66>
    3c18:	2006      	movs	r0, #6
    3c1a:	4240      	negs	r0, r0
    3c1c:	e7f1      	b.n	3c02 <connect+0x66>
    3c1e:	46c0      	nop			; (mov r8, r8)
    3c20:	20000f4c 	.word	0x20000f4c
    3c24:	00001681 	.word	0x00001681
    3c28:	000017a9 	.word	0x000017a9

00003c2c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    3c2c:	b530      	push	{r4, r5, lr}
    3c2e:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    3c30:	2800      	cmp	r0, #0
    3c32:	db36      	blt.n	3ca2 <send+0x76>
    3c34:	2900      	cmp	r1, #0
    3c36:	d037      	beq.n	3ca8 <send+0x7c>
    3c38:	23af      	movs	r3, #175	; 0xaf
    3c3a:	00db      	lsls	r3, r3, #3
    3c3c:	429a      	cmp	r2, r3
    3c3e:	d836      	bhi.n	3cae <send+0x82>
    3c40:	0104      	lsls	r4, r0, #4
    3c42:	4b1e      	ldr	r3, [pc, #120]	; (3cbc <send+0x90>)
    3c44:	191b      	adds	r3, r3, r4
    3c46:	7a9b      	ldrb	r3, [r3, #10]
    3c48:	2b01      	cmp	r3, #1
    3c4a:	d133      	bne.n	3cb4 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    3c4c:	ab04      	add	r3, sp, #16
    3c4e:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    3c50:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    3c52:	0025      	movs	r5, r4
    3c54:	4c19      	ldr	r4, [pc, #100]	; (3cbc <send+0x90>)
    3c56:	1964      	adds	r4, r4, r5
    3c58:	88e4      	ldrh	r4, [r4, #6]
    3c5a:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    3c5c:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    3c5e:	2806      	cmp	r0, #6
    3c60:	dd00      	ble.n	3c64 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3c62:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c64:	0104      	lsls	r4, r0, #4
    3c66:	4b15      	ldr	r3, [pc, #84]	; (3cbc <send+0x90>)
    3c68:	191b      	adds	r3, r3, r4
    3c6a:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    3c6c:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3c6e:	07e4      	lsls	r4, r4, #31
    3c70:	d505      	bpl.n	3c7e <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    3c72:	0100      	lsls	r0, r0, #4
    3c74:	4b11      	ldr	r3, [pc, #68]	; (3cbc <send+0x90>)
    3c76:	1818      	adds	r0, r3, r0
    3c78:	8905      	ldrh	r5, [r0, #8]
    3c7a:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3c7c:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    3c7e:	2080      	movs	r0, #128	; 0x80
    3c80:	4318      	orrs	r0, r3
    3c82:	9502      	str	r5, [sp, #8]
    3c84:	9201      	str	r2, [sp, #4]
    3c86:	9100      	str	r1, [sp, #0]
    3c88:	2310      	movs	r3, #16
    3c8a:	aa04      	add	r2, sp, #16
    3c8c:	0001      	movs	r1, r0
    3c8e:	2002      	movs	r0, #2
    3c90:	4c0b      	ldr	r4, [pc, #44]	; (3cc0 <send+0x94>)
    3c92:	47a0      	blx	r4
    3c94:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3c96:	2800      	cmp	r0, #0
    3c98:	d000      	beq.n	3c9c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    3c9a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    3c9c:	0018      	movs	r0, r3
    3c9e:	b009      	add	sp, #36	; 0x24
    3ca0:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3ca2:	2306      	movs	r3, #6
    3ca4:	425b      	negs	r3, r3
    3ca6:	e7f9      	b.n	3c9c <send+0x70>
    3ca8:	2306      	movs	r3, #6
    3caa:	425b      	negs	r3, r3
    3cac:	e7f6      	b.n	3c9c <send+0x70>
    3cae:	2306      	movs	r3, #6
    3cb0:	425b      	negs	r3, r3
    3cb2:	e7f3      	b.n	3c9c <send+0x70>
    3cb4:	2306      	movs	r3, #6
    3cb6:	425b      	negs	r3, r3
    3cb8:	e7f0      	b.n	3c9c <send+0x70>
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	20000f4c 	.word	0x20000f4c
    3cc0:	000017a9 	.word	0x000017a9

00003cc4 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3cc4:	b530      	push	{r4, r5, lr}
    3cc6:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3cc8:	2800      	cmp	r0, #0
    3cca:	db34      	blt.n	3d36 <recv+0x72>
    3ccc:	2900      	cmp	r1, #0
    3cce:	d035      	beq.n	3d3c <recv+0x78>
    3cd0:	2a00      	cmp	r2, #0
    3cd2:	d036      	beq.n	3d42 <recv+0x7e>
    3cd4:	0105      	lsls	r5, r0, #4
    3cd6:	4c1e      	ldr	r4, [pc, #120]	; (3d50 <recv+0x8c>)
    3cd8:	1964      	adds	r4, r4, r5
    3cda:	7aa4      	ldrb	r4, [r4, #10]
    3cdc:	2c01      	cmp	r4, #1
    3cde:	d133      	bne.n	3d48 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3ce0:	4c1b      	ldr	r4, [pc, #108]	; (3d50 <recv+0x8c>)
    3ce2:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3ce4:	1964      	adds	r4, r4, r5
    3ce6:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3ce8:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    3cea:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    3cec:	2900      	cmp	r1, #0
    3cee:	d11d      	bne.n	3d2c <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3cf0:	2101      	movs	r1, #1
    3cf2:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3cf4:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3cf6:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3cf8:	07d2      	lsls	r2, r2, #31
    3cfa:	d500      	bpl.n	3cfe <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    3cfc:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d117      	bne.n	3d32 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3d02:	3b01      	subs	r3, #1
    3d04:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    3d06:	aa04      	add	r2, sp, #16
    3d08:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    3d0a:	0100      	lsls	r0, r0, #4
    3d0c:	4b10      	ldr	r3, [pc, #64]	; (3d50 <recv+0x8c>)
    3d0e:	1818      	adds	r0, r3, r0
    3d10:	88c3      	ldrh	r3, [r0, #6]
    3d12:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3d14:	2300      	movs	r3, #0
    3d16:	9302      	str	r3, [sp, #8]
    3d18:	9301      	str	r3, [sp, #4]
    3d1a:	9300      	str	r3, [sp, #0]
    3d1c:	3308      	adds	r3, #8
    3d1e:	2002      	movs	r0, #2
    3d20:	4c0c      	ldr	r4, [pc, #48]	; (3d54 <recv+0x90>)
    3d22:	47a0      	blx	r4
    3d24:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    3d26:	2800      	cmp	r0, #0
    3d28:	d000      	beq.n	3d2c <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3d2a:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    3d2c:	0010      	movs	r0, r2
    3d2e:	b007      	add	sp, #28
    3d30:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3d32:	9304      	str	r3, [sp, #16]
    3d34:	e7e7      	b.n	3d06 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3d36:	2206      	movs	r2, #6
    3d38:	4252      	negs	r2, r2
    3d3a:	e7f7      	b.n	3d2c <recv+0x68>
    3d3c:	2206      	movs	r2, #6
    3d3e:	4252      	negs	r2, r2
    3d40:	e7f4      	b.n	3d2c <recv+0x68>
    3d42:	2206      	movs	r2, #6
    3d44:	4252      	negs	r2, r2
    3d46:	e7f1      	b.n	3d2c <recv+0x68>
    3d48:	2206      	movs	r2, #6
    3d4a:	4252      	negs	r2, r2
    3d4c:	e7ee      	b.n	3d2c <recv+0x68>
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	20000f4c 	.word	0x20000f4c
    3d54:	000017a9 	.word	0x000017a9

00003d58 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    3d58:	b530      	push	{r4, r5, lr}
    3d5a:	b087      	sub	sp, #28
    3d5c:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    3d5e:	481e      	ldr	r0, [pc, #120]	; (3dd8 <close+0x80>)
    3d60:	4d1e      	ldr	r5, [pc, #120]	; (3ddc <close+0x84>)
    3d62:	47a8      	blx	r5
    3d64:	0021      	movs	r1, r4
    3d66:	481e      	ldr	r0, [pc, #120]	; (3de0 <close+0x88>)
    3d68:	47a8      	blx	r5
    3d6a:	200d      	movs	r0, #13
    3d6c:	4b1d      	ldr	r3, [pc, #116]	; (3de4 <close+0x8c>)
    3d6e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    3d70:	2c00      	cmp	r4, #0
    3d72:	db2a      	blt.n	3dca <close+0x72>
    3d74:	0122      	lsls	r2, r4, #4
    3d76:	4b1c      	ldr	r3, [pc, #112]	; (3de8 <close+0x90>)
    3d78:	189b      	adds	r3, r3, r2
    3d7a:	7a9b      	ldrb	r3, [r3, #10]
    3d7c:	2b01      	cmp	r3, #1
    3d7e:	d127      	bne.n	3dd0 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3d80:	a905      	add	r1, sp, #20
    3d82:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3d84:	4b18      	ldr	r3, [pc, #96]	; (3de8 <close+0x90>)
    3d86:	189b      	adds	r3, r3, r2
    3d88:	88da      	ldrh	r2, [r3, #6]
    3d8a:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    3d8c:	2200      	movs	r2, #0
    3d8e:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3d90:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3d92:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3d94:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3d96:	07db      	lsls	r3, r3, #31
    3d98:	d500      	bpl.n	3d9c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3d9a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    3d9c:	2300      	movs	r3, #0
    3d9e:	9302      	str	r3, [sp, #8]
    3da0:	9301      	str	r3, [sp, #4]
    3da2:	9300      	str	r3, [sp, #0]
    3da4:	3304      	adds	r3, #4
    3da6:	aa05      	add	r2, sp, #20
    3da8:	2002      	movs	r0, #2
    3daa:	4d10      	ldr	r5, [pc, #64]	; (3dec <close+0x94>)
    3dac:	47a8      	blx	r5
    3dae:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3db0:	d001      	beq.n	3db6 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    3db2:	2509      	movs	r5, #9
    3db4:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3db6:	0124      	lsls	r4, r4, #4
    3db8:	480b      	ldr	r0, [pc, #44]	; (3de8 <close+0x90>)
    3dba:	1820      	adds	r0, r4, r0
    3dbc:	2210      	movs	r2, #16
    3dbe:	2100      	movs	r1, #0
    3dc0:	4b0b      	ldr	r3, [pc, #44]	; (3df0 <close+0x98>)
    3dc2:	4798      	blx	r3
	}
	return s8Ret;
}
    3dc4:	0028      	movs	r0, r5
    3dc6:	b007      	add	sp, #28
    3dc8:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3dca:	2506      	movs	r5, #6
    3dcc:	426d      	negs	r5, r5
    3dce:	e7f9      	b.n	3dc4 <close+0x6c>
    3dd0:	2506      	movs	r5, #6
    3dd2:	426d      	negs	r5, r5
    3dd4:	e7f6      	b.n	3dc4 <close+0x6c>
    3dd6:	46c0      	nop			; (mov r8, r8)
    3dd8:	0000d33c 	.word	0x0000d33c
    3ddc:	0000b9b5 	.word	0x0000b9b5
    3de0:	0000ddb4 	.word	0x0000ddb4
    3de4:	0000b9e9 	.word	0x0000b9e9
    3de8:	20000f4c 	.word	0x20000f4c
    3dec:	000017a9 	.word	0x000017a9
    3df0:	00001695 	.word	0x00001695

00003df4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    3df4:	b570      	push	{r4, r5, r6, lr}
    3df6:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    3df8:	2300      	movs	r3, #0
    3dfa:	9301      	str	r3, [sp, #4]
    3dfc:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    3dfe:	2100      	movs	r1, #0
    3e00:	7802      	ldrb	r2, [r0, #0]
    3e02:	1c44      	adds	r4, r0, #1
    3e04:	3005      	adds	r0, #5
    3e06:	000b      	movs	r3, r1
    3e08:	e009      	b.n	3e1e <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    3e0a:	009d      	lsls	r5, r3, #2
    3e0c:	195b      	adds	r3, r3, r5
    3e0e:	005b      	lsls	r3, r3, #1
    3e10:	189b      	adds	r3, r3, r2
    3e12:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    3e14:	0022      	movs	r2, r4
    3e16:	3401      	adds	r4, #1
			if(j > 4)
    3e18:	42a0      	cmp	r0, r4
    3e1a:	d00a      	beq.n	3e32 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    3e1c:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    3e1e:	2a2e      	cmp	r2, #46	; 0x2e
    3e20:	d00a      	beq.n	3e38 <nmi_inet_addr+0x44>
    3e22:	2a00      	cmp	r2, #0
    3e24:	d00c      	beq.n	3e40 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    3e26:	3a30      	subs	r2, #48	; 0x30
    3e28:	b2d2      	uxtb	r2, r2
    3e2a:	2a09      	cmp	r2, #9
    3e2c:	d9ed      	bls.n	3e0a <nmi_inet_addr+0x16>
				return 0;
    3e2e:	2000      	movs	r0, #0
    3e30:	e000      	b.n	3e34 <nmi_inet_addr+0x40>
				return 0;
    3e32:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    3e34:	b002      	add	sp, #8
    3e36:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    3e38:	466a      	mov	r2, sp
    3e3a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3e3c:	0020      	movs	r0, r4
    3e3e:	e002      	b.n	3e46 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    3e40:	466a      	mov	r2, sp
    3e42:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    3e44:	0020      	movs	r0, r4
    3e46:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    3e48:	2e04      	cmp	r6, #4
    3e4a:	d1d9      	bne.n	3e00 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    3e4c:	2204      	movs	r2, #4
    3e4e:	4669      	mov	r1, sp
    3e50:	a801      	add	r0, sp, #4
    3e52:	4b02      	ldr	r3, [pc, #8]	; (3e5c <nmi_inet_addr+0x68>)
    3e54:	4798      	blx	r3
	return u32IP;
    3e56:	9801      	ldr	r0, [sp, #4]
    3e58:	e7ec      	b.n	3e34 <nmi_inet_addr+0x40>
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	00001681 	.word	0x00001681

00003e60 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    3e60:	b510      	push	{r4, lr}
    3e62:	b084      	sub	sp, #16
    3e64:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    3e66:	4b0b      	ldr	r3, [pc, #44]	; (3e94 <gethostbyname+0x34>)
    3e68:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    3e6a:	b2c3      	uxtb	r3, r0
    3e6c:	2b40      	cmp	r3, #64	; 0x40
    3e6e:	d80d      	bhi.n	3e8c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    3e70:	23ff      	movs	r3, #255	; 0xff
    3e72:	4003      	ands	r3, r0
    3e74:	3301      	adds	r3, #1
    3e76:	2200      	movs	r2, #0
    3e78:	9202      	str	r2, [sp, #8]
    3e7a:	9201      	str	r2, [sp, #4]
    3e7c:	9200      	str	r2, [sp, #0]
    3e7e:	0022      	movs	r2, r4
    3e80:	214a      	movs	r1, #74	; 0x4a
    3e82:	2002      	movs	r0, #2
    3e84:	4c04      	ldr	r4, [pc, #16]	; (3e98 <gethostbyname+0x38>)
    3e86:	47a0      	blx	r4
	}
	return s8Err;
}
    3e88:	b004      	add	sp, #16
    3e8a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    3e8c:	2006      	movs	r0, #6
    3e8e:	4240      	negs	r0, r0
    3e90:	e7fa      	b.n	3e88 <gethostbyname+0x28>
    3e92:	46c0      	nop			; (mov r8, r8)
    3e94:	000016a5 	.word	0x000016a5
    3e98:	000017a9 	.word	0x000017a9

00003e9c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    3e9c:	b570      	push	{r4, r5, r6, lr}
    3e9e:	b082      	sub	sp, #8
    3ea0:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3ea2:	4b2a      	ldr	r3, [pc, #168]	; (3f4c <spi_flash_enable+0xb0>)
    3ea4:	4798      	blx	r3
    3ea6:	0500      	lsls	r0, r0, #20
    3ea8:	0d00      	lsrs	r0, r0, #20
    3eaa:	4b29      	ldr	r3, [pc, #164]	; (3f50 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    3eac:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3eae:	4298      	cmp	r0, r3
    3eb0:	d802      	bhi.n	3eb8 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3eb2:	0028      	movs	r0, r5
    3eb4:	b002      	add	sp, #8
    3eb6:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3eb8:	a901      	add	r1, sp, #4
    3eba:	4826      	ldr	r0, [pc, #152]	; (3f54 <spi_flash_enable+0xb8>)
    3ebc:	4b26      	ldr	r3, [pc, #152]	; (3f58 <spi_flash_enable+0xbc>)
    3ebe:	4798      	blx	r3
    3ec0:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3ec2:	d1f6      	bne.n	3eb2 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    3ec4:	4b25      	ldr	r3, [pc, #148]	; (3f5c <spi_flash_enable+0xc0>)
    3ec6:	9a01      	ldr	r2, [sp, #4]
    3ec8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    3eca:	4925      	ldr	r1, [pc, #148]	; (3f60 <spi_flash_enable+0xc4>)
    3ecc:	4319      	orrs	r1, r3
    3ece:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3ed0:	4820      	ldr	r0, [pc, #128]	; (3f54 <spi_flash_enable+0xb8>)
    3ed2:	4b24      	ldr	r3, [pc, #144]	; (3f64 <spi_flash_enable+0xc8>)
    3ed4:	4798      	blx	r3
		if(enable) {
    3ed6:	2c00      	cmp	r4, #0
    3ed8:	d020      	beq.n	3f1c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3eda:	2100      	movs	r1, #0
    3edc:	4822      	ldr	r0, [pc, #136]	; (3f68 <spi_flash_enable+0xcc>)
    3ede:	4c21      	ldr	r4, [pc, #132]	; (3f64 <spi_flash_enable+0xc8>)
    3ee0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3ee2:	21ab      	movs	r1, #171	; 0xab
    3ee4:	4821      	ldr	r0, [pc, #132]	; (3f6c <spi_flash_enable+0xd0>)
    3ee6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3ee8:	2101      	movs	r1, #1
    3eea:	4821      	ldr	r0, [pc, #132]	; (3f70 <spi_flash_enable+0xd4>)
    3eec:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3eee:	2100      	movs	r1, #0
    3ef0:	4820      	ldr	r0, [pc, #128]	; (3f74 <spi_flash_enable+0xd8>)
    3ef2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    3ef4:	2181      	movs	r1, #129	; 0x81
    3ef6:	4820      	ldr	r0, [pc, #128]	; (3f78 <spi_flash_enable+0xdc>)
    3ef8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3efa:	4e20      	ldr	r6, [pc, #128]	; (3f7c <spi_flash_enable+0xe0>)
    3efc:	4c20      	ldr	r4, [pc, #128]	; (3f80 <spi_flash_enable+0xe4>)
    3efe:	0030      	movs	r0, r6
    3f00:	47a0      	blx	r4
    3f02:	2801      	cmp	r0, #1
    3f04:	d1fb      	bne.n	3efe <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    3f06:	4b15      	ldr	r3, [pc, #84]	; (3f5c <spi_flash_enable+0xc0>)
    3f08:	9a01      	ldr	r2, [sp, #4]
    3f0a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    3f0c:	2180      	movs	r1, #128	; 0x80
    3f0e:	0249      	lsls	r1, r1, #9
    3f10:	4319      	orrs	r1, r3
    3f12:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3f14:	480f      	ldr	r0, [pc, #60]	; (3f54 <spi_flash_enable+0xb8>)
    3f16:	4b13      	ldr	r3, [pc, #76]	; (3f64 <spi_flash_enable+0xc8>)
    3f18:	4798      	blx	r3
    3f1a:	e7ca      	b.n	3eb2 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    3f1c:	2100      	movs	r1, #0
    3f1e:	4812      	ldr	r0, [pc, #72]	; (3f68 <spi_flash_enable+0xcc>)
    3f20:	4c10      	ldr	r4, [pc, #64]	; (3f64 <spi_flash_enable+0xc8>)
    3f22:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3f24:	21b9      	movs	r1, #185	; 0xb9
    3f26:	4811      	ldr	r0, [pc, #68]	; (3f6c <spi_flash_enable+0xd0>)
    3f28:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3f2a:	2101      	movs	r1, #1
    3f2c:	4810      	ldr	r0, [pc, #64]	; (3f70 <spi_flash_enable+0xd4>)
    3f2e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    3f30:	2100      	movs	r1, #0
    3f32:	4810      	ldr	r0, [pc, #64]	; (3f74 <spi_flash_enable+0xd8>)
    3f34:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    3f36:	2181      	movs	r1, #129	; 0x81
    3f38:	480f      	ldr	r0, [pc, #60]	; (3f78 <spi_flash_enable+0xdc>)
    3f3a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    3f3c:	4e0f      	ldr	r6, [pc, #60]	; (3f7c <spi_flash_enable+0xe0>)
    3f3e:	4c10      	ldr	r4, [pc, #64]	; (3f80 <spi_flash_enable+0xe4>)
    3f40:	0030      	movs	r0, r6
    3f42:	47a0      	blx	r4
    3f44:	2801      	cmp	r0, #1
    3f46:	d1fb      	bne.n	3f40 <spi_flash_enable+0xa4>
    3f48:	e7dd      	b.n	3f06 <spi_flash_enable+0x6a>
    3f4a:	46c0      	nop			; (mov r8, r8)
    3f4c:	00002695 	.word	0x00002695
    3f50:	0000039f 	.word	0x0000039f
    3f54:	00001410 	.word	0x00001410
    3f58:	00002ae5 	.word	0x00002ae5
    3f5c:	f8888fff 	.word	0xf8888fff
    3f60:	01111000 	.word	0x01111000
    3f64:	00002af1 	.word	0x00002af1
    3f68:	00010208 	.word	0x00010208
    3f6c:	0001020c 	.word	0x0001020c
    3f70:	00010214 	.word	0x00010214
    3f74:	0001021c 	.word	0x0001021c
    3f78:	00010204 	.word	0x00010204
    3f7c:	00010218 	.word	0x00010218
    3f80:	00002ad9 	.word	0x00002ad9

00003f84 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    3f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f86:	46c6      	mov	lr, r8
    3f88:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    3f8a:	2303      	movs	r3, #3
    3f8c:	0007      	movs	r7, r0
    3f8e:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    3f90:	6813      	ldr	r3, [r2, #0]
    3f92:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    3f94:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    3f96:	2903      	cmp	r1, #3
    3f98:	d902      	bls.n	3fa0 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    3f9a:	4244      	negs	r4, r0
    3f9c:	2003      	movs	r0, #3
    3f9e:	4004      	ands	r4, r0
	}

	if (temp_length) {
    3fa0:	2c00      	cmp	r4, #0
    3fa2:	d016      	beq.n	3fd2 <crc32_recalculate+0x4e>
		length -= temp_length;
    3fa4:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    3fa6:	1d3e      	adds	r6, r7, #4
    3fa8:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    3faa:	00e0      	lsls	r0, r4, #3
    3fac:	4240      	negs	r0, r0
    3fae:	3020      	adds	r0, #32
    3fb0:	40c5      	lsrs	r5, r0
	crc ^= data;
    3fb2:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    3fb4:	00e0      	lsls	r0, r4, #3
    3fb6:	d019      	beq.n	3fec <crc32_recalculate+0x68>
		if (crc & 1) {
    3fb8:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    3fba:	4d27      	ldr	r5, [pc, #156]	; (4058 <crc32_recalculate+0xd4>)
    3fbc:	e003      	b.n	3fc6 <crc32_recalculate+0x42>
			crc >>= 1;
    3fbe:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    3fc0:	3801      	subs	r0, #1
    3fc2:	2800      	cmp	r0, #0
    3fc4:	d004      	beq.n	3fd0 <crc32_recalculate+0x4c>
		if (crc & 1) {
    3fc6:	421c      	tst	r4, r3
    3fc8:	d0f9      	beq.n	3fbe <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    3fca:	085b      	lsrs	r3, r3, #1
    3fcc:	406b      	eors	r3, r5
    3fce:	e7f7      	b.n	3fc0 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    3fd0:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    3fd2:	2003      	movs	r0, #3
    3fd4:	000c      	movs	r4, r1
    3fd6:	4384      	bics	r4, r0

	if (temp_length) {
    3fd8:	d01e      	beq.n	4018 <crc32_recalculate+0x94>
		length -= temp_length;
    3fda:	1b08      	subs	r0, r1, r4
    3fdc:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    3fde:	0889      	lsrs	r1, r1, #2
    3fe0:	4688      	mov	r8, r1
    3fe2:	003e      	movs	r6, r7
    3fe4:	000d      	movs	r5, r1
		if (crc & 1) {
    3fe6:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    3fe8:	4c1b      	ldr	r4, [pc, #108]	; (4058 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    3fea:	e00b      	b.n	4004 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    3fec:	0037      	movs	r7, r6
    3fee:	e7f0      	b.n	3fd2 <crc32_recalculate+0x4e>
			crc >>= 1;
    3ff0:	085b      	lsrs	r3, r3, #1
    3ff2:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    3ff4:	2900      	cmp	r1, #0
    3ff6:	d004      	beq.n	4002 <crc32_recalculate+0x7e>
		if (crc & 1) {
    3ff8:	4218      	tst	r0, r3
    3ffa:	d0f9      	beq.n	3ff0 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    3ffc:	085b      	lsrs	r3, r3, #1
    3ffe:	4063      	eors	r3, r4
    4000:	e7f7      	b.n	3ff2 <crc32_recalculate+0x6e>
    4002:	3604      	adds	r6, #4
		while (temp_length--) {
    4004:	3d01      	subs	r5, #1
    4006:	d303      	bcc.n	4010 <crc32_recalculate+0x8c>
	crc ^= data;
    4008:	6831      	ldr	r1, [r6, #0]
    400a:	404b      	eors	r3, r1
    400c:	2120      	movs	r1, #32
    400e:	e7f3      	b.n	3ff8 <crc32_recalculate+0x74>
    4010:	4641      	mov	r1, r8
    4012:	0089      	lsls	r1, r1, #2
    4014:	187f      	adds	r7, r7, r1
		length -= temp_length;
    4016:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    4018:	2900      	cmp	r1, #0
    401a:	d017      	beq.n	404c <crc32_recalculate+0xc8>
		word = *word_ptr;
    401c:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    401e:	00c8      	lsls	r0, r1, #3
    4020:	4240      	negs	r0, r0
    4022:	3020      	adds	r0, #32
    4024:	2501      	movs	r5, #1
    4026:	426d      	negs	r5, r5
    4028:	40c5      	lsrs	r5, r0
    402a:	0028      	movs	r0, r5
    402c:	4020      	ands	r0, r4
	crc ^= data;
    402e:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    4030:	00c9      	lsls	r1, r1, #3
    4032:	d00b      	beq.n	404c <crc32_recalculate+0xc8>
		if (crc & 1) {
    4034:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    4036:	4c08      	ldr	r4, [pc, #32]	; (4058 <crc32_recalculate+0xd4>)
    4038:	e003      	b.n	4042 <crc32_recalculate+0xbe>
			crc >>= 1;
    403a:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    403c:	3901      	subs	r1, #1
    403e:	2900      	cmp	r1, #0
    4040:	d004      	beq.n	404c <crc32_recalculate+0xc8>
		if (crc & 1) {
    4042:	4218      	tst	r0, r3
    4044:	d0f9      	beq.n	403a <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    4046:	085b      	lsrs	r3, r3, #1
    4048:	4063      	eors	r3, r4
    404a:	e7f7      	b.n	403c <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    404c:	43db      	mvns	r3, r3
    404e:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    4050:	2000      	movs	r0, #0
    4052:	bc04      	pop	{r2}
    4054:	4690      	mov	r8, r2
    4056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4058:	edb88320 	.word	0xedb88320

0000405c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    405c:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    405e:	2301      	movs	r3, #1
    4060:	2800      	cmp	r0, #0
    4062:	d001      	beq.n	4068 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    4064:	0018      	movs	r0, r3
    4066:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    4068:	4b01      	ldr	r3, [pc, #4]	; (4070 <mem_test_unit_ready+0x14>)
    406a:	4798      	blx	r3
    406c:	0003      	movs	r3, r0
    406e:	e7f9      	b.n	4064 <mem_test_unit_ready+0x8>
    4070:	000009bd 	.word	0x000009bd

00004074 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    4074:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    4076:	2301      	movs	r3, #1
    4078:	2800      	cmp	r0, #0
    407a:	d001      	beq.n	4080 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    407c:	0018      	movs	r0, r3
    407e:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    4080:	0008      	movs	r0, r1
    4082:	4b02      	ldr	r3, [pc, #8]	; (408c <mem_read_capacity+0x18>)
    4084:	4798      	blx	r3
    4086:	0003      	movs	r3, r0
    4088:	e7f8      	b.n	407c <mem_read_capacity+0x8>
    408a:	46c0      	nop			; (mov r8, r8)
    408c:	000009ed 	.word	0x000009ed

00004090 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    4090:	4243      	negs	r3, r0
    4092:	4158      	adcs	r0, r3
    4094:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    4096:	4770      	bx	lr

00004098 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    4098:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    409a:	2301      	movs	r3, #1
    409c:	2800      	cmp	r0, #0
    409e:	d001      	beq.n	40a4 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    40a0:	0018      	movs	r0, r3
    40a2:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    40a4:	4b01      	ldr	r3, [pc, #4]	; (40ac <mem_wr_protect+0x14>)
    40a6:	4798      	blx	r3
    40a8:	0003      	movs	r3, r0
    40aa:	e7f9      	b.n	40a0 <mem_wr_protect+0x8>
    40ac:	000009fd 	.word	0x000009fd

000040b0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    40b0:	b510      	push	{r4, lr}
    40b2:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    40b4:	2301      	movs	r3, #1
    40b6:	2800      	cmp	r0, #0
    40b8:	d001      	beq.n	40be <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    40ba:	0018      	movs	r0, r3
    40bc:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    40be:	0011      	movs	r1, r2
    40c0:	0020      	movs	r0, r4
    40c2:	4b02      	ldr	r3, [pc, #8]	; (40cc <memory_2_ram+0x1c>)
    40c4:	4798      	blx	r3
    40c6:	0003      	movs	r3, r0
    40c8:	e7f7      	b.n	40ba <memory_2_ram+0xa>
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	00000a51 	.word	0x00000a51

000040d0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    40d0:	b510      	push	{r4, lr}
    40d2:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    40d4:	2301      	movs	r3, #1
    40d6:	2800      	cmp	r0, #0
    40d8:	d001      	beq.n	40de <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    40da:	0018      	movs	r0, r3
    40dc:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    40de:	0011      	movs	r1, r2
    40e0:	0020      	movs	r0, r4
    40e2:	4b02      	ldr	r3, [pc, #8]	; (40ec <ram_2_memory+0x1c>)
    40e4:	4798      	blx	r3
    40e6:	0003      	movs	r3, r0
    40e8:	e7f7      	b.n	40da <ram_2_memory+0xa>
    40ea:	46c0      	nop			; (mov r8, r8)
    40ec:	00000aa9 	.word	0x00000aa9

000040f0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    40f0:	4b0c      	ldr	r3, [pc, #48]	; (4124 <cpu_irq_enter_critical+0x34>)
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	2b00      	cmp	r3, #0
    40f6:	d106      	bne.n	4106 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    40f8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    40fc:	2b00      	cmp	r3, #0
    40fe:	d007      	beq.n	4110 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    4100:	2200      	movs	r2, #0
    4102:	4b09      	ldr	r3, [pc, #36]	; (4128 <cpu_irq_enter_critical+0x38>)
    4104:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4106:	4a07      	ldr	r2, [pc, #28]	; (4124 <cpu_irq_enter_critical+0x34>)
    4108:	6813      	ldr	r3, [r2, #0]
    410a:	3301      	adds	r3, #1
    410c:	6013      	str	r3, [r2, #0]
}
    410e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    4110:	b672      	cpsid	i
    4112:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    4116:	2200      	movs	r2, #0
    4118:	4b04      	ldr	r3, [pc, #16]	; (412c <cpu_irq_enter_critical+0x3c>)
    411a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    411c:	3201      	adds	r2, #1
    411e:	4b02      	ldr	r3, [pc, #8]	; (4128 <cpu_irq_enter_critical+0x38>)
    4120:	701a      	strb	r2, [r3, #0]
    4122:	e7f0      	b.n	4106 <cpu_irq_enter_critical+0x16>
    4124:	200003b4 	.word	0x200003b4
    4128:	200003b8 	.word	0x200003b8
    412c:	2000000e 	.word	0x2000000e

00004130 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    4130:	4b08      	ldr	r3, [pc, #32]	; (4154 <cpu_irq_leave_critical+0x24>)
    4132:	681a      	ldr	r2, [r3, #0]
    4134:	3a01      	subs	r2, #1
    4136:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    4138:	681b      	ldr	r3, [r3, #0]
    413a:	2b00      	cmp	r3, #0
    413c:	d109      	bne.n	4152 <cpu_irq_leave_critical+0x22>
    413e:	4b06      	ldr	r3, [pc, #24]	; (4158 <cpu_irq_leave_critical+0x28>)
    4140:	781b      	ldrb	r3, [r3, #0]
    4142:	2b00      	cmp	r3, #0
    4144:	d005      	beq.n	4152 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    4146:	2201      	movs	r2, #1
    4148:	4b04      	ldr	r3, [pc, #16]	; (415c <cpu_irq_leave_critical+0x2c>)
    414a:	701a      	strb	r2, [r3, #0]
    414c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4150:	b662      	cpsie	i
	}
}
    4152:	4770      	bx	lr
    4154:	200003b4 	.word	0x200003b4
    4158:	200003b8 	.word	0x200003b8
    415c:	2000000e 	.word	0x2000000e

00004160 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    4160:	b5f0      	push	{r4, r5, r6, r7, lr}
    4162:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    4164:	ac01      	add	r4, sp, #4
    4166:	2501      	movs	r5, #1
    4168:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    416a:	2700      	movs	r7, #0
    416c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    416e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4170:	0021      	movs	r1, r4
    4172:	2017      	movs	r0, #23
    4174:	4e06      	ldr	r6, [pc, #24]	; (4190 <system_board_init+0x30>)
    4176:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    4178:	2280      	movs	r2, #128	; 0x80
    417a:	0412      	lsls	r2, r2, #16
    417c:	4b05      	ldr	r3, [pc, #20]	; (4194 <system_board_init+0x34>)
    417e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4180:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4182:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4184:	0021      	movs	r1, r4
    4186:	2037      	movs	r0, #55	; 0x37
    4188:	47b0      	blx	r6
}
    418a:	b003      	add	sp, #12
    418c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    418e:	46c0      	nop			; (mov r8, r8)
    4190:	0000462d 	.word	0x0000462d
    4194:	41004400 	.word	0x41004400

00004198 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4198:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    419a:	2a00      	cmp	r2, #0
    419c:	d001      	beq.n	41a2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    419e:	0018      	movs	r0, r3
    41a0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    41a2:	008b      	lsls	r3, r1, #2
    41a4:	4a06      	ldr	r2, [pc, #24]	; (41c0 <extint_register_callback+0x28>)
    41a6:	589b      	ldr	r3, [r3, r2]
    41a8:	2b00      	cmp	r3, #0
    41aa:	d003      	beq.n	41b4 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    41ac:	4283      	cmp	r3, r0
    41ae:	d005      	beq.n	41bc <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    41b0:	231d      	movs	r3, #29
    41b2:	e7f4      	b.n	419e <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    41b4:	0089      	lsls	r1, r1, #2
    41b6:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    41b8:	2300      	movs	r3, #0
    41ba:	e7f0      	b.n	419e <extint_register_callback+0x6>
		return STATUS_OK;
    41bc:	2300      	movs	r3, #0
    41be:	e7ee      	b.n	419e <extint_register_callback+0x6>
    41c0:	2000100c 	.word	0x2000100c

000041c4 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    41c4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    41c6:	2900      	cmp	r1, #0
    41c8:	d001      	beq.n	41ce <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    41ca:	0018      	movs	r0, r3
    41cc:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    41ce:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    41d0:	281f      	cmp	r0, #31
    41d2:	d800      	bhi.n	41d6 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    41d4:	4a02      	ldr	r2, [pc, #8]	; (41e0 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    41d6:	2301      	movs	r3, #1
    41d8:	4083      	lsls	r3, r0
    41da:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    41dc:	2300      	movs	r3, #0
    41de:	e7f4      	b.n	41ca <extint_chan_enable_callback+0x6>
    41e0:	40001800 	.word	0x40001800

000041e4 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    41e4:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    41e6:	2900      	cmp	r1, #0
    41e8:	d001      	beq.n	41ee <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    41ea:	0018      	movs	r0, r3
    41ec:	4770      	bx	lr
		return NULL;
    41ee:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    41f0:	281f      	cmp	r0, #31
    41f2:	d800      	bhi.n	41f6 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    41f4:	4a02      	ldr	r2, [pc, #8]	; (4200 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    41f6:	2301      	movs	r3, #1
    41f8:	4083      	lsls	r3, r0
    41fa:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    41fc:	2300      	movs	r3, #0
    41fe:	e7f4      	b.n	41ea <extint_chan_disable_callback+0x6>
    4200:	40001800 	.word	0x40001800

00004204 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4204:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4206:	2200      	movs	r2, #0
    4208:	4b10      	ldr	r3, [pc, #64]	; (424c <EIC_Handler+0x48>)
    420a:	701a      	strb	r2, [r3, #0]
    420c:	2300      	movs	r3, #0
    420e:	4910      	ldr	r1, [pc, #64]	; (4250 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    4210:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    4212:	4e10      	ldr	r6, [pc, #64]	; (4254 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4214:	4c0d      	ldr	r4, [pc, #52]	; (424c <EIC_Handler+0x48>)
    4216:	e00a      	b.n	422e <EIC_Handler+0x2a>
		return eics[eic_index];
    4218:	490d      	ldr	r1, [pc, #52]	; (4250 <EIC_Handler+0x4c>)
    421a:	e008      	b.n	422e <EIC_Handler+0x2a>
    421c:	7823      	ldrb	r3, [r4, #0]
    421e:	3301      	adds	r3, #1
    4220:	b2db      	uxtb	r3, r3
    4222:	7023      	strb	r3, [r4, #0]
    4224:	2b0f      	cmp	r3, #15
    4226:	d810      	bhi.n	424a <EIC_Handler+0x46>
		return NULL;
    4228:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    422a:	2b1f      	cmp	r3, #31
    422c:	d9f4      	bls.n	4218 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    422e:	0028      	movs	r0, r5
    4230:	4018      	ands	r0, r3
    4232:	2201      	movs	r2, #1
    4234:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4236:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    4238:	4210      	tst	r0, r2
    423a:	d0ef      	beq.n	421c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    423c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    423e:	009b      	lsls	r3, r3, #2
    4240:	599b      	ldr	r3, [r3, r6]
    4242:	2b00      	cmp	r3, #0
    4244:	d0ea      	beq.n	421c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4246:	4798      	blx	r3
    4248:	e7e8      	b.n	421c <EIC_Handler+0x18>
			}
		}
	}
}
    424a:	bd70      	pop	{r4, r5, r6, pc}
    424c:	20001008 	.word	0x20001008
    4250:	40001800 	.word	0x40001800
    4254:	2000100c 	.word	0x2000100c

00004258 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4258:	4a04      	ldr	r2, [pc, #16]	; (426c <_extint_enable+0x14>)
    425a:	7813      	ldrb	r3, [r2, #0]
    425c:	2102      	movs	r1, #2
    425e:	430b      	orrs	r3, r1
    4260:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4262:	7853      	ldrb	r3, [r2, #1]
    4264:	b25b      	sxtb	r3, r3
    4266:	2b00      	cmp	r3, #0
    4268:	dbfb      	blt.n	4262 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    426a:	4770      	bx	lr
    426c:	40001800 	.word	0x40001800

00004270 <_system_extint_init>:
{
    4270:	b500      	push	{lr}
    4272:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4274:	4a12      	ldr	r2, [pc, #72]	; (42c0 <_system_extint_init+0x50>)
    4276:	6993      	ldr	r3, [r2, #24]
    4278:	2140      	movs	r1, #64	; 0x40
    427a:	430b      	orrs	r3, r1
    427c:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    427e:	a901      	add	r1, sp, #4
    4280:	2300      	movs	r3, #0
    4282:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4284:	2005      	movs	r0, #5
    4286:	4b0f      	ldr	r3, [pc, #60]	; (42c4 <_system_extint_init+0x54>)
    4288:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    428a:	2005      	movs	r0, #5
    428c:	4b0e      	ldr	r3, [pc, #56]	; (42c8 <_system_extint_init+0x58>)
    428e:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4290:	4a0e      	ldr	r2, [pc, #56]	; (42cc <_system_extint_init+0x5c>)
    4292:	7813      	ldrb	r3, [r2, #0]
    4294:	2101      	movs	r1, #1
    4296:	430b      	orrs	r3, r1
    4298:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    429a:	7853      	ldrb	r3, [r2, #1]
    429c:	b25b      	sxtb	r3, r3
    429e:	2b00      	cmp	r3, #0
    42a0:	dbfb      	blt.n	429a <_system_extint_init+0x2a>
    42a2:	4b0b      	ldr	r3, [pc, #44]	; (42d0 <_system_extint_init+0x60>)
    42a4:	0019      	movs	r1, r3
    42a6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    42a8:	2200      	movs	r2, #0
    42aa:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    42ac:	4299      	cmp	r1, r3
    42ae:	d1fc      	bne.n	42aa <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    42b0:	2210      	movs	r2, #16
    42b2:	4b08      	ldr	r3, [pc, #32]	; (42d4 <_system_extint_init+0x64>)
    42b4:	601a      	str	r2, [r3, #0]
	_extint_enable();
    42b6:	4b08      	ldr	r3, [pc, #32]	; (42d8 <_system_extint_init+0x68>)
    42b8:	4798      	blx	r3
}
    42ba:	b003      	add	sp, #12
    42bc:	bd00      	pop	{pc}
    42be:	46c0      	nop			; (mov r8, r8)
    42c0:	40000400 	.word	0x40000400
    42c4:	00005fcd 	.word	0x00005fcd
    42c8:	00005f41 	.word	0x00005f41
    42cc:	40001800 	.word	0x40001800
    42d0:	2000100c 	.word	0x2000100c
    42d4:	e000e100 	.word	0xe000e100
    42d8:	00004259 	.word	0x00004259

000042dc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    42dc:	2300      	movs	r3, #0
    42de:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    42e0:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    42e2:	2201      	movs	r2, #1
    42e4:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    42e6:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    42e8:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    42ea:	3302      	adds	r3, #2
    42ec:	72c3      	strb	r3, [r0, #11]
}
    42ee:	4770      	bx	lr

000042f0 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    42f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42f2:	b083      	sub	sp, #12
    42f4:	0005      	movs	r5, r0
    42f6:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    42f8:	a901      	add	r1, sp, #4
    42fa:	2300      	movs	r3, #0
    42fc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    42fe:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4300:	7923      	ldrb	r3, [r4, #4]
    4302:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4304:	7a23      	ldrb	r3, [r4, #8]
    4306:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4308:	7820      	ldrb	r0, [r4, #0]
    430a:	4b15      	ldr	r3, [pc, #84]	; (4360 <extint_chan_set_config+0x70>)
    430c:	4798      	blx	r3
		return NULL;
    430e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    4310:	2d1f      	cmp	r5, #31
    4312:	d800      	bhi.n	4316 <extint_chan_set_config+0x26>
		return eics[eic_index];
    4314:	4813      	ldr	r0, [pc, #76]	; (4364 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4316:	2207      	movs	r2, #7
    4318:	402a      	ands	r2, r5
    431a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    431c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    431e:	7aa3      	ldrb	r3, [r4, #10]
    4320:	2b00      	cmp	r3, #0
    4322:	d001      	beq.n	4328 <extint_chan_set_config+0x38>
    4324:	2308      	movs	r3, #8
    4326:	431f      	orrs	r7, r3
    4328:	08eb      	lsrs	r3, r5, #3
    432a:	009b      	lsls	r3, r3, #2
    432c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    432e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4330:	260f      	movs	r6, #15
    4332:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4334:	43b1      	bics	r1, r6
			(new_config << config_pos);
    4336:	4097      	lsls	r7, r2
    4338:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    433a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    433c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    433e:	7a63      	ldrb	r3, [r4, #9]
    4340:	2b00      	cmp	r3, #0
    4342:	d106      	bne.n	4352 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    4344:	6943      	ldr	r3, [r0, #20]
    4346:	2201      	movs	r2, #1
    4348:	40aa      	lsls	r2, r5
    434a:	4393      	bics	r3, r2
    434c:	6143      	str	r3, [r0, #20]
	}
}
    434e:	b003      	add	sp, #12
    4350:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    4352:	6942      	ldr	r2, [r0, #20]
    4354:	2301      	movs	r3, #1
    4356:	40ab      	lsls	r3, r5
    4358:	4313      	orrs	r3, r2
    435a:	6143      	str	r3, [r0, #20]
    435c:	e7f7      	b.n	434e <extint_chan_set_config+0x5e>
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	000060c5 	.word	0x000060c5
    4364:	40001800 	.word	0x40001800

00004368 <extint_disable_events>:
 *
 *  \param[in] events    Struct containing flags of events to disable
 */
void extint_disable_events(
		struct extint_events *const events)
{
    4368:	b510      	push	{r4, lr}
    436a:	2300      	movs	r3, #0
    436c:	2100      	movs	r1, #0
		uint32_t event_mask = 0;

		/* Create a disable mask for the current EIC module */
		for (uint32_t j = 0; j < 32; j++) {
			if (events->generate_event_on_detect[(32 * i) + j]) {
				event_mask |= (1UL << j);
    436e:	2401      	movs	r4, #1
    4370:	e002      	b.n	4378 <extint_disable_events+0x10>
		for (uint32_t j = 0; j < 32; j++) {
    4372:	3301      	adds	r3, #1
    4374:	2b20      	cmp	r3, #32
    4376:	d006      	beq.n	4386 <extint_disable_events+0x1e>
			if (events->generate_event_on_detect[(32 * i) + j]) {
    4378:	5cc2      	ldrb	r2, [r0, r3]
    437a:	2a00      	cmp	r2, #0
    437c:	d0f9      	beq.n	4372 <extint_disable_events+0xa>
				event_mask |= (1UL << j);
    437e:	0022      	movs	r2, r4
    4380:	409a      	lsls	r2, r3
    4382:	4311      	orrs	r1, r2
    4384:	e7f5      	b.n	4372 <extint_disable_events+0xa>
			}
		}

		/* Disable the masked events */
		eics[i]->EVCTRL.reg &= ~event_mask;
    4386:	4a02      	ldr	r2, [pc, #8]	; (4390 <extint_disable_events+0x28>)
    4388:	6853      	ldr	r3, [r2, #4]
    438a:	438b      	bics	r3, r1
    438c:	6053      	str	r3, [r2, #4]
	}
}
    438e:	bd10      	pop	{r4, pc}
    4390:	40001800 	.word	0x40001800

00004394 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4394:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4396:	4a1e      	ldr	r2, [pc, #120]	; (4410 <nvm_set_config+0x7c>)
    4398:	69d3      	ldr	r3, [r2, #28]
    439a:	2104      	movs	r1, #4
    439c:	430b      	orrs	r3, r1
    439e:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    43a0:	4b1c      	ldr	r3, [pc, #112]	; (4414 <nvm_set_config+0x80>)
    43a2:	2220      	movs	r2, #32
    43a4:	32ff      	adds	r2, #255	; 0xff
    43a6:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    43a8:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    43aa:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    43ac:	07d2      	lsls	r2, r2, #31
    43ae:	d401      	bmi.n	43b4 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    43b0:	0018      	movs	r0, r3
    43b2:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    43b4:	7803      	ldrb	r3, [r0, #0]
    43b6:	021b      	lsls	r3, r3, #8
    43b8:	22c0      	movs	r2, #192	; 0xc0
    43ba:	0092      	lsls	r2, r2, #2
    43bc:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    43be:	7841      	ldrb	r1, [r0, #1]
    43c0:	01c9      	lsls	r1, r1, #7
    43c2:	22ff      	movs	r2, #255	; 0xff
    43c4:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    43c6:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    43c8:	7881      	ldrb	r1, [r0, #2]
    43ca:	0049      	lsls	r1, r1, #1
    43cc:	221e      	movs	r2, #30
    43ce:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    43d0:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    43d2:	78c2      	ldrb	r2, [r0, #3]
    43d4:	0492      	lsls	r2, r2, #18
    43d6:	2180      	movs	r1, #128	; 0x80
    43d8:	02c9      	lsls	r1, r1, #11
    43da:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    43dc:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    43de:	7902      	ldrb	r2, [r0, #4]
    43e0:	0412      	lsls	r2, r2, #16
    43e2:	21c0      	movs	r1, #192	; 0xc0
    43e4:	0289      	lsls	r1, r1, #10
    43e6:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    43e8:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    43ea:	4a0a      	ldr	r2, [pc, #40]	; (4414 <nvm_set_config+0x80>)
    43ec:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    43ee:	6893      	ldr	r3, [r2, #8]
    43f0:	035b      	lsls	r3, r3, #13
    43f2:	0f5b      	lsrs	r3, r3, #29
    43f4:	4908      	ldr	r1, [pc, #32]	; (4418 <nvm_set_config+0x84>)
    43f6:	2408      	movs	r4, #8
    43f8:	409c      	lsls	r4, r3
    43fa:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    43fc:	6893      	ldr	r3, [r2, #8]
    43fe:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4400:	7843      	ldrb	r3, [r0, #1]
    4402:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4404:	8b13      	ldrh	r3, [r2, #24]
    4406:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    4408:	0fdb      	lsrs	r3, r3, #31
    440a:	011b      	lsls	r3, r3, #4
    440c:	e7d0      	b.n	43b0 <nvm_set_config+0x1c>
    440e:	46c0      	nop			; (mov r8, r8)
    4410:	40000400 	.word	0x40000400
    4414:	41004000 	.word	0x41004000
    4418:	200003bc 	.word	0x200003bc

0000441c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    441c:	b530      	push	{r4, r5, lr}
    441e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4420:	4a22      	ldr	r2, [pc, #136]	; (44ac <nvm_execute_command+0x90>)
    4422:	8810      	ldrh	r0, [r2, #0]
    4424:	8853      	ldrh	r3, [r2, #2]
    4426:	4343      	muls	r3, r0
    4428:	428b      	cmp	r3, r1
    442a:	d206      	bcs.n	443a <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    442c:	2280      	movs	r2, #128	; 0x80
    442e:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    4430:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4432:	4b1f      	ldr	r3, [pc, #124]	; (44b0 <nvm_execute_command+0x94>)
    4434:	18cb      	adds	r3, r1, r3
    4436:	4293      	cmp	r3, r2
    4438:	d80e      	bhi.n	4458 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    443a:	4b1e      	ldr	r3, [pc, #120]	; (44b4 <nvm_execute_command+0x98>)
    443c:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    443e:	2280      	movs	r2, #128	; 0x80
    4440:	02d2      	lsls	r2, r2, #11
    4442:	432a      	orrs	r2, r5
    4444:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4446:	2220      	movs	r2, #32
    4448:	32ff      	adds	r2, #255	; 0xff
    444a:	831a      	strh	r2, [r3, #24]
    444c:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    444e:	07db      	lsls	r3, r3, #31
    4450:	d403      	bmi.n	445a <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4452:	4b18      	ldr	r3, [pc, #96]	; (44b4 <nvm_execute_command+0x98>)
    4454:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    4456:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4458:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    445a:	2c45      	cmp	r4, #69	; 0x45
    445c:	d822      	bhi.n	44a4 <nvm_execute_command+0x88>
    445e:	00a3      	lsls	r3, r4, #2
    4460:	4a15      	ldr	r2, [pc, #84]	; (44b8 <nvm_execute_command+0x9c>)
    4462:	58d3      	ldr	r3, [r2, r3]
    4464:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4466:	4b13      	ldr	r3, [pc, #76]	; (44b4 <nvm_execute_command+0x98>)
    4468:	8b1b      	ldrh	r3, [r3, #24]
    446a:	05db      	lsls	r3, r3, #23
    446c:	d503      	bpl.n	4476 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    446e:	4b11      	ldr	r3, [pc, #68]	; (44b4 <nvm_execute_command+0x98>)
    4470:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    4472:	2010      	movs	r0, #16
    4474:	e7f0      	b.n	4458 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4476:	0889      	lsrs	r1, r1, #2
    4478:	0049      	lsls	r1, r1, #1
    447a:	4b0e      	ldr	r3, [pc, #56]	; (44b4 <nvm_execute_command+0x98>)
    447c:	61d9      	str	r1, [r3, #28]
			break;
    447e:	e003      	b.n	4488 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4480:	0889      	lsrs	r1, r1, #2
    4482:	0049      	lsls	r1, r1, #1
    4484:	4b0b      	ldr	r3, [pc, #44]	; (44b4 <nvm_execute_command+0x98>)
    4486:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4488:	20a5      	movs	r0, #165	; 0xa5
    448a:	0200      	lsls	r0, r0, #8
    448c:	4304      	orrs	r4, r0
    448e:	4b09      	ldr	r3, [pc, #36]	; (44b4 <nvm_execute_command+0x98>)
    4490:	801c      	strh	r4, [r3, #0]
    4492:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4494:	2201      	movs	r2, #1
    4496:	7d0b      	ldrb	r3, [r1, #20]
    4498:	4213      	tst	r3, r2
    449a:	d0fc      	beq.n	4496 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    449c:	4b05      	ldr	r3, [pc, #20]	; (44b4 <nvm_execute_command+0x98>)
    449e:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    44a0:	2000      	movs	r0, #0
    44a2:	e7d9      	b.n	4458 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    44a4:	4b03      	ldr	r3, [pc, #12]	; (44b4 <nvm_execute_command+0x98>)
    44a6:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    44a8:	2017      	movs	r0, #23
    44aa:	e7d5      	b.n	4458 <nvm_execute_command+0x3c>
    44ac:	200003bc 	.word	0x200003bc
    44b0:	ff7fc000 	.word	0xff7fc000
    44b4:	41004000 	.word	0x41004000
    44b8:	0000dde8 	.word	0x0000dde8

000044bc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    44bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    44be:	4b25      	ldr	r3, [pc, #148]	; (4554 <nvm_write_buffer+0x98>)
    44c0:	881d      	ldrh	r5, [r3, #0]
    44c2:	885b      	ldrh	r3, [r3, #2]
    44c4:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    44c6:	2418      	movs	r4, #24
	if (destination_address >
    44c8:	4283      	cmp	r3, r0
    44ca:	d201      	bcs.n	44d0 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    44cc:	0020      	movs	r0, r4
    44ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    44d0:	1e6b      	subs	r3, r5, #1
    44d2:	4218      	tst	r0, r3
    44d4:	d1fa      	bne.n	44cc <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    44d6:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    44d8:	4295      	cmp	r5, r2
    44da:	d3f7      	bcc.n	44cc <nvm_write_buffer+0x10>
    44dc:	4b1e      	ldr	r3, [pc, #120]	; (4558 <nvm_write_buffer+0x9c>)
    44de:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    44e0:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    44e2:	07db      	lsls	r3, r3, #31
    44e4:	d5f2      	bpl.n	44cc <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    44e6:	4c1d      	ldr	r4, [pc, #116]	; (455c <nvm_write_buffer+0xa0>)
    44e8:	4b1b      	ldr	r3, [pc, #108]	; (4558 <nvm_write_buffer+0x9c>)
    44ea:	801c      	strh	r4, [r3, #0]
    44ec:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    44ee:	2401      	movs	r4, #1
    44f0:	7d2b      	ldrb	r3, [r5, #20]
    44f2:	4223      	tst	r3, r4
    44f4:	d0fc      	beq.n	44f0 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    44f6:	2420      	movs	r4, #32
    44f8:	34ff      	adds	r4, #255	; 0xff
    44fa:	4b17      	ldr	r3, [pc, #92]	; (4558 <nvm_write_buffer+0x9c>)
    44fc:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    44fe:	2a00      	cmp	r2, #0
    4500:	d022      	beq.n	4548 <nvm_write_buffer+0x8c>
    4502:	2301      	movs	r3, #1
    4504:	0005      	movs	r5, r0
    4506:	439d      	bics	r5, r3
    4508:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    450a:	1e57      	subs	r7, r2, #1
    450c:	e009      	b.n	4522 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    450e:	18ce      	adds	r6, r1, r3
    4510:	7876      	ldrb	r6, [r6, #1]
    4512:	0236      	lsls	r6, r6, #8
    4514:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    4516:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4518:	3302      	adds	r3, #2
    451a:	b29b      	uxth	r3, r3
    451c:	3502      	adds	r5, #2
    451e:	429a      	cmp	r2, r3
    4520:	d904      	bls.n	452c <nvm_write_buffer+0x70>
		data = buffer[i];
    4522:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4524:	42bb      	cmp	r3, r7
    4526:	dbf2      	blt.n	450e <nvm_write_buffer+0x52>
		data = buffer[i];
    4528:	b2a4      	uxth	r4, r4
    452a:	e7f4      	b.n	4516 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    452c:	4b09      	ldr	r3, [pc, #36]	; (4554 <nvm_write_buffer+0x98>)
    452e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4530:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4532:	2b00      	cmp	r3, #0
    4534:	d1ca      	bne.n	44cc <nvm_write_buffer+0x10>
    4536:	2a3f      	cmp	r2, #63	; 0x3f
    4538:	d8c8      	bhi.n	44cc <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    453a:	2200      	movs	r2, #0
    453c:	0001      	movs	r1, r0
    453e:	2004      	movs	r0, #4
    4540:	4b07      	ldr	r3, [pc, #28]	; (4560 <nvm_write_buffer+0xa4>)
    4542:	4798      	blx	r3
    4544:	0004      	movs	r4, r0
    4546:	e7c1      	b.n	44cc <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4548:	4b02      	ldr	r3, [pc, #8]	; (4554 <nvm_write_buffer+0x98>)
    454a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    454c:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    454e:	2b00      	cmp	r3, #0
    4550:	d0f3      	beq.n	453a <nvm_write_buffer+0x7e>
    4552:	e7bb      	b.n	44cc <nvm_write_buffer+0x10>
    4554:	200003bc 	.word	0x200003bc
    4558:	41004000 	.word	0x41004000
    455c:	ffffa544 	.word	0xffffa544
    4560:	0000441d 	.word	0x0000441d

00004564 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    4564:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4566:	4b18      	ldr	r3, [pc, #96]	; (45c8 <nvm_read_buffer+0x64>)
    4568:	881d      	ldrh	r5, [r3, #0]
    456a:	885b      	ldrh	r3, [r3, #2]
    456c:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    456e:	2418      	movs	r4, #24
	if (source_address >
    4570:	4283      	cmp	r3, r0
    4572:	d201      	bcs.n	4578 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    4574:	0020      	movs	r0, r4
    4576:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
    4578:	1e6b      	subs	r3, r5, #1
    457a:	4218      	tst	r0, r3
    457c:	d1fa      	bne.n	4574 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    457e:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    4580:	4295      	cmp	r5, r2
    4582:	d3f7      	bcc.n	4574 <nvm_read_buffer+0x10>
    4584:	4b11      	ldr	r3, [pc, #68]	; (45cc <nvm_read_buffer+0x68>)
    4586:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4588:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    458a:	07db      	lsls	r3, r3, #31
    458c:	d5f2      	bpl.n	4574 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    458e:	2420      	movs	r4, #32
    4590:	34ff      	adds	r4, #255	; 0xff
    4592:	4b0e      	ldr	r3, [pc, #56]	; (45cc <nvm_read_buffer+0x68>)
    4594:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4596:	2a00      	cmp	r2, #0
    4598:	d014      	beq.n	45c4 <nvm_read_buffer+0x60>
    459a:	2301      	movs	r3, #1
    459c:	4398      	bics	r0, r3
    459e:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    45a0:	1e56      	subs	r6, r2, #1
    45a2:	e004      	b.n	45ae <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
    45a4:	3302      	adds	r3, #2
    45a6:	b29b      	uxth	r3, r3
    45a8:	3002      	adds	r0, #2
    45aa:	429a      	cmp	r2, r3
    45ac:	d908      	bls.n	45c0 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
    45ae:	8804      	ldrh	r4, [r0, #0]
    45b0:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    45b2:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    45b4:	42b3      	cmp	r3, r6
    45b6:	daf5      	bge.n	45a4 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
    45b8:	18cd      	adds	r5, r1, r3
    45ba:	0a24      	lsrs	r4, r4, #8
    45bc:	706c      	strb	r4, [r5, #1]
    45be:	e7f1      	b.n	45a4 <nvm_read_buffer+0x40>
	return STATUS_OK;
    45c0:	2400      	movs	r4, #0
    45c2:	e7d7      	b.n	4574 <nvm_read_buffer+0x10>
    45c4:	2400      	movs	r4, #0
    45c6:	e7d5      	b.n	4574 <nvm_read_buffer+0x10>
    45c8:	200003bc 	.word	0x200003bc
    45cc:	41004000 	.word	0x41004000

000045d0 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    45d0:	4b13      	ldr	r3, [pc, #76]	; (4620 <nvm_erase_row+0x50>)
    45d2:	881a      	ldrh	r2, [r3, #0]
    45d4:	885b      	ldrh	r3, [r3, #2]
    45d6:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    45d8:	2118      	movs	r1, #24
	if (row_address >
    45da:	4283      	cmp	r3, r0
    45dc:	d201      	bcs.n	45e2 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    45de:	0008      	movs	r0, r1
    45e0:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    45e2:	0092      	lsls	r2, r2, #2
    45e4:	3a01      	subs	r2, #1
    45e6:	4210      	tst	r0, r2
    45e8:	d1f9      	bne.n	45de <nvm_erase_row+0xe>
    45ea:	4b0e      	ldr	r3, [pc, #56]	; (4624 <nvm_erase_row+0x54>)
    45ec:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    45ee:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    45f0:	07db      	lsls	r3, r3, #31
    45f2:	d5f4      	bpl.n	45de <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    45f4:	4b0b      	ldr	r3, [pc, #44]	; (4624 <nvm_erase_row+0x54>)
    45f6:	2220      	movs	r2, #32
    45f8:	32ff      	adds	r2, #255	; 0xff
    45fa:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    45fc:	0880      	lsrs	r0, r0, #2
    45fe:	0040      	lsls	r0, r0, #1
    4600:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4602:	4a09      	ldr	r2, [pc, #36]	; (4628 <nvm_erase_row+0x58>)
    4604:	801a      	strh	r2, [r3, #0]
    4606:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4608:	2201      	movs	r2, #1
    460a:	7d0b      	ldrb	r3, [r1, #20]
    460c:	4213      	tst	r3, r2
    460e:	d0fc      	beq.n	460a <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4610:	4b04      	ldr	r3, [pc, #16]	; (4624 <nvm_erase_row+0x54>)
    4612:	8b19      	ldrh	r1, [r3, #24]
    4614:	201c      	movs	r0, #28
    4616:	4001      	ands	r1, r0
	return STATUS_OK;
    4618:	1e48      	subs	r0, r1, #1
    461a:	4181      	sbcs	r1, r0
    461c:	0089      	lsls	r1, r1, #2
    461e:	e7de      	b.n	45de <nvm_erase_row+0xe>
    4620:	200003bc 	.word	0x200003bc
    4624:	41004000 	.word	0x41004000
    4628:	ffffa502 	.word	0xffffa502

0000462c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    462c:	b500      	push	{lr}
    462e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4630:	ab01      	add	r3, sp, #4
    4632:	2280      	movs	r2, #128	; 0x80
    4634:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4636:	780a      	ldrb	r2, [r1, #0]
    4638:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    463a:	784a      	ldrb	r2, [r1, #1]
    463c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    463e:	788a      	ldrb	r2, [r1, #2]
    4640:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4642:	0019      	movs	r1, r3
    4644:	4b01      	ldr	r3, [pc, #4]	; (464c <port_pin_set_config+0x20>)
    4646:	4798      	blx	r3
}
    4648:	b003      	add	sp, #12
    464a:	bd00      	pop	{pc}
    464c:	000060c5 	.word	0x000060c5

00004650 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4650:	6801      	ldr	r1, [r0, #0]
    4652:	2208      	movs	r2, #8
    4654:	4b05      	ldr	r3, [pc, #20]	; (466c <rtc_calendar_enable+0x1c>)
    4656:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    4658:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    465a:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    465c:	b25b      	sxtb	r3, r3
    465e:	2b00      	cmp	r3, #0
    4660:	dbfb      	blt.n	465a <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    4662:	880b      	ldrh	r3, [r1, #0]
    4664:	2202      	movs	r2, #2
    4666:	4313      	orrs	r3, r2
    4668:	800b      	strh	r3, [r1, #0]
}
    466a:	4770      	bx	lr
    466c:	e000e100 	.word	0xe000e100

00004670 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    4670:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4672:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4674:	2408      	movs	r4, #8
    4676:	2380      	movs	r3, #128	; 0x80
    4678:	4907      	ldr	r1, [pc, #28]	; (4698 <rtc_calendar_disable+0x28>)
    467a:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    467c:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    467e:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    4680:	b25b      	sxtb	r3, r3
    4682:	2b00      	cmp	r3, #0
    4684:	dbfb      	blt.n	467e <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    4686:	23c1      	movs	r3, #193	; 0xc1
    4688:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    468a:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    468c:	8813      	ldrh	r3, [r2, #0]
    468e:	2102      	movs	r1, #2
    4690:	438b      	bics	r3, r1
    4692:	8013      	strh	r3, [r2, #0]
}
    4694:	bd10      	pop	{r4, pc}
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	e000e100 	.word	0xe000e100

0000469c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    469c:	b570      	push	{r4, r5, r6, lr}
    469e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    46a0:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    46a2:	4b07      	ldr	r3, [pc, #28]	; (46c0 <rtc_calendar_reset+0x24>)
    46a4:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    46a6:	2300      	movs	r3, #0
    46a8:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    46aa:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    46ac:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    46ae:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    46b0:	b25b      	sxtb	r3, r3
    46b2:	2b00      	cmp	r3, #0
    46b4:	dbfb      	blt.n	46ae <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    46b6:	882b      	ldrh	r3, [r5, #0]
    46b8:	2201      	movs	r2, #1
    46ba:	4313      	orrs	r3, r2
    46bc:	802b      	strh	r3, [r5, #0]
}
    46be:	bd70      	pop	{r4, r5, r6, pc}
    46c0:	00004671 	.word	0x00004671

000046c4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    46c4:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    46c6:	88cb      	ldrh	r3, [r1, #6]
    46c8:	88c2      	ldrh	r2, [r0, #6]
    46ca:	1a9a      	subs	r2, r3, r2
    46cc:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    46ce:	794b      	ldrb	r3, [r1, #5]
    46d0:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    46d2:	790c      	ldrb	r4, [r1, #4]
    46d4:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    46d6:	4323      	orrs	r3, r4
    46d8:	788c      	ldrb	r4, [r1, #2]
    46da:	0324      	lsls	r4, r4, #12
    46dc:	4323      	orrs	r3, r4
    46de:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    46e0:	7902      	ldrb	r2, [r0, #4]
    46e2:	2a00      	cmp	r2, #0
    46e4:	d105      	bne.n	46f2 <rtc_calendar_time_to_register_value+0x2e>
    46e6:	78ca      	ldrb	r2, [r1, #3]
    46e8:	2a00      	cmp	r2, #0
    46ea:	d002      	beq.n	46f2 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    46ec:	2280      	movs	r2, #128	; 0x80
    46ee:	0252      	lsls	r2, r2, #9
    46f0:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    46f2:	7848      	ldrb	r0, [r1, #1]
    46f4:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    46f6:	780a      	ldrb	r2, [r1, #0]
    46f8:	4310      	orrs	r0, r2
    46fa:	4318      	orrs	r0, r3

	return register_value;
}
    46fc:	bd10      	pop	{r4, pc}

000046fe <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    46fe:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    4700:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    4702:	88c4      	ldrh	r4, [r0, #6]
    4704:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    4706:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    4708:	018b      	lsls	r3, r1, #6
    470a:	0f1b      	lsrs	r3, r3, #28
    470c:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    470e:	028b      	lsls	r3, r1, #10
    4710:	0edb      	lsrs	r3, r3, #27
    4712:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    4714:	7903      	ldrb	r3, [r0, #4]
    4716:	2b00      	cmp	r3, #0
    4718:	d10c      	bne.n	4734 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    471a:	040b      	lsls	r3, r1, #16
    471c:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    471e:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    4720:	03cb      	lsls	r3, r1, #15
    4722:	0fdb      	lsrs	r3, r3, #31
    4724:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    4726:	0988      	lsrs	r0, r1, #6
    4728:	233f      	movs	r3, #63	; 0x3f
    472a:	4018      	ands	r0, r3
    472c:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    472e:	4019      	ands	r1, r3
    4730:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    4732:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    4734:	03cb      	lsls	r3, r1, #15
    4736:	0edb      	lsrs	r3, r3, #27
    4738:	7093      	strb	r3, [r2, #2]
    473a:	e7f4      	b.n	4726 <rtc_calendar_register_value_to_time+0x28>

0000473c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    473c:	b510      	push	{r4, lr}
    473e:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4740:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    4742:	7941      	ldrb	r1, [r0, #5]
    4744:	2900      	cmp	r1, #0
    4746:	d006      	beq.n	4756 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    4748:	8859      	ldrh	r1, [r3, #2]
    474a:	0449      	lsls	r1, r1, #17
    474c:	d50b      	bpl.n	4766 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    474e:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    4750:	4b0a      	ldr	r3, [pc, #40]	; (477c <rtc_calendar_get_time+0x40>)
    4752:	4798      	blx	r3
}
    4754:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    4756:	490a      	ldr	r1, [pc, #40]	; (4780 <rtc_calendar_get_time+0x44>)
    4758:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    475a:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    475c:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    475e:	b249      	sxtb	r1, r1
    4760:	2900      	cmp	r1, #0
    4762:	dbfb      	blt.n	475c <rtc_calendar_get_time+0x20>
    4764:	e7f3      	b.n	474e <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    4766:	8859      	ldrh	r1, [r3, #2]
    4768:	24c0      	movs	r4, #192	; 0xc0
    476a:	0224      	lsls	r4, r4, #8
    476c:	4321      	orrs	r1, r4
    476e:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    4770:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    4772:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    4774:	b249      	sxtb	r1, r1
    4776:	2900      	cmp	r1, #0
    4778:	dbfb      	blt.n	4772 <rtc_calendar_get_time+0x36>
    477a:	e7e8      	b.n	474e <rtc_calendar_get_time+0x12>
    477c:	000046ff 	.word	0x000046ff
    4780:	ffff8000 	.word	0xffff8000

00004784 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    4784:	b570      	push	{r4, r5, r6, lr}
    4786:	000d      	movs	r5, r1
    4788:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    478a:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    478c:	2a01      	cmp	r2, #1
    478e:	d901      	bls.n	4794 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    4790:	0018      	movs	r0, r3
    4792:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    4794:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    4796:	4b06      	ldr	r3, [pc, #24]	; (47b0 <rtc_calendar_set_alarm+0x2c>)
    4798:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    479a:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    479c:	b25b      	sxtb	r3, r3
    479e:	2b00      	cmp	r3, #0
    47a0:	dbfb      	blt.n	479a <rtc_calendar_set_alarm+0x16>
    47a2:	00e4      	lsls	r4, r4, #3
    47a4:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    47a6:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    47a8:	7a2b      	ldrb	r3, [r5, #8]
    47aa:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    47ac:	2300      	movs	r3, #0
    47ae:	e7ef      	b.n	4790 <rtc_calendar_set_alarm+0xc>
    47b0:	000046c5 	.word	0x000046c5

000047b4 <rtc_calendar_init>:
{
    47b4:	b530      	push	{r4, r5, lr}
    47b6:	b083      	sub	sp, #12
    47b8:	0005      	movs	r5, r0
    47ba:	0014      	movs	r4, r2
	module->hw = hw;
    47bc:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    47be:	4a1c      	ldr	r2, [pc, #112]	; (4830 <rtc_calendar_init+0x7c>)
    47c0:	6993      	ldr	r3, [r2, #24]
    47c2:	2120      	movs	r1, #32
    47c4:	430b      	orrs	r3, r1
    47c6:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    47c8:	a901      	add	r1, sp, #4
    47ca:	2302      	movs	r3, #2
    47cc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    47ce:	2004      	movs	r0, #4
    47d0:	4b18      	ldr	r3, [pc, #96]	; (4834 <rtc_calendar_init+0x80>)
    47d2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    47d4:	2004      	movs	r0, #4
    47d6:	4b18      	ldr	r3, [pc, #96]	; (4838 <rtc_calendar_init+0x84>)
    47d8:	4798      	blx	r3
	rtc_calendar_reset(module);
    47da:	0028      	movs	r0, r5
    47dc:	4b17      	ldr	r3, [pc, #92]	; (483c <rtc_calendar_init+0x88>)
    47de:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    47e0:	7923      	ldrb	r3, [r4, #4]
    47e2:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    47e4:	78e3      	ldrb	r3, [r4, #3]
    47e6:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    47e8:	88e3      	ldrh	r3, [r4, #6]
    47ea:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    47ec:	4b14      	ldr	r3, [pc, #80]	; (4840 <rtc_calendar_init+0x8c>)
    47ee:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    47f0:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    47f2:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    47f4:	7921      	ldrb	r1, [r4, #4]
    47f6:	2900      	cmp	r1, #0
    47f8:	d017      	beq.n	482a <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    47fa:	2108      	movs	r1, #8
    47fc:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    47fe:	78a1      	ldrb	r1, [r4, #2]
    4800:	2900      	cmp	r1, #0
    4802:	d001      	beq.n	4808 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    4804:	2180      	movs	r1, #128	; 0x80
    4806:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    4808:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    480a:	78e3      	ldrb	r3, [r4, #3]
    480c:	2b00      	cmp	r3, #0
    480e:	d004      	beq.n	481a <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    4810:	8853      	ldrh	r3, [r2, #2]
    4812:	2180      	movs	r1, #128	; 0x80
    4814:	01c9      	lsls	r1, r1, #7
    4816:	430b      	orrs	r3, r1
    4818:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    481a:	0021      	movs	r1, r4
    481c:	3108      	adds	r1, #8
    481e:	2200      	movs	r2, #0
    4820:	0028      	movs	r0, r5
    4822:	4b08      	ldr	r3, [pc, #32]	; (4844 <rtc_calendar_init+0x90>)
    4824:	4798      	blx	r3
}
    4826:	b003      	add	sp, #12
    4828:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    482a:	2148      	movs	r1, #72	; 0x48
    482c:	430b      	orrs	r3, r1
    482e:	e7e6      	b.n	47fe <rtc_calendar_init+0x4a>
    4830:	40000400 	.word	0x40000400
    4834:	00005fcd 	.word	0x00005fcd
    4838:	00005f41 	.word	0x00005f41
    483c:	0000469d 	.word	0x0000469d
    4840:	2000104c 	.word	0x2000104c
    4844:	00004785 	.word	0x00004785

00004848 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    4848:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    484a:	4b0f      	ldr	r3, [pc, #60]	; (4888 <RTC_Handler+0x40>)
    484c:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    484e:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    4850:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    4852:	8a13      	ldrh	r3, [r2, #16]
    4854:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    4856:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    4858:	79e3      	ldrb	r3, [r4, #7]
    485a:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    485c:	b258      	sxtb	r0, r3
    485e:	2800      	cmp	r0, #0
    4860:	db06      	blt.n	4870 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    4862:	07db      	lsls	r3, r3, #31
    4864:	d503      	bpl.n	486e <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    4866:	07cb      	lsls	r3, r1, #31
    4868:	d40a      	bmi.n	4880 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    486a:	2301      	movs	r3, #1
    486c:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    486e:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    4870:	078b      	lsls	r3, r1, #30
    4872:	d402      	bmi.n	487a <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    4874:	2380      	movs	r3, #128	; 0x80
    4876:	7223      	strb	r3, [r4, #8]
    4878:	e7f9      	b.n	486e <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    487a:	68d3      	ldr	r3, [r2, #12]
    487c:	4798      	blx	r3
    487e:	e7f9      	b.n	4874 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    4880:	6893      	ldr	r3, [r2, #8]
    4882:	4798      	blx	r3
    4884:	e7f1      	b.n	486a <RTC_Handler+0x22>
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	2000104c 	.word	0x2000104c

0000488c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    488c:	b5f0      	push	{r4, r5, r6, r7, lr}
    488e:	46de      	mov	lr, fp
    4890:	4657      	mov	r7, sl
    4892:	464e      	mov	r6, r9
    4894:	4645      	mov	r5, r8
    4896:	b5e0      	push	{r5, r6, r7, lr}
    4898:	b087      	sub	sp, #28
    489a:	4680      	mov	r8, r0
    489c:	9104      	str	r1, [sp, #16]
    489e:	0016      	movs	r6, r2
    48a0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    48a2:	2200      	movs	r2, #0
    48a4:	2300      	movs	r3, #0
    48a6:	2100      	movs	r1, #0
    48a8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    48aa:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    48ac:	2001      	movs	r0, #1
    48ae:	0021      	movs	r1, r4
    48b0:	9600      	str	r6, [sp, #0]
    48b2:	9701      	str	r7, [sp, #4]
    48b4:	465c      	mov	r4, fp
    48b6:	9403      	str	r4, [sp, #12]
    48b8:	4644      	mov	r4, r8
    48ba:	9405      	str	r4, [sp, #20]
    48bc:	e013      	b.n	48e6 <long_division+0x5a>
    48be:	2420      	movs	r4, #32
    48c0:	1a64      	subs	r4, r4, r1
    48c2:	0005      	movs	r5, r0
    48c4:	40e5      	lsrs	r5, r4
    48c6:	46a8      	mov	r8, r5
    48c8:	e014      	b.n	48f4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    48ca:	9c00      	ldr	r4, [sp, #0]
    48cc:	9d01      	ldr	r5, [sp, #4]
    48ce:	1b12      	subs	r2, r2, r4
    48d0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    48d2:	465c      	mov	r4, fp
    48d4:	464d      	mov	r5, r9
    48d6:	432c      	orrs	r4, r5
    48d8:	46a3      	mov	fp, r4
    48da:	9c03      	ldr	r4, [sp, #12]
    48dc:	4645      	mov	r5, r8
    48de:	432c      	orrs	r4, r5
    48e0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    48e2:	3901      	subs	r1, #1
    48e4:	d325      	bcc.n	4932 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    48e6:	2420      	movs	r4, #32
    48e8:	4264      	negs	r4, r4
    48ea:	190c      	adds	r4, r1, r4
    48ec:	d4e7      	bmi.n	48be <long_division+0x32>
    48ee:	0005      	movs	r5, r0
    48f0:	40a5      	lsls	r5, r4
    48f2:	46a8      	mov	r8, r5
    48f4:	0004      	movs	r4, r0
    48f6:	408c      	lsls	r4, r1
    48f8:	46a1      	mov	r9, r4
		r = r << 1;
    48fa:	1892      	adds	r2, r2, r2
    48fc:	415b      	adcs	r3, r3
    48fe:	0014      	movs	r4, r2
    4900:	001d      	movs	r5, r3
		if (n & bit_shift) {
    4902:	9e05      	ldr	r6, [sp, #20]
    4904:	464f      	mov	r7, r9
    4906:	403e      	ands	r6, r7
    4908:	46b4      	mov	ip, r6
    490a:	9e04      	ldr	r6, [sp, #16]
    490c:	4647      	mov	r7, r8
    490e:	403e      	ands	r6, r7
    4910:	46b2      	mov	sl, r6
    4912:	4666      	mov	r6, ip
    4914:	4657      	mov	r7, sl
    4916:	433e      	orrs	r6, r7
    4918:	d003      	beq.n	4922 <long_division+0x96>
			r |= 0x01;
    491a:	0006      	movs	r6, r0
    491c:	4326      	orrs	r6, r4
    491e:	0032      	movs	r2, r6
    4920:	002b      	movs	r3, r5
		if (r >= d) {
    4922:	9c00      	ldr	r4, [sp, #0]
    4924:	9d01      	ldr	r5, [sp, #4]
    4926:	429d      	cmp	r5, r3
    4928:	d8db      	bhi.n	48e2 <long_division+0x56>
    492a:	d1ce      	bne.n	48ca <long_division+0x3e>
    492c:	4294      	cmp	r4, r2
    492e:	d8d8      	bhi.n	48e2 <long_division+0x56>
    4930:	e7cb      	b.n	48ca <long_division+0x3e>
    4932:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    4934:	4658      	mov	r0, fp
    4936:	0019      	movs	r1, r3
    4938:	b007      	add	sp, #28
    493a:	bc3c      	pop	{r2, r3, r4, r5}
    493c:	4690      	mov	r8, r2
    493e:	4699      	mov	r9, r3
    4940:	46a2      	mov	sl, r4
    4942:	46ab      	mov	fp, r5
    4944:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004946 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4946:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4948:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    494a:	2340      	movs	r3, #64	; 0x40
    494c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    494e:	4281      	cmp	r1, r0
    4950:	d202      	bcs.n	4958 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    4952:	0018      	movs	r0, r3
    4954:	bd10      	pop	{r4, pc}
		baud_calculated++;
    4956:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    4958:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    495a:	1c63      	adds	r3, r4, #1
    495c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    495e:	4288      	cmp	r0, r1
    4960:	d9f9      	bls.n	4956 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4962:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    4964:	2cff      	cmp	r4, #255	; 0xff
    4966:	d8f4      	bhi.n	4952 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    4968:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    496a:	2300      	movs	r3, #0
    496c:	e7f1      	b.n	4952 <_sercom_get_sync_baud_val+0xc>
	...

00004970 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    4970:	b5f0      	push	{r4, r5, r6, r7, lr}
    4972:	b083      	sub	sp, #12
    4974:	000f      	movs	r7, r1
    4976:	0016      	movs	r6, r2
    4978:	aa08      	add	r2, sp, #32
    497a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    497c:	0004      	movs	r4, r0
    497e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4980:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    4982:	42bc      	cmp	r4, r7
    4984:	d902      	bls.n	498c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    4986:	0010      	movs	r0, r2
    4988:	b003      	add	sp, #12
    498a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    498c:	2b00      	cmp	r3, #0
    498e:	d114      	bne.n	49ba <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    4990:	0002      	movs	r2, r0
    4992:	0008      	movs	r0, r1
    4994:	2100      	movs	r1, #0
    4996:	4c19      	ldr	r4, [pc, #100]	; (49fc <_sercom_get_async_baud_val+0x8c>)
    4998:	47a0      	blx	r4
    499a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    499c:	003a      	movs	r2, r7
    499e:	2300      	movs	r3, #0
    49a0:	2000      	movs	r0, #0
    49a2:	4c17      	ldr	r4, [pc, #92]	; (4a00 <_sercom_get_async_baud_val+0x90>)
    49a4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    49a6:	2200      	movs	r2, #0
    49a8:	2301      	movs	r3, #1
    49aa:	1a12      	subs	r2, r2, r0
    49ac:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    49ae:	0c12      	lsrs	r2, r2, #16
    49b0:	041b      	lsls	r3, r3, #16
    49b2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    49b4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    49b6:	2200      	movs	r2, #0
    49b8:	e7e5      	b.n	4986 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    49ba:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    49bc:	2b01      	cmp	r3, #1
    49be:	d1f9      	bne.n	49b4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    49c0:	000a      	movs	r2, r1
    49c2:	2300      	movs	r3, #0
    49c4:	2100      	movs	r1, #0
    49c6:	4c0d      	ldr	r4, [pc, #52]	; (49fc <_sercom_get_async_baud_val+0x8c>)
    49c8:	47a0      	blx	r4
    49ca:	0002      	movs	r2, r0
    49cc:	000b      	movs	r3, r1
    49ce:	9200      	str	r2, [sp, #0]
    49d0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    49d2:	0038      	movs	r0, r7
    49d4:	2100      	movs	r1, #0
    49d6:	4c0a      	ldr	r4, [pc, #40]	; (4a00 <_sercom_get_async_baud_val+0x90>)
    49d8:	47a0      	blx	r4
    49da:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    49dc:	2380      	movs	r3, #128	; 0x80
    49de:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    49e0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    49e2:	4298      	cmp	r0, r3
    49e4:	d8cf      	bhi.n	4986 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    49e6:	0f79      	lsrs	r1, r7, #29
    49e8:	00f8      	lsls	r0, r7, #3
    49ea:	9a00      	ldr	r2, [sp, #0]
    49ec:	9b01      	ldr	r3, [sp, #4]
    49ee:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    49f0:	00ea      	lsls	r2, r5, #3
    49f2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    49f4:	b2d2      	uxtb	r2, r2
    49f6:	0352      	lsls	r2, r2, #13
    49f8:	432a      	orrs	r2, r5
    49fa:	e7db      	b.n	49b4 <_sercom_get_async_baud_val+0x44>
    49fc:	0000b74d 	.word	0x0000b74d
    4a00:	0000488d 	.word	0x0000488d

00004a04 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4a04:	b510      	push	{r4, lr}
    4a06:	b082      	sub	sp, #8
    4a08:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4a0a:	4b0e      	ldr	r3, [pc, #56]	; (4a44 <sercom_set_gclk_generator+0x40>)
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	2b00      	cmp	r3, #0
    4a10:	d007      	beq.n	4a22 <sercom_set_gclk_generator+0x1e>
    4a12:	2900      	cmp	r1, #0
    4a14:	d105      	bne.n	4a22 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4a16:	4b0b      	ldr	r3, [pc, #44]	; (4a44 <sercom_set_gclk_generator+0x40>)
    4a18:	785b      	ldrb	r3, [r3, #1]
    4a1a:	4283      	cmp	r3, r0
    4a1c:	d010      	beq.n	4a40 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4a1e:	201d      	movs	r0, #29
    4a20:	e00c      	b.n	4a3c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    4a22:	a901      	add	r1, sp, #4
    4a24:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4a26:	2013      	movs	r0, #19
    4a28:	4b07      	ldr	r3, [pc, #28]	; (4a48 <sercom_set_gclk_generator+0x44>)
    4a2a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4a2c:	2013      	movs	r0, #19
    4a2e:	4b07      	ldr	r3, [pc, #28]	; (4a4c <sercom_set_gclk_generator+0x48>)
    4a30:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    4a32:	4b04      	ldr	r3, [pc, #16]	; (4a44 <sercom_set_gclk_generator+0x40>)
    4a34:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    4a36:	2201      	movs	r2, #1
    4a38:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    4a3a:	2000      	movs	r0, #0
}
    4a3c:	b002      	add	sp, #8
    4a3e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    4a40:	2000      	movs	r0, #0
    4a42:	e7fb      	b.n	4a3c <sercom_set_gclk_generator+0x38>
    4a44:	200003c4 	.word	0x200003c4
    4a48:	00005fcd 	.word	0x00005fcd
    4a4c:	00005f41 	.word	0x00005f41

00004a50 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4a50:	4b40      	ldr	r3, [pc, #256]	; (4b54 <_sercom_get_default_pad+0x104>)
    4a52:	4298      	cmp	r0, r3
    4a54:	d031      	beq.n	4aba <_sercom_get_default_pad+0x6a>
    4a56:	d90a      	bls.n	4a6e <_sercom_get_default_pad+0x1e>
    4a58:	4b3f      	ldr	r3, [pc, #252]	; (4b58 <_sercom_get_default_pad+0x108>)
    4a5a:	4298      	cmp	r0, r3
    4a5c:	d04d      	beq.n	4afa <_sercom_get_default_pad+0xaa>
    4a5e:	4b3f      	ldr	r3, [pc, #252]	; (4b5c <_sercom_get_default_pad+0x10c>)
    4a60:	4298      	cmp	r0, r3
    4a62:	d05a      	beq.n	4b1a <_sercom_get_default_pad+0xca>
    4a64:	4b3e      	ldr	r3, [pc, #248]	; (4b60 <_sercom_get_default_pad+0x110>)
    4a66:	4298      	cmp	r0, r3
    4a68:	d037      	beq.n	4ada <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    4a6a:	2000      	movs	r0, #0
}
    4a6c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    4a6e:	4b3d      	ldr	r3, [pc, #244]	; (4b64 <_sercom_get_default_pad+0x114>)
    4a70:	4298      	cmp	r0, r3
    4a72:	d00c      	beq.n	4a8e <_sercom_get_default_pad+0x3e>
    4a74:	4b3c      	ldr	r3, [pc, #240]	; (4b68 <_sercom_get_default_pad+0x118>)
    4a76:	4298      	cmp	r0, r3
    4a78:	d1f7      	bne.n	4a6a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4a7a:	2901      	cmp	r1, #1
    4a7c:	d017      	beq.n	4aae <_sercom_get_default_pad+0x5e>
    4a7e:	2900      	cmp	r1, #0
    4a80:	d05d      	beq.n	4b3e <_sercom_get_default_pad+0xee>
    4a82:	2902      	cmp	r1, #2
    4a84:	d015      	beq.n	4ab2 <_sercom_get_default_pad+0x62>
    4a86:	2903      	cmp	r1, #3
    4a88:	d015      	beq.n	4ab6 <_sercom_get_default_pad+0x66>
	return 0;
    4a8a:	2000      	movs	r0, #0
    4a8c:	e7ee      	b.n	4a6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4a8e:	2901      	cmp	r1, #1
    4a90:	d007      	beq.n	4aa2 <_sercom_get_default_pad+0x52>
    4a92:	2900      	cmp	r1, #0
    4a94:	d051      	beq.n	4b3a <_sercom_get_default_pad+0xea>
    4a96:	2902      	cmp	r1, #2
    4a98:	d005      	beq.n	4aa6 <_sercom_get_default_pad+0x56>
    4a9a:	2903      	cmp	r1, #3
    4a9c:	d005      	beq.n	4aaa <_sercom_get_default_pad+0x5a>
	return 0;
    4a9e:	2000      	movs	r0, #0
    4aa0:	e7e4      	b.n	4a6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4aa2:	4832      	ldr	r0, [pc, #200]	; (4b6c <_sercom_get_default_pad+0x11c>)
    4aa4:	e7e2      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4aa6:	4832      	ldr	r0, [pc, #200]	; (4b70 <_sercom_get_default_pad+0x120>)
    4aa8:	e7e0      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4aaa:	4832      	ldr	r0, [pc, #200]	; (4b74 <_sercom_get_default_pad+0x124>)
    4aac:	e7de      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4aae:	4832      	ldr	r0, [pc, #200]	; (4b78 <_sercom_get_default_pad+0x128>)
    4ab0:	e7dc      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4ab2:	4832      	ldr	r0, [pc, #200]	; (4b7c <_sercom_get_default_pad+0x12c>)
    4ab4:	e7da      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4ab6:	4832      	ldr	r0, [pc, #200]	; (4b80 <_sercom_get_default_pad+0x130>)
    4ab8:	e7d8      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4aba:	2901      	cmp	r1, #1
    4abc:	d007      	beq.n	4ace <_sercom_get_default_pad+0x7e>
    4abe:	2900      	cmp	r1, #0
    4ac0:	d03f      	beq.n	4b42 <_sercom_get_default_pad+0xf2>
    4ac2:	2902      	cmp	r1, #2
    4ac4:	d005      	beq.n	4ad2 <_sercom_get_default_pad+0x82>
    4ac6:	2903      	cmp	r1, #3
    4ac8:	d005      	beq.n	4ad6 <_sercom_get_default_pad+0x86>
	return 0;
    4aca:	2000      	movs	r0, #0
    4acc:	e7ce      	b.n	4a6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4ace:	482d      	ldr	r0, [pc, #180]	; (4b84 <_sercom_get_default_pad+0x134>)
    4ad0:	e7cc      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4ad2:	482d      	ldr	r0, [pc, #180]	; (4b88 <_sercom_get_default_pad+0x138>)
    4ad4:	e7ca      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4ad6:	482d      	ldr	r0, [pc, #180]	; (4b8c <_sercom_get_default_pad+0x13c>)
    4ad8:	e7c8      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4ada:	2901      	cmp	r1, #1
    4adc:	d007      	beq.n	4aee <_sercom_get_default_pad+0x9e>
    4ade:	2900      	cmp	r1, #0
    4ae0:	d031      	beq.n	4b46 <_sercom_get_default_pad+0xf6>
    4ae2:	2902      	cmp	r1, #2
    4ae4:	d005      	beq.n	4af2 <_sercom_get_default_pad+0xa2>
    4ae6:	2903      	cmp	r1, #3
    4ae8:	d005      	beq.n	4af6 <_sercom_get_default_pad+0xa6>
	return 0;
    4aea:	2000      	movs	r0, #0
    4aec:	e7be      	b.n	4a6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4aee:	4828      	ldr	r0, [pc, #160]	; (4b90 <_sercom_get_default_pad+0x140>)
    4af0:	e7bc      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4af2:	4828      	ldr	r0, [pc, #160]	; (4b94 <_sercom_get_default_pad+0x144>)
    4af4:	e7ba      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4af6:	4828      	ldr	r0, [pc, #160]	; (4b98 <_sercom_get_default_pad+0x148>)
    4af8:	e7b8      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4afa:	2901      	cmp	r1, #1
    4afc:	d007      	beq.n	4b0e <_sercom_get_default_pad+0xbe>
    4afe:	2900      	cmp	r1, #0
    4b00:	d023      	beq.n	4b4a <_sercom_get_default_pad+0xfa>
    4b02:	2902      	cmp	r1, #2
    4b04:	d005      	beq.n	4b12 <_sercom_get_default_pad+0xc2>
    4b06:	2903      	cmp	r1, #3
    4b08:	d005      	beq.n	4b16 <_sercom_get_default_pad+0xc6>
	return 0;
    4b0a:	2000      	movs	r0, #0
    4b0c:	e7ae      	b.n	4a6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4b0e:	4823      	ldr	r0, [pc, #140]	; (4b9c <_sercom_get_default_pad+0x14c>)
    4b10:	e7ac      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b12:	4823      	ldr	r0, [pc, #140]	; (4ba0 <_sercom_get_default_pad+0x150>)
    4b14:	e7aa      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b16:	4823      	ldr	r0, [pc, #140]	; (4ba4 <_sercom_get_default_pad+0x154>)
    4b18:	e7a8      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b1a:	2901      	cmp	r1, #1
    4b1c:	d007      	beq.n	4b2e <_sercom_get_default_pad+0xde>
    4b1e:	2900      	cmp	r1, #0
    4b20:	d015      	beq.n	4b4e <_sercom_get_default_pad+0xfe>
    4b22:	2902      	cmp	r1, #2
    4b24:	d005      	beq.n	4b32 <_sercom_get_default_pad+0xe2>
    4b26:	2903      	cmp	r1, #3
    4b28:	d005      	beq.n	4b36 <_sercom_get_default_pad+0xe6>
	return 0;
    4b2a:	2000      	movs	r0, #0
    4b2c:	e79e      	b.n	4a6c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4b2e:	481e      	ldr	r0, [pc, #120]	; (4ba8 <_sercom_get_default_pad+0x158>)
    4b30:	e79c      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b32:	481e      	ldr	r0, [pc, #120]	; (4bac <_sercom_get_default_pad+0x15c>)
    4b34:	e79a      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b36:	481e      	ldr	r0, [pc, #120]	; (4bb0 <_sercom_get_default_pad+0x160>)
    4b38:	e798      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b3a:	481e      	ldr	r0, [pc, #120]	; (4bb4 <_sercom_get_default_pad+0x164>)
    4b3c:	e796      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b3e:	2003      	movs	r0, #3
    4b40:	e794      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b42:	481d      	ldr	r0, [pc, #116]	; (4bb8 <_sercom_get_default_pad+0x168>)
    4b44:	e792      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b46:	481d      	ldr	r0, [pc, #116]	; (4bbc <_sercom_get_default_pad+0x16c>)
    4b48:	e790      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b4a:	481d      	ldr	r0, [pc, #116]	; (4bc0 <_sercom_get_default_pad+0x170>)
    4b4c:	e78e      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b4e:	481d      	ldr	r0, [pc, #116]	; (4bc4 <_sercom_get_default_pad+0x174>)
    4b50:	e78c      	b.n	4a6c <_sercom_get_default_pad+0x1c>
    4b52:	46c0      	nop			; (mov r8, r8)
    4b54:	42001000 	.word	0x42001000
    4b58:	42001800 	.word	0x42001800
    4b5c:	42001c00 	.word	0x42001c00
    4b60:	42001400 	.word	0x42001400
    4b64:	42000800 	.word	0x42000800
    4b68:	42000c00 	.word	0x42000c00
    4b6c:	00050003 	.word	0x00050003
    4b70:	00060003 	.word	0x00060003
    4b74:	00070003 	.word	0x00070003
    4b78:	00010003 	.word	0x00010003
    4b7c:	001e0003 	.word	0x001e0003
    4b80:	001f0003 	.word	0x001f0003
    4b84:	00090003 	.word	0x00090003
    4b88:	000a0003 	.word	0x000a0003
    4b8c:	000b0003 	.word	0x000b0003
    4b90:	00110003 	.word	0x00110003
    4b94:	00120003 	.word	0x00120003
    4b98:	00130003 	.word	0x00130003
    4b9c:	000d0003 	.word	0x000d0003
    4ba0:	000e0003 	.word	0x000e0003
    4ba4:	000f0003 	.word	0x000f0003
    4ba8:	00170003 	.word	0x00170003
    4bac:	00180003 	.word	0x00180003
    4bb0:	00190003 	.word	0x00190003
    4bb4:	00040003 	.word	0x00040003
    4bb8:	00080003 	.word	0x00080003
    4bbc:	00100003 	.word	0x00100003
    4bc0:	000c0003 	.word	0x000c0003
    4bc4:	00160003 	.word	0x00160003

00004bc8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4bc8:	b530      	push	{r4, r5, lr}
    4bca:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4bcc:	4b0b      	ldr	r3, [pc, #44]	; (4bfc <_sercom_get_sercom_inst_index+0x34>)
    4bce:	466a      	mov	r2, sp
    4bd0:	cb32      	ldmia	r3!, {r1, r4, r5}
    4bd2:	c232      	stmia	r2!, {r1, r4, r5}
    4bd4:	cb32      	ldmia	r3!, {r1, r4, r5}
    4bd6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4bd8:	9b00      	ldr	r3, [sp, #0]
    4bda:	4283      	cmp	r3, r0
    4bdc:	d00b      	beq.n	4bf6 <_sercom_get_sercom_inst_index+0x2e>
    4bde:	2301      	movs	r3, #1
    4be0:	009a      	lsls	r2, r3, #2
    4be2:	4669      	mov	r1, sp
    4be4:	5852      	ldr	r2, [r2, r1]
    4be6:	4282      	cmp	r2, r0
    4be8:	d006      	beq.n	4bf8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4bea:	3301      	adds	r3, #1
    4bec:	2b06      	cmp	r3, #6
    4bee:	d1f7      	bne.n	4be0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4bf0:	2000      	movs	r0, #0
}
    4bf2:	b007      	add	sp, #28
    4bf4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4bf6:	2300      	movs	r3, #0
			return i;
    4bf8:	b2d8      	uxtb	r0, r3
    4bfa:	e7fa      	b.n	4bf2 <_sercom_get_sercom_inst_index+0x2a>
    4bfc:	0000df00 	.word	0x0000df00

00004c00 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4c00:	4770      	bx	lr
	...

00004c04 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4c04:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4c06:	4b0a      	ldr	r3, [pc, #40]	; (4c30 <_sercom_set_handler+0x2c>)
    4c08:	781b      	ldrb	r3, [r3, #0]
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d10c      	bne.n	4c28 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4c0e:	4f09      	ldr	r7, [pc, #36]	; (4c34 <_sercom_set_handler+0x30>)
    4c10:	4e09      	ldr	r6, [pc, #36]	; (4c38 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4c12:	4d0a      	ldr	r5, [pc, #40]	; (4c3c <_sercom_set_handler+0x38>)
    4c14:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4c16:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4c18:	195a      	adds	r2, r3, r5
    4c1a:	6014      	str	r4, [r2, #0]
    4c1c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4c1e:	2b18      	cmp	r3, #24
    4c20:	d1f9      	bne.n	4c16 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4c22:	2201      	movs	r2, #1
    4c24:	4b02      	ldr	r3, [pc, #8]	; (4c30 <_sercom_set_handler+0x2c>)
    4c26:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4c28:	0080      	lsls	r0, r0, #2
    4c2a:	4b02      	ldr	r3, [pc, #8]	; (4c34 <_sercom_set_handler+0x30>)
    4c2c:	50c1      	str	r1, [r0, r3]
}
    4c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c30:	200003c6 	.word	0x200003c6
    4c34:	200003c8 	.word	0x200003c8
    4c38:	00004c01 	.word	0x00004c01
    4c3c:	20001050 	.word	0x20001050

00004c40 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4c40:	b500      	push	{lr}
    4c42:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4c44:	2309      	movs	r3, #9
    4c46:	466a      	mov	r2, sp
    4c48:	7013      	strb	r3, [r2, #0]
    4c4a:	3301      	adds	r3, #1
    4c4c:	7053      	strb	r3, [r2, #1]
    4c4e:	3301      	adds	r3, #1
    4c50:	7093      	strb	r3, [r2, #2]
    4c52:	3301      	adds	r3, #1
    4c54:	70d3      	strb	r3, [r2, #3]
    4c56:	3301      	adds	r3, #1
    4c58:	7113      	strb	r3, [r2, #4]
    4c5a:	3301      	adds	r3, #1
    4c5c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4c5e:	4b03      	ldr	r3, [pc, #12]	; (4c6c <_sercom_get_interrupt_vector+0x2c>)
    4c60:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4c62:	466b      	mov	r3, sp
    4c64:	5618      	ldrsb	r0, [r3, r0]
}
    4c66:	b003      	add	sp, #12
    4c68:	bd00      	pop	{pc}
    4c6a:	46c0      	nop			; (mov r8, r8)
    4c6c:	00004bc9 	.word	0x00004bc9

00004c70 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4c70:	b510      	push	{r4, lr}
    4c72:	4b02      	ldr	r3, [pc, #8]	; (4c7c <SERCOM0_Handler+0xc>)
    4c74:	681b      	ldr	r3, [r3, #0]
    4c76:	2000      	movs	r0, #0
    4c78:	4798      	blx	r3
    4c7a:	bd10      	pop	{r4, pc}
    4c7c:	200003c8 	.word	0x200003c8

00004c80 <SERCOM1_Handler>:
    4c80:	b510      	push	{r4, lr}
    4c82:	4b02      	ldr	r3, [pc, #8]	; (4c8c <SERCOM1_Handler+0xc>)
    4c84:	685b      	ldr	r3, [r3, #4]
    4c86:	2001      	movs	r0, #1
    4c88:	4798      	blx	r3
    4c8a:	bd10      	pop	{r4, pc}
    4c8c:	200003c8 	.word	0x200003c8

00004c90 <SERCOM2_Handler>:
    4c90:	b510      	push	{r4, lr}
    4c92:	4b02      	ldr	r3, [pc, #8]	; (4c9c <SERCOM2_Handler+0xc>)
    4c94:	689b      	ldr	r3, [r3, #8]
    4c96:	2002      	movs	r0, #2
    4c98:	4798      	blx	r3
    4c9a:	bd10      	pop	{r4, pc}
    4c9c:	200003c8 	.word	0x200003c8

00004ca0 <SERCOM3_Handler>:
    4ca0:	b510      	push	{r4, lr}
    4ca2:	4b02      	ldr	r3, [pc, #8]	; (4cac <SERCOM3_Handler+0xc>)
    4ca4:	68db      	ldr	r3, [r3, #12]
    4ca6:	2003      	movs	r0, #3
    4ca8:	4798      	blx	r3
    4caa:	bd10      	pop	{r4, pc}
    4cac:	200003c8 	.word	0x200003c8

00004cb0 <SERCOM4_Handler>:
    4cb0:	b510      	push	{r4, lr}
    4cb2:	4b02      	ldr	r3, [pc, #8]	; (4cbc <SERCOM4_Handler+0xc>)
    4cb4:	691b      	ldr	r3, [r3, #16]
    4cb6:	2004      	movs	r0, #4
    4cb8:	4798      	blx	r3
    4cba:	bd10      	pop	{r4, pc}
    4cbc:	200003c8 	.word	0x200003c8

00004cc0 <SERCOM5_Handler>:
    4cc0:	b510      	push	{r4, lr}
    4cc2:	4b02      	ldr	r3, [pc, #8]	; (4ccc <SERCOM5_Handler+0xc>)
    4cc4:	695b      	ldr	r3, [r3, #20]
    4cc6:	2005      	movs	r0, #5
    4cc8:	4798      	blx	r3
    4cca:	bd10      	pop	{r4, pc}
    4ccc:	200003c8 	.word	0x200003c8

00004cd0 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    4cd0:	b570      	push	{r4, r5, r6, lr}
    4cd2:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4cd4:	6804      	ldr	r4, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4cd6:	0020      	movs	r0, r4
    4cd8:	4b0e      	ldr	r3, [pc, #56]	; (4d14 <spi_reset+0x44>)
    4cda:	4798      	blx	r3
    4cdc:	231f      	movs	r3, #31
    4cde:	4018      	ands	r0, r3
    4ce0:	3b1e      	subs	r3, #30
    4ce2:	4083      	lsls	r3, r0
    4ce4:	2280      	movs	r2, #128	; 0x80
    4ce6:	490c      	ldr	r1, [pc, #48]	; (4d18 <spi_reset+0x48>)
    4ce8:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4cea:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4cec:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4cee:	2b00      	cmp	r3, #0
    4cf0:	d1fc      	bne.n	4cec <spi_reset+0x1c>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4cf2:	338f      	adds	r3, #143	; 0x8f
    4cf4:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4cf6:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4cf8:	6823      	ldr	r3, [r4, #0]
    4cfa:	2202      	movs	r2, #2
    4cfc:	4393      	bics	r3, r2
    4cfe:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d00:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4d02:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4d04:	2b00      	cmp	r3, #0
    4d06:	d1fc      	bne.n	4d02 <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    4d08:	6823      	ldr	r3, [r4, #0]
    4d0a:	2201      	movs	r2, #1
    4d0c:	4313      	orrs	r3, r2
    4d0e:	6023      	str	r3, [r4, #0]
}
    4d10:	bd70      	pop	{r4, r5, r6, pc}
    4d12:	46c0      	nop			; (mov r8, r8)
    4d14:	00004c41 	.word	0x00004c41
    4d18:	e000e100 	.word	0xe000e100

00004d1c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    4d1c:	b570      	push	{r4, r5, r6, lr}
    4d1e:	b082      	sub	sp, #8
    4d20:	0005      	movs	r5, r0
    4d22:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4d24:	2200      	movs	r2, #0
    4d26:	466b      	mov	r3, sp
    4d28:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4d2a:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    4d2c:	0030      	movs	r0, r6
    4d2e:	4b24      	ldr	r3, [pc, #144]	; (4dc0 <spi_set_baudrate+0xa4>)
    4d30:	4798      	blx	r3
    4d32:	231f      	movs	r3, #31
    4d34:	4018      	ands	r0, r3
    4d36:	3b1e      	subs	r3, #30
    4d38:	4083      	lsls	r3, r0
    4d3a:	2280      	movs	r2, #128	; 0x80
    4d3c:	4921      	ldr	r1, [pc, #132]	; (4dc4 <spi_set_baudrate+0xa8>)
    4d3e:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d40:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4d42:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4d44:	2b00      	cmp	r3, #0
    4d46:	d1fc      	bne.n	4d42 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    4d48:	338f      	adds	r3, #143	; 0x8f
    4d4a:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    4d4c:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    4d4e:	6833      	ldr	r3, [r6, #0]
    4d50:	2202      	movs	r2, #2
    4d52:	4393      	bics	r3, r2
    4d54:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d56:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4d58:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    4d5a:	2b00      	cmp	r3, #0
    4d5c:	d1fc      	bne.n	4d58 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4d5e:	4b1a      	ldr	r3, [pc, #104]	; (4dc8 <spi_set_baudrate+0xac>)
    4d60:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4d62:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4d64:	b2c0      	uxtb	r0, r0
    4d66:	4b19      	ldr	r3, [pc, #100]	; (4dcc <spi_set_baudrate+0xb0>)
    4d68:	4798      	blx	r3
    4d6a:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    4d6c:	466b      	mov	r3, sp
    4d6e:	1d9a      	adds	r2, r3, #6
    4d70:	0020      	movs	r0, r4
    4d72:	4b17      	ldr	r3, [pc, #92]	; (4dd0 <spi_set_baudrate+0xb4>)
    4d74:	4798      	blx	r3
    4d76:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4d78:	d003      	beq.n	4d82 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    4d7a:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    4d7c:	0020      	movs	r0, r4
    4d7e:	b002      	add	sp, #8
    4d80:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    4d82:	466b      	mov	r3, sp
    4d84:	3306      	adds	r3, #6
    4d86:	781b      	ldrb	r3, [r3, #0]
    4d88:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4d8a:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4d8c:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d1fc      	bne.n	4d8c <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    4d92:	0030      	movs	r0, r6
    4d94:	4b0a      	ldr	r3, [pc, #40]	; (4dc0 <spi_set_baudrate+0xa4>)
    4d96:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4d98:	231f      	movs	r3, #31
    4d9a:	4018      	ands	r0, r3
    4d9c:	3b1e      	subs	r3, #30
    4d9e:	4083      	lsls	r3, r0
    4da0:	4a08      	ldr	r2, [pc, #32]	; (4dc4 <spi_set_baudrate+0xa8>)
    4da2:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4da4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4da6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4da8:	2b00      	cmp	r3, #0
    4daa:	d1fc      	bne.n	4da6 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    4dac:	6833      	ldr	r3, [r6, #0]
    4dae:	2202      	movs	r2, #2
    4db0:	4313      	orrs	r3, r2
    4db2:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4db4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    4db6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    4db8:	2b00      	cmp	r3, #0
    4dba:	d1fc      	bne.n	4db6 <spi_set_baudrate+0x9a>
    4dbc:	e7de      	b.n	4d7c <spi_set_baudrate+0x60>
    4dbe:	46c0      	nop			; (mov r8, r8)
    4dc0:	00004c41 	.word	0x00004c41
    4dc4:	e000e100 	.word	0xe000e100
    4dc8:	00004bc9 	.word	0x00004bc9
    4dcc:	00005fe9 	.word	0x00005fe9
    4dd0:	00004947 	.word	0x00004947

00004dd4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dd6:	b08b      	sub	sp, #44	; 0x2c
    4dd8:	0005      	movs	r5, r0
    4dda:	000c      	movs	r4, r1
    4ddc:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4dde:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4de0:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4de2:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4de4:	079b      	lsls	r3, r3, #30
    4de6:	d501      	bpl.n	4dec <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4de8:	b00b      	add	sp, #44	; 0x2c
    4dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4dec:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    4dee:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    4df0:	07db      	lsls	r3, r3, #31
    4df2:	d4f9      	bmi.n	4de8 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4df4:	0008      	movs	r0, r1
    4df6:	4b60      	ldr	r3, [pc, #384]	; (4f78 <spi_init+0x1a4>)
    4df8:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4dfa:	4a60      	ldr	r2, [pc, #384]	; (4f7c <spi_init+0x1a8>)
    4dfc:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4dfe:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4e00:	2301      	movs	r3, #1
    4e02:	40bb      	lsls	r3, r7
    4e04:	430b      	orrs	r3, r1
    4e06:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    4e08:	a909      	add	r1, sp, #36	; 0x24
    4e0a:	2724      	movs	r7, #36	; 0x24
    4e0c:	5df3      	ldrb	r3, [r6, r7]
    4e0e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4e10:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4e12:	b2c3      	uxtb	r3, r0
    4e14:	9301      	str	r3, [sp, #4]
    4e16:	0018      	movs	r0, r3
    4e18:	4b59      	ldr	r3, [pc, #356]	; (4f80 <spi_init+0x1ac>)
    4e1a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4e1c:	9801      	ldr	r0, [sp, #4]
    4e1e:	4b59      	ldr	r3, [pc, #356]	; (4f84 <spi_init+0x1b0>)
    4e20:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4e22:	5df0      	ldrb	r0, [r6, r7]
    4e24:	2100      	movs	r1, #0
    4e26:	4b58      	ldr	r3, [pc, #352]	; (4f88 <spi_init+0x1b4>)
    4e28:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    4e2a:	7833      	ldrb	r3, [r6, #0]
    4e2c:	2b01      	cmp	r3, #1
    4e2e:	d038      	beq.n	4ea2 <spi_init+0xce>
    4e30:	002b      	movs	r3, r5
    4e32:	330c      	adds	r3, #12
    4e34:	0029      	movs	r1, r5
    4e36:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    4e38:	2200      	movs	r2, #0
    4e3a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    4e3c:	428b      	cmp	r3, r1
    4e3e:	d1fc      	bne.n	4e3a <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    4e40:	2300      	movs	r3, #0
    4e42:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4e44:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4e46:	2400      	movs	r4, #0
    4e48:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    4e4a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    4e4c:	3336      	adds	r3, #54	; 0x36
    4e4e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4e50:	3301      	adds	r3, #1
    4e52:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4e54:	3301      	adds	r3, #1
    4e56:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    4e58:	3b35      	subs	r3, #53	; 0x35
    4e5a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    4e5c:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4e5e:	6828      	ldr	r0, [r5, #0]
    4e60:	4b45      	ldr	r3, [pc, #276]	; (4f78 <spi_init+0x1a4>)
    4e62:	4798      	blx	r3
    4e64:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4e66:	4949      	ldr	r1, [pc, #292]	; (4f8c <spi_init+0x1b8>)
    4e68:	4b49      	ldr	r3, [pc, #292]	; (4f90 <spi_init+0x1bc>)
    4e6a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4e6c:	00bf      	lsls	r7, r7, #2
    4e6e:	4b49      	ldr	r3, [pc, #292]	; (4f94 <spi_init+0x1c0>)
    4e70:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4e72:	682f      	ldr	r7, [r5, #0]
    4e74:	ab04      	add	r3, sp, #16
    4e76:	2280      	movs	r2, #128	; 0x80
    4e78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4e7a:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e7c:	3a7f      	subs	r2, #127	; 0x7f
    4e7e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4e80:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    4e82:	7833      	ldrb	r3, [r6, #0]
    4e84:	2b00      	cmp	r3, #0
    4e86:	d102      	bne.n	4e8e <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4e88:	2200      	movs	r2, #0
    4e8a:	ab04      	add	r3, sp, #16
    4e8c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4e8e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4e90:	9305      	str	r3, [sp, #20]
    4e92:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4e94:	9306      	str	r3, [sp, #24]
    4e96:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4e98:	9307      	str	r3, [sp, #28]
    4e9a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4e9c:	9308      	str	r3, [sp, #32]
    4e9e:	2400      	movs	r4, #0
    4ea0:	e00b      	b.n	4eba <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4ea2:	6823      	ldr	r3, [r4, #0]
    4ea4:	220c      	movs	r2, #12
    4ea6:	4313      	orrs	r3, r2
    4ea8:	6023      	str	r3, [r4, #0]
    4eaa:	e7c1      	b.n	4e30 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4eac:	0038      	movs	r0, r7
    4eae:	4b3a      	ldr	r3, [pc, #232]	; (4f98 <spi_init+0x1c4>)
    4eb0:	4798      	blx	r3
    4eb2:	e00a      	b.n	4eca <spi_init+0xf6>
    4eb4:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4eb6:	2c04      	cmp	r4, #4
    4eb8:	d010      	beq.n	4edc <spi_init+0x108>
    4eba:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4ebc:	00a3      	lsls	r3, r4, #2
    4ebe:	aa02      	add	r2, sp, #8
    4ec0:	200c      	movs	r0, #12
    4ec2:	1812      	adds	r2, r2, r0
    4ec4:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4ec6:	2800      	cmp	r0, #0
    4ec8:	d0f0      	beq.n	4eac <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    4eca:	1c43      	adds	r3, r0, #1
    4ecc:	d0f2      	beq.n	4eb4 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4ece:	a904      	add	r1, sp, #16
    4ed0:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4ed2:	0c00      	lsrs	r0, r0, #16
    4ed4:	b2c0      	uxtb	r0, r0
    4ed6:	4b31      	ldr	r3, [pc, #196]	; (4f9c <spi_init+0x1c8>)
    4ed8:	4798      	blx	r3
    4eda:	e7eb      	b.n	4eb4 <spi_init+0xe0>
	module->mode             = config->mode;
    4edc:	7833      	ldrb	r3, [r6, #0]
    4ede:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4ee0:	7c33      	ldrb	r3, [r6, #16]
    4ee2:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4ee4:	7cb3      	ldrb	r3, [r6, #18]
    4ee6:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4ee8:	7d33      	ldrb	r3, [r6, #20]
    4eea:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    4eec:	2200      	movs	r2, #0
    4eee:	ab02      	add	r3, sp, #8
    4ef0:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4ef2:	7833      	ldrb	r3, [r6, #0]
    4ef4:	2b01      	cmp	r3, #1
    4ef6:	d028      	beq.n	4f4a <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4ef8:	6873      	ldr	r3, [r6, #4]
    4efa:	68b2      	ldr	r2, [r6, #8]
    4efc:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4efe:	68f2      	ldr	r2, [r6, #12]
    4f00:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4f02:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4f04:	7c72      	ldrb	r2, [r6, #17]
    4f06:	2a00      	cmp	r2, #0
    4f08:	d103      	bne.n	4f12 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4f0a:	4a25      	ldr	r2, [pc, #148]	; (4fa0 <spi_init+0x1cc>)
    4f0c:	7892      	ldrb	r2, [r2, #2]
    4f0e:	0792      	lsls	r2, r2, #30
    4f10:	d501      	bpl.n	4f16 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4f12:	2280      	movs	r2, #128	; 0x80
    4f14:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4f16:	7cb2      	ldrb	r2, [r6, #18]
    4f18:	2a00      	cmp	r2, #0
    4f1a:	d002      	beq.n	4f22 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4f1c:	2280      	movs	r2, #128	; 0x80
    4f1e:	0292      	lsls	r2, r2, #10
    4f20:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4f22:	7cf2      	ldrb	r2, [r6, #19]
    4f24:	2a00      	cmp	r2, #0
    4f26:	d002      	beq.n	4f2e <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4f28:	2280      	movs	r2, #128	; 0x80
    4f2a:	0092      	lsls	r2, r2, #2
    4f2c:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4f2e:	7d32      	ldrb	r2, [r6, #20]
    4f30:	2a00      	cmp	r2, #0
    4f32:	d002      	beq.n	4f3a <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4f34:	2280      	movs	r2, #128	; 0x80
    4f36:	0192      	lsls	r2, r2, #6
    4f38:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4f3a:	683a      	ldr	r2, [r7, #0]
    4f3c:	4313      	orrs	r3, r2
    4f3e:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	430b      	orrs	r3, r1
    4f44:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    4f46:	2000      	movs	r0, #0
    4f48:	e74e      	b.n	4de8 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4f4a:	6828      	ldr	r0, [r5, #0]
    4f4c:	4b0a      	ldr	r3, [pc, #40]	; (4f78 <spi_init+0x1a4>)
    4f4e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4f50:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4f52:	b2c0      	uxtb	r0, r0
    4f54:	4b13      	ldr	r3, [pc, #76]	; (4fa4 <spi_init+0x1d0>)
    4f56:	4798      	blx	r3
    4f58:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4f5a:	ab02      	add	r3, sp, #8
    4f5c:	1d9a      	adds	r2, r3, #6
    4f5e:	69b0      	ldr	r0, [r6, #24]
    4f60:	4b11      	ldr	r3, [pc, #68]	; (4fa8 <spi_init+0x1d4>)
    4f62:	4798      	blx	r3
    4f64:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4f66:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4f68:	2b00      	cmp	r3, #0
    4f6a:	d000      	beq.n	4f6e <spi_init+0x19a>
    4f6c:	e73c      	b.n	4de8 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    4f6e:	ab02      	add	r3, sp, #8
    4f70:	3306      	adds	r3, #6
    4f72:	781b      	ldrb	r3, [r3, #0]
    4f74:	733b      	strb	r3, [r7, #12]
    4f76:	e7bf      	b.n	4ef8 <spi_init+0x124>
    4f78:	00004bc9 	.word	0x00004bc9
    4f7c:	40000400 	.word	0x40000400
    4f80:	00005fcd 	.word	0x00005fcd
    4f84:	00005f41 	.word	0x00005f41
    4f88:	00004a05 	.word	0x00004a05
    4f8c:	00005241 	.word	0x00005241
    4f90:	00004c05 	.word	0x00004c05
    4f94:	20001050 	.word	0x20001050
    4f98:	00004a51 	.word	0x00004a51
    4f9c:	000060c5 	.word	0x000060c5
    4fa0:	41002000 	.word	0x41002000
    4fa4:	00005fe9 	.word	0x00005fe9
    4fa8:	00004947 	.word	0x00004947

00004fac <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fae:	46d6      	mov	lr, sl
    4fb0:	4647      	mov	r7, r8
    4fb2:	b580      	push	{r7, lr}
    4fb4:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    4fb6:	2438      	movs	r4, #56	; 0x38
    4fb8:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    4fba:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    4fbc:	2d05      	cmp	r5, #5
    4fbe:	d002      	beq.n	4fc6 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    4fc0:	3412      	adds	r4, #18
	if (length == 0) {
    4fc2:	2a00      	cmp	r2, #0
    4fc4:	d105      	bne.n	4fd2 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    4fc6:	0020      	movs	r0, r4
    4fc8:	b003      	add	sp, #12
    4fca:	bc0c      	pop	{r2, r3}
    4fcc:	4690      	mov	r8, r2
    4fce:	469a      	mov	sl, r3
    4fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    4fd2:	79c4      	ldrb	r4, [r0, #7]
    4fd4:	2c00      	cmp	r4, #0
    4fd6:	d144      	bne.n	5062 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    4fd8:	341c      	adds	r4, #28
    4fda:	e7f4      	b.n	4fc6 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4fdc:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4fde:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    4fe0:	423c      	tst	r4, r7
    4fe2:	d0fc      	beq.n	4fde <spi_read_buffer_wait+0x32>
    4fe4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    4fe6:	423c      	tst	r4, r7
    4fe8:	d01a      	beq.n	5020 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4fea:	4644      	mov	r4, r8
    4fec:	62ac      	str	r4, [r5, #40]	; 0x28
    4fee:	e017      	b.n	5020 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4ff0:	7984      	ldrb	r4, [r0, #6]
    4ff2:	2c01      	cmp	r4, #1
    4ff4:	d026      	beq.n	5044 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4ff6:	6aad      	ldr	r5, [r5, #40]	; 0x28
    4ff8:	b2ec      	uxtb	r4, r5
    4ffa:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    4ffc:	9c01      	ldr	r4, [sp, #4]
    4ffe:	2c00      	cmp	r4, #0
    5000:	d13a      	bne.n	5078 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    5002:	1c75      	adds	r5, r6, #1
    5004:	b2ad      	uxth	r5, r5
    5006:	4664      	mov	r4, ip
    5008:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    500a:	7984      	ldrb	r4, [r0, #6]
    500c:	2c01      	cmp	r4, #1
    500e:	d01e      	beq.n	504e <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    5010:	002e      	movs	r6, r5
	while (length--) {
    5012:	3a01      	subs	r2, #1
    5014:	b292      	uxth	r2, r2
    5016:	4552      	cmp	r2, sl
    5018:	d01f      	beq.n	505a <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    501a:	7944      	ldrb	r4, [r0, #5]
    501c:	2c01      	cmp	r4, #1
    501e:	d0dd      	beq.n	4fdc <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    5020:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5022:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    5024:	421c      	tst	r4, r3
    5026:	d0fc      	beq.n	5022 <spi_read_buffer_wait+0x76>
    5028:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    502a:	421c      	tst	r4, r3
    502c:	d017      	beq.n	505e <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    502e:	8b6c      	ldrh	r4, [r5, #26]
    5030:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    5032:	2400      	movs	r4, #0
    5034:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5036:	4664      	mov	r4, ip
    5038:	421c      	tst	r4, r3
    503a:	d0d9      	beq.n	4ff0 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    503c:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    503e:	241e      	movs	r4, #30
    5040:	9401      	str	r4, [sp, #4]
    5042:	e7d5      	b.n	4ff0 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5044:	6aac      	ldr	r4, [r5, #40]	; 0x28
    5046:	05e4      	lsls	r4, r4, #23
    5048:	0de4      	lsrs	r4, r4, #23
    504a:	46a4      	mov	ip, r4
    504c:	e7d6      	b.n	4ffc <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    504e:	3602      	adds	r6, #2
    5050:	b2b6      	uxth	r6, r6
    5052:	4664      	mov	r4, ip
    5054:	0a24      	lsrs	r4, r4, #8
    5056:	554c      	strb	r4, [r1, r5]
    5058:	e7db      	b.n	5012 <spi_read_buffer_wait+0x66>
    505a:	9c01      	ldr	r4, [sp, #4]
    505c:	e7b3      	b.n	4fc6 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    505e:	2410      	movs	r4, #16
    5060:	e7b1      	b.n	4fc6 <spi_read_buffer_wait+0x1a>
	while (length--) {
    5062:	3a01      	subs	r2, #1
    5064:	b292      	uxth	r2, r2
    5066:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    5068:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    506a:	05db      	lsls	r3, r3, #23
    506c:	0ddb      	lsrs	r3, r3, #23
    506e:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    5070:	2304      	movs	r3, #4
	while (length--) {
    5072:	4c02      	ldr	r4, [pc, #8]	; (507c <spi_read_buffer_wait+0xd0>)
    5074:	46a2      	mov	sl, r4
    5076:	e7d0      	b.n	501a <spi_read_buffer_wait+0x6e>
    5078:	9c01      	ldr	r4, [sp, #4]
    507a:	e7a4      	b.n	4fc6 <spi_read_buffer_wait+0x1a>
    507c:	0000ffff 	.word	0x0000ffff

00005080 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    5080:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5082:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    5084:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    5086:	2c01      	cmp	r4, #1
    5088:	d001      	beq.n	508e <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    508a:	0018      	movs	r0, r3
    508c:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    508e:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    5090:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    5092:	2c00      	cmp	r4, #0
    5094:	d1f9      	bne.n	508a <spi_select_slave+0xa>
		if (select) {
    5096:	2a00      	cmp	r2, #0
    5098:	d058      	beq.n	514c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    509a:	784b      	ldrb	r3, [r1, #1]
    509c:	2b00      	cmp	r3, #0
    509e:	d044      	beq.n	512a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    50a0:	6803      	ldr	r3, [r0, #0]
    50a2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    50a4:	07db      	lsls	r3, r3, #31
    50a6:	d410      	bmi.n	50ca <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    50a8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    50aa:	09d1      	lsrs	r1, r2, #7
		return NULL;
    50ac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    50ae:	2900      	cmp	r1, #0
    50b0:	d104      	bne.n	50bc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    50b2:	0953      	lsrs	r3, r2, #5
    50b4:	01db      	lsls	r3, r3, #7
    50b6:	492e      	ldr	r1, [pc, #184]	; (5170 <spi_select_slave+0xf0>)
    50b8:	468c      	mov	ip, r1
    50ba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    50bc:	211f      	movs	r1, #31
    50be:	4011      	ands	r1, r2
    50c0:	2201      	movs	r2, #1
    50c2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    50c4:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    50c6:	2305      	movs	r3, #5
    50c8:	e7df      	b.n	508a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    50ca:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    50cc:	09d4      	lsrs	r4, r2, #7
		return NULL;
    50ce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    50d0:	2c00      	cmp	r4, #0
    50d2:	d104      	bne.n	50de <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    50d4:	0953      	lsrs	r3, r2, #5
    50d6:	01db      	lsls	r3, r3, #7
    50d8:	4c25      	ldr	r4, [pc, #148]	; (5170 <spi_select_slave+0xf0>)
    50da:	46a4      	mov	ip, r4
    50dc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    50de:	241f      	movs	r4, #31
    50e0:	4014      	ands	r4, r2
    50e2:	2201      	movs	r2, #1
    50e4:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    50e6:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    50e8:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    50ea:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    50ec:	07d2      	lsls	r2, r2, #31
    50ee:	d501      	bpl.n	50f4 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    50f0:	788a      	ldrb	r2, [r1, #2]
    50f2:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    50f4:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    50f6:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    50f8:	2a00      	cmp	r2, #0
    50fa:	d1c6      	bne.n	508a <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    50fc:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    50fe:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5100:	7e13      	ldrb	r3, [r2, #24]
    5102:	420b      	tst	r3, r1
    5104:	d0fc      	beq.n	5100 <spi_select_slave+0x80>
    5106:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    5108:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    510a:	0749      	lsls	r1, r1, #29
    510c:	d5bd      	bpl.n	508a <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    510e:	8b53      	ldrh	r3, [r2, #26]
    5110:	075b      	lsls	r3, r3, #29
    5112:	d501      	bpl.n	5118 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5114:	2304      	movs	r3, #4
    5116:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5118:	7983      	ldrb	r3, [r0, #6]
    511a:	2b01      	cmp	r3, #1
    511c:	d002      	beq.n	5124 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    511e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5120:	2300      	movs	r3, #0
    5122:	e7b2      	b.n	508a <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5124:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5126:	2300      	movs	r3, #0
    5128:	e7af      	b.n	508a <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    512a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    512c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    512e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5130:	2900      	cmp	r1, #0
    5132:	d104      	bne.n	513e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    5134:	0953      	lsrs	r3, r2, #5
    5136:	01db      	lsls	r3, r3, #7
    5138:	490d      	ldr	r1, [pc, #52]	; (5170 <spi_select_slave+0xf0>)
    513a:	468c      	mov	ip, r1
    513c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    513e:	211f      	movs	r1, #31
    5140:	4011      	ands	r1, r2
    5142:	2201      	movs	r2, #1
    5144:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5146:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    5148:	2300      	movs	r3, #0
    514a:	e79e      	b.n	508a <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    514c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    514e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5150:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5152:	2900      	cmp	r1, #0
    5154:	d104      	bne.n	5160 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    5156:	0953      	lsrs	r3, r2, #5
    5158:	01db      	lsls	r3, r3, #7
    515a:	4905      	ldr	r1, [pc, #20]	; (5170 <spi_select_slave+0xf0>)
    515c:	468c      	mov	ip, r1
    515e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5160:	211f      	movs	r1, #31
    5162:	4011      	ands	r1, r2
    5164:	2201      	movs	r2, #1
    5166:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5168:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    516a:	2300      	movs	r3, #0
    516c:	e78d      	b.n	508a <spi_select_slave+0xa>
    516e:	46c0      	nop			; (mov r8, r8)
    5170:	41004400 	.word	0x41004400

00005174 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    5174:	b5f0      	push	{r4, r5, r6, r7, lr}
    5176:	46de      	mov	lr, fp
    5178:	4657      	mov	r7, sl
    517a:	464e      	mov	r6, r9
    517c:	4645      	mov	r5, r8
    517e:	b5e0      	push	{r5, r6, r7, lr}
    5180:	b083      	sub	sp, #12
    5182:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    5184:	2338      	movs	r3, #56	; 0x38
    5186:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    5188:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    518a:	2c05      	cmp	r4, #5
    518c:	d002      	beq.n	5194 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    518e:	3312      	adds	r3, #18
	if (length == 0) {
    5190:	2a00      	cmp	r2, #0
    5192:	d14b      	bne.n	522c <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    5194:	0018      	movs	r0, r3
    5196:	b003      	add	sp, #12
    5198:	bc3c      	pop	{r2, r3, r4, r5}
    519a:	4690      	mov	r8, r2
    519c:	4699      	mov	r9, r3
    519e:	46a2      	mov	sl, r4
    51a0:	46ab      	mov	fp, r5
    51a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    51a4:	3702      	adds	r7, #2
    51a6:	b2bf      	uxth	r7, r7
    51a8:	4641      	mov	r1, r8
    51aa:	4653      	mov	r3, sl
    51ac:	5c59      	ldrb	r1, [r3, r1]
    51ae:	0209      	lsls	r1, r1, #8
    51b0:	465b      	mov	r3, fp
    51b2:	430b      	orrs	r3, r1
    51b4:	e018      	b.n	51e8 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51b6:	7983      	ldrb	r3, [r0, #6]
    51b8:	2b01      	cmp	r3, #1
    51ba:	d02a      	beq.n	5212 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    51bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    51be:	3e01      	subs	r6, #1
    51c0:	b2b6      	uxth	r6, r6
    51c2:	4566      	cmp	r6, ip
    51c4:	d027      	beq.n	5216 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    51c6:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    51c8:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    51ca:	4223      	tst	r3, r4
    51cc:	d0fc      	beq.n	51c8 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    51ce:	1c7b      	adds	r3, r7, #1
    51d0:	b29b      	uxth	r3, r3
    51d2:	4698      	mov	r8, r3
    51d4:	4653      	mov	r3, sl
    51d6:	5ddb      	ldrb	r3, [r3, r7]
    51d8:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    51da:	7981      	ldrb	r1, [r0, #6]
    51dc:	2901      	cmp	r1, #1
    51de:	d0e1      	beq.n	51a4 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    51e0:	4669      	mov	r1, sp
    51e2:	80cb      	strh	r3, [r1, #6]
    51e4:	88cb      	ldrh	r3, [r1, #6]
    51e6:	4647      	mov	r7, r8
    51e8:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    51ea:	4221      	tst	r1, r4
    51ec:	d002      	beq.n	51f4 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    51ee:	05db      	lsls	r3, r3, #23
    51f0:	0ddb      	lsrs	r3, r3, #23
    51f2:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    51f4:	79c3      	ldrb	r3, [r0, #7]
    51f6:	2b00      	cmp	r3, #0
    51f8:	d0e1      	beq.n	51be <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    51fa:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    51fc:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    51fe:	422b      	tst	r3, r5
    5200:	d0fc      	beq.n	51fc <spi_write_buffer_wait+0x88>
    5202:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    5204:	422b      	tst	r3, r5
    5206:	d0da      	beq.n	51be <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5208:	8b53      	ldrh	r3, [r2, #26]
    520a:	422b      	tst	r3, r5
    520c:	d0d3      	beq.n	51b6 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    520e:	8355      	strh	r5, [r2, #26]
    5210:	e7d1      	b.n	51b6 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5212:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5214:	e7d3      	b.n	51be <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    5216:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    5218:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    521a:	2a01      	cmp	r2, #1
    521c:	d1ba      	bne.n	5194 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    521e:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    5220:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5222:	7e0b      	ldrb	r3, [r1, #24]
    5224:	4213      	tst	r3, r2
    5226:	d0fc      	beq.n	5222 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    5228:	2300      	movs	r3, #0
    522a:	e7b3      	b.n	5194 <spi_write_buffer_wait+0x20>
	while (length--) {
    522c:	3a01      	subs	r2, #1
    522e:	b296      	uxth	r6, r2
    5230:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    5232:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    5234:	2504      	movs	r5, #4
	while (length--) {
    5236:	4b01      	ldr	r3, [pc, #4]	; (523c <spi_write_buffer_wait+0xc8>)
    5238:	469c      	mov	ip, r3
    523a:	e7c4      	b.n	51c6 <spi_write_buffer_wait+0x52>
    523c:	0000ffff 	.word	0x0000ffff

00005240 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    5240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    5242:	0080      	lsls	r0, r0, #2
    5244:	4b70      	ldr	r3, [pc, #448]	; (5408 <_spi_interrupt_handler+0x1c8>)
    5246:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5248:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    524a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    524c:	5ce7      	ldrb	r7, [r4, r3]
    524e:	2236      	movs	r2, #54	; 0x36
    5250:	5ca2      	ldrb	r2, [r4, r2]
    5252:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    5254:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    5256:	7db5      	ldrb	r5, [r6, #22]
    5258:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    525a:	07eb      	lsls	r3, r5, #31
    525c:	d502      	bpl.n	5264 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    525e:	7963      	ldrb	r3, [r4, #5]
    5260:	2b01      	cmp	r3, #1
    5262:	d01e      	beq.n	52a2 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    5264:	076b      	lsls	r3, r5, #29
    5266:	d511      	bpl.n	528c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5268:	8b73      	ldrh	r3, [r6, #26]
    526a:	075b      	lsls	r3, r3, #29
    526c:	d55a      	bpl.n	5324 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    526e:	7a63      	ldrb	r3, [r4, #9]
    5270:	2b01      	cmp	r3, #1
    5272:	d008      	beq.n	5286 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    5274:	221e      	movs	r2, #30
    5276:	2338      	movs	r3, #56	; 0x38
    5278:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    527a:	3b35      	subs	r3, #53	; 0x35
    527c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    527e:	3302      	adds	r3, #2
    5280:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    5282:	073b      	lsls	r3, r7, #28
    5284:	d44a      	bmi.n	531c <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    5286:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5288:	2304      	movs	r3, #4
    528a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    528c:	07ab      	lsls	r3, r5, #30
    528e:	d503      	bpl.n	5298 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5290:	7963      	ldrb	r3, [r4, #5]
    5292:	2b01      	cmp	r3, #1
    5294:	d100      	bne.n	5298 <_spi_interrupt_handler+0x58>
    5296:	e097      	b.n	53c8 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    5298:	b26d      	sxtb	r5, r5
    529a:	2d00      	cmp	r5, #0
    529c:	da00      	bge.n	52a0 <_spi_interrupt_handler+0x60>
    529e:	e0a9      	b.n	53f4 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    52a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    52a2:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    52a4:	2b00      	cmp	r3, #0
    52a6:	d022      	beq.n	52ee <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    52a8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    52aa:	2b00      	cmp	r3, #0
    52ac:	d0da      	beq.n	5264 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    52ae:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    52b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52b2:	7813      	ldrb	r3, [r2, #0]
    52b4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    52b6:	1c50      	adds	r0, r2, #1
    52b8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    52ba:	79a0      	ldrb	r0, [r4, #6]
    52bc:	2801      	cmp	r0, #1
    52be:	d027      	beq.n	5310 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    52c0:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    52c2:	05db      	lsls	r3, r3, #23
    52c4:	0ddb      	lsrs	r3, r3, #23
    52c6:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    52c8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    52ca:	3b01      	subs	r3, #1
    52cc:	b29b      	uxth	r3, r3
    52ce:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    52d0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    52d2:	b29b      	uxth	r3, r3
    52d4:	2b00      	cmp	r3, #0
    52d6:	d1c5      	bne.n	5264 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    52d8:	3301      	adds	r3, #1
    52da:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    52dc:	7a63      	ldrb	r3, [r4, #9]
    52de:	2b01      	cmp	r3, #1
    52e0:	d1c0      	bne.n	5264 <_spi_interrupt_handler+0x24>
    52e2:	79e3      	ldrb	r3, [r4, #7]
    52e4:	2b00      	cmp	r3, #0
    52e6:	d1bd      	bne.n	5264 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    52e8:	3302      	adds	r3, #2
    52ea:	75b3      	strb	r3, [r6, #22]
    52ec:	e7ba      	b.n	5264 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    52ee:	4b47      	ldr	r3, [pc, #284]	; (540c <_spi_interrupt_handler+0x1cc>)
    52f0:	881b      	ldrh	r3, [r3, #0]
    52f2:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    52f4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    52f6:	3b01      	subs	r3, #1
    52f8:	b29b      	uxth	r3, r3
    52fa:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    52fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    52fe:	b29b      	uxth	r3, r3
    5300:	2b00      	cmp	r3, #0
    5302:	d101      	bne.n	5308 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    5304:	3301      	adds	r3, #1
    5306:	7533      	strb	r3, [r6, #20]
		if (0
    5308:	7963      	ldrb	r3, [r4, #5]
    530a:	2b01      	cmp	r3, #1
    530c:	d0cc      	beq.n	52a8 <_spi_interrupt_handler+0x68>
    530e:	e7a9      	b.n	5264 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    5310:	7850      	ldrb	r0, [r2, #1]
    5312:	0200      	lsls	r0, r0, #8
    5314:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    5316:	3202      	adds	r2, #2
    5318:	62e2      	str	r2, [r4, #44]	; 0x2c
    531a:	e7d2      	b.n	52c2 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    531c:	0020      	movs	r0, r4
    531e:	69a3      	ldr	r3, [r4, #24]
    5320:	4798      	blx	r3
    5322:	e7b0      	b.n	5286 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    5324:	7a63      	ldrb	r3, [r4, #9]
    5326:	2b01      	cmp	r3, #1
    5328:	d028      	beq.n	537c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    532a:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    532e:	05db      	lsls	r3, r3, #23
    5330:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    5332:	b2da      	uxtb	r2, r3
    5334:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5336:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    5338:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    533a:	1c51      	adds	r1, r2, #1
    533c:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    533e:	79a1      	ldrb	r1, [r4, #6]
    5340:	2901      	cmp	r1, #1
    5342:	d034      	beq.n	53ae <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    5344:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    5346:	3b01      	subs	r3, #1
    5348:	b29b      	uxth	r3, r3
    534a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    534c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    534e:	b29b      	uxth	r3, r3
    5350:	2b00      	cmp	r3, #0
    5352:	d000      	beq.n	5356 <_spi_interrupt_handler+0x116>
    5354:	e79a      	b.n	528c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    5356:	2200      	movs	r2, #0
    5358:	3338      	adds	r3, #56	; 0x38
    535a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    535c:	3b34      	subs	r3, #52	; 0x34
    535e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    5360:	7a63      	ldrb	r3, [r4, #9]
    5362:	2b02      	cmp	r3, #2
    5364:	d029      	beq.n	53ba <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    5366:	7a63      	ldrb	r3, [r4, #9]
    5368:	2b00      	cmp	r3, #0
    536a:	d000      	beq.n	536e <_spi_interrupt_handler+0x12e>
    536c:	e78e      	b.n	528c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    536e:	07bb      	lsls	r3, r7, #30
    5370:	d400      	bmi.n	5374 <_spi_interrupt_handler+0x134>
    5372:	e78b      	b.n	528c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    5374:	0020      	movs	r0, r4
    5376:	6923      	ldr	r3, [r4, #16]
    5378:	4798      	blx	r3
    537a:	e787      	b.n	528c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    537c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    5380:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    5382:	3b01      	subs	r3, #1
    5384:	b29b      	uxth	r3, r3
    5386:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    5388:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    538a:	b29b      	uxth	r3, r3
    538c:	2b00      	cmp	r3, #0
    538e:	d000      	beq.n	5392 <_spi_interrupt_handler+0x152>
    5390:	e77c      	b.n	528c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5392:	3304      	adds	r3, #4
    5394:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    5396:	2200      	movs	r2, #0
    5398:	3334      	adds	r3, #52	; 0x34
    539a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    539c:	3b35      	subs	r3, #53	; 0x35
    539e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    53a0:	07fb      	lsls	r3, r7, #31
    53a2:	d400      	bmi.n	53a6 <_spi_interrupt_handler+0x166>
    53a4:	e772      	b.n	528c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    53a6:	0020      	movs	r0, r4
    53a8:	68e3      	ldr	r3, [r4, #12]
    53aa:	4798      	blx	r3
    53ac:	e76e      	b.n	528c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    53ae:	0a1b      	lsrs	r3, r3, #8
    53b0:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    53b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    53b4:	3301      	adds	r3, #1
    53b6:	62a3      	str	r3, [r4, #40]	; 0x28
    53b8:	e7c4      	b.n	5344 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    53ba:	077b      	lsls	r3, r7, #29
    53bc:	d400      	bmi.n	53c0 <_spi_interrupt_handler+0x180>
    53be:	e765      	b.n	528c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    53c0:	0020      	movs	r0, r4
    53c2:	6963      	ldr	r3, [r4, #20]
    53c4:	4798      	blx	r3
    53c6:	e761      	b.n	528c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    53c8:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    53ca:	2b01      	cmp	r3, #1
    53cc:	d000      	beq.n	53d0 <_spi_interrupt_handler+0x190>
    53ce:	e763      	b.n	5298 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    53d0:	79e3      	ldrb	r3, [r4, #7]
    53d2:	2b00      	cmp	r3, #0
    53d4:	d000      	beq.n	53d8 <_spi_interrupt_handler+0x198>
    53d6:	e75f      	b.n	5298 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    53d8:	3302      	adds	r3, #2
    53da:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    53dc:	3301      	adds	r3, #1
    53de:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    53e0:	2200      	movs	r2, #0
    53e2:	3335      	adds	r3, #53	; 0x35
    53e4:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    53e6:	07fb      	lsls	r3, r7, #31
    53e8:	d400      	bmi.n	53ec <_spi_interrupt_handler+0x1ac>
    53ea:	e755      	b.n	5298 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    53ec:	0020      	movs	r0, r4
    53ee:	68e3      	ldr	r3, [r4, #12]
    53f0:	4798      	blx	r3
    53f2:	e751      	b.n	5298 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    53f4:	2380      	movs	r3, #128	; 0x80
    53f6:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    53f8:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    53fa:	067b      	lsls	r3, r7, #25
    53fc:	d400      	bmi.n	5400 <_spi_interrupt_handler+0x1c0>
    53fe:	e74f      	b.n	52a0 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5400:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5402:	0020      	movs	r0, r4
    5404:	4798      	blx	r3
}
    5406:	e74b      	b.n	52a0 <_spi_interrupt_handler+0x60>
    5408:	20001050 	.word	0x20001050
    540c:	20001068 	.word	0x20001068

00005410 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    5410:	b5f0      	push	{r4, r5, r6, r7, lr}
    5412:	46de      	mov	lr, fp
    5414:	4657      	mov	r7, sl
    5416:	464e      	mov	r6, r9
    5418:	4645      	mov	r5, r8
    541a:	b5e0      	push	{r5, r6, r7, lr}
    541c:	b091      	sub	sp, #68	; 0x44
    541e:	0005      	movs	r5, r0
    5420:	000c      	movs	r4, r1
    5422:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    5424:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5426:	0008      	movs	r0, r1
    5428:	4bbc      	ldr	r3, [pc, #752]	; (571c <usart_init+0x30c>)
    542a:	4798      	blx	r3
    542c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    542e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    5430:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    5432:	07db      	lsls	r3, r3, #31
    5434:	d506      	bpl.n	5444 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    5436:	b011      	add	sp, #68	; 0x44
    5438:	bc3c      	pop	{r2, r3, r4, r5}
    543a:	4690      	mov	r8, r2
    543c:	4699      	mov	r9, r3
    543e:	46a2      	mov	sl, r4
    5440:	46ab      	mov	fp, r5
    5442:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5444:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    5446:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    5448:	079b      	lsls	r3, r3, #30
    544a:	d4f4      	bmi.n	5436 <usart_init+0x26>
    544c:	49b4      	ldr	r1, [pc, #720]	; (5720 <usart_init+0x310>)
    544e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5450:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5452:	2301      	movs	r3, #1
    5454:	40bb      	lsls	r3, r7
    5456:	4303      	orrs	r3, r0
    5458:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    545a:	a90f      	add	r1, sp, #60	; 0x3c
    545c:	272d      	movs	r7, #45	; 0x2d
    545e:	5df3      	ldrb	r3, [r6, r7]
    5460:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5462:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5464:	b2d3      	uxtb	r3, r2
    5466:	9302      	str	r3, [sp, #8]
    5468:	0018      	movs	r0, r3
    546a:	4bae      	ldr	r3, [pc, #696]	; (5724 <usart_init+0x314>)
    546c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    546e:	9802      	ldr	r0, [sp, #8]
    5470:	4bad      	ldr	r3, [pc, #692]	; (5728 <usart_init+0x318>)
    5472:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5474:	5df0      	ldrb	r0, [r6, r7]
    5476:	2100      	movs	r1, #0
    5478:	4bac      	ldr	r3, [pc, #688]	; (572c <usart_init+0x31c>)
    547a:	4798      	blx	r3
	module->character_size = config->character_size;
    547c:	7af3      	ldrb	r3, [r6, #11]
    547e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    5480:	2324      	movs	r3, #36	; 0x24
    5482:	5cf3      	ldrb	r3, [r6, r3]
    5484:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    5486:	2325      	movs	r3, #37	; 0x25
    5488:	5cf3      	ldrb	r3, [r6, r3]
    548a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    548c:	7ef3      	ldrb	r3, [r6, #27]
    548e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5490:	7f33      	ldrb	r3, [r6, #28]
    5492:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5494:	682b      	ldr	r3, [r5, #0]
    5496:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5498:	0018      	movs	r0, r3
    549a:	4ba0      	ldr	r3, [pc, #640]	; (571c <usart_init+0x30c>)
    549c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    549e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    54a0:	2200      	movs	r2, #0
    54a2:	230e      	movs	r3, #14
    54a4:	a906      	add	r1, sp, #24
    54a6:	468c      	mov	ip, r1
    54a8:	4463      	add	r3, ip
    54aa:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    54ac:	8a32      	ldrh	r2, [r6, #16]
    54ae:	9202      	str	r2, [sp, #8]
    54b0:	2380      	movs	r3, #128	; 0x80
    54b2:	01db      	lsls	r3, r3, #7
    54b4:	429a      	cmp	r2, r3
    54b6:	d100      	bne.n	54ba <usart_init+0xaa>
    54b8:	e09e      	b.n	55f8 <usart_init+0x1e8>
    54ba:	d90f      	bls.n	54dc <usart_init+0xcc>
    54bc:	23c0      	movs	r3, #192	; 0xc0
    54be:	01db      	lsls	r3, r3, #7
    54c0:	9a02      	ldr	r2, [sp, #8]
    54c2:	429a      	cmp	r2, r3
    54c4:	d100      	bne.n	54c8 <usart_init+0xb8>
    54c6:	e092      	b.n	55ee <usart_init+0x1de>
    54c8:	2380      	movs	r3, #128	; 0x80
    54ca:	021b      	lsls	r3, r3, #8
    54cc:	429a      	cmp	r2, r3
    54ce:	d000      	beq.n	54d2 <usart_init+0xc2>
    54d0:	e11f      	b.n	5712 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    54d2:	2303      	movs	r3, #3
    54d4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    54d6:	2300      	movs	r3, #0
    54d8:	9307      	str	r3, [sp, #28]
    54da:	e008      	b.n	54ee <usart_init+0xde>
	switch (config->sample_rate) {
    54dc:	2380      	movs	r3, #128	; 0x80
    54de:	019b      	lsls	r3, r3, #6
    54e0:	429a      	cmp	r2, r3
    54e2:	d000      	beq.n	54e6 <usart_init+0xd6>
    54e4:	e115      	b.n	5712 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    54e6:	2310      	movs	r3, #16
    54e8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    54ea:	3b0f      	subs	r3, #15
    54ec:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    54ee:	6833      	ldr	r3, [r6, #0]
    54f0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    54f2:	68f3      	ldr	r3, [r6, #12]
    54f4:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    54f6:	6973      	ldr	r3, [r6, #20]
    54f8:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    54fa:	7e33      	ldrb	r3, [r6, #24]
    54fc:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    54fe:	2326      	movs	r3, #38	; 0x26
    5500:	5cf3      	ldrb	r3, [r6, r3]
    5502:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    5504:	6873      	ldr	r3, [r6, #4]
    5506:	4699      	mov	r9, r3
	switch (transfer_mode)
    5508:	2b00      	cmp	r3, #0
    550a:	d100      	bne.n	550e <usart_init+0xfe>
    550c:	e0a0      	b.n	5650 <usart_init+0x240>
    550e:	2380      	movs	r3, #128	; 0x80
    5510:	055b      	lsls	r3, r3, #21
    5512:	4599      	cmp	r9, r3
    5514:	d100      	bne.n	5518 <usart_init+0x108>
    5516:	e084      	b.n	5622 <usart_init+0x212>
	if(config->encoding_format_enable) {
    5518:	7e73      	ldrb	r3, [r6, #25]
    551a:	2b00      	cmp	r3, #0
    551c:	d002      	beq.n	5524 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    551e:	7eb3      	ldrb	r3, [r6, #26]
    5520:	4642      	mov	r2, r8
    5522:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    5524:	682a      	ldr	r2, [r5, #0]
    5526:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    5528:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    552a:	2b00      	cmp	r3, #0
    552c:	d1fc      	bne.n	5528 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    552e:	330e      	adds	r3, #14
    5530:	aa06      	add	r2, sp, #24
    5532:	4694      	mov	ip, r2
    5534:	4463      	add	r3, ip
    5536:	881b      	ldrh	r3, [r3, #0]
    5538:	4642      	mov	r2, r8
    553a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    553c:	9b05      	ldr	r3, [sp, #20]
    553e:	9a03      	ldr	r2, [sp, #12]
    5540:	4313      	orrs	r3, r2
    5542:	9a04      	ldr	r2, [sp, #16]
    5544:	4313      	orrs	r3, r2
    5546:	464a      	mov	r2, r9
    5548:	4313      	orrs	r3, r2
    554a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    554c:	465b      	mov	r3, fp
    554e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    5550:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5552:	4653      	mov	r3, sl
    5554:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    5556:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    5558:	2327      	movs	r3, #39	; 0x27
    555a:	5cf3      	ldrb	r3, [r6, r3]
    555c:	2b00      	cmp	r3, #0
    555e:	d101      	bne.n	5564 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    5560:	3304      	adds	r3, #4
    5562:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    5564:	7e73      	ldrb	r3, [r6, #25]
    5566:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5568:	7f32      	ldrb	r2, [r6, #28]
    556a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    556c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    556e:	7f72      	ldrb	r2, [r6, #29]
    5570:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    5572:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5574:	2224      	movs	r2, #36	; 0x24
    5576:	5cb2      	ldrb	r2, [r6, r2]
    5578:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    557a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    557c:	2225      	movs	r2, #37	; 0x25
    557e:	5cb2      	ldrb	r2, [r6, r2]
    5580:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    5582:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    5584:	7ab1      	ldrb	r1, [r6, #10]
    5586:	7af2      	ldrb	r2, [r6, #11]
    5588:	4311      	orrs	r1, r2
    558a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    558c:	8933      	ldrh	r3, [r6, #8]
    558e:	2bff      	cmp	r3, #255	; 0xff
    5590:	d100      	bne.n	5594 <usart_init+0x184>
    5592:	e081      	b.n	5698 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    5594:	2280      	movs	r2, #128	; 0x80
    5596:	0452      	lsls	r2, r2, #17
    5598:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    559a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    559c:	232c      	movs	r3, #44	; 0x2c
    559e:	5cf3      	ldrb	r3, [r6, r3]
    55a0:	2b00      	cmp	r3, #0
    55a2:	d103      	bne.n	55ac <usart_init+0x19c>
    55a4:	4b62      	ldr	r3, [pc, #392]	; (5730 <usart_init+0x320>)
    55a6:	789b      	ldrb	r3, [r3, #2]
    55a8:	079b      	lsls	r3, r3, #30
    55aa:	d501      	bpl.n	55b0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    55ac:	2380      	movs	r3, #128	; 0x80
    55ae:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    55b0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    55b2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    55b4:	2b00      	cmp	r3, #0
    55b6:	d1fc      	bne.n	55b2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    55b8:	4643      	mov	r3, r8
    55ba:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    55bc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    55be:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    55c0:	2b00      	cmp	r3, #0
    55c2:	d1fc      	bne.n	55be <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    55c4:	4643      	mov	r3, r8
    55c6:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    55c8:	ab0e      	add	r3, sp, #56	; 0x38
    55ca:	2280      	movs	r2, #128	; 0x80
    55cc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    55ce:	2200      	movs	r2, #0
    55d0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    55d2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    55d4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    55d6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    55d8:	930a      	str	r3, [sp, #40]	; 0x28
    55da:	6b73      	ldr	r3, [r6, #52]	; 0x34
    55dc:	930b      	str	r3, [sp, #44]	; 0x2c
    55de:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    55e0:	930c      	str	r3, [sp, #48]	; 0x30
    55e2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    55e4:	9302      	str	r3, [sp, #8]
    55e6:	930d      	str	r3, [sp, #52]	; 0x34
    55e8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    55ea:	ae0a      	add	r6, sp, #40	; 0x28
    55ec:	e063      	b.n	56b6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    55ee:	2308      	movs	r3, #8
    55f0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    55f2:	3b07      	subs	r3, #7
    55f4:	9307      	str	r3, [sp, #28]
    55f6:	e77a      	b.n	54ee <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    55f8:	6833      	ldr	r3, [r6, #0]
    55fa:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    55fc:	68f3      	ldr	r3, [r6, #12]
    55fe:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    5600:	6973      	ldr	r3, [r6, #20]
    5602:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    5604:	7e33      	ldrb	r3, [r6, #24]
    5606:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    5608:	2326      	movs	r3, #38	; 0x26
    560a:	5cf3      	ldrb	r3, [r6, r3]
    560c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    560e:	6873      	ldr	r3, [r6, #4]
    5610:	4699      	mov	r9, r3
	switch (transfer_mode)
    5612:	2b00      	cmp	r3, #0
    5614:	d018      	beq.n	5648 <usart_init+0x238>
    5616:	2380      	movs	r3, #128	; 0x80
    5618:	055b      	lsls	r3, r3, #21
    561a:	4599      	cmp	r9, r3
    561c:	d001      	beq.n	5622 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    561e:	2000      	movs	r0, #0
    5620:	e025      	b.n	566e <usart_init+0x25e>
			if (!config->use_external_clock) {
    5622:	2327      	movs	r3, #39	; 0x27
    5624:	5cf3      	ldrb	r3, [r6, r3]
    5626:	2b00      	cmp	r3, #0
    5628:	d000      	beq.n	562c <usart_init+0x21c>
    562a:	e775      	b.n	5518 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    562c:	6a33      	ldr	r3, [r6, #32]
    562e:	001f      	movs	r7, r3
    5630:	b2c0      	uxtb	r0, r0
    5632:	4b40      	ldr	r3, [pc, #256]	; (5734 <usart_init+0x324>)
    5634:	4798      	blx	r3
    5636:	0001      	movs	r1, r0
    5638:	220e      	movs	r2, #14
    563a:	ab06      	add	r3, sp, #24
    563c:	469c      	mov	ip, r3
    563e:	4462      	add	r2, ip
    5640:	0038      	movs	r0, r7
    5642:	4b3d      	ldr	r3, [pc, #244]	; (5738 <usart_init+0x328>)
    5644:	4798      	blx	r3
    5646:	e012      	b.n	566e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    5648:	2308      	movs	r3, #8
    564a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    564c:	2300      	movs	r3, #0
    564e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    5650:	2327      	movs	r3, #39	; 0x27
    5652:	5cf3      	ldrb	r3, [r6, r3]
    5654:	2b00      	cmp	r3, #0
    5656:	d00e      	beq.n	5676 <usart_init+0x266>
				status_code =
    5658:	9b06      	ldr	r3, [sp, #24]
    565a:	9300      	str	r3, [sp, #0]
    565c:	9b07      	ldr	r3, [sp, #28]
    565e:	220e      	movs	r2, #14
    5660:	a906      	add	r1, sp, #24
    5662:	468c      	mov	ip, r1
    5664:	4462      	add	r2, ip
    5666:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    5668:	6a30      	ldr	r0, [r6, #32]
    566a:	4f34      	ldr	r7, [pc, #208]	; (573c <usart_init+0x32c>)
    566c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    566e:	2800      	cmp	r0, #0
    5670:	d000      	beq.n	5674 <usart_init+0x264>
    5672:	e6e0      	b.n	5436 <usart_init+0x26>
    5674:	e750      	b.n	5518 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    5676:	6a33      	ldr	r3, [r6, #32]
    5678:	001f      	movs	r7, r3
    567a:	b2c0      	uxtb	r0, r0
    567c:	4b2d      	ldr	r3, [pc, #180]	; (5734 <usart_init+0x324>)
    567e:	4798      	blx	r3
    5680:	0001      	movs	r1, r0
				status_code =
    5682:	9b06      	ldr	r3, [sp, #24]
    5684:	9300      	str	r3, [sp, #0]
    5686:	9b07      	ldr	r3, [sp, #28]
    5688:	220e      	movs	r2, #14
    568a:	a806      	add	r0, sp, #24
    568c:	4684      	mov	ip, r0
    568e:	4462      	add	r2, ip
    5690:	0038      	movs	r0, r7
    5692:	4f2a      	ldr	r7, [pc, #168]	; (573c <usart_init+0x32c>)
    5694:	47b8      	blx	r7
    5696:	e7ea      	b.n	566e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    5698:	7ef3      	ldrb	r3, [r6, #27]
    569a:	2b00      	cmp	r3, #0
    569c:	d100      	bne.n	56a0 <usart_init+0x290>
    569e:	e77d      	b.n	559c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    56a0:	2380      	movs	r3, #128	; 0x80
    56a2:	04db      	lsls	r3, r3, #19
    56a4:	431f      	orrs	r7, r3
    56a6:	e779      	b.n	559c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    56a8:	0020      	movs	r0, r4
    56aa:	4b25      	ldr	r3, [pc, #148]	; (5740 <usart_init+0x330>)
    56ac:	4798      	blx	r3
    56ae:	e007      	b.n	56c0 <usart_init+0x2b0>
    56b0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    56b2:	2f04      	cmp	r7, #4
    56b4:	d00d      	beq.n	56d2 <usart_init+0x2c2>
    56b6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    56b8:	00bb      	lsls	r3, r7, #2
    56ba:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    56bc:	2800      	cmp	r0, #0
    56be:	d0f3      	beq.n	56a8 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    56c0:	1c43      	adds	r3, r0, #1
    56c2:	d0f5      	beq.n	56b0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    56c4:	a90e      	add	r1, sp, #56	; 0x38
    56c6:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    56c8:	0c00      	lsrs	r0, r0, #16
    56ca:	b2c0      	uxtb	r0, r0
    56cc:	4b1d      	ldr	r3, [pc, #116]	; (5744 <usart_init+0x334>)
    56ce:	4798      	blx	r3
    56d0:	e7ee      	b.n	56b0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    56d2:	2300      	movs	r3, #0
    56d4:	60eb      	str	r3, [r5, #12]
    56d6:	612b      	str	r3, [r5, #16]
    56d8:	616b      	str	r3, [r5, #20]
    56da:	61ab      	str	r3, [r5, #24]
    56dc:	61eb      	str	r3, [r5, #28]
    56de:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    56e0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    56e2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    56e4:	2200      	movs	r2, #0
    56e6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    56e8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    56ea:	3330      	adds	r3, #48	; 0x30
    56ec:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    56ee:	3301      	adds	r3, #1
    56f0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    56f2:	3301      	adds	r3, #1
    56f4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    56f6:	3301      	adds	r3, #1
    56f8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    56fa:	6828      	ldr	r0, [r5, #0]
    56fc:	4b07      	ldr	r3, [pc, #28]	; (571c <usart_init+0x30c>)
    56fe:	4798      	blx	r3
    5700:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    5702:	4911      	ldr	r1, [pc, #68]	; (5748 <usart_init+0x338>)
    5704:	4b11      	ldr	r3, [pc, #68]	; (574c <usart_init+0x33c>)
    5706:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5708:	00a4      	lsls	r4, r4, #2
    570a:	4b11      	ldr	r3, [pc, #68]	; (5750 <usart_init+0x340>)
    570c:	50e5      	str	r5, [r4, r3]
	return status_code;
    570e:	2000      	movs	r0, #0
    5710:	e691      	b.n	5436 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    5712:	2310      	movs	r3, #16
    5714:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    5716:	2300      	movs	r3, #0
    5718:	9307      	str	r3, [sp, #28]
    571a:	e6e8      	b.n	54ee <usart_init+0xde>
    571c:	00004bc9 	.word	0x00004bc9
    5720:	40000400 	.word	0x40000400
    5724:	00005fcd 	.word	0x00005fcd
    5728:	00005f41 	.word	0x00005f41
    572c:	00004a05 	.word	0x00004a05
    5730:	41002000 	.word	0x41002000
    5734:	00005fe9 	.word	0x00005fe9
    5738:	00004947 	.word	0x00004947
    573c:	00004971 	.word	0x00004971
    5740:	00004a51 	.word	0x00004a51
    5744:	000060c5 	.word	0x000060c5
    5748:	000057f1 	.word	0x000057f1
    574c:	00004c05 	.word	0x00004c05
    5750:	20001050 	.word	0x20001050

00005754 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5754:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    5756:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    5758:	2a00      	cmp	r2, #0
    575a:	d101      	bne.n	5760 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    575c:	0018      	movs	r0, r3
    575e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    5760:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    5762:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5764:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    5766:	2a00      	cmp	r2, #0
    5768:	d1f8      	bne.n	575c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    576a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    576c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    576e:	2a00      	cmp	r2, #0
    5770:	d1fc      	bne.n	576c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    5772:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5774:	2102      	movs	r1, #2
    5776:	7e1a      	ldrb	r2, [r3, #24]
    5778:	420a      	tst	r2, r1
    577a:	d0fc      	beq.n	5776 <usart_write_wait+0x22>
	return STATUS_OK;
    577c:	2300      	movs	r3, #0
    577e:	e7ed      	b.n	575c <usart_write_wait+0x8>

00005780 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5780:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    5782:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    5784:	2a00      	cmp	r2, #0
    5786:	d101      	bne.n	578c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    5788:	0018      	movs	r0, r3
    578a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    578c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    578e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    5790:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    5792:	2a00      	cmp	r2, #0
    5794:	d1f8      	bne.n	5788 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    5796:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    5798:	7e10      	ldrb	r0, [r2, #24]
    579a:	0740      	lsls	r0, r0, #29
    579c:	d5f4      	bpl.n	5788 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    579e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    57a0:	2b00      	cmp	r3, #0
    57a2:	d1fc      	bne.n	579e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    57a4:	8b53      	ldrh	r3, [r2, #26]
    57a6:	b2db      	uxtb	r3, r3
	if (error_code) {
    57a8:	0698      	lsls	r0, r3, #26
    57aa:	d01d      	beq.n	57e8 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    57ac:	0798      	lsls	r0, r3, #30
    57ae:	d503      	bpl.n	57b8 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    57b0:	2302      	movs	r3, #2
    57b2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    57b4:	3318      	adds	r3, #24
    57b6:	e7e7      	b.n	5788 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    57b8:	0758      	lsls	r0, r3, #29
    57ba:	d503      	bpl.n	57c4 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    57bc:	2304      	movs	r3, #4
    57be:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    57c0:	331a      	adds	r3, #26
    57c2:	e7e1      	b.n	5788 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    57c4:	07d8      	lsls	r0, r3, #31
    57c6:	d503      	bpl.n	57d0 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    57c8:	2301      	movs	r3, #1
    57ca:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    57cc:	3312      	adds	r3, #18
    57ce:	e7db      	b.n	5788 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    57d0:	06d8      	lsls	r0, r3, #27
    57d2:	d503      	bpl.n	57dc <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    57d4:	2310      	movs	r3, #16
    57d6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    57d8:	3332      	adds	r3, #50	; 0x32
    57da:	e7d5      	b.n	5788 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    57dc:	069b      	lsls	r3, r3, #26
    57de:	d503      	bpl.n	57e8 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    57e0:	2320      	movs	r3, #32
    57e2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    57e4:	3321      	adds	r3, #33	; 0x21
    57e6:	e7cf      	b.n	5788 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    57e8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    57ea:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    57ec:	2300      	movs	r3, #0
    57ee:	e7cb      	b.n	5788 <usart_read_wait+0x8>

000057f0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    57f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    57f2:	0080      	lsls	r0, r0, #2
    57f4:	4b62      	ldr	r3, [pc, #392]	; (5980 <_usart_interrupt_handler+0x190>)
    57f6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    57f8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    57fa:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    57fc:	2b00      	cmp	r3, #0
    57fe:	d1fc      	bne.n	57fa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    5800:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    5802:	7da6      	ldrb	r6, [r4, #22]
    5804:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    5806:	2330      	movs	r3, #48	; 0x30
    5808:	5ceb      	ldrb	r3, [r5, r3]
    580a:	2231      	movs	r2, #49	; 0x31
    580c:	5caf      	ldrb	r7, [r5, r2]
    580e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5810:	07f3      	lsls	r3, r6, #31
    5812:	d522      	bpl.n	585a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    5814:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    5816:	b29b      	uxth	r3, r3
    5818:	2b00      	cmp	r3, #0
    581a:	d01c      	beq.n	5856 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    581c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    581e:	7813      	ldrb	r3, [r2, #0]
    5820:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5822:	1c51      	adds	r1, r2, #1
    5824:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5826:	7969      	ldrb	r1, [r5, #5]
    5828:	2901      	cmp	r1, #1
    582a:	d00e      	beq.n	584a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    582c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    582e:	05db      	lsls	r3, r3, #23
    5830:	0ddb      	lsrs	r3, r3, #23
    5832:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    5834:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    5836:	3b01      	subs	r3, #1
    5838:	b29b      	uxth	r3, r3
    583a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    583c:	2b00      	cmp	r3, #0
    583e:	d10c      	bne.n	585a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5840:	3301      	adds	r3, #1
    5842:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    5844:	3301      	adds	r3, #1
    5846:	75a3      	strb	r3, [r4, #22]
    5848:	e007      	b.n	585a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    584a:	7851      	ldrb	r1, [r2, #1]
    584c:	0209      	lsls	r1, r1, #8
    584e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    5850:	3202      	adds	r2, #2
    5852:	62aa      	str	r2, [r5, #40]	; 0x28
    5854:	e7eb      	b.n	582e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    5856:	2301      	movs	r3, #1
    5858:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    585a:	07b3      	lsls	r3, r6, #30
    585c:	d506      	bpl.n	586c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    585e:	2302      	movs	r3, #2
    5860:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    5862:	2200      	movs	r2, #0
    5864:	3331      	adds	r3, #49	; 0x31
    5866:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5868:	07fb      	lsls	r3, r7, #31
    586a:	d41a      	bmi.n	58a2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    586c:	0773      	lsls	r3, r6, #29
    586e:	d565      	bpl.n	593c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    5870:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5872:	b29b      	uxth	r3, r3
    5874:	2b00      	cmp	r3, #0
    5876:	d05f      	beq.n	5938 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5878:	8b63      	ldrh	r3, [r4, #26]
    587a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    587c:	071a      	lsls	r2, r3, #28
    587e:	d414      	bmi.n	58aa <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5880:	223f      	movs	r2, #63	; 0x3f
    5882:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5884:	2b00      	cmp	r3, #0
    5886:	d034      	beq.n	58f2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5888:	079a      	lsls	r2, r3, #30
    588a:	d511      	bpl.n	58b0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    588c:	221a      	movs	r2, #26
    588e:	2332      	movs	r3, #50	; 0x32
    5890:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5892:	3b30      	subs	r3, #48	; 0x30
    5894:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    5896:	077b      	lsls	r3, r7, #29
    5898:	d550      	bpl.n	593c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    589a:	0028      	movs	r0, r5
    589c:	696b      	ldr	r3, [r5, #20]
    589e:	4798      	blx	r3
    58a0:	e04c      	b.n	593c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    58a2:	0028      	movs	r0, r5
    58a4:	68eb      	ldr	r3, [r5, #12]
    58a6:	4798      	blx	r3
    58a8:	e7e0      	b.n	586c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    58aa:	2237      	movs	r2, #55	; 0x37
    58ac:	4013      	ands	r3, r2
    58ae:	e7e9      	b.n	5884 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    58b0:	075a      	lsls	r2, r3, #29
    58b2:	d505      	bpl.n	58c0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    58b4:	221e      	movs	r2, #30
    58b6:	2332      	movs	r3, #50	; 0x32
    58b8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    58ba:	3b2e      	subs	r3, #46	; 0x2e
    58bc:	8363      	strh	r3, [r4, #26]
    58be:	e7ea      	b.n	5896 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    58c0:	07da      	lsls	r2, r3, #31
    58c2:	d505      	bpl.n	58d0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    58c4:	2213      	movs	r2, #19
    58c6:	2332      	movs	r3, #50	; 0x32
    58c8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    58ca:	3b31      	subs	r3, #49	; 0x31
    58cc:	8363      	strh	r3, [r4, #26]
    58ce:	e7e2      	b.n	5896 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    58d0:	06da      	lsls	r2, r3, #27
    58d2:	d505      	bpl.n	58e0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    58d4:	2242      	movs	r2, #66	; 0x42
    58d6:	2332      	movs	r3, #50	; 0x32
    58d8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    58da:	3b22      	subs	r3, #34	; 0x22
    58dc:	8363      	strh	r3, [r4, #26]
    58de:	e7da      	b.n	5896 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    58e0:	2220      	movs	r2, #32
    58e2:	421a      	tst	r2, r3
    58e4:	d0d7      	beq.n	5896 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    58e6:	3221      	adds	r2, #33	; 0x21
    58e8:	2332      	movs	r3, #50	; 0x32
    58ea:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    58ec:	3b12      	subs	r3, #18
    58ee:	8363      	strh	r3, [r4, #26]
    58f0:	e7d1      	b.n	5896 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    58f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    58f4:	05db      	lsls	r3, r3, #23
    58f6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    58f8:	b2da      	uxtb	r2, r3
    58fa:	6a69      	ldr	r1, [r5, #36]	; 0x24
    58fc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    58fe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5900:	1c51      	adds	r1, r2, #1
    5902:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5904:	7969      	ldrb	r1, [r5, #5]
    5906:	2901      	cmp	r1, #1
    5908:	d010      	beq.n	592c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    590a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    590c:	3b01      	subs	r3, #1
    590e:	b29b      	uxth	r3, r3
    5910:	85ab      	strh	r3, [r5, #44]	; 0x2c
    5912:	2b00      	cmp	r3, #0
    5914:	d112      	bne.n	593c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5916:	3304      	adds	r3, #4
    5918:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    591a:	2200      	movs	r2, #0
    591c:	332e      	adds	r3, #46	; 0x2e
    591e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    5920:	07bb      	lsls	r3, r7, #30
    5922:	d50b      	bpl.n	593c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5924:	0028      	movs	r0, r5
    5926:	692b      	ldr	r3, [r5, #16]
    5928:	4798      	blx	r3
    592a:	e007      	b.n	593c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    592c:	0a1b      	lsrs	r3, r3, #8
    592e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    5930:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5932:	3301      	adds	r3, #1
    5934:	626b      	str	r3, [r5, #36]	; 0x24
    5936:	e7e8      	b.n	590a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    5938:	2304      	movs	r3, #4
    593a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    593c:	06f3      	lsls	r3, r6, #27
    593e:	d504      	bpl.n	594a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    5940:	2310      	movs	r3, #16
    5942:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5944:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    5946:	06fb      	lsls	r3, r7, #27
    5948:	d40e      	bmi.n	5968 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    594a:	06b3      	lsls	r3, r6, #26
    594c:	d504      	bpl.n	5958 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    594e:	2320      	movs	r3, #32
    5950:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    5952:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    5954:	073b      	lsls	r3, r7, #28
    5956:	d40b      	bmi.n	5970 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    5958:	0733      	lsls	r3, r6, #28
    595a:	d504      	bpl.n	5966 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    595c:	2308      	movs	r3, #8
    595e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5960:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5962:	06bb      	lsls	r3, r7, #26
    5964:	d408      	bmi.n	5978 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    5966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5968:	0028      	movs	r0, r5
    596a:	69eb      	ldr	r3, [r5, #28]
    596c:	4798      	blx	r3
    596e:	e7ec      	b.n	594a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5970:	0028      	movs	r0, r5
    5972:	69ab      	ldr	r3, [r5, #24]
    5974:	4798      	blx	r3
    5976:	e7ef      	b.n	5958 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5978:	6a2b      	ldr	r3, [r5, #32]
    597a:	0028      	movs	r0, r5
    597c:	4798      	blx	r3
}
    597e:	e7f2      	b.n	5966 <_usart_interrupt_handler+0x176>
    5980:	20001050 	.word	0x20001050

00005984 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5984:	b510      	push	{r4, lr}
	switch (clock_source) {
    5986:	2808      	cmp	r0, #8
    5988:	d803      	bhi.n	5992 <system_clock_source_get_hz+0xe>
    598a:	0080      	lsls	r0, r0, #2
    598c:	4b1c      	ldr	r3, [pc, #112]	; (5a00 <system_clock_source_get_hz+0x7c>)
    598e:	581b      	ldr	r3, [r3, r0]
    5990:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    5992:	2000      	movs	r0, #0
    5994:	e032      	b.n	59fc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    5996:	4b1b      	ldr	r3, [pc, #108]	; (5a04 <system_clock_source_get_hz+0x80>)
    5998:	6918      	ldr	r0, [r3, #16]
    599a:	e02f      	b.n	59fc <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    599c:	4b1a      	ldr	r3, [pc, #104]	; (5a08 <system_clock_source_get_hz+0x84>)
    599e:	6a1b      	ldr	r3, [r3, #32]
    59a0:	059b      	lsls	r3, r3, #22
    59a2:	0f9b      	lsrs	r3, r3, #30
    59a4:	4819      	ldr	r0, [pc, #100]	; (5a0c <system_clock_source_get_hz+0x88>)
    59a6:	40d8      	lsrs	r0, r3
    59a8:	e028      	b.n	59fc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    59aa:	4b16      	ldr	r3, [pc, #88]	; (5a04 <system_clock_source_get_hz+0x80>)
    59ac:	6958      	ldr	r0, [r3, #20]
    59ae:	e025      	b.n	59fc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    59b0:	4b14      	ldr	r3, [pc, #80]	; (5a04 <system_clock_source_get_hz+0x80>)
    59b2:	681b      	ldr	r3, [r3, #0]
			return 0;
    59b4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    59b6:	079b      	lsls	r3, r3, #30
    59b8:	d520      	bpl.n	59fc <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    59ba:	4913      	ldr	r1, [pc, #76]	; (5a08 <system_clock_source_get_hz+0x84>)
    59bc:	2210      	movs	r2, #16
    59be:	68cb      	ldr	r3, [r1, #12]
    59c0:	421a      	tst	r2, r3
    59c2:	d0fc      	beq.n	59be <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    59c4:	4b0f      	ldr	r3, [pc, #60]	; (5a04 <system_clock_source_get_hz+0x80>)
    59c6:	681a      	ldr	r2, [r3, #0]
    59c8:	2324      	movs	r3, #36	; 0x24
    59ca:	4013      	ands	r3, r2
    59cc:	2b04      	cmp	r3, #4
    59ce:	d001      	beq.n	59d4 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    59d0:	480f      	ldr	r0, [pc, #60]	; (5a10 <system_clock_source_get_hz+0x8c>)
    59d2:	e013      	b.n	59fc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    59d4:	2000      	movs	r0, #0
    59d6:	4b0f      	ldr	r3, [pc, #60]	; (5a14 <system_clock_source_get_hz+0x90>)
    59d8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    59da:	4b0a      	ldr	r3, [pc, #40]	; (5a04 <system_clock_source_get_hz+0x80>)
    59dc:	689b      	ldr	r3, [r3, #8]
    59de:	041b      	lsls	r3, r3, #16
    59e0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    59e2:	4358      	muls	r0, r3
    59e4:	e00a      	b.n	59fc <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    59e6:	2350      	movs	r3, #80	; 0x50
    59e8:	4a07      	ldr	r2, [pc, #28]	; (5a08 <system_clock_source_get_hz+0x84>)
    59ea:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    59ec:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    59ee:	075b      	lsls	r3, r3, #29
    59f0:	d504      	bpl.n	59fc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    59f2:	4b04      	ldr	r3, [pc, #16]	; (5a04 <system_clock_source_get_hz+0x80>)
    59f4:	68d8      	ldr	r0, [r3, #12]
    59f6:	e001      	b.n	59fc <system_clock_source_get_hz+0x78>
		return 32768UL;
    59f8:	2080      	movs	r0, #128	; 0x80
    59fa:	0200      	lsls	r0, r0, #8
	}
}
    59fc:	bd10      	pop	{r4, pc}
    59fe:	46c0      	nop			; (mov r8, r8)
    5a00:	0000df18 	.word	0x0000df18
    5a04:	200003e0 	.word	0x200003e0
    5a08:	40000800 	.word	0x40000800
    5a0c:	007a1200 	.word	0x007a1200
    5a10:	02dc6c00 	.word	0x02dc6c00
    5a14:	00005fe9 	.word	0x00005fe9

00005a18 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5a18:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5a1a:	490c      	ldr	r1, [pc, #48]	; (5a4c <system_clock_source_osc8m_set_config+0x34>)
    5a1c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5a1e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5a20:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    5a22:	7840      	ldrb	r0, [r0, #1]
    5a24:	2201      	movs	r2, #1
    5a26:	4010      	ands	r0, r2
    5a28:	0180      	lsls	r0, r0, #6
    5a2a:	2640      	movs	r6, #64	; 0x40
    5a2c:	43b3      	bics	r3, r6
    5a2e:	4303      	orrs	r3, r0
    5a30:	402a      	ands	r2, r5
    5a32:	01d2      	lsls	r2, r2, #7
    5a34:	2080      	movs	r0, #128	; 0x80
    5a36:	4383      	bics	r3, r0
    5a38:	4313      	orrs	r3, r2
    5a3a:	2203      	movs	r2, #3
    5a3c:	4022      	ands	r2, r4
    5a3e:	0212      	lsls	r2, r2, #8
    5a40:	4803      	ldr	r0, [pc, #12]	; (5a50 <system_clock_source_osc8m_set_config+0x38>)
    5a42:	4003      	ands	r3, r0
    5a44:	4313      	orrs	r3, r2
    5a46:	620b      	str	r3, [r1, #32]
}
    5a48:	bd70      	pop	{r4, r5, r6, pc}
    5a4a:	46c0      	nop			; (mov r8, r8)
    5a4c:	40000800 	.word	0x40000800
    5a50:	fffffcff 	.word	0xfffffcff

00005a54 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5a54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a56:	46de      	mov	lr, fp
    5a58:	4657      	mov	r7, sl
    5a5a:	464e      	mov	r6, r9
    5a5c:	4645      	mov	r5, r8
    5a5e:	b5e0      	push	{r5, r6, r7, lr}
    5a60:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5a62:	4b26      	ldr	r3, [pc, #152]	; (5afc <system_clock_source_xosc32k_set_config+0xa8>)
    5a64:	469b      	mov	fp, r3
    5a66:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    5a68:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5a6a:	7800      	ldrb	r0, [r0, #0]
    5a6c:	4242      	negs	r2, r0
    5a6e:	4142      	adcs	r2, r0
    5a70:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5a72:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    5a74:	78ca      	ldrb	r2, [r1, #3]
    5a76:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    5a78:	790a      	ldrb	r2, [r1, #4]
    5a7a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    5a7c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5a7e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    5a80:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5a82:	688a      	ldr	r2, [r1, #8]
    5a84:	491e      	ldr	r1, [pc, #120]	; (5b00 <system_clock_source_xosc32k_set_config+0xac>)
    5a86:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    5a88:	2101      	movs	r1, #1
    5a8a:	464a      	mov	r2, r9
    5a8c:	0092      	lsls	r2, r2, #2
    5a8e:	4691      	mov	r9, r2
    5a90:	2204      	movs	r2, #4
    5a92:	4393      	bics	r3, r2
    5a94:	464a      	mov	r2, r9
    5a96:	4313      	orrs	r3, r2
    5a98:	4642      	mov	r2, r8
    5a9a:	400a      	ands	r2, r1
    5a9c:	00d2      	lsls	r2, r2, #3
    5a9e:	4690      	mov	r8, r2
    5aa0:	2208      	movs	r2, #8
    5aa2:	4393      	bics	r3, r2
    5aa4:	4642      	mov	r2, r8
    5aa6:	4313      	orrs	r3, r2
    5aa8:	4662      	mov	r2, ip
    5aaa:	400a      	ands	r2, r1
    5aac:	0112      	lsls	r2, r2, #4
    5aae:	4694      	mov	ip, r2
    5ab0:	2210      	movs	r2, #16
    5ab2:	4393      	bics	r3, r2
    5ab4:	4662      	mov	r2, ip
    5ab6:	4313      	orrs	r3, r2
    5ab8:	4008      	ands	r0, r1
    5aba:	0140      	lsls	r0, r0, #5
    5abc:	2220      	movs	r2, #32
    5abe:	4393      	bics	r3, r2
    5ac0:	4303      	orrs	r3, r0
    5ac2:	400f      	ands	r7, r1
    5ac4:	01bf      	lsls	r7, r7, #6
    5ac6:	2040      	movs	r0, #64	; 0x40
    5ac8:	4383      	bics	r3, r0
    5aca:	433b      	orrs	r3, r7
    5acc:	400e      	ands	r6, r1
    5ace:	01f6      	lsls	r6, r6, #7
    5ad0:	3040      	adds	r0, #64	; 0x40
    5ad2:	4383      	bics	r3, r0
    5ad4:	4333      	orrs	r3, r6
    5ad6:	3879      	subs	r0, #121	; 0x79
    5ad8:	4005      	ands	r5, r0
    5ada:	022d      	lsls	r5, r5, #8
    5adc:	4809      	ldr	r0, [pc, #36]	; (5b04 <system_clock_source_xosc32k_set_config+0xb0>)
    5ade:	4003      	ands	r3, r0
    5ae0:	432b      	orrs	r3, r5
    5ae2:	4021      	ands	r1, r4
    5ae4:	0309      	lsls	r1, r1, #12
    5ae6:	4808      	ldr	r0, [pc, #32]	; (5b08 <system_clock_source_xosc32k_set_config+0xb4>)
    5ae8:	4003      	ands	r3, r0
    5aea:	430b      	orrs	r3, r1
    5aec:	465a      	mov	r2, fp
    5aee:	8293      	strh	r3, [r2, #20]
}
    5af0:	bc3c      	pop	{r2, r3, r4, r5}
    5af2:	4690      	mov	r8, r2
    5af4:	4699      	mov	r9, r3
    5af6:	46a2      	mov	sl, r4
    5af8:	46ab      	mov	fp, r5
    5afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5afc:	40000800 	.word	0x40000800
    5b00:	200003e0 	.word	0x200003e0
    5b04:	fffff8ff 	.word	0xfffff8ff
    5b08:	ffffefff 	.word	0xffffefff

00005b0c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5b0c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5b0e:	7a03      	ldrb	r3, [r0, #8]
    5b10:	069b      	lsls	r3, r3, #26
    5b12:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5b14:	8942      	ldrh	r2, [r0, #10]
    5b16:	0592      	lsls	r2, r2, #22
    5b18:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5b1a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    5b1c:	4918      	ldr	r1, [pc, #96]	; (5b80 <system_clock_source_dfll_set_config+0x74>)
    5b1e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5b20:	7983      	ldrb	r3, [r0, #6]
    5b22:	79c2      	ldrb	r2, [r0, #7]
    5b24:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5b26:	8842      	ldrh	r2, [r0, #2]
    5b28:	8884      	ldrh	r4, [r0, #4]
    5b2a:	4322      	orrs	r2, r4
    5b2c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5b2e:	7842      	ldrb	r2, [r0, #1]
    5b30:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    5b32:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    5b34:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5b36:	7803      	ldrb	r3, [r0, #0]
    5b38:	2b04      	cmp	r3, #4
    5b3a:	d011      	beq.n	5b60 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5b3c:	2b20      	cmp	r3, #32
    5b3e:	d10e      	bne.n	5b5e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5b40:	7b03      	ldrb	r3, [r0, #12]
    5b42:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5b44:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5b46:	4313      	orrs	r3, r2
    5b48:	89c2      	ldrh	r2, [r0, #14]
    5b4a:	0412      	lsls	r2, r2, #16
    5b4c:	490d      	ldr	r1, [pc, #52]	; (5b84 <system_clock_source_dfll_set_config+0x78>)
    5b4e:	400a      	ands	r2, r1
    5b50:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5b52:	4a0b      	ldr	r2, [pc, #44]	; (5b80 <system_clock_source_dfll_set_config+0x74>)
    5b54:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5b56:	6811      	ldr	r1, [r2, #0]
    5b58:	4b0b      	ldr	r3, [pc, #44]	; (5b88 <system_clock_source_dfll_set_config+0x7c>)
    5b5a:	430b      	orrs	r3, r1
    5b5c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5b5e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5b60:	7b03      	ldrb	r3, [r0, #12]
    5b62:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5b64:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5b66:	4313      	orrs	r3, r2
    5b68:	89c2      	ldrh	r2, [r0, #14]
    5b6a:	0412      	lsls	r2, r2, #16
    5b6c:	4905      	ldr	r1, [pc, #20]	; (5b84 <system_clock_source_dfll_set_config+0x78>)
    5b6e:	400a      	ands	r2, r1
    5b70:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    5b72:	4a03      	ldr	r2, [pc, #12]	; (5b80 <system_clock_source_dfll_set_config+0x74>)
    5b74:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    5b76:	6813      	ldr	r3, [r2, #0]
    5b78:	2104      	movs	r1, #4
    5b7a:	430b      	orrs	r3, r1
    5b7c:	6013      	str	r3, [r2, #0]
    5b7e:	e7ee      	b.n	5b5e <system_clock_source_dfll_set_config+0x52>
    5b80:	200003e0 	.word	0x200003e0
    5b84:	03ff0000 	.word	0x03ff0000
    5b88:	00000424 	.word	0x00000424

00005b8c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5b8c:	2808      	cmp	r0, #8
    5b8e:	d803      	bhi.n	5b98 <system_clock_source_enable+0xc>
    5b90:	0080      	lsls	r0, r0, #2
    5b92:	4b25      	ldr	r3, [pc, #148]	; (5c28 <system_clock_source_enable+0x9c>)
    5b94:	581b      	ldr	r3, [r3, r0]
    5b96:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5b98:	2017      	movs	r0, #23
    5b9a:	e044      	b.n	5c26 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5b9c:	4a23      	ldr	r2, [pc, #140]	; (5c2c <system_clock_source_enable+0xa0>)
    5b9e:	6a13      	ldr	r3, [r2, #32]
    5ba0:	2102      	movs	r1, #2
    5ba2:	430b      	orrs	r3, r1
    5ba4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    5ba6:	2000      	movs	r0, #0
    5ba8:	e03d      	b.n	5c26 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5baa:	4a20      	ldr	r2, [pc, #128]	; (5c2c <system_clock_source_enable+0xa0>)
    5bac:	6993      	ldr	r3, [r2, #24]
    5bae:	2102      	movs	r1, #2
    5bb0:	430b      	orrs	r3, r1
    5bb2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5bb4:	2000      	movs	r0, #0
		break;
    5bb6:	e036      	b.n	5c26 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5bb8:	4a1c      	ldr	r2, [pc, #112]	; (5c2c <system_clock_source_enable+0xa0>)
    5bba:	8a13      	ldrh	r3, [r2, #16]
    5bbc:	2102      	movs	r1, #2
    5bbe:	430b      	orrs	r3, r1
    5bc0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5bc2:	2000      	movs	r0, #0
		break;
    5bc4:	e02f      	b.n	5c26 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5bc6:	4a19      	ldr	r2, [pc, #100]	; (5c2c <system_clock_source_enable+0xa0>)
    5bc8:	8a93      	ldrh	r3, [r2, #20]
    5bca:	2102      	movs	r1, #2
    5bcc:	430b      	orrs	r3, r1
    5bce:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    5bd0:	2000      	movs	r0, #0
		break;
    5bd2:	e028      	b.n	5c26 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5bd4:	4916      	ldr	r1, [pc, #88]	; (5c30 <system_clock_source_enable+0xa4>)
    5bd6:	680b      	ldr	r3, [r1, #0]
    5bd8:	2202      	movs	r2, #2
    5bda:	4313      	orrs	r3, r2
    5bdc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5bde:	4b13      	ldr	r3, [pc, #76]	; (5c2c <system_clock_source_enable+0xa0>)
    5be0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5be2:	0019      	movs	r1, r3
    5be4:	320e      	adds	r2, #14
    5be6:	68cb      	ldr	r3, [r1, #12]
    5be8:	421a      	tst	r2, r3
    5bea:	d0fc      	beq.n	5be6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5bec:	4a10      	ldr	r2, [pc, #64]	; (5c30 <system_clock_source_enable+0xa4>)
    5bee:	6891      	ldr	r1, [r2, #8]
    5bf0:	4b0e      	ldr	r3, [pc, #56]	; (5c2c <system_clock_source_enable+0xa0>)
    5bf2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5bf4:	6852      	ldr	r2, [r2, #4]
    5bf6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    5bf8:	2200      	movs	r2, #0
    5bfa:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5bfc:	0019      	movs	r1, r3
    5bfe:	3210      	adds	r2, #16
    5c00:	68cb      	ldr	r3, [r1, #12]
    5c02:	421a      	tst	r2, r3
    5c04:	d0fc      	beq.n	5c00 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5c06:	4b0a      	ldr	r3, [pc, #40]	; (5c30 <system_clock_source_enable+0xa4>)
    5c08:	681b      	ldr	r3, [r3, #0]
    5c0a:	b29b      	uxth	r3, r3
    5c0c:	4a07      	ldr	r2, [pc, #28]	; (5c2c <system_clock_source_enable+0xa0>)
    5c0e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    5c10:	2000      	movs	r0, #0
    5c12:	e008      	b.n	5c26 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5c14:	4905      	ldr	r1, [pc, #20]	; (5c2c <system_clock_source_enable+0xa0>)
    5c16:	2244      	movs	r2, #68	; 0x44
    5c18:	5c8b      	ldrb	r3, [r1, r2]
    5c1a:	2002      	movs	r0, #2
    5c1c:	4303      	orrs	r3, r0
    5c1e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5c20:	2000      	movs	r0, #0
		break;
    5c22:	e000      	b.n	5c26 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    5c24:	2000      	movs	r0, #0
}
    5c26:	4770      	bx	lr
    5c28:	0000df3c 	.word	0x0000df3c
    5c2c:	40000800 	.word	0x40000800
    5c30:	200003e0 	.word	0x200003e0

00005c34 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c36:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5c38:	22c2      	movs	r2, #194	; 0xc2
    5c3a:	00d2      	lsls	r2, r2, #3
    5c3c:	4b47      	ldr	r3, [pc, #284]	; (5d5c <system_clock_init+0x128>)
    5c3e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5c40:	4a47      	ldr	r2, [pc, #284]	; (5d60 <system_clock_init+0x12c>)
    5c42:	6853      	ldr	r3, [r2, #4]
    5c44:	211e      	movs	r1, #30
    5c46:	438b      	bics	r3, r1
    5c48:	391a      	subs	r1, #26
    5c4a:	430b      	orrs	r3, r1
    5c4c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5c4e:	2202      	movs	r2, #2
    5c50:	ab01      	add	r3, sp, #4
    5c52:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5c54:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5c56:	4d43      	ldr	r5, [pc, #268]	; (5d64 <system_clock_init+0x130>)
    5c58:	b2e0      	uxtb	r0, r4
    5c5a:	a901      	add	r1, sp, #4
    5c5c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5c5e:	3401      	adds	r4, #1
    5c60:	2c25      	cmp	r4, #37	; 0x25
    5c62:	d1f9      	bne.n	5c58 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5c64:	a80a      	add	r0, sp, #40	; 0x28
    5c66:	2300      	movs	r3, #0
    5c68:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    5c6a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    5c6c:	2280      	movs	r2, #128	; 0x80
    5c6e:	0212      	lsls	r2, r2, #8
    5c70:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    5c72:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    5c74:	2201      	movs	r2, #1
    5c76:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    5c78:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    5c7a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5c7c:	3202      	adds	r2, #2
    5c7e:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    5c80:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    5c82:	4b39      	ldr	r3, [pc, #228]	; (5d68 <system_clock_init+0x134>)
    5c84:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    5c86:	2005      	movs	r0, #5
    5c88:	4b38      	ldr	r3, [pc, #224]	; (5d6c <system_clock_init+0x138>)
    5c8a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5c8c:	4933      	ldr	r1, [pc, #204]	; (5d5c <system_clock_init+0x128>)
    5c8e:	2202      	movs	r2, #2
    5c90:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    5c92:	421a      	tst	r2, r3
    5c94:	d0fc      	beq.n	5c90 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    5c96:	4a31      	ldr	r2, [pc, #196]	; (5d5c <system_clock_init+0x128>)
    5c98:	8a93      	ldrh	r3, [r2, #20]
    5c9a:	2180      	movs	r1, #128	; 0x80
    5c9c:	430b      	orrs	r3, r1
    5c9e:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5ca0:	ab05      	add	r3, sp, #20
    5ca2:	2100      	movs	r1, #0
    5ca4:	2200      	movs	r2, #0
    5ca6:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5ca8:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5caa:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5cac:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5cae:	313f      	adds	r1, #63	; 0x3f
    5cb0:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5cb2:	393b      	subs	r1, #59	; 0x3b
    5cb4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5cb6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5cb8:	4b2d      	ldr	r3, [pc, #180]	; (5d70 <system_clock_init+0x13c>)
    5cba:	681b      	ldr	r3, [r3, #0]
    5cbc:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5cbe:	2b3f      	cmp	r3, #63	; 0x3f
    5cc0:	d04a      	beq.n	5d58 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    5cc2:	a805      	add	r0, sp, #20
    5cc4:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5cc6:	4b2b      	ldr	r3, [pc, #172]	; (5d74 <system_clock_init+0x140>)
    5cc8:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5cca:	2307      	movs	r3, #7
    5ccc:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5cce:	3338      	adds	r3, #56	; 0x38
    5cd0:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5cd2:	4b29      	ldr	r3, [pc, #164]	; (5d78 <system_clock_init+0x144>)
    5cd4:	4798      	blx	r3
	config->run_in_standby  = false;
    5cd6:	a804      	add	r0, sp, #16
    5cd8:	2500      	movs	r5, #0
    5cda:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    5cdc:	2601      	movs	r6, #1
    5cde:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5ce0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5ce2:	4b26      	ldr	r3, [pc, #152]	; (5d7c <system_clock_init+0x148>)
    5ce4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5ce6:	2006      	movs	r0, #6
    5ce8:	4f20      	ldr	r7, [pc, #128]	; (5d6c <system_clock_init+0x138>)
    5cea:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5cec:	4b24      	ldr	r3, [pc, #144]	; (5d80 <system_clock_init+0x14c>)
    5cee:	4798      	blx	r3
	config->division_factor    = 1;
    5cf0:	ac01      	add	r4, sp, #4
    5cf2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5cf4:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    5cf6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5cf8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5cfa:	2305      	movs	r3, #5
    5cfc:	7023      	strb	r3, [r4, #0]
    5cfe:	0021      	movs	r1, r4
    5d00:	2001      	movs	r0, #1
    5d02:	4b20      	ldr	r3, [pc, #128]	; (5d84 <system_clock_init+0x150>)
    5d04:	4798      	blx	r3
    5d06:	2001      	movs	r0, #1
    5d08:	4b1f      	ldr	r3, [pc, #124]	; (5d88 <system_clock_init+0x154>)
    5d0a:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5d0c:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5d0e:	0021      	movs	r1, r4
    5d10:	2000      	movs	r0, #0
    5d12:	4b14      	ldr	r3, [pc, #80]	; (5d64 <system_clock_init+0x130>)
    5d14:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5d16:	2000      	movs	r0, #0
    5d18:	4b1c      	ldr	r3, [pc, #112]	; (5d8c <system_clock_init+0x158>)
    5d1a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5d1c:	2007      	movs	r0, #7
    5d1e:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5d20:	490e      	ldr	r1, [pc, #56]	; (5d5c <system_clock_init+0x128>)
    5d22:	22d0      	movs	r2, #208	; 0xd0
    5d24:	68cb      	ldr	r3, [r1, #12]
    5d26:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5d28:	2bd0      	cmp	r3, #208	; 0xd0
    5d2a:	d1fb      	bne.n	5d24 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    5d2c:	4a18      	ldr	r2, [pc, #96]	; (5d90 <system_clock_init+0x15c>)
    5d2e:	2300      	movs	r3, #0
    5d30:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    5d32:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    5d34:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    5d36:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    5d38:	a901      	add	r1, sp, #4
    5d3a:	2201      	movs	r2, #1
    5d3c:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5d3e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    5d40:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    5d42:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5d44:	3307      	adds	r3, #7
    5d46:	700b      	strb	r3, [r1, #0]
    5d48:	2000      	movs	r0, #0
    5d4a:	4b0e      	ldr	r3, [pc, #56]	; (5d84 <system_clock_init+0x150>)
    5d4c:	4798      	blx	r3
    5d4e:	2000      	movs	r0, #0
    5d50:	4b0d      	ldr	r3, [pc, #52]	; (5d88 <system_clock_init+0x154>)
    5d52:	4798      	blx	r3
#endif
}
    5d54:	b00f      	add	sp, #60	; 0x3c
    5d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    5d58:	3b20      	subs	r3, #32
    5d5a:	e7b2      	b.n	5cc2 <system_clock_init+0x8e>
    5d5c:	40000800 	.word	0x40000800
    5d60:	41004000 	.word	0x41004000
    5d64:	00005fcd 	.word	0x00005fcd
    5d68:	00005a55 	.word	0x00005a55
    5d6c:	00005b8d 	.word	0x00005b8d
    5d70:	00806024 	.word	0x00806024
    5d74:	000005b9 	.word	0x000005b9
    5d78:	00005b0d 	.word	0x00005b0d
    5d7c:	00005a19 	.word	0x00005a19
    5d80:	00005d95 	.word	0x00005d95
    5d84:	00005db9 	.word	0x00005db9
    5d88:	00005e71 	.word	0x00005e71
    5d8c:	00005f41 	.word	0x00005f41
    5d90:	40000400 	.word	0x40000400

00005d94 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    5d94:	4a06      	ldr	r2, [pc, #24]	; (5db0 <system_gclk_init+0x1c>)
    5d96:	6993      	ldr	r3, [r2, #24]
    5d98:	2108      	movs	r1, #8
    5d9a:	430b      	orrs	r3, r1
    5d9c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5d9e:	2201      	movs	r2, #1
    5da0:	4b04      	ldr	r3, [pc, #16]	; (5db4 <system_gclk_init+0x20>)
    5da2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5da4:	0019      	movs	r1, r3
    5da6:	780b      	ldrb	r3, [r1, #0]
    5da8:	4213      	tst	r3, r2
    5daa:	d1fc      	bne.n	5da6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5dac:	4770      	bx	lr
    5dae:	46c0      	nop			; (mov r8, r8)
    5db0:	40000400 	.word	0x40000400
    5db4:	40000c00 	.word	0x40000c00

00005db8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5db8:	b570      	push	{r4, r5, r6, lr}
    5dba:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5dbc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5dbe:	780d      	ldrb	r5, [r1, #0]
    5dc0:	022d      	lsls	r5, r5, #8
    5dc2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5dc4:	784b      	ldrb	r3, [r1, #1]
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d002      	beq.n	5dd0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5dca:	2380      	movs	r3, #128	; 0x80
    5dcc:	02db      	lsls	r3, r3, #11
    5dce:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5dd0:	7a4b      	ldrb	r3, [r1, #9]
    5dd2:	2b00      	cmp	r3, #0
    5dd4:	d002      	beq.n	5ddc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5dd6:	2380      	movs	r3, #128	; 0x80
    5dd8:	031b      	lsls	r3, r3, #12
    5dda:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5ddc:	6848      	ldr	r0, [r1, #4]
    5dde:	2801      	cmp	r0, #1
    5de0:	d910      	bls.n	5e04 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5de2:	1e43      	subs	r3, r0, #1
    5de4:	4218      	tst	r0, r3
    5de6:	d134      	bne.n	5e52 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5de8:	2802      	cmp	r0, #2
    5dea:	d930      	bls.n	5e4e <system_gclk_gen_set_config+0x96>
    5dec:	2302      	movs	r3, #2
    5dee:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5df0:	3201      	adds	r2, #1
						mask <<= 1) {
    5df2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    5df4:	4298      	cmp	r0, r3
    5df6:	d8fb      	bhi.n	5df0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5df8:	0212      	lsls	r2, r2, #8
    5dfa:	4332      	orrs	r2, r6
    5dfc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5dfe:	2380      	movs	r3, #128	; 0x80
    5e00:	035b      	lsls	r3, r3, #13
    5e02:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5e04:	7a0b      	ldrb	r3, [r1, #8]
    5e06:	2b00      	cmp	r3, #0
    5e08:	d002      	beq.n	5e10 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5e0a:	2380      	movs	r3, #128	; 0x80
    5e0c:	039b      	lsls	r3, r3, #14
    5e0e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e10:	4a13      	ldr	r2, [pc, #76]	; (5e60 <system_gclk_gen_set_config+0xa8>)
    5e12:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    5e14:	b25b      	sxtb	r3, r3
    5e16:	2b00      	cmp	r3, #0
    5e18:	dbfb      	blt.n	5e12 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    5e1a:	4b12      	ldr	r3, [pc, #72]	; (5e64 <system_gclk_gen_set_config+0xac>)
    5e1c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5e1e:	4b12      	ldr	r3, [pc, #72]	; (5e68 <system_gclk_gen_set_config+0xb0>)
    5e20:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e22:	4a0f      	ldr	r2, [pc, #60]	; (5e60 <system_gclk_gen_set_config+0xa8>)
    5e24:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    5e26:	b25b      	sxtb	r3, r3
    5e28:	2b00      	cmp	r3, #0
    5e2a:	dbfb      	blt.n	5e24 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    5e2c:	4b0c      	ldr	r3, [pc, #48]	; (5e60 <system_gclk_gen_set_config+0xa8>)
    5e2e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e30:	001a      	movs	r2, r3
    5e32:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    5e34:	b25b      	sxtb	r3, r3
    5e36:	2b00      	cmp	r3, #0
    5e38:	dbfb      	blt.n	5e32 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5e3a:	4a09      	ldr	r2, [pc, #36]	; (5e60 <system_gclk_gen_set_config+0xa8>)
    5e3c:	6853      	ldr	r3, [r2, #4]
    5e3e:	2180      	movs	r1, #128	; 0x80
    5e40:	0249      	lsls	r1, r1, #9
    5e42:	400b      	ands	r3, r1
    5e44:	431d      	orrs	r5, r3
    5e46:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    5e48:	4b08      	ldr	r3, [pc, #32]	; (5e6c <system_gclk_gen_set_config+0xb4>)
    5e4a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5e4c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    5e4e:	2200      	movs	r2, #0
    5e50:	e7d2      	b.n	5df8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5e52:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    5e54:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5e56:	2380      	movs	r3, #128	; 0x80
    5e58:	029b      	lsls	r3, r3, #10
    5e5a:	431d      	orrs	r5, r3
    5e5c:	e7d2      	b.n	5e04 <system_gclk_gen_set_config+0x4c>
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	40000c00 	.word	0x40000c00
    5e64:	000040f1 	.word	0x000040f1
    5e68:	40000c08 	.word	0x40000c08
    5e6c:	00004131 	.word	0x00004131

00005e70 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5e70:	b510      	push	{r4, lr}
    5e72:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e74:	4a0b      	ldr	r2, [pc, #44]	; (5ea4 <system_gclk_gen_enable+0x34>)
    5e76:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e78:	b25b      	sxtb	r3, r3
    5e7a:	2b00      	cmp	r3, #0
    5e7c:	dbfb      	blt.n	5e76 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    5e7e:	4b0a      	ldr	r3, [pc, #40]	; (5ea8 <system_gclk_gen_enable+0x38>)
    5e80:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5e82:	4b0a      	ldr	r3, [pc, #40]	; (5eac <system_gclk_gen_enable+0x3c>)
    5e84:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5e86:	4a07      	ldr	r2, [pc, #28]	; (5ea4 <system_gclk_gen_enable+0x34>)
    5e88:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5e8a:	b25b      	sxtb	r3, r3
    5e8c:	2b00      	cmp	r3, #0
    5e8e:	dbfb      	blt.n	5e88 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5e90:	4a04      	ldr	r2, [pc, #16]	; (5ea4 <system_gclk_gen_enable+0x34>)
    5e92:	6851      	ldr	r1, [r2, #4]
    5e94:	2380      	movs	r3, #128	; 0x80
    5e96:	025b      	lsls	r3, r3, #9
    5e98:	430b      	orrs	r3, r1
    5e9a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    5e9c:	4b04      	ldr	r3, [pc, #16]	; (5eb0 <system_gclk_gen_enable+0x40>)
    5e9e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5ea0:	bd10      	pop	{r4, pc}
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	40000c00 	.word	0x40000c00
    5ea8:	000040f1 	.word	0x000040f1
    5eac:	40000c04 	.word	0x40000c04
    5eb0:	00004131 	.word	0x00004131

00005eb4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5eb4:	b570      	push	{r4, r5, r6, lr}
    5eb6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5eb8:	4a1a      	ldr	r2, [pc, #104]	; (5f24 <system_gclk_gen_get_hz+0x70>)
    5eba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5ebc:	b25b      	sxtb	r3, r3
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	dbfb      	blt.n	5eba <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    5ec2:	4b19      	ldr	r3, [pc, #100]	; (5f28 <system_gclk_gen_get_hz+0x74>)
    5ec4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5ec6:	4b19      	ldr	r3, [pc, #100]	; (5f2c <system_gclk_gen_get_hz+0x78>)
    5ec8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5eca:	4a16      	ldr	r2, [pc, #88]	; (5f24 <system_gclk_gen_get_hz+0x70>)
    5ecc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5ece:	b25b      	sxtb	r3, r3
    5ed0:	2b00      	cmp	r3, #0
    5ed2:	dbfb      	blt.n	5ecc <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5ed4:	4e13      	ldr	r6, [pc, #76]	; (5f24 <system_gclk_gen_get_hz+0x70>)
    5ed6:	6870      	ldr	r0, [r6, #4]
    5ed8:	04c0      	lsls	r0, r0, #19
    5eda:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5edc:	4b14      	ldr	r3, [pc, #80]	; (5f30 <system_gclk_gen_get_hz+0x7c>)
    5ede:	4798      	blx	r3
    5ee0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5ee2:	4b12      	ldr	r3, [pc, #72]	; (5f2c <system_gclk_gen_get_hz+0x78>)
    5ee4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5ee6:	6876      	ldr	r6, [r6, #4]
    5ee8:	02f6      	lsls	r6, r6, #11
    5eea:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5eec:	4b11      	ldr	r3, [pc, #68]	; (5f34 <system_gclk_gen_get_hz+0x80>)
    5eee:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5ef0:	4a0c      	ldr	r2, [pc, #48]	; (5f24 <system_gclk_gen_get_hz+0x70>)
    5ef2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    5ef4:	b25b      	sxtb	r3, r3
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	dbfb      	blt.n	5ef2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5efa:	4b0a      	ldr	r3, [pc, #40]	; (5f24 <system_gclk_gen_get_hz+0x70>)
    5efc:	689c      	ldr	r4, [r3, #8]
    5efe:	0224      	lsls	r4, r4, #8
    5f00:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    5f02:	4b0d      	ldr	r3, [pc, #52]	; (5f38 <system_gclk_gen_get_hz+0x84>)
    5f04:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5f06:	2e00      	cmp	r6, #0
    5f08:	d107      	bne.n	5f1a <system_gclk_gen_get_hz+0x66>
    5f0a:	2c01      	cmp	r4, #1
    5f0c:	d907      	bls.n	5f1e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5f0e:	0021      	movs	r1, r4
    5f10:	0028      	movs	r0, r5
    5f12:	4b0a      	ldr	r3, [pc, #40]	; (5f3c <system_gclk_gen_get_hz+0x88>)
    5f14:	4798      	blx	r3
    5f16:	0005      	movs	r5, r0
    5f18:	e001      	b.n	5f1e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    5f1a:	3401      	adds	r4, #1
    5f1c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5f1e:	0028      	movs	r0, r5
    5f20:	bd70      	pop	{r4, r5, r6, pc}
    5f22:	46c0      	nop			; (mov r8, r8)
    5f24:	40000c00 	.word	0x40000c00
    5f28:	000040f1 	.word	0x000040f1
    5f2c:	40000c04 	.word	0x40000c04
    5f30:	00005985 	.word	0x00005985
    5f34:	40000c08 	.word	0x40000c08
    5f38:	00004131 	.word	0x00004131
    5f3c:	0000b461 	.word	0x0000b461

00005f40 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5f40:	b510      	push	{r4, lr}
    5f42:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5f44:	4b06      	ldr	r3, [pc, #24]	; (5f60 <system_gclk_chan_enable+0x20>)
    5f46:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5f48:	4b06      	ldr	r3, [pc, #24]	; (5f64 <system_gclk_chan_enable+0x24>)
    5f4a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5f4c:	4a06      	ldr	r2, [pc, #24]	; (5f68 <system_gclk_chan_enable+0x28>)
    5f4e:	8853      	ldrh	r3, [r2, #2]
    5f50:	2180      	movs	r1, #128	; 0x80
    5f52:	01c9      	lsls	r1, r1, #7
    5f54:	430b      	orrs	r3, r1
    5f56:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    5f58:	4b04      	ldr	r3, [pc, #16]	; (5f6c <system_gclk_chan_enable+0x2c>)
    5f5a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5f5c:	bd10      	pop	{r4, pc}
    5f5e:	46c0      	nop			; (mov r8, r8)
    5f60:	000040f1 	.word	0x000040f1
    5f64:	40000c02 	.word	0x40000c02
    5f68:	40000c00 	.word	0x40000c00
    5f6c:	00004131 	.word	0x00004131

00005f70 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5f70:	b510      	push	{r4, lr}
    5f72:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5f74:	4b0f      	ldr	r3, [pc, #60]	; (5fb4 <system_gclk_chan_disable+0x44>)
    5f76:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5f78:	4b0f      	ldr	r3, [pc, #60]	; (5fb8 <system_gclk_chan_disable+0x48>)
    5f7a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    5f7c:	4a0f      	ldr	r2, [pc, #60]	; (5fbc <system_gclk_chan_disable+0x4c>)
    5f7e:	8853      	ldrh	r3, [r2, #2]
    5f80:	051b      	lsls	r3, r3, #20
    5f82:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    5f84:	8853      	ldrh	r3, [r2, #2]
    5f86:	490e      	ldr	r1, [pc, #56]	; (5fc0 <system_gclk_chan_disable+0x50>)
    5f88:	400b      	ands	r3, r1
    5f8a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    5f8c:	8853      	ldrh	r3, [r2, #2]
    5f8e:	490d      	ldr	r1, [pc, #52]	; (5fc4 <system_gclk_chan_disable+0x54>)
    5f90:	400b      	ands	r3, r1
    5f92:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    5f94:	0011      	movs	r1, r2
    5f96:	2280      	movs	r2, #128	; 0x80
    5f98:	01d2      	lsls	r2, r2, #7
    5f9a:	884b      	ldrh	r3, [r1, #2]
    5f9c:	4213      	tst	r3, r2
    5f9e:	d1fc      	bne.n	5f9a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    5fa0:	4906      	ldr	r1, [pc, #24]	; (5fbc <system_gclk_chan_disable+0x4c>)
    5fa2:	884a      	ldrh	r2, [r1, #2]
    5fa4:	0203      	lsls	r3, r0, #8
    5fa6:	4806      	ldr	r0, [pc, #24]	; (5fc0 <system_gclk_chan_disable+0x50>)
    5fa8:	4002      	ands	r2, r0
    5faa:	4313      	orrs	r3, r2
    5fac:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    5fae:	4b06      	ldr	r3, [pc, #24]	; (5fc8 <system_gclk_chan_disable+0x58>)
    5fb0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5fb2:	bd10      	pop	{r4, pc}
    5fb4:	000040f1 	.word	0x000040f1
    5fb8:	40000c02 	.word	0x40000c02
    5fbc:	40000c00 	.word	0x40000c00
    5fc0:	fffff0ff 	.word	0xfffff0ff
    5fc4:	ffffbfff 	.word	0xffffbfff
    5fc8:	00004131 	.word	0x00004131

00005fcc <system_gclk_chan_set_config>:
{
    5fcc:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    5fce:	780c      	ldrb	r4, [r1, #0]
    5fd0:	0224      	lsls	r4, r4, #8
    5fd2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    5fd4:	4b02      	ldr	r3, [pc, #8]	; (5fe0 <system_gclk_chan_set_config+0x14>)
    5fd6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    5fd8:	b2a4      	uxth	r4, r4
    5fda:	4b02      	ldr	r3, [pc, #8]	; (5fe4 <system_gclk_chan_set_config+0x18>)
    5fdc:	805c      	strh	r4, [r3, #2]
}
    5fde:	bd10      	pop	{r4, pc}
    5fe0:	00005f71 	.word	0x00005f71
    5fe4:	40000c00 	.word	0x40000c00

00005fe8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5fe8:	b510      	push	{r4, lr}
    5fea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5fec:	4b06      	ldr	r3, [pc, #24]	; (6008 <system_gclk_chan_get_hz+0x20>)
    5fee:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5ff0:	4b06      	ldr	r3, [pc, #24]	; (600c <system_gclk_chan_get_hz+0x24>)
    5ff2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5ff4:	4b06      	ldr	r3, [pc, #24]	; (6010 <system_gclk_chan_get_hz+0x28>)
    5ff6:	885c      	ldrh	r4, [r3, #2]
    5ff8:	0524      	lsls	r4, r4, #20
    5ffa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    5ffc:	4b05      	ldr	r3, [pc, #20]	; (6014 <system_gclk_chan_get_hz+0x2c>)
    5ffe:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6000:	0020      	movs	r0, r4
    6002:	4b05      	ldr	r3, [pc, #20]	; (6018 <system_gclk_chan_get_hz+0x30>)
    6004:	4798      	blx	r3
}
    6006:	bd10      	pop	{r4, pc}
    6008:	000040f1 	.word	0x000040f1
    600c:	40000c02 	.word	0x40000c02
    6010:	40000c00 	.word	0x40000c00
    6014:	00004131 	.word	0x00004131
    6018:	00005eb5 	.word	0x00005eb5

0000601c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    601c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    601e:	78d3      	ldrb	r3, [r2, #3]
    6020:	2b00      	cmp	r3, #0
    6022:	d135      	bne.n	6090 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6024:	7813      	ldrb	r3, [r2, #0]
    6026:	2b80      	cmp	r3, #128	; 0x80
    6028:	d029      	beq.n	607e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    602a:	061b      	lsls	r3, r3, #24
    602c:	2480      	movs	r4, #128	; 0x80
    602e:	0264      	lsls	r4, r4, #9
    6030:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6032:	7854      	ldrb	r4, [r2, #1]
    6034:	2502      	movs	r5, #2
    6036:	43ac      	bics	r4, r5
    6038:	d106      	bne.n	6048 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    603a:	7894      	ldrb	r4, [r2, #2]
    603c:	2c00      	cmp	r4, #0
    603e:	d120      	bne.n	6082 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    6040:	2480      	movs	r4, #128	; 0x80
    6042:	02a4      	lsls	r4, r4, #10
    6044:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    6046:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6048:	7854      	ldrb	r4, [r2, #1]
    604a:	3c01      	subs	r4, #1
    604c:	2c01      	cmp	r4, #1
    604e:	d91c      	bls.n	608a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6050:	040d      	lsls	r5, r1, #16
    6052:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6054:	24a0      	movs	r4, #160	; 0xa0
    6056:	05e4      	lsls	r4, r4, #23
    6058:	432c      	orrs	r4, r5
    605a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    605c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    605e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    6060:	24d0      	movs	r4, #208	; 0xd0
    6062:	0624      	lsls	r4, r4, #24
    6064:	432c      	orrs	r4, r5
    6066:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    6068:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    606a:	78d4      	ldrb	r4, [r2, #3]
    606c:	2c00      	cmp	r4, #0
    606e:	d122      	bne.n	60b6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    6070:	035b      	lsls	r3, r3, #13
    6072:	d51c      	bpl.n	60ae <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    6074:	7893      	ldrb	r3, [r2, #2]
    6076:	2b01      	cmp	r3, #1
    6078:	d01e      	beq.n	60b8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    607a:	6141      	str	r1, [r0, #20]
    607c:	e017      	b.n	60ae <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    607e:	2300      	movs	r3, #0
    6080:	e7d7      	b.n	6032 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6082:	24c0      	movs	r4, #192	; 0xc0
    6084:	02e4      	lsls	r4, r4, #11
    6086:	4323      	orrs	r3, r4
    6088:	e7dd      	b.n	6046 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    608a:	4c0d      	ldr	r4, [pc, #52]	; (60c0 <_system_pinmux_config+0xa4>)
    608c:	4023      	ands	r3, r4
    608e:	e7df      	b.n	6050 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    6090:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6092:	040c      	lsls	r4, r1, #16
    6094:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    6096:	23a0      	movs	r3, #160	; 0xa0
    6098:	05db      	lsls	r3, r3, #23
    609a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    609c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    609e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    60a0:	23d0      	movs	r3, #208	; 0xd0
    60a2:	061b      	lsls	r3, r3, #24
    60a4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    60a6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    60a8:	78d3      	ldrb	r3, [r2, #3]
    60aa:	2b00      	cmp	r3, #0
    60ac:	d103      	bne.n	60b6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    60ae:	7853      	ldrb	r3, [r2, #1]
    60b0:	3b01      	subs	r3, #1
    60b2:	2b01      	cmp	r3, #1
    60b4:	d902      	bls.n	60bc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    60b6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    60b8:	6181      	str	r1, [r0, #24]
    60ba:	e7f8      	b.n	60ae <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    60bc:	6081      	str	r1, [r0, #8]
}
    60be:	e7fa      	b.n	60b6 <_system_pinmux_config+0x9a>
    60c0:	fffbffff 	.word	0xfffbffff

000060c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    60c4:	b510      	push	{r4, lr}
    60c6:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    60c8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    60ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60cc:	2900      	cmp	r1, #0
    60ce:	d104      	bne.n	60da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    60d0:	0943      	lsrs	r3, r0, #5
    60d2:	01db      	lsls	r3, r3, #7
    60d4:	4905      	ldr	r1, [pc, #20]	; (60ec <system_pinmux_pin_set_config+0x28>)
    60d6:	468c      	mov	ip, r1
    60d8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    60da:	241f      	movs	r4, #31
    60dc:	4020      	ands	r0, r4
    60de:	2101      	movs	r1, #1
    60e0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    60e2:	0018      	movs	r0, r3
    60e4:	4b02      	ldr	r3, [pc, #8]	; (60f0 <system_pinmux_pin_set_config+0x2c>)
    60e6:	4798      	blx	r3
}
    60e8:	bd10      	pop	{r4, pc}
    60ea:	46c0      	nop			; (mov r8, r8)
    60ec:	41004400 	.word	0x41004400
    60f0:	0000601d 	.word	0x0000601d

000060f4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    60f4:	4770      	bx	lr
	...

000060f8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    60f8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    60fa:	4b05      	ldr	r3, [pc, #20]	; (6110 <system_init+0x18>)
    60fc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    60fe:	4b05      	ldr	r3, [pc, #20]	; (6114 <system_init+0x1c>)
    6100:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6102:	4b05      	ldr	r3, [pc, #20]	; (6118 <system_init+0x20>)
    6104:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6106:	4b05      	ldr	r3, [pc, #20]	; (611c <system_init+0x24>)
    6108:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    610a:	4b05      	ldr	r3, [pc, #20]	; (6120 <system_init+0x28>)
    610c:	4798      	blx	r3
}
    610e:	bd10      	pop	{r4, pc}
    6110:	00005c35 	.word	0x00005c35
    6114:	00004161 	.word	0x00004161
    6118:	000060f5 	.word	0x000060f5
    611c:	00004271 	.word	0x00004271
    6120:	000060f5 	.word	0x000060f5

00006124 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    6124:	4b09      	ldr	r3, [pc, #36]	; (614c <_tcc_get_inst_index+0x28>)
    6126:	4298      	cmp	r0, r3
    6128:	d00c      	beq.n	6144 <_tcc_get_inst_index+0x20>
    612a:	4b09      	ldr	r3, [pc, #36]	; (6150 <_tcc_get_inst_index+0x2c>)
    612c:	4298      	cmp	r0, r3
    612e:	d007      	beq.n	6140 <_tcc_get_inst_index+0x1c>
    6130:	4a08      	ldr	r2, [pc, #32]	; (6154 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    6132:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    6134:	4290      	cmp	r0, r2
    6136:	d001      	beq.n	613c <_tcc_get_inst_index+0x18>
}
    6138:	0018      	movs	r0, r3
    613a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    613c:	3302      	adds	r3, #2
    613e:	e002      	b.n	6146 <_tcc_get_inst_index+0x22>
    6140:	2301      	movs	r3, #1
    6142:	e000      	b.n	6146 <_tcc_get_inst_index+0x22>
    6144:	2300      	movs	r3, #0
			return i;
    6146:	b2db      	uxtb	r3, r3
    6148:	e7f6      	b.n	6138 <_tcc_get_inst_index+0x14>
    614a:	46c0      	nop			; (mov r8, r8)
    614c:	42002000 	.word	0x42002000
    6150:	42002400 	.word	0x42002400
    6154:	42002800 	.word	0x42002800

00006158 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    6158:	b510      	push	{r4, lr}
    615a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    615c:	0008      	movs	r0, r1
    615e:	4b4f      	ldr	r3, [pc, #316]	; (629c <tcc_get_config_defaults+0x144>)
    6160:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    6162:	2300      	movs	r3, #0
    6164:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    6166:	0080      	lsls	r0, r0, #2
    6168:	4a4d      	ldr	r2, [pc, #308]	; (62a0 <tcc_get_config_defaults+0x148>)
    616a:	5882      	ldr	r2, [r0, r2]
    616c:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    616e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    6170:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    6172:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    6174:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    6176:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6178:	61e3      	str	r3, [r4, #28]
    617a:	6223      	str	r3, [r4, #32]
    617c:	6263      	str	r3, [r4, #36]	; 0x24
    617e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    6180:	7523      	strb	r3, [r4, #20]
    6182:	7563      	strb	r3, [r4, #21]
    6184:	75a3      	strb	r3, [r4, #22]
    6186:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    6188:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    618a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    618c:	7423      	strb	r3, [r4, #16]
    618e:	7463      	strb	r3, [r4, #17]
    6190:	74a3      	strb	r3, [r4, #18]
    6192:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    6194:	222c      	movs	r2, #44	; 0x2c
    6196:	54a3      	strb	r3, [r4, r2]
    6198:	3201      	adds	r2, #1
    619a:	54a3      	strb	r3, [r4, r2]
    619c:	3201      	adds	r2, #1
    619e:	54a3      	strb	r3, [r4, r2]
    61a0:	3201      	adds	r2, #1
    61a2:	54a3      	strb	r3, [r4, r2]
    61a4:	3201      	adds	r2, #1
    61a6:	54a3      	strb	r3, [r4, r2]
    61a8:	3201      	adds	r2, #1
    61aa:	54a3      	strb	r3, [r4, r2]
    61ac:	3201      	adds	r2, #1
    61ae:	54a3      	strb	r3, [r4, r2]
    61b0:	3201      	adds	r2, #1
    61b2:	54a3      	strb	r3, [r4, r2]
    61b4:	3201      	adds	r2, #1
    61b6:	54a3      	strb	r3, [r4, r2]
    61b8:	3201      	adds	r2, #1
    61ba:	54a3      	strb	r3, [r4, r2]
    61bc:	3201      	adds	r2, #1
    61be:	54a3      	strb	r3, [r4, r2]
    61c0:	3201      	adds	r2, #1
    61c2:	54a3      	strb	r3, [r4, r2]
    61c4:	3201      	adds	r2, #1
    61c6:	54a3      	strb	r3, [r4, r2]
    61c8:	3201      	adds	r2, #1
    61ca:	54a3      	strb	r3, [r4, r2]
    61cc:	3201      	adds	r2, #1
    61ce:	54a3      	strb	r3, [r4, r2]
    61d0:	3201      	adds	r2, #1
    61d2:	54a3      	strb	r3, [r4, r2]
    61d4:	3201      	adds	r2, #1
    61d6:	54a3      	strb	r3, [r4, r2]
    61d8:	3201      	adds	r2, #1
    61da:	54a3      	strb	r3, [r4, r2]
    61dc:	3201      	adds	r2, #1
    61de:	54a3      	strb	r3, [r4, r2]
    61e0:	3201      	adds	r2, #1
    61e2:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    61e4:	3201      	adds	r2, #1
    61e6:	54a3      	strb	r3, [r4, r2]
    61e8:	3201      	adds	r2, #1
    61ea:	54a3      	strb	r3, [r4, r2]
    61ec:	3201      	adds	r2, #1
    61ee:	54a3      	strb	r3, [r4, r2]
    61f0:	3201      	adds	r2, #1
    61f2:	54a3      	strb	r3, [r4, r2]
    61f4:	3201      	adds	r2, #1
    61f6:	54a3      	strb	r3, [r4, r2]
    61f8:	3201      	adds	r2, #1
    61fa:	54a3      	strb	r3, [r4, r2]
    61fc:	3201      	adds	r2, #1
    61fe:	54a3      	strb	r3, [r4, r2]
    6200:	3201      	adds	r2, #1
    6202:	54a3      	strb	r3, [r4, r2]
    6204:	3201      	adds	r2, #1
    6206:	54a3      	strb	r3, [r4, r2]
    6208:	3201      	adds	r2, #1
    620a:	54a3      	strb	r3, [r4, r2]
    620c:	3201      	adds	r2, #1
    620e:	54a3      	strb	r3, [r4, r2]
    6210:	3201      	adds	r2, #1
    6212:	54a3      	strb	r3, [r4, r2]
    6214:	3201      	adds	r2, #1
    6216:	54a3      	strb	r3, [r4, r2]
    6218:	3201      	adds	r2, #1
    621a:	54a3      	strb	r3, [r4, r2]
    621c:	3201      	adds	r2, #1
    621e:	54a3      	strb	r3, [r4, r2]
    6220:	3201      	adds	r2, #1
    6222:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    6224:	3201      	adds	r2, #1
    6226:	54a3      	strb	r3, [r4, r2]
    6228:	3201      	adds	r2, #1
    622a:	54a3      	strb	r3, [r4, r2]
    622c:	3201      	adds	r2, #1
    622e:	54a3      	strb	r3, [r4, r2]
    6230:	3201      	adds	r2, #1
    6232:	54a3      	strb	r3, [r4, r2]
    6234:	3201      	adds	r2, #1
    6236:	54a3      	strb	r3, [r4, r2]
    6238:	3201      	adds	r2, #1
    623a:	54a3      	strb	r3, [r4, r2]
    623c:	3201      	adds	r2, #1
    623e:	54a3      	strb	r3, [r4, r2]
    6240:	3201      	adds	r2, #1
    6242:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    6244:	3241      	adds	r2, #65	; 0x41
    6246:	54a3      	strb	r3, [r4, r2]
    6248:	65a3      	str	r3, [r4, #88]	; 0x58
    624a:	67a3      	str	r3, [r4, #120]	; 0x78
    624c:	3201      	adds	r2, #1
    624e:	54a3      	strb	r3, [r4, r2]
    6250:	65e3      	str	r3, [r4, #92]	; 0x5c
    6252:	67e3      	str	r3, [r4, #124]	; 0x7c
    6254:	3201      	adds	r2, #1
    6256:	54a3      	strb	r3, [r4, r2]
    6258:	6623      	str	r3, [r4, #96]	; 0x60
    625a:	3a1a      	subs	r2, #26
    625c:	50a3      	str	r3, [r4, r2]
    625e:	321b      	adds	r2, #27
    6260:	54a3      	strb	r3, [r4, r2]
    6262:	6663      	str	r3, [r4, #100]	; 0x64
    6264:	3a17      	subs	r2, #23
    6266:	50a3      	str	r3, [r4, r2]
    6268:	3218      	adds	r2, #24
    626a:	54a3      	strb	r3, [r4, r2]
    626c:	66a3      	str	r3, [r4, #104]	; 0x68
    626e:	3a14      	subs	r2, #20
    6270:	50a3      	str	r3, [r4, r2]
    6272:	3215      	adds	r2, #21
    6274:	54a3      	strb	r3, [r4, r2]
    6276:	66e3      	str	r3, [r4, #108]	; 0x6c
    6278:	3a11      	subs	r2, #17
    627a:	50a3      	str	r3, [r4, r2]
    627c:	3212      	adds	r2, #18
    627e:	54a3      	strb	r3, [r4, r2]
    6280:	6723      	str	r3, [r4, #112]	; 0x70
    6282:	3a0e      	subs	r2, #14
    6284:	50a3      	str	r3, [r4, r2]
    6286:	320f      	adds	r2, #15
    6288:	54a3      	strb	r3, [r4, r2]
    628a:	6763      	str	r3, [r4, #116]	; 0x74
    628c:	3a0b      	subs	r2, #11
    628e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    6290:	2101      	movs	r1, #1
    6292:	320c      	adds	r2, #12
    6294:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    6296:	3201      	adds	r2, #1
    6298:	54a3      	strb	r3, [r4, r2]
}
    629a:	bd10      	pop	{r4, pc}
    629c:	00006125 	.word	0x00006125
    62a0:	0000df74 	.word	0x0000df74

000062a4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    62a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62a6:	46de      	mov	lr, fp
    62a8:	4657      	mov	r7, sl
    62aa:	464e      	mov	r6, r9
    62ac:	4645      	mov	r5, r8
    62ae:	b5e0      	push	{r5, r6, r7, lr}
    62b0:	b091      	sub	sp, #68	; 0x44
    62b2:	9001      	str	r0, [sp, #4]
    62b4:	000c      	movs	r4, r1
    62b6:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    62b8:	0008      	movs	r0, r1
    62ba:	4bc3      	ldr	r3, [pc, #780]	; (65c8 <tcc_init+0x324>)
    62bc:	4798      	blx	r3
    62be:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    62c0:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    62c2:	48c2      	ldr	r0, [pc, #776]	; (65cc <tcc_init+0x328>)
    62c4:	6a02      	ldr	r2, [r0, #32]
    62c6:	009e      	lsls	r6, r3, #2
    62c8:	4fc1      	ldr	r7, [pc, #772]	; (65d0 <tcc_init+0x32c>)
    62ca:	59f7      	ldr	r7, [r6, r7]
    62cc:	433a      	orrs	r2, r7
    62ce:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    62d0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    62d2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    62d4:	0792      	lsls	r2, r2, #30
    62d6:	d506      	bpl.n	62e6 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    62d8:	b011      	add	sp, #68	; 0x44
    62da:	bc3c      	pop	{r2, r3, r4, r5}
    62dc:	4690      	mov	r8, r2
    62de:	4699      	mov	r9, r3
    62e0:	46a2      	mov	sl, r4
    62e2:	46ab      	mov	fp, r5
    62e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    62e6:	6822      	ldr	r2, [r4, #0]
    62e8:	2701      	movs	r7, #1
    62ea:	4017      	ands	r7, r2
    62ec:	d1f4      	bne.n	62d8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    62ee:	48b9      	ldr	r0, [pc, #740]	; (65d4 <tcc_init+0x330>)
    62f0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    62f2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    62f4:	682e      	ldr	r6, [r5, #0]
    62f6:	42b2      	cmp	r2, r6
    62f8:	d3ee      	bcc.n	62d8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    62fa:	686e      	ldr	r6, [r5, #4]
    62fc:	42b2      	cmp	r2, r6
    62fe:	d3eb      	bcc.n	62d8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    6300:	69e8      	ldr	r0, [r5, #28]
    6302:	4282      	cmp	r2, r0
    6304:	d200      	bcs.n	6308 <tcc_init+0x64>
    6306:	e1b9      	b.n	667c <tcc_init+0x3d8>
    6308:	6a28      	ldr	r0, [r5, #32]
    630a:	4282      	cmp	r2, r0
    630c:	d200      	bcs.n	6310 <tcc_init+0x6c>
    630e:	e1b7      	b.n	6680 <tcc_init+0x3dc>
    6310:	6a68      	ldr	r0, [r5, #36]	; 0x24
    6312:	4282      	cmp	r2, r0
    6314:	d200      	bcs.n	6318 <tcc_init+0x74>
    6316:	e1b5      	b.n	6684 <tcc_init+0x3e0>
    6318:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    631a:	4282      	cmp	r2, r0
    631c:	d200      	bcs.n	6320 <tcc_init+0x7c>
    631e:	e1b3      	b.n	6688 <tcc_init+0x3e4>
    6320:	2298      	movs	r2, #152	; 0x98
    6322:	4694      	mov	ip, r2
    6324:	44ac      	add	ip, r5
    6326:	4662      	mov	r2, ip
    6328:	9208      	str	r2, [sp, #32]
    632a:	2000      	movs	r0, #0
    632c:	e003      	b.n	6336 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    632e:	3001      	adds	r0, #1
    6330:	3201      	adds	r2, #1
    6332:	2808      	cmp	r0, #8
    6334:	d008      	beq.n	6348 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    6336:	7816      	ldrb	r6, [r2, #0]
    6338:	2e00      	cmp	r6, #0
    633a:	d0f8      	beq.n	632e <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    633c:	4ea6      	ldr	r6, [pc, #664]	; (65d8 <tcc_init+0x334>)
    633e:	5c76      	ldrb	r6, [r6, r1]
    6340:	4286      	cmp	r6, r0
    6342:	dcf4      	bgt.n	632e <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    6344:	2017      	movs	r0, #23
    6346:	e7c7      	b.n	62d8 <tcc_init+0x34>
    6348:	2200      	movs	r2, #0
    634a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    634c:	2080      	movs	r0, #128	; 0x80
    634e:	0440      	lsls	r0, r0, #17
    6350:	4684      	mov	ip, r0
    6352:	e002      	b.n	635a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    6354:	3201      	adds	r2, #1
    6356:	2a04      	cmp	r2, #4
    6358:	d00e      	beq.n	6378 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    635a:	18a8      	adds	r0, r5, r2
    635c:	7c00      	ldrb	r0, [r0, #16]
    635e:	2801      	cmp	r0, #1
    6360:	d1f8      	bne.n	6354 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    6362:	489e      	ldr	r0, [pc, #632]	; (65dc <tcc_init+0x338>)
    6364:	5c40      	ldrb	r0, [r0, r1]
    6366:	4290      	cmp	r0, r2
    6368:	da00      	bge.n	636c <tcc_init+0xc8>
    636a:	e18f      	b.n	668c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    636c:	4660      	mov	r0, ip
    636e:	4090      	lsls	r0, r2
    6370:	9e02      	ldr	r6, [sp, #8]
    6372:	4306      	orrs	r6, r0
    6374:	9602      	str	r6, [sp, #8]
    6376:	e7ed      	b.n	6354 <tcc_init+0xb0>
	if (config->run_in_standby) {
    6378:	329d      	adds	r2, #157	; 0x9d
    637a:	5caa      	ldrb	r2, [r5, r2]
    637c:	2a00      	cmp	r2, #0
    637e:	d004      	beq.n	638a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    6380:	2280      	movs	r2, #128	; 0x80
    6382:	0112      	lsls	r2, r2, #4
    6384:	9902      	ldr	r1, [sp, #8]
    6386:	4311      	orrs	r1, r2
    6388:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    638a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    638c:	1e51      	subs	r1, r2, #1
    638e:	418a      	sbcs	r2, r1
    6390:	0092      	lsls	r2, r2, #2
    6392:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    6394:	7a6a      	ldrb	r2, [r5, #9]
    6396:	2a01      	cmp	r2, #1
    6398:	d022      	beq.n	63e0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    639a:	4a90      	ldr	r2, [pc, #576]	; (65dc <tcc_init+0x338>)
    639c:	5cd2      	ldrb	r2, [r2, r3]
    639e:	0011      	movs	r1, r2
    63a0:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    63a2:	2235      	movs	r2, #53	; 0x35
    63a4:	5caa      	ldrb	r2, [r5, r2]
    63a6:	428a      	cmp	r2, r1
    63a8:	d300      	bcc.n	63ac <tcc_init+0x108>
    63aa:	e179      	b.n	66a0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    63ac:	212c      	movs	r1, #44	; 0x2c
    63ae:	5c69      	ldrb	r1, [r5, r1]
    63b0:	290f      	cmp	r1, #15
    63b2:	d900      	bls.n	63b6 <tcc_init+0x112>
    63b4:	e174      	b.n	66a0 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    63b6:	7b28      	ldrb	r0, [r5, #12]
    63b8:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    63ba:	7ae8      	ldrb	r0, [r5, #11]
    63bc:	900b      	str	r0, [sp, #44]	; 0x2c
    63be:	202d      	movs	r0, #45	; 0x2d
    63c0:	4682      	mov	sl, r0
    63c2:	44aa      	add	sl, r5
    63c4:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    63c6:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    63c8:	ae0e      	add	r6, sp, #56	; 0x38
    63ca:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    63cc:	26c0      	movs	r6, #192	; 0xc0
    63ce:	0136      	lsls	r6, r6, #4
    63d0:	46b1      	mov	r9, r6
    63d2:	4684      	mov	ip, r0
    63d4:	46a0      	mov	r8, r4
    63d6:	0028      	movs	r0, r5
    63d8:	4655      	mov	r5, sl
    63da:	9309      	str	r3, [sp, #36]	; 0x24
    63dc:	4682      	mov	sl, r0
    63de:	e035      	b.n	644c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    63e0:	9906      	ldr	r1, [sp, #24]
    63e2:	4311      	orrs	r1, r2
    63e4:	9106      	str	r1, [sp, #24]
    63e6:	e7d8      	b.n	639a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    63e8:	0292      	lsls	r2, r2, #10
    63ea:	464f      	mov	r7, r9
    63ec:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    63ee:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    63f0:	7919      	ldrb	r1, [r3, #4]
    63f2:	468b      	mov	fp, r1
    63f4:	2103      	movs	r1, #3
    63f6:	465f      	mov	r7, fp
    63f8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    63fa:	430a      	orrs	r2, r1
    63fc:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    63fe:	795a      	ldrb	r2, [r3, #5]
    6400:	0152      	lsls	r2, r2, #5
    6402:	2160      	movs	r1, #96	; 0x60
    6404:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6406:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    6408:	7999      	ldrb	r1, [r3, #6]
    640a:	0209      	lsls	r1, r1, #8
    640c:	26c0      	movs	r6, #192	; 0xc0
    640e:	00b6      	lsls	r6, r6, #2
    6410:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    6412:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    6414:	79da      	ldrb	r2, [r3, #7]
    6416:	0312      	lsls	r2, r2, #12
    6418:	21e0      	movs	r1, #224	; 0xe0
    641a:	01c9      	lsls	r1, r1, #7
    641c:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    641e:	4316      	orrs	r6, r2
    6420:	4334      	orrs	r4, r6
    6422:	9a03      	ldr	r2, [sp, #12]
    6424:	4314      	orrs	r4, r2
    6426:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    6428:	4662      	mov	r2, ip
    642a:	9907      	ldr	r1, [sp, #28]
    642c:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    642e:	2a04      	cmp	r2, #4
    6430:	d02a      	beq.n	6488 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    6432:	7c9a      	ldrb	r2, [r3, #18]
    6434:	9905      	ldr	r1, [sp, #20]
    6436:	4291      	cmp	r1, r2
    6438:	d800      	bhi.n	643c <tcc_init+0x198>
    643a:	e131      	b.n	66a0 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    643c:	7a59      	ldrb	r1, [r3, #9]
    643e:	350a      	adds	r5, #10
    6440:	2304      	movs	r3, #4
    6442:	469b      	mov	fp, r3
    6444:	44dc      	add	ip, fp
    6446:	290f      	cmp	r1, #15
    6448:	d900      	bls.n	644c <tcc_init+0x1a8>
    644a:	e129      	b.n	66a0 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    644c:	0609      	lsls	r1, r1, #24
    644e:	23f0      	movs	r3, #240	; 0xf0
    6450:	051b      	lsls	r3, r3, #20
    6452:	4019      	ands	r1, r3
    6454:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    6456:	782e      	ldrb	r6, [r5, #0]
    6458:	0436      	lsls	r6, r6, #16
    645a:	20ff      	movs	r0, #255	; 0xff
    645c:	0400      	lsls	r0, r0, #16
    645e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    6460:	7868      	ldrb	r0, [r5, #1]
    6462:	2480      	movs	r4, #128	; 0x80
    6464:	2800      	cmp	r0, #0
    6466:	d100      	bne.n	646a <tcc_init+0x1c6>
    6468:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    646a:	7898      	ldrb	r0, [r3, #2]
    646c:	2708      	movs	r7, #8
    646e:	9703      	str	r7, [sp, #12]
    6470:	2800      	cmp	r0, #0
    6472:	d101      	bne.n	6478 <tcc_init+0x1d4>
    6474:	9804      	ldr	r0, [sp, #16]
    6476:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    6478:	78d8      	ldrb	r0, [r3, #3]
    647a:	4683      	mov	fp, r0
    647c:	2010      	movs	r0, #16
    647e:	465f      	mov	r7, fp
    6480:	2f00      	cmp	r7, #0
    6482:	d1b1      	bne.n	63e8 <tcc_init+0x144>
    6484:	9804      	ldr	r0, [sp, #16]
    6486:	e7af      	b.n	63e8 <tcc_init+0x144>
    6488:	4644      	mov	r4, r8
    648a:	4655      	mov	r5, sl
    648c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    648e:	4a52      	ldr	r2, [pc, #328]	; (65d8 <tcc_init+0x334>)
    6490:	5cd2      	ldrb	r2, [r2, r3]
    6492:	4691      	mov	r9, r2
    6494:	4651      	mov	r1, sl
    6496:	3150      	adds	r1, #80	; 0x50
    6498:	4650      	mov	r0, sl
    649a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    649c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    649e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    64a0:	2601      	movs	r6, #1
    64a2:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    64a4:	2602      	movs	r6, #2
    64a6:	36ff      	adds	r6, #255	; 0xff
    64a8:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    64aa:	2680      	movs	r6, #128	; 0x80
    64ac:	0276      	lsls	r6, r6, #9
    64ae:	46b0      	mov	r8, r6
    64b0:	46a4      	mov	ip, r4
    64b2:	001c      	movs	r4, r3
    64b4:	464b      	mov	r3, r9
    64b6:	e00f      	b.n	64d8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    64b8:	7806      	ldrb	r6, [r0, #0]
    64ba:	2e00      	cmp	r6, #0
    64bc:	d007      	beq.n	64ce <tcc_init+0x22a>
			if (i >= ow_num) {
    64be:	4293      	cmp	r3, r2
    64c0:	d800      	bhi.n	64c4 <tcc_init+0x220>
    64c2:	e0e7      	b.n	6694 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    64c4:	2e02      	cmp	r6, #2
    64c6:	d014      	beq.n	64f2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    64c8:	4656      	mov	r6, sl
    64ca:	4096      	lsls	r6, r2
    64cc:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    64ce:	3201      	adds	r2, #1
    64d0:	3101      	adds	r1, #1
    64d2:	3002      	adds	r0, #2
    64d4:	2a08      	cmp	r2, #8
    64d6:	d010      	beq.n	64fa <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    64d8:	780e      	ldrb	r6, [r1, #0]
    64da:	2e00      	cmp	r6, #0
    64dc:	d0ec      	beq.n	64b8 <tcc_init+0x214>
			if (i >= ow_num) {
    64de:	4293      	cmp	r3, r2
    64e0:	d800      	bhi.n	64e4 <tcc_init+0x240>
    64e2:	e0d5      	b.n	6690 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    64e4:	4646      	mov	r6, r8
    64e6:	4096      	lsls	r6, r2
    64e8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    64ea:	7806      	ldrb	r6, [r0, #0]
    64ec:	2e00      	cmp	r6, #0
    64ee:	d1e9      	bne.n	64c4 <tcc_init+0x220>
    64f0:	e7ed      	b.n	64ce <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    64f2:	465e      	mov	r6, fp
    64f4:	4096      	lsls	r6, r2
    64f6:	4337      	orrs	r7, r6
    64f8:	e7e9      	b.n	64ce <tcc_init+0x22a>
    64fa:	4699      	mov	r9, r3
    64fc:	0023      	movs	r3, r4
    64fe:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    6500:	7e6a      	ldrb	r2, [r5, #25]
    6502:	0112      	lsls	r2, r2, #4
    6504:	2130      	movs	r1, #48	; 0x30
    6506:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    6508:	7e28      	ldrb	r0, [r5, #24]
    650a:	2207      	movs	r2, #7
    650c:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    650e:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    6510:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    6512:	2080      	movs	r0, #128	; 0x80
    6514:	0240      	lsls	r0, r0, #9
    6516:	000e      	movs	r6, r1
    6518:	e002      	b.n	6520 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    651a:	3201      	adds	r2, #1
    651c:	2a04      	cmp	r2, #4
    651e:	d00b      	beq.n	6538 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    6520:	18a9      	adds	r1, r5, r2
    6522:	7d09      	ldrb	r1, [r1, #20]
    6524:	2900      	cmp	r1, #0
    6526:	d0f8      	beq.n	651a <tcc_init+0x276>
			if (n >= cc_num) {
    6528:	9905      	ldr	r1, [sp, #20]
    652a:	4291      	cmp	r1, r2
    652c:	dc00      	bgt.n	6530 <tcc_init+0x28c>
    652e:	e0b3      	b.n	6698 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    6530:	0001      	movs	r1, r0
    6532:	4091      	lsls	r1, r2
    6534:	430e      	orrs	r6, r1
    6536:	e7f0      	b.n	651a <tcc_init+0x276>
    6538:	46b2      	mov	sl, r6
    653a:	9801      	ldr	r0, [sp, #4]
    653c:	0002      	movs	r2, r0
    653e:	3204      	adds	r2, #4
    6540:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    6542:	2100      	movs	r1, #0
    6544:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6546:	4282      	cmp	r2, r0
    6548:	d1fc      	bne.n	6544 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    654a:	2200      	movs	r2, #0
    654c:	9801      	ldr	r0, [sp, #4]
    654e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    6550:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    6552:	0099      	lsls	r1, r3, #2
    6554:	4a22      	ldr	r2, [pc, #136]	; (65e0 <tcc_init+0x33c>)
    6556:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    6558:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    655a:	22a0      	movs	r2, #160	; 0xa0
    655c:	5ca9      	ldrb	r1, [r5, r2]
    655e:	3a64      	subs	r2, #100	; 0x64
    6560:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    6562:	a90d      	add	r1, sp, #52	; 0x34
    6564:	7aaa      	ldrb	r2, [r5, #10]
    6566:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    6568:	4a1e      	ldr	r2, [pc, #120]	; (65e4 <tcc_init+0x340>)
    656a:	5cd6      	ldrb	r6, [r2, r3]
    656c:	0030      	movs	r0, r6
    656e:	4b1e      	ldr	r3, [pc, #120]	; (65e8 <tcc_init+0x344>)
    6570:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    6572:	0030      	movs	r0, r6
    6574:	4b1d      	ldr	r3, [pc, #116]	; (65ec <tcc_init+0x348>)
    6576:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    6578:	464b      	mov	r3, r9
    657a:	2b00      	cmp	r3, #0
    657c:	dd3c      	ble.n	65f8 <tcc_init+0x354>
    657e:	002e      	movs	r6, r5
    6580:	3658      	adds	r6, #88	; 0x58
    6582:	3398      	adds	r3, #152	; 0x98
    6584:	4698      	mov	r8, r3
    6586:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6588:	2301      	movs	r3, #1
    658a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    658c:	46ab      	mov	fp, r5
    658e:	4645      	mov	r5, r8
    6590:	46a0      	mov	r8, r4
    6592:	9c08      	ldr	r4, [sp, #32]
    6594:	e003      	b.n	659e <tcc_init+0x2fa>
    6596:	3401      	adds	r4, #1
    6598:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    659a:	42ac      	cmp	r4, r5
    659c:	d02a      	beq.n	65f4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    659e:	7823      	ldrb	r3, [r4, #0]
    65a0:	2b00      	cmp	r3, #0
    65a2:	d0f8      	beq.n	6596 <tcc_init+0x2f2>
    65a4:	ab0c      	add	r3, sp, #48	; 0x30
    65a6:	464a      	mov	r2, r9
    65a8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    65aa:	2300      	movs	r3, #0
    65ac:	aa0c      	add	r2, sp, #48	; 0x30
    65ae:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    65b0:	0013      	movs	r3, r2
    65b2:	2220      	movs	r2, #32
    65b4:	18b2      	adds	r2, r6, r2
    65b6:	7812      	ldrb	r2, [r2, #0]
    65b8:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    65ba:	464a      	mov	r2, r9
    65bc:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    65be:	7830      	ldrb	r0, [r6, #0]
    65c0:	0019      	movs	r1, r3
    65c2:	4b0b      	ldr	r3, [pc, #44]	; (65f0 <tcc_init+0x34c>)
    65c4:	4798      	blx	r3
    65c6:	e7e6      	b.n	6596 <tcc_init+0x2f2>
    65c8:	00006125 	.word	0x00006125
    65cc:	40000400 	.word	0x40000400
    65d0:	0000df60 	.word	0x0000df60
    65d4:	0000df74 	.word	0x0000df74
    65d8:	0000df80 	.word	0x0000df80
    65dc:	0000df6c 	.word	0x0000df6c
    65e0:	2000106c 	.word	0x2000106c
    65e4:	0000df70 	.word	0x0000df70
    65e8:	00005fcd 	.word	0x00005fcd
    65ec:	00005f41 	.word	0x00005f41
    65f0:	000060c5 	.word	0x000060c5
    65f4:	4644      	mov	r4, r8
    65f6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    65f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    65fa:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    65fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    65fe:	0212      	lsls	r2, r2, #8
    6600:	4313      	orrs	r3, r2
    6602:	9a02      	ldr	r2, [sp, #8]
    6604:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    6606:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6608:	2204      	movs	r2, #4
    660a:	68a3      	ldr	r3, [r4, #8]
    660c:	421a      	tst	r2, r3
    660e:	d1fc      	bne.n	660a <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    6610:	23ff      	movs	r3, #255	; 0xff
    6612:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    6614:	2204      	movs	r2, #4
    6616:	68a3      	ldr	r3, [r4, #8]
    6618:	421a      	tst	r2, r3
    661a:	d1fc      	bne.n	6616 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    661c:	466b      	mov	r3, sp
    661e:	7e1b      	ldrb	r3, [r3, #24]
    6620:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    6622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6624:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    6626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6628:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    662a:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    662c:	4a1d      	ldr	r2, [pc, #116]	; (66a4 <tcc_init+0x400>)
    662e:	68a3      	ldr	r3, [r4, #8]
    6630:	4213      	tst	r3, r2
    6632:	d1fc      	bne.n	662e <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    6634:	4653      	mov	r3, sl
    6636:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    6638:	2210      	movs	r2, #16
    663a:	68a3      	ldr	r3, [r4, #8]
    663c:	421a      	tst	r2, r3
    663e:	d1fc      	bne.n	663a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    6640:	682b      	ldr	r3, [r5, #0]
    6642:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    6644:	4a18      	ldr	r2, [pc, #96]	; (66a8 <tcc_init+0x404>)
    6646:	68a3      	ldr	r3, [r4, #8]
    6648:	4213      	tst	r3, r2
    664a:	d1fc      	bne.n	6646 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    664c:	686b      	ldr	r3, [r5, #4]
    664e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6650:	9805      	ldr	r0, [sp, #20]
    6652:	2800      	cmp	r0, #0
    6654:	dd22      	ble.n	669c <tcc_init+0x3f8>
    6656:	351c      	adds	r5, #28
    6658:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    665a:	4e14      	ldr	r6, [pc, #80]	; (66ac <tcc_init+0x408>)
    665c:	0032      	movs	r2, r6
    665e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    6660:	68a3      	ldr	r3, [r4, #8]
    6662:	421a      	tst	r2, r3
    6664:	d1fc      	bne.n	6660 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    6666:	cd04      	ldmia	r5!, {r2}
    6668:	000b      	movs	r3, r1
    666a:	3310      	adds	r3, #16
    666c:	009b      	lsls	r3, r3, #2
    666e:	18e3      	adds	r3, r4, r3
    6670:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    6672:	3101      	adds	r1, #1
    6674:	4288      	cmp	r0, r1
    6676:	dcf1      	bgt.n	665c <tcc_init+0x3b8>
	return STATUS_OK;
    6678:	2000      	movs	r0, #0
    667a:	e62d      	b.n	62d8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    667c:	2017      	movs	r0, #23
    667e:	e62b      	b.n	62d8 <tcc_init+0x34>
    6680:	2017      	movs	r0, #23
    6682:	e629      	b.n	62d8 <tcc_init+0x34>
    6684:	2017      	movs	r0, #23
    6686:	e627      	b.n	62d8 <tcc_init+0x34>
    6688:	2017      	movs	r0, #23
    668a:	e625      	b.n	62d8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    668c:	2017      	movs	r0, #23
    668e:	e623      	b.n	62d8 <tcc_init+0x34>
			if (i >= ow_num) {
    6690:	2017      	movs	r0, #23
    6692:	e621      	b.n	62d8 <tcc_init+0x34>
			if (i >= ow_num) {
    6694:	2017      	movs	r0, #23
    6696:	e61f      	b.n	62d8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    6698:	2017      	movs	r0, #23
    669a:	e61d      	b.n	62d8 <tcc_init+0x34>
	return STATUS_OK;
    669c:	2000      	movs	r0, #0
    669e:	e61b      	b.n	62d8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    66a0:	2017      	movs	r0, #23
    66a2:	e619      	b.n	62d8 <tcc_init+0x34>
    66a4:	00020040 	.word	0x00020040
    66a8:	00040080 	.word	0x00040080
    66ac:	00080100 	.word	0x00080100

000066b0 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    66b0:	0092      	lsls	r2, r2, #2
    66b2:	1883      	adds	r3, r0, r2
    66b4:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    66b6:	4b03      	ldr	r3, [pc, #12]	; (66c4 <tcc_register_callback+0x14>)
    66b8:	58d3      	ldr	r3, [r2, r3]
    66ba:	6b42      	ldr	r2, [r0, #52]	; 0x34
    66bc:	4313      	orrs	r3, r2
    66be:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    66c0:	2000      	movs	r0, #0
    66c2:	4770      	bx	lr
    66c4:	0000df84 	.word	0x0000df84

000066c8 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    66c8:	b570      	push	{r4, r5, r6, lr}
    66ca:	0004      	movs	r4, r0
    66cc:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    66ce:	6800      	ldr	r0, [r0, #0]
    66d0:	4b09      	ldr	r3, [pc, #36]	; (66f8 <tcc_enable_callback+0x30>)
    66d2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    66d4:	4b09      	ldr	r3, [pc, #36]	; (66fc <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    66d6:	5c1b      	ldrb	r3, [r3, r0]
    66d8:	221f      	movs	r2, #31
    66da:	401a      	ands	r2, r3
    66dc:	2301      	movs	r3, #1
    66de:	4093      	lsls	r3, r2
    66e0:	4a07      	ldr	r2, [pc, #28]	; (6700 <tcc_enable_callback+0x38>)
    66e2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    66e4:	00ad      	lsls	r5, r5, #2
    66e6:	4b07      	ldr	r3, [pc, #28]	; (6704 <tcc_enable_callback+0x3c>)
    66e8:	58ea      	ldr	r2, [r5, r3]
    66ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    66ec:	4313      	orrs	r3, r2
    66ee:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    66f0:	6823      	ldr	r3, [r4, #0]
    66f2:	629a      	str	r2, [r3, #40]	; 0x28
}
    66f4:	bd70      	pop	{r4, r5, r6, pc}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	00006125 	.word	0x00006125
    66fc:	0000dfb4 	.word	0x0000dfb4
    6700:	e000e100 	.word	0xe000e100
    6704:	0000df84 	.word	0x0000df84

00006708 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6708:	b5f0      	push	{r4, r5, r6, r7, lr}
    670a:	46c6      	mov	lr, r8
    670c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    670e:	0080      	lsls	r0, r0, #2
    6710:	4b0e      	ldr	r3, [pc, #56]	; (674c <_tcc_interrupt_handler+0x44>)
    6712:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6714:	683b      	ldr	r3, [r7, #0]
    6716:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    6718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    671a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    671c:	4013      	ands	r3, r2
    671e:	401e      	ands	r6, r3
    6720:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6722:	4b0b      	ldr	r3, [pc, #44]	; (6750 <_tcc_interrupt_handler+0x48>)
    6724:	4698      	mov	r8, r3
    6726:	e002      	b.n	672e <_tcc_interrupt_handler+0x26>
    6728:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    672a:	2c30      	cmp	r4, #48	; 0x30
    672c:	d00a      	beq.n	6744 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    672e:	4643      	mov	r3, r8
    6730:	58e5      	ldr	r5, [r4, r3]
    6732:	4235      	tst	r5, r6
    6734:	d0f8      	beq.n	6728 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6736:	193b      	adds	r3, r7, r4
    6738:	685b      	ldr	r3, [r3, #4]
    673a:	0038      	movs	r0, r7
    673c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    673e:	683b      	ldr	r3, [r7, #0]
    6740:	62dd      	str	r5, [r3, #44]	; 0x2c
    6742:	e7f1      	b.n	6728 <_tcc_interrupt_handler+0x20>
		}
	}
}
    6744:	bc04      	pop	{r2}
    6746:	4690      	mov	r8, r2
    6748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    674a:	46c0      	nop			; (mov r8, r8)
    674c:	2000106c 	.word	0x2000106c
    6750:	0000df84 	.word	0x0000df84

00006754 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6754:	b510      	push	{r4, lr}
    6756:	2000      	movs	r0, #0
    6758:	4b01      	ldr	r3, [pc, #4]	; (6760 <TCC0_Handler+0xc>)
    675a:	4798      	blx	r3
    675c:	bd10      	pop	{r4, pc}
    675e:	46c0      	nop			; (mov r8, r8)
    6760:	00006709 	.word	0x00006709

00006764 <TCC1_Handler>:
    6764:	b510      	push	{r4, lr}
    6766:	2001      	movs	r0, #1
    6768:	4b01      	ldr	r3, [pc, #4]	; (6770 <TCC1_Handler+0xc>)
    676a:	4798      	blx	r3
    676c:	bd10      	pop	{r4, pc}
    676e:	46c0      	nop			; (mov r8, r8)
    6770:	00006709 	.word	0x00006709

00006774 <TCC2_Handler>:
    6774:	b510      	push	{r4, lr}
    6776:	2002      	movs	r0, #2
    6778:	4b01      	ldr	r3, [pc, #4]	; (6780 <TCC2_Handler+0xc>)
    677a:	4798      	blx	r3
    677c:	bd10      	pop	{r4, pc}
    677e:	46c0      	nop			; (mov r8, r8)
    6780:	00006709 	.word	0x00006709

00006784 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6784:	e7fe      	b.n	6784 <Dummy_Handler>
	...

00006788 <Reset_Handler>:
{
    6788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    678a:	4a2a      	ldr	r2, [pc, #168]	; (6834 <Reset_Handler+0xac>)
    678c:	4b2a      	ldr	r3, [pc, #168]	; (6838 <Reset_Handler+0xb0>)
    678e:	429a      	cmp	r2, r3
    6790:	d011      	beq.n	67b6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    6792:	001a      	movs	r2, r3
    6794:	4b29      	ldr	r3, [pc, #164]	; (683c <Reset_Handler+0xb4>)
    6796:	429a      	cmp	r2, r3
    6798:	d20d      	bcs.n	67b6 <Reset_Handler+0x2e>
    679a:	4a29      	ldr	r2, [pc, #164]	; (6840 <Reset_Handler+0xb8>)
    679c:	3303      	adds	r3, #3
    679e:	1a9b      	subs	r3, r3, r2
    67a0:	089b      	lsrs	r3, r3, #2
    67a2:	3301      	adds	r3, #1
    67a4:	009b      	lsls	r3, r3, #2
    67a6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    67a8:	4823      	ldr	r0, [pc, #140]	; (6838 <Reset_Handler+0xb0>)
    67aa:	4922      	ldr	r1, [pc, #136]	; (6834 <Reset_Handler+0xac>)
    67ac:	588c      	ldr	r4, [r1, r2]
    67ae:	5084      	str	r4, [r0, r2]
    67b0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    67b2:	429a      	cmp	r2, r3
    67b4:	d1fa      	bne.n	67ac <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    67b6:	4a23      	ldr	r2, [pc, #140]	; (6844 <Reset_Handler+0xbc>)
    67b8:	4b23      	ldr	r3, [pc, #140]	; (6848 <Reset_Handler+0xc0>)
    67ba:	429a      	cmp	r2, r3
    67bc:	d20a      	bcs.n	67d4 <Reset_Handler+0x4c>
    67be:	43d3      	mvns	r3, r2
    67c0:	4921      	ldr	r1, [pc, #132]	; (6848 <Reset_Handler+0xc0>)
    67c2:	185b      	adds	r3, r3, r1
    67c4:	2103      	movs	r1, #3
    67c6:	438b      	bics	r3, r1
    67c8:	3304      	adds	r3, #4
    67ca:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    67cc:	2100      	movs	r1, #0
    67ce:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    67d0:	4293      	cmp	r3, r2
    67d2:	d1fc      	bne.n	67ce <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    67d4:	4a1d      	ldr	r2, [pc, #116]	; (684c <Reset_Handler+0xc4>)
    67d6:	21ff      	movs	r1, #255	; 0xff
    67d8:	4b1d      	ldr	r3, [pc, #116]	; (6850 <Reset_Handler+0xc8>)
    67da:	438b      	bics	r3, r1
    67dc:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    67de:	39fd      	subs	r1, #253	; 0xfd
    67e0:	2390      	movs	r3, #144	; 0x90
    67e2:	005b      	lsls	r3, r3, #1
    67e4:	4a1b      	ldr	r2, [pc, #108]	; (6854 <Reset_Handler+0xcc>)
    67e6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    67e8:	4a1b      	ldr	r2, [pc, #108]	; (6858 <Reset_Handler+0xd0>)
    67ea:	78d3      	ldrb	r3, [r2, #3]
    67ec:	2503      	movs	r5, #3
    67ee:	43ab      	bics	r3, r5
    67f0:	2402      	movs	r4, #2
    67f2:	4323      	orrs	r3, r4
    67f4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    67f6:	78d3      	ldrb	r3, [r2, #3]
    67f8:	270c      	movs	r7, #12
    67fa:	43bb      	bics	r3, r7
    67fc:	2608      	movs	r6, #8
    67fe:	4333      	orrs	r3, r6
    6800:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    6802:	4b16      	ldr	r3, [pc, #88]	; (685c <Reset_Handler+0xd4>)
    6804:	7b98      	ldrb	r0, [r3, #14]
    6806:	2230      	movs	r2, #48	; 0x30
    6808:	4390      	bics	r0, r2
    680a:	2220      	movs	r2, #32
    680c:	4310      	orrs	r0, r2
    680e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6810:	7b99      	ldrb	r1, [r3, #14]
    6812:	43b9      	bics	r1, r7
    6814:	4331      	orrs	r1, r6
    6816:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6818:	7b9a      	ldrb	r2, [r3, #14]
    681a:	43aa      	bics	r2, r5
    681c:	4322      	orrs	r2, r4
    681e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    6820:	4a0f      	ldr	r2, [pc, #60]	; (6860 <Reset_Handler+0xd8>)
    6822:	6853      	ldr	r3, [r2, #4]
    6824:	2180      	movs	r1, #128	; 0x80
    6826:	430b      	orrs	r3, r1
    6828:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    682a:	4b0e      	ldr	r3, [pc, #56]	; (6864 <Reset_Handler+0xdc>)
    682c:	4798      	blx	r3
        main();
    682e:	4b0e      	ldr	r3, [pc, #56]	; (6868 <Reset_Handler+0xe0>)
    6830:	4798      	blx	r3
    6832:	e7fe      	b.n	6832 <Reset_Handler+0xaa>
    6834:	0000f5d8 	.word	0x0000f5d8
    6838:	20000000 	.word	0x20000000
    683c:	200002fc 	.word	0x200002fc
    6840:	20000004 	.word	0x20000004
    6844:	200002fc 	.word	0x200002fc
    6848:	200012bc 	.word	0x200012bc
    684c:	e000ed00 	.word	0xe000ed00
    6850:	00000000 	.word	0x00000000
    6854:	41007000 	.word	0x41007000
    6858:	41005000 	.word	0x41005000
    685c:	41004800 	.word	0x41004800
    6860:	41004000 	.word	0x41004000
    6864:	0000b7ad 	.word	0x0000b7ad
    6868:	0000b095 	.word	0x0000b095

0000686c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    686c:	b5f0      	push	{r4, r5, r6, r7, lr}
    686e:	46c6      	mov	lr, r8
    6870:	b500      	push	{lr}
    6872:	000c      	movs	r4, r1
    6874:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    6876:	2800      	cmp	r0, #0
    6878:	d10f      	bne.n	689a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    687a:	2a00      	cmp	r2, #0
    687c:	dd11      	ble.n	68a2 <_read+0x36>
    687e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    6880:	4e09      	ldr	r6, [pc, #36]	; (68a8 <_read+0x3c>)
    6882:	4d0a      	ldr	r5, [pc, #40]	; (68ac <_read+0x40>)
    6884:	6830      	ldr	r0, [r6, #0]
    6886:	0021      	movs	r1, r4
    6888:	682b      	ldr	r3, [r5, #0]
    688a:	4798      	blx	r3
		ptr++;
    688c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    688e:	42bc      	cmp	r4, r7
    6890:	d1f8      	bne.n	6884 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    6892:	4640      	mov	r0, r8
    6894:	bc04      	pop	{r2}
    6896:	4690      	mov	r8, r2
    6898:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    689a:	2301      	movs	r3, #1
    689c:	425b      	negs	r3, r3
    689e:	4698      	mov	r8, r3
    68a0:	e7f7      	b.n	6892 <_read+0x26>
	for (; len > 0; --len) {
    68a2:	4680      	mov	r8, r0
    68a4:	e7f5      	b.n	6892 <_read+0x26>
    68a6:	46c0      	nop			; (mov r8, r8)
    68a8:	20001080 	.word	0x20001080
    68ac:	20001078 	.word	0x20001078

000068b0 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    68b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68b2:	46c6      	mov	lr, r8
    68b4:	b500      	push	{lr}
    68b6:	000e      	movs	r6, r1
    68b8:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    68ba:	3801      	subs	r0, #1
    68bc:	2802      	cmp	r0, #2
    68be:	d810      	bhi.n	68e2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    68c0:	2a00      	cmp	r2, #0
    68c2:	d011      	beq.n	68e8 <_write+0x38>
    68c4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    68c6:	4b0c      	ldr	r3, [pc, #48]	; (68f8 <_write+0x48>)
    68c8:	4698      	mov	r8, r3
    68ca:	4f0c      	ldr	r7, [pc, #48]	; (68fc <_write+0x4c>)
    68cc:	4643      	mov	r3, r8
    68ce:	6818      	ldr	r0, [r3, #0]
    68d0:	5d31      	ldrb	r1, [r6, r4]
    68d2:	683b      	ldr	r3, [r7, #0]
    68d4:	4798      	blx	r3
    68d6:	2800      	cmp	r0, #0
    68d8:	db08      	blt.n	68ec <_write+0x3c>
			return -1;
		}
		++nChars;
    68da:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    68dc:	42a5      	cmp	r5, r4
    68de:	d1f5      	bne.n	68cc <_write+0x1c>
    68e0:	e006      	b.n	68f0 <_write+0x40>
		return -1;
    68e2:	2401      	movs	r4, #1
    68e4:	4264      	negs	r4, r4
    68e6:	e003      	b.n	68f0 <_write+0x40>
	for (; len != 0; --len) {
    68e8:	0014      	movs	r4, r2
    68ea:	e001      	b.n	68f0 <_write+0x40>
			return -1;
    68ec:	2401      	movs	r4, #1
    68ee:	4264      	negs	r4, r4
	}
	return nChars;
}
    68f0:	0020      	movs	r0, r4
    68f2:	bc04      	pop	{r2}
    68f4:	4690      	mov	r8, r2
    68f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68f8:	20001080 	.word	0x20001080
    68fc:	2000107c 	.word	0x2000107c

00006900 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6900:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6902:	4a06      	ldr	r2, [pc, #24]	; (691c <_sbrk+0x1c>)
    6904:	6812      	ldr	r2, [r2, #0]
    6906:	2a00      	cmp	r2, #0
    6908:	d004      	beq.n	6914 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    690a:	4a04      	ldr	r2, [pc, #16]	; (691c <_sbrk+0x1c>)
    690c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    690e:	18c3      	adds	r3, r0, r3
    6910:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    6912:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    6914:	4902      	ldr	r1, [pc, #8]	; (6920 <_sbrk+0x20>)
    6916:	4a01      	ldr	r2, [pc, #4]	; (691c <_sbrk+0x1c>)
    6918:	6011      	str	r1, [r2, #0]
    691a:	e7f6      	b.n	690a <_sbrk+0xa>
    691c:	200003f8 	.word	0x200003f8
    6920:	200032c0 	.word	0x200032c0

00006924 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    6924:	2001      	movs	r0, #1
    6926:	4240      	negs	r0, r0
    6928:	4770      	bx	lr

0000692a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    692a:	2380      	movs	r3, #128	; 0x80
    692c:	019b      	lsls	r3, r3, #6
    692e:	604b      	str	r3, [r1, #4]

	return 0;
}
    6930:	2000      	movs	r0, #0
    6932:	4770      	bx	lr

00006934 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6934:	2001      	movs	r0, #1
    6936:	4770      	bx	lr

00006938 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    6938:	2000      	movs	r0, #0
    693a:	4770      	bx	lr

0000693c <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    693c:	b530      	push	{r4, r5, lr}
    693e:	b087      	sub	sp, #28
    6940:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6942:	aa01      	add	r2, sp, #4
    6944:	23a0      	movs	r3, #160	; 0xa0
    6946:	011b      	lsls	r3, r3, #4
    6948:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    694a:	2300      	movs	r3, #0
    694c:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    694e:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    6950:	21fa      	movs	r1, #250	; 0xfa
    6952:	00c9      	lsls	r1, r1, #3
    6954:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    6956:	2101      	movs	r1, #1
    6958:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    695a:	2004      	movs	r0, #4
    695c:	7210      	strb	r0, [r2, #8]
    695e:	7253      	strb	r3, [r2, #9]
    6960:	7293      	strb	r3, [r2, #10]
    6962:	72d3      	strb	r3, [r2, #11]
    6964:	7311      	strb	r1, [r2, #12]
    6966:	7351      	strb	r1, [r2, #13]
    6968:	4b14      	ldr	r3, [pc, #80]	; (69bc <disk_initialize+0x80>)
    696a:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    696c:	2306      	movs	r3, #6
    696e:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    6970:	4d13      	ldr	r5, [pc, #76]	; (69c0 <disk_initialize+0x84>)
    6972:	4914      	ldr	r1, [pc, #80]	; (69c4 <disk_initialize+0x88>)
    6974:	0028      	movs	r0, r5
    6976:	4b14      	ldr	r3, [pc, #80]	; (69c8 <disk_initialize+0x8c>)
    6978:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    697a:	0028      	movs	r0, r5
    697c:	4b13      	ldr	r3, [pc, #76]	; (69cc <disk_initialize+0x90>)
    697e:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    6980:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    6982:	2c01      	cmp	r4, #1
    6984:	d901      	bls.n	698a <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    6986:	b007      	add	sp, #28
    6988:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    698a:	0020      	movs	r0, r4
    698c:	4b10      	ldr	r3, [pc, #64]	; (69d0 <disk_initialize+0x94>)
    698e:	4798      	blx	r3
    6990:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    6992:	2803      	cmp	r0, #3
    6994:	d106      	bne.n	69a4 <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    6996:	0020      	movs	r0, r4
    6998:	4b0d      	ldr	r3, [pc, #52]	; (69d0 <disk_initialize+0x94>)
    699a:	4798      	blx	r3
    699c:	0003      	movs	r3, r0
		return STA_NOINIT;
    699e:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    69a0:	2b03      	cmp	r3, #3
    69a2:	d0f0      	beq.n	6986 <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    69a4:	2b00      	cmp	r3, #0
    69a6:	d106      	bne.n	69b6 <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    69a8:	0020      	movs	r0, r4
    69aa:	4b0a      	ldr	r3, [pc, #40]	; (69d4 <disk_initialize+0x98>)
    69ac:	4798      	blx	r3
	return 0;
    69ae:	1e43      	subs	r3, r0, #1
    69b0:	4198      	sbcs	r0, r3
    69b2:	0080      	lsls	r0, r0, #2
    69b4:	e7e7      	b.n	6986 <disk_initialize+0x4a>
		return STA_NOINIT;
    69b6:	2001      	movs	r0, #1
    69b8:	e7e5      	b.n	6986 <disk_initialize+0x4a>
    69ba:	46c0      	nop			; (mov r8, r8)
    69bc:	000007de 	.word	0x000007de
    69c0:	20001084 	.word	0x20001084
    69c4:	40001400 	.word	0x40001400
    69c8:	000047b5 	.word	0x000047b5
    69cc:	00004651 	.word	0x00004651
    69d0:	0000405d 	.word	0x0000405d
    69d4:	00004099 	.word	0x00004099

000069d8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    69d8:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    69da:	4b05      	ldr	r3, [pc, #20]	; (69f0 <disk_status+0x18>)
    69dc:	4798      	blx	r3
    69de:	1e03      	subs	r3, r0, #0
    69e0:	d004      	beq.n	69ec <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    69e2:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    69e4:	2b02      	cmp	r3, #2
    69e6:	d000      	beq.n	69ea <disk_status+0x12>
	default:
		return STA_NOINIT;
    69e8:	3802      	subs	r0, #2
	}
}
    69ea:	bd10      	pop	{r4, pc}
		return 0;
    69ec:	2000      	movs	r0, #0
    69ee:	e7fc      	b.n	69ea <disk_status+0x12>
    69f0:	0000405d 	.word	0x0000405d

000069f4 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    69f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69f6:	46de      	mov	lr, fp
    69f8:	464f      	mov	r7, r9
    69fa:	4646      	mov	r6, r8
    69fc:	b5c0      	push	{r6, r7, lr}
    69fe:	b084      	sub	sp, #16
    6a00:	9001      	str	r0, [sp, #4]
    6a02:	000d      	movs	r5, r1
    6a04:	0014      	movs	r4, r2
    6a06:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6a08:	4b18      	ldr	r3, [pc, #96]	; (6a6c <disk_read+0x78>)
    6a0a:	4798      	blx	r3
    6a0c:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    6a0e:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    6a10:	2e00      	cmp	r6, #0
    6a12:	d105      	bne.n	6a20 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    6a14:	b004      	add	sp, #16
    6a16:	bc1c      	pop	{r2, r3, r4}
    6a18:	4690      	mov	r8, r2
    6a1a:	4699      	mov	r9, r3
    6a1c:	46a3      	mov	fp, r4
    6a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    6a20:	a903      	add	r1, sp, #12
    6a22:	9801      	ldr	r0, [sp, #4]
    6a24:	4b12      	ldr	r3, [pc, #72]	; (6a70 <disk_read+0x7c>)
    6a26:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6a28:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    6a2a:	0032      	movs	r2, r6
    6a2c:	437a      	muls	r2, r7
    6a2e:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    6a30:	9b03      	ldr	r3, [sp, #12]
    6a32:	3301      	adds	r3, #1
    6a34:	4373      	muls	r3, r6
		return RES_PARERR;
    6a36:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    6a38:	429a      	cmp	r2, r3
    6a3a:	d8eb      	bhi.n	6a14 <disk_read+0x20>
	for (i = 0; i < count; i++) {
    6a3c:	2f00      	cmp	r7, #0
    6a3e:	d011      	beq.n	6a64 <disk_read+0x70>
    6a40:	0273      	lsls	r3, r6, #9
    6a42:	4698      	mov	r8, r3
    6a44:	1c7b      	adds	r3, r7, #1
    6a46:	469b      	mov	fp, r3
    6a48:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6a4a:	4e0a      	ldr	r6, [pc, #40]	; (6a74 <disk_read+0x80>)
    6a4c:	002a      	movs	r2, r5
    6a4e:	0021      	movs	r1, r4
    6a50:	9801      	ldr	r0, [sp, #4]
    6a52:	47b0      	blx	r6
    6a54:	2800      	cmp	r0, #0
    6a56:	d107      	bne.n	6a68 <disk_read+0x74>
    6a58:	3701      	adds	r7, #1
    6a5a:	444c      	add	r4, r9
    6a5c:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    6a5e:	455f      	cmp	r7, fp
    6a60:	d1f4      	bne.n	6a4c <disk_read+0x58>
    6a62:	e7d7      	b.n	6a14 <disk_read+0x20>
	return RES_OK;
    6a64:	2000      	movs	r0, #0
    6a66:	e7d5      	b.n	6a14 <disk_read+0x20>
			return RES_ERROR;
    6a68:	2001      	movs	r0, #1
    6a6a:	e7d3      	b.n	6a14 <disk_read+0x20>
    6a6c:	00004091 	.word	0x00004091
    6a70:	00004075 	.word	0x00004075
    6a74:	000040b1 	.word	0x000040b1

00006a78 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    6a78:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a7a:	46de      	mov	lr, fp
    6a7c:	464f      	mov	r7, r9
    6a7e:	4646      	mov	r6, r8
    6a80:	b5c0      	push	{r6, r7, lr}
    6a82:	b084      	sub	sp, #16
    6a84:	9001      	str	r0, [sp, #4]
    6a86:	000d      	movs	r5, r1
    6a88:	0014      	movs	r4, r2
    6a8a:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6a8c:	4b18      	ldr	r3, [pc, #96]	; (6af0 <disk_write+0x78>)
    6a8e:	4798      	blx	r3
    6a90:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    6a92:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    6a94:	2e00      	cmp	r6, #0
    6a96:	d105      	bne.n	6aa4 <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    6a98:	b004      	add	sp, #16
    6a9a:	bc1c      	pop	{r2, r3, r4}
    6a9c:	4690      	mov	r8, r2
    6a9e:	4699      	mov	r9, r3
    6aa0:	46a3      	mov	fp, r4
    6aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    6aa4:	a903      	add	r1, sp, #12
    6aa6:	9801      	ldr	r0, [sp, #4]
    6aa8:	4b12      	ldr	r3, [pc, #72]	; (6af4 <disk_write+0x7c>)
    6aaa:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6aac:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    6aae:	0032      	movs	r2, r6
    6ab0:	437a      	muls	r2, r7
    6ab2:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    6ab4:	9b03      	ldr	r3, [sp, #12]
    6ab6:	3301      	adds	r3, #1
    6ab8:	4373      	muls	r3, r6
		return RES_PARERR;
    6aba:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    6abc:	429a      	cmp	r2, r3
    6abe:	d8eb      	bhi.n	6a98 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    6ac0:	2f00      	cmp	r7, #0
    6ac2:	d011      	beq.n	6ae8 <disk_write+0x70>
    6ac4:	0273      	lsls	r3, r6, #9
    6ac6:	4698      	mov	r8, r3
    6ac8:	1c7b      	adds	r3, r7, #1
    6aca:	469b      	mov	fp, r3
    6acc:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6ace:	4e0a      	ldr	r6, [pc, #40]	; (6af8 <disk_write+0x80>)
    6ad0:	002a      	movs	r2, r5
    6ad2:	0021      	movs	r1, r4
    6ad4:	9801      	ldr	r0, [sp, #4]
    6ad6:	47b0      	blx	r6
    6ad8:	2800      	cmp	r0, #0
    6ada:	d107      	bne.n	6aec <disk_write+0x74>
    6adc:	3701      	adds	r7, #1
    6ade:	444c      	add	r4, r9
    6ae0:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    6ae2:	455f      	cmp	r7, fp
    6ae4:	d1f4      	bne.n	6ad0 <disk_write+0x58>
    6ae6:	e7d7      	b.n	6a98 <disk_write+0x20>
	return RES_OK;
    6ae8:	2000      	movs	r0, #0
    6aea:	e7d5      	b.n	6a98 <disk_write+0x20>
			return RES_ERROR;
    6aec:	2001      	movs	r0, #1
    6aee:	e7d3      	b.n	6a98 <disk_write+0x20>
    6af0:	00004091 	.word	0x00004091
    6af4:	00004075 	.word	0x00004075
    6af8:	000040d1 	.word	0x000040d1

00006afc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    6afc:	b510      	push	{r4, lr}
    6afe:	b082      	sub	sp, #8
    6b00:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    6b02:	2901      	cmp	r1, #1
    6b04:	d00b      	beq.n	6b1e <disk_ioctl+0x22>
    6b06:	2900      	cmp	r1, #0
    6b08:	d020      	beq.n	6b4c <disk_ioctl+0x50>
    6b0a:	2902      	cmp	r1, #2
    6b0c:	d00f      	beq.n	6b2e <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    6b0e:	2004      	movs	r0, #4
	switch (ctrl) {
    6b10:	2903      	cmp	r1, #3
    6b12:	d102      	bne.n	6b1a <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    6b14:	2301      	movs	r3, #1
    6b16:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    6b18:	2000      	movs	r0, #0
	}

	return res;
}
    6b1a:	b002      	add	sp, #8
    6b1c:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    6b1e:	a901      	add	r1, sp, #4
    6b20:	4b0e      	ldr	r3, [pc, #56]	; (6b5c <disk_ioctl+0x60>)
    6b22:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    6b24:	9b01      	ldr	r3, [sp, #4]
    6b26:	3301      	adds	r3, #1
    6b28:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    6b2a:	2000      	movs	r0, #0
	break;
    6b2c:	e7f5      	b.n	6b1a <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    6b2e:	4b0c      	ldr	r3, [pc, #48]	; (6b60 <disk_ioctl+0x64>)
    6b30:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    6b32:	1e43      	subs	r3, r0, #1
    6b34:	b2db      	uxtb	r3, r3
    6b36:	2b01      	cmp	r3, #1
    6b38:	d904      	bls.n	6b44 <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6b3a:	1f03      	subs	r3, r0, #4
    6b3c:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    6b3e:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6b40:	4213      	tst	r3, r2
    6b42:	d1ea      	bne.n	6b1a <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    6b44:	2300      	movs	r3, #0
    6b46:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    6b48:	2000      	movs	r0, #0
	break;
    6b4a:	e7e6      	b.n	6b1a <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    6b4c:	4b05      	ldr	r3, [pc, #20]	; (6b64 <disk_ioctl+0x68>)
    6b4e:	4798      	blx	r3
    6b50:	2800      	cmp	r0, #0
    6b52:	d001      	beq.n	6b58 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    6b54:	2003      	movs	r0, #3
    6b56:	e7e0      	b.n	6b1a <disk_ioctl+0x1e>
			res = RES_OK;
    6b58:	2000      	movs	r0, #0
    6b5a:	e7de      	b.n	6b1a <disk_ioctl+0x1e>
    6b5c:	00004075 	.word	0x00004075
    6b60:	00004091 	.word	0x00004091
    6b64:	0000405d 	.word	0x0000405d

00006b68 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    6b68:	b500      	push	{lr}
    6b6a:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    6b6c:	4669      	mov	r1, sp
    6b6e:	480f      	ldr	r0, [pc, #60]	; (6bac <get_fattime+0x44>)
    6b70:	4b0f      	ldr	r3, [pc, #60]	; (6bb0 <get_fattime+0x48>)
    6b72:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    6b74:	466b      	mov	r3, sp
    6b76:	7958      	ldrb	r0, [r3, #5]
    6b78:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    6b7a:	791b      	ldrb	r3, [r3, #4]
    6b7c:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    6b7e:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    6b80:	466b      	mov	r3, sp
    6b82:	789b      	ldrb	r3, [r3, #2]
    6b84:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    6b86:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    6b88:	466b      	mov	r3, sp
    6b8a:	785b      	ldrb	r3, [r3, #1]
    6b8c:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    6b8e:	4318      	orrs	r0, r3
    6b90:	466b      	mov	r3, sp
    6b92:	781b      	ldrb	r3, [r3, #0]
    6b94:	085b      	lsrs	r3, r3, #1
    6b96:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    6b98:	466b      	mov	r3, sp
    6b9a:	88db      	ldrh	r3, [r3, #6]
    6b9c:	4a05      	ldr	r2, [pc, #20]	; (6bb4 <get_fattime+0x4c>)
    6b9e:	4694      	mov	ip, r2
    6ba0:	4463      	add	r3, ip
    6ba2:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    6ba4:	4318      	orrs	r0, r3

	return ul_time;
}
    6ba6:	b003      	add	sp, #12
    6ba8:	bd00      	pop	{pc}
    6baa:	46c0      	nop			; (mov r8, r8)
    6bac:	20001084 	.word	0x20001084
    6bb0:	0000473d 	.word	0x0000473d
    6bb4:	fffff844 	.word	0xfffff844

00006bb8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    6bb8:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    6bba:	2a00      	cmp	r2, #0
    6bbc:	d005      	beq.n	6bca <mem_cpy+0x12>
    6bbe:	2300      	movs	r3, #0
		*d++ = *s++;
    6bc0:	5ccc      	ldrb	r4, [r1, r3]
    6bc2:	54c4      	strb	r4, [r0, r3]
    6bc4:	3301      	adds	r3, #1
	while (cnt--)
    6bc6:	4293      	cmp	r3, r2
    6bc8:	d1fa      	bne.n	6bc0 <mem_cpy+0x8>
}
    6bca:	bd10      	pop	{r4, pc}

00006bcc <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    6bcc:	2a00      	cmp	r2, #0
    6bce:	d005      	beq.n	6bdc <mem_set+0x10>
    6bd0:	0003      	movs	r3, r0
    6bd2:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    6bd4:	7019      	strb	r1, [r3, #0]
    6bd6:	3301      	adds	r3, #1
	while (cnt--)
    6bd8:	4293      	cmp	r3, r2
    6bda:	d1fb      	bne.n	6bd4 <mem_set+0x8>
}
    6bdc:	4770      	bx	lr

00006bde <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    6bde:	0002      	movs	r2, r0
	clst -= 2;
    6be0:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    6be2:	6983      	ldr	r3, [r0, #24]
    6be4:	3b02      	subs	r3, #2
    6be6:	2000      	movs	r0, #0
    6be8:	4299      	cmp	r1, r3
    6bea:	d203      	bcs.n	6bf4 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    6bec:	7890      	ldrb	r0, [r2, #2]
    6bee:	4341      	muls	r1, r0
    6bf0:	6a90      	ldr	r0, [r2, #40]	; 0x28
    6bf2:	1808      	adds	r0, r1, r0
}
    6bf4:	4770      	bx	lr

00006bf6 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    6bf6:	0002      	movs	r2, r0
    6bf8:	0001      	movs	r1, r0
    6bfa:	310b      	adds	r1, #11
	BYTE sum = 0;
    6bfc:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    6bfe:	0843      	lsrs	r3, r0, #1
    6c00:	01c0      	lsls	r0, r0, #7
    6c02:	4303      	orrs	r3, r0
    6c04:	7810      	ldrb	r0, [r2, #0]
    6c06:	1818      	adds	r0, r3, r0
    6c08:	b2c0      	uxtb	r0, r0
    6c0a:	3201      	adds	r2, #1
    6c0c:	428a      	cmp	r2, r1
    6c0e:	d1f6      	bne.n	6bfe <sum_sfn+0x8>
	return sum;
}
    6c10:	4770      	bx	lr
	...

00006c14 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    6c14:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    6c16:	2800      	cmp	r0, #0
    6c18:	d010      	beq.n	6c3c <validate+0x28>
    6c1a:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    6c1c:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    6c1e:	2a00      	cmp	r2, #0
    6c20:	d101      	bne.n	6c26 <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    6c22:	0018      	movs	r0, r3
    6c24:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    6c26:	88c2      	ldrh	r2, [r0, #6]
    6c28:	428a      	cmp	r2, r1
    6c2a:	d1fa      	bne.n	6c22 <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    6c2c:	7840      	ldrb	r0, [r0, #1]
    6c2e:	4b04      	ldr	r3, [pc, #16]	; (6c40 <validate+0x2c>)
    6c30:	4798      	blx	r3
		return FR_NOT_READY;
    6c32:	2303      	movs	r3, #3
	return FR_OK;
    6c34:	07c0      	lsls	r0, r0, #31
    6c36:	17c0      	asrs	r0, r0, #31
    6c38:	4003      	ands	r3, r0
    6c3a:	e7f2      	b.n	6c22 <validate+0xe>
		return FR_INVALID_OBJECT;
    6c3c:	2309      	movs	r3, #9
    6c3e:	e7f0      	b.n	6c22 <validate+0xe>
    6c40:	000069d9 	.word	0x000069d9

00006c44 <check_fs>:
{
    6c44:	b570      	push	{r4, r5, r6, lr}
    6c46:	0004      	movs	r4, r0
    6c48:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6c4a:	0001      	movs	r1, r0
    6c4c:	3130      	adds	r1, #48	; 0x30
    6c4e:	7840      	ldrb	r0, [r0, #1]
    6c50:	2301      	movs	r3, #1
    6c52:	4d1f      	ldr	r5, [pc, #124]	; (6cd0 <check_fs+0x8c>)
    6c54:	47a8      	blx	r5
		return 3;
    6c56:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    6c58:	2800      	cmp	r0, #0
    6c5a:	d001      	beq.n	6c60 <check_fs+0x1c>
}
    6c5c:	0018      	movs	r0, r3
    6c5e:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6c60:	4b1c      	ldr	r3, [pc, #112]	; (6cd4 <check_fs+0x90>)
    6c62:	5ce3      	ldrb	r3, [r4, r3]
    6c64:	021b      	lsls	r3, r3, #8
    6c66:	4a1c      	ldr	r2, [pc, #112]	; (6cd8 <check_fs+0x94>)
    6c68:	5ca2      	ldrb	r2, [r4, r2]
    6c6a:	431a      	orrs	r2, r3
    6c6c:	491b      	ldr	r1, [pc, #108]	; (6cdc <check_fs+0x98>)
    6c6e:	b212      	sxth	r2, r2
		return 2;
    6c70:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    6c72:	428a      	cmp	r2, r1
    6c74:	d1f2      	bne.n	6c5c <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    6c76:	3367      	adds	r3, #103	; 0x67
    6c78:	5ce3      	ldrb	r3, [r4, r3]
    6c7a:	061b      	lsls	r3, r3, #24
    6c7c:	2268      	movs	r2, #104	; 0x68
    6c7e:	5ca2      	ldrb	r2, [r4, r2]
    6c80:	0412      	lsls	r2, r2, #16
    6c82:	4313      	orrs	r3, r2
    6c84:	2266      	movs	r2, #102	; 0x66
    6c86:	5ca2      	ldrb	r2, [r4, r2]
    6c88:	4313      	orrs	r3, r2
    6c8a:	2267      	movs	r2, #103	; 0x67
    6c8c:	5ca2      	ldrb	r2, [r4, r2]
    6c8e:	0212      	lsls	r2, r2, #8
    6c90:	4313      	orrs	r3, r2
    6c92:	021b      	lsls	r3, r3, #8
    6c94:	0a1b      	lsrs	r3, r3, #8
    6c96:	4a12      	ldr	r2, [pc, #72]	; (6ce0 <check_fs+0x9c>)
    6c98:	4293      	cmp	r3, r2
    6c9a:	d016      	beq.n	6cca <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    6c9c:	2385      	movs	r3, #133	; 0x85
    6c9e:	5ce3      	ldrb	r3, [r4, r3]
    6ca0:	061b      	lsls	r3, r3, #24
    6ca2:	2284      	movs	r2, #132	; 0x84
    6ca4:	5ca2      	ldrb	r2, [r4, r2]
    6ca6:	0412      	lsls	r2, r2, #16
    6ca8:	4313      	orrs	r3, r2
    6caa:	2282      	movs	r2, #130	; 0x82
    6cac:	5ca2      	ldrb	r2, [r4, r2]
    6cae:	4313      	orrs	r3, r2
    6cb0:	2283      	movs	r2, #131	; 0x83
    6cb2:	5ca2      	ldrb	r2, [r4, r2]
    6cb4:	0212      	lsls	r2, r2, #8
    6cb6:	4313      	orrs	r3, r2
    6cb8:	021b      	lsls	r3, r3, #8
    6cba:	0a1b      	lsrs	r3, r3, #8
    6cbc:	4a09      	ldr	r2, [pc, #36]	; (6ce4 <check_fs+0xa0>)
    6cbe:	4694      	mov	ip, r2
    6cc0:	4463      	add	r3, ip
    6cc2:	1e58      	subs	r0, r3, #1
    6cc4:	4183      	sbcs	r3, r0
		return 3;
    6cc6:	b2db      	uxtb	r3, r3
    6cc8:	e7c8      	b.n	6c5c <check_fs+0x18>
		return 0;
    6cca:	2300      	movs	r3, #0
    6ccc:	e7c6      	b.n	6c5c <check_fs+0x18>
    6cce:	46c0      	nop			; (mov r8, r8)
    6cd0:	000069f5 	.word	0x000069f5
    6cd4:	0000022f 	.word	0x0000022f
    6cd8:	0000022e 	.word	0x0000022e
    6cdc:	ffffaa55 	.word	0xffffaa55
    6ce0:	00544146 	.word	0x00544146
    6ce4:	ffabbeba 	.word	0xffabbeba

00006ce8 <chk_mounted>:
{
    6ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6cea:	46d6      	mov	lr, sl
    6cec:	464f      	mov	r7, r9
    6cee:	4646      	mov	r6, r8
    6cf0:	b5c0      	push	{r6, r7, lr}
    6cf2:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    6cf4:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    6cf6:	781c      	ldrb	r4, [r3, #0]
    6cf8:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    6cfa:	2c09      	cmp	r4, #9
    6cfc:	d80e      	bhi.n	6d1c <chk_mounted+0x34>
    6cfe:	785a      	ldrb	r2, [r3, #1]
    6d00:	2a3a      	cmp	r2, #58	; 0x3a
    6d02:	d001      	beq.n	6d08 <chk_mounted+0x20>
    6d04:	2400      	movs	r4, #0
    6d06:	e00a      	b.n	6d1e <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    6d08:	3302      	adds	r3, #2
    6d0a:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    6d0c:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    6d0e:	2c07      	cmp	r4, #7
    6d10:	d905      	bls.n	6d1e <chk_mounted+0x36>
}
    6d12:	bc1c      	pop	{r2, r3, r4}
    6d14:	4690      	mov	r8, r2
    6d16:	4699      	mov	r9, r3
    6d18:	46a2      	mov	sl, r4
    6d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d1c:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    6d1e:	00a3      	lsls	r3, r4, #2
    6d20:	4ac5      	ldr	r2, [pc, #788]	; (7038 <chk_mounted+0x350>)
    6d22:	589e      	ldr	r6, [r3, r2]
    6d24:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    6d26:	2e00      	cmp	r6, #0
    6d28:	d100      	bne.n	6d2c <chk_mounted+0x44>
    6d2a:	e0e8      	b.n	6efe <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    6d2c:	7833      	ldrb	r3, [r6, #0]
    6d2e:	2b00      	cmp	r3, #0
    6d30:	d00d      	beq.n	6d4e <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    6d32:	7870      	ldrb	r0, [r6, #1]
    6d34:	4bc1      	ldr	r3, [pc, #772]	; (703c <chk_mounted+0x354>)
    6d36:	4798      	blx	r3
    6d38:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    6d3a:	07c2      	lsls	r2, r0, #31
    6d3c:	d407      	bmi.n	6d4e <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    6d3e:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    6d40:	2d00      	cmp	r5, #0
    6d42:	d0e6      	beq.n	6d12 <chk_mounted+0x2a>
    6d44:	075b      	lsls	r3, r3, #29
    6d46:	d400      	bmi.n	6d4a <chk_mounted+0x62>
    6d48:	e0db      	b.n	6f02 <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    6d4a:	300a      	adds	r0, #10
    6d4c:	e7e1      	b.n	6d12 <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    6d4e:	2300      	movs	r3, #0
    6d50:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    6d52:	b2e0      	uxtb	r0, r4
    6d54:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    6d56:	4bba      	ldr	r3, [pc, #744]	; (7040 <chk_mounted+0x358>)
    6d58:	4798      	blx	r3
    6d5a:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    6d5c:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    6d5e:	07da      	lsls	r2, r3, #31
    6d60:	d4d7      	bmi.n	6d12 <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6d62:	2d00      	cmp	r5, #0
    6d64:	d002      	beq.n	6d6c <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    6d66:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    6d68:	075b      	lsls	r3, r3, #29
    6d6a:	d4d2      	bmi.n	6d12 <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    6d6c:	2100      	movs	r1, #0
    6d6e:	0030      	movs	r0, r6
    6d70:	4bb4      	ldr	r3, [pc, #720]	; (7044 <chk_mounted+0x35c>)
    6d72:	4798      	blx	r3
    6d74:	0003      	movs	r3, r0
    6d76:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    6d78:	2801      	cmp	r0, #1
    6d7a:	d100      	bne.n	6d7e <chk_mounted+0x96>
    6d7c:	e09a      	b.n	6eb4 <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    6d7e:	2b03      	cmp	r3, #3
    6d80:	d100      	bne.n	6d84 <chk_mounted+0x9c>
    6d82:	e0c0      	b.n	6f06 <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6d84:	200d      	movs	r0, #13
    6d86:	2b00      	cmp	r3, #0
    6d88:	d1c3      	bne.n	6d12 <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    6d8a:	333c      	adds	r3, #60	; 0x3c
    6d8c:	5cf2      	ldrb	r2, [r6, r3]
    6d8e:	0212      	lsls	r2, r2, #8
    6d90:	3b01      	subs	r3, #1
    6d92:	5cf3      	ldrb	r3, [r6, r3]
    6d94:	4313      	orrs	r3, r2
    6d96:	2280      	movs	r2, #128	; 0x80
    6d98:	0092      	lsls	r2, r2, #2
    6d9a:	b21b      	sxth	r3, r3
    6d9c:	4293      	cmp	r3, r2
    6d9e:	d1b8      	bne.n	6d12 <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    6da0:	2347      	movs	r3, #71	; 0x47
    6da2:	5cf3      	ldrb	r3, [r6, r3]
    6da4:	021b      	lsls	r3, r3, #8
    6da6:	3abb      	subs	r2, #187	; 0xbb
    6da8:	3aff      	subs	r2, #255	; 0xff
    6daa:	5cb5      	ldrb	r5, [r6, r2]
    6dac:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    6dae:	d10d      	bne.n	6dcc <chk_mounted+0xe4>
    6db0:	2357      	movs	r3, #87	; 0x57
    6db2:	5cf5      	ldrb	r5, [r6, r3]
    6db4:	062d      	lsls	r5, r5, #24
    6db6:	3b01      	subs	r3, #1
    6db8:	5cf3      	ldrb	r3, [r6, r3]
    6dba:	041b      	lsls	r3, r3, #16
    6dbc:	431d      	orrs	r5, r3
    6dbe:	2354      	movs	r3, #84	; 0x54
    6dc0:	5cf3      	ldrb	r3, [r6, r3]
    6dc2:	431d      	orrs	r5, r3
    6dc4:	2355      	movs	r3, #85	; 0x55
    6dc6:	5cf3      	ldrb	r3, [r6, r3]
    6dc8:	021b      	lsls	r3, r3, #8
    6dca:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    6dcc:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    6dce:	2340      	movs	r3, #64	; 0x40
    6dd0:	5cf2      	ldrb	r2, [r6, r3]
    6dd2:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    6dd4:	1e53      	subs	r3, r2, #1
    6dd6:	200d      	movs	r0, #13
    6dd8:	2b01      	cmp	r3, #1
    6dda:	d89a      	bhi.n	6d12 <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    6ddc:	233d      	movs	r3, #61	; 0x3d
    6dde:	5cf1      	ldrb	r1, [r6, r3]
    6de0:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    6de2:	2900      	cmp	r1, #0
    6de4:	d095      	beq.n	6d12 <chk_mounted+0x2a>
    6de6:	1e4b      	subs	r3, r1, #1
    6de8:	4219      	tst	r1, r3
    6dea:	d192      	bne.n	6d12 <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    6dec:	2342      	movs	r3, #66	; 0x42
    6dee:	5cf3      	ldrb	r3, [r6, r3]
    6df0:	021b      	lsls	r3, r3, #8
    6df2:	3034      	adds	r0, #52	; 0x34
    6df4:	5c30      	ldrb	r0, [r6, r0]
    6df6:	4318      	orrs	r0, r3
    6df8:	4680      	mov	r8, r0
    6dfa:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    6dfc:	200d      	movs	r0, #13
    6dfe:	4643      	mov	r3, r8
    6e00:	071b      	lsls	r3, r3, #28
    6e02:	d000      	beq.n	6e06 <chk_mounted+0x11e>
    6e04:	e785      	b.n	6d12 <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    6e06:	2344      	movs	r3, #68	; 0x44
    6e08:	5cf3      	ldrb	r3, [r6, r3]
    6e0a:	021b      	lsls	r3, r3, #8
    6e0c:	3036      	adds	r0, #54	; 0x36
    6e0e:	5c30      	ldrb	r0, [r6, r0]
    6e10:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    6e12:	d10d      	bne.n	6e30 <chk_mounted+0x148>
    6e14:	3353      	adds	r3, #83	; 0x53
    6e16:	5cf3      	ldrb	r3, [r6, r3]
    6e18:	061b      	lsls	r3, r3, #24
    6e1a:	2052      	movs	r0, #82	; 0x52
    6e1c:	5c30      	ldrb	r0, [r6, r0]
    6e1e:	0400      	lsls	r0, r0, #16
    6e20:	4303      	orrs	r3, r0
    6e22:	2050      	movs	r0, #80	; 0x50
    6e24:	5c30      	ldrb	r0, [r6, r0]
    6e26:	4303      	orrs	r3, r0
    6e28:	2051      	movs	r0, #81	; 0x51
    6e2a:	5c30      	ldrb	r0, [r6, r0]
    6e2c:	0200      	lsls	r0, r0, #8
    6e2e:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    6e30:	203f      	movs	r0, #63	; 0x3f
    6e32:	5c30      	ldrb	r0, [r6, r0]
    6e34:	0200      	lsls	r0, r0, #8
    6e36:	273e      	movs	r7, #62	; 0x3e
    6e38:	5df7      	ldrb	r7, [r6, r7]
    6e3a:	4307      	orrs	r7, r0
    6e3c:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    6e3e:	200d      	movs	r0, #13
    6e40:	2f00      	cmp	r7, #0
    6e42:	d100      	bne.n	6e46 <chk_mounted+0x15e>
    6e44:	e765      	b.n	6d12 <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    6e46:	436a      	muls	r2, r5
    6e48:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    6e4a:	4642      	mov	r2, r8
    6e4c:	0917      	lsrs	r7, r2, #4
    6e4e:	4457      	add	r7, sl
    6e50:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    6e52:	42bb      	cmp	r3, r7
    6e54:	d200      	bcs.n	6e58 <chk_mounted+0x170>
    6e56:	e75c      	b.n	6d12 <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    6e58:	1bd8      	subs	r0, r3, r7
    6e5a:	4b7b      	ldr	r3, [pc, #492]	; (7048 <chk_mounted+0x360>)
    6e5c:	4798      	blx	r3
    6e5e:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    6e60:	200d      	movs	r0, #13
    6e62:	2b00      	cmp	r3, #0
    6e64:	d100      	bne.n	6e68 <chk_mounted+0x180>
    6e66:	e754      	b.n	6d12 <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    6e68:	4a78      	ldr	r2, [pc, #480]	; (704c <chk_mounted+0x364>)
	fmt = FS_FAT12;
    6e6a:	429a      	cmp	r2, r3
    6e6c:	4192      	sbcs	r2, r2
    6e6e:	4252      	negs	r2, r2
    6e70:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    6e72:	4977      	ldr	r1, [pc, #476]	; (7050 <chk_mounted+0x368>)
    6e74:	428b      	cmp	r3, r1
    6e76:	d848      	bhi.n	6f0a <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6e78:	3302      	adds	r3, #2
    6e7a:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    6e7c:	19e7      	adds	r7, r4, r7
    6e7e:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    6e80:	4454      	add	r4, sl
    6e82:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    6e84:	200d      	movs	r0, #13
    6e86:	4641      	mov	r1, r8
    6e88:	2900      	cmp	r1, #0
    6e8a:	d100      	bne.n	6e8e <chk_mounted+0x1a6>
    6e8c:	e741      	b.n	6d12 <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    6e8e:	444c      	add	r4, r9
    6e90:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    6e92:	2a02      	cmp	r2, #2
    6e94:	d12c      	bne.n	6ef0 <chk_mounted+0x208>
    6e96:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6e98:	496e      	ldr	r1, [pc, #440]	; (7054 <chk_mounted+0x36c>)
    6e9a:	468c      	mov	ip, r1
    6e9c:	4463      	add	r3, ip
    6e9e:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    6ea0:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6ea2:	429d      	cmp	r5, r3
    6ea4:	d200      	bcs.n	6ea8 <chk_mounted+0x1c0>
    6ea6:	e734      	b.n	6d12 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    6ea8:	2301      	movs	r3, #1
    6eaa:	425b      	negs	r3, r3
    6eac:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    6eae:	2300      	movs	r3, #0
    6eb0:	60f3      	str	r3, [r6, #12]
    6eb2:	e0b6      	b.n	7022 <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    6eb4:	33f2      	adds	r3, #242	; 0xf2
    6eb6:	33ff      	adds	r3, #255	; 0xff
    6eb8:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    6eba:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    6ebc:	2b00      	cmp	r3, #0
    6ebe:	d100      	bne.n	6ec2 <chk_mounted+0x1da>
    6ec0:	e727      	b.n	6d12 <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    6ec2:	23fa      	movs	r3, #250	; 0xfa
    6ec4:	33ff      	adds	r3, #255	; 0xff
    6ec6:	5cf4      	ldrb	r4, [r6, r3]
    6ec8:	0624      	lsls	r4, r4, #24
    6eca:	3b01      	subs	r3, #1
    6ecc:	5cf3      	ldrb	r3, [r6, r3]
    6ece:	041b      	lsls	r3, r3, #16
    6ed0:	431c      	orrs	r4, r3
    6ed2:	23fb      	movs	r3, #251	; 0xfb
    6ed4:	005b      	lsls	r3, r3, #1
    6ed6:	5cf3      	ldrb	r3, [r6, r3]
    6ed8:	431c      	orrs	r4, r3
    6eda:	23f8      	movs	r3, #248	; 0xf8
    6edc:	33ff      	adds	r3, #255	; 0xff
    6ede:	5cf2      	ldrb	r2, [r6, r3]
    6ee0:	0212      	lsls	r2, r2, #8
    6ee2:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    6ee4:	0021      	movs	r1, r4
    6ee6:	0030      	movs	r0, r6
    6ee8:	4b56      	ldr	r3, [pc, #344]	; (7044 <chk_mounted+0x35c>)
    6eea:	4798      	blx	r3
    6eec:	0003      	movs	r3, r0
    6eee:	e746      	b.n	6d7e <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    6ef0:	2103      	movs	r1, #3
    6ef2:	4359      	muls	r1, r3
    6ef4:	0849      	lsrs	r1, r1, #1
    6ef6:	2001      	movs	r0, #1
    6ef8:	4003      	ands	r3, r0
    6efa:	18cb      	adds	r3, r1, r3
    6efc:	e7cc      	b.n	6e98 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    6efe:	200c      	movs	r0, #12
    6f00:	e707      	b.n	6d12 <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    6f02:	2000      	movs	r0, #0
    6f04:	e705      	b.n	6d12 <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    6f06:	2001      	movs	r0, #1
    6f08:	e703      	b.n	6d12 <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    6f0a:	3302      	adds	r3, #2
    6f0c:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    6f0e:	19e7      	adds	r7, r4, r7
    6f10:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    6f12:	4652      	mov	r2, sl
    6f14:	18a2      	adds	r2, r4, r2
    6f16:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    6f18:	200d      	movs	r0, #13
    6f1a:	4642      	mov	r2, r8
    6f1c:	2a00      	cmp	r2, #0
    6f1e:	d000      	beq.n	6f22 <chk_mounted+0x23a>
    6f20:	e6f7      	b.n	6d12 <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    6f22:	225f      	movs	r2, #95	; 0x5f
    6f24:	5cb2      	ldrb	r2, [r6, r2]
    6f26:	0612      	lsls	r2, r2, #24
    6f28:	215e      	movs	r1, #94	; 0x5e
    6f2a:	5c71      	ldrb	r1, [r6, r1]
    6f2c:	0409      	lsls	r1, r1, #16
    6f2e:	430a      	orrs	r2, r1
    6f30:	215c      	movs	r1, #92	; 0x5c
    6f32:	5c71      	ldrb	r1, [r6, r1]
    6f34:	430a      	orrs	r2, r1
    6f36:	215d      	movs	r1, #93	; 0x5d
    6f38:	5c71      	ldrb	r1, [r6, r1]
    6f3a:	0209      	lsls	r1, r1, #8
    6f3c:	430a      	orrs	r2, r1
    6f3e:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    6f40:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6f42:	4a44      	ldr	r2, [pc, #272]	; (7054 <chk_mounted+0x36c>)
    6f44:	4694      	mov	ip, r2
    6f46:	4463      	add	r3, ip
    6f48:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    6f4a:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    6f4c:	429d      	cmp	r5, r3
    6f4e:	d200      	bcs.n	6f52 <chk_mounted+0x26a>
    6f50:	e6df      	b.n	6d12 <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    6f52:	2301      	movs	r3, #1
    6f54:	425b      	negs	r3, r3
    6f56:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    6f58:	2300      	movs	r3, #0
    6f5a:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    6f5c:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    6f5e:	3361      	adds	r3, #97	; 0x61
    6f60:	5cf3      	ldrb	r3, [r6, r3]
    6f62:	021b      	lsls	r3, r3, #8
    6f64:	2260      	movs	r2, #96	; 0x60
    6f66:	5cb2      	ldrb	r2, [r6, r2]
    6f68:	431a      	orrs	r2, r3
    6f6a:	1912      	adds	r2, r2, r4
    6f6c:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    6f6e:	0031      	movs	r1, r6
    6f70:	3130      	adds	r1, #48	; 0x30
    6f72:	7870      	ldrb	r0, [r6, #1]
    6f74:	2301      	movs	r3, #1
    6f76:	4c38      	ldr	r4, [pc, #224]	; (7058 <chk_mounted+0x370>)
    6f78:	47a0      	blx	r4
    6f7a:	2203      	movs	r2, #3
    6f7c:	2800      	cmp	r0, #0
    6f7e:	d150      	bne.n	7022 <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    6f80:	4b36      	ldr	r3, [pc, #216]	; (705c <chk_mounted+0x374>)
    6f82:	5cf2      	ldrb	r2, [r6, r3]
    6f84:	0212      	lsls	r2, r2, #8
    6f86:	4b36      	ldr	r3, [pc, #216]	; (7060 <chk_mounted+0x378>)
    6f88:	5cf3      	ldrb	r3, [r6, r3]
    6f8a:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    6f8c:	4935      	ldr	r1, [pc, #212]	; (7064 <chk_mounted+0x37c>)
    6f8e:	b21b      	sxth	r3, r3
    6f90:	2203      	movs	r2, #3
    6f92:	428b      	cmp	r3, r1
    6f94:	d145      	bne.n	7022 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    6f96:	2333      	movs	r3, #51	; 0x33
    6f98:	5cf3      	ldrb	r3, [r6, r3]
    6f9a:	061b      	lsls	r3, r3, #24
    6f9c:	322f      	adds	r2, #47	; 0x2f
    6f9e:	5cb2      	ldrb	r2, [r6, r2]
    6fa0:	0412      	lsls	r2, r2, #16
    6fa2:	4313      	orrs	r3, r2
    6fa4:	2230      	movs	r2, #48	; 0x30
    6fa6:	5cb2      	ldrb	r2, [r6, r2]
    6fa8:	4313      	orrs	r3, r2
    6faa:	2231      	movs	r2, #49	; 0x31
    6fac:	5cb2      	ldrb	r2, [r6, r2]
    6fae:	0212      	lsls	r2, r2, #8
    6fb0:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    6fb2:	492d      	ldr	r1, [pc, #180]	; (7068 <chk_mounted+0x380>)
    6fb4:	2203      	movs	r2, #3
    6fb6:	428b      	cmp	r3, r1
    6fb8:	d133      	bne.n	7022 <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    6fba:	4b2c      	ldr	r3, [pc, #176]	; (706c <chk_mounted+0x384>)
    6fbc:	5cf3      	ldrb	r3, [r6, r3]
    6fbe:	061b      	lsls	r3, r3, #24
    6fc0:	4a2b      	ldr	r2, [pc, #172]	; (7070 <chk_mounted+0x388>)
    6fc2:	5cb2      	ldrb	r2, [r6, r2]
    6fc4:	0412      	lsls	r2, r2, #16
    6fc6:	4313      	orrs	r3, r2
    6fc8:	2285      	movs	r2, #133	; 0x85
    6fca:	0092      	lsls	r2, r2, #2
    6fcc:	5cb2      	ldrb	r2, [r6, r2]
    6fce:	4313      	orrs	r3, r2
    6fd0:	4a28      	ldr	r2, [pc, #160]	; (7074 <chk_mounted+0x38c>)
    6fd2:	5cb2      	ldrb	r2, [r6, r2]
    6fd4:	0212      	lsls	r2, r2, #8
    6fd6:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    6fd8:	4927      	ldr	r1, [pc, #156]	; (7078 <chk_mounted+0x390>)
    6fda:	2203      	movs	r2, #3
    6fdc:	428b      	cmp	r3, r1
    6fde:	d120      	bne.n	7022 <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    6fe0:	4b26      	ldr	r3, [pc, #152]	; (707c <chk_mounted+0x394>)
    6fe2:	5cf3      	ldrb	r3, [r6, r3]
    6fe4:	061b      	lsls	r3, r3, #24
    6fe6:	4a26      	ldr	r2, [pc, #152]	; (7080 <chk_mounted+0x398>)
    6fe8:	5cb2      	ldrb	r2, [r6, r2]
    6fea:	0412      	lsls	r2, r2, #16
    6fec:	4313      	orrs	r3, r2
    6fee:	2287      	movs	r2, #135	; 0x87
    6ff0:	0092      	lsls	r2, r2, #2
    6ff2:	5cb2      	ldrb	r2, [r6, r2]
    6ff4:	4313      	orrs	r3, r2
    6ff6:	4a23      	ldr	r2, [pc, #140]	; (7084 <chk_mounted+0x39c>)
    6ff8:	5cb2      	ldrb	r2, [r6, r2]
    6ffa:	0212      	lsls	r2, r2, #8
    6ffc:	4313      	orrs	r3, r2
    6ffe:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    7000:	4b21      	ldr	r3, [pc, #132]	; (7088 <chk_mounted+0x3a0>)
    7002:	5cf3      	ldrb	r3, [r6, r3]
    7004:	061b      	lsls	r3, r3, #24
    7006:	4a21      	ldr	r2, [pc, #132]	; (708c <chk_mounted+0x3a4>)
    7008:	5cb2      	ldrb	r2, [r6, r2]
    700a:	0412      	lsls	r2, r2, #16
    700c:	4313      	orrs	r3, r2
    700e:	2286      	movs	r2, #134	; 0x86
    7010:	0092      	lsls	r2, r2, #2
    7012:	5cb2      	ldrb	r2, [r6, r2]
    7014:	4313      	orrs	r3, r2
    7016:	4a1e      	ldr	r2, [pc, #120]	; (7090 <chk_mounted+0x3a8>)
    7018:	5cb2      	ldrb	r2, [r6, r2]
    701a:	0212      	lsls	r2, r2, #8
    701c:	4313      	orrs	r3, r2
    701e:	6133      	str	r3, [r6, #16]
    7020:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    7022:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    7024:	4a1b      	ldr	r2, [pc, #108]	; (7094 <chk_mounted+0x3ac>)
    7026:	8813      	ldrh	r3, [r2, #0]
    7028:	3301      	adds	r3, #1
    702a:	b29b      	uxth	r3, r3
    702c:	8013      	strh	r3, [r2, #0]
    702e:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    7030:	2000      	movs	r0, #0
    7032:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    7034:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    7036:	e66c      	b.n	6d12 <chk_mounted+0x2a>
    7038:	200003fc 	.word	0x200003fc
    703c:	000069d9 	.word	0x000069d9
    7040:	0000693d 	.word	0x0000693d
    7044:	00006c45 	.word	0x00006c45
    7048:	0000b461 	.word	0x0000b461
    704c:	00000ff5 	.word	0x00000ff5
    7050:	0000fff5 	.word	0x0000fff5
    7054:	000001ff 	.word	0x000001ff
    7058:	000069f5 	.word	0x000069f5
    705c:	0000022f 	.word	0x0000022f
    7060:	0000022e 	.word	0x0000022e
    7064:	ffffaa55 	.word	0xffffaa55
    7068:	41615252 	.word	0x41615252
    706c:	00000217 	.word	0x00000217
    7070:	00000216 	.word	0x00000216
    7074:	00000215 	.word	0x00000215
    7078:	61417272 	.word	0x61417272
    707c:	0000021f 	.word	0x0000021f
    7080:	0000021e 	.word	0x0000021e
    7084:	0000021d 	.word	0x0000021d
    7088:	0000021b 	.word	0x0000021b
    708c:	0000021a 	.word	0x0000021a
    7090:	00000219 	.word	0x00000219
    7094:	2000041c 	.word	0x2000041c

00007098 <move_window>:
{
    7098:	b5f0      	push	{r4, r5, r6, r7, lr}
    709a:	46ce      	mov	lr, r9
    709c:	b500      	push	{lr}
    709e:	b082      	sub	sp, #8
    70a0:	0004      	movs	r4, r0
    70a2:	000f      	movs	r7, r1
	wsect = fs->winsect;
    70a4:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    70a6:	428d      	cmp	r5, r1
    70a8:	d03f      	beq.n	712a <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    70aa:	7903      	ldrb	r3, [r0, #4]
    70ac:	2b00      	cmp	r3, #0
    70ae:	d107      	bne.n	70c0 <move_window+0x28>
	return FR_OK;
    70b0:	2300      	movs	r3, #0
		if (sector) {
    70b2:	2f00      	cmp	r7, #0
    70b4:	d12c      	bne.n	7110 <move_window+0x78>
}
    70b6:	0018      	movs	r0, r3
    70b8:	b002      	add	sp, #8
    70ba:	bc04      	pop	{r2}
    70bc:	4691      	mov	r9, r2
    70be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    70c0:	2330      	movs	r3, #48	; 0x30
    70c2:	469c      	mov	ip, r3
    70c4:	4484      	add	ip, r0
    70c6:	4663      	mov	r3, ip
    70c8:	4661      	mov	r1, ip
    70ca:	9301      	str	r3, [sp, #4]
    70cc:	7840      	ldrb	r0, [r0, #1]
    70ce:	2301      	movs	r3, #1
    70d0:	002a      	movs	r2, r5
    70d2:	4e17      	ldr	r6, [pc, #92]	; (7130 <move_window+0x98>)
    70d4:	47b0      	blx	r6
				return FR_DISK_ERR;
    70d6:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    70d8:	2800      	cmp	r0, #0
    70da:	d1ec      	bne.n	70b6 <move_window+0x1e>
			fs->wflag = 0;
    70dc:	2300      	movs	r3, #0
    70de:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    70e0:	6a23      	ldr	r3, [r4, #32]
    70e2:	69e2      	ldr	r2, [r4, #28]
    70e4:	4694      	mov	ip, r2
    70e6:	4463      	add	r3, ip
    70e8:	429d      	cmp	r5, r3
    70ea:	d2e1      	bcs.n	70b0 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    70ec:	78e6      	ldrb	r6, [r4, #3]
    70ee:	2e01      	cmp	r6, #1
    70f0:	d9de      	bls.n	70b0 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    70f2:	4b0f      	ldr	r3, [pc, #60]	; (7130 <move_window+0x98>)
    70f4:	4699      	mov	r9, r3
					wsect += fs->fsize;
    70f6:	69e3      	ldr	r3, [r4, #28]
    70f8:	469c      	mov	ip, r3
    70fa:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    70fc:	7860      	ldrb	r0, [r4, #1]
    70fe:	2301      	movs	r3, #1
    7100:	002a      	movs	r2, r5
    7102:	9901      	ldr	r1, [sp, #4]
    7104:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7106:	3e01      	subs	r6, #1
    7108:	b2f6      	uxtb	r6, r6
    710a:	2e01      	cmp	r6, #1
    710c:	d1f3      	bne.n	70f6 <move_window+0x5e>
    710e:	e7cf      	b.n	70b0 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7110:	0021      	movs	r1, r4
    7112:	3130      	adds	r1, #48	; 0x30
    7114:	7860      	ldrb	r0, [r4, #1]
    7116:	3301      	adds	r3, #1
    7118:	003a      	movs	r2, r7
    711a:	4d06      	ldr	r5, [pc, #24]	; (7134 <move_window+0x9c>)
    711c:	47a8      	blx	r5
				return FR_DISK_ERR;
    711e:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    7120:	2800      	cmp	r0, #0
    7122:	d1c8      	bne.n	70b6 <move_window+0x1e>
			fs->winsect = sector;
    7124:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    7126:	2300      	movs	r3, #0
    7128:	e7c5      	b.n	70b6 <move_window+0x1e>
    712a:	2300      	movs	r3, #0
    712c:	e7c3      	b.n	70b6 <move_window+0x1e>
    712e:	46c0      	nop			; (mov r8, r8)
    7130:	00006a79 	.word	0x00006a79
    7134:	000069f5 	.word	0x000069f5

00007138 <get_fat>:
{
    7138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    713a:	0005      	movs	r5, r0
    713c:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    713e:	2901      	cmp	r1, #1
    7140:	d974      	bls.n	722c <get_fat+0xf4>
		return 1;
    7142:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    7144:	69ab      	ldr	r3, [r5, #24]
    7146:	4299      	cmp	r1, r3
    7148:	d271      	bcs.n	722e <get_fat+0xf6>
	switch (fs->fs_type) {
    714a:	782b      	ldrb	r3, [r5, #0]
    714c:	2b02      	cmp	r3, #2
    714e:	d034      	beq.n	71ba <get_fat+0x82>
    7150:	2b03      	cmp	r3, #3
    7152:	d049      	beq.n	71e8 <get_fat+0xb0>
    7154:	2b01      	cmp	r3, #1
    7156:	d002      	beq.n	715e <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7158:	2001      	movs	r0, #1
    715a:	4240      	negs	r0, r0
    715c:	e067      	b.n	722e <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    715e:	084e      	lsrs	r6, r1, #1
    7160:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7162:	0a71      	lsrs	r1, r6, #9
    7164:	6a2b      	ldr	r3, [r5, #32]
    7166:	469c      	mov	ip, r3
    7168:	4461      	add	r1, ip
    716a:	0028      	movs	r0, r5
    716c:	4b30      	ldr	r3, [pc, #192]	; (7230 <get_fat+0xf8>)
    716e:	4798      	blx	r3
    7170:	2800      	cmp	r0, #0
    7172:	d002      	beq.n	717a <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7174:	2001      	movs	r0, #1
    7176:	4240      	negs	r0, r0
    7178:	e059      	b.n	722e <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    717a:	05f3      	lsls	r3, r6, #23
    717c:	0ddb      	lsrs	r3, r3, #23
    717e:	18eb      	adds	r3, r5, r3
    7180:	3330      	adds	r3, #48	; 0x30
    7182:	781f      	ldrb	r7, [r3, #0]
    7184:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7186:	0a71      	lsrs	r1, r6, #9
    7188:	6a2b      	ldr	r3, [r5, #32]
    718a:	469c      	mov	ip, r3
    718c:	4461      	add	r1, ip
    718e:	0028      	movs	r0, r5
    7190:	4b27      	ldr	r3, [pc, #156]	; (7230 <get_fat+0xf8>)
    7192:	4798      	blx	r3
    7194:	2800      	cmp	r0, #0
    7196:	d002      	beq.n	719e <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    7198:	2001      	movs	r0, #1
    719a:	4240      	negs	r0, r0
    719c:	e047      	b.n	722e <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    719e:	05f6      	lsls	r6, r6, #23
    71a0:	0df6      	lsrs	r6, r6, #23
    71a2:	19ad      	adds	r5, r5, r6
    71a4:	3530      	adds	r5, #48	; 0x30
    71a6:	7828      	ldrb	r0, [r5, #0]
    71a8:	0200      	lsls	r0, r0, #8
    71aa:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    71ac:	07e3      	lsls	r3, r4, #31
    71ae:	d501      	bpl.n	71b4 <get_fat+0x7c>
    71b0:	0900      	lsrs	r0, r0, #4
    71b2:	e03c      	b.n	722e <get_fat+0xf6>
    71b4:	0500      	lsls	r0, r0, #20
    71b6:	0d00      	lsrs	r0, r0, #20
    71b8:	e039      	b.n	722e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    71ba:	0a09      	lsrs	r1, r1, #8
    71bc:	6a2b      	ldr	r3, [r5, #32]
    71be:	469c      	mov	ip, r3
    71c0:	4461      	add	r1, ip
    71c2:	0028      	movs	r0, r5
    71c4:	4b1a      	ldr	r3, [pc, #104]	; (7230 <get_fat+0xf8>)
    71c6:	4798      	blx	r3
    71c8:	2800      	cmp	r0, #0
    71ca:	d002      	beq.n	71d2 <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    71cc:	2001      	movs	r0, #1
    71ce:	4240      	negs	r0, r0
    71d0:	e02d      	b.n	722e <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    71d2:	0064      	lsls	r4, r4, #1
    71d4:	23ff      	movs	r3, #255	; 0xff
    71d6:	005b      	lsls	r3, r3, #1
    71d8:	401c      	ands	r4, r3
		return LD_WORD(p);
    71da:	192d      	adds	r5, r5, r4
    71dc:	3530      	adds	r5, #48	; 0x30
    71de:	786b      	ldrb	r3, [r5, #1]
    71e0:	021b      	lsls	r3, r3, #8
    71e2:	7828      	ldrb	r0, [r5, #0]
    71e4:	4318      	orrs	r0, r3
    71e6:	e022      	b.n	722e <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    71e8:	09c9      	lsrs	r1, r1, #7
    71ea:	6a2b      	ldr	r3, [r5, #32]
    71ec:	469c      	mov	ip, r3
    71ee:	4461      	add	r1, ip
    71f0:	0028      	movs	r0, r5
    71f2:	4b0f      	ldr	r3, [pc, #60]	; (7230 <get_fat+0xf8>)
    71f4:	4798      	blx	r3
    71f6:	2800      	cmp	r0, #0
    71f8:	d002      	beq.n	7200 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    71fa:	2001      	movs	r0, #1
    71fc:	4240      	negs	r0, r0
    71fe:	e016      	b.n	722e <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    7200:	00a4      	lsls	r4, r4, #2
    7202:	23fe      	movs	r3, #254	; 0xfe
    7204:	005b      	lsls	r3, r3, #1
    7206:	401c      	ands	r4, r3
    7208:	0023      	movs	r3, r4
    720a:	3330      	adds	r3, #48	; 0x30
    720c:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    720e:	78d8      	ldrb	r0, [r3, #3]
    7210:	0600      	lsls	r0, r0, #24
    7212:	789a      	ldrb	r2, [r3, #2]
    7214:	0412      	lsls	r2, r2, #16
    7216:	4310      	orrs	r0, r2
    7218:	192c      	adds	r4, r5, r4
    721a:	3430      	adds	r4, #48	; 0x30
    721c:	7822      	ldrb	r2, [r4, #0]
    721e:	4310      	orrs	r0, r2
    7220:	785b      	ldrb	r3, [r3, #1]
    7222:	021b      	lsls	r3, r3, #8
    7224:	4318      	orrs	r0, r3
    7226:	0100      	lsls	r0, r0, #4
    7228:	0900      	lsrs	r0, r0, #4
    722a:	e000      	b.n	722e <get_fat+0xf6>
		return 1;
    722c:	2001      	movs	r0, #1
}
    722e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7230:	00007099 	.word	0x00007099

00007234 <dir_sdi>:
{
    7234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7236:	0004      	movs	r4, r0
    7238:	000d      	movs	r5, r1
	dj->index = idx;
    723a:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    723c:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    723e:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    7240:	2901      	cmp	r1, #1
    7242:	d003      	beq.n	724c <dir_sdi+0x18>
    7244:	6823      	ldr	r3, [r4, #0]
    7246:	699a      	ldr	r2, [r3, #24]
    7248:	4291      	cmp	r1, r2
    724a:	d300      	bcc.n	724e <dir_sdi+0x1a>
}
    724c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    724e:	2900      	cmp	r1, #0
    7250:	d119      	bne.n	7286 <dir_sdi+0x52>
    7252:	781a      	ldrb	r2, [r3, #0]
    7254:	2a03      	cmp	r2, #3
    7256:	d013      	beq.n	7280 <dir_sdi+0x4c>
		dj->clust = clst;
    7258:	2200      	movs	r2, #0
    725a:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    725c:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    725e:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    7260:	42aa      	cmp	r2, r5
    7262:	d9f3      	bls.n	724c <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7264:	092a      	lsrs	r2, r5, #4
    7266:	b292      	uxth	r2, r2
    7268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    726a:	189b      	adds	r3, r3, r2
    726c:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    726e:	6823      	ldr	r3, [r4, #0]
    7270:	3330      	adds	r3, #48	; 0x30
    7272:	220f      	movs	r2, #15
    7274:	4015      	ands	r5, r2
    7276:	016d      	lsls	r5, r5, #5
    7278:	195d      	adds	r5, r3, r5
    727a:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    727c:	2000      	movs	r0, #0
    727e:	e7e5      	b.n	724c <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    7280:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    7282:	2900      	cmp	r1, #0
    7284:	d0e8      	beq.n	7258 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    7286:	789e      	ldrb	r6, [r3, #2]
    7288:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    728a:	42b5      	cmp	r5, r6
    728c:	d313      	bcc.n	72b6 <dir_sdi+0x82>
    728e:	1bad      	subs	r5, r5, r6
    7290:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    7292:	4f10      	ldr	r7, [pc, #64]	; (72d4 <dir_sdi+0xa0>)
    7294:	e000      	b.n	7298 <dir_sdi+0x64>
    7296:	001d      	movs	r5, r3
    7298:	6820      	ldr	r0, [r4, #0]
    729a:	47b8      	blx	r7
    729c:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    729e:	1c43      	adds	r3, r0, #1
    72a0:	d012      	beq.n	72c8 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    72a2:	2801      	cmp	r0, #1
    72a4:	d912      	bls.n	72cc <dir_sdi+0x98>
    72a6:	6823      	ldr	r3, [r4, #0]
    72a8:	699b      	ldr	r3, [r3, #24]
    72aa:	4298      	cmp	r0, r3
    72ac:	d210      	bcs.n	72d0 <dir_sdi+0x9c>
    72ae:	1bab      	subs	r3, r5, r6
    72b0:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    72b2:	42b5      	cmp	r5, r6
    72b4:	d2ef      	bcs.n	7296 <dir_sdi+0x62>
		dj->clust = clst;
    72b6:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    72b8:	6820      	ldr	r0, [r4, #0]
    72ba:	4b07      	ldr	r3, [pc, #28]	; (72d8 <dir_sdi+0xa4>)
    72bc:	4798      	blx	r3
    72be:	092b      	lsrs	r3, r5, #4
    72c0:	b29b      	uxth	r3, r3
    72c2:	1818      	adds	r0, r3, r0
    72c4:	6120      	str	r0, [r4, #16]
    72c6:	e7d2      	b.n	726e <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    72c8:	2001      	movs	r0, #1
    72ca:	e7bf      	b.n	724c <dir_sdi+0x18>
				return FR_INT_ERR;
    72cc:	2002      	movs	r0, #2
    72ce:	e7bd      	b.n	724c <dir_sdi+0x18>
    72d0:	2002      	movs	r0, #2
    72d2:	e7bb      	b.n	724c <dir_sdi+0x18>
    72d4:	00007139 	.word	0x00007139
    72d8:	00006bdf 	.word	0x00006bdf

000072dc <put_fat>:
{
    72dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    72de:	46c6      	mov	lr, r8
    72e0:	b500      	push	{lr}
    72e2:	0007      	movs	r7, r0
    72e4:	000c      	movs	r4, r1
    72e6:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    72e8:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    72ea:	2901      	cmp	r1, #1
    72ec:	d902      	bls.n	72f4 <put_fat+0x18>
    72ee:	6983      	ldr	r3, [r0, #24]
    72f0:	4299      	cmp	r1, r3
    72f2:	d303      	bcc.n	72fc <put_fat+0x20>
}
    72f4:	0028      	movs	r0, r5
    72f6:	bc04      	pop	{r2}
    72f8:	4690      	mov	r8, r2
    72fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    72fc:	7803      	ldrb	r3, [r0, #0]
    72fe:	2b02      	cmp	r3, #2
    7300:	d053      	beq.n	73aa <put_fat+0xce>
    7302:	2b03      	cmp	r3, #3
    7304:	d063      	beq.n	73ce <put_fat+0xf2>
			res = FR_INT_ERR;
    7306:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    7308:	2b01      	cmp	r3, #1
    730a:	d002      	beq.n	7312 <put_fat+0x36>
		fs->wflag = 1;
    730c:	2301      	movs	r3, #1
    730e:	713b      	strb	r3, [r7, #4]
    7310:	e7f0      	b.n	72f4 <put_fat+0x18>
			bc = clst; bc += bc / 2;
    7312:	084b      	lsrs	r3, r1, #1
    7314:	4698      	mov	r8, r3
    7316:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7318:	4643      	mov	r3, r8
    731a:	0a59      	lsrs	r1, r3, #9
    731c:	6a03      	ldr	r3, [r0, #32]
    731e:	469c      	mov	ip, r3
    7320:	4461      	add	r1, ip
    7322:	4b3b      	ldr	r3, [pc, #236]	; (7410 <put_fat+0x134>)
    7324:	4798      	blx	r3
    7326:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    7328:	d1f0      	bne.n	730c <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    732a:	4643      	mov	r3, r8
    732c:	05db      	lsls	r3, r3, #23
    732e:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7330:	07e2      	lsls	r2, r4, #31
    7332:	d51f      	bpl.n	7374 <put_fat+0x98>
    7334:	18fb      	adds	r3, r7, r3
    7336:	3330      	adds	r3, #48	; 0x30
    7338:	7819      	ldrb	r1, [r3, #0]
    733a:	220f      	movs	r2, #15
    733c:	400a      	ands	r2, r1
    733e:	0131      	lsls	r1, r6, #4
    7340:	20ff      	movs	r0, #255	; 0xff
    7342:	0100      	lsls	r0, r0, #4
    7344:	4001      	ands	r1, r0
    7346:	430a      	orrs	r2, r1
    7348:	701a      	strb	r2, [r3, #0]
			bc++;
    734a:	4644      	mov	r4, r8
    734c:	3401      	adds	r4, #1
			fs->wflag = 1;
    734e:	2301      	movs	r3, #1
    7350:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7352:	0a61      	lsrs	r1, r4, #9
    7354:	6a3b      	ldr	r3, [r7, #32]
    7356:	469c      	mov	ip, r3
    7358:	4461      	add	r1, ip
    735a:	0038      	movs	r0, r7
    735c:	4b2c      	ldr	r3, [pc, #176]	; (7410 <put_fat+0x134>)
    735e:	4798      	blx	r3
			if (res != FR_OK) break;
    7360:	2800      	cmp	r0, #0
    7362:	d151      	bne.n	7408 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    7364:	05e4      	lsls	r4, r4, #23
    7366:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7368:	0936      	lsrs	r6, r6, #4
    736a:	b2f6      	uxtb	r6, r6
    736c:	193c      	adds	r4, r7, r4
    736e:	3430      	adds	r4, #48	; 0x30
    7370:	7026      	strb	r6, [r4, #0]
			break;
    7372:	e7cb      	b.n	730c <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    7374:	18fb      	adds	r3, r7, r3
    7376:	3330      	adds	r3, #48	; 0x30
    7378:	701e      	strb	r6, [r3, #0]
			bc++;
    737a:	4644      	mov	r4, r8
    737c:	3401      	adds	r4, #1
			fs->wflag = 1;
    737e:	2301      	movs	r3, #1
    7380:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7382:	0a61      	lsrs	r1, r4, #9
    7384:	6a3b      	ldr	r3, [r7, #32]
    7386:	469c      	mov	ip, r3
    7388:	4461      	add	r1, ip
    738a:	0038      	movs	r0, r7
    738c:	4b20      	ldr	r3, [pc, #128]	; (7410 <put_fat+0x134>)
    738e:	4798      	blx	r3
			if (res != FR_OK) break;
    7390:	2800      	cmp	r0, #0
    7392:	d13b      	bne.n	740c <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    7394:	05e4      	lsls	r4, r4, #23
    7396:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    7398:	193b      	adds	r3, r7, r4
    739a:	3330      	adds	r3, #48	; 0x30
    739c:	781b      	ldrb	r3, [r3, #0]
    739e:	220f      	movs	r2, #15
    73a0:	4393      	bics	r3, r2
    73a2:	0536      	lsls	r6, r6, #20
    73a4:	0f36      	lsrs	r6, r6, #28
    73a6:	431e      	orrs	r6, r3
    73a8:	e7e0      	b.n	736c <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    73aa:	0a09      	lsrs	r1, r1, #8
    73ac:	6a03      	ldr	r3, [r0, #32]
    73ae:	469c      	mov	ip, r3
    73b0:	4461      	add	r1, ip
    73b2:	4b17      	ldr	r3, [pc, #92]	; (7410 <put_fat+0x134>)
    73b4:	4798      	blx	r3
    73b6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    73b8:	d1a8      	bne.n	730c <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    73ba:	0063      	lsls	r3, r4, #1
    73bc:	24ff      	movs	r4, #255	; 0xff
    73be:	0064      	lsls	r4, r4, #1
    73c0:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    73c2:	18fb      	adds	r3, r7, r3
    73c4:	3330      	adds	r3, #48	; 0x30
    73c6:	701e      	strb	r6, [r3, #0]
    73c8:	0a36      	lsrs	r6, r6, #8
    73ca:	705e      	strb	r6, [r3, #1]
			break;
    73cc:	e79e      	b.n	730c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    73ce:	09c9      	lsrs	r1, r1, #7
    73d0:	6a03      	ldr	r3, [r0, #32]
    73d2:	469c      	mov	ip, r3
    73d4:	4461      	add	r1, ip
    73d6:	4b0e      	ldr	r3, [pc, #56]	; (7410 <put_fat+0x134>)
    73d8:	4798      	blx	r3
    73da:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    73dc:	d196      	bne.n	730c <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    73de:	00a4      	lsls	r4, r4, #2
    73e0:	23fe      	movs	r3, #254	; 0xfe
    73e2:	005b      	lsls	r3, r3, #1
    73e4:	401c      	ands	r4, r3
    73e6:	0022      	movs	r2, r4
    73e8:	3230      	adds	r2, #48	; 0x30
    73ea:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    73ec:	78d3      	ldrb	r3, [r2, #3]
    73ee:	193c      	adds	r4, r7, r4
    73f0:	3430      	adds	r4, #48	; 0x30
    73f2:	091b      	lsrs	r3, r3, #4
    73f4:	071b      	lsls	r3, r3, #28
    73f6:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    73f8:	7026      	strb	r6, [r4, #0]
    73fa:	0a33      	lsrs	r3, r6, #8
    73fc:	7053      	strb	r3, [r2, #1]
    73fe:	0c33      	lsrs	r3, r6, #16
    7400:	7093      	strb	r3, [r2, #2]
    7402:	0e36      	lsrs	r6, r6, #24
    7404:	70d6      	strb	r6, [r2, #3]
			break;
    7406:	e781      	b.n	730c <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    7408:	0005      	movs	r5, r0
    740a:	e77f      	b.n	730c <put_fat+0x30>
    740c:	0005      	movs	r5, r0
    740e:	e77d      	b.n	730c <put_fat+0x30>
    7410:	00007099 	.word	0x00007099

00007414 <create_chain>:
{
    7414:	b5f0      	push	{r4, r5, r6, r7, lr}
    7416:	46c6      	mov	lr, r8
    7418:	b500      	push	{lr}
    741a:	0005      	movs	r5, r0
    741c:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    741e:	2900      	cmp	r1, #0
    7420:	d107      	bne.n	7432 <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    7422:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7424:	2e00      	cmp	r6, #0
    7426:	d00d      	beq.n	7444 <create_chain+0x30>
    7428:	6983      	ldr	r3, [r0, #24]
    742a:	429e      	cmp	r6, r3
    742c:	d30b      	bcc.n	7446 <create_chain+0x32>
    742e:	2601      	movs	r6, #1
    7430:	e009      	b.n	7446 <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7432:	4b26      	ldr	r3, [pc, #152]	; (74cc <create_chain+0xb8>)
    7434:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7436:	2801      	cmp	r0, #1
    7438:	d93d      	bls.n	74b6 <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    743a:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    743c:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    743e:	4298      	cmp	r0, r3
    7440:	d201      	bcs.n	7446 <create_chain+0x32>
    7442:	e03d      	b.n	74c0 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    7444:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    7446:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    7448:	4f20      	ldr	r7, [pc, #128]	; (74cc <create_chain+0xb8>)
    744a:	e00a      	b.n	7462 <create_chain+0x4e>
    744c:	0021      	movs	r1, r4
    744e:	0028      	movs	r0, r5
    7450:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    7452:	2800      	cmp	r0, #0
    7454:	d00d      	beq.n	7472 <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    7456:	1c43      	adds	r3, r0, #1
    7458:	d032      	beq.n	74c0 <create_chain+0xac>
    745a:	2801      	cmp	r0, #1
    745c:	d030      	beq.n	74c0 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    745e:	42b4      	cmp	r4, r6
    7460:	d02d      	beq.n	74be <create_chain+0xaa>
		ncl++;							/* Next cluster */
    7462:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7464:	69ab      	ldr	r3, [r5, #24]
    7466:	429c      	cmp	r4, r3
    7468:	d3f0      	bcc.n	744c <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    746a:	2e01      	cmp	r6, #1
    746c:	d925      	bls.n	74ba <create_chain+0xa6>
			ncl = 2;
    746e:	2402      	movs	r4, #2
    7470:	e7ec      	b.n	744c <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    7472:	4a17      	ldr	r2, [pc, #92]	; (74d0 <create_chain+0xbc>)
    7474:	0021      	movs	r1, r4
    7476:	0028      	movs	r0, r5
    7478:	4b16      	ldr	r3, [pc, #88]	; (74d4 <create_chain+0xc0>)
    747a:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    747c:	2800      	cmp	r0, #0
    747e:	d113      	bne.n	74a8 <create_chain+0x94>
    7480:	4643      	mov	r3, r8
    7482:	2b00      	cmp	r3, #0
    7484:	d109      	bne.n	749a <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    7486:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    7488:	692b      	ldr	r3, [r5, #16]
    748a:	1c5a      	adds	r2, r3, #1
    748c:	d01b      	beq.n	74c6 <create_chain+0xb2>
			fs->free_clust--;
    748e:	3b01      	subs	r3, #1
    7490:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    7492:	2301      	movs	r3, #1
    7494:	716b      	strb	r3, [r5, #5]
    7496:	0020      	movs	r0, r4
    7498:	e012      	b.n	74c0 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    749a:	0022      	movs	r2, r4
    749c:	4641      	mov	r1, r8
    749e:	0028      	movs	r0, r5
    74a0:	4b0c      	ldr	r3, [pc, #48]	; (74d4 <create_chain+0xc0>)
    74a2:	4798      	blx	r3
	if (res == FR_OK) {
    74a4:	2800      	cmp	r0, #0
    74a6:	d0ee      	beq.n	7486 <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    74a8:	3801      	subs	r0, #1
    74aa:	4242      	negs	r2, r0
    74ac:	4142      	adcs	r2, r0
    74ae:	4250      	negs	r0, r2
    74b0:	2301      	movs	r3, #1
    74b2:	4318      	orrs	r0, r3
    74b4:	e004      	b.n	74c0 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    74b6:	2001      	movs	r0, #1
    74b8:	e002      	b.n	74c0 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    74ba:	2000      	movs	r0, #0
    74bc:	e000      	b.n	74c0 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    74be:	2000      	movs	r0, #0
}
    74c0:	bc04      	pop	{r2}
    74c2:	4690      	mov	r8, r2
    74c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74c6:	0020      	movs	r0, r4
    74c8:	e7fa      	b.n	74c0 <create_chain+0xac>
    74ca:	46c0      	nop			; (mov r8, r8)
    74cc:	00007139 	.word	0x00007139
    74d0:	0fffffff 	.word	0x0fffffff
    74d4:	000072dd 	.word	0x000072dd

000074d8 <remove_chain>:
{
    74d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74da:	46ce      	mov	lr, r9
    74dc:	4647      	mov	r7, r8
    74de:	b580      	push	{r7, lr}
    74e0:	0004      	movs	r4, r0
    74e2:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    74e4:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    74e6:	2901      	cmp	r1, #1
    74e8:	d902      	bls.n	74f0 <remove_chain+0x18>
    74ea:	69a3      	ldr	r3, [r4, #24]
    74ec:	4299      	cmp	r1, r3
    74ee:	d303      	bcc.n	74f8 <remove_chain+0x20>
}
    74f0:	bc0c      	pop	{r2, r3}
    74f2:	4690      	mov	r8, r2
    74f4:	4699      	mov	r9, r3
    74f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    74f8:	4f13      	ldr	r7, [pc, #76]	; (7548 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    74fa:	4b14      	ldr	r3, [pc, #80]	; (754c <remove_chain+0x74>)
    74fc:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    74fe:	2301      	movs	r3, #1
    7500:	4699      	mov	r9, r3
    7502:	e003      	b.n	750c <remove_chain+0x34>
    7504:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7506:	69a3      	ldr	r3, [r4, #24]
    7508:	42b3      	cmp	r3, r6
    750a:	d9f1      	bls.n	74f0 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    750c:	0029      	movs	r1, r5
    750e:	0020      	movs	r0, r4
    7510:	47b8      	blx	r7
    7512:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    7514:	d011      	beq.n	753a <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    7516:	2801      	cmp	r0, #1
    7518:	d011      	beq.n	753e <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    751a:	1c43      	adds	r3, r0, #1
    751c:	d011      	beq.n	7542 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    751e:	2200      	movs	r2, #0
    7520:	0029      	movs	r1, r5
    7522:	0020      	movs	r0, r4
    7524:	47c0      	blx	r8
			if (res != FR_OK) break;
    7526:	2800      	cmp	r0, #0
    7528:	d1e2      	bne.n	74f0 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    752a:	6923      	ldr	r3, [r4, #16]
    752c:	1c5a      	adds	r2, r3, #1
    752e:	d0e9      	beq.n	7504 <remove_chain+0x2c>
				fs->free_clust++;
    7530:	3301      	adds	r3, #1
    7532:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    7534:	464b      	mov	r3, r9
    7536:	7163      	strb	r3, [r4, #5]
    7538:	e7e4      	b.n	7504 <remove_chain+0x2c>
    753a:	2000      	movs	r0, #0
    753c:	e7d8      	b.n	74f0 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    753e:	2002      	movs	r0, #2
    7540:	e7d6      	b.n	74f0 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    7542:	2001      	movs	r0, #1
    7544:	e7d4      	b.n	74f0 <remove_chain+0x18>
    7546:	46c0      	nop			; (mov r8, r8)
    7548:	00007139 	.word	0x00007139
    754c:	000072dd 	.word	0x000072dd

00007550 <dir_next>:
{
    7550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7552:	46d6      	mov	lr, sl
    7554:	4647      	mov	r7, r8
    7556:	b580      	push	{r7, lr}
    7558:	0006      	movs	r6, r0
    755a:	000d      	movs	r5, r1
	i = dj->index + 1;
    755c:	88c4      	ldrh	r4, [r0, #6]
    755e:	3401      	adds	r4, #1
    7560:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    7562:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7564:	2c00      	cmp	r4, #0
    7566:	d103      	bne.n	7570 <dir_next+0x20>
}
    7568:	bc0c      	pop	{r2, r3}
    756a:	4690      	mov	r8, r2
    756c:	469a      	mov	sl, r3
    756e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7570:	6933      	ldr	r3, [r6, #16]
    7572:	2b00      	cmp	r3, #0
    7574:	d0f8      	beq.n	7568 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7576:	270f      	movs	r7, #15
    7578:	4027      	ands	r7, r4
    757a:	d10f      	bne.n	759c <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    757c:	3301      	adds	r3, #1
    757e:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    7580:	68f1      	ldr	r1, [r6, #12]
    7582:	2900      	cmp	r1, #0
    7584:	d104      	bne.n	7590 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7586:	6833      	ldr	r3, [r6, #0]
    7588:	891b      	ldrh	r3, [r3, #8]
    758a:	42a3      	cmp	r3, r4
    758c:	d9ec      	bls.n	7568 <dir_next+0x18>
    758e:	e005      	b.n	759c <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7590:	6830      	ldr	r0, [r6, #0]
    7592:	7883      	ldrb	r3, [r0, #2]
    7594:	3b01      	subs	r3, #1
    7596:	0922      	lsrs	r2, r4, #4
    7598:	421a      	tst	r2, r3
    759a:	d007      	beq.n	75ac <dir_next+0x5c>
	dj->index = i;
    759c:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    759e:	6833      	ldr	r3, [r6, #0]
    75a0:	3330      	adds	r3, #48	; 0x30
    75a2:	017f      	lsls	r7, r7, #5
    75a4:	19df      	adds	r7, r3, r7
    75a6:	6177      	str	r7, [r6, #20]
	return FR_OK;
    75a8:	2000      	movs	r0, #0
    75aa:	e7dd      	b.n	7568 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    75ac:	4b2c      	ldr	r3, [pc, #176]	; (7660 <dir_next+0x110>)
    75ae:	4798      	blx	r3
    75b0:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    75b2:	2002      	movs	r0, #2
    75b4:	4643      	mov	r3, r8
    75b6:	2b01      	cmp	r3, #1
    75b8:	d9d6      	bls.n	7568 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    75ba:	3301      	adds	r3, #1
    75bc:	d04b      	beq.n	7656 <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    75be:	6833      	ldr	r3, [r6, #0]
    75c0:	699a      	ldr	r2, [r3, #24]
    75c2:	4590      	cmp	r8, r2
    75c4:	d33f      	bcc.n	7646 <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    75c6:	3002      	adds	r0, #2
    75c8:	2d00      	cmp	r5, #0
    75ca:	d0cd      	beq.n	7568 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    75cc:	68f1      	ldr	r1, [r6, #12]
    75ce:	0018      	movs	r0, r3
    75d0:	4b24      	ldr	r3, [pc, #144]	; (7664 <dir_next+0x114>)
    75d2:	4798      	blx	r3
    75d4:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    75d6:	2007      	movs	r0, #7
    75d8:	4643      	mov	r3, r8
    75da:	2b00      	cmp	r3, #0
    75dc:	d0c4      	beq.n	7568 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    75de:	3805      	subs	r0, #5
    75e0:	2b01      	cmp	r3, #1
    75e2:	d0c1      	beq.n	7568 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    75e4:	3801      	subs	r0, #1
    75e6:	3301      	adds	r3, #1
    75e8:	d0be      	beq.n	7568 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    75ea:	2100      	movs	r1, #0
    75ec:	6830      	ldr	r0, [r6, #0]
    75ee:	4b1e      	ldr	r3, [pc, #120]	; (7668 <dir_next+0x118>)
    75f0:	4798      	blx	r3
    75f2:	0003      	movs	r3, r0
    75f4:	2001      	movs	r0, #1
    75f6:	2b00      	cmp	r3, #0
    75f8:	d1b6      	bne.n	7568 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    75fa:	6830      	ldr	r0, [r6, #0]
    75fc:	3030      	adds	r0, #48	; 0x30
    75fe:	2280      	movs	r2, #128	; 0x80
    7600:	0092      	lsls	r2, r2, #2
    7602:	2100      	movs	r1, #0
    7604:	4b19      	ldr	r3, [pc, #100]	; (766c <dir_next+0x11c>)
    7606:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7608:	6835      	ldr	r5, [r6, #0]
    760a:	4641      	mov	r1, r8
    760c:	0028      	movs	r0, r5
    760e:	4b18      	ldr	r3, [pc, #96]	; (7670 <dir_next+0x120>)
    7610:	4798      	blx	r3
    7612:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7614:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    7616:	2301      	movs	r3, #1
    7618:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    761a:	6833      	ldr	r3, [r6, #0]
    761c:	789a      	ldrb	r2, [r3, #2]
    761e:	42aa      	cmp	r2, r5
    7620:	d90e      	bls.n	7640 <dir_next+0xf0>
						dj->fs->wflag = 1;
    7622:	4652      	mov	r2, sl
    7624:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7626:	2100      	movs	r1, #0
    7628:	6830      	ldr	r0, [r6, #0]
    762a:	4b0f      	ldr	r3, [pc, #60]	; (7668 <dir_next+0x118>)
    762c:	4798      	blx	r3
    762e:	2800      	cmp	r0, #0
    7630:	d113      	bne.n	765a <dir_next+0x10a>
						dj->fs->winsect++;
    7632:	6832      	ldr	r2, [r6, #0]
    7634:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7636:	3301      	adds	r3, #1
    7638:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    763a:	3501      	adds	r5, #1
    763c:	b2ed      	uxtb	r5, r5
    763e:	e7ec      	b.n	761a <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    7640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7642:	1b52      	subs	r2, r2, r5
    7644:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    7646:	4643      	mov	r3, r8
    7648:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    764a:	4641      	mov	r1, r8
    764c:	6830      	ldr	r0, [r6, #0]
    764e:	4b08      	ldr	r3, [pc, #32]	; (7670 <dir_next+0x120>)
    7650:	4798      	blx	r3
    7652:	6130      	str	r0, [r6, #16]
    7654:	e7a2      	b.n	759c <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7656:	2001      	movs	r0, #1
    7658:	e786      	b.n	7568 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    765a:	2001      	movs	r0, #1
    765c:	e784      	b.n	7568 <dir_next+0x18>
    765e:	46c0      	nop			; (mov r8, r8)
    7660:	00007139 	.word	0x00007139
    7664:	00007415 	.word	0x00007415
    7668:	00007099 	.word	0x00007099
    766c:	00006bcd 	.word	0x00006bcd
    7670:	00006bdf 	.word	0x00006bdf

00007674 <dir_find>:
{
    7674:	b5f0      	push	{r4, r5, r6, r7, lr}
    7676:	46de      	mov	lr, fp
    7678:	4657      	mov	r7, sl
    767a:	464e      	mov	r6, r9
    767c:	4645      	mov	r5, r8
    767e:	b5e0      	push	{r5, r6, r7, lr}
    7680:	b083      	sub	sp, #12
    7682:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    7684:	2100      	movs	r1, #0
    7686:	4b5a      	ldr	r3, [pc, #360]	; (77f0 <dir_find+0x17c>)
    7688:	4798      	blx	r3
    768a:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    768c:	d000      	beq.n	7690 <dir_find+0x1c>
    768e:	e09e      	b.n	77ce <dir_find+0x15a>
    7690:	23ff      	movs	r3, #255	; 0xff
    7692:	4699      	mov	r9, r3
    7694:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    7696:	4b57      	ldr	r3, [pc, #348]	; (77f4 <dir_find+0x180>)
    7698:	469b      	mov	fp, r3
    769a:	e01b      	b.n	76d4 <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    769c:	2b0f      	cmp	r3, #15
    769e:	d030      	beq.n	7702 <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    76a0:	4653      	mov	r3, sl
    76a2:	2b00      	cmp	r3, #0
    76a4:	d105      	bne.n	76b2 <dir_find+0x3e>
    76a6:	0020      	movs	r0, r4
    76a8:	4b53      	ldr	r3, [pc, #332]	; (77f8 <dir_find+0x184>)
    76aa:	4798      	blx	r3
    76ac:	4581      	cmp	r9, r0
    76ae:	d100      	bne.n	76b2 <dir_find+0x3e>
    76b0:	e08d      	b.n	77ce <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    76b2:	2301      	movs	r3, #1
    76b4:	425b      	negs	r3, r3
    76b6:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    76b8:	69a8      	ldr	r0, [r5, #24]
    76ba:	7ac3      	ldrb	r3, [r0, #11]
    76bc:	07db      	lsls	r3, r3, #31
    76be:	d400      	bmi.n	76c2 <dir_find+0x4e>
    76c0:	e07d      	b.n	77be <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    76c2:	23ff      	movs	r3, #255	; 0xff
    76c4:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    76c6:	2100      	movs	r1, #0
    76c8:	0028      	movs	r0, r5
    76ca:	4b4c      	ldr	r3, [pc, #304]	; (77fc <dir_find+0x188>)
    76cc:	4798      	blx	r3
    76ce:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    76d0:	d000      	beq.n	76d4 <dir_find+0x60>
    76d2:	e07c      	b.n	77ce <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    76d4:	6929      	ldr	r1, [r5, #16]
    76d6:	6828      	ldr	r0, [r5, #0]
    76d8:	47d8      	blx	fp
    76da:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    76dc:	d177      	bne.n	77ce <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    76de:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    76e0:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    76e2:	2e00      	cmp	r6, #0
    76e4:	d100      	bne.n	76e8 <dir_find+0x74>
    76e6:	e080      	b.n	77ea <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    76e8:	7ae2      	ldrb	r2, [r4, #11]
    76ea:	233f      	movs	r3, #63	; 0x3f
    76ec:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    76ee:	2ee5      	cmp	r6, #229	; 0xe5
    76f0:	d100      	bne.n	76f4 <dir_find+0x80>
    76f2:	e077      	b.n	77e4 <dir_find+0x170>
    76f4:	0712      	lsls	r2, r2, #28
    76f6:	d5d1      	bpl.n	769c <dir_find+0x28>
    76f8:	2b0f      	cmp	r3, #15
    76fa:	d002      	beq.n	7702 <dir_find+0x8e>
			ord = 0xFF;
    76fc:	23ff      	movs	r3, #255	; 0xff
    76fe:	469a      	mov	sl, r3
    7700:	e7e1      	b.n	76c6 <dir_find+0x52>
				if (dj->lfn) {
    7702:	69ef      	ldr	r7, [r5, #28]
    7704:	2f00      	cmp	r7, #0
    7706:	d0de      	beq.n	76c6 <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    7708:	0673      	lsls	r3, r6, #25
    770a:	d518      	bpl.n	773e <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    770c:	7b63      	ldrb	r3, [r4, #13]
    770e:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    7710:	2340      	movs	r3, #64	; 0x40
    7712:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    7714:	88eb      	ldrh	r3, [r5, #6]
    7716:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7718:	7b63      	ldrb	r3, [r4, #13]
    771a:	9300      	str	r3, [sp, #0]
    771c:	22ff      	movs	r2, #255	; 0xff
    771e:	4692      	mov	sl, r2
    7720:	454b      	cmp	r3, r9
    7722:	d1d0      	bne.n	76c6 <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    7724:	7823      	ldrb	r3, [r4, #0]
    7726:	3abf      	subs	r2, #191	; 0xbf
    7728:	4393      	bics	r3, r2
    772a:	3b01      	subs	r3, #1
    772c:	005a      	lsls	r2, r3, #1
    772e:	18d2      	adds	r2, r2, r3
    7730:	0092      	lsls	r2, r2, #2
    7732:	4692      	mov	sl, r2
    7734:	449a      	add	sl, r3
	s = 0; wc = 1;
    7736:	2201      	movs	r2, #1
    7738:	2300      	movs	r3, #0
    773a:	4699      	mov	r9, r3
    773c:	e01d      	b.n	777a <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    773e:	45b2      	cmp	sl, r6
    7740:	d0ea      	beq.n	7718 <dir_find+0xa4>
    7742:	23ff      	movs	r3, #255	; 0xff
    7744:	469a      	mov	sl, r3
    7746:	e7be      	b.n	76c6 <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    7748:	4b2d      	ldr	r3, [pc, #180]	; (7800 <dir_find+0x18c>)
    774a:	4798      	blx	r3
    774c:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    774e:	4653      	mov	r3, sl
    7750:	2bfe      	cmp	r3, #254	; 0xfe
    7752:	d81f      	bhi.n	7794 <dir_find+0x120>
    7754:	2301      	movs	r3, #1
    7756:	4453      	add	r3, sl
    7758:	4698      	mov	r8, r3
    775a:	4653      	mov	r3, sl
    775c:	005b      	lsls	r3, r3, #1
    775e:	5bd8      	ldrh	r0, [r3, r7]
    7760:	4b27      	ldr	r3, [pc, #156]	; (7800 <dir_find+0x18c>)
    7762:	4798      	blx	r3
    7764:	0002      	movs	r2, r0
    7766:	9b01      	ldr	r3, [sp, #4]
    7768:	4283      	cmp	r3, r0
    776a:	d113      	bne.n	7794 <dir_find+0x120>
    776c:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    776e:	2301      	movs	r3, #1
    7770:	469c      	mov	ip, r3
    7772:	44e1      	add	r9, ip
    7774:	464b      	mov	r3, r9
    7776:	2b0d      	cmp	r3, #13
    7778:	d011      	beq.n	779e <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    777a:	4b22      	ldr	r3, [pc, #136]	; (7804 <dir_find+0x190>)
    777c:	4649      	mov	r1, r9
    777e:	5cc9      	ldrb	r1, [r1, r3]
    7780:	1863      	adds	r3, r4, r1
    7782:	785b      	ldrb	r3, [r3, #1]
    7784:	021b      	lsls	r3, r3, #8
    7786:	5c60      	ldrb	r0, [r4, r1]
    7788:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    778a:	2a00      	cmp	r2, #0
    778c:	d1dc      	bne.n	7748 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    778e:	4b1e      	ldr	r3, [pc, #120]	; (7808 <dir_find+0x194>)
    7790:	4298      	cmp	r0, r3
    7792:	d0ec      	beq.n	776e <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    7794:	9b00      	ldr	r3, [sp, #0]
    7796:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    7798:	23ff      	movs	r3, #255	; 0xff
    779a:	469a      	mov	sl, r3
    779c:	e793      	b.n	76c6 <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    779e:	7823      	ldrb	r3, [r4, #0]
    77a0:	065b      	lsls	r3, r3, #25
    77a2:	d506      	bpl.n	77b2 <dir_find+0x13e>
    77a4:	2a00      	cmp	r2, #0
    77a6:	d004      	beq.n	77b2 <dir_find+0x13e>
    77a8:	4653      	mov	r3, sl
    77aa:	005b      	lsls	r3, r3, #1
    77ac:	5bdb      	ldrh	r3, [r3, r7]
    77ae:	2b00      	cmp	r3, #0
    77b0:	d1f0      	bne.n	7794 <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    77b2:	3e01      	subs	r6, #1
    77b4:	b2f3      	uxtb	r3, r6
    77b6:	469a      	mov	sl, r3
    77b8:	9b00      	ldr	r3, [sp, #0]
    77ba:	4699      	mov	r9, r3
    77bc:	e783      	b.n	76c6 <dir_find+0x52>
    77be:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    77c0:	5ce1      	ldrb	r1, [r4, r3]
    77c2:	5cc2      	ldrb	r2, [r0, r3]
    77c4:	4291      	cmp	r1, r2
    77c6:	d10a      	bne.n	77de <dir_find+0x16a>
    77c8:	3301      	adds	r3, #1
    77ca:	2b0b      	cmp	r3, #11
    77cc:	d1f8      	bne.n	77c0 <dir_find+0x14c>
}
    77ce:	0038      	movs	r0, r7
    77d0:	b003      	add	sp, #12
    77d2:	bc3c      	pop	{r2, r3, r4, r5}
    77d4:	4690      	mov	r8, r2
    77d6:	4699      	mov	r9, r3
    77d8:	46a2      	mov	sl, r4
    77da:	46ab      	mov	fp, r5
    77dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    77de:	23ff      	movs	r3, #255	; 0xff
    77e0:	469a      	mov	sl, r3
    77e2:	e770      	b.n	76c6 <dir_find+0x52>
			ord = 0xFF;
    77e4:	23ff      	movs	r3, #255	; 0xff
    77e6:	469a      	mov	sl, r3
    77e8:	e76d      	b.n	76c6 <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    77ea:	2704      	movs	r7, #4
    77ec:	e7ef      	b.n	77ce <dir_find+0x15a>
    77ee:	46c0      	nop			; (mov r8, r8)
    77f0:	00007235 	.word	0x00007235
    77f4:	00007099 	.word	0x00007099
    77f8:	00006bf7 	.word	0x00006bf7
    77fc:	00007551 	.word	0x00007551
    7800:	0000860d 	.word	0x0000860d
    7804:	0000dfb8 	.word	0x0000dfb8
    7808:	0000ffff 	.word	0x0000ffff

0000780c <dir_register>:
{
    780c:	b5f0      	push	{r4, r5, r6, r7, lr}
    780e:	46de      	mov	lr, fp
    7810:	4657      	mov	r7, sl
    7812:	464e      	mov	r6, r9
    7814:	4645      	mov	r5, r8
    7816:	b5e0      	push	{r5, r6, r7, lr}
    7818:	b089      	sub	sp, #36	; 0x24
    781a:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    781c:	6987      	ldr	r7, [r0, #24]
    781e:	69c3      	ldr	r3, [r0, #28]
    7820:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    7822:	ad05      	add	r5, sp, #20
    7824:	220c      	movs	r2, #12
    7826:	0039      	movs	r1, r7
    7828:	0028      	movs	r0, r5
    782a:	4ba7      	ldr	r3, [pc, #668]	; (7ac8 <dir_register+0x2bc>)
    782c:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    782e:	7aeb      	ldrb	r3, [r5, #11]
    7830:	07db      	lsls	r3, r3, #31
    7832:	d400      	bmi.n	7836 <dir_register+0x2a>
    7834:	e070      	b.n	7918 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    7836:	2300      	movs	r3, #0
    7838:	72fb      	strb	r3, [r7, #11]
    783a:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    783c:	220b      	movs	r2, #11
    783e:	a905      	add	r1, sp, #20
    7840:	0038      	movs	r0, r7
    7842:	4ba1      	ldr	r3, [pc, #644]	; (7ac8 <dir_register+0x2bc>)
    7844:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    7846:	2301      	movs	r3, #1
		ns[i--] = c;
    7848:	ad03      	add	r5, sp, #12
    784a:	001e      	movs	r6, r3
    784c:	46a0      	mov	r8, r4
    784e:	e049      	b.n	78e4 <dir_register+0xd8>
    7850:	3801      	subs	r0, #1
    7852:	1829      	adds	r1, r5, r0
    7854:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    7856:	091b      	lsrs	r3, r3, #4
    7858:	b29b      	uxth	r3, r3
	} while (seq);
    785a:	2b00      	cmp	r3, #0
    785c:	d007      	beq.n	786e <dir_register+0x62>
		c = (seq % 16) + '0';
    785e:	0021      	movs	r1, r4
    7860:	4019      	ands	r1, r3
    7862:	000a      	movs	r2, r1
    7864:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    7866:	2a39      	cmp	r2, #57	; 0x39
    7868:	d9f2      	bls.n	7850 <dir_register+0x44>
    786a:	3207      	adds	r2, #7
    786c:	e7f0      	b.n	7850 <dir_register+0x44>
	ns[i] = '~';
    786e:	337e      	adds	r3, #126	; 0x7e
    7870:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    7872:	2800      	cmp	r0, #0
    7874:	d00a      	beq.n	788c <dir_register+0x80>
    7876:	783b      	ldrb	r3, [r7, #0]
    7878:	2b20      	cmp	r3, #32
    787a:	d009      	beq.n	7890 <dir_register+0x84>
    787c:	2300      	movs	r3, #0
    787e:	3301      	adds	r3, #1
    7880:	4298      	cmp	r0, r3
    7882:	d007      	beq.n	7894 <dir_register+0x88>
    7884:	5cfa      	ldrb	r2, [r7, r3]
    7886:	2a20      	cmp	r2, #32
    7888:	d1f9      	bne.n	787e <dir_register+0x72>
    788a:	e009      	b.n	78a0 <dir_register+0x94>
    788c:	0003      	movs	r3, r0
    788e:	e007      	b.n	78a0 <dir_register+0x94>
    7890:	2300      	movs	r3, #0
    7892:	e005      	b.n	78a0 <dir_register+0x94>
    7894:	0003      	movs	r3, r0
    7896:	e003      	b.n	78a0 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    7898:	54fa      	strb	r2, [r7, r3]
    789a:	3301      	adds	r3, #1
	} while (j < 8);
    789c:	2b07      	cmp	r3, #7
    789e:	d805      	bhi.n	78ac <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    78a0:	2220      	movs	r2, #32
    78a2:	2807      	cmp	r0, #7
    78a4:	d8f8      	bhi.n	7898 <dir_register+0x8c>
    78a6:	5c2a      	ldrb	r2, [r5, r0]
    78a8:	3001      	adds	r0, #1
    78aa:	e7f5      	b.n	7898 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    78ac:	4640      	mov	r0, r8
    78ae:	4b87      	ldr	r3, [pc, #540]	; (7acc <dir_register+0x2c0>)
    78b0:	4798      	blx	r3
			if (res != FR_OK) break;
    78b2:	2800      	cmp	r0, #0
    78b4:	d11c      	bne.n	78f0 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    78b6:	3601      	adds	r6, #1
    78b8:	b2b6      	uxth	r6, r6
    78ba:	2e64      	cmp	r6, #100	; 0x64
    78bc:	d015      	beq.n	78ea <dir_register+0xde>
	mem_cpy(dst, src, 11);
    78be:	220b      	movs	r2, #11
    78c0:	a905      	add	r1, sp, #20
    78c2:	0038      	movs	r0, r7
    78c4:	4b80      	ldr	r3, [pc, #512]	; (7ac8 <dir_register+0x2bc>)
    78c6:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    78c8:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    78ca:	2e05      	cmp	r6, #5
    78cc:	d90a      	bls.n	78e4 <dir_register+0xd8>
    78ce:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    78d0:	085a      	lsrs	r2, r3, #1
    78d2:	03db      	lsls	r3, r3, #15
    78d4:	4313      	orrs	r3, r2
    78d6:	880a      	ldrh	r2, [r1, #0]
    78d8:	189b      	adds	r3, r3, r2
    78da:	b29b      	uxth	r3, r3
    78dc:	3102      	adds	r1, #2
    78de:	880a      	ldrh	r2, [r1, #0]
    78e0:	2a00      	cmp	r2, #0
    78e2:	d1f5      	bne.n	78d0 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    78e4:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    78e6:	240f      	movs	r4, #15
    78e8:	e7b9      	b.n	785e <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    78ea:	2307      	movs	r3, #7
    78ec:	4698      	mov	r8, r3
    78ee:	e006      	b.n	78fe <dir_register+0xf2>
    78f0:	4644      	mov	r4, r8
    78f2:	4680      	mov	r8, r0
    78f4:	2e64      	cmp	r6, #100	; 0x64
    78f6:	d100      	bne.n	78fa <dir_register+0xee>
    78f8:	e0a5      	b.n	7a46 <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    78fa:	2804      	cmp	r0, #4
    78fc:	d007      	beq.n	790e <dir_register+0x102>
}
    78fe:	4640      	mov	r0, r8
    7900:	b009      	add	sp, #36	; 0x24
    7902:	bc3c      	pop	{r2, r3, r4, r5}
    7904:	4690      	mov	r8, r2
    7906:	4699      	mov	r9, r3
    7908:	46a2      	mov	sl, r4
    790a:	46ab      	mov	fp, r5
    790c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    790e:	ab05      	add	r3, sp, #20
    7910:	7adb      	ldrb	r3, [r3, #11]
    7912:	72fb      	strb	r3, [r7, #11]
    7914:	4653      	mov	r3, sl
    7916:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    7918:	ab05      	add	r3, sp, #20
    791a:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    791c:	2201      	movs	r2, #1
    791e:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    7920:	079b      	lsls	r3, r3, #30
    7922:	d511      	bpl.n	7948 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    7924:	4653      	mov	r3, sl
    7926:	881b      	ldrh	r3, [r3, #0]
    7928:	2b00      	cmp	r3, #0
    792a:	d01b      	beq.n	7964 <dir_register+0x158>
    792c:	2000      	movs	r0, #0
    792e:	4652      	mov	r2, sl
    7930:	3001      	adds	r0, #1
    7932:	b280      	uxth	r0, r0
    7934:	0043      	lsls	r3, r0, #1
    7936:	5a9b      	ldrh	r3, [r3, r2]
    7938:	2b00      	cmp	r3, #0
    793a:	d1f9      	bne.n	7930 <dir_register+0x124>
		ne = (ne + 25) / 13;
    793c:	3019      	adds	r0, #25
    793e:	210d      	movs	r1, #13
    7940:	4b63      	ldr	r3, [pc, #396]	; (7ad0 <dir_register+0x2c4>)
    7942:	4798      	blx	r3
    7944:	b283      	uxth	r3, r0
    7946:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    7948:	2100      	movs	r1, #0
    794a:	0020      	movs	r0, r4
    794c:	4b61      	ldr	r3, [pc, #388]	; (7ad4 <dir_register+0x2c8>)
    794e:	4798      	blx	r3
    7950:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    7952:	2800      	cmp	r0, #0
    7954:	d1d3      	bne.n	78fe <dir_register+0xf2>
    7956:	4682      	mov	sl, r0
    7958:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    795a:	4f5f      	ldr	r7, [pc, #380]	; (7ad8 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    795c:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    795e:	4b5f      	ldr	r3, [pc, #380]	; (7adc <dir_register+0x2d0>)
    7960:	4699      	mov	r9, r3
    7962:	e00b      	b.n	797c <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    7964:	2000      	movs	r0, #0
    7966:	e7e9      	b.n	793c <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    7968:	1c6b      	adds	r3, r5, #1
    796a:	b29b      	uxth	r3, r3
    796c:	459b      	cmp	fp, r3
    796e:	d06d      	beq.n	7a4c <dir_register+0x240>
    7970:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    7972:	2101      	movs	r1, #1
    7974:	0020      	movs	r0, r4
    7976:	47c8      	blx	r9
	} while (res == FR_OK);
    7978:	2800      	cmp	r0, #0
    797a:	d112      	bne.n	79a2 <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    797c:	6921      	ldr	r1, [r4, #16]
    797e:	6820      	ldr	r0, [r4, #0]
    7980:	47b8      	blx	r7
		if (res != FR_OK) break;
    7982:	2800      	cmp	r0, #0
    7984:	d000      	beq.n	7988 <dir_register+0x17c>
    7986:	e098      	b.n	7aba <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    7988:	6963      	ldr	r3, [r4, #20]
    798a:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    798c:	2be5      	cmp	r3, #229	; 0xe5
    798e:	d001      	beq.n	7994 <dir_register+0x188>
    7990:	2b00      	cmp	r3, #0
    7992:	d104      	bne.n	799e <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    7994:	2d00      	cmp	r5, #0
    7996:	d1e7      	bne.n	7968 <dir_register+0x15c>
    7998:	88e3      	ldrh	r3, [r4, #6]
    799a:	469a      	mov	sl, r3
    799c:	e7e4      	b.n	7968 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    799e:	0035      	movs	r5, r6
    79a0:	e7e7      	b.n	7972 <dir_register+0x166>
    79a2:	4680      	mov	r8, r0
    79a4:	e7ab      	b.n	78fe <dir_register+0xf2>
		res = dir_sdi(dj, is);
    79a6:	4651      	mov	r1, sl
    79a8:	0020      	movs	r0, r4
    79aa:	4b4a      	ldr	r3, [pc, #296]	; (7ad4 <dir_register+0x2c8>)
    79ac:	4798      	blx	r3
    79ae:	4680      	mov	r8, r0
		if (res == FR_OK) {
    79b0:	2800      	cmp	r0, #0
    79b2:	d1a4      	bne.n	78fe <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    79b4:	69a0      	ldr	r0, [r4, #24]
    79b6:	4b4a      	ldr	r3, [pc, #296]	; (7ae0 <dir_register+0x2d4>)
    79b8:	4798      	blx	r3
    79ba:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    79bc:	46a8      	mov	r8, r5
    79be:	e01f      	b.n	7a00 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    79c0:	0022      	movs	r2, r4
    79c2:	e067      	b.n	7a94 <dir_register+0x288>
    79c4:	465e      	mov	r6, fp
    79c6:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    79c8:	4946      	ldr	r1, [pc, #280]	; (7ae4 <dir_register+0x2d8>)
    79ca:	428b      	cmp	r3, r1
    79cc:	d003      	beq.n	79d6 <dir_register+0x1ca>
    79ce:	0052      	lsls	r2, r2, #1
    79d0:	5b93      	ldrh	r3, [r2, r6]
    79d2:	2b00      	cmp	r3, #0
    79d4:	d103      	bne.n	79de <dir_register+0x1d2>
    79d6:	2340      	movs	r3, #64	; 0x40
    79d8:	464a      	mov	r2, r9
    79da:	431a      	orrs	r2, r3
    79dc:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    79de:	464b      	mov	r3, r9
    79e0:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    79e2:	2301      	movs	r3, #1
    79e4:	6822      	ldr	r2, [r4, #0]
    79e6:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    79e8:	2100      	movs	r1, #0
    79ea:	0020      	movs	r0, r4
    79ec:	4b3b      	ldr	r3, [pc, #236]	; (7adc <dir_register+0x2d0>)
    79ee:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    79f0:	2800      	cmp	r0, #0
    79f2:	d166      	bne.n	7ac2 <dir_register+0x2b6>
    79f4:	4645      	mov	r5, r8
    79f6:	3d01      	subs	r5, #1
    79f8:	b2ab      	uxth	r3, r5
    79fa:	4698      	mov	r8, r3
    79fc:	2b00      	cmp	r3, #0
    79fe:	d027      	beq.n	7a50 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    7a00:	6921      	ldr	r1, [r4, #16]
    7a02:	6820      	ldr	r0, [r4, #0]
    7a04:	4b34      	ldr	r3, [pc, #208]	; (7ad8 <dir_register+0x2cc>)
    7a06:	4798      	blx	r3
				if (res != FR_OK) break;
    7a08:	2800      	cmp	r0, #0
    7a0a:	d158      	bne.n	7abe <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    7a0c:	69e6      	ldr	r6, [r4, #28]
    7a0e:	6960      	ldr	r0, [r4, #20]
    7a10:	4643      	mov	r3, r8
    7a12:	466a      	mov	r2, sp
    7a14:	70d3      	strb	r3, [r2, #3]
    7a16:	78d3      	ldrb	r3, [r2, #3]
    7a18:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    7a1a:	7913      	ldrb	r3, [r2, #4]
    7a1c:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    7a1e:	230f      	movs	r3, #15
    7a20:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    7a22:	2300      	movs	r3, #0
    7a24:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    7a26:	7683      	strb	r3, [r0, #26]
    7a28:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    7a2a:	464b      	mov	r3, r9
    7a2c:	3b01      	subs	r3, #1
    7a2e:	005a      	lsls	r2, r3, #1
    7a30:	18d2      	adds	r2, r2, r3
    7a32:	0092      	lsls	r2, r2, #2
    7a34:	18d2      	adds	r2, r2, r3
    7a36:	492c      	ldr	r1, [pc, #176]	; (7ae8 <dir_register+0x2dc>)
    7a38:	000d      	movs	r5, r1
    7a3a:	350d      	adds	r5, #13
	s = wc = 0;
    7a3c:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7a3e:	4f29      	ldr	r7, [pc, #164]	; (7ae4 <dir_register+0x2d8>)
    7a40:	46b3      	mov	fp, r6
    7a42:	46a4      	mov	ip, r4
    7a44:	e029      	b.n	7a9a <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    7a46:	2307      	movs	r3, #7
    7a48:	4698      	mov	r8, r3
    7a4a:	e758      	b.n	78fe <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    7a4c:	2b01      	cmp	r3, #1
    7a4e:	d8aa      	bhi.n	79a6 <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    7a50:	6921      	ldr	r1, [r4, #16]
    7a52:	6820      	ldr	r0, [r4, #0]
    7a54:	4b20      	ldr	r3, [pc, #128]	; (7ad8 <dir_register+0x2cc>)
    7a56:	4798      	blx	r3
    7a58:	4680      	mov	r8, r0
		if (res == FR_OK) {
    7a5a:	2800      	cmp	r0, #0
    7a5c:	d000      	beq.n	7a60 <dir_register+0x254>
    7a5e:	e74e      	b.n	78fe <dir_register+0xf2>
			dir = dj->dir;
    7a60:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    7a62:	2220      	movs	r2, #32
    7a64:	2100      	movs	r1, #0
    7a66:	0028      	movs	r0, r5
    7a68:	4b20      	ldr	r3, [pc, #128]	; (7aec <dir_register+0x2e0>)
    7a6a:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    7a6c:	220b      	movs	r2, #11
    7a6e:	69a1      	ldr	r1, [r4, #24]
    7a70:	0028      	movs	r0, r5
    7a72:	4b15      	ldr	r3, [pc, #84]	; (7ac8 <dir_register+0x2bc>)
    7a74:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    7a76:	69a3      	ldr	r3, [r4, #24]
    7a78:	7ada      	ldrb	r2, [r3, #11]
    7a7a:	2318      	movs	r3, #24
    7a7c:	4013      	ands	r3, r2
    7a7e:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    7a80:	6823      	ldr	r3, [r4, #0]
    7a82:	2201      	movs	r2, #1
    7a84:	711a      	strb	r2, [r3, #4]
    7a86:	e73a      	b.n	78fe <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7a88:	780c      	ldrb	r4, [r1, #0]
    7a8a:	26ff      	movs	r6, #255	; 0xff
    7a8c:	5506      	strb	r6, [r0, r4]
    7a8e:	1904      	adds	r4, r0, r4
    7a90:	26ff      	movs	r6, #255	; 0xff
    7a92:	7066      	strb	r6, [r4, #1]
    7a94:	3101      	adds	r1, #1
	} while (++s < 13);
    7a96:	42a9      	cmp	r1, r5
    7a98:	d094      	beq.n	79c4 <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7a9a:	42bb      	cmp	r3, r7
    7a9c:	d0f4      	beq.n	7a88 <dir_register+0x27c>
    7a9e:	1c54      	adds	r4, r2, #1
    7aa0:	0052      	lsls	r2, r2, #1
    7aa2:	465b      	mov	r3, fp
    7aa4:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7aa6:	780a      	ldrb	r2, [r1, #0]
    7aa8:	5483      	strb	r3, [r0, r2]
    7aaa:	1882      	adds	r2, r0, r2
    7aac:	0a1e      	lsrs	r6, r3, #8
    7aae:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7ab0:	2b00      	cmp	r3, #0
    7ab2:	d185      	bne.n	79c0 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7ab4:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7ab6:	003b      	movs	r3, r7
    7ab8:	e7ec      	b.n	7a94 <dir_register+0x288>
    7aba:	4680      	mov	r8, r0
    7abc:	e71f      	b.n	78fe <dir_register+0xf2>
    7abe:	4680      	mov	r8, r0
    7ac0:	e71d      	b.n	78fe <dir_register+0xf2>
    7ac2:	4680      	mov	r8, r0
    7ac4:	e71b      	b.n	78fe <dir_register+0xf2>
    7ac6:	46c0      	nop			; (mov r8, r8)
    7ac8:	00006bb9 	.word	0x00006bb9
    7acc:	00007675 	.word	0x00007675
    7ad0:	0000b575 	.word	0x0000b575
    7ad4:	00007235 	.word	0x00007235
    7ad8:	00007099 	.word	0x00007099
    7adc:	00007551 	.word	0x00007551
    7ae0:	00006bf7 	.word	0x00006bf7
    7ae4:	0000ffff 	.word	0x0000ffff
    7ae8:	0000dfb8 	.word	0x0000dfb8
    7aec:	00006bcd 	.word	0x00006bcd

00007af0 <sync>:
{
    7af0:	b570      	push	{r4, r5, r6, lr}
    7af2:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    7af4:	2100      	movs	r1, #0
    7af6:	4b2c      	ldr	r3, [pc, #176]	; (7ba8 <sync+0xb8>)
    7af8:	4798      	blx	r3
	if (res == FR_OK) {
    7afa:	2800      	cmp	r0, #0
    7afc:	d10a      	bne.n	7b14 <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7afe:	7823      	ldrb	r3, [r4, #0]
    7b00:	2b03      	cmp	r3, #3
    7b02:	d008      	beq.n	7b16 <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    7b04:	7860      	ldrb	r0, [r4, #1]
    7b06:	2200      	movs	r2, #0
    7b08:	2100      	movs	r1, #0
    7b0a:	4b28      	ldr	r3, [pc, #160]	; (7bac <sync+0xbc>)
    7b0c:	4798      	blx	r3
    7b0e:	1e43      	subs	r3, r0, #1
    7b10:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    7b12:	b2c0      	uxtb	r0, r0
}
    7b14:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    7b16:	7963      	ldrb	r3, [r4, #5]
    7b18:	2b00      	cmp	r3, #0
    7b1a:	d0f3      	beq.n	7b04 <sync+0x14>
			fs->winsect = 0;
    7b1c:	2600      	movs	r6, #0
    7b1e:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    7b20:	0025      	movs	r5, r4
    7b22:	3530      	adds	r5, #48	; 0x30
    7b24:	2280      	movs	r2, #128	; 0x80
    7b26:	0092      	lsls	r2, r2, #2
    7b28:	2100      	movs	r1, #0
    7b2a:	0028      	movs	r0, r5
    7b2c:	4b20      	ldr	r3, [pc, #128]	; (7bb0 <sync+0xc0>)
    7b2e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    7b30:	2255      	movs	r2, #85	; 0x55
    7b32:	4b20      	ldr	r3, [pc, #128]	; (7bb4 <sync+0xc4>)
    7b34:	54e2      	strb	r2, [r4, r3]
    7b36:	3255      	adds	r2, #85	; 0x55
    7b38:	4b1f      	ldr	r3, [pc, #124]	; (7bb8 <sync+0xc8>)
    7b3a:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    7b3c:	3bde      	subs	r3, #222	; 0xde
    7b3e:	3bff      	subs	r3, #255	; 0xff
    7b40:	3a7a      	subs	r2, #122	; 0x7a
    7b42:	54a3      	strb	r3, [r4, r2]
    7b44:	3201      	adds	r2, #1
    7b46:	54a3      	strb	r3, [r4, r2]
    7b48:	330f      	adds	r3, #15
    7b4a:	3201      	adds	r2, #1
    7b4c:	54a3      	strb	r3, [r4, r2]
    7b4e:	320f      	adds	r2, #15
    7b50:	2133      	movs	r1, #51	; 0x33
    7b52:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    7b54:	313f      	adds	r1, #63	; 0x3f
    7b56:	2085      	movs	r0, #133	; 0x85
    7b58:	0080      	lsls	r0, r0, #2
    7b5a:	5421      	strb	r1, [r4, r0]
    7b5c:	4817      	ldr	r0, [pc, #92]	; (7bbc <sync+0xcc>)
    7b5e:	5421      	strb	r1, [r4, r0]
    7b60:	4917      	ldr	r1, [pc, #92]	; (7bc0 <sync+0xd0>)
    7b62:	5462      	strb	r2, [r4, r1]
    7b64:	4a17      	ldr	r2, [pc, #92]	; (7bc4 <sync+0xd4>)
    7b66:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    7b68:	6923      	ldr	r3, [r4, #16]
    7b6a:	3201      	adds	r2, #1
    7b6c:	54a3      	strb	r3, [r4, r2]
    7b6e:	0a19      	lsrs	r1, r3, #8
    7b70:	4a15      	ldr	r2, [pc, #84]	; (7bc8 <sync+0xd8>)
    7b72:	54a1      	strb	r1, [r4, r2]
    7b74:	0c19      	lsrs	r1, r3, #16
    7b76:	4a15      	ldr	r2, [pc, #84]	; (7bcc <sync+0xdc>)
    7b78:	54a1      	strb	r1, [r4, r2]
    7b7a:	0e1b      	lsrs	r3, r3, #24
    7b7c:	4a14      	ldr	r2, [pc, #80]	; (7bd0 <sync+0xe0>)
    7b7e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    7b80:	68e3      	ldr	r3, [r4, #12]
    7b82:	3201      	adds	r2, #1
    7b84:	54a3      	strb	r3, [r4, r2]
    7b86:	0a19      	lsrs	r1, r3, #8
    7b88:	4a12      	ldr	r2, [pc, #72]	; (7bd4 <sync+0xe4>)
    7b8a:	54a1      	strb	r1, [r4, r2]
    7b8c:	0c19      	lsrs	r1, r3, #16
    7b8e:	4a12      	ldr	r2, [pc, #72]	; (7bd8 <sync+0xe8>)
    7b90:	54a1      	strb	r1, [r4, r2]
    7b92:	0e1b      	lsrs	r3, r3, #24
    7b94:	4a11      	ldr	r2, [pc, #68]	; (7bdc <sync+0xec>)
    7b96:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    7b98:	7860      	ldrb	r0, [r4, #1]
    7b9a:	2301      	movs	r3, #1
    7b9c:	6962      	ldr	r2, [r4, #20]
    7b9e:	0029      	movs	r1, r5
    7ba0:	4d0f      	ldr	r5, [pc, #60]	; (7be0 <sync+0xf0>)
    7ba2:	47a8      	blx	r5
			fs->fsi_flag = 0;
    7ba4:	7166      	strb	r6, [r4, #5]
    7ba6:	e7ad      	b.n	7b04 <sync+0x14>
    7ba8:	00007099 	.word	0x00007099
    7bac:	00006afd 	.word	0x00006afd
    7bb0:	00006bcd 	.word	0x00006bcd
    7bb4:	0000022e 	.word	0x0000022e
    7bb8:	0000022f 	.word	0x0000022f
    7bbc:	00000215 	.word	0x00000215
    7bc0:	00000216 	.word	0x00000216
    7bc4:	00000217 	.word	0x00000217
    7bc8:	00000219 	.word	0x00000219
    7bcc:	0000021a 	.word	0x0000021a
    7bd0:	0000021b 	.word	0x0000021b
    7bd4:	0000021d 	.word	0x0000021d
    7bd8:	0000021e 	.word	0x0000021e
    7bdc:	0000021f 	.word	0x0000021f
    7be0:	00006a79 	.word	0x00006a79

00007be4 <follow_path>:
{
    7be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7be6:	46de      	mov	lr, fp
    7be8:	4657      	mov	r7, sl
    7bea:	464e      	mov	r6, r9
    7bec:	4645      	mov	r5, r8
    7bee:	b5e0      	push	{r5, r6, r7, lr}
    7bf0:	b083      	sub	sp, #12
    7bf2:	4682      	mov	sl, r0
    7bf4:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    7bf6:	780b      	ldrb	r3, [r1, #0]
    7bf8:	2b2f      	cmp	r3, #47	; 0x2f
    7bfa:	d00f      	beq.n	7c1c <follow_path+0x38>
    7bfc:	2b5c      	cmp	r3, #92	; 0x5c
    7bfe:	d00d      	beq.n	7c1c <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    7c00:	2300      	movs	r3, #0
    7c02:	4652      	mov	r2, sl
    7c04:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    7c06:	782b      	ldrb	r3, [r5, #0]
    7c08:	4657      	mov	r7, sl
    7c0a:	2b1f      	cmp	r3, #31
    7c0c:	d809      	bhi.n	7c22 <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    7c0e:	2100      	movs	r1, #0
    7c10:	4650      	mov	r0, sl
    7c12:	4bb2      	ldr	r3, [pc, #712]	; (7edc <follow_path+0x2f8>)
    7c14:	4798      	blx	r3
		dj->dir = 0;
    7c16:	2300      	movs	r3, #0
    7c18:	617b      	str	r3, [r7, #20]
    7c1a:	e13a      	b.n	7e92 <follow_path+0x2ae>
		path++;
    7c1c:	3501      	adds	r5, #1
    7c1e:	e7ef      	b.n	7c00 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    7c20:	3501      	adds	r5, #1
    7c22:	7828      	ldrb	r0, [r5, #0]
    7c24:	282f      	cmp	r0, #47	; 0x2f
    7c26:	d0fb      	beq.n	7c20 <follow_path+0x3c>
    7c28:	285c      	cmp	r0, #92	; 0x5c
    7c2a:	d0f9      	beq.n	7c20 <follow_path+0x3c>
	lfn = dj->lfn;
    7c2c:	69fb      	ldr	r3, [r7, #28]
    7c2e:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    7c30:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    7c32:	281f      	cmp	r0, #31
    7c34:	d800      	bhi.n	7c38 <follow_path+0x54>
    7c36:	e13b      	b.n	7eb0 <follow_path+0x2cc>
    7c38:	282f      	cmp	r0, #47	; 0x2f
    7c3a:	d100      	bne.n	7c3e <follow_path+0x5a>
    7c3c:	e13b      	b.n	7eb6 <follow_path+0x2d2>
    7c3e:	285c      	cmp	r0, #92	; 0x5c
    7c40:	d100      	bne.n	7c44 <follow_path+0x60>
    7c42:	e13b      	b.n	7ebc <follow_path+0x2d8>
    7c44:	1c6e      	adds	r6, r5, #1
    7c46:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    7c48:	2380      	movs	r3, #128	; 0x80
    7c4a:	005b      	lsls	r3, r3, #1
    7c4c:	4698      	mov	r8, r3
    7c4e:	46bb      	mov	fp, r7
    7c50:	002b      	movs	r3, r5
    7c52:	0025      	movs	r5, r4
    7c54:	0034      	movs	r4, r6
    7c56:	4656      	mov	r6, sl
    7c58:	4699      	mov	r9, r3
    7c5a:	e011      	b.n	7c80 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	d135      	bne.n	7ccc <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    7c60:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    7c62:	1c6b      	adds	r3, r5, #1
    7c64:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    7c66:	281f      	cmp	r0, #31
    7c68:	d91e      	bls.n	7ca8 <follow_path+0xc4>
    7c6a:	282f      	cmp	r0, #47	; 0x2f
    7c6c:	d100      	bne.n	7c70 <follow_path+0x8c>
    7c6e:	e128      	b.n	7ec2 <follow_path+0x2de>
    7c70:	285c      	cmp	r0, #92	; 0x5c
    7c72:	d100      	bne.n	7c76 <follow_path+0x92>
    7c74:	e142      	b.n	7efc <follow_path+0x318>
    7c76:	3602      	adds	r6, #2
    7c78:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    7c7a:	4543      	cmp	r3, r8
    7c7c:	d026      	beq.n	7ccc <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    7c7e:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    7c80:	2101      	movs	r1, #1
    7c82:	4b97      	ldr	r3, [pc, #604]	; (7ee0 <follow_path+0x2fc>)
    7c84:	4798      	blx	r3
    7c86:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    7c88:	d020      	beq.n	7ccc <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    7c8a:	287f      	cmp	r0, #127	; 0x7f
    7c8c:	d8e8      	bhi.n	7c60 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    7c8e:	2822      	cmp	r0, #34	; 0x22
    7c90:	d100      	bne.n	7c94 <follow_path+0xb0>
    7c92:	e0fd      	b.n	7e90 <follow_path+0x2ac>
    7c94:	232a      	movs	r3, #42	; 0x2a
    7c96:	4a93      	ldr	r2, [pc, #588]	; (7ee4 <follow_path+0x300>)
    7c98:	b29f      	uxth	r7, r3
    7c9a:	428f      	cmp	r7, r1
    7c9c:	d0de      	beq.n	7c5c <follow_path+0x78>
    7c9e:	3201      	adds	r2, #1
    7ca0:	7813      	ldrb	r3, [r2, #0]
    7ca2:	2b00      	cmp	r3, #0
    7ca4:	d1f8      	bne.n	7c98 <follow_path+0xb4>
    7ca6:	e7db      	b.n	7c60 <follow_path+0x7c>
    7ca8:	002c      	movs	r4, r5
    7caa:	465f      	mov	r7, fp
    7cac:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    7cae:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    7cb0:	2604      	movs	r6, #4
    7cb2:	e10b      	b.n	7ecc <follow_path+0x2e8>
		di--;
    7cb4:	3c01      	subs	r4, #1
    7cb6:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    7cb8:	2c00      	cmp	r4, #0
    7cba:	d100      	bne.n	7cbe <follow_path+0xda>
    7cbc:	e0e8      	b.n	7e90 <follow_path+0x2ac>
		w = lfn[di-1];
    7cbe:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    7cc0:	2a20      	cmp	r2, #32
    7cc2:	d0f7      	beq.n	7cb4 <follow_path+0xd0>
    7cc4:	2a2e      	cmp	r2, #46	; 0x2e
    7cc6:	d0f5      	beq.n	7cb4 <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    7cc8:	2c00      	cmp	r4, #0
    7cca:	d101      	bne.n	7cd0 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    7ccc:	2006      	movs	r0, #6
	return res;
    7cce:	e0e0      	b.n	7e92 <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    7cd0:	0063      	lsls	r3, r4, #1
    7cd2:	4698      	mov	r8, r3
    7cd4:	2300      	movs	r3, #0
    7cd6:	4652      	mov	r2, sl
    7cd8:	4641      	mov	r1, r8
    7cda:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    7cdc:	220b      	movs	r2, #11
    7cde:	2120      	movs	r1, #32
    7ce0:	69b8      	ldr	r0, [r7, #24]
    7ce2:	4b81      	ldr	r3, [pc, #516]	; (7ee8 <follow_path+0x304>)
    7ce4:	4798      	blx	r3
    7ce6:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    7ce8:	2300      	movs	r3, #0
    7cea:	e001      	b.n	7cf0 <follow_path+0x10c>
    7cec:	3301      	adds	r3, #1
    7cee:	3202      	adds	r2, #2
    7cf0:	8811      	ldrh	r1, [r2, #0]
    7cf2:	2920      	cmp	r1, #32
    7cf4:	d0fa      	beq.n	7cec <follow_path+0x108>
    7cf6:	292e      	cmp	r1, #46	; 0x2e
    7cf8:	d0f8      	beq.n	7cec <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    7cfa:	2b00      	cmp	r3, #0
    7cfc:	d001      	beq.n	7d02 <follow_path+0x11e>
    7cfe:	2203      	movs	r2, #3
    7d00:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    7d02:	4652      	mov	r2, sl
    7d04:	4442      	add	r2, r8
    7d06:	3a02      	subs	r2, #2
    7d08:	8812      	ldrh	r2, [r2, #0]
    7d0a:	2a2e      	cmp	r2, #46	; 0x2e
    7d0c:	d009      	beq.n	7d22 <follow_path+0x13e>
    7d0e:	4642      	mov	r2, r8
    7d10:	3a04      	subs	r2, #4
    7d12:	4452      	add	r2, sl
    7d14:	3c01      	subs	r4, #1
    7d16:	2c00      	cmp	r4, #0
    7d18:	d003      	beq.n	7d22 <follow_path+0x13e>
    7d1a:	3a02      	subs	r2, #2
    7d1c:	8851      	ldrh	r1, [r2, #2]
    7d1e:	292e      	cmp	r1, #46	; 0x2e
    7d20:	d1f8      	bne.n	7d14 <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    7d22:	2208      	movs	r2, #8
    7d24:	9201      	str	r2, [sp, #4]
    7d26:	2200      	movs	r2, #0
    7d28:	4693      	mov	fp, r2
    7d2a:	4691      	mov	r9, r2
    7d2c:	46a0      	mov	r8, r4
    7d2e:	e006      	b.n	7d3e <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    7d30:	4544      	cmp	r4, r8
    7d32:	d100      	bne.n	7d36 <follow_path+0x152>
    7d34:	e0e6      	b.n	7f04 <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    7d36:	2303      	movs	r3, #3
    7d38:	431e      	orrs	r6, r3
    7d3a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    7d3c:	0023      	movs	r3, r4
    7d3e:	1c5c      	adds	r4, r3, #1
    7d40:	005b      	lsls	r3, r3, #1
    7d42:	4652      	mov	r2, sl
    7d44:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    7d46:	2800      	cmp	r0, #0
    7d48:	d02c      	beq.n	7da4 <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    7d4a:	2820      	cmp	r0, #32
    7d4c:	d0f3      	beq.n	7d36 <follow_path+0x152>
    7d4e:	282e      	cmp	r0, #46	; 0x2e
    7d50:	d0ee      	beq.n	7d30 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    7d52:	9b01      	ldr	r3, [sp, #4]
    7d54:	459b      	cmp	fp, r3
    7d56:	d219      	bcs.n	7d8c <follow_path+0x1a8>
    7d58:	4544      	cmp	r4, r8
    7d5a:	d100      	bne.n	7d5e <follow_path+0x17a>
    7d5c:	e0d2      	b.n	7f04 <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    7d5e:	287f      	cmp	r0, #127	; 0x7f
    7d60:	d85e      	bhi.n	7e20 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    7d62:	282b      	cmp	r0, #43	; 0x2b
    7d64:	d06e      	beq.n	7e44 <follow_path+0x260>
    7d66:	232c      	movs	r3, #44	; 0x2c
    7d68:	4a60      	ldr	r2, [pc, #384]	; (7eec <follow_path+0x308>)
    7d6a:	b299      	uxth	r1, r3
    7d6c:	4281      	cmp	r1, r0
    7d6e:	d067      	beq.n	7e40 <follow_path+0x25c>
    7d70:	3201      	adds	r2, #1
    7d72:	7813      	ldrb	r3, [r2, #0]
    7d74:	2b00      	cmp	r3, #0
    7d76:	d1f8      	bne.n	7d6a <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    7d78:	0003      	movs	r3, r0
    7d7a:	3b41      	subs	r3, #65	; 0x41
    7d7c:	b29b      	uxth	r3, r3
    7d7e:	2b19      	cmp	r3, #25
    7d80:	d86c      	bhi.n	7e5c <follow_path+0x278>
					b |= 2;
    7d82:	2302      	movs	r3, #2
    7d84:	464a      	mov	r2, r9
    7d86:	431a      	orrs	r2, r3
    7d88:	4691      	mov	r9, r2
    7d8a:	e05f      	b.n	7e4c <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    7d8c:	9b01      	ldr	r3, [sp, #4]
    7d8e:	2b0b      	cmp	r3, #11
    7d90:	d03b      	beq.n	7e0a <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    7d92:	4544      	cmp	r4, r8
    7d94:	d100      	bne.n	7d98 <follow_path+0x1b4>
    7d96:	e0b9      	b.n	7f0c <follow_path+0x328>
    7d98:	2303      	movs	r3, #3
    7d9a:	431e      	orrs	r6, r3
    7d9c:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    7d9e:	4544      	cmp	r4, r8
    7da0:	d800      	bhi.n	7da4 <follow_path+0x1c0>
    7da2:	e0b3      	b.n	7f0c <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    7da4:	69bb      	ldr	r3, [r7, #24]
    7da6:	781a      	ldrb	r2, [r3, #0]
    7da8:	2ae5      	cmp	r2, #229	; 0xe5
    7daa:	d036      	beq.n	7e1a <follow_path+0x236>
	if (ni == 8) b <<= 2;
    7dac:	9b01      	ldr	r3, [sp, #4]
    7dae:	2b08      	cmp	r3, #8
    7db0:	d060      	beq.n	7e74 <follow_path+0x290>
    7db2:	230c      	movs	r3, #12
    7db4:	464a      	mov	r2, r9
    7db6:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    7db8:	2b0c      	cmp	r3, #12
    7dba:	d060      	beq.n	7e7e <follow_path+0x29a>
    7dbc:	43d2      	mvns	r2, r2
    7dbe:	0792      	lsls	r2, r2, #30
    7dc0:	d05d      	beq.n	7e7e <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    7dc2:	07b2      	lsls	r2, r6, #30
    7dc4:	d406      	bmi.n	7dd4 <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    7dc6:	2203      	movs	r2, #3
    7dc8:	4649      	mov	r1, r9
    7dca:	400a      	ands	r2, r1
    7dcc:	2a01      	cmp	r2, #1
    7dce:	d059      	beq.n	7e84 <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    7dd0:	2b04      	cmp	r3, #4
    7dd2:	d05a      	beq.n	7e8a <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    7dd4:	69bb      	ldr	r3, [r7, #24]
    7dd6:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    7dd8:	0038      	movs	r0, r7
    7dda:	4b45      	ldr	r3, [pc, #276]	; (7ef0 <follow_path+0x30c>)
    7ddc:	4798      	blx	r3
			ns = *(dj->fn+NS);
    7dde:	69bb      	ldr	r3, [r7, #24]
    7de0:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    7de2:	2800      	cmp	r0, #0
    7de4:	d15c      	bne.n	7ea0 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    7de6:	075b      	lsls	r3, r3, #29
    7de8:	d453      	bmi.n	7e92 <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    7dea:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    7dec:	7ad3      	ldrb	r3, [r2, #11]
    7dee:	06db      	lsls	r3, r3, #27
    7df0:	d55c      	bpl.n	7eac <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    7df2:	7d51      	ldrb	r1, [r2, #21]
    7df4:	0209      	lsls	r1, r1, #8
    7df6:	7d13      	ldrb	r3, [r2, #20]
    7df8:	430b      	orrs	r3, r1
    7dfa:	041b      	lsls	r3, r3, #16
    7dfc:	7ed1      	ldrb	r1, [r2, #27]
    7dfe:	0209      	lsls	r1, r1, #8
    7e00:	7e92      	ldrb	r2, [r2, #26]
    7e02:	430a      	orrs	r2, r1
    7e04:	4313      	orrs	r3, r2
    7e06:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    7e08:	e70b      	b.n	7c22 <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    7e0a:	2303      	movs	r3, #3
    7e0c:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    7e0e:	69bb      	ldr	r3, [r7, #24]
    7e10:	781a      	ldrb	r2, [r3, #0]
    7e12:	2ae5      	cmp	r2, #229	; 0xe5
    7e14:	d1cd      	bne.n	7db2 <follow_path+0x1ce>
    7e16:	220b      	movs	r2, #11
    7e18:	9201      	str	r2, [sp, #4]
    7e1a:	2205      	movs	r2, #5
    7e1c:	701a      	strb	r2, [r3, #0]
    7e1e:	e7c5      	b.n	7dac <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    7e20:	2100      	movs	r1, #0
    7e22:	4b2f      	ldr	r3, [pc, #188]	; (7ee0 <follow_path+0x2fc>)
    7e24:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    7e26:	2800      	cmp	r0, #0
    7e28:	d100      	bne.n	7e2c <follow_path+0x248>
    7e2a:	e079      	b.n	7f20 <follow_path+0x33c>
    7e2c:	4b31      	ldr	r3, [pc, #196]	; (7ef4 <follow_path+0x310>)
    7e2e:	469c      	mov	ip, r3
    7e30:	4460      	add	r0, ip
    7e32:	3880      	subs	r0, #128	; 0x80
    7e34:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    7e36:	2302      	movs	r3, #2
    7e38:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    7e3a:	2800      	cmp	r0, #0
    7e3c:	d002      	beq.n	7e44 <follow_path+0x260>
    7e3e:	e790      	b.n	7d62 <follow_path+0x17e>
    7e40:	2b00      	cmp	r3, #0
    7e42:	d099      	beq.n	7d78 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    7e44:	2303      	movs	r3, #3
    7e46:	431e      	orrs	r6, r3
    7e48:	b2f6      	uxtb	r6, r6
    7e4a:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    7e4c:	69bb      	ldr	r3, [r7, #24]
    7e4e:	465a      	mov	r2, fp
    7e50:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    7e52:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    7e54:	2201      	movs	r2, #1
    7e56:	4694      	mov	ip, r2
    7e58:	44e3      	add	fp, ip
    7e5a:	e770      	b.n	7d3e <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    7e5c:	0003      	movs	r3, r0
    7e5e:	3b61      	subs	r3, #97	; 0x61
    7e60:	b29b      	uxth	r3, r3
    7e62:	2b19      	cmp	r3, #25
    7e64:	d8f2      	bhi.n	7e4c <follow_path+0x268>
						b |= 1; w -= 0x20;
    7e66:	2301      	movs	r3, #1
    7e68:	464a      	mov	r2, r9
    7e6a:	431a      	orrs	r2, r3
    7e6c:	4691      	mov	r9, r2
    7e6e:	3820      	subs	r0, #32
    7e70:	b280      	uxth	r0, r0
    7e72:	e7eb      	b.n	7e4c <follow_path+0x268>
	if (ni == 8) b <<= 2;
    7e74:	464b      	mov	r3, r9
    7e76:	009b      	lsls	r3, r3, #2
    7e78:	b2db      	uxtb	r3, r3
    7e7a:	4699      	mov	r9, r3
    7e7c:	e799      	b.n	7db2 <follow_path+0x1ce>
		cf |= NS_LFN;
    7e7e:	2202      	movs	r2, #2
    7e80:	4316      	orrs	r6, r2
    7e82:	e79e      	b.n	7dc2 <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    7e84:	320f      	adds	r2, #15
    7e86:	4316      	orrs	r6, r2
    7e88:	e7a2      	b.n	7dd0 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    7e8a:	3304      	adds	r3, #4
    7e8c:	431e      	orrs	r6, r3
    7e8e:	e7a1      	b.n	7dd4 <follow_path+0x1f0>
    7e90:	2006      	movs	r0, #6
}
    7e92:	b003      	add	sp, #12
    7e94:	bc3c      	pop	{r2, r3, r4, r5}
    7e96:	4690      	mov	r8, r2
    7e98:	4699      	mov	r9, r3
    7e9a:	46a2      	mov	sl, r4
    7e9c:	46ab      	mov	fp, r5
    7e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    7ea0:	2804      	cmp	r0, #4
    7ea2:	d1f6      	bne.n	7e92 <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    7ea4:	075b      	lsls	r3, r3, #29
    7ea6:	d4f4      	bmi.n	7e92 <follow_path+0x2ae>
    7ea8:	3001      	adds	r0, #1
    7eaa:	e7f2      	b.n	7e92 <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    7eac:	2005      	movs	r0, #5
    7eae:	e7f0      	b.n	7e92 <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    7eb0:	2301      	movs	r3, #1
	si = di = 0;
    7eb2:	2400      	movs	r4, #0
    7eb4:	e6fb      	b.n	7cae <follow_path+0xca>
		w = p[si++];					/* Get a character */
    7eb6:	2301      	movs	r3, #1
	si = di = 0;
    7eb8:	2400      	movs	r4, #0
    7eba:	e005      	b.n	7ec8 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    7ebc:	2301      	movs	r3, #1
	si = di = 0;
    7ebe:	2400      	movs	r4, #0
    7ec0:	e002      	b.n	7ec8 <follow_path+0x2e4>
    7ec2:	002c      	movs	r4, r5
    7ec4:	465f      	mov	r7, fp
    7ec6:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    7ec8:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    7eca:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    7ecc:	2c00      	cmp	r4, #0
    7ece:	d0df      	beq.n	7e90 <follow_path+0x2ac>
    7ed0:	4b09      	ldr	r3, [pc, #36]	; (7ef8 <follow_path+0x314>)
    7ed2:	18e3      	adds	r3, r4, r3
    7ed4:	005b      	lsls	r3, r3, #1
    7ed6:	4453      	add	r3, sl
    7ed8:	e6f1      	b.n	7cbe <follow_path+0xda>
    7eda:	46c0      	nop			; (mov r8, r8)
    7edc:	00007235 	.word	0x00007235
    7ee0:	000085c5 	.word	0x000085c5
    7ee4:	0000e049 	.word	0x0000e049
    7ee8:	00006bcd 	.word	0x00006bcd
    7eec:	0000e055 	.word	0x0000e055
    7ef0:	00007675 	.word	0x00007675
    7ef4:	0000dfc8 	.word	0x0000dfc8
    7ef8:	7fffffff 	.word	0x7fffffff
    7efc:	002c      	movs	r4, r5
    7efe:	465f      	mov	r7, fp
    7f00:	464d      	mov	r5, r9
    7f02:	e7e1      	b.n	7ec8 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    7f04:	9b01      	ldr	r3, [sp, #4]
    7f06:	2b0b      	cmp	r3, #11
    7f08:	d100      	bne.n	7f0c <follow_path+0x328>
    7f0a:	e77e      	b.n	7e0a <follow_path+0x226>
			b <<= 2; continue;
    7f0c:	464b      	mov	r3, r9
    7f0e:	009b      	lsls	r3, r3, #2
    7f10:	b2db      	uxtb	r3, r3
    7f12:	4699      	mov	r9, r3
    7f14:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    7f16:	220b      	movs	r2, #11
    7f18:	9201      	str	r2, [sp, #4]
    7f1a:	3a03      	subs	r2, #3
    7f1c:	4693      	mov	fp, r2
    7f1e:	e70e      	b.n	7d3e <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    7f20:	2302      	movs	r3, #2
    7f22:	431e      	orrs	r6, r3
    7f24:	e78e      	b.n	7e44 <follow_path+0x260>
    7f26:	46c0      	nop			; (mov r8, r8)

00007f28 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    7f28:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    7f2a:	2807      	cmp	r0, #7
    7f2c:	d901      	bls.n	7f32 <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    7f2e:	0018      	movs	r0, r3
    7f30:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    7f32:	0083      	lsls	r3, r0, #2
    7f34:	4a07      	ldr	r2, [pc, #28]	; (7f54 <f_mount+0x2c>)
    7f36:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    7f38:	2b00      	cmp	r3, #0
    7f3a:	d001      	beq.n	7f40 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    7f3c:	2200      	movs	r2, #0
    7f3e:	701a      	strb	r2, [r3, #0]
	if (fs) {
    7f40:	2900      	cmp	r1, #0
    7f42:	d001      	beq.n	7f48 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    7f44:	2300      	movs	r3, #0
    7f46:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    7f48:	0080      	lsls	r0, r0, #2
    7f4a:	4b02      	ldr	r3, [pc, #8]	; (7f54 <f_mount+0x2c>)
    7f4c:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    7f4e:	2300      	movs	r3, #0
    7f50:	e7ed      	b.n	7f2e <f_mount+0x6>
    7f52:	46c0      	nop			; (mov r8, r8)
    7f54:	200003fc 	.word	0x200003fc

00007f58 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    7f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f5a:	46c6      	mov	lr, r8
    7f5c:	b500      	push	{lr}
    7f5e:	4c59      	ldr	r4, [pc, #356]	; (80c4 <f_open+0x16c>)
    7f60:	44a5      	add	sp, r4
    7f62:	0005      	movs	r5, r0
    7f64:	9101      	str	r1, [sp, #4]
    7f66:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    7f68:	2300      	movs	r3, #0
    7f6a:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    7f6c:	261f      	movs	r6, #31
    7f6e:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    7f70:	221e      	movs	r2, #30
    7f72:	403a      	ands	r2, r7
    7f74:	a985      	add	r1, sp, #532	; 0x214
    7f76:	a801      	add	r0, sp, #4
    7f78:	4b53      	ldr	r3, [pc, #332]	; (80c8 <f_open+0x170>)
    7f7a:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    7f7c:	ab82      	add	r3, sp, #520	; 0x208
    7f7e:	938b      	str	r3, [sp, #556]	; 0x22c
    7f80:	ab02      	add	r3, sp, #8
    7f82:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    7f84:	2800      	cmp	r0, #0
    7f86:	d006      	beq.n	7f96 <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    7f88:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7f8a:	231c      	movs	r3, #28
    7f8c:	423b      	tst	r3, r7
    7f8e:	d145      	bne.n	801c <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    7f90:	2800      	cmp	r0, #0
    7f92:	d13d      	bne.n	8010 <f_open+0xb8>
    7f94:	e00c      	b.n	7fb0 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    7f96:	9901      	ldr	r1, [sp, #4]
    7f98:	a885      	add	r0, sp, #532	; 0x214
    7f9a:	4b4c      	ldr	r3, [pc, #304]	; (80cc <f_open+0x174>)
    7f9c:	4798      	blx	r3
	dir = dj.dir;
    7f9e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    7fa0:	2800      	cmp	r0, #0
    7fa2:	d1f2      	bne.n	7f8a <f_open+0x32>
		if (!dir)	/* Current dir itself */
    7fa4:	2c00      	cmp	r4, #0
    7fa6:	d100      	bne.n	7faa <f_open+0x52>
    7fa8:	e086      	b.n	80b8 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    7faa:	231c      	movs	r3, #28
    7fac:	423b      	tst	r3, r7
    7fae:	d146      	bne.n	803e <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    7fb0:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    7fb2:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    7fb4:	06da      	lsls	r2, r3, #27
    7fb6:	d42b      	bmi.n	8010 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    7fb8:	07ba      	lsls	r2, r7, #30
    7fba:	d502      	bpl.n	7fc2 <f_open+0x6a>
					res = FR_DENIED;
    7fbc:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    7fbe:	07db      	lsls	r3, r3, #31
    7fc0:	d426      	bmi.n	8010 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    7fc2:	073b      	lsls	r3, r7, #28
    7fc4:	d501      	bpl.n	7fca <f_open+0x72>
			mode |= FA__WRITTEN;
    7fc6:	2320      	movs	r3, #32
    7fc8:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    7fca:	9b85      	ldr	r3, [sp, #532]	; 0x214
    7fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7fce:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    7fd0:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    7fd2:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    7fd4:	7d62      	ldrb	r2, [r4, #21]
    7fd6:	0212      	lsls	r2, r2, #8
    7fd8:	7d23      	ldrb	r3, [r4, #20]
    7fda:	4313      	orrs	r3, r2
    7fdc:	041b      	lsls	r3, r3, #16
    7fde:	7ee1      	ldrb	r1, [r4, #27]
    7fe0:	0209      	lsls	r1, r1, #8
    7fe2:	7ea2      	ldrb	r2, [r4, #26]
    7fe4:	430a      	orrs	r2, r1
    7fe6:	4313      	orrs	r3, r2
    7fe8:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    7fea:	7fe3      	ldrb	r3, [r4, #31]
    7fec:	061b      	lsls	r3, r3, #24
    7fee:	7fa2      	ldrb	r2, [r4, #30]
    7ff0:	0412      	lsls	r2, r2, #16
    7ff2:	4313      	orrs	r3, r2
    7ff4:	7f22      	ldrb	r2, [r4, #28]
    7ff6:	4313      	orrs	r3, r2
    7ff8:	7f62      	ldrb	r2, [r4, #29]
    7ffa:	0212      	lsls	r2, r2, #8
    7ffc:	4313      	orrs	r3, r2
    7ffe:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    8000:	2300      	movs	r3, #0
    8002:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    8004:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    8006:	9b85      	ldr	r3, [sp, #532]	; 0x214
    8008:	602b      	str	r3, [r5, #0]
    800a:	88db      	ldrh	r3, [r3, #6]
    800c:	80ab      	strh	r3, [r5, #4]
    800e:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    8010:	238e      	movs	r3, #142	; 0x8e
    8012:	009b      	lsls	r3, r3, #2
    8014:	449d      	add	sp, r3
    8016:	bc04      	pop	{r2}
    8018:	4690      	mov	r8, r2
    801a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    801c:	2804      	cmp	r0, #4
    801e:	d005      	beq.n	802c <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    8020:	2308      	movs	r3, #8
    8022:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    8024:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    8026:	2800      	cmp	r0, #0
    8028:	d0d3      	beq.n	7fd2 <f_open+0x7a>
    802a:	e7f1      	b.n	8010 <f_open+0xb8>
				res = dir_register(&dj);
    802c:	a885      	add	r0, sp, #532	; 0x214
    802e:	4b28      	ldr	r3, [pc, #160]	; (80d0 <f_open+0x178>)
    8030:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    8032:	2308      	movs	r3, #8
    8034:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    8036:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    8038:	2800      	cmp	r0, #0
    803a:	d008      	beq.n	804e <f_open+0xf6>
    803c:	e7e8      	b.n	8010 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    803e:	7ae3      	ldrb	r3, [r4, #11]
    8040:	2211      	movs	r2, #17
				res = FR_DENIED;
    8042:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    8044:	421a      	tst	r2, r3
    8046:	d1e3      	bne.n	8010 <f_open+0xb8>
					res = FR_EXIST;
    8048:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    804a:	077b      	lsls	r3, r7, #29
    804c:	d4e0      	bmi.n	8010 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    804e:	0733      	lsls	r3, r6, #28
    8050:	d5bb      	bpl.n	7fca <f_open+0x72>
			dw = get_fattime();					/* Created time */
    8052:	4b20      	ldr	r3, [pc, #128]	; (80d4 <f_open+0x17c>)
    8054:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    8056:	73a0      	strb	r0, [r4, #14]
    8058:	0a03      	lsrs	r3, r0, #8
    805a:	73e3      	strb	r3, [r4, #15]
    805c:	0c03      	lsrs	r3, r0, #16
    805e:	7423      	strb	r3, [r4, #16]
    8060:	0e00      	lsrs	r0, r0, #24
    8062:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    8064:	2300      	movs	r3, #0
    8066:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    8068:	7723      	strb	r3, [r4, #28]
    806a:	7763      	strb	r3, [r4, #29]
    806c:	77a3      	strb	r3, [r4, #30]
    806e:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    8070:	7d62      	ldrb	r2, [r4, #21]
    8072:	0212      	lsls	r2, r2, #8
    8074:	7d27      	ldrb	r7, [r4, #20]
    8076:	4317      	orrs	r7, r2
    8078:	043f      	lsls	r7, r7, #16
    807a:	7ee1      	ldrb	r1, [r4, #27]
    807c:	0209      	lsls	r1, r1, #8
    807e:	7ea2      	ldrb	r2, [r4, #26]
    8080:	430a      	orrs	r2, r1
    8082:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    8084:	76a3      	strb	r3, [r4, #26]
    8086:	76e3      	strb	r3, [r4, #27]
    8088:	7523      	strb	r3, [r4, #20]
    808a:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    808c:	9885      	ldr	r0, [sp, #532]	; 0x214
    808e:	3301      	adds	r3, #1
    8090:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    8092:	2f00      	cmp	r7, #0
    8094:	d097      	beq.n	7fc6 <f_open+0x6e>
				dw = dj.fs->winsect;
    8096:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    8098:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    809a:	0039      	movs	r1, r7
    809c:	4b0e      	ldr	r3, [pc, #56]	; (80d8 <f_open+0x180>)
    809e:	4798      	blx	r3
				if (res == FR_OK) {
    80a0:	2800      	cmp	r0, #0
    80a2:	d1b5      	bne.n	8010 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    80a4:	9885      	ldr	r0, [sp, #532]	; 0x214
    80a6:	3f01      	subs	r7, #1
    80a8:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    80aa:	4641      	mov	r1, r8
    80ac:	4b0b      	ldr	r3, [pc, #44]	; (80dc <f_open+0x184>)
    80ae:	4798      	blx	r3
	if (res == FR_OK) {
    80b0:	2800      	cmp	r0, #0
    80b2:	d100      	bne.n	80b6 <f_open+0x15e>
    80b4:	e787      	b.n	7fc6 <f_open+0x6e>
    80b6:	e7ab      	b.n	8010 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    80b8:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    80ba:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    80bc:	423b      	tst	r3, r7
    80be:	d0b2      	beq.n	8026 <f_open+0xce>
			res = FR_INVALID_NAME;
    80c0:	2006      	movs	r0, #6
    80c2:	e7ad      	b.n	8020 <f_open+0xc8>
    80c4:	fffffdc8 	.word	0xfffffdc8
    80c8:	00006ce9 	.word	0x00006ce9
    80cc:	00007be5 	.word	0x00007be5
    80d0:	0000780d 	.word	0x0000780d
    80d4:	00006b69 	.word	0x00006b69
    80d8:	000074d9 	.word	0x000074d9
    80dc:	00007099 	.word	0x00007099

000080e0 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    80e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80e2:	46de      	mov	lr, fp
    80e4:	4657      	mov	r7, sl
    80e6:	464e      	mov	r6, r9
    80e8:	4645      	mov	r5, r8
    80ea:	b5e0      	push	{r5, r6, r7, lr}
    80ec:	b083      	sub	sp, #12
    80ee:	0004      	movs	r4, r0
    80f0:	000f      	movs	r7, r1
    80f2:	0015      	movs	r5, r2
    80f4:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    80f6:	2300      	movs	r3, #0
    80f8:	464a      	mov	r2, r9
    80fa:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    80fc:	8881      	ldrh	r1, [r0, #4]
    80fe:	6800      	ldr	r0, [r0, #0]
    8100:	4b5e      	ldr	r3, [pc, #376]	; (827c <f_read+0x19c>)
    8102:	4798      	blx	r3
    8104:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    8106:	2800      	cmp	r0, #0
    8108:	d000      	beq.n	810c <f_read+0x2c>
    810a:	e0af      	b.n	826c <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    810c:	79a3      	ldrb	r3, [r4, #6]
    810e:	b25a      	sxtb	r2, r3
    8110:	2a00      	cmp	r2, #0
    8112:	da00      	bge.n	8116 <f_read+0x36>
    8114:	e0a8      	b.n	8268 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    8116:	07db      	lsls	r3, r3, #31
    8118:	d402      	bmi.n	8120 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    811a:	2307      	movs	r3, #7
    811c:	9300      	str	r3, [sp, #0]
    811e:	e0a5      	b.n	826c <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    8120:	68e3      	ldr	r3, [r4, #12]
    8122:	68a2      	ldr	r2, [r4, #8]
    8124:	1a9e      	subs	r6, r3, r2
    8126:	42ae      	cmp	r6, r5
    8128:	d900      	bls.n	812c <f_read+0x4c>
    812a:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    812c:	2e00      	cmp	r6, #0
    812e:	d153      	bne.n	81d8 <f_read+0xf8>
    8130:	e09c      	b.n	826c <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    8132:	6961      	ldr	r1, [r4, #20]
    8134:	4b52      	ldr	r3, [pc, #328]	; (8280 <f_read+0x1a0>)
    8136:	4798      	blx	r3
    8138:	e05c      	b.n	81f4 <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    813a:	79a2      	ldrb	r2, [r4, #6]
    813c:	2380      	movs	r3, #128	; 0x80
    813e:	425b      	negs	r3, r3
    8140:	4313      	orrs	r3, r2
    8142:	71a3      	strb	r3, [r4, #6]
    8144:	2302      	movs	r3, #2
    8146:	9300      	str	r3, [sp, #0]
    8148:	e090      	b.n	826c <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    814a:	79a2      	ldrb	r2, [r4, #6]
    814c:	2380      	movs	r3, #128	; 0x80
    814e:	425b      	negs	r3, r3
    8150:	4313      	orrs	r3, r2
    8152:	71a3      	strb	r3, [r4, #6]
    8154:	2301      	movs	r3, #1
    8156:	9300      	str	r3, [sp, #0]
    8158:	e088      	b.n	826c <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    815a:	79a2      	ldrb	r2, [r4, #6]
    815c:	2380      	movs	r3, #128	; 0x80
    815e:	425b      	negs	r3, r3
    8160:	4313      	orrs	r3, r2
    8162:	71a3      	strb	r3, [r4, #6]
    8164:	2302      	movs	r3, #2
    8166:	9300      	str	r3, [sp, #0]
    8168:	e080      	b.n	826c <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    816a:	79a2      	ldrb	r2, [r4, #6]
    816c:	2380      	movs	r3, #128	; 0x80
    816e:	425b      	negs	r3, r3
    8170:	4313      	orrs	r3, r2
    8172:	71a3      	strb	r3, [r4, #6]
    8174:	2301      	movs	r3, #1
    8176:	9300      	str	r3, [sp, #0]
    8178:	e078      	b.n	826c <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    817a:	3130      	adds	r1, #48	; 0x30
    817c:	0240      	lsls	r0, r0, #9
    817e:	1838      	adds	r0, r7, r0
    8180:	2280      	movs	r2, #128	; 0x80
    8182:	0092      	lsls	r2, r2, #2
    8184:	4b3f      	ldr	r3, [pc, #252]	; (8284 <f_read+0x1a4>)
    8186:	4798      	blx	r3
    8188:	e063      	b.n	8252 <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    818a:	4643      	mov	r3, r8
    818c:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    818e:	68a3      	ldr	r3, [r4, #8]
    8190:	05dd      	lsls	r5, r3, #23
    8192:	0ded      	lsrs	r5, r5, #23
    8194:	2380      	movs	r3, #128	; 0x80
    8196:	009b      	lsls	r3, r3, #2
    8198:	1b5d      	subs	r5, r3, r5
    819a:	42b5      	cmp	r5, r6
    819c:	d900      	bls.n	81a0 <f_read+0xc0>
    819e:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    81a0:	69a1      	ldr	r1, [r4, #24]
    81a2:	6820      	ldr	r0, [r4, #0]
    81a4:	4b38      	ldr	r3, [pc, #224]	; (8288 <f_read+0x1a8>)
    81a6:	4798      	blx	r3
    81a8:	2800      	cmp	r0, #0
    81aa:	d155      	bne.n	8258 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    81ac:	68a3      	ldr	r3, [r4, #8]
    81ae:	05d9      	lsls	r1, r3, #23
    81b0:	0dc9      	lsrs	r1, r1, #23
    81b2:	3130      	adds	r1, #48	; 0x30
    81b4:	6823      	ldr	r3, [r4, #0]
    81b6:	469c      	mov	ip, r3
    81b8:	4461      	add	r1, ip
    81ba:	002a      	movs	r2, r5
    81bc:	0038      	movs	r0, r7
    81be:	4b31      	ldr	r3, [pc, #196]	; (8284 <f_read+0x1a4>)
    81c0:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    81c2:	197f      	adds	r7, r7, r5
    81c4:	68a3      	ldr	r3, [r4, #8]
    81c6:	195b      	adds	r3, r3, r5
    81c8:	60a3      	str	r3, [r4, #8]
    81ca:	464b      	mov	r3, r9
    81cc:	681b      	ldr	r3, [r3, #0]
    81ce:	195b      	adds	r3, r3, r5
    81d0:	464a      	mov	r2, r9
    81d2:	6013      	str	r3, [r2, #0]
    81d4:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    81d6:	d049      	beq.n	826c <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    81d8:	68a3      	ldr	r3, [r4, #8]
    81da:	05da      	lsls	r2, r3, #23
    81dc:	d1d7      	bne.n	818e <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    81de:	6820      	ldr	r0, [r4, #0]
    81e0:	7882      	ldrb	r2, [r0, #2]
    81e2:	3a01      	subs	r2, #1
    81e4:	0a5d      	lsrs	r5, r3, #9
    81e6:	4015      	ands	r5, r2
    81e8:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    81ea:	2d00      	cmp	r5, #0
    81ec:	d107      	bne.n	81fe <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    81ee:	2b00      	cmp	r3, #0
    81f0:	d19f      	bne.n	8132 <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    81f2:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    81f4:	2801      	cmp	r0, #1
    81f6:	d9a0      	bls.n	813a <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    81f8:	1c43      	adds	r3, r0, #1
    81fa:	d0a6      	beq.n	814a <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    81fc:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    81fe:	6823      	ldr	r3, [r4, #0]
    8200:	469a      	mov	sl, r3
    8202:	6961      	ldr	r1, [r4, #20]
    8204:	0018      	movs	r0, r3
    8206:	4b21      	ldr	r3, [pc, #132]	; (828c <f_read+0x1ac>)
    8208:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    820a:	2800      	cmp	r0, #0
    820c:	d0a5      	beq.n	815a <f_read+0x7a>
			sect += csect;
    820e:	4680      	mov	r8, r0
    8210:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    8212:	0a73      	lsrs	r3, r6, #9
    8214:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    8216:	d0b8      	beq.n	818a <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    8218:	4653      	mov	r3, sl
    821a:	789b      	ldrb	r3, [r3, #2]
    821c:	465a      	mov	r2, fp
    821e:	18aa      	adds	r2, r5, r2
    8220:	429a      	cmp	r2, r3
    8222:	d901      	bls.n	8228 <f_read+0x148>
					cc = fp->fs->csize - csect;
    8224:	1b5b      	subs	r3, r3, r5
    8226:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    8228:	465b      	mov	r3, fp
    822a:	466a      	mov	r2, sp
    822c:	71d3      	strb	r3, [r2, #7]
    822e:	79d3      	ldrb	r3, [r2, #7]
    8230:	4652      	mov	r2, sl
    8232:	7850      	ldrb	r0, [r2, #1]
    8234:	4642      	mov	r2, r8
    8236:	0039      	movs	r1, r7
    8238:	4d15      	ldr	r5, [pc, #84]	; (8290 <f_read+0x1b0>)
    823a:	47a8      	blx	r5
    823c:	2800      	cmp	r0, #0
    823e:	d194      	bne.n	816a <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    8240:	6821      	ldr	r1, [r4, #0]
    8242:	790b      	ldrb	r3, [r1, #4]
    8244:	2b00      	cmp	r3, #0
    8246:	d004      	beq.n	8252 <f_read+0x172>
    8248:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    824a:	4642      	mov	r2, r8
    824c:	1a98      	subs	r0, r3, r2
    824e:	4583      	cmp	fp, r0
    8250:	d893      	bhi.n	817a <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    8252:	465b      	mov	r3, fp
    8254:	025d      	lsls	r5, r3, #9
				continue;
    8256:	e7b4      	b.n	81c2 <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    8258:	79a2      	ldrb	r2, [r4, #6]
    825a:	2380      	movs	r3, #128	; 0x80
    825c:	425b      	negs	r3, r3
    825e:	4313      	orrs	r3, r2
    8260:	71a3      	strb	r3, [r4, #6]
    8262:	2301      	movs	r3, #1
    8264:	9300      	str	r3, [sp, #0]
    8266:	e001      	b.n	826c <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    8268:	2302      	movs	r3, #2
    826a:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    826c:	9800      	ldr	r0, [sp, #0]
    826e:	b003      	add	sp, #12
    8270:	bc3c      	pop	{r2, r3, r4, r5}
    8272:	4690      	mov	r8, r2
    8274:	4699      	mov	r9, r3
    8276:	46a2      	mov	sl, r4
    8278:	46ab      	mov	fp, r5
    827a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    827c:	00006c15 	.word	0x00006c15
    8280:	00007139 	.word	0x00007139
    8284:	00006bb9 	.word	0x00006bb9
    8288:	00007099 	.word	0x00007099
    828c:	00006bdf 	.word	0x00006bdf
    8290:	000069f5 	.word	0x000069f5

00008294 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    8294:	b5f0      	push	{r4, r5, r6, r7, lr}
    8296:	46de      	mov	lr, fp
    8298:	4657      	mov	r7, sl
    829a:	464e      	mov	r6, r9
    829c:	4645      	mov	r5, r8
    829e:	b5e0      	push	{r5, r6, r7, lr}
    82a0:	b083      	sub	sp, #12
    82a2:	0004      	movs	r4, r0
    82a4:	000d      	movs	r5, r1
    82a6:	0016      	movs	r6, r2
    82a8:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    82aa:	2300      	movs	r3, #0
    82ac:	464a      	mov	r2, r9
    82ae:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    82b0:	8881      	ldrh	r1, [r0, #4]
    82b2:	6800      	ldr	r0, [r0, #0]
    82b4:	4b7f      	ldr	r3, [pc, #508]	; (84b4 <f_write+0x220>)
    82b6:	4798      	blx	r3
    82b8:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    82ba:	2800      	cmp	r0, #0
    82bc:	d000      	beq.n	82c0 <f_write+0x2c>
    82be:	e0f1      	b.n	84a4 <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    82c0:	79a3      	ldrb	r3, [r4, #6]
    82c2:	b25a      	sxtb	r2, r3
    82c4:	2a00      	cmp	r2, #0
    82c6:	da00      	bge.n	82ca <f_write+0x36>
    82c8:	e0ea      	b.n	84a0 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    82ca:	079b      	lsls	r3, r3, #30
    82cc:	d402      	bmi.n	82d4 <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    82ce:	2307      	movs	r3, #7
    82d0:	9300      	str	r3, [sp, #0]
    82d2:	e0e7      	b.n	84a4 <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    82d4:	68e3      	ldr	r3, [r4, #12]
    82d6:	199a      	adds	r2, r3, r6
    82d8:	4293      	cmp	r3, r2
    82da:	d810      	bhi.n	82fe <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    82dc:	2e00      	cmp	r6, #0
    82de:	d00e      	beq.n	82fe <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    82e0:	002f      	movs	r7, r5
    82e2:	e07b      	b.n	83dc <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    82e4:	2100      	movs	r1, #0
    82e6:	4b74      	ldr	r3, [pc, #464]	; (84b8 <f_write+0x224>)
    82e8:	4798      	blx	r3
    82ea:	0003      	movs	r3, r0
    82ec:	6120      	str	r0, [r4, #16]
    82ee:	e003      	b.n	82f8 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    82f0:	6961      	ldr	r1, [r4, #20]
    82f2:	4b71      	ldr	r3, [pc, #452]	; (84b8 <f_write+0x224>)
    82f4:	4798      	blx	r3
    82f6:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    82f8:	2b00      	cmp	r3, #0
    82fa:	d000      	beq.n	82fe <f_write+0x6a>
    82fc:	e080      	b.n	8400 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    82fe:	68a3      	ldr	r3, [r4, #8]
    8300:	68e2      	ldr	r2, [r4, #12]
    8302:	4293      	cmp	r3, r2
    8304:	d900      	bls.n	8308 <f_write+0x74>
    8306:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    8308:	79a3      	ldrb	r3, [r4, #6]
    830a:	2220      	movs	r2, #32
    830c:	4313      	orrs	r3, r2
    830e:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    8310:	e0c8      	b.n	84a4 <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    8312:	79a2      	ldrb	r2, [r4, #6]
    8314:	3b81      	subs	r3, #129	; 0x81
    8316:	4313      	orrs	r3, r2
    8318:	71a3      	strb	r3, [r4, #6]
    831a:	2302      	movs	r3, #2
    831c:	9300      	str	r3, [sp, #0]
    831e:	e0c1      	b.n	84a4 <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8320:	79a2      	ldrb	r2, [r4, #6]
    8322:	3b7f      	subs	r3, #127	; 0x7f
    8324:	4313      	orrs	r3, r2
    8326:	71a3      	strb	r3, [r4, #6]
    8328:	2301      	movs	r3, #1
    832a:	9300      	str	r3, [sp, #0]
    832c:	e0ba      	b.n	84a4 <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    832e:	2100      	movs	r1, #0
    8330:	4b62      	ldr	r3, [pc, #392]	; (84bc <f_write+0x228>)
    8332:	4798      	blx	r3
    8334:	2800      	cmp	r0, #0
    8336:	d06d      	beq.n	8414 <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    8338:	79a2      	ldrb	r2, [r4, #6]
    833a:	2380      	movs	r3, #128	; 0x80
    833c:	425b      	negs	r3, r3
    833e:	4313      	orrs	r3, r2
    8340:	71a3      	strb	r3, [r4, #6]
    8342:	2301      	movs	r3, #1
    8344:	9300      	str	r3, [sp, #0]
    8346:	e0ad      	b.n	84a4 <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    8348:	79a2      	ldrb	r2, [r4, #6]
    834a:	2380      	movs	r3, #128	; 0x80
    834c:	425b      	negs	r3, r3
    834e:	4313      	orrs	r3, r2
    8350:	71a3      	strb	r3, [r4, #6]
    8352:	2302      	movs	r3, #2
    8354:	9300      	str	r3, [sp, #0]
    8356:	e0a5      	b.n	84a4 <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    8358:	79a2      	ldrb	r2, [r4, #6]
    835a:	2380      	movs	r3, #128	; 0x80
    835c:	425b      	negs	r3, r3
    835e:	4313      	orrs	r3, r2
    8360:	71a3      	strb	r3, [r4, #6]
    8362:	2301      	movs	r3, #1
    8364:	9300      	str	r3, [sp, #0]
    8366:	e09d      	b.n	84a4 <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    8368:	0240      	lsls	r0, r0, #9
    836a:	1839      	adds	r1, r7, r0
    836c:	3330      	adds	r3, #48	; 0x30
    836e:	0018      	movs	r0, r3
    8370:	2280      	movs	r2, #128	; 0x80
    8372:	0092      	lsls	r2, r2, #2
    8374:	4b52      	ldr	r3, [pc, #328]	; (84c0 <f_write+0x22c>)
    8376:	4798      	blx	r3
					fp->fs->wflag = 0;
    8378:	2300      	movs	r3, #0
    837a:	6822      	ldr	r2, [r4, #0]
    837c:	7113      	strb	r3, [r2, #4]
    837e:	e072      	b.n	8466 <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    8380:	68a3      	ldr	r3, [r4, #8]
    8382:	68e2      	ldr	r2, [r4, #12]
    8384:	4293      	cmp	r3, r2
    8386:	d271      	bcs.n	846c <f_write+0x1d8>
			fp->dsect = sect;
    8388:	4643      	mov	r3, r8
    838a:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    838c:	68a3      	ldr	r3, [r4, #8]
    838e:	05dd      	lsls	r5, r3, #23
    8390:	0ded      	lsrs	r5, r5, #23
    8392:	2380      	movs	r3, #128	; 0x80
    8394:	009b      	lsls	r3, r3, #2
    8396:	1b5d      	subs	r5, r3, r5
    8398:	42b5      	cmp	r5, r6
    839a:	d900      	bls.n	839e <f_write+0x10a>
    839c:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    839e:	69a1      	ldr	r1, [r4, #24]
    83a0:	6820      	ldr	r0, [r4, #0]
    83a2:	4b46      	ldr	r3, [pc, #280]	; (84bc <f_write+0x228>)
    83a4:	4798      	blx	r3
    83a6:	2800      	cmp	r0, #0
    83a8:	d172      	bne.n	8490 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    83aa:	68a3      	ldr	r3, [r4, #8]
    83ac:	05d8      	lsls	r0, r3, #23
    83ae:	0dc0      	lsrs	r0, r0, #23
    83b0:	3030      	adds	r0, #48	; 0x30
    83b2:	6823      	ldr	r3, [r4, #0]
    83b4:	469c      	mov	ip, r3
    83b6:	4460      	add	r0, ip
    83b8:	002a      	movs	r2, r5
    83ba:	0039      	movs	r1, r7
    83bc:	4b40      	ldr	r3, [pc, #256]	; (84c0 <f_write+0x22c>)
    83be:	4798      	blx	r3
		fp->fs->wflag = 1;
    83c0:	2301      	movs	r3, #1
    83c2:	6822      	ldr	r2, [r4, #0]
    83c4:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    83c6:	197f      	adds	r7, r7, r5
    83c8:	68a3      	ldr	r3, [r4, #8]
    83ca:	195b      	adds	r3, r3, r5
    83cc:	60a3      	str	r3, [r4, #8]
    83ce:	464b      	mov	r3, r9
    83d0:	681b      	ldr	r3, [r3, #0]
    83d2:	195b      	adds	r3, r3, r5
    83d4:	464a      	mov	r2, r9
    83d6:	6013      	str	r3, [r2, #0]
    83d8:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    83da:	d090      	beq.n	82fe <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    83dc:	68a3      	ldr	r3, [r4, #8]
    83de:	05da      	lsls	r2, r3, #23
    83e0:	d1d4      	bne.n	838c <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    83e2:	6820      	ldr	r0, [r4, #0]
    83e4:	7882      	ldrb	r2, [r0, #2]
    83e6:	3a01      	subs	r2, #1
    83e8:	0a5d      	lsrs	r5, r3, #9
    83ea:	4015      	ands	r5, r2
    83ec:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    83ee:	2d00      	cmp	r5, #0
    83f0:	d10b      	bne.n	840a <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    83f2:	2b00      	cmp	r3, #0
    83f4:	d000      	beq.n	83f8 <f_write+0x164>
    83f6:	e77b      	b.n	82f0 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    83f8:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    83fa:	2b00      	cmp	r3, #0
    83fc:	d100      	bne.n	8400 <f_write+0x16c>
    83fe:	e771      	b.n	82e4 <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    8400:	2b01      	cmp	r3, #1
    8402:	d086      	beq.n	8312 <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    8404:	1c5a      	adds	r2, r3, #1
    8406:	d08b      	beq.n	8320 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    8408:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    840a:	6820      	ldr	r0, [r4, #0]
    840c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    840e:	69a2      	ldr	r2, [r4, #24]
    8410:	4293      	cmp	r3, r2
    8412:	d08c      	beq.n	832e <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    8414:	6823      	ldr	r3, [r4, #0]
    8416:	469a      	mov	sl, r3
    8418:	6961      	ldr	r1, [r4, #20]
    841a:	0018      	movs	r0, r3
    841c:	4b29      	ldr	r3, [pc, #164]	; (84c4 <f_write+0x230>)
    841e:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    8420:	2800      	cmp	r0, #0
    8422:	d091      	beq.n	8348 <f_write+0xb4>
			sect += csect;
    8424:	4680      	mov	r8, r0
    8426:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    8428:	0a73      	lsrs	r3, r6, #9
    842a:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    842c:	d0a8      	beq.n	8380 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    842e:	4653      	mov	r3, sl
    8430:	789b      	ldrb	r3, [r3, #2]
    8432:	465a      	mov	r2, fp
    8434:	18aa      	adds	r2, r5, r2
    8436:	429a      	cmp	r2, r3
    8438:	d901      	bls.n	843e <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    843a:	1b5b      	subs	r3, r3, r5
    843c:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    843e:	465b      	mov	r3, fp
    8440:	466a      	mov	r2, sp
    8442:	71d3      	strb	r3, [r2, #7]
    8444:	79d3      	ldrb	r3, [r2, #7]
    8446:	4652      	mov	r2, sl
    8448:	7850      	ldrb	r0, [r2, #1]
    844a:	4642      	mov	r2, r8
    844c:	0039      	movs	r1, r7
    844e:	4d1e      	ldr	r5, [pc, #120]	; (84c8 <f_write+0x234>)
    8450:	47a8      	blx	r5
    8452:	2800      	cmp	r0, #0
    8454:	d000      	beq.n	8458 <f_write+0x1c4>
    8456:	e77f      	b.n	8358 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    8458:	6823      	ldr	r3, [r4, #0]
    845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    845c:	4641      	mov	r1, r8
    845e:	1a50      	subs	r0, r2, r1
    8460:	4583      	cmp	fp, r0
    8462:	d900      	bls.n	8466 <f_write+0x1d2>
    8464:	e780      	b.n	8368 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    8466:	465b      	mov	r3, fp
    8468:	025d      	lsls	r5, r3, #9
				continue;
    846a:	e7ac      	b.n	83c6 <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    846c:	2100      	movs	r1, #0
    846e:	4650      	mov	r0, sl
    8470:	4b12      	ldr	r3, [pc, #72]	; (84bc <f_write+0x228>)
    8472:	4798      	blx	r3
    8474:	2800      	cmp	r0, #0
    8476:	d103      	bne.n	8480 <f_write+0x1ec>
				fp->fs->winsect = sect;
    8478:	6823      	ldr	r3, [r4, #0]
    847a:	4642      	mov	r2, r8
    847c:	62da      	str	r2, [r3, #44]	; 0x2c
    847e:	e783      	b.n	8388 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    8480:	79a2      	ldrb	r2, [r4, #6]
    8482:	2380      	movs	r3, #128	; 0x80
    8484:	425b      	negs	r3, r3
    8486:	4313      	orrs	r3, r2
    8488:	71a3      	strb	r3, [r4, #6]
    848a:	2301      	movs	r3, #1
    848c:	9300      	str	r3, [sp, #0]
    848e:	e009      	b.n	84a4 <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    8490:	79a2      	ldrb	r2, [r4, #6]
    8492:	2380      	movs	r3, #128	; 0x80
    8494:	425b      	negs	r3, r3
    8496:	4313      	orrs	r3, r2
    8498:	71a3      	strb	r3, [r4, #6]
    849a:	2301      	movs	r3, #1
    849c:	9300      	str	r3, [sp, #0]
    849e:	e001      	b.n	84a4 <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    84a0:	2302      	movs	r3, #2
    84a2:	9300      	str	r3, [sp, #0]
}
    84a4:	9800      	ldr	r0, [sp, #0]
    84a6:	b003      	add	sp, #12
    84a8:	bc3c      	pop	{r2, r3, r4, r5}
    84aa:	4690      	mov	r8, r2
    84ac:	4699      	mov	r9, r3
    84ae:	46a2      	mov	sl, r4
    84b0:	46ab      	mov	fp, r5
    84b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    84b4:	00006c15 	.word	0x00006c15
    84b8:	00007415 	.word	0x00007415
    84bc:	00007099 	.word	0x00007099
    84c0:	00006bb9 	.word	0x00006bb9
    84c4:	00006bdf 	.word	0x00006bdf
    84c8:	00006a79 	.word	0x00006a79

000084cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    84cc:	b570      	push	{r4, r5, r6, lr}
    84ce:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    84d0:	8881      	ldrh	r1, [r0, #4]
    84d2:	6800      	ldr	r0, [r0, #0]
    84d4:	4b1c      	ldr	r3, [pc, #112]	; (8548 <f_sync+0x7c>)
    84d6:	4798      	blx	r3
	if (res == FR_OK) {
    84d8:	2800      	cmp	r0, #0
    84da:	d102      	bne.n	84e2 <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    84dc:	79a3      	ldrb	r3, [r4, #6]
    84de:	069b      	lsls	r3, r3, #26
    84e0:	d400      	bmi.n	84e4 <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    84e2:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    84e4:	69e1      	ldr	r1, [r4, #28]
    84e6:	6820      	ldr	r0, [r4, #0]
    84e8:	4b18      	ldr	r3, [pc, #96]	; (854c <f_sync+0x80>)
    84ea:	4798      	blx	r3
			if (res == FR_OK) {
    84ec:	2800      	cmp	r0, #0
    84ee:	d1f8      	bne.n	84e2 <f_sync+0x16>
				dir = fp->dir_ptr;
    84f0:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    84f2:	7aeb      	ldrb	r3, [r5, #11]
    84f4:	2220      	movs	r2, #32
    84f6:	4313      	orrs	r3, r2
    84f8:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    84fa:	7b23      	ldrb	r3, [r4, #12]
    84fc:	772b      	strb	r3, [r5, #28]
    84fe:	89a3      	ldrh	r3, [r4, #12]
    8500:	0a1b      	lsrs	r3, r3, #8
    8502:	776b      	strb	r3, [r5, #29]
    8504:	89e3      	ldrh	r3, [r4, #14]
    8506:	77ab      	strb	r3, [r5, #30]
    8508:	7be3      	ldrb	r3, [r4, #15]
    850a:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    850c:	7c23      	ldrb	r3, [r4, #16]
    850e:	76ab      	strb	r3, [r5, #26]
    8510:	8a23      	ldrh	r3, [r4, #16]
    8512:	0a1b      	lsrs	r3, r3, #8
    8514:	76eb      	strb	r3, [r5, #27]
    8516:	8a63      	ldrh	r3, [r4, #18]
    8518:	752b      	strb	r3, [r5, #20]
    851a:	8a63      	ldrh	r3, [r4, #18]
    851c:	0a1b      	lsrs	r3, r3, #8
    851e:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    8520:	4b0b      	ldr	r3, [pc, #44]	; (8550 <f_sync+0x84>)
    8522:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    8524:	75a8      	strb	r0, [r5, #22]
    8526:	0a03      	lsrs	r3, r0, #8
    8528:	75eb      	strb	r3, [r5, #23]
    852a:	0c03      	lsrs	r3, r0, #16
    852c:	762b      	strb	r3, [r5, #24]
    852e:	0e00      	lsrs	r0, r0, #24
    8530:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    8532:	79a3      	ldrb	r3, [r4, #6]
    8534:	2220      	movs	r2, #32
    8536:	4393      	bics	r3, r2
    8538:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    853a:	2301      	movs	r3, #1
    853c:	6822      	ldr	r2, [r4, #0]
    853e:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    8540:	6820      	ldr	r0, [r4, #0]
    8542:	4b04      	ldr	r3, [pc, #16]	; (8554 <f_sync+0x88>)
    8544:	4798      	blx	r3
    8546:	e7cc      	b.n	84e2 <f_sync+0x16>
    8548:	00006c15 	.word	0x00006c15
    854c:	00007099 	.word	0x00007099
    8550:	00006b69 	.word	0x00006b69
    8554:	00007af1 	.word	0x00007af1

00008558 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    8558:	b510      	push	{r4, lr}
    855a:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    855c:	4b03      	ldr	r3, [pc, #12]	; (856c <f_close+0x14>)
    855e:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    8560:	2800      	cmp	r0, #0
    8562:	d101      	bne.n	8568 <f_close+0x10>
    8564:	2300      	movs	r3, #0
    8566:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    8568:	bd10      	pop	{r4, pc}
    856a:	46c0      	nop			; (mov r8, r8)
    856c:	000084cd 	.word	0x000084cd

00008570 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
    8570:	b5f0      	push	{r4, r5, r6, r7, lr}
    8572:	46c6      	mov	lr, r8
    8574:	b500      	push	{lr}
    8576:	b084      	sub	sp, #16
    8578:	0007      	movs	r7, r0
    857a:	9201      	str	r2, [sp, #4]
	int n = 0;
	TCHAR c, *p = buff;
    857c:	0005      	movs	r5, r0
	int n = 0;
    857e:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    8580:	1e4b      	subs	r3, r1, #1
    8582:	4698      	mov	r8, r3
		f_read(fil, s, 1, &rc);
    8584:	4e0e      	ldr	r6, [pc, #56]	; (85c0 <f_gets+0x50>)
	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    8586:	4544      	cmp	r4, r8
    8588:	da0e      	bge.n	85a8 <f_gets+0x38>
		f_read(fil, s, 1, &rc);
    858a:	ab02      	add	r3, sp, #8
    858c:	2201      	movs	r2, #1
    858e:	a903      	add	r1, sp, #12
    8590:	9801      	ldr	r0, [sp, #4]
    8592:	47b0      	blx	r6
		if (rc != 1) break;			/* Break on EOF or error */
    8594:	9b02      	ldr	r3, [sp, #8]
    8596:	2b01      	cmp	r3, #1
    8598:	d106      	bne.n	85a8 <f_gets+0x38>
		c = s[0];
    859a:	ab03      	add	r3, sp, #12
    859c:	781b      	ldrb	r3, [r3, #0]
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
    859e:	3501      	adds	r5, #1
    85a0:	553b      	strb	r3, [r7, r4]
		n++;
    85a2:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
    85a4:	2b0a      	cmp	r3, #10
    85a6:	d1ee      	bne.n	8586 <f_gets+0x16>
	}
	*p = 0;
    85a8:	2300      	movs	r3, #0
    85aa:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    85ac:	1e63      	subs	r3, r4, #1
    85ae:	419c      	sbcs	r4, r3
    85b0:	4264      	negs	r4, r4
    85b2:	4027      	ands	r7, r4
}
    85b4:	0038      	movs	r0, r7
    85b6:	b004      	add	sp, #16
    85b8:	bc04      	pop	{r2}
    85ba:	4690      	mov	r8, r2
    85bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85be:	46c0      	nop			; (mov r8, r8)
    85c0:	000080e1 	.word	0x000080e1

000085c4 <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    85c4:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    85c6:	287f      	cmp	r0, #127	; 0x7f
    85c8:	d911      	bls.n	85ee <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    85ca:	2900      	cmp	r1, #0
    85cc:	d111      	bne.n	85f2 <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    85ce:	28c7      	cmp	r0, #199	; 0xc7
    85d0:	d017      	beq.n	8602 <ff_convert+0x3e>
    85d2:	4a0d      	ldr	r2, [pc, #52]	; (8608 <ff_convert+0x44>)
    85d4:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    85d6:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    85d8:	8811      	ldrh	r1, [r2, #0]
    85da:	4281      	cmp	r1, r0
    85dc:	d004      	beq.n	85e8 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    85de:	3301      	adds	r3, #1
    85e0:	b29b      	uxth	r3, r3
    85e2:	3202      	adds	r2, #2
    85e4:	2b80      	cmp	r3, #128	; 0x80
    85e6:	d1f7      	bne.n	85d8 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    85e8:	3380      	adds	r3, #128	; 0x80
    85ea:	20ff      	movs	r0, #255	; 0xff
    85ec:	4003      	ands	r3, r0
		}
	}

	return c;
}
    85ee:	0018      	movs	r0, r3
    85f0:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    85f2:	2300      	movs	r3, #0
    85f4:	28ff      	cmp	r0, #255	; 0xff
    85f6:	d8fa      	bhi.n	85ee <ff_convert+0x2a>
    85f8:	3880      	subs	r0, #128	; 0x80
    85fa:	0040      	lsls	r0, r0, #1
    85fc:	4b02      	ldr	r3, [pc, #8]	; (8608 <ff_convert+0x44>)
    85fe:	5ac3      	ldrh	r3, [r0, r3]
    8600:	e7f5      	b.n	85ee <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    8602:	2300      	movs	r3, #0
    8604:	e7f0      	b.n	85e8 <ff_convert+0x24>
    8606:	46c0      	nop			; (mov r8, r8)
    8608:	0000e05c 	.word	0x0000e05c

0000860c <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    860c:	2861      	cmp	r0, #97	; 0x61
    860e:	d014      	beq.n	863a <ff_wtoupper+0x2e>
    8610:	4b0b      	ldr	r3, [pc, #44]	; (8640 <ff_wtoupper+0x34>)
    8612:	3304      	adds	r3, #4
    8614:	2101      	movs	r1, #1
    8616:	2262      	movs	r2, #98	; 0x62
    8618:	4290      	cmp	r0, r2
    861a:	d007      	beq.n	862c <ff_wtoupper+0x20>
    861c:	3101      	adds	r1, #1
    861e:	3302      	adds	r3, #2
    8620:	1e9a      	subs	r2, r3, #2
    8622:	8812      	ldrh	r2, [r2, #0]
    8624:	2a00      	cmp	r2, #0
    8626:	d1f7      	bne.n	8618 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    8628:	0003      	movs	r3, r0
    862a:	e004      	b.n	8636 <ff_wtoupper+0x2a>
    862c:	1e03      	subs	r3, r0, #0
    862e:	d002      	beq.n	8636 <ff_wtoupper+0x2a>
    8630:	0049      	lsls	r1, r1, #1
    8632:	4b04      	ldr	r3, [pc, #16]	; (8644 <ff_wtoupper+0x38>)
    8634:	5acb      	ldrh	r3, [r1, r3]
}
    8636:	0018      	movs	r0, r3
    8638:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    863a:	2100      	movs	r1, #0
    863c:	e7f8      	b.n	8630 <ff_wtoupper+0x24>
    863e:	46c0      	nop			; (mov r8, r8)
    8640:	0000e15c 	.word	0x0000e15c
    8644:	0000e33c 	.word	0x0000e33c

00008648 <sendPacket>:
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
}


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
    8648:	b5f0      	push	{r4, r5, r6, r7, lr}
    864a:	46de      	mov	lr, fp
    864c:	4657      	mov	r7, sl
    864e:	464e      	mov	r6, r9
    8650:	4645      	mov	r5, r8
    8652:	b5e0      	push	{r5, r6, r7, lr}
    8654:	b083      	sub	sp, #12
    8656:	0007      	movs	r7, r0
    8658:	4688      	mov	r8, r1
    865a:	9201      	str	r2, [sp, #4]
    int rc = FAILURE, 
        sent = 0;
    
    while (sent < length && !TimerIsExpired(timer))
    865c:	2400      	movs	r4, #0
    865e:	2900      	cmp	r1, #0
    8660:	dd18      	ble.n	8694 <sendPacket+0x4c>
    8662:	4b15      	ldr	r3, [pc, #84]	; (86b8 <sendPacket+0x70>)
    8664:	469a      	mov	sl, r3
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    8666:	4b15      	ldr	r3, [pc, #84]	; (86bc <sendPacket+0x74>)
    8668:	469b      	mov	fp, r3
    while (sent < length && !TimerIsExpired(timer))
    866a:	9801      	ldr	r0, [sp, #4]
    866c:	47d0      	blx	sl
    866e:	2800      	cmp	r0, #0
    8670:	d110      	bne.n	8694 <sendPacket+0x4c>
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
    8672:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    8674:	68f3      	ldr	r3, [r6, #12]
    8676:	4699      	mov	r9, r3
    8678:	693b      	ldr	r3, [r7, #16]
    867a:	191d      	adds	r5, r3, r4
    867c:	9801      	ldr	r0, [sp, #4]
    867e:	47d8      	blx	fp
    8680:	0003      	movs	r3, r0
    8682:	4642      	mov	r2, r8
    8684:	0029      	movs	r1, r5
    8686:	0030      	movs	r0, r6
    8688:	47c8      	blx	r9
        if (rc < 0)  // there was an error writing the data
    868a:	2800      	cmp	r0, #0
    868c:	db02      	blt.n	8694 <sendPacket+0x4c>
            break;
        sent += rc;
    868e:	1824      	adds	r4, r4, r0
    while (sent < length && !TimerIsExpired(timer))
    8690:	45a0      	cmp	r8, r4
    8692:	dcea      	bgt.n	866a <sendPacket+0x22>
    }
    if (sent == length)
    8694:	45a0      	cmp	r8, r4
    8696:	d10c      	bne.n	86b2 <sendPacket+0x6a>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
    8698:	69b9      	ldr	r1, [r7, #24]
    869a:	0038      	movs	r0, r7
    869c:	3054      	adds	r0, #84	; 0x54
    869e:	4b08      	ldr	r3, [pc, #32]	; (86c0 <sendPacket+0x78>)
    86a0:	4798      	blx	r3
        rc = SUCCESS;
    86a2:	2000      	movs	r0, #0
    }
    else
        rc = FAILURE;
    return rc;
}
    86a4:	b003      	add	sp, #12
    86a6:	bc3c      	pop	{r2, r3, r4, r5}
    86a8:	4690      	mov	r8, r2
    86aa:	4699      	mov	r9, r3
    86ac:	46a2      	mov	sl, r4
    86ae:	46ab      	mov	fp, r5
    86b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = FAILURE;
    86b2:	2001      	movs	r0, #1
    86b4:	4240      	negs	r0, r0
    return rc;
    86b6:	e7f5      	b.n	86a4 <sendPacket+0x5c>
    86b8:	00008dd9 	.word	0x00008dd9
    86bc:	00008e0d 	.word	0x00008e0d
    86c0:	00008df9 	.word	0x00008df9

000086c4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
    86c4:	b510      	push	{r4, lr}
    int i;
    c->ipstack = network;
    86c6:	6501      	str	r1, [r0, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
        c->messageHandlers[i].topicFilter = 0;
    86c8:	2100      	movs	r1, #0
    86ca:	6241      	str	r1, [r0, #36]	; 0x24
    86cc:	62c1      	str	r1, [r0, #44]	; 0x2c
    86ce:	6341      	str	r1, [r0, #52]	; 0x34
    86d0:	63c1      	str	r1, [r0, #60]	; 0x3c
    86d2:	6441      	str	r1, [r0, #68]	; 0x44
    c->command_timeout_ms = command_timeout_ms;
    86d4:	6042      	str	r2, [r0, #4]
    c->buf = sendbuf;
    86d6:	6103      	str	r3, [r0, #16]
    c->buf_size = sendbuf_size;
    86d8:	9b02      	ldr	r3, [sp, #8]
    86da:	6083      	str	r3, [r0, #8]
    c->readbuf = readbuf;
    86dc:	9b03      	ldr	r3, [sp, #12]
    86de:	6143      	str	r3, [r0, #20]
    c->readbuf_size = readbuf_size;
    86e0:	9b04      	ldr	r3, [sp, #16]
    86e2:	60c3      	str	r3, [r0, #12]
    c->isconnected = 0;
    86e4:	6201      	str	r1, [r0, #32]
    c->ping_outstanding = 0;
    86e6:	7701      	strb	r1, [r0, #28]
    c->defaultMessageHandler = NULL;
    86e8:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->next_packetid = 1;
    86ea:	2301      	movs	r3, #1
    86ec:	6003      	str	r3, [r0, #0]
    TimerInit(&c->ping_timer);
    86ee:	3054      	adds	r0, #84	; 0x54
    86f0:	4b01      	ldr	r3, [pc, #4]	; (86f8 <MQTTClientInit+0x34>)
    86f2:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
    86f4:	bd10      	pop	{r4, pc}
    86f6:	46c0      	nop			; (mov r8, r8)
    86f8:	00008e21 	.word	0x00008e21

000086fc <deliverMessage>:
    return (curn == curn_end) && (*curf == '\0');
}


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
    86fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    86fe:	46de      	mov	lr, fp
    8700:	4657      	mov	r7, sl
    8702:	464e      	mov	r6, r9
    8704:	4645      	mov	r5, r8
    8706:	b5e0      	push	{r5, r6, r7, lr}
    8708:	b085      	sub	sp, #20
    870a:	4682      	mov	sl, r0
    870c:	000f      	movs	r7, r1
    870e:	4691      	mov	r9, r2
    8710:	0004      	movs	r4, r0
    8712:	3424      	adds	r4, #36	; 0x24
    8714:	234c      	movs	r3, #76	; 0x4c
    8716:	4453      	add	r3, sl
    8718:	4698      	mov	r8, r3
    int i;
    int rc = FAILURE;
    871a:	2301      	movs	r3, #1
    871c:	425b      	negs	r3, r3
    871e:	9301      	str	r3, [sp, #4]
    8720:	e056      	b.n	87d0 <deliverMessage+0xd4>

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
    8722:	6821      	ldr	r1, [r4, #0]
    char* curn = topicName->lenstring.data;
    8724:	68bb      	ldr	r3, [r7, #8]
    char* curn_end = curn + topicName->lenstring.len;
    8726:	687a      	ldr	r2, [r7, #4]
    8728:	189e      	adds	r6, r3, r2
    while (*curf && curn < curn_end)
    872a:	780a      	ldrb	r2, [r1, #0]
    872c:	2a00      	cmp	r2, #0
    872e:	d04a      	beq.n	87c6 <deliverMessage+0xca>
    8730:	42b3      	cmp	r3, r6
    8732:	d24a      	bcs.n	87ca <deliverMessage+0xce>
    8734:	3101      	adds	r1, #1
    8736:	1e70      	subs	r0, r6, #1
    8738:	e008      	b.n	874c <deliverMessage+0x50>
        if (*curn == '/' && *curf != '/')
    873a:	2a2f      	cmp	r2, #47	; 0x2f
    873c:	d10f      	bne.n	875e <deliverMessage+0x62>
        curn++;
    873e:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    8740:	780a      	ldrb	r2, [r1, #0]
    8742:	2a00      	cmp	r2, #0
    8744:	d03f      	beq.n	87c6 <deliverMessage+0xca>
    8746:	429e      	cmp	r6, r3
    8748:	d93f      	bls.n	87ca <deliverMessage+0xce>
    874a:	3101      	adds	r1, #1
        if (*curn == '/' && *curf != '/')
    874c:	781d      	ldrb	r5, [r3, #0]
    874e:	2d2f      	cmp	r5, #47	; 0x2f
    8750:	d0f3      	beq.n	873a <deliverMessage+0x3e>
        if (*curf != '+' && *curf != '#' && *curf != *curn)
    8752:	2a2b      	cmp	r2, #43	; 0x2b
    8754:	d008      	beq.n	8768 <deliverMessage+0x6c>
    8756:	2a23      	cmp	r2, #35	; 0x23
    8758:	d013      	beq.n	8782 <deliverMessage+0x86>
    875a:	4295      	cmp	r5, r2
    875c:	d0ef      	beq.n	873e <deliverMessage+0x42>
    return (curn == curn_end) && (*curf == '\0');
    875e:	429e      	cmp	r6, r3
    8760:	d133      	bne.n	87ca <deliverMessage+0xce>
    8762:	2a00      	cmp	r2, #0
    8764:	d03d      	beq.n	87e2 <deliverMessage+0xe6>
    8766:	e030      	b.n	87ca <deliverMessage+0xce>
            char* nextpos = curn + 1;
    8768:	1c5d      	adds	r5, r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    876a:	42ae      	cmp	r6, r5
    876c:	d927      	bls.n	87be <deliverMessage+0xc2>
    876e:	785a      	ldrb	r2, [r3, #1]
    8770:	2a2f      	cmp	r2, #47	; 0x2f
    8772:	d01f      	beq.n	87b4 <deliverMessage+0xb8>
                nextpos = ++curn + 1;
    8774:	3301      	adds	r3, #1
            while (nextpos < curn_end && *nextpos != '/')
    8776:	4283      	cmp	r3, r0
    8778:	d0e1      	beq.n	873e <deliverMessage+0x42>
    877a:	785a      	ldrb	r2, [r3, #1]
    877c:	2a2f      	cmp	r2, #47	; 0x2f
    877e:	d1f9      	bne.n	8774 <deliverMessage+0x78>
    8780:	e7dd      	b.n	873e <deliverMessage+0x42>
            curn = curn_end - 1;    // skip until end of string
    8782:	1e73      	subs	r3, r6, #1
    8784:	e7db      	b.n	873e <deliverMessage+0x42>
                rc = SUCCESS;
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    8786:	9b01      	ldr	r3, [sp, #4]
    8788:	3301      	adds	r3, #1
    878a:	d007      	beq.n	879c <deliverMessage+0xa0>
        c->defaultMessageHandler(&md);
        rc = SUCCESS;
    }   
    
    return rc;
}
    878c:	9801      	ldr	r0, [sp, #4]
    878e:	b005      	add	sp, #20
    8790:	bc3c      	pop	{r2, r3, r4, r5}
    8792:	4690      	mov	r8, r2
    8794:	4699      	mov	r9, r3
    8796:	46a2      	mov	sl, r4
    8798:	46ab      	mov	fp, r5
    879a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
    879c:	4653      	mov	r3, sl
    879e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    87a0:	2b00      	cmp	r3, #0
    87a2:	d0f3      	beq.n	878c <deliverMessage+0x90>
    md->topicName = aTopicName;
    87a4:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    87a6:	464a      	mov	r2, r9
    87a8:	9202      	str	r2, [sp, #8]
        c->defaultMessageHandler(&md);
    87aa:	a802      	add	r0, sp, #8
    87ac:	4798      	blx	r3
        rc = SUCCESS;
    87ae:	2300      	movs	r3, #0
    87b0:	9301      	str	r3, [sp, #4]
    return rc;
    87b2:	e7eb      	b.n	878c <deliverMessage+0x90>
    while (*curf && curn < curn_end)
    87b4:	780a      	ldrb	r2, [r1, #0]
    87b6:	2a00      	cmp	r2, #0
    87b8:	d007      	beq.n	87ca <deliverMessage+0xce>
        curn++;
    87ba:	002b      	movs	r3, r5
    87bc:	e7c5      	b.n	874a <deliverMessage+0x4e>
    87be:	3301      	adds	r3, #1
    while (*curf && curn < curn_end)
    87c0:	780a      	ldrb	r2, [r1, #0]
    87c2:	2a00      	cmp	r2, #0
    87c4:	d101      	bne.n	87ca <deliverMessage+0xce>
    return (curn == curn_end) && (*curf == '\0');
    87c6:	429e      	cmp	r6, r3
    87c8:	d00b      	beq.n	87e2 <deliverMessage+0xe6>
    87ca:	3408      	adds	r4, #8
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    87cc:	4544      	cmp	r4, r8
    87ce:	d0da      	beq.n	8786 <deliverMessage+0x8a>
    87d0:	46a3      	mov	fp, r4
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
    87d2:	6821      	ldr	r1, [r4, #0]
    87d4:	2900      	cmp	r1, #0
    87d6:	d0f8      	beq.n	87ca <deliverMessage+0xce>
    87d8:	0038      	movs	r0, r7
    87da:	4b08      	ldr	r3, [pc, #32]	; (87fc <deliverMessage+0x100>)
    87dc:	4798      	blx	r3
    87de:	2800      	cmp	r0, #0
    87e0:	d09f      	beq.n	8722 <deliverMessage+0x26>
            if (c->messageHandlers[i].fp != NULL)
    87e2:	465b      	mov	r3, fp
    87e4:	685b      	ldr	r3, [r3, #4]
    87e6:	2b00      	cmp	r3, #0
    87e8:	d0ef      	beq.n	87ca <deliverMessage+0xce>
    md->topicName = aTopicName;
    87ea:	9703      	str	r7, [sp, #12]
    md->message = aMessage;
    87ec:	464a      	mov	r2, r9
    87ee:	9202      	str	r2, [sp, #8]
                c->messageHandlers[i].fp(&md);
    87f0:	a802      	add	r0, sp, #8
    87f2:	4798      	blx	r3
                rc = SUCCESS;
    87f4:	2300      	movs	r3, #0
    87f6:	9301      	str	r3, [sp, #4]
    87f8:	e7e7      	b.n	87ca <deliverMessage+0xce>
    87fa:	46c0      	nop			; (mov r8, r8)
    87fc:	000096ed 	.word	0x000096ed

00008800 <keepalive>:


int keepalive(MQTTClient* c)
{
    8800:	b510      	push	{r4, lr}
    8802:	b082      	sub	sp, #8
    8804:	0004      	movs	r4, r0
    int rc = FAILURE;

    if (c->keepAliveInterval == 0)
    {
        rc = SUCCESS;
    8806:	2000      	movs	r0, #0
    if (c->keepAliveInterval == 0)
    8808:	69a3      	ldr	r3, [r4, #24]
    880a:	2b00      	cmp	r3, #0
    880c:	d101      	bne.n	8812 <keepalive+0x12>
        }
    }

exit:
    return rc;
}
    880e:	b002      	add	sp, #8
    8810:	bd10      	pop	{r4, pc}
    if (TimerIsExpired(&c->ping_timer))
    8812:	0020      	movs	r0, r4
    8814:	3054      	adds	r0, #84	; 0x54
    8816:	4b14      	ldr	r3, [pc, #80]	; (8868 <keepalive+0x68>)
    8818:	4798      	blx	r3
    881a:	2800      	cmp	r0, #0
    881c:	d01d      	beq.n	885a <keepalive+0x5a>
        if (!c->ping_outstanding)
    881e:	7f23      	ldrb	r3, [r4, #28]
    8820:	2b00      	cmp	r3, #0
    8822:	d11d      	bne.n	8860 <keepalive+0x60>
            TimerInit(&timer);
    8824:	4668      	mov	r0, sp
    8826:	4b11      	ldr	r3, [pc, #68]	; (886c <keepalive+0x6c>)
    8828:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
    882a:	21fa      	movs	r1, #250	; 0xfa
    882c:	0089      	lsls	r1, r1, #2
    882e:	4668      	mov	r0, sp
    8830:	4b0f      	ldr	r3, [pc, #60]	; (8870 <keepalive+0x70>)
    8832:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
    8834:	68a1      	ldr	r1, [r4, #8]
    8836:	6920      	ldr	r0, [r4, #16]
    8838:	4b0e      	ldr	r3, [pc, #56]	; (8874 <keepalive+0x74>)
    883a:	4798      	blx	r3
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
    883c:	2800      	cmp	r0, #0
    883e:	dd09      	ble.n	8854 <keepalive+0x54>
    8840:	466a      	mov	r2, sp
    8842:	0001      	movs	r1, r0
    8844:	0020      	movs	r0, r4
    8846:	4b0c      	ldr	r3, [pc, #48]	; (8878 <keepalive+0x78>)
    8848:	4798      	blx	r3
    884a:	2800      	cmp	r0, #0
    884c:	d1df      	bne.n	880e <keepalive+0xe>
                c->ping_outstanding = 1;
    884e:	2301      	movs	r3, #1
    8850:	7723      	strb	r3, [r4, #28]
    8852:	e7dc      	b.n	880e <keepalive+0xe>
    int rc = FAILURE;
    8854:	2001      	movs	r0, #1
    8856:	4240      	negs	r0, r0
    8858:	e7d9      	b.n	880e <keepalive+0xe>
    885a:	2001      	movs	r0, #1
    885c:	4240      	negs	r0, r0
    885e:	e7d6      	b.n	880e <keepalive+0xe>
    8860:	2001      	movs	r0, #1
    8862:	4240      	negs	r0, r0
    return rc;
    8864:	e7d3      	b.n	880e <keepalive+0xe>
    8866:	46c0      	nop			; (mov r8, r8)
    8868:	00008dd9 	.word	0x00008dd9
    886c:	00008e21 	.word	0x00008e21
    8870:	00008de9 	.word	0x00008de9
    8874:	000093d5 	.word	0x000093d5
    8878:	00008649 	.word	0x00008649

0000887c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
    887c:	b5f0      	push	{r4, r5, r6, r7, lr}
    887e:	46de      	mov	lr, fp
    8880:	464f      	mov	r7, r9
    8882:	4646      	mov	r6, r8
    8884:	b5c0      	push	{r6, r7, lr}
    8886:	b090      	sub	sp, #64	; 0x40
    8888:	0004      	movs	r4, r0
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
    888a:	6d05      	ldr	r5, [r0, #80]	; 0x50
    888c:	68ae      	ldr	r6, [r5, #8]
    888e:	6947      	ldr	r7, [r0, #20]
    8890:	9107      	str	r1, [sp, #28]
    8892:	0008      	movs	r0, r1
    8894:	4b65      	ldr	r3, [pc, #404]	; (8a2c <cycle+0x1b0>)
    8896:	4798      	blx	r3
    8898:	0003      	movs	r3, r0
    889a:	2201      	movs	r2, #1
    889c:	0039      	movs	r1, r7
    889e:	0028      	movs	r0, r5
    88a0:	47b0      	blx	r6
    88a2:	0005      	movs	r5, r0
    88a4:	2801      	cmp	r0, #1
    88a6:	d000      	beq.n	88aa <cycle+0x2e>
    88a8:	e0bd      	b.n	8a26 <cycle+0x1aa>
    decodePacket(c, &rem_len, TimerLeftMS(timer));
    88aa:	9807      	ldr	r0, [sp, #28]
    88ac:	4b5f      	ldr	r3, [pc, #380]	; (8a2c <cycle+0x1b0>)
    88ae:	4798      	blx	r3
    88b0:	9006      	str	r0, [sp, #24]
    88b2:	2604      	movs	r6, #4
    *value = 0;
    88b4:	2700      	movs	r7, #0
        *value += (i & 127) * multiplier;
    88b6:	237f      	movs	r3, #127	; 0x7f
    88b8:	469b      	mov	fp, r3
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
    88ba:	6d20      	ldr	r0, [r4, #80]	; 0x50
    88bc:	6883      	ldr	r3, [r0, #8]
    88be:	4698      	mov	r8, r3
    88c0:	9b06      	ldr	r3, [sp, #24]
    88c2:	2201      	movs	r2, #1
    88c4:	a90c      	add	r1, sp, #48	; 0x30
    88c6:	47c0      	blx	r8
        if (rc != 1)
    88c8:	2801      	cmp	r0, #1
    88ca:	d10e      	bne.n	88ea <cycle+0x6e>
        *value += (i & 127) * multiplier;
    88cc:	ab02      	add	r3, sp, #8
    88ce:	2228      	movs	r2, #40	; 0x28
    88d0:	189b      	adds	r3, r3, r2
    88d2:	781b      	ldrb	r3, [r3, #0]
    88d4:	465a      	mov	r2, fp
    88d6:	401a      	ands	r2, r3
    88d8:	436a      	muls	r2, r5
    88da:	18bf      	adds	r7, r7, r2
        multiplier *= 128;
    88dc:	01ed      	lsls	r5, r5, #7
    } while ((i & 128) != 0);
    88de:	b25b      	sxtb	r3, r3
    88e0:	2b00      	cmp	r3, #0
    88e2:	da02      	bge.n	88ea <cycle+0x6e>
    88e4:	3e01      	subs	r6, #1
        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    88e6:	2e00      	cmp	r6, #0
    88e8:	d1e7      	bne.n	88ba <cycle+0x3e>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    88ea:	6963      	ldr	r3, [r4, #20]
    88ec:	1c58      	adds	r0, r3, #1
    88ee:	0039      	movs	r1, r7
    88f0:	4b4f      	ldr	r3, [pc, #316]	; (8a30 <cycle+0x1b4>)
    88f2:	4798      	blx	r3
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    88f4:	2f00      	cmp	r7, #0
    88f6:	dd10      	ble.n	891a <cycle+0x9e>
    88f8:	6d26      	ldr	r6, [r4, #80]	; 0x50
    88fa:	68b3      	ldr	r3, [r6, #8]
    88fc:	4699      	mov	r9, r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
    88fe:	3001      	adds	r0, #1
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
    8900:	6963      	ldr	r3, [r4, #20]
    8902:	181d      	adds	r5, r3, r0
    8904:	9807      	ldr	r0, [sp, #28]
    8906:	4b49      	ldr	r3, [pc, #292]	; (8a2c <cycle+0x1b0>)
    8908:	4798      	blx	r3
    890a:	0003      	movs	r3, r0
    890c:	003a      	movs	r2, r7
    890e:	0029      	movs	r1, r5
    8910:	0030      	movs	r0, r6
    8912:	47c8      	blx	r9
    8914:	42b8      	cmp	r0, r7
    8916:	d000      	beq.n	891a <cycle+0x9e>
    8918:	e085      	b.n	8a26 <cycle+0x1aa>
    header.byte = c->readbuf[0];
    891a:	6963      	ldr	r3, [r4, #20]
    891c:	781d      	ldrb	r5, [r3, #0]
    891e:	092d      	lsrs	r5, r5, #4
    unsigned short packet_type = readPacket(c, timer);
    
    int len = 0,
        rc = SUCCESS;

    switch (packet_type)
    8920:	2d05      	cmp	r5, #5
    8922:	d051      	beq.n	89c8 <cycle+0x14c>
    8924:	2d0d      	cmp	r5, #13
    8926:	d06e      	beq.n	8a06 <cycle+0x18a>
        rc = SUCCESS;
    8928:	2600      	movs	r6, #0
    switch (packet_type)
    892a:	2d03      	cmp	r5, #3
    892c:	d16e      	bne.n	8a0c <cycle+0x190>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    892e:	68e2      	ldr	r2, [r4, #12]
    8930:	9204      	str	r2, [sp, #16]
    8932:	9303      	str	r3, [sp, #12]
    8934:	ab0f      	add	r3, sp, #60	; 0x3c
    8936:	9302      	str	r3, [sp, #8]
    8938:	ab0e      	add	r3, sp, #56	; 0x38
    893a:	9301      	str	r3, [sp, #4]
    893c:	ab09      	add	r3, sp, #36	; 0x24
    893e:	9300      	str	r3, [sp, #0]
    8940:	ab0d      	add	r3, sp, #52	; 0x34
    8942:	2229      	movs	r2, #41	; 0x29
    8944:	a902      	add	r1, sp, #8
    8946:	468c      	mov	ip, r1
    8948:	4462      	add	r2, ip
    894a:	a908      	add	r1, sp, #32
    894c:	202a      	movs	r0, #42	; 0x2a
    894e:	4460      	add	r0, ip
    8950:	4e38      	ldr	r6, [pc, #224]	; (8a34 <cycle+0x1b8>)
    8952:	47b0      	blx	r6
        rc = SUCCESS;
    8954:	2600      	movs	r6, #0
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
    8956:	2801      	cmp	r0, #1
    8958:	d15b      	bne.n	8a12 <cycle+0x196>
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
                goto exit;
            msg.qos = (enum QoS)intQoS;
    895a:	ae0c      	add	r6, sp, #48	; 0x30
    895c:	ab02      	add	r3, sp, #8
    895e:	7e1b      	ldrb	r3, [r3, #24]
    8960:	7033      	strb	r3, [r6, #0]
            deliverMessage(c, &topicName, &msg);
    8962:	0032      	movs	r2, r6
    8964:	a909      	add	r1, sp, #36	; 0x24
    8966:	0020      	movs	r0, r4
    8968:	4b33      	ldr	r3, [pc, #204]	; (8a38 <cycle+0x1bc>)
    896a:	4798      	blx	r3
            if (msg.qos != QOS0)
    896c:	7833      	ldrb	r3, [r6, #0]
    896e:	2b00      	cmp	r3, #0
    8970:	d028      	beq.n	89c4 <cycle+0x148>
            {
                if (msg.qos == QOS1)
    8972:	2b01      	cmp	r3, #1
    8974:	d004      	beq.n	8980 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
                else if (msg.qos == QOS2)
    8976:	2b02      	cmp	r3, #2
    8978:	d016      	beq.n	89a8 <cycle+0x12c>
    897a:	2601      	movs	r6, #1
    897c:	4276      	negs	r6, r6
    897e:	e048      	b.n	8a12 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
    8980:	ab0c      	add	r3, sp, #48	; 0x30
    8982:	889b      	ldrh	r3, [r3, #4]
    8984:	9300      	str	r3, [sp, #0]
    8986:	2300      	movs	r3, #0
    8988:	2204      	movs	r2, #4
    898a:	68a1      	ldr	r1, [r4, #8]
    898c:	6920      	ldr	r0, [r4, #16]
    898e:	4e2b      	ldr	r6, [pc, #172]	; (8a3c <cycle+0x1c0>)
    8990:	47b0      	blx	r6
    8992:	0001      	movs	r1, r0
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
                if (len <= 0)
    8994:	2900      	cmp	r1, #0
    8996:	dd12      	ble.n	89be <cycle+0x142>
                    rc = FAILURE;
                else
                    rc = sendPacket(c, len, timer);
    8998:	9a07      	ldr	r2, [sp, #28]
    899a:	0020      	movs	r0, r4
    899c:	4b28      	ldr	r3, [pc, #160]	; (8a40 <cycle+0x1c4>)
    899e:	4798      	blx	r3
    89a0:	0006      	movs	r6, r0
                if (rc == FAILURE)
    89a2:	1c43      	adds	r3, r0, #1
    89a4:	d132      	bne.n	8a0c <cycle+0x190>
    89a6:	e034      	b.n	8a12 <cycle+0x196>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
    89a8:	ab0c      	add	r3, sp, #48	; 0x30
    89aa:	889b      	ldrh	r3, [r3, #4]
    89ac:	9300      	str	r3, [sp, #0]
    89ae:	2300      	movs	r3, #0
    89b0:	2205      	movs	r2, #5
    89b2:	68a1      	ldr	r1, [r4, #8]
    89b4:	6920      	ldr	r0, [r4, #16]
    89b6:	4e21      	ldr	r6, [pc, #132]	; (8a3c <cycle+0x1c0>)
    89b8:	47b0      	blx	r6
    89ba:	0001      	movs	r1, r0
    89bc:	e7ea      	b.n	8994 <cycle+0x118>
    89be:	2601      	movs	r6, #1
    89c0:	4276      	negs	r6, r6
    89c2:	e026      	b.n	8a12 <cycle+0x196>
        rc = SUCCESS;
    89c4:	2600      	movs	r6, #0
    89c6:	e021      	b.n	8a0c <cycle+0x190>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
    89c8:	68e2      	ldr	r2, [r4, #12]
    89ca:	9200      	str	r2, [sp, #0]
    89cc:	aa0c      	add	r2, sp, #48	; 0x30
    89ce:	a908      	add	r1, sp, #32
    89d0:	a809      	add	r0, sp, #36	; 0x24
    89d2:	4e1c      	ldr	r6, [pc, #112]	; (8a44 <cycle+0x1c8>)
    89d4:	47b0      	blx	r6
    89d6:	2801      	cmp	r0, #1
    89d8:	d002      	beq.n	89e0 <cycle+0x164>
    89da:	2601      	movs	r6, #1
    89dc:	4276      	negs	r6, r6
    89de:	e01b      	b.n	8a18 <cycle+0x19c>
                rc = FAILURE;
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
    89e0:	ab0c      	add	r3, sp, #48	; 0x30
    89e2:	881b      	ldrh	r3, [r3, #0]
    89e4:	9300      	str	r3, [sp, #0]
    89e6:	2300      	movs	r3, #0
    89e8:	2206      	movs	r2, #6
    89ea:	68a1      	ldr	r1, [r4, #8]
    89ec:	6920      	ldr	r0, [r4, #16]
    89ee:	4e13      	ldr	r6, [pc, #76]	; (8a3c <cycle+0x1c0>)
    89f0:	47b0      	blx	r6
    89f2:	2800      	cmp	r0, #0
    89f4:	ddf1      	ble.n	89da <cycle+0x15e>
                rc = FAILURE;
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
    89f6:	9a07      	ldr	r2, [sp, #28]
    89f8:	0001      	movs	r1, r0
    89fa:	0020      	movs	r0, r4
    89fc:	4b10      	ldr	r3, [pc, #64]	; (8a40 <cycle+0x1c4>)
    89fe:	4798      	blx	r3
    8a00:	1e06      	subs	r6, r0, #0
    8a02:	d1ea      	bne.n	89da <cycle+0x15e>
    8a04:	e002      	b.n	8a0c <cycle+0x190>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
    8a06:	2300      	movs	r3, #0
    8a08:	7723      	strb	r3, [r4, #28]
        rc = SUCCESS;
    8a0a:	2600      	movs	r6, #0
            break;
    }
    keepalive(c);
    8a0c:	0020      	movs	r0, r4
    8a0e:	4b0e      	ldr	r3, [pc, #56]	; (8a48 <cycle+0x1cc>)
    8a10:	4798      	blx	r3
exit:
    if (rc == SUCCESS)
    8a12:	2e00      	cmp	r6, #0
    8a14:	d100      	bne.n	8a18 <cycle+0x19c>
    8a16:	002e      	movs	r6, r5
        rc = packet_type;
    return rc;
}
    8a18:	0030      	movs	r0, r6
    8a1a:	b010      	add	sp, #64	; 0x40
    8a1c:	bc1c      	pop	{r2, r3, r4}
    8a1e:	4690      	mov	r8, r2
    8a20:	4699      	mov	r9, r3
    8a22:	46a3      	mov	fp, r4
    8a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a26:	4d09      	ldr	r5, [pc, #36]	; (8a4c <cycle+0x1d0>)
        rc = SUCCESS;
    8a28:	2600      	movs	r6, #0
    8a2a:	e7ef      	b.n	8a0c <cycle+0x190>
    8a2c:	00008e0d 	.word	0x00008e0d
    8a30:	000094ed 	.word	0x000094ed
    8a34:	000093e5 	.word	0x000093e5
    8a38:	000086fd 	.word	0x000086fd
    8a3c:	00009731 	.word	0x00009731
    8a40:	00008649 	.word	0x00008649
    8a44:	0000947d 	.word	0x0000947d
    8a48:	00008801 	.word	0x00008801
    8a4c:	0000ffff 	.word	0x0000ffff

00008a50 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
    8a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a52:	b083      	sub	sp, #12
    8a54:	9001      	str	r0, [sp, #4]
    8a56:	000e      	movs	r6, r1
    8a58:	9200      	str	r2, [sp, #0]
    int rc = FAILURE;
    8a5a:	2401      	movs	r4, #1
    8a5c:	4264      	negs	r4, r4
    
    do
    {
        if (TimerIsExpired(timer))
    8a5e:	4f08      	ldr	r7, [pc, #32]	; (8a80 <waitfor+0x30>)
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
    8a60:	4d08      	ldr	r5, [pc, #32]	; (8a84 <waitfor+0x34>)
        if (TimerIsExpired(timer))
    8a62:	9800      	ldr	r0, [sp, #0]
    8a64:	47b8      	blx	r7
    8a66:	2800      	cmp	r0, #0
    8a68:	d106      	bne.n	8a78 <waitfor+0x28>
    while ((rc = cycle(c, timer)) != packet_type);  
    8a6a:	9900      	ldr	r1, [sp, #0]
    8a6c:	9801      	ldr	r0, [sp, #4]
    8a6e:	47a8      	blx	r5
    8a70:	0004      	movs	r4, r0
    8a72:	42b0      	cmp	r0, r6
    8a74:	d1f5      	bne.n	8a62 <waitfor+0x12>
    8a76:	0034      	movs	r4, r6
    
    return rc;
}
    8a78:	0020      	movs	r0, r4
    8a7a:	b003      	add	sp, #12
    8a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a7e:	46c0      	nop			; (mov r8, r8)
    8a80:	00008dd9 	.word	0x00008dd9
    8a84:	0000887d 	.word	0x0000887d

00008a88 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
    8a88:	b530      	push	{r4, r5, lr}
    8a8a:	b09b      	sub	sp, #108	; 0x6c
    8a8c:	0004      	movs	r4, r0
    8a8e:	000d      	movs	r5, r1
    Timer connect_timer;
    int rc = FAILURE;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
    8a90:	2258      	movs	r2, #88	; 0x58
    8a92:	4928      	ldr	r1, [pc, #160]	; (8b34 <MQTTConnect+0xac>)
    8a94:	a802      	add	r0, sp, #8
    8a96:	4b28      	ldr	r3, [pc, #160]	; (8b38 <MQTTConnect+0xb0>)
    8a98:	4798      	blx	r3
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
    8a9a:	6a23      	ldr	r3, [r4, #32]
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d13f      	bne.n	8b20 <MQTTConnect+0x98>
		goto exit;
    
    TimerInit(&connect_timer);
    8aa0:	a818      	add	r0, sp, #96	; 0x60
    8aa2:	4b26      	ldr	r3, [pc, #152]	; (8b3c <MQTTConnect+0xb4>)
    8aa4:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
    8aa6:	6861      	ldr	r1, [r4, #4]
    8aa8:	a818      	add	r0, sp, #96	; 0x60
    8aaa:	4b25      	ldr	r3, [pc, #148]	; (8b40 <MQTTConnect+0xb8>)
    8aac:	4798      	blx	r3

    if (options == 0)
    8aae:	2d00      	cmp	r5, #0
    8ab0:	d015      	beq.n	8ade <MQTTConnect+0x56>
        options = &default_options; /* set default options if none were supplied */
    
    c->keepAliveInterval = options->keepAliveInterval;
    8ab2:	8b29      	ldrh	r1, [r5, #24]
    8ab4:	61a1      	str	r1, [r4, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
    8ab6:	0020      	movs	r0, r4
    8ab8:	3054      	adds	r0, #84	; 0x54
    8aba:	4b22      	ldr	r3, [pc, #136]	; (8b44 <MQTTConnect+0xbc>)
    8abc:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
    8abe:	002a      	movs	r2, r5
    8ac0:	68a1      	ldr	r1, [r4, #8]
    8ac2:	6920      	ldr	r0, [r4, #16]
    8ac4:	4b20      	ldr	r3, [pc, #128]	; (8b48 <MQTTConnect+0xc0>)
    8ac6:	4798      	blx	r3
    8ac8:	2800      	cmp	r0, #0
    8aca:	dd2c      	ble.n	8b26 <MQTTConnect+0x9e>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
    8acc:	aa18      	add	r2, sp, #96	; 0x60
    8ace:	0001      	movs	r1, r0
    8ad0:	0020      	movs	r0, r4
    8ad2:	4b1e      	ldr	r3, [pc, #120]	; (8b4c <MQTTConnect+0xc4>)
    8ad4:	4798      	blx	r3
    8ad6:	2800      	cmp	r0, #0
    8ad8:	d003      	beq.n	8ae2 <MQTTConnect+0x5a>
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
}
    8ada:	b01b      	add	sp, #108	; 0x6c
    8adc:	bd30      	pop	{r4, r5, pc}
        options = &default_options; /* set default options if none were supplied */
    8ade:	ad02      	add	r5, sp, #8
    8ae0:	e7e7      	b.n	8ab2 <MQTTConnect+0x2a>
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
    8ae2:	aa18      	add	r2, sp, #96	; 0x60
    8ae4:	2102      	movs	r1, #2
    8ae6:	0020      	movs	r0, r4
    8ae8:	4b19      	ldr	r3, [pc, #100]	; (8b50 <MQTTConnect+0xc8>)
    8aea:	4798      	blx	r3
    8aec:	2802      	cmp	r0, #2
    8aee:	d11d      	bne.n	8b2c <MQTTConnect+0xa4>
        unsigned char connack_rc = 255;
    8af0:	466b      	mov	r3, sp
    8af2:	1d99      	adds	r1, r3, #6
    8af4:	23ff      	movs	r3, #255	; 0xff
    8af6:	700b      	strb	r3, [r1, #0]
        unsigned char sessionPresent = 0;
    8af8:	466b      	mov	r3, sp
    8afa:	1dd8      	adds	r0, r3, #7
    8afc:	2300      	movs	r3, #0
    8afe:	7003      	strb	r3, [r0, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
    8b00:	68e3      	ldr	r3, [r4, #12]
    8b02:	6962      	ldr	r2, [r4, #20]
    8b04:	4d13      	ldr	r5, [pc, #76]	; (8b54 <MQTTConnect+0xcc>)
    8b06:	47a8      	blx	r5
    8b08:	2801      	cmp	r0, #1
    8b0a:	d002      	beq.n	8b12 <MQTTConnect+0x8a>
            rc = FAILURE;
    8b0c:	2001      	movs	r0, #1
    8b0e:	4240      	negs	r0, r0
    8b10:	e7e3      	b.n	8ada <MQTTConnect+0x52>
            rc = connack_rc;
    8b12:	466b      	mov	r3, sp
    8b14:	7998      	ldrb	r0, [r3, #6]
    if (rc == SUCCESS)
    8b16:	2800      	cmp	r0, #0
    8b18:	d1df      	bne.n	8ada <MQTTConnect+0x52>
        c->isconnected = 1;
    8b1a:	2301      	movs	r3, #1
    8b1c:	6223      	str	r3, [r4, #32]
    return rc;
    8b1e:	e7dc      	b.n	8ada <MQTTConnect+0x52>
    int rc = FAILURE;
    8b20:	2001      	movs	r0, #1
    8b22:	4240      	negs	r0, r0
    8b24:	e7d9      	b.n	8ada <MQTTConnect+0x52>
    8b26:	2001      	movs	r0, #1
    8b28:	4240      	negs	r0, r0
    8b2a:	e7d6      	b.n	8ada <MQTTConnect+0x52>
        rc = FAILURE;
    8b2c:	2001      	movs	r0, #1
    8b2e:	4240      	negs	r0, r0
    8b30:	e7d3      	b.n	8ada <MQTTConnect+0x52>
    8b32:	46c0      	nop			; (mov r8, r8)
    8b34:	0000e51c 	.word	0x0000e51c
    8b38:	0000b81d 	.word	0x0000b81d
    8b3c:	00008e21 	.word	0x00008e21
    8b40:	00008de9 	.word	0x00008de9
    8b44:	00008df9 	.word	0x00008df9
    8b48:	000091f1 	.word	0x000091f1
    8b4c:	00008649 	.word	0x00008649
    8b50:	00008a51 	.word	0x00008a51
    8b54:	00009339 	.word	0x00009339

00008b58 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
    8b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b5a:	b091      	sub	sp, #68	; 0x44
    8b5c:	0004      	movs	r4, r0
    8b5e:	000f      	movs	r7, r1
    8b60:	9305      	str	r3, [sp, #20]
    int rc = FAILURE;  
    Timer timer;
    int len = 0;
    MQTTString topic = MQTTString_initializer;
    8b62:	2300      	movs	r3, #0
    8b64:	930c      	str	r3, [sp, #48]	; 0x30
    8b66:	930d      	str	r3, [sp, #52]	; 0x34
	int Qoss = (int) qos;
    8b68:	920a      	str	r2, [sp, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
    8b6a:	910b      	str	r1, [sp, #44]	; 0x2c
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
    8b6c:	6a03      	ldr	r3, [r0, #32]
    8b6e:	2b00      	cmp	r3, #0
    8b70:	d05c      	beq.n	8c2c <MQTTSubscribe+0xd4>
		goto exit;

    TimerInit(&timer);
    8b72:	a80e      	add	r0, sp, #56	; 0x38
    8b74:	4b32      	ldr	r3, [pc, #200]	; (8c40 <MQTTSubscribe+0xe8>)
    8b76:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8b78:	6861      	ldr	r1, [r4, #4]
    8b7a:	a80e      	add	r0, sp, #56	; 0x38
    8b7c:	4b31      	ldr	r3, [pc, #196]	; (8c44 <MQTTSubscribe+0xec>)
    8b7e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
    8b80:	6920      	ldr	r0, [r4, #16]
    8b82:	68a1      	ldr	r1, [r4, #8]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8b84:	6823      	ldr	r3, [r4, #0]
    8b86:	4a30      	ldr	r2, [pc, #192]	; (8c48 <MQTTSubscribe+0xf0>)
    8b88:	4293      	cmp	r3, r2
    8b8a:	d017      	beq.n	8bbc <MQTTSubscribe+0x64>
    8b8c:	3301      	adds	r3, #1
    8b8e:	6023      	str	r3, [r4, #0]
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
    8b90:	b29b      	uxth	r3, r3
    8b92:	aa0a      	add	r2, sp, #40	; 0x28
    8b94:	9202      	str	r2, [sp, #8]
    8b96:	aa0b      	add	r2, sp, #44	; 0x2c
    8b98:	9201      	str	r2, [sp, #4]
    8b9a:	2201      	movs	r2, #1
    8b9c:	9200      	str	r2, [sp, #0]
    8b9e:	2200      	movs	r2, #0
    8ba0:	4e2a      	ldr	r6, [pc, #168]	; (8c4c <MQTTSubscribe+0xf4>)
    8ba2:	47b0      	blx	r6
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
    8ba4:	2800      	cmp	r0, #0
    8ba6:	dd44      	ble.n	8c32 <MQTTSubscribe+0xda>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8ba8:	aa0e      	add	r2, sp, #56	; 0x38
    8baa:	0001      	movs	r1, r0
    8bac:	0020      	movs	r0, r4
    8bae:	4b28      	ldr	r3, [pc, #160]	; (8c50 <MQTTSubscribe+0xf8>)
    8bb0:	4798      	blx	r3
    8bb2:	1e06      	subs	r6, r0, #0
    8bb4:	d004      	beq.n	8bc0 <MQTTSubscribe+0x68>
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8bb6:	0030      	movs	r0, r6
    8bb8:	b011      	add	sp, #68	; 0x44
    8bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
    8bbc:	2301      	movs	r3, #1
    8bbe:	e7e6      	b.n	8b8e <MQTTSubscribe+0x36>
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
    8bc0:	aa0e      	add	r2, sp, #56	; 0x38
    8bc2:	2109      	movs	r1, #9
    8bc4:	0020      	movs	r0, r4
    8bc6:	4b23      	ldr	r3, [pc, #140]	; (8c54 <MQTTSubscribe+0xfc>)
    8bc8:	4798      	blx	r3
    8bca:	2809      	cmp	r0, #9
    8bcc:	d134      	bne.n	8c38 <MQTTSubscribe+0xe0>
        int count = 0, grantedQoS = -1;
    8bce:	2300      	movs	r3, #0
    8bd0:	9308      	str	r3, [sp, #32]
    8bd2:	3b01      	subs	r3, #1
    8bd4:	9309      	str	r3, [sp, #36]	; 0x24
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    8bd6:	68e3      	ldr	r3, [r4, #12]
    8bd8:	9301      	str	r3, [sp, #4]
    8bda:	6963      	ldr	r3, [r4, #20]
    8bdc:	9300      	str	r3, [sp, #0]
    8bde:	ab09      	add	r3, sp, #36	; 0x24
    8be0:	aa08      	add	r2, sp, #32
    8be2:	2101      	movs	r1, #1
    8be4:	300d      	adds	r0, #13
    8be6:	ad02      	add	r5, sp, #8
    8be8:	46ac      	mov	ip, r5
    8bea:	4460      	add	r0, ip
    8bec:	4d1a      	ldr	r5, [pc, #104]	; (8c58 <MQTTSubscribe+0x100>)
    8bee:	47a8      	blx	r5
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
    8bf0:	0031      	movs	r1, r6
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
    8bf2:	2801      	cmp	r0, #1
    8bf4:	d00e      	beq.n	8c14 <MQTTSubscribe+0xbc>
                if (c->messageHandlers[i].topicFilter == 0)
    8bf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8bf8:	2b00      	cmp	r3, #0
    8bfa:	d010      	beq.n	8c1e <MQTTSubscribe+0xc6>
    8bfc:	0022      	movs	r2, r4
    8bfe:	322c      	adds	r2, #44	; 0x2c
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    8c00:	2301      	movs	r3, #1
                if (c->messageHandlers[i].topicFilter == 0)
    8c02:	6810      	ldr	r0, [r2, #0]
    8c04:	2800      	cmp	r0, #0
    8c06:	d00b      	beq.n	8c20 <MQTTSubscribe+0xc8>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
    8c08:	3301      	adds	r3, #1
    8c0a:	3208      	adds	r2, #8
    8c0c:	2b05      	cmp	r3, #5
    8c0e:	d1f8      	bne.n	8c02 <MQTTSubscribe+0xaa>
    8c10:	000e      	movs	r6, r1
    8c12:	e7d0      	b.n	8bb6 <MQTTSubscribe+0x5e>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
    8c14:	9909      	ldr	r1, [sp, #36]	; 0x24
        if (rc != 0x80)
    8c16:	2980      	cmp	r1, #128	; 0x80
    8c18:	d1ed      	bne.n	8bf6 <MQTTSubscribe+0x9e>
    8c1a:	000e      	movs	r6, r1
    8c1c:	e7cb      	b.n	8bb6 <MQTTSubscribe+0x5e>
                if (c->messageHandlers[i].topicFilter == 0)
    8c1e:	0033      	movs	r3, r6
    8c20:	00db      	lsls	r3, r3, #3
    8c22:	18e4      	adds	r4, r4, r3
                    c->messageHandlers[i].topicFilter = topicFilter;
    8c24:	6267      	str	r7, [r4, #36]	; 0x24
                    c->messageHandlers[i].fp = msgHandler;
    8c26:	9b05      	ldr	r3, [sp, #20]
    8c28:	62a3      	str	r3, [r4, #40]	; 0x28
                    break;
    8c2a:	e7c4      	b.n	8bb6 <MQTTSubscribe+0x5e>
    int rc = FAILURE;  
    8c2c:	2601      	movs	r6, #1
    8c2e:	4276      	negs	r6, r6
    8c30:	e7c1      	b.n	8bb6 <MQTTSubscribe+0x5e>
    8c32:	2601      	movs	r6, #1
    8c34:	4276      	negs	r6, r6
    8c36:	e7be      	b.n	8bb6 <MQTTSubscribe+0x5e>
        rc = FAILURE;
    8c38:	2601      	movs	r6, #1
    8c3a:	4276      	negs	r6, r6
    return rc;
    8c3c:	e7bb      	b.n	8bb6 <MQTTSubscribe+0x5e>
    8c3e:	46c0      	nop			; (mov r8, r8)
    8c40:	00008e21 	.word	0x00008e21
    8c44:	00008de9 	.word	0x00008de9
    8c48:	0000ffff 	.word	0x0000ffff
    8c4c:	000097c9 	.word	0x000097c9
    8c50:	00008649 	.word	0x00008649
    8c54:	00008a51 	.word	0x00008a51
    8c58:	0000987d 	.word	0x0000987d

00008c5c <MQTTDisconnect>:
    return rc;
}


int MQTTDisconnect(MQTTClient* c)
{  
    8c5c:	b510      	push	{r4, lr}
    8c5e:	b082      	sub	sp, #8
    8c60:	0004      	movs	r4, r0
    int len = 0;

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
    8c62:	4668      	mov	r0, sp
    8c64:	4b0b      	ldr	r3, [pc, #44]	; (8c94 <MQTTDisconnect+0x38>)
    8c66:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
    8c68:	6861      	ldr	r1, [r4, #4]
    8c6a:	4668      	mov	r0, sp
    8c6c:	4b0a      	ldr	r3, [pc, #40]	; (8c98 <MQTTDisconnect+0x3c>)
    8c6e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
    8c70:	68a1      	ldr	r1, [r4, #8]
    8c72:	6920      	ldr	r0, [r4, #16]
    8c74:	4b09      	ldr	r3, [pc, #36]	; (8c9c <MQTTDisconnect+0x40>)
    8c76:	4798      	blx	r3
    if (len > 0)
    8c78:	2800      	cmp	r0, #0
    8c7a:	dd08      	ble.n	8c8e <MQTTDisconnect+0x32>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
    8c7c:	466a      	mov	r2, sp
    8c7e:	0001      	movs	r1, r0
    8c80:	0020      	movs	r0, r4
    8c82:	4b07      	ldr	r3, [pc, #28]	; (8ca0 <MQTTDisconnect+0x44>)
    8c84:	4798      	blx	r3
        
    c->isconnected = 0;
    8c86:	2300      	movs	r3, #0
    8c88:	6223      	str	r3, [r4, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
}
    8c8a:	b002      	add	sp, #8
    8c8c:	bd10      	pop	{r4, pc}
    int rc = FAILURE;
    8c8e:	2001      	movs	r0, #1
    8c90:	4240      	negs	r0, r0
    8c92:	e7f8      	b.n	8c86 <MQTTDisconnect+0x2a>
    8c94:	00008e21 	.word	0x00008e21
    8c98:	00008de9 	.word	0x00008de9
    8c9c:	000093c5 	.word	0x000093c5
    8ca0:	00008649 	.word	0x00008649

00008ca4 <WINC1500_disconnect>:
  //return gu32MQTTBrokerSendLen;
  return len;
}


static void WINC1500_disconnect(Network* n) {
    8ca4:	b510      	push	{r4, lr}
    8ca6:	0004      	movs	r4, r0
	close(n->socket);
    8ca8:	2000      	movs	r0, #0
    8caa:	5620      	ldrsb	r0, [r4, r0]
    8cac:	4b04      	ldr	r3, [pc, #16]	; (8cc0 <WINC1500_disconnect+0x1c>)
    8cae:	4798      	blx	r3
	n->socket=-1;
    8cb0:	2301      	movs	r3, #1
    8cb2:	425b      	negs	r3, r3
    8cb4:	6023      	str	r3, [r4, #0]
	gbMQTTBrokerConnected=false;
    8cb6:	2200      	movs	r2, #0
    8cb8:	4b02      	ldr	r3, [pc, #8]	; (8cc4 <WINC1500_disconnect+0x20>)
    8cba:	701a      	strb	r2, [r3, #0]
}
    8cbc:	bd10      	pop	{r4, pc}
    8cbe:	46c0      	nop			; (mov r8, r8)
    8cc0:	00003d59 	.word	0x00003d59
    8cc4:	20000424 	.word	0x20000424

00008cc8 <WINC1500_write>:
static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
    8cc8:	b570      	push	{r4, r5, r6, lr}
    8cca:	0016      	movs	r6, r2
  gbMQTTBrokerSendDone=false;
    8ccc:	2200      	movs	r2, #0
    8cce:	4b0d      	ldr	r3, [pc, #52]	; (8d04 <WINC1500_write+0x3c>)
    8cd0:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
    8cd2:	b2b2      	uxth	r2, r6
    8cd4:	7800      	ldrb	r0, [r0, #0]
    8cd6:	b240      	sxtb	r0, r0
    8cd8:	2300      	movs	r3, #0
    8cda:	4c0b      	ldr	r4, [pc, #44]	; (8d08 <WINC1500_write+0x40>)
    8cdc:	47a0      	blx	r4
    8cde:	2800      	cmp	r0, #0
    8ce0:	d10c      	bne.n	8cfc <WINC1500_write+0x34>
  while (false==gbMQTTBrokerSendDone){
    8ce2:	4b08      	ldr	r3, [pc, #32]	; (8d04 <WINC1500_write+0x3c>)
    8ce4:	781b      	ldrb	r3, [r3, #0]
    8ce6:	2b00      	cmp	r3, #0
    8ce8:	d106      	bne.n	8cf8 <WINC1500_write+0x30>
	  m2m_wifi_handle_events(NULL);
    8cea:	4d08      	ldr	r5, [pc, #32]	; (8d0c <WINC1500_write+0x44>)
  while (false==gbMQTTBrokerSendDone){
    8cec:	4c05      	ldr	r4, [pc, #20]	; (8d04 <WINC1500_write+0x3c>)
	  m2m_wifi_handle_events(NULL);
    8cee:	2000      	movs	r0, #0
    8cf0:	47a8      	blx	r5
  while (false==gbMQTTBrokerSendDone){
    8cf2:	7823      	ldrb	r3, [r4, #0]
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d0fa      	beq.n	8cee <WINC1500_write+0x26>
}
    8cf8:	0030      	movs	r0, r6
    8cfa:	bd70      	pop	{r4, r5, r6, pc}
	  return -1;
    8cfc:	2601      	movs	r6, #1
    8cfe:	4276      	negs	r6, r6
    8d00:	e7fa      	b.n	8cf8 <WINC1500_write+0x30>
    8d02:	46c0      	nop			; (mov r8, r8)
    8d04:	20000427 	.word	0x20000427
    8d08:	00003c2d 	.word	0x00003c2d
    8d0c:	00002345 	.word	0x00002345

00008d10 <WINC1500_read>:
static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
    8d10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d12:	b083      	sub	sp, #12
    8d14:	9101      	str	r1, [sp, #4]
    8d16:	0014      	movs	r4, r2
  if(0==timeout_ms) timeout_ms=10;
    8d18:	2b00      	cmp	r3, #0
    8d1a:	d100      	bne.n	8d1e <WINC1500_read+0xe>
    8d1c:	330a      	adds	r3, #10
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
    8d1e:	4a22      	ldr	r2, [pc, #136]	; (8da8 <WINC1500_read+0x98>)
    8d20:	6812      	ldr	r2, [r2, #0]
    8d22:	2a00      	cmp	r2, #0
    8d24:	d013      	beq.n	8d4e <WINC1500_read+0x3e>
  if(len>(int)gu32MQTTRxFIFOLen){
    8d26:	4b20      	ldr	r3, [pc, #128]	; (8da8 <WINC1500_read+0x98>)
    8d28:	681d      	ldr	r5, [r3, #0]
    8d2a:	42a5      	cmp	r5, r4
    8d2c:	db39      	blt.n	8da2 <WINC1500_read+0x92>
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
    8d2e:	4e1f      	ldr	r6, [pc, #124]	; (8dac <WINC1500_read+0x9c>)
    8d30:	6837      	ldr	r7, [r6, #0]
    8d32:	491f      	ldr	r1, [pc, #124]	; (8db0 <WINC1500_read+0xa0>)
    8d34:	19c9      	adds	r1, r1, r7
    8d36:	0022      	movs	r2, r4
    8d38:	9801      	ldr	r0, [sp, #4]
    8d3a:	4b1e      	ldr	r3, [pc, #120]	; (8db4 <WINC1500_read+0xa4>)
    8d3c:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
    8d3e:	1b2d      	subs	r5, r5, r4
    8d40:	4b19      	ldr	r3, [pc, #100]	; (8da8 <WINC1500_read+0x98>)
    8d42:	601d      	str	r5, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
    8d44:	193f      	adds	r7, r7, r4
    8d46:	6037      	str	r7, [r6, #0]
  return len;
    8d48:	0020      	movs	r0, r4
}
    8d4a:	b003      	add	sp, #12
    8d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  gbMQTTBrokerRecvDone=false;
    8d4e:	2100      	movs	r1, #0
    8d50:	4a19      	ldr	r2, [pc, #100]	; (8db8 <WINC1500_read+0xa8>)
    8d52:	7011      	strb	r1, [r2, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
    8d54:	7800      	ldrb	r0, [r0, #0]
    8d56:	b240      	sxtb	r0, r0
    8d58:	2280      	movs	r2, #128	; 0x80
    8d5a:	0052      	lsls	r2, r2, #1
    8d5c:	4914      	ldr	r1, [pc, #80]	; (8db0 <WINC1500_read+0xa0>)
    8d5e:	4d17      	ldr	r5, [pc, #92]	; (8dbc <WINC1500_read+0xac>)
    8d60:	47a8      	blx	r5
    8d62:	2800      	cmp	r0, #0
    8d64:	d11a      	bne.n	8d9c <WINC1500_read+0x8c>
	  while (false==gbMQTTBrokerRecvDone){
    8d66:	4b14      	ldr	r3, [pc, #80]	; (8db8 <WINC1500_read+0xa8>)
    8d68:	781b      	ldrb	r3, [r3, #0]
    8d6a:	2b00      	cmp	r3, #0
    8d6c:	d106      	bne.n	8d7c <WINC1500_read+0x6c>
		  m2m_wifi_handle_events(NULL);
    8d6e:	4f14      	ldr	r7, [pc, #80]	; (8dc0 <WINC1500_read+0xb0>)
	  while (false==gbMQTTBrokerRecvDone){
    8d70:	4d11      	ldr	r5, [pc, #68]	; (8db8 <WINC1500_read+0xa8>)
		  m2m_wifi_handle_events(NULL);
    8d72:	2000      	movs	r0, #0
    8d74:	47b8      	blx	r7
	  while (false==gbMQTTBrokerRecvDone){
    8d76:	782b      	ldrb	r3, [r5, #0]
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d0fa      	beq.n	8d72 <WINC1500_read+0x62>
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
    8d7c:	4b11      	ldr	r3, [pc, #68]	; (8dc4 <WINC1500_read+0xb4>)
    8d7e:	6818      	ldr	r0, [r3, #0]
    8d80:	2800      	cmp	r0, #0
    8d82:	dd05      	ble.n	8d90 <WINC1500_read+0x80>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
    8d84:	4b08      	ldr	r3, [pc, #32]	; (8da8 <WINC1500_read+0x98>)
    8d86:	6018      	str	r0, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
    8d88:	2200      	movs	r2, #0
    8d8a:	4b08      	ldr	r3, [pc, #32]	; (8dac <WINC1500_read+0x9c>)
    8d8c:	601a      	str	r2, [r3, #0]
    8d8e:	e7ca      	b.n	8d26 <WINC1500_read+0x16>
		  gu32MQTTRxFIFOLen=0;
    8d90:	2300      	movs	r3, #0
    8d92:	4a05      	ldr	r2, [pc, #20]	; (8da8 <WINC1500_read+0x98>)
    8d94:	6013      	str	r3, [r2, #0]
		  gu32MQTTRxFIFOPtr=0;
    8d96:	4a05      	ldr	r2, [pc, #20]	; (8dac <WINC1500_read+0x9c>)
    8d98:	6013      	str	r3, [r2, #0]
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
    8d9a:	e7d6      	b.n	8d4a <WINC1500_read+0x3a>
		  return -1;
    8d9c:	2001      	movs	r0, #1
    8d9e:	4240      	negs	r0, r0
    8da0:	e7d3      	b.n	8d4a <WINC1500_read+0x3a>
	  return -1;
    8da2:	2001      	movs	r0, #1
    8da4:	4240      	negs	r0, r0
    8da6:	e7d0      	b.n	8d4a <WINC1500_read+0x3a>
    8da8:	20000534 	.word	0x20000534
    8dac:	20000538 	.word	0x20000538
    8db0:	20000428 	.word	0x20000428
    8db4:	0000b81d 	.word	0x0000b81d
    8db8:	20000426 	.word	0x20000426
    8dbc:	00003cc5 	.word	0x00003cc5
    8dc0:	00002345 	.word	0x00002345
    8dc4:	2000052c 	.word	0x2000052c

00008dc8 <SysTick_Handler>:
	MilliTimer++;
    8dc8:	4a02      	ldr	r2, [pc, #8]	; (8dd4 <SysTick_Handler+0xc>)
    8dca:	6813      	ldr	r3, [r2, #0]
    8dcc:	3301      	adds	r3, #1
    8dce:	6013      	str	r3, [r2, #0]
}
    8dd0:	4770      	bx	lr
    8dd2:	46c0      	nop			; (mov r8, r8)
    8dd4:	20000420 	.word	0x20000420

00008dd8 <TimerIsExpired>:
	long left = timer->end_time - MilliTimer;
    8dd8:	6840      	ldr	r0, [r0, #4]
    8dda:	4b02      	ldr	r3, [pc, #8]	; (8de4 <TimerIsExpired+0xc>)
    8ddc:	681b      	ldr	r3, [r3, #0]
    8dde:	1ac0      	subs	r0, r0, r3
	return (left < 0);
    8de0:	0fc0      	lsrs	r0, r0, #31
}
    8de2:	4770      	bx	lr
    8de4:	20000420 	.word	0x20000420

00008de8 <TimerCountdownMS>:
	timer->end_time = MilliTimer + timeout;
    8de8:	4b02      	ldr	r3, [pc, #8]	; (8df4 <TimerCountdownMS+0xc>)
    8dea:	681b      	ldr	r3, [r3, #0]
    8dec:	1859      	adds	r1, r3, r1
    8dee:	6041      	str	r1, [r0, #4]
}
    8df0:	4770      	bx	lr
    8df2:	46c0      	nop			; (mov r8, r8)
    8df4:	20000420 	.word	0x20000420

00008df8 <TimerCountdown>:
	timer->end_time = MilliTimer + (timeout * 1000);
    8df8:	23fa      	movs	r3, #250	; 0xfa
    8dfa:	009b      	lsls	r3, r3, #2
    8dfc:	4359      	muls	r1, r3
    8dfe:	4b02      	ldr	r3, [pc, #8]	; (8e08 <TimerCountdown+0x10>)
    8e00:	681b      	ldr	r3, [r3, #0]
    8e02:	18c9      	adds	r1, r1, r3
    8e04:	6041      	str	r1, [r0, #4]
}
    8e06:	4770      	bx	lr
    8e08:	20000420 	.word	0x20000420

00008e0c <TimerLeftMS>:
	long left = timer->end_time - MilliTimer;
    8e0c:	6840      	ldr	r0, [r0, #4]
    8e0e:	4b03      	ldr	r3, [pc, #12]	; (8e1c <TimerLeftMS+0x10>)
    8e10:	681b      	ldr	r3, [r3, #0]
    8e12:	1ac0      	subs	r0, r0, r3
	return (left < 0) ? 0 : left;
    8e14:	43c3      	mvns	r3, r0
    8e16:	17db      	asrs	r3, r3, #31
    8e18:	4018      	ands	r0, r3
}
    8e1a:	4770      	bx	lr
    8e1c:	20000420 	.word	0x20000420

00008e20 <TimerInit>:
	timer->end_time = 0;
    8e20:	2300      	movs	r3, #0
    8e22:	6043      	str	r3, [r0, #4]
}
    8e24:	4770      	bx	lr
	...

00008e28 <NetworkInit>:


void NetworkInit(Network* n) {
	n->socket = -1;
    8e28:	2301      	movs	r3, #1
    8e2a:	425b      	negs	r3, r3
    8e2c:	6003      	str	r3, [r0, #0]
	n->mqttread = WINC1500_read;
    8e2e:	4b03      	ldr	r3, [pc, #12]	; (8e3c <NetworkInit+0x14>)
    8e30:	6083      	str	r3, [r0, #8]
	n->mqttwrite = WINC1500_write;
    8e32:	4b03      	ldr	r3, [pc, #12]	; (8e40 <NetworkInit+0x18>)
    8e34:	60c3      	str	r3, [r0, #12]
	n->disconnect = WINC1500_disconnect;
    8e36:	4b03      	ldr	r3, [pc, #12]	; (8e44 <NetworkInit+0x1c>)
    8e38:	6103      	str	r3, [r0, #16]
}
    8e3a:	4770      	bx	lr
    8e3c:	00008d11 	.word	0x00008d11
    8e40:	00008cc9 	.word	0x00008cc9
    8e44:	00008ca5 	.word	0x00008ca5

00008e48 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
    8e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e4a:	b087      	sub	sp, #28
    8e4c:	0006      	movs	r6, r0
    8e4e:	0015      	movs	r5, r2
    8e50:	9301      	str	r3, [sp, #4]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
    8e52:	4c25      	ldr	r4, [pc, #148]	; (8ee8 <ConnectNetwork+0xa0>)
    8e54:	2300      	movs	r3, #0
    8e56:	7023      	strb	r3, [r4, #0]
  gpcHostAddr = addr;
    8e58:	4b24      	ldr	r3, [pc, #144]	; (8eec <ConnectNetwork+0xa4>)
    8e5a:	6019      	str	r1, [r3, #0]
  gethostbyname((uint8*)addr);
    8e5c:	0008      	movs	r0, r1
    8e5e:	4b24      	ldr	r3, [pc, #144]	; (8ef0 <ConnectNetwork+0xa8>)
    8e60:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
    8e62:	7823      	ldrb	r3, [r4, #0]
    8e64:	2b00      	cmp	r3, #0
    8e66:	d106      	bne.n	8e76 <ConnectNetwork+0x2e>
	  m2m_wifi_handle_events(NULL);
    8e68:	4f22      	ldr	r7, [pc, #136]	; (8ef4 <ConnectNetwork+0xac>)
  while (false==gbMQTTBrokerIpresolved){
    8e6a:	4c1f      	ldr	r4, [pc, #124]	; (8ee8 <ConnectNetwork+0xa0>)
	  m2m_wifi_handle_events(NULL);
    8e6c:	2000      	movs	r0, #0
    8e6e:	47b8      	blx	r7
  while (false==gbMQTTBrokerIpresolved){
    8e70:	7823      	ldrb	r3, [r4, #0]
    8e72:	2b00      	cmp	r3, #0
    8e74:	d0fa      	beq.n	8e6c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
    8e76:	4b20      	ldr	r3, [pc, #128]	; (8ef8 <ConnectNetwork+0xb0>)
    8e78:	681a      	ldr	r2, [r3, #0]
    8e7a:	6072      	str	r2, [r6, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
    8e7c:	2302      	movs	r3, #2
    8e7e:	a902      	add	r1, sp, #8
    8e80:	800b      	strh	r3, [r1, #0]
  addr_in.sin_port = _htons(port);
    8e82:	022b      	lsls	r3, r5, #8
    8e84:	491d      	ldr	r1, [pc, #116]	; (8efc <ConnectNetwork+0xb4>)
    8e86:	400b      	ands	r3, r1
    8e88:	b2ad      	uxth	r5, r5
    8e8a:	0a2d      	lsrs	r5, r5, #8
    8e8c:	431d      	orrs	r5, r3
    8e8e:	ab02      	add	r3, sp, #8
    8e90:	805d      	strh	r5, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
    8e92:	9203      	str	r2, [sp, #12]

  /* Create secure socket */ 
  if(n->socket < 0)
    8e94:	6833      	ldr	r3, [r6, #0]
    8e96:	2b00      	cmp	r3, #0
    8e98:	db16      	blt.n	8ec8 <ConnectNetwork+0x80>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
    8e9a:	6830      	ldr	r0, [r6, #0]
    8e9c:	1c43      	adds	r3, r0, #1
    8e9e:	d01b      	beq.n	8ed8 <ConnectNetwork+0x90>
   close(n->socket);
   return SOCK_ERR_INVALID;
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
    8ea0:	b240      	sxtb	r0, r0
    8ea2:	2210      	movs	r2, #16
    8ea4:	a902      	add	r1, sp, #8
    8ea6:	4b16      	ldr	r3, [pc, #88]	; (8f00 <ConnectNetwork+0xb8>)
    8ea8:	4798      	blx	r3
    8eaa:	2800      	cmp	r0, #0
    8eac:	d119      	bne.n	8ee2 <ConnectNetwork+0x9a>
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
  }
  
  gbMQTTBrokerConnected = false;
    8eae:	2200      	movs	r2, #0
    8eb0:	4b14      	ldr	r3, [pc, #80]	; (8f04 <ConnectNetwork+0xbc>)
    8eb2:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
    m2m_wifi_handle_events(NULL);
    8eb4:	4d0f      	ldr	r5, [pc, #60]	; (8ef4 <ConnectNetwork+0xac>)
  while(false==gbMQTTBrokerConnected){
    8eb6:	001c      	movs	r4, r3
    m2m_wifi_handle_events(NULL);
    8eb8:	2000      	movs	r0, #0
    8eba:	47a8      	blx	r5
  while(false==gbMQTTBrokerConnected){
    8ebc:	7823      	ldrb	r3, [r4, #0]
    8ebe:	2b00      	cmp	r3, #0
    8ec0:	d0fa      	beq.n	8eb8 <ConnectNetwork+0x70>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
    8ec2:	2000      	movs	r0, #0
    8ec4:	b007      	add	sp, #28
    8ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
    8ec8:	466b      	mov	r3, sp
    8eca:	791a      	ldrb	r2, [r3, #4]
    8ecc:	2101      	movs	r1, #1
    8ece:	2002      	movs	r0, #2
    8ed0:	4b0d      	ldr	r3, [pc, #52]	; (8f08 <ConnectNetwork+0xc0>)
    8ed2:	4798      	blx	r3
    8ed4:	6030      	str	r0, [r6, #0]
    8ed6:	e7e0      	b.n	8e9a <ConnectNetwork+0x52>
   close(n->socket);
    8ed8:	4b0c      	ldr	r3, [pc, #48]	; (8f0c <ConnectNetwork+0xc4>)
    8eda:	4798      	blx	r3
   return SOCK_ERR_INVALID;
    8edc:	2009      	movs	r0, #9
    8ede:	4240      	negs	r0, r0
    8ee0:	e7f0      	b.n	8ec4 <ConnectNetwork+0x7c>
   return SOCK_ERR_INVALID;
    8ee2:	2009      	movs	r0, #9
    8ee4:	4240      	negs	r0, r0
    8ee6:	e7ed      	b.n	8ec4 <ConnectNetwork+0x7c>
    8ee8:	20000425 	.word	0x20000425
    8eec:	20000530 	.word	0x20000530
    8ef0:	00003e61 	.word	0x00003e61
    8ef4:	00002345 	.word	0x00002345
    8ef8:	20000528 	.word	0x20000528
    8efc:	00ffff00 	.word	0x00ffff00
    8f00:	00003b9d 	.word	0x00003b9d
    8f04:	20000424 	.word	0x20000424
    8f08:	00003a19 	.word	0x00003a19
    8f0c:	00003d59 	.word	0x00003d59

00008f10 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
    8f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f12:	b085      	sub	sp, #20
    8f14:	0006      	movs	r6, r0
    8f16:	000d      	movs	r5, r1
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
    8f18:	2800      	cmp	r0, #0
    8f1a:	d03d      	beq.n	8f98 <mqtt_init+0x88>
    8f1c:	2900      	cmp	r1, #0
    8f1e:	d03e      	beq.n	8f9e <mqtt_init+0x8e>
    8f20:	690b      	ldr	r3, [r1, #16]
    8f22:	2b00      	cmp	r3, #0
    8f24:	d03e      	beq.n	8fa4 <mqtt_init+0x94>
    8f26:	688b      	ldr	r3, [r1, #8]
    8f28:	2b00      	cmp	r3, #0
    8f2a:	d03e      	beq.n	8faa <mqtt_init+0x9a>
		return FAILURE;
		
	timeout_ms = config->keep_alive * 1000;
    8f2c:	888b      	ldrh	r3, [r1, #4]
    8f2e:	27fa      	movs	r7, #250	; 0xfa
    8f30:	00bf      	lsls	r7, r7, #2
    8f32:	435f      	muls	r7, r3
	NetworkInit(&(module->network));
    8f34:	0004      	movs	r4, r0
    8f36:	3420      	adds	r4, #32
    8f38:	0020      	movs	r0, r4
    8f3a:	4b1f      	ldr	r3, [pc, #124]	; (8fb8 <mqtt_init+0xa8>)
    8f3c:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
    8f3e:	1d30      	adds	r0, r6, #4
    8f40:	2218      	movs	r2, #24
    8f42:	0029      	movs	r1, r5
    8f44:	4b1d      	ldr	r3, [pc, #116]	; (8fbc <mqtt_init+0xac>)
    8f46:	4798      	blx	r3
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    8f48:	4b1d      	ldr	r3, [pc, #116]	; (8fc0 <mqtt_init+0xb0>)
    8f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d01a      	beq.n	8f86 <mqtt_init+0x76>
    8f50:	4b1b      	ldr	r3, [pc, #108]	; (8fc0 <mqtt_init+0xb0>)
    8f52:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    8f54:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    8f56:	6819      	ldr	r1, [r3, #0]
    8f58:	2900      	cmp	r1, #0
    8f5a:	d015      	beq.n	8f88 <mqtt_init+0x78>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    8f5c:	3201      	adds	r2, #1
    8f5e:	3360      	adds	r3, #96	; 0x60
    8f60:	2a07      	cmp	r2, #7
    8f62:	d1f8      	bne.n	8f56 <mqtt_init+0x46>
	allocateClient(module);
	
	if(module->client)
    8f64:	69f0      	ldr	r0, [r6, #28]
    8f66:	2800      	cmp	r0, #0
    8f68:	d022      	beq.n	8fb0 <mqtt_init+0xa0>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
    8f6a:	692b      	ldr	r3, [r5, #16]
    8f6c:	68ea      	ldr	r2, [r5, #12]
    8f6e:	9202      	str	r2, [sp, #8]
    8f70:	68aa      	ldr	r2, [r5, #8]
    8f72:	9201      	str	r2, [sp, #4]
    8f74:	696a      	ldr	r2, [r5, #20]
    8f76:	9200      	str	r2, [sp, #0]
    8f78:	003a      	movs	r2, r7
    8f7a:	0021      	movs	r1, r4
    8f7c:	4c11      	ldr	r4, [pc, #68]	; (8fc4 <mqtt_init+0xb4>)
    8f7e:	47a0      	blx	r4
		return SUCCESS;
    8f80:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    8f82:	b005      	add	sp, #20
    8f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
    8f86:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = module;
    8f88:	480d      	ldr	r0, [pc, #52]	; (8fc0 <mqtt_init+0xb0>)
    8f8a:	0053      	lsls	r3, r2, #1
    8f8c:	1899      	adds	r1, r3, r2
    8f8e:	0149      	lsls	r1, r1, #5
    8f90:	1841      	adds	r1, r0, r1
    8f92:	65ce      	str	r6, [r1, #92]	; 0x5c
			module->client = &(mqttClientPool[cIdx].client);
    8f94:	61f1      	str	r1, [r6, #28]
    8f96:	e7e5      	b.n	8f64 <mqtt_init+0x54>
		return FAILURE;
    8f98:	2001      	movs	r0, #1
    8f9a:	4240      	negs	r0, r0
    8f9c:	e7f1      	b.n	8f82 <mqtt_init+0x72>
    8f9e:	2001      	movs	r0, #1
    8fa0:	4240      	negs	r0, r0
    8fa2:	e7ee      	b.n	8f82 <mqtt_init+0x72>
    8fa4:	2001      	movs	r0, #1
    8fa6:	4240      	negs	r0, r0
    8fa8:	e7eb      	b.n	8f82 <mqtt_init+0x72>
    8faa:	2001      	movs	r0, #1
    8fac:	4240      	negs	r0, r0
    8fae:	e7e8      	b.n	8f82 <mqtt_init+0x72>
		return FAILURE;
    8fb0:	2001      	movs	r0, #1
    8fb2:	4240      	negs	r0, r0
    8fb4:	e7e5      	b.n	8f82 <mqtt_init+0x72>
    8fb6:	46c0      	nop			; (mov r8, r8)
    8fb8:	00008e29 	.word	0x00008e29
    8fbc:	0000b81d 	.word	0x0000b81d
    8fc0:	2000053c 	.word	0x2000053c
    8fc4:	000086c5 	.word	0x000086c5

00008fc8 <mqtt_get_config_defaults>:
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
	config->port = 1883;
    8fc8:	4b05      	ldr	r3, [pc, #20]	; (8fe0 <mqtt_get_config_defaults+0x18>)
    8fca:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    8fcc:	2300      	movs	r3, #0
    8fce:	7083      	strb	r3, [r0, #2]
	config->keep_alive = 60;
    8fd0:	223c      	movs	r2, #60	; 0x3c
    8fd2:	8082      	strh	r2, [r0, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
    8fd4:	6083      	str	r3, [r0, #8]
	config->send_buffer = NULL;
    8fd6:	6103      	str	r3, [r0, #16]
	config->read_buffer_size = 0;
    8fd8:	60c3      	str	r3, [r0, #12]
	config->send_buffer_size = 0;
    8fda:	6143      	str	r3, [r0, #20]
}
    8fdc:	4770      	bx	lr
    8fde:	46c0      	nop			; (mov r8, r8)
    8fe0:	0000075b 	.word	0x0000075b

00008fe4 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
	if(module)
    8fe4:	2800      	cmp	r0, #0
    8fe6:	d002      	beq.n	8fee <mqtt_register_callback+0xa>
	{
		module->callback = callback;
    8fe8:	6001      	str	r1, [r0, #0]
		return SUCCESS;
    8fea:	2000      	movs	r0, #0
	}
	else
		return FAILURE;
}
    8fec:	4770      	bx	lr
		return FAILURE;
    8fee:	2001      	movs	r0, #1
    8ff0:	4240      	negs	r0, r0
    8ff2:	e7fb      	b.n	8fec <mqtt_register_callback+0x8>

00008ff4 <mqtt_connect>:
{
	dnsResolveCallback(domain_name, server_ip);
}

int mqtt_connect(struct mqtt_module *module, const char *host)
{
    8ff4:	b530      	push	{r4, r5, lr}
    8ff6:	b083      	sub	sp, #12
    8ff8:	0004      	movs	r4, r0
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
    8ffa:	7983      	ldrb	r3, [r0, #6]
    8ffc:	8882      	ldrh	r2, [r0, #4]
    8ffe:	3020      	adds	r0, #32
    9000:	4d06      	ldr	r5, [pc, #24]	; (901c <mqtt_connect+0x28>)
    9002:	47a8      	blx	r5
    9004:	9001      	str	r0, [sp, #4]
	if(module->callback)
    9006:	6823      	ldr	r3, [r4, #0]
    9008:	2b00      	cmp	r3, #0
    900a:	d003      	beq.n	9014 <mqtt_connect+0x20>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
    900c:	aa01      	add	r2, sp, #4
    900e:	2100      	movs	r1, #0
    9010:	0020      	movs	r0, r4
    9012:	4798      	blx	r3
	return connResult.sock_connected.result;
}
    9014:	9801      	ldr	r0, [sp, #4]
    9016:	b003      	add	sp, #12
    9018:	bd30      	pop	{r4, r5, pc}
    901a:	46c0      	nop			; (mov r8, r8)
    901c:	00008e49 	.word	0x00008e49

00009020 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
    9020:	b5f0      	push	{r4, r5, r6, r7, lr}
    9022:	46de      	mov	lr, fp
    9024:	4657      	mov	r7, sl
    9026:	464e      	mov	r6, r9
    9028:	b5c0      	push	{r6, r7, lr}
    902a:	b098      	sub	sp, #96	; 0x60
    902c:	0005      	movs	r5, r0
    902e:	4689      	mov	r9, r1
    9030:	4693      	mov	fp, r2
    9032:	469a      	mov	sl, r3
    9034:	ab24      	add	r3, sp, #144	; 0x90
    9036:	781f      	ldrb	r7, [r3, #0]
    9038:	ab25      	add	r3, sp, #148	; 0x94
    903a:	781e      	ldrb	r6, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
    903c:	ac01      	add	r4, sp, #4
    903e:	2258      	movs	r2, #88	; 0x58
    9040:	491a      	ldr	r1, [pc, #104]	; (90ac <mqtt_connect_broker+0x8c>)
    9042:	0020      	movs	r0, r4
    9044:	4b1a      	ldr	r3, [pc, #104]	; (90b0 <mqtt_connect_broker+0x90>)
    9046:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
	connectData.clientID.cstring = (char *)client_id;
    9048:	9b20      	ldr	r3, [sp, #128]	; 0x80
    904a:	60e3      	str	r3, [r4, #12]
	connectData.username.cstring = (char *)id;
    904c:	465b      	mov	r3, fp
    904e:	6423      	str	r3, [r4, #64]	; 0x40
	connectData.password.cstring = (char *)password;
    9050:	4653      	mov	r3, sl
    9052:	64e3      	str	r3, [r4, #76]	; 0x4c
	connectData.cleansession = clean_session;
    9054:	464b      	mov	r3, r9
    9056:	76a3      	strb	r3, [r4, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
    9058:	9b21      	ldr	r3, [sp, #132]	; 0x84
    905a:	6263      	str	r3, [r4, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
    905c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    905e:	6323      	str	r3, [r4, #48]	; 0x30
	connectData.will.retained = will_retain;
    9060:	233c      	movs	r3, #60	; 0x3c
    9062:	54e6      	strb	r6, [r4, r3]
	connectData.will.qos = will_qos;
    9064:	3301      	adds	r3, #1
    9066:	54e7      	strb	r7, [r4, r3]
	
	if(will_topic && will_msg)
    9068:	9b21      	ldr	r3, [sp, #132]	; 0x84
    906a:	2b00      	cmp	r3, #0
    906c:	d005      	beq.n	907a <mqtt_connect_broker+0x5a>
    906e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    9070:	2b00      	cmp	r3, #0
    9072:	d002      	beq.n	907a <mqtt_connect_broker+0x5a>
		connectData.willFlag = 1;
    9074:	2201      	movs	r2, #1
    9076:	ab01      	add	r3, sp, #4
    9078:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
    907a:	a901      	add	r1, sp, #4
    907c:	69e8      	ldr	r0, [r5, #28]
    907e:	4b0d      	ldr	r3, [pc, #52]	; (90b4 <mqtt_connect_broker+0x94>)
    9080:	4798      	blx	r3
    9082:	0004      	movs	r4, r0
	
	connBrokerResult.connected.result = rc;
    9084:	ab17      	add	r3, sp, #92	; 0x5c
    9086:	7018      	strb	r0, [r3, #0]
	if(module->callback)
    9088:	682b      	ldr	r3, [r5, #0]
    908a:	2b00      	cmp	r3, #0
    908c:	d003      	beq.n	9096 <mqtt_connect_broker+0x76>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
    908e:	aa17      	add	r2, sp, #92	; 0x5c
    9090:	2101      	movs	r1, #1
    9092:	0028      	movs	r0, r5
    9094:	4798      	blx	r3
	
	module->isConnected = true;
    9096:	2201      	movs	r2, #1
    9098:	2334      	movs	r3, #52	; 0x34
    909a:	54ea      	strb	r2, [r5, r3]
	return rc;
}
    909c:	0020      	movs	r0, r4
    909e:	b018      	add	sp, #96	; 0x60
    90a0:	bc1c      	pop	{r2, r3, r4}
    90a2:	4691      	mov	r9, r2
    90a4:	469a      	mov	sl, r3
    90a6:	46a3      	mov	fp, r4
    90a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90aa:	46c0      	nop			; (mov r8, r8)
    90ac:	0000e574 	.word	0x0000e574
    90b0:	0000b81d 	.word	0x0000b81d
    90b4:	00008a89 	.word	0x00008a89

000090b8 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
    90b8:	b530      	push	{r4, r5, lr}
    90ba:	b083      	sub	sp, #12
    90bc:	0004      	movs	r4, r0
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
    90be:	69c0      	ldr	r0, [r0, #28]
    90c0:	4b08      	ldr	r3, [pc, #32]	; (90e4 <mqtt_disconnect+0x2c>)
    90c2:	4798      	blx	r3
    90c4:	0005      	movs	r5, r0
	
	disconnectResult.disconnected.reason = rc;
    90c6:	9001      	str	r0, [sp, #4]
	
	if(module->callback)
    90c8:	6823      	ldr	r3, [r4, #0]
    90ca:	2b00      	cmp	r3, #0
    90cc:	d003      	beq.n	90d6 <mqtt_disconnect+0x1e>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
    90ce:	aa01      	add	r2, sp, #4
    90d0:	2105      	movs	r1, #5
    90d2:	0020      	movs	r0, r4
    90d4:	4798      	blx	r3
	
	module->isConnected = false;
    90d6:	2200      	movs	r2, #0
    90d8:	2334      	movs	r3, #52	; 0x34
    90da:	54e2      	strb	r2, [r4, r3]
	return rc;
}
    90dc:	0028      	movs	r0, r5
    90de:	b003      	add	sp, #12
    90e0:	bd30      	pop	{r4, r5, pc}
    90e2:	46c0      	nop			; (mov r8, r8)
    90e4:	00008c5d 	.word	0x00008c5d

000090e8 <mqtt_deinit>:
{
    90e8:	b510      	push	{r4, lr}
    90ea:	1e04      	subs	r4, r0, #0
	if(module)
    90ec:	d022      	beq.n	9134 <mqtt_deinit+0x4c>
		if(module->isConnected)
    90ee:	2334      	movs	r3, #52	; 0x34
    90f0:	5cc3      	ldrb	r3, [r0, r3]
    90f2:	2b00      	cmp	r3, #0
    90f4:	d10f      	bne.n	9116 <mqtt_deinit+0x2e>
		if(mqttClientPool[cIdx].mqtt_instance == module)
    90f6:	4b11      	ldr	r3, [pc, #68]	; (913c <mqtt_deinit+0x54>)
    90f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    90fa:	429c      	cmp	r4, r3
    90fc:	d00f      	beq.n	911e <mqtt_deinit+0x36>
    90fe:	4b0f      	ldr	r3, [pc, #60]	; (913c <mqtt_deinit+0x54>)
    9100:	33bc      	adds	r3, #188	; 0xbc
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    9102:	2201      	movs	r2, #1
		if(mqttClientPool[cIdx].mqtt_instance == module)
    9104:	6819      	ldr	r1, [r3, #0]
    9106:	428c      	cmp	r4, r1
    9108:	d00a      	beq.n	9120 <mqtt_deinit+0x38>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
    910a:	3201      	adds	r2, #1
    910c:	3360      	adds	r3, #96	; 0x60
    910e:	2a07      	cmp	r2, #7
    9110:	d1f8      	bne.n	9104 <mqtt_deinit+0x1c>
		return SUCCESS;
    9112:	2000      	movs	r0, #0
}
    9114:	bd10      	pop	{r4, pc}
			mqtt_disconnect(module, 0);
    9116:	2100      	movs	r1, #0
    9118:	4b09      	ldr	r3, [pc, #36]	; (9140 <mqtt_deinit+0x58>)
    911a:	4798      	blx	r3
    911c:	e7eb      	b.n	90f6 <mqtt_deinit+0xe>
		if(mqttClientPool[cIdx].mqtt_instance == module)
    911e:	2200      	movs	r2, #0
			mqttClientPool[cIdx].mqtt_instance = NULL;
    9120:	0053      	lsls	r3, r2, #1
    9122:	189a      	adds	r2, r3, r2
    9124:	0152      	lsls	r2, r2, #5
    9126:	4b05      	ldr	r3, [pc, #20]	; (913c <mqtt_deinit+0x54>)
    9128:	189a      	adds	r2, r3, r2
    912a:	2300      	movs	r3, #0
    912c:	65d3      	str	r3, [r2, #92]	; 0x5c
			module->client = NULL;
    912e:	61e3      	str	r3, [r4, #28]
		return SUCCESS;
    9130:	2000      	movs	r0, #0
    9132:	e7ef      	b.n	9114 <mqtt_deinit+0x2c>
		return FAILURE;
    9134:	2001      	movs	r0, #1
    9136:	4240      	negs	r0, r0
    9138:	e7ec      	b.n	9114 <mqtt_deinit+0x2c>
    913a:	46c0      	nop			; (mov r8, r8)
    913c:	2000053c 	.word	0x2000053c
    9140:	000090b9 	.word	0x000090b9

00009144 <mqtt_subscribe>:
	
	return rc;
}

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
    9144:	b570      	push	{r4, r5, r6, lr}
    9146:	0004      	movs	r4, r0
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
    9148:	69c0      	ldr	r0, [r0, #28]
    914a:	4d06      	ldr	r5, [pc, #24]	; (9164 <mqtt_subscribe+0x20>)
    914c:	47a8      	blx	r5
    914e:	0005      	movs	r5, r0
	
	if(module->callback)
    9150:	6823      	ldr	r3, [r4, #0]
    9152:	2b00      	cmp	r3, #0
    9154:	d003      	beq.n	915e <mqtt_subscribe+0x1a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
    9156:	2200      	movs	r2, #0
    9158:	2103      	movs	r1, #3
    915a:	0020      	movs	r0, r4
    915c:	4798      	blx	r3
	
	return rc;
}
    915e:	0028      	movs	r0, r5
    9160:	bd70      	pop	{r4, r5, r6, pc}
    9162:	46c0      	nop			; (mov r8, r8)
    9164:	00008b59 	.word	0x00008b59

00009168 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
    9168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    916a:	0004      	movs	r4, r0
	int len = 0;

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
    916c:	7a03      	ldrb	r3, [r0, #8]
    916e:	2b03      	cmp	r3, #3
    9170:	d024      	beq.n	91bc <MQTTSerialize_connectLength+0x54>
	int len = 0;
    9172:	2600      	movs	r6, #0
		len = 12; /* variable depending on MQTT or MQIsdp */
	else if (options->MQTTVersion == 4)
    9174:	2b04      	cmp	r3, #4
    9176:	d01f      	beq.n	91b8 <MQTTSerialize_connectLength+0x50>
		len = 10;

	len += MQTTstrlen(options->clientID)+2;
    9178:	68e0      	ldr	r0, [r4, #12]
    917a:	6921      	ldr	r1, [r4, #16]
    917c:	6962      	ldr	r2, [r4, #20]
    917e:	4b1b      	ldr	r3, [pc, #108]	; (91ec <MQTTSerialize_connectLength+0x84>)
    9180:	4798      	blx	r3
    9182:	1c85      	adds	r5, r0, #2
    9184:	19ad      	adds	r5, r5, r6
	if (options->willFlag)
    9186:	7ee3      	ldrb	r3, [r4, #27]
    9188:	2b00      	cmp	r3, #0
    918a:	d119      	bne.n	91c0 <MQTTSerialize_connectLength+0x58>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
	if (options->username.cstring || options->username.lenstring.data)
    918c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    918e:	2b00      	cmp	r3, #0
    9190:	d024      	beq.n	91dc <MQTTSerialize_connectLength+0x74>
		len += MQTTstrlen(options->username)+2;
    9192:	6c20      	ldr	r0, [r4, #64]	; 0x40
    9194:	6c61      	ldr	r1, [r4, #68]	; 0x44
    9196:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    9198:	4b14      	ldr	r3, [pc, #80]	; (91ec <MQTTSerialize_connectLength+0x84>)
    919a:	4798      	blx	r3
    919c:	3002      	adds	r0, #2
    919e:	182d      	adds	r5, r5, r0
	if (options->password.cstring || options->password.lenstring.data)
    91a0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    91a2:	2b00      	cmp	r3, #0
    91a4:	d01e      	beq.n	91e4 <MQTTSerialize_connectLength+0x7c>
		len += MQTTstrlen(options->password)+2;
    91a6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    91a8:	6d21      	ldr	r1, [r4, #80]	; 0x50
    91aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
    91ac:	4b0f      	ldr	r3, [pc, #60]	; (91ec <MQTTSerialize_connectLength+0x84>)
    91ae:	4798      	blx	r3
    91b0:	3002      	adds	r0, #2
    91b2:	182d      	adds	r5, r5, r0

	FUNC_EXIT_RC(len);
	return len;
}
    91b4:	0028      	movs	r0, r5
    91b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		len = 10;
    91b8:	360a      	adds	r6, #10
    91ba:	e7dd      	b.n	9178 <MQTTSerialize_connectLength+0x10>
		len = 12; /* variable depending on MQTT or MQIsdp */
    91bc:	260c      	movs	r6, #12
    91be:	e7db      	b.n	9178 <MQTTSerialize_connectLength+0x10>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
    91c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    91c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    91c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    91c6:	4f09      	ldr	r7, [pc, #36]	; (91ec <MQTTSerialize_connectLength+0x84>)
    91c8:	47b8      	blx	r7
    91ca:	0006      	movs	r6, r0
    91cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    91ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    91d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    91d2:	47b8      	blx	r7
    91d4:	1836      	adds	r6, r6, r0
    91d6:	3604      	adds	r6, #4
    91d8:	19ad      	adds	r5, r5, r6
    91da:	e7d7      	b.n	918c <MQTTSerialize_connectLength+0x24>
	if (options->username.cstring || options->username.lenstring.data)
    91dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    91de:	2b00      	cmp	r3, #0
    91e0:	d1d7      	bne.n	9192 <MQTTSerialize_connectLength+0x2a>
    91e2:	e7dd      	b.n	91a0 <MQTTSerialize_connectLength+0x38>
	if (options->password.cstring || options->password.lenstring.data)
    91e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    91e6:	2b00      	cmp	r3, #0
    91e8:	d1dd      	bne.n	91a6 <MQTTSerialize_connectLength+0x3e>
    91ea:	e7e3      	b.n	91b4 <MQTTSerialize_connectLength+0x4c>
    91ec:	000096d1 	.word	0x000096d1

000091f0 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
    91f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    91f2:	b083      	sub	sp, #12
    91f4:	0006      	movs	r6, r0
    91f6:	000f      	movs	r7, r1
    91f8:	0015      	movs	r5, r2
	unsigned char *ptr = buf;
    91fa:	9001      	str	r0, [sp, #4]
	MQTTConnectFlags flags = {0};
	int len = 0;
	int rc = -1;

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
    91fc:	0010      	movs	r0, r2
    91fe:	4b45      	ldr	r3, [pc, #276]	; (9314 <MQTTSerialize_connect+0x124>)
    9200:	4798      	blx	r3
    9202:	0004      	movs	r4, r0
    9204:	4b44      	ldr	r3, [pc, #272]	; (9318 <MQTTSerialize_connect+0x128>)
    9206:	4798      	blx	r3
    9208:	42b8      	cmp	r0, r7
    920a:	dd00      	ble.n	920e <MQTTSerialize_connect+0x1e>
    920c:	e07f      	b.n	930e <MQTTSerialize_connect+0x11e>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = CONNECT;
	writeChar(&ptr, header.byte); /* write header */
    920e:	2110      	movs	r1, #16
    9210:	a801      	add	r0, sp, #4
    9212:	4b42      	ldr	r3, [pc, #264]	; (931c <MQTTSerialize_connect+0x12c>)
    9214:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
    9216:	0021      	movs	r1, r4
    9218:	9801      	ldr	r0, [sp, #4]
    921a:	4b41      	ldr	r3, [pc, #260]	; (9320 <MQTTSerialize_connect+0x130>)
    921c:	4798      	blx	r3
    921e:	9b01      	ldr	r3, [sp, #4]
    9220:	469c      	mov	ip, r3
    9222:	4460      	add	r0, ip
    9224:	9001      	str	r0, [sp, #4]

	if (options->MQTTVersion == 4)
    9226:	7a2b      	ldrb	r3, [r5, #8]
    9228:	2b04      	cmp	r3, #4
    922a:	d045      	beq.n	92b8 <MQTTSerialize_connect+0xc8>
		writeCString(&ptr, "MQTT");
		writeChar(&ptr, (char) 4);
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
    922c:	493d      	ldr	r1, [pc, #244]	; (9324 <MQTTSerialize_connect+0x134>)
    922e:	a801      	add	r0, sp, #4
    9230:	4b3d      	ldr	r3, [pc, #244]	; (9328 <MQTTSerialize_connect+0x138>)
    9232:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
    9234:	2103      	movs	r1, #3
    9236:	a801      	add	r0, sp, #4
    9238:	4b38      	ldr	r3, [pc, #224]	; (931c <MQTTSerialize_connect+0x12c>)
    923a:	4798      	blx	r3
	}

	flags.all = 0;
	flags.bits.cleansession = options->cleansession;
    923c:	7ea9      	ldrb	r1, [r5, #26]
    923e:	2301      	movs	r3, #1
    9240:	4019      	ands	r1, r3
	flags.bits.will = (options->willFlag) ? 1 : 0;
    9242:	7eea      	ldrb	r2, [r5, #27]
    9244:	1e50      	subs	r0, r2, #1
    9246:	4182      	sbcs	r2, r0
    9248:	b2d2      	uxtb	r2, r2
    924a:	4013      	ands	r3, r2
    924c:	009b      	lsls	r3, r3, #2
    924e:	0049      	lsls	r1, r1, #1
	if (flags.bits.will)
    9250:	4319      	orrs	r1, r3
    9252:	2b00      	cmp	r3, #0
    9254:	d00b      	beq.n	926e <MQTTSerialize_connect+0x7e>
	{
		flags.bits.willQoS = options->will.qos;
    9256:	233d      	movs	r3, #61	; 0x3d
    9258:	5cea      	ldrb	r2, [r5, r3]
    925a:	3b3a      	subs	r3, #58	; 0x3a
    925c:	4013      	ands	r3, r2
    925e:	00db      	lsls	r3, r3, #3
		flags.bits.willRetain = options->will.retained;
    9260:	223c      	movs	r2, #60	; 0x3c
    9262:	5ca8      	ldrb	r0, [r5, r2]
    9264:	3a3b      	subs	r2, #59	; 0x3b
    9266:	4002      	ands	r2, r0
    9268:	0152      	lsls	r2, r2, #5
    926a:	4319      	orrs	r1, r3
    926c:	4311      	orrs	r1, r2
	}

	if (options->username.cstring || options->username.lenstring.data)
    926e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    9270:	2b00      	cmp	r3, #0
    9272:	d02a      	beq.n	92ca <MQTTSerialize_connect+0xda>
		flags.bits.username = 1;
    9274:	2380      	movs	r3, #128	; 0x80
    9276:	4319      	orrs	r1, r3
	if (options->password.cstring || options->password.lenstring.data)
    9278:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    927a:	2b00      	cmp	r3, #0
    927c:	d029      	beq.n	92d2 <MQTTSerialize_connect+0xe2>
		flags.bits.password = 1;
    927e:	2340      	movs	r3, #64	; 0x40
    9280:	4319      	orrs	r1, r3

	writeChar(&ptr, flags.all);
    9282:	b2cc      	uxtb	r4, r1
    9284:	0021      	movs	r1, r4
    9286:	a801      	add	r0, sp, #4
    9288:	4b24      	ldr	r3, [pc, #144]	; (931c <MQTTSerialize_connect+0x12c>)
    928a:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
    928c:	8b29      	ldrh	r1, [r5, #24]
    928e:	a801      	add	r0, sp, #4
    9290:	4b26      	ldr	r3, [pc, #152]	; (932c <MQTTSerialize_connect+0x13c>)
    9292:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
    9294:	68e9      	ldr	r1, [r5, #12]
    9296:	692a      	ldr	r2, [r5, #16]
    9298:	696b      	ldr	r3, [r5, #20]
    929a:	a801      	add	r0, sp, #4
    929c:	4f24      	ldr	r7, [pc, #144]	; (9330 <MQTTSerialize_connect+0x140>)
    929e:	47b8      	blx	r7
	if (options->willFlag)
    92a0:	7eeb      	ldrb	r3, [r5, #27]
    92a2:	2b00      	cmp	r3, #0
    92a4:	d119      	bne.n	92da <MQTTSerialize_connect+0xea>
	{
		writeMQTTString(&ptr, options->will.topicName);
		writeMQTTString(&ptr, options->will.message);
	}
	if (flags.bits.username)
    92a6:	b263      	sxtb	r3, r4
    92a8:	2b00      	cmp	r3, #0
    92aa:	db22      	blt.n	92f2 <MQTTSerialize_connect+0x102>
		writeMQTTString(&ptr, options->username);
	if (flags.bits.password)
    92ac:	0663      	lsls	r3, r4, #25
    92ae:	d427      	bmi.n	9300 <MQTTSerialize_connect+0x110>
		writeMQTTString(&ptr, options->password);

	rc = ptr - buf;
    92b0:	9b01      	ldr	r3, [sp, #4]
    92b2:	1b98      	subs	r0, r3, r6

	exit: FUNC_EXIT_RC(rc);
	return rc;
}
    92b4:	b003      	add	sp, #12
    92b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		writeCString(&ptr, "MQTT");
    92b8:	491e      	ldr	r1, [pc, #120]	; (9334 <MQTTSerialize_connect+0x144>)
    92ba:	a801      	add	r0, sp, #4
    92bc:	4b1a      	ldr	r3, [pc, #104]	; (9328 <MQTTSerialize_connect+0x138>)
    92be:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
    92c0:	2104      	movs	r1, #4
    92c2:	a801      	add	r0, sp, #4
    92c4:	4b15      	ldr	r3, [pc, #84]	; (931c <MQTTSerialize_connect+0x12c>)
    92c6:	4798      	blx	r3
    92c8:	e7b8      	b.n	923c <MQTTSerialize_connect+0x4c>
	if (options->username.cstring || options->username.lenstring.data)
    92ca:	6cab      	ldr	r3, [r5, #72]	; 0x48
    92cc:	2b00      	cmp	r3, #0
    92ce:	d1d1      	bne.n	9274 <MQTTSerialize_connect+0x84>
    92d0:	e7d2      	b.n	9278 <MQTTSerialize_connect+0x88>
	if (options->password.cstring || options->password.lenstring.data)
    92d2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    92d4:	2b00      	cmp	r3, #0
    92d6:	d1d2      	bne.n	927e <MQTTSerialize_connect+0x8e>
    92d8:	e7d3      	b.n	9282 <MQTTSerialize_connect+0x92>
		writeMQTTString(&ptr, options->will.topicName);
    92da:	6a69      	ldr	r1, [r5, #36]	; 0x24
    92dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    92de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    92e0:	a801      	add	r0, sp, #4
    92e2:	4f13      	ldr	r7, [pc, #76]	; (9330 <MQTTSerialize_connect+0x140>)
    92e4:	47b8      	blx	r7
		writeMQTTString(&ptr, options->will.message);
    92e6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    92e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    92ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
    92ec:	a801      	add	r0, sp, #4
    92ee:	47b8      	blx	r7
    92f0:	e7d9      	b.n	92a6 <MQTTSerialize_connect+0xb6>
		writeMQTTString(&ptr, options->username);
    92f2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    92f4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    92f6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    92f8:	a801      	add	r0, sp, #4
    92fa:	4f0d      	ldr	r7, [pc, #52]	; (9330 <MQTTSerialize_connect+0x140>)
    92fc:	47b8      	blx	r7
    92fe:	e7d5      	b.n	92ac <MQTTSerialize_connect+0xbc>
		writeMQTTString(&ptr, options->password);
    9300:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    9302:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    9304:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    9306:	a801      	add	r0, sp, #4
    9308:	4c09      	ldr	r4, [pc, #36]	; (9330 <MQTTSerialize_connect+0x140>)
    930a:	47a0      	blx	r4
    930c:	e7d0      	b.n	92b0 <MQTTSerialize_connect+0xc0>
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    930e:	2002      	movs	r0, #2
    9310:	4240      	negs	r0, r0
	return rc;
    9312:	e7cf      	b.n	92b4 <MQTTSerialize_connect+0xc4>
    9314:	00009169 	.word	0x00009169
    9318:	00009575 	.word	0x00009575
    931c:	000095d7 	.word	0x000095d7
    9320:	000094ed 	.word	0x000094ed
    9324:	0000e5d4 	.word	0x0000e5d4
    9328:	0000960d 	.word	0x0000960d
    932c:	000095e3 	.word	0x000095e3
    9330:	00009645 	.word	0x00009645
    9334:	0000e5cc 	.word	0x0000e5cc

00009338 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
    9338:	b570      	push	{r4, r5, r6, lr}
    933a:	b082      	sub	sp, #8
    933c:	0005      	movs	r5, r0
    933e:	000c      	movs	r4, r1
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9340:	9201      	str	r2, [sp, #4]
	int rc = 0;
	int mylen;
	MQTTConnackFlags flags = {0};

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9342:	a801      	add	r0, sp, #4
    9344:	4b0e      	ldr	r3, [pc, #56]	; (9380 <MQTTDeserialize_connack+0x48>)
    9346:	4798      	blx	r3
	if (header.bits.type != CONNACK)
    9348:	23f0      	movs	r3, #240	; 0xf0
    934a:	4003      	ands	r3, r0
	int rc = 0;
    934c:	2000      	movs	r0, #0
	if (header.bits.type != CONNACK)
    934e:	2b20      	cmp	r3, #32
    9350:	d001      	beq.n	9356 <MQTTDeserialize_connack+0x1e>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9352:	b002      	add	sp, #8
    9354:	bd70      	pop	{r4, r5, r6, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    9356:	4669      	mov	r1, sp
    9358:	9801      	ldr	r0, [sp, #4]
    935a:	4b0a      	ldr	r3, [pc, #40]	; (9384 <MQTTDeserialize_connack+0x4c>)
    935c:	4798      	blx	r3
    935e:	9b01      	ldr	r3, [sp, #4]
    9360:	181b      	adds	r3, r3, r0
    9362:	9301      	str	r3, [sp, #4]
	if (enddata - curdata < 2)
    9364:	9b00      	ldr	r3, [sp, #0]
    9366:	2b01      	cmp	r3, #1
    9368:	ddf3      	ble.n	9352 <MQTTDeserialize_connack+0x1a>
	flags.all = readChar(&curdata);
    936a:	a801      	add	r0, sp, #4
    936c:	4e04      	ldr	r6, [pc, #16]	; (9380 <MQTTDeserialize_connack+0x48>)
    936e:	47b0      	blx	r6
	*sessionPresent = flags.bits.sessionpresent;
    9370:	0600      	lsls	r0, r0, #24
    9372:	0fc0      	lsrs	r0, r0, #31
    9374:	7028      	strb	r0, [r5, #0]
	*connack_rc = readChar(&curdata);
    9376:	a801      	add	r0, sp, #4
    9378:	47b0      	blx	r6
    937a:	7020      	strb	r0, [r4, #0]
	rc = 1;
    937c:	2001      	movs	r0, #1
    937e:	e7e8      	b.n	9352 <MQTTDeserialize_connack+0x1a>
    9380:	000095cb 	.word	0x000095cb
    9384:	0000959d 	.word	0x0000959d

00009388 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
    9388:	b510      	push	{r4, lr}
    938a:	b082      	sub	sp, #8
    938c:	0004      	movs	r4, r0
	MQTTHeader header = {0};
	int rc = -1;
	unsigned char *ptr = buf;
    938e:	9001      	str	r0, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 2)
    9390:	2901      	cmp	r1, #1
    9392:	dd0f      	ble.n	93b4 <MQTTSerialize_zero+0x2c>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.byte = 0;
	header.bits.type = packettype;
    9394:	210f      	movs	r1, #15
    9396:	4011      	ands	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    9398:	0109      	lsls	r1, r1, #4
    939a:	a801      	add	r0, sp, #4
    939c:	4b07      	ldr	r3, [pc, #28]	; (93bc <MQTTSerialize_zero+0x34>)
    939e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
    93a0:	2100      	movs	r1, #0
    93a2:	9801      	ldr	r0, [sp, #4]
    93a4:	4b06      	ldr	r3, [pc, #24]	; (93c0 <MQTTSerialize_zero+0x38>)
    93a6:	4798      	blx	r3
    93a8:	9b01      	ldr	r3, [sp, #4]
    93aa:	469c      	mov	ip, r3
    93ac:	4460      	add	r0, ip
	rc = ptr - buf;
    93ae:	1b00      	subs	r0, r0, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    93b0:	b002      	add	sp, #8
    93b2:	bd10      	pop	{r4, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    93b4:	2002      	movs	r0, #2
    93b6:	4240      	negs	r0, r0
	return rc;
    93b8:	e7fa      	b.n	93b0 <MQTTSerialize_zero+0x28>
    93ba:	46c0      	nop			; (mov r8, r8)
    93bc:	000095d7 	.word	0x000095d7
    93c0:	000094ed 	.word	0x000094ed

000093c4 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
    93c4:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
    93c6:	220e      	movs	r2, #14
    93c8:	4b01      	ldr	r3, [pc, #4]	; (93d0 <MQTTSerialize_disconnect+0xc>)
    93ca:	4798      	blx	r3
}
    93cc:	bd10      	pop	{r4, pc}
    93ce:	46c0      	nop			; (mov r8, r8)
    93d0:	00009389 	.word	0x00009389

000093d4 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
    93d4:	b510      	push	{r4, lr}
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
    93d6:	220c      	movs	r2, #12
    93d8:	4b01      	ldr	r3, [pc, #4]	; (93e0 <MQTTSerialize_pingreq+0xc>)
    93da:	4798      	blx	r3
}
    93dc:	bd10      	pop	{r4, pc}
    93de:	46c0      	nop			; (mov r8, r8)
    93e0:	00009389 	.word	0x00009389

000093e4 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
    93e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    93e6:	b085      	sub	sp, #20
    93e8:	0005      	movs	r5, r0
    93ea:	000e      	movs	r6, r1
    93ec:	0014      	movs	r4, r2
    93ee:	9301      	str	r3, [sp, #4]
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    93f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    93f2:	9303      	str	r3, [sp, #12]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen = 0;
    93f4:	2300      	movs	r3, #0
    93f6:	9302      	str	r3, [sp, #8]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    93f8:	a803      	add	r0, sp, #12
    93fa:	4b1c      	ldr	r3, [pc, #112]	; (946c <MQTTDeserialize_publish+0x88>)
    93fc:	4798      	blx	r3
    93fe:	0003      	movs	r3, r0
	if (header.bits.type != PUBLISH)
    9400:	22f0      	movs	r2, #240	; 0xf0
    9402:	4010      	ands	r0, r2
	int rc = 0;
    9404:	2700      	movs	r7, #0
	if (header.bits.type != PUBLISH)
    9406:	2830      	cmp	r0, #48	; 0x30
    9408:	d002      	beq.n	9410 <MQTTDeserialize_publish+0x2c>
	*payload = curdata;
	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    940a:	0038      	movs	r0, r7
    940c:	b005      	add	sp, #20
    940e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*dup = header.bits.dup;
    9410:	071a      	lsls	r2, r3, #28
    9412:	0fd2      	lsrs	r2, r2, #31
    9414:	702a      	strb	r2, [r5, #0]
	*qos = header.bits.qos;
    9416:	075a      	lsls	r2, r3, #29
    9418:	0f92      	lsrs	r2, r2, #30
    941a:	6032      	str	r2, [r6, #0]
	*retained = header.bits.retain;
    941c:	07db      	lsls	r3, r3, #31
    941e:	0fdb      	lsrs	r3, r3, #31
    9420:	7023      	strb	r3, [r4, #0]
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    9422:	a902      	add	r1, sp, #8
    9424:	9803      	ldr	r0, [sp, #12]
    9426:	4b12      	ldr	r3, [pc, #72]	; (9470 <MQTTDeserialize_publish+0x8c>)
    9428:	4798      	blx	r3
    942a:	0007      	movs	r7, r0
    942c:	9b03      	ldr	r3, [sp, #12]
    942e:	181c      	adds	r4, r3, r0
    9430:	9403      	str	r4, [sp, #12]
	enddata = curdata + mylen;
    9432:	9b02      	ldr	r3, [sp, #8]
    9434:	469c      	mov	ip, r3
    9436:	4464      	add	r4, ip
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    9438:	0022      	movs	r2, r4
    943a:	a903      	add	r1, sp, #12
    943c:	980a      	ldr	r0, [sp, #40]	; 0x28
    943e:	4b0d      	ldr	r3, [pc, #52]	; (9474 <MQTTDeserialize_publish+0x90>)
    9440:	4798      	blx	r3
    9442:	2800      	cmp	r0, #0
    9444:	d0e1      	beq.n	940a <MQTTDeserialize_publish+0x26>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
    9446:	9b03      	ldr	r3, [sp, #12]
    9448:	1ae3      	subs	r3, r4, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
    944a:	d4de      	bmi.n	940a <MQTTDeserialize_publish+0x26>
	if (*qos > 0)
    944c:	6833      	ldr	r3, [r6, #0]
    944e:	2b00      	cmp	r3, #0
    9450:	dd04      	ble.n	945c <MQTTDeserialize_publish+0x78>
		*packetid = readInt(&curdata);
    9452:	a803      	add	r0, sp, #12
    9454:	4b08      	ldr	r3, [pc, #32]	; (9478 <MQTTDeserialize_publish+0x94>)
    9456:	4798      	blx	r3
    9458:	9b01      	ldr	r3, [sp, #4]
    945a:	8018      	strh	r0, [r3, #0]
	*payloadlen = enddata - curdata;
    945c:	9b03      	ldr	r3, [sp, #12]
    945e:	1ae4      	subs	r4, r4, r3
    9460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9462:	6014      	str	r4, [r2, #0]
	*payload = curdata;
    9464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9466:	6013      	str	r3, [r2, #0]
	rc = 1;
    9468:	2701      	movs	r7, #1
    946a:	e7ce      	b.n	940a <MQTTDeserialize_publish+0x26>
    946c:	000095cb 	.word	0x000095cb
    9470:	0000959d 	.word	0x0000959d
    9474:	00009691 	.word	0x00009691
    9478:	000095b9 	.word	0x000095b9

0000947c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
    947c:	b570      	push	{r4, r5, r6, lr}
    947e:	b082      	sub	sp, #8
    9480:	0005      	movs	r5, r0
    9482:	000e      	movs	r6, r1
    9484:	0014      	movs	r4, r2
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    9486:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9488:	a801      	add	r0, sp, #4
    948a:	4b0c      	ldr	r3, [pc, #48]	; (94bc <MQTTDeserialize_ack+0x40>)
    948c:	4798      	blx	r3
	*dup = header.bits.dup;
    948e:	0703      	lsls	r3, r0, #28
    9490:	0fdb      	lsrs	r3, r3, #31
    9492:	7033      	strb	r3, [r6, #0]
	*packettype = header.bits.type;
    9494:	0600      	lsls	r0, r0, #24
    9496:	0f00      	lsrs	r0, r0, #28
    9498:	7028      	strb	r0, [r5, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    949a:	4669      	mov	r1, sp
    949c:	9801      	ldr	r0, [sp, #4]
    949e:	4b08      	ldr	r3, [pc, #32]	; (94c0 <MQTTDeserialize_ack+0x44>)
    94a0:	4798      	blx	r3
    94a2:	9b01      	ldr	r3, [sp, #4]
    94a4:	181b      	adds	r3, r3, r0
    94a6:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;

	if (enddata - curdata < 2)
    94a8:	9b00      	ldr	r3, [sp, #0]
    94aa:	2b01      	cmp	r3, #1
    94ac:	dd04      	ble.n	94b8 <MQTTDeserialize_ack+0x3c>
		goto exit;
	*packetid = readInt(&curdata);
    94ae:	a801      	add	r0, sp, #4
    94b0:	4b04      	ldr	r3, [pc, #16]	; (94c4 <MQTTDeserialize_ack+0x48>)
    94b2:	4798      	blx	r3
    94b4:	8020      	strh	r0, [r4, #0]

	rc = 1;
    94b6:	2001      	movs	r0, #1
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    94b8:	b002      	add	sp, #8
    94ba:	bd70      	pop	{r4, r5, r6, pc}
    94bc:	000095cb 	.word	0x000095cb
    94c0:	0000959d 	.word	0x0000959d
    94c4:	000095b9 	.word	0x000095b9

000094c8 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
    94c8:	b530      	push	{r4, r5, lr}
	int i;

	for (i = 0; i < count; ++i)
    94ca:	2900      	cmp	r1, #0
    94cc:	dd0a      	ble.n	94e4 <bufchar+0x1c>
    94ce:	4b06      	ldr	r3, [pc, #24]	; (94e8 <bufchar+0x20>)
    94d0:	681b      	ldr	r3, [r3, #0]
    94d2:	185d      	adds	r5, r3, r1
    94d4:	002c      	movs	r4, r5
		*c = *bufptr++;
    94d6:	781a      	ldrb	r2, [r3, #0]
    94d8:	7002      	strb	r2, [r0, #0]
    94da:	3301      	adds	r3, #1
	for (i = 0; i < count; ++i)
    94dc:	42a3      	cmp	r3, r4
    94de:	d1fa      	bne.n	94d6 <bufchar+0xe>
    94e0:	4b01      	ldr	r3, [pc, #4]	; (94e8 <bufchar+0x20>)
    94e2:	601d      	str	r5, [r3, #0]
	return count;
}
    94e4:	0008      	movs	r0, r1
    94e6:	bd30      	pop	{r4, r5, pc}
    94e8:	200007dc 	.word	0x200007dc

000094ec <MQTTPacket_encode>:
{
    94ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    94ee:	b083      	sub	sp, #12
    94f0:	2500      	movs	r5, #0
		char d = length % 128;
    94f2:	267f      	movs	r6, #127	; 0x7f
			d |= 0x80;
    94f4:	2780      	movs	r7, #128	; 0x80
    94f6:	427f      	negs	r7, r7
    94f8:	9501      	str	r5, [sp, #4]
		char d = length % 128;
    94fa:	17ca      	asrs	r2, r1, #31
    94fc:	0e54      	lsrs	r4, r2, #25
    94fe:	190b      	adds	r3, r1, r4
    9500:	4033      	ands	r3, r6
    9502:	1b1b      	subs	r3, r3, r4
    9504:	b2db      	uxtb	r3, r3
		length /= 128;
    9506:	4032      	ands	r2, r6
    9508:	1851      	adds	r1, r2, r1
    950a:	11c9      	asrs	r1, r1, #7
		if (length > 0)
    950c:	2900      	cmp	r1, #0
    950e:	dd03      	ble.n	9518 <MQTTPacket_encode+0x2c>
			d |= 0x80;
    9510:	433b      	orrs	r3, r7
		buf[rc++] = d;
    9512:	5543      	strb	r3, [r0, r5]
    9514:	3501      	adds	r5, #1
    9516:	e7ef      	b.n	94f8 <MQTTPacket_encode+0xc>
    9518:	5543      	strb	r3, [r0, r5]
    951a:	9801      	ldr	r0, [sp, #4]
    951c:	3001      	adds	r0, #1
}
    951e:	b003      	add	sp, #12
    9520:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009522 <MQTTPacket_decode>:
{
    9522:	b5f0      	push	{r4, r5, r6, r7, lr}
    9524:	46ce      	mov	lr, r9
    9526:	4647      	mov	r7, r8
    9528:	b580      	push	{r7, lr}
    952a:	b083      	sub	sp, #12
    952c:	4680      	mov	r8, r0
    952e:	000f      	movs	r7, r1
	*value = 0;
    9530:	2300      	movs	r3, #0
    9532:	600b      	str	r3, [r1, #0]
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    9534:	2401      	movs	r4, #1
	int multiplier = 1;
    9536:	2601      	movs	r6, #1
		rc = (*getcharfn)(&c, 1);
    9538:	466b      	mov	r3, sp
    953a:	1ddd      	adds	r5, r3, #7
		*value += (c & 127) * multiplier;
    953c:	237f      	movs	r3, #127	; 0x7f
    953e:	4699      	mov	r9, r3
		rc = (*getcharfn)(&c, 1);
    9540:	2101      	movs	r1, #1
    9542:	0028      	movs	r0, r5
    9544:	47c0      	blx	r8
		if (rc != 1)
    9546:	2801      	cmp	r0, #1
    9548:	d10e      	bne.n	9568 <MQTTPacket_decode+0x46>
		*value += (c & 127) * multiplier;
    954a:	782b      	ldrb	r3, [r5, #0]
    954c:	464a      	mov	r2, r9
    954e:	401a      	ands	r2, r3
    9550:	4372      	muls	r2, r6
    9552:	6839      	ldr	r1, [r7, #0]
    9554:	468c      	mov	ip, r1
    9556:	4462      	add	r2, ip
    9558:	603a      	str	r2, [r7, #0]
		multiplier *= 128;
    955a:	01f6      	lsls	r6, r6, #7
	} while ((c & 128) != 0);
    955c:	b25b      	sxtb	r3, r3
    955e:	2b00      	cmp	r3, #0
    9560:	da02      	bge.n	9568 <MQTTPacket_decode+0x46>
		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
    9562:	3401      	adds	r4, #1
    9564:	2c05      	cmp	r4, #5
    9566:	d1eb      	bne.n	9540 <MQTTPacket_decode+0x1e>
}
    9568:	0020      	movs	r0, r4
    956a:	b003      	add	sp, #12
    956c:	bc0c      	pop	{r2, r3}
    956e:	4690      	mov	r8, r2
    9570:	4699      	mov	r9, r3
    9572:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009574 <MQTTPacket_len>:
{
    9574:	0003      	movs	r3, r0
	rem_len += 1; /* header byte */
    9576:	1c42      	adds	r2, r0, #1
		rem_len += 1;
    9578:	3002      	adds	r0, #2
	if (rem_len < 128)
    957a:	2a7f      	cmp	r2, #127	; 0x7f
    957c:	dd07      	ble.n	958e <MQTTPacket_len+0x1a>
	else if (rem_len < 16384)
    957e:	4905      	ldr	r1, [pc, #20]	; (9594 <MQTTPacket_len+0x20>)
		rem_len += 2;
    9580:	1cd8      	adds	r0, r3, #3
	else if (rem_len < 16384)
    9582:	428a      	cmp	r2, r1
    9584:	dd03      	ble.n	958e <MQTTPacket_len+0x1a>
	else if (rem_len < 2097151)
    9586:	4904      	ldr	r1, [pc, #16]	; (9598 <MQTTPacket_len+0x24>)
		rem_len += 4;
    9588:	1d58      	adds	r0, r3, #5
	else if (rem_len < 2097151)
    958a:	428a      	cmp	r2, r1
    958c:	dd00      	ble.n	9590 <MQTTPacket_len+0x1c>
}
    958e:	4770      	bx	lr
		rem_len += 3;
    9590:	1d18      	adds	r0, r3, #4
    9592:	e7fc      	b.n	958e <MQTTPacket_len+0x1a>
    9594:	00003fff 	.word	0x00003fff
    9598:	001ffffe 	.word	0x001ffffe

0000959c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
    959c:	b510      	push	{r4, lr}
	bufptr = buf;
    959e:	4b03      	ldr	r3, [pc, #12]	; (95ac <MQTTPacket_decodeBuf+0x10>)
    95a0:	6018      	str	r0, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
    95a2:	4803      	ldr	r0, [pc, #12]	; (95b0 <MQTTPacket_decodeBuf+0x14>)
    95a4:	4b03      	ldr	r3, [pc, #12]	; (95b4 <MQTTPacket_decodeBuf+0x18>)
    95a6:	4798      	blx	r3
}
    95a8:	bd10      	pop	{r4, pc}
    95aa:	46c0      	nop			; (mov r8, r8)
    95ac:	200007dc 	.word	0x200007dc
    95b0:	000094c9 	.word	0x000094c9
    95b4:	00009523 	.word	0x00009523

000095b8 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
    95b8:	0001      	movs	r1, r0
	unsigned char* ptr = *pptr;
    95ba:	6802      	ldr	r2, [r0, #0]
	int len = 256*(*ptr) + (*(ptr+1));
    95bc:	7813      	ldrb	r3, [r2, #0]
    95be:	021b      	lsls	r3, r3, #8
    95c0:	7850      	ldrb	r0, [r2, #1]
    95c2:	1818      	adds	r0, r3, r0
	*pptr += 2;
    95c4:	3202      	adds	r2, #2
    95c6:	600a      	str	r2, [r1, #0]
	return len;
}
    95c8:	4770      	bx	lr

000095ca <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
    95ca:	0002      	movs	r2, r0
	char c = **pptr;
    95cc:	6803      	ldr	r3, [r0, #0]
    95ce:	7818      	ldrb	r0, [r3, #0]
	(*pptr)++;
    95d0:	3301      	adds	r3, #1
    95d2:	6013      	str	r3, [r2, #0]
	return c;
}
    95d4:	4770      	bx	lr

000095d6 <writeChar>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
	**pptr = c;
    95d6:	6803      	ldr	r3, [r0, #0]
    95d8:	7019      	strb	r1, [r3, #0]
	(*pptr)++;
    95da:	6803      	ldr	r3, [r0, #0]
    95dc:	3301      	adds	r3, #1
    95de:	6003      	str	r3, [r0, #0]
}
    95e0:	4770      	bx	lr

000095e2 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
    95e2:	b530      	push	{r4, r5, lr}
	**pptr = (unsigned char)(anInt / 256);
    95e4:	17ca      	asrs	r2, r1, #31
    95e6:	23ff      	movs	r3, #255	; 0xff
    95e8:	001c      	movs	r4, r3
    95ea:	4014      	ands	r4, r2
    95ec:	1864      	adds	r4, r4, r1
    95ee:	1224      	asrs	r4, r4, #8
    95f0:	6805      	ldr	r5, [r0, #0]
    95f2:	702c      	strb	r4, [r5, #0]
	(*pptr)++;
    95f4:	6804      	ldr	r4, [r0, #0]
    95f6:	1c65      	adds	r5, r4, #1
    95f8:	6005      	str	r5, [r0, #0]
	**pptr = (unsigned char)(anInt % 256);
    95fa:	0e12      	lsrs	r2, r2, #24
    95fc:	1889      	adds	r1, r1, r2
    95fe:	400b      	ands	r3, r1
    9600:	1a9b      	subs	r3, r3, r2
    9602:	7063      	strb	r3, [r4, #1]
	(*pptr)++;
    9604:	6803      	ldr	r3, [r0, #0]
    9606:	3301      	adds	r3, #1
    9608:	6003      	str	r3, [r0, #0]
}
    960a:	bd30      	pop	{r4, r5, pc}

0000960c <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
    960c:	b570      	push	{r4, r5, r6, lr}
    960e:	0004      	movs	r4, r0
    9610:	000e      	movs	r6, r1
	int len = strlen(string);
    9612:	0008      	movs	r0, r1
    9614:	4b08      	ldr	r3, [pc, #32]	; (9638 <writeCString+0x2c>)
    9616:	4798      	blx	r3
    9618:	0005      	movs	r5, r0
	writeInt(pptr, len);
    961a:	0001      	movs	r1, r0
    961c:	0020      	movs	r0, r4
    961e:	4b07      	ldr	r3, [pc, #28]	; (963c <writeCString+0x30>)
    9620:	4798      	blx	r3
	memcpy(*pptr, string, len);
    9622:	002a      	movs	r2, r5
    9624:	0031      	movs	r1, r6
    9626:	6820      	ldr	r0, [r4, #0]
    9628:	4b05      	ldr	r3, [pc, #20]	; (9640 <writeCString+0x34>)
    962a:	4798      	blx	r3
	*pptr += len;
    962c:	6823      	ldr	r3, [r4, #0]
    962e:	469c      	mov	ip, r3
    9630:	4465      	add	r5, ip
    9632:	6025      	str	r5, [r4, #0]
}
    9634:	bd70      	pop	{r4, r5, r6, pc}
    9636:	46c0      	nop			; (mov r8, r8)
    9638:	0000bd03 	.word	0x0000bd03
    963c:	000095e3 	.word	0x000095e3
    9640:	0000b81d 	.word	0x0000b81d

00009644 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
    9644:	b530      	push	{r4, r5, lr}
    9646:	b085      	sub	sp, #20
    9648:	0005      	movs	r5, r0
    964a:	9101      	str	r1, [sp, #4]
    964c:	9303      	str	r3, [sp, #12]
    964e:	1e14      	subs	r4, r2, #0
	if (mqttstring.lenstring.len > 0)
    9650:	dc06      	bgt.n	9660 <writeMQTTString+0x1c>
    9652:	9901      	ldr	r1, [sp, #4]
	{
		writeInt(pptr, mqttstring.lenstring.len);
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
		*pptr += mqttstring.lenstring.len;
	}
	else if (mqttstring.cstring)
    9654:	2900      	cmp	r1, #0
    9656:	d010      	beq.n	967a <writeMQTTString+0x36>
		writeCString(pptr, mqttstring.cstring);
    9658:	4b0a      	ldr	r3, [pc, #40]	; (9684 <writeMQTTString+0x40>)
    965a:	4798      	blx	r3
	else
		writeInt(pptr, 0);
}
    965c:	b005      	add	sp, #20
    965e:	bd30      	pop	{r4, r5, pc}
		writeInt(pptr, mqttstring.lenstring.len);
    9660:	0011      	movs	r1, r2
    9662:	4b09      	ldr	r3, [pc, #36]	; (9688 <writeMQTTString+0x44>)
    9664:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
    9666:	0022      	movs	r2, r4
    9668:	9903      	ldr	r1, [sp, #12]
    966a:	6828      	ldr	r0, [r5, #0]
    966c:	4b07      	ldr	r3, [pc, #28]	; (968c <writeMQTTString+0x48>)
    966e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
    9670:	682b      	ldr	r3, [r5, #0]
    9672:	469c      	mov	ip, r3
    9674:	4464      	add	r4, ip
    9676:	602c      	str	r4, [r5, #0]
    9678:	e7f0      	b.n	965c <writeMQTTString+0x18>
		writeInt(pptr, 0);
    967a:	2100      	movs	r1, #0
    967c:	4b02      	ldr	r3, [pc, #8]	; (9688 <writeMQTTString+0x44>)
    967e:	4798      	blx	r3
}
    9680:	e7ec      	b.n	965c <writeMQTTString+0x18>
    9682:	46c0      	nop			; (mov r8, r8)
    9684:	0000960d 	.word	0x0000960d
    9688:	000095e3 	.word	0x000095e3
    968c:	0000b81d 	.word	0x0000b81d

00009690 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
    9690:	b570      	push	{r4, r5, r6, lr}
    9692:	0005      	movs	r5, r0
    9694:	000c      	movs	r4, r1
    9696:	0016      	movs	r6, r2
	int rc = 0;

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
    9698:	680b      	ldr	r3, [r1, #0]
    969a:	1ad3      	subs	r3, r2, r3
    969c:	2b01      	cmp	r3, #1
    969e:	dd12      	ble.n	96c6 <readMQTTLenString+0x36>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
    96a0:	0008      	movs	r0, r1
    96a2:	4b0a      	ldr	r3, [pc, #40]	; (96cc <readMQTTLenString+0x3c>)
    96a4:	4798      	blx	r3
    96a6:	6068      	str	r0, [r5, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    96a8:	6822      	ldr	r2, [r4, #0]
    96aa:	1811      	adds	r1, r2, r0
	int rc = 0;
    96ac:	2300      	movs	r3, #0
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
    96ae:	428e      	cmp	r6, r1
    96b0:	d305      	bcc.n	96be <readMQTTLenString+0x2e>
		{
			mqttstring->lenstring.data = (char*)*pptr;
    96b2:	60aa      	str	r2, [r5, #8]
			*pptr += mqttstring->lenstring.len;
    96b4:	6823      	ldr	r3, [r4, #0]
    96b6:	469c      	mov	ip, r3
    96b8:	4460      	add	r0, ip
    96ba:	6020      	str	r0, [r4, #0]
			rc = 1;
    96bc:	2301      	movs	r3, #1
		}
	}
	mqttstring->cstring = NULL;
    96be:	2200      	movs	r2, #0
    96c0:	602a      	str	r2, [r5, #0]
	FUNC_EXIT_RC(rc);
	return rc;
}
    96c2:	0018      	movs	r0, r3
    96c4:	bd70      	pop	{r4, r5, r6, pc}
	int rc = 0;
    96c6:	2300      	movs	r3, #0
    96c8:	e7f9      	b.n	96be <readMQTTLenString+0x2e>
    96ca:	46c0      	nop			; (mov r8, r8)
    96cc:	000095b9 	.word	0x000095b9

000096d0 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
    96d0:	b500      	push	{lr}
    96d2:	b085      	sub	sp, #20
    96d4:	9102      	str	r1, [sp, #8]
	int rc = 0;

	if (mqttstring.cstring)
    96d6:	2800      	cmp	r0, #0
    96d8:	d003      	beq.n	96e2 <MQTTstrlen+0x12>
		rc = strlen(mqttstring.cstring);
    96da:	4b03      	ldr	r3, [pc, #12]	; (96e8 <MQTTstrlen+0x18>)
    96dc:	4798      	blx	r3
	else
		rc = mqttstring.lenstring.len;
	return rc;
}
    96de:	b005      	add	sp, #20
    96e0:	bd00      	pop	{pc}
		rc = mqttstring.lenstring.len;
    96e2:	9802      	ldr	r0, [sp, #8]
	return rc;
    96e4:	e7fb      	b.n	96de <MQTTstrlen+0xe>
    96e6:	46c0      	nop			; (mov r8, r8)
    96e8:	0000bd03 	.word	0x0000bd03

000096ec <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
    96ec:	b570      	push	{r4, r5, r6, lr}
    96ee:	000d      	movs	r5, r1
	int alen = 0,
		blen = 0;
	char *aptr;
	
	if (a->cstring)
    96f0:	6806      	ldr	r6, [r0, #0]
    96f2:	2e00      	cmp	r6, #0
    96f4:	d00b      	beq.n	970e <MQTTPacket_equals+0x22>
	{
		aptr = a->cstring;
		alen = strlen(a->cstring);
    96f6:	0030      	movs	r0, r6
    96f8:	4b0b      	ldr	r3, [pc, #44]	; (9728 <MQTTPacket_equals+0x3c>)
    96fa:	4798      	blx	r3
    96fc:	0004      	movs	r4, r0
	else
	{
		aptr = a->lenstring.data;
		alen = a->lenstring.len;
	}
	blen = strlen(bptr);
    96fe:	0028      	movs	r0, r5
    9700:	4b09      	ldr	r3, [pc, #36]	; (9728 <MQTTPacket_equals+0x3c>)
    9702:	4798      	blx	r3
    9704:	2300      	movs	r3, #0
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    9706:	4284      	cmp	r4, r0
    9708:	d004      	beq.n	9714 <MQTTPacket_equals+0x28>
}
    970a:	0018      	movs	r0, r3
    970c:	bd70      	pop	{r4, r5, r6, pc}
		aptr = a->lenstring.data;
    970e:	6886      	ldr	r6, [r0, #8]
		alen = a->lenstring.len;
    9710:	6844      	ldr	r4, [r0, #4]
    9712:	e7f4      	b.n	96fe <MQTTPacket_equals+0x12>
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
    9714:	0022      	movs	r2, r4
    9716:	0029      	movs	r1, r5
    9718:	0030      	movs	r0, r6
    971a:	4b04      	ldr	r3, [pc, #16]	; (972c <MQTTPacket_equals+0x40>)
    971c:	4798      	blx	r3
    971e:	4243      	negs	r3, r0
    9720:	4143      	adcs	r3, r0
    9722:	b2db      	uxtb	r3, r3
    9724:	e7f1      	b.n	970a <MQTTPacket_equals+0x1e>
    9726:	46c0      	nop			; (mov r8, r8)
    9728:	0000bd03 	.word	0x0000bd03
    972c:	0000bd11 	.word	0x0000bd11

00009730 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
    9730:	b530      	push	{r4, r5, lr}
    9732:	b083      	sub	sp, #12
    9734:	0004      	movs	r4, r0
    9736:	a806      	add	r0, sp, #24
    9738:	8805      	ldrh	r5, [r0, #0]
	MQTTHeader header = {0};
	int rc = 0;
	unsigned char *ptr = buf;
    973a:	9401      	str	r4, [sp, #4]

	FUNC_ENTRY;
	if (buflen < 4)
    973c:	2903      	cmp	r1, #3
    973e:	dd1e      	ble.n	977e <MQTTSerialize_ack+0x4e>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
		goto exit;
	}
	header.bits.type = packettype;
    9740:	210f      	movs	r1, #15
    9742:	4011      	ands	r1, r2
	header.bits.dup = dup;
    9744:	2001      	movs	r0, #1
    9746:	4003      	ands	r3, r0
    9748:	00db      	lsls	r3, r3, #3
    974a:	0109      	lsls	r1, r1, #4
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
    974c:	3a06      	subs	r2, #6
    974e:	4250      	negs	r0, r2
    9750:	4142      	adcs	r2, r0
    9752:	0052      	lsls	r2, r2, #1
    9754:	4319      	orrs	r1, r3
	writeChar(&ptr, header.byte); /* write header */
    9756:	4311      	orrs	r1, r2
    9758:	a801      	add	r0, sp, #4
    975a:	4b0a      	ldr	r3, [pc, #40]	; (9784 <MQTTSerialize_ack+0x54>)
    975c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
    975e:	2102      	movs	r1, #2
    9760:	9801      	ldr	r0, [sp, #4]
    9762:	4b09      	ldr	r3, [pc, #36]	; (9788 <MQTTSerialize_ack+0x58>)
    9764:	4798      	blx	r3
    9766:	9b01      	ldr	r3, [sp, #4]
    9768:	469c      	mov	ip, r3
    976a:	4460      	add	r0, ip
    976c:	9001      	str	r0, [sp, #4]
	writeInt(&ptr, packetid);
    976e:	0029      	movs	r1, r5
    9770:	a801      	add	r0, sp, #4
    9772:	4b06      	ldr	r3, [pc, #24]	; (978c <MQTTSerialize_ack+0x5c>)
    9774:	4798      	blx	r3
	rc = ptr - buf;
    9776:	9b01      	ldr	r3, [sp, #4]
    9778:	1b18      	subs	r0, r3, r4
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    977a:	b003      	add	sp, #12
    977c:	bd30      	pop	{r4, r5, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    977e:	2002      	movs	r0, #2
    9780:	4240      	negs	r0, r0
	return rc;
    9782:	e7fa      	b.n	977a <MQTTSerialize_ack+0x4a>
    9784:	000095d7 	.word	0x000095d7
    9788:	000094ed 	.word	0x000094ed
    978c:	000095e3 	.word	0x000095e3

00009790 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
    9790:	b5f0      	push	{r4, r5, r6, r7, lr}
    9792:	46c6      	mov	lr, r8
    9794:	b500      	push	{lr}
    9796:	1e07      	subs	r7, r0, #0
	int i;
	int len = 2; /* packetid */

	for (i = 0; i < count; ++i)
    9798:	dd12      	ble.n	97c0 <MQTTSerialize_subscribeLength+0x30>
    979a:	000c      	movs	r4, r1
    979c:	2602      	movs	r6, #2
    979e:	2500      	movs	r5, #0
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
    97a0:	4b08      	ldr	r3, [pc, #32]	; (97c4 <MQTTSerialize_subscribeLength+0x34>)
    97a2:	4698      	mov	r8, r3
    97a4:	6820      	ldr	r0, [r4, #0]
    97a6:	6861      	ldr	r1, [r4, #4]
    97a8:	68a2      	ldr	r2, [r4, #8]
    97aa:	47c0      	blx	r8
    97ac:	3003      	adds	r0, #3
    97ae:	1836      	adds	r6, r6, r0
	for (i = 0; i < count; ++i)
    97b0:	3501      	adds	r5, #1
    97b2:	340c      	adds	r4, #12
    97b4:	42af      	cmp	r7, r5
    97b6:	d1f5      	bne.n	97a4 <MQTTSerialize_subscribeLength+0x14>
	return len;
}
    97b8:	0030      	movs	r0, r6
    97ba:	bc04      	pop	{r2}
    97bc:	4690      	mov	r8, r2
    97be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int len = 2; /* packetid */
    97c0:	2602      	movs	r6, #2
	return len;
    97c2:	e7f9      	b.n	97b8 <MQTTSerialize_subscribeLength+0x28>
    97c4:	000096d1 	.word	0x000096d1

000097c8 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
    97c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    97ca:	46d6      	mov	lr, sl
    97cc:	464f      	mov	r7, r9
    97ce:	4646      	mov	r6, r8
    97d0:	b5c0      	push	{r6, r7, lr}
    97d2:	b084      	sub	sp, #16
    97d4:	4682      	mov	sl, r0
    97d6:	000e      	movs	r6, r1
    97d8:	0015      	movs	r5, r2
    97da:	9301      	str	r3, [sp, #4]
    97dc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	unsigned char *ptr = buf;
    97de:	9003      	str	r0, [sp, #12]
	int rem_len = 0;
	int rc = 0;
	int i = 0;

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
    97e0:	990d      	ldr	r1, [sp, #52]	; 0x34
    97e2:	0038      	movs	r0, r7
    97e4:	4b1f      	ldr	r3, [pc, #124]	; (9864 <MQTTSerialize_subscribe+0x9c>)
    97e6:	4798      	blx	r3
    97e8:	0004      	movs	r4, r0
    97ea:	4b1f      	ldr	r3, [pc, #124]	; (9868 <MQTTSerialize_subscribe+0xa0>)
    97ec:	4798      	blx	r3
    97ee:	42b0      	cmp	r0, r6
    97f0:	dc34      	bgt.n	985c <MQTTSerialize_subscribe+0x94>
		goto exit;
	}

	header.byte = 0;
	header.bits.type = SUBSCRIBE;
	header.bits.dup = dup;
    97f2:	2101      	movs	r1, #1
    97f4:	4029      	ands	r1, r5
    97f6:	00ca      	lsls	r2, r1, #3
	header.bits.qos = 1;
    97f8:	2180      	movs	r1, #128	; 0x80
    97fa:	4311      	orrs	r1, r2
	writeChar(&ptr, header.byte); /* write header */
    97fc:	2302      	movs	r3, #2
    97fe:	4319      	orrs	r1, r3
    9800:	a803      	add	r0, sp, #12
    9802:	4b1a      	ldr	r3, [pc, #104]	; (986c <MQTTSerialize_subscribe+0xa4>)
    9804:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
    9806:	0021      	movs	r1, r4
    9808:	9803      	ldr	r0, [sp, #12]
    980a:	4b19      	ldr	r3, [pc, #100]	; (9870 <MQTTSerialize_subscribe+0xa8>)
    980c:	4798      	blx	r3
    980e:	9a03      	ldr	r2, [sp, #12]
    9810:	4694      	mov	ip, r2
    9812:	4460      	add	r0, ip
    9814:	9003      	str	r0, [sp, #12]

	writeInt(&ptr, packetid);
    9816:	9901      	ldr	r1, [sp, #4]
    9818:	a803      	add	r0, sp, #12
    981a:	4b16      	ldr	r3, [pc, #88]	; (9874 <MQTTSerialize_subscribe+0xac>)
    981c:	4798      	blx	r3

	for (i = 0; i < count; ++i)
    981e:	2f00      	cmp	r7, #0
    9820:	dd13      	ble.n	984a <MQTTSerialize_subscribe+0x82>
    9822:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    9824:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9826:	2500      	movs	r5, #0
	{
		writeMQTTString(&ptr, topicFilters[i]);
    9828:	4b13      	ldr	r3, [pc, #76]	; (9878 <MQTTSerialize_subscribe+0xb0>)
    982a:	4699      	mov	r9, r3
		writeChar(&ptr, requestedQoSs[i]);
    982c:	4b0f      	ldr	r3, [pc, #60]	; (986c <MQTTSerialize_subscribe+0xa4>)
    982e:	4698      	mov	r8, r3
		writeMQTTString(&ptr, topicFilters[i]);
    9830:	6821      	ldr	r1, [r4, #0]
    9832:	6862      	ldr	r2, [r4, #4]
    9834:	68a3      	ldr	r3, [r4, #8]
    9836:	a803      	add	r0, sp, #12
    9838:	47c8      	blx	r9
		writeChar(&ptr, requestedQoSs[i]);
    983a:	ce02      	ldmia	r6!, {r1}
    983c:	b2c9      	uxtb	r1, r1
    983e:	a803      	add	r0, sp, #12
    9840:	47c0      	blx	r8
	for (i = 0; i < count; ++i)
    9842:	3501      	adds	r5, #1
    9844:	340c      	adds	r4, #12
    9846:	42af      	cmp	r7, r5
    9848:	d1f2      	bne.n	9830 <MQTTSerialize_subscribe+0x68>
	}

	rc = ptr - buf;
    984a:	9b03      	ldr	r3, [sp, #12]
    984c:	4652      	mov	r2, sl
    984e:	1a98      	subs	r0, r3, r2
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    9850:	b004      	add	sp, #16
    9852:	bc1c      	pop	{r2, r3, r4}
    9854:	4690      	mov	r8, r2
    9856:	4699      	mov	r9, r3
    9858:	46a2      	mov	sl, r4
    985a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
    985c:	2002      	movs	r0, #2
    985e:	4240      	negs	r0, r0
	return rc;
    9860:	e7f6      	b.n	9850 <MQTTSerialize_subscribe+0x88>
    9862:	46c0      	nop			; (mov r8, r8)
    9864:	00009791 	.word	0x00009791
    9868:	00009575 	.word	0x00009575
    986c:	000095d7 	.word	0x000095d7
    9870:	000094ed 	.word	0x000094ed
    9874:	000095e3 	.word	0x000095e3
    9878:	00009645 	.word	0x00009645

0000987c <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
    987c:	b5f0      	push	{r4, r5, r6, r7, lr}
    987e:	46ce      	mov	lr, r9
    9880:	4647      	mov	r7, r8
    9882:	b580      	push	{r7, lr}
    9884:	b083      	sub	sp, #12
    9886:	0004      	movs	r4, r0
    9888:	000e      	movs	r6, r1
    988a:	0015      	movs	r5, r2
    988c:	001f      	movs	r7, r3
	MQTTHeader header = {0};
	unsigned char* curdata = buf;
    988e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9890:	9301      	str	r3, [sp, #4]
	unsigned char* enddata = NULL;
	int rc = 0;
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
    9892:	a801      	add	r0, sp, #4
    9894:	4b1e      	ldr	r3, [pc, #120]	; (9910 <MQTTDeserialize_suback+0x94>)
    9896:	4798      	blx	r3
	if (header.bits.type != SUBACK)
    9898:	23f0      	movs	r3, #240	; 0xf0
    989a:	4003      	ands	r3, r0
	int rc = 0;
    989c:	2000      	movs	r0, #0
	if (header.bits.type != SUBACK)
    989e:	2b90      	cmp	r3, #144	; 0x90
    98a0:	d004      	beq.n	98ac <MQTTDeserialize_suback+0x30>

	rc = 1;
exit:
	FUNC_EXIT_RC(rc);
	return rc;
}
    98a2:	b003      	add	sp, #12
    98a4:	bc0c      	pop	{r2, r3}
    98a6:	4690      	mov	r8, r2
    98a8:	4699      	mov	r9, r3
    98aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
    98ac:	4669      	mov	r1, sp
    98ae:	9801      	ldr	r0, [sp, #4]
    98b0:	4b18      	ldr	r3, [pc, #96]	; (9914 <MQTTDeserialize_suback+0x98>)
    98b2:	4798      	blx	r3
    98b4:	9b01      	ldr	r3, [sp, #4]
    98b6:	181b      	adds	r3, r3, r0
    98b8:	9301      	str	r3, [sp, #4]
	enddata = curdata + mylen;
    98ba:	9a00      	ldr	r2, [sp, #0]
	if (enddata - curdata < 2)
    98bc:	2a01      	cmp	r2, #1
    98be:	ddf0      	ble.n	98a2 <MQTTDeserialize_suback+0x26>
	enddata = curdata + mylen;
    98c0:	4698      	mov	r8, r3
    98c2:	4490      	add	r8, r2
	*packetid = readInt(&curdata);
    98c4:	a801      	add	r0, sp, #4
    98c6:	4b14      	ldr	r3, [pc, #80]	; (9918 <MQTTDeserialize_suback+0x9c>)
    98c8:	4798      	blx	r3
    98ca:	8020      	strh	r0, [r4, #0]
	*count = 0;
    98cc:	2300      	movs	r3, #0
    98ce:	602b      	str	r3, [r5, #0]
	while (curdata < enddata)
    98d0:	9b01      	ldr	r3, [sp, #4]
    98d2:	4598      	cmp	r8, r3
    98d4:	d916      	bls.n	9904 <MQTTDeserialize_suback+0x88>
		if (*count > maxcount)
    98d6:	2e00      	cmp	r6, #0
    98d8:	db16      	blt.n	9908 <MQTTDeserialize_suback+0x8c>
    98da:	2300      	movs	r3, #0
		grantedQoSs[(*count)++] = readChar(&curdata);
    98dc:	4a0c      	ldr	r2, [pc, #48]	; (9910 <MQTTDeserialize_suback+0x94>)
    98de:	4691      	mov	r9, r2
    98e0:	1c5a      	adds	r2, r3, #1
    98e2:	602a      	str	r2, [r5, #0]
    98e4:	009b      	lsls	r3, r3, #2
    98e6:	18fc      	adds	r4, r7, r3
    98e8:	a801      	add	r0, sp, #4
    98ea:	47c8      	blx	r9
    98ec:	6020      	str	r0, [r4, #0]
	while (curdata < enddata)
    98ee:	9b01      	ldr	r3, [sp, #4]
    98f0:	4598      	cmp	r8, r3
    98f2:	d905      	bls.n	9900 <MQTTDeserialize_suback+0x84>
		if (*count > maxcount)
    98f4:	682b      	ldr	r3, [r5, #0]
    98f6:	42b3      	cmp	r3, r6
    98f8:	ddf2      	ble.n	98e0 <MQTTDeserialize_suback+0x64>
			rc = -1;
    98fa:	2001      	movs	r0, #1
    98fc:	4240      	negs	r0, r0
	return rc;
    98fe:	e7d0      	b.n	98a2 <MQTTDeserialize_suback+0x26>
	rc = 1;
    9900:	2001      	movs	r0, #1
    9902:	e7ce      	b.n	98a2 <MQTTDeserialize_suback+0x26>
    9904:	2001      	movs	r0, #1
    9906:	e7cc      	b.n	98a2 <MQTTDeserialize_suback+0x26>
			rc = -1;
    9908:	2001      	movs	r0, #1
    990a:	4240      	negs	r0, r0
    990c:	e7c9      	b.n	98a2 <MQTTDeserialize_suback+0x26>
    990e:	46c0      	nop			; (mov r8, r8)
    9910:	000095cb 	.word	0x000095cb
    9914:	0000959d 	.word	0x0000959d
    9918:	000095b9 	.word	0x000095b9

0000991c <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    991e:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    9920:	2041      	movs	r0, #65	; 0x41
    9922:	5c23      	ldrb	r3, [r4, r0]
    9924:	2501      	movs	r5, #1
    9926:	432b      	orrs	r3, r5
    9928:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    992a:	b292      	uxth	r2, r2
    992c:	2000      	movs	r0, #0
    992e:	5620      	ldrsb	r0, [r4, r0]
    9930:	2300      	movs	r3, #0
    9932:	4d12      	ldr	r5, [pc, #72]	; (997c <_http_client_send_wait+0x60>)
    9934:	47a8      	blx	r5
    9936:	2800      	cmp	r0, #0
    9938:	db16      	blt.n	9968 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    993a:	2341      	movs	r3, #65	; 0x41
    993c:	5ce3      	ldrb	r3, [r4, r3]
    993e:	07db      	lsls	r3, r3, #31
    9940:	d518      	bpl.n	9974 <_http_client_send_wait+0x58>
    9942:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    9944:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9946:	2b02      	cmp	r3, #2
    9948:	d917      	bls.n	997a <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    994a:	4f0d      	ldr	r7, [pc, #52]	; (9980 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    994c:	4e0d      	ldr	r6, [pc, #52]	; (9984 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    994e:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    9950:	2000      	movs	r0, #0
    9952:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    9954:	6d60      	ldr	r0, [r4, #84]	; 0x54
    9956:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    9958:	5d63      	ldrb	r3, [r4, r5]
    995a:	07db      	lsls	r3, r3, #31
    995c:	d50c      	bpl.n	9978 <_http_client_send_wait+0x5c>
    995e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9960:	2b02      	cmp	r3, #2
    9962:	d8f5      	bhi.n	9950 <_http_client_send_wait+0x34>
	return 0;
    9964:	2000      	movs	r0, #0
    9966:	e008      	b.n	997a <_http_client_send_wait+0x5e>
		module->sending = 0;
    9968:	2241      	movs	r2, #65	; 0x41
    996a:	5ca3      	ldrb	r3, [r4, r2]
    996c:	2101      	movs	r1, #1
    996e:	438b      	bics	r3, r1
    9970:	54a3      	strb	r3, [r4, r2]
		return result;
    9972:	e002      	b.n	997a <_http_client_send_wait+0x5e>
	return 0;
    9974:	2000      	movs	r0, #0
    9976:	e000      	b.n	997a <_http_client_send_wait+0x5e>
    9978:	2000      	movs	r0, #0
}
    997a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    997c:	00003c2d 	.word	0x00003c2d
    9980:	00002345 	.word	0x00002345
    9984:	0000a3e9 	.word	0x0000a3e9

00009988 <http_client_get_config_defaults>:
	config->port = 80;
    9988:	2350      	movs	r3, #80	; 0x50
    998a:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    998c:	2300      	movs	r3, #0
    998e:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    9990:	4a05      	ldr	r2, [pc, #20]	; (99a8 <http_client_get_config_defaults+0x20>)
    9992:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    9994:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    9996:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    9998:	3301      	adds	r3, #1
    999a:	33ff      	adds	r3, #255	; 0xff
    999c:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    999e:	3bae      	subs	r3, #174	; 0xae
    99a0:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    99a2:	4b02      	ldr	r3, [pc, #8]	; (99ac <http_client_get_config_defaults+0x24>)
    99a4:	6183      	str	r3, [r0, #24]
}
    99a6:	4770      	bx	lr
    99a8:	00004e20 	.word	0x00004e20
    99ac:	0000e6c4 	.word	0x0000e6c4

000099b0 <http_client_init>:
{
    99b0:	b570      	push	{r4, r5, r6, lr}
    99b2:	0004      	movs	r4, r0
    99b4:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    99b6:	2800      	cmp	r0, #0
    99b8:	d038      	beq.n	9a2c <http_client_init+0x7c>
    99ba:	2900      	cmp	r1, #0
    99bc:	d039      	beq.n	9a32 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    99be:	690b      	ldr	r3, [r1, #16]
    99c0:	2b00      	cmp	r3, #0
    99c2:	d039      	beq.n	9a38 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    99c4:	684b      	ldr	r3, [r1, #4]
    99c6:	2b00      	cmp	r3, #0
    99c8:	d039      	beq.n	9a3e <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    99ca:	694b      	ldr	r3, [r1, #20]
    99cc:	2b51      	cmp	r3, #81	; 0x51
    99ce:	d939      	bls.n	9a44 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    99d0:	22e8      	movs	r2, #232	; 0xe8
    99d2:	2100      	movs	r1, #0
    99d4:	4b1e      	ldr	r3, [pc, #120]	; (9a50 <http_client_init+0xa0>)
    99d6:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    99d8:	0020      	movs	r0, r4
    99da:	3050      	adds	r0, #80	; 0x50
    99dc:	221c      	movs	r2, #28
    99de:	0029      	movs	r1, r5
    99e0:	4b1c      	ldr	r3, [pc, #112]	; (9a54 <http_client_init+0xa4>)
    99e2:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    99e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    99e6:	2b00      	cmp	r3, #0
    99e8:	d008      	beq.n	99fc <http_client_init+0x4c>
	if (config->timeout > 0) {
    99ea:	892b      	ldrh	r3, [r5, #8]
    99ec:	2b00      	cmp	r3, #0
    99ee:	d111      	bne.n	9a14 <http_client_init+0x64>
	module->req.state = STATE_INIT;
    99f0:	2300      	movs	r3, #0
    99f2:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    99f4:	22d8      	movs	r2, #216	; 0xd8
    99f6:	50a3      	str	r3, [r4, r2]
	return 0;
    99f8:	2000      	movs	r0, #0
}
    99fa:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    99fc:	6928      	ldr	r0, [r5, #16]
    99fe:	4b16      	ldr	r3, [pc, #88]	; (9a58 <http_client_init+0xa8>)
    9a00:	4798      	blx	r3
    9a02:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    9a04:	2800      	cmp	r0, #0
    9a06:	d020      	beq.n	9a4a <http_client_init+0x9a>
		module->alloc_buffer = 1;
    9a08:	2241      	movs	r2, #65	; 0x41
    9a0a:	5ca3      	ldrb	r3, [r4, r2]
    9a0c:	2104      	movs	r1, #4
    9a0e:	430b      	orrs	r3, r1
    9a10:	54a3      	strb	r3, [r4, r2]
    9a12:	e7ea      	b.n	99ea <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    9a14:	6868      	ldr	r0, [r5, #4]
    9a16:	2300      	movs	r3, #0
    9a18:	0022      	movs	r2, r4
    9a1a:	4910      	ldr	r1, [pc, #64]	; (9a5c <http_client_init+0xac>)
    9a1c:	4d10      	ldr	r5, [pc, #64]	; (9a60 <http_client_init+0xb0>)
    9a1e:	47a8      	blx	r5
    9a20:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    9a22:	2800      	cmp	r0, #0
    9a24:	dae4      	bge.n	99f0 <http_client_init+0x40>
			return -ENOSPC;
    9a26:	201c      	movs	r0, #28
    9a28:	4240      	negs	r0, r0
    9a2a:	e7e6      	b.n	99fa <http_client_init+0x4a>
		return -EINVAL;
    9a2c:	2016      	movs	r0, #22
    9a2e:	4240      	negs	r0, r0
    9a30:	e7e3      	b.n	99fa <http_client_init+0x4a>
    9a32:	2016      	movs	r0, #22
    9a34:	4240      	negs	r0, r0
    9a36:	e7e0      	b.n	99fa <http_client_init+0x4a>
		return -EINVAL;
    9a38:	2016      	movs	r0, #22
    9a3a:	4240      	negs	r0, r0
    9a3c:	e7dd      	b.n	99fa <http_client_init+0x4a>
		return -EINVAL;
    9a3e:	2016      	movs	r0, #22
    9a40:	4240      	negs	r0, r0
    9a42:	e7da      	b.n	99fa <http_client_init+0x4a>
		return -EINVAL;
    9a44:	2016      	movs	r0, #22
    9a46:	4240      	negs	r0, r0
    9a48:	e7d7      	b.n	99fa <http_client_init+0x4a>
			return -ENOMEM;
    9a4a:	200c      	movs	r0, #12
    9a4c:	4240      	negs	r0, r0
    9a4e:	e7d4      	b.n	99fa <http_client_init+0x4a>
    9a50:	0000b853 	.word	0x0000b853
    9a54:	0000b81d 	.word	0x0000b81d
    9a58:	0000b7f5 	.word	0x0000b7f5
    9a5c:	00009b3d 	.word	0x00009b3d
    9a60:	0000a3b1 	.word	0x0000a3b1

00009a64 <http_client_deinit>:
{
    9a64:	b510      	push	{r4, lr}
    9a66:	1e04      	subs	r4, r0, #0
	if (module == NULL) {
    9a68:	d014      	beq.n	9a94 <http_client_deinit+0x30>
	if (module->alloc_buffer != 0) {
    9a6a:	2341      	movs	r3, #65	; 0x41
    9a6c:	5cc3      	ldrb	r3, [r0, r3]
    9a6e:	075b      	lsls	r3, r3, #29
    9a70:	d40c      	bmi.n	9a8c <http_client_deinit+0x28>
	if (module->req.ext_header != NULL) {
    9a72:	23d4      	movs	r3, #212	; 0xd4
    9a74:	58e0      	ldr	r0, [r4, r3]
    9a76:	2800      	cmp	r0, #0
    9a78:	d001      	beq.n	9a7e <http_client_deinit+0x1a>
		free(module->req.ext_header);
    9a7a:	4b08      	ldr	r3, [pc, #32]	; (9a9c <http_client_deinit+0x38>)
    9a7c:	4798      	blx	r3
	memset(module, 0, sizeof(struct http_client_module));
    9a7e:	22e8      	movs	r2, #232	; 0xe8
    9a80:	2100      	movs	r1, #0
    9a82:	0020      	movs	r0, r4
    9a84:	4b06      	ldr	r3, [pc, #24]	; (9aa0 <http_client_deinit+0x3c>)
    9a86:	4798      	blx	r3
	return 0;
    9a88:	2000      	movs	r0, #0
}
    9a8a:	bd10      	pop	{r4, pc}
		free(module->config.recv_buffer);
    9a8c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
    9a8e:	4b03      	ldr	r3, [pc, #12]	; (9a9c <http_client_deinit+0x38>)
    9a90:	4798      	blx	r3
    9a92:	e7ee      	b.n	9a72 <http_client_deinit+0xe>
		return -EINVAL;
    9a94:	2016      	movs	r0, #22
    9a96:	4240      	negs	r0, r0
    9a98:	e7f7      	b.n	9a8a <http_client_deinit+0x26>
    9a9a:	46c0      	nop			; (mov r8, r8)
    9a9c:	0000b809 	.word	0x0000b809
    9aa0:	0000b853 	.word	0x0000b853

00009aa4 <http_client_register_callback>:
	if (module == NULL) {
    9aa4:	2800      	cmp	r0, #0
    9aa6:	d002      	beq.n	9aae <http_client_register_callback+0xa>
	module->cb = callback;
    9aa8:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    9aaa:	2000      	movs	r0, #0
}
    9aac:	4770      	bx	lr
		return -EINVAL;
    9aae:	2016      	movs	r0, #22
    9ab0:	4240      	negs	r0, r0
    9ab2:	e7fb      	b.n	9aac <http_client_register_callback+0x8>

00009ab4 <_http_client_clear_conn>:
{
    9ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ab6:	b085      	sub	sp, #20
    9ab8:	0004      	movs	r4, r0
    9aba:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    9abc:	23c0      	movs	r3, #192	; 0xc0
    9abe:	58c3      	ldr	r3, [r0, r3]
    9ac0:	2b00      	cmp	r3, #0
    9ac2:	d002      	beq.n	9aca <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    9ac4:	22c4      	movs	r2, #196	; 0xc4
    9ac6:	5880      	ldr	r0, [r0, r2]
    9ac8:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    9aca:	0020      	movs	r0, r4
    9acc:	30b0      	adds	r0, #176	; 0xb0
    9ace:	2218      	movs	r2, #24
    9ad0:	2100      	movs	r1, #0
    9ad2:	4b17      	ldr	r3, [pc, #92]	; (9b30 <_http_client_clear_conn+0x7c>)
    9ad4:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    9ad6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9ad8:	2b00      	cmp	r3, #0
    9ada:	d124      	bne.n	9b26 <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    9adc:	2300      	movs	r3, #0
    9ade:	56e3      	ldrsb	r3, [r4, r3]
    9ae0:	009b      	lsls	r3, r3, #2
    9ae2:	2500      	movs	r5, #0
    9ae4:	4a13      	ldr	r2, [pc, #76]	; (9b34 <_http_client_clear_conn+0x80>)
    9ae6:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    9ae8:	0020      	movs	r0, r4
    9aea:	306c      	adds	r0, #108	; 0x6c
    9aec:	226c      	movs	r2, #108	; 0x6c
    9aee:	2100      	movs	r1, #0
    9af0:	4f0f      	ldr	r7, [pc, #60]	; (9b30 <_http_client_clear_conn+0x7c>)
    9af2:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    9af4:	0020      	movs	r0, r4
    9af6:	30d8      	adds	r0, #216	; 0xd8
    9af8:	2210      	movs	r2, #16
    9afa:	2100      	movs	r1, #0
    9afc:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    9afe:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    9b00:	23d8      	movs	r3, #216	; 0xd8
    9b02:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    9b04:	2241      	movs	r2, #65	; 0x41
    9b06:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    9b08:	2101      	movs	r1, #1
    9b0a:	438b      	bics	r3, r1
    9b0c:	3101      	adds	r1, #1
    9b0e:	438b      	bics	r3, r1
    9b10:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    9b12:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    9b14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9b16:	2b00      	cmp	r3, #0
    9b18:	d003      	beq.n	9b22 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    9b1a:	aa01      	add	r2, sp, #4
    9b1c:	3102      	adds	r1, #2
    9b1e:	0020      	movs	r0, r4
    9b20:	4798      	blx	r3
}
    9b22:	b005      	add	sp, #20
    9b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    9b26:	2000      	movs	r0, #0
    9b28:	5620      	ldrsb	r0, [r4, r0]
    9b2a:	4b03      	ldr	r3, [pc, #12]	; (9b38 <_http_client_clear_conn+0x84>)
    9b2c:	4798      	blx	r3
    9b2e:	e7d5      	b.n	9adc <_http_client_clear_conn+0x28>
    9b30:	0000b853 	.word	0x0000b853
    9b34:	200007e0 	.word	0x200007e0
    9b38:	00003d59 	.word	0x00003d59

00009b3c <http_client_timer_callback>:
{
    9b3c:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    9b3e:	2a00      	cmp	r2, #0
    9b40:	d004      	beq.n	9b4c <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    9b42:	213e      	movs	r1, #62	; 0x3e
    9b44:	4249      	negs	r1, r1
    9b46:	0010      	movs	r0, r2
    9b48:	4b01      	ldr	r3, [pc, #4]	; (9b50 <http_client_timer_callback+0x14>)
    9b4a:	4798      	blx	r3
}
    9b4c:	bd10      	pop	{r4, pc}
    9b4e:	46c0      	nop			; (mov r8, r8)
    9b50:	00009ab5 	.word	0x00009ab5

00009b54 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    9b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b56:	46de      	mov	lr, fp
    9b58:	4657      	mov	r7, sl
    9b5a:	b580      	push	{r7, lr}
    9b5c:	b095      	sub	sp, #84	; 0x54
    9b5e:	af02      	add	r7, sp, #8
    9b60:	0004      	movs	r4, r0
    9b62:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    9b64:	2310      	movs	r3, #16
    9b66:	2208      	movs	r2, #8
    9b68:	18ba      	adds	r2, r7, r2
    9b6a:	18d2      	adds	r2, r2, r3
    9b6c:	4bb1      	ldr	r3, [pc, #708]	; (9e34 <_http_client_request+0x2e0>)
    9b6e:	cb23      	ldmia	r3!, {r0, r1, r5}
    9b70:	c223      	stmia	r2!, {r0, r1, r5}
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    9b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9b78:	1dd3      	adds	r3, r2, #7
    9b7a:	08db      	lsrs	r3, r3, #3
    9b7c:	00db      	lsls	r3, r3, #3
    9b7e:	4669      	mov	r1, sp
    9b80:	1acb      	subs	r3, r1, r3
    9b82:	469d      	mov	sp, r3
    9b84:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    9b86:	2c00      	cmp	r4, #0
    9b88:	d100      	bne.n	9b8c <_http_client_request+0x38>
    9b8a:	e1f0      	b.n	9f6e <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    9b8c:	2341      	movs	r3, #65	; 0x41
    9b8e:	5ce3      	ldrb	r3, [r4, r3]
    9b90:	07db      	lsls	r3, r3, #31
    9b92:	d500      	bpl.n	9b96 <_http_client_request+0x42>
    9b94:	e1eb      	b.n	9f6e <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    9b96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    9b98:	2b03      	cmp	r3, #3
    9b9a:	d004      	beq.n	9ba6 <_http_client_request+0x52>
    9b9c:	2b04      	cmp	r3, #4
    9b9e:	d100      	bne.n	9ba2 <_http_client_request+0x4e>
    9ba0:	e120      	b.n	9de4 <_http_client_request+0x290>
    9ba2:	46dd      	mov	sp, fp
    9ba4:	e1e4      	b.n	9f70 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    9ba6:	2300      	movs	r3, #0
    9ba8:	21cc      	movs	r1, #204	; 0xcc
    9baa:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    9bac:	3104      	adds	r1, #4
    9bae:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    9bb0:	9400      	str	r4, [sp, #0]
    9bb2:	4ba1      	ldr	r3, [pc, #644]	; (9e38 <_http_client_request+0x2e4>)
    9bb4:	0031      	movs	r1, r6
    9bb6:	202c      	movs	r0, #44	; 0x2c
    9bb8:	2508      	movs	r5, #8
    9bba:	46ac      	mov	ip, r5
    9bbc:	44bc      	add	ip, r7
    9bbe:	4460      	add	r0, ip
    9bc0:	4d9e      	ldr	r5, [pc, #632]	; (9e3c <_http_client_request+0x2e8>)
    9bc2:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    9bc4:	23c8      	movs	r3, #200	; 0xc8
    9bc6:	5ce3      	ldrb	r3, [r4, r3]
    9bc8:	2b01      	cmp	r3, #1
    9bca:	d100      	bne.n	9bce <_http_client_request+0x7a>
    9bcc:	e0a9      	b.n	9d22 <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    9bce:	2b02      	cmp	r3, #2
    9bd0:	d100      	bne.n	9bd4 <_http_client_request+0x80>
    9bd2:	e0af      	b.n	9d34 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    9bd4:	2b03      	cmp	r3, #3
    9bd6:	d100      	bne.n	9bda <_http_client_request+0x86>
    9bd8:	e0b5      	b.n	9d46 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    9bda:	2b04      	cmp	r3, #4
    9bdc:	d100      	bne.n	9be0 <_http_client_request+0x8c>
    9bde:	e0bb      	b.n	9d58 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    9be0:	2b05      	cmp	r3, #5
    9be2:	d100      	bne.n	9be6 <_http_client_request+0x92>
    9be4:	e0c1      	b.n	9d6a <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    9be6:	2b06      	cmp	r3, #6
    9be8:	d100      	bne.n	9bec <_http_client_request+0x98>
    9bea:	e0c7      	b.n	9d7c <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    9bec:	0025      	movs	r5, r4
    9bee:	3570      	adds	r5, #112	; 0x70
    9bf0:	0028      	movs	r0, r5
    9bf2:	4b93      	ldr	r3, [pc, #588]	; (9e40 <_http_client_request+0x2ec>)
    9bf4:	469a      	mov	sl, r3
    9bf6:	4798      	blx	r3
    9bf8:	0002      	movs	r2, r0
    9bfa:	0029      	movs	r1, r5
    9bfc:	232c      	movs	r3, #44	; 0x2c
    9bfe:	2008      	movs	r0, #8
    9c00:	1838      	adds	r0, r7, r0
    9c02:	18c0      	adds	r0, r0, r3
    9c04:	4d8f      	ldr	r5, [pc, #572]	; (9e44 <_http_client_request+0x2f0>)
    9c06:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    9c08:	220b      	movs	r2, #11
    9c0a:	498f      	ldr	r1, [pc, #572]	; (9e48 <_http_client_request+0x2f4>)
    9c0c:	232c      	movs	r3, #44	; 0x2c
    9c0e:	2008      	movs	r0, #8
    9c10:	1838      	adds	r0, r7, r0
    9c12:	18c0      	adds	r0, r0, r3
    9c14:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    9c16:	220c      	movs	r2, #12
    9c18:	498c      	ldr	r1, [pc, #560]	; (9e4c <_http_client_request+0x2f8>)
    9c1a:	232c      	movs	r3, #44	; 0x2c
    9c1c:	2008      	movs	r0, #8
    9c1e:	1838      	adds	r0, r7, r0
    9c20:	18c0      	adds	r0, r0, r3
    9c22:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    9c24:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    9c26:	607b      	str	r3, [r7, #4]
    9c28:	0018      	movs	r0, r3
    9c2a:	47d0      	blx	sl
    9c2c:	0002      	movs	r2, r0
    9c2e:	6879      	ldr	r1, [r7, #4]
    9c30:	232c      	movs	r3, #44	; 0x2c
    9c32:	2008      	movs	r0, #8
    9c34:	1838      	adds	r0, r7, r0
    9c36:	18c0      	adds	r0, r0, r3
    9c38:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9c3a:	2202      	movs	r2, #2
    9c3c:	4984      	ldr	r1, [pc, #528]	; (9e50 <_http_client_request+0x2fc>)
    9c3e:	232c      	movs	r3, #44	; 0x2c
    9c40:	2008      	movs	r0, #8
    9c42:	1838      	adds	r0, r7, r0
    9c44:	18c0      	adds	r0, r0, r3
    9c46:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    9c48:	2206      	movs	r2, #6
    9c4a:	4982      	ldr	r1, [pc, #520]	; (9e54 <_http_client_request+0x300>)
    9c4c:	232c      	movs	r3, #44	; 0x2c
    9c4e:	2008      	movs	r0, #8
    9c50:	1838      	adds	r0, r7, r0
    9c52:	18c0      	adds	r0, r0, r3
    9c54:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    9c56:	1c63      	adds	r3, r4, #1
    9c58:	607b      	str	r3, [r7, #4]
    9c5a:	0018      	movs	r0, r3
    9c5c:	47d0      	blx	sl
    9c5e:	0002      	movs	r2, r0
    9c60:	6879      	ldr	r1, [r7, #4]
    9c62:	232c      	movs	r3, #44	; 0x2c
    9c64:	2008      	movs	r0, #8
    9c66:	1838      	adds	r0, r7, r0
    9c68:	18c0      	adds	r0, r0, r3
    9c6a:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9c6c:	2202      	movs	r2, #2
    9c6e:	4978      	ldr	r1, [pc, #480]	; (9e50 <_http_client_request+0x2fc>)
    9c70:	232c      	movs	r3, #44	; 0x2c
    9c72:	2008      	movs	r0, #8
    9c74:	1838      	adds	r0, r7, r0
    9c76:	18c0      	adds	r0, r0, r3
    9c78:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    9c7a:	2218      	movs	r2, #24
    9c7c:	4976      	ldr	r1, [pc, #472]	; (9e58 <_http_client_request+0x304>)
    9c7e:	232c      	movs	r3, #44	; 0x2c
    9c80:	2008      	movs	r0, #8
    9c82:	1838      	adds	r0, r7, r0
    9c84:	18c0      	adds	r0, r0, r3
    9c86:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    9c88:	2213      	movs	r2, #19
    9c8a:	4974      	ldr	r1, [pc, #464]	; (9e5c <_http_client_request+0x308>)
    9c8c:	232c      	movs	r3, #44	; 0x2c
    9c8e:	2008      	movs	r0, #8
    9c90:	1838      	adds	r0, r7, r0
    9c92:	18c0      	adds	r0, r0, r3
    9c94:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    9c96:	2217      	movs	r2, #23
    9c98:	4971      	ldr	r1, [pc, #452]	; (9e60 <_http_client_request+0x30c>)
    9c9a:	232c      	movs	r3, #44	; 0x2c
    9c9c:	2008      	movs	r0, #8
    9c9e:	1838      	adds	r0, r7, r0
    9ca0:	18c0      	adds	r0, r0, r3
    9ca2:	47a8      	blx	r5

		if (entity->read != NULL) {
    9ca4:	0023      	movs	r3, r4
    9ca6:	33b0      	adds	r3, #176	; 0xb0
    9ca8:	68db      	ldr	r3, [r3, #12]
    9caa:	2b00      	cmp	r3, #0
    9cac:	d07b      	beq.n	9da6 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    9cae:	23b0      	movs	r3, #176	; 0xb0
    9cb0:	5ce3      	ldrb	r3, [r4, r3]
    9cb2:	2b00      	cmp	r3, #0
    9cb4:	d16b      	bne.n	9d8e <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    9cb6:	0023      	movs	r3, r4
    9cb8:	33b0      	adds	r3, #176	; 0xb0
    9cba:	689b      	ldr	r3, [r3, #8]
    9cbc:	2b00      	cmp	r3, #0
    9cbe:	d072      	beq.n	9da6 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    9cc0:	0022      	movs	r2, r4
    9cc2:	32b0      	adds	r2, #176	; 0xb0
    9cc4:	6950      	ldr	r0, [r2, #20]
    9cc6:	4798      	blx	r3
    9cc8:	23cc      	movs	r3, #204	; 0xcc
    9cca:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    9ccc:	2800      	cmp	r0, #0
    9cce:	da00      	bge.n	9cd2 <_http_client_request+0x17e>
    9cd0:	e0ac      	b.n	9e2c <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    9cd2:	0002      	movs	r2, r0
    9cd4:	4963      	ldr	r1, [pc, #396]	; (9e64 <_http_client_request+0x310>)
    9cd6:	2320      	movs	r3, #32
    9cd8:	2008      	movs	r0, #8
    9cda:	1838      	adds	r0, r7, r0
    9cdc:	18c0      	adds	r0, r0, r3
    9cde:	4b62      	ldr	r3, [pc, #392]	; (9e68 <_http_client_request+0x314>)
    9ce0:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    9ce2:	2210      	movs	r2, #16
    9ce4:	4961      	ldr	r1, [pc, #388]	; (9e6c <_http_client_request+0x318>)
    9ce6:	232c      	movs	r3, #44	; 0x2c
    9ce8:	2008      	movs	r0, #8
    9cea:	1838      	adds	r0, r7, r0
    9cec:	18c0      	adds	r0, r0, r3
    9cee:	4d55      	ldr	r5, [pc, #340]	; (9e44 <_http_client_request+0x2f0>)
    9cf0:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    9cf2:	2320      	movs	r3, #32
    9cf4:	2208      	movs	r2, #8
    9cf6:	18ba      	adds	r2, r7, r2
    9cf8:	18d0      	adds	r0, r2, r3
    9cfa:	4b51      	ldr	r3, [pc, #324]	; (9e40 <_http_client_request+0x2ec>)
    9cfc:	4798      	blx	r3
    9cfe:	0002      	movs	r2, r0
    9d00:	2320      	movs	r3, #32
    9d02:	2108      	movs	r1, #8
    9d04:	1879      	adds	r1, r7, r1
    9d06:	18c9      	adds	r1, r1, r3
    9d08:	330c      	adds	r3, #12
    9d0a:	2008      	movs	r0, #8
    9d0c:	1838      	adds	r0, r7, r0
    9d0e:	18c0      	adds	r0, r0, r3
    9d10:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9d12:	2202      	movs	r2, #2
    9d14:	494e      	ldr	r1, [pc, #312]	; (9e50 <_http_client_request+0x2fc>)
    9d16:	232c      	movs	r3, #44	; 0x2c
    9d18:	2008      	movs	r0, #8
    9d1a:	1838      	adds	r0, r7, r0
    9d1c:	18c0      	adds	r0, r0, r3
    9d1e:	47a8      	blx	r5
    9d20:	e041      	b.n	9da6 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
    9d22:	2204      	movs	r2, #4
    9d24:	4952      	ldr	r1, [pc, #328]	; (9e70 <_http_client_request+0x31c>)
    9d26:	332b      	adds	r3, #43	; 0x2b
    9d28:	2008      	movs	r0, #8
    9d2a:	1838      	adds	r0, r7, r0
    9d2c:	18c0      	adds	r0, r0, r3
    9d2e:	4b45      	ldr	r3, [pc, #276]	; (9e44 <_http_client_request+0x2f0>)
    9d30:	4798      	blx	r3
    9d32:	e75b      	b.n	9bec <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
    9d34:	2205      	movs	r2, #5
    9d36:	494f      	ldr	r1, [pc, #316]	; (9e74 <_http_client_request+0x320>)
    9d38:	332a      	adds	r3, #42	; 0x2a
    9d3a:	2008      	movs	r0, #8
    9d3c:	1838      	adds	r0, r7, r0
    9d3e:	18c0      	adds	r0, r0, r3
    9d40:	4b40      	ldr	r3, [pc, #256]	; (9e44 <_http_client_request+0x2f0>)
    9d42:	4798      	blx	r3
    9d44:	e752      	b.n	9bec <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    9d46:	2207      	movs	r2, #7
    9d48:	494b      	ldr	r1, [pc, #300]	; (9e78 <_http_client_request+0x324>)
    9d4a:	3329      	adds	r3, #41	; 0x29
    9d4c:	2008      	movs	r0, #8
    9d4e:	1838      	adds	r0, r7, r0
    9d50:	18c0      	adds	r0, r0, r3
    9d52:	4b3c      	ldr	r3, [pc, #240]	; (9e44 <_http_client_request+0x2f0>)
    9d54:	4798      	blx	r3
    9d56:	e749      	b.n	9bec <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    9d58:	2204      	movs	r2, #4
    9d5a:	4948      	ldr	r1, [pc, #288]	; (9e7c <_http_client_request+0x328>)
    9d5c:	3328      	adds	r3, #40	; 0x28
    9d5e:	2008      	movs	r0, #8
    9d60:	1838      	adds	r0, r7, r0
    9d62:	18c0      	adds	r0, r0, r3
    9d64:	4b37      	ldr	r3, [pc, #220]	; (9e44 <_http_client_request+0x2f0>)
    9d66:	4798      	blx	r3
    9d68:	e740      	b.n	9bec <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    9d6a:	2208      	movs	r2, #8
    9d6c:	4944      	ldr	r1, [pc, #272]	; (9e80 <_http_client_request+0x32c>)
    9d6e:	3327      	adds	r3, #39	; 0x27
    9d70:	2008      	movs	r0, #8
    9d72:	1838      	adds	r0, r7, r0
    9d74:	18c0      	adds	r0, r0, r3
    9d76:	4b33      	ldr	r3, [pc, #204]	; (9e44 <_http_client_request+0x2f0>)
    9d78:	4798      	blx	r3
    9d7a:	e737      	b.n	9bec <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    9d7c:	2205      	movs	r2, #5
    9d7e:	4941      	ldr	r1, [pc, #260]	; (9e84 <_http_client_request+0x330>)
    9d80:	3326      	adds	r3, #38	; 0x26
    9d82:	2008      	movs	r0, #8
    9d84:	1838      	adds	r0, r7, r0
    9d86:	18c0      	adds	r0, r0, r3
    9d88:	4b2e      	ldr	r3, [pc, #184]	; (9e44 <_http_client_request+0x2f0>)
    9d8a:	4798      	blx	r3
    9d8c:	e72e      	b.n	9bec <_http_client_request+0x98>
				module->req.content_length = -1;
    9d8e:	2201      	movs	r2, #1
    9d90:	4252      	negs	r2, r2
    9d92:	23cc      	movs	r3, #204	; 0xcc
    9d94:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    9d96:	321d      	adds	r2, #29
    9d98:	493b      	ldr	r1, [pc, #236]	; (9e88 <_http_client_request+0x334>)
    9d9a:	3ba0      	subs	r3, #160	; 0xa0
    9d9c:	2008      	movs	r0, #8
    9d9e:	1838      	adds	r0, r7, r0
    9da0:	18c0      	adds	r0, r0, r3
    9da2:	4b28      	ldr	r3, [pc, #160]	; (9e44 <_http_client_request+0x2f0>)
    9da4:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    9da6:	23d4      	movs	r3, #212	; 0xd4
    9da8:	58e5      	ldr	r5, [r4, r3]
    9daa:	2d00      	cmp	r5, #0
    9dac:	d00a      	beq.n	9dc4 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
    9dae:	0028      	movs	r0, r5
    9db0:	4b23      	ldr	r3, [pc, #140]	; (9e40 <_http_client_request+0x2ec>)
    9db2:	4798      	blx	r3
    9db4:	0002      	movs	r2, r0
    9db6:	0029      	movs	r1, r5
    9db8:	232c      	movs	r3, #44	; 0x2c
    9dba:	2008      	movs	r0, #8
    9dbc:	1838      	adds	r0, r7, r0
    9dbe:	18c0      	adds	r0, r0, r3
    9dc0:	4b20      	ldr	r3, [pc, #128]	; (9e44 <_http_client_request+0x2f0>)
    9dc2:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    9dc4:	2202      	movs	r2, #2
    9dc6:	4922      	ldr	r1, [pc, #136]	; (9e50 <_http_client_request+0x2fc>)
    9dc8:	232c      	movs	r3, #44	; 0x2c
    9dca:	2008      	movs	r0, #8
    9dcc:	1838      	adds	r0, r7, r0
    9dce:	18c0      	adds	r0, r0, r3
    9dd0:	4b1c      	ldr	r3, [pc, #112]	; (9e44 <_http_client_request+0x2f0>)
    9dd2:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    9dd4:	232c      	movs	r3, #44	; 0x2c
    9dd6:	2208      	movs	r2, #8
    9dd8:	18ba      	adds	r2, r7, r2
    9dda:	18d0      	adds	r0, r2, r3
    9ddc:	4b2b      	ldr	r3, [pc, #172]	; (9e8c <_http_client_request+0x338>)
    9dde:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    9de0:	2304      	movs	r3, #4
    9de2:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    9de4:	23cc      	movs	r3, #204	; 0xcc
    9de6:	58e2      	ldr	r2, [r4, r3]
    9de8:	2a00      	cmp	r2, #0
    9dea:	db51      	blt.n	9e90 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    9dec:	dc00      	bgt.n	9df0 <_http_client_request+0x29c>
    9dee:	e0f0      	b.n	9fd2 <_http_client_request+0x47e>
    9df0:	0023      	movs	r3, r4
    9df2:	33b0      	adds	r3, #176	; 0xb0
    9df4:	68dd      	ldr	r5, [r3, #12]
    9df6:	2d00      	cmp	r5, #0
    9df8:	d100      	bne.n	9dfc <_http_client_request+0x2a8>
    9dfa:	e0ea      	b.n	9fd2 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    9dfc:	23d0      	movs	r3, #208	; 0xd0
    9dfe:	58e3      	ldr	r3, [r4, r3]
    9e00:	429a      	cmp	r2, r3
    9e02:	dd00      	ble.n	9e06 <_http_client_request+0x2b2>
    9e04:	e0ba      	b.n	9f7c <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    9e06:	23c0      	movs	r3, #192	; 0xc0
    9e08:	58e3      	ldr	r3, [r4, r3]
    9e0a:	2b00      	cmp	r3, #0
    9e0c:	d002      	beq.n	9e14 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
    9e0e:	22c4      	movs	r2, #196	; 0xc4
    9e10:	58a0      	ldr	r0, [r4, r2]
    9e12:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    9e14:	2302      	movs	r3, #2
    9e16:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    9e18:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9e1a:	2b00      	cmp	r3, #0
    9e1c:	d100      	bne.n	9e20 <_http_client_request+0x2cc>
    9e1e:	e6c0      	b.n	9ba2 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9e20:	220c      	movs	r2, #12
    9e22:	18ba      	adds	r2, r7, r2
    9e24:	2101      	movs	r1, #1
    9e26:	0020      	movs	r0, r4
    9e28:	4798      	blx	r3
    9e2a:	e6ba      	b.n	9ba2 <_http_client_request+0x4e>
					module->req.content_length = 0;
    9e2c:	2200      	movs	r2, #0
    9e2e:	50e2      	str	r2, [r4, r3]
    9e30:	e7b9      	b.n	9da6 <_http_client_request+0x252>
    9e32:	46c0      	nop			; (mov r8, r8)
    9e34:	0000e5dc 	.word	0x0000e5dc
    9e38:	0000991d 	.word	0x0000991d
    9e3c:	0000a25d 	.word	0x0000a25d
    9e40:	0000bd03 	.word	0x0000bd03
    9e44:	0000a2b1 	.word	0x0000a2b1
    9e48:	0000e620 	.word	0x0000e620
    9e4c:	0000e62c 	.word	0x0000e62c
    9e50:	0000eb70 	.word	0x0000eb70
    9e54:	0000e63c 	.word	0x0000e63c
    9e58:	0000e644 	.word	0x0000e644
    9e5c:	0000e660 	.word	0x0000e660
    9e60:	0000e674 	.word	0x0000e674
    9e64:	0000e6ac 	.word	0x0000e6ac
    9e68:	0000bc75 	.word	0x0000bc75
    9e6c:	0000e6b0 	.word	0x0000e6b0
    9e70:	0000e5ec 	.word	0x0000e5ec
    9e74:	0000e5f4 	.word	0x0000e5f4
    9e78:	0000e5fc 	.word	0x0000e5fc
    9e7c:	0000e604 	.word	0x0000e604
    9e80:	0000e60c 	.word	0x0000e60c
    9e84:	0000e618 	.word	0x0000e618
    9e88:	0000e68c 	.word	0x0000e68c
    9e8c:	0000a26d 	.word	0x0000a26d
		if (module->req.content_length < 0 && entity->read) {
    9e90:	0023      	movs	r3, r4
    9e92:	33b0      	adds	r3, #176	; 0xb0
    9e94:	68dd      	ldr	r5, [r3, #12]
    9e96:	2d00      	cmp	r5, #0
    9e98:	d100      	bne.n	9e9c <_http_client_request+0x348>
    9e9a:	e09a      	b.n	9fd2 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    9e9c:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    9e9e:	58e3      	ldr	r3, [r4, r3]
    9ea0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9ea2:	3a07      	subs	r2, #7
    9ea4:	1d71      	adds	r1, r6, #5
    9ea6:	0020      	movs	r0, r4
    9ea8:	30b0      	adds	r0, #176	; 0xb0
    9eaa:	6940      	ldr	r0, [r0, #20]
    9eac:	47a8      	blx	r5
    9eae:	0005      	movs	r5, r0
    9eb0:	43c3      	mvns	r3, r0
    9eb2:	17db      	asrs	r3, r3, #31
    9eb4:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    9eb6:	220a      	movs	r2, #10
    9eb8:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    9eba:	210d      	movs	r1, #13
    9ebc:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    9ebe:	1973      	adds	r3, r6, r5
    9ec0:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    9ec2:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    9ec4:	230f      	movs	r3, #15
    9ec6:	402b      	ands	r3, r5
    9ec8:	3206      	adds	r2, #6
    9eca:	3905      	subs	r1, #5
    9ecc:	468c      	mov	ip, r1
    9ece:	44bc      	add	ip, r7
    9ed0:	4462      	add	r2, ip
    9ed2:	5cd3      	ldrb	r3, [r2, r3]
    9ed4:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    9ed6:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    9ed8:	2d0f      	cmp	r5, #15
    9eda:	dd0d      	ble.n	9ef8 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    9edc:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    9ede:	17eb      	asrs	r3, r5, #31
    9ee0:	220f      	movs	r2, #15
    9ee2:	4013      	ands	r3, r2
    9ee4:	195b      	adds	r3, r3, r5
    9ee6:	111b      	asrs	r3, r3, #4
    9ee8:	4013      	ands	r3, r2
    9eea:	3201      	adds	r2, #1
    9eec:	2008      	movs	r0, #8
    9eee:	4684      	mov	ip, r0
    9ef0:	44bc      	add	ip, r7
    9ef2:	4462      	add	r2, ip
    9ef4:	5cd3      	ldrb	r3, [r2, r3]
    9ef6:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    9ef8:	2dff      	cmp	r5, #255	; 0xff
    9efa:	dd0d      	ble.n	9f18 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    9efc:	17ea      	asrs	r2, r5, #31
    9efe:	23ff      	movs	r3, #255	; 0xff
    9f00:	4013      	ands	r3, r2
    9f02:	195b      	adds	r3, r3, r5
    9f04:	051b      	lsls	r3, r3, #20
    9f06:	0f1b      	lsrs	r3, r3, #28
    9f08:	2210      	movs	r2, #16
    9f0a:	2108      	movs	r1, #8
    9f0c:	468c      	mov	ip, r1
    9f0e:	44bc      	add	ip, r7
    9f10:	4462      	add	r2, ip
    9f12:	5cd3      	ldrb	r3, [r2, r3]
    9f14:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    9f16:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    9f18:	1cca      	adds	r2, r1, #3
    9f1a:	1b92      	subs	r2, r2, r6
    9f1c:	1d2b      	adds	r3, r5, #4
    9f1e:	18d2      	adds	r2, r2, r3
    9f20:	b292      	uxth	r2, r2
    9f22:	2000      	movs	r0, #0
    9f24:	5620      	ldrsb	r0, [r4, r0]
    9f26:	2300      	movs	r3, #0
    9f28:	4e30      	ldr	r6, [pc, #192]	; (9fec <_http_client_request+0x498>)
    9f2a:	47b0      	blx	r6
    9f2c:	2800      	cmp	r0, #0
    9f2e:	db19      	blt.n	9f64 <_http_client_request+0x410>
			module->req.sent_length += size;
    9f30:	22d0      	movs	r2, #208	; 0xd0
    9f32:	58a3      	ldr	r3, [r4, r2]
    9f34:	195b      	adds	r3, r3, r5
    9f36:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    9f38:	2d00      	cmp	r5, #0
    9f3a:	d000      	beq.n	9f3e <_http_client_request+0x3ea>
    9f3c:	e631      	b.n	9ba2 <_http_client_request+0x4e>
				if (module->req.entity.close) {
    9f3e:	23c0      	movs	r3, #192	; 0xc0
    9f40:	58e3      	ldr	r3, [r4, r3]
    9f42:	2b00      	cmp	r3, #0
    9f44:	d002      	beq.n	9f4c <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    9f46:	3a0c      	subs	r2, #12
    9f48:	58a0      	ldr	r0, [r4, r2]
    9f4a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    9f4c:	2302      	movs	r3, #2
    9f4e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    9f50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9f52:	2b00      	cmp	r3, #0
    9f54:	d100      	bne.n	9f58 <_http_client_request+0x404>
    9f56:	e624      	b.n	9ba2 <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9f58:	220c      	movs	r2, #12
    9f5a:	18ba      	adds	r2, r7, r2
    9f5c:	2101      	movs	r1, #1
    9f5e:	0020      	movs	r0, r4
    9f60:	4798      	blx	r3
    9f62:	e61e      	b.n	9ba2 <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
    9f64:	2105      	movs	r1, #5
    9f66:	4249      	negs	r1, r1
    9f68:	0020      	movs	r0, r4
    9f6a:	4b21      	ldr	r3, [pc, #132]	; (9ff0 <_http_client_request+0x49c>)
    9f6c:	4798      	blx	r3
    9f6e:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    9f70:	46bd      	mov	sp, r7
    9f72:	b013      	add	sp, #76	; 0x4c
    9f74:	bc0c      	pop	{r2, r3}
    9f76:	4692      	mov	sl, r2
    9f78:	469b      	mov	fp, r3
    9f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    9f7c:	0022      	movs	r2, r4
    9f7e:	32b0      	adds	r2, #176	; 0xb0
    9f80:	6950      	ldr	r0, [r2, #20]
    9f82:	6e62      	ldr	r2, [r4, #100]	; 0x64
    9f84:	0031      	movs	r1, r6
    9f86:	47a8      	blx	r5
			if (size < 0) {
    9f88:	2800      	cmp	r0, #0
    9f8a:	db16      	blt.n	9fba <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    9f8c:	23cc      	movs	r3, #204	; 0xcc
    9f8e:	58e5      	ldr	r5, [r4, r3]
    9f90:	3304      	adds	r3, #4
    9f92:	58e3      	ldr	r3, [r4, r3]
    9f94:	1aed      	subs	r5, r5, r3
    9f96:	4285      	cmp	r5, r0
    9f98:	dd00      	ble.n	9f9c <_http_client_request+0x448>
    9f9a:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    9f9c:	b2aa      	uxth	r2, r5
    9f9e:	2000      	movs	r0, #0
    9fa0:	5620      	ldrsb	r0, [r4, r0]
    9fa2:	2300      	movs	r3, #0
    9fa4:	0031      	movs	r1, r6
    9fa6:	4e11      	ldr	r6, [pc, #68]	; (9fec <_http_client_request+0x498>)
    9fa8:	47b0      	blx	r6
    9faa:	2800      	cmp	r0, #0
    9fac:	db0b      	blt.n	9fc6 <_http_client_request+0x472>
				module->req.sent_length += size;
    9fae:	23d0      	movs	r3, #208	; 0xd0
    9fb0:	58e2      	ldr	r2, [r4, r3]
    9fb2:	4694      	mov	ip, r2
    9fb4:	4465      	add	r5, ip
    9fb6:	50e5      	str	r5, [r4, r3]
    9fb8:	e5f3      	b.n	9ba2 <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    9fba:	2105      	movs	r1, #5
    9fbc:	4249      	negs	r1, r1
    9fbe:	0020      	movs	r0, r4
    9fc0:	4b0b      	ldr	r3, [pc, #44]	; (9ff0 <_http_client_request+0x49c>)
    9fc2:	4798      	blx	r3
    9fc4:	e5ed      	b.n	9ba2 <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
    9fc6:	2105      	movs	r1, #5
    9fc8:	4249      	negs	r1, r1
    9fca:	0020      	movs	r0, r4
    9fcc:	4b08      	ldr	r3, [pc, #32]	; (9ff0 <_http_client_request+0x49c>)
    9fce:	4798      	blx	r3
					return;
    9fd0:	e7cd      	b.n	9f6e <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    9fd2:	2302      	movs	r3, #2
    9fd4:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    9fd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    9fd8:	2b00      	cmp	r3, #0
    9fda:	d100      	bne.n	9fde <_http_client_request+0x48a>
    9fdc:	e5e1      	b.n	9ba2 <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    9fde:	220c      	movs	r2, #12
    9fe0:	18ba      	adds	r2, r7, r2
    9fe2:	2101      	movs	r1, #1
    9fe4:	0020      	movs	r0, r4
    9fe6:	4798      	blx	r3
    9fe8:	e5db      	b.n	9ba2 <_http_client_request+0x4e>
    9fea:	46c0      	nop			; (mov r8, r8)
    9fec:	00003c2d 	.word	0x00003c2d
    9ff0:	00009ab5 	.word	0x00009ab5

00009ff4 <http_client_send_request>:
{
    9ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ff6:	46d6      	mov	lr, sl
    9ff8:	b500      	push	{lr}
    9ffa:	b088      	sub	sp, #32
    9ffc:	0004      	movs	r4, r0
    9ffe:	000f      	movs	r7, r1
    a000:	4692      	mov	sl, r2
    a002:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    a004:	2800      	cmp	r0, #0
    a006:	d100      	bne.n	a00a <http_client_send_request+0x16>
    a008:	e0d3      	b.n	a1b2 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    a00a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    a00c:	2b02      	cmp	r3, #2
    a00e:	d900      	bls.n	a012 <http_client_send_request+0x1e>
    a010:	e0d3      	b.n	a1ba <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    a012:	2207      	movs	r2, #7
    a014:	4981      	ldr	r1, [pc, #516]	; (a21c <http_client_send_request+0x228>)
    a016:	0038      	movs	r0, r7
    a018:	4b81      	ldr	r3, [pc, #516]	; (a220 <http_client_send_request+0x22c>)
    a01a:	4798      	blx	r3
		i = 7;
    a01c:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    a01e:	2800      	cmp	r0, #0
    a020:	d007      	beq.n	a032 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    a022:	2208      	movs	r2, #8
    a024:	497f      	ldr	r1, [pc, #508]	; (a224 <http_client_send_request+0x230>)
    a026:	0038      	movs	r0, r7
    a028:	4b7d      	ldr	r3, [pc, #500]	; (a220 <http_client_send_request+0x22c>)
    a02a:	4798      	blx	r3
		i = 8;
    a02c:	4246      	negs	r6, r0
    a02e:	4146      	adcs	r6, r0
    a030:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    a032:	1c63      	adds	r3, r4, #1
    a034:	19bd      	adds	r5, r7, r6
    a036:	9302      	str	r3, [sp, #8]
    a038:	0018      	movs	r0, r3
    a03a:	4b7b      	ldr	r3, [pc, #492]	; (a228 <http_client_send_request+0x234>)
    a03c:	4798      	blx	r3
    a03e:	0002      	movs	r2, r0
    a040:	0029      	movs	r1, r5
    a042:	9802      	ldr	r0, [sp, #8]
    a044:	4b76      	ldr	r3, [pc, #472]	; (a220 <http_client_send_request+0x22c>)
    a046:	4798      	blx	r3
    a048:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    a04a:	782b      	ldrb	r3, [r5, #0]
    a04c:	2b00      	cmp	r3, #0
    a04e:	d052      	beq.n	a0f6 <http_client_send_request+0x102>
    a050:	2b2f      	cmp	r3, #47	; 0x2f
    a052:	d052      	beq.n	a0fa <http_client_send_request+0x106>
    a054:	1c71      	adds	r1, r6, #1
    a056:	1879      	adds	r1, r7, r1
    a058:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    a05a:	3201      	adds	r2, #1
    a05c:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    a05e:	000d      	movs	r5, r1
    a060:	780b      	ldrb	r3, [r1, #0]
    a062:	2b00      	cmp	r3, #0
    a064:	d002      	beq.n	a06c <http_client_send_request+0x78>
    a066:	3101      	adds	r1, #1
    a068:	2b2f      	cmp	r3, #47	; 0x2f
    a06a:	d1f6      	bne.n	a05a <http_client_send_request+0x66>
	module->host[j] = '\0';
    a06c:	18a2      	adds	r2, r4, r2
    a06e:	2300      	movs	r3, #0
    a070:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    a072:	7863      	ldrb	r3, [r4, #1]
    a074:	2b00      	cmp	r3, #0
    a076:	d100      	bne.n	a07a <http_client_send_request+0x86>
    a078:	e0a3      	b.n	a1c2 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    a07a:	0028      	movs	r0, r5
    a07c:	4b6a      	ldr	r3, [pc, #424]	; (a228 <http_client_send_request+0x234>)
    a07e:	4798      	blx	r3
    a080:	283f      	cmp	r0, #63	; 0x3f
    a082:	d900      	bls.n	a086 <http_client_send_request+0x92>
    a084:	e0a1      	b.n	a1ca <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    a086:	23d4      	movs	r3, #212	; 0xd4
    a088:	58e0      	ldr	r0, [r4, r3]
    a08a:	2800      	cmp	r0, #0
    a08c:	d001      	beq.n	a092 <http_client_send_request+0x9e>
		free(module->req.ext_header);
    a08e:	4b67      	ldr	r3, [pc, #412]	; (a22c <http_client_send_request+0x238>)
    a090:	4798      	blx	r3
	if (ext_header != NULL) {
    a092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a094:	2b00      	cmp	r3, #0
    a096:	d032      	beq.n	a0fe <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    a098:	0018      	movs	r0, r3
    a09a:	4b65      	ldr	r3, [pc, #404]	; (a230 <http_client_send_request+0x23c>)
    a09c:	4798      	blx	r3
    a09e:	23d4      	movs	r3, #212	; 0xd4
    a0a0:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    a0a2:	2800      	cmp	r0, #0
    a0a4:	d100      	bne.n	a0a8 <http_client_send_request+0xb4>
    a0a6:	e094      	b.n	a1d2 <http_client_send_request+0x1de>
	module->sending = 0;
    a0a8:	2241      	movs	r2, #65	; 0x41
    a0aa:	5ca3      	ldrb	r3, [r4, r2]
    a0ac:	2101      	movs	r1, #1
    a0ae:	438b      	bics	r3, r1
    a0b0:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    a0b2:	2300      	movs	r3, #0
    a0b4:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    a0b6:	782b      	ldrb	r3, [r5, #0]
    a0b8:	2b2f      	cmp	r3, #47	; 0x2f
    a0ba:	d024      	beq.n	a106 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    a0bc:	222f      	movs	r2, #47	; 0x2f
    a0be:	2370      	movs	r3, #112	; 0x70
    a0c0:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    a0c2:	782b      	ldrb	r3, [r5, #0]
    a0c4:	2b00      	cmp	r3, #0
    a0c6:	d124      	bne.n	a112 <http_client_send_request+0x11e>
	if (entity != NULL) {
    a0c8:	9b03      	ldr	r3, [sp, #12]
    a0ca:	2b00      	cmp	r3, #0
    a0cc:	d027      	beq.n	a11e <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    a0ce:	0020      	movs	r0, r4
    a0d0:	30b0      	adds	r0, #176	; 0xb0
    a0d2:	2218      	movs	r2, #24
    a0d4:	0019      	movs	r1, r3
    a0d6:	4b57      	ldr	r3, [pc, #348]	; (a234 <http_client_send_request+0x240>)
    a0d8:	4798      	blx	r3
	module->req.method = method;
    a0da:	23c8      	movs	r3, #200	; 0xc8
    a0dc:	4652      	mov	r2, sl
    a0de:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    a0e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    a0e2:	2b01      	cmp	r3, #1
    a0e4:	d022      	beq.n	a12c <http_client_send_request+0x138>
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d027      	beq.n	a13a <http_client_send_request+0x146>
    a0ea:	2b02      	cmp	r3, #2
    a0ec:	d03a      	beq.n	a164 <http_client_send_request+0x170>
		return -EAGAIN;
    a0ee:	230b      	movs	r3, #11
    a0f0:	425b      	negs	r3, r3
    a0f2:	9301      	str	r3, [sp, #4]
    a0f4:	e08d      	b.n	a212 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    a0f6:	2200      	movs	r2, #0
    a0f8:	e7b8      	b.n	a06c <http_client_send_request+0x78>
    a0fa:	2200      	movs	r2, #0
    a0fc:	e7b6      	b.n	a06c <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    a0fe:	2200      	movs	r2, #0
    a100:	23d4      	movs	r3, #212	; 0xd4
    a102:	50e2      	str	r2, [r4, r3]
    a104:	e7d0      	b.n	a0a8 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    a106:	0020      	movs	r0, r4
    a108:	3070      	adds	r0, #112	; 0x70
    a10a:	0029      	movs	r1, r5
    a10c:	4b4a      	ldr	r3, [pc, #296]	; (a238 <http_client_send_request+0x244>)
    a10e:	4798      	blx	r3
    a110:	e7da      	b.n	a0c8 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    a112:	0029      	movs	r1, r5
    a114:	0020      	movs	r0, r4
    a116:	3071      	adds	r0, #113	; 0x71
    a118:	4b47      	ldr	r3, [pc, #284]	; (a238 <http_client_send_request+0x244>)
    a11a:	4798      	blx	r3
    a11c:	e7d4      	b.n	a0c8 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    a11e:	0020      	movs	r0, r4
    a120:	30b0      	adds	r0, #176	; 0xb0
    a122:	2218      	movs	r2, #24
    a124:	2100      	movs	r1, #0
    a126:	4b45      	ldr	r3, [pc, #276]	; (a23c <http_client_send_request+0x248>)
    a128:	4798      	blx	r3
    a12a:	e7d6      	b.n	a0da <http_client_send_request+0xe6>
		if (!reconnect) {
    a12c:	9b01      	ldr	r3, [sp, #4]
    a12e:	2b00      	cmp	r3, #0
    a130:	d06f      	beq.n	a212 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    a132:	2100      	movs	r1, #0
    a134:	0020      	movs	r0, r4
    a136:	4b42      	ldr	r3, [pc, #264]	; (a240 <http_client_send_request+0x24c>)
    a138:	4798      	blx	r3
		if (module->config.tls) {
    a13a:	2352      	movs	r3, #82	; 0x52
    a13c:	5ce2      	ldrb	r2, [r4, r3]
    a13e:	1e53      	subs	r3, r2, #1
    a140:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    a142:	b2d2      	uxtb	r2, r2
    a144:	2101      	movs	r1, #1
    a146:	2002      	movs	r0, #2
    a148:	4b3e      	ldr	r3, [pc, #248]	; (a244 <http_client_send_request+0x250>)
    a14a:	4798      	blx	r3
    a14c:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    a14e:	2800      	cmp	r0, #0
    a150:	db43      	blt.n	a1da <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    a152:	0080      	lsls	r0, r0, #2
    a154:	4b3c      	ldr	r3, [pc, #240]	; (a248 <http_client_send_request+0x254>)
    a156:	50c4      	str	r4, [r0, r3]
    a158:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    a15a:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    a15c:	2620      	movs	r6, #32
			isv6 = 1;
    a15e:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    a160:	2730      	movs	r7, #48	; 0x30
    a162:	e00c      	b.n	a17e <http_client_send_request+0x18a>
		if (!reconnect) {
    a164:	9b01      	ldr	r3, [sp, #4]
    a166:	2b00      	cmp	r3, #0
    a168:	d1e3      	bne.n	a132 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    a16a:	3303      	adds	r3, #3
    a16c:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    a16e:	0020      	movs	r0, r4
    a170:	4b36      	ldr	r3, [pc, #216]	; (a24c <http_client_send_request+0x258>)
    a172:	4798      	blx	r3
			break;
    a174:	e04d      	b.n	a212 <http_client_send_request+0x21e>
			if (isv6) {
    a176:	2900      	cmp	r1, #0
    a178:	d001      	beq.n	a17e <http_client_send_request+0x18a>
    a17a:	e012      	b.n	a1a2 <http_client_send_request+0x1ae>
			isv6 = 1;
    a17c:	0001      	movs	r1, r0
	while (*host != '\0') {
    a17e:	782a      	ldrb	r2, [r5, #0]
    a180:	2a00      	cmp	r2, #0
    a182:	d02e      	beq.n	a1e2 <http_client_send_request+0x1ee>
		ch = *host++;
    a184:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    a186:	0013      	movs	r3, r2
    a188:	43b3      	bics	r3, r6
    a18a:	3b41      	subs	r3, #65	; 0x41
    a18c:	2b05      	cmp	r3, #5
    a18e:	d9f5      	bls.n	a17c <http_client_send_request+0x188>
    a190:	2a3a      	cmp	r2, #58	; 0x3a
    a192:	d00a      	beq.n	a1aa <http_client_send_request+0x1b6>
    a194:	2a2f      	cmp	r2, #47	; 0x2f
    a196:	d00a      	beq.n	a1ae <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    a198:	2a2e      	cmp	r2, #46	; 0x2e
    a19a:	d0ec      	beq.n	a176 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    a19c:	403a      	ands	r2, r7
    a19e:	2a30      	cmp	r2, #48	; 0x30
    a1a0:	d0ed      	beq.n	a17e <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    a1a2:	9802      	ldr	r0, [sp, #8]
    a1a4:	4b2a      	ldr	r3, [pc, #168]	; (a250 <http_client_send_request+0x25c>)
    a1a6:	4798      	blx	r3
    a1a8:	e02f      	b.n	a20a <http_client_send_request+0x216>
			isv6 = 1;
    a1aa:	0001      	movs	r1, r0
    a1ac:	e7e7      	b.n	a17e <http_client_send_request+0x18a>
    a1ae:	0001      	movs	r1, r0
    a1b0:	e7e5      	b.n	a17e <http_client_send_request+0x18a>
		return -EINVAL;
    a1b2:	2316      	movs	r3, #22
    a1b4:	425b      	negs	r3, r3
    a1b6:	9301      	str	r3, [sp, #4]
    a1b8:	e02b      	b.n	a212 <http_client_send_request+0x21e>
		return -EBUSY;
    a1ba:	2310      	movs	r3, #16
    a1bc:	425b      	negs	r3, r3
    a1be:	9301      	str	r3, [sp, #4]
    a1c0:	e027      	b.n	a212 <http_client_send_request+0x21e>
		return -EINVAL;
    a1c2:	2316      	movs	r3, #22
    a1c4:	425b      	negs	r3, r3
    a1c6:	9301      	str	r3, [sp, #4]
    a1c8:	e023      	b.n	a212 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    a1ca:	235b      	movs	r3, #91	; 0x5b
    a1cc:	425b      	negs	r3, r3
    a1ce:	9301      	str	r3, [sp, #4]
    a1d0:	e01f      	b.n	a212 <http_client_send_request+0x21e>
			return -ENOMEM;
    a1d2:	230c      	movs	r3, #12
    a1d4:	425b      	negs	r3, r3
    a1d6:	9301      	str	r3, [sp, #4]
    a1d8:	e01b      	b.n	a212 <http_client_send_request+0x21e>
			return -ENOSPC;
    a1da:	231c      	movs	r3, #28
    a1dc:	425b      	negs	r3, r3
    a1de:	9301      	str	r3, [sp, #4]
    a1e0:	e017      	b.n	a212 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    a1e2:	2302      	movs	r3, #2
    a1e4:	aa04      	add	r2, sp, #16
    a1e6:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    a1e8:	334e      	adds	r3, #78	; 0x4e
    a1ea:	5ae3      	ldrh	r3, [r4, r3]
    a1ec:	021a      	lsls	r2, r3, #8
    a1ee:	0a1b      	lsrs	r3, r3, #8
    a1f0:	4313      	orrs	r3, r2
    a1f2:	aa04      	add	r2, sp, #16
    a1f4:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    a1f6:	9802      	ldr	r0, [sp, #8]
    a1f8:	4b16      	ldr	r3, [pc, #88]	; (a254 <http_client_send_request+0x260>)
    a1fa:	4798      	blx	r3
    a1fc:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    a1fe:	2000      	movs	r0, #0
    a200:	5620      	ldrsb	r0, [r4, r0]
    a202:	2210      	movs	r2, #16
    a204:	a904      	add	r1, sp, #16
    a206:	4b14      	ldr	r3, [pc, #80]	; (a258 <http_client_send_request+0x264>)
    a208:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    a20a:	2301      	movs	r3, #1
    a20c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    a20e:	2300      	movs	r3, #0
    a210:	9301      	str	r3, [sp, #4]
}
    a212:	9801      	ldr	r0, [sp, #4]
    a214:	b008      	add	sp, #32
    a216:	bc04      	pop	{r2}
    a218:	4692      	mov	sl, r2
    a21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a21c:	0000e6d0 	.word	0x0000e6d0
    a220:	0000bd11 	.word	0x0000bd11
    a224:	0000e6d8 	.word	0x0000e6d8
    a228:	0000bd03 	.word	0x0000bd03
    a22c:	0000b809 	.word	0x0000b809
    a230:	0000bcc9 	.word	0x0000bcc9
    a234:	0000b81d 	.word	0x0000b81d
    a238:	0000bcb9 	.word	0x0000bcb9
    a23c:	0000b853 	.word	0x0000b853
    a240:	00009ab5 	.word	0x00009ab5
    a244:	00003a19 	.word	0x00003a19
    a248:	200007e0 	.word	0x200007e0
    a24c:	00009b55 	.word	0x00009b55
    a250:	00003e61 	.word	0x00003e61
    a254:	00003df5 	.word	0x00003df5
    a258:	00003b9d 	.word	0x00003b9d

0000a25c <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    a25c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    a25e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    a260:	2200      	movs	r2, #0
    a262:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    a264:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    a266:	9b00      	ldr	r3, [sp, #0]
    a268:	60c3      	str	r3, [r0, #12]
}
    a26a:	4770      	bx	lr

0000a26c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    a26c:	b510      	push	{r4, lr}
    a26e:	0004      	movs	r4, r0
	if(writer->written > 0) {
    a270:	6842      	ldr	r2, [r0, #4]
    a272:	2a00      	cmp	r2, #0
    a274:	d100      	bne.n	a278 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    a276:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    a278:	6901      	ldr	r1, [r0, #16]
    a27a:	68c0      	ldr	r0, [r0, #12]
    a27c:	68a3      	ldr	r3, [r4, #8]
    a27e:	4798      	blx	r3
		writer->written = 0;
    a280:	2300      	movs	r3, #0
    a282:	6063      	str	r3, [r4, #4]
}
    a284:	e7f7      	b.n	a276 <stream_writer_send_remain+0xa>
	...

0000a288 <stream_writer_send_8>:
{
    a288:	b570      	push	{r4, r5, r6, lr}
    a28a:	0004      	movs	r4, r0
    a28c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    a28e:	6803      	ldr	r3, [r0, #0]
    a290:	6842      	ldr	r2, [r0, #4]
    a292:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    a294:	2b00      	cmp	r3, #0
    a296:	dd05      	ble.n	a2a4 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    a298:	6922      	ldr	r2, [r4, #16]
    a29a:	6863      	ldr	r3, [r4, #4]
    a29c:	1c59      	adds	r1, r3, #1
    a29e:	6061      	str	r1, [r4, #4]
    a2a0:	54d5      	strb	r5, [r2, r3]
}
    a2a2:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    a2a4:	4b01      	ldr	r3, [pc, #4]	; (a2ac <stream_writer_send_8+0x24>)
    a2a6:	4798      	blx	r3
    a2a8:	e7f6      	b.n	a298 <stream_writer_send_8+0x10>
    a2aa:	46c0      	nop			; (mov r8, r8)
    a2ac:	0000a26d 	.word	0x0000a26d

0000a2b0 <stream_writer_send_buffer>:
{
    a2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2b2:	0006      	movs	r6, r0
    a2b4:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    a2b6:	2a00      	cmp	r2, #0
    a2b8:	d008      	beq.n	a2cc <stream_writer_send_buffer+0x1c>
    a2ba:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    a2bc:	4f04      	ldr	r7, [pc, #16]	; (a2d0 <stream_writer_send_buffer+0x20>)
    a2be:	2100      	movs	r1, #0
    a2c0:	5661      	ldrsb	r1, [r4, r1]
    a2c2:	0030      	movs	r0, r6
    a2c4:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    a2c6:	3401      	adds	r4, #1
    a2c8:	42a5      	cmp	r5, r4
    a2ca:	d1f8      	bne.n	a2be <stream_writer_send_buffer+0xe>
}
    a2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2ce:	46c0      	nop			; (mov r8, r8)
    a2d0:	0000a289 	.word	0x0000a289

0000a2d4 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    a2d4:	4a02      	ldr	r2, [pc, #8]	; (a2e0 <sw_timer_tcc_callback+0xc>)
    a2d6:	6813      	ldr	r3, [r2, #0]
    a2d8:	3301      	adds	r3, #1
    a2da:	6013      	str	r3, [r2, #0]
}
    a2dc:	4770      	bx	lr
    a2de:	46c0      	nop			; (mov r8, r8)
    a2e0:	200007fc 	.word	0x200007fc

0000a2e4 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    a2e4:	2364      	movs	r3, #100	; 0x64
    a2e6:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    a2e8:	2300      	movs	r3, #0
    a2ea:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    a2ec:	7043      	strb	r3, [r0, #1]
}
    a2ee:	4770      	bx	lr

0000a2f0 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    a2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2f2:	46c6      	mov	lr, r8
    a2f4:	b500      	push	{lr}
    a2f6:	b0ac      	sub	sp, #176	; 0xb0
    a2f8:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    a2fa:	466e      	mov	r6, sp
    a2fc:	4b1d      	ldr	r3, [pc, #116]	; (a374 <sw_timer_init+0x84>)
    a2fe:	466a      	mov	r2, sp
    a300:	cb92      	ldmia	r3!, {r1, r4, r7}
    a302:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    a304:	886b      	ldrh	r3, [r5, #2]
    a306:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    a308:	3014      	adds	r0, #20
    a30a:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    a30c:	782b      	ldrb	r3, [r5, #0]
    a30e:	009b      	lsls	r3, r3, #2
    a310:	5999      	ldr	r1, [r3, r6]
    a312:	0017      	movs	r7, r2
    a314:	0010      	movs	r0, r2
    a316:	4b18      	ldr	r3, [pc, #96]	; (a378 <sw_timer_init+0x88>)
    a318:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    a31a:	2000      	movs	r0, #0
    a31c:	4b17      	ldr	r3, [pc, #92]	; (a37c <sw_timer_init+0x8c>)
    a31e:	4798      	blx	r3
    a320:	4b17      	ldr	r3, [pc, #92]	; (a380 <sw_timer_init+0x90>)
    a322:	7a1b      	ldrb	r3, [r3, #8]
    a324:	b2db      	uxtb	r3, r3
    a326:	40d8      	lsrs	r0, r3
    a328:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    a32a:	8869      	ldrh	r1, [r5, #2]
    a32c:	20fa      	movs	r0, #250	; 0xfa
    a32e:	0200      	lsls	r0, r0, #8
    a330:	4b14      	ldr	r3, [pc, #80]	; (a384 <sw_timer_init+0x94>)
    a332:	4798      	blx	r3
    a334:	0001      	movs	r1, r0
    a336:	4640      	mov	r0, r8
    a338:	4b13      	ldr	r3, [pc, #76]	; (a388 <sw_timer_init+0x98>)
    a33a:	4798      	blx	r3
    a33c:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    a33e:	2305      	movs	r3, #5
    a340:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    a342:	782b      	ldrb	r3, [r5, #0]
    a344:	009b      	lsls	r3, r3, #2
    a346:	5999      	ldr	r1, [r3, r6]
    a348:	003a      	movs	r2, r7
    a34a:	0020      	movs	r0, r4
    a34c:	4b0f      	ldr	r3, [pc, #60]	; (a38c <sw_timer_init+0x9c>)
    a34e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a350:	786a      	ldrb	r2, [r5, #1]
    a352:	3208      	adds	r2, #8
    a354:	b2d2      	uxtb	r2, r2
    a356:	490e      	ldr	r1, [pc, #56]	; (a390 <sw_timer_init+0xa0>)
    a358:	0020      	movs	r0, r4
    a35a:	4b0e      	ldr	r3, [pc, #56]	; (a394 <sw_timer_init+0xa4>)
    a35c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    a35e:	7869      	ldrb	r1, [r5, #1]
    a360:	3108      	adds	r1, #8
    a362:	b2c9      	uxtb	r1, r1
    a364:	0020      	movs	r0, r4
    a366:	4b0c      	ldr	r3, [pc, #48]	; (a398 <sw_timer_init+0xa8>)
    a368:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    a36a:	b02c      	add	sp, #176	; 0xb0
    a36c:	bc04      	pop	{r2}
    a36e:	4690      	mov	r8, r2
    a370:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a372:	46c0      	nop			; (mov r8, r8)
    a374:	0000e6e4 	.word	0x0000e6e4
    a378:	00006159 	.word	0x00006159
    a37c:	00005eb5 	.word	0x00005eb5
    a380:	40000400 	.word	0x40000400
    a384:	0000b575 	.word	0x0000b575
    a388:	0000b461 	.word	0x0000b461
    a38c:	000062a5 	.word	0x000062a5
    a390:	0000a2d5 	.word	0x0000a2d5
    a394:	000066b1 	.word	0x000066b1
    a398:	000066c9 	.word	0x000066c9

0000a39c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    a39c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    a39e:	2102      	movs	r1, #2
    a3a0:	6893      	ldr	r3, [r2, #8]
    a3a2:	4219      	tst	r1, r3
    a3a4:	d1fc      	bne.n	a3a0 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    a3a6:	6813      	ldr	r3, [r2, #0]
    a3a8:	2102      	movs	r1, #2
    a3aa:	430b      	orrs	r3, r1
    a3ac:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    a3ae:	4770      	bx	lr

0000a3b0 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    a3b0:	b570      	push	{r4, r5, r6, lr}
    a3b2:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    a3b4:	7805      	ldrb	r5, [r0, #0]
    a3b6:	07e8      	lsls	r0, r5, #31
    a3b8:	d502      	bpl.n	a3c0 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    a3ba:	2001      	movs	r0, #1
    a3bc:	4240      	negs	r0, r0
}
    a3be:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    a3c0:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    a3c2:	0029      	movs	r1, r5
    a3c4:	2002      	movs	r0, #2
    a3c6:	4381      	bics	r1, r0
    a3c8:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    a3ca:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    a3cc:	6d61      	ldr	r1, [r4, #84]	; 0x54
    a3ce:	0018      	movs	r0, r3
    a3d0:	4b04      	ldr	r3, [pc, #16]	; (a3e4 <sw_timer_register_callback+0x34>)
    a3d2:	4798      	blx	r3
    a3d4:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    a3d6:	7823      	ldrb	r3, [r4, #0]
    a3d8:	2201      	movs	r2, #1
    a3da:	4313      	orrs	r3, r2
    a3dc:	7023      	strb	r3, [r4, #0]
			return index;
    a3de:	2000      	movs	r0, #0
    a3e0:	e7ed      	b.n	a3be <sw_timer_register_callback+0xe>
    a3e2:	46c0      	nop			; (mov r8, r8)
    a3e4:	0000b461 	.word	0x0000b461

0000a3e8 <sw_timer_task>:

	handler->callback_enable = 0;
}

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    a3e8:	b570      	push	{r4, r5, r6, lr}
    a3ea:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    a3ec:	7803      	ldrb	r3, [r0, #0]
    a3ee:	07db      	lsls	r3, r3, #31
    a3f0:	d507      	bpl.n	a402 <sw_timer_task+0x1a>
    a3f2:	7803      	ldrb	r3, [r0, #0]
    a3f4:	079b      	lsls	r3, r3, #30
    a3f6:	d504      	bpl.n	a402 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    a3f8:	4b10      	ldr	r3, [pc, #64]	; (a43c <sw_timer_task+0x54>)
    a3fa:	681a      	ldr	r2, [r3, #0]
    a3fc:	6903      	ldr	r3, [r0, #16]
    a3fe:	1a9b      	subs	r3, r3, r2
    a400:	d400      	bmi.n	a404 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    a402:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    a404:	7803      	ldrb	r3, [r0, #0]
    a406:	075b      	lsls	r3, r3, #29
    a408:	d4fb      	bmi.n	a402 <sw_timer_task+0x1a>
				handler->busy = 1;
    a40a:	7803      	ldrb	r3, [r0, #0]
    a40c:	2104      	movs	r1, #4
    a40e:	430b      	orrs	r3, r1
    a410:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    a412:	68c3      	ldr	r3, [r0, #12]
    a414:	2b00      	cmp	r3, #0
    a416:	d00b      	beq.n	a430 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    a418:	18d2      	adds	r2, r2, r3
    a41a:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    a41c:	68a2      	ldr	r2, [r4, #8]
    a41e:	2100      	movs	r1, #0
    a420:	0020      	movs	r0, r4
    a422:	6865      	ldr	r5, [r4, #4]
    a424:	47a8      	blx	r5
				handler->busy = 0;
    a426:	7823      	ldrb	r3, [r4, #0]
    a428:	2204      	movs	r2, #4
    a42a:	4393      	bics	r3, r2
    a42c:	7023      	strb	r3, [r4, #0]
}
    a42e:	e7e8      	b.n	a402 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    a430:	7802      	ldrb	r2, [r0, #0]
    a432:	2102      	movs	r1, #2
    a434:	438a      	bics	r2, r1
    a436:	7002      	strb	r2, [r0, #0]
    a438:	e7f0      	b.n	a41c <sw_timer_task+0x34>
    a43a:	46c0      	nop			; (mov r8, r8)
    a43c:	200007fc 	.word	0x200007fc

0000a440 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
	down_state |= mask;
    a440:	4b02      	ldr	r3, [pc, #8]	; (a44c <add_state+0xc>)
    a442:	781a      	ldrb	r2, [r3, #0]
    a444:	4310      	orrs	r0, r2
    a446:	7018      	strb	r0, [r3, #0]
}
    a448:	4770      	bx	lr
    a44a:	46c0      	nop			; (mov r8, r8)
    a44c:	20000835 	.word	0x20000835

0000a450 <extint_detection_callback>:
{
	//Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
	//temperature++;
	//if (temperature > 40) temperature = 1;
	//snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d}}", temperature);
	isPressed = true;
    a450:	2201      	movs	r2, #1
    a452:	4b01      	ldr	r3, [pc, #4]	; (a458 <extint_detection_callback+0x8>)
    a454:	701a      	strb	r2, [r3, #0]
}
    a456:	4770      	bx	lr
    a458:	20000a90 	.word	0x20000a90

0000a45c <SubscribeHandler>:
{
    a45c:	b570      	push	{r4, r5, r6, lr}
    a45e:	0004      	movs	r4, r0
	printf("\r\n %.*s",msgData->topicName->lenstring.len,msgData->topicName->lenstring.data);
    a460:	6843      	ldr	r3, [r0, #4]
    a462:	689a      	ldr	r2, [r3, #8]
    a464:	6859      	ldr	r1, [r3, #4]
    a466:	4816      	ldr	r0, [pc, #88]	; (a4c0 <SubscribeHandler+0x64>)
    a468:	4d16      	ldr	r5, [pc, #88]	; (a4c4 <SubscribeHandler+0x68>)
    a46a:	47a8      	blx	r5
	printf(" >> ");
    a46c:	4816      	ldr	r0, [pc, #88]	; (a4c8 <SubscribeHandler+0x6c>)
    a46e:	47a8      	blx	r5
	printf("%.*s",msgData->message->payloadlen,(char *)msgData->message->payload);	
    a470:	6823      	ldr	r3, [r4, #0]
    a472:	689a      	ldr	r2, [r3, #8]
    a474:	68d9      	ldr	r1, [r3, #12]
    a476:	4815      	ldr	r0, [pc, #84]	; (a4cc <SubscribeHandler+0x70>)
    a478:	47a8      	blx	r5
	if(strncmp((char *) msgData->topicName->lenstring.data, LED_TOPIC, msgData->message->payloadlen) == 0)
    a47a:	6826      	ldr	r6, [r4, #0]
    a47c:	68f5      	ldr	r5, [r6, #12]
    a47e:	6863      	ldr	r3, [r4, #4]
    a480:	6898      	ldr	r0, [r3, #8]
    a482:	002a      	movs	r2, r5
    a484:	4912      	ldr	r1, [pc, #72]	; (a4d0 <SubscribeHandler+0x74>)
    a486:	4b13      	ldr	r3, [pc, #76]	; (a4d4 <SubscribeHandler+0x78>)
    a488:	4798      	blx	r3
    a48a:	2800      	cmp	r0, #0
    a48c:	d117      	bne.n	a4be <SubscribeHandler+0x62>
		if(strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0)
    a48e:	68b4      	ldr	r4, [r6, #8]
    a490:	002a      	movs	r2, r5
    a492:	4911      	ldr	r1, [pc, #68]	; (a4d8 <SubscribeHandler+0x7c>)
    a494:	0020      	movs	r0, r4
    a496:	4b0f      	ldr	r3, [pc, #60]	; (a4d4 <SubscribeHandler+0x78>)
    a498:	4798      	blx	r3
    a49a:	2800      	cmp	r0, #0
    a49c:	d00b      	beq.n	a4b6 <SubscribeHandler+0x5a>
		else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0)
    a49e:	002a      	movs	r2, r5
    a4a0:	490e      	ldr	r1, [pc, #56]	; (a4dc <SubscribeHandler+0x80>)
    a4a2:	0020      	movs	r0, r4
    a4a4:	4b0b      	ldr	r3, [pc, #44]	; (a4d4 <SubscribeHandler+0x78>)
    a4a6:	4798      	blx	r3
    a4a8:	2800      	cmp	r0, #0
    a4aa:	d108      	bne.n	a4be <SubscribeHandler+0x62>
		port_base->OUTCLR.reg = pin_mask;
    a4ac:	2280      	movs	r2, #128	; 0x80
    a4ae:	0412      	lsls	r2, r2, #16
    a4b0:	4b0b      	ldr	r3, [pc, #44]	; (a4e0 <SubscribeHandler+0x84>)
    a4b2:	615a      	str	r2, [r3, #20]
}
    a4b4:	e003      	b.n	a4be <SubscribeHandler+0x62>
		port_base->OUTSET.reg = pin_mask;
    a4b6:	2280      	movs	r2, #128	; 0x80
    a4b8:	0412      	lsls	r2, r2, #16
    a4ba:	4b09      	ldr	r3, [pc, #36]	; (a4e0 <SubscribeHandler+0x84>)
    a4bc:	619a      	str	r2, [r3, #24]
    a4be:	bd70      	pop	{r4, r5, r6, pc}
    a4c0:	0000e704 	.word	0x0000e704
    a4c4:	0000b9b5 	.word	0x0000b9b5
    a4c8:	0000e70c 	.word	0x0000e70c
    a4cc:	0000e714 	.word	0x0000e714
    a4d0:	0000e71c 	.word	0x0000e71c
    a4d4:	0000bd11 	.word	0x0000bd11
    a4d8:	0000e724 	.word	0x0000e724
    a4dc:	0000e72c 	.word	0x0000e72c
    a4e0:	41004400 	.word	0x41004400

0000a4e4 <start_download>:
{
    a4e4:	b510      	push	{r4, lr}
    a4e6:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    a4e8:	4b12      	ldr	r3, [pc, #72]	; (a534 <start_download+0x50>)
    a4ea:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    a4ec:	07da      	lsls	r2, r3, #31
    a4ee:	d511      	bpl.n	a514 <start_download+0x30>
	if (!is_state_set(WIFI_CONNECTED)) {
    a4f0:	079a      	lsls	r2, r3, #30
    a4f2:	d513      	bpl.n	a51c <start_download+0x38>
	if (is_state_set(GET_REQUESTED)) {
    a4f4:	075a      	lsls	r2, r3, #29
    a4f6:	d415      	bmi.n	a524 <start_download+0x40>
	if (is_state_set(DOWNLOADING)) {
    a4f8:	071b      	lsls	r3, r3, #28
    a4fa:	d417      	bmi.n	a52c <start_download+0x48>
	printf("start_download: sending HTTP request...\r\n");
    a4fc:	480e      	ldr	r0, [pc, #56]	; (a538 <start_download+0x54>)
    a4fe:	4b0f      	ldr	r3, [pc, #60]	; (a53c <start_download+0x58>)
    a500:	4798      	blx	r3
	http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    a502:	2300      	movs	r3, #0
    a504:	9300      	str	r3, [sp, #0]
    a506:	2201      	movs	r2, #1
    a508:	490d      	ldr	r1, [pc, #52]	; (a540 <start_download+0x5c>)
    a50a:	480e      	ldr	r0, [pc, #56]	; (a544 <start_download+0x60>)
    a50c:	4c0e      	ldr	r4, [pc, #56]	; (a548 <start_download+0x64>)
    a50e:	47a0      	blx	r4
}
    a510:	b002      	add	sp, #8
    a512:	bd10      	pop	{r4, pc}
		printf("start_download: MMC storage not ready.\r\n");
    a514:	480d      	ldr	r0, [pc, #52]	; (a54c <start_download+0x68>)
    a516:	4b09      	ldr	r3, [pc, #36]	; (a53c <start_download+0x58>)
    a518:	4798      	blx	r3
		return;
    a51a:	e7f9      	b.n	a510 <start_download+0x2c>
		printf("start_download: Wi-Fi is not connected.\r\n");
    a51c:	480c      	ldr	r0, [pc, #48]	; (a550 <start_download+0x6c>)
    a51e:	4b07      	ldr	r3, [pc, #28]	; (a53c <start_download+0x58>)
    a520:	4798      	blx	r3
		return;
    a522:	e7f5      	b.n	a510 <start_download+0x2c>
		printf("start_download: request is sent already.\r\n");
    a524:	480b      	ldr	r0, [pc, #44]	; (a554 <start_download+0x70>)
    a526:	4b05      	ldr	r3, [pc, #20]	; (a53c <start_download+0x58>)
    a528:	4798      	blx	r3
		return;
    a52a:	e7f1      	b.n	a510 <start_download+0x2c>
		printf("start_download: running download already.\r\n");
    a52c:	480a      	ldr	r0, [pc, #40]	; (a558 <start_download+0x74>)
    a52e:	4b03      	ldr	r3, [pc, #12]	; (a53c <start_download+0x58>)
    a530:	4798      	blx	r3
		return;
    a532:	e7ed      	b.n	a510 <start_download+0x2c>
    a534:	20000835 	.word	0x20000835
    a538:	0000f1a4 	.word	0x0000f1a4
    a53c:	0000bad1 	.word	0x0000bad1
    a540:	0000f1d0 	.word	0x0000f1d0
    a544:	20001178 	.word	0x20001178
    a548:	00009ff5 	.word	0x00009ff5
    a54c:	0000f0f8 	.word	0x0000f0f8
    a550:	0000f120 	.word	0x0000f120
    a554:	0000f14c 	.word	0x0000f14c
    a558:	0000f178 	.word	0x0000f178

0000a55c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    a55c:	b570      	push	{r4, r5, r6, lr}
    a55e:	b082      	sub	sp, #8
    a560:	0005      	movs	r5, r0
    a562:	000e      	movs	r6, r1
	uint16_t temp = 0;
    a564:	2200      	movs	r2, #0
    a566:	466b      	mov	r3, sp
    a568:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    a56a:	4c06      	ldr	r4, [pc, #24]	; (a584 <usart_serial_getchar+0x28>)
    a56c:	466b      	mov	r3, sp
    a56e:	1d99      	adds	r1, r3, #6
    a570:	0028      	movs	r0, r5
    a572:	47a0      	blx	r4
    a574:	2800      	cmp	r0, #0
    a576:	d1f9      	bne.n	a56c <usart_serial_getchar+0x10>

	*c = temp;
    a578:	466b      	mov	r3, sp
    a57a:	3306      	adds	r3, #6
    a57c:	881b      	ldrh	r3, [r3, #0]
    a57e:	7033      	strb	r3, [r6, #0]
}
    a580:	b002      	add	sp, #8
    a582:	bd70      	pop	{r4, r5, r6, pc}
    a584:	00005781 	.word	0x00005781

0000a588 <usart_serial_putchar>:
{
    a588:	b570      	push	{r4, r5, r6, lr}
    a58a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    a58c:	b28c      	uxth	r4, r1
    a58e:	4e03      	ldr	r6, [pc, #12]	; (a59c <usart_serial_putchar+0x14>)
    a590:	0021      	movs	r1, r4
    a592:	0028      	movs	r0, r5
    a594:	47b0      	blx	r6
    a596:	2800      	cmp	r0, #0
    a598:	d1fa      	bne.n	a590 <usart_serial_putchar+0x8>
}
    a59a:	bd70      	pop	{r4, r5, r6, pc}
    a59c:	00005755 	.word	0x00005755

0000a5a0 <mqtt_callback>:
{
    a5a0:	b570      	push	{r4, r5, r6, lr}
    a5a2:	b086      	sub	sp, #24
    a5a4:	0004      	movs	r4, r0
	switch (type) {
    a5a6:	2901      	cmp	r1, #1
    a5a8:	d02c      	beq.n	a604 <mqtt_callback+0x64>
    a5aa:	2905      	cmp	r1, #5
    a5ac:	d040      	beq.n	a630 <mqtt_callback+0x90>
    a5ae:	2900      	cmp	r1, #0
    a5b0:	d001      	beq.n	a5b6 <mqtt_callback+0x16>
}
    a5b2:	b006      	add	sp, #24
    a5b4:	bd70      	pop	{r4, r5, r6, pc}
		if (data->sock_connected.result >= 0) {
    a5b6:	6813      	ldr	r3, [r2, #0]
    a5b8:	2b00      	cmp	r3, #0
    a5ba:	db19      	blt.n	a5f0 <mqtt_callback+0x50>
			printf("\r\nConnecting to Broker...");
    a5bc:	4821      	ldr	r0, [pc, #132]	; (a644 <mqtt_callback+0xa4>)
    a5be:	4b22      	ldr	r3, [pc, #136]	; (a648 <mqtt_callback+0xa8>)
    a5c0:	4798      	blx	r3
			if(0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0))
    a5c2:	4a22      	ldr	r2, [pc, #136]	; (a64c <mqtt_callback+0xac>)
    a5c4:	2300      	movs	r3, #0
    a5c6:	9305      	str	r3, [sp, #20]
    a5c8:	9304      	str	r3, [sp, #16]
    a5ca:	9303      	str	r3, [sp, #12]
    a5cc:	9302      	str	r3, [sp, #8]
    a5ce:	9301      	str	r3, [sp, #4]
    a5d0:	9200      	str	r2, [sp, #0]
    a5d2:	4b1f      	ldr	r3, [pc, #124]	; (a650 <mqtt_callback+0xb0>)
    a5d4:	2101      	movs	r1, #1
    a5d6:	0020      	movs	r0, r4
    a5d8:	4c1e      	ldr	r4, [pc, #120]	; (a654 <mqtt_callback+0xb4>)
    a5da:	47a0      	blx	r4
    a5dc:	2800      	cmp	r0, #0
    a5de:	d003      	beq.n	a5e8 <mqtt_callback+0x48>
				printf("MQTT  Error - NOT Connected to broker\r\n");
    a5e0:	481d      	ldr	r0, [pc, #116]	; (a658 <mqtt_callback+0xb8>)
    a5e2:	4b1e      	ldr	r3, [pc, #120]	; (a65c <mqtt_callback+0xbc>)
    a5e4:	4798      	blx	r3
    a5e6:	e7e4      	b.n	a5b2 <mqtt_callback+0x12>
				printf("MQTT Connected to broker\r\n");
    a5e8:	481d      	ldr	r0, [pc, #116]	; (a660 <mqtt_callback+0xc0>)
    a5ea:	4b1c      	ldr	r3, [pc, #112]	; (a65c <mqtt_callback+0xbc>)
    a5ec:	4798      	blx	r3
    a5ee:	e7e0      	b.n	a5b2 <mqtt_callback+0x12>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    a5f0:	4d1c      	ldr	r5, [pc, #112]	; (a664 <mqtt_callback+0xc4>)
    a5f2:	0029      	movs	r1, r5
    a5f4:	481c      	ldr	r0, [pc, #112]	; (a668 <mqtt_callback+0xc8>)
    a5f6:	4b14      	ldr	r3, [pc, #80]	; (a648 <mqtt_callback+0xa8>)
    a5f8:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    a5fa:	0029      	movs	r1, r5
    a5fc:	0020      	movs	r0, r4
    a5fe:	4b1b      	ldr	r3, [pc, #108]	; (a66c <mqtt_callback+0xcc>)
    a600:	4798      	blx	r3
    a602:	e7d6      	b.n	a5b2 <mqtt_callback+0x12>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    a604:	7811      	ldrb	r1, [r2, #0]
    a606:	2900      	cmp	r1, #0
    a608:	d10e      	bne.n	a628 <mqtt_callback+0x88>
			mqtt_subscribe(module_inst, TEMPERATURE_TOPIC, 2, SubscribeHandler);
    a60a:	4e19      	ldr	r6, [pc, #100]	; (a670 <mqtt_callback+0xd0>)
    a60c:	0033      	movs	r3, r6
    a60e:	2202      	movs	r2, #2
    a610:	4918      	ldr	r1, [pc, #96]	; (a674 <mqtt_callback+0xd4>)
    a612:	4d19      	ldr	r5, [pc, #100]	; (a678 <mqtt_callback+0xd8>)
    a614:	47a8      	blx	r5
			mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandler);
    a616:	0033      	movs	r3, r6
    a618:	2202      	movs	r2, #2
    a61a:	4918      	ldr	r1, [pc, #96]	; (a67c <mqtt_callback+0xdc>)
    a61c:	0020      	movs	r0, r4
    a61e:	47a8      	blx	r5
			printf("MQTT Connected\r\n");
    a620:	4817      	ldr	r0, [pc, #92]	; (a680 <mqtt_callback+0xe0>)
    a622:	4b0e      	ldr	r3, [pc, #56]	; (a65c <mqtt_callback+0xbc>)
    a624:	4798      	blx	r3
    a626:	e7c4      	b.n	a5b2 <mqtt_callback+0x12>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    a628:	4816      	ldr	r0, [pc, #88]	; (a684 <mqtt_callback+0xe4>)
    a62a:	4b07      	ldr	r3, [pc, #28]	; (a648 <mqtt_callback+0xa8>)
    a62c:	4798      	blx	r3
    a62e:	e7c0      	b.n	a5b2 <mqtt_callback+0x12>
		printf("MQTT disconnected\r\n");
    a630:	4815      	ldr	r0, [pc, #84]	; (a688 <mqtt_callback+0xe8>)
    a632:	4b0a      	ldr	r3, [pc, #40]	; (a65c <mqtt_callback+0xbc>)
    a634:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    a636:	4915      	ldr	r1, [pc, #84]	; (a68c <mqtt_callback+0xec>)
    a638:	2231      	movs	r2, #49	; 0x31
    a63a:	5c8b      	ldrb	r3, [r1, r2]
    a63c:	2002      	movs	r0, #2
    a63e:	4383      	bics	r3, r0
    a640:	548b      	strb	r3, [r1, r2]
}
    a642:	e7b6      	b.n	a5b2 <mqtt_callback+0x12>
    a644:	0000ecb4 	.word	0x0000ecb4
    a648:	0000b9b5 	.word	0x0000b9b5
    a64c:	0000ece0 	.word	0x0000ece0
    a650:	0000ecd0 	.word	0x0000ecd0
    a654:	00009021 	.word	0x00009021
    a658:	0000ecec 	.word	0x0000ecec
    a65c:	0000bad1 	.word	0x0000bad1
    a660:	0000ed14 	.word	0x0000ed14
    a664:	0000eca0 	.word	0x0000eca0
    a668:	0000ed30 	.word	0x0000ed30
    a66c:	00008ff5 	.word	0x00008ff5
    a670:	0000a45d 	.word	0x0000a45d
    a674:	0000ed68 	.word	0x0000ed68
    a678:	00009145 	.word	0x00009145
    a67c:	0000e71c 	.word	0x0000e71c
    a680:	0000ed74 	.word	0x0000ed74
    a684:	0000ed84 	.word	0x0000ed84
    a688:	0000edb8 	.word	0x0000edb8
    a68c:	20000800 	.word	0x20000800

0000a690 <rename_to_unique>:
{
    a690:	b5f0      	push	{r4, r5, r6, r7, lr}
    a692:	46de      	mov	lr, fp
    a694:	b500      	push	{lr}
    a696:	b0c8      	sub	sp, #288	; 0x120
    a698:	0007      	movs	r7, r0
    a69a:	000e      	movs	r6, r1
    a69c:	9101      	str	r1, [sp, #4]
    a69e:	9203      	str	r2, [sp, #12]
	char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    a6a0:	22fb      	movs	r2, #251	; 0xfb
    a6a2:	2100      	movs	r1, #0
    a6a4:	a809      	add	r0, sp, #36	; 0x24
    a6a6:	4d52      	ldr	r5, [pc, #328]	; (a7f0 <rename_to_unique+0x160>)
    a6a8:	47a8      	blx	r5
	char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    a6aa:	2209      	movs	r2, #9
    a6ac:	2100      	movs	r1, #0
    a6ae:	a806      	add	r0, sp, #24
    a6b0:	47a8      	blx	r5
	char numbering[NUMBRING_MAX + 1] = {0};
    a6b2:	2300      	movs	r3, #0
    a6b4:	9305      	str	r3, [sp, #20]
	if (file_path_name == NULL) {
    a6b6:	2e00      	cmp	r6, #0
    a6b8:	d100      	bne.n	a6bc <rename_to_unique+0x2c>
    a6ba:	e090      	b.n	a7de <rename_to_unique+0x14e>
	if (fp == NULL || file_path_name == NULL) {
    a6bc:	2f00      	cmp	r7, #0
    a6be:	d100      	bne.n	a6c2 <rename_to_unique+0x32>
    a6c0:	e08f      	b.n	a7e2 <rename_to_unique+0x152>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    a6c2:	4d4c      	ldr	r5, [pc, #304]	; (a7f4 <rename_to_unique+0x164>)
    a6c4:	2200      	movs	r2, #0
    a6c6:	0031      	movs	r1, r6
    a6c8:	0028      	movs	r0, r5
    a6ca:	4b4b      	ldr	r3, [pc, #300]	; (a7f8 <rename_to_unique+0x168>)
    a6cc:	4798      	blx	r3
    a6ce:	0007      	movs	r7, r0
	f_close(&file_object);
    a6d0:	0028      	movs	r0, r5
    a6d2:	4b4a      	ldr	r3, [pc, #296]	; (a7fc <rename_to_unique+0x16c>)
    a6d4:	4798      	blx	r3
	if (!is_exist_file(fp, file_path_name)) {
    a6d6:	2f00      	cmp	r7, #0
    a6d8:	d000      	beq.n	a6dc <rename_to_unique+0x4c>
    a6da:	e084      	b.n	a7e6 <rename_to_unique+0x156>
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    a6dc:	0030      	movs	r0, r6
    a6de:	4b48      	ldr	r3, [pc, #288]	; (a800 <rename_to_unique+0x170>)
    a6e0:	4798      	blx	r3
    a6e2:	0003      	movs	r3, r0
		return false;
    a6e4:	2000      	movs	r0, #0
	else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    a6e6:	2bfa      	cmp	r3, #250	; 0xfa
    a6e8:	d87e      	bhi.n	a7e8 <rename_to_unique+0x158>
	p = strrchr(file_path_name, '.');
    a6ea:	212e      	movs	r1, #46	; 0x2e
    a6ec:	0030      	movs	r0, r6
    a6ee:	4b45      	ldr	r3, [pc, #276]	; (a804 <rename_to_unique+0x174>)
    a6f0:	4798      	blx	r3
    a6f2:	1e05      	subs	r5, r0, #0
	if (p != NULL) {
    a6f4:	d039      	beq.n	a76a <rename_to_unique+0xda>
		ext_len = strlen(p);
    a6f6:	4b42      	ldr	r3, [pc, #264]	; (a800 <rename_to_unique+0x170>)
    a6f8:	4798      	blx	r3
    a6fa:	0007      	movs	r7, r0
    a6fc:	b284      	uxth	r4, r0
		if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    a6fe:	2c07      	cmp	r4, #7
    a700:	d820      	bhi.n	a744 <rename_to_unique+0xb4>
			strcpy(ext, p);
    a702:	0029      	movs	r1, r5
    a704:	a806      	add	r0, sp, #24
    a706:	4b40      	ldr	r3, [pc, #256]	; (a808 <rename_to_unique+0x178>)
    a708:	4798      	blx	r3
			if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    a70a:	0030      	movs	r0, r6
    a70c:	4b3c      	ldr	r3, [pc, #240]	; (a800 <rename_to_unique+0x170>)
    a70e:	4798      	blx	r3
    a710:	043f      	lsls	r7, r7, #16
    a712:	0c3f      	lsrs	r7, r7, #16
    a714:	1bc7      	subs	r7, r0, r7
    a716:	2ff6      	cmp	r7, #246	; 0xf6
    a718:	d909      	bls.n	a72e <rename_to_unique+0x9e>
				name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    a71a:	25f6      	movs	r5, #246	; 0xf6
    a71c:	1b2d      	subs	r5, r5, r4
    a71e:	b2ad      	uxth	r5, r5
				strncpy(name, file_path_name, name_len);
    a720:	002a      	movs	r2, r5
    a722:	0031      	movs	r1, r6
    a724:	a809      	add	r0, sp, #36	; 0x24
    a726:	4b39      	ldr	r3, [pc, #228]	; (a80c <rename_to_unique+0x17c>)
    a728:	4798      	blx	r3
			valid_ext = true;
    a72a:	2401      	movs	r4, #1
    a72c:	e011      	b.n	a752 <rename_to_unique+0xc2>
				name_len = (p - file_path_name);
    a72e:	9b01      	ldr	r3, [sp, #4]
    a730:	1aea      	subs	r2, r5, r3
    a732:	b295      	uxth	r5, r2
				strncpy(name, file_path_name, name_len);
    a734:	0412      	lsls	r2, r2, #16
    a736:	0c12      	lsrs	r2, r2, #16
    a738:	0019      	movs	r1, r3
    a73a:	a809      	add	r0, sp, #36	; 0x24
    a73c:	4b33      	ldr	r3, [pc, #204]	; (a80c <rename_to_unique+0x17c>)
    a73e:	4798      	blx	r3
			valid_ext = true;
    a740:	2401      	movs	r4, #1
    a742:	e006      	b.n	a752 <rename_to_unique+0xc2>
			strncpy(name, file_path_name, name_len);
    a744:	22f6      	movs	r2, #246	; 0xf6
    a746:	9901      	ldr	r1, [sp, #4]
    a748:	a809      	add	r0, sp, #36	; 0x24
    a74a:	4b30      	ldr	r3, [pc, #192]	; (a80c <rename_to_unique+0x17c>)
    a74c:	4798      	blx	r3
	bool valid_ext = false;
    a74e:	2400      	movs	r4, #0
			name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    a750:	25f6      	movs	r5, #246	; 0xf6
	name[name_len++] = '-';
    a752:	1c6e      	adds	r6, r5, #1
    a754:	b2b6      	uxth	r6, r6
    a756:	222d      	movs	r2, #45	; 0x2d
    a758:	ab09      	add	r3, sp, #36	; 0x24
    a75a:	555a      	strb	r2, [r3, r5]
    a75c:	2501      	movs	r5, #1
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    a75e:	1cf3      	adds	r3, r6, #3
    a760:	aa09      	add	r2, sp, #36	; 0x24
    a762:	4694      	mov	ip, r2
    a764:	4463      	add	r3, ip
    a766:	9302      	str	r3, [sp, #8]
    a768:	e019      	b.n	a79e <rename_to_unique+0x10e>
		strncpy(name, file_path_name, name_len);
    a76a:	22f6      	movs	r2, #246	; 0xf6
    a76c:	9901      	ldr	r1, [sp, #4]
    a76e:	a809      	add	r0, sp, #36	; 0x24
    a770:	4b26      	ldr	r3, [pc, #152]	; (a80c <rename_to_unique+0x17c>)
    a772:	4798      	blx	r3
	bool valid_ext = false;
    a774:	2400      	movs	r4, #0
		name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    a776:	25f6      	movs	r5, #246	; 0xf6
    a778:	e7eb      	b.n	a752 <rename_to_unique+0xc2>
	FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    a77a:	4f1e      	ldr	r7, [pc, #120]	; (a7f4 <rename_to_unique+0x164>)
    a77c:	2200      	movs	r2, #0
    a77e:	a909      	add	r1, sp, #36	; 0x24
    a780:	0038      	movs	r0, r7
    a782:	4b1d      	ldr	r3, [pc, #116]	; (a7f8 <rename_to_unique+0x168>)
    a784:	4798      	blx	r3
    a786:	4683      	mov	fp, r0
	f_close(&file_object);
    a788:	0038      	movs	r0, r7
    a78a:	4b1c      	ldr	r3, [pc, #112]	; (a7fc <rename_to_unique+0x16c>)
    a78c:	4798      	blx	r3
		if (!is_exist_file(fp, name)) {
    a78e:	465b      	mov	r3, fp
    a790:	2b00      	cmp	r3, #0
    a792:	d116      	bne.n	a7c2 <rename_to_unique+0x132>
    a794:	3501      	adds	r5, #1
	for (i = 1; i < count; i++) {
    a796:	4b1e      	ldr	r3, [pc, #120]	; (a810 <rename_to_unique+0x180>)
    a798:	b2aa      	uxth	r2, r5
    a79a:	429a      	cmp	r2, r3
    a79c:	d81d      	bhi.n	a7da <rename_to_unique+0x14a>
		sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    a79e:	002a      	movs	r2, r5
    a7a0:	491c      	ldr	r1, [pc, #112]	; (a814 <rename_to_unique+0x184>)
    a7a2:	a805      	add	r0, sp, #20
    a7a4:	4b1c      	ldr	r3, [pc, #112]	; (a818 <rename_to_unique+0x188>)
    a7a6:	4798      	blx	r3
		strncpy(&name[name_len], numbering, NUMBRING_MAX);
    a7a8:	ab09      	add	r3, sp, #36	; 0x24
    a7aa:	1998      	adds	r0, r3, r6
    a7ac:	2203      	movs	r2, #3
    a7ae:	a905      	add	r1, sp, #20
    a7b0:	4b16      	ldr	r3, [pc, #88]	; (a80c <rename_to_unique+0x17c>)
    a7b2:	4798      	blx	r3
		if (valid_ext) {
    a7b4:	2c00      	cmp	r4, #0
    a7b6:	d0e0      	beq.n	a77a <rename_to_unique+0xea>
			strcpy(&name[name_len + NUMBRING_MAX], ext);
    a7b8:	a906      	add	r1, sp, #24
    a7ba:	9802      	ldr	r0, [sp, #8]
    a7bc:	4b12      	ldr	r3, [pc, #72]	; (a808 <rename_to_unique+0x178>)
    a7be:	4798      	blx	r3
    a7c0:	e7db      	b.n	a77a <rename_to_unique+0xea>
			memset(file_path_name, 0, max_len);
    a7c2:	9a03      	ldr	r2, [sp, #12]
    a7c4:	2100      	movs	r1, #0
    a7c6:	9c01      	ldr	r4, [sp, #4]
    a7c8:	0020      	movs	r0, r4
    a7ca:	4b09      	ldr	r3, [pc, #36]	; (a7f0 <rename_to_unique+0x160>)
    a7cc:	4798      	blx	r3
			strcpy(file_path_name, name);
    a7ce:	a909      	add	r1, sp, #36	; 0x24
    a7d0:	0020      	movs	r0, r4
    a7d2:	4b0d      	ldr	r3, [pc, #52]	; (a808 <rename_to_unique+0x178>)
    a7d4:	4798      	blx	r3
			return true;
    a7d6:	2001      	movs	r0, #1
    a7d8:	e006      	b.n	a7e8 <rename_to_unique+0x158>
	return false;
    a7da:	2000      	movs	r0, #0
    a7dc:	e004      	b.n	a7e8 <rename_to_unique+0x158>
		return false;
    a7de:	2000      	movs	r0, #0
    a7e0:	e002      	b.n	a7e8 <rename_to_unique+0x158>
		return true;
    a7e2:	2001      	movs	r0, #1
    a7e4:	e000      	b.n	a7e8 <rename_to_unique+0x158>
    a7e6:	2001      	movs	r0, #1
}
    a7e8:	b048      	add	sp, #288	; 0x120
    a7ea:	bc04      	pop	{r2}
    a7ec:	4693      	mov	fp, r2
    a7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7f0:	0000b853 	.word	0x0000b853
    a7f4:	20000a68 	.word	0x20000a68
    a7f8:	00007f59 	.word	0x00007f59
    a7fc:	00008559 	.word	0x00008559
    a800:	0000bd03 	.word	0x0000bd03
    a804:	0000bd5d 	.word	0x0000bd5d
    a808:	0000bcb9 	.word	0x0000bcb9
    a80c:	0000bd33 	.word	0x0000bd33
    a810:	000003e7 	.word	0x000003e7
    a814:	0000ee00 	.word	0x0000ee00
    a818:	0000bc75 	.word	0x0000bc75

0000a81c <store_file_packet>:
{
    a81c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a81e:	b083      	sub	sp, #12
    a820:	0005      	movs	r5, r0
    a822:	000e      	movs	r6, r1
	if ((data == NULL) || (length < 1)) {
    a824:	2800      	cmp	r0, #0
    a826:	d00c      	beq.n	a842 <store_file_packet+0x26>
    a828:	2900      	cmp	r1, #0
    a82a:	d00a      	beq.n	a842 <store_file_packet+0x26>
	return ((down_state & mask) != 0);
    a82c:	4b39      	ldr	r3, [pc, #228]	; (a914 <store_file_packet+0xf8>)
    a82e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(DOWNLOADING)) {
    a830:	071b      	lsls	r3, r3, #28
    a832:	d430      	bmi.n	a896 <store_file_packet+0x7a>
		save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    a834:	4b38      	ldr	r3, [pc, #224]	; (a918 <store_file_packet+0xfc>)
    a836:	2230      	movs	r2, #48	; 0x30
    a838:	701a      	strb	r2, [r3, #0]
		save_file_name[1] = ':';
    a83a:	320a      	adds	r2, #10
    a83c:	705a      	strb	r2, [r3, #1]
    a83e:	4c37      	ldr	r4, [pc, #220]	; (a91c <store_file_packet+0x100>)
    a840:	e005      	b.n	a84e <store_file_packet+0x32>
		printf("store_file_packet: empty data.\r\n");
    a842:	4837      	ldr	r0, [pc, #220]	; (a920 <store_file_packet+0x104>)
    a844:	4b37      	ldr	r3, [pc, #220]	; (a924 <store_file_packet+0x108>)
    a846:	4798      	blx	r3
}
    a848:	b003      	add	sp, #12
    a84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			cp--;
    a84c:	0004      	movs	r4, r0
    a84e:	1e60      	subs	r0, r4, #1
		while (*cp != '/') {
    a850:	7803      	ldrb	r3, [r0, #0]
    a852:	2b2f      	cmp	r3, #47	; 0x2f
    a854:	d1fa      	bne.n	a84c <store_file_packet+0x30>
		if (strlen(cp) > 1) {
    a856:	4b34      	ldr	r3, [pc, #208]	; (a928 <store_file_packet+0x10c>)
    a858:	4798      	blx	r3
    a85a:	2801      	cmp	r0, #1
    a85c:	d92f      	bls.n	a8be <store_file_packet+0xa2>
			strcpy(&save_file_name[2], cp);
    a85e:	4f2e      	ldr	r7, [pc, #184]	; (a918 <store_file_packet+0xfc>)
    a860:	1cb8      	adds	r0, r7, #2
    a862:	0021      	movs	r1, r4
    a864:	4b31      	ldr	r3, [pc, #196]	; (a92c <store_file_packet+0x110>)
    a866:	4798      	blx	r3
		rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
    a868:	4c31      	ldr	r4, [pc, #196]	; (a930 <store_file_packet+0x114>)
    a86a:	22fa      	movs	r2, #250	; 0xfa
    a86c:	0039      	movs	r1, r7
    a86e:	0020      	movs	r0, r4
    a870:	4b30      	ldr	r3, [pc, #192]	; (a934 <store_file_packet+0x118>)
    a872:	4798      	blx	r3
		printf("store_file_packet: creating file [%s]\r\n", save_file_name);
    a874:	0039      	movs	r1, r7
    a876:	4830      	ldr	r0, [pc, #192]	; (a938 <store_file_packet+0x11c>)
    a878:	4b30      	ldr	r3, [pc, #192]	; (a93c <store_file_packet+0x120>)
    a87a:	4798      	blx	r3
		ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    a87c:	220a      	movs	r2, #10
    a87e:	0039      	movs	r1, r7
    a880:	0020      	movs	r0, r4
    a882:	4b2f      	ldr	r3, [pc, #188]	; (a940 <store_file_packet+0x124>)
    a884:	4798      	blx	r3
		if (ret != FR_OK) {
    a886:	2800      	cmp	r0, #0
    a888:	d120      	bne.n	a8cc <store_file_packet+0xb0>
		received_file_size = 0;
    a88a:	2200      	movs	r2, #0
    a88c:	4b2d      	ldr	r3, [pc, #180]	; (a944 <store_file_packet+0x128>)
    a88e:	601a      	str	r2, [r3, #0]
		add_state(DOWNLOADING);
    a890:	2008      	movs	r0, #8
    a892:	4b2d      	ldr	r3, [pc, #180]	; (a948 <store_file_packet+0x12c>)
    a894:	4798      	blx	r3
		UINT wsize = 0;
    a896:	2300      	movs	r3, #0
    a898:	9301      	str	r3, [sp, #4]
		ret = f_write(&file_object, (const void *)data, length, &wsize);
    a89a:	ab01      	add	r3, sp, #4
    a89c:	0032      	movs	r2, r6
    a89e:	0029      	movs	r1, r5
    a8a0:	4823      	ldr	r0, [pc, #140]	; (a930 <store_file_packet+0x114>)
    a8a2:	4c2a      	ldr	r4, [pc, #168]	; (a94c <store_file_packet+0x130>)
    a8a4:	47a0      	blx	r4
		if (ret != FR_OK) {
    a8a6:	2800      	cmp	r0, #0
    a8a8:	d015      	beq.n	a8d6 <store_file_packet+0xba>
			f_close(&file_object);
    a8aa:	4821      	ldr	r0, [pc, #132]	; (a930 <store_file_packet+0x114>)
    a8ac:	4b28      	ldr	r3, [pc, #160]	; (a950 <store_file_packet+0x134>)
    a8ae:	4798      	blx	r3
			add_state(CANCELED);
    a8b0:	2020      	movs	r0, #32
    a8b2:	4b25      	ldr	r3, [pc, #148]	; (a948 <store_file_packet+0x12c>)
    a8b4:	4798      	blx	r3
			printf("store_file_packet: file write error, download canceled.\r\n");
    a8b6:	4827      	ldr	r0, [pc, #156]	; (a954 <store_file_packet+0x138>)
    a8b8:	4b1a      	ldr	r3, [pc, #104]	; (a924 <store_file_packet+0x108>)
    a8ba:	4798      	blx	r3
			return;
    a8bc:	e7c4      	b.n	a848 <store_file_packet+0x2c>
			printf("store_file_packet: file name is invalid. Download canceled.\r\n");
    a8be:	4826      	ldr	r0, [pc, #152]	; (a958 <store_file_packet+0x13c>)
    a8c0:	4b18      	ldr	r3, [pc, #96]	; (a924 <store_file_packet+0x108>)
    a8c2:	4798      	blx	r3
			add_state(CANCELED);
    a8c4:	2020      	movs	r0, #32
    a8c6:	4b20      	ldr	r3, [pc, #128]	; (a948 <store_file_packet+0x12c>)
    a8c8:	4798      	blx	r3
			return;
    a8ca:	e7bd      	b.n	a848 <store_file_packet+0x2c>
			printf("store_file_packet: file creation error! ret:%d\r\n", ret);
    a8cc:	0001      	movs	r1, r0
    a8ce:	4823      	ldr	r0, [pc, #140]	; (a95c <store_file_packet+0x140>)
    a8d0:	4b1a      	ldr	r3, [pc, #104]	; (a93c <store_file_packet+0x120>)
    a8d2:	4798      	blx	r3
			return;
    a8d4:	e7b8      	b.n	a848 <store_file_packet+0x2c>
		received_file_size += wsize;
    a8d6:	4c1b      	ldr	r4, [pc, #108]	; (a944 <store_file_packet+0x128>)
    a8d8:	6823      	ldr	r3, [r4, #0]
    a8da:	9a01      	ldr	r2, [sp, #4]
    a8dc:	4694      	mov	ip, r2
    a8de:	4463      	add	r3, ip
    a8e0:	0019      	movs	r1, r3
    a8e2:	6023      	str	r3, [r4, #0]
		printf("store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    a8e4:	4d1e      	ldr	r5, [pc, #120]	; (a960 <store_file_packet+0x144>)
    a8e6:	682a      	ldr	r2, [r5, #0]
    a8e8:	481e      	ldr	r0, [pc, #120]	; (a964 <store_file_packet+0x148>)
    a8ea:	4b14      	ldr	r3, [pc, #80]	; (a93c <store_file_packet+0x120>)
    a8ec:	4798      	blx	r3
		if (received_file_size >= http_file_size) {
    a8ee:	6822      	ldr	r2, [r4, #0]
    a8f0:	682b      	ldr	r3, [r5, #0]
    a8f2:	429a      	cmp	r2, r3
    a8f4:	d3a8      	bcc.n	a848 <store_file_packet+0x2c>
			f_close(&file_object);
    a8f6:	480e      	ldr	r0, [pc, #56]	; (a930 <store_file_packet+0x114>)
    a8f8:	4b15      	ldr	r3, [pc, #84]	; (a950 <store_file_packet+0x134>)
    a8fa:	4798      	blx	r3
			printf("store_file_packet: file downloaded successfully.\r\n");
    a8fc:	481a      	ldr	r0, [pc, #104]	; (a968 <store_file_packet+0x14c>)
    a8fe:	4b09      	ldr	r3, [pc, #36]	; (a924 <store_file_packet+0x108>)
    a900:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    a902:	2280      	movs	r2, #128	; 0x80
    a904:	0412      	lsls	r2, r2, #16
    a906:	4b19      	ldr	r3, [pc, #100]	; (a96c <store_file_packet+0x150>)
    a908:	615a      	str	r2, [r3, #20]
			add_state(COMPLETED);
    a90a:	2010      	movs	r0, #16
    a90c:	4b0e      	ldr	r3, [pc, #56]	; (a948 <store_file_packet+0x12c>)
    a90e:	4798      	blx	r3
			return;
    a910:	e79a      	b.n	a848 <store_file_packet+0x2c>
    a912:	46c0      	nop			; (mov r8, r8)
    a914:	20000835 	.word	0x20000835
    a918:	20000010 	.word	0x20000010
    a91c:	0000f201 	.word	0x0000f201
    a920:	0000f204 	.word	0x0000f204
    a924:	0000bad1 	.word	0x0000bad1
    a928:	0000bd03 	.word	0x0000bd03
    a92c:	0000bcb9 	.word	0x0000bcb9
    a930:	20000a68 	.word	0x20000a68
    a934:	0000a691 	.word	0x0000a691
    a938:	0000f224 	.word	0x0000f224
    a93c:	0000b9b5 	.word	0x0000b9b5
    a940:	00007f59 	.word	0x00007f59
    a944:	20000ed0 	.word	0x20000ed0
    a948:	0000a441 	.word	0x0000a441
    a94c:	00008295 	.word	0x00008295
    a950:	00008559 	.word	0x00008559
    a954:	0000f2c0 	.word	0x0000f2c0
    a958:	0000f24c 	.word	0x0000f24c
    a95c:	0000f28c 	.word	0x0000f28c
    a960:	20000a8c 	.word	0x20000a8c
    a964:	0000f2fc 	.word	0x0000f2fc
    a968:	0000f330 	.word	0x0000f330
    a96c:	41004400 	.word	0x41004400

0000a970 <http_client_callback>:
{
    a970:	b510      	push	{r4, lr}
    a972:	0014      	movs	r4, r2
	switch (type) {
    a974:	2904      	cmp	r1, #4
    a976:	d806      	bhi.n	a986 <http_client_callback+0x16>
    a978:	0089      	lsls	r1, r1, #2
    a97a:	4b2a      	ldr	r3, [pc, #168]	; (aa24 <http_client_callback+0xb4>)
    a97c:	585b      	ldr	r3, [r3, r1]
    a97e:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    a980:	4829      	ldr	r0, [pc, #164]	; (aa28 <http_client_callback+0xb8>)
    a982:	4b2a      	ldr	r3, [pc, #168]	; (aa2c <http_client_callback+0xbc>)
    a984:	4798      	blx	r3
}
    a986:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
    a988:	4829      	ldr	r0, [pc, #164]	; (aa30 <http_client_callback+0xc0>)
    a98a:	4b28      	ldr	r3, [pc, #160]	; (aa2c <http_client_callback+0xbc>)
    a98c:	4798      	blx	r3
		add_state(GET_REQUESTED);
    a98e:	2004      	movs	r0, #4
    a990:	4b28      	ldr	r3, [pc, #160]	; (aa34 <http_client_callback+0xc4>)
    a992:	4798      	blx	r3
		break;
    a994:	e7f7      	b.n	a986 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    a996:	8811      	ldrh	r1, [r2, #0]
    a998:	6852      	ldr	r2, [r2, #4]
    a99a:	4827      	ldr	r0, [pc, #156]	; (aa38 <http_client_callback+0xc8>)
    a99c:	4b27      	ldr	r3, [pc, #156]	; (aa3c <http_client_callback+0xcc>)
    a99e:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    a9a0:	8823      	ldrh	r3, [r4, #0]
    a9a2:	2bc8      	cmp	r3, #200	; 0xc8
    a9a4:	d10f      	bne.n	a9c6 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
    a9a6:	6861      	ldr	r1, [r4, #4]
    a9a8:	4b25      	ldr	r3, [pc, #148]	; (aa40 <http_client_callback+0xd0>)
    a9aa:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    a9ac:	2200      	movs	r2, #0
    a9ae:	4b25      	ldr	r3, [pc, #148]	; (aa44 <http_client_callback+0xd4>)
    a9b0:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    a9b2:	4b25      	ldr	r3, [pc, #148]	; (aa48 <http_client_callback+0xd8>)
    a9b4:	4299      	cmp	r1, r3
    a9b6:	d8e6      	bhi.n	a986 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    a9b8:	68a0      	ldr	r0, [r4, #8]
    a9ba:	4b24      	ldr	r3, [pc, #144]	; (aa4c <http_client_callback+0xdc>)
    a9bc:	4798      	blx	r3
			add_state(COMPLETED);
    a9be:	2010      	movs	r0, #16
    a9c0:	4b1c      	ldr	r3, [pc, #112]	; (aa34 <http_client_callback+0xc4>)
    a9c2:	4798      	blx	r3
    a9c4:	e7df      	b.n	a986 <http_client_callback+0x16>
			add_state(CANCELED);
    a9c6:	2020      	movs	r0, #32
    a9c8:	4b1a      	ldr	r3, [pc, #104]	; (aa34 <http_client_callback+0xc4>)
    a9ca:	4798      	blx	r3
			return;
    a9cc:	e7db      	b.n	a986 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    a9ce:	6811      	ldr	r1, [r2, #0]
    a9d0:	6850      	ldr	r0, [r2, #4]
    a9d2:	4b1e      	ldr	r3, [pc, #120]	; (aa4c <http_client_callback+0xdc>)
    a9d4:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    a9d6:	7a23      	ldrb	r3, [r4, #8]
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d0d4      	beq.n	a986 <http_client_callback+0x16>
			add_state(COMPLETED);
    a9dc:	2010      	movs	r0, #16
    a9de:	4b15      	ldr	r3, [pc, #84]	; (aa34 <http_client_callback+0xc4>)
    a9e0:	4798      	blx	r3
    a9e2:	e7d0      	b.n	a986 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    a9e4:	6811      	ldr	r1, [r2, #0]
    a9e6:	481a      	ldr	r0, [pc, #104]	; (aa50 <http_client_callback+0xe0>)
    a9e8:	4b14      	ldr	r3, [pc, #80]	; (aa3c <http_client_callback+0xcc>)
    a9ea:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    a9ec:	6823      	ldr	r3, [r4, #0]
    a9ee:	330b      	adds	r3, #11
    a9f0:	d1c9      	bne.n	a986 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
    a9f2:	4b18      	ldr	r3, [pc, #96]	; (aa54 <http_client_callback+0xe4>)
    a9f4:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    a9f6:	071b      	lsls	r3, r3, #28
    a9f8:	d406      	bmi.n	aa08 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
    a9fa:	4b16      	ldr	r3, [pc, #88]	; (aa54 <http_client_callback+0xe4>)
    a9fc:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    a9fe:	075a      	lsls	r2, r3, #29
    aa00:	d40b      	bmi.n	aa1a <http_client_callback+0xaa>
			start_download();
    aa02:	4b15      	ldr	r3, [pc, #84]	; (aa58 <http_client_callback+0xe8>)
    aa04:	4798      	blx	r3
    aa06:	e7be      	b.n	a986 <http_client_callback+0x16>
				f_close(&file_object);
    aa08:	4814      	ldr	r0, [pc, #80]	; (aa5c <http_client_callback+0xec>)
    aa0a:	4b15      	ldr	r3, [pc, #84]	; (aa60 <http_client_callback+0xf0>)
    aa0c:	4798      	blx	r3
	down_state &= ~mask;
    aa0e:	4a11      	ldr	r2, [pc, #68]	; (aa54 <http_client_callback+0xe4>)
    aa10:	7813      	ldrb	r3, [r2, #0]
    aa12:	2108      	movs	r1, #8
    aa14:	438b      	bics	r3, r1
    aa16:	7013      	strb	r3, [r2, #0]
    aa18:	e7ef      	b.n	a9fa <http_client_callback+0x8a>
    aa1a:	2204      	movs	r2, #4
    aa1c:	4393      	bics	r3, r2
    aa1e:	4a0d      	ldr	r2, [pc, #52]	; (aa54 <http_client_callback+0xe4>)
    aa20:	7013      	strb	r3, [r2, #0]
    aa22:	e7ee      	b.n	aa02 <http_client_callback+0x92>
    aa24:	0000e6f0 	.word	0x0000e6f0
    aa28:	0000e83c 	.word	0x0000e83c
    aa2c:	0000bad1 	.word	0x0000bad1
    aa30:	0000e874 	.word	0x0000e874
    aa34:	0000a441 	.word	0x0000a441
    aa38:	0000e8a0 	.word	0x0000e8a0
    aa3c:	0000b9b5 	.word	0x0000b9b5
    aa40:	20000a8c 	.word	0x20000a8c
    aa44:	20000ed0 	.word	0x20000ed0
    aa48:	000005a6 	.word	0x000005a6
    aa4c:	0000a81d 	.word	0x0000a81d
    aa50:	0000e8dc 	.word	0x0000e8dc
    aa54:	20000835 	.word	0x20000835
    aa58:	0000a4e5 	.word	0x0000a4e5
    aa5c:	20000a68 	.word	0x20000a68
    aa60:	00008559 	.word	0x00008559

0000aa64 <wifi_cb>:
{
    aa64:	b510      	push	{r4, lr}
    aa66:	b082      	sub	sp, #8
	switch (u8MsgType) {
    aa68:	282c      	cmp	r0, #44	; 0x2c
    aa6a:	d003      	beq.n	aa74 <wifi_cb+0x10>
    aa6c:	2832      	cmp	r0, #50	; 0x32
    aa6e:	d035      	beq.n	aadc <wifi_cb+0x78>
}
    aa70:	b002      	add	sp, #8
    aa72:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    aa74:	780b      	ldrb	r3, [r1, #0]
    aa76:	2b01      	cmp	r3, #1
    aa78:	d01c      	beq.n	aab4 <wifi_cb+0x50>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    aa7a:	2b00      	cmp	r3, #0
    aa7c:	d1f8      	bne.n	aa70 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    aa7e:	4826      	ldr	r0, [pc, #152]	; (ab18 <wifi_cb+0xb4>)
    aa80:	4b26      	ldr	r3, [pc, #152]	; (ab1c <wifi_cb+0xb8>)
    aa82:	4798      	blx	r3
	down_state &= ~mask;
    aa84:	4a26      	ldr	r2, [pc, #152]	; (ab20 <wifi_cb+0xbc>)
    aa86:	7813      	ldrb	r3, [r2, #0]
    aa88:	2102      	movs	r1, #2
    aa8a:	438b      	bics	r3, r1
    aa8c:	7013      	strb	r3, [r2, #0]
			if (is_state_set(DOWNLOADING)) {
    aa8e:	071b      	lsls	r3, r3, #28
    aa90:	d416      	bmi.n	aac0 <wifi_cb+0x5c>
	return ((down_state & mask) != 0);
    aa92:	4b23      	ldr	r3, [pc, #140]	; (ab20 <wifi_cb+0xbc>)
    aa94:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    aa96:	075a      	lsls	r2, r3, #29
    aa98:	d41b      	bmi.n	aad2 <wifi_cb+0x6e>
			mqtt_disconnect(&mqtt_inst, 1);
    aa9a:	2101      	movs	r1, #1
    aa9c:	4821      	ldr	r0, [pc, #132]	; (ab24 <wifi_cb+0xc0>)
    aa9e:	4b22      	ldr	r3, [pc, #136]	; (ab28 <wifi_cb+0xc4>)
    aaa0:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    aaa2:	23ff      	movs	r3, #255	; 0xff
    aaa4:	9300      	str	r3, [sp, #0]
    aaa6:	4b21      	ldr	r3, [pc, #132]	; (ab2c <wifi_cb+0xc8>)
    aaa8:	2202      	movs	r2, #2
    aaaa:	2112      	movs	r1, #18
    aaac:	4820      	ldr	r0, [pc, #128]	; (ab30 <wifi_cb+0xcc>)
    aaae:	4c21      	ldr	r4, [pc, #132]	; (ab34 <wifi_cb+0xd0>)
    aab0:	47a0      	blx	r4
    aab2:	e7dd      	b.n	aa70 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    aab4:	4820      	ldr	r0, [pc, #128]	; (ab38 <wifi_cb+0xd4>)
    aab6:	4b19      	ldr	r3, [pc, #100]	; (ab1c <wifi_cb+0xb8>)
    aab8:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    aaba:	4b20      	ldr	r3, [pc, #128]	; (ab3c <wifi_cb+0xd8>)
    aabc:	4798      	blx	r3
    aabe:	e7d7      	b.n	aa70 <wifi_cb+0xc>
				f_close(&file_object);
    aac0:	481f      	ldr	r0, [pc, #124]	; (ab40 <wifi_cb+0xdc>)
    aac2:	4b20      	ldr	r3, [pc, #128]	; (ab44 <wifi_cb+0xe0>)
    aac4:	4798      	blx	r3
	down_state &= ~mask;
    aac6:	4a16      	ldr	r2, [pc, #88]	; (ab20 <wifi_cb+0xbc>)
    aac8:	7813      	ldrb	r3, [r2, #0]
    aaca:	2108      	movs	r1, #8
    aacc:	438b      	bics	r3, r1
    aace:	7013      	strb	r3, [r2, #0]
    aad0:	e7df      	b.n	aa92 <wifi_cb+0x2e>
    aad2:	2204      	movs	r2, #4
    aad4:	4393      	bics	r3, r2
    aad6:	4a12      	ldr	r2, [pc, #72]	; (ab20 <wifi_cb+0xbc>)
    aad8:	7013      	strb	r3, [r2, #0]
    aada:	e7de      	b.n	aa9a <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    aadc:	788b      	ldrb	r3, [r1, #2]
    aade:	784a      	ldrb	r2, [r1, #1]
    aae0:	7808      	ldrb	r0, [r1, #0]
    aae2:	78c9      	ldrb	r1, [r1, #3]
    aae4:	9100      	str	r1, [sp, #0]
    aae6:	0001      	movs	r1, r0
    aae8:	4817      	ldr	r0, [pc, #92]	; (ab48 <wifi_cb+0xe4>)
    aaea:	4c18      	ldr	r4, [pc, #96]	; (ab4c <wifi_cb+0xe8>)
    aaec:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    aaee:	2002      	movs	r0, #2
    aaf0:	4b17      	ldr	r3, [pc, #92]	; (ab50 <wifi_cb+0xec>)
    aaf2:	4798      	blx	r3
		if(do_download_flag == 1)
    aaf4:	4b17      	ldr	r3, [pc, #92]	; (ab54 <wifi_cb+0xf0>)
    aaf6:	781b      	ldrb	r3, [r3, #0]
    aaf8:	2b01      	cmp	r3, #1
    aafa:	d009      	beq.n	ab10 <wifi_cb+0xac>
		if (mqtt_connect(&mqtt_inst, main_mqtt_broker))
    aafc:	4916      	ldr	r1, [pc, #88]	; (ab58 <wifi_cb+0xf4>)
    aafe:	4809      	ldr	r0, [pc, #36]	; (ab24 <wifi_cb+0xc0>)
    ab00:	4b16      	ldr	r3, [pc, #88]	; (ab5c <wifi_cb+0xf8>)
    ab02:	4798      	blx	r3
    ab04:	2800      	cmp	r0, #0
    ab06:	d0b3      	beq.n	aa70 <wifi_cb+0xc>
			printf("Error connecting to MQTT Broker!\r\n");
    ab08:	4815      	ldr	r0, [pc, #84]	; (ab60 <wifi_cb+0xfc>)
    ab0a:	4b04      	ldr	r3, [pc, #16]	; (ab1c <wifi_cb+0xb8>)
    ab0c:	4798      	blx	r3
}
    ab0e:	e7af      	b.n	aa70 <wifi_cb+0xc>
			start_download();
    ab10:	4b14      	ldr	r3, [pc, #80]	; (ab64 <wifi_cb+0x100>)
    ab12:	4798      	blx	r3
    ab14:	e7ac      	b.n	aa70 <wifi_cb+0xc>
    ab16:	46c0      	nop			; (mov r8, r8)
    ab18:	0000f384 	.word	0x0000f384
    ab1c:	0000bad1 	.word	0x0000bad1
    ab20:	20000835 	.word	0x20000835
    ab24:	20000a94 	.word	0x20000a94
    ab28:	000090b9 	.word	0x000090b9
    ab2c:	0000f3a4 	.word	0x0000f3a4
    ab30:	0000f3b4 	.word	0x0000f3b4
    ab34:	000025e1 	.word	0x000025e1
    ab38:	0000f364 	.word	0x0000f364
    ab3c:	000025fd 	.word	0x000025fd
    ab40:	20000a68 	.word	0x20000a68
    ab44:	00008559 	.word	0x00008559
    ab48:	0000f3c8 	.word	0x0000f3c8
    ab4c:	0000b9b5 	.word	0x0000b9b5
    ab50:	0000a441 	.word	0x0000a441
    ab54:	20000834 	.word	0x20000834
    ab58:	0000eca0 	.word	0x0000eca0
    ab5c:	00008ff5 	.word	0x00008ff5
    ab60:	0000f3f0 	.word	0x0000f3f0
    ab64:	0000a4e5 	.word	0x0000a4e5

0000ab68 <disable_console>:
{
    ab68:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    ab6a:	4d0a      	ldr	r5, [pc, #40]	; (ab94 <disable_console+0x2c>)
    ab6c:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    ab6e:	0020      	movs	r0, r4
    ab70:	4b09      	ldr	r3, [pc, #36]	; (ab98 <disable_console+0x30>)
    ab72:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    ab74:	231f      	movs	r3, #31
    ab76:	4018      	ands	r0, r3
    ab78:	3b1e      	subs	r3, #30
    ab7a:	4083      	lsls	r3, r0
    ab7c:	2280      	movs	r2, #128	; 0x80
    ab7e:	4907      	ldr	r1, [pc, #28]	; (ab9c <disable_console+0x34>)
    ab80:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    ab82:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    ab84:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    ab86:	2b00      	cmp	r3, #0
    ab88:	d1fc      	bne.n	ab84 <disable_console+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    ab8a:	6823      	ldr	r3, [r4, #0]
    ab8c:	2202      	movs	r2, #2
    ab8e:	4393      	bics	r3, r2
    ab90:	6023      	str	r3, [r4, #0]
}
    ab92:	bd70      	pop	{r4, r5, r6, pc}
    ab94:	20000800 	.word	0x20000800
    ab98:	00004c41 	.word	0x00004c41
    ab9c:	e000e100 	.word	0xe000e100

0000aba0 <configure_extint_channel>:
{
    aba0:	b510      	push	{r4, lr}
    extint_chan_get_config_defaults(&config_extint_chan);
    aba2:	4c08      	ldr	r4, [pc, #32]	; (abc4 <configure_extint_channel+0x24>)
    aba4:	0020      	movs	r0, r4
    aba6:	4b08      	ldr	r3, [pc, #32]	; (abc8 <configure_extint_channel+0x28>)
    aba8:	4798      	blx	r3
    config_extint_chan.gpio_pin           = BUTTON_0_EIC_PIN;
    abaa:	2337      	movs	r3, #55	; 0x37
    abac:	6023      	str	r3, [r4, #0]
    config_extint_chan.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    abae:	2300      	movs	r3, #0
    abb0:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    abb2:	3301      	adds	r3, #1
    abb4:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    abb6:	3301      	adds	r3, #1
    abb8:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    abba:	0021      	movs	r1, r4
    abbc:	2007      	movs	r0, #7
    abbe:	4b03      	ldr	r3, [pc, #12]	; (abcc <configure_extint_channel+0x2c>)
    abc0:	4798      	blx	r3
}
    abc2:	bd10      	pop	{r4, pc}
    abc4:	200012a0 	.word	0x200012a0
    abc8:	000042dd 	.word	0x000042dd
    abcc:	000042f1 	.word	0x000042f1

0000abd0 <configure_extint_callbacks>:
{
    abd0:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
    abd2:	2200      	movs	r2, #0
    abd4:	2107      	movs	r1, #7
    abd6:	4804      	ldr	r0, [pc, #16]	; (abe8 <configure_extint_callbacks+0x18>)
    abd8:	4b04      	ldr	r3, [pc, #16]	; (abec <configure_extint_callbacks+0x1c>)
    abda:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE,
    abdc:	2100      	movs	r1, #0
    abde:	2007      	movs	r0, #7
    abe0:	4b03      	ldr	r3, [pc, #12]	; (abf0 <configure_extint_callbacks+0x20>)
    abe2:	4798      	blx	r3
}
    abe4:	bd10      	pop	{r4, pc}
    abe6:	46c0      	nop			; (mov r8, r8)
    abe8:	0000a451 	.word	0x0000a451
    abec:	00004199 	.word	0x00004199
    abf0:	000041c5 	.word	0x000041c5

0000abf4 <configure_nvm>:

/**
* NVM CONFIGURATION
*/
void configure_nvm(void)
{
    abf4:	b510      	push	{r4, lr}
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    abf6:	4807      	ldr	r0, [pc, #28]	; (ac14 <configure_nvm+0x20>)
    abf8:	2200      	movs	r2, #0
    abfa:	7002      	strb	r2, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    abfc:	4b06      	ldr	r3, [pc, #24]	; (ac18 <configure_nvm+0x24>)
    abfe:	685b      	ldr	r3, [r3, #4]
    ac00:	06db      	lsls	r3, r3, #27
    ac02:	0f1b      	lsrs	r3, r3, #28
    ac04:	7083      	strb	r3, [r0, #2]
	config->disable_cache     = false;
    ac06:	70c2      	strb	r2, [r0, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    ac08:	7102      	strb	r2, [r0, #4]
	nvm_get_config_defaults(&nvm_cfg);	
	nvm_cfg.manual_page_write = false;
    ac0a:	7042      	strb	r2, [r0, #1]
	nvm_set_config(&nvm_cfg);
    ac0c:	4b03      	ldr	r3, [pc, #12]	; (ac1c <configure_nvm+0x28>)
    ac0e:	4798      	blx	r3
}
    ac10:	bd10      	pop	{r4, pc}
    ac12:	46c0      	nop			; (mov r8, r8)
    ac14:	20001114 	.word	0x20001114
    ac18:	41004000 	.word	0x41004000
    ac1c:	00004395 	.word	0x00004395

0000ac20 <check_boot_mode>:

/* 
* CHECK BOOT MODE 
*/ 
int check_boot_mode()
{
    ac20:	b510      	push	{r4, lr}
	
	printf("boot mode: checking if bootloader or app code is to run ....\n\r");
    ac22:	4819      	ldr	r0, [pc, #100]	; (ac88 <check_boot_mode+0x68>)
    ac24:	4b19      	ldr	r3, [pc, #100]	; (ac8c <check_boot_mode+0x6c>)
    ac26:	4798      	blx	r3
	
	ver_check_address = VERSION_ADDRESS;
	ver_check_address_ptr = (uint8_t *)ver_check_address;
	

	if (isPressed == true)						// Button is pressed, run bootloader
    ac28:	4b19      	ldr	r3, [pc, #100]	; (ac90 <check_boot_mode+0x70>)
    ac2a:	781b      	ldrb	r3, [r3, #0]
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	d110      	bne.n	ac52 <check_boot_mode+0x32>
		printf("boot mode: >> Bootloader Button pressed \n\r");	
		isPressed = false;
		return 0;
	}

	if (*otafu_check_address_ptr != 0xFF)		// OTAFU requested; run bootloader
    ac30:	23fb      	movs	r3, #251	; 0xfb
    ac32:	021b      	lsls	r3, r3, #8
    ac34:	781b      	ldrb	r3, [r3, #0]
    ac36:	2bff      	cmp	r3, #255	; 0xff
    ac38:	d113      	bne.n	ac62 <check_boot_mode+0x42>
		printf("boot mode: >> OTAFU \n\r");
		otafu_flag = true;
		return 0;
	}

	if (*app_check_address_ptr == 0xFFFFFFFF) 	// No application; run bootloader
    ac3a:	23fc      	movs	r3, #252	; 0xfc
    ac3c:	021b      	lsls	r3, r3, #8
    ac3e:	681b      	ldr	r3, [r3, #0]
    ac40:	3301      	adds	r3, #1
    ac42:	d016      	beq.n	ac72 <check_boot_mode+0x52>
	{
		printf("boot mode: >> NO APP AVAILABLE \n\r");
		return 0;
	}

	if (*ver_check_address_ptr == 0xFF)			// Even if application is present, version flag is empty
    ac44:	23fa      	movs	r3, #250	; 0xfa
    ac46:	021b      	lsls	r3, r3, #8
    ac48:	781b      	ldrb	r3, [r3, #0]
	{
		printf("boot mode: >> NO VERSION FLAG \n\r");
		return 0;
	}
	return 1;
    ac4a:	2001      	movs	r0, #1
	if (*ver_check_address_ptr == 0xFF)			// Even if application is present, version flag is empty
    ac4c:	2bff      	cmp	r3, #255	; 0xff
    ac4e:	d015      	beq.n	ac7c <check_boot_mode+0x5c>
}
    ac50:	bd10      	pop	{r4, pc}
		printf("boot mode: >> Bootloader Button pressed \n\r");	
    ac52:	4810      	ldr	r0, [pc, #64]	; (ac94 <check_boot_mode+0x74>)
    ac54:	4b0d      	ldr	r3, [pc, #52]	; (ac8c <check_boot_mode+0x6c>)
    ac56:	4798      	blx	r3
		isPressed = false;
    ac58:	2200      	movs	r2, #0
    ac5a:	4b0d      	ldr	r3, [pc, #52]	; (ac90 <check_boot_mode+0x70>)
    ac5c:	701a      	strb	r2, [r3, #0]
		return 0;
    ac5e:	2000      	movs	r0, #0
    ac60:	e7f6      	b.n	ac50 <check_boot_mode+0x30>
		printf("boot mode: >> OTAFU \n\r");
    ac62:	480d      	ldr	r0, [pc, #52]	; (ac98 <check_boot_mode+0x78>)
    ac64:	4b09      	ldr	r3, [pc, #36]	; (ac8c <check_boot_mode+0x6c>)
    ac66:	4798      	blx	r3
		otafu_flag = true;
    ac68:	2201      	movs	r2, #1
    ac6a:	4b0c      	ldr	r3, [pc, #48]	; (ac9c <check_boot_mode+0x7c>)
    ac6c:	701a      	strb	r2, [r3, #0]
		return 0;
    ac6e:	2000      	movs	r0, #0
    ac70:	e7ee      	b.n	ac50 <check_boot_mode+0x30>
		printf("boot mode: >> NO APP AVAILABLE \n\r");
    ac72:	480b      	ldr	r0, [pc, #44]	; (aca0 <check_boot_mode+0x80>)
    ac74:	4b05      	ldr	r3, [pc, #20]	; (ac8c <check_boot_mode+0x6c>)
    ac76:	4798      	blx	r3
		return 0;
    ac78:	2000      	movs	r0, #0
    ac7a:	e7e9      	b.n	ac50 <check_boot_mode+0x30>
		printf("boot mode: >> NO VERSION FLAG \n\r");
    ac7c:	4809      	ldr	r0, [pc, #36]	; (aca4 <check_boot_mode+0x84>)
    ac7e:	4b03      	ldr	r3, [pc, #12]	; (ac8c <check_boot_mode+0x6c>)
    ac80:	4798      	blx	r3
		return 0;
    ac82:	2000      	movs	r0, #0
    ac84:	e7e4      	b.n	ac50 <check_boot_mode+0x30>
    ac86:	46c0      	nop			; (mov r8, r8)
    ac88:	0000e734 	.word	0x0000e734
    ac8c:	0000b9b5 	.word	0x0000b9b5
    ac90:	20000a90 	.word	0x20000a90
    ac94:	0000e774 	.word	0x0000e774
    ac98:	0000e7a0 	.word	0x0000e7a0
    ac9c:	20000ecc 	.word	0x20000ecc
    aca0:	0000e7b8 	.word	0x0000e7b8
    aca4:	0000e7dc 	.word	0x0000e7dc

0000aca8 <disable_peripherals>:

/* 
* DEINITIALIZE HARDWARE & PERIPHERALS
*/
void disable_peripherals()
{
    aca8:	b510      	push	{r4, lr}
	printf("disable peripherals: Deinitializing peripherals ..... \n\r");
    acaa:	480c      	ldr	r0, [pc, #48]	; (acdc <disable_peripherals+0x34>)
    acac:	4b0c      	ldr	r3, [pc, #48]	; (ace0 <disable_peripherals+0x38>)
    acae:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    acb0:	b672      	cpsid	i
    acb2:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
    acb6:	2200      	movs	r2, #0
    acb8:	4b0a      	ldr	r3, [pc, #40]	; (ace4 <disable_peripherals+0x3c>)
    acba:	701a      	strb	r2, [r3, #0]
	http_client_deinit(&http_client_module_inst);
    acbc:	480a      	ldr	r0, [pc, #40]	; (ace8 <disable_peripherals+0x40>)
    acbe:	4b0b      	ldr	r3, [pc, #44]	; (acec <disable_peripherals+0x44>)
    acc0:	4798      	blx	r3
	mqtt_deinit(&mqtt_inst);
    acc2:	480b      	ldr	r0, [pc, #44]	; (acf0 <disable_peripherals+0x48>)
    acc4:	4b0b      	ldr	r3, [pc, #44]	; (acf4 <disable_peripherals+0x4c>)
    acc6:	4798      	blx	r3
	nm_bsp_deinit();
    acc8:	4b0b      	ldr	r3, [pc, #44]	; (acf8 <disable_peripherals+0x50>)
    acca:	4798      	blx	r3
	sd_deinit();
    accc:	4b0b      	ldr	r3, [pc, #44]	; (acfc <disable_peripherals+0x54>)
    acce:	4798      	blx	r3
	extint_disable_events(&config_extint_chan);
    acd0:	480b      	ldr	r0, [pc, #44]	; (ad00 <disable_peripherals+0x58>)
    acd2:	4b0c      	ldr	r3, [pc, #48]	; (ad04 <disable_peripherals+0x5c>)
    acd4:	4798      	blx	r3
	disable_console();
    acd6:	4b0c      	ldr	r3, [pc, #48]	; (ad08 <disable_peripherals+0x60>)
    acd8:	4798      	blx	r3
}
    acda:	bd10      	pop	{r4, pc}
    acdc:	0000e800 	.word	0x0000e800
    ace0:	0000b9b5 	.word	0x0000b9b5
    ace4:	2000000e 	.word	0x2000000e
    ace8:	20001178 	.word	0x20001178
    acec:	00009a65 	.word	0x00009a65
    acf0:	20000a94 	.word	0x20000a94
    acf4:	000090e9 	.word	0x000090e9
    acf8:	000012d9 	.word	0x000012d9
    acfc:	00000cbd 	.word	0x00000cbd
    ad00:	200012a0 	.word	0x200012a0
    ad04:	00004369 	.word	0x00004369
    ad08:	0000ab69 	.word	0x0000ab69

0000ad0c <jump_to_app>:

/* 
* JUMP TO APPLICATION CODE 
*/ 
static void jump_to_app(void)
{
    ad0c:	b580      	push	{r7, lr}
    ad0e:	af00      	add	r7, sp, #0
	
	printf("jump_to_app: Jumping to Application ..... \n\r");
    ad10:	4808      	ldr	r0, [pc, #32]	; (ad34 <jump_to_app+0x28>)
    ad12:	4b09      	ldr	r3, [pc, #36]	; (ad38 <jump_to_app+0x2c>)
    ad14:	4798      	blx	r3
	
	disable_peripherals();
    ad16:	4b09      	ldr	r3, [pc, #36]	; (ad3c <jump_to_app+0x30>)
    ad18:	4798      	blx	r3
	
	/// Function pointer to application section
	void (*applicationCodeEntry)(void);
	/// Rebase stack pointer
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    ad1a:	23fc      	movs	r3, #252	; 0xfc
    ad1c:	021b      	lsls	r3, r3, #8
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    ad1e:	681a      	ldr	r2, [r3, #0]
    ad20:	f382 8808 	msr	MSP, r2
	/// Rebase vector table
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    ad24:	4a06      	ldr	r2, [pc, #24]	; (ad40 <jump_to_app+0x34>)
    ad26:	6093      	str	r3, [r2, #8]
	/// Set pointer to application section
	applicationCodeEntry =
	(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    ad28:	4b06      	ldr	r3, [pc, #24]	; (ad44 <jump_to_app+0x38>)

	/// Jump to application
	applicationCodeEntry();
    ad2a:	681b      	ldr	r3, [r3, #0]
    ad2c:	4798      	blx	r3
}
    ad2e:	46bd      	mov	sp, r7
    ad30:	bd80      	pop	{r7, pc}
    ad32:	46c0      	nop			; (mov r8, r8)
    ad34:	0000e90c 	.word	0x0000e90c
    ad38:	0000b9b5 	.word	0x0000b9b5
    ad3c:	0000aca9 	.word	0x0000aca9
    ad40:	e000ed00 	.word	0xe000ed00
    ad44:	0000fc04 	.word	0x0000fc04

0000ad48 <sd_card_to_nvm_copy>:

/* 
* ALL SD CARD OPERATIONS 
*/ 
int sd_card_to_nvm_copy()
{	
    ad48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad4a:	46de      	mov	lr, fp
    ad4c:	4657      	mov	r7, sl
    ad4e:	464e      	mov	r6, r9
    ad50:	4645      	mov	r5, r8
    ad52:	b5e0      	push	{r5, r6, r7, lr}
    ad54:	b0b7      	sub	sp, #220	; 0xdc
	printf("sd_card_to_nvm_copy: Reading card ..... \n\r");
    ad56:	48a0      	ldr	r0, [pc, #640]	; (afd8 <sd_card_to_nvm_copy+0x290>)
    ad58:	4ba0      	ldr	r3, [pc, #640]	; (afdc <sd_card_to_nvm_copy+0x294>)
    ad5a:	4798      	blx	r3
	
	/************* Check for Firmware version on SD Card ***************/
	
	ver_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ad5c:	49a0      	ldr	r1, [pc, #640]	; (afe0 <sd_card_to_nvm_copy+0x298>)
    ad5e:	2330      	movs	r3, #48	; 0x30
    ad60:	700b      	strb	r3, [r1, #0]
	res1 = f_open(&file_object,(char const *)ver_file_name,FA_READ);
    ad62:	4ca0      	ldr	r4, [pc, #640]	; (afe4 <sd_card_to_nvm_copy+0x29c>)
    ad64:	2201      	movs	r2, #1
    ad66:	0020      	movs	r0, r4
    ad68:	4b9f      	ldr	r3, [pc, #636]	; (afe8 <sd_card_to_nvm_copy+0x2a0>)
    ad6a:	4798      	blx	r3
    ad6c:	4b9f      	ldr	r3, [pc, #636]	; (afec <sd_card_to_nvm_copy+0x2a4>)
    ad6e:	7018      	strb	r0, [r3, #0]
	f_gets(sd_version_num,&file_object.fsize,&file_object);
    ad70:	0021      	movs	r1, r4
    ad72:	310c      	adds	r1, #12
    ad74:	4d9e      	ldr	r5, [pc, #632]	; (aff0 <sd_card_to_nvm_copy+0x2a8>)
    ad76:	0022      	movs	r2, r4
    ad78:	0028      	movs	r0, r5
    ad7a:	4b9e      	ldr	r3, [pc, #632]	; (aff4 <sd_card_to_nvm_copy+0x2ac>)
    ad7c:	4798      	blx	r3
	f_close(&file_object);	
    ad7e:	0020      	movs	r0, r4
    ad80:	4b9d      	ldr	r3, [pc, #628]	; (aff8 <sd_card_to_nvm_copy+0x2b0>)
    ad82:	4798      	blx	r3
	
	uint8_t sd_version_num1 = atoi(sd_version_num);		
    ad84:	0028      	movs	r0, r5
    ad86:	4b9d      	ldr	r3, [pc, #628]	; (affc <sd_card_to_nvm_copy+0x2b4>)
    ad88:	4798      	blx	r3
    ad8a:	23d7      	movs	r3, #215	; 0xd7
    ad8c:	446b      	add	r3, sp
    ad8e:	7018      	strb	r0, [r3, #0]
	
	do
	{
		error_code = nvm_read_buffer(VERSION_ADDRESS,&nvm_version_num,1);			
    ad90:	4e9b      	ldr	r6, [pc, #620]	; (b000 <sd_card_to_nvm_copy+0x2b8>)
    ad92:	4d9c      	ldr	r5, [pc, #624]	; (b004 <sd_card_to_nvm_copy+0x2bc>)
    ad94:	4c9c      	ldr	r4, [pc, #624]	; (b008 <sd_card_to_nvm_copy+0x2c0>)
    ad96:	2201      	movs	r2, #1
    ad98:	0031      	movs	r1, r6
    ad9a:	20fa      	movs	r0, #250	; 0xfa
    ad9c:	0200      	lsls	r0, r0, #8
    ad9e:	47a8      	blx	r5
    ada0:	7020      	strb	r0, [r4, #0]
	} while (error_code == STATUS_BUSY);
    ada2:	2805      	cmp	r0, #5
    ada4:	d0f7      	beq.n	ad96 <sd_card_to_nvm_copy+0x4e>
		
	char str11[50];
	char str21[50];
	sprintf(str11, "SD_VER = %u\n\r", (uint8_t)sd_version_num1);
    ada6:	23d7      	movs	r3, #215	; 0xd7
    ada8:	446b      	add	r3, sp
    adaa:	781a      	ldrb	r2, [r3, #0]
    adac:	4997      	ldr	r1, [pc, #604]	; (b00c <sd_card_to_nvm_copy+0x2c4>)
    adae:	a829      	add	r0, sp, #164	; 0xa4
    adb0:	4f97      	ldr	r7, [pc, #604]	; (b010 <sd_card_to_nvm_copy+0x2c8>)
    adb2:	47b8      	blx	r7
	printf("%s",str11);
    adb4:	4e97      	ldr	r6, [pc, #604]	; (b014 <sd_card_to_nvm_copy+0x2cc>)
    adb6:	a929      	add	r1, sp, #164	; 0xa4
    adb8:	0030      	movs	r0, r6
    adba:	4d88      	ldr	r5, [pc, #544]	; (afdc <sd_card_to_nvm_copy+0x294>)
    adbc:	47a8      	blx	r5
	sprintf(str21, "NVM_VER = %u\n\r", (uint8_t)nvm_version_num);
    adbe:	4c90      	ldr	r4, [pc, #576]	; (b000 <sd_card_to_nvm_copy+0x2b8>)
    adc0:	7822      	ldrb	r2, [r4, #0]
    adc2:	4995      	ldr	r1, [pc, #596]	; (b018 <sd_card_to_nvm_copy+0x2d0>)
    adc4:	a81c      	add	r0, sp, #112	; 0x70
    adc6:	47b8      	blx	r7
	printf("%s",str21);
    adc8:	a91c      	add	r1, sp, #112	; 0x70
    adca:	0030      	movs	r0, r6
    adcc:	47a8      	blx	r5
	
	//if((((uint8_t) nvm_version_num != 255) && ((uint8_t)sd_version_num[0] > (uint8_t)nvm_version_num)) || ((uint8_t) nvm_version_num == 255))   ///<changed here
	if ((nvm_version_num == 255) || (nvm_version_num < sd_version_num1))
    adce:	7823      	ldrb	r3, [r4, #0]
    add0:	2bff      	cmp	r3, #255	; 0xff
    add2:	d004      	beq.n	adde <sd_card_to_nvm_copy+0x96>
    add4:	22d7      	movs	r2, #215	; 0xd7
    add6:	446a      	add	r2, sp
    add8:	7812      	ldrb	r2, [r2, #0]
    adda:	429a      	cmp	r2, r3
    addc:	d94e      	bls.n	ae7c <sd_card_to_nvm_copy+0x134>
	{
		printf("sd_card_to_nvm_copy: Version Different, Writing new code ..... \n\r");
    adde:	488f      	ldr	r0, [pc, #572]	; (b01c <sd_card_to_nvm_copy+0x2d4>)
    ade0:	4b7e      	ldr	r3, [pc, #504]	; (afdc <sd_card_to_nvm_copy+0x294>)
    ade2:	4798      	blx	r3
	
	
	///////////////////////////////////////////////////////////////////
		
	/**************** Open Firmware File ******************/
	test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    ade4:	498e      	ldr	r1, [pc, #568]	; (b020 <sd_card_to_nvm_copy+0x2d8>)
    ade6:	2330      	movs	r3, #48	; 0x30
    ade8:	700b      	strb	r3, [r1, #0]
	res1 = f_open(&file_object,(char const*)test_file_name,FA_READ);
    adea:	2201      	movs	r2, #1
    adec:	487d      	ldr	r0, [pc, #500]	; (afe4 <sd_card_to_nvm_copy+0x29c>)
    adee:	4b7e      	ldr	r3, [pc, #504]	; (afe8 <sd_card_to_nvm_copy+0x2a0>)
    adf0:	4798      	blx	r3
    adf2:	4b7e      	ldr	r3, [pc, #504]	; (afec <sd_card_to_nvm_copy+0x2a4>)
    adf4:	7018      	strb	r0, [r3, #0]
	if (res1 != FR_OK)
    adf6:	2800      	cmp	r0, #0
    adf8:	d146      	bne.n	ae88 <sd_card_to_nvm_copy+0x140>
		{
			printf("sd operation: >> Opening a file failed\n\r");
			return 1;
		}
	printf("sd operation: >> File open success\n\r");
    adfa:	488a      	ldr	r0, [pc, #552]	; (b024 <sd_card_to_nvm_copy+0x2dc>)
    adfc:	4c77      	ldr	r4, [pc, #476]	; (afdc <sd_card_to_nvm_copy+0x294>)
    adfe:	47a0      	blx	r4
	
	
	/**************** Read one Page at a time, Erase NVM and write to NVM ******************/
	
	printf("sd operation: initiating firmware write to nvm ....... \n\r");
    ae00:	4889      	ldr	r0, [pc, #548]	; (b028 <sd_card_to_nvm_copy+0x2e0>)
    ae02:	47a0      	blx	r4

	uint32_t bytes_read = 0;
    ae04:	2300      	movs	r3, #0
    ae06:	931b      	str	r3, [sp, #108]	; 0x6c
	uint32_t num_pages=0;
	uint32_t off_set=0;
	uint32_t fw_size= f_size(&file_object);
    ae08:	4b76      	ldr	r3, [pc, #472]	; (afe4 <sd_card_to_nvm_copy+0x29c>)
    ae0a:	68db      	ldr	r3, [r3, #12]
	uint32_t rem = fw_size%NVMCTRL_PAGE_SIZE;
    ae0c:	223f      	movs	r2, #63	; 0x3f
    ae0e:	401a      	ands	r2, r3
    ae10:	4693      	mov	fp, r2
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
	}
	else
	{
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE);
    ae12:	099a      	lsrs	r2, r3, #6
    ae14:	4690      	mov	r8, r2
	if(rem!=0)
    ae16:	465a      	mov	r2, fp
    ae18:	2a00      	cmp	r2, #0
    ae1a:	d005      	beq.n	ae28 <sd_card_to_nvm_copy+0xe0>
		num_pages = (fw_size/NVMCTRL_PAGE_SIZE)+1;
    ae1c:	4642      	mov	r2, r8
    ae1e:	1c51      	adds	r1, r2, #1
    ae20:	4688      	mov	r8, r1
		off_set = fw_size - ((num_pages-1) * NVMCTRL_PAGE_SIZE);
    ae22:	0192      	lsls	r2, r2, #6
    ae24:	1a9a      	subs	r2, r3, r2
    ae26:	4693      	mov	fp, r2
		off_set = 0;
	}
		
	if (fw_size != 0)
    ae28:	2b00      	cmp	r3, #0
    ae2a:	d138      	bne.n	ae9e <sd_card_to_nvm_copy+0x156>
				{
					crc32_recalculate(page_buffer1,NVMCTRL_PAGE_SIZE,&crc_mem1);
				}			
		}
	}
	f_close(&file_object);
    ae2c:	486d      	ldr	r0, [pc, #436]	; (afe4 <sd_card_to_nvm_copy+0x29c>)
    ae2e:	4b72      	ldr	r3, [pc, #456]	; (aff8 <sd_card_to_nvm_copy+0x2b0>)
    ae30:	4798      	blx	r3
		
	
	/** -------------- CRC Verification ----------------------------- */
	printf("sd operation: verfying crc of sd card firmware and nvm firmware ....... \n\r");
    ae32:	487e      	ldr	r0, [pc, #504]	; (b02c <sd_card_to_nvm_copy+0x2e4>)
    ae34:	4c69      	ldr	r4, [pc, #420]	; (afdc <sd_card_to_nvm_copy+0x294>)
    ae36:	47a0      	blx	r4

	char str1[50];
	char str2[50];
	sprintf(str1, "CRC_MEM = %u\n\r", (uint32_t*)crc_mem);
    ae38:	4e7d      	ldr	r6, [pc, #500]	; (b030 <sd_card_to_nvm_copy+0x2e8>)
    ae3a:	6832      	ldr	r2, [r6, #0]
    ae3c:	497d      	ldr	r1, [pc, #500]	; (b034 <sd_card_to_nvm_copy+0x2ec>)
    ae3e:	a80e      	add	r0, sp, #56	; 0x38
    ae40:	4f73      	ldr	r7, [pc, #460]	; (b010 <sd_card_to_nvm_copy+0x2c8>)
    ae42:	47b8      	blx	r7
	printf("%s",str1);
    ae44:	a90e      	add	r1, sp, #56	; 0x38
    ae46:	4873      	ldr	r0, [pc, #460]	; (b014 <sd_card_to_nvm_copy+0x2cc>)
    ae48:	47a0      	blx	r4
	sprintf(str2, "CRC_NVM = %u\n\r", (uint32_t*)crc_mem1);
    ae4a:	4d7b      	ldr	r5, [pc, #492]	; (b038 <sd_card_to_nvm_copy+0x2f0>)
    ae4c:	682a      	ldr	r2, [r5, #0]
    ae4e:	497b      	ldr	r1, [pc, #492]	; (b03c <sd_card_to_nvm_copy+0x2f4>)
    ae50:	a801      	add	r0, sp, #4
    ae52:	47b8      	blx	r7
	printf("%s",str2);
    ae54:	a901      	add	r1, sp, #4
    ae56:	486f      	ldr	r0, [pc, #444]	; (b014 <sd_card_to_nvm_copy+0x2cc>)
    ae58:	47a0      	blx	r4

	delay_s(1);
    ae5a:	20fa      	movs	r0, #250	; 0xfa
    ae5c:	0080      	lsls	r0, r0, #2
    ae5e:	4b78      	ldr	r3, [pc, #480]	; (b040 <sd_card_to_nvm_copy+0x2f8>)
    ae60:	4798      	blx	r3
	
	uint32_t *ptr = (uint32_t*) VERSION_ADDRESS;	
	*ptr = 55;
    ae62:	2237      	movs	r2, #55	; 0x37
    ae64:	23fa      	movs	r3, #250	; 0xfa
    ae66:	021b      	lsls	r3, r3, #8
    ae68:	601a      	str	r2, [r3, #0]
	
	uint32_t wir = *((uint32_t*) VERSION_ADDRESS);
	
	if(crc_mem == crc_mem1)
    ae6a:	6832      	ldr	r2, [r6, #0]
    ae6c:	682b      	ldr	r3, [r5, #0]
    ae6e:	429a      	cmp	r2, r3
    ae70:	d100      	bne.n	ae74 <sd_card_to_nvm_copy+0x12c>
    ae72:	e090      	b.n	af96 <sd_card_to_nvm_copy+0x24e>

		jump_to_app();
	}
	else
	{
		printf("sd operation: >> NEW FIRMWARE WRITE FAILED\n\r");
    ae74:	4873      	ldr	r0, [pc, #460]	; (b044 <sd_card_to_nvm_copy+0x2fc>)
    ae76:	4b59      	ldr	r3, [pc, #356]	; (afdc <sd_card_to_nvm_copy+0x294>)
    ae78:	4798      	blx	r3
		return 1;
    ae7a:	e008      	b.n	ae8e <sd_card_to_nvm_copy+0x146>
		printf("sd_card_to_nvm_copy: >> Version Same \n\r");
    ae7c:	4872      	ldr	r0, [pc, #456]	; (b048 <sd_card_to_nvm_copy+0x300>)
    ae7e:	4b57      	ldr	r3, [pc, #348]	; (afdc <sd_card_to_nvm_copy+0x294>)
    ae80:	4798      	blx	r3
		jump_to_app();
    ae82:	4b72      	ldr	r3, [pc, #456]	; (b04c <sd_card_to_nvm_copy+0x304>)
    ae84:	4798      	blx	r3
    ae86:	e7ad      	b.n	ade4 <sd_card_to_nvm_copy+0x9c>
			printf("sd operation: >> Opening a file failed\n\r");
    ae88:	4871      	ldr	r0, [pc, #452]	; (b050 <sd_card_to_nvm_copy+0x308>)
    ae8a:	4b54      	ldr	r3, [pc, #336]	; (afdc <sd_card_to_nvm_copy+0x294>)
    ae8c:	4798      	blx	r3
    ae8e:	2001      	movs	r0, #1
	}
}
    ae90:	b037      	add	sp, #220	; 0xdc
    ae92:	bc3c      	pop	{r2, r3, r4, r5}
    ae94:	4690      	mov	r8, r2
    ae96:	4699      	mov	r9, r3
    ae98:	46a2      	mov	sl, r4
    ae9a:	46ab      	mov	fp, r5
    ae9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t rows_clear = fw_size / NVMCTRL_ROW_SIZE;
    ae9e:	0a1b      	lsrs	r3, r3, #8
    aea0:	b29b      	uxth	r3, r3
    aea2:	4699      	mov	r9, r3
		printf("sd operation: erasing nvm location ....... \n\r");
    aea4:	486b      	ldr	r0, [pc, #428]	; (b054 <sd_card_to_nvm_copy+0x30c>)
    aea6:	4b4d      	ldr	r3, [pc, #308]	; (afdc <sd_card_to_nvm_copy+0x294>)
    aea8:	4798      	blx	r3
		for (i = 0; i <= rows_clear; i++)
    aeaa:	2700      	movs	r7, #0
					error_code = nvm_erase_row((APP_START_ADDRESS) + (NVMCTRL_ROW_SIZE * i));	
    aeac:	4e6a      	ldr	r6, [pc, #424]	; (b058 <sd_card_to_nvm_copy+0x310>)
    aeae:	4d56      	ldr	r5, [pc, #344]	; (b008 <sd_card_to_nvm_copy+0x2c0>)
    aeb0:	023c      	lsls	r4, r7, #8
    aeb2:	23fc      	movs	r3, #252	; 0xfc
    aeb4:	021b      	lsls	r3, r3, #8
    aeb6:	469c      	mov	ip, r3
    aeb8:	4464      	add	r4, ip
    aeba:	0020      	movs	r0, r4
    aebc:	47b0      	blx	r6
    aebe:	7028      	strb	r0, [r5, #0]
			} while (error_code == STATUS_BUSY);
    aec0:	2805      	cmp	r0, #5
    aec2:	d0fa      	beq.n	aeba <sd_card_to_nvm_copy+0x172>
		for (i = 0; i <= rows_clear; i++)
    aec4:	3701      	adds	r7, #1
    aec6:	b2bf      	uxth	r7, r7
    aec8:	45b9      	cmp	r9, r7
    aeca:	d2f1      	bcs.n	aeb0 <sd_card_to_nvm_copy+0x168>
		printf("sd operation: writing firmware to nvm ....... \n\r");
    aecc:	4863      	ldr	r0, [pc, #396]	; (b05c <sd_card_to_nvm_copy+0x314>)
    aece:	4b43      	ldr	r3, [pc, #268]	; (afdc <sd_card_to_nvm_copy+0x294>)
    aed0:	4798      	blx	r3
		for(uint16_t j=0;j<num_pages;j++)
    aed2:	4643      	mov	r3, r8
    aed4:	2b00      	cmp	r3, #0
    aed6:	d07b      	beq.n	afd0 <sd_card_to_nvm_copy+0x288>
    aed8:	2400      	movs	r4, #0
    aeda:	2500      	movs	r5, #0
				f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
    aedc:	4b60      	ldr	r3, [pc, #384]	; (b060 <sd_card_to_nvm_copy+0x318>)
    aede:	469a      	mov	sl, r3
    aee0:	e01a      	b.n	af18 <sd_card_to_nvm_copy+0x1d0>
					crc32_recalculate(page_buffer,NVMCTRL_PAGE_SIZE,&crc_mem);
    aee2:	4a53      	ldr	r2, [pc, #332]	; (b030 <sd_card_to_nvm_copy+0x2e8>)
    aee4:	2140      	movs	r1, #64	; 0x40
    aee6:	485f      	ldr	r0, [pc, #380]	; (b064 <sd_card_to_nvm_copy+0x31c>)
    aee8:	4b5f      	ldr	r3, [pc, #380]	; (b068 <sd_card_to_nvm_copy+0x320>)
    aeea:	4798      	blx	r3
					error_code = nvm_write_buffer(APP_START_ADDRESS+(j*NVMCTRL_PAGE_SIZE),page_buffer,bytes_read);
    aeec:	01ac      	lsls	r4, r5, #6
    aeee:	23fc      	movs	r3, #252	; 0xfc
    aef0:	021b      	lsls	r3, r3, #8
    aef2:	469c      	mov	ip, r3
    aef4:	4464      	add	r4, ip
    aef6:	4f5d      	ldr	r7, [pc, #372]	; (b06c <sd_card_to_nvm_copy+0x324>)
    aef8:	4e43      	ldr	r6, [pc, #268]	; (b008 <sd_card_to_nvm_copy+0x2c0>)
    aefa:	466b      	mov	r3, sp
    aefc:	226c      	movs	r2, #108	; 0x6c
    aefe:	189b      	adds	r3, r3, r2
    af00:	881a      	ldrh	r2, [r3, #0]
    af02:	4958      	ldr	r1, [pc, #352]	; (b064 <sd_card_to_nvm_copy+0x31c>)
    af04:	0020      	movs	r0, r4
    af06:	47b8      	blx	r7
    af08:	7030      	strb	r0, [r6, #0]
				} while (error_code == STATUS_BUSY);
    af0a:	2805      	cmp	r0, #5
    af0c:	d0f5      	beq.n	aefa <sd_card_to_nvm_copy+0x1b2>
		for(uint16_t j=0;j<num_pages;j++)
    af0e:	3501      	adds	r5, #1
    af10:	b2ad      	uxth	r5, r5
    af12:	002c      	movs	r4, r5
    af14:	45a8      	cmp	r8, r5
    af16:	d913      	bls.n	af40 <sd_card_to_nvm_copy+0x1f8>
				f_read(&file_object,page_buffer,NVMCTRL_PAGE_SIZE,&bytes_read);
    af18:	ab1b      	add	r3, sp, #108	; 0x6c
    af1a:	2240      	movs	r2, #64	; 0x40
    af1c:	4951      	ldr	r1, [pc, #324]	; (b064 <sd_card_to_nvm_copy+0x31c>)
    af1e:	4831      	ldr	r0, [pc, #196]	; (afe4 <sd_card_to_nvm_copy+0x29c>)
    af20:	47d0      	blx	sl
				if((j==(num_pages-1)) && off_set!=0)
    af22:	2301      	movs	r3, #1
    af24:	425b      	negs	r3, r3
    af26:	4443      	add	r3, r8
    af28:	4699      	mov	r9, r3
    af2a:	42a3      	cmp	r3, r4
    af2c:	d1d9      	bne.n	aee2 <sd_card_to_nvm_copy+0x19a>
    af2e:	465b      	mov	r3, fp
    af30:	2b00      	cmp	r3, #0
    af32:	d0d6      	beq.n	aee2 <sd_card_to_nvm_copy+0x19a>
					crc32_recalculate(page_buffer,off_set,&crc_mem);
    af34:	4a3e      	ldr	r2, [pc, #248]	; (b030 <sd_card_to_nvm_copy+0x2e8>)
    af36:	4659      	mov	r1, fp
    af38:	484a      	ldr	r0, [pc, #296]	; (b064 <sd_card_to_nvm_copy+0x31c>)
    af3a:	4b4b      	ldr	r3, [pc, #300]	; (b068 <sd_card_to_nvm_copy+0x320>)
    af3c:	4798      	blx	r3
    af3e:	e7d5      	b.n	aeec <sd_card_to_nvm_copy+0x1a4>
		printf("sd operation: calculating nvm firmware crc ....... \n\r");
    af40:	484b      	ldr	r0, [pc, #300]	; (b070 <sd_card_to_nvm_copy+0x328>)
    af42:	4b26      	ldr	r3, [pc, #152]	; (afdc <sd_card_to_nvm_copy+0x294>)
    af44:	4798      	blx	r3
    af46:	2300      	movs	r3, #0
    af48:	469a      	mov	sl, r3
    af4a:	2700      	movs	r7, #0
					error_code = nvm_read_buffer(APP_START_ADDRESS+(k*NVMCTRL_PAGE_SIZE),page_buffer1,NVMCTRL_PAGE_SIZE);	
    af4c:	4e2d      	ldr	r6, [pc, #180]	; (b004 <sd_card_to_nvm_copy+0x2bc>)
    af4e:	4d2e      	ldr	r5, [pc, #184]	; (b008 <sd_card_to_nvm_copy+0x2c0>)
    af50:	e00a      	b.n	af68 <sd_card_to_nvm_copy+0x220>
					crc32_recalculate(page_buffer1,NVMCTRL_PAGE_SIZE,&crc_mem1);
    af52:	4a39      	ldr	r2, [pc, #228]	; (b038 <sd_card_to_nvm_copy+0x2f0>)
    af54:	2140      	movs	r1, #64	; 0x40
    af56:	4847      	ldr	r0, [pc, #284]	; (b074 <sd_card_to_nvm_copy+0x32c>)
    af58:	4b43      	ldr	r3, [pc, #268]	; (b068 <sd_card_to_nvm_copy+0x320>)
    af5a:	4798      	blx	r3
		for(uint16_t k=0;k<num_pages;k++)
    af5c:	3701      	adds	r7, #1
    af5e:	b2bf      	uxth	r7, r7
    af60:	46ba      	mov	sl, r7
    af62:	45b8      	cmp	r8, r7
    af64:	d800      	bhi.n	af68 <sd_card_to_nvm_copy+0x220>
    af66:	e761      	b.n	ae2c <sd_card_to_nvm_copy+0xe4>
					error_code = nvm_read_buffer(APP_START_ADDRESS+(k*NVMCTRL_PAGE_SIZE),page_buffer1,NVMCTRL_PAGE_SIZE);	
    af68:	01bc      	lsls	r4, r7, #6
    af6a:	23fc      	movs	r3, #252	; 0xfc
    af6c:	021b      	lsls	r3, r3, #8
    af6e:	469c      	mov	ip, r3
    af70:	4464      	add	r4, ip
    af72:	2240      	movs	r2, #64	; 0x40
    af74:	493f      	ldr	r1, [pc, #252]	; (b074 <sd_card_to_nvm_copy+0x32c>)
    af76:	0020      	movs	r0, r4
    af78:	47b0      	blx	r6
    af7a:	7028      	strb	r0, [r5, #0]
				} while (error_code == STATUS_BUSY);
    af7c:	2805      	cmp	r0, #5
    af7e:	d0f8      	beq.n	af72 <sd_card_to_nvm_copy+0x22a>
				if((k==(num_pages-1)) && off_set!=0)
    af80:	45d1      	cmp	r9, sl
    af82:	d1e6      	bne.n	af52 <sd_card_to_nvm_copy+0x20a>
    af84:	465b      	mov	r3, fp
    af86:	2b00      	cmp	r3, #0
    af88:	d0e3      	beq.n	af52 <sd_card_to_nvm_copy+0x20a>
					crc32_recalculate(page_buffer1,off_set,&crc_mem1);
    af8a:	4a2b      	ldr	r2, [pc, #172]	; (b038 <sd_card_to_nvm_copy+0x2f0>)
    af8c:	4659      	mov	r1, fp
    af8e:	4839      	ldr	r0, [pc, #228]	; (b074 <sd_card_to_nvm_copy+0x32c>)
    af90:	4b35      	ldr	r3, [pc, #212]	; (b068 <sd_card_to_nvm_copy+0x320>)
    af92:	4798      	blx	r3
    af94:	e7e2      	b.n	af5c <sd_card_to_nvm_copy+0x214>
			error_code = nvm_erase_row(VERSION_ADDRESS);
    af96:	26fa      	movs	r6, #250	; 0xfa
    af98:	0236      	lsls	r6, r6, #8
    af9a:	4d2f      	ldr	r5, [pc, #188]	; (b058 <sd_card_to_nvm_copy+0x310>)
    af9c:	4c1a      	ldr	r4, [pc, #104]	; (b008 <sd_card_to_nvm_copy+0x2c0>)
    af9e:	0030      	movs	r0, r6
    afa0:	47a8      	blx	r5
    afa2:	7020      	strb	r0, [r4, #0]
		} while (error_code == STATUS_BUSY);		
    afa4:	2805      	cmp	r0, #5
    afa6:	d0fa      	beq.n	af9e <sd_card_to_nvm_copy+0x256>
			error_code = nvm_write_buffer(VERSION_ADDRESS,&sd_version_num1,1);
    afa8:	4d30      	ldr	r5, [pc, #192]	; (b06c <sd_card_to_nvm_copy+0x324>)
    afaa:	4c17      	ldr	r4, [pc, #92]	; (b008 <sd_card_to_nvm_copy+0x2c0>)
    afac:	2201      	movs	r2, #1
    afae:	23d7      	movs	r3, #215	; 0xd7
    afb0:	446b      	add	r3, sp
    afb2:	0019      	movs	r1, r3
    afb4:	20fa      	movs	r0, #250	; 0xfa
    afb6:	0200      	lsls	r0, r0, #8
    afb8:	47a8      	blx	r5
    afba:	7020      	strb	r0, [r4, #0]
		} while (error_code == STATUS_BUSY);
    afbc:	2805      	cmp	r0, #5
    afbe:	d0f5      	beq.n	afac <sd_card_to_nvm_copy+0x264>
		printf("sd operation: >> NEW FIRMWARE VERSION UPDATED \n\r");		
    afc0:	482d      	ldr	r0, [pc, #180]	; (b078 <sd_card_to_nvm_copy+0x330>)
    afc2:	4c06      	ldr	r4, [pc, #24]	; (afdc <sd_card_to_nvm_copy+0x294>)
    afc4:	47a0      	blx	r4
		printf("sd operation: >> NEW FIRMWARE WRITTEN SUCCESSFULLY \n\r");
    afc6:	482d      	ldr	r0, [pc, #180]	; (b07c <sd_card_to_nvm_copy+0x334>)
    afc8:	47a0      	blx	r4
		jump_to_app();
    afca:	4b20      	ldr	r3, [pc, #128]	; (b04c <sd_card_to_nvm_copy+0x304>)
    afcc:	4798      	blx	r3
}
    afce:	e75f      	b.n	ae90 <sd_card_to_nvm_copy+0x148>
		printf("sd operation: calculating nvm firmware crc ....... \n\r");
    afd0:	4827      	ldr	r0, [pc, #156]	; (b070 <sd_card_to_nvm_copy+0x328>)
    afd2:	4b02      	ldr	r3, [pc, #8]	; (afdc <sd_card_to_nvm_copy+0x294>)
    afd4:	4798      	blx	r3
    afd6:	e729      	b.n	ae2c <sd_card_to_nvm_copy+0xe4>
    afd8:	0000ee08 	.word	0x0000ee08
    afdc:	0000b9b5 	.word	0x0000b9b5
    afe0:	2000011c 	.word	0x2000011c
    afe4:	20000a68 	.word	0x20000a68
    afe8:	00007f59 	.word	0x00007f59
    afec:	200010dc 	.word	0x200010dc
    aff0:	2000111c 	.word	0x2000111c
    aff4:	00008571 	.word	0x00008571
    aff8:	00008559 	.word	0x00008559
    affc:	0000b7a1 	.word	0x0000b7a1
    b000:	20001098 	.word	0x20001098
    b004:	00004565 	.word	0x00004565
    b008:	200012ac 	.word	0x200012ac
    b00c:	0000ee34 	.word	0x0000ee34
    b010:	0000bc75 	.word	0x0000bc75
    b014:	0000ee44 	.word	0x0000ee44
    b018:	0000ee48 	.word	0x0000ee48
    b01c:	0000ee58 	.word	0x0000ee58
    b020:	2000010c 	.word	0x2000010c
    b024:	0000eef0 	.word	0x0000eef0
    b028:	0000ef18 	.word	0x0000ef18
    b02c:	0000eff0 	.word	0x0000eff0
    b030:	200012b4 	.word	0x200012b4
    b034:	0000f03c 	.word	0x0000f03c
    b038:	200012b0 	.word	0x200012b0
    b03c:	0000f04c 	.word	0x0000f04c
    b040:	00001225 	.word	0x00001225
    b044:	0000f0c8 	.word	0x0000f0c8
    b048:	0000ee9c 	.word	0x0000ee9c
    b04c:	0000ad0d 	.word	0x0000ad0d
    b050:	0000eec4 	.word	0x0000eec4
    b054:	0000ef54 	.word	0x0000ef54
    b058:	000045d1 	.word	0x000045d1
    b05c:	0000ef84 	.word	0x0000ef84
    b060:	000080e1 	.word	0x000080e1
    b064:	20001260 	.word	0x20001260
    b068:	00003f85 	.word	0x00003f85
    b06c:	000044bd 	.word	0x000044bd
    b070:	0000efb8 	.word	0x0000efb8
    b074:	2000109c 	.word	0x2000109c
    b078:	0000f05c 	.word	0x0000f05c
    b07c:	0000f090 	.word	0x0000f090

0000b080 <otafu_download>:

/* 
* OTA NEW FIRMWARE AND METADATA DOWNLOAD 
*/
int otafu_download()
{
    b080:	b510      	push	{r4, lr}
	printf("otafu_download: Downloading update version ..... \n\r");
    b082:	4802      	ldr	r0, [pc, #8]	; (b08c <otafu_download+0xc>)
    b084:	4b02      	ldr	r3, [pc, #8]	; (b090 <otafu_download+0x10>)
    b086:	4798      	blx	r3
	socketDeinit();
	*/

	///> compare crc and confirm
	///> earse otafu nvm 	
}
    b088:	bd10      	pop	{r4, pc}
    b08a:	46c0      	nop			; (mov r8, r8)
    b08c:	0000edcc 	.word	0x0000edcc
    b090:	0000b9b5 	.word	0x0000b9b5

0000b094 <main>:
/////////////////////////////////////////////////////////////////////////////
///* ...... MAIN ........ *
////////////////////////////////////////////////////////////////////////////

int main(void)
{
    b094:	b5f0      	push	{r4, r5, r6, r7, lr}
    b096:	b097      	sub	sp, #92	; 0x5c
	down_state = NOT_READY;
    b098:	2400      	movs	r4, #0
    b09a:	2600      	movs	r6, #0
    b09c:	4b9d      	ldr	r3, [pc, #628]	; (b314 <main+0x280>)
    b09e:	701c      	strb	r4, [r3, #0]
	/** INITIALIZATING THE BOARD AND PERIPHERALS */
	tstrWifiInitParam param;
	int8_t ret;
	init_state();
	
	system_init();						/* Initialize the board. */	
    b0a0:	4b9d      	ldr	r3, [pc, #628]	; (b318 <main+0x284>)
    b0a2:	4798      	blx	r3
	config->data_order       = USART_DATAORDER_LSB;
    b0a4:	2380      	movs	r3, #128	; 0x80
    b0a6:	05db      	lsls	r3, r3, #23
    b0a8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    b0aa:	9401      	str	r4, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    b0ac:	23ff      	movs	r3, #255	; 0xff
    b0ae:	466a      	mov	r2, sp
    b0b0:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    b0b2:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    b0b4:	72d4      	strb	r4, [r2, #11]
	config->receiver_enable  = true;
    b0b6:	2501      	movs	r5, #1
    b0b8:	2324      	movs	r3, #36	; 0x24
    b0ba:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    b0bc:	3301      	adds	r3, #1
    b0be:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    b0c0:	3301      	adds	r3, #1
    b0c2:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    b0c4:	3301      	adds	r3, #1
    b0c6:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    b0c8:	940a      	str	r4, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    b0ca:	3305      	adds	r3, #5
    b0cc:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    b0ce:	3301      	adds	r3, #1
    b0d0:	54d4      	strb	r4, [r2, r3]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    b0d2:	9405      	str	r4, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    b0d4:	8214      	strh	r4, [r2, #16]
	config->lin_slave_enable      = false;
    b0d6:	2300      	movs	r3, #0
    b0d8:	76d3      	strb	r3, [r2, #27]
	config->immediate_buffer_overflow_notification  = false;
    b0da:	7616      	strb	r6, [r2, #24]
	config->start_frame_detection_enable            = false;
    b0dc:	7716      	strb	r6, [r2, #28]
	config->encoding_format_enable                  = false;
    b0de:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    b0e0:	2313      	movs	r3, #19
    b0e2:	7693      	strb	r3, [r2, #26]
	config->collision_detection_enable              = false;
    b0e4:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    b0e6:	23c4      	movs	r3, #196	; 0xc4
    b0e8:	039b      	lsls	r3, r3, #14
    b0ea:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    b0ec:	2301      	movs	r3, #1
    b0ee:	425b      	negs	r3, r3
    b0f0:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    b0f2:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    b0f4:	4b89      	ldr	r3, [pc, #548]	; (b31c <main+0x288>)
    b0f6:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    b0f8:	4b89      	ldr	r3, [pc, #548]	; (b320 <main+0x28c>)
    b0fa:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    b0fc:	23e1      	movs	r3, #225	; 0xe1
    b0fe:	025b      	lsls	r3, r3, #9
    b100:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    b102:	4c88      	ldr	r4, [pc, #544]	; (b324 <main+0x290>)
    b104:	4b88      	ldr	r3, [pc, #544]	; (b328 <main+0x294>)
    b106:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    b108:	4a88      	ldr	r2, [pc, #544]	; (b32c <main+0x298>)
    b10a:	4b89      	ldr	r3, [pc, #548]	; (b330 <main+0x29c>)
    b10c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    b10e:	4a89      	ldr	r2, [pc, #548]	; (b334 <main+0x2a0>)
    b110:	4b89      	ldr	r3, [pc, #548]	; (b338 <main+0x2a4>)
    b112:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    b114:	466a      	mov	r2, sp
    b116:	4989      	ldr	r1, [pc, #548]	; (b33c <main+0x2a8>)
    b118:	0020      	movs	r0, r4
    b11a:	4b89      	ldr	r3, [pc, #548]	; (b340 <main+0x2ac>)
    b11c:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    b11e:	4f89      	ldr	r7, [pc, #548]	; (b344 <main+0x2b0>)
    b120:	683b      	ldr	r3, [r7, #0]
    b122:	6898      	ldr	r0, [r3, #8]
    b124:	2100      	movs	r1, #0
    b126:	4e88      	ldr	r6, [pc, #544]	; (b348 <main+0x2b4>)
    b128:	47b0      	blx	r6
	setbuf(stdin, NULL);
    b12a:	683b      	ldr	r3, [r7, #0]
    b12c:	6858      	ldr	r0, [r3, #4]
    b12e:	2100      	movs	r1, #0
    b130:	47b0      	blx	r6
	SercomUsart *const usart_hw = &(module->hw->USART);
    b132:	6826      	ldr	r6, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b134:	0030      	movs	r0, r6
    b136:	4b85      	ldr	r3, [pc, #532]	; (b34c <main+0x2b8>)
    b138:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b13a:	231f      	movs	r3, #31
    b13c:	4018      	ands	r0, r3
    b13e:	4085      	lsls	r5, r0
    b140:	4b83      	ldr	r3, [pc, #524]	; (b350 <main+0x2bc>)
    b142:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    b144:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    b146:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    b148:	2a00      	cmp	r2, #0
    b14a:	d1fc      	bne.n	b146 <main+0xb2>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    b14c:	6833      	ldr	r3, [r6, #0]
    b14e:	3202      	adds	r2, #2
    b150:	4313      	orrs	r3, r2
    b152:	6033      	str	r3, [r6, #0]
	configure_console();				/* Initialize the UART console. */
	
	printf(STRING_HEADER);
    b154:	487f      	ldr	r0, [pc, #508]	; (b354 <main+0x2c0>)
    b156:	4c80      	ldr	r4, [pc, #512]	; (b358 <main+0x2c4>)
    b158:	47a0      	blx	r4
	printf("\r\nmain: Initializing Board and peripherals ...... \r\n\r\n");
    b15a:	4880      	ldr	r0, [pc, #512]	; (b35c <main+0x2c8>)
    b15c:	47a0      	blx	r4
	sw_timer_get_config_defaults(&swt_conf);
    b15e:	4668      	mov	r0, sp
    b160:	4b7f      	ldr	r3, [pc, #508]	; (b360 <main+0x2cc>)
    b162:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    b164:	4d7f      	ldr	r5, [pc, #508]	; (b364 <main+0x2d0>)
    b166:	4669      	mov	r1, sp
    b168:	0028      	movs	r0, r5
    b16a:	4b7f      	ldr	r3, [pc, #508]	; (b368 <main+0x2d4>)
    b16c:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    b16e:	0028      	movs	r0, r5
    b170:	4b7e      	ldr	r3, [pc, #504]	; (b36c <main+0x2d8>)
    b172:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
    b174:	4c7e      	ldr	r4, [pc, #504]	; (b370 <main+0x2dc>)
    b176:	0020      	movs	r0, r4
    b178:	4b7e      	ldr	r3, [pc, #504]	; (b374 <main+0x2e0>)
    b17a:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    b17c:	4b7e      	ldr	r3, [pc, #504]	; (b378 <main+0x2e4>)
    b17e:	6123      	str	r3, [r4, #16]
	httpc_conf.timer_inst = &swt_module_inst;
    b180:	6065      	str	r5, [r4, #4]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    b182:	0021      	movs	r1, r4
    b184:	487d      	ldr	r0, [pc, #500]	; (b37c <main+0x2e8>)
    b186:	4b7e      	ldr	r3, [pc, #504]	; (b380 <main+0x2ec>)
    b188:	4798      	blx	r3
    b18a:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    b18c:	db23      	blt.n	b1d6 <main+0x142>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    b18e:	497d      	ldr	r1, [pc, #500]	; (b384 <main+0x2f0>)
    b190:	487a      	ldr	r0, [pc, #488]	; (b37c <main+0x2e8>)
    b192:	4b7d      	ldr	r3, [pc, #500]	; (b388 <main+0x2f4>)
    b194:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    b196:	4c7d      	ldr	r4, [pc, #500]	; (b38c <main+0x2f8>)
    b198:	0020      	movs	r0, r4
    b19a:	4b7d      	ldr	r3, [pc, #500]	; (b390 <main+0x2fc>)
    b19c:	4798      	blx	r3
	mqtt_conf.read_buffer = mqtt_read_buffer;
    b19e:	4b7d      	ldr	r3, [pc, #500]	; (b394 <main+0x300>)
    b1a0:	60a3      	str	r3, [r4, #8]
	mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    b1a2:	2380      	movs	r3, #128	; 0x80
    b1a4:	009b      	lsls	r3, r3, #2
    b1a6:	60e3      	str	r3, [r4, #12]
	mqtt_conf.send_buffer = mqtt_send_buffer;
    b1a8:	4a7b      	ldr	r2, [pc, #492]	; (b398 <main+0x304>)
    b1aa:	6122      	str	r2, [r4, #16]
	mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    b1ac:	6163      	str	r3, [r4, #20]
	mqtt_conf.port = CLOUDMQTT_PORT;
    b1ae:	4b7b      	ldr	r3, [pc, #492]	; (b39c <main+0x308>)
    b1b0:	8023      	strh	r3, [r4, #0]
	mqtt_conf.keep_alive = 6000;
    b1b2:	4b7b      	ldr	r3, [pc, #492]	; (b3a0 <main+0x30c>)
    b1b4:	80a3      	strh	r3, [r4, #4]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    b1b6:	0021      	movs	r1, r4
    b1b8:	487a      	ldr	r0, [pc, #488]	; (b3a4 <main+0x310>)
    b1ba:	4b7b      	ldr	r3, [pc, #492]	; (b3a8 <main+0x314>)
    b1bc:	4798      	blx	r3
    b1be:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    b1c0:	db0d      	blt.n	b1de <main+0x14a>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    b1c2:	497a      	ldr	r1, [pc, #488]	; (b3ac <main+0x318>)
    b1c4:	4877      	ldr	r0, [pc, #476]	; (b3a4 <main+0x310>)
    b1c6:	4b7a      	ldr	r3, [pc, #488]	; (b3b0 <main+0x31c>)
    b1c8:	4798      	blx	r3
    b1ca:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    b1cc:	da0b      	bge.n	b1e6 <main+0x152>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    b1ce:	4879      	ldr	r0, [pc, #484]	; (b3b4 <main+0x320>)
    b1d0:	4b79      	ldr	r3, [pc, #484]	; (b3b8 <main+0x324>)
    b1d2:	4798      	blx	r3
    b1d4:	e7fe      	b.n	b1d4 <main+0x140>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    b1d6:	4879      	ldr	r0, [pc, #484]	; (b3bc <main+0x328>)
    b1d8:	4b77      	ldr	r3, [pc, #476]	; (b3b8 <main+0x324>)
    b1da:	4798      	blx	r3
    b1dc:	e7fe      	b.n	b1dc <main+0x148>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    b1de:	4878      	ldr	r0, [pc, #480]	; (b3c0 <main+0x32c>)
    b1e0:	4b75      	ldr	r3, [pc, #468]	; (b3b8 <main+0x324>)
    b1e2:	4798      	blx	r3
    b1e4:	e7fe      	b.n	b1e4 <main+0x150>
	
	configure_timer();					/* Initialize the Timer. */	
	configure_http_client();			/* Initialize the HTTP client service. */
	configure_mqtt();					/* Initialize the MQTT service. */
	nm_bsp_init();						/* Initialize the BSP. */
    b1e6:	4b77      	ldr	r3, [pc, #476]	; (b3c4 <main+0x330>)
    b1e8:	4798      	blx	r3
	sd_mmc_init();
    b1ea:	4b77      	ldr	r3, [pc, #476]	; (b3c8 <main+0x334>)
    b1ec:	4798      	blx	r3
		printf("init_storage: please plug an SD/MMC card in slot...\r\n");
    b1ee:	4877      	ldr	r0, [pc, #476]	; (b3cc <main+0x338>)
    b1f0:	4b59      	ldr	r3, [pc, #356]	; (b358 <main+0x2c4>)
    b1f2:	4798      	blx	r3
			status = sd_mmc_test_unit_ready(0);
    b1f4:	4d76      	ldr	r5, [pc, #472]	; (b3d0 <main+0x33c>)
				printf("init_storage: SD Card install failed.\r\n");
    b1f6:	4c58      	ldr	r4, [pc, #352]	; (b358 <main+0x2c4>)
    b1f8:	e008      	b.n	b20c <main+0x178>
    b1fa:	4876      	ldr	r0, [pc, #472]	; (b3d4 <main+0x340>)
    b1fc:	47a0      	blx	r4
				printf("init_storage: try unplug and re-plug the card.\r\n");
    b1fe:	4876      	ldr	r0, [pc, #472]	; (b3d8 <main+0x344>)
    b200:	47a0      	blx	r4
				while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    b202:	4e76      	ldr	r6, [pc, #472]	; (b3dc <main+0x348>)
    b204:	2000      	movs	r0, #0
    b206:	47b0      	blx	r6
    b208:	2802      	cmp	r0, #2
    b20a:	d1fb      	bne.n	b204 <main+0x170>
			status = sd_mmc_test_unit_ready(0);
    b20c:	2000      	movs	r0, #0
    b20e:	47a8      	blx	r5
			if (CTRL_FAIL == status) {
    b210:	2801      	cmp	r0, #1
    b212:	d0f2      	beq.n	b1fa <main+0x166>
		} while (CTRL_GOOD != status);
    b214:	2800      	cmp	r0, #0
    b216:	d1f9      	bne.n	b20c <main+0x178>
		printf("init_storage: mounting SD card...\r\n");
    b218:	4871      	ldr	r0, [pc, #452]	; (b3e0 <main+0x34c>)
    b21a:	4b4f      	ldr	r3, [pc, #316]	; (b358 <main+0x2c4>)
    b21c:	4798      	blx	r3
		memset(&fatfs, 0, sizeof(FATFS));
    b21e:	4c71      	ldr	r4, [pc, #452]	; (b3e4 <main+0x350>)
    b220:	228c      	movs	r2, #140	; 0x8c
    b222:	0092      	lsls	r2, r2, #2
    b224:	2100      	movs	r1, #0
    b226:	0020      	movs	r0, r4
    b228:	4b6f      	ldr	r3, [pc, #444]	; (b3e8 <main+0x354>)
    b22a:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
    b22c:	0021      	movs	r1, r4
    b22e:	2000      	movs	r0, #0
    b230:	4b6e      	ldr	r3, [pc, #440]	; (b3ec <main+0x358>)
    b232:	4798      	blx	r3
		if (FR_INVALID_DRIVE == res) {
    b234:	280b      	cmp	r0, #11
    b236:	d119      	bne.n	b26c <main+0x1d8>
			printf("init_storage: SD card mount failed! (res %d)\r\n", res);
    b238:	210b      	movs	r1, #11
    b23a:	486d      	ldr	r0, [pc, #436]	; (b3f0 <main+0x35c>)
    b23c:	4b5e      	ldr	r3, [pc, #376]	; (b3b8 <main+0x324>)
    b23e:	4798      	blx	r3
	init_storage();						/* Initialize SD/MMC storage. */
	
	configure_extint_channel();			/*Initialize BUTTON 0 as an external interrupt*/
    b240:	4b6c      	ldr	r3, [pc, #432]	; (b3f4 <main+0x360>)
    b242:	4798      	blx	r3
	configure_extint_callbacks();
    b244:	4b6c      	ldr	r3, [pc, #432]	; (b3f8 <main+0x364>)
    b246:	4798      	blx	r3

	configure_nvm();					/*Initialize NVM */
    b248:	4b6c      	ldr	r3, [pc, #432]	; (b3fc <main+0x368>)
    b24a:	4798      	blx	r3

	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));		/* Initialize Wi-Fi parameters structure. */
    b24c:	2218      	movs	r2, #24
    b24e:	2100      	movs	r1, #0
    b250:	a810      	add	r0, sp, #64	; 0x40
    b252:	4b65      	ldr	r3, [pc, #404]	; (b3e8 <main+0x354>)
    b254:	4798      	blx	r3

	param.pfAppWifiCb = wifi_cb;									/* Initialize Wi-Fi driver with data and status callbacks. */
    b256:	4b6a      	ldr	r3, [pc, #424]	; (b400 <main+0x36c>)
    b258:	9310      	str	r3, [sp, #64]	; 0x40
	ret = m2m_wifi_init(&param);
    b25a:	a810      	add	r0, sp, #64	; 0x40
    b25c:	4b69      	ldr	r3, [pc, #420]	; (b404 <main+0x370>)
    b25e:	4798      	blx	r3
    b260:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) 
    b262:	d00a      	beq.n	b27a <main+0x1e6>
	{
		printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    b264:	4868      	ldr	r0, [pc, #416]	; (b408 <main+0x374>)
    b266:	4b54      	ldr	r3, [pc, #336]	; (b3b8 <main+0x324>)
    b268:	4798      	blx	r3
    b26a:	e7fe      	b.n	b26a <main+0x1d6>
		printf("init_storage: SD card mount OK.\r\n");
    b26c:	4867      	ldr	r0, [pc, #412]	; (b40c <main+0x378>)
    b26e:	4b3a      	ldr	r3, [pc, #232]	; (b358 <main+0x2c4>)
    b270:	4798      	blx	r3
		add_state(STORAGE_READY);
    b272:	2001      	movs	r0, #1
    b274:	4b66      	ldr	r3, [pc, #408]	; (b410 <main+0x37c>)
    b276:	4798      	blx	r3
    b278:	e7e2      	b.n	b240 <main+0x1ac>
    b27a:	2000      	movs	r0, #0
    b27c:	4b65      	ldr	r3, [pc, #404]	; (b414 <main+0x380>)
    b27e:	4798      	blx	r3
    b280:	4b65      	ldr	r3, [pc, #404]	; (b418 <main+0x384>)
    b282:	7a1b      	ldrb	r3, [r3, #8]
    b284:	b2db      	uxtb	r3, r3
    b286:	40d8      	lsrs	r0, r3
		while (1);
	}

	if (SysTick_Config(system_cpu_clock_get_hz() / 1000)) 
    b288:	21fa      	movs	r1, #250	; 0xfa
    b28a:	0089      	lsls	r1, r1, #2
    b28c:	4b63      	ldr	r3, [pc, #396]	; (b41c <main+0x388>)
    b28e:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    b290:	3801      	subs	r0, #1
    b292:	4b63      	ldr	r3, [pc, #396]	; (b420 <main+0x38c>)
    b294:	4298      	cmp	r0, r3
    b296:	d839      	bhi.n	b30c <main+0x278>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    b298:	4a62      	ldr	r2, [pc, #392]	; (b424 <main+0x390>)
    b29a:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    b29c:	4862      	ldr	r0, [pc, #392]	; (b428 <main+0x394>)
    b29e:	6a03      	ldr	r3, [r0, #32]
    b2a0:	021b      	lsls	r3, r3, #8
    b2a2:	0a1b      	lsrs	r3, r3, #8
    b2a4:	21c0      	movs	r1, #192	; 0xc0
    b2a6:	0609      	lsls	r1, r1, #24
    b2a8:	430b      	orrs	r3, r1
    b2aa:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    b2ac:	2300      	movs	r3, #0
    b2ae:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    b2b0:	3307      	adds	r3, #7
    b2b2:	6013      	str	r3, [r2, #0]
	{
		puts("ERR>> Systick configuration error\r\n");
		while (1);
	}

	printf("\n\rmain: >> Board and peripherals initialized\n\r");
    b2b4:	485d      	ldr	r0, [pc, #372]	; (b42c <main+0x398>)
    b2b6:	4c40      	ldr	r4, [pc, #256]	; (b3b8 <main+0x324>)
    b2b8:	47a0      	blx	r4
	printf("\n\r");
    b2ba:	485d      	ldr	r0, [pc, #372]	; (b430 <main+0x39c>)
    b2bc:	47a0      	blx	r4
	
	/** INITIALIZATION COMPLETE */	
	

	/** ----------------BOOTLAODER CODE---------------------*/
	delay_s(1);
    b2be:	20fa      	movs	r0, #250	; 0xfa
    b2c0:	0080      	lsls	r0, r0, #2
    b2c2:	4b5c      	ldr	r3, [pc, #368]	; (b434 <main+0x3a0>)
    b2c4:	4798      	blx	r3
	printf("\n\rmain: Booting up ..... \n\r");
    b2c6:	485c      	ldr	r0, [pc, #368]	; (b438 <main+0x3a4>)
    b2c8:	47a0      	blx	r4
	//otafu_download();

	
	while(1)
	{
		if (check_boot_mode() == 1)
    b2ca:	4d5c      	ldr	r5, [pc, #368]	; (b43c <main+0x3a8>)
		{
			printf("main: Starting Application ..... \n\r");
    b2cc:	4f3a      	ldr	r7, [pc, #232]	; (b3b8 <main+0x324>)
			jump_to_app();
    b2ce:	4e5c      	ldr	r6, [pc, #368]	; (b440 <main+0x3ac>)
    b2d0:	e007      	b.n	b2e2 <main+0x24e>
			printf("main: Starting Application ..... \n\r");
    b2d2:	485c      	ldr	r0, [pc, #368]	; (b444 <main+0x3b0>)
    b2d4:	47b8      	blx	r7
			jump_to_app();
    b2d6:	47b0      	blx	r6
    b2d8:	e006      	b.n	b2e8 <main+0x254>
			printf("main: >> New firmware downloaded\n\r");	
			otafu_flag = false;
		}

		// SD card operation
		if(sd_card_to_nvm_copy() != 1)		
    b2da:	4b5b      	ldr	r3, [pc, #364]	; (b448 <main+0x3b4>)
    b2dc:	4798      	blx	r3
    b2de:	2801      	cmp	r0, #1
    b2e0:	d111      	bne.n	b306 <main+0x272>
		if (check_boot_mode() == 1)
    b2e2:	47a8      	blx	r5
    b2e4:	2801      	cmp	r0, #1
    b2e6:	d0f4      	beq.n	b2d2 <main+0x23e>
		if (otafu_flag == true)
    b2e8:	4b58      	ldr	r3, [pc, #352]	; (b44c <main+0x3b8>)
    b2ea:	781b      	ldrb	r3, [r3, #0]
    b2ec:	2b00      	cmp	r3, #0
    b2ee:	d0f4      	beq.n	b2da <main+0x246>
			printf("main: Checking OTA updates ..... \n\r");
    b2f0:	4857      	ldr	r0, [pc, #348]	; (b450 <main+0x3bc>)
    b2f2:	4c31      	ldr	r4, [pc, #196]	; (b3b8 <main+0x324>)
    b2f4:	47a0      	blx	r4
			otafu_download();
    b2f6:	4b57      	ldr	r3, [pc, #348]	; (b454 <main+0x3c0>)
    b2f8:	4798      	blx	r3
			printf("main: >> New firmware downloaded\n\r");	
    b2fa:	4857      	ldr	r0, [pc, #348]	; (b458 <main+0x3c4>)
    b2fc:	47a0      	blx	r4
			otafu_flag = false;
    b2fe:	2200      	movs	r2, #0
    b300:	4b52      	ldr	r3, [pc, #328]	; (b44c <main+0x3b8>)
    b302:	701a      	strb	r2, [r3, #0]
    b304:	e7e9      	b.n	b2da <main+0x246>
			jump_to_app();
    b306:	4b4e      	ldr	r3, [pc, #312]	; (b440 <main+0x3ac>)
    b308:	4798      	blx	r3
    b30a:	e7ea      	b.n	b2e2 <main+0x24e>
		puts("ERR>> Systick configuration error\r\n");
    b30c:	4853      	ldr	r0, [pc, #332]	; (b45c <main+0x3c8>)
    b30e:	4b12      	ldr	r3, [pc, #72]	; (b358 <main+0x2c4>)
    b310:	4798      	blx	r3
    b312:	e7fe      	b.n	b312 <main+0x27e>
    b314:	20000835 	.word	0x20000835
    b318:	000060f9 	.word	0x000060f9
    b31c:	002a0003 	.word	0x002a0003
    b320:	002b0003 	.word	0x002b0003
    b324:	20000800 	.word	0x20000800
    b328:	20001080 	.word	0x20001080
    b32c:	0000a589 	.word	0x0000a589
    b330:	2000107c 	.word	0x2000107c
    b334:	0000a55d 	.word	0x0000a55d
    b338:	20001078 	.word	0x20001078
    b33c:	42001800 	.word	0x42001800
    b340:	00005411 	.word	0x00005411
    b344:	2000012c 	.word	0x2000012c
    b348:	0000bb09 	.word	0x0000bb09
    b34c:	00004c41 	.word	0x00004c41
    b350:	e000e100 	.word	0xe000e100
    b354:	0000e93c 	.word	0x0000e93c
    b358:	0000bad1 	.word	0x0000bad1
    b35c:	0000e9a8 	.word	0x0000e9a8
    b360:	0000a2e5 	.word	0x0000a2e5
    b364:	20001120 	.word	0x20001120
    b368:	0000a2f1 	.word	0x0000a2f1
    b36c:	0000a39d 	.word	0x0000a39d
    b370:	200010f8 	.word	0x200010f8
    b374:	00009989 	.word	0x00009989
    b378:	000005a6 	.word	0x000005a6
    b37c:	20001178 	.word	0x20001178
    b380:	000099b1 	.word	0x000099b1
    b384:	0000a971 	.word	0x0000a971
    b388:	00009aa5 	.word	0x00009aa5
    b38c:	200010e0 	.word	0x200010e0
    b390:	00008fc9 	.word	0x00008fc9
    b394:	20000acc 	.word	0x20000acc
    b398:	20000ccc 	.word	0x20000ccc
    b39c:	00002c93 	.word	0x00002c93
    b3a0:	00001770 	.word	0x00001770
    b3a4:	20000a94 	.word	0x20000a94
    b3a8:	00008f11 	.word	0x00008f11
    b3ac:	0000a5a1 	.word	0x0000a5a1
    b3b0:	00008fe5 	.word	0x00008fe5
    b3b4:	0000ea5c 	.word	0x0000ea5c
    b3b8:	0000b9b5 	.word	0x0000b9b5
    b3bc:	0000e9e0 	.word	0x0000e9e0
    b3c0:	0000ea28 	.word	0x0000ea28
    b3c4:	00001265 	.word	0x00001265
    b3c8:	00000239 	.word	0x00000239
    b3cc:	0000ea90 	.word	0x0000ea90
    b3d0:	0000096d 	.word	0x0000096d
    b3d4:	0000eac8 	.word	0x0000eac8
    b3d8:	0000eaf0 	.word	0x0000eaf0
    b3dc:	00000259 	.word	0x00000259
    b3e0:	0000eb20 	.word	0x0000eb20
    b3e4:	20000838 	.word	0x20000838
    b3e8:	0000b853 	.word	0x0000b853
    b3ec:	00007f29 	.word	0x00007f29
    b3f0:	0000eb44 	.word	0x0000eb44
    b3f4:	0000aba1 	.word	0x0000aba1
    b3f8:	0000abd1 	.word	0x0000abd1
    b3fc:	0000abf5 	.word	0x0000abf5
    b400:	0000aa65 	.word	0x0000aa65
    b404:	00002211 	.word	0x00002211
    b408:	0000eb98 	.word	0x0000eb98
    b40c:	0000eb74 	.word	0x0000eb74
    b410:	0000a441 	.word	0x0000a441
    b414:	00005eb5 	.word	0x00005eb5
    b418:	40000400 	.word	0x40000400
    b41c:	0000b461 	.word	0x0000b461
    b420:	00ffffff 	.word	0x00ffffff
    b424:	e000e010 	.word	0xe000e010
    b428:	e000ed00 	.word	0xe000ed00
    b42c:	0000ebc4 	.word	0x0000ebc4
    b430:	0000ee30 	.word	0x0000ee30
    b434:	00001225 	.word	0x00001225
    b438:	0000ebf4 	.word	0x0000ebf4
    b43c:	0000ac21 	.word	0x0000ac21
    b440:	0000ad0d 	.word	0x0000ad0d
    b444:	0000ec10 	.word	0x0000ec10
    b448:	0000ad49 	.word	0x0000ad49
    b44c:	20000ecc 	.word	0x20000ecc
    b450:	0000ec34 	.word	0x0000ec34
    b454:	0000b081 	.word	0x0000b081
    b458:	0000ec58 	.word	0x0000ec58
    b45c:	0000ec7c 	.word	0x0000ec7c

0000b460 <__udivsi3>:
    b460:	2200      	movs	r2, #0
    b462:	0843      	lsrs	r3, r0, #1
    b464:	428b      	cmp	r3, r1
    b466:	d374      	bcc.n	b552 <__udivsi3+0xf2>
    b468:	0903      	lsrs	r3, r0, #4
    b46a:	428b      	cmp	r3, r1
    b46c:	d35f      	bcc.n	b52e <__udivsi3+0xce>
    b46e:	0a03      	lsrs	r3, r0, #8
    b470:	428b      	cmp	r3, r1
    b472:	d344      	bcc.n	b4fe <__udivsi3+0x9e>
    b474:	0b03      	lsrs	r3, r0, #12
    b476:	428b      	cmp	r3, r1
    b478:	d328      	bcc.n	b4cc <__udivsi3+0x6c>
    b47a:	0c03      	lsrs	r3, r0, #16
    b47c:	428b      	cmp	r3, r1
    b47e:	d30d      	bcc.n	b49c <__udivsi3+0x3c>
    b480:	22ff      	movs	r2, #255	; 0xff
    b482:	0209      	lsls	r1, r1, #8
    b484:	ba12      	rev	r2, r2
    b486:	0c03      	lsrs	r3, r0, #16
    b488:	428b      	cmp	r3, r1
    b48a:	d302      	bcc.n	b492 <__udivsi3+0x32>
    b48c:	1212      	asrs	r2, r2, #8
    b48e:	0209      	lsls	r1, r1, #8
    b490:	d065      	beq.n	b55e <__udivsi3+0xfe>
    b492:	0b03      	lsrs	r3, r0, #12
    b494:	428b      	cmp	r3, r1
    b496:	d319      	bcc.n	b4cc <__udivsi3+0x6c>
    b498:	e000      	b.n	b49c <__udivsi3+0x3c>
    b49a:	0a09      	lsrs	r1, r1, #8
    b49c:	0bc3      	lsrs	r3, r0, #15
    b49e:	428b      	cmp	r3, r1
    b4a0:	d301      	bcc.n	b4a6 <__udivsi3+0x46>
    b4a2:	03cb      	lsls	r3, r1, #15
    b4a4:	1ac0      	subs	r0, r0, r3
    b4a6:	4152      	adcs	r2, r2
    b4a8:	0b83      	lsrs	r3, r0, #14
    b4aa:	428b      	cmp	r3, r1
    b4ac:	d301      	bcc.n	b4b2 <__udivsi3+0x52>
    b4ae:	038b      	lsls	r3, r1, #14
    b4b0:	1ac0      	subs	r0, r0, r3
    b4b2:	4152      	adcs	r2, r2
    b4b4:	0b43      	lsrs	r3, r0, #13
    b4b6:	428b      	cmp	r3, r1
    b4b8:	d301      	bcc.n	b4be <__udivsi3+0x5e>
    b4ba:	034b      	lsls	r3, r1, #13
    b4bc:	1ac0      	subs	r0, r0, r3
    b4be:	4152      	adcs	r2, r2
    b4c0:	0b03      	lsrs	r3, r0, #12
    b4c2:	428b      	cmp	r3, r1
    b4c4:	d301      	bcc.n	b4ca <__udivsi3+0x6a>
    b4c6:	030b      	lsls	r3, r1, #12
    b4c8:	1ac0      	subs	r0, r0, r3
    b4ca:	4152      	adcs	r2, r2
    b4cc:	0ac3      	lsrs	r3, r0, #11
    b4ce:	428b      	cmp	r3, r1
    b4d0:	d301      	bcc.n	b4d6 <__udivsi3+0x76>
    b4d2:	02cb      	lsls	r3, r1, #11
    b4d4:	1ac0      	subs	r0, r0, r3
    b4d6:	4152      	adcs	r2, r2
    b4d8:	0a83      	lsrs	r3, r0, #10
    b4da:	428b      	cmp	r3, r1
    b4dc:	d301      	bcc.n	b4e2 <__udivsi3+0x82>
    b4de:	028b      	lsls	r3, r1, #10
    b4e0:	1ac0      	subs	r0, r0, r3
    b4e2:	4152      	adcs	r2, r2
    b4e4:	0a43      	lsrs	r3, r0, #9
    b4e6:	428b      	cmp	r3, r1
    b4e8:	d301      	bcc.n	b4ee <__udivsi3+0x8e>
    b4ea:	024b      	lsls	r3, r1, #9
    b4ec:	1ac0      	subs	r0, r0, r3
    b4ee:	4152      	adcs	r2, r2
    b4f0:	0a03      	lsrs	r3, r0, #8
    b4f2:	428b      	cmp	r3, r1
    b4f4:	d301      	bcc.n	b4fa <__udivsi3+0x9a>
    b4f6:	020b      	lsls	r3, r1, #8
    b4f8:	1ac0      	subs	r0, r0, r3
    b4fa:	4152      	adcs	r2, r2
    b4fc:	d2cd      	bcs.n	b49a <__udivsi3+0x3a>
    b4fe:	09c3      	lsrs	r3, r0, #7
    b500:	428b      	cmp	r3, r1
    b502:	d301      	bcc.n	b508 <__udivsi3+0xa8>
    b504:	01cb      	lsls	r3, r1, #7
    b506:	1ac0      	subs	r0, r0, r3
    b508:	4152      	adcs	r2, r2
    b50a:	0983      	lsrs	r3, r0, #6
    b50c:	428b      	cmp	r3, r1
    b50e:	d301      	bcc.n	b514 <__udivsi3+0xb4>
    b510:	018b      	lsls	r3, r1, #6
    b512:	1ac0      	subs	r0, r0, r3
    b514:	4152      	adcs	r2, r2
    b516:	0943      	lsrs	r3, r0, #5
    b518:	428b      	cmp	r3, r1
    b51a:	d301      	bcc.n	b520 <__udivsi3+0xc0>
    b51c:	014b      	lsls	r3, r1, #5
    b51e:	1ac0      	subs	r0, r0, r3
    b520:	4152      	adcs	r2, r2
    b522:	0903      	lsrs	r3, r0, #4
    b524:	428b      	cmp	r3, r1
    b526:	d301      	bcc.n	b52c <__udivsi3+0xcc>
    b528:	010b      	lsls	r3, r1, #4
    b52a:	1ac0      	subs	r0, r0, r3
    b52c:	4152      	adcs	r2, r2
    b52e:	08c3      	lsrs	r3, r0, #3
    b530:	428b      	cmp	r3, r1
    b532:	d301      	bcc.n	b538 <__udivsi3+0xd8>
    b534:	00cb      	lsls	r3, r1, #3
    b536:	1ac0      	subs	r0, r0, r3
    b538:	4152      	adcs	r2, r2
    b53a:	0883      	lsrs	r3, r0, #2
    b53c:	428b      	cmp	r3, r1
    b53e:	d301      	bcc.n	b544 <__udivsi3+0xe4>
    b540:	008b      	lsls	r3, r1, #2
    b542:	1ac0      	subs	r0, r0, r3
    b544:	4152      	adcs	r2, r2
    b546:	0843      	lsrs	r3, r0, #1
    b548:	428b      	cmp	r3, r1
    b54a:	d301      	bcc.n	b550 <__udivsi3+0xf0>
    b54c:	004b      	lsls	r3, r1, #1
    b54e:	1ac0      	subs	r0, r0, r3
    b550:	4152      	adcs	r2, r2
    b552:	1a41      	subs	r1, r0, r1
    b554:	d200      	bcs.n	b558 <__udivsi3+0xf8>
    b556:	4601      	mov	r1, r0
    b558:	4152      	adcs	r2, r2
    b55a:	4610      	mov	r0, r2
    b55c:	4770      	bx	lr
    b55e:	e7ff      	b.n	b560 <__udivsi3+0x100>
    b560:	b501      	push	{r0, lr}
    b562:	2000      	movs	r0, #0
    b564:	f000 f8f0 	bl	b748 <__aeabi_idiv0>
    b568:	bd02      	pop	{r1, pc}
    b56a:	46c0      	nop			; (mov r8, r8)

0000b56c <__aeabi_uidivmod>:
    b56c:	2900      	cmp	r1, #0
    b56e:	d0f7      	beq.n	b560 <__udivsi3+0x100>
    b570:	e776      	b.n	b460 <__udivsi3>
    b572:	4770      	bx	lr

0000b574 <__divsi3>:
    b574:	4603      	mov	r3, r0
    b576:	430b      	orrs	r3, r1
    b578:	d47f      	bmi.n	b67a <__divsi3+0x106>
    b57a:	2200      	movs	r2, #0
    b57c:	0843      	lsrs	r3, r0, #1
    b57e:	428b      	cmp	r3, r1
    b580:	d374      	bcc.n	b66c <__divsi3+0xf8>
    b582:	0903      	lsrs	r3, r0, #4
    b584:	428b      	cmp	r3, r1
    b586:	d35f      	bcc.n	b648 <__divsi3+0xd4>
    b588:	0a03      	lsrs	r3, r0, #8
    b58a:	428b      	cmp	r3, r1
    b58c:	d344      	bcc.n	b618 <__divsi3+0xa4>
    b58e:	0b03      	lsrs	r3, r0, #12
    b590:	428b      	cmp	r3, r1
    b592:	d328      	bcc.n	b5e6 <__divsi3+0x72>
    b594:	0c03      	lsrs	r3, r0, #16
    b596:	428b      	cmp	r3, r1
    b598:	d30d      	bcc.n	b5b6 <__divsi3+0x42>
    b59a:	22ff      	movs	r2, #255	; 0xff
    b59c:	0209      	lsls	r1, r1, #8
    b59e:	ba12      	rev	r2, r2
    b5a0:	0c03      	lsrs	r3, r0, #16
    b5a2:	428b      	cmp	r3, r1
    b5a4:	d302      	bcc.n	b5ac <__divsi3+0x38>
    b5a6:	1212      	asrs	r2, r2, #8
    b5a8:	0209      	lsls	r1, r1, #8
    b5aa:	d065      	beq.n	b678 <__divsi3+0x104>
    b5ac:	0b03      	lsrs	r3, r0, #12
    b5ae:	428b      	cmp	r3, r1
    b5b0:	d319      	bcc.n	b5e6 <__divsi3+0x72>
    b5b2:	e000      	b.n	b5b6 <__divsi3+0x42>
    b5b4:	0a09      	lsrs	r1, r1, #8
    b5b6:	0bc3      	lsrs	r3, r0, #15
    b5b8:	428b      	cmp	r3, r1
    b5ba:	d301      	bcc.n	b5c0 <__divsi3+0x4c>
    b5bc:	03cb      	lsls	r3, r1, #15
    b5be:	1ac0      	subs	r0, r0, r3
    b5c0:	4152      	adcs	r2, r2
    b5c2:	0b83      	lsrs	r3, r0, #14
    b5c4:	428b      	cmp	r3, r1
    b5c6:	d301      	bcc.n	b5cc <__divsi3+0x58>
    b5c8:	038b      	lsls	r3, r1, #14
    b5ca:	1ac0      	subs	r0, r0, r3
    b5cc:	4152      	adcs	r2, r2
    b5ce:	0b43      	lsrs	r3, r0, #13
    b5d0:	428b      	cmp	r3, r1
    b5d2:	d301      	bcc.n	b5d8 <__divsi3+0x64>
    b5d4:	034b      	lsls	r3, r1, #13
    b5d6:	1ac0      	subs	r0, r0, r3
    b5d8:	4152      	adcs	r2, r2
    b5da:	0b03      	lsrs	r3, r0, #12
    b5dc:	428b      	cmp	r3, r1
    b5de:	d301      	bcc.n	b5e4 <__divsi3+0x70>
    b5e0:	030b      	lsls	r3, r1, #12
    b5e2:	1ac0      	subs	r0, r0, r3
    b5e4:	4152      	adcs	r2, r2
    b5e6:	0ac3      	lsrs	r3, r0, #11
    b5e8:	428b      	cmp	r3, r1
    b5ea:	d301      	bcc.n	b5f0 <__divsi3+0x7c>
    b5ec:	02cb      	lsls	r3, r1, #11
    b5ee:	1ac0      	subs	r0, r0, r3
    b5f0:	4152      	adcs	r2, r2
    b5f2:	0a83      	lsrs	r3, r0, #10
    b5f4:	428b      	cmp	r3, r1
    b5f6:	d301      	bcc.n	b5fc <__divsi3+0x88>
    b5f8:	028b      	lsls	r3, r1, #10
    b5fa:	1ac0      	subs	r0, r0, r3
    b5fc:	4152      	adcs	r2, r2
    b5fe:	0a43      	lsrs	r3, r0, #9
    b600:	428b      	cmp	r3, r1
    b602:	d301      	bcc.n	b608 <__divsi3+0x94>
    b604:	024b      	lsls	r3, r1, #9
    b606:	1ac0      	subs	r0, r0, r3
    b608:	4152      	adcs	r2, r2
    b60a:	0a03      	lsrs	r3, r0, #8
    b60c:	428b      	cmp	r3, r1
    b60e:	d301      	bcc.n	b614 <__divsi3+0xa0>
    b610:	020b      	lsls	r3, r1, #8
    b612:	1ac0      	subs	r0, r0, r3
    b614:	4152      	adcs	r2, r2
    b616:	d2cd      	bcs.n	b5b4 <__divsi3+0x40>
    b618:	09c3      	lsrs	r3, r0, #7
    b61a:	428b      	cmp	r3, r1
    b61c:	d301      	bcc.n	b622 <__divsi3+0xae>
    b61e:	01cb      	lsls	r3, r1, #7
    b620:	1ac0      	subs	r0, r0, r3
    b622:	4152      	adcs	r2, r2
    b624:	0983      	lsrs	r3, r0, #6
    b626:	428b      	cmp	r3, r1
    b628:	d301      	bcc.n	b62e <__divsi3+0xba>
    b62a:	018b      	lsls	r3, r1, #6
    b62c:	1ac0      	subs	r0, r0, r3
    b62e:	4152      	adcs	r2, r2
    b630:	0943      	lsrs	r3, r0, #5
    b632:	428b      	cmp	r3, r1
    b634:	d301      	bcc.n	b63a <__divsi3+0xc6>
    b636:	014b      	lsls	r3, r1, #5
    b638:	1ac0      	subs	r0, r0, r3
    b63a:	4152      	adcs	r2, r2
    b63c:	0903      	lsrs	r3, r0, #4
    b63e:	428b      	cmp	r3, r1
    b640:	d301      	bcc.n	b646 <__divsi3+0xd2>
    b642:	010b      	lsls	r3, r1, #4
    b644:	1ac0      	subs	r0, r0, r3
    b646:	4152      	adcs	r2, r2
    b648:	08c3      	lsrs	r3, r0, #3
    b64a:	428b      	cmp	r3, r1
    b64c:	d301      	bcc.n	b652 <__divsi3+0xde>
    b64e:	00cb      	lsls	r3, r1, #3
    b650:	1ac0      	subs	r0, r0, r3
    b652:	4152      	adcs	r2, r2
    b654:	0883      	lsrs	r3, r0, #2
    b656:	428b      	cmp	r3, r1
    b658:	d301      	bcc.n	b65e <__divsi3+0xea>
    b65a:	008b      	lsls	r3, r1, #2
    b65c:	1ac0      	subs	r0, r0, r3
    b65e:	4152      	adcs	r2, r2
    b660:	0843      	lsrs	r3, r0, #1
    b662:	428b      	cmp	r3, r1
    b664:	d301      	bcc.n	b66a <__divsi3+0xf6>
    b666:	004b      	lsls	r3, r1, #1
    b668:	1ac0      	subs	r0, r0, r3
    b66a:	4152      	adcs	r2, r2
    b66c:	1a41      	subs	r1, r0, r1
    b66e:	d200      	bcs.n	b672 <__divsi3+0xfe>
    b670:	4601      	mov	r1, r0
    b672:	4152      	adcs	r2, r2
    b674:	4610      	mov	r0, r2
    b676:	4770      	bx	lr
    b678:	e05d      	b.n	b736 <__divsi3+0x1c2>
    b67a:	0fca      	lsrs	r2, r1, #31
    b67c:	d000      	beq.n	b680 <__divsi3+0x10c>
    b67e:	4249      	negs	r1, r1
    b680:	1003      	asrs	r3, r0, #32
    b682:	d300      	bcc.n	b686 <__divsi3+0x112>
    b684:	4240      	negs	r0, r0
    b686:	4053      	eors	r3, r2
    b688:	2200      	movs	r2, #0
    b68a:	469c      	mov	ip, r3
    b68c:	0903      	lsrs	r3, r0, #4
    b68e:	428b      	cmp	r3, r1
    b690:	d32d      	bcc.n	b6ee <__divsi3+0x17a>
    b692:	0a03      	lsrs	r3, r0, #8
    b694:	428b      	cmp	r3, r1
    b696:	d312      	bcc.n	b6be <__divsi3+0x14a>
    b698:	22fc      	movs	r2, #252	; 0xfc
    b69a:	0189      	lsls	r1, r1, #6
    b69c:	ba12      	rev	r2, r2
    b69e:	0a03      	lsrs	r3, r0, #8
    b6a0:	428b      	cmp	r3, r1
    b6a2:	d30c      	bcc.n	b6be <__divsi3+0x14a>
    b6a4:	0189      	lsls	r1, r1, #6
    b6a6:	1192      	asrs	r2, r2, #6
    b6a8:	428b      	cmp	r3, r1
    b6aa:	d308      	bcc.n	b6be <__divsi3+0x14a>
    b6ac:	0189      	lsls	r1, r1, #6
    b6ae:	1192      	asrs	r2, r2, #6
    b6b0:	428b      	cmp	r3, r1
    b6b2:	d304      	bcc.n	b6be <__divsi3+0x14a>
    b6b4:	0189      	lsls	r1, r1, #6
    b6b6:	d03a      	beq.n	b72e <__divsi3+0x1ba>
    b6b8:	1192      	asrs	r2, r2, #6
    b6ba:	e000      	b.n	b6be <__divsi3+0x14a>
    b6bc:	0989      	lsrs	r1, r1, #6
    b6be:	09c3      	lsrs	r3, r0, #7
    b6c0:	428b      	cmp	r3, r1
    b6c2:	d301      	bcc.n	b6c8 <__divsi3+0x154>
    b6c4:	01cb      	lsls	r3, r1, #7
    b6c6:	1ac0      	subs	r0, r0, r3
    b6c8:	4152      	adcs	r2, r2
    b6ca:	0983      	lsrs	r3, r0, #6
    b6cc:	428b      	cmp	r3, r1
    b6ce:	d301      	bcc.n	b6d4 <__divsi3+0x160>
    b6d0:	018b      	lsls	r3, r1, #6
    b6d2:	1ac0      	subs	r0, r0, r3
    b6d4:	4152      	adcs	r2, r2
    b6d6:	0943      	lsrs	r3, r0, #5
    b6d8:	428b      	cmp	r3, r1
    b6da:	d301      	bcc.n	b6e0 <__divsi3+0x16c>
    b6dc:	014b      	lsls	r3, r1, #5
    b6de:	1ac0      	subs	r0, r0, r3
    b6e0:	4152      	adcs	r2, r2
    b6e2:	0903      	lsrs	r3, r0, #4
    b6e4:	428b      	cmp	r3, r1
    b6e6:	d301      	bcc.n	b6ec <__divsi3+0x178>
    b6e8:	010b      	lsls	r3, r1, #4
    b6ea:	1ac0      	subs	r0, r0, r3
    b6ec:	4152      	adcs	r2, r2
    b6ee:	08c3      	lsrs	r3, r0, #3
    b6f0:	428b      	cmp	r3, r1
    b6f2:	d301      	bcc.n	b6f8 <__divsi3+0x184>
    b6f4:	00cb      	lsls	r3, r1, #3
    b6f6:	1ac0      	subs	r0, r0, r3
    b6f8:	4152      	adcs	r2, r2
    b6fa:	0883      	lsrs	r3, r0, #2
    b6fc:	428b      	cmp	r3, r1
    b6fe:	d301      	bcc.n	b704 <__divsi3+0x190>
    b700:	008b      	lsls	r3, r1, #2
    b702:	1ac0      	subs	r0, r0, r3
    b704:	4152      	adcs	r2, r2
    b706:	d2d9      	bcs.n	b6bc <__divsi3+0x148>
    b708:	0843      	lsrs	r3, r0, #1
    b70a:	428b      	cmp	r3, r1
    b70c:	d301      	bcc.n	b712 <__divsi3+0x19e>
    b70e:	004b      	lsls	r3, r1, #1
    b710:	1ac0      	subs	r0, r0, r3
    b712:	4152      	adcs	r2, r2
    b714:	1a41      	subs	r1, r0, r1
    b716:	d200      	bcs.n	b71a <__divsi3+0x1a6>
    b718:	4601      	mov	r1, r0
    b71a:	4663      	mov	r3, ip
    b71c:	4152      	adcs	r2, r2
    b71e:	105b      	asrs	r3, r3, #1
    b720:	4610      	mov	r0, r2
    b722:	d301      	bcc.n	b728 <__divsi3+0x1b4>
    b724:	4240      	negs	r0, r0
    b726:	2b00      	cmp	r3, #0
    b728:	d500      	bpl.n	b72c <__divsi3+0x1b8>
    b72a:	4249      	negs	r1, r1
    b72c:	4770      	bx	lr
    b72e:	4663      	mov	r3, ip
    b730:	105b      	asrs	r3, r3, #1
    b732:	d300      	bcc.n	b736 <__divsi3+0x1c2>
    b734:	4240      	negs	r0, r0
    b736:	b501      	push	{r0, lr}
    b738:	2000      	movs	r0, #0
    b73a:	f000 f805 	bl	b748 <__aeabi_idiv0>
    b73e:	bd02      	pop	{r1, pc}

0000b740 <__aeabi_idivmod>:
    b740:	2900      	cmp	r1, #0
    b742:	d0f8      	beq.n	b736 <__divsi3+0x1c2>
    b744:	e716      	b.n	b574 <__divsi3>
    b746:	4770      	bx	lr

0000b748 <__aeabi_idiv0>:
    b748:	4770      	bx	lr
    b74a:	46c0      	nop			; (mov r8, r8)

0000b74c <__aeabi_lmul>:
    b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b74e:	46ce      	mov	lr, r9
    b750:	4647      	mov	r7, r8
    b752:	0415      	lsls	r5, r2, #16
    b754:	0c2d      	lsrs	r5, r5, #16
    b756:	002e      	movs	r6, r5
    b758:	b580      	push	{r7, lr}
    b75a:	0407      	lsls	r7, r0, #16
    b75c:	0c14      	lsrs	r4, r2, #16
    b75e:	0c3f      	lsrs	r7, r7, #16
    b760:	4699      	mov	r9, r3
    b762:	0c03      	lsrs	r3, r0, #16
    b764:	437e      	muls	r6, r7
    b766:	435d      	muls	r5, r3
    b768:	4367      	muls	r7, r4
    b76a:	4363      	muls	r3, r4
    b76c:	197f      	adds	r7, r7, r5
    b76e:	0c34      	lsrs	r4, r6, #16
    b770:	19e4      	adds	r4, r4, r7
    b772:	469c      	mov	ip, r3
    b774:	42a5      	cmp	r5, r4
    b776:	d903      	bls.n	b780 <__aeabi_lmul+0x34>
    b778:	2380      	movs	r3, #128	; 0x80
    b77a:	025b      	lsls	r3, r3, #9
    b77c:	4698      	mov	r8, r3
    b77e:	44c4      	add	ip, r8
    b780:	464b      	mov	r3, r9
    b782:	4351      	muls	r1, r2
    b784:	4343      	muls	r3, r0
    b786:	0436      	lsls	r6, r6, #16
    b788:	0c36      	lsrs	r6, r6, #16
    b78a:	0c25      	lsrs	r5, r4, #16
    b78c:	0424      	lsls	r4, r4, #16
    b78e:	4465      	add	r5, ip
    b790:	19a4      	adds	r4, r4, r6
    b792:	1859      	adds	r1, r3, r1
    b794:	1949      	adds	r1, r1, r5
    b796:	0020      	movs	r0, r4
    b798:	bc0c      	pop	{r2, r3}
    b79a:	4690      	mov	r8, r2
    b79c:	4699      	mov	r9, r3
    b79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b7a0 <atoi>:
    b7a0:	b510      	push	{r4, lr}
    b7a2:	220a      	movs	r2, #10
    b7a4:	2100      	movs	r1, #0
    b7a6:	f000 fb71 	bl	be8c <strtol>
    b7aa:	bd10      	pop	{r4, pc}

0000b7ac <__libc_init_array>:
    b7ac:	b570      	push	{r4, r5, r6, lr}
    b7ae:	2600      	movs	r6, #0
    b7b0:	4d0c      	ldr	r5, [pc, #48]	; (b7e4 <__libc_init_array+0x38>)
    b7b2:	4c0d      	ldr	r4, [pc, #52]	; (b7e8 <__libc_init_array+0x3c>)
    b7b4:	1b64      	subs	r4, r4, r5
    b7b6:	10a4      	asrs	r4, r4, #2
    b7b8:	42a6      	cmp	r6, r4
    b7ba:	d109      	bne.n	b7d0 <__libc_init_array+0x24>
    b7bc:	2600      	movs	r6, #0
    b7be:	f003 fefb 	bl	f5b8 <_init>
    b7c2:	4d0a      	ldr	r5, [pc, #40]	; (b7ec <__libc_init_array+0x40>)
    b7c4:	4c0a      	ldr	r4, [pc, #40]	; (b7f0 <__libc_init_array+0x44>)
    b7c6:	1b64      	subs	r4, r4, r5
    b7c8:	10a4      	asrs	r4, r4, #2
    b7ca:	42a6      	cmp	r6, r4
    b7cc:	d105      	bne.n	b7da <__libc_init_array+0x2e>
    b7ce:	bd70      	pop	{r4, r5, r6, pc}
    b7d0:	00b3      	lsls	r3, r6, #2
    b7d2:	58eb      	ldr	r3, [r5, r3]
    b7d4:	4798      	blx	r3
    b7d6:	3601      	adds	r6, #1
    b7d8:	e7ee      	b.n	b7b8 <__libc_init_array+0xc>
    b7da:	00b3      	lsls	r3, r6, #2
    b7dc:	58eb      	ldr	r3, [r5, r3]
    b7de:	4798      	blx	r3
    b7e0:	3601      	adds	r6, #1
    b7e2:	e7f2      	b.n	b7ca <__libc_init_array+0x1e>
    b7e4:	0000f5c4 	.word	0x0000f5c4
    b7e8:	0000f5c4 	.word	0x0000f5c4
    b7ec:	0000f5c4 	.word	0x0000f5c4
    b7f0:	0000f5c8 	.word	0x0000f5c8

0000b7f4 <malloc>:
    b7f4:	b510      	push	{r4, lr}
    b7f6:	4b03      	ldr	r3, [pc, #12]	; (b804 <malloc+0x10>)
    b7f8:	0001      	movs	r1, r0
    b7fa:	6818      	ldr	r0, [r3, #0]
    b7fc:	f000 f87c 	bl	b8f8 <_malloc_r>
    b800:	bd10      	pop	{r4, pc}
    b802:	46c0      	nop			; (mov r8, r8)
    b804:	2000012c 	.word	0x2000012c

0000b808 <free>:
    b808:	b510      	push	{r4, lr}
    b80a:	4b03      	ldr	r3, [pc, #12]	; (b818 <free+0x10>)
    b80c:	0001      	movs	r1, r0
    b80e:	6818      	ldr	r0, [r3, #0]
    b810:	f000 f828 	bl	b864 <_free_r>
    b814:	bd10      	pop	{r4, pc}
    b816:	46c0      	nop			; (mov r8, r8)
    b818:	2000012c 	.word	0x2000012c

0000b81c <memcpy>:
    b81c:	2300      	movs	r3, #0
    b81e:	b510      	push	{r4, lr}
    b820:	429a      	cmp	r2, r3
    b822:	d100      	bne.n	b826 <memcpy+0xa>
    b824:	bd10      	pop	{r4, pc}
    b826:	5ccc      	ldrb	r4, [r1, r3]
    b828:	54c4      	strb	r4, [r0, r3]
    b82a:	3301      	adds	r3, #1
    b82c:	e7f8      	b.n	b820 <memcpy+0x4>

0000b82e <memmove>:
    b82e:	b510      	push	{r4, lr}
    b830:	4288      	cmp	r0, r1
    b832:	d902      	bls.n	b83a <memmove+0xc>
    b834:	188b      	adds	r3, r1, r2
    b836:	4298      	cmp	r0, r3
    b838:	d308      	bcc.n	b84c <memmove+0x1e>
    b83a:	2300      	movs	r3, #0
    b83c:	429a      	cmp	r2, r3
    b83e:	d007      	beq.n	b850 <memmove+0x22>
    b840:	5ccc      	ldrb	r4, [r1, r3]
    b842:	54c4      	strb	r4, [r0, r3]
    b844:	3301      	adds	r3, #1
    b846:	e7f9      	b.n	b83c <memmove+0xe>
    b848:	5c8b      	ldrb	r3, [r1, r2]
    b84a:	5483      	strb	r3, [r0, r2]
    b84c:	3a01      	subs	r2, #1
    b84e:	d2fb      	bcs.n	b848 <memmove+0x1a>
    b850:	bd10      	pop	{r4, pc}

0000b852 <memset>:
    b852:	0003      	movs	r3, r0
    b854:	1882      	adds	r2, r0, r2
    b856:	4293      	cmp	r3, r2
    b858:	d100      	bne.n	b85c <memset+0xa>
    b85a:	4770      	bx	lr
    b85c:	7019      	strb	r1, [r3, #0]
    b85e:	3301      	adds	r3, #1
    b860:	e7f9      	b.n	b856 <memset+0x4>
	...

0000b864 <_free_r>:
    b864:	b570      	push	{r4, r5, r6, lr}
    b866:	0005      	movs	r5, r0
    b868:	2900      	cmp	r1, #0
    b86a:	d010      	beq.n	b88e <_free_r+0x2a>
    b86c:	1f0c      	subs	r4, r1, #4
    b86e:	6823      	ldr	r3, [r4, #0]
    b870:	2b00      	cmp	r3, #0
    b872:	da00      	bge.n	b876 <_free_r+0x12>
    b874:	18e4      	adds	r4, r4, r3
    b876:	0028      	movs	r0, r5
    b878:	f000 fdf6 	bl	c468 <__malloc_lock>
    b87c:	4a1d      	ldr	r2, [pc, #116]	; (b8f4 <_free_r+0x90>)
    b87e:	6813      	ldr	r3, [r2, #0]
    b880:	2b00      	cmp	r3, #0
    b882:	d105      	bne.n	b890 <_free_r+0x2c>
    b884:	6063      	str	r3, [r4, #4]
    b886:	6014      	str	r4, [r2, #0]
    b888:	0028      	movs	r0, r5
    b88a:	f000 fdee 	bl	c46a <__malloc_unlock>
    b88e:	bd70      	pop	{r4, r5, r6, pc}
    b890:	42a3      	cmp	r3, r4
    b892:	d909      	bls.n	b8a8 <_free_r+0x44>
    b894:	6821      	ldr	r1, [r4, #0]
    b896:	1860      	adds	r0, r4, r1
    b898:	4283      	cmp	r3, r0
    b89a:	d1f3      	bne.n	b884 <_free_r+0x20>
    b89c:	6818      	ldr	r0, [r3, #0]
    b89e:	685b      	ldr	r3, [r3, #4]
    b8a0:	1841      	adds	r1, r0, r1
    b8a2:	6021      	str	r1, [r4, #0]
    b8a4:	e7ee      	b.n	b884 <_free_r+0x20>
    b8a6:	0013      	movs	r3, r2
    b8a8:	685a      	ldr	r2, [r3, #4]
    b8aa:	2a00      	cmp	r2, #0
    b8ac:	d001      	beq.n	b8b2 <_free_r+0x4e>
    b8ae:	42a2      	cmp	r2, r4
    b8b0:	d9f9      	bls.n	b8a6 <_free_r+0x42>
    b8b2:	6819      	ldr	r1, [r3, #0]
    b8b4:	1858      	adds	r0, r3, r1
    b8b6:	42a0      	cmp	r0, r4
    b8b8:	d10b      	bne.n	b8d2 <_free_r+0x6e>
    b8ba:	6820      	ldr	r0, [r4, #0]
    b8bc:	1809      	adds	r1, r1, r0
    b8be:	1858      	adds	r0, r3, r1
    b8c0:	6019      	str	r1, [r3, #0]
    b8c2:	4282      	cmp	r2, r0
    b8c4:	d1e0      	bne.n	b888 <_free_r+0x24>
    b8c6:	6810      	ldr	r0, [r2, #0]
    b8c8:	6852      	ldr	r2, [r2, #4]
    b8ca:	1841      	adds	r1, r0, r1
    b8cc:	6019      	str	r1, [r3, #0]
    b8ce:	605a      	str	r2, [r3, #4]
    b8d0:	e7da      	b.n	b888 <_free_r+0x24>
    b8d2:	42a0      	cmp	r0, r4
    b8d4:	d902      	bls.n	b8dc <_free_r+0x78>
    b8d6:	230c      	movs	r3, #12
    b8d8:	602b      	str	r3, [r5, #0]
    b8da:	e7d5      	b.n	b888 <_free_r+0x24>
    b8dc:	6821      	ldr	r1, [r4, #0]
    b8de:	1860      	adds	r0, r4, r1
    b8e0:	4282      	cmp	r2, r0
    b8e2:	d103      	bne.n	b8ec <_free_r+0x88>
    b8e4:	6810      	ldr	r0, [r2, #0]
    b8e6:	6852      	ldr	r2, [r2, #4]
    b8e8:	1841      	adds	r1, r0, r1
    b8ea:	6021      	str	r1, [r4, #0]
    b8ec:	6062      	str	r2, [r4, #4]
    b8ee:	605c      	str	r4, [r3, #4]
    b8f0:	e7ca      	b.n	b888 <_free_r+0x24>
    b8f2:	46c0      	nop			; (mov r8, r8)
    b8f4:	20000ed4 	.word	0x20000ed4

0000b8f8 <_malloc_r>:
    b8f8:	2303      	movs	r3, #3
    b8fa:	b570      	push	{r4, r5, r6, lr}
    b8fc:	1ccd      	adds	r5, r1, #3
    b8fe:	439d      	bics	r5, r3
    b900:	3508      	adds	r5, #8
    b902:	0006      	movs	r6, r0
    b904:	2d0c      	cmp	r5, #12
    b906:	d21e      	bcs.n	b946 <_malloc_r+0x4e>
    b908:	250c      	movs	r5, #12
    b90a:	42a9      	cmp	r1, r5
    b90c:	d81d      	bhi.n	b94a <_malloc_r+0x52>
    b90e:	0030      	movs	r0, r6
    b910:	f000 fdaa 	bl	c468 <__malloc_lock>
    b914:	4a25      	ldr	r2, [pc, #148]	; (b9ac <_malloc_r+0xb4>)
    b916:	6814      	ldr	r4, [r2, #0]
    b918:	0021      	movs	r1, r4
    b91a:	2900      	cmp	r1, #0
    b91c:	d119      	bne.n	b952 <_malloc_r+0x5a>
    b91e:	4c24      	ldr	r4, [pc, #144]	; (b9b0 <_malloc_r+0xb8>)
    b920:	6823      	ldr	r3, [r4, #0]
    b922:	2b00      	cmp	r3, #0
    b924:	d103      	bne.n	b92e <_malloc_r+0x36>
    b926:	0030      	movs	r0, r6
    b928:	f000 f8dc 	bl	bae4 <_sbrk_r>
    b92c:	6020      	str	r0, [r4, #0]
    b92e:	0029      	movs	r1, r5
    b930:	0030      	movs	r0, r6
    b932:	f000 f8d7 	bl	bae4 <_sbrk_r>
    b936:	1c43      	adds	r3, r0, #1
    b938:	d12c      	bne.n	b994 <_malloc_r+0x9c>
    b93a:	230c      	movs	r3, #12
    b93c:	0030      	movs	r0, r6
    b93e:	6033      	str	r3, [r6, #0]
    b940:	f000 fd93 	bl	c46a <__malloc_unlock>
    b944:	e003      	b.n	b94e <_malloc_r+0x56>
    b946:	2d00      	cmp	r5, #0
    b948:	dadf      	bge.n	b90a <_malloc_r+0x12>
    b94a:	230c      	movs	r3, #12
    b94c:	6033      	str	r3, [r6, #0]
    b94e:	2000      	movs	r0, #0
    b950:	bd70      	pop	{r4, r5, r6, pc}
    b952:	680b      	ldr	r3, [r1, #0]
    b954:	1b5b      	subs	r3, r3, r5
    b956:	d41a      	bmi.n	b98e <_malloc_r+0x96>
    b958:	2b0b      	cmp	r3, #11
    b95a:	d903      	bls.n	b964 <_malloc_r+0x6c>
    b95c:	600b      	str	r3, [r1, #0]
    b95e:	18cc      	adds	r4, r1, r3
    b960:	6025      	str	r5, [r4, #0]
    b962:	e003      	b.n	b96c <_malloc_r+0x74>
    b964:	428c      	cmp	r4, r1
    b966:	d10e      	bne.n	b986 <_malloc_r+0x8e>
    b968:	6863      	ldr	r3, [r4, #4]
    b96a:	6013      	str	r3, [r2, #0]
    b96c:	0030      	movs	r0, r6
    b96e:	f000 fd7c 	bl	c46a <__malloc_unlock>
    b972:	0020      	movs	r0, r4
    b974:	2207      	movs	r2, #7
    b976:	300b      	adds	r0, #11
    b978:	1d23      	adds	r3, r4, #4
    b97a:	4390      	bics	r0, r2
    b97c:	1ac3      	subs	r3, r0, r3
    b97e:	d0e7      	beq.n	b950 <_malloc_r+0x58>
    b980:	425a      	negs	r2, r3
    b982:	50e2      	str	r2, [r4, r3]
    b984:	e7e4      	b.n	b950 <_malloc_r+0x58>
    b986:	684b      	ldr	r3, [r1, #4]
    b988:	6063      	str	r3, [r4, #4]
    b98a:	000c      	movs	r4, r1
    b98c:	e7ee      	b.n	b96c <_malloc_r+0x74>
    b98e:	000c      	movs	r4, r1
    b990:	6849      	ldr	r1, [r1, #4]
    b992:	e7c2      	b.n	b91a <_malloc_r+0x22>
    b994:	2303      	movs	r3, #3
    b996:	1cc4      	adds	r4, r0, #3
    b998:	439c      	bics	r4, r3
    b99a:	42a0      	cmp	r0, r4
    b99c:	d0e0      	beq.n	b960 <_malloc_r+0x68>
    b99e:	1a21      	subs	r1, r4, r0
    b9a0:	0030      	movs	r0, r6
    b9a2:	f000 f89f 	bl	bae4 <_sbrk_r>
    b9a6:	1c43      	adds	r3, r0, #1
    b9a8:	d1da      	bne.n	b960 <_malloc_r+0x68>
    b9aa:	e7c6      	b.n	b93a <_malloc_r+0x42>
    b9ac:	20000ed4 	.word	0x20000ed4
    b9b0:	20000ed8 	.word	0x20000ed8

0000b9b4 <iprintf>:
    b9b4:	b40f      	push	{r0, r1, r2, r3}
    b9b6:	4b0b      	ldr	r3, [pc, #44]	; (b9e4 <iprintf+0x30>)
    b9b8:	b513      	push	{r0, r1, r4, lr}
    b9ba:	681c      	ldr	r4, [r3, #0]
    b9bc:	2c00      	cmp	r4, #0
    b9be:	d005      	beq.n	b9cc <iprintf+0x18>
    b9c0:	69a3      	ldr	r3, [r4, #24]
    b9c2:	2b00      	cmp	r3, #0
    b9c4:	d102      	bne.n	b9cc <iprintf+0x18>
    b9c6:	0020      	movs	r0, r4
    b9c8:	f000 fc38 	bl	c23c <__sinit>
    b9cc:	ab05      	add	r3, sp, #20
    b9ce:	9a04      	ldr	r2, [sp, #16]
    b9d0:	68a1      	ldr	r1, [r4, #8]
    b9d2:	0020      	movs	r0, r4
    b9d4:	9301      	str	r3, [sp, #4]
    b9d6:	f000 fed7 	bl	c788 <_vfiprintf_r>
    b9da:	bc16      	pop	{r1, r2, r4}
    b9dc:	bc08      	pop	{r3}
    b9de:	b004      	add	sp, #16
    b9e0:	4718      	bx	r3
    b9e2:	46c0      	nop			; (mov r8, r8)
    b9e4:	2000012c 	.word	0x2000012c

0000b9e8 <putchar>:
    b9e8:	4b08      	ldr	r3, [pc, #32]	; (ba0c <putchar+0x24>)
    b9ea:	b570      	push	{r4, r5, r6, lr}
    b9ec:	681c      	ldr	r4, [r3, #0]
    b9ee:	0005      	movs	r5, r0
    b9f0:	2c00      	cmp	r4, #0
    b9f2:	d005      	beq.n	ba00 <putchar+0x18>
    b9f4:	69a3      	ldr	r3, [r4, #24]
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	d102      	bne.n	ba00 <putchar+0x18>
    b9fa:	0020      	movs	r0, r4
    b9fc:	f000 fc1e 	bl	c23c <__sinit>
    ba00:	0029      	movs	r1, r5
    ba02:	68a2      	ldr	r2, [r4, #8]
    ba04:	0020      	movs	r0, r4
    ba06:	f001 f963 	bl	ccd0 <_putc_r>
    ba0a:	bd70      	pop	{r4, r5, r6, pc}
    ba0c:	2000012c 	.word	0x2000012c

0000ba10 <_puts_r>:
    ba10:	b570      	push	{r4, r5, r6, lr}
    ba12:	0005      	movs	r5, r0
    ba14:	000e      	movs	r6, r1
    ba16:	2800      	cmp	r0, #0
    ba18:	d004      	beq.n	ba24 <_puts_r+0x14>
    ba1a:	6983      	ldr	r3, [r0, #24]
    ba1c:	2b00      	cmp	r3, #0
    ba1e:	d101      	bne.n	ba24 <_puts_r+0x14>
    ba20:	f000 fc0c 	bl	c23c <__sinit>
    ba24:	69ab      	ldr	r3, [r5, #24]
    ba26:	68ac      	ldr	r4, [r5, #8]
    ba28:	2b00      	cmp	r3, #0
    ba2a:	d102      	bne.n	ba32 <_puts_r+0x22>
    ba2c:	0028      	movs	r0, r5
    ba2e:	f000 fc05 	bl	c23c <__sinit>
    ba32:	4b24      	ldr	r3, [pc, #144]	; (bac4 <_puts_r+0xb4>)
    ba34:	429c      	cmp	r4, r3
    ba36:	d10f      	bne.n	ba58 <_puts_r+0x48>
    ba38:	686c      	ldr	r4, [r5, #4]
    ba3a:	89a3      	ldrh	r3, [r4, #12]
    ba3c:	071b      	lsls	r3, r3, #28
    ba3e:	d502      	bpl.n	ba46 <_puts_r+0x36>
    ba40:	6923      	ldr	r3, [r4, #16]
    ba42:	2b00      	cmp	r3, #0
    ba44:	d120      	bne.n	ba88 <_puts_r+0x78>
    ba46:	0021      	movs	r1, r4
    ba48:	0028      	movs	r0, r5
    ba4a:	f000 fa89 	bl	bf60 <__swsetup_r>
    ba4e:	2800      	cmp	r0, #0
    ba50:	d01a      	beq.n	ba88 <_puts_r+0x78>
    ba52:	2001      	movs	r0, #1
    ba54:	4240      	negs	r0, r0
    ba56:	bd70      	pop	{r4, r5, r6, pc}
    ba58:	4b1b      	ldr	r3, [pc, #108]	; (bac8 <_puts_r+0xb8>)
    ba5a:	429c      	cmp	r4, r3
    ba5c:	d101      	bne.n	ba62 <_puts_r+0x52>
    ba5e:	68ac      	ldr	r4, [r5, #8]
    ba60:	e7eb      	b.n	ba3a <_puts_r+0x2a>
    ba62:	4b1a      	ldr	r3, [pc, #104]	; (bacc <_puts_r+0xbc>)
    ba64:	429c      	cmp	r4, r3
    ba66:	d1e8      	bne.n	ba3a <_puts_r+0x2a>
    ba68:	68ec      	ldr	r4, [r5, #12]
    ba6a:	e7e6      	b.n	ba3a <_puts_r+0x2a>
    ba6c:	3b01      	subs	r3, #1
    ba6e:	3601      	adds	r6, #1
    ba70:	60a3      	str	r3, [r4, #8]
    ba72:	2b00      	cmp	r3, #0
    ba74:	da04      	bge.n	ba80 <_puts_r+0x70>
    ba76:	69a2      	ldr	r2, [r4, #24]
    ba78:	4293      	cmp	r3, r2
    ba7a:	db16      	blt.n	baaa <_puts_r+0x9a>
    ba7c:	290a      	cmp	r1, #10
    ba7e:	d014      	beq.n	baaa <_puts_r+0x9a>
    ba80:	6823      	ldr	r3, [r4, #0]
    ba82:	1c5a      	adds	r2, r3, #1
    ba84:	6022      	str	r2, [r4, #0]
    ba86:	7019      	strb	r1, [r3, #0]
    ba88:	7831      	ldrb	r1, [r6, #0]
    ba8a:	68a3      	ldr	r3, [r4, #8]
    ba8c:	2900      	cmp	r1, #0
    ba8e:	d1ed      	bne.n	ba6c <_puts_r+0x5c>
    ba90:	3b01      	subs	r3, #1
    ba92:	60a3      	str	r3, [r4, #8]
    ba94:	2b00      	cmp	r3, #0
    ba96:	da0f      	bge.n	bab8 <_puts_r+0xa8>
    ba98:	0022      	movs	r2, r4
    ba9a:	310a      	adds	r1, #10
    ba9c:	0028      	movs	r0, r5
    ba9e:	f000 fa09 	bl	beb4 <__swbuf_r>
    baa2:	1c43      	adds	r3, r0, #1
    baa4:	d0d5      	beq.n	ba52 <_puts_r+0x42>
    baa6:	200a      	movs	r0, #10
    baa8:	e7d5      	b.n	ba56 <_puts_r+0x46>
    baaa:	0022      	movs	r2, r4
    baac:	0028      	movs	r0, r5
    baae:	f000 fa01 	bl	beb4 <__swbuf_r>
    bab2:	1c43      	adds	r3, r0, #1
    bab4:	d1e8      	bne.n	ba88 <_puts_r+0x78>
    bab6:	e7cc      	b.n	ba52 <_puts_r+0x42>
    bab8:	200a      	movs	r0, #10
    baba:	6823      	ldr	r3, [r4, #0]
    babc:	1c5a      	adds	r2, r3, #1
    babe:	6022      	str	r2, [r4, #0]
    bac0:	7018      	strb	r0, [r3, #0]
    bac2:	e7c8      	b.n	ba56 <_puts_r+0x46>
    bac4:	0000f438 	.word	0x0000f438
    bac8:	0000f458 	.word	0x0000f458
    bacc:	0000f418 	.word	0x0000f418

0000bad0 <puts>:
    bad0:	b510      	push	{r4, lr}
    bad2:	4b03      	ldr	r3, [pc, #12]	; (bae0 <puts+0x10>)
    bad4:	0001      	movs	r1, r0
    bad6:	6818      	ldr	r0, [r3, #0]
    bad8:	f7ff ff9a 	bl	ba10 <_puts_r>
    badc:	bd10      	pop	{r4, pc}
    bade:	46c0      	nop			; (mov r8, r8)
    bae0:	2000012c 	.word	0x2000012c

0000bae4 <_sbrk_r>:
    bae4:	2300      	movs	r3, #0
    bae6:	b570      	push	{r4, r5, r6, lr}
    bae8:	4c06      	ldr	r4, [pc, #24]	; (bb04 <_sbrk_r+0x20>)
    baea:	0005      	movs	r5, r0
    baec:	0008      	movs	r0, r1
    baee:	6023      	str	r3, [r4, #0]
    baf0:	f7fa ff06 	bl	6900 <_sbrk>
    baf4:	1c43      	adds	r3, r0, #1
    baf6:	d103      	bne.n	bb00 <_sbrk_r+0x1c>
    baf8:	6823      	ldr	r3, [r4, #0]
    bafa:	2b00      	cmp	r3, #0
    bafc:	d000      	beq.n	bb00 <_sbrk_r+0x1c>
    bafe:	602b      	str	r3, [r5, #0]
    bb00:	bd70      	pop	{r4, r5, r6, pc}
    bb02:	46c0      	nop			; (mov r8, r8)
    bb04:	200012b8 	.word	0x200012b8

0000bb08 <setbuf>:
    bb08:	424a      	negs	r2, r1
    bb0a:	414a      	adcs	r2, r1
    bb0c:	2380      	movs	r3, #128	; 0x80
    bb0e:	b510      	push	{r4, lr}
    bb10:	0052      	lsls	r2, r2, #1
    bb12:	00db      	lsls	r3, r3, #3
    bb14:	f000 f802 	bl	bb1c <setvbuf>
    bb18:	bd10      	pop	{r4, pc}
	...

0000bb1c <setvbuf>:
    bb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb1e:	001d      	movs	r5, r3
    bb20:	4b4f      	ldr	r3, [pc, #316]	; (bc60 <setvbuf+0x144>)
    bb22:	b085      	sub	sp, #20
    bb24:	681e      	ldr	r6, [r3, #0]
    bb26:	0004      	movs	r4, r0
    bb28:	000f      	movs	r7, r1
    bb2a:	9200      	str	r2, [sp, #0]
    bb2c:	2e00      	cmp	r6, #0
    bb2e:	d005      	beq.n	bb3c <setvbuf+0x20>
    bb30:	69b3      	ldr	r3, [r6, #24]
    bb32:	2b00      	cmp	r3, #0
    bb34:	d102      	bne.n	bb3c <setvbuf+0x20>
    bb36:	0030      	movs	r0, r6
    bb38:	f000 fb80 	bl	c23c <__sinit>
    bb3c:	4b49      	ldr	r3, [pc, #292]	; (bc64 <setvbuf+0x148>)
    bb3e:	429c      	cmp	r4, r3
    bb40:	d150      	bne.n	bbe4 <setvbuf+0xc8>
    bb42:	6874      	ldr	r4, [r6, #4]
    bb44:	9b00      	ldr	r3, [sp, #0]
    bb46:	2b02      	cmp	r3, #2
    bb48:	d005      	beq.n	bb56 <setvbuf+0x3a>
    bb4a:	2b01      	cmp	r3, #1
    bb4c:	d900      	bls.n	bb50 <setvbuf+0x34>
    bb4e:	e084      	b.n	bc5a <setvbuf+0x13e>
    bb50:	2d00      	cmp	r5, #0
    bb52:	da00      	bge.n	bb56 <setvbuf+0x3a>
    bb54:	e081      	b.n	bc5a <setvbuf+0x13e>
    bb56:	0021      	movs	r1, r4
    bb58:	0030      	movs	r0, r6
    bb5a:	f000 fb01 	bl	c160 <_fflush_r>
    bb5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bb60:	2900      	cmp	r1, #0
    bb62:	d008      	beq.n	bb76 <setvbuf+0x5a>
    bb64:	0023      	movs	r3, r4
    bb66:	3344      	adds	r3, #68	; 0x44
    bb68:	4299      	cmp	r1, r3
    bb6a:	d002      	beq.n	bb72 <setvbuf+0x56>
    bb6c:	0030      	movs	r0, r6
    bb6e:	f7ff fe79 	bl	b864 <_free_r>
    bb72:	2300      	movs	r3, #0
    bb74:	6363      	str	r3, [r4, #52]	; 0x34
    bb76:	2300      	movs	r3, #0
    bb78:	61a3      	str	r3, [r4, #24]
    bb7a:	6063      	str	r3, [r4, #4]
    bb7c:	89a3      	ldrh	r3, [r4, #12]
    bb7e:	061b      	lsls	r3, r3, #24
    bb80:	d503      	bpl.n	bb8a <setvbuf+0x6e>
    bb82:	6921      	ldr	r1, [r4, #16]
    bb84:	0030      	movs	r0, r6
    bb86:	f7ff fe6d 	bl	b864 <_free_r>
    bb8a:	89a3      	ldrh	r3, [r4, #12]
    bb8c:	4a36      	ldr	r2, [pc, #216]	; (bc68 <setvbuf+0x14c>)
    bb8e:	4013      	ands	r3, r2
    bb90:	81a3      	strh	r3, [r4, #12]
    bb92:	9b00      	ldr	r3, [sp, #0]
    bb94:	2b02      	cmp	r3, #2
    bb96:	d05a      	beq.n	bc4e <setvbuf+0x132>
    bb98:	ab03      	add	r3, sp, #12
    bb9a:	aa02      	add	r2, sp, #8
    bb9c:	0021      	movs	r1, r4
    bb9e:	0030      	movs	r0, r6
    bba0:	f000 fbe4 	bl	c36c <__swhatbuf_r>
    bba4:	89a3      	ldrh	r3, [r4, #12]
    bba6:	4318      	orrs	r0, r3
    bba8:	81a0      	strh	r0, [r4, #12]
    bbaa:	2d00      	cmp	r5, #0
    bbac:	d124      	bne.n	bbf8 <setvbuf+0xdc>
    bbae:	9d02      	ldr	r5, [sp, #8]
    bbb0:	0028      	movs	r0, r5
    bbb2:	f7ff fe1f 	bl	b7f4 <malloc>
    bbb6:	9501      	str	r5, [sp, #4]
    bbb8:	1e07      	subs	r7, r0, #0
    bbba:	d142      	bne.n	bc42 <setvbuf+0x126>
    bbbc:	9b02      	ldr	r3, [sp, #8]
    bbbe:	9301      	str	r3, [sp, #4]
    bbc0:	42ab      	cmp	r3, r5
    bbc2:	d139      	bne.n	bc38 <setvbuf+0x11c>
    bbc4:	2001      	movs	r0, #1
    bbc6:	4240      	negs	r0, r0
    bbc8:	2302      	movs	r3, #2
    bbca:	89a2      	ldrh	r2, [r4, #12]
    bbcc:	4313      	orrs	r3, r2
    bbce:	81a3      	strh	r3, [r4, #12]
    bbd0:	2300      	movs	r3, #0
    bbd2:	60a3      	str	r3, [r4, #8]
    bbd4:	0023      	movs	r3, r4
    bbd6:	3347      	adds	r3, #71	; 0x47
    bbd8:	6023      	str	r3, [r4, #0]
    bbda:	6123      	str	r3, [r4, #16]
    bbdc:	2301      	movs	r3, #1
    bbde:	6163      	str	r3, [r4, #20]
    bbe0:	b005      	add	sp, #20
    bbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbe4:	4b21      	ldr	r3, [pc, #132]	; (bc6c <setvbuf+0x150>)
    bbe6:	429c      	cmp	r4, r3
    bbe8:	d101      	bne.n	bbee <setvbuf+0xd2>
    bbea:	68b4      	ldr	r4, [r6, #8]
    bbec:	e7aa      	b.n	bb44 <setvbuf+0x28>
    bbee:	4b20      	ldr	r3, [pc, #128]	; (bc70 <setvbuf+0x154>)
    bbf0:	429c      	cmp	r4, r3
    bbf2:	d1a7      	bne.n	bb44 <setvbuf+0x28>
    bbf4:	68f4      	ldr	r4, [r6, #12]
    bbf6:	e7a5      	b.n	bb44 <setvbuf+0x28>
    bbf8:	2f00      	cmp	r7, #0
    bbfa:	d0d9      	beq.n	bbb0 <setvbuf+0x94>
    bbfc:	69b3      	ldr	r3, [r6, #24]
    bbfe:	2b00      	cmp	r3, #0
    bc00:	d102      	bne.n	bc08 <setvbuf+0xec>
    bc02:	0030      	movs	r0, r6
    bc04:	f000 fb1a 	bl	c23c <__sinit>
    bc08:	9b00      	ldr	r3, [sp, #0]
    bc0a:	2b01      	cmp	r3, #1
    bc0c:	d103      	bne.n	bc16 <setvbuf+0xfa>
    bc0e:	89a3      	ldrh	r3, [r4, #12]
    bc10:	9a00      	ldr	r2, [sp, #0]
    bc12:	431a      	orrs	r2, r3
    bc14:	81a2      	strh	r2, [r4, #12]
    bc16:	2008      	movs	r0, #8
    bc18:	89a3      	ldrh	r3, [r4, #12]
    bc1a:	6027      	str	r7, [r4, #0]
    bc1c:	6127      	str	r7, [r4, #16]
    bc1e:	6165      	str	r5, [r4, #20]
    bc20:	4018      	ands	r0, r3
    bc22:	d018      	beq.n	bc56 <setvbuf+0x13a>
    bc24:	2001      	movs	r0, #1
    bc26:	4018      	ands	r0, r3
    bc28:	2300      	movs	r3, #0
    bc2a:	4298      	cmp	r0, r3
    bc2c:	d011      	beq.n	bc52 <setvbuf+0x136>
    bc2e:	426d      	negs	r5, r5
    bc30:	60a3      	str	r3, [r4, #8]
    bc32:	61a5      	str	r5, [r4, #24]
    bc34:	0018      	movs	r0, r3
    bc36:	e7d3      	b.n	bbe0 <setvbuf+0xc4>
    bc38:	9801      	ldr	r0, [sp, #4]
    bc3a:	f7ff fddb 	bl	b7f4 <malloc>
    bc3e:	1e07      	subs	r7, r0, #0
    bc40:	d0c0      	beq.n	bbc4 <setvbuf+0xa8>
    bc42:	2380      	movs	r3, #128	; 0x80
    bc44:	89a2      	ldrh	r2, [r4, #12]
    bc46:	9d01      	ldr	r5, [sp, #4]
    bc48:	4313      	orrs	r3, r2
    bc4a:	81a3      	strh	r3, [r4, #12]
    bc4c:	e7d6      	b.n	bbfc <setvbuf+0xe0>
    bc4e:	2000      	movs	r0, #0
    bc50:	e7ba      	b.n	bbc8 <setvbuf+0xac>
    bc52:	60a5      	str	r5, [r4, #8]
    bc54:	e7c4      	b.n	bbe0 <setvbuf+0xc4>
    bc56:	60a0      	str	r0, [r4, #8]
    bc58:	e7c2      	b.n	bbe0 <setvbuf+0xc4>
    bc5a:	2001      	movs	r0, #1
    bc5c:	4240      	negs	r0, r0
    bc5e:	e7bf      	b.n	bbe0 <setvbuf+0xc4>
    bc60:	2000012c 	.word	0x2000012c
    bc64:	0000f438 	.word	0x0000f438
    bc68:	fffff35c 	.word	0xfffff35c
    bc6c:	0000f458 	.word	0x0000f458
    bc70:	0000f418 	.word	0x0000f418

0000bc74 <siprintf>:
    bc74:	b40e      	push	{r1, r2, r3}
    bc76:	b510      	push	{r4, lr}
    bc78:	b09d      	sub	sp, #116	; 0x74
    bc7a:	a902      	add	r1, sp, #8
    bc7c:	9002      	str	r0, [sp, #8]
    bc7e:	6108      	str	r0, [r1, #16]
    bc80:	480b      	ldr	r0, [pc, #44]	; (bcb0 <siprintf+0x3c>)
    bc82:	2482      	movs	r4, #130	; 0x82
    bc84:	6088      	str	r0, [r1, #8]
    bc86:	6148      	str	r0, [r1, #20]
    bc88:	2001      	movs	r0, #1
    bc8a:	4240      	negs	r0, r0
    bc8c:	ab1f      	add	r3, sp, #124	; 0x7c
    bc8e:	81c8      	strh	r0, [r1, #14]
    bc90:	4808      	ldr	r0, [pc, #32]	; (bcb4 <siprintf+0x40>)
    bc92:	cb04      	ldmia	r3!, {r2}
    bc94:	00a4      	lsls	r4, r4, #2
    bc96:	6800      	ldr	r0, [r0, #0]
    bc98:	9301      	str	r3, [sp, #4]
    bc9a:	818c      	strh	r4, [r1, #12]
    bc9c:	f000 fc48 	bl	c530 <_svfiprintf_r>
    bca0:	2300      	movs	r3, #0
    bca2:	9a02      	ldr	r2, [sp, #8]
    bca4:	7013      	strb	r3, [r2, #0]
    bca6:	b01d      	add	sp, #116	; 0x74
    bca8:	bc10      	pop	{r4}
    bcaa:	bc08      	pop	{r3}
    bcac:	b003      	add	sp, #12
    bcae:	4718      	bx	r3
    bcb0:	7fffffff 	.word	0x7fffffff
    bcb4:	2000012c 	.word	0x2000012c

0000bcb8 <strcpy>:
    bcb8:	1c03      	adds	r3, r0, #0
    bcba:	780a      	ldrb	r2, [r1, #0]
    bcbc:	3101      	adds	r1, #1
    bcbe:	701a      	strb	r2, [r3, #0]
    bcc0:	3301      	adds	r3, #1
    bcc2:	2a00      	cmp	r2, #0
    bcc4:	d1f9      	bne.n	bcba <strcpy+0x2>
    bcc6:	4770      	bx	lr

0000bcc8 <strdup>:
    bcc8:	b510      	push	{r4, lr}
    bcca:	4b03      	ldr	r3, [pc, #12]	; (bcd8 <strdup+0x10>)
    bccc:	0001      	movs	r1, r0
    bcce:	6818      	ldr	r0, [r3, #0]
    bcd0:	f000 f804 	bl	bcdc <_strdup_r>
    bcd4:	bd10      	pop	{r4, pc}
    bcd6:	46c0      	nop			; (mov r8, r8)
    bcd8:	2000012c 	.word	0x2000012c

0000bcdc <_strdup_r>:
    bcdc:	b570      	push	{r4, r5, r6, lr}
    bcde:	0005      	movs	r5, r0
    bce0:	0008      	movs	r0, r1
    bce2:	000e      	movs	r6, r1
    bce4:	f000 f80d 	bl	bd02 <strlen>
    bce8:	1c44      	adds	r4, r0, #1
    bcea:	0021      	movs	r1, r4
    bcec:	0028      	movs	r0, r5
    bcee:	f7ff fe03 	bl	b8f8 <_malloc_r>
    bcf2:	1e05      	subs	r5, r0, #0
    bcf4:	d003      	beq.n	bcfe <_strdup_r+0x22>
    bcf6:	0022      	movs	r2, r4
    bcf8:	0031      	movs	r1, r6
    bcfa:	f7ff fd8f 	bl	b81c <memcpy>
    bcfe:	0028      	movs	r0, r5
    bd00:	bd70      	pop	{r4, r5, r6, pc}

0000bd02 <strlen>:
    bd02:	2300      	movs	r3, #0
    bd04:	5cc2      	ldrb	r2, [r0, r3]
    bd06:	3301      	adds	r3, #1
    bd08:	2a00      	cmp	r2, #0
    bd0a:	d1fb      	bne.n	bd04 <strlen+0x2>
    bd0c:	1e58      	subs	r0, r3, #1
    bd0e:	4770      	bx	lr

0000bd10 <strncmp>:
    bd10:	2300      	movs	r3, #0
    bd12:	b530      	push	{r4, r5, lr}
    bd14:	429a      	cmp	r2, r3
    bd16:	d00a      	beq.n	bd2e <strncmp+0x1e>
    bd18:	3a01      	subs	r2, #1
    bd1a:	5cc4      	ldrb	r4, [r0, r3]
    bd1c:	5ccd      	ldrb	r5, [r1, r3]
    bd1e:	42ac      	cmp	r4, r5
    bd20:	d104      	bne.n	bd2c <strncmp+0x1c>
    bd22:	429a      	cmp	r2, r3
    bd24:	d002      	beq.n	bd2c <strncmp+0x1c>
    bd26:	3301      	adds	r3, #1
    bd28:	2c00      	cmp	r4, #0
    bd2a:	d1f6      	bne.n	bd1a <strncmp+0xa>
    bd2c:	1b63      	subs	r3, r4, r5
    bd2e:	0018      	movs	r0, r3
    bd30:	bd30      	pop	{r4, r5, pc}

0000bd32 <strncpy>:
    bd32:	b570      	push	{r4, r5, r6, lr}
    bd34:	0004      	movs	r4, r0
    bd36:	2a00      	cmp	r2, #0
    bd38:	d100      	bne.n	bd3c <strncpy+0xa>
    bd3a:	bd70      	pop	{r4, r5, r6, pc}
    bd3c:	780d      	ldrb	r5, [r1, #0]
    bd3e:	1e56      	subs	r6, r2, #1
    bd40:	1c63      	adds	r3, r4, #1
    bd42:	7025      	strb	r5, [r4, #0]
    bd44:	3101      	adds	r1, #1
    bd46:	2d00      	cmp	r5, #0
    bd48:	d105      	bne.n	bd56 <strncpy+0x24>
    bd4a:	18a4      	adds	r4, r4, r2
    bd4c:	429c      	cmp	r4, r3
    bd4e:	d0f4      	beq.n	bd3a <strncpy+0x8>
    bd50:	701d      	strb	r5, [r3, #0]
    bd52:	3301      	adds	r3, #1
    bd54:	e7fa      	b.n	bd4c <strncpy+0x1a>
    bd56:	001c      	movs	r4, r3
    bd58:	0032      	movs	r2, r6
    bd5a:	e7ec      	b.n	bd36 <strncpy+0x4>

0000bd5c <strrchr>:
    bd5c:	b570      	push	{r4, r5, r6, lr}
    bd5e:	000d      	movs	r5, r1
    bd60:	2400      	movs	r4, #0
    bd62:	2900      	cmp	r1, #0
    bd64:	d105      	bne.n	bd72 <strrchr+0x16>
    bd66:	f001 f835 	bl	cdd4 <strchr>
    bd6a:	0004      	movs	r4, r0
    bd6c:	e006      	b.n	bd7c <strrchr+0x20>
    bd6e:	001c      	movs	r4, r3
    bd70:	1c58      	adds	r0, r3, #1
    bd72:	0029      	movs	r1, r5
    bd74:	f001 f82e 	bl	cdd4 <strchr>
    bd78:	1e03      	subs	r3, r0, #0
    bd7a:	d1f8      	bne.n	bd6e <strrchr+0x12>
    bd7c:	0020      	movs	r0, r4
    bd7e:	bd70      	pop	{r4, r5, r6, pc}

0000bd80 <_strtol_l.isra.0>:
    bd80:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd82:	001f      	movs	r7, r3
    bd84:	000e      	movs	r6, r1
    bd86:	b087      	sub	sp, #28
    bd88:	9005      	str	r0, [sp, #20]
    bd8a:	9103      	str	r1, [sp, #12]
    bd8c:	9202      	str	r2, [sp, #8]
    bd8e:	980c      	ldr	r0, [sp, #48]	; 0x30
    bd90:	7834      	ldrb	r4, [r6, #0]
    bd92:	f000 fae8 	bl	c366 <__locale_ctype_ptr_l>
    bd96:	2208      	movs	r2, #8
    bd98:	1900      	adds	r0, r0, r4
    bd9a:	7843      	ldrb	r3, [r0, #1]
    bd9c:	1c75      	adds	r5, r6, #1
    bd9e:	4013      	ands	r3, r2
    bda0:	d10c      	bne.n	bdbc <_strtol_l.isra.0+0x3c>
    bda2:	2c2d      	cmp	r4, #45	; 0x2d
    bda4:	d10c      	bne.n	bdc0 <_strtol_l.isra.0+0x40>
    bda6:	3301      	adds	r3, #1
    bda8:	782c      	ldrb	r4, [r5, #0]
    bdaa:	9301      	str	r3, [sp, #4]
    bdac:	1cb5      	adds	r5, r6, #2
    bdae:	2f00      	cmp	r7, #0
    bdb0:	d00c      	beq.n	bdcc <_strtol_l.isra.0+0x4c>
    bdb2:	2f10      	cmp	r7, #16
    bdb4:	d114      	bne.n	bde0 <_strtol_l.isra.0+0x60>
    bdb6:	2c30      	cmp	r4, #48	; 0x30
    bdb8:	d00a      	beq.n	bdd0 <_strtol_l.isra.0+0x50>
    bdba:	e011      	b.n	bde0 <_strtol_l.isra.0+0x60>
    bdbc:	002e      	movs	r6, r5
    bdbe:	e7e6      	b.n	bd8e <_strtol_l.isra.0+0xe>
    bdc0:	9301      	str	r3, [sp, #4]
    bdc2:	2c2b      	cmp	r4, #43	; 0x2b
    bdc4:	d1f3      	bne.n	bdae <_strtol_l.isra.0+0x2e>
    bdc6:	782c      	ldrb	r4, [r5, #0]
    bdc8:	1cb5      	adds	r5, r6, #2
    bdca:	e7f0      	b.n	bdae <_strtol_l.isra.0+0x2e>
    bdcc:	2c30      	cmp	r4, #48	; 0x30
    bdce:	d12f      	bne.n	be30 <_strtol_l.isra.0+0xb0>
    bdd0:	2220      	movs	r2, #32
    bdd2:	782b      	ldrb	r3, [r5, #0]
    bdd4:	4393      	bics	r3, r2
    bdd6:	2b58      	cmp	r3, #88	; 0x58
    bdd8:	d151      	bne.n	be7e <_strtol_l.isra.0+0xfe>
    bdda:	2710      	movs	r7, #16
    bddc:	786c      	ldrb	r4, [r5, #1]
    bdde:	3502      	adds	r5, #2
    bde0:	9b01      	ldr	r3, [sp, #4]
    bde2:	4a29      	ldr	r2, [pc, #164]	; (be88 <_strtol_l.isra.0+0x108>)
    bde4:	0039      	movs	r1, r7
    bde6:	189e      	adds	r6, r3, r2
    bde8:	0030      	movs	r0, r6
    bdea:	f7ff fbbf 	bl	b56c <__aeabi_uidivmod>
    bdee:	0030      	movs	r0, r6
    bdf0:	9104      	str	r1, [sp, #16]
    bdf2:	0039      	movs	r1, r7
    bdf4:	f7ff fb34 	bl	b460 <__udivsi3>
    bdf8:	2101      	movs	r1, #1
    bdfa:	2300      	movs	r3, #0
    bdfc:	4249      	negs	r1, r1
    bdfe:	0002      	movs	r2, r0
    be00:	468c      	mov	ip, r1
    be02:	0018      	movs	r0, r3
    be04:	0021      	movs	r1, r4
    be06:	3930      	subs	r1, #48	; 0x30
    be08:	2909      	cmp	r1, #9
    be0a:	d813      	bhi.n	be34 <_strtol_l.isra.0+0xb4>
    be0c:	000c      	movs	r4, r1
    be0e:	42a7      	cmp	r7, r4
    be10:	dd1c      	ble.n	be4c <_strtol_l.isra.0+0xcc>
    be12:	1c59      	adds	r1, r3, #1
    be14:	d009      	beq.n	be2a <_strtol_l.isra.0+0xaa>
    be16:	4663      	mov	r3, ip
    be18:	4282      	cmp	r2, r0
    be1a:	d306      	bcc.n	be2a <_strtol_l.isra.0+0xaa>
    be1c:	d102      	bne.n	be24 <_strtol_l.isra.0+0xa4>
    be1e:	9904      	ldr	r1, [sp, #16]
    be20:	42a1      	cmp	r1, r4
    be22:	db02      	blt.n	be2a <_strtol_l.isra.0+0xaa>
    be24:	2301      	movs	r3, #1
    be26:	4378      	muls	r0, r7
    be28:	1820      	adds	r0, r4, r0
    be2a:	782c      	ldrb	r4, [r5, #0]
    be2c:	3501      	adds	r5, #1
    be2e:	e7e9      	b.n	be04 <_strtol_l.isra.0+0x84>
    be30:	270a      	movs	r7, #10
    be32:	e7d5      	b.n	bde0 <_strtol_l.isra.0+0x60>
    be34:	0021      	movs	r1, r4
    be36:	3941      	subs	r1, #65	; 0x41
    be38:	2919      	cmp	r1, #25
    be3a:	d801      	bhi.n	be40 <_strtol_l.isra.0+0xc0>
    be3c:	3c37      	subs	r4, #55	; 0x37
    be3e:	e7e6      	b.n	be0e <_strtol_l.isra.0+0x8e>
    be40:	0021      	movs	r1, r4
    be42:	3961      	subs	r1, #97	; 0x61
    be44:	2919      	cmp	r1, #25
    be46:	d801      	bhi.n	be4c <_strtol_l.isra.0+0xcc>
    be48:	3c57      	subs	r4, #87	; 0x57
    be4a:	e7e0      	b.n	be0e <_strtol_l.isra.0+0x8e>
    be4c:	1c5a      	adds	r2, r3, #1
    be4e:	d108      	bne.n	be62 <_strtol_l.isra.0+0xe2>
    be50:	9a05      	ldr	r2, [sp, #20]
    be52:	3323      	adds	r3, #35	; 0x23
    be54:	6013      	str	r3, [r2, #0]
    be56:	9b02      	ldr	r3, [sp, #8]
    be58:	0030      	movs	r0, r6
    be5a:	2b00      	cmp	r3, #0
    be5c:	d10b      	bne.n	be76 <_strtol_l.isra.0+0xf6>
    be5e:	b007      	add	sp, #28
    be60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be62:	9a01      	ldr	r2, [sp, #4]
    be64:	2a00      	cmp	r2, #0
    be66:	d000      	beq.n	be6a <_strtol_l.isra.0+0xea>
    be68:	4240      	negs	r0, r0
    be6a:	9a02      	ldr	r2, [sp, #8]
    be6c:	2a00      	cmp	r2, #0
    be6e:	d0f6      	beq.n	be5e <_strtol_l.isra.0+0xde>
    be70:	9a03      	ldr	r2, [sp, #12]
    be72:	2b00      	cmp	r3, #0
    be74:	d000      	beq.n	be78 <_strtol_l.isra.0+0xf8>
    be76:	1e6a      	subs	r2, r5, #1
    be78:	9b02      	ldr	r3, [sp, #8]
    be7a:	601a      	str	r2, [r3, #0]
    be7c:	e7ef      	b.n	be5e <_strtol_l.isra.0+0xde>
    be7e:	2430      	movs	r4, #48	; 0x30
    be80:	2f00      	cmp	r7, #0
    be82:	d1ad      	bne.n	bde0 <_strtol_l.isra.0+0x60>
    be84:	3708      	adds	r7, #8
    be86:	e7ab      	b.n	bde0 <_strtol_l.isra.0+0x60>
    be88:	7fffffff 	.word	0x7fffffff

0000be8c <strtol>:
    be8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    be8e:	0013      	movs	r3, r2
    be90:	4a06      	ldr	r2, [pc, #24]	; (beac <strtol+0x20>)
    be92:	0005      	movs	r5, r0
    be94:	6810      	ldr	r0, [r2, #0]
    be96:	6a04      	ldr	r4, [r0, #32]
    be98:	2c00      	cmp	r4, #0
    be9a:	d100      	bne.n	be9e <strtol+0x12>
    be9c:	4c04      	ldr	r4, [pc, #16]	; (beb0 <strtol+0x24>)
    be9e:	000a      	movs	r2, r1
    bea0:	9400      	str	r4, [sp, #0]
    bea2:	0029      	movs	r1, r5
    bea4:	f7ff ff6c 	bl	bd80 <_strtol_l.isra.0>
    bea8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    beaa:	46c0      	nop			; (mov r8, r8)
    beac:	2000012c 	.word	0x2000012c
    beb0:	20000190 	.word	0x20000190

0000beb4 <__swbuf_r>:
    beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    beb6:	0005      	movs	r5, r0
    beb8:	000e      	movs	r6, r1
    beba:	0014      	movs	r4, r2
    bebc:	2800      	cmp	r0, #0
    bebe:	d004      	beq.n	beca <__swbuf_r+0x16>
    bec0:	6983      	ldr	r3, [r0, #24]
    bec2:	2b00      	cmp	r3, #0
    bec4:	d101      	bne.n	beca <__swbuf_r+0x16>
    bec6:	f000 f9b9 	bl	c23c <__sinit>
    beca:	4b22      	ldr	r3, [pc, #136]	; (bf54 <__swbuf_r+0xa0>)
    becc:	429c      	cmp	r4, r3
    bece:	d12d      	bne.n	bf2c <__swbuf_r+0x78>
    bed0:	686c      	ldr	r4, [r5, #4]
    bed2:	69a3      	ldr	r3, [r4, #24]
    bed4:	60a3      	str	r3, [r4, #8]
    bed6:	89a3      	ldrh	r3, [r4, #12]
    bed8:	071b      	lsls	r3, r3, #28
    beda:	d531      	bpl.n	bf40 <__swbuf_r+0x8c>
    bedc:	6923      	ldr	r3, [r4, #16]
    bede:	2b00      	cmp	r3, #0
    bee0:	d02e      	beq.n	bf40 <__swbuf_r+0x8c>
    bee2:	6823      	ldr	r3, [r4, #0]
    bee4:	6922      	ldr	r2, [r4, #16]
    bee6:	b2f7      	uxtb	r7, r6
    bee8:	1a98      	subs	r0, r3, r2
    beea:	6963      	ldr	r3, [r4, #20]
    beec:	b2f6      	uxtb	r6, r6
    beee:	4298      	cmp	r0, r3
    bef0:	db05      	blt.n	befe <__swbuf_r+0x4a>
    bef2:	0021      	movs	r1, r4
    bef4:	0028      	movs	r0, r5
    bef6:	f000 f933 	bl	c160 <_fflush_r>
    befa:	2800      	cmp	r0, #0
    befc:	d126      	bne.n	bf4c <__swbuf_r+0x98>
    befe:	68a3      	ldr	r3, [r4, #8]
    bf00:	3001      	adds	r0, #1
    bf02:	3b01      	subs	r3, #1
    bf04:	60a3      	str	r3, [r4, #8]
    bf06:	6823      	ldr	r3, [r4, #0]
    bf08:	1c5a      	adds	r2, r3, #1
    bf0a:	6022      	str	r2, [r4, #0]
    bf0c:	701f      	strb	r7, [r3, #0]
    bf0e:	6963      	ldr	r3, [r4, #20]
    bf10:	4298      	cmp	r0, r3
    bf12:	d004      	beq.n	bf1e <__swbuf_r+0x6a>
    bf14:	89a3      	ldrh	r3, [r4, #12]
    bf16:	07db      	lsls	r3, r3, #31
    bf18:	d51a      	bpl.n	bf50 <__swbuf_r+0x9c>
    bf1a:	2e0a      	cmp	r6, #10
    bf1c:	d118      	bne.n	bf50 <__swbuf_r+0x9c>
    bf1e:	0021      	movs	r1, r4
    bf20:	0028      	movs	r0, r5
    bf22:	f000 f91d 	bl	c160 <_fflush_r>
    bf26:	2800      	cmp	r0, #0
    bf28:	d012      	beq.n	bf50 <__swbuf_r+0x9c>
    bf2a:	e00f      	b.n	bf4c <__swbuf_r+0x98>
    bf2c:	4b0a      	ldr	r3, [pc, #40]	; (bf58 <__swbuf_r+0xa4>)
    bf2e:	429c      	cmp	r4, r3
    bf30:	d101      	bne.n	bf36 <__swbuf_r+0x82>
    bf32:	68ac      	ldr	r4, [r5, #8]
    bf34:	e7cd      	b.n	bed2 <__swbuf_r+0x1e>
    bf36:	4b09      	ldr	r3, [pc, #36]	; (bf5c <__swbuf_r+0xa8>)
    bf38:	429c      	cmp	r4, r3
    bf3a:	d1ca      	bne.n	bed2 <__swbuf_r+0x1e>
    bf3c:	68ec      	ldr	r4, [r5, #12]
    bf3e:	e7c8      	b.n	bed2 <__swbuf_r+0x1e>
    bf40:	0021      	movs	r1, r4
    bf42:	0028      	movs	r0, r5
    bf44:	f000 f80c 	bl	bf60 <__swsetup_r>
    bf48:	2800      	cmp	r0, #0
    bf4a:	d0ca      	beq.n	bee2 <__swbuf_r+0x2e>
    bf4c:	2601      	movs	r6, #1
    bf4e:	4276      	negs	r6, r6
    bf50:	0030      	movs	r0, r6
    bf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf54:	0000f438 	.word	0x0000f438
    bf58:	0000f458 	.word	0x0000f458
    bf5c:	0000f418 	.word	0x0000f418

0000bf60 <__swsetup_r>:
    bf60:	4b36      	ldr	r3, [pc, #216]	; (c03c <__swsetup_r+0xdc>)
    bf62:	b570      	push	{r4, r5, r6, lr}
    bf64:	681d      	ldr	r5, [r3, #0]
    bf66:	0006      	movs	r6, r0
    bf68:	000c      	movs	r4, r1
    bf6a:	2d00      	cmp	r5, #0
    bf6c:	d005      	beq.n	bf7a <__swsetup_r+0x1a>
    bf6e:	69ab      	ldr	r3, [r5, #24]
    bf70:	2b00      	cmp	r3, #0
    bf72:	d102      	bne.n	bf7a <__swsetup_r+0x1a>
    bf74:	0028      	movs	r0, r5
    bf76:	f000 f961 	bl	c23c <__sinit>
    bf7a:	4b31      	ldr	r3, [pc, #196]	; (c040 <__swsetup_r+0xe0>)
    bf7c:	429c      	cmp	r4, r3
    bf7e:	d10f      	bne.n	bfa0 <__swsetup_r+0x40>
    bf80:	686c      	ldr	r4, [r5, #4]
    bf82:	230c      	movs	r3, #12
    bf84:	5ee2      	ldrsh	r2, [r4, r3]
    bf86:	b293      	uxth	r3, r2
    bf88:	0719      	lsls	r1, r3, #28
    bf8a:	d42d      	bmi.n	bfe8 <__swsetup_r+0x88>
    bf8c:	06d9      	lsls	r1, r3, #27
    bf8e:	d411      	bmi.n	bfb4 <__swsetup_r+0x54>
    bf90:	2309      	movs	r3, #9
    bf92:	2001      	movs	r0, #1
    bf94:	6033      	str	r3, [r6, #0]
    bf96:	3337      	adds	r3, #55	; 0x37
    bf98:	4313      	orrs	r3, r2
    bf9a:	81a3      	strh	r3, [r4, #12]
    bf9c:	4240      	negs	r0, r0
    bf9e:	bd70      	pop	{r4, r5, r6, pc}
    bfa0:	4b28      	ldr	r3, [pc, #160]	; (c044 <__swsetup_r+0xe4>)
    bfa2:	429c      	cmp	r4, r3
    bfa4:	d101      	bne.n	bfaa <__swsetup_r+0x4a>
    bfa6:	68ac      	ldr	r4, [r5, #8]
    bfa8:	e7eb      	b.n	bf82 <__swsetup_r+0x22>
    bfaa:	4b27      	ldr	r3, [pc, #156]	; (c048 <__swsetup_r+0xe8>)
    bfac:	429c      	cmp	r4, r3
    bfae:	d1e8      	bne.n	bf82 <__swsetup_r+0x22>
    bfb0:	68ec      	ldr	r4, [r5, #12]
    bfb2:	e7e6      	b.n	bf82 <__swsetup_r+0x22>
    bfb4:	075b      	lsls	r3, r3, #29
    bfb6:	d513      	bpl.n	bfe0 <__swsetup_r+0x80>
    bfb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    bfba:	2900      	cmp	r1, #0
    bfbc:	d008      	beq.n	bfd0 <__swsetup_r+0x70>
    bfbe:	0023      	movs	r3, r4
    bfc0:	3344      	adds	r3, #68	; 0x44
    bfc2:	4299      	cmp	r1, r3
    bfc4:	d002      	beq.n	bfcc <__swsetup_r+0x6c>
    bfc6:	0030      	movs	r0, r6
    bfc8:	f7ff fc4c 	bl	b864 <_free_r>
    bfcc:	2300      	movs	r3, #0
    bfce:	6363      	str	r3, [r4, #52]	; 0x34
    bfd0:	2224      	movs	r2, #36	; 0x24
    bfd2:	89a3      	ldrh	r3, [r4, #12]
    bfd4:	4393      	bics	r3, r2
    bfd6:	81a3      	strh	r3, [r4, #12]
    bfd8:	2300      	movs	r3, #0
    bfda:	6063      	str	r3, [r4, #4]
    bfdc:	6923      	ldr	r3, [r4, #16]
    bfde:	6023      	str	r3, [r4, #0]
    bfe0:	2308      	movs	r3, #8
    bfe2:	89a2      	ldrh	r2, [r4, #12]
    bfe4:	4313      	orrs	r3, r2
    bfe6:	81a3      	strh	r3, [r4, #12]
    bfe8:	6923      	ldr	r3, [r4, #16]
    bfea:	2b00      	cmp	r3, #0
    bfec:	d10b      	bne.n	c006 <__swsetup_r+0xa6>
    bfee:	21a0      	movs	r1, #160	; 0xa0
    bff0:	2280      	movs	r2, #128	; 0x80
    bff2:	89a3      	ldrh	r3, [r4, #12]
    bff4:	0089      	lsls	r1, r1, #2
    bff6:	0092      	lsls	r2, r2, #2
    bff8:	400b      	ands	r3, r1
    bffa:	4293      	cmp	r3, r2
    bffc:	d003      	beq.n	c006 <__swsetup_r+0xa6>
    bffe:	0021      	movs	r1, r4
    c000:	0030      	movs	r0, r6
    c002:	f000 f9db 	bl	c3bc <__smakebuf_r>
    c006:	2301      	movs	r3, #1
    c008:	89a2      	ldrh	r2, [r4, #12]
    c00a:	4013      	ands	r3, r2
    c00c:	d011      	beq.n	c032 <__swsetup_r+0xd2>
    c00e:	2300      	movs	r3, #0
    c010:	60a3      	str	r3, [r4, #8]
    c012:	6963      	ldr	r3, [r4, #20]
    c014:	425b      	negs	r3, r3
    c016:	61a3      	str	r3, [r4, #24]
    c018:	2000      	movs	r0, #0
    c01a:	6923      	ldr	r3, [r4, #16]
    c01c:	4283      	cmp	r3, r0
    c01e:	d1be      	bne.n	bf9e <__swsetup_r+0x3e>
    c020:	230c      	movs	r3, #12
    c022:	5ee2      	ldrsh	r2, [r4, r3]
    c024:	0613      	lsls	r3, r2, #24
    c026:	d5ba      	bpl.n	bf9e <__swsetup_r+0x3e>
    c028:	2340      	movs	r3, #64	; 0x40
    c02a:	4313      	orrs	r3, r2
    c02c:	81a3      	strh	r3, [r4, #12]
    c02e:	3801      	subs	r0, #1
    c030:	e7b5      	b.n	bf9e <__swsetup_r+0x3e>
    c032:	0792      	lsls	r2, r2, #30
    c034:	d400      	bmi.n	c038 <__swsetup_r+0xd8>
    c036:	6963      	ldr	r3, [r4, #20]
    c038:	60a3      	str	r3, [r4, #8]
    c03a:	e7ed      	b.n	c018 <__swsetup_r+0xb8>
    c03c:	2000012c 	.word	0x2000012c
    c040:	0000f438 	.word	0x0000f438
    c044:	0000f458 	.word	0x0000f458
    c048:	0000f418 	.word	0x0000f418

0000c04c <__sflush_r>:
    c04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c04e:	898a      	ldrh	r2, [r1, #12]
    c050:	0005      	movs	r5, r0
    c052:	000c      	movs	r4, r1
    c054:	0713      	lsls	r3, r2, #28
    c056:	d460      	bmi.n	c11a <__sflush_r+0xce>
    c058:	684b      	ldr	r3, [r1, #4]
    c05a:	2b00      	cmp	r3, #0
    c05c:	dc04      	bgt.n	c068 <__sflush_r+0x1c>
    c05e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c060:	2b00      	cmp	r3, #0
    c062:	dc01      	bgt.n	c068 <__sflush_r+0x1c>
    c064:	2000      	movs	r0, #0
    c066:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c068:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c06a:	2f00      	cmp	r7, #0
    c06c:	d0fa      	beq.n	c064 <__sflush_r+0x18>
    c06e:	2300      	movs	r3, #0
    c070:	682e      	ldr	r6, [r5, #0]
    c072:	602b      	str	r3, [r5, #0]
    c074:	2380      	movs	r3, #128	; 0x80
    c076:	015b      	lsls	r3, r3, #5
    c078:	401a      	ands	r2, r3
    c07a:	d034      	beq.n	c0e6 <__sflush_r+0x9a>
    c07c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c07e:	89a3      	ldrh	r3, [r4, #12]
    c080:	075b      	lsls	r3, r3, #29
    c082:	d506      	bpl.n	c092 <__sflush_r+0x46>
    c084:	6863      	ldr	r3, [r4, #4]
    c086:	1ac0      	subs	r0, r0, r3
    c088:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c08a:	2b00      	cmp	r3, #0
    c08c:	d001      	beq.n	c092 <__sflush_r+0x46>
    c08e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c090:	1ac0      	subs	r0, r0, r3
    c092:	0002      	movs	r2, r0
    c094:	6a21      	ldr	r1, [r4, #32]
    c096:	2300      	movs	r3, #0
    c098:	0028      	movs	r0, r5
    c09a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c09c:	47b8      	blx	r7
    c09e:	89a1      	ldrh	r1, [r4, #12]
    c0a0:	1c43      	adds	r3, r0, #1
    c0a2:	d106      	bne.n	c0b2 <__sflush_r+0x66>
    c0a4:	682b      	ldr	r3, [r5, #0]
    c0a6:	2b1d      	cmp	r3, #29
    c0a8:	d831      	bhi.n	c10e <__sflush_r+0xc2>
    c0aa:	4a2c      	ldr	r2, [pc, #176]	; (c15c <__sflush_r+0x110>)
    c0ac:	40da      	lsrs	r2, r3
    c0ae:	07d3      	lsls	r3, r2, #31
    c0b0:	d52d      	bpl.n	c10e <__sflush_r+0xc2>
    c0b2:	2300      	movs	r3, #0
    c0b4:	6063      	str	r3, [r4, #4]
    c0b6:	6923      	ldr	r3, [r4, #16]
    c0b8:	6023      	str	r3, [r4, #0]
    c0ba:	04cb      	lsls	r3, r1, #19
    c0bc:	d505      	bpl.n	c0ca <__sflush_r+0x7e>
    c0be:	1c43      	adds	r3, r0, #1
    c0c0:	d102      	bne.n	c0c8 <__sflush_r+0x7c>
    c0c2:	682b      	ldr	r3, [r5, #0]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d100      	bne.n	c0ca <__sflush_r+0x7e>
    c0c8:	6560      	str	r0, [r4, #84]	; 0x54
    c0ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c0cc:	602e      	str	r6, [r5, #0]
    c0ce:	2900      	cmp	r1, #0
    c0d0:	d0c8      	beq.n	c064 <__sflush_r+0x18>
    c0d2:	0023      	movs	r3, r4
    c0d4:	3344      	adds	r3, #68	; 0x44
    c0d6:	4299      	cmp	r1, r3
    c0d8:	d002      	beq.n	c0e0 <__sflush_r+0x94>
    c0da:	0028      	movs	r0, r5
    c0dc:	f7ff fbc2 	bl	b864 <_free_r>
    c0e0:	2000      	movs	r0, #0
    c0e2:	6360      	str	r0, [r4, #52]	; 0x34
    c0e4:	e7bf      	b.n	c066 <__sflush_r+0x1a>
    c0e6:	2301      	movs	r3, #1
    c0e8:	6a21      	ldr	r1, [r4, #32]
    c0ea:	0028      	movs	r0, r5
    c0ec:	47b8      	blx	r7
    c0ee:	1c43      	adds	r3, r0, #1
    c0f0:	d1c5      	bne.n	c07e <__sflush_r+0x32>
    c0f2:	682b      	ldr	r3, [r5, #0]
    c0f4:	2b00      	cmp	r3, #0
    c0f6:	d0c2      	beq.n	c07e <__sflush_r+0x32>
    c0f8:	2b1d      	cmp	r3, #29
    c0fa:	d001      	beq.n	c100 <__sflush_r+0xb4>
    c0fc:	2b16      	cmp	r3, #22
    c0fe:	d101      	bne.n	c104 <__sflush_r+0xb8>
    c100:	602e      	str	r6, [r5, #0]
    c102:	e7af      	b.n	c064 <__sflush_r+0x18>
    c104:	2340      	movs	r3, #64	; 0x40
    c106:	89a2      	ldrh	r2, [r4, #12]
    c108:	4313      	orrs	r3, r2
    c10a:	81a3      	strh	r3, [r4, #12]
    c10c:	e7ab      	b.n	c066 <__sflush_r+0x1a>
    c10e:	2340      	movs	r3, #64	; 0x40
    c110:	430b      	orrs	r3, r1
    c112:	2001      	movs	r0, #1
    c114:	81a3      	strh	r3, [r4, #12]
    c116:	4240      	negs	r0, r0
    c118:	e7a5      	b.n	c066 <__sflush_r+0x1a>
    c11a:	690f      	ldr	r7, [r1, #16]
    c11c:	2f00      	cmp	r7, #0
    c11e:	d0a1      	beq.n	c064 <__sflush_r+0x18>
    c120:	680b      	ldr	r3, [r1, #0]
    c122:	600f      	str	r7, [r1, #0]
    c124:	1bdb      	subs	r3, r3, r7
    c126:	9301      	str	r3, [sp, #4]
    c128:	2300      	movs	r3, #0
    c12a:	0792      	lsls	r2, r2, #30
    c12c:	d100      	bne.n	c130 <__sflush_r+0xe4>
    c12e:	694b      	ldr	r3, [r1, #20]
    c130:	60a3      	str	r3, [r4, #8]
    c132:	9b01      	ldr	r3, [sp, #4]
    c134:	2b00      	cmp	r3, #0
    c136:	dc00      	bgt.n	c13a <__sflush_r+0xee>
    c138:	e794      	b.n	c064 <__sflush_r+0x18>
    c13a:	9b01      	ldr	r3, [sp, #4]
    c13c:	003a      	movs	r2, r7
    c13e:	6a21      	ldr	r1, [r4, #32]
    c140:	0028      	movs	r0, r5
    c142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c144:	47b0      	blx	r6
    c146:	2800      	cmp	r0, #0
    c148:	dc03      	bgt.n	c152 <__sflush_r+0x106>
    c14a:	2340      	movs	r3, #64	; 0x40
    c14c:	89a2      	ldrh	r2, [r4, #12]
    c14e:	4313      	orrs	r3, r2
    c150:	e7df      	b.n	c112 <__sflush_r+0xc6>
    c152:	9b01      	ldr	r3, [sp, #4]
    c154:	183f      	adds	r7, r7, r0
    c156:	1a1b      	subs	r3, r3, r0
    c158:	9301      	str	r3, [sp, #4]
    c15a:	e7ea      	b.n	c132 <__sflush_r+0xe6>
    c15c:	20400001 	.word	0x20400001

0000c160 <_fflush_r>:
    c160:	690b      	ldr	r3, [r1, #16]
    c162:	b570      	push	{r4, r5, r6, lr}
    c164:	0005      	movs	r5, r0
    c166:	000c      	movs	r4, r1
    c168:	2b00      	cmp	r3, #0
    c16a:	d101      	bne.n	c170 <_fflush_r+0x10>
    c16c:	2000      	movs	r0, #0
    c16e:	bd70      	pop	{r4, r5, r6, pc}
    c170:	2800      	cmp	r0, #0
    c172:	d004      	beq.n	c17e <_fflush_r+0x1e>
    c174:	6983      	ldr	r3, [r0, #24]
    c176:	2b00      	cmp	r3, #0
    c178:	d101      	bne.n	c17e <_fflush_r+0x1e>
    c17a:	f000 f85f 	bl	c23c <__sinit>
    c17e:	4b0b      	ldr	r3, [pc, #44]	; (c1ac <_fflush_r+0x4c>)
    c180:	429c      	cmp	r4, r3
    c182:	d109      	bne.n	c198 <_fflush_r+0x38>
    c184:	686c      	ldr	r4, [r5, #4]
    c186:	220c      	movs	r2, #12
    c188:	5ea3      	ldrsh	r3, [r4, r2]
    c18a:	2b00      	cmp	r3, #0
    c18c:	d0ee      	beq.n	c16c <_fflush_r+0xc>
    c18e:	0021      	movs	r1, r4
    c190:	0028      	movs	r0, r5
    c192:	f7ff ff5b 	bl	c04c <__sflush_r>
    c196:	e7ea      	b.n	c16e <_fflush_r+0xe>
    c198:	4b05      	ldr	r3, [pc, #20]	; (c1b0 <_fflush_r+0x50>)
    c19a:	429c      	cmp	r4, r3
    c19c:	d101      	bne.n	c1a2 <_fflush_r+0x42>
    c19e:	68ac      	ldr	r4, [r5, #8]
    c1a0:	e7f1      	b.n	c186 <_fflush_r+0x26>
    c1a2:	4b04      	ldr	r3, [pc, #16]	; (c1b4 <_fflush_r+0x54>)
    c1a4:	429c      	cmp	r4, r3
    c1a6:	d1ee      	bne.n	c186 <_fflush_r+0x26>
    c1a8:	68ec      	ldr	r4, [r5, #12]
    c1aa:	e7ec      	b.n	c186 <_fflush_r+0x26>
    c1ac:	0000f438 	.word	0x0000f438
    c1b0:	0000f458 	.word	0x0000f458
    c1b4:	0000f418 	.word	0x0000f418

0000c1b8 <_cleanup_r>:
    c1b8:	b510      	push	{r4, lr}
    c1ba:	4902      	ldr	r1, [pc, #8]	; (c1c4 <_cleanup_r+0xc>)
    c1bc:	f000 f8b2 	bl	c324 <_fwalk_reent>
    c1c0:	bd10      	pop	{r4, pc}
    c1c2:	46c0      	nop			; (mov r8, r8)
    c1c4:	0000c161 	.word	0x0000c161

0000c1c8 <std.isra.0>:
    c1c8:	2300      	movs	r3, #0
    c1ca:	b510      	push	{r4, lr}
    c1cc:	0004      	movs	r4, r0
    c1ce:	6003      	str	r3, [r0, #0]
    c1d0:	6043      	str	r3, [r0, #4]
    c1d2:	6083      	str	r3, [r0, #8]
    c1d4:	8181      	strh	r1, [r0, #12]
    c1d6:	6643      	str	r3, [r0, #100]	; 0x64
    c1d8:	81c2      	strh	r2, [r0, #14]
    c1da:	6103      	str	r3, [r0, #16]
    c1dc:	6143      	str	r3, [r0, #20]
    c1de:	6183      	str	r3, [r0, #24]
    c1e0:	0019      	movs	r1, r3
    c1e2:	2208      	movs	r2, #8
    c1e4:	305c      	adds	r0, #92	; 0x5c
    c1e6:	f7ff fb34 	bl	b852 <memset>
    c1ea:	4b05      	ldr	r3, [pc, #20]	; (c200 <std.isra.0+0x38>)
    c1ec:	6224      	str	r4, [r4, #32]
    c1ee:	6263      	str	r3, [r4, #36]	; 0x24
    c1f0:	4b04      	ldr	r3, [pc, #16]	; (c204 <std.isra.0+0x3c>)
    c1f2:	62a3      	str	r3, [r4, #40]	; 0x28
    c1f4:	4b04      	ldr	r3, [pc, #16]	; (c208 <std.isra.0+0x40>)
    c1f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    c1f8:	4b04      	ldr	r3, [pc, #16]	; (c20c <std.isra.0+0x44>)
    c1fa:	6323      	str	r3, [r4, #48]	; 0x30
    c1fc:	bd10      	pop	{r4, pc}
    c1fe:	46c0      	nop			; (mov r8, r8)
    c200:	0000cd3d 	.word	0x0000cd3d
    c204:	0000cd65 	.word	0x0000cd65
    c208:	0000cd9d 	.word	0x0000cd9d
    c20c:	0000cdc9 	.word	0x0000cdc9

0000c210 <__sfmoreglue>:
    c210:	b570      	push	{r4, r5, r6, lr}
    c212:	2568      	movs	r5, #104	; 0x68
    c214:	1e4a      	subs	r2, r1, #1
    c216:	4355      	muls	r5, r2
    c218:	000e      	movs	r6, r1
    c21a:	0029      	movs	r1, r5
    c21c:	3174      	adds	r1, #116	; 0x74
    c21e:	f7ff fb6b 	bl	b8f8 <_malloc_r>
    c222:	1e04      	subs	r4, r0, #0
    c224:	d008      	beq.n	c238 <__sfmoreglue+0x28>
    c226:	2100      	movs	r1, #0
    c228:	002a      	movs	r2, r5
    c22a:	6001      	str	r1, [r0, #0]
    c22c:	6046      	str	r6, [r0, #4]
    c22e:	300c      	adds	r0, #12
    c230:	60a0      	str	r0, [r4, #8]
    c232:	3268      	adds	r2, #104	; 0x68
    c234:	f7ff fb0d 	bl	b852 <memset>
    c238:	0020      	movs	r0, r4
    c23a:	bd70      	pop	{r4, r5, r6, pc}

0000c23c <__sinit>:
    c23c:	6983      	ldr	r3, [r0, #24]
    c23e:	b513      	push	{r0, r1, r4, lr}
    c240:	0004      	movs	r4, r0
    c242:	2b00      	cmp	r3, #0
    c244:	d128      	bne.n	c298 <__sinit+0x5c>
    c246:	6483      	str	r3, [r0, #72]	; 0x48
    c248:	64c3      	str	r3, [r0, #76]	; 0x4c
    c24a:	6503      	str	r3, [r0, #80]	; 0x50
    c24c:	4b13      	ldr	r3, [pc, #76]	; (c29c <__sinit+0x60>)
    c24e:	4a14      	ldr	r2, [pc, #80]	; (c2a0 <__sinit+0x64>)
    c250:	681b      	ldr	r3, [r3, #0]
    c252:	6282      	str	r2, [r0, #40]	; 0x28
    c254:	9301      	str	r3, [sp, #4]
    c256:	4298      	cmp	r0, r3
    c258:	d101      	bne.n	c25e <__sinit+0x22>
    c25a:	2301      	movs	r3, #1
    c25c:	6183      	str	r3, [r0, #24]
    c25e:	0020      	movs	r0, r4
    c260:	f000 f820 	bl	c2a4 <__sfp>
    c264:	6060      	str	r0, [r4, #4]
    c266:	0020      	movs	r0, r4
    c268:	f000 f81c 	bl	c2a4 <__sfp>
    c26c:	60a0      	str	r0, [r4, #8]
    c26e:	0020      	movs	r0, r4
    c270:	f000 f818 	bl	c2a4 <__sfp>
    c274:	2200      	movs	r2, #0
    c276:	60e0      	str	r0, [r4, #12]
    c278:	2104      	movs	r1, #4
    c27a:	6860      	ldr	r0, [r4, #4]
    c27c:	f7ff ffa4 	bl	c1c8 <std.isra.0>
    c280:	2201      	movs	r2, #1
    c282:	2109      	movs	r1, #9
    c284:	68a0      	ldr	r0, [r4, #8]
    c286:	f7ff ff9f 	bl	c1c8 <std.isra.0>
    c28a:	2202      	movs	r2, #2
    c28c:	2112      	movs	r1, #18
    c28e:	68e0      	ldr	r0, [r4, #12]
    c290:	f7ff ff9a 	bl	c1c8 <std.isra.0>
    c294:	2301      	movs	r3, #1
    c296:	61a3      	str	r3, [r4, #24]
    c298:	bd13      	pop	{r0, r1, r4, pc}
    c29a:	46c0      	nop			; (mov r8, r8)
    c29c:	0000f414 	.word	0x0000f414
    c2a0:	0000c1b9 	.word	0x0000c1b9

0000c2a4 <__sfp>:
    c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2a6:	4b1e      	ldr	r3, [pc, #120]	; (c320 <__sfp+0x7c>)
    c2a8:	0007      	movs	r7, r0
    c2aa:	681e      	ldr	r6, [r3, #0]
    c2ac:	69b3      	ldr	r3, [r6, #24]
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d102      	bne.n	c2b8 <__sfp+0x14>
    c2b2:	0030      	movs	r0, r6
    c2b4:	f7ff ffc2 	bl	c23c <__sinit>
    c2b8:	3648      	adds	r6, #72	; 0x48
    c2ba:	68b4      	ldr	r4, [r6, #8]
    c2bc:	6873      	ldr	r3, [r6, #4]
    c2be:	3b01      	subs	r3, #1
    c2c0:	d504      	bpl.n	c2cc <__sfp+0x28>
    c2c2:	6833      	ldr	r3, [r6, #0]
    c2c4:	2b00      	cmp	r3, #0
    c2c6:	d007      	beq.n	c2d8 <__sfp+0x34>
    c2c8:	6836      	ldr	r6, [r6, #0]
    c2ca:	e7f6      	b.n	c2ba <__sfp+0x16>
    c2cc:	220c      	movs	r2, #12
    c2ce:	5ea5      	ldrsh	r5, [r4, r2]
    c2d0:	2d00      	cmp	r5, #0
    c2d2:	d00d      	beq.n	c2f0 <__sfp+0x4c>
    c2d4:	3468      	adds	r4, #104	; 0x68
    c2d6:	e7f2      	b.n	c2be <__sfp+0x1a>
    c2d8:	2104      	movs	r1, #4
    c2da:	0038      	movs	r0, r7
    c2dc:	f7ff ff98 	bl	c210 <__sfmoreglue>
    c2e0:	6030      	str	r0, [r6, #0]
    c2e2:	2800      	cmp	r0, #0
    c2e4:	d1f0      	bne.n	c2c8 <__sfp+0x24>
    c2e6:	230c      	movs	r3, #12
    c2e8:	0004      	movs	r4, r0
    c2ea:	603b      	str	r3, [r7, #0]
    c2ec:	0020      	movs	r0, r4
    c2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2f0:	2301      	movs	r3, #1
    c2f2:	0020      	movs	r0, r4
    c2f4:	425b      	negs	r3, r3
    c2f6:	81e3      	strh	r3, [r4, #14]
    c2f8:	3302      	adds	r3, #2
    c2fa:	81a3      	strh	r3, [r4, #12]
    c2fc:	6665      	str	r5, [r4, #100]	; 0x64
    c2fe:	6025      	str	r5, [r4, #0]
    c300:	60a5      	str	r5, [r4, #8]
    c302:	6065      	str	r5, [r4, #4]
    c304:	6125      	str	r5, [r4, #16]
    c306:	6165      	str	r5, [r4, #20]
    c308:	61a5      	str	r5, [r4, #24]
    c30a:	2208      	movs	r2, #8
    c30c:	0029      	movs	r1, r5
    c30e:	305c      	adds	r0, #92	; 0x5c
    c310:	f7ff fa9f 	bl	b852 <memset>
    c314:	6365      	str	r5, [r4, #52]	; 0x34
    c316:	63a5      	str	r5, [r4, #56]	; 0x38
    c318:	64a5      	str	r5, [r4, #72]	; 0x48
    c31a:	64e5      	str	r5, [r4, #76]	; 0x4c
    c31c:	e7e6      	b.n	c2ec <__sfp+0x48>
    c31e:	46c0      	nop			; (mov r8, r8)
    c320:	0000f414 	.word	0x0000f414

0000c324 <_fwalk_reent>:
    c324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c326:	0004      	movs	r4, r0
    c328:	0007      	movs	r7, r0
    c32a:	2600      	movs	r6, #0
    c32c:	9101      	str	r1, [sp, #4]
    c32e:	3448      	adds	r4, #72	; 0x48
    c330:	2c00      	cmp	r4, #0
    c332:	d101      	bne.n	c338 <_fwalk_reent+0x14>
    c334:	0030      	movs	r0, r6
    c336:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c338:	6863      	ldr	r3, [r4, #4]
    c33a:	68a5      	ldr	r5, [r4, #8]
    c33c:	9300      	str	r3, [sp, #0]
    c33e:	9b00      	ldr	r3, [sp, #0]
    c340:	3b01      	subs	r3, #1
    c342:	9300      	str	r3, [sp, #0]
    c344:	d501      	bpl.n	c34a <_fwalk_reent+0x26>
    c346:	6824      	ldr	r4, [r4, #0]
    c348:	e7f2      	b.n	c330 <_fwalk_reent+0xc>
    c34a:	89ab      	ldrh	r3, [r5, #12]
    c34c:	2b01      	cmp	r3, #1
    c34e:	d908      	bls.n	c362 <_fwalk_reent+0x3e>
    c350:	220e      	movs	r2, #14
    c352:	5eab      	ldrsh	r3, [r5, r2]
    c354:	3301      	adds	r3, #1
    c356:	d004      	beq.n	c362 <_fwalk_reent+0x3e>
    c358:	0029      	movs	r1, r5
    c35a:	0038      	movs	r0, r7
    c35c:	9b01      	ldr	r3, [sp, #4]
    c35e:	4798      	blx	r3
    c360:	4306      	orrs	r6, r0
    c362:	3568      	adds	r5, #104	; 0x68
    c364:	e7eb      	b.n	c33e <_fwalk_reent+0x1a>

0000c366 <__locale_ctype_ptr_l>:
    c366:	30ec      	adds	r0, #236	; 0xec
    c368:	6800      	ldr	r0, [r0, #0]
    c36a:	4770      	bx	lr

0000c36c <__swhatbuf_r>:
    c36c:	b570      	push	{r4, r5, r6, lr}
    c36e:	000e      	movs	r6, r1
    c370:	001d      	movs	r5, r3
    c372:	230e      	movs	r3, #14
    c374:	5ec9      	ldrsh	r1, [r1, r3]
    c376:	b090      	sub	sp, #64	; 0x40
    c378:	0014      	movs	r4, r2
    c37a:	2900      	cmp	r1, #0
    c37c:	da07      	bge.n	c38e <__swhatbuf_r+0x22>
    c37e:	2300      	movs	r3, #0
    c380:	602b      	str	r3, [r5, #0]
    c382:	89b3      	ldrh	r3, [r6, #12]
    c384:	061b      	lsls	r3, r3, #24
    c386:	d411      	bmi.n	c3ac <__swhatbuf_r+0x40>
    c388:	2380      	movs	r3, #128	; 0x80
    c38a:	00db      	lsls	r3, r3, #3
    c38c:	e00f      	b.n	c3ae <__swhatbuf_r+0x42>
    c38e:	aa01      	add	r2, sp, #4
    c390:	f000 fd60 	bl	ce54 <_fstat_r>
    c394:	2800      	cmp	r0, #0
    c396:	dbf2      	blt.n	c37e <__swhatbuf_r+0x12>
    c398:	22f0      	movs	r2, #240	; 0xf0
    c39a:	9b02      	ldr	r3, [sp, #8]
    c39c:	0212      	lsls	r2, r2, #8
    c39e:	4013      	ands	r3, r2
    c3a0:	4a05      	ldr	r2, [pc, #20]	; (c3b8 <__swhatbuf_r+0x4c>)
    c3a2:	189b      	adds	r3, r3, r2
    c3a4:	425a      	negs	r2, r3
    c3a6:	4153      	adcs	r3, r2
    c3a8:	602b      	str	r3, [r5, #0]
    c3aa:	e7ed      	b.n	c388 <__swhatbuf_r+0x1c>
    c3ac:	2340      	movs	r3, #64	; 0x40
    c3ae:	2000      	movs	r0, #0
    c3b0:	6023      	str	r3, [r4, #0]
    c3b2:	b010      	add	sp, #64	; 0x40
    c3b4:	bd70      	pop	{r4, r5, r6, pc}
    c3b6:	46c0      	nop			; (mov r8, r8)
    c3b8:	ffffe000 	.word	0xffffe000

0000c3bc <__smakebuf_r>:
    c3bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c3be:	2602      	movs	r6, #2
    c3c0:	898b      	ldrh	r3, [r1, #12]
    c3c2:	0005      	movs	r5, r0
    c3c4:	000c      	movs	r4, r1
    c3c6:	4233      	tst	r3, r6
    c3c8:	d006      	beq.n	c3d8 <__smakebuf_r+0x1c>
    c3ca:	0023      	movs	r3, r4
    c3cc:	3347      	adds	r3, #71	; 0x47
    c3ce:	6023      	str	r3, [r4, #0]
    c3d0:	6123      	str	r3, [r4, #16]
    c3d2:	2301      	movs	r3, #1
    c3d4:	6163      	str	r3, [r4, #20]
    c3d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c3d8:	ab01      	add	r3, sp, #4
    c3da:	466a      	mov	r2, sp
    c3dc:	f7ff ffc6 	bl	c36c <__swhatbuf_r>
    c3e0:	9900      	ldr	r1, [sp, #0]
    c3e2:	0007      	movs	r7, r0
    c3e4:	0028      	movs	r0, r5
    c3e6:	f7ff fa87 	bl	b8f8 <_malloc_r>
    c3ea:	2800      	cmp	r0, #0
    c3ec:	d108      	bne.n	c400 <__smakebuf_r+0x44>
    c3ee:	220c      	movs	r2, #12
    c3f0:	5ea3      	ldrsh	r3, [r4, r2]
    c3f2:	059a      	lsls	r2, r3, #22
    c3f4:	d4ef      	bmi.n	c3d6 <__smakebuf_r+0x1a>
    c3f6:	2203      	movs	r2, #3
    c3f8:	4393      	bics	r3, r2
    c3fa:	431e      	orrs	r6, r3
    c3fc:	81a6      	strh	r6, [r4, #12]
    c3fe:	e7e4      	b.n	c3ca <__smakebuf_r+0xe>
    c400:	4b0f      	ldr	r3, [pc, #60]	; (c440 <__smakebuf_r+0x84>)
    c402:	62ab      	str	r3, [r5, #40]	; 0x28
    c404:	2380      	movs	r3, #128	; 0x80
    c406:	89a2      	ldrh	r2, [r4, #12]
    c408:	6020      	str	r0, [r4, #0]
    c40a:	4313      	orrs	r3, r2
    c40c:	81a3      	strh	r3, [r4, #12]
    c40e:	9b00      	ldr	r3, [sp, #0]
    c410:	6120      	str	r0, [r4, #16]
    c412:	6163      	str	r3, [r4, #20]
    c414:	9b01      	ldr	r3, [sp, #4]
    c416:	2b00      	cmp	r3, #0
    c418:	d00d      	beq.n	c436 <__smakebuf_r+0x7a>
    c41a:	230e      	movs	r3, #14
    c41c:	5ee1      	ldrsh	r1, [r4, r3]
    c41e:	0028      	movs	r0, r5
    c420:	f000 fd2a 	bl	ce78 <_isatty_r>
    c424:	2800      	cmp	r0, #0
    c426:	d006      	beq.n	c436 <__smakebuf_r+0x7a>
    c428:	2203      	movs	r2, #3
    c42a:	89a3      	ldrh	r3, [r4, #12]
    c42c:	4393      	bics	r3, r2
    c42e:	001a      	movs	r2, r3
    c430:	2301      	movs	r3, #1
    c432:	4313      	orrs	r3, r2
    c434:	81a3      	strh	r3, [r4, #12]
    c436:	89a0      	ldrh	r0, [r4, #12]
    c438:	4338      	orrs	r0, r7
    c43a:	81a0      	strh	r0, [r4, #12]
    c43c:	e7cb      	b.n	c3d6 <__smakebuf_r+0x1a>
    c43e:	46c0      	nop			; (mov r8, r8)
    c440:	0000c1b9 	.word	0x0000c1b9

0000c444 <__ascii_mbtowc>:
    c444:	b082      	sub	sp, #8
    c446:	2900      	cmp	r1, #0
    c448:	d100      	bne.n	c44c <__ascii_mbtowc+0x8>
    c44a:	a901      	add	r1, sp, #4
    c44c:	1e10      	subs	r0, r2, #0
    c44e:	d006      	beq.n	c45e <__ascii_mbtowc+0x1a>
    c450:	2b00      	cmp	r3, #0
    c452:	d006      	beq.n	c462 <__ascii_mbtowc+0x1e>
    c454:	7813      	ldrb	r3, [r2, #0]
    c456:	600b      	str	r3, [r1, #0]
    c458:	7810      	ldrb	r0, [r2, #0]
    c45a:	1e43      	subs	r3, r0, #1
    c45c:	4198      	sbcs	r0, r3
    c45e:	b002      	add	sp, #8
    c460:	4770      	bx	lr
    c462:	2002      	movs	r0, #2
    c464:	4240      	negs	r0, r0
    c466:	e7fa      	b.n	c45e <__ascii_mbtowc+0x1a>

0000c468 <__malloc_lock>:
    c468:	4770      	bx	lr

0000c46a <__malloc_unlock>:
    c46a:	4770      	bx	lr

0000c46c <__ssputs_r>:
    c46c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c46e:	688e      	ldr	r6, [r1, #8]
    c470:	b085      	sub	sp, #20
    c472:	0007      	movs	r7, r0
    c474:	000c      	movs	r4, r1
    c476:	9203      	str	r2, [sp, #12]
    c478:	9301      	str	r3, [sp, #4]
    c47a:	429e      	cmp	r6, r3
    c47c:	d839      	bhi.n	c4f2 <__ssputs_r+0x86>
    c47e:	2390      	movs	r3, #144	; 0x90
    c480:	898a      	ldrh	r2, [r1, #12]
    c482:	00db      	lsls	r3, r3, #3
    c484:	421a      	tst	r2, r3
    c486:	d034      	beq.n	c4f2 <__ssputs_r+0x86>
    c488:	2503      	movs	r5, #3
    c48a:	6909      	ldr	r1, [r1, #16]
    c48c:	6823      	ldr	r3, [r4, #0]
    c48e:	1a5b      	subs	r3, r3, r1
    c490:	9302      	str	r3, [sp, #8]
    c492:	6963      	ldr	r3, [r4, #20]
    c494:	9802      	ldr	r0, [sp, #8]
    c496:	435d      	muls	r5, r3
    c498:	0feb      	lsrs	r3, r5, #31
    c49a:	195d      	adds	r5, r3, r5
    c49c:	9b01      	ldr	r3, [sp, #4]
    c49e:	106d      	asrs	r5, r5, #1
    c4a0:	3301      	adds	r3, #1
    c4a2:	181b      	adds	r3, r3, r0
    c4a4:	42ab      	cmp	r3, r5
    c4a6:	d900      	bls.n	c4aa <__ssputs_r+0x3e>
    c4a8:	001d      	movs	r5, r3
    c4aa:	0553      	lsls	r3, r2, #21
    c4ac:	d532      	bpl.n	c514 <__ssputs_r+0xa8>
    c4ae:	0029      	movs	r1, r5
    c4b0:	0038      	movs	r0, r7
    c4b2:	f7ff fa21 	bl	b8f8 <_malloc_r>
    c4b6:	1e06      	subs	r6, r0, #0
    c4b8:	d109      	bne.n	c4ce <__ssputs_r+0x62>
    c4ba:	230c      	movs	r3, #12
    c4bc:	603b      	str	r3, [r7, #0]
    c4be:	2340      	movs	r3, #64	; 0x40
    c4c0:	2001      	movs	r0, #1
    c4c2:	89a2      	ldrh	r2, [r4, #12]
    c4c4:	4240      	negs	r0, r0
    c4c6:	4313      	orrs	r3, r2
    c4c8:	81a3      	strh	r3, [r4, #12]
    c4ca:	b005      	add	sp, #20
    c4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c4ce:	9a02      	ldr	r2, [sp, #8]
    c4d0:	6921      	ldr	r1, [r4, #16]
    c4d2:	f7ff f9a3 	bl	b81c <memcpy>
    c4d6:	89a3      	ldrh	r3, [r4, #12]
    c4d8:	4a14      	ldr	r2, [pc, #80]	; (c52c <__ssputs_r+0xc0>)
    c4da:	401a      	ands	r2, r3
    c4dc:	2380      	movs	r3, #128	; 0x80
    c4de:	4313      	orrs	r3, r2
    c4e0:	81a3      	strh	r3, [r4, #12]
    c4e2:	9b02      	ldr	r3, [sp, #8]
    c4e4:	6126      	str	r6, [r4, #16]
    c4e6:	18f6      	adds	r6, r6, r3
    c4e8:	6026      	str	r6, [r4, #0]
    c4ea:	6165      	str	r5, [r4, #20]
    c4ec:	9e01      	ldr	r6, [sp, #4]
    c4ee:	1aed      	subs	r5, r5, r3
    c4f0:	60a5      	str	r5, [r4, #8]
    c4f2:	9b01      	ldr	r3, [sp, #4]
    c4f4:	42b3      	cmp	r3, r6
    c4f6:	d200      	bcs.n	c4fa <__ssputs_r+0x8e>
    c4f8:	001e      	movs	r6, r3
    c4fa:	0032      	movs	r2, r6
    c4fc:	9903      	ldr	r1, [sp, #12]
    c4fe:	6820      	ldr	r0, [r4, #0]
    c500:	f7ff f995 	bl	b82e <memmove>
    c504:	68a3      	ldr	r3, [r4, #8]
    c506:	2000      	movs	r0, #0
    c508:	1b9b      	subs	r3, r3, r6
    c50a:	60a3      	str	r3, [r4, #8]
    c50c:	6823      	ldr	r3, [r4, #0]
    c50e:	199e      	adds	r6, r3, r6
    c510:	6026      	str	r6, [r4, #0]
    c512:	e7da      	b.n	c4ca <__ssputs_r+0x5e>
    c514:	002a      	movs	r2, r5
    c516:	0038      	movs	r0, r7
    c518:	f000 fcdf 	bl	ceda <_realloc_r>
    c51c:	1e06      	subs	r6, r0, #0
    c51e:	d1e0      	bne.n	c4e2 <__ssputs_r+0x76>
    c520:	6921      	ldr	r1, [r4, #16]
    c522:	0038      	movs	r0, r7
    c524:	f7ff f99e 	bl	b864 <_free_r>
    c528:	e7c7      	b.n	c4ba <__ssputs_r+0x4e>
    c52a:	46c0      	nop			; (mov r8, r8)
    c52c:	fffffb7f 	.word	0xfffffb7f

0000c530 <_svfiprintf_r>:
    c530:	b5f0      	push	{r4, r5, r6, r7, lr}
    c532:	b09f      	sub	sp, #124	; 0x7c
    c534:	9002      	str	r0, [sp, #8]
    c536:	9305      	str	r3, [sp, #20]
    c538:	898b      	ldrh	r3, [r1, #12]
    c53a:	000f      	movs	r7, r1
    c53c:	0016      	movs	r6, r2
    c53e:	061b      	lsls	r3, r3, #24
    c540:	d511      	bpl.n	c566 <_svfiprintf_r+0x36>
    c542:	690b      	ldr	r3, [r1, #16]
    c544:	2b00      	cmp	r3, #0
    c546:	d10e      	bne.n	c566 <_svfiprintf_r+0x36>
    c548:	2140      	movs	r1, #64	; 0x40
    c54a:	f7ff f9d5 	bl	b8f8 <_malloc_r>
    c54e:	6038      	str	r0, [r7, #0]
    c550:	6138      	str	r0, [r7, #16]
    c552:	2800      	cmp	r0, #0
    c554:	d105      	bne.n	c562 <_svfiprintf_r+0x32>
    c556:	230c      	movs	r3, #12
    c558:	9a02      	ldr	r2, [sp, #8]
    c55a:	3801      	subs	r0, #1
    c55c:	6013      	str	r3, [r2, #0]
    c55e:	b01f      	add	sp, #124	; 0x7c
    c560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c562:	2340      	movs	r3, #64	; 0x40
    c564:	617b      	str	r3, [r7, #20]
    c566:	2300      	movs	r3, #0
    c568:	ad06      	add	r5, sp, #24
    c56a:	616b      	str	r3, [r5, #20]
    c56c:	3320      	adds	r3, #32
    c56e:	766b      	strb	r3, [r5, #25]
    c570:	3310      	adds	r3, #16
    c572:	76ab      	strb	r3, [r5, #26]
    c574:	0034      	movs	r4, r6
    c576:	7823      	ldrb	r3, [r4, #0]
    c578:	2b00      	cmp	r3, #0
    c57a:	d147      	bne.n	c60c <_svfiprintf_r+0xdc>
    c57c:	1ba3      	subs	r3, r4, r6
    c57e:	9304      	str	r3, [sp, #16]
    c580:	d00d      	beq.n	c59e <_svfiprintf_r+0x6e>
    c582:	1ba3      	subs	r3, r4, r6
    c584:	0032      	movs	r2, r6
    c586:	0039      	movs	r1, r7
    c588:	9802      	ldr	r0, [sp, #8]
    c58a:	f7ff ff6f 	bl	c46c <__ssputs_r>
    c58e:	1c43      	adds	r3, r0, #1
    c590:	d100      	bne.n	c594 <_svfiprintf_r+0x64>
    c592:	e0b5      	b.n	c700 <_svfiprintf_r+0x1d0>
    c594:	696a      	ldr	r2, [r5, #20]
    c596:	9b04      	ldr	r3, [sp, #16]
    c598:	4694      	mov	ip, r2
    c59a:	4463      	add	r3, ip
    c59c:	616b      	str	r3, [r5, #20]
    c59e:	7823      	ldrb	r3, [r4, #0]
    c5a0:	2b00      	cmp	r3, #0
    c5a2:	d100      	bne.n	c5a6 <_svfiprintf_r+0x76>
    c5a4:	e0ac      	b.n	c700 <_svfiprintf_r+0x1d0>
    c5a6:	2201      	movs	r2, #1
    c5a8:	2300      	movs	r3, #0
    c5aa:	4252      	negs	r2, r2
    c5ac:	606a      	str	r2, [r5, #4]
    c5ae:	a902      	add	r1, sp, #8
    c5b0:	3254      	adds	r2, #84	; 0x54
    c5b2:	1852      	adds	r2, r2, r1
    c5b4:	3401      	adds	r4, #1
    c5b6:	602b      	str	r3, [r5, #0]
    c5b8:	60eb      	str	r3, [r5, #12]
    c5ba:	60ab      	str	r3, [r5, #8]
    c5bc:	7013      	strb	r3, [r2, #0]
    c5be:	65ab      	str	r3, [r5, #88]	; 0x58
    c5c0:	4e58      	ldr	r6, [pc, #352]	; (c724 <_svfiprintf_r+0x1f4>)
    c5c2:	2205      	movs	r2, #5
    c5c4:	7821      	ldrb	r1, [r4, #0]
    c5c6:	0030      	movs	r0, r6
    c5c8:	f000 fc7c 	bl	cec4 <memchr>
    c5cc:	1c62      	adds	r2, r4, #1
    c5ce:	2800      	cmp	r0, #0
    c5d0:	d120      	bne.n	c614 <_svfiprintf_r+0xe4>
    c5d2:	6829      	ldr	r1, [r5, #0]
    c5d4:	06cb      	lsls	r3, r1, #27
    c5d6:	d504      	bpl.n	c5e2 <_svfiprintf_r+0xb2>
    c5d8:	2353      	movs	r3, #83	; 0x53
    c5da:	ae02      	add	r6, sp, #8
    c5dc:	3020      	adds	r0, #32
    c5de:	199b      	adds	r3, r3, r6
    c5e0:	7018      	strb	r0, [r3, #0]
    c5e2:	070b      	lsls	r3, r1, #28
    c5e4:	d504      	bpl.n	c5f0 <_svfiprintf_r+0xc0>
    c5e6:	2353      	movs	r3, #83	; 0x53
    c5e8:	202b      	movs	r0, #43	; 0x2b
    c5ea:	ae02      	add	r6, sp, #8
    c5ec:	199b      	adds	r3, r3, r6
    c5ee:	7018      	strb	r0, [r3, #0]
    c5f0:	7823      	ldrb	r3, [r4, #0]
    c5f2:	2b2a      	cmp	r3, #42	; 0x2a
    c5f4:	d016      	beq.n	c624 <_svfiprintf_r+0xf4>
    c5f6:	2000      	movs	r0, #0
    c5f8:	210a      	movs	r1, #10
    c5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c5fc:	7822      	ldrb	r2, [r4, #0]
    c5fe:	3a30      	subs	r2, #48	; 0x30
    c600:	2a09      	cmp	r2, #9
    c602:	d955      	bls.n	c6b0 <_svfiprintf_r+0x180>
    c604:	2800      	cmp	r0, #0
    c606:	d015      	beq.n	c634 <_svfiprintf_r+0x104>
    c608:	9309      	str	r3, [sp, #36]	; 0x24
    c60a:	e013      	b.n	c634 <_svfiprintf_r+0x104>
    c60c:	2b25      	cmp	r3, #37	; 0x25
    c60e:	d0b5      	beq.n	c57c <_svfiprintf_r+0x4c>
    c610:	3401      	adds	r4, #1
    c612:	e7b0      	b.n	c576 <_svfiprintf_r+0x46>
    c614:	2301      	movs	r3, #1
    c616:	1b80      	subs	r0, r0, r6
    c618:	4083      	lsls	r3, r0
    c61a:	6829      	ldr	r1, [r5, #0]
    c61c:	0014      	movs	r4, r2
    c61e:	430b      	orrs	r3, r1
    c620:	602b      	str	r3, [r5, #0]
    c622:	e7cd      	b.n	c5c0 <_svfiprintf_r+0x90>
    c624:	9b05      	ldr	r3, [sp, #20]
    c626:	1d18      	adds	r0, r3, #4
    c628:	681b      	ldr	r3, [r3, #0]
    c62a:	9005      	str	r0, [sp, #20]
    c62c:	2b00      	cmp	r3, #0
    c62e:	db39      	blt.n	c6a4 <_svfiprintf_r+0x174>
    c630:	9309      	str	r3, [sp, #36]	; 0x24
    c632:	0014      	movs	r4, r2
    c634:	7823      	ldrb	r3, [r4, #0]
    c636:	2b2e      	cmp	r3, #46	; 0x2e
    c638:	d10b      	bne.n	c652 <_svfiprintf_r+0x122>
    c63a:	7863      	ldrb	r3, [r4, #1]
    c63c:	1c62      	adds	r2, r4, #1
    c63e:	2b2a      	cmp	r3, #42	; 0x2a
    c640:	d13e      	bne.n	c6c0 <_svfiprintf_r+0x190>
    c642:	9b05      	ldr	r3, [sp, #20]
    c644:	3402      	adds	r4, #2
    c646:	1d1a      	adds	r2, r3, #4
    c648:	681b      	ldr	r3, [r3, #0]
    c64a:	9205      	str	r2, [sp, #20]
    c64c:	2b00      	cmp	r3, #0
    c64e:	db34      	blt.n	c6ba <_svfiprintf_r+0x18a>
    c650:	9307      	str	r3, [sp, #28]
    c652:	4e35      	ldr	r6, [pc, #212]	; (c728 <_svfiprintf_r+0x1f8>)
    c654:	7821      	ldrb	r1, [r4, #0]
    c656:	2203      	movs	r2, #3
    c658:	0030      	movs	r0, r6
    c65a:	f000 fc33 	bl	cec4 <memchr>
    c65e:	2800      	cmp	r0, #0
    c660:	d006      	beq.n	c670 <_svfiprintf_r+0x140>
    c662:	2340      	movs	r3, #64	; 0x40
    c664:	1b80      	subs	r0, r0, r6
    c666:	4083      	lsls	r3, r0
    c668:	682a      	ldr	r2, [r5, #0]
    c66a:	3401      	adds	r4, #1
    c66c:	4313      	orrs	r3, r2
    c66e:	602b      	str	r3, [r5, #0]
    c670:	7821      	ldrb	r1, [r4, #0]
    c672:	2206      	movs	r2, #6
    c674:	482d      	ldr	r0, [pc, #180]	; (c72c <_svfiprintf_r+0x1fc>)
    c676:	1c66      	adds	r6, r4, #1
    c678:	7629      	strb	r1, [r5, #24]
    c67a:	f000 fc23 	bl	cec4 <memchr>
    c67e:	2800      	cmp	r0, #0
    c680:	d046      	beq.n	c710 <_svfiprintf_r+0x1e0>
    c682:	4b2b      	ldr	r3, [pc, #172]	; (c730 <_svfiprintf_r+0x200>)
    c684:	2b00      	cmp	r3, #0
    c686:	d12f      	bne.n	c6e8 <_svfiprintf_r+0x1b8>
    c688:	6829      	ldr	r1, [r5, #0]
    c68a:	9b05      	ldr	r3, [sp, #20]
    c68c:	2207      	movs	r2, #7
    c68e:	05c9      	lsls	r1, r1, #23
    c690:	d528      	bpl.n	c6e4 <_svfiprintf_r+0x1b4>
    c692:	189b      	adds	r3, r3, r2
    c694:	4393      	bics	r3, r2
    c696:	3308      	adds	r3, #8
    c698:	9305      	str	r3, [sp, #20]
    c69a:	696b      	ldr	r3, [r5, #20]
    c69c:	9a03      	ldr	r2, [sp, #12]
    c69e:	189b      	adds	r3, r3, r2
    c6a0:	616b      	str	r3, [r5, #20]
    c6a2:	e767      	b.n	c574 <_svfiprintf_r+0x44>
    c6a4:	425b      	negs	r3, r3
    c6a6:	60eb      	str	r3, [r5, #12]
    c6a8:	2302      	movs	r3, #2
    c6aa:	430b      	orrs	r3, r1
    c6ac:	602b      	str	r3, [r5, #0]
    c6ae:	e7c0      	b.n	c632 <_svfiprintf_r+0x102>
    c6b0:	434b      	muls	r3, r1
    c6b2:	3401      	adds	r4, #1
    c6b4:	189b      	adds	r3, r3, r2
    c6b6:	2001      	movs	r0, #1
    c6b8:	e7a0      	b.n	c5fc <_svfiprintf_r+0xcc>
    c6ba:	2301      	movs	r3, #1
    c6bc:	425b      	negs	r3, r3
    c6be:	e7c7      	b.n	c650 <_svfiprintf_r+0x120>
    c6c0:	2300      	movs	r3, #0
    c6c2:	0014      	movs	r4, r2
    c6c4:	200a      	movs	r0, #10
    c6c6:	001a      	movs	r2, r3
    c6c8:	606b      	str	r3, [r5, #4]
    c6ca:	7821      	ldrb	r1, [r4, #0]
    c6cc:	3930      	subs	r1, #48	; 0x30
    c6ce:	2909      	cmp	r1, #9
    c6d0:	d903      	bls.n	c6da <_svfiprintf_r+0x1aa>
    c6d2:	2b00      	cmp	r3, #0
    c6d4:	d0bd      	beq.n	c652 <_svfiprintf_r+0x122>
    c6d6:	9207      	str	r2, [sp, #28]
    c6d8:	e7bb      	b.n	c652 <_svfiprintf_r+0x122>
    c6da:	4342      	muls	r2, r0
    c6dc:	3401      	adds	r4, #1
    c6de:	1852      	adds	r2, r2, r1
    c6e0:	2301      	movs	r3, #1
    c6e2:	e7f2      	b.n	c6ca <_svfiprintf_r+0x19a>
    c6e4:	3307      	adds	r3, #7
    c6e6:	e7d5      	b.n	c694 <_svfiprintf_r+0x164>
    c6e8:	ab05      	add	r3, sp, #20
    c6ea:	9300      	str	r3, [sp, #0]
    c6ec:	003a      	movs	r2, r7
    c6ee:	4b11      	ldr	r3, [pc, #68]	; (c734 <_svfiprintf_r+0x204>)
    c6f0:	0029      	movs	r1, r5
    c6f2:	9802      	ldr	r0, [sp, #8]
    c6f4:	e000      	b.n	c6f8 <_svfiprintf_r+0x1c8>
    c6f6:	bf00      	nop
    c6f8:	9003      	str	r0, [sp, #12]
    c6fa:	9b03      	ldr	r3, [sp, #12]
    c6fc:	3301      	adds	r3, #1
    c6fe:	d1cc      	bne.n	c69a <_svfiprintf_r+0x16a>
    c700:	89bb      	ldrh	r3, [r7, #12]
    c702:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c704:	065b      	lsls	r3, r3, #25
    c706:	d400      	bmi.n	c70a <_svfiprintf_r+0x1da>
    c708:	e729      	b.n	c55e <_svfiprintf_r+0x2e>
    c70a:	2001      	movs	r0, #1
    c70c:	4240      	negs	r0, r0
    c70e:	e726      	b.n	c55e <_svfiprintf_r+0x2e>
    c710:	ab05      	add	r3, sp, #20
    c712:	9300      	str	r3, [sp, #0]
    c714:	003a      	movs	r2, r7
    c716:	4b07      	ldr	r3, [pc, #28]	; (c734 <_svfiprintf_r+0x204>)
    c718:	0029      	movs	r1, r5
    c71a:	9802      	ldr	r0, [sp, #8]
    c71c:	f000 f9be 	bl	ca9c <_printf_i>
    c720:	e7ea      	b.n	c6f8 <_svfiprintf_r+0x1c8>
    c722:	46c0      	nop			; (mov r8, r8)
    c724:	0000f482 	.word	0x0000f482
    c728:	0000f488 	.word	0x0000f488
    c72c:	0000f48c 	.word	0x0000f48c
    c730:	00000000 	.word	0x00000000
    c734:	0000c46d 	.word	0x0000c46d

0000c738 <__sfputc_r>:
    c738:	6893      	ldr	r3, [r2, #8]
    c73a:	b510      	push	{r4, lr}
    c73c:	3b01      	subs	r3, #1
    c73e:	6093      	str	r3, [r2, #8]
    c740:	2b00      	cmp	r3, #0
    c742:	da05      	bge.n	c750 <__sfputc_r+0x18>
    c744:	6994      	ldr	r4, [r2, #24]
    c746:	42a3      	cmp	r3, r4
    c748:	db08      	blt.n	c75c <__sfputc_r+0x24>
    c74a:	b2cb      	uxtb	r3, r1
    c74c:	2b0a      	cmp	r3, #10
    c74e:	d005      	beq.n	c75c <__sfputc_r+0x24>
    c750:	6813      	ldr	r3, [r2, #0]
    c752:	1c58      	adds	r0, r3, #1
    c754:	6010      	str	r0, [r2, #0]
    c756:	7019      	strb	r1, [r3, #0]
    c758:	b2c8      	uxtb	r0, r1
    c75a:	bd10      	pop	{r4, pc}
    c75c:	f7ff fbaa 	bl	beb4 <__swbuf_r>
    c760:	e7fb      	b.n	c75a <__sfputc_r+0x22>

0000c762 <__sfputs_r>:
    c762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c764:	0006      	movs	r6, r0
    c766:	000f      	movs	r7, r1
    c768:	0014      	movs	r4, r2
    c76a:	18d5      	adds	r5, r2, r3
    c76c:	42ac      	cmp	r4, r5
    c76e:	d101      	bne.n	c774 <__sfputs_r+0x12>
    c770:	2000      	movs	r0, #0
    c772:	e007      	b.n	c784 <__sfputs_r+0x22>
    c774:	7821      	ldrb	r1, [r4, #0]
    c776:	003a      	movs	r2, r7
    c778:	0030      	movs	r0, r6
    c77a:	f7ff ffdd 	bl	c738 <__sfputc_r>
    c77e:	3401      	adds	r4, #1
    c780:	1c43      	adds	r3, r0, #1
    c782:	d1f3      	bne.n	c76c <__sfputs_r+0xa>
    c784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000c788 <_vfiprintf_r>:
    c788:	b5f0      	push	{r4, r5, r6, r7, lr}
    c78a:	b09f      	sub	sp, #124	; 0x7c
    c78c:	0006      	movs	r6, r0
    c78e:	000f      	movs	r7, r1
    c790:	0014      	movs	r4, r2
    c792:	9305      	str	r3, [sp, #20]
    c794:	2800      	cmp	r0, #0
    c796:	d004      	beq.n	c7a2 <_vfiprintf_r+0x1a>
    c798:	6983      	ldr	r3, [r0, #24]
    c79a:	2b00      	cmp	r3, #0
    c79c:	d101      	bne.n	c7a2 <_vfiprintf_r+0x1a>
    c79e:	f7ff fd4d 	bl	c23c <__sinit>
    c7a2:	4b7f      	ldr	r3, [pc, #508]	; (c9a0 <_vfiprintf_r+0x218>)
    c7a4:	429f      	cmp	r7, r3
    c7a6:	d15c      	bne.n	c862 <_vfiprintf_r+0xda>
    c7a8:	6877      	ldr	r7, [r6, #4]
    c7aa:	89bb      	ldrh	r3, [r7, #12]
    c7ac:	071b      	lsls	r3, r3, #28
    c7ae:	d562      	bpl.n	c876 <_vfiprintf_r+0xee>
    c7b0:	693b      	ldr	r3, [r7, #16]
    c7b2:	2b00      	cmp	r3, #0
    c7b4:	d05f      	beq.n	c876 <_vfiprintf_r+0xee>
    c7b6:	2300      	movs	r3, #0
    c7b8:	ad06      	add	r5, sp, #24
    c7ba:	616b      	str	r3, [r5, #20]
    c7bc:	3320      	adds	r3, #32
    c7be:	766b      	strb	r3, [r5, #25]
    c7c0:	3310      	adds	r3, #16
    c7c2:	76ab      	strb	r3, [r5, #26]
    c7c4:	9402      	str	r4, [sp, #8]
    c7c6:	9c02      	ldr	r4, [sp, #8]
    c7c8:	7823      	ldrb	r3, [r4, #0]
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d15d      	bne.n	c88a <_vfiprintf_r+0x102>
    c7ce:	9b02      	ldr	r3, [sp, #8]
    c7d0:	1ae3      	subs	r3, r4, r3
    c7d2:	9304      	str	r3, [sp, #16]
    c7d4:	d00d      	beq.n	c7f2 <_vfiprintf_r+0x6a>
    c7d6:	9b04      	ldr	r3, [sp, #16]
    c7d8:	9a02      	ldr	r2, [sp, #8]
    c7da:	0039      	movs	r1, r7
    c7dc:	0030      	movs	r0, r6
    c7de:	f7ff ffc0 	bl	c762 <__sfputs_r>
    c7e2:	1c43      	adds	r3, r0, #1
    c7e4:	d100      	bne.n	c7e8 <_vfiprintf_r+0x60>
    c7e6:	e0cc      	b.n	c982 <_vfiprintf_r+0x1fa>
    c7e8:	696a      	ldr	r2, [r5, #20]
    c7ea:	9b04      	ldr	r3, [sp, #16]
    c7ec:	4694      	mov	ip, r2
    c7ee:	4463      	add	r3, ip
    c7f0:	616b      	str	r3, [r5, #20]
    c7f2:	7823      	ldrb	r3, [r4, #0]
    c7f4:	2b00      	cmp	r3, #0
    c7f6:	d100      	bne.n	c7fa <_vfiprintf_r+0x72>
    c7f8:	e0c3      	b.n	c982 <_vfiprintf_r+0x1fa>
    c7fa:	2201      	movs	r2, #1
    c7fc:	2300      	movs	r3, #0
    c7fe:	4252      	negs	r2, r2
    c800:	606a      	str	r2, [r5, #4]
    c802:	a902      	add	r1, sp, #8
    c804:	3254      	adds	r2, #84	; 0x54
    c806:	1852      	adds	r2, r2, r1
    c808:	3401      	adds	r4, #1
    c80a:	602b      	str	r3, [r5, #0]
    c80c:	60eb      	str	r3, [r5, #12]
    c80e:	60ab      	str	r3, [r5, #8]
    c810:	7013      	strb	r3, [r2, #0]
    c812:	65ab      	str	r3, [r5, #88]	; 0x58
    c814:	7821      	ldrb	r1, [r4, #0]
    c816:	2205      	movs	r2, #5
    c818:	4862      	ldr	r0, [pc, #392]	; (c9a4 <_vfiprintf_r+0x21c>)
    c81a:	f000 fb53 	bl	cec4 <memchr>
    c81e:	1c63      	adds	r3, r4, #1
    c820:	469c      	mov	ip, r3
    c822:	2800      	cmp	r0, #0
    c824:	d135      	bne.n	c892 <_vfiprintf_r+0x10a>
    c826:	6829      	ldr	r1, [r5, #0]
    c828:	06cb      	lsls	r3, r1, #27
    c82a:	d504      	bpl.n	c836 <_vfiprintf_r+0xae>
    c82c:	2353      	movs	r3, #83	; 0x53
    c82e:	aa02      	add	r2, sp, #8
    c830:	3020      	adds	r0, #32
    c832:	189b      	adds	r3, r3, r2
    c834:	7018      	strb	r0, [r3, #0]
    c836:	070b      	lsls	r3, r1, #28
    c838:	d504      	bpl.n	c844 <_vfiprintf_r+0xbc>
    c83a:	2353      	movs	r3, #83	; 0x53
    c83c:	202b      	movs	r0, #43	; 0x2b
    c83e:	aa02      	add	r2, sp, #8
    c840:	189b      	adds	r3, r3, r2
    c842:	7018      	strb	r0, [r3, #0]
    c844:	7823      	ldrb	r3, [r4, #0]
    c846:	2b2a      	cmp	r3, #42	; 0x2a
    c848:	d02c      	beq.n	c8a4 <_vfiprintf_r+0x11c>
    c84a:	2000      	movs	r0, #0
    c84c:	210a      	movs	r1, #10
    c84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c850:	7822      	ldrb	r2, [r4, #0]
    c852:	3a30      	subs	r2, #48	; 0x30
    c854:	2a09      	cmp	r2, #9
    c856:	d800      	bhi.n	c85a <_vfiprintf_r+0xd2>
    c858:	e06b      	b.n	c932 <_vfiprintf_r+0x1aa>
    c85a:	2800      	cmp	r0, #0
    c85c:	d02a      	beq.n	c8b4 <_vfiprintf_r+0x12c>
    c85e:	9309      	str	r3, [sp, #36]	; 0x24
    c860:	e028      	b.n	c8b4 <_vfiprintf_r+0x12c>
    c862:	4b51      	ldr	r3, [pc, #324]	; (c9a8 <_vfiprintf_r+0x220>)
    c864:	429f      	cmp	r7, r3
    c866:	d101      	bne.n	c86c <_vfiprintf_r+0xe4>
    c868:	68b7      	ldr	r7, [r6, #8]
    c86a:	e79e      	b.n	c7aa <_vfiprintf_r+0x22>
    c86c:	4b4f      	ldr	r3, [pc, #316]	; (c9ac <_vfiprintf_r+0x224>)
    c86e:	429f      	cmp	r7, r3
    c870:	d19b      	bne.n	c7aa <_vfiprintf_r+0x22>
    c872:	68f7      	ldr	r7, [r6, #12]
    c874:	e799      	b.n	c7aa <_vfiprintf_r+0x22>
    c876:	0039      	movs	r1, r7
    c878:	0030      	movs	r0, r6
    c87a:	f7ff fb71 	bl	bf60 <__swsetup_r>
    c87e:	2800      	cmp	r0, #0
    c880:	d099      	beq.n	c7b6 <_vfiprintf_r+0x2e>
    c882:	2001      	movs	r0, #1
    c884:	4240      	negs	r0, r0
    c886:	b01f      	add	sp, #124	; 0x7c
    c888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c88a:	2b25      	cmp	r3, #37	; 0x25
    c88c:	d09f      	beq.n	c7ce <_vfiprintf_r+0x46>
    c88e:	3401      	adds	r4, #1
    c890:	e79a      	b.n	c7c8 <_vfiprintf_r+0x40>
    c892:	4b44      	ldr	r3, [pc, #272]	; (c9a4 <_vfiprintf_r+0x21c>)
    c894:	6829      	ldr	r1, [r5, #0]
    c896:	1ac0      	subs	r0, r0, r3
    c898:	2301      	movs	r3, #1
    c89a:	4083      	lsls	r3, r0
    c89c:	430b      	orrs	r3, r1
    c89e:	602b      	str	r3, [r5, #0]
    c8a0:	4664      	mov	r4, ip
    c8a2:	e7b7      	b.n	c814 <_vfiprintf_r+0x8c>
    c8a4:	9b05      	ldr	r3, [sp, #20]
    c8a6:	1d18      	adds	r0, r3, #4
    c8a8:	681b      	ldr	r3, [r3, #0]
    c8aa:	9005      	str	r0, [sp, #20]
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	db3a      	blt.n	c926 <_vfiprintf_r+0x19e>
    c8b0:	9309      	str	r3, [sp, #36]	; 0x24
    c8b2:	4664      	mov	r4, ip
    c8b4:	7823      	ldrb	r3, [r4, #0]
    c8b6:	2b2e      	cmp	r3, #46	; 0x2e
    c8b8:	d10b      	bne.n	c8d2 <_vfiprintf_r+0x14a>
    c8ba:	7863      	ldrb	r3, [r4, #1]
    c8bc:	1c62      	adds	r2, r4, #1
    c8be:	2b2a      	cmp	r3, #42	; 0x2a
    c8c0:	d13f      	bne.n	c942 <_vfiprintf_r+0x1ba>
    c8c2:	9b05      	ldr	r3, [sp, #20]
    c8c4:	3402      	adds	r4, #2
    c8c6:	1d1a      	adds	r2, r3, #4
    c8c8:	681b      	ldr	r3, [r3, #0]
    c8ca:	9205      	str	r2, [sp, #20]
    c8cc:	2b00      	cmp	r3, #0
    c8ce:	db35      	blt.n	c93c <_vfiprintf_r+0x1b4>
    c8d0:	9307      	str	r3, [sp, #28]
    c8d2:	7821      	ldrb	r1, [r4, #0]
    c8d4:	2203      	movs	r2, #3
    c8d6:	4836      	ldr	r0, [pc, #216]	; (c9b0 <_vfiprintf_r+0x228>)
    c8d8:	f000 faf4 	bl	cec4 <memchr>
    c8dc:	2800      	cmp	r0, #0
    c8de:	d007      	beq.n	c8f0 <_vfiprintf_r+0x168>
    c8e0:	4b33      	ldr	r3, [pc, #204]	; (c9b0 <_vfiprintf_r+0x228>)
    c8e2:	682a      	ldr	r2, [r5, #0]
    c8e4:	1ac0      	subs	r0, r0, r3
    c8e6:	2340      	movs	r3, #64	; 0x40
    c8e8:	4083      	lsls	r3, r0
    c8ea:	4313      	orrs	r3, r2
    c8ec:	602b      	str	r3, [r5, #0]
    c8ee:	3401      	adds	r4, #1
    c8f0:	7821      	ldrb	r1, [r4, #0]
    c8f2:	1c63      	adds	r3, r4, #1
    c8f4:	2206      	movs	r2, #6
    c8f6:	482f      	ldr	r0, [pc, #188]	; (c9b4 <_vfiprintf_r+0x22c>)
    c8f8:	9302      	str	r3, [sp, #8]
    c8fa:	7629      	strb	r1, [r5, #24]
    c8fc:	f000 fae2 	bl	cec4 <memchr>
    c900:	2800      	cmp	r0, #0
    c902:	d044      	beq.n	c98e <_vfiprintf_r+0x206>
    c904:	4b2c      	ldr	r3, [pc, #176]	; (c9b8 <_vfiprintf_r+0x230>)
    c906:	2b00      	cmp	r3, #0
    c908:	d12f      	bne.n	c96a <_vfiprintf_r+0x1e2>
    c90a:	6829      	ldr	r1, [r5, #0]
    c90c:	9b05      	ldr	r3, [sp, #20]
    c90e:	2207      	movs	r2, #7
    c910:	05c9      	lsls	r1, r1, #23
    c912:	d528      	bpl.n	c966 <_vfiprintf_r+0x1de>
    c914:	189b      	adds	r3, r3, r2
    c916:	4393      	bics	r3, r2
    c918:	3308      	adds	r3, #8
    c91a:	9305      	str	r3, [sp, #20]
    c91c:	696b      	ldr	r3, [r5, #20]
    c91e:	9a03      	ldr	r2, [sp, #12]
    c920:	189b      	adds	r3, r3, r2
    c922:	616b      	str	r3, [r5, #20]
    c924:	e74f      	b.n	c7c6 <_vfiprintf_r+0x3e>
    c926:	425b      	negs	r3, r3
    c928:	60eb      	str	r3, [r5, #12]
    c92a:	2302      	movs	r3, #2
    c92c:	430b      	orrs	r3, r1
    c92e:	602b      	str	r3, [r5, #0]
    c930:	e7bf      	b.n	c8b2 <_vfiprintf_r+0x12a>
    c932:	434b      	muls	r3, r1
    c934:	3401      	adds	r4, #1
    c936:	189b      	adds	r3, r3, r2
    c938:	2001      	movs	r0, #1
    c93a:	e789      	b.n	c850 <_vfiprintf_r+0xc8>
    c93c:	2301      	movs	r3, #1
    c93e:	425b      	negs	r3, r3
    c940:	e7c6      	b.n	c8d0 <_vfiprintf_r+0x148>
    c942:	2300      	movs	r3, #0
    c944:	0014      	movs	r4, r2
    c946:	200a      	movs	r0, #10
    c948:	001a      	movs	r2, r3
    c94a:	606b      	str	r3, [r5, #4]
    c94c:	7821      	ldrb	r1, [r4, #0]
    c94e:	3930      	subs	r1, #48	; 0x30
    c950:	2909      	cmp	r1, #9
    c952:	d903      	bls.n	c95c <_vfiprintf_r+0x1d4>
    c954:	2b00      	cmp	r3, #0
    c956:	d0bc      	beq.n	c8d2 <_vfiprintf_r+0x14a>
    c958:	9207      	str	r2, [sp, #28]
    c95a:	e7ba      	b.n	c8d2 <_vfiprintf_r+0x14a>
    c95c:	4342      	muls	r2, r0
    c95e:	3401      	adds	r4, #1
    c960:	1852      	adds	r2, r2, r1
    c962:	2301      	movs	r3, #1
    c964:	e7f2      	b.n	c94c <_vfiprintf_r+0x1c4>
    c966:	3307      	adds	r3, #7
    c968:	e7d5      	b.n	c916 <_vfiprintf_r+0x18e>
    c96a:	ab05      	add	r3, sp, #20
    c96c:	9300      	str	r3, [sp, #0]
    c96e:	003a      	movs	r2, r7
    c970:	4b12      	ldr	r3, [pc, #72]	; (c9bc <_vfiprintf_r+0x234>)
    c972:	0029      	movs	r1, r5
    c974:	0030      	movs	r0, r6
    c976:	e000      	b.n	c97a <_vfiprintf_r+0x1f2>
    c978:	bf00      	nop
    c97a:	9003      	str	r0, [sp, #12]
    c97c:	9b03      	ldr	r3, [sp, #12]
    c97e:	3301      	adds	r3, #1
    c980:	d1cc      	bne.n	c91c <_vfiprintf_r+0x194>
    c982:	89bb      	ldrh	r3, [r7, #12]
    c984:	065b      	lsls	r3, r3, #25
    c986:	d500      	bpl.n	c98a <_vfiprintf_r+0x202>
    c988:	e77b      	b.n	c882 <_vfiprintf_r+0xfa>
    c98a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c98c:	e77b      	b.n	c886 <_vfiprintf_r+0xfe>
    c98e:	ab05      	add	r3, sp, #20
    c990:	9300      	str	r3, [sp, #0]
    c992:	003a      	movs	r2, r7
    c994:	4b09      	ldr	r3, [pc, #36]	; (c9bc <_vfiprintf_r+0x234>)
    c996:	0029      	movs	r1, r5
    c998:	0030      	movs	r0, r6
    c99a:	f000 f87f 	bl	ca9c <_printf_i>
    c99e:	e7ec      	b.n	c97a <_vfiprintf_r+0x1f2>
    c9a0:	0000f438 	.word	0x0000f438
    c9a4:	0000f482 	.word	0x0000f482
    c9a8:	0000f458 	.word	0x0000f458
    c9ac:	0000f418 	.word	0x0000f418
    c9b0:	0000f488 	.word	0x0000f488
    c9b4:	0000f48c 	.word	0x0000f48c
    c9b8:	00000000 	.word	0x00000000
    c9bc:	0000c763 	.word	0x0000c763

0000c9c0 <_printf_common>:
    c9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c9c2:	0015      	movs	r5, r2
    c9c4:	9301      	str	r3, [sp, #4]
    c9c6:	688a      	ldr	r2, [r1, #8]
    c9c8:	690b      	ldr	r3, [r1, #16]
    c9ca:	9000      	str	r0, [sp, #0]
    c9cc:	000c      	movs	r4, r1
    c9ce:	4293      	cmp	r3, r2
    c9d0:	da00      	bge.n	c9d4 <_printf_common+0x14>
    c9d2:	0013      	movs	r3, r2
    c9d4:	0022      	movs	r2, r4
    c9d6:	602b      	str	r3, [r5, #0]
    c9d8:	3243      	adds	r2, #67	; 0x43
    c9da:	7812      	ldrb	r2, [r2, #0]
    c9dc:	2a00      	cmp	r2, #0
    c9de:	d001      	beq.n	c9e4 <_printf_common+0x24>
    c9e0:	3301      	adds	r3, #1
    c9e2:	602b      	str	r3, [r5, #0]
    c9e4:	6823      	ldr	r3, [r4, #0]
    c9e6:	069b      	lsls	r3, r3, #26
    c9e8:	d502      	bpl.n	c9f0 <_printf_common+0x30>
    c9ea:	682b      	ldr	r3, [r5, #0]
    c9ec:	3302      	adds	r3, #2
    c9ee:	602b      	str	r3, [r5, #0]
    c9f0:	2706      	movs	r7, #6
    c9f2:	6823      	ldr	r3, [r4, #0]
    c9f4:	401f      	ands	r7, r3
    c9f6:	d027      	beq.n	ca48 <_printf_common+0x88>
    c9f8:	0023      	movs	r3, r4
    c9fa:	3343      	adds	r3, #67	; 0x43
    c9fc:	781b      	ldrb	r3, [r3, #0]
    c9fe:	1e5a      	subs	r2, r3, #1
    ca00:	4193      	sbcs	r3, r2
    ca02:	6822      	ldr	r2, [r4, #0]
    ca04:	0692      	lsls	r2, r2, #26
    ca06:	d430      	bmi.n	ca6a <_printf_common+0xaa>
    ca08:	0022      	movs	r2, r4
    ca0a:	9901      	ldr	r1, [sp, #4]
    ca0c:	3243      	adds	r2, #67	; 0x43
    ca0e:	9800      	ldr	r0, [sp, #0]
    ca10:	9e08      	ldr	r6, [sp, #32]
    ca12:	47b0      	blx	r6
    ca14:	1c43      	adds	r3, r0, #1
    ca16:	d025      	beq.n	ca64 <_printf_common+0xa4>
    ca18:	2306      	movs	r3, #6
    ca1a:	6820      	ldr	r0, [r4, #0]
    ca1c:	682a      	ldr	r2, [r5, #0]
    ca1e:	68e1      	ldr	r1, [r4, #12]
    ca20:	4003      	ands	r3, r0
    ca22:	2500      	movs	r5, #0
    ca24:	2b04      	cmp	r3, #4
    ca26:	d103      	bne.n	ca30 <_printf_common+0x70>
    ca28:	1a8d      	subs	r5, r1, r2
    ca2a:	43eb      	mvns	r3, r5
    ca2c:	17db      	asrs	r3, r3, #31
    ca2e:	401d      	ands	r5, r3
    ca30:	68a3      	ldr	r3, [r4, #8]
    ca32:	6922      	ldr	r2, [r4, #16]
    ca34:	4293      	cmp	r3, r2
    ca36:	dd01      	ble.n	ca3c <_printf_common+0x7c>
    ca38:	1a9b      	subs	r3, r3, r2
    ca3a:	18ed      	adds	r5, r5, r3
    ca3c:	2700      	movs	r7, #0
    ca3e:	42bd      	cmp	r5, r7
    ca40:	d120      	bne.n	ca84 <_printf_common+0xc4>
    ca42:	2000      	movs	r0, #0
    ca44:	e010      	b.n	ca68 <_printf_common+0xa8>
    ca46:	3701      	adds	r7, #1
    ca48:	68e3      	ldr	r3, [r4, #12]
    ca4a:	682a      	ldr	r2, [r5, #0]
    ca4c:	1a9b      	subs	r3, r3, r2
    ca4e:	429f      	cmp	r7, r3
    ca50:	dad2      	bge.n	c9f8 <_printf_common+0x38>
    ca52:	0022      	movs	r2, r4
    ca54:	2301      	movs	r3, #1
    ca56:	3219      	adds	r2, #25
    ca58:	9901      	ldr	r1, [sp, #4]
    ca5a:	9800      	ldr	r0, [sp, #0]
    ca5c:	9e08      	ldr	r6, [sp, #32]
    ca5e:	47b0      	blx	r6
    ca60:	1c43      	adds	r3, r0, #1
    ca62:	d1f0      	bne.n	ca46 <_printf_common+0x86>
    ca64:	2001      	movs	r0, #1
    ca66:	4240      	negs	r0, r0
    ca68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ca6a:	2030      	movs	r0, #48	; 0x30
    ca6c:	18e1      	adds	r1, r4, r3
    ca6e:	3143      	adds	r1, #67	; 0x43
    ca70:	7008      	strb	r0, [r1, #0]
    ca72:	0021      	movs	r1, r4
    ca74:	1c5a      	adds	r2, r3, #1
    ca76:	3145      	adds	r1, #69	; 0x45
    ca78:	7809      	ldrb	r1, [r1, #0]
    ca7a:	18a2      	adds	r2, r4, r2
    ca7c:	3243      	adds	r2, #67	; 0x43
    ca7e:	3302      	adds	r3, #2
    ca80:	7011      	strb	r1, [r2, #0]
    ca82:	e7c1      	b.n	ca08 <_printf_common+0x48>
    ca84:	0022      	movs	r2, r4
    ca86:	2301      	movs	r3, #1
    ca88:	321a      	adds	r2, #26
    ca8a:	9901      	ldr	r1, [sp, #4]
    ca8c:	9800      	ldr	r0, [sp, #0]
    ca8e:	9e08      	ldr	r6, [sp, #32]
    ca90:	47b0      	blx	r6
    ca92:	1c43      	adds	r3, r0, #1
    ca94:	d0e6      	beq.n	ca64 <_printf_common+0xa4>
    ca96:	3701      	adds	r7, #1
    ca98:	e7d1      	b.n	ca3e <_printf_common+0x7e>
	...

0000ca9c <_printf_i>:
    ca9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca9e:	b08b      	sub	sp, #44	; 0x2c
    caa0:	9206      	str	r2, [sp, #24]
    caa2:	000a      	movs	r2, r1
    caa4:	3243      	adds	r2, #67	; 0x43
    caa6:	9307      	str	r3, [sp, #28]
    caa8:	9005      	str	r0, [sp, #20]
    caaa:	9204      	str	r2, [sp, #16]
    caac:	7e0a      	ldrb	r2, [r1, #24]
    caae:	000c      	movs	r4, r1
    cab0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cab2:	2a6e      	cmp	r2, #110	; 0x6e
    cab4:	d100      	bne.n	cab8 <_printf_i+0x1c>
    cab6:	e08f      	b.n	cbd8 <_printf_i+0x13c>
    cab8:	d817      	bhi.n	caea <_printf_i+0x4e>
    caba:	2a63      	cmp	r2, #99	; 0x63
    cabc:	d02c      	beq.n	cb18 <_printf_i+0x7c>
    cabe:	d808      	bhi.n	cad2 <_printf_i+0x36>
    cac0:	2a00      	cmp	r2, #0
    cac2:	d100      	bne.n	cac6 <_printf_i+0x2a>
    cac4:	e099      	b.n	cbfa <_printf_i+0x15e>
    cac6:	2a58      	cmp	r2, #88	; 0x58
    cac8:	d054      	beq.n	cb74 <_printf_i+0xd8>
    caca:	0026      	movs	r6, r4
    cacc:	3642      	adds	r6, #66	; 0x42
    cace:	7032      	strb	r2, [r6, #0]
    cad0:	e029      	b.n	cb26 <_printf_i+0x8a>
    cad2:	2a64      	cmp	r2, #100	; 0x64
    cad4:	d001      	beq.n	cada <_printf_i+0x3e>
    cad6:	2a69      	cmp	r2, #105	; 0x69
    cad8:	d1f7      	bne.n	caca <_printf_i+0x2e>
    cada:	6821      	ldr	r1, [r4, #0]
    cadc:	681a      	ldr	r2, [r3, #0]
    cade:	0608      	lsls	r0, r1, #24
    cae0:	d523      	bpl.n	cb2a <_printf_i+0x8e>
    cae2:	1d11      	adds	r1, r2, #4
    cae4:	6019      	str	r1, [r3, #0]
    cae6:	6815      	ldr	r5, [r2, #0]
    cae8:	e025      	b.n	cb36 <_printf_i+0x9a>
    caea:	2a73      	cmp	r2, #115	; 0x73
    caec:	d100      	bne.n	caf0 <_printf_i+0x54>
    caee:	e088      	b.n	cc02 <_printf_i+0x166>
    caf0:	d808      	bhi.n	cb04 <_printf_i+0x68>
    caf2:	2a6f      	cmp	r2, #111	; 0x6f
    caf4:	d029      	beq.n	cb4a <_printf_i+0xae>
    caf6:	2a70      	cmp	r2, #112	; 0x70
    caf8:	d1e7      	bne.n	caca <_printf_i+0x2e>
    cafa:	2220      	movs	r2, #32
    cafc:	6809      	ldr	r1, [r1, #0]
    cafe:	430a      	orrs	r2, r1
    cb00:	6022      	str	r2, [r4, #0]
    cb02:	e003      	b.n	cb0c <_printf_i+0x70>
    cb04:	2a75      	cmp	r2, #117	; 0x75
    cb06:	d020      	beq.n	cb4a <_printf_i+0xae>
    cb08:	2a78      	cmp	r2, #120	; 0x78
    cb0a:	d1de      	bne.n	caca <_printf_i+0x2e>
    cb0c:	0022      	movs	r2, r4
    cb0e:	2178      	movs	r1, #120	; 0x78
    cb10:	3245      	adds	r2, #69	; 0x45
    cb12:	7011      	strb	r1, [r2, #0]
    cb14:	4a6c      	ldr	r2, [pc, #432]	; (ccc8 <_printf_i+0x22c>)
    cb16:	e030      	b.n	cb7a <_printf_i+0xde>
    cb18:	000e      	movs	r6, r1
    cb1a:	681a      	ldr	r2, [r3, #0]
    cb1c:	3642      	adds	r6, #66	; 0x42
    cb1e:	1d11      	adds	r1, r2, #4
    cb20:	6019      	str	r1, [r3, #0]
    cb22:	6813      	ldr	r3, [r2, #0]
    cb24:	7033      	strb	r3, [r6, #0]
    cb26:	2301      	movs	r3, #1
    cb28:	e079      	b.n	cc1e <_printf_i+0x182>
    cb2a:	0649      	lsls	r1, r1, #25
    cb2c:	d5d9      	bpl.n	cae2 <_printf_i+0x46>
    cb2e:	1d11      	adds	r1, r2, #4
    cb30:	6019      	str	r1, [r3, #0]
    cb32:	2300      	movs	r3, #0
    cb34:	5ed5      	ldrsh	r5, [r2, r3]
    cb36:	2d00      	cmp	r5, #0
    cb38:	da03      	bge.n	cb42 <_printf_i+0xa6>
    cb3a:	232d      	movs	r3, #45	; 0x2d
    cb3c:	9a04      	ldr	r2, [sp, #16]
    cb3e:	426d      	negs	r5, r5
    cb40:	7013      	strb	r3, [r2, #0]
    cb42:	4b62      	ldr	r3, [pc, #392]	; (cccc <_printf_i+0x230>)
    cb44:	270a      	movs	r7, #10
    cb46:	9303      	str	r3, [sp, #12]
    cb48:	e02f      	b.n	cbaa <_printf_i+0x10e>
    cb4a:	6820      	ldr	r0, [r4, #0]
    cb4c:	6819      	ldr	r1, [r3, #0]
    cb4e:	0605      	lsls	r5, r0, #24
    cb50:	d503      	bpl.n	cb5a <_printf_i+0xbe>
    cb52:	1d08      	adds	r0, r1, #4
    cb54:	6018      	str	r0, [r3, #0]
    cb56:	680d      	ldr	r5, [r1, #0]
    cb58:	e005      	b.n	cb66 <_printf_i+0xca>
    cb5a:	0640      	lsls	r0, r0, #25
    cb5c:	d5f9      	bpl.n	cb52 <_printf_i+0xb6>
    cb5e:	680d      	ldr	r5, [r1, #0]
    cb60:	1d08      	adds	r0, r1, #4
    cb62:	6018      	str	r0, [r3, #0]
    cb64:	b2ad      	uxth	r5, r5
    cb66:	4b59      	ldr	r3, [pc, #356]	; (cccc <_printf_i+0x230>)
    cb68:	2708      	movs	r7, #8
    cb6a:	9303      	str	r3, [sp, #12]
    cb6c:	2a6f      	cmp	r2, #111	; 0x6f
    cb6e:	d018      	beq.n	cba2 <_printf_i+0x106>
    cb70:	270a      	movs	r7, #10
    cb72:	e016      	b.n	cba2 <_printf_i+0x106>
    cb74:	3145      	adds	r1, #69	; 0x45
    cb76:	700a      	strb	r2, [r1, #0]
    cb78:	4a54      	ldr	r2, [pc, #336]	; (cccc <_printf_i+0x230>)
    cb7a:	9203      	str	r2, [sp, #12]
    cb7c:	681a      	ldr	r2, [r3, #0]
    cb7e:	6821      	ldr	r1, [r4, #0]
    cb80:	1d10      	adds	r0, r2, #4
    cb82:	6018      	str	r0, [r3, #0]
    cb84:	6815      	ldr	r5, [r2, #0]
    cb86:	0608      	lsls	r0, r1, #24
    cb88:	d522      	bpl.n	cbd0 <_printf_i+0x134>
    cb8a:	07cb      	lsls	r3, r1, #31
    cb8c:	d502      	bpl.n	cb94 <_printf_i+0xf8>
    cb8e:	2320      	movs	r3, #32
    cb90:	4319      	orrs	r1, r3
    cb92:	6021      	str	r1, [r4, #0]
    cb94:	2710      	movs	r7, #16
    cb96:	2d00      	cmp	r5, #0
    cb98:	d103      	bne.n	cba2 <_printf_i+0x106>
    cb9a:	2320      	movs	r3, #32
    cb9c:	6822      	ldr	r2, [r4, #0]
    cb9e:	439a      	bics	r2, r3
    cba0:	6022      	str	r2, [r4, #0]
    cba2:	0023      	movs	r3, r4
    cba4:	2200      	movs	r2, #0
    cba6:	3343      	adds	r3, #67	; 0x43
    cba8:	701a      	strb	r2, [r3, #0]
    cbaa:	6863      	ldr	r3, [r4, #4]
    cbac:	60a3      	str	r3, [r4, #8]
    cbae:	2b00      	cmp	r3, #0
    cbb0:	db5c      	blt.n	cc6c <_printf_i+0x1d0>
    cbb2:	2204      	movs	r2, #4
    cbb4:	6821      	ldr	r1, [r4, #0]
    cbb6:	4391      	bics	r1, r2
    cbb8:	6021      	str	r1, [r4, #0]
    cbba:	2d00      	cmp	r5, #0
    cbbc:	d158      	bne.n	cc70 <_printf_i+0x1d4>
    cbbe:	9e04      	ldr	r6, [sp, #16]
    cbc0:	2b00      	cmp	r3, #0
    cbc2:	d064      	beq.n	cc8e <_printf_i+0x1f2>
    cbc4:	0026      	movs	r6, r4
    cbc6:	9b03      	ldr	r3, [sp, #12]
    cbc8:	3642      	adds	r6, #66	; 0x42
    cbca:	781b      	ldrb	r3, [r3, #0]
    cbcc:	7033      	strb	r3, [r6, #0]
    cbce:	e05e      	b.n	cc8e <_printf_i+0x1f2>
    cbd0:	0648      	lsls	r0, r1, #25
    cbd2:	d5da      	bpl.n	cb8a <_printf_i+0xee>
    cbd4:	b2ad      	uxth	r5, r5
    cbd6:	e7d8      	b.n	cb8a <_printf_i+0xee>
    cbd8:	6809      	ldr	r1, [r1, #0]
    cbda:	681a      	ldr	r2, [r3, #0]
    cbdc:	0608      	lsls	r0, r1, #24
    cbde:	d505      	bpl.n	cbec <_printf_i+0x150>
    cbe0:	1d11      	adds	r1, r2, #4
    cbe2:	6019      	str	r1, [r3, #0]
    cbe4:	6813      	ldr	r3, [r2, #0]
    cbe6:	6962      	ldr	r2, [r4, #20]
    cbe8:	601a      	str	r2, [r3, #0]
    cbea:	e006      	b.n	cbfa <_printf_i+0x15e>
    cbec:	0649      	lsls	r1, r1, #25
    cbee:	d5f7      	bpl.n	cbe0 <_printf_i+0x144>
    cbf0:	1d11      	adds	r1, r2, #4
    cbf2:	6019      	str	r1, [r3, #0]
    cbf4:	6813      	ldr	r3, [r2, #0]
    cbf6:	8aa2      	ldrh	r2, [r4, #20]
    cbf8:	801a      	strh	r2, [r3, #0]
    cbfa:	2300      	movs	r3, #0
    cbfc:	9e04      	ldr	r6, [sp, #16]
    cbfe:	6123      	str	r3, [r4, #16]
    cc00:	e054      	b.n	ccac <_printf_i+0x210>
    cc02:	681a      	ldr	r2, [r3, #0]
    cc04:	1d11      	adds	r1, r2, #4
    cc06:	6019      	str	r1, [r3, #0]
    cc08:	6816      	ldr	r6, [r2, #0]
    cc0a:	2100      	movs	r1, #0
    cc0c:	6862      	ldr	r2, [r4, #4]
    cc0e:	0030      	movs	r0, r6
    cc10:	f000 f958 	bl	cec4 <memchr>
    cc14:	2800      	cmp	r0, #0
    cc16:	d001      	beq.n	cc1c <_printf_i+0x180>
    cc18:	1b80      	subs	r0, r0, r6
    cc1a:	6060      	str	r0, [r4, #4]
    cc1c:	6863      	ldr	r3, [r4, #4]
    cc1e:	6123      	str	r3, [r4, #16]
    cc20:	2300      	movs	r3, #0
    cc22:	9a04      	ldr	r2, [sp, #16]
    cc24:	7013      	strb	r3, [r2, #0]
    cc26:	e041      	b.n	ccac <_printf_i+0x210>
    cc28:	6923      	ldr	r3, [r4, #16]
    cc2a:	0032      	movs	r2, r6
    cc2c:	9906      	ldr	r1, [sp, #24]
    cc2e:	9805      	ldr	r0, [sp, #20]
    cc30:	9d07      	ldr	r5, [sp, #28]
    cc32:	47a8      	blx	r5
    cc34:	1c43      	adds	r3, r0, #1
    cc36:	d043      	beq.n	ccc0 <_printf_i+0x224>
    cc38:	6823      	ldr	r3, [r4, #0]
    cc3a:	2500      	movs	r5, #0
    cc3c:	079b      	lsls	r3, r3, #30
    cc3e:	d40f      	bmi.n	cc60 <_printf_i+0x1c4>
    cc40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc42:	68e0      	ldr	r0, [r4, #12]
    cc44:	4298      	cmp	r0, r3
    cc46:	da3d      	bge.n	ccc4 <_printf_i+0x228>
    cc48:	0018      	movs	r0, r3
    cc4a:	e03b      	b.n	ccc4 <_printf_i+0x228>
    cc4c:	0022      	movs	r2, r4
    cc4e:	2301      	movs	r3, #1
    cc50:	3219      	adds	r2, #25
    cc52:	9906      	ldr	r1, [sp, #24]
    cc54:	9805      	ldr	r0, [sp, #20]
    cc56:	9e07      	ldr	r6, [sp, #28]
    cc58:	47b0      	blx	r6
    cc5a:	1c43      	adds	r3, r0, #1
    cc5c:	d030      	beq.n	ccc0 <_printf_i+0x224>
    cc5e:	3501      	adds	r5, #1
    cc60:	68e3      	ldr	r3, [r4, #12]
    cc62:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cc64:	1a9b      	subs	r3, r3, r2
    cc66:	429d      	cmp	r5, r3
    cc68:	dbf0      	blt.n	cc4c <_printf_i+0x1b0>
    cc6a:	e7e9      	b.n	cc40 <_printf_i+0x1a4>
    cc6c:	2d00      	cmp	r5, #0
    cc6e:	d0a9      	beq.n	cbc4 <_printf_i+0x128>
    cc70:	9e04      	ldr	r6, [sp, #16]
    cc72:	0028      	movs	r0, r5
    cc74:	0039      	movs	r1, r7
    cc76:	f7fe fc79 	bl	b56c <__aeabi_uidivmod>
    cc7a:	9b03      	ldr	r3, [sp, #12]
    cc7c:	3e01      	subs	r6, #1
    cc7e:	5c5b      	ldrb	r3, [r3, r1]
    cc80:	0028      	movs	r0, r5
    cc82:	7033      	strb	r3, [r6, #0]
    cc84:	0039      	movs	r1, r7
    cc86:	f7fe fbeb 	bl	b460 <__udivsi3>
    cc8a:	1e05      	subs	r5, r0, #0
    cc8c:	d1f1      	bne.n	cc72 <_printf_i+0x1d6>
    cc8e:	2f08      	cmp	r7, #8
    cc90:	d109      	bne.n	cca6 <_printf_i+0x20a>
    cc92:	6823      	ldr	r3, [r4, #0]
    cc94:	07db      	lsls	r3, r3, #31
    cc96:	d506      	bpl.n	cca6 <_printf_i+0x20a>
    cc98:	6863      	ldr	r3, [r4, #4]
    cc9a:	6922      	ldr	r2, [r4, #16]
    cc9c:	4293      	cmp	r3, r2
    cc9e:	dc02      	bgt.n	cca6 <_printf_i+0x20a>
    cca0:	2330      	movs	r3, #48	; 0x30
    cca2:	3e01      	subs	r6, #1
    cca4:	7033      	strb	r3, [r6, #0]
    cca6:	9b04      	ldr	r3, [sp, #16]
    cca8:	1b9b      	subs	r3, r3, r6
    ccaa:	6123      	str	r3, [r4, #16]
    ccac:	9b07      	ldr	r3, [sp, #28]
    ccae:	aa09      	add	r2, sp, #36	; 0x24
    ccb0:	9300      	str	r3, [sp, #0]
    ccb2:	0021      	movs	r1, r4
    ccb4:	9b06      	ldr	r3, [sp, #24]
    ccb6:	9805      	ldr	r0, [sp, #20]
    ccb8:	f7ff fe82 	bl	c9c0 <_printf_common>
    ccbc:	1c43      	adds	r3, r0, #1
    ccbe:	d1b3      	bne.n	cc28 <_printf_i+0x18c>
    ccc0:	2001      	movs	r0, #1
    ccc2:	4240      	negs	r0, r0
    ccc4:	b00b      	add	sp, #44	; 0x2c
    ccc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccc8:	0000f4a4 	.word	0x0000f4a4
    cccc:	0000f493 	.word	0x0000f493

0000ccd0 <_putc_r>:
    ccd0:	b570      	push	{r4, r5, r6, lr}
    ccd2:	0006      	movs	r6, r0
    ccd4:	000d      	movs	r5, r1
    ccd6:	0014      	movs	r4, r2
    ccd8:	2800      	cmp	r0, #0
    ccda:	d004      	beq.n	cce6 <_putc_r+0x16>
    ccdc:	6983      	ldr	r3, [r0, #24]
    ccde:	2b00      	cmp	r3, #0
    cce0:	d101      	bne.n	cce6 <_putc_r+0x16>
    cce2:	f7ff faab 	bl	c23c <__sinit>
    cce6:	4b12      	ldr	r3, [pc, #72]	; (cd30 <_putc_r+0x60>)
    cce8:	429c      	cmp	r4, r3
    ccea:	d111      	bne.n	cd10 <_putc_r+0x40>
    ccec:	6874      	ldr	r4, [r6, #4]
    ccee:	68a3      	ldr	r3, [r4, #8]
    ccf0:	3b01      	subs	r3, #1
    ccf2:	60a3      	str	r3, [r4, #8]
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	da05      	bge.n	cd04 <_putc_r+0x34>
    ccf8:	69a2      	ldr	r2, [r4, #24]
    ccfa:	4293      	cmp	r3, r2
    ccfc:	db12      	blt.n	cd24 <_putc_r+0x54>
    ccfe:	b2eb      	uxtb	r3, r5
    cd00:	2b0a      	cmp	r3, #10
    cd02:	d00f      	beq.n	cd24 <_putc_r+0x54>
    cd04:	6823      	ldr	r3, [r4, #0]
    cd06:	b2e8      	uxtb	r0, r5
    cd08:	1c5a      	adds	r2, r3, #1
    cd0a:	6022      	str	r2, [r4, #0]
    cd0c:	701d      	strb	r5, [r3, #0]
    cd0e:	bd70      	pop	{r4, r5, r6, pc}
    cd10:	4b08      	ldr	r3, [pc, #32]	; (cd34 <_putc_r+0x64>)
    cd12:	429c      	cmp	r4, r3
    cd14:	d101      	bne.n	cd1a <_putc_r+0x4a>
    cd16:	68b4      	ldr	r4, [r6, #8]
    cd18:	e7e9      	b.n	ccee <_putc_r+0x1e>
    cd1a:	4b07      	ldr	r3, [pc, #28]	; (cd38 <_putc_r+0x68>)
    cd1c:	429c      	cmp	r4, r3
    cd1e:	d1e6      	bne.n	ccee <_putc_r+0x1e>
    cd20:	68f4      	ldr	r4, [r6, #12]
    cd22:	e7e4      	b.n	ccee <_putc_r+0x1e>
    cd24:	0022      	movs	r2, r4
    cd26:	0029      	movs	r1, r5
    cd28:	0030      	movs	r0, r6
    cd2a:	f7ff f8c3 	bl	beb4 <__swbuf_r>
    cd2e:	e7ee      	b.n	cd0e <_putc_r+0x3e>
    cd30:	0000f438 	.word	0x0000f438
    cd34:	0000f458 	.word	0x0000f458
    cd38:	0000f418 	.word	0x0000f418

0000cd3c <__sread>:
    cd3c:	b570      	push	{r4, r5, r6, lr}
    cd3e:	000c      	movs	r4, r1
    cd40:	250e      	movs	r5, #14
    cd42:	5f49      	ldrsh	r1, [r1, r5]
    cd44:	f000 f8f0 	bl	cf28 <_read_r>
    cd48:	2800      	cmp	r0, #0
    cd4a:	db03      	blt.n	cd54 <__sread+0x18>
    cd4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    cd4e:	181b      	adds	r3, r3, r0
    cd50:	6563      	str	r3, [r4, #84]	; 0x54
    cd52:	bd70      	pop	{r4, r5, r6, pc}
    cd54:	89a3      	ldrh	r3, [r4, #12]
    cd56:	4a02      	ldr	r2, [pc, #8]	; (cd60 <__sread+0x24>)
    cd58:	4013      	ands	r3, r2
    cd5a:	81a3      	strh	r3, [r4, #12]
    cd5c:	e7f9      	b.n	cd52 <__sread+0x16>
    cd5e:	46c0      	nop			; (mov r8, r8)
    cd60:	ffffefff 	.word	0xffffefff

0000cd64 <__swrite>:
    cd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd66:	001f      	movs	r7, r3
    cd68:	898b      	ldrh	r3, [r1, #12]
    cd6a:	0005      	movs	r5, r0
    cd6c:	000c      	movs	r4, r1
    cd6e:	0016      	movs	r6, r2
    cd70:	05db      	lsls	r3, r3, #23
    cd72:	d505      	bpl.n	cd80 <__swrite+0x1c>
    cd74:	230e      	movs	r3, #14
    cd76:	5ec9      	ldrsh	r1, [r1, r3]
    cd78:	2200      	movs	r2, #0
    cd7a:	2302      	movs	r3, #2
    cd7c:	f000 f88e 	bl	ce9c <_lseek_r>
    cd80:	89a3      	ldrh	r3, [r4, #12]
    cd82:	4a05      	ldr	r2, [pc, #20]	; (cd98 <__swrite+0x34>)
    cd84:	0028      	movs	r0, r5
    cd86:	4013      	ands	r3, r2
    cd88:	81a3      	strh	r3, [r4, #12]
    cd8a:	0032      	movs	r2, r6
    cd8c:	230e      	movs	r3, #14
    cd8e:	5ee1      	ldrsh	r1, [r4, r3]
    cd90:	003b      	movs	r3, r7
    cd92:	f000 f839 	bl	ce08 <_write_r>
    cd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd98:	ffffefff 	.word	0xffffefff

0000cd9c <__sseek>:
    cd9c:	b570      	push	{r4, r5, r6, lr}
    cd9e:	000c      	movs	r4, r1
    cda0:	250e      	movs	r5, #14
    cda2:	5f49      	ldrsh	r1, [r1, r5]
    cda4:	f000 f87a 	bl	ce9c <_lseek_r>
    cda8:	89a3      	ldrh	r3, [r4, #12]
    cdaa:	1c42      	adds	r2, r0, #1
    cdac:	d103      	bne.n	cdb6 <__sseek+0x1a>
    cdae:	4a05      	ldr	r2, [pc, #20]	; (cdc4 <__sseek+0x28>)
    cdb0:	4013      	ands	r3, r2
    cdb2:	81a3      	strh	r3, [r4, #12]
    cdb4:	bd70      	pop	{r4, r5, r6, pc}
    cdb6:	2280      	movs	r2, #128	; 0x80
    cdb8:	0152      	lsls	r2, r2, #5
    cdba:	4313      	orrs	r3, r2
    cdbc:	81a3      	strh	r3, [r4, #12]
    cdbe:	6560      	str	r0, [r4, #84]	; 0x54
    cdc0:	e7f8      	b.n	cdb4 <__sseek+0x18>
    cdc2:	46c0      	nop			; (mov r8, r8)
    cdc4:	ffffefff 	.word	0xffffefff

0000cdc8 <__sclose>:
    cdc8:	b510      	push	{r4, lr}
    cdca:	230e      	movs	r3, #14
    cdcc:	5ec9      	ldrsh	r1, [r1, r3]
    cdce:	f000 f82f 	bl	ce30 <_close_r>
    cdd2:	bd10      	pop	{r4, pc}

0000cdd4 <strchr>:
    cdd4:	b2c9      	uxtb	r1, r1
    cdd6:	7803      	ldrb	r3, [r0, #0]
    cdd8:	2b00      	cmp	r3, #0
    cdda:	d004      	beq.n	cde6 <strchr+0x12>
    cddc:	4299      	cmp	r1, r3
    cdde:	d100      	bne.n	cde2 <strchr+0xe>
    cde0:	4770      	bx	lr
    cde2:	3001      	adds	r0, #1
    cde4:	e7f7      	b.n	cdd6 <strchr+0x2>
    cde6:	424b      	negs	r3, r1
    cde8:	4159      	adcs	r1, r3
    cdea:	4249      	negs	r1, r1
    cdec:	4008      	ands	r0, r1
    cdee:	e7f7      	b.n	cde0 <strchr+0xc>

0000cdf0 <__ascii_wctomb>:
    cdf0:	1e0b      	subs	r3, r1, #0
    cdf2:	d004      	beq.n	cdfe <__ascii_wctomb+0xe>
    cdf4:	2aff      	cmp	r2, #255	; 0xff
    cdf6:	d904      	bls.n	ce02 <__ascii_wctomb+0x12>
    cdf8:	238a      	movs	r3, #138	; 0x8a
    cdfa:	6003      	str	r3, [r0, #0]
    cdfc:	3b8b      	subs	r3, #139	; 0x8b
    cdfe:	0018      	movs	r0, r3
    ce00:	4770      	bx	lr
    ce02:	700a      	strb	r2, [r1, #0]
    ce04:	2301      	movs	r3, #1
    ce06:	e7fa      	b.n	cdfe <__ascii_wctomb+0xe>

0000ce08 <_write_r>:
    ce08:	b570      	push	{r4, r5, r6, lr}
    ce0a:	0005      	movs	r5, r0
    ce0c:	0008      	movs	r0, r1
    ce0e:	0011      	movs	r1, r2
    ce10:	2200      	movs	r2, #0
    ce12:	4c06      	ldr	r4, [pc, #24]	; (ce2c <_write_r+0x24>)
    ce14:	6022      	str	r2, [r4, #0]
    ce16:	001a      	movs	r2, r3
    ce18:	f7f9 fd4a 	bl	68b0 <_write>
    ce1c:	1c43      	adds	r3, r0, #1
    ce1e:	d103      	bne.n	ce28 <_write_r+0x20>
    ce20:	6823      	ldr	r3, [r4, #0]
    ce22:	2b00      	cmp	r3, #0
    ce24:	d000      	beq.n	ce28 <_write_r+0x20>
    ce26:	602b      	str	r3, [r5, #0]
    ce28:	bd70      	pop	{r4, r5, r6, pc}
    ce2a:	46c0      	nop			; (mov r8, r8)
    ce2c:	200012b8 	.word	0x200012b8

0000ce30 <_close_r>:
    ce30:	2300      	movs	r3, #0
    ce32:	b570      	push	{r4, r5, r6, lr}
    ce34:	4c06      	ldr	r4, [pc, #24]	; (ce50 <_close_r+0x20>)
    ce36:	0005      	movs	r5, r0
    ce38:	0008      	movs	r0, r1
    ce3a:	6023      	str	r3, [r4, #0]
    ce3c:	f7f9 fd72 	bl	6924 <_close>
    ce40:	1c43      	adds	r3, r0, #1
    ce42:	d103      	bne.n	ce4c <_close_r+0x1c>
    ce44:	6823      	ldr	r3, [r4, #0]
    ce46:	2b00      	cmp	r3, #0
    ce48:	d000      	beq.n	ce4c <_close_r+0x1c>
    ce4a:	602b      	str	r3, [r5, #0]
    ce4c:	bd70      	pop	{r4, r5, r6, pc}
    ce4e:	46c0      	nop			; (mov r8, r8)
    ce50:	200012b8 	.word	0x200012b8

0000ce54 <_fstat_r>:
    ce54:	2300      	movs	r3, #0
    ce56:	b570      	push	{r4, r5, r6, lr}
    ce58:	4c06      	ldr	r4, [pc, #24]	; (ce74 <_fstat_r+0x20>)
    ce5a:	0005      	movs	r5, r0
    ce5c:	0008      	movs	r0, r1
    ce5e:	0011      	movs	r1, r2
    ce60:	6023      	str	r3, [r4, #0]
    ce62:	f7f9 fd62 	bl	692a <_fstat>
    ce66:	1c43      	adds	r3, r0, #1
    ce68:	d103      	bne.n	ce72 <_fstat_r+0x1e>
    ce6a:	6823      	ldr	r3, [r4, #0]
    ce6c:	2b00      	cmp	r3, #0
    ce6e:	d000      	beq.n	ce72 <_fstat_r+0x1e>
    ce70:	602b      	str	r3, [r5, #0]
    ce72:	bd70      	pop	{r4, r5, r6, pc}
    ce74:	200012b8 	.word	0x200012b8

0000ce78 <_isatty_r>:
    ce78:	2300      	movs	r3, #0
    ce7a:	b570      	push	{r4, r5, r6, lr}
    ce7c:	4c06      	ldr	r4, [pc, #24]	; (ce98 <_isatty_r+0x20>)
    ce7e:	0005      	movs	r5, r0
    ce80:	0008      	movs	r0, r1
    ce82:	6023      	str	r3, [r4, #0]
    ce84:	f7f9 fd56 	bl	6934 <_isatty>
    ce88:	1c43      	adds	r3, r0, #1
    ce8a:	d103      	bne.n	ce94 <_isatty_r+0x1c>
    ce8c:	6823      	ldr	r3, [r4, #0]
    ce8e:	2b00      	cmp	r3, #0
    ce90:	d000      	beq.n	ce94 <_isatty_r+0x1c>
    ce92:	602b      	str	r3, [r5, #0]
    ce94:	bd70      	pop	{r4, r5, r6, pc}
    ce96:	46c0      	nop			; (mov r8, r8)
    ce98:	200012b8 	.word	0x200012b8

0000ce9c <_lseek_r>:
    ce9c:	b570      	push	{r4, r5, r6, lr}
    ce9e:	0005      	movs	r5, r0
    cea0:	0008      	movs	r0, r1
    cea2:	0011      	movs	r1, r2
    cea4:	2200      	movs	r2, #0
    cea6:	4c06      	ldr	r4, [pc, #24]	; (cec0 <_lseek_r+0x24>)
    cea8:	6022      	str	r2, [r4, #0]
    ceaa:	001a      	movs	r2, r3
    ceac:	f7f9 fd44 	bl	6938 <_lseek>
    ceb0:	1c43      	adds	r3, r0, #1
    ceb2:	d103      	bne.n	cebc <_lseek_r+0x20>
    ceb4:	6823      	ldr	r3, [r4, #0]
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	d000      	beq.n	cebc <_lseek_r+0x20>
    ceba:	602b      	str	r3, [r5, #0]
    cebc:	bd70      	pop	{r4, r5, r6, pc}
    cebe:	46c0      	nop			; (mov r8, r8)
    cec0:	200012b8 	.word	0x200012b8

0000cec4 <memchr>:
    cec4:	b2c9      	uxtb	r1, r1
    cec6:	1882      	adds	r2, r0, r2
    cec8:	4290      	cmp	r0, r2
    ceca:	d101      	bne.n	ced0 <memchr+0xc>
    cecc:	2000      	movs	r0, #0
    cece:	4770      	bx	lr
    ced0:	7803      	ldrb	r3, [r0, #0]
    ced2:	428b      	cmp	r3, r1
    ced4:	d0fb      	beq.n	cece <memchr+0xa>
    ced6:	3001      	adds	r0, #1
    ced8:	e7f6      	b.n	cec8 <memchr+0x4>

0000ceda <_realloc_r>:
    ceda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cedc:	0007      	movs	r7, r0
    cede:	000d      	movs	r5, r1
    cee0:	0016      	movs	r6, r2
    cee2:	2900      	cmp	r1, #0
    cee4:	d105      	bne.n	cef2 <_realloc_r+0x18>
    cee6:	0011      	movs	r1, r2
    cee8:	f7fe fd06 	bl	b8f8 <_malloc_r>
    ceec:	0004      	movs	r4, r0
    ceee:	0020      	movs	r0, r4
    cef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cef2:	2a00      	cmp	r2, #0
    cef4:	d103      	bne.n	cefe <_realloc_r+0x24>
    cef6:	f7fe fcb5 	bl	b864 <_free_r>
    cefa:	0034      	movs	r4, r6
    cefc:	e7f7      	b.n	ceee <_realloc_r+0x14>
    cefe:	f000 f827 	bl	cf50 <_malloc_usable_size_r>
    cf02:	002c      	movs	r4, r5
    cf04:	4286      	cmp	r6, r0
    cf06:	d9f2      	bls.n	ceee <_realloc_r+0x14>
    cf08:	0031      	movs	r1, r6
    cf0a:	0038      	movs	r0, r7
    cf0c:	f7fe fcf4 	bl	b8f8 <_malloc_r>
    cf10:	1e04      	subs	r4, r0, #0
    cf12:	d0ec      	beq.n	ceee <_realloc_r+0x14>
    cf14:	0029      	movs	r1, r5
    cf16:	0032      	movs	r2, r6
    cf18:	f7fe fc80 	bl	b81c <memcpy>
    cf1c:	0029      	movs	r1, r5
    cf1e:	0038      	movs	r0, r7
    cf20:	f7fe fca0 	bl	b864 <_free_r>
    cf24:	e7e3      	b.n	ceee <_realloc_r+0x14>
	...

0000cf28 <_read_r>:
    cf28:	b570      	push	{r4, r5, r6, lr}
    cf2a:	0005      	movs	r5, r0
    cf2c:	0008      	movs	r0, r1
    cf2e:	0011      	movs	r1, r2
    cf30:	2200      	movs	r2, #0
    cf32:	4c06      	ldr	r4, [pc, #24]	; (cf4c <_read_r+0x24>)
    cf34:	6022      	str	r2, [r4, #0]
    cf36:	001a      	movs	r2, r3
    cf38:	f7f9 fc98 	bl	686c <_read>
    cf3c:	1c43      	adds	r3, r0, #1
    cf3e:	d103      	bne.n	cf48 <_read_r+0x20>
    cf40:	6823      	ldr	r3, [r4, #0]
    cf42:	2b00      	cmp	r3, #0
    cf44:	d000      	beq.n	cf48 <_read_r+0x20>
    cf46:	602b      	str	r3, [r5, #0]
    cf48:	bd70      	pop	{r4, r5, r6, pc}
    cf4a:	46c0      	nop			; (mov r8, r8)
    cf4c:	200012b8 	.word	0x200012b8

0000cf50 <_malloc_usable_size_r>:
    cf50:	1f0b      	subs	r3, r1, #4
    cf52:	681b      	ldr	r3, [r3, #0]
    cf54:	1f18      	subs	r0, r3, #4
    cf56:	2b00      	cmp	r3, #0
    cf58:	da01      	bge.n	cf5e <_malloc_usable_size_r+0xe>
    cf5a:	580b      	ldr	r3, [r1, r0]
    cf5c:	18c0      	adds	r0, r0, r3
    cf5e:	4770      	bx	lr

0000cf60 <mmc_trans_multipliers>:
    cf60:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    cf70:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    cf80:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    cf90:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000cfa0 <sd_mmc_trans_units>:
    cfa0:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0000cfbc <sd_trans_multipliers>:
    cfbc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    cfcc:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    cfdc:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    cfec:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

0000cffc <__FUNCTION__.14666>:
    cffc:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
    d00c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
    d01c:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
    d02c:	746c 6320 646d 0000 1ef0 0000 1ec0 0000     lt cmd..........
    d03c:	1eb8 0000 1ed0 0000 1ec8 0000 1ee8 0000     ................
    d04c:	1ed8 0000 1ee0 0000                         ........

0000d054 <__FUNCTION__.13113>:
    d054:	6968 5f66 6573 646e 0000 0000               hif_send....

0000d060 <__FUNCTION__.13123>:
    d060:	6968 5f66 7369 0072                         hif_isr.

0000d068 <__FUNCTION__.13132>:
    d068:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0000d078 <__FUNCTION__.13144>:
    d078:	6968 5f66 6572 6563 7669 0065               hif_receive.

0000d084 <__FUNCTION__.13160>:
    d084:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
    d094:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
    d0a4:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
    d0b4:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
    d0c4:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
    d0d4:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
    d0e4:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
    d0f4:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
    d104:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
    d114:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
    d124:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
    d134:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
    d144:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
    d154:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
    d164:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
    d174:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
    d184:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
    d194:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
    d1a4:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
    d1b4:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
    d1c4:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
    d1d4:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
    d1e4:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
    d1f4:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
    d204:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
    d214:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
    d224:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
    d234:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
    d244:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
    d254:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
    d264:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
    d274:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
    d284:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
    d294:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
    d2a4:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
    d2b4:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
    d2c4:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
    d2d4:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
    d2e4:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
    d2f4:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
    d304:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
    d314:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
    d324:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
    d334:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
    d344:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
    d354:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
    d364:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

0000d374 <__FUNCTION__.13095>:
    d374:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0000d380 <__FUNCTION__.13124>:
    d380:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0000d390 <__FUNCTION__.13155>:
    d390:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
    d3a0:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
    d3b0:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
    d3c0:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
    d3d0:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
    d3e0:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
    d3f0:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
    d400:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
    d410:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
    d420:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
    d430:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
    d440:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
    d450:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
    d460:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
    d470:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
    d480:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
    d490:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
    d4a0:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
    d4b0:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
    d4c0:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
    d4d0:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
    d4e0:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
    d4f0:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
    d500:	3831 343a 3a38 3835 0000 0000 7041 2072     18:48:58....Apr 
    d510:	3831 3220 3130 0039 7244 7669 7265 6220     18 2019.Driver b
    d520:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
    d530:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
    d540:	2065 6556 7372 6f69 006e 0000               e Version...

0000d54c <__FUNCTION__.12952>:
    d54c:	6863 7069 775f 6b61 0065 0000               chip_wake...

0000d558 <__FUNCTION__.13001>:
    d558:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
    d568:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
    d578:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
    d588:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
    d598:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
    d5a8:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
    d5b8:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

0000d5c8 <__FUNCTION__.12999>:
    d5c8:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0000d5d4 <__FUNCTION__.13006>:
    d5d4:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
    d5e4:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
    d5f4:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
    d604:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
    d614:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
    d624:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
    d634:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
    d644:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
    d654:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
    d664:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
    d674:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
    d684:	4920 2044 6c25 0a78 0000 0000 2ed0 0000      ID %lx.........
    d694:	2ed0 0000 2f00 0000 2e82 0000 2ea6 0000     ...../..........
    d6a4:	2eb4 0000 2ee6 0000 2ee6 0000 2f2e 0000     ............./..
    d6b4:	2e66 0000 2f68 0000 2f68 0000 2f68 0000     f...h/..h/..h/..
    d6c4:	2f68 0000 2ec2 0000 c9c3 cac4               h/..........

0000d6d0 <__FUNCTION__.12268>:
    d6d0:	7073 5f69 6d63 0064                         spi_cmd.

0000d6d8 <__FUNCTION__.12275>:
    d6d8:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0000d6e8 <__FUNCTION__.12284>:
    d6e8:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0000d6f4 <__FUNCTION__.12300>:
    d6f4:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0000d704 <__FUNCTION__.12315>:
    d704:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0000d714 <__FUNCTION__.12327>:
    d714:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0000d724 <__FUNCTION__.12338>:
    d724:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0000d734 <__FUNCTION__.12350>:
    d734:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0000d744 <__FUNCTION__.12363>:
    d744:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0000d750 <__FUNCTION__.12384>:
    d750:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0000d75c <crc7_syndrome_table>:
    d75c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    d76c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    d77c:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    d78c:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    d79c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    d7ac:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    d7bc:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    d7cc:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    d7dc:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    d7ec:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    d7fc:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    d80c:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    d81c:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    d82c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    d83c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    d84c:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    d85c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    d86c:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    d87c:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
    d88c:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
    d89c:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
    d8ac:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    d8bc:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    d8cc:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
    d8dc:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
    d8ec:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
    d8fc:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
    d90c:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
    d91c:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
    d92c:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    d93c:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
    d94c:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
    d95c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    d96c:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
    d97c:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
    d98c:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
    d99c:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    d9ac:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
    d9bc:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
    d9cc:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
    d9dc:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    d9ec:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
    d9fc:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
    da0c:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
    da1c:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
    da2c:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
    da3c:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
    da4c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    da5c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
    da6c:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
    da7c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    da8c:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
    da9c:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
    daac:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    dabc:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
    dacc:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
    dadc:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
    daec:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
    dafc:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
    db0c:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    db1c:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
    db2c:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
    db3c:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    db4c:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
    db5c:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    db6c:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
    db7c:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
    db8c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    db9c:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
    dbac:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
    dbbc:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    dbcc:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
    dbdc:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
    dbec:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
    dbfc:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
    dc0c:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
    dc1c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
    dc2c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    dc3c:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
    dc4c:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
    dc5c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    dc6c:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
    dc7c:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
    dc8c:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
    dc9c:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
    dcac:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
    dcbc:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
    dccc:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
    dcdc:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
    dcec:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    dcfc:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
    dd0c:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
    dd1c:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
    dd2c:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
    dd3c:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
    dd4c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    dd5c:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
    dd6c:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
    dd7c:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
    dd8c:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
    dd9c:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
    ddac:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
    ddbc:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
    ddcc:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
    dddc:	206e 4449 3d20 2520 0d64 000a 44a4 0000     n ID = %d....D..
    ddec:	44a4 0000 4480 0000 44a4 0000 4480 0000     .D...D...D...D..
    ddfc:	4466 0000 4466 0000 44a4 0000 44a4 0000     fD..fD...D...D..
    de0c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    de1c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    de2c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    de3c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    de4c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    de5c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    de6c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    de7c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    de8c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    de9c:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    deac:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    debc:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    decc:	44a4 0000 44a4 0000 44a4 0000 44a4 0000     .D...D...D...D..
    dedc:	44a4 0000 44a4 0000 44a4 0000 4480 0000     .D...D...D...D..
    deec:	4480 0000 4488 0000 4488 0000 4488 0000     .D...D...D...D..
    defc:	4488 0000 0800 4200 0c00 4200 1000 4200     .D.....B...B...B
    df0c:	1400 4200 1800 4200 1c00 4200 5996 0000     ...B...B...B.Y..
    df1c:	5992 0000 5992 0000 59f8 0000 59f8 0000     .Y...Y...Y...Y..
    df2c:	59aa 0000 599c 0000 59b0 0000 59e6 0000     .Y...Y...Y...Y..
    df3c:	5bb8 0000 5b98 0000 5b98 0000 5c24 0000     .[...[...[..$\..
    df4c:	5baa 0000 5bc6 0000 5b9c 0000 5bd4 0000     .[...[...[...[..
    df5c:	5c14 0000                                   .\..

0000df60 <_tcc_apbcmasks>:
    df60:	0100 0000 0200 0000 0400 0000               ............

0000df6c <_tcc_cc_nums>:
    df6c:	0204 0002                                   ....

0000df70 <_tcc_gclk_ids>:
    df70:	1a1a 001b                                   ....

0000df74 <_tcc_maxs>:
    df74:	ffff 00ff ffff 00ff ffff 0000               ............

0000df80 <_tcc_ow_nums>:
    df80:	0408 0002                                   ....

0000df84 <_tcc_intflag>:
    df84:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    df94:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    dfa4:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0000dfb4 <tcc_interrupt_vectors.12458>:
    dfb4:	100f 0011                                   ....

0000dfb8 <LfnOfs>:
    dfb8:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................

0000dfc8 <excvt.4558>:
    dfc8:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
    dfd8:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
    dfe8:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
    dff8:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
    e008:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
    e018:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
    e028:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
    e038:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................
    e048:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
    e058:	5d5b 0000                                   []..

0000e05c <Tbl>:
    e05c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
    e06c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
    e07c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
    e08c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
    e09c:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
    e0ac:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
    e0bc:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
    e0cc:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
    e0dc:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
    e0ec:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
    e0fc:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
    e10c:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
    e11c:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
    e12c:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
    e13c:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
    e14c:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0000e15c <tbl_lower.4308>:
    e15c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
    e16c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
    e17c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
    e18c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
    e19c:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
    e1ac:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
    e1bc:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
    e1cc:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
    e1dc:	0103 0105 0107 0109 010b 010d 010f 0111     ................
    e1ec:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
    e1fc:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
    e20c:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
    e21c:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
    e22c:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
    e23c:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
    e24c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
    e25c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
    e26c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
    e27c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
    e28c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
    e29c:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
    e2ac:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
    e2bc:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
    e2cc:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
    e2dc:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
    e2ec:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
    e2fc:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
    e30c:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
    e31c:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
    e32c:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0000e33c <tbl_upper.4309>:
    e33c:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
    e34c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
    e35c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
    e36c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
    e37c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
    e38c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
    e39c:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
    e3ac:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
    e3bc:	0102 0104 0106 0108 010a 010c 010e 0110     ................
    e3cc:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
    e3dc:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
    e3ec:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
    e3fc:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
    e40c:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
    e41c:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
    e42c:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
    e43c:	0393 0394 0395 0396 0397 0398 0399 039a     ................
    e44c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
    e45c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
    e46c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
    e47c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
    e48c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
    e49c:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
    e4ac:	0402 0403 0404 0405 0406 0407 0408 0409     ................
    e4bc:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
    e4cc:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
    e4dc:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
    e4ec:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
    e4fc:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
    e50c:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
    e51c:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
    e534:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
    e574:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
    e58c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
    e5cc:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
    e5dc:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
    e5ec:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
    e5fc:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
    e60c:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
    e61c:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
    e62c:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
    e63c:	6f48 7473 203a 0000 6f43 6e6e 6365 6974     Host: ..Connecti
    e64c:	6e6f 203a 654b 7065 412d 696c 6576 0a0d     on: Keep-Alive..
    e65c:	0000 0000 6341 6563 7470 452d 636e 646f     ....Accept-Encod
    e66c:	6e69 3a67 0d20 000a 6341 6563 7470 432d     ing: ...Accept-C
    e67c:	6168 7372 7465 203a 7475 2d66 0d38 000a     harset: utf-8...
    e68c:	7254 6e61 6673 7265 452d 636e 646f 6e69     Transfer-Encodin
    e69c:	3a67 6320 7568 6b6e 6465 0a0d 0000 0000     g: chunked......
    e6ac:	7525 0000 6f43 746e 6e65 2d74 654c 676e     %u..Content-Leng
    e6bc:	6874 203a 0000 0000 7461 656d 2f6c 2e31     th: ....atmel/1.
    e6cc:	2e30 0032 7468 7074 2f3a 002f 7468 7074     0.2.http://.http
    e6dc:	3a73 2f2f 0000 0000 2000 4200 2400 4200     s://..... .B.$.B
    e6ec:	2800 4200 a980 0000 a988 0000 a996 0000     .(.B............
    e6fc:	a9ce 0000 a9e4 0000 0a0d 2520 2a2e 0073     .......... %.*s.
    e70c:	3e20 203e 0000 0000 2e25 732a 0000 0000      >> ....%.*s....
    e71c:	654c 4464 7461 0061 6166 736c 0065 0000     LedData.false...
    e72c:	7274 6575 0000 0000 6f62 746f 6d20 646f     true....boot mod
    e73c:	3a65 6320 6568 6b63 6e69 2067 6669 6220     e: checking if b
    e74c:	6f6f 6c74 616f 6564 2072 726f 6120 7070     ootloader or app
    e75c:	6320 646f 2065 7369 7420 206f 7572 206e      code is to run 
    e76c:	2e2e 2e2e 0d0a 0000 6f62 746f 6d20 646f     ........boot mod
    e77c:	3a65 3e20 203e 6f42 746f 6f6c 6461 7265     e: >> Bootloader
    e78c:	4220 7475 6f74 206e 7270 7365 6573 2064      Button pressed 
    e79c:	0d0a 0000 6f62 746f 6d20 646f 3a65 3e20     ....boot mode: >
    e7ac:	203e 544f 4641 2055 0d0a 0000 6f62 746f     > OTAFU ....boot
    e7bc:	6d20 646f 3a65 3e20 203e 4f4e 4120 5050      mode: >> NO APP
    e7cc:	4120 4156 4c49 4241 454c 0a20 000d 0000      AVAILABLE .....
    e7dc:	6f62 746f 6d20 646f 3a65 3e20 203e 4f4e     boot mode: >> NO
    e7ec:	5620 5245 4953 4e4f 4620 414c 2047 0d0a      VERSION FLAG ..
    e7fc:	0000 0000 6964 6173 6c62 2065 6570 6972     ....disable peri
    e80c:	6870 7265 6c61 3a73 4420 6965 696e 6974     pherals: Deiniti
    e81c:	6c61 7a69 6e69 2067 6570 6972 6870 7265     alizing peripher
    e82c:	6c61 2073 2e2e 2e2e 202e 0d0a 0000 0000     als ..... ......
    e83c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
    e84c:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
    e85c:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
    e86c:	6465 0d2e 0000 0000 7468 7074 635f 696c     ed......http_cli
    e87c:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
    e88c:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
    e89c:	000d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
    e8ac:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
    e8bc:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
    e8cc:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
    e8dc:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
    e8ec:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
    e8fc:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
    e90c:	756a 706d 745f 5f6f 7061 3a70 4a20 6d75     jump_to_app: Jum
    e91c:	6970 676e 7420 206f 7041 6c70 6369 7461     ping to Applicat
    e92c:	6f69 206e 2e2e 2e2e 202e 0d0a 0000 0000     ion ..... ......
    e93c:	0a0d 2d2d 4220 6f6f 6974 676e 7520 2070     ..-- Booting up 
    e94c:	6874 2065 6564 6976 6563 2d20 0d2d 2d0a     the device --..-
    e95c:	202d 4544 4f4c 2053 4e49 2e43 6f20 206e     - DELOS INC. on 
    e96c:	4153 444d 3132 3147 4138 4d20 5543 2d20     SAMD21G18A MCU -
    e97c:	0d2d 2d0a 202d 6f43 706d 6c69 6465 203a     -..-- Compiled: 
    e98c:	7041 2072 3831 3220 3130 2039 3132 303a     Apr 18 2019 21:0
    e99c:	3a32 3834 2d20 0d2d 0000 0000 0a0d 616d     2:48 --.......ma
    e9ac:	6e69 203a 6e49 7469 6169 696c 697a 676e     in: Initializing
    e9bc:	4220 616f 6472 6120 646e 7020 7265 7069      Board and perip
    e9cc:	6568 6172 736c 2e20 2e2e 2e2e 202e 0a0d     herals ...... ..
    e9dc:	000d 0000 6f63 666e 6769 7275 5f65 7468     ....configure_ht
    e9ec:	7074 635f 696c 6e65 3a74 4820 5454 2050     tp_client: HTTP 
    e9fc:	6c63 6569 746e 6920 696e 6974 6c61 7a69     client initializ
    ea0c:	7461 6f69 206e 6166 6c69 6465 2021 7228     ation failed! (r
    ea1c:	7365 2520 2964 0a0d 0000 0000 514d 5454     es %d)......MQTT
    ea2c:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
    ea3c:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
    ea4c:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
    ea5c:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
    ea6c:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
    ea7c:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
    ea8c:	0d29 000a 6e69 7469 735f 6f74 6172 6567     )...init_storage
    ea9c:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
    eaac:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
    eabc:	6c73 746f 2e2e 0d2e 0000 0000 6e69 7469     slot........init
    eacc:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
    eadc:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
    eaec:	0d2e 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
    eafc:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
    eb0c:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
    eb1c:	2e64 000d 6e69 7469 735f 6f74 6172 6567     d...init_storage
    eb2c:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
    eb3c:	6472 2e2e 0d2e 0000 6e69 7469 735f 6f74     rd......init_sto
    eb4c:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
    eb5c:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
    eb6c:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
    eb7c:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
    eb8c:	6e75 2074 4b4f 0d2e 0000 0000 616d 6e69     unt OK......main
    eb9c:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
    ebac:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
    ebbc:	2520 2964 0a0d 0000 0d0a 616d 6e69 203a      %d)......main: 
    ebcc:	3e3e 4220 616f 6472 6120 646e 7020 7265     >> Board and per
    ebdc:	7069 6568 6172 736c 6920 696e 6974 6c61     ipherals initial
    ebec:	7a69 6465 0d0a 0000 0d0a 616d 6e69 203a     ized......main: 
    ebfc:	6f42 746f 6e69 2067 7075 2e20 2e2e 2e2e     Booting up .....
    ec0c:	0a20 000d 616d 6e69 203a 7453 7261 6974      ...main: Starti
    ec1c:	676e 4120 7070 696c 6163 6974 6e6f 2e20     ng Application .
    ec2c:	2e2e 2e2e 0a20 000d 616d 6e69 203a 6843     .... ...main: Ch
    ec3c:	6365 696b 676e 4f20 4154 7520 6470 7461     ecking OTA updat
    ec4c:	7365 2e20 2e2e 2e2e 0a20 000d 616d 6e69     es ..... ...main
    ec5c:	203a 3e3e 4e20 7765 6620 7269 776d 7261     : >> New firmwar
    ec6c:	2065 6f64 6e77 6f6c 6461 6465 0d0a 0000     e downloaded....
    ec7c:	5245 3e52 203e 7953 7473 6369 206b 6f63     ERR>> Systick co
    ec8c:	666e 6769 7275 7461 6f69 206e 7265 6f72     nfiguration erro
    ec9c:	0d72 000a                                   r...

0000eca0 <main_mqtt_broker>:
    eca0:	316d 2e36 6c63 756f 6d64 7471 2e74 6f63     m16.cloudmqtt.co
    ecb0:	006d 0000 0a0d 6f43 6e6e 6365 6974 676e     m.....Connecting
    ecc0:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
    ecd0:	336b 7255 666f 4454 674c 4b44 0000 0000     k3UrofTDLgDK....
    ece0:	7767 6e76 6e76 6663 0000 0000 514d 5454     gwvnvncf....MQTT
    ecf0:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
    ed00:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
    ed10:	0d72 0000 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
    ed20:	6465 7420 206f 7262 6b6f 7265 000d 0000     ed to broker....
    ed30:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
    ed40:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
    ed50:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
    ed60:	796c 0d2e 000a 0000 6554 706d 6144 6174     ly......TempData
    ed70:	0000 0000 514d 5454 4320 6e6f 656e 7463     ....MQTT Connect
    ed80:	6465 000d 514d 5454 6220 6f72 656b 2072     ed..MQTT broker 
    ed90:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
    eda0:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
    edb0:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
    edc0:	6f63 6e6e 6365 6574 0d64 0000 746f 6661     connected...otaf
    edd0:	5f75 6f64 6e77 6f6c 6461 203a 6f44 6e77     u_download: Down
    ede0:	6f6c 6461 6e69 2067 7075 6164 6574 7620     loading update v
    edf0:	7265 6973 6e6f 2e20 2e2e 2e2e 0a20 000d     ersion ..... ...
    ee00:	3025 6433 0000 0000 6473 635f 7261 5f64     %03d....sd_card_
    ee10:	6f74 6e5f 6d76 635f 706f 3a79 5220 6165     to_nvm_copy: Rea
    ee20:	6964 676e 6320 7261 2064 2e2e 2e2e 202e     ding card ..... 
    ee30:	0d0a 0000 4453 565f 5245 3d20 2520 0a75     ....SD_VER = %u.
    ee40:	000d 0000 7325 0000 564e 5f4d 4556 2052     ....%s..NVM_VER 
    ee50:	203d 7525 0d0a 0000 6473 635f 7261 5f64     = %u....sd_card_
    ee60:	6f74 6e5f 6d76 635f 706f 3a79 5620 7265     to_nvm_copy: Ver
    ee70:	6973 6e6f 4420 6669 6566 6572 746e 202c     sion Different, 
    ee80:	7257 7469 6e69 2067 656e 2077 6f63 6564     Writing new code
    ee90:	2e20 2e2e 2e2e 0a20 000d 0000 6473 635f      ..... .....sd_c
    eea0:	7261 5f64 6f74 6e5f 6d76 635f 706f 3a79     ard_to_nvm_copy:
    eeb0:	3e20 203e 6556 7372 6f69 206e 6153 656d      >> Version Same
    eec0:	0a20 000d 6473 6f20 6570 6172 6974 6e6f      ...sd operation
    eed0:	203a 3e3e 4f20 6570 696e 676e 6120 6620     : >> Opening a f
    eee0:	6c69 2065 6166 6c69 6465 0d0a 0000 0000     ile failed......
    eef0:	6473 6f20 6570 6172 6974 6e6f 203a 3e3e     sd operation: >>
    ef00:	4620 6c69 2065 706f 6e65 7320 6375 6563      File open succe
    ef10:	7373 0d0a 0000 0000 6473 6f20 6570 6172     ss......sd opera
    ef20:	6974 6e6f 203a 6e69 7469 6169 6974 676e     tion: initiating
    ef30:	6620 7269 776d 7261 2065 7277 7469 2065      firmware write 
    ef40:	6f74 6e20 6d76 2e20 2e2e 2e2e 2e2e 0a20     to nvm ....... .
    ef50:	000d 0000 6473 6f20 6570 6172 6974 6e6f     ....sd operation
    ef60:	203a 7265 7361 6e69 2067 766e 206d 6f6c     : erasing nvm lo
    ef70:	6163 6974 6e6f 2e20 2e2e 2e2e 2e2e 0a20     cation ....... .
    ef80:	000d 0000 6473 6f20 6570 6172 6974 6e6f     ....sd operation
    ef90:	203a 7277 7469 6e69 2067 6966 6d72 6177     : writing firmwa
    efa0:	6572 7420 206f 766e 206d 2e2e 2e2e 2e2e     re to nvm ......
    efb0:	202e 0d0a 0000 0000 6473 6f20 6570 6172     . ......sd opera
    efc0:	6974 6e6f 203a 6163 636c 6c75 7461 6e69     tion: calculatin
    efd0:	2067 766e 206d 6966 6d72 6177 6572 6320     g nvm firmware c
    efe0:	6372 2e20 2e2e 2e2e 2e2e 0a20 000d 0000     rc ....... .....
    eff0:	6473 6f20 6570 6172 6974 6e6f 203a 6576     sd operation: ve
    f000:	6672 6979 676e 6320 6372 6f20 2066 6473     rfying crc of sd
    f010:	6320 7261 2064 6966 6d72 6177 6572 6120      card firmware a
    f020:	646e 6e20 6d76 6620 7269 776d 7261 2065     nd nvm firmware 
    f030:	2e2e 2e2e 2e2e 202e 0d0a 0000 5243 5f43     ....... ....CRC_
    f040:	454d 204d 203d 7525 0d0a 0000 5243 5f43     MEM = %u....CRC_
    f050:	564e 204d 203d 7525 0d0a 0000 6473 6f20     NVM = %u....sd o
    f060:	6570 6172 6974 6e6f 203a 3e3e 4e20 5745     peration: >> NEW
    f070:	4620 5249 574d 5241 2045 4556 5352 4f49      FIRMWARE VERSIO
    f080:	204e 5055 4144 4554 2044 0d0a 0000 0000     N UPDATED ......
    f090:	6473 6f20 6570 6172 6974 6e6f 203a 3e3e     sd operation: >>
    f0a0:	4e20 5745 4620 5249 574d 5241 2045 5257      NEW FIRMWARE WR
    f0b0:	5449 4554 204e 5553 4343 5345 4653 4c55     ITTEN SUCCESSFUL
    f0c0:	594c 0a20 000d 0000 6473 6f20 6570 6172     LY .....sd opera
    f0d0:	6974 6e6f 203a 3e3e 4e20 5745 4620 5249     tion: >> NEW FIR
    f0e0:	574d 5241 2045 5257 5449 2045 4146 4c49     MWARE WRITE FAIL
    f0f0:	4445 0d0a 0000 0000 7473 7261 5f74 6f64     ED......start_do
    f100:	6e77 6f6c 6461 203a 4d4d 2043 7473 726f     wnload: MMC stor
    f110:	6761 2065 6f6e 2074 6572 6461 2e79 000d     age not ready...
    f120:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
    f130:	6957 462d 2069 7369 6e20 746f 6320 6e6f     Wi-Fi is not con
    f140:	656e 7463 6465 0d2e 0000 0000 7473 7261     nected......star
    f150:	5f74 6f64 6e77 6f6c 6461 203a 6572 7571     t_download: requ
    f160:	7365 2074 7369 7320 6e65 2074 6c61 6572     est is sent alre
    f170:	6461 2e79 000d 0000 7473 7261 5f74 6f64     ady.....start_do
    f180:	6e77 6f6c 6461 203a 7572 6e6e 6e69 2067     wnload: running 
    f190:	6f64 6e77 6f6c 6461 6120 726c 6165 7964     download already
    f1a0:	0d2e 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
    f1b0:	6461 203a 6573 646e 6e69 2067 5448 5054     ad: sending HTTP
    f1c0:	7220 7165 6575 7473 2e2e 0d2e 0000 0000      request........
    f1d0:	7468 7074 3a73 2f2f 7777 2e77 6573 7361     https://www.seas
    f1e0:	752e 6570 6e6e 652e 7564 7e2f 6774 6568     .upenn.edu/~tghe
    f1f0:	6164 6f6f 462f 7269 776d 7261 2e65 6962     daoo/Firmware.bi
    f200:	006e 0000 7473 726f 5f65 6966 656c 705f     n...store_file_p
    f210:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
    f220:	2e61 000d 7473 726f 5f65 6966 656c 705f     a...store_file_p
    f230:	6361 656b 3a74 6320 6572 7461 6e69 2067     acket: creating 
    f240:	6966 656c 5b20 7325 0d5d 000a 7473 726f     file [%s]...stor
    f250:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
    f260:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
    f270:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
    f280:	636e 6c65 6465 0d2e 0000 0000 7473 726f     nceled......stor
    f290:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
    f2a0:	6c69 2065 7263 6165 6974 6e6f 6520 7272     ile creation err
    f2b0:	726f 2021 6572 3a74 6425 0a0d 0000 0000     or! ret:%d......
    f2c0:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
    f2d0:	3a74 6620 6c69 2065 7277 7469 2065 7265     t: file write er
    f2e0:	6f72 2c72 6420 776f 6c6e 616f 2064 6163     ror, download ca
    f2f0:	636e 6c65 6465 0d2e 0000 0000 7473 726f     nceled......stor
    f300:	5f65 6966 656c 705f 6361 656b 3a74 7220     e_file_packet: r
    f310:	6365 6965 6576 5b64 6c25 5d75 202c 6966     eceived[%lu], fi
    f320:	656c 7320 7a69 5b65 6c25 5d75 0a0d 0000     le size[%lu]....
    f330:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
    f340:	3a74 6620 6c69 2065 6f64 6e77 6f6c 6461     t: file download
    f350:	6465 7320 6375 6563 7373 7566 6c6c 2e79     ed successfully.
    f360:	000d 0000 6977 6966 635f 3a62 4d20 4d32     ....wifi_cb: M2M
    f370:	575f 4649 5f49 4f43 4e4e 4345 4554 0d44     _WIFI_CONNECTED.
    f380:	0000 0000 6977 6966 635f 3a62 4d20 4d32     ....wifi_cb: M2M
    f390:	575f 4649 5f49 4944 4353 4e4f 454e 5443     _WIFI_DISCONNECT
    f3a0:	4445 000d 6570 6e6e 3731 3034 6977 6966     ED..penn1740wifi
    f3b0:	0000 0000 6941 5072 6e65 4e6e 7465 442d     ....AirPennNet-D
    f3c0:	7665 6369 0065 0000 6977 6966 635f 3a62     evice...wifi_cb:
    f3d0:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
    f3e0:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
    f3f0:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
    f400:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
    f410:	000d 0000                                   ....

0000f414 <_global_impure_ptr>:
    f414:	0130 2000                                   0.. 

0000f418 <__sf_fake_stderr>:
	...

0000f438 <__sf_fake_stdin>:
	...

0000f458 <__sf_fake_stdout>:
	...
    f478:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
    f488:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
    f498:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
    f4a8:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0000f4b5 <_ctype_>:
    f4b5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
    f4c5:	2020 2020 2020 2020 2020 2020 2020 2020                     
    f4d5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
    f4e5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
    f4f5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
    f505:	0101 0101 0101 0101 0101 0101 1010 1010     ................
    f515:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
    f525:	0202 0202 0202 0202 0202 0202 1010 1010     ................
    f535:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0000f5b8 <_init>:
    f5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5ba:	46c0      	nop			; (mov r8, r8)
    f5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f5be:	bc08      	pop	{r3}
    f5c0:	469e      	mov	lr, r3
    f5c2:	4770      	bx	lr

0000f5c4 <__init_array_start>:
    f5c4:	000000dd 	.word	0x000000dd

0000f5c8 <_fini>:
    f5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f5ca:	46c0      	nop			; (mov r8, r8)
    f5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f5ce:	bc08      	pop	{r3}
    f5d0:	469e      	mov	lr, r3
    f5d2:	4770      	bx	lr

0000f5d4 <__fini_array_start>:
    f5d4:	000000b5 	.word	0x000000b5
